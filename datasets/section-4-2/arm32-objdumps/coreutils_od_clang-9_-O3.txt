
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00011050 <.init>:
   11050:	push	{r3, lr}
   11054:	bl	1137c <__assert_fail@plt+0x48>
   11058:	pop	{r3, pc}

Disassembly of section .plt:

0001105c <calloc@plt-0x14>:
   1105c:	push	{lr}		; (str lr, [sp, #-4]!)
   11060:	ldr	lr, [pc, #4]	; 1106c <calloc@plt-0x4>
   11064:	add	lr, pc, lr
   11068:	ldr	pc, [lr, #8]!
   1106c:	muleq	r1, r4, pc	; <UNPREDICTABLE>

00011070 <calloc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #3988]!	; 0xf94

0001107c <fputs_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #3980]!	; 0xf8c

00011088 <raise@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #3972]!	; 0xf84

00011094 <strcmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a0 <fflush@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #3956]!	; 0xf74

000110ac <free@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #106496	; 0x1a000
   110b4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b8 <ferror@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #106496	; 0x1a000
   110c0:	ldr	pc, [ip, #3940]!	; 0xf64

000110c4 <_exit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #106496	; 0x1a000
   110cc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d0 <memcpy@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #106496	; 0x1a000
   110d8:	ldr	pc, [ip, #3924]!	; 0xf54

000110dc <__strtoull_internal@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #106496	; 0x1a000
   110e4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e8 <mbsinit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #106496	; 0x1a000
   110f0:	ldr	pc, [ip, #3908]!	; 0xf44

000110f4 <strtold@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #106496	; 0x1a000
   110fc:	ldr	pc, [ip, #3900]!	; 0xf3c

00011100 <dcgettext@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #106496	; 0x1a000
   11108:	ldr	pc, [ip, #3892]!	; 0xf34

0001110c <realloc@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #106496	; 0x1a000
   11114:	ldr	pc, [ip, #3884]!	; 0xf2c

00011118 <textdomain@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #106496	; 0x1a000
   11120:	ldr	pc, [ip, #3876]!	; 0xf24

00011124 <iswprint@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #106496	; 0x1a000
   1112c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011130 <__fxstat64@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #106496	; 0x1a000
   11138:	ldr	pc, [ip, #3860]!	; 0xf14

0001113c <fwrite@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #106496	; 0x1a000
   11144:	ldr	pc, [ip, #3852]!	; 0xf0c

00011148 <lseek64@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #106496	; 0x1a000
   11150:	ldr	pc, [ip, #3844]!	; 0xf04

00011154 <__ctype_get_mb_cur_max@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #106496	; 0x1a000
   1115c:	ldr	pc, [ip, #3836]!	; 0xefc

00011160 <__fpending@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #106496	; 0x1a000
   11168:	ldr	pc, [ip, #3828]!	; 0xef4

0001116c <mbrtowc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #106496	; 0x1a000
   11174:	ldr	pc, [ip, #3820]!	; 0xeec

00011178 <error@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #106496	; 0x1a000
   11180:	ldr	pc, [ip, #3812]!	; 0xee4

00011184 <strtof@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #106496	; 0x1a000
   1118c:	ldr	pc, [ip, #3804]!	; 0xedc

00011190 <malloc@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #106496	; 0x1a000
   11198:	ldr	pc, [ip, #3796]!	; 0xed4

0001119c <__libc_start_main@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3788]!	; 0xecc

000111a8 <__vfprintf_chk@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3780]!	; 0xec4

000111b4 <__freading@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3772]!	; 0xebc

000111c0 <__gmon_start__@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111cc <getopt_long@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3756]!	; 0xeac

000111d8 <__ctype_b_loc@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3748]!	; 0xea4

000111e4 <exit@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f0 <bcmp@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3732]!	; 0xe94

000111fc <strlen@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3724]!	; 0xe8c

00011208 <strchr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3716]!	; 0xe84

00011214 <__errno_location@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011220 <__sprintf_chk@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3700]!	; 0xe74

0001122c <__cxa_atexit@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3692]!	; 0xe6c

00011238 <setvbuf@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3684]!	; 0xe64

00011244 <memset@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011250 <fgetc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3668]!	; 0xe54

0001125c <__printf_chk@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3660]!	; 0xe4c

00011268 <strtod@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3652]!	; 0xe44

00011274 <fileno@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011280 <__fprintf_chk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3636]!	; 0xe34

0001128c <fclose@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3628]!	; 0xe2c

00011298 <fseeko64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3620]!	; 0xe24

000112a4 <__overflow@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b0 <setlocale@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3604]!	; 0xe14

000112bc <strrchr@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c8 <nl_langinfo@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3588]!	; 0xe04

000112d4 <localeconv@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e0 <clearerr_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ec <fopen64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3564]!	; 0xdec

000112f8 <bindtextdomain@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3556]!	; 0xde4

00011304 <fread_unlocked@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3548]!	; 0xddc

00011310 <strncmp@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3540]!	; 0xdd4

0001131c <abort@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3532]!	; 0xdcc

00011328 <__snprintf_chk@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3524]!	; 0xdc4

00011334 <__assert_fail@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3516]!	; 0xdbc

Disassembly of section .text:

00011340 <.text>:
   11340:	mov	fp, #0
   11344:	mov	lr, #0
   11348:	pop	{r1}		; (ldr r1, [sp], #4)
   1134c:	mov	r2, sp
   11350:	push	{r2}		; (str r2, [sp, #-4]!)
   11354:	push	{r0}		; (str r0, [sp, #-4]!)
   11358:	ldr	ip, [pc, #16]	; 11370 <__assert_fail@plt+0x3c>
   1135c:	push	{ip}		; (str ip, [sp, #-4]!)
   11360:	ldr	r0, [pc, #12]	; 11374 <__assert_fail@plt+0x40>
   11364:	ldr	r3, [pc, #12]	; 11378 <__assert_fail@plt+0x44>
   11368:	bl	1119c <__libc_start_main@plt>
   1136c:	bl	1131c <abort@plt>
   11370:	andeq	r9, r1, r0, lsl #27
   11374:	andeq	r1, r1, ip, asr #15
   11378:	andeq	r9, r1, r0, lsr #26
   1137c:	ldr	r3, [pc, #20]	; 11398 <__assert_fail@plt+0x64>
   11380:	ldr	r2, [pc, #20]	; 1139c <__assert_fail@plt+0x68>
   11384:	add	r3, pc, r3
   11388:	ldr	r2, [r3, r2]
   1138c:	cmp	r2, #0
   11390:	bxeq	lr
   11394:	b	111c0 <__gmon_start__@plt>
   11398:	andeq	sl, r1, r4, ror ip
   1139c:	strdeq	r0, [r0], -ip
   113a0:	ldr	r0, [pc, #24]	; 113c0 <__assert_fail@plt+0x8c>
   113a4:	ldr	r3, [pc, #24]	; 113c4 <__assert_fail@plt+0x90>
   113a8:	cmp	r3, r0
   113ac:	bxeq	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <__assert_fail@plt+0x94>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	andeq	ip, r2, r8, asr r1
   113c4:	andeq	ip, r2, r8, asr r1
   113c8:	andeq	r0, r0, r0
   113cc:	ldr	r0, [pc, #36]	; 113f8 <__assert_fail@plt+0xc4>
   113d0:	ldr	r1, [pc, #36]	; 113fc <__assert_fail@plt+0xc8>
   113d4:	sub	r1, r1, r0
   113d8:	asr	r1, r1, #2
   113dc:	add	r1, r1, r1, lsr #31
   113e0:	asrs	r1, r1, #1
   113e4:	bxeq	lr
   113e8:	ldr	r3, [pc, #16]	; 11400 <__assert_fail@plt+0xcc>
   113ec:	cmp	r3, #0
   113f0:	bxeq	lr
   113f4:	bx	r3
   113f8:	andeq	ip, r2, r8, asr r1
   113fc:	andeq	ip, r2, r8, asr r1
   11400:	andeq	r0, r0, r0
   11404:	push	{r4, lr}
   11408:	ldr	r4, [pc, #24]	; 11428 <__assert_fail@plt+0xf4>
   1140c:	ldrb	r3, [r4]
   11410:	cmp	r3, #0
   11414:	popne	{r4, pc}
   11418:	bl	113a0 <__assert_fail@plt+0x6c>
   1141c:	mov	r3, #1
   11420:	strb	r3, [r4]
   11424:	pop	{r4, pc}
   11428:	andeq	ip, r2, ip, ror r1
   1142c:	b	113cc <__assert_fail@plt+0x98>
   11430:	push	{fp, lr}
   11434:	mov	fp, sp
   11438:	sub	sp, sp, #64	; 0x40
   1143c:	mov	r4, r0
   11440:	cmp	r0, #0
   11444:	bne	11788 <__assert_fail@plt+0x454>
   11448:	movw	r1, #40403	; 0x9dd3
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	11100 <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	movw	r0, #49708	; 0xc22c
   11464:	movt	r0, #2
   11468:	ldr	r2, [r0]
   1146c:	mov	r0, #1
   11470:	mov	r3, r2
   11474:	str	r2, [sp]
   11478:	bl	1125c <__printf_chk@plt>
   1147c:	movw	r1, #40566	; 0x9e76
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	11100 <dcgettext@plt>
   11490:	movw	r7, #49524	; 0xc174
   11494:	movt	r7, #2
   11498:	ldr	r1, [r7]
   1149c:	bl	1107c <fputs_unlocked@plt>
   114a0:	movw	r1, #44046	; 0xac0e
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	movt	r1, #1
   114b0:	bl	11100 <dcgettext@plt>
   114b4:	ldr	r1, [r7]
   114b8:	bl	1107c <fputs_unlocked@plt>
   114bc:	movw	r1, #40748	; 0x9f2c
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	movt	r1, #1
   114cc:	bl	11100 <dcgettext@plt>
   114d0:	ldr	r1, [r7]
   114d4:	bl	1107c <fputs_unlocked@plt>
   114d8:	movw	r1, #44102	; 0xac46
   114dc:	mov	r0, #0
   114e0:	mov	r2, #5
   114e4:	movt	r1, #1
   114e8:	bl	11100 <dcgettext@plt>
   114ec:	ldr	r1, [r7]
   114f0:	bl	1107c <fputs_unlocked@plt>
   114f4:	movw	r1, #41139	; 0xa0b3
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	11100 <dcgettext@plt>
   11508:	ldr	r1, [r7]
   1150c:	bl	1107c <fputs_unlocked@plt>
   11510:	movw	r1, #41426	; 0xa1d2
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11100 <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	1107c <fputs_unlocked@plt>
   1152c:	movw	r1, #41978	; 0xa3fa
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11100 <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	1107c <fputs_unlocked@plt>
   11548:	movw	r1, #42023	; 0xa427
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	11100 <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	1107c <fputs_unlocked@plt>
   11564:	movw	r1, #42077	; 0xa45d
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	11100 <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	1107c <fputs_unlocked@plt>
   11580:	movw	r1, #42392	; 0xa598
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	11100 <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	1107c <fputs_unlocked@plt>
   1159c:	movw	r1, #42666	; 0xa6aa
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	11100 <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	1107c <fputs_unlocked@plt>
   115b8:	movw	r1, #42832	; 0xa750
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11100 <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	1107c <fputs_unlocked@plt>
   115d4:	movw	r1, #43081	; 0xa849
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	movt	r1, #1
   115e4:	bl	11100 <dcgettext@plt>
   115e8:	ldr	r1, [r7]
   115ec:	bl	1107c <fputs_unlocked@plt>
   115f0:	movw	r1, #43325	; 0xa93d
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	movt	r1, #1
   11600:	bl	11100 <dcgettext@plt>
   11604:	ldr	r1, [r7]
   11608:	bl	1107c <fputs_unlocked@plt>
   1160c:	movw	r1, #43419	; 0xa99b
   11610:	mov	r0, #0
   11614:	mov	r2, #5
   11618:	movt	r1, #1
   1161c:	bl	11100 <dcgettext@plt>
   11620:	ldr	r1, [r7]
   11624:	bl	1107c <fputs_unlocked@plt>
   11628:	movw	r0, #45608	; 0xb228
   1162c:	mov	r2, #48	; 0x30
   11630:	add	r6, sp, #8
   11634:	movw	r5, #43651	; 0xaa83
   11638:	movt	r0, #1
   1163c:	movt	r5, #1
   11640:	add	r1, r0, #32
   11644:	add	r3, r0, #16
   11648:	vld1.64	{d18-d19}, [r0], r2
   1164c:	vld1.64	{d16-d17}, [r1]
   11650:	vld1.64	{d20-d21}, [r3]
   11654:	vldr	d22, [r0]
   11658:	add	r1, r6, #32
   1165c:	add	r0, r6, #16
   11660:	vst1.64	{d16-d17}, [r1]
   11664:	movw	r1, #44177	; 0xac91
   11668:	vst1.64	{d20-d21}, [r0]
   1166c:	mov	r0, r6
   11670:	movt	r1, #1
   11674:	vst1.64	{d18-d19}, [r0], r2
   11678:	vstr	d22, [r0]
   1167c:	mov	r0, r5
   11680:	bl	11094 <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	ldrne	r1, [r6, #8]!
   1168c:	cmpne	r1, #0
   11690:	bne	1167c <__assert_fail@plt+0x348>
   11694:	movw	r1, #44272	; 0xacf0
   11698:	ldr	r6, [r6, #4]
   1169c:	mov	r0, #0
   116a0:	mov	r2, #5
   116a4:	movt	r1, #1
   116a8:	bl	11100 <dcgettext@plt>
   116ac:	movw	r2, #43811	; 0xab23
   116b0:	movw	r3, #44295	; 0xad07
   116b4:	mov	r1, r0
   116b8:	mov	r0, #1
   116bc:	movt	r2, #1
   116c0:	movt	r3, #1
   116c4:	bl	1125c <__printf_chk@plt>
   116c8:	cmp	r6, #0
   116cc:	mov	r0, #5
   116d0:	mov	r1, #0
   116d4:	moveq	r6, r5
   116d8:	bl	112b0 <setlocale@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11718 <__assert_fail@plt+0x3e4>
   116e4:	movw	r1, #44335	; 0xad2f
   116e8:	mov	r2, #3
   116ec:	movt	r1, #1
   116f0:	bl	11310 <strncmp@plt>
   116f4:	cmp	r0, #0
   116f8:	beq	11718 <__assert_fail@plt+0x3e4>
   116fc:	movw	r1, #44339	; 0xad33
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	11100 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	1107c <fputs_unlocked@plt>
   11718:	movw	r1, #44410	; 0xad7a
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	11100 <dcgettext@plt>
   1172c:	movw	r2, #44295	; 0xad07
   11730:	mov	r1, r0
   11734:	mov	r0, #1
   11738:	mov	r3, r5
   1173c:	movt	r2, #1
   11740:	bl	1125c <__printf_chk@plt>
   11744:	movw	r1, #44437	; 0xad95
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	11100 <dcgettext@plt>
   11758:	mov	r1, r0
   1175c:	movw	r0, #44205	; 0xacad
   11760:	movw	r3, #44487	; 0xadc7
   11764:	cmp	r6, r5
   11768:	mov	r2, r6
   1176c:	movt	r0, #1
   11770:	movt	r3, #1
   11774:	moveq	r3, r0
   11778:	mov	r0, #1
   1177c:	bl	1125c <__printf_chk@plt>
   11780:	mov	r0, r4
   11784:	bl	111e4 <exit@plt>
   11788:	movw	r0, #49512	; 0xc168
   1178c:	movw	r1, #40364	; 0x9dac
   11790:	mov	r2, #5
   11794:	movt	r0, #2
   11798:	movt	r1, #1
   1179c:	ldr	r5, [r0]
   117a0:	mov	r0, #0
   117a4:	bl	11100 <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r0, #49708	; 0xc22c
   117b0:	mov	r1, #1
   117b4:	movt	r0, #2
   117b8:	ldr	r3, [r0]
   117bc:	mov	r0, r5
   117c0:	bl	11280 <__fprintf_chk@plt>
   117c4:	mov	r0, r4
   117c8:	bl	111e4 <exit@plt>
   117cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d0:	add	fp, sp, #28
   117d4:	sub	sp, sp, #148	; 0x94
   117d8:	sub	sp, sp, #8192	; 0x2000
   117dc:	mov	r6, r0
   117e0:	ldr	r0, [r1]
   117e4:	mov	r4, r1
   117e8:	bl	15c90 <__assert_fail@plt+0x495c>
   117ec:	movw	r1, #44487	; 0xadc7
   117f0:	mov	r0, #6
   117f4:	mov	r7, #6
   117f8:	movt	r1, #1
   117fc:	bl	112b0 <setlocale@plt>
   11800:	movw	r5, #43815	; 0xab27
   11804:	movw	r1, #43654	; 0xaa86
   11808:	movt	r5, #1
   1180c:	movt	r1, #1
   11810:	mov	r0, r5
   11814:	bl	112f8 <bindtextdomain@plt>
   11818:	mov	r0, r5
   1181c:	bl	11118 <textdomain@plt>
   11820:	movw	r0, #21992	; 0x55e8
   11824:	movt	r0, #1
   11828:	bl	19d84 <__assert_fail@plt+0x8a50>
   1182c:	movw	r3, #49576	; 0xc1a8
   11830:	vmov.i32	q8, #0	; 0x00000000
   11834:	movw	r5, #13516	; 0x34cc
   11838:	mov	r2, #8
   1183c:	mov	r8, #0
   11840:	mov	r9, #1
   11844:	movw	sl, #45317	; 0xb105
   11848:	movt	r3, #2
   1184c:	movt	r5, #1
   11850:	movt	sl, #1
   11854:	add	r0, r3, #88	; 0x58
   11858:	vst1.64	{d16-d17}, [r0]
   1185c:	add	r0, r3, #104	; 0x68
   11860:	vst1.64	{d16-d17}, [r0]
   11864:	movw	r0, #49536	; 0xc180
   11868:	movt	r0, #2
   1186c:	add	r1, r0, #16
   11870:	vst1.64	{d16-d17}, [r1]
   11874:	mov	r1, #5
   11878:	str	r7, [r0, #16]
   1187c:	movw	r7, #45352	; 0xb128
   11880:	str	r1, [r3, #120]	; 0x78
   11884:	str	r8, [r3, #12]
   11888:	str	r8, [r3, #16]
   1188c:	str	r8, [r3, #20]
   11890:	str	r5, [r3, #24]
   11894:	str	r2, [r3, #28]
   11898:	mov	r1, #7
   1189c:	mov	r2, #2
   118a0:	movt	r7, #1
   118a4:	str	r1, [r3, #32]
   118a8:	strb	r8, [r3]
   118ac:	str	r9, [r3, #92]	; 0x5c
   118b0:	str	r2, [r3, #96]	; 0x60
   118b4:	mov	r2, #4
   118b8:	str	r2, [r3, #104]	; 0x68
   118bc:	mov	r2, #32
   118c0:	vst1.64	{d16-d17}, [r0], r2
   118c4:	str	r1, [r0]
   118c8:	mov	r0, #0
   118cc:	str	r0, [sp, #32]
   118d0:	b	118e4 <__assert_fail@plt+0x5b0>
   118d4:	movw	r0, #43808	; 0xab20
   118d8:	movt	r0, #1
   118dc:	bl	1361c <__assert_fail@plt+0x22e8>
   118e0:	and	r9, r9, r0
   118e4:	mvn	r0, #0
   118e8:	mov	r1, r4
   118ec:	mov	r2, sl
   118f0:	mov	r3, r7
   118f4:	str	r0, [sp, #36]	; 0x24
   118f8:	add	r0, sp, #36	; 0x24
   118fc:	str	r0, [sp]
   11900:	mov	r0, r6
   11904:	bl	111cc <getopt_long@plt>
   11908:	add	r0, r0, #3
   1190c:	cmp	r0, #260	; 0x104
   11910:	bhi	1328c <__assert_fail@plt+0x1f58>
   11914:	add	r1, pc, #0
   11918:	ldr	pc, [r1, r0, lsl #2]
   1191c:	muleq	r1, r4, r2
   11920:	ldrdeq	r3, [r1], -ip
   11924:	strheq	r2, [r1], -ip
   11928:	andeq	r3, r1, ip, lsl #5
   1192c:	andeq	r3, r1, ip, lsl #5
   11930:	andeq	r3, r1, ip, lsl #5
   11934:	andeq	r3, r1, ip, lsl #5
   11938:	andeq	r3, r1, ip, lsl #5
   1193c:	andeq	r3, r1, ip, lsl #5
   11940:	andeq	r3, r1, ip, lsl #5
   11944:	andeq	r3, r1, ip, lsl #5
   11948:	andeq	r3, r1, ip, lsl #5
   1194c:	andeq	r3, r1, ip, lsl #5
   11950:	andeq	r3, r1, ip, lsl #5
   11954:	andeq	r3, r1, ip, lsl #5
   11958:	andeq	r3, r1, ip, lsl #5
   1195c:	andeq	r3, r1, ip, lsl #5
   11960:	andeq	r3, r1, ip, lsl #5
   11964:	andeq	r3, r1, ip, lsl #5
   11968:	andeq	r3, r1, ip, lsl #5
   1196c:	andeq	r3, r1, ip, lsl #5
   11970:	andeq	r3, r1, ip, lsl #5
   11974:	andeq	r3, r1, ip, lsl #5
   11978:	andeq	r3, r1, ip, lsl #5
   1197c:	andeq	r3, r1, ip, lsl #5
   11980:	andeq	r3, r1, ip, lsl #5
   11984:	andeq	r3, r1, ip, lsl #5
   11988:	andeq	r3, r1, ip, lsl #5
   1198c:	andeq	r3, r1, ip, lsl #5
   11990:	andeq	r3, r1, ip, lsl #5
   11994:	andeq	r3, r1, ip, lsl #5
   11998:	andeq	r3, r1, ip, lsl #5
   1199c:	andeq	r3, r1, ip, lsl #5
   119a0:	andeq	r3, r1, ip, lsl #5
   119a4:	andeq	r3, r1, ip, lsl #5
   119a8:	andeq	r3, r1, ip, lsl #5
   119ac:	andeq	r3, r1, ip, lsl #5
   119b0:	andeq	r3, r1, ip, lsl #5
   119b4:	andeq	r3, r1, ip, lsl #5
   119b8:	andeq	r3, r1, ip, lsl #5
   119bc:	andeq	r3, r1, ip, lsl #5
   119c0:	andeq	r3, r1, ip, lsl #5
   119c4:	andeq	r3, r1, ip, lsl #5
   119c8:	andeq	r3, r1, ip, lsl #5
   119cc:	andeq	r3, r1, ip, lsl #5
   119d0:	andeq	r3, r1, ip, lsl #5
   119d4:	andeq	r3, r1, ip, lsl #5
   119d8:	andeq	r3, r1, ip, lsl #5
   119dc:	andeq	r3, r1, ip, lsl #5
   119e0:	andeq	r3, r1, ip, lsl #5
   119e4:	andeq	r3, r1, ip, lsl #5
   119e8:	andeq	r3, r1, ip, lsl #5
   119ec:	andeq	r3, r1, ip, lsl #5
   119f0:	andeq	r3, r1, ip, lsl #5
   119f4:	andeq	r3, r1, ip, lsl #5
   119f8:	andeq	r3, r1, ip, lsl #5
   119fc:	andeq	r3, r1, ip, lsl #5
   11a00:	andeq	r3, r1, ip, lsl #5
   11a04:	andeq	r3, r1, ip, lsl #5
   11a08:	andeq	r3, r1, ip, lsl #5
   11a0c:	andeq	r3, r1, ip, lsl #5
   11a10:	andeq	r3, r1, ip, lsl #5
   11a14:	andeq	r3, r1, ip, lsl #5
   11a18:	andeq	r3, r1, ip, lsl #5
   11a1c:	andeq	r3, r1, ip, lsl #5
   11a20:	andeq	r3, r1, ip, lsl #5
   11a24:	andeq	r3, r1, ip, lsl #5
   11a28:	andeq	r3, r1, ip, lsl #5
   11a2c:			; <UNDEFINED> instruction: 0x00011db8
   11a30:	andeq	r1, r1, ip, lsr sp
   11a34:	andeq	r3, r1, ip, lsl #5
   11a38:	muleq	r1, r4, lr
   11a3c:	andeq	r3, r1, ip, lsl #5
   11a40:	andeq	r1, r1, r8, asr #26
   11a44:	andeq	r3, r1, ip, lsl #5
   11a48:	andeq	r1, r1, r4, asr sp
   11a4c:	andeq	r1, r1, r0, lsr sp
   11a50:	andeq	r3, r1, ip, lsl #5
   11a54:	andeq	r3, r1, ip, lsl #5
   11a58:	andeq	r1, r1, r0, lsr sp
   11a5c:	andeq	r3, r1, ip, lsl #5
   11a60:	strdeq	r1, [r1], -r8
   11a64:	muleq	r1, r4, sp
   11a68:	andeq	r3, r1, ip, lsl #5
   11a6c:	andeq	r3, r1, ip, lsl #5
   11a70:	andeq	r3, r1, ip, lsl #5
   11a74:	andeq	r1, r1, r8, asr #28
   11a78:	andeq	r3, r1, ip, lsl #5
   11a7c:	andeq	r3, r1, ip, lsl #5
   11a80:	andeq	r3, r1, ip, lsl #5
   11a84:	andeq	r3, r1, ip, lsl #5
   11a88:	andeq	r1, r1, r4, asr sp
   11a8c:	andeq	r3, r1, ip, lsl #5
   11a90:	andeq	r3, r1, ip, lsl #5
   11a94:	andeq	r3, r1, ip, lsl #5
   11a98:	andeq	r3, r1, ip, lsl #5
   11a9c:	andeq	r3, r1, ip, lsl #5
   11aa0:	andeq	r3, r1, ip, lsl #5
   11aa4:	andeq	r3, r1, ip, lsl #5
   11aa8:	andeq	r3, r1, ip, lsl #5
   11aac:	andeq	r1, r1, ip, ror sp
   11ab0:	andeq	r1, r1, ip, lsr #29
   11ab4:	andeq	r1, r1, r0, lsr #27
   11ab8:	andeq	r1, r1, ip, lsr #27
   11abc:	andeq	r1, r1, r8, asr #26
   11ac0:	andeq	r1, r1, r0, lsr #29
   11ac4:	andeq	r3, r1, ip, lsl #5
   11ac8:	ldrdeq	r1, [r1], -r4
   11acc:	andeq	r1, r1, ip, lsr lr
   11ad0:			; <UNDEFINED> instruction: 0x00011eb8
   11ad4:	andeq	r3, r1, ip, lsl #5
   11ad8:	andeq	r1, r1, r0, lsr sp
   11adc:	andeq	r3, r1, ip, lsl #5
   11ae0:	andeq	r3, r1, ip, lsl #5
   11ae4:	andeq	r1, r1, ip, lsr sp
   11ae8:	andeq	r3, r1, ip, lsl #5
   11aec:	andeq	r3, r1, ip, lsl #5
   11af0:	andeq	r3, r1, ip, lsl #5
   11af4:	andeq	r1, r1, r8, lsl #27
   11af8:	andeq	r1, r1, r0, ror #26
   11afc:	andeq	r3, r1, ip, lsl #5
   11b00:			; <UNDEFINED> instruction: 0x00011fb8
   11b04:	andeq	r1, r1, ip, asr #31
   11b08:	ldrdeq	r1, [r1], -r4
   11b0c:	andeq	r3, r1, ip, lsl #5
   11b10:	andeq	r3, r1, ip, lsl #5
   11b14:	andeq	r3, r1, ip, lsl #5
   11b18:	andeq	r3, r1, ip, lsl #5
   11b1c:	andeq	r3, r1, ip, lsl #5
   11b20:	andeq	r3, r1, ip, lsl #5
   11b24:	andeq	r3, r1, ip, lsl #5
   11b28:	andeq	r3, r1, ip, lsl #5
   11b2c:	andeq	r3, r1, ip, lsl #5
   11b30:	andeq	r3, r1, ip, lsl #5
   11b34:	andeq	r3, r1, ip, lsl #5
   11b38:	andeq	r3, r1, ip, lsl #5
   11b3c:	andeq	r3, r1, ip, lsl #5
   11b40:	andeq	r3, r1, ip, lsl #5
   11b44:	andeq	r3, r1, ip, lsl #5
   11b48:	andeq	r3, r1, ip, lsl #5
   11b4c:	andeq	r3, r1, ip, lsl #5
   11b50:	andeq	r3, r1, ip, lsl #5
   11b54:	andeq	r3, r1, ip, lsl #5
   11b58:	andeq	r3, r1, ip, lsl #5
   11b5c:	andeq	r3, r1, ip, lsl #5
   11b60:	andeq	r3, r1, ip, lsl #5
   11b64:	andeq	r3, r1, ip, lsl #5
   11b68:	andeq	r3, r1, ip, lsl #5
   11b6c:	andeq	r3, r1, ip, lsl #5
   11b70:	andeq	r3, r1, ip, lsl #5
   11b74:	andeq	r3, r1, ip, lsl #5
   11b78:	andeq	r3, r1, ip, lsl #5
   11b7c:	andeq	r3, r1, ip, lsl #5
   11b80:	andeq	r3, r1, ip, lsl #5
   11b84:	andeq	r3, r1, ip, lsl #5
   11b88:	andeq	r3, r1, ip, lsl #5
   11b8c:	andeq	r3, r1, ip, lsl #5
   11b90:	andeq	r3, r1, ip, lsl #5
   11b94:	andeq	r3, r1, ip, lsl #5
   11b98:	andeq	r3, r1, ip, lsl #5
   11b9c:	andeq	r3, r1, ip, lsl #5
   11ba0:	andeq	r3, r1, ip, lsl #5
   11ba4:	andeq	r3, r1, ip, lsl #5
   11ba8:	andeq	r3, r1, ip, lsl #5
   11bac:	andeq	r3, r1, ip, lsl #5
   11bb0:	andeq	r3, r1, ip, lsl #5
   11bb4:	andeq	r3, r1, ip, lsl #5
   11bb8:	andeq	r3, r1, ip, lsl #5
   11bbc:	andeq	r3, r1, ip, lsl #5
   11bc0:	andeq	r3, r1, ip, lsl #5
   11bc4:	andeq	r3, r1, ip, lsl #5
   11bc8:	andeq	r3, r1, ip, lsl #5
   11bcc:	andeq	r3, r1, ip, lsl #5
   11bd0:	andeq	r3, r1, ip, lsl #5
   11bd4:	andeq	r3, r1, ip, lsl #5
   11bd8:	andeq	r3, r1, ip, lsl #5
   11bdc:	andeq	r3, r1, ip, lsl #5
   11be0:	andeq	r3, r1, ip, lsl #5
   11be4:	andeq	r3, r1, ip, lsl #5
   11be8:	andeq	r3, r1, ip, lsl #5
   11bec:	andeq	r3, r1, ip, lsl #5
   11bf0:	andeq	r3, r1, ip, lsl #5
   11bf4:	andeq	r3, r1, ip, lsl #5
   11bf8:	andeq	r3, r1, ip, lsl #5
   11bfc:	andeq	r3, r1, ip, lsl #5
   11c00:	andeq	r3, r1, ip, lsl #5
   11c04:	andeq	r3, r1, ip, lsl #5
   11c08:	andeq	r3, r1, ip, lsl #5
   11c0c:	andeq	r3, r1, ip, lsl #5
   11c10:	andeq	r3, r1, ip, lsl #5
   11c14:	andeq	r3, r1, ip, lsl #5
   11c18:	andeq	r3, r1, ip, lsl #5
   11c1c:	andeq	r3, r1, ip, lsl #5
   11c20:	andeq	r3, r1, ip, lsl #5
   11c24:	andeq	r3, r1, ip, lsl #5
   11c28:	andeq	r3, r1, ip, lsl #5
   11c2c:	andeq	r3, r1, ip, lsl #5
   11c30:	andeq	r3, r1, ip, lsl #5
   11c34:	andeq	r3, r1, ip, lsl #5
   11c38:	andeq	r3, r1, ip, lsl #5
   11c3c:	andeq	r3, r1, ip, lsl #5
   11c40:	andeq	r3, r1, ip, lsl #5
   11c44:	andeq	r3, r1, ip, lsl #5
   11c48:	andeq	r3, r1, ip, lsl #5
   11c4c:	andeq	r3, r1, ip, lsl #5
   11c50:	andeq	r3, r1, ip, lsl #5
   11c54:	andeq	r3, r1, ip, lsl #5
   11c58:	andeq	r3, r1, ip, lsl #5
   11c5c:	andeq	r3, r1, ip, lsl #5
   11c60:	andeq	r3, r1, ip, lsl #5
   11c64:	andeq	r3, r1, ip, lsl #5
   11c68:	andeq	r3, r1, ip, lsl #5
   11c6c:	andeq	r3, r1, ip, lsl #5
   11c70:	andeq	r3, r1, ip, lsl #5
   11c74:	andeq	r3, r1, ip, lsl #5
   11c78:	andeq	r3, r1, ip, lsl #5
   11c7c:	andeq	r3, r1, ip, lsl #5
   11c80:	andeq	r3, r1, ip, lsl #5
   11c84:	andeq	r3, r1, ip, lsl #5
   11c88:	andeq	r3, r1, ip, lsl #5
   11c8c:	andeq	r3, r1, ip, lsl #5
   11c90:	andeq	r3, r1, ip, lsl #5
   11c94:	andeq	r3, r1, ip, lsl #5
   11c98:	andeq	r3, r1, ip, lsl #5
   11c9c:	andeq	r3, r1, ip, lsl #5
   11ca0:	andeq	r3, r1, ip, lsl #5
   11ca4:	andeq	r3, r1, ip, lsl #5
   11ca8:	andeq	r3, r1, ip, lsl #5
   11cac:	andeq	r3, r1, ip, lsl #5
   11cb0:	andeq	r3, r1, ip, lsl #5
   11cb4:	andeq	r3, r1, ip, lsl #5
   11cb8:	andeq	r3, r1, ip, lsl #5
   11cbc:	andeq	r3, r1, ip, lsl #5
   11cc0:	andeq	r3, r1, ip, lsl #5
   11cc4:	andeq	r3, r1, ip, lsl #5
   11cc8:	andeq	r3, r1, ip, lsl #5
   11ccc:	andeq	r3, r1, ip, lsl #5
   11cd0:	andeq	r3, r1, ip, lsl #5
   11cd4:	andeq	r3, r1, ip, lsl #5
   11cd8:	andeq	r3, r1, ip, lsl #5
   11cdc:	andeq	r3, r1, ip, lsl #5
   11ce0:	andeq	r3, r1, ip, lsl #5
   11ce4:	andeq	r3, r1, ip, lsl #5
   11ce8:	andeq	r3, r1, ip, lsl #5
   11cec:	andeq	r3, r1, ip, lsl #5
   11cf0:	andeq	r3, r1, ip, lsl #5
   11cf4:	andeq	r3, r1, ip, lsl #5
   11cf8:	andeq	r3, r1, ip, lsl #5
   11cfc:	andeq	r3, r1, ip, lsl #5
   11d00:	andeq	r3, r1, ip, lsl #5
   11d04:	andeq	r3, r1, ip, lsl #5
   11d08:	andeq	r3, r1, ip, lsl #5
   11d0c:	andeq	r3, r1, ip, lsl #5
   11d10:	andeq	r3, r1, ip, lsl #5
   11d14:	andeq	r3, r1, ip, lsl #5
   11d18:	andeq	r3, r1, ip, lsl #5
   11d1c:	andeq	r3, r1, ip, lsl #5
   11d20:	andeq	r3, r1, ip, lsl #5
   11d24:	andeq	r3, r1, ip, lsl #5
   11d28:	andeq	r1, r1, r0, asr #30
   11d2c:	andeq	r1, r1, r4, asr pc
   11d30:	movw	r0, #43796	; 0xab14
   11d34:	movt	r0, #1
   11d38:	b	118dc <__assert_fail@plt+0x5a8>
   11d3c:	movw	r0, #43802	; 0xab1a
   11d40:	movt	r0, #1
   11d44:	b	118dc <__assert_fail@plt+0x5a8>
   11d48:	movw	r0, #43784	; 0xab08
   11d4c:	movt	r0, #1
   11d50:	b	118dc <__assert_fail@plt+0x5a8>
   11d54:	movw	r0, #43790	; 0xab0e
   11d58:	movt	r0, #1
   11d5c:	b	118dc <__assert_fail@plt+0x5a8>
   11d60:	movw	r0, #49528	; 0xc178
   11d64:	movt	r0, #2
   11d68:	ldr	r0, [r0]
   11d6c:	bl	1361c <__assert_fail@plt+0x22e8>
   11d70:	and	r9, r9, r0
   11d74:	mov	r8, #1
   11d78:	b	118e4 <__assert_fail@plt+0x5b0>
   11d7c:	movw	r0, #45080	; 0xb018
   11d80:	movt	r0, #1
   11d84:	b	118dc <__assert_fail@plt+0x5a8>
   11d88:	movw	r0, #43805	; 0xab1d
   11d8c:	movt	r0, #1
   11d90:	b	118dc <__assert_fail@plt+0x5a8>
   11d94:	movw	r0, #43799	; 0xab17
   11d98:	movt	r0, #1
   11d9c:	b	118dc <__assert_fail@plt+0x5a8>
   11da0:	movw	r0, #45101	; 0xb02d
   11da4:	movt	r0, #1
   11da8:	b	118dc <__assert_fail@plt+0x5a8>
   11dac:	movw	r0, #43781	; 0xab05
   11db0:	movt	r0, #1
   11db4:	b	118dc <__assert_fail@plt+0x5a8>
   11db8:	movw	r5, #49528	; 0xc178
   11dbc:	movt	r5, #2
   11dc0:	ldr	r0, [r5]
   11dc4:	ldrb	r0, [r0]
   11dc8:	sub	r0, r0, #100	; 0x64
   11dcc:	cmp	r0, #20
   11dd0:	bhi	132e4 <__assert_fail@plt+0x1fb0>
   11dd4:	add	r1, pc, #0
   11dd8:	ldr	pc, [r1, r0, lsl #2]
   11ddc:	andeq	r1, r1, r0, lsr lr
   11de0:	andeq	r3, r1, r4, ror #5
   11de4:	andeq	r3, r1, r4, ror #5
   11de8:	andeq	r3, r1, r4, ror #5
   11dec:	andeq	r3, r1, r4, ror #5
   11df0:	andeq	r3, r1, r4, ror #5
   11df4:	andeq	r3, r1, r4, ror #5
   11df8:	andeq	r3, r1, r4, ror #5
   11dfc:	andeq	r3, r1, r4, ror #5
   11e00:	andeq	r3, r1, r4, ror #5
   11e04:	andeq	r2, r1, ip, rrx
   11e08:	muleq	r1, r0, r0
   11e0c:	andeq	r3, r1, r4, ror #5
   11e10:	andeq	r3, r1, r4, ror #5
   11e14:	andeq	r3, r1, r4, ror #5
   11e18:	andeq	r3, r1, r4, ror #5
   11e1c:	andeq	r3, r1, r4, ror #5
   11e20:	andeq	r3, r1, r4, ror #5
   11e24:	andeq	r3, r1, r4, ror #5
   11e28:	andeq	r3, r1, r4, ror #5
   11e2c:	andeq	r2, r1, r0, rrx
   11e30:	mov	r0, #7
   11e34:	mov	r1, #10
   11e38:	b	12098 <__assert_fail@plt+0xd64>
   11e3c:	movw	r0, #43793	; 0xab11
   11e40:	movt	r0, #1
   11e44:	b	118dc <__assert_fail@plt+0x5a8>
   11e48:	movw	r5, #49528	; 0xc178
   11e4c:	movt	r5, #2
   11e50:	ldr	r0, [r5]
   11e54:	cmp	r0, #0
   11e58:	beq	1201c <__assert_fail@plt+0xce8>
   11e5c:	movw	r1, #45304	; 0xb0f8
   11e60:	add	r3, sp, #40	; 0x28
   11e64:	mov	r2, #0
   11e68:	movt	r1, #1
   11e6c:	str	r1, [sp]
   11e70:	mov	r1, #0
   11e74:	bl	18bb8 <__assert_fail@plt+0x7884>
   11e78:	cmp	r0, #0
   11e7c:	bne	13310 <__assert_fail@plt+0x1fdc>
   11e80:	ldr	r0, [sp, #44]	; 0x2c
   11e84:	cmp	r0, #0
   11e88:	bne	13380 <__assert_fail@plt+0x204c>
   11e8c:	ldr	r0, [sp, #40]	; 0x28
   11e90:	b	12020 <__assert_fail@plt+0xcec>
   11e94:	movw	r0, #43778	; 0xab02
   11e98:	movt	r0, #1
   11e9c:	b	118dc <__assert_fail@plt+0x5a8>
   11ea0:	movw	r0, #43787	; 0xab0b
   11ea4:	movt	r0, #1
   11ea8:	b	118dc <__assert_fail@plt+0x5a8>
   11eac:	movw	r0, #43775	; 0xaaff
   11eb0:	movt	r0, #1
   11eb4:	b	118dc <__assert_fail@plt+0x5a8>
   11eb8:	movw	r5, #49528	; 0xc178
   11ebc:	movw	r1, #45304	; 0xb0f8
   11ec0:	mov	r2, #0
   11ec4:	movt	r5, #2
   11ec8:	movt	r1, #1
   11ecc:	str	r1, [sp]
   11ed0:	movw	r1, #49576	; 0xc1a8
   11ed4:	ldr	r0, [r5]
   11ed8:	movt	r1, #2
   11edc:	add	r3, r1, #56	; 0x38
   11ee0:	mov	r1, #0
   11ee4:	bl	18bb8 <__assert_fail@plt+0x7884>
   11ee8:	mov	r8, #1
   11eec:	cmp	r0, #0
   11ef0:	beq	118e4 <__assert_fail@plt+0x5b0>
   11ef4:	b	1332c <__assert_fail@plt+0x1ff8>
   11ef8:	movw	r0, #49576	; 0xc1a8
   11efc:	movw	r5, #49528	; 0xc178
   11f00:	mov	r8, #1
   11f04:	movw	r1, #45304	; 0xb0f8
   11f08:	movt	r0, #2
   11f0c:	movt	r5, #2
   11f10:	movt	r1, #1
   11f14:	mov	r2, r0
   11f18:	strb	r8, [r0, #1]
   11f1c:	ldr	r0, [r5]
   11f20:	str	r1, [sp]
   11f24:	mov	r1, #0
   11f28:	add	r3, r2, #64	; 0x40
   11f2c:	mov	r2, #0
   11f30:	bl	18bb8 <__assert_fail@plt+0x7884>
   11f34:	cmp	r0, #0
   11f38:	beq	118e4 <__assert_fail@plt+0x5b0>
   11f3c:	b	13348 <__assert_fail@plt+0x2014>
   11f40:	movw	r1, #49576	; 0xc1a8
   11f44:	mov	r0, #1
   11f48:	movt	r1, #2
   11f4c:	strb	r0, [r1, #3]
   11f50:	b	118e4 <__assert_fail@plt+0x5b0>
   11f54:	movw	r0, #49528	; 0xc178
   11f58:	movw	r5, #45544	; 0xb1e8
   11f5c:	mov	r3, #4
   11f60:	mov	r2, #1
   11f64:	movt	r0, #2
   11f68:	str	r3, [sp]
   11f6c:	movt	r5, #1
   11f70:	ldr	r1, [r0]
   11f74:	movw	r0, #49420	; 0xc10c
   11f78:	mov	r3, r5
   11f7c:	movt	r0, #2
   11f80:	ldr	r0, [r0]
   11f84:	stmib	sp, {r0, r2}
   11f88:	movw	r0, #43766	; 0xaaf6
   11f8c:	movw	r2, #45552	; 0xb1f0
   11f90:	movt	r0, #1
   11f94:	movt	r2, #1
   11f98:	bl	15414 <__assert_fail@plt+0x40e0>
   11f9c:	ldr	r0, [r5, r0, lsl #2]
   11fa0:	cmp	r0, #0
   11fa4:	beq	1204c <__assert_fail@plt+0xd18>
   11fa8:	cmp	r0, #1
   11fac:	bne	118e4 <__assert_fail@plt+0x5b0>
   11fb0:	mov	r0, #1
   11fb4:	b	12050 <__assert_fail@plt+0xd1c>
   11fb8:	movw	r0, #49576	; 0xc1a8
   11fbc:	mov	r8, #1
   11fc0:	movt	r0, #2
   11fc4:	strb	r8, [r0, #2]
   11fc8:	b	118e4 <__assert_fail@plt+0x5b0>
   11fcc:	movw	r5, #49528	; 0xc178
   11fd0:	mov	r8, #1
   11fd4:	movt	r5, #2
   11fd8:	ldr	r0, [r5]
   11fdc:	cmp	r0, #0
   11fe0:	beq	12038 <__assert_fail@plt+0xd04>
   11fe4:	movw	r1, #44487	; 0xadc7
   11fe8:	sub	r3, fp, #136	; 0x88
   11fec:	mov	r2, #10
   11ff0:	movt	r1, #1
   11ff4:	str	r1, [sp]
   11ff8:	mov	r1, #0
   11ffc:	bl	18bb8 <__assert_fail@plt+0x7884>
   12000:	cmp	r0, #0
   12004:	bne	13364 <__assert_fail@plt+0x2030>
   12008:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1200c:	cmp	r0, #0
   12010:	bne	13380 <__assert_fail@plt+0x204c>
   12014:	ldr	r0, [fp, #-136]	; 0xffffff78
   12018:	b	1203c <__assert_fail@plt+0xd08>
   1201c:	mov	r0, #3
   12020:	movw	r1, #49576	; 0xc1a8
   12024:	mov	r8, #1
   12028:	movt	r1, #2
   1202c:	strb	r8, [r1]
   12030:	str	r0, [r1, #36]	; 0x24
   12034:	b	118e4 <__assert_fail@plt+0x5b0>
   12038:	mov	r0, #32
   1203c:	str	r0, [sp, #24]
   12040:	mov	r0, #1
   12044:	str	r0, [sp, #32]
   12048:	b	118e4 <__assert_fail@plt+0x5b0>
   1204c:	mov	r0, #0
   12050:	movw	r1, #49576	; 0xc1a8
   12054:	movt	r1, #2
   12058:	strb	r0, [r1, #4]
   1205c:	b	118e4 <__assert_fail@plt+0x5b0>
   12060:	mov	r0, #6
   12064:	mov	r1, #16
   12068:	b	12098 <__assert_fail@plt+0xd64>
   1206c:	movw	r1, #49576	; 0xc1a8
   12070:	mov	r0, #0
   12074:	mov	r8, #1
   12078:	movt	r1, #2
   1207c:	str	r0, [r1, #32]
   12080:	movw	r0, #13848	; 0x3618
   12084:	movt	r0, #1
   12088:	str	r0, [r1, #24]
   1208c:	b	118e4 <__assert_fail@plt+0x5b0>
   12090:	mov	r0, #7
   12094:	mov	r1, #8
   12098:	movw	r2, #49576	; 0xc1a8
   1209c:	movw	r3, #13516	; 0x34cc
   120a0:	mov	r8, #1
   120a4:	movt	r2, #2
   120a8:	movt	r3, #1
   120ac:	str	r3, [r2, #24]
   120b0:	str	r1, [r2, #28]
   120b4:	str	r0, [r2, #32]
   120b8:	b	118e4 <__assert_fail@plt+0x5b0>
   120bc:	mov	r0, #1
   120c0:	tst	r9, #1
   120c4:	beq	131b4 <__assert_fail@plt+0x1e80>
   120c8:	movw	r9, #49576	; 0xc1a8
   120cc:	movt	r9, #2
   120d0:	ldrb	r0, [r9]
   120d4:	cmp	r0, #1
   120d8:	bne	120e8 <__assert_fail@plt+0xdb4>
   120dc:	ldr	r0, [r9, #12]
   120e0:	cmp	r0, #0
   120e4:	bne	133d4 <__assert_fail@plt+0x20a0>
   120e8:	movw	r7, #49504	; 0xc160
   120ec:	tst	r8, #1
   120f0:	movt	r7, #2
   120f4:	ldr	r0, [r7]
   120f8:	sub	r6, r6, r0
   120fc:	beq	1210c <__assert_fail@plt+0xdd8>
   12100:	ldrb	r1, [r9, #3]
   12104:	cmp	r1, #1
   12108:	bne	123a8 <__assert_fail@plt+0x1074>
   1210c:	cmp	r6, #3
   12110:	beq	12178 <__assert_fail@plt+0xe44>
   12114:	cmp	r6, #2
   12118:	beq	1214c <__assert_fail@plt+0xe18>
   1211c:	cmp	r6, #1
   12120:	bne	12394 <__assert_fail@plt+0x1060>
   12124:	ldr	r5, [r4, r0, lsl #2]
   12128:	ldrb	r1, [r9, #3]
   1212c:	ldrb	r0, [r5]
   12130:	cmp	r1, #0
   12134:	beq	12224 <__assert_fail@plt+0xef0>
   12138:	cmp	r0, #0
   1213c:	beq	12334 <__assert_fail@plt+0x1000>
   12140:	cmp	r0, #43	; 0x2b
   12144:	addeq	r5, r5, #1
   12148:	b	12230 <__assert_fail@plt+0xefc>
   1214c:	add	r0, r4, r0, lsl #2
   12150:	ldrb	r1, [r9, #3]
   12154:	ldr	r5, [r0, #4]
   12158:	cmp	r1, #0
   1215c:	ldrb	r0, [r5]
   12160:	beq	121dc <__assert_fail@plt+0xea8>
   12164:	cmp	r0, #0
   12168:	beq	12394 <__assert_fail@plt+0x1060>
   1216c:	cmp	r0, #43	; 0x2b
   12170:	addeq	r5, r5, #1
   12174:	b	121e8 <__assert_fail@plt+0xeb4>
   12178:	ldrb	r1, [r9, #3]
   1217c:	cmp	r1, #1
   12180:	bne	12394 <__assert_fail@plt+0x1060>
   12184:	add	r0, r4, r0, lsl #2
   12188:	ldr	r5, [r0, #4]
   1218c:	ldrb	r0, [r5]
   12190:	cmp	r0, #0
   12194:	beq	12394 <__assert_fail@plt+0x1060>
   12198:	cmp	r0, #43	; 0x2b
   1219c:	mov	r1, #46	; 0x2e
   121a0:	addeq	r5, r5, #1
   121a4:	mov	r0, r5
   121a8:	bl	11208 <strchr@plt>
   121ac:	mov	r2, #10
   121b0:	cmp	r0, #0
   121b4:	bne	12370 <__assert_fail@plt+0x103c>
   121b8:	ldrb	r0, [r5]
   121bc:	cmp	r0, #48	; 0x30
   121c0:	bne	1236c <__assert_fail@plt+0x1038>
   121c4:	ldrb	r0, [r5, #1]
   121c8:	mov	r2, #16
   121cc:	orr	r0, r0, #32
   121d0:	cmp	r0, #120	; 0x78
   121d4:	movne	r2, #8
   121d8:	b	12370 <__assert_fail@plt+0x103c>
   121dc:	cmp	r0, #43	; 0x2b
   121e0:	bne	1226c <__assert_fail@plt+0xf38>
   121e4:	add	r5, r5, #1
   121e8:	mov	r0, r5
   121ec:	mov	r1, #46	; 0x2e
   121f0:	bl	11208 <strchr@plt>
   121f4:	mov	r2, #10
   121f8:	cmp	r0, #0
   121fc:	bne	12280 <__assert_fail@plt+0xf4c>
   12200:	ldrb	r0, [r5]
   12204:	cmp	r0, #48	; 0x30
   12208:	bne	1227c <__assert_fail@plt+0xf48>
   1220c:	ldrb	r0, [r5, #1]
   12210:	mov	r2, #16
   12214:	orr	r0, r0, #32
   12218:	cmp	r0, #120	; 0x78
   1221c:	movne	r2, #8
   12220:	b	12280 <__assert_fail@plt+0xf4c>
   12224:	cmp	r0, #43	; 0x2b
   12228:	bne	12334 <__assert_fail@plt+0x1000>
   1222c:	add	r5, r5, #1
   12230:	mov	r0, r5
   12234:	mov	r1, #46	; 0x2e
   12238:	bl	11208 <strchr@plt>
   1223c:	mov	r2, #10
   12240:	cmp	r0, #0
   12244:	bne	1230c <__assert_fail@plt+0xfd8>
   12248:	ldrb	r0, [r5]
   1224c:	cmp	r0, #48	; 0x30
   12250:	bne	12308 <__assert_fail@plt+0xfd4>
   12254:	ldrb	r0, [r5, #1]
   12258:	mov	r2, #16
   1225c:	orr	r0, r0, #32
   12260:	cmp	r0, #120	; 0x78
   12264:	movne	r2, #8
   12268:	b	1230c <__assert_fail@plt+0xfd8>
   1226c:	sub	r1, r0, #48	; 0x30
   12270:	cmp	r1, #9
   12274:	bls	12164 <__assert_fail@plt+0xe30>
   12278:	b	12394 <__assert_fail@plt+0x1060>
   1227c:	mov	r2, #8
   12280:	movw	r8, #45119	; 0xb03f
   12284:	sub	r3, fp, #136	; 0x88
   12288:	mov	r0, r5
   1228c:	mov	r1, #0
   12290:	movt	r8, #1
   12294:	str	r8, [sp]
   12298:	bl	18bb8 <__assert_fail@plt+0x7884>
   1229c:	cmp	r0, #0
   122a0:	bne	12394 <__assert_fail@plt+0x1060>
   122a4:	ldrb	r0, [r9, #3]
   122a8:	cmp	r0, #1
   122ac:	bne	12494 <__assert_fail@plt+0x1160>
   122b0:	ldr	r0, [r7]
   122b4:	ldr	r5, [r4, r0, lsl #2]
   122b8:	ldrb	r0, [r5]
   122bc:	cmp	r0, #0
   122c0:	beq	12494 <__assert_fail@plt+0x1160>
   122c4:	cmp	r0, #43	; 0x2b
   122c8:	mov	r1, #46	; 0x2e
   122cc:	addeq	r5, r5, #1
   122d0:	mov	r0, r5
   122d4:	bl	11208 <strchr@plt>
   122d8:	mov	r2, #10
   122dc:	cmp	r0, #0
   122e0:	bne	12474 <__assert_fail@plt+0x1140>
   122e4:	ldrb	r0, [r5]
   122e8:	cmp	r0, #48	; 0x30
   122ec:	bne	12470 <__assert_fail@plt+0x113c>
   122f0:	ldrb	r0, [r5, #1]
   122f4:	mov	r2, #16
   122f8:	orr	r0, r0, #32
   122fc:	cmp	r0, #120	; 0x78
   12300:	movne	r2, #8
   12304:	b	12474 <__assert_fail@plt+0x1140>
   12308:	mov	r2, #8
   1230c:	movw	r0, #45119	; 0xb03f
   12310:	add	r3, sp, #40	; 0x28
   12314:	mov	r1, #0
   12318:	mov	r6, #0
   1231c:	movt	r0, #1
   12320:	str	r0, [sp]
   12324:	mov	r0, r5
   12328:	bl	18bb8 <__assert_fail@plt+0x7884>
   1232c:	cmp	r0, #0
   12330:	beq	1234c <__assert_fail@plt+0x1018>
   12334:	mov	r6, #1
   12338:	mov	r5, r4
   1233c:	ldrb	r0, [r9, #5]
   12340:	cmp	r0, #1
   12344:	beq	123b8 <__assert_fail@plt+0x1084>
   12348:	b	124c0 <__assert_fail@plt+0x118c>
   1234c:	ldr	r0, [sp, #40]	; 0x28
   12350:	ldr	r1, [sp, #44]	; 0x2c
   12354:	add	r5, r4, #4
   12358:	strd	r0, [r9, #56]	; 0x38
   1235c:	ldrb	r0, [r9, #5]
   12360:	cmp	r0, #1
   12364:	beq	123b8 <__assert_fail@plt+0x1084>
   12368:	b	124c0 <__assert_fail@plt+0x118c>
   1236c:	mov	r2, #8
   12370:	movw	r8, #45119	; 0xb03f
   12374:	add	r3, sp, #40	; 0x28
   12378:	mov	r0, r5
   1237c:	mov	r1, #0
   12380:	movt	r8, #1
   12384:	str	r8, [sp]
   12388:	bl	18bb8 <__assert_fail@plt+0x7884>
   1238c:	cmp	r0, #0
   12390:	beq	12414 <__assert_fail@plt+0x10e0>
   12394:	ldrb	r0, [r9, #3]
   12398:	cmp	r0, #1
   1239c:	bne	123a8 <__assert_fail@plt+0x1074>
   123a0:	cmp	r6, #2
   123a4:	bge	13400 <__assert_fail@plt+0x20cc>
   123a8:	mov	r5, r4
   123ac:	ldrb	r0, [r9, #5]
   123b0:	cmp	r0, #1
   123b4:	bne	124c0 <__assert_fail@plt+0x118c>
   123b8:	ldr	r0, [r9, #24]
   123bc:	movw	r1, #13848	; 0x3618
   123c0:	movt	r1, #1
   123c4:	cmp	r0, r1
   123c8:	beq	123e8 <__assert_fail@plt+0x10b4>
   123cc:	movw	r0, #15968	; 0x3e60
   123d0:	movt	r0, #1
   123d4:	str	r0, [r9, #24]
   123d8:	ldrb	r0, [r9, #1]
   123dc:	cmp	r0, #1
   123e0:	beq	124cc <__assert_fail@plt+0x1198>
   123e4:	b	124f0 <__assert_fail@plt+0x11bc>
   123e8:	mov	r1, #8
   123ec:	mov	r0, #7
   123f0:	str	r1, [r9, #28]
   123f4:	str	r0, [r9, #32]
   123f8:	movw	r0, #15820	; 0x3dcc
   123fc:	movt	r0, #1
   12400:	str	r0, [r9, #24]
   12404:	ldrb	r0, [r9, #1]
   12408:	cmp	r0, #1
   1240c:	bne	124f0 <__assert_fail@plt+0x11bc>
   12410:	b	124cc <__assert_fail@plt+0x1198>
   12414:	ldr	r0, [r7]
   12418:	add	r0, r4, r0, lsl #2
   1241c:	ldr	r5, [r0, #8]
   12420:	ldrb	r0, [r5]
   12424:	cmp	r0, #0
   12428:	beq	12394 <__assert_fail@plt+0x1060>
   1242c:	cmp	r0, #43	; 0x2b
   12430:	mov	r1, #46	; 0x2e
   12434:	addeq	r5, r5, #1
   12438:	mov	r0, r5
   1243c:	bl	11208 <strchr@plt>
   12440:	mov	r2, #10
   12444:	cmp	r0, #0
   12448:	bne	1320c <__assert_fail@plt+0x1ed8>
   1244c:	ldrb	r0, [r5]
   12450:	cmp	r0, #48	; 0x30
   12454:	bne	13208 <__assert_fail@plt+0x1ed4>
   12458:	ldrb	r0, [r5, #1]
   1245c:	mov	r2, #16
   12460:	orr	r0, r0, #32
   12464:	cmp	r0, #120	; 0x78
   12468:	movne	r2, #8
   1246c:	b	1320c <__assert_fail@plt+0x1ed8>
   12470:	mov	r2, #8
   12474:	add	r3, sp, #40	; 0x28
   12478:	mov	r0, r5
   1247c:	mov	r1, #0
   12480:	str	r8, [sp]
   12484:	mov	r6, #0
   12488:	bl	18bb8 <__assert_fail@plt+0x7884>
   1248c:	cmp	r0, #0
   12490:	beq	131bc <__assert_fail@plt+0x1e88>
   12494:	ldr	r0, [fp, #-136]	; 0xffffff78
   12498:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1249c:	add	r5, r4, #4
   124a0:	mov	r6, #1
   124a4:	strd	r0, [r9, #56]	; 0x38
   124a8:	ldr	r0, [r7]
   124ac:	ldr	r0, [r4, r0, lsl #2]!
   124b0:	str	r0, [r4, #4]
   124b4:	ldrb	r0, [r9, #5]
   124b8:	cmp	r0, #1
   124bc:	beq	123b8 <__assert_fail@plt+0x1084>
   124c0:	ldrb	r0, [r9, #1]
   124c4:	cmp	r0, #1
   124c8:	bne	124f0 <__assert_fail@plt+0x11bc>
   124cc:	add	r3, r9, #56	; 0x38
   124d0:	ldm	r3, {r0, r1, r2, r3}
   124d4:	adds	r0, r2, r0
   124d8:	adcs	r1, r3, r1
   124dc:	strd	r0, [r9, #72]	; 0x48
   124e0:	mov	r0, #0
   124e4:	adc	r0, r0, #0
   124e8:	cmp	r0, #1
   124ec:	beq	13470 <__assert_fail@plt+0x213c>
   124f0:	ldr	r0, [r9, #12]
   124f4:	cmp	r0, #0
   124f8:	bne	12508 <__assert_fail@plt+0x11d4>
   124fc:	movw	r0, #43983	; 0xabcf
   12500:	movt	r0, #1
   12504:	bl	1361c <__assert_fail@plt+0x22e8>
   12508:	ldr	r0, [r7]
   1250c:	movw	r1, #45564	; 0xb1fc
   12510:	cmp	r6, #0
   12514:	movt	r1, #1
   12518:	addgt	r1, r5, r0, lsl #2
   1251c:	str	r1, [r9, #40]	; 0x28
   12520:	bl	14168 <__assert_fail@plt+0x2e34>
   12524:	mov	sl, r0
   12528:	ldr	r0, [r9, #44]	; 0x2c
   1252c:	cmp	r0, #0
   12530:	beq	1318c <__assert_fail@plt+0x1e58>
   12534:	ldrd	r4, [r9, #56]	; 0x38
   12538:	orrs	r1, r4, r5
   1253c:	beq	1273c <__assert_fail@plt+0x1408>
   12540:	sub	r1, fp, #136	; 0x88
   12544:	str	sl, [sp, #16]
   12548:	add	r6, sp, #40	; 0x28
   1254c:	mov	r8, #0
   12550:	mov	sl, #1
   12554:	add	r1, r1, #48	; 0x30
   12558:	str	r1, [sp, #28]
   1255c:	b	125bc <__assert_fail@plt+0x1288>
   12560:	bl	11214 <__errno_location@plt>
   12564:	movw	r9, #49576	; 0xc1a8
   12568:	ldr	r7, [r0]
   1256c:	mov	r0, #0
   12570:	mov	r1, #3
   12574:	mov	sl, #0
   12578:	movt	r9, #2
   1257c:	ldr	r2, [r9, #52]	; 0x34
   12580:	bl	179a8 <__assert_fail@plt+0x6674>
   12584:	movw	r2, #46226	; 0xb492
   12588:	mov	r3, r0
   1258c:	mov	r0, #0
   12590:	mov	r1, r7
   12594:	movt	r2, #1
   12598:	bl	11178 <error@plt>
   1259c:	mov	r0, r8
   125a0:	bl	14cfc <__assert_fail@plt+0x39c8>
   125a4:	and	r7, sl, r0
   125a8:	bl	14168 <__assert_fail@plt+0x2e34>
   125ac:	and	sl, r7, r0
   125b0:	ldr	r0, [r9, #44]	; 0x2c
   125b4:	cmp	r0, #0
   125b8:	beq	12710 <__assert_fail@plt+0x13dc>
   125bc:	bl	11274 <fileno@plt>
   125c0:	mov	r1, r0
   125c4:	mov	r0, #3
   125c8:	sub	r2, fp, #136	; 0x88
   125cc:	bl	11130 <__fxstat64@plt>
   125d0:	cmp	r0, #0
   125d4:	bne	12560 <__assert_fail@plt+0x122c>
   125d8:	ldr	r0, [fp, #-120]	; 0xffffff88
   125dc:	and	r0, r0, #53248	; 0xd000
   125e0:	orr	r0, r0, #8192	; 0x2000
   125e4:	cmp	r0, #40960	; 0xa000
   125e8:	bne	1264c <__assert_fail@plt+0x1318>
   125ec:	ldr	r2, [fp, #-80]	; 0xffffffb0
   125f0:	mov	r3, #0
   125f4:	subs	r0, r2, #536870913	; 0x20000001
   125f8:	rscs	r0, r3, r2, asr #31
   125fc:	mov	r0, #0
   12600:	movwcc	r0, #1
   12604:	rsbs	r1, r2, #0
   12608:	sbcs	r1, r3, r2, asr #31
   1260c:	mov	r1, #0
   12610:	movwlt	r1, #1
   12614:	ands	r3, r1, r0
   12618:	ldr	r0, [sp, #28]
   1261c:	asrne	r3, r2, #31
   12620:	moveq	r2, #512	; 0x200
   12624:	ldrd	r0, [r0]
   12628:	subs	r2, r2, r0
   1262c:	sbcs	r2, r3, r1
   12630:	bge	12674 <__assert_fail@plt+0x1340>
   12634:	subs	r2, r0, r4
   12638:	sbcs	r2, r1, r5
   1263c:	bcs	12748 <__assert_fail@plt+0x1414>
   12640:	subs	r4, r4, r0
   12644:	sbc	r5, r5, r1
   12648:	b	126fc <__assert_fail@plt+0x13c8>
   1264c:	movw	r0, #49576	; 0xc1a8
   12650:	mov	r1, #1
   12654:	mov	r2, r4
   12658:	mov	r3, r5
   1265c:	movt	r0, #2
   12660:	str	r1, [sp]
   12664:	ldr	r0, [r0, #44]	; 0x2c
   12668:	bl	15948 <__assert_fail@plt+0x4614>
   1266c:	cmp	r0, #0
   12670:	beq	12778 <__assert_fail@plt+0x1444>
   12674:	orrs	r0, r4, r5
   12678:	beq	126f4 <__assert_fail@plt+0x13c0>
   1267c:	mov	r7, #8192	; 0x2000
   12680:	b	1268c <__assert_fail@plt+0x1358>
   12684:	orrs	r0, r4, r5
   12688:	beq	126f4 <__assert_fail@plt+0x13c0>
   1268c:	subs	r0, r4, r7
   12690:	mov	r1, #1
   12694:	sbcs	r0, r5, #0
   12698:	movw	r0, #49576	; 0xc1a8
   1269c:	movt	r0, #2
   126a0:	movcc	r7, r4
   126a4:	mov	r2, r7
   126a8:	ldr	r3, [r0, #44]	; 0x2c
   126ac:	mov	r0, r6
   126b0:	bl	11304 <fread_unlocked@plt>
   126b4:	subs	r4, r4, r0
   126b8:	sbc	r5, r5, #0
   126bc:	cmp	r0, r7
   126c0:	beq	12684 <__assert_fail@plt+0x1350>
   126c4:	movw	r0, #49576	; 0xc1a8
   126c8:	movt	r0, #2
   126cc:	ldr	r0, [r0, #44]	; 0x2c
   126d0:	ldr	r0, [r0]
   126d4:	tst	r0, #32
   126d8:	bne	126e8 <__assert_fail@plt+0x13b4>
   126dc:	tst	r0, #16
   126e0:	beq	12684 <__assert_fail@plt+0x1350>
   126e4:	b	126fc <__assert_fail@plt+0x13c8>
   126e8:	bl	11214 <__errno_location@plt>
   126ec:	ldr	r8, [r0]
   126f0:	mov	sl, #0
   126f4:	mov	r4, #0
   126f8:	mov	r5, #0
   126fc:	movw	r9, #49576	; 0xc1a8
   12700:	orrs	r0, r4, r5
   12704:	movt	r9, #2
   12708:	bne	1259c <__assert_fail@plt+0x1268>
   1270c:	b	12780 <__assert_fail@plt+0x144c>
   12710:	orrs	r0, r4, r5
   12714:	bne	134a8 <__assert_fail@plt+0x2174>
   12718:	ldr	r0, [sp, #16]
   1271c:	movw	r9, #49576	; 0xc1a8
   12720:	movt	r9, #2
   12724:	and	r0, r0, sl
   12728:	mov	sl, r0
   1272c:	ldrb	r0, [r9, #6]
   12730:	cmp	r0, #1
   12734:	beq	13198 <__assert_fail@plt+0x1e64>
   12738:	b	131b0 <__assert_fail@plt+0x1e7c>
   1273c:	mov	r0, #0
   12740:	mov	r1, #0
   12744:	b	1279c <__assert_fail@plt+0x1468>
   12748:	movw	r9, #49576	; 0xc1a8
   1274c:	mov	r1, #1
   12750:	mov	r2, r4
   12754:	mov	r3, r5
   12758:	movt	r9, #2
   1275c:	str	r1, [sp]
   12760:	ldr	r0, [r9, #44]	; 0x2c
   12764:	bl	15948 <__assert_fail@plt+0x4614>
   12768:	clz	r0, r0
   1276c:	lsr	r0, r0, #5
   12770:	and	sl, sl, r0
   12774:	b	12780 <__assert_fail@plt+0x144c>
   12778:	movw	r9, #49576	; 0xc1a8
   1277c:	movt	r9, #2
   12780:	ldr	r0, [sp, #16]
   12784:	and	r0, r0, sl
   12788:	mov	sl, r0
   1278c:	ldr	r0, [r9, #44]	; 0x2c
   12790:	cmp	r0, #0
   12794:	beq	1318c <__assert_fail@plt+0x1e58>
   12798:	ldrd	r0, [r9, #56]	; 0x38
   1279c:	ldr	r2, [sp, #20]
   127a0:	ldr	ip, [sp, #32]
   127a4:	movw	r8, #45572	; 0xb204
   127a8:	movt	r8, #1
   127ac:	subs	r0, r2, r0
   127b0:	ldr	r2, [sp, #12]
   127b4:	sbc	r1, r2, r1
   127b8:	ldrb	r2, [r9, #5]
   127bc:	cmp	r2, #0
   127c0:	moveq	r1, r2
   127c4:	moveq	r0, r2
   127c8:	strd	r0, [r9, #80]	; 0x50
   127cc:	ldr	r0, [r9, #12]
   127d0:	cmp	r0, #0
   127d4:	beq	12888 <__assert_fail@plt+0x1554>
   127d8:	ldr	r1, [r9, #20]
   127dc:	mov	r5, #1
   127e0:	mov	r2, #0
   127e4:	add	r3, r1, r2, lsl #5
   127e8:	mov	r4, r5
   127ec:	ldr	r3, [r3, #4]
   127f0:	ldr	r6, [r8, r3, lsl #2]
   127f4:	mov	r7, r6
   127f8:	mov	r3, r7
   127fc:	udiv	r7, r4, r7
   12800:	mls	r7, r7, r3, r4
   12804:	mov	r4, r3
   12808:	cmp	r7, #0
   1280c:	bne	127f8 <__assert_fail@plt+0x14c4>
   12810:	udiv	r3, r6, r3
   12814:	add	r2, r2, #1
   12818:	cmp	r2, r0
   1281c:	mul	r5, r3, r5
   12820:	bne	127e4 <__assert_fail@plt+0x14b0>
   12824:	tst	ip, #1
   12828:	beq	12894 <__assert_fail@plt+0x1560>
   1282c:	ldr	r4, [sp, #24]
   12830:	cmp	r4, #0
   12834:	beq	12848 <__assert_fail@plt+0x1514>
   12838:	udiv	r1, r4, r5
   1283c:	mls	r1, r1, r5, r4
   12840:	cmp	r1, #0
   12844:	beq	13020 <__assert_fail@plt+0x1cec>
   12848:	movw	r1, #43986	; 0xabd2
   1284c:	mov	r0, #0
   12850:	mov	r2, #5
   12854:	movt	r1, #1
   12858:	bl	11100 <dcgettext@plt>
   1285c:	mov	r2, r0
   12860:	mov	r0, #0
   12864:	mov	r1, #0
   12868:	mov	r3, r4
   1286c:	str	r5, [sp]
   12870:	bl	11178 <error@plt>
   12874:	str	r5, [r9, #48]	; 0x30
   12878:	ldr	r0, [r9, #12]
   1287c:	cmp	r0, #0
   12880:	bne	128b4 <__assert_fail@plt+0x1580>
   12884:	b	1291c <__assert_fail@plt+0x15e8>
   12888:	mov	r5, #1
   1288c:	tst	ip, #1
   12890:	bne	1282c <__assert_fail@plt+0x14f8>
   12894:	cmp	r5, #15
   12898:	bgt	128a8 <__assert_fail@plt+0x1574>
   1289c:	mov	r1, #16
   128a0:	sdiv	r1, r1, r5
   128a4:	mul	r5, r1, r5
   128a8:	str	r5, [r9, #48]	; 0x30
   128ac:	cmp	r0, #0
   128b0:	beq	1291c <__assert_fail@plt+0x15e8>
   128b4:	ldr	r2, [r9, #20]
   128b8:	mov	r3, #0
   128bc:	mov	r1, #0
   128c0:	add	r7, r2, r3, lsl #5
   128c4:	add	r3, r3, #1
   128c8:	ldr	r6, [r7, #4]
   128cc:	ldr	r7, [r7, #24]
   128d0:	ldr	r6, [r8, r6, lsl #2]
   128d4:	add	r7, r7, #1
   128d8:	udiv	r6, r5, r6
   128dc:	mul	r7, r7, r6
   128e0:	cmp	r1, r7
   128e4:	movcc	r1, r7
   128e8:	cmp	r3, r0
   128ec:	bcc	128c0 <__assert_fail@plt+0x158c>
   128f0:	ldr	r2, [r9, #20]
   128f4:	add	r2, r2, #24
   128f8:	ldr	r3, [r2, #-20]	; 0xffffffec
   128fc:	ldr	r7, [r2]
   12900:	subs	r0, r0, #1
   12904:	ldr	r3, [r8, r3, lsl #2]
   12908:	udiv	r3, r5, r3
   1290c:	mls	r3, r7, r3, r1
   12910:	str	r3, [r2, #4]
   12914:	add	r2, r2, #32
   12918:	bne	128f8 <__assert_fail@plt+0x15c4>
   1291c:	ldrb	r0, [r9]
   12920:	cmp	r0, #1
   12924:	bne	12d1c <__assert_fail@plt+0x19e8>
   12928:	ldr	r0, [r9, #36]	; 0x24
   1292c:	str	sl, [sp, #16]
   12930:	cmp	r0, #100	; 0x64
   12934:	movls	r0, #100	; 0x64
   12938:	str	r0, [sp, #40]	; 0x28
   1293c:	bl	1832c <__assert_fail@plt+0x6ff8>
   12940:	ldrd	r8, [r9, #56]	; 0x38
   12944:	movw	r5, #49524	; 0xc174
   12948:	mov	r7, #1
   1294c:	str	r0, [sp, #32]
   12950:	movt	r5, #2
   12954:	movw	sl, #45079	; 0xb017
   12958:	movt	sl, #1
   1295c:	movw	r2, #49576	; 0xc1a8
   12960:	movt	r2, #2
   12964:	ldrb	r0, [r2, #1]
   12968:	cmp	r0, #0
   1296c:	beq	12994 <__assert_fail@plt+0x1660>
   12970:	ldr	r1, [r2, #36]	; 0x24
   12974:	ldrd	r2, [r2, #72]	; 0x48
   12978:	subs	r2, r2, r1
   1297c:	sbcs	r3, r3, #0
   12980:	bcc	1326c <__assert_fail@plt+0x1f38>
   12984:	subs	r2, r8, r2
   12988:	sbcs	r2, r9, r3
   1298c:	bcc	12998 <__assert_fail@plt+0x1664>
   12990:	b	1326c <__assert_fail@plt+0x1f38>
   12994:	ldr	r1, [r2, #36]	; 0x24
   12998:	cmp	r1, #0
   1299c:	beq	12a78 <__assert_fail@plt+0x1744>
   129a0:	movw	r1, #49576	; 0xc1a8
   129a4:	mov	sl, r5
   129a8:	mov	r5, r7
   129ac:	mov	r6, #0
   129b0:	movt	r1, #2
   129b4:	ldr	r0, [r1, #44]	; 0x2c
   129b8:	mov	r4, #1
   129bc:	cmp	r0, #0
   129c0:	beq	12ea0 <__assert_fail@plt+0x1b6c>
   129c4:	bl	11250 <fgetc@plt>
   129c8:	cmn	r0, #1
   129cc:	bne	12a00 <__assert_fail@plt+0x16cc>
   129d0:	bl	11214 <__errno_location@plt>
   129d4:	ldr	r0, [r0]
   129d8:	bl	14cfc <__assert_fail@plt+0x39c8>
   129dc:	and	r4, r4, r0
   129e0:	bl	14168 <__assert_fail@plt+0x2e34>
   129e4:	and	r4, r4, r0
   129e8:	movw	r0, #49576	; 0xc1a8
   129ec:	movt	r0, #2
   129f0:	ldr	r0, [r0, #44]	; 0x2c
   129f4:	cmp	r0, #0
   129f8:	bne	129c4 <__assert_fail@plt+0x1690>
   129fc:	b	12ea0 <__assert_fail@plt+0x1b6c>
   12a00:	adds	r8, r8, #1
   12a04:	mov	r7, r0
   12a08:	and	r5, r5, r4
   12a0c:	adc	r9, r9, #0
   12a10:	cmn	r0, #1
   12a14:	ble	13200 <__assert_fail@plt+0x1ecc>
   12a18:	bl	111d8 <__ctype_b_loc@plt>
   12a1c:	ldr	r0, [r0]
   12a20:	add	r0, r0, r7, lsl #1
   12a24:	ldrb	r0, [r0, #1]
   12a28:	tst	r0, #64	; 0x40
   12a2c:	beq	12d10 <__assert_fail@plt+0x19dc>
   12a30:	ldr	r0, [sp, #32]
   12a34:	movw	r1, #49576	; 0xc1a8
   12a38:	movt	r1, #2
   12a3c:	strb	r7, [r0, r6]
   12a40:	add	r6, r6, #1
   12a44:	ldr	r0, [r1, #36]	; 0x24
   12a48:	cmp	r6, r0
   12a4c:	bcc	129b4 <__assert_fail@plt+0x1680>
   12a50:	ldrb	r0, [r1, #1]
   12a54:	mov	r7, r5
   12a58:	mov	r5, sl
   12a5c:	movw	sl, #45079	; 0xb017
   12a60:	movt	sl, #1
   12a64:	ldrd	r2, [r1, #72]	; 0x48
   12a68:	subs	r1, r8, r2
   12a6c:	sbcs	r1, r9, r3
   12a70:	bcs	12b7c <__assert_fail@plt+0x1848>
   12a74:	b	12a94 <__assert_fail@plt+0x1760>
   12a78:	movw	r1, #49576	; 0xc1a8
   12a7c:	mov	r6, #0
   12a80:	movt	r1, #2
   12a84:	ldrd	r2, [r1, #72]	; 0x48
   12a88:	subs	r1, r8, r2
   12a8c:	sbcs	r1, r9, r3
   12a90:	bcs	12b7c <__assert_fail@plt+0x1848>
   12a94:	ldr	r0, [sp, #40]	; 0x28
   12a98:	str	r7, [sp, #20]
   12a9c:	cmp	r6, r0
   12aa0:	bne	12ab4 <__assert_fail@plt+0x1780>
   12aa4:	ldr	r0, [sp, #32]
   12aa8:	add	r1, sp, #40	; 0x28
   12aac:	bl	18460 <__assert_fail@plt+0x712c>
   12ab0:	str	r0, [sp, #32]
   12ab4:	movw	r0, #49576	; 0xc1a8
   12ab8:	mov	r4, #1
   12abc:	movt	r0, #2
   12ac0:	ldr	r0, [r0, #44]	; 0x2c
   12ac4:	cmp	r0, #0
   12ac8:	beq	131f4 <__assert_fail@plt+0x1ec0>
   12acc:	bl	11250 <fgetc@plt>
   12ad0:	cmn	r0, #1
   12ad4:	bne	12b08 <__assert_fail@plt+0x17d4>
   12ad8:	bl	11214 <__errno_location@plt>
   12adc:	ldr	r0, [r0]
   12ae0:	bl	14cfc <__assert_fail@plt+0x39c8>
   12ae4:	and	r4, r4, r0
   12ae8:	bl	14168 <__assert_fail@plt+0x2e34>
   12aec:	and	r4, r4, r0
   12af0:	movw	r0, #49576	; 0xc1a8
   12af4:	movt	r0, #2
   12af8:	ldr	r0, [r0, #44]	; 0x2c
   12afc:	cmp	r0, #0
   12b00:	bne	12acc <__assert_fail@plt+0x1798>
   12b04:	b	131f4 <__assert_fail@plt+0x1ec0>
   12b08:	mov	r7, r0
   12b0c:	ldr	r0, [sp, #20]
   12b10:	adds	r8, r8, #1
   12b14:	adc	r9, r9, #0
   12b18:	cmn	r7, #1
   12b1c:	and	r0, r0, r4
   12b20:	str	r0, [sp, #20]
   12b24:	ble	13284 <__assert_fail@plt+0x1f50>
   12b28:	cmp	r7, #0
   12b2c:	beq	12cf4 <__assert_fail@plt+0x19c0>
   12b30:	bl	111d8 <__ctype_b_loc@plt>
   12b34:	ldr	r0, [r0]
   12b38:	add	r0, r0, r7, lsl #1
   12b3c:	ldrb	r0, [r0, #1]
   12b40:	tst	r0, #64	; 0x40
   12b44:	beq	12cfc <__assert_fail@plt+0x19c8>
   12b48:	ldr	r0, [sp, #32]
   12b4c:	strb	r7, [r0, r6]
   12b50:	movw	r0, #49576	; 0xc1a8
   12b54:	ldr	r7, [sp, #20]
   12b58:	add	r6, r6, #1
   12b5c:	movt	r0, #2
   12b60:	ldrd	r0, [r0, #72]	; 0x48
   12b64:	subs	r0, r8, r0
   12b68:	sbcs	r0, r9, r1
   12b6c:	bcc	12a94 <__assert_fail@plt+0x1760>
   12b70:	movw	r0, #49576	; 0xc1a8
   12b74:	movt	r0, #2
   12b78:	ldrb	r0, [r0, #1]
   12b7c:	cmp	r0, #0
   12b80:	beq	12a94 <__assert_fail@plt+0x1760>
   12b84:	ldr	r4, [sp, #32]
   12b88:	movw	r2, #49576	; 0xc1a8
   12b8c:	mov	r0, #0
   12b90:	movt	r2, #2
   12b94:	strb	r0, [r4, r6]
   12b98:	mvn	r0, r6
   12b9c:	ldr	r3, [r2, #24]
   12ba0:	adds	r0, r8, r0
   12ba4:	mov	r2, #32
   12ba8:	sbc	r1, r9, #0
   12bac:	blx	r3
   12bb0:	mov	r6, r4
   12bb4:	ldrb	r1, [r6]
   12bb8:	cmp	r1, #13
   12bbc:	bls	12be4 <__assert_fail@plt+0x18b0>
   12bc0:	b	12c80 <__assert_fail@plt+0x194c>
   12bc4:	ldr	r1, [r5]
   12bc8:	movw	r0, #45085	; 0xb01d
   12bcc:	movt	r0, #1
   12bd0:	bl	1107c <fputs_unlocked@plt>
   12bd4:	add	r6, r6, #1
   12bd8:	ldrb	r1, [r6]
   12bdc:	cmp	r1, #13
   12be0:	bhi	12c80 <__assert_fail@plt+0x194c>
   12be4:	add	r0, pc, #0
   12be8:	ldr	pc, [r0, r1, lsl #2]
   12bec:	andeq	r2, r1, ip, asr #25
   12bf0:	andeq	r2, r1, r0, lsl #25
   12bf4:	andeq	r2, r1, r0, lsl #25
   12bf8:	andeq	r2, r1, r0, lsl #25
   12bfc:	andeq	r2, r1, r0, lsl #25
   12c00:	andeq	r2, r1, r0, lsl #25
   12c04:	andeq	r2, r1, r0, lsl #25
   12c08:	andeq	r2, r1, r4, lsr #24
   12c0c:	andeq	r2, r1, r0, lsr ip
   12c10:	andeq	r2, r1, r0, asr #24
   12c14:	andeq	r2, r1, r0, ror #24
   12c18:	andeq	r2, r1, r0, ror ip
   12c1c:	andeq	r2, r1, r4, asr #23
   12c20:	andeq	r2, r1, r0, asr ip
   12c24:	ldr	r1, [r5]
   12c28:	mov	r0, sl
   12c2c:	b	12bd0 <__assert_fail@plt+0x189c>
   12c30:	ldr	r1, [r5]
   12c34:	movw	r0, #45082	; 0xb01a
   12c38:	movt	r0, #1
   12c3c:	b	12bd0 <__assert_fail@plt+0x189c>
   12c40:	ldr	r1, [r5]
   12c44:	movw	r0, #45094	; 0xb026
   12c48:	movt	r0, #1
   12c4c:	b	12bd0 <__assert_fail@plt+0x189c>
   12c50:	ldr	r1, [r5]
   12c54:	movw	r0, #45091	; 0xb023
   12c58:	movt	r0, #1
   12c5c:	b	12bd0 <__assert_fail@plt+0x189c>
   12c60:	ldr	r1, [r5]
   12c64:	movw	r0, #45088	; 0xb020
   12c68:	movt	r0, #1
   12c6c:	b	12bd0 <__assert_fail@plt+0x189c>
   12c70:	ldr	r1, [r5]
   12c74:	movw	r0, #45097	; 0xb029
   12c78:	movt	r0, #1
   12c7c:	b	12bd0 <__assert_fail@plt+0x189c>
   12c80:	ldr	r0, [r5]
   12c84:	ldr	r2, [r0, #20]
   12c88:	ldr	r3, [r0, #24]
   12c8c:	cmp	r2, r3
   12c90:	bcs	12cb4 <__assert_fail@plt+0x1980>
   12c94:	add	r3, r2, #1
   12c98:	add	r6, r6, #1
   12c9c:	str	r3, [r0, #20]
   12ca0:	strb	r1, [r2]
   12ca4:	ldrb	r1, [r6]
   12ca8:	cmp	r1, #13
   12cac:	bls	12be4 <__assert_fail@plt+0x18b0>
   12cb0:	b	12c80 <__assert_fail@plt+0x194c>
   12cb4:	bl	112a4 <__overflow@plt>
   12cb8:	add	r6, r6, #1
   12cbc:	ldrb	r1, [r6]
   12cc0:	cmp	r1, #13
   12cc4:	bls	12be4 <__assert_fail@plt+0x18b0>
   12cc8:	b	12c80 <__assert_fail@plt+0x194c>
   12ccc:	ldr	r0, [r5]
   12cd0:	ldr	r1, [r0, #20]
   12cd4:	ldr	r2, [r0, #24]
   12cd8:	cmp	r1, r2
   12cdc:	bcs	12d04 <__assert_fail@plt+0x19d0>
   12ce0:	add	r2, r1, #1
   12ce4:	str	r2, [r0, #20]
   12ce8:	mov	r0, #10
   12cec:	strb	r0, [r1]
   12cf0:	b	1295c <__assert_fail@plt+0x1628>
   12cf4:	ldr	r7, [sp, #20]
   12cf8:	b	12b84 <__assert_fail@plt+0x1850>
   12cfc:	ldr	r7, [sp, #20]
   12d00:	b	1295c <__assert_fail@plt+0x1628>
   12d04:	mov	r1, #10
   12d08:	bl	112a4 <__overflow@plt>
   12d0c:	b	1295c <__assert_fail@plt+0x1628>
   12d10:	mov	r7, r5
   12d14:	mov	r5, sl
   12d18:	b	12954 <__assert_fail@plt+0x1620>
   12d1c:	mov	r0, #2
   12d20:	mov	r1, r5
   12d24:	bl	183fc <__assert_fail@plt+0x70c8>
   12d28:	ldr	r4, [r9, #48]	; 0x30
   12d2c:	str	r0, [sp, #40]	; 0x28
   12d30:	str	r0, [sp, #12]
   12d34:	ldr	r7, [r9, #56]	; 0x38
   12d38:	ldr	r3, [r9, #60]	; 0x3c
   12d3c:	add	r0, r0, r4
   12d40:	str	r3, [sp, #32]
   12d44:	str	r7, [sp, #28]
   12d48:	str	r0, [sp, #44]	; 0x2c
   12d4c:	ldrb	r0, [r9, #1]
   12d50:	cmp	r0, #0
   12d54:	beq	12ec0 <__assert_fail@plt+0x1b8c>
   12d58:	ldrd	r0, [r9, #72]	; 0x48
   12d5c:	subs	r2, r7, r0
   12d60:	sbcs	r2, r3, r1
   12d64:	bcs	13010 <__assert_fail@plt+0x1cdc>
   12d68:	subs	r7, r0, r7
   12d6c:	str	sl, [sp, #16]
   12d70:	sbc	r0, r1, r3
   12d74:	subs	r1, r7, r4
   12d78:	sbcs	r0, r0, #0
   12d7c:	movcs	r7, r4
   12d80:	sub	r0, r7, #1
   12d84:	cmp	r0, r4
   12d88:	bcs	12fd8 <__assert_fail@plt+0x1ca4>
   12d8c:	ldr	sl, [sp, #12]
   12d90:	mov	r8, #0
   12d94:	mov	r0, #1
   12d98:	str	r0, [sp, #20]
   12d9c:	ldr	r3, [r9, #44]	; 0x2c
   12da0:	mov	r6, #0
   12da4:	mov	r5, #1
   12da8:	cmp	r3, #0
   12dac:	beq	12e00 <__assert_fail@plt+0x1acc>
   12db0:	mov	r5, #1
   12db4:	mov	r6, #0
   12db8:	sub	r4, r7, r6
   12dbc:	add	r0, sl, r6
   12dc0:	mov	r1, #1
   12dc4:	mov	r2, r4
   12dc8:	bl	11304 <fread_unlocked@plt>
   12dcc:	add	r6, r0, r6
   12dd0:	cmp	r0, r4
   12dd4:	beq	12dfc <__assert_fail@plt+0x1ac8>
   12dd8:	bl	11214 <__errno_location@plt>
   12ddc:	ldr	r0, [r0]
   12de0:	bl	14cfc <__assert_fail@plt+0x39c8>
   12de4:	and	r4, r5, r0
   12de8:	bl	14168 <__assert_fail@plt+0x2e34>
   12dec:	ldr	r3, [r9, #44]	; 0x2c
   12df0:	and	r5, r4, r0
   12df4:	cmp	r3, #0
   12df8:	bne	12db8 <__assert_fail@plt+0x1a84>
   12dfc:	ldr	r4, [r9, #48]	; 0x30
   12e00:	ldr	r0, [sp, #20]
   12e04:	cmp	r6, r4
   12e08:	and	r0, r5, r0
   12e0c:	and	r7, r0, #1
   12e10:	bcc	13034 <__assert_fail@plt+0x1d00>
   12e14:	ldr	r5, [sp, #32]
   12e18:	bne	133e0 <__assert_fail@plt+0x20ac>
   12e1c:	eor	r8, r8, #1
   12e20:	add	r1, sp, #40	; 0x28
   12e24:	ldr	r6, [sp, #28]
   12e28:	mov	r2, r4
   12e2c:	str	sl, [sp]
   12e30:	uxtb	r0, r8
   12e34:	str	r8, [sp, #24]
   12e38:	ldr	r8, [r1, r0, lsl #2]
   12e3c:	mov	r1, r5
   12e40:	mov	r0, r6
   12e44:	mov	r3, r8
   12e48:	bl	14e04 <__assert_fail@plt+0x3ad0>
   12e4c:	ldrd	r0, [r9, #72]	; 0x48
   12e50:	adds	r6, r6, r4
   12e54:	adc	r5, r5, #0
   12e58:	str	r6, [sp, #28]
   12e5c:	subs	r2, r6, r0
   12e60:	sbcs	r2, r5, r1
   12e64:	bcs	1303c <__assert_fail@plt+0x1d08>
   12e68:	ldr	r4, [r9, #48]	; 0x30
   12e6c:	str	r7, [sp, #20]
   12e70:	subs	r7, r0, r6
   12e74:	mov	sl, r8
   12e78:	ldr	r8, [sp, #24]
   12e7c:	str	r5, [sp, #32]
   12e80:	sbc	r0, r1, r5
   12e84:	subs	r1, r7, r4
   12e88:	sbcs	r0, r0, #0
   12e8c:	movcs	r7, r4
   12e90:	sub	r0, r7, #1
   12e94:	cmp	r0, r4
   12e98:	bcc	12d9c <__assert_fail@plt+0x1a68>
   12e9c:	b	12fd8 <__assert_fail@plt+0x1ca4>
   12ea0:	mov	r7, r5
   12ea4:	and	r7, r5, r4
   12ea8:	ldr	r0, [sp, #32]
   12eac:	bl	15920 <__assert_fail@plt+0x45ec>
   12eb0:	ldr	sl, [sp, #16]
   12eb4:	movw	r9, #49576	; 0xc1a8
   12eb8:	movt	r9, #2
   12ebc:	b	13188 <__assert_fail@plt+0x1e54>
   12ec0:	cmp	r4, #0
   12ec4:	str	sl, [sp, #16]
   12ec8:	beq	12fd8 <__assert_fail@plt+0x1ca4>
   12ecc:	ldr	sl, [sp, #12]
   12ed0:	mov	r7, #1
   12ed4:	mov	r0, #0
   12ed8:	str	r0, [sp, #24]
   12edc:	ldr	r3, [r9, #44]	; 0x2c
   12ee0:	cmp	r3, #0
   12ee4:	beq	12f58 <__assert_fail@plt+0x1c24>
   12ee8:	ldr	r5, [sp, #24]
   12eec:	mov	r9, #1
   12ef0:	mov	r6, #0
   12ef4:	str	r7, [sp, #20]
   12ef8:	sub	r7, r4, r6
   12efc:	add	r0, sl, r6
   12f00:	mov	r1, #1
   12f04:	mov	r2, r7
   12f08:	bl	11304 <fread_unlocked@plt>
   12f0c:	add	r6, r0, r6
   12f10:	cmp	r0, r7
   12f14:	beq	12f44 <__assert_fail@plt+0x1c10>
   12f18:	bl	11214 <__errno_location@plt>
   12f1c:	ldr	r0, [r0]
   12f20:	bl	14cfc <__assert_fail@plt+0x39c8>
   12f24:	and	r7, r9, r0
   12f28:	bl	14168 <__assert_fail@plt+0x2e34>
   12f2c:	and	r9, r7, r0
   12f30:	movw	r0, #49576	; 0xc1a8
   12f34:	movt	r0, #2
   12f38:	ldr	r3, [r0, #44]	; 0x2c
   12f3c:	cmp	r3, #0
   12f40:	bne	12ef8 <__assert_fail@plt+0x1bc4>
   12f44:	movw	r0, #49576	; 0xc1a8
   12f48:	ldr	r7, [sp, #20]
   12f4c:	movt	r0, #2
   12f50:	ldr	r4, [r0, #48]	; 0x30
   12f54:	b	12f64 <__assert_fail@plt+0x1c30>
   12f58:	ldr	r5, [sp, #24]
   12f5c:	mov	r6, #0
   12f60:	mov	r9, #1
   12f64:	and	r7, r7, r9
   12f68:	movw	r9, #49576	; 0xc1a8
   12f6c:	cmp	r6, r4
   12f70:	movt	r9, #2
   12f74:	bcc	12ff8 <__assert_fail@plt+0x1cc4>
   12f78:	bne	133b4 <__assert_fail@plt+0x2080>
   12f7c:	eor	r5, r5, #1
   12f80:	add	r1, sp, #40	; 0x28
   12f84:	mov	r8, r7
   12f88:	ldr	r7, [sp, #32]
   12f8c:	mov	r2, r4
   12f90:	str	sl, [sp]
   12f94:	and	r0, r5, #1
   12f98:	str	r5, [sp, #24]
   12f9c:	ldr	r5, [sp, #28]
   12fa0:	ldr	r6, [r1, r0, lsl #2]
   12fa4:	mov	r1, r7
   12fa8:	mov	r0, r5
   12fac:	mov	r3, r6
   12fb0:	bl	14e04 <__assert_fail@plt+0x3ad0>
   12fb4:	adds	r5, r5, r4
   12fb8:	ldr	r4, [r9, #48]	; 0x30
   12fbc:	mov	sl, r6
   12fc0:	adc	r7, r7, #0
   12fc4:	str	r5, [sp, #28]
   12fc8:	str	r7, [sp, #32]
   12fcc:	mov	r7, r8
   12fd0:	cmp	r4, #0
   12fd4:	bne	12edc <__assert_fail@plt+0x1ba8>
   12fd8:	movw	r0, #45222	; 0xb0a6
   12fdc:	movw	r1, #44607	; 0xae3f
   12fe0:	movw	r3, #45252	; 0xb0c4
   12fe4:	movw	r2, #1293	; 0x50d
   12fe8:	movt	r0, #1
   12fec:	movt	r1, #1
   12ff0:	movt	r3, #1
   12ff4:	bl	11334 <__assert_fail@plt>
   12ff8:	ldr	sl, [sp, #16]
   12ffc:	cmp	r6, #0
   13000:	bne	13068 <__assert_fail@plt+0x1d34>
   13004:	ldr	r4, [sp, #32]
   13008:	ldr	r5, [sp, #28]
   1300c:	b	13144 <__assert_fail@plt+0x1e10>
   13010:	mov	r7, #1
   13014:	mov	r8, #0
   13018:	mov	r6, #0
   1301c:	b	13054 <__assert_fail@plt+0x1d20>
   13020:	str	r4, [r9, #48]	; 0x30
   13024:	mov	r5, r4
   13028:	cmp	r0, #0
   1302c:	bne	128b4 <__assert_fail@plt+0x1580>
   13030:	b	1291c <__assert_fail@plt+0x15e8>
   13034:	ldr	r5, [sp, #32]
   13038:	b	13044 <__assert_fail@plt+0x1d10>
   1303c:	ldr	r8, [sp, #24]
   13040:	mov	r6, #0
   13044:	ldr	sl, [sp, #16]
   13048:	cmp	r7, #0
   1304c:	str	r5, [sp, #32]
   13050:	movwne	r7, #1
   13054:	uxtb	r5, r8
   13058:	cmp	r5, #0
   1305c:	movwne	r5, #1
   13060:	cmp	r6, #0
   13064:	beq	13004 <__assert_fail@plt+0x1cd0>
   13068:	ldr	ip, [r9, #12]
   1306c:	mov	r9, #1
   13070:	mov	r2, #1
   13074:	str	r7, [sp, #20]
   13078:	cmp	ip, #0
   1307c:	beq	130dc <__assert_fail@plt+0x1da8>
   13080:	movw	r0, #49576	; 0xc1a8
   13084:	mov	r2, #1
   13088:	mov	r3, #0
   1308c:	movt	r0, #2
   13090:	ldr	lr, [r0, #20]
   13094:	add	r0, lr, r3, lsl #5
   13098:	movw	r1, #45572	; 0xb204
   1309c:	movt	r1, #1
   130a0:	ldr	r0, [r0, #4]
   130a4:	ldr	r0, [r1, r0, lsl #2]
   130a8:	mov	r1, r2
   130ac:	mov	r4, r0
   130b0:	mov	r7, r4
   130b4:	udiv	r4, r1, r4
   130b8:	mls	r4, r4, r7, r1
   130bc:	mov	r1, r7
   130c0:	cmp	r4, #0
   130c4:	bne	130b0 <__assert_fail@plt+0x1d7c>
   130c8:	udiv	r0, r0, r7
   130cc:	add	r3, r3, #1
   130d0:	cmp	r3, ip
   130d4:	mul	r2, r0, r2
   130d8:	bne	13094 <__assert_fail@plt+0x1d60>
   130dc:	add	r0, r6, r2
   130e0:	add	r4, sp, #40	; 0x28
   130e4:	sub	r0, r0, #1
   130e8:	udiv	r1, r0, r2
   130ec:	mls	r1, r1, r2, r0
   130f0:	add	r1, r1, r6
   130f4:	sub	r2, r0, r1
   130f8:	and	r0, r5, #1
   130fc:	mov	r1, #0
   13100:	ldr	r7, [r4, r0, lsl #2]
   13104:	add	r0, r7, r6
   13108:	bl	11244 <memset@plt>
   1310c:	bic	r0, r9, r5
   13110:	ldr	r5, [sp, #28]
   13114:	mov	r2, r6
   13118:	str	r7, [sp]
   1311c:	ldr	r3, [r4, r0, lsl #2]
   13120:	ldr	r4, [sp, #32]
   13124:	mov	r0, r5
   13128:	mov	r1, r4
   1312c:	bl	14e04 <__assert_fail@plt+0x3ad0>
   13130:	ldr	r7, [sp, #20]
   13134:	movw	r9, #49576	; 0xc1a8
   13138:	adds	r5, r5, r6
   1313c:	movt	r9, #2
   13140:	adc	r4, r4, #0
   13144:	ldr	r3, [r9, #24]
   13148:	mov	r0, r5
   1314c:	mov	r1, r4
   13150:	mov	r2, #10
   13154:	blx	r3
   13158:	ldrd	r0, [r9, #72]	; 0x48
   1315c:	subs	r0, r5, r0
   13160:	sbcs	r0, r4, r1
   13164:	bcc	13180 <__assert_fail@plt+0x1e4c>
   13168:	ldrb	r0, [r9, #1]
   1316c:	cmp	r0, #0
   13170:	beq	13180 <__assert_fail@plt+0x1e4c>
   13174:	mov	r0, #0
   13178:	bl	14cfc <__assert_fail@plt+0x39c8>
   1317c:	and	r7, r7, r0
   13180:	ldr	r0, [sp, #12]
   13184:	bl	15920 <__assert_fail@plt+0x45ec>
   13188:	and	sl, sl, r7
   1318c:	ldrb	r0, [r9, #6]
   13190:	cmp	r0, #1
   13194:	bne	131b0 <__assert_fail@plt+0x1e7c>
   13198:	movw	r0, #49520	; 0xc170
   1319c:	movt	r0, #2
   131a0:	ldr	r0, [r0]
   131a4:	bl	15828 <__assert_fail@plt+0x44f4>
   131a8:	cmn	r0, #1
   131ac:	beq	1347c <__assert_fail@plt+0x2148>
   131b0:	eor	r0, sl, #1
   131b4:	sub	sp, fp, #28
   131b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131bc:	mov	r0, #1
   131c0:	ldr	r1, [sp, #44]	; 0x2c
   131c4:	add	r5, r4, #8
   131c8:	strb	r0, [r9, #5]
   131cc:	ldr	r0, [sp, #40]	; 0x28
   131d0:	strd	r0, [r9, #56]	; 0x38
   131d4:	ldr	r0, [fp, #-136]	; 0xffffff78
   131d8:	str	r0, [sp, #20]
   131dc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   131e0:	str	r0, [sp, #12]
   131e4:	ldrb	r0, [r9, #5]
   131e8:	cmp	r0, #1
   131ec:	bne	124c0 <__assert_fail@plt+0x118c>
   131f0:	b	123b8 <__assert_fail@plt+0x1084>
   131f4:	ldr	r7, [sp, #20]
   131f8:	and	r7, r7, r4
   131fc:	b	12ea8 <__assert_fail@plt+0x1b74>
   13200:	mov	r7, r5
   13204:	b	12ea8 <__assert_fail@plt+0x1b74>
   13208:	mov	r2, #8
   1320c:	sub	r3, fp, #136	; 0x88
   13210:	mov	r0, r5
   13214:	mov	r1, #0
   13218:	str	r8, [sp]
   1321c:	bl	18bb8 <__assert_fail@plt+0x7884>
   13220:	cmp	r0, #0
   13224:	bne	12394 <__assert_fail@plt+0x1060>
   13228:	ldr	r0, [sp, #40]	; 0x28
   1322c:	ldr	r1, [sp, #44]	; 0x2c
   13230:	mov	r6, #1
   13234:	add	r5, r4, #8
   13238:	strb	r6, [r9, #5]
   1323c:	strd	r0, [r9, #56]	; 0x38
   13240:	ldr	r0, [r7]
   13244:	ldr	r1, [fp, #-136]	; 0xffffff78
   13248:	str	r1, [sp, #20]
   1324c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   13250:	ldr	r0, [r4, r0, lsl #2]!
   13254:	str	r1, [sp, #12]
   13258:	str	r0, [r4, #8]
   1325c:	ldrb	r0, [r9, #5]
   13260:	cmp	r0, #1
   13264:	bne	124c0 <__assert_fail@plt+0x118c>
   13268:	b	123b8 <__assert_fail@plt+0x1084>
   1326c:	ldr	r0, [sp, #32]
   13270:	bl	15920 <__assert_fail@plt+0x45ec>
   13274:	mov	r0, #0
   13278:	bl	14cfc <__assert_fail@plt+0x39c8>
   1327c:	and	r7, r7, r0
   13280:	b	12eb0 <__assert_fail@plt+0x1b7c>
   13284:	ldr	r7, [sp, #20]
   13288:	b	12ea8 <__assert_fail@plt+0x1b74>
   1328c:	mov	r0, #1
   13290:	bl	11430 <__assert_fail@plt+0xfc>
   13294:	movw	r0, #49416	; 0xc108
   13298:	movw	r2, #43825	; 0xab31
   1329c:	mov	r1, #0
   132a0:	movt	r0, #2
   132a4:	movt	r2, #1
   132a8:	str	r1, [sp, #4]
   132ac:	movw	r1, #43651	; 0xaa83
   132b0:	movt	r1, #1
   132b4:	ldr	r3, [r0]
   132b8:	movw	r0, #49524	; 0xc174
   132bc:	str	r2, [sp]
   132c0:	movw	r2, #43811	; 0xab23
   132c4:	movt	r0, #2
   132c8:	movt	r2, #1
   132cc:	ldr	r0, [r0]
   132d0:	bl	180f8 <__assert_fail@plt+0x6dc4>
   132d4:	mov	r0, #0
   132d8:	bl	111e4 <exit@plt>
   132dc:	mov	r0, #0
   132e0:	bl	11430 <__assert_fail@plt+0xfc>
   132e4:	movw	r1, #43678	; 0xaa9e
   132e8:	mov	r0, #0
   132ec:	mov	r2, #5
   132f0:	movt	r1, #1
   132f4:	bl	11100 <dcgettext@plt>
   132f8:	mov	r2, r0
   132fc:	ldr	r0, [r5]
   13300:	mov	r1, #0
   13304:	ldrb	r3, [r0]
   13308:	mov	r0, #1
   1330c:	bl	11178 <error@plt>
   13310:	ldr	r2, [r5]
   13314:	ldr	r1, [sp, #36]	; 0x24
   13318:	movw	r3, #45352	; 0xb128
   1331c:	movt	r3, #1
   13320:	str	r2, [sp]
   13324:	mov	r2, #83	; 0x53
   13328:	bl	18af4 <__assert_fail@plt+0x77c0>
   1332c:	ldr	r2, [r5]
   13330:	ldr	r1, [sp, #36]	; 0x24
   13334:	movw	r3, #45352	; 0xb128
   13338:	movt	r3, #1
   1333c:	str	r2, [sp]
   13340:	mov	r2, #106	; 0x6a
   13344:	bl	18af4 <__assert_fail@plt+0x77c0>
   13348:	ldr	r2, [r5]
   1334c:	ldr	r1, [sp, #36]	; 0x24
   13350:	movw	r3, #45352	; 0xb128
   13354:	movt	r3, #1
   13358:	str	r2, [sp]
   1335c:	mov	r2, #78	; 0x4e
   13360:	bl	18af4 <__assert_fail@plt+0x77c0>
   13364:	ldr	r2, [r5]
   13368:	ldr	r1, [sp, #36]	; 0x24
   1336c:	movw	r3, #45352	; 0xb128
   13370:	movt	r3, #1
   13374:	str	r2, [sp]
   13378:	mov	r2, #119	; 0x77
   1337c:	bl	18af4 <__assert_fail@plt+0x77c0>
   13380:	movw	r1, #43750	; 0xaae6
   13384:	mov	r0, #0
   13388:	mov	r2, #5
   1338c:	movt	r1, #1
   13390:	bl	11100 <dcgettext@plt>
   13394:	mov	r4, r0
   13398:	ldr	r0, [r5]
   1339c:	bl	17c54 <__assert_fail@plt+0x6920>
   133a0:	mov	r3, r0
   133a4:	mov	r0, #1
   133a8:	mov	r1, #0
   133ac:	mov	r2, r4
   133b0:	bl	11178 <error@plt>
   133b4:	movw	r0, #45173	; 0xb075
   133b8:	movw	r1, #44607	; 0xae3f
   133bc:	movw	r3, #45205	; 0xb095
   133c0:	movw	r2, #1418	; 0x58a
   133c4:	movt	r0, #1
   133c8:	movt	r1, #1
   133cc:	movt	r3, #1
   133d0:	bl	11334 <__assert_fail@plt>
   133d4:	movw	r1, #43838	; 0xab3e
   133d8:	movt	r1, #1
   133dc:	b	134b0 <__assert_fail@plt+0x217c>
   133e0:	movw	r0, #45173	; 0xb075
   133e4:	movw	r1, #44607	; 0xae3f
   133e8:	movw	r3, #45205	; 0xb095
   133ec:	movw	r2, #1404	; 0x57c
   133f0:	movt	r0, #1
   133f4:	movt	r1, #1
   133f8:	movt	r3, #1
   133fc:	bl	11334 <__assert_fail@plt>
   13400:	movw	r1, #43884	; 0xab6c
   13404:	mov	r0, #0
   13408:	mov	r2, #5
   1340c:	movt	r1, #1
   13410:	bl	11100 <dcgettext@plt>
   13414:	mov	r5, r0
   13418:	ldr	r0, [r7]
   1341c:	add	r0, r4, r0, lsl #2
   13420:	ldr	r0, [r0, #4]
   13424:	bl	17c54 <__assert_fail@plt+0x6920>
   13428:	mov	r3, r0
   1342c:	mov	r0, #0
   13430:	mov	r1, #0
   13434:	mov	r2, r5
   13438:	bl	11178 <error@plt>
   1343c:	movw	r1, #43901	; 0xab7d
   13440:	mov	r0, #0
   13444:	mov	r2, #5
   13448:	movt	r1, #1
   1344c:	bl	11100 <dcgettext@plt>
   13450:	movw	r2, #46226	; 0xb492
   13454:	mov	r3, r0
   13458:	mov	r0, #0
   1345c:	mov	r1, #0
   13460:	movt	r2, #1
   13464:	bl	11178 <error@plt>
   13468:	mov	r0, #1
   1346c:	bl	11430 <__assert_fail@plt+0xfc>
   13470:	movw	r1, #43946	; 0xabaa
   13474:	movt	r1, #1
   13478:	b	134b0 <__assert_fail@plt+0x217c>
   1347c:	bl	11214 <__errno_location@plt>
   13480:	movw	r1, #44031	; 0xabff
   13484:	ldr	r4, [r0]
   13488:	mov	r0, #0
   1348c:	mov	r2, #5
   13490:	movt	r1, #1
   13494:	bl	11100 <dcgettext@plt>
   13498:	mov	r2, r0
   1349c:	mov	r0, #1
   134a0:	mov	r1, r4
   134a4:	bl	11178 <error@plt>
   134a8:	movw	r1, #45122	; 0xb042
   134ac:	movt	r1, #1
   134b0:	mov	r0, #0
   134b4:	mov	r2, #5
   134b8:	bl	11100 <dcgettext@plt>
   134bc:	mov	r2, r0
   134c0:	mov	r0, #1
   134c4:	mov	r1, #0
   134c8:	bl	11178 <error@plt>
   134cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134d0:	add	fp, sp, #24
   134d4:	sub	sp, sp, #32
   134d8:	mov	r4, r1
   134dc:	movw	r1, #49576	; 0xc1a8
   134e0:	mov	r5, r0
   134e4:	mov	r0, #0
   134e8:	add	r9, sp, #7
   134ec:	movt	r1, #2
   134f0:	strb	r0, [sp, #31]
   134f4:	add	r6, r9, #23
   134f8:	mov	r7, r6
   134fc:	ldr	r8, [r1, #32]
   13500:	ldr	r0, [r1, #28]
   13504:	strb	r2, [r7], -r8
   13508:	cmp	r0, #8
   1350c:	beq	13554 <__assert_fail@plt+0x2220>
   13510:	cmp	r0, #10
   13514:	beq	1358c <__assert_fail@plt+0x2258>
   13518:	cmp	r0, #16
   1351c:	bne	13580 <__assert_fail@plt+0x224c>
   13520:	movw	r1, #44488	; 0xadc8
   13524:	add	r0, r9, #22
   13528:	movt	r1, #1
   1352c:	and	r2, r5, #15
   13530:	ldrb	r2, [r1, r2]
   13534:	strb	r2, [r0], #-1
   13538:	lsr	r2, r5, #4
   1353c:	orr	r5, r2, r4, lsl #28
   13540:	orr	r2, r5, r4, lsr #4
   13544:	lsr	r4, r4, #4
   13548:	cmp	r2, #0
   1354c:	bne	1352c <__assert_fail@plt+0x21f8>
   13550:	b	1357c <__assert_fail@plt+0x2248>
   13554:	add	r0, r9, #22
   13558:	mov	r1, #6
   1355c:	lsr	r2, r5, #3
   13560:	bfi	r5, r1, #3, #29
   13564:	strb	r5, [r0], #-1
   13568:	orr	r5, r2, r4, lsl #29
   1356c:	orr	r2, r5, r4, lsr #3
   13570:	lsr	r4, r4, #3
   13574:	cmp	r2, #0
   13578:	bne	1355c <__assert_fail@plt+0x2228>
   1357c:	add	r6, r0, #1
   13580:	cmp	r7, r6
   13584:	bcc	135d4 <__assert_fail@plt+0x22a0>
   13588:	b	135fc <__assert_fail@plt+0x22c8>
   1358c:	add	r6, r9, #22
   13590:	mov	r0, r5
   13594:	mov	r1, r4
   13598:	mov	r2, #10
   1359c:	mov	r3, #0
   135a0:	bl	19bac <__assert_fail@plt+0x8878>
   135a4:	add	r2, r0, r0, lsl #2
   135a8:	sub	r2, r5, r2, lsl #1
   135ac:	orr	r2, r2, #48	; 0x30
   135b0:	strb	r2, [r6], #-1
   135b4:	rsbs	r2, r5, #9
   135b8:	mov	r5, r0
   135bc:	rscs	r2, r4, #0
   135c0:	mov	r4, r1
   135c4:	bcc	13590 <__assert_fail@plt+0x225c>
   135c8:	add	r6, r6, #1
   135cc:	cmp	r7, r6
   135d0:	bcs	135fc <__assert_fail@plt+0x22c8>
   135d4:	sub	r1, r8, r9
   135d8:	sub	r0, r9, r8
   135dc:	add	r1, r1, r6
   135e0:	add	r0, r0, #23
   135e4:	sub	r2, r1, #23
   135e8:	mov	r1, #48	; 0x30
   135ec:	bl	11244 <memset@plt>
   135f0:	sub	r6, r6, #1
   135f4:	cmp	r7, r6
   135f8:	bcc	135f0 <__assert_fail@plt+0x22bc>
   135fc:	movw	r0, #49524	; 0xc174
   13600:	movt	r0, #2
   13604:	ldr	r1, [r0]
   13608:	mov	r0, r6
   1360c:	bl	1107c <fputs_unlocked@plt>
   13610:	sub	sp, fp, #24
   13614:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13618:	bx	lr
   1361c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13620:	add	fp, sp, #28
   13624:	sub	sp, sp, #20
   13628:	cmp	r0, #0
   1362c:	beq	13dac <__assert_fail@plt+0x2a78>
   13630:	ldrb	r1, [r0]
   13634:	cmp	r1, #0
   13638:	beq	13c68 <__assert_fail@plt+0x2934>
   1363c:	movw	r7, #49576	; 0xc1a8
   13640:	mov	r9, r0
   13644:	str	r0, [sp, #12]
   13648:	movt	r7, #2
   1364c:	ldr	r6, [r7, #12]
   13650:	ldr	r0, [r7, #16]
   13654:	cmp	r0, r6
   13658:	bls	13760 <__assert_fail@plt+0x242c>
   1365c:	ldr	r8, [r7, #20]
   13660:	add	sl, r8, r6, lsl #5
   13664:	cmp	sl, #0
   13668:	beq	13d4c <__assert_fail@plt+0x2a18>
   1366c:	ldrb	r0, [r9]
   13670:	sub	r1, r0, #97	; 0x61
   13674:	cmp	r1, #23
   13678:	bhi	13cbc <__assert_fail@plt+0x2988>
   1367c:	add	r2, pc, #4
   13680:	str	r9, [sp, #16]
   13684:	ldr	pc, [r2, r1, lsl #2]
   13688:	ldrdeq	r3, [r1], -r4
   1368c:			; <UNDEFINED> instruction: 0x00013cbc
   13690:	andeq	r3, r1, ip, lsl #15
   13694:	andeq	r3, r1, r8, ror #13
   13698:			; <UNDEFINED> instruction: 0x00013cbc
   1369c:	andeq	r3, r1, r8, lsr #15
   136a0:			; <UNDEFINED> instruction: 0x00013cbc
   136a4:			; <UNDEFINED> instruction: 0x00013cbc
   136a8:			; <UNDEFINED> instruction: 0x00013cbc
   136ac:			; <UNDEFINED> instruction: 0x00013cbc
   136b0:			; <UNDEFINED> instruction: 0x00013cbc
   136b4:			; <UNDEFINED> instruction: 0x00013cbc
   136b8:			; <UNDEFINED> instruction: 0x00013cbc
   136bc:			; <UNDEFINED> instruction: 0x00013cbc
   136c0:	andeq	r3, r1, r8, ror #13
   136c4:			; <UNDEFINED> instruction: 0x00013cbc
   136c8:			; <UNDEFINED> instruction: 0x00013cbc
   136cc:			; <UNDEFINED> instruction: 0x00013cbc
   136d0:			; <UNDEFINED> instruction: 0x00013cbc
   136d4:			; <UNDEFINED> instruction: 0x00013cbc
   136d8:	andeq	r3, r1, r8, ror #13
   136dc:			; <UNDEFINED> instruction: 0x00013cbc
   136e0:			; <UNDEFINED> instruction: 0x00013cbc
   136e4:	andeq	r3, r1, r8, ror #13
   136e8:	mov	r4, r9
   136ec:	ldrb	r2, [r4, #1]!
   136f0:	sub	r1, r2, #67	; 0x43
   136f4:	cmp	r1, #16
   136f8:	bhi	13820 <__assert_fail@plt+0x24ec>
   136fc:	add	r3, pc, #0
   13700:	ldr	pc, [r3, r1, lsl #2]
   13704:	strdeq	r3, [r1], -r0
   13708:	andeq	r3, r1, r0, lsr #16
   1370c:	andeq	r3, r1, r0, lsr #16
   13710:	andeq	r3, r1, r0, lsr #16
   13714:	andeq	r3, r1, r0, lsr #16
   13718:	andeq	r3, r1, r0, lsr #16
   1371c:	andeq	r3, r1, r8, asr #14
   13720:	andeq	r3, r1, r0, lsr #16
   13724:	andeq	r3, r1, r0, lsr #16
   13728:	andeq	r3, r1, r8, asr #14
   1372c:	andeq	r3, r1, r0, lsr #16
   13730:	andeq	r3, r1, r0, lsr #16
   13734:	andeq	r3, r1, r0, lsr #16
   13738:	andeq	r3, r1, r0, lsr #16
   1373c:	andeq	r3, r1, r0, lsr #16
   13740:	andeq	r3, r1, r0, lsr #16
   13744:	andeq	r3, r1, r8, lsl #16
   13748:	add	r4, r9, #2
   1374c:	mov	r5, #4
   13750:	sub	r0, r0, #100	; 0x64
   13754:	cmp	r0, #20
   13758:	bls	13890 <__assert_fail@plt+0x255c>
   1375c:	b	13d48 <__assert_fail@plt+0x2a14>
   13760:	ldr	r0, [r7, #20]
   13764:	add	r1, r7, #16
   13768:	mov	r2, #32
   1376c:	bl	184d8 <__assert_fail@plt+0x71a4>
   13770:	str	r0, [r7, #20]
   13774:	mov	r8, r0
   13778:	ldr	r6, [r7, #12]
   1377c:	add	sl, r8, r6, lsl #5
   13780:	cmp	sl, #0
   13784:	bne	1366c <__assert_fail@plt+0x2338>
   13788:	b	13d4c <__assert_fail@plt+0x2a18>
   1378c:	movw	r0, #19436	; 0x4bec
   13790:	add	r4, r9, #1
   13794:	mov	r5, #3
   13798:	mov	r9, #1
   1379c:	mov	r7, #6
   137a0:	movt	r0, #1
   137a4:	b	13c0c <__assert_fail@plt+0x28d8>
   137a8:	mov	r4, r9
   137ac:	ldrb	r0, [r4, #1]!
   137b0:	cmp	r0, #68	; 0x44
   137b4:	beq	137c8 <__assert_fail@plt+0x2494>
   137b8:	cmp	r0, #70	; 0x46
   137bc:	beq	13b0c <__assert_fail@plt+0x27d8>
   137c0:	cmp	r0, #76	; 0x4c
   137c4:	bne	13b18 <__assert_fail@plt+0x27e4>
   137c8:	add	r4, r9, #2
   137cc:	mov	r5, #8
   137d0:	b	13b80 <__assert_fail@plt+0x284c>
   137d4:	movw	r0, #19224	; 0x4b18
   137d8:	add	r4, r9, #1
   137dc:	mov	r5, #3
   137e0:	mov	r9, #1
   137e4:	mov	r7, #5
   137e8:	movt	r0, #1
   137ec:	b	13c0c <__assert_fail@plt+0x28d8>
   137f0:	add	r4, r9, #2
   137f4:	mov	r5, #1
   137f8:	sub	r0, r0, #100	; 0x64
   137fc:	cmp	r0, #20
   13800:	bls	13890 <__assert_fail@plt+0x255c>
   13804:	b	13d48 <__assert_fail@plt+0x2a14>
   13808:	add	r4, r9, #2
   1380c:	mov	r5, #2
   13810:	sub	r0, r0, #100	; 0x64
   13814:	cmp	r0, #20
   13818:	bls	13890 <__assert_fail@plt+0x255c>
   1381c:	b	13d48 <__assert_fail@plt+0x2a14>
   13820:	sub	r3, r2, #48	; 0x30
   13824:	mov	r5, #4
   13828:	cmp	r3, #9
   1382c:	bhi	13884 <__assert_fail@plt+0x2550>
   13830:	add	r1, r9, #2
   13834:	mov	r5, #0
   13838:	movw	r4, #52429	; 0xcccd
   1383c:	rsb	r2, r2, #47	; 0x2f
   13840:	movt	r4, #52428	; 0xcccc
   13844:	umull	r2, r4, r2, r4
   13848:	cmp	r5, r4, lsr #3
   1384c:	bhi	13c78 <__assert_fail@plt+0x2944>
   13850:	add	r2, r5, r5, lsl #2
   13854:	add	r5, r3, r2, lsl #1
   13858:	ldrb	r2, [r1], #1
   1385c:	sub	r3, r2, #48	; 0x30
   13860:	cmp	r3, #10
   13864:	bcc	13838 <__assert_fail@plt+0x2504>
   13868:	cmp	r5, #8
   1386c:	bhi	13d08 <__assert_fail@plt+0x29d4>
   13870:	add	r2, r7, r5, lsl #2
   13874:	ldr	r2, [r2, #88]	; 0x58
   13878:	cmp	r2, #0
   1387c:	beq	13d08 <__assert_fail@plt+0x29d4>
   13880:	sub	r4, r1, #1
   13884:	sub	r0, r0, #100	; 0x64
   13888:	cmp	r0, #20
   1388c:	bhi	13d48 <__assert_fail@plt+0x2a14>
   13890:	add	r1, r7, r5, lsl #2
   13894:	ldr	r9, [r1, #88]	; 0x58
   13898:	add	r1, pc, #0
   1389c:	ldr	pc, [r1, r0, lsl #2]
   138a0:	strdeq	r3, [r1], -r4
   138a4:	andeq	r3, r1, r8, asr #26
   138a8:	andeq	r3, r1, r8, asr #26
   138ac:	andeq	r3, r1, r8, asr #26
   138b0:	andeq	r3, r1, r8, asr #26
   138b4:	andeq	r3, r1, r8, asr #26
   138b8:	andeq	r3, r1, r8, asr #26
   138bc:	andeq	r3, r1, r8, asr #26
   138c0:	andeq	r3, r1, r8, asr #26
   138c4:	andeq	r3, r1, r8, asr #26
   138c8:	andeq	r3, r1, r8, asr #26
   138cc:			; <UNDEFINED> instruction: 0x000139b4
   138d0:	andeq	r3, r1, r8, asr #26
   138d4:	andeq	r3, r1, r8, asr #26
   138d8:	andeq	r3, r1, r8, asr #26
   138dc:	andeq	r3, r1, r8, asr #26
   138e0:	andeq	r3, r1, r8, asr #26
   138e4:	andeq	r3, r1, r0, lsr #20
   138e8:	andeq	r3, r1, r8, asr #26
   138ec:	andeq	r3, r1, r8, asr #26
   138f0:	andeq	r3, r1, r8, asr #18
   138f4:	movw	r1, #44871	; 0xaf47
   138f8:	movw	r0, #44029	; 0xabfd
   138fc:	cmp	r9, #4
   13900:	movw	r3, #44864	; 0xaf40
   13904:	mov	r2, #9
   13908:	movt	r1, #1
   1390c:	movt	r0, #1
   13910:	movt	r3, #1
   13914:	moveq	r0, r1
   13918:	movw	r1, #44870	; 0xaf46
   1391c:	cmp	r9, #5
   13920:	movt	r1, #1
   13924:	moveq	r0, r1
   13928:	mov	r1, #1
   1392c:	str	r0, [sp]
   13930:	add	r0, sl, #12
   13934:	bl	11220 <__sprintf_chk@plt>
   13938:	movw	r0, #45664	; 0xb260
   1393c:	mov	r7, #0
   13940:	movt	r0, #1
   13944:	b	13a70 <__assert_fail@plt+0x273c>
   13948:	movw	r1, #44892	; 0xaf5c
   1394c:	movw	r0, #44528	; 0xadf0
   13950:	cmp	r9, #4
   13954:	movw	r3, #44874	; 0xaf4a
   13958:	mov	r2, #9
   1395c:	movt	r1, #1
   13960:	movt	r0, #1
   13964:	movt	r3, #1
   13968:	moveq	r0, r1
   1396c:	movw	r1, #44891	; 0xaf5b
   13970:	cmp	r9, #5
   13974:	movt	r1, #1
   13978:	moveq	r0, r1
   1397c:	mov	r1, #1
   13980:	str	r0, [sp, #4]
   13984:	movw	r0, #45868	; 0xb32c
   13988:	movt	r0, #1
   1398c:	ldr	r5, [r0, r5, lsl #2]
   13990:	add	r0, sl, #12
   13994:	str	r5, [sp]
   13998:	bl	11220 <__sprintf_chk@plt>
   1399c:	mov	r7, #3
   139a0:	add	r0, sl, #12
   139a4:	bl	111fc <strlen@plt>
   139a8:	cmp	r0, #9
   139ac:	bcc	13a84 <__assert_fail@plt+0x2750>
   139b0:	b	13d8c <__assert_fail@plt+0x2a58>
   139b4:	movw	r1, #44884	; 0xaf54
   139b8:	movw	r0, #45106	; 0xb032
   139bc:	cmp	r9, #4
   139c0:	movw	r3, #44874	; 0xaf4a
   139c4:	mov	r2, #9
   139c8:	movt	r1, #1
   139cc:	movt	r0, #1
   139d0:	movt	r3, #1
   139d4:	moveq	r0, r1
   139d8:	movw	r1, #44883	; 0xaf53
   139dc:	cmp	r9, #5
   139e0:	movt	r1, #1
   139e4:	moveq	r0, r1
   139e8:	mov	r1, #1
   139ec:	str	r0, [sp, #4]
   139f0:	movw	r0, #45732	; 0xb2a4
   139f4:	movt	r0, #1
   139f8:	ldr	r5, [r0, r5, lsl #2]
   139fc:	add	r0, sl, #12
   13a00:	str	r5, [sp]
   13a04:	bl	11220 <__sprintf_chk@plt>
   13a08:	mov	r7, #2
   13a0c:	add	r0, sl, #12
   13a10:	bl	111fc <strlen@plt>
   13a14:	cmp	r0, #9
   13a18:	bcc	13a84 <__assert_fail@plt+0x2750>
   13a1c:	b	13d8c <__assert_fail@plt+0x2a58>
   13a20:	movw	r1, #44888	; 0xaf58
   13a24:	movw	r0, #44889	; 0xaf59
   13a28:	cmp	r9, #4
   13a2c:	movw	r3, #44864	; 0xaf40
   13a30:	mov	r2, #9
   13a34:	mov	r7, #1
   13a38:	movt	r1, #1
   13a3c:	movt	r0, #1
   13a40:	movt	r3, #1
   13a44:	moveq	r0, r1
   13a48:	movw	r1, #44887	; 0xaf57
   13a4c:	cmp	r9, #5
   13a50:	movt	r1, #1
   13a54:	moveq	r0, r1
   13a58:	mov	r1, #1
   13a5c:	str	r0, [sp]
   13a60:	add	r0, sl, #12
   13a64:	bl	11220 <__sprintf_chk@plt>
   13a68:	movw	r0, #45800	; 0xb2e8
   13a6c:	movt	r0, #1
   13a70:	ldr	r5, [r0, r5, lsl #2]
   13a74:	add	r0, sl, #12
   13a78:	bl	111fc <strlen@plt>
   13a7c:	cmp	r0, #9
   13a80:	bcs	13d8c <__assert_fail@plt+0x2a58>
   13a84:	sub	r1, r9, #1
   13a88:	cmp	r1, #4
   13a8c:	bhi	13d48 <__assert_fail@plt+0x2a14>
   13a90:	movw	r0, #17720	; 0x4538
   13a94:	add	r2, pc, #4
   13a98:	movt	r0, #1
   13a9c:	ldr	pc, [r2, r1, lsl #2]
   13aa0:			; <UNDEFINED> instruction: 0x00013ab4
   13aa4:	andeq	r3, r1, r0, ror #21
   13aa8:	andeq	r3, r1, ip, lsl #24
   13aac:	andeq	r3, r1, r0, lsl #22
   13ab0:	ldrdeq	r3, [r1], -r4
   13ab4:	movw	r1, #17036	; 0x428c
   13ab8:	movw	r0, #17180	; 0x431c
   13abc:	cmp	r7, #0
   13ac0:	mov	r9, #1
   13ac4:	movt	r1, #1
   13ac8:	movt	r0, #1
   13acc:	moveq	r0, r1
   13ad0:	b	13c0c <__assert_fail@plt+0x28d8>
   13ad4:	movw	r0, #18144	; 0x46e0
   13ad8:	movt	r0, #1
   13adc:	b	13c0c <__assert_fail@plt+0x28d8>
   13ae0:	movw	r1, #17324	; 0x43ac
   13ae4:	movw	r0, #17524	; 0x4474
   13ae8:	cmp	r7, #0
   13aec:	mov	r9, #2
   13af0:	movt	r1, #1
   13af4:	movt	r0, #1
   13af8:	moveq	r0, r1
   13afc:	b	13c0c <__assert_fail@plt+0x28d8>
   13b00:	movw	r0, #17932	; 0x460c
   13b04:	movt	r0, #1
   13b08:	b	13c0c <__assert_fail@plt+0x28d8>
   13b0c:	add	r4, r9, #2
   13b10:	mov	r5, #4
   13b14:	b	13b80 <__assert_fail@plt+0x284c>
   13b18:	sub	r2, r0, #48	; 0x30
   13b1c:	mov	r5, #8
   13b20:	cmp	r2, #9
   13b24:	bhi	13b80 <__assert_fail@plt+0x284c>
   13b28:	add	r1, r9, #2
   13b2c:	mov	r5, #0
   13b30:	movw	r3, #52429	; 0xcccd
   13b34:	rsb	r0, r0, #47	; 0x2f
   13b38:	movt	r3, #52428	; 0xcccc
   13b3c:	umull	r0, r3, r0, r3
   13b40:	cmp	r5, r3, lsr #3
   13b44:	bhi	13c78 <__assert_fail@plt+0x2944>
   13b48:	add	r0, r5, r5, lsl #2
   13b4c:	add	r5, r2, r0, lsl #1
   13b50:	ldrb	r0, [r1], #1
   13b54:	sub	r2, r0, #48	; 0x30
   13b58:	cmp	r2, #10
   13b5c:	bcc	13b30 <__assert_fail@plt+0x27fc>
   13b60:	cmp	r5, #8
   13b64:	bhi	13d18 <__assert_fail@plt+0x29e4>
   13b68:	movw	r0, #49536	; 0xc180
   13b6c:	movt	r0, #2
   13b70:	ldr	r0, [r0, r5, lsl #2]
   13b74:	cmp	r0, #0
   13b78:	beq	13d18 <__assert_fail@plt+0x29e4>
   13b7c:	sub	r4, r1, #1
   13b80:	movw	r0, #49536	; 0xc180
   13b84:	movt	r0, #2
   13b88:	ldr	r5, [r0, r5, lsl #2]
   13b8c:	bl	112d4 <localeconv@plt>
   13b90:	ldr	r0, [r0]
   13b94:	ldrb	r1, [r0]
   13b98:	cmp	r1, #0
   13b9c:	beq	13bd4 <__assert_fail@plt+0x28a0>
   13ba0:	bl	111fc <strlen@plt>
   13ba4:	cmp	r5, #8
   13ba8:	beq	13be0 <__assert_fail@plt+0x28ac>
   13bac:	cmp	r5, #7
   13bb0:	beq	13bf8 <__assert_fail@plt+0x28c4>
   13bb4:	cmp	r5, #6
   13bb8:	bne	13d48 <__assert_fail@plt+0x2a14>
   13bbc:	add	r5, r0, #14
   13bc0:	movw	r0, #18392	; 0x47d8
   13bc4:	mov	r9, #6
   13bc8:	mov	r7, #4
   13bcc:	movt	r0, #1
   13bd0:	b	13c0c <__assert_fail@plt+0x28d8>
   13bd4:	mov	r0, #1
   13bd8:	cmp	r5, #8
   13bdc:	bne	13bac <__assert_fail@plt+0x2878>
   13be0:	add	r5, r0, #23
   13be4:	movw	r0, #18936	; 0x49f8
   13be8:	mov	r9, #8
   13bec:	mov	r7, #4
   13bf0:	movt	r0, #1
   13bf4:	b	13c0c <__assert_fail@plt+0x28d8>
   13bf8:	add	r5, r0, #23
   13bfc:	movw	r0, #18648	; 0x48d8
   13c00:	mov	r9, #7
   13c04:	mov	r7, #4
   13c08:	movt	r0, #1
   13c0c:	str	r7, [r8, r6, lsl #5]!
   13c10:	str	r9, [r8, #4]
   13c14:	str	r0, [r8, #8]
   13c18:	str	r5, [r8, #24]
   13c1c:	mov	r0, r4
   13c20:	ldrb	r1, [r0], #1
   13c24:	subs	r1, r1, #122	; 0x7a
   13c28:	clz	r1, r1
   13c2c:	movne	r0, r4
   13c30:	lsr	r1, r1, #5
   13c34:	strb	r1, [r8, #21]
   13c38:	ldr	r1, [sp, #16]
   13c3c:	cmp	r1, r0
   13c40:	beq	13d6c <__assert_fail@plt+0x2a38>
   13c44:	movw	r7, #49576	; 0xc1a8
   13c48:	mov	r9, r0
   13c4c:	movt	r7, #2
   13c50:	ldr	r1, [r7, #12]
   13c54:	add	r6, r1, #1
   13c58:	str	r6, [r7, #12]
   13c5c:	ldrb	r1, [r0]
   13c60:	cmp	r1, #0
   13c64:	bne	13650 <__assert_fail@plt+0x231c>
   13c68:	mov	r4, #1
   13c6c:	mov	r0, r4
   13c70:	sub	sp, fp, #28
   13c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c78:	movw	r1, #44764	; 0xaedc
   13c7c:	mov	r0, #0
   13c80:	mov	r2, #5
   13c84:	mov	r4, #0
   13c88:	movt	r1, #1
   13c8c:	bl	11100 <dcgettext@plt>
   13c90:	mov	r6, r0
   13c94:	ldr	r0, [sp, #12]
   13c98:	bl	17c54 <__assert_fail@plt+0x6920>
   13c9c:	mov	r3, r0
   13ca0:	mov	r0, #0
   13ca4:	mov	r1, #0
   13ca8:	mov	r2, r6
   13cac:	bl	11178 <error@plt>
   13cb0:	mov	r0, r4
   13cb4:	sub	sp, fp, #28
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cbc:	movw	r1, #45027	; 0xafe3
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	mov	r4, #0
   13ccc:	movt	r1, #1
   13cd0:	bl	11100 <dcgettext@plt>
   13cd4:	mov	r6, r0
   13cd8:	ldr	r0, [sp, #12]
   13cdc:	ldrb	r7, [r9]
   13ce0:	bl	17c54 <__assert_fail@plt+0x6920>
   13ce4:	str	r0, [sp]
   13ce8:	mov	r0, #0
   13cec:	mov	r1, #0
   13cf0:	mov	r2, r6
   13cf4:	mov	r3, r7
   13cf8:	bl	11178 <error@plt>
   13cfc:	mov	r0, r4
   13d00:	sub	sp, fp, #28
   13d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d08:	movw	r1, #44787	; 0xaef3
   13d0c:	mov	r4, #0
   13d10:	movt	r1, #1
   13d14:	b	13d24 <__assert_fail@plt+0x29f0>
   13d18:	movw	r1, #44944	; 0xaf90
   13d1c:	mov	r4, #0
   13d20:	movt	r1, #1
   13d24:	mov	r0, #0
   13d28:	mov	r2, #5
   13d2c:	bl	11100 <dcgettext@plt>
   13d30:	mov	r6, r0
   13d34:	ldr	r0, [sp, #12]
   13d38:	bl	17c54 <__assert_fail@plt+0x6920>
   13d3c:	mov	r3, r0
   13d40:	str	r5, [sp]
   13d44:	b	13ca0 <__assert_fail@plt+0x296c>
   13d48:	bl	1131c <abort@plt>
   13d4c:	movw	r0, #44667	; 0xae7b
   13d50:	movw	r1, #44607	; 0xae3f
   13d54:	movw	r3, #44681	; 0xae89
   13d58:	mov	r2, #648	; 0x288
   13d5c:	movt	r0, #1
   13d60:	movt	r1, #1
   13d64:	movt	r3, #1
   13d68:	bl	11334 <__assert_fail@plt>
   13d6c:	movw	r0, #44657	; 0xae71
   13d70:	movw	r1, #44607	; 0xae3f
   13d74:	movw	r3, #44616	; 0xae48
   13d78:	movw	r2, #997	; 0x3e5
   13d7c:	movt	r0, #1
   13d80:	movt	r1, #1
   13d84:	movt	r3, #1
   13d88:	bl	11334 <__assert_fail@plt>
   13d8c:	movw	r0, #44895	; 0xaf5f
   13d90:	movw	r1, #44607	; 0xae3f
   13d94:	movw	r3, #44681	; 0xae89
   13d98:	movw	r2, #747	; 0x2eb
   13d9c:	movt	r0, #1
   13da0:	movt	r1, #1
   13da4:	movt	r3, #1
   13da8:	bl	11334 <__assert_fail@plt>
   13dac:	movw	r0, #44597	; 0xae35
   13db0:	movw	r1, #44607	; 0xae3f
   13db4:	movw	r3, #44616	; 0xae48
   13db8:	movw	r2, #985	; 0x3d9
   13dbc:	movt	r0, #1
   13dc0:	movt	r1, #1
   13dc4:	movt	r3, #1
   13dc8:	bl	11334 <__assert_fail@plt>
   13dcc:	push	{r4, r5, r6, r7, fp, lr}
   13dd0:	add	fp, sp, #16
   13dd4:	movw	r7, #49524	; 0xc174
   13dd8:	mov	r6, r0
   13ddc:	mov	r4, r2
   13de0:	mov	r5, r1
   13de4:	movt	r7, #2
   13de8:	ldr	r0, [r7]
   13dec:	ldr	r1, [r0, #20]
   13df0:	ldr	r2, [r0, #24]
   13df4:	cmp	r1, r2
   13df8:	bcs	13e48 <__assert_fail@plt+0x2b14>
   13dfc:	add	r2, r1, #1
   13e00:	str	r2, [r0, #20]
   13e04:	mov	r0, #40	; 0x28
   13e08:	strb	r0, [r1]
   13e0c:	mov	r0, r6
   13e10:	mov	r1, r5
   13e14:	mov	r2, #41	; 0x29
   13e18:	bl	134cc <__assert_fail@plt+0x2198>
   13e1c:	cmp	r4, #0
   13e20:	beq	13e44 <__assert_fail@plt+0x2b10>
   13e24:	ldr	r0, [r7]
   13e28:	ldr	r1, [r0, #20]
   13e2c:	ldr	r2, [r0, #24]
   13e30:	cmp	r1, r2
   13e34:	bcs	13e54 <__assert_fail@plt+0x2b20>
   13e38:	add	r2, r1, #1
   13e3c:	str	r2, [r0, #20]
   13e40:	strb	r4, [r1]
   13e44:	pop	{r4, r5, r6, r7, fp, pc}
   13e48:	mov	r1, #40	; 0x28
   13e4c:	bl	112a4 <__overflow@plt>
   13e50:	b	13e0c <__assert_fail@plt+0x2ad8>
   13e54:	mov	r1, r4
   13e58:	pop	{r4, r5, r6, r7, fp, lr}
   13e5c:	b	112a4 <__overflow@plt>
   13e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e64:	add	fp, sp, #28
   13e68:	sub	sp, sp, #36	; 0x24
   13e6c:	movw	r8, #49576	; 0xc1a8
   13e70:	mov	sl, r0
   13e74:	add	r5, sp, #11
   13e78:	mov	r9, r1
   13e7c:	mov	r1, #32
   13e80:	str	r2, [sp, #4]
   13e84:	movt	r8, #2
   13e88:	add	r7, r5, #23
   13e8c:	mov	r4, r7
   13e90:	ldr	r0, [r8, #28]
   13e94:	ldr	r6, [r8, #32]
   13e98:	strh	r1, [r4], -r6
   13e9c:	cmp	r0, #8
   13ea0:	beq	13ef0 <__assert_fail@plt+0x2bbc>
   13ea4:	cmp	r0, #10
   13ea8:	beq	14004 <__assert_fail@plt+0x2cd0>
   13eac:	cmp	r0, #16
   13eb0:	bne	13f24 <__assert_fail@plt+0x2bf0>
   13eb4:	movw	r1, #44488	; 0xadc8
   13eb8:	add	r0, r5, #22
   13ebc:	mov	r2, sl
   13ec0:	mov	r3, r9
   13ec4:	movt	r1, #1
   13ec8:	and	r7, r2, #15
   13ecc:	lsr	r2, r2, #4
   13ed0:	ldrb	r7, [r1, r7]
   13ed4:	orr	r2, r2, r3, lsl #28
   13ed8:	strb	r7, [r0], #-1
   13edc:	orr	r7, r2, r3, lsr #4
   13ee0:	lsr	r3, r3, #4
   13ee4:	cmp	r7, #0
   13ee8:	bne	13ec8 <__assert_fail@plt+0x2b94>
   13eec:	b	13f20 <__assert_fail@plt+0x2bec>
   13ef0:	add	r0, r5, #22
   13ef4:	mov	r1, #6
   13ef8:	mov	r2, sl
   13efc:	mov	r3, r9
   13f00:	lsr	r7, r2, #3
   13f04:	bfi	r2, r1, #3, #29
   13f08:	strb	r2, [r0], #-1
   13f0c:	orr	r2, r7, r3, lsl #29
   13f10:	orr	r7, r2, r3, lsr #3
   13f14:	lsr	r3, r3, #3
   13f18:	cmp	r7, #0
   13f1c:	bne	13f00 <__assert_fail@plt+0x2bcc>
   13f20:	add	r7, r0, #1
   13f24:	cmp	r4, r7
   13f28:	bcs	13f54 <__assert_fail@plt+0x2c20>
   13f2c:	sub	r1, r6, r5
   13f30:	sub	r0, r5, r6
   13f34:	add	r1, r1, r7
   13f38:	add	r0, r0, #23
   13f3c:	sub	r2, r1, #23
   13f40:	mov	r1, #48	; 0x30
   13f44:	bl	11244 <memset@plt>
   13f48:	sub	r7, r7, #1
   13f4c:	cmp	r4, r7
   13f50:	bcc	13f48 <__assert_fail@plt+0x2c14>
   13f54:	movw	r4, #49524	; 0xc174
   13f58:	mov	r0, r7
   13f5c:	movt	r4, #2
   13f60:	ldr	r1, [r4]
   13f64:	bl	1107c <fputs_unlocked@plt>
   13f68:	ldrd	r0, [r8, #80]	; 0x50
   13f6c:	adds	r6, r0, sl
   13f70:	ldr	r0, [r4]
   13f74:	adc	r5, r1, r9
   13f78:	mov	r9, r4
   13f7c:	ldr	r1, [r0, #20]
   13f80:	ldr	r2, [r0, #24]
   13f84:	cmp	r1, r2
   13f88:	bcs	14150 <__assert_fail@plt+0x2e1c>
   13f8c:	add	r2, r1, #1
   13f90:	str	r2, [r0, #20]
   13f94:	mov	r0, #40	; 0x28
   13f98:	strb	r0, [r1]
   13f9c:	ldr	r0, [r8, #28]
   13fa0:	ldr	r8, [r8, #32]
   13fa4:	add	r3, sp, #11
   13fa8:	mov	r1, #41	; 0x29
   13fac:	add	r7, r3, #23
   13fb0:	mov	r4, r7
   13fb4:	strh	r1, [r4], -r8
   13fb8:	cmp	r0, #8
   13fbc:	beq	14064 <__assert_fail@plt+0x2d30>
   13fc0:	cmp	r0, #10
   13fc4:	beq	14100 <__assert_fail@plt+0x2dcc>
   13fc8:	cmp	r0, #16
   13fcc:	bne	14090 <__assert_fail@plt+0x2d5c>
   13fd0:	movw	r1, #44488	; 0xadc8
   13fd4:	add	r0, r3, #22
   13fd8:	movt	r1, #1
   13fdc:	and	r2, r6, #15
   13fe0:	ldrb	r2, [r1, r2]
   13fe4:	strb	r2, [r0], #-1
   13fe8:	lsr	r2, r6, #4
   13fec:	orr	r6, r2, r5, lsl #28
   13ff0:	orr	r2, r6, r5, lsr #4
   13ff4:	lsr	r5, r5, #4
   13ff8:	cmp	r2, #0
   13ffc:	bne	13fdc <__assert_fail@plt+0x2ca8>
   14000:	b	1408c <__assert_fail@plt+0x2d58>
   14004:	add	r8, r5, #22
   14008:	mov	r7, sl
   1400c:	mov	r5, r9
   14010:	mov	r0, r7
   14014:	mov	r1, r5
   14018:	mov	r2, #10
   1401c:	mov	r3, #0
   14020:	bl	19bac <__assert_fail@plt+0x8878>
   14024:	add	r2, r0, r0, lsl #2
   14028:	sub	r2, r7, r2, lsl #1
   1402c:	orr	r2, r2, #48	; 0x30
   14030:	strb	r2, [r8], #-1
   14034:	rsbs	r2, r7, #9
   14038:	mov	r7, r0
   1403c:	rscs	r2, r5, #0
   14040:	mov	r5, r1
   14044:	bcc	14010 <__assert_fail@plt+0x2cdc>
   14048:	add	r7, r8, #1
   1404c:	movw	r8, #49576	; 0xc1a8
   14050:	add	r5, sp, #11
   14054:	movt	r8, #2
   14058:	cmp	r4, r7
   1405c:	bcc	13f2c <__assert_fail@plt+0x2bf8>
   14060:	b	13f54 <__assert_fail@plt+0x2c20>
   14064:	add	r0, r3, #22
   14068:	mov	r1, #6
   1406c:	lsr	r2, r6, #3
   14070:	bfi	r6, r1, #3, #29
   14074:	strb	r6, [r0], #-1
   14078:	orr	r6, r2, r5, lsl #29
   1407c:	orr	r2, r6, r5, lsr #3
   14080:	lsr	r5, r5, #3
   14084:	cmp	r2, #0
   14088:	bne	1406c <__assert_fail@plt+0x2d38>
   1408c:	add	r7, r0, #1
   14090:	cmp	r4, r7
   14094:	bcs	140c0 <__assert_fail@plt+0x2d8c>
   14098:	sub	r1, r8, r3
   1409c:	sub	r0, r3, r8
   140a0:	add	r1, r1, r7
   140a4:	add	r0, r0, #23
   140a8:	sub	r2, r1, #23
   140ac:	mov	r1, #48	; 0x30
   140b0:	bl	11244 <memset@plt>
   140b4:	sub	r7, r7, #1
   140b8:	cmp	r4, r7
   140bc:	bcc	140b4 <__assert_fail@plt+0x2d80>
   140c0:	ldr	r1, [r9]
   140c4:	mov	r0, r7
   140c8:	bl	1107c <fputs_unlocked@plt>
   140cc:	ldr	r1, [sp, #4]
   140d0:	cmp	r1, #0
   140d4:	beq	140f8 <__assert_fail@plt+0x2dc4>
   140d8:	ldr	r0, [r9]
   140dc:	ldr	r3, [r0, #20]
   140e0:	ldr	r2, [r0, #24]
   140e4:	cmp	r3, r2
   140e8:	bcs	1415c <__assert_fail@plt+0x2e28>
   140ec:	add	r2, r3, #1
   140f0:	str	r2, [r0, #20]
   140f4:	strb	r1, [r3]
   140f8:	sub	sp, fp, #28
   140fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14100:	add	r7, r3, #22
   14104:	mov	r0, r6
   14108:	mov	r1, r5
   1410c:	mov	r2, #10
   14110:	mov	r3, #0
   14114:	bl	19bac <__assert_fail@plt+0x8878>
   14118:	add	r2, r0, r0, lsl #2
   1411c:	sub	r2, r6, r2, lsl #1
   14120:	orr	r2, r2, #48	; 0x30
   14124:	strb	r2, [r7], #-1
   14128:	rsbs	r2, r6, #9
   1412c:	mov	r6, r0
   14130:	rscs	r2, r5, #0
   14134:	mov	r5, r1
   14138:	bcc	14104 <__assert_fail@plt+0x2dd0>
   1413c:	add	r7, r7, #1
   14140:	add	r3, sp, #11
   14144:	cmp	r4, r7
   14148:	bcc	14098 <__assert_fail@plt+0x2d64>
   1414c:	b	140c0 <__assert_fail@plt+0x2d8c>
   14150:	mov	r1, #40	; 0x28
   14154:	bl	112a4 <__overflow@plt>
   14158:	b	13f9c <__assert_fail@plt+0x2c68>
   1415c:	bl	112a4 <__overflow@plt>
   14160:	sub	sp, fp, #28
   14164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1416c:	add	fp, sp, #28
   14170:	sub	sp, sp, #4
   14174:	movw	r6, #49576	; 0xc1a8
   14178:	movw	r4, #47318	; 0xb8d6
   1417c:	movw	r8, #49520	; 0xc170
   14180:	movw	sl, #45092	; 0xb024
   14184:	movw	r9, #46226	; 0xb492
   14188:	mov	r7, #1
   1418c:	movt	r6, #2
   14190:	movt	r4, #1
   14194:	movt	r8, #2
   14198:	movt	sl, #1
   1419c:	movt	r9, #1
   141a0:	b	141d4 <__assert_fail@plt+0x2ea0>
   141a4:	movw	r1, #44031	; 0xabff
   141a8:	mov	r0, #0
   141ac:	mov	r2, #5
   141b0:	movt	r1, #1
   141b4:	bl	11100 <dcgettext@plt>
   141b8:	str	r0, [r6, #52]	; 0x34
   141bc:	mov	r0, #1
   141c0:	strb	r0, [r6, #6]
   141c4:	ldr	r0, [r8]
   141c8:	str	r0, [r6, #44]	; 0x2c
   141cc:	cmp	r0, #0
   141d0:	bne	14258 <__assert_fail@plt+0x2f24>
   141d4:	ldr	r0, [r6, #40]	; 0x28
   141d8:	ldr	r5, [r0]
   141dc:	cmp	r5, #0
   141e0:	str	r5, [r6, #52]	; 0x34
   141e4:	beq	14280 <__assert_fail@plt+0x2f4c>
   141e8:	add	r0, r0, #4
   141ec:	mov	r1, r4
   141f0:	str	r0, [r6, #40]	; 0x28
   141f4:	mov	r0, r5
   141f8:	bl	11094 <strcmp@plt>
   141fc:	cmp	r0, #0
   14200:	beq	141a4 <__assert_fail@plt+0x2e70>
   14204:	mov	r0, r5
   14208:	mov	r1, sl
   1420c:	bl	112ec <fopen64@plt>
   14210:	cmp	r0, #0
   14214:	str	r0, [r6, #44]	; 0x2c
   14218:	bne	14258 <__assert_fail@plt+0x2f24>
   1421c:	bl	11214 <__errno_location@plt>
   14220:	ldr	r2, [r6, #52]	; 0x34
   14224:	ldr	r5, [r0]
   14228:	mov	r0, #0
   1422c:	mov	r1, #3
   14230:	mov	r7, #0
   14234:	bl	179a8 <__assert_fail@plt+0x6674>
   14238:	mov	r3, r0
   1423c:	mov	r0, #0
   14240:	mov	r1, r5
   14244:	mov	r2, r9
   14248:	bl	11178 <error@plt>
   1424c:	ldr	r0, [r6, #44]	; 0x2c
   14250:	cmp	r0, #0
   14254:	beq	141d4 <__assert_fail@plt+0x2ea0>
   14258:	ldrb	r1, [r6, #1]
   1425c:	cmp	r1, #1
   14260:	bne	14280 <__assert_fail@plt+0x2f4c>
   14264:	ldrb	r1, [r6]
   14268:	cmp	r1, #0
   1426c:	bne	14280 <__assert_fail@plt+0x2f4c>
   14270:	mov	r1, #0
   14274:	mov	r2, #2
   14278:	mov	r3, #0
   1427c:	bl	11238 <setvbuf@plt>
   14280:	and	r0, r7, #1
   14284:	sub	sp, fp, #28
   14288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1428c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14290:	add	fp, sp, #28
   14294:	sub	sp, sp, #12
   14298:	cmp	r0, r1
   1429c:	str	r3, [sp, #4]
   142a0:	str	r0, [sp, #8]
   142a4:	bls	14314 <__assert_fail@plt+0x2fe0>
   142a8:	ldr	r4, [fp, #12]
   142ac:	ldr	r7, [sp, #8]
   142b0:	mov	r5, r2
   142b4:	mov	r9, r1
   142b8:	mov	sl, #0
   142bc:	asr	r8, r4, #31
   142c0:	ldr	r0, [fp, #12]
   142c4:	subs	r7, r7, #1
   142c8:	mov	r3, #0
   142cc:	sbc	sl, sl, #0
   142d0:	mov	r2, r0
   142d4:	umull	r0, r1, r7, r0
   142d8:	mla	r1, r7, r8, r1
   142dc:	mla	r1, sl, r2, r1
   142e0:	ldr	r2, [sp, #8]
   142e4:	bl	19bac <__assert_fail@plt+0x8878>
   142e8:	mov	r6, r0
   142ec:	ldr	r0, [fp, #8]
   142f0:	ldrsb	r2, [r5], #1
   142f4:	add	r0, r4, r0
   142f8:	sub	r1, r0, r6
   142fc:	ldr	r0, [sp, #4]
   14300:	bl	188ac <__assert_fail@plt+0x7578>
   14304:	subs	r0, r9, r7
   14308:	mov	r4, r6
   1430c:	rscs	r0, sl, #0
   14310:	bcc	142c0 <__assert_fail@plt+0x2f8c>
   14314:	sub	sp, fp, #28
   14318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1431c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14320:	add	fp, sp, #28
   14324:	sub	sp, sp, #12
   14328:	cmp	r0, r1
   1432c:	str	r3, [sp, #4]
   14330:	str	r0, [sp, #8]
   14334:	bls	143a4 <__assert_fail@plt+0x3070>
   14338:	ldr	r4, [fp, #12]
   1433c:	ldr	r7, [sp, #8]
   14340:	mov	r5, r2
   14344:	mov	r9, r1
   14348:	mov	sl, #0
   1434c:	asr	r8, r4, #31
   14350:	ldr	r0, [fp, #12]
   14354:	subs	r7, r7, #1
   14358:	mov	r3, #0
   1435c:	sbc	sl, sl, #0
   14360:	mov	r2, r0
   14364:	umull	r0, r1, r7, r0
   14368:	mla	r1, r7, r8, r1
   1436c:	mla	r1, sl, r2, r1
   14370:	ldr	r2, [sp, #8]
   14374:	bl	19bac <__assert_fail@plt+0x8878>
   14378:	mov	r6, r0
   1437c:	ldr	r0, [fp, #8]
   14380:	ldrb	r2, [r5], #1
   14384:	add	r0, r4, r0
   14388:	sub	r1, r0, r6
   1438c:	ldr	r0, [sp, #4]
   14390:	bl	188ac <__assert_fail@plt+0x7578>
   14394:	subs	r0, r9, r7
   14398:	mov	r4, r6
   1439c:	rscs	r0, sl, #0
   143a0:	bcc	14350 <__assert_fail@plt+0x301c>
   143a4:	sub	sp, fp, #28
   143a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b0:	add	fp, sp, #28
   143b4:	sub	sp, sp, #12
   143b8:	cmp	r0, r1
   143bc:	stm	sp, {r1, r3}
   143c0:	bls	1446c <__assert_fail@plt+0x3138>
   143c4:	ldr	r4, [fp, #12]
   143c8:	mov	r5, r2
   143cc:	mov	r9, r0
   143d0:	mov	sl, #0
   143d4:	mov	r7, r0
   143d8:	asr	r8, r4, #31
   143dc:	b	14408 <__assert_fail@plt+0x30d4>
   143e0:	ldrh	r0, [r5]
   143e4:	sxth	r2, r0
   143e8:	ldr	r0, [sp, #4]
   143ec:	bl	188ac <__assert_fail@plt+0x7578>
   143f0:	ldr	r0, [sp]
   143f4:	add	r5, r5, #2
   143f8:	mov	r4, r6
   143fc:	subs	r0, r0, r7
   14400:	rscs	r0, sl, #0
   14404:	bcs	1446c <__assert_fail@plt+0x3138>
   14408:	ldr	r0, [fp, #12]
   1440c:	subs	r7, r7, #1
   14410:	mov	r3, #0
   14414:	sbc	sl, sl, #0
   14418:	mov	r2, r0
   1441c:	umull	r0, r1, r7, r0
   14420:	mla	r1, r7, r8, r1
   14424:	mla	r1, sl, r2, r1
   14428:	mov	r2, r9
   1442c:	bl	19bac <__assert_fail@plt+0x8878>
   14430:	mov	r6, r0
   14434:	ldr	r0, [fp, #8]
   14438:	add	r0, r4, r0
   1443c:	sub	r1, r0, r6
   14440:	movw	r0, #49576	; 0xc1a8
   14444:	movt	r0, #2
   14448:	ldrb	r0, [r0, #4]
   1444c:	cmp	r0, #1
   14450:	bne	143e0 <__assert_fail@plt+0x30ac>
   14454:	ldrb	r0, [r5, #1]
   14458:	strb	r0, [sp, #8]
   1445c:	ldrb	r0, [r5]
   14460:	strb	r0, [sp, #9]
   14464:	ldrh	r0, [sp, #8]
   14468:	b	143e4 <__assert_fail@plt+0x30b0>
   1446c:	sub	sp, fp, #28
   14470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14478:	add	fp, sp, #28
   1447c:	sub	sp, sp, #12
   14480:	cmp	r0, r1
   14484:	stm	sp, {r1, r3}
   14488:	bls	14530 <__assert_fail@plt+0x31fc>
   1448c:	ldr	r4, [fp, #12]
   14490:	mov	r5, r2
   14494:	mov	r9, r0
   14498:	mov	sl, #0
   1449c:	mov	r7, r0
   144a0:	asr	r8, r4, #31
   144a4:	b	144cc <__assert_fail@plt+0x3198>
   144a8:	ldrh	r2, [r5]
   144ac:	ldr	r0, [sp, #4]
   144b0:	bl	188ac <__assert_fail@plt+0x7578>
   144b4:	ldr	r0, [sp]
   144b8:	add	r5, r5, #2
   144bc:	mov	r4, r6
   144c0:	subs	r0, r0, r7
   144c4:	rscs	r0, sl, #0
   144c8:	bcs	14530 <__assert_fail@plt+0x31fc>
   144cc:	ldr	r0, [fp, #12]
   144d0:	subs	r7, r7, #1
   144d4:	mov	r3, #0
   144d8:	sbc	sl, sl, #0
   144dc:	mov	r2, r0
   144e0:	umull	r0, r1, r7, r0
   144e4:	mla	r1, r7, r8, r1
   144e8:	mla	r1, sl, r2, r1
   144ec:	mov	r2, r9
   144f0:	bl	19bac <__assert_fail@plt+0x8878>
   144f4:	mov	r6, r0
   144f8:	ldr	r0, [fp, #8]
   144fc:	add	r0, r4, r0
   14500:	sub	r1, r0, r6
   14504:	movw	r0, #49576	; 0xc1a8
   14508:	movt	r0, #2
   1450c:	ldrb	r0, [r0, #4]
   14510:	cmp	r0, #1
   14514:	bne	144a8 <__assert_fail@plt+0x3174>
   14518:	ldrb	r0, [r5, #1]
   1451c:	strb	r0, [sp, #8]
   14520:	ldrb	r0, [r5]
   14524:	strb	r0, [sp, #9]
   14528:	ldrh	r2, [sp, #8]
   1452c:	b	144ac <__assert_fail@plt+0x3178>
   14530:	sub	sp, fp, #28
   14534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1453c:	add	fp, sp, #28
   14540:	sub	sp, sp, #12
   14544:	cmp	r0, r1
   14548:	stm	sp, {r1, r3}
   1454c:	bls	14604 <__assert_fail@plt+0x32d0>
   14550:	ldr	r4, [fp, #12]
   14554:	mov	r5, r2
   14558:	mov	r9, r0
   1455c:	mov	sl, #0
   14560:	mov	r7, r0
   14564:	asr	r8, r4, #31
   14568:	b	14590 <__assert_fail@plt+0x325c>
   1456c:	ldr	r2, [r5]
   14570:	ldr	r0, [sp, #4]
   14574:	bl	188ac <__assert_fail@plt+0x7578>
   14578:	ldr	r0, [sp]
   1457c:	add	r5, r5, #4
   14580:	mov	r4, r6
   14584:	subs	r0, r0, r7
   14588:	rscs	r0, sl, #0
   1458c:	bcs	14604 <__assert_fail@plt+0x32d0>
   14590:	ldr	r0, [fp, #12]
   14594:	subs	r7, r7, #1
   14598:	mov	r3, #0
   1459c:	sbc	sl, sl, #0
   145a0:	mov	r2, r0
   145a4:	umull	r0, r1, r7, r0
   145a8:	mla	r1, r7, r8, r1
   145ac:	mla	r1, sl, r2, r1
   145b0:	mov	r2, r9
   145b4:	bl	19bac <__assert_fail@plt+0x8878>
   145b8:	mov	r6, r0
   145bc:	ldr	r0, [fp, #8]
   145c0:	add	r0, r4, r0
   145c4:	sub	r1, r0, r6
   145c8:	movw	r0, #49576	; 0xc1a8
   145cc:	movt	r0, #2
   145d0:	ldrb	r0, [r0, #4]
   145d4:	cmp	r0, #1
   145d8:	bne	1456c <__assert_fail@plt+0x3238>
   145dc:	ldrb	r0, [r5, #3]
   145e0:	strb	r0, [sp, #8]
   145e4:	ldrb	r0, [r5, #2]
   145e8:	strb	r0, [sp, #9]
   145ec:	ldrb	r0, [r5, #1]
   145f0:	strb	r0, [sp, #10]
   145f4:	ldrb	r0, [r5]
   145f8:	strb	r0, [sp, #11]
   145fc:	ldr	r2, [sp, #8]
   14600:	b	14570 <__assert_fail@plt+0x323c>
   14604:	sub	sp, fp, #28
   14608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1460c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14610:	add	fp, sp, #28
   14614:	sub	sp, sp, #12
   14618:	cmp	r0, r1
   1461c:	stm	sp, {r1, r3}
   14620:	bls	146d8 <__assert_fail@plt+0x33a4>
   14624:	ldr	r4, [fp, #12]
   14628:	mov	r5, r2
   1462c:	mov	r9, r0
   14630:	mov	sl, #0
   14634:	mov	r7, r0
   14638:	asr	r8, r4, #31
   1463c:	b	14664 <__assert_fail@plt+0x3330>
   14640:	ldr	r2, [r5]
   14644:	ldr	r0, [sp, #4]
   14648:	bl	188ac <__assert_fail@plt+0x7578>
   1464c:	ldr	r0, [sp]
   14650:	add	r5, r5, #4
   14654:	mov	r4, r6
   14658:	subs	r0, r0, r7
   1465c:	rscs	r0, sl, #0
   14660:	bcs	146d8 <__assert_fail@plt+0x33a4>
   14664:	ldr	r0, [fp, #12]
   14668:	subs	r7, r7, #1
   1466c:	mov	r3, #0
   14670:	sbc	sl, sl, #0
   14674:	mov	r2, r0
   14678:	umull	r0, r1, r7, r0
   1467c:	mla	r1, r7, r8, r1
   14680:	mla	r1, sl, r2, r1
   14684:	mov	r2, r9
   14688:	bl	19bac <__assert_fail@plt+0x8878>
   1468c:	mov	r6, r0
   14690:	ldr	r0, [fp, #8]
   14694:	add	r0, r4, r0
   14698:	sub	r1, r0, r6
   1469c:	movw	r0, #49576	; 0xc1a8
   146a0:	movt	r0, #2
   146a4:	ldrb	r0, [r0, #4]
   146a8:	cmp	r0, #1
   146ac:	bne	14640 <__assert_fail@plt+0x330c>
   146b0:	ldrb	r0, [r5, #3]
   146b4:	strb	r0, [sp, #8]
   146b8:	ldrb	r0, [r5, #2]
   146bc:	strb	r0, [sp, #9]
   146c0:	ldrb	r0, [r5, #1]
   146c4:	strb	r0, [sp, #10]
   146c8:	ldrb	r0, [r5]
   146cc:	strb	r0, [sp, #11]
   146d0:	ldr	r2, [sp, #8]
   146d4:	b	14644 <__assert_fail@plt+0x3310>
   146d8:	sub	sp, fp, #28
   146dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146e4:	add	fp, sp, #28
   146e8:	sub	sp, sp, #20
   146ec:	cmp	r0, r1
   146f0:	stm	sp, {r1, r3}
   146f4:	bls	147d0 <__assert_fail@plt+0x349c>
   146f8:	ldr	r4, [fp, #12]
   146fc:	mov	r5, r2
   14700:	mov	r9, r0
   14704:	mov	sl, #0
   14708:	mov	r7, r0
   1470c:	asr	r8, r4, #31
   14710:	b	14738 <__assert_fail@plt+0x3404>
   14714:	ldrd	r2, [r5]
   14718:	ldr	r0, [sp, #4]
   1471c:	bl	188ac <__assert_fail@plt+0x7578>
   14720:	ldr	r0, [sp]
   14724:	add	r5, r5, #8
   14728:	mov	r4, r6
   1472c:	subs	r0, r0, r7
   14730:	rscs	r0, sl, #0
   14734:	bcs	147d0 <__assert_fail@plt+0x349c>
   14738:	ldr	r0, [fp, #12]
   1473c:	subs	r7, r7, #1
   14740:	mov	r3, #0
   14744:	sbc	sl, sl, #0
   14748:	mov	r2, r0
   1474c:	umull	r0, r1, r7, r0
   14750:	mla	r1, r7, r8, r1
   14754:	mla	r1, sl, r2, r1
   14758:	mov	r2, r9
   1475c:	bl	19bac <__assert_fail@plt+0x8878>
   14760:	mov	r6, r0
   14764:	ldr	r0, [fp, #8]
   14768:	add	r0, r4, r0
   1476c:	sub	r1, r0, r6
   14770:	movw	r0, #49576	; 0xc1a8
   14774:	movt	r0, #2
   14778:	ldrb	r0, [r0, #4]
   1477c:	cmp	r0, #1
   14780:	bne	14714 <__assert_fail@plt+0x33e0>
   14784:	ldrb	r0, [r5, #7]
   14788:	strb	r0, [sp, #8]
   1478c:	ldrb	r0, [r5, #6]
   14790:	strb	r0, [sp, #9]
   14794:	ldrb	r0, [r5, #5]
   14798:	strb	r0, [sp, #10]
   1479c:	ldrb	r0, [r5, #4]
   147a0:	strb	r0, [sp, #11]
   147a4:	ldrb	r0, [r5, #3]
   147a8:	strb	r0, [sp, #12]
   147ac:	ldrb	r0, [r5, #2]
   147b0:	strb	r0, [sp, #13]
   147b4:	ldrb	r0, [r5, #1]
   147b8:	strb	r0, [sp, #14]
   147bc:	ldrb	r0, [r5]
   147c0:	strb	r0, [sp, #15]
   147c4:	ldr	r2, [sp, #8]
   147c8:	ldr	r3, [sp, #12]
   147cc:	b	14718 <__assert_fail@plt+0x33e4>
   147d0:	sub	sp, fp, #28
   147d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147dc:	add	fp, sp, #28
   147e0:	sub	sp, sp, #44	; 0x2c
   147e4:	cmp	r0, r1
   147e8:	str	r1, [sp, #8]
   147ec:	bls	148d0 <__assert_fail@plt+0x359c>
   147f0:	ldr	r7, [fp, #12]
   147f4:	mov	r9, r0
   147f8:	mov	r4, r2
   147fc:	mov	r8, #0
   14800:	add	sl, sp, #12
   14804:	mov	r6, r9
   14808:	asr	r0, r7, #31
   1480c:	str	r0, [sp, #4]
   14810:	b	14858 <__assert_fail@plt+0x3524>
   14814:	vldr	s0, [r4]
   14818:	mov	r0, sl
   1481c:	mov	r1, #31
   14820:	mov	r2, #0
   14824:	mov	r3, #0
   14828:	bl	159f0 <__assert_fail@plt+0x46bc>
   1482c:	movw	r0, #45068	; 0xb00c
   14830:	mov	r1, r7
   14834:	mov	r2, sl
   14838:	movt	r0, #1
   1483c:	bl	188ac <__assert_fail@plt+0x7578>
   14840:	ldr	r0, [sp, #8]
   14844:	add	r4, r4, #4
   14848:	mov	r7, r5
   1484c:	subs	r0, r0, r6
   14850:	rscs	r0, r8, #0
   14854:	bcs	148d0 <__assert_fail@plt+0x359c>
   14858:	ldr	r0, [fp, #12]
   1485c:	ldr	r3, [sp, #4]
   14860:	subs	r6, r6, #1
   14864:	sbc	r8, r8, #0
   14868:	mov	r2, r0
   1486c:	umull	r0, r1, r6, r0
   14870:	mla	r1, r6, r3, r1
   14874:	mov	r3, #0
   14878:	mla	r1, r8, r2, r1
   1487c:	mov	r2, r9
   14880:	bl	19bac <__assert_fail@plt+0x8878>
   14884:	mov	r5, r0
   14888:	ldr	r0, [fp, #8]
   1488c:	add	r0, r7, r0
   14890:	sub	r7, r0, r5
   14894:	movw	r0, #49576	; 0xc1a8
   14898:	movt	r0, #2
   1489c:	ldrb	r0, [r0, #4]
   148a0:	cmp	r0, #1
   148a4:	bne	14814 <__assert_fail@plt+0x34e0>
   148a8:	ldrb	r0, [r4, #3]
   148ac:	strb	r0, [sp, #12]
   148b0:	ldrb	r0, [r4, #2]
   148b4:	strb	r0, [sp, #13]
   148b8:	ldrb	r0, [r4, #1]
   148bc:	strb	r0, [sp, #14]
   148c0:	ldrb	r0, [r4]
   148c4:	strb	r0, [sp, #15]
   148c8:	vldr	s0, [sp, #12]
   148cc:	b	14818 <__assert_fail@plt+0x34e4>
   148d0:	sub	sp, fp, #28
   148d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148dc:	add	fp, sp, #28
   148e0:	sub	sp, sp, #52	; 0x34
   148e4:	cmp	r0, r1
   148e8:	str	r1, [sp, #4]
   148ec:	bls	149f0 <__assert_fail@plt+0x36bc>
   148f0:	ldr	r7, [fp, #12]
   148f4:	mov	r9, r0
   148f8:	mov	r4, r2
   148fc:	mov	r8, #0
   14900:	add	sl, sp, #8
   14904:	mov	r6, r9
   14908:	asr	r0, r7, #31
   1490c:	str	r0, [sp]
   14910:	b	14958 <__assert_fail@plt+0x3624>
   14914:	vldr	d0, [r4]
   14918:	mov	r0, sl
   1491c:	mov	r1, #40	; 0x28
   14920:	mov	r2, #0
   14924:	mov	r3, #0
   14928:	bl	156d8 <__assert_fail@plt+0x43a4>
   1492c:	movw	r0, #45068	; 0xb00c
   14930:	mov	r1, r7
   14934:	mov	r2, sl
   14938:	movt	r0, #1
   1493c:	bl	188ac <__assert_fail@plt+0x7578>
   14940:	ldr	r0, [sp, #4]
   14944:	add	r4, r4, #8
   14948:	mov	r7, r5
   1494c:	subs	r0, r0, r6
   14950:	rscs	r0, r8, #0
   14954:	bcs	149f0 <__assert_fail@plt+0x36bc>
   14958:	ldr	r0, [fp, #12]
   1495c:	ldr	r3, [sp]
   14960:	subs	r6, r6, #1
   14964:	sbc	r8, r8, #0
   14968:	mov	r2, r0
   1496c:	umull	r0, r1, r6, r0
   14970:	mla	r1, r6, r3, r1
   14974:	mov	r3, #0
   14978:	mla	r1, r8, r2, r1
   1497c:	mov	r2, r9
   14980:	bl	19bac <__assert_fail@plt+0x8878>
   14984:	mov	r5, r0
   14988:	ldr	r0, [fp, #8]
   1498c:	add	r0, r7, r0
   14990:	sub	r7, r0, r5
   14994:	movw	r0, #49576	; 0xc1a8
   14998:	movt	r0, #2
   1499c:	ldrb	r0, [r0, #4]
   149a0:	cmp	r0, #1
   149a4:	bne	14914 <__assert_fail@plt+0x35e0>
   149a8:	ldrb	r0, [r4, #7]
   149ac:	strb	r0, [sp, #8]
   149b0:	ldrb	r0, [r4, #6]
   149b4:	strb	r0, [sp, #9]
   149b8:	ldrb	r0, [r4, #5]
   149bc:	strb	r0, [sp, #10]
   149c0:	ldrb	r0, [r4, #4]
   149c4:	strb	r0, [sp, #11]
   149c8:	ldrb	r0, [r4, #3]
   149cc:	strb	r0, [sp, #12]
   149d0:	ldrb	r0, [r4, #2]
   149d4:	strb	r0, [sp, #13]
   149d8:	ldrb	r0, [r4, #1]
   149dc:	strb	r0, [sp, #14]
   149e0:	ldrb	r0, [r4]
   149e4:	strb	r0, [sp, #15]
   149e8:	vldr	d0, [sp, #8]
   149ec:	b	14918 <__assert_fail@plt+0x35e4>
   149f0:	sub	sp, fp, #28
   149f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149fc:	add	fp, sp, #28
   14a00:	sub	sp, sp, #52	; 0x34
   14a04:	cmp	r0, r1
   14a08:	str	r1, [sp, #4]
   14a0c:	bls	14b10 <__assert_fail@plt+0x37dc>
   14a10:	ldr	r7, [fp, #12]
   14a14:	mov	r9, r0
   14a18:	mov	r4, r2
   14a1c:	mov	r8, #0
   14a20:	add	sl, sp, #8
   14a24:	mov	r6, r9
   14a28:	asr	r0, r7, #31
   14a2c:	str	r0, [sp]
   14a30:	b	14a78 <__assert_fail@plt+0x3744>
   14a34:	vldr	d0, [r4]
   14a38:	mov	r0, sl
   14a3c:	mov	r1, #40	; 0x28
   14a40:	mov	r2, #0
   14a44:	mov	r3, #0
   14a48:	bl	15b40 <__assert_fail@plt+0x480c>
   14a4c:	movw	r0, #45068	; 0xb00c
   14a50:	mov	r1, r7
   14a54:	mov	r2, sl
   14a58:	movt	r0, #1
   14a5c:	bl	188ac <__assert_fail@plt+0x7578>
   14a60:	ldr	r0, [sp, #4]
   14a64:	add	r4, r4, #8
   14a68:	mov	r7, r5
   14a6c:	subs	r0, r0, r6
   14a70:	rscs	r0, r8, #0
   14a74:	bcs	14b10 <__assert_fail@plt+0x37dc>
   14a78:	ldr	r0, [fp, #12]
   14a7c:	ldr	r3, [sp]
   14a80:	subs	r6, r6, #1
   14a84:	sbc	r8, r8, #0
   14a88:	mov	r2, r0
   14a8c:	umull	r0, r1, r6, r0
   14a90:	mla	r1, r6, r3, r1
   14a94:	mov	r3, #0
   14a98:	mla	r1, r8, r2, r1
   14a9c:	mov	r2, r9
   14aa0:	bl	19bac <__assert_fail@plt+0x8878>
   14aa4:	mov	r5, r0
   14aa8:	ldr	r0, [fp, #8]
   14aac:	add	r0, r7, r0
   14ab0:	sub	r7, r0, r5
   14ab4:	movw	r0, #49576	; 0xc1a8
   14ab8:	movt	r0, #2
   14abc:	ldrb	r0, [r0, #4]
   14ac0:	cmp	r0, #1
   14ac4:	bne	14a34 <__assert_fail@plt+0x3700>
   14ac8:	ldrb	r0, [r4, #7]
   14acc:	strb	r0, [sp, #8]
   14ad0:	ldrb	r0, [r4, #6]
   14ad4:	strb	r0, [sp, #9]
   14ad8:	ldrb	r0, [r4, #5]
   14adc:	strb	r0, [sp, #10]
   14ae0:	ldrb	r0, [r4, #4]
   14ae4:	strb	r0, [sp, #11]
   14ae8:	ldrb	r0, [r4, #3]
   14aec:	strb	r0, [sp, #12]
   14af0:	ldrb	r0, [r4, #2]
   14af4:	strb	r0, [sp, #13]
   14af8:	ldrb	r0, [r4, #1]
   14afc:	strb	r0, [sp, #14]
   14b00:	ldrb	r0, [r4]
   14b04:	strb	r0, [sp, #15]
   14b08:	vldr	d0, [sp, #8]
   14b0c:	b	14a38 <__assert_fail@plt+0x3704>
   14b10:	sub	sp, fp, #28
   14b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b1c:	add	fp, sp, #28
   14b20:	sub	sp, sp, #12
   14b24:	cmp	r0, r1
   14b28:	str	r1, [sp, #4]
   14b2c:	bls	14be4 <__assert_fail@plt+0x38b0>
   14b30:	ldr	r7, [fp, #12]
   14b34:	mov	r4, r2
   14b38:	mov	r8, r0
   14b3c:	mov	r6, r0
   14b40:	mov	r9, #0
   14b44:	asr	sl, r7, #31
   14b48:	b	14b84 <__assert_fail@plt+0x3850>
   14b4c:	mov	r1, #0
   14b50:	add	r2, sp, #10
   14b54:	strb	r1, [sp, #11]
   14b58:	strb	r0, [sp, #10]
   14b5c:	ldr	r0, [fp, #8]
   14b60:	add	r0, r5, r0
   14b64:	sub	r1, r0, r7
   14b68:	movw	r0, #45068	; 0xb00c
   14b6c:	movt	r0, #1
   14b70:	bl	188ac <__assert_fail@plt+0x7578>
   14b74:	ldr	r0, [sp, #4]
   14b78:	subs	r0, r0, r6
   14b7c:	rscs	r0, r9, #0
   14b80:	bcs	14be4 <__assert_fail@plt+0x38b0>
   14b84:	ldr	r0, [fp, #12]
   14b88:	subs	r6, r6, #1
   14b8c:	mov	r3, #0
   14b90:	mov	r5, r7
   14b94:	sbc	r9, r9, #0
   14b98:	mov	r2, r0
   14b9c:	umull	r0, r1, r6, r0
   14ba0:	mla	r1, r6, sl, r1
   14ba4:	mla	r1, r9, r2, r1
   14ba8:	mov	r2, r8
   14bac:	bl	19bac <__assert_fail@plt+0x8878>
   14bb0:	mov	r7, r0
   14bb4:	ldrb	r0, [r4], #1
   14bb8:	movw	r2, #45072	; 0xb010
   14bbc:	movt	r2, #1
   14bc0:	and	r0, r0, #127	; 0x7f
   14bc4:	cmp	r0, #127	; 0x7f
   14bc8:	beq	14b5c <__assert_fail@plt+0x3828>
   14bcc:	cmp	r0, #32
   14bd0:	bhi	14b4c <__assert_fail@plt+0x3818>
   14bd4:	movw	r1, #45936	; 0xb370
   14bd8:	movt	r1, #1
   14bdc:	add	r2, r1, r0, lsl #2
   14be0:	b	14b5c <__assert_fail@plt+0x3828>
   14be4:	sub	sp, fp, #28
   14be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf0:	add	fp, sp, #28
   14bf4:	sub	sp, sp, #20
   14bf8:	cmp	r0, r1
   14bfc:	str	r1, [sp, #12]
   14c00:	bls	14cf4 <__assert_fail@plt+0x39c0>
   14c04:	ldr	r7, [fp, #12]
   14c08:	mov	sl, r0
   14c0c:	mov	r4, r2
   14c10:	mov	r8, #0
   14c14:	mov	r6, sl
   14c18:	asr	r0, r7, #31
   14c1c:	str	r0, [sp, #8]
   14c20:	b	14c94 <__assert_fail@plt+0x3960>
   14c24:	bl	111d8 <__ctype_b_loc@plt>
   14c28:	ldr	r0, [r0]
   14c2c:	movw	r3, #45100	; 0xb02c
   14c30:	mov	r1, #1
   14c34:	mov	r2, #4
   14c38:	movt	r3, #1
   14c3c:	add	r0, r0, r5, lsl #1
   14c40:	ldrh	r0, [r0]
   14c44:	str	r5, [sp]
   14c48:	add	r5, sp, #16
   14c4c:	tst	r0, #16384	; 0x4000
   14c50:	movw	r0, #45103	; 0xb02f
   14c54:	movt	r0, #1
   14c58:	moveq	r3, r0
   14c5c:	mov	r0, r5
   14c60:	bl	11220 <__sprintf_chk@plt>
   14c64:	mov	r2, r5
   14c68:	ldr	r0, [fp, #8]
   14c6c:	add	r0, r7, r0
   14c70:	sub	r1, r0, r9
   14c74:	movw	r0, #45068	; 0xb00c
   14c78:	movt	r0, #1
   14c7c:	bl	188ac <__assert_fail@plt+0x7578>
   14c80:	ldr	r0, [sp, #12]
   14c84:	mov	r7, r9
   14c88:	subs	r0, r0, r6
   14c8c:	rscs	r0, r8, #0
   14c90:	bcs	14cf4 <__assert_fail@plt+0x39c0>
   14c94:	ldr	r0, [fp, #12]
   14c98:	ldr	r3, [sp, #8]
   14c9c:	subs	r6, r6, #1
   14ca0:	sbc	r8, r8, #0
   14ca4:	mov	r2, r0
   14ca8:	umull	r0, r1, r6, r0
   14cac:	mla	r1, r6, r3, r1
   14cb0:	mov	r3, #0
   14cb4:	mla	r1, r8, r2, r1
   14cb8:	mov	r2, sl
   14cbc:	bl	19bac <__assert_fail@plt+0x8878>
   14cc0:	mov	r9, r0
   14cc4:	ldrsb	r0, [r4], #1
   14cc8:	uxtb	r5, r0
   14ccc:	cmp	r5, #14
   14cd0:	bcs	14c24 <__assert_fail@plt+0x38f0>
   14cd4:	movw	r1, #16257	; 0x3f81
   14cd8:	mov	r2, #1
   14cdc:	tst	r2, r1, lsr r5
   14ce0:	beq	14c24 <__assert_fail@plt+0x38f0>
   14ce4:	movw	r1, #46068	; 0xb3f4
   14ce8:	movt	r1, #1
   14cec:	ldr	r2, [r1, r0, lsl #2]
   14cf0:	b	14c68 <__assert_fail@plt+0x3934>
   14cf4:	sub	sp, fp, #28
   14cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cfc:	push	{r4, r5, r6, sl, fp, lr}
   14d00:	add	fp, sp, #16
   14d04:	movw	r6, #49576	; 0xc1a8
   14d08:	movt	r6, #2
   14d0c:	ldr	r5, [r6, #44]	; 0x2c
   14d10:	cmp	r5, #0
   14d14:	beq	14d98 <__assert_fail@plt+0x3a64>
   14d18:	ldr	r1, [r5]
   14d1c:	lsl	r1, r1, #26
   14d20:	and	r4, r0, r1, asr #31
   14d24:	ldr	r0, [r6, #40]	; 0x28
   14d28:	movw	r1, #47318	; 0xb8d6
   14d2c:	movt	r1, #1
   14d30:	ldr	r0, [r0, #-4]
   14d34:	bl	11094 <strcmp@plt>
   14d38:	cmp	r0, #0
   14d3c:	beq	14da0 <__assert_fail@plt+0x3a6c>
   14d40:	mov	r0, r5
   14d44:	bl	15828 <__assert_fail@plt+0x44f4>
   14d48:	cmp	r4, #0
   14d4c:	bne	14d60 <__assert_fail@plt+0x3a2c>
   14d50:	cmp	r0, #0
   14d54:	beq	14d60 <__assert_fail@plt+0x3a2c>
   14d58:	bl	11214 <__errno_location@plt>
   14d5c:	ldr	r4, [r0]
   14d60:	cmp	r4, #0
   14d64:	beq	14db0 <__assert_fail@plt+0x3a7c>
   14d68:	ldr	r2, [r6, #52]	; 0x34
   14d6c:	mov	r0, #0
   14d70:	mov	r1, #3
   14d74:	mov	r5, #0
   14d78:	bl	179a8 <__assert_fail@plt+0x6674>
   14d7c:	movw	r2, #46226	; 0xb492
   14d80:	mov	r3, r0
   14d84:	mov	r0, #0
   14d88:	mov	r1, r4
   14d8c:	movt	r2, #1
   14d90:	bl	11178 <error@plt>
   14d94:	b	14db4 <__assert_fail@plt+0x3a80>
   14d98:	mov	r5, #1
   14d9c:	b	14dbc <__assert_fail@plt+0x3a88>
   14da0:	mov	r0, r5
   14da4:	bl	112e0 <clearerr_unlocked@plt>
   14da8:	cmp	r4, #0
   14dac:	bne	14d68 <__assert_fail@plt+0x3a34>
   14db0:	mov	r5, #1
   14db4:	mov	r0, #0
   14db8:	str	r0, [r6, #44]	; 0x2c
   14dbc:	movw	r0, #49524	; 0xc174
   14dc0:	movt	r0, #2
   14dc4:	ldr	r0, [r0]
   14dc8:	ldrb	r0, [r0]
   14dcc:	tst	r0, #32
   14dd0:	beq	14dfc <__assert_fail@plt+0x3ac8>
   14dd4:	movw	r1, #45161	; 0xb069
   14dd8:	mov	r0, #0
   14ddc:	mov	r2, #5
   14de0:	mov	r5, #0
   14de4:	movt	r1, #1
   14de8:	bl	11100 <dcgettext@plt>
   14dec:	mov	r2, r0
   14df0:	mov	r0, #0
   14df4:	mov	r1, #0
   14df8:	bl	11178 <error@plt>
   14dfc:	mov	r0, r5
   14e00:	pop	{r4, r5, r6, sl, fp, pc}
   14e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e08:	add	fp, sp, #28
   14e0c:	sub	sp, sp, #20
   14e10:	movw	r6, #49576	; 0xc1a8
   14e14:	str	r0, [sp, #12]
   14e18:	mov	r4, r2
   14e1c:	str	r1, [sp, #16]
   14e20:	movt	r6, #2
   14e24:	ldrb	r0, [r6, #2]
   14e28:	cmp	r0, #0
   14e2c:	bne	14e44 <__assert_fail@plt+0x3b10>
   14e30:	ldrb	r0, [r6, #7]
   14e34:	cmp	r0, #1
   14e38:	ldreq	r0, [r6, #48]	; 0x30
   14e3c:	cmpeq	r0, r4
   14e40:	beq	1503c <__assert_fail@plt+0x3d08>
   14e44:	mov	r5, #0
   14e48:	strb	r5, [r6, #8]
   14e4c:	ldr	r0, [r6, #12]
   14e50:	cmp	r0, #0
   14e54:	beq	15078 <__assert_fail@plt+0x3d44>
   14e58:	movw	r9, #49524	; 0xc174
   14e5c:	movt	r9, #2
   14e60:	ldr	r0, [r6, #20]
   14e64:	movw	r2, #45572	; 0xb204
   14e68:	ldr	r1, [r6, #48]	; 0x30
   14e6c:	cmp	r5, #0
   14e70:	movt	r2, #1
   14e74:	add	r0, r0, r5, lsl #5
   14e78:	ldr	r0, [r0, #4]
   14e7c:	ldr	r0, [r2, r0, lsl #2]
   14e80:	sub	r2, r1, r4
   14e84:	udiv	sl, r2, r0
   14e88:	udiv	r8, r1, r0
   14e8c:	beq	14eb0 <__assert_fail@plt+0x3b7c>
   14e90:	ldr	r2, [r6, #32]
   14e94:	movw	r1, #45068	; 0xb00c
   14e98:	movw	r3, #44487	; 0xadc7
   14e9c:	mov	r0, #1
   14ea0:	movt	r1, #1
   14ea4:	movt	r3, #1
   14ea8:	bl	1125c <__printf_chk@plt>
   14eac:	b	14ec4 <__assert_fail@plt+0x3b90>
   14eb0:	ldr	r3, [r6, #24]
   14eb4:	ldr	r0, [sp, #12]
   14eb8:	ldr	r1, [sp, #16]
   14ebc:	mov	r2, #0
   14ec0:	blx	r3
   14ec4:	ldr	r0, [r6, #20]
   14ec8:	add	r0, r0, r5, lsl #5
   14ecc:	ldr	r1, [r0, #24]
   14ed0:	ldr	r7, [r0, #8]
   14ed4:	ldr	r2, [r0, #28]
   14ed8:	add	r3, r0, #12
   14edc:	mov	r0, r8
   14ee0:	stm	sp, {r1, r2}
   14ee4:	ldr	r2, [fp, #8]
   14ee8:	mov	r1, sl
   14eec:	blx	r7
   14ef0:	ldr	r0, [r6, #20]
   14ef4:	add	r0, r0, r5, lsl #5
   14ef8:	ldrb	r1, [r0, #21]
   14efc:	cmp	r1, #0
   14f00:	beq	14fdc <__assert_fail@plt+0x3ca8>
   14f04:	ldr	r1, [r0, #24]
   14f08:	ldr	r0, [r0, #28]
   14f0c:	movw	r3, #44487	; 0xadc7
   14f10:	movt	r3, #1
   14f14:	mul	r0, r0, sl
   14f18:	sdiv	r0, r0, r8
   14f1c:	mla	r2, r1, sl, r0
   14f20:	movw	r1, #45068	; 0xb00c
   14f24:	mov	r0, #1
   14f28:	movt	r1, #1
   14f2c:	bl	1125c <__printf_chk@plt>
   14f30:	ldr	r1, [r9]
   14f34:	movw	r0, #45298	; 0xb0f2
   14f38:	movt	r0, #1
   14f3c:	bl	1107c <fputs_unlocked@plt>
   14f40:	mov	r8, r4
   14f44:	cmp	r4, #0
   14f48:	beq	14fac <__assert_fail@plt+0x3c78>
   14f4c:	bl	111d8 <__ctype_b_loc@plt>
   14f50:	ldr	r4, [fp, #8]
   14f54:	mov	r7, r0
   14f58:	mov	r6, r8
   14f5c:	ldrb	r1, [r4], #1
   14f60:	ldr	r0, [r7]
   14f64:	add	r0, r0, r1, lsl #1
   14f68:	ldrb	r0, [r0, #1]
   14f6c:	tst	r0, #64	; 0x40
   14f70:	ldr	r0, [r9]
   14f74:	movweq	r1, #46	; 0x2e
   14f78:	ldr	r2, [r0, #20]
   14f7c:	ldr	r3, [r0, #24]
   14f80:	cmp	r2, r3
   14f84:	bcs	14fa0 <__assert_fail@plt+0x3c6c>
   14f88:	add	r3, r2, #1
   14f8c:	str	r3, [r0, #20]
   14f90:	strb	r1, [r2]
   14f94:	subs	r6, r6, #1
   14f98:	bne	14f5c <__assert_fail@plt+0x3c28>
   14f9c:	b	14fac <__assert_fail@plt+0x3c78>
   14fa0:	bl	112a4 <__overflow@plt>
   14fa4:	subs	r6, r6, #1
   14fa8:	bne	14f5c <__assert_fail@plt+0x3c28>
   14fac:	ldr	r0, [r9]
   14fb0:	ldr	r1, [r0, #20]
   14fb4:	ldr	r2, [r0, #24]
   14fb8:	cmp	r1, r2
   14fbc:	bcs	15030 <__assert_fail@plt+0x3cfc>
   14fc0:	add	r2, r1, #1
   14fc4:	str	r2, [r0, #20]
   14fc8:	mov	r0, #60	; 0x3c
   14fcc:	strb	r0, [r1]
   14fd0:	movw	r6, #49576	; 0xc1a8
   14fd4:	mov	r4, r8
   14fd8:	movt	r6, #2
   14fdc:	ldr	r0, [r9]
   14fe0:	ldr	r1, [r0, #20]
   14fe4:	ldr	r2, [r0, #24]
   14fe8:	cmp	r1, r2
   14fec:	bcs	15014 <__assert_fail@plt+0x3ce0>
   14ff0:	add	r2, r1, #1
   14ff4:	str	r2, [r0, #20]
   14ff8:	mov	r0, #10
   14ffc:	strb	r0, [r1]
   15000:	ldr	r0, [r6, #12]
   15004:	add	r5, r5, #1
   15008:	cmp	r5, r0
   1500c:	bcc	14e60 <__assert_fail@plt+0x3b2c>
   15010:	b	15078 <__assert_fail@plt+0x3d44>
   15014:	mov	r1, #10
   15018:	bl	112a4 <__overflow@plt>
   1501c:	ldr	r0, [r6, #12]
   15020:	add	r5, r5, #1
   15024:	cmp	r5, r0
   15028:	bcc	14e60 <__assert_fail@plt+0x3b2c>
   1502c:	b	15078 <__assert_fail@plt+0x3d44>
   15030:	mov	r1, #60	; 0x3c
   15034:	bl	112a4 <__overflow@plt>
   15038:	b	14fd0 <__assert_fail@plt+0x3c9c>
   1503c:	ldr	r1, [fp, #8]
   15040:	mov	r0, r3
   15044:	mov	r2, r4
   15048:	bl	111f0 <bcmp@plt>
   1504c:	cmp	r0, #0
   15050:	bne	14e44 <__assert_fail@plt+0x3b10>
   15054:	ldrb	r0, [r6, #8]
   15058:	cmp	r0, #0
   1505c:	bne	15078 <__assert_fail@plt+0x3d44>
   15060:	movw	r1, #45295	; 0xb0ef
   15064:	mov	r0, #1
   15068:	mov	r4, #1
   1506c:	movt	r1, #1
   15070:	bl	1125c <__printf_chk@plt>
   15074:	strb	r4, [r6, #8]
   15078:	mov	r0, #1
   1507c:	strb	r0, [r6, #7]
   15080:	sub	sp, fp, #28
   15084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15088:	mov	r0, #1
   1508c:	b	11430 <__assert_fail@plt+0xfc>
   15090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15094:	add	fp, sp, #28
   15098:	sub	sp, sp, #12
   1509c:	mov	r4, r3
   150a0:	mov	r9, r2
   150a4:	mov	r7, r1
   150a8:	mov	r8, r0
   150ac:	bl	111fc <strlen@plt>
   150b0:	ldr	r6, [r7]
   150b4:	cmp	r6, #0
   150b8:	beq	15164 <__assert_fail@plt+0x3e30>
   150bc:	mov	r5, r0
   150c0:	cmp	r9, #0
   150c4:	beq	15174 <__assert_fail@plt+0x3e40>
   150c8:	add	r0, r7, #4
   150cc:	mvn	sl, #0
   150d0:	mov	r7, #0
   150d4:	str	r9, [sp]
   150d8:	str	r0, [sp, #8]
   150dc:	mov	r0, #0
   150e0:	str	r0, [sp, #4]
   150e4:	mov	r0, r9
   150e8:	b	1512c <__assert_fail@plt+0x3df8>
   150ec:	ldr	r0, [sp]
   150f0:	mov	r1, r9
   150f4:	mov	r2, r4
   150f8:	mla	r0, sl, r4, r0
   150fc:	bl	111f0 <bcmp@plt>
   15100:	ldr	r1, [sp, #4]
   15104:	cmp	r0, #0
   15108:	movwne	r0, #1
   1510c:	orr	r1, r1, r0
   15110:	str	r1, [sp, #4]
   15114:	ldr	r0, [sp, #8]
   15118:	add	r9, r9, r4
   1511c:	ldr	r6, [r0, r7, lsl #2]
   15120:	add	r7, r7, #1
   15124:	cmp	r6, #0
   15128:	beq	151e8 <__assert_fail@plt+0x3eb4>
   1512c:	mov	r0, r6
   15130:	mov	r1, r8
   15134:	mov	r2, r5
   15138:	bl	11310 <strncmp@plt>
   1513c:	cmp	r0, #0
   15140:	bne	15114 <__assert_fail@plt+0x3de0>
   15144:	mov	r0, r6
   15148:	bl	111fc <strlen@plt>
   1514c:	cmp	r0, r5
   15150:	beq	15168 <__assert_fail@plt+0x3e34>
   15154:	cmn	sl, #1
   15158:	bne	150ec <__assert_fail@plt+0x3db8>
   1515c:	mov	sl, r7
   15160:	b	15114 <__assert_fail@plt+0x3de0>
   15164:	mvn	r7, #0
   15168:	mov	r0, r7
   1516c:	sub	sp, fp, #28
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15174:	add	r4, r7, #4
   15178:	mov	r0, #0
   1517c:	mvn	r9, #0
   15180:	mvn	sl, #0
   15184:	mov	r7, #0
   15188:	str	r0, [sp, #4]
   1518c:	b	151bc <__assert_fail@plt+0x3e88>
   15190:	ldr	r1, [sp, #4]
   15194:	subs	r0, sl, r9
   15198:	movwne	r0, #1
   1519c:	cmn	sl, #1
   151a0:	moveq	sl, r7
   151a4:	orr	r1, r1, r0
   151a8:	str	r1, [sp, #4]
   151ac:	ldr	r6, [r4, r7, lsl #2]
   151b0:	add	r7, r7, #1
   151b4:	cmp	r6, #0
   151b8:	beq	151e8 <__assert_fail@plt+0x3eb4>
   151bc:	mov	r0, r6
   151c0:	mov	r1, r8
   151c4:	mov	r2, r5
   151c8:	bl	11310 <strncmp@plt>
   151cc:	cmp	r0, #0
   151d0:	bne	151ac <__assert_fail@plt+0x3e78>
   151d4:	mov	r0, r6
   151d8:	bl	111fc <strlen@plt>
   151dc:	cmp	r0, r5
   151e0:	bne	15190 <__assert_fail@plt+0x3e5c>
   151e4:	b	15168 <__assert_fail@plt+0x3e34>
   151e8:	ldr	r0, [sp, #4]
   151ec:	tst	r0, #1
   151f0:	mvnne	sl, #1
   151f4:	mov	r0, sl
   151f8:	sub	sp, fp, #28
   151fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15200:	push	{r4, r5, r6, r7, fp, lr}
   15204:	add	fp, sp, #16
   15208:	mov	r5, r0
   1520c:	ldr	r0, [r1]
   15210:	mvn	r4, #0
   15214:	cmp	r0, #0
   15218:	beq	15244 <__assert_fail@plt+0x3f10>
   1521c:	add	r7, r1, #4
   15220:	mov	r6, #0
   15224:	mov	r1, r5
   15228:	bl	11094 <strcmp@plt>
   1522c:	cmp	r0, #0
   15230:	beq	1524c <__assert_fail@plt+0x3f18>
   15234:	ldr	r0, [r7, r6, lsl #2]
   15238:	add	r6, r6, #1
   1523c:	cmp	r0, #0
   15240:	bne	15224 <__assert_fail@plt+0x3ef0>
   15244:	mov	r0, r4
   15248:	pop	{r4, r5, r6, r7, fp, pc}
   1524c:	mov	r0, r6
   15250:	pop	{r4, r5, r6, r7, fp, pc}
   15254:	push	{r4, r5, r6, sl, fp, lr}
   15258:	add	fp, sp, #16
   1525c:	sub	sp, sp, #8
   15260:	mov	r5, r0
   15264:	movw	r0, #46139	; 0xb43b
   15268:	mov	r4, r1
   1526c:	movw	r1, #46166	; 0xb456
   15270:	cmn	r2, #1
   15274:	mov	r2, #5
   15278:	movt	r0, #1
   1527c:	movt	r1, #1
   15280:	moveq	r1, r0
   15284:	mov	r0, #0
   15288:	bl	11100 <dcgettext@plt>
   1528c:	mov	r6, r0
   15290:	mov	r0, #0
   15294:	mov	r1, #8
   15298:	mov	r2, r4
   1529c:	bl	17684 <__assert_fail@plt+0x6350>
   152a0:	mov	r4, r0
   152a4:	mov	r0, #1
   152a8:	mov	r1, r5
   152ac:	bl	17c44 <__assert_fail@plt+0x6910>
   152b0:	str	r0, [sp]
   152b4:	mov	r0, #0
   152b8:	mov	r1, #0
   152bc:	mov	r2, r6
   152c0:	mov	r3, r4
   152c4:	bl	11178 <error@plt>
   152c8:	sub	sp, fp, #16
   152cc:	pop	{r4, r5, r6, sl, fp, pc}
   152d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d4:	add	fp, sp, #28
   152d8:	sub	sp, sp, #4
   152dc:	mov	sl, r1
   152e0:	movw	r1, #46195	; 0xb473
   152e4:	mov	r4, r2
   152e8:	mov	r6, r0
   152ec:	mov	r0, #0
   152f0:	mov	r2, #5
   152f4:	mov	r8, #0
   152f8:	movt	r1, #1
   152fc:	bl	11100 <dcgettext@plt>
   15300:	movw	r1, #49512	; 0xc168
   15304:	movt	r1, #2
   15308:	ldr	r1, [r1]
   1530c:	bl	1107c <fputs_unlocked@plt>
   15310:	ldr	r7, [r6]
   15314:	cmp	r7, #0
   15318:	beq	153d4 <__assert_fail@plt+0x40a0>
   1531c:	add	r0, r6, #4
   15320:	mov	r9, #0
   15324:	mov	r6, #0
   15328:	str	r0, [sp]
   1532c:	cmp	r9, #0
   15330:	bne	15388 <__assert_fail@plt+0x4054>
   15334:	mov	r5, #0
   15338:	movw	r0, #49512	; 0xc168
   1533c:	movt	r0, #2
   15340:	ldr	r6, [r0]
   15344:	mov	r0, r7
   15348:	bl	17c54 <__assert_fail@plt+0x6920>
   1534c:	movw	r2, #46216	; 0xb488
   15350:	mov	r3, r0
   15354:	mov	r0, r6
   15358:	mov	r1, #1
   1535c:	movt	r2, #1
   15360:	bl	11280 <__fprintf_chk@plt>
   15364:	add	r6, sl, r5
   15368:	ldr	r0, [sp]
   1536c:	add	r8, r8, r4
   15370:	ldr	r7, [r0, -r9, lsl #2]
   15374:	sub	r9, r9, #1
   15378:	cmp	r7, #0
   1537c:	beq	153d4 <__assert_fail@plt+0x40a0>
   15380:	cmp	r9, #0
   15384:	beq	15334 <__assert_fail@plt+0x4000>
   15388:	add	r1, sl, r8
   1538c:	mov	r0, r6
   15390:	mov	r2, r4
   15394:	bl	111f0 <bcmp@plt>
   15398:	cmp	r0, #0
   1539c:	mov	r5, r8
   153a0:	bne	15338 <__assert_fail@plt+0x4004>
   153a4:	movw	r0, #49512	; 0xc168
   153a8:	movt	r0, #2
   153ac:	ldr	r5, [r0]
   153b0:	mov	r0, r7
   153b4:	bl	17c54 <__assert_fail@plt+0x6920>
   153b8:	movw	r2, #46224	; 0xb490
   153bc:	mov	r3, r0
   153c0:	mov	r0, r5
   153c4:	mov	r1, #1
   153c8:	movt	r2, #1
   153cc:	bl	11280 <__fprintf_chk@plt>
   153d0:	b	15368 <__assert_fail@plt+0x4034>
   153d4:	movw	r0, #49512	; 0xc168
   153d8:	movt	r0, #2
   153dc:	ldr	r0, [r0]
   153e0:	ldr	r1, [r0, #20]
   153e4:	ldr	r2, [r0, #24]
   153e8:	cmp	r1, r2
   153ec:	addcc	r2, r1, #1
   153f0:	strcc	r2, [r0, #20]
   153f4:	movcc	r0, #10
   153f8:	strbcc	r0, [r1]
   153fc:	subcc	sp, fp, #28
   15400:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15404:	mov	r1, #10
   15408:	sub	sp, fp, #28
   1540c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15410:	b	112a4 <__overflow@plt>
   15414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15418:	add	fp, sp, #28
   1541c:	sub	sp, sp, #12
   15420:	mov	sl, r0
   15424:	ldr	r0, [fp, #16]
   15428:	ldr	r9, [fp, #8]
   1542c:	mov	r5, r3
   15430:	mov	r8, r2
   15434:	mov	r6, r1
   15438:	cmp	r0, #0
   1543c:	beq	1546c <__assert_fail@plt+0x4138>
   15440:	mov	r0, r6
   15444:	mov	r1, r8
   15448:	mov	r2, r5
   1544c:	mov	r3, r9
   15450:	bl	15090 <__assert_fail@plt+0x3d5c>
   15454:	mov	r4, r0
   15458:	cmn	r4, #1
   1545c:	ble	154bc <__assert_fail@plt+0x4188>
   15460:	mov	r0, r4
   15464:	sub	sp, fp, #28
   15468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1546c:	ldr	r0, [r8]
   15470:	movw	r7, #46139	; 0xb43b
   15474:	str	r5, [sp, #8]
   15478:	movt	r7, #1
   1547c:	cmp	r0, #0
   15480:	beq	154d4 <__assert_fail@plt+0x41a0>
   15484:	add	r5, r8, #4
   15488:	mov	r4, #0
   1548c:	mov	r1, r6
   15490:	bl	11094 <strcmp@plt>
   15494:	cmp	r0, #0
   15498:	beq	154b0 <__assert_fail@plt+0x417c>
   1549c:	ldr	r0, [r5, r4, lsl #2]
   154a0:	add	r4, r4, #1
   154a4:	cmp	r0, #0
   154a8:	bne	1548c <__assert_fail@plt+0x4158>
   154ac:	b	154d4 <__assert_fail@plt+0x41a0>
   154b0:	ldr	r5, [sp, #8]
   154b4:	cmn	r4, #1
   154b8:	bgt	15460 <__assert_fail@plt+0x412c>
   154bc:	movw	r0, #46139	; 0xb43b
   154c0:	movw	r7, #46166	; 0xb456
   154c4:	str	r5, [sp, #8]
   154c8:	movt	r0, #1
   154cc:	movt	r7, #1
   154d0:	moveq	r7, r0
   154d4:	ldr	r5, [fp, #12]
   154d8:	mov	r0, #0
   154dc:	mov	r1, r7
   154e0:	mov	r2, #5
   154e4:	bl	11100 <dcgettext@plt>
   154e8:	mov	r4, r0
   154ec:	mov	r0, #0
   154f0:	mov	r1, #8
   154f4:	mov	r2, r6
   154f8:	bl	17684 <__assert_fail@plt+0x6350>
   154fc:	mov	r6, r0
   15500:	mov	r0, #1
   15504:	mov	r1, sl
   15508:	bl	17c44 <__assert_fail@plt+0x6910>
   1550c:	str	r0, [sp]
   15510:	mov	r0, #0
   15514:	mov	r1, #0
   15518:	mov	r2, r4
   1551c:	mov	r3, r6
   15520:	bl	11178 <error@plt>
   15524:	ldr	r1, [sp, #8]
   15528:	mov	r0, r8
   1552c:	mov	r2, r9
   15530:	bl	152d0 <__assert_fail@plt+0x3f9c>
   15534:	blx	r5
   15538:	mvn	r4, #0
   1553c:	mov	r0, r4
   15540:	sub	sp, fp, #28
   15544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15548:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1554c:	add	fp, sp, #24
   15550:	ldr	r6, [r1]
   15554:	cmp	r6, #0
   15558:	beq	155bc <__assert_fail@plt+0x4288>
   1555c:	mov	r8, r1
   15560:	mov	r7, r2
   15564:	mov	r1, r2
   15568:	mov	r2, r3
   1556c:	mov	r4, r3
   15570:	mov	r9, r0
   15574:	bl	111f0 <bcmp@plt>
   15578:	cmp	r0, #0
   1557c:	beq	155b4 <__assert_fail@plt+0x4280>
   15580:	add	r7, r7, r4
   15584:	add	r5, r8, #4
   15588:	ldr	r6, [r5]
   1558c:	cmp	r6, #0
   15590:	beq	155bc <__assert_fail@plt+0x4288>
   15594:	mov	r0, r9
   15598:	mov	r1, r7
   1559c:	mov	r2, r4
   155a0:	bl	111f0 <bcmp@plt>
   155a4:	add	r7, r7, r4
   155a8:	add	r5, r5, #4
   155ac:	cmp	r0, #0
   155b0:	bne	15588 <__assert_fail@plt+0x4254>
   155b4:	mov	r0, r6
   155b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155bc:	mov	r6, #0
   155c0:	mov	r0, r6
   155c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155c8:	movw	r1, #49700	; 0xc224
   155cc:	movt	r1, #2
   155d0:	str	r0, [r1, #4]
   155d4:	bx	lr
   155d8:	movw	r1, #49700	; 0xc224
   155dc:	movt	r1, #2
   155e0:	strb	r0, [r1]
   155e4:	bx	lr
   155e8:	push	{r4, r5, r6, sl, fp, lr}
   155ec:	add	fp, sp, #16
   155f0:	sub	sp, sp, #8
   155f4:	movw	r0, #49524	; 0xc174
   155f8:	movt	r0, #2
   155fc:	ldr	r0, [r0]
   15600:	bl	19944 <__assert_fail@plt+0x8610>
   15604:	cmp	r0, #0
   15608:	beq	15630 <__assert_fail@plt+0x42fc>
   1560c:	movw	r5, #49700	; 0xc224
   15610:	movt	r5, #2
   15614:	ldrb	r0, [r5]
   15618:	cmp	r0, #0
   1561c:	beq	1565c <__assert_fail@plt+0x4328>
   15620:	bl	11214 <__errno_location@plt>
   15624:	ldr	r0, [r0]
   15628:	cmp	r0, #32
   1562c:	bne	1565c <__assert_fail@plt+0x4328>
   15630:	movw	r0, #49512	; 0xc168
   15634:	movt	r0, #2
   15638:	ldr	r0, [r0]
   1563c:	bl	19944 <__assert_fail@plt+0x8610>
   15640:	cmp	r0, #0
   15644:	subeq	sp, fp, #16
   15648:	popeq	{r4, r5, r6, sl, fp, pc}
   1564c:	movw	r0, #49424	; 0xc110
   15650:	movt	r0, #2
   15654:	ldr	r0, [r0]
   15658:	bl	110c4 <_exit@plt>
   1565c:	movw	r1, #45161	; 0xb069
   15660:	mov	r0, #0
   15664:	mov	r2, #5
   15668:	movt	r1, #1
   1566c:	bl	11100 <dcgettext@plt>
   15670:	ldr	r6, [r5, #4]
   15674:	mov	r4, r0
   15678:	bl	11214 <__errno_location@plt>
   1567c:	ldr	r5, [r0]
   15680:	cmp	r6, #0
   15684:	bne	156a0 <__assert_fail@plt+0x436c>
   15688:	movw	r2, #46226	; 0xb492
   1568c:	mov	r0, #0
   15690:	mov	r1, r5
   15694:	mov	r3, r4
   15698:	movt	r2, #1
   1569c:	b	156c0 <__assert_fail@plt+0x438c>
   156a0:	mov	r0, r6
   156a4:	bl	178cc <__assert_fail@plt+0x6598>
   156a8:	movw	r2, #46229	; 0xb495
   156ac:	mov	r3, r0
   156b0:	str	r4, [sp]
   156b4:	mov	r0, #0
   156b8:	mov	r1, r5
   156bc:	movt	r2, #1
   156c0:	bl	11178 <error@plt>
   156c4:	movw	r0, #49424	; 0xc110
   156c8:	movt	r0, #2
   156cc:	ldr	r0, [r0]
   156d0:	bl	110c4 <_exit@plt>
   156d4:	andeq	r0, r0, r0
   156d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156dc:	add	fp, sp, #28
   156e0:	sub	sp, sp, #4
   156e4:	vpush	{d8}
   156e8:	sub	sp, sp, #40	; 0x28
   156ec:	mov	sl, r0
   156f0:	movw	r0, #11557	; 0x2d25
   156f4:	add	r8, sp, #29
   156f8:	mov	r5, r1
   156fc:	mov	r1, #43	; 0x2b
   15700:	mov	r9, r3
   15704:	mov	r3, #32
   15708:	vneg.f64	d17, d0
   1570c:	vcmpe.f64	d0, #0.0
   15710:	vldr	d16, [pc, #264]	; 15820 <__assert_fail@plt+0x44ec>
   15714:	tst	r2, #16
   15718:	vmov.f64	d18, d0
   1571c:	mov	r6, #15
   15720:	vmov.f64	d8, d0
   15724:	strh	r0, [sp, #29]
   15728:	and	r0, r2, #1
   1572c:	add	r0, r8, r0
   15730:	strb	r1, [r0, #1]!
   15734:	ubfx	r1, r2, #1, #1
   15738:	strb	r3, [r0, r1]!
   1573c:	ubfx	r1, r2, #2, #1
   15740:	mov	r3, #48	; 0x30
   15744:	strb	r3, [r0, r1]!
   15748:	ubfx	r1, r2, #3, #1
   1574c:	movw	r3, #11818	; 0x2e2a
   15750:	mov	r2, #1
   15754:	strh	r3, [r0, r1]!
   15758:	mov	r1, #0
   1575c:	mvn	r3, #0
   15760:	strb	r1, [r0, #4]
   15764:	mov	r1, #71	; 0x47
   15768:	movweq	r1, #103	; 0x67
   1576c:	vmrs	APSR_nzcv, fpscr
   15770:	vmovmi.f64	d18, d17
   15774:	strb	r1, [r0, #3]
   15778:	mov	r1, #42	; 0x2a
   1577c:	strb	r1, [r0, #2]
   15780:	mov	r0, sl
   15784:	mov	r1, r5
   15788:	vstr	d0, [sp, #16]
   1578c:	stm	sp, {r8, r9}
   15790:	vcmpe.f64	d18, d16
   15794:	vmrs	APSR_nzcv, fpscr
   15798:	movwmi	r6, #1
   1579c:	str	r6, [sp, #8]
   157a0:	bl	11328 <__snprintf_chk@plt>
   157a4:	mov	r7, r0
   157a8:	cmp	r0, #0
   157ac:	bmi	1580c <__assert_fail@plt+0x44d8>
   157b0:	cmp	r7, r5
   157b4:	bcs	157d0 <__assert_fail@plt+0x449c>
   157b8:	mov	r0, sl
   157bc:	mov	r1, #0
   157c0:	bl	11268 <strtod@plt>
   157c4:	vcmp.f64	d0, d8
   157c8:	vmrs	APSR_nzcv, fpscr
   157cc:	beq	1580c <__assert_fail@plt+0x44d8>
   157d0:	add	r4, r6, #1
   157d4:	mov	r0, sl
   157d8:	mov	r1, r5
   157dc:	mov	r2, #1
   157e0:	mvn	r3, #0
   157e4:	vstr	d8, [sp, #16]
   157e8:	stm	sp, {r8, r9}
   157ec:	str	r4, [sp, #8]
   157f0:	bl	11328 <__snprintf_chk@plt>
   157f4:	mov	r7, r0
   157f8:	cmp	r6, #15
   157fc:	bhi	1580c <__assert_fail@plt+0x44d8>
   15800:	cmn	r7, #1
   15804:	mov	r6, r4
   15808:	bgt	157b0 <__assert_fail@plt+0x447c>
   1580c:	mov	r0, r7
   15810:	sub	sp, fp, #40	; 0x28
   15814:	vpop	{d8}
   15818:	add	sp, sp, #4
   1581c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15820:	andeq	r0, r0, r0
   15824:	andseq	r0, r0, r0
   15828:	push	{r4, r5, r6, sl, fp, lr}
   1582c:	add	fp, sp, #16
   15830:	sub	sp, sp, #8
   15834:	mov	r4, r0
   15838:	bl	11274 <fileno@plt>
   1583c:	cmn	r0, #1
   15840:	ble	158b4 <__assert_fail@plt+0x4580>
   15844:	mov	r0, r4
   15848:	bl	111b4 <__freading@plt>
   1584c:	cmp	r0, #0
   15850:	beq	1587c <__assert_fail@plt+0x4548>
   15854:	mov	r0, r4
   15858:	bl	11274 <fileno@plt>
   1585c:	mov	r1, #1
   15860:	mov	r2, #0
   15864:	mov	r3, #0
   15868:	str	r1, [sp]
   1586c:	bl	11148 <lseek64@plt>
   15870:	and	r0, r0, r1
   15874:	cmn	r0, #1
   15878:	beq	158b4 <__assert_fail@plt+0x4580>
   1587c:	mov	r0, r4
   15880:	bl	158c4 <__assert_fail@plt+0x4590>
   15884:	cmp	r0, #0
   15888:	beq	158b4 <__assert_fail@plt+0x4580>
   1588c:	bl	11214 <__errno_location@plt>
   15890:	ldr	r6, [r0]
   15894:	mov	r5, r0
   15898:	mov	r0, r4
   1589c:	bl	1128c <fclose@plt>
   158a0:	cmp	r6, #0
   158a4:	strne	r6, [r5]
   158a8:	mvnne	r0, #0
   158ac:	sub	sp, fp, #16
   158b0:	pop	{r4, r5, r6, sl, fp, pc}
   158b4:	mov	r0, r4
   158b8:	sub	sp, fp, #16
   158bc:	pop	{r4, r5, r6, sl, fp, lr}
   158c0:	b	1128c <fclose@plt>
   158c4:	push	{r4, sl, fp, lr}
   158c8:	add	fp, sp, #8
   158cc:	sub	sp, sp, #8
   158d0:	mov	r4, r0
   158d4:	cmp	r0, #0
   158d8:	beq	15910 <__assert_fail@plt+0x45dc>
   158dc:	mov	r0, r4
   158e0:	bl	111b4 <__freading@plt>
   158e4:	cmp	r0, #0
   158e8:	beq	15910 <__assert_fail@plt+0x45dc>
   158ec:	ldrb	r0, [r4, #1]
   158f0:	tst	r0, #1
   158f4:	beq	15910 <__assert_fail@plt+0x45dc>
   158f8:	mov	r0, #1
   158fc:	mov	r2, #0
   15900:	mov	r3, #0
   15904:	str	r0, [sp]
   15908:	mov	r0, r4
   1590c:	bl	15948 <__assert_fail@plt+0x4614>
   15910:	mov	r0, r4
   15914:	sub	sp, fp, #8
   15918:	pop	{r4, sl, fp, lr}
   1591c:	b	110a0 <fflush@plt>
   15920:	push	{r4, r5, r6, sl, fp, lr}
   15924:	add	fp, sp, #16
   15928:	mov	r4, r0
   1592c:	bl	11214 <__errno_location@plt>
   15930:	ldr	r6, [r0]
   15934:	mov	r5, r0
   15938:	mov	r0, r4
   1593c:	bl	110ac <free@plt>
   15940:	str	r6, [r5]
   15944:	pop	{r4, r5, r6, sl, fp, pc}
   15948:	push	{r4, r5, r6, r7, fp, lr}
   1594c:	add	fp, sp, #16
   15950:	sub	sp, sp, #8
   15954:	mov	r4, r0
   15958:	ldr	r0, [r0, #4]
   1595c:	mov	r5, r3
   15960:	mov	r6, r2
   15964:	ldr	r1, [r4, #8]
   15968:	cmp	r1, r0
   1596c:	bne	15988 <__assert_fail@plt+0x4654>
   15970:	ldrd	r0, [r4, #16]
   15974:	cmp	r1, r0
   15978:	bne	15988 <__assert_fail@plt+0x4654>
   1597c:	ldr	r0, [r4, #36]	; 0x24
   15980:	cmp	r0, #0
   15984:	beq	159a0 <__assert_fail@plt+0x466c>
   15988:	mov	r0, r4
   1598c:	mov	r2, r6
   15990:	mov	r3, r5
   15994:	sub	sp, fp, #16
   15998:	pop	{r4, r5, r6, r7, fp, lr}
   1599c:	b	11298 <fseeko64@plt>
   159a0:	ldr	r7, [fp, #8]
   159a4:	mov	r0, r4
   159a8:	bl	11274 <fileno@plt>
   159ac:	mov	r2, r6
   159b0:	mov	r3, r5
   159b4:	str	r7, [sp]
   159b8:	bl	11148 <lseek64@plt>
   159bc:	and	r2, r0, r1
   159c0:	cmn	r2, #1
   159c4:	beq	159e4 <__assert_fail@plt+0x46b0>
   159c8:	strd	r0, [r4, #80]	; 0x50
   159cc:	ldr	r0, [r4]
   159d0:	bic	r0, r0, #16
   159d4:	str	r0, [r4]
   159d8:	mov	r0, #0
   159dc:	sub	sp, fp, #16
   159e0:	pop	{r4, r5, r6, r7, fp, pc}
   159e4:	mvn	r0, #0
   159e8:	sub	sp, fp, #16
   159ec:	pop	{r4, r5, r6, r7, fp, pc}
   159f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159f4:	add	fp, sp, #28
   159f8:	sub	sp, sp, #4
   159fc:	vpush	{d8-d9}
   15a00:	sub	sp, sp, #40	; 0x28
   15a04:	mov	sl, r0
   15a08:	movw	r0, #11557	; 0x2d25
   15a0c:	vmov.f32	s16, s0
   15a10:	add	r8, sp, #29
   15a14:	mov	r5, r1
   15a18:	mov	r1, #43	; 0x2b
   15a1c:	mov	r9, r3
   15a20:	mov	r3, #32
   15a24:	vcvt.f64.f32	d9, s0
   15a28:	vldr	s0, [pc, #268]	; 15b3c <__assert_fail@plt+0x4808>
   15a2c:	tst	r2, #16
   15a30:	mov	r6, #6
   15a34:	strh	r0, [sp, #29]
   15a38:	and	r0, r2, #1
   15a3c:	add	r0, r8, r0
   15a40:	strb	r1, [r0, #1]!
   15a44:	ubfx	r1, r2, #1, #1
   15a48:	vneg.f32	s2, s16
   15a4c:	vcmpe.f32	s16, #0.0
   15a50:	vmov.f32	s4, s16
   15a54:	strb	r3, [r0, r1]!
   15a58:	ubfx	r1, r2, #2, #1
   15a5c:	mov	r3, #48	; 0x30
   15a60:	strb	r3, [r0, r1]!
   15a64:	ubfx	r1, r2, #3, #1
   15a68:	movw	r3, #11818	; 0x2e2a
   15a6c:	mov	r2, #1
   15a70:	strh	r3, [r0, r1]!
   15a74:	mov	r1, #0
   15a78:	mvn	r3, #0
   15a7c:	strb	r1, [r0, #4]
   15a80:	mov	r1, #71	; 0x47
   15a84:	movweq	r1, #103	; 0x67
   15a88:	vmrs	APSR_nzcv, fpscr
   15a8c:	vmovmi.f32	s4, s2
   15a90:	strb	r1, [r0, #3]
   15a94:	mov	r1, #42	; 0x2a
   15a98:	strb	r1, [r0, #2]
   15a9c:	mov	r0, sl
   15aa0:	mov	r1, r5
   15aa4:	vstr	d9, [sp, #16]
   15aa8:	stm	sp, {r8, r9}
   15aac:	vcmpe.f32	s4, s0
   15ab0:	vmrs	APSR_nzcv, fpscr
   15ab4:	movwmi	r6, #1
   15ab8:	str	r6, [sp, #8]
   15abc:	bl	11328 <__snprintf_chk@plt>
   15ac0:	mov	r7, r0
   15ac4:	cmp	r0, #0
   15ac8:	bmi	15b28 <__assert_fail@plt+0x47f4>
   15acc:	cmp	r7, r5
   15ad0:	bcs	15aec <__assert_fail@plt+0x47b8>
   15ad4:	mov	r0, sl
   15ad8:	mov	r1, #0
   15adc:	bl	11184 <strtof@plt>
   15ae0:	vcmp.f32	s0, s16
   15ae4:	vmrs	APSR_nzcv, fpscr
   15ae8:	beq	15b28 <__assert_fail@plt+0x47f4>
   15aec:	add	r4, r6, #1
   15af0:	mov	r0, sl
   15af4:	mov	r1, r5
   15af8:	mov	r2, #1
   15afc:	mvn	r3, #0
   15b00:	vstr	d9, [sp, #16]
   15b04:	stm	sp, {r8, r9}
   15b08:	str	r4, [sp, #8]
   15b0c:	bl	11328 <__snprintf_chk@plt>
   15b10:	mov	r7, r0
   15b14:	cmp	r6, #7
   15b18:	bhi	15b28 <__assert_fail@plt+0x47f4>
   15b1c:	cmn	r7, #1
   15b20:	mov	r6, r4
   15b24:	bgt	15acc <__assert_fail@plt+0x4798>
   15b28:	mov	r0, r7
   15b2c:	sub	sp, fp, #48	; 0x30
   15b30:	vpop	{d8-d9}
   15b34:	add	sp, sp, #4
   15b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b3c:	addeq	r0, r0, r0
   15b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b44:	add	fp, sp, #28
   15b48:	sub	sp, sp, #4
   15b4c:	vpush	{d8}
   15b50:	sub	sp, sp, #40	; 0x28
   15b54:	mov	sl, r0
   15b58:	movw	r0, #11557	; 0x2d25
   15b5c:	add	r8, sp, #29
   15b60:	mov	r5, r1
   15b64:	mov	r1, #43	; 0x2b
   15b68:	mov	r9, r3
   15b6c:	mov	r3, #32
   15b70:	vneg.f64	d17, d0
   15b74:	vcmpe.f64	d0, #0.0
   15b78:	vldr	d16, [pc, #264]	; 15c88 <__assert_fail@plt+0x4954>
   15b7c:	tst	r2, #16
   15b80:	vmov.f64	d18, d0
   15b84:	mov	r6, #15
   15b88:	vmov.f64	d8, d0
   15b8c:	strh	r0, [sp, #29]
   15b90:	and	r0, r2, #1
   15b94:	add	r0, r8, r0
   15b98:	strb	r1, [r0, #1]!
   15b9c:	ubfx	r1, r2, #1, #1
   15ba0:	strb	r3, [r0, r1]!
   15ba4:	ubfx	r1, r2, #2, #1
   15ba8:	mov	r3, #48	; 0x30
   15bac:	strb	r3, [r0, r1]!
   15bb0:	movw	r3, #11818	; 0x2e2a
   15bb4:	ubfx	r1, r2, #3, #1
   15bb8:	mov	r2, #1
   15bbc:	movt	r3, #19498	; 0x4c2a
   15bc0:	str	r3, [r0, r1]!
   15bc4:	mov	r1, #0
   15bc8:	mvn	r3, #0
   15bcc:	strb	r1, [r0, #5]
   15bd0:	mov	r1, #71	; 0x47
   15bd4:	movweq	r1, #103	; 0x67
   15bd8:	vmrs	APSR_nzcv, fpscr
   15bdc:	vmovmi.f64	d18, d17
   15be0:	strb	r1, [r0, #4]
   15be4:	mov	r0, sl
   15be8:	mov	r1, r5
   15bec:	vstr	d0, [sp, #16]
   15bf0:	stm	sp, {r8, r9}
   15bf4:	vcmpe.f64	d18, d16
   15bf8:	vmrs	APSR_nzcv, fpscr
   15bfc:	movwmi	r6, #1
   15c00:	str	r6, [sp, #8]
   15c04:	bl	11328 <__snprintf_chk@plt>
   15c08:	mov	r7, r0
   15c0c:	cmp	r0, #0
   15c10:	bmi	15c70 <__assert_fail@plt+0x493c>
   15c14:	cmp	r7, r5
   15c18:	bcs	15c34 <__assert_fail@plt+0x4900>
   15c1c:	mov	r0, sl
   15c20:	mov	r1, #0
   15c24:	bl	110f4 <strtold@plt>
   15c28:	vcmp.f64	d0, d8
   15c2c:	vmrs	APSR_nzcv, fpscr
   15c30:	beq	15c70 <__assert_fail@plt+0x493c>
   15c34:	add	r4, r6, #1
   15c38:	mov	r0, sl
   15c3c:	mov	r1, r5
   15c40:	mov	r2, #1
   15c44:	mvn	r3, #0
   15c48:	vstr	d8, [sp, #16]
   15c4c:	stm	sp, {r8, r9}
   15c50:	str	r4, [sp, #8]
   15c54:	bl	11328 <__snprintf_chk@plt>
   15c58:	mov	r7, r0
   15c5c:	cmp	r6, #15
   15c60:	bhi	15c70 <__assert_fail@plt+0x493c>
   15c64:	cmn	r7, #1
   15c68:	mov	r6, r4
   15c6c:	bgt	15c14 <__assert_fail@plt+0x48e0>
   15c70:	mov	r0, r7
   15c74:	sub	sp, fp, #40	; 0x28
   15c78:	vpop	{d8}
   15c7c:	add	sp, sp, #4
   15c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c84:	nop	{0}
   15c88:	andeq	r0, r0, r0
   15c8c:	andseq	r0, r0, r0
   15c90:	push	{r4, r5, fp, lr}
   15c94:	add	fp, sp, #8
   15c98:	cmp	r0, #0
   15c9c:	beq	15d30 <__assert_fail@plt+0x49fc>
   15ca0:	mov	r1, #47	; 0x2f
   15ca4:	mov	r4, r0
   15ca8:	bl	112bc <strrchr@plt>
   15cac:	cmp	r0, #0
   15cb0:	mov	r5, r4
   15cb4:	addne	r5, r0, #1
   15cb8:	sub	r0, r5, r4
   15cbc:	cmp	r0, #7
   15cc0:	blt	15d14 <__assert_fail@plt+0x49e0>
   15cc4:	movw	r1, #46292	; 0xb4d4
   15cc8:	sub	r0, r5, #7
   15ccc:	mov	r2, #7
   15cd0:	movt	r1, #1
   15cd4:	bl	11310 <strncmp@plt>
   15cd8:	cmp	r0, #0
   15cdc:	bne	15d14 <__assert_fail@plt+0x49e0>
   15ce0:	movw	r1, #46300	; 0xb4dc
   15ce4:	mov	r0, r5
   15ce8:	mov	r2, #3
   15cec:	movt	r1, #1
   15cf0:	bl	11310 <strncmp@plt>
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d04 <__assert_fail@plt+0x49d0>
   15cfc:	mov	r4, r5
   15d00:	b	15d14 <__assert_fail@plt+0x49e0>
   15d04:	movw	r0, #49496	; 0xc158
   15d08:	add	r4, r5, #3
   15d0c:	movt	r0, #2
   15d10:	str	r4, [r0]
   15d14:	movw	r0, #49500	; 0xc15c
   15d18:	movt	r0, #2
   15d1c:	str	r4, [r0]
   15d20:	movw	r0, #49708	; 0xc22c
   15d24:	movt	r0, #2
   15d28:	str	r4, [r0]
   15d2c:	pop	{r4, r5, fp, pc}
   15d30:	movw	r0, #49512	; 0xc168
   15d34:	mov	r1, #55	; 0x37
   15d38:	mov	r2, #1
   15d3c:	movt	r0, #2
   15d40:	ldr	r3, [r0]
   15d44:	movw	r0, #46236	; 0xb49c
   15d48:	movt	r0, #1
   15d4c:	bl	1113c <fwrite@plt>
   15d50:	bl	1131c <abort@plt>
   15d54:	push	{r4, r5, r6, sl, fp, lr}
   15d58:	add	fp, sp, #16
   15d5c:	mov	r4, r0
   15d60:	movw	r0, #49712	; 0xc230
   15d64:	movt	r0, #2
   15d68:	cmp	r4, #0
   15d6c:	moveq	r4, r0
   15d70:	bl	11214 <__errno_location@plt>
   15d74:	ldr	r6, [r0]
   15d78:	mov	r5, r0
   15d7c:	mov	r0, r4
   15d80:	mov	r1, #48	; 0x30
   15d84:	bl	1878c <__assert_fail@plt+0x7458>
   15d88:	str	r6, [r5]
   15d8c:	pop	{r4, r5, r6, sl, fp, pc}
   15d90:	movw	r1, #49712	; 0xc230
   15d94:	cmp	r0, #0
   15d98:	movt	r1, #2
   15d9c:	movne	r1, r0
   15da0:	ldr	r0, [r1]
   15da4:	bx	lr
   15da8:	movw	r2, #49712	; 0xc230
   15dac:	cmp	r0, #0
   15db0:	movt	r2, #2
   15db4:	movne	r2, r0
   15db8:	str	r1, [r2]
   15dbc:	bx	lr
   15dc0:	movw	r3, #49712	; 0xc230
   15dc4:	cmp	r0, #0
   15dc8:	and	r2, r2, #1
   15dcc:	movt	r3, #2
   15dd0:	movne	r3, r0
   15dd4:	ubfx	r0, r1, #5, #3
   15dd8:	and	r1, r1, #31
   15ddc:	add	ip, r3, r0, lsl #2
   15de0:	mov	r0, #1
   15de4:	ldr	r3, [ip, #8]
   15de8:	and	r0, r0, r3, lsr r1
   15dec:	eor	r2, r0, r2
   15df0:	eor	r1, r3, r2, lsl r1
   15df4:	str	r1, [ip, #8]
   15df8:	bx	lr
   15dfc:	movw	r2, #49712	; 0xc230
   15e00:	cmp	r0, #0
   15e04:	movt	r2, #2
   15e08:	movne	r2, r0
   15e0c:	ldr	r0, [r2, #4]
   15e10:	str	r1, [r2, #4]
   15e14:	bx	lr
   15e18:	push	{fp, lr}
   15e1c:	mov	fp, sp
   15e20:	movw	r3, #49712	; 0xc230
   15e24:	cmp	r0, #0
   15e28:	movt	r3, #2
   15e2c:	movne	r3, r0
   15e30:	cmp	r1, #0
   15e34:	mov	r0, #10
   15e38:	cmpne	r2, #0
   15e3c:	str	r0, [r3]
   15e40:	bne	15e48 <__assert_fail@plt+0x4b14>
   15e44:	bl	1131c <abort@plt>
   15e48:	str	r1, [r3, #40]	; 0x28
   15e4c:	str	r2, [r3, #44]	; 0x2c
   15e50:	pop	{fp, pc}
   15e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e58:	add	fp, sp, #28
   15e5c:	sub	sp, sp, #20
   15e60:	mov	r7, r0
   15e64:	ldr	r0, [fp, #8]
   15e68:	movw	r5, #49712	; 0xc230
   15e6c:	mov	r8, r3
   15e70:	mov	r9, r2
   15e74:	mov	sl, r1
   15e78:	movt	r5, #2
   15e7c:	cmp	r0, #0
   15e80:	movne	r5, r0
   15e84:	bl	11214 <__errno_location@plt>
   15e88:	ldr	r2, [r5, #40]	; 0x28
   15e8c:	ldr	r3, [r5, #44]	; 0x2c
   15e90:	mov	r4, r0
   15e94:	ldm	r5, {r0, r1}
   15e98:	add	r5, r5, #8
   15e9c:	ldr	r6, [r4]
   15ea0:	stm	sp, {r0, r1, r5}
   15ea4:	mov	r0, r7
   15ea8:	mov	r1, sl
   15eac:	str	r2, [sp, #12]
   15eb0:	str	r3, [sp, #16]
   15eb4:	mov	r2, r9
   15eb8:	mov	r3, r8
   15ebc:	bl	15ecc <__assert_fail@plt+0x4b98>
   15ec0:	str	r6, [r4]
   15ec4:	sub	sp, fp, #28
   15ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ed0:	add	fp, sp, #28
   15ed4:	sub	sp, sp, #156	; 0x9c
   15ed8:	str	r0, [fp, #-84]	; 0xffffffac
   15edc:	add	r0, r2, #1
   15ee0:	mov	r6, r1
   15ee4:	mov	r7, r3
   15ee8:	str	r2, [fp, #-80]	; 0xffffffb0
   15eec:	str	r0, [sp, #80]	; 0x50
   15ef0:	ldr	r0, [fp, #12]
   15ef4:	and	r1, r0, #1
   15ef8:	str	r1, [sp, #36]	; 0x24
   15efc:	and	r1, r0, #4
   15f00:	str	r1, [sp, #32]
   15f04:	ubfx	r8, r0, #1, #1
   15f08:	bl	11154 <__ctype_get_mb_cur_max@plt>
   15f0c:	str	r0, [sp, #40]	; 0x28
   15f10:	ldr	r0, [fp, #24]
   15f14:	ldr	r4, [fp, #8]
   15f18:	mov	r1, #0
   15f1c:	str	r1, [fp, #-52]	; 0xffffffcc
   15f20:	mov	r1, #0
   15f24:	str	r1, [sp, #60]	; 0x3c
   15f28:	mov	r1, #1
   15f2c:	str	r1, [sp, #84]	; 0x54
   15f30:	str	r0, [sp, #76]	; 0x4c
   15f34:	ldr	r0, [fp, #20]
   15f38:	str	r0, [sp, #72]	; 0x48
   15f3c:	mov	r0, #0
   15f40:	str	r0, [sp, #56]	; 0x38
   15f44:	mov	r0, #0
   15f48:	str	r0, [fp, #-88]	; 0xffffffa8
   15f4c:	mov	r0, #0
   15f50:	str	r0, [fp, #-72]	; 0xffffffb8
   15f54:	mov	r0, #0
   15f58:	cmp	r4, #10
   15f5c:	bhi	17278 <__assert_fail@plt+0x5f44>
   15f60:	add	r1, pc, #24
   15f64:	ldr	ip, [fp, #-84]	; 0xffffffac
   15f68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15f6c:	mov	r5, r6
   15f70:	mov	r9, #0
   15f74:	mov	r2, #1
   15f78:	mov	r3, #0
   15f7c:	ldr	pc, [r1, r4, lsl #2]
   15f80:	andeq	r6, r1, r8, asr #32
   15f84:	andeq	r6, r1, r4, lsl #1
   15f88:	andeq	r6, r1, r8, asr r0
   15f8c:	andeq	r6, r1, r0, asr #32
   15f90:	andeq	r6, r1, r8, ror r0
   15f94:	ldrdeq	r6, [r1], -ip
   15f98:	andeq	r6, r1, r8, rrx
   15f9c:	andeq	r6, r1, r4, asr r3
   15fa0:	andeq	r5, r1, ip, lsr #31
   15fa4:	andeq	r5, r1, ip, lsr #31
   15fa8:	andeq	r6, r1, r4, ror #3
   15fac:	movw	r6, #46382	; 0xb52e
   15fb0:	mov	r0, #0
   15fb4:	mov	r2, #5
   15fb8:	movt	r6, #1
   15fbc:	mov	r1, r6
   15fc0:	bl	11100 <dcgettext@plt>
   15fc4:	cmp	r0, r6
   15fc8:	str	r0, [sp, #72]	; 0x48
   15fcc:	bne	161bc <__assert_fail@plt+0x4e88>
   15fd0:	bl	199c8 <__assert_fail@plt+0x8694>
   15fd4:	ldrb	r1, [r0]
   15fd8:	and	r1, r1, #223	; 0xdf
   15fdc:	cmp	r1, #71	; 0x47
   15fe0:	beq	1613c <__assert_fail@plt+0x4e08>
   15fe4:	cmp	r1, #85	; 0x55
   15fe8:	bne	161a0 <__assert_fail@plt+0x4e6c>
   15fec:	ldrb	r1, [r0, #1]
   15ff0:	and	r1, r1, #223	; 0xdf
   15ff4:	cmp	r1, #84	; 0x54
   15ff8:	bne	161a0 <__assert_fail@plt+0x4e6c>
   15ffc:	ldrb	r1, [r0, #2]
   16000:	and	r1, r1, #223	; 0xdf
   16004:	cmp	r1, #70	; 0x46
   16008:	bne	161a0 <__assert_fail@plt+0x4e6c>
   1600c:	ldrb	r1, [r0, #3]
   16010:	cmp	r1, #45	; 0x2d
   16014:	bne	161a0 <__assert_fail@plt+0x4e6c>
   16018:	ldrb	r1, [r0, #4]
   1601c:	cmp	r1, #56	; 0x38
   16020:	bne	161a0 <__assert_fail@plt+0x4e6c>
   16024:	ldrb	r0, [r0, #5]
   16028:	cmp	r0, #0
   1602c:	movw	r0, #46384	; 0xb530
   16030:	movt	r0, #1
   16034:	str	r0, [sp, #72]	; 0x48
   16038:	bne	161a0 <__assert_fail@plt+0x4e6c>
   1603c:	b	161bc <__assert_fail@plt+0x4e88>
   16040:	mov	r0, #1
   16044:	b	16084 <__assert_fail@plt+0x4d50>
   16048:	mov	r4, #0
   1604c:	mov	r9, #0
   16050:	mov	r2, r0
   16054:	b	160d4 <__assert_fail@plt+0x4da0>
   16058:	tst	r8, #1
   1605c:	bne	16084 <__assert_fail@plt+0x4d50>
   16060:	mov	r2, r0
   16064:	b	160ac <__assert_fail@plt+0x4d78>
   16068:	mov	r0, #1
   1606c:	mov	r9, #0
   16070:	mov	r4, #5
   16074:	b	160f0 <__assert_fail@plt+0x4dbc>
   16078:	mov	r2, #1
   1607c:	tst	r8, #1
   16080:	beq	160ac <__assert_fail@plt+0x4d78>
   16084:	mov	r1, #1
   16088:	mov	r9, #0
   1608c:	mov	r4, #2
   16090:	mov	r2, r0
   16094:	mov	r3, #1
   16098:	str	r1, [fp, #-72]	; 0xffffffb8
   1609c:	movw	r1, #47345	; 0xb8f1
   160a0:	movt	r1, #1
   160a4:	str	r1, [fp, #-88]	; 0xffffffa8
   160a8:	b	16354 <__assert_fail@plt+0x5020>
   160ac:	cmp	r5, #0
   160b0:	mov	r9, #1
   160b4:	mov	r4, #2
   160b8:	movne	r0, #39	; 0x27
   160bc:	strbne	r0, [ip]
   160c0:	movw	r0, #47345	; 0xb8f1
   160c4:	movt	r0, #1
   160c8:	str	r0, [fp, #-88]	; 0xffffffa8
   160cc:	mov	r0, #1
   160d0:	str	r0, [fp, #-72]	; 0xffffffb8
   160d4:	mov	r3, #0
   160d8:	b	16354 <__assert_fail@plt+0x5020>
   160dc:	mov	r4, #5
   160e0:	tst	r8, #1
   160e4:	beq	1610c <__assert_fail@plt+0x4dd8>
   160e8:	mov	r0, #1
   160ec:	mov	r9, #0
   160f0:	str	r0, [fp, #-72]	; 0xffffffb8
   160f4:	movw	r0, #46380	; 0xb52c
   160f8:	mov	r2, #1
   160fc:	mov	r3, #1
   16100:	movt	r0, #1
   16104:	str	r0, [fp, #-88]	; 0xffffffa8
   16108:	b	16354 <__assert_fail@plt+0x5020>
   1610c:	cmp	r5, #0
   16110:	mov	r3, #0
   16114:	mov	r9, #1
   16118:	mov	r2, #1
   1611c:	movne	r0, #34	; 0x22
   16120:	strbne	r0, [ip]
   16124:	movw	r0, #46380	; 0xb52c
   16128:	movt	r0, #1
   1612c:	str	r0, [fp, #-88]	; 0xffffffa8
   16130:	mov	r0, #1
   16134:	str	r0, [fp, #-72]	; 0xffffffb8
   16138:	b	16354 <__assert_fail@plt+0x5020>
   1613c:	ldrb	r1, [r0, #1]
   16140:	and	r1, r1, #223	; 0xdf
   16144:	cmp	r1, #66	; 0x42
   16148:	bne	161a0 <__assert_fail@plt+0x4e6c>
   1614c:	ldrb	r1, [r0, #2]
   16150:	cmp	r1, #49	; 0x31
   16154:	bne	161a0 <__assert_fail@plt+0x4e6c>
   16158:	ldrb	r1, [r0, #3]
   1615c:	cmp	r1, #56	; 0x38
   16160:	bne	161a0 <__assert_fail@plt+0x4e6c>
   16164:	ldrb	r1, [r0, #4]
   16168:	cmp	r1, #48	; 0x30
   1616c:	bne	161a0 <__assert_fail@plt+0x4e6c>
   16170:	ldrb	r1, [r0, #5]
   16174:	cmp	r1, #51	; 0x33
   16178:	bne	161a0 <__assert_fail@plt+0x4e6c>
   1617c:	ldrb	r1, [r0, #6]
   16180:	cmp	r1, #48	; 0x30
   16184:	bne	161a0 <__assert_fail@plt+0x4e6c>
   16188:	ldrb	r0, [r0, #7]
   1618c:	cmp	r0, #0
   16190:	movw	r0, #46392	; 0xb538
   16194:	movt	r0, #1
   16198:	str	r0, [sp, #72]	; 0x48
   1619c:	beq	161bc <__assert_fail@plt+0x4e88>
   161a0:	movw	r1, #46380	; 0xb52c
   161a4:	movw	r0, #47345	; 0xb8f1
   161a8:	cmp	r4, #9
   161ac:	movt	r1, #1
   161b0:	movt	r0, #1
   161b4:	moveq	r0, r1
   161b8:	str	r0, [sp, #72]	; 0x48
   161bc:	movw	r6, #47345	; 0xb8f1
   161c0:	mov	r0, #0
   161c4:	mov	r2, #5
   161c8:	movt	r6, #1
   161cc:	mov	r1, r6
   161d0:	bl	11100 <dcgettext@plt>
   161d4:	cmp	r0, r6
   161d8:	str	r0, [sp, #76]	; 0x4c
   161dc:	beq	16228 <__assert_fail@plt+0x4ef4>
   161e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   161e4:	mov	r9, #0
   161e8:	tst	r8, #1
   161ec:	bne	16330 <__assert_fail@plt+0x4ffc>
   161f0:	ldr	r0, [sp, #72]	; 0x48
   161f4:	ldrb	r0, [r0]
   161f8:	cmp	r0, #0
   161fc:	beq	16330 <__assert_fail@plt+0x4ffc>
   16200:	ldr	r1, [sp, #72]	; 0x48
   16204:	mov	r9, #0
   16208:	add	r1, r1, #1
   1620c:	cmp	r9, r5
   16210:	strbcc	r0, [ip, r9]
   16214:	ldrb	r0, [r1, r9]
   16218:	add	r9, r9, #1
   1621c:	cmp	r0, #0
   16220:	bne	1620c <__assert_fail@plt+0x4ed8>
   16224:	b	16330 <__assert_fail@plt+0x4ffc>
   16228:	bl	199c8 <__assert_fail@plt+0x8694>
   1622c:	ldrb	r1, [r0]
   16230:	and	r1, r1, #223	; 0xdf
   16234:	cmp	r1, #71	; 0x47
   16238:	beq	162a8 <__assert_fail@plt+0x4f74>
   1623c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16240:	cmp	r1, #85	; 0x55
   16244:	bne	16304 <__assert_fail@plt+0x4fd0>
   16248:	ldrb	r1, [r0, #1]
   1624c:	and	r1, r1, #223	; 0xdf
   16250:	cmp	r1, #84	; 0x54
   16254:	bne	16304 <__assert_fail@plt+0x4fd0>
   16258:	ldrb	r1, [r0, #2]
   1625c:	and	r1, r1, #223	; 0xdf
   16260:	cmp	r1, #70	; 0x46
   16264:	bne	16304 <__assert_fail@plt+0x4fd0>
   16268:	ldrb	r1, [r0, #3]
   1626c:	cmp	r1, #45	; 0x2d
   16270:	bne	16304 <__assert_fail@plt+0x4fd0>
   16274:	ldrb	r1, [r0, #4]
   16278:	cmp	r1, #56	; 0x38
   1627c:	bne	16304 <__assert_fail@plt+0x4fd0>
   16280:	ldrb	r0, [r0, #5]
   16284:	cmp	r0, #0
   16288:	bne	16304 <__assert_fail@plt+0x4fd0>
   1628c:	movw	r0, #46388	; 0xb534
   16290:	movt	r0, #1
   16294:	str	r0, [sp, #76]	; 0x4c
   16298:	mov	r9, #0
   1629c:	tst	r8, #1
   162a0:	beq	161f0 <__assert_fail@plt+0x4ebc>
   162a4:	b	16330 <__assert_fail@plt+0x4ffc>
   162a8:	ldrb	r1, [r0, #1]
   162ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   162b0:	and	r1, r1, #223	; 0xdf
   162b4:	cmp	r1, #66	; 0x42
   162b8:	bne	16304 <__assert_fail@plt+0x4fd0>
   162bc:	ldrb	r1, [r0, #2]
   162c0:	cmp	r1, #49	; 0x31
   162c4:	bne	16304 <__assert_fail@plt+0x4fd0>
   162c8:	ldrb	r1, [r0, #3]
   162cc:	cmp	r1, #56	; 0x38
   162d0:	bne	16304 <__assert_fail@plt+0x4fd0>
   162d4:	ldrb	r1, [r0, #4]
   162d8:	cmp	r1, #48	; 0x30
   162dc:	bne	16304 <__assert_fail@plt+0x4fd0>
   162e0:	ldrb	r1, [r0, #5]
   162e4:	cmp	r1, #51	; 0x33
   162e8:	bne	16304 <__assert_fail@plt+0x4fd0>
   162ec:	ldrb	r1, [r0, #6]
   162f0:	cmp	r1, #48	; 0x30
   162f4:	bne	16304 <__assert_fail@plt+0x4fd0>
   162f8:	ldrb	r0, [r0, #7]
   162fc:	cmp	r0, #0
   16300:	beq	17118 <__assert_fail@plt+0x5de4>
   16304:	movw	r0, #47345	; 0xb8f1
   16308:	cmp	r4, #9
   1630c:	movt	r0, #1
   16310:	mov	r1, r0
   16314:	movw	r0, #46380	; 0xb52c
   16318:	movt	r0, #1
   1631c:	moveq	r1, r0
   16320:	str	r1, [sp, #76]	; 0x4c
   16324:	mov	r9, #0
   16328:	tst	r8, #1
   1632c:	beq	161f0 <__assert_fail@plt+0x4ebc>
   16330:	ldr	r6, [sp, #76]	; 0x4c
   16334:	mov	r0, r6
   16338:	bl	111fc <strlen@plt>
   1633c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16340:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16344:	str	r0, [fp, #-72]	; 0xffffffb8
   16348:	str	r6, [fp, #-88]	; 0xffffffa8
   1634c:	mov	r2, #1
   16350:	mov	r3, r8
   16354:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16358:	str	r4, [fp, #-64]	; 0xffffffc0
   1635c:	mov	sl, #0
   16360:	str	r3, [fp, #-76]	; 0xffffffb4
   16364:	str	r2, [sp, #88]	; 0x58
   16368:	cmp	r0, #0
   1636c:	movwne	r0, #1
   16370:	and	r1, r0, r3
   16374:	and	r1, r2, r1
   16378:	str	r1, [sp, #48]	; 0x30
   1637c:	sub	r1, r4, #2
   16380:	clz	r1, r1
   16384:	lsr	r1, r1, #5
   16388:	and	r1, r1, r3
   1638c:	str	r1, [sp, #44]	; 0x2c
   16390:	subs	r1, r4, #2
   16394:	eor	r4, r3, #1
   16398:	movwne	r1, #1
   1639c:	str	r4, [sp, #92]	; 0x5c
   163a0:	orr	r4, r1, r4
   163a4:	and	r1, r1, r2
   163a8:	and	r0, r0, r1
   163ac:	str	r4, [sp, #64]	; 0x40
   163b0:	ldr	r4, [sp, #84]	; 0x54
   163b4:	str	r0, [fp, #-60]	; 0xffffffc4
   163b8:	orr	r0, r1, r3
   163bc:	ldr	r1, [fp, #16]
   163c0:	eor	r0, r0, #1
   163c4:	clz	r1, r1
   163c8:	lsr	r1, r1, #5
   163cc:	orr	r0, r1, r0
   163d0:	str	r0, [fp, #-68]	; 0xffffffbc
   163d4:	eor	r0, r2, #1
   163d8:	str	r0, [sp, #52]	; 0x34
   163dc:	cmn	r7, #1
   163e0:	beq	163f0 <__assert_fail@plt+0x50bc>
   163e4:	cmp	sl, r7
   163e8:	bne	163fc <__assert_fail@plt+0x50c8>
   163ec:	b	17090 <__assert_fail@plt+0x5d5c>
   163f0:	ldrb	r0, [lr, sl]
   163f4:	cmp	r0, #0
   163f8:	beq	17098 <__assert_fail@plt+0x5d64>
   163fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16400:	cmp	r0, #0
   16404:	beq	16464 <__assert_fail@plt+0x5130>
   16408:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1640c:	mov	r6, r5
   16410:	add	r5, sl, r0
   16414:	cmp	r0, #2
   16418:	bcc	16484 <__assert_fail@plt+0x5150>
   1641c:	mov	r0, #0
   16420:	cmn	r7, #1
   16424:	str	r0, [fp, #-56]	; 0xffffffc8
   16428:	bne	16440 <__assert_fail@plt+0x510c>
   1642c:	mov	r0, lr
   16430:	bl	111fc <strlen@plt>
   16434:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16438:	ldr	ip, [fp, #-84]	; 0xffffffac
   1643c:	mov	r7, r0
   16440:	cmp	r5, r7
   16444:	bls	16494 <__assert_fail@plt+0x5160>
   16448:	mov	r0, #0
   1644c:	mov	r5, r6
   16450:	str	r0, [fp, #-48]	; 0xffffffd0
   16454:	ldrb	r6, [lr, sl]
   16458:	cmp	r6, #126	; 0x7e
   1645c:	bls	164e4 <__assert_fail@plt+0x51b0>
   16460:	b	16a40 <__assert_fail@plt+0x570c>
   16464:	mov	r0, #0
   16468:	str	r0, [fp, #-56]	; 0xffffffc8
   1646c:	mov	r0, #0
   16470:	str	r0, [fp, #-48]	; 0xffffffd0
   16474:	ldrb	r6, [lr, sl]
   16478:	cmp	r6, #126	; 0x7e
   1647c:	bls	164e4 <__assert_fail@plt+0x51b0>
   16480:	b	16a40 <__assert_fail@plt+0x570c>
   16484:	mov	r0, #0
   16488:	str	r0, [fp, #-56]	; 0xffffffc8
   1648c:	cmp	r5, r7
   16490:	bhi	16448 <__assert_fail@plt+0x5114>
   16494:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16498:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1649c:	add	r0, lr, sl
   164a0:	bl	111f0 <bcmp@plt>
   164a4:	ldr	r2, [sp, #92]	; 0x5c
   164a8:	cmp	r0, #0
   164ac:	mov	r1, r0
   164b0:	mov	r5, r6
   164b4:	movwne	r1, #1
   164b8:	orr	r1, r1, r2
   164bc:	tst	r1, #1
   164c0:	beq	17158 <__assert_fail@plt+0x5e24>
   164c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   164c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   164cc:	clz	r0, r0
   164d0:	lsr	r0, r0, #5
   164d4:	str	r0, [fp, #-48]	; 0xffffffd0
   164d8:	ldrb	r6, [lr, sl]
   164dc:	cmp	r6, #126	; 0x7e
   164e0:	bhi	16a40 <__assert_fail@plt+0x570c>
   164e4:	add	r3, pc, #16
   164e8:	mov	r8, #1
   164ec:	mov	r2, #110	; 0x6e
   164f0:	mov	r0, #97	; 0x61
   164f4:	mov	r1, #0
   164f8:	ldr	pc, [r3, r6, lsl #2]
   164fc:	strdeq	r6, [r1], -r8
   16500:	andeq	r6, r1, r0, asr #20
   16504:	andeq	r6, r1, r0, asr #20
   16508:	andeq	r6, r1, r0, asr #20
   1650c:	andeq	r6, r1, r0, asr #20
   16510:	andeq	r6, r1, r0, asr #20
   16514:	andeq	r6, r1, r0, asr #20
   16518:	strdeq	r6, [r1], -r4
   1651c:	ldrdeq	r6, [r1], -r8
   16520:	ldrdeq	r6, [r1], -r0
   16524:	andeq	r6, r1, r4, ror #15
   16528:	andeq	r6, r1, r4, lsl r9
   1652c:	andeq	r6, r1, r8, asr #15
   16530:	andeq	r6, r1, r0, ror #15
   16534:	andeq	r6, r1, r0, asr #20
   16538:	andeq	r6, r1, r0, asr #20
   1653c:	andeq	r6, r1, r0, asr #20
   16540:	andeq	r6, r1, r0, asr #20
   16544:	andeq	r6, r1, r0, asr #20
   16548:	andeq	r6, r1, r0, asr #20
   1654c:	andeq	r6, r1, r0, asr #20
   16550:	andeq	r6, r1, r0, asr #20
   16554:	andeq	r6, r1, r0, asr #20
   16558:	andeq	r6, r1, r0, asr #20
   1655c:	andeq	r6, r1, r0, asr #20
   16560:	andeq	r6, r1, r0, asr #20
   16564:	andeq	r6, r1, r0, asr #20
   16568:	andeq	r6, r1, r0, asr #20
   1656c:	andeq	r6, r1, r0, asr #20
   16570:	andeq	r6, r1, r0, asr #20
   16574:	andeq	r6, r1, r0, asr #20
   16578:	andeq	r6, r1, r0, asr #20
   1657c:	andeq	r6, r1, ip, ror #14
   16580:	andeq	r6, r1, r0, ror r7
   16584:	andeq	r6, r1, r0, ror r7
   16588:	andeq	r6, r1, r0, ror #14
   1658c:	andeq	r6, r1, r0, ror r7
   16590:	strdeq	r6, [r1], -r8
   16594:	andeq	r6, r1, r0, ror r7
   16598:	andeq	r6, r1, ip, lsl r9
   1659c:	andeq	r6, r1, r0, ror r7
   165a0:	andeq	r6, r1, r0, ror r7
   165a4:	andeq	r6, r1, r0, ror r7
   165a8:	strdeq	r6, [r1], -r8
   165ac:	strdeq	r6, [r1], -r8
   165b0:	strdeq	r6, [r1], -r8
   165b4:	strdeq	r6, [r1], -r8
   165b8:	strdeq	r6, [r1], -r8
   165bc:	strdeq	r6, [r1], -r8
   165c0:	strdeq	r6, [r1], -r8
   165c4:	strdeq	r6, [r1], -r8
   165c8:	strdeq	r6, [r1], -r8
   165cc:	strdeq	r6, [r1], -r8
   165d0:	strdeq	r6, [r1], -r8
   165d4:	strdeq	r6, [r1], -r8
   165d8:	strdeq	r6, [r1], -r8
   165dc:	strdeq	r6, [r1], -r8
   165e0:	strdeq	r6, [r1], -r8
   165e4:	strdeq	r6, [r1], -r8
   165e8:	andeq	r6, r1, r0, ror r7
   165ec:	andeq	r6, r1, r0, ror r7
   165f0:	andeq	r6, r1, r0, ror r7
   165f4:	andeq	r6, r1, r0, ror r7
   165f8:	andeq	r6, r1, r0, ror #17
   165fc:	andeq	r6, r1, r0, asr #20
   16600:	strdeq	r6, [r1], -r8
   16604:	strdeq	r6, [r1], -r8
   16608:	strdeq	r6, [r1], -r8
   1660c:	strdeq	r6, [r1], -r8
   16610:	strdeq	r6, [r1], -r8
   16614:	strdeq	r6, [r1], -r8
   16618:	strdeq	r6, [r1], -r8
   1661c:	strdeq	r6, [r1], -r8
   16620:	strdeq	r6, [r1], -r8
   16624:	strdeq	r6, [r1], -r8
   16628:	strdeq	r6, [r1], -r8
   1662c:	strdeq	r6, [r1], -r8
   16630:	strdeq	r6, [r1], -r8
   16634:	strdeq	r6, [r1], -r8
   16638:	strdeq	r6, [r1], -r8
   1663c:	strdeq	r6, [r1], -r8
   16640:	strdeq	r6, [r1], -r8
   16644:	strdeq	r6, [r1], -r8
   16648:	strdeq	r6, [r1], -r8
   1664c:	strdeq	r6, [r1], -r8
   16650:	strdeq	r6, [r1], -r8
   16654:	strdeq	r6, [r1], -r8
   16658:	strdeq	r6, [r1], -r8
   1665c:	strdeq	r6, [r1], -r8
   16660:	strdeq	r6, [r1], -r8
   16664:	strdeq	r6, [r1], -r8
   16668:	andeq	r6, r1, r0, ror r7
   1666c:	andeq	r6, r1, r4, lsr #15
   16670:	strdeq	r6, [r1], -r8
   16674:	andeq	r6, r1, r0, ror r7
   16678:	strdeq	r6, [r1], -r8
   1667c:	andeq	r6, r1, r0, ror r7
   16680:	strdeq	r6, [r1], -r8
   16684:	strdeq	r6, [r1], -r8
   16688:	strdeq	r6, [r1], -r8
   1668c:	strdeq	r6, [r1], -r8
   16690:	strdeq	r6, [r1], -r8
   16694:	strdeq	r6, [r1], -r8
   16698:	strdeq	r6, [r1], -r8
   1669c:	strdeq	r6, [r1], -r8
   166a0:	strdeq	r6, [r1], -r8
   166a4:	strdeq	r6, [r1], -r8
   166a8:	strdeq	r6, [r1], -r8
   166ac:	strdeq	r6, [r1], -r8
   166b0:	strdeq	r6, [r1], -r8
   166b4:	strdeq	r6, [r1], -r8
   166b8:	strdeq	r6, [r1], -r8
   166bc:	strdeq	r6, [r1], -r8
   166c0:	strdeq	r6, [r1], -r8
   166c4:	strdeq	r6, [r1], -r8
   166c8:	strdeq	r6, [r1], -r8
   166cc:	strdeq	r6, [r1], -r8
   166d0:	strdeq	r6, [r1], -r8
   166d4:	strdeq	r6, [r1], -r8
   166d8:	strdeq	r6, [r1], -r8
   166dc:	strdeq	r6, [r1], -r8
   166e0:	strdeq	r6, [r1], -r8
   166e4:	strdeq	r6, [r1], -r8
   166e8:	andeq	r6, r1, r8, lsr r7
   166ec:	andeq	r6, r1, r0, ror r7
   166f0:	andeq	r6, r1, r8, lsr r7
   166f4:	andeq	r6, r1, r0, ror #14
   166f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   166fc:	tst	r0, #1
   16700:	bne	169b8 <__assert_fail@plt+0x5684>
   16704:	ldr	r1, [fp, #16]
   16708:	ubfx	r0, r6, #5, #3
   1670c:	mov	r2, #1
   16710:	ldr	r0, [r1, r0, lsl #2]
   16714:	and	r1, r6, #31
   16718:	tst	r0, r2, lsl r1
   1671c:	beq	169b8 <__assert_fail@plt+0x5684>
   16720:	mov	r0, r6
   16724:	mov	r1, r8
   16728:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1672c:	tst	r2, #1
   16730:	beq	169d8 <__assert_fail@plt+0x56a4>
   16734:	b	17134 <__assert_fail@plt+0x5e00>
   16738:	cmp	r7, #1
   1673c:	beq	16760 <__assert_fail@plt+0x542c>
   16740:	mov	r8, #0
   16744:	cmn	r7, #1
   16748:	bne	169a4 <__assert_fail@plt+0x5670>
   1674c:	ldrb	r0, [lr, #1]
   16750:	cmp	r0, #0
   16754:	beq	16760 <__assert_fail@plt+0x542c>
   16758:	mvn	r7, #0
   1675c:	b	169a4 <__assert_fail@plt+0x5670>
   16760:	mov	r8, #0
   16764:	cmp	sl, #0
   16768:	bne	169a4 <__assert_fail@plt+0x5670>
   1676c:	mov	r1, #1
   16770:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16774:	cmp	r0, #2
   16778:	bne	16790 <__assert_fail@plt+0x545c>
   1677c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16780:	mov	r8, r1
   16784:	tst	r0, #1
   16788:	beq	166f8 <__assert_fail@plt+0x53c4>
   1678c:	b	17134 <__assert_fail@plt+0x5e00>
   16790:	mov	r8, r1
   16794:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16798:	tst	r0, #1
   1679c:	beq	16704 <__assert_fail@plt+0x53d0>
   167a0:	b	169b8 <__assert_fail@plt+0x5684>
   167a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167a8:	cmp	r0, #2
   167ac:	bne	16a6c <__assert_fail@plt+0x5738>
   167b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   167b4:	tst	r0, #1
   167b8:	bne	17134 <__assert_fail@plt+0x5e00>
   167bc:	mov	r0, #0
   167c0:	str	r0, [fp, #-56]	; 0xffffffc8
   167c4:	b	16a84 <__assert_fail@plt+0x5750>
   167c8:	mov	r0, #102	; 0x66
   167cc:	b	16af4 <__assert_fail@plt+0x57c0>
   167d0:	mov	r2, #116	; 0x74
   167d4:	b	167e4 <__assert_fail@plt+0x54b0>
   167d8:	mov	r0, #98	; 0x62
   167dc:	b	16af4 <__assert_fail@plt+0x57c0>
   167e0:	mov	r2, #114	; 0x72
   167e4:	ldr	r0, [sp, #64]	; 0x40
   167e8:	tst	r0, #1
   167ec:	mov	r0, r2
   167f0:	bne	16af4 <__assert_fail@plt+0x57c0>
   167f4:	b	17134 <__assert_fail@plt+0x5e00>
   167f8:	ldr	r0, [sp, #88]	; 0x58
   167fc:	tst	r0, #1
   16800:	beq	16b14 <__assert_fail@plt+0x57e0>
   16804:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16808:	tst	r0, #1
   1680c:	bne	17270 <__assert_fail@plt+0x5f3c>
   16810:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16814:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16818:	subs	r0, r0, #2
   1681c:	movwne	r0, #1
   16820:	orr	r0, r0, r1
   16824:	tst	r0, #1
   16828:	bne	16864 <__assert_fail@plt+0x5530>
   1682c:	cmp	r9, r5
   16830:	movcc	r0, #39	; 0x27
   16834:	strbcc	r0, [ip, r9]
   16838:	add	r0, r9, #1
   1683c:	cmp	r0, r5
   16840:	movcc	r1, #36	; 0x24
   16844:	strbcc	r1, [ip, r0]
   16848:	add	r0, r9, #2
   1684c:	add	r9, r9, #3
   16850:	cmp	r0, r5
   16854:	movcc	r1, #39	; 0x27
   16858:	strbcc	r1, [ip, r0]
   1685c:	mov	r0, #1
   16860:	str	r0, [fp, #-52]	; 0xffffffcc
   16864:	mov	r1, #1
   16868:	cmp	r9, r5
   1686c:	mov	r8, #0
   16870:	mov	r6, #48	; 0x30
   16874:	str	r1, [fp, #-56]	; 0xffffffc8
   16878:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1687c:	movcc	r0, #92	; 0x5c
   16880:	strbcc	r0, [ip, r9]
   16884:	add	r0, r9, #1
   16888:	cmp	r1, #2
   1688c:	beq	16ce0 <__assert_fail@plt+0x59ac>
   16890:	add	r1, sl, #1
   16894:	cmp	r1, r7
   16898:	bcs	16ce0 <__assert_fail@plt+0x59ac>
   1689c:	ldrb	r1, [lr, r1]
   168a0:	sub	r1, r1, #48	; 0x30
   168a4:	uxtb	r1, r1
   168a8:	cmp	r1, #9
   168ac:	bhi	16ce0 <__assert_fail@plt+0x59ac>
   168b0:	cmp	r0, r5
   168b4:	movcc	r1, #48	; 0x30
   168b8:	strbcc	r1, [ip, r0]
   168bc:	add	r0, r9, #2
   168c0:	add	r9, r9, #3
   168c4:	cmp	r0, r5
   168c8:	movcc	r1, #48	; 0x30
   168cc:	strbcc	r1, [ip, r0]
   168d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168d4:	tst	r0, #1
   168d8:	beq	16704 <__assert_fail@plt+0x53d0>
   168dc:	b	169b8 <__assert_fail@plt+0x5684>
   168e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   168e4:	mov	r6, #63	; 0x3f
   168e8:	cmp	r0, #5
   168ec:	beq	16cf4 <__assert_fail@plt+0x59c0>
   168f0:	mov	r1, #0
   168f4:	cmp	r0, #2
   168f8:	str	r1, [fp, #-56]	; 0xffffffc8
   168fc:	bne	16dbc <__assert_fail@plt+0x5a88>
   16900:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16904:	mov	r8, #0
   16908:	tst	r0, #1
   1690c:	beq	166f8 <__assert_fail@plt+0x53c4>
   16910:	b	17134 <__assert_fail@plt+0x5e00>
   16914:	mov	r0, #118	; 0x76
   16918:	b	16af4 <__assert_fail@plt+0x57c0>
   1691c:	mov	r0, #1
   16920:	mov	r6, #39	; 0x27
   16924:	str	r0, [sp, #60]	; 0x3c
   16928:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1692c:	cmp	r0, #2
   16930:	bne	16b34 <__assert_fail@plt+0x5800>
   16934:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16938:	tst	r0, #1
   1693c:	bne	17134 <__assert_fail@plt+0x5e00>
   16940:	ldr	r2, [sp, #56]	; 0x38
   16944:	clz	r1, r5
   16948:	mov	r8, #1
   1694c:	lsr	r1, r1, #5
   16950:	cmp	r2, #0
   16954:	mov	r0, r2
   16958:	movwne	r0, #1
   1695c:	orrs	r0, r0, r1
   16960:	moveq	r2, r5
   16964:	moveq	r5, r0
   16968:	cmp	r9, r5
   1696c:	str	r2, [sp, #56]	; 0x38
   16970:	movcc	r0, #39	; 0x27
   16974:	strbcc	r0, [ip, r9]
   16978:	add	r0, r9, #1
   1697c:	cmp	r0, r5
   16980:	movcc	r1, #92	; 0x5c
   16984:	strbcc	r1, [ip, r0]
   16988:	add	r0, r9, #2
   1698c:	add	r9, r9, #3
   16990:	cmp	r0, r5
   16994:	movcc	r1, #39	; 0x27
   16998:	strbcc	r1, [ip, r0]
   1699c:	mov	r0, #0
   169a0:	str	r0, [fp, #-52]	; 0xffffffcc
   169a4:	mov	r0, #0
   169a8:	str	r0, [fp, #-56]	; 0xffffffc8
   169ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   169b0:	tst	r0, #1
   169b4:	beq	16704 <__assert_fail@plt+0x53d0>
   169b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   169bc:	mov	r1, r8
   169c0:	cmp	r0, #0
   169c4:	mov	r0, r6
   169c8:	beq	16a8c <__assert_fail@plt+0x5758>
   169cc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   169d0:	tst	r2, #1
   169d4:	bne	17134 <__assert_fail@plt+0x5e00>
   169d8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   169dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   169e0:	subs	r2, r2, #2
   169e4:	movwne	r2, #1
   169e8:	orr	r2, r2, r3
   169ec:	tst	r2, #1
   169f0:	bne	16a2c <__assert_fail@plt+0x56f8>
   169f4:	cmp	r9, r5
   169f8:	movcc	r2, #39	; 0x27
   169fc:	strbcc	r2, [ip, r9]
   16a00:	add	r2, r9, #1
   16a04:	cmp	r2, r5
   16a08:	movcc	r3, #36	; 0x24
   16a0c:	strbcc	r3, [ip, r2]
   16a10:	add	r2, r9, #2
   16a14:	add	r9, r9, #3
   16a18:	cmp	r2, r5
   16a1c:	movcc	r3, #39	; 0x27
   16a20:	strbcc	r3, [ip, r2]
   16a24:	mov	r2, #1
   16a28:	str	r2, [fp, #-52]	; 0xffffffcc
   16a2c:	cmp	r9, r5
   16a30:	movcc	r2, #92	; 0x5c
   16a34:	strbcc	r2, [ip, r9]
   16a38:	add	r9, r9, #1
   16a3c:	b	16ad4 <__assert_fail@plt+0x57a0>
   16a40:	ldr	r0, [sp, #40]	; 0x28
   16a44:	cmp	r0, #1
   16a48:	bne	16b48 <__assert_fail@plt+0x5814>
   16a4c:	bl	111d8 <__ctype_b_loc@plt>
   16a50:	ldr	r0, [r0]
   16a54:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16a58:	mov	r1, #1
   16a5c:	add	r0, r0, r6, lsl #1
   16a60:	ldrb	r0, [r0, #1]
   16a64:	ubfx	r8, r0, #6, #1
   16a68:	b	16ea0 <__assert_fail@plt+0x5b6c>
   16a6c:	ldr	r1, [sp, #48]	; 0x30
   16a70:	mov	r0, #0
   16a74:	str	r0, [fp, #-56]	; 0xffffffc8
   16a78:	mov	r0, #92	; 0x5c
   16a7c:	cmp	r1, #0
   16a80:	beq	16af4 <__assert_fail@plt+0x57c0>
   16a84:	mov	r6, #92	; 0x5c
   16a88:	mov	r8, #0
   16a8c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16a90:	cmp	r0, #0
   16a94:	bne	16acc <__assert_fail@plt+0x5798>
   16a98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16a9c:	tst	r0, #1
   16aa0:	beq	16acc <__assert_fail@plt+0x5798>
   16aa4:	cmp	r9, r5
   16aa8:	movcc	r0, #39	; 0x27
   16aac:	strbcc	r0, [ip, r9]
   16ab0:	add	r0, r9, #1
   16ab4:	add	r9, r9, #2
   16ab8:	cmp	r0, r5
   16abc:	movcc	r1, #39	; 0x27
   16ac0:	strbcc	r1, [ip, r0]
   16ac4:	mov	r0, #0
   16ac8:	str	r0, [fp, #-52]	; 0xffffffcc
   16acc:	mov	r1, r8
   16ad0:	mov	r0, r6
   16ad4:	cmp	r9, r5
   16ad8:	and	r4, r4, r1
   16adc:	strbcc	r0, [ip, r9]
   16ae0:	add	r9, r9, #1
   16ae4:	add	sl, sl, #1
   16ae8:	cmn	r7, #1
   16aec:	bne	163e4 <__assert_fail@plt+0x50b0>
   16af0:	b	163f0 <__assert_fail@plt+0x50bc>
   16af4:	mov	r1, #0
   16af8:	mov	r8, #0
   16afc:	str	r1, [fp, #-56]	; 0xffffffc8
   16b00:	ldr	r1, [sp, #88]	; 0x58
   16b04:	tst	r1, #1
   16b08:	mov	r1, #0
   16b0c:	beq	166f8 <__assert_fail@plt+0x53c4>
   16b10:	b	169cc <__assert_fail@plt+0x5698>
   16b14:	ldr	r0, [sp, #36]	; 0x24
   16b18:	mov	r6, #0
   16b1c:	mov	r8, #0
   16b20:	cmp	r0, #0
   16b24:	mov	r0, #0
   16b28:	str	r0, [fp, #-56]	; 0xffffffc8
   16b2c:	bne	16ae4 <__assert_fail@plt+0x57b0>
   16b30:	b	166f8 <__assert_fail@plt+0x53c4>
   16b34:	mov	r8, #1
   16b38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16b3c:	tst	r0, #1
   16b40:	beq	16704 <__assert_fail@plt+0x53d0>
   16b44:	b	169b8 <__assert_fail@plt+0x5684>
   16b48:	mov	r0, #0
   16b4c:	cmn	r7, #1
   16b50:	str	r0, [fp, #-36]	; 0xffffffdc
   16b54:	str	r0, [fp, #-40]	; 0xffffffd8
   16b58:	bne	16b6c <__assert_fail@plt+0x5838>
   16b5c:	mov	r0, lr
   16b60:	bl	111fc <strlen@plt>
   16b64:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16b68:	mov	r7, r0
   16b6c:	ldr	r0, [sp, #44]	; 0x2c
   16b70:	str	r4, [sp, #84]	; 0x54
   16b74:	str	r5, [sp, #28]
   16b78:	cmp	r0, #0
   16b7c:	beq	16dd0 <__assert_fail@plt+0x5a9c>
   16b80:	ldr	r0, [sp, #80]	; 0x50
   16b84:	mov	r8, #1
   16b88:	mov	r5, #0
   16b8c:	add	r0, r0, sl
   16b90:	str	r0, [sp, #24]
   16b94:	sub	r0, fp, #40	; 0x28
   16b98:	mov	r3, r0
   16b9c:	b	16bd8 <__assert_fail@plt+0x58a4>
   16ba0:	ldr	r5, [sp, #68]	; 0x44
   16ba4:	add	r5, r0, r5
   16ba8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16bac:	bl	11124 <iswprint@plt>
   16bb0:	cmp	r0, #0
   16bb4:	sub	r4, fp, #40	; 0x28
   16bb8:	movwne	r0, #1
   16bbc:	and	r8, r8, r0
   16bc0:	mov	r0, r4
   16bc4:	bl	110e8 <mbsinit@plt>
   16bc8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16bcc:	mov	r3, r4
   16bd0:	cmp	r0, #0
   16bd4:	bne	16e94 <__assert_fail@plt+0x5b60>
   16bd8:	str	r5, [sp, #68]	; 0x44
   16bdc:	add	r5, r5, sl
   16be0:	sub	r0, fp, #44	; 0x2c
   16be4:	add	r1, lr, r5
   16be8:	sub	r2, r7, r5
   16bec:	bl	19a00 <__assert_fail@plt+0x86cc>
   16bf0:	cmn	r0, #2
   16bf4:	beq	16e54 <__assert_fail@plt+0x5b20>
   16bf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   16bfc:	cmn	r0, #1
   16c00:	beq	16e48 <__assert_fail@plt+0x5b14>
   16c04:	cmp	r0, #0
   16c08:	beq	16e4c <__assert_fail@plt+0x5b18>
   16c0c:	cmp	r0, #2
   16c10:	bcc	16ba0 <__assert_fail@plt+0x586c>
   16c14:	ldr	r1, [sp, #68]	; 0x44
   16c18:	ldr	r2, [sp, #24]
   16c1c:	add	r1, r2, r1
   16c20:	sub	r2, r0, #1
   16c24:	ldrb	r3, [r1]
   16c28:	sub	r3, r3, #91	; 0x5b
   16c2c:	cmp	r3, #33	; 0x21
   16c30:	bls	16c50 <__assert_fail@plt+0x591c>
   16c34:	add	r1, r1, #1
   16c38:	subs	r2, r2, #1
   16c3c:	beq	16ba0 <__assert_fail@plt+0x586c>
   16c40:	ldrb	r3, [r1]
   16c44:	sub	r3, r3, #91	; 0x5b
   16c48:	cmp	r3, #33	; 0x21
   16c4c:	bhi	16c34 <__assert_fail@plt+0x5900>
   16c50:	add	r5, pc, #0
   16c54:	ldr	pc, [r5, r3, lsl #2]
   16c58:	andeq	r7, r1, ip, ror #2
   16c5c:	andeq	r7, r1, ip, ror #2
   16c60:	andeq	r6, r1, r4, lsr ip
   16c64:	andeq	r7, r1, ip, ror #2
   16c68:	andeq	r6, r1, r4, lsr ip
   16c6c:	andeq	r7, r1, ip, ror #2
   16c70:	andeq	r6, r1, r4, lsr ip
   16c74:	andeq	r6, r1, r4, lsr ip
   16c78:	andeq	r6, r1, r4, lsr ip
   16c7c:	andeq	r6, r1, r4, lsr ip
   16c80:	andeq	r6, r1, r4, lsr ip
   16c84:	andeq	r6, r1, r4, lsr ip
   16c88:	andeq	r6, r1, r4, lsr ip
   16c8c:	andeq	r6, r1, r4, lsr ip
   16c90:	andeq	r6, r1, r4, lsr ip
   16c94:	andeq	r6, r1, r4, lsr ip
   16c98:	andeq	r6, r1, r4, lsr ip
   16c9c:	andeq	r6, r1, r4, lsr ip
   16ca0:	andeq	r6, r1, r4, lsr ip
   16ca4:	andeq	r6, r1, r4, lsr ip
   16ca8:	andeq	r6, r1, r4, lsr ip
   16cac:	andeq	r6, r1, r4, lsr ip
   16cb0:	andeq	r6, r1, r4, lsr ip
   16cb4:	andeq	r6, r1, r4, lsr ip
   16cb8:	andeq	r6, r1, r4, lsr ip
   16cbc:	andeq	r6, r1, r4, lsr ip
   16cc0:	andeq	r6, r1, r4, lsr ip
   16cc4:	andeq	r6, r1, r4, lsr ip
   16cc8:	andeq	r6, r1, r4, lsr ip
   16ccc:	andeq	r6, r1, r4, lsr ip
   16cd0:	andeq	r6, r1, r4, lsr ip
   16cd4:	andeq	r6, r1, r4, lsr ip
   16cd8:	andeq	r6, r1, r4, lsr ip
   16cdc:	andeq	r7, r1, ip, ror #2
   16ce0:	mov	r9, r0
   16ce4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16ce8:	tst	r0, #1
   16cec:	beq	16704 <__assert_fail@plt+0x53d0>
   16cf0:	b	169b8 <__assert_fail@plt+0x5684>
   16cf4:	mov	r0, #0
   16cf8:	str	r0, [fp, #-56]	; 0xffffffc8
   16cfc:	ldr	r0, [sp, #32]
   16d00:	cmp	r0, #0
   16d04:	beq	16dbc <__assert_fail@plt+0x5a88>
   16d08:	add	r0, sl, #2
   16d0c:	mov	r1, r7
   16d10:	cmp	r0, r7
   16d14:	bcs	16dbc <__assert_fail@plt+0x5a88>
   16d18:	add	r1, sl, lr
   16d1c:	ldrb	r1, [r1, #1]
   16d20:	cmp	r1, #63	; 0x3f
   16d24:	bne	16dbc <__assert_fail@plt+0x5a88>
   16d28:	ldrb	r8, [lr, r0]
   16d2c:	sub	r2, r8, #33	; 0x21
   16d30:	cmp	r2, #29
   16d34:	bhi	16dbc <__assert_fail@plt+0x5a88>
   16d38:	mov	r1, r4
   16d3c:	movw	r4, #20929	; 0x51c1
   16d40:	mov	r3, #1
   16d44:	movt	r4, #14336	; 0x3800
   16d48:	tst	r4, r3, lsl r2
   16d4c:	beq	17078 <__assert_fail@plt+0x5d44>
   16d50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16d54:	tst	r2, #1
   16d58:	bne	17134 <__assert_fail@plt+0x5e00>
   16d5c:	cmp	r9, r5
   16d60:	mov	r6, r8
   16d64:	mov	r4, r1
   16d68:	mov	sl, r0
   16d6c:	mov	r8, #0
   16d70:	movcc	r2, #63	; 0x3f
   16d74:	strbcc	r2, [ip, r9]
   16d78:	add	r2, r9, #1
   16d7c:	cmp	r2, r5
   16d80:	movcc	r3, #34	; 0x22
   16d84:	strbcc	r3, [ip, r2]
   16d88:	add	r2, r9, #2
   16d8c:	cmp	r2, r5
   16d90:	movcc	r3, #34	; 0x22
   16d94:	strbcc	r3, [ip, r2]
   16d98:	add	r2, r9, #3
   16d9c:	add	r9, r9, #4
   16da0:	cmp	r2, r5
   16da4:	movcc	r3, #63	; 0x3f
   16da8:	strbcc	r3, [ip, r2]
   16dac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16db0:	tst	r0, #1
   16db4:	beq	16704 <__assert_fail@plt+0x53d0>
   16db8:	b	169b8 <__assert_fail@plt+0x5684>
   16dbc:	mov	r8, #0
   16dc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16dc4:	tst	r0, #1
   16dc8:	beq	16704 <__assert_fail@plt+0x53d0>
   16dcc:	b	169b8 <__assert_fail@plt+0x5684>
   16dd0:	mov	r8, #1
   16dd4:	mov	r5, #0
   16dd8:	sub	r4, fp, #40	; 0x28
   16ddc:	str	r5, [sp, #68]	; 0x44
   16de0:	add	r5, r5, sl
   16de4:	sub	r0, fp, #44	; 0x2c
   16de8:	mov	r3, r4
   16dec:	add	r1, lr, r5
   16df0:	sub	r2, r7, r5
   16df4:	bl	19a00 <__assert_fail@plt+0x86cc>
   16df8:	cmn	r0, #2
   16dfc:	beq	16e54 <__assert_fail@plt+0x5b20>
   16e00:	cmn	r0, #1
   16e04:	beq	16e48 <__assert_fail@plt+0x5b14>
   16e08:	ldr	r5, [sp, #68]	; 0x44
   16e0c:	cmp	r0, #0
   16e10:	beq	16e90 <__assert_fail@plt+0x5b5c>
   16e14:	add	r5, r0, r5
   16e18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16e1c:	bl	11124 <iswprint@plt>
   16e20:	cmp	r0, #0
   16e24:	sub	r4, fp, #40	; 0x28
   16e28:	movwne	r0, #1
   16e2c:	and	r8, r8, r0
   16e30:	mov	r0, r4
   16e34:	bl	110e8 <mbsinit@plt>
   16e38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16e3c:	cmp	r0, #0
   16e40:	beq	16ddc <__assert_fail@plt+0x5aa8>
   16e44:	b	16e94 <__assert_fail@plt+0x5b60>
   16e48:	mov	r8, #0
   16e4c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16e50:	b	16e88 <__assert_fail@plt+0x5b54>
   16e54:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16e58:	mov	r8, #0
   16e5c:	cmp	r5, r7
   16e60:	bcs	16e88 <__assert_fail@plt+0x5b54>
   16e64:	ldrb	r0, [lr, r5]
   16e68:	cmp	r0, #0
   16e6c:	beq	16e88 <__assert_fail@plt+0x5b54>
   16e70:	ldr	r0, [sp, #68]	; 0x44
   16e74:	add	r0, r0, #1
   16e78:	add	r5, r0, sl
   16e7c:	str	r0, [sp, #68]	; 0x44
   16e80:	cmp	r5, r7
   16e84:	bcc	16e64 <__assert_fail@plt+0x5b30>
   16e88:	ldr	r5, [sp, #68]	; 0x44
   16e8c:	b	16e94 <__assert_fail@plt+0x5b60>
   16e90:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16e94:	mov	r1, r5
   16e98:	ldr	r5, [sp, #28]
   16e9c:	ldr	r4, [sp, #84]	; 0x54
   16ea0:	ldr	r0, [sp, #52]	; 0x34
   16ea4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ea8:	cmp	r1, #1
   16eac:	orr	r2, r8, r0
   16eb0:	mov	r0, r1
   16eb4:	bhi	16ec0 <__assert_fail@plt+0x5b8c>
   16eb8:	tst	r2, #1
   16ebc:	bne	166f8 <__assert_fail@plt+0x53c4>
   16ec0:	add	r0, r0, sl
   16ec4:	str	r2, [sp, #84]	; 0x54
   16ec8:	str	r0, [fp, #-56]	; 0xffffffc8
   16ecc:	mov	r0, #0
   16ed0:	tst	r2, #1
   16ed4:	bne	16fb4 <__assert_fail@plt+0x5c80>
   16ed8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16edc:	tst	r1, #1
   16ee0:	bne	17134 <__assert_fail@plt+0x5e00>
   16ee4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16ee8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16eec:	subs	r2, r1, #2
   16ef0:	movwne	r2, #1
   16ef4:	orr	r2, r2, r0
   16ef8:	tst	r2, #1
   16efc:	bne	16f38 <__assert_fail@plt+0x5c04>
   16f00:	cmp	r9, r5
   16f04:	add	r2, r9, #1
   16f08:	mov	r0, #1
   16f0c:	movcc	r1, #39	; 0x27
   16f10:	str	r0, [fp, #-52]	; 0xffffffcc
   16f14:	strbcc	r1, [ip, r9]
   16f18:	cmp	r2, r5
   16f1c:	movcc	r1, #36	; 0x24
   16f20:	strbcc	r1, [ip, r2]
   16f24:	add	r2, r9, #2
   16f28:	add	r9, r9, #3
   16f2c:	cmp	r2, r5
   16f30:	movcc	r1, #39	; 0x27
   16f34:	strbcc	r1, [ip, r2]
   16f38:	cmp	r9, r5
   16f3c:	add	r2, r9, #1
   16f40:	movcc	r1, #92	; 0x5c
   16f44:	strbcc	r1, [ip, r9]
   16f48:	cmp	r2, r5
   16f4c:	bcs	16f60 <__assert_fail@plt+0x5c2c>
   16f50:	uxtb	r3, r6
   16f54:	mov	r1, #48	; 0x30
   16f58:	orr	r3, r1, r3, lsr #6
   16f5c:	strb	r3, [ip, r2]
   16f60:	add	r2, r9, #2
   16f64:	add	r9, r9, #3
   16f68:	cmp	r2, r5
   16f6c:	lsrcc	r3, r6, #3
   16f70:	movcc	r1, #6
   16f74:	bficc	r3, r1, #3, #29
   16f78:	mov	r1, #6
   16f7c:	bfi	r6, r1, #3, #29
   16f80:	strbcc	r3, [ip, r2]
   16f84:	mov	r2, #1
   16f88:	b	16fe8 <__assert_fail@plt+0x5cb4>
   16f8c:	ldr	r1, [sp, #80]	; 0x50
   16f90:	cmp	r9, r2
   16f94:	mov	r5, r2
   16f98:	ldr	r2, [sp, #84]	; 0x54
   16f9c:	strbcc	r6, [ip, r9]
   16fa0:	add	r9, r9, #1
   16fa4:	ldrb	r6, [r1, sl]
   16fa8:	mov	sl, r3
   16fac:	tst	r2, #1
   16fb0:	beq	16ed8 <__assert_fail@plt+0x5ba4>
   16fb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   16fb8:	tst	r1, #1
   16fbc:	beq	16fdc <__assert_fail@plt+0x5ca8>
   16fc0:	cmp	r9, r5
   16fc4:	mov	r2, r0
   16fc8:	movcc	r1, #92	; 0x5c
   16fcc:	strbcc	r1, [ip, r9]
   16fd0:	add	r9, r9, #1
   16fd4:	mov	r1, #0
   16fd8:	b	16fe4 <__assert_fail@plt+0x5cb0>
   16fdc:	mov	r1, #0
   16fe0:	mov	r2, r0
   16fe4:	str	r1, [fp, #-48]	; 0xffffffd0
   16fe8:	mov	r0, r2
   16fec:	and	r1, r2, #1
   16ff0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ff4:	add	r3, sl, #1
   16ff8:	cmp	r2, r3
   16ffc:	bls	1705c <__assert_fail@plt+0x5d28>
   17000:	mov	r2, r5
   17004:	ldr	r5, [fp, #-52]	; 0xffffffcc
   17008:	cmp	r1, #0
   1700c:	movwne	r1, #1
   17010:	mvn	r5, r5
   17014:	orr	r5, r5, r1
   17018:	tst	r5, #1
   1701c:	bne	16f8c <__assert_fail@plt+0x5c58>
   17020:	cmp	r9, r2
   17024:	movcc	r5, r4
   17028:	movcc	r4, #39	; 0x27
   1702c:	strbcc	r4, [ip, r9]
   17030:	movcc	r4, r5
   17034:	add	r5, r9, #1
   17038:	add	r9, r9, #2
   1703c:	cmp	r5, r2
   17040:	movcc	r1, r4
   17044:	movcc	r4, #39	; 0x27
   17048:	strbcc	r4, [ip, r5]
   1704c:	movcc	r4, r1
   17050:	mov	r1, #0
   17054:	str	r1, [fp, #-52]	; 0xffffffcc
   17058:	b	16f8c <__assert_fail@plt+0x5c58>
   1705c:	cmp	r1, #0
   17060:	movwne	r1, #1
   17064:	str	r1, [fp, #-56]	; 0xffffffc8
   17068:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1706c:	cmp	r0, #0
   17070:	beq	16a98 <__assert_fail@plt+0x5764>
   17074:	b	16acc <__assert_fail@plt+0x5798>
   17078:	mov	r8, #0
   1707c:	mov	r4, r1
   17080:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17084:	tst	r0, #1
   17088:	beq	16704 <__assert_fail@plt+0x53d0>
   1708c:	b	169b8 <__assert_fail@plt+0x5684>
   17090:	mov	r7, sl
   17094:	b	1709c <__assert_fail@plt+0x5d68>
   17098:	mvn	r7, #0
   1709c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   170a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   170a4:	ldr	r2, [sp, #88]	; 0x58
   170a8:	eor	r0, r1, #2
   170ac:	orr	r0, r0, r9
   170b0:	clz	r0, r0
   170b4:	lsr	r0, r0, #5
   170b8:	tst	r3, r0
   170bc:	bne	17134 <__assert_fail@plt+0x5e00>
   170c0:	subs	r0, r1, #2
   170c4:	movwne	r0, #1
   170c8:	orr	r0, r3, r0
   170cc:	tst	r0, #1
   170d0:	ldreq	r0, [sp, #60]	; 0x3c
   170d4:	eoreq	r0, r0, #1
   170d8:	tsteq	r0, #1
   170dc:	bne	17210 <__assert_fail@plt+0x5edc>
   170e0:	tst	r4, #1
   170e4:	bne	171d4 <__assert_fail@plt+0x5ea0>
   170e8:	ldr	r6, [sp, #56]	; 0x38
   170ec:	mov	r8, #0
   170f0:	cmp	r6, #0
   170f4:	beq	1720c <__assert_fail@plt+0x5ed8>
   170f8:	mov	r1, #0
   170fc:	mov	r4, #2
   17100:	cmp	r5, #0
   17104:	mov	r0, r2
   17108:	mov	r3, #0
   1710c:	str	r1, [sp, #84]	; 0x54
   17110:	beq	15f58 <__assert_fail@plt+0x4c24>
   17114:	b	17210 <__assert_fail@plt+0x5edc>
   17118:	movw	r0, #46396	; 0xb53c
   1711c:	movt	r0, #1
   17120:	str	r0, [sp, #76]	; 0x4c
   17124:	mov	r9, #0
   17128:	tst	r8, #1
   1712c:	beq	161f0 <__assert_fail@plt+0x4ebc>
   17130:	b	16330 <__assert_fail@plt+0x4ffc>
   17134:	ldr	r1, [sp, #88]	; 0x58
   17138:	mov	r0, #2
   1713c:	tst	r1, #1
   17140:	movwne	r0, #4
   17144:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17148:	ldr	r1, [fp, #12]
   1714c:	cmp	r2, #2
   17150:	moveq	r2, r0
   17154:	b	1718c <__assert_fail@plt+0x5e58>
   17158:	ldr	ip, [fp, #-84]	; 0xffffffac
   1715c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17160:	ldr	r1, [fp, #12]
   17164:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17168:	b	1718c <__assert_fail@plt+0x5e58>
   1716c:	ldr	r1, [sp, #88]	; 0x58
   17170:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17174:	ldr	r5, [sp, #28]
   17178:	mov	r0, #2
   1717c:	tst	r1, #1
   17180:	ldr	r1, [fp, #12]
   17184:	movwne	r0, #4
   17188:	mov	r2, r0
   1718c:	mov	r0, #0
   17190:	bic	r1, r1, #2
   17194:	str	r2, [sp]
   17198:	mov	r2, lr
   1719c:	str	r0, [sp, #8]
   171a0:	ldr	r0, [sp, #72]	; 0x48
   171a4:	str	r1, [sp, #4]
   171a8:	mov	r1, r5
   171ac:	str	r0, [sp, #12]
   171b0:	ldr	r0, [sp, #76]	; 0x4c
   171b4:	str	r0, [sp, #16]
   171b8:	mov	r0, ip
   171bc:	mov	r3, r7
   171c0:	bl	15ecc <__assert_fail@plt+0x4b98>
   171c4:	mov	r9, r0
   171c8:	mov	r0, r9
   171cc:	sub	sp, fp, #28
   171d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171d4:	mov	r0, #5
   171d8:	ldr	r1, [sp, #56]	; 0x38
   171dc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   171e0:	str	r0, [sp]
   171e4:	ldr	r0, [fp, #12]
   171e8:	str	r0, [sp, #4]
   171ec:	ldr	r0, [fp, #16]
   171f0:	str	r0, [sp, #8]
   171f4:	ldr	r0, [sp, #72]	; 0x48
   171f8:	str	r0, [sp, #12]
   171fc:	ldr	r0, [sp, #76]	; 0x4c
   17200:	str	r0, [sp, #16]
   17204:	ldr	r0, [fp, #-84]	; 0xffffffac
   17208:	b	171bc <__assert_fail@plt+0x5e88>
   1720c:	mov	r3, #0
   17210:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17214:	cmp	r1, #0
   17218:	beq	17254 <__assert_fail@plt+0x5f20>
   1721c:	ldr	r2, [fp, #-84]	; 0xffffffac
   17220:	tst	r3, #1
   17224:	bne	17258 <__assert_fail@plt+0x5f24>
   17228:	ldrb	r0, [r1]
   1722c:	cmp	r0, #0
   17230:	beq	17258 <__assert_fail@plt+0x5f24>
   17234:	add	r1, r1, #1
   17238:	cmp	r9, r5
   1723c:	strbcc	r0, [r2, r9]
   17240:	add	r9, r9, #1
   17244:	ldrb	r0, [r1], #1
   17248:	cmp	r0, #0
   1724c:	bne	17238 <__assert_fail@plt+0x5f04>
   17250:	b	17258 <__assert_fail@plt+0x5f24>
   17254:	ldr	r2, [fp, #-84]	; 0xffffffac
   17258:	cmp	r9, r5
   1725c:	movcc	r0, #0
   17260:	strbcc	r0, [r2, r9]
   17264:	mov	r0, r9
   17268:	sub	sp, fp, #28
   1726c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17270:	mov	r0, #4
   17274:	b	17144 <__assert_fail@plt+0x5e10>
   17278:	bl	1131c <abort@plt>
   1727c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17280:	add	fp, sp, #28
   17284:	sub	sp, sp, #28
   17288:	movw	r5, #49712	; 0xc230
   1728c:	cmp	r2, #0
   17290:	mov	r4, r1
   17294:	mov	r7, r0
   17298:	str	r0, [sp, #20]
   1729c:	movt	r5, #2
   172a0:	movne	r5, r2
   172a4:	bl	11214 <__errno_location@plt>
   172a8:	mov	sl, r0
   172ac:	ldr	r2, [r5, #40]	; 0x28
   172b0:	ldr	r3, [r5, #44]	; 0x2c
   172b4:	ldm	r5, {r0, r1}
   172b8:	orr	r8, r1, #1
   172bc:	add	r9, r5, #8
   172c0:	mov	r1, #0
   172c4:	ldr	r6, [sl]
   172c8:	stm	sp, {r0, r8, r9}
   172cc:	mov	r0, #0
   172d0:	str	r2, [sp, #12]
   172d4:	str	r3, [sp, #16]
   172d8:	mov	r2, r7
   172dc:	mov	r3, r4
   172e0:	str	r6, [sp, #24]
   172e4:	mov	r6, r4
   172e8:	bl	15ecc <__assert_fail@plt+0x4b98>
   172ec:	add	r7, r0, #1
   172f0:	mov	r0, r7
   172f4:	bl	1835c <__assert_fail@plt+0x7028>
   172f8:	mov	r4, r0
   172fc:	ldr	r0, [r5]
   17300:	ldr	r2, [r5, #44]	; 0x2c
   17304:	ldr	r1, [r5, #40]	; 0x28
   17308:	mov	r3, r6
   1730c:	stm	sp, {r0, r8, r9}
   17310:	str	r2, [sp, #16]
   17314:	ldr	r2, [sp, #20]
   17318:	str	r1, [sp, #12]
   1731c:	mov	r0, r4
   17320:	mov	r1, r7
   17324:	bl	15ecc <__assert_fail@plt+0x4b98>
   17328:	ldr	r0, [sp, #24]
   1732c:	str	r0, [sl]
   17330:	mov	r0, r4
   17334:	sub	sp, fp, #28
   17338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1733c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17340:	add	fp, sp, #28
   17344:	sub	sp, sp, #36	; 0x24
   17348:	movw	r8, #49712	; 0xc230
   1734c:	cmp	r3, #0
   17350:	mov	r4, r2
   17354:	str	r2, [sp, #24]
   17358:	mov	r5, r1
   1735c:	mov	r6, r0
   17360:	str	r0, [sp, #20]
   17364:	movt	r8, #2
   17368:	movne	r8, r3
   1736c:	bl	11214 <__errno_location@plt>
   17370:	str	r0, [sp, #28]
   17374:	ldr	r1, [r8, #40]	; 0x28
   17378:	ldr	r2, [r8, #44]	; 0x2c
   1737c:	ldr	r7, [r0]
   17380:	cmp	r4, #0
   17384:	add	sl, r8, #8
   17388:	mov	r0, #0
   1738c:	ldm	r8, {r3, r9}
   17390:	orreq	r9, r9, #1
   17394:	stm	sp, {r3, r9, sl}
   17398:	str	r1, [sp, #12]
   1739c:	str	r2, [sp, #16]
   173a0:	mov	r1, #0
   173a4:	mov	r2, r6
   173a8:	mov	r3, r5
   173ac:	str	r7, [sp, #32]
   173b0:	mov	r7, r5
   173b4:	bl	15ecc <__assert_fail@plt+0x4b98>
   173b8:	add	r4, r0, #1
   173bc:	mov	r5, r0
   173c0:	mov	r0, r4
   173c4:	bl	1835c <__assert_fail@plt+0x7028>
   173c8:	mov	r6, r0
   173cc:	ldr	r0, [r8]
   173d0:	ldr	r2, [r8, #44]	; 0x2c
   173d4:	ldr	r1, [r8, #40]	; 0x28
   173d8:	mov	r3, r7
   173dc:	stm	sp, {r0, r9, sl}
   173e0:	str	r2, [sp, #16]
   173e4:	ldr	r2, [sp, #20]
   173e8:	str	r1, [sp, #12]
   173ec:	mov	r0, r6
   173f0:	mov	r1, r4
   173f4:	bl	15ecc <__assert_fail@plt+0x4b98>
   173f8:	ldr	r0, [sp, #24]
   173fc:	ldr	r1, [sp, #32]
   17400:	ldr	r2, [sp, #28]
   17404:	cmp	r0, #0
   17408:	str	r1, [r2]
   1740c:	strne	r5, [r0]
   17410:	mov	r0, r6
   17414:	sub	sp, fp, #28
   17418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1741c:	push	{r4, r5, r6, r7, fp, lr}
   17420:	add	fp, sp, #16
   17424:	movw	r4, #49480	; 0xc148
   17428:	movt	r4, #2
   1742c:	ldrd	r6, [r4]
   17430:	cmp	r7, #2
   17434:	blt	17460 <__assert_fail@plt+0x612c>
   17438:	add	r5, r6, #12
   1743c:	mov	r7, #0
   17440:	ldr	r0, [r5, r7, lsl #3]
   17444:	bl	15920 <__assert_fail@plt+0x45ec>
   17448:	ldr	r1, [r4, #4]
   1744c:	add	r2, r7, #2
   17450:	add	r0, r7, #1
   17454:	mov	r7, r0
   17458:	cmp	r2, r1
   1745c:	blt	17440 <__assert_fail@plt+0x610c>
   17460:	ldr	r0, [r6, #4]
   17464:	movw	r5, #49760	; 0xc260
   17468:	movt	r5, #2
   1746c:	cmp	r0, r5
   17470:	beq	17484 <__assert_fail@plt+0x6150>
   17474:	bl	15920 <__assert_fail@plt+0x45ec>
   17478:	mov	r0, #256	; 0x100
   1747c:	str	r0, [r4, #8]
   17480:	str	r5, [r4, #12]
   17484:	add	r5, r4, #8
   17488:	cmp	r6, r5
   1748c:	beq	1749c <__assert_fail@plt+0x6168>
   17490:	mov	r0, r6
   17494:	bl	15920 <__assert_fail@plt+0x45ec>
   17498:	str	r5, [r4]
   1749c:	mov	r0, #1
   174a0:	str	r0, [r4, #4]
   174a4:	pop	{r4, r5, r6, r7, fp, pc}
   174a8:	movw	r3, #49712	; 0xc230
   174ac:	mvn	r2, #0
   174b0:	movt	r3, #2
   174b4:	b	174b8 <__assert_fail@plt+0x6184>
   174b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174bc:	add	fp, sp, #28
   174c0:	sub	sp, sp, #44	; 0x2c
   174c4:	mov	r7, r3
   174c8:	str	r2, [sp, #36]	; 0x24
   174cc:	str	r1, [sp, #32]
   174d0:	mov	r5, r0
   174d4:	bl	11214 <__errno_location@plt>
   174d8:	cmp	r5, #0
   174dc:	bmi	17644 <__assert_fail@plt+0x6310>
   174e0:	cmn	r5, #-2147483647	; 0x80000001
   174e4:	beq	17644 <__assert_fail@plt+0x6310>
   174e8:	movw	r8, #49480	; 0xc148
   174ec:	mov	r4, r0
   174f0:	ldr	r0, [r0]
   174f4:	movt	r8, #2
   174f8:	str	r4, [sp, #28]
   174fc:	ldr	r1, [r8, #4]
   17500:	ldr	r6, [r8]
   17504:	str	r0, [sp, #24]
   17508:	cmp	r1, r5
   1750c:	ble	17518 <__assert_fail@plt+0x61e4>
   17510:	mov	sl, r6
   17514:	b	17580 <__assert_fail@plt+0x624c>
   17518:	mov	r0, #8
   1751c:	add	r9, r8, #8
   17520:	str	r1, [fp, #-32]	; 0xffffffe0
   17524:	sub	r1, r5, r1
   17528:	mvn	r3, #-2147483648	; 0x80000000
   1752c:	str	r0, [sp]
   17530:	subs	r0, r6, r9
   17534:	add	r2, r1, #1
   17538:	sub	r1, fp, #32
   1753c:	movne	r0, r6
   17540:	bl	1855c <__assert_fail@plt+0x7228>
   17544:	mov	sl, r0
   17548:	cmp	r6, r9
   1754c:	str	r0, [r8]
   17550:	bne	1755c <__assert_fail@plt+0x6228>
   17554:	ldrd	r0, [r8, #8]
   17558:	stm	sl, {r0, r1}
   1755c:	ldr	r1, [r8, #4]
   17560:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17564:	add	r0, sl, r1, lsl #3
   17568:	sub	r1, r2, r1
   1756c:	lsl	r2, r1, #3
   17570:	mov	r1, #0
   17574:	bl	11244 <memset@plt>
   17578:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1757c:	str	r0, [r8, #4]
   17580:	mov	r9, sl
   17584:	ldm	r7, {r0, r1}
   17588:	orr	r8, r1, #1
   1758c:	add	r1, r7, #8
   17590:	ldr	r2, [r7, #40]	; 0x28
   17594:	ldr	r3, [r7, #44]	; 0x2c
   17598:	ldr	r6, [r9, r5, lsl #3]!
   1759c:	str	r1, [sp, #20]
   175a0:	ldr	r4, [r9, #4]!
   175a4:	stm	sp, {r0, r8}
   175a8:	add	r0, sp, #8
   175ac:	stm	r0, {r1, r2, r3}
   175b0:	ldr	r2, [sp, #32]
   175b4:	ldr	r3, [sp, #36]	; 0x24
   175b8:	mov	r1, r6
   175bc:	mov	r0, r4
   175c0:	bl	15ecc <__assert_fail@plt+0x4b98>
   175c4:	cmp	r6, r0
   175c8:	bhi	1762c <__assert_fail@plt+0x62f8>
   175cc:	add	r6, r0, #1
   175d0:	movw	r0, #49760	; 0xc260
   175d4:	movt	r0, #2
   175d8:	str	r6, [sl, r5, lsl #3]
   175dc:	cmp	r4, r0
   175e0:	beq	175ec <__assert_fail@plt+0x62b8>
   175e4:	mov	r0, r4
   175e8:	bl	15920 <__assert_fail@plt+0x45ec>
   175ec:	mov	r0, r6
   175f0:	bl	1835c <__assert_fail@plt+0x7028>
   175f4:	str	r0, [r9]
   175f8:	mov	r4, r0
   175fc:	add	r3, sp, #8
   17600:	ldr	r0, [r7]
   17604:	ldr	r1, [r7, #40]	; 0x28
   17608:	ldr	r2, [r7, #44]	; 0x2c
   1760c:	stm	sp, {r0, r8}
   17610:	ldr	r0, [sp, #20]
   17614:	stm	r3, {r0, r1, r2}
   17618:	ldr	r2, [sp, #32]
   1761c:	ldr	r3, [sp, #36]	; 0x24
   17620:	mov	r0, r4
   17624:	mov	r1, r6
   17628:	bl	15ecc <__assert_fail@plt+0x4b98>
   1762c:	ldr	r1, [sp, #24]
   17630:	ldr	r0, [sp, #28]
   17634:	str	r1, [r0]
   17638:	mov	r0, r4
   1763c:	sub	sp, fp, #28
   17640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17644:	bl	1131c <abort@plt>
   17648:	movw	r3, #49712	; 0xc230
   1764c:	movt	r3, #2
   17650:	b	174b8 <__assert_fail@plt+0x6184>
   17654:	movw	r3, #49712	; 0xc230
   17658:	mov	r1, r0
   1765c:	mov	r0, #0
   17660:	mvn	r2, #0
   17664:	movt	r3, #2
   17668:	b	174b8 <__assert_fail@plt+0x6184>
   1766c:	movw	r3, #49712	; 0xc230
   17670:	mov	r2, r1
   17674:	mov	r1, r0
   17678:	mov	r0, #0
   1767c:	movt	r3, #2
   17680:	b	174b8 <__assert_fail@plt+0x6184>
   17684:	push	{fp, lr}
   17688:	mov	fp, sp
   1768c:	sub	sp, sp, #48	; 0x30
   17690:	vmov.i32	q8, #0	; 0x00000000
   17694:	mov	ip, #32
   17698:	mov	r3, sp
   1769c:	mov	lr, r2
   176a0:	cmp	r1, #10
   176a4:	add	r2, r3, #16
   176a8:	vst1.64	{d16-d17}, [r3], ip
   176ac:	vst1.64	{d16-d17}, [r2]
   176b0:	vst1.64	{d16-d17}, [r3]
   176b4:	beq	176d4 <__assert_fail@plt+0x63a0>
   176b8:	str	r1, [sp]
   176bc:	mov	r3, sp
   176c0:	mov	r1, lr
   176c4:	mvn	r2, #0
   176c8:	bl	174b8 <__assert_fail@plt+0x6184>
   176cc:	mov	sp, fp
   176d0:	pop	{fp, pc}
   176d4:	bl	1131c <abort@plt>
   176d8:	push	{r4, sl, fp, lr}
   176dc:	add	fp, sp, #8
   176e0:	sub	sp, sp, #48	; 0x30
   176e4:	vmov.i32	q8, #0	; 0x00000000
   176e8:	mov	ip, r3
   176ec:	mov	r3, sp
   176f0:	mov	lr, #32
   176f4:	cmp	r1, #10
   176f8:	add	r4, r3, #16
   176fc:	vst1.64	{d16-d17}, [r3], lr
   17700:	vst1.64	{d16-d17}, [r4]
   17704:	vst1.64	{d16-d17}, [r3]
   17708:	beq	17728 <__assert_fail@plt+0x63f4>
   1770c:	str	r1, [sp]
   17710:	mov	r1, r2
   17714:	mov	r3, sp
   17718:	mov	r2, ip
   1771c:	bl	174b8 <__assert_fail@plt+0x6184>
   17720:	sub	sp, fp, #8
   17724:	pop	{r4, sl, fp, pc}
   17728:	bl	1131c <abort@plt>
   1772c:	push	{fp, lr}
   17730:	mov	fp, sp
   17734:	sub	sp, sp, #48	; 0x30
   17738:	vmov.i32	q8, #0	; 0x00000000
   1773c:	mov	r3, sp
   17740:	mov	ip, #32
   17744:	cmp	r0, #10
   17748:	add	r2, r3, #16
   1774c:	vst1.64	{d16-d17}, [r3], ip
   17750:	vst1.64	{d16-d17}, [r2]
   17754:	vst1.64	{d16-d17}, [r3]
   17758:	beq	17778 <__assert_fail@plt+0x6444>
   1775c:	str	r0, [sp]
   17760:	mov	r3, sp
   17764:	mov	r0, #0
   17768:	mvn	r2, #0
   1776c:	bl	174b8 <__assert_fail@plt+0x6184>
   17770:	mov	sp, fp
   17774:	pop	{fp, pc}
   17778:	bl	1131c <abort@plt>
   1777c:	push	{fp, lr}
   17780:	mov	fp, sp
   17784:	sub	sp, sp, #48	; 0x30
   17788:	vmov.i32	q8, #0	; 0x00000000
   1778c:	mov	r3, sp
   17790:	mov	ip, #32
   17794:	cmp	r0, #10
   17798:	add	lr, r3, #16
   1779c:	vst1.64	{d16-d17}, [r3], ip
   177a0:	vst1.64	{d16-d17}, [lr]
   177a4:	vst1.64	{d16-d17}, [r3]
   177a8:	beq	177c4 <__assert_fail@plt+0x6490>
   177ac:	str	r0, [sp]
   177b0:	mov	r3, sp
   177b4:	mov	r0, #0
   177b8:	bl	174b8 <__assert_fail@plt+0x6184>
   177bc:	mov	sp, fp
   177c0:	pop	{fp, pc}
   177c4:	bl	1131c <abort@plt>
   177c8:	push	{r4, sl, fp, lr}
   177cc:	add	fp, sp, #8
   177d0:	sub	sp, sp, #48	; 0x30
   177d4:	mov	lr, r0
   177d8:	movw	r0, #49712	; 0xc230
   177dc:	mov	ip, r1
   177e0:	mov	r1, #32
   177e4:	mov	r4, #1
   177e8:	movt	r0, #2
   177ec:	add	r3, r0, #16
   177f0:	vld1.64	{d16-d17}, [r0], r1
   177f4:	vld1.64	{d20-d21}, [r0]
   177f8:	vld1.64	{d18-d19}, [r3]
   177fc:	mov	r3, sp
   17800:	add	r0, r3, #32
   17804:	add	r1, r3, #16
   17808:	vst1.64	{d20-d21}, [r0]
   1780c:	mov	r0, #28
   17810:	vst1.64	{d18-d19}, [r1]
   17814:	mov	r1, r3
   17818:	and	r0, r0, r2, lsr #3
   1781c:	and	r2, r2, #31
   17820:	vst1.64	{d16-d17}, [r1], r0
   17824:	ldr	r0, [r1, #8]
   17828:	bic	r4, r4, r0, lsr r2
   1782c:	eor	r0, r0, r4, lsl r2
   17830:	mov	r2, ip
   17834:	str	r0, [r1, #8]
   17838:	mov	r0, #0
   1783c:	mov	r1, lr
   17840:	bl	174b8 <__assert_fail@plt+0x6184>
   17844:	sub	sp, fp, #8
   17848:	pop	{r4, sl, fp, pc}
   1784c:	push	{fp, lr}
   17850:	mov	fp, sp
   17854:	sub	sp, sp, #48	; 0x30
   17858:	mov	ip, r0
   1785c:	movw	r0, #49712	; 0xc230
   17860:	mov	r2, #32
   17864:	movt	r0, #2
   17868:	add	r3, r0, #16
   1786c:	vld1.64	{d16-d17}, [r0], r2
   17870:	vld1.64	{d20-d21}, [r0]
   17874:	vld1.64	{d18-d19}, [r3]
   17878:	mov	r3, sp
   1787c:	add	r0, r3, #32
   17880:	add	r2, r3, #16
   17884:	vst1.64	{d20-d21}, [r0]
   17888:	mov	r0, #28
   1788c:	vst1.64	{d18-d19}, [r2]
   17890:	mov	r2, r3
   17894:	and	r0, r0, r1, lsr #3
   17898:	and	r1, r1, #31
   1789c:	vst1.64	{d16-d17}, [r2], r0
   178a0:	mov	r0, #1
   178a4:	ldr	lr, [r2, #8]
   178a8:	bic	r0, r0, lr, lsr r1
   178ac:	eor	r0, lr, r0, lsl r1
   178b0:	mov	r1, ip
   178b4:	str	r0, [r2, #8]
   178b8:	mov	r0, #0
   178bc:	mvn	r2, #0
   178c0:	bl	174b8 <__assert_fail@plt+0x6184>
   178c4:	mov	sp, fp
   178c8:	pop	{fp, pc}
   178cc:	push	{fp, lr}
   178d0:	mov	fp, sp
   178d4:	sub	sp, sp, #48	; 0x30
   178d8:	mov	r1, r0
   178dc:	movw	r0, #49712	; 0xc230
   178e0:	mov	r3, #32
   178e4:	movt	r0, #2
   178e8:	add	r2, r0, #16
   178ec:	vld1.64	{d16-d17}, [r0], r3
   178f0:	mov	r3, sp
   178f4:	vld1.64	{d18-d19}, [r2]
   178f8:	vld1.64	{d20-d21}, [r0]
   178fc:	add	r2, r3, #16
   17900:	add	r0, r3, #32
   17904:	vst1.64	{d18-d19}, [r2]
   17908:	vst1.64	{d20-d21}, [r0]
   1790c:	mov	r0, #12
   17910:	mov	r2, r3
   17914:	vst1.64	{d16-d17}, [r2], r0
   17918:	ldr	r0, [r2]
   1791c:	orr	r0, r0, #67108864	; 0x4000000
   17920:	str	r0, [r2]
   17924:	mov	r0, #0
   17928:	mvn	r2, #0
   1792c:	bl	174b8 <__assert_fail@plt+0x6184>
   17930:	mov	sp, fp
   17934:	pop	{fp, pc}
   17938:	push	{fp, lr}
   1793c:	mov	fp, sp
   17940:	sub	sp, sp, #48	; 0x30
   17944:	mov	ip, r1
   17948:	mov	r1, r0
   1794c:	movw	r0, #49712	; 0xc230
   17950:	mov	r2, #32
   17954:	movt	r0, #2
   17958:	add	r3, r0, #16
   1795c:	vld1.64	{d16-d17}, [r0], r2
   17960:	vld1.64	{d18-d19}, [r3]
   17964:	vld1.64	{d20-d21}, [r0]
   17968:	mov	r3, sp
   1796c:	add	r2, r3, #16
   17970:	add	r0, r3, #32
   17974:	vst1.64	{d18-d19}, [r2]
   17978:	vst1.64	{d20-d21}, [r0]
   1797c:	mov	r0, #12
   17980:	mov	r2, r3
   17984:	vst1.64	{d16-d17}, [r2], r0
   17988:	ldr	r0, [r2]
   1798c:	orr	r0, r0, #67108864	; 0x4000000
   17990:	str	r0, [r2]
   17994:	mov	r0, #0
   17998:	mov	r2, ip
   1799c:	bl	174b8 <__assert_fail@plt+0x6184>
   179a0:	mov	sp, fp
   179a4:	pop	{fp, pc}
   179a8:	push	{r4, sl, fp, lr}
   179ac:	add	fp, sp, #8
   179b0:	sub	sp, sp, #96	; 0x60
   179b4:	vmov.i32	q8, #0	; 0x00000000
   179b8:	mov	ip, r2
   179bc:	mov	r2, sp
   179c0:	mov	r4, #28
   179c4:	cmp	r1, #10
   179c8:	mov	r3, r2
   179cc:	add	lr, r2, #16
   179d0:	vst1.64	{d16-d17}, [r3], r4
   179d4:	vst1.64	{d16-d17}, [lr]
   179d8:	vst1.32	{d16-d17}, [r3]
   179dc:	beq	17a2c <__assert_fail@plt+0x66f8>
   179e0:	vld1.64	{d16-d17}, [r2], r4
   179e4:	vld1.64	{d18-d19}, [lr]
   179e8:	add	r3, sp, #48	; 0x30
   179ec:	vld1.32	{d20-d21}, [r2]
   179f0:	add	r2, r3, #20
   179f4:	add	r4, r3, #4
   179f8:	vst1.32	{d18-d19}, [r2]
   179fc:	add	r2, r3, #32
   17a00:	vst1.32	{d16-d17}, [r4]
   17a04:	vst1.32	{d20-d21}, [r2]
   17a08:	str	r1, [sp, #48]	; 0x30
   17a0c:	mvn	r2, #0
   17a10:	ldr	r1, [sp, #60]	; 0x3c
   17a14:	orr	r1, r1, #67108864	; 0x4000000
   17a18:	str	r1, [sp, #60]	; 0x3c
   17a1c:	mov	r1, ip
   17a20:	bl	174b8 <__assert_fail@plt+0x6184>
   17a24:	sub	sp, fp, #8
   17a28:	pop	{r4, sl, fp, pc}
   17a2c:	bl	1131c <abort@plt>
   17a30:	push	{r4, r5, r6, sl, fp, lr}
   17a34:	add	fp, sp, #16
   17a38:	sub	sp, sp, #48	; 0x30
   17a3c:	mov	ip, r3
   17a40:	movw	r3, #49712	; 0xc230
   17a44:	mov	r6, #32
   17a48:	cmp	r1, #0
   17a4c:	mov	r4, sp
   17a50:	movt	r3, #2
   17a54:	cmpne	r2, #0
   17a58:	add	r5, r4, #16
   17a5c:	add	lr, r3, #16
   17a60:	vld1.64	{d16-d17}, [r3], r6
   17a64:	vld1.64	{d18-d19}, [lr]
   17a68:	vld1.64	{d20-d21}, [r3]
   17a6c:	mov	r3, #10
   17a70:	vst1.64	{d16-d17}, [r4], r6
   17a74:	vst1.64	{d18-d19}, [r5]
   17a78:	vst1.64	{d20-d21}, [r4]
   17a7c:	str	r3, [sp]
   17a80:	bne	17a88 <__assert_fail@plt+0x6754>
   17a84:	bl	1131c <abort@plt>
   17a88:	str	r2, [sp, #44]	; 0x2c
   17a8c:	str	r1, [sp, #40]	; 0x28
   17a90:	mov	r3, sp
   17a94:	mov	r1, ip
   17a98:	mvn	r2, #0
   17a9c:	bl	174b8 <__assert_fail@plt+0x6184>
   17aa0:	sub	sp, fp, #16
   17aa4:	pop	{r4, r5, r6, sl, fp, pc}
   17aa8:	push	{r4, r5, r6, sl, fp, lr}
   17aac:	add	fp, sp, #16
   17ab0:	sub	sp, sp, #48	; 0x30
   17ab4:	mov	lr, r3
   17ab8:	movw	r3, #49712	; 0xc230
   17abc:	mov	r6, #32
   17ac0:	cmp	r1, #0
   17ac4:	mov	r4, sp
   17ac8:	movt	r3, #2
   17acc:	cmpne	r2, #0
   17ad0:	add	r5, r4, #16
   17ad4:	add	ip, r3, #16
   17ad8:	vld1.64	{d16-d17}, [r3], r6
   17adc:	vld1.64	{d18-d19}, [ip]
   17ae0:	vld1.64	{d20-d21}, [r3]
   17ae4:	mov	r3, #10
   17ae8:	vst1.64	{d16-d17}, [r4], r6
   17aec:	vst1.64	{d18-d19}, [r5]
   17af0:	vst1.64	{d20-d21}, [r4]
   17af4:	str	r3, [sp]
   17af8:	bne	17b00 <__assert_fail@plt+0x67cc>
   17afc:	bl	1131c <abort@plt>
   17b00:	ldr	ip, [fp, #8]
   17b04:	str	r2, [sp, #44]	; 0x2c
   17b08:	str	r1, [sp, #40]	; 0x28
   17b0c:	mov	r3, sp
   17b10:	mov	r1, lr
   17b14:	mov	r2, ip
   17b18:	bl	174b8 <__assert_fail@plt+0x6184>
   17b1c:	sub	sp, fp, #16
   17b20:	pop	{r4, r5, r6, sl, fp, pc}
   17b24:	push	{r4, sl, fp, lr}
   17b28:	add	fp, sp, #8
   17b2c:	sub	sp, sp, #48	; 0x30
   17b30:	movw	r3, #49712	; 0xc230
   17b34:	mov	lr, #32
   17b38:	mov	ip, r2
   17b3c:	cmp	r0, #0
   17b40:	movt	r3, #2
   17b44:	cmpne	r1, #0
   17b48:	add	r2, r3, #16
   17b4c:	vld1.64	{d16-d17}, [r3], lr
   17b50:	vld1.64	{d20-d21}, [r3]
   17b54:	vld1.64	{d18-d19}, [r2]
   17b58:	mov	r2, sp
   17b5c:	add	r4, r2, #16
   17b60:	vst1.64	{d16-d17}, [r2], lr
   17b64:	vst1.64	{d20-d21}, [r2]
   17b68:	mov	r2, #10
   17b6c:	vst1.64	{d18-d19}, [r4]
   17b70:	str	r2, [sp]
   17b74:	bne	17b7c <__assert_fail@plt+0x6848>
   17b78:	bl	1131c <abort@plt>
   17b7c:	str	r1, [sp, #44]	; 0x2c
   17b80:	str	r0, [sp, #40]	; 0x28
   17b84:	mov	r3, sp
   17b88:	mov	r0, #0
   17b8c:	mov	r1, ip
   17b90:	mvn	r2, #0
   17b94:	bl	174b8 <__assert_fail@plt+0x6184>
   17b98:	sub	sp, fp, #8
   17b9c:	pop	{r4, sl, fp, pc}
   17ba0:	push	{r4, r5, fp, lr}
   17ba4:	add	fp, sp, #8
   17ba8:	sub	sp, sp, #48	; 0x30
   17bac:	mov	ip, r3
   17bb0:	movw	r3, #49712	; 0xc230
   17bb4:	mov	r4, #32
   17bb8:	mov	lr, r2
   17bbc:	cmp	r0, #0
   17bc0:	movt	r3, #2
   17bc4:	cmpne	r1, #0
   17bc8:	add	r2, r3, #16
   17bcc:	vld1.64	{d16-d17}, [r3], r4
   17bd0:	vld1.64	{d20-d21}, [r3]
   17bd4:	vld1.64	{d18-d19}, [r2]
   17bd8:	mov	r2, sp
   17bdc:	add	r5, r2, #16
   17be0:	vst1.64	{d16-d17}, [r2], r4
   17be4:	vst1.64	{d20-d21}, [r2]
   17be8:	mov	r2, #10
   17bec:	vst1.64	{d18-d19}, [r5]
   17bf0:	str	r2, [sp]
   17bf4:	bne	17bfc <__assert_fail@plt+0x68c8>
   17bf8:	bl	1131c <abort@plt>
   17bfc:	str	r1, [sp, #44]	; 0x2c
   17c00:	str	r0, [sp, #40]	; 0x28
   17c04:	mov	r3, sp
   17c08:	mov	r0, #0
   17c0c:	mov	r1, lr
   17c10:	mov	r2, ip
   17c14:	bl	174b8 <__assert_fail@plt+0x6184>
   17c18:	sub	sp, fp, #8
   17c1c:	pop	{r4, r5, fp, pc}
   17c20:	movw	r3, #49432	; 0xc118
   17c24:	movt	r3, #2
   17c28:	b	174b8 <__assert_fail@plt+0x6184>
   17c2c:	movw	r3, #49432	; 0xc118
   17c30:	mov	r2, r1
   17c34:	mov	r1, r0
   17c38:	mov	r0, #0
   17c3c:	movt	r3, #2
   17c40:	b	174b8 <__assert_fail@plt+0x6184>
   17c44:	movw	r3, #49432	; 0xc118
   17c48:	mvn	r2, #0
   17c4c:	movt	r3, #2
   17c50:	b	174b8 <__assert_fail@plt+0x6184>
   17c54:	movw	r3, #49432	; 0xc118
   17c58:	mov	r1, r0
   17c5c:	mov	r0, #0
   17c60:	mvn	r2, #0
   17c64:	movt	r3, #2
   17c68:	b	174b8 <__assert_fail@plt+0x6184>
   17c6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c70:	add	fp, sp, #24
   17c74:	sub	sp, sp, #32
   17c78:	ldr	r6, [fp, #12]
   17c7c:	ldr	r7, [fp, #8]
   17c80:	mov	r4, r2
   17c84:	mov	r8, r0
   17c88:	cmp	r1, #0
   17c8c:	beq	17cb4 <__assert_fail@plt+0x6980>
   17c90:	movw	r2, #46484	; 0xb594
   17c94:	mov	r5, r1
   17c98:	str	r3, [sp, #4]
   17c9c:	str	r4, [sp]
   17ca0:	mov	r0, r8
   17ca4:	mov	r1, #1
   17ca8:	movt	r2, #1
   17cac:	mov	r3, r5
   17cb0:	b	17ccc <__assert_fail@plt+0x6998>
   17cb4:	movw	r2, #46496	; 0xb5a0
   17cb8:	str	r3, [sp]
   17cbc:	mov	r0, r8
   17cc0:	mov	r1, #1
   17cc4:	mov	r3, r4
   17cc8:	movt	r2, #1
   17ccc:	bl	11280 <__fprintf_chk@plt>
   17cd0:	movw	r1, #46503	; 0xb5a7
   17cd4:	mov	r0, #0
   17cd8:	mov	r2, #5
   17cdc:	movt	r1, #1
   17ce0:	bl	11100 <dcgettext@plt>
   17ce4:	movw	r2, #47221	; 0xb875
   17ce8:	mov	r3, r0
   17cec:	movw	r0, #2022	; 0x7e6
   17cf0:	mov	r1, #1
   17cf4:	movt	r2, #1
   17cf8:	str	r0, [sp]
   17cfc:	mov	r0, r8
   17d00:	bl	11280 <__fprintf_chk@plt>
   17d04:	movw	r4, #44486	; 0xadc6
   17d08:	mov	r1, r8
   17d0c:	movt	r4, #1
   17d10:	mov	r0, r4
   17d14:	bl	1107c <fputs_unlocked@plt>
   17d18:	movw	r1, #46507	; 0xb5ab
   17d1c:	mov	r0, #0
   17d20:	mov	r2, #5
   17d24:	movt	r1, #1
   17d28:	bl	11100 <dcgettext@plt>
   17d2c:	movw	r3, #46678	; 0xb656
   17d30:	mov	r2, r0
   17d34:	mov	r0, r8
   17d38:	mov	r1, #1
   17d3c:	movt	r3, #1
   17d40:	bl	11280 <__fprintf_chk@plt>
   17d44:	mov	r0, r4
   17d48:	mov	r1, r8
   17d4c:	bl	1107c <fputs_unlocked@plt>
   17d50:	cmp	r6, #9
   17d54:	bhi	17d90 <__assert_fail@plt+0x6a5c>
   17d58:	add	r0, pc, #0
   17d5c:	ldr	pc, [r0, r6, lsl #2]
   17d60:	andeq	r7, r1, r8, lsl #27
   17d64:	muleq	r1, ip, sp
   17d68:	andeq	r7, r1, ip, asr #27
   17d6c:	strdeq	r7, [r1], -r4
   17d70:	andeq	r7, r1, ip, lsl lr
   17d74:	andeq	r7, r1, r4, asr #28
   17d78:	andeq	r7, r1, ip, ror #28
   17d7c:	andeq	r7, r1, r4, lsr #29
   17d80:	andeq	r7, r1, ip, asr #30
   17d84:	strdeq	r7, [r1], -r4
   17d88:	sub	sp, fp, #24
   17d8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d90:	movw	r1, #47031	; 0xb7b7
   17d94:	movt	r1, #1
   17d98:	b	17efc <__assert_fail@plt+0x6bc8>
   17d9c:	movw	r1, #46712	; 0xb678
   17da0:	mov	r0, #0
   17da4:	mov	r2, #5
   17da8:	movt	r1, #1
   17dac:	bl	11100 <dcgettext@plt>
   17db0:	ldr	r3, [r7]
   17db4:	mov	r2, r0
   17db8:	mov	r0, r8
   17dbc:	mov	r1, #1
   17dc0:	sub	sp, fp, #24
   17dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17dc8:	b	11280 <__fprintf_chk@plt>
   17dcc:	movw	r1, #46728	; 0xb688
   17dd0:	mov	r0, #0
   17dd4:	mov	r2, #5
   17dd8:	movt	r1, #1
   17ddc:	bl	11100 <dcgettext@plt>
   17de0:	mov	r2, r0
   17de4:	ldr	r3, [r7]
   17de8:	ldr	r0, [r7, #4]
   17dec:	str	r0, [sp]
   17df0:	b	17ee0 <__assert_fail@plt+0x6bac>
   17df4:	movw	r1, #46751	; 0xb69f
   17df8:	mov	r0, #0
   17dfc:	mov	r2, #5
   17e00:	movt	r1, #1
   17e04:	bl	11100 <dcgettext@plt>
   17e08:	mov	r2, r0
   17e0c:	ldr	r3, [r7]
   17e10:	ldmib	r7, {r0, r1}
   17e14:	stm	sp, {r0, r1}
   17e18:	b	17ee0 <__assert_fail@plt+0x6bac>
   17e1c:	movw	r1, #46779	; 0xb6bb
   17e20:	mov	r0, #0
   17e24:	mov	r2, #5
   17e28:	movt	r1, #1
   17e2c:	bl	11100 <dcgettext@plt>
   17e30:	ldr	r3, [r7]
   17e34:	mov	r2, r0
   17e38:	ldmib	r7, {r0, r1, r7}
   17e3c:	stm	sp, {r0, r1, r7}
   17e40:	b	17ee0 <__assert_fail@plt+0x6bac>
   17e44:	movw	r1, #46811	; 0xb6db
   17e48:	mov	r0, #0
   17e4c:	mov	r2, #5
   17e50:	movt	r1, #1
   17e54:	bl	11100 <dcgettext@plt>
   17e58:	ldr	r3, [r7]
   17e5c:	mov	r2, r0
   17e60:	ldmib	r7, {r0, r1, r6, r7}
   17e64:	stm	sp, {r0, r1, r6, r7}
   17e68:	b	17ee0 <__assert_fail@plt+0x6bac>
   17e6c:	movw	r1, #46847	; 0xb6ff
   17e70:	mov	r0, #0
   17e74:	mov	r2, #5
   17e78:	movt	r1, #1
   17e7c:	bl	11100 <dcgettext@plt>
   17e80:	mov	r2, r0
   17e84:	ldr	r3, [r7]
   17e88:	ldmib	r7, {r0, r1, r6}
   17e8c:	ldr	r5, [r7, #16]
   17e90:	ldr	r7, [r7, #20]
   17e94:	stm	sp, {r0, r1, r6}
   17e98:	str	r5, [sp, #12]
   17e9c:	str	r7, [sp, #16]
   17ea0:	b	17ee0 <__assert_fail@plt+0x6bac>
   17ea4:	movw	r1, #46887	; 0xb727
   17ea8:	mov	r0, #0
   17eac:	mov	r2, #5
   17eb0:	movt	r1, #1
   17eb4:	bl	11100 <dcgettext@plt>
   17eb8:	mov	r2, r0
   17ebc:	ldr	r3, [r7]
   17ec0:	ldmib	r7, {r0, r1, r6}
   17ec4:	ldr	r5, [r7, #16]
   17ec8:	ldr	r4, [r7, #20]
   17ecc:	ldr	r7, [r7, #24]
   17ed0:	stm	sp, {r0, r1, r6}
   17ed4:	str	r5, [sp, #12]
   17ed8:	str	r4, [sp, #16]
   17edc:	str	r7, [sp, #20]
   17ee0:	mov	r0, r8
   17ee4:	mov	r1, #1
   17ee8:	bl	11280 <__fprintf_chk@plt>
   17eec:	sub	sp, fp, #24
   17ef0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ef4:	movw	r1, #46979	; 0xb783
   17ef8:	movt	r1, #1
   17efc:	mov	r0, #0
   17f00:	mov	r2, #5
   17f04:	bl	11100 <dcgettext@plt>
   17f08:	mov	ip, r0
   17f0c:	ldr	r3, [r7]
   17f10:	ldr	r0, [r7, #4]
   17f14:	ldr	r1, [r7, #8]
   17f18:	ldr	r6, [r7, #12]
   17f1c:	ldr	r5, [r7, #16]
   17f20:	ldr	r4, [r7, #20]
   17f24:	ldr	r2, [r7, #24]
   17f28:	ldr	lr, [r7, #28]
   17f2c:	ldr	r7, [r7, #32]
   17f30:	stm	sp, {r0, r1, r6}
   17f34:	str	r5, [sp, #12]
   17f38:	str	r4, [sp, #16]
   17f3c:	str	r2, [sp, #20]
   17f40:	str	lr, [sp, #24]
   17f44:	str	r7, [sp, #28]
   17f48:	b	17f90 <__assert_fail@plt+0x6c5c>
   17f4c:	movw	r1, #46931	; 0xb753
   17f50:	mov	r0, #0
   17f54:	mov	r2, #5
   17f58:	movt	r1, #1
   17f5c:	bl	11100 <dcgettext@plt>
   17f60:	mov	ip, r0
   17f64:	ldr	r3, [r7]
   17f68:	ldmib	r7, {r0, r1, r6}
   17f6c:	ldr	r5, [r7, #16]
   17f70:	ldr	r4, [r7, #20]
   17f74:	ldr	r2, [r7, #24]
   17f78:	ldr	r7, [r7, #28]
   17f7c:	stm	sp, {r0, r1, r6}
   17f80:	str	r5, [sp, #12]
   17f84:	str	r4, [sp, #16]
   17f88:	str	r2, [sp, #20]
   17f8c:	str	r7, [sp, #24]
   17f90:	mov	r0, r8
   17f94:	mov	r1, #1
   17f98:	mov	r2, ip
   17f9c:	bl	11280 <__fprintf_chk@plt>
   17fa0:	sub	sp, fp, #24
   17fa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17fa8:	push	{r4, sl, fp, lr}
   17fac:	add	fp, sp, #8
   17fb0:	sub	sp, sp, #8
   17fb4:	ldr	ip, [fp, #8]
   17fb8:	mov	lr, #0
   17fbc:	ldr	r4, [ip, lr, lsl #2]
   17fc0:	add	lr, lr, #1
   17fc4:	cmp	r4, #0
   17fc8:	bne	17fbc <__assert_fail@plt+0x6c88>
   17fcc:	sub	r4, lr, #1
   17fd0:	str	ip, [sp]
   17fd4:	str	r4, [sp, #4]
   17fd8:	bl	17c6c <__assert_fail@plt+0x6938>
   17fdc:	sub	sp, fp, #8
   17fe0:	pop	{r4, sl, fp, pc}
   17fe4:	push	{fp, lr}
   17fe8:	mov	fp, sp
   17fec:	sub	sp, sp, #48	; 0x30
   17ff0:	ldr	ip, [fp, #8]
   17ff4:	ldr	lr, [ip]
   17ff8:	cmp	lr, #0
   17ffc:	str	lr, [sp, #8]
   18000:	beq	1809c <__assert_fail@plt+0x6d68>
   18004:	ldr	lr, [ip, #4]
   18008:	cmp	lr, #0
   1800c:	str	lr, [sp, #12]
   18010:	beq	180a4 <__assert_fail@plt+0x6d70>
   18014:	ldr	lr, [ip, #8]
   18018:	cmp	lr, #0
   1801c:	str	lr, [sp, #16]
   18020:	beq	180ac <__assert_fail@plt+0x6d78>
   18024:	ldr	lr, [ip, #12]
   18028:	cmp	lr, #0
   1802c:	str	lr, [sp, #20]
   18030:	beq	180b4 <__assert_fail@plt+0x6d80>
   18034:	ldr	lr, [ip, #16]
   18038:	cmp	lr, #0
   1803c:	str	lr, [sp, #24]
   18040:	beq	180bc <__assert_fail@plt+0x6d88>
   18044:	ldr	lr, [ip, #20]
   18048:	cmp	lr, #0
   1804c:	str	lr, [sp, #28]
   18050:	beq	180c4 <__assert_fail@plt+0x6d90>
   18054:	ldr	lr, [ip, #24]
   18058:	cmp	lr, #0
   1805c:	str	lr, [sp, #32]
   18060:	beq	180cc <__assert_fail@plt+0x6d98>
   18064:	ldr	lr, [ip, #28]
   18068:	cmp	lr, #0
   1806c:	str	lr, [sp, #36]	; 0x24
   18070:	beq	180d4 <__assert_fail@plt+0x6da0>
   18074:	ldr	lr, [ip, #32]
   18078:	cmp	lr, #0
   1807c:	str	lr, [sp, #40]	; 0x28
   18080:	beq	180dc <__assert_fail@plt+0x6da8>
   18084:	ldr	lr, [ip, #36]	; 0x24
   18088:	mov	ip, #10
   1808c:	cmp	lr, #0
   18090:	str	lr, [sp, #44]	; 0x2c
   18094:	movweq	ip, #9
   18098:	b	180e0 <__assert_fail@plt+0x6dac>
   1809c:	mov	ip, #0
   180a0:	b	180e0 <__assert_fail@plt+0x6dac>
   180a4:	mov	ip, #1
   180a8:	b	180e0 <__assert_fail@plt+0x6dac>
   180ac:	mov	ip, #2
   180b0:	b	180e0 <__assert_fail@plt+0x6dac>
   180b4:	mov	ip, #3
   180b8:	b	180e0 <__assert_fail@plt+0x6dac>
   180bc:	mov	ip, #4
   180c0:	b	180e0 <__assert_fail@plt+0x6dac>
   180c4:	mov	ip, #5
   180c8:	b	180e0 <__assert_fail@plt+0x6dac>
   180cc:	mov	ip, #6
   180d0:	b	180e0 <__assert_fail@plt+0x6dac>
   180d4:	mov	ip, #7
   180d8:	b	180e0 <__assert_fail@plt+0x6dac>
   180dc:	mov	ip, #8
   180e0:	add	lr, sp, #8
   180e4:	str	ip, [sp, #4]
   180e8:	str	lr, [sp]
   180ec:	bl	17c6c <__assert_fail@plt+0x6938>
   180f0:	mov	sp, fp
   180f4:	pop	{fp, pc}
   180f8:	push	{fp, lr}
   180fc:	mov	fp, sp
   18100:	sub	sp, sp, #56	; 0x38
   18104:	add	ip, fp, #8
   18108:	str	ip, [sp, #12]
   1810c:	ldr	lr, [fp, #8]
   18110:	cmp	lr, #0
   18114:	str	lr, [sp, #16]
   18118:	beq	181b4 <__assert_fail@plt+0x6e80>
   1811c:	ldr	lr, [ip, #4]
   18120:	cmp	lr, #0
   18124:	str	lr, [sp, #20]
   18128:	beq	181bc <__assert_fail@plt+0x6e88>
   1812c:	ldr	lr, [ip, #8]
   18130:	cmp	lr, #0
   18134:	str	lr, [sp, #24]
   18138:	beq	181c4 <__assert_fail@plt+0x6e90>
   1813c:	ldr	lr, [ip, #12]
   18140:	cmp	lr, #0
   18144:	str	lr, [sp, #28]
   18148:	beq	181cc <__assert_fail@plt+0x6e98>
   1814c:	ldr	lr, [ip, #16]
   18150:	cmp	lr, #0
   18154:	str	lr, [sp, #32]
   18158:	beq	181d4 <__assert_fail@plt+0x6ea0>
   1815c:	ldr	lr, [ip, #20]
   18160:	cmp	lr, #0
   18164:	str	lr, [sp, #36]	; 0x24
   18168:	beq	181dc <__assert_fail@plt+0x6ea8>
   1816c:	ldr	lr, [ip, #24]
   18170:	cmp	lr, #0
   18174:	str	lr, [sp, #40]	; 0x28
   18178:	beq	181e4 <__assert_fail@plt+0x6eb0>
   1817c:	ldr	lr, [ip, #28]
   18180:	cmp	lr, #0
   18184:	str	lr, [sp, #44]	; 0x2c
   18188:	beq	181ec <__assert_fail@plt+0x6eb8>
   1818c:	ldr	lr, [ip, #32]
   18190:	cmp	lr, #0
   18194:	str	lr, [sp, #48]	; 0x30
   18198:	beq	181f4 <__assert_fail@plt+0x6ec0>
   1819c:	ldr	lr, [ip, #36]	; 0x24
   181a0:	mov	ip, #10
   181a4:	cmp	lr, #0
   181a8:	str	lr, [sp, #52]	; 0x34
   181ac:	movweq	ip, #9
   181b0:	b	181f8 <__assert_fail@plt+0x6ec4>
   181b4:	mov	ip, #0
   181b8:	b	181f8 <__assert_fail@plt+0x6ec4>
   181bc:	mov	ip, #1
   181c0:	b	181f8 <__assert_fail@plt+0x6ec4>
   181c4:	mov	ip, #2
   181c8:	b	181f8 <__assert_fail@plt+0x6ec4>
   181cc:	mov	ip, #3
   181d0:	b	181f8 <__assert_fail@plt+0x6ec4>
   181d4:	mov	ip, #4
   181d8:	b	181f8 <__assert_fail@plt+0x6ec4>
   181dc:	mov	ip, #5
   181e0:	b	181f8 <__assert_fail@plt+0x6ec4>
   181e4:	mov	ip, #6
   181e8:	b	181f8 <__assert_fail@plt+0x6ec4>
   181ec:	mov	ip, #7
   181f0:	b	181f8 <__assert_fail@plt+0x6ec4>
   181f4:	mov	ip, #8
   181f8:	add	lr, sp, #16
   181fc:	str	ip, [sp, #4]
   18200:	str	lr, [sp]
   18204:	bl	17c6c <__assert_fail@plt+0x6938>
   18208:	mov	sp, fp
   1820c:	pop	{fp, pc}
   18210:	push	{fp, lr}
   18214:	mov	fp, sp
   18218:	movw	r0, #49524	; 0xc174
   1821c:	movt	r0, #2
   18220:	ldr	r1, [r0]
   18224:	movw	r0, #44486	; 0xadc6
   18228:	movt	r0, #1
   1822c:	bl	1107c <fputs_unlocked@plt>
   18230:	movw	r1, #47091	; 0xb7f3
   18234:	mov	r0, #0
   18238:	mov	r2, #5
   1823c:	movt	r1, #1
   18240:	bl	11100 <dcgettext@plt>
   18244:	movw	r2, #47111	; 0xb807
   18248:	mov	r1, r0
   1824c:	mov	r0, #1
   18250:	movt	r2, #1
   18254:	bl	1125c <__printf_chk@plt>
   18258:	movw	r1, #47133	; 0xb81d
   1825c:	mov	r0, #0
   18260:	mov	r2, #5
   18264:	movt	r1, #1
   18268:	bl	11100 <dcgettext@plt>
   1826c:	movw	r2, #43811	; 0xab23
   18270:	movw	r3, #44295	; 0xad07
   18274:	mov	r1, r0
   18278:	mov	r0, #1
   1827c:	movt	r2, #1
   18280:	movt	r3, #1
   18284:	bl	1125c <__printf_chk@plt>
   18288:	movw	r1, #47153	; 0xb831
   1828c:	mov	r0, #0
   18290:	mov	r2, #5
   18294:	movt	r1, #1
   18298:	bl	11100 <dcgettext@plt>
   1829c:	movw	r2, #47192	; 0xb858
   182a0:	mov	r1, r0
   182a4:	mov	r0, #1
   182a8:	movt	r2, #1
   182ac:	pop	{fp, lr}
   182b0:	b	1125c <__printf_chk@plt>
   182b4:	push	{r4, r5, r6, sl, fp, lr}
   182b8:	add	fp, sp, #16
   182bc:	mov	r4, r2
   182c0:	mov	r5, r1
   182c4:	mov	r6, r0
   182c8:	bl	19a64 <__assert_fail@plt+0x8730>
   182cc:	cmp	r0, #0
   182d0:	popne	{r4, r5, r6, sl, fp, pc}
   182d4:	cmp	r6, #0
   182d8:	beq	182ec <__assert_fail@plt+0x6fb8>
   182dc:	cmp	r5, #0
   182e0:	cmpne	r4, #0
   182e4:	bne	182ec <__assert_fail@plt+0x6fb8>
   182e8:	pop	{r4, r5, r6, sl, fp, pc}
   182ec:	bl	18868 <__assert_fail@plt+0x7534>
   182f0:	push	{r4, r5, r6, sl, fp, lr}
   182f4:	add	fp, sp, #16
   182f8:	mov	r4, r2
   182fc:	mov	r5, r1
   18300:	mov	r6, r0
   18304:	bl	19a64 <__assert_fail@plt+0x8730>
   18308:	cmp	r0, #0
   1830c:	popne	{r4, r5, r6, sl, fp, pc}
   18310:	cmp	r6, #0
   18314:	beq	18328 <__assert_fail@plt+0x6ff4>
   18318:	cmp	r5, #0
   1831c:	cmpne	r4, #0
   18320:	bne	18328 <__assert_fail@plt+0x6ff4>
   18324:	pop	{r4, r5, r6, sl, fp, pc}
   18328:	bl	18868 <__assert_fail@plt+0x7534>
   1832c:	push	{fp, lr}
   18330:	mov	fp, sp
   18334:	bl	198c0 <__assert_fail@plt+0x858c>
   18338:	cmp	r0, #0
   1833c:	popne	{fp, pc}
   18340:	bl	18868 <__assert_fail@plt+0x7534>
   18344:	push	{fp, lr}
   18348:	mov	fp, sp
   1834c:	bl	198c0 <__assert_fail@plt+0x858c>
   18350:	cmp	r0, #0
   18354:	popne	{fp, pc}
   18358:	bl	18868 <__assert_fail@plt+0x7534>
   1835c:	push	{fp, lr}
   18360:	mov	fp, sp
   18364:	bl	198c0 <__assert_fail@plt+0x858c>
   18368:	cmp	r0, #0
   1836c:	popne	{fp, pc}
   18370:	bl	18868 <__assert_fail@plt+0x7534>
   18374:	push	{r4, r5, fp, lr}
   18378:	add	fp, sp, #8
   1837c:	mov	r4, r1
   18380:	mov	r5, r0
   18384:	bl	198f0 <__assert_fail@plt+0x85bc>
   18388:	cmp	r0, #0
   1838c:	popne	{r4, r5, fp, pc}
   18390:	cmp	r5, #0
   18394:	beq	183a4 <__assert_fail@plt+0x7070>
   18398:	cmp	r4, #0
   1839c:	bne	183a4 <__assert_fail@plt+0x7070>
   183a0:	pop	{r4, r5, fp, pc}
   183a4:	bl	18868 <__assert_fail@plt+0x7534>
   183a8:	push	{fp, lr}
   183ac:	mov	fp, sp
   183b0:	cmp	r1, #0
   183b4:	orreq	r1, r1, #1
   183b8:	bl	198f0 <__assert_fail@plt+0x85bc>
   183bc:	cmp	r0, #0
   183c0:	popne	{fp, pc}
   183c4:	bl	18868 <__assert_fail@plt+0x7534>
   183c8:	push	{fp, lr}
   183cc:	mov	fp, sp
   183d0:	clz	r3, r2
   183d4:	lsr	ip, r3, #5
   183d8:	clz	r3, r1
   183dc:	lsr	r3, r3, #5
   183e0:	orrs	r3, r3, ip
   183e4:	movwne	r1, #1
   183e8:	movwne	r2, #1
   183ec:	bl	19a64 <__assert_fail@plt+0x8730>
   183f0:	cmp	r0, #0
   183f4:	popne	{fp, pc}
   183f8:	bl	18868 <__assert_fail@plt+0x7534>
   183fc:	push	{fp, lr}
   18400:	mov	fp, sp
   18404:	mov	r2, r1
   18408:	mov	r1, r0
   1840c:	mov	r0, #0
   18410:	bl	19a64 <__assert_fail@plt+0x8730>
   18414:	cmp	r0, #0
   18418:	popne	{fp, pc}
   1841c:	bl	18868 <__assert_fail@plt+0x7534>
   18420:	push	{fp, lr}
   18424:	mov	fp, sp
   18428:	mov	r2, r1
   1842c:	mov	r1, r0
   18430:	clz	r0, r2
   18434:	clz	r3, r1
   18438:	lsr	r0, r0, #5
   1843c:	lsr	r3, r3, #5
   18440:	orrs	r0, r3, r0
   18444:	mov	r0, #0
   18448:	movwne	r1, #1
   1844c:	movwne	r2, #1
   18450:	bl	19a64 <__assert_fail@plt+0x8730>
   18454:	cmp	r0, #0
   18458:	popne	{fp, pc}
   1845c:	bl	18868 <__assert_fail@plt+0x7534>
   18460:	push	{r4, r5, r6, sl, fp, lr}
   18464:	add	fp, sp, #16
   18468:	ldr	r5, [r1]
   1846c:	mov	r4, r1
   18470:	mov	r6, r0
   18474:	cmp	r0, #0
   18478:	beq	18490 <__assert_fail@plt+0x715c>
   1847c:	mov	r0, #1
   18480:	add	r0, r0, r5, lsr #1
   18484:	adds	r5, r5, r0
   18488:	bcc	18498 <__assert_fail@plt+0x7164>
   1848c:	b	184d4 <__assert_fail@plt+0x71a0>
   18490:	cmp	r5, #0
   18494:	movweq	r5, #64	; 0x40
   18498:	mov	r0, r6
   1849c:	mov	r1, r5
   184a0:	mov	r2, #1
   184a4:	bl	19a64 <__assert_fail@plt+0x8730>
   184a8:	cmp	r5, #0
   184ac:	mov	r1, r5
   184b0:	movwne	r1, #1
   184b4:	cmp	r0, #0
   184b8:	bne	184cc <__assert_fail@plt+0x7198>
   184bc:	clz	r2, r6
   184c0:	lsr	r2, r2, #5
   184c4:	orrs	r1, r2, r1
   184c8:	bne	184d4 <__assert_fail@plt+0x71a0>
   184cc:	str	r5, [r4]
   184d0:	pop	{r4, r5, r6, sl, fp, pc}
   184d4:	bl	18868 <__assert_fail@plt+0x7534>
   184d8:	push	{r4, r5, r6, r7, fp, lr}
   184dc:	add	fp, sp, #16
   184e0:	ldr	r5, [r1]
   184e4:	mov	r6, r2
   184e8:	mov	r4, r1
   184ec:	mov	r7, r0
   184f0:	cmp	r0, #0
   184f4:	beq	1850c <__assert_fail@plt+0x71d8>
   184f8:	mov	r0, #1
   184fc:	add	r0, r0, r5, lsr #1
   18500:	adds	r5, r5, r0
   18504:	bcc	18524 <__assert_fail@plt+0x71f0>
   18508:	b	18558 <__assert_fail@plt+0x7224>
   1850c:	cmp	r5, #0
   18510:	bne	18524 <__assert_fail@plt+0x71f0>
   18514:	mov	r0, #64	; 0x40
   18518:	cmp	r6, #64	; 0x40
   1851c:	udiv	r5, r0, r6
   18520:	addhi	r5, r5, #1
   18524:	mov	r0, r7
   18528:	mov	r1, r5
   1852c:	mov	r2, r6
   18530:	bl	19a64 <__assert_fail@plt+0x8730>
   18534:	cmp	r0, #0
   18538:	bne	18550 <__assert_fail@plt+0x721c>
   1853c:	cmp	r7, #0
   18540:	beq	18558 <__assert_fail@plt+0x7224>
   18544:	cmp	r6, #0
   18548:	cmpne	r5, #0
   1854c:	bne	18558 <__assert_fail@plt+0x7224>
   18550:	str	r5, [r4]
   18554:	pop	{r4, r5, r6, r7, fp, pc}
   18558:	bl	18868 <__assert_fail@plt+0x7534>
   1855c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18560:	add	fp, sp, #24
   18564:	mov	r8, r1
   18568:	ldr	r1, [r1]
   1856c:	mov	r5, r0
   18570:	add	r0, r1, r1, asr #1
   18574:	cmp	r0, r1
   18578:	mvnvs	r0, #-2147483648	; 0x80000000
   1857c:	cmp	r0, r3
   18580:	mov	r7, r0
   18584:	movgt	r7, r3
   18588:	cmn	r3, #1
   1858c:	movle	r7, r0
   18590:	ldr	r0, [fp, #8]
   18594:	cmn	r0, #1
   18598:	ble	185c0 <__assert_fail@plt+0x728c>
   1859c:	cmp	r0, #0
   185a0:	beq	18614 <__assert_fail@plt+0x72e0>
   185a4:	cmn	r7, #1
   185a8:	ble	185e8 <__assert_fail@plt+0x72b4>
   185ac:	mvn	r4, #-2147483648	; 0x80000000
   185b0:	udiv	r6, r4, r0
   185b4:	cmp	r6, r7
   185b8:	bge	18614 <__assert_fail@plt+0x72e0>
   185bc:	b	18624 <__assert_fail@plt+0x72f0>
   185c0:	cmn	r7, #1
   185c4:	ble	18604 <__assert_fail@plt+0x72d0>
   185c8:	cmn	r0, #1
   185cc:	beq	18614 <__assert_fail@plt+0x72e0>
   185d0:	mov	r6, #-2147483648	; 0x80000000
   185d4:	mvn	r4, #-2147483648	; 0x80000000
   185d8:	sdiv	r6, r6, r0
   185dc:	cmp	r6, r7
   185e0:	bge	18614 <__assert_fail@plt+0x72e0>
   185e4:	b	18624 <__assert_fail@plt+0x72f0>
   185e8:	beq	18614 <__assert_fail@plt+0x72e0>
   185ec:	mov	r6, #-2147483648	; 0x80000000
   185f0:	mvn	r4, #-2147483648	; 0x80000000
   185f4:	sdiv	r6, r6, r7
   185f8:	cmp	r6, r0
   185fc:	bge	18614 <__assert_fail@plt+0x72e0>
   18600:	b	18624 <__assert_fail@plt+0x72f0>
   18604:	mvn	r4, #-2147483648	; 0x80000000
   18608:	sdiv	r6, r4, r0
   1860c:	cmp	r7, r6
   18610:	blt	18624 <__assert_fail@plt+0x72f0>
   18614:	mul	r6, r7, r0
   18618:	mov	r4, #64	; 0x40
   1861c:	cmp	r6, #63	; 0x3f
   18620:	bgt	1862c <__assert_fail@plt+0x72f8>
   18624:	sdiv	r7, r4, r0
   18628:	mul	r6, r7, r0
   1862c:	cmp	r5, #0
   18630:	moveq	r4, #0
   18634:	streq	r4, [r8]
   18638:	sub	r4, r7, r1
   1863c:	cmp	r4, r2
   18640:	bge	186ec <__assert_fail@plt+0x73b8>
   18644:	add	r7, r1, r2
   18648:	mov	r6, #0
   1864c:	mov	r2, #0
   18650:	cmp	r7, r3
   18654:	movwgt	r6, #1
   18658:	cmn	r3, #1
   1865c:	movwgt	r2, #1
   18660:	cmp	r7, r1
   18664:	bvs	18720 <__assert_fail@plt+0x73ec>
   18668:	ands	r1, r2, r6
   1866c:	bne	18720 <__assert_fail@plt+0x73ec>
   18670:	cmn	r0, #1
   18674:	ble	1869c <__assert_fail@plt+0x7368>
   18678:	cmp	r0, #0
   1867c:	beq	186e8 <__assert_fail@plt+0x73b4>
   18680:	cmn	r7, #1
   18684:	ble	186c0 <__assert_fail@plt+0x738c>
   18688:	mvn	r1, #-2147483648	; 0x80000000
   1868c:	udiv	r1, r1, r0
   18690:	cmp	r1, r7
   18694:	bge	186e8 <__assert_fail@plt+0x73b4>
   18698:	b	18720 <__assert_fail@plt+0x73ec>
   1869c:	cmn	r7, #1
   186a0:	ble	186d8 <__assert_fail@plt+0x73a4>
   186a4:	cmn	r0, #1
   186a8:	beq	186e8 <__assert_fail@plt+0x73b4>
   186ac:	mov	r1, #-2147483648	; 0x80000000
   186b0:	sdiv	r1, r1, r0
   186b4:	cmp	r1, r7
   186b8:	bge	186e8 <__assert_fail@plt+0x73b4>
   186bc:	b	18720 <__assert_fail@plt+0x73ec>
   186c0:	beq	186e8 <__assert_fail@plt+0x73b4>
   186c4:	mov	r1, #-2147483648	; 0x80000000
   186c8:	sdiv	r1, r1, r7
   186cc:	cmp	r1, r0
   186d0:	bge	186e8 <__assert_fail@plt+0x73b4>
   186d4:	b	18720 <__assert_fail@plt+0x73ec>
   186d8:	mvn	r1, #-2147483648	; 0x80000000
   186dc:	sdiv	r1, r1, r0
   186e0:	cmp	r7, r1
   186e4:	blt	18720 <__assert_fail@plt+0x73ec>
   186e8:	mul	r6, r7, r0
   186ec:	mov	r0, r5
   186f0:	mov	r1, r6
   186f4:	bl	198f0 <__assert_fail@plt+0x85bc>
   186f8:	cmp	r6, #0
   186fc:	movwne	r6, #1
   18700:	cmp	r0, #0
   18704:	bne	18718 <__assert_fail@plt+0x73e4>
   18708:	clz	r1, r5
   1870c:	lsr	r1, r1, #5
   18710:	orrs	r1, r1, r6
   18714:	bne	18720 <__assert_fail@plt+0x73ec>
   18718:	str	r7, [r8]
   1871c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18720:	bl	18868 <__assert_fail@plt+0x7534>
   18724:	push	{fp, lr}
   18728:	mov	fp, sp
   1872c:	mov	r1, #1
   18730:	bl	1986c <__assert_fail@plt+0x8538>
   18734:	cmp	r0, #0
   18738:	popne	{fp, pc}
   1873c:	bl	18868 <__assert_fail@plt+0x7534>
   18740:	push	{fp, lr}
   18744:	mov	fp, sp
   18748:	bl	1986c <__assert_fail@plt+0x8538>
   1874c:	cmp	r0, #0
   18750:	popne	{fp, pc}
   18754:	bl	18868 <__assert_fail@plt+0x7534>
   18758:	push	{fp, lr}
   1875c:	mov	fp, sp
   18760:	mov	r1, #1
   18764:	bl	1986c <__assert_fail@plt+0x8538>
   18768:	cmp	r0, #0
   1876c:	popne	{fp, pc}
   18770:	bl	18868 <__assert_fail@plt+0x7534>
   18774:	push	{fp, lr}
   18778:	mov	fp, sp
   1877c:	bl	1986c <__assert_fail@plt+0x8538>
   18780:	cmp	r0, #0
   18784:	popne	{fp, pc}
   18788:	bl	18868 <__assert_fail@plt+0x7534>
   1878c:	push	{r4, r5, fp, lr}
   18790:	add	fp, sp, #8
   18794:	mov	r5, r0
   18798:	mov	r0, r1
   1879c:	mov	r4, r1
   187a0:	bl	198c0 <__assert_fail@plt+0x858c>
   187a4:	cmp	r0, #0
   187a8:	beq	187bc <__assert_fail@plt+0x7488>
   187ac:	mov	r1, r5
   187b0:	mov	r2, r4
   187b4:	pop	{r4, r5, fp, lr}
   187b8:	b	110d0 <memcpy@plt>
   187bc:	bl	18868 <__assert_fail@plt+0x7534>
   187c0:	push	{r4, r5, fp, lr}
   187c4:	add	fp, sp, #8
   187c8:	mov	r5, r0
   187cc:	mov	r0, r1
   187d0:	mov	r4, r1
   187d4:	bl	198c0 <__assert_fail@plt+0x858c>
   187d8:	cmp	r0, #0
   187dc:	beq	187f0 <__assert_fail@plt+0x74bc>
   187e0:	mov	r1, r5
   187e4:	mov	r2, r4
   187e8:	pop	{r4, r5, fp, lr}
   187ec:	b	110d0 <memcpy@plt>
   187f0:	bl	18868 <__assert_fail@plt+0x7534>
   187f4:	push	{r4, r5, fp, lr}
   187f8:	add	fp, sp, #8
   187fc:	mov	r5, r0
   18800:	add	r0, r1, #1
   18804:	mov	r4, r1
   18808:	bl	198c0 <__assert_fail@plt+0x858c>
   1880c:	cmp	r0, #0
   18810:	beq	1882c <__assert_fail@plt+0x74f8>
   18814:	mov	r1, #0
   18818:	mov	r2, r4
   1881c:	strb	r1, [r0, r4]
   18820:	mov	r1, r5
   18824:	pop	{r4, r5, fp, lr}
   18828:	b	110d0 <memcpy@plt>
   1882c:	bl	18868 <__assert_fail@plt+0x7534>
   18830:	push	{r4, r5, fp, lr}
   18834:	add	fp, sp, #8
   18838:	mov	r4, r0
   1883c:	bl	111fc <strlen@plt>
   18840:	add	r5, r0, #1
   18844:	mov	r0, r5
   18848:	bl	198c0 <__assert_fail@plt+0x858c>
   1884c:	cmp	r0, #0
   18850:	beq	18864 <__assert_fail@plt+0x7530>
   18854:	mov	r1, r4
   18858:	mov	r2, r5
   1885c:	pop	{r4, r5, fp, lr}
   18860:	b	110d0 <memcpy@plt>
   18864:	bl	18868 <__assert_fail@plt+0x7534>
   18868:	push	{fp, lr}
   1886c:	mov	fp, sp
   18870:	movw	r0, #49424	; 0xc110
   18874:	movw	r1, #47268	; 0xb8a4
   18878:	mov	r2, #5
   1887c:	movt	r0, #2
   18880:	movt	r1, #1
   18884:	ldr	r4, [r0]
   18888:	mov	r0, #0
   1888c:	bl	11100 <dcgettext@plt>
   18890:	movw	r2, #46226	; 0xb492
   18894:	mov	r3, r0
   18898:	mov	r0, r4
   1889c:	mov	r1, #0
   188a0:	movt	r2, #1
   188a4:	bl	11178 <error@plt>
   188a8:	bl	1131c <abort@plt>
   188ac:	sub	sp, sp, #12
   188b0:	push	{r4, r5, r6, sl, fp, lr}
   188b4:	add	fp, sp, #16
   188b8:	sub	sp, sp, #4
   188bc:	movw	r5, #49524	; 0xc174
   188c0:	mov	r4, r0
   188c4:	add	r0, fp, #8
   188c8:	movt	r5, #2
   188cc:	stm	r0, {r1, r2, r3}
   188d0:	add	r3, fp, #8
   188d4:	mov	r1, #1
   188d8:	mov	r2, r4
   188dc:	str	r3, [sp]
   188e0:	ldr	r0, [r5]
   188e4:	bl	111a8 <__vfprintf_chk@plt>
   188e8:	mov	r4, r0
   188ec:	cmn	r0, #1
   188f0:	bgt	1893c <__assert_fail@plt+0x7608>
   188f4:	ldr	r0, [r5]
   188f8:	bl	110b8 <ferror@plt>
   188fc:	cmp	r0, #0
   18900:	bne	1893c <__assert_fail@plt+0x7608>
   18904:	movw	r0, #49424	; 0xc110
   18908:	movt	r0, #2
   1890c:	ldr	r5, [r0]
   18910:	bl	11214 <__errno_location@plt>
   18914:	movw	r1, #47285	; 0xb8b5
   18918:	ldr	r6, [r0]
   1891c:	mov	r0, #0
   18920:	mov	r2, #5
   18924:	movt	r1, #1
   18928:	bl	11100 <dcgettext@plt>
   1892c:	mov	r2, r0
   18930:	mov	r0, r5
   18934:	mov	r1, r6
   18938:	bl	11178 <error@plt>
   1893c:	mov	r0, r4
   18940:	sub	sp, fp, #16
   18944:	pop	{r4, r5, r6, sl, fp, lr}
   18948:	add	sp, sp, #12
   1894c:	bx	lr
   18950:	push	{r4, r5, r6, sl, fp, lr}
   18954:	add	fp, sp, #16
   18958:	movw	r5, #49524	; 0xc174
   1895c:	mov	r2, r0
   18960:	mov	r3, r1
   18964:	mov	r1, #1
   18968:	movt	r5, #2
   1896c:	ldr	r0, [r5]
   18970:	bl	111a8 <__vfprintf_chk@plt>
   18974:	mov	r4, r0
   18978:	cmn	r0, #1
   1897c:	bgt	18990 <__assert_fail@plt+0x765c>
   18980:	ldr	r0, [r5]
   18984:	bl	110b8 <ferror@plt>
   18988:	cmp	r0, #0
   1898c:	beq	18998 <__assert_fail@plt+0x7664>
   18990:	mov	r0, r4
   18994:	pop	{r4, r5, r6, sl, fp, pc}
   18998:	movw	r0, #49424	; 0xc110
   1899c:	movt	r0, #2
   189a0:	ldr	r5, [r0]
   189a4:	bl	11214 <__errno_location@plt>
   189a8:	movw	r1, #47285	; 0xb8b5
   189ac:	ldr	r6, [r0]
   189b0:	mov	r0, #0
   189b4:	mov	r2, #5
   189b8:	movt	r1, #1
   189bc:	bl	11100 <dcgettext@plt>
   189c0:	mov	r2, r0
   189c4:	mov	r0, r5
   189c8:	mov	r1, r6
   189cc:	bl	11178 <error@plt>
   189d0:	mov	r0, r4
   189d4:	pop	{r4, r5, r6, sl, fp, pc}
   189d8:	sub	sp, sp, #8
   189dc:	push	{r4, r5, r6, sl, fp, lr}
   189e0:	add	fp, sp, #16
   189e4:	sub	sp, sp, #8
   189e8:	mov	r4, r1
   189ec:	str	r2, [fp, #8]
   189f0:	str	r3, [fp, #12]
   189f4:	add	r3, fp, #8
   189f8:	mov	r1, #1
   189fc:	mov	r5, r0
   18a00:	mov	r2, r4
   18a04:	str	r3, [sp, #4]
   18a08:	bl	111a8 <__vfprintf_chk@plt>
   18a0c:	mov	r4, r0
   18a10:	cmn	r0, #1
   18a14:	bgt	18a60 <__assert_fail@plt+0x772c>
   18a18:	mov	r0, r5
   18a1c:	bl	110b8 <ferror@plt>
   18a20:	cmp	r0, #0
   18a24:	bne	18a60 <__assert_fail@plt+0x772c>
   18a28:	movw	r0, #49424	; 0xc110
   18a2c:	movt	r0, #2
   18a30:	ldr	r5, [r0]
   18a34:	bl	11214 <__errno_location@plt>
   18a38:	movw	r1, #47285	; 0xb8b5
   18a3c:	ldr	r6, [r0]
   18a40:	mov	r0, #0
   18a44:	mov	r2, #5
   18a48:	movt	r1, #1
   18a4c:	bl	11100 <dcgettext@plt>
   18a50:	mov	r2, r0
   18a54:	mov	r0, r5
   18a58:	mov	r1, r6
   18a5c:	bl	11178 <error@plt>
   18a60:	mov	r0, r4
   18a64:	sub	sp, fp, #16
   18a68:	pop	{r4, r5, r6, sl, fp, lr}
   18a6c:	add	sp, sp, #8
   18a70:	bx	lr
   18a74:	push	{r4, r5, r6, sl, fp, lr}
   18a78:	add	fp, sp, #16
   18a7c:	mov	r3, r2
   18a80:	mov	r2, r1
   18a84:	mov	r1, #1
   18a88:	mov	r5, r0
   18a8c:	bl	111a8 <__vfprintf_chk@plt>
   18a90:	mov	r4, r0
   18a94:	cmn	r0, #1
   18a98:	bgt	18aac <__assert_fail@plt+0x7778>
   18a9c:	mov	r0, r5
   18aa0:	bl	110b8 <ferror@plt>
   18aa4:	cmp	r0, #0
   18aa8:	beq	18ab4 <__assert_fail@plt+0x7780>
   18aac:	mov	r0, r4
   18ab0:	pop	{r4, r5, r6, sl, fp, pc}
   18ab4:	movw	r0, #49424	; 0xc110
   18ab8:	movt	r0, #2
   18abc:	ldr	r5, [r0]
   18ac0:	bl	11214 <__errno_location@plt>
   18ac4:	movw	r1, #47285	; 0xb8b5
   18ac8:	ldr	r6, [r0]
   18acc:	mov	r0, #0
   18ad0:	mov	r2, #5
   18ad4:	movt	r1, #1
   18ad8:	bl	11100 <dcgettext@plt>
   18adc:	mov	r2, r0
   18ae0:	mov	r0, r5
   18ae4:	mov	r1, r6
   18ae8:	bl	11178 <error@plt>
   18aec:	mov	r0, r4
   18af0:	pop	{r4, r5, r6, sl, fp, pc}
   18af4:	push	{fp, lr}
   18af8:	mov	fp, sp
   18afc:	sub	sp, sp, #8
   18b00:	movw	ip, #49424	; 0xc110
   18b04:	movt	ip, #2
   18b08:	ldr	ip, [ip]
   18b0c:	str	ip, [sp, #4]
   18b10:	ldr	ip, [fp, #8]
   18b14:	str	ip, [sp]
   18b18:	bl	18b20 <__assert_fail@plt+0x77ec>
   18b1c:	bl	1131c <abort@plt>
   18b20:	push	{r4, r5, r6, r7, fp, lr}
   18b24:	add	fp, sp, #16
   18b28:	sub	sp, sp, #16
   18b2c:	sub	r0, r0, #1
   18b30:	cmp	r0, #4
   18b34:	bcs	18bb4 <__assert_fail@plt+0x7880>
   18b38:	mov	r5, r1
   18b3c:	movw	r1, #47416	; 0xb938
   18b40:	ldr	r4, [fp, #12]
   18b44:	ldr	r6, [fp, #8]
   18b48:	movt	r1, #1
   18b4c:	cmn	r5, #1
   18b50:	ldr	r1, [r1, r0, lsl #2]
   18b54:	ble	18b68 <__assert_fail@plt+0x7834>
   18b58:	ldr	r7, [r3, r5, lsl #4]
   18b5c:	movw	r5, #47317	; 0xb8d5
   18b60:	movt	r5, #1
   18b64:	b	18b84 <__assert_fail@plt+0x7850>
   18b68:	mov	r0, #0
   18b6c:	add	r7, sp, #14
   18b70:	strb	r0, [sp, #15]
   18b74:	movw	r0, #47317	; 0xb8d5
   18b78:	strb	r2, [sp, #14]
   18b7c:	movt	r0, #1
   18b80:	sub	r5, r0, r5
   18b84:	mov	r0, #0
   18b88:	mov	r2, #5
   18b8c:	bl	11100 <dcgettext@plt>
   18b90:	mov	r2, r0
   18b94:	mov	r0, r4
   18b98:	mov	r1, #0
   18b9c:	mov	r3, r5
   18ba0:	str	r7, [sp]
   18ba4:	str	r6, [sp, #4]
   18ba8:	bl	11178 <error@plt>
   18bac:	sub	sp, fp, #16
   18bb0:	pop	{r4, r5, r6, r7, fp, pc}
   18bb4:	bl	1131c <abort@plt>
   18bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bbc:	add	fp, sp, #28
   18bc0:	sub	sp, sp, #44	; 0x2c
   18bc4:	cmp	r2, #37	; 0x25
   18bc8:	bcs	1984c <__assert_fail@plt+0x8518>
   18bcc:	ldr	sl, [fp, #8]
   18bd0:	mov	r6, r2
   18bd4:	mov	r7, r1
   18bd8:	mov	r4, r0
   18bdc:	str	r3, [sp, #36]	; 0x24
   18be0:	bl	11214 <__errno_location@plt>
   18be4:	mov	r5, r0
   18be8:	mov	r0, #0
   18bec:	str	r0, [r5]
   18bf0:	bl	111d8 <__ctype_b_loc@plt>
   18bf4:	ldr	r1, [r0]
   18bf8:	mov	r2, r4
   18bfc:	ldrb	r0, [r2], #1
   18c00:	add	r3, r1, r0, lsl #1
   18c04:	ldrb	r3, [r3, #1]
   18c08:	tst	r3, #32
   18c0c:	bne	18bfc <__assert_fail@plt+0x78c8>
   18c10:	cmp	r7, #0
   18c14:	sub	r9, fp, #32
   18c18:	mov	r8, #4
   18c1c:	movne	r9, r7
   18c20:	cmp	r0, #45	; 0x2d
   18c24:	beq	18fe4 <__assert_fail@plt+0x7cb0>
   18c28:	mov	r0, r4
   18c2c:	mov	r1, r9
   18c30:	mov	r2, r6
   18c34:	mov	r3, #0
   18c38:	bl	110dc <__strtoull_internal@plt>
   18c3c:	mov	r7, r1
   18c40:	ldr	r1, [r9]
   18c44:	cmp	r1, r4
   18c48:	beq	18c80 <__assert_fail@plt+0x794c>
   18c4c:	mov	r6, r0
   18c50:	ldr	r0, [r5]
   18c54:	cmp	r0, #0
   18c58:	beq	18f9c <__assert_fail@plt+0x7c68>
   18c5c:	cmp	r0, #34	; 0x22
   18c60:	bne	18fe4 <__assert_fail@plt+0x7cb0>
   18c64:	mov	r8, #1
   18c68:	cmp	sl, #0
   18c6c:	beq	19838 <__assert_fail@plt+0x8504>
   18c70:	ldrb	r4, [r1]
   18c74:	cmp	r4, #0
   18c78:	bne	18cc4 <__assert_fail@plt+0x7990>
   18c7c:	b	19838 <__assert_fail@plt+0x8504>
   18c80:	cmp	sl, #0
   18c84:	beq	18fe4 <__assert_fail@plt+0x7cb0>
   18c88:	mov	r5, r1
   18c8c:	ldrb	r1, [r4]
   18c90:	cmp	r1, #0
   18c94:	beq	18fe4 <__assert_fail@plt+0x7cb0>
   18c98:	mov	r0, sl
   18c9c:	bl	11208 <strchr@plt>
   18ca0:	cmp	r0, #0
   18ca4:	beq	18fe4 <__assert_fail@plt+0x7cb0>
   18ca8:	mov	r1, r5
   18cac:	mov	r8, #0
   18cb0:	mov	r6, #1
   18cb4:	mov	r7, #0
   18cb8:	ldrb	r4, [r1]
   18cbc:	cmp	r4, #0
   18cc0:	beq	19838 <__assert_fail@plt+0x8504>
   18cc4:	str	r1, [sp, #32]
   18cc8:	mov	r0, sl
   18ccc:	mov	r1, r4
   18cd0:	bl	11208 <strchr@plt>
   18cd4:	cmp	r0, #0
   18cd8:	beq	18fd8 <__assert_fail@plt+0x7ca4>
   18cdc:	sub	r0, r4, #69	; 0x45
   18ce0:	mov	r1, #1
   18ce4:	mov	r3, #0
   18ce8:	mov	r5, #1024	; 0x400
   18cec:	cmp	r0, #47	; 0x2f
   18cf0:	str	r1, [sp, #28]
   18cf4:	bhi	18df8 <__assert_fail@plt+0x7ac4>
   18cf8:	add	r1, pc, #0
   18cfc:	ldr	pc, [r1, r0, lsl #2]
   18d00:	andeq	r8, r1, r0, asr #27
   18d04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d08:	andeq	r8, r1, r0, asr #27
   18d0c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d10:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d14:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d18:	andeq	r8, r1, r0, asr #27
   18d1c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d20:	andeq	r8, r1, r0, asr #27
   18d24:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d28:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d2c:	andeq	r8, r1, r0, asr #27
   18d30:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d34:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d38:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d3c:	andeq	r8, r1, r0, asr #27
   18d40:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d44:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d48:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d4c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d50:	andeq	r8, r1, r0, asr #27
   18d54:	andeq	r8, r1, r0, asr #27
   18d58:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d5c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d60:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d64:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d68:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d6c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d70:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d78:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d80:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d84:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d88:	andeq	r8, r1, r0, asr #27
   18d8c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d90:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d94:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d98:	andeq	r8, r1, r0, asr #27
   18d9c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18da0:	andeq	r8, r1, r0, asr #27
   18da4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18da8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18db0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18db4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18db8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dbc:	andeq	r8, r1, r0, asr #27
   18dc0:	mov	r0, sl
   18dc4:	mov	r1, #48	; 0x30
   18dc8:	bl	11208 <strchr@plt>
   18dcc:	cmp	r0, #0
   18dd0:	beq	18df4 <__assert_fail@plt+0x7ac0>
   18dd4:	ldr	r1, [sp, #32]
   18dd8:	ldrb	r0, [r1, #1]
   18ddc:	cmp	r0, #66	; 0x42
   18de0:	cmpne	r0, #68	; 0x44
   18de4:	bne	18fac <__assert_fail@plt+0x7c78>
   18de8:	mov	r5, #1000	; 0x3e8
   18dec:	mov	r0, #2
   18df0:	str	r0, [sp, #28]
   18df4:	mov	r3, #0
   18df8:	sub	r0, r4, #66	; 0x42
   18dfc:	cmp	r0, #53	; 0x35
   18e00:	bhi	18fd8 <__assert_fail@plt+0x7ca4>
   18e04:	add	r1, pc, #0
   18e08:	ldr	pc, [r1, r0, lsl #2]
   18e0c:	andeq	r9, r1, r8, asr #6
   18e10:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e14:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e18:	andeq	r9, r1, r0, ror r3
   18e1c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e20:	andeq	r8, r1, r4, ror #29
   18e24:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e28:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e2c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e30:	strdeq	r8, [r1], -r0
   18e34:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e38:	andeq	r9, r1, r8, lsr r0
   18e3c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e40:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e44:	andeq	r9, r1, r4, asr #9
   18e48:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e4c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e50:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e54:	andeq	r9, r1, r4, asr #1
   18e58:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e5c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e60:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e64:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e68:	andeq	r9, r1, ip, ror #11
   18e6c:	andeq	r9, r1, ip, lsr #3
   18e70:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e74:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e78:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e7c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e80:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e84:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e88:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e8c:	andeq	r9, r1, r0, asr #15
   18e90:	andeq	r9, r1, r8, lsl r8
   18e94:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e98:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e9c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ea0:	andeq	r8, r1, r4, ror #29
   18ea4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ea8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb0:	strdeq	r8, [r1], -r0
   18eb4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18eb8:	andeq	r9, r1, r8, lsr r0
   18ebc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ec8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ecc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ed4:	andeq	r9, r1, r4, asr #1
   18ed8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18edc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ee0:	strdeq	r9, [r1], -r4
   18ee4:	mvn	r0, #0
   18ee8:	mvn	r1, #0
   18eec:	mov	r2, r5
   18ef0:	mov	sl, r3
   18ef4:	bl	19bac <__assert_fail@plt+0x8878>
   18ef8:	subs	r3, r0, r6
   18efc:	umull	r4, r2, r6, r5
   18f00:	mov	lr, #0
   18f04:	str	r1, [sp, #20]
   18f08:	sbcs	r3, r1, r7
   18f0c:	movwcc	lr, #1
   18f10:	mla	ip, r6, sl, r2
   18f14:	mov	r2, r1
   18f18:	mov	r2, #0
   18f1c:	cmp	lr, #0
   18f20:	mla	r7, r7, r5, ip
   18f24:	mvnne	r4, #0
   18f28:	mvnne	r7, #0
   18f2c:	subs	r6, r0, r4
   18f30:	sbcs	r6, r1, r7
   18f34:	umull	r3, r6, r4, r5
   18f38:	movwcc	r2, #1
   18f3c:	cmp	r2, #0
   18f40:	mvnne	r3, #0
   18f44:	cmp	r2, #0
   18f48:	str	r6, [sp, #16]
   18f4c:	umull	r6, ip, r3, r5
   18f50:	mla	r1, r3, sl, ip
   18f54:	ldr	ip, [sp, #16]
   18f58:	str	r1, [sp, #12]
   18f5c:	mla	r4, r4, sl, ip
   18f60:	mla	r4, r7, r5, r4
   18f64:	mvnne	r4, #0
   18f68:	subs	r0, r0, r3
   18f6c:	ldr	r0, [sp, #20]
   18f70:	ldr	r7, [sp, #12]
   18f74:	sbcs	r0, r0, r4
   18f78:	mov	r0, #0
   18f7c:	mla	r7, r4, r5, r7
   18f80:	movwcc	r0, #1
   18f84:	cmp	r0, #0
   18f88:	mov	r1, r0
   18f8c:	orr	r0, lr, r2
   18f90:	mvnne	r7, #0
   18f94:	mvnne	r6, #0
   18f98:	b	195e4 <__assert_fail@plt+0x82b0>
   18f9c:	mov	r8, r0
   18fa0:	cmp	sl, #0
   18fa4:	bne	18c70 <__assert_fail@plt+0x793c>
   18fa8:	b	19838 <__assert_fail@plt+0x8504>
   18fac:	cmp	r0, #105	; 0x69
   18fb0:	mov	r3, #0
   18fb4:	bne	18df8 <__assert_fail@plt+0x7ac4>
   18fb8:	ldrb	r0, [r1, #2]
   18fbc:	mov	r1, #1
   18fc0:	cmp	r0, #66	; 0x42
   18fc4:	movweq	r1, #3
   18fc8:	str	r1, [sp, #28]
   18fcc:	sub	r0, r4, #66	; 0x42
   18fd0:	cmp	r0, #53	; 0x35
   18fd4:	bls	18e04 <__assert_fail@plt+0x7ad0>
   18fd8:	ldr	r0, [sp, #36]	; 0x24
   18fdc:	orr	r8, r8, #2
   18fe0:	strd	r6, [r0]
   18fe4:	mov	r0, r8
   18fe8:	sub	sp, fp, #28
   18fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ff0:	mvn	r0, #0
   18ff4:	mvn	r1, #0
   18ff8:	mov	r2, r5
   18ffc:	mov	r4, r3
   19000:	bl	19bac <__assert_fail@plt+0x8878>
   19004:	subs	r0, r0, r6
   19008:	mov	r2, #0
   1900c:	sbcs	r0, r1, r7
   19010:	umull	r0, r1, r6, r5
   19014:	movwcc	r2, #1
   19018:	cmp	r2, #0
   1901c:	mla	r1, r6, r4, r1
   19020:	mov	r3, r2
   19024:	mvnne	r0, #0
   19028:	mla	r7, r7, r5, r1
   1902c:	mvnne	r7, #0
   19030:	mov	r6, r0
   19034:	b	19818 <__assert_fail@plt+0x84e4>
   19038:	mvn	r0, #0
   1903c:	mvn	r1, #0
   19040:	mov	r2, r5
   19044:	str	r3, [sp, #24]
   19048:	bl	19bac <__assert_fail@plt+0x8878>
   1904c:	subs	r3, r0, r6
   19050:	mov	ip, r0
   19054:	umull	r4, r0, r6, r5
   19058:	mov	sl, #0
   1905c:	sbcs	r3, r1, r7
   19060:	mov	r3, #0
   19064:	movwcc	r3, #1
   19068:	cmp	r3, #0
   1906c:	str	r0, [sp, #20]
   19070:	ldr	r0, [sp, #24]
   19074:	mvnne	r4, #0
   19078:	cmp	r3, #0
   1907c:	umull	lr, r2, r4, r5
   19080:	mla	r2, r4, r0, r2
   19084:	str	r2, [sp, #16]
   19088:	ldr	r2, [sp, #20]
   1908c:	mla	r6, r6, r0, r2
   19090:	ldr	r0, [sp, #16]
   19094:	mla	r6, r7, r5, r6
   19098:	mvnne	r6, #0
   1909c:	mla	r7, r6, r5, r0
   190a0:	subs	r0, ip, r4
   190a4:	sbcs	r0, r1, r6
   190a8:	movwcc	sl, #1
   190ac:	cmp	sl, #0
   190b0:	orr	r3, r3, sl
   190b4:	mvnne	lr, #0
   190b8:	mvnne	r7, #0
   190bc:	mov	r6, lr
   190c0:	b	19818 <__assert_fail@plt+0x84e4>
   190c4:	mvn	r0, #0
   190c8:	mvn	r1, #0
   190cc:	mov	r2, r5
   190d0:	mov	sl, r3
   190d4:	bl	19bac <__assert_fail@plt+0x8878>
   190d8:	subs	r3, r0, r6
   190dc:	mov	ip, r1
   190e0:	umull	r2, lr, r6, r5
   190e4:	str	r0, [sp, #20]
   190e8:	sbcs	r3, r1, r7
   190ec:	mov	r1, #0
   190f0:	str	ip, [sp, #16]
   190f4:	movwcc	r1, #1
   190f8:	mla	r6, r6, sl, lr
   190fc:	mov	lr, #0
   19100:	cmp	r1, #0
   19104:	mla	r7, r7, r5, r6
   19108:	mvnne	r2, #0
   1910c:	cmp	r1, #0
   19110:	umull	r3, r4, r2, r5
   19114:	mvnne	r7, #0
   19118:	mla	r4, r2, sl, r4
   1911c:	subs	r2, r0, r2
   19120:	sbcs	r2, ip, r7
   19124:	mla	r4, r7, r5, r4
   19128:	mov	r2, #0
   1912c:	movwcc	lr, #1
   19130:	cmp	lr, #0
   19134:	mvnne	r3, #0
   19138:	mvnne	r4, #0
   1913c:	subs	r7, r0, r3
   19140:	mov	r0, r5
   19144:	sbcs	r7, ip, r4
   19148:	umull	r5, r7, r3, r5
   1914c:	movwcc	r2, #1
   19150:	cmp	r2, #0
   19154:	mla	r3, r3, sl, r7
   19158:	mvnne	r5, #0
   1915c:	cmp	r2, #0
   19160:	mla	r3, r4, r0, r3
   19164:	umull	r6, ip, r5, r0
   19168:	mvnne	r3, #0
   1916c:	mla	ip, r5, sl, ip
   19170:	mla	r7, r3, r0, ip
   19174:	ldr	r0, [sp, #20]
   19178:	subs	r0, r0, r5
   1917c:	ldr	r0, [sp, #16]
   19180:	sbcs	r0, r0, r3
   19184:	mov	r0, #0
   19188:	movwcc	r0, #1
   1918c:	cmp	r0, #0
   19190:	mov	r3, r0
   19194:	orr	r0, r1, lr
   19198:	orr	r0, r0, r2
   1919c:	mvnne	r7, #0
   191a0:	mvnne	r6, #0
   191a4:	orr	r3, r0, r3
   191a8:	b	19818 <__assert_fail@plt+0x84e4>
   191ac:	mvn	r0, #0
   191b0:	mvn	r1, #0
   191b4:	mov	r2, r5
   191b8:	mov	r4, r3
   191bc:	str	r3, [sp, #24]
   191c0:	bl	19bac <__assert_fail@plt+0x8878>
   191c4:	umull	r3, r2, r6, r5
   191c8:	mla	r2, r6, r4, r2
   191cc:	subs	r6, r0, r6
   191d0:	sbcs	r6, r1, r7
   191d4:	mov	r6, #0
   191d8:	mla	r2, r7, r5, r2
   191dc:	mov	r7, #0
   191e0:	movwcc	r6, #1
   191e4:	cmp	r6, #0
   191e8:	str	r6, [sp, #20]
   191ec:	mvnne	r3, #0
   191f0:	mvnne	r2, #0
   191f4:	subs	r4, r0, r3
   191f8:	umull	r6, ip, r3, r5
   191fc:	sbcs	r4, r1, r2
   19200:	ldr	r4, [sp, #24]
   19204:	movwcc	r7, #1
   19208:	cmp	r7, #0
   1920c:	mov	lr, r7
   19210:	str	r7, [sp, #16]
   19214:	mvnne	r6, #0
   19218:	cmp	lr, #0
   1921c:	mov	lr, #0
   19220:	umull	sl, r7, r6, r5
   19224:	mla	r3, r3, r4, ip
   19228:	mla	r2, r2, r5, r3
   1922c:	mvnne	r2, #0
   19230:	subs	r3, r0, r6
   19234:	mla	r7, r6, r4, r7
   19238:	mov	r4, r0
   1923c:	mov	r0, #0
   19240:	mla	r7, r2, r5, r7
   19244:	sbcs	r2, r1, r2
   19248:	mov	r3, r4
   1924c:	movwcc	r0, #1
   19250:	str	r3, [sp, #4]
   19254:	cmp	r0, #0
   19258:	str	r0, [sp, #12]
   1925c:	mov	r0, r1
   19260:	mvnne	sl, #0
   19264:	mvnne	r7, #0
   19268:	str	r0, [sp, #8]
   1926c:	subs	r2, r4, sl
   19270:	ldr	r4, [sp, #24]
   19274:	sbcs	r2, r1, r7
   19278:	umull	r6, r2, sl, r5
   1927c:	movwcc	lr, #1
   19280:	cmp	lr, #0
   19284:	mvnne	r6, #0
   19288:	mla	r2, sl, r4, r2
   1928c:	cmp	lr, #0
   19290:	umull	r1, ip, r6, r5
   19294:	mla	r2, r7, r5, r2
   19298:	mvnne	r2, #0
   1929c:	mla	ip, r6, r4, ip
   192a0:	subs	r6, r3, r6
   192a4:	mla	r7, r2, r5, ip
   192a8:	sbcs	r2, r0, r2
   192ac:	mov	ip, #0
   192b0:	mov	r2, #0
   192b4:	movwcc	ip, #1
   192b8:	cmp	ip, #0
   192bc:	mvnne	r1, #0
   192c0:	mvnne	r7, #0
   192c4:	subs	r6, r3, r1
   192c8:	ldr	r3, [sp, #24]
   192cc:	sbcs	r6, r0, r7
   192d0:	umull	r0, sl, r1, r5
   192d4:	movwcc	r2, #1
   192d8:	cmp	r2, #0
   192dc:	mvnne	r0, #0
   192e0:	mla	r1, r1, r3, sl
   192e4:	cmp	r2, #0
   192e8:	umull	r6, r4, r0, r5
   192ec:	mla	r1, r7, r5, r1
   192f0:	mvnne	r1, #0
   192f4:	mla	r4, r0, r3, r4
   192f8:	ldr	r3, [sp, #4]
   192fc:	mla	r7, r1, r5, r4
   19300:	ldr	r5, [sp, #16]
   19304:	subs	r0, r3, r0
   19308:	ldr	r0, [sp, #8]
   1930c:	sbcs	r0, r0, r1
   19310:	mov	r0, #0
   19314:	movwcc	r0, #1
   19318:	cmp	r0, #0
   1931c:	mov	r1, r0
   19320:	ldr	r0, [sp, #20]
   19324:	mvnne	r7, #0
   19328:	mvnne	r6, #0
   1932c:	orr	r0, r0, r5
   19330:	ldr	r5, [sp, #12]
   19334:	orr	r0, r0, r5
   19338:	orr	r0, r0, lr
   1933c:	orr	r0, r0, ip
   19340:	orr	r0, r0, r2
   19344:	b	197b4 <__assert_fail@plt+0x8480>
   19348:	mov	r1, #0
   1934c:	lsl	r2, r7, #10
   19350:	lsl	r0, r6, #10
   19354:	lsr	r3, r7, #22
   19358:	cmp	r1, r7, lsr #22
   1935c:	orr	r2, r2, r6, lsr #22
   19360:	mvnne	r0, #0
   19364:	movwne	r3, #1
   19368:	cmp	r1, r7, lsr #22
   1936c:	b	197e4 <__assert_fail@plt+0x84b0>
   19370:	mvn	r0, #0
   19374:	mvn	r1, #0
   19378:	mov	r2, r5
   1937c:	mov	sl, r3
   19380:	bl	19bac <__assert_fail@plt+0x8878>
   19384:	subs	r2, r0, r6
   19388:	mov	ip, r0
   1938c:	mov	r0, #0
   19390:	sbcs	r2, r1, r7
   19394:	umull	r4, r2, r6, r5
   19398:	movwcc	r0, #1
   1939c:	cmp	r0, #0
   193a0:	mla	r2, r6, sl, r2
   193a4:	str	r0, [sp, #20]
   193a8:	mvnne	r4, #0
   193ac:	cmp	r0, #0
   193b0:	mla	r2, r7, r5, r2
   193b4:	mov	r0, #0
   193b8:	umull	lr, r3, r4, r5
   193bc:	mvnne	r2, #0
   193c0:	mla	r3, r4, sl, r3
   193c4:	mla	r6, r2, r5, r3
   193c8:	subs	r3, ip, r4
   193cc:	mov	r3, r1
   193d0:	sbcs	r2, r1, r2
   193d4:	str	r3, [sp, #8]
   193d8:	movwcc	r0, #1
   193dc:	cmp	r0, #0
   193e0:	str	r0, [sp, #16]
   193e4:	mov	r0, ip
   193e8:	mvnne	lr, #0
   193ec:	mvnne	r6, #0
   193f0:	str	r0, [sp, #12]
   193f4:	subs	r2, ip, lr
   193f8:	umull	r7, r4, lr, r5
   193fc:	sbcs	r2, r1, r6
   19400:	mov	r2, #0
   19404:	movwcc	r2, #1
   19408:	mla	r4, lr, sl, r4
   1940c:	cmp	r2, #0
   19410:	mla	r6, r6, r5, r4
   19414:	mov	r4, #0
   19418:	mvnne	r7, #0
   1941c:	cmp	r2, #0
   19420:	umull	r1, ip, r7, r5
   19424:	mvnne	r6, #0
   19428:	mla	ip, r7, sl, ip
   1942c:	subs	r7, r0, r7
   19430:	sbcs	r7, r3, r6
   19434:	mla	lr, r6, r5, ip
   19438:	mov	ip, #0
   1943c:	movwcc	ip, #1
   19440:	cmp	ip, #0
   19444:	mvnne	r1, #0
   19448:	mvnne	lr, #0
   1944c:	subs	r7, r0, r1
   19450:	sbcs	r7, r3, lr
   19454:	umull	r0, r7, r1, r5
   19458:	movwcc	r4, #1
   1945c:	cmp	r4, #0
   19460:	mla	r1, r1, sl, r7
   19464:	mvnne	r0, #0
   19468:	cmp	r4, #0
   1946c:	mla	r1, lr, r5, r1
   19470:	umull	r6, r3, r0, r5
   19474:	mvnne	r1, #0
   19478:	mla	r3, r0, sl, r3
   1947c:	mla	r7, r1, r5, r3
   19480:	ldr	r3, [sp, #12]
   19484:	subs	r0, r3, r0
   19488:	ldr	r0, [sp, #8]
   1948c:	ldr	r3, [sp, #16]
   19490:	sbcs	r0, r0, r1
   19494:	mov	r0, #0
   19498:	movwcc	r0, #1
   1949c:	cmp	r0, #0
   194a0:	mov	r1, r0
   194a4:	ldr	r0, [sp, #20]
   194a8:	mvnne	r7, #0
   194ac:	mvnne	r6, #0
   194b0:	orr	r0, r0, r3
   194b4:	orr	r0, r0, r2
   194b8:	orr	r0, r0, ip
   194bc:	orr	r0, r0, r4
   194c0:	b	195e4 <__assert_fail@plt+0x82b0>
   194c4:	mvn	r0, #0
   194c8:	mvn	r1, #0
   194cc:	mov	r2, r5
   194d0:	mov	sl, r3
   194d4:	bl	19bac <__assert_fail@plt+0x8878>
   194d8:	umull	r3, r2, r6, r5
   194dc:	mov	lr, r1
   194e0:	mov	r1, r0
   194e4:	mla	r2, r6, sl, r2
   194e8:	subs	r6, r0, r6
   194ec:	mov	r0, #0
   194f0:	sbcs	r6, lr, r7
   194f4:	mla	r2, r7, r5, r2
   194f8:	movwcc	r0, #1
   194fc:	cmp	r0, #0
   19500:	str	r0, [sp, #20]
   19504:	mov	r0, r1
   19508:	mvnne	r3, #0
   1950c:	mvnne	r2, #0
   19510:	str	r0, [sp, #16]
   19514:	subs	r4, r1, r3
   19518:	umull	r7, ip, r3, r5
   1951c:	sbcs	r4, lr, r2
   19520:	mov	r4, #0
   19524:	movwcc	r4, #1
   19528:	mla	r3, r3, sl, ip
   1952c:	mov	ip, #0
   19530:	cmp	r4, #0
   19534:	mla	r2, r2, r5, r3
   19538:	mvnne	r7, #0
   1953c:	cmp	r4, #0
   19540:	umull	r1, r6, r7, r5
   19544:	mvnne	r2, #0
   19548:	mla	r6, r7, sl, r6
   1954c:	mla	r3, r2, r5, r6
   19550:	subs	r6, r0, r7
   19554:	sbcs	r2, lr, r2
   19558:	mov	r2, #0
   1955c:	movwcc	ip, #1
   19560:	cmp	ip, #0
   19564:	mvnne	r1, #0
   19568:	mvnne	r3, #0
   1956c:	subs	r6, r0, r1
   19570:	sbcs	r6, lr, r3
   19574:	umull	r0, r6, r1, r5
   19578:	movwcc	r2, #1
   1957c:	cmp	r2, #0
   19580:	mvnne	r0, #0
   19584:	cmp	r2, #0
   19588:	str	r6, [sp, #12]
   1958c:	umull	r6, r7, r0, r5
   19590:	mla	r7, r0, sl, r7
   19594:	str	r7, [sp, #8]
   19598:	ldr	r7, [sp, #12]
   1959c:	mla	r1, r1, sl, r7
   195a0:	mla	r1, r3, r5, r1
   195a4:	ldr	r3, [sp, #8]
   195a8:	mvnne	r1, #0
   195ac:	mla	r7, r1, r5, r3
   195b0:	ldr	r3, [sp, #16]
   195b4:	subs	r0, r3, r0
   195b8:	sbcs	r0, lr, r1
   195bc:	mov	r0, #0
   195c0:	movwcc	r0, #1
   195c4:	cmp	r0, #0
   195c8:	mov	r1, r0
   195cc:	ldr	r0, [sp, #20]
   195d0:	mvnne	r7, #0
   195d4:	mvnne	r6, #0
   195d8:	orr	r0, r0, r4
   195dc:	orr	r0, r0, ip
   195e0:	orr	r0, r0, r2
   195e4:	orr	r3, r0, r1
   195e8:	b	19818 <__assert_fail@plt+0x84e4>
   195ec:	mvn	r0, #0
   195f0:	mvn	r1, #0
   195f4:	mov	r2, r5
   195f8:	mov	sl, r3
   195fc:	bl	19bac <__assert_fail@plt+0x8878>
   19600:	mov	ip, r1
   19604:	subs	r1, r0, r6
   19608:	umull	r3, lr, r6, r5
   1960c:	mov	r2, r5
   19610:	sbcs	r1, ip, r7
   19614:	mov	r1, #0
   19618:	str	ip, [sp, #4]
   1961c:	movwcc	r1, #1
   19620:	mla	r6, r6, sl, lr
   19624:	cmp	r1, #0
   19628:	mla	r7, r7, r2, r6
   1962c:	str	r1, [sp, #20]
   19630:	mvnne	r3, #0
   19634:	cmp	r1, #0
   19638:	mov	r1, r0
   1963c:	umull	r4, r5, r3, r5
   19640:	mvnne	r7, #0
   19644:	mov	lr, r1
   19648:	mla	r5, r3, sl, r5
   1964c:	subs	r3, r0, r3
   19650:	sbcs	r0, ip, r7
   19654:	mov	r0, #0
   19658:	mla	r5, r7, r2, r5
   1965c:	movwcc	r0, #1
   19660:	cmp	r0, #0
   19664:	str	r0, [sp, #16]
   19668:	mvnne	r4, #0
   1966c:	mvnne	r5, #0
   19670:	subs	r0, r1, r4
   19674:	mov	r1, #0
   19678:	sbcs	r0, ip, r5
   1967c:	umull	r3, r0, r4, r2
   19680:	movwcc	r1, #1
   19684:	cmp	r1, #0
   19688:	mla	r0, r4, sl, r0
   1968c:	mov	r4, lr
   19690:	str	r1, [sp, #12]
   19694:	mvnne	r3, #0
   19698:	cmp	r1, #0
   1969c:	mla	r0, r5, r2, r0
   196a0:	str	r4, [sp]
   196a4:	umull	r7, r6, r3, r2
   196a8:	mvnne	r0, #0
   196ac:	mla	r6, r3, sl, r6
   196b0:	subs	r3, lr, r3
   196b4:	mov	r3, #0
   196b8:	mla	r5, r0, r2, r6
   196bc:	sbcs	r0, ip, r0
   196c0:	mov	r0, #0
   196c4:	movwcc	r0, #1
   196c8:	cmp	r0, #0
   196cc:	str	r0, [sp, #8]
   196d0:	mvnne	r7, #0
   196d4:	mvnne	r5, #0
   196d8:	subs	r0, lr, r7
   196dc:	sbcs	r0, ip, r5
   196e0:	umull	r6, r0, r7, r2
   196e4:	movwcc	r3, #1
   196e8:	cmp	r3, #0
   196ec:	mla	r7, r7, sl, r0
   196f0:	mov	r0, ip
   196f4:	mvnne	r6, #0
   196f8:	cmp	r3, #0
   196fc:	mla	r7, r5, r2, r7
   19700:	mov	r5, #0
   19704:	umull	r1, lr, r6, r2
   19708:	mvnne	r7, #0
   1970c:	mla	lr, r6, sl, lr
   19710:	subs	r6, r4, r6
   19714:	mla	lr, r7, r2, lr
   19718:	sbcs	r7, ip, r7
   1971c:	mov	ip, #0
   19720:	movwcc	ip, #1
   19724:	cmp	ip, #0
   19728:	mvnne	r1, #0
   1972c:	mvnne	lr, #0
   19730:	subs	r7, r4, r1
   19734:	sbcs	r7, r0, lr
   19738:	umull	r0, r7, r1, r2
   1973c:	movwcc	r5, #1
   19740:	cmp	r5, #0
   19744:	mla	r1, r1, sl, r7
   19748:	mvnne	r0, #0
   1974c:	cmp	r5, #0
   19750:	mla	r1, lr, r2, r1
   19754:	umull	r6, r4, r0, r2
   19758:	mvnne	r1, #0
   1975c:	mla	r4, r0, sl, r4
   19760:	mla	r7, r1, r2, r4
   19764:	ldr	r2, [sp]
   19768:	subs	r0, r2, r0
   1976c:	ldr	r0, [sp, #4]
   19770:	ldr	r2, [sp, #16]
   19774:	sbcs	r0, r0, r1
   19778:	mov	r0, #0
   1977c:	movwcc	r0, #1
   19780:	cmp	r0, #0
   19784:	mov	r1, r0
   19788:	ldr	r0, [sp, #20]
   1978c:	mvnne	r7, #0
   19790:	mvnne	r6, #0
   19794:	orr	r0, r0, r2
   19798:	ldr	r2, [sp, #12]
   1979c:	orr	r0, r0, r2
   197a0:	ldr	r2, [sp, #8]
   197a4:	orr	r0, r0, r2
   197a8:	orr	r0, r0, r3
   197ac:	orr	r0, r0, ip
   197b0:	orr	r0, r0, r5
   197b4:	orr	r0, r0, r1
   197b8:	and	r3, r0, #1
   197bc:	b	19818 <__assert_fail@plt+0x84e4>
   197c0:	mov	r1, #0
   197c4:	lsl	r2, r7, #9
   197c8:	lsl	r0, r6, #9
   197cc:	lsr	r3, r7, #23
   197d0:	cmp	r1, r7, lsr #23
   197d4:	orr	r2, r2, r6, lsr #23
   197d8:	mvnne	r0, #0
   197dc:	movwne	r3, #1
   197e0:	cmp	r1, r7, lsr #23
   197e4:	mvnne	r2, #0
   197e8:	mov	r6, r0
   197ec:	mov	r7, r2
   197f0:	b	19818 <__assert_fail@plt+0x84e4>
   197f4:	lsl	r1, r7, #1
   197f8:	cmp	r7, #0
   197fc:	lsl	r0, r6, #1
   19800:	lsr	r3, r7, #31
   19804:	orr	r1, r1, r6, lsr #31
   19808:	mvnmi	r0, #0
   1980c:	mvnmi	r1, #0
   19810:	mov	r6, r0
   19814:	mov	r7, r1
   19818:	ldr	r1, [sp, #32]
   1981c:	ldr	r2, [sp, #28]
   19820:	orr	r8, r3, r8
   19824:	add	r0, r1, r2
   19828:	str	r0, [r9]
   1982c:	ldrb	r0, [r1, r2]
   19830:	cmp	r0, #0
   19834:	orrne	r8, r8, #2
   19838:	ldr	r0, [sp, #36]	; 0x24
   1983c:	strd	r6, [r0]
   19840:	mov	r0, r8
   19844:	sub	sp, fp, #28
   19848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1984c:	movw	r0, #47432	; 0xb948
   19850:	movw	r1, #47470	; 0xb96e
   19854:	movw	r3, #47486	; 0xb97e
   19858:	mov	r2, #85	; 0x55
   1985c:	movt	r0, #1
   19860:	movt	r1, #1
   19864:	movt	r3, #1
   19868:	bl	11334 <__assert_fail@plt>
   1986c:	clz	r2, r1
   19870:	clz	r3, r0
   19874:	lsr	r2, r2, #5
   19878:	lsr	r3, r3, #5
   1987c:	orrs	r2, r3, r2
   19880:	movwne	r1, #1
   19884:	movwne	r0, #1
   19888:	cmp	r1, #0
   1988c:	beq	198bc <__assert_fail@plt+0x8588>
   19890:	mvn	r2, #-2147483648	; 0x80000000
   19894:	udiv	r2, r2, r1
   19898:	cmp	r2, r0
   1989c:	bcs	198bc <__assert_fail@plt+0x8588>
   198a0:	push	{fp, lr}
   198a4:	mov	fp, sp
   198a8:	bl	11214 <__errno_location@plt>
   198ac:	mov	r1, #12
   198b0:	str	r1, [r0]
   198b4:	mov	r0, #0
   198b8:	pop	{fp, pc}
   198bc:	b	11070 <calloc@plt>
   198c0:	cmp	r0, #0
   198c4:	movweq	r0, #1
   198c8:	cmn	r0, #1
   198cc:	ble	198d4 <__assert_fail@plt+0x85a0>
   198d0:	b	11190 <malloc@plt>
   198d4:	push	{fp, lr}
   198d8:	mov	fp, sp
   198dc:	bl	11214 <__errno_location@plt>
   198e0:	mov	r1, #12
   198e4:	str	r1, [r0]
   198e8:	mov	r0, #0
   198ec:	pop	{fp, pc}
   198f0:	push	{fp, lr}
   198f4:	mov	fp, sp
   198f8:	cmp	r0, #0
   198fc:	beq	19918 <__assert_fail@plt+0x85e4>
   19900:	cmp	r1, #0
   19904:	beq	19924 <__assert_fail@plt+0x85f0>
   19908:	cmn	r1, #1
   1990c:	ble	19930 <__assert_fail@plt+0x85fc>
   19910:	pop	{fp, lr}
   19914:	b	1110c <realloc@plt>
   19918:	mov	r0, r1
   1991c:	pop	{fp, lr}
   19920:	b	198c0 <__assert_fail@plt+0x858c>
   19924:	bl	15920 <__assert_fail@plt+0x45ec>
   19928:	mov	r0, #0
   1992c:	pop	{fp, pc}
   19930:	bl	11214 <__errno_location@plt>
   19934:	mov	r1, #12
   19938:	str	r1, [r0]
   1993c:	mov	r0, #0
   19940:	pop	{fp, pc}
   19944:	push	{r4, r5, r6, sl, fp, lr}
   19948:	add	fp, sp, #16
   1994c:	mov	r4, r0
   19950:	bl	11160 <__fpending@plt>
   19954:	ldr	r6, [r4]
   19958:	mov	r5, r0
   1995c:	mov	r0, r4
   19960:	bl	15828 <__assert_fail@plt+0x44f4>
   19964:	tst	r6, #32
   19968:	bne	199a0 <__assert_fail@plt+0x866c>
   1996c:	cmp	r0, #0
   19970:	mov	r4, r0
   19974:	mvnne	r4, #0
   19978:	cmp	r5, #0
   1997c:	bne	199ac <__assert_fail@plt+0x8678>
   19980:	cmp	r0, #0
   19984:	beq	199ac <__assert_fail@plt+0x8678>
   19988:	bl	11214 <__errno_location@plt>
   1998c:	ldr	r0, [r0]
   19990:	subs	r4, r0, #9
   19994:	mvnne	r4, #0
   19998:	mov	r0, r4
   1999c:	pop	{r4, r5, r6, sl, fp, pc}
   199a0:	mvn	r4, #0
   199a4:	cmp	r0, #0
   199a8:	beq	199b4 <__assert_fail@plt+0x8680>
   199ac:	mov	r0, r4
   199b0:	pop	{r4, r5, r6, sl, fp, pc}
   199b4:	bl	11214 <__errno_location@plt>
   199b8:	mov	r1, #0
   199bc:	str	r1, [r0]
   199c0:	mov	r0, r4
   199c4:	pop	{r4, r5, r6, sl, fp, pc}
   199c8:	push	{fp, lr}
   199cc:	mov	fp, sp
   199d0:	mov	r0, #14
   199d4:	bl	112c8 <nl_langinfo@plt>
   199d8:	movw	r1, #44487	; 0xadc7
   199dc:	cmp	r0, #0
   199e0:	movt	r1, #1
   199e4:	movne	r1, r0
   199e8:	movw	r0, #47565	; 0xb9cd
   199ec:	ldrb	r2, [r1]
   199f0:	movt	r0, #1
   199f4:	cmp	r2, #0
   199f8:	movne	r0, r1
   199fc:	pop	{fp, pc}
   19a00:	push	{r4, r5, r6, r7, fp, lr}
   19a04:	add	fp, sp, #16
   19a08:	sub	sp, sp, #8
   19a0c:	cmp	r0, #0
   19a10:	add	r5, sp, #4
   19a14:	mov	r7, r2
   19a18:	mov	r4, r1
   19a1c:	movne	r5, r0
   19a20:	mov	r0, r5
   19a24:	bl	1116c <mbrtowc@plt>
   19a28:	mov	r6, r0
   19a2c:	cmp	r7, #0
   19a30:	beq	19a58 <__assert_fail@plt+0x8724>
   19a34:	cmn	r6, #2
   19a38:	bcc	19a58 <__assert_fail@plt+0x8724>
   19a3c:	mov	r0, #0
   19a40:	bl	19aa0 <__assert_fail@plt+0x876c>
   19a44:	cmp	r0, #0
   19a48:	bne	19a58 <__assert_fail@plt+0x8724>
   19a4c:	ldrb	r0, [r4]
   19a50:	mov	r6, #1
   19a54:	str	r0, [r5]
   19a58:	mov	r0, r6
   19a5c:	sub	sp, fp, #16
   19a60:	pop	{r4, r5, r6, r7, fp, pc}
   19a64:	cmp	r2, #0
   19a68:	beq	19a98 <__assert_fail@plt+0x8764>
   19a6c:	mvn	r3, #0
   19a70:	udiv	r3, r3, r2
   19a74:	cmp	r3, r1
   19a78:	bcs	19a98 <__assert_fail@plt+0x8764>
   19a7c:	push	{fp, lr}
   19a80:	mov	fp, sp
   19a84:	bl	11214 <__errno_location@plt>
   19a88:	mov	r1, #12
   19a8c:	str	r1, [r0]
   19a90:	mov	r0, #0
   19a94:	pop	{fp, pc}
   19a98:	mul	r1, r2, r1
   19a9c:	b	198f0 <__assert_fail@plt+0x85bc>
   19aa0:	push	{r4, sl, fp, lr}
   19aa4:	add	fp, sp, #8
   19aa8:	sub	sp, sp, #264	; 0x108
   19aac:	add	r1, sp, #7
   19ab0:	movw	r2, #257	; 0x101
   19ab4:	bl	19b0c <__assert_fail@plt+0x87d8>
   19ab8:	mov	r4, #0
   19abc:	cmp	r0, #0
   19ac0:	bne	19b00 <__assert_fail@plt+0x87cc>
   19ac4:	movw	r1, #47571	; 0xb9d3
   19ac8:	add	r0, sp, #7
   19acc:	mov	r2, #2
   19ad0:	movt	r1, #1
   19ad4:	bl	111f0 <bcmp@plt>
   19ad8:	cmp	r0, #0
   19adc:	beq	19b00 <__assert_fail@plt+0x87cc>
   19ae0:	movw	r1, #47573	; 0xb9d5
   19ae4:	add	r0, sp, #7
   19ae8:	mov	r2, #6
   19aec:	movt	r1, #1
   19af0:	bl	111f0 <bcmp@plt>
   19af4:	cmp	r0, #0
   19af8:	mov	r4, r0
   19afc:	movwne	r4, #1
   19b00:	mov	r0, r4
   19b04:	sub	sp, fp, #8
   19b08:	pop	{r4, sl, fp, pc}
   19b0c:	push	{r4, r5, r6, r7, fp, lr}
   19b10:	add	fp, sp, #16
   19b14:	mov	r4, r1
   19b18:	mov	r1, #0
   19b1c:	mov	r6, r2
   19b20:	bl	112b0 <setlocale@plt>
   19b24:	cmp	r0, #0
   19b28:	beq	19b58 <__assert_fail@plt+0x8824>
   19b2c:	mov	r7, r0
   19b30:	bl	111fc <strlen@plt>
   19b34:	cmp	r0, r6
   19b38:	bcs	19b74 <__assert_fail@plt+0x8840>
   19b3c:	add	r2, r0, #1
   19b40:	mov	r0, r4
   19b44:	mov	r1, r7
   19b48:	bl	110d0 <memcpy@plt>
   19b4c:	mov	r5, #0
   19b50:	mov	r0, r5
   19b54:	pop	{r4, r5, r6, r7, fp, pc}
   19b58:	mov	r5, #22
   19b5c:	cmp	r6, #0
   19b60:	beq	19b9c <__assert_fail@plt+0x8868>
   19b64:	mov	r0, #0
   19b68:	strb	r0, [r4]
   19b6c:	mov	r0, r5
   19b70:	pop	{r4, r5, r6, r7, fp, pc}
   19b74:	mov	r5, #34	; 0x22
   19b78:	cmp	r6, #0
   19b7c:	beq	19b9c <__assert_fail@plt+0x8868>
   19b80:	sub	r6, r6, #1
   19b84:	mov	r0, r4
   19b88:	mov	r1, r7
   19b8c:	mov	r2, r6
   19b90:	bl	110d0 <memcpy@plt>
   19b94:	mov	r0, #0
   19b98:	strb	r0, [r4, r6]
   19b9c:	mov	r0, r5
   19ba0:	pop	{r4, r5, r6, r7, fp, pc}
   19ba4:	mov	r1, #0
   19ba8:	b	112b0 <setlocale@plt>
   19bac:	cmp	r3, #0
   19bb0:	cmpeq	r2, #0
   19bb4:	bne	19bcc <__assert_fail@plt+0x8898>
   19bb8:	cmp	r1, #0
   19bbc:	cmpeq	r0, #0
   19bc0:	mvnne	r1, #0
   19bc4:	mvnne	r0, #0
   19bc8:	b	19be8 <__assert_fail@plt+0x88b4>
   19bcc:	sub	sp, sp, #8
   19bd0:	push	{sp, lr}
   19bd4:	bl	19bf8 <__assert_fail@plt+0x88c4>
   19bd8:	ldr	lr, [sp, #4]
   19bdc:	add	sp, sp, #8
   19be0:	pop	{r2, r3}
   19be4:	bx	lr
   19be8:	push	{r1, lr}
   19bec:	mov	r0, #8
   19bf0:	bl	11088 <raise@plt>
   19bf4:	pop	{r1, pc}
   19bf8:	cmp	r1, r3
   19bfc:	cmpeq	r0, r2
   19c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c04:	mov	r4, r0
   19c08:	movcc	r0, #0
   19c0c:	mov	r5, r1
   19c10:	ldr	lr, [sp, #36]	; 0x24
   19c14:	movcc	r1, r0
   19c18:	bcc	19d14 <__assert_fail@plt+0x89e0>
   19c1c:	cmp	r3, #0
   19c20:	clzeq	ip, r2
   19c24:	clzne	ip, r3
   19c28:	addeq	ip, ip, #32
   19c2c:	cmp	r5, #0
   19c30:	clzeq	r1, r4
   19c34:	addeq	r1, r1, #32
   19c38:	clzne	r1, r5
   19c3c:	sub	ip, ip, r1
   19c40:	sub	sl, ip, #32
   19c44:	lsl	r9, r3, ip
   19c48:	rsb	fp, ip, #32
   19c4c:	orr	r9, r9, r2, lsl sl
   19c50:	orr	r9, r9, r2, lsr fp
   19c54:	lsl	r8, r2, ip
   19c58:	cmp	r5, r9
   19c5c:	cmpeq	r4, r8
   19c60:	movcc	r0, #0
   19c64:	movcc	r1, r0
   19c68:	bcc	19c84 <__assert_fail@plt+0x8950>
   19c6c:	mov	r0, #1
   19c70:	subs	r4, r4, r8
   19c74:	lsl	r1, r0, sl
   19c78:	orr	r1, r1, r0, lsr fp
   19c7c:	lsl	r0, r0, ip
   19c80:	sbc	r5, r5, r9
   19c84:	cmp	ip, #0
   19c88:	beq	19d14 <__assert_fail@plt+0x89e0>
   19c8c:	lsr	r6, r8, #1
   19c90:	orr	r6, r6, r9, lsl #31
   19c94:	lsr	r7, r9, #1
   19c98:	mov	r2, ip
   19c9c:	b	19cc0 <__assert_fail@plt+0x898c>
   19ca0:	subs	r3, r4, r6
   19ca4:	sbc	r8, r5, r7
   19ca8:	adds	r3, r3, r3
   19cac:	adc	r8, r8, r8
   19cb0:	adds	r4, r3, #1
   19cb4:	adc	r5, r8, #0
   19cb8:	subs	r2, r2, #1
   19cbc:	beq	19cdc <__assert_fail@plt+0x89a8>
   19cc0:	cmp	r5, r7
   19cc4:	cmpeq	r4, r6
   19cc8:	bcs	19ca0 <__assert_fail@plt+0x896c>
   19ccc:	adds	r4, r4, r4
   19cd0:	adc	r5, r5, r5
   19cd4:	subs	r2, r2, #1
   19cd8:	bne	19cc0 <__assert_fail@plt+0x898c>
   19cdc:	lsr	r3, r4, ip
   19ce0:	orr	r3, r3, r5, lsl fp
   19ce4:	lsr	r2, r5, ip
   19ce8:	orr	r3, r3, r5, lsr sl
   19cec:	adds	r0, r0, r4
   19cf0:	mov	r4, r3
   19cf4:	lsl	r3, r2, ip
   19cf8:	orr	r3, r3, r4, lsl sl
   19cfc:	lsl	ip, r4, ip
   19d00:	orr	r3, r3, r4, lsr fp
   19d04:	adc	r1, r1, r5
   19d08:	subs	r0, r0, ip
   19d0c:	mov	r5, r2
   19d10:	sbc	r1, r1, r3
   19d14:	cmp	lr, #0
   19d18:	strdne	r4, [lr]
   19d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d24:	mov	r7, r0
   19d28:	ldr	r6, [pc, #72]	; 19d78 <__assert_fail@plt+0x8a44>
   19d2c:	ldr	r5, [pc, #72]	; 19d7c <__assert_fail@plt+0x8a48>
   19d30:	add	r6, pc, r6
   19d34:	add	r5, pc, r5
   19d38:	sub	r6, r6, r5
   19d3c:	mov	r8, r1
   19d40:	mov	r9, r2
   19d44:	bl	11050 <calloc@plt-0x20>
   19d48:	asrs	r6, r6, #2
   19d4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d50:	mov	r4, #0
   19d54:	add	r4, r4, #1
   19d58:	ldr	r3, [r5], #4
   19d5c:	mov	r2, r9
   19d60:	mov	r1, r8
   19d64:	mov	r0, r7
   19d68:	blx	r3
   19d6c:	cmp	r6, r4
   19d70:	bne	19d54 <__assert_fail@plt+0x8a20>
   19d74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d78:	ldrdeq	r2, [r1], -r4
   19d7c:	andeq	r2, r1, ip, asr #3
   19d80:	bx	lr
   19d84:	ldr	r3, [pc, #12]	; 19d98 <__assert_fail@plt+0x8a64>
   19d88:	mov	r1, #0
   19d8c:	add	r3, pc, r3
   19d90:	ldr	r2, [r3]
   19d94:	b	1122c <__cxa_atexit@plt>
   19d98:	andeq	r2, r1, r0, ror r3

Disassembly of section .fini:

00019d9c <.fini>:
   19d9c:	push	{r3, lr}
   19da0:	pop	{r3, pc}
