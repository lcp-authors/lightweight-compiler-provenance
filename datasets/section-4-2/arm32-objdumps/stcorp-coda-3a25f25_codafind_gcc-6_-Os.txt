
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

000108a0 <.init>:
   108a0:	push	{r3, lr}
   108a4:	bl	10c94 <_start@@Base+0x3c>
   108a8:	pop	{r3, pc}

Disassembly of section .plt:

000108ac <coda_match_filefilter@plt-0x14>:
   108ac:	push	{lr}		; (str lr, [sp, #-4]!)
   108b0:	ldr	lr, [pc, #4]	; 108bc <coda_match_filefilter@plt-0x4>
   108b4:	add	lr, pc, lr
   108b8:	ldr	pc, [lr, #8]!
   108bc:	andeq	r1, r1, r4, asr #14

000108c0 <coda_match_filefilter@plt>:
   108c0:	add	ip, pc, #0, 12
   108c4:	add	ip, ip, #69632	; 0x11000
   108c8:	ldr	pc, [ip, #1860]!	; 0x744

000108cc <strcmp@plt>:
   108cc:	add	ip, pc, #0, 12
   108d0:	add	ip, ip, #69632	; 0x11000
   108d4:	ldr	pc, [ip, #1852]!	; 0x73c

000108d8 <printf@plt>:
   108d8:	add	ip, pc, #0, 12
   108dc:	add	ip, ip, #69632	; 0x11000
   108e0:	ldr	pc, [ip, #1844]!	; 0x734

000108e4 <coda_set_definition_path_conditional@plt>:
   108e4:	add	ip, pc, #0, 12
   108e8:	add	ip, ip, #69632	; 0x11000
   108ec:	ldr	pc, [ip, #1836]!	; 0x72c

000108f0 <coda_set_definition_path@plt>:
   108f0:	add	ip, pc, #0, 12
   108f4:	add	ip, ip, #69632	; 0x11000
   108f8:	ldr	pc, [ip, #1828]!	; 0x724

000108fc <coda_done@plt>:
   108fc:	add	ip, pc, #0, 12
   10900:	add	ip, ip, #69632	; 0x11000
   10904:	ldr	pc, [ip, #1820]!	; 0x71c

00010908 <puts@plt>:
   10908:	add	ip, pc, #0, 12
   1090c:	add	ip, ip, #69632	; 0x11000
   10910:	ldr	pc, [ip, #1812]!	; 0x714

00010914 <__libc_start_main@plt>:
   10914:	add	ip, pc, #0, 12
   10918:	add	ip, ip, #69632	; 0x11000
   1091c:	ldr	pc, [ip, #1804]!	; 0x70c

00010920 <__gmon_start__@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #69632	; 0x11000
   10928:	ldr	pc, [ip, #1796]!	; 0x704

0001092c <exit@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #69632	; 0x11000
   10934:	ldr	pc, [ip, #1788]!	; 0x6fc

00010938 <fprintf@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #69632	; 0x11000
   10940:	ldr	pc, [ip, #1780]!	; 0x6f4

00010944 <coda_init@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #69632	; 0x11000
   1094c:	ldr	pc, [ip, #1772]!	; 0x6ec

00010950 <coda_set_option_perform_conversions@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #69632	; 0x11000
   10958:	ldr	pc, [ip, #1764]!	; 0x6e4

0001095c <putchar@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #69632	; 0x11000
   10964:	ldr	pc, [ip, #1756]!	; 0x6dc

00010968 <coda_errno_to_string@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #69632	; 0x11000
   10970:	ldr	pc, [ip, #1748]!	; 0x6d4

00010974 <coda_get_libcoda_version@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #69632	; 0x11000
   1097c:	ldr	pc, [ip, #1740]!	; 0x6cc

00010980 <coda_get_errno@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #69632	; 0x11000
   10988:	ldr	pc, [ip, #1732]!	; 0x6c4

0001098c <fputs@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #69632	; 0x11000
   10994:	ldr	pc, [ip, #1724]!	; 0x6bc

00010998 <abort@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #69632	; 0x11000
   109a0:	ldr	pc, [ip, #1716]!	; 0x6b4

000109a4 <__assert_fail@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #69632	; 0x11000
   109ac:	ldr	pc, [ip, #1708]!	; 0x6ac

Disassembly of section .text:

000109b0 <main@@Base>:
   109b0:	ldr	r3, [pc, #596]	; 10c0c <main@@Base+0x25c>
   109b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109b8:	sub	sp, sp, #20
   109bc:	mov	r2, #0
   109c0:	cmp	r0, #1
   109c4:	str	r2, [r3]
   109c8:	str	r3, [sp, #12]
   109cc:	beq	10a04 <main@@Base+0x54>
   109d0:	ldr	r4, [r1, #4]
   109d4:	mov	r7, r0
   109d8:	mov	r6, r1
   109dc:	mov	r0, r4
   109e0:	ldr	r1, [pc, #552]	; 10c10 <main@@Base+0x260>
   109e4:	bl	108cc <strcmp@plt>
   109e8:	cmp	r0, #0
   109ec:	beq	10a04 <main@@Base+0x54>
   109f0:	ldr	r1, [pc, #540]	; 10c14 <main@@Base+0x264>
   109f4:	mov	r0, r4
   109f8:	bl	108cc <strcmp@plt>
   109fc:	cmp	r0, #0
   10a00:	bne	10a10 <main@@Base+0x60>
   10a04:	bl	10d80 <_start@@Base+0x128>
   10a08:	mov	r0, #0
   10a0c:	bl	1092c <exit@plt>
   10a10:	ldr	r1, [pc, #512]	; 10c18 <main@@Base+0x268>
   10a14:	mov	r0, r4
   10a18:	bl	108cc <strcmp@plt>
   10a1c:	cmp	r0, #0
   10a20:	beq	10a38 <main@@Base+0x88>
   10a24:	ldr	r1, [pc, #496]	; 10c1c <main@@Base+0x26c>
   10a28:	mov	r0, r4
   10a2c:	bl	108cc <strcmp@plt>
   10a30:	cmp	r0, #0
   10a34:	bne	10a5c <main@@Base+0xac>
   10a38:	bl	10974 <coda_get_libcoda_version@plt>
   10a3c:	mov	r1, r0
   10a40:	ldr	r0, [pc, #472]	; 10c20 <main@@Base+0x270>
   10a44:	bl	108d8 <printf@plt>
   10a48:	ldr	r0, [pc, #468]	; 10c24 <main@@Base+0x274>
   10a4c:	bl	10908 <puts@plt>
   10a50:	mov	r0, #10
   10a54:	bl	1095c <putchar@plt>
   10a58:	b	10a08 <main@@Base+0x58>
   10a5c:	cmp	r7, #2
   10a60:	ble	10b54 <main@@Base+0x1a4>
   10a64:	ldr	r1, [pc, #444]	; 10c28 <main@@Base+0x278>
   10a68:	mov	r0, r4
   10a6c:	bl	108cc <strcmp@plt>
   10a70:	cmp	r0, #0
   10a74:	bne	10b54 <main@@Base+0x1a4>
   10a78:	ldr	r0, [r6, #8]
   10a7c:	bl	108f0 <coda_set_definition_path@plt>
   10a80:	mov	r4, #3
   10a84:	mov	r9, #0
   10a88:	mov	r8, #1
   10a8c:	mov	fp, r9
   10a90:	cmp	r4, r7
   10a94:	lsl	sl, r4, #2
   10a98:	bge	10ba0 <main@@Base+0x1f0>
   10a9c:	ldr	r5, [r6, r4, lsl #2]
   10aa0:	ldr	r1, [pc, #388]	; 10c2c <main@@Base+0x27c>
   10aa4:	mov	r0, r5
   10aa8:	bl	108cc <strcmp@plt>
   10aac:	cmp	r0, #0
   10ab0:	beq	10bc0 <main@@Base+0x210>
   10ab4:	ldr	r1, [pc, #372]	; 10c30 <main@@Base+0x280>
   10ab8:	mov	r0, r5
   10abc:	bl	108cc <strcmp@plt>
   10ac0:	cmp	r0, #0
   10ac4:	beq	10bc0 <main@@Base+0x210>
   10ac8:	ldr	r1, [pc, #356]	; 10c34 <main@@Base+0x284>
   10acc:	mov	r0, r5
   10ad0:	bl	108cc <strcmp@plt>
   10ad4:	cmp	r0, #0
   10ad8:	beq	10af0 <main@@Base+0x140>
   10adc:	ldr	r1, [pc, #340]	; 10c38 <main@@Base+0x288>
   10ae0:	mov	r0, r5
   10ae4:	bl	108cc <strcmp@plt>
   10ae8:	cmp	r0, #0
   10aec:	bne	10b18 <main@@Base+0x168>
   10af0:	add	r2, r4, #1
   10af4:	cmp	r7, r2
   10af8:	ble	10b18 <main@@Base+0x168>
   10afc:	add	r3, r6, sl
   10b00:	ldr	r3, [r3, #4]
   10b04:	ldrb	r1, [r3]
   10b08:	cmp	r1, #45	; 0x2d
   10b0c:	movne	r4, r2
   10b10:	movne	r9, r3
   10b14:	bne	10b4c <main@@Base+0x19c>
   10b18:	ldr	r1, [pc, #284]	; 10c3c <main@@Base+0x28c>
   10b1c:	mov	r0, r5
   10b20:	bl	108cc <strcmp@plt>
   10b24:	cmp	r0, #0
   10b28:	beq	10b40 <main@@Base+0x190>
   10b2c:	ldr	r1, [pc, #268]	; 10c40 <main@@Base+0x290>
   10b30:	mov	r0, r5
   10b34:	bl	108cc <strcmp@plt>
   10b38:	cmp	r0, #0
   10b3c:	bne	10b98 <main@@Base+0x1e8>
   10b40:	ldr	r3, [sp, #12]
   10b44:	mov	r2, #1
   10b48:	str	r2, [r3]
   10b4c:	add	r4, r4, #1
   10b50:	b	10a90 <main@@Base+0xe0>
   10b54:	ldr	r2, [pc, #232]	; 10c44 <main@@Base+0x294>
   10b58:	mov	r1, #0
   10b5c:	ldr	r0, [r6]
   10b60:	bl	108e4 <coda_set_definition_path_conditional@plt>
   10b64:	cmp	r0, #0
   10b68:	moveq	r4, #1
   10b6c:	beq	10a84 <main@@Base+0xd4>
   10b70:	ldr	r3, [pc, #208]	; 10c48 <main@@Base+0x298>
   10b74:	ldr	r4, [r3]
   10b78:	bl	10980 <coda_get_errno@plt>
   10b7c:	ldr	r0, [r0]
   10b80:	bl	10968 <coda_errno_to_string@plt>
   10b84:	ldr	r1, [pc, #192]	; 10c4c <main@@Base+0x29c>
   10b88:	mov	r2, r0
   10b8c:	mov	r0, r4
   10b90:	bl	10938 <fprintf@plt>
   10b94:	b	10bb8 <main@@Base+0x208>
   10b98:	ldrb	r3, [r5]
   10b9c:	cmp	r3, #45	; 0x2d
   10ba0:	bne	10bc8 <main@@Base+0x218>
   10ba4:	ldr	r3, [pc, #156]	; 10c48 <main@@Base+0x298>
   10ba8:	ldr	r0, [pc, #160]	; 10c50 <main@@Base+0x2a0>
   10bac:	ldr	r1, [r3]
   10bb0:	bl	1098c <fputs@plt>
   10bb4:	bl	10d80 <_start@@Base+0x128>
   10bb8:	mov	r0, #1
   10bbc:	b	10a0c <main@@Base+0x5c>
   10bc0:	mov	r8, fp
   10bc4:	b	10b4c <main@@Base+0x19c>
   10bc8:	bl	10944 <coda_init@plt>
   10bcc:	subs	r5, r0, #0
   10bd0:	bne	10b70 <main@@Base+0x1c0>
   10bd4:	mov	r0, r8
   10bd8:	bl	10950 <coda_set_option_perform_conversions@plt>
   10bdc:	sub	r1, r7, r4
   10be0:	str	r5, [sp]
   10be4:	ldr	r3, [pc, #104]	; 10c54 <main@@Base+0x2a4>
   10be8:	add	r2, r6, sl
   10bec:	mov	r0, r9
   10bf0:	bl	108c0 <coda_match_filefilter@plt>
   10bf4:	subs	r4, r0, #0
   10bf8:	bne	10b70 <main@@Base+0x1c0>
   10bfc:	bl	108fc <coda_done@plt>
   10c00:	mov	r0, r4
   10c04:	add	sp, sp, #20
   10c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c0c:	andeq	r2, r2, r0, ror r0
   10c10:			; <UNDEFINED> instruction: 0x000115bb
   10c14:	andeq	r1, r1, r5, asr #5
   10c18:			; <UNDEFINED> instruction: 0x000115be
   10c1c:	strdeq	r1, [r1], -fp
   10c20:	andeq	r1, r1, r1, asr #11
   10c24:	andeq	r1, r1, lr, asr #11
   10c28:	strdeq	r1, [r1], -lr
   10c2c:	andeq	r1, r1, r6, lsr #12
   10c30:	andeq	r1, r1, r0, lsr #2
   10c34:	andeq	r1, r1, r9, lsr #12
   10c38:	andeq	r1, r1, ip, lsr #12
   10c3c:	andeq	r1, r1, r5, lsr r6
   10c40:	andeq	r1, r1, r8, lsr r6
   10c44:	andeq	r1, r1, r1, lsl #12
   10c48:	andeq	r2, r2, r8, rrx
   10c4c:	andeq	r1, r1, fp, lsl r6
   10c50:	andeq	r1, r1, r4, asr #12
   10c54:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00010c58 <_start@@Base>:
   10c58:	mov	fp, #0
   10c5c:	mov	lr, #0
   10c60:	pop	{r1}		; (ldr r1, [sp], #4)
   10c64:	mov	r2, sp
   10c68:	push	{r2}		; (str r2, [sp, #-4]!)
   10c6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c70:	ldr	ip, [pc, #16]	; 10c88 <_start@@Base+0x30>
   10c74:	push	{ip}		; (str ip, [sp, #-4]!)
   10c78:	ldr	r0, [pc, #12]	; 10c8c <_start@@Base+0x34>
   10c7c:	ldr	r3, [pc, #12]	; 10c90 <_start@@Base+0x38>
   10c80:	bl	10914 <__libc_start_main@plt>
   10c84:	bl	10998 <abort@plt>
   10c88:	andeq	r1, r1, r8, lsr r0
   10c8c:			; <UNDEFINED> instruction: 0x000109b0
   10c90:	ldrdeq	r0, [r1], -r8
   10c94:	ldr	r3, [pc, #20]	; 10cb0 <_start@@Base+0x58>
   10c98:	ldr	r2, [pc, #20]	; 10cb4 <_start@@Base+0x5c>
   10c9c:	add	r3, pc, r3
   10ca0:	ldr	r2, [r3, r2]
   10ca4:	cmp	r2, #0
   10ca8:	bxeq	lr
   10cac:	b	10920 <__gmon_start__@plt>
   10cb0:	andeq	r1, r1, ip, asr r3
   10cb4:	andeq	r0, r0, ip, asr r0
   10cb8:	ldr	r3, [pc, #28]	; 10cdc <_start@@Base+0x84>
   10cbc:	ldr	r0, [pc, #28]	; 10ce0 <_start@@Base+0x88>
   10cc0:	sub	r3, r3, r0
   10cc4:	cmp	r3, #6
   10cc8:	bxls	lr
   10ccc:	ldr	r3, [pc, #16]	; 10ce4 <_start@@Base+0x8c>
   10cd0:	cmp	r3, #0
   10cd4:	bxeq	lr
   10cd8:	bx	r3
   10cdc:	andeq	r2, r2, fp, rrx
   10ce0:	andeq	r2, r2, r8, rrx
   10ce4:	andeq	r0, r0, r0
   10ce8:	ldr	r1, [pc, #36]	; 10d14 <_start@@Base+0xbc>
   10cec:	ldr	r0, [pc, #36]	; 10d18 <_start@@Base+0xc0>
   10cf0:	sub	r1, r1, r0
   10cf4:	asr	r1, r1, #2
   10cf8:	add	r1, r1, r1, lsr #31
   10cfc:	asrs	r1, r1, #1
   10d00:	bxeq	lr
   10d04:	ldr	r3, [pc, #16]	; 10d1c <_start@@Base+0xc4>
   10d08:	cmp	r3, #0
   10d0c:	bxeq	lr
   10d10:	bx	r3
   10d14:	andeq	r2, r2, r8, rrx
   10d18:	andeq	r2, r2, r8, rrx
   10d1c:	andeq	r0, r0, r0
   10d20:	push	{r4, lr}
   10d24:	ldr	r4, [pc, #24]	; 10d44 <_start@@Base+0xec>
   10d28:	ldrb	r3, [r4]
   10d2c:	cmp	r3, #0
   10d30:	popne	{r4, pc}
   10d34:	bl	10cb8 <_start@@Base+0x60>
   10d38:	mov	r3, #1
   10d3c:	strb	r3, [r4]
   10d40:	pop	{r4, pc}
   10d44:	andeq	r2, r2, ip, rrx
   10d48:	ldr	r0, [pc, #40]	; 10d78 <_start@@Base+0x120>
   10d4c:	ldr	r3, [r0]
   10d50:	cmp	r3, #0
   10d54:	bne	10d5c <_start@@Base+0x104>
   10d58:	b	10ce8 <_start@@Base+0x90>
   10d5c:	ldr	r3, [pc, #24]	; 10d7c <_start@@Base+0x124>
   10d60:	cmp	r3, #0
   10d64:	beq	10d58 <_start@@Base+0x100>
   10d68:	push	{r4, lr}
   10d6c:	blx	r3
   10d70:	pop	{r4, lr}
   10d74:	b	10ce8 <_start@@Base+0x90>
   10d78:	strdeq	r1, [r2], -ip
   10d7c:	andeq	r0, r0, r0
   10d80:	push	{r4, lr}
   10d84:	ldr	r0, [pc, #228]	; 10e70 <_start@@Base+0x218>
   10d88:	bl	10908 <puts@plt>
   10d8c:	ldr	r0, [pc, #224]	; 10e74 <_start@@Base+0x21c>
   10d90:	bl	10908 <puts@plt>
   10d94:	ldr	r0, [pc, #220]	; 10e78 <_start@@Base+0x220>
   10d98:	bl	10908 <puts@plt>
   10d9c:	ldr	r0, [pc, #216]	; 10e7c <_start@@Base+0x224>
   10da0:	bl	10908 <puts@plt>
   10da4:	mov	r0, #10
   10da8:	bl	1095c <putchar@plt>
   10dac:	ldr	r0, [pc, #204]	; 10e80 <_start@@Base+0x228>
   10db0:	bl	10908 <puts@plt>
   10db4:	ldr	r0, [pc, #200]	; 10e84 <_start@@Base+0x22c>
   10db8:	bl	10908 <puts@plt>
   10dbc:	ldr	r0, [pc, #196]	; 10e88 <_start@@Base+0x230>
   10dc0:	bl	10908 <puts@plt>
   10dc4:	ldr	r0, [pc, #192]	; 10e8c <_start@@Base+0x234>
   10dc8:	bl	10908 <puts@plt>
   10dcc:	ldr	r0, [pc, #188]	; 10e90 <_start@@Base+0x238>
   10dd0:	bl	10908 <puts@plt>
   10dd4:	ldr	r0, [pc, #184]	; 10e94 <_start@@Base+0x23c>
   10dd8:	bl	10908 <puts@plt>
   10ddc:	ldr	r0, [pc, #180]	; 10e98 <_start@@Base+0x240>
   10de0:	bl	10908 <puts@plt>
   10de4:	ldr	r0, [pc, #176]	; 10e9c <_start@@Base+0x244>
   10de8:	bl	10908 <puts@plt>
   10dec:	ldr	r0, [pc, #172]	; 10ea0 <_start@@Base+0x248>
   10df0:	bl	10908 <puts@plt>
   10df4:	mov	r0, #10
   10df8:	bl	1095c <putchar@plt>
   10dfc:	ldr	r0, [pc, #160]	; 10ea4 <_start@@Base+0x24c>
   10e00:	bl	10908 <puts@plt>
   10e04:	ldr	r0, [pc, #156]	; 10ea8 <_start@@Base+0x250>
   10e08:	bl	10908 <puts@plt>
   10e0c:	mov	r0, #10
   10e10:	bl	1095c <putchar@plt>
   10e14:	ldr	r0, [pc, #144]	; 10eac <_start@@Base+0x254>
   10e18:	bl	10908 <puts@plt>
   10e1c:	ldr	r0, [pc, #140]	; 10eb0 <_start@@Base+0x258>
   10e20:	bl	10908 <puts@plt>
   10e24:	mov	r0, #10
   10e28:	bl	1095c <putchar@plt>
   10e2c:	ldr	r0, [pc, #128]	; 10eb4 <_start@@Base+0x25c>
   10e30:	bl	10908 <puts@plt>
   10e34:	ldr	r0, [pc, #124]	; 10eb8 <_start@@Base+0x260>
   10e38:	bl	10908 <puts@plt>
   10e3c:	ldr	r0, [pc, #120]	; 10ebc <_start@@Base+0x264>
   10e40:	bl	10908 <puts@plt>
   10e44:	ldr	r0, [pc, #116]	; 10ec0 <_start@@Base+0x268>
   10e48:	bl	10908 <puts@plt>
   10e4c:	ldr	r0, [pc, #112]	; 10ec4 <_start@@Base+0x26c>
   10e50:	bl	10908 <puts@plt>
   10e54:	ldr	r0, [pc, #108]	; 10ec8 <_start@@Base+0x270>
   10e58:	bl	10908 <puts@plt>
   10e5c:	ldr	r0, [pc, #104]	; 10ecc <_start@@Base+0x274>
   10e60:	bl	10908 <puts@plt>
   10e64:	mov	r0, #10
   10e68:	pop	{r4, lr}
   10e6c:	b	1095c <putchar@plt>
   10e70:	andeq	r1, r1, r1, asr r0
   10e74:	andeq	r1, r1, r8, asr r0
   10e78:	muleq	r1, r9, r0
   10e7c:	andeq	r1, r1, r8, ror #1
   10e80:	strdeq	r1, [r1], -pc	; <UNPREDICTABLE>
   10e84:	andeq	r1, r1, r0, lsl r1
   10e88:	andeq	r1, r1, r6, lsr r1
   10e8c:	andeq	r1, r1, r0, ror r1
   10e90:	muleq	r1, pc, r1	; <UNPREDICTABLE>
   10e94:	andeq	r1, r1, r7, ror #3
   10e98:	andeq	r1, r1, r6, lsr r2
   10e9c:	andeq	r1, r1, r2, ror #4
   10ea0:	andeq	r1, r1, ip, ror r2
   10ea4:			; <UNDEFINED> instruction: 0x000112b4
   10ea8:	andeq	r1, r1, ip, asr #5
   10eac:	andeq	r1, r1, sl, ror #5
   10eb0:	andeq	r1, r1, r5, lsl #6
   10eb4:	andeq	r1, r1, r7, lsr r3
   10eb8:	andeq	r1, r1, r5, lsl #7
   10ebc:	andeq	r1, r1, lr, asr #7
   10ec0:	strdeq	r1, [r1], -r9
   10ec4:	andeq	r1, r1, r5, asr #8
   10ec8:	andeq	r1, r1, fp, lsl #9
   10ecc:	andeq	r1, r1, sl, asr #9

00010ed0 <callback@@Base>:
   10ed0:	push	{r4, lr}
   10ed4:	subs	r4, r1, #0
   10ed8:	mov	r3, r2
   10edc:	ldreq	r1, [pc, #196]	; 10fa8 <callback@@Base+0xd8>
   10ee0:	moveq	r2, r0
   10ee4:	beq	10f1c <callback@@Base+0x4c>
   10ee8:	cmp	r4, #2
   10eec:	bne	10f0c <callback@@Base+0x3c>
   10ef0:	ldr	r3, [pc, #180]	; 10fac <callback@@Base+0xdc>
   10ef4:	mov	r2, r0
   10ef8:	ldr	r1, [pc, #176]	; 10fb0 <callback@@Base+0xe0>
   10efc:	ldr	r0, [r3]
   10f00:	bl	10938 <fprintf@plt>
   10f04:	mov	r0, #0
   10f08:	pop	{r4, pc}
   10f0c:	cmp	r4, #1
   10f10:	bne	10f2c <callback@@Base+0x5c>
   10f14:	ldr	r1, [pc, #152]	; 10fb4 <callback@@Base+0xe4>
   10f18:	mov	r2, r0
   10f1c:	ldr	r0, [pc, #136]	; 10fac <callback@@Base+0xdc>
   10f20:	ldr	r0, [r0]
   10f24:	bl	10938 <fprintf@plt>
   10f28:	b	10f04 <callback@@Base+0x34>
   10f2c:	ldr	r3, [pc, #132]	; 10fb8 <callback@@Base+0xe8>
   10f30:	ldr	r3, [r3]
   10f34:	cmp	r3, #0
   10f38:	beq	10f9c <callback@@Base+0xcc>
   10f3c:	mov	r1, r0
   10f40:	ldr	r0, [pc, #116]	; 10fbc <callback@@Base+0xec>
   10f44:	bl	108d8 <printf@plt>
   10f48:	cmp	r4, #5
   10f4c:	ldrls	pc, [pc, r4, lsl #2]
   10f50:	b	10f04 <callback@@Base+0x34>
   10f54:	andeq	r0, r1, ip, ror #30
   10f58:	andeq	r0, r1, ip, ror #30
   10f5c:	andeq	r0, r1, ip, ror #30
   10f60:	andeq	r0, r1, r0, lsl #31
   10f64:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   10f68:	andeq	r0, r1, ip, lsl #31
   10f6c:	ldr	r3, [pc, #76]	; 10fc0 <callback@@Base+0xf0>
   10f70:	mov	r2, #110	; 0x6e
   10f74:	ldr	r1, [pc, #72]	; 10fc4 <callback@@Base+0xf4>
   10f78:	ldr	r0, [pc, #72]	; 10fc8 <callback@@Base+0xf8>
   10f7c:	bl	109a4 <__assert_fail@plt>
   10f80:	ldr	r0, [pc, #68]	; 10fcc <callback@@Base+0xfc>
   10f84:	bl	10908 <puts@plt>
   10f88:	b	10f04 <callback@@Base+0x34>
   10f8c:	ldr	r0, [pc, #60]	; 10fd0 <callback@@Base+0x100>
   10f90:	b	10f84 <callback@@Base+0xb4>
   10f94:	ldr	r0, [pc, #56]	; 10fd4 <callback@@Base+0x104>
   10f98:	b	10f84 <callback@@Base+0xb4>
   10f9c:	cmp	r4, #4
   10fa0:	bne	10f04 <callback@@Base+0x34>
   10fa4:	b	10f84 <callback@@Base+0xb4>
   10fa8:	andeq	r1, r1, sl, lsl #10
   10fac:	andeq	r2, r2, r8, rrx
   10fb0:	andeq	r1, r1, r2, lsl r5
   10fb4:	andeq	r1, r1, r2, lsr r5
   10fb8:	andeq	r2, r2, r0, ror r0
   10fbc:	andeq	r1, r1, r0, asr r5
   10fc0:	andeq	r1, r1, r8, asr #32
   10fc4:	andeq	r1, r1, r7, asr r5
   10fc8:	muleq	r1, ip, r5
   10fcc:	muleq	r1, lr, r5
   10fd0:			; <UNDEFINED> instruction: 0x000115b2
   10fd4:			; <UNDEFINED> instruction: 0x000115b5

00010fd8 <__libc_csu_init@@Base>:
   10fd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10fdc:	mov	r7, r0
   10fe0:	ldr	r6, [pc, #72]	; 11030 <__libc_csu_init@@Base+0x58>
   10fe4:	ldr	r5, [pc, #72]	; 11034 <__libc_csu_init@@Base+0x5c>
   10fe8:	add	r6, pc, r6
   10fec:	add	r5, pc, r5
   10ff0:	sub	r6, r6, r5
   10ff4:	mov	r8, r1
   10ff8:	mov	r9, r2
   10ffc:	bl	108a0 <coda_match_filefilter@plt-0x20>
   11000:	asrs	r6, r6, #2
   11004:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11008:	mov	r4, #0
   1100c:	add	r4, r4, #1
   11010:	ldr	r3, [r5], #4
   11014:	mov	r2, r9
   11018:	mov	r1, r8
   1101c:	mov	r0, r7
   11020:	blx	r3
   11024:	cmp	r6, r4
   11028:	bne	1100c <__libc_csu_init@@Base+0x34>
   1102c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11030:	andeq	r0, r1, r8, lsl #30
   11034:	andeq	r0, r1, r0, lsl #30

00011038 <__libc_csu_fini@@Base>:
   11038:	bx	lr

Disassembly of section .fini:

0001103c <.fini>:
   1103c:	push	{r3, lr}
   11040:	pop	{r3, pc}
