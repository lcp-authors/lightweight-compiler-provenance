
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011408 <.init>:
   11408:	push	{r3, lr}
   1140c:	bl	11848 <__assert_fail@plt+0x48>
   11410:	pop	{r3, pc}

Disassembly of section .plt:

00011414 <fdopen@plt-0x14>:
   11414:	push	{lr}		; (str lr, [sp, #-4]!)
   11418:	ldr	lr, [pc, #4]	; 11424 <fdopen@plt-0x4>
   1141c:	add	lr, pc, lr
   11420:	ldr	pc, [lr, #8]!
   11424:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>

00011428 <fdopen@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3036]!	; 0xbdc

00011434 <calloc@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011440 <strcmp@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3020]!	; 0xbcc

0001144c <strtol@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3012]!	; 0xbc4

00011458 <printf@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3004]!	; 0xbbc

00011464 <read@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011470 <fflush@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #28, 20	; 0x1c000
   11478:	ldr	pc, [ip, #2988]!	; 0xbac

0001147c <wcwidth@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #28, 20	; 0x1c000
   11484:	ldr	pc, [ip, #2980]!	; 0xba4

00011488 <free@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #28, 20	; 0x1c000
   11490:	ldr	pc, [ip, #2972]!	; 0xb9c

00011494 <ferror@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #28, 20	; 0x1c000
   1149c:	ldr	pc, [ip, #2964]!	; 0xb94

000114a0 <_exit@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #28, 20	; 0x1c000
   114a8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114ac <memcpy@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #28, 20	; 0x1c000
   114b4:	ldr	pc, [ip, #2948]!	; 0xb84

000114b8 <execvp@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #28, 20	; 0x1c000
   114c0:	ldr	pc, [ip, #2940]!	; 0xb7c

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #28, 20	; 0x1c000
   114cc:	ldr	pc, [ip, #2932]!	; 0xb74

000114d0 <signal@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #28, 20	; 0x1c000
   114d8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114dc <dcgettext@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #28, 20	; 0x1c000
   114e4:	ldr	pc, [ip, #2916]!	; 0xb64

000114e8 <sysconf@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #28, 20	; 0x1c000
   114f0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114f4 <dup2@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #28, 20	; 0x1c000
   114fc:	ldr	pc, [ip, #2900]!	; 0xb54

00011500 <getrlimit64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #28, 20	; 0x1c000
   11508:	ldr	pc, [ip, #2892]!	; 0xb4c

0001150c <realloc@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #28, 20	; 0x1c000
   11514:	ldr	pc, [ip, #2884]!	; 0xb44

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #28, 20	; 0x1c000
   11520:	ldr	pc, [ip, #2876]!	; 0xb3c

00011524 <iswcntrl@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #28, 20	; 0x1c000
   1152c:	ldr	pc, [ip, #2868]!	; 0xb34

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #28, 20	; 0x1c000
   11538:	ldr	pc, [ip, #2860]!	; 0xb2c

0001153c <poll@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #28, 20	; 0x1c000
   11544:	ldr	pc, [ip, #2852]!	; 0xb24

00011548 <sigaction@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #28, 20	; 0x1c000
   11550:	ldr	pc, [ip, #2844]!	; 0xb1c

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #28, 20	; 0x1c000
   1155c:	ldr	pc, [ip, #2836]!	; 0xb14

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #28, 20	; 0x1c000
   11568:	ldr	pc, [ip, #2828]!	; 0xb0c

0001156c <waitpid@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #28, 20	; 0x1c000
   11574:	ldr	pc, [ip, #2820]!	; 0xb04

00011578 <__ctype_get_mb_cur_max@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #28, 20	; 0x1c000
   11580:	ldr	pc, [ip, #2812]!	; 0xafc

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #28, 20	; 0x1c000
   1158c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #28, 20	; 0x1c000
   11598:	ldr	pc, [ip, #2796]!	; 0xaec

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #28, 20	; 0x1c000
   115a4:	ldr	pc, [ip, #2788]!	; 0xae4

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #28, 20	; 0x1c000
   115b0:	ldr	pc, [ip, #2780]!	; 0xadc

000115b4 <opendir@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #28, 20	; 0x1c000
   115bc:	ldr	pc, [ip, #2772]!	; 0xad4

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #28, 20	; 0x1c000
   115c8:	ldr	pc, [ip, #2764]!	; 0xacc

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #28, 20	; 0x1c000
   115d4:	ldr	pc, [ip, #2756]!	; 0xac4

000115d8 <malloc@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #28, 20	; 0x1c000
   115e0:	ldr	pc, [ip, #2748]!	; 0xabc

000115e4 <__libc_start_main@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #28, 20	; 0x1c000
   115ec:	ldr	pc, [ip, #2740]!	; 0xab4

000115f0 <__freading@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #28, 20	; 0x1c000
   115f8:	ldr	pc, [ip, #2732]!	; 0xaac

000115fc <__gmon_start__@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #28, 20	; 0x1c000
   11604:	ldr	pc, [ip, #2724]!	; 0xaa4

00011608 <getopt_long@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #28, 20	; 0x1c000
   11610:	ldr	pc, [ip, #2716]!	; 0xa9c

00011614 <__ctype_b_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #28, 20	; 0x1c000
   1161c:	ldr	pc, [ip, #2708]!	; 0xa94

00011620 <getpid@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #28, 20	; 0x1c000
   11628:	ldr	pc, [ip, #2700]!	; 0xa8c

0001162c <exit@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #28, 20	; 0x1c000
   11634:	ldr	pc, [ip, #2692]!	; 0xa84

00011638 <bcmp@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #28, 20	; 0x1c000
   11640:	ldr	pc, [ip, #2684]!	; 0xa7c

00011644 <strtoul@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #28, 20	; 0x1c000
   1164c:	ldr	pc, [ip, #2676]!	; 0xa74

00011650 <strlen@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #28, 20	; 0x1c000
   11658:	ldr	pc, [ip, #2668]!	; 0xa6c

0001165c <strchr@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #28, 20	; 0x1c000
   11664:	ldr	pc, [ip, #2660]!	; 0xa64

00011668 <setenv@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #28, 20	; 0x1c000
   11670:	ldr	pc, [ip, #2652]!	; 0xa5c

00011674 <fprintf@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #28, 20	; 0x1c000
   1167c:	ldr	pc, [ip, #2644]!	; 0xa54

00011680 <__errno_location@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #28, 20	; 0x1c000
   11688:	ldr	pc, [ip, #2636]!	; 0xa4c

0001168c <snprintf@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #28, 20	; 0x1c000
   11694:	ldr	pc, [ip, #2628]!	; 0xa44

00011698 <__cxa_atexit@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #28, 20	; 0x1c000
   116a0:	ldr	pc, [ip, #2620]!	; 0xa3c

000116a4 <memset@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #28, 20	; 0x1c000
   116ac:	ldr	pc, [ip, #2612]!	; 0xa34

000116b0 <strncpy@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #28, 20	; 0x1c000
   116b8:	ldr	pc, [ip, #2604]!	; 0xa2c

000116bc <write@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #28, 20	; 0x1c000
   116c4:	ldr	pc, [ip, #2596]!	; 0xa24

000116c8 <fileno@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #28, 20	; 0x1c000
   116d0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116d4 <memchr@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #28, 20	; 0x1c000
   116dc:	ldr	pc, [ip, #2580]!	; 0xa14

000116e0 <fclose@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #28, 20	; 0x1c000
   116e8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116ec <strnlen@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #28, 20	; 0x1c000
   116f4:	ldr	pc, [ip, #2564]!	; 0xa04

000116f8 <pipe@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #28, 20	; 0x1c000
   11700:	ldr	pc, [ip, #2556]!	; 0x9fc

00011704 <fseeko64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #28, 20	; 0x1c000
   1170c:	ldr	pc, [ip, #2548]!	; 0x9f4

00011710 <fcntl64@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #28, 20	; 0x1c000
   11718:	ldr	pc, [ip, #2540]!	; 0x9ec

0001171c <setlocale@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #28, 20	; 0x1c000
   11724:	ldr	pc, [ip, #2532]!	; 0x9e4

00011728 <sigemptyset@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #28, 20	; 0x1c000
   11730:	ldr	pc, [ip, #2524]!	; 0x9dc

00011734 <fork@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #28, 20	; 0x1c000
   1173c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011740 <strrchr@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #28, 20	; 0x1c000
   11748:	ldr	pc, [ip, #2508]!	; 0x9cc

0001174c <nl_langinfo@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #28, 20	; 0x1c000
   11754:	ldr	pc, [ip, #2500]!	; 0x9c4

00011758 <fputc@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #28, 20	; 0x1c000
   11760:	ldr	pc, [ip, #2492]!	; 0x9bc

00011764 <readdir64@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #28, 20	; 0x1c000
   1176c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011770 <fdopendir@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #28, 20	; 0x1c000
   11778:	ldr	pc, [ip, #2476]!	; 0x9ac

0001177c <putc@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #28, 20	; 0x1c000
   11784:	ldr	pc, [ip, #2468]!	; 0x9a4

00011788 <dirfd@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #28, 20	; 0x1c000
   11790:	ldr	pc, [ip, #2460]!	; 0x99c

00011794 <bindtextdomain@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #28, 20	; 0x1c000
   1179c:	ldr	pc, [ip, #2452]!	; 0x994

000117a0 <isatty@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #28, 20	; 0x1c000
   117a8:	ldr	pc, [ip, #2444]!	; 0x98c

000117ac <unsetenv@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #28, 20	; 0x1c000
   117b4:	ldr	pc, [ip, #2436]!	; 0x984

000117b8 <fputs@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #28, 20	; 0x1c000
   117c0:	ldr	pc, [ip, #2428]!	; 0x97c

000117c4 <strncmp@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #28, 20	; 0x1c000
   117cc:	ldr	pc, [ip, #2420]!	; 0x974

000117d0 <abort@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #28, 20	; 0x1c000
   117d8:	ldr	pc, [ip, #2412]!	; 0x96c

000117dc <getc@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #28, 20	; 0x1c000
   117e4:	ldr	pc, [ip, #2404]!	; 0x964

000117e8 <close@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #28, 20	; 0x1c000
   117f0:	ldr	pc, [ip, #2396]!	; 0x95c

000117f4 <closedir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #28, 20	; 0x1c000
   117fc:	ldr	pc, [ip, #2388]!	; 0x954

00011800 <__assert_fail@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #28, 20	; 0x1c000
   11808:	ldr	pc, [ip, #2380]!	; 0x94c

Disassembly of section .text:

0001180c <.text>:
   1180c:	mov	fp, #0
   11810:	mov	lr, #0
   11814:	pop	{r1}		; (ldr r1, [sp], #4)
   11818:	mov	r2, sp
   1181c:	push	{r2}		; (str r2, [sp, #-4]!)
   11820:	push	{r0}		; (str r0, [sp, #-4]!)
   11824:	ldr	ip, [pc, #16]	; 1183c <__assert_fail@plt+0x3c>
   11828:	push	{ip}		; (str ip, [sp, #-4]!)
   1182c:	ldr	r0, [pc, #12]	; 11840 <__assert_fail@plt+0x40>
   11830:	ldr	r3, [pc, #12]	; 11844 <__assert_fail@plt+0x44>
   11834:	bl	115e4 <__libc_start_main@plt>
   11838:	bl	117d0 <abort@plt>
   1183c:			; <UNDEFINED> instruction: 0x0001adb0
   11840:	strdeq	r1, [r1], -ip
   11844:	andeq	sl, r1, r0, asr sp
   11848:	ldr	r3, [pc, #20]	; 11864 <__assert_fail@plt+0x64>
   1184c:	ldr	r2, [pc, #20]	; 11868 <__assert_fail@plt+0x68>
   11850:	add	r3, pc, r3
   11854:	ldr	r2, [r3, r2]
   11858:	cmp	r2, #0
   1185c:	bxeq	lr
   11860:	b	115fc <__gmon_start__@plt>
   11864:	andeq	ip, r1, r8, lsr #15
   11868:	andeq	r0, r0, r8, asr r1
   1186c:	ldr	r0, [pc, #24]	; 1188c <__assert_fail@plt+0x8c>
   11870:	ldr	r3, [pc, #24]	; 11890 <__assert_fail@plt+0x90>
   11874:	cmp	r3, r0
   11878:	bxeq	lr
   1187c:	ldr	r3, [pc, #16]	; 11894 <__assert_fail@plt+0x94>
   11880:	cmp	r3, #0
   11884:	bxeq	lr
   11888:	bx	r3
   1188c:			; <UNDEFINED> instruction: 0x0002e1b8
   11890:			; <UNDEFINED> instruction: 0x0002e1b8
   11894:	andeq	r0, r0, r0
   11898:	ldr	r0, [pc, #36]	; 118c4 <__assert_fail@plt+0xc4>
   1189c:	ldr	r1, [pc, #36]	; 118c8 <__assert_fail@plt+0xc8>
   118a0:	sub	r1, r1, r0
   118a4:	asr	r1, r1, #2
   118a8:	add	r1, r1, r1, lsr #31
   118ac:	asrs	r1, r1, #1
   118b0:	bxeq	lr
   118b4:	ldr	r3, [pc, #16]	; 118cc <__assert_fail@plt+0xcc>
   118b8:	cmp	r3, #0
   118bc:	bxeq	lr
   118c0:	bx	r3
   118c4:			; <UNDEFINED> instruction: 0x0002e1b8
   118c8:			; <UNDEFINED> instruction: 0x0002e1b8
   118cc:	andeq	r0, r0, r0
   118d0:	push	{r4, lr}
   118d4:	ldr	r4, [pc, #24]	; 118f4 <__assert_fail@plt+0xf4>
   118d8:	ldrb	r3, [r4]
   118dc:	cmp	r3, #0
   118e0:	popne	{r4, pc}
   118e4:	bl	1186c <__assert_fail@plt+0x6c>
   118e8:	mov	r3, #1
   118ec:	strb	r3, [r4]
   118f0:	pop	{r4, pc}
   118f4:	andeq	lr, r2, r4, ror #3
   118f8:	b	11898 <__assert_fail@plt+0x98>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #212	; 0xd4
   11908:	mov	r9, r0
   1190c:	mov	r0, #0
   11910:	mov	sl, r1
   11914:	strb	r0, [fp, #-40]	; 0xffffffd8
   11918:	movw	r0, #25445	; 0x6365
   1191c:	movt	r0, #28520	; 0x6f68
   11920:	str	r0, [fp, #-44]	; 0xffffffd4
   11924:	ldr	r0, [r1]
   11928:	cmp	r0, #0
   1192c:	movweq	r0, #44509	; 0xaddd
   11930:	movteq	r0, #1
   11934:	bl	16ecc <__assert_fail@plt+0x56cc>
   11938:	bl	15510 <__assert_fail@plt+0x3d10>
   1193c:	bl	11620 <getpid@plt>
   11940:	movw	r2, #57876	; 0xe214
   11944:	mov	r1, #0
   11948:	movt	r2, #2
   1194c:	str	r1, [r2, #16]
   11950:	movw	r1, #47819	; 0xbacb
   11954:	str	r0, [r2, #12]
   11958:	mov	r0, #6
   1195c:	movt	r1, #1
   11960:	bl	1171c <setlocale@plt>
   11964:	movw	r4, #51998	; 0xcb1e
   11968:	movw	r1, #44515	; 0xade3
   1196c:	movt	r4, #1
   11970:	movt	r1, #1
   11974:	mov	r0, r4
   11978:	bl	11794 <bindtextdomain@plt>
   1197c:	mov	r0, r4
   11980:	bl	11518 <textdomain@plt>
   11984:	movw	r0, #24152	; 0x5e58
   11988:	movt	r0, #1
   1198c:	bl	1adb4 <__assert_fail@plt+0x95b4>
   11990:	cmp	r0, #0
   11994:	bne	12cf8 <__assert_fail@plt+0x14f8>
   11998:	movw	r0, #13560	; 0x34f8
   1199c:	movt	r0, #1
   119a0:	bl	1adb4 <__assert_fail@plt+0x95b4>
   119a4:	cmp	r0, #0
   119a8:	bne	12cf8 <__assert_fail@plt+0x14f8>
   119ac:	movw	r0, #57876	; 0xe214
   119b0:	mov	r1, #2048	; 0x800
   119b4:	movt	r0, #2
   119b8:	add	r4, r0, #64	; 0x40
   119bc:	mov	r0, r4
   119c0:	bl	15210 <__assert_fail@plt+0x3a10>
   119c4:	mov	r8, r0
   119c8:	sub	r0, r0, #1
   119cc:	str	r4, [sp, #48]	; 0x30
   119d0:	cmp	r0, #2
   119d4:	bcs	119e4 <__assert_fail@plt+0x1e4>
   119d8:	movw	r0, #13692	; 0x357c
   119dc:	movt	r0, #1
   119e0:	b	11a4c <__assert_fail@plt+0x24c>
   119e4:	mov	r0, #0
   119e8:	bl	114e8 <sysconf@plt>
   119ec:	cmp	r0, #1
   119f0:	blt	1270c <__assert_fail@plt+0xf0c>
   119f4:	movw	r1, #57876	; 0xe214
   119f8:	cmp	r0, #2048	; 0x800
   119fc:	movt	r1, #2
   11a00:	ble	12e20 <__assert_fail@plt+0x1620>
   11a04:	mov	r2, r1
   11a08:	ldr	r1, [r1, #76]	; 0x4c
   11a0c:	sub	r0, r0, #2048	; 0x800
   11a10:	cmp	r1, r0
   11a14:	movcc	r0, r1
   11a18:	str	r0, [r2, #76]	; 0x4c
   11a1c:	mov	r1, #0
   11a20:	cmp	r1, r0, lsr #11
   11a24:	beq	12724 <__assert_fail@plt+0xf24>
   11a28:	movw	r0, #13736	; 0x35a8
   11a2c:	movw	r1, #57876	; 0xe214
   11a30:	movt	r0, #1
   11a34:	movt	r1, #2
   11a38:	str	r0, [r1, #96]	; 0x60
   11a3c:	mov	r0, r4
   11a40:	bl	15314 <__assert_fail@plt+0x3b14>
   11a44:	movw	r0, #13556	; 0x34f4
   11a48:	movt	r0, #1
   11a4c:	str	r0, [sp, #36]	; 0x24
   11a50:	movw	r0, #11932	; 0x2e9c
   11a54:	movw	r4, #50516	; 0xc554
   11a58:	mov	r6, #0
   11a5c:	mov	r5, #1
   11a60:	movt	r0, #1
   11a64:	movt	r4, #1
   11a68:	str	r0, [sp, #44]	; 0x2c
   11a6c:	movw	r0, #52727	; 0xcdf7
   11a70:	movt	r0, #1
   11a74:	str	r0, [sp, #32]
   11a78:	mov	r0, #1
   11a7c:	str	r0, [sp, #40]	; 0x28
   11a80:	mov	r0, #0
   11a84:	movw	r2, #44659	; 0xae73
   11a88:	mov	r7, r0
   11a8c:	sub	r0, fp, #36	; 0x24
   11a90:	mov	r1, sl
   11a94:	mov	r3, r4
   11a98:	movt	r2, #1
   11a9c:	str	r0, [sp]
   11aa0:	mov	r0, r9
   11aa4:	bl	11608 <getopt_long@plt>
   11aa8:	sub	r1, r0, #48	; 0x30
   11aac:	cmp	r1, #208	; 0xd0
   11ab0:	bhi	12550 <__assert_fail@plt+0xd50>
   11ab4:	add	r2, pc, #4
   11ab8:	mov	r0, #1
   11abc:	ldr	pc, [r2, r1, lsl #2]
   11ac0:	muleq	r1, ip, r0
   11ac4:	andeq	r2, r1, r8, ror #25
   11ac8:	andeq	r2, r1, r8, ror #25
   11acc:	andeq	r2, r1, r8, ror #25
   11ad0:	andeq	r2, r1, r8, ror #25
   11ad4:	andeq	r2, r1, r8, ror #25
   11ad8:	andeq	r2, r1, r8, ror #25
   11adc:	andeq	r2, r1, r8, ror #25
   11ae0:	andeq	r2, r1, r8, ror #25
   11ae4:	andeq	r2, r1, r8, ror #25
   11ae8:	andeq	r2, r1, r8, ror #25
   11aec:	andeq	r2, r1, r8, ror #25
   11af0:	andeq	r2, r1, r8, ror #25
   11af4:	andeq	r2, r1, r8, ror #25
   11af8:	andeq	r2, r1, r8, ror #25
   11afc:	andeq	r2, r1, r8, ror #25
   11b00:	andeq	r2, r1, r8, ror #25
   11b04:	andeq	r2, r1, r8, ror #25
   11b08:	andeq	r2, r1, r8, ror #25
   11b0c:	andeq	r2, r1, r8, ror #25
   11b10:	andeq	r2, r1, r8, ror #25
   11b14:	andeq	r1, r1, r4, lsl #28
   11b18:	andeq	r2, r1, r8, ror #25
   11b1c:	andeq	r2, r1, r8, ror #25
   11b20:	andeq	r2, r1, r8, ror #25
   11b24:	andeq	r1, r1, r8, lsr lr
   11b28:	andeq	r2, r1, r8, ror #25
   11b2c:	andeq	r2, r1, r8, ror #25
   11b30:	ldrdeq	r1, [r1], -r4
   11b34:	andeq	r2, r1, r8, ror #25
   11b38:	andeq	r2, r1, r8, ror #25
   11b3c:	andeq	r2, r1, r8, ror #25
   11b40:	andeq	r2, r1, r4, lsr #3
   11b44:	andeq	r2, r1, r8, ror #25
   11b48:	andeq	r2, r1, r8, ror #25
   11b4c:	andeq	r1, r1, r4, lsl #21
   11b50:	andeq	r2, r1, r8, ror #25
   11b54:	andeq	r2, r1, r8, ror #25
   11b58:	andeq	r2, r1, r8, ror #25
   11b5c:	andeq	r2, r1, r8, ror #25
   11b60:	andeq	r2, r1, r8, ror #25
   11b64:	andeq	r2, r1, r8, ror #25
   11b68:	andeq	r2, r1, r8, ror #25
   11b6c:	andeq	r2, r1, r8, ror #25
   11b70:	andeq	r2, r1, r8, ror #25
   11b74:	andeq	r2, r1, r8, ror #25
   11b78:	andeq	r2, r1, r8, ror #25
   11b7c:	andeq	r2, r1, r8, ror #25
   11b80:	andeq	r2, r1, r8, ror #25
   11b84:	andeq	r2, r1, r0, lsr #5
   11b88:	andeq	r2, r1, r8, ror #25
   11b8c:	andeq	r2, r1, r8, ror #25
   11b90:	andeq	r2, r1, r0, asr r1
   11b94:	andeq	r1, r1, r4, lsl #28
   11b98:	andeq	r2, r1, r8, ror #25
   11b9c:	andeq	r2, r1, r8, ror #25
   11ba0:	strdeq	r2, [r1], -r0
   11ba4:	andeq	r1, r1, r8, lsr lr
   11ba8:	andeq	r2, r1, r8, ror #25
   11bac:	andeq	r2, r1, r8, ror #25
   11bb0:	andeq	r1, r1, r8, lsr #31
   11bb4:	andeq	r2, r1, r8, ror #25
   11bb8:	strdeq	r2, [r1], -r0
   11bbc:	andeq	r2, r1, r8, lsl #1
   11bc0:	ldrdeq	r2, [r1], -r8
   11bc4:	andeq	r2, r1, r8, ror #25
   11bc8:	andeq	r1, r1, ip, lsr pc
   11bcc:	strheq	r2, [r1], -ip
   11bd0:	andeq	r1, r1, r8, lsr #30
   11bd4:	andeq	r2, r1, r8, ror #25
   11bd8:	strdeq	r2, [r1], -r4
   11bdc:	andeq	r2, r1, r8, ror #25
   11be0:	andeq	r1, r1, ip, asr #30
   11be4:	andeq	r2, r1, r8, ror #25
   11be8:	andeq	r2, r1, r8, ror #25
   11bec:	andeq	r2, r1, r8, ror #25
   11bf0:	andeq	r2, r1, r8, ror #25
   11bf4:	andeq	r2, r1, r8, ror #25
   11bf8:	andeq	r2, r1, r8, ror #25
   11bfc:	andeq	r2, r1, r8, ror #25
   11c00:	andeq	r2, r1, r8, ror #25
   11c04:	andeq	r2, r1, r8, ror #25
   11c08:	andeq	r2, r1, r8, ror #25
   11c0c:	andeq	r2, r1, r8, ror #25
   11c10:	andeq	r2, r1, r8, ror #25
   11c14:	andeq	r2, r1, r8, ror #25
   11c18:	andeq	r2, r1, r8, ror #25
   11c1c:	andeq	r2, r1, r8, ror #25
   11c20:	andeq	r2, r1, r8, ror #25
   11c24:	andeq	r2, r1, r8, ror #25
   11c28:	andeq	r2, r1, r8, ror #25
   11c2c:	andeq	r2, r1, r8, ror #25
   11c30:	andeq	r2, r1, r8, ror #25
   11c34:	andeq	r2, r1, r8, ror #25
   11c38:	andeq	r2, r1, r8, ror #25
   11c3c:	andeq	r2, r1, r8, ror #25
   11c40:	andeq	r2, r1, r8, ror #25
   11c44:	andeq	r2, r1, r8, ror #25
   11c48:	andeq	r2, r1, r8, ror #25
   11c4c:	andeq	r2, r1, r8, ror #25
   11c50:	andeq	r2, r1, r8, ror #25
   11c54:	andeq	r2, r1, r8, ror #25
   11c58:	andeq	r2, r1, r8, ror #25
   11c5c:	andeq	r2, r1, r8, ror #25
   11c60:	andeq	r2, r1, r8, ror #25
   11c64:	andeq	r2, r1, r8, ror #25
   11c68:	andeq	r2, r1, r8, ror #25
   11c6c:	andeq	r2, r1, r8, ror #25
   11c70:	andeq	r2, r1, r8, ror #25
   11c74:	andeq	r2, r1, r8, ror #25
   11c78:	andeq	r2, r1, r8, ror #25
   11c7c:	andeq	r2, r1, r8, ror #25
   11c80:	andeq	r2, r1, r8, ror #25
   11c84:	andeq	r2, r1, r8, ror #25
   11c88:	andeq	r2, r1, r8, ror #25
   11c8c:	andeq	r2, r1, r8, ror #25
   11c90:	andeq	r2, r1, r8, ror #25
   11c94:	andeq	r2, r1, r8, ror #25
   11c98:	andeq	r2, r1, r8, ror #25
   11c9c:	andeq	r2, r1, r8, ror #25
   11ca0:	andeq	r2, r1, r8, ror #25
   11ca4:	andeq	r2, r1, r8, ror #25
   11ca8:	andeq	r2, r1, r8, ror #25
   11cac:	andeq	r2, r1, r8, ror #25
   11cb0:	andeq	r2, r1, r8, ror #25
   11cb4:	andeq	r2, r1, r8, ror #25
   11cb8:	andeq	r2, r1, r8, ror #25
   11cbc:	andeq	r2, r1, r8, ror #25
   11cc0:	andeq	r2, r1, r8, ror #25
   11cc4:	andeq	r2, r1, r8, ror #25
   11cc8:	andeq	r2, r1, r8, ror #25
   11ccc:	andeq	r2, r1, r8, ror #25
   11cd0:	andeq	r2, r1, r8, ror #25
   11cd4:	andeq	r2, r1, r8, ror #25
   11cd8:	andeq	r2, r1, r8, ror #25
   11cdc:	andeq	r2, r1, r8, ror #25
   11ce0:	andeq	r2, r1, r8, ror #25
   11ce4:	andeq	r2, r1, r8, ror #25
   11ce8:	andeq	r2, r1, r8, ror #25
   11cec:	andeq	r2, r1, r8, ror #25
   11cf0:	andeq	r2, r1, r8, ror #25
   11cf4:	andeq	r2, r1, r8, ror #25
   11cf8:	andeq	r2, r1, r8, ror #25
   11cfc:	andeq	r2, r1, r8, ror #25
   11d00:	andeq	r2, r1, r8, ror #25
   11d04:	andeq	r2, r1, r8, ror #25
   11d08:	andeq	r2, r1, r8, ror #25
   11d0c:	andeq	r2, r1, r8, ror #25
   11d10:	andeq	r2, r1, r8, ror #25
   11d14:	andeq	r2, r1, r8, ror #25
   11d18:	andeq	r2, r1, r8, ror #25
   11d1c:	andeq	r2, r1, r8, ror #25
   11d20:	andeq	r2, r1, r8, ror #25
   11d24:	andeq	r2, r1, r8, ror #25
   11d28:	andeq	r2, r1, r8, ror #25
   11d2c:	andeq	r2, r1, r8, ror #25
   11d30:	andeq	r2, r1, r8, ror #25
   11d34:	andeq	r2, r1, r8, ror #25
   11d38:	andeq	r2, r1, r8, ror #25
   11d3c:	andeq	r2, r1, r8, ror #25
   11d40:	andeq	r2, r1, r8, ror #25
   11d44:	andeq	r2, r1, r8, ror #25
   11d48:	andeq	r2, r1, r8, ror #25
   11d4c:	andeq	r2, r1, r8, ror #25
   11d50:	andeq	r2, r1, r8, ror #25
   11d54:	andeq	r2, r1, r8, ror #25
   11d58:	andeq	r2, r1, r8, ror #25
   11d5c:	andeq	r2, r1, r8, ror #25
   11d60:	andeq	r2, r1, r8, ror #25
   11d64:	andeq	r2, r1, r8, ror #25
   11d68:	andeq	r2, r1, r8, ror #25
   11d6c:	andeq	r2, r1, r8, ror #25
   11d70:	andeq	r2, r1, r8, ror #25
   11d74:	andeq	r2, r1, r8, ror #25
   11d78:	andeq	r2, r1, r8, ror #25
   11d7c:	andeq	r2, r1, r8, ror #25
   11d80:	andeq	r2, r1, r8, ror #25
   11d84:	andeq	r2, r1, r8, ror #25
   11d88:	andeq	r2, r1, r8, ror #25
   11d8c:	andeq	r2, r1, r8, ror #25
   11d90:	andeq	r2, r1, r8, ror #25
   11d94:	andeq	r2, r1, r8, ror #25
   11d98:	andeq	r2, r1, r8, ror #25
   11d9c:	andeq	r2, r1, r8, ror #25
   11da0:	andeq	r2, r1, r8, ror #25
   11da4:	andeq	r2, r1, r8, ror #25
   11da8:	andeq	r2, r1, r8, ror #25
   11dac:	andeq	r2, r1, r8, ror #25
   11db0:	andeq	r2, r1, r8, ror #25
   11db4:	andeq	r2, r1, r8, ror #25
   11db8:	andeq	r2, r1, r8, ror #25
   11dbc:	andeq	r2, r1, r8, ror #25
   11dc0:	andeq	r2, r1, r8, ror #25
   11dc4:	andeq	r2, r1, r8, ror #25
   11dc8:	andeq	r2, r1, r8, ror #25
   11dcc:	andeq	r2, r1, r8, ror #25
   11dd0:	andeq	r2, r1, r8, ror #25
   11dd4:	andeq	r2, r1, r8, ror #25
   11dd8:	andeq	r2, r1, r8, ror #25
   11ddc:	andeq	r2, r1, r8, ror #25
   11de0:	andeq	r2, r1, r8, ror #25
   11de4:	andeq	r2, r1, r8, ror #25
   11de8:	andeq	r2, r1, r8, ror #25
   11dec:	andeq	r2, r1, r8, ror #25
   11df0:	andeq	r2, r1, r8, ror #25
   11df4:	andeq	r2, r1, r8, ror #25
   11df8:	andeq	r2, r1, r8, ror #25
   11dfc:	andeq	r2, r1, r8, ror #25
   11e00:	andeq	r1, r1, r0, ror #30
   11e04:	movw	r0, #57824	; 0xe1e0
   11e08:	movt	r0, #2
   11e0c:	ldr	r0, [r0]
   11e10:	cmp	r0, #0
   11e14:	beq	11f14 <__assert_fail@plt+0x714>
   11e18:	ldrb	r1, [r0]
   11e1c:	cmp	r1, #0
   11e20:	beq	11f14 <__assert_fail@plt+0x714>
   11e24:	movw	r1, #57876	; 0xe214
   11e28:	movt	r1, #2
   11e2c:	str	r0, [r1, #20]
   11e30:	mov	r0, r7
   11e34:	b	11a84 <__assert_fail@plt+0x284>
   11e38:	movw	r0, #57824	; 0xe1e0
   11e3c:	movw	r1, #44692	; 0xae94
   11e40:	movt	r0, #2
   11e44:	movt	r1, #1
   11e48:	ldr	r0, [r0]
   11e4c:	cmp	r0, #0
   11e50:	moveq	r0, r1
   11e54:	movw	r1, #57876	; 0xe214
   11e58:	movt	r1, #2
   11e5c:	str	r0, [r1, #88]	; 0x58
   11e60:	ldr	r0, [r1, #104]	; 0x68
   11e64:	cmp	r0, #0
   11e68:	beq	11eb4 <__assert_fail@plt+0x6b4>
   11e6c:	movw	r1, #46405	; 0xb545
   11e70:	mov	r0, #0
   11e74:	mov	r2, #5
   11e78:	movt	r1, #1
   11e7c:	bl	114dc <dcgettext@plt>
   11e80:	mov	r2, r0
   11e84:	movw	r0, #44695	; 0xae97
   11e88:	movw	r3, #44711	; 0xaea7
   11e8c:	mov	r1, #0
   11e90:	movt	r0, #1
   11e94:	movt	r3, #1
   11e98:	str	r0, [sp]
   11e9c:	mov	r0, #0
   11ea0:	str	r3, [sp, #4]
   11ea4:	bl	115a8 <error@plt>
   11ea8:	movw	r1, #57876	; 0xe214
   11eac:	movt	r1, #2
   11eb0:	str	r6, [r1, #104]	; 0x68
   11eb4:	ldr	r0, [r1, #100]	; 0x64
   11eb8:	cmp	r0, #0
   11ebc:	mov	r0, r7
   11ec0:	beq	11a84 <__assert_fail@plt+0x284>
   11ec4:	movw	r1, #46405	; 0xb545
   11ec8:	mov	r0, #0
   11ecc:	mov	r2, #5
   11ed0:	movt	r1, #1
   11ed4:	bl	114dc <dcgettext@plt>
   11ed8:	mov	r2, r0
   11edc:	movw	r0, #44695	; 0xae97
   11ee0:	movw	r3, #44722	; 0xaeb2
   11ee4:	mov	r1, #0
   11ee8:	movt	r0, #1
   11eec:	movt	r3, #1
   11ef0:	str	r0, [sp]
   11ef4:	mov	r0, #0
   11ef8:	str	r3, [sp, #4]
   11efc:	bl	115a8 <error@plt>
   11f00:	movw	r0, #57876	; 0xe214
   11f04:	movt	r0, #2
   11f08:	str	r6, [r0, #100]	; 0x64
   11f0c:	mov	r0, r7
   11f10:	b	11a84 <__assert_fail@plt+0x284>
   11f14:	movw	r0, #57876	; 0xe214
   11f18:	movt	r0, #2
   11f1c:	str	r6, [r0, #20]
   11f20:	mov	r0, r7
   11f24:	b	11a84 <__assert_fail@plt+0x284>
   11f28:	movw	r0, #57876	; 0xe214
   11f2c:	movt	r0, #2
   11f30:	strb	r5, [r0, #1]
   11f34:	mov	r0, r7
   11f38:	b	11a84 <__assert_fail@plt+0x284>
   11f3c:	mov	r0, #0
   11f40:	str	r0, [sp, #40]	; 0x28
   11f44:	mov	r0, r7
   11f48:	b	11a84 <__assert_fail@plt+0x284>
   11f4c:	movw	r0, #57876	; 0xe214
   11f50:	movt	r0, #2
   11f54:	str	r5, [r0, #64]	; 0x40
   11f58:	mov	r0, r7
   11f5c:	b	11a84 <__assert_fail@plt+0x284>
   11f60:	movw	r0, #57824	; 0xe1e0
   11f64:	mov	r1, #61	; 0x3d
   11f68:	movt	r0, #2
   11f6c:	ldr	r5, [r0]
   11f70:	mov	r0, r5
   11f74:	bl	1165c <strchr@plt>
   11f78:	cmp	r0, #0
   11f7c:	bne	12d6c <__assert_fail@plt+0x156c>
   11f80:	movw	r0, #57876	; 0xe214
   11f84:	movt	r0, #2
   11f88:	str	r5, [r0, #24]
   11f8c:	mov	r0, r5
   11f90:	bl	117ac <unsetenv@plt>
   11f94:	cmp	r0, #0
   11f98:	mov	r0, r7
   11f9c:	mov	r5, #1
   11fa0:	beq	11a84 <__assert_fail@plt+0x284>
   11fa4:	b	12d98 <__assert_fail@plt+0x1598>
   11fa8:	movw	r0, #57824	; 0xe1e0
   11fac:	movt	r0, #2
   11fb0:	ldr	r0, [r0]
   11fb4:	cmp	r0, #0
   11fb8:	beq	12370 <__assert_fail@plt+0xb70>
   11fbc:	mov	r1, #108	; 0x6c
   11fc0:	mov	r2, #1
   11fc4:	mvn	r3, #0
   11fc8:	str	r5, [sp]
   11fcc:	bl	14004 <__assert_fail@plt+0x2804>
   11fd0:	b	12374 <__assert_fail@plt+0xb74>
   11fd4:	movw	r0, #57824	; 0xe1e0
   11fd8:	mov	r1, #76	; 0x4c
   11fdc:	mov	r2, #1
   11fe0:	mvn	r3, #0
   11fe4:	str	r5, [sp]
   11fe8:	movt	r0, #2
   11fec:	ldr	r0, [r0]
   11ff0:	bl	14004 <__assert_fail@plt+0x2804>
   11ff4:	movw	r1, #57876	; 0xe214
   11ff8:	movt	r1, #2
   11ffc:	str	r0, [r1, #100]	; 0x64
   12000:	ldr	r0, [r1, #104]	; 0x68
   12004:	cmp	r0, #0
   12008:	beq	12054 <__assert_fail@plt+0x854>
   1200c:	movw	r1, #46405	; 0xb545
   12010:	mov	r0, #0
   12014:	mov	r2, #5
   12018:	movt	r1, #1
   1201c:	bl	114dc <dcgettext@plt>
   12020:	mov	r2, r0
   12024:	movw	r0, #44734	; 0xaebe
   12028:	movw	r3, #44711	; 0xaea7
   1202c:	mov	r1, #0
   12030:	movt	r0, #1
   12034:	movt	r3, #1
   12038:	str	r0, [sp]
   1203c:	mov	r0, #0
   12040:	str	r3, [sp, #4]
   12044:	bl	115a8 <error@plt>
   12048:	movw	r1, #57876	; 0xe214
   1204c:	movt	r1, #2
   12050:	str	r6, [r1, #104]	; 0x68
   12054:	ldr	r0, [r1, #88]	; 0x58
   12058:	cmp	r0, #0
   1205c:	mov	r0, r7
   12060:	beq	11a84 <__assert_fail@plt+0x284>
   12064:	movw	r1, #46405	; 0xb545
   12068:	mov	r0, #0
   1206c:	mov	r2, #5
   12070:	movt	r1, #1
   12074:	bl	114dc <dcgettext@plt>
   12078:	mov	r2, r0
   1207c:	movw	r0, #44734	; 0xaebe
   12080:	movt	r0, #1
   12084:	b	12404 <__assert_fail@plt+0xc04>
   12088:	movw	r0, #57876	; 0xe214
   1208c:	movt	r0, #2
   12090:	strb	r5, [r0, #2]
   12094:	mov	r0, r7
   12098:	b	11a84 <__assert_fail@plt+0x284>
   1209c:	movw	r0, #57876	; 0xe214
   120a0:	movt	r0, #2
   120a4:	strb	r6, [r0]
   120a8:	movw	r0, #15272	; 0x3ba8
   120ac:	movt	r0, #1
   120b0:	str	r0, [sp, #44]	; 0x2c
   120b4:	mov	r0, r7
   120b8:	b	11a84 <__assert_fail@plt+0x284>
   120bc:	ldr	r0, [sp, #36]	; 0x24
   120c0:	mov	r5, #0
   120c4:	mov	r6, r4
   120c8:	blx	r0
   120cc:	movw	r0, #57876	; 0xe214
   120d0:	mov	r1, #115	; 0x73
   120d4:	mov	r2, #1
   120d8:	str	r5, [sp]
   120dc:	movt	r0, #2
   120e0:	mov	r4, r0
   120e4:	ldr	r3, [r0, #68]	; 0x44
   120e8:	movw	r0, #57824	; 0xe1e0
   120ec:	movt	r0, #2
   120f0:	ldr	r0, [r0]
   120f4:	bl	14004 <__assert_fail@plt+0x2804>
   120f8:	mov	r5, r0
   120fc:	ldr	r0, [r4, #68]	; 0x44
   12100:	cmp	r5, r0
   12104:	bls	122b8 <__assert_fail@plt+0xab8>
   12108:	movw	r1, #44776	; 0xaee8
   1210c:	mov	r0, #0
   12110:	mov	r2, #5
   12114:	movt	r1, #1
   12118:	bl	114dc <dcgettext@plt>
   1211c:	mov	r2, r0
   12120:	movw	r0, #57876	; 0xe214
   12124:	mov	r1, #0
   12128:	mov	r3, r5
   1212c:	movt	r0, #2
   12130:	ldr	r0, [r0, #68]	; 0x44
   12134:	str	r0, [sp]
   12138:	mov	r0, #0
   1213c:	bl	115a8 <error@plt>
   12140:	movw	r1, #57876	; 0xe214
   12144:	movt	r1, #2
   12148:	ldr	r5, [r1, #68]	; 0x44
   1214c:	b	122bc <__assert_fail@plt+0xabc>
   12150:	movw	r0, #57824	; 0xe1e0
   12154:	str	r8, [sp, #28]
   12158:	movt	r0, #2
   1215c:	ldr	r4, [r0]
   12160:	mov	r0, r4
   12164:	bl	11650 <strlen@plt>
   12168:	mov	r1, r0
   1216c:	ldrb	r0, [r4]
   12170:	cmp	r1, #1
   12174:	bne	122d4 <__assert_fail@plt+0xad4>
   12178:	movw	r1, #57876	; 0xe214
   1217c:	ldr	r8, [sp, #28]
   12180:	movw	r4, #50516	; 0xc554
   12184:	movt	r1, #2
   12188:	movt	r4, #1
   1218c:	strb	r0, [r1]
   12190:	movw	r0, #15272	; 0x3ba8
   12194:	movt	r0, #1
   12198:	str	r0, [sp, #44]	; 0x2c
   1219c:	mov	r0, r7
   121a0:	b	122c8 <__assert_fail@plt+0xac8>
   121a4:	movw	r0, #57824	; 0xe1e0
   121a8:	mov	r1, #80	; 0x50
   121ac:	mov	r2, #0
   121b0:	mvn	r3, #-2147483648	; 0x80000000
   121b4:	str	r5, [sp]
   121b8:	movt	r0, #2
   121bc:	ldr	r0, [r0]
   121c0:	bl	14004 <__assert_fail@plt+0x2804>
   121c4:	movw	r1, #57704	; 0xe168
   121c8:	movt	r1, #2
   121cc:	str	r0, [r1]
   121d0:	mov	r0, r7
   121d4:	b	11a84 <__assert_fail@plt+0x284>
   121d8:	movw	r0, #57876	; 0xe214
   121dc:	movt	r0, #2
   121e0:	strb	r5, [r0, #1]
   121e4:	strb	r5, [r0, #3]
   121e8:	mov	r0, r7
   121ec:	b	11a84 <__assert_fail@plt+0x284>
   121f0:	movw	r0, #57824	; 0xe1e0
   121f4:	mov	r1, #110	; 0x6e
   121f8:	mov	r2, #1
   121fc:	mvn	r3, #0
   12200:	str	r5, [sp]
   12204:	movt	r0, #2
   12208:	ldr	r0, [r0]
   1220c:	bl	14004 <__assert_fail@plt+0x2804>
   12210:	movw	r1, #57876	; 0xe214
   12214:	movt	r1, #2
   12218:	str	r0, [r1, #104]	; 0x68
   1221c:	ldr	r0, [r1, #100]	; 0x64
   12220:	cmp	r0, #0
   12224:	beq	12270 <__assert_fail@plt+0xa70>
   12228:	movw	r1, #46405	; 0xb545
   1222c:	mov	r0, #0
   12230:	mov	r2, #5
   12234:	movt	r1, #1
   12238:	bl	114dc <dcgettext@plt>
   1223c:	mov	r2, r0
   12240:	movw	r0, #44762	; 0xaeda
   12244:	movw	r3, #44722	; 0xaeb2
   12248:	mov	r1, #0
   1224c:	movt	r0, #1
   12250:	movt	r3, #1
   12254:	str	r0, [sp]
   12258:	mov	r0, #0
   1225c:	str	r3, [sp, #4]
   12260:	bl	115a8 <error@plt>
   12264:	movw	r1, #57876	; 0xe214
   12268:	movt	r1, #2
   1226c:	str	r6, [r1, #100]	; 0x64
   12270:	ldr	r0, [r1, #88]	; 0x58
   12274:	cmp	r0, #0
   12278:	mov	r0, r7
   1227c:	beq	11a84 <__assert_fail@plt+0x284>
   12280:	movw	r1, #57876	; 0xe214
   12284:	movt	r1, #2
   12288:	ldr	r0, [r1, #104]	; 0x68
   1228c:	cmp	r0, #1
   12290:	bne	12434 <__assert_fail@plt+0xc34>
   12294:	str	r6, [r1, #104]	; 0x68
   12298:	mov	r0, r7
   1229c:	b	11a84 <__assert_fail@plt+0x284>
   122a0:	movw	r0, #57824	; 0xe1e0
   122a4:	movt	r0, #2
   122a8:	ldr	r0, [r0]
   122ac:	str	r0, [sp, #32]
   122b0:	mov	r0, r7
   122b4:	b	11a84 <__assert_fail@plt+0x284>
   122b8:	mov	r1, r4
   122bc:	mov	r0, r7
   122c0:	mov	r4, r6
   122c4:	str	r5, [r1, #76]	; 0x4c
   122c8:	mov	r6, #0
   122cc:	mov	r5, #1
   122d0:	b	11a84 <__assert_fail@plt+0x284>
   122d4:	cmp	r0, #92	; 0x5c
   122d8:	bne	12d24 <__assert_fail@plt+0x1524>
   122dc:	mov	r5, r4
   122e0:	ldrb	r6, [r5, #1]!
   122e4:	sub	r1, r6, #92	; 0x5c
   122e8:	cmp	r1, #26
   122ec:	bhi	1248c <__assert_fail@plt+0xc8c>
   122f0:	add	r2, pc, #4
   122f4:	mov	r0, #7
   122f8:	ldr	pc, [r2, r1, lsl #2]
   122fc:	andeq	r2, r1, r8, ror #6
   12300:	andeq	r2, r1, ip, lsl #9
   12304:	andeq	r2, r1, ip, lsl #9
   12308:	andeq	r2, r1, ip, lsl #9
   1230c:	andeq	r2, r1, ip, lsl #9
   12310:	andeq	r2, r1, r8, ror r1
   12314:	andeq	r2, r1, r8, lsr #9
   12318:	andeq	r2, r1, ip, lsl #9
   1231c:	andeq	r2, r1, ip, lsl #9
   12320:	andeq	r2, r1, ip, lsl #9
   12324:	andeq	r2, r1, r0, asr #9
   12328:	andeq	r2, r1, ip, lsl #9
   1232c:	andeq	r2, r1, ip, lsl #9
   12330:	andeq	r2, r1, ip, lsl #9
   12334:	andeq	r2, r1, ip, lsl #9
   12338:	andeq	r2, r1, ip, lsl #9
   1233c:	andeq	r2, r1, ip, lsl #9
   12340:	andeq	r2, r1, ip, lsl #9
   12344:	andeq	r2, r1, r8, asr #9
   12348:	andeq	r2, r1, ip, lsl #9
   1234c:	andeq	r2, r1, ip, lsl #9
   12350:	andeq	r2, r1, ip, lsl #9
   12354:	andeq	r2, r1, r0, lsr #9
   12358:	andeq	r2, r1, ip, lsl #9
   1235c:			; <UNDEFINED> instruction: 0x000124b0
   12360:	andeq	r2, r1, ip, lsl #9
   12364:			; <UNDEFINED> instruction: 0x000124b8
   12368:	mov	r0, #92	; 0x5c
   1236c:	b	12178 <__assert_fail@plt+0x978>
   12370:	mov	r0, #1
   12374:	movw	r1, #57876	; 0xe214
   12378:	movt	r1, #2
   1237c:	str	r0, [r1, #100]	; 0x64
   12380:	ldr	r0, [r1, #104]	; 0x68
   12384:	cmp	r0, #0
   12388:	beq	123d4 <__assert_fail@plt+0xbd4>
   1238c:	movw	r1, #46405	; 0xb545
   12390:	mov	r0, #0
   12394:	mov	r2, #5
   12398:	movt	r1, #1
   1239c:	bl	114dc <dcgettext@plt>
   123a0:	mov	r2, r0
   123a4:	movw	r0, #44747	; 0xaecb
   123a8:	movw	r3, #44711	; 0xaea7
   123ac:	mov	r1, #0
   123b0:	movt	r0, #1
   123b4:	movt	r3, #1
   123b8:	str	r0, [sp]
   123bc:	mov	r0, #0
   123c0:	str	r3, [sp, #4]
   123c4:	bl	115a8 <error@plt>
   123c8:	movw	r1, #57876	; 0xe214
   123cc:	movt	r1, #2
   123d0:	str	r6, [r1, #104]	; 0x68
   123d4:	ldr	r0, [r1, #88]	; 0x58
   123d8:	cmp	r0, #0
   123dc:	mov	r0, r7
   123e0:	beq	11a84 <__assert_fail@plt+0x284>
   123e4:	movw	r1, #46405	; 0xb545
   123e8:	mov	r0, #0
   123ec:	mov	r2, #5
   123f0:	movt	r1, #1
   123f4:	bl	114dc <dcgettext@plt>
   123f8:	mov	r2, r0
   123fc:	movw	r0, #44747	; 0xaecb
   12400:	movt	r0, #1
   12404:	movw	r3, #44737	; 0xaec1
   12408:	str	r0, [sp]
   1240c:	mov	r0, #0
   12410:	mov	r1, #0
   12414:	movt	r3, #1
   12418:	str	r3, [sp, #4]
   1241c:	bl	115a8 <error@plt>
   12420:	movw	r0, #57876	; 0xe214
   12424:	movt	r0, #2
   12428:	str	r6, [r0, #88]	; 0x58
   1242c:	mov	r0, r7
   12430:	b	11a84 <__assert_fail@plt+0x284>
   12434:	mov	r5, r4
   12438:	mov	r4, r1
   1243c:	movw	r1, #46405	; 0xb545
   12440:	mov	r0, #0
   12444:	mov	r2, #5
   12448:	movt	r1, #1
   1244c:	bl	114dc <dcgettext@plt>
   12450:	mov	r2, r0
   12454:	movw	r0, #44762	; 0xaeda
   12458:	movw	r3, #44737	; 0xaec1
   1245c:	mov	r1, #0
   12460:	movt	r0, #1
   12464:	movt	r3, #1
   12468:	str	r0, [sp]
   1246c:	mov	r0, #0
   12470:	str	r3, [sp, #4]
   12474:	bl	115a8 <error@plt>
   12478:	str	r6, [r4, #88]	; 0x58
   1247c:	mov	r4, r5
   12480:	mov	r5, #1
   12484:	mov	r0, r7
   12488:	b	11a84 <__assert_fail@plt+0x284>
   1248c:	cmp	r6, #120	; 0x78
   12490:	bne	124d0 <__assert_fail@plt+0xcd0>
   12494:	add	r5, r4, #2
   12498:	mov	r6, #16
   1249c:	b	124ec <__assert_fail@plt+0xcec>
   124a0:	mov	r0, #13
   124a4:	b	12178 <__assert_fail@plt+0x978>
   124a8:	mov	r0, #8
   124ac:	b	12178 <__assert_fail@plt+0x978>
   124b0:	mov	r0, #9
   124b4:	b	12178 <__assert_fail@plt+0x978>
   124b8:	mov	r0, #11
   124bc:	b	12178 <__assert_fail@plt+0x978>
   124c0:	mov	r0, #12
   124c4:	b	12178 <__assert_fail@plt+0x978>
   124c8:	mov	r0, #10
   124cc:	b	12178 <__assert_fail@plt+0x978>
   124d0:	bl	11614 <__ctype_b_loc@plt>
   124d4:	ldr	r0, [r0]
   124d8:	add	r0, r0, r6, lsl #1
   124dc:	mov	r6, #8
   124e0:	ldrb	r0, [r0, #1]
   124e4:	tst	r0, #8
   124e8:	beq	12d30 <__assert_fail@plt+0x1530>
   124ec:	bl	11680 <__errno_location@plt>
   124f0:	mov	r1, #0
   124f4:	mov	r2, r6
   124f8:	str	r1, [r0]
   124fc:	str	r1, [sp, #52]	; 0x34
   12500:	mov	r0, r5
   12504:	add	r1, sp, #52	; 0x34
   12508:	bl	11644 <strtoul@plt>
   1250c:	cmp	r0, #256	; 0x100
   12510:	bcs	12d58 <__assert_fail@plt+0x1558>
   12514:	ldr	r5, [sp, #52]	; 0x34
   12518:	ldrb	r1, [r5]
   1251c:	cmp	r1, #0
   12520:	beq	12178 <__assert_fail@plt+0x978>
   12524:	movw	r1, #46305	; 0xb4e1
   12528:	mov	r0, #0
   1252c:	mov	r2, #5
   12530:	movt	r1, #1
   12534:	bl	114dc <dcgettext@plt>
   12538:	mov	r2, r0
   1253c:	str	r5, [sp]
   12540:	mov	r0, #1
   12544:	mov	r1, #0
   12548:	mov	r3, r4
   1254c:	bl	115a8 <error@plt>
   12550:	cmn	r0, #1
   12554:	bne	12ce8 <__assert_fail@plt+0x14e8>
   12558:	ldr	r1, [sp, #44]	; 0x2c
   1255c:	movw	r0, #15272	; 0x3ba8
   12560:	movt	r0, #1
   12564:	cmp	r1, r0
   12568:	bne	125a4 <__assert_fail@plt+0xda4>
   1256c:	movw	r0, #57876	; 0xe214
   12570:	movt	r0, #2
   12574:	ldr	r0, [r0, #20]
   12578:	cmp	r0, #0
   1257c:	beq	125a4 <__assert_fail@plt+0xda4>
   12580:	movw	r1, #44938	; 0xaf8a
   12584:	mov	r0, #0
   12588:	mov	r2, #5
   1258c:	movt	r1, #1
   12590:	bl	114dc <dcgettext@plt>
   12594:	mov	r2, r0
   12598:	mov	r0, #0
   1259c:	mov	r1, #0
   125a0:	bl	115a8 <error@plt>
   125a4:	ldr	r0, [sp, #36]	; 0x24
   125a8:	ldr	r6, [sp, #32]
   125ac:	blx	r0
   125b0:	cmp	r8, #0
   125b4:	bne	12e00 <__assert_fail@plt+0x1600>
   125b8:	movw	r0, #16740	; 0x4164
   125bc:	add	r5, sp, #52	; 0x34
   125c0:	movt	r0, #1
   125c4:	add	r4, r5, #4
   125c8:	str	r0, [sp, #52]	; 0x34
   125cc:	mov	r0, r4
   125d0:	bl	11728 <sigemptyset@plt>
   125d4:	mov	r8, #0
   125d8:	mov	r0, #10
   125dc:	mov	r1, r5
   125e0:	mov	r2, #0
   125e4:	str	r8, [sp, #184]	; 0xb8
   125e8:	bl	11548 <sigaction@plt>
   125ec:	cmp	r0, #0
   125f0:	beq	12620 <__assert_fail@plt+0xe20>
   125f4:	bl	11680 <__errno_location@plt>
   125f8:	movw	r1, #45020	; 0xafdc
   125fc:	ldr	r5, [r0]
   12600:	mov	r0, #0
   12604:	mov	r2, #5
   12608:	movt	r1, #1
   1260c:	bl	114dc <dcgettext@plt>
   12610:	mov	r2, r0
   12614:	mov	r0, #0
   12618:	mov	r1, r5
   1261c:	bl	115a8 <error@plt>
   12620:	movw	r0, #16792	; 0x4198
   12624:	movt	r0, #1
   12628:	str	r0, [sp, #52]	; 0x34
   1262c:	mov	r0, r4
   12630:	bl	11728 <sigemptyset@plt>
   12634:	add	r1, sp, #52	; 0x34
   12638:	mov	r0, #12
   1263c:	mov	r2, #0
   12640:	str	r8, [sp, #184]	; 0xb8
   12644:	bl	11548 <sigaction@plt>
   12648:	cmp	r0, #0
   1264c:	beq	1267c <__assert_fail@plt+0xe7c>
   12650:	bl	11680 <__errno_location@plt>
   12654:	movw	r1, #45054	; 0xaffe
   12658:	ldr	r4, [r0]
   1265c:	mov	r0, #0
   12660:	mov	r2, #5
   12664:	movt	r1, #1
   12668:	bl	114dc <dcgettext@plt>
   1266c:	mov	r2, r0
   12670:	mov	r0, #0
   12674:	mov	r1, r4
   12678:	bl	115a8 <error@plt>
   1267c:	movw	r1, #52727	; 0xcdf7
   12680:	mov	r0, r6
   12684:	movt	r1, #1
   12688:	bl	11440 <strcmp@plt>
   1268c:	ldr	r5, [sp, #40]	; 0x28
   12690:	cmp	r0, #0
   12694:	beq	12744 <__assert_fail@plt+0xf44>
   12698:	movw	r1, #57876	; 0xe214
   1269c:	mov	r0, #1
   126a0:	movt	r1, #2
   126a4:	strb	r0, [r1, #4]
   126a8:	mov	r0, r6
   126ac:	mov	r1, #0
   126b0:	bl	157e4 <__assert_fail@plt+0x3fe4>
   126b4:	cmn	r0, #1
   126b8:	ble	12e40 <__assert_fail@plt+0x1640>
   126bc:	movw	r1, #45902	; 0xb34e
   126c0:	mov	r4, r0
   126c4:	movt	r1, #1
   126c8:	bl	11428 <fdopen@plt>
   126cc:	cmp	r0, #0
   126d0:	bne	12750 <__assert_fail@plt+0xf50>
   126d4:	mov	r7, r6
   126d8:	bl	11680 <__errno_location@plt>
   126dc:	ldr	r6, [r0]
   126e0:	mov	r5, r0
   126e4:	mov	r0, r4
   126e8:	bl	117e8 <close@plt>
   126ec:	str	r6, [r5]
   126f0:	b	12e4c <__assert_fail@plt+0x164c>
   126f4:	movw	r0, #44509	; 0xaddd
   126f8:	movt	r0, #1
   126fc:	bl	15a9c <__assert_fail@plt+0x429c>
   12700:	mov	r0, #0
   12704:	sub	sp, fp, #28
   12708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1270c:	movw	r0, #57876	; 0xe214
   12710:	movt	r0, #2
   12714:	ldr	r0, [r0, #76]	; 0x4c
   12718:	mov	r1, #0
   1271c:	cmp	r1, r0, lsr #11
   12720:	bne	11a28 <__assert_fail@plt+0x228>
   12724:	movw	r0, #44632	; 0xae58
   12728:	movw	r1, #44601	; 0xae39
   1272c:	movw	r3, #44609	; 0xae41
   12730:	movw	r2, #511	; 0x1ff
   12734:	movt	r0, #1
   12738:	movt	r1, #1
   1273c:	movt	r3, #1
   12740:	bl	11800 <__assert_fail@plt>
   12744:	movw	r0, #57816	; 0xe1d8
   12748:	movt	r0, #2
   1274c:	ldr	r0, [r0]
   12750:	movw	r1, #57876	; 0xe214
   12754:	movt	r1, #2
   12758:	str	r0, [r1, #28]
   1275c:	ldr	r0, [r1, #88]	; 0x58
   12760:	cmp	r0, #0
   12764:	ldreq	r0, [r1, #100]	; 0x64
   12768:	cmpeq	r0, #0
   1276c:	beq	12778 <__assert_fail@plt+0xf78>
   12770:	mov	r0, #1
   12774:	str	r0, [r1, #64]	; 0x40
   12778:	movw	r6, #57800	; 0xe1c8
   1277c:	movt	r6, #2
   12780:	ldr	r0, [r6]
   12784:	cmp	r0, r9
   12788:	bne	127a4 <__assert_fail@plt+0xfa4>
   1278c:	mov	r0, #0
   12790:	mov	r9, #1
   12794:	sub	sl, fp, #48	; 0x30
   12798:	str	r0, [r6]
   1279c:	sub	r0, fp, #44	; 0x2c
   127a0:	str	r0, [fp, #-48]	; 0xffffffd0
   127a4:	cmp	r7, #0
   127a8:	bne	12b18 <__assert_fail@plt+0x1318>
   127ac:	ldr	r0, [r1, #76]	; 0x4c
   127b0:	mov	r4, r1
   127b4:	add	r0, r0, #1
   127b8:	bl	196b8 <__assert_fail@plt+0x7eb8>
   127bc:	str	r0, [r4, #32]
   127c0:	ldr	r0, [r4, #76]	; 0x4c
   127c4:	add	r0, r0, #1
   127c8:	bl	196b8 <__assert_fail@plt+0x7eb8>
   127cc:	movw	r7, #57832	; 0xe1e8
   127d0:	mov	r1, #0
   127d4:	movt	r7, #2
   127d8:	str	r0, [r7, #12]
   127dc:	mov	r0, #17
   127e0:	bl	114d0 <signal@plt>
   127e4:	ldr	r0, [r4, #88]	; 0x58
   127e8:	cmp	r0, #0
   127ec:	beq	129ac <__assert_fail@plt+0x11ac>
   127f0:	lsl	r0, r9, #2
   127f4:	bl	196b8 <__assert_fail@plt+0x7eb8>
   127f8:	str	r0, [sp, #40]	; 0x28
   127fc:	ldr	r0, [r6]
   12800:	ldr	r8, [sp, #48]	; 0x30
   12804:	cmp	r0, r9
   12808:	bge	12830 <__assert_fail@plt+0x1030>
   1280c:	ldr	r1, [sp, #40]	; 0x28
   12810:	add	r4, sl, r0, lsl #2
   12814:	sub	r6, r9, r0
   12818:	add	r5, r1, r0, lsl #2
   1281c:	ldr	r0, [r4], #4
   12820:	bl	11650 <strlen@plt>
   12824:	str	r0, [r5], #4
   12828:	subs	r6, r6, #1
   1282c:	bne	1281c <__assert_fail@plt+0x101c>
   12830:	movw	r0, #57876	; 0xe214
   12834:	str	sl, [sp, #32]
   12838:	str	r9, [sp, #36]	; 0x24
   1283c:	movt	r0, #2
   12840:	mov	r4, r0
   12844:	ldr	r0, [r0, #88]	; 0x58
   12848:	bl	11650 <strlen@plt>
   1284c:	str	r0, [r4, #84]	; 0x54
   12850:	ldr	r0, [sp, #44]	; 0x2c
   12854:	blx	r0
   12858:	cmn	r0, #1
   1285c:	beq	12af8 <__assert_fail@plt+0x12f8>
   12860:	mov	r4, r0
   12864:	ldr	r0, [sp, #40]	; 0x28
   12868:	mov	sl, #0
   1286c:	add	r0, r0, #4
   12870:	str	r0, [sp, #28]
   12874:	ldr	r0, [sp, #32]
   12878:	add	r0, r0, #4
   1287c:	str	r0, [sp, #24]
   12880:	ldr	r0, [sp, #36]	; 0x24
   12884:	sub	r0, r0, #2
   12888:	str	r0, [sp, #20]
   1288c:	b	128b8 <__assert_fail@plt+0x10b8>
   12890:	ldr	r8, [sp, #48]	; 0x30
   12894:	mov	r1, r9
   12898:	mov	r7, r9
   1289c:	mov	r0, r8
   128a0:	bl	14bc4 <__assert_fail@plt+0x33c4>
   128a4:	ldr	r0, [sp, #44]	; 0x2c
   128a8:	blx	r0
   128ac:	mov	r4, r0
   128b0:	cmn	r0, #1
   128b4:	beq	12af8 <__assert_fail@plt+0x12f8>
   128b8:	mov	r0, r8
   128bc:	mov	r1, r7
   128c0:	bl	1517c <__assert_fail@plt+0x397c>
   128c4:	movw	r0, #57800	; 0xe1c8
   128c8:	ldr	r1, [sp, #32]
   128cc:	str	sl, [r7, #16]
   128d0:	mov	r9, r7
   128d4:	movt	r0, #2
   128d8:	mov	r5, r0
   128dc:	ldr	r0, [r0]
   128e0:	ldr	r2, [r1, r0, lsl #2]
   128e4:	ldr	r1, [sp, #40]	; 0x28
   128e8:	str	sl, [sp]
   128ec:	str	sl, [sp, #4]
   128f0:	ldr	r0, [r1, r0, lsl #2]
   128f4:	movw	r1, #57876	; 0xe214
   128f8:	movt	r1, #2
   128fc:	mov	r6, r1
   12900:	ldrb	r1, [r1, #5]
   12904:	add	r3, r0, #1
   12908:	mov	r0, r8
   1290c:	eor	r1, r1, #1
   12910:	str	r1, [sp, #8]
   12914:	mov	r1, r7
   12918:	bl	14948 <__assert_fail@plt+0x3148>
   1291c:	mov	r0, #1
   12920:	ldr	r2, [sp, #36]	; 0x24
   12924:	strb	r0, [r6, #5]
   12928:	ldr	r0, [r5]
   1292c:	add	r1, r0, #1
   12930:	cmp	r1, r2
   12934:	bge	12890 <__assert_fail@plt+0x1090>
   12938:	ldr	r1, [sp, #28]
   1293c:	sub	r4, r4, #1
   12940:	mov	r7, r6
   12944:	add	r5, r1, r0, lsl #2
   12948:	ldr	r1, [sp, #24]
   1294c:	add	r8, r1, r0, lsl #2
   12950:	ldr	r1, [sp, #20]
   12954:	sub	r6, r1, r0
   12958:	mov	r0, #1
   1295c:	mov	r1, #1
   12960:	ldr	r2, [r8]
   12964:	ldr	r3, [r5]
   12968:	str	sl, [sp]
   1296c:	str	sl, [sp, #4]
   12970:	str	r4, [sp, #12]
   12974:	bic	r0, r1, r0
   12978:	ldr	r1, [r7, #32]
   1297c:	str	r0, [sp, #16]
   12980:	ldr	r0, [sp, #48]	; 0x30
   12984:	str	r1, [sp, #8]
   12988:	mov	r1, r9
   1298c:	bl	14718 <__assert_fail@plt+0x2f18>
   12990:	cmp	r6, #0
   12994:	beq	12890 <__assert_fail@plt+0x1090>
   12998:	ldrb	r0, [r7, #5]
   1299c:	add	r5, r5, #4
   129a0:	add	r8, r8, #4
   129a4:	sub	r6, r6, #1
   129a8:	b	1295c <__assert_fail@plt+0x115c>
   129ac:	ldr	r0, [r6]
   129b0:	ldr	r7, [sp, #48]	; 0x30
   129b4:	cmp	r0, r9
   129b8:	bge	12a18 <__assert_fail@plt+0x1218>
   129bc:	movw	r4, #57832	; 0xe1e8
   129c0:	mov	r8, #0
   129c4:	movt	r4, #2
   129c8:	ldr	r5, [sl, r0, lsl #2]
   129cc:	mov	r0, r5
   129d0:	bl	11650 <strlen@plt>
   129d4:	movw	r1, #57876	; 0xe214
   129d8:	add	r3, r0, #1
   129dc:	mov	r0, r7
   129e0:	mov	r2, r5
   129e4:	str	r8, [sp]
   129e8:	str	r8, [sp, #4]
   129ec:	movt	r1, #2
   129f0:	ldrb	r1, [r1, #5]
   129f4:	eor	r1, r1, #1
   129f8:	str	r1, [sp, #8]
   129fc:	mov	r1, r4
   12a00:	bl	14948 <__assert_fail@plt+0x3148>
   12a04:	ldr	r0, [r6]
   12a08:	add	r0, r0, #1
   12a0c:	cmp	r0, r9
   12a10:	str	r0, [r6]
   12a14:	blt	129c8 <__assert_fail@plt+0x11c8>
   12a18:	movw	r1, #57876	; 0xe214
   12a1c:	movw	r6, #57832	; 0xe1e8
   12a20:	mov	r0, #1
   12a24:	movt	r1, #2
   12a28:	movt	r6, #2
   12a2c:	strb	r0, [r1, #5]
   12a30:	ldr	r0, [r6]
   12a34:	mov	r2, r1
   12a38:	ldr	r1, [r6, #16]
   12a3c:	str	r0, [r2, #92]	; 0x5c
   12a40:	ldr	r0, [sp, #44]	; 0x2c
   12a44:	str	r1, [r6, #20]
   12a48:	blx	r0
   12a4c:	ldr	r8, [sp, #40]	; 0x28
   12a50:	cmn	r0, #1
   12a54:	beq	12ab4 <__assert_fail@plt+0x12b4>
   12a58:	movw	r4, #57832	; 0xe1e8
   12a5c:	mov	r5, #0
   12a60:	movt	r4, #2
   12a64:	b	12a78 <__assert_fail@plt+0x1278>
   12a68:	ldr	r0, [sp, #44]	; 0x2c
   12a6c:	blx	r0
   12a70:	cmn	r0, #1
   12a74:	beq	12ab4 <__assert_fail@plt+0x12b4>
   12a78:	movw	r0, #57876	; 0xe214
   12a7c:	movt	r0, #2
   12a80:	mov	r1, r0
   12a84:	ldr	r0, [r0, #36]	; 0x24
   12a88:	ldr	r1, [r1, #100]	; 0x64
   12a8c:	sub	r1, r1, #1
   12a90:	cmp	r1, r0
   12a94:	bcs	12a68 <__assert_fail@plt+0x1268>
   12a98:	mov	r0, r7
   12a9c:	mov	r1, r4
   12aa0:	bl	14bc4 <__assert_fail@plt+0x33c4>
   12aa4:	movw	r0, #57876	; 0xe214
   12aa8:	movt	r0, #2
   12aac:	str	r5, [r0, #36]	; 0x24
   12ab0:	b	12a68 <__assert_fail@plt+0x1268>
   12ab4:	movw	r0, #57876	; 0xe214
   12ab8:	ldr	r1, [r6]
   12abc:	movt	r0, #2
   12ac0:	ldr	r0, [r0, #92]	; 0x5c
   12ac4:	cmp	r1, r0
   12ac8:	bne	12ae8 <__assert_fail@plt+0x12e8>
   12acc:	cmp	r8, #0
   12ad0:	beq	12af8 <__assert_fail@plt+0x12f8>
   12ad4:	movw	r0, #57876	; 0xe214
   12ad8:	movt	r0, #2
   12adc:	ldrb	r0, [r0, #6]
   12ae0:	cmp	r0, #0
   12ae4:	bne	12af8 <__assert_fail@plt+0x12f8>
   12ae8:	movw	r1, #57832	; 0xe1e8
   12aec:	mov	r0, r7
   12af0:	movt	r1, #2
   12af4:	bl	14bc4 <__assert_fail@plt+0x33c4>
   12af8:	movw	r0, #57876	; 0xe214
   12afc:	movt	r0, #2
   12b00:	mov	r1, r0
   12b04:	ldr	r0, [r0, #40]	; 0x28
   12b08:	str	r0, [r1, #16]
   12b0c:	ldr	r0, [r1, #40]	; 0x28
   12b10:	sub	sp, fp, #28
   12b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b18:	movw	r8, #57808	; 0xe1d0
   12b1c:	movw	r1, #45114	; 0xb03a
   12b20:	mov	r0, #0
   12b24:	mov	r2, #5
   12b28:	movt	r8, #2
   12b2c:	movt	r1, #1
   12b30:	ldr	r4, [r8]
   12b34:	bl	114dc <dcgettext@plt>
   12b38:	mov	r6, r0
   12b3c:	bl	151bc <__assert_fail@plt+0x39bc>
   12b40:	mov	r2, r0
   12b44:	mov	r0, r4
   12b48:	mov	r1, r6
   12b4c:	mov	r3, #0
   12b50:	bl	11674 <fprintf@plt>
   12b54:	movw	r1, #45161	; 0xb069
   12b58:	ldr	r4, [r8]
   12b5c:	mov	r0, #0
   12b60:	mov	r2, #5
   12b64:	movt	r1, #1
   12b68:	bl	114dc <dcgettext@plt>
   12b6c:	mov	r1, r0
   12b70:	movw	r0, #57876	; 0xe214
   12b74:	mov	r3, #0
   12b78:	movt	r0, #2
   12b7c:	ldr	r2, [r0, #68]	; 0x44
   12b80:	mov	r0, r4
   12b84:	bl	11674 <fprintf@plt>
   12b88:	movw	r1, #45219	; 0xb0a3
   12b8c:	ldr	r4, [r8]
   12b90:	mov	r0, #0
   12b94:	mov	r2, #5
   12b98:	movt	r1, #1
   12b9c:	bl	114dc <dcgettext@plt>
   12ba0:	mov	r1, r0
   12ba4:	movw	r0, #57876	; 0xe214
   12ba8:	mov	r3, #0
   12bac:	movt	r0, #2
   12bb0:	ldr	r2, [r0, #72]	; 0x48
   12bb4:	mov	r0, r4
   12bb8:	bl	11674 <fprintf@plt>
   12bbc:	movw	r1, #45296	; 0xb0f0
   12bc0:	ldr	r4, [r8]
   12bc4:	mov	r0, #0
   12bc8:	mov	r2, #5
   12bcc:	movt	r1, #1
   12bd0:	bl	114dc <dcgettext@plt>
   12bd4:	mov	r7, r0
   12bd8:	movw	r0, #57876	; 0xe214
   12bdc:	movt	r0, #2
   12be0:	ldr	r6, [r0, #68]	; 0x44
   12be4:	bl	151bc <__assert_fail@plt+0x39bc>
   12be8:	sub	r2, r6, r0
   12bec:	movw	r6, #57800	; 0xe1c8
   12bf0:	mov	r0, r4
   12bf4:	mov	r1, r7
   12bf8:	mov	r3, #0
   12bfc:	movt	r6, #2
   12c00:	bl	11674 <fprintf@plt>
   12c04:	movw	r1, #45351	; 0xb127
   12c08:	ldr	r4, [r8]
   12c0c:	mov	r0, #0
   12c10:	mov	r2, #5
   12c14:	movt	r1, #1
   12c18:	bl	114dc <dcgettext@plt>
   12c1c:	mov	r1, r0
   12c20:	movw	r0, #57876	; 0xe214
   12c24:	mov	r3, #0
   12c28:	movt	r0, #2
   12c2c:	ldr	r2, [r0, #76]	; 0x4c
   12c30:	mov	r0, r4
   12c34:	bl	11674 <fprintf@plt>
   12c38:	movw	r1, #45403	; 0xb15b
   12c3c:	ldr	r4, [r8]
   12c40:	mov	r0, #0
   12c44:	mov	r2, #5
   12c48:	movt	r1, #1
   12c4c:	bl	114dc <dcgettext@plt>
   12c50:	mov	r1, r0
   12c54:	mov	r0, r4
   12c58:	mvn	r2, #-2147483648	; 0x80000000
   12c5c:	mov	r3, #0
   12c60:	bl	11674 <fprintf@plt>
   12c64:	mov	r0, #0
   12c68:	bl	117a0 <isatty@plt>
   12c6c:	movw	r1, #57876	; 0xe214
   12c70:	cmp	r0, #0
   12c74:	movt	r1, #2
   12c78:	beq	127ac <__assert_fail@plt+0xfac>
   12c7c:	movw	r1, #45463	; 0xb197
   12c80:	ldr	r4, [r8]
   12c84:	mov	r0, #0
   12c88:	mov	r2, #5
   12c8c:	movt	r1, #1
   12c90:	bl	114dc <dcgettext@plt>
   12c94:	mov	r1, r0
   12c98:	mov	r0, r4
   12c9c:	bl	11674 <fprintf@plt>
   12ca0:	movw	r1, #57876	; 0xe214
   12ca4:	cmp	r5, #0
   12ca8:	movt	r1, #2
   12cac:	beq	127ac <__assert_fail@plt+0xfac>
   12cb0:	movw	r1, #45636	; 0xb244
   12cb4:	ldr	r4, [r8]
   12cb8:	mov	r0, #0
   12cbc:	mov	r2, #5
   12cc0:	movt	r1, #1
   12cc4:	bl	114dc <dcgettext@plt>
   12cc8:	mov	r1, r0
   12ccc:	ldr	r0, [r6]
   12cd0:	ldr	r2, [sl, r0, lsl #2]
   12cd4:	mov	r0, r4
   12cd8:	bl	11674 <fprintf@plt>
   12cdc:	movw	r1, #57876	; 0xe214
   12ce0:	movt	r1, #2
   12ce4:	b	127ac <__assert_fail@plt+0xfac>
   12ce8:	mov	r0, #1
   12cec:	bl	13ce0 <__assert_fail@plt+0x24e0>
   12cf0:	mov	r0, #0
   12cf4:	bl	13ce0 <__assert_fail@plt+0x24e0>
   12cf8:	bl	11680 <__errno_location@plt>
   12cfc:	movw	r1, #44539	; 0xadfb
   12d00:	ldr	r4, [r0]
   12d04:	mov	r0, #0
   12d08:	mov	r2, #5
   12d0c:	movt	r1, #1
   12d10:	bl	114dc <dcgettext@plt>
   12d14:	mov	r2, r0
   12d18:	mov	r0, #1
   12d1c:	mov	r1, r4
   12d20:	bl	115a8 <error@plt>
   12d24:	movw	r1, #45917	; 0xb35d
   12d28:	movt	r1, #1
   12d2c:	b	12d38 <__assert_fail@plt+0x1538>
   12d30:	movw	r1, #46046	; 0xb3de
   12d34:	movt	r1, #1
   12d38:	mov	r0, #0
   12d3c:	mov	r2, #5
   12d40:	bl	114dc <dcgettext@plt>
   12d44:	mov	r2, r0
   12d48:	mov	r0, #1
   12d4c:	mov	r1, #0
   12d50:	mov	r3, r4
   12d54:	bl	115a8 <error@plt>
   12d58:	cmp	r6, #16
   12d5c:	bne	12dd0 <__assert_fail@plt+0x15d0>
   12d60:	movw	r1, #46107	; 0xb41b
   12d64:	movt	r1, #1
   12d68:	b	12dd8 <__assert_fail@plt+0x15d8>
   12d6c:	movw	r1, #44841	; 0xaf29
   12d70:	mov	r0, #0
   12d74:	mov	r2, #5
   12d78:	movt	r1, #1
   12d7c:	bl	114dc <dcgettext@plt>
   12d80:	mov	r2, r0
   12d84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d88:	mov	r1, #0
   12d8c:	ldr	r3, [r4, r0, lsl #4]
   12d90:	mov	r0, #1
   12d94:	bl	115a8 <error@plt>
   12d98:	bl	11680 <__errno_location@plt>
   12d9c:	movw	r1, #44898	; 0xaf62
   12da0:	ldr	r4, [r0]
   12da4:	mov	r0, #0
   12da8:	mov	r2, #5
   12dac:	movt	r1, #1
   12db0:	bl	114dc <dcgettext@plt>
   12db4:	mov	r2, r0
   12db8:	movw	r0, #57876	; 0xe214
   12dbc:	mov	r1, r4
   12dc0:	movt	r0, #2
   12dc4:	ldr	r3, [r0, #24]
   12dc8:	mov	r0, #1
   12dcc:	bl	115a8 <error@plt>
   12dd0:	movw	r1, #46206	; 0xb47e
   12dd4:	movt	r1, #1
   12dd8:	mov	r0, #0
   12ddc:	mov	r2, #5
   12de0:	bl	114dc <dcgettext@plt>
   12de4:	mov	r2, r0
   12de8:	mov	r0, #255	; 0xff
   12dec:	str	r0, [sp]
   12df0:	mov	r0, #1
   12df4:	mov	r1, #0
   12df8:	mov	r3, r4
   12dfc:	bl	115a8 <error@plt>
   12e00:	movw	r0, #44997	; 0xafc5
   12e04:	movw	r1, #44601	; 0xae39
   12e08:	movw	r3, #44609	; 0xae41
   12e0c:	movw	r2, #723	; 0x2d3
   12e10:	movt	r0, #1
   12e14:	movt	r1, #1
   12e18:	movt	r3, #1
   12e1c:	bl	11800 <__assert_fail@plt>
   12e20:	movw	r0, #44574	; 0xae1e
   12e24:	movw	r1, #44601	; 0xae39
   12e28:	movw	r3, #44609	; 0xae41
   12e2c:	movw	r2, #483	; 0x1e3
   12e30:	movt	r0, #1
   12e34:	movt	r1, #1
   12e38:	movt	r3, #1
   12e3c:	bl	11800 <__assert_fail@plt>
   12e40:	mov	r7, r6
   12e44:	bl	11680 <__errno_location@plt>
   12e48:	mov	r5, r0
   12e4c:	movw	r1, #57876	; 0xe214
   12e50:	mov	r0, #0
   12e54:	mov	r2, #5
   12e58:	movt	r1, #2
   12e5c:	str	r0, [r1, #28]
   12e60:	movw	r1, #45088	; 0xb020
   12e64:	mov	r0, #0
   12e68:	ldr	r4, [r5]
   12e6c:	movt	r1, #1
   12e70:	bl	114dc <dcgettext@plt>
   12e74:	mov	r5, r0
   12e78:	mov	r0, #0
   12e7c:	mov	r1, #8
   12e80:	mov	r2, r7
   12e84:	bl	188c0 <__assert_fail@plt+0x70c0>
   12e88:	mov	r3, r0
   12e8c:	mov	r0, #1
   12e90:	mov	r1, r4
   12e94:	mov	r2, r5
   12e98:	bl	115a8 <error@plt>
   12e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea0:	add	fp, sp, #28
   12ea4:	sub	sp, sp, #28
   12ea8:	movw	r6, #57876	; 0xe214
   12eac:	mvn	r8, #0
   12eb0:	movt	r6, #2
   12eb4:	ldrb	r0, [r6, #7]
   12eb8:	cmp	r0, #0
   12ebc:	bne	132c0 <__assert_fail@plt+0x1ac0>
   12ec0:	movw	r1, #57832	; 0xe1e8
   12ec4:	ldr	r0, [r6, #28]
   12ec8:	ldr	r5, [r6, #76]	; 0x4c
   12ecc:	ldr	r4, [r6, #32]
   12ed0:	movt	r1, #2
   12ed4:	ldr	r7, [r1, #20]
   12ed8:	bl	117dc <getc@plt>
   12edc:	cmn	r0, #1
   12ee0:	beq	1323c <__assert_fail@plt+0x1a3c>
   12ee4:	add	r1, r4, r5
   12ee8:	mvn	r2, r7
   12eec:	mvn	r5, #0
   12ef0:	mov	sl, #0
   12ef4:	mov	r9, #1
   12ef8:	add	r1, r2, r1
   12efc:	str	r1, [sp, #16]
   12f00:	mov	r1, #1
   12f04:	str	r1, [sp, #24]
   12f08:	mov	r1, #0
   12f0c:	str	r1, [sp, #20]
   12f10:	mov	r7, r5
   12f14:	tst	sl, #1
   12f18:	bne	12f4c <__assert_fail@plt+0x174c>
   12f1c:	mov	r5, r7
   12f20:	mov	r7, r5
   12f24:	mov	r5, r0
   12f28:	cmp	r9, #3
   12f2c:	bls	12fc4 <__assert_fail@plt+0x17c4>
   12f30:	b	13124 <__assert_fail@plt+0x1924>
   12f34:	ldr	r0, [r6, #28]
   12f38:	bl	117dc <getc@plt>
   12f3c:	mov	r9, #1
   12f40:	cmn	r0, #1
   12f44:	mov	r7, r5
   12f48:	beq	13234 <__assert_fail@plt+0x1a34>
   12f4c:	mov	r5, r0
   12f50:	cmp	r9, #1
   12f54:	bne	13030 <__assert_fail@plt+0x1830>
   12f58:	cmp	r5, #127	; 0x7f
   12f5c:	bhi	13084 <__assert_fail@plt+0x1884>
   12f60:	bl	11614 <__ctype_b_loc@plt>
   12f64:	sub	r1, r5, #10
   12f68:	cmp	r1, #4
   12f6c:	bcc	12f34 <__assert_fail@plt+0x1734>
   12f70:	ldr	r0, [r0]
   12f74:	add	r0, r0, r5, lsl #1
   12f78:	ldrh	r0, [r0]
   12f7c:	ands	r0, r0, #1
   12f80:	bne	12f34 <__assert_fail@plt+0x1734>
   12f84:	b	13054 <__assert_fail@plt+0x1854>
   12f88:	ldr	r0, [r6, #36]	; 0x24
   12f8c:	add	r0, r0, #1
   12f90:	str	r0, [r6, #36]	; 0x24
   12f94:	ldr	r7, [r6, #32]
   12f98:	cmp	r4, r7
   12f9c:	bne	13334 <__assert_fail@plt+0x1b34>
   12fa0:	ldr	r0, [r6, #28]
   12fa4:	bl	117dc <getc@plt>
   12fa8:	mov	r9, #1
   12fac:	cmn	r0, #1
   12fb0:	beq	13234 <__assert_fail@plt+0x1a34>
   12fb4:	mov	r7, r5
   12fb8:	mov	r5, r0
   12fbc:	cmp	r9, #3
   12fc0:	bhi	13124 <__assert_fail@plt+0x1924>
   12fc4:	add	r0, pc, #0
   12fc8:	ldr	pc, [r0, r9, lsl #2]
   12fcc:	andeq	r3, r1, r8
   12fd0:	ldrdeq	r2, [r1], -ip
   12fd4:	andeq	r3, r1, ip, lsr #1
   12fd8:	andeq	r3, r1, ip, asr #1
   12fdc:	cmp	r5, #127	; 0x7f
   12fe0:	bhi	13084 <__assert_fail@plt+0x1884>
   12fe4:	bl	11614 <__ctype_b_loc@plt>
   12fe8:	sub	r1, r5, #10
   12fec:	cmp	r1, #4
   12ff0:	bcc	12fa0 <__assert_fail@plt+0x17a0>
   12ff4:	ldr	r0, [r0]
   12ff8:	add	r0, r0, r5, lsl #1
   12ffc:	ldrh	r0, [r0]
   13000:	ands	r0, r0, #1
   13004:	bne	12fa0 <__assert_fail@plt+0x17a0>
   13008:	cmp	r5, #10
   1300c:	bne	1305c <__assert_fail@plt+0x185c>
   13010:	cmp	r7, #127	; 0x7f
   13014:	bhi	12f88 <__assert_fail@plt+0x1788>
   13018:	bl	11614 <__ctype_b_loc@plt>
   1301c:	ldr	r0, [r0]
   13020:	ldrb	r0, [r0, r7, lsl #1]
   13024:	tst	r0, #1
   13028:	beq	12f88 <__assert_fail@plt+0x1788>
   1302c:	b	12f94 <__assert_fail@plt+0x1794>
   13030:	cmp	r9, #0
   13034:	beq	13054 <__assert_fail@plt+0x1854>
   13038:	cmp	r9, #2
   1303c:	beq	130ac <__assert_fail@plt+0x18ac>
   13040:	cmp	r9, #3
   13044:	bne	1312c <__assert_fail@plt+0x192c>
   13048:	mov	sl, #1
   1304c:	mov	r9, #0
   13050:	b	13130 <__assert_fail@plt+0x1930>
   13054:	cmp	r5, #10
   13058:	beq	13308 <__assert_fail@plt+0x1b08>
   1305c:	cmp	r5, #127	; 0x7f
   13060:	bhi	13084 <__assert_fail@plt+0x1884>
   13064:	ldr	r0, [r6, #88]	; 0x58
   13068:	cmp	r0, #0
   1306c:	bne	13084 <__assert_fail@plt+0x1884>
   13070:	bl	11614 <__ctype_b_loc@plt>
   13074:	ldr	r0, [r0]
   13078:	ldrb	r0, [r0, r5, lsl #1]
   1307c:	tst	r0, #1
   13080:	bne	13194 <__assert_fail@plt+0x1994>
   13084:	mov	r9, #3
   13088:	cmp	r5, #92	; 0x5c
   1308c:	bne	13168 <__assert_fail@plt+0x1968>
   13090:	mov	r7, r5
   13094:	ldr	r0, [r6, #28]
   13098:	bl	117dc <getc@plt>
   1309c:	mov	sl, #1
   130a0:	cmn	r0, #1
   130a4:	bne	12f14 <__assert_fail@plt+0x1714>
   130a8:	b	13234 <__assert_fail@plt+0x1a34>
   130ac:	cmp	r5, #10
   130b0:	beq	133b0 <__assert_fail@plt+0x1bb0>
   130b4:	ldr	r7, [sp, #20]
   130b8:	mov	r9, #0
   130bc:	cmp	r5, r7
   130c0:	beq	13094 <__assert_fail@plt+0x1894>
   130c4:	mov	r9, #2
   130c8:	b	13130 <__assert_fail@plt+0x1930>
   130cc:	mov	r9, #0
   130d0:	mov	r7, r5
   130d4:	mov	sl, #0
   130d8:	cmp	r7, #0
   130dc:	ldrbeq	r0, [r6, #8]
   130e0:	cmpeq	r0, #0
   130e4:	bne	13144 <__assert_fail@plt+0x1944>
   130e8:	movw	r1, #46585	; 0xb5f9
   130ec:	mov	r0, #0
   130f0:	mov	r2, #5
   130f4:	movt	r1, #1
   130f8:	bl	114dc <dcgettext@plt>
   130fc:	mov	r2, r0
   13100:	mov	r0, #0
   13104:	mov	r1, #0
   13108:	bl	115a8 <error@plt>
   1310c:	mov	r0, #1
   13110:	strb	r0, [r6, #8]
   13114:	ldr	r0, [sp, #16]
   13118:	cmp	r4, r0
   1311c:	bcc	13150 <__assert_fail@plt+0x1950>
   13120:	b	13430 <__assert_fail@plt+0x1c30>
   13124:	mov	sl, #0
   13128:	b	13130 <__assert_fail@plt+0x1930>
   1312c:	mov	sl, #1
   13130:	mov	r7, r5
   13134:	cmp	r7, #0
   13138:	ldrbeq	r0, [r6, #8]
   1313c:	cmpeq	r0, #0
   13140:	beq	130e8 <__assert_fail@plt+0x18e8>
   13144:	ldr	r0, [sp, #16]
   13148:	cmp	r4, r0
   1314c:	bcs	13430 <__assert_fail@plt+0x1c30>
   13150:	strb	r7, [r4], #1
   13154:	ldr	r0, [r6, #28]
   13158:	bl	117dc <getc@plt>
   1315c:	cmn	r0, #1
   13160:	bne	12f14 <__assert_fail@plt+0x1714>
   13164:	b	13234 <__assert_fail@plt+0x1a34>
   13168:	cmp	r5, #34	; 0x22
   1316c:	cmpne	r5, #39	; 0x27
   13170:	bne	13048 <__assert_fail@plt+0x1848>
   13174:	ldr	r0, [r6, #28]
   13178:	bl	117dc <getc@plt>
   1317c:	mov	sl, #1
   13180:	mov	r9, #2
   13184:	cmn	r0, #1
   13188:	str	r5, [sp, #20]
   1318c:	bne	12f10 <__assert_fail@plt+0x1710>
   13190:	b	1324c <__assert_fail@plt+0x1a4c>
   13194:	mov	r0, #0
   13198:	strb	r0, [r4]
   1319c:	ldr	r7, [r6, #32]
   131a0:	ldr	r0, [r6, #20]
   131a4:	sub	r1, r4, r7
   131a8:	cmp	r0, #0
   131ac:	add	r4, r1, #1
   131b0:	beq	131d4 <__assert_fail@plt+0x19d4>
   131b4:	ldrb	r1, [r7]
   131b8:	ldrb	r2, [r0]
   131bc:	cmp	r2, r1
   131c0:	bne	131d4 <__assert_fail@plt+0x19d4>
   131c4:	mov	r1, r7
   131c8:	bl	11440 <strcmp@plt>
   131cc:	cmp	r0, #0
   131d0:	beq	1338c <__assert_fail@plt+0x1b8c>
   131d4:	ldrb	r0, [r6, #5]
   131d8:	mov	r1, #0
   131dc:	mov	r2, #0
   131e0:	mov	r3, r4
   131e4:	str	r1, [sp, #24]
   131e8:	movw	r1, #57832	; 0xe1e8
   131ec:	str	r2, [sp]
   131f0:	str	r2, [sp, #4]
   131f4:	mov	r2, r7
   131f8:	movt	r1, #2
   131fc:	eor	r0, r0, #1
   13200:	str	r0, [sp, #8]
   13204:	add	r0, r6, #64	; 0x40
   13208:	bl	14948 <__assert_fail@plt+0x3148>
   1320c:	ldr	r0, [r6, #28]
   13210:	ldr	r4, [r6, #32]
   13214:	bl	117dc <getc@plt>
   13218:	mov	sl, #1
   1321c:	cmn	r0, #1
   13220:	mov	r9, #1
   13224:	bne	12f10 <__assert_fail@plt+0x1710>
   13228:	ldr	r5, [sp, #20]
   1322c:	mov	r9, #1
   13230:	b	1324c <__assert_fail@plt+0x1a4c>
   13234:	ldr	r5, [sp, #20]
   13238:	b	1324c <__assert_fail@plt+0x1a4c>
   1323c:	mov	r0, #1
   13240:	mov	r5, #0
   13244:	mov	r9, #1
   13248:	str	r0, [sp, #24]
   1324c:	mov	r0, #1
   13250:	strb	r0, [r6, #7]
   13254:	ldr	r7, [r6, #32]
   13258:	cmp	r4, r7
   1325c:	beq	132c0 <__assert_fail@plt+0x1ac0>
   13260:	mov	r0, #0
   13264:	cmp	r9, #2
   13268:	strb	r0, [r4], -r7
   1326c:	beq	13458 <__assert_fail@plt+0x1c58>
   13270:	ldr	r0, [sp, #24]
   13274:	mvn	r1, r0
   13278:	ldr	r0, [r6, #20]
   1327c:	clz	r2, r0
   13280:	lsr	r2, r2, #5
   13284:	orr	r1, r1, r2
   13288:	tst	r1, #1
   1328c:	bne	132b0 <__assert_fail@plt+0x1ab0>
   13290:	ldrb	r1, [r7]
   13294:	ldrb	r2, [r0]
   13298:	cmp	r2, r1
   1329c:	bne	132b0 <__assert_fail@plt+0x1ab0>
   132a0:	mov	r1, r7
   132a4:	bl	11440 <strcmp@plt>
   132a8:	cmp	r0, #0
   132ac:	beq	132c0 <__assert_fail@plt+0x1ac0>
   132b0:	add	r8, r4, #1
   132b4:	ldr	r0, [r6, #88]	; 0x58
   132b8:	cmp	r0, #0
   132bc:	beq	132cc <__assert_fail@plt+0x1acc>
   132c0:	mov	r0, r8
   132c4:	sub	sp, fp, #28
   132c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132cc:	ldrb	r0, [r6, #5]
   132d0:	mov	r1, #0
   132d4:	mov	r2, r7
   132d8:	mov	r3, r8
   132dc:	str	r1, [sp]
   132e0:	str	r1, [sp, #4]
   132e4:	movw	r1, #57832	; 0xe1e8
   132e8:	movt	r1, #2
   132ec:	eor	r0, r0, #1
   132f0:	str	r0, [sp, #8]
   132f4:	add	r0, r6, #64	; 0x40
   132f8:	bl	14948 <__assert_fail@plt+0x3148>
   132fc:	mov	r0, r8
   13300:	sub	sp, fp, #28
   13304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13308:	cmp	r7, #127	; 0x7f
   1330c:	bhi	13324 <__assert_fail@plt+0x1b24>
   13310:	bl	11614 <__ctype_b_loc@plt>
   13314:	ldr	r0, [r0]
   13318:	ldrb	r0, [r0, r7, lsl #1]
   1331c:	tst	r0, #1
   13320:	bne	13330 <__assert_fail@plt+0x1b30>
   13324:	ldr	r0, [r6, #36]	; 0x24
   13328:	add	r0, r0, #1
   1332c:	str	r0, [r6, #36]	; 0x24
   13330:	ldr	r7, [r6, #32]
   13334:	mov	r0, #0
   13338:	strb	r0, [r4], -r7
   1333c:	ldr	r0, [r6, #20]
   13340:	add	r8, r4, #1
   13344:	cmp	r0, #0
   13348:	beq	132b4 <__assert_fail@plt+0x1ab4>
   1334c:	ldrb	r1, [r7]
   13350:	ldrb	r2, [r0]
   13354:	cmp	r2, r1
   13358:	bne	132b4 <__assert_fail@plt+0x1ab4>
   1335c:	mov	r1, r7
   13360:	bl	11440 <strcmp@plt>
   13364:	cmp	r0, #0
   13368:	bne	132b4 <__assert_fail@plt+0x1ab4>
   1336c:	mov	r0, #1
   13370:	strb	r0, [r6, #7]
   13374:	ldr	r0, [sp, #24]
   13378:	tst	r0, #1
   1337c:	mvnne	r8, #0
   13380:	mov	r0, r8
   13384:	sub	sp, fp, #28
   13388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1338c:	mov	r0, #1
   13390:	strb	r0, [r6, #7]
   13394:	ldr	r0, [sp, #24]
   13398:	tst	r0, #1
   1339c:	mvnne	r4, #0
   133a0:	mov	r8, r4
   133a4:	mov	r0, r8
   133a8:	sub	sp, fp, #28
   133ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b0:	ldr	r0, [r6, #88]	; 0x58
   133b4:	cmp	r0, #0
   133b8:	bne	133fc <__assert_fail@plt+0x1bfc>
   133bc:	ldrb	r0, [r6, #5]
   133c0:	cmp	r0, #1
   133c4:	bne	133fc <__assert_fail@plt+0x1bfc>
   133c8:	movw	r1, #57832	; 0xe1e8
   133cc:	ldr	r0, [r6, #92]	; 0x5c
   133d0:	movt	r1, #2
   133d4:	ldr	r1, [r1]
   133d8:	cmp	r1, r0
   133dc:	beq	133fc <__assert_fail@plt+0x1bfc>
   133e0:	ldr	r0, [r6, #64]	; 0x40
   133e4:	cmp	r0, #0
   133e8:	bne	133fc <__assert_fail@plt+0x1bfc>
   133ec:	movw	r1, #57832	; 0xe1e8
   133f0:	add	r0, r6, #64	; 0x40
   133f4:	movt	r1, #2
   133f8:	bl	14bc4 <__assert_fail@plt+0x33c4>
   133fc:	movw	r1, #46483	; 0xb593
   13400:	mov	r0, #0
   13404:	mov	r2, #5
   13408:	movt	r1, #1
   1340c:	bl	114dc <dcgettext@plt>
   13410:	ldr	r2, [sp, #20]
   13414:	movw	r1, #46578	; 0xb5f2
   13418:	mov	r4, r0
   1341c:	movw	r0, #46571	; 0xb5eb
   13420:	movt	r0, #1
   13424:	movt	r1, #1
   13428:	cmp	r2, #34	; 0x22
   1342c:	b	134d0 <__assert_fail@plt+0x1cd0>
   13430:	bl	141bc <__assert_fail@plt+0x29bc>
   13434:	movw	r1, #46724	; 0xb684
   13438:	mov	r0, #0
   1343c:	mov	r2, #5
   13440:	movt	r1, #1
   13444:	bl	114dc <dcgettext@plt>
   13448:	mov	r2, r0
   1344c:	mov	r0, #1
   13450:	mov	r1, #0
   13454:	bl	115a8 <error@plt>
   13458:	ldr	r0, [r6, #88]	; 0x58
   1345c:	cmp	r0, #0
   13460:	bne	134a4 <__assert_fail@plt+0x1ca4>
   13464:	ldrb	r0, [r6, #5]
   13468:	cmp	r0, #1
   1346c:	bne	134a4 <__assert_fail@plt+0x1ca4>
   13470:	movw	r1, #57832	; 0xe1e8
   13474:	ldr	r0, [r6, #92]	; 0x5c
   13478:	movt	r1, #2
   1347c:	ldr	r1, [r1]
   13480:	cmp	r1, r0
   13484:	beq	134a4 <__assert_fail@plt+0x1ca4>
   13488:	ldr	r0, [r6, #64]	; 0x40
   1348c:	cmp	r0, #0
   13490:	bne	134a4 <__assert_fail@plt+0x1ca4>
   13494:	movw	r1, #57832	; 0xe1e8
   13498:	add	r0, r6, #64	; 0x40
   1349c:	movt	r1, #2
   134a0:	bl	14bc4 <__assert_fail@plt+0x33c4>
   134a4:	movw	r1, #46483	; 0xb593
   134a8:	mov	r0, #0
   134ac:	mov	r2, #5
   134b0:	movt	r1, #1
   134b4:	bl	114dc <dcgettext@plt>
   134b8:	movw	r1, #46578	; 0xb5f2
   134bc:	mov	r4, r0
   134c0:	movw	r0, #46571	; 0xb5eb
   134c4:	cmp	r5, #34	; 0x22
   134c8:	movt	r0, #1
   134cc:	movt	r1, #1
   134d0:	moveq	r1, r0
   134d4:	mov	r0, #0
   134d8:	mov	r2, #5
   134dc:	bl	114dc <dcgettext@plt>
   134e0:	mov	r3, r0
   134e4:	mov	r0, #1
   134e8:	mov	r1, #0
   134ec:	mov	r2, r4
   134f0:	bl	115a8 <error@plt>
   134f4:	bx	lr
   134f8:	push	{r4, r5, fp, lr}
   134fc:	add	fp, sp, #8
   13500:	bl	11620 <getpid@plt>
   13504:	movw	r4, #57876	; 0xe214
   13508:	movt	r4, #2
   1350c:	ldr	r1, [r4, #12]
   13510:	cmp	r0, r1
   13514:	bne	13554 <__assert_fail@plt+0x1d54>
   13518:	ldrb	r0, [r4, #10]
   1351c:	cmp	r0, #0
   13520:	popne	{r4, r5, fp, pc}
   13524:	mov	r0, #1
   13528:	mov	r1, #0
   1352c:	mov	r5, #0
   13530:	strb	r0, [r4, #10]
   13534:	mov	r0, #1
   13538:	bl	14214 <__assert_fail@plt+0x2a14>
   1353c:	strb	r5, [r4, #10]
   13540:	ldr	r0, [r4, #16]
   13544:	ldr	r1, [r4, #40]	; 0x28
   13548:	cmp	r0, r1
   1354c:	bne	13574 <__assert_fail@plt+0x1d74>
   13550:	pop	{r4, r5, fp, pc}
   13554:	movw	r0, #47473	; 0xb971
   13558:	movw	r1, #44601	; 0xae39
   1355c:	movw	r3, #47493	; 0xb985
   13560:	movw	r2, #1605	; 0x645
   13564:	movt	r0, #1
   13568:	movt	r1, #1
   1356c:	movt	r3, #1
   13570:	bl	11800 <__assert_fail@plt>
   13574:	ldr	r0, [r4, #40]	; 0x28
   13578:	bl	114a0 <_exit@plt>
   1357c:	push	{fp, lr}
   13580:	mov	fp, sp
   13584:	movw	r1, #45748	; 0xb2b4
   13588:	mov	r0, #0
   1358c:	mov	r2, #5
   13590:	movt	r1, #1
   13594:	bl	114dc <dcgettext@plt>
   13598:	mov	r2, r0
   1359c:	mov	r0, #1
   135a0:	mov	r1, #0
   135a4:	bl	115a8 <error@plt>
   135a8:	push	{r4, r5, r6, r7, fp, lr}
   135ac:	add	fp, sp, #16
   135b0:	sub	sp, sp, #32
   135b4:	movw	r5, #57704	; 0xe168
   135b8:	movw	r7, #57876	; 0xe214
   135bc:	mov	r4, r3
   135c0:	movt	r5, #2
   135c4:	movt	r7, #2
   135c8:	ldr	r0, [r5]
   135cc:	cmp	r0, #0
   135d0:	beq	13600 <__assert_fail@plt+0x1e00>
   135d4:	ldr	r0, [r5]
   135d8:	ldr	r1, [r7, #44]	; 0x2c
   135dc:	cmp	r1, r0
   135e0:	bcc	13600 <__assert_fail@plt+0x1e00>
   135e4:	mov	r0, #0
   135e8:	mov	r1, #1
   135ec:	bl	14214 <__assert_fail@plt+0x2a14>
   135f0:	ldr	r0, [r5]
   135f4:	ldr	r1, [r7, #44]	; 0x2c
   135f8:	cmp	r1, r0
   135fc:	bcs	135e4 <__assert_fail@plt+0x1de4>
   13600:	ldrb	r0, [r7, #3]
   13604:	cmp	r0, #1
   13608:	bne	1362c <__assert_fail@plt+0x1e2c>
   1360c:	mov	r0, #1
   13610:	mov	r6, #1
   13614:	bl	1451c <__assert_fail@plt+0x2d1c>
   13618:	cmp	r0, #0
   1361c:	beq	137f0 <__assert_fail@plt+0x1ff0>
   13620:	ldrb	r0, [r7, #3]
   13624:	cmp	r0, #0
   13628:	bne	1363c <__assert_fail@plt+0x1e3c>
   1362c:	ldrb	r0, [r7, #1]
   13630:	cmp	r0, #1
   13634:	moveq	r0, #0
   13638:	bleq	1451c <__assert_fail@plt+0x2d1c>
   1363c:	mov	r0, #0
   13640:	mov	r1, #0
   13644:	bl	14214 <__assert_fail@plt+0x2a14>
   13648:	add	r0, sp, #4
   1364c:	bl	18f84 <__assert_fail@plt+0x7784>
   13650:	cmp	r0, #0
   13654:	bne	13b38 <__assert_fail@plt+0x2338>
   13658:	ldr	r0, [sp, #8]
   1365c:	mov	r1, #2
   13660:	mov	r2, #1
   13664:	bl	1a50c <__assert_fail@plt+0x8d0c>
   13668:	bl	11734 <fork@plt>
   1366c:	mov	r5, r0
   13670:	cmn	r0, #1
   13674:	ble	13744 <__assert_fail@plt+0x1f44>
   13678:	cmp	r5, #0
   1367c:	beq	136f4 <__assert_fail@plt+0x1ef4>
   13680:	cmn	r5, #1
   13684:	beq	13b4c <__assert_fail@plt+0x234c>
   13688:	ldr	r0, [sp, #8]
   1368c:	bl	117e8 <close@plt>
   13690:	ldr	r0, [sp, #4]
   13694:	add	r1, sp, #12
   13698:	mov	r2, #4
   1369c:	bl	18ea8 <__assert_fail@plt+0x76a8>
   136a0:	cmp	r0, #4
   136a4:	beq	137c8 <__assert_fail@plt+0x1fc8>
   136a8:	mov	r4, r0
   136ac:	cmp	r0, #0
   136b0:	beq	13798 <__assert_fail@plt+0x1f98>
   136b4:	cmn	r4, #1
   136b8:	bne	13b60 <__assert_fail@plt+0x2360>
   136bc:	ldr	r0, [sp, #4]
   136c0:	bl	117e8 <close@plt>
   136c4:	bl	11680 <__errno_location@plt>
   136c8:	movw	r1, #46793	; 0xb6c9
   136cc:	ldr	r4, [r0]
   136d0:	mov	r0, #0
   136d4:	mov	r2, #5
   136d8:	movt	r1, #1
   136dc:	bl	114dc <dcgettext@plt>
   136e0:	mov	r2, r0
   136e4:	mov	r0, #0
   136e8:	mov	r1, r4
   136ec:	bl	115a8 <error@plt>
   136f0:	b	139f8 <__assert_fail@plt+0x21f8>
   136f4:	ldr	r0, [sp, #4]
   136f8:	bl	117e8 <close@plt>
   136fc:	mov	r0, #0
   13700:	str	r0, [r7, #40]	; 0x28
   13704:	bl	158dc <__assert_fail@plt+0x40dc>
   13708:	cmp	r0, #0
   1370c:	beq	13714 <__assert_fail@plt+0x1f14>
   13710:	bl	158fc <__assert_fail@plt+0x40fc>
   13714:	ldr	r5, [r7, #52]	; 0x34
   13718:	cmp	r5, #0
   1371c:	beq	13790 <__assert_fail@plt+0x1f90>
   13720:	ldr	r0, [r7, #56]	; 0x38
   13724:	mov	r3, #0
   13728:	ldr	r1, [r0, r3, lsl #2]
   1372c:	cmp	r1, #0
   13730:	beq	137fc <__assert_fail@plt+0x1ffc>
   13734:	add	r3, r3, #1
   13738:	cmp	r5, r3
   1373c:	bne	13728 <__assert_fail@plt+0x1f28>
   13740:	b	13804 <__assert_fail@plt+0x2004>
   13744:	bl	11680 <__errno_location@plt>
   13748:	mov	r6, r0
   1374c:	ldr	r0, [r0]
   13750:	cmp	r0, #11
   13754:	bne	13678 <__assert_fail@plt+0x1e78>
   13758:	ldr	r0, [r7, #44]	; 0x2c
   1375c:	cmp	r0, #0
   13760:	beq	13678 <__assert_fail@plt+0x1e78>
   13764:	mov	r0, #0
   13768:	mov	r1, #1
   1376c:	bl	14214 <__assert_fail@plt+0x2a14>
   13770:	bl	11734 <fork@plt>
   13774:	mov	r5, r0
   13778:	cmp	r0, #0
   1377c:	bpl	13678 <__assert_fail@plt+0x1e78>
   13780:	ldr	r0, [r6]
   13784:	cmp	r0, #11
   13788:	beq	13758 <__assert_fail@plt+0x1f58>
   1378c:	b	13678 <__assert_fail@plt+0x1e78>
   13790:	ldr	r0, [r7, #56]	; 0x38
   13794:	b	13804 <__assert_fail@plt+0x2004>
   13798:	ldr	r4, [r7, #52]	; 0x34
   1379c:	cmp	r4, #0
   137a0:	beq	13918 <__assert_fail@plt+0x2118>
   137a4:	ldr	r0, [r7, #56]	; 0x38
   137a8:	mov	r1, #0
   137ac:	ldr	r2, [r0, r1, lsl #2]
   137b0:	cmp	r2, #0
   137b4:	beq	13990 <__assert_fail@plt+0x2190>
   137b8:	add	r1, r1, #1
   137bc:	cmp	r4, r1
   137c0:	bne	137ac <__assert_fail@plt+0x1fac>
   137c4:	b	13998 <__assert_fail@plt+0x2198>
   137c8:	ldr	r0, [sp, #4]
   137cc:	bl	117e8 <close@plt>
   137d0:	mov	r1, sp
   137d4:	mov	r0, r5
   137d8:	mov	r2, #0
   137dc:	mov	r6, #0
   137e0:	bl	1156c <waitpid@plt>
   137e4:	ldr	r0, [sp, #12]
   137e8:	cmp	r0, #7
   137ec:	bne	13b90 <__assert_fail@plt+0x2390>
   137f0:	mov	r0, r6
   137f4:	sub	sp, fp, #16
   137f8:	pop	{r4, r5, r6, r7, fp, pc}
   137fc:	cmp	r5, r3
   13800:	bne	13840 <__assert_fail@plt+0x2040>
   13804:	add	r1, r7, #52	; 0x34
   13808:	mov	r2, #4
   1380c:	bl	19864 <__assert_fail@plt+0x8064>
   13810:	str	r0, [r7, #56]	; 0x38
   13814:	ldr	r1, [r7, #52]	; 0x34
   13818:	cmp	r5, r1
   1381c:	bcs	1383c <__assert_fail@plt+0x203c>
   13820:	mov	r1, #0
   13824:	mov	r2, r5
   13828:	str	r1, [r0, r2, lsl #2]
   1382c:	add	r2, r2, #1
   13830:	ldr	r3, [r7, #52]	; 0x34
   13834:	cmp	r2, r3
   13838:	bcc	13828 <__assert_fail@plt+0x2028>
   1383c:	mov	r3, r5
   13840:	ldr	r1, [r0, r3, lsl #2]
   13844:	cmp	r1, #0
   13848:	bne	13a10 <__assert_fail@plt+0x2210>
   1384c:	mov	r1, #0
   13850:	movw	r2, #47300	; 0xb8c4
   13854:	str	r1, [r0, r3, lsl #2]
   13858:	mov	r0, #1
   1385c:	movt	r2, #1
   13860:	mov	r1, #19
   13864:	strb	r0, [r7, #6]
   13868:	ldr	r0, [r7, #44]	; 0x2c
   1386c:	add	r0, r0, #1
   13870:	str	r0, [r7, #44]	; 0x2c
   13874:	add	r0, sp, #12
   13878:	bl	1168c <snprintf@plt>
   1387c:	cmp	r0, #20
   13880:	bcs	138f8 <__assert_fail@plt+0x20f8>
   13884:	ldr	r0, [r7, #24]
   13888:	cmp	r0, #0
   1388c:	beq	138d4 <__assert_fail@plt+0x20d4>
   13890:	add	r1, sp, #12
   13894:	mov	r2, #1
   13898:	bl	11668 <setenv@plt>
   1389c:	cmn	r0, #1
   138a0:	bgt	138d4 <__assert_fail@plt+0x20d4>
   138a4:	bl	11680 <__errno_location@plt>
   138a8:	movw	r1, #47393	; 0xb921
   138ac:	ldr	r5, [r0]
   138b0:	mov	r0, #0
   138b4:	mov	r2, #5
   138b8:	movt	r1, #1
   138bc:	bl	114dc <dcgettext@plt>
   138c0:	ldr	r3, [r7, #24]
   138c4:	mov	r2, r0
   138c8:	mov	r0, #0
   138cc:	mov	r1, r5
   138d0:	bl	115a8 <error@plt>
   138d4:	ldrb	r1, [r7, #4]
   138d8:	ldrb	r0, [r7, #2]
   138dc:	cmp	r1, #0
   138e0:	beq	13920 <__assert_fail@plt+0x2120>
   138e4:	cmp	r0, #0
   138e8:	beq	13a78 <__assert_fail@plt+0x2278>
   138ec:	movw	r5, #47159	; 0xb837
   138f0:	movt	r5, #1
   138f4:	b	13938 <__assert_fail@plt+0x2138>
   138f8:	movw	r0, #47303	; 0xb8c7
   138fc:	movw	r1, #44601	; 0xae39
   13900:	movw	r3, #47361	; 0xb901
   13904:	movw	r2, #1190	; 0x4a6
   13908:	movt	r0, #1
   1390c:	movt	r1, #1
   13910:	movt	r3, #1
   13914:	bl	11800 <__assert_fail@plt>
   13918:	ldr	r0, [r7, #56]	; 0x38
   1391c:	b	13998 <__assert_fail@plt+0x2198>
   13920:	movw	r1, #47159	; 0xb837
   13924:	movw	r5, #47235	; 0xb883
   13928:	cmp	r0, #0
   1392c:	movt	r1, #1
   13930:	movt	r5, #1
   13934:	movne	r5, r1
   13938:	mov	r0, #0
   1393c:	bl	117e8 <close@plt>
   13940:	mov	r0, r5
   13944:	mov	r1, #0
   13948:	bl	1610c <__assert_fail@plt+0x490c>
   1394c:	cmn	r0, #1
   13950:	bgt	13a30 <__assert_fail@plt+0x2230>
   13954:	ldrb	r7, [r7, #2]
   13958:	bl	11680 <__errno_location@plt>
   1395c:	ldr	r6, [r0]
   13960:	mov	r0, #0
   13964:	mov	r1, #8
   13968:	mov	r2, r5
   1396c:	bl	188c0 <__assert_fail@plt+0x70c0>
   13970:	movw	r2, #52099	; 0xcb83
   13974:	mov	r3, r0
   13978:	cmp	r7, #1
   1397c:	movt	r2, #1
   13980:	bne	13a6c <__assert_fail@plt+0x226c>
   13984:	mov	r0, #1
   13988:	mov	r1, r6
   1398c:	bl	115a8 <error@plt>
   13990:	cmp	r4, r1
   13994:	bne	139d4 <__assert_fail@plt+0x21d4>
   13998:	add	r1, r7, #52	; 0x34
   1399c:	mov	r2, #4
   139a0:	bl	19864 <__assert_fail@plt+0x8064>
   139a4:	str	r0, [r7, #56]	; 0x38
   139a8:	ldr	r1, [r7, #52]	; 0x34
   139ac:	cmp	r4, r1
   139b0:	bcs	139d0 <__assert_fail@plt+0x21d0>
   139b4:	mov	r1, #0
   139b8:	mov	r2, r4
   139bc:	str	r1, [r0, r2, lsl #2]
   139c0:	add	r2, r2, #1
   139c4:	ldr	r3, [r7, #52]	; 0x34
   139c8:	cmp	r2, r3
   139cc:	bcc	139bc <__assert_fail@plt+0x21bc>
   139d0:	mov	r1, r4
   139d4:	ldr	r2, [r0, r1, lsl #2]
   139d8:	cmp	r2, #0
   139dc:	bne	13a10 <__assert_fail@plt+0x2210>
   139e0:	str	r5, [r0, r1, lsl #2]
   139e4:	mov	r0, #1
   139e8:	strb	r0, [r7, #6]
   139ec:	ldr	r0, [r7, #44]	; 0x2c
   139f0:	add	r0, r0, #1
   139f4:	str	r0, [r7, #44]	; 0x2c
   139f8:	ldr	r0, [sp, #4]
   139fc:	bl	117e8 <close@plt>
   13a00:	mov	r6, #1
   13a04:	mov	r0, r6
   13a08:	sub	sp, fp, #16
   13a0c:	pop	{r4, r5, r6, r7, fp, pc}
   13a10:	movw	r0, #47431	; 0xb947
   13a14:	movw	r1, #44601	; 0xae39
   13a18:	movw	r3, #47444	; 0xb954
   13a1c:	movw	r2, #1477	; 0x5c5
   13a20:	movt	r0, #1
   13a24:	movt	r1, #1
   13a28:	movt	r3, #1
   13a2c:	bl	11800 <__assert_fail@plt>
   13a30:	mov	r6, r0
   13a34:	cmp	r0, #0
   13a38:	beq	13a78 <__assert_fail@plt+0x2278>
   13a3c:	mov	r0, r6
   13a40:	mov	r1, #0
   13a44:	bl	114f4 <dup2@plt>
   13a48:	cmp	r0, #0
   13a4c:	bne	13b0c <__assert_fail@plt+0x230c>
   13a50:	mov	r0, r6
   13a54:	bl	117e8 <close@plt>
   13a58:	mov	r0, r4
   13a5c:	bl	153c0 <__assert_fail@plt+0x3bc0>
   13a60:	cmp	r0, #0
   13a64:	bne	13a88 <__assert_fail@plt+0x2288>
   13a68:	b	13a9c <__assert_fail@plt+0x229c>
   13a6c:	mov	r0, #0
   13a70:	mov	r1, r6
   13a74:	bl	115a8 <error@plt>
   13a78:	mov	r0, r4
   13a7c:	bl	153c0 <__assert_fail@plt+0x3bc0>
   13a80:	cmp	r0, #0
   13a84:	beq	13a9c <__assert_fail@plt+0x229c>
   13a88:	bl	11680 <__errno_location@plt>
   13a8c:	mov	r5, r0
   13a90:	mov	r0, #7
   13a94:	str	r0, [r5]
   13a98:	b	13abc <__assert_fail@plt+0x22bc>
   13a9c:	ldr	r0, [r4]
   13aa0:	mov	r1, r4
   13aa4:	bl	114b8 <execvp@plt>
   13aa8:	bl	11680 <__errno_location@plt>
   13aac:	mov	r5, r0
   13ab0:	ldr	r0, [r0]
   13ab4:	cmp	r0, #0
   13ab8:	beq	13acc <__assert_fail@plt+0x22cc>
   13abc:	ldr	r0, [sp, #8]
   13ac0:	mov	r1, r5
   13ac4:	mov	r2, #4
   13ac8:	bl	116bc <write@plt>
   13acc:	ldr	r0, [sp, #8]
   13ad0:	bl	117e8 <close@plt>
   13ad4:	ldr	r1, [r5]
   13ad8:	mov	r0, #126	; 0x7e
   13adc:	cmp	r1, #7
   13ae0:	beq	13b08 <__assert_fail@plt+0x2308>
   13ae4:	ldr	r3, [r4]
   13ae8:	movw	r2, #52099	; 0xcb83
   13aec:	mov	r0, #0
   13af0:	movt	r2, #1
   13af4:	bl	115a8 <error@plt>
   13af8:	ldr	r1, [r5]
   13afc:	mov	r0, #126	; 0x7e
   13b00:	cmp	r1, #2
   13b04:	movweq	r0, #127	; 0x7f
   13b08:	bl	114a0 <_exit@plt>
   13b0c:	bl	11680 <__errno_location@plt>
   13b10:	ldr	r4, [r0]
   13b14:	movw	r1, #47245	; 0xb88d
   13b18:	movt	r1, #1
   13b1c:	mov	r0, #0
   13b20:	mov	r2, #5
   13b24:	bl	114dc <dcgettext@plt>
   13b28:	mov	r2, r0
   13b2c:	mov	r0, #1
   13b30:	mov	r1, r4
   13b34:	bl	115a8 <error@plt>
   13b38:	bl	11680 <__errno_location@plt>
   13b3c:	ldr	r4, [r0]
   13b40:	movw	r1, #46747	; 0xb69b
   13b44:	movt	r1, #1
   13b48:	b	13b1c <__assert_fail@plt+0x231c>
   13b4c:	bl	11680 <__errno_location@plt>
   13b50:	ldr	r4, [r0]
   13b54:	movw	r1, #46781	; 0xb6bd
   13b58:	movt	r1, #1
   13b5c:	b	13b1c <__assert_fail@plt+0x231c>
   13b60:	bl	11680 <__errno_location@plt>
   13b64:	movw	r1, #46883	; 0xb723
   13b68:	ldr	r5, [r0]
   13b6c:	mov	r0, #0
   13b70:	mov	r2, #5
   13b74:	movt	r1, #1
   13b78:	bl	114dc <dcgettext@plt>
   13b7c:	mov	r2, r0
   13b80:	mov	r0, #1
   13b84:	mov	r1, r5
   13b88:	mov	r3, r4
   13b8c:	bl	115a8 <error@plt>
   13b90:	cmp	r0, #2
   13b94:	bne	13ba0 <__assert_fail@plt+0x23a0>
   13b98:	mov	r0, #127	; 0x7f
   13b9c:	bl	1162c <exit@plt>
   13ba0:	mov	r0, #126	; 0x7e
   13ba4:	bl	1162c <exit@plt>
   13ba8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bac:	add	fp, sp, #24
   13bb0:	sub	sp, sp, #16
   13bb4:	movw	r5, #57876	; 0xe214
   13bb8:	mvn	r8, #0
   13bbc:	movt	r5, #2
   13bc0:	ldrb	r0, [r5, #9]
   13bc4:	cmp	r0, #0
   13bc8:	bne	13c50 <__assert_fail@plt+0x2450>
   13bcc:	movw	r1, #57832	; 0xe1e8
   13bd0:	ldr	r0, [r5, #28]
   13bd4:	ldr	r7, [r5, #76]	; 0x4c
   13bd8:	ldr	r6, [r5, #32]
   13bdc:	movt	r1, #2
   13be0:	ldr	r4, [r1, #20]
   13be4:	bl	117dc <getc@plt>
   13be8:	cmn	r0, #1
   13bec:	beq	13c24 <__assert_fail@plt+0x2424>
   13bf0:	add	r1, r6, r7
   13bf4:	mvn	r2, r4
   13bf8:	add	r7, r2, r1
   13bfc:	ldrb	r1, [r5]
   13c00:	cmp	r0, r1
   13c04:	beq	13c5c <__assert_fail@plt+0x245c>
   13c08:	cmp	r6, r7
   13c0c:	bcs	13cb8 <__assert_fail@plt+0x24b8>
   13c10:	strb	r0, [r6], #1
   13c14:	ldr	r0, [r5, #28]
   13c18:	bl	117dc <getc@plt>
   13c1c:	cmn	r0, #1
   13c20:	bne	13bfc <__assert_fail@plt+0x23fc>
   13c24:	mov	r0, #1
   13c28:	strb	r0, [r5, #9]
   13c2c:	ldr	r2, [r5, #32]
   13c30:	cmp	r6, r2
   13c34:	beq	13c50 <__assert_fail@plt+0x2450>
   13c38:	mov	r0, #0
   13c3c:	strb	r0, [r6], -r2
   13c40:	ldr	r1, [r5, #88]	; 0x58
   13c44:	add	r8, r6, #1
   13c48:	cmp	r1, #0
   13c4c:	beq	13c88 <__assert_fail@plt+0x2488>
   13c50:	mov	r0, r8
   13c54:	sub	sp, fp, #24
   13c58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c5c:	ldr	r0, [r5, #36]	; 0x24
   13c60:	add	r0, r0, #1
   13c64:	str	r0, [r5, #36]	; 0x24
   13c68:	mov	r0, #0
   13c6c:	strb	r0, [r6]
   13c70:	ldr	r2, [r5, #32]
   13c74:	ldr	r1, [r5, #88]	; 0x58
   13c78:	sub	r3, r6, r2
   13c7c:	add	r8, r3, #1
   13c80:	cmp	r1, #0
   13c84:	bne	13c50 <__assert_fail@plt+0x2450>
   13c88:	ldrb	r1, [r5, #5]
   13c8c:	str	r0, [sp]
   13c90:	mov	r3, r8
   13c94:	eor	r1, r1, #1
   13c98:	stmib	sp, {r0, r1}
   13c9c:	movw	r1, #57832	; 0xe1e8
   13ca0:	add	r0, r5, #64	; 0x40
   13ca4:	movt	r1, #2
   13ca8:	bl	14948 <__assert_fail@plt+0x3148>
   13cac:	mov	r0, r8
   13cb0:	sub	sp, fp, #24
   13cb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cb8:	bl	141bc <__assert_fail@plt+0x29bc>
   13cbc:	movw	r1, #46724	; 0xb684
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	movt	r1, #1
   13ccc:	bl	114dc <dcgettext@plt>
   13cd0:	mov	r2, r0
   13cd4:	mov	r0, #1
   13cd8:	mov	r1, #0
   13cdc:	bl	115a8 <error@plt>
   13ce0:	push	{fp, lr}
   13ce4:	mov	fp, sp
   13ce8:	cmp	r0, #0
   13cec:	bne	13fc0 <__assert_fail@plt+0x27c0>
   13cf0:	movw	r5, #57820	; 0xe1dc
   13cf4:	movw	r1, #47693	; 0xba4d
   13cf8:	mov	r0, #0
   13cfc:	mov	r2, #5
   13d00:	movt	r5, #2
   13d04:	movt	r1, #1
   13d08:	ldr	r4, [r5]
   13d0c:	bl	114dc <dcgettext@plt>
   13d10:	movw	r6, #58012	; 0xe29c
   13d14:	mov	r1, r0
   13d18:	mov	r0, r4
   13d1c:	movt	r6, #2
   13d20:	ldr	r2, [r6]
   13d24:	bl	11674 <fprintf@plt>
   13d28:	movw	r1, #47742	; 0xba7e
   13d2c:	mov	r0, #0
   13d30:	mov	r2, #5
   13d34:	movt	r1, #1
   13d38:	bl	114dc <dcgettext@plt>
   13d3c:	ldr	r1, [r5]
   13d40:	bl	117b8 <fputs@plt>
   13d44:	movw	r1, #47820	; 0xbacc
   13d48:	mov	r0, #0
   13d4c:	mov	r2, #5
   13d50:	movt	r1, #1
   13d54:	bl	114dc <dcgettext@plt>
   13d58:	ldr	r1, [r5]
   13d5c:	bl	117b8 <fputs@plt>
   13d60:	movw	r1, #47937	; 0xbb41
   13d64:	mov	r0, #0
   13d68:	mov	r2, #5
   13d6c:	movt	r1, #1
   13d70:	bl	114dc <dcgettext@plt>
   13d74:	ldr	r1, [r5]
   13d78:	bl	117b8 <fputs@plt>
   13d7c:	movw	r1, #48149	; 0xbc15
   13d80:	mov	r0, #0
   13d84:	mov	r2, #5
   13d88:	movt	r1, #1
   13d8c:	bl	114dc <dcgettext@plt>
   13d90:	ldr	r1, [r5]
   13d94:	bl	117b8 <fputs@plt>
   13d98:	movw	r1, #48226	; 0xbc62
   13d9c:	mov	r0, #0
   13da0:	mov	r2, #5
   13da4:	movt	r1, #1
   13da8:	bl	114dc <dcgettext@plt>
   13dac:	ldr	r1, [r5]
   13db0:	bl	117b8 <fputs@plt>
   13db4:	movw	r1, #48460	; 0xbd4c
   13db8:	mov	r0, #0
   13dbc:	mov	r2, #5
   13dc0:	movt	r1, #1
   13dc4:	bl	114dc <dcgettext@plt>
   13dc8:	ldr	r1, [r5]
   13dcc:	bl	117b8 <fputs@plt>
   13dd0:	movw	r1, #48685	; 0xbe2d
   13dd4:	mov	r0, #0
   13dd8:	mov	r2, #5
   13ddc:	movt	r1, #1
   13de0:	bl	114dc <dcgettext@plt>
   13de4:	ldr	r1, [r5]
   13de8:	bl	117b8 <fputs@plt>
   13dec:	movw	r1, #48834	; 0xbec2
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	movt	r1, #1
   13dfc:	bl	114dc <dcgettext@plt>
   13e00:	ldr	r1, [r5]
   13e04:	bl	117b8 <fputs@plt>
   13e08:	movw	r1, #48886	; 0xbef6
   13e0c:	mov	r0, #0
   13e10:	mov	r2, #5
   13e14:	movt	r1, #1
   13e18:	bl	114dc <dcgettext@plt>
   13e1c:	ldr	r1, [r5]
   13e20:	bl	117b8 <fputs@plt>
   13e24:	movw	r1, #49097	; 0xbfc9
   13e28:	mov	r0, #0
   13e2c:	mov	r2, #5
   13e30:	movt	r1, #1
   13e34:	bl	114dc <dcgettext@plt>
   13e38:	ldr	r1, [r5]
   13e3c:	bl	117b8 <fputs@plt>
   13e40:	movw	r1, #49223	; 0xc047
   13e44:	mov	r0, #0
   13e48:	mov	r2, #5
   13e4c:	movt	r1, #1
   13e50:	bl	114dc <dcgettext@plt>
   13e54:	ldr	r1, [r5]
   13e58:	bl	117b8 <fputs@plt>
   13e5c:	movw	r1, #49382	; 0xc0e6
   13e60:	mov	r0, #0
   13e64:	mov	r2, #5
   13e68:	movt	r1, #1
   13e6c:	bl	114dc <dcgettext@plt>
   13e70:	ldr	r1, [r5]
   13e74:	bl	117b8 <fputs@plt>
   13e78:	movw	r1, #49462	; 0xc136
   13e7c:	mov	r0, #0
   13e80:	mov	r2, #5
   13e84:	movt	r1, #1
   13e88:	bl	114dc <dcgettext@plt>
   13e8c:	ldr	r1, [r5]
   13e90:	bl	117b8 <fputs@plt>
   13e94:	movw	r1, #49678	; 0xc20e
   13e98:	mov	r0, #0
   13e9c:	mov	r2, #5
   13ea0:	movt	r1, #1
   13ea4:	bl	114dc <dcgettext@plt>
   13ea8:	ldr	r1, [r5]
   13eac:	bl	117b8 <fputs@plt>
   13eb0:	movw	r1, #49752	; 0xc258
   13eb4:	mov	r0, #0
   13eb8:	mov	r2, #5
   13ebc:	movt	r1, #1
   13ec0:	bl	114dc <dcgettext@plt>
   13ec4:	ldr	r1, [r5]
   13ec8:	bl	117b8 <fputs@plt>
   13ecc:	movw	r1, #49815	; 0xc297
   13ed0:	mov	r0, #0
   13ed4:	mov	r2, #5
   13ed8:	movt	r1, #1
   13edc:	bl	114dc <dcgettext@plt>
   13ee0:	ldr	r1, [r5]
   13ee4:	bl	117b8 <fputs@plt>
   13ee8:	movw	r1, #49895	; 0xc2e7
   13eec:	mov	r0, #0
   13ef0:	mov	r2, #5
   13ef4:	movt	r1, #1
   13ef8:	bl	114dc <dcgettext@plt>
   13efc:	ldr	r1, [r5]
   13f00:	bl	117b8 <fputs@plt>
   13f04:	movw	r1, #50108	; 0xc3bc
   13f08:	mov	r0, #0
   13f0c:	mov	r2, #5
   13f10:	movt	r1, #1
   13f14:	bl	114dc <dcgettext@plt>
   13f18:	ldr	r1, [r5]
   13f1c:	bl	117b8 <fputs@plt>
   13f20:	movw	r1, #50182	; 0xc406
   13f24:	mov	r0, #0
   13f28:	mov	r2, #5
   13f2c:	movt	r1, #1
   13f30:	bl	114dc <dcgettext@plt>
   13f34:	ldr	r1, [r5]
   13f38:	bl	117b8 <fputs@plt>
   13f3c:	movw	r1, #50249	; 0xc449
   13f40:	mov	r0, #0
   13f44:	mov	r2, #5
   13f48:	movt	r1, #1
   13f4c:	bl	114dc <dcgettext@plt>
   13f50:	ldr	r1, [r5]
   13f54:	bl	117b8 <fputs@plt>
   13f58:	movw	r1, #50318	; 0xc48e
   13f5c:	mov	r0, #0
   13f60:	mov	r2, #5
   13f64:	movt	r1, #1
   13f68:	bl	114dc <dcgettext@plt>
   13f6c:	ldr	r1, [r5]
   13f70:	bl	117b8 <fputs@plt>
   13f74:	movw	r1, #50388	; 0xc4d4
   13f78:	mov	r0, #0
   13f7c:	mov	r2, #5
   13f80:	movt	r1, #1
   13f84:	bl	114dc <dcgettext@plt>
   13f88:	ldr	r1, [r5]
   13f8c:	bl	117b8 <fputs@plt>
   13f90:	movw	r1, #50447	; 0xc50f
   13f94:	mov	r0, #0
   13f98:	mov	r2, #5
   13f9c:	movt	r1, #1
   13fa0:	bl	114dc <dcgettext@plt>
   13fa4:	ldr	r1, [r5]
   13fa8:	bl	117b8 <fputs@plt>
   13fac:	ldr	r0, [r5]
   13fb0:	ldr	r1, [r6]
   13fb4:	bl	15c58 <__assert_fail@plt+0x4458>
   13fb8:	mov	r0, #0
   13fbc:	bl	1162c <exit@plt>
   13fc0:	mov	r4, r0
   13fc4:	movw	r0, #57808	; 0xe1d0
   13fc8:	movw	r1, #47654	; 0xba26
   13fcc:	mov	r2, #5
   13fd0:	movt	r0, #2
   13fd4:	movt	r1, #1
   13fd8:	ldr	r5, [r0]
   13fdc:	mov	r0, #0
   13fe0:	bl	114dc <dcgettext@plt>
   13fe4:	mov	r1, r0
   13fe8:	movw	r0, #58012	; 0xe29c
   13fec:	movt	r0, #2
   13ff0:	ldr	r2, [r0]
   13ff4:	mov	r0, r5
   13ff8:	bl	11674 <fprintf@plt>
   13ffc:	mov	r0, r4
   14000:	bl	1162c <exit@plt>
   14004:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14008:	add	fp, sp, #24
   1400c:	sub	sp, sp, #16
   14010:	mov	r6, r2
   14014:	mov	r5, r1
   14018:	add	r1, sp, #12
   1401c:	mov	r2, #10
   14020:	mov	r7, r3
   14024:	mov	r4, r0
   14028:	bl	1144c <strtol@plt>
   1402c:	ldr	r1, [sp, #12]
   14030:	cmp	r1, r4
   14034:	beq	1411c <__assert_fail@plt+0x291c>
   14038:	ldrb	r1, [r1]
   1403c:	cmp	r1, #0
   14040:	bne	1411c <__assert_fail@plt+0x291c>
   14044:	ldr	r8, [fp, #8]
   14048:	cmp	r0, r6
   1404c:	blt	140cc <__assert_fail@plt+0x28cc>
   14050:	cmp	r7, #0
   14054:	bmi	140bc <__assert_fail@plt+0x28bc>
   14058:	cmp	r0, r7
   1405c:	mov	r6, r0
   14060:	ble	140b0 <__assert_fail@plt+0x28b0>
   14064:	movw	r0, #57808	; 0xe1d0
   14068:	movw	r1, #47608	; 0xb9f8
   1406c:	mov	r2, #5
   14070:	movt	r0, #2
   14074:	movt	r1, #1
   14078:	ldr	r6, [r0]
   1407c:	mov	r0, #0
   14080:	bl	114dc <dcgettext@plt>
   14084:	mov	r1, r0
   14088:	movw	r0, #58012	; 0xe29c
   1408c:	mov	r3, r4
   14090:	stm	sp, {r5, r7}
   14094:	movt	r0, #2
   14098:	ldr	r2, [r0]
   1409c:	mov	r0, r6
   140a0:	bl	11674 <fprintf@plt>
   140a4:	cmp	r8, #0
   140a8:	mov	r6, r7
   140ac:	bne	14114 <__assert_fail@plt+0x2914>
   140b0:	mov	r0, r6
   140b4:	sub	sp, fp, #24
   140b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140bc:	mov	r6, r0
   140c0:	mov	r0, r6
   140c4:	sub	sp, fp, #24
   140c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140cc:	movw	r0, #57808	; 0xe1d0
   140d0:	movw	r1, #47562	; 0xb9ca
   140d4:	mov	r2, #5
   140d8:	movt	r0, #2
   140dc:	movt	r1, #1
   140e0:	ldr	r7, [r0]
   140e4:	mov	r0, #0
   140e8:	bl	114dc <dcgettext@plt>
   140ec:	mov	r1, r0
   140f0:	movw	r0, #58012	; 0xe29c
   140f4:	mov	r3, r4
   140f8:	stm	sp, {r5, r6}
   140fc:	movt	r0, #2
   14100:	ldr	r2, [r0]
   14104:	mov	r0, r7
   14108:	bl	11674 <fprintf@plt>
   1410c:	cmp	r8, #0
   14110:	beq	140b0 <__assert_fail@plt+0x28b0>
   14114:	mov	r0, #1
   14118:	bl	13ce0 <__assert_fail@plt+0x24e0>
   1411c:	movw	r0, #57808	; 0xe1d0
   14120:	movw	r1, #47522	; 0xb9a2
   14124:	mov	r2, #5
   14128:	movt	r0, #2
   1412c:	movt	r1, #1
   14130:	ldr	r6, [r0]
   14134:	mov	r0, #0
   14138:	bl	114dc <dcgettext@plt>
   1413c:	mov	r1, r0
   14140:	movw	r0, #58012	; 0xe29c
   14144:	mov	r3, r4
   14148:	str	r5, [sp]
   1414c:	movt	r0, #2
   14150:	ldr	r2, [r0]
   14154:	mov	r0, r6
   14158:	bl	11674 <fprintf@plt>
   1415c:	mov	r0, #1
   14160:	bl	13ce0 <__assert_fail@plt+0x24e0>
   14164:	movw	r0, #57704	; 0xe168
   14168:	movt	r0, #2
   1416c:	ldr	r1, [r0]
   14170:	cmn	r1, #-2147483647	; 0x80000001
   14174:	beq	14184 <__assert_fail@plt+0x2984>
   14178:	ldr	r1, [r0]
   1417c:	add	r1, r1, #1
   14180:	str	r1, [r0]
   14184:	movw	r0, #57876	; 0xe214
   14188:	mov	r1, #1
   1418c:	movt	r0, #2
   14190:	str	r1, [r0, #48]	; 0x30
   14194:	bx	lr
   14198:	movw	r0, #57704	; 0xe168
   1419c:	movt	r0, #2
   141a0:	ldr	r1, [r0]
   141a4:	cmp	r1, #2
   141a8:	bxlt	lr
   141ac:	ldr	r1, [r0]
   141b0:	sub	r1, r1, #1
   141b4:	str	r1, [r0]
   141b8:	bx	lr
   141bc:	movw	r0, #57876	; 0xe214
   141c0:	movt	r0, #2
   141c4:	ldr	r1, [r0, #88]	; 0x58
   141c8:	cmp	r1, #0
   141cc:	bne	14210 <__assert_fail@plt+0x2a10>
   141d0:	ldrb	r1, [r0, #5]
   141d4:	cmp	r1, #1
   141d8:	bne	14210 <__assert_fail@plt+0x2a10>
   141dc:	movw	r2, #57832	; 0xe1e8
   141e0:	ldr	r1, [r0, #92]	; 0x5c
   141e4:	movt	r2, #2
   141e8:	ldr	r2, [r2]
   141ec:	cmp	r2, r1
   141f0:	bxeq	lr
   141f4:	ldr	r1, [r0, #64]	; 0x40
   141f8:	cmp	r1, #0
   141fc:	bne	14210 <__assert_fail@plt+0x2a10>
   14200:	movw	r1, #57832	; 0xe1e8
   14204:	add	r0, r0, #64	; 0x40
   14208:	movt	r1, #2
   1420c:	b	14bc4 <__assert_fail@plt+0x33c4>
   14210:	bx	lr
   14214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14218:	add	fp, sp, #28
   1421c:	sub	sp, sp, #20
   14220:	movw	sl, #57876	; 0xe214
   14224:	movt	sl, #2
   14228:	ldr	r2, [sl, #44]	; 0x2c
   1422c:	cmp	r2, #0
   14230:	beq	144f0 <__assert_fail@plt+0x2cf0>
   14234:	eor	r2, r0, #1
   14238:	mov	r4, #0
   1423c:	add	r6, sp, #16
   14240:	mov	r5, #0
   14244:	str	r1, [sp, #12]
   14248:	str	r0, [sp, #8]
   1424c:	str	r2, [sp, #4]
   14250:	cmp	r5, r1
   14254:	mov	r1, #0
   14258:	str	r4, [sl, #48]	; 0x30
   1425c:	movwcs	r1, #1
   14260:	cmp	r0, #0
   14264:	and	r7, r1, r2
   14268:	beq	14308 <__assert_fail@plt+0x2b08>
   1426c:	b	1427c <__assert_fail@plt+0x2a7c>
   14270:	mov	r1, #0
   14274:	cmp	r1, r2
   14278:	bne	14390 <__assert_fail@plt+0x2b90>
   1427c:	mvn	r0, #0
   14280:	mov	r1, r6
   14284:	mov	r2, r7
   14288:	bl	1156c <waitpid@plt>
   1428c:	cmn	r0, #1
   14290:	bne	142c4 <__assert_fail@plt+0x2ac4>
   14294:	bl	11680 <__errno_location@plt>
   14298:	mov	r4, r0
   1429c:	ldr	r9, [r4]
   142a0:	cmp	r9, #4
   142a4:	bne	144f8 <__assert_fail@plt+0x2cf8>
   142a8:	ldr	r0, [sl, #48]	; 0x30
   142ac:	mvn	r0, #0
   142b0:	mov	r1, r6
   142b4:	mov	r2, r7
   142b8:	bl	1156c <waitpid@plt>
   142bc:	cmn	r0, #1
   142c0:	beq	1429c <__assert_fail@plt+0x2a9c>
   142c4:	cmp	r0, #0
   142c8:	beq	144c0 <__assert_fail@plt+0x2cc0>
   142cc:	ldr	r2, [sl, #52]	; 0x34
   142d0:	cmp	r2, #0
   142d4:	beq	14270 <__assert_fail@plt+0x2a70>
   142d8:	ldr	r3, [sl, #56]	; 0x38
   142dc:	mov	r1, #0
   142e0:	ldr	r4, [r3, r1, lsl #2]
   142e4:	cmp	r0, r4
   142e8:	beq	14274 <__assert_fail@plt+0x2a74>
   142ec:	add	r1, r1, #1
   142f0:	cmp	r1, r2
   142f4:	bcc	142e0 <__assert_fail@plt+0x2ae0>
   142f8:	b	14274 <__assert_fail@plt+0x2a74>
   142fc:	mov	r1, #0
   14300:	cmp	r1, r2
   14304:	bne	14390 <__assert_fail@plt+0x2b90>
   14308:	mvn	r0, #0
   1430c:	mov	r1, r6
   14310:	mov	r2, r7
   14314:	bl	1156c <waitpid@plt>
   14318:	cmn	r0, #1
   1431c:	bne	14358 <__assert_fail@plt+0x2b58>
   14320:	bl	11680 <__errno_location@plt>
   14324:	mov	r8, r0
   14328:	ldr	r9, [r8]
   1432c:	cmp	r9, #4
   14330:	bne	144f8 <__assert_fail@plt+0x2cf8>
   14334:	ldr	r0, [sl, #48]	; 0x30
   14338:	mov	r1, r6
   1433c:	cmp	r0, #0
   14340:	mvn	r0, #0
   14344:	movne	r7, #1
   14348:	mov	r2, r7
   1434c:	bl	1156c <waitpid@plt>
   14350:	cmn	r0, #1
   14354:	beq	14328 <__assert_fail@plt+0x2b28>
   14358:	cmp	r0, #0
   1435c:	beq	144c0 <__assert_fail@plt+0x2cc0>
   14360:	ldr	r2, [sl, #52]	; 0x34
   14364:	cmp	r2, #0
   14368:	beq	142fc <__assert_fail@plt+0x2afc>
   1436c:	ldr	r3, [sl, #56]	; 0x38
   14370:	mov	r1, #0
   14374:	ldr	r4, [r3, r1, lsl #2]
   14378:	cmp	r0, r4
   1437c:	beq	14300 <__assert_fail@plt+0x2b00>
   14380:	add	r1, r1, #1
   14384:	cmp	r1, r2
   14388:	bcc	14374 <__assert_fail@plt+0x2b74>
   1438c:	b	14300 <__assert_fail@plt+0x2b00>
   14390:	ldr	r0, [sl, #56]	; 0x38
   14394:	mov	r4, #0
   14398:	str	r4, [r0, r1, lsl #2]
   1439c:	ldr	r0, [sl, #44]	; 0x2c
   143a0:	sub	r0, r0, #1
   143a4:	str	r0, [sl, #44]	; 0x2c
   143a8:	ldr	r0, [sp, #16]
   143ac:	and	r1, r0, #65280	; 0xff00
   143b0:	cmp	r1, #65280	; 0xff00
   143b4:	bne	143f0 <__assert_fail@plt+0x2bf0>
   143b8:	movw	r1, #47036	; 0xb7bc
   143bc:	mov	r0, #0
   143c0:	mov	r2, #5
   143c4:	movt	r1, #1
   143c8:	bl	114dc <dcgettext@plt>
   143cc:	mov	r2, r0
   143d0:	movw	r0, #57832	; 0xe1e8
   143d4:	mov	r1, #0
   143d8:	movt	r0, #2
   143dc:	ldr	r0, [r0, #4]
   143e0:	ldr	r3, [r0]
   143e4:	mov	r0, #124	; 0x7c
   143e8:	bl	115a8 <error@plt>
   143ec:	ldr	r0, [sp, #16]
   143f0:	uxtb	r1, r0
   143f4:	cmp	r1, #127	; 0x7f
   143f8:	bne	1443c <__assert_fail@plt+0x2c3c>
   143fc:	movw	r1, #47073	; 0xb7e1
   14400:	mov	r0, #0
   14404:	mov	r2, #5
   14408:	movt	r1, #1
   1440c:	bl	114dc <dcgettext@plt>
   14410:	mov	r2, r0
   14414:	movw	r0, #57832	; 0xe1e8
   14418:	mov	r1, #0
   1441c:	movt	r0, #2
   14420:	ldr	r0, [r0, #4]
   14424:	ldr	r3, [r0]
   14428:	ldrb	r0, [sp, #17]
   1442c:	str	r0, [sp]
   14430:	mov	r0, #125	; 0x7d
   14434:	bl	115a8 <error@plt>
   14438:	ldr	r0, [sp, #16]
   1443c:	mov	r1, #2130706432	; 0x7f000000
   14440:	and	r1, r1, r0, lsl #24
   14444:	add	r1, r1, #16777216	; 0x1000000
   14448:	cmp	r1, #33554432	; 0x2000000
   1444c:	blt	14494 <__assert_fail@plt+0x2c94>
   14450:	movw	r1, #47098	; 0xb7fa
   14454:	mov	r0, #0
   14458:	mov	r2, #5
   1445c:	movt	r1, #1
   14460:	bl	114dc <dcgettext@plt>
   14464:	mov	r2, r0
   14468:	movw	r0, #57832	; 0xe1e8
   1446c:	mov	r1, #0
   14470:	movt	r0, #2
   14474:	ldr	r0, [r0, #4]
   14478:	ldr	r3, [r0]
   1447c:	ldr	r0, [sp, #16]
   14480:	and	r0, r0, #127	; 0x7f
   14484:	str	r0, [sp]
   14488:	mov	r0, #125	; 0x7d
   1448c:	bl	115a8 <error@plt>
   14490:	ldr	r0, [sp, #16]
   14494:	tst	r0, #65280	; 0xff00
   14498:	ldr	r0, [sp, #8]
   1449c:	ldr	r2, [sp, #4]
   144a0:	add	r5, r5, #1
   144a4:	movne	r1, #123	; 0x7b
   144a8:	strne	r1, [sl, #40]	; 0x28
   144ac:	ldr	r1, [sl, #44]	; 0x2c
   144b0:	cmp	r1, #0
   144b4:	ldr	r1, [sp, #12]
   144b8:	bne	14250 <__assert_fail@plt+0x2a50>
   144bc:	b	144f0 <__assert_fail@plt+0x2cf0>
   144c0:	tst	r7, #1
   144c4:	bne	144f0 <__assert_fail@plt+0x2cf0>
   144c8:	movw	r1, #46993	; 0xb791
   144cc:	mov	r0, #0
   144d0:	mov	r2, #5
   144d4:	movt	r1, #1
   144d8:	bl	114dc <dcgettext@plt>
   144dc:	ldr	r3, [sl, #44]	; 0x2c
   144e0:	mov	r2, r0
   144e4:	mov	r0, #0
   144e8:	mov	r1, #0
   144ec:	bl	115a8 <error@plt>
   144f0:	sub	sp, fp, #28
   144f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f8:	movw	r1, #46961	; 0xb771
   144fc:	mov	r0, #0
   14500:	mov	r2, #5
   14504:	movt	r1, #1
   14508:	bl	114dc <dcgettext@plt>
   1450c:	mov	r2, r0
   14510:	mov	r0, #1
   14514:	mov	r1, r9
   14518:	bl	115a8 <error@plt>
   1451c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14520:	add	fp, sp, #28
   14524:	sub	sp, sp, #4
   14528:	movw	r5, #57832	; 0xe1e8
   1452c:	mov	r9, r0
   14530:	movt	r5, #2
   14534:	ldr	r0, [r5]
   14538:	cmp	r0, #1
   1453c:	bne	14624 <__assert_fail@plt+0x2e24>
   14540:	cmp	r9, #0
   14544:	beq	14604 <__assert_fail@plt+0x2e04>
   14548:	movw	r6, #57876	; 0xe214
   1454c:	movt	r6, #2
   14550:	ldr	r0, [r6, #60]	; 0x3c
   14554:	cmp	r0, #0
   14558:	bne	14590 <__assert_fail@plt+0x2d90>
   1455c:	movw	r0, #47159	; 0xb837
   14560:	mov	r1, #0
   14564:	movt	r0, #1
   14568:	bl	157e4 <__assert_fail@plt+0x3fe4>
   1456c:	cmn	r0, #1
   14570:	ble	146c4 <__assert_fail@plt+0x2ec4>
   14574:	movw	r1, #45902	; 0xb34e
   14578:	mov	r4, r0
   1457c:	movt	r1, #1
   14580:	bl	11428 <fdopen@plt>
   14584:	cmp	r0, #0
   14588:	beq	146d0 <__assert_fail@plt+0x2ed0>
   1458c:	str	r0, [r6, #60]	; 0x3c
   14590:	movw	r4, #57808	; 0xe1d0
   14594:	movw	r0, #47204	; 0xb864
   14598:	mov	r1, #4
   1459c:	mov	r2, #1
   145a0:	movt	r4, #2
   145a4:	movt	r0, #1
   145a8:	ldr	r3, [r4]
   145ac:	bl	11554 <fwrite@plt>
   145b0:	ldr	r0, [r4]
   145b4:	bl	1a6ec <__assert_fail@plt+0x8eec>
   145b8:	cmp	r0, #0
   145bc:	bne	1469c <__assert_fail@plt+0x2e9c>
   145c0:	ldr	r0, [r6, #60]	; 0x3c
   145c4:	bl	117dc <getc@plt>
   145c8:	mov	r4, r0
   145cc:	cmp	r0, #10
   145d0:	beq	145ec <__assert_fail@plt+0x2dec>
   145d4:	cmn	r0, #1
   145d8:	beq	146b0 <__assert_fail@plt+0x2eb0>
   145dc:	ldr	r0, [r6, #60]	; 0x3c
   145e0:	bl	117dc <getc@plt>
   145e4:	cmp	r0, #10
   145e8:	bne	145d4 <__assert_fail@plt+0x2dd4>
   145ec:	orr	r1, r4, #32
   145f0:	mov	r0, #1
   145f4:	cmp	r1, #121	; 0x79
   145f8:	movne	r0, #0
   145fc:	sub	sp, fp, #28
   14600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14604:	movw	r0, #57808	; 0xe1d0
   14608:	movt	r0, #2
   1460c:	ldr	r1, [r0]
   14610:	mov	r0, #10
   14614:	bl	1177c <putc@plt>
   14618:	mov	r0, #0
   1461c:	sub	sp, fp, #28
   14620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14624:	movw	sl, #57808	; 0xe1d0
   14628:	movw	r8, #47126	; 0xb816
   1462c:	mov	r4, #0
   14630:	movt	sl, #2
   14634:	movt	r8, #1
   14638:	movw	r0, #47819	; 0xbacb
   1463c:	movw	r6, #47131	; 0xb81b
   14640:	cmp	r4, #0
   14644:	ldr	r7, [sl]
   14648:	mov	r1, #3
   1464c:	movt	r0, #1
   14650:	movt	r6, #1
   14654:	moveq	r6, r0
   14658:	ldr	r0, [r5, #4]
   1465c:	ldr	r2, [r0, r4, lsl #2]
   14660:	mov	r0, #0
   14664:	bl	188c0 <__assert_fail@plt+0x70c0>
   14668:	mov	r3, r0
   1466c:	mov	r0, r7
   14670:	mov	r1, r8
   14674:	mov	r2, r6
   14678:	bl	11674 <fprintf@plt>
   1467c:	cmn	r0, #1
   14680:	ble	1469c <__assert_fail@plt+0x2e9c>
   14684:	ldr	r0, [r5]
   14688:	add	r4, r4, #1
   1468c:	sub	r0, r0, #1
   14690:	cmp	r4, r0
   14694:	bcc	14638 <__assert_fail@plt+0x2e38>
   14698:	b	14540 <__assert_fail@plt+0x2d40>
   1469c:	bl	11680 <__errno_location@plt>
   146a0:	ldr	r4, [r0]
   146a4:	movw	r1, #47133	; 0xb81d
   146a8:	movt	r1, #1
   146ac:	b	146fc <__assert_fail@plt+0x2efc>
   146b0:	bl	11680 <__errno_location@plt>
   146b4:	ldr	r4, [r0]
   146b8:	movw	r1, #47209	; 0xb869
   146bc:	movt	r1, #1
   146c0:	b	146fc <__assert_fail@plt+0x2efc>
   146c4:	bl	11680 <__errno_location@plt>
   146c8:	mov	r5, r0
   146cc:	b	146e8 <__assert_fail@plt+0x2ee8>
   146d0:	bl	11680 <__errno_location@plt>
   146d4:	ldr	r7, [r0]
   146d8:	mov	r5, r0
   146dc:	mov	r0, r4
   146e0:	bl	117e8 <close@plt>
   146e4:	str	r7, [r5]
   146e8:	mov	r0, #0
   146ec:	movw	r1, #47168	; 0xb840
   146f0:	str	r0, [r6, #60]	; 0x3c
   146f4:	movt	r1, #1
   146f8:	ldr	r4, [r5]
   146fc:	mov	r0, #0
   14700:	mov	r2, #5
   14704:	bl	114dc <dcgettext@plt>
   14708:	mov	r2, r0
   1470c:	mov	r0, #1
   14710:	mov	r1, r4
   14714:	bl	115a8 <error@plt>
   14718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1471c:	add	fp, sp, #28
   14720:	sub	sp, sp, #20
   14724:	movw	r4, #57984	; 0xe280
   14728:	mov	r6, r2
   1472c:	str	r1, [sp, #12]
   14730:	mov	r8, r0
   14734:	ldr	r5, [r0, #12]
   14738:	ldr	r0, [fp, #20]
   1473c:	ldr	r1, [fp, #12]
   14740:	ldr	r2, [fp, #8]
   14744:	mov	sl, r3
   14748:	movt	r4, #2
   1474c:	ldr	r7, [r4]
   14750:	cmp	r7, #0
   14754:	bne	1477c <__assert_fail@plt+0x2f7c>
   14758:	add	r0, r5, #1
   1475c:	mov	r7, r1
   14760:	mov	r9, r2
   14764:	bl	196b8 <__assert_fail@plt+0x7eb8>
   14768:	mov	r1, r7
   1476c:	mov	r7, r0
   14770:	ldr	r0, [fp, #20]
   14774:	mov	r2, r9
   14778:	str	r7, [r4]
   1477c:	add	r0, r0, r1
   14780:	sub	r9, r5, #1
   14784:	cmp	r2, #0
   14788:	str	r0, [sp, #16]
   1478c:	bne	147a4 <__assert_fail@plt+0x2fa4>
   14790:	b	14878 <__assert_fail@plt+0x3078>
   14794:	mov	r8, r4
   14798:	ldrb	r0, [r6]
   1479c:	cmp	r0, #0
   147a0:	beq	148e4 <__assert_fail@plt+0x30e4>
   147a4:	ldr	r1, [r8, #24]
   147a8:	mov	r0, r6
   147ac:	mov	r4, r8
   147b0:	bl	16148 <__assert_fail@plt+0x4948>
   147b4:	cmp	r0, #0
   147b8:	mov	r5, sl
   147bc:	subne	r5, r0, r6
   147c0:	cmp	r9, r5
   147c4:	bls	148d4 <__assert_fail@plt+0x30d4>
   147c8:	mov	r8, r0
   147cc:	mov	r0, r7
   147d0:	mov	r1, r6
   147d4:	mov	r2, r5
   147d8:	bl	116b0 <strncpy@plt>
   147dc:	sub	sl, sl, r5
   147e0:	add	r6, r6, r5
   147e4:	add	r7, r7, r5
   147e8:	sub	r9, r9, r5
   147ec:	cmp	r8, #0
   147f0:	beq	14794 <__assert_fail@plt+0x2f94>
   147f4:	ldr	r5, [sp, #16]
   147f8:	mov	r8, r4
   147fc:	cmp	r9, r5
   14800:	bls	148d8 <__assert_fail@plt+0x30d8>
   14804:	ldr	r1, [fp, #8]
   14808:	mov	r0, r7
   1480c:	bl	11584 <strcpy@plt>
   14810:	ldr	r0, [fp, #12]
   14814:	ldr	r1, [fp, #16]
   14818:	add	r0, r7, r0
   1481c:	bl	11584 <strcpy@plt>
   14820:	ldr	r1, [fp, #20]
   14824:	sub	r9, r9, r5
   14828:	add	r7, r0, r1
   1482c:	ldr	r0, [r8, #20]
   14830:	sub	sl, sl, r0
   14834:	add	r6, r6, r0
   14838:	ldrb	r0, [r6]
   1483c:	cmp	r0, #0
   14840:	bne	147a4 <__assert_fail@plt+0x2fa4>
   14844:	b	148e4 <__assert_fail@plt+0x30e4>
   14848:	ldr	r1, [fp, #16]
   1484c:	mov	r0, r7
   14850:	bl	11584 <strcpy@plt>
   14854:	ldr	r0, [fp, #20]
   14858:	sub	r9, r9, r4
   1485c:	add	r7, r7, r0
   14860:	ldr	r0, [r8, #20]
   14864:	sub	sl, sl, r0
   14868:	add	r6, r6, r0
   1486c:	ldrb	r0, [r6]
   14870:	cmp	r0, #0
   14874:	beq	148e4 <__assert_fail@plt+0x30e4>
   14878:	ldr	r1, [r8, #24]
   1487c:	mov	r0, r6
   14880:	bl	16148 <__assert_fail@plt+0x4948>
   14884:	cmp	r0, #0
   14888:	mov	r4, sl
   1488c:	subne	r4, r0, r6
   14890:	cmp	r9, r4
   14894:	bls	148d8 <__assert_fail@plt+0x30d8>
   14898:	mov	r5, r0
   1489c:	mov	r0, r7
   148a0:	mov	r1, r6
   148a4:	mov	r2, r4
   148a8:	bl	116b0 <strncpy@plt>
   148ac:	sub	sl, sl, r4
   148b0:	add	r6, r6, r4
   148b4:	add	r7, r7, r4
   148b8:	sub	r9, r9, r4
   148bc:	cmp	r5, #0
   148c0:	beq	1486c <__assert_fail@plt+0x306c>
   148c4:	ldr	r4, [sp, #16]
   148c8:	cmp	r9, r4
   148cc:	bhi	14848 <__assert_fail@plt+0x3048>
   148d0:	b	148d8 <__assert_fail@plt+0x30d8>
   148d4:	mov	r8, r4
   148d8:	ldrb	r0, [r6]
   148dc:	cmp	r0, #0
   148e0:	bne	14924 <__assert_fail@plt+0x3124>
   148e4:	movw	r2, #57984	; 0xe280
   148e8:	mov	r1, #0
   148ec:	ldr	r0, [fp, #24]
   148f0:	movt	r2, #2
   148f4:	strb	r1, [r7]
   148f8:	str	r1, [sp]
   148fc:	str	r1, [sp, #4]
   14900:	ldr	r1, [sp, #12]
   14904:	ldr	r2, [r2]
   14908:	str	r0, [sp, #8]
   1490c:	sub	r0, r7, r2
   14910:	add	r3, r0, #1
   14914:	mov	r0, r8
   14918:	bl	14948 <__assert_fail@plt+0x3148>
   1491c:	sub	sp, fp, #28
   14920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14924:	movw	r1, #50820	; 0xc684
   14928:	mov	r0, #0
   1492c:	mov	r2, #5
   14930:	movt	r1, #1
   14934:	bl	114dc <dcgettext@plt>
   14938:	mov	r2, r0
   1493c:	mov	r0, #1
   14940:	mov	r1, #0
   14944:	bl	115a8 <error@plt>
   14948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1494c:	add	fp, sp, #28
   14950:	sub	sp, sp, #4
   14954:	cmp	r2, #0
   14958:	beq	14b74 <__assert_fail@plt+0x3374>
   1495c:	movw	sl, #51659	; 0xc9cb
   14960:	mov	r5, r0
   14964:	ldr	r6, [fp, #16]
   14968:	ldr	r0, [fp, #12]
   1496c:	mov	r9, r3
   14970:	mov	r8, r2
   14974:	mov	r4, r1
   14978:	movt	sl, #1
   1497c:	cmp	r2, sl
   14980:	beq	14a40 <__assert_fail@plt+0x3240>
   14984:	ldr	r1, [r4, #16]
   14988:	add	r0, r0, r9
   1498c:	add	r0, r0, r1
   14990:	ldr	r1, [r5, #12]
   14994:	cmp	r0, r1
   14998:	bls	149fc <__assert_fail@plt+0x31fc>
   1499c:	cmp	r6, #0
   149a0:	bne	14b94 <__assert_fail@plt+0x3394>
   149a4:	ldr	r0, [r5, #28]
   149a8:	ldr	r1, [r4]
   149ac:	cmp	r1, r0
   149b0:	beq	14b94 <__assert_fail@plt+0x3394>
   149b4:	ldr	r0, [r5, #24]
   149b8:	cmp	r0, #0
   149bc:	bne	14ba0 <__assert_fail@plt+0x33a0>
   149c0:	ldr	r0, [r5]
   149c4:	cmp	r0, #0
   149c8:	beq	149e0 <__assert_fail@plt+0x31e0>
   149cc:	ldr	r0, [r5, #36]	; 0x24
   149d0:	cmp	r0, #0
   149d4:	ldreq	r0, [r5, #40]	; 0x28
   149d8:	cmpeq	r0, #0
   149dc:	bne	14ba0 <__assert_fail@plt+0x33a0>
   149e0:	mov	r0, r5
   149e4:	mov	r1, r4
   149e8:	bl	14bc4 <__assert_fail@plt+0x33c4>
   149ec:	ldr	r0, [r5, #40]	; 0x28
   149f0:	cmp	r0, #0
   149f4:	bne	14a10 <__assert_fail@plt+0x3210>
   149f8:	b	14a24 <__assert_fail@plt+0x3224>
   149fc:	cmp	r6, #0
   14a00:	bne	14a24 <__assert_fail@plt+0x3224>
   14a04:	ldr	r0, [r5, #40]	; 0x28
   14a08:	cmp	r0, #0
   14a0c:	beq	14a24 <__assert_fail@plt+0x3224>
   14a10:	ldr	r1, [r5, #28]
   14a14:	ldr	r2, [r4]
   14a18:	sub	r1, r2, r1
   14a1c:	cmp	r1, r0
   14a20:	beq	14a34 <__assert_fail@plt+0x3234>
   14a24:	ldr	r0, [r5, #16]
   14a28:	ldr	r1, [r4]
   14a2c:	cmp	r1, r0
   14a30:	bne	14a40 <__assert_fail@plt+0x3240>
   14a34:	mov	r0, r5
   14a38:	mov	r1, r4
   14a3c:	bl	14bc4 <__assert_fail@plt+0x33c4>
   14a40:	cmp	r6, #0
   14a44:	moveq	r0, #1
   14a48:	streq	r0, [r4, #28]
   14a4c:	ldr	r0, [r4]
   14a50:	ldr	r1, [r4, #8]
   14a54:	cmp	r0, r1
   14a58:	bcc	14a90 <__assert_fail@plt+0x3290>
   14a5c:	ldr	r0, [r4, #4]
   14a60:	cmp	r0, #0
   14a64:	beq	14a7c <__assert_fail@plt+0x327c>
   14a68:	lsl	r2, r1, #1
   14a6c:	lsl	r1, r1, #3
   14a70:	str	r2, [r4, #8]
   14a74:	bl	19700 <__assert_fail@plt+0x7f00>
   14a78:	b	14a8c <__assert_fail@plt+0x328c>
   14a7c:	mov	r0, #64	; 0x40
   14a80:	str	r0, [r4, #8]
   14a84:	mov	r0, #256	; 0x100
   14a88:	bl	196b8 <__assert_fail@plt+0x7eb8>
   14a8c:	str	r0, [r4, #4]
   14a90:	cmp	r8, sl
   14a94:	beq	14b1c <__assert_fail@plt+0x331c>
   14a98:	mov	sl, r6
   14a9c:	ldr	r1, [fp, #8]
   14aa0:	ldm	r4, {r2, r3}
   14aa4:	ldr	r6, [r4, #12]
   14aa8:	ldr	r0, [r4, #16]
   14aac:	add	r7, r2, #1
   14ab0:	str	r7, [r4]
   14ab4:	add	r7, r6, r0
   14ab8:	cmp	r1, #0
   14abc:	str	r7, [r3, r2, lsl #2]
   14ac0:	beq	14ae0 <__assert_fail@plt+0x32e0>
   14ac4:	ldr	r2, [r4, #12]
   14ac8:	add	r0, r2, r0
   14acc:	bl	11584 <strcpy@plt>
   14ad0:	ldr	r0, [r4, #16]
   14ad4:	ldr	r1, [fp, #12]
   14ad8:	add	r0, r0, r1
   14adc:	str	r0, [r4, #16]
   14ae0:	ldr	r1, [r4, #12]
   14ae4:	mov	r6, sl
   14ae8:	add	r0, r1, r0
   14aec:	mov	r1, r8
   14af0:	bl	11584 <strcpy@plt>
   14af4:	ldr	r0, [r4, #16]
   14af8:	cmp	sl, #0
   14afc:	add	r0, r0, r9
   14b00:	str	r0, [r4, #16]
   14b04:	beq	14b34 <__assert_fail@plt+0x3334>
   14b08:	ldr	r0, [r5, #16]
   14b0c:	ldr	r1, [r4]
   14b10:	cmp	r1, r0
   14b14:	beq	14b54 <__assert_fail@plt+0x3354>
   14b18:	b	14b60 <__assert_fail@plt+0x3360>
   14b1c:	ldm	r4, {r0, r1}
   14b20:	add	r2, r0, #1
   14b24:	str	r2, [r4]
   14b28:	mov	r2, #0
   14b2c:	str	r2, [r1, r0, lsl #2]
   14b30:	b	14b60 <__assert_fail@plt+0x3360>
   14b34:	ldr	r0, [r5, #40]	; 0x28
   14b38:	cmp	r0, #0
   14b3c:	beq	14b08 <__assert_fail@plt+0x3308>
   14b40:	ldr	r1, [r5, #28]
   14b44:	ldr	r2, [r4]
   14b48:	sub	r1, r2, r1
   14b4c:	cmp	r1, r0
   14b50:	bne	14b08 <__assert_fail@plt+0x3308>
   14b54:	mov	r0, r5
   14b58:	mov	r1, r4
   14b5c:	bl	14bc4 <__assert_fail@plt+0x33c4>
   14b60:	cmp	r6, #0
   14b64:	ldrne	r0, [r4, #16]
   14b68:	strne	r0, [r4, #20]
   14b6c:	sub	sp, fp, #28
   14b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b74:	movw	r0, #51031	; 0xc757
   14b78:	movw	r1, #50857	; 0xc6a9
   14b7c:	movw	r3, #51043	; 0xc763
   14b80:	movw	r2, #341	; 0x155
   14b84:	movt	r0, #1
   14b88:	movt	r1, #1
   14b8c:	movt	r3, #1
   14b90:	bl	11800 <__assert_fail@plt>
   14b94:	movw	r1, #51161	; 0xc7d9
   14b98:	movt	r1, #1
   14b9c:	b	14ba8 <__assert_fail@plt+0x33a8>
   14ba0:	movw	r1, #51220	; 0xc814
   14ba4:	movt	r1, #1
   14ba8:	mov	r0, #0
   14bac:	mov	r2, #5
   14bb0:	bl	114dc <dcgettext@plt>
   14bb4:	mov	r2, r0
   14bb8:	mov	r0, #1
   14bbc:	mov	r1, #0
   14bc0:	bl	115a8 <error@plt>
   14bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc8:	add	fp, sp, #28
   14bcc:	sub	sp, sp, #36	; 0x24
   14bd0:	mov	r5, r0
   14bd4:	mov	r0, #1
   14bd8:	mov	r8, r1
   14bdc:	str	r0, [r1, #28]
   14be0:	ldr	r2, [r1]
   14be4:	ldmib	r1, {r0, r1}
   14be8:	cmp	r2, r1
   14bec:	bcc	14c20 <__assert_fail@plt+0x3420>
   14bf0:	cmp	r0, #0
   14bf4:	beq	14c0c <__assert_fail@plt+0x340c>
   14bf8:	lsl	r2, r1, #1
   14bfc:	lsl	r1, r1, #3
   14c00:	str	r2, [r8, #8]
   14c04:	bl	19700 <__assert_fail@plt+0x7f00>
   14c08:	b	14c1c <__assert_fail@plt+0x341c>
   14c0c:	mov	r0, #64	; 0x40
   14c10:	str	r0, [r8, #8]
   14c14:	mov	r0, #256	; 0x100
   14c18:	bl	196b8 <__assert_fail@plt+0x7eb8>
   14c1c:	str	r0, [r8, #4]
   14c20:	ldr	r2, [r8]
   14c24:	mov	r3, #0
   14c28:	adds	r1, r2, #1
   14c2c:	str	r1, [r8]
   14c30:	str	r3, [r0, r2, lsl #2]
   14c34:	bcs	1513c <__assert_fail@plt+0x393c>
   14c38:	ldr	r0, [r8, #4]
   14c3c:	ldr	r0, [r0, r2, lsl #2]
   14c40:	cmp	r0, #0
   14c44:	bne	1515c <__assert_fail@plt+0x395c>
   14c48:	mov	r0, #4
   14c4c:	add	r0, r0, r1, lsl #2
   14c50:	bl	196b8 <__assert_fail@plt+0x7eb8>
   14c54:	ldr	sl, [r8]
   14c58:	ldr	lr, [r5, #28]
   14c5c:	mov	r9, r0
   14c60:	add	r0, r0, #4
   14c64:	mov	ip, #0
   14c68:	str	r5, [sp, #24]
   14c6c:	str	r8, [sp, #4]
   14c70:	str	r0, [sp, #8]
   14c74:	mov	r4, sl
   14c78:	cmp	lr, #0
   14c7c:	str	ip, [sp, #28]
   14c80:	str	r4, [sp, #32]
   14c84:	bne	14cd0 <__assert_fail@plt+0x34d0>
   14c88:	b	14e38 <__assert_fail@plt+0x3638>
   14c8c:	add	r2, lr, #1
   14c90:	cmp	r6, r2
   14c94:	movhi	r2, r6
   14c98:	add	r0, r7, r3
   14c9c:	sub	ip, r0, lr
   14ca0:	ldr	sl, [r8]
   14ca4:	cmp	r2, #0
   14ca8:	add	r1, ip, #1
   14cac:	movweq	r2, #1
   14cb0:	mov	r4, r2
   14cb4:	sub	r0, sl, lr
   14cb8:	cmp	r1, r0
   14cbc:	bcs	150c8 <__assert_fail@plt+0x38c8>
   14cc0:	cmp	lr, #0
   14cc4:	str	ip, [sp, #28]
   14cc8:	str	r4, [sp, #32]
   14ccc:	beq	14e38 <__assert_fail@plt+0x3638>
   14cd0:	ldr	r2, [r8, #4]
   14cd4:	mov	r3, #0
   14cd8:	cmp	lr, #4
   14cdc:	bcc	14dc8 <__assert_fail@plt+0x35c8>
   14ce0:	add	r7, r2, lr, lsl #2
   14ce4:	cmp	r9, r7
   14ce8:	bcs	14cf8 <__assert_fail@plt+0x34f8>
   14cec:	add	r7, r9, lr, lsl #2
   14cf0:	cmp	r7, r2
   14cf4:	bhi	14dc8 <__assert_fail@plt+0x35c8>
   14cf8:	bic	r3, lr, #3
   14cfc:	mov	r0, #1
   14d00:	str	lr, [sp, #20]
   14d04:	mov	lr, #0
   14d08:	mov	ip, #48	; 0x30
   14d0c:	sub	r6, r3, #4
   14d10:	add	r7, r0, r6, lsr #2
   14d14:	cmp	r6, #12
   14d18:	and	r0, r7, #3
   14d1c:	str	r0, [sp, #16]
   14d20:	bcc	14d88 <__assert_fail@plt+0x3588>
   14d24:	ldr	r0, [sp, #16]
   14d28:	mov	r4, #0
   14d2c:	mov	lr, #0
   14d30:	sub	r8, r7, r0
   14d34:	add	r6, r2, r4
   14d38:	add	r1, r9, r4
   14d3c:	add	r4, r4, #64	; 0x40
   14d40:	subs	r8, r8, #4
   14d44:	add	lr, lr, #16
   14d48:	mov	r0, r6
   14d4c:	mov	r5, r1
   14d50:	add	r7, r1, #16
   14d54:	add	r1, r1, #32
   14d58:	vld1.32	{d16-d17}, [r0], ip
   14d5c:	vst1.32	{d16-d17}, [r5], ip
   14d60:	add	ip, r6, #16
   14d64:	vld1.32	{d16-d17}, [ip]
   14d68:	mov	ip, #48	; 0x30
   14d6c:	vst1.32	{d16-d17}, [r7]
   14d70:	add	r7, r6, #32
   14d74:	vld1.32	{d16-d17}, [r7]
   14d78:	vst1.32	{d16-d17}, [r1]
   14d7c:	vld1.32	{d16-d17}, [r0]
   14d80:	vst1.32	{d16-d17}, [r5]
   14d84:	bne	14d34 <__assert_fail@plt+0x3534>
   14d88:	ldr	r0, [sp, #16]
   14d8c:	cmp	r0, #0
   14d90:	beq	14db0 <__assert_fail@plt+0x35b0>
   14d94:	add	r7, r2, lr, lsl #2
   14d98:	add	r6, r9, lr, lsl #2
   14d9c:	rsb	r5, r0, #0
   14da0:	vld1.32	{d16-d17}, [r7]!
   14da4:	adds	r5, r5, #1
   14da8:	vst1.32	{d16-d17}, [r6]!
   14dac:	bcc	14da0 <__assert_fail@plt+0x35a0>
   14db0:	ldr	lr, [sp, #20]
   14db4:	ldr	r8, [sp, #4]
   14db8:	ldr	ip, [sp, #28]
   14dbc:	ldr	r4, [sp, #32]
   14dc0:	cmp	lr, r3
   14dc4:	beq	14e38 <__assert_fail@plt+0x3638>
   14dc8:	mvn	r0, r3
   14dcc:	ands	r6, lr, #3
   14dd0:	add	r7, lr, r0
   14dd4:	beq	14dec <__assert_fail@plt+0x35ec>
   14dd8:	ldr	r0, [r2, r3, lsl #2]
   14ddc:	subs	r6, r6, #1
   14de0:	str	r0, [r9, r3, lsl #2]
   14de4:	add	r3, r3, #1
   14de8:	bne	14dd8 <__assert_fail@plt+0x35d8>
   14dec:	cmp	r7, #3
   14df0:	bcc	14e38 <__assert_fail@plt+0x3638>
   14df4:	sub	r7, lr, r3
   14df8:	lsl	r3, r3, #2
   14dfc:	mov	r6, r9
   14e00:	add	r0, r2, #16
   14e04:	ldr	r1, [r2, r3]!
   14e08:	add	r5, r6, #16
   14e0c:	subs	r7, r7, #4
   14e10:	str	r1, [r6, r3]!
   14e14:	ldr	r1, [r2, #4]
   14e18:	str	r1, [r6, #4]
   14e1c:	ldr	r1, [r2, #8]
   14e20:	str	r1, [r6, #8]
   14e24:	ldr	r1, [r2, #12]
   14e28:	mov	r2, r0
   14e2c:	str	r1, [r6, #12]
   14e30:	mov	r6, r5
   14e34:	bne	14e00 <__assert_fail@plt+0x3600>
   14e38:	ldr	r5, [sp, #24]
   14e3c:	cmp	lr, r4
   14e40:	mov	r7, lr
   14e44:	bcs	14ee4 <__assert_fail@plt+0x36e4>
   14e48:	add	r2, lr, ip
   14e4c:	mov	r7, lr
   14e50:	cmp	r2, sl
   14e54:	bcs	14ee4 <__assert_fail@plt+0x36e4>
   14e58:	mvn	r0, lr
   14e5c:	ldr	r3, [r8, #4]
   14e60:	add	r1, r4, r0
   14e64:	add	r0, sl, r0
   14e68:	sub	r7, r0, ip
   14e6c:	mov	r0, r1
   14e70:	cmp	r7, r1
   14e74:	movcc	r0, r7
   14e78:	add	r5, r0, #1
   14e7c:	cmp	r5, #4
   14e80:	bcc	14ec0 <__assert_fail@plt+0x36c0>
   14e84:	cmp	r7, r1
   14e88:	movcc	r1, r7
   14e8c:	add	r7, r9, lr, lsl #2
   14e90:	add	r0, r2, r1
   14e94:	add	r0, r3, r0, lsl #2
   14e98:	add	r0, r0, #4
   14e9c:	cmp	r7, r0
   14ea0:	bcs	1500c <__assert_fail@plt+0x380c>
   14ea4:	lsl	r0, lr, #2
   14ea8:	add	r0, r0, r1, lsl #2
   14eac:	ldr	r1, [sp, #8]
   14eb0:	add	r0, r1, r0
   14eb4:	add	r1, r3, r2, lsl #2
   14eb8:	cmp	r0, r1
   14ebc:	bls	1500c <__assert_fail@plt+0x380c>
   14ec0:	ldr	r5, [sp, #24]
   14ec4:	mov	r7, lr
   14ec8:	ldr	r0, [r3, r2, lsl #2]
   14ecc:	add	r2, r2, #1
   14ed0:	cmp	r2, sl
   14ed4:	str	r0, [r9, r7, lsl #2]
   14ed8:	add	r7, r7, #1
   14edc:	cmpcc	r7, r4
   14ee0:	bcc	14ec8 <__assert_fail@plt+0x36c8>
   14ee4:	cmp	r7, lr
   14ee8:	bcc	150f8 <__assert_fail@plt+0x38f8>
   14eec:	mov	r0, #0
   14ef0:	mov	r2, r7
   14ef4:	mov	r3, r9
   14ef8:	str	r0, [r9, r7, lsl #2]
   14efc:	mov	r0, r5
   14f00:	ldr	r1, [r8, #24]
   14f04:	ldr	r6, [r5, #32]
   14f08:	blx	r6
   14f0c:	cmp	r0, #0
   14f10:	beq	14f40 <__assert_fail@plt+0x3740>
   14f14:	ldr	r0, [r8, #36]	; 0x24
   14f18:	ldr	r6, [sp, #32]
   14f1c:	cmp	r0, r6
   14f20:	bcs	14f84 <__assert_fail@plt+0x3784>
   14f24:	ldr	r3, [sp, #28]
   14f28:	str	r6, [r8, #36]	; 0x24
   14f2c:	mov	r0, r6
   14f30:	ldr	r1, [r8, #40]	; 0x28
   14f34:	cmp	r1, r0
   14f38:	bhi	14f9c <__assert_fail@plt+0x379c>
   14f3c:	b	14fc4 <__assert_fail@plt+0x37c4>
   14f40:	ldr	lr, [r5, #28]
   14f44:	ldr	r1, [sp, #32]
   14f48:	add	r2, lr, #1
   14f4c:	cmp	r1, r2
   14f50:	bls	15118 <__assert_fail@plt+0x3918>
   14f54:	ldr	r7, [r8, #40]	; 0x28
   14f58:	ldr	ip, [sp, #28]
   14f5c:	sub	r0, r7, #1
   14f60:	cmp	r0, r1
   14f64:	strcs	r1, [r8, #40]	; 0x28
   14f68:	movcs	r7, r1
   14f6c:	ldr	r3, [r8, #36]	; 0x24
   14f70:	cmp	r3, #0
   14f74:	cmpne	r7, r3
   14f78:	bhi	14fe0 <__assert_fail@plt+0x37e0>
   14f7c:	lsr	r1, r1, #1
   14f80:	b	14ff8 <__assert_fail@plt+0x37f8>
   14f84:	ldr	r3, [sp, #28]
   14f88:	cmp	r0, #0
   14f8c:	beq	14fc4 <__assert_fail@plt+0x37c4>
   14f90:	ldr	r1, [r8, #40]	; 0x28
   14f94:	cmp	r1, r0
   14f98:	bls	14fc4 <__assert_fail@plt+0x37c4>
   14f9c:	sub	r0, r1, r0
   14fa0:	mov	r1, #0
   14fa4:	cmp	r1, r0, lsr #1
   14fa8:	addeq	r6, r6, #1
   14fac:	lsrne	r0, r0, #1
   14fb0:	addne	r6, r0, r6
   14fb4:	ldr	lr, [r5, #28]
   14fb8:	cmp	lr, #0
   14fbc:	bne	14c8c <__assert_fail@plt+0x348c>
   14fc0:	b	14fd8 <__assert_fail@plt+0x37d8>
   14fc4:	cmn	r6, #1
   14fc8:	addne	r6, r6, #1
   14fcc:	ldr	lr, [r5, #28]
   14fd0:	cmp	lr, #0
   14fd4:	bne	14c8c <__assert_fail@plt+0x348c>
   14fd8:	mov	r2, r6
   14fdc:	b	14c98 <__assert_fail@plt+0x3498>
   14fe0:	sub	r3, r7, r3
   14fe4:	mov	r0, #0
   14fe8:	cmp	r0, r3, lsr #1
   14fec:	subeq	r1, r1, #1
   14ff0:	lsrne	r0, r3, #1
   14ff4:	subne	r1, r1, r0
   14ff8:	cmp	r1, r2
   14ffc:	movhi	r2, r1
   15000:	cmp	lr, #0
   15004:	moveq	r2, r1
   15008:	b	14ca0 <__assert_fail@plt+0x34a0>
   1500c:	bic	r0, r5, #3
   15010:	mov	r1, #1
   15014:	str	lr, [sp, #20]
   15018:	str	r0, [sp, #16]
   1501c:	subs	r0, r0, #4
   15020:	add	r6, r1, r0, lsr #2
   15024:	and	r0, r6, #1
   15028:	str	r0, [sp, #12]
   1502c:	beq	150b4 <__assert_fail@plt+0x38b4>
   15030:	sub	r4, r0, r6
   15034:	add	r0, lr, ip
   15038:	mov	lr, #0
   1503c:	mov	r6, #32
   15040:	add	ip, r3, r0, lsl #2
   15044:	add	r0, ip, #16
   15048:	vld1.32	{d16-d17}, [ip], r6
   1504c:	add	r1, r7, #16
   15050:	adds	r4, r4, #2
   15054:	add	lr, lr, #8
   15058:	vst1.32	{d16-d17}, [r7], r6
   1505c:	vld1.32	{d16-d17}, [r0]
   15060:	vst1.32	{d16-d17}, [r1]
   15064:	bne	15044 <__assert_fail@plt+0x3844>
   15068:	ldr	r0, [sp, #12]
   1506c:	cmp	r0, #0
   15070:	beq	15090 <__assert_fail@plt+0x3890>
   15074:	add	r0, r2, lr
   15078:	add	r0, r3, r0, lsl #2
   1507c:	vld1.32	{d16-d17}, [r0]
   15080:	ldr	r0, [sp, #20]
   15084:	add	r0, r0, lr
   15088:	add	r0, r9, r0, lsl #2
   1508c:	vst1.32	{d16-d17}, [r0]
   15090:	ldr	r0, [sp, #16]
   15094:	ldr	lr, [sp, #20]
   15098:	cmp	r5, r0
   1509c:	ldr	r5, [sp, #24]
   150a0:	add	r7, lr, r0
   150a4:	beq	14ee4 <__assert_fail@plt+0x36e4>
   150a8:	ldr	r4, [sp, #32]
   150ac:	add	r2, r2, r0
   150b0:	b	14ec8 <__assert_fail@plt+0x36c8>
   150b4:	mov	lr, #0
   150b8:	ldr	r0, [sp, #12]
   150bc:	cmp	r0, #0
   150c0:	bne	15074 <__assert_fail@plt+0x3874>
   150c4:	b	15090 <__assert_fail@plt+0x3890>
   150c8:	mov	r0, r9
   150cc:	bl	1a788 <__assert_fail@plt+0x8f88>
   150d0:	ldr	r0, [r5, #28]
   150d4:	mov	r2, #0
   150d8:	mvn	r1, #0
   150dc:	str	r2, [r8, #28]
   150e0:	str	r1, [r8, #32]
   150e4:	str	r0, [r8]
   150e8:	ldr	r0, [r8, #20]
   150ec:	str	r0, [r8, #16]
   150f0:	sub	sp, fp, #28
   150f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f8:	movw	r0, #51536	; 0xc950
   150fc:	movw	r1, #50857	; 0xc6a9
   15100:	movw	r3, #51565	; 0xc96d
   15104:	mov	r2, #242	; 0xf2
   15108:	movt	r0, #1
   1510c:	movt	r1, #1
   15110:	movt	r3, #1
   15114:	bl	11800 <__assert_fail@plt>
   15118:	movw	r1, #50979	; 0xc723
   1511c:	mov	r0, #0
   15120:	mov	r2, #5
   15124:	movt	r1, #1
   15128:	bl	114dc <dcgettext@plt>
   1512c:	mov	r2, r0
   15130:	mov	r0, #1
   15134:	mov	r1, #0
   15138:	bl	115a8 <error@plt>
   1513c:	movw	r0, #50837	; 0xc695
   15140:	movw	r1, #50857	; 0xc6a9
   15144:	movw	r3, #50868	; 0xc6b4
   15148:	movw	r2, #261	; 0x105
   1514c:	movt	r0, #1
   15150:	movt	r1, #1
   15154:	movt	r3, #1
   15158:	bl	11800 <__assert_fail@plt>
   1515c:	movw	r0, #50936	; 0xc6f8
   15160:	movw	r1, #50857	; 0xc6a9
   15164:	movw	r3, #50868	; 0xc6b4
   15168:	movw	r2, #262	; 0x106
   1516c:	movt	r0, #1
   15170:	movt	r1, #1
   15174:	movt	r3, #1
   15178:	bl	11800 <__assert_fail@plt>
   1517c:	ldr	r0, [r0, #28]
   15180:	mov	r3, #0
   15184:	mvn	r2, #0
   15188:	str	r3, [r1, #28]
   1518c:	str	r2, [r1, #32]
   15190:	str	r0, [r1]
   15194:	ldr	r0, [r1, #20]
   15198:	str	r0, [r1, #16]
   1519c:	bx	lr
   151a0:	push	{fp, lr}
   151a4:	mov	fp, sp
   151a8:	mov	r0, #0
   151ac:	bl	114e8 <sysconf@plt>
   151b0:	cmp	r0, #0
   151b4:	mvnle	r0, #-2147483648	; 0x80000000
   151b8:	pop	{fp, pc}
   151bc:	push	{r4, r5, fp, lr}
   151c0:	add	fp, sp, #8
   151c4:	movw	r0, #57788	; 0xe1bc
   151c8:	movt	r0, #2
   151cc:	ldr	r1, [r0]
   151d0:	ldr	r0, [r1]
   151d4:	cmp	r0, #0
   151d8:	beq	15204 <__assert_fail@plt+0x3a04>
   151dc:	add	r5, r1, #4
   151e0:	mov	r4, #0
   151e4:	bl	11650 <strlen@plt>
   151e8:	add	r0, r4, r0
   151ec:	add	r4, r0, #1
   151f0:	ldr	r0, [r5], #4
   151f4:	cmp	r0, #0
   151f8:	bne	151e4 <__assert_fail@plt+0x39e4>
   151fc:	mov	r0, r4
   15200:	pop	{r4, r5, fp, pc}
   15204:	mov	r4, #0
   15208:	mov	r0, r4
   1520c:	pop	{r4, r5, fp, pc}
   15210:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15214:	add	fp, sp, #24
   15218:	mov	r4, r0
   1521c:	movw	r0, #57788	; 0xe1bc
   15220:	mov	r5, r1
   15224:	mov	r8, #0
   15228:	mov	r6, #0
   1522c:	movt	r0, #2
   15230:	ldr	r1, [r0]
   15234:	ldr	r0, [r1]
   15238:	cmp	r0, #0
   1523c:	beq	15260 <__assert_fail@plt+0x3a60>
   15240:	add	r7, r1, #4
   15244:	mov	r6, #0
   15248:	bl	11650 <strlen@plt>
   1524c:	add	r0, r6, r0
   15250:	add	r6, r0, #1
   15254:	ldr	r0, [r7], #4
   15258:	cmp	r0, #0
   1525c:	bne	15248 <__assert_fail@plt+0x3a48>
   15260:	mov	r0, #4096	; 0x1000
   15264:	str	r0, [r4, #8]
   15268:	mov	r0, #0
   1526c:	bl	114e8 <sysconf@plt>
   15270:	cmp	r0, #0
   15274:	mov	r1, r0
   15278:	mov	r0, #1
   1527c:	str	r8, [r4]
   15280:	mvnle	r1, #-2147483648	; 0x80000000
   15284:	cmp	r1, r6
   15288:	str	r1, [r4, #4]
   1528c:	bcc	152e8 <__assert_fail@plt+0x3ae8>
   15290:	add	r2, r6, r5
   15294:	mov	r0, #2
   15298:	cmp	r2, r1
   1529c:	bcs	152e8 <__assert_fail@plt+0x3ae8>
   152a0:	sub	r0, r1, r6
   152a4:	sub	r1, r0, r5
   152a8:	mvn	r0, #1
   152ac:	add	r0, r0, r1, lsr #2
   152b0:	str	r1, [r4, #4]
   152b4:	cmp	r0, #0
   152b8:	str	r0, [r4, #16]
   152bc:	beq	152ec <__assert_fail@plt+0x3aec>
   152c0:	movw	r2, #21260	; 0x530c
   152c4:	mov	r0, #0
   152c8:	movt	r2, #1
   152cc:	str	r0, [r4, #20]
   152d0:	str	r0, [r4, #24]
   152d4:	str	r0, [r4, #28]
   152d8:	str	r2, [r4, #32]
   152dc:	str	r0, [r4, #36]	; 0x24
   152e0:	str	r0, [r4, #40]	; 0x28
   152e4:	str	r1, [r4, #12]
   152e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152ec:	movw	r0, #51243	; 0xc82b
   152f0:	movw	r1, #50857	; 0xc6a9
   152f4:	movw	r3, #51266	; 0xc842
   152f8:	movw	r2, #518	; 0x206
   152fc:	movt	r0, #1
   15300:	movt	r1, #1
   15304:	movt	r3, #1
   15308:	bl	11800 <__assert_fail@plt>
   1530c:	mov	r0, #0
   15310:	bx	lr
   15314:	ldr	r1, [r0, #4]
   15318:	mov	r2, #0
   1531c:	cmp	r2, r1, lsr #17
   15320:	beq	15330 <__assert_fail@plt+0x3b30>
   15324:	ldr	r1, [r0, #8]
   15328:	cmp	r1, #131072	; 0x20000
   1532c:	movls	r1, #131072	; 0x20000
   15330:	str	r1, [r0, #12]
   15334:	bx	lr
   15338:	push	{r4, r5, r6, sl, fp, lr}
   1533c:	add	fp, sp, #16
   15340:	mov	r6, #0
   15344:	mov	r4, r1
   15348:	str	r6, [r1, #16]
   1534c:	str	r6, [r1, #36]	; 0x24
   15350:	str	r6, [r1, #40]	; 0x28
   15354:	str	r6, [r1]
   15358:	str	r6, [r1, #4]
   1535c:	str	r6, [r1, #8]
   15360:	movw	r1, #63488	; 0xf800
   15364:	ldr	r0, [r0, #12]
   15368:	movt	r1, #32767	; 0x7fff
   1536c:	cmp	r0, r1
   15370:	bcs	153a0 <__assert_fail@plt+0x3ba0>
   15374:	add	r0, r0, #1
   15378:	mov	r5, r2
   1537c:	bl	196b8 <__assert_fail@plt+0x7eb8>
   15380:	mvn	r1, #0
   15384:	str	r0, [r4, #12]
   15388:	str	r6, [r4, #16]
   1538c:	str	r6, [r4, #20]
   15390:	str	r5, [r4, #24]
   15394:	str	r6, [r4, #28]
   15398:	str	r1, [r4, #32]
   1539c:	pop	{r4, r5, r6, sl, fp, pc}
   153a0:	movw	r0, #51341	; 0xc88d
   153a4:	movw	r1, #50857	; 0xc6a9
   153a8:	movw	r3, #51376	; 0xc8b0
   153ac:	mov	r2, #572	; 0x23c
   153b0:	movt	r0, #1
   153b4:	movt	r1, #1
   153b8:	movt	r3, #1
   153bc:	bl	11800 <__assert_fail@plt>
   153c0:	push	{r4, r5, r6, sl, fp, lr}
   153c4:	add	fp, sp, #16
   153c8:	sub	sp, sp, #16
   153cc:	mov	r1, r0
   153d0:	ldr	r0, [r0]
   153d4:	cmp	r0, #0
   153d8:	beq	15404 <__assert_fail@plt+0x3c04>
   153dc:	add	r6, r1, #4
   153e0:	mov	r5, #0
   153e4:	mov	r4, #0
   153e8:	bl	11650 <strlen@plt>
   153ec:	add	r4, r0, r4
   153f0:	ldr	r0, [r6, r5, lsl #2]
   153f4:	add	r5, r5, #1
   153f8:	cmp	r0, #0
   153fc:	bne	153e8 <__assert_fail@plt+0x3be8>
   15400:	b	1540c <__assert_fail@plt+0x3c0c>
   15404:	mov	r4, #0
   15408:	mov	r5, #0
   1540c:	movw	r0, #51461	; 0xc905
   15410:	movt	r0, #1
   15414:	bl	115cc <getenv@plt>
   15418:	cmp	r0, #0
   1541c:	beq	15450 <__assert_fail@plt+0x3c50>
   15420:	mov	r1, #0
   15424:	add	r3, sp, #8
   15428:	mov	r2, #10
   1542c:	str	r1, [sp]
   15430:	add	r1, sp, #12
   15434:	bl	19c38 <__assert_fail@plt+0x8438>
   15438:	cmp	r0, #0
   1543c:	bne	154a8 <__assert_fail@plt+0x3ca8>
   15440:	ldr	r1, [sp, #8]
   15444:	mov	r0, #1
   15448:	cmp	r1, r5
   1544c:	bcc	15494 <__assert_fail@plt+0x3c94>
   15450:	movw	r0, #51498	; 0xc92a
   15454:	movt	r0, #1
   15458:	bl	115cc <getenv@plt>
   1545c:	cmp	r0, #0
   15460:	beq	1549c <__assert_fail@plt+0x3c9c>
   15464:	mov	r1, #0
   15468:	add	r3, sp, #8
   1546c:	mov	r2, #10
   15470:	str	r1, [sp]
   15474:	add	r1, sp, #12
   15478:	bl	19c38 <__assert_fail@plt+0x8438>
   1547c:	cmp	r0, #0
   15480:	bne	154dc <__assert_fail@plt+0x3cdc>
   15484:	ldr	r1, [sp, #8]
   15488:	mov	r0, #1
   1548c:	cmp	r1, r4
   15490:	movcs	r0, #0
   15494:	sub	sp, fp, #16
   15498:	pop	{r4, r5, r6, sl, fp, pc}
   1549c:	mov	r0, #0
   154a0:	sub	sp, fp, #16
   154a4:	pop	{r4, r5, r6, sl, fp, pc}
   154a8:	bl	11680 <__errno_location@plt>
   154ac:	movw	r1, #51671	; 0xc9d7
   154b0:	ldr	r4, [r0]
   154b4:	mov	r0, #0
   154b8:	mov	r2, #5
   154bc:	movt	r1, #1
   154c0:	bl	114dc <dcgettext@plt>
   154c4:	movw	r3, #51461	; 0xc905
   154c8:	mov	r2, r0
   154cc:	movt	r3, #1
   154d0:	mov	r0, #1
   154d4:	mov	r1, r4
   154d8:	bl	115a8 <error@plt>
   154dc:	bl	11680 <__errno_location@plt>
   154e0:	movw	r1, #51671	; 0xc9d7
   154e4:	ldr	r4, [r0]
   154e8:	mov	r0, #0
   154ec:	mov	r2, #5
   154f0:	movt	r1, #1
   154f4:	bl	114dc <dcgettext@plt>
   154f8:	movw	r3, #51498	; 0xc92a
   154fc:	mov	r2, r0
   15500:	movt	r3, #1
   15504:	mov	r0, #1
   15508:	mov	r1, r4
   1550c:	bl	115a8 <error@plt>
   15510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15514:	add	fp, sp, #28
   15518:	sub	sp, sp, #540	; 0x21c
   1551c:	bl	15678 <__assert_fail@plt+0x3e78>
   15520:	cmn	r0, #-2147483647	; 0x80000001
   15524:	mov	r5, #0
   15528:	addne	r0, r0, #1
   1552c:	str	r5, [sp, #20]
   15530:	str	r5, [sp, #12]
   15534:	str	r5, [sp, #16]
   15538:	cmp	r0, #1
   1553c:	str	r0, [sp, #4]
   15540:	blt	1565c <__assert_fail@plt+0x3e5c>
   15544:	add	r0, sp, #12
   15548:	add	r6, sp, #24
   1554c:	mov	sl, #5
   15550:	add	r0, r0, #8
   15554:	str	r0, [sp, #8]
   15558:	b	1556c <__assert_fail@plt+0x3d6c>
   1555c:	ldr	r0, [sp, #4]
   15560:	add	r5, r7, r5
   15564:	cmp	r5, r0
   15568:	bge	1565c <__assert_fail@plt+0x3e5c>
   1556c:	ldr	r0, [sp, #4]
   15570:	sub	r4, r0, r5
   15574:	cmp	r4, #64	; 0x40
   15578:	mov	r7, r4
   1557c:	movge	r7, #64	; 0x40
   15580:	cmp	r4, #1
   15584:	blt	155b0 <__assert_fail@plt+0x3db0>
   15588:	mov	r0, #0
   1558c:	mov	r1, #0
   15590:	add	r2, r6, r0
   15594:	add	r0, r0, #8
   15598:	str	sl, [r2, #4]
   1559c:	add	r2, r5, r1
   155a0:	str	r2, [r6, r1, lsl #3]
   155a4:	add	r1, r1, #1
   155a8:	cmp	r1, r7
   155ac:	blt	15590 <__assert_fail@plt+0x3d90>
   155b0:	mov	r0, r6
   155b4:	mov	r1, r7
   155b8:	mov	r2, #0
   155bc:	bl	1153c <poll@plt>
   155c0:	cmn	r0, #1
   155c4:	beq	1565c <__assert_fail@plt+0x3e5c>
   155c8:	cmp	r4, #1
   155cc:	blt	1555c <__assert_fail@plt+0x3d5c>
   155d0:	mov	r8, #0
   155d4:	mov	r9, #6
   155d8:	add	r0, r6, r9
   155dc:	ldrh	r0, [r0]
   155e0:	cmp	r0, #32
   155e4:	beq	15604 <__assert_fail@plt+0x3e04>
   155e8:	b	15624 <__assert_fail@plt+0x3e24>
   155ec:	str	r0, [sp, #12]
   155f0:	ldr	r1, [sp, #16]
   155f4:	str	r4, [r0, r1, lsl #2]
   155f8:	ldr	r0, [sp, #16]
   155fc:	add	r0, r0, #1
   15600:	str	r0, [sp, #16]
   15604:	add	r8, r8, #1
   15608:	add	r9, r9, #8
   1560c:	cmp	r8, r7
   15610:	bge	1555c <__assert_fail@plt+0x3d5c>
   15614:	add	r0, r6, r9
   15618:	ldrh	r0, [r0]
   1561c:	cmp	r0, #32
   15620:	beq	15604 <__assert_fail@plt+0x3e04>
   15624:	ldr	r4, [r6, r8, lsl #3]
   15628:	mov	r1, #1
   1562c:	mov	r0, r4
   15630:	bl	1a50c <__assert_fail@plt+0x8d0c>
   15634:	tst	r0, #1
   15638:	bne	15604 <__assert_fail@plt+0x3e04>
   1563c:	ldr	r1, [sp, #16]
   15640:	mov	r2, #4
   15644:	ldr	r0, [sp, #12]
   15648:	add	r1, r2, r1, lsl #2
   1564c:	ldr	r2, [sp, #8]
   15650:	bl	15cc4 <__assert_fail@plt+0x44c4>
   15654:	cmp	r0, #0
   15658:	bne	155ec <__assert_fail@plt+0x3dec>
   1565c:	ldr	r0, [sp, #12]
   15660:	movw	r2, #57988	; 0xe284
   15664:	ldr	r1, [sp, #16]
   15668:	movt	r2, #2
   1566c:	stmib	r2, {r0, r1}
   15670:	sub	sp, fp, #28
   15674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15678:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1567c:	add	fp, sp, #24
   15680:	sub	sp, sp, #16
   15684:	movw	r0, #51966	; 0xcafe
   15688:	movt	r0, #1
   1568c:	bl	16070 <__assert_fail@plt+0x4870>
   15690:	cmp	r0, #0
   15694:	beq	1577c <__assert_fail@plt+0x3f7c>
   15698:	mov	r4, r0
   1569c:	bl	11680 <__errno_location@plt>
   156a0:	mov	r7, #0
   156a4:	mov	r6, r0
   156a8:	str	r7, [r0]
   156ac:	mov	r0, r4
   156b0:	bl	11764 <readdir64@plt>
   156b4:	cmp	r0, #0
   156b8:	beq	15738 <__assert_fail@plt+0x3f38>
   156bc:	mov	r8, #0
   156c0:	mvn	r5, #0
   156c4:	mov	r7, #0
   156c8:	mov	r1, r0
   156cc:	ldrb	r2, [r1, #19]!
   156d0:	cmp	r2, #46	; 0x2e
   156d4:	beq	15714 <__assert_fail@plt+0x3f14>
   156d8:	mov	r0, r1
   156dc:	mov	r1, #0
   156e0:	bl	15b4c <__assert_fail@plt+0x434c>
   156e4:	cmp	r0, r5
   156e8:	mov	r7, #1
   156ec:	movgt	r5, r0
   156f0:	mov	r0, r4
   156f4:	str	r8, [r6]
   156f8:	bl	11764 <readdir64@plt>
   156fc:	cmp	r0, #0
   15700:	beq	1573c <__assert_fail@plt+0x3f3c>
   15704:	mov	r1, r0
   15708:	ldrb	r2, [r1, #19]!
   1570c:	cmp	r2, #46	; 0x2e
   15710:	bne	156d8 <__assert_fail@plt+0x3ed8>
   15714:	ldrb	r2, [r0, #20]
   15718:	cmp	r2, #0
   1571c:	beq	156f0 <__assert_fail@plt+0x3ef0>
   15720:	cmp	r2, #46	; 0x2e
   15724:	bne	156d8 <__assert_fail@plt+0x3ed8>
   15728:	ldrb	r0, [r0, #21]
   1572c:	cmp	r0, #0
   15730:	bne	156d8 <__assert_fail@plt+0x3ed8>
   15734:	b	156f0 <__assert_fail@plt+0x3ef0>
   15738:	mvn	r5, #0
   1573c:	ldr	r6, [r6]
   15740:	cmp	r6, #0
   15744:	beq	157c0 <__assert_fail@plt+0x3fc0>
   15748:	movw	r2, #51966	; 0xcafe
   1574c:	mov	r0, #0
   15750:	mov	r1, #8
   15754:	movt	r2, #1
   15758:	bl	188c0 <__assert_fail@plt+0x70c0>
   1575c:	movw	r2, #52099	; 0xcb83
   15760:	mov	r3, r0
   15764:	mov	r0, #0
   15768:	mov	r1, r6
   1576c:	movt	r2, #1
   15770:	bl	115a8 <error@plt>
   15774:	mov	r0, r4
   15778:	bl	117f4 <closedir@plt>
   1577c:	mov	r0, #4
   15780:	bl	114e8 <sysconf@plt>
   15784:	mov	r5, r0
   15788:	mov	r1, sp
   1578c:	mov	r0, #7
   15790:	bl	11500 <getrlimit64@plt>
   15794:	cmn	r5, #1
   15798:	movweq	r5, #20
   1579c:	cmp	r0, #0
   157a0:	bne	157d8 <__assert_fail@plt+0x3fd8>
   157a4:	ldm	sp, {r0, r1}
   157a8:	and	r1, r0, r1
   157ac:	cmn	r1, #1
   157b0:	movne	r5, r0
   157b4:	mov	r0, r5
   157b8:	sub	sp, fp, #24
   157bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157c0:	mov	r0, r4
   157c4:	bl	117f4 <closedir@plt>
   157c8:	cmp	r7, #0
   157cc:	beq	1577c <__assert_fail@plt+0x3f7c>
   157d0:	cmn	r5, #1
   157d4:	ble	1577c <__assert_fail@plt+0x3f7c>
   157d8:	mov	r0, r5
   157dc:	sub	sp, fp, #24
   157e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157e4:	sub	sp, sp, #8
   157e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   157ec:	add	fp, sp, #24
   157f0:	sub	sp, sp, #8
   157f4:	movw	r9, #57988	; 0xe284
   157f8:	mov	r4, r0
   157fc:	str	r2, [fp, #8]
   15800:	str	r3, [fp, #12]
   15804:	tst	r1, #64	; 0x40
   15808:	mov	r6, #0
   1580c:	mov	r5, r1
   15810:	movt	r9, #2
   15814:	ldrne	r6, [fp, #8]
   15818:	ldrb	r0, [r9, #1]
   1581c:	cmp	r0, #0
   15820:	bne	1586c <__assert_fail@plt+0x406c>
   15824:	movw	r0, #53621	; 0xd175
   15828:	mov	r1, #524288	; 0x80000
   1582c:	movt	r0, #1
   15830:	bl	1610c <__assert_fail@plt+0x490c>
   15834:	cmp	r0, #0
   15838:	bmi	1585c <__assert_fail@plt+0x405c>
   1583c:	mov	r1, #1
   15840:	mov	r7, r0
   15844:	bl	1a50c <__assert_fail@plt+0x8d0c>
   15848:	mov	r8, r0
   1584c:	mov	r0, r7
   15850:	bl	117e8 <close@plt>
   15854:	and	r0, r8, #1
   15858:	b	15860 <__assert_fail@plt+0x4060>
   1585c:	mov	r0, #0
   15860:	mov	r1, #1
   15864:	strb	r1, [r9, #1]
   15868:	strb	r0, [r9]
   1586c:	orr	r1, r5, #524288	; 0x80000
   15870:	mov	r0, r4
   15874:	mov	r2, r6
   15878:	bl	1610c <__assert_fail@plt+0x490c>
   1587c:	mov	r4, r0
   15880:	cmp	r0, #0
   15884:	bmi	158a0 <__assert_fail@plt+0x40a0>
   15888:	ldrb	r0, [r9]
   1588c:	cmp	r0, #0
   15890:	bne	158a0 <__assert_fail@plt+0x40a0>
   15894:	mov	r0, r4
   15898:	mov	r1, #1
   1589c:	bl	15ddc <__assert_fail@plt+0x45dc>
   158a0:	mov	r0, r4
   158a4:	sub	sp, fp, #24
   158a8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   158ac:	add	sp, sp, #8
   158b0:	bx	lr
   158b4:	push	{r4, sl, fp, lr}
   158b8:	add	fp, sp, #8
   158bc:	movw	r4, #57988	; 0xe284
   158c0:	movt	r4, #2
   158c4:	ldr	r0, [r4, #4]
   158c8:	bl	1a788 <__assert_fail@plt+0x8f88>
   158cc:	mov	r0, #0
   158d0:	str	r0, [r4, #4]
   158d4:	str	r0, [r4, #8]
   158d8:	pop	{r4, sl, fp, pc}
   158dc:	push	{fp, lr}
   158e0:	mov	fp, sp
   158e4:	movw	r0, #51732	; 0xca14
   158e8:	movt	r0, #1
   158ec:	bl	115cc <getenv@plt>
   158f0:	cmp	r0, #0
   158f4:	movwne	r0, #1
   158f8:	pop	{fp, pc}
   158fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15900:	add	fp, sp, #28
   15904:	sub	sp, sp, #524	; 0x20c
   15908:	movw	r0, #57988	; 0xe284
   1590c:	movt	r0, #2
   15910:	ldr	r1, [r0, #4]
   15914:	ldr	sl, [r0, #8]
   15918:	str	r1, [sp, #4]
   1591c:	bl	15678 <__assert_fail@plt+0x3e78>
   15920:	mov	r7, r0
   15924:	cmn	r0, #-2147483647	; 0x80000001
   15928:	addne	r7, r7, #1
   1592c:	cmp	r7, #1
   15930:	blt	15a4c <__assert_fail@plt+0x424c>
   15934:	mov	r4, #0
   15938:	add	r5, sp, #8
   1593c:	mov	r3, #5
   15940:	mov	r8, #0
   15944:	str	r7, [sp]
   15948:	sub	r9, r7, r8
   1594c:	cmp	r9, #64	; 0x40
   15950:	mov	r6, r9
   15954:	movge	r6, #64	; 0x40
   15958:	cmp	r9, #1
   1595c:	blt	15988 <__assert_fail@plt+0x4188>
   15960:	mov	r0, #0
   15964:	mov	r1, #0
   15968:	add	r2, r5, r0
   1596c:	add	r0, r0, #8
   15970:	str	r3, [r2, #4]
   15974:	add	r2, r8, r1
   15978:	str	r2, [r5, r1, lsl #3]
   1597c:	add	r1, r1, #1
   15980:	cmp	r1, r6
   15984:	blt	15968 <__assert_fail@plt+0x4168>
   15988:	mov	r0, r5
   1598c:	mov	r1, r6
   15990:	mov	r2, #0
   15994:	bl	1153c <poll@plt>
   15998:	mov	r3, #5
   1599c:	cmn	r0, #1
   159a0:	beq	15a4c <__assert_fail@plt+0x424c>
   159a4:	cmp	r9, #1
   159a8:	blt	15a30 <__assert_fail@plt+0x4230>
   159ac:	mov	r9, #0
   159b0:	add	r0, r5, r9, lsl #3
   159b4:	ldrh	r0, [r0, #6]
   159b8:	cmp	r0, #32
   159bc:	beq	159c8 <__assert_fail@plt+0x41c8>
   159c0:	b	159e4 <__assert_fail@plt+0x41e4>
   159c4:	mov	r3, #5
   159c8:	add	r9, r9, #1
   159cc:	cmp	r9, r6
   159d0:	bge	15a30 <__assert_fail@plt+0x4230>
   159d4:	add	r0, r5, r9, lsl #3
   159d8:	ldrh	r0, [r0, #6]
   159dc:	cmp	r0, #32
   159e0:	beq	159c8 <__assert_fail@plt+0x41c8>
   159e4:	ldr	r7, [r5, r9, lsl #3]
   159e8:	mov	r1, #1
   159ec:	mov	r0, r7
   159f0:	bl	1a50c <__assert_fail@plt+0x8d0c>
   159f4:	tst	r0, #1
   159f8:	bne	159c4 <__assert_fail@plt+0x41c4>
   159fc:	ldr	r1, [sp, #4]
   15a00:	cmp	r4, sl
   15a04:	mov	r3, #5
   15a08:	bcs	15a44 <__assert_fail@plt+0x4244>
   15a0c:	ldr	r0, [r1, r4, lsl #2]
   15a10:	cmp	r0, r7
   15a14:	bge	15a28 <__assert_fail@plt+0x4228>
   15a18:	add	r4, r4, #1
   15a1c:	cmp	sl, r4
   15a20:	bne	15a0c <__assert_fail@plt+0x420c>
   15a24:	b	15a44 <__assert_fail@plt+0x4244>
   15a28:	beq	159c8 <__assert_fail@plt+0x41c8>
   15a2c:	b	15a44 <__assert_fail@plt+0x4244>
   15a30:	ldr	r7, [sp]
   15a34:	add	r8, r6, r8
   15a38:	cmp	r8, r7
   15a3c:	blt	15948 <__assert_fail@plt+0x4148>
   15a40:	b	15a4c <__assert_fail@plt+0x424c>
   15a44:	cmp	r7, #0
   15a48:	bpl	15a54 <__assert_fail@plt+0x4254>
   15a4c:	sub	sp, fp, #28
   15a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a54:	movw	r1, #51760	; 0xca30
   15a58:	mov	r0, #0
   15a5c:	mov	r2, #5
   15a60:	movt	r1, #1
   15a64:	bl	114dc <dcgettext@plt>
   15a68:	mov	r2, r0
   15a6c:	mov	r0, #0
   15a70:	mov	r1, #0
   15a74:	mov	r3, r7
   15a78:	bl	115a8 <error@plt>
   15a7c:	movw	r0, #51912	; 0xcac8
   15a80:	movw	r1, #51921	; 0xcad1
   15a84:	movw	r3, #51930	; 0xcada
   15a88:	mov	r2, #396	; 0x18c
   15a8c:	movt	r0, #1
   15a90:	movt	r1, #1
   15a94:	movt	r3, #1
   15a98:	bl	11800 <__assert_fail@plt>
   15a9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15aa0:	add	fp, sp, #24
   15aa4:	sub	sp, sp, #16
   15aa8:	mov	r8, r0
   15aac:	movw	r0, #57808	; 0xe1d0
   15ab0:	movt	r0, #2
   15ab4:	ldr	r0, [r0]
   15ab8:	bl	1a6ec <__assert_fail@plt+0x8eec>
   15abc:	movw	r0, #57820	; 0xe1dc
   15ac0:	movw	r1, #52008	; 0xcb28
   15ac4:	mov	r2, #5
   15ac8:	mov	r9, #0
   15acc:	movt	r0, #2
   15ad0:	movt	r1, #1
   15ad4:	ldr	r6, [r0]
   15ad8:	movw	r0, #57708	; 0xe16c
   15adc:	movt	r0, #2
   15ae0:	ldr	r5, [r0]
   15ae4:	mov	r0, #0
   15ae8:	bl	114dc <dcgettext@plt>
   15aec:	movw	r1, #52023	; 0xcb37
   15af0:	mov	r7, r0
   15af4:	mov	r0, #0
   15af8:	mov	r2, #5
   15afc:	movt	r1, #1
   15b00:	bl	114dc <dcgettext@plt>
   15b04:	movw	r1, #52038	; 0xcb46
   15b08:	mov	r4, r0
   15b0c:	mov	r0, #0
   15b10:	mov	r2, #5
   15b14:	movt	r1, #1
   15b18:	bl	114dc <dcgettext@plt>
   15b1c:	movw	r2, #51994	; 0xcb1a
   15b20:	str	r0, [sp, #8]
   15b24:	mov	r0, r6
   15b28:	mov	r1, r8
   15b2c:	mov	r3, r5
   15b30:	str	r7, [sp]
   15b34:	str	r4, [sp, #4]
   15b38:	str	r9, [sp, #12]
   15b3c:	movt	r2, #1
   15b40:	bl	194a0 <__assert_fail@plt+0x7ca0>
   15b44:	sub	sp, fp, #24
   15b48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b50:	add	fp, sp, #24
   15b54:	sub	sp, sp, #8
   15b58:	mov	r5, r1
   15b5c:	mov	r4, r0
   15b60:	bl	11680 <__errno_location@plt>
   15b64:	mov	r6, r0
   15b68:	mov	r0, #0
   15b6c:	add	r1, sp, #4
   15b70:	mov	r2, #10
   15b74:	str	r0, [r6]
   15b78:	mov	r0, r4
   15b7c:	bl	1144c <strtol@plt>
   15b80:	add	r1, r0, #-2147483647	; 0x80000001
   15b84:	cmp	r1, #1
   15b88:	bls	15be8 <__assert_fail@plt+0x43e8>
   15b8c:	ldr	r7, [sp, #4]
   15b90:	ldrb	r1, [r7]
   15b94:	cmp	r1, #0
   15b98:	bne	15c00 <__assert_fail@plt+0x4400>
   15b9c:	cmp	r7, r4
   15ba0:	subne	sp, fp, #24
   15ba4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ba8:	movw	r1, #52078	; 0xcb6e
   15bac:	ldr	r6, [r6]
   15bb0:	mov	r0, #0
   15bb4:	mov	r2, #5
   15bb8:	movt	r1, #1
   15bbc:	bl	114dc <dcgettext@plt>
   15bc0:	mov	r7, r0
   15bc4:	mov	r0, #0
   15bc8:	mov	r1, r5
   15bcc:	mov	r2, r4
   15bd0:	bl	188c0 <__assert_fail@plt+0x70c0>
   15bd4:	mov	r3, r0
   15bd8:	mov	r0, #1
   15bdc:	mov	r1, r6
   15be0:	mov	r2, r7
   15be4:	bl	115a8 <error@plt>
   15be8:	ldr	r1, [r6]
   15bec:	movw	r2, #52099	; 0xcb83
   15bf0:	mov	r0, #1
   15bf4:	mov	r3, r4
   15bf8:	movt	r2, #1
   15bfc:	bl	115a8 <error@plt>
   15c00:	movw	r1, #52051	; 0xcb53
   15c04:	ldr	r8, [r6]
   15c08:	mov	r0, #0
   15c0c:	mov	r2, #5
   15c10:	movt	r1, #1
   15c14:	bl	114dc <dcgettext@plt>
   15c18:	mov	r6, r0
   15c1c:	mov	r0, #0
   15c20:	mov	r1, r5
   15c24:	mov	r2, r7
   15c28:	bl	188c0 <__assert_fail@plt+0x70c0>
   15c2c:	mov	r7, r0
   15c30:	mov	r0, #1
   15c34:	mov	r1, r5
   15c38:	mov	r2, r4
   15c3c:	bl	188c0 <__assert_fail@plt+0x70c0>
   15c40:	str	r0, [sp]
   15c44:	mov	r0, #1
   15c48:	mov	r1, r8
   15c4c:	mov	r2, r6
   15c50:	mov	r3, r7
   15c54:	bl	115a8 <error@plt>
   15c58:	push	{r4, r5, fp, lr}
   15c5c:	add	fp, sp, #8
   15c60:	sub	sp, sp, #16
   15c64:	mov	r4, r1
   15c68:	movw	r1, #52102	; 0xcb86
   15c6c:	mov	r5, r0
   15c70:	mov	r0, #0
   15c74:	mov	r2, #5
   15c78:	movt	r1, #1
   15c7c:	bl	114dc <dcgettext@plt>
   15c80:	movw	r2, #52347	; 0xcc7b
   15c84:	movw	r3, #51994	; 0xcb1a
   15c88:	mov	r1, r0
   15c8c:	movw	r0, #52394	; 0xccaa
   15c90:	movt	r2, #1
   15c94:	movt	r0, #1
   15c98:	movt	r3, #1
   15c9c:	str	r2, [sp, #4]
   15ca0:	movw	r2, #52308	; 0xcc54
   15ca4:	str	r3, [sp]
   15ca8:	str	r0, [sp, #8]
   15cac:	mov	r0, r5
   15cb0:	mov	r3, r4
   15cb4:	movt	r2, #1
   15cb8:	bl	11674 <fprintf@plt>
   15cbc:	sub	sp, fp, #8
   15cc0:	pop	{r4, r5, fp, pc}
   15cc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cc8:	add	fp, sp, #24
   15ccc:	mov	r6, r2
   15cd0:	mov	r7, r1
   15cd4:	mov	r4, r0
   15cd8:	bl	11680 <__errno_location@plt>
   15cdc:	cmp	r7, #0
   15ce0:	beq	15d78 <__assert_fail@plt+0x4578>
   15ce4:	mov	r5, r0
   15ce8:	ldr	r8, [r0]
   15cec:	ldr	r0, [r6]
   15cf0:	cmp	r0, #0
   15cf4:	mov	r1, r0
   15cf8:	movweq	r1, #16
   15cfc:	cmp	r1, r7
   15d00:	bcs	15d18 <__assert_fail@plt+0x4518>
   15d04:	lsl	r2, r1, #1
   15d08:	cmp	r1, r1, lsl #1
   15d0c:	mov	r1, r2
   15d10:	bls	15cfc <__assert_fail@plt+0x44fc>
   15d14:	mov	r1, r7
   15d18:	cmp	r0, #0
   15d1c:	beq	15d4c <__assert_fail@plt+0x454c>
   15d20:	cmp	r1, r0
   15d24:	beq	15d64 <__assert_fail@plt+0x4564>
   15d28:	mov	r0, r4
   15d2c:	str	r1, [r6]
   15d30:	bl	1a8ec <__assert_fail@plt+0x90ec>
   15d34:	mov	r4, r0
   15d38:	cmp	r0, #0
   15d3c:	bne	15d6c <__assert_fail@plt+0x456c>
   15d40:	mov	r4, #0
   15d44:	mov	r0, r4
   15d48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d4c:	cmp	r4, #0
   15d50:	bne	15d98 <__assert_fail@plt+0x4598>
   15d54:	mov	r0, r1
   15d58:	str	r1, [r6]
   15d5c:	bl	1a858 <__assert_fail@plt+0x9058>
   15d60:	mov	r4, r0
   15d64:	cmp	r4, #0
   15d68:	beq	15d40 <__assert_fail@plt+0x4540>
   15d6c:	mov	r0, r4
   15d70:	str	r8, [r5]
   15d74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d78:	movw	r0, #52416	; 0xccc0
   15d7c:	movw	r1, #52428	; 0xcccc
   15d80:	movw	r3, #52440	; 0xccd8
   15d84:	mov	r2, #71	; 0x47
   15d88:	movt	r0, #1
   15d8c:	movt	r1, #1
   15d90:	movt	r3, #1
   15d94:	bl	11800 <__assert_fail@plt>
   15d98:	movw	r0, #52482	; 0xcd02
   15d9c:	movw	r1, #52428	; 0xcccc
   15da0:	movw	r3, #52440	; 0xccd8
   15da4:	mov	r2, #79	; 0x4f
   15da8:	movt	r0, #1
   15dac:	movt	r1, #1
   15db0:	movt	r3, #1
   15db4:	bl	11800 <__assert_fail@plt>
   15db8:	push	{r4, sl, fp, lr}
   15dbc:	add	fp, sp, #8
   15dc0:	mov	r4, r0
   15dc4:	bl	15cc4 <__assert_fail@plt+0x44c4>
   15dc8:	cmp	r0, #0
   15dcc:	popne	{r4, sl, fp, pc}
   15dd0:	mov	r0, r4
   15dd4:	bl	1a788 <__assert_fail@plt+0x8f88>
   15dd8:	bl	19bf4 <__assert_fail@plt+0x83f4>
   15ddc:	push	{r4, r5, r6, sl, fp, lr}
   15de0:	add	fp, sp, #16
   15de4:	mov	r6, r1
   15de8:	mov	r1, #1
   15dec:	mov	r2, #0
   15df0:	mov	r4, r0
   15df4:	mov	r5, #0
   15df8:	bl	1a50c <__assert_fail@plt+0x8d0c>
   15dfc:	cmp	r0, #0
   15e00:	bmi	15e30 <__assert_fail@plt+0x4630>
   15e04:	cmp	r6, #0
   15e08:	bic	r2, r0, #1
   15e0c:	orrne	r2, r0, #1
   15e10:	cmp	r0, r2
   15e14:	beq	15e34 <__assert_fail@plt+0x4634>
   15e18:	mov	r0, r4
   15e1c:	mov	r1, #2
   15e20:	bl	1a50c <__assert_fail@plt+0x8d0c>
   15e24:	cmn	r0, #1
   15e28:	movwne	r0, #0
   15e2c:	pop	{r4, r5, r6, sl, fp, pc}
   15e30:	mvn	r5, #0
   15e34:	mov	r0, r5
   15e38:	pop	{r4, r5, r6, sl, fp, pc}
   15e3c:	movw	r1, #1030	; 0x406
   15e40:	mov	r2, #0
   15e44:	b	1a50c <__assert_fail@plt+0x8d0c>
   15e48:	movw	r1, #58000	; 0xe290
   15e4c:	movt	r1, #2
   15e50:	str	r0, [r1]
   15e54:	bx	lr
   15e58:	push	{r4, r5, r6, sl, fp, lr}
   15e5c:	add	fp, sp, #16
   15e60:	sub	sp, sp, #8
   15e64:	movw	r6, #57816	; 0xe1d8
   15e68:	movt	r6, #2
   15e6c:	ldr	r5, [r6]
   15e70:	mov	r0, r5
   15e74:	bl	1a748 <__assert_fail@plt+0x8f48>
   15e78:	cmp	r0, #0
   15e7c:	beq	15ebc <__assert_fail@plt+0x46bc>
   15e80:	mov	r0, #1
   15e84:	mov	r2, #0
   15e88:	mov	r3, #0
   15e8c:	mov	r4, #0
   15e90:	str	r0, [sp]
   15e94:	mov	r0, r5
   15e98:	bl	1a7b0 <__assert_fail@plt+0x8fb0>
   15e9c:	cmp	r0, #0
   15ea0:	bne	15ec0 <__assert_fail@plt+0x46c0>
   15ea4:	ldr	r0, [r6]
   15ea8:	bl	1a6ec <__assert_fail@plt+0x8eec>
   15eac:	cmp	r0, #0
   15eb0:	mov	r4, r0
   15eb4:	movwne	r4, #1
   15eb8:	b	15ec0 <__assert_fail@plt+0x46c0>
   15ebc:	mov	r4, #0
   15ec0:	ldr	r0, [r6]
   15ec4:	bl	1a97c <__assert_fail@plt+0x917c>
   15ec8:	cmp	r4, #0
   15ecc:	cmpeq	r0, #0
   15ed0:	bne	15ee0 <__assert_fail@plt+0x46e0>
   15ed4:	sub	sp, fp, #16
   15ed8:	pop	{r4, r5, r6, sl, fp, lr}
   15edc:	b	15f84 <__assert_fail@plt+0x4784>
   15ee0:	movw	r1, #52499	; 0xcd13
   15ee4:	mov	r0, #0
   15ee8:	mov	r2, #5
   15eec:	movt	r1, #1
   15ef0:	bl	114dc <dcgettext@plt>
   15ef4:	mov	r4, r0
   15ef8:	movw	r0, #58000	; 0xe290
   15efc:	movt	r0, #2
   15f00:	ldr	r6, [r0]
   15f04:	bl	11680 <__errno_location@plt>
   15f08:	ldr	r5, [r0]
   15f0c:	cmp	r6, #0
   15f10:	bne	15f2c <__assert_fail@plt+0x472c>
   15f14:	movw	r2, #52099	; 0xcb83
   15f18:	mov	r0, #0
   15f1c:	mov	r1, r5
   15f20:	mov	r3, r4
   15f24:	movt	r2, #1
   15f28:	b	15f4c <__assert_fail@plt+0x474c>
   15f2c:	mov	r0, r6
   15f30:	bl	18b08 <__assert_fail@plt+0x7308>
   15f34:	movw	r2, #52518	; 0xcd26
   15f38:	mov	r3, r0
   15f3c:	str	r4, [sp]
   15f40:	mov	r0, #0
   15f44:	mov	r1, r5
   15f48:	movt	r2, #1
   15f4c:	bl	115a8 <error@plt>
   15f50:	bl	15f84 <__assert_fail@plt+0x4784>
   15f54:	movw	r0, #57712	; 0xe170
   15f58:	movt	r0, #2
   15f5c:	ldr	r0, [r0]
   15f60:	bl	114a0 <_exit@plt>
   15f64:	movw	r1, #58004	; 0xe294
   15f68:	movt	r1, #2
   15f6c:	str	r0, [r1, #4]
   15f70:	bx	lr
   15f74:	movw	r1, #58004	; 0xe294
   15f78:	movt	r1, #2
   15f7c:	strb	r0, [r1]
   15f80:	bx	lr
   15f84:	push	{r4, r5, r6, sl, fp, lr}
   15f88:	add	fp, sp, #16
   15f8c:	sub	sp, sp, #8
   15f90:	movw	r0, #57820	; 0xe1dc
   15f94:	movt	r0, #2
   15f98:	ldr	r0, [r0]
   15f9c:	bl	1a97c <__assert_fail@plt+0x917c>
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fcc <__assert_fail@plt+0x47cc>
   15fa8:	movw	r5, #58004	; 0xe294
   15fac:	movt	r5, #2
   15fb0:	ldrb	r0, [r5]
   15fb4:	cmp	r0, #0
   15fb8:	beq	15ff8 <__assert_fail@plt+0x47f8>
   15fbc:	bl	11680 <__errno_location@plt>
   15fc0:	ldr	r0, [r0]
   15fc4:	cmp	r0, #32
   15fc8:	bne	15ff8 <__assert_fail@plt+0x47f8>
   15fcc:	movw	r0, #57808	; 0xe1d0
   15fd0:	movt	r0, #2
   15fd4:	ldr	r0, [r0]
   15fd8:	bl	1a97c <__assert_fail@plt+0x917c>
   15fdc:	cmp	r0, #0
   15fe0:	subeq	sp, fp, #16
   15fe4:	popeq	{r4, r5, r6, sl, fp, pc}
   15fe8:	movw	r0, #57712	; 0xe170
   15fec:	movt	r0, #2
   15ff0:	ldr	r0, [r0]
   15ff4:	bl	114a0 <_exit@plt>
   15ff8:	movw	r1, #52525	; 0xcd2d
   15ffc:	mov	r0, #0
   16000:	mov	r2, #5
   16004:	movt	r1, #1
   16008:	bl	114dc <dcgettext@plt>
   1600c:	ldr	r6, [r5, #4]
   16010:	mov	r4, r0
   16014:	bl	11680 <__errno_location@plt>
   16018:	ldr	r5, [r0]
   1601c:	cmp	r6, #0
   16020:	bne	1603c <__assert_fail@plt+0x483c>
   16024:	movw	r2, #52099	; 0xcb83
   16028:	mov	r0, #0
   1602c:	mov	r1, r5
   16030:	mov	r3, r4
   16034:	movt	r2, #1
   16038:	b	1605c <__assert_fail@plt+0x485c>
   1603c:	mov	r0, r6
   16040:	bl	18b08 <__assert_fail@plt+0x7308>
   16044:	movw	r2, #52518	; 0xcd26
   16048:	mov	r3, r0
   1604c:	str	r4, [sp]
   16050:	mov	r0, #0
   16054:	mov	r1, r5
   16058:	movt	r2, #1
   1605c:	bl	115a8 <error@plt>
   16060:	movw	r0, #57712	; 0xe170
   16064:	movt	r0, #2
   16068:	ldr	r0, [r0]
   1606c:	bl	114a0 <_exit@plt>
   16070:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16074:	add	fp, sp, #24
   16078:	bl	115b4 <opendir@plt>
   1607c:	cmp	r0, #0
   16080:	beq	160d4 <__assert_fail@plt+0x48d4>
   16084:	mov	r4, r0
   16088:	bl	11788 <dirfd@plt>
   1608c:	cmp	r0, #2
   16090:	bhi	160e0 <__assert_fail@plt+0x48e0>
   16094:	movw	r1, #1030	; 0x406
   16098:	mov	r2, #3
   1609c:	bl	1a50c <__assert_fail@plt+0x8d0c>
   160a0:	cmn	r0, #1
   160a4:	ble	160e8 <__assert_fail@plt+0x48e8>
   160a8:	mov	r7, r0
   160ac:	bl	11770 <fdopendir@plt>
   160b0:	mov	r5, r0
   160b4:	bl	11680 <__errno_location@plt>
   160b8:	ldr	r8, [r0]
   160bc:	mov	r6, r0
   160c0:	cmp	r5, #0
   160c4:	bne	160f8 <__assert_fail@plt+0x48f8>
   160c8:	mov	r0, r7
   160cc:	bl	117e8 <close@plt>
   160d0:	b	160f4 <__assert_fail@plt+0x48f4>
   160d4:	mov	r5, #0
   160d8:	mov	r0, r5
   160dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160e0:	mov	r0, r4
   160e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160e8:	bl	11680 <__errno_location@plt>
   160ec:	ldr	r8, [r0]
   160f0:	mov	r6, r0
   160f4:	mov	r5, #0
   160f8:	mov	r0, r4
   160fc:	bl	117f4 <closedir@plt>
   16100:	mov	r0, r5
   16104:	str	r8, [r6]
   16108:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1610c:	sub	sp, sp, #8
   16110:	push	{fp, lr}
   16114:	mov	fp, sp
   16118:	sub	sp, sp, #8
   1611c:	str	r2, [fp, #8]
   16120:	str	r3, [fp, #12]
   16124:	tst	r1, #64	; 0x40
   16128:	mov	r2, #0
   1612c:	ldrne	r2, [fp, #8]
   16130:	bl	115c0 <open64@plt>
   16134:	bl	18f3c <__assert_fail@plt+0x773c>
   16138:	mov	sp, fp
   1613c:	pop	{fp, lr}
   16140:	add	sp, sp, #8
   16144:	bx	lr
   16148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1614c:	add	fp, sp, #28
   16150:	sub	sp, sp, #308	; 0x134
   16154:	mov	r6, r1
   16158:	mov	sl, r0
   1615c:	bl	11578 <__ctype_get_mb_cur_max@plt>
   16160:	cmp	r0, #2
   16164:	bcc	16518 <__assert_fail@plt+0x4d18>
   16168:	mov	r4, #0
   1616c:	sub	r0, fp, #88	; 0x58
   16170:	str	r4, [fp, #-80]	; 0xffffffb0
   16174:	str	r4, [fp, #-84]	; 0xffffffac
   16178:	strb	r4, [fp, #-76]	; 0xffffffb4
   1617c:	strb	r4, [fp, #-88]	; 0xffffffa8
   16180:	str	r6, [fp, #-72]	; 0xffffffb8
   16184:	bl	16c7c <__assert_fail@plt+0x547c>
   16188:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1618c:	cmp	r0, #0
   16190:	beq	161a0 <__assert_fail@plt+0x49a0>
   16194:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16198:	cmp	r0, #0
   1619c:	beq	16640 <__assert_fail@plt+0x4e40>
   161a0:	add	r0, sp, #136	; 0x88
   161a4:	str	r4, [fp, #-136]	; 0xffffff78
   161a8:	str	r4, [fp, #-140]	; 0xffffff74
   161ac:	str	r6, [fp, #-128]	; 0xffffff80
   161b0:	strb	r4, [fp, #-132]	; 0xffffff7c
   161b4:	str	r6, [sp, #16]
   161b8:	strb	r4, [fp, #-144]	; 0xffffff70
   161bc:	str	r4, [sp, #144]	; 0x90
   161c0:	str	r4, [sp, #140]	; 0x8c
   161c4:	str	sl, [sp, #152]	; 0x98
   161c8:	strb	r4, [sp, #148]	; 0x94
   161cc:	strb	r4, [sp, #136]	; 0x88
   161d0:	bl	16c7c <__assert_fail@plt+0x547c>
   161d4:	ldrb	r0, [sp, #160]	; 0xa0
   161d8:	cmp	r0, #0
   161dc:	beq	161ec <__assert_fail@plt+0x49ec>
   161e0:	ldr	r0, [sp, #164]	; 0xa4
   161e4:	cmp	r0, #0
   161e8:	beq	16664 <__assert_fail@plt+0x4e64>
   161ec:	add	r0, sp, #24
   161f0:	mov	r8, #1
   161f4:	mov	r6, #0
   161f8:	sub	r5, fp, #144	; 0x90
   161fc:	mov	r1, #0
   16200:	mov	r7, #0
   16204:	mov	r9, #0
   16208:	add	r0, r0, #4
   1620c:	str	r0, [sp, #12]
   16210:	add	r0, sp, #136	; 0x88
   16214:	add	r0, r0, #16
   16218:	str	r0, [sp, #8]
   1621c:	add	r0, r9, r9, lsl #2
   16220:	mov	r4, r7
   16224:	cmp	r7, r0
   16228:	bcc	162d4 <__assert_fail@plt+0x4ad4>
   1622c:	tst	r8, #1
   16230:	beq	162d4 <__assert_fail@plt+0x4ad4>
   16234:	cmp	r9, #10
   16238:	bcc	162d4 <__assert_fail@plt+0x4ad4>
   1623c:	subs	r0, r4, r1
   16240:	beq	16288 <__assert_fail@plt+0x4a88>
   16244:	sub	r7, r1, r4
   16248:	b	16268 <__assert_fail@plt+0x4a68>
   1624c:	strb	r6, [fp, #-132]	; 0xffffff7c
   16250:	adds	r7, r7, #1
   16254:	ldr	r0, [fp, #-128]	; 0xffffff80
   16258:	ldr	r1, [fp, #-124]	; 0xffffff84
   1625c:	add	r0, r0, r1
   16260:	str	r0, [fp, #-128]	; 0xffffff80
   16264:	bcs	16288 <__assert_fail@plt+0x4a88>
   16268:	mov	r0, r5
   1626c:	bl	16c7c <__assert_fail@plt+0x547c>
   16270:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16274:	cmp	r0, #0
   16278:	beq	1624c <__assert_fail@plt+0x4a4c>
   1627c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16280:	cmp	r0, #0
   16284:	bne	1624c <__assert_fail@plt+0x4a4c>
   16288:	mov	r0, r5
   1628c:	bl	16c7c <__assert_fail@plt+0x547c>
   16290:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16294:	cmp	r0, #0
   16298:	beq	162d0 <__assert_fail@plt+0x4ad0>
   1629c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   162a0:	mov	r1, r4
   162a4:	cmp	r0, #0
   162a8:	bne	162d4 <__assert_fail@plt+0x4ad4>
   162ac:	ldr	r1, [sp, #16]
   162b0:	mov	r0, sl
   162b4:	add	r2, sp, #80	; 0x50
   162b8:	bl	166a4 <__assert_fail@plt+0x4ea4>
   162bc:	mov	r8, #0
   162c0:	cmp	r0, #0
   162c4:	mov	r1, r4
   162c8:	beq	162d4 <__assert_fail@plt+0x4ad4>
   162cc:	b	16690 <__assert_fail@plt+0x4e90>
   162d0:	mov	r1, r4
   162d4:	ldrb	r0, [sp, #160]	; 0xa0
   162d8:	add	r7, r4, #1
   162dc:	str	r1, [sp, #20]
   162e0:	cmp	r0, #0
   162e4:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   162e8:	cmpne	r0, #0
   162ec:	bne	16318 <__assert_fail@plt+0x4b18>
   162f0:	ldr	r2, [sp, #156]	; 0x9c
   162f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   162f8:	cmp	r2, r0
   162fc:	bne	164d4 <__assert_fail@plt+0x4cd4>
   16300:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16304:	ldr	r0, [sp, #152]	; 0x98
   16308:	bl	11638 <bcmp@plt>
   1630c:	cmp	r0, #0
   16310:	bne	164d4 <__assert_fail@plt+0x4cd4>
   16314:	b	16328 <__assert_fail@plt+0x4b28>
   16318:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1631c:	ldr	r1, [sp, #164]	; 0xa4
   16320:	cmp	r1, r0
   16324:	bne	164d4 <__assert_fail@plt+0x4cd4>
   16328:	add	r2, sp, #136	; 0x88
   1632c:	mov	r1, #48	; 0x30
   16330:	add	r3, sp, #80	; 0x50
   16334:	str	r9, [sp]
   16338:	str	r8, [sp, #4]
   1633c:	mov	r0, r2
   16340:	add	r2, r2, #32
   16344:	vld1.64	{d16-d17}, [r0], r1
   16348:	ldr	r1, [sp, #8]
   1634c:	vld1.64	{d20-d21}, [r2]
   16350:	vldr	d22, [r0]
   16354:	add	r0, r3, #32
   16358:	vld1.64	{d18-d19}, [r1]
   1635c:	add	r1, r3, #16
   16360:	vst1.64	{d20-d21}, [r0]
   16364:	mov	r0, r3
   16368:	vst1.64	{d18-d19}, [r1]
   1636c:	mov	r1, #12
   16370:	vst1.64	{d16-d17}, [r0], r1
   16374:	strb	r6, [r0]
   16378:	ldr	r0, [sp, #16]
   1637c:	vstr	d22, [sp, #128]	; 0x80
   16380:	ldr	r1, [sp, #100]	; 0x64
   16384:	str	r0, [sp, #40]	; 0x28
   16388:	ldr	r0, [sp, #96]	; 0x60
   1638c:	strb	r6, [sp, #24]
   16390:	add	r0, r0, r1
   16394:	str	r0, [sp, #96]	; 0x60
   16398:	ldr	r0, [sp, #12]
   1639c:	str	r6, [r0]
   163a0:	str	r6, [r0, #4]
   163a4:	add	r0, sp, #24
   163a8:	strb	r6, [sp, #36]	; 0x24
   163ac:	bl	16c7c <__assert_fail@plt+0x547c>
   163b0:	ldrb	r0, [sp, #48]	; 0x30
   163b4:	cmp	r0, #0
   163b8:	beq	163c8 <__assert_fail@plt+0x4bc8>
   163bc:	ldr	r0, [sp, #52]	; 0x34
   163c0:	cmp	r0, #0
   163c4:	beq	166a0 <__assert_fail@plt+0x4ea0>
   163c8:	strb	r6, [sp, #36]	; 0x24
   163cc:	ldr	r0, [sp, #40]	; 0x28
   163d0:	ldr	r1, [sp, #44]	; 0x2c
   163d4:	add	r0, r0, r1
   163d8:	str	r0, [sp, #40]	; 0x28
   163dc:	add	r0, sp, #24
   163e0:	bl	16c7c <__assert_fail@plt+0x547c>
   163e4:	ldrb	r0, [sp, #48]	; 0x30
   163e8:	cmp	r0, #0
   163ec:	beq	163fc <__assert_fail@plt+0x4bfc>
   163f0:	ldr	r0, [sp, #52]	; 0x34
   163f4:	cmp	r0, #0
   163f8:	beq	16670 <__assert_fail@plt+0x4e70>
   163fc:	add	r7, r4, #2
   16400:	add	r0, sp, #80	; 0x50
   16404:	bl	16c7c <__assert_fail@plt+0x547c>
   16408:	ldr	r0, [sp, #108]	; 0x6c
   1640c:	ldrb	r1, [sp, #104]	; 0x68
   16410:	cmp	r0, #0
   16414:	bne	16420 <__assert_fail@plt+0x4c20>
   16418:	cmp	r1, #0
   1641c:	bne	16650 <__assert_fail@plt+0x4e50>
   16420:	cmp	r1, #0
   16424:	ldrbne	r1, [sp, #48]	; 0x30
   16428:	cmpne	r1, #0
   1642c:	bne	16468 <__assert_fail@plt+0x4c68>
   16430:	ldr	r4, [sp, #100]	; 0x64
   16434:	ldr	r0, [sp, #44]	; 0x2c
   16438:	cmp	r4, r0
   1643c:	bne	164c8 <__assert_fail@plt+0x4cc8>
   16440:	ldr	r8, [sp, #40]	; 0x28
   16444:	ldr	r9, [sp, #96]	; 0x60
   16448:	mov	r2, r4
   1644c:	mov	r0, r9
   16450:	mov	r1, r8
   16454:	bl	11638 <bcmp@plt>
   16458:	cmp	r0, #0
   1645c:	mov	r0, r4
   16460:	beq	16484 <__assert_fail@plt+0x4c84>
   16464:	b	164c8 <__assert_fail@plt+0x4cc8>
   16468:	ldr	r1, [sp, #52]	; 0x34
   1646c:	cmp	r0, r1
   16470:	bne	164c8 <__assert_fail@plt+0x4cc8>
   16474:	ldr	r8, [sp, #40]	; 0x28
   16478:	ldr	r4, [sp, #44]	; 0x2c
   1647c:	ldr	r9, [sp, #96]	; 0x60
   16480:	ldr	r0, [sp, #100]	; 0x64
   16484:	mov	r1, #0
   16488:	add	r0, r9, r0
   1648c:	strb	r1, [sp, #92]	; 0x5c
   16490:	str	r0, [sp, #96]	; 0x60
   16494:	add	r0, r8, r4
   16498:	strb	r1, [sp, #36]	; 0x24
   1649c:	str	r0, [sp, #40]	; 0x28
   164a0:	add	r0, sp, #24
   164a4:	bl	16c7c <__assert_fail@plt+0x547c>
   164a8:	ldrb	r0, [sp, #48]	; 0x30
   164ac:	add	r7, r7, #1
   164b0:	cmp	r0, #0
   164b4:	beq	16400 <__assert_fail@plt+0x4c00>
   164b8:	ldr	r0, [sp, #52]	; 0x34
   164bc:	cmp	r0, #0
   164c0:	bne	16400 <__assert_fail@plt+0x4c00>
   164c4:	b	16670 <__assert_fail@plt+0x4e70>
   164c8:	ldr	r8, [sp, #4]
   164cc:	ldr	r9, [sp]
   164d0:	mov	r6, #0
   164d4:	mov	r4, #0
   164d8:	add	r9, r9, #1
   164dc:	strb	r4, [sp, #148]	; 0x94
   164e0:	ldr	r0, [sp, #152]	; 0x98
   164e4:	ldr	r1, [sp, #156]	; 0x9c
   164e8:	add	r0, r0, r1
   164ec:	str	r0, [sp, #152]	; 0x98
   164f0:	add	r0, sp, #136	; 0x88
   164f4:	bl	16c7c <__assert_fail@plt+0x547c>
   164f8:	ldrb	r0, [sp, #160]	; 0xa0
   164fc:	ldr	r1, [sp, #20]
   16500:	cmp	r0, #0
   16504:	beq	1621c <__assert_fail@plt+0x4a1c>
   16508:	ldr	r0, [sp, #164]	; 0xa4
   1650c:	cmp	r0, #0
   16510:	bne	1621c <__assert_fail@plt+0x4a1c>
   16514:	b	16664 <__assert_fail@plt+0x4e64>
   16518:	ldrb	r5, [r6]
   1651c:	cmp	r5, #0
   16520:	beq	16660 <__assert_fail@plt+0x4e60>
   16524:	ldrb	r9, [sl]
   16528:	cmp	r9, #0
   1652c:	beq	16650 <__assert_fail@plt+0x4e50>
   16530:	mov	lr, #1
   16534:	mov	ip, #0
   16538:	mov	r3, r6
   1653c:	mov	r7, #0
   16540:	mov	r8, #0
   16544:	add	r0, r8, r8, lsl #2
   16548:	cmp	r7, r0
   1654c:	bcc	165a4 <__assert_fail@plt+0x4da4>
   16550:	tst	lr, #1
   16554:	beq	165a4 <__assert_fail@plt+0x4da4>
   16558:	cmp	r8, #10
   1655c:	bcc	165a4 <__assert_fail@plt+0x4da4>
   16560:	cmp	r3, #0
   16564:	beq	165e0 <__assert_fail@plt+0x4de0>
   16568:	sub	r1, r7, ip
   1656c:	mov	r0, r3
   16570:	str	r7, [sp, #20]
   16574:	mov	r7, r5
   16578:	mov	r4, lr
   1657c:	mov	r5, r3
   16580:	bl	116ec <strnlen@plt>
   16584:	mov	r3, r5
   16588:	mov	r5, r7
   1658c:	ldr	r7, [sp, #20]
   16590:	mov	lr, r4
   16594:	ldrb	r0, [r3, r0]!
   16598:	mov	ip, r7
   1659c:	cmp	r0, #0
   165a0:	beq	165e0 <__assert_fail@plt+0x4de0>
   165a4:	uxtb	r0, r9
   165a8:	cmp	r0, r5
   165ac:	bne	16624 <__assert_fail@plt+0x4e24>
   165b0:	mov	r0, #1
   165b4:	ldrb	r1, [r6, r0]
   165b8:	cmp	r1, #0
   165bc:	beq	16640 <__assert_fail@plt+0x4e40>
   165c0:	ldrb	r2, [sl, r0]
   165c4:	cmp	r2, #0
   165c8:	beq	16650 <__assert_fail@plt+0x4e50>
   165cc:	add	r0, r0, #1
   165d0:	cmp	r2, r1
   165d4:	beq	165b4 <__assert_fail@plt+0x4db4>
   165d8:	add	r7, r7, r0
   165dc:	b	16628 <__assert_fail@plt+0x4e28>
   165e0:	mov	r0, r6
   165e4:	mov	r4, ip
   165e8:	bl	11650 <strlen@plt>
   165ec:	mov	r2, r0
   165f0:	mov	r0, sl
   165f4:	mov	r1, r6
   165f8:	sub	r3, fp, #88	; 0x58
   165fc:	bl	16ae4 <__assert_fail@plt+0x52e4>
   16600:	cmp	r0, #0
   16604:	bne	16680 <__assert_fail@plt+0x4e80>
   16608:	ldrb	r9, [sl]
   1660c:	mov	lr, #0
   16610:	mov	r3, #0
   16614:	mov	ip, r4
   16618:	uxtb	r0, r9
   1661c:	cmp	r0, r5
   16620:	beq	165b0 <__assert_fail@plt+0x4db0>
   16624:	add	r7, r7, #1
   16628:	ldrb	r9, [sl, #1]!
   1662c:	add	r8, r8, #1
   16630:	mov	r4, #0
   16634:	cmp	r9, #0
   16638:	bne	16544 <__assert_fail@plt+0x4d44>
   1663c:	b	16664 <__assert_fail@plt+0x4e64>
   16640:	mov	r4, sl
   16644:	mov	r0, r4
   16648:	sub	sp, fp, #28
   1664c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16650:	mov	r4, #0
   16654:	mov	r0, r4
   16658:	sub	sp, fp, #28
   1665c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	mov	r4, sl
   16664:	mov	r0, r4
   16668:	sub	sp, fp, #28
   1666c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16670:	ldr	r4, [sp, #152]	; 0x98
   16674:	mov	r0, r4
   16678:	sub	sp, fp, #28
   1667c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16680:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16684:	mov	r0, r4
   16688:	sub	sp, fp, #28
   1668c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16690:	ldr	r4, [sp, #80]	; 0x50
   16694:	mov	r0, r4
   16698:	sub	sp, fp, #28
   1669c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a0:	bl	117d0 <abort@plt>
   166a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166a8:	add	fp, sp, #28
   166ac:	sub	sp, sp, #132	; 0x84
   166b0:	mov	r7, r0
   166b4:	mov	r0, r1
   166b8:	mov	r6, r2
   166bc:	mov	r4, r1
   166c0:	bl	1abf0 <__assert_fail@plt+0x93f0>
   166c4:	mov	sl, r0
   166c8:	movw	r0, #47662	; 0xba2e
   166cc:	mov	r5, #0
   166d0:	movt	r0, #744	; 0x2e8
   166d4:	cmp	sl, r0
   166d8:	bhi	1670c <__assert_fail@plt+0x4f0c>
   166dc:	mov	r0, #44	; 0x2c
   166e0:	mul	r0, sl, r0
   166e4:	cmp	r0, #4016	; 0xfb0
   166e8:	bhi	16718 <__assert_fail@plt+0x4f18>
   166ec:	add	r0, r0, #22
   166f0:	bic	r0, r0, #7
   166f4:	sub	r0, sp, r0
   166f8:	add	r1, r0, #15
   166fc:	bic	r9, r1, #15
   16700:	mov	sp, r0
   16704:	cmp	r9, #0
   16708:	bne	16728 <__assert_fail@plt+0x4f28>
   1670c:	mov	r0, r5
   16710:	sub	sp, fp, #28
   16714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16718:	bl	1aaa4 <__assert_fail@plt+0x92a4>
   1671c:	mov	r9, r0
   16720:	cmp	r9, #0
   16724:	beq	1670c <__assert_fail@plt+0x4f0c>
   16728:	str	r6, [fp, #-152]	; 0xffffff68
   1672c:	mov	r6, #0
   16730:	str	r7, [fp, #-156]	; 0xffffff64
   16734:	str	r6, [fp, #-80]	; 0xffffffb0
   16738:	str	r6, [fp, #-84]	; 0xffffffac
   1673c:	strb	r6, [fp, #-76]	; 0xffffffb4
   16740:	strb	r6, [fp, #-88]	; 0xffffffa8
   16744:	str	r4, [fp, #-72]	; 0xffffffb8
   16748:	sub	r4, fp, #88	; 0x58
   1674c:	mov	r0, r4
   16750:	bl	16c7c <__assert_fail@plt+0x547c>
   16754:	add	r0, sl, sl, lsl #2
   16758:	add	r8, r9, r0, lsl #3
   1675c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16760:	cmp	r0, #0
   16764:	beq	16774 <__assert_fail@plt+0x4f74>
   16768:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1676c:	cmp	r0, #0
   16770:	beq	167f4 <__assert_fail@plt+0x4ff4>
   16774:	add	r7, r9, #16
   16778:	add	r5, r4, #32
   1677c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16780:	cmp	r0, r5
   16784:	bne	1679c <__assert_fail@plt+0x4f9c>
   16788:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1678c:	mov	r0, r7
   16790:	mov	r1, r5
   16794:	bl	114ac <memcpy@plt>
   16798:	mov	r0, r7
   1679c:	str	r0, [r7, #-16]
   167a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167a4:	str	r0, [r7, #-12]
   167a8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   167ac:	strb	r0, [r7, #-8]
   167b0:	cmp	r0, #0
   167b4:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   167b8:	strne	r0, [r7, #-4]
   167bc:	strb	r6, [fp, #-76]	; 0xffffffb4
   167c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   167c8:	add	r0, r0, r1
   167cc:	str	r0, [fp, #-72]	; 0xffffffb8
   167d0:	mov	r0, r4
   167d4:	bl	16c7c <__assert_fail@plt+0x547c>
   167d8:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   167dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167e0:	add	r7, r7, #40	; 0x28
   167e4:	cmp	r1, #0
   167e8:	beq	1677c <__assert_fail@plt+0x4f7c>
   167ec:	cmp	r0, #0
   167f0:	bne	1677c <__assert_fail@plt+0x4f7c>
   167f4:	mov	r0, #1
   167f8:	cmp	sl, #3
   167fc:	str	sl, [fp, #-148]	; 0xffffff6c
   16800:	str	r0, [r8, #4]
   16804:	bcc	16900 <__assert_fail@plt+0x5100>
   16808:	mov	sl, #2
   1680c:	mov	r7, #0
   16810:	b	16830 <__assert_fail@plt+0x5030>
   16814:	mov	r7, #0
   16818:	mov	r0, sl
   1681c:	str	r0, [r8, sl, lsl #2]
   16820:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16824:	add	sl, sl, #1
   16828:	cmp	sl, r0
   1682c:	beq	16900 <__assert_fail@plt+0x5100>
   16830:	add	r0, sl, sl, lsl #2
   16834:	add	r0, r9, r0, lsl #3
   16838:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   1683c:	sub	r6, r0, #40	; 0x28
   16840:	sub	r4, r0, #36	; 0x24
   16844:	cmp	r1, #0
   16848:	beq	168b0 <__assert_fail@plt+0x50b0>
   1684c:	sub	r5, r0, #28
   16850:	add	r0, r7, r7, lsl #2
   16854:	add	r1, r9, r0, lsl #3
   16858:	ldrb	r2, [r1, #8]
   1685c:	cmp	r2, #0
   16860:	beq	16878 <__assert_fail@plt+0x5078>
   16864:	ldr	r0, [r1, #12]
   16868:	ldr	r1, [r5]
   1686c:	cmp	r1, r0
   16870:	bne	1689c <__assert_fail@plt+0x509c>
   16874:	b	168f4 <__assert_fail@plt+0x50f4>
   16878:	ldr	r1, [r1, #4]
   1687c:	ldr	r2, [r4]
   16880:	cmp	r2, r1
   16884:	bne	1689c <__assert_fail@plt+0x509c>
   16888:	ldr	r1, [r9, r0, lsl #3]
   1688c:	ldr	r0, [r6]
   16890:	bl	11638 <bcmp@plt>
   16894:	cmp	r0, #0
   16898:	beq	168f4 <__assert_fail@plt+0x50f4>
   1689c:	cmp	r7, #0
   168a0:	beq	16814 <__assert_fail@plt+0x5014>
   168a4:	ldr	r0, [r8, r7, lsl #2]
   168a8:	sub	r7, r7, r0
   168ac:	b	16850 <__assert_fail@plt+0x5050>
   168b0:	ldr	r4, [r4]
   168b4:	add	r0, r7, r7, lsl #2
   168b8:	add	r1, r9, r0, lsl #3
   168bc:	ldr	r1, [r1, #4]
   168c0:	cmp	r4, r1
   168c4:	bne	168e0 <__assert_fail@plt+0x50e0>
   168c8:	ldr	r1, [r9, r0, lsl #3]
   168cc:	ldr	r0, [r6]
   168d0:	mov	r2, r4
   168d4:	bl	11638 <bcmp@plt>
   168d8:	cmp	r0, #0
   168dc:	beq	168f4 <__assert_fail@plt+0x50f4>
   168e0:	cmp	r7, #0
   168e4:	beq	16814 <__assert_fail@plt+0x5014>
   168e8:	ldr	r0, [r8, r7, lsl #2]
   168ec:	sub	r7, r7, r0
   168f0:	b	168b4 <__assert_fail@plt+0x50b4>
   168f4:	add	r7, r7, #1
   168f8:	sub	r0, sl, r7
   168fc:	b	1681c <__assert_fail@plt+0x501c>
   16900:	ldr	r0, [fp, #-152]	; 0xffffff68
   16904:	mov	r6, #0
   16908:	str	r6, [r0]
   1690c:	ldr	r0, [fp, #-156]	; 0xffffff64
   16910:	str	r6, [fp, #-80]	; 0xffffffb0
   16914:	str	r6, [fp, #-84]	; 0xffffffac
   16918:	strb	r6, [fp, #-76]	; 0xffffffb4
   1691c:	strb	r6, [fp, #-88]	; 0xffffffa8
   16920:	str	r6, [fp, #-136]	; 0xffffff78
   16924:	str	r6, [fp, #-140]	; 0xffffff74
   16928:	str	r0, [fp, #-128]	; 0xffffff80
   1692c:	str	r0, [fp, #-72]	; 0xffffffb8
   16930:	sub	r0, fp, #144	; 0x90
   16934:	strb	r6, [fp, #-132]	; 0xffffff7c
   16938:	strb	r6, [fp, #-144]	; 0xffffff70
   1693c:	bl	16c7c <__assert_fail@plt+0x547c>
   16940:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16944:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16948:	cmp	r0, #0
   1694c:	bne	16958 <__assert_fail@plt+0x5158>
   16950:	cmp	r1, #0
   16954:	bne	16ac8 <__assert_fail@plt+0x52c8>
   16958:	clz	r1, r1
   1695c:	sub	r4, fp, #88	; 0x58
   16960:	mov	sl, #0
   16964:	lsr	r1, r1, #5
   16968:	add	r2, sl, sl, lsl #2
   1696c:	tst	r1, #1
   16970:	add	r3, r9, r2, lsl #3
   16974:	bne	1699c <__assert_fail@plt+0x519c>
   16978:	ldrb	r1, [r3, #8]
   1697c:	cmp	r1, #0
   16980:	beq	1699c <__assert_fail@plt+0x519c>
   16984:	ldr	r1, [r3, #12]
   16988:	cmp	r1, r0
   1698c:	bne	169c8 <__assert_fail@plt+0x51c8>
   16990:	ldr	r7, [fp, #-128]	; 0xffffff80
   16994:	ldr	r5, [fp, #-124]	; 0xffffff84
   16998:	b	16a24 <__assert_fail@plt+0x5224>
   1699c:	ldr	r5, [r3, #4]
   169a0:	ldr	r0, [fp, #-124]	; 0xffffff84
   169a4:	cmp	r5, r0
   169a8:	bne	169c8 <__assert_fail@plt+0x51c8>
   169ac:	ldr	r0, [r9, r2, lsl #3]
   169b0:	ldr	r7, [fp, #-128]	; 0xffffff80
   169b4:	mov	r2, r5
   169b8:	mov	r1, r7
   169bc:	bl	11638 <bcmp@plt>
   169c0:	cmp	r0, #0
   169c4:	beq	16a24 <__assert_fail@plt+0x5224>
   169c8:	cmp	sl, #0
   169cc:	beq	16a44 <__assert_fail@plt+0x5244>
   169d0:	ldr	r5, [r8, sl, lsl #2]
   169d4:	sub	sl, sl, r5
   169d8:	cmp	r5, #0
   169dc:	bne	16a00 <__assert_fail@plt+0x5200>
   169e0:	b	16a90 <__assert_fail@plt+0x5290>
   169e4:	strb	r6, [fp, #-76]	; 0xffffffb4
   169e8:	subs	r5, r5, #1
   169ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   169f0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   169f4:	add	r0, r0, r1
   169f8:	str	r0, [fp, #-72]	; 0xffffffb8
   169fc:	beq	16a90 <__assert_fail@plt+0x5290>
   16a00:	mov	r0, r4
   16a04:	bl	16c7c <__assert_fail@plt+0x547c>
   16a08:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16a0c:	cmp	r0, #0
   16a10:	beq	169e4 <__assert_fail@plt+0x51e4>
   16a14:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a18:	cmp	r0, #0
   16a1c:	bne	169e4 <__assert_fail@plt+0x51e4>
   16a20:	b	16ae0 <__assert_fail@plt+0x52e0>
   16a24:	add	r0, r7, r5
   16a28:	strb	r6, [fp, #-132]	; 0xffffff7c
   16a2c:	add	sl, sl, #1
   16a30:	str	r0, [fp, #-128]	; 0xffffff80
   16a34:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16a38:	cmp	sl, r0
   16a3c:	bne	16a90 <__assert_fail@plt+0x5290>
   16a40:	b	16abc <__assert_fail@plt+0x52bc>
   16a44:	mov	r0, r4
   16a48:	bl	16c7c <__assert_fail@plt+0x547c>
   16a4c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16a50:	cmp	r0, #0
   16a54:	beq	16a64 <__assert_fail@plt+0x5264>
   16a58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a5c:	cmp	r0, #0
   16a60:	beq	16ae0 <__assert_fail@plt+0x52e0>
   16a64:	mov	sl, #0
   16a68:	strb	sl, [fp, #-76]	; 0xffffffb4
   16a6c:	strb	sl, [fp, #-132]	; 0xffffff7c
   16a70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16a74:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16a78:	add	r0, r0, r1
   16a7c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16a80:	str	r0, [fp, #-72]	; 0xffffffb8
   16a84:	ldr	r0, [fp, #-128]	; 0xffffff80
   16a88:	add	r0, r0, r1
   16a8c:	str	r0, [fp, #-128]	; 0xffffff80
   16a90:	sub	r0, fp, #144	; 0x90
   16a94:	bl	16c7c <__assert_fail@plt+0x547c>
   16a98:	ldrb	r2, [fp, #-120]	; 0xffffff88
   16a9c:	clz	r0, r2
   16aa0:	lsr	r1, r0, #5
   16aa4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16aa8:	cmp	r0, #0
   16aac:	bne	16968 <__assert_fail@plt+0x5168>
   16ab0:	cmp	r2, #0
   16ab4:	beq	16968 <__assert_fail@plt+0x5168>
   16ab8:	b	16ac8 <__assert_fail@plt+0x52c8>
   16abc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ac0:	ldr	r1, [fp, #-152]	; 0xffffff68
   16ac4:	str	r0, [r1]
   16ac8:	mov	r0, r9
   16acc:	bl	1ab14 <__assert_fail@plt+0x9314>
   16ad0:	mov	r5, #1
   16ad4:	mov	r0, r5
   16ad8:	sub	sp, fp, #28
   16adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae0:	bl	117d0 <abort@plt>
   16ae4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ae8:	add	fp, sp, #24
   16aec:	mov	r4, #0
   16af0:	cmn	r2, #-536870911	; 0xe0000001
   16af4:	bhi	16c58 <__assert_fail@plt+0x5458>
   16af8:	mov	r7, r0
   16afc:	lsl	r0, r2, #2
   16b00:	mov	r8, r3
   16b04:	mov	r5, r2
   16b08:	mov	r6, r1
   16b0c:	cmp	r0, #4016	; 0xfb0
   16b10:	bhi	16c4c <__assert_fail@plt+0x544c>
   16b14:	add	r0, r0, #22
   16b18:	bic	r0, r0, #7
   16b1c:	sub	r1, sp, r0
   16b20:	add	r0, r1, #15
   16b24:	bic	r0, r0, #15
   16b28:	mov	sp, r1
   16b2c:	cmp	r0, #0
   16b30:	beq	16c58 <__assert_fail@plt+0x5458>
   16b34:	mov	r1, #1
   16b38:	cmp	r5, #3
   16b3c:	str	r1, [r0, #4]
   16b40:	bcc	16bb4 <__assert_fail@plt+0x53b4>
   16b44:	mov	r1, #2
   16b48:	mov	r2, #0
   16b4c:	b	16b68 <__assert_fail@plt+0x5368>
   16b50:	add	r2, r2, #1
   16b54:	sub	r3, r1, r2
   16b58:	str	r3, [r0, r1, lsl #2]
   16b5c:	add	r1, r1, #1
   16b60:	cmp	r1, r5
   16b64:	beq	16bb4 <__assert_fail@plt+0x53b4>
   16b68:	add	r3, r1, r6
   16b6c:	ldrb	r4, [r6, r2]
   16b70:	ldrb	r3, [r3, #-1]
   16b74:	cmp	r3, r4
   16b78:	beq	16b50 <__assert_fail@plt+0x5350>
   16b7c:	cmp	r2, #0
   16b80:	beq	16b9c <__assert_fail@plt+0x539c>
   16b84:	ldr	r4, [r0, r2, lsl #2]
   16b88:	sub	r2, r2, r4
   16b8c:	ldrb	r4, [r6, r2]
   16b90:	cmp	r3, r4
   16b94:	bne	16b7c <__assert_fail@plt+0x537c>
   16b98:	b	16b50 <__assert_fail@plt+0x5350>
   16b9c:	mov	r2, #0
   16ba0:	mov	r3, r1
   16ba4:	str	r3, [r0, r1, lsl #2]
   16ba8:	add	r1, r1, #1
   16bac:	cmp	r1, r5
   16bb0:	bne	16b68 <__assert_fail@plt+0x5368>
   16bb4:	mov	r1, #0
   16bb8:	str	r1, [r8]
   16bbc:	ldrb	r3, [r7]
   16bc0:	cmp	r3, #0
   16bc4:	beq	16c68 <__assert_fail@plt+0x5468>
   16bc8:	mov	r2, r7
   16bcc:	ldrb	r4, [r6, r1]
   16bd0:	uxtb	r3, r3
   16bd4:	cmp	r4, r3
   16bd8:	bne	16c28 <__assert_fail@plt+0x5428>
   16bdc:	b	16c08 <__assert_fail@plt+0x5408>
   16be0:	add	r7, r7, #1
   16be4:	add	r2, r2, #1
   16be8:	mov	r1, #0
   16bec:	ldrb	r3, [r7]
   16bf0:	cmp	r3, #0
   16bf4:	beq	16c68 <__assert_fail@plt+0x5468>
   16bf8:	ldrb	r4, [r6, r1]
   16bfc:	uxtb	r3, r3
   16c00:	cmp	r4, r3
   16c04:	bne	16c28 <__assert_fail@plt+0x5428>
   16c08:	add	r1, r1, #1
   16c0c:	cmp	r1, r5
   16c10:	beq	16c64 <__assert_fail@plt+0x5464>
   16c14:	add	r7, r7, #1
   16c18:	ldrb	r3, [r7]
   16c1c:	cmp	r3, #0
   16c20:	bne	16bf8 <__assert_fail@plt+0x53f8>
   16c24:	b	16c68 <__assert_fail@plt+0x5468>
   16c28:	cmp	r1, #0
   16c2c:	beq	16be0 <__assert_fail@plt+0x53e0>
   16c30:	ldr	r3, [r0, r1, lsl #2]
   16c34:	sub	r1, r1, r3
   16c38:	add	r2, r2, r3
   16c3c:	ldrb	r3, [r7]
   16c40:	cmp	r3, #0
   16c44:	bne	16bf8 <__assert_fail@plt+0x53f8>
   16c48:	b	16c68 <__assert_fail@plt+0x5468>
   16c4c:	bl	1aaa4 <__assert_fail@plt+0x92a4>
   16c50:	cmp	r0, #0
   16c54:	bne	16b34 <__assert_fail@plt+0x5334>
   16c58:	mov	r0, r4
   16c5c:	sub	sp, fp, #24
   16c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c64:	str	r2, [r8]
   16c68:	bl	1ab14 <__assert_fail@plt+0x9314>
   16c6c:	mov	r4, #1
   16c70:	mov	r0, r4
   16c74:	sub	sp, fp, #24
   16c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16c7c:	push	{r4, r5, r6, r7, fp, lr}
   16c80:	add	fp, sp, #16
   16c84:	mov	r4, r0
   16c88:	ldrb	r0, [r0, #12]
   16c8c:	cmp	r0, #0
   16c90:	popne	{r4, r5, r6, r7, fp, pc}
   16c94:	ldrb	r0, [r4]
   16c98:	ldr	r5, [r4, #16]
   16c9c:	cmp	r0, #0
   16ca0:	beq	16d08 <__assert_fail@plt+0x5508>
   16ca4:	bl	11578 <__ctype_get_mb_cur_max@plt>
   16ca8:	mov	r1, r0
   16cac:	mov	r0, r5
   16cb0:	bl	18f0c <__assert_fail@plt+0x770c>
   16cb4:	add	r6, r4, #4
   16cb8:	add	r7, r4, #28
   16cbc:	mov	r2, r0
   16cc0:	mov	r1, r5
   16cc4:	mov	r0, r7
   16cc8:	mov	r3, r6
   16ccc:	bl	1a888 <__assert_fail@plt+0x9088>
   16cd0:	cmn	r0, #2
   16cd4:	str	r0, [r4, #20]
   16cd8:	beq	16d94 <__assert_fail@plt+0x5594>
   16cdc:	cmp	r0, #0
   16ce0:	beq	16d48 <__assert_fail@plt+0x5548>
   16ce4:	cmn	r0, #1
   16ce8:	bne	16d6c <__assert_fail@plt+0x556c>
   16cec:	mov	r0, #0
   16cf0:	strb	r0, [r4, #24]
   16cf4:	mov	r0, #1
   16cf8:	str	r0, [r4, #20]
   16cfc:	mov	r0, #1
   16d00:	strb	r0, [r4, #12]
   16d04:	pop	{r4, r5, r6, r7, fp, pc}
   16d08:	ldrb	r0, [r5]
   16d0c:	movw	r2, #53832	; 0xd248
   16d10:	movt	r2, #1
   16d14:	ubfx	r1, r0, #5, #3
   16d18:	ldr	r1, [r2, r1, lsl #2]
   16d1c:	and	r2, r0, #31
   16d20:	mov	r0, #1
   16d24:	tst	r1, r0, lsl r2
   16d28:	beq	16db4 <__assert_fail@plt+0x55b4>
   16d2c:	str	r0, [r4, #20]
   16d30:	ldrb	r1, [r5]
   16d34:	strb	r0, [r4, #24]
   16d38:	str	r1, [r4, #28]
   16d3c:	mov	r0, #1
   16d40:	strb	r0, [r4, #12]
   16d44:	pop	{r4, r5, r6, r7, fp, pc}
   16d48:	mov	r0, #1
   16d4c:	str	r0, [r4, #20]
   16d50:	ldr	r0, [r4, #16]
   16d54:	ldrb	r0, [r0]
   16d58:	cmp	r0, #0
   16d5c:	bne	16dd0 <__assert_fail@plt+0x55d0>
   16d60:	ldr	r0, [r7]
   16d64:	cmp	r0, #0
   16d68:	bne	16df0 <__assert_fail@plt+0x55f0>
   16d6c:	mov	r0, #1
   16d70:	strb	r0, [r4, #24]
   16d74:	mov	r0, r6
   16d78:	bl	114c4 <mbsinit@plt>
   16d7c:	cmp	r0, #0
   16d80:	movne	r0, #0
   16d84:	strbne	r0, [r4]
   16d88:	mov	r0, #1
   16d8c:	strb	r0, [r4, #12]
   16d90:	pop	{r4, r5, r6, r7, fp, pc}
   16d94:	ldr	r0, [r4, #16]
   16d98:	bl	11650 <strlen@plt>
   16d9c:	mov	r1, #0
   16da0:	strb	r1, [r4, #24]
   16da4:	str	r0, [r4, #20]
   16da8:	mov	r0, #1
   16dac:	strb	r0, [r4, #12]
   16db0:	pop	{r4, r5, r6, r7, fp, pc}
   16db4:	add	r0, r4, #4
   16db8:	bl	114c4 <mbsinit@plt>
   16dbc:	cmp	r0, #0
   16dc0:	beq	16e10 <__assert_fail@plt+0x5610>
   16dc4:	mov	r0, #1
   16dc8:	strb	r0, [r4]
   16dcc:	b	16ca4 <__assert_fail@plt+0x54a4>
   16dd0:	movw	r0, #52620	; 0xcd8c
   16dd4:	movw	r1, #52560	; 0xcd50
   16dd8:	movw	r3, #52572	; 0xcd5c
   16ddc:	mov	r2, #171	; 0xab
   16de0:	movt	r0, #1
   16de4:	movt	r1, #1
   16de8:	movt	r3, #1
   16dec:	bl	11800 <__assert_fail@plt>
   16df0:	movw	r0, #52643	; 0xcda3
   16df4:	movw	r1, #52560	; 0xcd50
   16df8:	movw	r3, #52572	; 0xcd5c
   16dfc:	mov	r2, #172	; 0xac
   16e00:	movt	r0, #1
   16e04:	movt	r1, #1
   16e08:	movt	r3, #1
   16e0c:	bl	11800 <__assert_fail@plt>
   16e10:	movw	r0, #52537	; 0xcd39
   16e14:	movw	r1, #52560	; 0xcd50
   16e18:	movw	r3, #52572	; 0xcd5c
   16e1c:	mov	r2, #143	; 0x8f
   16e20:	movt	r0, #1
   16e24:	movt	r1, #1
   16e28:	movt	r3, #1
   16e2c:	bl	11800 <__assert_fail@plt>
   16e30:	ldr	r2, [r0, #16]
   16e34:	add	r1, r2, r1
   16e38:	str	r1, [r0, #16]
   16e3c:	bx	lr
   16e40:	push	{r4, r5, r6, sl, fp, lr}
   16e44:	add	fp, sp, #16
   16e48:	mov	r5, r1
   16e4c:	ldrb	r1, [r1]
   16e50:	mov	r4, r0
   16e54:	strb	r1, [r0], #4
   16e58:	cmp	r1, #0
   16e5c:	beq	16e6c <__assert_fail@plt+0x566c>
   16e60:	ldmib	r5, {r1, r2}
   16e64:	stm	r0, {r1, r2}
   16e68:	b	16e78 <__assert_fail@plt+0x5678>
   16e6c:	mov	r1, #0
   16e70:	str	r1, [r0]
   16e74:	str	r1, [r0, #4]
   16e78:	ldrb	r0, [r5, #12]
   16e7c:	strb	r0, [r4, #12]
   16e80:	add	r0, r5, #32
   16e84:	ldr	r1, [r5, #16]
   16e88:	cmp	r1, r0
   16e8c:	beq	16e98 <__assert_fail@plt+0x5698>
   16e90:	mov	r6, r1
   16e94:	b	16ea8 <__assert_fail@plt+0x56a8>
   16e98:	ldr	r2, [r5, #20]
   16e9c:	add	r6, r4, #32
   16ea0:	mov	r0, r6
   16ea4:	bl	114ac <memcpy@plt>
   16ea8:	str	r6, [r4, #16]
   16eac:	ldr	r0, [r5, #20]
   16eb0:	str	r0, [r4, #20]
   16eb4:	ldrb	r0, [r5, #24]
   16eb8:	strb	r0, [r4, #24]
   16ebc:	cmp	r0, #0
   16ec0:	ldrne	r0, [r5, #28]
   16ec4:	strne	r0, [r4, #28]
   16ec8:	pop	{r4, r5, r6, sl, fp, pc}
   16ecc:	push	{r4, r5, fp, lr}
   16ed0:	add	fp, sp, #8
   16ed4:	cmp	r0, #0
   16ed8:	beq	16f6c <__assert_fail@plt+0x576c>
   16edc:	mov	r1, #47	; 0x2f
   16ee0:	mov	r4, r0
   16ee4:	bl	11740 <strrchr@plt>
   16ee8:	cmp	r0, #0
   16eec:	mov	r5, r4
   16ef0:	addne	r5, r0, #1
   16ef4:	sub	r0, r5, r4
   16ef8:	cmp	r0, #7
   16efc:	blt	16f50 <__assert_fail@plt+0x5750>
   16f00:	movw	r1, #52717	; 0xcded
   16f04:	sub	r0, r5, #7
   16f08:	mov	r2, #7
   16f0c:	movt	r1, #1
   16f10:	bl	117c4 <strncmp@plt>
   16f14:	cmp	r0, #0
   16f18:	bne	16f50 <__assert_fail@plt+0x5750>
   16f1c:	movw	r1, #52725	; 0xcdf5
   16f20:	mov	r0, r5
   16f24:	mov	r2, #3
   16f28:	movt	r1, #1
   16f2c:	bl	117c4 <strncmp@plt>
   16f30:	cmp	r0, #0
   16f34:	beq	16f40 <__assert_fail@plt+0x5740>
   16f38:	mov	r4, r5
   16f3c:	b	16f50 <__assert_fail@plt+0x5750>
   16f40:	movw	r0, #57784	; 0xe1b8
   16f44:	add	r4, r5, #3
   16f48:	movt	r0, #2
   16f4c:	str	r4, [r0]
   16f50:	movw	r0, #57792	; 0xe1c0
   16f54:	movt	r0, #2
   16f58:	str	r4, [r0]
   16f5c:	movw	r0, #58012	; 0xe29c
   16f60:	movt	r0, #2
   16f64:	str	r4, [r0]
   16f68:	pop	{r4, r5, fp, pc}
   16f6c:	movw	r0, #57808	; 0xe1d0
   16f70:	mov	r1, #55	; 0x37
   16f74:	mov	r2, #1
   16f78:	movt	r0, #2
   16f7c:	ldr	r3, [r0]
   16f80:	movw	r0, #52661	; 0xcdb5
   16f84:	movt	r0, #1
   16f88:	bl	11554 <fwrite@plt>
   16f8c:	bl	117d0 <abort@plt>
   16f90:	push	{r4, r5, r6, sl, fp, lr}
   16f94:	add	fp, sp, #16
   16f98:	mov	r4, r0
   16f9c:	movw	r0, #58016	; 0xe2a0
   16fa0:	movt	r0, #2
   16fa4:	cmp	r4, #0
   16fa8:	moveq	r4, r0
   16fac:	bl	11680 <__errno_location@plt>
   16fb0:	ldr	r6, [r0]
   16fb4:	mov	r5, r0
   16fb8:	mov	r0, r4
   16fbc:	mov	r1, #48	; 0x30
   16fc0:	bl	19b18 <__assert_fail@plt+0x8318>
   16fc4:	str	r6, [r5]
   16fc8:	pop	{r4, r5, r6, sl, fp, pc}
   16fcc:	movw	r1, #58016	; 0xe2a0
   16fd0:	cmp	r0, #0
   16fd4:	movt	r1, #2
   16fd8:	movne	r1, r0
   16fdc:	ldr	r0, [r1]
   16fe0:	bx	lr
   16fe4:	movw	r2, #58016	; 0xe2a0
   16fe8:	cmp	r0, #0
   16fec:	movt	r2, #2
   16ff0:	movne	r2, r0
   16ff4:	str	r1, [r2]
   16ff8:	bx	lr
   16ffc:	movw	r3, #58016	; 0xe2a0
   17000:	cmp	r0, #0
   17004:	and	r2, r2, #1
   17008:	movt	r3, #2
   1700c:	movne	r3, r0
   17010:	ubfx	r0, r1, #5, #3
   17014:	and	r1, r1, #31
   17018:	add	ip, r3, r0, lsl #2
   1701c:	mov	r0, #1
   17020:	ldr	r3, [ip, #8]
   17024:	and	r0, r0, r3, lsr r1
   17028:	eor	r2, r0, r2
   1702c:	eor	r1, r3, r2, lsl r1
   17030:	str	r1, [ip, #8]
   17034:	bx	lr
   17038:	movw	r2, #58016	; 0xe2a0
   1703c:	cmp	r0, #0
   17040:	movt	r2, #2
   17044:	movne	r2, r0
   17048:	ldr	r0, [r2, #4]
   1704c:	str	r1, [r2, #4]
   17050:	bx	lr
   17054:	push	{fp, lr}
   17058:	mov	fp, sp
   1705c:	movw	r3, #58016	; 0xe2a0
   17060:	cmp	r0, #0
   17064:	movt	r3, #2
   17068:	movne	r3, r0
   1706c:	cmp	r1, #0
   17070:	mov	r0, #10
   17074:	cmpne	r2, #0
   17078:	str	r0, [r3]
   1707c:	bne	17084 <__assert_fail@plt+0x5884>
   17080:	bl	117d0 <abort@plt>
   17084:	str	r1, [r3, #40]	; 0x28
   17088:	str	r2, [r3, #44]	; 0x2c
   1708c:	pop	{fp, pc}
   17090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17094:	add	fp, sp, #28
   17098:	sub	sp, sp, #20
   1709c:	mov	r7, r0
   170a0:	ldr	r0, [fp, #8]
   170a4:	movw	r5, #58016	; 0xe2a0
   170a8:	mov	r8, r3
   170ac:	mov	r9, r2
   170b0:	mov	sl, r1
   170b4:	movt	r5, #2
   170b8:	cmp	r0, #0
   170bc:	movne	r5, r0
   170c0:	bl	11680 <__errno_location@plt>
   170c4:	ldr	r2, [r5, #40]	; 0x28
   170c8:	ldr	r3, [r5, #44]	; 0x2c
   170cc:	mov	r4, r0
   170d0:	ldm	r5, {r0, r1}
   170d4:	add	r5, r5, #8
   170d8:	ldr	r6, [r4]
   170dc:	stm	sp, {r0, r1, r5}
   170e0:	mov	r0, r7
   170e4:	mov	r1, sl
   170e8:	str	r2, [sp, #12]
   170ec:	str	r3, [sp, #16]
   170f0:	mov	r2, r9
   170f4:	mov	r3, r8
   170f8:	bl	17108 <__assert_fail@plt+0x5908>
   170fc:	str	r6, [r4]
   17100:	sub	sp, fp, #28
   17104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1710c:	add	fp, sp, #28
   17110:	sub	sp, sp, #156	; 0x9c
   17114:	str	r0, [fp, #-84]	; 0xffffffac
   17118:	add	r0, r2, #1
   1711c:	mov	r6, r1
   17120:	mov	r7, r3
   17124:	str	r2, [fp, #-80]	; 0xffffffb0
   17128:	str	r0, [sp, #80]	; 0x50
   1712c:	ldr	r0, [fp, #12]
   17130:	and	r1, r0, #1
   17134:	str	r1, [sp, #36]	; 0x24
   17138:	and	r1, r0, #4
   1713c:	str	r1, [sp, #32]
   17140:	ubfx	r8, r0, #1, #1
   17144:	bl	11578 <__ctype_get_mb_cur_max@plt>
   17148:	str	r0, [sp, #40]	; 0x28
   1714c:	ldr	r0, [fp, #24]
   17150:	ldr	r4, [fp, #8]
   17154:	mov	r1, #0
   17158:	str	r1, [fp, #-52]	; 0xffffffcc
   1715c:	mov	r1, #0
   17160:	str	r1, [sp, #60]	; 0x3c
   17164:	mov	r1, #1
   17168:	str	r1, [sp, #84]	; 0x54
   1716c:	str	r0, [sp, #76]	; 0x4c
   17170:	ldr	r0, [fp, #20]
   17174:	str	r0, [sp, #72]	; 0x48
   17178:	mov	r0, #0
   1717c:	str	r0, [sp, #56]	; 0x38
   17180:	mov	r0, #0
   17184:	str	r0, [fp, #-88]	; 0xffffffa8
   17188:	mov	r0, #0
   1718c:	str	r0, [fp, #-72]	; 0xffffffb8
   17190:	mov	r0, #0
   17194:	cmp	r4, #10
   17198:	bhi	184b4 <__assert_fail@plt+0x6cb4>
   1719c:	add	r1, pc, #24
   171a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   171a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   171a8:	mov	r5, r6
   171ac:	mov	r9, #0
   171b0:	mov	r2, #1
   171b4:	mov	r3, #0
   171b8:	ldr	pc, [r1, r4, lsl #2]
   171bc:	andeq	r7, r1, r4, lsl #5
   171c0:	andeq	r7, r1, r0, asr #5
   171c4:	muleq	r1, r4, r2
   171c8:	andeq	r7, r1, ip, ror r2
   171cc:			; <UNDEFINED> instruction: 0x000172b4
   171d0:	andeq	r7, r1, r8, lsl r3
   171d4:	andeq	r7, r1, r4, lsr #5
   171d8:	muleq	r1, r0, r5
   171dc:	andeq	r7, r1, r8, ror #3
   171e0:	andeq	r7, r1, r8, ror #3
   171e4:	andeq	r7, r1, r0, lsr #8
   171e8:	movw	r6, #52807	; 0xce47
   171ec:	mov	r0, #0
   171f0:	mov	r2, #5
   171f4:	movt	r6, #1
   171f8:	mov	r1, r6
   171fc:	bl	114dc <dcgettext@plt>
   17200:	cmp	r0, r6
   17204:	str	r0, [sp, #72]	; 0x48
   17208:	bne	173f8 <__assert_fail@plt+0x5bf8>
   1720c:	bl	1aa6c <__assert_fail@plt+0x926c>
   17210:	ldrb	r1, [r0]
   17214:	and	r1, r1, #223	; 0xdf
   17218:	cmp	r1, #71	; 0x47
   1721c:	beq	17378 <__assert_fail@plt+0x5b78>
   17220:	cmp	r1, #85	; 0x55
   17224:	bne	173dc <__assert_fail@plt+0x5bdc>
   17228:	ldrb	r1, [r0, #1]
   1722c:	and	r1, r1, #223	; 0xdf
   17230:	cmp	r1, #84	; 0x54
   17234:	bne	173dc <__assert_fail@plt+0x5bdc>
   17238:	ldrb	r1, [r0, #2]
   1723c:	and	r1, r1, #223	; 0xdf
   17240:	cmp	r1, #70	; 0x46
   17244:	bne	173dc <__assert_fail@plt+0x5bdc>
   17248:	ldrb	r1, [r0, #3]
   1724c:	cmp	r1, #45	; 0x2d
   17250:	bne	173dc <__assert_fail@plt+0x5bdc>
   17254:	ldrb	r1, [r0, #4]
   17258:	cmp	r1, #56	; 0x38
   1725c:	bne	173dc <__assert_fail@plt+0x5bdc>
   17260:	ldrb	r0, [r0, #5]
   17264:	cmp	r0, #0
   17268:	movw	r0, #52809	; 0xce49
   1726c:	movt	r0, #1
   17270:	str	r0, [sp, #72]	; 0x48
   17274:	bne	173dc <__assert_fail@plt+0x5bdc>
   17278:	b	173f8 <__assert_fail@plt+0x5bf8>
   1727c:	mov	r0, #1
   17280:	b	172c0 <__assert_fail@plt+0x5ac0>
   17284:	mov	r4, #0
   17288:	mov	r9, #0
   1728c:	mov	r2, r0
   17290:	b	17310 <__assert_fail@plt+0x5b10>
   17294:	tst	r8, #1
   17298:	bne	172c0 <__assert_fail@plt+0x5ac0>
   1729c:	mov	r2, r0
   172a0:	b	172e8 <__assert_fail@plt+0x5ae8>
   172a4:	mov	r0, #1
   172a8:	mov	r9, #0
   172ac:	mov	r4, #5
   172b0:	b	1732c <__assert_fail@plt+0x5b2c>
   172b4:	mov	r2, #1
   172b8:	tst	r8, #1
   172bc:	beq	172e8 <__assert_fail@plt+0x5ae8>
   172c0:	mov	r1, #1
   172c4:	mov	r9, #0
   172c8:	mov	r4, #2
   172cc:	mov	r2, r0
   172d0:	mov	r3, #1
   172d4:	str	r1, [fp, #-72]	; 0xffffffb8
   172d8:	movw	r1, #52641	; 0xcda1
   172dc:	movt	r1, #1
   172e0:	str	r1, [fp, #-88]	; 0xffffffa8
   172e4:	b	17590 <__assert_fail@plt+0x5d90>
   172e8:	cmp	r5, #0
   172ec:	mov	r9, #1
   172f0:	mov	r4, #2
   172f4:	movne	r0, #39	; 0x27
   172f8:	strbne	r0, [ip]
   172fc:	movw	r0, #52641	; 0xcda1
   17300:	movt	r0, #1
   17304:	str	r0, [fp, #-88]	; 0xffffffa8
   17308:	mov	r0, #1
   1730c:	str	r0, [fp, #-72]	; 0xffffffb8
   17310:	mov	r3, #0
   17314:	b	17590 <__assert_fail@plt+0x5d90>
   17318:	mov	r4, #5
   1731c:	tst	r8, #1
   17320:	beq	17348 <__assert_fail@plt+0x5b48>
   17324:	mov	r0, #1
   17328:	mov	r9, #0
   1732c:	str	r0, [fp, #-72]	; 0xffffffb8
   17330:	movw	r0, #52805	; 0xce45
   17334:	mov	r2, #1
   17338:	mov	r3, #1
   1733c:	movt	r0, #1
   17340:	str	r0, [fp, #-88]	; 0xffffffa8
   17344:	b	17590 <__assert_fail@plt+0x5d90>
   17348:	cmp	r5, #0
   1734c:	mov	r3, #0
   17350:	mov	r9, #1
   17354:	mov	r2, #1
   17358:	movne	r0, #34	; 0x22
   1735c:	strbne	r0, [ip]
   17360:	movw	r0, #52805	; 0xce45
   17364:	movt	r0, #1
   17368:	str	r0, [fp, #-88]	; 0xffffffa8
   1736c:	mov	r0, #1
   17370:	str	r0, [fp, #-72]	; 0xffffffb8
   17374:	b	17590 <__assert_fail@plt+0x5d90>
   17378:	ldrb	r1, [r0, #1]
   1737c:	and	r1, r1, #223	; 0xdf
   17380:	cmp	r1, #66	; 0x42
   17384:	bne	173dc <__assert_fail@plt+0x5bdc>
   17388:	ldrb	r1, [r0, #2]
   1738c:	cmp	r1, #49	; 0x31
   17390:	bne	173dc <__assert_fail@plt+0x5bdc>
   17394:	ldrb	r1, [r0, #3]
   17398:	cmp	r1, #56	; 0x38
   1739c:	bne	173dc <__assert_fail@plt+0x5bdc>
   173a0:	ldrb	r1, [r0, #4]
   173a4:	cmp	r1, #48	; 0x30
   173a8:	bne	173dc <__assert_fail@plt+0x5bdc>
   173ac:	ldrb	r1, [r0, #5]
   173b0:	cmp	r1, #51	; 0x33
   173b4:	bne	173dc <__assert_fail@plt+0x5bdc>
   173b8:	ldrb	r1, [r0, #6]
   173bc:	cmp	r1, #48	; 0x30
   173c0:	bne	173dc <__assert_fail@plt+0x5bdc>
   173c4:	ldrb	r0, [r0, #7]
   173c8:	cmp	r0, #0
   173cc:	movw	r0, #52817	; 0xce51
   173d0:	movt	r0, #1
   173d4:	str	r0, [sp, #72]	; 0x48
   173d8:	beq	173f8 <__assert_fail@plt+0x5bf8>
   173dc:	movw	r1, #52805	; 0xce45
   173e0:	movw	r0, #52641	; 0xcda1
   173e4:	cmp	r4, #9
   173e8:	movt	r1, #1
   173ec:	movt	r0, #1
   173f0:	moveq	r0, r1
   173f4:	str	r0, [sp, #72]	; 0x48
   173f8:	movw	r6, #52641	; 0xcda1
   173fc:	mov	r0, #0
   17400:	mov	r2, #5
   17404:	movt	r6, #1
   17408:	mov	r1, r6
   1740c:	bl	114dc <dcgettext@plt>
   17410:	cmp	r0, r6
   17414:	str	r0, [sp, #76]	; 0x4c
   17418:	beq	17464 <__assert_fail@plt+0x5c64>
   1741c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17420:	mov	r9, #0
   17424:	tst	r8, #1
   17428:	bne	1756c <__assert_fail@plt+0x5d6c>
   1742c:	ldr	r0, [sp, #72]	; 0x48
   17430:	ldrb	r0, [r0]
   17434:	cmp	r0, #0
   17438:	beq	1756c <__assert_fail@plt+0x5d6c>
   1743c:	ldr	r1, [sp, #72]	; 0x48
   17440:	mov	r9, #0
   17444:	add	r1, r1, #1
   17448:	cmp	r9, r5
   1744c:	strbcc	r0, [ip, r9]
   17450:	ldrb	r0, [r1, r9]
   17454:	add	r9, r9, #1
   17458:	cmp	r0, #0
   1745c:	bne	17448 <__assert_fail@plt+0x5c48>
   17460:	b	1756c <__assert_fail@plt+0x5d6c>
   17464:	bl	1aa6c <__assert_fail@plt+0x926c>
   17468:	ldrb	r1, [r0]
   1746c:	and	r1, r1, #223	; 0xdf
   17470:	cmp	r1, #71	; 0x47
   17474:	beq	174e4 <__assert_fail@plt+0x5ce4>
   17478:	ldr	ip, [fp, #-84]	; 0xffffffac
   1747c:	cmp	r1, #85	; 0x55
   17480:	bne	17540 <__assert_fail@plt+0x5d40>
   17484:	ldrb	r1, [r0, #1]
   17488:	and	r1, r1, #223	; 0xdf
   1748c:	cmp	r1, #84	; 0x54
   17490:	bne	17540 <__assert_fail@plt+0x5d40>
   17494:	ldrb	r1, [r0, #2]
   17498:	and	r1, r1, #223	; 0xdf
   1749c:	cmp	r1, #70	; 0x46
   174a0:	bne	17540 <__assert_fail@plt+0x5d40>
   174a4:	ldrb	r1, [r0, #3]
   174a8:	cmp	r1, #45	; 0x2d
   174ac:	bne	17540 <__assert_fail@plt+0x5d40>
   174b0:	ldrb	r1, [r0, #4]
   174b4:	cmp	r1, #56	; 0x38
   174b8:	bne	17540 <__assert_fail@plt+0x5d40>
   174bc:	ldrb	r0, [r0, #5]
   174c0:	cmp	r0, #0
   174c4:	bne	17540 <__assert_fail@plt+0x5d40>
   174c8:	movw	r0, #52813	; 0xce4d
   174cc:	movt	r0, #1
   174d0:	str	r0, [sp, #76]	; 0x4c
   174d4:	mov	r9, #0
   174d8:	tst	r8, #1
   174dc:	beq	1742c <__assert_fail@plt+0x5c2c>
   174e0:	b	1756c <__assert_fail@plt+0x5d6c>
   174e4:	ldrb	r1, [r0, #1]
   174e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   174ec:	and	r1, r1, #223	; 0xdf
   174f0:	cmp	r1, #66	; 0x42
   174f4:	bne	17540 <__assert_fail@plt+0x5d40>
   174f8:	ldrb	r1, [r0, #2]
   174fc:	cmp	r1, #49	; 0x31
   17500:	bne	17540 <__assert_fail@plt+0x5d40>
   17504:	ldrb	r1, [r0, #3]
   17508:	cmp	r1, #56	; 0x38
   1750c:	bne	17540 <__assert_fail@plt+0x5d40>
   17510:	ldrb	r1, [r0, #4]
   17514:	cmp	r1, #48	; 0x30
   17518:	bne	17540 <__assert_fail@plt+0x5d40>
   1751c:	ldrb	r1, [r0, #5]
   17520:	cmp	r1, #51	; 0x33
   17524:	bne	17540 <__assert_fail@plt+0x5d40>
   17528:	ldrb	r1, [r0, #6]
   1752c:	cmp	r1, #48	; 0x30
   17530:	bne	17540 <__assert_fail@plt+0x5d40>
   17534:	ldrb	r0, [r0, #7]
   17538:	cmp	r0, #0
   1753c:	beq	18354 <__assert_fail@plt+0x6b54>
   17540:	movw	r0, #52641	; 0xcda1
   17544:	cmp	r4, #9
   17548:	movt	r0, #1
   1754c:	mov	r1, r0
   17550:	movw	r0, #52805	; 0xce45
   17554:	movt	r0, #1
   17558:	moveq	r1, r0
   1755c:	str	r1, [sp, #76]	; 0x4c
   17560:	mov	r9, #0
   17564:	tst	r8, #1
   17568:	beq	1742c <__assert_fail@plt+0x5c2c>
   1756c:	ldr	r6, [sp, #76]	; 0x4c
   17570:	mov	r0, r6
   17574:	bl	11650 <strlen@plt>
   17578:	ldr	ip, [fp, #-84]	; 0xffffffac
   1757c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17580:	str	r0, [fp, #-72]	; 0xffffffb8
   17584:	str	r6, [fp, #-88]	; 0xffffffa8
   17588:	mov	r2, #1
   1758c:	mov	r3, r8
   17590:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17594:	str	r4, [fp, #-64]	; 0xffffffc0
   17598:	mov	sl, #0
   1759c:	str	r3, [fp, #-76]	; 0xffffffb4
   175a0:	str	r2, [sp, #88]	; 0x58
   175a4:	cmp	r0, #0
   175a8:	movwne	r0, #1
   175ac:	and	r1, r0, r3
   175b0:	and	r1, r2, r1
   175b4:	str	r1, [sp, #48]	; 0x30
   175b8:	sub	r1, r4, #2
   175bc:	clz	r1, r1
   175c0:	lsr	r1, r1, #5
   175c4:	and	r1, r1, r3
   175c8:	str	r1, [sp, #44]	; 0x2c
   175cc:	subs	r1, r4, #2
   175d0:	eor	r4, r3, #1
   175d4:	movwne	r1, #1
   175d8:	str	r4, [sp, #92]	; 0x5c
   175dc:	orr	r4, r1, r4
   175e0:	and	r1, r1, r2
   175e4:	and	r0, r0, r1
   175e8:	str	r4, [sp, #64]	; 0x40
   175ec:	ldr	r4, [sp, #84]	; 0x54
   175f0:	str	r0, [fp, #-60]	; 0xffffffc4
   175f4:	orr	r0, r1, r3
   175f8:	ldr	r1, [fp, #16]
   175fc:	eor	r0, r0, #1
   17600:	clz	r1, r1
   17604:	lsr	r1, r1, #5
   17608:	orr	r0, r1, r0
   1760c:	str	r0, [fp, #-68]	; 0xffffffbc
   17610:	eor	r0, r2, #1
   17614:	str	r0, [sp, #52]	; 0x34
   17618:	cmn	r7, #1
   1761c:	beq	1762c <__assert_fail@plt+0x5e2c>
   17620:	cmp	sl, r7
   17624:	bne	17638 <__assert_fail@plt+0x5e38>
   17628:	b	182cc <__assert_fail@plt+0x6acc>
   1762c:	ldrb	r0, [lr, sl]
   17630:	cmp	r0, #0
   17634:	beq	182d4 <__assert_fail@plt+0x6ad4>
   17638:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1763c:	cmp	r0, #0
   17640:	beq	176a0 <__assert_fail@plt+0x5ea0>
   17644:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17648:	mov	r6, r5
   1764c:	add	r5, sl, r0
   17650:	cmp	r0, #2
   17654:	bcc	176c0 <__assert_fail@plt+0x5ec0>
   17658:	mov	r0, #0
   1765c:	cmn	r7, #1
   17660:	str	r0, [fp, #-56]	; 0xffffffc8
   17664:	bne	1767c <__assert_fail@plt+0x5e7c>
   17668:	mov	r0, lr
   1766c:	bl	11650 <strlen@plt>
   17670:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17674:	ldr	ip, [fp, #-84]	; 0xffffffac
   17678:	mov	r7, r0
   1767c:	cmp	r5, r7
   17680:	bls	176d0 <__assert_fail@plt+0x5ed0>
   17684:	mov	r0, #0
   17688:	mov	r5, r6
   1768c:	str	r0, [fp, #-48]	; 0xffffffd0
   17690:	ldrb	r6, [lr, sl]
   17694:	cmp	r6, #126	; 0x7e
   17698:	bls	17720 <__assert_fail@plt+0x5f20>
   1769c:	b	17c7c <__assert_fail@plt+0x647c>
   176a0:	mov	r0, #0
   176a4:	str	r0, [fp, #-56]	; 0xffffffc8
   176a8:	mov	r0, #0
   176ac:	str	r0, [fp, #-48]	; 0xffffffd0
   176b0:	ldrb	r6, [lr, sl]
   176b4:	cmp	r6, #126	; 0x7e
   176b8:	bls	17720 <__assert_fail@plt+0x5f20>
   176bc:	b	17c7c <__assert_fail@plt+0x647c>
   176c0:	mov	r0, #0
   176c4:	str	r0, [fp, #-56]	; 0xffffffc8
   176c8:	cmp	r5, r7
   176cc:	bhi	17684 <__assert_fail@plt+0x5e84>
   176d0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   176d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   176d8:	add	r0, lr, sl
   176dc:	bl	11638 <bcmp@plt>
   176e0:	ldr	r2, [sp, #92]	; 0x5c
   176e4:	cmp	r0, #0
   176e8:	mov	r1, r0
   176ec:	mov	r5, r6
   176f0:	movwne	r1, #1
   176f4:	orr	r1, r1, r2
   176f8:	tst	r1, #1
   176fc:	beq	18394 <__assert_fail@plt+0x6b94>
   17700:	ldr	ip, [fp, #-84]	; 0xffffffac
   17704:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17708:	clz	r0, r0
   1770c:	lsr	r0, r0, #5
   17710:	str	r0, [fp, #-48]	; 0xffffffd0
   17714:	ldrb	r6, [lr, sl]
   17718:	cmp	r6, #126	; 0x7e
   1771c:	bhi	17c7c <__assert_fail@plt+0x647c>
   17720:	add	r3, pc, #16
   17724:	mov	r8, #1
   17728:	mov	r2, #110	; 0x6e
   1772c:	mov	r0, #97	; 0x61
   17730:	mov	r1, #0
   17734:	ldr	pc, [r3, r6, lsl #2]
   17738:	andeq	r7, r1, r4, lsr sl
   1773c:	andeq	r7, r1, ip, ror ip
   17740:	andeq	r7, r1, ip, ror ip
   17744:	andeq	r7, r1, ip, ror ip
   17748:	andeq	r7, r1, ip, ror ip
   1774c:	andeq	r7, r1, ip, ror ip
   17750:	andeq	r7, r1, ip, ror ip
   17754:	andeq	r7, r1, r0, lsr sp
   17758:	andeq	r7, r1, r4, lsl sl
   1775c:	andeq	r7, r1, ip, lsl #20
   17760:	andeq	r7, r1, r0, lsr #20
   17764:	andeq	r7, r1, r0, asr fp
   17768:	andeq	r7, r1, r4, lsl #20
   1776c:	andeq	r7, r1, ip, lsl sl
   17770:	andeq	r7, r1, ip, ror ip
   17774:	andeq	r7, r1, ip, ror ip
   17778:	andeq	r7, r1, ip, ror ip
   1777c:	andeq	r7, r1, ip, ror ip
   17780:	andeq	r7, r1, ip, ror ip
   17784:	andeq	r7, r1, ip, ror ip
   17788:	andeq	r7, r1, ip, ror ip
   1778c:	andeq	r7, r1, ip, ror ip
   17790:	andeq	r7, r1, ip, ror ip
   17794:	andeq	r7, r1, ip, ror ip
   17798:	andeq	r7, r1, ip, ror ip
   1779c:	andeq	r7, r1, ip, ror ip
   177a0:	andeq	r7, r1, ip, ror ip
   177a4:	andeq	r7, r1, ip, ror ip
   177a8:	andeq	r7, r1, ip, ror ip
   177ac:	andeq	r7, r1, ip, ror ip
   177b0:	andeq	r7, r1, ip, ror ip
   177b4:	andeq	r7, r1, ip, ror ip
   177b8:	andeq	r7, r1, r8, lsr #19
   177bc:	andeq	r7, r1, ip, lsr #19
   177c0:	andeq	r7, r1, ip, lsr #19
   177c4:	muleq	r1, ip, r9
   177c8:	andeq	r7, r1, ip, lsr #19
   177cc:	andeq	r7, r1, r4, lsr r9
   177d0:	andeq	r7, r1, ip, lsr #19
   177d4:	andeq	r7, r1, r8, asr fp
   177d8:	andeq	r7, r1, ip, lsr #19
   177dc:	andeq	r7, r1, ip, lsr #19
   177e0:	andeq	r7, r1, ip, lsr #19
   177e4:	andeq	r7, r1, r4, lsr r9
   177e8:	andeq	r7, r1, r4, lsr r9
   177ec:	andeq	r7, r1, r4, lsr r9
   177f0:	andeq	r7, r1, r4, lsr r9
   177f4:	andeq	r7, r1, r4, lsr r9
   177f8:	andeq	r7, r1, r4, lsr r9
   177fc:	andeq	r7, r1, r4, lsr r9
   17800:	andeq	r7, r1, r4, lsr r9
   17804:	andeq	r7, r1, r4, lsr r9
   17808:	andeq	r7, r1, r4, lsr r9
   1780c:	andeq	r7, r1, r4, lsr r9
   17810:	andeq	r7, r1, r4, lsr r9
   17814:	andeq	r7, r1, r4, lsr r9
   17818:	andeq	r7, r1, r4, lsr r9
   1781c:	andeq	r7, r1, r4, lsr r9
   17820:	andeq	r7, r1, r4, lsr r9
   17824:	andeq	r7, r1, ip, lsr #19
   17828:	andeq	r7, r1, ip, lsr #19
   1782c:	andeq	r7, r1, ip, lsr #19
   17830:	andeq	r7, r1, ip, lsr #19
   17834:	andeq	r7, r1, ip, lsl fp
   17838:	andeq	r7, r1, ip, ror ip
   1783c:	andeq	r7, r1, r4, lsr r9
   17840:	andeq	r7, r1, r4, lsr r9
   17844:	andeq	r7, r1, r4, lsr r9
   17848:	andeq	r7, r1, r4, lsr r9
   1784c:	andeq	r7, r1, r4, lsr r9
   17850:	andeq	r7, r1, r4, lsr r9
   17854:	andeq	r7, r1, r4, lsr r9
   17858:	andeq	r7, r1, r4, lsr r9
   1785c:	andeq	r7, r1, r4, lsr r9
   17860:	andeq	r7, r1, r4, lsr r9
   17864:	andeq	r7, r1, r4, lsr r9
   17868:	andeq	r7, r1, r4, lsr r9
   1786c:	andeq	r7, r1, r4, lsr r9
   17870:	andeq	r7, r1, r4, lsr r9
   17874:	andeq	r7, r1, r4, lsr r9
   17878:	andeq	r7, r1, r4, lsr r9
   1787c:	andeq	r7, r1, r4, lsr r9
   17880:	andeq	r7, r1, r4, lsr r9
   17884:	andeq	r7, r1, r4, lsr r9
   17888:	andeq	r7, r1, r4, lsr r9
   1788c:	andeq	r7, r1, r4, lsr r9
   17890:	andeq	r7, r1, r4, lsr r9
   17894:	andeq	r7, r1, r4, lsr r9
   17898:	andeq	r7, r1, r4, lsr r9
   1789c:	andeq	r7, r1, r4, lsr r9
   178a0:	andeq	r7, r1, r4, lsr r9
   178a4:	andeq	r7, r1, ip, lsr #19
   178a8:	andeq	r7, r1, r0, ror #19
   178ac:	andeq	r7, r1, r4, lsr r9
   178b0:	andeq	r7, r1, ip, lsr #19
   178b4:	andeq	r7, r1, r4, lsr r9
   178b8:	andeq	r7, r1, ip, lsr #19
   178bc:	andeq	r7, r1, r4, lsr r9
   178c0:	andeq	r7, r1, r4, lsr r9
   178c4:	andeq	r7, r1, r4, lsr r9
   178c8:	andeq	r7, r1, r4, lsr r9
   178cc:	andeq	r7, r1, r4, lsr r9
   178d0:	andeq	r7, r1, r4, lsr r9
   178d4:	andeq	r7, r1, r4, lsr r9
   178d8:	andeq	r7, r1, r4, lsr r9
   178dc:	andeq	r7, r1, r4, lsr r9
   178e0:	andeq	r7, r1, r4, lsr r9
   178e4:	andeq	r7, r1, r4, lsr r9
   178e8:	andeq	r7, r1, r4, lsr r9
   178ec:	andeq	r7, r1, r4, lsr r9
   178f0:	andeq	r7, r1, r4, lsr r9
   178f4:	andeq	r7, r1, r4, lsr r9
   178f8:	andeq	r7, r1, r4, lsr r9
   178fc:	andeq	r7, r1, r4, lsr r9
   17900:	andeq	r7, r1, r4, lsr r9
   17904:	andeq	r7, r1, r4, lsr r9
   17908:	andeq	r7, r1, r4, lsr r9
   1790c:	andeq	r7, r1, r4, lsr r9
   17910:	andeq	r7, r1, r4, lsr r9
   17914:	andeq	r7, r1, r4, lsr r9
   17918:	andeq	r7, r1, r4, lsr r9
   1791c:	andeq	r7, r1, r4, lsr r9
   17920:	andeq	r7, r1, r4, lsr r9
   17924:	andeq	r7, r1, r4, ror r9
   17928:	andeq	r7, r1, ip, lsr #19
   1792c:	andeq	r7, r1, r4, ror r9
   17930:	muleq	r1, ip, r9
   17934:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17938:	tst	r0, #1
   1793c:	bne	17bf4 <__assert_fail@plt+0x63f4>
   17940:	ldr	r1, [fp, #16]
   17944:	ubfx	r0, r6, #5, #3
   17948:	mov	r2, #1
   1794c:	ldr	r0, [r1, r0, lsl #2]
   17950:	and	r1, r6, #31
   17954:	tst	r0, r2, lsl r1
   17958:	beq	17bf4 <__assert_fail@plt+0x63f4>
   1795c:	mov	r0, r6
   17960:	mov	r1, r8
   17964:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17968:	tst	r2, #1
   1796c:	beq	17c14 <__assert_fail@plt+0x6414>
   17970:	b	18370 <__assert_fail@plt+0x6b70>
   17974:	cmp	r7, #1
   17978:	beq	1799c <__assert_fail@plt+0x619c>
   1797c:	mov	r8, #0
   17980:	cmn	r7, #1
   17984:	bne	17be0 <__assert_fail@plt+0x63e0>
   17988:	ldrb	r0, [lr, #1]
   1798c:	cmp	r0, #0
   17990:	beq	1799c <__assert_fail@plt+0x619c>
   17994:	mvn	r7, #0
   17998:	b	17be0 <__assert_fail@plt+0x63e0>
   1799c:	mov	r8, #0
   179a0:	cmp	sl, #0
   179a4:	bne	17be0 <__assert_fail@plt+0x63e0>
   179a8:	mov	r1, #1
   179ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179b0:	cmp	r0, #2
   179b4:	bne	179cc <__assert_fail@plt+0x61cc>
   179b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   179bc:	mov	r8, r1
   179c0:	tst	r0, #1
   179c4:	beq	17934 <__assert_fail@plt+0x6134>
   179c8:	b	18370 <__assert_fail@plt+0x6b70>
   179cc:	mov	r8, r1
   179d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   179d4:	tst	r0, #1
   179d8:	beq	17940 <__assert_fail@plt+0x6140>
   179dc:	b	17bf4 <__assert_fail@plt+0x63f4>
   179e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179e4:	cmp	r0, #2
   179e8:	bne	17ca8 <__assert_fail@plt+0x64a8>
   179ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   179f0:	tst	r0, #1
   179f4:	bne	18370 <__assert_fail@plt+0x6b70>
   179f8:	mov	r0, #0
   179fc:	str	r0, [fp, #-56]	; 0xffffffc8
   17a00:	b	17cc0 <__assert_fail@plt+0x64c0>
   17a04:	mov	r0, #102	; 0x66
   17a08:	b	17d30 <__assert_fail@plt+0x6530>
   17a0c:	mov	r2, #116	; 0x74
   17a10:	b	17a20 <__assert_fail@plt+0x6220>
   17a14:	mov	r0, #98	; 0x62
   17a18:	b	17d30 <__assert_fail@plt+0x6530>
   17a1c:	mov	r2, #114	; 0x72
   17a20:	ldr	r0, [sp, #64]	; 0x40
   17a24:	tst	r0, #1
   17a28:	mov	r0, r2
   17a2c:	bne	17d30 <__assert_fail@plt+0x6530>
   17a30:	b	18370 <__assert_fail@plt+0x6b70>
   17a34:	ldr	r0, [sp, #88]	; 0x58
   17a38:	tst	r0, #1
   17a3c:	beq	17d50 <__assert_fail@plt+0x6550>
   17a40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17a44:	tst	r0, #1
   17a48:	bne	184ac <__assert_fail@plt+0x6cac>
   17a4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17a50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17a54:	subs	r0, r0, #2
   17a58:	movwne	r0, #1
   17a5c:	orr	r0, r0, r1
   17a60:	tst	r0, #1
   17a64:	bne	17aa0 <__assert_fail@plt+0x62a0>
   17a68:	cmp	r9, r5
   17a6c:	movcc	r0, #39	; 0x27
   17a70:	strbcc	r0, [ip, r9]
   17a74:	add	r0, r9, #1
   17a78:	cmp	r0, r5
   17a7c:	movcc	r1, #36	; 0x24
   17a80:	strbcc	r1, [ip, r0]
   17a84:	add	r0, r9, #2
   17a88:	add	r9, r9, #3
   17a8c:	cmp	r0, r5
   17a90:	movcc	r1, #39	; 0x27
   17a94:	strbcc	r1, [ip, r0]
   17a98:	mov	r0, #1
   17a9c:	str	r0, [fp, #-52]	; 0xffffffcc
   17aa0:	mov	r1, #1
   17aa4:	cmp	r9, r5
   17aa8:	mov	r8, #0
   17aac:	mov	r6, #48	; 0x30
   17ab0:	str	r1, [fp, #-56]	; 0xffffffc8
   17ab4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17ab8:	movcc	r0, #92	; 0x5c
   17abc:	strbcc	r0, [ip, r9]
   17ac0:	add	r0, r9, #1
   17ac4:	cmp	r1, #2
   17ac8:	beq	17f1c <__assert_fail@plt+0x671c>
   17acc:	add	r1, sl, #1
   17ad0:	cmp	r1, r7
   17ad4:	bcs	17f1c <__assert_fail@plt+0x671c>
   17ad8:	ldrb	r1, [lr, r1]
   17adc:	sub	r1, r1, #48	; 0x30
   17ae0:	uxtb	r1, r1
   17ae4:	cmp	r1, #9
   17ae8:	bhi	17f1c <__assert_fail@plt+0x671c>
   17aec:	cmp	r0, r5
   17af0:	movcc	r1, #48	; 0x30
   17af4:	strbcc	r1, [ip, r0]
   17af8:	add	r0, r9, #2
   17afc:	add	r9, r9, #3
   17b00:	cmp	r0, r5
   17b04:	movcc	r1, #48	; 0x30
   17b08:	strbcc	r1, [ip, r0]
   17b0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b10:	tst	r0, #1
   17b14:	beq	17940 <__assert_fail@plt+0x6140>
   17b18:	b	17bf4 <__assert_fail@plt+0x63f4>
   17b1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b20:	mov	r6, #63	; 0x3f
   17b24:	cmp	r0, #5
   17b28:	beq	17f30 <__assert_fail@plt+0x6730>
   17b2c:	mov	r1, #0
   17b30:	cmp	r0, #2
   17b34:	str	r1, [fp, #-56]	; 0xffffffc8
   17b38:	bne	17ff8 <__assert_fail@plt+0x67f8>
   17b3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17b40:	mov	r8, #0
   17b44:	tst	r0, #1
   17b48:	beq	17934 <__assert_fail@plt+0x6134>
   17b4c:	b	18370 <__assert_fail@plt+0x6b70>
   17b50:	mov	r0, #118	; 0x76
   17b54:	b	17d30 <__assert_fail@plt+0x6530>
   17b58:	mov	r0, #1
   17b5c:	mov	r6, #39	; 0x27
   17b60:	str	r0, [sp, #60]	; 0x3c
   17b64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17b68:	cmp	r0, #2
   17b6c:	bne	17d70 <__assert_fail@plt+0x6570>
   17b70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17b74:	tst	r0, #1
   17b78:	bne	18370 <__assert_fail@plt+0x6b70>
   17b7c:	ldr	r2, [sp, #56]	; 0x38
   17b80:	clz	r1, r5
   17b84:	mov	r8, #1
   17b88:	lsr	r1, r1, #5
   17b8c:	cmp	r2, #0
   17b90:	mov	r0, r2
   17b94:	movwne	r0, #1
   17b98:	orrs	r0, r0, r1
   17b9c:	moveq	r2, r5
   17ba0:	moveq	r5, r0
   17ba4:	cmp	r9, r5
   17ba8:	str	r2, [sp, #56]	; 0x38
   17bac:	movcc	r0, #39	; 0x27
   17bb0:	strbcc	r0, [ip, r9]
   17bb4:	add	r0, r9, #1
   17bb8:	cmp	r0, r5
   17bbc:	movcc	r1, #92	; 0x5c
   17bc0:	strbcc	r1, [ip, r0]
   17bc4:	add	r0, r9, #2
   17bc8:	add	r9, r9, #3
   17bcc:	cmp	r0, r5
   17bd0:	movcc	r1, #39	; 0x27
   17bd4:	strbcc	r1, [ip, r0]
   17bd8:	mov	r0, #0
   17bdc:	str	r0, [fp, #-52]	; 0xffffffcc
   17be0:	mov	r0, #0
   17be4:	str	r0, [fp, #-56]	; 0xffffffc8
   17be8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bec:	tst	r0, #1
   17bf0:	beq	17940 <__assert_fail@plt+0x6140>
   17bf4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17bf8:	mov	r1, r8
   17bfc:	cmp	r0, #0
   17c00:	mov	r0, r6
   17c04:	beq	17cc8 <__assert_fail@plt+0x64c8>
   17c08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17c0c:	tst	r2, #1
   17c10:	bne	18370 <__assert_fail@plt+0x6b70>
   17c14:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17c18:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17c1c:	subs	r2, r2, #2
   17c20:	movwne	r2, #1
   17c24:	orr	r2, r2, r3
   17c28:	tst	r2, #1
   17c2c:	bne	17c68 <__assert_fail@plt+0x6468>
   17c30:	cmp	r9, r5
   17c34:	movcc	r2, #39	; 0x27
   17c38:	strbcc	r2, [ip, r9]
   17c3c:	add	r2, r9, #1
   17c40:	cmp	r2, r5
   17c44:	movcc	r3, #36	; 0x24
   17c48:	strbcc	r3, [ip, r2]
   17c4c:	add	r2, r9, #2
   17c50:	add	r9, r9, #3
   17c54:	cmp	r2, r5
   17c58:	movcc	r3, #39	; 0x27
   17c5c:	strbcc	r3, [ip, r2]
   17c60:	mov	r2, #1
   17c64:	str	r2, [fp, #-52]	; 0xffffffcc
   17c68:	cmp	r9, r5
   17c6c:	movcc	r2, #92	; 0x5c
   17c70:	strbcc	r2, [ip, r9]
   17c74:	add	r9, r9, #1
   17c78:	b	17d10 <__assert_fail@plt+0x6510>
   17c7c:	ldr	r0, [sp, #40]	; 0x28
   17c80:	cmp	r0, #1
   17c84:	bne	17d84 <__assert_fail@plt+0x6584>
   17c88:	bl	11614 <__ctype_b_loc@plt>
   17c8c:	ldr	r0, [r0]
   17c90:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17c94:	mov	r1, #1
   17c98:	add	r0, r0, r6, lsl #1
   17c9c:	ldrb	r0, [r0, #1]
   17ca0:	ubfx	r8, r0, #6, #1
   17ca4:	b	180dc <__assert_fail@plt+0x68dc>
   17ca8:	ldr	r1, [sp, #48]	; 0x30
   17cac:	mov	r0, #0
   17cb0:	str	r0, [fp, #-56]	; 0xffffffc8
   17cb4:	mov	r0, #92	; 0x5c
   17cb8:	cmp	r1, #0
   17cbc:	beq	17d30 <__assert_fail@plt+0x6530>
   17cc0:	mov	r6, #92	; 0x5c
   17cc4:	mov	r8, #0
   17cc8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17ccc:	cmp	r0, #0
   17cd0:	bne	17d08 <__assert_fail@plt+0x6508>
   17cd4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17cd8:	tst	r0, #1
   17cdc:	beq	17d08 <__assert_fail@plt+0x6508>
   17ce0:	cmp	r9, r5
   17ce4:	movcc	r0, #39	; 0x27
   17ce8:	strbcc	r0, [ip, r9]
   17cec:	add	r0, r9, #1
   17cf0:	add	r9, r9, #2
   17cf4:	cmp	r0, r5
   17cf8:	movcc	r1, #39	; 0x27
   17cfc:	strbcc	r1, [ip, r0]
   17d00:	mov	r0, #0
   17d04:	str	r0, [fp, #-52]	; 0xffffffcc
   17d08:	mov	r1, r8
   17d0c:	mov	r0, r6
   17d10:	cmp	r9, r5
   17d14:	and	r4, r4, r1
   17d18:	strbcc	r0, [ip, r9]
   17d1c:	add	r9, r9, #1
   17d20:	add	sl, sl, #1
   17d24:	cmn	r7, #1
   17d28:	bne	17620 <__assert_fail@plt+0x5e20>
   17d2c:	b	1762c <__assert_fail@plt+0x5e2c>
   17d30:	mov	r1, #0
   17d34:	mov	r8, #0
   17d38:	str	r1, [fp, #-56]	; 0xffffffc8
   17d3c:	ldr	r1, [sp, #88]	; 0x58
   17d40:	tst	r1, #1
   17d44:	mov	r1, #0
   17d48:	beq	17934 <__assert_fail@plt+0x6134>
   17d4c:	b	17c08 <__assert_fail@plt+0x6408>
   17d50:	ldr	r0, [sp, #36]	; 0x24
   17d54:	mov	r6, #0
   17d58:	mov	r8, #0
   17d5c:	cmp	r0, #0
   17d60:	mov	r0, #0
   17d64:	str	r0, [fp, #-56]	; 0xffffffc8
   17d68:	bne	17d20 <__assert_fail@plt+0x6520>
   17d6c:	b	17934 <__assert_fail@plt+0x6134>
   17d70:	mov	r8, #1
   17d74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d78:	tst	r0, #1
   17d7c:	beq	17940 <__assert_fail@plt+0x6140>
   17d80:	b	17bf4 <__assert_fail@plt+0x63f4>
   17d84:	mov	r0, #0
   17d88:	cmn	r7, #1
   17d8c:	str	r0, [fp, #-36]	; 0xffffffdc
   17d90:	str	r0, [fp, #-40]	; 0xffffffd8
   17d94:	bne	17da8 <__assert_fail@plt+0x65a8>
   17d98:	mov	r0, lr
   17d9c:	bl	11650 <strlen@plt>
   17da0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17da4:	mov	r7, r0
   17da8:	ldr	r0, [sp, #44]	; 0x2c
   17dac:	str	r4, [sp, #84]	; 0x54
   17db0:	str	r5, [sp, #28]
   17db4:	cmp	r0, #0
   17db8:	beq	1800c <__assert_fail@plt+0x680c>
   17dbc:	ldr	r0, [sp, #80]	; 0x50
   17dc0:	mov	r8, #1
   17dc4:	mov	r5, #0
   17dc8:	add	r0, r0, sl
   17dcc:	str	r0, [sp, #24]
   17dd0:	sub	r0, fp, #40	; 0x28
   17dd4:	mov	r3, r0
   17dd8:	b	17e14 <__assert_fail@plt+0x6614>
   17ddc:	ldr	r5, [sp, #68]	; 0x44
   17de0:	add	r5, r0, r5
   17de4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17de8:	bl	11530 <iswprint@plt>
   17dec:	cmp	r0, #0
   17df0:	sub	r4, fp, #40	; 0x28
   17df4:	movwne	r0, #1
   17df8:	and	r8, r8, r0
   17dfc:	mov	r0, r4
   17e00:	bl	114c4 <mbsinit@plt>
   17e04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17e08:	mov	r3, r4
   17e0c:	cmp	r0, #0
   17e10:	bne	180d0 <__assert_fail@plt+0x68d0>
   17e14:	str	r5, [sp, #68]	; 0x44
   17e18:	add	r5, r5, sl
   17e1c:	sub	r0, fp, #44	; 0x2c
   17e20:	add	r1, lr, r5
   17e24:	sub	r2, r7, r5
   17e28:	bl	1a888 <__assert_fail@plt+0x9088>
   17e2c:	cmn	r0, #2
   17e30:	beq	18090 <__assert_fail@plt+0x6890>
   17e34:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e38:	cmn	r0, #1
   17e3c:	beq	18084 <__assert_fail@plt+0x6884>
   17e40:	cmp	r0, #0
   17e44:	beq	18088 <__assert_fail@plt+0x6888>
   17e48:	cmp	r0, #2
   17e4c:	bcc	17ddc <__assert_fail@plt+0x65dc>
   17e50:	ldr	r1, [sp, #68]	; 0x44
   17e54:	ldr	r2, [sp, #24]
   17e58:	add	r1, r2, r1
   17e5c:	sub	r2, r0, #1
   17e60:	ldrb	r3, [r1]
   17e64:	sub	r3, r3, #91	; 0x5b
   17e68:	cmp	r3, #33	; 0x21
   17e6c:	bls	17e8c <__assert_fail@plt+0x668c>
   17e70:	add	r1, r1, #1
   17e74:	subs	r2, r2, #1
   17e78:	beq	17ddc <__assert_fail@plt+0x65dc>
   17e7c:	ldrb	r3, [r1]
   17e80:	sub	r3, r3, #91	; 0x5b
   17e84:	cmp	r3, #33	; 0x21
   17e88:	bhi	17e70 <__assert_fail@plt+0x6670>
   17e8c:	add	r5, pc, #0
   17e90:	ldr	pc, [r5, r3, lsl #2]
   17e94:	andeq	r8, r1, r8, lsr #7
   17e98:	andeq	r8, r1, r8, lsr #7
   17e9c:	andeq	r7, r1, r0, ror lr
   17ea0:	andeq	r8, r1, r8, lsr #7
   17ea4:	andeq	r7, r1, r0, ror lr
   17ea8:	andeq	r8, r1, r8, lsr #7
   17eac:	andeq	r7, r1, r0, ror lr
   17eb0:	andeq	r7, r1, r0, ror lr
   17eb4:	andeq	r7, r1, r0, ror lr
   17eb8:	andeq	r7, r1, r0, ror lr
   17ebc:	andeq	r7, r1, r0, ror lr
   17ec0:	andeq	r7, r1, r0, ror lr
   17ec4:	andeq	r7, r1, r0, ror lr
   17ec8:	andeq	r7, r1, r0, ror lr
   17ecc:	andeq	r7, r1, r0, ror lr
   17ed0:	andeq	r7, r1, r0, ror lr
   17ed4:	andeq	r7, r1, r0, ror lr
   17ed8:	andeq	r7, r1, r0, ror lr
   17edc:	andeq	r7, r1, r0, ror lr
   17ee0:	andeq	r7, r1, r0, ror lr
   17ee4:	andeq	r7, r1, r0, ror lr
   17ee8:	andeq	r7, r1, r0, ror lr
   17eec:	andeq	r7, r1, r0, ror lr
   17ef0:	andeq	r7, r1, r0, ror lr
   17ef4:	andeq	r7, r1, r0, ror lr
   17ef8:	andeq	r7, r1, r0, ror lr
   17efc:	andeq	r7, r1, r0, ror lr
   17f00:	andeq	r7, r1, r0, ror lr
   17f04:	andeq	r7, r1, r0, ror lr
   17f08:	andeq	r7, r1, r0, ror lr
   17f0c:	andeq	r7, r1, r0, ror lr
   17f10:	andeq	r7, r1, r0, ror lr
   17f14:	andeq	r7, r1, r0, ror lr
   17f18:	andeq	r8, r1, r8, lsr #7
   17f1c:	mov	r9, r0
   17f20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17f24:	tst	r0, #1
   17f28:	beq	17940 <__assert_fail@plt+0x6140>
   17f2c:	b	17bf4 <__assert_fail@plt+0x63f4>
   17f30:	mov	r0, #0
   17f34:	str	r0, [fp, #-56]	; 0xffffffc8
   17f38:	ldr	r0, [sp, #32]
   17f3c:	cmp	r0, #0
   17f40:	beq	17ff8 <__assert_fail@plt+0x67f8>
   17f44:	add	r0, sl, #2
   17f48:	mov	r1, r7
   17f4c:	cmp	r0, r7
   17f50:	bcs	17ff8 <__assert_fail@plt+0x67f8>
   17f54:	add	r1, sl, lr
   17f58:	ldrb	r1, [r1, #1]
   17f5c:	cmp	r1, #63	; 0x3f
   17f60:	bne	17ff8 <__assert_fail@plt+0x67f8>
   17f64:	ldrb	r8, [lr, r0]
   17f68:	sub	r2, r8, #33	; 0x21
   17f6c:	cmp	r2, #29
   17f70:	bhi	17ff8 <__assert_fail@plt+0x67f8>
   17f74:	mov	r1, r4
   17f78:	movw	r4, #20929	; 0x51c1
   17f7c:	mov	r3, #1
   17f80:	movt	r4, #14336	; 0x3800
   17f84:	tst	r4, r3, lsl r2
   17f88:	beq	182b4 <__assert_fail@plt+0x6ab4>
   17f8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17f90:	tst	r2, #1
   17f94:	bne	18370 <__assert_fail@plt+0x6b70>
   17f98:	cmp	r9, r5
   17f9c:	mov	r6, r8
   17fa0:	mov	r4, r1
   17fa4:	mov	sl, r0
   17fa8:	mov	r8, #0
   17fac:	movcc	r2, #63	; 0x3f
   17fb0:	strbcc	r2, [ip, r9]
   17fb4:	add	r2, r9, #1
   17fb8:	cmp	r2, r5
   17fbc:	movcc	r3, #34	; 0x22
   17fc0:	strbcc	r3, [ip, r2]
   17fc4:	add	r2, r9, #2
   17fc8:	cmp	r2, r5
   17fcc:	movcc	r3, #34	; 0x22
   17fd0:	strbcc	r3, [ip, r2]
   17fd4:	add	r2, r9, #3
   17fd8:	add	r9, r9, #4
   17fdc:	cmp	r2, r5
   17fe0:	movcc	r3, #63	; 0x3f
   17fe4:	strbcc	r3, [ip, r2]
   17fe8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17fec:	tst	r0, #1
   17ff0:	beq	17940 <__assert_fail@plt+0x6140>
   17ff4:	b	17bf4 <__assert_fail@plt+0x63f4>
   17ff8:	mov	r8, #0
   17ffc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18000:	tst	r0, #1
   18004:	beq	17940 <__assert_fail@plt+0x6140>
   18008:	b	17bf4 <__assert_fail@plt+0x63f4>
   1800c:	mov	r8, #1
   18010:	mov	r5, #0
   18014:	sub	r4, fp, #40	; 0x28
   18018:	str	r5, [sp, #68]	; 0x44
   1801c:	add	r5, r5, sl
   18020:	sub	r0, fp, #44	; 0x2c
   18024:	mov	r3, r4
   18028:	add	r1, lr, r5
   1802c:	sub	r2, r7, r5
   18030:	bl	1a888 <__assert_fail@plt+0x9088>
   18034:	cmn	r0, #2
   18038:	beq	18090 <__assert_fail@plt+0x6890>
   1803c:	cmn	r0, #1
   18040:	beq	18084 <__assert_fail@plt+0x6884>
   18044:	ldr	r5, [sp, #68]	; 0x44
   18048:	cmp	r0, #0
   1804c:	beq	180cc <__assert_fail@plt+0x68cc>
   18050:	add	r5, r0, r5
   18054:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18058:	bl	11530 <iswprint@plt>
   1805c:	cmp	r0, #0
   18060:	sub	r4, fp, #40	; 0x28
   18064:	movwne	r0, #1
   18068:	and	r8, r8, r0
   1806c:	mov	r0, r4
   18070:	bl	114c4 <mbsinit@plt>
   18074:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18078:	cmp	r0, #0
   1807c:	beq	18018 <__assert_fail@plt+0x6818>
   18080:	b	180d0 <__assert_fail@plt+0x68d0>
   18084:	mov	r8, #0
   18088:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1808c:	b	180c4 <__assert_fail@plt+0x68c4>
   18090:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18094:	mov	r8, #0
   18098:	cmp	r5, r7
   1809c:	bcs	180c4 <__assert_fail@plt+0x68c4>
   180a0:	ldrb	r0, [lr, r5]
   180a4:	cmp	r0, #0
   180a8:	beq	180c4 <__assert_fail@plt+0x68c4>
   180ac:	ldr	r0, [sp, #68]	; 0x44
   180b0:	add	r0, r0, #1
   180b4:	add	r5, r0, sl
   180b8:	str	r0, [sp, #68]	; 0x44
   180bc:	cmp	r5, r7
   180c0:	bcc	180a0 <__assert_fail@plt+0x68a0>
   180c4:	ldr	r5, [sp, #68]	; 0x44
   180c8:	b	180d0 <__assert_fail@plt+0x68d0>
   180cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   180d0:	mov	r1, r5
   180d4:	ldr	r5, [sp, #28]
   180d8:	ldr	r4, [sp, #84]	; 0x54
   180dc:	ldr	r0, [sp, #52]	; 0x34
   180e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   180e4:	cmp	r1, #1
   180e8:	orr	r2, r8, r0
   180ec:	mov	r0, r1
   180f0:	bhi	180fc <__assert_fail@plt+0x68fc>
   180f4:	tst	r2, #1
   180f8:	bne	17934 <__assert_fail@plt+0x6134>
   180fc:	add	r0, r0, sl
   18100:	str	r2, [sp, #84]	; 0x54
   18104:	str	r0, [fp, #-56]	; 0xffffffc8
   18108:	mov	r0, #0
   1810c:	tst	r2, #1
   18110:	bne	181f0 <__assert_fail@plt+0x69f0>
   18114:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18118:	tst	r1, #1
   1811c:	bne	18370 <__assert_fail@plt+0x6b70>
   18120:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18124:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18128:	subs	r2, r1, #2
   1812c:	movwne	r2, #1
   18130:	orr	r2, r2, r0
   18134:	tst	r2, #1
   18138:	bne	18174 <__assert_fail@plt+0x6974>
   1813c:	cmp	r9, r5
   18140:	add	r2, r9, #1
   18144:	mov	r0, #1
   18148:	movcc	r1, #39	; 0x27
   1814c:	str	r0, [fp, #-52]	; 0xffffffcc
   18150:	strbcc	r1, [ip, r9]
   18154:	cmp	r2, r5
   18158:	movcc	r1, #36	; 0x24
   1815c:	strbcc	r1, [ip, r2]
   18160:	add	r2, r9, #2
   18164:	add	r9, r9, #3
   18168:	cmp	r2, r5
   1816c:	movcc	r1, #39	; 0x27
   18170:	strbcc	r1, [ip, r2]
   18174:	cmp	r9, r5
   18178:	add	r2, r9, #1
   1817c:	movcc	r1, #92	; 0x5c
   18180:	strbcc	r1, [ip, r9]
   18184:	cmp	r2, r5
   18188:	bcs	1819c <__assert_fail@plt+0x699c>
   1818c:	uxtb	r3, r6
   18190:	mov	r1, #48	; 0x30
   18194:	orr	r3, r1, r3, lsr #6
   18198:	strb	r3, [ip, r2]
   1819c:	add	r2, r9, #2
   181a0:	add	r9, r9, #3
   181a4:	cmp	r2, r5
   181a8:	lsrcc	r3, r6, #3
   181ac:	movcc	r1, #6
   181b0:	bficc	r3, r1, #3, #29
   181b4:	mov	r1, #6
   181b8:	bfi	r6, r1, #3, #29
   181bc:	strbcc	r3, [ip, r2]
   181c0:	mov	r2, #1
   181c4:	b	18224 <__assert_fail@plt+0x6a24>
   181c8:	ldr	r1, [sp, #80]	; 0x50
   181cc:	cmp	r9, r2
   181d0:	mov	r5, r2
   181d4:	ldr	r2, [sp, #84]	; 0x54
   181d8:	strbcc	r6, [ip, r9]
   181dc:	add	r9, r9, #1
   181e0:	ldrb	r6, [r1, sl]
   181e4:	mov	sl, r3
   181e8:	tst	r2, #1
   181ec:	beq	18114 <__assert_fail@plt+0x6914>
   181f0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   181f4:	tst	r1, #1
   181f8:	beq	18218 <__assert_fail@plt+0x6a18>
   181fc:	cmp	r9, r5
   18200:	mov	r2, r0
   18204:	movcc	r1, #92	; 0x5c
   18208:	strbcc	r1, [ip, r9]
   1820c:	add	r9, r9, #1
   18210:	mov	r1, #0
   18214:	b	18220 <__assert_fail@plt+0x6a20>
   18218:	mov	r1, #0
   1821c:	mov	r2, r0
   18220:	str	r1, [fp, #-48]	; 0xffffffd0
   18224:	mov	r0, r2
   18228:	and	r1, r2, #1
   1822c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18230:	add	r3, sl, #1
   18234:	cmp	r2, r3
   18238:	bls	18298 <__assert_fail@plt+0x6a98>
   1823c:	mov	r2, r5
   18240:	ldr	r5, [fp, #-52]	; 0xffffffcc
   18244:	cmp	r1, #0
   18248:	movwne	r1, #1
   1824c:	mvn	r5, r5
   18250:	orr	r5, r5, r1
   18254:	tst	r5, #1
   18258:	bne	181c8 <__assert_fail@plt+0x69c8>
   1825c:	cmp	r9, r2
   18260:	movcc	r5, r4
   18264:	movcc	r4, #39	; 0x27
   18268:	strbcc	r4, [ip, r9]
   1826c:	movcc	r4, r5
   18270:	add	r5, r9, #1
   18274:	add	r9, r9, #2
   18278:	cmp	r5, r2
   1827c:	movcc	r1, r4
   18280:	movcc	r4, #39	; 0x27
   18284:	strbcc	r4, [ip, r5]
   18288:	movcc	r4, r1
   1828c:	mov	r1, #0
   18290:	str	r1, [fp, #-52]	; 0xffffffcc
   18294:	b	181c8 <__assert_fail@plt+0x69c8>
   18298:	cmp	r1, #0
   1829c:	movwne	r1, #1
   182a0:	str	r1, [fp, #-56]	; 0xffffffc8
   182a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   182a8:	cmp	r0, #0
   182ac:	beq	17cd4 <__assert_fail@plt+0x64d4>
   182b0:	b	17d08 <__assert_fail@plt+0x6508>
   182b4:	mov	r8, #0
   182b8:	mov	r4, r1
   182bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   182c0:	tst	r0, #1
   182c4:	beq	17940 <__assert_fail@plt+0x6140>
   182c8:	b	17bf4 <__assert_fail@plt+0x63f4>
   182cc:	mov	r7, sl
   182d0:	b	182d8 <__assert_fail@plt+0x6ad8>
   182d4:	mvn	r7, #0
   182d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   182dc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   182e0:	ldr	r2, [sp, #88]	; 0x58
   182e4:	eor	r0, r1, #2
   182e8:	orr	r0, r0, r9
   182ec:	clz	r0, r0
   182f0:	lsr	r0, r0, #5
   182f4:	tst	r3, r0
   182f8:	bne	18370 <__assert_fail@plt+0x6b70>
   182fc:	subs	r0, r1, #2
   18300:	movwne	r0, #1
   18304:	orr	r0, r3, r0
   18308:	tst	r0, #1
   1830c:	ldreq	r0, [sp, #60]	; 0x3c
   18310:	eoreq	r0, r0, #1
   18314:	tsteq	r0, #1
   18318:	bne	1844c <__assert_fail@plt+0x6c4c>
   1831c:	tst	r4, #1
   18320:	bne	18410 <__assert_fail@plt+0x6c10>
   18324:	ldr	r6, [sp, #56]	; 0x38
   18328:	mov	r8, #0
   1832c:	cmp	r6, #0
   18330:	beq	18448 <__assert_fail@plt+0x6c48>
   18334:	mov	r1, #0
   18338:	mov	r4, #2
   1833c:	cmp	r5, #0
   18340:	mov	r0, r2
   18344:	mov	r3, #0
   18348:	str	r1, [sp, #84]	; 0x54
   1834c:	beq	17194 <__assert_fail@plt+0x5994>
   18350:	b	1844c <__assert_fail@plt+0x6c4c>
   18354:	movw	r0, #52821	; 0xce55
   18358:	movt	r0, #1
   1835c:	str	r0, [sp, #76]	; 0x4c
   18360:	mov	r9, #0
   18364:	tst	r8, #1
   18368:	beq	1742c <__assert_fail@plt+0x5c2c>
   1836c:	b	1756c <__assert_fail@plt+0x5d6c>
   18370:	ldr	r1, [sp, #88]	; 0x58
   18374:	mov	r0, #2
   18378:	tst	r1, #1
   1837c:	movwne	r0, #4
   18380:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18384:	ldr	r1, [fp, #12]
   18388:	cmp	r2, #2
   1838c:	moveq	r2, r0
   18390:	b	183c8 <__assert_fail@plt+0x6bc8>
   18394:	ldr	ip, [fp, #-84]	; 0xffffffac
   18398:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1839c:	ldr	r1, [fp, #12]
   183a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   183a4:	b	183c8 <__assert_fail@plt+0x6bc8>
   183a8:	ldr	r1, [sp, #88]	; 0x58
   183ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   183b0:	ldr	r5, [sp, #28]
   183b4:	mov	r0, #2
   183b8:	tst	r1, #1
   183bc:	ldr	r1, [fp, #12]
   183c0:	movwne	r0, #4
   183c4:	mov	r2, r0
   183c8:	mov	r0, #0
   183cc:	bic	r1, r1, #2
   183d0:	str	r2, [sp]
   183d4:	mov	r2, lr
   183d8:	str	r0, [sp, #8]
   183dc:	ldr	r0, [sp, #72]	; 0x48
   183e0:	str	r1, [sp, #4]
   183e4:	mov	r1, r5
   183e8:	str	r0, [sp, #12]
   183ec:	ldr	r0, [sp, #76]	; 0x4c
   183f0:	str	r0, [sp, #16]
   183f4:	mov	r0, ip
   183f8:	mov	r3, r7
   183fc:	bl	17108 <__assert_fail@plt+0x5908>
   18400:	mov	r9, r0
   18404:	mov	r0, r9
   18408:	sub	sp, fp, #28
   1840c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18410:	mov	r0, #5
   18414:	ldr	r1, [sp, #56]	; 0x38
   18418:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1841c:	str	r0, [sp]
   18420:	ldr	r0, [fp, #12]
   18424:	str	r0, [sp, #4]
   18428:	ldr	r0, [fp, #16]
   1842c:	str	r0, [sp, #8]
   18430:	ldr	r0, [sp, #72]	; 0x48
   18434:	str	r0, [sp, #12]
   18438:	ldr	r0, [sp, #76]	; 0x4c
   1843c:	str	r0, [sp, #16]
   18440:	ldr	r0, [fp, #-84]	; 0xffffffac
   18444:	b	183f8 <__assert_fail@plt+0x6bf8>
   18448:	mov	r3, #0
   1844c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18450:	cmp	r1, #0
   18454:	beq	18490 <__assert_fail@plt+0x6c90>
   18458:	ldr	r2, [fp, #-84]	; 0xffffffac
   1845c:	tst	r3, #1
   18460:	bne	18494 <__assert_fail@plt+0x6c94>
   18464:	ldrb	r0, [r1]
   18468:	cmp	r0, #0
   1846c:	beq	18494 <__assert_fail@plt+0x6c94>
   18470:	add	r1, r1, #1
   18474:	cmp	r9, r5
   18478:	strbcc	r0, [r2, r9]
   1847c:	add	r9, r9, #1
   18480:	ldrb	r0, [r1], #1
   18484:	cmp	r0, #0
   18488:	bne	18474 <__assert_fail@plt+0x6c74>
   1848c:	b	18494 <__assert_fail@plt+0x6c94>
   18490:	ldr	r2, [fp, #-84]	; 0xffffffac
   18494:	cmp	r9, r5
   18498:	movcc	r0, #0
   1849c:	strbcc	r0, [r2, r9]
   184a0:	mov	r0, r9
   184a4:	sub	sp, fp, #28
   184a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ac:	mov	r0, #4
   184b0:	b	18380 <__assert_fail@plt+0x6b80>
   184b4:	bl	117d0 <abort@plt>
   184b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184bc:	add	fp, sp, #28
   184c0:	sub	sp, sp, #28
   184c4:	movw	r5, #58016	; 0xe2a0
   184c8:	cmp	r2, #0
   184cc:	mov	r4, r1
   184d0:	mov	r7, r0
   184d4:	str	r0, [sp, #20]
   184d8:	movt	r5, #2
   184dc:	movne	r5, r2
   184e0:	bl	11680 <__errno_location@plt>
   184e4:	mov	sl, r0
   184e8:	ldr	r2, [r5, #40]	; 0x28
   184ec:	ldr	r3, [r5, #44]	; 0x2c
   184f0:	ldm	r5, {r0, r1}
   184f4:	orr	r8, r1, #1
   184f8:	add	r9, r5, #8
   184fc:	mov	r1, #0
   18500:	ldr	r6, [sl]
   18504:	stm	sp, {r0, r8, r9}
   18508:	mov	r0, #0
   1850c:	str	r2, [sp, #12]
   18510:	str	r3, [sp, #16]
   18514:	mov	r2, r7
   18518:	mov	r3, r4
   1851c:	str	r6, [sp, #24]
   18520:	mov	r6, r4
   18524:	bl	17108 <__assert_fail@plt+0x5908>
   18528:	add	r7, r0, #1
   1852c:	mov	r0, r7
   18530:	bl	196e8 <__assert_fail@plt+0x7ee8>
   18534:	mov	r4, r0
   18538:	ldr	r0, [r5]
   1853c:	ldr	r2, [r5, #44]	; 0x2c
   18540:	ldr	r1, [r5, #40]	; 0x28
   18544:	mov	r3, r6
   18548:	stm	sp, {r0, r8, r9}
   1854c:	str	r2, [sp, #16]
   18550:	ldr	r2, [sp, #20]
   18554:	str	r1, [sp, #12]
   18558:	mov	r0, r4
   1855c:	mov	r1, r7
   18560:	bl	17108 <__assert_fail@plt+0x5908>
   18564:	ldr	r0, [sp, #24]
   18568:	str	r0, [sl]
   1856c:	mov	r0, r4
   18570:	sub	sp, fp, #28
   18574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1857c:	add	fp, sp, #28
   18580:	sub	sp, sp, #36	; 0x24
   18584:	movw	r8, #58016	; 0xe2a0
   18588:	cmp	r3, #0
   1858c:	mov	r4, r2
   18590:	str	r2, [sp, #24]
   18594:	mov	r5, r1
   18598:	mov	r6, r0
   1859c:	str	r0, [sp, #20]
   185a0:	movt	r8, #2
   185a4:	movne	r8, r3
   185a8:	bl	11680 <__errno_location@plt>
   185ac:	str	r0, [sp, #28]
   185b0:	ldr	r1, [r8, #40]	; 0x28
   185b4:	ldr	r2, [r8, #44]	; 0x2c
   185b8:	ldr	r7, [r0]
   185bc:	cmp	r4, #0
   185c0:	add	sl, r8, #8
   185c4:	mov	r0, #0
   185c8:	ldm	r8, {r3, r9}
   185cc:	orreq	r9, r9, #1
   185d0:	stm	sp, {r3, r9, sl}
   185d4:	str	r1, [sp, #12]
   185d8:	str	r2, [sp, #16]
   185dc:	mov	r1, #0
   185e0:	mov	r2, r6
   185e4:	mov	r3, r5
   185e8:	str	r7, [sp, #32]
   185ec:	mov	r7, r5
   185f0:	bl	17108 <__assert_fail@plt+0x5908>
   185f4:	add	r4, r0, #1
   185f8:	mov	r5, r0
   185fc:	mov	r0, r4
   18600:	bl	196e8 <__assert_fail@plt+0x7ee8>
   18604:	mov	r6, r0
   18608:	ldr	r0, [r8]
   1860c:	ldr	r2, [r8, #44]	; 0x2c
   18610:	ldr	r1, [r8, #40]	; 0x28
   18614:	mov	r3, r7
   18618:	stm	sp, {r0, r9, sl}
   1861c:	str	r2, [sp, #16]
   18620:	ldr	r2, [sp, #20]
   18624:	str	r1, [sp, #12]
   18628:	mov	r0, r6
   1862c:	mov	r1, r4
   18630:	bl	17108 <__assert_fail@plt+0x5908>
   18634:	ldr	r0, [sp, #24]
   18638:	ldr	r1, [sp, #32]
   1863c:	ldr	r2, [sp, #28]
   18640:	cmp	r0, #0
   18644:	str	r1, [r2]
   18648:	strne	r5, [r0]
   1864c:	mov	r0, r6
   18650:	sub	sp, fp, #28
   18654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18658:	push	{r4, r5, r6, r7, fp, lr}
   1865c:	add	fp, sp, #16
   18660:	movw	r4, #57768	; 0xe1a8
   18664:	movt	r4, #2
   18668:	ldrd	r6, [r4]
   1866c:	cmp	r7, #2
   18670:	blt	1869c <__assert_fail@plt+0x6e9c>
   18674:	add	r5, r6, #12
   18678:	mov	r7, #0
   1867c:	ldr	r0, [r5, r7, lsl #3]
   18680:	bl	1a788 <__assert_fail@plt+0x8f88>
   18684:	ldr	r1, [r4, #4]
   18688:	add	r2, r7, #2
   1868c:	add	r0, r7, #1
   18690:	mov	r7, r0
   18694:	cmp	r2, r1
   18698:	blt	1867c <__assert_fail@plt+0x6e7c>
   1869c:	ldr	r0, [r6, #4]
   186a0:	movw	r5, #58064	; 0xe2d0
   186a4:	movt	r5, #2
   186a8:	cmp	r0, r5
   186ac:	beq	186c0 <__assert_fail@plt+0x6ec0>
   186b0:	bl	1a788 <__assert_fail@plt+0x8f88>
   186b4:	mov	r0, #256	; 0x100
   186b8:	str	r0, [r4, #8]
   186bc:	str	r5, [r4, #12]
   186c0:	add	r5, r4, #8
   186c4:	cmp	r6, r5
   186c8:	beq	186d8 <__assert_fail@plt+0x6ed8>
   186cc:	mov	r0, r6
   186d0:	bl	1a788 <__assert_fail@plt+0x8f88>
   186d4:	str	r5, [r4]
   186d8:	mov	r0, #1
   186dc:	str	r0, [r4, #4]
   186e0:	pop	{r4, r5, r6, r7, fp, pc}
   186e4:	movw	r3, #58016	; 0xe2a0
   186e8:	mvn	r2, #0
   186ec:	movt	r3, #2
   186f0:	b	186f4 <__assert_fail@plt+0x6ef4>
   186f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186f8:	add	fp, sp, #28
   186fc:	sub	sp, sp, #44	; 0x2c
   18700:	mov	r7, r3
   18704:	str	r2, [sp, #36]	; 0x24
   18708:	str	r1, [sp, #32]
   1870c:	mov	r5, r0
   18710:	bl	11680 <__errno_location@plt>
   18714:	cmp	r5, #0
   18718:	bmi	18880 <__assert_fail@plt+0x7080>
   1871c:	cmn	r5, #-2147483647	; 0x80000001
   18720:	beq	18880 <__assert_fail@plt+0x7080>
   18724:	movw	r8, #57768	; 0xe1a8
   18728:	mov	r4, r0
   1872c:	ldr	r0, [r0]
   18730:	movt	r8, #2
   18734:	str	r4, [sp, #28]
   18738:	ldr	r1, [r8, #4]
   1873c:	ldr	r6, [r8]
   18740:	str	r0, [sp, #24]
   18744:	cmp	r1, r5
   18748:	ble	18754 <__assert_fail@plt+0x6f54>
   1874c:	mov	sl, r6
   18750:	b	187bc <__assert_fail@plt+0x6fbc>
   18754:	mov	r0, #8
   18758:	add	r9, r8, #8
   1875c:	str	r1, [fp, #-32]	; 0xffffffe0
   18760:	sub	r1, r5, r1
   18764:	mvn	r3, #-2147483648	; 0x80000000
   18768:	str	r0, [sp]
   1876c:	subs	r0, r6, r9
   18770:	add	r2, r1, #1
   18774:	sub	r1, fp, #32
   18778:	movne	r0, r6
   1877c:	bl	198e8 <__assert_fail@plt+0x80e8>
   18780:	mov	sl, r0
   18784:	cmp	r6, r9
   18788:	str	r0, [r8]
   1878c:	bne	18798 <__assert_fail@plt+0x6f98>
   18790:	ldrd	r0, [r8, #8]
   18794:	stm	sl, {r0, r1}
   18798:	ldr	r1, [r8, #4]
   1879c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   187a0:	add	r0, sl, r1, lsl #3
   187a4:	sub	r1, r2, r1
   187a8:	lsl	r2, r1, #3
   187ac:	mov	r1, #0
   187b0:	bl	116a4 <memset@plt>
   187b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   187b8:	str	r0, [r8, #4]
   187bc:	mov	r9, sl
   187c0:	ldm	r7, {r0, r1}
   187c4:	orr	r8, r1, #1
   187c8:	add	r1, r7, #8
   187cc:	ldr	r2, [r7, #40]	; 0x28
   187d0:	ldr	r3, [r7, #44]	; 0x2c
   187d4:	ldr	r6, [r9, r5, lsl #3]!
   187d8:	str	r1, [sp, #20]
   187dc:	ldr	r4, [r9, #4]!
   187e0:	stm	sp, {r0, r8}
   187e4:	add	r0, sp, #8
   187e8:	stm	r0, {r1, r2, r3}
   187ec:	ldr	r2, [sp, #32]
   187f0:	ldr	r3, [sp, #36]	; 0x24
   187f4:	mov	r1, r6
   187f8:	mov	r0, r4
   187fc:	bl	17108 <__assert_fail@plt+0x5908>
   18800:	cmp	r6, r0
   18804:	bhi	18868 <__assert_fail@plt+0x7068>
   18808:	add	r6, r0, #1
   1880c:	movw	r0, #58064	; 0xe2d0
   18810:	movt	r0, #2
   18814:	str	r6, [sl, r5, lsl #3]
   18818:	cmp	r4, r0
   1881c:	beq	18828 <__assert_fail@plt+0x7028>
   18820:	mov	r0, r4
   18824:	bl	1a788 <__assert_fail@plt+0x8f88>
   18828:	mov	r0, r6
   1882c:	bl	196e8 <__assert_fail@plt+0x7ee8>
   18830:	str	r0, [r9]
   18834:	mov	r4, r0
   18838:	add	r3, sp, #8
   1883c:	ldr	r0, [r7]
   18840:	ldr	r1, [r7, #40]	; 0x28
   18844:	ldr	r2, [r7, #44]	; 0x2c
   18848:	stm	sp, {r0, r8}
   1884c:	ldr	r0, [sp, #20]
   18850:	stm	r3, {r0, r1, r2}
   18854:	ldr	r2, [sp, #32]
   18858:	ldr	r3, [sp, #36]	; 0x24
   1885c:	mov	r0, r4
   18860:	mov	r1, r6
   18864:	bl	17108 <__assert_fail@plt+0x5908>
   18868:	ldr	r1, [sp, #24]
   1886c:	ldr	r0, [sp, #28]
   18870:	str	r1, [r0]
   18874:	mov	r0, r4
   18878:	sub	sp, fp, #28
   1887c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18880:	bl	117d0 <abort@plt>
   18884:	movw	r3, #58016	; 0xe2a0
   18888:	movt	r3, #2
   1888c:	b	186f4 <__assert_fail@plt+0x6ef4>
   18890:	movw	r3, #58016	; 0xe2a0
   18894:	mov	r1, r0
   18898:	mov	r0, #0
   1889c:	mvn	r2, #0
   188a0:	movt	r3, #2
   188a4:	b	186f4 <__assert_fail@plt+0x6ef4>
   188a8:	movw	r3, #58016	; 0xe2a0
   188ac:	mov	r2, r1
   188b0:	mov	r1, r0
   188b4:	mov	r0, #0
   188b8:	movt	r3, #2
   188bc:	b	186f4 <__assert_fail@plt+0x6ef4>
   188c0:	push	{fp, lr}
   188c4:	mov	fp, sp
   188c8:	sub	sp, sp, #48	; 0x30
   188cc:	vmov.i32	q8, #0	; 0x00000000
   188d0:	mov	ip, #32
   188d4:	mov	r3, sp
   188d8:	mov	lr, r2
   188dc:	cmp	r1, #10
   188e0:	add	r2, r3, #16
   188e4:	vst1.64	{d16-d17}, [r3], ip
   188e8:	vst1.64	{d16-d17}, [r2]
   188ec:	vst1.64	{d16-d17}, [r3]
   188f0:	beq	18910 <__assert_fail@plt+0x7110>
   188f4:	str	r1, [sp]
   188f8:	mov	r3, sp
   188fc:	mov	r1, lr
   18900:	mvn	r2, #0
   18904:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18908:	mov	sp, fp
   1890c:	pop	{fp, pc}
   18910:	bl	117d0 <abort@plt>
   18914:	push	{r4, sl, fp, lr}
   18918:	add	fp, sp, #8
   1891c:	sub	sp, sp, #48	; 0x30
   18920:	vmov.i32	q8, #0	; 0x00000000
   18924:	mov	ip, r3
   18928:	mov	r3, sp
   1892c:	mov	lr, #32
   18930:	cmp	r1, #10
   18934:	add	r4, r3, #16
   18938:	vst1.64	{d16-d17}, [r3], lr
   1893c:	vst1.64	{d16-d17}, [r4]
   18940:	vst1.64	{d16-d17}, [r3]
   18944:	beq	18964 <__assert_fail@plt+0x7164>
   18948:	str	r1, [sp]
   1894c:	mov	r1, r2
   18950:	mov	r3, sp
   18954:	mov	r2, ip
   18958:	bl	186f4 <__assert_fail@plt+0x6ef4>
   1895c:	sub	sp, fp, #8
   18960:	pop	{r4, sl, fp, pc}
   18964:	bl	117d0 <abort@plt>
   18968:	push	{fp, lr}
   1896c:	mov	fp, sp
   18970:	sub	sp, sp, #48	; 0x30
   18974:	vmov.i32	q8, #0	; 0x00000000
   18978:	mov	r3, sp
   1897c:	mov	ip, #32
   18980:	cmp	r0, #10
   18984:	add	r2, r3, #16
   18988:	vst1.64	{d16-d17}, [r3], ip
   1898c:	vst1.64	{d16-d17}, [r2]
   18990:	vst1.64	{d16-d17}, [r3]
   18994:	beq	189b4 <__assert_fail@plt+0x71b4>
   18998:	str	r0, [sp]
   1899c:	mov	r3, sp
   189a0:	mov	r0, #0
   189a4:	mvn	r2, #0
   189a8:	bl	186f4 <__assert_fail@plt+0x6ef4>
   189ac:	mov	sp, fp
   189b0:	pop	{fp, pc}
   189b4:	bl	117d0 <abort@plt>
   189b8:	push	{fp, lr}
   189bc:	mov	fp, sp
   189c0:	sub	sp, sp, #48	; 0x30
   189c4:	vmov.i32	q8, #0	; 0x00000000
   189c8:	mov	r3, sp
   189cc:	mov	ip, #32
   189d0:	cmp	r0, #10
   189d4:	add	lr, r3, #16
   189d8:	vst1.64	{d16-d17}, [r3], ip
   189dc:	vst1.64	{d16-d17}, [lr]
   189e0:	vst1.64	{d16-d17}, [r3]
   189e4:	beq	18a00 <__assert_fail@plt+0x7200>
   189e8:	str	r0, [sp]
   189ec:	mov	r3, sp
   189f0:	mov	r0, #0
   189f4:	bl	186f4 <__assert_fail@plt+0x6ef4>
   189f8:	mov	sp, fp
   189fc:	pop	{fp, pc}
   18a00:	bl	117d0 <abort@plt>
   18a04:	push	{r4, sl, fp, lr}
   18a08:	add	fp, sp, #8
   18a0c:	sub	sp, sp, #48	; 0x30
   18a10:	mov	lr, r0
   18a14:	movw	r0, #58016	; 0xe2a0
   18a18:	mov	ip, r1
   18a1c:	mov	r1, #32
   18a20:	mov	r4, #1
   18a24:	movt	r0, #2
   18a28:	add	r3, r0, #16
   18a2c:	vld1.64	{d16-d17}, [r0], r1
   18a30:	vld1.64	{d20-d21}, [r0]
   18a34:	vld1.64	{d18-d19}, [r3]
   18a38:	mov	r3, sp
   18a3c:	add	r0, r3, #32
   18a40:	add	r1, r3, #16
   18a44:	vst1.64	{d20-d21}, [r0]
   18a48:	mov	r0, #28
   18a4c:	vst1.64	{d18-d19}, [r1]
   18a50:	mov	r1, r3
   18a54:	and	r0, r0, r2, lsr #3
   18a58:	and	r2, r2, #31
   18a5c:	vst1.64	{d16-d17}, [r1], r0
   18a60:	ldr	r0, [r1, #8]
   18a64:	bic	r4, r4, r0, lsr r2
   18a68:	eor	r0, r0, r4, lsl r2
   18a6c:	mov	r2, ip
   18a70:	str	r0, [r1, #8]
   18a74:	mov	r0, #0
   18a78:	mov	r1, lr
   18a7c:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18a80:	sub	sp, fp, #8
   18a84:	pop	{r4, sl, fp, pc}
   18a88:	push	{fp, lr}
   18a8c:	mov	fp, sp
   18a90:	sub	sp, sp, #48	; 0x30
   18a94:	mov	ip, r0
   18a98:	movw	r0, #58016	; 0xe2a0
   18a9c:	mov	r2, #32
   18aa0:	movt	r0, #2
   18aa4:	add	r3, r0, #16
   18aa8:	vld1.64	{d16-d17}, [r0], r2
   18aac:	vld1.64	{d20-d21}, [r0]
   18ab0:	vld1.64	{d18-d19}, [r3]
   18ab4:	mov	r3, sp
   18ab8:	add	r0, r3, #32
   18abc:	add	r2, r3, #16
   18ac0:	vst1.64	{d20-d21}, [r0]
   18ac4:	mov	r0, #28
   18ac8:	vst1.64	{d18-d19}, [r2]
   18acc:	mov	r2, r3
   18ad0:	and	r0, r0, r1, lsr #3
   18ad4:	and	r1, r1, #31
   18ad8:	vst1.64	{d16-d17}, [r2], r0
   18adc:	mov	r0, #1
   18ae0:	ldr	lr, [r2, #8]
   18ae4:	bic	r0, r0, lr, lsr r1
   18ae8:	eor	r0, lr, r0, lsl r1
   18aec:	mov	r1, ip
   18af0:	str	r0, [r2, #8]
   18af4:	mov	r0, #0
   18af8:	mvn	r2, #0
   18afc:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18b00:	mov	sp, fp
   18b04:	pop	{fp, pc}
   18b08:	push	{fp, lr}
   18b0c:	mov	fp, sp
   18b10:	sub	sp, sp, #48	; 0x30
   18b14:	mov	r1, r0
   18b18:	movw	r0, #58016	; 0xe2a0
   18b1c:	mov	r3, #32
   18b20:	movt	r0, #2
   18b24:	add	r2, r0, #16
   18b28:	vld1.64	{d16-d17}, [r0], r3
   18b2c:	mov	r3, sp
   18b30:	vld1.64	{d18-d19}, [r2]
   18b34:	vld1.64	{d20-d21}, [r0]
   18b38:	add	r2, r3, #16
   18b3c:	add	r0, r3, #32
   18b40:	vst1.64	{d18-d19}, [r2]
   18b44:	vst1.64	{d20-d21}, [r0]
   18b48:	mov	r0, #12
   18b4c:	mov	r2, r3
   18b50:	vst1.64	{d16-d17}, [r2], r0
   18b54:	ldr	r0, [r2]
   18b58:	orr	r0, r0, #67108864	; 0x4000000
   18b5c:	str	r0, [r2]
   18b60:	mov	r0, #0
   18b64:	mvn	r2, #0
   18b68:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18b6c:	mov	sp, fp
   18b70:	pop	{fp, pc}
   18b74:	push	{fp, lr}
   18b78:	mov	fp, sp
   18b7c:	sub	sp, sp, #48	; 0x30
   18b80:	mov	ip, r1
   18b84:	mov	r1, r0
   18b88:	movw	r0, #58016	; 0xe2a0
   18b8c:	mov	r2, #32
   18b90:	movt	r0, #2
   18b94:	add	r3, r0, #16
   18b98:	vld1.64	{d16-d17}, [r0], r2
   18b9c:	vld1.64	{d18-d19}, [r3]
   18ba0:	vld1.64	{d20-d21}, [r0]
   18ba4:	mov	r3, sp
   18ba8:	add	r2, r3, #16
   18bac:	add	r0, r3, #32
   18bb0:	vst1.64	{d18-d19}, [r2]
   18bb4:	vst1.64	{d20-d21}, [r0]
   18bb8:	mov	r0, #12
   18bbc:	mov	r2, r3
   18bc0:	vst1.64	{d16-d17}, [r2], r0
   18bc4:	ldr	r0, [r2]
   18bc8:	orr	r0, r0, #67108864	; 0x4000000
   18bcc:	str	r0, [r2]
   18bd0:	mov	r0, #0
   18bd4:	mov	r2, ip
   18bd8:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18bdc:	mov	sp, fp
   18be0:	pop	{fp, pc}
   18be4:	push	{r4, sl, fp, lr}
   18be8:	add	fp, sp, #8
   18bec:	sub	sp, sp, #96	; 0x60
   18bf0:	vmov.i32	q8, #0	; 0x00000000
   18bf4:	mov	ip, r2
   18bf8:	mov	r2, sp
   18bfc:	mov	r4, #28
   18c00:	cmp	r1, #10
   18c04:	mov	r3, r2
   18c08:	add	lr, r2, #16
   18c0c:	vst1.64	{d16-d17}, [r3], r4
   18c10:	vst1.64	{d16-d17}, [lr]
   18c14:	vst1.32	{d16-d17}, [r3]
   18c18:	beq	18c68 <__assert_fail@plt+0x7468>
   18c1c:	vld1.64	{d16-d17}, [r2], r4
   18c20:	vld1.64	{d18-d19}, [lr]
   18c24:	add	r3, sp, #48	; 0x30
   18c28:	vld1.32	{d20-d21}, [r2]
   18c2c:	add	r2, r3, #20
   18c30:	add	r4, r3, #4
   18c34:	vst1.32	{d18-d19}, [r2]
   18c38:	add	r2, r3, #32
   18c3c:	vst1.32	{d16-d17}, [r4]
   18c40:	vst1.32	{d20-d21}, [r2]
   18c44:	str	r1, [sp, #48]	; 0x30
   18c48:	mvn	r2, #0
   18c4c:	ldr	r1, [sp, #60]	; 0x3c
   18c50:	orr	r1, r1, #67108864	; 0x4000000
   18c54:	str	r1, [sp, #60]	; 0x3c
   18c58:	mov	r1, ip
   18c5c:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18c60:	sub	sp, fp, #8
   18c64:	pop	{r4, sl, fp, pc}
   18c68:	bl	117d0 <abort@plt>
   18c6c:	push	{r4, r5, r6, sl, fp, lr}
   18c70:	add	fp, sp, #16
   18c74:	sub	sp, sp, #48	; 0x30
   18c78:	mov	ip, r3
   18c7c:	movw	r3, #58016	; 0xe2a0
   18c80:	mov	r6, #32
   18c84:	cmp	r1, #0
   18c88:	mov	r4, sp
   18c8c:	movt	r3, #2
   18c90:	cmpne	r2, #0
   18c94:	add	r5, r4, #16
   18c98:	add	lr, r3, #16
   18c9c:	vld1.64	{d16-d17}, [r3], r6
   18ca0:	vld1.64	{d18-d19}, [lr]
   18ca4:	vld1.64	{d20-d21}, [r3]
   18ca8:	mov	r3, #10
   18cac:	vst1.64	{d16-d17}, [r4], r6
   18cb0:	vst1.64	{d18-d19}, [r5]
   18cb4:	vst1.64	{d20-d21}, [r4]
   18cb8:	str	r3, [sp]
   18cbc:	bne	18cc4 <__assert_fail@plt+0x74c4>
   18cc0:	bl	117d0 <abort@plt>
   18cc4:	str	r2, [sp, #44]	; 0x2c
   18cc8:	str	r1, [sp, #40]	; 0x28
   18ccc:	mov	r3, sp
   18cd0:	mov	r1, ip
   18cd4:	mvn	r2, #0
   18cd8:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18cdc:	sub	sp, fp, #16
   18ce0:	pop	{r4, r5, r6, sl, fp, pc}
   18ce4:	push	{r4, r5, r6, sl, fp, lr}
   18ce8:	add	fp, sp, #16
   18cec:	sub	sp, sp, #48	; 0x30
   18cf0:	mov	lr, r3
   18cf4:	movw	r3, #58016	; 0xe2a0
   18cf8:	mov	r6, #32
   18cfc:	cmp	r1, #0
   18d00:	mov	r4, sp
   18d04:	movt	r3, #2
   18d08:	cmpne	r2, #0
   18d0c:	add	r5, r4, #16
   18d10:	add	ip, r3, #16
   18d14:	vld1.64	{d16-d17}, [r3], r6
   18d18:	vld1.64	{d18-d19}, [ip]
   18d1c:	vld1.64	{d20-d21}, [r3]
   18d20:	mov	r3, #10
   18d24:	vst1.64	{d16-d17}, [r4], r6
   18d28:	vst1.64	{d18-d19}, [r5]
   18d2c:	vst1.64	{d20-d21}, [r4]
   18d30:	str	r3, [sp]
   18d34:	bne	18d3c <__assert_fail@plt+0x753c>
   18d38:	bl	117d0 <abort@plt>
   18d3c:	ldr	ip, [fp, #8]
   18d40:	str	r2, [sp, #44]	; 0x2c
   18d44:	str	r1, [sp, #40]	; 0x28
   18d48:	mov	r3, sp
   18d4c:	mov	r1, lr
   18d50:	mov	r2, ip
   18d54:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18d58:	sub	sp, fp, #16
   18d5c:	pop	{r4, r5, r6, sl, fp, pc}
   18d60:	push	{r4, sl, fp, lr}
   18d64:	add	fp, sp, #8
   18d68:	sub	sp, sp, #48	; 0x30
   18d6c:	movw	r3, #58016	; 0xe2a0
   18d70:	mov	lr, #32
   18d74:	mov	ip, r2
   18d78:	cmp	r0, #0
   18d7c:	movt	r3, #2
   18d80:	cmpne	r1, #0
   18d84:	add	r2, r3, #16
   18d88:	vld1.64	{d16-d17}, [r3], lr
   18d8c:	vld1.64	{d20-d21}, [r3]
   18d90:	vld1.64	{d18-d19}, [r2]
   18d94:	mov	r2, sp
   18d98:	add	r4, r2, #16
   18d9c:	vst1.64	{d16-d17}, [r2], lr
   18da0:	vst1.64	{d20-d21}, [r2]
   18da4:	mov	r2, #10
   18da8:	vst1.64	{d18-d19}, [r4]
   18dac:	str	r2, [sp]
   18db0:	bne	18db8 <__assert_fail@plt+0x75b8>
   18db4:	bl	117d0 <abort@plt>
   18db8:	str	r1, [sp, #44]	; 0x2c
   18dbc:	str	r0, [sp, #40]	; 0x28
   18dc0:	mov	r3, sp
   18dc4:	mov	r0, #0
   18dc8:	mov	r1, ip
   18dcc:	mvn	r2, #0
   18dd0:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18dd4:	sub	sp, fp, #8
   18dd8:	pop	{r4, sl, fp, pc}
   18ddc:	push	{r4, r5, fp, lr}
   18de0:	add	fp, sp, #8
   18de4:	sub	sp, sp, #48	; 0x30
   18de8:	mov	ip, r3
   18dec:	movw	r3, #58016	; 0xe2a0
   18df0:	mov	r4, #32
   18df4:	mov	lr, r2
   18df8:	cmp	r0, #0
   18dfc:	movt	r3, #2
   18e00:	cmpne	r1, #0
   18e04:	add	r2, r3, #16
   18e08:	vld1.64	{d16-d17}, [r3], r4
   18e0c:	vld1.64	{d20-d21}, [r3]
   18e10:	vld1.64	{d18-d19}, [r2]
   18e14:	mov	r2, sp
   18e18:	add	r5, r2, #16
   18e1c:	vst1.64	{d16-d17}, [r2], r4
   18e20:	vst1.64	{d20-d21}, [r2]
   18e24:	mov	r2, #10
   18e28:	vst1.64	{d18-d19}, [r5]
   18e2c:	str	r2, [sp]
   18e30:	bne	18e38 <__assert_fail@plt+0x7638>
   18e34:	bl	117d0 <abort@plt>
   18e38:	str	r1, [sp, #44]	; 0x2c
   18e3c:	str	r0, [sp, #40]	; 0x28
   18e40:	mov	r3, sp
   18e44:	mov	r0, #0
   18e48:	mov	r1, lr
   18e4c:	mov	r2, ip
   18e50:	bl	186f4 <__assert_fail@plt+0x6ef4>
   18e54:	sub	sp, fp, #8
   18e58:	pop	{r4, r5, fp, pc}
   18e5c:	movw	r3, #57720	; 0xe178
   18e60:	movt	r3, #2
   18e64:	b	186f4 <__assert_fail@plt+0x6ef4>
   18e68:	movw	r3, #57720	; 0xe178
   18e6c:	mov	r2, r1
   18e70:	mov	r1, r0
   18e74:	mov	r0, #0
   18e78:	movt	r3, #2
   18e7c:	b	186f4 <__assert_fail@plt+0x6ef4>
   18e80:	movw	r3, #57720	; 0xe178
   18e84:	mvn	r2, #0
   18e88:	movt	r3, #2
   18e8c:	b	186f4 <__assert_fail@plt+0x6ef4>
   18e90:	movw	r3, #57720	; 0xe178
   18e94:	mov	r1, r0
   18e98:	mov	r0, #0
   18e9c:	mvn	r2, #0
   18ea0:	movt	r3, #2
   18ea4:	b	186f4 <__assert_fail@plt+0x6ef4>
   18ea8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18eac:	add	fp, sp, #24
   18eb0:	movw	r8, #0
   18eb4:	mov	r6, r2
   18eb8:	mov	r4, r1
   18ebc:	mov	r5, r0
   18ec0:	movt	r8, #32752	; 0x7ff0
   18ec4:	mov	r0, r5
   18ec8:	mov	r1, r4
   18ecc:	mov	r2, r6
   18ed0:	bl	11464 <read@plt>
   18ed4:	mov	r7, r0
   18ed8:	cmn	r0, #1
   18edc:	bgt	18f04 <__assert_fail@plt+0x7704>
   18ee0:	bl	11680 <__errno_location@plt>
   18ee4:	ldr	r0, [r0]
   18ee8:	cmp	r0, #4
   18eec:	beq	18ec4 <__assert_fail@plt+0x76c4>
   18ef0:	cmp	r6, r8
   18ef4:	bls	18f04 <__assert_fail@plt+0x7704>
   18ef8:	cmp	r0, #22
   18efc:	mov	r6, r8
   18f00:	beq	18ec4 <__assert_fail@plt+0x76c4>
   18f04:	mov	r0, r7
   18f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f0c:	push	{r4, r5, fp, lr}
   18f10:	add	fp, sp, #8
   18f14:	mov	r4, r1
   18f18:	mov	r1, #0
   18f1c:	mov	r5, r0
   18f20:	mov	r2, r4
   18f24:	bl	116d4 <memchr@plt>
   18f28:	sub	r1, r0, r5
   18f2c:	cmp	r0, #0
   18f30:	addne	r4, r1, #1
   18f34:	mov	r0, r4
   18f38:	pop	{r4, r5, fp, pc}
   18f3c:	push	{r4, r5, r6, r7, fp, lr}
   18f40:	add	fp, sp, #16
   18f44:	mov	r4, r0
   18f48:	cmp	r0, #2
   18f4c:	bhi	18f7c <__assert_fail@plt+0x777c>
   18f50:	mov	r0, r4
   18f54:	bl	1ad44 <__assert_fail@plt+0x9544>
   18f58:	mov	r5, r0
   18f5c:	bl	11680 <__errno_location@plt>
   18f60:	ldr	r7, [r0]
   18f64:	mov	r6, r0
   18f68:	mov	r0, r4
   18f6c:	bl	117e8 <close@plt>
   18f70:	mov	r0, r5
   18f74:	str	r7, [r6]
   18f78:	pop	{r4, r5, r6, r7, fp, pc}
   18f7c:	mov	r0, r4
   18f80:	pop	{r4, r5, r6, r7, fp, pc}
   18f84:	push	{r4, r5, r6, sl, fp, lr}
   18f88:	add	fp, sp, #16
   18f8c:	mov	r4, r0
   18f90:	bl	116f8 <pipe@plt>
   18f94:	mvn	r5, #0
   18f98:	cmp	r0, #0
   18f9c:	beq	18fa8 <__assert_fail@plt+0x77a8>
   18fa0:	mov	r0, r5
   18fa4:	pop	{r4, r5, r6, sl, fp, pc}
   18fa8:	ldr	r0, [r4]
   18fac:	bl	18f3c <__assert_fail@plt+0x773c>
   18fb0:	cmn	r0, #1
   18fb4:	str	r0, [r4]
   18fb8:	ble	18fd8 <__assert_fail@plt+0x77d8>
   18fbc:	ldr	r0, [r4, #4]
   18fc0:	bl	18f3c <__assert_fail@plt+0x773c>
   18fc4:	mov	r5, #0
   18fc8:	cmp	r0, #0
   18fcc:	str	r0, [r4, #4]
   18fd0:	bpl	18fa0 <__assert_fail@plt+0x77a0>
   18fd4:	b	18fdc <__assert_fail@plt+0x77dc>
   18fd8:	mov	r5, #1
   18fdc:	bl	11680 <__errno_location@plt>
   18fe0:	mov	r6, r0
   18fe4:	ldr	r0, [r4, r5, lsl #2]
   18fe8:	ldr	r4, [r6]
   18fec:	bl	117e8 <close@plt>
   18ff0:	mvn	r5, #0
   18ff4:	str	r4, [r6]
   18ff8:	mov	r0, r5
   18ffc:	pop	{r4, r5, r6, sl, fp, pc}
   19000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19004:	add	fp, sp, #24
   19008:	sub	sp, sp, #32
   1900c:	ldr	r7, [fp, #12]
   19010:	ldr	r6, [fp, #8]
   19014:	mov	r4, r2
   19018:	mov	r5, r0
   1901c:	cmp	r1, #0
   19020:	beq	19040 <__assert_fail@plt+0x7840>
   19024:	mov	r2, r1
   19028:	movw	r1, #52908	; 0xceac
   1902c:	str	r3, [sp]
   19030:	mov	r0, r5
   19034:	mov	r3, r4
   19038:	movt	r1, #1
   1903c:	b	19050 <__assert_fail@plt+0x7850>
   19040:	movw	r1, #52920	; 0xceb8
   19044:	mov	r0, r5
   19048:	mov	r2, r4
   1904c:	movt	r1, #1
   19050:	bl	11674 <fprintf@plt>
   19054:	movw	r1, #52927	; 0xcebf
   19058:	mov	r0, #0
   1905c:	mov	r2, #5
   19060:	movt	r1, #1
   19064:	bl	114dc <dcgettext@plt>
   19068:	movw	r1, #53623	; 0xd177
   1906c:	mov	r2, r0
   19070:	mov	r0, r5
   19074:	movw	r3, #2022	; 0x7e6
   19078:	movt	r1, #1
   1907c:	bl	11674 <fprintf@plt>
   19080:	mov	r0, #10
   19084:	mov	r1, r5
   19088:	bl	11758 <fputc@plt>
   1908c:	movw	r1, #52931	; 0xcec3
   19090:	mov	r0, #0
   19094:	mov	r2, #5
   19098:	movt	r1, #1
   1909c:	bl	114dc <dcgettext@plt>
   190a0:	movw	r2, #53102	; 0xcf6e
   190a4:	mov	r1, r0
   190a8:	mov	r0, r5
   190ac:	movt	r2, #1
   190b0:	bl	11674 <fprintf@plt>
   190b4:	mov	r0, #10
   190b8:	mov	r1, r5
   190bc:	bl	11758 <fputc@plt>
   190c0:	cmp	r7, #9
   190c4:	bhi	19100 <__assert_fail@plt+0x7900>
   190c8:	add	r0, pc, #0
   190cc:	ldr	pc, [r0, r7, lsl #2]
   190d0:	strdeq	r9, [r1], -r8
   190d4:	andeq	r9, r1, ip, lsl #2
   190d8:	andeq	r9, r1, r8, lsr r1
   190dc:	andeq	r9, r1, r4, ror #2
   190e0:	muleq	r1, r8, r1
   190e4:	ldrdeq	r9, [r1], -r0
   190e8:	andeq	r9, r1, r0, lsl r2
   190ec:	andeq	r9, r1, r8, asr r2
   190f0:	strdeq	r9, [r1], -r4
   190f4:	muleq	r1, ip, r2
   190f8:	sub	sp, fp, #24
   190fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19100:	movw	r1, #53455	; 0xd0cf
   19104:	movt	r1, #1
   19108:	b	192a4 <__assert_fail@plt+0x7aa4>
   1910c:	movw	r1, #53136	; 0xcf90
   19110:	mov	r0, #0
   19114:	mov	r2, #5
   19118:	movt	r1, #1
   1911c:	bl	114dc <dcgettext@plt>
   19120:	ldr	r2, [r6]
   19124:	mov	r1, r0
   19128:	mov	r0, r5
   1912c:	sub	sp, fp, #24
   19130:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19134:	b	11674 <fprintf@plt>
   19138:	movw	r1, #53152	; 0xcfa0
   1913c:	mov	r0, #0
   19140:	mov	r2, #5
   19144:	movt	r1, #1
   19148:	bl	114dc <dcgettext@plt>
   1914c:	ldm	r6, {r2, r3}
   19150:	mov	r1, r0
   19154:	mov	r0, r5
   19158:	sub	sp, fp, #24
   1915c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19160:	b	11674 <fprintf@plt>
   19164:	movw	r1, #53175	; 0xcfb7
   19168:	mov	r0, #0
   1916c:	mov	r2, #5
   19170:	movt	r1, #1
   19174:	bl	114dc <dcgettext@plt>
   19178:	mov	r1, r0
   1917c:	ldr	r0, [r6, #8]
   19180:	ldm	r6, {r2, r3}
   19184:	str	r0, [sp]
   19188:	mov	r0, r5
   1918c:	bl	11674 <fprintf@plt>
   19190:	sub	sp, fp, #24
   19194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19198:	movw	r1, #53203	; 0xcfd3
   1919c:	mov	r0, #0
   191a0:	mov	r2, #5
   191a4:	movt	r1, #1
   191a8:	bl	114dc <dcgettext@plt>
   191ac:	mov	r1, r0
   191b0:	ldr	r0, [r6, #8]
   191b4:	ldm	r6, {r2, r3}
   191b8:	ldr	r7, [r6, #12]
   191bc:	stm	sp, {r0, r7}
   191c0:	mov	r0, r5
   191c4:	bl	11674 <fprintf@plt>
   191c8:	sub	sp, fp, #24
   191cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191d0:	movw	r1, #53235	; 0xcff3
   191d4:	mov	r0, #0
   191d8:	mov	r2, #5
   191dc:	movt	r1, #1
   191e0:	bl	114dc <dcgettext@plt>
   191e4:	mov	r1, r0
   191e8:	ldm	r6, {r2, r3}
   191ec:	ldr	r0, [r6, #8]
   191f0:	ldr	r7, [r6, #12]
   191f4:	ldr	r6, [r6, #16]
   191f8:	stm	sp, {r0, r7}
   191fc:	str	r6, [sp, #8]
   19200:	mov	r0, r5
   19204:	bl	11674 <fprintf@plt>
   19208:	sub	sp, fp, #24
   1920c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19210:	movw	r1, #53271	; 0xd017
   19214:	mov	r0, #0
   19218:	mov	r2, #5
   1921c:	movt	r1, #1
   19220:	bl	114dc <dcgettext@plt>
   19224:	mov	r1, r0
   19228:	ldm	r6, {r2, r3}
   1922c:	ldr	r0, [r6, #8]
   19230:	ldr	r7, [r6, #12]
   19234:	ldr	r4, [r6, #16]
   19238:	ldr	r6, [r6, #20]
   1923c:	stm	sp, {r0, r7}
   19240:	str	r4, [sp, #8]
   19244:	str	r6, [sp, #12]
   19248:	mov	r0, r5
   1924c:	bl	11674 <fprintf@plt>
   19250:	sub	sp, fp, #24
   19254:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19258:	movw	r1, #53311	; 0xd03f
   1925c:	mov	r0, #0
   19260:	mov	r2, #5
   19264:	movt	r1, #1
   19268:	bl	114dc <dcgettext@plt>
   1926c:	mov	ip, r0
   19270:	ldm	r6, {r2, r3}
   19274:	ldr	r0, [r6, #8]
   19278:	ldr	r7, [r6, #12]
   1927c:	ldr	r4, [r6, #16]
   19280:	ldr	r1, [r6, #20]
   19284:	ldr	r6, [r6, #24]
   19288:	stm	sp, {r0, r7}
   1928c:	str	r4, [sp, #8]
   19290:	str	r1, [sp, #12]
   19294:	str	r6, [sp, #16]
   19298:	b	1933c <__assert_fail@plt+0x7b3c>
   1929c:	movw	r1, #53403	; 0xd09b
   192a0:	movt	r1, #1
   192a4:	mov	r0, #0
   192a8:	mov	r2, #5
   192ac:	bl	114dc <dcgettext@plt>
   192b0:	mov	ip, r0
   192b4:	ldr	r2, [r6]
   192b8:	ldr	r3, [r6, #4]
   192bc:	ldr	r0, [r6, #8]
   192c0:	ldr	r7, [r6, #12]
   192c4:	ldr	r4, [r6, #16]
   192c8:	ldr	r1, [r6, #20]
   192cc:	ldr	lr, [r6, #24]
   192d0:	ldr	r8, [r6, #28]
   192d4:	ldr	r6, [r6, #32]
   192d8:	stm	sp, {r0, r7}
   192dc:	str	r4, [sp, #8]
   192e0:	str	r1, [sp, #12]
   192e4:	str	lr, [sp, #16]
   192e8:	str	r8, [sp, #20]
   192ec:	str	r6, [sp, #24]
   192f0:	b	1933c <__assert_fail@plt+0x7b3c>
   192f4:	movw	r1, #53355	; 0xd06b
   192f8:	mov	r0, #0
   192fc:	mov	r2, #5
   19300:	movt	r1, #1
   19304:	bl	114dc <dcgettext@plt>
   19308:	mov	ip, r0
   1930c:	ldm	r6, {r2, r3}
   19310:	ldr	r0, [r6, #8]
   19314:	ldr	r7, [r6, #12]
   19318:	ldr	r4, [r6, #16]
   1931c:	ldr	r1, [r6, #20]
   19320:	ldr	lr, [r6, #24]
   19324:	ldr	r6, [r6, #28]
   19328:	stm	sp, {r0, r7}
   1932c:	str	r4, [sp, #8]
   19330:	str	r1, [sp, #12]
   19334:	str	lr, [sp, #16]
   19338:	str	r6, [sp, #20]
   1933c:	mov	r0, r5
   19340:	mov	r1, ip
   19344:	bl	11674 <fprintf@plt>
   19348:	sub	sp, fp, #24
   1934c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19350:	push	{r4, sl, fp, lr}
   19354:	add	fp, sp, #8
   19358:	sub	sp, sp, #8
   1935c:	ldr	ip, [fp, #8]
   19360:	mov	lr, #0
   19364:	ldr	r4, [ip, lr, lsl #2]
   19368:	add	lr, lr, #1
   1936c:	cmp	r4, #0
   19370:	bne	19364 <__assert_fail@plt+0x7b64>
   19374:	sub	r4, lr, #1
   19378:	str	ip, [sp]
   1937c:	str	r4, [sp, #4]
   19380:	bl	19000 <__assert_fail@plt+0x7800>
   19384:	sub	sp, fp, #8
   19388:	pop	{r4, sl, fp, pc}
   1938c:	push	{fp, lr}
   19390:	mov	fp, sp
   19394:	sub	sp, sp, #48	; 0x30
   19398:	ldr	ip, [fp, #8]
   1939c:	ldr	lr, [ip]
   193a0:	cmp	lr, #0
   193a4:	str	lr, [sp, #8]
   193a8:	beq	19444 <__assert_fail@plt+0x7c44>
   193ac:	ldr	lr, [ip, #4]
   193b0:	cmp	lr, #0
   193b4:	str	lr, [sp, #12]
   193b8:	beq	1944c <__assert_fail@plt+0x7c4c>
   193bc:	ldr	lr, [ip, #8]
   193c0:	cmp	lr, #0
   193c4:	str	lr, [sp, #16]
   193c8:	beq	19454 <__assert_fail@plt+0x7c54>
   193cc:	ldr	lr, [ip, #12]
   193d0:	cmp	lr, #0
   193d4:	str	lr, [sp, #20]
   193d8:	beq	1945c <__assert_fail@plt+0x7c5c>
   193dc:	ldr	lr, [ip, #16]
   193e0:	cmp	lr, #0
   193e4:	str	lr, [sp, #24]
   193e8:	beq	19464 <__assert_fail@plt+0x7c64>
   193ec:	ldr	lr, [ip, #20]
   193f0:	cmp	lr, #0
   193f4:	str	lr, [sp, #28]
   193f8:	beq	1946c <__assert_fail@plt+0x7c6c>
   193fc:	ldr	lr, [ip, #24]
   19400:	cmp	lr, #0
   19404:	str	lr, [sp, #32]
   19408:	beq	19474 <__assert_fail@plt+0x7c74>
   1940c:	ldr	lr, [ip, #28]
   19410:	cmp	lr, #0
   19414:	str	lr, [sp, #36]	; 0x24
   19418:	beq	1947c <__assert_fail@plt+0x7c7c>
   1941c:	ldr	lr, [ip, #32]
   19420:	cmp	lr, #0
   19424:	str	lr, [sp, #40]	; 0x28
   19428:	beq	19484 <__assert_fail@plt+0x7c84>
   1942c:	ldr	lr, [ip, #36]	; 0x24
   19430:	mov	ip, #10
   19434:	cmp	lr, #0
   19438:	str	lr, [sp, #44]	; 0x2c
   1943c:	movweq	ip, #9
   19440:	b	19488 <__assert_fail@plt+0x7c88>
   19444:	mov	ip, #0
   19448:	b	19488 <__assert_fail@plt+0x7c88>
   1944c:	mov	ip, #1
   19450:	b	19488 <__assert_fail@plt+0x7c88>
   19454:	mov	ip, #2
   19458:	b	19488 <__assert_fail@plt+0x7c88>
   1945c:	mov	ip, #3
   19460:	b	19488 <__assert_fail@plt+0x7c88>
   19464:	mov	ip, #4
   19468:	b	19488 <__assert_fail@plt+0x7c88>
   1946c:	mov	ip, #5
   19470:	b	19488 <__assert_fail@plt+0x7c88>
   19474:	mov	ip, #6
   19478:	b	19488 <__assert_fail@plt+0x7c88>
   1947c:	mov	ip, #7
   19480:	b	19488 <__assert_fail@plt+0x7c88>
   19484:	mov	ip, #8
   19488:	add	lr, sp, #8
   1948c:	str	ip, [sp, #4]
   19490:	str	lr, [sp]
   19494:	bl	19000 <__assert_fail@plt+0x7800>
   19498:	mov	sp, fp
   1949c:	pop	{fp, pc}
   194a0:	push	{fp, lr}
   194a4:	mov	fp, sp
   194a8:	sub	sp, sp, #56	; 0x38
   194ac:	add	ip, fp, #8
   194b0:	str	ip, [sp, #12]
   194b4:	ldr	lr, [fp, #8]
   194b8:	cmp	lr, #0
   194bc:	str	lr, [sp, #16]
   194c0:	beq	1955c <__assert_fail@plt+0x7d5c>
   194c4:	ldr	lr, [ip, #4]
   194c8:	cmp	lr, #0
   194cc:	str	lr, [sp, #20]
   194d0:	beq	19564 <__assert_fail@plt+0x7d64>
   194d4:	ldr	lr, [ip, #8]
   194d8:	cmp	lr, #0
   194dc:	str	lr, [sp, #24]
   194e0:	beq	1956c <__assert_fail@plt+0x7d6c>
   194e4:	ldr	lr, [ip, #12]
   194e8:	cmp	lr, #0
   194ec:	str	lr, [sp, #28]
   194f0:	beq	19574 <__assert_fail@plt+0x7d74>
   194f4:	ldr	lr, [ip, #16]
   194f8:	cmp	lr, #0
   194fc:	str	lr, [sp, #32]
   19500:	beq	1957c <__assert_fail@plt+0x7d7c>
   19504:	ldr	lr, [ip, #20]
   19508:	cmp	lr, #0
   1950c:	str	lr, [sp, #36]	; 0x24
   19510:	beq	19584 <__assert_fail@plt+0x7d84>
   19514:	ldr	lr, [ip, #24]
   19518:	cmp	lr, #0
   1951c:	str	lr, [sp, #40]	; 0x28
   19520:	beq	1958c <__assert_fail@plt+0x7d8c>
   19524:	ldr	lr, [ip, #28]
   19528:	cmp	lr, #0
   1952c:	str	lr, [sp, #44]	; 0x2c
   19530:	beq	19594 <__assert_fail@plt+0x7d94>
   19534:	ldr	lr, [ip, #32]
   19538:	cmp	lr, #0
   1953c:	str	lr, [sp, #48]	; 0x30
   19540:	beq	1959c <__assert_fail@plt+0x7d9c>
   19544:	ldr	lr, [ip, #36]	; 0x24
   19548:	mov	ip, #10
   1954c:	cmp	lr, #0
   19550:	str	lr, [sp, #52]	; 0x34
   19554:	movweq	ip, #9
   19558:	b	195a0 <__assert_fail@plt+0x7da0>
   1955c:	mov	ip, #0
   19560:	b	195a0 <__assert_fail@plt+0x7da0>
   19564:	mov	ip, #1
   19568:	b	195a0 <__assert_fail@plt+0x7da0>
   1956c:	mov	ip, #2
   19570:	b	195a0 <__assert_fail@plt+0x7da0>
   19574:	mov	ip, #3
   19578:	b	195a0 <__assert_fail@plt+0x7da0>
   1957c:	mov	ip, #4
   19580:	b	195a0 <__assert_fail@plt+0x7da0>
   19584:	mov	ip, #5
   19588:	b	195a0 <__assert_fail@plt+0x7da0>
   1958c:	mov	ip, #6
   19590:	b	195a0 <__assert_fail@plt+0x7da0>
   19594:	mov	ip, #7
   19598:	b	195a0 <__assert_fail@plt+0x7da0>
   1959c:	mov	ip, #8
   195a0:	add	lr, sp, #16
   195a4:	str	ip, [sp, #4]
   195a8:	str	lr, [sp]
   195ac:	bl	19000 <__assert_fail@plt+0x7800>
   195b0:	mov	sp, fp
   195b4:	pop	{fp, pc}
   195b8:	push	{fp, lr}
   195bc:	mov	fp, sp
   195c0:	movw	r0, #57820	; 0xe1dc
   195c4:	movt	r0, #2
   195c8:	ldr	r1, [r0]
   195cc:	mov	r0, #10
   195d0:	bl	11758 <fputc@plt>
   195d4:	movw	r1, #53515	; 0xd10b
   195d8:	mov	r0, #0
   195dc:	mov	r2, #5
   195e0:	movt	r1, #1
   195e4:	bl	114dc <dcgettext@plt>
   195e8:	movw	r1, #52394	; 0xccaa
   195ec:	movt	r1, #1
   195f0:	bl	11458 <printf@plt>
   195f4:	movw	r1, #53535	; 0xd11f
   195f8:	mov	r0, #0
   195fc:	mov	r2, #5
   19600:	movt	r1, #1
   19604:	bl	114dc <dcgettext@plt>
   19608:	movw	r1, #51994	; 0xcb1a
   1960c:	movw	r2, #52308	; 0xcc54
   19610:	movt	r1, #1
   19614:	movt	r2, #1
   19618:	bl	11458 <printf@plt>
   1961c:	movw	r1, #53555	; 0xd133
   19620:	mov	r0, #0
   19624:	mov	r2, #5
   19628:	movt	r1, #1
   1962c:	bl	114dc <dcgettext@plt>
   19630:	movw	r1, #53594	; 0xd15a
   19634:	movt	r1, #1
   19638:	pop	{fp, lr}
   1963c:	b	11458 <printf@plt>
   19640:	push	{r4, r5, r6, sl, fp, lr}
   19644:	add	fp, sp, #16
   19648:	mov	r4, r2
   1964c:	mov	r5, r1
   19650:	mov	r6, r0
   19654:	bl	1a940 <__assert_fail@plt+0x9140>
   19658:	cmp	r0, #0
   1965c:	popne	{r4, r5, r6, sl, fp, pc}
   19660:	cmp	r6, #0
   19664:	beq	19678 <__assert_fail@plt+0x7e78>
   19668:	cmp	r5, #0
   1966c:	cmpne	r4, #0
   19670:	bne	19678 <__assert_fail@plt+0x7e78>
   19674:	pop	{r4, r5, r6, sl, fp, pc}
   19678:	bl	19bf4 <__assert_fail@plt+0x83f4>
   1967c:	push	{r4, r5, r6, sl, fp, lr}
   19680:	add	fp, sp, #16
   19684:	mov	r4, r2
   19688:	mov	r5, r1
   1968c:	mov	r6, r0
   19690:	bl	1a940 <__assert_fail@plt+0x9140>
   19694:	cmp	r0, #0
   19698:	popne	{r4, r5, r6, sl, fp, pc}
   1969c:	cmp	r6, #0
   196a0:	beq	196b4 <__assert_fail@plt+0x7eb4>
   196a4:	cmp	r5, #0
   196a8:	cmpne	r4, #0
   196ac:	bne	196b4 <__assert_fail@plt+0x7eb4>
   196b0:	pop	{r4, r5, r6, sl, fp, pc}
   196b4:	bl	19bf4 <__assert_fail@plt+0x83f4>
   196b8:	push	{fp, lr}
   196bc:	mov	fp, sp
   196c0:	bl	1a858 <__assert_fail@plt+0x9058>
   196c4:	cmp	r0, #0
   196c8:	popne	{fp, pc}
   196cc:	bl	19bf4 <__assert_fail@plt+0x83f4>
   196d0:	push	{fp, lr}
   196d4:	mov	fp, sp
   196d8:	bl	1a858 <__assert_fail@plt+0x9058>
   196dc:	cmp	r0, #0
   196e0:	popne	{fp, pc}
   196e4:	bl	19bf4 <__assert_fail@plt+0x83f4>
   196e8:	push	{fp, lr}
   196ec:	mov	fp, sp
   196f0:	bl	1a858 <__assert_fail@plt+0x9058>
   196f4:	cmp	r0, #0
   196f8:	popne	{fp, pc}
   196fc:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19700:	push	{r4, r5, fp, lr}
   19704:	add	fp, sp, #8
   19708:	mov	r4, r1
   1970c:	mov	r5, r0
   19710:	bl	1a8ec <__assert_fail@plt+0x90ec>
   19714:	cmp	r0, #0
   19718:	popne	{r4, r5, fp, pc}
   1971c:	cmp	r5, #0
   19720:	beq	19730 <__assert_fail@plt+0x7f30>
   19724:	cmp	r4, #0
   19728:	bne	19730 <__assert_fail@plt+0x7f30>
   1972c:	pop	{r4, r5, fp, pc}
   19730:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19734:	push	{fp, lr}
   19738:	mov	fp, sp
   1973c:	cmp	r1, #0
   19740:	orreq	r1, r1, #1
   19744:	bl	1a8ec <__assert_fail@plt+0x90ec>
   19748:	cmp	r0, #0
   1974c:	popne	{fp, pc}
   19750:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19754:	push	{fp, lr}
   19758:	mov	fp, sp
   1975c:	clz	r3, r2
   19760:	lsr	ip, r3, #5
   19764:	clz	r3, r1
   19768:	lsr	r3, r3, #5
   1976c:	orrs	r3, r3, ip
   19770:	movwne	r1, #1
   19774:	movwne	r2, #1
   19778:	bl	1a940 <__assert_fail@plt+0x9140>
   1977c:	cmp	r0, #0
   19780:	popne	{fp, pc}
   19784:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19788:	push	{fp, lr}
   1978c:	mov	fp, sp
   19790:	mov	r2, r1
   19794:	mov	r1, r0
   19798:	mov	r0, #0
   1979c:	bl	1a940 <__assert_fail@plt+0x9140>
   197a0:	cmp	r0, #0
   197a4:	popne	{fp, pc}
   197a8:	bl	19bf4 <__assert_fail@plt+0x83f4>
   197ac:	push	{fp, lr}
   197b0:	mov	fp, sp
   197b4:	mov	r2, r1
   197b8:	mov	r1, r0
   197bc:	clz	r0, r2
   197c0:	clz	r3, r1
   197c4:	lsr	r0, r0, #5
   197c8:	lsr	r3, r3, #5
   197cc:	orrs	r0, r3, r0
   197d0:	mov	r0, #0
   197d4:	movwne	r1, #1
   197d8:	movwne	r2, #1
   197dc:	bl	1a940 <__assert_fail@plt+0x9140>
   197e0:	cmp	r0, #0
   197e4:	popne	{fp, pc}
   197e8:	bl	19bf4 <__assert_fail@plt+0x83f4>
   197ec:	push	{r4, r5, r6, sl, fp, lr}
   197f0:	add	fp, sp, #16
   197f4:	ldr	r5, [r1]
   197f8:	mov	r4, r1
   197fc:	mov	r6, r0
   19800:	cmp	r0, #0
   19804:	beq	1981c <__assert_fail@plt+0x801c>
   19808:	mov	r0, #1
   1980c:	add	r0, r0, r5, lsr #1
   19810:	adds	r5, r5, r0
   19814:	bcc	19824 <__assert_fail@plt+0x8024>
   19818:	b	19860 <__assert_fail@plt+0x8060>
   1981c:	cmp	r5, #0
   19820:	movweq	r5, #64	; 0x40
   19824:	mov	r0, r6
   19828:	mov	r1, r5
   1982c:	mov	r2, #1
   19830:	bl	1a940 <__assert_fail@plt+0x9140>
   19834:	cmp	r5, #0
   19838:	mov	r1, r5
   1983c:	movwne	r1, #1
   19840:	cmp	r0, #0
   19844:	bne	19858 <__assert_fail@plt+0x8058>
   19848:	clz	r2, r6
   1984c:	lsr	r2, r2, #5
   19850:	orrs	r1, r2, r1
   19854:	bne	19860 <__assert_fail@plt+0x8060>
   19858:	str	r5, [r4]
   1985c:	pop	{r4, r5, r6, sl, fp, pc}
   19860:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19864:	push	{r4, r5, r6, r7, fp, lr}
   19868:	add	fp, sp, #16
   1986c:	ldr	r5, [r1]
   19870:	mov	r6, r2
   19874:	mov	r4, r1
   19878:	mov	r7, r0
   1987c:	cmp	r0, #0
   19880:	beq	19898 <__assert_fail@plt+0x8098>
   19884:	mov	r0, #1
   19888:	add	r0, r0, r5, lsr #1
   1988c:	adds	r5, r5, r0
   19890:	bcc	198b0 <__assert_fail@plt+0x80b0>
   19894:	b	198e4 <__assert_fail@plt+0x80e4>
   19898:	cmp	r5, #0
   1989c:	bne	198b0 <__assert_fail@plt+0x80b0>
   198a0:	mov	r0, #64	; 0x40
   198a4:	cmp	r6, #64	; 0x40
   198a8:	udiv	r5, r0, r6
   198ac:	addhi	r5, r5, #1
   198b0:	mov	r0, r7
   198b4:	mov	r1, r5
   198b8:	mov	r2, r6
   198bc:	bl	1a940 <__assert_fail@plt+0x9140>
   198c0:	cmp	r0, #0
   198c4:	bne	198dc <__assert_fail@plt+0x80dc>
   198c8:	cmp	r7, #0
   198cc:	beq	198e4 <__assert_fail@plt+0x80e4>
   198d0:	cmp	r6, #0
   198d4:	cmpne	r5, #0
   198d8:	bne	198e4 <__assert_fail@plt+0x80e4>
   198dc:	str	r5, [r4]
   198e0:	pop	{r4, r5, r6, r7, fp, pc}
   198e4:	bl	19bf4 <__assert_fail@plt+0x83f4>
   198e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   198ec:	add	fp, sp, #24
   198f0:	mov	r8, r1
   198f4:	ldr	r1, [r1]
   198f8:	mov	r5, r0
   198fc:	add	r0, r1, r1, asr #1
   19900:	cmp	r0, r1
   19904:	mvnvs	r0, #-2147483648	; 0x80000000
   19908:	cmp	r0, r3
   1990c:	mov	r7, r0
   19910:	movgt	r7, r3
   19914:	cmn	r3, #1
   19918:	movle	r7, r0
   1991c:	ldr	r0, [fp, #8]
   19920:	cmn	r0, #1
   19924:	ble	1994c <__assert_fail@plt+0x814c>
   19928:	cmp	r0, #0
   1992c:	beq	199a0 <__assert_fail@plt+0x81a0>
   19930:	cmn	r7, #1
   19934:	ble	19974 <__assert_fail@plt+0x8174>
   19938:	mvn	r4, #-2147483648	; 0x80000000
   1993c:	udiv	r6, r4, r0
   19940:	cmp	r6, r7
   19944:	bge	199a0 <__assert_fail@plt+0x81a0>
   19948:	b	199b0 <__assert_fail@plt+0x81b0>
   1994c:	cmn	r7, #1
   19950:	ble	19990 <__assert_fail@plt+0x8190>
   19954:	cmn	r0, #1
   19958:	beq	199a0 <__assert_fail@plt+0x81a0>
   1995c:	mov	r6, #-2147483648	; 0x80000000
   19960:	mvn	r4, #-2147483648	; 0x80000000
   19964:	sdiv	r6, r6, r0
   19968:	cmp	r6, r7
   1996c:	bge	199a0 <__assert_fail@plt+0x81a0>
   19970:	b	199b0 <__assert_fail@plt+0x81b0>
   19974:	beq	199a0 <__assert_fail@plt+0x81a0>
   19978:	mov	r6, #-2147483648	; 0x80000000
   1997c:	mvn	r4, #-2147483648	; 0x80000000
   19980:	sdiv	r6, r6, r7
   19984:	cmp	r6, r0
   19988:	bge	199a0 <__assert_fail@plt+0x81a0>
   1998c:	b	199b0 <__assert_fail@plt+0x81b0>
   19990:	mvn	r4, #-2147483648	; 0x80000000
   19994:	sdiv	r6, r4, r0
   19998:	cmp	r7, r6
   1999c:	blt	199b0 <__assert_fail@plt+0x81b0>
   199a0:	mul	r6, r7, r0
   199a4:	mov	r4, #64	; 0x40
   199a8:	cmp	r6, #63	; 0x3f
   199ac:	bgt	199b8 <__assert_fail@plt+0x81b8>
   199b0:	sdiv	r7, r4, r0
   199b4:	mul	r6, r7, r0
   199b8:	cmp	r5, #0
   199bc:	moveq	r4, #0
   199c0:	streq	r4, [r8]
   199c4:	sub	r4, r7, r1
   199c8:	cmp	r4, r2
   199cc:	bge	19a78 <__assert_fail@plt+0x8278>
   199d0:	add	r7, r1, r2
   199d4:	mov	r6, #0
   199d8:	mov	r2, #0
   199dc:	cmp	r7, r3
   199e0:	movwgt	r6, #1
   199e4:	cmn	r3, #1
   199e8:	movwgt	r2, #1
   199ec:	cmp	r7, r1
   199f0:	bvs	19aac <__assert_fail@plt+0x82ac>
   199f4:	ands	r1, r2, r6
   199f8:	bne	19aac <__assert_fail@plt+0x82ac>
   199fc:	cmn	r0, #1
   19a00:	ble	19a28 <__assert_fail@plt+0x8228>
   19a04:	cmp	r0, #0
   19a08:	beq	19a74 <__assert_fail@plt+0x8274>
   19a0c:	cmn	r7, #1
   19a10:	ble	19a4c <__assert_fail@plt+0x824c>
   19a14:	mvn	r1, #-2147483648	; 0x80000000
   19a18:	udiv	r1, r1, r0
   19a1c:	cmp	r1, r7
   19a20:	bge	19a74 <__assert_fail@plt+0x8274>
   19a24:	b	19aac <__assert_fail@plt+0x82ac>
   19a28:	cmn	r7, #1
   19a2c:	ble	19a64 <__assert_fail@plt+0x8264>
   19a30:	cmn	r0, #1
   19a34:	beq	19a74 <__assert_fail@plt+0x8274>
   19a38:	mov	r1, #-2147483648	; 0x80000000
   19a3c:	sdiv	r1, r1, r0
   19a40:	cmp	r1, r7
   19a44:	bge	19a74 <__assert_fail@plt+0x8274>
   19a48:	b	19aac <__assert_fail@plt+0x82ac>
   19a4c:	beq	19a74 <__assert_fail@plt+0x8274>
   19a50:	mov	r1, #-2147483648	; 0x80000000
   19a54:	sdiv	r1, r1, r7
   19a58:	cmp	r1, r0
   19a5c:	bge	19a74 <__assert_fail@plt+0x8274>
   19a60:	b	19aac <__assert_fail@plt+0x82ac>
   19a64:	mvn	r1, #-2147483648	; 0x80000000
   19a68:	sdiv	r1, r1, r0
   19a6c:	cmp	r7, r1
   19a70:	blt	19aac <__assert_fail@plt+0x82ac>
   19a74:	mul	r6, r7, r0
   19a78:	mov	r0, r5
   19a7c:	mov	r1, r6
   19a80:	bl	1a8ec <__assert_fail@plt+0x90ec>
   19a84:	cmp	r6, #0
   19a88:	movwne	r6, #1
   19a8c:	cmp	r0, #0
   19a90:	bne	19aa4 <__assert_fail@plt+0x82a4>
   19a94:	clz	r1, r5
   19a98:	lsr	r1, r1, #5
   19a9c:	orrs	r1, r1, r6
   19aa0:	bne	19aac <__assert_fail@plt+0x82ac>
   19aa4:	str	r7, [r8]
   19aa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19aac:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19ab0:	push	{fp, lr}
   19ab4:	mov	fp, sp
   19ab8:	mov	r1, #1
   19abc:	bl	1a4b8 <__assert_fail@plt+0x8cb8>
   19ac0:	cmp	r0, #0
   19ac4:	popne	{fp, pc}
   19ac8:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19acc:	push	{fp, lr}
   19ad0:	mov	fp, sp
   19ad4:	bl	1a4b8 <__assert_fail@plt+0x8cb8>
   19ad8:	cmp	r0, #0
   19adc:	popne	{fp, pc}
   19ae0:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19ae4:	push	{fp, lr}
   19ae8:	mov	fp, sp
   19aec:	mov	r1, #1
   19af0:	bl	1a4b8 <__assert_fail@plt+0x8cb8>
   19af4:	cmp	r0, #0
   19af8:	popne	{fp, pc}
   19afc:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19b00:	push	{fp, lr}
   19b04:	mov	fp, sp
   19b08:	bl	1a4b8 <__assert_fail@plt+0x8cb8>
   19b0c:	cmp	r0, #0
   19b10:	popne	{fp, pc}
   19b14:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19b18:	push	{r4, r5, fp, lr}
   19b1c:	add	fp, sp, #8
   19b20:	mov	r5, r0
   19b24:	mov	r0, r1
   19b28:	mov	r4, r1
   19b2c:	bl	1a858 <__assert_fail@plt+0x9058>
   19b30:	cmp	r0, #0
   19b34:	beq	19b48 <__assert_fail@plt+0x8348>
   19b38:	mov	r1, r5
   19b3c:	mov	r2, r4
   19b40:	pop	{r4, r5, fp, lr}
   19b44:	b	114ac <memcpy@plt>
   19b48:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19b4c:	push	{r4, r5, fp, lr}
   19b50:	add	fp, sp, #8
   19b54:	mov	r5, r0
   19b58:	mov	r0, r1
   19b5c:	mov	r4, r1
   19b60:	bl	1a858 <__assert_fail@plt+0x9058>
   19b64:	cmp	r0, #0
   19b68:	beq	19b7c <__assert_fail@plt+0x837c>
   19b6c:	mov	r1, r5
   19b70:	mov	r2, r4
   19b74:	pop	{r4, r5, fp, lr}
   19b78:	b	114ac <memcpy@plt>
   19b7c:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19b80:	push	{r4, r5, fp, lr}
   19b84:	add	fp, sp, #8
   19b88:	mov	r5, r0
   19b8c:	add	r0, r1, #1
   19b90:	mov	r4, r1
   19b94:	bl	1a858 <__assert_fail@plt+0x9058>
   19b98:	cmp	r0, #0
   19b9c:	beq	19bb8 <__assert_fail@plt+0x83b8>
   19ba0:	mov	r1, #0
   19ba4:	mov	r2, r4
   19ba8:	strb	r1, [r0, r4]
   19bac:	mov	r1, r5
   19bb0:	pop	{r4, r5, fp, lr}
   19bb4:	b	114ac <memcpy@plt>
   19bb8:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19bbc:	push	{r4, r5, fp, lr}
   19bc0:	add	fp, sp, #8
   19bc4:	mov	r4, r0
   19bc8:	bl	11650 <strlen@plt>
   19bcc:	add	r5, r0, #1
   19bd0:	mov	r0, r5
   19bd4:	bl	1a858 <__assert_fail@plt+0x9058>
   19bd8:	cmp	r0, #0
   19bdc:	beq	19bf0 <__assert_fail@plt+0x83f0>
   19be0:	mov	r1, r4
   19be4:	mov	r2, r5
   19be8:	pop	{r4, r5, fp, lr}
   19bec:	b	114ac <memcpy@plt>
   19bf0:	bl	19bf4 <__assert_fail@plt+0x83f4>
   19bf4:	push	{fp, lr}
   19bf8:	mov	fp, sp
   19bfc:	movw	r0, #57712	; 0xe170
   19c00:	movw	r1, #53670	; 0xd1a6
   19c04:	mov	r2, #5
   19c08:	movt	r0, #2
   19c0c:	movt	r1, #1
   19c10:	ldr	r4, [r0]
   19c14:	mov	r0, #0
   19c18:	bl	114dc <dcgettext@plt>
   19c1c:	movw	r2, #52099	; 0xcb83
   19c20:	mov	r3, r0
   19c24:	mov	r0, r4
   19c28:	mov	r1, #0
   19c2c:	movt	r2, #1
   19c30:	bl	115a8 <error@plt>
   19c34:	bl	117d0 <abort@plt>
   19c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c3c:	add	fp, sp, #28
   19c40:	sub	sp, sp, #20
   19c44:	cmp	r2, #37	; 0x25
   19c48:	bcs	1a498 <__assert_fail@plt+0x8c98>
   19c4c:	ldr	r9, [fp, #8]
   19c50:	mov	r5, r2
   19c54:	mov	r4, r1
   19c58:	mov	r7, r0
   19c5c:	str	r3, [sp, #12]
   19c60:	bl	11680 <__errno_location@plt>
   19c64:	mov	r8, r0
   19c68:	mov	r0, #0
   19c6c:	str	r0, [r8]
   19c70:	bl	11614 <__ctype_b_loc@plt>
   19c74:	ldr	r1, [r0]
   19c78:	mov	r2, r7
   19c7c:	ldrb	r0, [r2], #1
   19c80:	add	r3, r1, r0, lsl #1
   19c84:	ldrb	r3, [r3, #1]
   19c88:	tst	r3, #32
   19c8c:	bne	19c7c <__assert_fail@plt+0x847c>
   19c90:	cmp	r4, #0
   19c94:	add	r6, sp, #16
   19c98:	mov	sl, #4
   19c9c:	movne	r6, r4
   19ca0:	cmp	r0, #45	; 0x2d
   19ca4:	bne	19cb4 <__assert_fail@plt+0x84b4>
   19ca8:	mov	r0, sl
   19cac:	sub	sp, fp, #28
   19cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cb4:	mov	r0, r7
   19cb8:	mov	r1, r6
   19cbc:	mov	r2, r5
   19cc0:	bl	11644 <strtoul@plt>
   19cc4:	ldr	r5, [r6]
   19cc8:	cmp	r5, r7
   19ccc:	beq	19d04 <__assert_fail@plt+0x8504>
   19cd0:	mov	r4, r0
   19cd4:	ldr	r0, [r8]
   19cd8:	cmp	r0, #0
   19cdc:	beq	19e68 <__assert_fail@plt+0x8668>
   19ce0:	cmp	r0, #34	; 0x22
   19ce4:	bne	19ca8 <__assert_fail@plt+0x84a8>
   19ce8:	mov	sl, #1
   19cec:	cmp	r9, #0
   19cf0:	beq	1a484 <__assert_fail@plt+0x8c84>
   19cf4:	ldrb	r7, [r5]
   19cf8:	cmp	r7, #0
   19cfc:	bne	19d3c <__assert_fail@plt+0x853c>
   19d00:	b	1a484 <__assert_fail@plt+0x8c84>
   19d04:	cmp	r9, #0
   19d08:	beq	19ca8 <__assert_fail@plt+0x84a8>
   19d0c:	ldrb	r1, [r7]
   19d10:	cmp	r1, #0
   19d14:	beq	19ca8 <__assert_fail@plt+0x84a8>
   19d18:	mov	r0, r9
   19d1c:	bl	1165c <strchr@plt>
   19d20:	cmp	r0, #0
   19d24:	beq	19ca8 <__assert_fail@plt+0x84a8>
   19d28:	mov	r4, #1
   19d2c:	mov	sl, #0
   19d30:	ldrb	r7, [r5]
   19d34:	cmp	r7, #0
   19d38:	beq	1a484 <__assert_fail@plt+0x8c84>
   19d3c:	mov	r0, r9
   19d40:	mov	r1, r7
   19d44:	bl	1165c <strchr@plt>
   19d48:	cmp	r0, #0
   19d4c:	beq	1a004 <__assert_fail@plt+0x8804>
   19d50:	sub	r0, r7, #69	; 0x45
   19d54:	mov	lr, #1
   19d58:	mov	r8, #1024	; 0x400
   19d5c:	cmp	r0, #47	; 0x2f
   19d60:	bhi	19eb8 <__assert_fail@plt+0x86b8>
   19d64:	add	r1, pc, #0
   19d68:	ldr	pc, [r1, r0, lsl #2]
   19d6c:	andeq	r9, r1, ip, lsr #28
   19d70:			; <UNDEFINED> instruction: 0x00019eb8
   19d74:	andeq	r9, r1, ip, lsr #28
   19d78:			; <UNDEFINED> instruction: 0x00019eb8
   19d7c:			; <UNDEFINED> instruction: 0x00019eb8
   19d80:			; <UNDEFINED> instruction: 0x00019eb8
   19d84:	andeq	r9, r1, ip, lsr #28
   19d88:			; <UNDEFINED> instruction: 0x00019eb8
   19d8c:	andeq	r9, r1, ip, lsr #28
   19d90:			; <UNDEFINED> instruction: 0x00019eb8
   19d94:			; <UNDEFINED> instruction: 0x00019eb8
   19d98:	andeq	r9, r1, ip, lsr #28
   19d9c:			; <UNDEFINED> instruction: 0x00019eb8
   19da0:			; <UNDEFINED> instruction: 0x00019eb8
   19da4:			; <UNDEFINED> instruction: 0x00019eb8
   19da8:	andeq	r9, r1, ip, lsr #28
   19dac:			; <UNDEFINED> instruction: 0x00019eb8
   19db0:			; <UNDEFINED> instruction: 0x00019eb8
   19db4:			; <UNDEFINED> instruction: 0x00019eb8
   19db8:			; <UNDEFINED> instruction: 0x00019eb8
   19dbc:	andeq	r9, r1, ip, lsr #28
   19dc0:	andeq	r9, r1, ip, lsr #28
   19dc4:			; <UNDEFINED> instruction: 0x00019eb8
   19dc8:			; <UNDEFINED> instruction: 0x00019eb8
   19dcc:			; <UNDEFINED> instruction: 0x00019eb8
   19dd0:			; <UNDEFINED> instruction: 0x00019eb8
   19dd4:			; <UNDEFINED> instruction: 0x00019eb8
   19dd8:			; <UNDEFINED> instruction: 0x00019eb8
   19ddc:			; <UNDEFINED> instruction: 0x00019eb8
   19de0:			; <UNDEFINED> instruction: 0x00019eb8
   19de4:			; <UNDEFINED> instruction: 0x00019eb8
   19de8:			; <UNDEFINED> instruction: 0x00019eb8
   19dec:			; <UNDEFINED> instruction: 0x00019eb8
   19df0:			; <UNDEFINED> instruction: 0x00019eb8
   19df4:	andeq	r9, r1, ip, lsr #28
   19df8:			; <UNDEFINED> instruction: 0x00019eb8
   19dfc:			; <UNDEFINED> instruction: 0x00019eb8
   19e00:			; <UNDEFINED> instruction: 0x00019eb8
   19e04:	andeq	r9, r1, ip, lsr #28
   19e08:			; <UNDEFINED> instruction: 0x00019eb8
   19e0c:	andeq	r9, r1, ip, lsr #28
   19e10:			; <UNDEFINED> instruction: 0x00019eb8
   19e14:			; <UNDEFINED> instruction: 0x00019eb8
   19e18:			; <UNDEFINED> instruction: 0x00019eb8
   19e1c:			; <UNDEFINED> instruction: 0x00019eb8
   19e20:			; <UNDEFINED> instruction: 0x00019eb8
   19e24:			; <UNDEFINED> instruction: 0x00019eb8
   19e28:	andeq	r9, r1, ip, lsr #28
   19e2c:	mov	r0, r9
   19e30:	mov	r1, #48	; 0x30
   19e34:	bl	1165c <strchr@plt>
   19e38:	cmp	r0, #0
   19e3c:	beq	19e78 <__assert_fail@plt+0x8678>
   19e40:	ldrb	r0, [r5, #1]
   19e44:	cmp	r0, #66	; 0x42
   19e48:	cmpne	r0, #68	; 0x44
   19e4c:	bne	19e8c <__assert_fail@plt+0x868c>
   19e50:	mov	lr, #2
   19e54:	mov	r8, #1000	; 0x3e8
   19e58:	sub	r1, r7, #66	; 0x42
   19e5c:	cmp	r1, #53	; 0x35
   19e60:	bls	19ec4 <__assert_fail@plt+0x86c4>
   19e64:	b	1a004 <__assert_fail@plt+0x8804>
   19e68:	mov	sl, r0
   19e6c:	cmp	r9, #0
   19e70:	bne	19cf4 <__assert_fail@plt+0x84f4>
   19e74:	b	1a484 <__assert_fail@plt+0x8c84>
   19e78:	mov	lr, #1
   19e7c:	sub	r1, r7, #66	; 0x42
   19e80:	cmp	r1, #53	; 0x35
   19e84:	bls	19ec4 <__assert_fail@plt+0x86c4>
   19e88:	b	1a004 <__assert_fail@plt+0x8804>
   19e8c:	cmp	r0, #105	; 0x69
   19e90:	bne	19eb4 <__assert_fail@plt+0x86b4>
   19e94:	ldrb	r0, [r5, #2]
   19e98:	mov	lr, #1
   19e9c:	cmp	r0, #66	; 0x42
   19ea0:	movweq	lr, #3
   19ea4:	sub	r1, r7, #66	; 0x42
   19ea8:	cmp	r1, #53	; 0x35
   19eac:	bls	19ec4 <__assert_fail@plt+0x86c4>
   19eb0:	b	1a004 <__assert_fail@plt+0x8804>
   19eb4:	mov	lr, #1
   19eb8:	sub	r1, r7, #66	; 0x42
   19ebc:	cmp	r1, #53	; 0x35
   19ec0:	bhi	1a004 <__assert_fail@plt+0x8804>
   19ec4:	add	r2, pc, #4
   19ec8:	mov	r0, #0
   19ecc:	ldr	pc, [r2, r1, lsl #2]
   19ed0:	andeq	sl, r1, ip, asr #3
   19ed4:	andeq	sl, r1, r4
   19ed8:	andeq	sl, r1, r4
   19edc:	andeq	sl, r1, r8, ror #3
   19ee0:	andeq	sl, r1, r4
   19ee4:	andeq	r9, r1, r8, lsr #31
   19ee8:	andeq	sl, r1, r4
   19eec:	andeq	sl, r1, r4
   19ef0:	andeq	sl, r1, r4
   19ef4:	andeq	sl, r1, ip, lsl r0
   19ef8:	andeq	sl, r1, r4
   19efc:	andeq	sl, r1, ip, lsr r0
   19f00:	andeq	sl, r1, r4
   19f04:	andeq	sl, r1, r4
   19f08:	andeq	sl, r1, r0, lsr #5
   19f0c:	andeq	sl, r1, r4
   19f10:	andeq	sl, r1, r4
   19f14:	andeq	sl, r1, r4
   19f18:	andeq	sl, r1, ip, ror r0
   19f1c:	andeq	sl, r1, r4
   19f20:	andeq	sl, r1, r4
   19f24:	andeq	sl, r1, r4
   19f28:	andeq	sl, r1, r4
   19f2c:	andeq	sl, r1, ip, lsr r3
   19f30:	strdeq	sl, [r1], -r4
   19f34:	andeq	sl, r1, r4
   19f38:	andeq	sl, r1, r4
   19f3c:	andeq	sl, r1, r4
   19f40:	andeq	sl, r1, r4
   19f44:	andeq	sl, r1, r4
   19f48:	andeq	sl, r1, r4
   19f4c:	andeq	sl, r1, r4
   19f50:	andeq	sl, r1, r4, lsr r4
   19f54:	andeq	sl, r1, ip, ror #8
   19f58:	andeq	sl, r1, r4
   19f5c:	andeq	sl, r1, r4
   19f60:	andeq	sl, r1, r4
   19f64:	andeq	r9, r1, r8, lsr #31
   19f68:	andeq	sl, r1, r4
   19f6c:	andeq	sl, r1, r4
   19f70:	andeq	sl, r1, r4
   19f74:	andeq	sl, r1, ip, lsl r0
   19f78:	andeq	sl, r1, r4
   19f7c:	andeq	sl, r1, ip, lsr r0
   19f80:	andeq	sl, r1, r4
   19f84:	andeq	sl, r1, r4
   19f88:	andeq	sl, r1, r4
   19f8c:	andeq	sl, r1, r4
   19f90:	andeq	sl, r1, r4
   19f94:	andeq	sl, r1, r4
   19f98:	andeq	sl, r1, ip, ror r0
   19f9c:	andeq	sl, r1, r4
   19fa0:	andeq	sl, r1, r4
   19fa4:	andeq	sl, r1, r8, asr r4
   19fa8:	mvn	r0, #0
   19fac:	mul	r1, r4, r8
   19fb0:	mov	r7, #0
   19fb4:	udiv	r0, r0, r8
   19fb8:	cmp	r0, r4
   19fbc:	mvncc	r1, #0
   19fc0:	cmp	r0, r1
   19fc4:	mul	r2, r1, r8
   19fc8:	mvncc	r2, #0
   19fcc:	cmp	r0, r2
   19fd0:	mul	r3, r2, r8
   19fd4:	mov	r2, #0
   19fd8:	mvncc	r3, #0
   19fdc:	movwcc	r7, #1
   19fe0:	cmp	r0, r1
   19fe4:	mov	r1, #0
   19fe8:	movwcc	r1, #1
   19fec:	cmp	r0, r4
   19ff0:	mov	r4, r3
   19ff4:	movwcc	r2, #1
   19ff8:	orr	r0, r2, r1
   19ffc:	orr	r0, r0, r7
   1a000:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a004:	ldr	r0, [sp, #12]
   1a008:	orr	sl, sl, #2
   1a00c:	str	r4, [r0]
   1a010:	mov	r0, sl
   1a014:	sub	sp, fp, #28
   1a018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a01c:	mvn	r0, #0
   1a020:	mul	r1, r4, r8
   1a024:	udiv	r0, r0, r8
   1a028:	cmp	r0, r4
   1a02c:	mov	r0, #0
   1a030:	mvncc	r1, #0
   1a034:	movwcc	r0, #1
   1a038:	b	1a468 <__assert_fail@plt+0x8c68>
   1a03c:	mvn	r0, #0
   1a040:	mul	r1, r4, r8
   1a044:	mov	r3, #0
   1a048:	udiv	r0, r0, r8
   1a04c:	cmp	r0, r4
   1a050:	mvncc	r1, #0
   1a054:	cmp	r0, r1
   1a058:	mul	r2, r1, r8
   1a05c:	mov	r1, #0
   1a060:	mvncc	r2, #0
   1a064:	movwcc	r3, #1
   1a068:	cmp	r0, r4
   1a06c:	movwcc	r1, #1
   1a070:	mov	r4, r2
   1a074:	orr	r0, r1, r3
   1a078:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a07c:	mvn	r0, #0
   1a080:	mul	r1, r4, r8
   1a084:	mov	r7, #0
   1a088:	udiv	r0, r0, r8
   1a08c:	cmp	r0, r4
   1a090:	mvncc	r1, #0
   1a094:	cmp	r0, r1
   1a098:	mul	r2, r1, r8
   1a09c:	mvncc	r2, #0
   1a0a0:	cmp	r0, r2
   1a0a4:	mul	r3, r2, r8
   1a0a8:	mvncc	r3, #0
   1a0ac:	cmp	r0, r3
   1a0b0:	mul	ip, r3, r8
   1a0b4:	mov	r3, #0
   1a0b8:	mvncc	ip, #0
   1a0bc:	movwcc	r7, #1
   1a0c0:	cmp	r0, r2
   1a0c4:	mov	r2, #0
   1a0c8:	movwcc	r2, #1
   1a0cc:	cmp	r0, r1
   1a0d0:	mov	r1, #0
   1a0d4:	movwcc	r1, #1
   1a0d8:	cmp	r0, r4
   1a0dc:	mov	r4, ip
   1a0e0:	movwcc	r3, #1
   1a0e4:	orr	r0, r3, r1
   1a0e8:	orr	r0, r0, r2
   1a0ec:	orr	r0, r0, r7
   1a0f0:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a0f4:	mvn	r0, #0
   1a0f8:	str	lr, [sp, #8]
   1a0fc:	mul	lr, r4, r8
   1a100:	udiv	r0, r0, r8
   1a104:	cmp	r0, r4
   1a108:	mvncc	lr, #0
   1a10c:	cmp	r0, lr
   1a110:	mul	r9, lr, r8
   1a114:	mvncc	r9, #0
   1a118:	cmp	r0, r9
   1a11c:	mul	r7, r9, r8
   1a120:	mvncc	r7, #0
   1a124:	cmp	r0, r7
   1a128:	mul	r3, r7, r8
   1a12c:	mvncc	r3, #0
   1a130:	cmp	r0, r3
   1a134:	mul	r1, r3, r8
   1a138:	mvncc	r1, #0
   1a13c:	cmp	r0, r1
   1a140:	mul	r2, r1, r8
   1a144:	mvncc	r2, #0
   1a148:	cmp	r0, r2
   1a14c:	mul	ip, r2, r8
   1a150:	mov	r8, #0
   1a154:	mov	r2, #0
   1a158:	mvncc	ip, #0
   1a15c:	movwcc	r8, #1
   1a160:	cmp	r0, r1
   1a164:	mov	r1, #0
   1a168:	movwcc	r1, #1
   1a16c:	cmp	r0, r3
   1a170:	mov	r3, #0
   1a174:	movwcc	r3, #1
   1a178:	cmp	r0, r7
   1a17c:	mov	r7, #0
   1a180:	movwcc	r7, #1
   1a184:	cmp	r0, r9
   1a188:	mov	r9, #0
   1a18c:	movwcc	r9, #1
   1a190:	cmp	r0, lr
   1a194:	mov	lr, #0
   1a198:	movwcc	lr, #1
   1a19c:	cmp	r0, r4
   1a1a0:	mov	r4, ip
   1a1a4:	movwcc	r2, #1
   1a1a8:	orr	r0, r2, lr
   1a1ac:	ldr	lr, [sp, #8]
   1a1b0:	orr	r0, r0, r9
   1a1b4:	orr	r0, r0, r7
   1a1b8:	orr	r0, r0, r3
   1a1bc:	orr	r0, r0, r1
   1a1c0:	orr	r0, r0, r8
   1a1c4:	and	r0, r0, #1
   1a1c8:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a1cc:	mov	r1, #0
   1a1d0:	lsr	r0, r4, #22
   1a1d4:	cmp	r1, r4, lsr #22
   1a1d8:	lsl	r4, r4, #10
   1a1dc:	movwne	r0, #1
   1a1e0:	mvnne	r4, #0
   1a1e4:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a1e8:	mvn	r0, #0
   1a1ec:	mul	ip, r4, r8
   1a1f0:	str	lr, [sp, #8]
   1a1f4:	mov	r9, #0
   1a1f8:	udiv	r0, r0, r8
   1a1fc:	cmp	r0, r4
   1a200:	mvncc	ip, #0
   1a204:	cmp	r0, ip
   1a208:	mul	r2, ip, r8
   1a20c:	mvncc	r2, #0
   1a210:	cmp	r0, r2
   1a214:	mul	r3, r2, r8
   1a218:	mvncc	r3, #0
   1a21c:	cmp	r0, r3
   1a220:	mul	r7, r3, r8
   1a224:	mvncc	r7, #0
   1a228:	cmp	r0, r7
   1a22c:	mul	r1, r7, r8
   1a230:	mvncc	r1, #0
   1a234:	cmp	r0, r1
   1a238:	mul	lr, r1, r8
   1a23c:	mov	r8, #0
   1a240:	mov	r1, #0
   1a244:	mvncc	lr, #0
   1a248:	movwcc	r8, #1
   1a24c:	cmp	r0, r7
   1a250:	mov	r7, #0
   1a254:	movwcc	r7, #1
   1a258:	cmp	r0, r3
   1a25c:	mov	r3, #0
   1a260:	movwcc	r3, #1
   1a264:	cmp	r0, r2
   1a268:	mov	r2, #0
   1a26c:	movwcc	r2, #1
   1a270:	cmp	r0, ip
   1a274:	movwcc	r1, #1
   1a278:	cmp	r0, r4
   1a27c:	mov	r4, lr
   1a280:	ldr	lr, [sp, #8]
   1a284:	movwcc	r9, #1
   1a288:	orr	r0, r9, r1
   1a28c:	orr	r0, r0, r2
   1a290:	orr	r0, r0, r3
   1a294:	orr	r0, r0, r7
   1a298:	orr	r0, r0, r8
   1a29c:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a2a0:	mvn	r0, #0
   1a2a4:	mul	r1, r4, r8
   1a2a8:	udiv	r0, r0, r8
   1a2ac:	cmp	r0, r4
   1a2b0:	mvncc	r1, #0
   1a2b4:	cmp	r0, r1
   1a2b8:	mul	r2, r1, r8
   1a2bc:	mvncc	r2, #0
   1a2c0:	cmp	r0, r2
   1a2c4:	mul	r3, r2, r8
   1a2c8:	mvncc	r3, #0
   1a2cc:	cmp	r0, r3
   1a2d0:	mul	r7, r3, r8
   1a2d4:	mvncc	r7, #0
   1a2d8:	cmp	r0, r7
   1a2dc:	mul	ip, r7, r8
   1a2e0:	mov	r8, lr
   1a2e4:	mov	lr, #0
   1a2e8:	mov	r7, #0
   1a2ec:	mvncc	ip, #0
   1a2f0:	movwcc	lr, #1
   1a2f4:	cmp	r0, r3
   1a2f8:	mov	r3, #0
   1a2fc:	movwcc	r3, #1
   1a300:	cmp	r0, r2
   1a304:	mov	r2, #0
   1a308:	movwcc	r2, #1
   1a30c:	cmp	r0, r1
   1a310:	mov	r1, #0
   1a314:	movwcc	r1, #1
   1a318:	cmp	r0, r4
   1a31c:	mov	r4, ip
   1a320:	movwcc	r7, #1
   1a324:	orr	r0, r7, r1
   1a328:	orr	r0, r0, r2
   1a32c:	orr	r0, r0, r3
   1a330:	orr	r0, r0, lr
   1a334:	mov	lr, r8
   1a338:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a33c:	mvn	r0, #0
   1a340:	str	lr, [sp, #8]
   1a344:	mul	lr, r4, r8
   1a348:	udiv	r0, r0, r8
   1a34c:	cmp	r0, r4
   1a350:	mvncc	lr, #0
   1a354:	cmp	r0, lr
   1a358:	mul	r9, lr, r8
   1a35c:	mvncc	r9, #0
   1a360:	cmp	r0, r9
   1a364:	mul	r7, r9, r8
   1a368:	mvncc	r7, #0
   1a36c:	cmp	r0, r7
   1a370:	mul	r3, r7, r8
   1a374:	mvncc	r3, #0
   1a378:	cmp	r0, r3
   1a37c:	mul	r1, r3, r8
   1a380:	mvncc	r1, #0
   1a384:	cmp	r0, r1
   1a388:	mul	r2, r1, r8
   1a38c:	mvncc	r2, #0
   1a390:	cmp	r0, r2
   1a394:	mul	ip, r2, r8
   1a398:	mvncc	ip, #0
   1a39c:	cmp	r0, ip
   1a3a0:	mul	r8, ip, r8
   1a3a4:	mov	ip, #0
   1a3a8:	mvncc	r8, #0
   1a3ac:	str	r8, [sp, #4]
   1a3b0:	mov	r8, #0
   1a3b4:	movwcc	r8, #1
   1a3b8:	cmp	r0, r2
   1a3bc:	mov	r2, #0
   1a3c0:	movwcc	r2, #1
   1a3c4:	cmp	r0, r1
   1a3c8:	mov	r1, #0
   1a3cc:	movwcc	r1, #1
   1a3d0:	cmp	r0, r3
   1a3d4:	mov	r3, #0
   1a3d8:	movwcc	r3, #1
   1a3dc:	cmp	r0, r7
   1a3e0:	mov	r7, #0
   1a3e4:	movwcc	r7, #1
   1a3e8:	cmp	r0, r9
   1a3ec:	mov	r9, #0
   1a3f0:	movwcc	r9, #1
   1a3f4:	cmp	r0, lr
   1a3f8:	mov	lr, #0
   1a3fc:	movwcc	lr, #1
   1a400:	cmp	r0, r4
   1a404:	ldr	r4, [sp, #4]
   1a408:	movwcc	ip, #1
   1a40c:	orr	r0, ip, lr
   1a410:	ldr	lr, [sp, #8]
   1a414:	orr	r0, r0, r9
   1a418:	orr	r0, r0, r7
   1a41c:	orr	r0, r0, r3
   1a420:	orr	r0, r0, r1
   1a424:	orr	r0, r0, r2
   1a428:	orr	r0, r0, r8
   1a42c:	and	r0, r0, #1
   1a430:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a434:	movw	r0, #65535	; 0xffff
   1a438:	movt	r0, #63	; 0x3f
   1a43c:	orr	r1, r0, #4194304	; 0x400000
   1a440:	mov	r0, #0
   1a444:	cmp	r4, r1
   1a448:	lsl	r4, r4, #9
   1a44c:	movwhi	r0, #1
   1a450:	mvnhi	r4, #0
   1a454:	b	1a46c <__assert_fail@plt+0x8c6c>
   1a458:	cmp	r4, #0
   1a45c:	lsl	r1, r4, #1
   1a460:	lsr	r0, r4, #31
   1a464:	mvnmi	r1, #0
   1a468:	mov	r4, r1
   1a46c:	add	r1, r5, lr
   1a470:	orr	sl, r0, sl
   1a474:	str	r1, [r6]
   1a478:	ldrb	r1, [r5, lr]
   1a47c:	cmp	r1, #0
   1a480:	orrne	sl, sl, #2
   1a484:	ldr	r0, [sp, #12]
   1a488:	str	r4, [r0]
   1a48c:	mov	r0, sl
   1a490:	sub	sp, fp, #28
   1a494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a498:	movw	r0, #53687	; 0xd1b7
   1a49c:	movw	r1, #53725	; 0xd1dd
   1a4a0:	movw	r3, #53737	; 0xd1e9
   1a4a4:	mov	r2, #84	; 0x54
   1a4a8:	movt	r0, #1
   1a4ac:	movt	r1, #1
   1a4b0:	movt	r3, #1
   1a4b4:	bl	11800 <__assert_fail@plt>
   1a4b8:	clz	r2, r1
   1a4bc:	clz	r3, r0
   1a4c0:	lsr	r2, r2, #5
   1a4c4:	lsr	r3, r3, #5
   1a4c8:	orrs	r2, r3, r2
   1a4cc:	movwne	r1, #1
   1a4d0:	movwne	r0, #1
   1a4d4:	cmp	r1, #0
   1a4d8:	beq	1a508 <__assert_fail@plt+0x8d08>
   1a4dc:	mvn	r2, #-2147483648	; 0x80000000
   1a4e0:	udiv	r2, r2, r1
   1a4e4:	cmp	r2, r0
   1a4e8:	bcs	1a508 <__assert_fail@plt+0x8d08>
   1a4ec:	push	{fp, lr}
   1a4f0:	mov	fp, sp
   1a4f4:	bl	11680 <__errno_location@plt>
   1a4f8:	mov	r1, #12
   1a4fc:	str	r1, [r0]
   1a500:	mov	r0, #0
   1a504:	pop	{fp, pc}
   1a508:	b	11434 <calloc@plt>
   1a50c:	sub	sp, sp, #8
   1a510:	push	{r4, r5, r6, r7, fp, lr}
   1a514:	add	fp, sp, #16
   1a518:	sub	sp, sp, #8
   1a51c:	mov	r5, r0
   1a520:	add	r0, fp, #8
   1a524:	cmp	r1, #11
   1a528:	str	r2, [fp, #8]
   1a52c:	str	r3, [fp, #12]
   1a530:	str	r0, [sp, #4]
   1a534:	bhi	1a570 <__assert_fail@plt+0x8d70>
   1a538:	mov	r0, #1
   1a53c:	movw	r2, #1300	; 0x514
   1a540:	tst	r2, r0, lsl r1
   1a544:	bne	1a630 <__assert_fail@plt+0x8e30>
   1a548:	movw	r2, #2570	; 0xa0a
   1a54c:	tst	r2, r0, lsl r1
   1a550:	bne	1a598 <__assert_fail@plt+0x8d98>
   1a554:	cmp	r1, #0
   1a558:	bne	1a570 <__assert_fail@plt+0x8d70>
   1a55c:	ldr	r0, [sp, #4]
   1a560:	add	r1, r0, #4
   1a564:	str	r1, [sp, #4]
   1a568:	mov	r1, #0
   1a56c:	b	1a63c <__assert_fail@plt+0x8e3c>
   1a570:	sub	r0, r1, #1024	; 0x400
   1a574:	cmp	r0, #10
   1a578:	bhi	1a630 <__assert_fail@plt+0x8e30>
   1a57c:	mov	r2, #1
   1a580:	movw	r3, #645	; 0x285
   1a584:	tst	r3, r2, lsl r0
   1a588:	bne	1a630 <__assert_fail@plt+0x8e30>
   1a58c:	movw	r3, #1282	; 0x502
   1a590:	tst	r3, r2, lsl r0
   1a594:	beq	1a5a4 <__assert_fail@plt+0x8da4>
   1a598:	mov	r0, r5
   1a59c:	bl	11710 <fcntl64@plt>
   1a5a0:	b	1a648 <__assert_fail@plt+0x8e48>
   1a5a4:	cmp	r0, #6
   1a5a8:	bne	1a630 <__assert_fail@plt+0x8e30>
   1a5ac:	ldr	r0, [sp, #4]
   1a5b0:	movw	r7, #58320	; 0xe3d0
   1a5b4:	movt	r7, #2
   1a5b8:	add	r1, r0, #4
   1a5bc:	str	r1, [sp, #4]
   1a5c0:	ldr	r6, [r0]
   1a5c4:	ldr	r0, [r7]
   1a5c8:	cmp	r0, #0
   1a5cc:	bmi	1a66c <__assert_fail@plt+0x8e6c>
   1a5d0:	mov	r0, r5
   1a5d4:	movw	r1, #1030	; 0x406
   1a5d8:	mov	r2, r6
   1a5dc:	bl	11710 <fcntl64@plt>
   1a5e0:	mov	r4, r0
   1a5e4:	cmn	r0, #1
   1a5e8:	bgt	1a660 <__assert_fail@plt+0x8e60>
   1a5ec:	bl	11680 <__errno_location@plt>
   1a5f0:	ldr	r0, [r0]
   1a5f4:	cmp	r0, #22
   1a5f8:	bne	1a660 <__assert_fail@plt+0x8e60>
   1a5fc:	mov	r0, r5
   1a600:	mov	r1, #0
   1a604:	mov	r2, r6
   1a608:	bl	11710 <fcntl64@plt>
   1a60c:	mov	r4, r0
   1a610:	cmp	r0, #0
   1a614:	bmi	1a64c <__assert_fail@plt+0x8e4c>
   1a618:	mvn	r0, #0
   1a61c:	str	r0, [r7]
   1a620:	mov	r0, #1
   1a624:	cmp	r0, #0
   1a628:	bne	1a698 <__assert_fail@plt+0x8e98>
   1a62c:	b	1a64c <__assert_fail@plt+0x8e4c>
   1a630:	ldr	r0, [sp, #4]
   1a634:	add	r2, r0, #4
   1a638:	str	r2, [sp, #4]
   1a63c:	ldr	r2, [r0]
   1a640:	mov	r0, r5
   1a644:	bl	11710 <fcntl64@plt>
   1a648:	mov	r4, r0
   1a64c:	mov	r0, r4
   1a650:	sub	sp, fp, #16
   1a654:	pop	{r4, r5, r6, r7, fp, lr}
   1a658:	add	sp, sp, #8
   1a65c:	bx	lr
   1a660:	mov	r0, #1
   1a664:	str	r0, [r7]
   1a668:	b	1a64c <__assert_fail@plt+0x8e4c>
   1a66c:	mov	r0, r5
   1a670:	mov	r1, #0
   1a674:	mov	r2, r6
   1a678:	bl	11710 <fcntl64@plt>
   1a67c:	mov	r4, r0
   1a680:	ldr	r0, [r7]
   1a684:	add	r0, r0, #1
   1a688:	clz	r0, r0
   1a68c:	lsr	r0, r0, #5
   1a690:	cmp	r0, #0
   1a694:	beq	1a64c <__assert_fail@plt+0x8e4c>
   1a698:	cmp	r4, #0
   1a69c:	bmi	1a64c <__assert_fail@plt+0x8e4c>
   1a6a0:	mov	r0, r4
   1a6a4:	mov	r1, #1
   1a6a8:	bl	11710 <fcntl64@plt>
   1a6ac:	cmp	r0, #0
   1a6b0:	bmi	1a6cc <__assert_fail@plt+0x8ecc>
   1a6b4:	orr	r2, r0, #1
   1a6b8:	mov	r0, r4
   1a6bc:	mov	r1, #2
   1a6c0:	bl	11710 <fcntl64@plt>
   1a6c4:	cmn	r0, #1
   1a6c8:	bne	1a64c <__assert_fail@plt+0x8e4c>
   1a6cc:	bl	11680 <__errno_location@plt>
   1a6d0:	ldr	r6, [r0]
   1a6d4:	mov	r5, r0
   1a6d8:	mov	r0, r4
   1a6dc:	bl	117e8 <close@plt>
   1a6e0:	str	r6, [r5]
   1a6e4:	mvn	r4, #0
   1a6e8:	b	1a64c <__assert_fail@plt+0x8e4c>
   1a6ec:	push	{r4, sl, fp, lr}
   1a6f0:	add	fp, sp, #8
   1a6f4:	sub	sp, sp, #8
   1a6f8:	mov	r4, r0
   1a6fc:	cmp	r0, #0
   1a700:	beq	1a738 <__assert_fail@plt+0x8f38>
   1a704:	mov	r0, r4
   1a708:	bl	115f0 <__freading@plt>
   1a70c:	cmp	r0, #0
   1a710:	beq	1a738 <__assert_fail@plt+0x8f38>
   1a714:	ldrb	r0, [r4, #1]
   1a718:	tst	r0, #1
   1a71c:	beq	1a738 <__assert_fail@plt+0x8f38>
   1a720:	mov	r0, #1
   1a724:	mov	r2, #0
   1a728:	mov	r3, #0
   1a72c:	str	r0, [sp]
   1a730:	mov	r0, r4
   1a734:	bl	1a7b0 <__assert_fail@plt+0x8fb0>
   1a738:	mov	r0, r4
   1a73c:	sub	sp, fp, #8
   1a740:	pop	{r4, sl, fp, lr}
   1a744:	b	11470 <fflush@plt>
   1a748:	ldrd	r2, [r0, #16]
   1a74c:	mov	r1, #0
   1a750:	cmp	r3, r2
   1a754:	bhi	1a780 <__assert_fail@plt+0x8f80>
   1a758:	ldrb	r3, [r0, #1]
   1a75c:	ldmib	r0, {r1, r2}
   1a760:	sub	r1, r2, r1
   1a764:	mov	r2, #0
   1a768:	tst	r3, #1
   1a76c:	beq	1a77c <__assert_fail@plt+0x8f7c>
   1a770:	ldr	r2, [r0, #36]	; 0x24
   1a774:	ldr	r0, [r0, #44]	; 0x2c
   1a778:	sub	r2, r0, r2
   1a77c:	add	r1, r1, r2
   1a780:	mov	r0, r1
   1a784:	bx	lr
   1a788:	push	{r4, r5, r6, sl, fp, lr}
   1a78c:	add	fp, sp, #16
   1a790:	mov	r4, r0
   1a794:	bl	11680 <__errno_location@plt>
   1a798:	ldr	r6, [r0]
   1a79c:	mov	r5, r0
   1a7a0:	mov	r0, r4
   1a7a4:	bl	11488 <free@plt>
   1a7a8:	str	r6, [r5]
   1a7ac:	pop	{r4, r5, r6, sl, fp, pc}
   1a7b0:	push	{r4, r5, r6, r7, fp, lr}
   1a7b4:	add	fp, sp, #16
   1a7b8:	sub	sp, sp, #8
   1a7bc:	mov	r4, r0
   1a7c0:	ldr	r0, [r0, #4]
   1a7c4:	mov	r5, r3
   1a7c8:	mov	r6, r2
   1a7cc:	ldr	r1, [r4, #8]
   1a7d0:	cmp	r1, r0
   1a7d4:	bne	1a7f0 <__assert_fail@plt+0x8ff0>
   1a7d8:	ldrd	r0, [r4, #16]
   1a7dc:	cmp	r1, r0
   1a7e0:	bne	1a7f0 <__assert_fail@plt+0x8ff0>
   1a7e4:	ldr	r0, [r4, #36]	; 0x24
   1a7e8:	cmp	r0, #0
   1a7ec:	beq	1a808 <__assert_fail@plt+0x9008>
   1a7f0:	mov	r0, r4
   1a7f4:	mov	r2, r6
   1a7f8:	mov	r3, r5
   1a7fc:	sub	sp, fp, #16
   1a800:	pop	{r4, r5, r6, r7, fp, lr}
   1a804:	b	11704 <fseeko64@plt>
   1a808:	ldr	r7, [fp, #8]
   1a80c:	mov	r0, r4
   1a810:	bl	116c8 <fileno@plt>
   1a814:	mov	r2, r6
   1a818:	mov	r3, r5
   1a81c:	str	r7, [sp]
   1a820:	bl	11560 <lseek64@plt>
   1a824:	and	r2, r0, r1
   1a828:	cmn	r2, #1
   1a82c:	beq	1a84c <__assert_fail@plt+0x904c>
   1a830:	strd	r0, [r4, #80]	; 0x50
   1a834:	ldr	r0, [r4]
   1a838:	bic	r0, r0, #16
   1a83c:	str	r0, [r4]
   1a840:	mov	r0, #0
   1a844:	sub	sp, fp, #16
   1a848:	pop	{r4, r5, r6, r7, fp, pc}
   1a84c:	mvn	r0, #0
   1a850:	sub	sp, fp, #16
   1a854:	pop	{r4, r5, r6, r7, fp, pc}
   1a858:	cmp	r0, #0
   1a85c:	movweq	r0, #1
   1a860:	cmn	r0, #1
   1a864:	ble	1a86c <__assert_fail@plt+0x906c>
   1a868:	b	115d8 <malloc@plt>
   1a86c:	push	{fp, lr}
   1a870:	mov	fp, sp
   1a874:	bl	11680 <__errno_location@plt>
   1a878:	mov	r1, #12
   1a87c:	str	r1, [r0]
   1a880:	mov	r0, #0
   1a884:	pop	{fp, pc}
   1a888:	push	{r4, r5, r6, r7, fp, lr}
   1a88c:	add	fp, sp, #16
   1a890:	sub	sp, sp, #8
   1a894:	cmp	r0, #0
   1a898:	add	r5, sp, #4
   1a89c:	mov	r7, r2
   1a8a0:	mov	r4, r1
   1a8a4:	movne	r5, r0
   1a8a8:	mov	r0, r5
   1a8ac:	bl	1159c <mbrtowc@plt>
   1a8b0:	mov	r6, r0
   1a8b4:	cmp	r7, #0
   1a8b8:	beq	1a8e0 <__assert_fail@plt+0x90e0>
   1a8bc:	cmn	r6, #2
   1a8c0:	bcc	1a8e0 <__assert_fail@plt+0x90e0>
   1a8c4:	mov	r0, #0
   1a8c8:	bl	1aa00 <__assert_fail@plt+0x9200>
   1a8cc:	cmp	r0, #0
   1a8d0:	bne	1a8e0 <__assert_fail@plt+0x90e0>
   1a8d4:	ldrb	r0, [r4]
   1a8d8:	mov	r6, #1
   1a8dc:	str	r0, [r5]
   1a8e0:	mov	r0, r6
   1a8e4:	sub	sp, fp, #16
   1a8e8:	pop	{r4, r5, r6, r7, fp, pc}
   1a8ec:	push	{fp, lr}
   1a8f0:	mov	fp, sp
   1a8f4:	cmp	r0, #0
   1a8f8:	beq	1a914 <__assert_fail@plt+0x9114>
   1a8fc:	cmp	r1, #0
   1a900:	beq	1a920 <__assert_fail@plt+0x9120>
   1a904:	cmn	r1, #1
   1a908:	ble	1a92c <__assert_fail@plt+0x912c>
   1a90c:	pop	{fp, lr}
   1a910:	b	1150c <realloc@plt>
   1a914:	mov	r0, r1
   1a918:	pop	{fp, lr}
   1a91c:	b	1a858 <__assert_fail@plt+0x9058>
   1a920:	bl	1a788 <__assert_fail@plt+0x8f88>
   1a924:	mov	r0, #0
   1a928:	pop	{fp, pc}
   1a92c:	bl	11680 <__errno_location@plt>
   1a930:	mov	r1, #12
   1a934:	str	r1, [r0]
   1a938:	mov	r0, #0
   1a93c:	pop	{fp, pc}
   1a940:	cmp	r2, #0
   1a944:	beq	1a974 <__assert_fail@plt+0x9174>
   1a948:	mvn	r3, #0
   1a94c:	udiv	r3, r3, r2
   1a950:	cmp	r3, r1
   1a954:	bcs	1a974 <__assert_fail@plt+0x9174>
   1a958:	push	{fp, lr}
   1a95c:	mov	fp, sp
   1a960:	bl	11680 <__errno_location@plt>
   1a964:	mov	r1, #12
   1a968:	str	r1, [r0]
   1a96c:	mov	r0, #0
   1a970:	pop	{fp, pc}
   1a974:	mul	r1, r2, r1
   1a978:	b	1a8ec <__assert_fail@plt+0x90ec>
   1a97c:	push	{r4, r5, r6, sl, fp, lr}
   1a980:	add	fp, sp, #16
   1a984:	mov	r4, r0
   1a988:	bl	11590 <__fpending@plt>
   1a98c:	mov	r5, r0
   1a990:	mov	r0, r4
   1a994:	bl	11494 <ferror@plt>
   1a998:	mov	r6, r0
   1a99c:	mov	r0, r4
   1a9a0:	bl	116e0 <fclose@plt>
   1a9a4:	cmp	r6, #0
   1a9a8:	beq	1a9cc <__assert_fail@plt+0x91cc>
   1a9ac:	mvn	r4, #0
   1a9b0:	cmp	r0, #0
   1a9b4:	bne	1a9f8 <__assert_fail@plt+0x91f8>
   1a9b8:	bl	11680 <__errno_location@plt>
   1a9bc:	mov	r1, #0
   1a9c0:	str	r1, [r0]
   1a9c4:	mov	r0, r4
   1a9c8:	pop	{r4, r5, r6, sl, fp, pc}
   1a9cc:	cmp	r0, #0
   1a9d0:	mov	r4, r0
   1a9d4:	mvnne	r4, #0
   1a9d8:	cmp	r5, #0
   1a9dc:	bne	1a9f8 <__assert_fail@plt+0x91f8>
   1a9e0:	cmp	r0, #0
   1a9e4:	beq	1a9f8 <__assert_fail@plt+0x91f8>
   1a9e8:	bl	11680 <__errno_location@plt>
   1a9ec:	ldr	r0, [r0]
   1a9f0:	subs	r4, r0, #9
   1a9f4:	mvnne	r4, #0
   1a9f8:	mov	r0, r4
   1a9fc:	pop	{r4, r5, r6, sl, fp, pc}
   1aa00:	push	{r4, sl, fp, lr}
   1aa04:	add	fp, sp, #8
   1aa08:	sub	sp, sp, #264	; 0x108
   1aa0c:	add	r1, sp, #7
   1aa10:	movw	r2, #257	; 0x101
   1aa14:	bl	1aca4 <__assert_fail@plt+0x94a4>
   1aa18:	mov	r4, #0
   1aa1c:	cmp	r0, #0
   1aa20:	bne	1aa60 <__assert_fail@plt+0x9260>
   1aa24:	movw	r1, #53818	; 0xd23a
   1aa28:	add	r0, sp, #7
   1aa2c:	mov	r2, #2
   1aa30:	movt	r1, #1
   1aa34:	bl	11638 <bcmp@plt>
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa60 <__assert_fail@plt+0x9260>
   1aa40:	movw	r1, #53820	; 0xd23c
   1aa44:	add	r0, sp, #7
   1aa48:	mov	r2, #6
   1aa4c:	movt	r1, #1
   1aa50:	bl	11638 <bcmp@plt>
   1aa54:	cmp	r0, #0
   1aa58:	mov	r4, r0
   1aa5c:	movwne	r4, #1
   1aa60:	mov	r0, r4
   1aa64:	sub	sp, fp, #8
   1aa68:	pop	{r4, sl, fp, pc}
   1aa6c:	push	{fp, lr}
   1aa70:	mov	fp, sp
   1aa74:	mov	r0, #14
   1aa78:	bl	1174c <nl_langinfo@plt>
   1aa7c:	movw	r1, #47819	; 0xbacb
   1aa80:	cmp	r0, #0
   1aa84:	movt	r1, #1
   1aa88:	movne	r1, r0
   1aa8c:	movw	r0, #53826	; 0xd242
   1aa90:	ldrb	r2, [r1]
   1aa94:	movt	r0, #1
   1aa98:	cmp	r2, #0
   1aa9c:	movne	r0, r1
   1aaa0:	pop	{fp, pc}
   1aaa4:	push	{r4, sl, fp, lr}
   1aaa8:	add	fp, sp, #8
   1aaac:	mov	r4, #0
   1aab0:	adds	r0, r0, #16
   1aab4:	adc	r1, r4, #0
   1aab8:	rsb	r2, r1, #0
   1aabc:	eors	r2, r2, r1
   1aac0:	movwne	r2, #1
   1aac4:	cmp	r0, #0
   1aac8:	bmi	1aae8 <__assert_fail@plt+0x92e8>
   1aacc:	cmp	r2, #0
   1aad0:	asreq	r2, r0, #31
   1aad4:	eoreq	r3, r0, r0
   1aad8:	andeq	r2, r2, #1
   1aadc:	eoreq	r1, r1, r2
   1aae0:	orrseq	r1, r3, r1
   1aae4:	beq	1aaf0 <__assert_fail@plt+0x92f0>
   1aae8:	mov	r0, r4
   1aaec:	pop	{r4, sl, fp, pc}
   1aaf0:	bl	115d8 <malloc@plt>
   1aaf4:	cmp	r0, #0
   1aaf8:	addne	r4, r0, #8
   1aafc:	movne	r1, #8
   1ab00:	bfine	r4, r1, #0, #4
   1ab04:	subne	r0, r4, r0
   1ab08:	strbne	r0, [r4, #-1]
   1ab0c:	mov	r0, r4
   1ab10:	pop	{r4, sl, fp, pc}
   1ab14:	push	{fp, lr}
   1ab18:	mov	fp, sp
   1ab1c:	tst	r0, #7
   1ab20:	bne	1ab3c <__assert_fail@plt+0x933c>
   1ab24:	tst	r0, #8
   1ab28:	popeq	{fp, pc}
   1ab2c:	ldrb	r1, [r0, #-1]
   1ab30:	sub	r0, r0, r1
   1ab34:	pop	{fp, lr}
   1ab38:	b	1a788 <__assert_fail@plt+0x8f88>
   1ab3c:	bl	117d0 <abort@plt>
   1ab40:	push	{r4, sl, fp, lr}
   1ab44:	add	fp, sp, #8
   1ab48:	mov	r4, r0
   1ab4c:	bl	1147c <wcwidth@plt>
   1ab50:	cmn	r0, #1
   1ab54:	popgt	{r4, sl, fp, pc}
   1ab58:	mov	r0, r4
   1ab5c:	bl	11524 <iswcntrl@plt>
   1ab60:	clz	r0, r0
   1ab64:	lsr	r0, r0, #5
   1ab68:	pop	{r4, sl, fp, pc}
   1ab6c:	push	{r4, r5, r6, sl, fp, lr}
   1ab70:	add	fp, sp, #16
   1ab74:	mov	r4, r0
   1ab78:	mov	r0, r1
   1ab7c:	mov	r5, r1
   1ab80:	ldr	r1, [r0], #16
   1ab84:	cmp	r1, r0
   1ab88:	beq	1ab94 <__assert_fail@plt+0x9394>
   1ab8c:	mov	r6, r1
   1ab90:	b	1aba4 <__assert_fail@plt+0x93a4>
   1ab94:	ldr	r2, [r5, #4]
   1ab98:	add	r6, r4, #16
   1ab9c:	mov	r0, r6
   1aba0:	bl	114ac <memcpy@plt>
   1aba4:	str	r6, [r4]
   1aba8:	ldr	r0, [r5, #4]
   1abac:	str	r0, [r4, #4]
   1abb0:	ldrb	r0, [r5, #8]
   1abb4:	strb	r0, [r4, #8]
   1abb8:	cmp	r0, #0
   1abbc:	ldrne	r0, [r5, #12]
   1abc0:	strne	r0, [r4, #12]
   1abc4:	pop	{r4, r5, r6, sl, fp, pc}
   1abc8:	movw	r2, #53832	; 0xd248
   1abcc:	ubfx	r1, r0, #5, #3
   1abd0:	and	r0, r0, #31
   1abd4:	movt	r2, #1
   1abd8:	ldr	r1, [r2, r1, lsl #2]
   1abdc:	mov	r2, #1
   1abe0:	and	r0, r1, r2, lsl r0
   1abe4:	cmp	r0, #0
   1abe8:	movwne	r0, #1
   1abec:	bx	lr
   1abf0:	push	{r4, r5, r6, sl, fp, lr}
   1abf4:	add	fp, sp, #16
   1abf8:	sub	sp, sp, #56	; 0x38
   1abfc:	mov	r5, r0
   1ac00:	bl	11578 <__ctype_get_mb_cur_max@plt>
   1ac04:	cmp	r0, #2
   1ac08:	bcc	1ac94 <__assert_fail@plt+0x9494>
   1ac0c:	mov	r4, #0
   1ac10:	mov	r0, sp
   1ac14:	str	r4, [sp, #8]
   1ac18:	str	r4, [sp, #4]
   1ac1c:	strb	r4, [sp, #12]
   1ac20:	strb	r4, [sp]
   1ac24:	str	r5, [sp, #16]
   1ac28:	bl	16c7c <__assert_fail@plt+0x547c>
   1ac2c:	ldrb	r0, [sp, #24]
   1ac30:	cmp	r0, #0
   1ac34:	beq	1ac44 <__assert_fail@plt+0x9444>
   1ac38:	ldr	r0, [sp, #28]
   1ac3c:	cmp	r0, #0
   1ac40:	beq	1ac88 <__assert_fail@plt+0x9488>
   1ac44:	mov	r6, #0
   1ac48:	mov	r5, sp
   1ac4c:	mov	r4, #0
   1ac50:	strb	r6, [sp, #12]
   1ac54:	ldr	r0, [sp, #16]
   1ac58:	ldr	r1, [sp, #20]
   1ac5c:	add	r0, r0, r1
   1ac60:	str	r0, [sp, #16]
   1ac64:	mov	r0, r5
   1ac68:	bl	16c7c <__assert_fail@plt+0x547c>
   1ac6c:	ldrb	r1, [sp, #24]
   1ac70:	ldr	r0, [sp, #28]
   1ac74:	add	r4, r4, #1
   1ac78:	cmp	r1, #0
   1ac7c:	beq	1ac50 <__assert_fail@plt+0x9450>
   1ac80:	cmp	r0, #0
   1ac84:	bne	1ac50 <__assert_fail@plt+0x9450>
   1ac88:	mov	r0, r4
   1ac8c:	sub	sp, fp, #16
   1ac90:	pop	{r4, r5, r6, sl, fp, pc}
   1ac94:	mov	r0, r5
   1ac98:	sub	sp, fp, #16
   1ac9c:	pop	{r4, r5, r6, sl, fp, lr}
   1aca0:	b	11650 <strlen@plt>
   1aca4:	push	{r4, r5, r6, r7, fp, lr}
   1aca8:	add	fp, sp, #16
   1acac:	mov	r4, r1
   1acb0:	mov	r1, #0
   1acb4:	mov	r6, r2
   1acb8:	bl	1171c <setlocale@plt>
   1acbc:	cmp	r0, #0
   1acc0:	beq	1acf0 <__assert_fail@plt+0x94f0>
   1acc4:	mov	r7, r0
   1acc8:	bl	11650 <strlen@plt>
   1accc:	cmp	r0, r6
   1acd0:	bcs	1ad0c <__assert_fail@plt+0x950c>
   1acd4:	add	r2, r0, #1
   1acd8:	mov	r0, r4
   1acdc:	mov	r1, r7
   1ace0:	bl	114ac <memcpy@plt>
   1ace4:	mov	r5, #0
   1ace8:	mov	r0, r5
   1acec:	pop	{r4, r5, r6, r7, fp, pc}
   1acf0:	mov	r5, #22
   1acf4:	cmp	r6, #0
   1acf8:	beq	1ad34 <__assert_fail@plt+0x9534>
   1acfc:	mov	r0, #0
   1ad00:	strb	r0, [r4]
   1ad04:	mov	r0, r5
   1ad08:	pop	{r4, r5, r6, r7, fp, pc}
   1ad0c:	mov	r5, #34	; 0x22
   1ad10:	cmp	r6, #0
   1ad14:	beq	1ad34 <__assert_fail@plt+0x9534>
   1ad18:	sub	r6, r6, #1
   1ad1c:	mov	r0, r4
   1ad20:	mov	r1, r7
   1ad24:	mov	r2, r6
   1ad28:	bl	114ac <memcpy@plt>
   1ad2c:	mov	r0, #0
   1ad30:	strb	r0, [r4, r6]
   1ad34:	mov	r0, r5
   1ad38:	pop	{r4, r5, r6, r7, fp, pc}
   1ad3c:	mov	r1, #0
   1ad40:	b	1171c <setlocale@plt>
   1ad44:	mov	r1, #0
   1ad48:	mov	r2, #3
   1ad4c:	b	1a50c <__assert_fail@plt+0x8d0c>
   1ad50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad54:	mov	r7, r0
   1ad58:	ldr	r6, [pc, #72]	; 1ada8 <__assert_fail@plt+0x95a8>
   1ad5c:	ldr	r5, [pc, #72]	; 1adac <__assert_fail@plt+0x95ac>
   1ad60:	add	r6, pc, r6
   1ad64:	add	r5, pc, r5
   1ad68:	sub	r6, r6, r5
   1ad6c:	mov	r8, r1
   1ad70:	mov	r9, r2
   1ad74:	bl	11408 <fdopen@plt-0x20>
   1ad78:	asrs	r6, r6, #2
   1ad7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad80:	mov	r4, #0
   1ad84:	add	r4, r4, #1
   1ad88:	ldr	r3, [r5], #4
   1ad8c:	mov	r2, r9
   1ad90:	mov	r1, r8
   1ad94:	mov	r0, r7
   1ad98:	blx	r3
   1ad9c:	cmp	r6, r4
   1ada0:	bne	1ad84 <__assert_fail@plt+0x9584>
   1ada4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ada8:	andeq	r3, r1, r4, lsr #3
   1adac:	muleq	r1, ip, r1
   1adb0:	bx	lr
   1adb4:	ldr	r3, [pc, #12]	; 1adc8 <__assert_fail@plt+0x95c8>
   1adb8:	mov	r1, #0
   1adbc:	add	r3, pc, r3
   1adc0:	ldr	r2, [r3]
   1adc4:	b	11698 <__cxa_atexit@plt>
   1adc8:	andeq	r3, r1, r0, lsr #7

Disassembly of section .fini:

0001adcc <.fini>:
   1adcc:	push	{r3, lr}
   1add0:	pop	{r3, pc}
