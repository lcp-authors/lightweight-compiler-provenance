
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	10f94 <__assert_fail@plt+0x48>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r9, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <posix_fadvise64@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <printf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <fflush@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <memmove@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <free@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <_exit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <memcpy@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <mbsinit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <fwrite_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <memcmp@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <fputc_unlocked@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <iswprint@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <fwrite@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <lseek64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <__ctype_get_mb_cur_max@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <__fpending@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <ferror_unlocked@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <mbrtowc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <error@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <malloc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <__libc_start_main@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <__freading@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__gmon_start__@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <getopt_long@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__ctype_b_loc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <exit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <gettext@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <strlen@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strchr@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <fprintf@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <__errno_location@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__cxa_atexit@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <memset@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <fileno@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <memchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <strtoimax@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <fclose@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <fseeko64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <setlocale@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <strrchr@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <nl_langinfo@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <fopen64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <fread_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <strncmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #102400	; 0x19000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <abort@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #102400	; 0x19000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <feof_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #102400	; 0x19000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <__assert_fail@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #102400	; 0x19000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

Disassembly of section .text:

00010f58 <.text>:
   10f58:	mov	fp, #0
   10f5c:	mov	lr, #0
   10f60:	pop	{r1}		; (ldr r1, [sp], #4)
   10f64:	mov	r2, sp
   10f68:	push	{r2}		; (str r2, [sp, #-4]!)
   10f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f70:	ldr	ip, [pc, #16]	; 10f88 <__assert_fail@plt+0x3c>
   10f74:	push	{ip}		; (str ip, [sp, #-4]!)
   10f78:	ldr	r0, [pc, #12]	; 10f8c <__assert_fail@plt+0x40>
   10f7c:	ldr	r3, [pc, #12]	; 10f90 <__assert_fail@plt+0x44>
   10f80:	bl	10e08 <__libc_start_main@plt>
   10f84:	bl	10f34 <abort@plt>
   10f88:	strdeq	r8, [r1], -r0
   10f8c:	andeq	r1, r1, ip, ror #22
   10f90:	muleq	r1, r0, fp
   10f94:	ldr	r3, [pc, #20]	; 10fb0 <__assert_fail@plt+0x64>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <__assert_fail@plt+0x68>
   10f9c:	add	r3, pc, r3
   10fa0:	ldr	r2, [r3, r2]
   10fa4:	cmp	r2, #0
   10fa8:	bxeq	lr
   10fac:	b	10e20 <__gmon_start__@plt>
   10fb0:	andeq	r9, r1, ip, asr r0
   10fb4:	andeq	r0, r0, r4, ror #1
   10fb8:	ldr	r3, [pc, #28]	; 10fdc <__assert_fail@plt+0x90>
   10fbc:	ldr	r0, [pc, #28]	; 10fe0 <__assert_fail@plt+0x94>
   10fc0:	sub	r3, r3, r0
   10fc4:	cmp	r3, #6
   10fc8:	bxls	lr
   10fcc:	ldr	r3, [pc, #16]	; 10fe4 <__assert_fail@plt+0x98>
   10fd0:	cmp	r3, #0
   10fd4:	bxeq	lr
   10fd8:	bx	r3
   10fdc:	andeq	sl, r2, fp, lsr r1
   10fe0:	andeq	sl, r2, r8, lsr r1
   10fe4:	andeq	r0, r0, r0
   10fe8:	ldr	r1, [pc, #36]	; 11014 <__assert_fail@plt+0xc8>
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xcc>
   10ff0:	sub	r1, r1, r0
   10ff4:	asr	r1, r1, #2
   10ff8:	add	r1, r1, r1, lsr #31
   10ffc:	asrs	r1, r1, #1
   11000:	bxeq	lr
   11004:	ldr	r3, [pc, #16]	; 1101c <__assert_fail@plt+0xd0>
   11008:	cmp	r3, #0
   1100c:	bxeq	lr
   11010:	bx	r3
   11014:	andeq	sl, r2, r8, lsr r1
   11018:	andeq	sl, r2, r8, lsr r1
   1101c:	andeq	r0, r0, r0
   11020:	push	{r4, lr}
   11024:	ldr	r4, [pc, #24]	; 11044 <__assert_fail@plt+0xf8>
   11028:	ldrb	r3, [r4]
   1102c:	cmp	r3, #0
   11030:	popne	{r4, pc}
   11034:	bl	10fb8 <__assert_fail@plt+0x6c>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r4]
   11040:	pop	{r4, pc}
   11044:	andeq	sl, r2, ip, asr r1
   11048:	ldr	r0, [pc, #40]	; 11078 <__assert_fail@plt+0x12c>
   1104c:	ldr	r3, [r0]
   11050:	cmp	r3, #0
   11054:	bne	1105c <__assert_fail@plt+0x110>
   11058:	b	10fe8 <__assert_fail@plt+0x9c>
   1105c:	ldr	r3, [pc, #24]	; 1107c <__assert_fail@plt+0x130>
   11060:	cmp	r3, #0
   11064:	beq	11058 <__assert_fail@plt+0x10c>
   11068:	push	{r4, lr}
   1106c:	blx	r3
   11070:	pop	{r4, lr}
   11074:	b	10fe8 <__assert_fail@plt+0x9c>
   11078:	andeq	r9, r2, r4, lsl pc
   1107c:	andeq	r0, r0, r0
   11080:	push	{fp, lr}
   11084:	add	fp, sp, #4
   11088:	ldr	r0, [pc, #32]	; 110b0 <__assert_fail@plt+0x164>
   1108c:	bl	10e50 <gettext@plt>
   11090:	mov	r2, r0
   11094:	ldr	r3, [pc, #24]	; 110b4 <__assert_fail@plt+0x168>
   11098:	ldr	r3, [r3]
   1109c:	mov	r1, r3
   110a0:	mov	r0, r2
   110a4:	bl	10cdc <fputs_unlocked@plt>
   110a8:	nop			; (mov r0, r0)
   110ac:	pop	{fp, pc}
   110b0:	andeq	r8, r1, r8, lsl ip
   110b4:	andeq	sl, r2, r4, asr r1
   110b8:	push	{fp, lr}
   110bc:	add	fp, sp, #4
   110c0:	ldr	r0, [pc, #32]	; 110e8 <__assert_fail@plt+0x19c>
   110c4:	bl	10e50 <gettext@plt>
   110c8:	mov	r2, r0
   110cc:	ldr	r3, [pc, #24]	; 110ec <__assert_fail@plt+0x1a0>
   110d0:	ldr	r3, [r3]
   110d4:	mov	r1, r3
   110d8:	mov	r0, r2
   110dc:	bl	10cdc <fputs_unlocked@plt>
   110e0:	nop			; (mov r0, r0)
   110e4:	pop	{fp, pc}
   110e8:	andeq	r8, r1, r0, asr ip
   110ec:	andeq	sl, r2, r4, asr r1
   110f0:	push	{fp, lr}
   110f4:	add	fp, sp, #4
   110f8:	sub	sp, sp, #80	; 0x50
   110fc:	str	r0, [fp, #-80]	; 0xffffffb0
   11100:	ldr	r3, [pc, #348]	; 11264 <__assert_fail@plt+0x318>
   11104:	sub	ip, fp, #72	; 0x48
   11108:	mov	lr, r3
   1110c:	ldm	lr!, {r0, r1, r2, r3}
   11110:	stmia	ip!, {r0, r1, r2, r3}
   11114:	ldm	lr!, {r0, r1, r2, r3}
   11118:	stmia	ip!, {r0, r1, r2, r3}
   1111c:	ldm	lr!, {r0, r1, r2, r3}
   11120:	stmia	ip!, {r0, r1, r2, r3}
   11124:	ldm	lr, {r0, r1}
   11128:	stm	ip, {r0, r1}
   1112c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11130:	str	r3, [fp, #-8]
   11134:	sub	r3, fp, #72	; 0x48
   11138:	str	r3, [fp, #-12]
   1113c:	b	1114c <__assert_fail@plt+0x200>
   11140:	ldr	r3, [fp, #-12]
   11144:	add	r3, r3, #8
   11148:	str	r3, [fp, #-12]
   1114c:	ldr	r3, [fp, #-12]
   11150:	ldr	r3, [r3]
   11154:	cmp	r3, #0
   11158:	beq	1117c <__assert_fail@plt+0x230>
   1115c:	ldr	r3, [fp, #-12]
   11160:	ldr	r3, [r3]
   11164:	mov	r1, r3
   11168:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1116c:	bl	10cf4 <strcmp@plt>
   11170:	mov	r3, r0
   11174:	cmp	r3, #0
   11178:	bne	11140 <__assert_fail@plt+0x1f4>
   1117c:	ldr	r3, [fp, #-12]
   11180:	ldr	r3, [r3, #4]
   11184:	cmp	r3, #0
   11188:	beq	11198 <__assert_fail@plt+0x24c>
   1118c:	ldr	r3, [fp, #-12]
   11190:	ldr	r3, [r3, #4]
   11194:	str	r3, [fp, #-8]
   11198:	ldr	r0, [pc, #200]	; 11268 <__assert_fail@plt+0x31c>
   1119c:	bl	10e50 <gettext@plt>
   111a0:	mov	r3, r0
   111a4:	ldr	r2, [pc, #192]	; 1126c <__assert_fail@plt+0x320>
   111a8:	ldr	r1, [pc, #192]	; 11270 <__assert_fail@plt+0x324>
   111ac:	mov	r0, r3
   111b0:	bl	10d0c <printf@plt>
   111b4:	mov	r1, #0
   111b8:	mov	r0, #5
   111bc:	bl	10ee0 <setlocale@plt>
   111c0:	str	r0, [fp, #-16]
   111c4:	ldr	r3, [fp, #-16]
   111c8:	cmp	r3, #0
   111cc:	beq	1120c <__assert_fail@plt+0x2c0>
   111d0:	mov	r2, #3
   111d4:	ldr	r1, [pc, #152]	; 11274 <__assert_fail@plt+0x328>
   111d8:	ldr	r0, [fp, #-16]
   111dc:	bl	10f28 <strncmp@plt>
   111e0:	mov	r3, r0
   111e4:	cmp	r3, #0
   111e8:	beq	1120c <__assert_fail@plt+0x2c0>
   111ec:	ldr	r0, [pc, #132]	; 11278 <__assert_fail@plt+0x32c>
   111f0:	bl	10e50 <gettext@plt>
   111f4:	mov	r2, r0
   111f8:	ldr	r3, [pc, #124]	; 1127c <__assert_fail@plt+0x330>
   111fc:	ldr	r3, [r3]
   11200:	mov	r1, r3
   11204:	mov	r0, r2
   11208:	bl	10cdc <fputs_unlocked@plt>
   1120c:	ldr	r0, [pc, #108]	; 11280 <__assert_fail@plt+0x334>
   11210:	bl	10e50 <gettext@plt>
   11214:	mov	r3, r0
   11218:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1121c:	ldr	r1, [pc, #72]	; 1126c <__assert_fail@plt+0x320>
   11220:	mov	r0, r3
   11224:	bl	10d0c <printf@plt>
   11228:	ldr	r0, [pc, #84]	; 11284 <__assert_fail@plt+0x338>
   1122c:	bl	10e50 <gettext@plt>
   11230:	ldr	r2, [fp, #-8]
   11234:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11238:	cmp	r2, r3
   1123c:	bne	11248 <__assert_fail@plt+0x2fc>
   11240:	ldr	r3, [pc, #64]	; 11288 <__assert_fail@plt+0x33c>
   11244:	b	1124c <__assert_fail@plt+0x300>
   11248:	ldr	r3, [pc, #60]	; 1128c <__assert_fail@plt+0x340>
   1124c:	mov	r2, r3
   11250:	ldr	r1, [fp, #-8]
   11254:	bl	10d0c <printf@plt>
   11258:	nop			; (mov r0, r0)
   1125c:	sub	sp, fp, #4
   11260:	pop	{fp, pc}
   11264:	andeq	r8, r1, r0, lsl lr
   11268:	muleq	r1, ip, ip
   1126c:			; <UNDEFINED> instruction: 0x00018cb4
   11270:	ldrdeq	r8, [r1], -ip
   11274:	andeq	r8, r1, ip, ror #25
   11278:	strdeq	r8, [r1], -r0
   1127c:	andeq	sl, r2, r4, asr r1
   11280:	andeq	r8, r1, r8, lsr sp
   11284:	andeq	r8, r1, r4, asr sp
   11288:	andeq	r8, r1, r8, lsl #27
   1128c:	muleq	r1, r4, sp
   11290:	push	{r4, fp, lr}
   11294:	add	fp, sp, #8
   11298:	sub	sp, sp, #12
   1129c:	str	r0, [fp, #-16]
   112a0:	ldr	r3, [fp, #-16]
   112a4:	cmp	r3, #0
   112a8:	beq	112d8 <__assert_fail@plt+0x38c>
   112ac:	ldr	r3, [pc, #240]	; 113a4 <__assert_fail@plt+0x458>
   112b0:	ldr	r4, [r3]
   112b4:	ldr	r0, [pc, #236]	; 113a8 <__assert_fail@plt+0x45c>
   112b8:	bl	10e50 <gettext@plt>
   112bc:	mov	r1, r0
   112c0:	ldr	r3, [pc, #228]	; 113ac <__assert_fail@plt+0x460>
   112c4:	ldr	r3, [r3]
   112c8:	mov	r2, r3
   112cc:	mov	r0, r4
   112d0:	bl	10e74 <fprintf@plt>
   112d4:	b	1139c <__assert_fail@plt+0x450>
   112d8:	ldr	r0, [pc, #208]	; 113b0 <__assert_fail@plt+0x464>
   112dc:	bl	10e50 <gettext@plt>
   112e0:	mov	r2, r0
   112e4:	ldr	r3, [pc, #192]	; 113ac <__assert_fail@plt+0x460>
   112e8:	ldr	r3, [r3]
   112ec:	mov	r1, r3
   112f0:	mov	r0, r2
   112f4:	bl	10d0c <printf@plt>
   112f8:	ldr	r0, [pc, #180]	; 113b4 <__assert_fail@plt+0x468>
   112fc:	bl	10e50 <gettext@plt>
   11300:	mov	r3, r0
   11304:	mov	r1, #64	; 0x40
   11308:	mov	r0, r3
   1130c:	bl	10d0c <printf@plt>
   11310:	bl	11080 <__assert_fail@plt+0x134>
   11314:	bl	110b8 <__assert_fail@plt+0x16c>
   11318:	ldr	r0, [pc, #152]	; 113b8 <__assert_fail@plt+0x46c>
   1131c:	bl	10e50 <gettext@plt>
   11320:	mov	r2, r0
   11324:	ldr	r3, [pc, #144]	; 113bc <__assert_fail@plt+0x470>
   11328:	ldr	r3, [r3]
   1132c:	mov	r1, r3
   11330:	mov	r0, r2
   11334:	bl	10cdc <fputs_unlocked@plt>
   11338:	ldr	r0, [pc, #128]	; 113c0 <__assert_fail@plt+0x474>
   1133c:	bl	10e50 <gettext@plt>
   11340:	mov	r2, r0
   11344:	ldr	r3, [pc, #112]	; 113bc <__assert_fail@plt+0x470>
   11348:	ldr	r3, [r3]
   1134c:	mov	r1, r3
   11350:	mov	r0, r2
   11354:	bl	10cdc <fputs_unlocked@plt>
   11358:	ldr	r0, [pc, #100]	; 113c4 <__assert_fail@plt+0x478>
   1135c:	bl	10e50 <gettext@plt>
   11360:	mov	r2, r0
   11364:	ldr	r3, [pc, #80]	; 113bc <__assert_fail@plt+0x470>
   11368:	ldr	r3, [r3]
   1136c:	mov	r1, r3
   11370:	mov	r0, r2
   11374:	bl	10cdc <fputs_unlocked@plt>
   11378:	ldr	r0, [pc, #72]	; 113c8 <__assert_fail@plt+0x47c>
   1137c:	bl	10e50 <gettext@plt>
   11380:	mov	r3, r0
   11384:	ldr	r2, [pc, #64]	; 113cc <__assert_fail@plt+0x480>
   11388:	ldr	r1, [pc, #60]	; 113cc <__assert_fail@plt+0x480>
   1138c:	mov	r0, r3
   11390:	bl	10d0c <printf@plt>
   11394:	ldr	r0, [pc, #48]	; 113cc <__assert_fail@plt+0x480>
   11398:	bl	110f0 <__assert_fail@plt+0x1a4>
   1139c:	ldr	r0, [fp, #-16]
   113a0:	bl	10e44 <exit@plt>
   113a4:	andeq	sl, r2, r8, asr #2
   113a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   113ac:	andeq	sl, r2, r8, ror #2
   113b0:	andeq	r8, r1, r0, lsl #30
   113b4:	andeq	r8, r1, r0, lsr #30
   113b8:	andeq	r8, r1, r8, ror #30
   113bc:	andeq	sl, r2, r4, asr r1
   113c0:	andeq	r9, r1, ip, asr r0
   113c4:	andeq	r9, r1, ip, lsl #1
   113c8:	andeq	r9, r1, r4, asr #1
   113cc:	ldrdeq	r9, [r1], -r0
   113d0:	push	{r4, fp, lr}
   113d4:	add	fp, sp, #8
   113d8:	sub	sp, sp, #28
   113dc:	str	r0, [fp, #-24]	; 0xffffffe8
   113e0:	str	r1, [fp, #-28]	; 0xffffffe4
   113e4:	str	r2, [fp, #-32]	; 0xffffffe0
   113e8:	str	r3, [fp, #-36]	; 0xffffffdc
   113ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113f0:	cmp	r3, #0
   113f4:	bne	11448 <__assert_fail@plt+0x4fc>
   113f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   113fc:	ldr	r3, [pc, #372]	; 11578 <__assert_fail@plt+0x62c>
   11400:	ldr	r3, [r3]
   11404:	mov	r1, #1
   11408:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1140c:	bl	10d60 <fwrite_unlocked@plt>
   11410:	mov	r2, r0
   11414:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11418:	cmp	r2, r3
   1141c:	bcs	1156c <__assert_fail@plt+0x620>
   11420:	bl	10e80 <__errno_location@plt>
   11424:	mov	r3, r0
   11428:	ldr	r4, [r3]
   1142c:	ldr	r0, [pc, #328]	; 1157c <__assert_fail@plt+0x630>
   11430:	bl	10e50 <gettext@plt>
   11434:	mov	r3, r0
   11438:	mov	r2, r3
   1143c:	mov	r1, r4
   11440:	mov	r0, #1
   11444:	bl	10df0 <error@plt>
   11448:	mov	r3, #0
   1144c:	str	r3, [fp, #-16]
   11450:	b	1155c <__assert_fail@plt+0x610>
   11454:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11458:	ldr	r3, [fp, #-16]
   1145c:	sub	r2, r2, r3
   11460:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11464:	ldr	r3, [r3]
   11468:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1146c:	sub	r3, r1, r3
   11470:	cmp	r2, r3
   11474:	movlt	r3, r2
   11478:	movge	r3, r3
   1147c:	str	r3, [fp, #-20]	; 0xffffffec
   11480:	ldr	r3, [fp, #-20]	; 0xffffffec
   11484:	cmp	r3, #0
   11488:	bne	114dc <__assert_fail@plt+0x590>
   1148c:	ldr	r1, [fp, #4]
   11490:	mov	r0, #10
   11494:	bl	10d78 <fputc_unlocked@plt>
   11498:	mov	r3, r0
   1149c:	cmn	r3, #1
   114a0:	bne	114cc <__assert_fail@plt+0x580>
   114a4:	bl	10e80 <__errno_location@plt>
   114a8:	mov	r3, r0
   114ac:	ldr	r4, [r3]
   114b0:	ldr	r0, [pc, #196]	; 1157c <__assert_fail@plt+0x630>
   114b4:	bl	10e50 <gettext@plt>
   114b8:	mov	r3, r0
   114bc:	mov	r2, r3
   114c0:	mov	r1, r4
   114c4:	mov	r0, #1
   114c8:	bl	10df0 <error@plt>
   114cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114d0:	mov	r2, #0
   114d4:	str	r2, [r3]
   114d8:	b	1155c <__assert_fail@plt+0x610>
   114dc:	ldr	r3, [fp, #-16]
   114e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   114e4:	add	r0, r2, r3
   114e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   114ec:	ldr	r3, [pc, #132]	; 11578 <__assert_fail@plt+0x62c>
   114f0:	ldr	r3, [r3]
   114f4:	mov	r1, #1
   114f8:	bl	10d60 <fwrite_unlocked@plt>
   114fc:	mov	r2, r0
   11500:	ldr	r3, [fp, #-20]	; 0xffffffec
   11504:	cmp	r2, r3
   11508:	bcs	11534 <__assert_fail@plt+0x5e8>
   1150c:	bl	10e80 <__errno_location@plt>
   11510:	mov	r3, r0
   11514:	ldr	r4, [r3]
   11518:	ldr	r0, [pc, #92]	; 1157c <__assert_fail@plt+0x630>
   1151c:	bl	10e50 <gettext@plt>
   11520:	mov	r3, r0
   11524:	mov	r2, r3
   11528:	mov	r1, r4
   1152c:	mov	r0, #1
   11530:	bl	10df0 <error@plt>
   11534:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11538:	ldr	r2, [r3]
   1153c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11540:	add	r2, r2, r3
   11544:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11548:	str	r2, [r3]
   1154c:	ldr	r2, [fp, #-16]
   11550:	ldr	r3, [fp, #-20]	; 0xffffffec
   11554:	add	r3, r2, r3
   11558:	str	r3, [fp, #-16]
   1155c:	ldr	r2, [fp, #-16]
   11560:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11564:	cmp	r2, r3
   11568:	blt	11454 <__assert_fail@plt+0x508>
   1156c:	nop			; (mov r0, r0)
   11570:	sub	sp, fp, #8
   11574:	pop	{r4, fp, pc}
   11578:	andeq	sl, r2, r4, asr r1
   1157c:	ldrdeq	r9, [r1], -r8
   11580:	push	{r4, fp, lr}
   11584:	add	fp, sp, #8
   11588:	sub	sp, sp, #12
   1158c:	str	r0, [fp, #-16]
   11590:	str	r1, [fp, #-20]	; 0xffffffec
   11594:	ldr	r0, [fp, #-16]
   11598:	bl	13040 <__assert_fail@plt+0x20f4>
   1159c:	mov	r3, r0
   115a0:	cmp	r3, #0
   115a4:	beq	11618 <__assert_fail@plt+0x6cc>
   115a8:	ldr	r1, [pc, #112]	; 11620 <__assert_fail@plt+0x6d4>
   115ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   115b0:	bl	10cf4 <strcmp@plt>
   115b4:	mov	r3, r0
   115b8:	cmp	r3, #0
   115bc:	bne	115e8 <__assert_fail@plt+0x69c>
   115c0:	bl	10e80 <__errno_location@plt>
   115c4:	mov	r3, r0
   115c8:	ldr	r4, [r3]
   115cc:	ldr	r0, [pc, #80]	; 11624 <__assert_fail@plt+0x6d8>
   115d0:	bl	10e50 <gettext@plt>
   115d4:	mov	r3, r0
   115d8:	mov	r2, r3
   115dc:	mov	r1, r4
   115e0:	mov	r0, #1
   115e4:	bl	10df0 <error@plt>
   115e8:	bl	10e80 <__errno_location@plt>
   115ec:	mov	r3, r0
   115f0:	ldr	r4, [r3]
   115f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   115f8:	mov	r1, #3
   115fc:	mov	r0, #0
   11600:	bl	1594c <__assert_fail@plt+0x4a00>
   11604:	mov	r3, r0
   11608:	ldr	r2, [pc, #24]	; 11628 <__assert_fail@plt+0x6dc>
   1160c:	mov	r1, r4
   11610:	mov	r0, #1
   11614:	bl	10df0 <error@plt>
   11618:	mov	r0, #0
   1161c:	bl	10e44 <exit@plt>
   11620:	andeq	r9, r1, r4, ror #3
   11624:	andeq	r9, r1, r8, ror #3
   11628:	andeq	r9, r1, r0, lsl #4
   1162c:	push	{r4, fp, lr}
   11630:	add	fp, sp, #8
   11634:	sub	sp, sp, #52	; 0x34
   11638:	str	r0, [fp, #-40]	; 0xffffffd8
   1163c:	str	r1, [fp, #-44]	; 0xffffffd4
   11640:	str	r2, [fp, #-48]	; 0xffffffd0
   11644:	str	r3, [fp, #-52]	; 0xffffffcc
   11648:	mov	r3, #0
   1164c:	str	r3, [fp, #-32]	; 0xffffffe0
   11650:	mov	r0, #30720	; 0x7800
   11654:	bl	16484 <__assert_fail@plt+0x5538>
   11658:	mov	r3, r0
   1165c:	str	r3, [fp, #-20]	; 0xffffffec
   11660:	mov	r0, #40960	; 0xa000
   11664:	bl	16484 <__assert_fail@plt+0x5538>
   11668:	mov	r3, r0
   1166c:	str	r3, [fp, #-24]	; 0xffffffe8
   11670:	mov	r3, #0
   11674:	str	r3, [fp, #-16]
   11678:	ldr	r3, [fp, #-16]
   1167c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11680:	add	r0, r2, r3
   11684:	ldr	r3, [fp, #-16]
   11688:	rsb	r3, r3, #30720	; 0x7800
   1168c:	mov	r2, r3
   11690:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11694:	mov	r1, #1
   11698:	bl	10f1c <fread_unlocked@plt>
   1169c:	mov	r3, r0
   116a0:	str	r3, [fp, #-28]	; 0xffffffe4
   116a4:	ldr	r2, [fp, #-16]
   116a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116ac:	add	r3, r2, r3
   116b0:	str	r3, [fp, #-16]
   116b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116b8:	bl	10f40 <feof_unlocked@plt>
   116bc:	mov	r3, r0
   116c0:	cmp	r3, #0
   116c4:	bne	116e8 <__assert_fail@plt+0x79c>
   116c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116cc:	bl	10dd8 <ferror_unlocked@plt>
   116d0:	mov	r3, r0
   116d4:	cmp	r3, #0
   116d8:	bne	116e8 <__assert_fail@plt+0x79c>
   116dc:	ldr	r3, [fp, #-16]
   116e0:	cmp	r3, #30720	; 0x7800
   116e4:	blt	11678 <__assert_fail@plt+0x72c>
   116e8:	ldr	r3, [fp, #-16]
   116ec:	cmp	r3, #0
   116f0:	ble	11758 <__assert_fail@plt+0x80c>
   116f4:	ldr	r3, [fp, #-16]
   116f8:	add	r3, r3, #2
   116fc:	ldr	r2, [pc, #308]	; 11838 <__assert_fail@plt+0x8ec>
   11700:	smull	r1, r2, r2, r3
   11704:	asr	r3, r3, #31
   11708:	sub	r3, r2, r3
   1170c:	lsl	r3, r3, #2
   11710:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11714:	ldr	r1, [fp, #-16]
   11718:	ldr	r0, [fp, #-20]	; 0xffffffec
   1171c:	bl	120b8 <__assert_fail@plt+0x116c>
   11720:	ldr	r3, [fp, #-16]
   11724:	add	r3, r3, #2
   11728:	ldr	r2, [pc, #264]	; 11838 <__assert_fail@plt+0x8ec>
   1172c:	smull	r1, r2, r2, r3
   11730:	asr	r3, r3, #31
   11734:	sub	r3, r2, r3
   11738:	lsl	r1, r3, #2
   1173c:	sub	r2, fp, #32
   11740:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11744:	str	r3, [sp]
   11748:	mov	r3, r2
   1174c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11750:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11754:	bl	113d0 <__assert_fail@plt+0x484>
   11758:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1175c:	bl	10f40 <feof_unlocked@plt>
   11760:	mov	r3, r0
   11764:	cmp	r3, #0
   11768:	bne	1178c <__assert_fail@plt+0x840>
   1176c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11770:	bl	10dd8 <ferror_unlocked@plt>
   11774:	mov	r3, r0
   11778:	cmp	r3, #0
   1177c:	bne	1178c <__assert_fail@plt+0x840>
   11780:	ldr	r3, [fp, #-16]
   11784:	cmp	r3, #30720	; 0x7800
   11788:	beq	11670 <__assert_fail@plt+0x724>
   1178c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11790:	cmp	r3, #0
   11794:	beq	117e4 <__assert_fail@plt+0x898>
   11798:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1179c:	cmp	r3, #0
   117a0:	ble	117e4 <__assert_fail@plt+0x898>
   117a4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   117a8:	mov	r0, #10
   117ac:	bl	10d78 <fputc_unlocked@plt>
   117b0:	mov	r3, r0
   117b4:	cmn	r3, #1
   117b8:	bne	117e4 <__assert_fail@plt+0x898>
   117bc:	bl	10e80 <__errno_location@plt>
   117c0:	mov	r3, r0
   117c4:	ldr	r4, [r3]
   117c8:	ldr	r0, [pc, #108]	; 1183c <__assert_fail@plt+0x8f0>
   117cc:	bl	10e50 <gettext@plt>
   117d0:	mov	r3, r0
   117d4:	mov	r2, r3
   117d8:	mov	r1, r4
   117dc:	mov	r0, #1
   117e0:	bl	10df0 <error@plt>
   117e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   117e8:	bl	10dd8 <ferror_unlocked@plt>
   117ec:	mov	r3, r0
   117f0:	cmp	r3, #0
   117f4:	beq	11820 <__assert_fail@plt+0x8d4>
   117f8:	bl	10e80 <__errno_location@plt>
   117fc:	mov	r3, r0
   11800:	ldr	r4, [r3]
   11804:	ldr	r0, [pc, #52]	; 11840 <__assert_fail@plt+0x8f4>
   11808:	bl	10e50 <gettext@plt>
   1180c:	mov	r3, r0
   11810:	mov	r2, r3
   11814:	mov	r1, r4
   11818:	mov	r0, #1
   1181c:	bl	10df0 <error@plt>
   11820:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11824:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11828:	bl	11580 <__assert_fail@plt+0x634>
   1182c:	nop			; (mov r0, r0)
   11830:	sub	sp, fp, #8
   11834:	pop	{r4, fp, pc}
   11838:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   1183c:	ldrdeq	r9, [r1], -r8
   11840:	andeq	r9, r1, r4, lsl #4
   11844:	push	{r4, fp, lr}
   11848:	add	fp, sp, #8
   1184c:	sub	sp, sp, #68	; 0x44
   11850:	str	r0, [fp, #-56]	; 0xffffffc8
   11854:	str	r1, [fp, #-60]	; 0xffffffc4
   11858:	str	r2, [fp, #-64]	; 0xffffffc0
   1185c:	strb	r3, [fp, #-65]	; 0xffffffbf
   11860:	mov	r0, #4096	; 0x1000
   11864:	bl	16484 <__assert_fail@plt+0x5538>
   11868:	mov	r3, r0
   1186c:	str	r3, [fp, #-32]	; 0xffffffe0
   11870:	mov	r0, #3072	; 0xc00
   11874:	bl	16484 <__assert_fail@plt+0x5538>
   11878:	mov	r3, r0
   1187c:	str	r3, [fp, #-36]	; 0xffffffdc
   11880:	sub	r3, fp, #48	; 0x30
   11884:	mov	r0, r3
   11888:	bl	12554 <__assert_fail@plt+0x1608>
   1188c:	mov	r3, #0
   11890:	str	r3, [fp, #-16]
   11894:	ldr	r3, [fp, #-16]
   11898:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1189c:	add	r0, r2, r3
   118a0:	ldr	r3, [fp, #-16]
   118a4:	rsb	r3, r3, #4096	; 0x1000
   118a8:	mov	r2, r3
   118ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118b0:	mov	r1, #1
   118b4:	bl	10f1c <fread_unlocked@plt>
   118b8:	mov	r3, r0
   118bc:	str	r3, [fp, #-20]	; 0xffffffec
   118c0:	ldrb	r3, [fp, #-65]	; 0xffffffbf
   118c4:	cmp	r3, #0
   118c8:	beq	119a4 <__assert_fail@plt+0xa58>
   118cc:	mov	r3, #0
   118d0:	str	r3, [fp, #-24]	; 0xffffffe8
   118d4:	b	11988 <__assert_fail@plt+0xa3c>
   118d8:	ldr	r2, [fp, #-16]
   118dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   118e0:	add	r3, r2, r3
   118e4:	mov	r2, r3
   118e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118ec:	add	r3, r3, r2
   118f0:	ldrb	r3, [r3]
   118f4:	mov	r0, r3
   118f8:	bl	12504 <__assert_fail@plt+0x15b8>
   118fc:	mov	r3, r0
   11900:	cmp	r3, #0
   11904:	bne	1192c <__assert_fail@plt+0x9e0>
   11908:	ldr	r2, [fp, #-16]
   1190c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11910:	add	r3, r2, r3
   11914:	mov	r2, r3
   11918:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1191c:	add	r3, r3, r2
   11920:	ldrb	r3, [r3]
   11924:	cmp	r3, #61	; 0x3d
   11928:	bne	1193c <__assert_fail@plt+0x9f0>
   1192c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11930:	add	r3, r3, #1
   11934:	str	r3, [fp, #-24]	; 0xffffffe8
   11938:	b	11988 <__assert_fail@plt+0xa3c>
   1193c:	ldr	r2, [fp, #-16]
   11940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11944:	add	r3, r2, r3
   11948:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1194c:	add	r0, r2, r3
   11950:	ldr	r2, [fp, #-16]
   11954:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11958:	add	r3, r2, r3
   1195c:	add	r3, r3, #1
   11960:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11964:	add	r1, r2, r3
   11968:	ldr	r3, [fp, #-20]	; 0xffffffec
   1196c:	sub	r3, r3, #1
   11970:	str	r3, [fp, #-20]	; 0xffffffec
   11974:	ldr	r2, [fp, #-20]	; 0xffffffec
   11978:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1197c:	sub	r3, r2, r3
   11980:	mov	r2, r3
   11984:	bl	10d24 <memmove@plt>
   11988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1198c:	cmp	r3, #0
   11990:	ble	119a4 <__assert_fail@plt+0xa58>
   11994:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1199c:	cmp	r2, r3
   119a0:	blt	118d8 <__assert_fail@plt+0x98c>
   119a4:	ldr	r2, [fp, #-16]
   119a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119ac:	add	r3, r2, r3
   119b0:	str	r3, [fp, #-16]
   119b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   119b8:	bl	10dd8 <ferror_unlocked@plt>
   119bc:	mov	r3, r0
   119c0:	cmp	r3, #0
   119c4:	beq	119f0 <__assert_fail@plt+0xaa4>
   119c8:	bl	10e80 <__errno_location@plt>
   119cc:	mov	r3, r0
   119d0:	ldr	r4, [r3]
   119d4:	ldr	r0, [pc, #388]	; 11b60 <__assert_fail@plt+0xc14>
   119d8:	bl	10e50 <gettext@plt>
   119dc:	mov	r3, r0
   119e0:	mov	r2, r3
   119e4:	mov	r1, r4
   119e8:	mov	r0, #1
   119ec:	bl	10df0 <error@plt>
   119f0:	ldr	r3, [fp, #-16]
   119f4:	cmp	r3, #4096	; 0x1000
   119f8:	bge	11a10 <__assert_fail@plt+0xac4>
   119fc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11a00:	bl	10f40 <feof_unlocked@plt>
   11a04:	mov	r3, r0
   11a08:	cmp	r3, #0
   11a0c:	beq	11894 <__assert_fail@plt+0x948>
   11a10:	mov	r3, #0
   11a14:	str	r3, [fp, #-28]	; 0xffffffe4
   11a18:	b	11b00 <__assert_fail@plt+0xbb4>
   11a1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a20:	cmp	r3, #1
   11a24:	bne	11a34 <__assert_fail@plt+0xae8>
   11a28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a2c:	cmp	r3, #0
   11a30:	beq	11b30 <__assert_fail@plt+0xbe4>
   11a34:	mov	r3, #3072	; 0xc00
   11a38:	str	r3, [fp, #-52]	; 0xffffffcc
   11a3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a40:	cmp	r3, #0
   11a44:	bne	11a50 <__assert_fail@plt+0xb04>
   11a48:	ldr	r2, [fp, #-16]
   11a4c:	b	11a54 <__assert_fail@plt+0xb08>
   11a50:	mov	r2, #0
   11a54:	sub	r0, fp, #48	; 0x30
   11a58:	sub	r3, fp, #52	; 0x34
   11a5c:	str	r3, [sp]
   11a60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a64:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11a68:	bl	12aa0 <__assert_fail@plt+0x1b54>
   11a6c:	mov	r3, r0
   11a70:	strb	r3, [fp, #-37]	; 0xffffffdb
   11a74:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11a78:	mov	r2, r3
   11a7c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11a80:	mov	r1, #1
   11a84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a88:	bl	10d60 <fwrite_unlocked@plt>
   11a8c:	mov	r2, r0
   11a90:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11a94:	cmp	r2, r3
   11a98:	bcs	11ac4 <__assert_fail@plt+0xb78>
   11a9c:	bl	10e80 <__errno_location@plt>
   11aa0:	mov	r3, r0
   11aa4:	ldr	r4, [r3]
   11aa8:	ldr	r0, [pc, #180]	; 11b64 <__assert_fail@plt+0xc18>
   11aac:	bl	10e50 <gettext@plt>
   11ab0:	mov	r3, r0
   11ab4:	mov	r2, r3
   11ab8:	mov	r1, r4
   11abc:	mov	r0, #1
   11ac0:	bl	10df0 <error@plt>
   11ac4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11ac8:	eor	r3, r3, #1
   11acc:	uxtb	r3, r3
   11ad0:	cmp	r3, #0
   11ad4:	beq	11af4 <__assert_fail@plt+0xba8>
   11ad8:	ldr	r0, [pc, #136]	; 11b68 <__assert_fail@plt+0xc1c>
   11adc:	bl	10e50 <gettext@plt>
   11ae0:	mov	r3, r0
   11ae4:	mov	r2, r3
   11ae8:	mov	r1, #0
   11aec:	mov	r0, #1
   11af0:	bl	10df0 <error@plt>
   11af4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11af8:	add	r3, r3, #1
   11afc:	str	r3, [fp, #-28]	; 0xffffffe4
   11b00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b04:	bl	10f40 <feof_unlocked@plt>
   11b08:	mov	r3, r0
   11b0c:	cmp	r3, #0
   11b10:	beq	11b1c <__assert_fail@plt+0xbd0>
   11b14:	mov	r2, #2
   11b18:	b	11b20 <__assert_fail@plt+0xbd4>
   11b1c:	mov	r2, #1
   11b20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b24:	cmp	r2, r3
   11b28:	bgt	11a1c <__assert_fail@plt+0xad0>
   11b2c:	b	11b34 <__assert_fail@plt+0xbe8>
   11b30:	nop			; (mov r0, r0)
   11b34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b38:	bl	10f40 <feof_unlocked@plt>
   11b3c:	mov	r3, r0
   11b40:	cmp	r3, #0
   11b44:	beq	1188c <__assert_fail@plt+0x940>
   11b48:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11b4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b50:	bl	11580 <__assert_fail@plt+0x634>
   11b54:	nop			; (mov r0, r0)
   11b58:	sub	sp, fp, #8
   11b5c:	pop	{r4, fp, pc}
   11b60:	andeq	r9, r1, r4, lsl #4
   11b64:	ldrdeq	r9, [r1], -r8
   11b68:	andeq	r9, r1, r0, lsl r2
   11b6c:	push	{r4, fp, lr}
   11b70:	add	fp, sp, #8
   11b74:	sub	sp, sp, #52	; 0x34
   11b78:	str	r0, [fp, #-48]	; 0xffffffd0
   11b7c:	str	r1, [fp, #-52]	; 0xffffffcc
   11b80:	mov	r3, #0
   11b84:	strb	r3, [fp, #-21]	; 0xffffffeb
   11b88:	mov	r3, #0
   11b8c:	strb	r3, [fp, #-22]	; 0xffffffea
   11b90:	mov	r3, #76	; 0x4c
   11b94:	str	r3, [fp, #-28]	; 0xffffffe4
   11b98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11b9c:	ldr	r3, [r3]
   11ba0:	mov	r0, r3
   11ba4:	bl	1348c <__assert_fail@plt+0x2540>
   11ba8:	ldr	r1, [pc, #800]	; 11ed0 <__assert_fail@plt+0xf84>
   11bac:	mov	r0, #6
   11bb0:	bl	10ee0 <setlocale@plt>
   11bb4:	ldr	r1, [pc, #792]	; 11ed4 <__assert_fail@plt+0xf88>
   11bb8:	ldr	r0, [pc, #792]	; 11ed8 <__assert_fail@plt+0xf8c>
   11bbc:	bl	10f10 <bindtextdomain@plt>
   11bc0:	ldr	r0, [pc, #784]	; 11ed8 <__assert_fail@plt+0xf8c>
   11bc4:	bl	10d90 <textdomain@plt>
   11bc8:	ldr	r0, [pc, #780]	; 11edc <__assert_fail@plt+0xf90>
   11bcc:	bl	18bf4 <__assert_fail@plt+0x7ca8>
   11bd0:	b	11d28 <__assert_fail@plt+0xddc>
   11bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bd8:	cmp	r3, #100	; 0x64
   11bdc:	beq	11c10 <__assert_fail@plt+0xcc4>
   11be0:	cmp	r3, #100	; 0x64
   11be4:	bgt	11bfc <__assert_fail@plt+0xcb0>
   11be8:	cmn	r3, #3
   11bec:	beq	11ce8 <__assert_fail@plt+0xd9c>
   11bf0:	cmn	r3, #2
   11bf4:	beq	11ce0 <__assert_fail@plt+0xd94>
   11bf8:	b	11d20 <__assert_fail@plt+0xdd4>
   11bfc:	cmp	r3, #105	; 0x69
   11c00:	beq	11cd4 <__assert_fail@plt+0xd88>
   11c04:	cmp	r3, #119	; 0x77
   11c08:	beq	11c1c <__assert_fail@plt+0xcd0>
   11c0c:	b	11d20 <__assert_fail@plt+0xdd4>
   11c10:	mov	r3, #1
   11c14:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c18:	b	11d28 <__assert_fail@plt+0xddc>
   11c1c:	ldr	r3, [pc, #700]	; 11ee0 <__assert_fail@plt+0xf94>
   11c20:	ldr	r0, [r3]
   11c24:	sub	r2, fp, #44	; 0x2c
   11c28:	ldr	r3, [pc, #672]	; 11ed0 <__assert_fail@plt+0xf84>
   11c2c:	str	r3, [sp]
   11c30:	mov	r3, r2
   11c34:	mov	r2, #10
   11c38:	mov	r1, #0
   11c3c:	bl	17360 <__assert_fail@plt+0x6414>
   11c40:	str	r0, [fp, #-36]	; 0xffffffdc
   11c44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c48:	cmp	r3, #1
   11c4c:	bhi	11c60 <__assert_fail@plt+0xd14>
   11c50:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11c54:	cmp	r2, #0
   11c58:	sbcs	r3, r3, #0
   11c5c:	bge	11c98 <__assert_fail@plt+0xd4c>
   11c60:	ldr	r0, [pc, #636]	; 11ee4 <__assert_fail@plt+0xf98>
   11c64:	bl	10e50 <gettext@plt>
   11c68:	mov	r4, r0
   11c6c:	ldr	r3, [pc, #620]	; 11ee0 <__assert_fail@plt+0xf94>
   11c70:	ldr	r3, [r3]
   11c74:	mov	r0, r3
   11c78:	bl	15bbc <__assert_fail@plt+0x4c70>
   11c7c:	mov	r3, r0
   11c80:	str	r3, [sp]
   11c84:	mov	r3, r4
   11c88:	ldr	r2, [pc, #600]	; 11ee8 <__assert_fail@plt+0xf9c>
   11c8c:	mov	r1, #0
   11c90:	mov	r0, #1
   11c94:	bl	10df0 <error@plt>
   11c98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c9c:	cmp	r3, #1
   11ca0:	beq	11cc8 <__assert_fail@plt+0xd7c>
   11ca4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11ca8:	mvn	r0, #-2147483648	; 0x80000000
   11cac:	mov	r1, #0
   11cb0:	cmp	r0, r2
   11cb4:	sbcs	r3, r1, r3
   11cb8:	blt	11cc8 <__assert_fail@plt+0xd7c>
   11cbc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11cc0:	mov	r3, r2
   11cc4:	b	11ccc <__assert_fail@plt+0xd80>
   11cc8:	mov	r3, #0
   11ccc:	str	r3, [fp, #-28]	; 0xffffffe4
   11cd0:	b	11d28 <__assert_fail@plt+0xddc>
   11cd4:	mov	r3, #1
   11cd8:	strb	r3, [fp, #-22]	; 0xffffffea
   11cdc:	b	11d28 <__assert_fail@plt+0xddc>
   11ce0:	mov	r0, #0
   11ce4:	bl	11290 <__assert_fail@plt+0x344>
   11ce8:	ldr	r3, [pc, #508]	; 11eec <__assert_fail@plt+0xfa0>
   11cec:	ldr	r0, [r3]
   11cf0:	ldr	r3, [pc, #504]	; 11ef0 <__assert_fail@plt+0xfa4>
   11cf4:	ldr	r2, [r3]
   11cf8:	mov	r3, #0
   11cfc:	str	r3, [sp, #4]
   11d00:	ldr	r3, [pc, #492]	; 11ef4 <__assert_fail@plt+0xfa8>
   11d04:	str	r3, [sp]
   11d08:	mov	r3, r2
   11d0c:	ldr	r2, [pc, #484]	; 11ef8 <__assert_fail@plt+0xfac>
   11d10:	ldr	r1, [pc, #484]	; 11efc <__assert_fail@plt+0xfb0>
   11d14:	bl	16338 <__assert_fail@plt+0x53ec>
   11d18:	mov	r0, #0
   11d1c:	bl	10e44 <exit@plt>
   11d20:	mov	r0, #1
   11d24:	bl	11290 <__assert_fail@plt+0x344>
   11d28:	mov	r3, #0
   11d2c:	str	r3, [sp]
   11d30:	ldr	r3, [pc, #456]	; 11f00 <__assert_fail@plt+0xfb4>
   11d34:	ldr	r2, [pc, #456]	; 11f04 <__assert_fail@plt+0xfb8>
   11d38:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11d3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d40:	bl	10e2c <getopt_long@plt>
   11d44:	str	r0, [fp, #-32]	; 0xffffffe0
   11d48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11d4c:	cmn	r3, #1
   11d50:	bne	11bd4 <__assert_fail@plt+0xc88>
   11d54:	ldr	r3, [pc, #428]	; 11f08 <__assert_fail@plt+0xfbc>
   11d58:	ldr	r3, [r3]
   11d5c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11d60:	sub	r3, r2, r3
   11d64:	cmp	r3, #1
   11d68:	ble	11db8 <__assert_fail@plt+0xe6c>
   11d6c:	ldr	r0, [pc, #408]	; 11f0c <__assert_fail@plt+0xfc0>
   11d70:	bl	10e50 <gettext@plt>
   11d74:	mov	r4, r0
   11d78:	ldr	r3, [pc, #392]	; 11f08 <__assert_fail@plt+0xfbc>
   11d7c:	ldr	r3, [r3]
   11d80:	add	r3, r3, #1
   11d84:	lsl	r3, r3, #2
   11d88:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11d8c:	add	r3, r2, r3
   11d90:	ldr	r3, [r3]
   11d94:	mov	r0, r3
   11d98:	bl	15bbc <__assert_fail@plt+0x4c70>
   11d9c:	mov	r3, r0
   11da0:	mov	r2, r4
   11da4:	mov	r1, #0
   11da8:	mov	r0, #0
   11dac:	bl	10df0 <error@plt>
   11db0:	mov	r0, #1
   11db4:	bl	11290 <__assert_fail@plt+0x344>
   11db8:	ldr	r3, [pc, #328]	; 11f08 <__assert_fail@plt+0xfbc>
   11dbc:	ldr	r2, [r3]
   11dc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11dc4:	cmp	r2, r3
   11dc8:	bge	11dec <__assert_fail@plt+0xea0>
   11dcc:	ldr	r3, [pc, #308]	; 11f08 <__assert_fail@plt+0xfbc>
   11dd0:	ldr	r3, [r3]
   11dd4:	lsl	r3, r3, #2
   11dd8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11ddc:	add	r3, r2, r3
   11de0:	ldr	r3, [r3]
   11de4:	str	r3, [fp, #-20]	; 0xffffffec
   11de8:	b	11df4 <__assert_fail@plt+0xea8>
   11dec:	ldr	r3, [pc, #284]	; 11f10 <__assert_fail@plt+0xfc4>
   11df0:	str	r3, [fp, #-20]	; 0xffffffec
   11df4:	ldr	r1, [pc, #276]	; 11f10 <__assert_fail@plt+0xfc4>
   11df8:	ldr	r0, [fp, #-20]	; 0xffffffec
   11dfc:	bl	10cf4 <strcmp@plt>
   11e00:	mov	r3, r0
   11e04:	cmp	r3, #0
   11e08:	bne	11e28 <__assert_fail@plt+0xedc>
   11e0c:	mov	r1, #0
   11e10:	mov	r0, #0
   11e14:	bl	16ff4 <__assert_fail@plt+0x60a8>
   11e18:	ldr	r3, [pc, #244]	; 11f14 <__assert_fail@plt+0xfc8>
   11e1c:	ldr	r3, [r3]
   11e20:	str	r3, [fp, #-16]
   11e24:	b	11e74 <__assert_fail@plt+0xf28>
   11e28:	ldr	r1, [pc, #232]	; 11f18 <__assert_fail@plt+0xfcc>
   11e2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e30:	bl	10f04 <fopen64@plt>
   11e34:	str	r0, [fp, #-16]
   11e38:	ldr	r3, [fp, #-16]
   11e3c:	cmp	r3, #0
   11e40:	bne	11e74 <__assert_fail@plt+0xf28>
   11e44:	bl	10e80 <__errno_location@plt>
   11e48:	mov	r3, r0
   11e4c:	ldr	r4, [r3]
   11e50:	ldr	r2, [fp, #-20]	; 0xffffffec
   11e54:	mov	r1, #3
   11e58:	mov	r0, #0
   11e5c:	bl	1594c <__assert_fail@plt+0x4a00>
   11e60:	mov	r3, r0
   11e64:	ldr	r2, [pc, #176]	; 11f1c <__assert_fail@plt+0xfd0>
   11e68:	mov	r1, r4
   11e6c:	mov	r0, #1
   11e70:	bl	10df0 <error@plt>
   11e74:	mov	r1, #2
   11e78:	ldr	r0, [fp, #-16]
   11e7c:	bl	12fe4 <__assert_fail@plt+0x2098>
   11e80:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11e84:	cmp	r3, #0
   11e88:	beq	11ea8 <__assert_fail@plt+0xf5c>
   11e8c:	ldr	r3, [pc, #88]	; 11eec <__assert_fail@plt+0xfa0>
   11e90:	ldr	r2, [r3]
   11e94:	ldrb	r3, [fp, #-22]	; 0xffffffea
   11e98:	ldr	r1, [fp, #-20]	; 0xffffffec
   11e9c:	ldr	r0, [fp, #-16]
   11ea0:	bl	11844 <__assert_fail@plt+0x8f8>
   11ea4:	b	11ec0 <__assert_fail@plt+0xf74>
   11ea8:	ldr	r3, [pc, #60]	; 11eec <__assert_fail@plt+0xfa0>
   11eac:	ldr	r2, [r3]
   11eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11eb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   11eb8:	ldr	r0, [fp, #-16]
   11ebc:	bl	1162c <__assert_fail@plt+0x6e0>
   11ec0:	mov	r3, #0
   11ec4:	mov	r0, r3
   11ec8:	sub	sp, fp, #8
   11ecc:	pop	{r4, fp, pc}
   11ed0:	muleq	r1, r4, sp
   11ed4:	andeq	r9, r1, r0, lsr #4
   11ed8:	andeq	r8, r1, ip, lsr #27
   11edc:	andeq	r2, r1, r0, ror lr
   11ee0:	andeq	sl, r2, r8, asr r1
   11ee4:	andeq	r9, r1, r8, lsr r2
   11ee8:	andeq	r9, r1, ip, asr #4
   11eec:	andeq	sl, r2, r4, asr r1
   11ef0:	strdeq	sl, [r2], -r0
   11ef4:	andeq	r9, r1, r4, asr r2
   11ef8:	ldrdeq	r8, [r1], -ip
   11efc:	ldrdeq	r9, [r1], -r0
   11f00:	andeq	r8, r1, r8, ror lr
   11f04:	andeq	r9, r1, r4, ror #4
   11f08:	andeq	sl, r2, r0, asr #2
   11f0c:	andeq	r9, r1, ip, ror #4
   11f10:	andeq	r9, r1, r4, ror #3
   11f14:	andeq	sl, r2, r0, asr r1
   11f18:	andeq	r9, r1, r0, lsl #5
   11f1c:	andeq	r9, r1, r0, lsl #4
   11f20:	push	{fp}		; (str fp, [sp, #-4]!)
   11f24:	add	fp, sp, #0
   11f28:	sub	sp, sp, #12
   11f2c:	mov	r3, r0
   11f30:	strb	r3, [fp, #-5]
   11f34:	ldrb	r3, [fp, #-5]
   11f38:	mov	r0, r3
   11f3c:	add	sp, fp, #0
   11f40:	pop	{fp}		; (ldr fp, [sp], #4)
   11f44:	bx	lr
   11f48:	push	{r4, r5, fp, lr}
   11f4c:	add	fp, sp, #12
   11f50:	sub	sp, sp, #16
   11f54:	str	r0, [fp, #-16]
   11f58:	str	r1, [fp, #-20]	; 0xffffffec
   11f5c:	str	r2, [fp, #-24]	; 0xffffffe8
   11f60:	b	1209c <__assert_fail@plt+0x1150>
   11f64:	ldr	r4, [fp, #-24]	; 0xffffffe8
   11f68:	add	r3, r4, #1
   11f6c:	str	r3, [fp, #-24]	; 0xffffffe8
   11f70:	ldr	r3, [fp, #-16]
   11f74:	ldrb	r3, [r3]
   11f78:	mov	r0, r3
   11f7c:	bl	11f20 <__assert_fail@plt+0xfd4>
   11f80:	mov	r3, r0
   11f84:	lsr	r3, r3, #2
   11f88:	uxtb	r3, r3
   11f8c:	and	r3, r3, #63	; 0x3f
   11f90:	ldr	r2, [pc, #284]	; 120b4 <__assert_fail@plt+0x1168>
   11f94:	ldrb	r3, [r2, r3]
   11f98:	strb	r3, [r4]
   11f9c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   11fa0:	add	r3, r4, #1
   11fa4:	str	r3, [fp, #-24]	; 0xffffffe8
   11fa8:	ldr	r3, [fp, #-16]
   11fac:	ldrb	r3, [r3]
   11fb0:	mov	r0, r3
   11fb4:	bl	11f20 <__assert_fail@plt+0xfd4>
   11fb8:	mov	r3, r0
   11fbc:	lsl	r5, r3, #4
   11fc0:	ldr	r3, [fp, #-16]
   11fc4:	add	r3, r3, #1
   11fc8:	ldrb	r3, [r3]
   11fcc:	mov	r0, r3
   11fd0:	bl	11f20 <__assert_fail@plt+0xfd4>
   11fd4:	mov	r3, r0
   11fd8:	lsr	r3, r3, #4
   11fdc:	uxtb	r3, r3
   11fe0:	add	r3, r5, r3
   11fe4:	and	r3, r3, #63	; 0x3f
   11fe8:	ldr	r2, [pc, #196]	; 120b4 <__assert_fail@plt+0x1168>
   11fec:	ldrb	r3, [r2, r3]
   11ff0:	strb	r3, [r4]
   11ff4:	ldr	r4, [fp, #-24]	; 0xffffffe8
   11ff8:	add	r3, r4, #1
   11ffc:	str	r3, [fp, #-24]	; 0xffffffe8
   12000:	ldr	r3, [fp, #-16]
   12004:	add	r3, r3, #1
   12008:	ldrb	r3, [r3]
   1200c:	mov	r0, r3
   12010:	bl	11f20 <__assert_fail@plt+0xfd4>
   12014:	mov	r3, r0
   12018:	lsl	r5, r3, #2
   1201c:	ldr	r3, [fp, #-16]
   12020:	add	r3, r3, #2
   12024:	ldrb	r3, [r3]
   12028:	mov	r0, r3
   1202c:	bl	11f20 <__assert_fail@plt+0xfd4>
   12030:	mov	r3, r0
   12034:	lsr	r3, r3, #6
   12038:	uxtb	r3, r3
   1203c:	add	r3, r5, r3
   12040:	and	r3, r3, #63	; 0x3f
   12044:	ldr	r2, [pc, #104]	; 120b4 <__assert_fail@plt+0x1168>
   12048:	ldrb	r3, [r2, r3]
   1204c:	strb	r3, [r4]
   12050:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12054:	add	r3, r4, #1
   12058:	str	r3, [fp, #-24]	; 0xffffffe8
   1205c:	ldr	r3, [fp, #-16]
   12060:	add	r3, r3, #2
   12064:	ldrb	r3, [r3]
   12068:	mov	r0, r3
   1206c:	bl	11f20 <__assert_fail@plt+0xfd4>
   12070:	mov	r3, r0
   12074:	and	r3, r3, #63	; 0x3f
   12078:	ldr	r2, [pc, #52]	; 120b4 <__assert_fail@plt+0x1168>
   1207c:	ldrb	r3, [r2, r3]
   12080:	strb	r3, [r4]
   12084:	ldr	r3, [fp, #-20]	; 0xffffffec
   12088:	sub	r3, r3, #3
   1208c:	str	r3, [fp, #-20]	; 0xffffffec
   12090:	ldr	r3, [fp, #-16]
   12094:	add	r3, r3, #3
   12098:	str	r3, [fp, #-16]
   1209c:	ldr	r3, [fp, #-20]	; 0xffffffec
   120a0:	cmp	r3, #0
   120a4:	bne	11f64 <__assert_fail@plt+0x1018>
   120a8:	nop			; (mov r0, r0)
   120ac:	sub	sp, fp, #12
   120b0:	pop	{r4, r5, fp, pc}
   120b4:	muleq	r1, r4, r2
   120b8:	push	{r4, r5, fp, lr}
   120bc:	add	fp, sp, #12
   120c0:	sub	sp, sp, #16
   120c4:	str	r0, [fp, #-16]
   120c8:	str	r1, [fp, #-20]	; 0xffffffec
   120cc:	str	r2, [fp, #-24]	; 0xffffffe8
   120d0:	str	r3, [fp, #-28]	; 0xffffffe4
   120d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120d8:	and	r3, r3, #3
   120dc:	cmp	r3, #0
   120e0:	bne	12330 <__assert_fail@plt+0x13e4>
   120e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120e8:	asr	r2, r3, #2
   120ec:	mov	r3, r2
   120f0:	lsl	r3, r3, #1
   120f4:	add	r2, r3, r2
   120f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120fc:	cmp	r2, r3
   12100:	bne	12330 <__assert_fail@plt+0x13e4>
   12104:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12108:	ldr	r1, [fp, #-20]	; 0xffffffec
   1210c:	ldr	r0, [fp, #-16]
   12110:	bl	11f48 <__assert_fail@plt+0xffc>
   12114:	b	12380 <__assert_fail@plt+0x1434>
   12118:	ldr	r4, [fp, #-24]	; 0xffffffe8
   1211c:	add	r3, r4, #1
   12120:	str	r3, [fp, #-24]	; 0xffffffe8
   12124:	ldr	r3, [fp, #-16]
   12128:	ldrb	r3, [r3]
   1212c:	mov	r0, r3
   12130:	bl	11f20 <__assert_fail@plt+0xfd4>
   12134:	mov	r3, r0
   12138:	lsr	r3, r3, #2
   1213c:	uxtb	r3, r3
   12140:	and	r3, r3, #63	; 0x3f
   12144:	ldr	r2, [pc, #572]	; 12388 <__assert_fail@plt+0x143c>
   12148:	ldrb	r3, [r2, r3]
   1214c:	strb	r3, [r4]
   12150:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12154:	sub	r3, r3, #1
   12158:	str	r3, [fp, #-28]	; 0xffffffe4
   1215c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12160:	cmp	r3, #0
   12164:	beq	1234c <__assert_fail@plt+0x1400>
   12168:	ldr	r4, [fp, #-24]	; 0xffffffe8
   1216c:	add	r3, r4, #1
   12170:	str	r3, [fp, #-24]	; 0xffffffe8
   12174:	ldr	r3, [fp, #-16]
   12178:	ldrb	r3, [r3]
   1217c:	mov	r0, r3
   12180:	bl	11f20 <__assert_fail@plt+0xfd4>
   12184:	mov	r3, r0
   12188:	lsl	r5, r3, #4
   1218c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12190:	sub	r3, r3, #1
   12194:	str	r3, [fp, #-20]	; 0xffffffec
   12198:	ldr	r3, [fp, #-20]	; 0xffffffec
   1219c:	cmp	r3, #0
   121a0:	beq	121c8 <__assert_fail@plt+0x127c>
   121a4:	ldr	r3, [fp, #-16]
   121a8:	add	r3, r3, #1
   121ac:	ldrb	r3, [r3]
   121b0:	mov	r0, r3
   121b4:	bl	11f20 <__assert_fail@plt+0xfd4>
   121b8:	mov	r3, r0
   121bc:	lsr	r3, r3, #4
   121c0:	uxtb	r3, r3
   121c4:	b	121cc <__assert_fail@plt+0x1280>
   121c8:	mov	r3, #0
   121cc:	add	r3, r5, r3
   121d0:	and	r3, r3, #63	; 0x3f
   121d4:	ldr	r2, [pc, #428]	; 12388 <__assert_fail@plt+0x143c>
   121d8:	ldrb	r3, [r2, r3]
   121dc:	strb	r3, [r4]
   121e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121e4:	sub	r3, r3, #1
   121e8:	str	r3, [fp, #-28]	; 0xffffffe4
   121ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121f0:	cmp	r3, #0
   121f4:	beq	12354 <__assert_fail@plt+0x1408>
   121f8:	ldr	r4, [fp, #-24]	; 0xffffffe8
   121fc:	add	r3, r4, #1
   12200:	str	r3, [fp, #-24]	; 0xffffffe8
   12204:	ldr	r3, [fp, #-20]	; 0xffffffec
   12208:	cmp	r3, #0
   1220c:	beq	12280 <__assert_fail@plt+0x1334>
   12210:	ldr	r3, [fp, #-16]
   12214:	add	r3, r3, #1
   12218:	ldrb	r3, [r3]
   1221c:	mov	r0, r3
   12220:	bl	11f20 <__assert_fail@plt+0xfd4>
   12224:	mov	r3, r0
   12228:	lsl	r5, r3, #2
   1222c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12230:	sub	r3, r3, #1
   12234:	str	r3, [fp, #-20]	; 0xffffffec
   12238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1223c:	cmp	r3, #0
   12240:	beq	12268 <__assert_fail@plt+0x131c>
   12244:	ldr	r3, [fp, #-16]
   12248:	add	r3, r3, #2
   1224c:	ldrb	r3, [r3]
   12250:	mov	r0, r3
   12254:	bl	11f20 <__assert_fail@plt+0xfd4>
   12258:	mov	r3, r0
   1225c:	lsr	r3, r3, #6
   12260:	uxtb	r3, r3
   12264:	b	1226c <__assert_fail@plt+0x1320>
   12268:	mov	r3, #0
   1226c:	add	r3, r5, r3
   12270:	and	r3, r3, #63	; 0x3f
   12274:	ldr	r2, [pc, #268]	; 12388 <__assert_fail@plt+0x143c>
   12278:	ldrb	r3, [r2, r3]
   1227c:	b	12284 <__assert_fail@plt+0x1338>
   12280:	mov	r3, #61	; 0x3d
   12284:	strb	r3, [r4]
   12288:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1228c:	sub	r3, r3, #1
   12290:	str	r3, [fp, #-28]	; 0xffffffe4
   12294:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12298:	cmp	r3, #0
   1229c:	beq	1235c <__assert_fail@plt+0x1410>
   122a0:	ldr	r4, [fp, #-24]	; 0xffffffe8
   122a4:	add	r3, r4, #1
   122a8:	str	r3, [fp, #-24]	; 0xffffffe8
   122ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   122b0:	cmp	r3, #0
   122b4:	beq	122e0 <__assert_fail@plt+0x1394>
   122b8:	ldr	r3, [fp, #-16]
   122bc:	add	r3, r3, #2
   122c0:	ldrb	r3, [r3]
   122c4:	mov	r0, r3
   122c8:	bl	11f20 <__assert_fail@plt+0xfd4>
   122cc:	mov	r3, r0
   122d0:	and	r3, r3, #63	; 0x3f
   122d4:	ldr	r2, [pc, #172]	; 12388 <__assert_fail@plt+0x143c>
   122d8:	ldrb	r3, [r2, r3]
   122dc:	b	122e4 <__assert_fail@plt+0x1398>
   122e0:	mov	r3, #61	; 0x3d
   122e4:	strb	r3, [r4]
   122e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122ec:	sub	r3, r3, #1
   122f0:	str	r3, [fp, #-28]	; 0xffffffe4
   122f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122f8:	cmp	r3, #0
   122fc:	beq	12364 <__assert_fail@plt+0x1418>
   12300:	ldr	r3, [fp, #-20]	; 0xffffffec
   12304:	cmp	r3, #0
   12308:	beq	12318 <__assert_fail@plt+0x13cc>
   1230c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12310:	sub	r3, r3, #1
   12314:	str	r3, [fp, #-20]	; 0xffffffec
   12318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1231c:	cmp	r3, #0
   12320:	beq	12330 <__assert_fail@plt+0x13e4>
   12324:	ldr	r3, [fp, #-16]
   12328:	add	r3, r3, #3
   1232c:	str	r3, [fp, #-16]
   12330:	ldr	r3, [fp, #-20]	; 0xffffffec
   12334:	cmp	r3, #0
   12338:	beq	12368 <__assert_fail@plt+0x141c>
   1233c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12340:	cmp	r3, #0
   12344:	bne	12118 <__assert_fail@plt+0x11cc>
   12348:	b	12368 <__assert_fail@plt+0x141c>
   1234c:	nop			; (mov r0, r0)
   12350:	b	12368 <__assert_fail@plt+0x141c>
   12354:	nop			; (mov r0, r0)
   12358:	b	12368 <__assert_fail@plt+0x141c>
   1235c:	nop			; (mov r0, r0)
   12360:	b	12368 <__assert_fail@plt+0x141c>
   12364:	nop			; (mov r0, r0)
   12368:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1236c:	cmp	r3, #0
   12370:	beq	12380 <__assert_fail@plt+0x1434>
   12374:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12378:	mov	r2, #0
   1237c:	strb	r2, [r3]
   12380:	sub	sp, fp, #12
   12384:	pop	{r4, r5, fp, pc}
   12388:	muleq	r1, r4, r2
   1238c:	push	{fp, lr}
   12390:	add	fp, sp, #4
   12394:	sub	sp, sp, #24
   12398:	str	r0, [fp, #-16]
   1239c:	str	r1, [fp, #-20]	; 0xffffffec
   123a0:	str	r2, [fp, #-24]	; 0xffffffe8
   123a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   123a8:	ldr	r2, [pc, #336]	; 12500 <__assert_fail@plt+0x15b4>
   123ac:	smull	r1, r2, r2, r3
   123b0:	asr	r3, r3, #31
   123b4:	sub	r0, r2, r3
   123b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   123bc:	ldr	r3, [pc, #316]	; 12500 <__assert_fail@plt+0x15b4>
   123c0:	smull	r3, r2, r3, r1
   123c4:	asr	r3, r1, #31
   123c8:	sub	r2, r2, r3
   123cc:	mov	r3, r2
   123d0:	lsl	r3, r3, #1
   123d4:	add	r3, r3, r2
   123d8:	sub	r2, r1, r3
   123dc:	cmp	r2, #0
   123e0:	movne	r3, #1
   123e4:	moveq	r3, #0
   123e8:	uxtb	r3, r3
   123ec:	add	r3, r0, r3
   123f0:	str	r3, [fp, #-8]
   123f4:	ldr	r3, [fp, #-8]
   123f8:	cmp	r3, #0
   123fc:	bge	1243c <__assert_fail@plt+0x14f0>
   12400:	ldr	r3, [fp, #-8]
   12404:	cmn	r3, #1
   12408:	beq	1242c <__assert_fail@plt+0x14e0>
   1240c:	ldr	r1, [fp, #-8]
   12410:	mov	r0, #-2147483648	; 0x80000000
   12414:	bl	18744 <__assert_fail@plt+0x77f8>
   12418:	mov	r3, r0
   1241c:	cmp	r3, #3
   12420:	bgt	1242c <__assert_fail@plt+0x14e0>
   12424:	mov	r3, #1
   12428:	b	12430 <__assert_fail@plt+0x14e4>
   1242c:	mov	r3, #0
   12430:	and	r3, r3, #1
   12434:	uxtb	r3, r3
   12438:	b	12450 <__assert_fail@plt+0x1504>
   1243c:	ldr	r3, [fp, #-8]
   12440:	cmn	r3, #-536870911	; 0xe0000001
   12444:	movgt	r3, #1
   12448:	movle	r3, #0
   1244c:	uxtb	r3, r3
   12450:	cmp	r3, #0
   12454:	beq	12468 <__assert_fail@plt+0x151c>
   12458:	ldr	r3, [fp, #-8]
   1245c:	lsl	r3, r3, #2
   12460:	str	r3, [fp, #-12]
   12464:	b	12480 <__assert_fail@plt+0x1534>
   12468:	ldr	r3, [fp, #-8]
   1246c:	lsl	r3, r3, #2
   12470:	str	r3, [fp, #-12]
   12474:	ldr	r3, [fp, #-20]	; 0xffffffec
   12478:	cmp	r3, #0
   1247c:	bge	12494 <__assert_fail@plt+0x1548>
   12480:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12484:	mov	r2, #0
   12488:	str	r2, [r3]
   1248c:	mov	r3, #0
   12490:	b	124f4 <__assert_fail@plt+0x15a8>
   12494:	ldr	r3, [fp, #-12]
   12498:	add	r3, r3, #1
   1249c:	str	r3, [fp, #-12]
   124a0:	ldr	r3, [fp, #-12]
   124a4:	mov	r0, r3
   124a8:	bl	13374 <__assert_fail@plt+0x2428>
   124ac:	mov	r3, r0
   124b0:	mov	r2, r3
   124b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124b8:	str	r2, [r3]
   124bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124c0:	ldr	r3, [r3]
   124c4:	cmp	r3, #0
   124c8:	bne	124d4 <__assert_fail@plt+0x1588>
   124cc:	ldr	r3, [fp, #-12]
   124d0:	b	124f4 <__assert_fail@plt+0x15a8>
   124d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124d8:	ldr	r2, [r3]
   124dc:	ldr	r3, [fp, #-12]
   124e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   124e4:	ldr	r0, [fp, #-16]
   124e8:	bl	120b8 <__assert_fail@plt+0x116c>
   124ec:	ldr	r3, [fp, #-12]
   124f0:	sub	r3, r3, #1
   124f4:	mov	r0, r3
   124f8:	sub	sp, fp, #4
   124fc:	pop	{fp, pc}
   12500:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   12504:	push	{fp, lr}
   12508:	add	fp, sp, #4
   1250c:	sub	sp, sp, #8
   12510:	mov	r3, r0
   12514:	strb	r3, [fp, #-5]
   12518:	ldrb	r3, [fp, #-5]
   1251c:	mov	r0, r3
   12520:	bl	11f20 <__assert_fail@plt+0xfd4>
   12524:	mov	r3, r0
   12528:	mov	r2, r3
   1252c:	ldr	r3, [pc, #28]	; 12550 <__assert_fail@plt+0x1604>
   12530:	ldrsb	r3, [r3, r2]
   12534:	mvn	r3, r3
   12538:	uxtb	r3, r3
   1253c:	lsr	r3, r3, #7
   12540:	uxtb	r3, r3
   12544:	mov	r0, r3
   12548:	sub	sp, fp, #4
   1254c:	pop	{fp, pc}
   12550:	ldrdeq	r9, [r1], -r4
   12554:	push	{fp}		; (str fp, [sp, #-4]!)
   12558:	add	fp, sp, #0
   1255c:	sub	sp, sp, #12
   12560:	str	r0, [fp, #-8]
   12564:	ldr	r3, [fp, #-8]
   12568:	mov	r2, #0
   1256c:	str	r2, [r3]
   12570:	nop			; (mov r0, r0)
   12574:	add	sp, fp, #0
   12578:	pop	{fp}		; (ldr fp, [sp], #4)
   1257c:	bx	lr
   12580:	push	{fp, lr}
   12584:	add	fp, sp, #4
   12588:	sub	sp, sp, #32
   1258c:	str	r0, [fp, #-24]	; 0xffffffe8
   12590:	str	r1, [fp, #-28]	; 0xffffffe4
   12594:	str	r2, [fp, #-32]	; 0xffffffe0
   12598:	str	r3, [fp, #-36]	; 0xffffffdc
   1259c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125a0:	ldr	r3, [r3]
   125a4:	cmp	r3, #4
   125a8:	bne	125b8 <__assert_fail@plt+0x166c>
   125ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125b0:	mov	r2, #0
   125b4:	str	r2, [r3]
   125b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125bc:	ldr	r3, [r3]
   125c0:	cmp	r3, #0
   125c4:	bne	12630 <__assert_fail@plt+0x16e4>
   125c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   125cc:	ldr	r3, [r3]
   125d0:	str	r3, [fp, #-12]
   125d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   125d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   125dc:	ldr	r2, [r2]
   125e0:	sub	r3, r3, r2
   125e4:	cmp	r3, #3
   125e8:	ble	12630 <__assert_fail@plt+0x16e4>
   125ec:	mov	r2, #4
   125f0:	mov	r1, #10
   125f4:	ldr	r0, [fp, #-12]
   125f8:	bl	10eb0 <memchr@plt>
   125fc:	mov	r3, r0
   12600:	cmp	r3, #0
   12604:	bne	12630 <__assert_fail@plt+0x16e4>
   12608:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1260c:	ldr	r3, [r3]
   12610:	add	r2, r3, #4
   12614:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12618:	str	r2, [r3]
   1261c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12620:	mov	r2, #4
   12624:	str	r2, [r3]
   12628:	ldr	r3, [fp, #-12]
   1262c:	b	126d0 <__assert_fail@plt+0x1784>
   12630:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12634:	ldr	r3, [r3]
   12638:	str	r3, [fp, #-8]
   1263c:	b	12694 <__assert_fail@plt+0x1748>
   12640:	ldr	r3, [fp, #-8]
   12644:	add	r2, r3, #1
   12648:	str	r2, [fp, #-8]
   1264c:	ldrb	r3, [r3]
   12650:	strb	r3, [fp, #-13]
   12654:	ldrb	r3, [fp, #-13]
   12658:	cmp	r3, #10
   1265c:	beq	12694 <__assert_fail@plt+0x1748>
   12660:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12664:	ldr	r3, [r3]
   12668:	add	r1, r3, #1
   1266c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12670:	str	r1, [r2]
   12674:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12678:	add	r3, r2, r3
   1267c:	ldrb	r2, [fp, #-13]
   12680:	strb	r2, [r3, #4]
   12684:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12688:	ldr	r3, [r3]
   1268c:	cmp	r3, #4
   12690:	beq	126a8 <__assert_fail@plt+0x175c>
   12694:	ldr	r2, [fp, #-8]
   12698:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1269c:	cmp	r2, r3
   126a0:	bcc	12640 <__assert_fail@plt+0x16f4>
   126a4:	b	126ac <__assert_fail@plt+0x1760>
   126a8:	nop			; (mov r0, r0)
   126ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126b0:	ldr	r2, [fp, #-8]
   126b4:	str	r2, [r3]
   126b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126bc:	ldr	r2, [r3]
   126c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   126c4:	str	r2, [r3]
   126c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126cc:	add	r3, r3, #4
   126d0:	mov	r0, r3
   126d4:	sub	sp, fp, #4
   126d8:	pop	{fp, pc}
   126dc:	push	{r4, r5, fp, lr}
   126e0:	add	fp, sp, #12
   126e4:	sub	sp, sp, #24
   126e8:	str	r0, [fp, #-24]	; 0xffffffe8
   126ec:	str	r1, [fp, #-28]	; 0xffffffe4
   126f0:	str	r2, [fp, #-32]	; 0xffffffe0
   126f4:	str	r3, [fp, #-36]	; 0xffffffdc
   126f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   126fc:	ldr	r3, [r3]
   12700:	str	r3, [fp, #-16]
   12704:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12708:	cmp	r3, #1
   1270c:	bgt	12718 <__assert_fail@plt+0x17cc>
   12710:	mov	r3, #0
   12714:	b	12a90 <__assert_fail@plt+0x1b44>
   12718:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1271c:	ldrb	r3, [r3]
   12720:	mov	r0, r3
   12724:	bl	12504 <__assert_fail@plt+0x15b8>
   12728:	mov	r3, r0
   1272c:	eor	r3, r3, #1
   12730:	uxtb	r3, r3
   12734:	cmp	r3, #0
   12738:	bne	12764 <__assert_fail@plt+0x1818>
   1273c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12740:	add	r3, r3, #1
   12744:	ldrb	r3, [r3]
   12748:	mov	r0, r3
   1274c:	bl	12504 <__assert_fail@plt+0x15b8>
   12750:	mov	r3, r0
   12754:	eor	r3, r3, #1
   12758:	uxtb	r3, r3
   1275c:	cmp	r3, #0
   12760:	beq	1276c <__assert_fail@plt+0x1820>
   12764:	mov	r3, #0
   12768:	b	12a90 <__assert_fail@plt+0x1b44>
   1276c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12770:	ldr	r3, [r3]
   12774:	cmp	r3, #0
   12778:	beq	12800 <__assert_fail@plt+0x18b4>
   1277c:	ldr	r4, [fp, #-16]
   12780:	add	r3, r4, #1
   12784:	str	r3, [fp, #-16]
   12788:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1278c:	ldrb	r3, [r3]
   12790:	mov	r0, r3
   12794:	bl	11f20 <__assert_fail@plt+0xfd4>
   12798:	mov	r3, r0
   1279c:	mov	r2, r3
   127a0:	ldr	r3, [pc, #756]	; 12a9c <__assert_fail@plt+0x1b50>
   127a4:	ldrsb	r3, [r3, r2]
   127a8:	lsl	r3, r3, #2
   127ac:	sxtb	r5, r3
   127b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127b4:	add	r3, r3, #1
   127b8:	ldrb	r3, [r3]
   127bc:	mov	r0, r3
   127c0:	bl	11f20 <__assert_fail@plt+0xfd4>
   127c4:	mov	r3, r0
   127c8:	mov	r2, r3
   127cc:	ldr	r3, [pc, #712]	; 12a9c <__assert_fail@plt+0x1b50>
   127d0:	ldrsb	r3, [r3, r2]
   127d4:	asr	r3, r3, #4
   127d8:	sxtb	r3, r3
   127dc:	orr	r3, r5, r3
   127e0:	sxtb	r3, r3
   127e4:	uxtb	r3, r3
   127e8:	strb	r3, [r4]
   127ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   127f0:	ldr	r3, [r3]
   127f4:	sub	r2, r3, #1
   127f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   127fc:	str	r2, [r3]
   12800:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12804:	cmp	r3, #2
   12808:	bne	12820 <__assert_fail@plt+0x18d4>
   1280c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12810:	ldr	r2, [fp, #-16]
   12814:	str	r2, [r3]
   12818:	mov	r3, #0
   1281c:	b	12a90 <__assert_fail@plt+0x1b44>
   12820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12824:	add	r3, r3, #2
   12828:	ldrb	r3, [r3]
   1282c:	cmp	r3, #61	; 0x3d
   12830:	bne	1287c <__assert_fail@plt+0x1930>
   12834:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12838:	cmp	r3, #4
   1283c:	beq	12854 <__assert_fail@plt+0x1908>
   12840:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12844:	ldr	r2, [fp, #-16]
   12848:	str	r2, [r3]
   1284c:	mov	r3, #0
   12850:	b	12a90 <__assert_fail@plt+0x1b44>
   12854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12858:	add	r3, r3, #3
   1285c:	ldrb	r3, [r3]
   12860:	cmp	r3, #61	; 0x3d
   12864:	beq	12a80 <__assert_fail@plt+0x1b34>
   12868:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1286c:	ldr	r2, [fp, #-16]
   12870:	str	r2, [r3]
   12874:	mov	r3, #0
   12878:	b	12a90 <__assert_fail@plt+0x1b44>
   1287c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12880:	add	r3, r3, #2
   12884:	ldrb	r3, [r3]
   12888:	mov	r0, r3
   1288c:	bl	12504 <__assert_fail@plt+0x15b8>
   12890:	mov	r3, r0
   12894:	eor	r3, r3, #1
   12898:	uxtb	r3, r3
   1289c:	cmp	r3, #0
   128a0:	beq	128b8 <__assert_fail@plt+0x196c>
   128a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   128a8:	ldr	r2, [fp, #-16]
   128ac:	str	r2, [r3]
   128b0:	mov	r3, #0
   128b4:	b	12a90 <__assert_fail@plt+0x1b44>
   128b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   128bc:	ldr	r3, [r3]
   128c0:	cmp	r3, #0
   128c4:	beq	12958 <__assert_fail@plt+0x1a0c>
   128c8:	ldr	r4, [fp, #-16]
   128cc:	add	r3, r4, #1
   128d0:	str	r3, [fp, #-16]
   128d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128d8:	add	r3, r3, #1
   128dc:	ldrb	r3, [r3]
   128e0:	mov	r0, r3
   128e4:	bl	11f20 <__assert_fail@plt+0xfd4>
   128e8:	mov	r3, r0
   128ec:	mov	r2, r3
   128f0:	ldr	r3, [pc, #420]	; 12a9c <__assert_fail@plt+0x1b50>
   128f4:	ldrsb	r3, [r3, r2]
   128f8:	lsl	r3, r3, #4
   128fc:	sxtb	r3, r3
   12900:	bic	r3, r3, #15
   12904:	sxtb	r5, r3
   12908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1290c:	add	r3, r3, #2
   12910:	ldrb	r3, [r3]
   12914:	mov	r0, r3
   12918:	bl	11f20 <__assert_fail@plt+0xfd4>
   1291c:	mov	r3, r0
   12920:	mov	r2, r3
   12924:	ldr	r3, [pc, #368]	; 12a9c <__assert_fail@plt+0x1b50>
   12928:	ldrsb	r3, [r3, r2]
   1292c:	asr	r3, r3, #2
   12930:	sxtb	r3, r3
   12934:	orr	r3, r5, r3
   12938:	sxtb	r3, r3
   1293c:	uxtb	r3, r3
   12940:	strb	r3, [r4]
   12944:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12948:	ldr	r3, [r3]
   1294c:	sub	r2, r3, #1
   12950:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12954:	str	r2, [r3]
   12958:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1295c:	cmp	r3, #3
   12960:	bne	12978 <__assert_fail@plt+0x1a2c>
   12964:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12968:	ldr	r2, [fp, #-16]
   1296c:	str	r2, [r3]
   12970:	mov	r3, #0
   12974:	b	12a90 <__assert_fail@plt+0x1b44>
   12978:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1297c:	add	r3, r3, #3
   12980:	ldrb	r3, [r3]
   12984:	cmp	r3, #61	; 0x3d
   12988:	bne	129ac <__assert_fail@plt+0x1a60>
   1298c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12990:	cmp	r3, #4
   12994:	beq	12a80 <__assert_fail@plt+0x1b34>
   12998:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1299c:	ldr	r2, [fp, #-16]
   129a0:	str	r2, [r3]
   129a4:	mov	r3, #0
   129a8:	b	12a90 <__assert_fail@plt+0x1b44>
   129ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129b0:	add	r3, r3, #3
   129b4:	ldrb	r3, [r3]
   129b8:	mov	r0, r3
   129bc:	bl	12504 <__assert_fail@plt+0x15b8>
   129c0:	mov	r3, r0
   129c4:	eor	r3, r3, #1
   129c8:	uxtb	r3, r3
   129cc:	cmp	r3, #0
   129d0:	beq	129e8 <__assert_fail@plt+0x1a9c>
   129d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   129d8:	ldr	r2, [fp, #-16]
   129dc:	str	r2, [r3]
   129e0:	mov	r3, #0
   129e4:	b	12a90 <__assert_fail@plt+0x1b44>
   129e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   129ec:	ldr	r3, [r3]
   129f0:	cmp	r3, #0
   129f4:	beq	12a80 <__assert_fail@plt+0x1b34>
   129f8:	ldr	r4, [fp, #-16]
   129fc:	add	r3, r4, #1
   12a00:	str	r3, [fp, #-16]
   12a04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a08:	add	r3, r3, #2
   12a0c:	ldrb	r3, [r3]
   12a10:	mov	r0, r3
   12a14:	bl	11f20 <__assert_fail@plt+0xfd4>
   12a18:	mov	r3, r0
   12a1c:	mov	r2, r3
   12a20:	ldr	r3, [pc, #116]	; 12a9c <__assert_fail@plt+0x1b50>
   12a24:	ldrsb	r3, [r3, r2]
   12a28:	lsl	r3, r3, #6
   12a2c:	sxtb	r3, r3
   12a30:	bic	r3, r3, #63	; 0x3f
   12a34:	sxtb	r5, r3
   12a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a3c:	add	r3, r3, #3
   12a40:	ldrb	r3, [r3]
   12a44:	mov	r0, r3
   12a48:	bl	11f20 <__assert_fail@plt+0xfd4>
   12a4c:	mov	r3, r0
   12a50:	mov	r2, r3
   12a54:	ldr	r3, [pc, #64]	; 12a9c <__assert_fail@plt+0x1b50>
   12a58:	ldrsb	r3, [r3, r2]
   12a5c:	orr	r3, r5, r3
   12a60:	sxtb	r3, r3
   12a64:	uxtb	r3, r3
   12a68:	strb	r3, [r4]
   12a6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a70:	ldr	r3, [r3]
   12a74:	sub	r2, r3, #1
   12a78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a7c:	str	r2, [r3]
   12a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a84:	ldr	r2, [fp, #-16]
   12a88:	str	r2, [r3]
   12a8c:	mov	r3, #1
   12a90:	mov	r0, r3
   12a94:	sub	sp, fp, #12
   12a98:	pop	{r4, r5, fp, pc}
   12a9c:	ldrdeq	r9, [r1], -r4
   12aa0:	push	{fp, lr}
   12aa4:	add	fp, sp, #4
   12aa8:	sub	sp, sp, #48	; 0x30
   12aac:	str	r0, [fp, #-40]	; 0xffffffd8
   12ab0:	str	r1, [fp, #-44]	; 0xffffffd4
   12ab4:	str	r2, [fp, #-48]	; 0xffffffd0
   12ab8:	str	r3, [fp, #-52]	; 0xffffffcc
   12abc:	ldr	r3, [fp, #4]
   12ac0:	ldr	r3, [r3]
   12ac4:	str	r3, [fp, #-32]	; 0xffffffe0
   12ac8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12acc:	cmp	r3, #0
   12ad0:	movne	r3, #1
   12ad4:	moveq	r3, #0
   12ad8:	strb	r3, [fp, #-21]	; 0xffffffeb
   12adc:	mov	r3, #0
   12ae0:	strb	r3, [fp, #-5]
   12ae4:	mov	r3, #0
   12ae8:	str	r3, [fp, #-12]
   12aec:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12af0:	cmp	r3, #0
   12af4:	beq	12b18 <__assert_fail@plt+0x1bcc>
   12af8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12afc:	ldr	r3, [r3]
   12b00:	str	r3, [fp, #-12]
   12b04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b08:	cmp	r3, #0
   12b0c:	moveq	r3, #1
   12b10:	movne	r3, #0
   12b14:	strb	r3, [fp, #-5]
   12b18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b1c:	str	r3, [fp, #-16]
   12b20:	ldr	r3, [fp, #-12]
   12b24:	cmp	r3, #0
   12b28:	bne	12b90 <__assert_fail@plt+0x1c44>
   12b2c:	ldrb	r3, [fp, #-5]
   12b30:	eor	r3, r3, #1
   12b34:	uxtb	r3, r3
   12b38:	cmp	r3, #0
   12b3c:	beq	12b90 <__assert_fail@plt+0x1c44>
   12b40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b44:	str	r3, [fp, #-16]
   12b48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12b4c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b50:	sub	r3, fp, #32
   12b54:	sub	r2, fp, #52	; 0x34
   12b58:	bl	126dc <__assert_fail@plt+0x1790>
   12b5c:	mov	r3, r0
   12b60:	eor	r3, r3, #1
   12b64:	uxtb	r3, r3
   12b68:	cmp	r3, #0
   12b6c:	bne	12b8c <__assert_fail@plt+0x1c40>
   12b70:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12b74:	add	r3, r3, #4
   12b78:	str	r3, [fp, #-44]	; 0xffffffd4
   12b7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b80:	sub	r3, r3, #4
   12b84:	str	r3, [fp, #-48]	; 0xffffffd0
   12b88:	b	12b40 <__assert_fail@plt+0x1bf4>
   12b8c:	nop			; (mov r0, r0)
   12b90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b94:	cmp	r3, #0
   12b98:	bne	12bb0 <__assert_fail@plt+0x1c64>
   12b9c:	ldrb	r3, [fp, #-5]
   12ba0:	eor	r3, r3, #1
   12ba4:	uxtb	r3, r3
   12ba8:	cmp	r3, #0
   12bac:	bne	12cd8 <__assert_fail@plt+0x1d8c>
   12bb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12bb4:	cmp	r3, #0
   12bb8:	beq	12bf4 <__assert_fail@plt+0x1ca8>
   12bbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12bc0:	ldrb	r3, [r3]
   12bc4:	cmp	r3, #10
   12bc8:	bne	12bf4 <__assert_fail@plt+0x1ca8>
   12bcc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12bd0:	cmp	r3, #0
   12bd4:	beq	12bf4 <__assert_fail@plt+0x1ca8>
   12bd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12bdc:	add	r3, r3, #1
   12be0:	str	r3, [fp, #-44]	; 0xffffffd4
   12be4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12be8:	sub	r3, r3, #1
   12bec:	str	r3, [fp, #-48]	; 0xffffffd0
   12bf0:	b	12cd4 <__assert_fail@plt+0x1d88>
   12bf4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12bf8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12bfc:	ldr	r1, [fp, #-16]
   12c00:	sub	r3, r1, r3
   12c04:	rsb	r3, r3, #0
   12c08:	add	r3, r2, r3
   12c0c:	str	r3, [fp, #-52]	; 0xffffffcc
   12c10:	ldr	r3, [fp, #-16]
   12c14:	str	r3, [fp, #-32]	; 0xffffffe0
   12c18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12c1c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12c20:	add	r3, r3, r2
   12c24:	str	r3, [fp, #-28]	; 0xffffffe4
   12c28:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12c2c:	cmp	r3, #0
   12c30:	beq	12c50 <__assert_fail@plt+0x1d04>
   12c34:	sub	r3, fp, #48	; 0x30
   12c38:	sub	r1, fp, #44	; 0x2c
   12c3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12c40:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12c44:	bl	12580 <__assert_fail@plt+0x1634>
   12c48:	str	r0, [fp, #-20]	; 0xffffffec
   12c4c:	b	12c58 <__assert_fail@plt+0x1d0c>
   12c50:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12c54:	str	r3, [fp, #-20]	; 0xffffffec
   12c58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c5c:	cmp	r3, #0
   12c60:	beq	12c90 <__assert_fail@plt+0x1d44>
   12c64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c68:	cmp	r3, #3
   12c6c:	bgt	12c9c <__assert_fail@plt+0x1d50>
   12c70:	ldrb	r3, [fp, #-5]
   12c74:	eor	r3, r3, #1
   12c78:	uxtb	r3, r3
   12c7c:	cmp	r3, #0
   12c80:	beq	12c9c <__assert_fail@plt+0x1d50>
   12c84:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12c88:	cmp	r3, #0
   12c8c:	beq	12c9c <__assert_fail@plt+0x1d50>
   12c90:	mov	r3, #0
   12c94:	str	r3, [fp, #-48]	; 0xffffffd0
   12c98:	b	12ce4 <__assert_fail@plt+0x1d98>
   12c9c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12ca0:	sub	r3, fp, #32
   12ca4:	sub	r2, fp, #52	; 0x34
   12ca8:	ldr	r0, [fp, #-20]	; 0xffffffec
   12cac:	bl	126dc <__assert_fail@plt+0x1790>
   12cb0:	mov	r3, r0
   12cb4:	eor	r3, r3, #1
   12cb8:	uxtb	r3, r3
   12cbc:	cmp	r3, #0
   12cc0:	bne	12ce0 <__assert_fail@plt+0x1d94>
   12cc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12cc8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12ccc:	sub	r3, r3, r2
   12cd0:	str	r3, [fp, #-48]	; 0xffffffd0
   12cd4:	b	12b18 <__assert_fail@plt+0x1bcc>
   12cd8:	nop			; (mov r0, r0)
   12cdc:	b	12ce4 <__assert_fail@plt+0x1d98>
   12ce0:	nop			; (mov r0, r0)
   12ce4:	ldr	r3, [fp, #4]
   12ce8:	ldr	r2, [r3]
   12cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12cf0:	sub	r2, r2, r3
   12cf4:	ldr	r3, [fp, #4]
   12cf8:	str	r2, [r3]
   12cfc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d00:	cmp	r3, #0
   12d04:	moveq	r3, #1
   12d08:	movne	r3, #0
   12d0c:	uxtb	r3, r3
   12d10:	mov	r0, r3
   12d14:	sub	sp, fp, #4
   12d18:	pop	{fp, pc}
   12d1c:	push	{fp, lr}
   12d20:	add	fp, sp, #4
   12d24:	sub	sp, sp, #32
   12d28:	str	r0, [fp, #-16]
   12d2c:	str	r1, [fp, #-20]	; 0xffffffec
   12d30:	str	r2, [fp, #-24]	; 0xffffffe8
   12d34:	str	r3, [fp, #-28]	; 0xffffffe4
   12d38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d3c:	asr	r3, r3, #2
   12d40:	add	r2, r3, #1
   12d44:	mov	r3, r2
   12d48:	lsl	r3, r3, #1
   12d4c:	add	r3, r3, r2
   12d50:	str	r3, [fp, #-8]
   12d54:	ldr	r3, [fp, #-8]
   12d58:	mov	r0, r3
   12d5c:	bl	13374 <__assert_fail@plt+0x2428>
   12d60:	mov	r3, r0
   12d64:	mov	r2, r3
   12d68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d6c:	str	r2, [r3]
   12d70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d74:	ldr	r3, [r3]
   12d78:	cmp	r3, #0
   12d7c:	bne	12d88 <__assert_fail@plt+0x1e3c>
   12d80:	mov	r3, #1
   12d84:	b	12e00 <__assert_fail@plt+0x1eb4>
   12d88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d8c:	ldr	r2, [r3]
   12d90:	sub	r3, fp, #8
   12d94:	str	r3, [sp]
   12d98:	mov	r3, r2
   12d9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12da0:	ldr	r1, [fp, #-20]	; 0xffffffec
   12da4:	ldr	r0, [fp, #-16]
   12da8:	bl	12aa0 <__assert_fail@plt+0x1b54>
   12dac:	mov	r3, r0
   12db0:	eor	r3, r3, #1
   12db4:	uxtb	r3, r3
   12db8:	cmp	r3, #0
   12dbc:	beq	12de4 <__assert_fail@plt+0x1e98>
   12dc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12dc4:	ldr	r3, [r3]
   12dc8:	mov	r0, r3
   12dcc:	bl	131e0 <__assert_fail@plt+0x2294>
   12dd0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12dd4:	mov	r2, #0
   12dd8:	str	r2, [r3]
   12ddc:	mov	r3, #0
   12de0:	b	12e00 <__assert_fail@plt+0x1eb4>
   12de4:	ldr	r3, [fp, #4]
   12de8:	cmp	r3, #0
   12dec:	beq	12dfc <__assert_fail@plt+0x1eb0>
   12df0:	ldr	r2, [fp, #-8]
   12df4:	ldr	r3, [fp, #4]
   12df8:	str	r2, [r3]
   12dfc:	mov	r3, #1
   12e00:	mov	r0, r3
   12e04:	sub	sp, fp, #4
   12e08:	pop	{fp, pc}
   12e0c:	push	{fp}		; (str fp, [sp, #-4]!)
   12e10:	add	fp, sp, #0
   12e14:	sub	sp, sp, #12
   12e18:	str	r0, [fp, #-8]
   12e1c:	ldr	r2, [pc, #20]	; 12e38 <__assert_fail@plt+0x1eec>
   12e20:	ldr	r3, [fp, #-8]
   12e24:	str	r3, [r2]
   12e28:	nop			; (mov r0, r0)
   12e2c:	add	sp, fp, #0
   12e30:	pop	{fp}		; (ldr fp, [sp], #4)
   12e34:	bx	lr
   12e38:	andeq	sl, r2, r0, ror #2
   12e3c:	push	{fp}		; (str fp, [sp, #-4]!)
   12e40:	add	fp, sp, #0
   12e44:	sub	sp, sp, #12
   12e48:	mov	r3, r0
   12e4c:	strb	r3, [fp, #-5]
   12e50:	ldr	r2, [pc, #20]	; 12e6c <__assert_fail@plt+0x1f20>
   12e54:	ldrb	r3, [fp, #-5]
   12e58:	strb	r3, [r2]
   12e5c:	nop			; (mov r0, r0)
   12e60:	add	sp, fp, #0
   12e64:	pop	{fp}		; (ldr fp, [sp], #4)
   12e68:	bx	lr
   12e6c:	andeq	sl, r2, r4, ror #2
   12e70:	push	{r4, fp, lr}
   12e74:	add	fp, sp, #8
   12e78:	sub	sp, sp, #20
   12e7c:	ldr	r3, [pc, #256]	; 12f84 <__assert_fail@plt+0x2038>
   12e80:	ldr	r3, [r3]
   12e84:	mov	r0, r3
   12e88:	bl	17c60 <__assert_fail@plt+0x6d14>
   12e8c:	mov	r3, r0
   12e90:	cmp	r3, #0
   12e94:	beq	12f4c <__assert_fail@plt+0x2000>
   12e98:	ldr	r3, [pc, #232]	; 12f88 <__assert_fail@plt+0x203c>
   12e9c:	ldrb	r3, [r3]
   12ea0:	eor	r3, r3, #1
   12ea4:	uxtb	r3, r3
   12ea8:	cmp	r3, #0
   12eac:	bne	12ec4 <__assert_fail@plt+0x1f78>
   12eb0:	bl	10e80 <__errno_location@plt>
   12eb4:	mov	r3, r0
   12eb8:	ldr	r3, [r3]
   12ebc:	cmp	r3, #32
   12ec0:	beq	12f4c <__assert_fail@plt+0x2000>
   12ec4:	ldr	r0, [pc, #192]	; 12f8c <__assert_fail@plt+0x2040>
   12ec8:	bl	10e50 <gettext@plt>
   12ecc:	str	r0, [fp, #-16]
   12ed0:	ldr	r3, [pc, #184]	; 12f90 <__assert_fail@plt+0x2044>
   12ed4:	ldr	r3, [r3]
   12ed8:	cmp	r3, #0
   12edc:	beq	12f20 <__assert_fail@plt+0x1fd4>
   12ee0:	bl	10e80 <__errno_location@plt>
   12ee4:	mov	r3, r0
   12ee8:	ldr	r4, [r3]
   12eec:	ldr	r3, [pc, #156]	; 12f90 <__assert_fail@plt+0x2044>
   12ef0:	ldr	r3, [r3]
   12ef4:	mov	r0, r3
   12ef8:	bl	158ec <__assert_fail@plt+0x49a0>
   12efc:	mov	r2, r0
   12f00:	ldr	r3, [fp, #-16]
   12f04:	str	r3, [sp]
   12f08:	mov	r3, r2
   12f0c:	ldr	r2, [pc, #128]	; 12f94 <__assert_fail@plt+0x2048>
   12f10:	mov	r1, r4
   12f14:	mov	r0, #0
   12f18:	bl	10df0 <error@plt>
   12f1c:	b	12f3c <__assert_fail@plt+0x1ff0>
   12f20:	bl	10e80 <__errno_location@plt>
   12f24:	mov	r3, r0
   12f28:	ldr	r1, [r3]
   12f2c:	ldr	r3, [fp, #-16]
   12f30:	ldr	r2, [pc, #96]	; 12f98 <__assert_fail@plt+0x204c>
   12f34:	mov	r0, #0
   12f38:	bl	10df0 <error@plt>
   12f3c:	ldr	r3, [pc, #88]	; 12f9c <__assert_fail@plt+0x2050>
   12f40:	ldr	r3, [r3]
   12f44:	mov	r0, r3
   12f48:	bl	10d3c <_exit@plt>
   12f4c:	ldr	r3, [pc, #76]	; 12fa0 <__assert_fail@plt+0x2054>
   12f50:	ldr	r3, [r3]
   12f54:	mov	r0, r3
   12f58:	bl	17c60 <__assert_fail@plt+0x6d14>
   12f5c:	mov	r3, r0
   12f60:	cmp	r3, #0
   12f64:	beq	12f78 <__assert_fail@plt+0x202c>
   12f68:	ldr	r3, [pc, #44]	; 12f9c <__assert_fail@plt+0x2050>
   12f6c:	ldr	r3, [r3]
   12f70:	mov	r0, r3
   12f74:	bl	10d3c <_exit@plt>
   12f78:	nop			; (mov r0, r0)
   12f7c:	sub	sp, fp, #8
   12f80:	pop	{r4, fp, pc}
   12f84:	andeq	sl, r2, r4, asr r1
   12f88:	andeq	sl, r2, r4, ror #2
   12f8c:	ldrdeq	r9, [r1], -r4
   12f90:	andeq	sl, r2, r0, ror #2
   12f94:	andeq	r9, r1, r0, ror #7
   12f98:	andeq	r9, r1, r8, ror #7
   12f9c:	strdeq	sl, [r2], -r4
   12fa0:	andeq	sl, r2, r8, asr #2
   12fa4:	push	{fp, lr}
   12fa8:	add	fp, sp, #4
   12fac:	sub	sp, sp, #40	; 0x28
   12fb0:	str	r0, [fp, #-16]
   12fb4:	strd	r2, [fp, #-28]	; 0xffffffe4
   12fb8:	ldr	r3, [fp, #12]
   12fbc:	str	r3, [sp, #8]
   12fc0:	ldrd	r2, [fp, #4]
   12fc4:	strd	r2, [sp]
   12fc8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12fcc:	ldr	r0, [fp, #-16]
   12fd0:	bl	10d00 <posix_fadvise64@plt>
   12fd4:	str	r0, [fp, #-8]
   12fd8:	nop			; (mov r0, r0)
   12fdc:	sub	sp, fp, #4
   12fe0:	pop	{fp, pc}
   12fe4:	push	{fp, lr}
   12fe8:	add	fp, sp, #4
   12fec:	sub	sp, sp, #24
   12ff0:	str	r0, [fp, #-8]
   12ff4:	str	r1, [fp, #-12]
   12ff8:	ldr	r3, [fp, #-8]
   12ffc:	cmp	r3, #0
   13000:	beq	13034 <__assert_fail@plt+0x20e8>
   13004:	ldr	r0, [fp, #-8]
   13008:	bl	10ea4 <fileno@plt>
   1300c:	mov	r1, r0
   13010:	ldr	r3, [fp, #-12]
   13014:	str	r3, [sp, #8]
   13018:	mov	r2, #0
   1301c:	mov	r3, #0
   13020:	strd	r2, [sp]
   13024:	mov	r2, #0
   13028:	mov	r3, #0
   1302c:	mov	r0, r1
   13030:	bl	12fa4 <__assert_fail@plt+0x2058>
   13034:	nop			; (mov r0, r0)
   13038:	sub	sp, fp, #4
   1303c:	pop	{fp, pc}
   13040:	push	{fp, lr}
   13044:	add	fp, sp, #4
   13048:	sub	sp, sp, #32
   1304c:	str	r0, [fp, #-24]	; 0xffffffe8
   13050:	mov	r3, #0
   13054:	str	r3, [fp, #-8]
   13058:	mov	r3, #0
   1305c:	str	r3, [fp, #-12]
   13060:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13064:	bl	10ea4 <fileno@plt>
   13068:	str	r0, [fp, #-16]
   1306c:	ldr	r3, [fp, #-16]
   13070:	cmp	r3, #0
   13074:	bge	13088 <__assert_fail@plt+0x213c>
   13078:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1307c:	bl	10ec8 <fclose@plt>
   13080:	mov	r3, r0
   13084:	b	1312c <__assert_fail@plt+0x21e0>
   13088:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1308c:	bl	10e14 <__freading@plt>
   13090:	mov	r3, r0
   13094:	cmp	r3, #0
   13098:	beq	130d4 <__assert_fail@plt+0x2188>
   1309c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   130a0:	bl	10ea4 <fileno@plt>
   130a4:	mov	r1, r0
   130a8:	mov	r3, #1
   130ac:	str	r3, [sp]
   130b0:	mov	r2, #0
   130b4:	mov	r3, #0
   130b8:	mov	r0, r1
   130bc:	bl	10db4 <lseek64@plt>
   130c0:	mvn	r2, #0
   130c4:	mvn	r3, #0
   130c8:	cmp	r1, r3
   130cc:	cmpeq	r0, r2
   130d0:	beq	130f8 <__assert_fail@plt+0x21ac>
   130d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   130d8:	bl	13180 <__assert_fail@plt+0x2234>
   130dc:	mov	r3, r0
   130e0:	cmp	r3, #0
   130e4:	beq	130f8 <__assert_fail@plt+0x21ac>
   130e8:	bl	10e80 <__errno_location@plt>
   130ec:	mov	r3, r0
   130f0:	ldr	r3, [r3]
   130f4:	str	r3, [fp, #-8]
   130f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   130fc:	bl	10ec8 <fclose@plt>
   13100:	str	r0, [fp, #-12]
   13104:	ldr	r3, [fp, #-8]
   13108:	cmp	r3, #0
   1310c:	beq	13128 <__assert_fail@plt+0x21dc>
   13110:	bl	10e80 <__errno_location@plt>
   13114:	mov	r2, r0
   13118:	ldr	r3, [fp, #-8]
   1311c:	str	r3, [r2]
   13120:	mvn	r3, #0
   13124:	str	r3, [fp, #-12]
   13128:	ldr	r3, [fp, #-12]
   1312c:	mov	r0, r3
   13130:	sub	sp, fp, #4
   13134:	pop	{fp, pc}
   13138:	push	{fp, lr}
   1313c:	add	fp, sp, #4
   13140:	sub	sp, sp, #16
   13144:	str	r0, [fp, #-8]
   13148:	ldr	r3, [fp, #-8]
   1314c:	ldr	r3, [r3]
   13150:	and	r3, r3, #256	; 0x100
   13154:	cmp	r3, #0
   13158:	beq	13174 <__assert_fail@plt+0x2228>
   1315c:	mov	r3, #1
   13160:	str	r3, [sp]
   13164:	mov	r2, #0
   13168:	mov	r3, #0
   1316c:	ldr	r0, [fp, #-8]
   13170:	bl	1326c <__assert_fail@plt+0x2320>
   13174:	nop			; (mov r0, r0)
   13178:	sub	sp, fp, #4
   1317c:	pop	{fp, pc}
   13180:	push	{fp, lr}
   13184:	add	fp, sp, #4
   13188:	sub	sp, sp, #8
   1318c:	str	r0, [fp, #-8]
   13190:	ldr	r3, [fp, #-8]
   13194:	cmp	r3, #0
   13198:	beq	131b0 <__assert_fail@plt+0x2264>
   1319c:	ldr	r0, [fp, #-8]
   131a0:	bl	10e14 <__freading@plt>
   131a4:	mov	r3, r0
   131a8:	cmp	r3, #0
   131ac:	bne	131c0 <__assert_fail@plt+0x2274>
   131b0:	ldr	r0, [fp, #-8]
   131b4:	bl	10d18 <fflush@plt>
   131b8:	mov	r3, r0
   131bc:	b	131d4 <__assert_fail@plt+0x2288>
   131c0:	ldr	r0, [fp, #-8]
   131c4:	bl	13138 <__assert_fail@plt+0x21ec>
   131c8:	ldr	r0, [fp, #-8]
   131cc:	bl	10d18 <fflush@plt>
   131d0:	mov	r3, r0
   131d4:	mov	r0, r3
   131d8:	sub	sp, fp, #4
   131dc:	pop	{fp, pc}
   131e0:	push	{r4, fp, lr}
   131e4:	add	fp, sp, #8
   131e8:	sub	sp, sp, #20
   131ec:	str	r0, [fp, #-24]	; 0xffffffe8
   131f0:	bl	10e80 <__errno_location@plt>
   131f4:	mov	r3, r0
   131f8:	ldr	r3, [r3]
   131fc:	str	r3, [fp, #-20]	; 0xffffffec
   13200:	bl	10e80 <__errno_location@plt>
   13204:	mov	r3, r0
   13208:	ldr	r3, [r3]
   1320c:	str	r3, [fp, #-16]
   13210:	bl	10e80 <__errno_location@plt>
   13214:	mov	r2, r0
   13218:	mov	r3, #0
   1321c:	str	r3, [r2]
   13220:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13224:	bl	10d30 <free@plt>
   13228:	bl	10e80 <__errno_location@plt>
   1322c:	mov	r4, r0
   13230:	bl	10e80 <__errno_location@plt>
   13234:	mov	r3, r0
   13238:	ldr	r3, [r3]
   1323c:	cmp	r3, #0
   13240:	moveq	r3, #1
   13244:	movne	r3, #0
   13248:	uxtb	r3, r3
   1324c:	lsl	r3, r3, #2
   13250:	sub	r2, fp, #12
   13254:	add	r3, r2, r3
   13258:	ldr	r3, [r3, #-8]
   1325c:	str	r3, [r4]
   13260:	nop			; (mov r0, r0)
   13264:	sub	sp, fp, #8
   13268:	pop	{r4, fp, pc}
   1326c:	push	{fp, lr}
   13270:	add	fp, sp, #4
   13274:	sub	sp, sp, #32
   13278:	str	r0, [fp, #-16]
   1327c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13280:	ldr	r3, [fp, #-16]
   13284:	ldr	r2, [r3, #8]
   13288:	ldr	r3, [fp, #-16]
   1328c:	ldr	r3, [r3, #4]
   13290:	cmp	r2, r3
   13294:	bne	1332c <__assert_fail@plt+0x23e0>
   13298:	ldr	r3, [fp, #-16]
   1329c:	ldr	r2, [r3, #20]
   132a0:	ldr	r3, [fp, #-16]
   132a4:	ldr	r3, [r3, #16]
   132a8:	cmp	r2, r3
   132ac:	bne	1332c <__assert_fail@plt+0x23e0>
   132b0:	ldr	r3, [fp, #-16]
   132b4:	ldr	r3, [r3, #36]	; 0x24
   132b8:	cmp	r3, #0
   132bc:	bne	1332c <__assert_fail@plt+0x23e0>
   132c0:	ldr	r0, [fp, #-16]
   132c4:	bl	10ea4 <fileno@plt>
   132c8:	mov	r1, r0
   132cc:	ldr	r3, [fp, #4]
   132d0:	str	r3, [sp]
   132d4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   132d8:	mov	r0, r1
   132dc:	bl	10db4 <lseek64@plt>
   132e0:	strd	r0, [fp, #-12]
   132e4:	ldrd	r2, [fp, #-12]
   132e8:	mvn	r0, #0
   132ec:	mvn	r1, #0
   132f0:	cmp	r3, r1
   132f4:	cmpeq	r2, r0
   132f8:	bne	13304 <__assert_fail@plt+0x23b8>
   132fc:	mvn	r3, #0
   13300:	b	13344 <__assert_fail@plt+0x23f8>
   13304:	ldr	r3, [fp, #-16]
   13308:	ldr	r3, [r3]
   1330c:	bic	r2, r3, #16
   13310:	ldr	r3, [fp, #-16]
   13314:	str	r2, [r3]
   13318:	ldr	r1, [fp, #-16]
   1331c:	ldrd	r2, [fp, #-12]
   13320:	strd	r2, [r1, #80]	; 0x50
   13324:	mov	r3, #0
   13328:	b	13344 <__assert_fail@plt+0x23f8>
   1332c:	ldr	r3, [fp, #4]
   13330:	str	r3, [sp]
   13334:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13338:	ldr	r0, [fp, #-16]
   1333c:	bl	10ed4 <fseeko64@plt>
   13340:	mov	r3, r0
   13344:	mov	r0, r3
   13348:	sub	sp, fp, #4
   1334c:	pop	{fp, pc}
   13350:	push	{fp, lr}
   13354:	add	fp, sp, #4
   13358:	bl	10e80 <__errno_location@plt>
   1335c:	mov	r2, r0
   13360:	mov	r3, #12
   13364:	str	r3, [r2]
   13368:	mov	r3, #0
   1336c:	mov	r0, r3
   13370:	pop	{fp, pc}
   13374:	push	{fp, lr}
   13378:	add	fp, sp, #4
   1337c:	sub	sp, sp, #8
   13380:	str	r0, [fp, #-8]
   13384:	ldr	r3, [fp, #-8]
   13388:	mov	r0, r3
   1338c:	bl	179f8 <__assert_fail@plt+0x6aac>
   13390:	mov	r3, r0
   13394:	mov	r0, r3
   13398:	sub	sp, fp, #4
   1339c:	pop	{fp, pc}
   133a0:	push	{fp, lr}
   133a4:	add	fp, sp, #4
   133a8:	sub	sp, sp, #8
   133ac:	str	r0, [fp, #-8]
   133b0:	str	r1, [fp, #-12]
   133b4:	ldr	r3, [fp, #-12]
   133b8:	cmp	r3, #0
   133bc:	moveq	r3, #1
   133c0:	movne	r3, #0
   133c4:	uxtb	r3, r3
   133c8:	mov	r2, r3
   133cc:	ldr	r3, [fp, #-12]
   133d0:	orr	r3, r2, r3
   133d4:	mov	r1, r3
   133d8:	ldr	r0, [fp, #-8]
   133dc:	bl	17aa0 <__assert_fail@plt+0x6b54>
   133e0:	mov	r3, r0
   133e4:	mov	r0, r3
   133e8:	sub	sp, fp, #4
   133ec:	pop	{fp, pc}
   133f0:	push	{fp, lr}
   133f4:	add	fp, sp, #4
   133f8:	sub	sp, sp, #8
   133fc:	str	r0, [fp, #-8]
   13400:	str	r1, [fp, #-12]
   13404:	ldr	r3, [fp, #-8]
   13408:	ldr	r2, [fp, #-12]
   1340c:	mov	r1, r2
   13410:	mov	r0, r3
   13414:	bl	17934 <__assert_fail@plt+0x69e8>
   13418:	mov	r3, r0
   1341c:	mov	r0, r3
   13420:	sub	sp, fp, #4
   13424:	pop	{fp, pc}
   13428:	push	{fp, lr}
   1342c:	add	fp, sp, #4
   13430:	sub	sp, sp, #16
   13434:	str	r0, [fp, #-8]
   13438:	str	r1, [fp, #-12]
   1343c:	str	r2, [fp, #-16]
   13440:	ldr	r3, [fp, #-12]
   13444:	cmp	r3, #0
   13448:	beq	13458 <__assert_fail@plt+0x250c>
   1344c:	ldr	r3, [fp, #-16]
   13450:	cmp	r3, #0
   13454:	bne	13468 <__assert_fail@plt+0x251c>
   13458:	mov	r3, #1
   1345c:	str	r3, [fp, #-16]
   13460:	ldr	r3, [fp, #-16]
   13464:	str	r3, [fp, #-12]
   13468:	ldr	r3, [fp, #-12]
   1346c:	ldr	r2, [fp, #-16]
   13470:	mov	r1, r3
   13474:	ldr	r0, [fp, #-8]
   13478:	bl	15be8 <__assert_fail@plt+0x4c9c>
   1347c:	mov	r3, r0
   13480:	mov	r0, r3
   13484:	sub	sp, fp, #4
   13488:	pop	{fp, pc}
   1348c:	push	{fp, lr}
   13490:	add	fp, sp, #4
   13494:	sub	sp, sp, #16
   13498:	str	r0, [fp, #-16]
   1349c:	ldr	r3, [fp, #-16]
   134a0:	cmp	r3, #0
   134a4:	bne	134c4 <__assert_fail@plt+0x2578>
   134a8:	ldr	r3, [pc, #220]	; 1358c <__assert_fail@plt+0x2640>
   134ac:	ldr	r3, [r3]
   134b0:	mov	r2, #55	; 0x37
   134b4:	mov	r1, #1
   134b8:	ldr	r0, [pc, #208]	; 13590 <__assert_fail@plt+0x2644>
   134bc:	bl	10da8 <fwrite@plt>
   134c0:	bl	10f34 <abort@plt>
   134c4:	mov	r1, #47	; 0x2f
   134c8:	ldr	r0, [fp, #-16]
   134cc:	bl	10eec <strrchr@plt>
   134d0:	str	r0, [fp, #-8]
   134d4:	ldr	r3, [fp, #-8]
   134d8:	cmp	r3, #0
   134dc:	beq	134ec <__assert_fail@plt+0x25a0>
   134e0:	ldr	r3, [fp, #-8]
   134e4:	add	r3, r3, #1
   134e8:	b	134f0 <__assert_fail@plt+0x25a4>
   134ec:	ldr	r3, [fp, #-16]
   134f0:	str	r3, [fp, #-12]
   134f4:	ldr	r2, [fp, #-12]
   134f8:	ldr	r3, [fp, #-16]
   134fc:	sub	r3, r2, r3
   13500:	cmp	r3, #6
   13504:	ble	13568 <__assert_fail@plt+0x261c>
   13508:	ldr	r3, [fp, #-12]
   1350c:	sub	r3, r3, #7
   13510:	mov	r2, #7
   13514:	ldr	r1, [pc, #120]	; 13594 <__assert_fail@plt+0x2648>
   13518:	mov	r0, r3
   1351c:	bl	10f28 <strncmp@plt>
   13520:	mov	r3, r0
   13524:	cmp	r3, #0
   13528:	bne	13568 <__assert_fail@plt+0x261c>
   1352c:	ldr	r3, [fp, #-12]
   13530:	str	r3, [fp, #-16]
   13534:	mov	r2, #3
   13538:	ldr	r1, [pc, #88]	; 13598 <__assert_fail@plt+0x264c>
   1353c:	ldr	r0, [fp, #-12]
   13540:	bl	10f28 <strncmp@plt>
   13544:	mov	r3, r0
   13548:	cmp	r3, #0
   1354c:	bne	13568 <__assert_fail@plt+0x261c>
   13550:	ldr	r3, [fp, #-12]
   13554:	add	r3, r3, #3
   13558:	str	r3, [fp, #-16]
   1355c:	ldr	r2, [pc, #56]	; 1359c <__assert_fail@plt+0x2650>
   13560:	ldr	r3, [fp, #-16]
   13564:	str	r3, [r2]
   13568:	ldr	r2, [pc, #48]	; 135a0 <__assert_fail@plt+0x2654>
   1356c:	ldr	r3, [fp, #-16]
   13570:	str	r3, [r2]
   13574:	ldr	r2, [pc, #40]	; 135a4 <__assert_fail@plt+0x2658>
   13578:	ldr	r3, [fp, #-16]
   1357c:	str	r3, [r2]
   13580:	nop			; (mov r0, r0)
   13584:	sub	sp, fp, #4
   13588:	pop	{fp, pc}
   1358c:	andeq	sl, r2, r8, asr #2
   13590:	andeq	r9, r1, ip, ror #7
   13594:	andeq	r9, r1, r4, lsr #8
   13598:	andeq	r9, r1, ip, lsr #8
   1359c:	andeq	sl, r2, r8, lsr r1
   135a0:	andeq	sl, r2, r8, ror #2
   135a4:	andeq	sl, r2, ip, lsr r1
   135a8:	push	{fp, lr}
   135ac:	add	fp, sp, #4
   135b0:	sub	sp, sp, #16
   135b4:	str	r0, [fp, #-16]
   135b8:	bl	10e80 <__errno_location@plt>
   135bc:	mov	r3, r0
   135c0:	ldr	r3, [r3]
   135c4:	str	r3, [fp, #-8]
   135c8:	ldr	r3, [fp, #-16]
   135cc:	cmp	r3, #0
   135d0:	beq	135dc <__assert_fail@plt+0x2690>
   135d4:	ldr	r3, [fp, #-16]
   135d8:	b	135e0 <__assert_fail@plt+0x2694>
   135dc:	ldr	r3, [pc, #48]	; 13614 <__assert_fail@plt+0x26c8>
   135e0:	mov	r1, #48	; 0x30
   135e4:	mov	r0, r3
   135e8:	bl	16e7c <__assert_fail@plt+0x5f30>
   135ec:	mov	r3, r0
   135f0:	str	r3, [fp, #-12]
   135f4:	bl	10e80 <__errno_location@plt>
   135f8:	mov	r2, r0
   135fc:	ldr	r3, [fp, #-8]
   13600:	str	r3, [r2]
   13604:	ldr	r3, [fp, #-12]
   13608:	mov	r0, r3
   1360c:	sub	sp, fp, #4
   13610:	pop	{fp, pc}
   13614:	andeq	sl, r2, ip, ror #2
   13618:	push	{fp}		; (str fp, [sp, #-4]!)
   1361c:	add	fp, sp, #0
   13620:	sub	sp, sp, #12
   13624:	str	r0, [fp, #-8]
   13628:	ldr	r3, [fp, #-8]
   1362c:	cmp	r3, #0
   13630:	beq	1363c <__assert_fail@plt+0x26f0>
   13634:	ldr	r3, [fp, #-8]
   13638:	b	13640 <__assert_fail@plt+0x26f4>
   1363c:	ldr	r3, [pc, #16]	; 13654 <__assert_fail@plt+0x2708>
   13640:	ldr	r3, [r3]
   13644:	mov	r0, r3
   13648:	add	sp, fp, #0
   1364c:	pop	{fp}		; (ldr fp, [sp], #4)
   13650:	bx	lr
   13654:	andeq	sl, r2, ip, ror #2
   13658:	push	{fp}		; (str fp, [sp, #-4]!)
   1365c:	add	fp, sp, #0
   13660:	sub	sp, sp, #12
   13664:	str	r0, [fp, #-8]
   13668:	str	r1, [fp, #-12]
   1366c:	ldr	r3, [fp, #-8]
   13670:	cmp	r3, #0
   13674:	beq	13680 <__assert_fail@plt+0x2734>
   13678:	ldr	r3, [fp, #-8]
   1367c:	b	13684 <__assert_fail@plt+0x2738>
   13680:	ldr	r3, [pc, #20]	; 1369c <__assert_fail@plt+0x2750>
   13684:	ldr	r2, [fp, #-12]
   13688:	str	r2, [r3]
   1368c:	nop			; (mov r0, r0)
   13690:	add	sp, fp, #0
   13694:	pop	{fp}		; (ldr fp, [sp], #4)
   13698:	bx	lr
   1369c:	andeq	sl, r2, ip, ror #2
   136a0:	push	{fp}		; (str fp, [sp, #-4]!)
   136a4:	add	fp, sp, #0
   136a8:	sub	sp, sp, #36	; 0x24
   136ac:	str	r0, [fp, #-24]	; 0xffffffe8
   136b0:	mov	r3, r1
   136b4:	str	r2, [fp, #-32]	; 0xffffffe0
   136b8:	strb	r3, [fp, #-25]	; 0xffffffe7
   136bc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   136c0:	strb	r3, [fp, #-5]
   136c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136c8:	cmp	r3, #0
   136cc:	beq	136d8 <__assert_fail@plt+0x278c>
   136d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136d4:	b	136dc <__assert_fail@plt+0x2790>
   136d8:	ldr	r3, [pc, #124]	; 1375c <__assert_fail@plt+0x2810>
   136dc:	add	r2, r3, #8
   136e0:	ldrb	r3, [fp, #-5]
   136e4:	lsr	r3, r3, #5
   136e8:	uxtb	r3, r3
   136ec:	lsl	r3, r3, #2
   136f0:	add	r3, r2, r3
   136f4:	str	r3, [fp, #-12]
   136f8:	ldrb	r3, [fp, #-5]
   136fc:	and	r3, r3, #31
   13700:	str	r3, [fp, #-16]
   13704:	ldr	r3, [fp, #-12]
   13708:	ldr	r2, [r3]
   1370c:	ldr	r3, [fp, #-16]
   13710:	lsr	r3, r2, r3
   13714:	and	r3, r3, #1
   13718:	str	r3, [fp, #-20]	; 0xffffffec
   1371c:	ldr	r3, [fp, #-12]
   13720:	ldr	r3, [r3]
   13724:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13728:	and	r1, r2, #1
   1372c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13730:	eor	r1, r1, r2
   13734:	ldr	r2, [fp, #-16]
   13738:	lsl	r2, r1, r2
   1373c:	eor	r2, r2, r3
   13740:	ldr	r3, [fp, #-12]
   13744:	str	r2, [r3]
   13748:	ldr	r3, [fp, #-20]	; 0xffffffec
   1374c:	mov	r0, r3
   13750:	add	sp, fp, #0
   13754:	pop	{fp}		; (ldr fp, [sp], #4)
   13758:	bx	lr
   1375c:	andeq	sl, r2, ip, ror #2
   13760:	push	{fp}		; (str fp, [sp, #-4]!)
   13764:	add	fp, sp, #0
   13768:	sub	sp, sp, #20
   1376c:	str	r0, [fp, #-16]
   13770:	str	r1, [fp, #-20]	; 0xffffffec
   13774:	ldr	r3, [fp, #-16]
   13778:	cmp	r3, #0
   1377c:	bne	13788 <__assert_fail@plt+0x283c>
   13780:	ldr	r3, [pc, #44]	; 137b4 <__assert_fail@plt+0x2868>
   13784:	str	r3, [fp, #-16]
   13788:	ldr	r3, [fp, #-16]
   1378c:	ldr	r3, [r3, #4]
   13790:	str	r3, [fp, #-8]
   13794:	ldr	r3, [fp, #-16]
   13798:	ldr	r2, [fp, #-20]	; 0xffffffec
   1379c:	str	r2, [r3, #4]
   137a0:	ldr	r3, [fp, #-8]
   137a4:	mov	r0, r3
   137a8:	add	sp, fp, #0
   137ac:	pop	{fp}		; (ldr fp, [sp], #4)
   137b0:	bx	lr
   137b4:	andeq	sl, r2, ip, ror #2
   137b8:	push	{fp, lr}
   137bc:	add	fp, sp, #4
   137c0:	sub	sp, sp, #16
   137c4:	str	r0, [fp, #-8]
   137c8:	str	r1, [fp, #-12]
   137cc:	str	r2, [fp, #-16]
   137d0:	ldr	r3, [fp, #-8]
   137d4:	cmp	r3, #0
   137d8:	bne	137e4 <__assert_fail@plt+0x2898>
   137dc:	ldr	r3, [pc, #76]	; 13830 <__assert_fail@plt+0x28e4>
   137e0:	str	r3, [fp, #-8]
   137e4:	ldr	r3, [fp, #-8]
   137e8:	mov	r2, #10
   137ec:	str	r2, [r3]
   137f0:	ldr	r3, [fp, #-12]
   137f4:	cmp	r3, #0
   137f8:	beq	13808 <__assert_fail@plt+0x28bc>
   137fc:	ldr	r3, [fp, #-16]
   13800:	cmp	r3, #0
   13804:	bne	1380c <__assert_fail@plt+0x28c0>
   13808:	bl	10f34 <abort@plt>
   1380c:	ldr	r3, [fp, #-8]
   13810:	ldr	r2, [fp, #-12]
   13814:	str	r2, [r3, #40]	; 0x28
   13818:	ldr	r3, [fp, #-8]
   1381c:	ldr	r2, [fp, #-16]
   13820:	str	r2, [r3, #44]	; 0x2c
   13824:	nop			; (mov r0, r0)
   13828:	sub	sp, fp, #4
   1382c:	pop	{fp, pc}
   13830:	andeq	sl, r2, ip, ror #2
   13834:	push	{fp, lr}
   13838:	add	fp, sp, #4
   1383c:	sub	sp, sp, #56	; 0x38
   13840:	str	r0, [fp, #-56]	; 0xffffffc8
   13844:	str	r1, [fp, #-60]	; 0xffffffc4
   13848:	sub	r3, fp, #52	; 0x34
   1384c:	mov	r2, #48	; 0x30
   13850:	mov	r1, #0
   13854:	mov	r0, r3
   13858:	bl	10e98 <memset@plt>
   1385c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13860:	cmp	r3, #10
   13864:	bne	1386c <__assert_fail@plt+0x2920>
   13868:	bl	10f34 <abort@plt>
   1386c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13870:	str	r3, [fp, #-52]	; 0xffffffcc
   13874:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13878:	mov	lr, r3
   1387c:	sub	ip, fp, #52	; 0x34
   13880:	ldm	ip!, {r0, r1, r2, r3}
   13884:	stmia	lr!, {r0, r1, r2, r3}
   13888:	ldm	ip!, {r0, r1, r2, r3}
   1388c:	stmia	lr!, {r0, r1, r2, r3}
   13890:	ldm	ip, {r0, r1, r2, r3}
   13894:	stm	lr, {r0, r1, r2, r3}
   13898:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1389c:	sub	sp, fp, #4
   138a0:	pop	{fp, pc}
   138a4:	push	{fp, lr}
   138a8:	add	fp, sp, #4
   138ac:	sub	sp, sp, #16
   138b0:	str	r0, [fp, #-16]
   138b4:	str	r1, [fp, #-20]	; 0xffffffec
   138b8:	ldr	r0, [fp, #-16]
   138bc:	bl	10e50 <gettext@plt>
   138c0:	str	r0, [fp, #-8]
   138c4:	ldr	r2, [fp, #-8]
   138c8:	ldr	r3, [fp, #-16]
   138cc:	cmp	r2, r3
   138d0:	beq	138dc <__assert_fail@plt+0x2990>
   138d4:	ldr	r3, [fp, #-8]
   138d8:	b	1396c <__assert_fail@plt+0x2a20>
   138dc:	bl	17d38 <__assert_fail@plt+0x6dec>
   138e0:	str	r0, [fp, #-12]
   138e4:	ldr	r1, [pc, #140]	; 13978 <__assert_fail@plt+0x2a2c>
   138e8:	ldr	r0, [fp, #-12]
   138ec:	bl	17bc8 <__assert_fail@plt+0x6c7c>
   138f0:	mov	r3, r0
   138f4:	cmp	r3, #0
   138f8:	bne	1391c <__assert_fail@plt+0x29d0>
   138fc:	ldr	r3, [fp, #-16]
   13900:	ldrb	r3, [r3]
   13904:	cmp	r3, #96	; 0x60
   13908:	bne	13914 <__assert_fail@plt+0x29c8>
   1390c:	ldr	r3, [pc, #104]	; 1397c <__assert_fail@plt+0x2a30>
   13910:	b	1396c <__assert_fail@plt+0x2a20>
   13914:	ldr	r3, [pc, #100]	; 13980 <__assert_fail@plt+0x2a34>
   13918:	b	1396c <__assert_fail@plt+0x2a20>
   1391c:	ldr	r1, [pc, #96]	; 13984 <__assert_fail@plt+0x2a38>
   13920:	ldr	r0, [fp, #-12]
   13924:	bl	17bc8 <__assert_fail@plt+0x6c7c>
   13928:	mov	r3, r0
   1392c:	cmp	r3, #0
   13930:	bne	13954 <__assert_fail@plt+0x2a08>
   13934:	ldr	r3, [fp, #-16]
   13938:	ldrb	r3, [r3]
   1393c:	cmp	r3, #96	; 0x60
   13940:	bne	1394c <__assert_fail@plt+0x2a00>
   13944:	ldr	r3, [pc, #60]	; 13988 <__assert_fail@plt+0x2a3c>
   13948:	b	1396c <__assert_fail@plt+0x2a20>
   1394c:	ldr	r3, [pc, #56]	; 1398c <__assert_fail@plt+0x2a40>
   13950:	b	1396c <__assert_fail@plt+0x2a20>
   13954:	ldr	r3, [fp, #-20]	; 0xffffffec
   13958:	cmp	r3, #9
   1395c:	bne	13968 <__assert_fail@plt+0x2a1c>
   13960:	ldr	r3, [pc, #40]	; 13990 <__assert_fail@plt+0x2a44>
   13964:	b	1396c <__assert_fail@plt+0x2a20>
   13968:	ldr	r3, [pc, #36]	; 13994 <__assert_fail@plt+0x2a48>
   1396c:	mov	r0, r3
   13970:	sub	sp, fp, #4
   13974:	pop	{fp, pc}
   13978:	andeq	r9, r1, ip, ror #9
   1397c:	strdeq	r9, [r1], -r4
   13980:	strdeq	r9, [r1], -r8
   13984:	strdeq	r9, [r1], -ip
   13988:	andeq	r9, r1, r4, lsl #10
   1398c:	andeq	r9, r1, r8, lsl #10
   13990:	andeq	r9, r1, ip, lsl #10
   13994:	andeq	r9, r1, r0, lsl r5
   13998:	push	{r4, fp, lr}
   1399c:	add	fp, sp, #8
   139a0:	sub	sp, sp, #116	; 0x74
   139a4:	str	r0, [fp, #-88]	; 0xffffffa8
   139a8:	str	r1, [fp, #-92]	; 0xffffffa4
   139ac:	str	r2, [fp, #-96]	; 0xffffffa0
   139b0:	str	r3, [fp, #-100]	; 0xffffff9c
   139b4:	mov	r3, #0
   139b8:	str	r3, [fp, #-20]	; 0xffffffec
   139bc:	mov	r3, #0
   139c0:	str	r3, [fp, #-24]	; 0xffffffe8
   139c4:	mov	r3, #0
   139c8:	str	r3, [fp, #-28]	; 0xffffffe4
   139cc:	mov	r3, #0
   139d0:	str	r3, [fp, #-32]	; 0xffffffe0
   139d4:	mov	r3, #0
   139d8:	strb	r3, [fp, #-33]	; 0xffffffdf
   139dc:	bl	10dc0 <__ctype_get_mb_cur_max@plt>
   139e0:	mov	r3, r0
   139e4:	cmp	r3, #1
   139e8:	moveq	r3, #1
   139ec:	movne	r3, #0
   139f0:	strb	r3, [fp, #-57]	; 0xffffffc7
   139f4:	ldr	r3, [fp, #8]
   139f8:	and	r3, r3, #2
   139fc:	cmp	r3, #0
   13a00:	movne	r3, #1
   13a04:	moveq	r3, #0
   13a08:	strb	r3, [fp, #-34]	; 0xffffffde
   13a0c:	mov	r3, #0
   13a10:	strb	r3, [fp, #-35]	; 0xffffffdd
   13a14:	mov	r3, #0
   13a18:	strb	r3, [fp, #-36]	; 0xffffffdc
   13a1c:	mov	r3, #1
   13a20:	strb	r3, [fp, #-37]	; 0xffffffdb
   13a24:	ldr	r3, [fp, #4]
   13a28:	cmp	r3, #10
   13a2c:	ldrls	pc, [pc, r3, lsl #2]
   13a30:	b	13c38 <__assert_fail@plt+0x2cec>
   13a34:	andeq	r3, r1, ip, lsr #24
   13a38:	andeq	r3, r1, r8, lsr #23
   13a3c:	andeq	r3, r1, ip, asr #23
   13a40:	andeq	r3, r1, r0, lsr #23
   13a44:			; <UNDEFINED> instruction: 0x00013bb0
   13a48:	andeq	r3, r1, r0, ror sl
   13a4c:	andeq	r3, r1, r0, ror #20
   13a50:	ldrdeq	r3, [r1], -r0
   13a54:	andeq	r3, r1, r4, ror #21
   13a58:	andeq	r3, r1, r4, ror #21
   13a5c:	andeq	r3, r1, r4, ror #21
   13a60:	mov	r3, #5
   13a64:	str	r3, [fp, #4]
   13a68:	mov	r3, #1
   13a6c:	strb	r3, [fp, #-34]	; 0xffffffde
   13a70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a74:	eor	r3, r3, #1
   13a78:	uxtb	r3, r3
   13a7c:	cmp	r3, #0
   13a80:	beq	13ab4 <__assert_fail@plt+0x2b68>
   13a84:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a8c:	cmp	r2, r3
   13a90:	bcs	13aa8 <__assert_fail@plt+0x2b5c>
   13a94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a9c:	add	r3, r2, r3
   13aa0:	mov	r2, #34	; 0x22
   13aa4:	strb	r2, [r3]
   13aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13aac:	add	r3, r3, #1
   13ab0:	str	r3, [fp, #-20]	; 0xffffffec
   13ab4:	mov	r3, #1
   13ab8:	strb	r3, [fp, #-33]	; 0xffffffdf
   13abc:	ldr	r3, [pc, #3872]	; 149e4 <__assert_fail@plt+0x3a98>
   13ac0:	str	r3, [fp, #-28]	; 0xffffffe4
   13ac4:	mov	r3, #1
   13ac8:	str	r3, [fp, #-32]	; 0xffffffe0
   13acc:	b	13c3c <__assert_fail@plt+0x2cf0>
   13ad0:	mov	r3, #1
   13ad4:	strb	r3, [fp, #-33]	; 0xffffffdf
   13ad8:	mov	r3, #0
   13adc:	strb	r3, [fp, #-34]	; 0xffffffde
   13ae0:	b	13c3c <__assert_fail@plt+0x2cf0>
   13ae4:	ldr	r3, [fp, #4]
   13ae8:	cmp	r3, #10
   13aec:	beq	13b10 <__assert_fail@plt+0x2bc4>
   13af0:	ldr	r1, [fp, #4]
   13af4:	ldr	r0, [pc, #3820]	; 149e8 <__assert_fail@plt+0x3a9c>
   13af8:	bl	138a4 <__assert_fail@plt+0x2958>
   13afc:	str	r0, [fp, #16]
   13b00:	ldr	r1, [fp, #4]
   13b04:	ldr	r0, [pc, #3808]	; 149ec <__assert_fail@plt+0x3aa0>
   13b08:	bl	138a4 <__assert_fail@plt+0x2958>
   13b0c:	str	r0, [fp, #20]
   13b10:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b14:	eor	r3, r3, #1
   13b18:	uxtb	r3, r3
   13b1c:	cmp	r3, #0
   13b20:	beq	13b80 <__assert_fail@plt+0x2c34>
   13b24:	ldr	r3, [fp, #16]
   13b28:	str	r3, [fp, #-28]	; 0xffffffe4
   13b2c:	b	13b70 <__assert_fail@plt+0x2c24>
   13b30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b38:	cmp	r2, r3
   13b3c:	bcs	13b58 <__assert_fail@plt+0x2c0c>
   13b40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b48:	add	r3, r2, r3
   13b4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13b50:	ldrb	r2, [r2]
   13b54:	strb	r2, [r3]
   13b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b5c:	add	r3, r3, #1
   13b60:	str	r3, [fp, #-20]	; 0xffffffec
   13b64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b68:	add	r3, r3, #1
   13b6c:	str	r3, [fp, #-28]	; 0xffffffe4
   13b70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b74:	ldrb	r3, [r3]
   13b78:	cmp	r3, #0
   13b7c:	bne	13b30 <__assert_fail@plt+0x2be4>
   13b80:	mov	r3, #1
   13b84:	strb	r3, [fp, #-33]	; 0xffffffdf
   13b88:	ldr	r3, [fp, #20]
   13b8c:	str	r3, [fp, #-28]	; 0xffffffe4
   13b90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13b94:	bl	10e5c <strlen@plt>
   13b98:	str	r0, [fp, #-32]	; 0xffffffe0
   13b9c:	b	13c3c <__assert_fail@plt+0x2cf0>
   13ba0:	mov	r3, #1
   13ba4:	strb	r3, [fp, #-33]	; 0xffffffdf
   13ba8:	mov	r3, #1
   13bac:	strb	r3, [fp, #-34]	; 0xffffffde
   13bb0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13bb4:	eor	r3, r3, #1
   13bb8:	uxtb	r3, r3
   13bbc:	cmp	r3, #0
   13bc0:	beq	13bcc <__assert_fail@plt+0x2c80>
   13bc4:	mov	r3, #1
   13bc8:	strb	r3, [fp, #-33]	; 0xffffffdf
   13bcc:	mov	r3, #2
   13bd0:	str	r3, [fp, #4]
   13bd4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13bd8:	eor	r3, r3, #1
   13bdc:	uxtb	r3, r3
   13be0:	cmp	r3, #0
   13be4:	beq	13c18 <__assert_fail@plt+0x2ccc>
   13be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bf0:	cmp	r2, r3
   13bf4:	bcs	13c0c <__assert_fail@plt+0x2cc0>
   13bf8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c00:	add	r3, r2, r3
   13c04:	mov	r2, #39	; 0x27
   13c08:	strb	r2, [r3]
   13c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c10:	add	r3, r3, #1
   13c14:	str	r3, [fp, #-20]	; 0xffffffec
   13c18:	ldr	r3, [pc, #3532]	; 149ec <__assert_fail@plt+0x3aa0>
   13c1c:	str	r3, [fp, #-28]	; 0xffffffe4
   13c20:	mov	r3, #1
   13c24:	str	r3, [fp, #-32]	; 0xffffffe0
   13c28:	b	13c3c <__assert_fail@plt+0x2cf0>
   13c2c:	mov	r3, #0
   13c30:	strb	r3, [fp, #-34]	; 0xffffffde
   13c34:	b	13c3c <__assert_fail@plt+0x2cf0>
   13c38:	bl	10f34 <abort@plt>
   13c3c:	mov	r3, #0
   13c40:	str	r3, [fp, #-16]
   13c44:	b	14dd4 <__assert_fail@plt+0x3e88>
   13c48:	mov	r3, #0
   13c4c:	strb	r3, [fp, #-40]	; 0xffffffd8
   13c50:	mov	r3, #0
   13c54:	strb	r3, [fp, #-41]	; 0xffffffd7
   13c58:	mov	r3, #0
   13c5c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13c60:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13c64:	cmp	r3, #0
   13c68:	beq	13d04 <__assert_fail@plt+0x2db8>
   13c6c:	ldr	r3, [fp, #4]
   13c70:	cmp	r3, #2
   13c74:	beq	13d04 <__assert_fail@plt+0x2db8>
   13c78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13c7c:	cmp	r3, #0
   13c80:	beq	13d04 <__assert_fail@plt+0x2db8>
   13c84:	ldr	r2, [fp, #-16]
   13c88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13c8c:	add	r4, r2, r3
   13c90:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13c94:	cmn	r3, #1
   13c98:	bne	13cbc <__assert_fail@plt+0x2d70>
   13c9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ca0:	cmp	r3, #1
   13ca4:	bls	13cbc <__assert_fail@plt+0x2d70>
   13ca8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13cac:	bl	10e5c <strlen@plt>
   13cb0:	str	r0, [fp, #-100]	; 0xffffff9c
   13cb4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13cb8:	b	13cc0 <__assert_fail@plt+0x2d74>
   13cbc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13cc0:	cmp	r4, r3
   13cc4:	bhi	13d04 <__assert_fail@plt+0x2db8>
   13cc8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ccc:	ldr	r3, [fp, #-16]
   13cd0:	add	r3, r2, r3
   13cd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cd8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13cdc:	mov	r0, r3
   13ce0:	bl	10d6c <memcmp@plt>
   13ce4:	mov	r3, r0
   13ce8:	cmp	r3, #0
   13cec:	bne	13d04 <__assert_fail@plt+0x2db8>
   13cf0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13cf4:	cmp	r3, #0
   13cf8:	bne	14f90 <__assert_fail@plt+0x4044>
   13cfc:	mov	r3, #1
   13d00:	strb	r3, [fp, #-40]	; 0xffffffd8
   13d04:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13d08:	ldr	r3, [fp, #-16]
   13d0c:	add	r3, r2, r3
   13d10:	ldrb	r3, [r3]
   13d14:	strb	r3, [fp, #-38]	; 0xffffffda
   13d18:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d1c:	cmp	r3, #126	; 0x7e
   13d20:	ldrls	pc, [pc, r3, lsl #2]
   13d24:	b	14550 <__assert_fail@plt+0x3604>
   13d28:	andeq	r3, r1, r4, lsr #30
   13d2c:	andeq	r4, r1, r0, asr r5
   13d30:	andeq	r4, r1, r0, asr r5
   13d34:	andeq	r4, r1, r0, asr r5
   13d38:	andeq	r4, r1, r0, asr r5
   13d3c:	andeq	r4, r1, r0, asr r5
   13d40:	andeq	r4, r1, r0, asr r5
   13d44:	andeq	r4, r1, r4, lsl r3
   13d48:	andeq	r4, r1, r0, lsr #6
   13d4c:	andeq	r4, r1, r0, asr r3
   13d50:	andeq	r4, r1, r8, lsr r3
   13d54:	andeq	r4, r1, ip, asr r3
   13d58:	andeq	r4, r1, ip, lsr #6
   13d5c:	andeq	r4, r1, r4, asr #6
   13d60:	andeq	r4, r1, r0, asr r5
   13d64:	andeq	r4, r1, r0, asr r5
   13d68:	andeq	r4, r1, r0, asr r5
   13d6c:	andeq	r4, r1, r0, asr r5
   13d70:	andeq	r4, r1, r0, asr r5
   13d74:	andeq	r4, r1, r0, asr r5
   13d78:	andeq	r4, r1, r0, asr r5
   13d7c:	andeq	r4, r1, r0, asr r5
   13d80:	andeq	r4, r1, r0, asr r5
   13d84:	andeq	r4, r1, r0, asr r5
   13d88:	andeq	r4, r1, r0, asr r5
   13d8c:	andeq	r4, r1, r0, asr r5
   13d90:	andeq	r4, r1, r0, asr r5
   13d94:	andeq	r4, r1, r0, asr r5
   13d98:	andeq	r4, r1, r0, asr r5
   13d9c:	andeq	r4, r1, r0, asr r5
   13da0:	andeq	r4, r1, r0, asr r5
   13da4:	andeq	r4, r1, r0, asr r5
   13da8:	andeq	r4, r1, r4, lsr r4
   13dac:	andeq	r4, r1, ip, lsr r4
   13db0:	andeq	r4, r1, ip, lsr r4
   13db4:	andeq	r4, r1, r8, lsr #8
   13db8:	andeq	r4, r1, ip, lsr r4
   13dbc:	andeq	r4, r1, r4, asr #10
   13dc0:	andeq	r4, r1, ip, lsr r4
   13dc4:	andeq	r4, r1, r8, asr r4
   13dc8:	andeq	r4, r1, ip, lsr r4
   13dcc:	andeq	r4, r1, ip, lsr r4
   13dd0:	andeq	r4, r1, ip, lsr r4
   13dd4:	andeq	r4, r1, r4, asr #10
   13dd8:	andeq	r4, r1, r4, asr #10
   13ddc:	andeq	r4, r1, r4, asr #10
   13de0:	andeq	r4, r1, r4, asr #10
   13de4:	andeq	r4, r1, r4, asr #10
   13de8:	andeq	r4, r1, r4, asr #10
   13dec:	andeq	r4, r1, r4, asr #10
   13df0:	andeq	r4, r1, r4, asr #10
   13df4:	andeq	r4, r1, r4, asr #10
   13df8:	andeq	r4, r1, r4, asr #10
   13dfc:	andeq	r4, r1, r4, asr #10
   13e00:	andeq	r4, r1, r4, asr #10
   13e04:	andeq	r4, r1, r4, asr #10
   13e08:	andeq	r4, r1, r4, asr #10
   13e0c:	andeq	r4, r1, r4, asr #10
   13e10:	andeq	r4, r1, r4, asr #10
   13e14:	andeq	r4, r1, ip, lsr r4
   13e18:	andeq	r4, r1, ip, lsr r4
   13e1c:	andeq	r4, r1, ip, lsr r4
   13e20:	andeq	r4, r1, ip, lsr r4
   13e24:	andeq	r4, r1, r4, lsl #2
   13e28:	andeq	r4, r1, r0, asr r5
   13e2c:	andeq	r4, r1, r4, asr #10
   13e30:	andeq	r4, r1, r4, asr #10
   13e34:	andeq	r4, r1, r4, asr #10
   13e38:	andeq	r4, r1, r4, asr #10
   13e3c:	andeq	r4, r1, r4, asr #10
   13e40:	andeq	r4, r1, r4, asr #10
   13e44:	andeq	r4, r1, r4, asr #10
   13e48:	andeq	r4, r1, r4, asr #10
   13e4c:	andeq	r4, r1, r4, asr #10
   13e50:	andeq	r4, r1, r4, asr #10
   13e54:	andeq	r4, r1, r4, asr #10
   13e58:	andeq	r4, r1, r4, asr #10
   13e5c:	andeq	r4, r1, r4, asr #10
   13e60:	andeq	r4, r1, r4, asr #10
   13e64:	andeq	r4, r1, r4, asr #10
   13e68:	andeq	r4, r1, r4, asr #10
   13e6c:	andeq	r4, r1, r4, asr #10
   13e70:	andeq	r4, r1, r4, asr #10
   13e74:	andeq	r4, r1, r4, asr #10
   13e78:	andeq	r4, r1, r4, asr #10
   13e7c:	andeq	r4, r1, r4, asr #10
   13e80:	andeq	r4, r1, r4, asr #10
   13e84:	andeq	r4, r1, r4, asr #10
   13e88:	andeq	r4, r1, r4, asr #10
   13e8c:	andeq	r4, r1, r4, asr #10
   13e90:	andeq	r4, r1, r4, asr #10
   13e94:	andeq	r4, r1, ip, lsr r4
   13e98:	andeq	r4, r1, r8, ror #6
   13e9c:	andeq	r4, r1, r4, asr #10
   13ea0:	andeq	r4, r1, ip, lsr r4
   13ea4:	andeq	r4, r1, r4, asr #10
   13ea8:	andeq	r4, r1, ip, lsr r4
   13eac:	andeq	r4, r1, r4, asr #10
   13eb0:	andeq	r4, r1, r4, asr #10
   13eb4:	andeq	r4, r1, r4, asr #10
   13eb8:	andeq	r4, r1, r4, asr #10
   13ebc:	andeq	r4, r1, r4, asr #10
   13ec0:	andeq	r4, r1, r4, asr #10
   13ec4:	andeq	r4, r1, r4, asr #10
   13ec8:	andeq	r4, r1, r4, asr #10
   13ecc:	andeq	r4, r1, r4, asr #10
   13ed0:	andeq	r4, r1, r4, asr #10
   13ed4:	andeq	r4, r1, r4, asr #10
   13ed8:	andeq	r4, r1, r4, asr #10
   13edc:	andeq	r4, r1, r4, asr #10
   13ee0:	andeq	r4, r1, r4, asr #10
   13ee4:	andeq	r4, r1, r4, asr #10
   13ee8:	andeq	r4, r1, r4, asr #10
   13eec:	andeq	r4, r1, r4, asr #10
   13ef0:	andeq	r4, r1, r4, asr #10
   13ef4:	andeq	r4, r1, r4, asr #10
   13ef8:	andeq	r4, r1, r4, asr #10
   13efc:	andeq	r4, r1, r4, asr #10
   13f00:	andeq	r4, r1, r4, asr #10
   13f04:	andeq	r4, r1, r4, asr #10
   13f08:	andeq	r4, r1, r4, asr #10
   13f0c:	andeq	r4, r1, r4, asr #10
   13f10:	andeq	r4, r1, r4, asr #10
   13f14:	andeq	r4, r1, r0, ror #7
   13f18:	andeq	r4, r1, ip, lsr r4
   13f1c:	andeq	r4, r1, r0, ror #7
   13f20:	andeq	r4, r1, r8, lsr #8
   13f24:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13f28:	cmp	r3, #0
   13f2c:	beq	140f0 <__assert_fail@plt+0x31a4>
   13f30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f34:	cmp	r3, #0
   13f38:	bne	14f98 <__assert_fail@plt+0x404c>
   13f3c:	mov	r3, #1
   13f40:	strb	r3, [fp, #-41]	; 0xffffffd7
   13f44:	ldr	r3, [fp, #4]
   13f48:	cmp	r3, #2
   13f4c:	bne	13ffc <__assert_fail@plt+0x30b0>
   13f50:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13f54:	eor	r3, r3, #1
   13f58:	uxtb	r3, r3
   13f5c:	cmp	r3, #0
   13f60:	beq	13ffc <__assert_fail@plt+0x30b0>
   13f64:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f6c:	cmp	r2, r3
   13f70:	bcs	13f88 <__assert_fail@plt+0x303c>
   13f74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f7c:	add	r3, r2, r3
   13f80:	mov	r2, #39	; 0x27
   13f84:	strb	r2, [r3]
   13f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f8c:	add	r3, r3, #1
   13f90:	str	r3, [fp, #-20]	; 0xffffffec
   13f94:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f9c:	cmp	r2, r3
   13fa0:	bcs	13fb8 <__assert_fail@plt+0x306c>
   13fa4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fac:	add	r3, r2, r3
   13fb0:	mov	r2, #36	; 0x24
   13fb4:	strb	r2, [r3]
   13fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fbc:	add	r3, r3, #1
   13fc0:	str	r3, [fp, #-20]	; 0xffffffec
   13fc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fc8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fcc:	cmp	r2, r3
   13fd0:	bcs	13fe8 <__assert_fail@plt+0x309c>
   13fd4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fdc:	add	r3, r2, r3
   13fe0:	mov	r2, #39	; 0x27
   13fe4:	strb	r2, [r3]
   13fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fec:	add	r3, r3, #1
   13ff0:	str	r3, [fp, #-20]	; 0xffffffec
   13ff4:	mov	r3, #1
   13ff8:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ffc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14000:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14004:	cmp	r2, r3
   14008:	bcs	14020 <__assert_fail@plt+0x30d4>
   1400c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14010:	ldr	r3, [fp, #-20]	; 0xffffffec
   14014:	add	r3, r2, r3
   14018:	mov	r2, #92	; 0x5c
   1401c:	strb	r2, [r3]
   14020:	ldr	r3, [fp, #-20]	; 0xffffffec
   14024:	add	r3, r3, #1
   14028:	str	r3, [fp, #-20]	; 0xffffffec
   1402c:	ldr	r3, [fp, #4]
   14030:	cmp	r3, #2
   14034:	beq	140e4 <__assert_fail@plt+0x3198>
   14038:	ldr	r3, [fp, #-16]
   1403c:	add	r2, r3, #1
   14040:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14044:	cmp	r2, r3
   14048:	bcs	140e4 <__assert_fail@plt+0x3198>
   1404c:	ldr	r3, [fp, #-16]
   14050:	add	r3, r3, #1
   14054:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14058:	add	r3, r2, r3
   1405c:	ldrb	r3, [r3]
   14060:	cmp	r3, #47	; 0x2f
   14064:	bls	140e4 <__assert_fail@plt+0x3198>
   14068:	ldr	r3, [fp, #-16]
   1406c:	add	r3, r3, #1
   14070:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14074:	add	r3, r2, r3
   14078:	ldrb	r3, [r3]
   1407c:	cmp	r3, #57	; 0x39
   14080:	bhi	140e4 <__assert_fail@plt+0x3198>
   14084:	ldr	r2, [fp, #-20]	; 0xffffffec
   14088:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1408c:	cmp	r2, r3
   14090:	bcs	140a8 <__assert_fail@plt+0x315c>
   14094:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1409c:	add	r3, r2, r3
   140a0:	mov	r2, #48	; 0x30
   140a4:	strb	r2, [r3]
   140a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   140ac:	add	r3, r3, #1
   140b0:	str	r3, [fp, #-20]	; 0xffffffec
   140b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   140b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140bc:	cmp	r2, r3
   140c0:	bcs	140d8 <__assert_fail@plt+0x318c>
   140c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   140cc:	add	r3, r2, r3
   140d0:	mov	r2, #48	; 0x30
   140d4:	strb	r2, [r3]
   140d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   140dc:	add	r3, r3, #1
   140e0:	str	r3, [fp, #-20]	; 0xffffffec
   140e4:	mov	r3, #48	; 0x30
   140e8:	strb	r3, [fp, #-38]	; 0xffffffda
   140ec:	b	14b2c <__assert_fail@plt+0x3be0>
   140f0:	ldr	r3, [fp, #8]
   140f4:	and	r3, r3, #1
   140f8:	cmp	r3, #0
   140fc:	beq	14b2c <__assert_fail@plt+0x3be0>
   14100:	b	14dc8 <__assert_fail@plt+0x3e7c>
   14104:	ldr	r3, [fp, #4]
   14108:	cmp	r3, #2
   1410c:	beq	1411c <__assert_fail@plt+0x31d0>
   14110:	cmp	r3, #5
   14114:	beq	1412c <__assert_fail@plt+0x31e0>
   14118:	b	14310 <__assert_fail@plt+0x33c4>
   1411c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14120:	cmp	r3, #0
   14124:	beq	14304 <__assert_fail@plt+0x33b8>
   14128:	b	14fd4 <__assert_fail@plt+0x4088>
   1412c:	ldr	r3, [fp, #8]
   14130:	and	r3, r3, #4
   14134:	cmp	r3, #0
   14138:	beq	1430c <__assert_fail@plt+0x33c0>
   1413c:	ldr	r3, [fp, #-16]
   14140:	add	r2, r3, #2
   14144:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14148:	cmp	r2, r3
   1414c:	bcs	1430c <__assert_fail@plt+0x33c0>
   14150:	ldr	r3, [fp, #-16]
   14154:	add	r3, r3, #1
   14158:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1415c:	add	r3, r2, r3
   14160:	ldrb	r3, [r3]
   14164:	cmp	r3, #63	; 0x3f
   14168:	bne	1430c <__assert_fail@plt+0x33c0>
   1416c:	ldr	r3, [fp, #-16]
   14170:	add	r3, r3, #2
   14174:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14178:	add	r3, r2, r3
   1417c:	ldrb	r3, [r3]
   14180:	sub	r3, r3, #33	; 0x21
   14184:	cmp	r3, #29
   14188:	ldrls	pc, [pc, r3, lsl #2]
   1418c:	b	142fc <__assert_fail@plt+0x33b0>
   14190:	andeq	r4, r1, r8, lsl #4
   14194:	strdeq	r4, [r1], -ip
   14198:	strdeq	r4, [r1], -ip
   1419c:	strdeq	r4, [r1], -ip
   141a0:	strdeq	r4, [r1], -ip
   141a4:	strdeq	r4, [r1], -ip
   141a8:	andeq	r4, r1, r8, lsl #4
   141ac:	andeq	r4, r1, r8, lsl #4
   141b0:	andeq	r4, r1, r8, lsl #4
   141b4:	strdeq	r4, [r1], -ip
   141b8:	strdeq	r4, [r1], -ip
   141bc:	strdeq	r4, [r1], -ip
   141c0:	andeq	r4, r1, r8, lsl #4
   141c4:	strdeq	r4, [r1], -ip
   141c8:	andeq	r4, r1, r8, lsl #4
   141cc:	strdeq	r4, [r1], -ip
   141d0:	strdeq	r4, [r1], -ip
   141d4:	strdeq	r4, [r1], -ip
   141d8:	strdeq	r4, [r1], -ip
   141dc:	strdeq	r4, [r1], -ip
   141e0:	strdeq	r4, [r1], -ip
   141e4:	strdeq	r4, [r1], -ip
   141e8:	strdeq	r4, [r1], -ip
   141ec:	strdeq	r4, [r1], -ip
   141f0:	strdeq	r4, [r1], -ip
   141f4:	strdeq	r4, [r1], -ip
   141f8:	strdeq	r4, [r1], -ip
   141fc:	andeq	r4, r1, r8, lsl #4
   14200:	andeq	r4, r1, r8, lsl #4
   14204:	andeq	r4, r1, r8, lsl #4
   14208:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1420c:	cmp	r3, #0
   14210:	bne	14fa0 <__assert_fail@plt+0x4054>
   14214:	ldr	r3, [fp, #-16]
   14218:	add	r3, r3, #2
   1421c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14220:	add	r3, r2, r3
   14224:	ldrb	r3, [r3]
   14228:	strb	r3, [fp, #-38]	; 0xffffffda
   1422c:	ldr	r3, [fp, #-16]
   14230:	add	r3, r3, #2
   14234:	str	r3, [fp, #-16]
   14238:	ldr	r2, [fp, #-20]	; 0xffffffec
   1423c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14240:	cmp	r2, r3
   14244:	bcs	1425c <__assert_fail@plt+0x3310>
   14248:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1424c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14250:	add	r3, r2, r3
   14254:	mov	r2, #63	; 0x3f
   14258:	strb	r2, [r3]
   1425c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14260:	add	r3, r3, #1
   14264:	str	r3, [fp, #-20]	; 0xffffffec
   14268:	ldr	r2, [fp, #-20]	; 0xffffffec
   1426c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14270:	cmp	r2, r3
   14274:	bcs	1428c <__assert_fail@plt+0x3340>
   14278:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1427c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14280:	add	r3, r2, r3
   14284:	mov	r2, #34	; 0x22
   14288:	strb	r2, [r3]
   1428c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14290:	add	r3, r3, #1
   14294:	str	r3, [fp, #-20]	; 0xffffffec
   14298:	ldr	r2, [fp, #-20]	; 0xffffffec
   1429c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142a0:	cmp	r2, r3
   142a4:	bcs	142bc <__assert_fail@plt+0x3370>
   142a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   142b0:	add	r3, r2, r3
   142b4:	mov	r2, #34	; 0x22
   142b8:	strb	r2, [r3]
   142bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142c0:	add	r3, r3, #1
   142c4:	str	r3, [fp, #-20]	; 0xffffffec
   142c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   142cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142d0:	cmp	r2, r3
   142d4:	bcs	142ec <__assert_fail@plt+0x33a0>
   142d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e0:	add	r3, r2, r3
   142e4:	mov	r2, #63	; 0x3f
   142e8:	strb	r2, [r3]
   142ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f0:	add	r3, r3, #1
   142f4:	str	r3, [fp, #-20]	; 0xffffffec
   142f8:	b	14300 <__assert_fail@plt+0x33b4>
   142fc:	nop			; (mov r0, r0)
   14300:	b	1430c <__assert_fail@plt+0x33c0>
   14304:	nop			; (mov r0, r0)
   14308:	b	14b58 <__assert_fail@plt+0x3c0c>
   1430c:	nop			; (mov r0, r0)
   14310:	b	14b58 <__assert_fail@plt+0x3c0c>
   14314:	mov	r3, #97	; 0x61
   14318:	strb	r3, [fp, #-39]	; 0xffffffd9
   1431c:	b	143c8 <__assert_fail@plt+0x347c>
   14320:	mov	r3, #98	; 0x62
   14324:	strb	r3, [fp, #-39]	; 0xffffffd9
   14328:	b	143c8 <__assert_fail@plt+0x347c>
   1432c:	mov	r3, #102	; 0x66
   14330:	strb	r3, [fp, #-39]	; 0xffffffd9
   14334:	b	143c8 <__assert_fail@plt+0x347c>
   14338:	mov	r3, #110	; 0x6e
   1433c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14340:	b	143b0 <__assert_fail@plt+0x3464>
   14344:	mov	r3, #114	; 0x72
   14348:	strb	r3, [fp, #-39]	; 0xffffffd9
   1434c:	b	143b0 <__assert_fail@plt+0x3464>
   14350:	mov	r3, #116	; 0x74
   14354:	strb	r3, [fp, #-39]	; 0xffffffd9
   14358:	b	143b0 <__assert_fail@plt+0x3464>
   1435c:	mov	r3, #118	; 0x76
   14360:	strb	r3, [fp, #-39]	; 0xffffffd9
   14364:	b	143c8 <__assert_fail@plt+0x347c>
   14368:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1436c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14370:	ldr	r3, [fp, #4]
   14374:	cmp	r3, #2
   14378:	bne	1438c <__assert_fail@plt+0x3440>
   1437c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14380:	cmp	r3, #0
   14384:	beq	14ce0 <__assert_fail@plt+0x3d94>
   14388:	b	14fd4 <__assert_fail@plt+0x4088>
   1438c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14390:	cmp	r3, #0
   14394:	beq	143b0 <__assert_fail@plt+0x3464>
   14398:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1439c:	cmp	r3, #0
   143a0:	beq	143b0 <__assert_fail@plt+0x3464>
   143a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   143a8:	cmp	r3, #0
   143ac:	bne	14ce8 <__assert_fail@plt+0x3d9c>
   143b0:	ldr	r3, [fp, #4]
   143b4:	cmp	r3, #2
   143b8:	bne	143c8 <__assert_fail@plt+0x347c>
   143bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   143c0:	cmp	r3, #0
   143c4:	bne	14fa8 <__assert_fail@plt+0x405c>
   143c8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   143cc:	cmp	r3, #0
   143d0:	beq	14b34 <__assert_fail@plt+0x3be8>
   143d4:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   143d8:	strb	r3, [fp, #-38]	; 0xffffffda
   143dc:	b	14be0 <__assert_fail@plt+0x3c94>
   143e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   143e4:	cmn	r3, #1
   143e8:	bne	1440c <__assert_fail@plt+0x34c0>
   143ec:	ldr	r3, [fp, #-96]	; 0xffffffa0
   143f0:	add	r3, r3, #1
   143f4:	ldrb	r3, [r3]
   143f8:	cmp	r3, #0
   143fc:	movne	r3, #1
   14400:	moveq	r3, #0
   14404:	uxtb	r3, r3
   14408:	b	14420 <__assert_fail@plt+0x34d4>
   1440c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14410:	cmp	r3, #1
   14414:	movne	r3, #1
   14418:	moveq	r3, #0
   1441c:	uxtb	r3, r3
   14420:	cmp	r3, #0
   14424:	bne	14b3c <__assert_fail@plt+0x3bf0>
   14428:	ldr	r3, [fp, #-16]
   1442c:	cmp	r3, #0
   14430:	bne	14b44 <__assert_fail@plt+0x3bf8>
   14434:	mov	r3, #1
   14438:	strb	r3, [fp, #-42]	; 0xffffffd6
   1443c:	ldr	r3, [fp, #4]
   14440:	cmp	r3, #2
   14444:	bne	14b4c <__assert_fail@plt+0x3c00>
   14448:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1444c:	cmp	r3, #0
   14450:	beq	14b4c <__assert_fail@plt+0x3c00>
   14454:	b	14fd4 <__assert_fail@plt+0x4088>
   14458:	mov	r3, #1
   1445c:	strb	r3, [fp, #-36]	; 0xffffffdc
   14460:	mov	r3, #1
   14464:	strb	r3, [fp, #-42]	; 0xffffffd6
   14468:	ldr	r3, [fp, #4]
   1446c:	cmp	r3, #2
   14470:	bne	14b54 <__assert_fail@plt+0x3c08>
   14474:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14478:	cmp	r3, #0
   1447c:	bne	14fb0 <__assert_fail@plt+0x4064>
   14480:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14484:	cmp	r3, #0
   14488:	beq	144a8 <__assert_fail@plt+0x355c>
   1448c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14490:	cmp	r3, #0
   14494:	bne	144a8 <__assert_fail@plt+0x355c>
   14498:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1449c:	str	r3, [fp, #-24]	; 0xffffffe8
   144a0:	mov	r3, #0
   144a4:	str	r3, [fp, #-92]	; 0xffffffa4
   144a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   144ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144b0:	cmp	r2, r3
   144b4:	bcs	144cc <__assert_fail@plt+0x3580>
   144b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c0:	add	r3, r2, r3
   144c4:	mov	r2, #39	; 0x27
   144c8:	strb	r2, [r3]
   144cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d0:	add	r3, r3, #1
   144d4:	str	r3, [fp, #-20]	; 0xffffffec
   144d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   144dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144e0:	cmp	r2, r3
   144e4:	bcs	144fc <__assert_fail@plt+0x35b0>
   144e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   144f0:	add	r3, r2, r3
   144f4:	mov	r2, #92	; 0x5c
   144f8:	strb	r2, [r3]
   144fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14500:	add	r3, r3, #1
   14504:	str	r3, [fp, #-20]	; 0xffffffec
   14508:	ldr	r2, [fp, #-20]	; 0xffffffec
   1450c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14510:	cmp	r2, r3
   14514:	bcs	1452c <__assert_fail@plt+0x35e0>
   14518:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1451c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14520:	add	r3, r2, r3
   14524:	mov	r2, #39	; 0x27
   14528:	strb	r2, [r3]
   1452c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14530:	add	r3, r3, #1
   14534:	str	r3, [fp, #-20]	; 0xffffffec
   14538:	mov	r3, #0
   1453c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14540:	b	14b54 <__assert_fail@plt+0x3c08>
   14544:	mov	r3, #1
   14548:	strb	r3, [fp, #-42]	; 0xffffffd6
   1454c:	b	14b58 <__assert_fail@plt+0x3c0c>
   14550:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   14554:	cmp	r3, #0
   14558:	beq	14598 <__assert_fail@plt+0x364c>
   1455c:	mov	r3, #1
   14560:	str	r3, [fp, #-48]	; 0xffffffd0
   14564:	bl	10e38 <__ctype_b_loc@plt>
   14568:	mov	r3, r0
   1456c:	ldr	r2, [r3]
   14570:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14574:	lsl	r3, r3, #1
   14578:	add	r3, r2, r3
   1457c:	ldrh	r3, [r3]
   14580:	and	r3, r3, #16384	; 0x4000
   14584:	cmp	r3, #0
   14588:	movne	r3, #1
   1458c:	moveq	r3, #0
   14590:	strb	r3, [fp, #-49]	; 0xffffffcf
   14594:	b	147e4 <__assert_fail@plt+0x3898>
   14598:	sub	r3, fp, #76	; 0x4c
   1459c:	mov	r2, #8
   145a0:	mov	r1, #0
   145a4:	mov	r0, r3
   145a8:	bl	10e98 <memset@plt>
   145ac:	mov	r3, #0
   145b0:	str	r3, [fp, #-48]	; 0xffffffd0
   145b4:	mov	r3, #1
   145b8:	strb	r3, [fp, #-49]	; 0xffffffcf
   145bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   145c0:	cmn	r3, #1
   145c4:	bne	145d4 <__assert_fail@plt+0x3688>
   145c8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   145cc:	bl	10e5c <strlen@plt>
   145d0:	str	r0, [fp, #-100]	; 0xffffff9c
   145d4:	ldr	r2, [fp, #-16]
   145d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145dc:	add	r3, r2, r3
   145e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   145e4:	add	r1, r2, r3
   145e8:	ldr	r2, [fp, #-16]
   145ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   145f0:	add	r3, r2, r3
   145f4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   145f8:	sub	r2, r2, r3
   145fc:	sub	r3, fp, #76	; 0x4c
   14600:	sub	r0, fp, #80	; 0x50
   14604:	bl	17d94 <__assert_fail@plt+0x6e48>
   14608:	str	r0, [fp, #-64]	; 0xffffffc0
   1460c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14610:	cmp	r3, #0
   14614:	beq	147d8 <__assert_fail@plt+0x388c>
   14618:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1461c:	cmn	r3, #1
   14620:	bne	14630 <__assert_fail@plt+0x36e4>
   14624:	mov	r3, #0
   14628:	strb	r3, [fp, #-49]	; 0xffffffcf
   1462c:	b	147e4 <__assert_fail@plt+0x3898>
   14630:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14634:	cmn	r3, #2
   14638:	bne	14690 <__assert_fail@plt+0x3744>
   1463c:	mov	r3, #0
   14640:	strb	r3, [fp, #-49]	; 0xffffffcf
   14644:	b	14654 <__assert_fail@plt+0x3708>
   14648:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1464c:	add	r3, r3, #1
   14650:	str	r3, [fp, #-48]	; 0xffffffd0
   14654:	ldr	r2, [fp, #-16]
   14658:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1465c:	add	r2, r2, r3
   14660:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14664:	cmp	r2, r3
   14668:	bcs	147e0 <__assert_fail@plt+0x3894>
   1466c:	ldr	r2, [fp, #-16]
   14670:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14674:	add	r3, r2, r3
   14678:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1467c:	add	r3, r2, r3
   14680:	ldrb	r3, [r3]
   14684:	cmp	r3, #0
   14688:	bne	14648 <__assert_fail@plt+0x36fc>
   1468c:	b	147e0 <__assert_fail@plt+0x3894>
   14690:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14694:	cmp	r3, #0
   14698:	beq	1478c <__assert_fail@plt+0x3840>
   1469c:	ldr	r3, [fp, #4]
   146a0:	cmp	r3, #2
   146a4:	bne	1478c <__assert_fail@plt+0x3840>
   146a8:	mov	r3, #1
   146ac:	str	r3, [fp, #-56]	; 0xffffffc8
   146b0:	b	1477c <__assert_fail@plt+0x3830>
   146b4:	ldr	r2, [fp, #-16]
   146b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   146bc:	add	r2, r2, r3
   146c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   146c4:	add	r3, r2, r3
   146c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   146cc:	add	r3, r2, r3
   146d0:	ldrb	r3, [r3]
   146d4:	sub	r3, r3, #91	; 0x5b
   146d8:	cmp	r3, #33	; 0x21
   146dc:	ldrls	pc, [pc, r3, lsl #2]
   146e0:	b	1476c <__assert_fail@plt+0x3820>
   146e4:			; <UNDEFINED> instruction: 0x00014fb8
   146e8:			; <UNDEFINED> instruction: 0x00014fb8
   146ec:	andeq	r4, r1, ip, ror #14
   146f0:			; <UNDEFINED> instruction: 0x00014fb8
   146f4:	andeq	r4, r1, ip, ror #14
   146f8:			; <UNDEFINED> instruction: 0x00014fb8
   146fc:	andeq	r4, r1, ip, ror #14
   14700:	andeq	r4, r1, ip, ror #14
   14704:	andeq	r4, r1, ip, ror #14
   14708:	andeq	r4, r1, ip, ror #14
   1470c:	andeq	r4, r1, ip, ror #14
   14710:	andeq	r4, r1, ip, ror #14
   14714:	andeq	r4, r1, ip, ror #14
   14718:	andeq	r4, r1, ip, ror #14
   1471c:	andeq	r4, r1, ip, ror #14
   14720:	andeq	r4, r1, ip, ror #14
   14724:	andeq	r4, r1, ip, ror #14
   14728:	andeq	r4, r1, ip, ror #14
   1472c:	andeq	r4, r1, ip, ror #14
   14730:	andeq	r4, r1, ip, ror #14
   14734:	andeq	r4, r1, ip, ror #14
   14738:	andeq	r4, r1, ip, ror #14
   1473c:	andeq	r4, r1, ip, ror #14
   14740:	andeq	r4, r1, ip, ror #14
   14744:	andeq	r4, r1, ip, ror #14
   14748:	andeq	r4, r1, ip, ror #14
   1474c:	andeq	r4, r1, ip, ror #14
   14750:	andeq	r4, r1, ip, ror #14
   14754:	andeq	r4, r1, ip, ror #14
   14758:	andeq	r4, r1, ip, ror #14
   1475c:	andeq	r4, r1, ip, ror #14
   14760:	andeq	r4, r1, ip, ror #14
   14764:	andeq	r4, r1, ip, ror #14
   14768:			; <UNDEFINED> instruction: 0x00014fb8
   1476c:	nop			; (mov r0, r0)
   14770:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14774:	add	r3, r3, #1
   14778:	str	r3, [fp, #-56]	; 0xffffffc8
   1477c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14780:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14784:	cmp	r2, r3
   14788:	bcc	146b4 <__assert_fail@plt+0x3768>
   1478c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14790:	mov	r0, r3
   14794:	bl	10d9c <iswprint@plt>
   14798:	mov	r3, r0
   1479c:	cmp	r3, #0
   147a0:	bne	147ac <__assert_fail@plt+0x3860>
   147a4:	mov	r3, #0
   147a8:	strb	r3, [fp, #-49]	; 0xffffffcf
   147ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   147b0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   147b4:	add	r3, r2, r3
   147b8:	str	r3, [fp, #-48]	; 0xffffffd0
   147bc:	sub	r3, fp, #76	; 0x4c
   147c0:	mov	r0, r3
   147c4:	bl	10d54 <mbsinit@plt>
   147c8:	mov	r3, r0
   147cc:	cmp	r3, #0
   147d0:	beq	145d4 <__assert_fail@plt+0x3688>
   147d4:	b	147e4 <__assert_fail@plt+0x3898>
   147d8:	nop			; (mov r0, r0)
   147dc:	b	147e4 <__assert_fail@plt+0x3898>
   147e0:	nop			; (mov r0, r0)
   147e4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   147e8:	strb	r3, [fp, #-42]	; 0xffffffd6
   147ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   147f0:	cmp	r3, #1
   147f4:	bhi	14818 <__assert_fail@plt+0x38cc>
   147f8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   147fc:	cmp	r3, #0
   14800:	beq	14b58 <__assert_fail@plt+0x3c0c>
   14804:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14808:	eor	r3, r3, #1
   1480c:	uxtb	r3, r3
   14810:	cmp	r3, #0
   14814:	beq	14b58 <__assert_fail@plt+0x3c0c>
   14818:	ldr	r2, [fp, #-16]
   1481c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14820:	add	r3, r2, r3
   14824:	str	r3, [fp, #-68]	; 0xffffffbc
   14828:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1482c:	cmp	r3, #0
   14830:	beq	149f0 <__assert_fail@plt+0x3aa4>
   14834:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14838:	eor	r3, r3, #1
   1483c:	uxtb	r3, r3
   14840:	cmp	r3, #0
   14844:	beq	149f0 <__assert_fail@plt+0x3aa4>
   14848:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1484c:	cmp	r3, #0
   14850:	bne	14fc0 <__assert_fail@plt+0x4074>
   14854:	mov	r3, #1
   14858:	strb	r3, [fp, #-41]	; 0xffffffd7
   1485c:	ldr	r3, [fp, #4]
   14860:	cmp	r3, #2
   14864:	bne	14914 <__assert_fail@plt+0x39c8>
   14868:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1486c:	eor	r3, r3, #1
   14870:	uxtb	r3, r3
   14874:	cmp	r3, #0
   14878:	beq	14914 <__assert_fail@plt+0x39c8>
   1487c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14880:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14884:	cmp	r2, r3
   14888:	bcs	148a0 <__assert_fail@plt+0x3954>
   1488c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14890:	ldr	r3, [fp, #-20]	; 0xffffffec
   14894:	add	r3, r2, r3
   14898:	mov	r2, #39	; 0x27
   1489c:	strb	r2, [r3]
   148a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a4:	add	r3, r3, #1
   148a8:	str	r3, [fp, #-20]	; 0xffffffec
   148ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   148b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   148b4:	cmp	r2, r3
   148b8:	bcs	148d0 <__assert_fail@plt+0x3984>
   148bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148c4:	add	r3, r2, r3
   148c8:	mov	r2, #36	; 0x24
   148cc:	strb	r2, [r3]
   148d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148d4:	add	r3, r3, #1
   148d8:	str	r3, [fp, #-20]	; 0xffffffec
   148dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   148e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   148e4:	cmp	r2, r3
   148e8:	bcs	14900 <__assert_fail@plt+0x39b4>
   148ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148f4:	add	r3, r2, r3
   148f8:	mov	r2, #39	; 0x27
   148fc:	strb	r2, [r3]
   14900:	ldr	r3, [fp, #-20]	; 0xffffffec
   14904:	add	r3, r3, #1
   14908:	str	r3, [fp, #-20]	; 0xffffffec
   1490c:	mov	r3, #1
   14910:	strb	r3, [fp, #-35]	; 0xffffffdd
   14914:	ldr	r2, [fp, #-20]	; 0xffffffec
   14918:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1491c:	cmp	r2, r3
   14920:	bcs	14938 <__assert_fail@plt+0x39ec>
   14924:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1492c:	add	r3, r2, r3
   14930:	mov	r2, #92	; 0x5c
   14934:	strb	r2, [r3]
   14938:	ldr	r3, [fp, #-20]	; 0xffffffec
   1493c:	add	r3, r3, #1
   14940:	str	r3, [fp, #-20]	; 0xffffffec
   14944:	ldr	r2, [fp, #-20]	; 0xffffffec
   14948:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1494c:	cmp	r2, r3
   14950:	bcs	14978 <__assert_fail@plt+0x3a2c>
   14954:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1495c:	add	r3, r2, r3
   14960:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14964:	lsr	r2, r2, #6
   14968:	uxtb	r2, r2
   1496c:	add	r2, r2, #48	; 0x30
   14970:	uxtb	r2, r2
   14974:	strb	r2, [r3]
   14978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1497c:	add	r3, r3, #1
   14980:	str	r3, [fp, #-20]	; 0xffffffec
   14984:	ldr	r2, [fp, #-20]	; 0xffffffec
   14988:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1498c:	cmp	r2, r3
   14990:	bcs	149c0 <__assert_fail@plt+0x3a74>
   14994:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14998:	ldr	r3, [fp, #-20]	; 0xffffffec
   1499c:	add	r3, r2, r3
   149a0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   149a4:	lsr	r2, r2, #3
   149a8:	uxtb	r2, r2
   149ac:	and	r2, r2, #7
   149b0:	uxtb	r2, r2
   149b4:	add	r2, r2, #48	; 0x30
   149b8:	uxtb	r2, r2
   149bc:	strb	r2, [r3]
   149c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149c4:	add	r3, r3, #1
   149c8:	str	r3, [fp, #-20]	; 0xffffffec
   149cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   149d0:	and	r3, r3, #7
   149d4:	uxtb	r3, r3
   149d8:	add	r3, r3, #48	; 0x30
   149dc:	strb	r3, [fp, #-38]	; 0xffffffda
   149e0:	b	14a34 <__assert_fail@plt+0x3ae8>
   149e4:	andeq	r9, r1, ip, lsl #10
   149e8:	andeq	r9, r1, r4, lsl r5
   149ec:	andeq	r9, r1, r0, lsl r5
   149f0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   149f4:	cmp	r3, #0
   149f8:	beq	14a34 <__assert_fail@plt+0x3ae8>
   149fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a04:	cmp	r2, r3
   14a08:	bcs	14a20 <__assert_fail@plt+0x3ad4>
   14a0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a14:	add	r3, r2, r3
   14a18:	mov	r2, #92	; 0x5c
   14a1c:	strb	r2, [r3]
   14a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a24:	add	r3, r3, #1
   14a28:	str	r3, [fp, #-20]	; 0xffffffec
   14a2c:	mov	r3, #0
   14a30:	strb	r3, [fp, #-40]	; 0xffffffd8
   14a34:	ldr	r3, [fp, #-16]
   14a38:	add	r2, r3, #1
   14a3c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14a40:	cmp	r2, r3
   14a44:	bcs	14b24 <__assert_fail@plt+0x3bd8>
   14a48:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14a4c:	cmp	r3, #0
   14a50:	beq	14ad0 <__assert_fail@plt+0x3b84>
   14a54:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14a58:	eor	r3, r3, #1
   14a5c:	uxtb	r3, r3
   14a60:	cmp	r3, #0
   14a64:	beq	14ad0 <__assert_fail@plt+0x3b84>
   14a68:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a70:	cmp	r2, r3
   14a74:	bcs	14a8c <__assert_fail@plt+0x3b40>
   14a78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a80:	add	r3, r2, r3
   14a84:	mov	r2, #39	; 0x27
   14a88:	strb	r2, [r3]
   14a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a90:	add	r3, r3, #1
   14a94:	str	r3, [fp, #-20]	; 0xffffffec
   14a98:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14aa0:	cmp	r2, r3
   14aa4:	bcs	14abc <__assert_fail@plt+0x3b70>
   14aa8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ab0:	add	r3, r2, r3
   14ab4:	mov	r2, #39	; 0x27
   14ab8:	strb	r2, [r3]
   14abc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ac0:	add	r3, r3, #1
   14ac4:	str	r3, [fp, #-20]	; 0xffffffec
   14ac8:	mov	r3, #0
   14acc:	strb	r3, [fp, #-35]	; 0xffffffdd
   14ad0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ad4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ad8:	cmp	r2, r3
   14adc:	bcs	14af4 <__assert_fail@plt+0x3ba8>
   14ae0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ae8:	add	r3, r2, r3
   14aec:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14af0:	strb	r2, [r3]
   14af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14af8:	add	r3, r3, #1
   14afc:	str	r3, [fp, #-20]	; 0xffffffec
   14b00:	ldr	r3, [fp, #-16]
   14b04:	add	r3, r3, #1
   14b08:	str	r3, [fp, #-16]
   14b0c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14b10:	ldr	r3, [fp, #-16]
   14b14:	add	r3, r2, r3
   14b18:	ldrb	r3, [r3]
   14b1c:	strb	r3, [fp, #-38]	; 0xffffffda
   14b20:	b	14828 <__assert_fail@plt+0x38dc>
   14b24:	nop			; (mov r0, r0)
   14b28:	b	14cf4 <__assert_fail@plt+0x3da8>
   14b2c:	nop			; (mov r0, r0)
   14b30:	b	14b58 <__assert_fail@plt+0x3c0c>
   14b34:	nop			; (mov r0, r0)
   14b38:	b	14b58 <__assert_fail@plt+0x3c0c>
   14b3c:	nop			; (mov r0, r0)
   14b40:	b	14b58 <__assert_fail@plt+0x3c0c>
   14b44:	nop			; (mov r0, r0)
   14b48:	b	14b58 <__assert_fail@plt+0x3c0c>
   14b4c:	nop			; (mov r0, r0)
   14b50:	b	14b58 <__assert_fail@plt+0x3c0c>
   14b54:	nop			; (mov r0, r0)
   14b58:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14b5c:	eor	r3, r3, #1
   14b60:	uxtb	r3, r3
   14b64:	cmp	r3, #0
   14b68:	bne	14b78 <__assert_fail@plt+0x3c2c>
   14b6c:	ldr	r3, [fp, #4]
   14b70:	cmp	r3, #2
   14b74:	bne	14b8c <__assert_fail@plt+0x3c40>
   14b78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14b7c:	eor	r3, r3, #1
   14b80:	uxtb	r3, r3
   14b84:	cmp	r3, #0
   14b88:	bne	14bcc <__assert_fail@plt+0x3c80>
   14b8c:	ldr	r3, [fp, #12]
   14b90:	cmp	r3, #0
   14b94:	beq	14bcc <__assert_fail@plt+0x3c80>
   14b98:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14b9c:	lsr	r3, r3, #5
   14ba0:	uxtb	r3, r3
   14ba4:	lsl	r3, r3, #2
   14ba8:	ldr	r2, [fp, #12]
   14bac:	add	r3, r2, r3
   14bb0:	ldr	r2, [r3]
   14bb4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14bb8:	and	r3, r3, #31
   14bbc:	lsr	r3, r2, r3
   14bc0:	and	r3, r3, #1
   14bc4:	cmp	r3, #0
   14bc8:	bne	14be0 <__assert_fail@plt+0x3c94>
   14bcc:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14bd0:	eor	r3, r3, #1
   14bd4:	uxtb	r3, r3
   14bd8:	cmp	r3, #0
   14bdc:	bne	14cf0 <__assert_fail@plt+0x3da4>
   14be0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14be4:	cmp	r3, #0
   14be8:	bne	14fc8 <__assert_fail@plt+0x407c>
   14bec:	mov	r3, #1
   14bf0:	strb	r3, [fp, #-41]	; 0xffffffd7
   14bf4:	ldr	r3, [fp, #4]
   14bf8:	cmp	r3, #2
   14bfc:	bne	14cac <__assert_fail@plt+0x3d60>
   14c00:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14c04:	eor	r3, r3, #1
   14c08:	uxtb	r3, r3
   14c0c:	cmp	r3, #0
   14c10:	beq	14cac <__assert_fail@plt+0x3d60>
   14c14:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c1c:	cmp	r2, r3
   14c20:	bcs	14c38 <__assert_fail@plt+0x3cec>
   14c24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c2c:	add	r3, r2, r3
   14c30:	mov	r2, #39	; 0x27
   14c34:	strb	r2, [r3]
   14c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c3c:	add	r3, r3, #1
   14c40:	str	r3, [fp, #-20]	; 0xffffffec
   14c44:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c4c:	cmp	r2, r3
   14c50:	bcs	14c68 <__assert_fail@plt+0x3d1c>
   14c54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c5c:	add	r3, r2, r3
   14c60:	mov	r2, #36	; 0x24
   14c64:	strb	r2, [r3]
   14c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c6c:	add	r3, r3, #1
   14c70:	str	r3, [fp, #-20]	; 0xffffffec
   14c74:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c7c:	cmp	r2, r3
   14c80:	bcs	14c98 <__assert_fail@plt+0x3d4c>
   14c84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c8c:	add	r3, r2, r3
   14c90:	mov	r2, #39	; 0x27
   14c94:	strb	r2, [r3]
   14c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c9c:	add	r3, r3, #1
   14ca0:	str	r3, [fp, #-20]	; 0xffffffec
   14ca4:	mov	r3, #1
   14ca8:	strb	r3, [fp, #-35]	; 0xffffffdd
   14cac:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14cb4:	cmp	r2, r3
   14cb8:	bcs	14cd0 <__assert_fail@plt+0x3d84>
   14cbc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cc4:	add	r3, r2, r3
   14cc8:	mov	r2, #92	; 0x5c
   14ccc:	strb	r2, [r3]
   14cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cd4:	add	r3, r3, #1
   14cd8:	str	r3, [fp, #-20]	; 0xffffffec
   14cdc:	b	14cf4 <__assert_fail@plt+0x3da8>
   14ce0:	nop			; (mov r0, r0)
   14ce4:	b	14cf4 <__assert_fail@plt+0x3da8>
   14ce8:	nop			; (mov r0, r0)
   14cec:	b	14cf4 <__assert_fail@plt+0x3da8>
   14cf0:	nop			; (mov r0, r0)
   14cf4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14cf8:	cmp	r3, #0
   14cfc:	beq	14d7c <__assert_fail@plt+0x3e30>
   14d00:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14d04:	eor	r3, r3, #1
   14d08:	uxtb	r3, r3
   14d0c:	cmp	r3, #0
   14d10:	beq	14d7c <__assert_fail@plt+0x3e30>
   14d14:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d1c:	cmp	r2, r3
   14d20:	bcs	14d38 <__assert_fail@plt+0x3dec>
   14d24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d2c:	add	r3, r2, r3
   14d30:	mov	r2, #39	; 0x27
   14d34:	strb	r2, [r3]
   14d38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d3c:	add	r3, r3, #1
   14d40:	str	r3, [fp, #-20]	; 0xffffffec
   14d44:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d4c:	cmp	r2, r3
   14d50:	bcs	14d68 <__assert_fail@plt+0x3e1c>
   14d54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d5c:	add	r3, r2, r3
   14d60:	mov	r2, #39	; 0x27
   14d64:	strb	r2, [r3]
   14d68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d6c:	add	r3, r3, #1
   14d70:	str	r3, [fp, #-20]	; 0xffffffec
   14d74:	mov	r3, #0
   14d78:	strb	r3, [fp, #-35]	; 0xffffffdd
   14d7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d84:	cmp	r2, r3
   14d88:	bcs	14da0 <__assert_fail@plt+0x3e54>
   14d8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d94:	add	r3, r2, r3
   14d98:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14d9c:	strb	r2, [r3]
   14da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14da4:	add	r3, r3, #1
   14da8:	str	r3, [fp, #-20]	; 0xffffffec
   14dac:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   14db0:	eor	r3, r3, #1
   14db4:	uxtb	r3, r3
   14db8:	cmp	r3, #0
   14dbc:	beq	14dc8 <__assert_fail@plt+0x3e7c>
   14dc0:	mov	r3, #0
   14dc4:	strb	r3, [fp, #-37]	; 0xffffffdb
   14dc8:	ldr	r3, [fp, #-16]
   14dcc:	add	r3, r3, #1
   14dd0:	str	r3, [fp, #-16]
   14dd4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14dd8:	cmn	r3, #1
   14ddc:	bne	14e04 <__assert_fail@plt+0x3eb8>
   14de0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14de4:	ldr	r3, [fp, #-16]
   14de8:	add	r3, r2, r3
   14dec:	ldrb	r3, [r3]
   14df0:	cmp	r3, #0
   14df4:	movne	r3, #1
   14df8:	moveq	r3, #0
   14dfc:	uxtb	r3, r3
   14e00:	b	14e1c <__assert_fail@plt+0x3ed0>
   14e04:	ldr	r2, [fp, #-16]
   14e08:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14e0c:	cmp	r2, r3
   14e10:	movne	r3, #1
   14e14:	moveq	r3, #0
   14e18:	uxtb	r3, r3
   14e1c:	cmp	r3, #0
   14e20:	bne	13c48 <__assert_fail@plt+0x2cfc>
   14e24:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e28:	cmp	r3, #0
   14e2c:	bne	14e48 <__assert_fail@plt+0x3efc>
   14e30:	ldr	r3, [fp, #4]
   14e34:	cmp	r3, #2
   14e38:	bne	14e48 <__assert_fail@plt+0x3efc>
   14e3c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e40:	cmp	r3, #0
   14e44:	bne	14fd0 <__assert_fail@plt+0x4084>
   14e48:	ldr	r3, [fp, #4]
   14e4c:	cmp	r3, #2
   14e50:	bne	14ef0 <__assert_fail@plt+0x3fa4>
   14e54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e58:	eor	r3, r3, #1
   14e5c:	uxtb	r3, r3
   14e60:	cmp	r3, #0
   14e64:	beq	14ef0 <__assert_fail@plt+0x3fa4>
   14e68:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14e6c:	cmp	r3, #0
   14e70:	beq	14ef0 <__assert_fail@plt+0x3fa4>
   14e74:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14e78:	cmp	r3, #0
   14e7c:	beq	14ec4 <__assert_fail@plt+0x3f78>
   14e80:	ldr	r3, [fp, #20]
   14e84:	str	r3, [sp, #16]
   14e88:	ldr	r3, [fp, #16]
   14e8c:	str	r3, [sp, #12]
   14e90:	ldr	r3, [fp, #12]
   14e94:	str	r3, [sp, #8]
   14e98:	ldr	r3, [fp, #8]
   14e9c:	str	r3, [sp, #4]
   14ea0:	mov	r3, #5
   14ea4:	str	r3, [sp]
   14ea8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14eac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14eb0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14eb4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14eb8:	bl	13998 <__assert_fail@plt+0x2a4c>
   14ebc:	mov	r3, r0
   14ec0:	b	15038 <__assert_fail@plt+0x40ec>
   14ec4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ec8:	cmp	r3, #0
   14ecc:	bne	14ef0 <__assert_fail@plt+0x3fa4>
   14ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ed4:	cmp	r3, #0
   14ed8:	beq	14ef0 <__assert_fail@plt+0x3fa4>
   14edc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ee0:	str	r3, [fp, #-92]	; 0xffffffa4
   14ee4:	mov	r3, #0
   14ee8:	str	r3, [fp, #-20]	; 0xffffffec
   14eec:	b	13a24 <__assert_fail@plt+0x2ad8>
   14ef0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ef4:	cmp	r3, #0
   14ef8:	beq	14f64 <__assert_fail@plt+0x4018>
   14efc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14f00:	eor	r3, r3, #1
   14f04:	uxtb	r3, r3
   14f08:	cmp	r3, #0
   14f0c:	beq	14f64 <__assert_fail@plt+0x4018>
   14f10:	b	14f54 <__assert_fail@plt+0x4008>
   14f14:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f1c:	cmp	r2, r3
   14f20:	bcs	14f3c <__assert_fail@plt+0x3ff0>
   14f24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f2c:	add	r3, r2, r3
   14f30:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14f34:	ldrb	r2, [r2]
   14f38:	strb	r2, [r3]
   14f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f40:	add	r3, r3, #1
   14f44:	str	r3, [fp, #-20]	; 0xffffffec
   14f48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f4c:	add	r3, r3, #1
   14f50:	str	r3, [fp, #-28]	; 0xffffffe4
   14f54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f58:	ldrb	r3, [r3]
   14f5c:	cmp	r3, #0
   14f60:	bne	14f14 <__assert_fail@plt+0x3fc8>
   14f64:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f6c:	cmp	r2, r3
   14f70:	bcs	14f88 <__assert_fail@plt+0x403c>
   14f74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f7c:	add	r3, r2, r3
   14f80:	mov	r2, #0
   14f84:	strb	r2, [r3]
   14f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f8c:	b	15038 <__assert_fail@plt+0x40ec>
   14f90:	nop			; (mov r0, r0)
   14f94:	b	14fd4 <__assert_fail@plt+0x4088>
   14f98:	nop			; (mov r0, r0)
   14f9c:	b	14fd4 <__assert_fail@plt+0x4088>
   14fa0:	nop			; (mov r0, r0)
   14fa4:	b	14fd4 <__assert_fail@plt+0x4088>
   14fa8:	nop			; (mov r0, r0)
   14fac:	b	14fd4 <__assert_fail@plt+0x4088>
   14fb0:	nop			; (mov r0, r0)
   14fb4:	b	14fd4 <__assert_fail@plt+0x4088>
   14fb8:	nop			; (mov r0, r0)
   14fbc:	b	14fd4 <__assert_fail@plt+0x4088>
   14fc0:	nop			; (mov r0, r0)
   14fc4:	b	14fd4 <__assert_fail@plt+0x4088>
   14fc8:	nop			; (mov r0, r0)
   14fcc:	b	14fd4 <__assert_fail@plt+0x4088>
   14fd0:	nop			; (mov r0, r0)
   14fd4:	ldr	r3, [fp, #4]
   14fd8:	cmp	r3, #2
   14fdc:	bne	14ff4 <__assert_fail@plt+0x40a8>
   14fe0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14fe4:	cmp	r3, #0
   14fe8:	beq	14ff4 <__assert_fail@plt+0x40a8>
   14fec:	mov	r3, #4
   14ff0:	str	r3, [fp, #4]
   14ff4:	ldr	r3, [fp, #8]
   14ff8:	bic	r3, r3, #2
   14ffc:	ldr	r2, [fp, #20]
   15000:	str	r2, [sp, #16]
   15004:	ldr	r2, [fp, #16]
   15008:	str	r2, [sp, #12]
   1500c:	mov	r2, #0
   15010:	str	r2, [sp, #8]
   15014:	str	r3, [sp, #4]
   15018:	ldr	r3, [fp, #4]
   1501c:	str	r3, [sp]
   15020:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15024:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15028:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1502c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15030:	bl	13998 <__assert_fail@plt+0x2a4c>
   15034:	mov	r3, r0
   15038:	mov	r0, r3
   1503c:	sub	sp, fp, #8
   15040:	pop	{r4, fp, pc}
   15044:	push	{fp, lr}
   15048:	add	fp, sp, #4
   1504c:	sub	sp, sp, #56	; 0x38
   15050:	str	r0, [fp, #-24]	; 0xffffffe8
   15054:	str	r1, [fp, #-28]	; 0xffffffe4
   15058:	str	r2, [fp, #-32]	; 0xffffffe0
   1505c:	str	r3, [fp, #-36]	; 0xffffffdc
   15060:	ldr	r3, [fp, #4]
   15064:	cmp	r3, #0
   15068:	beq	15074 <__assert_fail@plt+0x4128>
   1506c:	ldr	r3, [fp, #4]
   15070:	b	15078 <__assert_fail@plt+0x412c>
   15074:	ldr	r3, [pc, #132]	; 15100 <__assert_fail@plt+0x41b4>
   15078:	str	r3, [fp, #-8]
   1507c:	bl	10e80 <__errno_location@plt>
   15080:	mov	r3, r0
   15084:	ldr	r3, [r3]
   15088:	str	r3, [fp, #-12]
   1508c:	ldr	r3, [fp, #-8]
   15090:	ldr	r3, [r3]
   15094:	ldr	r2, [fp, #-8]
   15098:	ldr	r2, [r2, #4]
   1509c:	ldr	r1, [fp, #-8]
   150a0:	add	r1, r1, #8
   150a4:	ldr	r0, [fp, #-8]
   150a8:	ldr	r0, [r0, #40]	; 0x28
   150ac:	ldr	ip, [fp, #-8]
   150b0:	ldr	ip, [ip, #44]	; 0x2c
   150b4:	str	ip, [sp, #16]
   150b8:	str	r0, [sp, #12]
   150bc:	str	r1, [sp, #8]
   150c0:	str	r2, [sp, #4]
   150c4:	str	r3, [sp]
   150c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   150cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   150d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   150d8:	bl	13998 <__assert_fail@plt+0x2a4c>
   150dc:	str	r0, [fp, #-16]
   150e0:	bl	10e80 <__errno_location@plt>
   150e4:	mov	r2, r0
   150e8:	ldr	r3, [fp, #-12]
   150ec:	str	r3, [r2]
   150f0:	ldr	r3, [fp, #-16]
   150f4:	mov	r0, r3
   150f8:	sub	sp, fp, #4
   150fc:	pop	{fp, pc}
   15100:	andeq	sl, r2, ip, ror #2
   15104:	push	{fp, lr}
   15108:	add	fp, sp, #4
   1510c:	sub	sp, sp, #16
   15110:	str	r0, [fp, #-8]
   15114:	str	r1, [fp, #-12]
   15118:	str	r2, [fp, #-16]
   1511c:	ldr	r3, [fp, #-16]
   15120:	mov	r2, #0
   15124:	ldr	r1, [fp, #-12]
   15128:	ldr	r0, [fp, #-8]
   1512c:	bl	15140 <__assert_fail@plt+0x41f4>
   15130:	mov	r3, r0
   15134:	mov	r0, r3
   15138:	sub	sp, fp, #4
   1513c:	pop	{fp, pc}
   15140:	push	{fp, lr}
   15144:	add	fp, sp, #4
   15148:	sub	sp, sp, #64	; 0x40
   1514c:	str	r0, [fp, #-32]	; 0xffffffe0
   15150:	str	r1, [fp, #-36]	; 0xffffffdc
   15154:	str	r2, [fp, #-40]	; 0xffffffd8
   15158:	str	r3, [fp, #-44]	; 0xffffffd4
   1515c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15160:	cmp	r3, #0
   15164:	beq	15170 <__assert_fail@plt+0x4224>
   15168:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1516c:	b	15174 <__assert_fail@plt+0x4228>
   15170:	ldr	r3, [pc, #292]	; 1529c <__assert_fail@plt+0x4350>
   15174:	str	r3, [fp, #-8]
   15178:	bl	10e80 <__errno_location@plt>
   1517c:	mov	r3, r0
   15180:	ldr	r3, [r3]
   15184:	str	r3, [fp, #-12]
   15188:	ldr	r3, [fp, #-8]
   1518c:	ldr	r3, [r3, #4]
   15190:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15194:	cmp	r2, #0
   15198:	moveq	r2, #1
   1519c:	movne	r2, #0
   151a0:	uxtb	r2, r2
   151a4:	orr	r3, r3, r2
   151a8:	str	r3, [fp, #-16]
   151ac:	ldr	r3, [fp, #-8]
   151b0:	ldr	r3, [r3]
   151b4:	ldr	r2, [fp, #-8]
   151b8:	add	r2, r2, #8
   151bc:	ldr	r1, [fp, #-8]
   151c0:	ldr	r1, [r1, #40]	; 0x28
   151c4:	ldr	r0, [fp, #-8]
   151c8:	ldr	r0, [r0, #44]	; 0x2c
   151cc:	str	r0, [sp, #16]
   151d0:	str	r1, [sp, #12]
   151d4:	str	r2, [sp, #8]
   151d8:	ldr	r2, [fp, #-16]
   151dc:	str	r2, [sp, #4]
   151e0:	str	r3, [sp]
   151e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   151e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   151ec:	mov	r1, #0
   151f0:	mov	r0, #0
   151f4:	bl	13998 <__assert_fail@plt+0x2a4c>
   151f8:	mov	r3, r0
   151fc:	add	r3, r3, #1
   15200:	str	r3, [fp, #-20]	; 0xffffffec
   15204:	ldr	r0, [fp, #-20]	; 0xffffffec
   15208:	bl	164ec <__assert_fail@plt+0x55a0>
   1520c:	mov	r3, r0
   15210:	str	r3, [fp, #-24]	; 0xffffffe8
   15214:	ldr	r3, [fp, #-8]
   15218:	ldr	r3, [r3]
   1521c:	ldr	r2, [fp, #-8]
   15220:	add	r2, r2, #8
   15224:	ldr	r1, [fp, #-8]
   15228:	ldr	r1, [r1, #40]	; 0x28
   1522c:	ldr	r0, [fp, #-8]
   15230:	ldr	r0, [r0, #44]	; 0x2c
   15234:	str	r0, [sp, #16]
   15238:	str	r1, [sp, #12]
   1523c:	str	r2, [sp, #8]
   15240:	ldr	r2, [fp, #-16]
   15244:	str	r2, [sp, #4]
   15248:	str	r3, [sp]
   1524c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15250:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15254:	ldr	r1, [fp, #-20]	; 0xffffffec
   15258:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1525c:	bl	13998 <__assert_fail@plt+0x2a4c>
   15260:	bl	10e80 <__errno_location@plt>
   15264:	mov	r2, r0
   15268:	ldr	r3, [fp, #-12]
   1526c:	str	r3, [r2]
   15270:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15274:	cmp	r3, #0
   15278:	beq	1528c <__assert_fail@plt+0x4340>
   1527c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15280:	sub	r2, r3, #1
   15284:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15288:	str	r2, [r3]
   1528c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15290:	mov	r0, r3
   15294:	sub	sp, fp, #4
   15298:	pop	{fp, pc}
   1529c:	andeq	sl, r2, ip, ror #2
   152a0:	push	{fp, lr}
   152a4:	add	fp, sp, #4
   152a8:	sub	sp, sp, #8
   152ac:	ldr	r3, [pc, #196]	; 15378 <__assert_fail@plt+0x442c>
   152b0:	ldr	r3, [r3]
   152b4:	str	r3, [fp, #-12]
   152b8:	mov	r3, #1
   152bc:	str	r3, [fp, #-8]
   152c0:	b	152ec <__assert_fail@plt+0x43a0>
   152c4:	ldr	r3, [fp, #-8]
   152c8:	lsl	r3, r3, #3
   152cc:	ldr	r2, [fp, #-12]
   152d0:	add	r3, r2, r3
   152d4:	ldr	r3, [r3, #4]
   152d8:	mov	r0, r3
   152dc:	bl	131e0 <__assert_fail@plt+0x2294>
   152e0:	ldr	r3, [fp, #-8]
   152e4:	add	r3, r3, #1
   152e8:	str	r3, [fp, #-8]
   152ec:	ldr	r3, [pc, #136]	; 1537c <__assert_fail@plt+0x4430>
   152f0:	ldr	r3, [r3]
   152f4:	ldr	r2, [fp, #-8]
   152f8:	cmp	r2, r3
   152fc:	blt	152c4 <__assert_fail@plt+0x4378>
   15300:	ldr	r3, [fp, #-12]
   15304:	ldr	r3, [r3, #4]
   15308:	ldr	r2, [pc, #112]	; 15380 <__assert_fail@plt+0x4434>
   1530c:	cmp	r3, r2
   15310:	beq	1533c <__assert_fail@plt+0x43f0>
   15314:	ldr	r3, [fp, #-12]
   15318:	ldr	r3, [r3, #4]
   1531c:	mov	r0, r3
   15320:	bl	131e0 <__assert_fail@plt+0x2294>
   15324:	ldr	r3, [pc, #88]	; 15384 <__assert_fail@plt+0x4438>
   15328:	mov	r2, #256	; 0x100
   1532c:	str	r2, [r3]
   15330:	ldr	r3, [pc, #76]	; 15384 <__assert_fail@plt+0x4438>
   15334:	ldr	r2, [pc, #68]	; 15380 <__assert_fail@plt+0x4434>
   15338:	str	r2, [r3, #4]
   1533c:	ldr	r3, [fp, #-12]
   15340:	ldr	r2, [pc, #60]	; 15384 <__assert_fail@plt+0x4438>
   15344:	cmp	r3, r2
   15348:	beq	15360 <__assert_fail@plt+0x4414>
   1534c:	ldr	r0, [fp, #-12]
   15350:	bl	131e0 <__assert_fail@plt+0x2294>
   15354:	ldr	r3, [pc, #28]	; 15378 <__assert_fail@plt+0x442c>
   15358:	ldr	r2, [pc, #36]	; 15384 <__assert_fail@plt+0x4438>
   1535c:	str	r2, [r3]
   15360:	ldr	r3, [pc, #20]	; 1537c <__assert_fail@plt+0x4430>
   15364:	mov	r2, #1
   15368:	str	r2, [r3]
   1536c:	nop			; (mov r0, r0)
   15370:	sub	sp, fp, #4
   15374:	pop	{fp, pc}
   15378:	andeq	sl, r2, r4, lsl #2
   1537c:	strdeq	sl, [r2], -r8
   15380:	muleq	r2, ip, r1
   15384:	strdeq	sl, [r2], -ip
   15388:	push	{r4, fp, lr}
   1538c:	add	fp, sp, #8
   15390:	sub	sp, sp, #84	; 0x54
   15394:	str	r0, [fp, #-56]	; 0xffffffc8
   15398:	str	r1, [fp, #-60]	; 0xffffffc4
   1539c:	str	r2, [fp, #-64]	; 0xffffffc0
   153a0:	str	r3, [fp, #-68]	; 0xffffffbc
   153a4:	bl	10e80 <__errno_location@plt>
   153a8:	mov	r3, r0
   153ac:	ldr	r3, [r3]
   153b0:	str	r3, [fp, #-24]	; 0xffffffe8
   153b4:	ldr	r3, [pc, #640]	; 1563c <__assert_fail@plt+0x46f0>
   153b8:	ldr	r3, [r3]
   153bc:	str	r3, [fp, #-16]
   153c0:	mvn	r3, #-2147483648	; 0x80000000
   153c4:	str	r3, [fp, #-28]	; 0xffffffe4
   153c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   153cc:	cmp	r3, #0
   153d0:	blt	153e4 <__assert_fail@plt+0x4498>
   153d4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   153d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   153dc:	cmp	r2, r3
   153e0:	blt	153e8 <__assert_fail@plt+0x449c>
   153e4:	bl	10f34 <abort@plt>
   153e8:	ldr	r3, [pc, #592]	; 15640 <__assert_fail@plt+0x46f4>
   153ec:	ldr	r2, [r3]
   153f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   153f4:	cmp	r2, r3
   153f8:	bgt	154cc <__assert_fail@plt+0x4580>
   153fc:	ldr	r3, [fp, #-16]
   15400:	ldr	r2, [pc, #572]	; 15644 <__assert_fail@plt+0x46f8>
   15404:	cmp	r3, r2
   15408:	moveq	r3, #1
   1540c:	movne	r3, #0
   15410:	strb	r3, [fp, #-29]	; 0xffffffe3
   15414:	ldr	r3, [pc, #548]	; 15640 <__assert_fail@plt+0x46f4>
   15418:	ldr	r3, [r3]
   1541c:	str	r3, [fp, #-48]	; 0xffffffd0
   15420:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   15424:	cmp	r3, #0
   15428:	beq	15434 <__assert_fail@plt+0x44e8>
   1542c:	mov	r0, #0
   15430:	b	15438 <__assert_fail@plt+0x44ec>
   15434:	ldr	r0, [fp, #-16]
   15438:	ldr	r3, [pc, #512]	; 15640 <__assert_fail@plt+0x46f4>
   1543c:	ldr	r3, [r3]
   15440:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15444:	sub	r3, r2, r3
   15448:	add	r2, r3, #1
   1544c:	sub	r1, fp, #48	; 0x30
   15450:	mov	r3, #8
   15454:	str	r3, [sp]
   15458:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1545c:	bl	1680c <__assert_fail@plt+0x58c0>
   15460:	str	r0, [fp, #-16]
   15464:	ldr	r2, [pc, #464]	; 1563c <__assert_fail@plt+0x46f0>
   15468:	ldr	r3, [fp, #-16]
   1546c:	str	r3, [r2]
   15470:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   15474:	cmp	r3, #0
   15478:	beq	1548c <__assert_fail@plt+0x4540>
   1547c:	ldr	r3, [fp, #-16]
   15480:	ldr	r2, [pc, #444]	; 15644 <__assert_fail@plt+0x46f8>
   15484:	ldm	r2, {r0, r1}
   15488:	stm	r3, {r0, r1}
   1548c:	ldr	r3, [pc, #428]	; 15640 <__assert_fail@plt+0x46f4>
   15490:	ldr	r3, [r3]
   15494:	lsl	r3, r3, #3
   15498:	ldr	r2, [fp, #-16]
   1549c:	add	r0, r2, r3
   154a0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   154a4:	ldr	r3, [pc, #404]	; 15640 <__assert_fail@plt+0x46f4>
   154a8:	ldr	r3, [r3]
   154ac:	sub	r3, r2, r3
   154b0:	lsl	r3, r3, #3
   154b4:	mov	r2, r3
   154b8:	mov	r1, #0
   154bc:	bl	10e98 <memset@plt>
   154c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   154c4:	ldr	r2, [pc, #372]	; 15640 <__assert_fail@plt+0x46f4>
   154c8:	str	r3, [r2]
   154cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   154d0:	lsl	r3, r3, #3
   154d4:	ldr	r2, [fp, #-16]
   154d8:	add	r3, r2, r3
   154dc:	ldr	r3, [r3]
   154e0:	str	r3, [fp, #-36]	; 0xffffffdc
   154e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   154e8:	lsl	r3, r3, #3
   154ec:	ldr	r2, [fp, #-16]
   154f0:	add	r3, r2, r3
   154f4:	ldr	r3, [r3, #4]
   154f8:	str	r3, [fp, #-20]	; 0xffffffec
   154fc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15500:	ldr	r3, [r3, #4]
   15504:	orr	r3, r3, #1
   15508:	str	r3, [fp, #-40]	; 0xffffffd8
   1550c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15510:	ldr	r3, [r3]
   15514:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15518:	add	r2, r2, #8
   1551c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15520:	ldr	r1, [r1, #40]	; 0x28
   15524:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15528:	ldr	r0, [r0, #44]	; 0x2c
   1552c:	str	r0, [sp, #16]
   15530:	str	r1, [sp, #12]
   15534:	str	r2, [sp, #8]
   15538:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1553c:	str	r2, [sp, #4]
   15540:	str	r3, [sp]
   15544:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15548:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1554c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15550:	ldr	r0, [fp, #-20]	; 0xffffffec
   15554:	bl	13998 <__assert_fail@plt+0x2a4c>
   15558:	str	r0, [fp, #-44]	; 0xffffffd4
   1555c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15560:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15564:	cmp	r2, r3
   15568:	bhi	1561c <__assert_fail@plt+0x46d0>
   1556c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15570:	lsl	r3, r3, #3
   15574:	ldr	r2, [fp, #-16]
   15578:	add	r3, r2, r3
   1557c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15580:	add	r2, r2, #1
   15584:	str	r2, [fp, #-36]	; 0xffffffdc
   15588:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1558c:	str	r2, [r3]
   15590:	ldr	r3, [fp, #-20]	; 0xffffffec
   15594:	ldr	r2, [pc, #172]	; 15648 <__assert_fail@plt+0x46fc>
   15598:	cmp	r3, r2
   1559c:	beq	155a8 <__assert_fail@plt+0x465c>
   155a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   155a4:	bl	131e0 <__assert_fail@plt+0x2294>
   155a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   155ac:	lsl	r3, r3, #3
   155b0:	ldr	r2, [fp, #-16]
   155b4:	add	r4, r2, r3
   155b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   155bc:	bl	164ec <__assert_fail@plt+0x55a0>
   155c0:	mov	r3, r0
   155c4:	str	r3, [fp, #-20]	; 0xffffffec
   155c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   155cc:	str	r3, [r4, #4]
   155d0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   155d4:	ldr	r3, [r3]
   155d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   155dc:	add	r2, r2, #8
   155e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   155e4:	ldr	r1, [r1, #40]	; 0x28
   155e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   155ec:	ldr	r0, [r0, #44]	; 0x2c
   155f0:	str	r0, [sp, #16]
   155f4:	str	r1, [sp, #12]
   155f8:	str	r2, [sp, #8]
   155fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15600:	str	r2, [sp, #4]
   15604:	str	r3, [sp]
   15608:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1560c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15610:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15614:	ldr	r0, [fp, #-20]	; 0xffffffec
   15618:	bl	13998 <__assert_fail@plt+0x2a4c>
   1561c:	bl	10e80 <__errno_location@plt>
   15620:	mov	r2, r0
   15624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15628:	str	r3, [r2]
   1562c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15630:	mov	r0, r3
   15634:	sub	sp, fp, #8
   15638:	pop	{r4, fp, pc}
   1563c:	andeq	sl, r2, r4, lsl #2
   15640:	strdeq	sl, [r2], -r8
   15644:	strdeq	sl, [r2], -ip
   15648:	muleq	r2, ip, r1
   1564c:	push	{fp, lr}
   15650:	add	fp, sp, #4
   15654:	sub	sp, sp, #8
   15658:	str	r0, [fp, #-8]
   1565c:	str	r1, [fp, #-12]
   15660:	ldr	r3, [pc, #28]	; 15684 <__assert_fail@plt+0x4738>
   15664:	mvn	r2, #0
   15668:	ldr	r1, [fp, #-12]
   1566c:	ldr	r0, [fp, #-8]
   15670:	bl	15388 <__assert_fail@plt+0x443c>
   15674:	mov	r3, r0
   15678:	mov	r0, r3
   1567c:	sub	sp, fp, #4
   15680:	pop	{fp, pc}
   15684:	andeq	sl, r2, ip, ror #2
   15688:	push	{fp, lr}
   1568c:	add	fp, sp, #4
   15690:	sub	sp, sp, #16
   15694:	str	r0, [fp, #-8]
   15698:	str	r1, [fp, #-12]
   1569c:	str	r2, [fp, #-16]
   156a0:	ldr	r3, [pc, #28]	; 156c4 <__assert_fail@plt+0x4778>
   156a4:	ldr	r2, [fp, #-16]
   156a8:	ldr	r1, [fp, #-12]
   156ac:	ldr	r0, [fp, #-8]
   156b0:	bl	15388 <__assert_fail@plt+0x443c>
   156b4:	mov	r3, r0
   156b8:	mov	r0, r3
   156bc:	sub	sp, fp, #4
   156c0:	pop	{fp, pc}
   156c4:	andeq	sl, r2, ip, ror #2
   156c8:	push	{fp, lr}
   156cc:	add	fp, sp, #4
   156d0:	sub	sp, sp, #8
   156d4:	str	r0, [fp, #-8]
   156d8:	ldr	r1, [fp, #-8]
   156dc:	mov	r0, #0
   156e0:	bl	1564c <__assert_fail@plt+0x4700>
   156e4:	mov	r3, r0
   156e8:	mov	r0, r3
   156ec:	sub	sp, fp, #4
   156f0:	pop	{fp, pc}
   156f4:	push	{fp, lr}
   156f8:	add	fp, sp, #4
   156fc:	sub	sp, sp, #8
   15700:	str	r0, [fp, #-8]
   15704:	str	r1, [fp, #-12]
   15708:	ldr	r2, [fp, #-12]
   1570c:	ldr	r1, [fp, #-8]
   15710:	mov	r0, #0
   15714:	bl	15688 <__assert_fail@plt+0x473c>
   15718:	mov	r3, r0
   1571c:	mov	r0, r3
   15720:	sub	sp, fp, #4
   15724:	pop	{fp, pc}
   15728:	push	{fp, lr}
   1572c:	add	fp, sp, #4
   15730:	sub	sp, sp, #64	; 0x40
   15734:	str	r0, [fp, #-56]	; 0xffffffc8
   15738:	str	r1, [fp, #-60]	; 0xffffffc4
   1573c:	str	r2, [fp, #-64]	; 0xffffffc0
   15740:	sub	r3, fp, #52	; 0x34
   15744:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15748:	mov	r0, r3
   1574c:	bl	13834 <__assert_fail@plt+0x28e8>
   15750:	sub	r3, fp, #52	; 0x34
   15754:	mvn	r2, #0
   15758:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1575c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15760:	bl	15388 <__assert_fail@plt+0x443c>
   15764:	mov	r3, r0
   15768:	mov	r0, r3
   1576c:	sub	sp, fp, #4
   15770:	pop	{fp, pc}
   15774:	push	{fp, lr}
   15778:	add	fp, sp, #4
   1577c:	sub	sp, sp, #64	; 0x40
   15780:	str	r0, [fp, #-56]	; 0xffffffc8
   15784:	str	r1, [fp, #-60]	; 0xffffffc4
   15788:	str	r2, [fp, #-64]	; 0xffffffc0
   1578c:	str	r3, [fp, #-68]	; 0xffffffbc
   15790:	sub	r3, fp, #52	; 0x34
   15794:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15798:	mov	r0, r3
   1579c:	bl	13834 <__assert_fail@plt+0x28e8>
   157a0:	sub	r3, fp, #52	; 0x34
   157a4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   157a8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   157ac:	ldr	r0, [fp, #-56]	; 0xffffffc8
   157b0:	bl	15388 <__assert_fail@plt+0x443c>
   157b4:	mov	r3, r0
   157b8:	mov	r0, r3
   157bc:	sub	sp, fp, #4
   157c0:	pop	{fp, pc}
   157c4:	push	{fp, lr}
   157c8:	add	fp, sp, #4
   157cc:	sub	sp, sp, #8
   157d0:	str	r0, [fp, #-8]
   157d4:	str	r1, [fp, #-12]
   157d8:	ldr	r2, [fp, #-12]
   157dc:	ldr	r1, [fp, #-8]
   157e0:	mov	r0, #0
   157e4:	bl	15728 <__assert_fail@plt+0x47dc>
   157e8:	mov	r3, r0
   157ec:	mov	r0, r3
   157f0:	sub	sp, fp, #4
   157f4:	pop	{fp, pc}
   157f8:	push	{fp, lr}
   157fc:	add	fp, sp, #4
   15800:	sub	sp, sp, #16
   15804:	str	r0, [fp, #-8]
   15808:	str	r1, [fp, #-12]
   1580c:	str	r2, [fp, #-16]
   15810:	ldr	r3, [fp, #-16]
   15814:	ldr	r2, [fp, #-12]
   15818:	ldr	r1, [fp, #-8]
   1581c:	mov	r0, #0
   15820:	bl	15774 <__assert_fail@plt+0x4828>
   15824:	mov	r3, r0
   15828:	mov	r0, r3
   1582c:	sub	sp, fp, #4
   15830:	pop	{fp, pc}
   15834:	push	{fp, lr}
   15838:	add	fp, sp, #4
   1583c:	sub	sp, sp, #64	; 0x40
   15840:	str	r0, [fp, #-56]	; 0xffffffc8
   15844:	str	r1, [fp, #-60]	; 0xffffffc4
   15848:	mov	r3, r2
   1584c:	strb	r3, [fp, #-61]	; 0xffffffc3
   15850:	ldr	r3, [pc, #84]	; 158ac <__assert_fail@plt+0x4960>
   15854:	sub	ip, fp, #52	; 0x34
   15858:	mov	lr, r3
   1585c:	ldm	lr!, {r0, r1, r2, r3}
   15860:	stmia	ip!, {r0, r1, r2, r3}
   15864:	ldm	lr!, {r0, r1, r2, r3}
   15868:	stmia	ip!, {r0, r1, r2, r3}
   1586c:	ldm	lr, {r0, r1, r2, r3}
   15870:	stm	ip, {r0, r1, r2, r3}
   15874:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15878:	sub	r3, fp, #52	; 0x34
   1587c:	mov	r2, #1
   15880:	mov	r0, r3
   15884:	bl	136a0 <__assert_fail@plt+0x2754>
   15888:	sub	r3, fp, #52	; 0x34
   1588c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15890:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15894:	mov	r0, #0
   15898:	bl	15388 <__assert_fail@plt+0x443c>
   1589c:	mov	r3, r0
   158a0:	mov	r0, r3
   158a4:	sub	sp, fp, #4
   158a8:	pop	{fp, pc}
   158ac:	andeq	sl, r2, ip, ror #2
   158b0:	push	{fp, lr}
   158b4:	add	fp, sp, #4
   158b8:	sub	sp, sp, #8
   158bc:	str	r0, [fp, #-8]
   158c0:	mov	r3, r1
   158c4:	strb	r3, [fp, #-9]
   158c8:	ldrb	r3, [fp, #-9]
   158cc:	mov	r2, r3
   158d0:	mvn	r1, #0
   158d4:	ldr	r0, [fp, #-8]
   158d8:	bl	15834 <__assert_fail@plt+0x48e8>
   158dc:	mov	r3, r0
   158e0:	mov	r0, r3
   158e4:	sub	sp, fp, #4
   158e8:	pop	{fp, pc}
   158ec:	push	{fp, lr}
   158f0:	add	fp, sp, #4
   158f4:	sub	sp, sp, #8
   158f8:	str	r0, [fp, #-8]
   158fc:	mov	r1, #58	; 0x3a
   15900:	ldr	r0, [fp, #-8]
   15904:	bl	158b0 <__assert_fail@plt+0x4964>
   15908:	mov	r3, r0
   1590c:	mov	r0, r3
   15910:	sub	sp, fp, #4
   15914:	pop	{fp, pc}
   15918:	push	{fp, lr}
   1591c:	add	fp, sp, #4
   15920:	sub	sp, sp, #8
   15924:	str	r0, [fp, #-8]
   15928:	str	r1, [fp, #-12]
   1592c:	mov	r2, #58	; 0x3a
   15930:	ldr	r1, [fp, #-12]
   15934:	ldr	r0, [fp, #-8]
   15938:	bl	15834 <__assert_fail@plt+0x48e8>
   1593c:	mov	r3, r0
   15940:	mov	r0, r3
   15944:	sub	sp, fp, #4
   15948:	pop	{fp, pc}
   1594c:	push	{fp, lr}
   15950:	add	fp, sp, #4
   15954:	sub	sp, sp, #112	; 0x70
   15958:	str	r0, [fp, #-56]	; 0xffffffc8
   1595c:	str	r1, [fp, #-60]	; 0xffffffc4
   15960:	str	r2, [fp, #-64]	; 0xffffffc0
   15964:	sub	r3, fp, #116	; 0x74
   15968:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1596c:	mov	r0, r3
   15970:	bl	13834 <__assert_fail@plt+0x28e8>
   15974:	sub	ip, fp, #52	; 0x34
   15978:	sub	lr, fp, #116	; 0x74
   1597c:	ldm	lr!, {r0, r1, r2, r3}
   15980:	stmia	ip!, {r0, r1, r2, r3}
   15984:	ldm	lr!, {r0, r1, r2, r3}
   15988:	stmia	ip!, {r0, r1, r2, r3}
   1598c:	ldm	lr, {r0, r1, r2, r3}
   15990:	stm	ip, {r0, r1, r2, r3}
   15994:	sub	r3, fp, #52	; 0x34
   15998:	mov	r2, #1
   1599c:	mov	r1, #58	; 0x3a
   159a0:	mov	r0, r3
   159a4:	bl	136a0 <__assert_fail@plt+0x2754>
   159a8:	sub	r3, fp, #52	; 0x34
   159ac:	mvn	r2, #0
   159b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   159b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   159b8:	bl	15388 <__assert_fail@plt+0x443c>
   159bc:	mov	r3, r0
   159c0:	mov	r0, r3
   159c4:	sub	sp, fp, #4
   159c8:	pop	{fp, pc}
   159cc:	push	{fp, lr}
   159d0:	add	fp, sp, #4
   159d4:	sub	sp, sp, #24
   159d8:	str	r0, [fp, #-8]
   159dc:	str	r1, [fp, #-12]
   159e0:	str	r2, [fp, #-16]
   159e4:	str	r3, [fp, #-20]	; 0xffffffec
   159e8:	mvn	r3, #0
   159ec:	str	r3, [sp]
   159f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   159f4:	ldr	r2, [fp, #-16]
   159f8:	ldr	r1, [fp, #-12]
   159fc:	ldr	r0, [fp, #-8]
   15a00:	bl	15a14 <__assert_fail@plt+0x4ac8>
   15a04:	mov	r3, r0
   15a08:	mov	r0, r3
   15a0c:	sub	sp, fp, #4
   15a10:	pop	{fp, pc}
   15a14:	push	{fp, lr}
   15a18:	add	fp, sp, #4
   15a1c:	sub	sp, sp, #64	; 0x40
   15a20:	str	r0, [fp, #-56]	; 0xffffffc8
   15a24:	str	r1, [fp, #-60]	; 0xffffffc4
   15a28:	str	r2, [fp, #-64]	; 0xffffffc0
   15a2c:	str	r3, [fp, #-68]	; 0xffffffbc
   15a30:	ldr	r3, [pc, #84]	; 15a8c <__assert_fail@plt+0x4b40>
   15a34:	sub	ip, fp, #52	; 0x34
   15a38:	mov	lr, r3
   15a3c:	ldm	lr!, {r0, r1, r2, r3}
   15a40:	stmia	ip!, {r0, r1, r2, r3}
   15a44:	ldm	lr!, {r0, r1, r2, r3}
   15a48:	stmia	ip!, {r0, r1, r2, r3}
   15a4c:	ldm	lr, {r0, r1, r2, r3}
   15a50:	stm	ip, {r0, r1, r2, r3}
   15a54:	sub	r3, fp, #52	; 0x34
   15a58:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15a5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15a60:	mov	r0, r3
   15a64:	bl	137b8 <__assert_fail@plt+0x286c>
   15a68:	sub	r3, fp, #52	; 0x34
   15a6c:	ldr	r2, [fp, #4]
   15a70:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15a74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15a78:	bl	15388 <__assert_fail@plt+0x443c>
   15a7c:	mov	r3, r0
   15a80:	mov	r0, r3
   15a84:	sub	sp, fp, #4
   15a88:	pop	{fp, pc}
   15a8c:	andeq	sl, r2, ip, ror #2
   15a90:	push	{fp, lr}
   15a94:	add	fp, sp, #4
   15a98:	sub	sp, sp, #16
   15a9c:	str	r0, [fp, #-8]
   15aa0:	str	r1, [fp, #-12]
   15aa4:	str	r2, [fp, #-16]
   15aa8:	ldr	r3, [fp, #-16]
   15aac:	ldr	r2, [fp, #-12]
   15ab0:	ldr	r1, [fp, #-8]
   15ab4:	mov	r0, #0
   15ab8:	bl	159cc <__assert_fail@plt+0x4a80>
   15abc:	mov	r3, r0
   15ac0:	mov	r0, r3
   15ac4:	sub	sp, fp, #4
   15ac8:	pop	{fp, pc}
   15acc:	push	{fp, lr}
   15ad0:	add	fp, sp, #4
   15ad4:	sub	sp, sp, #24
   15ad8:	str	r0, [fp, #-8]
   15adc:	str	r1, [fp, #-12]
   15ae0:	str	r2, [fp, #-16]
   15ae4:	str	r3, [fp, #-20]	; 0xffffffec
   15ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15aec:	str	r3, [sp]
   15af0:	ldr	r3, [fp, #-16]
   15af4:	ldr	r2, [fp, #-12]
   15af8:	ldr	r1, [fp, #-8]
   15afc:	mov	r0, #0
   15b00:	bl	15a14 <__assert_fail@plt+0x4ac8>
   15b04:	mov	r3, r0
   15b08:	mov	r0, r3
   15b0c:	sub	sp, fp, #4
   15b10:	pop	{fp, pc}
   15b14:	push	{fp, lr}
   15b18:	add	fp, sp, #4
   15b1c:	sub	sp, sp, #16
   15b20:	str	r0, [fp, #-8]
   15b24:	str	r1, [fp, #-12]
   15b28:	str	r2, [fp, #-16]
   15b2c:	ldr	r3, [pc, #28]	; 15b50 <__assert_fail@plt+0x4c04>
   15b30:	ldr	r2, [fp, #-16]
   15b34:	ldr	r1, [fp, #-12]
   15b38:	ldr	r0, [fp, #-8]
   15b3c:	bl	15388 <__assert_fail@plt+0x443c>
   15b40:	mov	r3, r0
   15b44:	mov	r0, r3
   15b48:	sub	sp, fp, #4
   15b4c:	pop	{fp, pc}
   15b50:	andeq	sl, r2, r8, lsl #2
   15b54:	push	{fp, lr}
   15b58:	add	fp, sp, #4
   15b5c:	sub	sp, sp, #8
   15b60:	str	r0, [fp, #-8]
   15b64:	str	r1, [fp, #-12]
   15b68:	ldr	r2, [fp, #-12]
   15b6c:	ldr	r1, [fp, #-8]
   15b70:	mov	r0, #0
   15b74:	bl	15b14 <__assert_fail@plt+0x4bc8>
   15b78:	mov	r3, r0
   15b7c:	mov	r0, r3
   15b80:	sub	sp, fp, #4
   15b84:	pop	{fp, pc}
   15b88:	push	{fp, lr}
   15b8c:	add	fp, sp, #4
   15b90:	sub	sp, sp, #8
   15b94:	str	r0, [fp, #-8]
   15b98:	str	r1, [fp, #-12]
   15b9c:	mvn	r2, #0
   15ba0:	ldr	r1, [fp, #-12]
   15ba4:	ldr	r0, [fp, #-8]
   15ba8:	bl	15b14 <__assert_fail@plt+0x4bc8>
   15bac:	mov	r3, r0
   15bb0:	mov	r0, r3
   15bb4:	sub	sp, fp, #4
   15bb8:	pop	{fp, pc}
   15bbc:	push	{fp, lr}
   15bc0:	add	fp, sp, #4
   15bc4:	sub	sp, sp, #8
   15bc8:	str	r0, [fp, #-8]
   15bcc:	ldr	r1, [fp, #-8]
   15bd0:	mov	r0, #0
   15bd4:	bl	15b88 <__assert_fail@plt+0x4c3c>
   15bd8:	mov	r3, r0
   15bdc:	mov	r0, r3
   15be0:	sub	sp, fp, #4
   15be4:	pop	{fp, pc}
   15be8:	push	{fp, lr}
   15bec:	add	fp, sp, #4
   15bf0:	sub	sp, sp, #24
   15bf4:	str	r0, [fp, #-16]
   15bf8:	str	r1, [fp, #-20]	; 0xffffffec
   15bfc:	str	r2, [fp, #-24]	; 0xffffffe8
   15c00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c04:	cmp	r3, #0
   15c08:	beq	15c44 <__assert_fail@plt+0x4cf8>
   15c0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c10:	mvn	r0, #0
   15c14:	bl	18538 <__assert_fail@plt+0x75ec>
   15c18:	mov	r3, r0
   15c1c:	mov	r2, r3
   15c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c24:	cmp	r2, r3
   15c28:	bcs	15c44 <__assert_fail@plt+0x4cf8>
   15c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c30:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c34:	mul	r3, r2, r3
   15c38:	str	r3, [fp, #-8]
   15c3c:	mov	r3, #1
   15c40:	b	15c58 <__assert_fail@plt+0x4d0c>
   15c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c4c:	mul	r3, r2, r3
   15c50:	str	r3, [fp, #-8]
   15c54:	mov	r3, #0
   15c58:	cmp	r3, #0
   15c5c:	beq	15c78 <__assert_fail@plt+0x4d2c>
   15c60:	bl	10e80 <__errno_location@plt>
   15c64:	mov	r2, r0
   15c68:	mov	r3, #12
   15c6c:	str	r3, [r2]
   15c70:	mov	r3, #0
   15c74:	b	15c8c <__assert_fail@plt+0x4d40>
   15c78:	ldr	r3, [fp, #-8]
   15c7c:	mov	r1, r3
   15c80:	ldr	r0, [fp, #-16]
   15c84:	bl	17aa0 <__assert_fail@plt+0x6b54>
   15c88:	mov	r3, r0
   15c8c:	mov	r0, r3
   15c90:	sub	sp, fp, #4
   15c94:	pop	{fp, pc}
   15c98:	push	{r4, r5, r6, r7, fp, lr}
   15c9c:	add	fp, sp, #20
   15ca0:	sub	sp, sp, #48	; 0x30
   15ca4:	str	r0, [fp, #-24]	; 0xffffffe8
   15ca8:	str	r1, [fp, #-28]	; 0xffffffe4
   15cac:	str	r2, [fp, #-32]	; 0xffffffe0
   15cb0:	str	r3, [fp, #-36]	; 0xffffffdc
   15cb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15cb8:	cmp	r3, #0
   15cbc:	beq	15ce0 <__assert_fail@plt+0x4d94>
   15cc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cc4:	str	r3, [sp]
   15cc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ccc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15cd0:	ldr	r1, [pc, #1260]	; 161c4 <__assert_fail@plt+0x5278>
   15cd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15cd8:	bl	10e74 <fprintf@plt>
   15cdc:	b	15cf4 <__assert_fail@plt+0x4da8>
   15ce0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ce4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ce8:	ldr	r1, [pc, #1240]	; 161c8 <__assert_fail@plt+0x527c>
   15cec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15cf0:	bl	10e74 <fprintf@plt>
   15cf4:	ldr	r0, [pc, #1232]	; 161cc <__assert_fail@plt+0x5280>
   15cf8:	bl	10e50 <gettext@plt>
   15cfc:	mov	r2, r0
   15d00:	ldr	r3, [pc, #1224]	; 161d0 <__assert_fail@plt+0x5284>
   15d04:	ldr	r1, [pc, #1224]	; 161d4 <__assert_fail@plt+0x5288>
   15d08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d0c:	bl	10e74 <fprintf@plt>
   15d10:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15d14:	mov	r0, #10
   15d18:	bl	10d78 <fputc_unlocked@plt>
   15d1c:	ldr	r0, [pc, #1204]	; 161d8 <__assert_fail@plt+0x528c>
   15d20:	bl	10e50 <gettext@plt>
   15d24:	mov	r3, r0
   15d28:	ldr	r2, [pc, #1196]	; 161dc <__assert_fail@plt+0x5290>
   15d2c:	mov	r1, r3
   15d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d34:	bl	10e74 <fprintf@plt>
   15d38:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15d3c:	mov	r0, #10
   15d40:	bl	10d78 <fputc_unlocked@plt>
   15d44:	ldr	r3, [fp, #8]
   15d48:	cmp	r3, #9
   15d4c:	ldrls	pc, [pc, r3, lsl #2]
   15d50:	b	1610c <__assert_fail@plt+0x51c0>
   15d54:			; <UNDEFINED> instruction: 0x000161b4
   15d58:	andeq	r5, r1, ip, ror sp
   15d5c:	andeq	r5, r1, r0, lsr #27
   15d60:	andeq	r5, r1, ip, asr #27
   15d64:	andeq	r5, r1, ip, lsl #28
   15d68:	andeq	r5, r1, r4, ror #28
   15d6c:	andeq	r5, r1, ip, asr #29
   15d70:	andeq	r5, r1, r4, asr #30
   15d74:	andeq	r5, r1, ip, asr #31
   15d78:	andeq	r6, r1, r4, rrx
   15d7c:	ldr	r0, [pc, #1116]	; 161e0 <__assert_fail@plt+0x5294>
   15d80:	bl	10e50 <gettext@plt>
   15d84:	mov	r1, r0
   15d88:	ldr	r3, [fp, #4]
   15d8c:	ldr	r3, [r3]
   15d90:	mov	r2, r3
   15d94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d98:	bl	10e74 <fprintf@plt>
   15d9c:	b	161b8 <__assert_fail@plt+0x526c>
   15da0:	ldr	r0, [pc, #1084]	; 161e4 <__assert_fail@plt+0x5298>
   15da4:	bl	10e50 <gettext@plt>
   15da8:	mov	r1, r0
   15dac:	ldr	r3, [fp, #4]
   15db0:	ldr	r2, [r3]
   15db4:	ldr	r3, [fp, #4]
   15db8:	add	r3, r3, #4
   15dbc:	ldr	r3, [r3]
   15dc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15dc4:	bl	10e74 <fprintf@plt>
   15dc8:	b	161b8 <__assert_fail@plt+0x526c>
   15dcc:	ldr	r0, [pc, #1044]	; 161e8 <__assert_fail@plt+0x529c>
   15dd0:	bl	10e50 <gettext@plt>
   15dd4:	ldr	r3, [fp, #4]
   15dd8:	ldr	r2, [r3]
   15ddc:	ldr	r3, [fp, #4]
   15de0:	add	r3, r3, #4
   15de4:	ldr	r1, [r3]
   15de8:	ldr	r3, [fp, #4]
   15dec:	add	r3, r3, #8
   15df0:	ldr	r3, [r3]
   15df4:	str	r3, [sp]
   15df8:	mov	r3, r1
   15dfc:	mov	r1, r0
   15e00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e04:	bl	10e74 <fprintf@plt>
   15e08:	b	161b8 <__assert_fail@plt+0x526c>
   15e0c:	ldr	r0, [pc, #984]	; 161ec <__assert_fail@plt+0x52a0>
   15e10:	bl	10e50 <gettext@plt>
   15e14:	mov	ip, r0
   15e18:	ldr	r3, [fp, #4]
   15e1c:	ldr	r1, [r3]
   15e20:	ldr	r3, [fp, #4]
   15e24:	add	r3, r3, #4
   15e28:	ldr	r0, [r3]
   15e2c:	ldr	r3, [fp, #4]
   15e30:	add	r3, r3, #8
   15e34:	ldr	r3, [r3]
   15e38:	ldr	r2, [fp, #4]
   15e3c:	add	r2, r2, #12
   15e40:	ldr	r2, [r2]
   15e44:	str	r2, [sp, #4]
   15e48:	str	r3, [sp]
   15e4c:	mov	r3, r0
   15e50:	mov	r2, r1
   15e54:	mov	r1, ip
   15e58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e5c:	bl	10e74 <fprintf@plt>
   15e60:	b	161b8 <__assert_fail@plt+0x526c>
   15e64:	ldr	r0, [pc, #900]	; 161f0 <__assert_fail@plt+0x52a4>
   15e68:	bl	10e50 <gettext@plt>
   15e6c:	mov	lr, r0
   15e70:	ldr	r3, [fp, #4]
   15e74:	ldr	r0, [r3]
   15e78:	ldr	r3, [fp, #4]
   15e7c:	add	r3, r3, #4
   15e80:	ldr	ip, [r3]
   15e84:	ldr	r3, [fp, #4]
   15e88:	add	r3, r3, #8
   15e8c:	ldr	r3, [r3]
   15e90:	ldr	r2, [fp, #4]
   15e94:	add	r2, r2, #12
   15e98:	ldr	r2, [r2]
   15e9c:	ldr	r1, [fp, #4]
   15ea0:	add	r1, r1, #16
   15ea4:	ldr	r1, [r1]
   15ea8:	str	r1, [sp, #8]
   15eac:	str	r2, [sp, #4]
   15eb0:	str	r3, [sp]
   15eb4:	mov	r3, ip
   15eb8:	mov	r2, r0
   15ebc:	mov	r1, lr
   15ec0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ec4:	bl	10e74 <fprintf@plt>
   15ec8:	b	161b8 <__assert_fail@plt+0x526c>
   15ecc:	ldr	r0, [pc, #800]	; 161f4 <__assert_fail@plt+0x52a8>
   15ed0:	bl	10e50 <gettext@plt>
   15ed4:	mov	r4, r0
   15ed8:	ldr	r3, [fp, #4]
   15edc:	ldr	ip, [r3]
   15ee0:	ldr	r3, [fp, #4]
   15ee4:	add	r3, r3, #4
   15ee8:	ldr	lr, [r3]
   15eec:	ldr	r3, [fp, #4]
   15ef0:	add	r3, r3, #8
   15ef4:	ldr	r3, [r3]
   15ef8:	ldr	r2, [fp, #4]
   15efc:	add	r2, r2, #12
   15f00:	ldr	r2, [r2]
   15f04:	ldr	r1, [fp, #4]
   15f08:	add	r1, r1, #16
   15f0c:	ldr	r1, [r1]
   15f10:	ldr	r0, [fp, #4]
   15f14:	add	r0, r0, #20
   15f18:	ldr	r0, [r0]
   15f1c:	str	r0, [sp, #12]
   15f20:	str	r1, [sp, #8]
   15f24:	str	r2, [sp, #4]
   15f28:	str	r3, [sp]
   15f2c:	mov	r3, lr
   15f30:	mov	r2, ip
   15f34:	mov	r1, r4
   15f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f3c:	bl	10e74 <fprintf@plt>
   15f40:	b	161b8 <__assert_fail@plt+0x526c>
   15f44:	ldr	r0, [pc, #684]	; 161f8 <__assert_fail@plt+0x52ac>
   15f48:	bl	10e50 <gettext@plt>
   15f4c:	mov	r5, r0
   15f50:	ldr	r3, [fp, #4]
   15f54:	ldr	lr, [r3]
   15f58:	ldr	r3, [fp, #4]
   15f5c:	add	r3, r3, #4
   15f60:	ldr	r4, [r3]
   15f64:	ldr	r3, [fp, #4]
   15f68:	add	r3, r3, #8
   15f6c:	ldr	r3, [r3]
   15f70:	ldr	r2, [fp, #4]
   15f74:	add	r2, r2, #12
   15f78:	ldr	r2, [r2]
   15f7c:	ldr	r1, [fp, #4]
   15f80:	add	r1, r1, #16
   15f84:	ldr	r1, [r1]
   15f88:	ldr	r0, [fp, #4]
   15f8c:	add	r0, r0, #20
   15f90:	ldr	r0, [r0]
   15f94:	ldr	ip, [fp, #4]
   15f98:	add	ip, ip, #24
   15f9c:	ldr	ip, [ip]
   15fa0:	str	ip, [sp, #16]
   15fa4:	str	r0, [sp, #12]
   15fa8:	str	r1, [sp, #8]
   15fac:	str	r2, [sp, #4]
   15fb0:	str	r3, [sp]
   15fb4:	mov	r3, r4
   15fb8:	mov	r2, lr
   15fbc:	mov	r1, r5
   15fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15fc4:	bl	10e74 <fprintf@plt>
   15fc8:	b	161b8 <__assert_fail@plt+0x526c>
   15fcc:	ldr	r0, [pc, #552]	; 161fc <__assert_fail@plt+0x52b0>
   15fd0:	bl	10e50 <gettext@plt>
   15fd4:	mov	r6, r0
   15fd8:	ldr	r3, [fp, #4]
   15fdc:	ldr	r4, [r3]
   15fe0:	ldr	r3, [fp, #4]
   15fe4:	add	r3, r3, #4
   15fe8:	ldr	r5, [r3]
   15fec:	ldr	r3, [fp, #4]
   15ff0:	add	r3, r3, #8
   15ff4:	ldr	r3, [r3]
   15ff8:	ldr	r2, [fp, #4]
   15ffc:	add	r2, r2, #12
   16000:	ldr	r2, [r2]
   16004:	ldr	r1, [fp, #4]
   16008:	add	r1, r1, #16
   1600c:	ldr	r1, [r1]
   16010:	ldr	r0, [fp, #4]
   16014:	add	r0, r0, #20
   16018:	ldr	r0, [r0]
   1601c:	ldr	ip, [fp, #4]
   16020:	add	ip, ip, #24
   16024:	ldr	ip, [ip]
   16028:	ldr	lr, [fp, #4]
   1602c:	add	lr, lr, #28
   16030:	ldr	lr, [lr]
   16034:	str	lr, [sp, #20]
   16038:	str	ip, [sp, #16]
   1603c:	str	r0, [sp, #12]
   16040:	str	r1, [sp, #8]
   16044:	str	r2, [sp, #4]
   16048:	str	r3, [sp]
   1604c:	mov	r3, r5
   16050:	mov	r2, r4
   16054:	mov	r1, r6
   16058:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1605c:	bl	10e74 <fprintf@plt>
   16060:	b	161b8 <__assert_fail@plt+0x526c>
   16064:	ldr	r0, [pc, #404]	; 16200 <__assert_fail@plt+0x52b4>
   16068:	bl	10e50 <gettext@plt>
   1606c:	mov	r7, r0
   16070:	ldr	r3, [fp, #4]
   16074:	ldr	r5, [r3]
   16078:	ldr	r3, [fp, #4]
   1607c:	add	r3, r3, #4
   16080:	ldr	r6, [r3]
   16084:	ldr	r3, [fp, #4]
   16088:	add	r3, r3, #8
   1608c:	ldr	r3, [r3]
   16090:	ldr	r2, [fp, #4]
   16094:	add	r2, r2, #12
   16098:	ldr	r2, [r2]
   1609c:	ldr	r1, [fp, #4]
   160a0:	add	r1, r1, #16
   160a4:	ldr	r1, [r1]
   160a8:	ldr	r0, [fp, #4]
   160ac:	add	r0, r0, #20
   160b0:	ldr	r0, [r0]
   160b4:	ldr	ip, [fp, #4]
   160b8:	add	ip, ip, #24
   160bc:	ldr	ip, [ip]
   160c0:	ldr	lr, [fp, #4]
   160c4:	add	lr, lr, #28
   160c8:	ldr	lr, [lr]
   160cc:	ldr	r4, [fp, #4]
   160d0:	add	r4, r4, #32
   160d4:	ldr	r4, [r4]
   160d8:	str	r4, [sp, #24]
   160dc:	str	lr, [sp, #20]
   160e0:	str	ip, [sp, #16]
   160e4:	str	r0, [sp, #12]
   160e8:	str	r1, [sp, #8]
   160ec:	str	r2, [sp, #4]
   160f0:	str	r3, [sp]
   160f4:	mov	r3, r6
   160f8:	mov	r2, r5
   160fc:	mov	r1, r7
   16100:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16104:	bl	10e74 <fprintf@plt>
   16108:	b	161b8 <__assert_fail@plt+0x526c>
   1610c:	ldr	r0, [pc, #240]	; 16204 <__assert_fail@plt+0x52b8>
   16110:	bl	10e50 <gettext@plt>
   16114:	mov	r7, r0
   16118:	ldr	r3, [fp, #4]
   1611c:	ldr	r5, [r3]
   16120:	ldr	r3, [fp, #4]
   16124:	add	r3, r3, #4
   16128:	ldr	r6, [r3]
   1612c:	ldr	r3, [fp, #4]
   16130:	add	r3, r3, #8
   16134:	ldr	r3, [r3]
   16138:	ldr	r2, [fp, #4]
   1613c:	add	r2, r2, #12
   16140:	ldr	r2, [r2]
   16144:	ldr	r1, [fp, #4]
   16148:	add	r1, r1, #16
   1614c:	ldr	r1, [r1]
   16150:	ldr	r0, [fp, #4]
   16154:	add	r0, r0, #20
   16158:	ldr	r0, [r0]
   1615c:	ldr	ip, [fp, #4]
   16160:	add	ip, ip, #24
   16164:	ldr	ip, [ip]
   16168:	ldr	lr, [fp, #4]
   1616c:	add	lr, lr, #28
   16170:	ldr	lr, [lr]
   16174:	ldr	r4, [fp, #4]
   16178:	add	r4, r4, #32
   1617c:	ldr	r4, [r4]
   16180:	str	r4, [sp, #24]
   16184:	str	lr, [sp, #20]
   16188:	str	ip, [sp, #16]
   1618c:	str	r0, [sp, #12]
   16190:	str	r1, [sp, #8]
   16194:	str	r2, [sp, #4]
   16198:	str	r3, [sp]
   1619c:	mov	r3, r6
   161a0:	mov	r2, r5
   161a4:	mov	r1, r7
   161a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   161ac:	bl	10e74 <fprintf@plt>
   161b0:	b	161b8 <__assert_fail@plt+0x526c>
   161b4:	nop			; (mov r0, r0)
   161b8:	nop			; (mov r0, r0)
   161bc:	sub	sp, fp, #20
   161c0:	pop	{r4, r5, r6, r7, fp, pc}
   161c4:	andeq	r9, r1, r8, lsl r5
   161c8:	andeq	r9, r1, r4, lsr #10
   161cc:	andeq	r9, r1, ip, lsr #10
   161d0:	andeq	r0, r0, r6, ror #15
   161d4:	andeq	r9, r1, ip, lsr r8
   161d8:	andeq	r9, r1, r0, lsr r5
   161dc:	ldrdeq	r9, [r1], -ip
   161e0:	andeq	r9, r1, r0, lsl #12
   161e4:	andeq	r9, r1, r0, lsl r6
   161e8:	andeq	r9, r1, r8, lsr #12
   161ec:	andeq	r9, r1, r4, asr #12
   161f0:	andeq	r9, r1, r4, ror #12
   161f4:	andeq	r9, r1, r8, lsl #13
   161f8:			; <UNDEFINED> instruction: 0x000196b0
   161fc:	ldrdeq	r9, [r1], -ip
   16200:	andeq	r9, r1, ip, lsl #14
   16204:	andeq	r9, r1, r0, asr #14
   16208:	push	{fp, lr}
   1620c:	add	fp, sp, #4
   16210:	sub	sp, sp, #32
   16214:	str	r0, [fp, #-16]
   16218:	str	r1, [fp, #-20]	; 0xffffffec
   1621c:	str	r2, [fp, #-24]	; 0xffffffe8
   16220:	str	r3, [fp, #-28]	; 0xffffffe4
   16224:	mov	r3, #0
   16228:	str	r3, [fp, #-8]
   1622c:	b	1623c <__assert_fail@plt+0x52f0>
   16230:	ldr	r3, [fp, #-8]
   16234:	add	r3, r3, #1
   16238:	str	r3, [fp, #-8]
   1623c:	ldr	r3, [fp, #-8]
   16240:	lsl	r3, r3, #2
   16244:	ldr	r2, [fp, #4]
   16248:	add	r3, r2, r3
   1624c:	ldr	r3, [r3]
   16250:	cmp	r3, #0
   16254:	bne	16230 <__assert_fail@plt+0x52e4>
   16258:	ldr	r3, [fp, #-8]
   1625c:	str	r3, [sp, #4]
   16260:	ldr	r3, [fp, #4]
   16264:	str	r3, [sp]
   16268:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1626c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16270:	ldr	r1, [fp, #-20]	; 0xffffffec
   16274:	ldr	r0, [fp, #-16]
   16278:	bl	15c98 <__assert_fail@plt+0x4d4c>
   1627c:	nop			; (mov r0, r0)
   16280:	sub	sp, fp, #4
   16284:	pop	{fp, pc}
   16288:	push	{fp, lr}
   1628c:	add	fp, sp, #4
   16290:	sub	sp, sp, #72	; 0x48
   16294:	str	r0, [fp, #-56]	; 0xffffffc8
   16298:	str	r1, [fp, #-60]	; 0xffffffc4
   1629c:	str	r2, [fp, #-64]	; 0xffffffc0
   162a0:	str	r3, [fp, #-68]	; 0xffffffbc
   162a4:	mov	r3, #0
   162a8:	str	r3, [fp, #-8]
   162ac:	b	162bc <__assert_fail@plt+0x5370>
   162b0:	ldr	r3, [fp, #-8]
   162b4:	add	r3, r3, #1
   162b8:	str	r3, [fp, #-8]
   162bc:	ldr	r3, [fp, #-8]
   162c0:	cmp	r3, #9
   162c4:	bhi	16308 <__assert_fail@plt+0x53bc>
   162c8:	ldr	r3, [fp, #4]
   162cc:	add	r2, r3, #4
   162d0:	str	r2, [fp, #4]
   162d4:	ldr	r2, [r3]
   162d8:	ldr	r3, [fp, #-8]
   162dc:	lsl	r3, r3, #2
   162e0:	sub	r1, fp, #4
   162e4:	add	r3, r1, r3
   162e8:	str	r2, [r3, #-44]	; 0xffffffd4
   162ec:	ldr	r3, [fp, #-8]
   162f0:	lsl	r3, r3, #2
   162f4:	sub	r2, fp, #4
   162f8:	add	r3, r2, r3
   162fc:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16300:	cmp	r3, #0
   16304:	bne	162b0 <__assert_fail@plt+0x5364>
   16308:	ldr	r3, [fp, #-8]
   1630c:	str	r3, [sp, #4]
   16310:	sub	r3, fp, #48	; 0x30
   16314:	str	r3, [sp]
   16318:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1631c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16320:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16324:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16328:	bl	15c98 <__assert_fail@plt+0x4d4c>
   1632c:	nop			; (mov r0, r0)
   16330:	sub	sp, fp, #4
   16334:	pop	{fp, pc}
   16338:	push	{r3}		; (str r3, [sp, #-4]!)
   1633c:	push	{fp, lr}
   16340:	add	fp, sp, #4
   16344:	sub	sp, sp, #36	; 0x24
   16348:	str	r0, [fp, #-20]	; 0xffffffec
   1634c:	str	r1, [fp, #-24]	; 0xffffffe8
   16350:	str	r2, [fp, #-28]	; 0xffffffe4
   16354:	add	r3, fp, #8
   16358:	str	r3, [fp, #-12]
   1635c:	ldr	r3, [fp, #-12]
   16360:	str	r3, [sp]
   16364:	ldr	r3, [fp, #4]
   16368:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1636c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16370:	ldr	r0, [fp, #-20]	; 0xffffffec
   16374:	bl	16288 <__assert_fail@plt+0x533c>
   16378:	nop			; (mov r0, r0)
   1637c:	sub	sp, fp, #4
   16380:	pop	{fp, lr}
   16384:	add	sp, sp, #4
   16388:	bx	lr
   1638c:	push	{fp, lr}
   16390:	add	fp, sp, #4
   16394:	ldr	r3, [pc, #96]	; 163fc <__assert_fail@plt+0x54b0>
   16398:	ldr	r3, [r3]
   1639c:	mov	r1, r3
   163a0:	mov	r0, #10
   163a4:	bl	10d78 <fputc_unlocked@plt>
   163a8:	ldr	r0, [pc, #80]	; 16400 <__assert_fail@plt+0x54b4>
   163ac:	bl	10e50 <gettext@plt>
   163b0:	mov	r3, r0
   163b4:	ldr	r1, [pc, #72]	; 16404 <__assert_fail@plt+0x54b8>
   163b8:	mov	r0, r3
   163bc:	bl	10d0c <printf@plt>
   163c0:	ldr	r0, [pc, #64]	; 16408 <__assert_fail@plt+0x54bc>
   163c4:	bl	10e50 <gettext@plt>
   163c8:	mov	r3, r0
   163cc:	ldr	r2, [pc, #56]	; 1640c <__assert_fail@plt+0x54c0>
   163d0:	ldr	r1, [pc, #56]	; 16410 <__assert_fail@plt+0x54c4>
   163d4:	mov	r0, r3
   163d8:	bl	10d0c <printf@plt>
   163dc:	ldr	r0, [pc, #48]	; 16414 <__assert_fail@plt+0x54c8>
   163e0:	bl	10e50 <gettext@plt>
   163e4:	mov	r3, r0
   163e8:	ldr	r1, [pc, #40]	; 16418 <__assert_fail@plt+0x54cc>
   163ec:	mov	r0, r3
   163f0:	bl	10d0c <printf@plt>
   163f4:	nop			; (mov r0, r0)
   163f8:	pop	{fp, pc}
   163fc:	andeq	sl, r2, r4, asr r1
   16400:	andeq	r9, r1, ip, ror r7
   16404:	muleq	r1, r0, r7
   16408:	andeq	r9, r1, r8, lsr #15
   1640c:			; <UNDEFINED> instruction: 0x000197bc
   16410:	andeq	r9, r1, r4, ror #15
   16414:	strdeq	r9, [r1], -r4
   16418:	andeq	r9, r1, ip, lsl r8
   1641c:	push	{fp, lr}
   16420:	add	fp, sp, #4
   16424:	sub	sp, sp, #16
   16428:	str	r0, [fp, #-8]
   1642c:	str	r1, [fp, #-12]
   16430:	str	r2, [fp, #-16]
   16434:	ldr	r2, [fp, #-16]
   16438:	ldr	r1, [fp, #-12]
   1643c:	ldr	r0, [fp, #-8]
   16440:	bl	165ac <__assert_fail@plt+0x5660>
   16444:	mov	r3, r0
   16448:	mov	r0, r3
   1644c:	sub	sp, fp, #4
   16450:	pop	{fp, pc}
   16454:	push	{fp, lr}
   16458:	add	fp, sp, #4
   1645c:	sub	sp, sp, #8
   16460:	str	r0, [fp, #-8]
   16464:	ldr	r3, [fp, #-8]
   16468:	cmp	r3, #0
   1646c:	bne	16474 <__assert_fail@plt+0x5528>
   16470:	bl	16fa0 <__assert_fail@plt+0x6054>
   16474:	ldr	r3, [fp, #-8]
   16478:	mov	r0, r3
   1647c:	sub	sp, fp, #4
   16480:	pop	{fp, pc}
   16484:	push	{fp, lr}
   16488:	add	fp, sp, #4
   1648c:	sub	sp, sp, #8
   16490:	str	r0, [fp, #-8]
   16494:	ldr	r0, [fp, #-8]
   16498:	bl	179f8 <__assert_fail@plt+0x6aac>
   1649c:	mov	r3, r0
   164a0:	mov	r0, r3
   164a4:	bl	16454 <__assert_fail@plt+0x5508>
   164a8:	mov	r3, r0
   164ac:	mov	r0, r3
   164b0:	sub	sp, fp, #4
   164b4:	pop	{fp, pc}
   164b8:	push	{fp, lr}
   164bc:	add	fp, sp, #4
   164c0:	sub	sp, sp, #8
   164c4:	str	r0, [fp, #-8]
   164c8:	ldr	r0, [fp, #-8]
   164cc:	bl	13374 <__assert_fail@plt+0x2428>
   164d0:	mov	r3, r0
   164d4:	mov	r0, r3
   164d8:	bl	16454 <__assert_fail@plt+0x5508>
   164dc:	mov	r3, r0
   164e0:	mov	r0, r3
   164e4:	sub	sp, fp, #4
   164e8:	pop	{fp, pc}
   164ec:	push	{fp, lr}
   164f0:	add	fp, sp, #4
   164f4:	sub	sp, sp, #8
   164f8:	str	r0, [fp, #-8]
   164fc:	ldr	r0, [fp, #-8]
   16500:	bl	16484 <__assert_fail@plt+0x5538>
   16504:	mov	r3, r0
   16508:	mov	r0, r3
   1650c:	sub	sp, fp, #4
   16510:	pop	{fp, pc}
   16514:	push	{fp, lr}
   16518:	add	fp, sp, #4
   1651c:	sub	sp, sp, #16
   16520:	str	r0, [fp, #-16]
   16524:	str	r1, [fp, #-20]	; 0xffffffec
   16528:	ldr	r1, [fp, #-20]	; 0xffffffec
   1652c:	ldr	r0, [fp, #-16]
   16530:	bl	17aa0 <__assert_fail@plt+0x6b54>
   16534:	str	r0, [fp, #-8]
   16538:	ldr	r3, [fp, #-8]
   1653c:	cmp	r3, #0
   16540:	bne	16560 <__assert_fail@plt+0x5614>
   16544:	ldr	r3, [fp, #-16]
   16548:	cmp	r3, #0
   1654c:	beq	1655c <__assert_fail@plt+0x5610>
   16550:	ldr	r3, [fp, #-20]	; 0xffffffec
   16554:	cmp	r3, #0
   16558:	beq	16560 <__assert_fail@plt+0x5614>
   1655c:	bl	16fa0 <__assert_fail@plt+0x6054>
   16560:	ldr	r3, [fp, #-8]
   16564:	mov	r0, r3
   16568:	sub	sp, fp, #4
   1656c:	pop	{fp, pc}
   16570:	push	{fp, lr}
   16574:	add	fp, sp, #4
   16578:	sub	sp, sp, #8
   1657c:	str	r0, [fp, #-8]
   16580:	str	r1, [fp, #-12]
   16584:	ldr	r1, [fp, #-12]
   16588:	ldr	r0, [fp, #-8]
   1658c:	bl	133a0 <__assert_fail@plt+0x2454>
   16590:	mov	r3, r0
   16594:	mov	r0, r3
   16598:	bl	16454 <__assert_fail@plt+0x5508>
   1659c:	mov	r3, r0
   165a0:	mov	r0, r3
   165a4:	sub	sp, fp, #4
   165a8:	pop	{fp, pc}
   165ac:	push	{fp, lr}
   165b0:	add	fp, sp, #4
   165b4:	sub	sp, sp, #24
   165b8:	str	r0, [fp, #-16]
   165bc:	str	r1, [fp, #-20]	; 0xffffffec
   165c0:	str	r2, [fp, #-24]	; 0xffffffe8
   165c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   165c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   165cc:	ldr	r0, [fp, #-16]
   165d0:	bl	15be8 <__assert_fail@plt+0x4c9c>
   165d4:	str	r0, [fp, #-8]
   165d8:	ldr	r3, [fp, #-8]
   165dc:	cmp	r3, #0
   165e0:	bne	1660c <__assert_fail@plt+0x56c0>
   165e4:	ldr	r3, [fp, #-16]
   165e8:	cmp	r3, #0
   165ec:	beq	16608 <__assert_fail@plt+0x56bc>
   165f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165f4:	cmp	r3, #0
   165f8:	beq	1660c <__assert_fail@plt+0x56c0>
   165fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16600:	cmp	r3, #0
   16604:	beq	1660c <__assert_fail@plt+0x56c0>
   16608:	bl	16fa0 <__assert_fail@plt+0x6054>
   1660c:	ldr	r3, [fp, #-8]
   16610:	mov	r0, r3
   16614:	sub	sp, fp, #4
   16618:	pop	{fp, pc}
   1661c:	push	{fp, lr}
   16620:	add	fp, sp, #4
   16624:	sub	sp, sp, #16
   16628:	str	r0, [fp, #-8]
   1662c:	str	r1, [fp, #-12]
   16630:	str	r2, [fp, #-16]
   16634:	ldr	r2, [fp, #-16]
   16638:	ldr	r1, [fp, #-12]
   1663c:	ldr	r0, [fp, #-8]
   16640:	bl	13428 <__assert_fail@plt+0x24dc>
   16644:	mov	r3, r0
   16648:	mov	r0, r3
   1664c:	bl	16454 <__assert_fail@plt+0x5508>
   16650:	mov	r3, r0
   16654:	mov	r0, r3
   16658:	sub	sp, fp, #4
   1665c:	pop	{fp, pc}
   16660:	push	{fp, lr}
   16664:	add	fp, sp, #4
   16668:	sub	sp, sp, #8
   1666c:	str	r0, [fp, #-8]
   16670:	str	r1, [fp, #-12]
   16674:	ldr	r2, [fp, #-12]
   16678:	ldr	r1, [fp, #-8]
   1667c:	mov	r0, #0
   16680:	bl	165ac <__assert_fail@plt+0x5660>
   16684:	mov	r3, r0
   16688:	mov	r0, r3
   1668c:	sub	sp, fp, #4
   16690:	pop	{fp, pc}
   16694:	push	{fp, lr}
   16698:	add	fp, sp, #4
   1669c:	sub	sp, sp, #8
   166a0:	str	r0, [fp, #-8]
   166a4:	str	r1, [fp, #-12]
   166a8:	ldr	r2, [fp, #-12]
   166ac:	ldr	r1, [fp, #-8]
   166b0:	mov	r0, #0
   166b4:	bl	1661c <__assert_fail@plt+0x56d0>
   166b8:	mov	r3, r0
   166bc:	mov	r0, r3
   166c0:	sub	sp, fp, #4
   166c4:	pop	{fp, pc}
   166c8:	push	{fp, lr}
   166cc:	add	fp, sp, #4
   166d0:	sub	sp, sp, #8
   166d4:	str	r0, [fp, #-8]
   166d8:	str	r1, [fp, #-12]
   166dc:	mov	r2, #1
   166e0:	ldr	r1, [fp, #-12]
   166e4:	ldr	r0, [fp, #-8]
   166e8:	bl	166fc <__assert_fail@plt+0x57b0>
   166ec:	mov	r3, r0
   166f0:	mov	r0, r3
   166f4:	sub	sp, fp, #4
   166f8:	pop	{fp, pc}
   166fc:	push	{fp, lr}
   16700:	add	fp, sp, #4
   16704:	sub	sp, sp, #24
   16708:	str	r0, [fp, #-16]
   1670c:	str	r1, [fp, #-20]	; 0xffffffec
   16710:	str	r2, [fp, #-24]	; 0xffffffe8
   16714:	ldr	r3, [fp, #-20]	; 0xffffffec
   16718:	ldr	r3, [r3]
   1671c:	str	r3, [fp, #-8]
   16720:	ldr	r3, [fp, #-16]
   16724:	cmp	r3, #0
   16728:	bne	16774 <__assert_fail@plt+0x5828>
   1672c:	ldr	r3, [fp, #-8]
   16730:	cmp	r3, #0
   16734:	bne	167d8 <__assert_fail@plt+0x588c>
   16738:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1673c:	mov	r0, #64	; 0x40
   16740:	bl	18538 <__assert_fail@plt+0x75ec>
   16744:	mov	r3, r0
   16748:	str	r3, [fp, #-8]
   1674c:	ldr	r3, [fp, #-8]
   16750:	cmp	r3, #0
   16754:	moveq	r3, #1
   16758:	movne	r3, #0
   1675c:	uxtb	r3, r3
   16760:	mov	r2, r3
   16764:	ldr	r3, [fp, #-8]
   16768:	add	r3, r2, r3
   1676c:	str	r3, [fp, #-8]
   16770:	b	167d8 <__assert_fail@plt+0x588c>
   16774:	ldr	r3, [fp, #-8]
   16778:	lsr	r3, r3, #1
   1677c:	add	r3, r3, #1
   16780:	mvn	r2, r3
   16784:	ldr	r3, [fp, #-8]
   16788:	cmp	r2, r3
   1678c:	bcs	167b0 <__assert_fail@plt+0x5864>
   16790:	ldr	r3, [fp, #-8]
   16794:	lsr	r2, r3, #1
   16798:	ldr	r3, [fp, #-8]
   1679c:	add	r3, r2, r3
   167a0:	add	r3, r3, #1
   167a4:	str	r3, [fp, #-8]
   167a8:	mov	r3, #1
   167ac:	b	167cc <__assert_fail@plt+0x5880>
   167b0:	ldr	r3, [fp, #-8]
   167b4:	lsr	r2, r3, #1
   167b8:	ldr	r3, [fp, #-8]
   167bc:	add	r3, r2, r3
   167c0:	add	r3, r3, #1
   167c4:	str	r3, [fp, #-8]
   167c8:	mov	r3, #0
   167cc:	cmp	r3, #0
   167d0:	beq	167d8 <__assert_fail@plt+0x588c>
   167d4:	bl	16fa0 <__assert_fail@plt+0x6054>
   167d8:	ldr	r3, [fp, #-8]
   167dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   167e0:	mov	r1, r3
   167e4:	ldr	r0, [fp, #-16]
   167e8:	bl	165ac <__assert_fail@plt+0x5660>
   167ec:	str	r0, [fp, #-16]
   167f0:	ldr	r2, [fp, #-8]
   167f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   167f8:	str	r2, [r3]
   167fc:	ldr	r3, [fp, #-16]
   16800:	mov	r0, r3
   16804:	sub	sp, fp, #4
   16808:	pop	{fp, pc}
   1680c:	push	{fp, lr}
   16810:	add	fp, sp, #4
   16814:	sub	sp, sp, #32
   16818:	str	r0, [fp, #-24]	; 0xffffffe8
   1681c:	str	r1, [fp, #-28]	; 0xffffffe4
   16820:	str	r2, [fp, #-32]	; 0xffffffe0
   16824:	str	r3, [fp, #-36]	; 0xffffffdc
   16828:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1682c:	ldr	r3, [r3]
   16830:	str	r3, [fp, #-8]
   16834:	ldr	r3, [fp, #-8]
   16838:	asr	r3, r3, #1
   1683c:	cmp	r3, #0
   16840:	bge	16868 <__assert_fail@plt+0x591c>
   16844:	ldr	r3, [fp, #-8]
   16848:	asr	r3, r3, #1
   1684c:	rsb	r2, r3, #-2147483648	; 0x80000000
   16850:	ldr	r3, [fp, #-8]
   16854:	cmp	r2, r3
   16858:	movgt	r3, #1
   1685c:	movle	r3, #0
   16860:	uxtb	r3, r3
   16864:	b	168bc <__assert_fail@plt+0x5970>
   16868:	ldr	r3, [fp, #-8]
   1686c:	cmp	r3, #0
   16870:	bge	16898 <__assert_fail@plt+0x594c>
   16874:	ldr	r3, [fp, #-8]
   16878:	asr	r2, r3, #1
   1687c:	ldr	r3, [fp, #-8]
   16880:	rsb	r3, r3, #-2147483648	; 0x80000000
   16884:	cmp	r2, r3
   16888:	movlt	r3, #1
   1688c:	movge	r3, #0
   16890:	uxtb	r3, r3
   16894:	b	168bc <__assert_fail@plt+0x5970>
   16898:	ldr	r3, [fp, #-8]
   1689c:	asr	r2, r3, #1
   168a0:	mvn	r3, #-2147483648	; 0x80000000
   168a4:	sub	r3, r3, r2
   168a8:	ldr	r2, [fp, #-8]
   168ac:	cmp	r3, r2
   168b0:	movlt	r3, #1
   168b4:	movge	r3, #0
   168b8:	uxtb	r3, r3
   168bc:	cmp	r3, #0
   168c0:	beq	168e4 <__assert_fail@plt+0x5998>
   168c4:	ldr	r3, [fp, #-8]
   168c8:	asr	r3, r3, #1
   168cc:	mov	r2, r3
   168d0:	ldr	r3, [fp, #-8]
   168d4:	add	r3, r2, r3
   168d8:	str	r3, [fp, #-16]
   168dc:	mov	r3, #1
   168e0:	b	16900 <__assert_fail@plt+0x59b4>
   168e4:	ldr	r3, [fp, #-8]
   168e8:	asr	r3, r3, #1
   168ec:	mov	r2, r3
   168f0:	ldr	r3, [fp, #-8]
   168f4:	add	r3, r2, r3
   168f8:	str	r3, [fp, #-16]
   168fc:	mov	r3, #0
   16900:	cmp	r3, #0
   16904:	beq	16910 <__assert_fail@plt+0x59c4>
   16908:	mvn	r3, #-2147483648	; 0x80000000
   1690c:	str	r3, [fp, #-16]
   16910:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16914:	cmp	r3, #0
   16918:	blt	16934 <__assert_fail@plt+0x59e8>
   1691c:	ldr	r3, [fp, #-16]
   16920:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16924:	cmp	r2, r3
   16928:	bge	16934 <__assert_fail@plt+0x59e8>
   1692c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16930:	str	r3, [fp, #-16]
   16934:	ldr	r3, [fp, #4]
   16938:	cmp	r3, #0
   1693c:	bge	169cc <__assert_fail@plt+0x5a80>
   16940:	ldr	r3, [fp, #-16]
   16944:	cmp	r3, #0
   16948:	bge	16978 <__assert_fail@plt+0x5a2c>
   1694c:	ldr	r1, [fp, #4]
   16950:	mvn	r0, #-2147483648	; 0x80000000
   16954:	bl	18744 <__assert_fail@plt+0x77f8>
   16958:	mov	r3, r0
   1695c:	mov	r2, r3
   16960:	ldr	r3, [fp, #-16]
   16964:	cmp	r2, r3
   16968:	movgt	r3, #1
   1696c:	movle	r3, #0
   16970:	uxtb	r3, r3
   16974:	b	16a6c <__assert_fail@plt+0x5b20>
   16978:	ldr	r3, [fp, #4]
   1697c:	cmn	r3, #1
   16980:	bne	169a0 <__assert_fail@plt+0x5a54>
   16984:	ldr	r3, [fp, #-16]
   16988:	add	r3, r3, #-2147483648	; 0x80000000
   1698c:	cmp	r3, #0
   16990:	movgt	r3, #1
   16994:	movle	r3, #0
   16998:	uxtb	r3, r3
   1699c:	b	16a6c <__assert_fail@plt+0x5b20>
   169a0:	ldr	r1, [fp, #4]
   169a4:	mov	r0, #-2147483648	; 0x80000000
   169a8:	bl	18744 <__assert_fail@plt+0x77f8>
   169ac:	mov	r3, r0
   169b0:	mov	r2, r3
   169b4:	ldr	r3, [fp, #-16]
   169b8:	cmp	r2, r3
   169bc:	movlt	r3, #1
   169c0:	movge	r3, #0
   169c4:	uxtb	r3, r3
   169c8:	b	16a6c <__assert_fail@plt+0x5b20>
   169cc:	ldr	r3, [fp, #4]
   169d0:	cmp	r3, #0
   169d4:	beq	16a68 <__assert_fail@plt+0x5b1c>
   169d8:	ldr	r3, [fp, #-16]
   169dc:	cmp	r3, #0
   169e0:	bge	16a3c <__assert_fail@plt+0x5af0>
   169e4:	ldr	r3, [fp, #-16]
   169e8:	cmn	r3, #1
   169ec:	bne	16a0c <__assert_fail@plt+0x5ac0>
   169f0:	ldr	r3, [fp, #4]
   169f4:	add	r3, r3, #-2147483648	; 0x80000000
   169f8:	cmp	r3, #0
   169fc:	movgt	r3, #1
   16a00:	movle	r3, #0
   16a04:	uxtb	r3, r3
   16a08:	b	16a6c <__assert_fail@plt+0x5b20>
   16a0c:	ldr	r3, [fp, #-16]
   16a10:	mov	r1, r3
   16a14:	mov	r0, #-2147483648	; 0x80000000
   16a18:	bl	18744 <__assert_fail@plt+0x77f8>
   16a1c:	mov	r3, r0
   16a20:	mov	r2, r3
   16a24:	ldr	r3, [fp, #4]
   16a28:	cmp	r2, r3
   16a2c:	movlt	r3, #1
   16a30:	movge	r3, #0
   16a34:	uxtb	r3, r3
   16a38:	b	16a6c <__assert_fail@plt+0x5b20>
   16a3c:	ldr	r1, [fp, #4]
   16a40:	mvn	r0, #-2147483648	; 0x80000000
   16a44:	bl	18744 <__assert_fail@plt+0x77f8>
   16a48:	mov	r3, r0
   16a4c:	mov	r2, r3
   16a50:	ldr	r3, [fp, #-16]
   16a54:	cmp	r2, r3
   16a58:	movlt	r3, #1
   16a5c:	movge	r3, #0
   16a60:	uxtb	r3, r3
   16a64:	b	16a6c <__assert_fail@plt+0x5b20>
   16a68:	mov	r3, #0
   16a6c:	cmp	r3, #0
   16a70:	beq	16a90 <__assert_fail@plt+0x5b44>
   16a74:	ldr	r3, [fp, #-16]
   16a78:	mov	r2, r3
   16a7c:	ldr	r3, [fp, #4]
   16a80:	mul	r3, r3, r2
   16a84:	str	r3, [fp, #-20]	; 0xffffffec
   16a88:	mov	r3, #1
   16a8c:	b	16aa8 <__assert_fail@plt+0x5b5c>
   16a90:	ldr	r3, [fp, #-16]
   16a94:	mov	r2, r3
   16a98:	ldr	r3, [fp, #4]
   16a9c:	mul	r3, r3, r2
   16aa0:	str	r3, [fp, #-20]	; 0xffffffec
   16aa4:	mov	r3, #0
   16aa8:	cmp	r3, #0
   16aac:	beq	16ab8 <__assert_fail@plt+0x5b6c>
   16ab0:	mvn	r3, #-2147483648	; 0x80000000
   16ab4:	b	16ad0 <__assert_fail@plt+0x5b84>
   16ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16abc:	cmp	r3, #63	; 0x3f
   16ac0:	bgt	16acc <__assert_fail@plt+0x5b80>
   16ac4:	mov	r3, #64	; 0x40
   16ac8:	b	16ad0 <__assert_fail@plt+0x5b84>
   16acc:	mov	r3, #0
   16ad0:	str	r3, [fp, #-12]
   16ad4:	ldr	r3, [fp, #-12]
   16ad8:	cmp	r3, #0
   16adc:	beq	16b18 <__assert_fail@plt+0x5bcc>
   16ae0:	ldr	r1, [fp, #4]
   16ae4:	ldr	r0, [fp, #-12]
   16ae8:	bl	18744 <__assert_fail@plt+0x77f8>
   16aec:	mov	r3, r0
   16af0:	str	r3, [fp, #-16]
   16af4:	ldr	r3, [fp, #-12]
   16af8:	ldr	r1, [fp, #4]
   16afc:	mov	r0, r3
   16b00:	bl	18964 <__assert_fail@plt+0x7a18>
   16b04:	mov	r3, r1
   16b08:	mov	r2, r3
   16b0c:	ldr	r3, [fp, #-12]
   16b10:	sub	r3, r3, r2
   16b14:	str	r3, [fp, #-20]	; 0xffffffec
   16b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b1c:	cmp	r3, #0
   16b20:	bne	16b30 <__assert_fail@plt+0x5be4>
   16b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b28:	mov	r2, #0
   16b2c:	str	r2, [r3]
   16b30:	ldr	r2, [fp, #-16]
   16b34:	ldr	r3, [fp, #-8]
   16b38:	sub	r2, r2, r3
   16b3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b40:	cmp	r2, r3
   16b44:	bge	16d7c <__assert_fail@plt+0x5e30>
   16b48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b4c:	cmp	r3, #0
   16b50:	bge	16b74 <__assert_fail@plt+0x5c28>
   16b54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b58:	rsb	r2, r3, #-2147483648	; 0x80000000
   16b5c:	ldr	r3, [fp, #-8]
   16b60:	cmp	r2, r3
   16b64:	movgt	r3, #1
   16b68:	movle	r3, #0
   16b6c:	uxtb	r3, r3
   16b70:	b	16bc0 <__assert_fail@plt+0x5c74>
   16b74:	ldr	r3, [fp, #-8]
   16b78:	cmp	r3, #0
   16b7c:	bge	16ba0 <__assert_fail@plt+0x5c54>
   16b80:	ldr	r3, [fp, #-8]
   16b84:	rsb	r2, r3, #-2147483648	; 0x80000000
   16b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b8c:	cmp	r2, r3
   16b90:	movgt	r3, #1
   16b94:	movle	r3, #0
   16b98:	uxtb	r3, r3
   16b9c:	b	16bc0 <__assert_fail@plt+0x5c74>
   16ba0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ba4:	mvn	r3, #-2147483648	; 0x80000000
   16ba8:	sub	r3, r3, r2
   16bac:	ldr	r2, [fp, #-8]
   16bb0:	cmp	r3, r2
   16bb4:	movlt	r3, #1
   16bb8:	movge	r3, #0
   16bbc:	uxtb	r3, r3
   16bc0:	cmp	r3, #0
   16bc4:	beq	16bdc <__assert_fail@plt+0x5c90>
   16bc8:	ldr	r2, [fp, #-8]
   16bcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bd0:	add	r3, r2, r3
   16bd4:	str	r3, [fp, #-16]
   16bd8:	b	16d78 <__assert_fail@plt+0x5e2c>
   16bdc:	ldr	r2, [fp, #-8]
   16be0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16be4:	add	r3, r2, r3
   16be8:	str	r3, [fp, #-16]
   16bec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bf0:	cmp	r3, #0
   16bf4:	blt	16c08 <__assert_fail@plt+0x5cbc>
   16bf8:	ldr	r3, [fp, #-16]
   16bfc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16c00:	cmp	r2, r3
   16c04:	blt	16d78 <__assert_fail@plt+0x5e2c>
   16c08:	ldr	r3, [fp, #4]
   16c0c:	cmp	r3, #0
   16c10:	bge	16ca0 <__assert_fail@plt+0x5d54>
   16c14:	ldr	r3, [fp, #-16]
   16c18:	cmp	r3, #0
   16c1c:	bge	16c4c <__assert_fail@plt+0x5d00>
   16c20:	ldr	r1, [fp, #4]
   16c24:	mvn	r0, #-2147483648	; 0x80000000
   16c28:	bl	18744 <__assert_fail@plt+0x77f8>
   16c2c:	mov	r3, r0
   16c30:	mov	r2, r3
   16c34:	ldr	r3, [fp, #-16]
   16c38:	cmp	r2, r3
   16c3c:	movgt	r3, #1
   16c40:	movle	r3, #0
   16c44:	uxtb	r3, r3
   16c48:	b	16d40 <__assert_fail@plt+0x5df4>
   16c4c:	ldr	r3, [fp, #4]
   16c50:	cmn	r3, #1
   16c54:	bne	16c74 <__assert_fail@plt+0x5d28>
   16c58:	ldr	r3, [fp, #-16]
   16c5c:	add	r3, r3, #-2147483648	; 0x80000000
   16c60:	cmp	r3, #0
   16c64:	movgt	r3, #1
   16c68:	movle	r3, #0
   16c6c:	uxtb	r3, r3
   16c70:	b	16d40 <__assert_fail@plt+0x5df4>
   16c74:	ldr	r1, [fp, #4]
   16c78:	mov	r0, #-2147483648	; 0x80000000
   16c7c:	bl	18744 <__assert_fail@plt+0x77f8>
   16c80:	mov	r3, r0
   16c84:	mov	r2, r3
   16c88:	ldr	r3, [fp, #-16]
   16c8c:	cmp	r2, r3
   16c90:	movlt	r3, #1
   16c94:	movge	r3, #0
   16c98:	uxtb	r3, r3
   16c9c:	b	16d40 <__assert_fail@plt+0x5df4>
   16ca0:	ldr	r3, [fp, #4]
   16ca4:	cmp	r3, #0
   16ca8:	beq	16d3c <__assert_fail@plt+0x5df0>
   16cac:	ldr	r3, [fp, #-16]
   16cb0:	cmp	r3, #0
   16cb4:	bge	16d10 <__assert_fail@plt+0x5dc4>
   16cb8:	ldr	r3, [fp, #-16]
   16cbc:	cmn	r3, #1
   16cc0:	bne	16ce0 <__assert_fail@plt+0x5d94>
   16cc4:	ldr	r3, [fp, #4]
   16cc8:	add	r3, r3, #-2147483648	; 0x80000000
   16ccc:	cmp	r3, #0
   16cd0:	movgt	r3, #1
   16cd4:	movle	r3, #0
   16cd8:	uxtb	r3, r3
   16cdc:	b	16d40 <__assert_fail@plt+0x5df4>
   16ce0:	ldr	r3, [fp, #-16]
   16ce4:	mov	r1, r3
   16ce8:	mov	r0, #-2147483648	; 0x80000000
   16cec:	bl	18744 <__assert_fail@plt+0x77f8>
   16cf0:	mov	r3, r0
   16cf4:	mov	r2, r3
   16cf8:	ldr	r3, [fp, #4]
   16cfc:	cmp	r2, r3
   16d00:	movlt	r3, #1
   16d04:	movge	r3, #0
   16d08:	uxtb	r3, r3
   16d0c:	b	16d40 <__assert_fail@plt+0x5df4>
   16d10:	ldr	r1, [fp, #4]
   16d14:	mvn	r0, #-2147483648	; 0x80000000
   16d18:	bl	18744 <__assert_fail@plt+0x77f8>
   16d1c:	mov	r3, r0
   16d20:	mov	r2, r3
   16d24:	ldr	r3, [fp, #-16]
   16d28:	cmp	r2, r3
   16d2c:	movlt	r3, #1
   16d30:	movge	r3, #0
   16d34:	uxtb	r3, r3
   16d38:	b	16d40 <__assert_fail@plt+0x5df4>
   16d3c:	mov	r3, #0
   16d40:	cmp	r3, #0
   16d44:	beq	16d60 <__assert_fail@plt+0x5e14>
   16d48:	ldr	r3, [fp, #-16]
   16d4c:	mov	r2, r3
   16d50:	ldr	r3, [fp, #4]
   16d54:	mul	r3, r3, r2
   16d58:	str	r3, [fp, #-20]	; 0xffffffec
   16d5c:	b	16d78 <__assert_fail@plt+0x5e2c>
   16d60:	ldr	r3, [fp, #-16]
   16d64:	mov	r2, r3
   16d68:	ldr	r3, [fp, #4]
   16d6c:	mul	r3, r3, r2
   16d70:	str	r3, [fp, #-20]	; 0xffffffec
   16d74:	b	16d7c <__assert_fail@plt+0x5e30>
   16d78:	bl	16fa0 <__assert_fail@plt+0x6054>
   16d7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d80:	mov	r1, r3
   16d84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d88:	bl	16514 <__assert_fail@plt+0x55c8>
   16d8c:	str	r0, [fp, #-24]	; 0xffffffe8
   16d90:	ldr	r2, [fp, #-16]
   16d94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d98:	str	r2, [r3]
   16d9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16da0:	mov	r0, r3
   16da4:	sub	sp, fp, #4
   16da8:	pop	{fp, pc}
   16dac:	push	{fp, lr}
   16db0:	add	fp, sp, #4
   16db4:	sub	sp, sp, #8
   16db8:	str	r0, [fp, #-8]
   16dbc:	mov	r1, #1
   16dc0:	ldr	r0, [fp, #-8]
   16dc4:	bl	16e04 <__assert_fail@plt+0x5eb8>
   16dc8:	mov	r3, r0
   16dcc:	mov	r0, r3
   16dd0:	sub	sp, fp, #4
   16dd4:	pop	{fp, pc}
   16dd8:	push	{fp, lr}
   16ddc:	add	fp, sp, #4
   16de0:	sub	sp, sp, #8
   16de4:	str	r0, [fp, #-8]
   16de8:	mov	r1, #1
   16dec:	ldr	r0, [fp, #-8]
   16df0:	bl	16e40 <__assert_fail@plt+0x5ef4>
   16df4:	mov	r3, r0
   16df8:	mov	r0, r3
   16dfc:	sub	sp, fp, #4
   16e00:	pop	{fp, pc}
   16e04:	push	{fp, lr}
   16e08:	add	fp, sp, #4
   16e0c:	sub	sp, sp, #8
   16e10:	str	r0, [fp, #-8]
   16e14:	str	r1, [fp, #-12]
   16e18:	ldr	r1, [fp, #-12]
   16e1c:	ldr	r0, [fp, #-8]
   16e20:	bl	17934 <__assert_fail@plt+0x69e8>
   16e24:	mov	r3, r0
   16e28:	mov	r0, r3
   16e2c:	bl	16454 <__assert_fail@plt+0x5508>
   16e30:	mov	r3, r0
   16e34:	mov	r0, r3
   16e38:	sub	sp, fp, #4
   16e3c:	pop	{fp, pc}
   16e40:	push	{fp, lr}
   16e44:	add	fp, sp, #4
   16e48:	sub	sp, sp, #8
   16e4c:	str	r0, [fp, #-8]
   16e50:	str	r1, [fp, #-12]
   16e54:	ldr	r1, [fp, #-12]
   16e58:	ldr	r0, [fp, #-8]
   16e5c:	bl	133f0 <__assert_fail@plt+0x24a4>
   16e60:	mov	r3, r0
   16e64:	mov	r0, r3
   16e68:	bl	16454 <__assert_fail@plt+0x5508>
   16e6c:	mov	r3, r0
   16e70:	mov	r0, r3
   16e74:	sub	sp, fp, #4
   16e78:	pop	{fp, pc}
   16e7c:	push	{fp, lr}
   16e80:	add	fp, sp, #4
   16e84:	sub	sp, sp, #8
   16e88:	str	r0, [fp, #-8]
   16e8c:	str	r1, [fp, #-12]
   16e90:	ldr	r0, [fp, #-12]
   16e94:	bl	16484 <__assert_fail@plt+0x5538>
   16e98:	mov	r3, r0
   16e9c:	ldr	r2, [fp, #-12]
   16ea0:	ldr	r1, [fp, #-8]
   16ea4:	mov	r0, r3
   16ea8:	bl	10d48 <memcpy@plt>
   16eac:	mov	r3, r0
   16eb0:	mov	r0, r3
   16eb4:	sub	sp, fp, #4
   16eb8:	pop	{fp, pc}
   16ebc:	push	{fp, lr}
   16ec0:	add	fp, sp, #4
   16ec4:	sub	sp, sp, #8
   16ec8:	str	r0, [fp, #-8]
   16ecc:	str	r1, [fp, #-12]
   16ed0:	ldr	r0, [fp, #-12]
   16ed4:	bl	164b8 <__assert_fail@plt+0x556c>
   16ed8:	mov	r3, r0
   16edc:	mov	r0, r3
   16ee0:	ldr	r3, [fp, #-12]
   16ee4:	mov	r2, r3
   16ee8:	ldr	r1, [fp, #-8]
   16eec:	bl	10d48 <memcpy@plt>
   16ef0:	mov	r3, r0
   16ef4:	mov	r0, r3
   16ef8:	sub	sp, fp, #4
   16efc:	pop	{fp, pc}
   16f00:	push	{fp, lr}
   16f04:	add	fp, sp, #4
   16f08:	sub	sp, sp, #16
   16f0c:	str	r0, [fp, #-16]
   16f10:	str	r1, [fp, #-20]	; 0xffffffec
   16f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f18:	add	r3, r3, #1
   16f1c:	mov	r0, r3
   16f20:	bl	164b8 <__assert_fail@plt+0x556c>
   16f24:	mov	r3, r0
   16f28:	str	r3, [fp, #-8]
   16f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f30:	ldr	r2, [fp, #-8]
   16f34:	add	r3, r2, r3
   16f38:	mov	r2, #0
   16f3c:	strb	r2, [r3]
   16f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f44:	mov	r2, r3
   16f48:	ldr	r1, [fp, #-16]
   16f4c:	ldr	r0, [fp, #-8]
   16f50:	bl	10d48 <memcpy@plt>
   16f54:	mov	r3, r0
   16f58:	mov	r0, r3
   16f5c:	sub	sp, fp, #4
   16f60:	pop	{fp, pc}
   16f64:	push	{fp, lr}
   16f68:	add	fp, sp, #4
   16f6c:	sub	sp, sp, #8
   16f70:	str	r0, [fp, #-8]
   16f74:	ldr	r0, [fp, #-8]
   16f78:	bl	10e5c <strlen@plt>
   16f7c:	mov	r3, r0
   16f80:	add	r3, r3, #1
   16f84:	mov	r1, r3
   16f88:	ldr	r0, [fp, #-8]
   16f8c:	bl	16e7c <__assert_fail@plt+0x5f30>
   16f90:	mov	r3, r0
   16f94:	mov	r0, r3
   16f98:	sub	sp, fp, #4
   16f9c:	pop	{fp, pc}
   16fa0:	push	{r4, r5, fp, lr}
   16fa4:	add	fp, sp, #12
   16fa8:	ldr	r3, [pc, #32]	; 16fd0 <__assert_fail@plt+0x6084>
   16fac:	ldr	r4, [r3]
   16fb0:	ldr	r0, [pc, #28]	; 16fd4 <__assert_fail@plt+0x6088>
   16fb4:	bl	10e50 <gettext@plt>
   16fb8:	mov	r3, r0
   16fbc:	ldr	r2, [pc, #20]	; 16fd8 <__assert_fail@plt+0x608c>
   16fc0:	mov	r1, #0
   16fc4:	mov	r0, r4
   16fc8:	bl	10df0 <error@plt>
   16fcc:	bl	10f34 <abort@plt>
   16fd0:	strdeq	sl, [r2], -r4
   16fd4:	andeq	r9, r1, ip, ror #16
   16fd8:	andeq	r9, r1, r0, lsl #17
   16fdc:	push	{fp}		; (str fp, [sp, #-4]!)
   16fe0:	add	fp, sp, #0
   16fe4:	nop			; (mov r0, r0)
   16fe8:	add	sp, fp, #0
   16fec:	pop	{fp}		; (ldr fp, [sp], #4)
   16ff0:	bx	lr
   16ff4:	push	{fp, lr}
   16ff8:	add	fp, sp, #4
   16ffc:	sub	sp, sp, #8
   17000:	str	r0, [fp, #-8]
   17004:	str	r1, [fp, #-12]
   17008:	ldr	r1, [fp, #-12]
   1700c:	ldr	r0, [fp, #-8]
   17010:	bl	17b98 <__assert_fail@plt+0x6c4c>
   17014:	mov	r3, r0
   17018:	cmp	r3, #0
   1701c:	bge	17024 <__assert_fail@plt+0x60d8>
   17020:	bl	16fdc <__assert_fail@plt+0x6090>
   17024:	nop			; (mov r0, r0)
   17028:	sub	sp, fp, #4
   1702c:	pop	{fp, pc}
   17030:	push	{r4, r5, fp, lr}
   17034:	add	fp, sp, #12
   17038:	sub	sp, sp, #16
   1703c:	str	r0, [fp, #-24]	; 0xffffffe8
   17040:	str	r1, [fp, #-28]	; 0xffffffe4
   17044:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17048:	cmp	r3, #0
   1704c:	bge	17120 <__assert_fail@plt+0x61d4>
   17050:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17054:	ldrd	r2, [r3]
   17058:	cmp	r2, #0
   1705c:	sbcs	r3, r3, #0
   17060:	bge	170a4 <__assert_fail@plt+0x6158>
   17064:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17068:	ldrd	r4, [r3]
   1706c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17070:	mov	r2, r3
   17074:	asr	r3, r2, #31
   17078:	mvn	r0, #0
   1707c:	mvn	r1, #-2147483648	; 0x80000000
   17080:	bl	18984 <__assert_fail@plt+0x7a38>
   17084:	mov	r2, r0
   17088:	mov	r3, r1
   1708c:	cmp	r4, r2
   17090:	sbcs	r3, r5, r3
   17094:	movlt	r3, #1
   17098:	movge	r3, #0
   1709c:	uxtb	r3, r3
   170a0:	b	1721c <__assert_fail@plt+0x62d0>
   170a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   170a8:	cmn	r3, #1
   170ac:	bne	170d8 <__assert_fail@plt+0x618c>
   170b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170b4:	ldrd	r2, [r3]
   170b8:	adds	r2, r2, #0
   170bc:	adc	r3, r3, #-2147483648	; 0x80000000
   170c0:	cmp	r2, #1
   170c4:	sbcs	r3, r3, #0
   170c8:	movge	r3, #1
   170cc:	movlt	r3, #0
   170d0:	uxtb	r3, r3
   170d4:	b	1721c <__assert_fail@plt+0x62d0>
   170d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   170dc:	mov	r2, r3
   170e0:	asr	r3, r2, #31
   170e4:	mov	r0, #0
   170e8:	mov	r1, #-2147483648	; 0x80000000
   170ec:	bl	18984 <__assert_fail@plt+0x7a38>
   170f0:	mov	r2, r0
   170f4:	mov	r3, r1
   170f8:	mov	r0, r2
   170fc:	mov	r1, r3
   17100:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17104:	ldrd	r2, [r3]
   17108:	cmp	r0, r2
   1710c:	sbcs	r3, r1, r3
   17110:	movlt	r3, #1
   17114:	movge	r3, #0
   17118:	uxtb	r3, r3
   1711c:	b	1721c <__assert_fail@plt+0x62d0>
   17120:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17124:	cmp	r3, #0
   17128:	beq	17218 <__assert_fail@plt+0x62cc>
   1712c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17130:	ldrd	r2, [r3]
   17134:	cmp	r2, #0
   17138:	sbcs	r3, r3, #0
   1713c:	bge	171d0 <__assert_fail@plt+0x6284>
   17140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17144:	ldrd	r2, [r3]
   17148:	mvn	r0, #0
   1714c:	mvn	r1, #0
   17150:	cmp	r3, r1
   17154:	cmpeq	r2, r0
   17158:	bne	17188 <__assert_fail@plt+0x623c>
   1715c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17160:	mov	r2, r3
   17164:	asr	r3, r2, #31
   17168:	adds	r2, r2, #0
   1716c:	adc	r3, r3, #-2147483648	; 0x80000000
   17170:	cmp	r2, #1
   17174:	sbcs	r3, r3, #0
   17178:	movge	r3, #1
   1717c:	movlt	r3, #0
   17180:	uxtb	r3, r3
   17184:	b	1721c <__assert_fail@plt+0x62d0>
   17188:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1718c:	ldrd	r2, [r3]
   17190:	mov	r0, #0
   17194:	mov	r1, #-2147483648	; 0x80000000
   17198:	bl	18984 <__assert_fail@plt+0x7a38>
   1719c:	mov	r2, r0
   171a0:	mov	r3, r1
   171a4:	mov	r0, r2
   171a8:	mov	r1, r3
   171ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171b0:	mov	r2, r3
   171b4:	asr	r3, r2, #31
   171b8:	cmp	r0, r2
   171bc:	sbcs	r3, r1, r3
   171c0:	movlt	r3, #1
   171c4:	movge	r3, #0
   171c8:	uxtb	r3, r3
   171cc:	b	1721c <__assert_fail@plt+0x62d0>
   171d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171d4:	mov	r2, r3
   171d8:	asr	r3, r2, #31
   171dc:	mvn	r0, #0
   171e0:	mvn	r1, #-2147483648	; 0x80000000
   171e4:	bl	18984 <__assert_fail@plt+0x7a38>
   171e8:	mov	r2, r0
   171ec:	mov	r3, r1
   171f0:	mov	r0, r2
   171f4:	mov	r1, r3
   171f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171fc:	ldrd	r2, [r3]
   17200:	cmp	r0, r2
   17204:	sbcs	r3, r1, r3
   17208:	movlt	r3, #1
   1720c:	movge	r3, #0
   17210:	uxtb	r3, r3
   17214:	b	1721c <__assert_fail@plt+0x62d0>
   17218:	mov	r3, #0
   1721c:	cmp	r3, #0
   17220:	beq	17264 <__assert_fail@plt+0x6318>
   17224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17228:	ldrd	r2, [r3]
   1722c:	mov	r0, r2
   17230:	mov	r1, r3
   17234:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17238:	mov	r2, r3
   1723c:	asr	r3, r2, #31
   17240:	mul	lr, r2, r1
   17244:	mul	ip, r0, r3
   17248:	add	ip, lr, ip
   1724c:	umull	r2, r3, r0, r2
   17250:	add	r1, ip, r3
   17254:	mov	r3, r1
   17258:	strd	r2, [fp, #-20]	; 0xffffffec
   1725c:	mov	r3, #1
   17260:	b	172a0 <__assert_fail@plt+0x6354>
   17264:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17268:	ldrd	r2, [r3]
   1726c:	mov	r0, r2
   17270:	mov	r1, r3
   17274:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17278:	mov	r2, r3
   1727c:	asr	r3, r2, #31
   17280:	mul	lr, r2, r1
   17284:	mul	ip, r0, r3
   17288:	add	ip, lr, ip
   1728c:	umull	r2, r3, r0, r2
   17290:	add	r1, ip, r3
   17294:	mov	r3, r1
   17298:	strd	r2, [fp, #-20]	; 0xffffffec
   1729c:	mov	r3, #0
   172a0:	cmp	r3, #0
   172a4:	beq	172e0 <__assert_fail@plt+0x6394>
   172a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172ac:	ldrd	r2, [r3]
   172b0:	cmp	r2, #0
   172b4:	sbcs	r3, r3, #0
   172b8:	bge	172c8 <__assert_fail@plt+0x637c>
   172bc:	mov	r2, #0
   172c0:	mov	r3, #-2147483648	; 0x80000000
   172c4:	b	172d0 <__assert_fail@plt+0x6384>
   172c8:	mvn	r2, #0
   172cc:	mvn	r3, #-2147483648	; 0x80000000
   172d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   172d4:	strd	r2, [r1]
   172d8:	mov	r3, #1
   172dc:	b	172f0 <__assert_fail@plt+0x63a4>
   172e0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   172e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   172e8:	strd	r2, [r1]
   172ec:	mov	r3, #0
   172f0:	mov	r0, r3
   172f4:	sub	sp, fp, #12
   172f8:	pop	{r4, r5, fp, pc}
   172fc:	push	{fp, lr}
   17300:	add	fp, sp, #4
   17304:	sub	sp, sp, #24
   17308:	str	r0, [fp, #-16]
   1730c:	str	r1, [fp, #-20]	; 0xffffffec
   17310:	str	r2, [fp, #-24]	; 0xffffffe8
   17314:	mov	r3, #0
   17318:	str	r3, [fp, #-8]
   1731c:	b	1733c <__assert_fail@plt+0x63f0>
   17320:	ldr	r1, [fp, #-20]	; 0xffffffec
   17324:	ldr	r0, [fp, #-16]
   17328:	bl	17030 <__assert_fail@plt+0x60e4>
   1732c:	mov	r2, r0
   17330:	ldr	r3, [fp, #-8]
   17334:	orr	r3, r3, r2
   17338:	str	r3, [fp, #-8]
   1733c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17340:	sub	r2, r3, #1
   17344:	str	r2, [fp, #-24]	; 0xffffffe8
   17348:	cmp	r3, #0
   1734c:	bne	17320 <__assert_fail@plt+0x63d4>
   17350:	ldr	r3, [fp, #-8]
   17354:	mov	r0, r3
   17358:	sub	sp, fp, #4
   1735c:	pop	{fp, pc}
   17360:	push	{fp, lr}
   17364:	add	fp, sp, #4
   17368:	sub	sp, sp, #48	; 0x30
   1736c:	str	r0, [fp, #-40]	; 0xffffffd8
   17370:	str	r1, [fp, #-44]	; 0xffffffd4
   17374:	str	r2, [fp, #-48]	; 0xffffffd0
   17378:	str	r3, [fp, #-52]	; 0xffffffcc
   1737c:	mov	r3, #0
   17380:	str	r3, [fp, #-8]
   17384:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17388:	cmp	r3, #0
   1738c:	blt	1739c <__assert_fail@plt+0x6450>
   17390:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17394:	cmp	r3, #36	; 0x24
   17398:	ble	173b0 <__assert_fail@plt+0x6464>
   1739c:	ldr	r3, [pc, #1412]	; 17928 <__assert_fail@plt+0x69dc>
   173a0:	mov	r2, #85	; 0x55
   173a4:	ldr	r1, [pc, #1408]	; 1792c <__assert_fail@plt+0x69e0>
   173a8:	ldr	r0, [pc, #1408]	; 17930 <__assert_fail@plt+0x69e4>
   173ac:	bl	10f4c <__assert_fail@plt>
   173b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   173b4:	cmp	r3, #0
   173b8:	bne	173c4 <__assert_fail@plt+0x6478>
   173bc:	sub	r3, fp, #28
   173c0:	b	173c8 <__assert_fail@plt+0x647c>
   173c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   173c8:	str	r3, [fp, #-24]	; 0xffffffe8
   173cc:	bl	10e80 <__errno_location@plt>
   173d0:	mov	r2, r0
   173d4:	mov	r3, #0
   173d8:	str	r3, [r2]
   173dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   173e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   173e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   173e8:	bl	10ebc <strtoimax@plt>
   173ec:	mov	r2, r0
   173f0:	mov	r3, r1
   173f4:	strd	r2, [fp, #-36]	; 0xffffffdc
   173f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173fc:	ldr	r2, [r3]
   17400:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17404:	cmp	r2, r3
   17408:	bne	17468 <__assert_fail@plt+0x651c>
   1740c:	ldr	r3, [fp, #4]
   17410:	cmp	r3, #0
   17414:	beq	17460 <__assert_fail@plt+0x6514>
   17418:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1741c:	ldr	r3, [r3]
   17420:	ldrb	r3, [r3]
   17424:	cmp	r3, #0
   17428:	beq	17460 <__assert_fail@plt+0x6514>
   1742c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17430:	ldr	r3, [r3]
   17434:	ldrb	r3, [r3]
   17438:	mov	r1, r3
   1743c:	ldr	r0, [fp, #4]
   17440:	bl	10e68 <strchr@plt>
   17444:	mov	r3, r0
   17448:	cmp	r3, #0
   1744c:	beq	17460 <__assert_fail@plt+0x6514>
   17450:	mov	r2, #1
   17454:	mov	r3, #0
   17458:	strd	r2, [fp, #-36]	; 0xffffffdc
   1745c:	b	174a0 <__assert_fail@plt+0x6554>
   17460:	mov	r3, #4
   17464:	b	1791c <__assert_fail@plt+0x69d0>
   17468:	bl	10e80 <__errno_location@plt>
   1746c:	mov	r3, r0
   17470:	ldr	r3, [r3]
   17474:	cmp	r3, #0
   17478:	beq	174a0 <__assert_fail@plt+0x6554>
   1747c:	bl	10e80 <__errno_location@plt>
   17480:	mov	r3, r0
   17484:	ldr	r3, [r3]
   17488:	cmp	r3, #34	; 0x22
   1748c:	beq	17498 <__assert_fail@plt+0x654c>
   17490:	mov	r3, #4
   17494:	b	1791c <__assert_fail@plt+0x69d0>
   17498:	mov	r3, #1
   1749c:	str	r3, [fp, #-8]
   174a0:	ldr	r3, [fp, #4]
   174a4:	cmp	r3, #0
   174a8:	bne	174c0 <__assert_fail@plt+0x6574>
   174ac:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   174b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   174b4:	strd	r2, [r1]
   174b8:	ldr	r3, [fp, #-8]
   174bc:	b	1791c <__assert_fail@plt+0x69d0>
   174c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174c4:	ldr	r3, [r3]
   174c8:	ldrb	r3, [r3]
   174cc:	cmp	r3, #0
   174d0:	beq	1790c <__assert_fail@plt+0x69c0>
   174d4:	mov	r3, #1024	; 0x400
   174d8:	str	r3, [fp, #-12]
   174dc:	mov	r3, #1
   174e0:	str	r3, [fp, #-16]
   174e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174e8:	ldr	r3, [r3]
   174ec:	ldrb	r3, [r3]
   174f0:	mov	r1, r3
   174f4:	ldr	r0, [fp, #4]
   174f8:	bl	10e68 <strchr@plt>
   174fc:	mov	r3, r0
   17500:	cmp	r3, #0
   17504:	bne	17520 <__assert_fail@plt+0x65d4>
   17508:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1750c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17510:	strd	r2, [r1]
   17514:	ldr	r3, [fp, #-8]
   17518:	orr	r3, r3, #2
   1751c:	b	1791c <__assert_fail@plt+0x69d0>
   17520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17524:	ldr	r3, [r3]
   17528:	ldrb	r3, [r3]
   1752c:	sub	r3, r3, #69	; 0x45
   17530:	cmp	r3, #47	; 0x2f
   17534:	ldrls	pc, [pc, r3, lsl #2]
   17538:	b	17684 <__assert_fail@plt+0x6738>
   1753c:	strdeq	r7, [r1], -ip
   17540:	andeq	r7, r1, r4, lsl #13
   17544:	strdeq	r7, [r1], -ip
   17548:	andeq	r7, r1, r4, lsl #13
   1754c:	andeq	r7, r1, r4, lsl #13
   17550:	andeq	r7, r1, r4, lsl #13
   17554:	strdeq	r7, [r1], -ip
   17558:	andeq	r7, r1, r4, lsl #13
   1755c:	strdeq	r7, [r1], -ip
   17560:	andeq	r7, r1, r4, lsl #13
   17564:	andeq	r7, r1, r4, lsl #13
   17568:	strdeq	r7, [r1], -ip
   1756c:	andeq	r7, r1, r4, lsl #13
   17570:	andeq	r7, r1, r4, lsl #13
   17574:	andeq	r7, r1, r4, lsl #13
   17578:	strdeq	r7, [r1], -ip
   1757c:	andeq	r7, r1, r4, lsl #13
   17580:	andeq	r7, r1, r4, lsl #13
   17584:	andeq	r7, r1, r4, lsl #13
   17588:	andeq	r7, r1, r4, lsl #13
   1758c:	strdeq	r7, [r1], -ip
   17590:	strdeq	r7, [r1], -ip
   17594:	andeq	r7, r1, r4, lsl #13
   17598:	andeq	r7, r1, r4, lsl #13
   1759c:	andeq	r7, r1, r4, lsl #13
   175a0:	andeq	r7, r1, r4, lsl #13
   175a4:	andeq	r7, r1, r4, lsl #13
   175a8:	andeq	r7, r1, r4, lsl #13
   175ac:	andeq	r7, r1, r4, lsl #13
   175b0:	andeq	r7, r1, r4, lsl #13
   175b4:	andeq	r7, r1, r4, lsl #13
   175b8:	andeq	r7, r1, r4, lsl #13
   175bc:	andeq	r7, r1, r4, lsl #13
   175c0:	andeq	r7, r1, r4, lsl #13
   175c4:	strdeq	r7, [r1], -ip
   175c8:	andeq	r7, r1, r4, lsl #13
   175cc:	andeq	r7, r1, r4, lsl #13
   175d0:	andeq	r7, r1, r4, lsl #13
   175d4:	strdeq	r7, [r1], -ip
   175d8:	andeq	r7, r1, r4, lsl #13
   175dc:	strdeq	r7, [r1], -ip
   175e0:	andeq	r7, r1, r4, lsl #13
   175e4:	andeq	r7, r1, r4, lsl #13
   175e8:	andeq	r7, r1, r4, lsl #13
   175ec:	andeq	r7, r1, r4, lsl #13
   175f0:	andeq	r7, r1, r4, lsl #13
   175f4:	andeq	r7, r1, r4, lsl #13
   175f8:	strdeq	r7, [r1], -ip
   175fc:	mov	r1, #48	; 0x30
   17600:	ldr	r0, [fp, #4]
   17604:	bl	10e68 <strchr@plt>
   17608:	mov	r3, r0
   1760c:	cmp	r3, #0
   17610:	beq	17684 <__assert_fail@plt+0x6738>
   17614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17618:	ldr	r3, [r3]
   1761c:	add	r3, r3, #1
   17620:	ldrb	r3, [r3]
   17624:	cmp	r3, #68	; 0x44
   17628:	beq	17668 <__assert_fail@plt+0x671c>
   1762c:	cmp	r3, #105	; 0x69
   17630:	beq	17640 <__assert_fail@plt+0x66f4>
   17634:	cmp	r3, #66	; 0x42
   17638:	beq	17668 <__assert_fail@plt+0x671c>
   1763c:	b	17684 <__assert_fail@plt+0x6738>
   17640:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17644:	ldr	r3, [r3]
   17648:	add	r3, r3, #2
   1764c:	ldrb	r3, [r3]
   17650:	cmp	r3, #66	; 0x42
   17654:	bne	17680 <__assert_fail@plt+0x6734>
   17658:	ldr	r3, [fp, #-16]
   1765c:	add	r3, r3, #2
   17660:	str	r3, [fp, #-16]
   17664:	b	17680 <__assert_fail@plt+0x6734>
   17668:	mov	r3, #1000	; 0x3e8
   1766c:	str	r3, [fp, #-12]
   17670:	ldr	r3, [fp, #-16]
   17674:	add	r3, r3, #1
   17678:	str	r3, [fp, #-16]
   1767c:	b	17684 <__assert_fail@plt+0x6738>
   17680:	nop			; (mov r0, r0)
   17684:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17688:	ldr	r3, [r3]
   1768c:	ldrb	r3, [r3]
   17690:	sub	r3, r3, #66	; 0x42
   17694:	cmp	r3, #53	; 0x35
   17698:	ldrls	pc, [pc, r3, lsl #2]
   1769c:	b	178ac <__assert_fail@plt+0x6960>
   176a0:	muleq	r1, r0, r7
   176a4:	andeq	r7, r1, ip, lsr #17
   176a8:	andeq	r7, r1, ip, lsr #17
   176ac:			; <UNDEFINED> instruction: 0x000177b4
   176b0:	andeq	r7, r1, ip, lsr #17
   176b4:	ldrdeq	r7, [r1], -r0
   176b8:	andeq	r7, r1, ip, lsr #17
   176bc:	andeq	r7, r1, ip, lsr #17
   176c0:	andeq	r7, r1, ip, lsr #17
   176c4:	andeq	r7, r1, ip, ror #15
   176c8:	andeq	r7, r1, ip, lsr #17
   176cc:	andeq	r7, r1, r8, lsl #16
   176d0:	andeq	r7, r1, ip, lsr #17
   176d4:	andeq	r7, r1, ip, lsr #17
   176d8:	andeq	r7, r1, r4, lsr #16
   176dc:	andeq	r7, r1, ip, lsr #17
   176e0:	andeq	r7, r1, ip, lsr #17
   176e4:	andeq	r7, r1, ip, lsr #17
   176e8:	andeq	r7, r1, r0, asr #16
   176ec:	andeq	r7, r1, ip, lsr #17
   176f0:	andeq	r7, r1, ip, lsr #17
   176f4:	andeq	r7, r1, ip, lsr #17
   176f8:	andeq	r7, r1, ip, lsr #17
   176fc:	andeq	r7, r1, r4, ror r8
   17700:	muleq	r1, r0, r8
   17704:	andeq	r7, r1, ip, lsr #17
   17708:	andeq	r7, r1, ip, lsr #17
   1770c:	andeq	r7, r1, ip, lsr #17
   17710:	andeq	r7, r1, ip, lsr #17
   17714:	andeq	r7, r1, ip, lsr #17
   17718:	andeq	r7, r1, ip, lsr #17
   1771c:	andeq	r7, r1, ip, lsr #17
   17720:	andeq	r7, r1, r8, ror r7
   17724:	andeq	r7, r1, r8, lsr #15
   17728:	andeq	r7, r1, ip, lsr #17
   1772c:	andeq	r7, r1, ip, lsr #17
   17730:	andeq	r7, r1, ip, lsr #17
   17734:	ldrdeq	r7, [r1], -r0
   17738:	andeq	r7, r1, ip, lsr #17
   1773c:	andeq	r7, r1, ip, lsr #17
   17740:	andeq	r7, r1, ip, lsr #17
   17744:	andeq	r7, r1, ip, ror #15
   17748:	andeq	r7, r1, ip, lsr #17
   1774c:	andeq	r7, r1, r8, lsl #16
   17750:	andeq	r7, r1, ip, lsr #17
   17754:	andeq	r7, r1, ip, lsr #17
   17758:	andeq	r7, r1, ip, lsr #17
   1775c:	andeq	r7, r1, ip, lsr #17
   17760:	andeq	r7, r1, ip, lsr #17
   17764:	andeq	r7, r1, ip, lsr #17
   17768:	andeq	r7, r1, r0, asr #16
   1776c:	andeq	r7, r1, ip, lsr #17
   17770:	andeq	r7, r1, ip, lsr #17
   17774:	andeq	r7, r1, ip, asr r8
   17778:	sub	r3, fp, #36	; 0x24
   1777c:	mov	r1, #512	; 0x200
   17780:	mov	r0, r3
   17784:	bl	17030 <__assert_fail@plt+0x60e4>
   17788:	str	r0, [fp, #-20]	; 0xffffffec
   1778c:	b	178c4 <__assert_fail@plt+0x6978>
   17790:	sub	r3, fp, #36	; 0x24
   17794:	mov	r1, #1024	; 0x400
   17798:	mov	r0, r3
   1779c:	bl	17030 <__assert_fail@plt+0x60e4>
   177a0:	str	r0, [fp, #-20]	; 0xffffffec
   177a4:	b	178c4 <__assert_fail@plt+0x6978>
   177a8:	mov	r3, #0
   177ac:	str	r3, [fp, #-20]	; 0xffffffec
   177b0:	b	178c4 <__assert_fail@plt+0x6978>
   177b4:	sub	r3, fp, #36	; 0x24
   177b8:	mov	r2, #6
   177bc:	ldr	r1, [fp, #-12]
   177c0:	mov	r0, r3
   177c4:	bl	172fc <__assert_fail@plt+0x63b0>
   177c8:	str	r0, [fp, #-20]	; 0xffffffec
   177cc:	b	178c4 <__assert_fail@plt+0x6978>
   177d0:	sub	r3, fp, #36	; 0x24
   177d4:	mov	r2, #3
   177d8:	ldr	r1, [fp, #-12]
   177dc:	mov	r0, r3
   177e0:	bl	172fc <__assert_fail@plt+0x63b0>
   177e4:	str	r0, [fp, #-20]	; 0xffffffec
   177e8:	b	178c4 <__assert_fail@plt+0x6978>
   177ec:	sub	r3, fp, #36	; 0x24
   177f0:	mov	r2, #1
   177f4:	ldr	r1, [fp, #-12]
   177f8:	mov	r0, r3
   177fc:	bl	172fc <__assert_fail@plt+0x63b0>
   17800:	str	r0, [fp, #-20]	; 0xffffffec
   17804:	b	178c4 <__assert_fail@plt+0x6978>
   17808:	sub	r3, fp, #36	; 0x24
   1780c:	mov	r2, #2
   17810:	ldr	r1, [fp, #-12]
   17814:	mov	r0, r3
   17818:	bl	172fc <__assert_fail@plt+0x63b0>
   1781c:	str	r0, [fp, #-20]	; 0xffffffec
   17820:	b	178c4 <__assert_fail@plt+0x6978>
   17824:	sub	r3, fp, #36	; 0x24
   17828:	mov	r2, #5
   1782c:	ldr	r1, [fp, #-12]
   17830:	mov	r0, r3
   17834:	bl	172fc <__assert_fail@plt+0x63b0>
   17838:	str	r0, [fp, #-20]	; 0xffffffec
   1783c:	b	178c4 <__assert_fail@plt+0x6978>
   17840:	sub	r3, fp, #36	; 0x24
   17844:	mov	r2, #4
   17848:	ldr	r1, [fp, #-12]
   1784c:	mov	r0, r3
   17850:	bl	172fc <__assert_fail@plt+0x63b0>
   17854:	str	r0, [fp, #-20]	; 0xffffffec
   17858:	b	178c4 <__assert_fail@plt+0x6978>
   1785c:	sub	r3, fp, #36	; 0x24
   17860:	mov	r1, #2
   17864:	mov	r0, r3
   17868:	bl	17030 <__assert_fail@plt+0x60e4>
   1786c:	str	r0, [fp, #-20]	; 0xffffffec
   17870:	b	178c4 <__assert_fail@plt+0x6978>
   17874:	sub	r3, fp, #36	; 0x24
   17878:	mov	r2, #8
   1787c:	ldr	r1, [fp, #-12]
   17880:	mov	r0, r3
   17884:	bl	172fc <__assert_fail@plt+0x63b0>
   17888:	str	r0, [fp, #-20]	; 0xffffffec
   1788c:	b	178c4 <__assert_fail@plt+0x6978>
   17890:	sub	r3, fp, #36	; 0x24
   17894:	mov	r2, #7
   17898:	ldr	r1, [fp, #-12]
   1789c:	mov	r0, r3
   178a0:	bl	172fc <__assert_fail@plt+0x63b0>
   178a4:	str	r0, [fp, #-20]	; 0xffffffec
   178a8:	b	178c4 <__assert_fail@plt+0x6978>
   178ac:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   178b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   178b4:	strd	r2, [r1]
   178b8:	ldr	r3, [fp, #-8]
   178bc:	orr	r3, r3, #2
   178c0:	b	1791c <__assert_fail@plt+0x69d0>
   178c4:	ldr	r2, [fp, #-8]
   178c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   178cc:	orr	r3, r2, r3
   178d0:	str	r3, [fp, #-8]
   178d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178d8:	ldr	r2, [r3]
   178dc:	ldr	r3, [fp, #-16]
   178e0:	add	r2, r2, r3
   178e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178e8:	str	r2, [r3]
   178ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178f0:	ldr	r3, [r3]
   178f4:	ldrb	r3, [r3]
   178f8:	cmp	r3, #0
   178fc:	beq	1790c <__assert_fail@plt+0x69c0>
   17900:	ldr	r3, [fp, #-8]
   17904:	orr	r3, r3, #2
   17908:	str	r3, [fp, #-8]
   1790c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17910:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17914:	strd	r2, [r1]
   17918:	ldr	r3, [fp, #-8]
   1791c:	mov	r0, r3
   17920:	sub	sp, fp, #4
   17924:	pop	{fp, pc}
   17928:			; <UNDEFINED> instruction: 0x000198bc
   1792c:	andeq	r9, r1, r4, lsl #17
   17930:	muleq	r1, r4, r8
   17934:	push	{r4, r5, fp, lr}
   17938:	add	fp, sp, #12
   1793c:	sub	sp, sp, #16
   17940:	str	r0, [fp, #-24]	; 0xffffffe8
   17944:	str	r1, [fp, #-28]	; 0xffffffe4
   17948:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1794c:	cmp	r3, #0
   17950:	beq	17960 <__assert_fail@plt+0x6a14>
   17954:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17958:	cmp	r3, #0
   1795c:	bne	17970 <__assert_fail@plt+0x6a24>
   17960:	mov	r3, #1
   17964:	str	r3, [fp, #-28]	; 0xffffffe4
   17968:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1796c:	str	r3, [fp, #-24]	; 0xffffffe8
   17970:	mov	r1, #0
   17974:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17978:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1797c:	umull	r2, r3, r2, r3
   17980:	mov	r4, r3
   17984:	mov	r5, #0
   17988:	cmp	r4, #0
   1798c:	beq	17994 <__assert_fail@plt+0x6a48>
   17990:	mov	r1, #1
   17994:	cmp	r2, #0
   17998:	bge	179a0 <__assert_fail@plt+0x6a54>
   1799c:	mov	r1, #1
   179a0:	mov	r3, r2
   179a4:	str	r3, [fp, #-20]	; 0xffffffec
   179a8:	mov	r3, r1
   179ac:	and	r3, r3, #1
   179b0:	uxtb	r3, r3
   179b4:	cmp	r3, #0
   179b8:	beq	179d4 <__assert_fail@plt+0x6a88>
   179bc:	bl	10e80 <__errno_location@plt>
   179c0:	mov	r2, r0
   179c4:	mov	r3, #12
   179c8:	str	r3, [r2]
   179cc:	mov	r3, #0
   179d0:	b	179ec <__assert_fail@plt+0x6aa0>
   179d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   179d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179dc:	bl	10cd0 <calloc@plt>
   179e0:	mov	r3, r0
   179e4:	str	r3, [fp, #-16]
   179e8:	ldr	r3, [fp, #-16]
   179ec:	mov	r0, r3
   179f0:	sub	sp, fp, #12
   179f4:	pop	{r4, r5, fp, pc}
   179f8:	push	{r4, r5, fp, lr}
   179fc:	add	fp, sp, #12
   17a00:	sub	sp, sp, #16
   17a04:	str	r0, [fp, #-24]	; 0xffffffe8
   17a08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a0c:	cmp	r3, #0
   17a10:	bne	17a1c <__assert_fail@plt+0x6ad0>
   17a14:	mov	r3, #1
   17a18:	str	r3, [fp, #-24]	; 0xffffffe8
   17a1c:	mov	r1, #0
   17a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a24:	mov	r2, r3
   17a28:	mov	r3, #0
   17a2c:	mov	r4, r3
   17a30:	mov	r5, #0
   17a34:	cmp	r4, #0
   17a38:	beq	17a40 <__assert_fail@plt+0x6af4>
   17a3c:	mov	r1, #1
   17a40:	cmp	r2, #0
   17a44:	bge	17a4c <__assert_fail@plt+0x6b00>
   17a48:	mov	r1, #1
   17a4c:	mov	r3, r2
   17a50:	str	r3, [fp, #-20]	; 0xffffffec
   17a54:	mov	r3, r1
   17a58:	and	r3, r3, #1
   17a5c:	uxtb	r3, r3
   17a60:	cmp	r3, #0
   17a64:	beq	17a80 <__assert_fail@plt+0x6b34>
   17a68:	bl	10e80 <__errno_location@plt>
   17a6c:	mov	r2, r0
   17a70:	mov	r3, #12
   17a74:	str	r3, [r2]
   17a78:	mov	r3, #0
   17a7c:	b	17a94 <__assert_fail@plt+0x6b48>
   17a80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a84:	bl	10dfc <malloc@plt>
   17a88:	mov	r3, r0
   17a8c:	str	r3, [fp, #-16]
   17a90:	ldr	r3, [fp, #-16]
   17a94:	mov	r0, r3
   17a98:	sub	sp, fp, #12
   17a9c:	pop	{r4, r5, fp, pc}
   17aa0:	push	{r4, r5, fp, lr}
   17aa4:	add	fp, sp, #12
   17aa8:	sub	sp, sp, #16
   17aac:	str	r0, [fp, #-24]	; 0xffffffe8
   17ab0:	str	r1, [fp, #-28]	; 0xffffffe4
   17ab4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ab8:	cmp	r3, #0
   17abc:	bne	17ad0 <__assert_fail@plt+0x6b84>
   17ac0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17ac4:	bl	179f8 <__assert_fail@plt+0x6aac>
   17ac8:	mov	r3, r0
   17acc:	b	17b64 <__assert_fail@plt+0x6c18>
   17ad0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ad4:	cmp	r3, #0
   17ad8:	bne	17aec <__assert_fail@plt+0x6ba0>
   17adc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ae0:	bl	131e0 <__assert_fail@plt+0x2294>
   17ae4:	mov	r3, #0
   17ae8:	b	17b64 <__assert_fail@plt+0x6c18>
   17aec:	mov	r1, #0
   17af0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17af4:	mov	r2, r3
   17af8:	mov	r3, #0
   17afc:	mov	r4, r3
   17b00:	mov	r5, #0
   17b04:	cmp	r4, #0
   17b08:	beq	17b10 <__assert_fail@plt+0x6bc4>
   17b0c:	mov	r1, #1
   17b10:	cmp	r2, #0
   17b14:	bge	17b1c <__assert_fail@plt+0x6bd0>
   17b18:	mov	r1, #1
   17b1c:	mov	r3, r2
   17b20:	str	r3, [fp, #-20]	; 0xffffffec
   17b24:	mov	r3, r1
   17b28:	and	r3, r3, #1
   17b2c:	uxtb	r3, r3
   17b30:	cmp	r3, #0
   17b34:	beq	17b50 <__assert_fail@plt+0x6c04>
   17b38:	bl	10e80 <__errno_location@plt>
   17b3c:	mov	r2, r0
   17b40:	mov	r3, #12
   17b44:	str	r3, [r2]
   17b48:	mov	r3, #0
   17b4c:	b	17b64 <__assert_fail@plt+0x6c18>
   17b50:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17b54:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b58:	bl	10d84 <realloc@plt>
   17b5c:	str	r0, [fp, #-16]
   17b60:	ldr	r3, [fp, #-16]
   17b64:	mov	r0, r3
   17b68:	sub	sp, fp, #12
   17b6c:	pop	{r4, r5, fp, pc}
   17b70:	push	{fp}		; (str fp, [sp, #-4]!)
   17b74:	add	fp, sp, #0
   17b78:	sub	sp, sp, #12
   17b7c:	str	r0, [fp, #-8]
   17b80:	str	r1, [fp, #-12]
   17b84:	mov	r3, #0
   17b88:	mov	r0, r3
   17b8c:	add	sp, fp, #0
   17b90:	pop	{fp}		; (ldr fp, [sp], #4)
   17b94:	bx	lr
   17b98:	push	{fp, lr}
   17b9c:	add	fp, sp, #4
   17ba0:	sub	sp, sp, #8
   17ba4:	str	r0, [fp, #-8]
   17ba8:	str	r1, [fp, #-12]
   17bac:	ldr	r1, [fp, #-12]
   17bb0:	ldr	r0, [fp, #-8]
   17bb4:	bl	17b70 <__assert_fail@plt+0x6c24>
   17bb8:	mov	r3, r0
   17bbc:	mov	r0, r3
   17bc0:	sub	sp, fp, #4
   17bc4:	pop	{fp, pc}
   17bc8:	push	{r4, r5, fp, lr}
   17bcc:	add	fp, sp, #12
   17bd0:	sub	sp, sp, #16
   17bd4:	str	r0, [fp, #-24]	; 0xffffffe8
   17bd8:	str	r1, [fp, #-28]	; 0xffffffe4
   17bdc:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17be0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17be4:	cmp	r5, r4
   17be8:	bne	17bf4 <__assert_fail@plt+0x6ca8>
   17bec:	mov	r3, #0
   17bf0:	b	17c54 <__assert_fail@plt+0x6d08>
   17bf4:	ldrb	r3, [r5]
   17bf8:	mov	r0, r3
   17bfc:	bl	182b4 <__assert_fail@plt+0x7368>
   17c00:	mov	r3, r0
   17c04:	strb	r3, [fp, #-13]
   17c08:	ldrb	r3, [r4]
   17c0c:	mov	r0, r3
   17c10:	bl	182b4 <__assert_fail@plt+0x7368>
   17c14:	mov	r3, r0
   17c18:	strb	r3, [fp, #-14]
   17c1c:	ldrb	r3, [fp, #-13]
   17c20:	cmp	r3, #0
   17c24:	beq	17c44 <__assert_fail@plt+0x6cf8>
   17c28:	add	r5, r5, #1
   17c2c:	add	r4, r4, #1
   17c30:	ldrb	r2, [fp, #-13]
   17c34:	ldrb	r3, [fp, #-14]
   17c38:	cmp	r2, r3
   17c3c:	beq	17bf4 <__assert_fail@plt+0x6ca8>
   17c40:	b	17c48 <__assert_fail@plt+0x6cfc>
   17c44:	nop			; (mov r0, r0)
   17c48:	ldrb	r2, [fp, #-13]
   17c4c:	ldrb	r3, [fp, #-14]
   17c50:	sub	r3, r2, r3
   17c54:	mov	r0, r3
   17c58:	sub	sp, fp, #12
   17c5c:	pop	{r4, r5, fp, pc}
   17c60:	push	{fp, lr}
   17c64:	add	fp, sp, #4
   17c68:	sub	sp, sp, #16
   17c6c:	str	r0, [fp, #-16]
   17c70:	ldr	r0, [fp, #-16]
   17c74:	bl	10dcc <__fpending@plt>
   17c78:	mov	r3, r0
   17c7c:	cmp	r3, #0
   17c80:	movne	r3, #1
   17c84:	moveq	r3, #0
   17c88:	strb	r3, [fp, #-5]
   17c8c:	ldr	r0, [fp, #-16]
   17c90:	bl	10dd8 <ferror_unlocked@plt>
   17c94:	mov	r3, r0
   17c98:	cmp	r3, #0
   17c9c:	movne	r3, #1
   17ca0:	moveq	r3, #0
   17ca4:	strb	r3, [fp, #-6]
   17ca8:	ldr	r0, [fp, #-16]
   17cac:	bl	13040 <__assert_fail@plt+0x20f4>
   17cb0:	mov	r3, r0
   17cb4:	cmp	r3, #0
   17cb8:	movne	r3, #1
   17cbc:	moveq	r3, #0
   17cc0:	strb	r3, [fp, #-7]
   17cc4:	ldrb	r3, [fp, #-6]
   17cc8:	cmp	r3, #0
   17ccc:	bne	17cfc <__assert_fail@plt+0x6db0>
   17cd0:	ldrb	r3, [fp, #-7]
   17cd4:	cmp	r3, #0
   17cd8:	beq	17d28 <__assert_fail@plt+0x6ddc>
   17cdc:	ldrb	r3, [fp, #-5]
   17ce0:	cmp	r3, #0
   17ce4:	bne	17cfc <__assert_fail@plt+0x6db0>
   17ce8:	bl	10e80 <__errno_location@plt>
   17cec:	mov	r3, r0
   17cf0:	ldr	r3, [r3]
   17cf4:	cmp	r3, #9
   17cf8:	beq	17d28 <__assert_fail@plt+0x6ddc>
   17cfc:	ldrb	r3, [fp, #-7]
   17d00:	eor	r3, r3, #1
   17d04:	uxtb	r3, r3
   17d08:	cmp	r3, #0
   17d0c:	beq	17d20 <__assert_fail@plt+0x6dd4>
   17d10:	bl	10e80 <__errno_location@plt>
   17d14:	mov	r2, r0
   17d18:	mov	r3, #0
   17d1c:	str	r3, [r2]
   17d20:	mvn	r3, #0
   17d24:	b	17d2c <__assert_fail@plt+0x6de0>
   17d28:	mov	r3, #0
   17d2c:	mov	r0, r3
   17d30:	sub	sp, fp, #4
   17d34:	pop	{fp, pc}
   17d38:	push	{fp, lr}
   17d3c:	add	fp, sp, #4
   17d40:	sub	sp, sp, #8
   17d44:	mov	r0, #14
   17d48:	bl	10ef8 <nl_langinfo@plt>
   17d4c:	str	r0, [fp, #-8]
   17d50:	ldr	r3, [fp, #-8]
   17d54:	cmp	r3, #0
   17d58:	bne	17d64 <__assert_fail@plt+0x6e18>
   17d5c:	ldr	r3, [pc, #40]	; 17d8c <__assert_fail@plt+0x6e40>
   17d60:	str	r3, [fp, #-8]
   17d64:	ldr	r3, [fp, #-8]
   17d68:	ldrb	r3, [r3]
   17d6c:	cmp	r3, #0
   17d70:	bne	17d7c <__assert_fail@plt+0x6e30>
   17d74:	ldr	r3, [pc, #20]	; 17d90 <__assert_fail@plt+0x6e44>
   17d78:	str	r3, [fp, #-8]
   17d7c:	ldr	r3, [fp, #-8]
   17d80:	mov	r0, r3
   17d84:	sub	sp, fp, #4
   17d88:	pop	{fp, pc}
   17d8c:	andeq	r9, r1, r8, asr #17
   17d90:	andeq	r9, r1, ip, asr #17
   17d94:	push	{fp, lr}
   17d98:	add	fp, sp, #4
   17d9c:	sub	sp, sp, #32
   17da0:	str	r0, [fp, #-24]	; 0xffffffe8
   17da4:	str	r1, [fp, #-28]	; 0xffffffe4
   17da8:	str	r2, [fp, #-32]	; 0xffffffe0
   17dac:	str	r3, [fp, #-36]	; 0xffffffdc
   17db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17db4:	cmp	r3, #0
   17db8:	bne	17dc4 <__assert_fail@plt+0x6e78>
   17dbc:	sub	r3, fp, #16
   17dc0:	str	r3, [fp, #-24]	; 0xffffffe8
   17dc4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17dc8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17dcc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17dd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17dd4:	bl	10de4 <mbrtowc@plt>
   17dd8:	str	r0, [fp, #-8]
   17ddc:	ldr	r3, [fp, #-8]
   17de0:	cmn	r3, #3
   17de4:	bls	17e30 <__assert_fail@plt+0x6ee4>
   17de8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17dec:	cmp	r3, #0
   17df0:	beq	17e30 <__assert_fail@plt+0x6ee4>
   17df4:	mov	r0, #0
   17df8:	bl	18334 <__assert_fail@plt+0x73e8>
   17dfc:	mov	r3, r0
   17e00:	eor	r3, r3, #1
   17e04:	uxtb	r3, r3
   17e08:	cmp	r3, #0
   17e0c:	beq	17e30 <__assert_fail@plt+0x6ee4>
   17e10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17e14:	ldrb	r3, [r3]
   17e18:	strb	r3, [fp, #-9]
   17e1c:	ldrb	r2, [fp, #-9]
   17e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e24:	str	r2, [r3]
   17e28:	mov	r3, #1
   17e2c:	b	17e34 <__assert_fail@plt+0x6ee8>
   17e30:	ldr	r3, [fp, #-8]
   17e34:	mov	r0, r3
   17e38:	sub	sp, fp, #4
   17e3c:	pop	{fp, pc}
   17e40:	push	{fp}		; (str fp, [sp, #-4]!)
   17e44:	add	fp, sp, #0
   17e48:	sub	sp, sp, #12
   17e4c:	str	r0, [fp, #-8]
   17e50:	ldr	r3, [fp, #-8]
   17e54:	cmp	r3, #90	; 0x5a
   17e58:	bgt	17e74 <__assert_fail@plt+0x6f28>
   17e5c:	cmp	r3, #65	; 0x41
   17e60:	bge	17e80 <__assert_fail@plt+0x6f34>
   17e64:	sub	r3, r3, #48	; 0x30
   17e68:	cmp	r3, #9
   17e6c:	bhi	17e88 <__assert_fail@plt+0x6f3c>
   17e70:	b	17e80 <__assert_fail@plt+0x6f34>
   17e74:	sub	r3, r3, #97	; 0x61
   17e78:	cmp	r3, #25
   17e7c:	bhi	17e88 <__assert_fail@plt+0x6f3c>
   17e80:	mov	r3, #1
   17e84:	b	17e8c <__assert_fail@plt+0x6f40>
   17e88:	mov	r3, #0
   17e8c:	mov	r0, r3
   17e90:	add	sp, fp, #0
   17e94:	pop	{fp}		; (ldr fp, [sp], #4)
   17e98:	bx	lr
   17e9c:	push	{fp}		; (str fp, [sp, #-4]!)
   17ea0:	add	fp, sp, #0
   17ea4:	sub	sp, sp, #12
   17ea8:	str	r0, [fp, #-8]
   17eac:	ldr	r3, [fp, #-8]
   17eb0:	cmp	r3, #65	; 0x41
   17eb4:	blt	17ed4 <__assert_fail@plt+0x6f88>
   17eb8:	cmp	r3, #90	; 0x5a
   17ebc:	ble	17ecc <__assert_fail@plt+0x6f80>
   17ec0:	sub	r3, r3, #97	; 0x61
   17ec4:	cmp	r3, #25
   17ec8:	bhi	17ed4 <__assert_fail@plt+0x6f88>
   17ecc:	mov	r3, #1
   17ed0:	b	17ed8 <__assert_fail@plt+0x6f8c>
   17ed4:	mov	r3, #0
   17ed8:	mov	r0, r3
   17edc:	add	sp, fp, #0
   17ee0:	pop	{fp}		; (ldr fp, [sp], #4)
   17ee4:	bx	lr
   17ee8:	push	{fp}		; (str fp, [sp, #-4]!)
   17eec:	add	fp, sp, #0
   17ef0:	sub	sp, sp, #12
   17ef4:	str	r0, [fp, #-8]
   17ef8:	ldr	r3, [fp, #-8]
   17efc:	add	r3, r3, #0
   17f00:	cmp	r3, #127	; 0x7f
   17f04:	bhi	17f10 <__assert_fail@plt+0x6fc4>
   17f08:	mov	r3, #1
   17f0c:	b	17f14 <__assert_fail@plt+0x6fc8>
   17f10:	mov	r3, #0
   17f14:	mov	r0, r3
   17f18:	add	sp, fp, #0
   17f1c:	pop	{fp}		; (ldr fp, [sp], #4)
   17f20:	bx	lr
   17f24:	push	{fp}		; (str fp, [sp, #-4]!)
   17f28:	add	fp, sp, #0
   17f2c:	sub	sp, sp, #12
   17f30:	str	r0, [fp, #-8]
   17f34:	ldr	r3, [fp, #-8]
   17f38:	cmp	r3, #32
   17f3c:	beq	17f4c <__assert_fail@plt+0x7000>
   17f40:	ldr	r3, [fp, #-8]
   17f44:	cmp	r3, #9
   17f48:	bne	17f54 <__assert_fail@plt+0x7008>
   17f4c:	mov	r3, #1
   17f50:	b	17f58 <__assert_fail@plt+0x700c>
   17f54:	mov	r3, #0
   17f58:	and	r3, r3, #1
   17f5c:	uxtb	r3, r3
   17f60:	mov	r0, r3
   17f64:	add	sp, fp, #0
   17f68:	pop	{fp}		; (ldr fp, [sp], #4)
   17f6c:	bx	lr
   17f70:	push	{fp}		; (str fp, [sp, #-4]!)
   17f74:	add	fp, sp, #0
   17f78:	sub	sp, sp, #12
   17f7c:	str	r0, [fp, #-8]
   17f80:	ldr	r3, [fp, #-8]
   17f84:	cmp	r3, #0
   17f88:	blt	17fa4 <__assert_fail@plt+0x7058>
   17f8c:	cmp	r3, #31
   17f90:	ble	17f9c <__assert_fail@plt+0x7050>
   17f94:	cmp	r3, #127	; 0x7f
   17f98:	bne	17fa4 <__assert_fail@plt+0x7058>
   17f9c:	mov	r3, #1
   17fa0:	b	17fa8 <__assert_fail@plt+0x705c>
   17fa4:	mov	r3, #0
   17fa8:	mov	r0, r3
   17fac:	add	sp, fp, #0
   17fb0:	pop	{fp}		; (ldr fp, [sp], #4)
   17fb4:	bx	lr
   17fb8:	push	{fp}		; (str fp, [sp, #-4]!)
   17fbc:	add	fp, sp, #0
   17fc0:	sub	sp, sp, #12
   17fc4:	str	r0, [fp, #-8]
   17fc8:	ldr	r3, [fp, #-8]
   17fcc:	sub	r3, r3, #48	; 0x30
   17fd0:	cmp	r3, #9
   17fd4:	bhi	17fe0 <__assert_fail@plt+0x7094>
   17fd8:	mov	r3, #1
   17fdc:	b	17fe4 <__assert_fail@plt+0x7098>
   17fe0:	mov	r3, #0
   17fe4:	mov	r0, r3
   17fe8:	add	sp, fp, #0
   17fec:	pop	{fp}		; (ldr fp, [sp], #4)
   17ff0:	bx	lr
   17ff4:	push	{fp}		; (str fp, [sp, #-4]!)
   17ff8:	add	fp, sp, #0
   17ffc:	sub	sp, sp, #12
   18000:	str	r0, [fp, #-8]
   18004:	ldr	r3, [fp, #-8]
   18008:	sub	r3, r3, #33	; 0x21
   1800c:	cmp	r3, #93	; 0x5d
   18010:	bhi	1801c <__assert_fail@plt+0x70d0>
   18014:	mov	r3, #1
   18018:	b	18020 <__assert_fail@plt+0x70d4>
   1801c:	mov	r3, #0
   18020:	mov	r0, r3
   18024:	add	sp, fp, #0
   18028:	pop	{fp}		; (ldr fp, [sp], #4)
   1802c:	bx	lr
   18030:	push	{fp}		; (str fp, [sp, #-4]!)
   18034:	add	fp, sp, #0
   18038:	sub	sp, sp, #12
   1803c:	str	r0, [fp, #-8]
   18040:	ldr	r3, [fp, #-8]
   18044:	sub	r3, r3, #97	; 0x61
   18048:	cmp	r3, #25
   1804c:	bhi	18058 <__assert_fail@plt+0x710c>
   18050:	mov	r3, #1
   18054:	b	1805c <__assert_fail@plt+0x7110>
   18058:	mov	r3, #0
   1805c:	mov	r0, r3
   18060:	add	sp, fp, #0
   18064:	pop	{fp}		; (ldr fp, [sp], #4)
   18068:	bx	lr
   1806c:	push	{fp}		; (str fp, [sp, #-4]!)
   18070:	add	fp, sp, #0
   18074:	sub	sp, sp, #12
   18078:	str	r0, [fp, #-8]
   1807c:	ldr	r3, [fp, #-8]
   18080:	sub	r3, r3, #32
   18084:	cmp	r3, #94	; 0x5e
   18088:	bhi	18094 <__assert_fail@plt+0x7148>
   1808c:	mov	r3, #1
   18090:	b	18098 <__assert_fail@plt+0x714c>
   18094:	mov	r3, #0
   18098:	mov	r0, r3
   1809c:	add	sp, fp, #0
   180a0:	pop	{fp}		; (ldr fp, [sp], #4)
   180a4:	bx	lr
   180a8:	push	{fp}		; (str fp, [sp, #-4]!)
   180ac:	add	fp, sp, #0
   180b0:	sub	sp, sp, #12
   180b4:	str	r0, [fp, #-8]
   180b8:	ldr	r3, [fp, #-8]
   180bc:	cmp	r3, #64	; 0x40
   180c0:	bgt	180dc <__assert_fail@plt+0x7190>
   180c4:	cmp	r3, #58	; 0x3a
   180c8:	bge	180f8 <__assert_fail@plt+0x71ac>
   180cc:	sub	r3, r3, #33	; 0x21
   180d0:	cmp	r3, #14
   180d4:	bhi	18100 <__assert_fail@plt+0x71b4>
   180d8:	b	180f8 <__assert_fail@plt+0x71ac>
   180dc:	cmp	r3, #91	; 0x5b
   180e0:	blt	18100 <__assert_fail@plt+0x71b4>
   180e4:	cmp	r3, #96	; 0x60
   180e8:	ble	180f8 <__assert_fail@plt+0x71ac>
   180ec:	sub	r3, r3, #123	; 0x7b
   180f0:	cmp	r3, #3
   180f4:	bhi	18100 <__assert_fail@plt+0x71b4>
   180f8:	mov	r3, #1
   180fc:	b	18104 <__assert_fail@plt+0x71b8>
   18100:	mov	r3, #0
   18104:	mov	r0, r3
   18108:	add	sp, fp, #0
   1810c:	pop	{fp}		; (ldr fp, [sp], #4)
   18110:	bx	lr
   18114:	push	{fp}		; (str fp, [sp, #-4]!)
   18118:	add	fp, sp, #0
   1811c:	sub	sp, sp, #12
   18120:	str	r0, [fp, #-8]
   18124:	ldr	r3, [fp, #-8]
   18128:	cmp	r3, #9
   1812c:	blt	18148 <__assert_fail@plt+0x71fc>
   18130:	cmp	r3, #13
   18134:	ble	18140 <__assert_fail@plt+0x71f4>
   18138:	cmp	r3, #32
   1813c:	bne	18148 <__assert_fail@plt+0x71fc>
   18140:	mov	r3, #1
   18144:	b	1814c <__assert_fail@plt+0x7200>
   18148:	mov	r3, #0
   1814c:	mov	r0, r3
   18150:	add	sp, fp, #0
   18154:	pop	{fp}		; (ldr fp, [sp], #4)
   18158:	bx	lr
   1815c:	push	{fp}		; (str fp, [sp, #-4]!)
   18160:	add	fp, sp, #0
   18164:	sub	sp, sp, #12
   18168:	str	r0, [fp, #-8]
   1816c:	ldr	r3, [fp, #-8]
   18170:	sub	r3, r3, #65	; 0x41
   18174:	cmp	r3, #25
   18178:	bhi	18184 <__assert_fail@plt+0x7238>
   1817c:	mov	r3, #1
   18180:	b	18188 <__assert_fail@plt+0x723c>
   18184:	mov	r3, #0
   18188:	mov	r0, r3
   1818c:	add	sp, fp, #0
   18190:	pop	{fp}		; (ldr fp, [sp], #4)
   18194:	bx	lr
   18198:	push	{fp}		; (str fp, [sp, #-4]!)
   1819c:	add	fp, sp, #0
   181a0:	sub	sp, sp, #12
   181a4:	str	r0, [fp, #-8]
   181a8:	ldr	r3, [fp, #-8]
   181ac:	sub	r3, r3, #48	; 0x30
   181b0:	cmp	r3, #54	; 0x36
   181b4:	addls	pc, pc, r3, lsl #2
   181b8:	b	182a0 <__assert_fail@plt+0x7354>
   181bc:	b	18298 <__assert_fail@plt+0x734c>
   181c0:	b	18298 <__assert_fail@plt+0x734c>
   181c4:	b	18298 <__assert_fail@plt+0x734c>
   181c8:	b	18298 <__assert_fail@plt+0x734c>
   181cc:	b	18298 <__assert_fail@plt+0x734c>
   181d0:	b	18298 <__assert_fail@plt+0x734c>
   181d4:	b	18298 <__assert_fail@plt+0x734c>
   181d8:	b	18298 <__assert_fail@plt+0x734c>
   181dc:	b	18298 <__assert_fail@plt+0x734c>
   181e0:	b	18298 <__assert_fail@plt+0x734c>
   181e4:	b	182a0 <__assert_fail@plt+0x7354>
   181e8:	b	182a0 <__assert_fail@plt+0x7354>
   181ec:	b	182a0 <__assert_fail@plt+0x7354>
   181f0:	b	182a0 <__assert_fail@plt+0x7354>
   181f4:	b	182a0 <__assert_fail@plt+0x7354>
   181f8:	b	182a0 <__assert_fail@plt+0x7354>
   181fc:	b	182a0 <__assert_fail@plt+0x7354>
   18200:	b	18298 <__assert_fail@plt+0x734c>
   18204:	b	18298 <__assert_fail@plt+0x734c>
   18208:	b	18298 <__assert_fail@plt+0x734c>
   1820c:	b	18298 <__assert_fail@plt+0x734c>
   18210:	b	18298 <__assert_fail@plt+0x734c>
   18214:	b	18298 <__assert_fail@plt+0x734c>
   18218:	b	182a0 <__assert_fail@plt+0x7354>
   1821c:	b	182a0 <__assert_fail@plt+0x7354>
   18220:	b	182a0 <__assert_fail@plt+0x7354>
   18224:	b	182a0 <__assert_fail@plt+0x7354>
   18228:	b	182a0 <__assert_fail@plt+0x7354>
   1822c:	b	182a0 <__assert_fail@plt+0x7354>
   18230:	b	182a0 <__assert_fail@plt+0x7354>
   18234:	b	182a0 <__assert_fail@plt+0x7354>
   18238:	b	182a0 <__assert_fail@plt+0x7354>
   1823c:	b	182a0 <__assert_fail@plt+0x7354>
   18240:	b	182a0 <__assert_fail@plt+0x7354>
   18244:	b	182a0 <__assert_fail@plt+0x7354>
   18248:	b	182a0 <__assert_fail@plt+0x7354>
   1824c:	b	182a0 <__assert_fail@plt+0x7354>
   18250:	b	182a0 <__assert_fail@plt+0x7354>
   18254:	b	182a0 <__assert_fail@plt+0x7354>
   18258:	b	182a0 <__assert_fail@plt+0x7354>
   1825c:	b	182a0 <__assert_fail@plt+0x7354>
   18260:	b	182a0 <__assert_fail@plt+0x7354>
   18264:	b	182a0 <__assert_fail@plt+0x7354>
   18268:	b	182a0 <__assert_fail@plt+0x7354>
   1826c:	b	182a0 <__assert_fail@plt+0x7354>
   18270:	b	182a0 <__assert_fail@plt+0x7354>
   18274:	b	182a0 <__assert_fail@plt+0x7354>
   18278:	b	182a0 <__assert_fail@plt+0x7354>
   1827c:	b	182a0 <__assert_fail@plt+0x7354>
   18280:	b	18298 <__assert_fail@plt+0x734c>
   18284:	b	18298 <__assert_fail@plt+0x734c>
   18288:	b	18298 <__assert_fail@plt+0x734c>
   1828c:	b	18298 <__assert_fail@plt+0x734c>
   18290:	b	18298 <__assert_fail@plt+0x734c>
   18294:	b	18298 <__assert_fail@plt+0x734c>
   18298:	mov	r3, #1
   1829c:	b	182a4 <__assert_fail@plt+0x7358>
   182a0:	mov	r3, #0
   182a4:	mov	r0, r3
   182a8:	add	sp, fp, #0
   182ac:	pop	{fp}		; (ldr fp, [sp], #4)
   182b0:	bx	lr
   182b4:	push	{fp}		; (str fp, [sp, #-4]!)
   182b8:	add	fp, sp, #0
   182bc:	sub	sp, sp, #12
   182c0:	str	r0, [fp, #-8]
   182c4:	ldr	r3, [fp, #-8]
   182c8:	sub	r3, r3, #65	; 0x41
   182cc:	cmp	r3, #25
   182d0:	bhi	182e0 <__assert_fail@plt+0x7394>
   182d4:	ldr	r3, [fp, #-8]
   182d8:	add	r3, r3, #32
   182dc:	b	182e4 <__assert_fail@plt+0x7398>
   182e0:	ldr	r3, [fp, #-8]
   182e4:	mov	r0, r3
   182e8:	add	sp, fp, #0
   182ec:	pop	{fp}		; (ldr fp, [sp], #4)
   182f0:	bx	lr
   182f4:	push	{fp}		; (str fp, [sp, #-4]!)
   182f8:	add	fp, sp, #0
   182fc:	sub	sp, sp, #12
   18300:	str	r0, [fp, #-8]
   18304:	ldr	r3, [fp, #-8]
   18308:	sub	r3, r3, #97	; 0x61
   1830c:	cmp	r3, #25
   18310:	bhi	18320 <__assert_fail@plt+0x73d4>
   18314:	ldr	r3, [fp, #-8]
   18318:	sub	r3, r3, #32
   1831c:	b	18324 <__assert_fail@plt+0x73d8>
   18320:	ldr	r3, [fp, #-8]
   18324:	mov	r0, r3
   18328:	add	sp, fp, #0
   1832c:	pop	{fp}		; (ldr fp, [sp], #4)
   18330:	bx	lr
   18334:	push	{fp, lr}
   18338:	add	fp, sp, #4
   1833c:	sub	sp, sp, #272	; 0x110
   18340:	str	r0, [fp, #-272]	; 0xfffffef0
   18344:	sub	r3, fp, #264	; 0x108
   18348:	ldr	r2, [pc, #116]	; 183c4 <__assert_fail@plt+0x7478>
   1834c:	mov	r1, r3
   18350:	ldr	r0, [fp, #-272]	; 0xfffffef0
   18354:	bl	184d8 <__assert_fail@plt+0x758c>
   18358:	mov	r3, r0
   1835c:	cmp	r3, #0
   18360:	beq	1836c <__assert_fail@plt+0x7420>
   18364:	mov	r3, #0
   18368:	b	183b8 <__assert_fail@plt+0x746c>
   1836c:	sub	r3, fp, #264	; 0x108
   18370:	ldr	r1, [pc, #80]	; 183c8 <__assert_fail@plt+0x747c>
   18374:	mov	r0, r3
   18378:	bl	10cf4 <strcmp@plt>
   1837c:	mov	r3, r0
   18380:	cmp	r3, #0
   18384:	beq	183ac <__assert_fail@plt+0x7460>
   18388:	sub	r3, fp, #264	; 0x108
   1838c:	ldr	r1, [pc, #56]	; 183cc <__assert_fail@plt+0x7480>
   18390:	mov	r0, r3
   18394:	bl	10cf4 <strcmp@plt>
   18398:	mov	r3, r0
   1839c:	cmp	r3, #0
   183a0:	beq	183ac <__assert_fail@plt+0x7460>
   183a4:	mov	r3, #1
   183a8:	b	183b0 <__assert_fail@plt+0x7464>
   183ac:	mov	r3, #0
   183b0:	and	r3, r3, #1
   183b4:	uxtb	r3, r3
   183b8:	mov	r0, r3
   183bc:	sub	sp, fp, #4
   183c0:	pop	{fp, pc}
   183c4:	andeq	r0, r0, r1, lsl #2
   183c8:	ldrdeq	r9, [r1], -r4
   183cc:	ldrdeq	r9, [r1], -r8
   183d0:	push	{fp, lr}
   183d4:	add	fp, sp, #4
   183d8:	sub	sp, sp, #16
   183dc:	str	r0, [fp, #-16]
   183e0:	mov	r1, #0
   183e4:	ldr	r0, [fp, #-16]
   183e8:	bl	10ee0 <setlocale@plt>
   183ec:	str	r0, [fp, #-8]
   183f0:	ldr	r3, [fp, #-8]
   183f4:	mov	r0, r3
   183f8:	sub	sp, fp, #4
   183fc:	pop	{fp, pc}
   18400:	push	{fp, lr}
   18404:	add	fp, sp, #4
   18408:	sub	sp, sp, #24
   1840c:	str	r0, [fp, #-16]
   18410:	str	r1, [fp, #-20]	; 0xffffffec
   18414:	str	r2, [fp, #-24]	; 0xffffffe8
   18418:	ldr	r0, [fp, #-16]
   1841c:	bl	183d0 <__assert_fail@plt+0x7484>
   18420:	str	r0, [fp, #-8]
   18424:	ldr	r3, [fp, #-8]
   18428:	cmp	r3, #0
   1842c:	bne	18450 <__assert_fail@plt+0x7504>
   18430:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18434:	cmp	r3, #0
   18438:	beq	18448 <__assert_fail@plt+0x74fc>
   1843c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18440:	mov	r2, #0
   18444:	strb	r2, [r3]
   18448:	mov	r3, #22
   1844c:	b	184cc <__assert_fail@plt+0x7580>
   18450:	ldr	r0, [fp, #-8]
   18454:	bl	10e5c <strlen@plt>
   18458:	str	r0, [fp, #-12]
   1845c:	ldr	r2, [fp, #-12]
   18460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18464:	cmp	r2, r3
   18468:	bcs	1848c <__assert_fail@plt+0x7540>
   1846c:	ldr	r3, [fp, #-12]
   18470:	add	r3, r3, #1
   18474:	mov	r2, r3
   18478:	ldr	r1, [fp, #-8]
   1847c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18480:	bl	10d48 <memcpy@plt>
   18484:	mov	r3, #0
   18488:	b	184cc <__assert_fail@plt+0x7580>
   1848c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18490:	cmp	r3, #0
   18494:	beq	184c8 <__assert_fail@plt+0x757c>
   18498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1849c:	sub	r3, r3, #1
   184a0:	mov	r2, r3
   184a4:	ldr	r1, [fp, #-8]
   184a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   184ac:	bl	10d48 <memcpy@plt>
   184b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184b4:	sub	r3, r3, #1
   184b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   184bc:	add	r3, r2, r3
   184c0:	mov	r2, #0
   184c4:	strb	r2, [r3]
   184c8:	mov	r3, #34	; 0x22
   184cc:	mov	r0, r3
   184d0:	sub	sp, fp, #4
   184d4:	pop	{fp, pc}
   184d8:	push	{fp, lr}
   184dc:	add	fp, sp, #4
   184e0:	sub	sp, sp, #16
   184e4:	str	r0, [fp, #-8]
   184e8:	str	r1, [fp, #-12]
   184ec:	str	r2, [fp, #-16]
   184f0:	ldr	r2, [fp, #-16]
   184f4:	ldr	r1, [fp, #-12]
   184f8:	ldr	r0, [fp, #-8]
   184fc:	bl	18400 <__assert_fail@plt+0x74b4>
   18500:	mov	r3, r0
   18504:	mov	r0, r3
   18508:	sub	sp, fp, #4
   1850c:	pop	{fp, pc}
   18510:	push	{fp, lr}
   18514:	add	fp, sp, #4
   18518:	sub	sp, sp, #8
   1851c:	str	r0, [fp, #-8]
   18520:	ldr	r0, [fp, #-8]
   18524:	bl	183d0 <__assert_fail@plt+0x7484>
   18528:	mov	r3, r0
   1852c:	mov	r0, r3
   18530:	sub	sp, fp, #4
   18534:	pop	{fp, pc}
   18538:	subs	r2, r1, #1
   1853c:	bxeq	lr
   18540:	bcc	18718 <__assert_fail@plt+0x77cc>
   18544:	cmp	r0, r1
   18548:	bls	186fc <__assert_fail@plt+0x77b0>
   1854c:	tst	r1, r2
   18550:	beq	18708 <__assert_fail@plt+0x77bc>
   18554:	clz	r3, r0
   18558:	clz	r2, r1
   1855c:	sub	r3, r2, r3
   18560:	rsbs	r3, r3, #31
   18564:	addne	r3, r3, r3, lsl #1
   18568:	mov	r2, #0
   1856c:	addne	pc, pc, r3, lsl #2
   18570:	nop			; (mov r0, r0)
   18574:	cmp	r0, r1, lsl #31
   18578:	adc	r2, r2, r2
   1857c:	subcs	r0, r0, r1, lsl #31
   18580:	cmp	r0, r1, lsl #30
   18584:	adc	r2, r2, r2
   18588:	subcs	r0, r0, r1, lsl #30
   1858c:	cmp	r0, r1, lsl #29
   18590:	adc	r2, r2, r2
   18594:	subcs	r0, r0, r1, lsl #29
   18598:	cmp	r0, r1, lsl #28
   1859c:	adc	r2, r2, r2
   185a0:	subcs	r0, r0, r1, lsl #28
   185a4:	cmp	r0, r1, lsl #27
   185a8:	adc	r2, r2, r2
   185ac:	subcs	r0, r0, r1, lsl #27
   185b0:	cmp	r0, r1, lsl #26
   185b4:	adc	r2, r2, r2
   185b8:	subcs	r0, r0, r1, lsl #26
   185bc:	cmp	r0, r1, lsl #25
   185c0:	adc	r2, r2, r2
   185c4:	subcs	r0, r0, r1, lsl #25
   185c8:	cmp	r0, r1, lsl #24
   185cc:	adc	r2, r2, r2
   185d0:	subcs	r0, r0, r1, lsl #24
   185d4:	cmp	r0, r1, lsl #23
   185d8:	adc	r2, r2, r2
   185dc:	subcs	r0, r0, r1, lsl #23
   185e0:	cmp	r0, r1, lsl #22
   185e4:	adc	r2, r2, r2
   185e8:	subcs	r0, r0, r1, lsl #22
   185ec:	cmp	r0, r1, lsl #21
   185f0:	adc	r2, r2, r2
   185f4:	subcs	r0, r0, r1, lsl #21
   185f8:	cmp	r0, r1, lsl #20
   185fc:	adc	r2, r2, r2
   18600:	subcs	r0, r0, r1, lsl #20
   18604:	cmp	r0, r1, lsl #19
   18608:	adc	r2, r2, r2
   1860c:	subcs	r0, r0, r1, lsl #19
   18610:	cmp	r0, r1, lsl #18
   18614:	adc	r2, r2, r2
   18618:	subcs	r0, r0, r1, lsl #18
   1861c:	cmp	r0, r1, lsl #17
   18620:	adc	r2, r2, r2
   18624:	subcs	r0, r0, r1, lsl #17
   18628:	cmp	r0, r1, lsl #16
   1862c:	adc	r2, r2, r2
   18630:	subcs	r0, r0, r1, lsl #16
   18634:	cmp	r0, r1, lsl #15
   18638:	adc	r2, r2, r2
   1863c:	subcs	r0, r0, r1, lsl #15
   18640:	cmp	r0, r1, lsl #14
   18644:	adc	r2, r2, r2
   18648:	subcs	r0, r0, r1, lsl #14
   1864c:	cmp	r0, r1, lsl #13
   18650:	adc	r2, r2, r2
   18654:	subcs	r0, r0, r1, lsl #13
   18658:	cmp	r0, r1, lsl #12
   1865c:	adc	r2, r2, r2
   18660:	subcs	r0, r0, r1, lsl #12
   18664:	cmp	r0, r1, lsl #11
   18668:	adc	r2, r2, r2
   1866c:	subcs	r0, r0, r1, lsl #11
   18670:	cmp	r0, r1, lsl #10
   18674:	adc	r2, r2, r2
   18678:	subcs	r0, r0, r1, lsl #10
   1867c:	cmp	r0, r1, lsl #9
   18680:	adc	r2, r2, r2
   18684:	subcs	r0, r0, r1, lsl #9
   18688:	cmp	r0, r1, lsl #8
   1868c:	adc	r2, r2, r2
   18690:	subcs	r0, r0, r1, lsl #8
   18694:	cmp	r0, r1, lsl #7
   18698:	adc	r2, r2, r2
   1869c:	subcs	r0, r0, r1, lsl #7
   186a0:	cmp	r0, r1, lsl #6
   186a4:	adc	r2, r2, r2
   186a8:	subcs	r0, r0, r1, lsl #6
   186ac:	cmp	r0, r1, lsl #5
   186b0:	adc	r2, r2, r2
   186b4:	subcs	r0, r0, r1, lsl #5
   186b8:	cmp	r0, r1, lsl #4
   186bc:	adc	r2, r2, r2
   186c0:	subcs	r0, r0, r1, lsl #4
   186c4:	cmp	r0, r1, lsl #3
   186c8:	adc	r2, r2, r2
   186cc:	subcs	r0, r0, r1, lsl #3
   186d0:	cmp	r0, r1, lsl #2
   186d4:	adc	r2, r2, r2
   186d8:	subcs	r0, r0, r1, lsl #2
   186dc:	cmp	r0, r1, lsl #1
   186e0:	adc	r2, r2, r2
   186e4:	subcs	r0, r0, r1, lsl #1
   186e8:	cmp	r0, r1
   186ec:	adc	r2, r2, r2
   186f0:	subcs	r0, r0, r1
   186f4:	mov	r0, r2
   186f8:	bx	lr
   186fc:	moveq	r0, #1
   18700:	movne	r0, #0
   18704:	bx	lr
   18708:	clz	r2, r1
   1870c:	rsb	r2, r2, #31
   18710:	lsr	r0, r0, r2
   18714:	bx	lr
   18718:	cmp	r0, #0
   1871c:	mvnne	r0, #0
   18720:	b	18a58 <__assert_fail@plt+0x7b0c>
   18724:	cmp	r1, #0
   18728:	beq	18718 <__assert_fail@plt+0x77cc>
   1872c:	push	{r0, r1, lr}
   18730:	bl	18538 <__assert_fail@plt+0x75ec>
   18734:	pop	{r1, r2, lr}
   18738:	mul	r3, r2, r0
   1873c:	sub	r1, r1, r3
   18740:	bx	lr
   18744:	cmp	r1, #0
   18748:	beq	18954 <__assert_fail@plt+0x7a08>
   1874c:	eor	ip, r0, r1
   18750:	rsbmi	r1, r1, #0
   18754:	subs	r2, r1, #1
   18758:	beq	18920 <__assert_fail@plt+0x79d4>
   1875c:	movs	r3, r0
   18760:	rsbmi	r3, r0, #0
   18764:	cmp	r3, r1
   18768:	bls	1892c <__assert_fail@plt+0x79e0>
   1876c:	tst	r1, r2
   18770:	beq	1893c <__assert_fail@plt+0x79f0>
   18774:	clz	r2, r3
   18778:	clz	r0, r1
   1877c:	sub	r2, r0, r2
   18780:	rsbs	r2, r2, #31
   18784:	addne	r2, r2, r2, lsl #1
   18788:	mov	r0, #0
   1878c:	addne	pc, pc, r2, lsl #2
   18790:	nop			; (mov r0, r0)
   18794:	cmp	r3, r1, lsl #31
   18798:	adc	r0, r0, r0
   1879c:	subcs	r3, r3, r1, lsl #31
   187a0:	cmp	r3, r1, lsl #30
   187a4:	adc	r0, r0, r0
   187a8:	subcs	r3, r3, r1, lsl #30
   187ac:	cmp	r3, r1, lsl #29
   187b0:	adc	r0, r0, r0
   187b4:	subcs	r3, r3, r1, lsl #29
   187b8:	cmp	r3, r1, lsl #28
   187bc:	adc	r0, r0, r0
   187c0:	subcs	r3, r3, r1, lsl #28
   187c4:	cmp	r3, r1, lsl #27
   187c8:	adc	r0, r0, r0
   187cc:	subcs	r3, r3, r1, lsl #27
   187d0:	cmp	r3, r1, lsl #26
   187d4:	adc	r0, r0, r0
   187d8:	subcs	r3, r3, r1, lsl #26
   187dc:	cmp	r3, r1, lsl #25
   187e0:	adc	r0, r0, r0
   187e4:	subcs	r3, r3, r1, lsl #25
   187e8:	cmp	r3, r1, lsl #24
   187ec:	adc	r0, r0, r0
   187f0:	subcs	r3, r3, r1, lsl #24
   187f4:	cmp	r3, r1, lsl #23
   187f8:	adc	r0, r0, r0
   187fc:	subcs	r3, r3, r1, lsl #23
   18800:	cmp	r3, r1, lsl #22
   18804:	adc	r0, r0, r0
   18808:	subcs	r3, r3, r1, lsl #22
   1880c:	cmp	r3, r1, lsl #21
   18810:	adc	r0, r0, r0
   18814:	subcs	r3, r3, r1, lsl #21
   18818:	cmp	r3, r1, lsl #20
   1881c:	adc	r0, r0, r0
   18820:	subcs	r3, r3, r1, lsl #20
   18824:	cmp	r3, r1, lsl #19
   18828:	adc	r0, r0, r0
   1882c:	subcs	r3, r3, r1, lsl #19
   18830:	cmp	r3, r1, lsl #18
   18834:	adc	r0, r0, r0
   18838:	subcs	r3, r3, r1, lsl #18
   1883c:	cmp	r3, r1, lsl #17
   18840:	adc	r0, r0, r0
   18844:	subcs	r3, r3, r1, lsl #17
   18848:	cmp	r3, r1, lsl #16
   1884c:	adc	r0, r0, r0
   18850:	subcs	r3, r3, r1, lsl #16
   18854:	cmp	r3, r1, lsl #15
   18858:	adc	r0, r0, r0
   1885c:	subcs	r3, r3, r1, lsl #15
   18860:	cmp	r3, r1, lsl #14
   18864:	adc	r0, r0, r0
   18868:	subcs	r3, r3, r1, lsl #14
   1886c:	cmp	r3, r1, lsl #13
   18870:	adc	r0, r0, r0
   18874:	subcs	r3, r3, r1, lsl #13
   18878:	cmp	r3, r1, lsl #12
   1887c:	adc	r0, r0, r0
   18880:	subcs	r3, r3, r1, lsl #12
   18884:	cmp	r3, r1, lsl #11
   18888:	adc	r0, r0, r0
   1888c:	subcs	r3, r3, r1, lsl #11
   18890:	cmp	r3, r1, lsl #10
   18894:	adc	r0, r0, r0
   18898:	subcs	r3, r3, r1, lsl #10
   1889c:	cmp	r3, r1, lsl #9
   188a0:	adc	r0, r0, r0
   188a4:	subcs	r3, r3, r1, lsl #9
   188a8:	cmp	r3, r1, lsl #8
   188ac:	adc	r0, r0, r0
   188b0:	subcs	r3, r3, r1, lsl #8
   188b4:	cmp	r3, r1, lsl #7
   188b8:	adc	r0, r0, r0
   188bc:	subcs	r3, r3, r1, lsl #7
   188c0:	cmp	r3, r1, lsl #6
   188c4:	adc	r0, r0, r0
   188c8:	subcs	r3, r3, r1, lsl #6
   188cc:	cmp	r3, r1, lsl #5
   188d0:	adc	r0, r0, r0
   188d4:	subcs	r3, r3, r1, lsl #5
   188d8:	cmp	r3, r1, lsl #4
   188dc:	adc	r0, r0, r0
   188e0:	subcs	r3, r3, r1, lsl #4
   188e4:	cmp	r3, r1, lsl #3
   188e8:	adc	r0, r0, r0
   188ec:	subcs	r3, r3, r1, lsl #3
   188f0:	cmp	r3, r1, lsl #2
   188f4:	adc	r0, r0, r0
   188f8:	subcs	r3, r3, r1, lsl #2
   188fc:	cmp	r3, r1, lsl #1
   18900:	adc	r0, r0, r0
   18904:	subcs	r3, r3, r1, lsl #1
   18908:	cmp	r3, r1
   1890c:	adc	r0, r0, r0
   18910:	subcs	r3, r3, r1
   18914:	cmp	ip, #0
   18918:	rsbmi	r0, r0, #0
   1891c:	bx	lr
   18920:	teq	ip, r0
   18924:	rsbmi	r0, r0, #0
   18928:	bx	lr
   1892c:	movcc	r0, #0
   18930:	asreq	r0, ip, #31
   18934:	orreq	r0, r0, #1
   18938:	bx	lr
   1893c:	clz	r2, r1
   18940:	rsb	r2, r2, #31
   18944:	cmp	ip, #0
   18948:	lsr	r0, r3, r2
   1894c:	rsbmi	r0, r0, #0
   18950:	bx	lr
   18954:	cmp	r0, #0
   18958:	mvngt	r0, #-2147483648	; 0x80000000
   1895c:	movlt	r0, #-2147483648	; 0x80000000
   18960:	b	18a58 <__assert_fail@plt+0x7b0c>
   18964:	cmp	r1, #0
   18968:	beq	18954 <__assert_fail@plt+0x7a08>
   1896c:	push	{r0, r1, lr}
   18970:	bl	1874c <__assert_fail@plt+0x7800>
   18974:	pop	{r1, r2, lr}
   18978:	mul	r3, r2, r0
   1897c:	sub	r1, r1, r3
   18980:	bx	lr
   18984:	cmp	r3, #0
   18988:	cmpeq	r2, #0
   1898c:	bne	189b0 <__assert_fail@plt+0x7a64>
   18990:	cmp	r1, #0
   18994:	movlt	r1, #-2147483648	; 0x80000000
   18998:	movlt	r0, #0
   1899c:	blt	189ac <__assert_fail@plt+0x7a60>
   189a0:	cmpeq	r0, #0
   189a4:	mvnne	r1, #-2147483648	; 0x80000000
   189a8:	mvnne	r0, #0
   189ac:	b	18a58 <__assert_fail@plt+0x7b0c>
   189b0:	sub	sp, sp, #8
   189b4:	push	{sp, lr}
   189b8:	cmp	r1, #0
   189bc:	blt	189dc <__assert_fail@plt+0x7a90>
   189c0:	cmp	r3, #0
   189c4:	blt	18a10 <__assert_fail@plt+0x7ac4>
   189c8:	bl	18a68 <__assert_fail@plt+0x7b1c>
   189cc:	ldr	lr, [sp, #4]
   189d0:	add	sp, sp, #8
   189d4:	pop	{r2, r3}
   189d8:	bx	lr
   189dc:	rsbs	r0, r0, #0
   189e0:	sbc	r1, r1, r1, lsl #1
   189e4:	cmp	r3, #0
   189e8:	blt	18a34 <__assert_fail@plt+0x7ae8>
   189ec:	bl	18a68 <__assert_fail@plt+0x7b1c>
   189f0:	ldr	lr, [sp, #4]
   189f4:	add	sp, sp, #8
   189f8:	pop	{r2, r3}
   189fc:	rsbs	r0, r0, #0
   18a00:	sbc	r1, r1, r1, lsl #1
   18a04:	rsbs	r2, r2, #0
   18a08:	sbc	r3, r3, r3, lsl #1
   18a0c:	bx	lr
   18a10:	rsbs	r2, r2, #0
   18a14:	sbc	r3, r3, r3, lsl #1
   18a18:	bl	18a68 <__assert_fail@plt+0x7b1c>
   18a1c:	ldr	lr, [sp, #4]
   18a20:	add	sp, sp, #8
   18a24:	pop	{r2, r3}
   18a28:	rsbs	r0, r0, #0
   18a2c:	sbc	r1, r1, r1, lsl #1
   18a30:	bx	lr
   18a34:	rsbs	r2, r2, #0
   18a38:	sbc	r3, r3, r3, lsl #1
   18a3c:	bl	18a68 <__assert_fail@plt+0x7b1c>
   18a40:	ldr	lr, [sp, #4]
   18a44:	add	sp, sp, #8
   18a48:	pop	{r2, r3}
   18a4c:	rsbs	r2, r2, #0
   18a50:	sbc	r3, r3, r3, lsl #1
   18a54:	bx	lr
   18a58:	push	{r1, lr}
   18a5c:	mov	r0, #8
   18a60:	bl	10ce8 <raise@plt>
   18a64:	pop	{r1, pc}
   18a68:	cmp	r1, r3
   18a6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18a70:	cmpeq	r0, r2
   18a74:	mov	r4, r0
   18a78:	mov	r5, r1
   18a7c:	ldr	r9, [sp, #28]
   18a80:	movcc	r0, #0
   18a84:	movcc	r1, #0
   18a88:	bcc	18b80 <__assert_fail@plt+0x7c34>
   18a8c:	cmp	r3, #0
   18a90:	clzeq	ip, r2
   18a94:	clzne	ip, r3
   18a98:	addeq	ip, ip, #32
   18a9c:	cmp	r5, #0
   18aa0:	clzeq	r1, r4
   18aa4:	addeq	r1, r1, #32
   18aa8:	clzne	r1, r5
   18aac:	sub	ip, ip, r1
   18ab0:	sub	lr, ip, #32
   18ab4:	lsl	r7, r3, ip
   18ab8:	rsb	r8, ip, #32
   18abc:	orr	r7, r7, r2, lsl lr
   18ac0:	orr	r7, r7, r2, lsr r8
   18ac4:	lsl	r6, r2, ip
   18ac8:	cmp	r5, r7
   18acc:	cmpeq	r4, r6
   18ad0:	movcc	r0, #0
   18ad4:	movcc	r1, #0
   18ad8:	bcc	18af4 <__assert_fail@plt+0x7ba8>
   18adc:	mov	r3, #1
   18ae0:	subs	r4, r4, r6
   18ae4:	lsl	r1, r3, lr
   18ae8:	lsl	r0, r3, ip
   18aec:	orr	r1, r1, r3, lsr r8
   18af0:	sbc	r5, r5, r7
   18af4:	cmp	ip, #0
   18af8:	beq	18b80 <__assert_fail@plt+0x7c34>
   18afc:	lsrs	r3, r7, #1
   18b00:	rrx	r2, r6
   18b04:	mov	r6, ip
   18b08:	b	18b2c <__assert_fail@plt+0x7be0>
   18b0c:	subs	r4, r4, r2
   18b10:	sbc	r5, r5, r3
   18b14:	adds	r4, r4, r4
   18b18:	adc	r5, r5, r5
   18b1c:	adds	r4, r4, #1
   18b20:	adc	r5, r5, #0
   18b24:	subs	r6, r6, #1
   18b28:	beq	18b48 <__assert_fail@plt+0x7bfc>
   18b2c:	cmp	r5, r3
   18b30:	cmpeq	r4, r2
   18b34:	bcs	18b0c <__assert_fail@plt+0x7bc0>
   18b38:	adds	r4, r4, r4
   18b3c:	adc	r5, r5, r5
   18b40:	subs	r6, r6, #1
   18b44:	bne	18b2c <__assert_fail@plt+0x7be0>
   18b48:	lsr	r6, r4, ip
   18b4c:	lsr	r7, r5, ip
   18b50:	orr	r6, r6, r5, lsl r8
   18b54:	adds	r2, r0, r4
   18b58:	orr	r6, r6, r5, lsr lr
   18b5c:	adc	r3, r1, r5
   18b60:	lsl	r1, r7, ip
   18b64:	orr	r1, r1, r6, lsl lr
   18b68:	lsl	r0, r6, ip
   18b6c:	orr	r1, r1, r6, lsr r8
   18b70:	subs	r0, r2, r0
   18b74:	mov	r4, r6
   18b78:	mov	r5, r7
   18b7c:	sbc	r1, r3, r1
   18b80:	cmp	r9, #0
   18b84:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18b88:	strd	r4, [r9]
   18b8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18b90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b94:	mov	r7, r0
   18b98:	ldr	r6, [pc, #72]	; 18be8 <__assert_fail@plt+0x7c9c>
   18b9c:	ldr	r5, [pc, #72]	; 18bec <__assert_fail@plt+0x7ca0>
   18ba0:	add	r6, pc, r6
   18ba4:	add	r5, pc, r5
   18ba8:	sub	r6, r6, r5
   18bac:	mov	r8, r1
   18bb0:	mov	r9, r2
   18bb4:	bl	10cb0 <calloc@plt-0x20>
   18bb8:	asrs	r6, r6, #2
   18bbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bc0:	mov	r4, #0
   18bc4:	add	r4, r4, #1
   18bc8:	ldr	r3, [r5], #4
   18bcc:	mov	r2, r9
   18bd0:	mov	r1, r8
   18bd4:	mov	r0, r7
   18bd8:	blx	r3
   18bdc:	cmp	r6, r4
   18be0:	bne	18bc4 <__assert_fail@plt+0x7c78>
   18be4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18be8:	andeq	r1, r1, r8, ror #6
   18bec:	andeq	r1, r1, r0, ror #6
   18bf0:	bx	lr
   18bf4:	ldr	r3, [pc, #12]	; 18c08 <__assert_fail@plt+0x7cbc>
   18bf8:	mov	r1, #0
   18bfc:	add	r3, pc, r3
   18c00:	ldr	r2, [r3]
   18c04:	b	10e8c <__cxa_atexit@plt>
   18c08:	andeq	r1, r1, r8, ror #9

Disassembly of section .fini:

00018c0c <.fini>:
   18c0c:	push	{r3, lr}
   18c10:	pop	{r3, pc}
