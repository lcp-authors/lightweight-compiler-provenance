
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c44 <.init>:
   10c44:	push	{r3, lr}
   10c48:	bl	10f04 <__assert_fail@plt+0x48>
   10c4c:	pop	{r3, pc}

Disassembly of section .plt:

00010c50 <calloc@plt-0x14>:
   10c50:	push	{lr}		; (str lr, [sp, #-4]!)
   10c54:	ldr	lr, [pc, #4]	; 10c60 <calloc@plt-0x4>
   10c58:	add	lr, pc, lr
   10c5c:	ldr	pc, [lr, #8]!
   10c60:	andeq	r8, r1, r0, lsr #7

00010c64 <calloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c70 <fputs_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #920]!	; 0x398

00010c7c <raise@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #912]!	; 0x390

00010c88 <strcmp@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #904]!	; 0x388

00010c94 <posix_fadvise64@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #896]!	; 0x380

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #888]!	; 0x378

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #880]!	; 0x370

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #872]!	; 0x368

00010cc4 <_exit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #864]!	; 0x360

00010cd0 <memcpy@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #856]!	; 0x358

00010cdc <mbsinit@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #848]!	; 0x350

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #840]!	; 0x348

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #832]!	; 0x340

00010d00 <getc_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #824]!	; 0x338

00010d0c <realloc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #816]!	; 0x330

00010d18 <textdomain@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #808]!	; 0x328

00010d24 <iswprint@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #800]!	; 0x320

00010d30 <fwrite@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #792]!	; 0x318

00010d3c <lseek64@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #784]!	; 0x310

00010d48 <__ctype_get_mb_cur_max@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #776]!	; 0x308

00010d54 <__fpending@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #768]!	; 0x300

00010d60 <ferror_unlocked@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #760]!	; 0x2f8

00010d6c <mbrtowc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #752]!	; 0x2f0

00010d78 <error@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #744]!	; 0x2e8

00010d84 <malloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d90 <__libc_start_main@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #728]!	; 0x2d8

00010d9c <__freading@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #720]!	; 0x2d0

00010da8 <__gmon_start__@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #712]!	; 0x2c8

00010db4 <getopt_long@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dc0 <__ctype_b_loc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dcc <exit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd8 <gettext@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #680]!	; 0x2a8

00010de4 <strlen@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #672]!	; 0x2a0

00010df0 <fprintf@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #664]!	; 0x298

00010dfc <__errno_location@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #656]!	; 0x290

00010e08 <__cxa_atexit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #648]!	; 0x288

00010e14 <memset@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #640]!	; 0x280

00010e20 <fileno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #632]!	; 0x278

00010e2c <fclose@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #624]!	; 0x270

00010e38 <fseeko64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #616]!	; 0x268

00010e44 <setlocale@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #608]!	; 0x260

00010e50 <strrchr@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #600]!	; 0x258

00010e5c <nl_langinfo@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #592]!	; 0x250

00010e68 <clearerr_unlocked@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #584]!	; 0x248

00010e74 <fopen64@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #576]!	; 0x240

00010e80 <bindtextdomain@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #568]!	; 0x238

00010e8c <strncmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #560]!	; 0x230

00010e98 <abort@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #552]!	; 0x228

00010ea4 <putchar_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #544]!	; 0x220

00010eb0 <strspn@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #536]!	; 0x218

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #528]!	; 0x210

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	mov	fp, #0
   10ecc:	mov	lr, #0
   10ed0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ed4:	mov	r2, sp
   10ed8:	push	{r2}		; (str r2, [sp, #-4]!)
   10edc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee0:	ldr	ip, [pc, #16]	; 10ef8 <__assert_fail@plt+0x3c>
   10ee4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ee8:	ldr	r0, [pc, #12]	; 10efc <__assert_fail@plt+0x40>
   10eec:	ldr	r3, [pc, #12]	; 10f00 <__assert_fail@plt+0x44>
   10ef0:	bl	10d90 <__libc_start_main@plt>
   10ef4:	bl	10e98 <abort@plt>
   10ef8:	andeq	r7, r1, r0, lsl sl
   10efc:	strdeq	r1, [r1], -r8
   10f00:			; <UNDEFINED> instruction: 0x000179b0
   10f04:	ldr	r3, [pc, #20]	; 10f20 <__assert_fail@plt+0x64>
   10f08:	ldr	r2, [pc, #20]	; 10f24 <__assert_fail@plt+0x68>
   10f0c:	add	r3, pc, r3
   10f10:	ldr	r2, [r3, r2]
   10f14:	cmp	r2, #0
   10f18:	bxeq	lr
   10f1c:	b	10da8 <__gmon_start__@plt>
   10f20:	andeq	r8, r1, ip, ror #1
   10f24:	ldrdeq	r0, [r0], -r8
   10f28:	ldr	r3, [pc, #28]	; 10f4c <__assert_fail@plt+0x90>
   10f2c:	ldr	r0, [pc, #28]	; 10f50 <__assert_fail@plt+0x94>
   10f30:	sub	r3, r3, r0
   10f34:	cmp	r3, #6
   10f38:	bxls	lr
   10f3c:	ldr	r3, [pc, #16]	; 10f54 <__assert_fail@plt+0x98>
   10f40:	cmp	r3, #0
   10f44:	bxeq	lr
   10f48:	bx	r3
   10f4c:	andeq	r9, r2, r7, lsr r1
   10f50:	andeq	r9, r2, r4, lsr r1
   10f54:	andeq	r0, r0, r0
   10f58:	ldr	r1, [pc, #36]	; 10f84 <__assert_fail@plt+0xc8>
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xcc>
   10f60:	sub	r1, r1, r0
   10f64:	asr	r1, r1, #2
   10f68:	add	r1, r1, r1, lsr #31
   10f6c:	asrs	r1, r1, #1
   10f70:	bxeq	lr
   10f74:	ldr	r3, [pc, #16]	; 10f8c <__assert_fail@plt+0xd0>
   10f78:	cmp	r3, #0
   10f7c:	bxeq	lr
   10f80:	bx	r3
   10f84:	andeq	r9, r2, r4, lsr r1
   10f88:	andeq	r9, r2, r4, lsr r1
   10f8c:	andeq	r0, r0, r0
   10f90:	push	{r4, lr}
   10f94:	ldr	r4, [pc, #24]	; 10fb4 <__assert_fail@plt+0xf8>
   10f98:	ldrb	r3, [r4]
   10f9c:	cmp	r3, #0
   10fa0:	popne	{r4, pc}
   10fa4:	bl	10f28 <__assert_fail@plt+0x6c>
   10fa8:	mov	r3, #1
   10fac:	strb	r3, [r4]
   10fb0:	pop	{r4, pc}
   10fb4:	andeq	r9, r2, ip, asr r1
   10fb8:	ldr	r0, [pc, #40]	; 10fe8 <__assert_fail@plt+0x12c>
   10fbc:	ldr	r3, [r0]
   10fc0:	cmp	r3, #0
   10fc4:	bne	10fcc <__assert_fail@plt+0x110>
   10fc8:	b	10f58 <__assert_fail@plt+0x9c>
   10fcc:	ldr	r3, [pc, #24]	; 10fec <__assert_fail@plt+0x130>
   10fd0:	cmp	r3, #0
   10fd4:	beq	10fc8 <__assert_fail@plt+0x10c>
   10fd8:	push	{r4, lr}
   10fdc:	blx	r3
   10fe0:	pop	{r4, lr}
   10fe4:	b	10f58 <__assert_fail@plt+0x9c>
   10fe8:	andeq	r8, r2, r4, lsl pc
   10fec:	andeq	r0, r0, r0
   10ff0:	push	{fp, lr}
   10ff4:	add	fp, sp, #4
   10ff8:	ldr	r0, [pc, #32]	; 11020 <__assert_fail@plt+0x164>
   10ffc:	bl	10dd8 <gettext@plt>
   11000:	mov	r2, r0
   11004:	ldr	r3, [pc, #24]	; 11024 <__assert_fail@plt+0x168>
   11008:	ldr	r3, [r3]
   1100c:	mov	r1, r3
   11010:	mov	r0, r2
   11014:	bl	10c70 <fputs_unlocked@plt>
   11018:	nop			; (mov r0, r0)
   1101c:	pop	{fp, pc}
   11020:	andeq	r7, r1, r8, lsr sl
   11024:	andeq	r9, r2, r4, asr r1
   11028:	push	{fp, lr}
   1102c:	add	fp, sp, #4
   11030:	ldr	r0, [pc, #32]	; 11058 <__assert_fail@plt+0x19c>
   11034:	bl	10dd8 <gettext@plt>
   11038:	mov	r2, r0
   1103c:	ldr	r3, [pc, #24]	; 1105c <__assert_fail@plt+0x1a0>
   11040:	ldr	r3, [r3]
   11044:	mov	r1, r3
   11048:	mov	r0, r2
   1104c:	bl	10c70 <fputs_unlocked@plt>
   11050:	nop			; (mov r0, r0)
   11054:	pop	{fp, pc}
   11058:	andeq	r7, r1, r0, ror sl
   1105c:	andeq	r9, r2, r4, asr r1
   11060:	push	{fp, lr}
   11064:	add	fp, sp, #4
   11068:	sub	sp, sp, #80	; 0x50
   1106c:	str	r0, [fp, #-80]	; 0xffffffb0
   11070:	ldr	r3, [pc, #348]	; 111d4 <__assert_fail@plt+0x318>
   11074:	sub	ip, fp, #72	; 0x48
   11078:	mov	lr, r3
   1107c:	ldm	lr!, {r0, r1, r2, r3}
   11080:	stmia	ip!, {r0, r1, r2, r3}
   11084:	ldm	lr!, {r0, r1, r2, r3}
   11088:	stmia	ip!, {r0, r1, r2, r3}
   1108c:	ldm	lr!, {r0, r1, r2, r3}
   11090:	stmia	ip!, {r0, r1, r2, r3}
   11094:	ldm	lr, {r0, r1}
   11098:	stm	ip, {r0, r1}
   1109c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110a0:	str	r3, [fp, #-8]
   110a4:	sub	r3, fp, #72	; 0x48
   110a8:	str	r3, [fp, #-12]
   110ac:	b	110bc <__assert_fail@plt+0x200>
   110b0:	ldr	r3, [fp, #-12]
   110b4:	add	r3, r3, #8
   110b8:	str	r3, [fp, #-12]
   110bc:	ldr	r3, [fp, #-12]
   110c0:	ldr	r3, [r3]
   110c4:	cmp	r3, #0
   110c8:	beq	110ec <__assert_fail@plt+0x230>
   110cc:	ldr	r3, [fp, #-12]
   110d0:	ldr	r3, [r3]
   110d4:	mov	r1, r3
   110d8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   110dc:	bl	10c88 <strcmp@plt>
   110e0:	mov	r3, r0
   110e4:	cmp	r3, #0
   110e8:	bne	110b0 <__assert_fail@plt+0x1f4>
   110ec:	ldr	r3, [fp, #-12]
   110f0:	ldr	r3, [r3, #4]
   110f4:	cmp	r3, #0
   110f8:	beq	11108 <__assert_fail@plt+0x24c>
   110fc:	ldr	r3, [fp, #-12]
   11100:	ldr	r3, [r3, #4]
   11104:	str	r3, [fp, #-8]
   11108:	ldr	r0, [pc, #200]	; 111d8 <__assert_fail@plt+0x31c>
   1110c:	bl	10dd8 <gettext@plt>
   11110:	mov	r3, r0
   11114:	ldr	r2, [pc, #192]	; 111dc <__assert_fail@plt+0x320>
   11118:	ldr	r1, [pc, #192]	; 111e0 <__assert_fail@plt+0x324>
   1111c:	mov	r0, r3
   11120:	bl	10ca0 <printf@plt>
   11124:	mov	r1, #0
   11128:	mov	r0, #5
   1112c:	bl	10e44 <setlocale@plt>
   11130:	str	r0, [fp, #-16]
   11134:	ldr	r3, [fp, #-16]
   11138:	cmp	r3, #0
   1113c:	beq	1117c <__assert_fail@plt+0x2c0>
   11140:	mov	r2, #3
   11144:	ldr	r1, [pc, #152]	; 111e4 <__assert_fail@plt+0x328>
   11148:	ldr	r0, [fp, #-16]
   1114c:	bl	10e8c <strncmp@plt>
   11150:	mov	r3, r0
   11154:	cmp	r3, #0
   11158:	beq	1117c <__assert_fail@plt+0x2c0>
   1115c:	ldr	r0, [pc, #132]	; 111e8 <__assert_fail@plt+0x32c>
   11160:	bl	10dd8 <gettext@plt>
   11164:	mov	r2, r0
   11168:	ldr	r3, [pc, #124]	; 111ec <__assert_fail@plt+0x330>
   1116c:	ldr	r3, [r3]
   11170:	mov	r1, r3
   11174:	mov	r0, r2
   11178:	bl	10c70 <fputs_unlocked@plt>
   1117c:	ldr	r0, [pc, #108]	; 111f0 <__assert_fail@plt+0x334>
   11180:	bl	10dd8 <gettext@plt>
   11184:	mov	r3, r0
   11188:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1118c:	ldr	r1, [pc, #72]	; 111dc <__assert_fail@plt+0x320>
   11190:	mov	r0, r3
   11194:	bl	10ca0 <printf@plt>
   11198:	ldr	r0, [pc, #84]	; 111f4 <__assert_fail@plt+0x338>
   1119c:	bl	10dd8 <gettext@plt>
   111a0:	ldr	r2, [fp, #-8]
   111a4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   111a8:	cmp	r2, r3
   111ac:	bne	111b8 <__assert_fail@plt+0x2fc>
   111b0:	ldr	r3, [pc, #64]	; 111f8 <__assert_fail@plt+0x33c>
   111b4:	b	111bc <__assert_fail@plt+0x300>
   111b8:	ldr	r3, [pc, #60]	; 111fc <__assert_fail@plt+0x340>
   111bc:	mov	r2, r3
   111c0:	ldr	r1, [fp, #-8]
   111c4:	bl	10ca0 <printf@plt>
   111c8:	nop			; (mov r0, r0)
   111cc:	sub	sp, fp, #4
   111d0:	pop	{fp, pc}
   111d4:	andeq	r7, r1, r0, lsr ip
   111d8:			; <UNDEFINED> instruction: 0x00017abc
   111dc:	ldrdeq	r7, [r1], -r4
   111e0:	strdeq	r7, [r1], -ip
   111e4:	andeq	r7, r1, ip, lsl #22
   111e8:	andeq	r7, r1, r0, lsl fp
   111ec:	andeq	r9, r2, r4, asr r1
   111f0:	andeq	r7, r1, r8, asr fp
   111f4:	andeq	r7, r1, r4, ror fp
   111f8:	andeq	r7, r1, r8, lsr #23
   111fc:			; <UNDEFINED> instruction: 0x00017bb4
   11200:	push	{r4, fp, lr}
   11204:	add	fp, sp, #8
   11208:	sub	sp, sp, #12
   1120c:	str	r0, [fp, #-16]
   11210:	ldr	r3, [fp, #-16]
   11214:	cmp	r3, #0
   11218:	beq	11248 <__assert_fail@plt+0x38c>
   1121c:	ldr	r3, [pc, #224]	; 11304 <__assert_fail@plt+0x448>
   11220:	ldr	r4, [r3]
   11224:	ldr	r0, [pc, #220]	; 11308 <__assert_fail@plt+0x44c>
   11228:	bl	10dd8 <gettext@plt>
   1122c:	mov	r1, r0
   11230:	ldr	r3, [pc, #212]	; 1130c <__assert_fail@plt+0x450>
   11234:	ldr	r3, [r3]
   11238:	mov	r2, r3
   1123c:	mov	r0, r4
   11240:	bl	10df0 <fprintf@plt>
   11244:	b	112fc <__assert_fail@plt+0x440>
   11248:	ldr	r0, [pc, #192]	; 11310 <__assert_fail@plt+0x454>
   1124c:	bl	10dd8 <gettext@plt>
   11250:	mov	r2, r0
   11254:	ldr	r3, [pc, #176]	; 1130c <__assert_fail@plt+0x450>
   11258:	ldr	r3, [r3]
   1125c:	mov	r1, r3
   11260:	mov	r0, r2
   11264:	bl	10ca0 <printf@plt>
   11268:	ldr	r0, [pc, #164]	; 11314 <__assert_fail@plt+0x458>
   1126c:	bl	10dd8 <gettext@plt>
   11270:	mov	r2, r0
   11274:	ldr	r3, [pc, #156]	; 11318 <__assert_fail@plt+0x45c>
   11278:	ldr	r3, [r3]
   1127c:	mov	r1, r3
   11280:	mov	r0, r2
   11284:	bl	10c70 <fputs_unlocked@plt>
   11288:	bl	10ff0 <__assert_fail@plt+0x134>
   1128c:	bl	11028 <__assert_fail@plt+0x16c>
   11290:	ldr	r0, [pc, #132]	; 1131c <__assert_fail@plt+0x460>
   11294:	bl	10dd8 <gettext@plt>
   11298:	mov	r2, r0
   1129c:	ldr	r3, [pc, #116]	; 11318 <__assert_fail@plt+0x45c>
   112a0:	ldr	r3, [r3]
   112a4:	mov	r1, r3
   112a8:	mov	r0, r2
   112ac:	bl	10c70 <fputs_unlocked@plt>
   112b0:	bl	12618 <__assert_fail@plt+0x175c>
   112b4:	ldr	r0, [pc, #100]	; 11320 <__assert_fail@plt+0x464>
   112b8:	bl	10dd8 <gettext@plt>
   112bc:	mov	r2, r0
   112c0:	ldr	r3, [pc, #80]	; 11318 <__assert_fail@plt+0x45c>
   112c4:	ldr	r3, [r3]
   112c8:	mov	r1, r3
   112cc:	mov	r0, r2
   112d0:	bl	10c70 <fputs_unlocked@plt>
   112d4:	ldr	r0, [pc, #72]	; 11324 <__assert_fail@plt+0x468>
   112d8:	bl	10dd8 <gettext@plt>
   112dc:	mov	r2, r0
   112e0:	ldr	r3, [pc, #48]	; 11318 <__assert_fail@plt+0x45c>
   112e4:	ldr	r3, [r3]
   112e8:	mov	r1, r3
   112ec:	mov	r0, r2
   112f0:	bl	10c70 <fputs_unlocked@plt>
   112f4:	ldr	r0, [pc, #44]	; 11328 <__assert_fail@plt+0x46c>
   112f8:	bl	11060 <__assert_fail@plt+0x1a4>
   112fc:	ldr	r0, [fp, #-16]
   11300:	bl	10dcc <exit@plt>
   11304:	andeq	r9, r2, r8, asr #2
   11308:	strdeq	r7, [r1], -ip
   1130c:	andeq	r9, r2, r8, lsr #3
   11310:	andeq	r7, r1, r4, lsr #26
   11314:	andeq	r7, r1, r8, asr #26
   11318:	andeq	r9, r2, r4, asr r1
   1131c:	andeq	r7, r1, ip, lsl #27
   11320:	strdeq	r7, [r1], -ip
   11324:	andeq	r7, r1, ip, lsr #28
   11328:	andeq	r7, r1, r4, ror #28
   1132c:	push	{r4, fp, lr}
   11330:	add	fp, sp, #8
   11334:	sub	sp, sp, #44	; 0x2c
   11338:	mov	r0, #0
   1133c:	bl	123a0 <__assert_fail@plt+0x14e4>
   11340:	str	r0, [fp, #-16]
   11344:	ldr	r3, [fp, #-16]
   11348:	cmp	r3, #0
   1134c:	beq	115d8 <__assert_fail@plt+0x71c>
   11350:	mov	r3, #1
   11354:	strb	r3, [fp, #-21]	; 0xffffffeb
   11358:	mov	r2, #0
   1135c:	mov	r3, #0
   11360:	strd	r2, [fp, #-36]	; 0xffffffdc
   11364:	mov	r3, #0
   11368:	str	r3, [fp, #-48]	; 0xffffffd0
   1136c:	b	11374 <__assert_fail@plt+0x4b8>
   11370:	nop			; (mov r0, r0)
   11374:	ldr	r0, [fp, #-16]
   11378:	bl	10d00 <getc_unlocked@plt>
   1137c:	str	r0, [fp, #-20]	; 0xffffffec
   11380:	ldr	r3, [fp, #-20]	; 0xffffffec
   11384:	cmp	r3, #0
   11388:	bge	113a4 <__assert_fail@plt+0x4e8>
   1138c:	ldr	r0, [fp, #-16]
   11390:	bl	123a0 <__assert_fail@plt+0x14e4>
   11394:	str	r0, [fp, #-16]
   11398:	ldr	r3, [fp, #-16]
   1139c:	cmp	r3, #0
   113a0:	bne	11370 <__assert_fail@plt+0x4b4>
   113a4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   113a8:	cmp	r3, #0
   113ac:	beq	11580 <__assert_fail@plt+0x6c4>
   113b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   113b4:	cmp	r3, #9
   113b8:	bne	11488 <__assert_fail@plt+0x5cc>
   113bc:	sub	r3, fp, #49	; 0x31
   113c0:	sub	r2, fp, #48	; 0x30
   113c4:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   113c8:	bl	12174 <__assert_fail@plt+0x12b8>
   113cc:	strd	r0, [fp, #-44]	; 0xffffffd4
   113d0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   113d4:	cmp	r3, #0
   113d8:	beq	113ec <__assert_fail@plt+0x530>
   113dc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   113e0:	adds	r2, r2, #1
   113e4:	adc	r3, r3, #0
   113e8:	strd	r2, [fp, #-44]	; 0xffffffd4
   113ec:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   113f0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   113f4:	cmp	r1, r3
   113f8:	cmpeq	r0, r2
   113fc:	bcs	11458 <__assert_fail@plt+0x59c>
   11400:	ldr	r0, [pc, #484]	; 115ec <__assert_fail@plt+0x730>
   11404:	bl	10dd8 <gettext@plt>
   11408:	mov	r3, r0
   1140c:	mov	r2, r3
   11410:	mov	r1, #0
   11414:	mov	r0, #1
   11418:	bl	10d78 <error@plt>
   1141c:	mov	r0, #32
   11420:	bl	10ea4 <putchar_unlocked@plt>
   11424:	mov	r3, r0
   11428:	cmp	r3, #0
   1142c:	bge	11458 <__assert_fail@plt+0x59c>
   11430:	bl	10dfc <__errno_location@plt>
   11434:	mov	r3, r0
   11438:	ldr	r4, [r3]
   1143c:	ldr	r0, [pc, #428]	; 115f0 <__assert_fail@plt+0x734>
   11440:	bl	10dd8 <gettext@plt>
   11444:	mov	r3, r0
   11448:	mov	r2, r3
   1144c:	mov	r1, r4
   11450:	mov	r0, #1
   11454:	bl	10d78 <error@plt>
   11458:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1145c:	adds	r2, r2, #1
   11460:	adc	r3, r3, #0
   11464:	strd	r2, [fp, #-36]	; 0xffffffdc
   11468:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1146c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11470:	cmp	r1, r3
   11474:	cmpeq	r0, r2
   11478:	bcc	1141c <__assert_fail@plt+0x560>
   1147c:	mov	r3, #32
   11480:	str	r3, [fp, #-20]	; 0xffffffec
   11484:	b	11524 <__assert_fail@plt+0x668>
   11488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1148c:	cmp	r3, #8
   11490:	bne	114ec <__assert_fail@plt+0x630>
   11494:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11498:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1149c:	orr	r3, r2, r3
   114a0:	cmp	r3, #0
   114a4:	movne	r3, #1
   114a8:	moveq	r3, #0
   114ac:	uxtb	r3, r3
   114b0:	uxtb	r2, r3
   114b4:	mov	r3, #0
   114b8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   114bc:	subs	r2, r0, r2
   114c0:	sbc	r3, r1, r3
   114c4:	strd	r2, [fp, #-36]	; 0xffffffdc
   114c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   114cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   114d0:	cmp	r2, #0
   114d4:	movne	r2, #1
   114d8:	moveq	r2, #0
   114dc:	uxtb	r2, r2
   114e0:	sub	r3, r3, r2
   114e4:	str	r3, [fp, #-48]	; 0xffffffd0
   114e8:	b	11524 <__assert_fail@plt+0x668>
   114ec:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   114f0:	adds	r2, r2, #1
   114f4:	adc	r3, r3, #0
   114f8:	strd	r2, [fp, #-36]	; 0xffffffdc
   114fc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11500:	orrs	r3, r2, r3
   11504:	bne	11524 <__assert_fail@plt+0x668>
   11508:	ldr	r0, [pc, #220]	; 115ec <__assert_fail@plt+0x730>
   1150c:	bl	10dd8 <gettext@plt>
   11510:	mov	r3, r0
   11514:	mov	r2, r3
   11518:	mov	r1, #0
   1151c:	mov	r0, #1
   11520:	bl	10d78 <error@plt>
   11524:	ldrb	r4, [fp, #-21]	; 0xffffffeb
   11528:	ldr	r3, [pc, #196]	; 115f4 <__assert_fail@plt+0x738>
   1152c:	ldrb	r3, [r3]
   11530:	cmp	r3, #0
   11534:	bne	11560 <__assert_fail@plt+0x6a4>
   11538:	bl	10dc0 <__ctype_b_loc@plt>
   1153c:	mov	r3, r0
   11540:	ldr	r2, [r3]
   11544:	ldr	r3, [fp, #-20]	; 0xffffffec
   11548:	lsl	r3, r3, #1
   1154c:	add	r3, r2, r3
   11550:	ldrh	r3, [r3]
   11554:	and	r3, r3, #1
   11558:	cmp	r3, #0
   1155c:	beq	11568 <__assert_fail@plt+0x6ac>
   11560:	mov	r3, #1
   11564:	b	1156c <__assert_fail@plt+0x6b0>
   11568:	mov	r3, #0
   1156c:	and	r3, r3, r4
   11570:	cmp	r3, #0
   11574:	movne	r3, #1
   11578:	moveq	r3, #0
   1157c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11580:	ldr	r3, [fp, #-20]	; 0xffffffec
   11584:	cmp	r3, #0
   11588:	blt	115e0 <__assert_fail@plt+0x724>
   1158c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11590:	bl	10ea4 <putchar_unlocked@plt>
   11594:	mov	r3, r0
   11598:	cmp	r3, #0
   1159c:	bge	115c8 <__assert_fail@plt+0x70c>
   115a0:	bl	10dfc <__errno_location@plt>
   115a4:	mov	r3, r0
   115a8:	ldr	r4, [r3]
   115ac:	ldr	r0, [pc, #60]	; 115f0 <__assert_fail@plt+0x734>
   115b0:	bl	10dd8 <gettext@plt>
   115b4:	mov	r3, r0
   115b8:	mov	r2, r3
   115bc:	mov	r1, r4
   115c0:	mov	r0, #1
   115c4:	bl	10d78 <error@plt>
   115c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   115cc:	cmp	r3, #10
   115d0:	bne	11374 <__assert_fail@plt+0x4b8>
   115d4:	b	11350 <__assert_fail@plt+0x494>
   115d8:	nop			; (mov r0, r0)
   115dc:	b	115e4 <__assert_fail@plt+0x728>
   115e0:	nop			; (mov r0, r0)
   115e4:	sub	sp, fp, #8
   115e8:	pop	{r4, fp, pc}
   115ec:	andeq	r7, r1, ip, ror #28
   115f0:	andeq	r7, r1, r4, lsl #29
   115f4:	andeq	r9, r2, r0, ror #2
   115f8:	push	{fp, lr}
   115fc:	add	fp, sp, #4
   11600:	sub	sp, sp, #24
   11604:	str	r0, [fp, #-16]
   11608:	str	r1, [fp, #-20]	; 0xffffffec
   1160c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11610:	ldr	r3, [r3]
   11614:	mov	r0, r3
   11618:	bl	12bb8 <__assert_fail@plt+0x1cfc>
   1161c:	ldr	r1, [pc, #424]	; 117cc <__assert_fail@plt+0x910>
   11620:	mov	r0, #6
   11624:	bl	10e44 <setlocale@plt>
   11628:	ldr	r1, [pc, #416]	; 117d0 <__assert_fail@plt+0x914>
   1162c:	ldr	r0, [pc, #416]	; 117d4 <__assert_fail@plt+0x918>
   11630:	bl	10e80 <bindtextdomain@plt>
   11634:	ldr	r0, [pc, #408]	; 117d4 <__assert_fail@plt+0x918>
   11638:	bl	10d18 <textdomain@plt>
   1163c:	ldr	r0, [pc, #404]	; 117d8 <__assert_fail@plt+0x91c>
   11640:	bl	17a14 <__assert_fail@plt+0x6b58>
   11644:	ldr	r3, [pc, #400]	; 117dc <__assert_fail@plt+0x920>
   11648:	mov	r2, #1
   1164c:	strb	r2, [r3]
   11650:	b	11748 <__assert_fail@plt+0x88c>
   11654:	ldr	r3, [fp, #-8]
   11658:	cmp	r3, #57	; 0x39
   1165c:	bgt	1167c <__assert_fail@plt+0x7c0>
   11660:	cmp	r3, #48	; 0x30
   11664:	bge	116b4 <__assert_fail@plt+0x7f8>
   11668:	cmn	r3, #3
   1166c:	beq	11708 <__assert_fail@plt+0x84c>
   11670:	cmn	r3, #2
   11674:	beq	11700 <__assert_fail@plt+0x844>
   11678:	b	11740 <__assert_fail@plt+0x884>
   1167c:	cmp	r3, #105	; 0x69
   11680:	beq	11690 <__assert_fail@plt+0x7d4>
   11684:	cmp	r3, #116	; 0x74
   11688:	beq	116a0 <__assert_fail@plt+0x7e4>
   1168c:	b	11740 <__assert_fail@plt+0x884>
   11690:	ldr	r3, [pc, #324]	; 117dc <__assert_fail@plt+0x920>
   11694:	mov	r2, #0
   11698:	strb	r2, [r3]
   1169c:	b	11748 <__assert_fail@plt+0x88c>
   116a0:	ldr	r3, [pc, #312]	; 117e0 <__assert_fail@plt+0x924>
   116a4:	ldr	r3, [r3]
   116a8:	mov	r0, r3
   116ac:	bl	11a7c <__assert_fail@plt+0xbc0>
   116b0:	b	11748 <__assert_fail@plt+0x88c>
   116b4:	ldr	r3, [pc, #292]	; 117e0 <__assert_fail@plt+0x924>
   116b8:	ldr	r3, [r3]
   116bc:	cmp	r3, #0
   116c0:	beq	116dc <__assert_fail@plt+0x820>
   116c4:	ldr	r3, [pc, #276]	; 117e0 <__assert_fail@plt+0x924>
   116c8:	ldr	r3, [r3]
   116cc:	sub	r3, r3, #1
   116d0:	mov	r0, r3
   116d4:	bl	11a7c <__assert_fail@plt+0xbc0>
   116d8:	b	11748 <__assert_fail@plt+0x88c>
   116dc:	ldr	r3, [fp, #-8]
   116e0:	uxtb	r3, r3
   116e4:	strb	r3, [fp, #-12]
   116e8:	mov	r3, #0
   116ec:	strb	r3, [fp, #-11]
   116f0:	sub	r3, fp, #12
   116f4:	mov	r0, r3
   116f8:	bl	11a7c <__assert_fail@plt+0xbc0>
   116fc:	b	11748 <__assert_fail@plt+0x88c>
   11700:	mov	r0, #0
   11704:	bl	11200 <__assert_fail@plt+0x344>
   11708:	ldr	r3, [pc, #212]	; 117e4 <__assert_fail@plt+0x928>
   1170c:	ldr	r0, [r3]
   11710:	ldr	r3, [pc, #208]	; 117e8 <__assert_fail@plt+0x92c>
   11714:	ldr	r2, [r3]
   11718:	mov	r3, #0
   1171c:	str	r3, [sp, #4]
   11720:	ldr	r3, [pc, #196]	; 117ec <__assert_fail@plt+0x930>
   11724:	str	r3, [sp]
   11728:	mov	r3, r2
   1172c:	ldr	r2, [pc, #188]	; 117f0 <__assert_fail@plt+0x934>
   11730:	ldr	r1, [pc, #188]	; 117f4 <__assert_fail@plt+0x938>
   11734:	bl	159b4 <__assert_fail@plt+0x4af8>
   11738:	mov	r0, #0
   1173c:	bl	10dcc <exit@plt>
   11740:	mov	r0, #1
   11744:	bl	11200 <__assert_fail@plt+0x344>
   11748:	mov	r3, #0
   1174c:	str	r3, [sp]
   11750:	ldr	r3, [pc, #160]	; 117f8 <__assert_fail@plt+0x93c>
   11754:	ldr	r2, [pc, #160]	; 117fc <__assert_fail@plt+0x940>
   11758:	ldr	r1, [fp, #-20]	; 0xffffffec
   1175c:	ldr	r0, [fp, #-16]
   11760:	bl	10db4 <getopt_long@plt>
   11764:	str	r0, [fp, #-8]
   11768:	ldr	r3, [fp, #-8]
   1176c:	cmn	r3, #1
   11770:	bne	11654 <__assert_fail@plt+0x798>
   11774:	bl	12060 <__assert_fail@plt+0x11a4>
   11778:	ldr	r3, [pc, #128]	; 11800 <__assert_fail@plt+0x944>
   1177c:	ldr	r2, [r3]
   11780:	ldr	r3, [fp, #-16]
   11784:	cmp	r2, r3
   11788:	bge	117a4 <__assert_fail@plt+0x8e8>
   1178c:	ldr	r3, [pc, #108]	; 11800 <__assert_fail@plt+0x944>
   11790:	ldr	r3, [r3]
   11794:	lsl	r3, r3, #2
   11798:	ldr	r2, [fp, #-20]	; 0xffffffec
   1179c:	add	r3, r2, r3
   117a0:	b	117a8 <__assert_fail@plt+0x8ec>
   117a4:	mov	r3, #0
   117a8:	mov	r0, r3
   117ac:	bl	12340 <__assert_fail@plt+0x1484>
   117b0:	bl	1132c <__assert_fail@plt+0x470>
   117b4:	bl	125b4 <__assert_fail@plt+0x16f8>
   117b8:	ldr	r3, [pc, #68]	; 11804 <__assert_fail@plt+0x948>
   117bc:	ldr	r3, [r3]
   117c0:	mov	r0, r3
   117c4:	sub	sp, fp, #4
   117c8:	pop	{fp, pc}
   117cc:			; <UNDEFINED> instruction: 0x00017bb4
   117d0:	muleq	r1, r0, lr
   117d4:	andeq	r7, r1, ip, asr #23
   117d8:	ldrdeq	r2, [r1], -r8
   117dc:	andeq	r9, r2, r0, ror #2
   117e0:	andeq	r9, r2, r8, asr r1
   117e4:	andeq	r9, r2, r4, asr r1
   117e8:	andeq	r9, r2, ip, ror #1
   117ec:	andeq	r7, r1, r8, lsr #29
   117f0:	strdeq	r7, [r1], -ip
   117f4:	andeq	r7, r1, r4, ror #28
   117f8:	andeq	r7, r1, ip, lsr #25
   117fc:	andeq	r7, r1, r8, ror #24
   11800:	andeq	r9, r2, r0, asr #2
   11804:	andeq	r9, r2, r8, ror #2
   11808:	push	{fp}		; (str fp, [sp, #-4]!)
   1180c:	add	fp, sp, #0
   11810:	sub	sp, sp, #12
   11814:	mov	r3, r0
   11818:	strb	r3, [fp, #-5]
   1181c:	ldrb	r3, [fp, #-5]
   11820:	mov	r0, r3
   11824:	add	sp, fp, #0
   11828:	pop	{fp}		; (ldr fp, [sp], #4)
   1182c:	bx	lr
   11830:	push	{fp, lr}
   11834:	add	fp, sp, #4
   11838:	sub	sp, sp, #24
   1183c:	strd	r0, [fp, #-28]	; 0xffffffe4
   11840:	ldr	r3, [pc, #320]	; 11988 <__assert_fail@plt+0xacc>
   11844:	ldr	r3, [r3]
   11848:	cmp	r3, #0
   1184c:	beq	11874 <__assert_fail@plt+0x9b8>
   11850:	ldr	r3, [pc, #308]	; 1198c <__assert_fail@plt+0xad0>
   11854:	ldr	r2, [r3]
   11858:	ldr	r3, [pc, #296]	; 11988 <__assert_fail@plt+0xacc>
   1185c:	ldr	r3, [r3]
   11860:	sub	r3, r3, #-536870911	; 0xe0000001
   11864:	lsl	r3, r3, #3
   11868:	add	r3, r2, r3
   1186c:	ldrd	r2, [r3]
   11870:	b	1187c <__assert_fail@plt+0x9c0>
   11874:	mov	r2, #0
   11878:	mov	r3, #0
   1187c:	strd	r2, [fp, #-12]
   11880:	ldrd	r0, [fp, #-12]
   11884:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11888:	cmp	r1, r3
   1188c:	cmpeq	r0, r2
   11890:	bhi	118a8 <__assert_fail@plt+0x9ec>
   11894:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11898:	ldrd	r2, [fp, #-12]
   1189c:	subs	r2, r0, r2
   118a0:	sbc	r3, r1, r3
   118a4:	b	118b0 <__assert_fail@plt+0x9f4>
   118a8:	mov	r2, #0
   118ac:	mov	r3, #0
   118b0:	strd	r2, [fp, #-20]	; 0xffffffec
   118b4:	ldr	r3, [pc, #204]	; 11988 <__assert_fail@plt+0xacc>
   118b8:	ldr	r2, [r3]
   118bc:	ldr	r3, [pc, #204]	; 11990 <__assert_fail@plt+0xad4>
   118c0:	ldr	r3, [r3]
   118c4:	cmp	r2, r3
   118c8:	bne	118f0 <__assert_fail@plt+0xa34>
   118cc:	ldr	r3, [pc, #184]	; 1198c <__assert_fail@plt+0xad0>
   118d0:	ldr	r3, [r3]
   118d4:	mov	r2, #8
   118d8:	ldr	r1, [pc, #176]	; 11990 <__assert_fail@plt+0xad4>
   118dc:	mov	r0, r3
   118e0:	bl	15d78 <__assert_fail@plt+0x4ebc>
   118e4:	mov	r2, r0
   118e8:	ldr	r3, [pc, #156]	; 1198c <__assert_fail@plt+0xad0>
   118ec:	str	r2, [r3]
   118f0:	ldr	r3, [pc, #148]	; 1198c <__assert_fail@plt+0xad0>
   118f4:	ldr	r2, [r3]
   118f8:	ldr	r3, [pc, #136]	; 11988 <__assert_fail@plt+0xacc>
   118fc:	ldr	r3, [r3]
   11900:	add	r1, r3, #1
   11904:	ldr	r0, [pc, #124]	; 11988 <__assert_fail@plt+0xacc>
   11908:	str	r1, [r0]
   1190c:	lsl	r3, r3, #3
   11910:	add	r1, r2, r3
   11914:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11918:	strd	r2, [r1]
   1191c:	ldr	r3, [pc, #112]	; 11994 <__assert_fail@plt+0xad8>
   11920:	ldr	r3, [r3]
   11924:	mov	r0, r3
   11928:	mov	r1, #0
   1192c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11930:	cmp	r1, r3
   11934:	cmpeq	r0, r2
   11938:	bcs	1197c <__assert_fail@plt+0xac0>
   1193c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11940:	mvn	r0, #0
   11944:	mov	r1, #0
   11948:	cmp	r3, r1
   1194c:	cmpeq	r2, r0
   11950:	bls	11970 <__assert_fail@plt+0xab4>
   11954:	ldr	r0, [pc, #60]	; 11998 <__assert_fail@plt+0xadc>
   11958:	bl	10dd8 <gettext@plt>
   1195c:	mov	r3, r0
   11960:	mov	r2, r3
   11964:	mov	r1, #0
   11968:	mov	r0, #1
   1196c:	bl	10d78 <error@plt>
   11970:	ldr	r3, [fp, #-20]	; 0xffffffec
   11974:	ldr	r2, [pc, #24]	; 11994 <__assert_fail@plt+0xad8>
   11978:	str	r3, [r2]
   1197c:	nop			; (mov r0, r0)
   11980:	sub	sp, fp, #4
   11984:	pop	{fp, pc}
   11988:	muleq	r2, r0, r1
   1198c:	andeq	r9, r2, r8, lsl #3
   11990:	andeq	r9, r2, ip, lsl #3
   11994:	andeq	r9, r2, r4, ror #2
   11998:			; <UNDEFINED> instruction: 0x00017ebc
   1199c:	push	{fp, lr}
   119a0:	add	fp, sp, #4
   119a4:	sub	sp, sp, #16
   119a8:	strd	r0, [fp, #-20]	; 0xffffffec
   119ac:	mov	r3, #1
   119b0:	strb	r3, [fp, #-5]
   119b4:	ldr	r3, [pc, #72]	; 11a04 <__assert_fail@plt+0xb48>
   119b8:	ldrd	r2, [r3]
   119bc:	orrs	r3, r2, r3
   119c0:	beq	119e8 <__assert_fail@plt+0xb2c>
   119c4:	ldr	r0, [pc, #60]	; 11a08 <__assert_fail@plt+0xb4c>
   119c8:	bl	10dd8 <gettext@plt>
   119cc:	mov	r3, r0
   119d0:	mov	r2, r3
   119d4:	mov	r1, #0
   119d8:	mov	r0, #0
   119dc:	bl	10d78 <error@plt>
   119e0:	mov	r3, #0
   119e4:	strb	r3, [fp, #-5]
   119e8:	ldr	r1, [pc, #20]	; 11a04 <__assert_fail@plt+0xb48>
   119ec:	ldrd	r2, [fp, #-20]	; 0xffffffec
   119f0:	strd	r2, [r1]
   119f4:	ldrb	r3, [fp, #-5]
   119f8:	mov	r0, r3
   119fc:	sub	sp, fp, #4
   11a00:	pop	{fp, pc}
   11a04:	andeq	r9, r2, r8, ror r1
   11a08:	ldrdeq	r7, [r1], -r4
   11a0c:	push	{fp, lr}
   11a10:	add	fp, sp, #4
   11a14:	sub	sp, sp, #16
   11a18:	strd	r0, [fp, #-20]	; 0xffffffec
   11a1c:	mov	r3, #1
   11a20:	strb	r3, [fp, #-5]
   11a24:	ldr	r3, [pc, #72]	; 11a74 <__assert_fail@plt+0xbb8>
   11a28:	ldrd	r2, [r3]
   11a2c:	orrs	r3, r2, r3
   11a30:	beq	11a58 <__assert_fail@plt+0xb9c>
   11a34:	ldr	r0, [pc, #60]	; 11a78 <__assert_fail@plt+0xbbc>
   11a38:	bl	10dd8 <gettext@plt>
   11a3c:	mov	r3, r0
   11a40:	mov	r2, r3
   11a44:	mov	r1, #0
   11a48:	mov	r0, #0
   11a4c:	bl	10d78 <error@plt>
   11a50:	mov	r3, #0
   11a54:	strb	r3, [fp, #-5]
   11a58:	ldr	r1, [pc, #20]	; 11a74 <__assert_fail@plt+0xbb8>
   11a5c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11a60:	strd	r2, [r1]
   11a64:	ldrb	r3, [fp, #-5]
   11a68:	mov	r0, r3
   11a6c:	sub	sp, fp, #4
   11a70:	pop	{fp, pc}
   11a74:	andeq	r9, r2, r0, lsl #3
   11a78:	andeq	r7, r1, r4, lsl #30
   11a7c:	push	{r4, fp, lr}
   11a80:	add	fp, sp, #8
   11a84:	sub	sp, sp, #44	; 0x2c
   11a88:	str	r0, [fp, #-48]	; 0xffffffd0
   11a8c:	mov	r3, #0
   11a90:	strb	r3, [fp, #-13]
   11a94:	mov	r2, #0
   11a98:	mov	r3, #0
   11a9c:	strd	r2, [fp, #-44]	; 0xffffffd4
   11aa0:	mov	r3, #0
   11aa4:	strb	r3, [fp, #-14]
   11aa8:	mov	r3, #0
   11aac:	strb	r3, [fp, #-15]
   11ab0:	mov	r3, #0
   11ab4:	str	r3, [fp, #-20]	; 0xffffffec
   11ab8:	mov	r3, #1
   11abc:	strb	r3, [fp, #-21]	; 0xffffffeb
   11ac0:	b	11e30 <__assert_fail@plt+0xf74>
   11ac4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ac8:	ldrb	r3, [r3]
   11acc:	cmp	r3, #44	; 0x2c
   11ad0:	beq	11b0c <__assert_fail@plt+0xc50>
   11ad4:	bl	10dc0 <__ctype_b_loc@plt>
   11ad8:	mov	r3, r0
   11adc:	ldr	r4, [r3]
   11ae0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ae4:	ldrb	r3, [r3]
   11ae8:	mov	r0, r3
   11aec:	bl	11808 <__assert_fail@plt+0x94c>
   11af0:	mov	r3, r0
   11af4:	lsl	r3, r3, #1
   11af8:	add	r3, r4, r3
   11afc:	ldrh	r3, [r3]
   11b00:	and	r3, r3, #1
   11b04:	cmp	r3, #0
   11b08:	beq	11bac <__assert_fail@plt+0xcf0>
   11b0c:	ldrb	r3, [fp, #-13]
   11b10:	cmp	r3, #0
   11b14:	beq	11ba0 <__assert_fail@plt+0xce4>
   11b18:	ldrb	r3, [fp, #-14]
   11b1c:	cmp	r3, #0
   11b20:	beq	11b54 <__assert_fail@plt+0xc98>
   11b24:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11b28:	mov	r0, r2
   11b2c:	mov	r1, r3
   11b30:	bl	1199c <__assert_fail@plt+0xae0>
   11b34:	mov	r3, r0
   11b38:	eor	r3, r3, #1
   11b3c:	uxtb	r3, r3
   11b40:	cmp	r3, #0
   11b44:	beq	11ba0 <__assert_fail@plt+0xce4>
   11b48:	mov	r3, #0
   11b4c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11b50:	b	11e40 <__assert_fail@plt+0xf84>
   11b54:	ldrb	r3, [fp, #-15]
   11b58:	cmp	r3, #0
   11b5c:	beq	11b90 <__assert_fail@plt+0xcd4>
   11b60:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11b64:	mov	r0, r2
   11b68:	mov	r1, r3
   11b6c:	bl	11a0c <__assert_fail@plt+0xb50>
   11b70:	mov	r3, r0
   11b74:	eor	r3, r3, #1
   11b78:	uxtb	r3, r3
   11b7c:	cmp	r3, #0
   11b80:	beq	11ba0 <__assert_fail@plt+0xce4>
   11b84:	mov	r3, #0
   11b88:	strb	r3, [fp, #-21]	; 0xffffffeb
   11b8c:	b	11e40 <__assert_fail@plt+0xf84>
   11b90:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11b94:	mov	r0, r2
   11b98:	mov	r1, r3
   11b9c:	bl	11830 <__assert_fail@plt+0x974>
   11ba0:	mov	r3, #0
   11ba4:	strb	r3, [fp, #-13]
   11ba8:	b	11e24 <__assert_fail@plt+0xf68>
   11bac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11bb0:	ldrb	r3, [r3]
   11bb4:	cmp	r3, #47	; 0x2f
   11bb8:	bne	11c0c <__assert_fail@plt+0xd50>
   11bbc:	ldrb	r3, [fp, #-13]
   11bc0:	cmp	r3, #0
   11bc4:	beq	11bf8 <__assert_fail@plt+0xd3c>
   11bc8:	ldr	r0, [pc, #840]	; 11f18 <__assert_fail@plt+0x105c>
   11bcc:	bl	10dd8 <gettext@plt>
   11bd0:	mov	r4, r0
   11bd4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11bd8:	bl	152e8 <__assert_fail@plt+0x442c>
   11bdc:	mov	r3, r0
   11be0:	mov	r2, r4
   11be4:	mov	r1, #0
   11be8:	mov	r0, #0
   11bec:	bl	10d78 <error@plt>
   11bf0:	mov	r3, #0
   11bf4:	strb	r3, [fp, #-21]	; 0xffffffeb
   11bf8:	mov	r3, #1
   11bfc:	strb	r3, [fp, #-14]
   11c00:	mov	r3, #0
   11c04:	strb	r3, [fp, #-15]
   11c08:	b	11e24 <__assert_fail@plt+0xf68>
   11c0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11c10:	ldrb	r3, [r3]
   11c14:	cmp	r3, #43	; 0x2b
   11c18:	bne	11c6c <__assert_fail@plt+0xdb0>
   11c1c:	ldrb	r3, [fp, #-13]
   11c20:	cmp	r3, #0
   11c24:	beq	11c58 <__assert_fail@plt+0xd9c>
   11c28:	ldr	r0, [pc, #748]	; 11f1c <__assert_fail@plt+0x1060>
   11c2c:	bl	10dd8 <gettext@plt>
   11c30:	mov	r4, r0
   11c34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11c38:	bl	152e8 <__assert_fail@plt+0x442c>
   11c3c:	mov	r3, r0
   11c40:	mov	r2, r4
   11c44:	mov	r1, #0
   11c48:	mov	r0, #0
   11c4c:	bl	10d78 <error@plt>
   11c50:	mov	r3, #0
   11c54:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c58:	mov	r3, #1
   11c5c:	strb	r3, [fp, #-15]
   11c60:	mov	r3, #0
   11c64:	strb	r3, [fp, #-14]
   11c68:	b	11e24 <__assert_fail@plt+0xf68>
   11c6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11c70:	ldrb	r3, [r3]
   11c74:	sub	r3, r3, #48	; 0x30
   11c78:	cmp	r3, #9
   11c7c:	bhi	11df0 <__assert_fail@plt+0xf34>
   11c80:	ldrb	r3, [fp, #-13]
   11c84:	eor	r3, r3, #1
   11c88:	uxtb	r3, r3
   11c8c:	cmp	r3, #0
   11c90:	beq	11cb0 <__assert_fail@plt+0xdf4>
   11c94:	mov	r2, #0
   11c98:	mov	r3, #0
   11c9c:	strd	r2, [fp, #-44]	; 0xffffffd4
   11ca0:	mov	r3, #1
   11ca4:	strb	r3, [fp, #-13]
   11ca8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11cac:	str	r3, [fp, #-20]	; 0xffffffec
   11cb0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11cb4:	add	r1, pc, #596	; 0x254
   11cb8:	ldrd	r0, [r1]
   11cbc:	cmp	r3, r1
   11cc0:	cmpeq	r2, r0
   11cc4:	bhi	11d6c <__assert_fail@plt+0xeb0>
   11cc8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11ccc:	mov	r1, #10
   11cd0:	mul	r0, r1, r3
   11cd4:	mov	r1, #0
   11cd8:	mul	r1, r1, r2
   11cdc:	add	r1, r0, r1
   11ce0:	mov	r0, #10
   11ce4:	umull	r2, r3, r2, r0
   11ce8:	add	r1, r1, r3
   11cec:	mov	r3, r1
   11cf0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11cf4:	ldrb	r1, [r1]
   11cf8:	sub	r1, r1, #48	; 0x30
   11cfc:	mov	r0, r1
   11d00:	asr	r1, r0, #31
   11d04:	adds	r0, r0, r2
   11d08:	adc	r1, r1, r3
   11d0c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d10:	cmp	r1, r3
   11d14:	cmpeq	r0, r2
   11d18:	bcc	11d6c <__assert_fail@plt+0xeb0>
   11d1c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d20:	mov	r1, #10
   11d24:	mul	r0, r1, r3
   11d28:	mov	r1, #0
   11d2c:	mul	r1, r1, r2
   11d30:	add	r1, r0, r1
   11d34:	mov	r0, #10
   11d38:	umull	r2, r3, r2, r0
   11d3c:	add	r1, r1, r3
   11d40:	mov	r3, r1
   11d44:	ldr	r1, [fp, #-48]	; 0xffffffd0
   11d48:	ldrb	r1, [r1]
   11d4c:	sub	r1, r1, #48	; 0x30
   11d50:	mov	r0, r1
   11d54:	asr	r1, r0, #31
   11d58:	adds	r2, r2, r0
   11d5c:	adc	r3, r3, r1
   11d60:	strd	r2, [fp, #-44]	; 0xffffffd4
   11d64:	mov	r3, #0
   11d68:	b	11d70 <__assert_fail@plt+0xeb4>
   11d6c:	mov	r3, #1
   11d70:	cmp	r3, #0
   11d74:	beq	11e24 <__assert_fail@plt+0xf68>
   11d78:	ldr	r1, [pc, #416]	; 11f20 <__assert_fail@plt+0x1064>
   11d7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11d80:	bl	10eb0 <strspn@plt>
   11d84:	str	r0, [fp, #-28]	; 0xffffffe4
   11d88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11d8c:	mov	r1, r3
   11d90:	ldr	r0, [fp, #-20]	; 0xffffffec
   11d94:	bl	1657c <__assert_fail@plt+0x56c0>
   11d98:	mov	r3, r0
   11d9c:	str	r3, [fp, #-32]	; 0xffffffe0
   11da0:	ldr	r0, [pc, #380]	; 11f24 <__assert_fail@plt+0x1068>
   11da4:	bl	10dd8 <gettext@plt>
   11da8:	mov	r4, r0
   11dac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11db0:	bl	152e8 <__assert_fail@plt+0x442c>
   11db4:	mov	r3, r0
   11db8:	mov	r2, r4
   11dbc:	mov	r1, #0
   11dc0:	mov	r0, #0
   11dc4:	bl	10d78 <error@plt>
   11dc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11dcc:	bl	12a48 <__assert_fail@plt+0x1b8c>
   11dd0:	mov	r3, #0
   11dd4:	strb	r3, [fp, #-21]	; 0xffffffeb
   11dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ddc:	sub	r3, r3, #1
   11de0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11de4:	add	r3, r2, r3
   11de8:	str	r3, [fp, #-48]	; 0xffffffd0
   11dec:	b	11e24 <__assert_fail@plt+0xf68>
   11df0:	ldr	r0, [pc, #304]	; 11f28 <__assert_fail@plt+0x106c>
   11df4:	bl	10dd8 <gettext@plt>
   11df8:	mov	r4, r0
   11dfc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11e00:	bl	152e8 <__assert_fail@plt+0x442c>
   11e04:	mov	r3, r0
   11e08:	mov	r2, r4
   11e0c:	mov	r1, #0
   11e10:	mov	r0, #0
   11e14:	bl	10d78 <error@plt>
   11e18:	mov	r3, #0
   11e1c:	strb	r3, [fp, #-21]	; 0xffffffeb
   11e20:	b	11e40 <__assert_fail@plt+0xf84>
   11e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11e28:	add	r3, r3, #1
   11e2c:	str	r3, [fp, #-48]	; 0xffffffd0
   11e30:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11e34:	ldrb	r3, [r3]
   11e38:	cmp	r3, #0
   11e3c:	bne	11ac4 <__assert_fail@plt+0xc08>
   11e40:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11e44:	cmp	r3, #0
   11e48:	beq	11ee8 <__assert_fail@plt+0x102c>
   11e4c:	ldrb	r3, [fp, #-13]
   11e50:	cmp	r3, #0
   11e54:	beq	11ee8 <__assert_fail@plt+0x102c>
   11e58:	ldrb	r3, [fp, #-14]
   11e5c:	cmp	r3, #0
   11e60:	beq	11e98 <__assert_fail@plt+0xfdc>
   11e64:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11e68:	mov	r0, r2
   11e6c:	mov	r1, r3
   11e70:	bl	1199c <__assert_fail@plt+0xae0>
   11e74:	mov	r3, r0
   11e78:	mov	r2, r3
   11e7c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11e80:	and	r3, r3, r2
   11e84:	cmp	r3, #0
   11e88:	movne	r3, #1
   11e8c:	moveq	r3, #0
   11e90:	strb	r3, [fp, #-21]	; 0xffffffeb
   11e94:	b	11ee8 <__assert_fail@plt+0x102c>
   11e98:	ldrb	r3, [fp, #-15]
   11e9c:	cmp	r3, #0
   11ea0:	beq	11ed8 <__assert_fail@plt+0x101c>
   11ea4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11ea8:	mov	r0, r2
   11eac:	mov	r1, r3
   11eb0:	bl	11a0c <__assert_fail@plt+0xb50>
   11eb4:	mov	r3, r0
   11eb8:	mov	r2, r3
   11ebc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11ec0:	and	r3, r3, r2
   11ec4:	cmp	r3, #0
   11ec8:	movne	r3, #1
   11ecc:	moveq	r3, #0
   11ed0:	strb	r3, [fp, #-21]	; 0xffffffeb
   11ed4:	b	11ee8 <__assert_fail@plt+0x102c>
   11ed8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11edc:	mov	r0, r2
   11ee0:	mov	r1, r3
   11ee4:	bl	11830 <__assert_fail@plt+0x974>
   11ee8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11eec:	eor	r3, r3, #1
   11ef0:	uxtb	r3, r3
   11ef4:	cmp	r3, #0
   11ef8:	beq	11f04 <__assert_fail@plt+0x1048>
   11efc:	mov	r0, #1
   11f00:	bl	10dcc <exit@plt>
   11f04:	nop			; (mov r0, r0)
   11f08:	sub	sp, fp, #8
   11f0c:	pop	{r4, fp, pc}
   11f10:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11f14:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11f18:	andeq	r7, r1, r4, lsr pc
   11f1c:	andeq	r7, r1, r0, ror #30
   11f20:	andeq	r7, r1, ip, lsl #31
   11f24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11f28:			; <UNDEFINED> instruction: 0x00017fb4
   11f2c:	push	{fp, lr}
   11f30:	add	fp, sp, #4
   11f34:	sub	sp, sp, #24
   11f38:	str	r0, [fp, #-24]	; 0xffffffe8
   11f3c:	str	r1, [fp, #-28]	; 0xffffffe4
   11f40:	mov	r2, #0
   11f44:	mov	r3, #0
   11f48:	strd	r2, [fp, #-12]
   11f4c:	mov	r3, #0
   11f50:	str	r3, [fp, #-16]
   11f54:	b	11ff4 <__assert_fail@plt+0x1138>
   11f58:	ldr	r3, [fp, #-16]
   11f5c:	lsl	r3, r3, #3
   11f60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f64:	add	r3, r2, r3
   11f68:	ldrd	r2, [r3]
   11f6c:	orrs	r3, r2, r3
   11f70:	bne	11f90 <__assert_fail@plt+0x10d4>
   11f74:	ldr	r0, [pc, #208]	; 1204c <__assert_fail@plt+0x1190>
   11f78:	bl	10dd8 <gettext@plt>
   11f7c:	mov	r3, r0
   11f80:	mov	r2, r3
   11f84:	mov	r1, #0
   11f88:	mov	r0, #1
   11f8c:	bl	10d78 <error@plt>
   11f90:	ldr	r3, [fp, #-16]
   11f94:	lsl	r3, r3, #3
   11f98:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11f9c:	add	r3, r2, r3
   11fa0:	ldrd	r0, [r3]
   11fa4:	ldrd	r2, [fp, #-12]
   11fa8:	cmp	r1, r3
   11fac:	cmpeq	r0, r2
   11fb0:	bhi	11fd0 <__assert_fail@plt+0x1114>
   11fb4:	ldr	r0, [pc, #148]	; 12050 <__assert_fail@plt+0x1194>
   11fb8:	bl	10dd8 <gettext@plt>
   11fbc:	mov	r3, r0
   11fc0:	mov	r2, r3
   11fc4:	mov	r1, #0
   11fc8:	mov	r0, #1
   11fcc:	bl	10d78 <error@plt>
   11fd0:	ldr	r3, [fp, #-16]
   11fd4:	lsl	r3, r3, #3
   11fd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11fdc:	add	r3, r2, r3
   11fe0:	ldrd	r2, [r3]
   11fe4:	strd	r2, [fp, #-12]
   11fe8:	ldr	r3, [fp, #-16]
   11fec:	add	r3, r3, #1
   11ff0:	str	r3, [fp, #-16]
   11ff4:	ldr	r2, [fp, #-16]
   11ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ffc:	cmp	r2, r3
   12000:	bcc	11f58 <__assert_fail@plt+0x109c>
   12004:	ldr	r3, [pc, #72]	; 12054 <__assert_fail@plt+0x1198>
   12008:	ldrd	r2, [r3]
   1200c:	orrs	r3, r2, r3
   12010:	beq	12040 <__assert_fail@plt+0x1184>
   12014:	ldr	r3, [pc, #60]	; 12058 <__assert_fail@plt+0x119c>
   12018:	ldrd	r2, [r3]
   1201c:	orrs	r3, r2, r3
   12020:	beq	12040 <__assert_fail@plt+0x1184>
   12024:	ldr	r0, [pc, #48]	; 1205c <__assert_fail@plt+0x11a0>
   12028:	bl	10dd8 <gettext@plt>
   1202c:	mov	r3, r0
   12030:	mov	r2, r3
   12034:	mov	r1, #0
   12038:	mov	r0, #1
   1203c:	bl	10d78 <error@plt>
   12040:	nop			; (mov r0, r0)
   12044:	sub	sp, fp, #4
   12048:	pop	{fp, pc}
   1204c:	andeq	r7, r1, r0, ror #31
   12050:	strdeq	r7, [r1], -r8
   12054:	andeq	r9, r2, r0, lsl #3
   12058:	andeq	r9, r2, r8, ror r1
   1205c:	andeq	r8, r1, r4, lsl r0
   12060:	push	{fp, lr}
   12064:	add	fp, sp, #4
   12068:	ldr	r3, [pc, #236]	; 1215c <__assert_fail@plt+0x12a0>
   1206c:	ldr	r2, [r3]
   12070:	ldr	r3, [pc, #232]	; 12160 <__assert_fail@plt+0x12a4>
   12074:	ldr	r3, [r3]
   12078:	mov	r1, r3
   1207c:	mov	r0, r2
   12080:	bl	11f2c <__assert_fail@plt+0x1070>
   12084:	ldr	r3, [pc, #212]	; 12160 <__assert_fail@plt+0x12a4>
   12088:	ldr	r3, [r3]
   1208c:	cmp	r3, #0
   12090:	bne	120fc <__assert_fail@plt+0x1240>
   12094:	ldr	r3, [pc, #200]	; 12164 <__assert_fail@plt+0x12a8>
   12098:	ldrd	r2, [r3]
   1209c:	orrs	r3, r2, r3
   120a0:	bne	120cc <__assert_fail@plt+0x1210>
   120a4:	ldr	r3, [pc, #188]	; 12168 <__assert_fail@plt+0x12ac>
   120a8:	ldrd	r2, [r3]
   120ac:	orrs	r3, r2, r3
   120b0:	beq	120c4 <__assert_fail@plt+0x1208>
   120b4:	ldr	r3, [pc, #172]	; 12168 <__assert_fail@plt+0x12ac>
   120b8:	ldrd	r2, [r3]
   120bc:	mov	r3, r2
   120c0:	b	120d8 <__assert_fail@plt+0x121c>
   120c4:	mov	r3, #8
   120c8:	b	120d8 <__assert_fail@plt+0x121c>
   120cc:	ldr	r3, [pc, #144]	; 12164 <__assert_fail@plt+0x12a8>
   120d0:	ldrd	r2, [r3]
   120d4:	mov	r3, r2
   120d8:	ldr	r2, [pc, #140]	; 1216c <__assert_fail@plt+0x12b0>
   120dc:	str	r3, [r2]
   120e0:	ldr	r3, [pc, #132]	; 1216c <__assert_fail@plt+0x12b0>
   120e4:	ldr	r3, [r3]
   120e8:	mov	r2, r3
   120ec:	mov	r3, #0
   120f0:	ldr	r1, [pc, #120]	; 12170 <__assert_fail@plt+0x12b4>
   120f4:	strd	r2, [r1]
   120f8:	b	12154 <__assert_fail@plt+0x1298>
   120fc:	ldr	r3, [pc, #92]	; 12160 <__assert_fail@plt+0x12a4>
   12100:	ldr	r3, [r3]
   12104:	cmp	r3, #1
   12108:	bne	12144 <__assert_fail@plt+0x1288>
   1210c:	ldr	r3, [pc, #80]	; 12164 <__assert_fail@plt+0x12a8>
   12110:	ldrd	r2, [r3]
   12114:	orrs	r3, r2, r3
   12118:	bne	12144 <__assert_fail@plt+0x1288>
   1211c:	ldr	r3, [pc, #68]	; 12168 <__assert_fail@plt+0x12ac>
   12120:	ldrd	r2, [r3]
   12124:	orrs	r3, r2, r3
   12128:	bne	12144 <__assert_fail@plt+0x1288>
   1212c:	ldr	r3, [pc, #40]	; 1215c <__assert_fail@plt+0x12a0>
   12130:	ldr	r3, [r3]
   12134:	ldrd	r2, [r3]
   12138:	ldr	r1, [pc, #48]	; 12170 <__assert_fail@plt+0x12b4>
   1213c:	strd	r2, [r1]
   12140:	b	12154 <__assert_fail@plt+0x1298>
   12144:	ldr	r1, [pc, #36]	; 12170 <__assert_fail@plt+0x12b4>
   12148:	mov	r2, #0
   1214c:	mov	r3, #0
   12150:	strd	r2, [r1]
   12154:	nop			; (mov r0, r0)
   12158:	pop	{fp, pc}
   1215c:	andeq	r9, r2, r8, lsl #3
   12160:	muleq	r2, r0, r1
   12164:	andeq	r9, r2, r8, ror r1
   12168:	andeq	r9, r2, r0, lsl #3
   1216c:	andeq	r9, r2, r4, ror #2
   12170:	andeq	r9, r2, r0, ror r1
   12174:	push	{r4, r5, fp, lr}
   12178:	add	fp, sp, #12
   1217c:	sub	sp, sp, #32
   12180:	strd	r0, [fp, #-36]	; 0xffffffdc
   12184:	str	r2, [fp, #-40]	; 0xffffffd8
   12188:	str	r3, [fp, #-44]	; 0xffffffd4
   1218c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12190:	mov	r2, #0
   12194:	strb	r2, [r3]
   12198:	ldr	r3, [pc, #396]	; 1232c <__assert_fail@plt+0x1470>
   1219c:	ldrd	r2, [r3]
   121a0:	orrs	r3, r2, r3
   121a4:	beq	12230 <__assert_fail@plt+0x1374>
   121a8:	ldr	r3, [pc, #380]	; 1232c <__assert_fail@plt+0x1470>
   121ac:	ldrd	r4, [r3]
   121b0:	ldr	r3, [pc, #372]	; 1232c <__assert_fail@plt+0x1470>
   121b4:	ldrd	r2, [r3]
   121b8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   121bc:	bl	1783c <__assert_fail@plt+0x6980>
   121c0:	mov	r0, r4
   121c4:	mov	r1, r5
   121c8:	subs	r0, r0, r2
   121cc:	sbc	r1, r1, r3
   121d0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   121d4:	adds	r2, r2, r0
   121d8:	adc	r3, r3, r1
   121dc:	b	1231c <__assert_fail@plt+0x1460>
   121e0:	ldr	r3, [pc, #328]	; 12330 <__assert_fail@plt+0x1474>
   121e4:	ldr	r2, [r3]
   121e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   121ec:	ldr	r3, [r3]
   121f0:	lsl	r3, r3, #3
   121f4:	add	r3, r2, r3
   121f8:	ldrd	r2, [r3]
   121fc:	strd	r2, [fp, #-20]	; 0xffffffec
   12200:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12204:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12208:	cmp	r1, r3
   1220c:	cmpeq	r0, r2
   12210:	bcs	1221c <__assert_fail@plt+0x1360>
   12214:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12218:	b	1231c <__assert_fail@plt+0x1460>
   1221c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12220:	ldr	r3, [r3]
   12224:	add	r2, r3, #1
   12228:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1222c:	str	r2, [r3]
   12230:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12234:	ldr	r2, [r3]
   12238:	ldr	r3, [pc, #244]	; 12334 <__assert_fail@plt+0x1478>
   1223c:	ldr	r3, [r3]
   12240:	cmp	r2, r3
   12244:	bcc	121e0 <__assert_fail@plt+0x1324>
   12248:	ldr	r3, [pc, #232]	; 12338 <__assert_fail@plt+0x147c>
   1224c:	ldrd	r2, [r3]
   12250:	orrs	r3, r2, r3
   12254:	beq	12290 <__assert_fail@plt+0x13d4>
   12258:	ldr	r3, [pc, #216]	; 12338 <__assert_fail@plt+0x147c>
   1225c:	ldrd	r4, [r3]
   12260:	ldr	r3, [pc, #208]	; 12338 <__assert_fail@plt+0x147c>
   12264:	ldrd	r2, [r3]
   12268:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1226c:	bl	1783c <__assert_fail@plt+0x6980>
   12270:	mov	r0, r4
   12274:	mov	r1, r5
   12278:	subs	r0, r0, r2
   1227c:	sbc	r1, r1, r3
   12280:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12284:	adds	r2, r2, r0
   12288:	adc	r3, r3, r1
   1228c:	b	1231c <__assert_fail@plt+0x1460>
   12290:	ldr	r3, [pc, #164]	; 1233c <__assert_fail@plt+0x1480>
   12294:	ldrd	r2, [r3]
   12298:	orrs	r3, r2, r3
   1229c:	beq	12308 <__assert_fail@plt+0x144c>
   122a0:	ldr	r3, [pc, #136]	; 12330 <__assert_fail@plt+0x1474>
   122a4:	ldr	r2, [r3]
   122a8:	ldr	r3, [pc, #132]	; 12334 <__assert_fail@plt+0x1478>
   122ac:	ldr	r3, [r3]
   122b0:	sub	r3, r3, #-536870911	; 0xe0000001
   122b4:	lsl	r3, r3, #3
   122b8:	add	r3, r2, r3
   122bc:	ldrd	r2, [r3]
   122c0:	strd	r2, [fp, #-28]	; 0xffffffe4
   122c4:	ldr	r3, [pc, #112]	; 1233c <__assert_fail@plt+0x1480>
   122c8:	ldrd	r4, [r3]
   122cc:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   122d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   122d4:	subs	r0, r0, r2
   122d8:	sbc	r1, r1, r3
   122dc:	ldr	r3, [pc, #88]	; 1233c <__assert_fail@plt+0x1480>
   122e0:	ldrd	r2, [r3]
   122e4:	bl	1783c <__assert_fail@plt+0x6980>
   122e8:	mov	r0, r4
   122ec:	mov	r1, r5
   122f0:	subs	r0, r0, r2
   122f4:	sbc	r1, r1, r3
   122f8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   122fc:	adds	r2, r2, r0
   12300:	adc	r3, r3, r1
   12304:	b	1231c <__assert_fail@plt+0x1460>
   12308:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1230c:	mov	r2, #1
   12310:	strb	r2, [r3]
   12314:	mov	r2, #0
   12318:	mov	r3, #0
   1231c:	mov	r0, r2
   12320:	mov	r1, r3
   12324:	sub	sp, fp, #12
   12328:	pop	{r4, r5, fp, pc}
   1232c:	andeq	r9, r2, r0, ror r1
   12330:	andeq	r9, r2, r8, lsl #3
   12334:	muleq	r2, r0, r1
   12338:	andeq	r9, r2, r8, ror r1
   1233c:	andeq	r9, r2, r0, lsl #3
   12340:	push	{fp}		; (str fp, [sp, #-4]!)
   12344:	add	fp, sp, #0
   12348:	sub	sp, sp, #12
   1234c:	str	r0, [fp, #-8]
   12350:	ldr	r3, [pc, #60]	; 12394 <__assert_fail@plt+0x14d8>
   12354:	mov	r2, #0
   12358:	strb	r2, [r3]
   1235c:	ldr	r3, [fp, #-8]
   12360:	cmp	r3, #0
   12364:	bne	12378 <__assert_fail@plt+0x14bc>
   12368:	ldr	r3, [pc, #40]	; 12398 <__assert_fail@plt+0x14dc>
   1236c:	ldr	r2, [pc, #40]	; 1239c <__assert_fail@plt+0x14e0>
   12370:	str	r2, [r3]
   12374:	b	12384 <__assert_fail@plt+0x14c8>
   12378:	ldr	r2, [pc, #24]	; 12398 <__assert_fail@plt+0x14dc>
   1237c:	ldr	r3, [fp, #-8]
   12380:	str	r3, [r2]
   12384:	nop			; (mov r0, r0)
   12388:	add	sp, fp, #0
   1238c:	pop	{fp}		; (ldr fp, [sp], #4)
   12390:	bx	lr
   12394:	muleq	r2, r8, r1
   12398:	muleq	r2, r4, r1
   1239c:	andeq	r9, r2, r4, ror #1
   123a0:	push	{r4, fp, lr}
   123a4:	add	fp, sp, #8
   123a8:	sub	sp, sp, #20
   123ac:	str	r0, [fp, #-24]	; 0xffffffe8
   123b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123b4:	cmp	r3, #0
   123b8:	beq	12550 <__assert_fail@plt+0x1694>
   123bc:	ldr	r3, [pc, #452]	; 12588 <__assert_fail@plt+0x16cc>
   123c0:	ldr	r3, [r3]
   123c4:	cmp	r3, #0
   123c8:	bne	123e0 <__assert_fail@plt+0x1524>
   123cc:	ldr	r3, [pc, #440]	; 1258c <__assert_fail@plt+0x16d0>
   123d0:	mov	r2, #340	; 0x154
   123d4:	ldr	r1, [pc, #436]	; 12590 <__assert_fail@plt+0x16d4>
   123d8:	ldr	r0, [pc, #436]	; 12594 <__assert_fail@plt+0x16d8>
   123dc:	bl	10ebc <__assert_fail@plt>
   123e0:	bl	10dfc <__errno_location@plt>
   123e4:	mov	r3, r0
   123e8:	ldr	r3, [r3]
   123ec:	str	r3, [fp, #-16]
   123f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   123f4:	bl	10d60 <ferror_unlocked@plt>
   123f8:	mov	r3, r0
   123fc:	cmp	r3, #0
   12400:	bne	1240c <__assert_fail@plt+0x1550>
   12404:	mov	r3, #0
   12408:	str	r3, [fp, #-16]
   1240c:	ldr	r3, [pc, #372]	; 12588 <__assert_fail@plt+0x16cc>
   12410:	ldr	r3, [r3]
   12414:	ldr	r1, [pc, #380]	; 12598 <__assert_fail@plt+0x16dc>
   12418:	mov	r0, r3
   1241c:	bl	10c88 <strcmp@plt>
   12420:	mov	r3, r0
   12424:	cmp	r3, #0
   12428:	bne	12438 <__assert_fail@plt+0x157c>
   1242c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12430:	bl	10e68 <clearerr_unlocked@plt>
   12434:	b	1245c <__assert_fail@plt+0x15a0>
   12438:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1243c:	bl	128a8 <__assert_fail@plt+0x19ec>
   12440:	mov	r3, r0
   12444:	cmp	r3, #0
   12448:	beq	1245c <__assert_fail@plt+0x15a0>
   1244c:	bl	10dfc <__errno_location@plt>
   12450:	mov	r3, r0
   12454:	ldr	r3, [r3]
   12458:	str	r3, [fp, #-16]
   1245c:	ldr	r3, [fp, #-16]
   12460:	cmp	r3, #0
   12464:	beq	12550 <__assert_fail@plt+0x1694>
   12468:	ldr	r3, [pc, #280]	; 12588 <__assert_fail@plt+0x16cc>
   1246c:	ldr	r3, [r3]
   12470:	mov	r2, r3
   12474:	mov	r1, #3
   12478:	mov	r0, #0
   1247c:	bl	15078 <__assert_fail@plt+0x41bc>
   12480:	mov	r3, r0
   12484:	ldr	r2, [pc, #272]	; 1259c <__assert_fail@plt+0x16e0>
   12488:	ldr	r1, [fp, #-16]
   1248c:	mov	r0, #0
   12490:	bl	10d78 <error@plt>
   12494:	ldr	r3, [pc, #260]	; 125a0 <__assert_fail@plt+0x16e4>
   12498:	mov	r2, #1
   1249c:	str	r2, [r3]
   124a0:	b	12550 <__assert_fail@plt+0x1694>
   124a4:	ldr	r1, [pc, #236]	; 12598 <__assert_fail@plt+0x16dc>
   124a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   124ac:	bl	10c88 <strcmp@plt>
   124b0:	mov	r3, r0
   124b4:	cmp	r3, #0
   124b8:	bne	124d8 <__assert_fail@plt+0x161c>
   124bc:	ldr	r3, [pc, #224]	; 125a4 <__assert_fail@plt+0x16e8>
   124c0:	mov	r2, #1
   124c4:	strb	r2, [r3]
   124c8:	ldr	r3, [pc, #216]	; 125a8 <__assert_fail@plt+0x16ec>
   124cc:	ldr	r3, [r3]
   124d0:	str	r3, [fp, #-24]	; 0xffffffe8
   124d4:	b	124e8 <__assert_fail@plt+0x162c>
   124d8:	ldr	r1, [pc, #204]	; 125ac <__assert_fail@plt+0x16f0>
   124dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   124e0:	bl	10e74 <fopen64@plt>
   124e4:	str	r0, [fp, #-24]	; 0xffffffe8
   124e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124ec:	cmp	r3, #0
   124f0:	beq	12514 <__assert_fail@plt+0x1658>
   124f4:	ldr	r2, [pc, #140]	; 12588 <__assert_fail@plt+0x16cc>
   124f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   124fc:	str	r3, [r2]
   12500:	mov	r1, #2
   12504:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12508:	bl	1284c <__assert_fail@plt+0x1990>
   1250c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12510:	b	1257c <__assert_fail@plt+0x16c0>
   12514:	bl	10dfc <__errno_location@plt>
   12518:	mov	r3, r0
   1251c:	ldr	r4, [r3]
   12520:	ldr	r2, [fp, #-20]	; 0xffffffec
   12524:	mov	r1, #3
   12528:	mov	r0, #0
   1252c:	bl	15078 <__assert_fail@plt+0x41bc>
   12530:	mov	r3, r0
   12534:	ldr	r2, [pc, #96]	; 1259c <__assert_fail@plt+0x16e0>
   12538:	mov	r1, r4
   1253c:	mov	r0, #0
   12540:	bl	10d78 <error@plt>
   12544:	ldr	r3, [pc, #84]	; 125a0 <__assert_fail@plt+0x16e4>
   12548:	mov	r2, #1
   1254c:	str	r2, [r3]
   12550:	ldr	r3, [pc, #88]	; 125b0 <__assert_fail@plt+0x16f4>
   12554:	ldr	r3, [r3]
   12558:	add	r2, r3, #4
   1255c:	ldr	r1, [pc, #76]	; 125b0 <__assert_fail@plt+0x16f4>
   12560:	str	r2, [r1]
   12564:	ldr	r3, [r3]
   12568:	str	r3, [fp, #-20]	; 0xffffffec
   1256c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12570:	cmp	r3, #0
   12574:	bne	124a4 <__assert_fail@plt+0x15e8>
   12578:	mov	r3, #0
   1257c:	mov	r0, r3
   12580:	sub	sp, fp, #8
   12584:	pop	{r4, fp, pc}
   12588:	muleq	r2, ip, r1
   1258c:	andeq	r8, r1, ip, lsl r2
   12590:	andeq	r8, r1, r4, asr #32
   12594:	andeq	r8, r1, r8, asr r0
   12598:			; <UNDEFINED> instruction: 0x00017eb8
   1259c:	andeq	r8, r1, r4, rrx
   125a0:	andeq	r9, r2, r8, ror #2
   125a4:	muleq	r2, r8, r1
   125a8:	andeq	r9, r2, r0, asr r1
   125ac:	andeq	r8, r1, r8, rrx
   125b0:	muleq	r2, r4, r1
   125b4:	push	{fp, lr}
   125b8:	add	fp, sp, #4
   125bc:	ldr	r3, [pc, #72]	; 1260c <__assert_fail@plt+0x1750>
   125c0:	ldrb	r3, [r3]
   125c4:	cmp	r3, #0
   125c8:	beq	12604 <__assert_fail@plt+0x1748>
   125cc:	ldr	r3, [pc, #60]	; 12610 <__assert_fail@plt+0x1754>
   125d0:	ldr	r3, [r3]
   125d4:	mov	r0, r3
   125d8:	bl	128a8 <__assert_fail@plt+0x19ec>
   125dc:	mov	r3, r0
   125e0:	cmp	r3, #0
   125e4:	beq	12604 <__assert_fail@plt+0x1748>
   125e8:	bl	10dfc <__errno_location@plt>
   125ec:	mov	r3, r0
   125f0:	ldr	r3, [r3]
   125f4:	ldr	r2, [pc, #24]	; 12614 <__assert_fail@plt+0x1758>
   125f8:	mov	r1, r3
   125fc:	mov	r0, #1
   12600:	bl	10d78 <error@plt>
   12604:	nop			; (mov r0, r0)
   12608:	pop	{fp, pc}
   1260c:	muleq	r2, r8, r1
   12610:	andeq	r9, r2, r0, asr r1
   12614:			; <UNDEFINED> instruction: 0x00017eb8
   12618:	push	{fp, lr}
   1261c:	add	fp, sp, #4
   12620:	ldr	r0, [pc, #64]	; 12668 <__assert_fail@plt+0x17ac>
   12624:	bl	10dd8 <gettext@plt>
   12628:	mov	r2, r0
   1262c:	ldr	r3, [pc, #56]	; 1266c <__assert_fail@plt+0x17b0>
   12630:	ldr	r3, [r3]
   12634:	mov	r1, r3
   12638:	mov	r0, r2
   1263c:	bl	10c70 <fputs_unlocked@plt>
   12640:	ldr	r0, [pc, #40]	; 12670 <__assert_fail@plt+0x17b4>
   12644:	bl	10dd8 <gettext@plt>
   12648:	mov	r2, r0
   1264c:	ldr	r3, [pc, #24]	; 1266c <__assert_fail@plt+0x17b0>
   12650:	ldr	r3, [r3]
   12654:	mov	r1, r3
   12658:	mov	r0, r2
   1265c:	bl	10c70 <fputs_unlocked@plt>
   12660:	nop			; (mov r0, r0)
   12664:	pop	{fp, pc}
   12668:	andeq	r8, r1, ip, rrx
   1266c:	andeq	r9, r2, r4, asr r1
   12670:	andeq	r8, r1, ip, lsr #1
   12674:	push	{fp}		; (str fp, [sp, #-4]!)
   12678:	add	fp, sp, #0
   1267c:	sub	sp, sp, #12
   12680:	str	r0, [fp, #-8]
   12684:	ldr	r2, [pc, #20]	; 126a0 <__assert_fail@plt+0x17e4>
   12688:	ldr	r3, [fp, #-8]
   1268c:	str	r3, [r2]
   12690:	nop			; (mov r0, r0)
   12694:	add	sp, fp, #0
   12698:	pop	{fp}		; (ldr fp, [sp], #4)
   1269c:	bx	lr
   126a0:	andeq	r9, r2, r0, lsr #3
   126a4:	push	{fp}		; (str fp, [sp, #-4]!)
   126a8:	add	fp, sp, #0
   126ac:	sub	sp, sp, #12
   126b0:	mov	r3, r0
   126b4:	strb	r3, [fp, #-5]
   126b8:	ldr	r2, [pc, #20]	; 126d4 <__assert_fail@plt+0x1818>
   126bc:	ldrb	r3, [fp, #-5]
   126c0:	strb	r3, [r2]
   126c4:	nop			; (mov r0, r0)
   126c8:	add	sp, fp, #0
   126cc:	pop	{fp}		; (ldr fp, [sp], #4)
   126d0:	bx	lr
   126d4:	andeq	r9, r2, r4, lsr #3
   126d8:	push	{r4, fp, lr}
   126dc:	add	fp, sp, #8
   126e0:	sub	sp, sp, #20
   126e4:	ldr	r3, [pc, #256]	; 127ec <__assert_fail@plt+0x1930>
   126e8:	ldr	r3, [r3]
   126ec:	mov	r0, r3
   126f0:	bl	1692c <__assert_fail@plt+0x5a70>
   126f4:	mov	r3, r0
   126f8:	cmp	r3, #0
   126fc:	beq	127b4 <__assert_fail@plt+0x18f8>
   12700:	ldr	r3, [pc, #232]	; 127f0 <__assert_fail@plt+0x1934>
   12704:	ldrb	r3, [r3]
   12708:	eor	r3, r3, #1
   1270c:	uxtb	r3, r3
   12710:	cmp	r3, #0
   12714:	bne	1272c <__assert_fail@plt+0x1870>
   12718:	bl	10dfc <__errno_location@plt>
   1271c:	mov	r3, r0
   12720:	ldr	r3, [r3]
   12724:	cmp	r3, #32
   12728:	beq	127b4 <__assert_fail@plt+0x18f8>
   1272c:	ldr	r0, [pc, #192]	; 127f4 <__assert_fail@plt+0x1938>
   12730:	bl	10dd8 <gettext@plt>
   12734:	str	r0, [fp, #-16]
   12738:	ldr	r3, [pc, #184]	; 127f8 <__assert_fail@plt+0x193c>
   1273c:	ldr	r3, [r3]
   12740:	cmp	r3, #0
   12744:	beq	12788 <__assert_fail@plt+0x18cc>
   12748:	bl	10dfc <__errno_location@plt>
   1274c:	mov	r3, r0
   12750:	ldr	r4, [r3]
   12754:	ldr	r3, [pc, #156]	; 127f8 <__assert_fail@plt+0x193c>
   12758:	ldr	r3, [r3]
   1275c:	mov	r0, r3
   12760:	bl	15018 <__assert_fail@plt+0x415c>
   12764:	mov	r2, r0
   12768:	ldr	r3, [fp, #-16]
   1276c:	str	r3, [sp]
   12770:	mov	r3, r2
   12774:	ldr	r2, [pc, #128]	; 127fc <__assert_fail@plt+0x1940>
   12778:	mov	r1, r4
   1277c:	mov	r0, #0
   12780:	bl	10d78 <error@plt>
   12784:	b	127a4 <__assert_fail@plt+0x18e8>
   12788:	bl	10dfc <__errno_location@plt>
   1278c:	mov	r3, r0
   12790:	ldr	r1, [r3]
   12794:	ldr	r3, [fp, #-16]
   12798:	ldr	r2, [pc, #96]	; 12800 <__assert_fail@plt+0x1944>
   1279c:	mov	r0, #0
   127a0:	bl	10d78 <error@plt>
   127a4:	ldr	r3, [pc, #88]	; 12804 <__assert_fail@plt+0x1948>
   127a8:	ldr	r3, [r3]
   127ac:	mov	r0, r3
   127b0:	bl	10cc4 <_exit@plt>
   127b4:	ldr	r3, [pc, #76]	; 12808 <__assert_fail@plt+0x194c>
   127b8:	ldr	r3, [r3]
   127bc:	mov	r0, r3
   127c0:	bl	1692c <__assert_fail@plt+0x5a70>
   127c4:	mov	r3, r0
   127c8:	cmp	r3, #0
   127cc:	beq	127e0 <__assert_fail@plt+0x1924>
   127d0:	ldr	r3, [pc, #44]	; 12804 <__assert_fail@plt+0x1948>
   127d4:	ldr	r3, [r3]
   127d8:	mov	r0, r3
   127dc:	bl	10cc4 <_exit@plt>
   127e0:	nop			; (mov r0, r0)
   127e4:	sub	sp, fp, #8
   127e8:	pop	{r4, fp, pc}
   127ec:	andeq	r9, r2, r4, asr r1
   127f0:	andeq	r9, r2, r4, lsr #3
   127f4:	andeq	r8, r1, r8, lsr r2
   127f8:	andeq	r9, r2, r0, lsr #3
   127fc:	andeq	r8, r1, r4, asr #4
   12800:	andeq	r8, r1, ip, asr #4
   12804:	strdeq	r9, [r2], -r0
   12808:	andeq	r9, r2, r8, asr #2
   1280c:	push	{fp, lr}
   12810:	add	fp, sp, #4
   12814:	sub	sp, sp, #40	; 0x28
   12818:	str	r0, [fp, #-16]
   1281c:	strd	r2, [fp, #-28]	; 0xffffffe4
   12820:	ldr	r3, [fp, #12]
   12824:	str	r3, [sp, #8]
   12828:	ldrd	r2, [fp, #4]
   1282c:	strd	r2, [sp]
   12830:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12834:	ldr	r0, [fp, #-16]
   12838:	bl	10c94 <posix_fadvise64@plt>
   1283c:	str	r0, [fp, #-8]
   12840:	nop			; (mov r0, r0)
   12844:	sub	sp, fp, #4
   12848:	pop	{fp, pc}
   1284c:	push	{fp, lr}
   12850:	add	fp, sp, #4
   12854:	sub	sp, sp, #24
   12858:	str	r0, [fp, #-8]
   1285c:	str	r1, [fp, #-12]
   12860:	ldr	r3, [fp, #-8]
   12864:	cmp	r3, #0
   12868:	beq	1289c <__assert_fail@plt+0x19e0>
   1286c:	ldr	r0, [fp, #-8]
   12870:	bl	10e20 <fileno@plt>
   12874:	mov	r1, r0
   12878:	ldr	r3, [fp, #-12]
   1287c:	str	r3, [sp, #8]
   12880:	mov	r2, #0
   12884:	mov	r3, #0
   12888:	strd	r2, [sp]
   1288c:	mov	r2, #0
   12890:	mov	r3, #0
   12894:	mov	r0, r1
   12898:	bl	1280c <__assert_fail@plt+0x1950>
   1289c:	nop			; (mov r0, r0)
   128a0:	sub	sp, fp, #4
   128a4:	pop	{fp, pc}
   128a8:	push	{fp, lr}
   128ac:	add	fp, sp, #4
   128b0:	sub	sp, sp, #32
   128b4:	str	r0, [fp, #-24]	; 0xffffffe8
   128b8:	mov	r3, #0
   128bc:	str	r3, [fp, #-8]
   128c0:	mov	r3, #0
   128c4:	str	r3, [fp, #-12]
   128c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   128cc:	bl	10e20 <fileno@plt>
   128d0:	str	r0, [fp, #-16]
   128d4:	ldr	r3, [fp, #-16]
   128d8:	cmp	r3, #0
   128dc:	bge	128f0 <__assert_fail@plt+0x1a34>
   128e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   128e4:	bl	10e2c <fclose@plt>
   128e8:	mov	r3, r0
   128ec:	b	12994 <__assert_fail@plt+0x1ad8>
   128f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   128f4:	bl	10d9c <__freading@plt>
   128f8:	mov	r3, r0
   128fc:	cmp	r3, #0
   12900:	beq	1293c <__assert_fail@plt+0x1a80>
   12904:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12908:	bl	10e20 <fileno@plt>
   1290c:	mov	r1, r0
   12910:	mov	r3, #1
   12914:	str	r3, [sp]
   12918:	mov	r2, #0
   1291c:	mov	r3, #0
   12920:	mov	r0, r1
   12924:	bl	10d3c <lseek64@plt>
   12928:	mvn	r2, #0
   1292c:	mvn	r3, #0
   12930:	cmp	r1, r3
   12934:	cmpeq	r0, r2
   12938:	beq	12960 <__assert_fail@plt+0x1aa4>
   1293c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12940:	bl	129e8 <__assert_fail@plt+0x1b2c>
   12944:	mov	r3, r0
   12948:	cmp	r3, #0
   1294c:	beq	12960 <__assert_fail@plt+0x1aa4>
   12950:	bl	10dfc <__errno_location@plt>
   12954:	mov	r3, r0
   12958:	ldr	r3, [r3]
   1295c:	str	r3, [fp, #-8]
   12960:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12964:	bl	10e2c <fclose@plt>
   12968:	str	r0, [fp, #-12]
   1296c:	ldr	r3, [fp, #-8]
   12970:	cmp	r3, #0
   12974:	beq	12990 <__assert_fail@plt+0x1ad4>
   12978:	bl	10dfc <__errno_location@plt>
   1297c:	mov	r2, r0
   12980:	ldr	r3, [fp, #-8]
   12984:	str	r3, [r2]
   12988:	mvn	r3, #0
   1298c:	str	r3, [fp, #-12]
   12990:	ldr	r3, [fp, #-12]
   12994:	mov	r0, r3
   12998:	sub	sp, fp, #4
   1299c:	pop	{fp, pc}
   129a0:	push	{fp, lr}
   129a4:	add	fp, sp, #4
   129a8:	sub	sp, sp, #16
   129ac:	str	r0, [fp, #-8]
   129b0:	ldr	r3, [fp, #-8]
   129b4:	ldr	r3, [r3]
   129b8:	and	r3, r3, #256	; 0x100
   129bc:	cmp	r3, #0
   129c0:	beq	129dc <__assert_fail@plt+0x1b20>
   129c4:	mov	r3, #1
   129c8:	str	r3, [sp]
   129cc:	mov	r2, #0
   129d0:	mov	r3, #0
   129d4:	ldr	r0, [fp, #-8]
   129d8:	bl	12ad4 <__assert_fail@plt+0x1c18>
   129dc:	nop			; (mov r0, r0)
   129e0:	sub	sp, fp, #4
   129e4:	pop	{fp, pc}
   129e8:	push	{fp, lr}
   129ec:	add	fp, sp, #4
   129f0:	sub	sp, sp, #8
   129f4:	str	r0, [fp, #-8]
   129f8:	ldr	r3, [fp, #-8]
   129fc:	cmp	r3, #0
   12a00:	beq	12a18 <__assert_fail@plt+0x1b5c>
   12a04:	ldr	r0, [fp, #-8]
   12a08:	bl	10d9c <__freading@plt>
   12a0c:	mov	r3, r0
   12a10:	cmp	r3, #0
   12a14:	bne	12a28 <__assert_fail@plt+0x1b6c>
   12a18:	ldr	r0, [fp, #-8]
   12a1c:	bl	10cac <fflush@plt>
   12a20:	mov	r3, r0
   12a24:	b	12a3c <__assert_fail@plt+0x1b80>
   12a28:	ldr	r0, [fp, #-8]
   12a2c:	bl	129a0 <__assert_fail@plt+0x1ae4>
   12a30:	ldr	r0, [fp, #-8]
   12a34:	bl	10cac <fflush@plt>
   12a38:	mov	r3, r0
   12a3c:	mov	r0, r3
   12a40:	sub	sp, fp, #4
   12a44:	pop	{fp, pc}
   12a48:	push	{r4, fp, lr}
   12a4c:	add	fp, sp, #8
   12a50:	sub	sp, sp, #20
   12a54:	str	r0, [fp, #-24]	; 0xffffffe8
   12a58:	bl	10dfc <__errno_location@plt>
   12a5c:	mov	r3, r0
   12a60:	ldr	r3, [r3]
   12a64:	str	r3, [fp, #-20]	; 0xffffffec
   12a68:	bl	10dfc <__errno_location@plt>
   12a6c:	mov	r3, r0
   12a70:	ldr	r3, [r3]
   12a74:	str	r3, [fp, #-16]
   12a78:	bl	10dfc <__errno_location@plt>
   12a7c:	mov	r2, r0
   12a80:	mov	r3, #0
   12a84:	str	r3, [r2]
   12a88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12a8c:	bl	10cb8 <free@plt>
   12a90:	bl	10dfc <__errno_location@plt>
   12a94:	mov	r4, r0
   12a98:	bl	10dfc <__errno_location@plt>
   12a9c:	mov	r3, r0
   12aa0:	ldr	r3, [r3]
   12aa4:	cmp	r3, #0
   12aa8:	moveq	r3, #1
   12aac:	movne	r3, #0
   12ab0:	uxtb	r3, r3
   12ab4:	lsl	r3, r3, #2
   12ab8:	sub	r2, fp, #12
   12abc:	add	r3, r2, r3
   12ac0:	ldr	r3, [r3, #-8]
   12ac4:	str	r3, [r4]
   12ac8:	nop			; (mov r0, r0)
   12acc:	sub	sp, fp, #8
   12ad0:	pop	{r4, fp, pc}
   12ad4:	push	{fp, lr}
   12ad8:	add	fp, sp, #4
   12adc:	sub	sp, sp, #32
   12ae0:	str	r0, [fp, #-16]
   12ae4:	strd	r2, [fp, #-28]	; 0xffffffe4
   12ae8:	ldr	r3, [fp, #-16]
   12aec:	ldr	r2, [r3, #8]
   12af0:	ldr	r3, [fp, #-16]
   12af4:	ldr	r3, [r3, #4]
   12af8:	cmp	r2, r3
   12afc:	bne	12b94 <__assert_fail@plt+0x1cd8>
   12b00:	ldr	r3, [fp, #-16]
   12b04:	ldr	r2, [r3, #20]
   12b08:	ldr	r3, [fp, #-16]
   12b0c:	ldr	r3, [r3, #16]
   12b10:	cmp	r2, r3
   12b14:	bne	12b94 <__assert_fail@plt+0x1cd8>
   12b18:	ldr	r3, [fp, #-16]
   12b1c:	ldr	r3, [r3, #36]	; 0x24
   12b20:	cmp	r3, #0
   12b24:	bne	12b94 <__assert_fail@plt+0x1cd8>
   12b28:	ldr	r0, [fp, #-16]
   12b2c:	bl	10e20 <fileno@plt>
   12b30:	mov	r1, r0
   12b34:	ldr	r3, [fp, #4]
   12b38:	str	r3, [sp]
   12b3c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12b40:	mov	r0, r1
   12b44:	bl	10d3c <lseek64@plt>
   12b48:	strd	r0, [fp, #-12]
   12b4c:	ldrd	r2, [fp, #-12]
   12b50:	mvn	r0, #0
   12b54:	mvn	r1, #0
   12b58:	cmp	r3, r1
   12b5c:	cmpeq	r2, r0
   12b60:	bne	12b6c <__assert_fail@plt+0x1cb0>
   12b64:	mvn	r3, #0
   12b68:	b	12bac <__assert_fail@plt+0x1cf0>
   12b6c:	ldr	r3, [fp, #-16]
   12b70:	ldr	r3, [r3]
   12b74:	bic	r2, r3, #16
   12b78:	ldr	r3, [fp, #-16]
   12b7c:	str	r2, [r3]
   12b80:	ldr	r1, [fp, #-16]
   12b84:	ldrd	r2, [fp, #-12]
   12b88:	strd	r2, [r1, #80]	; 0x50
   12b8c:	mov	r3, #0
   12b90:	b	12bac <__assert_fail@plt+0x1cf0>
   12b94:	ldr	r3, [fp, #4]
   12b98:	str	r3, [sp]
   12b9c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12ba0:	ldr	r0, [fp, #-16]
   12ba4:	bl	10e38 <fseeko64@plt>
   12ba8:	mov	r3, r0
   12bac:	mov	r0, r3
   12bb0:	sub	sp, fp, #4
   12bb4:	pop	{fp, pc}
   12bb8:	push	{fp, lr}
   12bbc:	add	fp, sp, #4
   12bc0:	sub	sp, sp, #16
   12bc4:	str	r0, [fp, #-16]
   12bc8:	ldr	r3, [fp, #-16]
   12bcc:	cmp	r3, #0
   12bd0:	bne	12bf0 <__assert_fail@plt+0x1d34>
   12bd4:	ldr	r3, [pc, #220]	; 12cb8 <__assert_fail@plt+0x1dfc>
   12bd8:	ldr	r3, [r3]
   12bdc:	mov	r2, #55	; 0x37
   12be0:	mov	r1, #1
   12be4:	ldr	r0, [pc, #208]	; 12cbc <__assert_fail@plt+0x1e00>
   12be8:	bl	10d30 <fwrite@plt>
   12bec:	bl	10e98 <abort@plt>
   12bf0:	mov	r1, #47	; 0x2f
   12bf4:	ldr	r0, [fp, #-16]
   12bf8:	bl	10e50 <strrchr@plt>
   12bfc:	str	r0, [fp, #-8]
   12c00:	ldr	r3, [fp, #-8]
   12c04:	cmp	r3, #0
   12c08:	beq	12c18 <__assert_fail@plt+0x1d5c>
   12c0c:	ldr	r3, [fp, #-8]
   12c10:	add	r3, r3, #1
   12c14:	b	12c1c <__assert_fail@plt+0x1d60>
   12c18:	ldr	r3, [fp, #-16]
   12c1c:	str	r3, [fp, #-12]
   12c20:	ldr	r2, [fp, #-12]
   12c24:	ldr	r3, [fp, #-16]
   12c28:	sub	r3, r2, r3
   12c2c:	cmp	r3, #6
   12c30:	ble	12c94 <__assert_fail@plt+0x1dd8>
   12c34:	ldr	r3, [fp, #-12]
   12c38:	sub	r3, r3, #7
   12c3c:	mov	r2, #7
   12c40:	ldr	r1, [pc, #120]	; 12cc0 <__assert_fail@plt+0x1e04>
   12c44:	mov	r0, r3
   12c48:	bl	10e8c <strncmp@plt>
   12c4c:	mov	r3, r0
   12c50:	cmp	r3, #0
   12c54:	bne	12c94 <__assert_fail@plt+0x1dd8>
   12c58:	ldr	r3, [fp, #-12]
   12c5c:	str	r3, [fp, #-16]
   12c60:	mov	r2, #3
   12c64:	ldr	r1, [pc, #88]	; 12cc4 <__assert_fail@plt+0x1e08>
   12c68:	ldr	r0, [fp, #-12]
   12c6c:	bl	10e8c <strncmp@plt>
   12c70:	mov	r3, r0
   12c74:	cmp	r3, #0
   12c78:	bne	12c94 <__assert_fail@plt+0x1dd8>
   12c7c:	ldr	r3, [fp, #-12]
   12c80:	add	r3, r3, #3
   12c84:	str	r3, [fp, #-16]
   12c88:	ldr	r2, [pc, #56]	; 12cc8 <__assert_fail@plt+0x1e0c>
   12c8c:	ldr	r3, [fp, #-16]
   12c90:	str	r3, [r2]
   12c94:	ldr	r2, [pc, #48]	; 12ccc <__assert_fail@plt+0x1e10>
   12c98:	ldr	r3, [fp, #-16]
   12c9c:	str	r3, [r2]
   12ca0:	ldr	r2, [pc, #40]	; 12cd0 <__assert_fail@plt+0x1e14>
   12ca4:	ldr	r3, [fp, #-16]
   12ca8:	str	r3, [r2]
   12cac:	nop			; (mov r0, r0)
   12cb0:	sub	sp, fp, #4
   12cb4:	pop	{fp, pc}
   12cb8:	andeq	r9, r2, r8, asr #2
   12cbc:	andeq	r8, r1, r0, asr r2
   12cc0:	andeq	r8, r1, r8, lsl #5
   12cc4:	muleq	r1, r0, r2
   12cc8:	andeq	r9, r2, r8, lsr r1
   12ccc:	andeq	r9, r2, r8, lsr #3
   12cd0:	andeq	r9, r2, ip, lsr r1
   12cd4:	push	{fp, lr}
   12cd8:	add	fp, sp, #4
   12cdc:	sub	sp, sp, #16
   12ce0:	str	r0, [fp, #-16]
   12ce4:	bl	10dfc <__errno_location@plt>
   12ce8:	mov	r3, r0
   12cec:	ldr	r3, [r3]
   12cf0:	str	r3, [fp, #-8]
   12cf4:	ldr	r3, [fp, #-16]
   12cf8:	cmp	r3, #0
   12cfc:	beq	12d08 <__assert_fail@plt+0x1e4c>
   12d00:	ldr	r3, [fp, #-16]
   12d04:	b	12d0c <__assert_fail@plt+0x1e50>
   12d08:	ldr	r3, [pc, #48]	; 12d40 <__assert_fail@plt+0x1e84>
   12d0c:	mov	r1, #48	; 0x30
   12d10:	mov	r0, r3
   12d14:	bl	164f8 <__assert_fail@plt+0x563c>
   12d18:	mov	r3, r0
   12d1c:	str	r3, [fp, #-12]
   12d20:	bl	10dfc <__errno_location@plt>
   12d24:	mov	r2, r0
   12d28:	ldr	r3, [fp, #-8]
   12d2c:	str	r3, [r2]
   12d30:	ldr	r3, [fp, #-12]
   12d34:	mov	r0, r3
   12d38:	sub	sp, fp, #4
   12d3c:	pop	{fp, pc}
   12d40:	andeq	r9, r2, ip, lsr #3
   12d44:	push	{fp}		; (str fp, [sp, #-4]!)
   12d48:	add	fp, sp, #0
   12d4c:	sub	sp, sp, #12
   12d50:	str	r0, [fp, #-8]
   12d54:	ldr	r3, [fp, #-8]
   12d58:	cmp	r3, #0
   12d5c:	beq	12d68 <__assert_fail@plt+0x1eac>
   12d60:	ldr	r3, [fp, #-8]
   12d64:	b	12d6c <__assert_fail@plt+0x1eb0>
   12d68:	ldr	r3, [pc, #16]	; 12d80 <__assert_fail@plt+0x1ec4>
   12d6c:	ldr	r3, [r3]
   12d70:	mov	r0, r3
   12d74:	add	sp, fp, #0
   12d78:	pop	{fp}		; (ldr fp, [sp], #4)
   12d7c:	bx	lr
   12d80:	andeq	r9, r2, ip, lsr #3
   12d84:	push	{fp}		; (str fp, [sp, #-4]!)
   12d88:	add	fp, sp, #0
   12d8c:	sub	sp, sp, #12
   12d90:	str	r0, [fp, #-8]
   12d94:	str	r1, [fp, #-12]
   12d98:	ldr	r3, [fp, #-8]
   12d9c:	cmp	r3, #0
   12da0:	beq	12dac <__assert_fail@plt+0x1ef0>
   12da4:	ldr	r3, [fp, #-8]
   12da8:	b	12db0 <__assert_fail@plt+0x1ef4>
   12dac:	ldr	r3, [pc, #20]	; 12dc8 <__assert_fail@plt+0x1f0c>
   12db0:	ldr	r2, [fp, #-12]
   12db4:	str	r2, [r3]
   12db8:	nop			; (mov r0, r0)
   12dbc:	add	sp, fp, #0
   12dc0:	pop	{fp}		; (ldr fp, [sp], #4)
   12dc4:	bx	lr
   12dc8:	andeq	r9, r2, ip, lsr #3
   12dcc:	push	{fp}		; (str fp, [sp, #-4]!)
   12dd0:	add	fp, sp, #0
   12dd4:	sub	sp, sp, #36	; 0x24
   12dd8:	str	r0, [fp, #-24]	; 0xffffffe8
   12ddc:	mov	r3, r1
   12de0:	str	r2, [fp, #-32]	; 0xffffffe0
   12de4:	strb	r3, [fp, #-25]	; 0xffffffe7
   12de8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12dec:	strb	r3, [fp, #-5]
   12df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12df4:	cmp	r3, #0
   12df8:	beq	12e04 <__assert_fail@plt+0x1f48>
   12dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e00:	b	12e08 <__assert_fail@plt+0x1f4c>
   12e04:	ldr	r3, [pc, #124]	; 12e88 <__assert_fail@plt+0x1fcc>
   12e08:	add	r2, r3, #8
   12e0c:	ldrb	r3, [fp, #-5]
   12e10:	lsr	r3, r3, #5
   12e14:	uxtb	r3, r3
   12e18:	lsl	r3, r3, #2
   12e1c:	add	r3, r2, r3
   12e20:	str	r3, [fp, #-12]
   12e24:	ldrb	r3, [fp, #-5]
   12e28:	and	r3, r3, #31
   12e2c:	str	r3, [fp, #-16]
   12e30:	ldr	r3, [fp, #-12]
   12e34:	ldr	r2, [r3]
   12e38:	ldr	r3, [fp, #-16]
   12e3c:	lsr	r3, r2, r3
   12e40:	and	r3, r3, #1
   12e44:	str	r3, [fp, #-20]	; 0xffffffec
   12e48:	ldr	r3, [fp, #-12]
   12e4c:	ldr	r3, [r3]
   12e50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12e54:	and	r1, r2, #1
   12e58:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e5c:	eor	r1, r1, r2
   12e60:	ldr	r2, [fp, #-16]
   12e64:	lsl	r2, r1, r2
   12e68:	eor	r2, r2, r3
   12e6c:	ldr	r3, [fp, #-12]
   12e70:	str	r2, [r3]
   12e74:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e78:	mov	r0, r3
   12e7c:	add	sp, fp, #0
   12e80:	pop	{fp}		; (ldr fp, [sp], #4)
   12e84:	bx	lr
   12e88:	andeq	r9, r2, ip, lsr #3
   12e8c:	push	{fp}		; (str fp, [sp, #-4]!)
   12e90:	add	fp, sp, #0
   12e94:	sub	sp, sp, #20
   12e98:	str	r0, [fp, #-16]
   12e9c:	str	r1, [fp, #-20]	; 0xffffffec
   12ea0:	ldr	r3, [fp, #-16]
   12ea4:	cmp	r3, #0
   12ea8:	bne	12eb4 <__assert_fail@plt+0x1ff8>
   12eac:	ldr	r3, [pc, #44]	; 12ee0 <__assert_fail@plt+0x2024>
   12eb0:	str	r3, [fp, #-16]
   12eb4:	ldr	r3, [fp, #-16]
   12eb8:	ldr	r3, [r3, #4]
   12ebc:	str	r3, [fp, #-8]
   12ec0:	ldr	r3, [fp, #-16]
   12ec4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ec8:	str	r2, [r3, #4]
   12ecc:	ldr	r3, [fp, #-8]
   12ed0:	mov	r0, r3
   12ed4:	add	sp, fp, #0
   12ed8:	pop	{fp}		; (ldr fp, [sp], #4)
   12edc:	bx	lr
   12ee0:	andeq	r9, r2, ip, lsr #3
   12ee4:	push	{fp, lr}
   12ee8:	add	fp, sp, #4
   12eec:	sub	sp, sp, #16
   12ef0:	str	r0, [fp, #-8]
   12ef4:	str	r1, [fp, #-12]
   12ef8:	str	r2, [fp, #-16]
   12efc:	ldr	r3, [fp, #-8]
   12f00:	cmp	r3, #0
   12f04:	bne	12f10 <__assert_fail@plt+0x2054>
   12f08:	ldr	r3, [pc, #76]	; 12f5c <__assert_fail@plt+0x20a0>
   12f0c:	str	r3, [fp, #-8]
   12f10:	ldr	r3, [fp, #-8]
   12f14:	mov	r2, #10
   12f18:	str	r2, [r3]
   12f1c:	ldr	r3, [fp, #-12]
   12f20:	cmp	r3, #0
   12f24:	beq	12f34 <__assert_fail@plt+0x2078>
   12f28:	ldr	r3, [fp, #-16]
   12f2c:	cmp	r3, #0
   12f30:	bne	12f38 <__assert_fail@plt+0x207c>
   12f34:	bl	10e98 <abort@plt>
   12f38:	ldr	r3, [fp, #-8]
   12f3c:	ldr	r2, [fp, #-12]
   12f40:	str	r2, [r3, #40]	; 0x28
   12f44:	ldr	r3, [fp, #-8]
   12f48:	ldr	r2, [fp, #-16]
   12f4c:	str	r2, [r3, #44]	; 0x2c
   12f50:	nop			; (mov r0, r0)
   12f54:	sub	sp, fp, #4
   12f58:	pop	{fp, pc}
   12f5c:	andeq	r9, r2, ip, lsr #3
   12f60:	push	{fp, lr}
   12f64:	add	fp, sp, #4
   12f68:	sub	sp, sp, #56	; 0x38
   12f6c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f70:	str	r1, [fp, #-60]	; 0xffffffc4
   12f74:	sub	r3, fp, #52	; 0x34
   12f78:	mov	r2, #48	; 0x30
   12f7c:	mov	r1, #0
   12f80:	mov	r0, r3
   12f84:	bl	10e14 <memset@plt>
   12f88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f8c:	cmp	r3, #10
   12f90:	bne	12f98 <__assert_fail@plt+0x20dc>
   12f94:	bl	10e98 <abort@plt>
   12f98:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f9c:	str	r3, [fp, #-52]	; 0xffffffcc
   12fa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12fa4:	mov	lr, r3
   12fa8:	sub	ip, fp, #52	; 0x34
   12fac:	ldm	ip!, {r0, r1, r2, r3}
   12fb0:	stmia	lr!, {r0, r1, r2, r3}
   12fb4:	ldm	ip!, {r0, r1, r2, r3}
   12fb8:	stmia	lr!, {r0, r1, r2, r3}
   12fbc:	ldm	ip, {r0, r1, r2, r3}
   12fc0:	stm	lr, {r0, r1, r2, r3}
   12fc4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12fc8:	sub	sp, fp, #4
   12fcc:	pop	{fp, pc}
   12fd0:	push	{fp, lr}
   12fd4:	add	fp, sp, #4
   12fd8:	sub	sp, sp, #16
   12fdc:	str	r0, [fp, #-16]
   12fe0:	str	r1, [fp, #-20]	; 0xffffffec
   12fe4:	ldr	r0, [fp, #-16]
   12fe8:	bl	10dd8 <gettext@plt>
   12fec:	str	r0, [fp, #-8]
   12ff0:	ldr	r2, [fp, #-8]
   12ff4:	ldr	r3, [fp, #-16]
   12ff8:	cmp	r2, r3
   12ffc:	beq	13008 <__assert_fail@plt+0x214c>
   13000:	ldr	r3, [fp, #-8]
   13004:	b	13098 <__assert_fail@plt+0x21dc>
   13008:	bl	16b40 <__assert_fail@plt+0x5c84>
   1300c:	str	r0, [fp, #-12]
   13010:	ldr	r1, [pc, #140]	; 130a4 <__assert_fail@plt+0x21e8>
   13014:	ldr	r0, [fp, #-12]
   13018:	bl	16894 <__assert_fail@plt+0x59d8>
   1301c:	mov	r3, r0
   13020:	cmp	r3, #0
   13024:	bne	13048 <__assert_fail@plt+0x218c>
   13028:	ldr	r3, [fp, #-16]
   1302c:	ldrb	r3, [r3]
   13030:	cmp	r3, #96	; 0x60
   13034:	bne	13040 <__assert_fail@plt+0x2184>
   13038:	ldr	r3, [pc, #104]	; 130a8 <__assert_fail@plt+0x21ec>
   1303c:	b	13098 <__assert_fail@plt+0x21dc>
   13040:	ldr	r3, [pc, #100]	; 130ac <__assert_fail@plt+0x21f0>
   13044:	b	13098 <__assert_fail@plt+0x21dc>
   13048:	ldr	r1, [pc, #96]	; 130b0 <__assert_fail@plt+0x21f4>
   1304c:	ldr	r0, [fp, #-12]
   13050:	bl	16894 <__assert_fail@plt+0x59d8>
   13054:	mov	r3, r0
   13058:	cmp	r3, #0
   1305c:	bne	13080 <__assert_fail@plt+0x21c4>
   13060:	ldr	r3, [fp, #-16]
   13064:	ldrb	r3, [r3]
   13068:	cmp	r3, #96	; 0x60
   1306c:	bne	13078 <__assert_fail@plt+0x21bc>
   13070:	ldr	r3, [pc, #60]	; 130b4 <__assert_fail@plt+0x21f8>
   13074:	b	13098 <__assert_fail@plt+0x21dc>
   13078:	ldr	r3, [pc, #56]	; 130b8 <__assert_fail@plt+0x21fc>
   1307c:	b	13098 <__assert_fail@plt+0x21dc>
   13080:	ldr	r3, [fp, #-20]	; 0xffffffec
   13084:	cmp	r3, #9
   13088:	bne	13094 <__assert_fail@plt+0x21d8>
   1308c:	ldr	r3, [pc, #40]	; 130bc <__assert_fail@plt+0x2200>
   13090:	b	13098 <__assert_fail@plt+0x21dc>
   13094:	ldr	r3, [pc, #36]	; 130c0 <__assert_fail@plt+0x2204>
   13098:	mov	r0, r3
   1309c:	sub	sp, fp, #4
   130a0:	pop	{fp, pc}
   130a4:	andeq	r8, r1, r0, asr r3
   130a8:	andeq	r8, r1, r8, asr r3
   130ac:	andeq	r8, r1, ip, asr r3
   130b0:	andeq	r8, r1, r0, ror #6
   130b4:	andeq	r8, r1, r8, ror #6
   130b8:	andeq	r8, r1, ip, ror #6
   130bc:	andeq	r8, r1, r0, ror r3
   130c0:	andeq	r8, r1, r4, ror r3
   130c4:	push	{r4, fp, lr}
   130c8:	add	fp, sp, #8
   130cc:	sub	sp, sp, #116	; 0x74
   130d0:	str	r0, [fp, #-88]	; 0xffffffa8
   130d4:	str	r1, [fp, #-92]	; 0xffffffa4
   130d8:	str	r2, [fp, #-96]	; 0xffffffa0
   130dc:	str	r3, [fp, #-100]	; 0xffffff9c
   130e0:	mov	r3, #0
   130e4:	str	r3, [fp, #-20]	; 0xffffffec
   130e8:	mov	r3, #0
   130ec:	str	r3, [fp, #-24]	; 0xffffffe8
   130f0:	mov	r3, #0
   130f4:	str	r3, [fp, #-28]	; 0xffffffe4
   130f8:	mov	r3, #0
   130fc:	str	r3, [fp, #-32]	; 0xffffffe0
   13100:	mov	r3, #0
   13104:	strb	r3, [fp, #-33]	; 0xffffffdf
   13108:	bl	10d48 <__ctype_get_mb_cur_max@plt>
   1310c:	mov	r3, r0
   13110:	cmp	r3, #1
   13114:	moveq	r3, #1
   13118:	movne	r3, #0
   1311c:	strb	r3, [fp, #-57]	; 0xffffffc7
   13120:	ldr	r3, [fp, #8]
   13124:	and	r3, r3, #2
   13128:	cmp	r3, #0
   1312c:	movne	r3, #1
   13130:	moveq	r3, #0
   13134:	strb	r3, [fp, #-34]	; 0xffffffde
   13138:	mov	r3, #0
   1313c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13140:	mov	r3, #0
   13144:	strb	r3, [fp, #-36]	; 0xffffffdc
   13148:	mov	r3, #1
   1314c:	strb	r3, [fp, #-37]	; 0xffffffdb
   13150:	ldr	r3, [fp, #4]
   13154:	cmp	r3, #10
   13158:	ldrls	pc, [pc, r3, lsl #2]
   1315c:	b	13364 <__assert_fail@plt+0x24a8>
   13160:	andeq	r3, r1, r8, asr r3
   13164:	ldrdeq	r3, [r1], -r4
   13168:	strdeq	r3, [r1], -r8
   1316c:	andeq	r3, r1, ip, asr #5
   13170:	ldrdeq	r3, [r1], -ip
   13174:	muleq	r1, ip, r1
   13178:	andeq	r3, r1, ip, lsl #3
   1317c:	strdeq	r3, [r1], -ip
   13180:	andeq	r3, r1, r0, lsl r2
   13184:	andeq	r3, r1, r0, lsl r2
   13188:	andeq	r3, r1, r0, lsl r2
   1318c:	mov	r3, #5
   13190:	str	r3, [fp, #4]
   13194:	mov	r3, #1
   13198:	strb	r3, [fp, #-34]	; 0xffffffde
   1319c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131a0:	eor	r3, r3, #1
   131a4:	uxtb	r3, r3
   131a8:	cmp	r3, #0
   131ac:	beq	131e0 <__assert_fail@plt+0x2324>
   131b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   131b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131b8:	cmp	r2, r3
   131bc:	bcs	131d4 <__assert_fail@plt+0x2318>
   131c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131c8:	add	r3, r2, r3
   131cc:	mov	r2, #34	; 0x22
   131d0:	strb	r2, [r3]
   131d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131d8:	add	r3, r3, #1
   131dc:	str	r3, [fp, #-20]	; 0xffffffec
   131e0:	mov	r3, #1
   131e4:	strb	r3, [fp, #-33]	; 0xffffffdf
   131e8:	ldr	r3, [pc, #3872]	; 14110 <__assert_fail@plt+0x3254>
   131ec:	str	r3, [fp, #-28]	; 0xffffffe4
   131f0:	mov	r3, #1
   131f4:	str	r3, [fp, #-32]	; 0xffffffe0
   131f8:	b	13368 <__assert_fail@plt+0x24ac>
   131fc:	mov	r3, #1
   13200:	strb	r3, [fp, #-33]	; 0xffffffdf
   13204:	mov	r3, #0
   13208:	strb	r3, [fp, #-34]	; 0xffffffde
   1320c:	b	13368 <__assert_fail@plt+0x24ac>
   13210:	ldr	r3, [fp, #4]
   13214:	cmp	r3, #10
   13218:	beq	1323c <__assert_fail@plt+0x2380>
   1321c:	ldr	r1, [fp, #4]
   13220:	ldr	r0, [pc, #3820]	; 14114 <__assert_fail@plt+0x3258>
   13224:	bl	12fd0 <__assert_fail@plt+0x2114>
   13228:	str	r0, [fp, #16]
   1322c:	ldr	r1, [fp, #4]
   13230:	ldr	r0, [pc, #3808]	; 14118 <__assert_fail@plt+0x325c>
   13234:	bl	12fd0 <__assert_fail@plt+0x2114>
   13238:	str	r0, [fp, #20]
   1323c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13240:	eor	r3, r3, #1
   13244:	uxtb	r3, r3
   13248:	cmp	r3, #0
   1324c:	beq	132ac <__assert_fail@plt+0x23f0>
   13250:	ldr	r3, [fp, #16]
   13254:	str	r3, [fp, #-28]	; 0xffffffe4
   13258:	b	1329c <__assert_fail@plt+0x23e0>
   1325c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13260:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13264:	cmp	r2, r3
   13268:	bcs	13284 <__assert_fail@plt+0x23c8>
   1326c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13270:	ldr	r3, [fp, #-20]	; 0xffffffec
   13274:	add	r3, r2, r3
   13278:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1327c:	ldrb	r2, [r2]
   13280:	strb	r2, [r3]
   13284:	ldr	r3, [fp, #-20]	; 0xffffffec
   13288:	add	r3, r3, #1
   1328c:	str	r3, [fp, #-20]	; 0xffffffec
   13290:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13294:	add	r3, r3, #1
   13298:	str	r3, [fp, #-28]	; 0xffffffe4
   1329c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132a0:	ldrb	r3, [r3]
   132a4:	cmp	r3, #0
   132a8:	bne	1325c <__assert_fail@plt+0x23a0>
   132ac:	mov	r3, #1
   132b0:	strb	r3, [fp, #-33]	; 0xffffffdf
   132b4:	ldr	r3, [fp, #20]
   132b8:	str	r3, [fp, #-28]	; 0xffffffe4
   132bc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   132c0:	bl	10de4 <strlen@plt>
   132c4:	str	r0, [fp, #-32]	; 0xffffffe0
   132c8:	b	13368 <__assert_fail@plt+0x24ac>
   132cc:	mov	r3, #1
   132d0:	strb	r3, [fp, #-33]	; 0xffffffdf
   132d4:	mov	r3, #1
   132d8:	strb	r3, [fp, #-34]	; 0xffffffde
   132dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132e0:	eor	r3, r3, #1
   132e4:	uxtb	r3, r3
   132e8:	cmp	r3, #0
   132ec:	beq	132f8 <__assert_fail@plt+0x243c>
   132f0:	mov	r3, #1
   132f4:	strb	r3, [fp, #-33]	; 0xffffffdf
   132f8:	mov	r3, #2
   132fc:	str	r3, [fp, #4]
   13300:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13304:	eor	r3, r3, #1
   13308:	uxtb	r3, r3
   1330c:	cmp	r3, #0
   13310:	beq	13344 <__assert_fail@plt+0x2488>
   13314:	ldr	r2, [fp, #-20]	; 0xffffffec
   13318:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1331c:	cmp	r2, r3
   13320:	bcs	13338 <__assert_fail@plt+0x247c>
   13324:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1332c:	add	r3, r2, r3
   13330:	mov	r2, #39	; 0x27
   13334:	strb	r2, [r3]
   13338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1333c:	add	r3, r3, #1
   13340:	str	r3, [fp, #-20]	; 0xffffffec
   13344:	ldr	r3, [pc, #3532]	; 14118 <__assert_fail@plt+0x325c>
   13348:	str	r3, [fp, #-28]	; 0xffffffe4
   1334c:	mov	r3, #1
   13350:	str	r3, [fp, #-32]	; 0xffffffe0
   13354:	b	13368 <__assert_fail@plt+0x24ac>
   13358:	mov	r3, #0
   1335c:	strb	r3, [fp, #-34]	; 0xffffffde
   13360:	b	13368 <__assert_fail@plt+0x24ac>
   13364:	bl	10e98 <abort@plt>
   13368:	mov	r3, #0
   1336c:	str	r3, [fp, #-16]
   13370:	b	14500 <__assert_fail@plt+0x3644>
   13374:	mov	r3, #0
   13378:	strb	r3, [fp, #-40]	; 0xffffffd8
   1337c:	mov	r3, #0
   13380:	strb	r3, [fp, #-41]	; 0xffffffd7
   13384:	mov	r3, #0
   13388:	strb	r3, [fp, #-42]	; 0xffffffd6
   1338c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13390:	cmp	r3, #0
   13394:	beq	13430 <__assert_fail@plt+0x2574>
   13398:	ldr	r3, [fp, #4]
   1339c:	cmp	r3, #2
   133a0:	beq	13430 <__assert_fail@plt+0x2574>
   133a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133a8:	cmp	r3, #0
   133ac:	beq	13430 <__assert_fail@plt+0x2574>
   133b0:	ldr	r2, [fp, #-16]
   133b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133b8:	add	r4, r2, r3
   133bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133c0:	cmn	r3, #1
   133c4:	bne	133e8 <__assert_fail@plt+0x252c>
   133c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133cc:	cmp	r3, #1
   133d0:	bls	133e8 <__assert_fail@plt+0x252c>
   133d4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   133d8:	bl	10de4 <strlen@plt>
   133dc:	str	r0, [fp, #-100]	; 0xffffff9c
   133e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133e4:	b	133ec <__assert_fail@plt+0x2530>
   133e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133ec:	cmp	r4, r3
   133f0:	bhi	13430 <__assert_fail@plt+0x2574>
   133f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133f8:	ldr	r3, [fp, #-16]
   133fc:	add	r3, r2, r3
   13400:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13404:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13408:	mov	r0, r3
   1340c:	bl	10ce8 <memcmp@plt>
   13410:	mov	r3, r0
   13414:	cmp	r3, #0
   13418:	bne	13430 <__assert_fail@plt+0x2574>
   1341c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13420:	cmp	r3, #0
   13424:	bne	146bc <__assert_fail@plt+0x3800>
   13428:	mov	r3, #1
   1342c:	strb	r3, [fp, #-40]	; 0xffffffd8
   13430:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13434:	ldr	r3, [fp, #-16]
   13438:	add	r3, r2, r3
   1343c:	ldrb	r3, [r3]
   13440:	strb	r3, [fp, #-38]	; 0xffffffda
   13444:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13448:	cmp	r3, #126	; 0x7e
   1344c:	ldrls	pc, [pc, r3, lsl #2]
   13450:	b	13c7c <__assert_fail@plt+0x2dc0>
   13454:	andeq	r3, r1, r0, asr r6
   13458:	andeq	r3, r1, ip, ror ip
   1345c:	andeq	r3, r1, ip, ror ip
   13460:	andeq	r3, r1, ip, ror ip
   13464:	andeq	r3, r1, ip, ror ip
   13468:	andeq	r3, r1, ip, ror ip
   1346c:	andeq	r3, r1, ip, ror ip
   13470:	andeq	r3, r1, r0, asr #20
   13474:	andeq	r3, r1, ip, asr #20
   13478:	andeq	r3, r1, ip, ror sl
   1347c:	andeq	r3, r1, r4, ror #20
   13480:	andeq	r3, r1, r8, lsl #21
   13484:	andeq	r3, r1, r8, asr sl
   13488:	andeq	r3, r1, r0, ror sl
   1348c:	andeq	r3, r1, ip, ror ip
   13490:	andeq	r3, r1, ip, ror ip
   13494:	andeq	r3, r1, ip, ror ip
   13498:	andeq	r3, r1, ip, ror ip
   1349c:	andeq	r3, r1, ip, ror ip
   134a0:	andeq	r3, r1, ip, ror ip
   134a4:	andeq	r3, r1, ip, ror ip
   134a8:	andeq	r3, r1, ip, ror ip
   134ac:	andeq	r3, r1, ip, ror ip
   134b0:	andeq	r3, r1, ip, ror ip
   134b4:	andeq	r3, r1, ip, ror ip
   134b8:	andeq	r3, r1, ip, ror ip
   134bc:	andeq	r3, r1, ip, ror ip
   134c0:	andeq	r3, r1, ip, ror ip
   134c4:	andeq	r3, r1, ip, ror ip
   134c8:	andeq	r3, r1, ip, ror ip
   134cc:	andeq	r3, r1, ip, ror ip
   134d0:	andeq	r3, r1, ip, ror ip
   134d4:	andeq	r3, r1, r0, ror #22
   134d8:	andeq	r3, r1, r8, ror #22
   134dc:	andeq	r3, r1, r8, ror #22
   134e0:	andeq	r3, r1, r4, asr fp
   134e4:	andeq	r3, r1, r8, ror #22
   134e8:	andeq	r3, r1, r0, ror ip
   134ec:	andeq	r3, r1, r8, ror #22
   134f0:	andeq	r3, r1, r4, lsl #23
   134f4:	andeq	r3, r1, r8, ror #22
   134f8:	andeq	r3, r1, r8, ror #22
   134fc:	andeq	r3, r1, r8, ror #22
   13500:	andeq	r3, r1, r0, ror ip
   13504:	andeq	r3, r1, r0, ror ip
   13508:	andeq	r3, r1, r0, ror ip
   1350c:	andeq	r3, r1, r0, ror ip
   13510:	andeq	r3, r1, r0, ror ip
   13514:	andeq	r3, r1, r0, ror ip
   13518:	andeq	r3, r1, r0, ror ip
   1351c:	andeq	r3, r1, r0, ror ip
   13520:	andeq	r3, r1, r0, ror ip
   13524:	andeq	r3, r1, r0, ror ip
   13528:	andeq	r3, r1, r0, ror ip
   1352c:	andeq	r3, r1, r0, ror ip
   13530:	andeq	r3, r1, r0, ror ip
   13534:	andeq	r3, r1, r0, ror ip
   13538:	andeq	r3, r1, r0, ror ip
   1353c:	andeq	r3, r1, r0, ror ip
   13540:	andeq	r3, r1, r8, ror #22
   13544:	andeq	r3, r1, r8, ror #22
   13548:	andeq	r3, r1, r8, ror #22
   1354c:	andeq	r3, r1, r8, ror #22
   13550:	andeq	r3, r1, r0, lsr r8
   13554:	andeq	r3, r1, ip, ror ip
   13558:	andeq	r3, r1, r0, ror ip
   1355c:	andeq	r3, r1, r0, ror ip
   13560:	andeq	r3, r1, r0, ror ip
   13564:	andeq	r3, r1, r0, ror ip
   13568:	andeq	r3, r1, r0, ror ip
   1356c:	andeq	r3, r1, r0, ror ip
   13570:	andeq	r3, r1, r0, ror ip
   13574:	andeq	r3, r1, r0, ror ip
   13578:	andeq	r3, r1, r0, ror ip
   1357c:	andeq	r3, r1, r0, ror ip
   13580:	andeq	r3, r1, r0, ror ip
   13584:	andeq	r3, r1, r0, ror ip
   13588:	andeq	r3, r1, r0, ror ip
   1358c:	andeq	r3, r1, r0, ror ip
   13590:	andeq	r3, r1, r0, ror ip
   13594:	andeq	r3, r1, r0, ror ip
   13598:	andeq	r3, r1, r0, ror ip
   1359c:	andeq	r3, r1, r0, ror ip
   135a0:	andeq	r3, r1, r0, ror ip
   135a4:	andeq	r3, r1, r0, ror ip
   135a8:	andeq	r3, r1, r0, ror ip
   135ac:	andeq	r3, r1, r0, ror ip
   135b0:	andeq	r3, r1, r0, ror ip
   135b4:	andeq	r3, r1, r0, ror ip
   135b8:	andeq	r3, r1, r0, ror ip
   135bc:	andeq	r3, r1, r0, ror ip
   135c0:	andeq	r3, r1, r8, ror #22
   135c4:	muleq	r1, r4, sl
   135c8:	andeq	r3, r1, r0, ror ip
   135cc:	andeq	r3, r1, r8, ror #22
   135d0:	andeq	r3, r1, r0, ror ip
   135d4:	andeq	r3, r1, r8, ror #22
   135d8:	andeq	r3, r1, r0, ror ip
   135dc:	andeq	r3, r1, r0, ror ip
   135e0:	andeq	r3, r1, r0, ror ip
   135e4:	andeq	r3, r1, r0, ror ip
   135e8:	andeq	r3, r1, r0, ror ip
   135ec:	andeq	r3, r1, r0, ror ip
   135f0:	andeq	r3, r1, r0, ror ip
   135f4:	andeq	r3, r1, r0, ror ip
   135f8:	andeq	r3, r1, r0, ror ip
   135fc:	andeq	r3, r1, r0, ror ip
   13600:	andeq	r3, r1, r0, ror ip
   13604:	andeq	r3, r1, r0, ror ip
   13608:	andeq	r3, r1, r0, ror ip
   1360c:	andeq	r3, r1, r0, ror ip
   13610:	andeq	r3, r1, r0, ror ip
   13614:	andeq	r3, r1, r0, ror ip
   13618:	andeq	r3, r1, r0, ror ip
   1361c:	andeq	r3, r1, r0, ror ip
   13620:	andeq	r3, r1, r0, ror ip
   13624:	andeq	r3, r1, r0, ror ip
   13628:	andeq	r3, r1, r0, ror ip
   1362c:	andeq	r3, r1, r0, ror ip
   13630:	andeq	r3, r1, r0, ror ip
   13634:	andeq	r3, r1, r0, ror ip
   13638:	andeq	r3, r1, r0, ror ip
   1363c:	andeq	r3, r1, r0, ror ip
   13640:	andeq	r3, r1, ip, lsl #22
   13644:	andeq	r3, r1, r8, ror #22
   13648:	andeq	r3, r1, ip, lsl #22
   1364c:	andeq	r3, r1, r4, asr fp
   13650:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13654:	cmp	r3, #0
   13658:	beq	1381c <__assert_fail@plt+0x2960>
   1365c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13660:	cmp	r3, #0
   13664:	bne	146c4 <__assert_fail@plt+0x3808>
   13668:	mov	r3, #1
   1366c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13670:	ldr	r3, [fp, #4]
   13674:	cmp	r3, #2
   13678:	bne	13728 <__assert_fail@plt+0x286c>
   1367c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13680:	eor	r3, r3, #1
   13684:	uxtb	r3, r3
   13688:	cmp	r3, #0
   1368c:	beq	13728 <__assert_fail@plt+0x286c>
   13690:	ldr	r2, [fp, #-20]	; 0xffffffec
   13694:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13698:	cmp	r2, r3
   1369c:	bcs	136b4 <__assert_fail@plt+0x27f8>
   136a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136a8:	add	r3, r2, r3
   136ac:	mov	r2, #39	; 0x27
   136b0:	strb	r2, [r3]
   136b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136b8:	add	r3, r3, #1
   136bc:	str	r3, [fp, #-20]	; 0xffffffec
   136c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   136c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136c8:	cmp	r2, r3
   136cc:	bcs	136e4 <__assert_fail@plt+0x2828>
   136d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136d8:	add	r3, r2, r3
   136dc:	mov	r2, #36	; 0x24
   136e0:	strb	r2, [r3]
   136e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136e8:	add	r3, r3, #1
   136ec:	str	r3, [fp, #-20]	; 0xffffffec
   136f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   136f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136f8:	cmp	r2, r3
   136fc:	bcs	13714 <__assert_fail@plt+0x2858>
   13700:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13704:	ldr	r3, [fp, #-20]	; 0xffffffec
   13708:	add	r3, r2, r3
   1370c:	mov	r2, #39	; 0x27
   13710:	strb	r2, [r3]
   13714:	ldr	r3, [fp, #-20]	; 0xffffffec
   13718:	add	r3, r3, #1
   1371c:	str	r3, [fp, #-20]	; 0xffffffec
   13720:	mov	r3, #1
   13724:	strb	r3, [fp, #-35]	; 0xffffffdd
   13728:	ldr	r2, [fp, #-20]	; 0xffffffec
   1372c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13730:	cmp	r2, r3
   13734:	bcs	1374c <__assert_fail@plt+0x2890>
   13738:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1373c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13740:	add	r3, r2, r3
   13744:	mov	r2, #92	; 0x5c
   13748:	strb	r2, [r3]
   1374c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13750:	add	r3, r3, #1
   13754:	str	r3, [fp, #-20]	; 0xffffffec
   13758:	ldr	r3, [fp, #4]
   1375c:	cmp	r3, #2
   13760:	beq	13810 <__assert_fail@plt+0x2954>
   13764:	ldr	r3, [fp, #-16]
   13768:	add	r2, r3, #1
   1376c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13770:	cmp	r2, r3
   13774:	bcs	13810 <__assert_fail@plt+0x2954>
   13778:	ldr	r3, [fp, #-16]
   1377c:	add	r3, r3, #1
   13780:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13784:	add	r3, r2, r3
   13788:	ldrb	r3, [r3]
   1378c:	cmp	r3, #47	; 0x2f
   13790:	bls	13810 <__assert_fail@plt+0x2954>
   13794:	ldr	r3, [fp, #-16]
   13798:	add	r3, r3, #1
   1379c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137a0:	add	r3, r2, r3
   137a4:	ldrb	r3, [r3]
   137a8:	cmp	r3, #57	; 0x39
   137ac:	bhi	13810 <__assert_fail@plt+0x2954>
   137b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   137b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137b8:	cmp	r2, r3
   137bc:	bcs	137d4 <__assert_fail@plt+0x2918>
   137c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   137c8:	add	r3, r2, r3
   137cc:	mov	r2, #48	; 0x30
   137d0:	strb	r2, [r3]
   137d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   137d8:	add	r3, r3, #1
   137dc:	str	r3, [fp, #-20]	; 0xffffffec
   137e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   137e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137e8:	cmp	r2, r3
   137ec:	bcs	13804 <__assert_fail@plt+0x2948>
   137f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   137f8:	add	r3, r2, r3
   137fc:	mov	r2, #48	; 0x30
   13800:	strb	r2, [r3]
   13804:	ldr	r3, [fp, #-20]	; 0xffffffec
   13808:	add	r3, r3, #1
   1380c:	str	r3, [fp, #-20]	; 0xffffffec
   13810:	mov	r3, #48	; 0x30
   13814:	strb	r3, [fp, #-38]	; 0xffffffda
   13818:	b	14258 <__assert_fail@plt+0x339c>
   1381c:	ldr	r3, [fp, #8]
   13820:	and	r3, r3, #1
   13824:	cmp	r3, #0
   13828:	beq	14258 <__assert_fail@plt+0x339c>
   1382c:	b	144f4 <__assert_fail@plt+0x3638>
   13830:	ldr	r3, [fp, #4]
   13834:	cmp	r3, #2
   13838:	beq	13848 <__assert_fail@plt+0x298c>
   1383c:	cmp	r3, #5
   13840:	beq	13858 <__assert_fail@plt+0x299c>
   13844:	b	13a3c <__assert_fail@plt+0x2b80>
   13848:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1384c:	cmp	r3, #0
   13850:	beq	13a30 <__assert_fail@plt+0x2b74>
   13854:	b	14700 <__assert_fail@plt+0x3844>
   13858:	ldr	r3, [fp, #8]
   1385c:	and	r3, r3, #4
   13860:	cmp	r3, #0
   13864:	beq	13a38 <__assert_fail@plt+0x2b7c>
   13868:	ldr	r3, [fp, #-16]
   1386c:	add	r2, r3, #2
   13870:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13874:	cmp	r2, r3
   13878:	bcs	13a38 <__assert_fail@plt+0x2b7c>
   1387c:	ldr	r3, [fp, #-16]
   13880:	add	r3, r3, #1
   13884:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13888:	add	r3, r2, r3
   1388c:	ldrb	r3, [r3]
   13890:	cmp	r3, #63	; 0x3f
   13894:	bne	13a38 <__assert_fail@plt+0x2b7c>
   13898:	ldr	r3, [fp, #-16]
   1389c:	add	r3, r3, #2
   138a0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   138a4:	add	r3, r2, r3
   138a8:	ldrb	r3, [r3]
   138ac:	sub	r3, r3, #33	; 0x21
   138b0:	cmp	r3, #29
   138b4:	ldrls	pc, [pc, r3, lsl #2]
   138b8:	b	13a28 <__assert_fail@plt+0x2b6c>
   138bc:	andeq	r3, r1, r4, lsr r9
   138c0:	andeq	r3, r1, r8, lsr #20
   138c4:	andeq	r3, r1, r8, lsr #20
   138c8:	andeq	r3, r1, r8, lsr #20
   138cc:	andeq	r3, r1, r8, lsr #20
   138d0:	andeq	r3, r1, r8, lsr #20
   138d4:	andeq	r3, r1, r4, lsr r9
   138d8:	andeq	r3, r1, r4, lsr r9
   138dc:	andeq	r3, r1, r4, lsr r9
   138e0:	andeq	r3, r1, r8, lsr #20
   138e4:	andeq	r3, r1, r8, lsr #20
   138e8:	andeq	r3, r1, r8, lsr #20
   138ec:	andeq	r3, r1, r4, lsr r9
   138f0:	andeq	r3, r1, r8, lsr #20
   138f4:	andeq	r3, r1, r4, lsr r9
   138f8:	andeq	r3, r1, r8, lsr #20
   138fc:	andeq	r3, r1, r8, lsr #20
   13900:	andeq	r3, r1, r8, lsr #20
   13904:	andeq	r3, r1, r8, lsr #20
   13908:	andeq	r3, r1, r8, lsr #20
   1390c:	andeq	r3, r1, r8, lsr #20
   13910:	andeq	r3, r1, r8, lsr #20
   13914:	andeq	r3, r1, r8, lsr #20
   13918:	andeq	r3, r1, r8, lsr #20
   1391c:	andeq	r3, r1, r8, lsr #20
   13920:	andeq	r3, r1, r8, lsr #20
   13924:	andeq	r3, r1, r8, lsr #20
   13928:	andeq	r3, r1, r4, lsr r9
   1392c:	andeq	r3, r1, r4, lsr r9
   13930:	andeq	r3, r1, r4, lsr r9
   13934:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13938:	cmp	r3, #0
   1393c:	bne	146cc <__assert_fail@plt+0x3810>
   13940:	ldr	r3, [fp, #-16]
   13944:	add	r3, r3, #2
   13948:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1394c:	add	r3, r2, r3
   13950:	ldrb	r3, [r3]
   13954:	strb	r3, [fp, #-38]	; 0xffffffda
   13958:	ldr	r3, [fp, #-16]
   1395c:	add	r3, r3, #2
   13960:	str	r3, [fp, #-16]
   13964:	ldr	r2, [fp, #-20]	; 0xffffffec
   13968:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1396c:	cmp	r2, r3
   13970:	bcs	13988 <__assert_fail@plt+0x2acc>
   13974:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1397c:	add	r3, r2, r3
   13980:	mov	r2, #63	; 0x3f
   13984:	strb	r2, [r3]
   13988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1398c:	add	r3, r3, #1
   13990:	str	r3, [fp, #-20]	; 0xffffffec
   13994:	ldr	r2, [fp, #-20]	; 0xffffffec
   13998:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1399c:	cmp	r2, r3
   139a0:	bcs	139b8 <__assert_fail@plt+0x2afc>
   139a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139ac:	add	r3, r2, r3
   139b0:	mov	r2, #34	; 0x22
   139b4:	strb	r2, [r3]
   139b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139bc:	add	r3, r3, #1
   139c0:	str	r3, [fp, #-20]	; 0xffffffec
   139c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   139c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139cc:	cmp	r2, r3
   139d0:	bcs	139e8 <__assert_fail@plt+0x2b2c>
   139d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139dc:	add	r3, r2, r3
   139e0:	mov	r2, #34	; 0x22
   139e4:	strb	r2, [r3]
   139e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139ec:	add	r3, r3, #1
   139f0:	str	r3, [fp, #-20]	; 0xffffffec
   139f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   139f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139fc:	cmp	r2, r3
   13a00:	bcs	13a18 <__assert_fail@plt+0x2b5c>
   13a04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a0c:	add	r3, r2, r3
   13a10:	mov	r2, #63	; 0x3f
   13a14:	strb	r2, [r3]
   13a18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a1c:	add	r3, r3, #1
   13a20:	str	r3, [fp, #-20]	; 0xffffffec
   13a24:	b	13a2c <__assert_fail@plt+0x2b70>
   13a28:	nop			; (mov r0, r0)
   13a2c:	b	13a38 <__assert_fail@plt+0x2b7c>
   13a30:	nop			; (mov r0, r0)
   13a34:	b	14284 <__assert_fail@plt+0x33c8>
   13a38:	nop			; (mov r0, r0)
   13a3c:	b	14284 <__assert_fail@plt+0x33c8>
   13a40:	mov	r3, #97	; 0x61
   13a44:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a48:	b	13af4 <__assert_fail@plt+0x2c38>
   13a4c:	mov	r3, #98	; 0x62
   13a50:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a54:	b	13af4 <__assert_fail@plt+0x2c38>
   13a58:	mov	r3, #102	; 0x66
   13a5c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a60:	b	13af4 <__assert_fail@plt+0x2c38>
   13a64:	mov	r3, #110	; 0x6e
   13a68:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a6c:	b	13adc <__assert_fail@plt+0x2c20>
   13a70:	mov	r3, #114	; 0x72
   13a74:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a78:	b	13adc <__assert_fail@plt+0x2c20>
   13a7c:	mov	r3, #116	; 0x74
   13a80:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a84:	b	13adc <__assert_fail@plt+0x2c20>
   13a88:	mov	r3, #118	; 0x76
   13a8c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a90:	b	13af4 <__assert_fail@plt+0x2c38>
   13a94:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13a98:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a9c:	ldr	r3, [fp, #4]
   13aa0:	cmp	r3, #2
   13aa4:	bne	13ab8 <__assert_fail@plt+0x2bfc>
   13aa8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13aac:	cmp	r3, #0
   13ab0:	beq	1440c <__assert_fail@plt+0x3550>
   13ab4:	b	14700 <__assert_fail@plt+0x3844>
   13ab8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13abc:	cmp	r3, #0
   13ac0:	beq	13adc <__assert_fail@plt+0x2c20>
   13ac4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ac8:	cmp	r3, #0
   13acc:	beq	13adc <__assert_fail@plt+0x2c20>
   13ad0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ad4:	cmp	r3, #0
   13ad8:	bne	14414 <__assert_fail@plt+0x3558>
   13adc:	ldr	r3, [fp, #4]
   13ae0:	cmp	r3, #2
   13ae4:	bne	13af4 <__assert_fail@plt+0x2c38>
   13ae8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13aec:	cmp	r3, #0
   13af0:	bne	146d4 <__assert_fail@plt+0x3818>
   13af4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13af8:	cmp	r3, #0
   13afc:	beq	14260 <__assert_fail@plt+0x33a4>
   13b00:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13b04:	strb	r3, [fp, #-38]	; 0xffffffda
   13b08:	b	1430c <__assert_fail@plt+0x3450>
   13b0c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b10:	cmn	r3, #1
   13b14:	bne	13b38 <__assert_fail@plt+0x2c7c>
   13b18:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13b1c:	add	r3, r3, #1
   13b20:	ldrb	r3, [r3]
   13b24:	cmp	r3, #0
   13b28:	movne	r3, #1
   13b2c:	moveq	r3, #0
   13b30:	uxtb	r3, r3
   13b34:	b	13b4c <__assert_fail@plt+0x2c90>
   13b38:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b3c:	cmp	r3, #1
   13b40:	movne	r3, #1
   13b44:	moveq	r3, #0
   13b48:	uxtb	r3, r3
   13b4c:	cmp	r3, #0
   13b50:	bne	14268 <__assert_fail@plt+0x33ac>
   13b54:	ldr	r3, [fp, #-16]
   13b58:	cmp	r3, #0
   13b5c:	bne	14270 <__assert_fail@plt+0x33b4>
   13b60:	mov	r3, #1
   13b64:	strb	r3, [fp, #-42]	; 0xffffffd6
   13b68:	ldr	r3, [fp, #4]
   13b6c:	cmp	r3, #2
   13b70:	bne	14278 <__assert_fail@plt+0x33bc>
   13b74:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b78:	cmp	r3, #0
   13b7c:	beq	14278 <__assert_fail@plt+0x33bc>
   13b80:	b	14700 <__assert_fail@plt+0x3844>
   13b84:	mov	r3, #1
   13b88:	strb	r3, [fp, #-36]	; 0xffffffdc
   13b8c:	mov	r3, #1
   13b90:	strb	r3, [fp, #-42]	; 0xffffffd6
   13b94:	ldr	r3, [fp, #4]
   13b98:	cmp	r3, #2
   13b9c:	bne	14280 <__assert_fail@plt+0x33c4>
   13ba0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ba4:	cmp	r3, #0
   13ba8:	bne	146dc <__assert_fail@plt+0x3820>
   13bac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bb0:	cmp	r3, #0
   13bb4:	beq	13bd4 <__assert_fail@plt+0x2d18>
   13bb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bbc:	cmp	r3, #0
   13bc0:	bne	13bd4 <__assert_fail@plt+0x2d18>
   13bc4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bc8:	str	r3, [fp, #-24]	; 0xffffffe8
   13bcc:	mov	r3, #0
   13bd0:	str	r3, [fp, #-92]	; 0xffffffa4
   13bd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bdc:	cmp	r2, r3
   13be0:	bcs	13bf8 <__assert_fail@plt+0x2d3c>
   13be4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13be8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bec:	add	r3, r2, r3
   13bf0:	mov	r2, #39	; 0x27
   13bf4:	strb	r2, [r3]
   13bf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bfc:	add	r3, r3, #1
   13c00:	str	r3, [fp, #-20]	; 0xffffffec
   13c04:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c0c:	cmp	r2, r3
   13c10:	bcs	13c28 <__assert_fail@plt+0x2d6c>
   13c14:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c1c:	add	r3, r2, r3
   13c20:	mov	r2, #92	; 0x5c
   13c24:	strb	r2, [r3]
   13c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c2c:	add	r3, r3, #1
   13c30:	str	r3, [fp, #-20]	; 0xffffffec
   13c34:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c3c:	cmp	r2, r3
   13c40:	bcs	13c58 <__assert_fail@plt+0x2d9c>
   13c44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c4c:	add	r3, r2, r3
   13c50:	mov	r2, #39	; 0x27
   13c54:	strb	r2, [r3]
   13c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c5c:	add	r3, r3, #1
   13c60:	str	r3, [fp, #-20]	; 0xffffffec
   13c64:	mov	r3, #0
   13c68:	strb	r3, [fp, #-35]	; 0xffffffdd
   13c6c:	b	14280 <__assert_fail@plt+0x33c4>
   13c70:	mov	r3, #1
   13c74:	strb	r3, [fp, #-42]	; 0xffffffd6
   13c78:	b	14284 <__assert_fail@plt+0x33c8>
   13c7c:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13c80:	cmp	r3, #0
   13c84:	beq	13cc4 <__assert_fail@plt+0x2e08>
   13c88:	mov	r3, #1
   13c8c:	str	r3, [fp, #-48]	; 0xffffffd0
   13c90:	bl	10dc0 <__ctype_b_loc@plt>
   13c94:	mov	r3, r0
   13c98:	ldr	r2, [r3]
   13c9c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ca0:	lsl	r3, r3, #1
   13ca4:	add	r3, r2, r3
   13ca8:	ldrh	r3, [r3]
   13cac:	and	r3, r3, #16384	; 0x4000
   13cb0:	cmp	r3, #0
   13cb4:	movne	r3, #1
   13cb8:	moveq	r3, #0
   13cbc:	strb	r3, [fp, #-49]	; 0xffffffcf
   13cc0:	b	13f10 <__assert_fail@plt+0x3054>
   13cc4:	sub	r3, fp, #76	; 0x4c
   13cc8:	mov	r2, #8
   13ccc:	mov	r1, #0
   13cd0:	mov	r0, r3
   13cd4:	bl	10e14 <memset@plt>
   13cd8:	mov	r3, #0
   13cdc:	str	r3, [fp, #-48]	; 0xffffffd0
   13ce0:	mov	r3, #1
   13ce4:	strb	r3, [fp, #-49]	; 0xffffffcf
   13ce8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13cec:	cmn	r3, #1
   13cf0:	bne	13d00 <__assert_fail@plt+0x2e44>
   13cf4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13cf8:	bl	10de4 <strlen@plt>
   13cfc:	str	r0, [fp, #-100]	; 0xffffff9c
   13d00:	ldr	r2, [fp, #-16]
   13d04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d08:	add	r3, r2, r3
   13d0c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13d10:	add	r1, r2, r3
   13d14:	ldr	r2, [fp, #-16]
   13d18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d1c:	add	r3, r2, r3
   13d20:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13d24:	sub	r2, r2, r3
   13d28:	sub	r3, fp, #76	; 0x4c
   13d2c:	sub	r0, fp, #80	; 0x50
   13d30:	bl	16b9c <__assert_fail@plt+0x5ce0>
   13d34:	str	r0, [fp, #-64]	; 0xffffffc0
   13d38:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d3c:	cmp	r3, #0
   13d40:	beq	13f04 <__assert_fail@plt+0x3048>
   13d44:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d48:	cmn	r3, #1
   13d4c:	bne	13d5c <__assert_fail@plt+0x2ea0>
   13d50:	mov	r3, #0
   13d54:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d58:	b	13f10 <__assert_fail@plt+0x3054>
   13d5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d60:	cmn	r3, #2
   13d64:	bne	13dbc <__assert_fail@plt+0x2f00>
   13d68:	mov	r3, #0
   13d6c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d70:	b	13d80 <__assert_fail@plt+0x2ec4>
   13d74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d78:	add	r3, r3, #1
   13d7c:	str	r3, [fp, #-48]	; 0xffffffd0
   13d80:	ldr	r2, [fp, #-16]
   13d84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d88:	add	r2, r2, r3
   13d8c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d90:	cmp	r2, r3
   13d94:	bcs	13f0c <__assert_fail@plt+0x3050>
   13d98:	ldr	r2, [fp, #-16]
   13d9c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13da0:	add	r3, r2, r3
   13da4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13da8:	add	r3, r2, r3
   13dac:	ldrb	r3, [r3]
   13db0:	cmp	r3, #0
   13db4:	bne	13d74 <__assert_fail@plt+0x2eb8>
   13db8:	b	13f0c <__assert_fail@plt+0x3050>
   13dbc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13dc0:	cmp	r3, #0
   13dc4:	beq	13eb8 <__assert_fail@plt+0x2ffc>
   13dc8:	ldr	r3, [fp, #4]
   13dcc:	cmp	r3, #2
   13dd0:	bne	13eb8 <__assert_fail@plt+0x2ffc>
   13dd4:	mov	r3, #1
   13dd8:	str	r3, [fp, #-56]	; 0xffffffc8
   13ddc:	b	13ea8 <__assert_fail@plt+0x2fec>
   13de0:	ldr	r2, [fp, #-16]
   13de4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13de8:	add	r2, r2, r3
   13dec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13df0:	add	r3, r2, r3
   13df4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13df8:	add	r3, r2, r3
   13dfc:	ldrb	r3, [r3]
   13e00:	sub	r3, r3, #91	; 0x5b
   13e04:	cmp	r3, #33	; 0x21
   13e08:	ldrls	pc, [pc, r3, lsl #2]
   13e0c:	b	13e98 <__assert_fail@plt+0x2fdc>
   13e10:	andeq	r4, r1, r4, ror #13
   13e14:	andeq	r4, r1, r4, ror #13
   13e18:	muleq	r1, r8, lr
   13e1c:	andeq	r4, r1, r4, ror #13
   13e20:	muleq	r1, r8, lr
   13e24:	andeq	r4, r1, r4, ror #13
   13e28:	muleq	r1, r8, lr
   13e2c:	muleq	r1, r8, lr
   13e30:	muleq	r1, r8, lr
   13e34:	muleq	r1, r8, lr
   13e38:	muleq	r1, r8, lr
   13e3c:	muleq	r1, r8, lr
   13e40:	muleq	r1, r8, lr
   13e44:	muleq	r1, r8, lr
   13e48:	muleq	r1, r8, lr
   13e4c:	muleq	r1, r8, lr
   13e50:	muleq	r1, r8, lr
   13e54:	muleq	r1, r8, lr
   13e58:	muleq	r1, r8, lr
   13e5c:	muleq	r1, r8, lr
   13e60:	muleq	r1, r8, lr
   13e64:	muleq	r1, r8, lr
   13e68:	muleq	r1, r8, lr
   13e6c:	muleq	r1, r8, lr
   13e70:	muleq	r1, r8, lr
   13e74:	muleq	r1, r8, lr
   13e78:	muleq	r1, r8, lr
   13e7c:	muleq	r1, r8, lr
   13e80:	muleq	r1, r8, lr
   13e84:	muleq	r1, r8, lr
   13e88:	muleq	r1, r8, lr
   13e8c:	muleq	r1, r8, lr
   13e90:	muleq	r1, r8, lr
   13e94:	andeq	r4, r1, r4, ror #13
   13e98:	nop			; (mov r0, r0)
   13e9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ea0:	add	r3, r3, #1
   13ea4:	str	r3, [fp, #-56]	; 0xffffffc8
   13ea8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13eac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13eb0:	cmp	r2, r3
   13eb4:	bcc	13de0 <__assert_fail@plt+0x2f24>
   13eb8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13ebc:	mov	r0, r3
   13ec0:	bl	10d24 <iswprint@plt>
   13ec4:	mov	r3, r0
   13ec8:	cmp	r3, #0
   13ecc:	bne	13ed8 <__assert_fail@plt+0x301c>
   13ed0:	mov	r3, #0
   13ed4:	strb	r3, [fp, #-49]	; 0xffffffcf
   13ed8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13edc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13ee0:	add	r3, r2, r3
   13ee4:	str	r3, [fp, #-48]	; 0xffffffd0
   13ee8:	sub	r3, fp, #76	; 0x4c
   13eec:	mov	r0, r3
   13ef0:	bl	10cdc <mbsinit@plt>
   13ef4:	mov	r3, r0
   13ef8:	cmp	r3, #0
   13efc:	beq	13d00 <__assert_fail@plt+0x2e44>
   13f00:	b	13f10 <__assert_fail@plt+0x3054>
   13f04:	nop			; (mov r0, r0)
   13f08:	b	13f10 <__assert_fail@plt+0x3054>
   13f0c:	nop			; (mov r0, r0)
   13f10:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f14:	strb	r3, [fp, #-42]	; 0xffffffd6
   13f18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f1c:	cmp	r3, #1
   13f20:	bhi	13f44 <__assert_fail@plt+0x3088>
   13f24:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13f28:	cmp	r3, #0
   13f2c:	beq	14284 <__assert_fail@plt+0x33c8>
   13f30:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f34:	eor	r3, r3, #1
   13f38:	uxtb	r3, r3
   13f3c:	cmp	r3, #0
   13f40:	beq	14284 <__assert_fail@plt+0x33c8>
   13f44:	ldr	r2, [fp, #-16]
   13f48:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f4c:	add	r3, r2, r3
   13f50:	str	r3, [fp, #-68]	; 0xffffffbc
   13f54:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13f58:	cmp	r3, #0
   13f5c:	beq	1411c <__assert_fail@plt+0x3260>
   13f60:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f64:	eor	r3, r3, #1
   13f68:	uxtb	r3, r3
   13f6c:	cmp	r3, #0
   13f70:	beq	1411c <__assert_fail@plt+0x3260>
   13f74:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f78:	cmp	r3, #0
   13f7c:	bne	146ec <__assert_fail@plt+0x3830>
   13f80:	mov	r3, #1
   13f84:	strb	r3, [fp, #-41]	; 0xffffffd7
   13f88:	ldr	r3, [fp, #4]
   13f8c:	cmp	r3, #2
   13f90:	bne	14040 <__assert_fail@plt+0x3184>
   13f94:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13f98:	eor	r3, r3, #1
   13f9c:	uxtb	r3, r3
   13fa0:	cmp	r3, #0
   13fa4:	beq	14040 <__assert_fail@plt+0x3184>
   13fa8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fb0:	cmp	r2, r3
   13fb4:	bcs	13fcc <__assert_fail@plt+0x3110>
   13fb8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc0:	add	r3, r2, r3
   13fc4:	mov	r2, #39	; 0x27
   13fc8:	strb	r2, [r3]
   13fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fd0:	add	r3, r3, #1
   13fd4:	str	r3, [fp, #-20]	; 0xffffffec
   13fd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fdc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fe0:	cmp	r2, r3
   13fe4:	bcs	13ffc <__assert_fail@plt+0x3140>
   13fe8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ff0:	add	r3, r2, r3
   13ff4:	mov	r2, #36	; 0x24
   13ff8:	strb	r2, [r3]
   13ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14000:	add	r3, r3, #1
   14004:	str	r3, [fp, #-20]	; 0xffffffec
   14008:	ldr	r2, [fp, #-20]	; 0xffffffec
   1400c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14010:	cmp	r2, r3
   14014:	bcs	1402c <__assert_fail@plt+0x3170>
   14018:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1401c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14020:	add	r3, r2, r3
   14024:	mov	r2, #39	; 0x27
   14028:	strb	r2, [r3]
   1402c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14030:	add	r3, r3, #1
   14034:	str	r3, [fp, #-20]	; 0xffffffec
   14038:	mov	r3, #1
   1403c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14040:	ldr	r2, [fp, #-20]	; 0xffffffec
   14044:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14048:	cmp	r2, r3
   1404c:	bcs	14064 <__assert_fail@plt+0x31a8>
   14050:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14054:	ldr	r3, [fp, #-20]	; 0xffffffec
   14058:	add	r3, r2, r3
   1405c:	mov	r2, #92	; 0x5c
   14060:	strb	r2, [r3]
   14064:	ldr	r3, [fp, #-20]	; 0xffffffec
   14068:	add	r3, r3, #1
   1406c:	str	r3, [fp, #-20]	; 0xffffffec
   14070:	ldr	r2, [fp, #-20]	; 0xffffffec
   14074:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14078:	cmp	r2, r3
   1407c:	bcs	140a4 <__assert_fail@plt+0x31e8>
   14080:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14084:	ldr	r3, [fp, #-20]	; 0xffffffec
   14088:	add	r3, r2, r3
   1408c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14090:	lsr	r2, r2, #6
   14094:	uxtb	r2, r2
   14098:	add	r2, r2, #48	; 0x30
   1409c:	uxtb	r2, r2
   140a0:	strb	r2, [r3]
   140a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140a8:	add	r3, r3, #1
   140ac:	str	r3, [fp, #-20]	; 0xffffffec
   140b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   140b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140b8:	cmp	r2, r3
   140bc:	bcs	140ec <__assert_fail@plt+0x3230>
   140c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140c8:	add	r3, r2, r3
   140cc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   140d0:	lsr	r2, r2, #3
   140d4:	uxtb	r2, r2
   140d8:	and	r2, r2, #7
   140dc:	uxtb	r2, r2
   140e0:	add	r2, r2, #48	; 0x30
   140e4:	uxtb	r2, r2
   140e8:	strb	r2, [r3]
   140ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   140f0:	add	r3, r3, #1
   140f4:	str	r3, [fp, #-20]	; 0xffffffec
   140f8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   140fc:	and	r3, r3, #7
   14100:	uxtb	r3, r3
   14104:	add	r3, r3, #48	; 0x30
   14108:	strb	r3, [fp, #-38]	; 0xffffffda
   1410c:	b	14160 <__assert_fail@plt+0x32a4>
   14110:	andeq	r8, r1, r0, ror r3
   14114:	andeq	r8, r1, r8, ror r3
   14118:	andeq	r8, r1, r4, ror r3
   1411c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14120:	cmp	r3, #0
   14124:	beq	14160 <__assert_fail@plt+0x32a4>
   14128:	ldr	r2, [fp, #-20]	; 0xffffffec
   1412c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14130:	cmp	r2, r3
   14134:	bcs	1414c <__assert_fail@plt+0x3290>
   14138:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1413c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14140:	add	r3, r2, r3
   14144:	mov	r2, #92	; 0x5c
   14148:	strb	r2, [r3]
   1414c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14150:	add	r3, r3, #1
   14154:	str	r3, [fp, #-20]	; 0xffffffec
   14158:	mov	r3, #0
   1415c:	strb	r3, [fp, #-40]	; 0xffffffd8
   14160:	ldr	r3, [fp, #-16]
   14164:	add	r2, r3, #1
   14168:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1416c:	cmp	r2, r3
   14170:	bcs	14250 <__assert_fail@plt+0x3394>
   14174:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14178:	cmp	r3, #0
   1417c:	beq	141fc <__assert_fail@plt+0x3340>
   14180:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14184:	eor	r3, r3, #1
   14188:	uxtb	r3, r3
   1418c:	cmp	r3, #0
   14190:	beq	141fc <__assert_fail@plt+0x3340>
   14194:	ldr	r2, [fp, #-20]	; 0xffffffec
   14198:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1419c:	cmp	r2, r3
   141a0:	bcs	141b8 <__assert_fail@plt+0x32fc>
   141a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141ac:	add	r3, r2, r3
   141b0:	mov	r2, #39	; 0x27
   141b4:	strb	r2, [r3]
   141b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141bc:	add	r3, r3, #1
   141c0:	str	r3, [fp, #-20]	; 0xffffffec
   141c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   141c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141cc:	cmp	r2, r3
   141d0:	bcs	141e8 <__assert_fail@plt+0x332c>
   141d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141dc:	add	r3, r2, r3
   141e0:	mov	r2, #39	; 0x27
   141e4:	strb	r2, [r3]
   141e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141ec:	add	r3, r3, #1
   141f0:	str	r3, [fp, #-20]	; 0xffffffec
   141f4:	mov	r3, #0
   141f8:	strb	r3, [fp, #-35]	; 0xffffffdd
   141fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14200:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14204:	cmp	r2, r3
   14208:	bcs	14220 <__assert_fail@plt+0x3364>
   1420c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14210:	ldr	r3, [fp, #-20]	; 0xffffffec
   14214:	add	r3, r2, r3
   14218:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1421c:	strb	r2, [r3]
   14220:	ldr	r3, [fp, #-20]	; 0xffffffec
   14224:	add	r3, r3, #1
   14228:	str	r3, [fp, #-20]	; 0xffffffec
   1422c:	ldr	r3, [fp, #-16]
   14230:	add	r3, r3, #1
   14234:	str	r3, [fp, #-16]
   14238:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1423c:	ldr	r3, [fp, #-16]
   14240:	add	r3, r2, r3
   14244:	ldrb	r3, [r3]
   14248:	strb	r3, [fp, #-38]	; 0xffffffda
   1424c:	b	13f54 <__assert_fail@plt+0x3098>
   14250:	nop			; (mov r0, r0)
   14254:	b	14420 <__assert_fail@plt+0x3564>
   14258:	nop			; (mov r0, r0)
   1425c:	b	14284 <__assert_fail@plt+0x33c8>
   14260:	nop			; (mov r0, r0)
   14264:	b	14284 <__assert_fail@plt+0x33c8>
   14268:	nop			; (mov r0, r0)
   1426c:	b	14284 <__assert_fail@plt+0x33c8>
   14270:	nop			; (mov r0, r0)
   14274:	b	14284 <__assert_fail@plt+0x33c8>
   14278:	nop			; (mov r0, r0)
   1427c:	b	14284 <__assert_fail@plt+0x33c8>
   14280:	nop			; (mov r0, r0)
   14284:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14288:	eor	r3, r3, #1
   1428c:	uxtb	r3, r3
   14290:	cmp	r3, #0
   14294:	bne	142a4 <__assert_fail@plt+0x33e8>
   14298:	ldr	r3, [fp, #4]
   1429c:	cmp	r3, #2
   142a0:	bne	142b8 <__assert_fail@plt+0x33fc>
   142a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142a8:	eor	r3, r3, #1
   142ac:	uxtb	r3, r3
   142b0:	cmp	r3, #0
   142b4:	bne	142f8 <__assert_fail@plt+0x343c>
   142b8:	ldr	r3, [fp, #12]
   142bc:	cmp	r3, #0
   142c0:	beq	142f8 <__assert_fail@plt+0x343c>
   142c4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   142c8:	lsr	r3, r3, #5
   142cc:	uxtb	r3, r3
   142d0:	lsl	r3, r3, #2
   142d4:	ldr	r2, [fp, #12]
   142d8:	add	r3, r2, r3
   142dc:	ldr	r2, [r3]
   142e0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   142e4:	and	r3, r3, #31
   142e8:	lsr	r3, r2, r3
   142ec:	and	r3, r3, #1
   142f0:	cmp	r3, #0
   142f4:	bne	1430c <__assert_fail@plt+0x3450>
   142f8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   142fc:	eor	r3, r3, #1
   14300:	uxtb	r3, r3
   14304:	cmp	r3, #0
   14308:	bne	1441c <__assert_fail@plt+0x3560>
   1430c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14310:	cmp	r3, #0
   14314:	bne	146f4 <__assert_fail@plt+0x3838>
   14318:	mov	r3, #1
   1431c:	strb	r3, [fp, #-41]	; 0xffffffd7
   14320:	ldr	r3, [fp, #4]
   14324:	cmp	r3, #2
   14328:	bne	143d8 <__assert_fail@plt+0x351c>
   1432c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14330:	eor	r3, r3, #1
   14334:	uxtb	r3, r3
   14338:	cmp	r3, #0
   1433c:	beq	143d8 <__assert_fail@plt+0x351c>
   14340:	ldr	r2, [fp, #-20]	; 0xffffffec
   14344:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14348:	cmp	r2, r3
   1434c:	bcs	14364 <__assert_fail@plt+0x34a8>
   14350:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14354:	ldr	r3, [fp, #-20]	; 0xffffffec
   14358:	add	r3, r2, r3
   1435c:	mov	r2, #39	; 0x27
   14360:	strb	r2, [r3]
   14364:	ldr	r3, [fp, #-20]	; 0xffffffec
   14368:	add	r3, r3, #1
   1436c:	str	r3, [fp, #-20]	; 0xffffffec
   14370:	ldr	r2, [fp, #-20]	; 0xffffffec
   14374:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14378:	cmp	r2, r3
   1437c:	bcs	14394 <__assert_fail@plt+0x34d8>
   14380:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14384:	ldr	r3, [fp, #-20]	; 0xffffffec
   14388:	add	r3, r2, r3
   1438c:	mov	r2, #36	; 0x24
   14390:	strb	r2, [r3]
   14394:	ldr	r3, [fp, #-20]	; 0xffffffec
   14398:	add	r3, r3, #1
   1439c:	str	r3, [fp, #-20]	; 0xffffffec
   143a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   143a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143a8:	cmp	r2, r3
   143ac:	bcs	143c4 <__assert_fail@plt+0x3508>
   143b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143b8:	add	r3, r2, r3
   143bc:	mov	r2, #39	; 0x27
   143c0:	strb	r2, [r3]
   143c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143c8:	add	r3, r3, #1
   143cc:	str	r3, [fp, #-20]	; 0xffffffec
   143d0:	mov	r3, #1
   143d4:	strb	r3, [fp, #-35]	; 0xffffffdd
   143d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   143dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143e0:	cmp	r2, r3
   143e4:	bcs	143fc <__assert_fail@plt+0x3540>
   143e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   143f0:	add	r3, r2, r3
   143f4:	mov	r2, #92	; 0x5c
   143f8:	strb	r2, [r3]
   143fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14400:	add	r3, r3, #1
   14404:	str	r3, [fp, #-20]	; 0xffffffec
   14408:	b	14420 <__assert_fail@plt+0x3564>
   1440c:	nop			; (mov r0, r0)
   14410:	b	14420 <__assert_fail@plt+0x3564>
   14414:	nop			; (mov r0, r0)
   14418:	b	14420 <__assert_fail@plt+0x3564>
   1441c:	nop			; (mov r0, r0)
   14420:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14424:	cmp	r3, #0
   14428:	beq	144a8 <__assert_fail@plt+0x35ec>
   1442c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14430:	eor	r3, r3, #1
   14434:	uxtb	r3, r3
   14438:	cmp	r3, #0
   1443c:	beq	144a8 <__assert_fail@plt+0x35ec>
   14440:	ldr	r2, [fp, #-20]	; 0xffffffec
   14444:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14448:	cmp	r2, r3
   1444c:	bcs	14464 <__assert_fail@plt+0x35a8>
   14450:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14454:	ldr	r3, [fp, #-20]	; 0xffffffec
   14458:	add	r3, r2, r3
   1445c:	mov	r2, #39	; 0x27
   14460:	strb	r2, [r3]
   14464:	ldr	r3, [fp, #-20]	; 0xffffffec
   14468:	add	r3, r3, #1
   1446c:	str	r3, [fp, #-20]	; 0xffffffec
   14470:	ldr	r2, [fp, #-20]	; 0xffffffec
   14474:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14478:	cmp	r2, r3
   1447c:	bcs	14494 <__assert_fail@plt+0x35d8>
   14480:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14484:	ldr	r3, [fp, #-20]	; 0xffffffec
   14488:	add	r3, r2, r3
   1448c:	mov	r2, #39	; 0x27
   14490:	strb	r2, [r3]
   14494:	ldr	r3, [fp, #-20]	; 0xffffffec
   14498:	add	r3, r3, #1
   1449c:	str	r3, [fp, #-20]	; 0xffffffec
   144a0:	mov	r3, #0
   144a4:	strb	r3, [fp, #-35]	; 0xffffffdd
   144a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   144ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144b0:	cmp	r2, r3
   144b4:	bcs	144cc <__assert_fail@plt+0x3610>
   144b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c0:	add	r3, r2, r3
   144c4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   144c8:	strb	r2, [r3]
   144cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d0:	add	r3, r3, #1
   144d4:	str	r3, [fp, #-20]	; 0xffffffec
   144d8:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   144dc:	eor	r3, r3, #1
   144e0:	uxtb	r3, r3
   144e4:	cmp	r3, #0
   144e8:	beq	144f4 <__assert_fail@plt+0x3638>
   144ec:	mov	r3, #0
   144f0:	strb	r3, [fp, #-37]	; 0xffffffdb
   144f4:	ldr	r3, [fp, #-16]
   144f8:	add	r3, r3, #1
   144fc:	str	r3, [fp, #-16]
   14500:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14504:	cmn	r3, #1
   14508:	bne	14530 <__assert_fail@plt+0x3674>
   1450c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14510:	ldr	r3, [fp, #-16]
   14514:	add	r3, r2, r3
   14518:	ldrb	r3, [r3]
   1451c:	cmp	r3, #0
   14520:	movne	r3, #1
   14524:	moveq	r3, #0
   14528:	uxtb	r3, r3
   1452c:	b	14548 <__assert_fail@plt+0x368c>
   14530:	ldr	r2, [fp, #-16]
   14534:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14538:	cmp	r2, r3
   1453c:	movne	r3, #1
   14540:	moveq	r3, #0
   14544:	uxtb	r3, r3
   14548:	cmp	r3, #0
   1454c:	bne	13374 <__assert_fail@plt+0x24b8>
   14550:	ldr	r3, [fp, #-20]	; 0xffffffec
   14554:	cmp	r3, #0
   14558:	bne	14574 <__assert_fail@plt+0x36b8>
   1455c:	ldr	r3, [fp, #4]
   14560:	cmp	r3, #2
   14564:	bne	14574 <__assert_fail@plt+0x36b8>
   14568:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1456c:	cmp	r3, #0
   14570:	bne	146fc <__assert_fail@plt+0x3840>
   14574:	ldr	r3, [fp, #4]
   14578:	cmp	r3, #2
   1457c:	bne	1461c <__assert_fail@plt+0x3760>
   14580:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14584:	eor	r3, r3, #1
   14588:	uxtb	r3, r3
   1458c:	cmp	r3, #0
   14590:	beq	1461c <__assert_fail@plt+0x3760>
   14594:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14598:	cmp	r3, #0
   1459c:	beq	1461c <__assert_fail@plt+0x3760>
   145a0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   145a4:	cmp	r3, #0
   145a8:	beq	145f0 <__assert_fail@plt+0x3734>
   145ac:	ldr	r3, [fp, #20]
   145b0:	str	r3, [sp, #16]
   145b4:	ldr	r3, [fp, #16]
   145b8:	str	r3, [sp, #12]
   145bc:	ldr	r3, [fp, #12]
   145c0:	str	r3, [sp, #8]
   145c4:	ldr	r3, [fp, #8]
   145c8:	str	r3, [sp, #4]
   145cc:	mov	r3, #5
   145d0:	str	r3, [sp]
   145d4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   145d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   145dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   145e0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145e4:	bl	130c4 <__assert_fail@plt+0x2208>
   145e8:	mov	r3, r0
   145ec:	b	14764 <__assert_fail@plt+0x38a8>
   145f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145f4:	cmp	r3, #0
   145f8:	bne	1461c <__assert_fail@plt+0x3760>
   145fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14600:	cmp	r3, #0
   14604:	beq	1461c <__assert_fail@plt+0x3760>
   14608:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1460c:	str	r3, [fp, #-92]	; 0xffffffa4
   14610:	mov	r3, #0
   14614:	str	r3, [fp, #-20]	; 0xffffffec
   14618:	b	13150 <__assert_fail@plt+0x2294>
   1461c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14620:	cmp	r3, #0
   14624:	beq	14690 <__assert_fail@plt+0x37d4>
   14628:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1462c:	eor	r3, r3, #1
   14630:	uxtb	r3, r3
   14634:	cmp	r3, #0
   14638:	beq	14690 <__assert_fail@plt+0x37d4>
   1463c:	b	14680 <__assert_fail@plt+0x37c4>
   14640:	ldr	r2, [fp, #-20]	; 0xffffffec
   14644:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14648:	cmp	r2, r3
   1464c:	bcs	14668 <__assert_fail@plt+0x37ac>
   14650:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14654:	ldr	r3, [fp, #-20]	; 0xffffffec
   14658:	add	r3, r2, r3
   1465c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14660:	ldrb	r2, [r2]
   14664:	strb	r2, [r3]
   14668:	ldr	r3, [fp, #-20]	; 0xffffffec
   1466c:	add	r3, r3, #1
   14670:	str	r3, [fp, #-20]	; 0xffffffec
   14674:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14678:	add	r3, r3, #1
   1467c:	str	r3, [fp, #-28]	; 0xffffffe4
   14680:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14684:	ldrb	r3, [r3]
   14688:	cmp	r3, #0
   1468c:	bne	14640 <__assert_fail@plt+0x3784>
   14690:	ldr	r2, [fp, #-20]	; 0xffffffec
   14694:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14698:	cmp	r2, r3
   1469c:	bcs	146b4 <__assert_fail@plt+0x37f8>
   146a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146a8:	add	r3, r2, r3
   146ac:	mov	r2, #0
   146b0:	strb	r2, [r3]
   146b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b8:	b	14764 <__assert_fail@plt+0x38a8>
   146bc:	nop			; (mov r0, r0)
   146c0:	b	14700 <__assert_fail@plt+0x3844>
   146c4:	nop			; (mov r0, r0)
   146c8:	b	14700 <__assert_fail@plt+0x3844>
   146cc:	nop			; (mov r0, r0)
   146d0:	b	14700 <__assert_fail@plt+0x3844>
   146d4:	nop			; (mov r0, r0)
   146d8:	b	14700 <__assert_fail@plt+0x3844>
   146dc:	nop			; (mov r0, r0)
   146e0:	b	14700 <__assert_fail@plt+0x3844>
   146e4:	nop			; (mov r0, r0)
   146e8:	b	14700 <__assert_fail@plt+0x3844>
   146ec:	nop			; (mov r0, r0)
   146f0:	b	14700 <__assert_fail@plt+0x3844>
   146f4:	nop			; (mov r0, r0)
   146f8:	b	14700 <__assert_fail@plt+0x3844>
   146fc:	nop			; (mov r0, r0)
   14700:	ldr	r3, [fp, #4]
   14704:	cmp	r3, #2
   14708:	bne	14720 <__assert_fail@plt+0x3864>
   1470c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14710:	cmp	r3, #0
   14714:	beq	14720 <__assert_fail@plt+0x3864>
   14718:	mov	r3, #4
   1471c:	str	r3, [fp, #4]
   14720:	ldr	r3, [fp, #8]
   14724:	bic	r3, r3, #2
   14728:	ldr	r2, [fp, #20]
   1472c:	str	r2, [sp, #16]
   14730:	ldr	r2, [fp, #16]
   14734:	str	r2, [sp, #12]
   14738:	mov	r2, #0
   1473c:	str	r2, [sp, #8]
   14740:	str	r3, [sp, #4]
   14744:	ldr	r3, [fp, #4]
   14748:	str	r3, [sp]
   1474c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14750:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14754:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14758:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1475c:	bl	130c4 <__assert_fail@plt+0x2208>
   14760:	mov	r3, r0
   14764:	mov	r0, r3
   14768:	sub	sp, fp, #8
   1476c:	pop	{r4, fp, pc}
   14770:	push	{fp, lr}
   14774:	add	fp, sp, #4
   14778:	sub	sp, sp, #56	; 0x38
   1477c:	str	r0, [fp, #-24]	; 0xffffffe8
   14780:	str	r1, [fp, #-28]	; 0xffffffe4
   14784:	str	r2, [fp, #-32]	; 0xffffffe0
   14788:	str	r3, [fp, #-36]	; 0xffffffdc
   1478c:	ldr	r3, [fp, #4]
   14790:	cmp	r3, #0
   14794:	beq	147a0 <__assert_fail@plt+0x38e4>
   14798:	ldr	r3, [fp, #4]
   1479c:	b	147a4 <__assert_fail@plt+0x38e8>
   147a0:	ldr	r3, [pc, #132]	; 1482c <__assert_fail@plt+0x3970>
   147a4:	str	r3, [fp, #-8]
   147a8:	bl	10dfc <__errno_location@plt>
   147ac:	mov	r3, r0
   147b0:	ldr	r3, [r3]
   147b4:	str	r3, [fp, #-12]
   147b8:	ldr	r3, [fp, #-8]
   147bc:	ldr	r3, [r3]
   147c0:	ldr	r2, [fp, #-8]
   147c4:	ldr	r2, [r2, #4]
   147c8:	ldr	r1, [fp, #-8]
   147cc:	add	r1, r1, #8
   147d0:	ldr	r0, [fp, #-8]
   147d4:	ldr	r0, [r0, #40]	; 0x28
   147d8:	ldr	ip, [fp, #-8]
   147dc:	ldr	ip, [ip, #44]	; 0x2c
   147e0:	str	ip, [sp, #16]
   147e4:	str	r0, [sp, #12]
   147e8:	str	r1, [sp, #8]
   147ec:	str	r2, [sp, #4]
   147f0:	str	r3, [sp]
   147f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14800:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14804:	bl	130c4 <__assert_fail@plt+0x2208>
   14808:	str	r0, [fp, #-16]
   1480c:	bl	10dfc <__errno_location@plt>
   14810:	mov	r2, r0
   14814:	ldr	r3, [fp, #-12]
   14818:	str	r3, [r2]
   1481c:	ldr	r3, [fp, #-16]
   14820:	mov	r0, r3
   14824:	sub	sp, fp, #4
   14828:	pop	{fp, pc}
   1482c:	andeq	r9, r2, ip, lsr #3
   14830:	push	{fp, lr}
   14834:	add	fp, sp, #4
   14838:	sub	sp, sp, #16
   1483c:	str	r0, [fp, #-8]
   14840:	str	r1, [fp, #-12]
   14844:	str	r2, [fp, #-16]
   14848:	ldr	r3, [fp, #-16]
   1484c:	mov	r2, #0
   14850:	ldr	r1, [fp, #-12]
   14854:	ldr	r0, [fp, #-8]
   14858:	bl	1486c <__assert_fail@plt+0x39b0>
   1485c:	mov	r3, r0
   14860:	mov	r0, r3
   14864:	sub	sp, fp, #4
   14868:	pop	{fp, pc}
   1486c:	push	{fp, lr}
   14870:	add	fp, sp, #4
   14874:	sub	sp, sp, #64	; 0x40
   14878:	str	r0, [fp, #-32]	; 0xffffffe0
   1487c:	str	r1, [fp, #-36]	; 0xffffffdc
   14880:	str	r2, [fp, #-40]	; 0xffffffd8
   14884:	str	r3, [fp, #-44]	; 0xffffffd4
   14888:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1488c:	cmp	r3, #0
   14890:	beq	1489c <__assert_fail@plt+0x39e0>
   14894:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14898:	b	148a0 <__assert_fail@plt+0x39e4>
   1489c:	ldr	r3, [pc, #292]	; 149c8 <__assert_fail@plt+0x3b0c>
   148a0:	str	r3, [fp, #-8]
   148a4:	bl	10dfc <__errno_location@plt>
   148a8:	mov	r3, r0
   148ac:	ldr	r3, [r3]
   148b0:	str	r3, [fp, #-12]
   148b4:	ldr	r3, [fp, #-8]
   148b8:	ldr	r3, [r3, #4]
   148bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   148c0:	cmp	r2, #0
   148c4:	moveq	r2, #1
   148c8:	movne	r2, #0
   148cc:	uxtb	r2, r2
   148d0:	orr	r3, r3, r2
   148d4:	str	r3, [fp, #-16]
   148d8:	ldr	r3, [fp, #-8]
   148dc:	ldr	r3, [r3]
   148e0:	ldr	r2, [fp, #-8]
   148e4:	add	r2, r2, #8
   148e8:	ldr	r1, [fp, #-8]
   148ec:	ldr	r1, [r1, #40]	; 0x28
   148f0:	ldr	r0, [fp, #-8]
   148f4:	ldr	r0, [r0, #44]	; 0x2c
   148f8:	str	r0, [sp, #16]
   148fc:	str	r1, [sp, #12]
   14900:	str	r2, [sp, #8]
   14904:	ldr	r2, [fp, #-16]
   14908:	str	r2, [sp, #4]
   1490c:	str	r3, [sp]
   14910:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14914:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14918:	mov	r1, #0
   1491c:	mov	r0, #0
   14920:	bl	130c4 <__assert_fail@plt+0x2208>
   14924:	mov	r3, r0
   14928:	add	r3, r3, #1
   1492c:	str	r3, [fp, #-20]	; 0xffffffec
   14930:	ldr	r0, [fp, #-20]	; 0xffffffec
   14934:	bl	15b68 <__assert_fail@plt+0x4cac>
   14938:	mov	r3, r0
   1493c:	str	r3, [fp, #-24]	; 0xffffffe8
   14940:	ldr	r3, [fp, #-8]
   14944:	ldr	r3, [r3]
   14948:	ldr	r2, [fp, #-8]
   1494c:	add	r2, r2, #8
   14950:	ldr	r1, [fp, #-8]
   14954:	ldr	r1, [r1, #40]	; 0x28
   14958:	ldr	r0, [fp, #-8]
   1495c:	ldr	r0, [r0, #44]	; 0x2c
   14960:	str	r0, [sp, #16]
   14964:	str	r1, [sp, #12]
   14968:	str	r2, [sp, #8]
   1496c:	ldr	r2, [fp, #-16]
   14970:	str	r2, [sp, #4]
   14974:	str	r3, [sp]
   14978:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1497c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14980:	ldr	r1, [fp, #-20]	; 0xffffffec
   14984:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14988:	bl	130c4 <__assert_fail@plt+0x2208>
   1498c:	bl	10dfc <__errno_location@plt>
   14990:	mov	r2, r0
   14994:	ldr	r3, [fp, #-12]
   14998:	str	r3, [r2]
   1499c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   149a0:	cmp	r3, #0
   149a4:	beq	149b8 <__assert_fail@plt+0x3afc>
   149a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   149ac:	sub	r2, r3, #1
   149b0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   149b4:	str	r2, [r3]
   149b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149bc:	mov	r0, r3
   149c0:	sub	sp, fp, #4
   149c4:	pop	{fp, pc}
   149c8:	andeq	r9, r2, ip, lsr #3
   149cc:	push	{fp, lr}
   149d0:	add	fp, sp, #4
   149d4:	sub	sp, sp, #8
   149d8:	ldr	r3, [pc, #196]	; 14aa4 <__assert_fail@plt+0x3be8>
   149dc:	ldr	r3, [r3]
   149e0:	str	r3, [fp, #-12]
   149e4:	mov	r3, #1
   149e8:	str	r3, [fp, #-8]
   149ec:	b	14a18 <__assert_fail@plt+0x3b5c>
   149f0:	ldr	r3, [fp, #-8]
   149f4:	lsl	r3, r3, #3
   149f8:	ldr	r2, [fp, #-12]
   149fc:	add	r3, r2, r3
   14a00:	ldr	r3, [r3, #4]
   14a04:	mov	r0, r3
   14a08:	bl	12a48 <__assert_fail@plt+0x1b8c>
   14a0c:	ldr	r3, [fp, #-8]
   14a10:	add	r3, r3, #1
   14a14:	str	r3, [fp, #-8]
   14a18:	ldr	r3, [pc, #136]	; 14aa8 <__assert_fail@plt+0x3bec>
   14a1c:	ldr	r3, [r3]
   14a20:	ldr	r2, [fp, #-8]
   14a24:	cmp	r2, r3
   14a28:	blt	149f0 <__assert_fail@plt+0x3b34>
   14a2c:	ldr	r3, [fp, #-12]
   14a30:	ldr	r3, [r3, #4]
   14a34:	ldr	r2, [pc, #112]	; 14aac <__assert_fail@plt+0x3bf0>
   14a38:	cmp	r3, r2
   14a3c:	beq	14a68 <__assert_fail@plt+0x3bac>
   14a40:	ldr	r3, [fp, #-12]
   14a44:	ldr	r3, [r3, #4]
   14a48:	mov	r0, r3
   14a4c:	bl	12a48 <__assert_fail@plt+0x1b8c>
   14a50:	ldr	r3, [pc, #88]	; 14ab0 <__assert_fail@plt+0x3bf4>
   14a54:	mov	r2, #256	; 0x100
   14a58:	str	r2, [r3]
   14a5c:	ldr	r3, [pc, #76]	; 14ab0 <__assert_fail@plt+0x3bf4>
   14a60:	ldr	r2, [pc, #68]	; 14aac <__assert_fail@plt+0x3bf0>
   14a64:	str	r2, [r3, #4]
   14a68:	ldr	r3, [fp, #-12]
   14a6c:	ldr	r2, [pc, #60]	; 14ab0 <__assert_fail@plt+0x3bf4>
   14a70:	cmp	r3, r2
   14a74:	beq	14a8c <__assert_fail@plt+0x3bd0>
   14a78:	ldr	r0, [fp, #-12]
   14a7c:	bl	12a48 <__assert_fail@plt+0x1b8c>
   14a80:	ldr	r3, [pc, #28]	; 14aa4 <__assert_fail@plt+0x3be8>
   14a84:	ldr	r2, [pc, #36]	; 14ab0 <__assert_fail@plt+0x3bf4>
   14a88:	str	r2, [r3]
   14a8c:	ldr	r3, [pc, #20]	; 14aa8 <__assert_fail@plt+0x3bec>
   14a90:	mov	r2, #1
   14a94:	str	r2, [r3]
   14a98:	nop			; (mov r0, r0)
   14a9c:	sub	sp, fp, #4
   14aa0:	pop	{fp, pc}
   14aa4:	andeq	r9, r2, r0, lsl #2
   14aa8:	strdeq	r9, [r2], -r4
   14aac:	ldrdeq	r9, [r2], -ip
   14ab0:	strdeq	r9, [r2], -r8
   14ab4:	push	{r4, fp, lr}
   14ab8:	add	fp, sp, #8
   14abc:	sub	sp, sp, #84	; 0x54
   14ac0:	str	r0, [fp, #-56]	; 0xffffffc8
   14ac4:	str	r1, [fp, #-60]	; 0xffffffc4
   14ac8:	str	r2, [fp, #-64]	; 0xffffffc0
   14acc:	str	r3, [fp, #-68]	; 0xffffffbc
   14ad0:	bl	10dfc <__errno_location@plt>
   14ad4:	mov	r3, r0
   14ad8:	ldr	r3, [r3]
   14adc:	str	r3, [fp, #-24]	; 0xffffffe8
   14ae0:	ldr	r3, [pc, #640]	; 14d68 <__assert_fail@plt+0x3eac>
   14ae4:	ldr	r3, [r3]
   14ae8:	str	r3, [fp, #-16]
   14aec:	mvn	r3, #-2147483648	; 0x80000000
   14af0:	str	r3, [fp, #-28]	; 0xffffffe4
   14af4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14af8:	cmp	r3, #0
   14afc:	blt	14b10 <__assert_fail@plt+0x3c54>
   14b00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b08:	cmp	r2, r3
   14b0c:	blt	14b14 <__assert_fail@plt+0x3c58>
   14b10:	bl	10e98 <abort@plt>
   14b14:	ldr	r3, [pc, #592]	; 14d6c <__assert_fail@plt+0x3eb0>
   14b18:	ldr	r2, [r3]
   14b1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14b20:	cmp	r2, r3
   14b24:	bgt	14bf8 <__assert_fail@plt+0x3d3c>
   14b28:	ldr	r3, [fp, #-16]
   14b2c:	ldr	r2, [pc, #572]	; 14d70 <__assert_fail@plt+0x3eb4>
   14b30:	cmp	r3, r2
   14b34:	moveq	r3, #1
   14b38:	movne	r3, #0
   14b3c:	strb	r3, [fp, #-29]	; 0xffffffe3
   14b40:	ldr	r3, [pc, #548]	; 14d6c <__assert_fail@plt+0x3eb0>
   14b44:	ldr	r3, [r3]
   14b48:	str	r3, [fp, #-48]	; 0xffffffd0
   14b4c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14b50:	cmp	r3, #0
   14b54:	beq	14b60 <__assert_fail@plt+0x3ca4>
   14b58:	mov	r0, #0
   14b5c:	b	14b64 <__assert_fail@plt+0x3ca8>
   14b60:	ldr	r0, [fp, #-16]
   14b64:	ldr	r3, [pc, #512]	; 14d6c <__assert_fail@plt+0x3eb0>
   14b68:	ldr	r3, [r3]
   14b6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b70:	sub	r3, r2, r3
   14b74:	add	r2, r3, #1
   14b78:	sub	r1, fp, #48	; 0x30
   14b7c:	mov	r3, #8
   14b80:	str	r3, [sp]
   14b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b88:	bl	15e88 <__assert_fail@plt+0x4fcc>
   14b8c:	str	r0, [fp, #-16]
   14b90:	ldr	r2, [pc, #464]	; 14d68 <__assert_fail@plt+0x3eac>
   14b94:	ldr	r3, [fp, #-16]
   14b98:	str	r3, [r2]
   14b9c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14ba0:	cmp	r3, #0
   14ba4:	beq	14bb8 <__assert_fail@plt+0x3cfc>
   14ba8:	ldr	r3, [fp, #-16]
   14bac:	ldr	r2, [pc, #444]	; 14d70 <__assert_fail@plt+0x3eb4>
   14bb0:	ldm	r2, {r0, r1}
   14bb4:	stm	r3, {r0, r1}
   14bb8:	ldr	r3, [pc, #428]	; 14d6c <__assert_fail@plt+0x3eb0>
   14bbc:	ldr	r3, [r3]
   14bc0:	lsl	r3, r3, #3
   14bc4:	ldr	r2, [fp, #-16]
   14bc8:	add	r0, r2, r3
   14bcc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14bd0:	ldr	r3, [pc, #404]	; 14d6c <__assert_fail@plt+0x3eb0>
   14bd4:	ldr	r3, [r3]
   14bd8:	sub	r3, r2, r3
   14bdc:	lsl	r3, r3, #3
   14be0:	mov	r2, r3
   14be4:	mov	r1, #0
   14be8:	bl	10e14 <memset@plt>
   14bec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bf0:	ldr	r2, [pc, #372]	; 14d6c <__assert_fail@plt+0x3eb0>
   14bf4:	str	r3, [r2]
   14bf8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14bfc:	lsl	r3, r3, #3
   14c00:	ldr	r2, [fp, #-16]
   14c04:	add	r3, r2, r3
   14c08:	ldr	r3, [r3]
   14c0c:	str	r3, [fp, #-36]	; 0xffffffdc
   14c10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c14:	lsl	r3, r3, #3
   14c18:	ldr	r2, [fp, #-16]
   14c1c:	add	r3, r2, r3
   14c20:	ldr	r3, [r3, #4]
   14c24:	str	r3, [fp, #-20]	; 0xffffffec
   14c28:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14c2c:	ldr	r3, [r3, #4]
   14c30:	orr	r3, r3, #1
   14c34:	str	r3, [fp, #-40]	; 0xffffffd8
   14c38:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14c3c:	ldr	r3, [r3]
   14c40:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14c44:	add	r2, r2, #8
   14c48:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14c4c:	ldr	r1, [r1, #40]	; 0x28
   14c50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14c54:	ldr	r0, [r0, #44]	; 0x2c
   14c58:	str	r0, [sp, #16]
   14c5c:	str	r1, [sp, #12]
   14c60:	str	r2, [sp, #8]
   14c64:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14c68:	str	r2, [sp, #4]
   14c6c:	str	r3, [sp]
   14c70:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14c74:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14c78:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14c7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c80:	bl	130c4 <__assert_fail@plt+0x2208>
   14c84:	str	r0, [fp, #-44]	; 0xffffffd4
   14c88:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14c8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c90:	cmp	r2, r3
   14c94:	bhi	14d48 <__assert_fail@plt+0x3e8c>
   14c98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c9c:	lsl	r3, r3, #3
   14ca0:	ldr	r2, [fp, #-16]
   14ca4:	add	r3, r2, r3
   14ca8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14cac:	add	r2, r2, #1
   14cb0:	str	r2, [fp, #-36]	; 0xffffffdc
   14cb4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14cb8:	str	r2, [r3]
   14cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cc0:	ldr	r2, [pc, #172]	; 14d74 <__assert_fail@plt+0x3eb8>
   14cc4:	cmp	r3, r2
   14cc8:	beq	14cd4 <__assert_fail@plt+0x3e18>
   14ccc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14cd0:	bl	12a48 <__assert_fail@plt+0x1b8c>
   14cd4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14cd8:	lsl	r3, r3, #3
   14cdc:	ldr	r2, [fp, #-16]
   14ce0:	add	r4, r2, r3
   14ce4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14ce8:	bl	15b68 <__assert_fail@plt+0x4cac>
   14cec:	mov	r3, r0
   14cf0:	str	r3, [fp, #-20]	; 0xffffffec
   14cf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cf8:	str	r3, [r4, #4]
   14cfc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14d00:	ldr	r3, [r3]
   14d04:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14d08:	add	r2, r2, #8
   14d0c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14d10:	ldr	r1, [r1, #40]	; 0x28
   14d14:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14d18:	ldr	r0, [r0, #44]	; 0x2c
   14d1c:	str	r0, [sp, #16]
   14d20:	str	r1, [sp, #12]
   14d24:	str	r2, [sp, #8]
   14d28:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14d2c:	str	r2, [sp, #4]
   14d30:	str	r3, [sp]
   14d34:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d38:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14d3c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14d40:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d44:	bl	130c4 <__assert_fail@plt+0x2208>
   14d48:	bl	10dfc <__errno_location@plt>
   14d4c:	mov	r2, r0
   14d50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d54:	str	r3, [r2]
   14d58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d5c:	mov	r0, r3
   14d60:	sub	sp, fp, #8
   14d64:	pop	{r4, fp, pc}
   14d68:	andeq	r9, r2, r0, lsl #2
   14d6c:	strdeq	r9, [r2], -r4
   14d70:	strdeq	r9, [r2], -r8
   14d74:	ldrdeq	r9, [r2], -ip
   14d78:	push	{fp, lr}
   14d7c:	add	fp, sp, #4
   14d80:	sub	sp, sp, #8
   14d84:	str	r0, [fp, #-8]
   14d88:	str	r1, [fp, #-12]
   14d8c:	ldr	r3, [pc, #28]	; 14db0 <__assert_fail@plt+0x3ef4>
   14d90:	mvn	r2, #0
   14d94:	ldr	r1, [fp, #-12]
   14d98:	ldr	r0, [fp, #-8]
   14d9c:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   14da0:	mov	r3, r0
   14da4:	mov	r0, r3
   14da8:	sub	sp, fp, #4
   14dac:	pop	{fp, pc}
   14db0:	andeq	r9, r2, ip, lsr #3
   14db4:	push	{fp, lr}
   14db8:	add	fp, sp, #4
   14dbc:	sub	sp, sp, #16
   14dc0:	str	r0, [fp, #-8]
   14dc4:	str	r1, [fp, #-12]
   14dc8:	str	r2, [fp, #-16]
   14dcc:	ldr	r3, [pc, #28]	; 14df0 <__assert_fail@plt+0x3f34>
   14dd0:	ldr	r2, [fp, #-16]
   14dd4:	ldr	r1, [fp, #-12]
   14dd8:	ldr	r0, [fp, #-8]
   14ddc:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   14de0:	mov	r3, r0
   14de4:	mov	r0, r3
   14de8:	sub	sp, fp, #4
   14dec:	pop	{fp, pc}
   14df0:	andeq	r9, r2, ip, lsr #3
   14df4:	push	{fp, lr}
   14df8:	add	fp, sp, #4
   14dfc:	sub	sp, sp, #8
   14e00:	str	r0, [fp, #-8]
   14e04:	ldr	r1, [fp, #-8]
   14e08:	mov	r0, #0
   14e0c:	bl	14d78 <__assert_fail@plt+0x3ebc>
   14e10:	mov	r3, r0
   14e14:	mov	r0, r3
   14e18:	sub	sp, fp, #4
   14e1c:	pop	{fp, pc}
   14e20:	push	{fp, lr}
   14e24:	add	fp, sp, #4
   14e28:	sub	sp, sp, #8
   14e2c:	str	r0, [fp, #-8]
   14e30:	str	r1, [fp, #-12]
   14e34:	ldr	r2, [fp, #-12]
   14e38:	ldr	r1, [fp, #-8]
   14e3c:	mov	r0, #0
   14e40:	bl	14db4 <__assert_fail@plt+0x3ef8>
   14e44:	mov	r3, r0
   14e48:	mov	r0, r3
   14e4c:	sub	sp, fp, #4
   14e50:	pop	{fp, pc}
   14e54:	push	{fp, lr}
   14e58:	add	fp, sp, #4
   14e5c:	sub	sp, sp, #64	; 0x40
   14e60:	str	r0, [fp, #-56]	; 0xffffffc8
   14e64:	str	r1, [fp, #-60]	; 0xffffffc4
   14e68:	str	r2, [fp, #-64]	; 0xffffffc0
   14e6c:	sub	r3, fp, #52	; 0x34
   14e70:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14e74:	mov	r0, r3
   14e78:	bl	12f60 <__assert_fail@plt+0x20a4>
   14e7c:	sub	r3, fp, #52	; 0x34
   14e80:	mvn	r2, #0
   14e84:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14e88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e8c:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   14e90:	mov	r3, r0
   14e94:	mov	r0, r3
   14e98:	sub	sp, fp, #4
   14e9c:	pop	{fp, pc}
   14ea0:	push	{fp, lr}
   14ea4:	add	fp, sp, #4
   14ea8:	sub	sp, sp, #64	; 0x40
   14eac:	str	r0, [fp, #-56]	; 0xffffffc8
   14eb0:	str	r1, [fp, #-60]	; 0xffffffc4
   14eb4:	str	r2, [fp, #-64]	; 0xffffffc0
   14eb8:	str	r3, [fp, #-68]	; 0xffffffbc
   14ebc:	sub	r3, fp, #52	; 0x34
   14ec0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14ec4:	mov	r0, r3
   14ec8:	bl	12f60 <__assert_fail@plt+0x20a4>
   14ecc:	sub	r3, fp, #52	; 0x34
   14ed0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14ed4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14ed8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14edc:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   14ee0:	mov	r3, r0
   14ee4:	mov	r0, r3
   14ee8:	sub	sp, fp, #4
   14eec:	pop	{fp, pc}
   14ef0:	push	{fp, lr}
   14ef4:	add	fp, sp, #4
   14ef8:	sub	sp, sp, #8
   14efc:	str	r0, [fp, #-8]
   14f00:	str	r1, [fp, #-12]
   14f04:	ldr	r2, [fp, #-12]
   14f08:	ldr	r1, [fp, #-8]
   14f0c:	mov	r0, #0
   14f10:	bl	14e54 <__assert_fail@plt+0x3f98>
   14f14:	mov	r3, r0
   14f18:	mov	r0, r3
   14f1c:	sub	sp, fp, #4
   14f20:	pop	{fp, pc}
   14f24:	push	{fp, lr}
   14f28:	add	fp, sp, #4
   14f2c:	sub	sp, sp, #16
   14f30:	str	r0, [fp, #-8]
   14f34:	str	r1, [fp, #-12]
   14f38:	str	r2, [fp, #-16]
   14f3c:	ldr	r3, [fp, #-16]
   14f40:	ldr	r2, [fp, #-12]
   14f44:	ldr	r1, [fp, #-8]
   14f48:	mov	r0, #0
   14f4c:	bl	14ea0 <__assert_fail@plt+0x3fe4>
   14f50:	mov	r3, r0
   14f54:	mov	r0, r3
   14f58:	sub	sp, fp, #4
   14f5c:	pop	{fp, pc}
   14f60:	push	{fp, lr}
   14f64:	add	fp, sp, #4
   14f68:	sub	sp, sp, #64	; 0x40
   14f6c:	str	r0, [fp, #-56]	; 0xffffffc8
   14f70:	str	r1, [fp, #-60]	; 0xffffffc4
   14f74:	mov	r3, r2
   14f78:	strb	r3, [fp, #-61]	; 0xffffffc3
   14f7c:	ldr	r3, [pc, #84]	; 14fd8 <__assert_fail@plt+0x411c>
   14f80:	sub	ip, fp, #52	; 0x34
   14f84:	mov	lr, r3
   14f88:	ldm	lr!, {r0, r1, r2, r3}
   14f8c:	stmia	ip!, {r0, r1, r2, r3}
   14f90:	ldm	lr!, {r0, r1, r2, r3}
   14f94:	stmia	ip!, {r0, r1, r2, r3}
   14f98:	ldm	lr, {r0, r1, r2, r3}
   14f9c:	stm	ip, {r0, r1, r2, r3}
   14fa0:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14fa4:	sub	r3, fp, #52	; 0x34
   14fa8:	mov	r2, #1
   14fac:	mov	r0, r3
   14fb0:	bl	12dcc <__assert_fail@plt+0x1f10>
   14fb4:	sub	r3, fp, #52	; 0x34
   14fb8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14fbc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14fc0:	mov	r0, #0
   14fc4:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   14fc8:	mov	r3, r0
   14fcc:	mov	r0, r3
   14fd0:	sub	sp, fp, #4
   14fd4:	pop	{fp, pc}
   14fd8:	andeq	r9, r2, ip, lsr #3
   14fdc:	push	{fp, lr}
   14fe0:	add	fp, sp, #4
   14fe4:	sub	sp, sp, #8
   14fe8:	str	r0, [fp, #-8]
   14fec:	mov	r3, r1
   14ff0:	strb	r3, [fp, #-9]
   14ff4:	ldrb	r3, [fp, #-9]
   14ff8:	mov	r2, r3
   14ffc:	mvn	r1, #0
   15000:	ldr	r0, [fp, #-8]
   15004:	bl	14f60 <__assert_fail@plt+0x40a4>
   15008:	mov	r3, r0
   1500c:	mov	r0, r3
   15010:	sub	sp, fp, #4
   15014:	pop	{fp, pc}
   15018:	push	{fp, lr}
   1501c:	add	fp, sp, #4
   15020:	sub	sp, sp, #8
   15024:	str	r0, [fp, #-8]
   15028:	mov	r1, #58	; 0x3a
   1502c:	ldr	r0, [fp, #-8]
   15030:	bl	14fdc <__assert_fail@plt+0x4120>
   15034:	mov	r3, r0
   15038:	mov	r0, r3
   1503c:	sub	sp, fp, #4
   15040:	pop	{fp, pc}
   15044:	push	{fp, lr}
   15048:	add	fp, sp, #4
   1504c:	sub	sp, sp, #8
   15050:	str	r0, [fp, #-8]
   15054:	str	r1, [fp, #-12]
   15058:	mov	r2, #58	; 0x3a
   1505c:	ldr	r1, [fp, #-12]
   15060:	ldr	r0, [fp, #-8]
   15064:	bl	14f60 <__assert_fail@plt+0x40a4>
   15068:	mov	r3, r0
   1506c:	mov	r0, r3
   15070:	sub	sp, fp, #4
   15074:	pop	{fp, pc}
   15078:	push	{fp, lr}
   1507c:	add	fp, sp, #4
   15080:	sub	sp, sp, #112	; 0x70
   15084:	str	r0, [fp, #-56]	; 0xffffffc8
   15088:	str	r1, [fp, #-60]	; 0xffffffc4
   1508c:	str	r2, [fp, #-64]	; 0xffffffc0
   15090:	sub	r3, fp, #116	; 0x74
   15094:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15098:	mov	r0, r3
   1509c:	bl	12f60 <__assert_fail@plt+0x20a4>
   150a0:	sub	ip, fp, #52	; 0x34
   150a4:	sub	lr, fp, #116	; 0x74
   150a8:	ldm	lr!, {r0, r1, r2, r3}
   150ac:	stmia	ip!, {r0, r1, r2, r3}
   150b0:	ldm	lr!, {r0, r1, r2, r3}
   150b4:	stmia	ip!, {r0, r1, r2, r3}
   150b8:	ldm	lr, {r0, r1, r2, r3}
   150bc:	stm	ip, {r0, r1, r2, r3}
   150c0:	sub	r3, fp, #52	; 0x34
   150c4:	mov	r2, #1
   150c8:	mov	r1, #58	; 0x3a
   150cc:	mov	r0, r3
   150d0:	bl	12dcc <__assert_fail@plt+0x1f10>
   150d4:	sub	r3, fp, #52	; 0x34
   150d8:	mvn	r2, #0
   150dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   150e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   150e4:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   150e8:	mov	r3, r0
   150ec:	mov	r0, r3
   150f0:	sub	sp, fp, #4
   150f4:	pop	{fp, pc}
   150f8:	push	{fp, lr}
   150fc:	add	fp, sp, #4
   15100:	sub	sp, sp, #24
   15104:	str	r0, [fp, #-8]
   15108:	str	r1, [fp, #-12]
   1510c:	str	r2, [fp, #-16]
   15110:	str	r3, [fp, #-20]	; 0xffffffec
   15114:	mvn	r3, #0
   15118:	str	r3, [sp]
   1511c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15120:	ldr	r2, [fp, #-16]
   15124:	ldr	r1, [fp, #-12]
   15128:	ldr	r0, [fp, #-8]
   1512c:	bl	15140 <__assert_fail@plt+0x4284>
   15130:	mov	r3, r0
   15134:	mov	r0, r3
   15138:	sub	sp, fp, #4
   1513c:	pop	{fp, pc}
   15140:	push	{fp, lr}
   15144:	add	fp, sp, #4
   15148:	sub	sp, sp, #64	; 0x40
   1514c:	str	r0, [fp, #-56]	; 0xffffffc8
   15150:	str	r1, [fp, #-60]	; 0xffffffc4
   15154:	str	r2, [fp, #-64]	; 0xffffffc0
   15158:	str	r3, [fp, #-68]	; 0xffffffbc
   1515c:	ldr	r3, [pc, #84]	; 151b8 <__assert_fail@plt+0x42fc>
   15160:	sub	ip, fp, #52	; 0x34
   15164:	mov	lr, r3
   15168:	ldm	lr!, {r0, r1, r2, r3}
   1516c:	stmia	ip!, {r0, r1, r2, r3}
   15170:	ldm	lr!, {r0, r1, r2, r3}
   15174:	stmia	ip!, {r0, r1, r2, r3}
   15178:	ldm	lr, {r0, r1, r2, r3}
   1517c:	stm	ip, {r0, r1, r2, r3}
   15180:	sub	r3, fp, #52	; 0x34
   15184:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15188:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1518c:	mov	r0, r3
   15190:	bl	12ee4 <__assert_fail@plt+0x2028>
   15194:	sub	r3, fp, #52	; 0x34
   15198:	ldr	r2, [fp, #4]
   1519c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   151a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   151a4:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   151a8:	mov	r3, r0
   151ac:	mov	r0, r3
   151b0:	sub	sp, fp, #4
   151b4:	pop	{fp, pc}
   151b8:	andeq	r9, r2, ip, lsr #3
   151bc:	push	{fp, lr}
   151c0:	add	fp, sp, #4
   151c4:	sub	sp, sp, #16
   151c8:	str	r0, [fp, #-8]
   151cc:	str	r1, [fp, #-12]
   151d0:	str	r2, [fp, #-16]
   151d4:	ldr	r3, [fp, #-16]
   151d8:	ldr	r2, [fp, #-12]
   151dc:	ldr	r1, [fp, #-8]
   151e0:	mov	r0, #0
   151e4:	bl	150f8 <__assert_fail@plt+0x423c>
   151e8:	mov	r3, r0
   151ec:	mov	r0, r3
   151f0:	sub	sp, fp, #4
   151f4:	pop	{fp, pc}
   151f8:	push	{fp, lr}
   151fc:	add	fp, sp, #4
   15200:	sub	sp, sp, #24
   15204:	str	r0, [fp, #-8]
   15208:	str	r1, [fp, #-12]
   1520c:	str	r2, [fp, #-16]
   15210:	str	r3, [fp, #-20]	; 0xffffffec
   15214:	ldr	r3, [fp, #-20]	; 0xffffffec
   15218:	str	r3, [sp]
   1521c:	ldr	r3, [fp, #-16]
   15220:	ldr	r2, [fp, #-12]
   15224:	ldr	r1, [fp, #-8]
   15228:	mov	r0, #0
   1522c:	bl	15140 <__assert_fail@plt+0x4284>
   15230:	mov	r3, r0
   15234:	mov	r0, r3
   15238:	sub	sp, fp, #4
   1523c:	pop	{fp, pc}
   15240:	push	{fp, lr}
   15244:	add	fp, sp, #4
   15248:	sub	sp, sp, #16
   1524c:	str	r0, [fp, #-8]
   15250:	str	r1, [fp, #-12]
   15254:	str	r2, [fp, #-16]
   15258:	ldr	r3, [pc, #28]	; 1527c <__assert_fail@plt+0x43c0>
   1525c:	ldr	r2, [fp, #-16]
   15260:	ldr	r1, [fp, #-12]
   15264:	ldr	r0, [fp, #-8]
   15268:	bl	14ab4 <__assert_fail@plt+0x3bf8>
   1526c:	mov	r3, r0
   15270:	mov	r0, r3
   15274:	sub	sp, fp, #4
   15278:	pop	{fp, pc}
   1527c:	andeq	r9, r2, r4, lsl #2
   15280:	push	{fp, lr}
   15284:	add	fp, sp, #4
   15288:	sub	sp, sp, #8
   1528c:	str	r0, [fp, #-8]
   15290:	str	r1, [fp, #-12]
   15294:	ldr	r2, [fp, #-12]
   15298:	ldr	r1, [fp, #-8]
   1529c:	mov	r0, #0
   152a0:	bl	15240 <__assert_fail@plt+0x4384>
   152a4:	mov	r3, r0
   152a8:	mov	r0, r3
   152ac:	sub	sp, fp, #4
   152b0:	pop	{fp, pc}
   152b4:	push	{fp, lr}
   152b8:	add	fp, sp, #4
   152bc:	sub	sp, sp, #8
   152c0:	str	r0, [fp, #-8]
   152c4:	str	r1, [fp, #-12]
   152c8:	mvn	r2, #0
   152cc:	ldr	r1, [fp, #-12]
   152d0:	ldr	r0, [fp, #-8]
   152d4:	bl	15240 <__assert_fail@plt+0x4384>
   152d8:	mov	r3, r0
   152dc:	mov	r0, r3
   152e0:	sub	sp, fp, #4
   152e4:	pop	{fp, pc}
   152e8:	push	{fp, lr}
   152ec:	add	fp, sp, #4
   152f0:	sub	sp, sp, #8
   152f4:	str	r0, [fp, #-8]
   152f8:	ldr	r1, [fp, #-8]
   152fc:	mov	r0, #0
   15300:	bl	152b4 <__assert_fail@plt+0x43f8>
   15304:	mov	r3, r0
   15308:	mov	r0, r3
   1530c:	sub	sp, fp, #4
   15310:	pop	{fp, pc}
   15314:	push	{r4, r5, r6, r7, fp, lr}
   15318:	add	fp, sp, #20
   1531c:	sub	sp, sp, #48	; 0x30
   15320:	str	r0, [fp, #-24]	; 0xffffffe8
   15324:	str	r1, [fp, #-28]	; 0xffffffe4
   15328:	str	r2, [fp, #-32]	; 0xffffffe0
   1532c:	str	r3, [fp, #-36]	; 0xffffffdc
   15330:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15334:	cmp	r3, #0
   15338:	beq	1535c <__assert_fail@plt+0x44a0>
   1533c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15340:	str	r3, [sp]
   15344:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15348:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1534c:	ldr	r1, [pc, #1260]	; 15840 <__assert_fail@plt+0x4984>
   15350:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15354:	bl	10df0 <fprintf@plt>
   15358:	b	15370 <__assert_fail@plt+0x44b4>
   1535c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15360:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15364:	ldr	r1, [pc, #1240]	; 15844 <__assert_fail@plt+0x4988>
   15368:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1536c:	bl	10df0 <fprintf@plt>
   15370:	ldr	r0, [pc, #1232]	; 15848 <__assert_fail@plt+0x498c>
   15374:	bl	10dd8 <gettext@plt>
   15378:	mov	r2, r0
   1537c:	ldr	r3, [pc, #1224]	; 1584c <__assert_fail@plt+0x4990>
   15380:	ldr	r1, [pc, #1224]	; 15850 <__assert_fail@plt+0x4994>
   15384:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15388:	bl	10df0 <fprintf@plt>
   1538c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15390:	mov	r0, #10
   15394:	bl	10cf4 <fputc_unlocked@plt>
   15398:	ldr	r0, [pc, #1204]	; 15854 <__assert_fail@plt+0x4998>
   1539c:	bl	10dd8 <gettext@plt>
   153a0:	mov	r3, r0
   153a4:	ldr	r2, [pc, #1196]	; 15858 <__assert_fail@plt+0x499c>
   153a8:	mov	r1, r3
   153ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   153b0:	bl	10df0 <fprintf@plt>
   153b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   153b8:	mov	r0, #10
   153bc:	bl	10cf4 <fputc_unlocked@plt>
   153c0:	ldr	r3, [fp, #8]
   153c4:	cmp	r3, #9
   153c8:	ldrls	pc, [pc, r3, lsl #2]
   153cc:	b	15788 <__assert_fail@plt+0x48cc>
   153d0:	andeq	r5, r1, r0, lsr r8
   153d4:	strdeq	r5, [r1], -r8
   153d8:	andeq	r5, r1, ip, lsl r4
   153dc:	andeq	r5, r1, r8, asr #8
   153e0:	andeq	r5, r1, r8, lsl #9
   153e4:	andeq	r5, r1, r0, ror #9
   153e8:	andeq	r5, r1, r8, asr #10
   153ec:	andeq	r5, r1, r0, asr #11
   153f0:	andeq	r5, r1, r8, asr #12
   153f4:	andeq	r5, r1, r0, ror #13
   153f8:	ldr	r0, [pc, #1116]	; 1585c <__assert_fail@plt+0x49a0>
   153fc:	bl	10dd8 <gettext@plt>
   15400:	mov	r1, r0
   15404:	ldr	r3, [fp, #4]
   15408:	ldr	r3, [r3]
   1540c:	mov	r2, r3
   15410:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15414:	bl	10df0 <fprintf@plt>
   15418:	b	15834 <__assert_fail@plt+0x4978>
   1541c:	ldr	r0, [pc, #1084]	; 15860 <__assert_fail@plt+0x49a4>
   15420:	bl	10dd8 <gettext@plt>
   15424:	mov	r1, r0
   15428:	ldr	r3, [fp, #4]
   1542c:	ldr	r2, [r3]
   15430:	ldr	r3, [fp, #4]
   15434:	add	r3, r3, #4
   15438:	ldr	r3, [r3]
   1543c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15440:	bl	10df0 <fprintf@plt>
   15444:	b	15834 <__assert_fail@plt+0x4978>
   15448:	ldr	r0, [pc, #1044]	; 15864 <__assert_fail@plt+0x49a8>
   1544c:	bl	10dd8 <gettext@plt>
   15450:	ldr	r3, [fp, #4]
   15454:	ldr	r2, [r3]
   15458:	ldr	r3, [fp, #4]
   1545c:	add	r3, r3, #4
   15460:	ldr	r1, [r3]
   15464:	ldr	r3, [fp, #4]
   15468:	add	r3, r3, #8
   1546c:	ldr	r3, [r3]
   15470:	str	r3, [sp]
   15474:	mov	r3, r1
   15478:	mov	r1, r0
   1547c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15480:	bl	10df0 <fprintf@plt>
   15484:	b	15834 <__assert_fail@plt+0x4978>
   15488:	ldr	r0, [pc, #984]	; 15868 <__assert_fail@plt+0x49ac>
   1548c:	bl	10dd8 <gettext@plt>
   15490:	mov	ip, r0
   15494:	ldr	r3, [fp, #4]
   15498:	ldr	r1, [r3]
   1549c:	ldr	r3, [fp, #4]
   154a0:	add	r3, r3, #4
   154a4:	ldr	r0, [r3]
   154a8:	ldr	r3, [fp, #4]
   154ac:	add	r3, r3, #8
   154b0:	ldr	r3, [r3]
   154b4:	ldr	r2, [fp, #4]
   154b8:	add	r2, r2, #12
   154bc:	ldr	r2, [r2]
   154c0:	str	r2, [sp, #4]
   154c4:	str	r3, [sp]
   154c8:	mov	r3, r0
   154cc:	mov	r2, r1
   154d0:	mov	r1, ip
   154d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154d8:	bl	10df0 <fprintf@plt>
   154dc:	b	15834 <__assert_fail@plt+0x4978>
   154e0:	ldr	r0, [pc, #900]	; 1586c <__assert_fail@plt+0x49b0>
   154e4:	bl	10dd8 <gettext@plt>
   154e8:	mov	lr, r0
   154ec:	ldr	r3, [fp, #4]
   154f0:	ldr	r0, [r3]
   154f4:	ldr	r3, [fp, #4]
   154f8:	add	r3, r3, #4
   154fc:	ldr	ip, [r3]
   15500:	ldr	r3, [fp, #4]
   15504:	add	r3, r3, #8
   15508:	ldr	r3, [r3]
   1550c:	ldr	r2, [fp, #4]
   15510:	add	r2, r2, #12
   15514:	ldr	r2, [r2]
   15518:	ldr	r1, [fp, #4]
   1551c:	add	r1, r1, #16
   15520:	ldr	r1, [r1]
   15524:	str	r1, [sp, #8]
   15528:	str	r2, [sp, #4]
   1552c:	str	r3, [sp]
   15530:	mov	r3, ip
   15534:	mov	r2, r0
   15538:	mov	r1, lr
   1553c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15540:	bl	10df0 <fprintf@plt>
   15544:	b	15834 <__assert_fail@plt+0x4978>
   15548:	ldr	r0, [pc, #800]	; 15870 <__assert_fail@plt+0x49b4>
   1554c:	bl	10dd8 <gettext@plt>
   15550:	mov	r4, r0
   15554:	ldr	r3, [fp, #4]
   15558:	ldr	ip, [r3]
   1555c:	ldr	r3, [fp, #4]
   15560:	add	r3, r3, #4
   15564:	ldr	lr, [r3]
   15568:	ldr	r3, [fp, #4]
   1556c:	add	r3, r3, #8
   15570:	ldr	r3, [r3]
   15574:	ldr	r2, [fp, #4]
   15578:	add	r2, r2, #12
   1557c:	ldr	r2, [r2]
   15580:	ldr	r1, [fp, #4]
   15584:	add	r1, r1, #16
   15588:	ldr	r1, [r1]
   1558c:	ldr	r0, [fp, #4]
   15590:	add	r0, r0, #20
   15594:	ldr	r0, [r0]
   15598:	str	r0, [sp, #12]
   1559c:	str	r1, [sp, #8]
   155a0:	str	r2, [sp, #4]
   155a4:	str	r3, [sp]
   155a8:	mov	r3, lr
   155ac:	mov	r2, ip
   155b0:	mov	r1, r4
   155b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155b8:	bl	10df0 <fprintf@plt>
   155bc:	b	15834 <__assert_fail@plt+0x4978>
   155c0:	ldr	r0, [pc, #684]	; 15874 <__assert_fail@plt+0x49b8>
   155c4:	bl	10dd8 <gettext@plt>
   155c8:	mov	r5, r0
   155cc:	ldr	r3, [fp, #4]
   155d0:	ldr	lr, [r3]
   155d4:	ldr	r3, [fp, #4]
   155d8:	add	r3, r3, #4
   155dc:	ldr	r4, [r3]
   155e0:	ldr	r3, [fp, #4]
   155e4:	add	r3, r3, #8
   155e8:	ldr	r3, [r3]
   155ec:	ldr	r2, [fp, #4]
   155f0:	add	r2, r2, #12
   155f4:	ldr	r2, [r2]
   155f8:	ldr	r1, [fp, #4]
   155fc:	add	r1, r1, #16
   15600:	ldr	r1, [r1]
   15604:	ldr	r0, [fp, #4]
   15608:	add	r0, r0, #20
   1560c:	ldr	r0, [r0]
   15610:	ldr	ip, [fp, #4]
   15614:	add	ip, ip, #24
   15618:	ldr	ip, [ip]
   1561c:	str	ip, [sp, #16]
   15620:	str	r0, [sp, #12]
   15624:	str	r1, [sp, #8]
   15628:	str	r2, [sp, #4]
   1562c:	str	r3, [sp]
   15630:	mov	r3, r4
   15634:	mov	r2, lr
   15638:	mov	r1, r5
   1563c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15640:	bl	10df0 <fprintf@plt>
   15644:	b	15834 <__assert_fail@plt+0x4978>
   15648:	ldr	r0, [pc, #552]	; 15878 <__assert_fail@plt+0x49bc>
   1564c:	bl	10dd8 <gettext@plt>
   15650:	mov	r6, r0
   15654:	ldr	r3, [fp, #4]
   15658:	ldr	r4, [r3]
   1565c:	ldr	r3, [fp, #4]
   15660:	add	r3, r3, #4
   15664:	ldr	r5, [r3]
   15668:	ldr	r3, [fp, #4]
   1566c:	add	r3, r3, #8
   15670:	ldr	r3, [r3]
   15674:	ldr	r2, [fp, #4]
   15678:	add	r2, r2, #12
   1567c:	ldr	r2, [r2]
   15680:	ldr	r1, [fp, #4]
   15684:	add	r1, r1, #16
   15688:	ldr	r1, [r1]
   1568c:	ldr	r0, [fp, #4]
   15690:	add	r0, r0, #20
   15694:	ldr	r0, [r0]
   15698:	ldr	ip, [fp, #4]
   1569c:	add	ip, ip, #24
   156a0:	ldr	ip, [ip]
   156a4:	ldr	lr, [fp, #4]
   156a8:	add	lr, lr, #28
   156ac:	ldr	lr, [lr]
   156b0:	str	lr, [sp, #20]
   156b4:	str	ip, [sp, #16]
   156b8:	str	r0, [sp, #12]
   156bc:	str	r1, [sp, #8]
   156c0:	str	r2, [sp, #4]
   156c4:	str	r3, [sp]
   156c8:	mov	r3, r5
   156cc:	mov	r2, r4
   156d0:	mov	r1, r6
   156d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156d8:	bl	10df0 <fprintf@plt>
   156dc:	b	15834 <__assert_fail@plt+0x4978>
   156e0:	ldr	r0, [pc, #404]	; 1587c <__assert_fail@plt+0x49c0>
   156e4:	bl	10dd8 <gettext@plt>
   156e8:	mov	r7, r0
   156ec:	ldr	r3, [fp, #4]
   156f0:	ldr	r5, [r3]
   156f4:	ldr	r3, [fp, #4]
   156f8:	add	r3, r3, #4
   156fc:	ldr	r6, [r3]
   15700:	ldr	r3, [fp, #4]
   15704:	add	r3, r3, #8
   15708:	ldr	r3, [r3]
   1570c:	ldr	r2, [fp, #4]
   15710:	add	r2, r2, #12
   15714:	ldr	r2, [r2]
   15718:	ldr	r1, [fp, #4]
   1571c:	add	r1, r1, #16
   15720:	ldr	r1, [r1]
   15724:	ldr	r0, [fp, #4]
   15728:	add	r0, r0, #20
   1572c:	ldr	r0, [r0]
   15730:	ldr	ip, [fp, #4]
   15734:	add	ip, ip, #24
   15738:	ldr	ip, [ip]
   1573c:	ldr	lr, [fp, #4]
   15740:	add	lr, lr, #28
   15744:	ldr	lr, [lr]
   15748:	ldr	r4, [fp, #4]
   1574c:	add	r4, r4, #32
   15750:	ldr	r4, [r4]
   15754:	str	r4, [sp, #24]
   15758:	str	lr, [sp, #20]
   1575c:	str	ip, [sp, #16]
   15760:	str	r0, [sp, #12]
   15764:	str	r1, [sp, #8]
   15768:	str	r2, [sp, #4]
   1576c:	str	r3, [sp]
   15770:	mov	r3, r6
   15774:	mov	r2, r5
   15778:	mov	r1, r7
   1577c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15780:	bl	10df0 <fprintf@plt>
   15784:	b	15834 <__assert_fail@plt+0x4978>
   15788:	ldr	r0, [pc, #240]	; 15880 <__assert_fail@plt+0x49c4>
   1578c:	bl	10dd8 <gettext@plt>
   15790:	mov	r7, r0
   15794:	ldr	r3, [fp, #4]
   15798:	ldr	r5, [r3]
   1579c:	ldr	r3, [fp, #4]
   157a0:	add	r3, r3, #4
   157a4:	ldr	r6, [r3]
   157a8:	ldr	r3, [fp, #4]
   157ac:	add	r3, r3, #8
   157b0:	ldr	r3, [r3]
   157b4:	ldr	r2, [fp, #4]
   157b8:	add	r2, r2, #12
   157bc:	ldr	r2, [r2]
   157c0:	ldr	r1, [fp, #4]
   157c4:	add	r1, r1, #16
   157c8:	ldr	r1, [r1]
   157cc:	ldr	r0, [fp, #4]
   157d0:	add	r0, r0, #20
   157d4:	ldr	r0, [r0]
   157d8:	ldr	ip, [fp, #4]
   157dc:	add	ip, ip, #24
   157e0:	ldr	ip, [ip]
   157e4:	ldr	lr, [fp, #4]
   157e8:	add	lr, lr, #28
   157ec:	ldr	lr, [lr]
   157f0:	ldr	r4, [fp, #4]
   157f4:	add	r4, r4, #32
   157f8:	ldr	r4, [r4]
   157fc:	str	r4, [sp, #24]
   15800:	str	lr, [sp, #20]
   15804:	str	ip, [sp, #16]
   15808:	str	r0, [sp, #12]
   1580c:	str	r1, [sp, #8]
   15810:	str	r2, [sp, #4]
   15814:	str	r3, [sp]
   15818:	mov	r3, r6
   1581c:	mov	r2, r5
   15820:	mov	r1, r7
   15824:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15828:	bl	10df0 <fprintf@plt>
   1582c:	b	15834 <__assert_fail@plt+0x4978>
   15830:	nop			; (mov r0, r0)
   15834:	nop			; (mov r0, r0)
   15838:	sub	sp, fp, #20
   1583c:	pop	{r4, r5, r6, r7, fp, pc}
   15840:	andeq	r8, r1, ip, ror r3
   15844:	andeq	r8, r1, r8, lsl #7
   15848:	muleq	r1, r0, r3
   1584c:	andeq	r0, r0, r6, ror #15
   15850:	andeq	r8, r1, r0, lsr #13
   15854:	muleq	r1, r4, r3
   15858:	andeq	r8, r1, r0, asr #8
   1585c:	andeq	r8, r1, r4, ror #8
   15860:	andeq	r8, r1, r4, ror r4
   15864:	andeq	r8, r1, ip, lsl #9
   15868:	andeq	r8, r1, r8, lsr #9
   1586c:	andeq	r8, r1, r8, asr #9
   15870:	andeq	r8, r1, ip, ror #9
   15874:	andeq	r8, r1, r4, lsl r5
   15878:	andeq	r8, r1, r0, asr #10
   1587c:	andeq	r8, r1, r0, ror r5
   15880:	andeq	r8, r1, r4, lsr #11
   15884:	push	{fp, lr}
   15888:	add	fp, sp, #4
   1588c:	sub	sp, sp, #32
   15890:	str	r0, [fp, #-16]
   15894:	str	r1, [fp, #-20]	; 0xffffffec
   15898:	str	r2, [fp, #-24]	; 0xffffffe8
   1589c:	str	r3, [fp, #-28]	; 0xffffffe4
   158a0:	mov	r3, #0
   158a4:	str	r3, [fp, #-8]
   158a8:	b	158b8 <__assert_fail@plt+0x49fc>
   158ac:	ldr	r3, [fp, #-8]
   158b0:	add	r3, r3, #1
   158b4:	str	r3, [fp, #-8]
   158b8:	ldr	r3, [fp, #-8]
   158bc:	lsl	r3, r3, #2
   158c0:	ldr	r2, [fp, #4]
   158c4:	add	r3, r2, r3
   158c8:	ldr	r3, [r3]
   158cc:	cmp	r3, #0
   158d0:	bne	158ac <__assert_fail@plt+0x49f0>
   158d4:	ldr	r3, [fp, #-8]
   158d8:	str	r3, [sp, #4]
   158dc:	ldr	r3, [fp, #4]
   158e0:	str	r3, [sp]
   158e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   158ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   158f0:	ldr	r0, [fp, #-16]
   158f4:	bl	15314 <__assert_fail@plt+0x4458>
   158f8:	nop			; (mov r0, r0)
   158fc:	sub	sp, fp, #4
   15900:	pop	{fp, pc}
   15904:	push	{fp, lr}
   15908:	add	fp, sp, #4
   1590c:	sub	sp, sp, #72	; 0x48
   15910:	str	r0, [fp, #-56]	; 0xffffffc8
   15914:	str	r1, [fp, #-60]	; 0xffffffc4
   15918:	str	r2, [fp, #-64]	; 0xffffffc0
   1591c:	str	r3, [fp, #-68]	; 0xffffffbc
   15920:	mov	r3, #0
   15924:	str	r3, [fp, #-8]
   15928:	b	15938 <__assert_fail@plt+0x4a7c>
   1592c:	ldr	r3, [fp, #-8]
   15930:	add	r3, r3, #1
   15934:	str	r3, [fp, #-8]
   15938:	ldr	r3, [fp, #-8]
   1593c:	cmp	r3, #9
   15940:	bhi	15984 <__assert_fail@plt+0x4ac8>
   15944:	ldr	r3, [fp, #4]
   15948:	add	r2, r3, #4
   1594c:	str	r2, [fp, #4]
   15950:	ldr	r2, [r3]
   15954:	ldr	r3, [fp, #-8]
   15958:	lsl	r3, r3, #2
   1595c:	sub	r1, fp, #4
   15960:	add	r3, r1, r3
   15964:	str	r2, [r3, #-44]	; 0xffffffd4
   15968:	ldr	r3, [fp, #-8]
   1596c:	lsl	r3, r3, #2
   15970:	sub	r2, fp, #4
   15974:	add	r3, r2, r3
   15978:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1597c:	cmp	r3, #0
   15980:	bne	1592c <__assert_fail@plt+0x4a70>
   15984:	ldr	r3, [fp, #-8]
   15988:	str	r3, [sp, #4]
   1598c:	sub	r3, fp, #48	; 0x30
   15990:	str	r3, [sp]
   15994:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15998:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1599c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   159a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   159a4:	bl	15314 <__assert_fail@plt+0x4458>
   159a8:	nop			; (mov r0, r0)
   159ac:	sub	sp, fp, #4
   159b0:	pop	{fp, pc}
   159b4:	push	{r3}		; (str r3, [sp, #-4]!)
   159b8:	push	{fp, lr}
   159bc:	add	fp, sp, #4
   159c0:	sub	sp, sp, #36	; 0x24
   159c4:	str	r0, [fp, #-20]	; 0xffffffec
   159c8:	str	r1, [fp, #-24]	; 0xffffffe8
   159cc:	str	r2, [fp, #-28]	; 0xffffffe4
   159d0:	add	r3, fp, #8
   159d4:	str	r3, [fp, #-12]
   159d8:	ldr	r3, [fp, #-12]
   159dc:	str	r3, [sp]
   159e0:	ldr	r3, [fp, #4]
   159e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   159e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   159ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   159f0:	bl	15904 <__assert_fail@plt+0x4a48>
   159f4:	nop			; (mov r0, r0)
   159f8:	sub	sp, fp, #4
   159fc:	pop	{fp, lr}
   15a00:	add	sp, sp, #4
   15a04:	bx	lr
   15a08:	push	{fp, lr}
   15a0c:	add	fp, sp, #4
   15a10:	ldr	r3, [pc, #96]	; 15a78 <__assert_fail@plt+0x4bbc>
   15a14:	ldr	r3, [r3]
   15a18:	mov	r1, r3
   15a1c:	mov	r0, #10
   15a20:	bl	10cf4 <fputc_unlocked@plt>
   15a24:	ldr	r0, [pc, #80]	; 15a7c <__assert_fail@plt+0x4bc0>
   15a28:	bl	10dd8 <gettext@plt>
   15a2c:	mov	r3, r0
   15a30:	ldr	r1, [pc, #72]	; 15a80 <__assert_fail@plt+0x4bc4>
   15a34:	mov	r0, r3
   15a38:	bl	10ca0 <printf@plt>
   15a3c:	ldr	r0, [pc, #64]	; 15a84 <__assert_fail@plt+0x4bc8>
   15a40:	bl	10dd8 <gettext@plt>
   15a44:	mov	r3, r0
   15a48:	ldr	r2, [pc, #56]	; 15a88 <__assert_fail@plt+0x4bcc>
   15a4c:	ldr	r1, [pc, #56]	; 15a8c <__assert_fail@plt+0x4bd0>
   15a50:	mov	r0, r3
   15a54:	bl	10ca0 <printf@plt>
   15a58:	ldr	r0, [pc, #48]	; 15a90 <__assert_fail@plt+0x4bd4>
   15a5c:	bl	10dd8 <gettext@plt>
   15a60:	mov	r3, r0
   15a64:	ldr	r1, [pc, #40]	; 15a94 <__assert_fail@plt+0x4bd8>
   15a68:	mov	r0, r3
   15a6c:	bl	10ca0 <printf@plt>
   15a70:	nop			; (mov r0, r0)
   15a74:	pop	{fp, pc}
   15a78:	andeq	r9, r2, r4, asr r1
   15a7c:	andeq	r8, r1, r0, ror #11
   15a80:	strdeq	r8, [r1], -r4
   15a84:	andeq	r8, r1, ip, lsl #12
   15a88:	andeq	r8, r1, r0, lsr #12
   15a8c:	andeq	r8, r1, r8, asr #12
   15a90:	andeq	r8, r1, r8, asr r6
   15a94:	andeq	r8, r1, r0, lsl #13
   15a98:	push	{fp, lr}
   15a9c:	add	fp, sp, #4
   15aa0:	sub	sp, sp, #16
   15aa4:	str	r0, [fp, #-8]
   15aa8:	str	r1, [fp, #-12]
   15aac:	str	r2, [fp, #-16]
   15ab0:	ldr	r2, [fp, #-16]
   15ab4:	ldr	r1, [fp, #-12]
   15ab8:	ldr	r0, [fp, #-8]
   15abc:	bl	15c28 <__assert_fail@plt+0x4d6c>
   15ac0:	mov	r3, r0
   15ac4:	mov	r0, r3
   15ac8:	sub	sp, fp, #4
   15acc:	pop	{fp, pc}
   15ad0:	push	{fp, lr}
   15ad4:	add	fp, sp, #4
   15ad8:	sub	sp, sp, #8
   15adc:	str	r0, [fp, #-8]
   15ae0:	ldr	r3, [fp, #-8]
   15ae4:	cmp	r3, #0
   15ae8:	bne	15af0 <__assert_fail@plt+0x4c34>
   15aec:	bl	1661c <__assert_fail@plt+0x5760>
   15af0:	ldr	r3, [fp, #-8]
   15af4:	mov	r0, r3
   15af8:	sub	sp, fp, #4
   15afc:	pop	{fp, pc}
   15b00:	push	{fp, lr}
   15b04:	add	fp, sp, #4
   15b08:	sub	sp, sp, #8
   15b0c:	str	r0, [fp, #-8]
   15b10:	ldr	r0, [fp, #-8]
   15b14:	bl	1671c <__assert_fail@plt+0x5860>
   15b18:	mov	r3, r0
   15b1c:	mov	r0, r3
   15b20:	bl	15ad0 <__assert_fail@plt+0x4c14>
   15b24:	mov	r3, r0
   15b28:	mov	r0, r3
   15b2c:	sub	sp, fp, #4
   15b30:	pop	{fp, pc}
   15b34:	push	{fp, lr}
   15b38:	add	fp, sp, #4
   15b3c:	sub	sp, sp, #8
   15b40:	str	r0, [fp, #-8]
   15b44:	ldr	r0, [fp, #-8]
   15b48:	bl	16a28 <__assert_fail@plt+0x5b6c>
   15b4c:	mov	r3, r0
   15b50:	mov	r0, r3
   15b54:	bl	15ad0 <__assert_fail@plt+0x4c14>
   15b58:	mov	r3, r0
   15b5c:	mov	r0, r3
   15b60:	sub	sp, fp, #4
   15b64:	pop	{fp, pc}
   15b68:	push	{fp, lr}
   15b6c:	add	fp, sp, #4
   15b70:	sub	sp, sp, #8
   15b74:	str	r0, [fp, #-8]
   15b78:	ldr	r0, [fp, #-8]
   15b7c:	bl	15b00 <__assert_fail@plt+0x4c44>
   15b80:	mov	r3, r0
   15b84:	mov	r0, r3
   15b88:	sub	sp, fp, #4
   15b8c:	pop	{fp, pc}
   15b90:	push	{fp, lr}
   15b94:	add	fp, sp, #4
   15b98:	sub	sp, sp, #16
   15b9c:	str	r0, [fp, #-16]
   15ba0:	str	r1, [fp, #-20]	; 0xffffffec
   15ba4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ba8:	ldr	r0, [fp, #-16]
   15bac:	bl	167c4 <__assert_fail@plt+0x5908>
   15bb0:	str	r0, [fp, #-8]
   15bb4:	ldr	r3, [fp, #-8]
   15bb8:	cmp	r3, #0
   15bbc:	bne	15bdc <__assert_fail@plt+0x4d20>
   15bc0:	ldr	r3, [fp, #-16]
   15bc4:	cmp	r3, #0
   15bc8:	beq	15bd8 <__assert_fail@plt+0x4d1c>
   15bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bd0:	cmp	r3, #0
   15bd4:	beq	15bdc <__assert_fail@plt+0x4d20>
   15bd8:	bl	1661c <__assert_fail@plt+0x5760>
   15bdc:	ldr	r3, [fp, #-8]
   15be0:	mov	r0, r3
   15be4:	sub	sp, fp, #4
   15be8:	pop	{fp, pc}
   15bec:	push	{fp, lr}
   15bf0:	add	fp, sp, #4
   15bf4:	sub	sp, sp, #8
   15bf8:	str	r0, [fp, #-8]
   15bfc:	str	r1, [fp, #-12]
   15c00:	ldr	r1, [fp, #-12]
   15c04:	ldr	r0, [fp, #-8]
   15c08:	bl	16a54 <__assert_fail@plt+0x5b98>
   15c0c:	mov	r3, r0
   15c10:	mov	r0, r3
   15c14:	bl	15ad0 <__assert_fail@plt+0x4c14>
   15c18:	mov	r3, r0
   15c1c:	mov	r0, r3
   15c20:	sub	sp, fp, #4
   15c24:	pop	{fp, pc}
   15c28:	push	{fp, lr}
   15c2c:	add	fp, sp, #4
   15c30:	sub	sp, sp, #24
   15c34:	str	r0, [fp, #-16]
   15c38:	str	r1, [fp, #-20]	; 0xffffffec
   15c3c:	str	r2, [fp, #-24]	; 0xffffffe8
   15c40:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15c44:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c48:	ldr	r0, [fp, #-16]
   15c4c:	bl	16c48 <__assert_fail@plt+0x5d8c>
   15c50:	str	r0, [fp, #-8]
   15c54:	ldr	r3, [fp, #-8]
   15c58:	cmp	r3, #0
   15c5c:	bne	15c88 <__assert_fail@plt+0x4dcc>
   15c60:	ldr	r3, [fp, #-16]
   15c64:	cmp	r3, #0
   15c68:	beq	15c84 <__assert_fail@plt+0x4dc8>
   15c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c70:	cmp	r3, #0
   15c74:	beq	15c88 <__assert_fail@plt+0x4dcc>
   15c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c7c:	cmp	r3, #0
   15c80:	beq	15c88 <__assert_fail@plt+0x4dcc>
   15c84:	bl	1661c <__assert_fail@plt+0x5760>
   15c88:	ldr	r3, [fp, #-8]
   15c8c:	mov	r0, r3
   15c90:	sub	sp, fp, #4
   15c94:	pop	{fp, pc}
   15c98:	push	{fp, lr}
   15c9c:	add	fp, sp, #4
   15ca0:	sub	sp, sp, #16
   15ca4:	str	r0, [fp, #-8]
   15ca8:	str	r1, [fp, #-12]
   15cac:	str	r2, [fp, #-16]
   15cb0:	ldr	r2, [fp, #-16]
   15cb4:	ldr	r1, [fp, #-12]
   15cb8:	ldr	r0, [fp, #-8]
   15cbc:	bl	16adc <__assert_fail@plt+0x5c20>
   15cc0:	mov	r3, r0
   15cc4:	mov	r0, r3
   15cc8:	bl	15ad0 <__assert_fail@plt+0x4c14>
   15ccc:	mov	r3, r0
   15cd0:	mov	r0, r3
   15cd4:	sub	sp, fp, #4
   15cd8:	pop	{fp, pc}
   15cdc:	push	{fp, lr}
   15ce0:	add	fp, sp, #4
   15ce4:	sub	sp, sp, #8
   15ce8:	str	r0, [fp, #-8]
   15cec:	str	r1, [fp, #-12]
   15cf0:	ldr	r2, [fp, #-12]
   15cf4:	ldr	r1, [fp, #-8]
   15cf8:	mov	r0, #0
   15cfc:	bl	15c28 <__assert_fail@plt+0x4d6c>
   15d00:	mov	r3, r0
   15d04:	mov	r0, r3
   15d08:	sub	sp, fp, #4
   15d0c:	pop	{fp, pc}
   15d10:	push	{fp, lr}
   15d14:	add	fp, sp, #4
   15d18:	sub	sp, sp, #8
   15d1c:	str	r0, [fp, #-8]
   15d20:	str	r1, [fp, #-12]
   15d24:	ldr	r2, [fp, #-12]
   15d28:	ldr	r1, [fp, #-8]
   15d2c:	mov	r0, #0
   15d30:	bl	15c98 <__assert_fail@plt+0x4ddc>
   15d34:	mov	r3, r0
   15d38:	mov	r0, r3
   15d3c:	sub	sp, fp, #4
   15d40:	pop	{fp, pc}
   15d44:	push	{fp, lr}
   15d48:	add	fp, sp, #4
   15d4c:	sub	sp, sp, #8
   15d50:	str	r0, [fp, #-8]
   15d54:	str	r1, [fp, #-12]
   15d58:	mov	r2, #1
   15d5c:	ldr	r1, [fp, #-12]
   15d60:	ldr	r0, [fp, #-8]
   15d64:	bl	15d78 <__assert_fail@plt+0x4ebc>
   15d68:	mov	r3, r0
   15d6c:	mov	r0, r3
   15d70:	sub	sp, fp, #4
   15d74:	pop	{fp, pc}
   15d78:	push	{fp, lr}
   15d7c:	add	fp, sp, #4
   15d80:	sub	sp, sp, #24
   15d84:	str	r0, [fp, #-16]
   15d88:	str	r1, [fp, #-20]	; 0xffffffec
   15d8c:	str	r2, [fp, #-24]	; 0xffffffe8
   15d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d94:	ldr	r3, [r3]
   15d98:	str	r3, [fp, #-8]
   15d9c:	ldr	r3, [fp, #-16]
   15da0:	cmp	r3, #0
   15da4:	bne	15df0 <__assert_fail@plt+0x4f34>
   15da8:	ldr	r3, [fp, #-8]
   15dac:	cmp	r3, #0
   15db0:	bne	15e54 <__assert_fail@plt+0x4f98>
   15db4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15db8:	mov	r0, #64	; 0x40
   15dbc:	bl	173f0 <__assert_fail@plt+0x6534>
   15dc0:	mov	r3, r0
   15dc4:	str	r3, [fp, #-8]
   15dc8:	ldr	r3, [fp, #-8]
   15dcc:	cmp	r3, #0
   15dd0:	moveq	r3, #1
   15dd4:	movne	r3, #0
   15dd8:	uxtb	r3, r3
   15ddc:	mov	r2, r3
   15de0:	ldr	r3, [fp, #-8]
   15de4:	add	r3, r2, r3
   15de8:	str	r3, [fp, #-8]
   15dec:	b	15e54 <__assert_fail@plt+0x4f98>
   15df0:	ldr	r3, [fp, #-8]
   15df4:	lsr	r3, r3, #1
   15df8:	add	r3, r3, #1
   15dfc:	mvn	r2, r3
   15e00:	ldr	r3, [fp, #-8]
   15e04:	cmp	r2, r3
   15e08:	bcs	15e2c <__assert_fail@plt+0x4f70>
   15e0c:	ldr	r3, [fp, #-8]
   15e10:	lsr	r2, r3, #1
   15e14:	ldr	r3, [fp, #-8]
   15e18:	add	r3, r2, r3
   15e1c:	add	r3, r3, #1
   15e20:	str	r3, [fp, #-8]
   15e24:	mov	r3, #1
   15e28:	b	15e48 <__assert_fail@plt+0x4f8c>
   15e2c:	ldr	r3, [fp, #-8]
   15e30:	lsr	r2, r3, #1
   15e34:	ldr	r3, [fp, #-8]
   15e38:	add	r3, r2, r3
   15e3c:	add	r3, r3, #1
   15e40:	str	r3, [fp, #-8]
   15e44:	mov	r3, #0
   15e48:	cmp	r3, #0
   15e4c:	beq	15e54 <__assert_fail@plt+0x4f98>
   15e50:	bl	1661c <__assert_fail@plt+0x5760>
   15e54:	ldr	r3, [fp, #-8]
   15e58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15e5c:	mov	r1, r3
   15e60:	ldr	r0, [fp, #-16]
   15e64:	bl	15c28 <__assert_fail@plt+0x4d6c>
   15e68:	str	r0, [fp, #-16]
   15e6c:	ldr	r2, [fp, #-8]
   15e70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e74:	str	r2, [r3]
   15e78:	ldr	r3, [fp, #-16]
   15e7c:	mov	r0, r3
   15e80:	sub	sp, fp, #4
   15e84:	pop	{fp, pc}
   15e88:	push	{fp, lr}
   15e8c:	add	fp, sp, #4
   15e90:	sub	sp, sp, #32
   15e94:	str	r0, [fp, #-24]	; 0xffffffe8
   15e98:	str	r1, [fp, #-28]	; 0xffffffe4
   15e9c:	str	r2, [fp, #-32]	; 0xffffffe0
   15ea0:	str	r3, [fp, #-36]	; 0xffffffdc
   15ea4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ea8:	ldr	r3, [r3]
   15eac:	str	r3, [fp, #-8]
   15eb0:	ldr	r3, [fp, #-8]
   15eb4:	asr	r3, r3, #1
   15eb8:	cmp	r3, #0
   15ebc:	bge	15ee4 <__assert_fail@plt+0x5028>
   15ec0:	ldr	r3, [fp, #-8]
   15ec4:	asr	r3, r3, #1
   15ec8:	rsb	r2, r3, #-2147483648	; 0x80000000
   15ecc:	ldr	r3, [fp, #-8]
   15ed0:	cmp	r2, r3
   15ed4:	movgt	r3, #1
   15ed8:	movle	r3, #0
   15edc:	uxtb	r3, r3
   15ee0:	b	15f38 <__assert_fail@plt+0x507c>
   15ee4:	ldr	r3, [fp, #-8]
   15ee8:	cmp	r3, #0
   15eec:	bge	15f14 <__assert_fail@plt+0x5058>
   15ef0:	ldr	r3, [fp, #-8]
   15ef4:	asr	r2, r3, #1
   15ef8:	ldr	r3, [fp, #-8]
   15efc:	rsb	r3, r3, #-2147483648	; 0x80000000
   15f00:	cmp	r2, r3
   15f04:	movlt	r3, #1
   15f08:	movge	r3, #0
   15f0c:	uxtb	r3, r3
   15f10:	b	15f38 <__assert_fail@plt+0x507c>
   15f14:	ldr	r3, [fp, #-8]
   15f18:	asr	r2, r3, #1
   15f1c:	mvn	r3, #-2147483648	; 0x80000000
   15f20:	sub	r3, r3, r2
   15f24:	ldr	r2, [fp, #-8]
   15f28:	cmp	r3, r2
   15f2c:	movlt	r3, #1
   15f30:	movge	r3, #0
   15f34:	uxtb	r3, r3
   15f38:	cmp	r3, #0
   15f3c:	beq	15f60 <__assert_fail@plt+0x50a4>
   15f40:	ldr	r3, [fp, #-8]
   15f44:	asr	r3, r3, #1
   15f48:	mov	r2, r3
   15f4c:	ldr	r3, [fp, #-8]
   15f50:	add	r3, r2, r3
   15f54:	str	r3, [fp, #-16]
   15f58:	mov	r3, #1
   15f5c:	b	15f7c <__assert_fail@plt+0x50c0>
   15f60:	ldr	r3, [fp, #-8]
   15f64:	asr	r3, r3, #1
   15f68:	mov	r2, r3
   15f6c:	ldr	r3, [fp, #-8]
   15f70:	add	r3, r2, r3
   15f74:	str	r3, [fp, #-16]
   15f78:	mov	r3, #0
   15f7c:	cmp	r3, #0
   15f80:	beq	15f8c <__assert_fail@plt+0x50d0>
   15f84:	mvn	r3, #-2147483648	; 0x80000000
   15f88:	str	r3, [fp, #-16]
   15f8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f90:	cmp	r3, #0
   15f94:	blt	15fb0 <__assert_fail@plt+0x50f4>
   15f98:	ldr	r3, [fp, #-16]
   15f9c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15fa0:	cmp	r2, r3
   15fa4:	bge	15fb0 <__assert_fail@plt+0x50f4>
   15fa8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fac:	str	r3, [fp, #-16]
   15fb0:	ldr	r3, [fp, #4]
   15fb4:	cmp	r3, #0
   15fb8:	bge	16048 <__assert_fail@plt+0x518c>
   15fbc:	ldr	r3, [fp, #-16]
   15fc0:	cmp	r3, #0
   15fc4:	bge	15ff4 <__assert_fail@plt+0x5138>
   15fc8:	ldr	r1, [fp, #4]
   15fcc:	mvn	r0, #-2147483648	; 0x80000000
   15fd0:	bl	175fc <__assert_fail@plt+0x6740>
   15fd4:	mov	r3, r0
   15fd8:	mov	r2, r3
   15fdc:	ldr	r3, [fp, #-16]
   15fe0:	cmp	r2, r3
   15fe4:	movgt	r3, #1
   15fe8:	movle	r3, #0
   15fec:	uxtb	r3, r3
   15ff0:	b	160e8 <__assert_fail@plt+0x522c>
   15ff4:	ldr	r3, [fp, #4]
   15ff8:	cmn	r3, #1
   15ffc:	bne	1601c <__assert_fail@plt+0x5160>
   16000:	ldr	r3, [fp, #-16]
   16004:	add	r3, r3, #-2147483648	; 0x80000000
   16008:	cmp	r3, #0
   1600c:	movgt	r3, #1
   16010:	movle	r3, #0
   16014:	uxtb	r3, r3
   16018:	b	160e8 <__assert_fail@plt+0x522c>
   1601c:	ldr	r1, [fp, #4]
   16020:	mov	r0, #-2147483648	; 0x80000000
   16024:	bl	175fc <__assert_fail@plt+0x6740>
   16028:	mov	r3, r0
   1602c:	mov	r2, r3
   16030:	ldr	r3, [fp, #-16]
   16034:	cmp	r2, r3
   16038:	movlt	r3, #1
   1603c:	movge	r3, #0
   16040:	uxtb	r3, r3
   16044:	b	160e8 <__assert_fail@plt+0x522c>
   16048:	ldr	r3, [fp, #4]
   1604c:	cmp	r3, #0
   16050:	beq	160e4 <__assert_fail@plt+0x5228>
   16054:	ldr	r3, [fp, #-16]
   16058:	cmp	r3, #0
   1605c:	bge	160b8 <__assert_fail@plt+0x51fc>
   16060:	ldr	r3, [fp, #-16]
   16064:	cmn	r3, #1
   16068:	bne	16088 <__assert_fail@plt+0x51cc>
   1606c:	ldr	r3, [fp, #4]
   16070:	add	r3, r3, #-2147483648	; 0x80000000
   16074:	cmp	r3, #0
   16078:	movgt	r3, #1
   1607c:	movle	r3, #0
   16080:	uxtb	r3, r3
   16084:	b	160e8 <__assert_fail@plt+0x522c>
   16088:	ldr	r3, [fp, #-16]
   1608c:	mov	r1, r3
   16090:	mov	r0, #-2147483648	; 0x80000000
   16094:	bl	175fc <__assert_fail@plt+0x6740>
   16098:	mov	r3, r0
   1609c:	mov	r2, r3
   160a0:	ldr	r3, [fp, #4]
   160a4:	cmp	r2, r3
   160a8:	movlt	r3, #1
   160ac:	movge	r3, #0
   160b0:	uxtb	r3, r3
   160b4:	b	160e8 <__assert_fail@plt+0x522c>
   160b8:	ldr	r1, [fp, #4]
   160bc:	mvn	r0, #-2147483648	; 0x80000000
   160c0:	bl	175fc <__assert_fail@plt+0x6740>
   160c4:	mov	r3, r0
   160c8:	mov	r2, r3
   160cc:	ldr	r3, [fp, #-16]
   160d0:	cmp	r2, r3
   160d4:	movlt	r3, #1
   160d8:	movge	r3, #0
   160dc:	uxtb	r3, r3
   160e0:	b	160e8 <__assert_fail@plt+0x522c>
   160e4:	mov	r3, #0
   160e8:	cmp	r3, #0
   160ec:	beq	1610c <__assert_fail@plt+0x5250>
   160f0:	ldr	r3, [fp, #-16]
   160f4:	mov	r2, r3
   160f8:	ldr	r3, [fp, #4]
   160fc:	mul	r3, r3, r2
   16100:	str	r3, [fp, #-20]	; 0xffffffec
   16104:	mov	r3, #1
   16108:	b	16124 <__assert_fail@plt+0x5268>
   1610c:	ldr	r3, [fp, #-16]
   16110:	mov	r2, r3
   16114:	ldr	r3, [fp, #4]
   16118:	mul	r3, r3, r2
   1611c:	str	r3, [fp, #-20]	; 0xffffffec
   16120:	mov	r3, #0
   16124:	cmp	r3, #0
   16128:	beq	16134 <__assert_fail@plt+0x5278>
   1612c:	mvn	r3, #-2147483648	; 0x80000000
   16130:	b	1614c <__assert_fail@plt+0x5290>
   16134:	ldr	r3, [fp, #-20]	; 0xffffffec
   16138:	cmp	r3, #63	; 0x3f
   1613c:	bgt	16148 <__assert_fail@plt+0x528c>
   16140:	mov	r3, #64	; 0x40
   16144:	b	1614c <__assert_fail@plt+0x5290>
   16148:	mov	r3, #0
   1614c:	str	r3, [fp, #-12]
   16150:	ldr	r3, [fp, #-12]
   16154:	cmp	r3, #0
   16158:	beq	16194 <__assert_fail@plt+0x52d8>
   1615c:	ldr	r1, [fp, #4]
   16160:	ldr	r0, [fp, #-12]
   16164:	bl	175fc <__assert_fail@plt+0x6740>
   16168:	mov	r3, r0
   1616c:	str	r3, [fp, #-16]
   16170:	ldr	r3, [fp, #-12]
   16174:	ldr	r1, [fp, #4]
   16178:	mov	r0, r3
   1617c:	bl	1781c <__assert_fail@plt+0x6960>
   16180:	mov	r3, r1
   16184:	mov	r2, r3
   16188:	ldr	r3, [fp, #-12]
   1618c:	sub	r3, r3, r2
   16190:	str	r3, [fp, #-20]	; 0xffffffec
   16194:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16198:	cmp	r3, #0
   1619c:	bne	161ac <__assert_fail@plt+0x52f0>
   161a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   161a4:	mov	r2, #0
   161a8:	str	r2, [r3]
   161ac:	ldr	r2, [fp, #-16]
   161b0:	ldr	r3, [fp, #-8]
   161b4:	sub	r2, r2, r3
   161b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161bc:	cmp	r2, r3
   161c0:	bge	163f8 <__assert_fail@plt+0x553c>
   161c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161c8:	cmp	r3, #0
   161cc:	bge	161f0 <__assert_fail@plt+0x5334>
   161d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   161d4:	rsb	r2, r3, #-2147483648	; 0x80000000
   161d8:	ldr	r3, [fp, #-8]
   161dc:	cmp	r2, r3
   161e0:	movgt	r3, #1
   161e4:	movle	r3, #0
   161e8:	uxtb	r3, r3
   161ec:	b	1623c <__assert_fail@plt+0x5380>
   161f0:	ldr	r3, [fp, #-8]
   161f4:	cmp	r3, #0
   161f8:	bge	1621c <__assert_fail@plt+0x5360>
   161fc:	ldr	r3, [fp, #-8]
   16200:	rsb	r2, r3, #-2147483648	; 0x80000000
   16204:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16208:	cmp	r2, r3
   1620c:	movgt	r3, #1
   16210:	movle	r3, #0
   16214:	uxtb	r3, r3
   16218:	b	1623c <__assert_fail@plt+0x5380>
   1621c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16220:	mvn	r3, #-2147483648	; 0x80000000
   16224:	sub	r3, r3, r2
   16228:	ldr	r2, [fp, #-8]
   1622c:	cmp	r3, r2
   16230:	movlt	r3, #1
   16234:	movge	r3, #0
   16238:	uxtb	r3, r3
   1623c:	cmp	r3, #0
   16240:	beq	16258 <__assert_fail@plt+0x539c>
   16244:	ldr	r2, [fp, #-8]
   16248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1624c:	add	r3, r2, r3
   16250:	str	r3, [fp, #-16]
   16254:	b	163f4 <__assert_fail@plt+0x5538>
   16258:	ldr	r2, [fp, #-8]
   1625c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16260:	add	r3, r2, r3
   16264:	str	r3, [fp, #-16]
   16268:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1626c:	cmp	r3, #0
   16270:	blt	16284 <__assert_fail@plt+0x53c8>
   16274:	ldr	r3, [fp, #-16]
   16278:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1627c:	cmp	r2, r3
   16280:	blt	163f4 <__assert_fail@plt+0x5538>
   16284:	ldr	r3, [fp, #4]
   16288:	cmp	r3, #0
   1628c:	bge	1631c <__assert_fail@plt+0x5460>
   16290:	ldr	r3, [fp, #-16]
   16294:	cmp	r3, #0
   16298:	bge	162c8 <__assert_fail@plt+0x540c>
   1629c:	ldr	r1, [fp, #4]
   162a0:	mvn	r0, #-2147483648	; 0x80000000
   162a4:	bl	175fc <__assert_fail@plt+0x6740>
   162a8:	mov	r3, r0
   162ac:	mov	r2, r3
   162b0:	ldr	r3, [fp, #-16]
   162b4:	cmp	r2, r3
   162b8:	movgt	r3, #1
   162bc:	movle	r3, #0
   162c0:	uxtb	r3, r3
   162c4:	b	163bc <__assert_fail@plt+0x5500>
   162c8:	ldr	r3, [fp, #4]
   162cc:	cmn	r3, #1
   162d0:	bne	162f0 <__assert_fail@plt+0x5434>
   162d4:	ldr	r3, [fp, #-16]
   162d8:	add	r3, r3, #-2147483648	; 0x80000000
   162dc:	cmp	r3, #0
   162e0:	movgt	r3, #1
   162e4:	movle	r3, #0
   162e8:	uxtb	r3, r3
   162ec:	b	163bc <__assert_fail@plt+0x5500>
   162f0:	ldr	r1, [fp, #4]
   162f4:	mov	r0, #-2147483648	; 0x80000000
   162f8:	bl	175fc <__assert_fail@plt+0x6740>
   162fc:	mov	r3, r0
   16300:	mov	r2, r3
   16304:	ldr	r3, [fp, #-16]
   16308:	cmp	r2, r3
   1630c:	movlt	r3, #1
   16310:	movge	r3, #0
   16314:	uxtb	r3, r3
   16318:	b	163bc <__assert_fail@plt+0x5500>
   1631c:	ldr	r3, [fp, #4]
   16320:	cmp	r3, #0
   16324:	beq	163b8 <__assert_fail@plt+0x54fc>
   16328:	ldr	r3, [fp, #-16]
   1632c:	cmp	r3, #0
   16330:	bge	1638c <__assert_fail@plt+0x54d0>
   16334:	ldr	r3, [fp, #-16]
   16338:	cmn	r3, #1
   1633c:	bne	1635c <__assert_fail@plt+0x54a0>
   16340:	ldr	r3, [fp, #4]
   16344:	add	r3, r3, #-2147483648	; 0x80000000
   16348:	cmp	r3, #0
   1634c:	movgt	r3, #1
   16350:	movle	r3, #0
   16354:	uxtb	r3, r3
   16358:	b	163bc <__assert_fail@plt+0x5500>
   1635c:	ldr	r3, [fp, #-16]
   16360:	mov	r1, r3
   16364:	mov	r0, #-2147483648	; 0x80000000
   16368:	bl	175fc <__assert_fail@plt+0x6740>
   1636c:	mov	r3, r0
   16370:	mov	r2, r3
   16374:	ldr	r3, [fp, #4]
   16378:	cmp	r2, r3
   1637c:	movlt	r3, #1
   16380:	movge	r3, #0
   16384:	uxtb	r3, r3
   16388:	b	163bc <__assert_fail@plt+0x5500>
   1638c:	ldr	r1, [fp, #4]
   16390:	mvn	r0, #-2147483648	; 0x80000000
   16394:	bl	175fc <__assert_fail@plt+0x6740>
   16398:	mov	r3, r0
   1639c:	mov	r2, r3
   163a0:	ldr	r3, [fp, #-16]
   163a4:	cmp	r2, r3
   163a8:	movlt	r3, #1
   163ac:	movge	r3, #0
   163b0:	uxtb	r3, r3
   163b4:	b	163bc <__assert_fail@plt+0x5500>
   163b8:	mov	r3, #0
   163bc:	cmp	r3, #0
   163c0:	beq	163dc <__assert_fail@plt+0x5520>
   163c4:	ldr	r3, [fp, #-16]
   163c8:	mov	r2, r3
   163cc:	ldr	r3, [fp, #4]
   163d0:	mul	r3, r3, r2
   163d4:	str	r3, [fp, #-20]	; 0xffffffec
   163d8:	b	163f4 <__assert_fail@plt+0x5538>
   163dc:	ldr	r3, [fp, #-16]
   163e0:	mov	r2, r3
   163e4:	ldr	r3, [fp, #4]
   163e8:	mul	r3, r3, r2
   163ec:	str	r3, [fp, #-20]	; 0xffffffec
   163f0:	b	163f8 <__assert_fail@plt+0x553c>
   163f4:	bl	1661c <__assert_fail@plt+0x5760>
   163f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   163fc:	mov	r1, r3
   16400:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16404:	bl	15b90 <__assert_fail@plt+0x4cd4>
   16408:	str	r0, [fp, #-24]	; 0xffffffe8
   1640c:	ldr	r2, [fp, #-16]
   16410:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16414:	str	r2, [r3]
   16418:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1641c:	mov	r0, r3
   16420:	sub	sp, fp, #4
   16424:	pop	{fp, pc}
   16428:	push	{fp, lr}
   1642c:	add	fp, sp, #4
   16430:	sub	sp, sp, #8
   16434:	str	r0, [fp, #-8]
   16438:	mov	r1, #1
   1643c:	ldr	r0, [fp, #-8]
   16440:	bl	16480 <__assert_fail@plt+0x55c4>
   16444:	mov	r3, r0
   16448:	mov	r0, r3
   1644c:	sub	sp, fp, #4
   16450:	pop	{fp, pc}
   16454:	push	{fp, lr}
   16458:	add	fp, sp, #4
   1645c:	sub	sp, sp, #8
   16460:	str	r0, [fp, #-8]
   16464:	mov	r1, #1
   16468:	ldr	r0, [fp, #-8]
   1646c:	bl	164bc <__assert_fail@plt+0x5600>
   16470:	mov	r3, r0
   16474:	mov	r0, r3
   16478:	sub	sp, fp, #4
   1647c:	pop	{fp, pc}
   16480:	push	{fp, lr}
   16484:	add	fp, sp, #4
   16488:	sub	sp, sp, #8
   1648c:	str	r0, [fp, #-8]
   16490:	str	r1, [fp, #-12]
   16494:	ldr	r1, [fp, #-12]
   16498:	ldr	r0, [fp, #-8]
   1649c:	bl	16658 <__assert_fail@plt+0x579c>
   164a0:	mov	r3, r0
   164a4:	mov	r0, r3
   164a8:	bl	15ad0 <__assert_fail@plt+0x4c14>
   164ac:	mov	r3, r0
   164b0:	mov	r0, r3
   164b4:	sub	sp, fp, #4
   164b8:	pop	{fp, pc}
   164bc:	push	{fp, lr}
   164c0:	add	fp, sp, #4
   164c4:	sub	sp, sp, #8
   164c8:	str	r0, [fp, #-8]
   164cc:	str	r1, [fp, #-12]
   164d0:	ldr	r1, [fp, #-12]
   164d4:	ldr	r0, [fp, #-8]
   164d8:	bl	16aa4 <__assert_fail@plt+0x5be8>
   164dc:	mov	r3, r0
   164e0:	mov	r0, r3
   164e4:	bl	15ad0 <__assert_fail@plt+0x4c14>
   164e8:	mov	r3, r0
   164ec:	mov	r0, r3
   164f0:	sub	sp, fp, #4
   164f4:	pop	{fp, pc}
   164f8:	push	{fp, lr}
   164fc:	add	fp, sp, #4
   16500:	sub	sp, sp, #8
   16504:	str	r0, [fp, #-8]
   16508:	str	r1, [fp, #-12]
   1650c:	ldr	r0, [fp, #-12]
   16510:	bl	15b00 <__assert_fail@plt+0x4c44>
   16514:	mov	r3, r0
   16518:	ldr	r2, [fp, #-12]
   1651c:	ldr	r1, [fp, #-8]
   16520:	mov	r0, r3
   16524:	bl	10cd0 <memcpy@plt>
   16528:	mov	r3, r0
   1652c:	mov	r0, r3
   16530:	sub	sp, fp, #4
   16534:	pop	{fp, pc}
   16538:	push	{fp, lr}
   1653c:	add	fp, sp, #4
   16540:	sub	sp, sp, #8
   16544:	str	r0, [fp, #-8]
   16548:	str	r1, [fp, #-12]
   1654c:	ldr	r0, [fp, #-12]
   16550:	bl	15b34 <__assert_fail@plt+0x4c78>
   16554:	mov	r3, r0
   16558:	mov	r0, r3
   1655c:	ldr	r3, [fp, #-12]
   16560:	mov	r2, r3
   16564:	ldr	r1, [fp, #-8]
   16568:	bl	10cd0 <memcpy@plt>
   1656c:	mov	r3, r0
   16570:	mov	r0, r3
   16574:	sub	sp, fp, #4
   16578:	pop	{fp, pc}
   1657c:	push	{fp, lr}
   16580:	add	fp, sp, #4
   16584:	sub	sp, sp, #16
   16588:	str	r0, [fp, #-16]
   1658c:	str	r1, [fp, #-20]	; 0xffffffec
   16590:	ldr	r3, [fp, #-20]	; 0xffffffec
   16594:	add	r3, r3, #1
   16598:	mov	r0, r3
   1659c:	bl	15b34 <__assert_fail@plt+0x4c78>
   165a0:	mov	r3, r0
   165a4:	str	r3, [fp, #-8]
   165a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   165ac:	ldr	r2, [fp, #-8]
   165b0:	add	r3, r2, r3
   165b4:	mov	r2, #0
   165b8:	strb	r2, [r3]
   165bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   165c0:	mov	r2, r3
   165c4:	ldr	r1, [fp, #-16]
   165c8:	ldr	r0, [fp, #-8]
   165cc:	bl	10cd0 <memcpy@plt>
   165d0:	mov	r3, r0
   165d4:	mov	r0, r3
   165d8:	sub	sp, fp, #4
   165dc:	pop	{fp, pc}
   165e0:	push	{fp, lr}
   165e4:	add	fp, sp, #4
   165e8:	sub	sp, sp, #8
   165ec:	str	r0, [fp, #-8]
   165f0:	ldr	r0, [fp, #-8]
   165f4:	bl	10de4 <strlen@plt>
   165f8:	mov	r3, r0
   165fc:	add	r3, r3, #1
   16600:	mov	r1, r3
   16604:	ldr	r0, [fp, #-8]
   16608:	bl	164f8 <__assert_fail@plt+0x563c>
   1660c:	mov	r3, r0
   16610:	mov	r0, r3
   16614:	sub	sp, fp, #4
   16618:	pop	{fp, pc}
   1661c:	push	{r4, r5, fp, lr}
   16620:	add	fp, sp, #12
   16624:	ldr	r3, [pc, #32]	; 1664c <__assert_fail@plt+0x5790>
   16628:	ldr	r4, [r3]
   1662c:	ldr	r0, [pc, #28]	; 16650 <__assert_fail@plt+0x5794>
   16630:	bl	10dd8 <gettext@plt>
   16634:	mov	r3, r0
   16638:	ldr	r2, [pc, #20]	; 16654 <__assert_fail@plt+0x5798>
   1663c:	mov	r1, #0
   16640:	mov	r0, r4
   16644:	bl	10d78 <error@plt>
   16648:	bl	10e98 <abort@plt>
   1664c:	strdeq	r9, [r2], -r0
   16650:	ldrdeq	r8, [r1], -r0
   16654:	andeq	r8, r1, r4, ror #13
   16658:	push	{r4, r5, fp, lr}
   1665c:	add	fp, sp, #12
   16660:	sub	sp, sp, #16
   16664:	str	r0, [fp, #-24]	; 0xffffffe8
   16668:	str	r1, [fp, #-28]	; 0xffffffe4
   1666c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16670:	cmp	r3, #0
   16674:	beq	16684 <__assert_fail@plt+0x57c8>
   16678:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1667c:	cmp	r3, #0
   16680:	bne	16694 <__assert_fail@plt+0x57d8>
   16684:	mov	r3, #1
   16688:	str	r3, [fp, #-28]	; 0xffffffe4
   1668c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16690:	str	r3, [fp, #-24]	; 0xffffffe8
   16694:	mov	r1, #0
   16698:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1669c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   166a0:	umull	r2, r3, r2, r3
   166a4:	mov	r4, r3
   166a8:	mov	r5, #0
   166ac:	cmp	r4, #0
   166b0:	beq	166b8 <__assert_fail@plt+0x57fc>
   166b4:	mov	r1, #1
   166b8:	cmp	r2, #0
   166bc:	bge	166c4 <__assert_fail@plt+0x5808>
   166c0:	mov	r1, #1
   166c4:	mov	r3, r2
   166c8:	str	r3, [fp, #-20]	; 0xffffffec
   166cc:	mov	r3, r1
   166d0:	and	r3, r3, #1
   166d4:	uxtb	r3, r3
   166d8:	cmp	r3, #0
   166dc:	beq	166f8 <__assert_fail@plt+0x583c>
   166e0:	bl	10dfc <__errno_location@plt>
   166e4:	mov	r2, r0
   166e8:	mov	r3, #12
   166ec:	str	r3, [r2]
   166f0:	mov	r3, #0
   166f4:	b	16710 <__assert_fail@plt+0x5854>
   166f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   166fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16700:	bl	10c64 <calloc@plt>
   16704:	mov	r3, r0
   16708:	str	r3, [fp, #-16]
   1670c:	ldr	r3, [fp, #-16]
   16710:	mov	r0, r3
   16714:	sub	sp, fp, #12
   16718:	pop	{r4, r5, fp, pc}
   1671c:	push	{r4, r5, fp, lr}
   16720:	add	fp, sp, #12
   16724:	sub	sp, sp, #16
   16728:	str	r0, [fp, #-24]	; 0xffffffe8
   1672c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16730:	cmp	r3, #0
   16734:	bne	16740 <__assert_fail@plt+0x5884>
   16738:	mov	r3, #1
   1673c:	str	r3, [fp, #-24]	; 0xffffffe8
   16740:	mov	r1, #0
   16744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16748:	mov	r2, r3
   1674c:	mov	r3, #0
   16750:	mov	r4, r3
   16754:	mov	r5, #0
   16758:	cmp	r4, #0
   1675c:	beq	16764 <__assert_fail@plt+0x58a8>
   16760:	mov	r1, #1
   16764:	cmp	r2, #0
   16768:	bge	16770 <__assert_fail@plt+0x58b4>
   1676c:	mov	r1, #1
   16770:	mov	r3, r2
   16774:	str	r3, [fp, #-20]	; 0xffffffec
   16778:	mov	r3, r1
   1677c:	and	r3, r3, #1
   16780:	uxtb	r3, r3
   16784:	cmp	r3, #0
   16788:	beq	167a4 <__assert_fail@plt+0x58e8>
   1678c:	bl	10dfc <__errno_location@plt>
   16790:	mov	r2, r0
   16794:	mov	r3, #12
   16798:	str	r3, [r2]
   1679c:	mov	r3, #0
   167a0:	b	167b8 <__assert_fail@plt+0x58fc>
   167a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167a8:	bl	10d84 <malloc@plt>
   167ac:	mov	r3, r0
   167b0:	str	r3, [fp, #-16]
   167b4:	ldr	r3, [fp, #-16]
   167b8:	mov	r0, r3
   167bc:	sub	sp, fp, #12
   167c0:	pop	{r4, r5, fp, pc}
   167c4:	push	{r4, r5, fp, lr}
   167c8:	add	fp, sp, #12
   167cc:	sub	sp, sp, #16
   167d0:	str	r0, [fp, #-24]	; 0xffffffe8
   167d4:	str	r1, [fp, #-28]	; 0xffffffe4
   167d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167dc:	cmp	r3, #0
   167e0:	bne	167f4 <__assert_fail@plt+0x5938>
   167e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   167e8:	bl	1671c <__assert_fail@plt+0x5860>
   167ec:	mov	r3, r0
   167f0:	b	16888 <__assert_fail@plt+0x59cc>
   167f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   167f8:	cmp	r3, #0
   167fc:	bne	16810 <__assert_fail@plt+0x5954>
   16800:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16804:	bl	12a48 <__assert_fail@plt+0x1b8c>
   16808:	mov	r3, #0
   1680c:	b	16888 <__assert_fail@plt+0x59cc>
   16810:	mov	r1, #0
   16814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16818:	mov	r2, r3
   1681c:	mov	r3, #0
   16820:	mov	r4, r3
   16824:	mov	r5, #0
   16828:	cmp	r4, #0
   1682c:	beq	16834 <__assert_fail@plt+0x5978>
   16830:	mov	r1, #1
   16834:	cmp	r2, #0
   16838:	bge	16840 <__assert_fail@plt+0x5984>
   1683c:	mov	r1, #1
   16840:	mov	r3, r2
   16844:	str	r3, [fp, #-20]	; 0xffffffec
   16848:	mov	r3, r1
   1684c:	and	r3, r3, #1
   16850:	uxtb	r3, r3
   16854:	cmp	r3, #0
   16858:	beq	16874 <__assert_fail@plt+0x59b8>
   1685c:	bl	10dfc <__errno_location@plt>
   16860:	mov	r2, r0
   16864:	mov	r3, #12
   16868:	str	r3, [r2]
   1686c:	mov	r3, #0
   16870:	b	16888 <__assert_fail@plt+0x59cc>
   16874:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1687c:	bl	10d0c <realloc@plt>
   16880:	str	r0, [fp, #-16]
   16884:	ldr	r3, [fp, #-16]
   16888:	mov	r0, r3
   1688c:	sub	sp, fp, #12
   16890:	pop	{r4, r5, fp, pc}
   16894:	push	{r4, r5, fp, lr}
   16898:	add	fp, sp, #12
   1689c:	sub	sp, sp, #16
   168a0:	str	r0, [fp, #-24]	; 0xffffffe8
   168a4:	str	r1, [fp, #-28]	; 0xffffffe4
   168a8:	ldr	r5, [fp, #-24]	; 0xffffffe8
   168ac:	ldr	r4, [fp, #-28]	; 0xffffffe4
   168b0:	cmp	r5, r4
   168b4:	bne	168c0 <__assert_fail@plt+0x5a04>
   168b8:	mov	r3, #0
   168bc:	b	16920 <__assert_fail@plt+0x5a64>
   168c0:	ldrb	r3, [r5]
   168c4:	mov	r0, r3
   168c8:	bl	1716c <__assert_fail@plt+0x62b0>
   168cc:	mov	r3, r0
   168d0:	strb	r3, [fp, #-13]
   168d4:	ldrb	r3, [r4]
   168d8:	mov	r0, r3
   168dc:	bl	1716c <__assert_fail@plt+0x62b0>
   168e0:	mov	r3, r0
   168e4:	strb	r3, [fp, #-14]
   168e8:	ldrb	r3, [fp, #-13]
   168ec:	cmp	r3, #0
   168f0:	beq	16910 <__assert_fail@plt+0x5a54>
   168f4:	add	r5, r5, #1
   168f8:	add	r4, r4, #1
   168fc:	ldrb	r2, [fp, #-13]
   16900:	ldrb	r3, [fp, #-14]
   16904:	cmp	r2, r3
   16908:	beq	168c0 <__assert_fail@plt+0x5a04>
   1690c:	b	16914 <__assert_fail@plt+0x5a58>
   16910:	nop			; (mov r0, r0)
   16914:	ldrb	r2, [fp, #-13]
   16918:	ldrb	r3, [fp, #-14]
   1691c:	sub	r3, r2, r3
   16920:	mov	r0, r3
   16924:	sub	sp, fp, #12
   16928:	pop	{r4, r5, fp, pc}
   1692c:	push	{fp, lr}
   16930:	add	fp, sp, #4
   16934:	sub	sp, sp, #16
   16938:	str	r0, [fp, #-16]
   1693c:	ldr	r0, [fp, #-16]
   16940:	bl	10d54 <__fpending@plt>
   16944:	mov	r3, r0
   16948:	cmp	r3, #0
   1694c:	movne	r3, #1
   16950:	moveq	r3, #0
   16954:	strb	r3, [fp, #-5]
   16958:	ldr	r0, [fp, #-16]
   1695c:	bl	10d60 <ferror_unlocked@plt>
   16960:	mov	r3, r0
   16964:	cmp	r3, #0
   16968:	movne	r3, #1
   1696c:	moveq	r3, #0
   16970:	strb	r3, [fp, #-6]
   16974:	ldr	r0, [fp, #-16]
   16978:	bl	128a8 <__assert_fail@plt+0x19ec>
   1697c:	mov	r3, r0
   16980:	cmp	r3, #0
   16984:	movne	r3, #1
   16988:	moveq	r3, #0
   1698c:	strb	r3, [fp, #-7]
   16990:	ldrb	r3, [fp, #-6]
   16994:	cmp	r3, #0
   16998:	bne	169c8 <__assert_fail@plt+0x5b0c>
   1699c:	ldrb	r3, [fp, #-7]
   169a0:	cmp	r3, #0
   169a4:	beq	169f4 <__assert_fail@plt+0x5b38>
   169a8:	ldrb	r3, [fp, #-5]
   169ac:	cmp	r3, #0
   169b0:	bne	169c8 <__assert_fail@plt+0x5b0c>
   169b4:	bl	10dfc <__errno_location@plt>
   169b8:	mov	r3, r0
   169bc:	ldr	r3, [r3]
   169c0:	cmp	r3, #9
   169c4:	beq	169f4 <__assert_fail@plt+0x5b38>
   169c8:	ldrb	r3, [fp, #-7]
   169cc:	eor	r3, r3, #1
   169d0:	uxtb	r3, r3
   169d4:	cmp	r3, #0
   169d8:	beq	169ec <__assert_fail@plt+0x5b30>
   169dc:	bl	10dfc <__errno_location@plt>
   169e0:	mov	r2, r0
   169e4:	mov	r3, #0
   169e8:	str	r3, [r2]
   169ec:	mvn	r3, #0
   169f0:	b	169f8 <__assert_fail@plt+0x5b3c>
   169f4:	mov	r3, #0
   169f8:	mov	r0, r3
   169fc:	sub	sp, fp, #4
   16a00:	pop	{fp, pc}
   16a04:	push	{fp, lr}
   16a08:	add	fp, sp, #4
   16a0c:	bl	10dfc <__errno_location@plt>
   16a10:	mov	r2, r0
   16a14:	mov	r3, #12
   16a18:	str	r3, [r2]
   16a1c:	mov	r3, #0
   16a20:	mov	r0, r3
   16a24:	pop	{fp, pc}
   16a28:	push	{fp, lr}
   16a2c:	add	fp, sp, #4
   16a30:	sub	sp, sp, #8
   16a34:	str	r0, [fp, #-8]
   16a38:	ldr	r3, [fp, #-8]
   16a3c:	mov	r0, r3
   16a40:	bl	1671c <__assert_fail@plt+0x5860>
   16a44:	mov	r3, r0
   16a48:	mov	r0, r3
   16a4c:	sub	sp, fp, #4
   16a50:	pop	{fp, pc}
   16a54:	push	{fp, lr}
   16a58:	add	fp, sp, #4
   16a5c:	sub	sp, sp, #8
   16a60:	str	r0, [fp, #-8]
   16a64:	str	r1, [fp, #-12]
   16a68:	ldr	r3, [fp, #-12]
   16a6c:	cmp	r3, #0
   16a70:	moveq	r3, #1
   16a74:	movne	r3, #0
   16a78:	uxtb	r3, r3
   16a7c:	mov	r2, r3
   16a80:	ldr	r3, [fp, #-12]
   16a84:	orr	r3, r2, r3
   16a88:	mov	r1, r3
   16a8c:	ldr	r0, [fp, #-8]
   16a90:	bl	167c4 <__assert_fail@plt+0x5908>
   16a94:	mov	r3, r0
   16a98:	mov	r0, r3
   16a9c:	sub	sp, fp, #4
   16aa0:	pop	{fp, pc}
   16aa4:	push	{fp, lr}
   16aa8:	add	fp, sp, #4
   16aac:	sub	sp, sp, #8
   16ab0:	str	r0, [fp, #-8]
   16ab4:	str	r1, [fp, #-12]
   16ab8:	ldr	r3, [fp, #-8]
   16abc:	ldr	r2, [fp, #-12]
   16ac0:	mov	r1, r2
   16ac4:	mov	r0, r3
   16ac8:	bl	16658 <__assert_fail@plt+0x579c>
   16acc:	mov	r3, r0
   16ad0:	mov	r0, r3
   16ad4:	sub	sp, fp, #4
   16ad8:	pop	{fp, pc}
   16adc:	push	{fp, lr}
   16ae0:	add	fp, sp, #4
   16ae4:	sub	sp, sp, #16
   16ae8:	str	r0, [fp, #-8]
   16aec:	str	r1, [fp, #-12]
   16af0:	str	r2, [fp, #-16]
   16af4:	ldr	r3, [fp, #-12]
   16af8:	cmp	r3, #0
   16afc:	beq	16b0c <__assert_fail@plt+0x5c50>
   16b00:	ldr	r3, [fp, #-16]
   16b04:	cmp	r3, #0
   16b08:	bne	16b1c <__assert_fail@plt+0x5c60>
   16b0c:	mov	r3, #1
   16b10:	str	r3, [fp, #-16]
   16b14:	ldr	r3, [fp, #-16]
   16b18:	str	r3, [fp, #-12]
   16b1c:	ldr	r3, [fp, #-12]
   16b20:	ldr	r2, [fp, #-16]
   16b24:	mov	r1, r3
   16b28:	ldr	r0, [fp, #-8]
   16b2c:	bl	16c48 <__assert_fail@plt+0x5d8c>
   16b30:	mov	r3, r0
   16b34:	mov	r0, r3
   16b38:	sub	sp, fp, #4
   16b3c:	pop	{fp, pc}
   16b40:	push	{fp, lr}
   16b44:	add	fp, sp, #4
   16b48:	sub	sp, sp, #8
   16b4c:	mov	r0, #14
   16b50:	bl	10e5c <nl_langinfo@plt>
   16b54:	str	r0, [fp, #-8]
   16b58:	ldr	r3, [fp, #-8]
   16b5c:	cmp	r3, #0
   16b60:	bne	16b6c <__assert_fail@plt+0x5cb0>
   16b64:	ldr	r3, [pc, #40]	; 16b94 <__assert_fail@plt+0x5cd8>
   16b68:	str	r3, [fp, #-8]
   16b6c:	ldr	r3, [fp, #-8]
   16b70:	ldrb	r3, [r3]
   16b74:	cmp	r3, #0
   16b78:	bne	16b84 <__assert_fail@plt+0x5cc8>
   16b7c:	ldr	r3, [pc, #20]	; 16b98 <__assert_fail@plt+0x5cdc>
   16b80:	str	r3, [fp, #-8]
   16b84:	ldr	r3, [fp, #-8]
   16b88:	mov	r0, r3
   16b8c:	sub	sp, fp, #4
   16b90:	pop	{fp, pc}
   16b94:	andeq	r8, r1, r8, ror #13
   16b98:	andeq	r8, r1, ip, ror #13
   16b9c:	push	{fp, lr}
   16ba0:	add	fp, sp, #4
   16ba4:	sub	sp, sp, #32
   16ba8:	str	r0, [fp, #-24]	; 0xffffffe8
   16bac:	str	r1, [fp, #-28]	; 0xffffffe4
   16bb0:	str	r2, [fp, #-32]	; 0xffffffe0
   16bb4:	str	r3, [fp, #-36]	; 0xffffffdc
   16bb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bbc:	cmp	r3, #0
   16bc0:	bne	16bcc <__assert_fail@plt+0x5d10>
   16bc4:	sub	r3, fp, #16
   16bc8:	str	r3, [fp, #-24]	; 0xffffffe8
   16bcc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16bd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16bd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bdc:	bl	10d6c <mbrtowc@plt>
   16be0:	str	r0, [fp, #-8]
   16be4:	ldr	r3, [fp, #-8]
   16be8:	cmn	r3, #3
   16bec:	bls	16c38 <__assert_fail@plt+0x5d7c>
   16bf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bf4:	cmp	r3, #0
   16bf8:	beq	16c38 <__assert_fail@plt+0x5d7c>
   16bfc:	mov	r0, #0
   16c00:	bl	171ec <__assert_fail@plt+0x6330>
   16c04:	mov	r3, r0
   16c08:	eor	r3, r3, #1
   16c0c:	uxtb	r3, r3
   16c10:	cmp	r3, #0
   16c14:	beq	16c38 <__assert_fail@plt+0x5d7c>
   16c18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c1c:	ldrb	r3, [r3]
   16c20:	strb	r3, [fp, #-9]
   16c24:	ldrb	r2, [fp, #-9]
   16c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c2c:	str	r2, [r3]
   16c30:	mov	r3, #1
   16c34:	b	16c3c <__assert_fail@plt+0x5d80>
   16c38:	ldr	r3, [fp, #-8]
   16c3c:	mov	r0, r3
   16c40:	sub	sp, fp, #4
   16c44:	pop	{fp, pc}
   16c48:	push	{fp, lr}
   16c4c:	add	fp, sp, #4
   16c50:	sub	sp, sp, #24
   16c54:	str	r0, [fp, #-16]
   16c58:	str	r1, [fp, #-20]	; 0xffffffec
   16c5c:	str	r2, [fp, #-24]	; 0xffffffe8
   16c60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c64:	cmp	r3, #0
   16c68:	beq	16ca4 <__assert_fail@plt+0x5de8>
   16c6c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c70:	mvn	r0, #0
   16c74:	bl	173f0 <__assert_fail@plt+0x6534>
   16c78:	mov	r3, r0
   16c7c:	mov	r2, r3
   16c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c84:	cmp	r2, r3
   16c88:	bcs	16ca4 <__assert_fail@plt+0x5de8>
   16c8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16c94:	mul	r3, r2, r3
   16c98:	str	r3, [fp, #-8]
   16c9c:	mov	r3, #1
   16ca0:	b	16cb8 <__assert_fail@plt+0x5dfc>
   16ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ca8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16cac:	mul	r3, r2, r3
   16cb0:	str	r3, [fp, #-8]
   16cb4:	mov	r3, #0
   16cb8:	cmp	r3, #0
   16cbc:	beq	16cd8 <__assert_fail@plt+0x5e1c>
   16cc0:	bl	10dfc <__errno_location@plt>
   16cc4:	mov	r2, r0
   16cc8:	mov	r3, #12
   16ccc:	str	r3, [r2]
   16cd0:	mov	r3, #0
   16cd4:	b	16cec <__assert_fail@plt+0x5e30>
   16cd8:	ldr	r3, [fp, #-8]
   16cdc:	mov	r1, r3
   16ce0:	ldr	r0, [fp, #-16]
   16ce4:	bl	167c4 <__assert_fail@plt+0x5908>
   16ce8:	mov	r3, r0
   16cec:	mov	r0, r3
   16cf0:	sub	sp, fp, #4
   16cf4:	pop	{fp, pc}
   16cf8:	push	{fp}		; (str fp, [sp, #-4]!)
   16cfc:	add	fp, sp, #0
   16d00:	sub	sp, sp, #12
   16d04:	str	r0, [fp, #-8]
   16d08:	ldr	r3, [fp, #-8]
   16d0c:	cmp	r3, #90	; 0x5a
   16d10:	bgt	16d2c <__assert_fail@plt+0x5e70>
   16d14:	cmp	r3, #65	; 0x41
   16d18:	bge	16d38 <__assert_fail@plt+0x5e7c>
   16d1c:	sub	r3, r3, #48	; 0x30
   16d20:	cmp	r3, #9
   16d24:	bhi	16d40 <__assert_fail@plt+0x5e84>
   16d28:	b	16d38 <__assert_fail@plt+0x5e7c>
   16d2c:	sub	r3, r3, #97	; 0x61
   16d30:	cmp	r3, #25
   16d34:	bhi	16d40 <__assert_fail@plt+0x5e84>
   16d38:	mov	r3, #1
   16d3c:	b	16d44 <__assert_fail@plt+0x5e88>
   16d40:	mov	r3, #0
   16d44:	mov	r0, r3
   16d48:	add	sp, fp, #0
   16d4c:	pop	{fp}		; (ldr fp, [sp], #4)
   16d50:	bx	lr
   16d54:	push	{fp}		; (str fp, [sp, #-4]!)
   16d58:	add	fp, sp, #0
   16d5c:	sub	sp, sp, #12
   16d60:	str	r0, [fp, #-8]
   16d64:	ldr	r3, [fp, #-8]
   16d68:	cmp	r3, #65	; 0x41
   16d6c:	blt	16d8c <__assert_fail@plt+0x5ed0>
   16d70:	cmp	r3, #90	; 0x5a
   16d74:	ble	16d84 <__assert_fail@plt+0x5ec8>
   16d78:	sub	r3, r3, #97	; 0x61
   16d7c:	cmp	r3, #25
   16d80:	bhi	16d8c <__assert_fail@plt+0x5ed0>
   16d84:	mov	r3, #1
   16d88:	b	16d90 <__assert_fail@plt+0x5ed4>
   16d8c:	mov	r3, #0
   16d90:	mov	r0, r3
   16d94:	add	sp, fp, #0
   16d98:	pop	{fp}		; (ldr fp, [sp], #4)
   16d9c:	bx	lr
   16da0:	push	{fp}		; (str fp, [sp, #-4]!)
   16da4:	add	fp, sp, #0
   16da8:	sub	sp, sp, #12
   16dac:	str	r0, [fp, #-8]
   16db0:	ldr	r3, [fp, #-8]
   16db4:	add	r3, r3, #0
   16db8:	cmp	r3, #127	; 0x7f
   16dbc:	bhi	16dc8 <__assert_fail@plt+0x5f0c>
   16dc0:	mov	r3, #1
   16dc4:	b	16dcc <__assert_fail@plt+0x5f10>
   16dc8:	mov	r3, #0
   16dcc:	mov	r0, r3
   16dd0:	add	sp, fp, #0
   16dd4:	pop	{fp}		; (ldr fp, [sp], #4)
   16dd8:	bx	lr
   16ddc:	push	{fp}		; (str fp, [sp, #-4]!)
   16de0:	add	fp, sp, #0
   16de4:	sub	sp, sp, #12
   16de8:	str	r0, [fp, #-8]
   16dec:	ldr	r3, [fp, #-8]
   16df0:	cmp	r3, #32
   16df4:	beq	16e04 <__assert_fail@plt+0x5f48>
   16df8:	ldr	r3, [fp, #-8]
   16dfc:	cmp	r3, #9
   16e00:	bne	16e0c <__assert_fail@plt+0x5f50>
   16e04:	mov	r3, #1
   16e08:	b	16e10 <__assert_fail@plt+0x5f54>
   16e0c:	mov	r3, #0
   16e10:	and	r3, r3, #1
   16e14:	uxtb	r3, r3
   16e18:	mov	r0, r3
   16e1c:	add	sp, fp, #0
   16e20:	pop	{fp}		; (ldr fp, [sp], #4)
   16e24:	bx	lr
   16e28:	push	{fp}		; (str fp, [sp, #-4]!)
   16e2c:	add	fp, sp, #0
   16e30:	sub	sp, sp, #12
   16e34:	str	r0, [fp, #-8]
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	cmp	r3, #0
   16e40:	blt	16e5c <__assert_fail@plt+0x5fa0>
   16e44:	cmp	r3, #31
   16e48:	ble	16e54 <__assert_fail@plt+0x5f98>
   16e4c:	cmp	r3, #127	; 0x7f
   16e50:	bne	16e5c <__assert_fail@plt+0x5fa0>
   16e54:	mov	r3, #1
   16e58:	b	16e60 <__assert_fail@plt+0x5fa4>
   16e5c:	mov	r3, #0
   16e60:	mov	r0, r3
   16e64:	add	sp, fp, #0
   16e68:	pop	{fp}		; (ldr fp, [sp], #4)
   16e6c:	bx	lr
   16e70:	push	{fp}		; (str fp, [sp, #-4]!)
   16e74:	add	fp, sp, #0
   16e78:	sub	sp, sp, #12
   16e7c:	str	r0, [fp, #-8]
   16e80:	ldr	r3, [fp, #-8]
   16e84:	sub	r3, r3, #48	; 0x30
   16e88:	cmp	r3, #9
   16e8c:	bhi	16e98 <__assert_fail@plt+0x5fdc>
   16e90:	mov	r3, #1
   16e94:	b	16e9c <__assert_fail@plt+0x5fe0>
   16e98:	mov	r3, #0
   16e9c:	mov	r0, r3
   16ea0:	add	sp, fp, #0
   16ea4:	pop	{fp}		; (ldr fp, [sp], #4)
   16ea8:	bx	lr
   16eac:	push	{fp}		; (str fp, [sp, #-4]!)
   16eb0:	add	fp, sp, #0
   16eb4:	sub	sp, sp, #12
   16eb8:	str	r0, [fp, #-8]
   16ebc:	ldr	r3, [fp, #-8]
   16ec0:	sub	r3, r3, #33	; 0x21
   16ec4:	cmp	r3, #93	; 0x5d
   16ec8:	bhi	16ed4 <__assert_fail@plt+0x6018>
   16ecc:	mov	r3, #1
   16ed0:	b	16ed8 <__assert_fail@plt+0x601c>
   16ed4:	mov	r3, #0
   16ed8:	mov	r0, r3
   16edc:	add	sp, fp, #0
   16ee0:	pop	{fp}		; (ldr fp, [sp], #4)
   16ee4:	bx	lr
   16ee8:	push	{fp}		; (str fp, [sp, #-4]!)
   16eec:	add	fp, sp, #0
   16ef0:	sub	sp, sp, #12
   16ef4:	str	r0, [fp, #-8]
   16ef8:	ldr	r3, [fp, #-8]
   16efc:	sub	r3, r3, #97	; 0x61
   16f00:	cmp	r3, #25
   16f04:	bhi	16f10 <__assert_fail@plt+0x6054>
   16f08:	mov	r3, #1
   16f0c:	b	16f14 <__assert_fail@plt+0x6058>
   16f10:	mov	r3, #0
   16f14:	mov	r0, r3
   16f18:	add	sp, fp, #0
   16f1c:	pop	{fp}		; (ldr fp, [sp], #4)
   16f20:	bx	lr
   16f24:	push	{fp}		; (str fp, [sp, #-4]!)
   16f28:	add	fp, sp, #0
   16f2c:	sub	sp, sp, #12
   16f30:	str	r0, [fp, #-8]
   16f34:	ldr	r3, [fp, #-8]
   16f38:	sub	r3, r3, #32
   16f3c:	cmp	r3, #94	; 0x5e
   16f40:	bhi	16f4c <__assert_fail@plt+0x6090>
   16f44:	mov	r3, #1
   16f48:	b	16f50 <__assert_fail@plt+0x6094>
   16f4c:	mov	r3, #0
   16f50:	mov	r0, r3
   16f54:	add	sp, fp, #0
   16f58:	pop	{fp}		; (ldr fp, [sp], #4)
   16f5c:	bx	lr
   16f60:	push	{fp}		; (str fp, [sp, #-4]!)
   16f64:	add	fp, sp, #0
   16f68:	sub	sp, sp, #12
   16f6c:	str	r0, [fp, #-8]
   16f70:	ldr	r3, [fp, #-8]
   16f74:	cmp	r3, #64	; 0x40
   16f78:	bgt	16f94 <__assert_fail@plt+0x60d8>
   16f7c:	cmp	r3, #58	; 0x3a
   16f80:	bge	16fb0 <__assert_fail@plt+0x60f4>
   16f84:	sub	r3, r3, #33	; 0x21
   16f88:	cmp	r3, #14
   16f8c:	bhi	16fb8 <__assert_fail@plt+0x60fc>
   16f90:	b	16fb0 <__assert_fail@plt+0x60f4>
   16f94:	cmp	r3, #91	; 0x5b
   16f98:	blt	16fb8 <__assert_fail@plt+0x60fc>
   16f9c:	cmp	r3, #96	; 0x60
   16fa0:	ble	16fb0 <__assert_fail@plt+0x60f4>
   16fa4:	sub	r3, r3, #123	; 0x7b
   16fa8:	cmp	r3, #3
   16fac:	bhi	16fb8 <__assert_fail@plt+0x60fc>
   16fb0:	mov	r3, #1
   16fb4:	b	16fbc <__assert_fail@plt+0x6100>
   16fb8:	mov	r3, #0
   16fbc:	mov	r0, r3
   16fc0:	add	sp, fp, #0
   16fc4:	pop	{fp}		; (ldr fp, [sp], #4)
   16fc8:	bx	lr
   16fcc:	push	{fp}		; (str fp, [sp, #-4]!)
   16fd0:	add	fp, sp, #0
   16fd4:	sub	sp, sp, #12
   16fd8:	str	r0, [fp, #-8]
   16fdc:	ldr	r3, [fp, #-8]
   16fe0:	cmp	r3, #9
   16fe4:	blt	17000 <__assert_fail@plt+0x6144>
   16fe8:	cmp	r3, #13
   16fec:	ble	16ff8 <__assert_fail@plt+0x613c>
   16ff0:	cmp	r3, #32
   16ff4:	bne	17000 <__assert_fail@plt+0x6144>
   16ff8:	mov	r3, #1
   16ffc:	b	17004 <__assert_fail@plt+0x6148>
   17000:	mov	r3, #0
   17004:	mov	r0, r3
   17008:	add	sp, fp, #0
   1700c:	pop	{fp}		; (ldr fp, [sp], #4)
   17010:	bx	lr
   17014:	push	{fp}		; (str fp, [sp, #-4]!)
   17018:	add	fp, sp, #0
   1701c:	sub	sp, sp, #12
   17020:	str	r0, [fp, #-8]
   17024:	ldr	r3, [fp, #-8]
   17028:	sub	r3, r3, #65	; 0x41
   1702c:	cmp	r3, #25
   17030:	bhi	1703c <__assert_fail@plt+0x6180>
   17034:	mov	r3, #1
   17038:	b	17040 <__assert_fail@plt+0x6184>
   1703c:	mov	r3, #0
   17040:	mov	r0, r3
   17044:	add	sp, fp, #0
   17048:	pop	{fp}		; (ldr fp, [sp], #4)
   1704c:	bx	lr
   17050:	push	{fp}		; (str fp, [sp, #-4]!)
   17054:	add	fp, sp, #0
   17058:	sub	sp, sp, #12
   1705c:	str	r0, [fp, #-8]
   17060:	ldr	r3, [fp, #-8]
   17064:	sub	r3, r3, #48	; 0x30
   17068:	cmp	r3, #54	; 0x36
   1706c:	addls	pc, pc, r3, lsl #2
   17070:	b	17158 <__assert_fail@plt+0x629c>
   17074:	b	17150 <__assert_fail@plt+0x6294>
   17078:	b	17150 <__assert_fail@plt+0x6294>
   1707c:	b	17150 <__assert_fail@plt+0x6294>
   17080:	b	17150 <__assert_fail@plt+0x6294>
   17084:	b	17150 <__assert_fail@plt+0x6294>
   17088:	b	17150 <__assert_fail@plt+0x6294>
   1708c:	b	17150 <__assert_fail@plt+0x6294>
   17090:	b	17150 <__assert_fail@plt+0x6294>
   17094:	b	17150 <__assert_fail@plt+0x6294>
   17098:	b	17150 <__assert_fail@plt+0x6294>
   1709c:	b	17158 <__assert_fail@plt+0x629c>
   170a0:	b	17158 <__assert_fail@plt+0x629c>
   170a4:	b	17158 <__assert_fail@plt+0x629c>
   170a8:	b	17158 <__assert_fail@plt+0x629c>
   170ac:	b	17158 <__assert_fail@plt+0x629c>
   170b0:	b	17158 <__assert_fail@plt+0x629c>
   170b4:	b	17158 <__assert_fail@plt+0x629c>
   170b8:	b	17150 <__assert_fail@plt+0x6294>
   170bc:	b	17150 <__assert_fail@plt+0x6294>
   170c0:	b	17150 <__assert_fail@plt+0x6294>
   170c4:	b	17150 <__assert_fail@plt+0x6294>
   170c8:	b	17150 <__assert_fail@plt+0x6294>
   170cc:	b	17150 <__assert_fail@plt+0x6294>
   170d0:	b	17158 <__assert_fail@plt+0x629c>
   170d4:	b	17158 <__assert_fail@plt+0x629c>
   170d8:	b	17158 <__assert_fail@plt+0x629c>
   170dc:	b	17158 <__assert_fail@plt+0x629c>
   170e0:	b	17158 <__assert_fail@plt+0x629c>
   170e4:	b	17158 <__assert_fail@plt+0x629c>
   170e8:	b	17158 <__assert_fail@plt+0x629c>
   170ec:	b	17158 <__assert_fail@plt+0x629c>
   170f0:	b	17158 <__assert_fail@plt+0x629c>
   170f4:	b	17158 <__assert_fail@plt+0x629c>
   170f8:	b	17158 <__assert_fail@plt+0x629c>
   170fc:	b	17158 <__assert_fail@plt+0x629c>
   17100:	b	17158 <__assert_fail@plt+0x629c>
   17104:	b	17158 <__assert_fail@plt+0x629c>
   17108:	b	17158 <__assert_fail@plt+0x629c>
   1710c:	b	17158 <__assert_fail@plt+0x629c>
   17110:	b	17158 <__assert_fail@plt+0x629c>
   17114:	b	17158 <__assert_fail@plt+0x629c>
   17118:	b	17158 <__assert_fail@plt+0x629c>
   1711c:	b	17158 <__assert_fail@plt+0x629c>
   17120:	b	17158 <__assert_fail@plt+0x629c>
   17124:	b	17158 <__assert_fail@plt+0x629c>
   17128:	b	17158 <__assert_fail@plt+0x629c>
   1712c:	b	17158 <__assert_fail@plt+0x629c>
   17130:	b	17158 <__assert_fail@plt+0x629c>
   17134:	b	17158 <__assert_fail@plt+0x629c>
   17138:	b	17150 <__assert_fail@plt+0x6294>
   1713c:	b	17150 <__assert_fail@plt+0x6294>
   17140:	b	17150 <__assert_fail@plt+0x6294>
   17144:	b	17150 <__assert_fail@plt+0x6294>
   17148:	b	17150 <__assert_fail@plt+0x6294>
   1714c:	b	17150 <__assert_fail@plt+0x6294>
   17150:	mov	r3, #1
   17154:	b	1715c <__assert_fail@plt+0x62a0>
   17158:	mov	r3, #0
   1715c:	mov	r0, r3
   17160:	add	sp, fp, #0
   17164:	pop	{fp}		; (ldr fp, [sp], #4)
   17168:	bx	lr
   1716c:	push	{fp}		; (str fp, [sp, #-4]!)
   17170:	add	fp, sp, #0
   17174:	sub	sp, sp, #12
   17178:	str	r0, [fp, #-8]
   1717c:	ldr	r3, [fp, #-8]
   17180:	sub	r3, r3, #65	; 0x41
   17184:	cmp	r3, #25
   17188:	bhi	17198 <__assert_fail@plt+0x62dc>
   1718c:	ldr	r3, [fp, #-8]
   17190:	add	r3, r3, #32
   17194:	b	1719c <__assert_fail@plt+0x62e0>
   17198:	ldr	r3, [fp, #-8]
   1719c:	mov	r0, r3
   171a0:	add	sp, fp, #0
   171a4:	pop	{fp}		; (ldr fp, [sp], #4)
   171a8:	bx	lr
   171ac:	push	{fp}		; (str fp, [sp, #-4]!)
   171b0:	add	fp, sp, #0
   171b4:	sub	sp, sp, #12
   171b8:	str	r0, [fp, #-8]
   171bc:	ldr	r3, [fp, #-8]
   171c0:	sub	r3, r3, #97	; 0x61
   171c4:	cmp	r3, #25
   171c8:	bhi	171d8 <__assert_fail@plt+0x631c>
   171cc:	ldr	r3, [fp, #-8]
   171d0:	sub	r3, r3, #32
   171d4:	b	171dc <__assert_fail@plt+0x6320>
   171d8:	ldr	r3, [fp, #-8]
   171dc:	mov	r0, r3
   171e0:	add	sp, fp, #0
   171e4:	pop	{fp}		; (ldr fp, [sp], #4)
   171e8:	bx	lr
   171ec:	push	{fp, lr}
   171f0:	add	fp, sp, #4
   171f4:	sub	sp, sp, #272	; 0x110
   171f8:	str	r0, [fp, #-272]	; 0xfffffef0
   171fc:	sub	r3, fp, #264	; 0x108
   17200:	ldr	r2, [pc, #116]	; 1727c <__assert_fail@plt+0x63c0>
   17204:	mov	r1, r3
   17208:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1720c:	bl	17390 <__assert_fail@plt+0x64d4>
   17210:	mov	r3, r0
   17214:	cmp	r3, #0
   17218:	beq	17224 <__assert_fail@plt+0x6368>
   1721c:	mov	r3, #0
   17220:	b	17270 <__assert_fail@plt+0x63b4>
   17224:	sub	r3, fp, #264	; 0x108
   17228:	ldr	r1, [pc, #80]	; 17280 <__assert_fail@plt+0x63c4>
   1722c:	mov	r0, r3
   17230:	bl	10c88 <strcmp@plt>
   17234:	mov	r3, r0
   17238:	cmp	r3, #0
   1723c:	beq	17264 <__assert_fail@plt+0x63a8>
   17240:	sub	r3, fp, #264	; 0x108
   17244:	ldr	r1, [pc, #56]	; 17284 <__assert_fail@plt+0x63c8>
   17248:	mov	r0, r3
   1724c:	bl	10c88 <strcmp@plt>
   17250:	mov	r3, r0
   17254:	cmp	r3, #0
   17258:	beq	17264 <__assert_fail@plt+0x63a8>
   1725c:	mov	r3, #1
   17260:	b	17268 <__assert_fail@plt+0x63ac>
   17264:	mov	r3, #0
   17268:	and	r3, r3, #1
   1726c:	uxtb	r3, r3
   17270:	mov	r0, r3
   17274:	sub	sp, fp, #4
   17278:	pop	{fp, pc}
   1727c:	andeq	r0, r0, r1, lsl #2
   17280:	strdeq	r8, [r1], -r4
   17284:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17288:	push	{fp, lr}
   1728c:	add	fp, sp, #4
   17290:	sub	sp, sp, #16
   17294:	str	r0, [fp, #-16]
   17298:	mov	r1, #0
   1729c:	ldr	r0, [fp, #-16]
   172a0:	bl	10e44 <setlocale@plt>
   172a4:	str	r0, [fp, #-8]
   172a8:	ldr	r3, [fp, #-8]
   172ac:	mov	r0, r3
   172b0:	sub	sp, fp, #4
   172b4:	pop	{fp, pc}
   172b8:	push	{fp, lr}
   172bc:	add	fp, sp, #4
   172c0:	sub	sp, sp, #24
   172c4:	str	r0, [fp, #-16]
   172c8:	str	r1, [fp, #-20]	; 0xffffffec
   172cc:	str	r2, [fp, #-24]	; 0xffffffe8
   172d0:	ldr	r0, [fp, #-16]
   172d4:	bl	17288 <__assert_fail@plt+0x63cc>
   172d8:	str	r0, [fp, #-8]
   172dc:	ldr	r3, [fp, #-8]
   172e0:	cmp	r3, #0
   172e4:	bne	17308 <__assert_fail@plt+0x644c>
   172e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172ec:	cmp	r3, #0
   172f0:	beq	17300 <__assert_fail@plt+0x6444>
   172f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   172f8:	mov	r2, #0
   172fc:	strb	r2, [r3]
   17300:	mov	r3, #22
   17304:	b	17384 <__assert_fail@plt+0x64c8>
   17308:	ldr	r0, [fp, #-8]
   1730c:	bl	10de4 <strlen@plt>
   17310:	str	r0, [fp, #-12]
   17314:	ldr	r2, [fp, #-12]
   17318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1731c:	cmp	r2, r3
   17320:	bcs	17344 <__assert_fail@plt+0x6488>
   17324:	ldr	r3, [fp, #-12]
   17328:	add	r3, r3, #1
   1732c:	mov	r2, r3
   17330:	ldr	r1, [fp, #-8]
   17334:	ldr	r0, [fp, #-20]	; 0xffffffec
   17338:	bl	10cd0 <memcpy@plt>
   1733c:	mov	r3, #0
   17340:	b	17384 <__assert_fail@plt+0x64c8>
   17344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17348:	cmp	r3, #0
   1734c:	beq	17380 <__assert_fail@plt+0x64c4>
   17350:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17354:	sub	r3, r3, #1
   17358:	mov	r2, r3
   1735c:	ldr	r1, [fp, #-8]
   17360:	ldr	r0, [fp, #-20]	; 0xffffffec
   17364:	bl	10cd0 <memcpy@plt>
   17368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1736c:	sub	r3, r3, #1
   17370:	ldr	r2, [fp, #-20]	; 0xffffffec
   17374:	add	r3, r2, r3
   17378:	mov	r2, #0
   1737c:	strb	r2, [r3]
   17380:	mov	r3, #34	; 0x22
   17384:	mov	r0, r3
   17388:	sub	sp, fp, #4
   1738c:	pop	{fp, pc}
   17390:	push	{fp, lr}
   17394:	add	fp, sp, #4
   17398:	sub	sp, sp, #16
   1739c:	str	r0, [fp, #-8]
   173a0:	str	r1, [fp, #-12]
   173a4:	str	r2, [fp, #-16]
   173a8:	ldr	r2, [fp, #-16]
   173ac:	ldr	r1, [fp, #-12]
   173b0:	ldr	r0, [fp, #-8]
   173b4:	bl	172b8 <__assert_fail@plt+0x63fc>
   173b8:	mov	r3, r0
   173bc:	mov	r0, r3
   173c0:	sub	sp, fp, #4
   173c4:	pop	{fp, pc}
   173c8:	push	{fp, lr}
   173cc:	add	fp, sp, #4
   173d0:	sub	sp, sp, #8
   173d4:	str	r0, [fp, #-8]
   173d8:	ldr	r0, [fp, #-8]
   173dc:	bl	17288 <__assert_fail@plt+0x63cc>
   173e0:	mov	r3, r0
   173e4:	mov	r0, r3
   173e8:	sub	sp, fp, #4
   173ec:	pop	{fp, pc}
   173f0:	subs	r2, r1, #1
   173f4:	bxeq	lr
   173f8:	bcc	175d0 <__assert_fail@plt+0x6714>
   173fc:	cmp	r0, r1
   17400:	bls	175b4 <__assert_fail@plt+0x66f8>
   17404:	tst	r1, r2
   17408:	beq	175c0 <__assert_fail@plt+0x6704>
   1740c:	clz	r3, r0
   17410:	clz	r2, r1
   17414:	sub	r3, r2, r3
   17418:	rsbs	r3, r3, #31
   1741c:	addne	r3, r3, r3, lsl #1
   17420:	mov	r2, #0
   17424:	addne	pc, pc, r3, lsl #2
   17428:	nop			; (mov r0, r0)
   1742c:	cmp	r0, r1, lsl #31
   17430:	adc	r2, r2, r2
   17434:	subcs	r0, r0, r1, lsl #31
   17438:	cmp	r0, r1, lsl #30
   1743c:	adc	r2, r2, r2
   17440:	subcs	r0, r0, r1, lsl #30
   17444:	cmp	r0, r1, lsl #29
   17448:	adc	r2, r2, r2
   1744c:	subcs	r0, r0, r1, lsl #29
   17450:	cmp	r0, r1, lsl #28
   17454:	adc	r2, r2, r2
   17458:	subcs	r0, r0, r1, lsl #28
   1745c:	cmp	r0, r1, lsl #27
   17460:	adc	r2, r2, r2
   17464:	subcs	r0, r0, r1, lsl #27
   17468:	cmp	r0, r1, lsl #26
   1746c:	adc	r2, r2, r2
   17470:	subcs	r0, r0, r1, lsl #26
   17474:	cmp	r0, r1, lsl #25
   17478:	adc	r2, r2, r2
   1747c:	subcs	r0, r0, r1, lsl #25
   17480:	cmp	r0, r1, lsl #24
   17484:	adc	r2, r2, r2
   17488:	subcs	r0, r0, r1, lsl #24
   1748c:	cmp	r0, r1, lsl #23
   17490:	adc	r2, r2, r2
   17494:	subcs	r0, r0, r1, lsl #23
   17498:	cmp	r0, r1, lsl #22
   1749c:	adc	r2, r2, r2
   174a0:	subcs	r0, r0, r1, lsl #22
   174a4:	cmp	r0, r1, lsl #21
   174a8:	adc	r2, r2, r2
   174ac:	subcs	r0, r0, r1, lsl #21
   174b0:	cmp	r0, r1, lsl #20
   174b4:	adc	r2, r2, r2
   174b8:	subcs	r0, r0, r1, lsl #20
   174bc:	cmp	r0, r1, lsl #19
   174c0:	adc	r2, r2, r2
   174c4:	subcs	r0, r0, r1, lsl #19
   174c8:	cmp	r0, r1, lsl #18
   174cc:	adc	r2, r2, r2
   174d0:	subcs	r0, r0, r1, lsl #18
   174d4:	cmp	r0, r1, lsl #17
   174d8:	adc	r2, r2, r2
   174dc:	subcs	r0, r0, r1, lsl #17
   174e0:	cmp	r0, r1, lsl #16
   174e4:	adc	r2, r2, r2
   174e8:	subcs	r0, r0, r1, lsl #16
   174ec:	cmp	r0, r1, lsl #15
   174f0:	adc	r2, r2, r2
   174f4:	subcs	r0, r0, r1, lsl #15
   174f8:	cmp	r0, r1, lsl #14
   174fc:	adc	r2, r2, r2
   17500:	subcs	r0, r0, r1, lsl #14
   17504:	cmp	r0, r1, lsl #13
   17508:	adc	r2, r2, r2
   1750c:	subcs	r0, r0, r1, lsl #13
   17510:	cmp	r0, r1, lsl #12
   17514:	adc	r2, r2, r2
   17518:	subcs	r0, r0, r1, lsl #12
   1751c:	cmp	r0, r1, lsl #11
   17520:	adc	r2, r2, r2
   17524:	subcs	r0, r0, r1, lsl #11
   17528:	cmp	r0, r1, lsl #10
   1752c:	adc	r2, r2, r2
   17530:	subcs	r0, r0, r1, lsl #10
   17534:	cmp	r0, r1, lsl #9
   17538:	adc	r2, r2, r2
   1753c:	subcs	r0, r0, r1, lsl #9
   17540:	cmp	r0, r1, lsl #8
   17544:	adc	r2, r2, r2
   17548:	subcs	r0, r0, r1, lsl #8
   1754c:	cmp	r0, r1, lsl #7
   17550:	adc	r2, r2, r2
   17554:	subcs	r0, r0, r1, lsl #7
   17558:	cmp	r0, r1, lsl #6
   1755c:	adc	r2, r2, r2
   17560:	subcs	r0, r0, r1, lsl #6
   17564:	cmp	r0, r1, lsl #5
   17568:	adc	r2, r2, r2
   1756c:	subcs	r0, r0, r1, lsl #5
   17570:	cmp	r0, r1, lsl #4
   17574:	adc	r2, r2, r2
   17578:	subcs	r0, r0, r1, lsl #4
   1757c:	cmp	r0, r1, lsl #3
   17580:	adc	r2, r2, r2
   17584:	subcs	r0, r0, r1, lsl #3
   17588:	cmp	r0, r1, lsl #2
   1758c:	adc	r2, r2, r2
   17590:	subcs	r0, r0, r1, lsl #2
   17594:	cmp	r0, r1, lsl #1
   17598:	adc	r2, r2, r2
   1759c:	subcs	r0, r0, r1, lsl #1
   175a0:	cmp	r0, r1
   175a4:	adc	r2, r2, r2
   175a8:	subcs	r0, r0, r1
   175ac:	mov	r0, r2
   175b0:	bx	lr
   175b4:	moveq	r0, #1
   175b8:	movne	r0, #0
   175bc:	bx	lr
   175c0:	clz	r2, r1
   175c4:	rsb	r2, r2, #31
   175c8:	lsr	r0, r0, r2
   175cc:	bx	lr
   175d0:	cmp	r0, #0
   175d4:	mvnne	r0, #0
   175d8:	b	17878 <__assert_fail@plt+0x69bc>
   175dc:	cmp	r1, #0
   175e0:	beq	175d0 <__assert_fail@plt+0x6714>
   175e4:	push	{r0, r1, lr}
   175e8:	bl	173f0 <__assert_fail@plt+0x6534>
   175ec:	pop	{r1, r2, lr}
   175f0:	mul	r3, r2, r0
   175f4:	sub	r1, r1, r3
   175f8:	bx	lr
   175fc:	cmp	r1, #0
   17600:	beq	1780c <__assert_fail@plt+0x6950>
   17604:	eor	ip, r0, r1
   17608:	rsbmi	r1, r1, #0
   1760c:	subs	r2, r1, #1
   17610:	beq	177d8 <__assert_fail@plt+0x691c>
   17614:	movs	r3, r0
   17618:	rsbmi	r3, r0, #0
   1761c:	cmp	r3, r1
   17620:	bls	177e4 <__assert_fail@plt+0x6928>
   17624:	tst	r1, r2
   17628:	beq	177f4 <__assert_fail@plt+0x6938>
   1762c:	clz	r2, r3
   17630:	clz	r0, r1
   17634:	sub	r2, r0, r2
   17638:	rsbs	r2, r2, #31
   1763c:	addne	r2, r2, r2, lsl #1
   17640:	mov	r0, #0
   17644:	addne	pc, pc, r2, lsl #2
   17648:	nop			; (mov r0, r0)
   1764c:	cmp	r3, r1, lsl #31
   17650:	adc	r0, r0, r0
   17654:	subcs	r3, r3, r1, lsl #31
   17658:	cmp	r3, r1, lsl #30
   1765c:	adc	r0, r0, r0
   17660:	subcs	r3, r3, r1, lsl #30
   17664:	cmp	r3, r1, lsl #29
   17668:	adc	r0, r0, r0
   1766c:	subcs	r3, r3, r1, lsl #29
   17670:	cmp	r3, r1, lsl #28
   17674:	adc	r0, r0, r0
   17678:	subcs	r3, r3, r1, lsl #28
   1767c:	cmp	r3, r1, lsl #27
   17680:	adc	r0, r0, r0
   17684:	subcs	r3, r3, r1, lsl #27
   17688:	cmp	r3, r1, lsl #26
   1768c:	adc	r0, r0, r0
   17690:	subcs	r3, r3, r1, lsl #26
   17694:	cmp	r3, r1, lsl #25
   17698:	adc	r0, r0, r0
   1769c:	subcs	r3, r3, r1, lsl #25
   176a0:	cmp	r3, r1, lsl #24
   176a4:	adc	r0, r0, r0
   176a8:	subcs	r3, r3, r1, lsl #24
   176ac:	cmp	r3, r1, lsl #23
   176b0:	adc	r0, r0, r0
   176b4:	subcs	r3, r3, r1, lsl #23
   176b8:	cmp	r3, r1, lsl #22
   176bc:	adc	r0, r0, r0
   176c0:	subcs	r3, r3, r1, lsl #22
   176c4:	cmp	r3, r1, lsl #21
   176c8:	adc	r0, r0, r0
   176cc:	subcs	r3, r3, r1, lsl #21
   176d0:	cmp	r3, r1, lsl #20
   176d4:	adc	r0, r0, r0
   176d8:	subcs	r3, r3, r1, lsl #20
   176dc:	cmp	r3, r1, lsl #19
   176e0:	adc	r0, r0, r0
   176e4:	subcs	r3, r3, r1, lsl #19
   176e8:	cmp	r3, r1, lsl #18
   176ec:	adc	r0, r0, r0
   176f0:	subcs	r3, r3, r1, lsl #18
   176f4:	cmp	r3, r1, lsl #17
   176f8:	adc	r0, r0, r0
   176fc:	subcs	r3, r3, r1, lsl #17
   17700:	cmp	r3, r1, lsl #16
   17704:	adc	r0, r0, r0
   17708:	subcs	r3, r3, r1, lsl #16
   1770c:	cmp	r3, r1, lsl #15
   17710:	adc	r0, r0, r0
   17714:	subcs	r3, r3, r1, lsl #15
   17718:	cmp	r3, r1, lsl #14
   1771c:	adc	r0, r0, r0
   17720:	subcs	r3, r3, r1, lsl #14
   17724:	cmp	r3, r1, lsl #13
   17728:	adc	r0, r0, r0
   1772c:	subcs	r3, r3, r1, lsl #13
   17730:	cmp	r3, r1, lsl #12
   17734:	adc	r0, r0, r0
   17738:	subcs	r3, r3, r1, lsl #12
   1773c:	cmp	r3, r1, lsl #11
   17740:	adc	r0, r0, r0
   17744:	subcs	r3, r3, r1, lsl #11
   17748:	cmp	r3, r1, lsl #10
   1774c:	adc	r0, r0, r0
   17750:	subcs	r3, r3, r1, lsl #10
   17754:	cmp	r3, r1, lsl #9
   17758:	adc	r0, r0, r0
   1775c:	subcs	r3, r3, r1, lsl #9
   17760:	cmp	r3, r1, lsl #8
   17764:	adc	r0, r0, r0
   17768:	subcs	r3, r3, r1, lsl #8
   1776c:	cmp	r3, r1, lsl #7
   17770:	adc	r0, r0, r0
   17774:	subcs	r3, r3, r1, lsl #7
   17778:	cmp	r3, r1, lsl #6
   1777c:	adc	r0, r0, r0
   17780:	subcs	r3, r3, r1, lsl #6
   17784:	cmp	r3, r1, lsl #5
   17788:	adc	r0, r0, r0
   1778c:	subcs	r3, r3, r1, lsl #5
   17790:	cmp	r3, r1, lsl #4
   17794:	adc	r0, r0, r0
   17798:	subcs	r3, r3, r1, lsl #4
   1779c:	cmp	r3, r1, lsl #3
   177a0:	adc	r0, r0, r0
   177a4:	subcs	r3, r3, r1, lsl #3
   177a8:	cmp	r3, r1, lsl #2
   177ac:	adc	r0, r0, r0
   177b0:	subcs	r3, r3, r1, lsl #2
   177b4:	cmp	r3, r1, lsl #1
   177b8:	adc	r0, r0, r0
   177bc:	subcs	r3, r3, r1, lsl #1
   177c0:	cmp	r3, r1
   177c4:	adc	r0, r0, r0
   177c8:	subcs	r3, r3, r1
   177cc:	cmp	ip, #0
   177d0:	rsbmi	r0, r0, #0
   177d4:	bx	lr
   177d8:	teq	ip, r0
   177dc:	rsbmi	r0, r0, #0
   177e0:	bx	lr
   177e4:	movcc	r0, #0
   177e8:	asreq	r0, ip, #31
   177ec:	orreq	r0, r0, #1
   177f0:	bx	lr
   177f4:	clz	r2, r1
   177f8:	rsb	r2, r2, #31
   177fc:	cmp	ip, #0
   17800:	lsr	r0, r3, r2
   17804:	rsbmi	r0, r0, #0
   17808:	bx	lr
   1780c:	cmp	r0, #0
   17810:	mvngt	r0, #-2147483648	; 0x80000000
   17814:	movlt	r0, #-2147483648	; 0x80000000
   17818:	b	17878 <__assert_fail@plt+0x69bc>
   1781c:	cmp	r1, #0
   17820:	beq	1780c <__assert_fail@plt+0x6950>
   17824:	push	{r0, r1, lr}
   17828:	bl	17604 <__assert_fail@plt+0x6748>
   1782c:	pop	{r1, r2, lr}
   17830:	mul	r3, r2, r0
   17834:	sub	r1, r1, r3
   17838:	bx	lr
   1783c:	cmp	r3, #0
   17840:	cmpeq	r2, #0
   17844:	bne	1785c <__assert_fail@plt+0x69a0>
   17848:	cmp	r1, #0
   1784c:	cmpeq	r0, #0
   17850:	mvnne	r1, #0
   17854:	mvnne	r0, #0
   17858:	b	17878 <__assert_fail@plt+0x69bc>
   1785c:	sub	sp, sp, #8
   17860:	push	{sp, lr}
   17864:	bl	17888 <__assert_fail@plt+0x69cc>
   17868:	ldr	lr, [sp, #4]
   1786c:	add	sp, sp, #8
   17870:	pop	{r2, r3}
   17874:	bx	lr
   17878:	push	{r1, lr}
   1787c:	mov	r0, #8
   17880:	bl	10c7c <raise@plt>
   17884:	pop	{r1, pc}
   17888:	cmp	r1, r3
   1788c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17890:	cmpeq	r0, r2
   17894:	mov	r4, r0
   17898:	mov	r5, r1
   1789c:	ldr	r9, [sp, #28]
   178a0:	movcc	r0, #0
   178a4:	movcc	r1, #0
   178a8:	bcc	179a0 <__assert_fail@plt+0x6ae4>
   178ac:	cmp	r3, #0
   178b0:	clzeq	ip, r2
   178b4:	clzne	ip, r3
   178b8:	addeq	ip, ip, #32
   178bc:	cmp	r5, #0
   178c0:	clzeq	r1, r4
   178c4:	addeq	r1, r1, #32
   178c8:	clzne	r1, r5
   178cc:	sub	ip, ip, r1
   178d0:	sub	lr, ip, #32
   178d4:	lsl	r7, r3, ip
   178d8:	rsb	r8, ip, #32
   178dc:	orr	r7, r7, r2, lsl lr
   178e0:	orr	r7, r7, r2, lsr r8
   178e4:	lsl	r6, r2, ip
   178e8:	cmp	r5, r7
   178ec:	cmpeq	r4, r6
   178f0:	movcc	r0, #0
   178f4:	movcc	r1, #0
   178f8:	bcc	17914 <__assert_fail@plt+0x6a58>
   178fc:	mov	r3, #1
   17900:	subs	r4, r4, r6
   17904:	lsl	r1, r3, lr
   17908:	lsl	r0, r3, ip
   1790c:	orr	r1, r1, r3, lsr r8
   17910:	sbc	r5, r5, r7
   17914:	cmp	ip, #0
   17918:	beq	179a0 <__assert_fail@plt+0x6ae4>
   1791c:	lsrs	r3, r7, #1
   17920:	rrx	r2, r6
   17924:	mov	r6, ip
   17928:	b	1794c <__assert_fail@plt+0x6a90>
   1792c:	subs	r4, r4, r2
   17930:	sbc	r5, r5, r3
   17934:	adds	r4, r4, r4
   17938:	adc	r5, r5, r5
   1793c:	adds	r4, r4, #1
   17940:	adc	r5, r5, #0
   17944:	subs	r6, r6, #1
   17948:	beq	17968 <__assert_fail@plt+0x6aac>
   1794c:	cmp	r5, r3
   17950:	cmpeq	r4, r2
   17954:	bcs	1792c <__assert_fail@plt+0x6a70>
   17958:	adds	r4, r4, r4
   1795c:	adc	r5, r5, r5
   17960:	subs	r6, r6, #1
   17964:	bne	1794c <__assert_fail@plt+0x6a90>
   17968:	lsr	r6, r4, ip
   1796c:	lsr	r7, r5, ip
   17970:	orr	r6, r6, r5, lsl r8
   17974:	adds	r2, r0, r4
   17978:	orr	r6, r6, r5, lsr lr
   1797c:	adc	r3, r1, r5
   17980:	lsl	r1, r7, ip
   17984:	orr	r1, r1, r6, lsl lr
   17988:	lsl	r0, r6, ip
   1798c:	orr	r1, r1, r6, lsr r8
   17990:	subs	r0, r2, r0
   17994:	mov	r4, r6
   17998:	mov	r5, r7
   1799c:	sbc	r1, r3, r1
   179a0:	cmp	r9, #0
   179a4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   179a8:	strd	r4, [r9]
   179ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   179b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179b4:	mov	r7, r0
   179b8:	ldr	r6, [pc, #72]	; 17a08 <__assert_fail@plt+0x6b4c>
   179bc:	ldr	r5, [pc, #72]	; 17a0c <__assert_fail@plt+0x6b50>
   179c0:	add	r6, pc, r6
   179c4:	add	r5, pc, r5
   179c8:	sub	r6, r6, r5
   179cc:	mov	r8, r1
   179d0:	mov	r9, r2
   179d4:	bl	10c44 <calloc@plt-0x20>
   179d8:	asrs	r6, r6, #2
   179dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   179e0:	mov	r4, #0
   179e4:	add	r4, r4, #1
   179e8:	ldr	r3, [r5], #4
   179ec:	mov	r2, r9
   179f0:	mov	r1, r8
   179f4:	mov	r0, r7
   179f8:	blx	r3
   179fc:	cmp	r6, r4
   17a00:	bne	179e4 <__assert_fail@plt+0x6b28>
   17a04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a08:	andeq	r1, r1, r8, asr #10
   17a0c:	andeq	r1, r1, r0, asr #10
   17a10:	bx	lr
   17a14:	ldr	r3, [pc, #12]	; 17a28 <__assert_fail@plt+0x6b6c>
   17a18:	mov	r1, #0
   17a1c:	add	r3, pc, r3
   17a20:	ldr	r2, [r3]
   17a24:	b	10e08 <__cxa_atexit@plt>
   17a28:			; <UNDEFINED> instruction: 0x000116bc

Disassembly of section .fini:

00017a2c <.fini>:
   17a2c:	push	{r3, lr}
   17a30:	pop	{r3, pc}
