
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b58 <.init>:
   10b58:	push	{r3, lr}
   10b5c:	bl	10e3c <__assert_fail@plt+0x48>
   10b60:	pop	{r3, pc}

Disassembly of section .plt:

00010b64 <fstatfs64@plt-0x14>:
   10b64:	push	{lr}		; (str lr, [sp, #-4]!)
   10b68:	ldr	lr, [pc, #4]	; 10b74 <fstatfs64@plt-0x4>
   10b6c:	add	lr, pc, lr
   10b70:	ldr	pc, [lr, #8]!
   10b74:	andeq	r8, r1, ip, lsl #9

00010b78 <fstatfs64@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #24, 20	; 0x18000
   10b80:	ldr	pc, [ip, #1164]!	; 0x48c

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #24, 20	; 0x18000
   10b8c:	ldr	pc, [ip, #1156]!	; 0x484

00010b90 <raise@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #24, 20	; 0x18000
   10b98:	ldr	pc, [ip, #1148]!	; 0x47c

00010b9c <strcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #24, 20	; 0x18000
   10ba4:	ldr	pc, [ip, #1140]!	; 0x474

00010ba8 <strtol@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #24, 20	; 0x18000
   10bb0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb4 <getpwuid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #24, 20	; 0x18000
   10bbc:	ldr	pc, [ip, #1124]!	; 0x464

00010bc0 <printf@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #24, 20	; 0x18000
   10bc8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bcc <getuid@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #24, 20	; 0x18000
   10bd4:	ldr	pc, [ip, #1108]!	; 0x454

00010bd8 <memmove@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #24, 20	; 0x18000
   10be0:	ldr	pc, [ip, #1100]!	; 0x44c

00010be4 <free@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #24, 20	; 0x18000
   10bec:	ldr	pc, [ip, #1092]!	; 0x444

00010bf0 <memcpy@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #24, 20	; 0x18000
   10bf8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bfc <time@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #24, 20	; 0x18000
   10c04:	ldr	pc, [ip, #1076]!	; 0x434

00010c08 <ctime@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #24, 20	; 0x18000
   10c10:	ldr	pc, [ip, #1068]!	; 0x42c

00010c14 <realloc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #24, 20	; 0x18000
   10c1c:	ldr	pc, [ip, #1060]!	; 0x424

00010c20 <funlockfile@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #24, 20	; 0x18000
   10c28:	ldr	pc, [ip, #1052]!	; 0x41c

00010c2c <__fxstatat64@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #24, 20	; 0x18000
   10c34:	ldr	pc, [ip, #1044]!	; 0x414

00010c38 <__fxstat64@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #24, 20	; 0x18000
   10c40:	ldr	pc, [ip, #1036]!	; 0x40c

00010c44 <readlink@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #24, 20	; 0x18000
   10c4c:	ldr	pc, [ip, #1028]!	; 0x404

00010c50 <fwrite@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #24, 20	; 0x18000
   10c58:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c5c <ioctl@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #24, 20	; 0x18000
   10c64:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c68 <strcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #24, 20	; 0x18000
   10c70:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c74 <open64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #24, 20	; 0x18000
   10c7c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c80 <getenv@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #24, 20	; 0x18000
   10c88:	ldr	pc, [ip, #988]!	; 0x3dc

00010c8c <malloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #24, 20	; 0x18000
   10c94:	ldr	pc, [ip, #980]!	; 0x3d4

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #24, 20	; 0x18000
   10ca0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca4 <strerror@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #964]!	; 0x3c4

00010cb0 <__gmon_start__@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cbc <__ctype_b_loc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc8 <strlen@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd4 <strchr@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #932]!	; 0x3a4

00010ce0 <openat64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #924]!	; 0x39c

00010cec <fprintf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #916]!	; 0x394

00010cf8 <__errno_location@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #908]!	; 0x38c

00010d04 <snprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #900]!	; 0x384

00010d10 <memset@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #892]!	; 0x37c

00010d1c <fcntl64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #884]!	; 0x374

00010d28 <strrchr@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #876]!	; 0x36c

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #868]!	; 0x364

00010d40 <readdir64@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #860]!	; 0x35c

00010d4c <fdopendir@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #852]!	; 0x354

00010d58 <putc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #844]!	; 0x34c

00010d64 <dirfd@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #836]!	; 0x344

00010d70 <flockfile@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #828]!	; 0x33c

00010d7c <fchdir@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #820]!	; 0x334

00010d88 <qsort@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #812]!	; 0x32c

00010d94 <__xstat64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #804]!	; 0x324

00010da0 <isatty@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #796]!	; 0x31c

00010dac <strncmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #788]!	; 0x314

00010db8 <abort@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #780]!	; 0x30c

00010dc4 <close@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #772]!	; 0x304

00010dd0 <__lxstat64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #764]!	; 0x2fc

00010ddc <closedir@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #756]!	; 0x2f4

00010de8 <getgrgid@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #748]!	; 0x2ec

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010e00 <.text>:
   10e00:	mov	fp, #0
   10e04:	mov	lr, #0
   10e08:	pop	{r1}		; (ldr r1, [sp], #4)
   10e0c:	mov	r2, sp
   10e10:	push	{r2}		; (str r2, [sp, #-4]!)
   10e14:	push	{r0}		; (str r0, [sp, #-4]!)
   10e18:	ldr	ip, [pc, #16]	; 10e30 <__assert_fail@plt+0x3c>
   10e1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e20:	ldr	r0, [pc, #12]	; 10e34 <__assert_fail@plt+0x40>
   10e24:	ldr	r3, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	bl	10c98 <__libc_start_main@plt>
   10e2c:	bl	10db8 <abort@plt>
   10e30:	andeq	r7, r1, r4, lsl pc
   10e34:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e38:			; <UNDEFINED> instruction: 0x00017eb4
   10e3c:	ldr	r3, [pc, #20]	; 10e58 <__assert_fail@plt+0x64>
   10e40:	ldr	r2, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	add	r3, pc, r3
   10e48:	ldr	r2, [r3, r2]
   10e4c:	cmp	r2, #0
   10e50:	bxeq	lr
   10e54:	b	10cb0 <__gmon_start__@plt>
   10e58:			; <UNDEFINED> instruction: 0x000181b4
   10e5c:	andeq	r0, r0, r4, ror #1
   10e60:	ldr	r0, [pc, #24]	; 10e80 <__assert_fail@plt+0x8c>
   10e64:	ldr	r3, [pc, #24]	; 10e84 <__assert_fail@plt+0x90>
   10e68:	cmp	r3, r0
   10e6c:	bxeq	lr
   10e70:	ldr	r3, [pc, #16]	; 10e88 <__assert_fail@plt+0x94>
   10e74:	cmp	r3, #0
   10e78:	bxeq	lr
   10e7c:	bx	r3
   10e80:	andeq	r9, r2, r0, lsl r1
   10e84:	andeq	r9, r2, r0, lsl r1
   10e88:	andeq	r0, r0, r0
   10e8c:	ldr	r0, [pc, #36]	; 10eb8 <__assert_fail@plt+0xc4>
   10e90:	ldr	r1, [pc, #36]	; 10ebc <__assert_fail@plt+0xc8>
   10e94:	sub	r1, r1, r0
   10e98:	asr	r1, r1, #2
   10e9c:	add	r1, r1, r1, lsr #31
   10ea0:	asrs	r1, r1, #1
   10ea4:	bxeq	lr
   10ea8:	ldr	r3, [pc, #16]	; 10ec0 <__assert_fail@plt+0xcc>
   10eac:	cmp	r3, #0
   10eb0:	bxeq	lr
   10eb4:	bx	r3
   10eb8:	andeq	r9, r2, r0, lsl r1
   10ebc:	andeq	r9, r2, r0, lsl r1
   10ec0:	andeq	r0, r0, r0
   10ec4:	push	{r4, lr}
   10ec8:	ldr	r4, [pc, #24]	; 10ee8 <__assert_fail@plt+0xf4>
   10ecc:	ldrb	r3, [r4]
   10ed0:	cmp	r3, #0
   10ed4:	popne	{r4, pc}
   10ed8:	bl	10e60 <__assert_fail@plt+0x6c>
   10edc:	mov	r3, #1
   10ee0:	strb	r3, [r4]
   10ee4:	pop	{r4, pc}
   10ee8:	andeq	r9, r2, r8, lsl r1
   10eec:	b	10e8c <__assert_fail@plt+0x98>
   10ef0:	str	r4, [sp, #-8]!
   10ef4:	str	lr, [sp, #4]
   10ef8:	bl	117a4 <__assert_fail@plt+0x9b0>
   10efc:	ldr	r4, [sp]
   10f00:	add	sp, sp, #4
   10f04:	pop	{pc}		; (ldr pc, [sp], #4)
   10f08:	ldr	r2, [r0]
   10f0c:	ldrh	r0, [r2, #56]	; 0x38
   10f10:	cmp	r0, #7
   10f14:	beq	10fac <__assert_fail@plt+0x1b8>
   10f18:	ldr	r1, [r1]
   10f1c:	ldrh	r3, [r1, #56]	; 0x38
   10f20:	cmp	r3, #7
   10f24:	beq	10fb4 <__assert_fail@plt+0x1c0>
   10f28:	str	r4, [sp, #-8]!
   10f2c:	str	lr, [sp, #4]
   10f30:	cmp	r3, #10
   10f34:	cmpne	r0, #10
   10f38:	bne	10f5c <__assert_fail@plt+0x168>
   10f3c:	cmp	r3, #10
   10f40:	movne	r0, #1
   10f44:	bne	10fa0 <__assert_fail@plt+0x1ac>
   10f48:	cmp	r0, #10
   10f4c:	bne	10fbc <__assert_fail@plt+0x1c8>
   10f50:	mov	r0, r2
   10f54:	bl	12f74 <__assert_fail@plt+0x2180>
   10f58:	b	10fa0 <__assert_fail@plt+0x1ac>
   10f5c:	cmp	r0, r3
   10f60:	beq	10f8c <__assert_fail@plt+0x198>
   10f64:	movw	ip, #37280	; 0x91a0
   10f68:	movt	ip, #2
   10f6c:	ldr	lr, [r2, #48]	; 0x30
   10f70:	ldr	ip, [ip]
   10f74:	orrs	ip, lr, ip
   10f78:	bne	10f8c <__assert_fail@plt+0x198>
   10f7c:	cmp	r0, #1
   10f80:	beq	10fa0 <__assert_fail@plt+0x1ac>
   10f84:	cmp	r3, #1
   10f88:	beq	10fc4 <__assert_fail@plt+0x1d0>
   10f8c:	movw	r3, #37148	; 0x911c
   10f90:	movt	r3, #2
   10f94:	ldr	r3, [r3]
   10f98:	mov	r0, r2
   10f9c:	blx	r3
   10fa0:	ldr	r4, [sp]
   10fa4:	add	sp, sp, #4
   10fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   10fac:	mov	r0, #0
   10fb0:	bx	lr
   10fb4:	mov	r0, #0
   10fb8:	bx	lr
   10fbc:	mvn	r0, #0
   10fc0:	b	10fa0 <__assert_fail@plt+0x1ac>
   10fc4:	mvn	r0, #0
   10fc8:	b	10fa0 <__assert_fail@plt+0x1ac>
   10fcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10fd0:	strd	r6, [sp, #8]
   10fd4:	strd	r8, [sp, #16]
   10fd8:	strd	sl, [sp, #24]
   10fdc:	str	lr, [sp, #32]
   10fe0:	sub	sp, sp, #196	; 0xc4
   10fe4:	str	r0, [sp, #4]
   10fe8:	subs	r4, r1, #0
   10fec:	str	r4, [sp, #68]	; 0x44
   10ff0:	beq	113f8 <__assert_fail@plt+0x604>
   10ff4:	movw	r3, #37232	; 0x9170
   10ff8:	movt	r3, #2
   10ffc:	movw	r2, #37260	; 0x918c
   11000:	movt	r2, #2
   11004:	ldr	r3, [r3]
   11008:	ldr	r2, [r2]
   1100c:	orr	r3, r3, r2
   11010:	movw	r2, #37208	; 0x9158
   11014:	movt	r2, #2
   11018:	ldr	r2, [r2]
   1101c:	orr	r3, r3, r2
   11020:	str	r3, [sp, #8]
   11024:	mov	r3, #0
   11028:	str	r3, [sp, #64]	; 0x40
   1102c:	mov	r8, r3
   11030:	str	r3, [sp, #36]	; 0x24
   11034:	str	r3, [sp, #32]
   11038:	str	r3, [sp, #56]	; 0x38
   1103c:	str	r3, [sp, #44]	; 0x2c
   11040:	mov	fp, r3
   11044:	mov	sl, r3
   11048:	mov	r5, r3
   1104c:	mov	r9, r3
   11050:	str	r3, [sp, #12]
   11054:	mov	r2, #0
   11058:	mov	r3, #0
   1105c:	strd	r2, [sp, #16]
   11060:	movw	r3, #37260	; 0x918c
   11064:	movt	r3, #2
   11068:	str	r3, [sp, #40]	; 0x28
   1106c:	movw	r3, #37272	; 0x9198
   11070:	movt	r3, #2
   11074:	str	r3, [sp, #60]	; 0x3c
   11078:	movw	r3, #37224	; 0x9168
   1107c:	movt	r3, #2
   11080:	str	r3, [sp, #48]	; 0x30
   11084:	b	11224 <__assert_fail@plt+0x430>
   11088:	movw	r3, #37136	; 0x9110
   1108c:	movt	r3, #2
   11090:	ldr	r6, [r3]
   11094:	ldr	r0, [r4, #32]
   11098:	bl	10ca4 <strerror@plt>
   1109c:	mov	r3, r0
   110a0:	add	r2, r4, #168	; 0xa8
   110a4:	movw	r1, #32552	; 0x7f28
   110a8:	movt	r1, #1
   110ac:	mov	r0, r6
   110b0:	bl	10cec <fprintf@plt>
   110b4:	mov	r2, #1
   110b8:	str	r2, [r4, #16]
   110bc:	movw	r3, #37256	; 0x9188
   110c0:	movt	r3, #2
   110c4:	str	r2, [r3]
   110c8:	b	11218 <__assert_fail@plt+0x424>
   110cc:	cmp	r3, #1
   110d0:	bne	1124c <__assert_fail@plt+0x458>
   110d4:	movw	r3, #37280	; 0x91a0
   110d8:	movt	r3, #2
   110dc:	ldr	r3, [r3]
   110e0:	cmp	r3, #0
   110e4:	moveq	r3, #1
   110e8:	streq	r3, [r4, #16]
   110ec:	bne	1124c <__assert_fail@plt+0x458>
   110f0:	b	11218 <__assert_fail@plt+0x424>
   110f4:	movw	r3, #37296	; 0x91b0
   110f8:	movt	r3, #2
   110fc:	ldr	r3, [r3]
   11100:	cmp	r3, #0
   11104:	moveq	r3, #1
   11108:	streq	r3, [r4, #16]
   1110c:	bne	1124c <__assert_fail@plt+0x458>
   11110:	b	11218 <__assert_fail@plt+0x424>
   11114:	mov	r3, #0
   11118:	str	r3, [sp, #24]
   1111c:	add	r2, sp, #96	; 0x60
   11120:	ldr	r0, [r4, #88]	; 0x58
   11124:	mov	r1, #0
   11128:	bl	175c4 <__assert_fail@plt+0x67d0>
   1112c:	str	r0, [sp, #28]
   11130:	ldr	r3, [sp, #24]
   11134:	cmp	r3, #0
   11138:	beq	114a8 <__assert_fail@plt+0x6b4>
   1113c:	ldr	r0, [sp, #28]
   11140:	bl	10cc8 <strlen@plt>
   11144:	mov	r6, r0
   11148:	ldr	r3, [sp, #36]	; 0x24
   1114c:	cmp	r3, r0
   11150:	movlt	r3, r0
   11154:	str	r3, [sp, #36]	; 0x24
   11158:	ldr	r0, [sp, #24]
   1115c:	bl	10cc8 <strlen@plt>
   11160:	mov	r3, r0
   11164:	str	r0, [sp, #52]	; 0x34
   11168:	ldr	r2, [sp, #32]
   1116c:	cmp	r2, r0
   11170:	movge	r3, r2
   11174:	str	r3, [sp, #32]
   11178:	ldr	r3, [sp, #48]	; 0x30
   1117c:	ldr	r0, [r3]
   11180:	cmp	r0, #0
   11184:	beq	111a8 <__assert_fail@plt+0x3b4>
   11188:	ldr	r3, [sp, #56]	; 0x38
   1118c:	cmp	r3, #1
   11190:	movlt	r3, #1
   11194:	str	r3, [sp, #56]	; 0x38
   11198:	movw	r3, #32548	; 0x7f24
   1119c:	movt	r3, #1
   111a0:	str	r3, [sp, #64]	; 0x40
   111a4:	mov	r0, #1
   111a8:	ldr	r3, [sp, #52]	; 0x34
   111ac:	add	r3, r6, r3
   111b0:	add	r3, r3, #19
   111b4:	add	r0, r3, r0
   111b8:	bl	17800 <__assert_fail@plt+0x6a0c>
   111bc:	subs	r7, r0, #0
   111c0:	beq	11320 <__assert_fail@plt+0x52c>
   111c4:	add	r0, r7, #12
   111c8:	str	r0, [r7]
   111cc:	ldr	r1, [sp, #28]
   111d0:	bl	10c68 <strcpy@plt>
   111d4:	add	r0, r6, #13
   111d8:	add	r0, r7, r0
   111dc:	str	r0, [r7, #4]
   111e0:	ldr	r1, [sp, #24]
   111e4:	bl	10c68 <strcpy@plt>
   111e8:	ldr	r3, [r4, #80]	; 0x50
   111ec:	and	r3, r3, #45056	; 0xb000
   111f0:	cmp	r3, #8192	; 0x2000
   111f4:	ldr	r3, [sp, #44]	; 0x2c
   111f8:	moveq	r3, #1
   111fc:	str	r3, [sp, #44]	; 0x2c
   11200:	ldr	r3, [sp, #48]	; 0x30
   11204:	ldr	r3, [r3]
   11208:	cmp	r3, #0
   1120c:	bne	11360 <__assert_fail@plt+0x56c>
   11210:	str	r7, [r4, #20]
   11214:	add	r8, r8, #1
   11218:	ldr	r4, [r4, #8]
   1121c:	cmp	r4, #0
   11220:	beq	11380 <__assert_fail@plt+0x58c>
   11224:	ldrh	r3, [r4, #56]	; 0x38
   11228:	cmp	r3, #10
   1122c:	cmpne	r3, #7
   11230:	beq	11088 <__assert_fail@plt+0x294>
   11234:	ldr	r2, [sp, #4]
   11238:	cmp	r2, #0
   1123c:	beq	110cc <__assert_fail@plt+0x2d8>
   11240:	ldrb	r3, [r4, #168]	; 0xa8
   11244:	cmp	r3, #46	; 0x2e
   11248:	beq	110f4 <__assert_fail@plt+0x300>
   1124c:	ldr	r3, [r4, #52]	; 0x34
   11250:	cmp	r5, r3
   11254:	movcc	r5, r3
   11258:	ldr	r3, [sp, #8]
   1125c:	cmp	r3, #0
   11260:	beq	11214 <__assert_fail@plt+0x420>
   11264:	ldrd	r2, [r4, #128]	; 0x80
   11268:	asr	r1, r9, #31
   1126c:	cmp	r9, r2
   11270:	sbcs	r1, r1, r3
   11274:	movlt	r9, r2
   11278:	ldrd	r0, [r4, #160]	; 0xa0
   1127c:	mov	r7, #0
   11280:	cmp	r1, r7
   11284:	cmpeq	r0, fp
   11288:	movhi	fp, r0
   1128c:	ldr	r1, [r4, #84]	; 0x54
   11290:	cmp	sl, r1
   11294:	movcc	sl, r1
   11298:	ldrd	r0, [r4, #112]	; 0x70
   1129c:	ldrd	r6, [sp, #16]
   112a0:	cmp	r6, r0
   112a4:	sbcs	ip, r7, r1
   112a8:	strdlt	r0, [sp, #16]
   112ac:	ldr	r1, [sp, #12]
   112b0:	add	r3, r1, r2
   112b4:	str	r3, [sp, #12]
   112b8:	ldr	r3, [sp, #40]	; 0x28
   112bc:	ldr	r3, [r3]
   112c0:	cmp	r3, #0
   112c4:	beq	11214 <__assert_fail@plt+0x420>
   112c8:	ldr	r3, [sp, #60]	; 0x3c
   112cc:	ldr	r3, [r3]
   112d0:	cmp	r3, #0
   112d4:	bne	11114 <__assert_fail@plt+0x320>
   112d8:	ldr	r0, [r4, #88]	; 0x58
   112dc:	bl	10bb4 <getpwuid@plt>
   112e0:	cmp	r0, #0
   112e4:	beq	114c0 <__assert_fail@plt+0x6cc>
   112e8:	ldr	r6, [r0]
   112ec:	str	r6, [sp, #28]
   112f0:	ldr	r0, [r4, #92]	; 0x5c
   112f4:	bl	10de8 <getgrgid@plt>
   112f8:	cmp	r0, #0
   112fc:	beq	1149c <__assert_fail@plt+0x6a8>
   11300:	ldr	r3, [r0]
   11304:	str	r3, [sp, #24]
   11308:	cmp	r6, #0
   1130c:	bne	11130 <__assert_fail@plt+0x33c>
   11310:	b	1111c <__assert_fail@plt+0x328>
   11314:	ldr	r3, [sp, #28]
   11318:	str	r3, [sp, #24]
   1131c:	b	1111c <__assert_fail@plt+0x328>
   11320:	movw	r3, #37136	; 0x9110
   11324:	movt	r3, #2
   11328:	ldr	r4, [r3]
   1132c:	bl	10cf8 <__errno_location@plt>
   11330:	ldr	r0, [r0]
   11334:	bl	10ca4 <strerror@plt>
   11338:	mov	r2, r0
   1133c:	movw	r1, #32560	; 0x7f30
   11340:	movt	r1, #1
   11344:	mov	r0, r4
   11348:	bl	10cec <fprintf@plt>
   1134c:	movw	r3, #37256	; 0x9188
   11350:	movt	r3, #2
   11354:	mov	r2, #1
   11358:	str	r2, [r3]
   1135c:	b	113f8 <__assert_fail@plt+0x604>
   11360:	ldr	r3, [sp, #52]	; 0x34
   11364:	add	r0, r6, r3
   11368:	add	r0, r0, #14
   1136c:	add	r0, r7, r0
   11370:	str	r0, [r7, #8]
   11374:	ldr	r1, [sp, #64]	; 0x40
   11378:	bl	10c68 <strcpy@plt>
   1137c:	b	11210 <__assert_fail@plt+0x41c>
   11380:	mov	r3, r9
   11384:	mov	r9, fp
   11388:	mov	fp, r3
   1138c:	cmp	r8, #0
   11390:	beq	113f8 <__assert_fail@plt+0x604>
   11394:	ldr	r3, [sp, #68]	; 0x44
   11398:	str	r3, [sp, #144]	; 0x90
   1139c:	str	r8, [sp, #156]	; 0x9c
   113a0:	str	r5, [sp, #160]	; 0xa0
   113a4:	ldr	r3, [sp, #8]
   113a8:	cmp	r3, #0
   113ac:	bne	11414 <__assert_fail@plt+0x620>
   113b0:	movw	r4, #37148	; 0x911c
   113b4:	movt	r4, #2
   113b8:	ldr	r3, [r4, #4]
   113bc:	add	r0, sp, #144	; 0x90
   113c0:	blx	r3
   113c4:	mov	r3, #1
   113c8:	str	r3, [r4, #8]
   113cc:	movw	r3, #37260	; 0x918c
   113d0:	movt	r3, #2
   113d4:	ldr	r3, [r3]
   113d8:	cmp	r3, #0
   113dc:	beq	113f8 <__assert_fail@plt+0x604>
   113e0:	ldr	r4, [sp, #68]	; 0x44
   113e4:	ldr	r0, [r4, #20]
   113e8:	bl	13360 <__assert_fail@plt+0x256c>
   113ec:	ldr	r4, [r4, #8]
   113f0:	cmp	r4, #0
   113f4:	bne	113e4 <__assert_fail@plt+0x5f0>
   113f8:	add	sp, sp, #196	; 0xc4
   113fc:	ldrd	r4, [sp]
   11400:	ldrd	r6, [sp, #8]
   11404:	ldrd	r8, [sp, #16]
   11408:	ldrd	sl, [sp, #24]
   1140c:	add	sp, sp, #32
   11410:	pop	{pc}		; (ldr pc, [sp], #4)
   11414:	ldr	r3, [sp, #44]	; 0x2c
   11418:	str	r3, [sp, #152]	; 0x98
   1141c:	ldr	r3, [sp, #12]
   11420:	str	r3, [sp, #148]	; 0x94
   11424:	add	r2, sp, #120	; 0x78
   11428:	mov	r0, fp
   1142c:	asr	r1, fp, #31
   11430:	bl	175c4 <__assert_fail@plt+0x67d0>
   11434:	bl	10cc8 <strlen@plt>
   11438:	str	r0, [sp, #164]	; 0xa4
   1143c:	ldr	r3, [sp, #56]	; 0x38
   11440:	str	r3, [sp, #168]	; 0xa8
   11444:	ldr	r3, [sp, #32]
   11448:	str	r3, [sp, #172]	; 0xac
   1144c:	add	r2, sp, #120	; 0x78
   11450:	mov	r0, r9
   11454:	mov	r1, r4
   11458:	bl	175c4 <__assert_fail@plt+0x67d0>
   1145c:	bl	10cc8 <strlen@plt>
   11460:	str	r0, [sp, #176]	; 0xb0
   11464:	add	r2, sp, #120	; 0x78
   11468:	mov	r0, sl
   1146c:	mov	r1, r4
   11470:	bl	175c4 <__assert_fail@plt+0x67d0>
   11474:	bl	10cc8 <strlen@plt>
   11478:	str	r0, [sp, #180]	; 0xb4
   1147c:	add	r2, sp, #120	; 0x78
   11480:	ldrd	r0, [sp, #16]
   11484:	bl	175c4 <__assert_fail@plt+0x67d0>
   11488:	bl	10cc8 <strlen@plt>
   1148c:	str	r0, [sp, #184]	; 0xb8
   11490:	ldr	r3, [sp, #36]	; 0x24
   11494:	str	r3, [sp, #188]	; 0xbc
   11498:	b	113b0 <__assert_fail@plt+0x5bc>
   1149c:	ldr	r3, [sp, #28]
   114a0:	cmp	r3, #0
   114a4:	beq	11314 <__assert_fail@plt+0x520>
   114a8:	add	r2, sp, #72	; 0x48
   114ac:	ldr	r0, [r4, #92]	; 0x5c
   114b0:	mov	r1, #0
   114b4:	bl	175c4 <__assert_fail@plt+0x67d0>
   114b8:	str	r0, [sp, #24]
   114bc:	b	1113c <__assert_fail@plt+0x348>
   114c0:	ldr	r0, [r4, #92]	; 0x5c
   114c4:	bl	10de8 <getgrgid@plt>
   114c8:	subs	r3, r0, #0
   114cc:	str	r3, [sp, #28]
   114d0:	beq	1149c <__assert_fail@plt+0x6a8>
   114d4:	ldr	r3, [sp, #28]
   114d8:	ldr	r3, [r3]
   114dc:	str	r3, [sp, #24]
   114e0:	b	1111c <__assert_fail@plt+0x328>
   114e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114e8:	strd	r6, [sp, #8]
   114ec:	strd	r8, [sp, #16]
   114f0:	strd	sl, [sp, #24]
   114f4:	str	lr, [sp, #32]
   114f8:	sub	sp, sp, #4
   114fc:	mov	sl, r0
   11500:	mov	r6, r1
   11504:	mov	r4, r2
   11508:	movw	r3, #37244	; 0x917c
   1150c:	movt	r3, #2
   11510:	ldr	r3, [r3]
   11514:	movw	r2, #3848	; 0xf08
   11518:	movt	r2, #1
   1151c:	cmp	r3, #0
   11520:	movne	r2, #0
   11524:	mov	r1, r4
   11528:	mov	r0, r6
   1152c:	bl	149d0 <__assert_fail@plt+0x3bdc>
   11530:	subs	r5, r0, #0
   11534:	beq	115a0 <__assert_fail@plt+0x7ac>
   11538:	mov	r1, #0
   1153c:	mov	r0, r5
   11540:	bl	155d0 <__assert_fail@plt+0x47dc>
   11544:	mov	r1, r0
   11548:	mov	r0, #0
   1154c:	bl	10fcc <__assert_fail@plt+0x1d8>
   11550:	movw	r3, #37280	; 0x91a0
   11554:	movt	r3, #2
   11558:	ldr	r7, [r3]
   1155c:	cmp	r7, #0
   11560:	bne	11750 <__assert_fail@plt+0x95c>
   11564:	movw	r3, #37228	; 0x916c
   11568:	movt	r3, #2
   1156c:	ldr	r3, [r3]
   11570:	cmp	r3, #0
   11574:	bne	11584 <__assert_fail@plt+0x790>
   11578:	and	r7, r4, #8
   1157c:	cmp	r7, #0
   11580:	movne	r7, #4096	; 0x1000
   11584:	movw	r6, #37136	; 0x9110
   11588:	movt	r6, #2
   1158c:	movw	r9, #32552	; 0x7f28
   11590:	movt	r9, #1
   11594:	movw	r8, #37256	; 0x9188
   11598:	movt	r8, #2
   1159c:	b	116d4 <__assert_fail@plt+0x8e0>
   115a0:	movw	r3, #37136	; 0x9110
   115a4:	movt	r3, #2
   115a8:	ldr	r4, [r3]
   115ac:	ldr	r5, [r6]
   115b0:	bl	10cf8 <__errno_location@plt>
   115b4:	ldr	r0, [r0]
   115b8:	bl	10ca4 <strerror@plt>
   115bc:	mov	r3, r0
   115c0:	mov	r2, r5
   115c4:	movw	r1, #32572	; 0x7f3c
   115c8:	movt	r1, #1
   115cc:	mov	r0, r4
   115d0:	bl	10cec <fprintf@plt>
   115d4:	movw	r3, #37256	; 0x9188
   115d8:	movt	r3, #2
   115dc:	mov	r2, #1
   115e0:	str	r2, [r3]
   115e4:	b	11750 <__assert_fail@plt+0x95c>
   115e8:	ldrb	r3, [r4, #168]	; 0xa8
   115ec:	cmp	r3, #46	; 0x2e
   115f0:	beq	11664 <__assert_fail@plt+0x870>
   115f4:	movw	r3, #37148	; 0x911c
   115f8:	movt	r3, #2
   115fc:	ldr	r3, [r3, #8]
   11600:	cmp	r3, #0
   11604:	bne	11688 <__assert_fail@plt+0x894>
   11608:	cmp	sl, #1
   1160c:	bgt	1169c <__assert_fail@plt+0x8a8>
   11610:	mov	r1, r7
   11614:	mov	r0, r5
   11618:	bl	155d0 <__assert_fail@plt+0x47dc>
   1161c:	mov	fp, r0
   11620:	mov	r1, r0
   11624:	mov	r0, r4
   11628:	bl	10fcc <__assert_fail@plt+0x1d8>
   1162c:	movw	r3, #37228	; 0x916c
   11630:	movt	r3, #2
   11634:	ldr	r3, [r3]
   11638:	adds	fp, fp, #0
   1163c:	movne	fp, #1
   11640:	cmp	r3, #0
   11644:	movne	fp, #0
   11648:	cmp	fp, #0
   1164c:	beq	116d4 <__assert_fail@plt+0x8e0>
   11650:	mov	r2, #4
   11654:	mov	r1, r4
   11658:	mov	r0, r5
   1165c:	bl	15598 <__assert_fail@plt+0x47a4>
   11660:	b	116d4 <__assert_fail@plt+0x8e0>
   11664:	ldr	r3, [r4, #48]	; 0x30
   11668:	cmp	r3, #0
   1166c:	beq	115f4 <__assert_fail@plt+0x800>
   11670:	movw	r3, #37296	; 0x91b0
   11674:	movt	r3, #2
   11678:	ldr	r3, [r3]
   1167c:	cmp	r3, #0
   11680:	beq	116d4 <__assert_fail@plt+0x8e0>
   11684:	b	115f4 <__assert_fail@plt+0x800>
   11688:	ldr	r1, [r4, #28]
   1168c:	movw	r0, #32592	; 0x7f50
   11690:	movt	r0, #1
   11694:	bl	10bc0 <printf@plt>
   11698:	b	11610 <__assert_fail@plt+0x81c>
   1169c:	ldr	r1, [r4, #28]
   116a0:	movw	r0, #32600	; 0x7f58
   116a4:	movt	r0, #1
   116a8:	bl	10bc0 <printf@plt>
   116ac:	movw	r3, #37148	; 0x911c
   116b0:	movt	r3, #2
   116b4:	mov	r2, #1
   116b8:	str	r2, [r3, #8]
   116bc:	b	11610 <__assert_fail@plt+0x81c>
   116c0:	add	r2, r4, #168	; 0xa8
   116c4:	movw	r1, #32608	; 0x7f60
   116c8:	movt	r1, #1
   116cc:	ldr	r0, [r6]
   116d0:	bl	10cec <fprintf@plt>
   116d4:	mov	r0, r5
   116d8:	bl	14f08 <__assert_fail@plt+0x4114>
   116dc:	subs	r4, r0, #0
   116e0:	beq	11740 <__assert_fail@plt+0x94c>
   116e4:	ldrh	r3, [r4, #56]	; 0x38
   116e8:	sub	r3, r3, #1
   116ec:	cmp	r3, #6
   116f0:	ldrls	pc, [pc, r3, lsl #2]
   116f4:	b	116d4 <__assert_fail@plt+0x8e0>
   116f8:	andeq	r1, r1, r8, ror #11
   116fc:	andeq	r1, r1, r0, asr #13
   11700:	ldrdeq	r1, [r1], -r4
   11704:	andeq	r1, r1, r4, lsl r7
   11708:	ldrdeq	r1, [r1], -r4
   1170c:	ldrdeq	r1, [r1], -r4
   11710:	andeq	r1, r1, r4, lsl r7
   11714:	ldr	fp, [r6]
   11718:	ldr	r0, [r4, #32]
   1171c:	bl	10ca4 <strerror@plt>
   11720:	mov	r3, r0
   11724:	add	r2, r4, #168	; 0xa8
   11728:	mov	r1, r9
   1172c:	mov	r0, fp
   11730:	bl	10cec <fprintf@plt>
   11734:	mov	r3, #1
   11738:	str	r3, [r8]
   1173c:	b	116d4 <__assert_fail@plt+0x8e0>
   11740:	bl	10cf8 <__errno_location@plt>
   11744:	ldr	r0, [r0]
   11748:	cmp	r0, #0
   1174c:	bne	1176c <__assert_fail@plt+0x978>
   11750:	add	sp, sp, #4
   11754:	ldrd	r4, [sp]
   11758:	ldrd	r6, [sp, #8]
   1175c:	ldrd	r8, [sp, #16]
   11760:	ldrd	sl, [sp, #24]
   11764:	add	sp, sp, #32
   11768:	pop	{pc}		; (ldr pc, [sp], #4)
   1176c:	movw	r3, #37136	; 0x9110
   11770:	movt	r3, #2
   11774:	ldr	r4, [r3]
   11778:	bl	10ca4 <strerror@plt>
   1177c:	mov	r2, r0
   11780:	movw	r1, #32640	; 0x7f80
   11784:	movt	r1, #1
   11788:	mov	r0, r4
   1178c:	bl	10cec <fprintf@plt>
   11790:	movw	r3, #37256	; 0x9188
   11794:	movt	r3, #2
   11798:	mov	r2, #1
   1179c:	str	r2, [r3]
   117a0:	b	11750 <__assert_fail@plt+0x95c>
   117a4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   117a8:	strd	r6, [sp, #8]
   117ac:	strd	r8, [sp, #16]
   117b0:	str	lr, [sp, #24]
   117b4:	sub	sp, sp, #12
   117b8:	mov	r4, r0
   117bc:	mov	r6, r1
   117c0:	movw	r2, #37148	; 0x911c
   117c4:	movt	r2, #2
   117c8:	mov	r3, #0
   117cc:	str	r3, [r2, #8]
   117d0:	movw	r2, #37232	; 0x9170
   117d4:	movt	r2, #2
   117d8:	str	r3, [r2]
   117dc:	movw	r2, #37224	; 0x9168
   117e0:	movt	r2, #2
   117e4:	str	r3, [r2]
   117e8:	movw	r2, #37276	; 0x919c
   117ec:	movt	r2, #2
   117f0:	str	r3, [r2]
   117f4:	movw	r2, #37220	; 0x9164
   117f8:	movt	r2, #2
   117fc:	str	r3, [r2]
   11800:	movw	r2, #37240	; 0x9178
   11804:	movt	r2, #2
   11808:	str	r3, [r2]
   1180c:	movw	r2, #37292	; 0x91ac
   11810:	movt	r2, #2
   11814:	str	r3, [r2]
   11818:	movw	r2, #37260	; 0x918c
   1181c:	movt	r2, #2
   11820:	str	r3, [r2]
   11824:	movw	r2, #37296	; 0x91b0
   11828:	movt	r2, #2
   1182c:	str	r3, [r2]
   11830:	movw	r2, #37280	; 0x91a0
   11834:	movt	r2, #2
   11838:	str	r3, [r2]
   1183c:	movw	r2, #37272	; 0x9198
   11840:	movt	r2, #2
   11844:	str	r3, [r2]
   11848:	movw	r2, #37244	; 0x917c
   1184c:	movt	r2, #2
   11850:	str	r3, [r2]
   11854:	movw	r2, #37300	; 0x91b4
   11858:	movt	r2, #2
   1185c:	str	r3, [r2]
   11860:	movw	r2, #37216	; 0x9160
   11864:	movt	r2, #2
   11868:	str	r3, [r2]
   1186c:	movw	r2, #37268	; 0x9194
   11870:	movt	r2, #2
   11874:	str	r3, [r2]
   11878:	movw	r2, #37236	; 0x9174
   1187c:	movt	r2, #2
   11880:	str	r3, [r2]
   11884:	movw	r2, #37228	; 0x916c
   11888:	movt	r2, #2
   1188c:	str	r3, [r2]
   11890:	movw	r2, #37212	; 0x915c
   11894:	movt	r2, #2
   11898:	str	r3, [r2]
   1189c:	movw	r2, #37304	; 0x91b8
   118a0:	movt	r2, #2
   118a4:	str	r3, [r2]
   118a8:	movw	r2, #37284	; 0x91a4
   118ac:	movt	r2, #2
   118b0:	str	r3, [r2]
   118b4:	movw	r2, #37208	; 0x9158
   118b8:	movt	r2, #2
   118bc:	str	r3, [r2]
   118c0:	movw	r2, #37252	; 0x9184
   118c4:	movt	r2, #2
   118c8:	str	r3, [r2]
   118cc:	movw	r2, #37264	; 0x9190
   118d0:	movt	r2, #2
   118d4:	str	r3, [r2]
   118d8:	movw	r2, #37248	; 0x9180
   118dc:	movt	r2, #2
   118e0:	str	r3, [r2]
   118e4:	mov	r0, #1
   118e8:	bl	10da0 <isatty@plt>
   118ec:	cmp	r0, #0
   118f0:	bne	11a94 <__assert_fail@plt+0xca0>
   118f4:	movw	r3, #37216	; 0x9160
   118f8:	movt	r3, #2
   118fc:	mov	r2, #1
   11900:	str	r2, [r3]
   11904:	bl	10bcc <getuid@plt>
   11908:	cmp	r0, #0
   1190c:	bne	11920 <__assert_fail@plt+0xb2c>
   11910:	movw	r3, #37296	; 0x91b0
   11914:	movt	r3, #2
   11918:	mov	r2, #1
   1191c:	str	r2, [r3]
   11920:	movw	r3, #37124	; 0x9104
   11924:	movt	r3, #2
   11928:	mov	r2, #1
   1192c:	str	r2, [r3]
   11930:	mov	r7, #20
   11934:	movw	r5, #32664	; 0x7f98
   11938:	movt	r5, #1
   1193c:	movw	r9, #37252	; 0x9184
   11940:	movt	r9, #2
   11944:	movw	r8, #37148	; 0x911c
   11948:	movt	r8, #2
   1194c:	mov	r2, r5
   11950:	mov	r1, r6
   11954:	mov	r0, r4
   11958:	bl	163d8 <__assert_fail@plt+0x55e4>
   1195c:	cmn	r0, #1
   11960:	beq	11e74 <__assert_fail@plt+0x1080>
   11964:	sub	r0, r0, #49	; 0x31
   11968:	cmp	r0, #71	; 0x47
   1196c:	ldrls	pc, [pc, r0, lsl #2]
   11970:	b	11e6c <__assert_fail@plt+0x1078>
   11974:	andeq	r1, r1, r4, lsl fp
   11978:	andeq	r1, r1, ip, ror #28
   1197c:	andeq	r1, r1, ip, ror #28
   11980:	andeq	r1, r1, ip, ror #28
   11984:	andeq	r1, r1, ip, ror #28
   11988:	andeq	r1, r1, ip, ror #28
   1198c:	andeq	r1, r1, ip, ror #28
   11990:	andeq	r1, r1, ip, ror #28
   11994:	andeq	r1, r1, ip, ror #28
   11998:	andeq	r1, r1, ip, ror #28
   1199c:	andeq	r1, r1, ip, ror #28
   119a0:	andeq	r1, r1, ip, ror #28
   119a4:	andeq	r1, r1, ip, ror #28
   119a8:	andeq	r1, r1, ip, ror #28
   119ac:	andeq	r1, r1, ip, ror #28
   119b0:	andeq	r1, r1, ip, ror #28
   119b4:	andeq	r1, r1, ip, asr sp
   119b8:	andeq	r1, r1, ip, ror #28
   119bc:	andeq	r1, r1, ip, asr fp
   119c0:	andeq	r1, r1, ip, ror #28
   119c4:	andeq	r1, r1, ip, ror #28
   119c8:	andeq	r1, r1, r4, lsr #26
   119cc:	andeq	r1, r1, ip, ror #28
   119d0:	andeq	r1, r1, ip, ror #28
   119d4:	andeq	r1, r1, ip, ror #28
   119d8:	andeq	r1, r1, ip, ror #28
   119dc:	andeq	r1, r1, ip, ror #28
   119e0:	andeq	r1, r1, r8, lsr sp
   119e4:	andeq	r1, r1, ip, ror #28
   119e8:	andeq	r1, r1, ip, ror #28
   119ec:	andeq	r1, r1, ip, ror #28
   119f0:	andeq	r1, r1, ip, ror #28
   119f4:	andeq	r1, r1, ip, ror #28
   119f8:	andeq	r1, r1, r4, asr #26
   119fc:	andeq	r1, r1, r0, lsr #28
   11a00:	andeq	r1, r1, r0, asr #28
   11a04:	andeq	r1, r1, ip, ror #28
   11a08:	andeq	r1, r1, ip, ror #28
   11a0c:	andeq	r1, r1, r0, ror #28
   11a10:	andeq	r1, r1, ip, ror #28
   11a14:	andeq	r1, r1, ip, ror #28
   11a18:	andeq	r1, r1, ip, ror #28
   11a1c:	andeq	r1, r1, ip, ror #28
   11a20:	andeq	r1, r1, ip, ror #28
   11a24:	andeq	r1, r1, ip, ror #28
   11a28:	andeq	r1, r1, ip, ror #28
   11a2c:	andeq	r1, r1, ip, ror #28
   11a30:	andeq	r1, r1, ip, ror #28
   11a34:	andeq	r1, r1, r8, asr sp
   11a38:	andeq	r1, r1, ip, ror #28
   11a3c:	ldrdeq	r1, [r1], -ip
   11a40:	andeq	r1, r1, r0, ror sp
   11a44:	andeq	r1, r1, ip, ror #28
   11a48:	muleq	r1, r4, sp
   11a4c:	andeq	r1, r1, ip, asr #18
   11a50:	andeq	r1, r1, ip, ror #28
   11a54:	andeq	r1, r1, r8, lsr #27
   11a58:	andeq	r1, r1, ip, ror #28
   11a5c:			; <UNDEFINED> instruction: 0x00011dbc
   11a60:	andeq	r1, r1, r4, lsr #23
   11a64:	strdeq	r1, [r1], -r8
   11a68:	andeq	r1, r1, r8, lsl #25
   11a6c:	ldrdeq	r1, [r1], -r0
   11a70:	andeq	r1, r1, r4, ror #27
   11a74:	strdeq	r1, [r1], -r8
   11a78:	andeq	r1, r1, ip, lsl #28
   11a7c:	andeq	r1, r1, ip, lsr #28
   11a80:	andeq	r1, r1, r4, asr lr
   11a84:	andeq	r1, r1, r0, lsl #26
   11a88:	andeq	r1, r1, ip, ror #28
   11a8c:	andeq	r1, r1, ip, ror #28
   11a90:	andeq	r1, r1, r0, asr #24
   11a94:	movw	r0, #32656	; 0x7f90
   11a98:	movt	r0, #1
   11a9c:	bl	10c80 <getenv@plt>
   11aa0:	cmp	r0, #0
   11aa4:	beq	11ae0 <__assert_fail@plt+0xcec>
   11aa8:	mov	r2, #10
   11aac:	mov	r1, #0
   11ab0:	bl	10ba8 <strtol@plt>
   11ab4:	movw	r3, #37104	; 0x90f0
   11ab8:	movt	r3, #2
   11abc:	str	r0, [r3]
   11ac0:	movw	r3, #37300	; 0x91b4
   11ac4:	movt	r3, #2
   11ac8:	mov	r2, #1
   11acc:	str	r2, [r3]
   11ad0:	movw	r3, #37220	; 0x9164
   11ad4:	movt	r3, #2
   11ad8:	str	r2, [r3]
   11adc:	b	11904 <__assert_fail@plt+0xb10>
   11ae0:	mov	r2, sp
   11ae4:	movw	r1, #21523	; 0x5413
   11ae8:	mov	r0, #1
   11aec:	bl	17650 <__assert_fail@plt+0x685c>
   11af0:	cmp	r0, #0
   11af4:	bne	11ac0 <__assert_fail@plt+0xccc>
   11af8:	ldrh	r3, [sp, #2]
   11afc:	cmp	r3, #0
   11b00:	beq	11ac0 <__assert_fail@plt+0xccc>
   11b04:	movw	r2, #37104	; 0x90f0
   11b08:	movt	r2, #2
   11b0c:	str	r3, [r2]
   11b10:	b	11ac0 <__assert_fail@plt+0xccc>
   11b14:	movw	r3, #37216	; 0x9160
   11b18:	movt	r3, #2
   11b1c:	mov	r2, #1
   11b20:	str	r2, [r3]
   11b24:	movw	r2, #37304	; 0x91b8
   11b28:	movt	r2, #2
   11b2c:	mov	r3, #0
   11b30:	str	r3, [r2]
   11b34:	movw	r2, #37260	; 0x918c
   11b38:	movt	r2, #2
   11b3c:	str	r3, [r2]
   11b40:	movw	r2, #37276	; 0x919c
   11b44:	movt	r2, #2
   11b48:	str	r3, [r2]
   11b4c:	movw	r2, #37220	; 0x9164
   11b50:	movt	r2, #2
   11b54:	str	r3, [r2]
   11b58:	b	1194c <__assert_fail@plt+0xb58>
   11b5c:	movw	r3, #37220	; 0x9164
   11b60:	movt	r3, #2
   11b64:	mov	r2, #1
   11b68:	str	r2, [r3]
   11b6c:	movw	r2, #37304	; 0x91b8
   11b70:	movt	r2, #2
   11b74:	mov	r3, #0
   11b78:	str	r3, [r2]
   11b7c:	movw	r2, #37216	; 0x9160
   11b80:	movt	r2, #2
   11b84:	str	r3, [r2]
   11b88:	movw	r2, #37276	; 0x919c
   11b8c:	movt	r2, #2
   11b90:	str	r3, [r2]
   11b94:	movw	r2, #37260	; 0x918c
   11b98:	movt	r2, #2
   11b9c:	str	r3, [r2]
   11ba0:	b	1194c <__assert_fail@plt+0xb58>
   11ba4:	movw	r3, #37260	; 0x918c
   11ba8:	movt	r3, #2
   11bac:	mov	r2, #1
   11bb0:	str	r2, [r3]
   11bb4:	movw	r2, #37272	; 0x9198
   11bb8:	movt	r2, #2
   11bbc:	mov	r3, #0
   11bc0:	str	r3, [r2]
   11bc4:	movw	r2, #37304	; 0x91b8
   11bc8:	movt	r2, #2
   11bcc:	str	r3, [r2]
   11bd0:	movw	r2, #37216	; 0x9160
   11bd4:	movt	r2, #2
   11bd8:	str	r3, [r2]
   11bdc:	movw	r2, #37276	; 0x919c
   11be0:	movt	r2, #2
   11be4:	str	r3, [r2]
   11be8:	movw	r2, #37220	; 0x9164
   11bec:	movt	r2, #2
   11bf0:	str	r3, [r2]
   11bf4:	b	1194c <__assert_fail@plt+0xb58>
   11bf8:	movw	r3, #37304	; 0x91b8
   11bfc:	movt	r3, #2
   11c00:	mov	r2, #1
   11c04:	str	r2, [r3]
   11c08:	movw	r2, #37216	; 0x9160
   11c0c:	movt	r2, #2
   11c10:	mov	r3, #0
   11c14:	str	r3, [r2]
   11c18:	movw	r2, #37260	; 0x918c
   11c1c:	movt	r2, #2
   11c20:	str	r3, [r2]
   11c24:	movw	r2, #37276	; 0x919c
   11c28:	movt	r2, #2
   11c2c:	str	r3, [r2]
   11c30:	movw	r2, #37220	; 0x9164
   11c34:	movt	r2, #2
   11c38:	str	r3, [r2]
   11c3c:	b	1194c <__assert_fail@plt+0xb58>
   11c40:	movw	r3, #37276	; 0x919c
   11c44:	movt	r3, #2
   11c48:	mov	r2, #1
   11c4c:	str	r2, [r3]
   11c50:	movw	r2, #37304	; 0x91b8
   11c54:	movt	r2, #2
   11c58:	mov	r3, #0
   11c5c:	str	r3, [r2]
   11c60:	movw	r2, #37216	; 0x9160
   11c64:	movt	r2, #2
   11c68:	str	r3, [r2]
   11c6c:	movw	r2, #37260	; 0x918c
   11c70:	movt	r2, #2
   11c74:	str	r3, [r2]
   11c78:	movw	r2, #37220	; 0x9164
   11c7c:	movt	r2, #2
   11c80:	str	r3, [r2]
   11c84:	b	1194c <__assert_fail@plt+0xb58>
   11c88:	movw	r3, #37260	; 0x918c
   11c8c:	movt	r3, #2
   11c90:	mov	r2, #1
   11c94:	str	r2, [r3]
   11c98:	movw	r3, #37272	; 0x9198
   11c9c:	movt	r3, #2
   11ca0:	str	r2, [r3]
   11ca4:	movw	r2, #37304	; 0x91b8
   11ca8:	movt	r2, #2
   11cac:	mov	r3, #0
   11cb0:	str	r3, [r2]
   11cb4:	movw	r2, #37216	; 0x9160
   11cb8:	movt	r2, #2
   11cbc:	str	r3, [r2]
   11cc0:	movw	r2, #37276	; 0x919c
   11cc4:	movt	r2, #2
   11cc8:	str	r3, [r2]
   11ccc:	movw	r2, #37220	; 0x9164
   11cd0:	movt	r2, #2
   11cd4:	str	r3, [r2]
   11cd8:	b	1194c <__assert_fail@plt+0xb58>
   11cdc:	movw	r3, #37284	; 0x91a4
   11ce0:	movt	r3, #2
   11ce4:	mov	r2, #1
   11ce8:	str	r2, [r3]
   11cec:	movw	r3, #37240	; 0x9178
   11cf0:	movt	r3, #2
   11cf4:	mov	r2, #0
   11cf8:	str	r2, [r3]
   11cfc:	b	1194c <__assert_fail@plt+0xb58>
   11d00:	movw	r3, #37240	; 0x9178
   11d04:	movt	r3, #2
   11d08:	mov	r2, #1
   11d0c:	str	r2, [r3]
   11d10:	movw	r3, #37284	; 0x91a4
   11d14:	movt	r3, #2
   11d18:	mov	r2, #0
   11d1c:	str	r2, [r3]
   11d20:	b	1194c <__assert_fail@plt+0xb58>
   11d24:	movw	r3, #37248	; 0x9180
   11d28:	movt	r3, #2
   11d2c:	mov	r2, #1
   11d30:	str	r2, [r3]
   11d34:	b	1194c <__assert_fail@plt+0xb58>
   11d38:	bic	r7, r7, #16
   11d3c:	orr	r7, r7, #2
   11d40:	b	1194c <__assert_fail@plt+0xb58>
   11d44:	movw	r3, #37228	; 0x916c
   11d48:	movt	r3, #2
   11d4c:	mov	r2, #1
   11d50:	str	r2, [r3]
   11d54:	b	1194c <__assert_fail@plt+0xb58>
   11d58:	orr	r7, r7, #32
   11d5c:	movw	r3, #37296	; 0x91b0
   11d60:	movt	r3, #2
   11d64:	mov	r2, #1
   11d68:	str	r2, [r3]
   11d6c:	b	1194c <__assert_fail@plt+0xb58>
   11d70:	movw	r3, #37280	; 0x91a0
   11d74:	movt	r3, #2
   11d78:	mov	r2, #1
   11d7c:	str	r2, [r3]
   11d80:	movw	r3, #37228	; 0x916c
   11d84:	movt	r3, #2
   11d88:	mov	r2, #0
   11d8c:	str	r2, [r3]
   11d90:	b	1194c <__assert_fail@plt+0xb58>
   11d94:	movw	r3, #37244	; 0x917c
   11d98:	movt	r3, #2
   11d9c:	mov	r2, #1
   11da0:	str	r2, [r3]
   11da4:	b	1194c <__assert_fail@plt+0xb58>
   11da8:	movw	r3, #37232	; 0x9170
   11dac:	movt	r3, #2
   11db0:	mov	r2, #1
   11db4:	str	r2, [r3]
   11db8:	b	1194c <__assert_fail@plt+0xb58>
   11dbc:	movw	r3, #37288	; 0x91a8
   11dc0:	movt	r3, #2
   11dc4:	mov	r2, #1024	; 0x400
   11dc8:	str	r2, [r3]
   11dcc:	b	1194c <__assert_fail@plt+0xb58>
   11dd0:	movw	r3, #37224	; 0x9168
   11dd4:	movt	r3, #2
   11dd8:	mov	r2, #1
   11ddc:	str	r2, [r3]
   11de0:	b	1194c <__assert_fail@plt+0xb58>
   11de4:	movw	r3, #37264	; 0x9190
   11de8:	movt	r3, #2
   11dec:	mov	r2, #1
   11df0:	str	r2, [r3]
   11df4:	b	1194c <__assert_fail@plt+0xb58>
   11df8:	movw	r3, #37300	; 0x91b4
   11dfc:	movt	r3, #2
   11e00:	mov	r2, #1
   11e04:	str	r2, [r3]
   11e08:	b	1194c <__assert_fail@plt+0xb58>
   11e0c:	movw	r3, #37236	; 0x9174
   11e10:	movt	r3, #2
   11e14:	mov	r2, #1
   11e18:	str	r2, [r3]
   11e1c:	b	1194c <__assert_fail@plt+0xb58>
   11e20:	mov	r3, #1
   11e24:	str	r3, [r8, #12]
   11e28:	b	1194c <__assert_fail@plt+0xb58>
   11e2c:	movw	r3, #37208	; 0x9158
   11e30:	movt	r3, #2
   11e34:	mov	r2, #1
   11e38:	str	r2, [r3]
   11e3c:	b	1194c <__assert_fail@plt+0xb58>
   11e40:	movw	r3, #37268	; 0x9194
   11e44:	movt	r3, #2
   11e48:	mov	r2, #1
   11e4c:	str	r2, [r3]
   11e50:	b	1194c <__assert_fail@plt+0xb58>
   11e54:	mov	r3, #2
   11e58:	str	r3, [r8, #12]
   11e5c:	b	1194c <__assert_fail@plt+0xb58>
   11e60:	mov	r3, #1
   11e64:	str	r3, [r9]
   11e68:	b	1194c <__assert_fail@plt+0xb58>
   11e6c:	bl	12f3c <__assert_fail@plt+0x2148>
   11e70:	b	12188 <__assert_fail@plt+0x1394>
   11e74:	movw	r3, #37124	; 0x9104
   11e78:	movt	r3, #2
   11e7c:	ldr	r1, [r3]
   11e80:	sub	r0, r4, r1
   11e84:	movw	r3, #37260	; 0x918c
   11e88:	movt	r3, #2
   11e8c:	ldr	r2, [r3]
   11e90:	cmp	r2, #0
   11e94:	bne	120e0 <__assert_fail@plt+0x12ec>
   11e98:	movw	r3, #37248	; 0x9180
   11e9c:	movt	r3, #2
   11ea0:	ldr	lr, [r3]
   11ea4:	movw	r3, #37232	; 0x9170
   11ea8:	movt	r3, #2
   11eac:	movw	ip, #37208	; 0x9158
   11eb0:	movt	ip, #2
   11eb4:	ldr	r3, [r3]
   11eb8:	ldr	ip, [ip]
   11ebc:	orr	r3, r3, ip
   11ec0:	orr	r3, r3, lr
   11ec4:	movw	ip, #37264	; 0x9190
   11ec8:	movt	ip, #2
   11ecc:	ldr	ip, [ip]
   11ed0:	orr	r3, r3, ip
   11ed4:	movw	ip, #37148	; 0x911c
   11ed8:	movt	ip, #2
   11edc:	ldr	ip, [ip, #12]
   11ee0:	orrs	r3, r3, ip
   11ee4:	orreq	r7, r7, #8
   11ee8:	movw	r3, #37280	; 0x91a0
   11eec:	movt	r3, #2
   11ef0:	ldr	r3, [r3]
   11ef4:	orrs	r3, lr, r3
   11ef8:	orreq	r7, r7, #1
   11efc:	movw	r3, #37252	; 0x9184
   11f00:	movt	r3, #2
   11f04:	ldr	r3, [r3]
   11f08:	cmp	r3, #0
   11f0c:	orrne	r7, r7, #128	; 0x80
   11f10:	movw	r3, #37208	; 0x9158
   11f14:	movt	r3, #2
   11f18:	ldr	r3, [r3]
   11f1c:	cmp	r3, #0
   11f20:	beq	12104 <__assert_fail@plt+0x1310>
   11f24:	b	120f4 <__assert_fail@plt+0x1300>
   11f28:	movw	r3, #37148	; 0x911c
   11f2c:	movt	r3, #2
   11f30:	movw	ip, #12180	; 0x2f94
   11f34:	movt	ip, #1
   11f38:	str	ip, [r3]
   11f3c:	b	1213c <__assert_fail@plt+0x1348>
   11f40:	movw	r3, #37148	; 0x911c
   11f44:	movt	r3, #2
   11f48:	movw	ip, #12720	; 0x31b0
   11f4c:	movt	ip, #1
   11f50:	str	ip, [r3]
   11f54:	b	1213c <__assert_fail@plt+0x1348>
   11f58:	movw	r3, #37240	; 0x9178
   11f5c:	movt	r3, #2
   11f60:	ldr	r3, [r3]
   11f64:	cmp	r3, #0
   11f68:	beq	11f84 <__assert_fail@plt+0x1190>
   11f6c:	movw	r3, #37148	; 0x911c
   11f70:	movt	r3, #2
   11f74:	movw	ip, #12468	; 0x30b4
   11f78:	movt	ip, #1
   11f7c:	str	ip, [r3]
   11f80:	b	1213c <__assert_fail@plt+0x1348>
   11f84:	movw	r3, #37284	; 0x91a4
   11f88:	movt	r3, #2
   11f8c:	ldr	r3, [r3]
   11f90:	cmp	r3, #0
   11f94:	movw	r3, #37148	; 0x911c
   11f98:	movt	r3, #2
   11f9c:	movwne	ip, #12608	; 0x3140
   11fa0:	movtne	ip, #1
   11fa4:	movweq	ip, #12328	; 0x3028
   11fa8:	movteq	ip, #1
   11fac:	str	ip, [r3]
   11fb0:	b	1213c <__assert_fail@plt+0x1348>
   11fb4:	movw	r3, #37148	; 0x911c
   11fb8:	movt	r3, #2
   11fbc:	ldr	r3, [r3, #12]
   11fc0:	cmp	r3, #1
   11fc4:	beq	11ff0 <__assert_fail@plt+0x11fc>
   11fc8:	cmp	r3, #2
   11fcc:	beq	12008 <__assert_fail@plt+0x1214>
   11fd0:	cmp	r3, #0
   11fd4:	bne	1213c <__assert_fail@plt+0x1348>
   11fd8:	movw	r3, #37148	; 0x911c
   11fdc:	movt	r3, #2
   11fe0:	movw	ip, #12148	; 0x2f74
   11fe4:	movt	ip, #1
   11fe8:	str	ip, [r3]
   11fec:	b	1213c <__assert_fail@plt+0x1348>
   11ff0:	movw	r3, #37148	; 0x911c
   11ff4:	movt	r3, #2
   11ff8:	movw	ip, #12636	; 0x315c
   11ffc:	movt	ip, #1
   12000:	str	ip, [r3]
   12004:	b	1213c <__assert_fail@plt+0x1348>
   12008:	movw	r3, #37240	; 0x9178
   1200c:	movt	r3, #2
   12010:	ldr	r3, [r3]
   12014:	cmp	r3, #0
   12018:	beq	12034 <__assert_fail@plt+0x1240>
   1201c:	movw	r3, #37148	; 0x911c
   12020:	movt	r3, #2
   12024:	movw	ip, #12356	; 0x3044
   12028:	movt	ip, #1
   1202c:	str	ip, [r3]
   12030:	b	1213c <__assert_fail@plt+0x1348>
   12034:	movw	r3, #37284	; 0x91a4
   12038:	movt	r3, #2
   1203c:	ldr	r3, [r3]
   12040:	cmp	r3, #0
   12044:	movw	r3, #37148	; 0x911c
   12048:	movt	r3, #2
   1204c:	movwne	ip, #12496	; 0x30d0
   12050:	movtne	ip, #1
   12054:	movweq	ip, #12216	; 0x2fb8
   12058:	movteq	ip, #1
   1205c:	str	ip, [r3]
   12060:	b	1213c <__assert_fail@plt+0x1348>
   12064:	movw	r3, #37276	; 0x919c
   12068:	movt	r3, #2
   1206c:	ldr	r3, [r3]
   12070:	cmp	r3, #0
   12074:	beq	12090 <__assert_fail@plt+0x129c>
   12078:	movw	r3, #37148	; 0x911c
   1207c:	movt	r3, #2
   12080:	movw	r2, #11264	; 0x2c00
   12084:	movt	r2, #1
   12088:	str	r2, [r3, #4]
   1208c:	b	12164 <__assert_fail@plt+0x1370>
   12090:	cmp	r2, #0
   12094:	beq	120b0 <__assert_fail@plt+0x12bc>
   12098:	movw	r3, #37148	; 0x911c
   1209c:	movt	r3, #2
   120a0:	movw	r2, #9908	; 0x26b4
   120a4:	movt	r2, #1
   120a8:	str	r2, [r3, #4]
   120ac:	b	12164 <__assert_fail@plt+0x1370>
   120b0:	movw	r3, #37304	; 0x91b8
   120b4:	movt	r3, #2
   120b8:	ldr	r3, [r3]
   120bc:	cmp	r3, #0
   120c0:	movw	r3, #37148	; 0x911c
   120c4:	movt	r3, #2
   120c8:	movwne	r2, #11612	; 0x2d5c
   120cc:	movtne	r2, #1
   120d0:	movweq	r2, #10644	; 0x2994
   120d4:	movteq	r2, #1
   120d8:	str	r2, [r3, #4]
   120dc:	b	12164 <__assert_fail@plt+0x1370>
   120e0:	movw	r3, #37252	; 0x9184
   120e4:	movt	r3, #2
   120e8:	ldr	r3, [r3]
   120ec:	cmp	r3, #0
   120f0:	orrne	r7, r7, #128	; 0x80
   120f4:	movw	r3, #37288	; 0x91a8
   120f8:	movt	r3, #2
   120fc:	mov	ip, #2
   12100:	str	ip, [r3]
   12104:	movw	r3, #37236	; 0x9174
   12108:	movt	r3, #2
   1210c:	ldr	r3, [r3]
   12110:	cmp	r3, #0
   12114:	beq	11fb4 <__assert_fail@plt+0x11c0>
   12118:	movw	r3, #37148	; 0x911c
   1211c:	movt	r3, #2
   12120:	ldr	r3, [r3, #12]
   12124:	cmp	r3, #1
   12128:	beq	11f40 <__assert_fail@plt+0x114c>
   1212c:	cmp	r3, #2
   12130:	beq	11f58 <__assert_fail@plt+0x1164>
   12134:	cmp	r3, #0
   12138:	beq	11f28 <__assert_fail@plt+0x1134>
   1213c:	movw	r3, #37216	; 0x9160
   12140:	movt	r3, #2
   12144:	ldr	r3, [r3]
   12148:	cmp	r3, #0
   1214c:	beq	12064 <__assert_fail@plt+0x1270>
   12150:	movw	r3, #37148	; 0x911c
   12154:	movt	r3, #2
   12158:	movw	r2, #9612	; 0x258c
   1215c:	movt	r2, #1
   12160:	str	r2, [r3, #4]
   12164:	cmp	r0, #0
   12168:	mov	r2, r7
   1216c:	addne	r1, r6, r1, lsl #2
   12170:	ldreq	r1, [pc, #40]	; 121a0 <__assert_fail@plt+0x13ac>
   12174:	moveq	r0, #1
   12178:	bl	114e4 <__assert_fail@plt+0x6f0>
   1217c:	movw	r3, #37256	; 0x9188
   12180:	movt	r3, #2
   12184:	ldr	r0, [r3]
   12188:	add	sp, sp, #12
   1218c:	ldrd	r4, [sp]
   12190:	ldrd	r6, [sp, #8]
   12194:	ldrd	r8, [sp, #16]
   12198:	add	sp, sp, #24
   1219c:	pop	{pc}		; (ldr pc, [sp], #4)
   121a0:	strdeq	r9, [r2], -r4
   121a4:	str	r4, [sp, #-8]!
   121a8:	str	lr, [sp, #4]
   121ac:	and	r3, r0, #61440	; 0xf000
   121b0:	cmp	r3, #16384	; 0x4000
   121b4:	beq	1220c <__assert_fail@plt+0x1418>
   121b8:	bls	121e8 <__assert_fail@plt+0x13f4>
   121bc:	cmp	r3, #40960	; 0xa000
   121c0:	beq	12230 <__assert_fail@plt+0x143c>
   121c4:	cmp	r3, #49152	; 0xc000
   121c8:	bne	1224c <__assert_fail@plt+0x1458>
   121cc:	movw	r3, #37140	; 0x9114
   121d0:	movt	r3, #2
   121d4:	ldr	r1, [r3]
   121d8:	mov	r0, #61	; 0x3d
   121dc:	bl	10d58 <putc@plt>
   121e0:	mov	r0, #1
   121e4:	b	12224 <__assert_fail@plt+0x1430>
   121e8:	cmp	r3, #4096	; 0x1000
   121ec:	bne	1224c <__assert_fail@plt+0x1458>
   121f0:	movw	r3, #37140	; 0x9114
   121f4:	movt	r3, #2
   121f8:	ldr	r1, [r3]
   121fc:	mov	r0, #124	; 0x7c
   12200:	bl	10d58 <putc@plt>
   12204:	mov	r0, #1
   12208:	b	12224 <__assert_fail@plt+0x1430>
   1220c:	movw	r3, #37140	; 0x9114
   12210:	movt	r3, #2
   12214:	ldr	r1, [r3]
   12218:	mov	r0, #47	; 0x2f
   1221c:	bl	10d58 <putc@plt>
   12220:	mov	r0, #1
   12224:	ldr	r4, [sp]
   12228:	add	sp, sp, #4
   1222c:	pop	{pc}		; (ldr pc, [sp], #4)
   12230:	movw	r3, #37140	; 0x9114
   12234:	movt	r3, #2
   12238:	ldr	r1, [r3]
   1223c:	mov	r0, #64	; 0x40
   12240:	bl	10d58 <putc@plt>
   12244:	mov	r0, #1
   12248:	b	12224 <__assert_fail@plt+0x1430>
   1224c:	tst	r0, #73	; 0x49
   12250:	moveq	r0, #0
   12254:	beq	12224 <__assert_fail@plt+0x1430>
   12258:	movw	r3, #37140	; 0x9114
   1225c:	movt	r3, #2
   12260:	ldr	r1, [r3]
   12264:	mov	r0, #42	; 0x2a
   12268:	bl	10d58 <putc@plt>
   1226c:	mov	r0, #1
   12270:	b	12224 <__assert_fail@plt+0x1430>
   12274:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12278:	str	r6, [sp, #8]
   1227c:	strd	r8, [sp, #12]
   12280:	str	lr, [sp, #20]
   12284:	mov	r5, r0
   12288:	mov	r6, r2
   1228c:	movw	r3, #37232	; 0x9170
   12290:	movt	r3, #2
   12294:	ldr	r4, [r3]
   12298:	cmp	r4, #0
   1229c:	bne	1231c <__assert_fail@plt+0x1528>
   122a0:	movw	r3, #37208	; 0x9158
   122a4:	movt	r3, #2
   122a8:	ldr	r3, [r3]
   122ac:	cmp	r3, #0
   122b0:	bne	12334 <__assert_fail@plt+0x1540>
   122b4:	add	r0, r5, #168	; 0xa8
   122b8:	bl	12e90 <__assert_fail@plt+0x209c>
   122bc:	add	r4, r4, r0
   122c0:	movw	r3, #37248	; 0x9180
   122c4:	movt	r3, #2
   122c8:	ldr	r3, [r3]
   122cc:	cmp	r3, #0
   122d0:	bne	122f8 <__assert_fail@plt+0x1504>
   122d4:	movw	r3, #37264	; 0x9190
   122d8:	movt	r3, #2
   122dc:	ldr	r3, [r3]
   122e0:	cmp	r3, #0
   122e4:	beq	12304 <__assert_fail@plt+0x1510>
   122e8:	ldr	r3, [r5, #80]	; 0x50
   122ec:	and	r3, r3, #61440	; 0xf000
   122f0:	cmp	r3, #16384	; 0x4000
   122f4:	bne	12304 <__assert_fail@plt+0x1510>
   122f8:	ldr	r0, [r5, #80]	; 0x50
   122fc:	bl	121a4 <__assert_fail@plt+0x13b0>
   12300:	add	r4, r4, r0
   12304:	mov	r0, r4
   12308:	ldrd	r4, [sp]
   1230c:	ldr	r6, [sp, #8]
   12310:	ldrd	r8, [sp, #12]
   12314:	add	sp, sp, #20
   12318:	pop	{pc}		; (ldr pc, [sp], #4)
   1231c:	ldr	r2, [r0, #160]	; 0xa0
   12320:	movw	r0, #32692	; 0x7fb4
   12324:	movt	r0, #1
   12328:	bl	10bc0 <printf@plt>
   1232c:	mov	r4, r0
   12330:	b	122a0 <__assert_fail@plt+0x14ac>
   12334:	movw	r3, #37288	; 0x91a8
   12338:	movt	r3, #2
   1233c:	ldr	r2, [r3]
   12340:	sub	ip, r2, #1
   12344:	ldrd	r8, [r5, #128]	; 0x80
   12348:	asr	r3, r2, #31
   1234c:	adds	r0, r8, ip
   12350:	adc	r1, r9, ip, asr #31
   12354:	bl	17c6c <__assert_fail@plt+0x6e78>
   12358:	mov	r2, r0
   1235c:	mov	r3, r1
   12360:	mov	r1, r6
   12364:	movw	r0, #32700	; 0x7fbc
   12368:	movt	r0, #1
   1236c:	bl	10bc0 <printf@plt>
   12370:	add	r4, r4, r0
   12374:	b	122b4 <__assert_fail@plt+0x14c0>
   12378:	strd	r4, [sp, #-20]!	; 0xffffffec
   1237c:	strd	r6, [sp, #8]
   12380:	str	lr, [sp, #16]
   12384:	sub	sp, sp, #12
   12388:	str	r0, [sp, #4]
   1238c:	add	r0, sp, #4
   12390:	bl	10c08 <ctime@plt>
   12394:	mov	r6, r0
   12398:	add	r4, r0, #3
   1239c:	add	r7, r0, #10
   123a0:	movw	r5, #37140	; 0x9114
   123a4:	movt	r5, #2
   123a8:	ldr	r1, [r5]
   123ac:	ldrb	r0, [r4, #1]!
   123b0:	bl	10d58 <putc@plt>
   123b4:	cmp	r4, r7
   123b8:	bne	123a8 <__assert_fail@plt+0x15b4>
   123bc:	movw	r3, #37268	; 0x9194
   123c0:	movt	r3, #2
   123c4:	ldr	r3, [r3]
   123c8:	cmp	r3, #0
   123cc:	beq	1241c <__assert_fail@plt+0x1628>
   123d0:	add	r4, r6, #10
   123d4:	add	r6, r6, #23
   123d8:	movw	r5, #37140	; 0x9114
   123dc:	movt	r5, #2
   123e0:	ldr	r1, [r5]
   123e4:	ldrb	r0, [r4, #1]!
   123e8:	bl	10d58 <putc@plt>
   123ec:	cmp	r6, r4
   123f0:	bne	123e0 <__assert_fail@plt+0x15ec>
   123f4:	movw	r3, #37140	; 0x9114
   123f8:	movt	r3, #2
   123fc:	ldr	r1, [r3]
   12400:	mov	r0, #32
   12404:	bl	10d58 <putc@plt>
   12408:	add	sp, sp, #12
   1240c:	ldrd	r4, [sp]
   12410:	ldrd	r6, [sp, #8]
   12414:	add	sp, sp, #16
   12418:	pop	{pc}		; (ldr pc, [sp], #4)
   1241c:	movw	r4, #61695	; 0xf0ff
   12420:	movt	r4, #239	; 0xef
   12424:	ldr	r3, [sp, #4]
   12428:	add	r4, r3, r4
   1242c:	mov	r0, #0
   12430:	bl	10bfc <time@plt>
   12434:	cmp	r4, r0
   12438:	blt	12464 <__assert_fail@plt+0x1670>
   1243c:	add	r4, r6, #10
   12440:	add	r6, r6, #15
   12444:	movw	r5, #37140	; 0x9114
   12448:	movt	r5, #2
   1244c:	ldr	r1, [r5]
   12450:	ldrb	r0, [r4, #1]!
   12454:	bl	10d58 <putc@plt>
   12458:	cmp	r4, r6
   1245c:	bne	1244c <__assert_fail@plt+0x1658>
   12460:	b	123f4 <__assert_fail@plt+0x1600>
   12464:	movw	r3, #37140	; 0x9114
   12468:	movt	r3, #2
   1246c:	ldr	r1, [r3]
   12470:	mov	r0, #32
   12474:	bl	10d58 <putc@plt>
   12478:	add	r4, r6, #19
   1247c:	add	r6, r6, #23
   12480:	movw	r5, #37140	; 0x9114
   12484:	movt	r5, #2
   12488:	ldr	r1, [r5]
   1248c:	ldrb	r0, [r4, #1]!
   12490:	bl	10d58 <putc@plt>
   12494:	cmp	r4, r6
   12498:	bne	12488 <__assert_fail@plt+0x1694>
   1249c:	b	123f4 <__assert_fail@plt+0x1600>
   124a0:	str	r4, [sp, #-8]!
   124a4:	str	lr, [sp, #4]
   124a8:	sub	sp, sp, #8192	; 0x2000
   124ac:	sub	sp, sp, #8
   124b0:	ldr	r3, [r0, #48]	; 0x30
   124b4:	cmp	r3, #0
   124b8:	bne	12528 <__assert_fail@plt+0x1734>
   124bc:	add	r3, r0, #168	; 0xa8
   124c0:	movw	r2, #32568	; 0x7f38
   124c4:	movt	r2, #1
   124c8:	mov	r1, #4096	; 0x1000
   124cc:	add	r0, sp, #4096	; 0x1000
   124d0:	add	r0, r0, #8
   124d4:	bl	10d04 <snprintf@plt>
   124d8:	movw	r2, #4095	; 0xfff
   124dc:	add	r1, sp, #8
   124e0:	add	r0, sp, #4096	; 0x1000
   124e4:	add	r0, r0, #8
   124e8:	bl	10c44 <readlink@plt>
   124ec:	cmn	r0, #1
   124f0:	beq	12554 <__assert_fail@plt+0x1760>
   124f4:	add	r4, sp, #8
   124f8:	mov	r3, #0
   124fc:	strb	r3, [r4, r0]
   12500:	movw	r0, #32732	; 0x7fdc
   12504:	movt	r0, #1
   12508:	bl	10bc0 <printf@plt>
   1250c:	mov	r0, r4
   12510:	bl	12e90 <__assert_fail@plt+0x209c>
   12514:	add	sp, sp, #8192	; 0x2000
   12518:	add	sp, sp, #8
   1251c:	ldr	r4, [sp]
   12520:	add	sp, sp, #4
   12524:	pop	{pc}		; (ldr pc, [sp], #4)
   12528:	ldr	r3, [r0, #4]
   1252c:	ldr	r3, [r3, #24]
   12530:	add	r0, r0, #168	; 0xa8
   12534:	str	r0, [sp]
   12538:	movw	r2, #32708	; 0x7fc4
   1253c:	movt	r2, #1
   12540:	mov	r1, #4096	; 0x1000
   12544:	add	r0, sp, #4096	; 0x1000
   12548:	add	r0, r0, #8
   1254c:	bl	10d04 <snprintf@plt>
   12550:	b	124d8 <__assert_fail@plt+0x16e4>
   12554:	movw	r3, #37136	; 0x9110
   12558:	movt	r3, #2
   1255c:	ldr	r4, [r3]
   12560:	bl	10cf8 <__errno_location@plt>
   12564:	ldr	r0, [r0]
   12568:	bl	10ca4 <strerror@plt>
   1256c:	mov	r3, r0
   12570:	add	r2, sp, #4096	; 0x1000
   12574:	add	r2, r2, #8
   12578:	movw	r1, #32716	; 0x7fcc
   1257c:	movt	r1, #1
   12580:	mov	r0, r4
   12584:	bl	10cec <fprintf@plt>
   12588:	b	12514 <__assert_fail@plt+0x1720>
   1258c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12590:	strd	r6, [sp, #8]
   12594:	str	r8, [sp, #16]
   12598:	str	lr, [sp, #20]
   1259c:	ldr	r4, [r0]
   125a0:	cmp	r4, #0
   125a4:	beq	125f4 <__assert_fail@plt+0x1800>
   125a8:	mov	r5, r0
   125ac:	movw	r6, #37140	; 0x9114
   125b0:	movt	r6, #2
   125b4:	mov	r7, #10
   125b8:	b	125e4 <__assert_fail@plt+0x17f0>
   125bc:	ldr	r2, [r5, #20]
   125c0:	ldr	r1, [r5, #32]
   125c4:	mov	r0, r4
   125c8:	bl	12274 <__assert_fail@plt+0x1480>
   125cc:	ldr	r1, [r6]
   125d0:	mov	r0, r7
   125d4:	bl	10d58 <putc@plt>
   125d8:	ldr	r4, [r4, #8]
   125dc:	cmp	r4, #0
   125e0:	beq	125f4 <__assert_fail@plt+0x1800>
   125e4:	ldr	r3, [r4, #16]
   125e8:	cmp	r3, #1
   125ec:	bne	125bc <__assert_fail@plt+0x17c8>
   125f0:	b	125d8 <__assert_fail@plt+0x17e4>
   125f4:	ldrd	r4, [sp]
   125f8:	ldrd	r6, [sp, #8]
   125fc:	ldr	r8, [sp, #16]
   12600:	add	sp, sp, #20
   12604:	pop	{pc}		; (ldr pc, [sp], #4)
   12608:	ldr	r3, [r0, #16]
   1260c:	movw	r2, #37232	; 0x9170
   12610:	movt	r2, #2
   12614:	ldr	r2, [r2]
   12618:	cmp	r2, #0
   1261c:	beq	1262c <__assert_fail@plt+0x1838>
   12620:	ldr	r2, [r0, #32]
   12624:	add	r2, r2, #1
   12628:	add	r3, r3, r2
   1262c:	movw	r2, #37208	; 0x9158
   12630:	movt	r2, #2
   12634:	ldr	r2, [r2]
   12638:	cmp	r2, #0
   1263c:	beq	1264c <__assert_fail@plt+0x1858>
   12640:	ldr	r2, [r0, #20]
   12644:	add	r2, r2, #1
   12648:	add	r3, r3, r2
   1264c:	movw	ip, #37248	; 0x9180
   12650:	movt	ip, #2
   12654:	movw	r2, #37264	; 0x9190
   12658:	movt	r2, #2
   1265c:	ldr	ip, [ip]
   12660:	ldr	r2, [r2]
   12664:	orrs	r2, ip, r2
   12668:	addne	r3, r3, #1
   1266c:	add	r3, r3, #1
   12670:	movw	r2, #37104	; 0x90f0
   12674:	movt	r2, #2
   12678:	ldr	r2, [r2]
   1267c:	add	r2, r2, #1
   12680:	cmp	r2, r3, lsl #1
   12684:	blt	12698 <__assert_fail@plt+0x18a4>
   12688:	sdiv	r3, r2, r3
   1268c:	str	r3, [r1]
   12690:	sdiv	r0, r2, r3
   12694:	bx	lr
   12698:	str	r4, [sp, #-8]!
   1269c:	str	lr, [sp, #4]
   126a0:	bl	1258c <__assert_fail@plt+0x1798>
   126a4:	mov	r0, #0
   126a8:	ldr	r4, [sp]
   126ac:	add	sp, sp, #4
   126b0:	pop	{pc}		; (ldr pc, [sp], #4)
   126b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126b8:	strd	r6, [sp, #8]
   126bc:	strd	r8, [sp, #16]
   126c0:	strd	sl, [sp, #24]
   126c4:	str	lr, [sp, #32]
   126c8:	sub	sp, sp, #44	; 0x2c
   126cc:	mov	r5, r0
   126d0:	ldr	r4, [r0]
   126d4:	ldr	r3, [r4, #48]	; 0x30
   126d8:	cmp	r3, #0
   126dc:	beq	12734 <__assert_fail@plt+0x1940>
   126e0:	movw	r2, #37260	; 0x918c
   126e4:	movt	r2, #2
   126e8:	movw	r3, #37208	; 0x9158
   126ec:	movt	r3, #2
   126f0:	ldr	r2, [r2]
   126f4:	ldr	r3, [r3]
   126f8:	orrs	r3, r2, r3
   126fc:	beq	12734 <__assert_fail@plt+0x1940>
   12700:	movw	r3, #37288	; 0x91a8
   12704:	movt	r3, #2
   12708:	ldr	r1, [r3]
   1270c:	sub	r3, r1, #1
   12710:	ldr	r2, [r0, #4]
   12714:	add	r3, r3, r2
   12718:	udiv	r1, r3, r1
   1271c:	movw	r0, #32740	; 0x7fe4
   12720:	movt	r0, #1
   12724:	bl	10bc0 <printf@plt>
   12728:	ldr	r4, [r5]
   1272c:	cmp	r4, #0
   12730:	beq	12978 <__assert_fail@plt+0x1b84>
   12734:	movw	r8, #37232	; 0x9170
   12738:	movt	r8, #2
   1273c:	movw	r7, #37208	; 0x9158
   12740:	movt	r7, #2
   12744:	movw	r6, #32752	; 0x7ff0
   12748:	movt	r6, #1
   1274c:	b	12838 <__assert_fail@plt+0x1a44>
   12750:	ldr	r2, [r4, #160]	; 0xa0
   12754:	ldr	r1, [r5, #32]
   12758:	movw	r0, #32692	; 0x7fb4
   1275c:	movt	r0, #1
   12760:	bl	10bc0 <printf@plt>
   12764:	b	12850 <__assert_fail@plt+0x1a5c>
   12768:	movw	r3, #37288	; 0x91a8
   1276c:	movt	r3, #2
   12770:	ldr	r2, [r3]
   12774:	sub	ip, r2, #1
   12778:	ldrd	sl, [r4, #128]	; 0x80
   1277c:	asr	r3, r2, #31
   12780:	adds	r0, sl, ip
   12784:	adc	r1, fp, ip, asr #31
   12788:	bl	17c6c <__assert_fail@plt+0x6e78>
   1278c:	mov	r2, r0
   12790:	mov	r3, r1
   12794:	ldr	r1, [r5, #20]
   12798:	movw	r0, #32700	; 0x7fbc
   1279c:	movt	r0, #1
   127a0:	bl	10bc0 <printf@plt>
   127a4:	b	1285c <__assert_fail@plt+0x1a68>
   127a8:	ldr	r2, [r9, #8]
   127ac:	ldr	r1, [r5, #24]
   127b0:	movw	r0, #32772	; 0x8004
   127b4:	movt	r0, #1
   127b8:	bl	10bc0 <printf@plt>
   127bc:	b	128b4 <__assert_fail@plt+0x1ac0>
   127c0:	ldr	r1, [r4, #96]	; 0x60
   127c4:	uxtb	r2, r1
   127c8:	ubfx	r1, r1, #8, #8
   127cc:	movw	r0, #32780	; 0x800c
   127d0:	movt	r0, #1
   127d4:	bl	10bc0 <printf@plt>
   127d8:	b	128f8 <__assert_fail@plt+0x1b04>
   127dc:	ldrd	r2, [r4, #112]	; 0x70
   127e0:	ldr	r1, [r5, #40]	; 0x28
   127e4:	movw	r0, #32700	; 0x7fbc
   127e8:	movt	r0, #1
   127ec:	bl	10bc0 <printf@plt>
   127f0:	b	128f8 <__assert_fail@plt+0x1b04>
   127f4:	ldr	r0, [r4, #136]	; 0x88
   127f8:	bl	12378 <__assert_fail@plt+0x1584>
   127fc:	b	12928 <__assert_fail@plt+0x1b34>
   12800:	ldr	r0, [r4, #80]	; 0x50
   12804:	bl	121a4 <__assert_fail@plt+0x13b0>
   12808:	ldr	r3, [r4, #80]	; 0x50
   1280c:	and	r3, r3, #61440	; 0xf000
   12810:	cmp	r3, #40960	; 0xa000
   12814:	beq	1296c <__assert_fail@plt+0x1b78>
   12818:	movw	r3, #37140	; 0x9114
   1281c:	movt	r3, #2
   12820:	ldr	r1, [r3]
   12824:	mov	r0, #10
   12828:	bl	10d58 <putc@plt>
   1282c:	ldr	r4, [r4, #8]
   12830:	cmp	r4, #0
   12834:	beq	12978 <__assert_fail@plt+0x1b84>
   12838:	ldr	r3, [r4, #16]
   1283c:	cmp	r3, #1
   12840:	beq	1282c <__assert_fail@plt+0x1a38>
   12844:	ldr	r3, [r8]
   12848:	cmp	r3, #0
   1284c:	bne	12750 <__assert_fail@plt+0x195c>
   12850:	ldr	r3, [r7]
   12854:	cmp	r3, #0
   12858:	bne	12768 <__assert_fail@plt+0x1974>
   1285c:	add	r1, sp, #20
   12860:	ldr	r0, [r4, #80]	; 0x50
   12864:	bl	131cc <__assert_fail@plt+0x23d8>
   12868:	ldr	r9, [r4, #20]
   1286c:	ldr	r3, [r4, #84]	; 0x54
   12870:	ldr	r2, [r9, #4]
   12874:	str	r2, [sp, #12]
   12878:	ldr	r2, [r5, #28]
   1287c:	str	r2, [sp, #8]
   12880:	ldr	r2, [r9]
   12884:	str	r2, [sp, #4]
   12888:	ldr	r2, [r5, #44]	; 0x2c
   1288c:	str	r2, [sp]
   12890:	ldr	r2, [r5, #36]	; 0x24
   12894:	add	r1, sp, #20
   12898:	mov	r0, r6
   1289c:	bl	10bc0 <printf@plt>
   128a0:	movw	r3, #37224	; 0x9168
   128a4:	movt	r3, #2
   128a8:	ldr	r3, [r3]
   128ac:	cmp	r3, #0
   128b0:	bne	127a8 <__assert_fail@plt+0x19b4>
   128b4:	ldr	r3, [r4, #80]	; 0x50
   128b8:	and	r3, r3, #45056	; 0xb000
   128bc:	cmp	r3, #8192	; 0x2000
   128c0:	beq	127c0 <__assert_fail@plt+0x19cc>
   128c4:	ldr	r3, [r5, #8]
   128c8:	cmp	r3, #0
   128cc:	beq	127dc <__assert_fail@plt+0x19e8>
   128d0:	ldr	r1, [r5, #40]	; 0x28
   128d4:	ldrd	r2, [r4, #112]	; 0x70
   128d8:	strd	r2, [sp]
   128dc:	mov	r3, r1
   128e0:	movw	r2, #33188	; 0x81a4
   128e4:	movt	r2, #1
   128e8:	rsb	r1, r1, #8
   128ec:	movw	r0, #32792	; 0x8018
   128f0:	movt	r0, #1
   128f4:	bl	10bc0 <printf@plt>
   128f8:	movw	r3, #37240	; 0x9178
   128fc:	movt	r3, #2
   12900:	ldr	r3, [r3]
   12904:	cmp	r3, #0
   12908:	bne	127f4 <__assert_fail@plt+0x1a00>
   1290c:	movw	r3, #37284	; 0x91a4
   12910:	movt	r3, #2
   12914:	ldr	r3, [r3]
   12918:	cmp	r3, #0
   1291c:	ldrne	r0, [r4, #152]	; 0x98
   12920:	ldreq	r0, [r4, #144]	; 0x90
   12924:	bl	12378 <__assert_fail@plt+0x1584>
   12928:	add	r0, r4, #168	; 0xa8
   1292c:	bl	12e90 <__assert_fail@plt+0x209c>
   12930:	movw	r3, #37248	; 0x9180
   12934:	movt	r3, #2
   12938:	ldr	r3, [r3]
   1293c:	cmp	r3, #0
   12940:	bne	12800 <__assert_fail@plt+0x1a0c>
   12944:	movw	r3, #37264	; 0x9190
   12948:	movt	r3, #2
   1294c:	ldr	r3, [r3]
   12950:	cmp	r3, #0
   12954:	beq	12808 <__assert_fail@plt+0x1a14>
   12958:	ldr	r3, [r4, #80]	; 0x50
   1295c:	and	r3, r3, #61440	; 0xf000
   12960:	cmp	r3, #16384	; 0x4000
   12964:	bne	12808 <__assert_fail@plt+0x1a14>
   12968:	b	12800 <__assert_fail@plt+0x1a0c>
   1296c:	mov	r0, r4
   12970:	bl	124a0 <__assert_fail@plt+0x16ac>
   12974:	b	12818 <__assert_fail@plt+0x1a24>
   12978:	add	sp, sp, #44	; 0x2c
   1297c:	ldrd	r4, [sp]
   12980:	ldrd	r6, [sp, #8]
   12984:	ldrd	r8, [sp, #16]
   12988:	ldrd	sl, [sp, #24]
   1298c:	add	sp, sp, #32
   12990:	pop	{pc}		; (ldr pc, [sp], #4)
   12994:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12998:	strd	r6, [sp, #8]
   1299c:	strd	r8, [sp, #16]
   129a0:	strd	sl, [sp, #24]
   129a4:	str	lr, [sp, #32]
   129a8:	sub	sp, sp, #28
   129ac:	mov	sl, r0
   129b0:	add	r1, sp, #20
   129b4:	bl	12608 <__assert_fail@plt+0x1814>
   129b8:	subs	r3, r0, #0
   129bc:	str	r3, [sp, #4]
   129c0:	beq	12be4 <__assert_fail@plt+0x1df0>
   129c4:	ldr	r1, [sl, #12]
   129c8:	movw	r3, #37120	; 0x9100
   129cc:	movt	r3, #2
   129d0:	ldr	r3, [r3]
   129d4:	cmp	r1, r3
   129d8:	bgt	12a6c <__assert_fail@plt+0x1c78>
   129dc:	ldr	r3, [sl]
   129e0:	cmp	r3, #0
   129e4:	beq	12bd4 <__assert_fail@plt+0x1de0>
   129e8:	movw	r2, #37164	; 0x912c
   129ec:	movt	r2, #2
   129f0:	ldr	r1, [r2]
   129f4:	mov	r5, #0
   129f8:	ldr	r2, [r3, #16]
   129fc:	cmp	r2, #1
   12a00:	strne	r3, [r1, r5, lsl #2]
   12a04:	addne	r5, r5, #1
   12a08:	ldr	r3, [r3, #8]
   12a0c:	cmp	r3, #0
   12a10:	bne	129f8 <__assert_fail@plt+0x1c04>
   12a14:	ldr	r3, [sp, #20]
   12a18:	sdiv	r2, r5, r3
   12a1c:	str	r2, [sp]
   12a20:	mls	r3, r3, r2, r5
   12a24:	cmp	r3, #0
   12a28:	addne	r3, r2, #1
   12a2c:	strne	r3, [sp]
   12a30:	ldr	r3, [sl]
   12a34:	ldr	r3, [r3, #48]	; 0x30
   12a38:	cmp	r3, #0
   12a3c:	bne	12aec <__assert_fail@plt+0x1cf8>
   12a40:	ldr	r3, [sp]
   12a44:	cmp	r3, #0
   12a48:	ble	12be4 <__assert_fail@plt+0x1df0>
   12a4c:	mov	r3, #0
   12a50:	str	r3, [sp, #12]
   12a54:	movw	fp, #37164	; 0x912c
   12a58:	movt	fp, #2
   12a5c:	movw	r6, #37140	; 0x9114
   12a60:	movt	r6, #2
   12a64:	str	r5, [sp, #8]
   12a68:	b	12b5c <__assert_fail@plt+0x1d68>
   12a6c:	movw	r3, #37164	; 0x912c
   12a70:	movt	r3, #2
   12a74:	lsl	r1, r1, #2
   12a78:	ldr	r0, [r3]
   12a7c:	bl	1783c <__assert_fail@plt+0x6a48>
   12a80:	cmp	r0, #0
   12a84:	beq	12aa8 <__assert_fail@plt+0x1cb4>
   12a88:	movw	r3, #37120	; 0x9100
   12a8c:	movt	r3, #2
   12a90:	ldr	r2, [sl, #12]
   12a94:	str	r2, [r3]
   12a98:	movw	r3, #37164	; 0x912c
   12a9c:	movt	r3, #2
   12aa0:	str	r0, [r3]
   12aa4:	b	129dc <__assert_fail@plt+0x1be8>
   12aa8:	movw	r3, #37136	; 0x9110
   12aac:	movt	r3, #2
   12ab0:	ldr	r4, [r3]
   12ab4:	bl	10cf8 <__errno_location@plt>
   12ab8:	ldr	r0, [r0]
   12abc:	bl	10ca4 <strerror@plt>
   12ac0:	mov	r2, r0
   12ac4:	movw	r1, #32804	; 0x8024
   12ac8:	movt	r1, #1
   12acc:	mov	r0, r4
   12ad0:	bl	10cec <fprintf@plt>
   12ad4:	mov	r0, sl
   12ad8:	bl	1258c <__assert_fail@plt+0x1798>
   12adc:	b	12be4 <__assert_fail@plt+0x1df0>
   12ae0:	mov	r3, #0
   12ae4:	str	r3, [sp]
   12ae8:	mov	r5, r3
   12aec:	movw	r2, #37260	; 0x918c
   12af0:	movt	r2, #2
   12af4:	movw	r3, #37208	; 0x9158
   12af8:	movt	r3, #2
   12afc:	ldr	r2, [r2]
   12b00:	ldr	r3, [r3]
   12b04:	orrs	r3, r2, r3
   12b08:	beq	12a40 <__assert_fail@plt+0x1c4c>
   12b0c:	movw	r3, #37288	; 0x91a8
   12b10:	movt	r3, #2
   12b14:	ldr	r1, [r3]
   12b18:	sub	r3, r1, #1
   12b1c:	ldr	r2, [sl, #4]
   12b20:	add	r3, r3, r2
   12b24:	udiv	r1, r3, r1
   12b28:	movw	r0, #32740	; 0x7fe4
   12b2c:	movt	r0, #1
   12b30:	bl	10bc0 <printf@plt>
   12b34:	b	12a40 <__assert_fail@plt+0x1c4c>
   12b38:	ldr	r1, [r6]
   12b3c:	mov	r0, #10
   12b40:	bl	10d58 <putc@plt>
   12b44:	ldr	r3, [sp, #12]
   12b48:	add	r3, r3, #1
   12b4c:	str	r3, [sp, #12]
   12b50:	ldr	r2, [sp]
   12b54:	cmp	r3, r2
   12b58:	beq	12be4 <__assert_fail@plt+0x1df0>
   12b5c:	ldr	r8, [sp, #12]
   12b60:	mov	r9, #0
   12b64:	ldr	r3, [sp, #4]
   12b68:	add	r7, r3, #1
   12b6c:	ldr	r3, [fp]
   12b70:	ldr	r2, [sl, #20]
   12b74:	ldr	r1, [sl, #32]
   12b78:	ldr	r0, [r3, r8, lsl #2]
   12b7c:	bl	12274 <__assert_fail@plt+0x1480>
   12b80:	ldr	r3, [sp]
   12b84:	add	r8, r8, r3
   12b88:	ldr	r3, [sp, #8]
   12b8c:	cmp	r8, r3
   12b90:	bge	12b38 <__assert_fail@plt+0x1d44>
   12b94:	add	r9, r9, #1
   12b98:	ldr	r3, [sp, #20]
   12b9c:	cmp	r3, r9
   12ba0:	beq	12b38 <__assert_fail@plt+0x1d44>
   12ba4:	add	r4, r0, #1
   12ba8:	ldr	r3, [sp, #4]
   12bac:	cmp	r3, r0
   12bb0:	ble	12b6c <__assert_fail@plt+0x1d78>
   12bb4:	mov	r5, #32
   12bb8:	ldr	r1, [r6]
   12bbc:	mov	r0, r5
   12bc0:	bl	10d58 <putc@plt>
   12bc4:	add	r4, r4, #1
   12bc8:	cmp	r4, r7
   12bcc:	bne	12bb8 <__assert_fail@plt+0x1dc4>
   12bd0:	b	12b6c <__assert_fail@plt+0x1d78>
   12bd4:	ldr	r3, [sl]
   12bd8:	ldr	r3, [r3, #48]	; 0x30
   12bdc:	cmp	r3, #0
   12be0:	bne	12ae0 <__assert_fail@plt+0x1cec>
   12be4:	add	sp, sp, #28
   12be8:	ldrd	r4, [sp]
   12bec:	ldrd	r6, [sp, #8]
   12bf0:	ldrd	r8, [sp, #16]
   12bf4:	ldrd	sl, [sp, #24]
   12bf8:	add	sp, sp, #32
   12bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12c00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c04:	strd	r6, [sp, #8]
   12c08:	strd	r8, [sp, #16]
   12c0c:	strd	sl, [sp, #24]
   12c10:	str	lr, [sp, #32]
   12c14:	sub	sp, sp, #12
   12c18:	mov	r8, r0
   12c1c:	add	r1, sp, #4
   12c20:	bl	12608 <__assert_fail@plt+0x1814>
   12c24:	subs	fp, r0, #0
   12c28:	beq	12d40 <__assert_fail@plt+0x1f4c>
   12c2c:	ldr	r5, [r8]
   12c30:	ldr	r3, [r5, #48]	; 0x30
   12c34:	cmp	r3, #0
   12c38:	beq	12c94 <__assert_fail@plt+0x1ea0>
   12c3c:	movw	r2, #37260	; 0x918c
   12c40:	movt	r2, #2
   12c44:	movw	r3, #37208	; 0x9158
   12c48:	movt	r3, #2
   12c4c:	ldr	r2, [r2]
   12c50:	ldr	r3, [r3]
   12c54:	orrs	r3, r2, r3
   12c58:	beq	12c94 <__assert_fail@plt+0x1ea0>
   12c5c:	movw	r3, #37288	; 0x91a8
   12c60:	movt	r3, #2
   12c64:	ldr	r2, [r3]
   12c68:	sub	r3, r2, #1
   12c6c:	ldr	r1, [r8, #4]
   12c70:	add	r3, r3, r1
   12c74:	udiv	r2, r3, r2
   12c78:	mov	r3, #0
   12c7c:	movw	r0, #32820	; 0x8034
   12c80:	movt	r0, #1
   12c84:	bl	10bc0 <printf@plt>
   12c88:	ldr	r5, [r8]
   12c8c:	cmp	r5, #0
   12c90:	beq	12d2c <__assert_fail@plt+0x1f38>
   12c94:	mov	r6, #0
   12c98:	add	sl, fp, #1
   12c9c:	movw	r7, #37140	; 0x9114
   12ca0:	movt	r7, #2
   12ca4:	mov	r9, #32
   12ca8:	b	12ce8 <__assert_fail@plt+0x1ef4>
   12cac:	ldr	r1, [r7]
   12cb0:	mov	r0, #10
   12cb4:	bl	10d58 <putc@plt>
   12cb8:	mov	r6, #0
   12cbc:	ldr	r2, [r8, #20]
   12cc0:	ldr	r1, [r8, #32]
   12cc4:	mov	r0, r5
   12cc8:	bl	12274 <__assert_fail@plt+0x1480>
   12ccc:	add	r6, r6, #1
   12cd0:	ldr	r3, [sp, #4]
   12cd4:	cmp	r3, r6
   12cd8:	bgt	12d04 <__assert_fail@plt+0x1f10>
   12cdc:	ldr	r5, [r5, #8]
   12ce0:	cmp	r5, #0
   12ce4:	beq	12d2c <__assert_fail@plt+0x1f38>
   12ce8:	ldr	r3, [r5, #16]
   12cec:	cmp	r3, #1
   12cf0:	beq	12cdc <__assert_fail@plt+0x1ee8>
   12cf4:	ldr	r3, [sp, #4]
   12cf8:	cmp	r3, r6
   12cfc:	bgt	12cbc <__assert_fail@plt+0x1ec8>
   12d00:	b	12cac <__assert_fail@plt+0x1eb8>
   12d04:	add	r4, r0, #1
   12d08:	cmp	fp, r0
   12d0c:	ble	12cdc <__assert_fail@plt+0x1ee8>
   12d10:	ldr	r1, [r7]
   12d14:	mov	r0, r9
   12d18:	bl	10d58 <putc@plt>
   12d1c:	add	r4, r4, #1
   12d20:	cmp	sl, r4
   12d24:	bne	12d10 <__assert_fail@plt+0x1f1c>
   12d28:	b	12cdc <__assert_fail@plt+0x1ee8>
   12d2c:	movw	r3, #37140	; 0x9114
   12d30:	movt	r3, #2
   12d34:	ldr	r1, [r3]
   12d38:	mov	r0, #10
   12d3c:	bl	10d58 <putc@plt>
   12d40:	add	sp, sp, #12
   12d44:	ldrd	r4, [sp]
   12d48:	ldrd	r6, [sp, #8]
   12d4c:	ldrd	r8, [sp, #16]
   12d50:	ldrd	sl, [sp, #24]
   12d54:	add	sp, sp, #32
   12d58:	pop	{pc}		; (ldr pc, [sp], #4)
   12d5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12d60:	strd	r6, [sp, #8]
   12d64:	strd	r8, [sp, #16]
   12d68:	str	sl, [sp, #24]
   12d6c:	str	lr, [sp, #28]
   12d70:	mov	r6, r0
   12d74:	movw	r3, #37232	; 0x9170
   12d78:	movt	r3, #2
   12d7c:	ldr	r7, [r3]
   12d80:	cmp	r7, #0
   12d84:	ldrne	r7, [r0, #32]
   12d88:	addne	r7, r7, #1
   12d8c:	movw	r3, #37208	; 0x9158
   12d90:	movt	r3, #2
   12d94:	ldr	r3, [r3]
   12d98:	cmp	r3, #0
   12d9c:	beq	12dac <__assert_fail@plt+0x1fb8>
   12da0:	ldr	r3, [r0, #20]
   12da4:	add	r3, r3, #1
   12da8:	add	r7, r7, r3
   12dac:	movw	r3, #37248	; 0x9180
   12db0:	movt	r3, #2
   12db4:	ldr	r3, [r3]
   12db8:	cmp	r3, #0
   12dbc:	addne	r7, r7, #1
   12dc0:	ldr	r4, [r6]
   12dc4:	cmp	r4, #0
   12dc8:	beq	12e64 <__assert_fail@plt+0x2070>
   12dcc:	mov	r5, #0
   12dd0:	movw	r8, #37140	; 0x9114
   12dd4:	movt	r8, #2
   12dd8:	mov	sl, #44	; 0x2c
   12ddc:	movw	r9, #37104	; 0x90f0
   12de0:	movt	r9, #2
   12de4:	b	12e14 <__assert_fail@plt+0x2020>
   12de8:	ldr	r1, [r8]
   12dec:	mov	r0, #32
   12df0:	bl	10d58 <putc@plt>
   12df4:	ldr	r2, [r6, #20]
   12df8:	ldr	r1, [r6, #32]
   12dfc:	mov	r0, r4
   12e00:	bl	12274 <__assert_fail@plt+0x1480>
   12e04:	add	r5, r5, r0
   12e08:	ldr	r4, [r4, #8]
   12e0c:	cmp	r4, #0
   12e10:	beq	12e64 <__assert_fail@plt+0x2070>
   12e14:	ldr	r3, [r4, #16]
   12e18:	cmp	r3, #1
   12e1c:	beq	12e08 <__assert_fail@plt+0x2014>
   12e20:	cmp	r5, #0
   12e24:	ble	12df4 <__assert_fail@plt+0x2000>
   12e28:	ldr	r1, [r8]
   12e2c:	mov	r0, sl
   12e30:	bl	10d58 <putc@plt>
   12e34:	add	r5, r5, #2
   12e38:	add	r3, r5, r7
   12e3c:	ldr	r2, [r4, #52]	; 0x34
   12e40:	add	r3, r3, r2
   12e44:	ldr	r2, [r9]
   12e48:	cmp	r3, r2
   12e4c:	bcc	12de8 <__assert_fail@plt+0x1ff4>
   12e50:	ldr	r1, [r8]
   12e54:	mov	r0, #10
   12e58:	bl	10d58 <putc@plt>
   12e5c:	mov	r5, #0
   12e60:	b	12df4 <__assert_fail@plt+0x2000>
   12e64:	movw	r3, #37140	; 0x9114
   12e68:	movt	r3, #2
   12e6c:	ldr	r1, [r3]
   12e70:	mov	r0, #10
   12e74:	bl	10d58 <putc@plt>
   12e78:	ldrd	r4, [sp]
   12e7c:	ldrd	r6, [sp, #8]
   12e80:	ldrd	r8, [sp, #16]
   12e84:	ldr	sl, [sp, #24]
   12e88:	add	sp, sp, #28
   12e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12e94:	strd	r6, [sp, #8]
   12e98:	strd	r8, [sp, #16]
   12e9c:	str	sl, [sp, #24]
   12ea0:	str	lr, [sp, #28]
   12ea4:	ldrb	r4, [r0]
   12ea8:	cmp	r4, #0
   12eac:	beq	12f20 <__assert_fail@plt+0x212c>
   12eb0:	mov	r6, r0
   12eb4:	bl	10cbc <__ctype_b_loc@plt>
   12eb8:	mov	r8, r0
   12ebc:	mov	r5, r6
   12ec0:	movw	r9, #37300	; 0x91b4
   12ec4:	movt	r9, #2
   12ec8:	mov	sl, #63	; 0x3f
   12ecc:	movw	r7, #37140	; 0x9114
   12ed0:	movt	r7, #2
   12ed4:	b	12ef8 <__assert_fail@plt+0x2104>
   12ed8:	mov	r0, r4
   12edc:	ldr	r1, [r7]
   12ee0:	bl	10d58 <putc@plt>
   12ee4:	rsb	r0, r6, #1
   12ee8:	add	r0, r5, r0
   12eec:	ldrb	r4, [r5, #1]!
   12ef0:	cmp	r4, #0
   12ef4:	beq	12f24 <__assert_fail@plt+0x2130>
   12ef8:	ldr	r2, [r8]
   12efc:	lsl	r3, r4, #1
   12f00:	ldrh	r3, [r2, r3]
   12f04:	tst	r3, #16384	; 0x4000
   12f08:	bne	12ed8 <__assert_fail@plt+0x20e4>
   12f0c:	ldr	r3, [r9]
   12f10:	cmp	r3, #0
   12f14:	movne	r0, sl
   12f18:	bne	12edc <__assert_fail@plt+0x20e8>
   12f1c:	b	12ed8 <__assert_fail@plt+0x20e4>
   12f20:	mov	r0, #0
   12f24:	ldrd	r4, [sp]
   12f28:	ldrd	r6, [sp, #8]
   12f2c:	ldrd	r8, [sp, #16]
   12f30:	ldr	sl, [sp, #24]
   12f34:	add	sp, sp, #28
   12f38:	pop	{pc}		; (ldr pc, [sp], #4)
   12f3c:	str	r4, [sp, #-8]!
   12f40:	str	lr, [sp, #4]
   12f44:	movw	r3, #37136	; 0x9110
   12f48:	movt	r3, #2
   12f4c:	ldr	r3, [r3]
   12f50:	mov	r2, #51	; 0x33
   12f54:	mov	r1, #1
   12f58:	movw	r0, #32832	; 0x8040
   12f5c:	movt	r0, #1
   12f60:	bl	10c50 <fwrite@plt>
   12f64:	mov	r0, #1
   12f68:	ldr	r4, [sp]
   12f6c:	add	sp, sp, #4
   12f70:	pop	{pc}		; (ldr pc, [sp], #4)
   12f74:	str	r4, [sp, #-8]!
   12f78:	str	lr, [sp, #4]
   12f7c:	add	r1, r1, #168	; 0xa8
   12f80:	add	r0, r0, #168	; 0xa8
   12f84:	bl	10b9c <strcmp@plt>
   12f88:	ldr	r4, [sp]
   12f8c:	add	sp, sp, #4
   12f90:	pop	{pc}		; (ldr pc, [sp], #4)
   12f94:	str	r4, [sp, #-8]!
   12f98:	str	lr, [sp, #4]
   12f9c:	add	r3, r1, #168	; 0xa8
   12fa0:	add	r1, r0, #168	; 0xa8
   12fa4:	mov	r0, r3
   12fa8:	bl	10b9c <strcmp@plt>
   12fac:	ldr	r4, [sp]
   12fb0:	add	sp, sp, #4
   12fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb8:	ldr	r2, [r1, #144]	; 0x90
   12fbc:	ldr	r3, [r0, #144]	; 0x90
   12fc0:	cmp	r2, r3
   12fc4:	bgt	13010 <__assert_fail@plt+0x221c>
   12fc8:	beq	12ff4 <__assert_fail@plt+0x2200>
   12fcc:	cmp	r2, r3
   12fd0:	blt	13020 <__assert_fail@plt+0x222c>
   12fd4:	str	r4, [sp, #-8]!
   12fd8:	str	lr, [sp, #4]
   12fdc:	add	r1, r1, #168	; 0xa8
   12fe0:	add	r0, r0, #168	; 0xa8
   12fe4:	bl	10b9c <strcmp@plt>
   12fe8:	ldr	r4, [sp]
   12fec:	add	sp, sp, #4
   12ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ff4:	ldr	r2, [r1, #148]	; 0x94
   12ff8:	ldr	r3, [r0, #148]	; 0x94
   12ffc:	cmp	r2, r3
   13000:	bgt	13018 <__assert_fail@plt+0x2224>
   13004:	bge	12fd4 <__assert_fail@plt+0x21e0>
   13008:	mvn	r0, #0
   1300c:	bx	lr
   13010:	mov	r0, #1
   13014:	bx	lr
   13018:	mov	r0, #1
   1301c:	bx	lr
   13020:	mvn	r0, #0
   13024:	bx	lr
   13028:	str	r4, [sp, #-8]!
   1302c:	str	lr, [sp, #4]
   13030:	bl	12fb8 <__assert_fail@plt+0x21c4>
   13034:	rsb	r0, r0, #0
   13038:	ldr	r4, [sp]
   1303c:	add	sp, sp, #4
   13040:	pop	{pc}		; (ldr pc, [sp], #4)
   13044:	ldr	r2, [r1, #136]	; 0x88
   13048:	ldr	r3, [r0, #136]	; 0x88
   1304c:	cmp	r2, r3
   13050:	bgt	1309c <__assert_fail@plt+0x22a8>
   13054:	beq	13080 <__assert_fail@plt+0x228c>
   13058:	cmp	r2, r3
   1305c:	blt	130ac <__assert_fail@plt+0x22b8>
   13060:	str	r4, [sp, #-8]!
   13064:	str	lr, [sp, #4]
   13068:	add	r1, r1, #168	; 0xa8
   1306c:	add	r0, r0, #168	; 0xa8
   13070:	bl	10b9c <strcmp@plt>
   13074:	ldr	r4, [sp]
   13078:	add	sp, sp, #4
   1307c:	pop	{pc}		; (ldr pc, [sp], #4)
   13080:	ldr	r2, [r1, #140]	; 0x8c
   13084:	ldr	r3, [r0, #140]	; 0x8c
   13088:	cmp	r2, r3
   1308c:	bgt	130a4 <__assert_fail@plt+0x22b0>
   13090:	bge	13060 <__assert_fail@plt+0x226c>
   13094:	mvn	r0, #0
   13098:	bx	lr
   1309c:	mov	r0, #1
   130a0:	bx	lr
   130a4:	mov	r0, #1
   130a8:	bx	lr
   130ac:	mvn	r0, #0
   130b0:	bx	lr
   130b4:	str	r4, [sp, #-8]!
   130b8:	str	lr, [sp, #4]
   130bc:	bl	13044 <__assert_fail@plt+0x2250>
   130c0:	rsb	r0, r0, #0
   130c4:	ldr	r4, [sp]
   130c8:	add	sp, sp, #4
   130cc:	pop	{pc}		; (ldr pc, [sp], #4)
   130d0:	ldr	r2, [r1, #152]	; 0x98
   130d4:	ldr	r3, [r0, #152]	; 0x98
   130d8:	cmp	r2, r3
   130dc:	bgt	13128 <__assert_fail@plt+0x2334>
   130e0:	beq	1310c <__assert_fail@plt+0x2318>
   130e4:	cmp	r2, r3
   130e8:	blt	13138 <__assert_fail@plt+0x2344>
   130ec:	str	r4, [sp, #-8]!
   130f0:	str	lr, [sp, #4]
   130f4:	add	r1, r1, #168	; 0xa8
   130f8:	add	r0, r0, #168	; 0xa8
   130fc:	bl	10b9c <strcmp@plt>
   13100:	ldr	r4, [sp]
   13104:	add	sp, sp, #4
   13108:	pop	{pc}		; (ldr pc, [sp], #4)
   1310c:	ldr	r2, [r1, #156]	; 0x9c
   13110:	ldr	r3, [r0, #156]	; 0x9c
   13114:	cmp	r2, r3
   13118:	bgt	13130 <__assert_fail@plt+0x233c>
   1311c:	bge	130ec <__assert_fail@plt+0x22f8>
   13120:	mvn	r0, #0
   13124:	bx	lr
   13128:	mov	r0, #1
   1312c:	bx	lr
   13130:	mov	r0, #1
   13134:	bx	lr
   13138:	mvn	r0, #0
   1313c:	bx	lr
   13140:	str	r4, [sp, #-8]!
   13144:	str	lr, [sp, #4]
   13148:	bl	130d0 <__assert_fail@plt+0x22dc>
   1314c:	rsb	r0, r0, #0
   13150:	ldr	r4, [sp]
   13154:	add	sp, sp, #4
   13158:	pop	{pc}		; (ldr pc, [sp], #4)
   1315c:	strd	r4, [sp, #-16]!
   13160:	str	r6, [sp, #8]
   13164:	str	lr, [sp, #12]
   13168:	ldrd	r4, [r1, #112]	; 0x70
   1316c:	ldrd	r2, [r0, #112]	; 0x70
   13170:	cmp	r2, r4
   13174:	sbcs	ip, r3, r5
   13178:	movlt	r0, #1
   1317c:	blt	13198 <__assert_fail@plt+0x23a4>
   13180:	cmp	r4, r2
   13184:	sbcs	r3, r5, r3
   13188:	blt	131a8 <__assert_fail@plt+0x23b4>
   1318c:	add	r1, r1, #168	; 0xa8
   13190:	add	r0, r0, #168	; 0xa8
   13194:	bl	10b9c <strcmp@plt>
   13198:	ldrd	r4, [sp]
   1319c:	ldr	r6, [sp, #8]
   131a0:	add	sp, sp, #12
   131a4:	pop	{pc}		; (ldr pc, [sp], #4)
   131a8:	mvn	r0, #0
   131ac:	b	13198 <__assert_fail@plt+0x23a4>
   131b0:	str	r4, [sp, #-8]!
   131b4:	str	lr, [sp, #4]
   131b8:	bl	1315c <__assert_fail@plt+0x2368>
   131bc:	rsb	r0, r0, #0
   131c0:	ldr	r4, [sp]
   131c4:	add	sp, sp, #4
   131c8:	pop	{pc}		; (ldr pc, [sp], #4)
   131cc:	and	r3, r0, #61440	; 0xf000
   131d0:	cmp	r3, #32768	; 0x8000
   131d4:	moveq	r3, #45	; 0x2d
   131d8:	beq	13224 <__assert_fail@plt+0x2430>
   131dc:	cmp	r3, #16384	; 0x4000
   131e0:	moveq	r3, #100	; 0x64
   131e4:	beq	13224 <__assert_fail@plt+0x2430>
   131e8:	cmp	r3, #24576	; 0x6000
   131ec:	moveq	r3, #98	; 0x62
   131f0:	beq	13224 <__assert_fail@plt+0x2430>
   131f4:	cmp	r3, #8192	; 0x2000
   131f8:	moveq	r3, #99	; 0x63
   131fc:	beq	13224 <__assert_fail@plt+0x2430>
   13200:	cmp	r3, #40960	; 0xa000
   13204:	moveq	r3, #108	; 0x6c
   13208:	beq	13224 <__assert_fail@plt+0x2430>
   1320c:	cmp	r3, #4096	; 0x1000
   13210:	moveq	r3, #112	; 0x70
   13214:	beq	13224 <__assert_fail@plt+0x2430>
   13218:	cmp	r3, #49152	; 0xc000
   1321c:	movne	r3, #63	; 0x3f
   13220:	moveq	r3, #115	; 0x73
   13224:	strb	r3, [r1]
   13228:	and	r3, r0, #256	; 0x100
   1322c:	cmp	r3, #0
   13230:	movne	r3, #114	; 0x72
   13234:	moveq	r3, #45	; 0x2d
   13238:	strb	r3, [r1, #1]
   1323c:	and	r3, r0, #128	; 0x80
   13240:	cmp	r3, #0
   13244:	movne	r3, #119	; 0x77
   13248:	moveq	r3, #45	; 0x2d
   1324c:	strb	r3, [r1, #2]
   13250:	tst	r0, #2048	; 0x800
   13254:	beq	13308 <__assert_fail@plt+0x2514>
   13258:	and	r3, r0, #64	; 0x40
   1325c:	cmp	r3, #0
   13260:	movne	r3, #115	; 0x73
   13264:	moveq	r3, #83	; 0x53
   13268:	strb	r3, [r1, #3]
   1326c:	and	r3, r0, #32
   13270:	cmp	r3, #0
   13274:	movne	r3, #114	; 0x72
   13278:	moveq	r3, #45	; 0x2d
   1327c:	strb	r3, [r1, #4]
   13280:	and	r3, r0, #16
   13284:	cmp	r3, #0
   13288:	movne	r3, #119	; 0x77
   1328c:	moveq	r3, #45	; 0x2d
   13290:	strb	r3, [r1, #5]
   13294:	tst	r0, #1024	; 0x400
   13298:	beq	1331c <__assert_fail@plt+0x2528>
   1329c:	and	r3, r0, #8
   132a0:	cmp	r3, #0
   132a4:	movne	r3, #115	; 0x73
   132a8:	moveq	r3, #83	; 0x53
   132ac:	strb	r3, [r1, #6]
   132b0:	and	r3, r0, #4
   132b4:	cmp	r3, #0
   132b8:	movne	r3, #114	; 0x72
   132bc:	moveq	r3, #45	; 0x2d
   132c0:	strb	r3, [r1, #7]
   132c4:	and	r3, r0, #2
   132c8:	cmp	r3, #0
   132cc:	movne	r3, #119	; 0x77
   132d0:	moveq	r3, #45	; 0x2d
   132d4:	strb	r3, [r1, #8]
   132d8:	tst	r0, #512	; 0x200
   132dc:	beq	13330 <__assert_fail@plt+0x253c>
   132e0:	and	r0, r0, #1
   132e4:	cmp	r0, #0
   132e8:	movne	r3, #116	; 0x74
   132ec:	moveq	r3, #84	; 0x54
   132f0:	strb	r3, [r1, #9]
   132f4:	mov	r3, #32
   132f8:	strb	r3, [r1, #10]
   132fc:	mov	r3, #0
   13300:	strb	r3, [r1, #11]
   13304:	bx	lr
   13308:	and	r3, r0, #64	; 0x40
   1330c:	cmp	r3, #0
   13310:	movne	r3, #120	; 0x78
   13314:	moveq	r3, #45	; 0x2d
   13318:	b	13268 <__assert_fail@plt+0x2474>
   1331c:	and	r3, r0, #8
   13320:	cmp	r3, #0
   13324:	movne	r3, #120	; 0x78
   13328:	moveq	r3, #45	; 0x2d
   1332c:	b	132ac <__assert_fail@plt+0x24b8>
   13330:	and	r0, r0, #1
   13334:	cmp	r0, #0
   13338:	movne	r3, #120	; 0x78
   1333c:	moveq	r3, #45	; 0x2d
   13340:	b	132f0 <__assert_fail@plt+0x24fc>
   13344:	str	r4, [sp, #-8]!
   13348:	str	lr, [sp, #4]
   1334c:	ldr	r0, [r0, #16]
   13350:	bl	131cc <__assert_fail@plt+0x23d8>
   13354:	ldr	r4, [sp]
   13358:	add	sp, sp, #4
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	strd	r4, [sp, #-12]!
   13364:	str	lr, [sp, #8]
   13368:	sub	sp, sp, #12
   1336c:	mov	r5, r0
   13370:	bl	10cf8 <__errno_location@plt>
   13374:	mov	r4, r0
   13378:	ldr	r3, [r0]
   1337c:	str	r3, [sp]
   13380:	str	r3, [sp, #4]
   13384:	mov	r3, #0
   13388:	str	r3, [r0]
   1338c:	mov	r0, r5
   13390:	bl	10be4 <free@plt>
   13394:	ldr	r3, [r4]
   13398:	clz	r3, r3
   1339c:	lsr	r3, r3, #5
   133a0:	add	r2, sp, #8
   133a4:	add	r3, r2, r3, lsl #2
   133a8:	ldr	r3, [r3, #-8]
   133ac:	str	r3, [r4]
   133b0:	add	sp, sp, #12
   133b4:	ldrd	r4, [sp]
   133b8:	add	sp, sp, #8
   133bc:	pop	{pc}		; (ldr pc, [sp], #4)
   133c0:	strd	r4, [sp, #-8]!
   133c4:	ldrd	r4, [r0, #8]
   133c8:	ldrd	r2, [r1, #8]
   133cc:	cmp	r5, r3
   133d0:	cmpeq	r4, r2
   133d4:	movne	r0, #0
   133d8:	beq	133e8 <__assert_fail@plt+0x25f4>
   133dc:	ldrd	r4, [sp]
   133e0:	add	sp, sp, #8
   133e4:	bx	lr
   133e8:	ldrd	r4, [r0]
   133ec:	ldrd	r2, [r1]
   133f0:	cmp	r5, r3
   133f4:	cmpeq	r4, r2
   133f8:	moveq	r0, #1
   133fc:	movne	r0, #0
   13400:	b	133dc <__assert_fail@plt+0x25e8>
   13404:	str	r4, [sp, #-8]!
   13408:	str	lr, [sp, #4]
   1340c:	mov	r2, r1
   13410:	mov	r3, #0
   13414:	ldrd	r0, [r0, #8]
   13418:	bl	17d40 <__assert_fail@plt+0x6f4c>
   1341c:	mov	r0, r2
   13420:	ldr	r4, [sp]
   13424:	add	sp, sp, #4
   13428:	pop	{pc}		; (ldr pc, [sp], #4)
   1342c:	str	r4, [sp, #-8]!
   13430:	str	lr, [sp, #4]
   13434:	mov	r2, r1
   13438:	mov	r3, #0
   1343c:	ldrd	r0, [r0]
   13440:	bl	17d40 <__assert_fail@plt+0x6f4c>
   13444:	mov	r0, r2
   13448:	ldr	r4, [sp]
   1344c:	add	sp, sp, #4
   13450:	pop	{pc}		; (ldr pc, [sp], #4)
   13454:	strd	r4, [sp, #-8]!
   13458:	ldrd	r4, [r0]
   1345c:	ldrd	r2, [r1]
   13460:	cmp	r5, r3
   13464:	cmpeq	r4, r2
   13468:	moveq	r0, #1
   1346c:	movne	r0, #0
   13470:	ldrd	r4, [sp]
   13474:	add	sp, sp, #8
   13478:	bx	lr
   1347c:	strd	r4, [sp, #-8]!
   13480:	ldr	r3, [r0]
   13484:	ldrd	r4, [r3, #160]	; 0xa0
   13488:	ldr	r3, [r1]
   1348c:	ldrd	r2, [r3, #160]	; 0xa0
   13490:	cmp	r5, r3
   13494:	cmpeq	r4, r2
   13498:	movhi	r0, #1
   1349c:	movls	r0, #0
   134a0:	movcc	r3, #1
   134a4:	movcs	r3, #0
   134a8:	sub	r0, r0, r3
   134ac:	ldrd	r4, [sp]
   134b0:	add	sp, sp, #8
   134b4:	bx	lr
   134b8:	strd	r4, [sp, #-16]!
   134bc:	str	r6, [sp, #8]
   134c0:	str	lr, [sp, #12]
   134c4:	mov	r4, r0
   134c8:	ldr	r3, [r0, #36]	; 0x24
   134cc:	add	r1, r1, #256	; 0x100
   134d0:	adds	r1, r1, r3
   134d4:	bcs	13504 <__assert_fail@plt+0x2710>
   134d8:	str	r1, [r0, #36]	; 0x24
   134dc:	ldr	r0, [r0, #24]
   134e0:	bl	1783c <__assert_fail@plt+0x6a48>
   134e4:	cmp	r0, #0
   134e8:	strne	r0, [r4, #24]
   134ec:	movne	r0, #1
   134f0:	beq	13528 <__assert_fail@plt+0x2734>
   134f4:	ldrd	r4, [sp]
   134f8:	ldr	r6, [sp, #8]
   134fc:	add	sp, sp, #12
   13500:	pop	{pc}		; (ldr pc, [sp], #4)
   13504:	ldr	r0, [r0, #24]
   13508:	bl	13360 <__assert_fail@plt+0x256c>
   1350c:	mov	r5, #0
   13510:	str	r5, [r4, #24]
   13514:	bl	10cf8 <__errno_location@plt>
   13518:	mov	r3, #36	; 0x24
   1351c:	str	r3, [r0]
   13520:	mov	r0, r5
   13524:	b	134f4 <__assert_fail@plt+0x2700>
   13528:	ldr	r0, [r4, #24]
   1352c:	bl	13360 <__assert_fail@plt+0x256c>
   13530:	mov	r0, #0
   13534:	str	r0, [r4, #24]
   13538:	b	134f4 <__assert_fail@plt+0x2700>
   1353c:	strd	r4, [sp, #-16]!
   13540:	str	r6, [sp, #8]
   13544:	str	lr, [sp, #12]
   13548:	sub	sp, sp, #8
   1354c:	mov	r4, r1
   13550:	add	r5, r1, #64	; 0x40
   13554:	ldr	r3, [r1, #48]	; 0x30
   13558:	cmp	r3, #0
   1355c:	bne	1356c <__assert_fail@plt+0x2778>
   13560:	ldr	r3, [r0, #48]	; 0x30
   13564:	tst	r3, #1
   13568:	bne	1357c <__assert_fail@plt+0x2788>
   1356c:	ldr	r3, [r0, #48]	; 0x30
   13570:	ubfx	r3, r3, #1, #1
   13574:	orrs	r3, r2, r3
   13578:	beq	135f0 <__assert_fail@plt+0x27fc>
   1357c:	mov	r2, r5
   13580:	ldr	r1, [r4, #24]
   13584:	mov	r0, #3
   13588:	bl	10d94 <__xstat64@plt>
   1358c:	cmp	r0, #0
   13590:	beq	13614 <__assert_fail@plt+0x2820>
   13594:	bl	10cf8 <__errno_location@plt>
   13598:	mov	r6, r0
   1359c:	ldr	r3, [r0]
   135a0:	cmp	r3, #2
   135a4:	bne	135d0 <__assert_fail@plt+0x27dc>
   135a8:	mov	r2, r5
   135ac:	ldr	r1, [r4, #24]
   135b0:	mov	r0, #3
   135b4:	bl	10dd0 <__lxstat64@plt>
   135b8:	cmp	r0, #0
   135bc:	bne	135d0 <__assert_fail@plt+0x27dc>
   135c0:	mov	r3, #0
   135c4:	str	r3, [r6]
   135c8:	mov	r0, #13
   135cc:	b	13638 <__assert_fail@plt+0x2844>
   135d0:	ldr	r3, [r6]
   135d4:	str	r3, [r4, #32]
   135d8:	mov	r2, #104	; 0x68
   135dc:	mov	r1, #0
   135e0:	mov	r0, r5
   135e4:	bl	10d10 <memset@plt>
   135e8:	mov	r0, #10
   135ec:	b	13638 <__assert_fail@plt+0x2844>
   135f0:	mov	r3, #256	; 0x100
   135f4:	str	r3, [sp]
   135f8:	mov	r3, r5
   135fc:	ldr	r2, [r4, #24]
   13600:	ldr	r1, [r0, #32]
   13604:	mov	r0, #3
   13608:	bl	10c2c <__fxstatat64@plt>
   1360c:	cmp	r0, #0
   13610:	bne	1364c <__assert_fail@plt+0x2858>
   13614:	ldr	r3, [r4, #80]	; 0x50
   13618:	and	r3, r3, #61440	; 0xf000
   1361c:	cmp	r3, #16384	; 0x4000
   13620:	beq	1365c <__assert_fail@plt+0x2868>
   13624:	cmp	r3, #40960	; 0xa000
   13628:	beq	136a4 <__assert_fail@plt+0x28b0>
   1362c:	cmp	r3, #32768	; 0x8000
   13630:	movne	r0, #3
   13634:	moveq	r0, #8
   13638:	add	sp, sp, #8
   1363c:	ldrd	r4, [sp]
   13640:	ldr	r6, [sp, #8]
   13644:	add	sp, sp, #12
   13648:	pop	{pc}		; (ldr pc, [sp], #4)
   1364c:	bl	10cf8 <__errno_location@plt>
   13650:	ldr	r3, [r0]
   13654:	str	r3, [r4, #32]
   13658:	b	135d8 <__assert_fail@plt+0x27e4>
   1365c:	ldrb	r3, [r4, #168]	; 0xa8
   13660:	cmp	r3, #46	; 0x2e
   13664:	movne	r0, #1
   13668:	bne	13638 <__assert_fail@plt+0x2844>
   1366c:	ldrb	r3, [r4, #169]	; 0xa9
   13670:	cmp	r3, #0
   13674:	beq	13690 <__assert_fail@plt+0x289c>
   13678:	ldr	r3, [r4, #168]	; 0xa8
   1367c:	bic	r3, r3, #-16777216	; 0xff000000
   13680:	bic	r3, r3, #255	; 0xff
   13684:	cmp	r3, #11776	; 0x2e00
   13688:	movne	r0, #1
   1368c:	bne	13638 <__assert_fail@plt+0x2844>
   13690:	ldr	r3, [r4, #48]	; 0x30
   13694:	cmp	r3, #0
   13698:	moveq	r0, #1
   1369c:	movne	r0, #5
   136a0:	b	13638 <__assert_fail@plt+0x2844>
   136a4:	mov	r0, #12
   136a8:	b	13638 <__assert_fail@plt+0x2844>
   136ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136b0:	strd	r6, [sp, #8]
   136b4:	str	r8, [sp, #16]
   136b8:	str	lr, [sp, #20]
   136bc:	mov	r6, r0
   136c0:	mov	r4, r1
   136c4:	mov	r5, r2
   136c8:	ldr	r7, [r0, #44]	; 0x2c
   136cc:	ldr	r3, [r0, #40]	; 0x28
   136d0:	cmp	r3, r2
   136d4:	bcs	13700 <__assert_fail@plt+0x290c>
   136d8:	add	r1, r2, #40	; 0x28
   136dc:	str	r1, [r0, #40]	; 0x28
   136e0:	cmn	r1, #-1073741823	; 0xc0000001
   136e4:	bhi	13780 <__assert_fail@plt+0x298c>
   136e8:	lsl	r1, r1, #2
   136ec:	ldr	r0, [r0, #8]
   136f0:	bl	1783c <__assert_fail@plt+0x6a48>
   136f4:	cmp	r0, #0
   136f8:	strne	r0, [r6, #8]
   136fc:	beq	13780 <__assert_fail@plt+0x298c>
   13700:	ldr	r3, [r6, #8]
   13704:	cmp	r4, #0
   13708:	beq	1371c <__assert_fail@plt+0x2928>
   1370c:	str	r4, [r3], #4
   13710:	ldr	r4, [r4, #8]
   13714:	cmp	r4, #0
   13718:	bne	1370c <__assert_fail@plt+0x2918>
   1371c:	mov	r3, r7
   13720:	mov	r2, #4
   13724:	mov	r1, r5
   13728:	ldr	r0, [r6, #8]
   1372c:	bl	10d88 <qsort@plt>
   13730:	ldr	lr, [r6, #8]
   13734:	ldr	r0, [lr]
   13738:	subs	r3, r5, #1
   1373c:	beq	13760 <__assert_fail@plt+0x296c>
   13740:	mov	r2, lr
   13744:	ldr	r1, [r2]
   13748:	ldr	ip, [r2, #4]!
   1374c:	str	ip, [r1, #8]
   13750:	subs	r3, r3, #1
   13754:	bne	13744 <__assert_fail@plt+0x2950>
   13758:	sub	r5, r5, #-1073741823	; 0xc0000001
   1375c:	add	lr, lr, r5, lsl #2
   13760:	ldr	r3, [lr]
   13764:	mov	r2, #0
   13768:	str	r2, [r3, #8]
   1376c:	ldrd	r4, [sp]
   13770:	ldrd	r6, [sp, #8]
   13774:	ldr	r8, [sp, #16]
   13778:	add	sp, sp, #20
   1377c:	pop	{pc}		; (ldr pc, [sp], #4)
   13780:	ldr	r0, [r6, #8]
   13784:	bl	13360 <__assert_fail@plt+0x256c>
   13788:	mov	r3, #0
   1378c:	str	r3, [r6, #8]
   13790:	str	r3, [r6, #40]	; 0x28
   13794:	mov	r0, r4
   13798:	b	1376c <__assert_fail@plt+0x2978>
   1379c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   137a0:	strd	r6, [sp, #8]
   137a4:	str	r8, [sp, #16]
   137a8:	str	lr, [sp, #20]
   137ac:	mov	r6, r0
   137b0:	mov	r7, r1
   137b4:	mov	r5, r2
   137b8:	add	r0, r2, #176	; 0xb0
   137bc:	bic	r0, r0, #7
   137c0:	bl	17800 <__assert_fail@plt+0x6a0c>
   137c4:	subs	r4, r0, #0
   137c8:	beq	13814 <__assert_fail@plt+0x2a20>
   137cc:	mov	r2, r5
   137d0:	mov	r1, r7
   137d4:	add	r0, r4, #168	; 0xa8
   137d8:	bl	10bf0 <memcpy@plt>
   137dc:	add	r2, r4, r5
   137e0:	mov	r3, #0
   137e4:	strb	r3, [r2, #168]	; 0xa8
   137e8:	str	r5, [r4, #52]	; 0x34
   137ec:	str	r6, [r4, #44]	; 0x2c
   137f0:	ldr	r2, [r6, #24]
   137f4:	str	r2, [r4, #28]
   137f8:	str	r3, [r4, #32]
   137fc:	str	r3, [r4, #12]
   13800:	strh	r3, [r4, #58]	; 0x3a
   13804:	mov	r2, #3
   13808:	strh	r2, [r4, #60]	; 0x3c
   1380c:	str	r3, [r4, #16]
   13810:	str	r3, [r4, #20]
   13814:	mov	r0, r4
   13818:	ldrd	r4, [sp]
   1381c:	ldrd	r6, [sp, #8]
   13820:	ldr	r8, [sp, #16]
   13824:	add	sp, sp, #20
   13828:	pop	{pc}		; (ldr pc, [sp], #4)
   1382c:	str	r4, [sp, #-8]!
   13830:	str	lr, [sp, #4]
   13834:	sub	sp, sp, #8
   13838:	mov	r4, r0
   1383c:	ldr	r3, [r0, #48]	; 0x30
   13840:	movw	r2, #258	; 0x102
   13844:	tst	r2, r3
   13848:	beq	13890 <__assert_fail@plt+0x2a9c>
   1384c:	movw	r3, #13152	; 0x3360
   13850:	movt	r3, #1
   13854:	str	r3, [sp]
   13858:	movw	r3, #13248	; 0x33c0
   1385c:	movt	r3, #1
   13860:	movw	r2, #13316	; 0x3404
   13864:	movt	r2, #1
   13868:	mov	r1, #0
   1386c:	mov	r0, #31
   13870:	bl	16dcc <__assert_fail@plt+0x5fd8>
   13874:	str	r0, [r4, #56]	; 0x38
   13878:	adds	r0, r0, #0
   1387c:	movne	r0, #1
   13880:	add	sp, sp, #8
   13884:	ldr	r4, [sp]
   13888:	add	sp, sp, #4
   1388c:	pop	{pc}		; (ldr pc, [sp], #4)
   13890:	mov	r0, #32
   13894:	bl	17800 <__assert_fail@plt+0x6a0c>
   13898:	str	r0, [r4, #56]	; 0x38
   1389c:	cmp	r0, #0
   138a0:	moveq	r0, #0
   138a4:	beq	13880 <__assert_fail@plt+0x2a8c>
   138a8:	bl	17898 <__assert_fail@plt+0x6aa4>
   138ac:	mov	r0, #1
   138b0:	b	13880 <__assert_fail@plt+0x2a8c>
   138b4:	str	r4, [sp, #-8]!
   138b8:	str	lr, [sp, #4]
   138bc:	mov	ip, r1
   138c0:	ldr	r3, [r0, #48]	; 0x30
   138c4:	lsl	r2, r3, #11
   138c8:	and	r2, r2, #32768	; 0x8000
   138cc:	orr	r2, r2, #540672	; 0x84000
   138d0:	orr	r2, r2, #2304	; 0x900
   138d4:	tst	r3, #512	; 0x200
   138d8:	beq	138f0 <__assert_fail@plt+0x2afc>
   138dc:	ldr	r0, [r0, #32]
   138e0:	bl	17680 <__assert_fail@plt+0x688c>
   138e4:	ldr	r4, [sp]
   138e8:	add	sp, sp, #4
   138ec:	pop	{pc}		; (ldr pc, [sp], #4)
   138f0:	mov	r1, r2
   138f4:	mov	r0, ip
   138f8:	bl	17c10 <__assert_fail@plt+0x6e1c>
   138fc:	b	138e4 <__assert_fail@plt+0x2af0>
   13900:	strd	r4, [sp, #-16]!
   13904:	str	r6, [sp, #8]
   13908:	str	lr, [sp, #12]
   1390c:	subs	r4, r0, #0
   13910:	bne	1393c <__assert_fail@plt+0x2b48>
   13914:	ldrd	r4, [sp]
   13918:	ldr	r6, [sp, #8]
   1391c:	add	sp, sp, #12
   13920:	pop	{pc}		; (ldr pc, [sp], #4)
   13924:	bl	10ddc <closedir@plt>
   13928:	mov	r0, r4
   1392c:	bl	13360 <__assert_fail@plt+0x256c>
   13930:	mov	r4, r5
   13934:	cmp	r5, #0
   13938:	beq	13914 <__assert_fail@plt+0x2b20>
   1393c:	ldr	r5, [r4, #8]
   13940:	ldr	r0, [r4, #12]
   13944:	cmp	r0, #0
   13948:	bne	13924 <__assert_fail@plt+0x2b30>
   1394c:	b	13928 <__assert_fail@plt+0x2b34>
   13950:	str	r4, [sp, #-8]!
   13954:	str	lr, [sp, #4]
   13958:	ldr	r3, [r0, #48]	; 0x30
   1395c:	movw	r2, #258	; 0x102
   13960:	tst	r2, r3
   13964:	beq	13984 <__assert_fail@plt+0x2b90>
   13968:	ldr	r0, [r0, #56]	; 0x38
   1396c:	cmp	r0, #0
   13970:	beq	13978 <__assert_fail@plt+0x2b84>
   13974:	bl	16f98 <__assert_fail@plt+0x61a4>
   13978:	ldr	r4, [sp]
   1397c:	add	sp, sp, #4
   13980:	pop	{pc}		; (ldr pc, [sp], #4)
   13984:	ldr	r0, [r0, #56]	; 0x38
   13988:	bl	13360 <__assert_fail@plt+0x256c>
   1398c:	b	13978 <__assert_fail@plt+0x2b84>
   13990:	str	r4, [sp, #-8]!
   13994:	str	lr, [sp, #4]
   13998:	mov	r4, r0
   1399c:	mov	r0, r4
   139a0:	bl	17520 <__assert_fail@plt+0x672c>
   139a4:	cmp	r0, #0
   139a8:	bne	139c4 <__assert_fail@plt+0x2bd0>
   139ac:	mov	r0, r4
   139b0:	bl	17574 <__assert_fail@plt+0x6780>
   139b4:	cmp	r0, #0
   139b8:	blt	1399c <__assert_fail@plt+0x2ba8>
   139bc:	bl	10dc4 <close@plt>
   139c0:	b	1399c <__assert_fail@plt+0x2ba8>
   139c4:	ldr	r4, [sp]
   139c8:	add	sp, sp, #4
   139cc:	pop	{pc}		; (ldr pc, [sp], #4)
   139d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   139d4:	strd	r6, [sp, #8]
   139d8:	str	lr, [sp, #16]
   139dc:	sub	sp, sp, #116	; 0x74
   139e0:	ldr	r7, [r0, #44]	; 0x2c
   139e4:	ldr	r3, [r7, #48]	; 0x30
   139e8:	ands	r3, r3, #512	; 0x200
   139ec:	beq	13adc <__assert_fail@plt+0x2ce8>
   139f0:	mov	r6, r1
   139f4:	mov	r5, r0
   139f8:	ldr	r4, [r7, #52]	; 0x34
   139fc:	cmp	r4, #0
   13a00:	beq	13a28 <__assert_fail@plt+0x2c34>
   13a04:	ldrd	r2, [r5, #64]	; 0x40
   13a08:	strd	r2, [sp, #8]
   13a0c:	add	r1, sp, #8
   13a10:	mov	r0, r4
   13a14:	bl	16ad8 <__assert_fail@plt+0x5ce4>
   13a18:	cmp	r0, #0
   13a1c:	beq	13a60 <__assert_fail@plt+0x2c6c>
   13a20:	ldr	r3, [r0, #8]
   13a24:	b	13adc <__assert_fail@plt+0x2ce8>
   13a28:	movw	r3, #13152	; 0x3360
   13a2c:	movt	r3, #1
   13a30:	str	r3, [sp]
   13a34:	movw	r3, #13396	; 0x3454
   13a38:	movt	r3, #1
   13a3c:	movw	r2, #13356	; 0x342c
   13a40:	movt	r2, #1
   13a44:	mov	r1, #0
   13a48:	mov	r0, #13
   13a4c:	bl	16dcc <__assert_fail@plt+0x5fd8>
   13a50:	mov	r4, r0
   13a54:	str	r0, [r7, #52]	; 0x34
   13a58:	cmp	r0, #0
   13a5c:	bne	13a04 <__assert_fail@plt+0x2c10>
   13a60:	cmp	r6, #0
   13a64:	blt	13ad8 <__assert_fail@plt+0x2ce4>
   13a68:	add	r1, sp, #24
   13a6c:	mov	r0, r6
   13a70:	bl	10b78 <fstatfs64@plt>
   13a74:	cmp	r0, #0
   13a78:	bne	13af4 <__assert_fail@plt+0x2d00>
   13a7c:	cmp	r4, #0
   13a80:	beq	13ac0 <__assert_fail@plt+0x2ccc>
   13a84:	mov	r0, #16
   13a88:	bl	17800 <__assert_fail@plt+0x6a0c>
   13a8c:	subs	r6, r0, #0
   13a90:	beq	13ac0 <__assert_fail@plt+0x2ccc>
   13a94:	ldrd	r2, [r5, #64]	; 0x40
   13a98:	strd	r2, [r6]
   13a9c:	ldr	r3, [sp, #24]
   13aa0:	str	r3, [r6, #8]
   13aa4:	mov	r1, r6
   13aa8:	mov	r0, r4
   13aac:	bl	17380 <__assert_fail@plt+0x658c>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13acc <__assert_fail@plt+0x2cd8>
   13ab8:	cmp	r6, r0
   13abc:	bne	13ac8 <__assert_fail@plt+0x2cd4>
   13ac0:	ldr	r3, [sp, #24]
   13ac4:	b	13adc <__assert_fail@plt+0x2ce8>
   13ac8:	bl	10db8 <abort@plt>
   13acc:	mov	r0, r6
   13ad0:	bl	13360 <__assert_fail@plt+0x256c>
   13ad4:	b	13ac0 <__assert_fail@plt+0x2ccc>
   13ad8:	mov	r3, #0
   13adc:	mov	r0, r3
   13ae0:	add	sp, sp, #116	; 0x74
   13ae4:	ldrd	r4, [sp]
   13ae8:	ldrd	r6, [sp, #8]
   13aec:	add	sp, sp, #16
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	mov	r3, #0
   13af8:	b	13adc <__assert_fail@plt+0x2ce8>
   13afc:	strd	r4, [sp, #-16]!
   13b00:	str	r6, [sp, #8]
   13b04:	str	lr, [sp, #12]
   13b08:	mov	r5, r0
   13b0c:	mov	r4, r1
   13b10:	ldr	r3, [r0, #48]	; 0x30
   13b14:	movw	r2, #258	; 0x102
   13b18:	tst	r2, r3
   13b1c:	beq	13b90 <__assert_fail@plt+0x2d9c>
   13b20:	mov	r0, #24
   13b24:	bl	17800 <__assert_fail@plt+0x6a0c>
   13b28:	subs	r6, r0, #0
   13b2c:	moveq	r0, #0
   13b30:	beq	13bb4 <__assert_fail@plt+0x2dc0>
   13b34:	ldrd	r2, [r4, #64]	; 0x40
   13b38:	strd	r2, [r6]
   13b3c:	ldrd	r2, [r4, #160]	; 0xa0
   13b40:	strd	r2, [r6, #8]
   13b44:	str	r4, [r6, #16]
   13b48:	mov	r1, r6
   13b4c:	ldr	r0, [r5, #56]	; 0x38
   13b50:	bl	17380 <__assert_fail@plt+0x658c>
   13b54:	mov	r5, r0
   13b58:	cmp	r6, r0
   13b5c:	moveq	r0, #1
   13b60:	beq	13bb4 <__assert_fail@plt+0x2dc0>
   13b64:	mov	r0, r6
   13b68:	bl	13360 <__assert_fail@plt+0x256c>
   13b6c:	cmp	r5, #0
   13b70:	moveq	r0, #0
   13b74:	beq	13bb4 <__assert_fail@plt+0x2dc0>
   13b78:	ldr	r3, [r5, #16]
   13b7c:	str	r3, [r4]
   13b80:	mov	r3, #2
   13b84:	strh	r3, [r4, #56]	; 0x38
   13b88:	mov	r0, #1
   13b8c:	b	13bb4 <__assert_fail@plt+0x2dc0>
   13b90:	add	r1, r1, #64	; 0x40
   13b94:	ldr	r0, [r0, #56]	; 0x38
   13b98:	bl	178b4 <__assert_fail@plt+0x6ac0>
   13b9c:	cmp	r0, #0
   13ba0:	moveq	r0, #1
   13ba4:	beq	13bb4 <__assert_fail@plt+0x2dc0>
   13ba8:	str	r4, [r4]
   13bac:	mov	r3, #2
   13bb0:	strh	r3, [r4, #56]	; 0x38
   13bb4:	ldrd	r4, [sp]
   13bb8:	ldr	r6, [sp, #8]
   13bbc:	add	sp, sp, #12
   13bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc4:	strd	r4, [sp, #-16]!
   13bc8:	str	r6, [sp, #8]
   13bcc:	str	lr, [sp, #12]
   13bd0:	mov	r5, r1
   13bd4:	ldr	r1, [r0, #32]
   13bd8:	cmp	r1, r5
   13bdc:	movne	r3, #0
   13be0:	moveq	r3, #1
   13be4:	cmn	r1, #100	; 0x64
   13be8:	moveq	r3, #0
   13bec:	cmp	r3, #0
   13bf0:	bne	13c34 <__assert_fail@plt+0x2e40>
   13bf4:	mov	r4, r0
   13bf8:	cmp	r2, #0
   13bfc:	bne	13c38 <__assert_fail@plt+0x2e44>
   13c00:	ldr	r3, [r0, #48]	; 0x30
   13c04:	eor	r3, r3, #4
   13c08:	ubfx	r3, r3, #2, #1
   13c0c:	cmp	r1, #0
   13c10:	movlt	r3, #0
   13c14:	andge	r3, r3, #1
   13c18:	cmp	r3, #0
   13c1c:	bne	13c50 <__assert_fail@plt+0x2e5c>
   13c20:	str	r5, [r4, #32]
   13c24:	ldrd	r4, [sp]
   13c28:	ldr	r6, [sp, #8]
   13c2c:	add	sp, sp, #12
   13c30:	pop	{pc}		; (ldr pc, [sp], #4)
   13c34:	bl	10db8 <abort@plt>
   13c38:	add	r0, r0, #60	; 0x3c
   13c3c:	bl	17528 <__assert_fail@plt+0x6734>
   13c40:	cmp	r0, #0
   13c44:	blt	13c20 <__assert_fail@plt+0x2e2c>
   13c48:	bl	10dc4 <close@plt>
   13c4c:	b	13c20 <__assert_fail@plt+0x2e2c>
   13c50:	mov	r0, r1
   13c54:	bl	10dc4 <close@plt>
   13c58:	b	13c20 <__assert_fail@plt+0x2e2c>
   13c5c:	strd	r4, [sp, #-16]!
   13c60:	str	r6, [sp, #8]
   13c64:	str	lr, [sp, #12]
   13c68:	mov	r4, r0
   13c6c:	ldr	r3, [r0, #48]	; 0x30
   13c70:	ands	r5, r3, #4
   13c74:	movne	r5, #0
   13c78:	bne	13c90 <__assert_fail@plt+0x2e9c>
   13c7c:	tst	r3, #512	; 0x200
   13c80:	beq	13cac <__assert_fail@plt+0x2eb8>
   13c84:	mov	r2, #1
   13c88:	mvn	r1, #99	; 0x63
   13c8c:	bl	13bc4 <__assert_fail@plt+0x2dd0>
   13c90:	add	r0, r4, #60	; 0x3c
   13c94:	bl	13990 <__assert_fail@plt+0x2b9c>
   13c98:	mov	r0, r5
   13c9c:	ldrd	r4, [sp]
   13ca0:	ldr	r6, [sp, #8]
   13ca4:	add	sp, sp, #12
   13ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   13cac:	ldr	r0, [r0, #28]
   13cb0:	bl	10d7c <fchdir@plt>
   13cb4:	adds	r5, r0, #0
   13cb8:	movne	r5, #1
   13cbc:	b	13c90 <__assert_fail@plt+0x2e9c>
   13cc0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13cc4:	strd	r6, [sp, #8]
   13cc8:	strd	r8, [sp, #16]
   13ccc:	str	lr, [sp, #24]
   13cd0:	sub	sp, sp, #108	; 0x6c
   13cd4:	mov	r4, r0
   13cd8:	mov	r7, r1
   13cdc:	mov	r5, r2
   13ce0:	subs	r9, r3, #0
   13ce4:	beq	13e10 <__assert_fail@plt+0x301c>
   13ce8:	movw	r1, #32884	; 0x8074
   13cec:	movt	r1, #1
   13cf0:	mov	r0, r9
   13cf4:	bl	10b9c <strcmp@plt>
   13cf8:	cmp	r0, #0
   13cfc:	bne	13e10 <__assert_fail@plt+0x301c>
   13d00:	ldr	r3, [r4, #48]	; 0x30
   13d04:	tst	r3, #4
   13d08:	bne	13d50 <__assert_fail@plt+0x2f5c>
   13d0c:	cmp	r5, #0
   13d10:	bge	13dc4 <__assert_fail@plt+0x2fd0>
   13d14:	tst	r3, #512	; 0x200
   13d18:	beq	13d30 <__assert_fail@plt+0x2f3c>
   13d1c:	add	r6, r4, #60	; 0x3c
   13d20:	mov	r0, r6
   13d24:	bl	17520 <__assert_fail@plt+0x672c>
   13d28:	cmp	r0, #0
   13d2c:	beq	13d7c <__assert_fail@plt+0x2f88>
   13d30:	mov	r8, #1
   13d34:	mov	r1, r9
   13d38:	mov	r0, r4
   13d3c:	bl	138b4 <__assert_fail@plt+0x2ac0>
   13d40:	subs	r6, r0, #0
   13d44:	bge	13e2c <__assert_fail@plt+0x3038>
   13d48:	mvn	r4, #0
   13d4c:	b	13eb0 <__assert_fail@plt+0x30bc>
   13d50:	ubfx	r3, r3, #9, #1
   13d54:	cmp	r5, #0
   13d58:	movlt	r3, #0
   13d5c:	andge	r3, r3, #1
   13d60:	cmp	r3, #0
   13d64:	moveq	r4, #0
   13d68:	beq	13eb0 <__assert_fail@plt+0x30bc>
   13d6c:	mov	r0, r5
   13d70:	bl	10dc4 <close@plt>
   13d74:	mov	r4, #0
   13d78:	b	13eb0 <__assert_fail@plt+0x30bc>
   13d7c:	mov	r0, r6
   13d80:	bl	17574 <__assert_fail@plt+0x6780>
   13d84:	subs	r6, r0, #0
   13d88:	blt	13d30 <__assert_fail@plt+0x2f3c>
   13d8c:	ldr	r3, [r4, #48]	; 0x30
   13d90:	tst	r3, #2
   13d94:	bne	13dd0 <__assert_fail@plt+0x2fdc>
   13d98:	mov	r5, r6
   13d9c:	mov	r8, #1
   13da0:	ldr	r3, [r4, #48]	; 0x30
   13da4:	tst	r3, #512	; 0x200
   13da8:	bne	13ddc <__assert_fail@plt+0x2fe8>
   13dac:	mov	r0, r6
   13db0:	bl	10d7c <fchdir@plt>
   13db4:	mov	r4, r0
   13db8:	b	13ea8 <__assert_fail@plt+0x30b4>
   13dbc:	mov	r8, #0
   13dc0:	b	13d34 <__assert_fail@plt+0x2f40>
   13dc4:	mov	r6, r5
   13dc8:	mov	r8, #1
   13dcc:	b	13e2c <__assert_fail@plt+0x3038>
   13dd0:	mov	r5, r6
   13dd4:	mov	r8, #1
   13dd8:	b	13e58 <__assert_fail@plt+0x3064>
   13ddc:	eor	r2, r8, #1
   13de0:	mov	r1, r6
   13de4:	mov	r0, r4
   13de8:	bl	13bc4 <__assert_fail@plt+0x2dd0>
   13dec:	mov	r4, #0
   13df0:	b	13eb0 <__assert_fail@plt+0x30bc>
   13df4:	bl	10cf8 <__errno_location@plt>
   13df8:	mov	r5, r0
   13dfc:	ldr	r7, [r0]
   13e00:	mov	r0, r6
   13e04:	bl	10dc4 <close@plt>
   13e08:	str	r7, [r5]
   13e0c:	b	13eb0 <__assert_fail@plt+0x30bc>
   13e10:	ldr	r3, [r4, #48]	; 0x30
   13e14:	tst	r3, #4
   13e18:	bne	13d50 <__assert_fail@plt+0x2f5c>
   13e1c:	cmp	r5, #0
   13e20:	movge	r6, r5
   13e24:	movge	r8, #0
   13e28:	blt	13dbc <__assert_fail@plt+0x2fc8>
   13e2c:	ldr	r3, [r4, #48]	; 0x30
   13e30:	tst	r3, #2
   13e34:	bne	13e58 <__assert_fail@plt+0x3064>
   13e38:	cmp	r9, #0
   13e3c:	beq	13da0 <__assert_fail@plt+0x2fac>
   13e40:	movw	r1, #32884	; 0x8074
   13e44:	movt	r1, #1
   13e48:	mov	r0, r9
   13e4c:	bl	10b9c <strcmp@plt>
   13e50:	cmp	r0, #0
   13e54:	bne	13da0 <__assert_fail@plt+0x2fac>
   13e58:	mov	r2, sp
   13e5c:	mov	r1, r6
   13e60:	mov	r0, #3
   13e64:	bl	10c38 <__fxstat64@plt>
   13e68:	cmp	r0, #0
   13e6c:	bne	13ea4 <__assert_fail@plt+0x30b0>
   13e70:	ldrd	r0, [r7, #64]	; 0x40
   13e74:	ldrd	r2, [sp]
   13e78:	cmp	r1, r3
   13e7c:	cmpeq	r0, r2
   13e80:	bne	13e98 <__assert_fail@plt+0x30a4>
   13e84:	ldrd	r0, [r7, #160]	; 0xa0
   13e88:	ldrd	r2, [sp, #96]	; 0x60
   13e8c:	cmp	r1, r3
   13e90:	cmpeq	r0, r2
   13e94:	beq	13da0 <__assert_fail@plt+0x2fac>
   13e98:	bl	10cf8 <__errno_location@plt>
   13e9c:	mov	r3, #2
   13ea0:	str	r3, [r0]
   13ea4:	mvn	r4, #0
   13ea8:	cmp	r5, #0
   13eac:	blt	13df4 <__assert_fail@plt+0x3000>
   13eb0:	mov	r0, r4
   13eb4:	add	sp, sp, #108	; 0x6c
   13eb8:	ldrd	r4, [sp]
   13ebc:	ldrd	r6, [sp, #8]
   13ec0:	ldrd	r8, [sp, #16]
   13ec4:	add	sp, sp, #24
   13ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ecc:	strd	r4, [sp, #-12]!
   13ed0:	str	lr, [sp, #8]
   13ed4:	sub	sp, sp, #28
   13ed8:	ldr	r3, [r0, #48]	; 0x30
   13edc:	movw	r2, #258	; 0x102
   13ee0:	tst	r2, r3
   13ee4:	bne	13f50 <__assert_fail@plt+0x315c>
   13ee8:	ldr	ip, [r1, #4]
   13eec:	cmp	ip, #0
   13ef0:	beq	13f78 <__assert_fail@plt+0x3184>
   13ef4:	ldr	r3, [ip, #48]	; 0x30
   13ef8:	cmp	r3, #0
   13efc:	blt	13f78 <__assert_fail@plt+0x3184>
   13f00:	ldr	lr, [r0, #56]	; 0x38
   13f04:	ldrd	r2, [lr, #16]
   13f08:	orrs	r3, r2, r3
   13f0c:	beq	13f8c <__assert_fail@plt+0x3198>
   13f10:	ldrd	r4, [lr]
   13f14:	ldrd	r2, [r1, #160]	; 0xa0
   13f18:	cmp	r5, r3
   13f1c:	cmpeq	r4, r2
   13f20:	bne	13f78 <__assert_fail@plt+0x3184>
   13f24:	ldrd	r2, [lr, #8]
   13f28:	ldrd	r4, [r1, #64]	; 0x40
   13f2c:	cmp	r3, r5
   13f30:	cmpeq	r2, r4
   13f34:	bne	13f78 <__assert_fail@plt+0x3184>
   13f38:	ldrd	r2, [ip, #64]	; 0x40
   13f3c:	strd	r2, [lr, #8]
   13f40:	ldr	r3, [r0, #56]	; 0x38
   13f44:	ldrd	r0, [ip, #160]	; 0xa0
   13f48:	strd	r0, [r3]
   13f4c:	b	13f78 <__assert_fail@plt+0x3184>
   13f50:	ldrd	r2, [r1, #64]	; 0x40
   13f54:	strd	r2, [sp]
   13f58:	ldrd	r2, [r1, #160]	; 0xa0
   13f5c:	strd	r2, [sp, #8]
   13f60:	mov	r1, sp
   13f64:	ldr	r0, [r0, #56]	; 0x38
   13f68:	bl	173c0 <__assert_fail@plt+0x65cc>
   13f6c:	cmp	r0, #0
   13f70:	beq	13f88 <__assert_fail@plt+0x3194>
   13f74:	bl	13360 <__assert_fail@plt+0x256c>
   13f78:	add	sp, sp, #28
   13f7c:	ldrd	r4, [sp]
   13f80:	add	sp, sp, #8
   13f84:	pop	{pc}		; (ldr pc, [sp], #4)
   13f88:	bl	10db8 <abort@plt>
   13f8c:	bl	10db8 <abort@plt>
   13f90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f94:	strd	r6, [sp, #8]
   13f98:	strd	r8, [sp, #16]
   13f9c:	strd	sl, [sp, #24]
   13fa0:	str	lr, [sp, #32]
   13fa4:	sub	sp, sp, #68	; 0x44
   13fa8:	mov	r5, r0
   13fac:	str	r1, [sp, #32]
   13fb0:	ldr	r9, [r0]
   13fb4:	ldr	r0, [r9, #12]
   13fb8:	str	r0, [sp, #40]	; 0x28
   13fbc:	cmp	r0, #0
   13fc0:	beq	140d0 <__assert_fail@plt+0x32dc>
   13fc4:	bl	10d64 <dirfd@plt>
   13fc8:	str	r0, [sp, #60]	; 0x3c
   13fcc:	cmp	r0, #0
   13fd0:	blt	1408c <__assert_fail@plt+0x3298>
   13fd4:	ldr	r2, [r5, #44]	; 0x2c
   13fd8:	movw	r3, #34464	; 0x86a0
   13fdc:	movt	r3, #1
   13fe0:	cmp	r2, #0
   13fe4:	mvnne	r3, #0
   13fe8:	str	r3, [sp, #16]
   13fec:	mov	r3, #1
   13ff0:	str	r3, [sp, #52]	; 0x34
   13ff4:	ldr	r3, [r9, #40]	; 0x28
   13ff8:	sub	r1, r3, #1
   13ffc:	ldr	r2, [r9, #28]
   14000:	ldrb	r2, [r2, r1]
   14004:	cmp	r2, #47	; 0x2f
   14008:	movne	r1, r3
   1400c:	str	r1, [sp, #28]
   14010:	ldr	r3, [r5, #48]	; 0x30
   14014:	tst	r3, #4
   14018:	moveq	r3, #0
   1401c:	streq	r3, [sp, #20]
   14020:	beq	1403c <__assert_fail@plt+0x3248>
   14024:	ldr	r3, [r5, #24]
   14028:	add	r2, r3, r1
   1402c:	add	r2, r2, #1
   14030:	str	r2, [sp, #20]
   14034:	mov	r2, #47	; 0x2f
   14038:	strb	r2, [r3, r1]
   1403c:	ldr	r3, [sp, #28]
   14040:	add	sl, r3, #1
   14044:	ldr	fp, [r5, #36]	; 0x24
   14048:	sub	fp, fp, sl
   1404c:	ldr	r3, [r9, #48]	; 0x30
   14050:	add	r3, r3, #1
   14054:	str	r3, [sp, #12]
   14058:	mov	r3, #0
   1405c:	str	r3, [sp, #36]	; 0x24
   14060:	str	r3, [sp, #24]
   14064:	str	r3, [sp]
   14068:	mov	r8, r3
   1406c:	str	r3, [sp, #4]
   14070:	movw	r3, #6548	; 0x1994
   14074:	movt	r3, #258	; 0x102
   14078:	str	r3, [sp, #44]	; 0x2c
   1407c:	movw	r3, #19778	; 0x4d42
   14080:	movt	r3, #65363	; 0xff53
   14084:	str	r3, [sp, #48]	; 0x30
   14088:	b	14668 <__assert_fail@plt+0x3874>
   1408c:	ldr	r0, [r9, #12]
   14090:	bl	10ddc <closedir@plt>
   14094:	mov	r3, #0
   14098:	str	r3, [r9, #12]
   1409c:	ldr	r3, [sp, #32]
   140a0:	cmp	r3, #3
   140a4:	movne	r3, #0
   140a8:	strne	r3, [sp, #4]
   140ac:	bne	14518 <__assert_fail@plt+0x3724>
   140b0:	mov	r3, #4
   140b4:	strh	r3, [r9, #56]	; 0x38
   140b8:	bl	10cf8 <__errno_location@plt>
   140bc:	ldr	r3, [r0]
   140c0:	str	r3, [r9, #32]
   140c4:	mov	r3, #0
   140c8:	str	r3, [sp, #4]
   140cc:	b	14518 <__assert_fail@plt+0x3724>
   140d0:	ldr	r3, [r5, #48]	; 0x30
   140d4:	and	r2, r3, #516	; 0x204
   140d8:	cmp	r2, #512	; 0x200
   140dc:	ldreq	r0, [r5, #32]
   140e0:	mvnne	r0, #99	; 0x63
   140e4:	ldr	r1, [r9, #24]
   140e8:	ands	r2, r3, #16
   140ec:	beq	14108 <__assert_fail@plt+0x3314>
   140f0:	tst	r3, #1
   140f4:	moveq	r2, #32768	; 0x8000
   140f8:	beq	14108 <__assert_fail@plt+0x3314>
   140fc:	ldr	r2, [r9, #48]	; 0x30
   14100:	cmp	r2, #0
   14104:	movne	r2, #32768	; 0x8000
   14108:	add	r3, sp, #60	; 0x3c
   1410c:	bl	176bc <__assert_fail@plt+0x68c8>
   14110:	str	r0, [sp, #4]
   14114:	str	r0, [r9, #12]
   14118:	cmp	r0, #0
   1411c:	beq	141f0 <__assert_fail@plt+0x33fc>
   14120:	ldrh	r3, [r9, #56]	; 0x38
   14124:	cmp	r3, #11
   14128:	beq	14214 <__assert_fail@plt+0x3420>
   1412c:	ldr	r3, [r5, #48]	; 0x30
   14130:	tst	r3, #256	; 0x100
   14134:	bne	1422c <__assert_fail@plt+0x3438>
   14138:	ldr	r2, [r5, #44]	; 0x2c
   1413c:	movw	r3, #34464	; 0x86a0
   14140:	movt	r3, #1
   14144:	cmp	r2, #0
   14148:	mvnne	r3, #0
   1414c:	str	r3, [sp, #16]
   14150:	ldr	r3, [sp, #32]
   14154:	cmp	r3, #2
   14158:	beq	14350 <__assert_fail@plt+0x355c>
   1415c:	ldr	r3, [r5, #48]	; 0x30
   14160:	and	r3, r3, #56	; 0x38
   14164:	cmp	r3, #24
   14168:	beq	14274 <__assert_fail@plt+0x3480>
   1416c:	ldr	r3, [sp, #32]
   14170:	cmp	r3, #3
   14174:	movne	r4, #0
   14178:	moveq	r4, #1
   1417c:	mov	r6, #1
   14180:	ldr	r3, [r5, #48]	; 0x30
   14184:	tst	r3, #512	; 0x200
   14188:	bne	1430c <__assert_fail@plt+0x3518>
   1418c:	ldr	r2, [sp, #60]	; 0x3c
   14190:	cmp	r2, #0
   14194:	bge	14324 <__assert_fail@plt+0x3530>
   14198:	tst	r4, r6
   1419c:	beq	141ac <__assert_fail@plt+0x33b8>
   141a0:	bl	10cf8 <__errno_location@plt>
   141a4:	ldr	r3, [r0]
   141a8:	str	r3, [r9, #32]
   141ac:	ldrh	r3, [r9, #58]	; 0x3a
   141b0:	orr	r3, r3, #1
   141b4:	strh	r3, [r9, #58]	; 0x3a
   141b8:	ldr	r0, [r9, #12]
   141bc:	bl	10ddc <closedir@plt>
   141c0:	mov	r3, #0
   141c4:	str	r3, [r9, #12]
   141c8:	ldr	r3, [r5, #48]	; 0x30
   141cc:	tst	r3, #512	; 0x200
   141d0:	beq	141e0 <__assert_fail@plt+0x33ec>
   141d4:	ldr	r0, [sp, #60]	; 0x3c
   141d8:	cmp	r0, #0
   141dc:	bge	14348 <__assert_fail@plt+0x3554>
   141e0:	mov	r3, #0
   141e4:	str	r3, [r9, #12]
   141e8:	str	r3, [sp, #52]	; 0x34
   141ec:	b	13ff4 <__assert_fail@plt+0x3200>
   141f0:	ldr	r3, [sp, #32]
   141f4:	cmp	r3, #3
   141f8:	bne	14518 <__assert_fail@plt+0x3724>
   141fc:	mov	r3, #4
   14200:	strh	r3, [r9, #56]	; 0x38
   14204:	bl	10cf8 <__errno_location@plt>
   14208:	ldr	r3, [r0]
   1420c:	str	r3, [r9, #32]
   14210:	b	14518 <__assert_fail@plt+0x3724>
   14214:	mov	r2, #0
   14218:	mov	r1, r9
   1421c:	mov	r0, r5
   14220:	bl	1353c <__assert_fail@plt+0x2748>
   14224:	strh	r0, [r9, #56]	; 0x38
   14228:	b	14138 <__assert_fail@plt+0x3344>
   1422c:	mov	r1, r9
   14230:	mov	r0, r5
   14234:	bl	13ecc <__assert_fail@plt+0x30d8>
   14238:	mov	r2, #0
   1423c:	mov	r1, r9
   14240:	mov	r0, r5
   14244:	bl	1353c <__assert_fail@plt+0x2748>
   14248:	mov	r1, r9
   1424c:	mov	r0, r5
   14250:	bl	13afc <__assert_fail@plt+0x2d08>
   14254:	cmp	r0, #0
   14258:	bne	14138 <__assert_fail@plt+0x3344>
   1425c:	bl	10cf8 <__errno_location@plt>
   14260:	mov	r3, #12
   14264:	str	r3, [r0]
   14268:	ldr	r3, [sp, #40]	; 0x28
   1426c:	str	r3, [sp, #4]
   14270:	b	14518 <__assert_fail@plt+0x3724>
   14274:	ldr	r3, [r9, #84]	; 0x54
   14278:	cmp	r3, #2
   1427c:	bne	1416c <__assert_fail@plt+0x3378>
   14280:	ldr	r1, [sp, #60]	; 0x3c
   14284:	mov	r0, r9
   14288:	bl	139d0 <__assert_fail@plt+0x2bdc>
   1428c:	movw	r3, #26985	; 0x6969
   14290:	cmp	r0, r3
   14294:	beq	142f4 <__assert_fail@plt+0x3500>
   14298:	bgt	142d8 <__assert_fail@plt+0x34e4>
   1429c:	movw	r3, #19778	; 0x4d42
   142a0:	movt	r3, #65363	; 0xff53
   142a4:	cmp	r0, r3
   142a8:	beq	142f4 <__assert_fail@plt+0x3500>
   142ac:	cmp	r0, #0
   142b0:	beq	142f4 <__assert_fail@plt+0x3500>
   142b4:	ldr	r3, [sp, #32]
   142b8:	cmp	r3, #3
   142bc:	moveq	r4, #1
   142c0:	movne	r4, #0
   142c4:	movne	r3, #0
   142c8:	strne	r3, [sp, #52]	; 0x34
   142cc:	bne	13ff4 <__assert_fail@plt+0x3200>
   142d0:	mov	r6, #0
   142d4:	b	14180 <__assert_fail@plt+0x338c>
   142d8:	movw	r3, #40864	; 0x9fa0
   142dc:	cmp	r0, r3
   142e0:	beq	142f4 <__assert_fail@plt+0x3500>
   142e4:	movw	r3, #16719	; 0x414f
   142e8:	movt	r3, #21318	; 0x5346
   142ec:	cmp	r0, r3
   142f0:	bne	142b4 <__assert_fail@plt+0x34c0>
   142f4:	ldr	r3, [sp, #32]
   142f8:	cmp	r3, #3
   142fc:	movne	r4, #0
   14300:	moveq	r4, #1
   14304:	mov	r6, #1
   14308:	b	14180 <__assert_fail@plt+0x338c>
   1430c:	mov	r2, #3
   14310:	movw	r1, #1030	; 0x406
   14314:	ldr	r0, [sp, #60]	; 0x3c
   14318:	bl	179a4 <__assert_fail@plt+0x6bb0>
   1431c:	str	r0, [sp, #60]	; 0x3c
   14320:	b	1418c <__assert_fail@plt+0x3398>
   14324:	mov	r3, #0
   14328:	mov	r1, r9
   1432c:	mov	r0, r5
   14330:	bl	13cc0 <__assert_fail@plt+0x2ecc>
   14334:	cmp	r0, #0
   14338:	moveq	r3, #1
   1433c:	streq	r3, [sp, #52]	; 0x34
   14340:	beq	13ff4 <__assert_fail@plt+0x3200>
   14344:	b	14198 <__assert_fail@plt+0x33a4>
   14348:	bl	10dc4 <close@plt>
   1434c:	b	141e0 <__assert_fail@plt+0x33ec>
   14350:	mov	r3, #0
   14354:	str	r3, [sp, #52]	; 0x34
   14358:	b	13ff4 <__assert_fail@plt+0x3200>
   1435c:	ldr	r3, [sp, #8]
   14360:	ldr	r3, [r3]
   14364:	cmp	r3, #0
   14368:	beq	14388 <__assert_fail@plt+0x3594>
   1436c:	str	r3, [r9, #32]
   14370:	ldr	r3, [sp, #40]	; 0x28
   14374:	orr	r3, r3, r8
   14378:	cmp	r3, #0
   1437c:	movne	r3, #7
   14380:	moveq	r3, #4
   14384:	strh	r3, [r9, #56]	; 0x38
   14388:	ldr	r0, [r9, #12]
   1438c:	cmp	r0, #0
   14390:	beq	143a0 <__assert_fail@plt+0x35ac>
   14394:	bl	10ddc <closedir@plt>
   14398:	mov	r3, #0
   1439c:	str	r3, [r9, #12]
   143a0:	ldr	r3, [sp, #24]
   143a4:	cmp	r3, #0
   143a8:	bne	14868 <__assert_fail@plt+0x3a74>
   143ac:	ldr	r3, [r5, #48]	; 0x30
   143b0:	tst	r3, #4
   143b4:	beq	143e0 <__assert_fail@plt+0x35ec>
   143b8:	ldr	r3, [r5, #36]	; 0x24
   143bc:	cmp	r8, #0
   143c0:	cmpne	r3, sl
   143c4:	bne	143d4 <__assert_fail@plt+0x35e0>
   143c8:	ldr	r3, [sp, #20]
   143cc:	sub	r3, r3, #1
   143d0:	str	r3, [sp, #20]
   143d4:	mov	r3, #0
   143d8:	ldr	r2, [sp, #20]
   143dc:	strb	r3, [r2]
   143e0:	ldr	r3, [sp, #52]	; 0x34
   143e4:	ldr	r2, [sp, #40]	; 0x28
   143e8:	cmp	r2, #0
   143ec:	movne	r3, #0
   143f0:	cmp	r3, #0
   143f4:	beq	1442c <__assert_fail@plt+0x3638>
   143f8:	ldr	r3, [sp, #32]
   143fc:	cmp	r8, #0
   14400:	cmpne	r3, #1
   14404:	bne	14434 <__assert_fail@plt+0x3640>
   14408:	ldr	r3, [r9, #48]	; 0x30
   1440c:	cmp	r3, #0
   14410:	bne	148f8 <__assert_fail@plt+0x3b04>
   14414:	mov	r0, r5
   14418:	bl	13c5c <__assert_fail@plt+0x2e68>
   1441c:	adds	r0, r0, #0
   14420:	movne	r0, #1
   14424:	cmp	r0, #0
   14428:	bne	1491c <__assert_fail@plt+0x3b28>
   1442c:	cmp	r8, #0
   14430:	beq	14944 <__assert_fail@plt+0x3b50>
   14434:	ldr	r3, [sp, #36]	; 0x24
   14438:	cmp	r3, #0
   1443c:	bne	1497c <__assert_fail@plt+0x3b88>
   14440:	ldr	r3, [r5, #44]	; 0x2c
   14444:	cmp	r3, #0
   14448:	cmpne	r8, #1
   1444c:	bls	14518 <__assert_fail@plt+0x3724>
   14450:	mov	r2, r8
   14454:	ldr	r1, [sp, #4]
   14458:	mov	r0, r5
   1445c:	bl	136ac <__assert_fail@plt+0x28b8>
   14460:	str	r0, [sp, #4]
   14464:	b	14518 <__assert_fail@plt+0x3724>
   14468:	ldrb	r3, [r7, #20]
   1446c:	cmp	r3, #0
   14470:	beq	14860 <__assert_fail@plt+0x3a6c>
   14474:	ldrh	r3, [r7, #20]
   14478:	cmp	r3, #46	; 0x2e
   1447c:	bne	146ac <__assert_fail@plt+0x38b8>
   14480:	ldr	r4, [sp]
   14484:	b	14664 <__assert_fail@plt+0x3870>
   14488:	ldr	fp, [r5, #24]
   1448c:	ldr	r3, [sp, #28]
   14490:	add	r1, r3, #2
   14494:	add	r1, r1, r6
   14498:	mov	r0, r5
   1449c:	bl	134b8 <__assert_fail@plt+0x26c4>
   144a0:	cmp	r0, #0
   144a4:	beq	144d4 <__assert_fail@plt+0x36e0>
   144a8:	ldr	r3, [r5, #24]
   144ac:	cmp	r3, fp
   144b0:	beq	14538 <__assert_fail@plt+0x3744>
   144b4:	ldr	r2, [r5, #48]	; 0x30
   144b8:	tst	r2, #4
   144bc:	addne	r3, r3, sl
   144c0:	strne	r3, [sp, #20]
   144c4:	ldr	fp, [r5, #36]	; 0x24
   144c8:	sub	fp, fp, sl
   144cc:	str	r0, [sp, #24]
   144d0:	b	146dc <__assert_fail@plt+0x38e8>
   144d4:	ldr	r7, [sp, #8]
   144d8:	ldr	r6, [r7]
   144dc:	mov	r0, r4
   144e0:	bl	13360 <__assert_fail@plt+0x256c>
   144e4:	ldr	r0, [sp, #4]
   144e8:	bl	13900 <__assert_fail@plt+0x2b0c>
   144ec:	ldr	r0, [r9, #12]
   144f0:	bl	10ddc <closedir@plt>
   144f4:	mov	r2, #0
   144f8:	str	r2, [r9, #12]
   144fc:	mov	r3, #7
   14500:	strh	r3, [r9, #56]	; 0x38
   14504:	ldr	r3, [r5, #48]	; 0x30
   14508:	orr	r3, r3, #8192	; 0x2000
   1450c:	str	r3, [r5, #48]	; 0x30
   14510:	str	r6, [r7]
   14514:	str	r2, [sp, #4]
   14518:	ldr	r0, [sp, #4]
   1451c:	add	sp, sp, #68	; 0x44
   14520:	ldrd	r4, [sp]
   14524:	ldrd	r6, [sp, #8]
   14528:	ldrd	r8, [sp, #16]
   1452c:	ldrd	sl, [sp, #24]
   14530:	add	sp, sp, #32
   14534:	pop	{pc}		; (ldr pc, [sp], #4)
   14538:	ldr	r0, [sp, #24]
   1453c:	b	144c4 <__assert_fail@plt+0x36d0>
   14540:	mov	r0, r4
   14544:	bl	13360 <__assert_fail@plt+0x256c>
   14548:	ldr	r0, [sp, #4]
   1454c:	bl	13900 <__assert_fail@plt+0x2b0c>
   14550:	ldr	r0, [r9, #12]
   14554:	bl	10ddc <closedir@plt>
   14558:	mov	r2, #0
   1455c:	str	r2, [r9, #12]
   14560:	mov	r3, #7
   14564:	strh	r3, [r9, #56]	; 0x38
   14568:	ldr	r3, [r5, #48]	; 0x30
   1456c:	orr	r3, r3, #8192	; 0x2000
   14570:	str	r3, [r5, #48]	; 0x30
   14574:	mov	r3, #36	; 0x24
   14578:	ldr	r1, [sp, #8]
   1457c:	str	r3, [r1]
   14580:	str	r2, [sp, #4]
   14584:	b	14518 <__assert_fail@plt+0x3724>
   14588:	ldr	r3, [r4, #28]
   1458c:	str	r3, [r4, #24]
   14590:	ldr	r2, [r4, #52]	; 0x34
   14594:	add	r2, r2, #1
   14598:	add	r1, r4, #168	; 0xa8
   1459c:	ldr	r0, [sp, #20]
   145a0:	bl	10bd8 <memmove@plt>
   145a4:	b	14714 <__assert_fail@plt+0x3920>
   145a8:	ubfx	r3, r3, #4, #1
   145ac:	cmp	r2, #10
   145b0:	orrne	r3, r3, #1
   145b4:	cmp	r3, #0
   145b8:	beq	14744 <__assert_fail@plt+0x3950>
   145bc:	mov	r2, #11
   145c0:	strh	r2, [r4, #56]	; 0x38
   145c4:	ldrb	r2, [r7, #18]
   145c8:	sub	r2, r2, #1
   145cc:	cmp	r2, #11
   145d0:	ldrls	pc, [pc, r2, lsl #2]
   145d4:	b	147d0 <__assert_fail@plt+0x39dc>
   145d8:	andeq	r4, r1, r0, lsr #15
   145dc:	andeq	r4, r1, ip, lsl #12
   145e0:	ldrdeq	r4, [r1], -r0
   145e4:	muleq	r1, r4, r7
   145e8:	ldrdeq	r4, [r1], -r0
   145ec:	andeq	r4, r1, r8, lsr #19
   145f0:	ldrdeq	r4, [r1], -r0
   145f4:			; <UNDEFINED> instruction: 0x000147b8
   145f8:	ldrdeq	r4, [r1], -r0
   145fc:	andeq	r4, r1, ip, lsr #15
   14600:	ldrdeq	r4, [r1], -r0
   14604:	andeq	r4, r1, r4, asr #15
   14608:	mov	r3, #0
   1460c:	mov	r2, #8192	; 0x2000
   14610:	str	r2, [r4, #80]	; 0x50
   14614:	cmp	r3, #0
   14618:	movne	r2, #1
   1461c:	moveq	r2, #2
   14620:	mov	r3, #0
   14624:	str	r2, [r4, #112]	; 0x70
   14628:	str	r3, [r4, #116]	; 0x74
   1462c:	mov	r3, #0
   14630:	str	r3, [r4, #8]
   14634:	ldr	r3, [sp, #4]
   14638:	cmp	r3, #0
   1463c:	ldrne	r3, [sp]
   14640:	strne	r4, [r3, #8]
   14644:	streq	r4, [sp, #4]
   14648:	movw	r3, #10000	; 0x2710
   1464c:	cmp	r8, r3
   14650:	beq	147f0 <__assert_fail@plt+0x39fc>
   14654:	add	r8, r8, #1
   14658:	ldr	r3, [sp, #16]
   1465c:	cmp	r8, r3
   14660:	bcs	143a0 <__assert_fail@plt+0x35ac>
   14664:	str	r4, [sp]
   14668:	ldr	r3, [r9, #12]
   1466c:	cmp	r3, #0
   14670:	beq	143a0 <__assert_fail@plt+0x35ac>
   14674:	bl	10cf8 <__errno_location@plt>
   14678:	str	r0, [sp, #8]
   1467c:	mov	r3, #0
   14680:	str	r3, [r0]
   14684:	ldr	r0, [r9, #12]
   14688:	bl	10d40 <readdir64@plt>
   1468c:	subs	r7, r0, #0
   14690:	beq	1435c <__assert_fail@plt+0x3568>
   14694:	ldr	r3, [r5, #48]	; 0x30
   14698:	tst	r3, #32
   1469c:	bne	146ac <__assert_fail@plt+0x38b8>
   146a0:	ldrb	r3, [r7, #19]
   146a4:	cmp	r3, #46	; 0x2e
   146a8:	beq	14468 <__assert_fail@plt+0x3674>
   146ac:	add	r4, r7, #19
   146b0:	mov	r0, r4
   146b4:	bl	10cc8 <strlen@plt>
   146b8:	mov	r6, r0
   146bc:	mov	r2, r0
   146c0:	mov	r1, r4
   146c4:	mov	r0, r5
   146c8:	bl	1379c <__assert_fail@plt+0x29a8>
   146cc:	subs	r4, r0, #0
   146d0:	beq	144d4 <__assert_fail@plt+0x36e0>
   146d4:	cmp	fp, r6
   146d8:	bls	14488 <__assert_fail@plt+0x3694>
   146dc:	adds	r6, sl, r6
   146e0:	bcs	14540 <__assert_fail@plt+0x374c>
   146e4:	ldr	r3, [sp, #12]
   146e8:	str	r3, [r4, #48]	; 0x30
   146ec:	ldr	r3, [r5]
   146f0:	str	r3, [r4, #4]
   146f4:	str	r6, [r4, #40]	; 0x28
   146f8:	ldrd	r2, [r7]
   146fc:	strd	r2, [r4, #160]	; 0xa0
   14700:	ldr	r3, [r5, #48]	; 0x30
   14704:	tst	r3, #4
   14708:	addeq	r3, r4, #168	; 0xa8
   1470c:	streq	r3, [r4, #24]
   14710:	bne	14588 <__assert_fail@plt+0x3794>
   14714:	ldr	r3, [r5, #44]	; 0x2c
   14718:	cmp	r3, #0
   1471c:	beq	1472c <__assert_fail@plt+0x3938>
   14720:	ldr	r3, [r5, #48]	; 0x30
   14724:	tst	r3, #1024	; 0x400
   14728:	beq	147d8 <__assert_fail@plt+0x39e4>
   1472c:	ldr	r3, [r5, #48]	; 0x30
   14730:	tst	r3, #8
   14734:	beq	14744 <__assert_fail@plt+0x3950>
   14738:	ldrb	r2, [r7, #18]
   1473c:	tst	r2, #251	; 0xfb
   14740:	bne	145a8 <__assert_fail@plt+0x37b4>
   14744:	mov	r3, #11
   14748:	strh	r3, [r4, #56]	; 0x38
   1474c:	ldrb	r3, [r7, #18]
   14750:	sub	r3, r3, #1
   14754:	cmp	r3, #11
   14758:	ldrls	pc, [pc, r3, lsl #2]
   1475c:	b	147cc <__assert_fail@plt+0x39d8>
   14760:	muleq	r1, ip, r7
   14764:	andeq	r4, r1, r8, lsl #12
   14768:	andeq	r4, r1, ip, asr #15
   1476c:	muleq	r1, r0, r7
   14770:	andeq	r4, r1, ip, asr #15
   14774:			; <UNDEFINED> instruction: 0x000149bc
   14778:	andeq	r4, r1, ip, asr #15
   1477c:			; <UNDEFINED> instruction: 0x000147b4
   14780:	andeq	r4, r1, ip, asr #15
   14784:	andeq	r4, r1, r8, lsr #15
   14788:	andeq	r4, r1, ip, asr #15
   1478c:	andeq	r4, r1, r0, asr #15
   14790:	mov	r3, #0
   14794:	mov	r2, #16384	; 0x4000
   14798:	b	14610 <__assert_fail@plt+0x381c>
   1479c:	mov	r3, #0
   147a0:	mov	r2, #4096	; 0x1000
   147a4:	b	14610 <__assert_fail@plt+0x381c>
   147a8:	mov	r3, #0
   147ac:	mov	r2, #40960	; 0xa000
   147b0:	b	14610 <__assert_fail@plt+0x381c>
   147b4:	mov	r3, #0
   147b8:	mov	r2, #32768	; 0x8000
   147bc:	b	14610 <__assert_fail@plt+0x381c>
   147c0:	mov	r3, #0
   147c4:	mov	r2, #49152	; 0xc000
   147c8:	b	14610 <__assert_fail@plt+0x381c>
   147cc:	mov	r3, #0
   147d0:	mov	r2, #0
   147d4:	b	14610 <__assert_fail@plt+0x381c>
   147d8:	mov	r2, #0
   147dc:	mov	r1, r4
   147e0:	mov	r0, r5
   147e4:	bl	1353c <__assert_fail@plt+0x2748>
   147e8:	strh	r0, [r4, #56]	; 0x38
   147ec:	b	1462c <__assert_fail@plt+0x3838>
   147f0:	ldr	r3, [r5, #44]	; 0x2c
   147f4:	cmp	r3, #0
   147f8:	beq	14804 <__assert_fail@plt+0x3a10>
   147fc:	movw	r8, #10001	; 0x2711
   14800:	b	14664 <__assert_fail@plt+0x3870>
   14804:	ldr	r1, [sp, #60]	; 0x3c
   14808:	mov	r0, r9
   1480c:	bl	139d0 <__assert_fail@plt+0x2bdc>
   14810:	movw	r3, #26985	; 0x6969
   14814:	cmp	r0, r3
   14818:	beq	14848 <__assert_fail@plt+0x3a54>
   1481c:	ldr	r3, [sp, #44]	; 0x2c
   14820:	cmp	r0, r3
   14824:	beq	14854 <__assert_fail@plt+0x3a60>
   14828:	ldr	r3, [sp, #48]	; 0x30
   1482c:	cmp	r0, r3
   14830:	moveq	r3, #0
   14834:	streq	r3, [sp, #36]	; 0x24
   14838:	beq	14654 <__assert_fail@plt+0x3860>
   1483c:	mov	r3, #1
   14840:	str	r3, [sp, #36]	; 0x24
   14844:	b	147fc <__assert_fail@plt+0x3a08>
   14848:	mov	r3, #0
   1484c:	str	r3, [sp, #36]	; 0x24
   14850:	b	14654 <__assert_fail@plt+0x3860>
   14854:	mov	r3, #0
   14858:	str	r3, [sp, #36]	; 0x24
   1485c:	b	14654 <__assert_fail@plt+0x3860>
   14860:	ldr	r4, [sp]
   14864:	b	14664 <__assert_fail@plt+0x3870>
   14868:	ldr	r1, [r5, #24]
   1486c:	ldr	r3, [r5, #4]
   14870:	cmp	r3, #0
   14874:	bne	14890 <__assert_fail@plt+0x3a9c>
   14878:	ldr	r3, [sp, #4]
   1487c:	b	148c8 <__assert_fail@plt+0x3ad4>
   14880:	str	r1, [r3, #28]
   14884:	ldr	r3, [r3, #8]
   14888:	cmp	r3, #0
   1488c:	beq	14878 <__assert_fail@plt+0x3a84>
   14890:	ldr	r2, [r3, #24]
   14894:	add	r0, r3, #168	; 0xa8
   14898:	cmp	r2, r0
   1489c:	beq	14880 <__assert_fail@plt+0x3a8c>
   148a0:	ldr	r0, [r3, #28]
   148a4:	sub	r2, r2, r0
   148a8:	add	r2, r1, r2
   148ac:	str	r2, [r3, #24]
   148b0:	b	14880 <__assert_fail@plt+0x3a8c>
   148b4:	str	r1, [r3, #28]
   148b8:	ldr	r2, [r3, #8]
   148bc:	cmp	r2, #0
   148c0:	ldreq	r2, [r3, #4]
   148c4:	mov	r3, r2
   148c8:	ldr	r2, [r3, #48]	; 0x30
   148cc:	cmp	r2, #0
   148d0:	blt	143ac <__assert_fail@plt+0x35b8>
   148d4:	ldr	r2, [r3, #24]
   148d8:	add	r0, r3, #168	; 0xa8
   148dc:	cmp	r2, r0
   148e0:	beq	148b4 <__assert_fail@plt+0x3ac0>
   148e4:	ldr	r0, [r3, #28]
   148e8:	sub	r2, r2, r0
   148ec:	add	r2, r1, r2
   148f0:	str	r2, [r3, #24]
   148f4:	b	148b4 <__assert_fail@plt+0x3ac0>
   148f8:	movw	r3, #32884	; 0x8074
   148fc:	movt	r3, #1
   14900:	mvn	r2, #0
   14904:	ldr	r1, [r9, #4]
   14908:	mov	r0, r5
   1490c:	bl	13cc0 <__assert_fail@plt+0x2ecc>
   14910:	adds	r0, r0, #0
   14914:	movne	r0, #1
   14918:	b	14424 <__assert_fail@plt+0x3630>
   1491c:	mov	r3, #7
   14920:	strh	r3, [r9, #56]	; 0x38
   14924:	ldr	r3, [r5, #48]	; 0x30
   14928:	orr	r3, r3, #8192	; 0x2000
   1492c:	str	r3, [r5, #48]	; 0x30
   14930:	ldr	r0, [sp, #4]
   14934:	bl	13900 <__assert_fail@plt+0x2b0c>
   14938:	mov	r3, #0
   1493c:	str	r3, [sp, #4]
   14940:	b	14518 <__assert_fail@plt+0x3724>
   14944:	ldr	r3, [sp, #32]
   14948:	cmp	r3, #3
   1494c:	beq	14964 <__assert_fail@plt+0x3b70>
   14950:	ldr	r0, [sp, #4]
   14954:	bl	13900 <__assert_fail@plt+0x2b0c>
   14958:	mov	r3, #0
   1495c:	str	r3, [sp, #4]
   14960:	b	14518 <__assert_fail@plt+0x3724>
   14964:	ldrh	r3, [r9, #56]	; 0x38
   14968:	cmp	r3, #4
   1496c:	cmpne	r3, #7
   14970:	movne	r3, #6
   14974:	strhne	r3, [r9, #56]	; 0x38
   14978:	b	14950 <__assert_fail@plt+0x3b5c>
   1497c:	movw	r3, #13436	; 0x347c
   14980:	movt	r3, #1
   14984:	str	r3, [r5, #44]	; 0x2c
   14988:	mov	r2, r8
   1498c:	ldr	r1, [sp, #4]
   14990:	mov	r0, r5
   14994:	bl	136ac <__assert_fail@plt+0x28b8>
   14998:	str	r0, [sp, #4]
   1499c:	mov	r3, #0
   149a0:	str	r3, [r5, #44]	; 0x2c
   149a4:	b	14518 <__assert_fail@plt+0x3724>
   149a8:	mov	r3, #24576	; 0x6000
   149ac:	str	r3, [r4, #80]	; 0x50
   149b0:	mov	r2, #1
   149b4:	mov	r3, #0
   149b8:	b	14624 <__assert_fail@plt+0x3830>
   149bc:	mov	r3, #24576	; 0x6000
   149c0:	str	r3, [r4, #80]	; 0x50
   149c4:	mov	r2, #2
   149c8:	mov	r3, #0
   149cc:	b	14624 <__assert_fail@plt+0x3830>
   149d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149d4:	strd	r6, [sp, #8]
   149d8:	strd	r8, [sp, #16]
   149dc:	strd	sl, [sp, #24]
   149e0:	str	lr, [sp, #32]
   149e4:	sub	sp, sp, #20
   149e8:	bic	r3, r1, #4080	; 0xff0
   149ec:	bic	r3, r3, #15
   149f0:	cmp	r3, #0
   149f4:	bne	14ad4 <__assert_fail@plt+0x3ce0>
   149f8:	mov	r6, r0
   149fc:	mov	r9, r1
   14a00:	mov	sl, r2
   14a04:	and	r3, r1, #516	; 0x204
   14a08:	cmp	r3, #516	; 0x204
   14a0c:	beq	14ae8 <__assert_fail@plt+0x3cf4>
   14a10:	tst	r1, #18
   14a14:	beq	14afc <__assert_fail@plt+0x3d08>
   14a18:	mov	r1, #96	; 0x60
   14a1c:	mov	r0, #1
   14a20:	bl	1778c <__assert_fail@plt+0x6998>
   14a24:	subs	r5, r0, #0
   14a28:	beq	14d24 <__assert_fail@plt+0x3f30>
   14a2c:	str	sl, [r5, #44]	; 0x2c
   14a30:	tst	r9, #2
   14a34:	streq	r9, [r5, #48]	; 0x30
   14a38:	bicne	r3, r9, #512	; 0x200
   14a3c:	orrne	r3, r3, #4
   14a40:	strne	r3, [r5, #48]	; 0x30
   14a44:	mvn	r3, #99	; 0x63
   14a48:	str	r3, [r5, #32]
   14a4c:	ldr	r0, [r6]
   14a50:	cmp	r0, #0
   14a54:	beq	14b10 <__assert_fail@plt+0x3d1c>
   14a58:	mov	r7, r6
   14a5c:	mov	r4, #0
   14a60:	bl	10cc8 <strlen@plt>
   14a64:	cmp	r4, r0
   14a68:	movcc	r4, r0
   14a6c:	ldr	r0, [r7, #4]!
   14a70:	cmp	r0, #0
   14a74:	bne	14a60 <__assert_fail@plt+0x3c6c>
   14a78:	add	r1, r4, #1
   14a7c:	cmp	r1, #4096	; 0x1000
   14a80:	movcc	r1, #4096	; 0x1000
   14a84:	mov	r0, r5
   14a88:	bl	134b8 <__assert_fail@plt+0x26c4>
   14a8c:	cmp	r0, #0
   14a90:	beq	14d18 <__assert_fail@plt+0x3f24>
   14a94:	ldr	fp, [r6]
   14a98:	cmp	fp, #0
   14a9c:	beq	14d44 <__assert_fail@plt+0x3f50>
   14aa0:	mov	r2, #0
   14aa4:	movw	r1, #33188	; 0x81a4
   14aa8:	movt	r1, #1
   14aac:	mov	r0, r5
   14ab0:	bl	1379c <__assert_fail@plt+0x29a8>
   14ab4:	subs	fp, r0, #0
   14ab8:	beq	14d10 <__assert_fail@plt+0x3f1c>
   14abc:	mvn	r3, #0
   14ac0:	str	r3, [fp, #48]	; 0x30
   14ac4:	cmp	sl, #0
   14ac8:	moveq	r3, #1
   14acc:	bne	14d4c <__assert_fail@plt+0x3f58>
   14ad0:	b	14d54 <__assert_fail@plt+0x3f60>
   14ad4:	bl	10cf8 <__errno_location@plt>
   14ad8:	mov	r3, #22
   14adc:	str	r3, [r0]
   14ae0:	mov	r5, #0
   14ae4:	b	14d24 <__assert_fail@plt+0x3f30>
   14ae8:	bl	10cf8 <__errno_location@plt>
   14aec:	mov	r3, #22
   14af0:	str	r3, [r0]
   14af4:	mov	r5, #0
   14af8:	b	14d24 <__assert_fail@plt+0x3f30>
   14afc:	bl	10cf8 <__errno_location@plt>
   14b00:	mov	r3, #22
   14b04:	str	r3, [r0]
   14b08:	mov	r5, #0
   14b0c:	b	14d24 <__assert_fail@plt+0x3f30>
   14b10:	mov	r4, #0
   14b14:	b	14a78 <__assert_fail@plt+0x3c84>
   14b18:	sub	r1, r0, #1
   14b1c:	ldrb	r3, [r4, r1]
   14b20:	cmp	r3, #47	; 0x2f
   14b24:	bne	14bb0 <__assert_fail@plt+0x3dbc>
   14b28:	sub	r0, r0, #2
   14b2c:	add	r3, r4, r0
   14b30:	ldrb	r0, [r4, r0]
   14b34:	cmp	r0, #47	; 0x2f
   14b38:	moveq	r2, r1
   14b3c:	bne	14bb0 <__assert_fail@plt+0x3dbc>
   14b40:	ldrb	r1, [r3, #-1]!
   14b44:	cmp	r1, #47	; 0x2f
   14b48:	bne	14bb0 <__assert_fail@plt+0x3dbc>
   14b4c:	sub	r2, r2, #1
   14b50:	cmp	r2, #1
   14b54:	bhi	14b40 <__assert_fail@plt+0x3d4c>
   14b58:	b	14bb0 <__assert_fail@plt+0x3dbc>
   14b5c:	mov	r2, r9
   14b60:	mov	r1, r4
   14b64:	ldr	r0, [sp, #4]
   14b68:	bl	1353c <__assert_fail@plt+0x2748>
   14b6c:	strh	r0, [r4, #56]	; 0x38
   14b70:	cmp	sl, #0
   14b74:	beq	14c18 <__assert_fail@plt+0x3e24>
   14b78:	str	r7, [r4, #8]
   14b7c:	mov	r7, r4
   14b80:	add	r8, r8, #1
   14b84:	ldr	r4, [r6, #4]!
   14b88:	cmp	r4, #0
   14b8c:	beq	14c30 <__assert_fail@plt+0x3e3c>
   14b90:	mov	r0, r4
   14b94:	bl	10cc8 <strlen@plt>
   14b98:	mov	r2, r0
   14b9c:	cmp	r0, #2
   14ba0:	movls	r3, #0
   14ba4:	andhi	r3, r5, #1
   14ba8:	cmp	r3, #0
   14bac:	bne	14b18 <__assert_fail@plt+0x3d24>
   14bb0:	mov	r1, r4
   14bb4:	ldr	r0, [sp, #4]
   14bb8:	bl	1379c <__assert_fail@plt+0x29a8>
   14bbc:	subs	r4, r0, #0
   14bc0:	beq	14cfc <__assert_fail@plt+0x3f08>
   14bc4:	str	r9, [r4, #48]	; 0x30
   14bc8:	str	fp, [r4, #4]
   14bcc:	add	r3, r4, #168	; 0xa8
   14bd0:	str	r3, [r4, #24]
   14bd4:	ldr	r3, [sp, #8]
   14bd8:	cmp	r7, #0
   14bdc:	moveq	r3, #0
   14be0:	cmp	r3, #0
   14be4:	beq	14b5c <__assert_fail@plt+0x3d68>
   14be8:	mov	r3, #11
   14bec:	strh	r3, [r4, #56]	; 0x38
   14bf0:	mov	r2, #2
   14bf4:	mov	r3, #0
   14bf8:	strd	r2, [r4, #112]	; 0x70
   14bfc:	cmp	sl, #0
   14c00:	bne	14b78 <__assert_fail@plt+0x3d84>
   14c04:	str	r9, [r4, #8]
   14c08:	ldr	r3, [sp, #12]
   14c0c:	str	r4, [r3, #8]
   14c10:	str	r4, [sp, #12]
   14c14:	b	14b80 <__assert_fail@plt+0x3d8c>
   14c18:	str	r9, [r4, #8]
   14c1c:	cmp	r7, #0
   14c20:	streq	r4, [sp, #12]
   14c24:	moveq	r7, r4
   14c28:	beq	14b80 <__assert_fail@plt+0x3d8c>
   14c2c:	b	14c08 <__assert_fail@plt+0x3e14>
   14c30:	ldr	r5, [sp, #4]
   14c34:	cmp	sl, #0
   14c38:	cmpne	r8, #1
   14c3c:	bhi	14ca8 <__assert_fail@plt+0x3eb4>
   14c40:	mov	r2, #0
   14c44:	movw	r1, #33188	; 0x81a4
   14c48:	movt	r1, #1
   14c4c:	mov	r0, r5
   14c50:	bl	1379c <__assert_fail@plt+0x29a8>
   14c54:	str	r0, [r5]
   14c58:	cmp	r0, #0
   14c5c:	beq	14d00 <__assert_fail@plt+0x3f0c>
   14c60:	str	r7, [r0, #8]
   14c64:	ldr	r3, [r5]
   14c68:	mov	r2, #9
   14c6c:	strh	r2, [r3, #56]	; 0x38
   14c70:	ldr	r3, [r5]
   14c74:	mov	r2, #1
   14c78:	str	r2, [r3, #48]	; 0x30
   14c7c:	mov	r0, r5
   14c80:	bl	1382c <__assert_fail@plt+0x2a38>
   14c84:	cmp	r0, #0
   14c88:	beq	14d00 <__assert_fail@plt+0x3f0c>
   14c8c:	ldr	r3, [r5, #48]	; 0x30
   14c90:	tst	r3, #516	; 0x204
   14c94:	beq	14cd0 <__assert_fail@plt+0x3edc>
   14c98:	mvn	r1, #0
   14c9c:	add	r0, r5, #60	; 0x3c
   14ca0:	bl	174f4 <__assert_fail@plt+0x6700>
   14ca4:	b	14d24 <__assert_fail@plt+0x3f30>
   14ca8:	mov	r2, r8
   14cac:	mov	r1, r7
   14cb0:	mov	r0, r5
   14cb4:	bl	136ac <__assert_fail@plt+0x28b8>
   14cb8:	mov	r7, r0
   14cbc:	b	14c40 <__assert_fail@plt+0x3e4c>
   14cc0:	mov	r7, r4
   14cc4:	b	14c40 <__assert_fail@plt+0x3e4c>
   14cc8:	mov	r7, fp
   14ccc:	b	14c40 <__assert_fail@plt+0x3e4c>
   14cd0:	movw	r1, #32888	; 0x8078
   14cd4:	movt	r1, #1
   14cd8:	mov	r0, r5
   14cdc:	bl	138b4 <__assert_fail@plt+0x2ac0>
   14ce0:	str	r0, [r5, #28]
   14ce4:	cmp	r0, #0
   14ce8:	bge	14c98 <__assert_fail@plt+0x3ea4>
   14cec:	ldr	r3, [r5, #48]	; 0x30
   14cf0:	orr	r3, r3, #4
   14cf4:	str	r3, [r5, #48]	; 0x30
   14cf8:	b	14c98 <__assert_fail@plt+0x3ea4>
   14cfc:	ldr	r5, [sp, #4]
   14d00:	mov	r0, r7
   14d04:	bl	13900 <__assert_fail@plt+0x2b0c>
   14d08:	mov	r0, fp
   14d0c:	bl	13360 <__assert_fail@plt+0x256c>
   14d10:	ldr	r0, [r5, #24]
   14d14:	bl	13360 <__assert_fail@plt+0x256c>
   14d18:	mov	r0, r5
   14d1c:	bl	13360 <__assert_fail@plt+0x256c>
   14d20:	mov	r5, #0
   14d24:	mov	r0, r5
   14d28:	add	sp, sp, #20
   14d2c:	ldrd	r4, [sp]
   14d30:	ldrd	r6, [sp, #8]
   14d34:	ldrd	r8, [sp, #16]
   14d38:	ldrd	sl, [sp, #24]
   14d3c:	add	sp, sp, #32
   14d40:	pop	{pc}		; (ldr pc, [sp], #4)
   14d44:	cmp	sl, #0
   14d48:	beq	14cc8 <__assert_fail@plt+0x3ed4>
   14d4c:	ldr	r3, [r5, #48]	; 0x30
   14d50:	ubfx	r3, r3, #10, #1
   14d54:	str	r3, [sp, #8]
   14d58:	ldr	r4, [r6]
   14d5c:	cmp	r4, #0
   14d60:	beq	14cc0 <__assert_fail@plt+0x3ecc>
   14d64:	mov	r3, #0
   14d68:	mov	r7, r3
   14d6c:	str	r3, [sp, #12]
   14d70:	mov	r8, r3
   14d74:	eor	r9, r9, #2048	; 0x800
   14d78:	ubfx	r3, r9, #11, #1
   14d7c:	mov	r9, r7
   14d80:	str	r5, [sp, #4]
   14d84:	mov	r5, r3
   14d88:	b	14b90 <__assert_fail@plt+0x3d9c>
   14d8c:	strd	r4, [sp, #-16]!
   14d90:	str	r6, [sp, #8]
   14d94:	str	lr, [sp, #12]
   14d98:	mov	r5, r0
   14d9c:	ldr	r0, [r0]
   14da0:	cmp	r0, #0
   14da4:	beq	14ddc <__assert_fail@plt+0x3fe8>
   14da8:	ldr	r3, [r0, #48]	; 0x30
   14dac:	cmp	r3, #0
   14db0:	blt	14e2c <__assert_fail@plt+0x4038>
   14db4:	ldr	r4, [r0, #8]
   14db8:	cmp	r4, #0
   14dbc:	ldreq	r4, [r0, #4]
   14dc0:	bl	13360 <__assert_fail@plt+0x256c>
   14dc4:	mov	r0, r4
   14dc8:	ldr	r3, [r4, #48]	; 0x30
   14dcc:	cmp	r3, #0
   14dd0:	bge	14db4 <__assert_fail@plt+0x3fc0>
   14dd4:	mov	r0, r4
   14dd8:	bl	13360 <__assert_fail@plt+0x256c>
   14ddc:	ldr	r0, [r5, #4]
   14de0:	cmp	r0, #0
   14de4:	beq	14dec <__assert_fail@plt+0x3ff8>
   14de8:	bl	13900 <__assert_fail@plt+0x2b0c>
   14dec:	ldr	r0, [r5, #8]
   14df0:	bl	13360 <__assert_fail@plt+0x256c>
   14df4:	ldr	r0, [r5, #24]
   14df8:	bl	13360 <__assert_fail@plt+0x256c>
   14dfc:	ldr	r3, [r5, #48]	; 0x30
   14e00:	tst	r3, #512	; 0x200
   14e04:	beq	14e34 <__assert_fail@plt+0x4040>
   14e08:	ldr	r0, [r5, #32]
   14e0c:	cmp	r0, #0
   14e10:	blt	14e3c <__assert_fail@plt+0x4048>
   14e14:	bl	10dc4 <close@plt>
   14e18:	cmp	r0, #0
   14e1c:	beq	14e3c <__assert_fail@plt+0x4048>
   14e20:	bl	10cf8 <__errno_location@plt>
   14e24:	ldr	r4, [r0]
   14e28:	b	14ebc <__assert_fail@plt+0x40c8>
   14e2c:	mov	r4, r0
   14e30:	b	14dd4 <__assert_fail@plt+0x3fe0>
   14e34:	tst	r3, #4
   14e38:	beq	14e84 <__assert_fail@plt+0x4090>
   14e3c:	add	r0, r5, #60	; 0x3c
   14e40:	bl	13990 <__assert_fail@plt+0x2b9c>
   14e44:	ldr	r0, [r5, #52]	; 0x34
   14e48:	cmp	r0, #0
   14e4c:	movne	r4, #0
   14e50:	beq	14ef0 <__assert_fail@plt+0x40fc>
   14e54:	bl	16f98 <__assert_fail@plt+0x61a4>
   14e58:	mov	r0, r5
   14e5c:	bl	13950 <__assert_fail@plt+0x2b5c>
   14e60:	mov	r0, r5
   14e64:	bl	13360 <__assert_fail@plt+0x256c>
   14e68:	cmp	r4, #0
   14e6c:	bne	14ee0 <__assert_fail@plt+0x40ec>
   14e70:	mov	r0, r4
   14e74:	ldrd	r4, [sp]
   14e78:	ldr	r6, [sp, #8]
   14e7c:	add	sp, sp, #12
   14e80:	pop	{pc}		; (ldr pc, [sp], #4)
   14e84:	ldr	r0, [r5, #28]
   14e88:	bl	10d7c <fchdir@plt>
   14e8c:	subs	r4, r0, #0
   14e90:	beq	14e9c <__assert_fail@plt+0x40a8>
   14e94:	bl	10cf8 <__errno_location@plt>
   14e98:	ldr	r4, [r0]
   14e9c:	ldr	r0, [r5, #28]
   14ea0:	bl	10dc4 <close@plt>
   14ea4:	adds	r0, r0, #0
   14ea8:	movne	r0, #1
   14eac:	cmp	r4, #0
   14eb0:	movne	r0, #0
   14eb4:	cmp	r0, #0
   14eb8:	bne	14ed4 <__assert_fail@plt+0x40e0>
   14ebc:	add	r0, r5, #60	; 0x3c
   14ec0:	bl	13990 <__assert_fail@plt+0x2b9c>
   14ec4:	ldr	r0, [r5, #52]	; 0x34
   14ec8:	cmp	r0, #0
   14ecc:	bne	14e54 <__assert_fail@plt+0x4060>
   14ed0:	b	14e58 <__assert_fail@plt+0x4064>
   14ed4:	bl	10cf8 <__errno_location@plt>
   14ed8:	ldr	r4, [r0]
   14edc:	b	14ebc <__assert_fail@plt+0x40c8>
   14ee0:	bl	10cf8 <__errno_location@plt>
   14ee4:	str	r4, [r0]
   14ee8:	mvn	r4, #0
   14eec:	b	14e70 <__assert_fail@plt+0x407c>
   14ef0:	mov	r0, r5
   14ef4:	bl	13950 <__assert_fail@plt+0x2b5c>
   14ef8:	mov	r0, r5
   14efc:	bl	13360 <__assert_fail@plt+0x256c>
   14f00:	mov	r4, #0
   14f04:	b	14e70 <__assert_fail@plt+0x407c>
   14f08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f0c:	strd	r6, [sp, #8]
   14f10:	str	r8, [sp, #16]
   14f14:	str	lr, [sp, #20]
   14f18:	ldr	r5, [r0]
   14f1c:	cmp	r5, #0
   14f20:	beq	15580 <__assert_fail@plt+0x478c>
   14f24:	ldr	r3, [r0, #48]	; 0x30
   14f28:	tst	r3, #8192	; 0x2000
   14f2c:	bne	1557c <__assert_fail@plt+0x4788>
   14f30:	mov	r8, r0
   14f34:	ldrh	r3, [r5, #60]	; 0x3c
   14f38:	mov	r2, #3
   14f3c:	strh	r2, [r5, #60]	; 0x3c
   14f40:	cmp	r3, #1
   14f44:	beq	14fc0 <__assert_fail@plt+0x41cc>
   14f48:	cmp	r3, #2
   14f4c:	beq	14fd4 <__assert_fail@plt+0x41e0>
   14f50:	ldrh	r2, [r5, #56]	; 0x38
   14f54:	cmp	r2, #1
   14f58:	bne	15254 <__assert_fail@plt+0x4460>
   14f5c:	cmp	r3, #4
   14f60:	beq	14f84 <__assert_fail@plt+0x4190>
   14f64:	ldr	r1, [r8, #48]	; 0x30
   14f68:	tst	r1, #64	; 0x40
   14f6c:	beq	15068 <__assert_fail@plt+0x4274>
   14f70:	ldrd	r6, [r5, #64]	; 0x40
   14f74:	ldrd	r2, [r8, #16]
   14f78:	cmp	r7, r3
   14f7c:	cmpeq	r6, r2
   14f80:	beq	15068 <__assert_fail@plt+0x4274>
   14f84:	ldrh	r3, [r5, #58]	; 0x3a
   14f88:	tst	r3, #2
   14f8c:	bne	1505c <__assert_fail@plt+0x4268>
   14f90:	ldr	r0, [r8, #4]
   14f94:	cmp	r0, #0
   14f98:	beq	14fa8 <__assert_fail@plt+0x41b4>
   14f9c:	bl	13900 <__assert_fail@plt+0x2b0c>
   14fa0:	mov	r3, #0
   14fa4:	str	r3, [r8, #4]
   14fa8:	mov	r3, #6
   14fac:	strh	r3, [r5, #56]	; 0x38
   14fb0:	mov	r1, r5
   14fb4:	mov	r0, r8
   14fb8:	bl	13ecc <__assert_fail@plt+0x30d8>
   14fbc:	b	15580 <__assert_fail@plt+0x478c>
   14fc0:	mov	r2, #0
   14fc4:	mov	r1, r5
   14fc8:	bl	1353c <__assert_fail@plt+0x2748>
   14fcc:	strh	r0, [r5, #56]	; 0x38
   14fd0:	b	15580 <__assert_fail@plt+0x478c>
   14fd4:	ldrh	r2, [r5, #56]	; 0x38
   14fd8:	sub	r3, r2, #12
   14fdc:	uxth	r3, r3
   14fe0:	cmp	r3, #1
   14fe4:	bls	14ff4 <__assert_fail@plt+0x4200>
   14fe8:	cmp	r2, #1
   14fec:	bne	15254 <__assert_fail@plt+0x4460>
   14ff0:	b	14f64 <__assert_fail@plt+0x4170>
   14ff4:	mov	r2, #1
   14ff8:	mov	r1, r5
   14ffc:	bl	1353c <__assert_fail@plt+0x2748>
   15000:	strh	r0, [r5, #56]	; 0x38
   15004:	cmp	r0, #1
   15008:	bne	150e4 <__assert_fail@plt+0x42f0>
   1500c:	ldr	r3, [r8, #48]	; 0x30
   15010:	tst	r3, #4
   15014:	bne	150e4 <__assert_fail@plt+0x42f0>
   15018:	movw	r1, #32888	; 0x8078
   1501c:	movt	r1, #1
   15020:	mov	r0, r8
   15024:	bl	138b4 <__assert_fail@plt+0x2ac0>
   15028:	str	r0, [r5, #36]	; 0x24
   1502c:	cmp	r0, #0
   15030:	blt	15044 <__assert_fail@plt+0x4250>
   15034:	ldrh	r3, [r5, #58]	; 0x3a
   15038:	orr	r3, r3, #2
   1503c:	strh	r3, [r5, #58]	; 0x3a
   15040:	b	150e4 <__assert_fail@plt+0x42f0>
   15044:	bl	10cf8 <__errno_location@plt>
   15048:	ldr	r3, [r0]
   1504c:	str	r3, [r5, #32]
   15050:	mov	r3, #7
   15054:	strh	r3, [r5, #56]	; 0x38
   15058:	b	150e4 <__assert_fail@plt+0x42f0>
   1505c:	ldr	r0, [r5, #36]	; 0x24
   15060:	bl	10dc4 <close@plt>
   15064:	b	14f90 <__assert_fail@plt+0x419c>
   15068:	ldr	r0, [r8, #4]
   1506c:	cmp	r0, #0
   15070:	beq	1514c <__assert_fail@plt+0x4358>
   15074:	tst	r1, #4096	; 0x1000
   15078:	bne	15138 <__assert_fail@plt+0x4344>
   1507c:	ldr	r3, [r5, #24]
   15080:	mvn	r2, #0
   15084:	mov	r1, r5
   15088:	mov	r0, r8
   1508c:	bl	13cc0 <__assert_fail@plt+0x2ecc>
   15090:	cmp	r0, #0
   15094:	bne	151a0 <__assert_fail@plt+0x43ac>
   15098:	ldr	r5, [r8, #4]
   1509c:	mov	r3, #0
   150a0:	str	r3, [r8, #4]
   150a4:	ldr	r2, [r8, #24]
   150a8:	ldr	r0, [r5, #4]
   150ac:	ldr	r1, [r0, #40]	; 0x28
   150b0:	sub	r3, r1, #1
   150b4:	ldr	r0, [r0, #28]
   150b8:	ldrb	r0, [r0, r3]
   150bc:	cmp	r0, #47	; 0x2f
   150c0:	movne	r3, r1
   150c4:	add	r0, r2, r3
   150c8:	mov	r1, #47	; 0x2f
   150cc:	strb	r1, [r2, r3]
   150d0:	ldr	r2, [r5, #52]	; 0x34
   150d4:	add	r2, r2, #1
   150d8:	add	r1, r5, #168	; 0xa8
   150dc:	add	r0, r0, #1
   150e0:	bl	10bd8 <memmove@plt>
   150e4:	str	r5, [r8]
   150e8:	ldrh	r3, [r5, #56]	; 0x38
   150ec:	cmp	r3, #11
   150f0:	beq	15474 <__assert_fail@plt+0x4680>
   150f4:	ldrh	r3, [r5, #56]	; 0x38
   150f8:	cmp	r3, #1
   150fc:	bne	15580 <__assert_fail@plt+0x478c>
   15100:	ldr	r3, [r5, #48]	; 0x30
   15104:	cmp	r3, #0
   15108:	ldrdeq	r2, [r5, #64]	; 0x40
   1510c:	strdeq	r2, [r8, #16]
   15110:	mov	r1, r5
   15114:	mov	r0, r8
   15118:	bl	13afc <__assert_fail@plt+0x2d08>
   1511c:	cmp	r0, #0
   15120:	bne	15580 <__assert_fail@plt+0x478c>
   15124:	bl	10cf8 <__errno_location@plt>
   15128:	mov	r3, #12
   1512c:	str	r3, [r0]
   15130:	mov	r5, #0
   15134:	b	15580 <__assert_fail@plt+0x478c>
   15138:	bic	r1, r1, #4096	; 0x1000
   1513c:	str	r1, [r8, #48]	; 0x30
   15140:	bl	13900 <__assert_fail@plt+0x2b0c>
   15144:	mov	r3, #0
   15148:	str	r3, [r8, #4]
   1514c:	mov	r1, #3
   15150:	mov	r0, r8
   15154:	bl	13f90 <__assert_fail@plt+0x319c>
   15158:	str	r0, [r8, #4]
   1515c:	cmp	r0, #0
   15160:	bne	15098 <__assert_fail@plt+0x42a4>
   15164:	ldr	r3, [r8, #48]	; 0x30
   15168:	tst	r3, #8192	; 0x2000
   1516c:	movne	r5, r0
   15170:	bne	15580 <__assert_fail@plt+0x478c>
   15174:	ldr	r3, [r5, #32]
   15178:	cmp	r3, #0
   1517c:	beq	15190 <__assert_fail@plt+0x439c>
   15180:	ldrh	r3, [r5, #56]	; 0x38
   15184:	cmp	r3, #4
   15188:	movne	r3, #7
   1518c:	strhne	r3, [r5, #56]	; 0x38
   15190:	mov	r1, r5
   15194:	mov	r0, r8
   15198:	bl	13ecc <__assert_fail@plt+0x30d8>
   1519c:	b	15580 <__assert_fail@plt+0x478c>
   151a0:	bl	10cf8 <__errno_location@plt>
   151a4:	ldr	r3, [r0]
   151a8:	str	r3, [r5, #32]
   151ac:	ldrh	r3, [r5, #58]	; 0x3a
   151b0:	orr	r3, r3, #1
   151b4:	strh	r3, [r5, #58]	; 0x3a
   151b8:	ldr	r3, [r8, #4]
   151bc:	cmp	r3, #0
   151c0:	beq	15098 <__assert_fail@plt+0x42a4>
   151c4:	ldr	r2, [r3, #4]
   151c8:	ldr	r2, [r2, #24]
   151cc:	str	r2, [r3, #24]
   151d0:	ldr	r3, [r3, #8]
   151d4:	cmp	r3, #0
   151d8:	bne	151c4 <__assert_fail@plt+0x43d0>
   151dc:	b	15098 <__assert_fail@plt+0x42a4>
   151e0:	str	r3, [r8]
   151e4:	ldr	r2, [r8, #24]
   151e8:	ldr	r3, [r3, #40]	; 0x28
   151ec:	mov	r1, #0
   151f0:	strb	r1, [r2, r3]
   151f4:	mov	r1, #3
   151f8:	mov	r0, r8
   151fc:	bl	13f90 <__assert_fail@plt+0x319c>
   15200:	subs	r6, r0, #0
   15204:	bne	1521c <__assert_fail@plt+0x4428>
   15208:	ldr	r3, [r8, #48]	; 0x30
   1520c:	tst	r3, #8192	; 0x2000
   15210:	beq	15270 <__assert_fail@plt+0x447c>
   15214:	mov	r5, r6
   15218:	b	15580 <__assert_fail@plt+0x478c>
   1521c:	mov	r0, r5
   15220:	bl	13360 <__assert_fail@plt+0x256c>
   15224:	mov	r5, r6
   15228:	b	150a4 <__assert_fail@plt+0x42b0>
   1522c:	str	r4, [r8]
   15230:	mov	r0, r5
   15234:	bl	13360 <__assert_fail@plt+0x256c>
   15238:	ldr	r3, [r4, #48]	; 0x30
   1523c:	cmp	r3, #0
   15240:	beq	15338 <__assert_fail@plt+0x4544>
   15244:	ldrh	r3, [r4, #60]	; 0x3c
   15248:	mov	r5, r4
   1524c:	cmp	r3, #4
   15250:	bne	153ec <__assert_fail@plt+0x45f8>
   15254:	ldr	r4, [r5, #8]
   15258:	cmp	r4, #0
   1525c:	bne	1522c <__assert_fail@plt+0x4438>
   15260:	ldr	r3, [r5, #4]
   15264:	ldr	r2, [r3, #12]
   15268:	cmp	r2, #0
   1526c:	bne	151e0 <__assert_fail@plt+0x43ec>
   15270:	ldr	r6, [r5, #4]
   15274:	str	r6, [r8]
   15278:	mov	r0, r5
   1527c:	bl	13360 <__assert_fail@plt+0x256c>
   15280:	ldr	r3, [r6, #48]	; 0x30
   15284:	cmn	r3, #1
   15288:	beq	154ac <__assert_fail@plt+0x46b8>
   1528c:	ldrh	r3, [r6, #56]	; 0x38
   15290:	cmp	r3, #11
   15294:	beq	154cc <__assert_fail@plt+0x46d8>
   15298:	ldr	r2, [r8, #24]
   1529c:	ldr	r3, [r6, #40]	; 0x28
   152a0:	mov	r1, #0
   152a4:	strb	r1, [r2, r3]
   152a8:	ldr	r3, [r6, #48]	; 0x30
   152ac:	cmp	r3, r1
   152b0:	beq	154d0 <__assert_fail@plt+0x46dc>
   152b4:	ldrh	r3, [r6, #58]	; 0x3a
   152b8:	tst	r3, #2
   152bc:	beq	15538 <__assert_fail@plt+0x4744>
   152c0:	ldr	r3, [r8, #48]	; 0x30
   152c4:	tst	r3, #4
   152c8:	bne	152e4 <__assert_fail@plt+0x44f0>
   152cc:	tst	r3, #512	; 0x200
   152d0:	beq	1550c <__assert_fail@plt+0x4718>
   152d4:	mov	r2, #1
   152d8:	ldr	r1, [r6, #36]	; 0x24
   152dc:	mov	r0, r8
   152e0:	bl	13bc4 <__assert_fail@plt+0x2dd0>
   152e4:	ldr	r0, [r6, #36]	; 0x24
   152e8:	bl	10dc4 <close@plt>
   152ec:	ldrh	r3, [r6, #56]	; 0x38
   152f0:	cmp	r3, #2
   152f4:	beq	15320 <__assert_fail@plt+0x452c>
   152f8:	ldr	r3, [r6, #32]
   152fc:	cmp	r3, #0
   15300:	movne	r3, #7
   15304:	strhne	r3, [r6, #56]	; 0x38
   15308:	bne	15320 <__assert_fail@plt+0x452c>
   1530c:	mov	r3, #6
   15310:	strh	r3, [r6, #56]	; 0x38
   15314:	mov	r1, r6
   15318:	mov	r0, r8
   1531c:	bl	13ecc <__assert_fail@plt+0x30d8>
   15320:	ldr	r5, [r8, #48]	; 0x30
   15324:	and	r5, r5, #8192	; 0x2000
   15328:	cmp	r5, #0
   1532c:	moveq	r5, r6
   15330:	movne	r5, r4
   15334:	b	15580 <__assert_fail@plt+0x478c>
   15338:	mov	r0, r8
   1533c:	bl	13c5c <__assert_fail@plt+0x2e68>
   15340:	cmp	r0, #0
   15344:	bne	153c8 <__assert_fail@plt+0x45d4>
   15348:	mov	r0, r8
   1534c:	bl	13950 <__assert_fail@plt+0x2b5c>
   15350:	ldr	r2, [r4, #52]	; 0x34
   15354:	str	r2, [r4, #40]	; 0x28
   15358:	add	r5, r4, #168	; 0xa8
   1535c:	add	r2, r2, #1
   15360:	mov	r1, r5
   15364:	ldr	r0, [r8, #24]
   15368:	bl	10bd8 <memmove@plt>
   1536c:	mov	r1, #47	; 0x2f
   15370:	mov	r0, r5
   15374:	bl	10d28 <strrchr@plt>
   15378:	cmp	r0, #0
   1537c:	beq	153ac <__assert_fail@plt+0x45b8>
   15380:	cmp	r5, r0
   15384:	beq	153dc <__assert_fail@plt+0x45e8>
   15388:	add	r6, r0, #1
   1538c:	mov	r0, r6
   15390:	bl	10cc8 <strlen@plt>
   15394:	mov	r7, r0
   15398:	add	r2, r0, #1
   1539c:	mov	r1, r6
   153a0:	mov	r0, r5
   153a4:	bl	10bd8 <memmove@plt>
   153a8:	str	r7, [r4, #52]	; 0x34
   153ac:	ldr	r3, [r8, #24]
   153b0:	str	r3, [r4, #28]
   153b4:	str	r3, [r4, #24]
   153b8:	mov	r0, r8
   153bc:	bl	1382c <__assert_fail@plt+0x2a38>
   153c0:	mov	r5, r4
   153c4:	b	150e4 <__assert_fail@plt+0x42f0>
   153c8:	ldr	r3, [r8, #48]	; 0x30
   153cc:	orr	r3, r3, #8192	; 0x2000
   153d0:	str	r3, [r8, #48]	; 0x30
   153d4:	mov	r5, #0
   153d8:	b	15580 <__assert_fail@plt+0x478c>
   153dc:	ldrb	r3, [r0, #1]
   153e0:	cmp	r3, #0
   153e4:	beq	153ac <__assert_fail@plt+0x45b8>
   153e8:	b	15388 <__assert_fail@plt+0x4594>
   153ec:	cmp	r3, #2
   153f0:	movne	r5, r4
   153f4:	bne	150a4 <__assert_fail@plt+0x42b0>
   153f8:	mov	r2, #1
   153fc:	mov	r1, r4
   15400:	mov	r0, r8
   15404:	bl	1353c <__assert_fail@plt+0x2748>
   15408:	strh	r0, [r4, #56]	; 0x38
   1540c:	cmp	r0, #1
   15410:	beq	15424 <__assert_fail@plt+0x4630>
   15414:	mov	r3, #3
   15418:	strh	r3, [r4, #60]	; 0x3c
   1541c:	mov	r5, r4
   15420:	b	150a4 <__assert_fail@plt+0x42b0>
   15424:	ldr	r3, [r8, #48]	; 0x30
   15428:	tst	r3, #4
   1542c:	bne	15414 <__assert_fail@plt+0x4620>
   15430:	movw	r1, #32888	; 0x8078
   15434:	movt	r1, #1
   15438:	mov	r0, r8
   1543c:	bl	138b4 <__assert_fail@plt+0x2ac0>
   15440:	str	r0, [r4, #36]	; 0x24
   15444:	cmp	r0, #0
   15448:	blt	1545c <__assert_fail@plt+0x4668>
   1544c:	ldrh	r3, [r4, #58]	; 0x3a
   15450:	orr	r3, r3, #2
   15454:	strh	r3, [r4, #58]	; 0x3a
   15458:	b	15414 <__assert_fail@plt+0x4620>
   1545c:	bl	10cf8 <__errno_location@plt>
   15460:	ldr	r3, [r0]
   15464:	str	r3, [r4, #32]
   15468:	mov	r3, #7
   1546c:	strh	r3, [r4, #56]	; 0x38
   15470:	b	15414 <__assert_fail@plt+0x4620>
   15474:	ldrd	r2, [r5, #112]	; 0x70
   15478:	cmp	r3, #0
   1547c:	cmpeq	r2, #2
   15480:	beq	15494 <__assert_fail@plt+0x46a0>
   15484:	cmp	r3, #0
   15488:	cmpeq	r2, #1
   1548c:	beq	15580 <__assert_fail@plt+0x478c>
   15490:	bl	10db8 <abort@plt>
   15494:	mov	r2, #0
   15498:	mov	r1, r5
   1549c:	mov	r0, r8
   154a0:	bl	1353c <__assert_fail@plt+0x2748>
   154a4:	strh	r0, [r5, #56]	; 0x38
   154a8:	b	150f4 <__assert_fail@plt+0x4300>
   154ac:	mov	r0, r6
   154b0:	bl	13360 <__assert_fail@plt+0x256c>
   154b4:	bl	10cf8 <__errno_location@plt>
   154b8:	mov	r3, #0
   154bc:	str	r3, [r0]
   154c0:	str	r3, [r8]
   154c4:	mov	r5, r4
   154c8:	b	15580 <__assert_fail@plt+0x478c>
   154cc:	bl	10db8 <abort@plt>
   154d0:	mov	r0, r8
   154d4:	bl	13c5c <__assert_fail@plt+0x2e68>
   154d8:	cmp	r0, #0
   154dc:	beq	152ec <__assert_fail@plt+0x44f8>
   154e0:	bl	10cf8 <__errno_location@plt>
   154e4:	ldr	r3, [r0]
   154e8:	str	r3, [r6, #32]
   154ec:	ldr	r3, [r8, #48]	; 0x30
   154f0:	orr	r3, r3, #8192	; 0x2000
   154f4:	str	r3, [r8, #48]	; 0x30
   154f8:	ldrh	r3, [r6, #56]	; 0x38
   154fc:	cmp	r3, #2
   15500:	moveq	r5, r4
   15504:	bne	152f8 <__assert_fail@plt+0x4504>
   15508:	b	15580 <__assert_fail@plt+0x478c>
   1550c:	ldr	r0, [r6, #36]	; 0x24
   15510:	bl	10d7c <fchdir@plt>
   15514:	cmp	r0, #0
   15518:	beq	152e4 <__assert_fail@plt+0x44f0>
   1551c:	bl	10cf8 <__errno_location@plt>
   15520:	ldr	r3, [r0]
   15524:	str	r3, [r6, #32]
   15528:	ldr	r3, [r8, #48]	; 0x30
   1552c:	orr	r3, r3, #8192	; 0x2000
   15530:	str	r3, [r8, #48]	; 0x30
   15534:	b	152e4 <__assert_fail@plt+0x44f0>
   15538:	tst	r3, #1
   1553c:	bne	152ec <__assert_fail@plt+0x44f8>
   15540:	movw	r3, #32884	; 0x8074
   15544:	movt	r3, #1
   15548:	mvn	r2, #0
   1554c:	ldr	r1, [r6, #4]
   15550:	mov	r0, r8
   15554:	bl	13cc0 <__assert_fail@plt+0x2ecc>
   15558:	cmp	r0, #0
   1555c:	beq	152ec <__assert_fail@plt+0x44f8>
   15560:	bl	10cf8 <__errno_location@plt>
   15564:	ldr	r3, [r0]
   15568:	str	r3, [r6, #32]
   1556c:	ldr	r3, [r8, #48]	; 0x30
   15570:	orr	r3, r3, #8192	; 0x2000
   15574:	str	r3, [r8, #48]	; 0x30
   15578:	b	154f8 <__assert_fail@plt+0x4704>
   1557c:	mov	r5, #0
   15580:	mov	r0, r5
   15584:	ldrd	r4, [sp]
   15588:	ldrd	r6, [sp, #8]
   1558c:	ldr	r8, [sp, #16]
   15590:	add	sp, sp, #20
   15594:	pop	{pc}		; (ldr pc, [sp], #4)
   15598:	cmp	r2, #4
   1559c:	bhi	155ac <__assert_fail@plt+0x47b8>
   155a0:	strh	r2, [r1, #60]	; 0x3c
   155a4:	mov	r0, #0
   155a8:	bx	lr
   155ac:	str	r4, [sp, #-8]!
   155b0:	str	lr, [sp, #4]
   155b4:	bl	10cf8 <__errno_location@plt>
   155b8:	mov	r3, #22
   155bc:	str	r3, [r0]
   155c0:	mov	r0, #1
   155c4:	ldr	r4, [sp]
   155c8:	add	sp, sp, #4
   155cc:	pop	{pc}		; (ldr pc, [sp], #4)
   155d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   155d4:	strd	r6, [sp, #8]
   155d8:	str	r8, [sp, #16]
   155dc:	str	lr, [sp, #20]
   155e0:	bics	r3, r1, #4096	; 0x1000
   155e4:	bne	15694 <__assert_fail@plt+0x48a0>
   155e8:	mov	r4, r0
   155ec:	mov	r5, r1
   155f0:	ldr	r6, [r0]
   155f4:	bl	10cf8 <__errno_location@plt>
   155f8:	mov	r7, r0
   155fc:	mov	r3, #0
   15600:	str	r3, [r0]
   15604:	ldr	r3, [r4, #48]	; 0x30
   15608:	tst	r3, #8192	; 0x2000
   1560c:	movne	r0, #0
   15610:	bne	15680 <__assert_fail@plt+0x488c>
   15614:	ldrh	r3, [r6, #56]	; 0x38
   15618:	cmp	r3, #9
   1561c:	beq	156a8 <__assert_fail@plt+0x48b4>
   15620:	cmp	r3, #1
   15624:	movne	r0, #0
   15628:	bne	15680 <__assert_fail@plt+0x488c>
   1562c:	ldr	r0, [r4, #4]
   15630:	cmp	r0, #0
   15634:	beq	1563c <__assert_fail@plt+0x4848>
   15638:	bl	13900 <__assert_fail@plt+0x2b0c>
   1563c:	cmp	r5, #4096	; 0x1000
   15640:	movne	r5, #1
   15644:	beq	156b0 <__assert_fail@plt+0x48bc>
   15648:	ldr	r3, [r6, #48]	; 0x30
   1564c:	cmp	r3, #0
   15650:	bne	15670 <__assert_fail@plt+0x487c>
   15654:	ldr	r3, [r6, #24]
   15658:	ldrb	r3, [r3]
   1565c:	cmp	r3, #47	; 0x2f
   15660:	beq	15670 <__assert_fail@plt+0x487c>
   15664:	ldr	r3, [r4, #48]	; 0x30
   15668:	tst	r3, #4
   1566c:	beq	156c4 <__assert_fail@plt+0x48d0>
   15670:	mov	r1, r5
   15674:	mov	r0, r4
   15678:	bl	13f90 <__assert_fail@plt+0x319c>
   1567c:	str	r0, [r4, #4]
   15680:	ldrd	r4, [sp]
   15684:	ldrd	r6, [sp, #8]
   15688:	ldr	r8, [sp, #16]
   1568c:	add	sp, sp, #20
   15690:	pop	{pc}		; (ldr pc, [sp], #4)
   15694:	bl	10cf8 <__errno_location@plt>
   15698:	mov	r3, #22
   1569c:	str	r3, [r0]
   156a0:	mov	r0, #0
   156a4:	b	15680 <__assert_fail@plt+0x488c>
   156a8:	ldr	r0, [r6, #8]
   156ac:	b	15680 <__assert_fail@plt+0x488c>
   156b0:	ldr	r3, [r4, #48]	; 0x30
   156b4:	orr	r3, r3, #4096	; 0x1000
   156b8:	str	r3, [r4, #48]	; 0x30
   156bc:	mov	r5, #2
   156c0:	b	15648 <__assert_fail@plt+0x4854>
   156c4:	movw	r1, #32888	; 0x8078
   156c8:	movt	r1, #1
   156cc:	mov	r0, r4
   156d0:	bl	138b4 <__assert_fail@plt+0x2ac0>
   156d4:	subs	r6, r0, #0
   156d8:	movlt	r0, #0
   156dc:	strlt	r0, [r4, #4]
   156e0:	blt	15680 <__assert_fail@plt+0x488c>
   156e4:	mov	r1, r5
   156e8:	mov	r0, r4
   156ec:	bl	13f90 <__assert_fail@plt+0x319c>
   156f0:	str	r0, [r4, #4]
   156f4:	ldr	r3, [r4, #48]	; 0x30
   156f8:	tst	r3, #512	; 0x200
   156fc:	beq	15718 <__assert_fail@plt+0x4924>
   15700:	mov	r2, #1
   15704:	mov	r1, r6
   15708:	mov	r0, r4
   1570c:	bl	13bc4 <__assert_fail@plt+0x2dd0>
   15710:	ldr	r0, [r4, #4]
   15714:	b	15680 <__assert_fail@plt+0x488c>
   15718:	mov	r0, r6
   1571c:	bl	10d7c <fchdir@plt>
   15720:	cmp	r0, #0
   15724:	bne	15734 <__assert_fail@plt+0x4940>
   15728:	mov	r0, r6
   1572c:	bl	10dc4 <close@plt>
   15730:	b	15710 <__assert_fail@plt+0x491c>
   15734:	ldr	r4, [r7]
   15738:	mov	r0, r6
   1573c:	bl	10dc4 <close@plt>
   15740:	str	r4, [r7]
   15744:	mov	r0, #0
   15748:	b	15680 <__assert_fail@plt+0x488c>
   1574c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15750:	strd	r6, [sp, #8]
   15754:	strd	r8, [sp, #16]
   15758:	str	lr, [sp, #24]
   1575c:	ldr	r5, [r1, #28]
   15760:	ldr	r6, [r1, #32]
   15764:	ldr	r8, [r1]
   15768:	add	r7, r0, r6, lsl #2
   1576c:	b	1579c <__assert_fail@plt+0x49a8>
   15770:	add	r3, r0, r5, lsl #2
   15774:	add	r4, r9, r5
   15778:	add	r4, r0, r4, lsl #2
   1577c:	mov	r2, r7
   15780:	ldr	ip, [r3]
   15784:	ldr	lr, [r2]
   15788:	str	lr, [r3], #4
   1578c:	str	ip, [r2], #4
   15790:	cmp	r3, r4
   15794:	bne	15780 <__assert_fail@plt+0x498c>
   15798:	add	r5, r5, r9
   1579c:	cmp	r8, r6
   157a0:	movle	r3, #0
   157a4:	movgt	r3, #1
   157a8:	cmp	r5, r6
   157ac:	movge	r3, #0
   157b0:	cmp	r3, #0
   157b4:	beq	157f8 <__assert_fail@plt+0x4a04>
   157b8:	sub	r9, r8, r6
   157bc:	sub	r3, r6, r5
   157c0:	cmp	r9, r3
   157c4:	ble	15770 <__assert_fail@plt+0x497c>
   157c8:	add	r2, r0, r5, lsl #2
   157cc:	sub	r9, r8, r3
   157d0:	add	r3, r0, r9, lsl #2
   157d4:	add	r4, r0, r8, lsl #2
   157d8:	ldr	ip, [r2]
   157dc:	ldr	lr, [r3]
   157e0:	str	lr, [r2], #4
   157e4:	str	ip, [r3], #4
   157e8:	cmp	r3, r4
   157ec:	bne	157d8 <__assert_fail@plt+0x49e4>
   157f0:	mov	r8, r9
   157f4:	b	1579c <__assert_fail@plt+0x49a8>
   157f8:	ldr	r0, [r1]
   157fc:	ldr	r3, [r1, #32]
   15800:	sub	r2, r0, r3
   15804:	ldr	r3, [r1, #28]
   15808:	add	r3, r3, r2
   1580c:	str	r3, [r1, #28]
   15810:	str	r0, [r1, #32]
   15814:	ldrd	r4, [sp]
   15818:	ldrd	r6, [sp, #8]
   1581c:	ldrd	r8, [sp, #16]
   15820:	add	sp, sp, #24
   15824:	pop	{pc}		; (ldr pc, [sp], #4)
   15828:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1582c:	strd	r6, [sp, #8]
   15830:	strd	r8, [sp, #16]
   15834:	strd	sl, [sp, #24]
   15838:	str	lr, [sp, #32]
   1583c:	sub	sp, sp, #52	; 0x34
   15840:	str	r0, [sp, #32]
   15844:	str	r1, [sp, #20]
   15848:	str	r2, [sp, #28]
   1584c:	str	r3, [sp, #16]
   15850:	ldr	fp, [sp, #96]	; 0x60
   15854:	ldr	r9, [fp, #20]
   15858:	ldrb	r3, [r9]
   1585c:	cmp	r3, #0
   15860:	cmpne	r3, #61	; 0x3d
   15864:	beq	1589c <__assert_fail@plt+0x4aa8>
   15868:	mov	r8, r9
   1586c:	ldrb	r3, [r8, #1]!
   15870:	cmp	r3, #0
   15874:	cmpne	r3, #61	; 0x3d
   15878:	bne	1586c <__assert_fail@plt+0x4a78>
   1587c:	sub	r7, r8, r9
   15880:	ldr	r5, [sp, #16]
   15884:	ldr	sl, [r5]
   15888:	cmp	sl, #0
   1588c:	beq	15d60 <__assert_fail@plt+0x4f6c>
   15890:	mov	r4, sl
   15894:	mov	r6, #0
   15898:	b	158b4 <__assert_fail@plt+0x4ac0>
   1589c:	mov	r8, r9
   158a0:	b	1587c <__assert_fail@plt+0x4a88>
   158a4:	add	r6, r6, #1
   158a8:	ldr	r4, [r5, #16]!
   158ac:	cmp	r4, #0
   158b0:	beq	15d64 <__assert_fail@plt+0x4f70>
   158b4:	str	r5, [sp, #12]
   158b8:	mov	r2, r7
   158bc:	mov	r1, r9
   158c0:	mov	r0, r4
   158c4:	bl	10dac <strncmp@plt>
   158c8:	cmp	r0, #0
   158cc:	bne	158a4 <__assert_fail@plt+0x4ab0>
   158d0:	mov	r0, r4
   158d4:	bl	10cc8 <strlen@plt>
   158d8:	cmp	r0, r7
   158dc:	bne	158a4 <__assert_fail@plt+0x4ab0>
   158e0:	cmp	r5, #0
   158e4:	beq	15d6c <__assert_fail@plt+0x4f78>
   158e8:	ldr	r3, [fp]
   158ec:	add	r2, r3, #1
   158f0:	str	r2, [fp]
   158f4:	mov	r1, #0
   158f8:	str	r1, [fp, #20]
   158fc:	ldrb	r1, [r8]
   15900:	cmp	r1, #0
   15904:	beq	15cb4 <__assert_fail@plt+0x4ec0>
   15908:	ldr	r3, [sp, #12]
   1590c:	ldr	r3, [r3, #4]
   15910:	cmp	r3, #0
   15914:	beq	15c60 <__assert_fail@plt+0x4e6c>
   15918:	add	r8, r8, #1
   1591c:	str	r8, [fp, #12]
   15920:	ldr	r3, [sp, #88]	; 0x58
   15924:	cmp	r3, #0
   15928:	strne	r6, [r3]
   1592c:	ldr	r2, [sp, #12]
   15930:	ldr	r3, [r2, #8]
   15934:	cmp	r3, #0
   15938:	beq	15d4c <__assert_fail@plt+0x4f58>
   1593c:	ldr	r2, [r2, #12]
   15940:	str	r2, [r3]
   15944:	mov	r0, #0
   15948:	add	sp, sp, #52	; 0x34
   1594c:	ldrd	r4, [sp]
   15950:	ldrd	r6, [sp, #8]
   15954:	ldrd	r8, [sp, #16]
   15958:	ldrd	sl, [sp, #24]
   1595c:	add	sp, sp, #32
   15960:	pop	{pc}		; (ldr pc, [sp], #4)
   15964:	ldr	r2, [sl, #8]
   15968:	ldr	r3, [r9, #8]
   1596c:	cmp	r2, r3
   15970:	bne	15a30 <__assert_fail@plt+0x4c3c>
   15974:	ldr	r2, [sl, #12]
   15978:	ldr	r3, [r9, #12]
   1597c:	cmp	r2, r3
   15980:	bne	15a30 <__assert_fail@plt+0x4c3c>
   15984:	b	159e8 <__assert_fail@plt+0x4bf4>
   15988:	mov	r0, r6
   1598c:	bl	17800 <__assert_fail@plt+0x6a0c>
   15990:	subs	r3, r0, #0
   15994:	str	r3, [sp, #24]
   15998:	beq	15a60 <__assert_fail@plt+0x4c6c>
   1599c:	mov	r2, r6
   159a0:	mov	r1, #0
   159a4:	ldr	r7, [sp, #24]
   159a8:	mov	r0, r7
   159ac:	bl	10d10 <memset@plt>
   159b0:	ldr	r2, [sp, #36]	; 0x24
   159b4:	mov	r1, #1
   159b8:	strb	r1, [r7, r2]
   159bc:	ldr	r3, [sp, #44]	; 0x2c
   159c0:	str	r3, [sp, #40]	; 0x28
   159c4:	b	15a50 <__assert_fail@plt+0x4c5c>
   159c8:	ldr	r3, [sp, #24]
   159cc:	cmp	r3, #0
   159d0:	moveq	r5, #1
   159d4:	beq	159e8 <__assert_fail@plt+0x4bf4>
   159d8:	mov	r5, #1
   159dc:	b	15a50 <__assert_fail@plt+0x4c5c>
   159e0:	str	r4, [sp, #36]	; 0x24
   159e4:	mov	sl, r9
   159e8:	add	r4, r4, #1
   159ec:	ldr	r0, [r9, #16]!
   159f0:	cmp	r0, #0
   159f4:	beq	15a68 <__assert_fail@plt+0x4c74>
   159f8:	ldr	r2, [sp, #12]
   159fc:	ldr	r1, [fp, #20]
   15a00:	bl	10dac <strncmp@plt>
   15a04:	cmp	r0, #0
   15a08:	bne	159e8 <__assert_fail@plt+0x4bf4>
   15a0c:	cmp	sl, #0
   15a10:	beq	159e0 <__assert_fail@plt+0x4bec>
   15a14:	ldr	r3, [sp, #92]	; 0x5c
   15a18:	cmp	r3, #0
   15a1c:	bne	15a30 <__assert_fail@plt+0x4c3c>
   15a20:	ldr	r2, [sl, #4]
   15a24:	ldr	r3, [r9, #4]
   15a28:	cmp	r2, r3
   15a2c:	beq	15964 <__assert_fail@plt+0x4b70>
   15a30:	cmp	r5, #0
   15a34:	bne	159e8 <__assert_fail@plt+0x4bf4>
   15a38:	ldr	r3, [sp, #100]	; 0x64
   15a3c:	cmp	r3, #0
   15a40:	beq	159c8 <__assert_fail@plt+0x4bd4>
   15a44:	ldr	r3, [sp, #24]
   15a48:	cmp	r3, #0
   15a4c:	beq	15988 <__assert_fail@plt+0x4b94>
   15a50:	ldr	r3, [sp, #24]
   15a54:	mov	r2, #1
   15a58:	strb	r2, [r3, r4]
   15a5c:	b	159e8 <__assert_fail@plt+0x4bf4>
   15a60:	mov	r5, #1
   15a64:	b	159e8 <__assert_fail@plt+0x4bf4>
   15a68:	str	sl, [sp, #12]
   15a6c:	ldr	r3, [sp, #24]
   15a70:	orrs	r3, r3, r5
   15a74:	bne	15aec <__assert_fail@plt+0x4cf8>
   15a78:	ldr	r3, [sp, #12]
   15a7c:	cmp	r3, #0
   15a80:	bne	15c58 <__assert_fail@plt+0x4e64>
   15a84:	ldr	r3, [sp, #92]	; 0x5c
   15a88:	cmp	r3, #0
   15a8c:	beq	15ac0 <__assert_fail@plt+0x4ccc>
   15a90:	ldr	r3, [fp]
   15a94:	ldr	r2, [sp, #20]
   15a98:	ldr	r3, [r2, r3, lsl #2]
   15a9c:	ldrb	r3, [r3, #1]
   15aa0:	cmp	r3, #45	; 0x2d
   15aa4:	beq	15ac0 <__assert_fail@plt+0x4ccc>
   15aa8:	ldr	r3, [fp, #20]
   15aac:	ldrb	r1, [r3]
   15ab0:	ldr	r0, [sp, #28]
   15ab4:	bl	10cd4 <strchr@plt>
   15ab8:	cmp	r0, #0
   15abc:	bne	15d58 <__assert_fail@plt+0x4f64>
   15ac0:	ldr	r3, [sp, #100]	; 0x64
   15ac4:	cmp	r3, #0
   15ac8:	bne	15c28 <__assert_fail@plt+0x4e34>
   15acc:	mov	r2, #0
   15ad0:	str	r2, [fp, #20]
   15ad4:	ldr	r3, [fp]
   15ad8:	add	r3, r3, #1
   15adc:	str	r3, [fp]
   15ae0:	str	r2, [fp, #8]
   15ae4:	mov	r0, #63	; 0x3f
   15ae8:	b	15948 <__assert_fail@plt+0x4b54>
   15aec:	ldr	r3, [sp, #100]	; 0x64
   15af0:	cmp	r3, #0
   15af4:	beq	15b2c <__assert_fail@plt+0x4d38>
   15af8:	cmp	r5, #0
   15afc:	beq	15b68 <__assert_fail@plt+0x4d74>
   15b00:	movw	r0, #37136	; 0x9110
   15b04:	movt	r0, #2
   15b08:	ldr	r3, [fp, #20]
   15b0c:	str	r3, [sp]
   15b10:	ldr	r3, [sp, #104]	; 0x68
   15b14:	ldr	r2, [sp, #20]
   15b18:	ldr	r2, [r2]
   15b1c:	movw	r1, #32892	; 0x807c
   15b20:	movt	r1, #1
   15b24:	ldr	r0, [r0]
   15b28:	bl	10cec <fprintf@plt>
   15b2c:	ldr	r3, [sp, #40]	; 0x28
   15b30:	cmp	r3, #0
   15b34:	bne	15c1c <__assert_fail@plt+0x4e28>
   15b38:	ldr	r4, [fp, #20]
   15b3c:	mov	r0, r4
   15b40:	bl	10cc8 <strlen@plt>
   15b44:	add	r0, r4, r0
   15b48:	str	r0, [fp, #20]
   15b4c:	ldr	r3, [fp]
   15b50:	add	r3, r3, #1
   15b54:	str	r3, [fp]
   15b58:	mov	r3, #0
   15b5c:	str	r3, [fp, #8]
   15b60:	mov	r0, #63	; 0x3f
   15b64:	b	15948 <__assert_fail@plt+0x4b54>
   15b68:	movw	r4, #37136	; 0x9110
   15b6c:	movt	r4, #2
   15b70:	ldr	r0, [r4]
   15b74:	bl	10d70 <flockfile@plt>
   15b78:	ldr	r3, [fp, #20]
   15b7c:	str	r3, [sp]
   15b80:	ldr	r3, [sp, #104]	; 0x68
   15b84:	ldr	r2, [sp, #20]
   15b88:	ldr	r2, [r2]
   15b8c:	movw	r1, #32924	; 0x809c
   15b90:	movt	r1, #1
   15b94:	ldr	r0, [r4]
   15b98:	bl	10cec <fprintf@plt>
   15b9c:	cmp	r6, #0
   15ba0:	ble	15bfc <__assert_fail@plt+0x4e08>
   15ba4:	ldr	r2, [sp, #24]
   15ba8:	sub	r4, r2, #1
   15bac:	sub	r3, r6, #1
   15bb0:	add	r8, r2, r3
   15bb4:	movw	r7, #32972	; 0x80cc
   15bb8:	movt	r7, #1
   15bbc:	movw	r6, #37136	; 0x9110
   15bc0:	movt	r6, #2
   15bc4:	ldr	r9, [sp, #16]
   15bc8:	b	15bd8 <__assert_fail@plt+0x4de4>
   15bcc:	add	r5, r5, #1
   15bd0:	cmp	r8, r4
   15bd4:	beq	15bfc <__assert_fail@plt+0x4e08>
   15bd8:	ldrb	r3, [r4, #1]!
   15bdc:	cmp	r3, #0
   15be0:	beq	15bcc <__assert_fail@plt+0x4dd8>
   15be4:	ldr	r3, [r9, r5, lsl #4]
   15be8:	ldr	r2, [sp, #104]	; 0x68
   15bec:	mov	r1, r7
   15bf0:	ldr	r0, [r6]
   15bf4:	bl	10cec <fprintf@plt>
   15bf8:	b	15bcc <__assert_fail@plt+0x4dd8>
   15bfc:	movw	r4, #37136	; 0x9110
   15c00:	movt	r4, #2
   15c04:	ldr	r1, [r4]
   15c08:	mov	r0, #10
   15c0c:	bl	10d34 <fputc@plt>
   15c10:	ldr	r0, [r4]
   15c14:	bl	10c20 <funlockfile@plt>
   15c18:	b	15b2c <__assert_fail@plt+0x4d38>
   15c1c:	ldr	r0, [sp, #24]
   15c20:	bl	13360 <__assert_fail@plt+0x256c>
   15c24:	b	15b38 <__assert_fail@plt+0x4d44>
   15c28:	movw	r0, #37136	; 0x9110
   15c2c:	movt	r0, #2
   15c30:	ldr	r3, [fp, #20]
   15c34:	str	r3, [sp]
   15c38:	ldr	r3, [sp, #104]	; 0x68
   15c3c:	ldr	r2, [sp, #20]
   15c40:	ldr	r2, [r2]
   15c44:	movw	r1, #32980	; 0x80d4
   15c48:	movt	r1, #1
   15c4c:	ldr	r0, [r0]
   15c50:	bl	10cec <fprintf@plt>
   15c54:	b	15acc <__assert_fail@plt+0x4cd8>
   15c58:	ldr	r6, [sp, #36]	; 0x24
   15c5c:	b	158e8 <__assert_fail@plt+0x4af4>
   15c60:	ldr	r3, [sp, #100]	; 0x64
   15c64:	cmp	r3, #0
   15c68:	bne	15c80 <__assert_fail@plt+0x4e8c>
   15c6c:	ldr	r3, [sp, #12]
   15c70:	ldr	r3, [r3, #12]
   15c74:	str	r3, [fp, #8]
   15c78:	mov	r0, #63	; 0x3f
   15c7c:	b	15948 <__assert_fail@plt+0x4b54>
   15c80:	movw	r0, #37136	; 0x9110
   15c84:	movt	r0, #2
   15c88:	ldr	r3, [sp, #12]
   15c8c:	ldr	r3, [r3]
   15c90:	str	r3, [sp]
   15c94:	ldr	r3, [sp, #104]	; 0x68
   15c98:	ldr	r2, [sp, #20]
   15c9c:	ldr	r2, [r2]
   15ca0:	movw	r1, #33012	; 0x80f4
   15ca4:	movt	r1, #1
   15ca8:	ldr	r0, [r0]
   15cac:	bl	10cec <fprintf@plt>
   15cb0:	b	15c6c <__assert_fail@plt+0x4e78>
   15cb4:	ldr	r1, [sp, #12]
   15cb8:	ldr	r1, [r1, #4]
   15cbc:	cmp	r1, #1
   15cc0:	bne	15920 <__assert_fail@plt+0x4b2c>
   15cc4:	ldr	r1, [sp, #32]
   15cc8:	cmp	r2, r1
   15ccc:	bge	15ce8 <__assert_fail@plt+0x4ef4>
   15cd0:	add	r3, r3, #2
   15cd4:	str	r3, [fp]
   15cd8:	ldr	r3, [sp, #20]
   15cdc:	ldr	r3, [r3, r2, lsl #2]
   15ce0:	str	r3, [fp, #12]
   15ce4:	b	15920 <__assert_fail@plt+0x4b2c>
   15ce8:	ldr	r3, [sp, #100]	; 0x64
   15cec:	cmp	r3, #0
   15cf0:	bne	15d18 <__assert_fail@plt+0x4f24>
   15cf4:	ldr	r3, [sp, #12]
   15cf8:	ldr	r3, [r3, #12]
   15cfc:	str	r3, [fp, #8]
   15d00:	ldr	r3, [sp, #28]
   15d04:	ldrb	r3, [r3]
   15d08:	cmp	r3, #58	; 0x3a
   15d0c:	moveq	r0, #58	; 0x3a
   15d10:	movne	r0, #63	; 0x3f
   15d14:	b	15948 <__assert_fail@plt+0x4b54>
   15d18:	movw	r0, #37136	; 0x9110
   15d1c:	movt	r0, #2
   15d20:	ldr	r3, [sp, #12]
   15d24:	ldr	r3, [r3]
   15d28:	str	r3, [sp]
   15d2c:	ldr	r3, [sp, #104]	; 0x68
   15d30:	ldr	r2, [sp, #20]
   15d34:	ldr	r2, [r2]
   15d38:	movw	r1, #33060	; 0x8124
   15d3c:	movt	r1, #1
   15d40:	ldr	r0, [r0]
   15d44:	bl	10cec <fprintf@plt>
   15d48:	b	15cf4 <__assert_fail@plt+0x4f00>
   15d4c:	ldr	r3, [sp, #12]
   15d50:	ldr	r0, [r3, #12]
   15d54:	b	15948 <__assert_fail@plt+0x4b54>
   15d58:	mvn	r0, #0
   15d5c:	b	15948 <__assert_fail@plt+0x4b54>
   15d60:	mov	r6, #0
   15d64:	cmp	sl, #0
   15d68:	beq	15a84 <__assert_fail@plt+0x4c90>
   15d6c:	ldr	r9, [sp, #16]
   15d70:	mvn	r3, #0
   15d74:	str	r3, [sp, #36]	; 0x24
   15d78:	mov	r5, #0
   15d7c:	str	r5, [sp, #40]	; 0x28
   15d80:	str	r5, [sp, #24]
   15d84:	mov	r4, r5
   15d88:	mov	r3, #1
   15d8c:	str	r3, [sp, #44]	; 0x2c
   15d90:	mov	r0, sl
   15d94:	mov	sl, r5
   15d98:	str	r7, [sp, #12]
   15d9c:	b	159f8 <__assert_fail@plt+0x4c04>
   15da0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15da4:	strd	r6, [sp, #8]
   15da8:	strd	r8, [sp, #16]
   15dac:	strd	sl, [sp, #24]
   15db0:	str	lr, [sp, #32]
   15db4:	sub	sp, sp, #36	; 0x24
   15db8:	str	r3, [sp, #24]
   15dbc:	ldr	r4, [sp, #80]	; 0x50
   15dc0:	ldr	r8, [r4, #4]
   15dc4:	subs	r5, r0, #0
   15dc8:	ble	16304 <__assert_fail@plt+0x5510>
   15dcc:	mov	r9, r1
   15dd0:	mov	r6, r2
   15dd4:	mov	r3, #0
   15dd8:	str	r3, [r4, #12]
   15ddc:	ldr	r3, [r4]
   15de0:	cmp	r3, #0
   15de4:	beq	15e08 <__assert_fail@plt+0x5014>
   15de8:	ldr	r3, [r4, #16]
   15dec:	cmp	r3, #0
   15df0:	beq	15e10 <__assert_fail@plt+0x501c>
   15df4:	ldrb	r3, [r2]
   15df8:	sub	r3, r3, #43	; 0x2b
   15dfc:	tst	r3, #253	; 0xfd
   15e00:	addeq	r6, r2, #1
   15e04:	b	15e6c <__assert_fail@plt+0x5078>
   15e08:	mov	r3, #1
   15e0c:	str	r3, [r4]
   15e10:	ldr	r3, [r4]
   15e14:	str	r3, [r4, #32]
   15e18:	str	r3, [r4, #28]
   15e1c:	mov	r3, #0
   15e20:	str	r3, [r4, #20]
   15e24:	ldrb	r3, [r6]
   15e28:	cmp	r3, #45	; 0x2d
   15e2c:	moveq	r3, #2
   15e30:	streq	r3, [r4, #24]
   15e34:	addeq	r6, r6, #1
   15e38:	beq	15e64 <__assert_fail@plt+0x5070>
   15e3c:	cmp	r3, #43	; 0x2b
   15e40:	moveq	r3, #0
   15e44:	streq	r3, [r4, #24]
   15e48:	addeq	r6, r6, #1
   15e4c:	beq	15e64 <__assert_fail@plt+0x5070>
   15e50:	ldr	r3, [sp, #84]	; 0x54
   15e54:	cmp	r3, #0
   15e58:	beq	15f2c <__assert_fail@plt+0x5138>
   15e5c:	mov	r3, #0
   15e60:	str	r3, [r4, #24]
   15e64:	mov	r3, #1
   15e68:	str	r3, [r4, #16]
   15e6c:	ldrb	r3, [r6]
   15e70:	cmp	r3, #58	; 0x3a
   15e74:	moveq	r8, #0
   15e78:	ldr	r3, [r4, #20]
   15e7c:	cmp	r3, #0
   15e80:	beq	15e90 <__assert_fail@plt+0x509c>
   15e84:	ldrb	r3, [r3]
   15e88:	cmp	r3, #0
   15e8c:	bne	16030 <__assert_fail@plt+0x523c>
   15e90:	ldr	r3, [r4]
   15e94:	ldr	r2, [r4, #32]
   15e98:	cmp	r2, r3
   15e9c:	strgt	r3, [r4, #32]
   15ea0:	ldr	r2, [r4, #28]
   15ea4:	cmp	r3, r2
   15ea8:	strlt	r3, [r4, #28]
   15eac:	ldr	r2, [r4, #24]
   15eb0:	cmp	r2, #1
   15eb4:	beq	15f4c <__assert_fail@plt+0x5158>
   15eb8:	ldr	r7, [r4]
   15ebc:	cmp	r7, r5
   15ec0:	beq	15f0c <__assert_fail@plt+0x5118>
   15ec4:	ldr	sl, [r9, r7, lsl #2]
   15ec8:	movw	r1, #33116	; 0x815c
   15ecc:	movt	r1, #1
   15ed0:	mov	r0, sl
   15ed4:	bl	10b9c <strcmp@plt>
   15ed8:	cmp	r0, #0
   15edc:	bne	16314 <__assert_fail@plt+0x5520>
   15ee0:	add	r7, r7, #1
   15ee4:	str	r7, [r4]
   15ee8:	ldr	r2, [r4, #28]
   15eec:	ldr	r3, [r4, #32]
   15ef0:	cmp	r2, r3
   15ef4:	cmpne	r7, r3
   15ef8:	bne	15fc8 <__assert_fail@plt+0x51d4>
   15efc:	cmp	r2, r3
   15f00:	streq	r7, [r4, #28]
   15f04:	str	r5, [r4, #32]
   15f08:	str	r5, [r4]
   15f0c:	ldr	r3, [r4, #28]
   15f10:	ldr	r2, [r4, #32]
   15f14:	cmp	r3, r2
   15f18:	mvneq	r0, #0
   15f1c:	beq	16340 <__assert_fail@plt+0x554c>
   15f20:	str	r3, [r4]
   15f24:	mvn	r0, #0
   15f28:	b	16340 <__assert_fail@plt+0x554c>
   15f2c:	movw	r0, #33100	; 0x814c
   15f30:	movt	r0, #1
   15f34:	bl	10c80 <getenv@plt>
   15f38:	cmp	r0, #0
   15f3c:	bne	15e5c <__assert_fail@plt+0x5068>
   15f40:	mov	r3, #1
   15f44:	str	r3, [r4, #24]
   15f48:	b	15e64 <__assert_fail@plt+0x5070>
   15f4c:	ldr	r2, [r4, #32]
   15f50:	ldr	r1, [r4, #28]
   15f54:	cmp	r1, r2
   15f58:	cmpne	r3, r2
   15f5c:	bne	15f7c <__assert_fail@plt+0x5188>
   15f60:	cmp	r3, r2
   15f64:	strne	r3, [r4, #28]
   15f68:	ldr	r3, [r4]
   15f6c:	cmp	r5, r3
   15f70:	ble	15fc0 <__assert_fail@plt+0x51cc>
   15f74:	add	r1, r9, r3, lsl #2
   15f78:	b	15f9c <__assert_fail@plt+0x51a8>
   15f7c:	mov	r1, r4
   15f80:	mov	r0, r9
   15f84:	bl	1574c <__assert_fail@plt+0x4958>
   15f88:	b	15f68 <__assert_fail@plt+0x5174>
   15f8c:	add	r3, r3, #1
   15f90:	str	r3, [r4]
   15f94:	cmp	r3, r5
   15f98:	beq	15fbc <__assert_fail@plt+0x51c8>
   15f9c:	ldr	r2, [r1], #4
   15fa0:	ldrb	r0, [r2]
   15fa4:	cmp	r0, #45	; 0x2d
   15fa8:	bne	15f8c <__assert_fail@plt+0x5198>
   15fac:	ldrb	r2, [r2, #1]
   15fb0:	cmp	r2, #0
   15fb4:	beq	15f8c <__assert_fail@plt+0x5198>
   15fb8:	b	15fc0 <__assert_fail@plt+0x51cc>
   15fbc:	mov	r3, r5
   15fc0:	str	r3, [r4, #32]
   15fc4:	b	15eb8 <__assert_fail@plt+0x50c4>
   15fc8:	mov	r1, r4
   15fcc:	mov	r0, r9
   15fd0:	bl	1574c <__assert_fail@plt+0x4958>
   15fd4:	b	15f04 <__assert_fail@plt+0x5110>
   15fd8:	ldrb	r1, [sl, #1]
   15fdc:	cmp	r1, #0
   15fe0:	beq	16320 <__assert_fail@plt+0x552c>
   15fe4:	ldr	r3, [sp, #24]
   15fe8:	cmp	r3, #0
   15fec:	beq	16020 <__assert_fail@plt+0x522c>
   15ff0:	cmp	r1, #45	; 0x2d
   15ff4:	beq	1609c <__assert_fail@plt+0x52a8>
   15ff8:	ldr	r3, [sp, #76]	; 0x4c
   15ffc:	cmp	r3, #0
   16000:	beq	16020 <__assert_fail@plt+0x522c>
   16004:	ldrb	r3, [sl, #2]
   16008:	cmp	r3, #0
   1600c:	bne	160e0 <__assert_fail@plt+0x52ec>
   16010:	mov	r0, r6
   16014:	bl	10cd4 <strchr@plt>
   16018:	cmp	r0, #0
   1601c:	beq	160e0 <__assert_fail@plt+0x52ec>
   16020:	ldr	r3, [r4]
   16024:	ldr	r3, [r9, r3, lsl #2]
   16028:	add	r3, r3, #1
   1602c:	str	r3, [r4, #20]
   16030:	ldr	sl, [r4, #20]
   16034:	add	fp, sl, #1
   16038:	str	fp, [r4, #20]
   1603c:	ldrb	r7, [sl]
   16040:	str	r7, [sp, #28]
   16044:	mov	r1, r7
   16048:	mov	r0, r6
   1604c:	bl	10cd4 <strchr@plt>
   16050:	ldrb	r3, [sl, #1]
   16054:	cmp	r3, #0
   16058:	bne	16068 <__assert_fail@plt+0x5274>
   1605c:	ldr	r3, [r4]
   16060:	add	r3, r3, #1
   16064:	str	r3, [r4]
   16068:	sub	r3, r7, #58	; 0x3a
   1606c:	uxtb	r3, r3
   16070:	cmp	r0, #0
   16074:	cmpne	r3, #1
   16078:	bls	1612c <__assert_fail@plt+0x5338>
   1607c:	ldrb	r3, [r0]
   16080:	cmp	r3, #87	; 0x57
   16084:	beq	16168 <__assert_fail@plt+0x5374>
   16088:	ldrb	r3, [r0, #1]
   1608c:	cmp	r3, #58	; 0x3a
   16090:	beq	1623c <__assert_fail@plt+0x5448>
   16094:	mov	r0, r7
   16098:	b	16340 <__assert_fail@plt+0x554c>
   1609c:	add	sl, sl, #2
   160a0:	str	sl, [r4, #20]
   160a4:	movw	r3, #33116	; 0x815c
   160a8:	movt	r3, #1
   160ac:	str	r3, [sp, #16]
   160b0:	str	r8, [sp, #12]
   160b4:	str	r4, [sp, #8]
   160b8:	ldr	r3, [sp, #76]	; 0x4c
   160bc:	str	r3, [sp, #4]
   160c0:	ldr	r3, [sp, #72]	; 0x48
   160c4:	str	r3, [sp]
   160c8:	ldr	r3, [sp, #24]
   160cc:	mov	r2, r6
   160d0:	mov	r1, r9
   160d4:	mov	r0, r5
   160d8:	bl	15828 <__assert_fail@plt+0x4a34>
   160dc:	b	16340 <__assert_fail@plt+0x554c>
   160e0:	add	sl, sl, #1
   160e4:	str	sl, [r4, #20]
   160e8:	movw	r3, #32548	; 0x7f24
   160ec:	movt	r3, #1
   160f0:	str	r3, [sp, #16]
   160f4:	str	r8, [sp, #12]
   160f8:	str	r4, [sp, #8]
   160fc:	ldr	r3, [sp, #76]	; 0x4c
   16100:	str	r3, [sp, #4]
   16104:	ldr	r3, [sp, #72]	; 0x48
   16108:	str	r3, [sp]
   1610c:	ldr	r3, [sp, #24]
   16110:	mov	r2, r6
   16114:	mov	r1, r9
   16118:	mov	r0, r5
   1611c:	bl	15828 <__assert_fail@plt+0x4a34>
   16120:	cmn	r0, #1
   16124:	bne	16340 <__assert_fail@plt+0x554c>
   16128:	b	16020 <__assert_fail@plt+0x522c>
   1612c:	cmp	r8, #0
   16130:	bne	16144 <__assert_fail@plt+0x5350>
   16134:	ldr	r3, [sp, #28]
   16138:	str	r3, [r4, #8]
   1613c:	mov	r0, #63	; 0x3f
   16140:	b	16340 <__assert_fail@plt+0x554c>
   16144:	movw	r0, #37136	; 0x9110
   16148:	movt	r0, #2
   1614c:	ldr	r3, [sp, #28]
   16150:	ldr	r2, [r9]
   16154:	movw	r1, #33120	; 0x8160
   16158:	movt	r1, #1
   1615c:	ldr	r0, [r0]
   16160:	bl	10cec <fprintf@plt>
   16164:	b	16134 <__assert_fail@plt+0x5340>
   16168:	ldrb	r1, [r0, #1]
   1616c:	ldr	r2, [sp, #24]
   16170:	cmp	r1, #59	; 0x3b
   16174:	movne	r3, #0
   16178:	moveq	r3, #1
   1617c:	cmp	r2, #0
   16180:	moveq	r3, #0
   16184:	cmp	r3, #0
   16188:	beq	16088 <__assert_fail@plt+0x5294>
   1618c:	ldrb	r3, [sl, #1]
   16190:	cmp	r3, #0
   16194:	strne	fp, [r4, #12]
   16198:	bne	161b0 <__assert_fail@plt+0x53bc>
   1619c:	ldr	r3, [r4]
   161a0:	cmp	r3, r5
   161a4:	beq	161f8 <__assert_fail@plt+0x5404>
   161a8:	ldr	r3, [r9, r3, lsl #2]
   161ac:	str	r3, [r4, #12]
   161b0:	ldr	r3, [r4, #12]
   161b4:	str	r3, [r4, #20]
   161b8:	mov	r2, #0
   161bc:	str	r2, [r4, #12]
   161c0:	movw	r3, #33192	; 0x81a8
   161c4:	movt	r3, #1
   161c8:	str	r3, [sp, #16]
   161cc:	str	r8, [sp, #12]
   161d0:	str	r4, [sp, #8]
   161d4:	str	r2, [sp, #4]
   161d8:	ldr	r3, [sp, #72]	; 0x48
   161dc:	str	r3, [sp]
   161e0:	ldr	r3, [sp, #24]
   161e4:	mov	r2, r6
   161e8:	mov	r1, r9
   161ec:	mov	r0, r5
   161f0:	bl	15828 <__assert_fail@plt+0x4a34>
   161f4:	b	16340 <__assert_fail@plt+0x554c>
   161f8:	cmp	r8, #0
   161fc:	bne	16218 <__assert_fail@plt+0x5424>
   16200:	ldr	r3, [sp, #28]
   16204:	str	r3, [r4, #8]
   16208:	ldrb	r0, [r6]
   1620c:	cmp	r0, #58	; 0x3a
   16210:	movne	r0, #63	; 0x3f
   16214:	b	16340 <__assert_fail@plt+0x554c>
   16218:	movw	r0, #37136	; 0x9110
   1621c:	movt	r0, #2
   16220:	ldr	r3, [sp, #28]
   16224:	ldr	r2, [r9]
   16228:	movw	r1, #33148	; 0x817c
   1622c:	movt	r1, #1
   16230:	ldr	r0, [r0]
   16234:	bl	10cec <fprintf@plt>
   16238:	b	16200 <__assert_fail@plt+0x540c>
   1623c:	ldrb	r3, [r0, #2]
   16240:	cmp	r3, #58	; 0x3a
   16244:	beq	16270 <__assert_fail@plt+0x547c>
   16248:	ldrb	r3, [sl, #1]
   1624c:	cmp	r3, #0
   16250:	beq	162a0 <__assert_fail@plt+0x54ac>
   16254:	str	fp, [r4, #12]
   16258:	ldr	r3, [r4]
   1625c:	add	r3, r3, #1
   16260:	str	r3, [r4]
   16264:	mov	r3, #0
   16268:	str	r3, [r4, #20]
   1626c:	b	16094 <__assert_fail@plt+0x52a0>
   16270:	ldrb	r3, [sl, #1]
   16274:	cmp	r3, #0
   16278:	moveq	r3, #0
   1627c:	streq	r3, [r4, #12]
   16280:	beq	16294 <__assert_fail@plt+0x54a0>
   16284:	str	fp, [r4, #12]
   16288:	ldr	r3, [r4]
   1628c:	add	r3, r3, #1
   16290:	str	r3, [r4]
   16294:	mov	r3, #0
   16298:	str	r3, [r4, #20]
   1629c:	b	16094 <__assert_fail@plt+0x52a0>
   162a0:	ldr	r3, [r4]
   162a4:	cmp	r3, r5
   162a8:	beq	162c0 <__assert_fail@plt+0x54cc>
   162ac:	add	r2, r3, #1
   162b0:	str	r2, [r4]
   162b4:	ldr	r3, [r9, r3, lsl #2]
   162b8:	str	r3, [r4, #12]
   162bc:	b	16264 <__assert_fail@plt+0x5470>
   162c0:	cmp	r8, #0
   162c4:	bne	162e0 <__assert_fail@plt+0x54ec>
   162c8:	ldr	r3, [sp, #28]
   162cc:	str	r3, [r4, #8]
   162d0:	ldrb	r7, [r6]
   162d4:	cmp	r7, #58	; 0x3a
   162d8:	movne	r7, #63	; 0x3f
   162dc:	b	16264 <__assert_fail@plt+0x5470>
   162e0:	movw	r0, #37136	; 0x9110
   162e4:	movt	r0, #2
   162e8:	ldr	r3, [sp, #28]
   162ec:	ldr	r2, [r9]
   162f0:	movw	r1, #33148	; 0x817c
   162f4:	movt	r1, #1
   162f8:	ldr	r0, [r0]
   162fc:	bl	10cec <fprintf@plt>
   16300:	b	162c8 <__assert_fail@plt+0x54d4>
   16304:	mvn	r0, #0
   16308:	b	16340 <__assert_fail@plt+0x554c>
   1630c:	mvn	r0, #0
   16310:	b	16340 <__assert_fail@plt+0x554c>
   16314:	ldrb	r3, [sl]
   16318:	cmp	r3, #45	; 0x2d
   1631c:	beq	15fd8 <__assert_fail@plt+0x51e4>
   16320:	ldr	r3, [r4, #24]
   16324:	cmp	r3, #0
   16328:	beq	1630c <__assert_fail@plt+0x5518>
   1632c:	add	r3, r7, #1
   16330:	str	r3, [r4]
   16334:	ldr	r3, [r9, r7, lsl #2]
   16338:	str	r3, [r4, #12]
   1633c:	mov	r0, #1
   16340:	add	sp, sp, #36	; 0x24
   16344:	ldrd	r4, [sp]
   16348:	ldrd	r6, [sp, #8]
   1634c:	ldrd	r8, [sp, #16]
   16350:	ldrd	sl, [sp, #24]
   16354:	add	sp, sp, #32
   16358:	pop	{pc}		; (ldr pc, [sp], #4)
   1635c:	strd	r4, [sp, #-12]!
   16360:	str	lr, [sp, #8]
   16364:	sub	sp, sp, #20
   16368:	movw	r4, #37168	; 0x9130
   1636c:	movt	r4, #2
   16370:	movw	r5, #37124	; 0x9104
   16374:	movt	r5, #2
   16378:	ldr	ip, [r5]
   1637c:	str	ip, [r4]
   16380:	ldr	ip, [r5, #4]
   16384:	str	ip, [r4, #4]
   16388:	ldr	ip, [sp, #40]	; 0x28
   1638c:	str	ip, [sp, #12]
   16390:	str	r4, [sp, #8]
   16394:	ldr	ip, [sp, #36]	; 0x24
   16398:	str	ip, [sp, #4]
   1639c:	ldr	ip, [sp, #32]
   163a0:	str	ip, [sp]
   163a4:	bl	15da0 <__assert_fail@plt+0x4fac>
   163a8:	ldr	r3, [r4]
   163ac:	str	r3, [r5]
   163b0:	movw	r3, #37308	; 0x91bc
   163b4:	movt	r3, #2
   163b8:	ldr	r2, [r4, #12]
   163bc:	str	r2, [r3]
   163c0:	ldr	r3, [r4, #8]
   163c4:	str	r3, [r5, #8]
   163c8:	add	sp, sp, #20
   163cc:	ldrd	r4, [sp]
   163d0:	add	sp, sp, #8
   163d4:	pop	{pc}		; (ldr pc, [sp], #4)
   163d8:	push	{lr}		; (str lr, [sp, #-4]!)
   163dc:	sub	sp, sp, #20
   163e0:	mov	r3, #1
   163e4:	str	r3, [sp, #8]
   163e8:	mov	r3, #0
   163ec:	str	r3, [sp, #4]
   163f0:	str	r3, [sp]
   163f4:	bl	1635c <__assert_fail@plt+0x5568>
   163f8:	add	sp, sp, #20
   163fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16400:	ror	r0, r0, #3
   16404:	udiv	r3, r0, r1
   16408:	mls	r0, r3, r1, r0
   1640c:	bx	lr
   16410:	cmp	r1, r0
   16414:	movne	r0, #0
   16418:	moveq	r0, #1
   1641c:	bx	lr
   16420:	ldr	r2, [r0, #20]
   16424:	movw	r3, #33196	; 0x81ac
   16428:	movt	r3, #1
   1642c:	cmp	r2, r3
   16430:	beq	164cc <__assert_fail@plt+0x56d8>
   16434:	vldr	s15, [r2, #8]
   16438:	vldr	s14, [pc, #148]	; 164d4 <__assert_fail@plt+0x56e0>
   1643c:	vcmpe.f32	s15, s14
   16440:	vmrs	APSR_nzcv, fpscr
   16444:	ble	164a4 <__assert_fail@plt+0x56b0>
   16448:	vldr	s14, [pc, #136]	; 164d8 <__assert_fail@plt+0x56e4>
   1644c:	vcmpe.f32	s15, s14
   16450:	vmrs	APSR_nzcv, fpscr
   16454:	bpl	164a4 <__assert_fail@plt+0x56b0>
   16458:	vldr	s13, [r2, #12]
   1645c:	vldr	s14, [pc, #120]	; 164dc <__assert_fail@plt+0x56e8>
   16460:	vcmpe.f32	s13, s14
   16464:	vmrs	APSR_nzcv, fpscr
   16468:	ble	164a4 <__assert_fail@plt+0x56b0>
   1646c:	vldr	s14, [r2]
   16470:	vcmpe.f32	s14, #0.0
   16474:	vmrs	APSR_nzcv, fpscr
   16478:	blt	164a4 <__assert_fail@plt+0x56b0>
   1647c:	vldr	s13, [pc, #80]	; 164d4 <__assert_fail@plt+0x56e0>
   16480:	vadd.f32	s14, s14, s13
   16484:	vldr	s13, [r2, #4]
   16488:	vcmpe.f32	s14, s13
   1648c:	vmrs	APSR_nzcv, fpscr
   16490:	bpl	164a4 <__assert_fail@plt+0x56b0>
   16494:	vldr	s12, [pc, #68]	; 164e0 <__assert_fail@plt+0x56ec>
   16498:	vcmpe.f32	s13, s12
   1649c:	vmrs	APSR_nzcv, fpscr
   164a0:	bls	164b8 <__assert_fail@plt+0x56c4>
   164a4:	movw	r3, #33196	; 0x81ac
   164a8:	movt	r3, #1
   164ac:	str	r3, [r0, #20]
   164b0:	mov	r0, #0
   164b4:	bx	lr
   164b8:	vcmpe.f32	s15, s14
   164bc:	vmrs	APSR_nzcv, fpscr
   164c0:	ble	164a4 <__assert_fail@plt+0x56b0>
   164c4:	mov	r0, #1
   164c8:	bx	lr
   164cc:	mov	r0, #1
   164d0:	bx	lr
   164d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   164d8:	svccc	0x00666666
   164dc:	svccc	0x008ccccd
   164e0:	svccc	0x00800000
   164e4:	ldrb	r3, [r1, #16]
   164e8:	cmp	r3, #0
   164ec:	bne	16518 <__assert_fail@plt+0x5724>
   164f0:	vmov	s15, r0
   164f4:	vcvt.f32.u32	s15, s15
   164f8:	vldr	s13, [r1, #8]
   164fc:	vdiv.f32	s14, s15, s13
   16500:	vldr	s15, [pc, #224]	; 165e8 <__assert_fail@plt+0x57f4>
   16504:	vcmpe.f32	s14, s15
   16508:	vmrs	APSR_nzcv, fpscr
   1650c:	bge	165d8 <__assert_fail@plt+0x57e4>
   16510:	vcvt.u32.f32	s15, s14
   16514:	vmov	r0, s15
   16518:	cmp	r0, #10
   1651c:	movcc	r0, #10
   16520:	orr	r0, r0, #1
   16524:	cmn	r0, #1
   16528:	beq	1653c <__assert_fail@plt+0x5748>
   1652c:	push	{lr}		; (str lr, [sp, #-4]!)
   16530:	movw	lr, #43691	; 0xaaab
   16534:	movt	lr, #43690	; 0xaaaa
   16538:	b	16564 <__assert_fail@plt+0x5770>
   1653c:	mov	r0, #0
   16540:	bx	lr
   16544:	mov	r3, #3
   16548:	udiv	r2, r0, r3
   1654c:	mls	r3, r3, r2, r0
   16550:	cmp	r3, #0
   16554:	bne	165b4 <__assert_fail@plt+0x57c0>
   16558:	add	r0, r0, #2
   1655c:	cmn	r0, #1
   16560:	beq	165e0 <__assert_fail@plt+0x57ec>
   16564:	cmp	r0, #9
   16568:	bls	16544 <__assert_fail@plt+0x5750>
   1656c:	umull	r2, r3, lr, r0
   16570:	lsr	r3, r3, #1
   16574:	add	r3, r3, r3, lsl #1
   16578:	cmp	r0, r3
   1657c:	beq	16558 <__assert_fail@plt+0x5764>
   16580:	mov	r1, #16
   16584:	mov	r2, #9
   16588:	mov	r3, #3
   1658c:	add	r2, r2, r1
   16590:	add	r3, r3, #2
   16594:	cmp	r2, r0
   16598:	bcs	16548 <__assert_fail@plt+0x5754>
   1659c:	add	r1, r1, #8
   165a0:	udiv	ip, r0, r3
   165a4:	mls	ip, r3, ip, r0
   165a8:	cmp	ip, #0
   165ac:	bne	1658c <__assert_fail@plt+0x5798>
   165b0:	b	16558 <__assert_fail@plt+0x5764>
   165b4:	lsl	r2, r0, #2
   165b8:	lsr	r3, r0, #30
   165bc:	adds	r3, r3, #0
   165c0:	movne	r3, #1
   165c4:	cmp	r2, #0
   165c8:	movlt	r3, #1
   165cc:	cmp	r3, #0
   165d0:	movne	r0, #0
   165d4:	pop	{pc}		; (ldr pc, [sp], #4)
   165d8:	mov	r0, #0
   165dc:	bx	lr
   165e0:	mov	r0, #0
   165e4:	b	165d4 <__assert_fail@plt+0x57e0>
   165e8:	svcmi	0x00800000
   165ec:	str	r4, [sp, #-8]!
   165f0:	str	lr, [sp, #4]
   165f4:	mov	r4, r0
   165f8:	mov	r0, r1
   165fc:	ldr	r3, [r4, #24]
   16600:	ldr	r1, [r4, #8]
   16604:	blx	r3
   16608:	ldr	r3, [r4, #8]
   1660c:	cmp	r3, r0
   16610:	bls	16628 <__assert_fail@plt+0x5834>
   16614:	ldr	r3, [r4]
   16618:	add	r0, r3, r0, lsl #3
   1661c:	ldr	r4, [sp]
   16620:	add	sp, sp, #4
   16624:	pop	{pc}		; (ldr pc, [sp], #4)
   16628:	bl	10db8 <abort@plt>
   1662c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16630:	strd	r6, [sp, #8]
   16634:	strd	r8, [sp, #16]
   16638:	strd	sl, [sp, #24]
   1663c:	str	lr, [sp, #32]
   16640:	sub	sp, sp, #4
   16644:	ldr	r7, [r1]
   16648:	ldr	r3, [r1, #4]
   1664c:	cmp	r7, r3
   16650:	bcs	167a8 <__assert_fail@plt+0x59b4>
   16654:	mov	fp, r2
   16658:	mov	r9, r1
   1665c:	mov	r6, r0
   16660:	add	r7, r7, #8
   16664:	mov	sl, #0
   16668:	b	1673c <__assert_fail@plt+0x5948>
   1666c:	str	r5, [r0]
   16670:	ldr	r2, [r6, #12]
   16674:	add	r2, r2, #1
   16678:	str	r2, [r6, #12]
   1667c:	str	sl, [r4]
   16680:	ldr	r2, [r6, #36]	; 0x24
   16684:	str	r2, [r4, #4]
   16688:	str	r4, [r6, #36]	; 0x24
   1668c:	mov	r4, r3
   16690:	cmp	r3, #0
   16694:	beq	166c8 <__assert_fail@plt+0x58d4>
   16698:	ldr	r5, [r4]
   1669c:	mov	r1, r5
   166a0:	mov	r0, r6
   166a4:	bl	165ec <__assert_fail@plt+0x57f8>
   166a8:	ldr	r3, [r4, #4]
   166ac:	ldr	r2, [r0]
   166b0:	cmp	r2, #0
   166b4:	beq	1666c <__assert_fail@plt+0x5878>
   166b8:	ldr	r2, [r0, #4]
   166bc:	str	r2, [r4, #4]
   166c0:	str	r4, [r0, #4]
   166c4:	b	1668c <__assert_fail@plt+0x5898>
   166c8:	ldr	r4, [r8, #-8]
   166cc:	str	sl, [r8, #-4]
   166d0:	cmp	fp, #0
   166d4:	bne	16728 <__assert_fail@plt+0x5934>
   166d8:	mov	r1, r4
   166dc:	mov	r0, r6
   166e0:	bl	165ec <__assert_fail@plt+0x57f8>
   166e4:	mov	r5, r0
   166e8:	ldr	r3, [r0]
   166ec:	cmp	r3, #0
   166f0:	beq	16774 <__assert_fail@plt+0x5980>
   166f4:	ldr	r0, [r6, #36]	; 0x24
   166f8:	cmp	r0, #0
   166fc:	beq	1675c <__assert_fail@plt+0x5968>
   16700:	ldr	r3, [r0, #4]
   16704:	str	r3, [r6, #36]	; 0x24
   16708:	str	r4, [r0]
   1670c:	ldr	r3, [r5, #4]
   16710:	str	r3, [r0, #4]
   16714:	str	r0, [r5, #4]
   16718:	str	sl, [r8, #-8]
   1671c:	ldr	r3, [r9, #12]
   16720:	sub	r3, r3, #1
   16724:	str	r3, [r9, #12]
   16728:	add	r2, r7, #8
   1672c:	ldr	r3, [r9, #4]
   16730:	cmp	r3, r7
   16734:	bls	16788 <__assert_fail@plt+0x5994>
   16738:	mov	r7, r2
   1673c:	mov	r8, r7
   16740:	ldr	r3, [r7, #-8]
   16744:	cmp	r3, #0
   16748:	beq	16728 <__assert_fail@plt+0x5934>
   1674c:	ldr	r4, [r7, #-4]
   16750:	cmp	r4, #0
   16754:	bne	16698 <__assert_fail@plt+0x58a4>
   16758:	b	166c8 <__assert_fail@plt+0x58d4>
   1675c:	mov	r0, #8
   16760:	bl	17800 <__assert_fail@plt+0x6a0c>
   16764:	cmp	r0, #0
   16768:	bne	16708 <__assert_fail@plt+0x5914>
   1676c:	mov	r0, fp
   16770:	b	1678c <__assert_fail@plt+0x5998>
   16774:	str	r4, [r0]
   16778:	ldr	r3, [r6, #12]
   1677c:	add	r3, r3, #1
   16780:	str	r3, [r6, #12]
   16784:	b	16718 <__assert_fail@plt+0x5924>
   16788:	mov	r0, #1
   1678c:	add	sp, sp, #4
   16790:	ldrd	r4, [sp]
   16794:	ldrd	r6, [sp, #8]
   16798:	ldrd	r8, [sp, #16]
   1679c:	ldrd	sl, [sp, #24]
   167a0:	add	sp, sp, #32
   167a4:	pop	{pc}		; (ldr pc, [sp], #4)
   167a8:	mov	r0, #1
   167ac:	b	1678c <__assert_fail@plt+0x5998>
   167b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167b4:	strd	r6, [sp, #8]
   167b8:	str	r8, [sp, #16]
   167bc:	str	lr, [sp, #20]
   167c0:	mov	r6, r0
   167c4:	mov	r5, r1
   167c8:	mov	r7, r2
   167cc:	mov	r8, r3
   167d0:	bl	165ec <__assert_fail@plt+0x57f8>
   167d4:	mov	r4, r0
   167d8:	str	r0, [r7]
   167dc:	ldr	r0, [r0]
   167e0:	cmp	r0, #0
   167e4:	beq	16860 <__assert_fail@plt+0x5a6c>
   167e8:	cmp	r0, r5
   167ec:	beq	16874 <__assert_fail@plt+0x5a80>
   167f0:	ldr	r3, [r6, #28]
   167f4:	mov	r1, r0
   167f8:	mov	r0, r5
   167fc:	blx	r3
   16800:	cmp	r0, #0
   16804:	bne	16874 <__assert_fail@plt+0x5a80>
   16808:	ldr	r0, [r4, #4]
   1680c:	cmp	r0, #0
   16810:	beq	16860 <__assert_fail@plt+0x5a6c>
   16814:	ldr	r1, [r0]
   16818:	cmp	r5, r1
   1681c:	beq	16850 <__assert_fail@plt+0x5a5c>
   16820:	ldr	r3, [r6, #28]
   16824:	mov	r0, r5
   16828:	blx	r3
   1682c:	cmp	r0, #0
   16830:	bne	16850 <__assert_fail@plt+0x5a5c>
   16834:	ldr	r4, [r4, #4]
   16838:	ldr	r0, [r4, #4]
   1683c:	cmp	r0, #0
   16840:	beq	16860 <__assert_fail@plt+0x5a6c>
   16844:	ldr	r1, [r0]
   16848:	cmp	r1, r5
   1684c:	bne	16820 <__assert_fail@plt+0x5a2c>
   16850:	ldr	r3, [r4, #4]
   16854:	ldr	r0, [r3]
   16858:	cmp	r8, #0
   1685c:	bne	168b4 <__assert_fail@plt+0x5ac0>
   16860:	ldrd	r4, [sp]
   16864:	ldrd	r6, [sp, #8]
   16868:	ldr	r8, [sp, #16]
   1686c:	add	sp, sp, #20
   16870:	pop	{pc}		; (ldr pc, [sp], #4)
   16874:	ldr	r0, [r4]
   16878:	cmp	r8, #0
   1687c:	beq	16860 <__assert_fail@plt+0x5a6c>
   16880:	ldr	r1, [r4, #4]
   16884:	cmp	r1, #0
   16888:	moveq	r3, #0
   1688c:	streq	r3, [r4]
   16890:	beq	16860 <__assert_fail@plt+0x5a6c>
   16894:	ldrd	r2, [r1]
   16898:	strd	r2, [r4]
   1689c:	mov	r3, #0
   168a0:	str	r3, [r1]
   168a4:	ldr	r3, [r6, #36]	; 0x24
   168a8:	str	r3, [r1, #4]
   168ac:	str	r1, [r6, #36]	; 0x24
   168b0:	b	16860 <__assert_fail@plt+0x5a6c>
   168b4:	ldr	r2, [r3, #4]
   168b8:	str	r2, [r4, #4]
   168bc:	mov	r2, #0
   168c0:	str	r2, [r3]
   168c4:	ldr	r2, [r6, #36]	; 0x24
   168c8:	str	r2, [r3, #4]
   168cc:	str	r3, [r6, #36]	; 0x24
   168d0:	b	16860 <__assert_fail@plt+0x5a6c>
   168d4:	ldr	r0, [r0, #8]
   168d8:	bx	lr
   168dc:	ldr	r0, [r0, #12]
   168e0:	bx	lr
   168e4:	ldr	r0, [r0, #16]
   168e8:	bx	lr
   168ec:	ldr	r2, [r0]
   168f0:	ldr	r3, [r0, #4]
   168f4:	cmp	r2, r3
   168f8:	bcs	16968 <__assert_fail@plt+0x5b74>
   168fc:	add	r1, r2, #8
   16900:	sub	ip, r3, #1
   16904:	sub	ip, ip, r2
   16908:	bic	ip, ip, #7
   1690c:	add	r2, r2, #16
   16910:	add	ip, ip, r2
   16914:	mov	r0, #0
   16918:	b	16934 <__assert_fail@plt+0x5b40>
   1691c:	mov	r2, #1
   16920:	cmp	r0, r2
   16924:	movcc	r0, r2
   16928:	add	r1, r1, #8
   1692c:	cmp	r1, ip
   16930:	beq	16964 <__assert_fail@plt+0x5b70>
   16934:	ldr	r3, [r1, #-8]
   16938:	cmp	r3, #0
   1693c:	beq	16928 <__assert_fail@plt+0x5b34>
   16940:	ldr	r3, [r1, #-4]
   16944:	cmp	r3, #0
   16948:	beq	1691c <__assert_fail@plt+0x5b28>
   1694c:	mov	r2, #1
   16950:	add	r2, r2, #1
   16954:	ldr	r3, [r3, #4]
   16958:	cmp	r3, #0
   1695c:	bne	16950 <__assert_fail@plt+0x5b5c>
   16960:	b	16920 <__assert_fail@plt+0x5b2c>
   16964:	bx	lr
   16968:	mov	r0, #0
   1696c:	bx	lr
   16970:	push	{lr}		; (str lr, [sp, #-4]!)
   16974:	ldr	r2, [r0]
   16978:	ldr	r3, [r0, #4]
   1697c:	cmp	r2, r3
   16980:	bcs	169e8 <__assert_fail@plt+0x5bf4>
   16984:	add	r1, r2, #8
   16988:	sub	ip, r3, #1
   1698c:	sub	ip, ip, r2
   16990:	bic	ip, ip, #7
   16994:	add	r2, r2, #16
   16998:	add	ip, ip, r2
   1699c:	mov	r2, #0
   169a0:	mov	lr, r2
   169a4:	b	169b4 <__assert_fail@plt+0x5bc0>
   169a8:	add	r1, r1, #8
   169ac:	cmp	r1, ip
   169b0:	beq	169f0 <__assert_fail@plt+0x5bfc>
   169b4:	ldr	r3, [r1, #-8]
   169b8:	cmp	r3, #0
   169bc:	beq	169a8 <__assert_fail@plt+0x5bb4>
   169c0:	add	lr, lr, #1
   169c4:	add	r2, r2, #1
   169c8:	ldr	r3, [r1, #-4]
   169cc:	cmp	r3, #0
   169d0:	beq	169a8 <__assert_fail@plt+0x5bb4>
   169d4:	add	r2, r2, #1
   169d8:	ldr	r3, [r3, #4]
   169dc:	cmp	r3, #0
   169e0:	bne	169d4 <__assert_fail@plt+0x5be0>
   169e4:	b	169a8 <__assert_fail@plt+0x5bb4>
   169e8:	mov	r2, #0
   169ec:	mov	lr, r2
   169f0:	ldr	r3, [r0, #12]
   169f4:	cmp	r3, lr
   169f8:	movne	r0, #0
   169fc:	beq	16a04 <__assert_fail@plt+0x5c10>
   16a00:	pop	{pc}		; (ldr pc, [sp], #4)
   16a04:	ldr	r0, [r0, #16]
   16a08:	cmp	r0, r2
   16a0c:	movne	r0, #0
   16a10:	moveq	r0, #1
   16a14:	b	16a00 <__assert_fail@plt+0x5c0c>
   16a18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a1c:	strd	r6, [sp, #8]
   16a20:	str	r8, [sp, #16]
   16a24:	str	lr, [sp, #20]
   16a28:	sub	sp, sp, #8
   16a2c:	mov	r6, r0
   16a30:	mov	r4, r1
   16a34:	ldr	r5, [r0, #8]
   16a38:	ldr	r7, [r0, #12]
   16a3c:	bl	168ec <__assert_fail@plt+0x5af8>
   16a40:	mov	r8, r0
   16a44:	ldr	r2, [r6, #16]
   16a48:	movw	r1, #33216	; 0x81c0
   16a4c:	movt	r1, #1
   16a50:	mov	r0, r4
   16a54:	bl	10cec <fprintf@plt>
   16a58:	mov	r2, r5
   16a5c:	movw	r1, #33240	; 0x81d8
   16a60:	movt	r1, #1
   16a64:	mov	r0, r4
   16a68:	bl	10cec <fprintf@plt>
   16a6c:	vmov	s15, r7
   16a70:	vcvt.f64.u32	d6, s15
   16a74:	vldr	d7, [pc, #84]	; 16ad0 <__assert_fail@plt+0x5cdc>
   16a78:	vmul.f64	d6, d6, d7
   16a7c:	vmov	s15, r5
   16a80:	vcvt.f64.u32	d7, s15
   16a84:	vdiv.f64	d5, d6, d7
   16a88:	vstr	d5, [sp]
   16a8c:	mov	r2, r7
   16a90:	movw	r1, #33264	; 0x81f0
   16a94:	movt	r1, #1
   16a98:	mov	r0, r4
   16a9c:	bl	10cec <fprintf@plt>
   16aa0:	mov	r2, r8
   16aa4:	movw	r1, #33300	; 0x8214
   16aa8:	movt	r1, #1
   16aac:	mov	r0, r4
   16ab0:	bl	10cec <fprintf@plt>
   16ab4:	add	sp, sp, #8
   16ab8:	ldrd	r4, [sp]
   16abc:	ldrd	r6, [sp, #8]
   16ac0:	ldr	r8, [sp, #16]
   16ac4:	add	sp, sp, #20
   16ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   16acc:	nop	{0}
   16ad0:	andeq	r0, r0, r0
   16ad4:	subsmi	r0, r9, r0
   16ad8:	strd	r4, [sp, #-16]!
   16adc:	str	r6, [sp, #8]
   16ae0:	str	lr, [sp, #12]
   16ae4:	mov	r6, r0
   16ae8:	mov	r5, r1
   16aec:	bl	165ec <__assert_fail@plt+0x57f8>
   16af0:	ldr	r1, [r0]
   16af4:	cmp	r1, #0
   16af8:	beq	16b4c <__assert_fail@plt+0x5d58>
   16afc:	mov	r4, r0
   16b00:	cmp	r1, r5
   16b04:	beq	16b34 <__assert_fail@plt+0x5d40>
   16b08:	ldr	r3, [r6, #28]
   16b0c:	mov	r0, r5
   16b10:	blx	r3
   16b14:	cmp	r0, #0
   16b18:	bne	16b34 <__assert_fail@plt+0x5d40>
   16b1c:	ldr	r4, [r4, #4]
   16b20:	cmp	r4, #0
   16b24:	beq	16b38 <__assert_fail@plt+0x5d44>
   16b28:	ldr	r1, [r4]
   16b2c:	cmp	r1, r5
   16b30:	bne	16b08 <__assert_fail@plt+0x5d14>
   16b34:	ldr	r4, [r4]
   16b38:	mov	r0, r4
   16b3c:	ldrd	r4, [sp]
   16b40:	ldr	r6, [sp, #8]
   16b44:	add	sp, sp, #12
   16b48:	pop	{pc}		; (ldr pc, [sp], #4)
   16b4c:	mov	r4, r1
   16b50:	b	16b38 <__assert_fail@plt+0x5d44>
   16b54:	ldr	r3, [r0, #16]
   16b58:	cmp	r3, #0
   16b5c:	beq	16bb4 <__assert_fail@plt+0x5dc0>
   16b60:	ldr	r2, [r0]
   16b64:	ldr	r1, [r0, #4]
   16b68:	cmp	r2, r1
   16b6c:	bcs	16ba8 <__assert_fail@plt+0x5db4>
   16b70:	ldr	r0, [r2]
   16b74:	cmp	r0, #0
   16b78:	bxne	lr
   16b7c:	mov	r3, r2
   16b80:	sub	r1, r1, #1
   16b84:	sub	r1, r1, r2
   16b88:	bic	r1, r1, #7
   16b8c:	add	r2, r2, r1
   16b90:	cmp	r3, r2
   16b94:	beq	16ba8 <__assert_fail@plt+0x5db4>
   16b98:	ldr	r0, [r3, #8]!
   16b9c:	cmp	r0, #0
   16ba0:	beq	16b90 <__assert_fail@plt+0x5d9c>
   16ba4:	bx	lr
   16ba8:	str	r4, [sp, #-8]!
   16bac:	str	lr, [sp, #4]
   16bb0:	bl	10db8 <abort@plt>
   16bb4:	mov	r0, #0
   16bb8:	bx	lr
   16bbc:	strd	r4, [sp, #-16]!
   16bc0:	str	r6, [sp, #8]
   16bc4:	str	lr, [sp, #12]
   16bc8:	mov	r5, r0
   16bcc:	mov	r4, r1
   16bd0:	bl	165ec <__assert_fail@plt+0x57f8>
   16bd4:	mov	r2, r0
   16bd8:	mov	r3, r0
   16bdc:	b	16bec <__assert_fail@plt+0x5df8>
   16be0:	ldr	r3, [r3, #4]
   16be4:	cmp	r3, #0
   16be8:	beq	16c08 <__assert_fail@plt+0x5e14>
   16bec:	ldr	r1, [r3]
   16bf0:	cmp	r1, r4
   16bf4:	bne	16be0 <__assert_fail@plt+0x5dec>
   16bf8:	ldr	r3, [r3, #4]
   16bfc:	cmp	r3, #0
   16c00:	ldrne	r0, [r3]
   16c04:	bne	16c2c <__assert_fail@plt+0x5e38>
   16c08:	ldr	r3, [r5, #4]
   16c0c:	add	r2, r2, #8
   16c10:	cmp	r3, r2
   16c14:	bls	16c28 <__assert_fail@plt+0x5e34>
   16c18:	ldr	r0, [r2]
   16c1c:	cmp	r0, #0
   16c20:	beq	16c0c <__assert_fail@plt+0x5e18>
   16c24:	b	16c2c <__assert_fail@plt+0x5e38>
   16c28:	mov	r0, #0
   16c2c:	ldrd	r4, [sp]
   16c30:	ldr	r6, [sp, #8]
   16c34:	add	sp, sp, #12
   16c38:	pop	{pc}		; (ldr pc, [sp], #4)
   16c3c:	strd	r4, [sp, #-12]!
   16c40:	str	lr, [sp, #8]
   16c44:	ldr	r4, [r0]
   16c48:	ldr	r3, [r0, #4]
   16c4c:	cmp	r4, r3
   16c50:	bcs	16cb8 <__assert_fail@plt+0x5ec4>
   16c54:	mov	r5, r0
   16c58:	mov	r0, #0
   16c5c:	b	16c70 <__assert_fail@plt+0x5e7c>
   16c60:	add	r4, r4, #8
   16c64:	ldr	r3, [r5, #4]
   16c68:	cmp	r3, r4
   16c6c:	bls	16cac <__assert_fail@plt+0x5eb8>
   16c70:	ldr	r3, [r4]
   16c74:	cmp	r3, #0
   16c78:	beq	16c60 <__assert_fail@plt+0x5e6c>
   16c7c:	cmp	r2, r0
   16c80:	bls	16cac <__assert_fail@plt+0x5eb8>
   16c84:	add	ip, r1, r0, lsl #2
   16c88:	mov	r3, r4
   16c8c:	add	r0, r0, #1
   16c90:	ldr	lr, [r3]
   16c94:	str	lr, [ip], #4
   16c98:	ldr	r3, [r3, #4]
   16c9c:	cmp	r3, #0
   16ca0:	beq	16c60 <__assert_fail@plt+0x5e6c>
   16ca4:	cmp	r2, r0
   16ca8:	bne	16c8c <__assert_fail@plt+0x5e98>
   16cac:	ldrd	r4, [sp]
   16cb0:	add	sp, sp, #8
   16cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16cb8:	mov	r0, #0
   16cbc:	b	16cac <__assert_fail@plt+0x5eb8>
   16cc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16cc4:	strd	r6, [sp, #8]
   16cc8:	strd	r8, [sp, #16]
   16ccc:	str	sl, [sp, #24]
   16cd0:	str	lr, [sp, #28]
   16cd4:	ldr	r8, [r0]
   16cd8:	ldr	r3, [r0, #4]
   16cdc:	cmp	r8, r3
   16ce0:	bcs	16d40 <__assert_fail@plt+0x5f4c>
   16ce4:	mov	r7, r2
   16ce8:	mov	r6, r1
   16cec:	mov	r9, r0
   16cf0:	mov	r5, #0
   16cf4:	b	16d08 <__assert_fail@plt+0x5f14>
   16cf8:	add	r8, r8, #8
   16cfc:	ldr	r3, [r9, #4]
   16d00:	cmp	r3, r8
   16d04:	bls	16d44 <__assert_fail@plt+0x5f50>
   16d08:	ldr	r3, [r8]
   16d0c:	cmp	r3, #0
   16d10:	beq	16cf8 <__assert_fail@plt+0x5f04>
   16d14:	mov	r4, r8
   16d18:	mov	r1, r7
   16d1c:	ldr	r0, [r4]
   16d20:	blx	r6
   16d24:	cmp	r0, #0
   16d28:	beq	16d44 <__assert_fail@plt+0x5f50>
   16d2c:	add	r5, r5, #1
   16d30:	ldr	r4, [r4, #4]
   16d34:	cmp	r4, #0
   16d38:	bne	16d18 <__assert_fail@plt+0x5f24>
   16d3c:	b	16cf8 <__assert_fail@plt+0x5f04>
   16d40:	mov	r5, #0
   16d44:	mov	r0, r5
   16d48:	ldrd	r4, [sp]
   16d4c:	ldrd	r6, [sp, #8]
   16d50:	ldrd	r8, [sp, #16]
   16d54:	ldr	sl, [sp, #24]
   16d58:	add	sp, sp, #28
   16d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d60:	ldrb	r2, [r0]
   16d64:	cmp	r2, #0
   16d68:	beq	16d94 <__assert_fail@plt+0x5fa0>
   16d6c:	mov	r3, #0
   16d70:	rsb	r3, r3, r3, lsl #5
   16d74:	add	r3, r3, r2
   16d78:	udiv	r2, r3, r1
   16d7c:	mls	r3, r1, r2, r3
   16d80:	ldrb	r2, [r0, #1]!
   16d84:	cmp	r2, #0
   16d88:	bne	16d70 <__assert_fail@plt+0x5f7c>
   16d8c:	mov	r0, r3
   16d90:	bx	lr
   16d94:	mov	r3, #0
   16d98:	b	16d8c <__assert_fail@plt+0x5f98>
   16d9c:	strd	r4, [sp, #-8]!
   16da0:	movw	r3, #33196	; 0x81ac
   16da4:	movt	r3, #1
   16da8:	ldrd	r4, [r3]
   16dac:	strd	r4, [r0]
   16db0:	ldrd	r4, [r3, #8]
   16db4:	strd	r4, [r0, #8]
   16db8:	ldr	r3, [r3, #16]
   16dbc:	str	r3, [r0, #16]
   16dc0:	ldrd	r4, [sp]
   16dc4:	add	sp, sp, #8
   16dc8:	bx	lr
   16dcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16dd0:	strd	r6, [sp, #8]
   16dd4:	str	r8, [sp, #16]
   16dd8:	str	lr, [sp, #20]
   16ddc:	mov	r8, r0
   16de0:	mov	r5, r1
   16de4:	subs	r7, r2, #0
   16de8:	movw	r2, #25600	; 0x6400
   16dec:	movt	r2, #1
   16df0:	cmp	r7, #0
   16df4:	moveq	r7, r2
   16df8:	subs	r6, r3, #0
   16dfc:	movw	r3, #25616	; 0x6410
   16e00:	movt	r3, #1
   16e04:	cmp	r6, #0
   16e08:	moveq	r6, r3
   16e0c:	mov	r0, #40	; 0x28
   16e10:	bl	17800 <__assert_fail@plt+0x6a0c>
   16e14:	subs	r4, r0, #0
   16e18:	beq	16e98 <__assert_fail@plt+0x60a4>
   16e1c:	movw	r3, #33196	; 0x81ac
   16e20:	movt	r3, #1
   16e24:	cmp	r5, #0
   16e28:	moveq	r5, r3
   16e2c:	str	r5, [r4, #20]
   16e30:	mov	r0, r4
   16e34:	bl	16420 <__assert_fail@plt+0x562c>
   16e38:	cmp	r0, #0
   16e3c:	beq	16eb0 <__assert_fail@plt+0x60bc>
   16e40:	mov	r1, r5
   16e44:	mov	r0, r8
   16e48:	bl	164e4 <__assert_fail@plt+0x56f0>
   16e4c:	str	r0, [r4, #8]
   16e50:	cmp	r0, #0
   16e54:	beq	16eb0 <__assert_fail@plt+0x60bc>
   16e58:	mov	r1, #8
   16e5c:	bl	1778c <__assert_fail@plt+0x6998>
   16e60:	str	r0, [r4]
   16e64:	cmp	r0, #0
   16e68:	beq	16eb0 <__assert_fail@plt+0x60bc>
   16e6c:	ldr	r3, [r4, #8]
   16e70:	add	r0, r0, r3, lsl #3
   16e74:	str	r0, [r4, #4]
   16e78:	mov	r3, #0
   16e7c:	str	r3, [r4, #12]
   16e80:	str	r3, [r4, #16]
   16e84:	str	r7, [r4, #24]
   16e88:	str	r6, [r4, #28]
   16e8c:	ldr	r2, [sp, #24]
   16e90:	str	r2, [r4, #32]
   16e94:	str	r3, [r4, #36]	; 0x24
   16e98:	mov	r0, r4
   16e9c:	ldrd	r4, [sp]
   16ea0:	ldrd	r6, [sp, #8]
   16ea4:	ldr	r8, [sp, #16]
   16ea8:	add	sp, sp, #20
   16eac:	pop	{pc}		; (ldr pc, [sp], #4)
   16eb0:	mov	r0, r4
   16eb4:	bl	13360 <__assert_fail@plt+0x256c>
   16eb8:	mov	r4, #0
   16ebc:	b	16e98 <__assert_fail@plt+0x60a4>
   16ec0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16ec4:	strd	r6, [sp, #8]
   16ec8:	str	r8, [sp, #16]
   16ecc:	str	lr, [sp, #20]
   16ed0:	mov	r5, r0
   16ed4:	ldr	r6, [r0]
   16ed8:	ldr	r3, [r0, #4]
   16edc:	cmp	r6, r3
   16ee0:	bcs	16f78 <__assert_fail@plt+0x6184>
   16ee4:	add	r6, r6, #8
   16ee8:	mov	r7, #0
   16eec:	b	16f58 <__assert_fail@plt+0x6164>
   16ef0:	str	r7, [r4]
   16ef4:	ldr	r3, [r4, #4]
   16ef8:	ldr	r2, [r5, #36]	; 0x24
   16efc:	str	r2, [r4, #4]
   16f00:	str	r4, [r5, #36]	; 0x24
   16f04:	mov	r4, r3
   16f08:	cmp	r3, #0
   16f0c:	beq	16f28 <__assert_fail@plt+0x6134>
   16f10:	ldr	r3, [r5, #32]
   16f14:	cmp	r3, #0
   16f18:	beq	16ef0 <__assert_fail@plt+0x60fc>
   16f1c:	ldr	r0, [r4]
   16f20:	blx	r3
   16f24:	b	16ef0 <__assert_fail@plt+0x60fc>
   16f28:	ldr	r3, [r5, #32]
   16f2c:	cmp	r3, #0
   16f30:	beq	16f3c <__assert_fail@plt+0x6148>
   16f34:	ldr	r0, [r8, #-8]
   16f38:	blx	r3
   16f3c:	str	r7, [r8, #-8]
   16f40:	str	r7, [r8, #-4]
   16f44:	add	r2, r6, #8
   16f48:	ldr	r3, [r5, #4]
   16f4c:	cmp	r3, r6
   16f50:	bls	16f78 <__assert_fail@plt+0x6184>
   16f54:	mov	r6, r2
   16f58:	mov	r8, r6
   16f5c:	ldr	r3, [r6, #-8]
   16f60:	cmp	r3, #0
   16f64:	beq	16f44 <__assert_fail@plt+0x6150>
   16f68:	ldr	r4, [r6, #-4]
   16f6c:	cmp	r4, #0
   16f70:	bne	16f10 <__assert_fail@plt+0x611c>
   16f74:	b	16f28 <__assert_fail@plt+0x6134>
   16f78:	mov	r3, #0
   16f7c:	str	r3, [r5, #12]
   16f80:	str	r3, [r5, #16]
   16f84:	ldrd	r4, [sp]
   16f88:	ldrd	r6, [sp, #8]
   16f8c:	ldr	r8, [sp, #16]
   16f90:	add	sp, sp, #20
   16f94:	pop	{pc}		; (ldr pc, [sp], #4)
   16f98:	strd	r4, [sp, #-16]!
   16f9c:	str	r6, [sp, #8]
   16fa0:	str	lr, [sp, #12]
   16fa4:	mov	r6, r0
   16fa8:	ldr	r3, [r0, #32]
   16fac:	cmp	r3, #0
   16fb0:	beq	17010 <__assert_fail@plt+0x621c>
   16fb4:	ldr	r3, [r0, #16]
   16fb8:	cmp	r3, #0
   16fbc:	beq	17010 <__assert_fail@plt+0x621c>
   16fc0:	ldr	r5, [r0]
   16fc4:	ldr	r3, [r0, #4]
   16fc8:	cmp	r5, r3
   16fcc:	bcc	16fe4 <__assert_fail@plt+0x61f0>
   16fd0:	b	17020 <__assert_fail@plt+0x622c>
   16fd4:	add	r5, r5, #8
   16fd8:	ldr	r3, [r6, #4]
   16fdc:	cmp	r3, r5
   16fe0:	bls	17010 <__assert_fail@plt+0x621c>
   16fe4:	ldr	r3, [r5]
   16fe8:	cmp	r3, #0
   16fec:	beq	16fd4 <__assert_fail@plt+0x61e0>
   16ff0:	mov	r4, r5
   16ff4:	ldr	r3, [r6, #32]
   16ff8:	ldr	r0, [r4]
   16ffc:	blx	r3
   17000:	ldr	r4, [r4, #4]
   17004:	cmp	r4, #0
   17008:	bne	16ff4 <__assert_fail@plt+0x6200>
   1700c:	b	16fd4 <__assert_fail@plt+0x61e0>
   17010:	ldr	r5, [r6]
   17014:	ldr	r3, [r6, #4]
   17018:	cmp	r5, r3
   1701c:	bcc	17070 <__assert_fail@plt+0x627c>
   17020:	ldr	r0, [r6, #36]	; 0x24
   17024:	cmp	r0, #0
   17028:	beq	17040 <__assert_fail@plt+0x624c>
   1702c:	ldr	r4, [r0, #4]
   17030:	bl	13360 <__assert_fail@plt+0x256c>
   17034:	mov	r0, r4
   17038:	cmp	r4, #0
   1703c:	bne	1702c <__assert_fail@plt+0x6238>
   17040:	ldr	r0, [r6]
   17044:	bl	13360 <__assert_fail@plt+0x256c>
   17048:	mov	r0, r6
   1704c:	bl	13360 <__assert_fail@plt+0x256c>
   17050:	ldrd	r4, [sp]
   17054:	ldr	r6, [sp, #8]
   17058:	add	sp, sp, #12
   1705c:	pop	{pc}		; (ldr pc, [sp], #4)
   17060:	add	r5, r5, #8
   17064:	ldr	r3, [r6, #4]
   17068:	cmp	r3, r5
   1706c:	bls	17020 <__assert_fail@plt+0x622c>
   17070:	ldr	r0, [r5, #4]
   17074:	cmp	r0, #0
   17078:	beq	17060 <__assert_fail@plt+0x626c>
   1707c:	ldr	r4, [r0, #4]
   17080:	bl	13360 <__assert_fail@plt+0x256c>
   17084:	mov	r0, r4
   17088:	cmp	r4, #0
   1708c:	bne	1707c <__assert_fail@plt+0x6288>
   17090:	b	17060 <__assert_fail@plt+0x626c>
   17094:	strd	r4, [sp, #-12]!
   17098:	str	lr, [sp, #8]
   1709c:	sub	sp, sp, #44	; 0x2c
   170a0:	mov	r4, r0
   170a4:	mov	r0, r1
   170a8:	ldr	r1, [r4, #20]
   170ac:	bl	164e4 <__assert_fail@plt+0x56f0>
   170b0:	subs	r5, r0, #0
   170b4:	beq	171ac <__assert_fail@plt+0x63b8>
   170b8:	ldr	r3, [r4, #8]
   170bc:	cmp	r3, r5
   170c0:	beq	171c4 <__assert_fail@plt+0x63d0>
   170c4:	mov	r1, #8
   170c8:	mov	r0, r5
   170cc:	bl	1778c <__assert_fail@plt+0x6998>
   170d0:	str	r0, [sp]
   170d4:	cmp	r0, #0
   170d8:	beq	171cc <__assert_fail@plt+0x63d8>
   170dc:	str	r5, [sp, #8]
   170e0:	add	r0, r0, r5, lsl #3
   170e4:	str	r0, [sp, #4]
   170e8:	mov	r2, #0
   170ec:	str	r2, [sp, #12]
   170f0:	str	r2, [sp, #16]
   170f4:	ldr	r3, [r4, #20]
   170f8:	str	r3, [sp, #20]
   170fc:	ldr	r3, [r4, #24]
   17100:	str	r3, [sp, #24]
   17104:	ldr	r3, [r4, #28]
   17108:	str	r3, [sp, #28]
   1710c:	ldr	r3, [r4, #32]
   17110:	str	r3, [sp, #32]
   17114:	ldr	r3, [r4, #36]	; 0x24
   17118:	str	r3, [sp, #36]	; 0x24
   1711c:	mov	r1, r4
   17120:	mov	r0, sp
   17124:	bl	1662c <__assert_fail@plt+0x5838>
   17128:	subs	r5, r0, #0
   1712c:	bne	17174 <__assert_fail@plt+0x6380>
   17130:	ldr	r3, [sp, #36]	; 0x24
   17134:	str	r3, [r4, #36]	; 0x24
   17138:	mov	r2, #1
   1713c:	mov	r1, sp
   17140:	mov	r0, r4
   17144:	bl	1662c <__assert_fail@plt+0x5838>
   17148:	cmp	r0, #0
   1714c:	beq	171a8 <__assert_fail@plt+0x63b4>
   17150:	mov	r2, #0
   17154:	mov	r1, sp
   17158:	mov	r0, r4
   1715c:	bl	1662c <__assert_fail@plt+0x5838>
   17160:	cmp	r0, #0
   17164:	beq	171a8 <__assert_fail@plt+0x63b4>
   17168:	ldr	r0, [sp]
   1716c:	bl	13360 <__assert_fail@plt+0x256c>
   17170:	b	171b0 <__assert_fail@plt+0x63bc>
   17174:	ldr	r0, [r4]
   17178:	bl	13360 <__assert_fail@plt+0x256c>
   1717c:	ldr	r3, [sp]
   17180:	str	r3, [r4]
   17184:	ldr	r3, [sp, #4]
   17188:	str	r3, [r4, #4]
   1718c:	ldr	r3, [sp, #8]
   17190:	str	r3, [r4, #8]
   17194:	ldr	r3, [sp, #12]
   17198:	str	r3, [r4, #12]
   1719c:	ldr	r3, [sp, #36]	; 0x24
   171a0:	str	r3, [r4, #36]	; 0x24
   171a4:	b	171b0 <__assert_fail@plt+0x63bc>
   171a8:	bl	10db8 <abort@plt>
   171ac:	mov	r5, #0
   171b0:	mov	r0, r5
   171b4:	add	sp, sp, #44	; 0x2c
   171b8:	ldrd	r4, [sp]
   171bc:	add	sp, sp, #8
   171c0:	pop	{pc}		; (ldr pc, [sp], #4)
   171c4:	mov	r5, #1
   171c8:	b	171b0 <__assert_fail@plt+0x63bc>
   171cc:	mov	r5, #0
   171d0:	b	171b0 <__assert_fail@plt+0x63bc>
   171d4:	strd	r4, [sp, #-16]!
   171d8:	str	r6, [sp, #8]
   171dc:	str	lr, [sp, #12]
   171e0:	sub	sp, sp, #8
   171e4:	subs	r5, r1, #0
   171e8:	beq	17234 <__assert_fail@plt+0x6440>
   171ec:	mov	r4, r0
   171f0:	mov	r6, r2
   171f4:	mov	r3, #0
   171f8:	add	r2, sp, #4
   171fc:	mov	r1, r5
   17200:	bl	167b0 <__assert_fail@plt+0x59bc>
   17204:	cmp	r0, #0
   17208:	beq	17238 <__assert_fail@plt+0x6444>
   1720c:	cmp	r6, #0
   17210:	moveq	r0, #0
   17214:	beq	17220 <__assert_fail@plt+0x642c>
   17218:	str	r0, [r6]
   1721c:	mov	r0, #0
   17220:	add	sp, sp, #8
   17224:	ldrd	r4, [sp]
   17228:	ldr	r6, [sp, #8]
   1722c:	add	sp, sp, #12
   17230:	pop	{pc}		; (ldr pc, [sp], #4)
   17234:	bl	10db8 <abort@plt>
   17238:	vldr	s15, [r4, #12]
   1723c:	vcvt.f32.u32	s14, s15
   17240:	ldr	r3, [r4, #20]
   17244:	vldr	s15, [r4, #8]
   17248:	vcvt.f32.u32	s15, s15
   1724c:	vldr	s13, [r3, #8]
   17250:	vmul.f32	s15, s15, s13
   17254:	vcmpe.f32	s14, s15
   17258:	vmrs	APSR_nzcv, fpscr
   1725c:	bgt	172ac <__assert_fail@plt+0x64b8>
   17260:	ldr	r3, [sp, #4]
   17264:	ldr	r2, [r3]
   17268:	cmp	r2, #0
   1726c:	beq	17358 <__assert_fail@plt+0x6564>
   17270:	ldr	r0, [r4, #36]	; 0x24
   17274:	cmp	r0, #0
   17278:	beq	17340 <__assert_fail@plt+0x654c>
   1727c:	ldr	r3, [r0, #4]
   17280:	str	r3, [r4, #36]	; 0x24
   17284:	str	r5, [r0]
   17288:	ldr	r3, [sp, #4]
   1728c:	ldr	r2, [r3, #4]
   17290:	str	r2, [r0, #4]
   17294:	str	r0, [r3, #4]
   17298:	ldr	r3, [r4, #16]
   1729c:	add	r3, r3, #1
   172a0:	str	r3, [r4, #16]
   172a4:	mov	r0, #1
   172a8:	b	17220 <__assert_fail@plt+0x642c>
   172ac:	mov	r0, r4
   172b0:	bl	16420 <__assert_fail@plt+0x562c>
   172b4:	ldr	r3, [r4, #20]
   172b8:	vldr	s13, [r3, #8]
   172bc:	vldr	s15, [r4, #8]
   172c0:	vcvt.f32.u32	s15, s15
   172c4:	vldr	s14, [r4, #12]
   172c8:	vcvt.f32.u32	s14, s14
   172cc:	vmul.f32	s12, s13, s15
   172d0:	vcmpe.f32	s14, s12
   172d4:	vmrs	APSR_nzcv, fpscr
   172d8:	ble	17260 <__assert_fail@plt+0x646c>
   172dc:	ldrb	r2, [r3, #16]
   172e0:	cmp	r2, #0
   172e4:	vldr	s14, [r3, #12]
   172e8:	vmul.f32	s15, s15, s14
   172ec:	vmuleq.f32	s15, s15, s13
   172f0:	vldr	s14, [pc, #132]	; 1737c <__assert_fail@plt+0x6588>
   172f4:	vcmpe.f32	s15, s14
   172f8:	vmrs	APSR_nzcv, fpscr
   172fc:	mvnge	r0, #0
   17300:	bge	17220 <__assert_fail@plt+0x642c>
   17304:	vcvt.u32.f32	s15, s15
   17308:	vmov	r1, s15
   1730c:	mov	r0, r4
   17310:	bl	17094 <__assert_fail@plt+0x62a0>
   17314:	cmp	r0, #0
   17318:	mvneq	r0, #0
   1731c:	beq	17220 <__assert_fail@plt+0x642c>
   17320:	mov	r3, #0
   17324:	add	r2, sp, #4
   17328:	mov	r1, r5
   1732c:	mov	r0, r4
   17330:	bl	167b0 <__assert_fail@plt+0x59bc>
   17334:	cmp	r0, #0
   17338:	beq	17260 <__assert_fail@plt+0x646c>
   1733c:	bl	10db8 <abort@plt>
   17340:	mov	r0, #8
   17344:	bl	17800 <__assert_fail@plt+0x6a0c>
   17348:	cmp	r0, #0
   1734c:	mvneq	r0, #0
   17350:	beq	17220 <__assert_fail@plt+0x642c>
   17354:	b	17284 <__assert_fail@plt+0x6490>
   17358:	str	r5, [r3]
   1735c:	ldr	r3, [r4, #16]
   17360:	add	r3, r3, #1
   17364:	str	r3, [r4, #16]
   17368:	ldr	r3, [r4, #12]
   1736c:	add	r3, r3, #1
   17370:	str	r3, [r4, #12]
   17374:	mov	r0, #1
   17378:	b	17220 <__assert_fail@plt+0x642c>
   1737c:	svcmi	0x00800000
   17380:	str	r4, [sp, #-8]!
   17384:	str	lr, [sp, #4]
   17388:	sub	sp, sp, #8
   1738c:	mov	r4, r1
   17390:	add	r2, sp, #4
   17394:	bl	171d4 <__assert_fail@plt+0x63e0>
   17398:	cmn	r0, #1
   1739c:	moveq	r0, #0
   173a0:	beq	173b0 <__assert_fail@plt+0x65bc>
   173a4:	cmp	r0, #0
   173a8:	ldreq	r0, [sp, #4]
   173ac:	movne	r0, r4
   173b0:	add	sp, sp, #8
   173b4:	ldr	r4, [sp]
   173b8:	add	sp, sp, #4
   173bc:	pop	{pc}		; (ldr pc, [sp], #4)
   173c0:	strd	r4, [sp, #-16]!
   173c4:	str	r6, [sp, #8]
   173c8:	str	lr, [sp, #12]
   173cc:	sub	sp, sp, #8
   173d0:	mov	r4, r0
   173d4:	mov	r3, #1
   173d8:	add	r2, sp, #4
   173dc:	bl	167b0 <__assert_fail@plt+0x59bc>
   173e0:	subs	r5, r0, #0
   173e4:	beq	17404 <__assert_fail@plt+0x6610>
   173e8:	ldr	r3, [r4, #16]
   173ec:	sub	r3, r3, #1
   173f0:	str	r3, [r4, #16]
   173f4:	ldr	r3, [sp, #4]
   173f8:	ldr	r3, [r3]
   173fc:	cmp	r3, #0
   17400:	beq	1741c <__assert_fail@plt+0x6628>
   17404:	mov	r0, r5
   17408:	add	sp, sp, #8
   1740c:	ldrd	r4, [sp]
   17410:	ldr	r6, [sp, #8]
   17414:	add	sp, sp, #12
   17418:	pop	{pc}		; (ldr pc, [sp], #4)
   1741c:	ldr	r3, [r4, #12]
   17420:	sub	r3, r3, #1
   17424:	str	r3, [r4, #12]
   17428:	vmov	s15, r3
   1742c:	vcvt.f32.u32	s15, s15
   17430:	ldr	r3, [r4, #20]
   17434:	vldr	s14, [r4, #8]
   17438:	vcvt.f32.u32	s14, s14
   1743c:	vldr	s13, [r3]
   17440:	vmul.f32	s14, s14, s13
   17444:	vcmpe.f32	s15, s14
   17448:	vmrs	APSR_nzcv, fpscr
   1744c:	bpl	17404 <__assert_fail@plt+0x6610>
   17450:	mov	r0, r4
   17454:	bl	16420 <__assert_fail@plt+0x562c>
   17458:	ldr	r3, [r4, #20]
   1745c:	vldr	s15, [r4, #8]
   17460:	vcvt.f32.u32	s15, s15
   17464:	vldr	s14, [r4, #12]
   17468:	vcvt.f32.u32	s13, s14
   1746c:	vldr	s14, [r3]
   17470:	vmul.f32	s14, s15, s14
   17474:	vcmpe.f32	s13, s14
   17478:	vmrs	APSR_nzcv, fpscr
   1747c:	bpl	17404 <__assert_fail@plt+0x6610>
   17480:	ldrb	r2, [r3, #16]
   17484:	cmp	r2, #0
   17488:	vldr	s14, [r3, #4]
   1748c:	vmuleq.f32	s15, s15, s14
   17490:	vldreq	s14, [r3, #8]
   17494:	vmul.f32	s15, s15, s14
   17498:	vcvt.u32.f32	s15, s15
   1749c:	vmov	r1, s15
   174a0:	mov	r0, r4
   174a4:	bl	17094 <__assert_fail@plt+0x62a0>
   174a8:	cmp	r0, #0
   174ac:	bne	17404 <__assert_fail@plt+0x6610>
   174b0:	ldr	r0, [r4, #36]	; 0x24
   174b4:	cmp	r0, #0
   174b8:	beq	174d0 <__assert_fail@plt+0x66dc>
   174bc:	ldr	r6, [r0, #4]
   174c0:	bl	13360 <__assert_fail@plt+0x256c>
   174c4:	mov	r0, r6
   174c8:	cmp	r6, #0
   174cc:	bne	174bc <__assert_fail@plt+0x66c8>
   174d0:	mov	r3, #0
   174d4:	str	r3, [r4, #36]	; 0x24
   174d8:	b	17404 <__assert_fail@plt+0x6610>
   174dc:	str	r4, [sp, #-8]!
   174e0:	str	lr, [sp, #4]
   174e4:	bl	173c0 <__assert_fail@plt+0x65cc>
   174e8:	ldr	r4, [sp]
   174ec:	add	sp, sp, #4
   174f0:	pop	{pc}		; (ldr pc, [sp], #4)
   174f4:	mov	r3, #1
   174f8:	strb	r3, [r0, #28]
   174fc:	mov	r3, #0
   17500:	str	r3, [r0, #20]
   17504:	str	r3, [r0, #24]
   17508:	str	r1, [r0]
   1750c:	str	r1, [r0, #4]
   17510:	str	r1, [r0, #8]
   17514:	str	r1, [r0, #12]
   17518:	str	r1, [r0, #16]
   1751c:	bx	lr
   17520:	ldrb	r0, [r0, #28]
   17524:	bx	lr
   17528:	mov	r2, r0
   1752c:	ldrb	ip, [r0, #28]
   17530:	eor	ip, ip, #1
   17534:	ldr	r3, [r0, #20]
   17538:	add	r3, ip, r3
   1753c:	and	r3, r3, #3
   17540:	ldr	r0, [r0, r3, lsl #2]
   17544:	str	r1, [r2, r3, lsl #2]
   17548:	str	r3, [r2, #20]
   1754c:	ldr	r1, [r2, #24]
   17550:	cmp	r1, r3
   17554:	beq	17564 <__assert_fail@plt+0x6770>
   17558:	mov	r3, #0
   1755c:	strb	r3, [r2, #28]
   17560:	bx	lr
   17564:	add	ip, ip, r1
   17568:	and	ip, ip, #3
   1756c:	str	ip, [r2, #24]
   17570:	b	17558 <__assert_fail@plt+0x6764>
   17574:	ldrb	r3, [r0, #28]
   17578:	cmp	r3, #0
   1757c:	bne	175b8 <__assert_fail@plt+0x67c4>
   17580:	ldr	r3, [r0, #20]
   17584:	ldr	r2, [r0, r3, lsl #2]
   17588:	ldr	r1, [r0, #16]
   1758c:	str	r1, [r0, r3, lsl #2]
   17590:	ldr	r1, [r0, #24]
   17594:	cmp	r3, r1
   17598:	moveq	r3, #1
   1759c:	strbeq	r3, [r0, #28]
   175a0:	beq	175b0 <__assert_fail@plt+0x67bc>
   175a4:	add	r3, r3, #3
   175a8:	and	r3, r3, #3
   175ac:	str	r3, [r0, #20]
   175b0:	mov	r0, r2
   175b4:	bx	lr
   175b8:	str	r4, [sp, #-8]!
   175bc:	str	lr, [sp, #4]
   175c0:	bl	10db8 <abort@plt>
   175c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   175c8:	str	r6, [sp, #8]
   175cc:	strd	r8, [sp, #12]
   175d0:	str	lr, [sp, #20]
   175d4:	mov	r4, r0
   175d8:	mov	r5, r1
   175dc:	add	r6, r2, #20
   175e0:	mov	r3, #0
   175e4:	strb	r3, [r2, #20]
   175e8:	mov	r8, #10
   175ec:	mov	r9, #0
   175f0:	b	175fc <__assert_fail@plt+0x6808>
   175f4:	mov	r4, r0
   175f8:	mov	r5, r1
   175fc:	mov	r2, r8
   17600:	mov	r3, r9
   17604:	mov	r0, r4
   17608:	mov	r1, r5
   1760c:	bl	17d40 <__assert_fail@plt+0x6f4c>
   17610:	add	r2, r2, #48	; 0x30
   17614:	strb	r2, [r6, #-1]!
   17618:	mov	r2, r8
   1761c:	mov	r3, r9
   17620:	mov	r0, r4
   17624:	mov	r1, r5
   17628:	bl	17d40 <__assert_fail@plt+0x6f4c>
   1762c:	cmp	r5, #0
   17630:	cmpeq	r4, #9
   17634:	bhi	175f4 <__assert_fail@plt+0x6800>
   17638:	mov	r0, r6
   1763c:	ldrd	r4, [sp]
   17640:	ldr	r6, [sp, #8]
   17644:	ldrd	r8, [sp, #12]
   17648:	add	sp, sp, #20
   1764c:	pop	{pc}		; (ldr pc, [sp], #4)
   17650:	push	{r1, r2, r3}
   17654:	push	{lr}		; (str lr, [sp, #-4]!)
   17658:	sub	sp, sp, #8
   1765c:	add	r3, sp, #20
   17660:	str	r3, [sp, #4]
   17664:	ldr	r2, [sp, #16]
   17668:	ldr	r1, [sp, #12]
   1766c:	bl	10c5c <ioctl@plt>
   17670:	add	sp, sp, #8
   17674:	pop	{lr}		; (ldr lr, [sp], #4)
   17678:	add	sp, sp, #12
   1767c:	bx	lr
   17680:	push	{r2, r3}
   17684:	push	{lr}		; (str lr, [sp, #-4]!)
   17688:	sub	sp, sp, #12
   1768c:	ldr	r2, [sp, #16]
   17690:	tst	r2, #64	; 0x40
   17694:	addne	r3, sp, #24
   17698:	strne	r3, [sp, #4]
   1769c:	ldrne	r3, [sp, #20]
   176a0:	moveq	r3, #0
   176a4:	bl	10ce0 <openat64@plt>
   176a8:	bl	17730 <__assert_fail@plt+0x693c>
   176ac:	add	sp, sp, #12
   176b0:	pop	{lr}		; (ldr lr, [sp], #4)
   176b4:	add	sp, sp, #8
   176b8:	bx	lr
   176bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   176c0:	strd	r6, [sp, #8]
   176c4:	str	r8, [sp, #16]
   176c8:	str	lr, [sp, #20]
   176cc:	mov	r6, r3
   176d0:	orr	r2, r2, #540672	; 0x84000
   176d4:	orr	r2, r2, #2304	; 0x900
   176d8:	bl	17680 <__assert_fail@plt+0x688c>
   176dc:	subs	r4, r0, #0
   176e0:	movlt	r5, #0
   176e4:	blt	176fc <__assert_fail@plt+0x6908>
   176e8:	mov	r0, r4
   176ec:	bl	10d4c <fdopendir@plt>
   176f0:	subs	r5, r0, #0
   176f4:	strne	r4, [r6]
   176f8:	beq	17714 <__assert_fail@plt+0x6920>
   176fc:	mov	r0, r5
   17700:	ldrd	r4, [sp]
   17704:	ldrd	r6, [sp, #8]
   17708:	ldr	r8, [sp, #16]
   1770c:	add	sp, sp, #20
   17710:	pop	{pc}		; (ldr pc, [sp], #4)
   17714:	bl	10cf8 <__errno_location@plt>
   17718:	mov	r6, r0
   1771c:	ldr	r7, [r0]
   17720:	mov	r0, r4
   17724:	bl	10dc4 <close@plt>
   17728:	str	r7, [r6]
   1772c:	b	176fc <__assert_fail@plt+0x6908>
   17730:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17734:	strd	r6, [sp, #8]
   17738:	str	r8, [sp, #16]
   1773c:	str	lr, [sp, #20]
   17740:	mov	r4, r0
   17744:	cmp	r0, #2
   17748:	bls	17764 <__assert_fail@plt+0x6970>
   1774c:	mov	r0, r4
   17750:	ldrd	r4, [sp]
   17754:	ldrd	r6, [sp, #8]
   17758:	ldr	r8, [sp, #16]
   1775c:	add	sp, sp, #20
   17760:	pop	{pc}		; (ldr pc, [sp], #4)
   17764:	bl	17c4c <__assert_fail@plt+0x6e58>
   17768:	mov	r6, r0
   1776c:	bl	10cf8 <__errno_location@plt>
   17770:	mov	r5, r0
   17774:	ldr	r7, [r0]
   17778:	mov	r0, r4
   1777c:	bl	10dc4 <close@plt>
   17780:	str	r7, [r5]
   17784:	mov	r4, r6
   17788:	b	1774c <__assert_fail@plt+0x6958>
   1778c:	strd	r4, [sp, #-16]!
   17790:	str	r6, [sp, #8]
   17794:	str	lr, [sp, #12]
   17798:	cmp	r1, #0
   1779c:	cmpne	r0, #0
   177a0:	beq	177dc <__assert_fail@plt+0x69e8>
   177a4:	mov	r2, r0
   177a8:	mov	r3, r1
   177ac:	umull	r4, r5, r0, r1
   177b0:	adds	r1, r5, #0
   177b4:	movne	r1, #1
   177b8:	cmp	r4, #0
   177bc:	movlt	r1, #1
   177c0:	cmp	r1, #0
   177c4:	beq	177e4 <__assert_fail@plt+0x69f0>
   177c8:	bl	10cf8 <__errno_location@plt>
   177cc:	mov	r3, #12
   177d0:	str	r3, [r0]
   177d4:	mov	r0, #0
   177d8:	b	177f0 <__assert_fail@plt+0x69fc>
   177dc:	mov	r3, #1
   177e0:	mov	r2, r3
   177e4:	mov	r1, r3
   177e8:	mov	r0, r2
   177ec:	bl	10b84 <calloc@plt>
   177f0:	ldrd	r4, [sp]
   177f4:	ldr	r6, [sp, #8]
   177f8:	add	sp, sp, #12
   177fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17800:	str	r4, [sp, #-8]!
   17804:	str	lr, [sp, #4]
   17808:	cmp	r0, #0
   1780c:	beq	17828 <__assert_fail@plt+0x6a34>
   17810:	bge	1782c <__assert_fail@plt+0x6a38>
   17814:	bl	10cf8 <__errno_location@plt>
   17818:	mov	r3, #12
   1781c:	str	r3, [r0]
   17820:	mov	r0, #0
   17824:	b	17830 <__assert_fail@plt+0x6a3c>
   17828:	mov	r0, #1
   1782c:	bl	10c8c <malloc@plt>
   17830:	ldr	r4, [sp]
   17834:	add	sp, sp, #4
   17838:	pop	{pc}		; (ldr pc, [sp], #4)
   1783c:	str	r4, [sp, #-8]!
   17840:	str	lr, [sp, #4]
   17844:	cmp	r0, #0
   17848:	beq	1786c <__assert_fail@plt+0x6a78>
   1784c:	cmp	r1, #0
   17850:	beq	17878 <__assert_fail@plt+0x6a84>
   17854:	cmp	r1, #0
   17858:	blt	17884 <__assert_fail@plt+0x6a90>
   1785c:	bl	10c14 <realloc@plt>
   17860:	ldr	r4, [sp]
   17864:	add	sp, sp, #4
   17868:	pop	{pc}		; (ldr pc, [sp], #4)
   1786c:	mov	r0, r1
   17870:	bl	17800 <__assert_fail@plt+0x6a0c>
   17874:	b	17860 <__assert_fail@plt+0x6a6c>
   17878:	bl	13360 <__assert_fail@plt+0x256c>
   1787c:	mov	r0, #0
   17880:	b	17860 <__assert_fail@plt+0x6a6c>
   17884:	bl	10cf8 <__errno_location@plt>
   17888:	mov	r3, #12
   1788c:	str	r3, [r0]
   17890:	mov	r0, #0
   17894:	b	17860 <__assert_fail@plt+0x6a6c>
   17898:	mov	r2, #0
   1789c:	mov	r3, #0
   178a0:	strd	r2, [r0, #16]
   178a4:	movw	r3, #62998	; 0xf616
   178a8:	movt	r3, #149	; 0x95
   178ac:	str	r3, [r0, #24]
   178b0:	bx	lr
   178b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   178b8:	strd	r6, [sp, #8]
   178bc:	strd	r8, [sp, #16]
   178c0:	str	sl, [sp, #24]
   178c4:	str	lr, [sp, #28]
   178c8:	movw	r3, #62998	; 0xf616
   178cc:	movt	r3, #149	; 0x95
   178d0:	ldr	r2, [r0, #24]
   178d4:	cmp	r2, r3
   178d8:	bne	17934 <__assert_fail@plt+0x6b40>
   178dc:	ldrd	r6, [r0, #16]
   178e0:	orrs	r3, r6, r7
   178e4:	beq	17980 <__assert_fail@plt+0x6b8c>
   178e8:	ldrd	r4, [r1, #96]	; 0x60
   178ec:	ldrd	r2, [r0]
   178f0:	cmp	r5, r3
   178f4:	cmpeq	r4, r2
   178f8:	beq	17954 <__assert_fail@plt+0x6b60>
   178fc:	adds	r8, r6, #1
   17900:	adc	r9, r7, #0
   17904:	strd	r8, [r0, #16]
   17908:	and	r2, r6, r8
   1790c:	and	r3, r7, r9
   17910:	orrs	r3, r2, r3
   17914:	movne	r0, #0
   17918:	beq	17970 <__assert_fail@plt+0x6b7c>
   1791c:	ldrd	r4, [sp]
   17920:	ldrd	r6, [sp, #8]
   17924:	ldrd	r8, [sp, #16]
   17928:	ldr	sl, [sp, #24]
   1792c:	add	sp, sp, #28
   17930:	pop	{pc}		; (ldr pc, [sp], #4)
   17934:	movw	r3, #33324	; 0x822c
   17938:	movt	r3, #1
   1793c:	mov	r2, #60	; 0x3c
   17940:	movw	r1, #33336	; 0x8238
   17944:	movt	r1, #1
   17948:	movw	r0, #33352	; 0x8248
   1794c:	movt	r0, #1
   17950:	bl	10df4 <__assert_fail@plt>
   17954:	ldrd	r4, [r1]
   17958:	ldrd	r2, [r0, #8]
   1795c:	cmp	r5, r3
   17960:	cmpeq	r4, r2
   17964:	moveq	r0, #1
   17968:	bne	178fc <__assert_fail@plt+0x6b08>
   1796c:	b	1791c <__assert_fail@plt+0x6b28>
   17970:	orrs	r3, r8, r9
   17974:	moveq	r0, #1
   17978:	beq	1791c <__assert_fail@plt+0x6b28>
   1797c:	b	1798c <__assert_fail@plt+0x6b98>
   17980:	mov	r2, #1
   17984:	mov	r3, #0
   17988:	strd	r2, [r0, #16]
   1798c:	ldrd	r2, [r1]
   17990:	strd	r2, [r0, #8]
   17994:	ldrd	r2, [r1, #96]	; 0x60
   17998:	strd	r2, [r0]
   1799c:	mov	r0, #0
   179a0:	b	1791c <__assert_fail@plt+0x6b28>
   179a4:	push	{r1, r2, r3}
   179a8:	strd	r4, [sp, #-16]!
   179ac:	str	r6, [sp, #8]
   179b0:	str	lr, [sp, #12]
   179b4:	sub	sp, sp, #12
   179b8:	mov	r5, r0
   179bc:	ldr	r1, [sp, #28]
   179c0:	add	r3, sp, #32
   179c4:	str	r3, [sp, #4]
   179c8:	cmp	r1, #0
   179cc:	beq	17a14 <__assert_fail@plt+0x6c20>
   179d0:	movw	r3, #1030	; 0x406
   179d4:	cmp	r1, r3
   179d8:	beq	17a50 <__assert_fail@plt+0x6c5c>
   179dc:	cmp	r1, #11
   179e0:	beq	17c00 <__assert_fail@plt+0x6e0c>
   179e4:	bgt	17b8c <__assert_fail@plt+0x6d98>
   179e8:	cmp	r1, #3
   179ec:	beq	17c00 <__assert_fail@plt+0x6e0c>
   179f0:	ble	17b4c <__assert_fail@plt+0x6d58>
   179f4:	cmp	r1, #8
   179f8:	beq	17b6c <__assert_fail@plt+0x6d78>
   179fc:	ble	17b64 <__assert_fail@plt+0x6d70>
   17a00:	cmp	r1, #9
   17a04:	beq	17c00 <__assert_fail@plt+0x6e0c>
   17a08:	cmp	r1, #10
   17a0c:	bne	17bc4 <__assert_fail@plt+0x6dd0>
   17a10:	b	17b6c <__assert_fail@plt+0x6d78>
   17a14:	ldr	r3, [sp, #4]
   17a18:	add	r2, r3, #4
   17a1c:	str	r2, [sp, #4]
   17a20:	ldr	r2, [r3]
   17a24:	mov	r1, #0
   17a28:	bl	10d1c <fcntl64@plt>
   17a2c:	mov	r4, r0
   17a30:	mov	r0, r4
   17a34:	add	sp, sp, #12
   17a38:	ldrd	r4, [sp]
   17a3c:	ldr	r6, [sp, #8]
   17a40:	ldr	lr, [sp, #12]
   17a44:	add	sp, sp, #16
   17a48:	add	sp, sp, #12
   17a4c:	bx	lr
   17a50:	ldr	r3, [sp, #4]
   17a54:	add	r2, r3, #4
   17a58:	str	r2, [sp, #4]
   17a5c:	ldr	r6, [r3]
   17a60:	movw	r3, #37204	; 0x9154
   17a64:	movt	r3, #2
   17a68:	ldr	r3, [r3]
   17a6c:	cmp	r3, #0
   17a70:	blt	17ad8 <__assert_fail@plt+0x6ce4>
   17a74:	mov	r2, r6
   17a78:	movw	r1, #1030	; 0x406
   17a7c:	bl	10d1c <fcntl64@plt>
   17a80:	subs	r4, r0, #0
   17a84:	blt	17a9c <__assert_fail@plt+0x6ca8>
   17a88:	movw	r3, #37204	; 0x9154
   17a8c:	movt	r3, #2
   17a90:	mov	r2, #1
   17a94:	str	r2, [r3]
   17a98:	b	17a30 <__assert_fail@plt+0x6c3c>
   17a9c:	bl	10cf8 <__errno_location@plt>
   17aa0:	ldr	r3, [r0]
   17aa4:	cmp	r3, #22
   17aa8:	bne	17a88 <__assert_fail@plt+0x6c94>
   17aac:	mov	r2, r6
   17ab0:	mov	r1, #0
   17ab4:	mov	r0, r5
   17ab8:	bl	10d1c <fcntl64@plt>
   17abc:	subs	r4, r0, #0
   17ac0:	blt	17a30 <__assert_fail@plt+0x6c3c>
   17ac4:	movw	r3, #37204	; 0x9154
   17ac8:	movt	r3, #2
   17acc:	mvn	r2, #0
   17ad0:	str	r2, [r3]
   17ad4:	b	17b00 <__assert_fail@plt+0x6d0c>
   17ad8:	mov	r2, r6
   17adc:	mov	r1, #0
   17ae0:	bl	10d1c <fcntl64@plt>
   17ae4:	subs	r4, r0, #0
   17ae8:	blt	17a30 <__assert_fail@plt+0x6c3c>
   17aec:	movw	r3, #37204	; 0x9154
   17af0:	movt	r3, #2
   17af4:	ldr	r3, [r3]
   17af8:	cmn	r3, #1
   17afc:	bne	17a30 <__assert_fail@plt+0x6c3c>
   17b00:	mov	r1, #1
   17b04:	mov	r0, r4
   17b08:	bl	10d1c <fcntl64@plt>
   17b0c:	subs	r2, r0, #0
   17b10:	blt	17b2c <__assert_fail@plt+0x6d38>
   17b14:	orr	r2, r2, #1
   17b18:	mov	r1, #2
   17b1c:	mov	r0, r4
   17b20:	bl	10d1c <fcntl64@plt>
   17b24:	cmn	r0, #1
   17b28:	bne	17a30 <__assert_fail@plt+0x6c3c>
   17b2c:	bl	10cf8 <__errno_location@plt>
   17b30:	mov	r5, r0
   17b34:	ldr	r6, [r0]
   17b38:	mov	r0, r4
   17b3c:	bl	10dc4 <close@plt>
   17b40:	str	r6, [r5]
   17b44:	mvn	r4, #0
   17b48:	b	17a30 <__assert_fail@plt+0x6c3c>
   17b4c:	cmp	r1, #1
   17b50:	beq	17c00 <__assert_fail@plt+0x6e0c>
   17b54:	bgt	17b6c <__assert_fail@plt+0x6d78>
   17b58:	cmp	r1, #0
   17b5c:	bne	17bc4 <__assert_fail@plt+0x6dd0>
   17b60:	b	17b6c <__assert_fail@plt+0x6d78>
   17b64:	cmp	r1, #4
   17b68:	bne	17bc4 <__assert_fail@plt+0x6dd0>
   17b6c:	ldr	r3, [sp, #4]
   17b70:	add	r2, r3, #4
   17b74:	str	r2, [sp, #4]
   17b78:	ldr	r2, [r3]
   17b7c:	mov	r0, r5
   17b80:	bl	10d1c <fcntl64@plt>
   17b84:	mov	r4, r0
   17b88:	b	17a30 <__assert_fail@plt+0x6c3c>
   17b8c:	movw	r3, #1031	; 0x407
   17b90:	cmp	r1, r3
   17b94:	bgt	17be4 <__assert_fail@plt+0x6df0>
   17b98:	movw	r3, #1030	; 0x406
   17b9c:	cmp	r1, r3
   17ba0:	bge	17b6c <__assert_fail@plt+0x6d78>
   17ba4:	movw	r3, #1025	; 0x401
   17ba8:	cmp	r1, r3
   17bac:	beq	17c00 <__assert_fail@plt+0x6e0c>
   17bb0:	movw	r3, #1026	; 0x402
   17bb4:	cmp	r1, r3
   17bb8:	beq	17b6c <__assert_fail@plt+0x6d78>
   17bbc:	cmp	r1, #1024	; 0x400
   17bc0:	beq	17b6c <__assert_fail@plt+0x6d78>
   17bc4:	ldr	r3, [sp, #4]
   17bc8:	add	r2, r3, #4
   17bcc:	str	r2, [sp, #4]
   17bd0:	ldr	r2, [r3]
   17bd4:	mov	r0, r5
   17bd8:	bl	10d1c <fcntl64@plt>
   17bdc:	mov	r4, r0
   17be0:	b	17a30 <__assert_fail@plt+0x6c3c>
   17be4:	movw	r3, #1033	; 0x409
   17be8:	cmp	r1, r3
   17bec:	beq	17b6c <__assert_fail@plt+0x6d78>
   17bf0:	blt	17c00 <__assert_fail@plt+0x6e0c>
   17bf4:	movw	r3, #1034	; 0x40a
   17bf8:	cmp	r1, r3
   17bfc:	bne	17bc4 <__assert_fail@plt+0x6dd0>
   17c00:	mov	r0, r5
   17c04:	bl	10d1c <fcntl64@plt>
   17c08:	mov	r4, r0
   17c0c:	b	17a30 <__assert_fail@plt+0x6c3c>
   17c10:	push	{r1, r2, r3}
   17c14:	push	{lr}		; (str lr, [sp, #-4]!)
   17c18:	sub	sp, sp, #8
   17c1c:	ldr	r1, [sp, #12]
   17c20:	tst	r1, #64	; 0x40
   17c24:	addne	r3, sp, #20
   17c28:	strne	r3, [sp, #4]
   17c2c:	ldrne	r2, [sp, #16]
   17c30:	moveq	r2, #0
   17c34:	bl	10c74 <open64@plt>
   17c38:	bl	17730 <__assert_fail@plt+0x693c>
   17c3c:	add	sp, sp, #8
   17c40:	pop	{lr}		; (ldr lr, [sp], #4)
   17c44:	add	sp, sp, #12
   17c48:	bx	lr
   17c4c:	str	r4, [sp, #-8]!
   17c50:	str	lr, [sp, #4]
   17c54:	mov	r2, #3
   17c58:	mov	r1, #0
   17c5c:	bl	179a4 <__assert_fail@plt+0x6bb0>
   17c60:	ldr	r4, [sp]
   17c64:	add	sp, sp, #4
   17c68:	pop	{pc}		; (ldr pc, [sp], #4)
   17c6c:	cmp	r3, #0
   17c70:	cmpeq	r2, #0
   17c74:	bne	17c98 <__assert_fail@plt+0x6ea4>
   17c78:	cmp	r1, #0
   17c7c:	movlt	r1, #-2147483648	; 0x80000000
   17c80:	movlt	r0, #0
   17c84:	blt	17c94 <__assert_fail@plt+0x6ea0>
   17c88:	cmpeq	r0, #0
   17c8c:	mvnne	r1, #-2147483648	; 0x80000000
   17c90:	mvnne	r0, #0
   17c94:	b	17d7c <__assert_fail@plt+0x6f88>
   17c98:	sub	sp, sp, #8
   17c9c:	push	{sp, lr}
   17ca0:	cmp	r1, #0
   17ca4:	blt	17cc4 <__assert_fail@plt+0x6ed0>
   17ca8:	cmp	r3, #0
   17cac:	blt	17cf8 <__assert_fail@plt+0x6f04>
   17cb0:	bl	17d8c <__assert_fail@plt+0x6f98>
   17cb4:	ldr	lr, [sp, #4]
   17cb8:	add	sp, sp, #8
   17cbc:	pop	{r2, r3}
   17cc0:	bx	lr
   17cc4:	rsbs	r0, r0, #0
   17cc8:	sbc	r1, r1, r1, lsl #1
   17ccc:	cmp	r3, #0
   17cd0:	blt	17d1c <__assert_fail@plt+0x6f28>
   17cd4:	bl	17d8c <__assert_fail@plt+0x6f98>
   17cd8:	ldr	lr, [sp, #4]
   17cdc:	add	sp, sp, #8
   17ce0:	pop	{r2, r3}
   17ce4:	rsbs	r0, r0, #0
   17ce8:	sbc	r1, r1, r1, lsl #1
   17cec:	rsbs	r2, r2, #0
   17cf0:	sbc	r3, r3, r3, lsl #1
   17cf4:	bx	lr
   17cf8:	rsbs	r2, r2, #0
   17cfc:	sbc	r3, r3, r3, lsl #1
   17d00:	bl	17d8c <__assert_fail@plt+0x6f98>
   17d04:	ldr	lr, [sp, #4]
   17d08:	add	sp, sp, #8
   17d0c:	pop	{r2, r3}
   17d10:	rsbs	r0, r0, #0
   17d14:	sbc	r1, r1, r1, lsl #1
   17d18:	bx	lr
   17d1c:	rsbs	r2, r2, #0
   17d20:	sbc	r3, r3, r3, lsl #1
   17d24:	bl	17d8c <__assert_fail@plt+0x6f98>
   17d28:	ldr	lr, [sp, #4]
   17d2c:	add	sp, sp, #8
   17d30:	pop	{r2, r3}
   17d34:	rsbs	r2, r2, #0
   17d38:	sbc	r3, r3, r3, lsl #1
   17d3c:	bx	lr
   17d40:	cmp	r3, #0
   17d44:	cmpeq	r2, #0
   17d48:	bne	17d60 <__assert_fail@plt+0x6f6c>
   17d4c:	cmp	r1, #0
   17d50:	cmpeq	r0, #0
   17d54:	mvnne	r1, #0
   17d58:	mvnne	r0, #0
   17d5c:	b	17d7c <__assert_fail@plt+0x6f88>
   17d60:	sub	sp, sp, #8
   17d64:	push	{sp, lr}
   17d68:	bl	17d8c <__assert_fail@plt+0x6f98>
   17d6c:	ldr	lr, [sp, #4]
   17d70:	add	sp, sp, #8
   17d74:	pop	{r2, r3}
   17d78:	bx	lr
   17d7c:	push	{r1, lr}
   17d80:	mov	r0, #8
   17d84:	bl	10b90 <raise@plt>
   17d88:	pop	{r1, pc}
   17d8c:	cmp	r1, r3
   17d90:	cmpeq	r0, r2
   17d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d98:	mov	r4, r0
   17d9c:	movcc	r0, #0
   17da0:	mov	r5, r1
   17da4:	ldr	lr, [sp, #36]	; 0x24
   17da8:	movcc	r1, r0
   17dac:	bcc	17ea8 <__assert_fail@plt+0x70b4>
   17db0:	cmp	r3, #0
   17db4:	clzeq	ip, r2
   17db8:	clzne	ip, r3
   17dbc:	addeq	ip, ip, #32
   17dc0:	cmp	r5, #0
   17dc4:	clzeq	r1, r4
   17dc8:	addeq	r1, r1, #32
   17dcc:	clzne	r1, r5
   17dd0:	sub	ip, ip, r1
   17dd4:	sub	sl, ip, #32
   17dd8:	lsl	r9, r3, ip
   17ddc:	rsb	fp, ip, #32
   17de0:	orr	r9, r9, r2, lsl sl
   17de4:	orr	r9, r9, r2, lsr fp
   17de8:	lsl	r8, r2, ip
   17dec:	cmp	r5, r9
   17df0:	cmpeq	r4, r8
   17df4:	movcc	r0, #0
   17df8:	movcc	r1, r0
   17dfc:	bcc	17e18 <__assert_fail@plt+0x7024>
   17e00:	mov	r0, #1
   17e04:	subs	r4, r4, r8
   17e08:	lsl	r1, r0, sl
   17e0c:	orr	r1, r1, r0, lsr fp
   17e10:	lsl	r0, r0, ip
   17e14:	sbc	r5, r5, r9
   17e18:	cmp	ip, #0
   17e1c:	beq	17ea8 <__assert_fail@plt+0x70b4>
   17e20:	lsr	r6, r8, #1
   17e24:	orr	r6, r6, r9, lsl #31
   17e28:	lsr	r7, r9, #1
   17e2c:	mov	r2, ip
   17e30:	b	17e54 <__assert_fail@plt+0x7060>
   17e34:	subs	r3, r4, r6
   17e38:	sbc	r8, r5, r7
   17e3c:	adds	r3, r3, r3
   17e40:	adc	r8, r8, r8
   17e44:	adds	r4, r3, #1
   17e48:	adc	r5, r8, #0
   17e4c:	subs	r2, r2, #1
   17e50:	beq	17e70 <__assert_fail@plt+0x707c>
   17e54:	cmp	r5, r7
   17e58:	cmpeq	r4, r6
   17e5c:	bcs	17e34 <__assert_fail@plt+0x7040>
   17e60:	adds	r4, r4, r4
   17e64:	adc	r5, r5, r5
   17e68:	subs	r2, r2, #1
   17e6c:	bne	17e54 <__assert_fail@plt+0x7060>
   17e70:	lsr	r3, r4, ip
   17e74:	orr	r3, r3, r5, lsl fp
   17e78:	lsr	r2, r5, ip
   17e7c:	orr	r3, r3, r5, lsr sl
   17e80:	adds	r0, r0, r4
   17e84:	mov	r4, r3
   17e88:	lsl	r3, r2, ip
   17e8c:	orr	r3, r3, r4, lsl sl
   17e90:	lsl	ip, r4, ip
   17e94:	orr	r3, r3, r4, lsr fp
   17e98:	adc	r1, r1, r5
   17e9c:	subs	r0, r0, ip
   17ea0:	mov	r5, r2
   17ea4:	sbc	r1, r1, r3
   17ea8:	cmp	lr, #0
   17eac:	strdne	r4, [lr]
   17eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17eb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17eb8:	mov	r7, r0
   17ebc:	ldr	r6, [pc, #72]	; 17f0c <__assert_fail@plt+0x7118>
   17ec0:	ldr	r5, [pc, #72]	; 17f10 <__assert_fail@plt+0x711c>
   17ec4:	add	r6, pc, r6
   17ec8:	add	r5, pc, r5
   17ecc:	sub	r6, r6, r5
   17ed0:	mov	r8, r1
   17ed4:	mov	r9, r2
   17ed8:	bl	10b58 <fstatfs64@plt-0x20>
   17edc:	asrs	r6, r6, #2
   17ee0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ee4:	mov	r4, #0
   17ee8:	add	r4, r4, #1
   17eec:	ldr	r3, [r5], #4
   17ef0:	mov	r2, r9
   17ef4:	mov	r1, r8
   17ef8:	mov	r0, r7
   17efc:	blx	r3
   17f00:	cmp	r6, r4
   17f04:	bne	17ee8 <__assert_fail@plt+0x70f4>
   17f08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f0c:	andeq	r1, r1, r8, asr #32
   17f10:	andeq	r1, r1, r0, asr #32
   17f14:	bx	lr

Disassembly of section .fini:

00017f18 <.fini>:
   17f18:	push	{r3, lr}
   17f1c:	pop	{r3, pc}
