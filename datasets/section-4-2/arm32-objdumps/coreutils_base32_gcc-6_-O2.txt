
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11618 <__assert_fail@plt+0x6e8>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r6, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f40:	mov	r7, r0
   10f44:	sub	sp, sp, #60	; 0x3c
   10f48:	ldr	r0, [r1]
   10f4c:	mov	r5, r1
   10f50:	bl	125fc <__assert_fail@plt+0x16cc>
   10f54:	ldr	r1, [pc, #1564]	; 11578 <__assert_fail@plt+0x648>
   10f58:	mov	r0, #6
   10f5c:	bl	10ec4 <setlocale@plt>
   10f60:	ldr	r1, [pc, #1556]	; 1157c <__assert_fail@plt+0x64c>
   10f64:	ldr	r0, [pc, #1556]	; 11580 <__assert_fail@plt+0x650>
   10f68:	bl	10f00 <bindtextdomain@plt>
   10f6c:	mov	sl, #0
   10f70:	ldr	r0, [pc, #1544]	; 11580 <__assert_fail@plt+0x650>
   10f74:	ldr	r9, [pc, #1544]	; 11584 <__assert_fail@plt+0x654>
   10f78:	ldr	r8, [pc, #1544]	; 11588 <__assert_fail@plt+0x658>
   10f7c:	ldr	fp, [pc, #1544]	; 1158c <__assert_fail@plt+0x65c>
   10f80:	bl	10d80 <textdomain@plt>
   10f84:	mov	r6, sl
   10f88:	ldr	r0, [pc, #1536]	; 11590 <__assert_fail@plt+0x660>
   10f8c:	bl	15f7c <__assert_fail@plt+0x504c>
   10f90:	mov	r3, #76	; 0x4c
   10f94:	str	r3, [sp, #12]
   10f98:	mov	r4, #0
   10f9c:	str	r4, [sp]
   10fa0:	mov	r3, r9
   10fa4:	mov	r2, r8
   10fa8:	mov	r1, r5
   10fac:	mov	r0, r7
   10fb0:	bl	10e10 <getopt_long@plt>
   10fb4:	cmn	r0, #1
   10fb8:	beq	11088 <__assert_fail@plt+0x158>
   10fbc:	cmp	r0, #100	; 0x64
   10fc0:	beq	110dc <__assert_fail@plt+0x1ac>
   10fc4:	bgt	10fe0 <__assert_fail@plt+0xb0>
   10fc8:	cmn	r0, #3
   10fcc:	beq	11050 <__assert_fail@plt+0x120>
   10fd0:	cmn	r0, #2
   10fd4:	bne	110d4 <__assert_fail@plt+0x1a4>
   10fd8:	mov	r0, r4
   10fdc:	bl	11790 <__assert_fail@plt+0x860>
   10fe0:	cmp	r0, #105	; 0x69
   10fe4:	beq	11080 <__assert_fail@plt+0x150>
   10fe8:	cmp	r0, #119	; 0x77
   10fec:	bne	110d4 <__assert_fail@plt+0x1a4>
   10ff0:	ldr	r3, [pc, #1408]	; 11578 <__assert_fail@plt+0x648>
   10ff4:	mov	r1, r4
   10ff8:	str	r3, [sp]
   10ffc:	mov	r2, #10
   11000:	add	r3, sp, #40	; 0x28
   11004:	ldr	r0, [fp]
   11008:	bl	150cc <__assert_fail@plt+0x419c>
   1100c:	cmp	r0, #1
   11010:	bhi	112b8 <__assert_fail@plt+0x388>
   11014:	ldrd	r2, [sp, #40]	; 0x28
   11018:	cmp	r2, #0
   1101c:	sbcs	r1, r3, #0
   11020:	blt	112b8 <__assert_fail@plt+0x388>
   11024:	eor	ip, r0, #1
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	cmp	r0, r2
   11030:	mov	r1, #0
   11034:	sbcs	r1, r1, r3
   11038:	movlt	r0, #0
   1103c:	andge	r0, ip, #1
   11040:	cmp	r0, #0
   11044:	moveq	r2, #0
   11048:	str	r2, [sp, #12]
   1104c:	b	10f98 <__assert_fail@plt+0x68>
   11050:	ldr	r1, [pc, #1340]	; 11594 <__assert_fail@plt+0x664>
   11054:	ldr	r3, [pc, #1340]	; 11598 <__assert_fail@plt+0x668>
   11058:	ldr	r2, [pc, #1340]	; 1159c <__assert_fail@plt+0x66c>
   1105c:	str	r4, [sp, #4]
   11060:	ldr	r0, [r1]
   11064:	ldr	r3, [r3]
   11068:	ldr	r1, [pc, #1328]	; 115a0 <__assert_fail@plt+0x670>
   1106c:	str	r2, [sp]
   11070:	ldr	r2, [pc, #1324]	; 115a4 <__assert_fail@plt+0x674>
   11074:	bl	148f8 <__assert_fail@plt+0x39c8>
   11078:	mov	r0, r4
   1107c:	bl	10e28 <exit@plt>
   11080:	mov	sl, #1
   11084:	b	10f98 <__assert_fail@plt+0x68>
   11088:	ldr	r8, [pc, #1304]	; 115a8 <__assert_fail@plt+0x678>
   1108c:	ldr	r3, [r8]
   11090:	sub	r2, r7, r3
   11094:	cmp	r2, #1
   11098:	ble	110e4 <__assert_fail@plt+0x1b4>
   1109c:	mov	r2, #5
   110a0:	ldr	r1, [pc, #1284]	; 115ac <__assert_fail@plt+0x67c>
   110a4:	mov	r0, r4
   110a8:	bl	10d68 <dcgettext@plt>
   110ac:	ldr	r3, [r8]
   110b0:	add	r3, r3, #1
   110b4:	mov	r6, r0
   110b8:	ldr	r0, [r5, r3, lsl #2]
   110bc:	bl	144bc <__assert_fail@plt+0x358c>
   110c0:	mov	r2, r6
   110c4:	mov	r1, r4
   110c8:	mov	r3, r0
   110cc:	mov	r0, r4
   110d0:	bl	10dd4 <error@plt>
   110d4:	mov	r0, #1
   110d8:	bl	11790 <__assert_fail@plt+0x860>
   110dc:	mov	r6, #1
   110e0:	b	10f98 <__assert_fail@plt+0x68>
   110e4:	cmp	r7, r3
   110e8:	ble	112a4 <__assert_fail@plt+0x374>
   110ec:	ldr	r3, [r5, r3, lsl #2]
   110f0:	ldr	r1, [pc, #1208]	; 115b0 <__assert_fail@plt+0x680>
   110f4:	mov	r0, r3
   110f8:	str	r3, [sp, #28]
   110fc:	bl	10ce4 <strcmp@plt>
   11100:	cmp	r0, #0
   11104:	beq	112ac <__assert_fail@plt+0x37c>
   11108:	ldr	r1, [pc, #1188]	; 115b4 <__assert_fail@plt+0x684>
   1110c:	ldr	r0, [sp, #28]
   11110:	bl	10ef4 <fopen64@plt>
   11114:	subs	fp, r0, #0
   11118:	beq	11524 <__assert_fail@plt+0x5f4>
   1111c:	mov	r1, #2
   11120:	mov	r0, fp
   11124:	bl	123d0 <__assert_fail@plt+0x14a0>
   11128:	cmp	r6, #0
   1112c:	beq	112ec <__assert_fail@plt+0x3bc>
   11130:	ldr	r3, [pc, #1116]	; 11594 <__assert_fail@plt+0x664>
   11134:	mov	r0, #8192	; 0x2000
   11138:	ldr	r3, [r3]
   1113c:	str	r3, [sp, #16]
   11140:	bl	149f4 <__assert_fail@plt+0x3ac4>
   11144:	mov	r5, r0
   11148:	mov	r0, #5120	; 0x1400
   1114c:	bl	149f4 <__assert_fail@plt+0x3ac4>
   11150:	str	r0, [sp, #20]
   11154:	add	r0, sp, #40	; 0x28
   11158:	bl	11fd4 <__assert_fail@plt+0x10a4>
   1115c:	str	sl, [sp, #12]
   11160:	ldr	sl, [sp, #12]
   11164:	mov	r4, #0
   11168:	add	r9, r5, r4
   1116c:	mov	r0, r9
   11170:	mov	r3, fp
   11174:	rsb	r2, r4, #8192	; 0x2000
   11178:	mov	r1, #1
   1117c:	bl	10f0c <fread_unlocked@plt>
   11180:	cmp	sl, #0
   11184:	mov	r8, r0
   11188:	beq	111dc <__assert_fail@plt+0x2ac>
   1118c:	cmp	r0, #0
   11190:	ble	111dc <__assert_fail@plt+0x2ac>
   11194:	mov	r7, #0
   11198:	ldrb	r6, [r9, r7]
   1119c:	mov	r0, r6
   111a0:	bl	11fbc <__assert_fail@plt+0x108c>
   111a4:	cmp	r6, #61	; 0x3d
   111a8:	orreq	r0, r0, #1
   111ac:	tst	r0, #255	; 0xff
   111b0:	addne	r7, r7, #1
   111b4:	bne	111d4 <__assert_fail@plt+0x2a4>
   111b8:	add	r0, r7, r4
   111bc:	add	r1, r0, #1
   111c0:	sub	r8, r8, #1
   111c4:	add	r1, r5, r1
   111c8:	add	r0, r5, r0
   111cc:	sub	r2, r8, r7
   111d0:	bl	10d08 <memmove@plt>
   111d4:	cmp	r8, r7
   111d8:	bgt	11198 <__assert_fail@plt+0x268>
   111dc:	ldr	r3, [fp]
   111e0:	add	r4, r4, r8
   111e4:	ands	r9, r3, #32
   111e8:	bne	114dc <__assert_fail@plt+0x5ac>
   111ec:	ldr	r2, [pc, #964]	; 115b8 <__assert_fail@plt+0x688>
   111f0:	cmp	r4, r2
   111f4:	bgt	11200 <__assert_fail@plt+0x2d0>
   111f8:	tst	r3, #16
   111fc:	beq	11168 <__assert_fail@plt+0x238>
   11200:	mov	r6, r9
   11204:	ldr	sl, [sp, #16]
   11208:	ldr	r7, [sp, #20]
   1120c:	b	11270 <__assert_fail@plt+0x340>
   11210:	cmp	r6, #0
   11214:	bne	11160 <__assert_fail@plt+0x230>
   11218:	mov	r2, r4
   1121c:	mov	r3, #5120	; 0x1400
   11220:	str	r3, [sp, #36]	; 0x24
   11224:	add	r3, sp, #36	; 0x24
   11228:	str	r3, [sp]
   1122c:	mov	r1, r5
   11230:	mov	r3, r7
   11234:	add	r0, sp, #40	; 0x28
   11238:	bl	11fe0 <__assert_fail@plt+0x10b0>
   1123c:	mov	r3, sl
   11240:	ldr	r2, [sp, #36]	; 0x24
   11244:	mov	r1, #1
   11248:	mov	r8, r0
   1124c:	mov	r0, r7
   11250:	bl	10d44 <fwrite_unlocked@plt>
   11254:	ldr	r3, [sp, #36]	; 0x24
   11258:	cmp	r0, r3
   1125c:	bcc	114b4 <__assert_fail@plt+0x584>
   11260:	cmp	r8, #0
   11264:	beq	114ec <__assert_fail@plt+0x5bc>
   11268:	ldr	r3, [fp]
   1126c:	add	r6, r6, #1
   11270:	tst	r3, #16
   11274:	beq	11210 <__assert_fail@plt+0x2e0>
   11278:	cmp	r6, #2
   1127c:	beq	1138c <__assert_fail@plt+0x45c>
   11280:	cmp	r6, #1
   11284:	bne	11218 <__assert_fail@plt+0x2e8>
   11288:	ldr	r3, [sp, #40]	; 0x28
   1128c:	cmp	r3, #0
   11290:	beq	1138c <__assert_fail@plt+0x45c>
   11294:	mov	r3, #5120	; 0x1400
   11298:	str	r3, [sp, #36]	; 0x24
   1129c:	mov	r2, r9
   112a0:	b	11224 <__assert_fail@plt+0x2f4>
   112a4:	ldr	r3, [pc, #772]	; 115b0 <__assert_fail@plt+0x680>
   112a8:	str	r3, [sp, #28]
   112ac:	ldr	r3, [pc, #776]	; 115bc <__assert_fail@plt+0x68c>
   112b0:	ldr	fp, [r3]
   112b4:	b	1111c <__assert_fail@plt+0x1ec>
   112b8:	mov	r2, #5
   112bc:	ldr	r1, [pc, #764]	; 115c0 <__assert_fail@plt+0x690>
   112c0:	mov	r0, #0
   112c4:	bl	10d68 <dcgettext@plt>
   112c8:	mov	r4, r0
   112cc:	ldr	r0, [fp]
   112d0:	bl	144bc <__assert_fail@plt+0x358c>
   112d4:	mov	r3, r4
   112d8:	ldr	r2, [pc, #740]	; 115c4 <__assert_fail@plt+0x694>
   112dc:	mov	r1, #0
   112e0:	str	r0, [sp]
   112e4:	mov	r0, #1
   112e8:	bl	10dd4 <error@plt>
   112ec:	ldr	r3, [pc, #672]	; 11594 <__assert_fail@plt+0x664>
   112f0:	mov	r0, #30720	; 0x7800
   112f4:	ldr	r9, [r3]
   112f8:	bl	149f4 <__assert_fail@plt+0x3ac4>
   112fc:	mov	sl, r0
   11300:	mov	r0, #49152	; 0xc000
   11304:	bl	149f4 <__assert_fail@plt+0x3ac4>
   11308:	str	r0, [sp, #16]
   1130c:	mov	r5, #0
   11310:	mov	r4, #1
   11314:	b	11324 <__assert_fail@plt+0x3f4>
   11318:	ldr	r3, [pc, #680]	; 115c8 <__assert_fail@plt+0x698>
   1131c:	cmp	r5, r3
   11320:	bgt	11398 <__assert_fail@plt+0x468>
   11324:	mov	r3, fp
   11328:	rsb	r2, r5, #30720	; 0x7800
   1132c:	add	r0, sl, r5
   11330:	mov	r1, r4
   11334:	bl	10f0c <fread_unlocked@plt>
   11338:	ldr	r3, [fp]
   1133c:	tst	r3, #48	; 0x30
   11340:	add	r5, r5, r0
   11344:	beq	11318 <__assert_fail@plt+0x3e8>
   11348:	cmp	r5, #0
   1134c:	bgt	11398 <__assert_fail@plt+0x468>
   11350:	ldr	r2, [sp, #12]
   11354:	cmp	r2, #0
   11358:	cmpne	r6, #0
   1135c:	ble	11384 <__assert_fail@plt+0x454>
   11360:	ldr	r3, [r9, #20]
   11364:	ldr	r2, [r9, #24]
   11368:	cmp	r3, r2
   1136c:	addcc	r1, r3, #1
   11370:	movcc	r2, #10
   11374:	strcc	r1, [r9, #20]
   11378:	strbcc	r2, [r3]
   1137c:	bcs	1150c <__assert_fail@plt+0x5dc>
   11380:	ldr	r3, [fp]
   11384:	tst	r3, #32
   11388:	bne	114dc <__assert_fail@plt+0x5ac>
   1138c:	ldr	r1, [sp, #28]
   11390:	mov	r0, fp
   11394:	bl	11704 <__assert_fail@plt+0x7d4>
   11398:	mov	r1, #5
   1139c:	add	r0, r5, #4
   113a0:	bl	15acc <__assert_fail@plt+0x4b9c>
   113a4:	ldr	r2, [sp, #16]
   113a8:	mov	r1, r5
   113ac:	lsl	r8, r0, #3
   113b0:	mov	r3, r8
   113b4:	mov	r0, sl
   113b8:	bl	11cb8 <__assert_fail@plt+0xd88>
   113bc:	ldr	r3, [sp, #12]
   113c0:	cmp	r3, #0
   113c4:	beq	11494 <__assert_fail@plt+0x564>
   113c8:	cmp	r8, #0
   113cc:	ble	11460 <__assert_fail@plt+0x530>
   113d0:	str	fp, [sp, #20]
   113d4:	str	sl, [sp, #24]
   113d8:	mov	r7, #0
   113dc:	ldr	sl, [sp, #12]
   113e0:	ldr	fp, [sp, #16]
   113e4:	b	11414 <__assert_fail@plt+0x4e4>
   113e8:	ldr	r3, [r9, #20]
   113ec:	ldr	r2, [r9, #24]
   113f0:	cmp	r3, r2
   113f4:	bcs	11478 <__assert_fail@plt+0x548>
   113f8:	add	r2, r3, #1
   113fc:	mov	r6, r4
   11400:	str	r2, [r9, #20]
   11404:	mov	r2, #10
   11408:	strb	r2, [r3]
   1140c:	cmp	r8, r7
   11410:	ble	11458 <__assert_fail@plt+0x528>
   11414:	sub	r4, r8, r7
   11418:	sub	r3, sl, r6
   1141c:	cmp	r4, r3
   11420:	movge	r4, r3
   11424:	cmp	r4, #0
   11428:	beq	113e8 <__assert_fail@plt+0x4b8>
   1142c:	ldr	r3, [pc, #352]	; 11594 <__assert_fail@plt+0x664>
   11430:	mov	r2, r4
   11434:	mov	r1, #1
   11438:	ldr	r3, [r3]
   1143c:	add	r0, fp, r7
   11440:	bl	10d44 <fwrite_unlocked@plt>
   11444:	cmp	r4, r0
   11448:	bhi	114b4 <__assert_fail@plt+0x584>
   1144c:	add	r6, r6, r4
   11450:	add	r7, r7, r4
   11454:	b	1140c <__assert_fail@plt+0x4dc>
   11458:	ldr	fp, [sp, #20]
   1145c:	ldr	sl, [sp, #24]
   11460:	ldr	r3, [fp]
   11464:	and	r2, r3, #48	; 0x30
   11468:	cmp	r5, #30720	; 0x7800
   1146c:	cmpeq	r2, #0
   11470:	beq	1130c <__assert_fail@plt+0x3dc>
   11474:	b	11350 <__assert_fail@plt+0x420>
   11478:	mov	r1, #10
   1147c:	mov	r0, r9
   11480:	bl	10eb8 <__overflow@plt>
   11484:	cmn	r0, #1
   11488:	beq	11550 <__assert_fail@plt+0x620>
   1148c:	mov	r6, r4
   11490:	b	1140c <__assert_fail@plt+0x4dc>
   11494:	ldr	r3, [pc, #248]	; 11594 <__assert_fail@plt+0x664>
   11498:	mov	r2, r8
   1149c:	mov	r1, #1
   114a0:	ldr	r3, [r3]
   114a4:	ldr	r0, [sp, #16]
   114a8:	bl	10d44 <fwrite_unlocked@plt>
   114ac:	cmp	r8, r0
   114b0:	bls	11460 <__assert_fail@plt+0x530>
   114b4:	bl	10e4c <__errno_location@plt>
   114b8:	ldr	r1, [pc, #268]	; 115cc <__assert_fail@plt+0x69c>
   114bc:	mov	r2, #5
   114c0:	ldr	r4, [r0]
   114c4:	mov	r0, #0
   114c8:	bl	10d68 <dcgettext@plt>
   114cc:	mov	r1, r4
   114d0:	mov	r2, r0
   114d4:	mov	r0, #1
   114d8:	bl	10dd4 <error@plt>
   114dc:	bl	10e4c <__errno_location@plt>
   114e0:	mov	r2, #5
   114e4:	ldr	r1, [pc, #228]	; 115d0 <__assert_fail@plt+0x6a0>
   114e8:	b	114c0 <__assert_fail@plt+0x590>
   114ec:	mov	r2, #5
   114f0:	ldr	r1, [pc, #220]	; 115d4 <__assert_fail@plt+0x6a4>
   114f4:	mov	r0, r8
   114f8:	bl	10d68 <dcgettext@plt>
   114fc:	mov	r1, r8
   11500:	mov	r2, r0
   11504:	mov	r0, #1
   11508:	bl	10dd4 <error@plt>
   1150c:	mov	r0, r9
   11510:	mov	r1, #10
   11514:	bl	10eb8 <__overflow@plt>
   11518:	cmn	r0, #1
   1151c:	beq	114b4 <__assert_fail@plt+0x584>
   11520:	b	11380 <__assert_fail@plt+0x450>
   11524:	bl	10e4c <__errno_location@plt>
   11528:	ldr	r2, [sp, #28]
   1152c:	mov	r1, #3
   11530:	ldr	r4, [r0]
   11534:	mov	r0, fp
   11538:	bl	14338 <__assert_fail@plt+0x3408>
   1153c:	mov	r1, r4
   11540:	ldr	r2, [pc, #144]	; 115d8 <__assert_fail@plt+0x6a8>
   11544:	mov	r3, r0
   11548:	mov	r0, #1
   1154c:	bl	10dd4 <error@plt>
   11550:	bl	10e4c <__errno_location@plt>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #108]	; 115cc <__assert_fail@plt+0x69c>
   1155c:	ldr	r5, [r0]
   11560:	mov	r0, r4
   11564:	bl	10d68 <dcgettext@plt>
   11568:	mov	r1, r5
   1156c:	mov	r2, r0
   11570:	mov	r0, #1
   11574:	bl	10dd4 <error@plt>
   11578:	muleq	r1, r0, r2
   1157c:	andeq	r6, r1, r4, asr #9
   11580:	andeq	r6, r1, ip, lsl r4
   11584:	ldrdeq	r5, [r1], -r8
   11588:	andeq	r6, r1, r8, lsl #10
   1158c:	andeq	r7, r2, r8, asr r1
   11590:	andeq	r2, r1, r0, ror #5
   11594:	andeq	r7, r2, r4, asr r1
   11598:	andeq	r7, r2, ip, ror #1
   1159c:	strdeq	r6, [r1], -r8
   115a0:	andeq	r6, r1, r4, asr r0
   115a4:	andeq	r6, r1, r8, lsl r4
   115a8:	andeq	r7, r2, r0, asr #2
   115ac:	andeq	r6, r1, r0, lsl r5
   115b0:	andeq	r6, r1, r8, lsr r0
   115b4:	andeq	r6, r1, r4, lsr #10
   115b8:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   115bc:	andeq	r7, r2, r0, asr r1
   115c0:	ldrdeq	r6, [r1], -ip
   115c4:	strdeq	r6, [r1], -r0
   115c8:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   115cc:	andeq	r6, r1, r4, lsr r5
   115d0:	andeq	r6, r1, r8, lsr #10
   115d4:	andeq	r6, r1, r0, asr #10
   115d8:	strdeq	r6, [r1], -r4
   115dc:	mov	fp, #0
   115e0:	mov	lr, #0
   115e4:	pop	{r1}		; (ldr r1, [sp], #4)
   115e8:	mov	r2, sp
   115ec:	push	{r2}		; (str r2, [sp, #-4]!)
   115f0:	push	{r0}		; (str r0, [sp, #-4]!)
   115f4:	ldr	ip, [pc, #16]	; 1160c <__assert_fail@plt+0x6dc>
   115f8:	push	{ip}		; (str ip, [sp, #-4]!)
   115fc:	ldr	r0, [pc, #12]	; 11610 <__assert_fail@plt+0x6e0>
   11600:	ldr	r3, [pc, #12]	; 11614 <__assert_fail@plt+0x6e4>
   11604:	bl	10dec <__libc_start_main@plt>
   11608:	bl	10f24 <abort@plt>
   1160c:	andeq	r5, r1, r8, ror pc
   11610:	andeq	r0, r1, ip, lsr pc
   11614:	andeq	r5, r1, r8, lsl pc
   11618:	ldr	r3, [pc, #20]	; 11634 <__assert_fail@plt+0x704>
   1161c:	ldr	r2, [pc, #20]	; 11638 <__assert_fail@plt+0x708>
   11620:	add	r3, pc, r3
   11624:	ldr	r2, [r3, r2]
   11628:	cmp	r2, #0
   1162c:	bxeq	lr
   11630:	b	10e04 <__gmon_start__@plt>
   11634:	ldrdeq	r5, [r1], -r8
   11638:	andeq	r0, r0, r0, ror #1
   1163c:	ldr	r3, [pc, #28]	; 11660 <__assert_fail@plt+0x730>
   11640:	ldr	r0, [pc, #28]	; 11664 <__assert_fail@plt+0x734>
   11644:	sub	r3, r3, r0
   11648:	cmp	r3, #6
   1164c:	bxls	lr
   11650:	ldr	r3, [pc, #16]	; 11668 <__assert_fail@plt+0x738>
   11654:	cmp	r3, #0
   11658:	bxeq	lr
   1165c:	bx	r3
   11660:	andeq	r7, r2, r7, lsr r1
   11664:	andeq	r7, r2, r4, lsr r1
   11668:	andeq	r0, r0, r0
   1166c:	ldr	r1, [pc, #36]	; 11698 <__assert_fail@plt+0x768>
   11670:	ldr	r0, [pc, #36]	; 1169c <__assert_fail@plt+0x76c>
   11674:	sub	r1, r1, r0
   11678:	asr	r1, r1, #2
   1167c:	add	r1, r1, r1, lsr #31
   11680:	asrs	r1, r1, #1
   11684:	bxeq	lr
   11688:	ldr	r3, [pc, #16]	; 116a0 <__assert_fail@plt+0x770>
   1168c:	cmp	r3, #0
   11690:	bxeq	lr
   11694:	bx	r3
   11698:	andeq	r7, r2, r4, lsr r1
   1169c:	andeq	r7, r2, r4, lsr r1
   116a0:	andeq	r0, r0, r0
   116a4:	push	{r4, lr}
   116a8:	ldr	r4, [pc, #24]	; 116c8 <__assert_fail@plt+0x798>
   116ac:	ldrb	r3, [r4]
   116b0:	cmp	r3, #0
   116b4:	popne	{r4, pc}
   116b8:	bl	1163c <__assert_fail@plt+0x70c>
   116bc:	mov	r3, #1
   116c0:	strb	r3, [r4]
   116c4:	pop	{r4, pc}
   116c8:	andeq	r7, r2, ip, asr r1
   116cc:	ldr	r0, [pc, #40]	; 116fc <__assert_fail@plt+0x7cc>
   116d0:	ldr	r3, [r0]
   116d4:	cmp	r3, #0
   116d8:	bne	116e0 <__assert_fail@plt+0x7b0>
   116dc:	b	1166c <__assert_fail@plt+0x73c>
   116e0:	ldr	r3, [pc, #24]	; 11700 <__assert_fail@plt+0x7d0>
   116e4:	cmp	r3, #0
   116e8:	beq	116dc <__assert_fail@plt+0x7ac>
   116ec:	push	{r4, lr}
   116f0:	blx	r3
   116f4:	pop	{r4, lr}
   116f8:	b	1166c <__assert_fail@plt+0x73c>
   116fc:	andeq	r6, r2, r4, lsl pc
   11700:	andeq	r0, r0, r0
   11704:	push	{r4, lr}
   11708:	mov	r4, r1
   1170c:	bl	12404 <__assert_fail@plt+0x14d4>
   11710:	cmp	r0, #0
   11714:	beq	11780 <__assert_fail@plt+0x850>
   11718:	ldr	r1, [pc, #100]	; 11784 <__assert_fail@plt+0x854>
   1171c:	mov	r0, r4
   11720:	bl	10ce4 <strcmp@plt>
   11724:	subs	r5, r0, #0
   11728:	bne	11754 <__assert_fail@plt+0x824>
   1172c:	bl	10e4c <__errno_location@plt>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #76]	; 11788 <__assert_fail@plt+0x858>
   11738:	ldr	r4, [r0]
   1173c:	mov	r0, r5
   11740:	bl	10d68 <dcgettext@plt>
   11744:	mov	r1, r4
   11748:	mov	r2, r0
   1174c:	mov	r0, #1
   11750:	bl	10dd4 <error@plt>
   11754:	bl	10e4c <__errno_location@plt>
   11758:	mov	r2, r4
   1175c:	mov	r1, #3
   11760:	ldr	r4, [r0]
   11764:	mov	r0, #0
   11768:	bl	14338 <__assert_fail@plt+0x3408>
   1176c:	mov	r1, r4
   11770:	ldr	r2, [pc, #20]	; 1178c <__assert_fail@plt+0x85c>
   11774:	mov	r3, r0
   11778:	mov	r0, #1
   1177c:	bl	10dd4 <error@plt>
   11780:	bl	10e28 <exit@plt>
   11784:	andeq	r6, r1, r8, lsr r0
   11788:	andeq	r6, r1, ip, lsr r0
   1178c:	strdeq	r6, [r1], -r4
   11790:	subs	r6, r0, #0
   11794:	push	{r7, lr}
   11798:	sub	sp, sp, #56	; 0x38
   1179c:	beq	117d8 <__assert_fail@plt+0x8a8>
   117a0:	ldr	r3, [pc, #728]	; 11a80 <__assert_fail@plt+0xb50>
   117a4:	mov	r2, #5
   117a8:	ldr	r1, [pc, #724]	; 11a84 <__assert_fail@plt+0xb54>
   117ac:	mov	r0, #0
   117b0:	ldr	r4, [r3]
   117b4:	bl	10d68 <dcgettext@plt>
   117b8:	ldr	r3, [pc, #712]	; 11a88 <__assert_fail@plt+0xb58>
   117bc:	mov	r1, #1
   117c0:	ldr	r3, [r3]
   117c4:	mov	r2, r0
   117c8:	mov	r0, r4
   117cc:	bl	10e88 <__fprintf_chk@plt>
   117d0:	mov	r0, r6
   117d4:	bl	10e28 <exit@plt>
   117d8:	mov	r2, #5
   117dc:	ldr	r1, [pc, #680]	; 11a8c <__assert_fail@plt+0xb5c>
   117e0:	bl	10d68 <dcgettext@plt>
   117e4:	ldr	r3, [pc, #668]	; 11a88 <__assert_fail@plt+0xb58>
   117e8:	ldr	r7, [pc, #672]	; 11a90 <__assert_fail@plt+0xb60>
   117ec:	ldr	r4, [pc, #672]	; 11a94 <__assert_fail@plt+0xb64>
   117f0:	ldr	r2, [r3]
   117f4:	mov	r1, r0
   117f8:	mov	r0, #1
   117fc:	bl	10e70 <__printf_chk@plt>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #652]	; 11a98 <__assert_fail@plt+0xb68>
   11808:	mov	r0, r6
   1180c:	bl	10d68 <dcgettext@plt>
   11810:	mov	r2, #32
   11814:	mov	r1, r0
   11818:	mov	r0, #1
   1181c:	bl	10e70 <__printf_chk@plt>
   11820:	mov	r2, #5
   11824:	ldr	r1, [pc, #624]	; 11a9c <__assert_fail@plt+0xb6c>
   11828:	mov	r0, r6
   1182c:	bl	10d68 <dcgettext@plt>
   11830:	ldr	r1, [r7]
   11834:	bl	10ccc <fputs_unlocked@plt>
   11838:	mov	r2, #5
   1183c:	ldr	r1, [pc, #604]	; 11aa0 <__assert_fail@plt+0xb70>
   11840:	mov	r0, r6
   11844:	bl	10d68 <dcgettext@plt>
   11848:	ldr	r1, [r7]
   1184c:	bl	10ccc <fputs_unlocked@plt>
   11850:	mov	r2, #5
   11854:	ldr	r1, [pc, #584]	; 11aa4 <__assert_fail@plt+0xb74>
   11858:	mov	r0, r6
   1185c:	bl	10d68 <dcgettext@plt>
   11860:	ldr	r1, [r7]
   11864:	bl	10ccc <fputs_unlocked@plt>
   11868:	mov	r2, #5
   1186c:	ldr	r1, [pc, #564]	; 11aa8 <__assert_fail@plt+0xb78>
   11870:	mov	r0, r6
   11874:	bl	10d68 <dcgettext@plt>
   11878:	ldr	r1, [r7]
   1187c:	bl	10ccc <fputs_unlocked@plt>
   11880:	mov	r2, #5
   11884:	ldr	r1, [pc, #544]	; 11aac <__assert_fail@plt+0xb7c>
   11888:	mov	r0, r6
   1188c:	bl	10d68 <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	10ccc <fputs_unlocked@plt>
   11898:	mov	r2, #5
   1189c:	ldr	r1, [pc, #524]	; 11ab0 <__assert_fail@plt+0xb80>
   118a0:	mov	r0, r6
   118a4:	bl	10d68 <dcgettext@plt>
   118a8:	ldr	r3, [pc, #516]	; 11ab4 <__assert_fail@plt+0xb84>
   118ac:	mov	r2, r3
   118b0:	mov	r1, r0
   118b4:	mov	r0, #1
   118b8:	bl	10e70 <__printf_chk@plt>
   118bc:	ldm	r4!, {r0, r1, r2, r3}
   118c0:	mov	lr, sp
   118c4:	stmia	lr!, {r0, r1, r2, r3}
   118c8:	ldm	r4!, {r0, r1, r2, r3}
   118cc:	ldr	ip, [sp]
   118d0:	stmia	lr!, {r0, r1, r2, r3}
   118d4:	cmp	ip, #0
   118d8:	ldm	r4!, {r0, r1, r2, r3}
   118dc:	stmia	lr!, {r0, r1, r2, r3}
   118e0:	ldm	r4, {r0, r1}
   118e4:	moveq	r4, sp
   118e8:	stm	lr, {r0, r1}
   118ec:	beq	1191c <__assert_fail@plt+0x9ec>
   118f0:	ldr	r5, [pc, #444]	; 11ab4 <__assert_fail@plt+0xb84>
   118f4:	mov	r4, sp
   118f8:	b	11908 <__assert_fail@plt+0x9d8>
   118fc:	ldr	ip, [r4, #8]!
   11900:	cmp	ip, #0
   11904:	beq	1191c <__assert_fail@plt+0x9ec>
   11908:	mov	r1, ip
   1190c:	mov	r0, r5
   11910:	bl	10ce4 <strcmp@plt>
   11914:	cmp	r0, #0
   11918:	bne	118fc <__assert_fail@plt+0x9cc>
   1191c:	ldr	r4, [r4, #4]
   11920:	mov	r2, #5
   11924:	cmp	r4, #0
   11928:	ldr	r1, [pc, #392]	; 11ab8 <__assert_fail@plt+0xb88>
   1192c:	beq	119d4 <__assert_fail@plt+0xaa4>
   11930:	mov	r0, #0
   11934:	bl	10d68 <dcgettext@plt>
   11938:	ldr	r3, [pc, #380]	; 11abc <__assert_fail@plt+0xb8c>
   1193c:	ldr	r2, [pc, #380]	; 11ac0 <__assert_fail@plt+0xb90>
   11940:	mov	r1, r0
   11944:	mov	r0, #1
   11948:	bl	10e70 <__printf_chk@plt>
   1194c:	mov	r1, #0
   11950:	mov	r0, #5
   11954:	bl	10ec4 <setlocale@plt>
   11958:	cmp	r0, #0
   1195c:	ldreq	r5, [pc, #336]	; 11ab4 <__assert_fail@plt+0xb84>
   11960:	beq	1197c <__assert_fail@plt+0xa4c>
   11964:	mov	r2, #3
   11968:	ldr	r1, [pc, #340]	; 11ac4 <__assert_fail@plt+0xb94>
   1196c:	bl	10f18 <strncmp@plt>
   11970:	ldr	r5, [pc, #316]	; 11ab4 <__assert_fail@plt+0xb84>
   11974:	cmp	r0, #0
   11978:	bne	11a64 <__assert_fail@plt+0xb34>
   1197c:	mov	r2, #5
   11980:	ldr	r1, [pc, #320]	; 11ac8 <__assert_fail@plt+0xb98>
   11984:	mov	r0, #0
   11988:	bl	10d68 <dcgettext@plt>
   1198c:	ldr	r3, [pc, #288]	; 11ab4 <__assert_fail@plt+0xb84>
   11990:	ldr	r2, [pc, #292]	; 11abc <__assert_fail@plt+0xb8c>
   11994:	mov	r1, r0
   11998:	mov	r0, #1
   1199c:	bl	10e70 <__printf_chk@plt>
   119a0:	mov	r2, #5
   119a4:	ldr	r1, [pc, #288]	; 11acc <__assert_fail@plt+0xb9c>
   119a8:	mov	r0, #0
   119ac:	bl	10d68 <dcgettext@plt>
   119b0:	ldr	r2, [pc, #280]	; 11ad0 <__assert_fail@plt+0xba0>
   119b4:	cmp	r4, r5
   119b8:	ldr	r3, [pc, #276]	; 11ad4 <__assert_fail@plt+0xba4>
   119bc:	movne	r3, r2
   119c0:	mov	r1, r0
   119c4:	mov	r2, r4
   119c8:	mov	r0, #1
   119cc:	bl	10e70 <__printf_chk@plt>
   119d0:	b	117d0 <__assert_fail@plt+0x8a0>
   119d4:	mov	r0, r4
   119d8:	bl	10d68 <dcgettext@plt>
   119dc:	ldr	r3, [pc, #216]	; 11abc <__assert_fail@plt+0xb8c>
   119e0:	ldr	r2, [pc, #216]	; 11ac0 <__assert_fail@plt+0xb90>
   119e4:	mov	r1, r0
   119e8:	mov	r0, #1
   119ec:	bl	10e70 <__printf_chk@plt>
   119f0:	mov	r1, r4
   119f4:	mov	r0, #5
   119f8:	bl	10ec4 <setlocale@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a18 <__assert_fail@plt+0xae8>
   11a04:	mov	r2, #3
   11a08:	ldr	r1, [pc, #180]	; 11ac4 <__assert_fail@plt+0xb94>
   11a0c:	bl	10f18 <strncmp@plt>
   11a10:	cmp	r0, #0
   11a14:	bne	11a5c <__assert_fail@plt+0xb2c>
   11a18:	mov	r2, #5
   11a1c:	ldr	r1, [pc, #164]	; 11ac8 <__assert_fail@plt+0xb98>
   11a20:	mov	r0, #0
   11a24:	bl	10d68 <dcgettext@plt>
   11a28:	ldr	r3, [pc, #132]	; 11ab4 <__assert_fail@plt+0xb84>
   11a2c:	ldr	r2, [pc, #136]	; 11abc <__assert_fail@plt+0xb8c>
   11a30:	mov	r4, r3
   11a34:	mov	r1, r0
   11a38:	mov	r0, #1
   11a3c:	bl	10e70 <__printf_chk@plt>
   11a40:	ldr	r1, [pc, #132]	; 11acc <__assert_fail@plt+0xb9c>
   11a44:	mov	r2, #5
   11a48:	mov	r0, #0
   11a4c:	bl	10d68 <dcgettext@plt>
   11a50:	ldr	r3, [pc, #124]	; 11ad4 <__assert_fail@plt+0xba4>
   11a54:	mov	r1, r0
   11a58:	b	119c4 <__assert_fail@plt+0xa94>
   11a5c:	ldr	r5, [pc, #80]	; 11ab4 <__assert_fail@plt+0xb84>
   11a60:	mov	r4, r5
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #104]	; 11ad8 <__assert_fail@plt+0xba8>
   11a6c:	mov	r0, #0
   11a70:	bl	10d68 <dcgettext@plt>
   11a74:	ldr	r1, [r7]
   11a78:	bl	10ccc <fputs_unlocked@plt>
   11a7c:	b	1197c <__assert_fail@plt+0xa4c>
   11a80:	andeq	r7, r2, r8, asr #2
   11a84:	andeq	r6, r1, ip, asr r0
   11a88:	andeq	r7, r2, r8, ror #2
   11a8c:	andeq	r6, r1, r4, lsl #1
   11a90:	andeq	r7, r2, r4, asr r1
   11a94:	andeq	r5, r1, r0, lsr #31
   11a98:	andeq	r6, r1, r4, lsr #1
   11a9c:	andeq	r6, r1, ip, ror #1
   11aa0:	andeq	r6, r1, r4, lsr #2
   11aa4:	andeq	r6, r1, r0, ror r1
   11aa8:	andeq	r6, r1, r4, ror #4
   11aac:	muleq	r1, r4, r2
   11ab0:	andeq	r6, r1, ip, asr #5
   11ab4:	andeq	r6, r1, r4, asr r0
   11ab8:	ldrdeq	r6, [r1], -r8
   11abc:	strdeq	r6, [r1], -r0
   11ac0:	andeq	r6, r1, r8, lsl r4
   11ac4:	andeq	r6, r1, r8, lsr #8
   11ac8:	andeq	r6, r1, r4, ror r4
   11acc:	muleq	r1, r0, r4
   11ad0:	muleq	r1, r0, r2
   11ad4:	andeq	r6, r1, r8, asr r5
   11ad8:	andeq	r6, r1, ip, lsr #8
   11adc:	cmp	r1, #7
   11ae0:	ble	11c8c <__assert_fail@plt+0xd5c>
   11ae4:	push	{r4, r5, r6, lr}
   11ae8:	ldrb	r1, [r0]
   11aec:	ldr	ip, [pc, #448]	; 11cb4 <__assert_fail@plt+0xd84>
   11af0:	ldrsb	r4, [ip, r1]
   11af4:	cmp	r4, #0
   11af8:	blt	11c3c <__assert_fail@plt+0xd0c>
   11afc:	ldrb	r1, [r0, #1]
   11b00:	ldrsb	r5, [ip, r1]
   11b04:	cmp	r5, #0
   11b08:	blt	11c3c <__assert_fail@plt+0xd0c>
   11b0c:	ldr	r1, [r3]
   11b10:	ldr	lr, [r2]
   11b14:	cmp	r1, #0
   11b18:	bne	11c94 <__assert_fail@plt+0xd64>
   11b1c:	ldrb	r4, [r0, #2]
   11b20:	cmp	r4, #61	; 0x3d
   11b24:	beq	11c44 <__assert_fail@plt+0xd14>
   11b28:	ldrsb	r4, [ip, r4]
   11b2c:	cmp	r4, #0
   11b30:	blt	11c80 <__assert_fail@plt+0xd50>
   11b34:	ldrb	r6, [r0, #3]
   11b38:	ldrsb	r6, [ip, r6]
   11b3c:	cmp	r6, #0
   11b40:	blt	11c80 <__assert_fail@plt+0xd50>
   11b44:	cmp	r1, #0
   11b48:	beq	11b6c <__assert_fail@plt+0xc3c>
   11b4c:	lsl	r4, r4, #1
   11b50:	orr	r5, r4, r5, lsl #6
   11b54:	orr	r5, r5, r6, asr #4
   11b58:	strb	r5, [lr]
   11b5c:	ldr	r1, [r3]
   11b60:	add	lr, lr, #1
   11b64:	sub	r1, r1, #1
   11b68:	str	r1, [r3]
   11b6c:	ldrb	r4, [r0, #4]
   11b70:	cmp	r4, #61	; 0x3d
   11b74:	beq	11c5c <__assert_fail@plt+0xd2c>
   11b78:	ldrsb	r4, [ip, r4]
   11b7c:	cmp	r4, #0
   11b80:	blt	11c80 <__assert_fail@plt+0xd50>
   11b84:	cmp	r1, #0
   11b88:	beq	11ba8 <__assert_fail@plt+0xc78>
   11b8c:	asr	r1, r4, #1
   11b90:	orr	r6, r1, r6, lsl #4
   11b94:	strb	r6, [lr]
   11b98:	ldr	r1, [r3]
   11b9c:	add	lr, lr, #1
   11ba0:	sub	r1, r1, #1
   11ba4:	str	r1, [r3]
   11ba8:	ldrb	r5, [r0, #5]
   11bac:	cmp	r5, #61	; 0x3d
   11bb0:	beq	11c68 <__assert_fail@plt+0xd38>
   11bb4:	ldrsb	r5, [ip, r5]
   11bb8:	cmp	r5, #0
   11bbc:	blt	11c80 <__assert_fail@plt+0xd50>
   11bc0:	ldrb	r6, [r0, #6]
   11bc4:	ldrsb	r6, [ip, r6]
   11bc8:	cmp	r6, #0
   11bcc:	blt	11c80 <__assert_fail@plt+0xd50>
   11bd0:	cmp	r1, #0
   11bd4:	beq	11bf8 <__assert_fail@plt+0xcc8>
   11bd8:	lsl	r5, r5, #2
   11bdc:	orr	r4, r5, r4, lsl #7
   11be0:	orr	r4, r4, r6, asr #3
   11be4:	strb	r4, [lr]
   11be8:	ldr	r1, [r3]
   11bec:	add	lr, lr, #1
   11bf0:	sub	r1, r1, #1
   11bf4:	str	r1, [r3]
   11bf8:	ldrb	r0, [r0, #7]
   11bfc:	cmp	r0, #61	; 0x3d
   11c00:	beq	11c30 <__assert_fail@plt+0xd00>
   11c04:	ldrsb	r0, [ip, r0]
   11c08:	cmp	r0, #0
   11c0c:	blt	11c80 <__assert_fail@plt+0xd50>
   11c10:	cmp	r1, #0
   11c14:	beq	11c30 <__assert_fail@plt+0xd00>
   11c18:	orr	r0, r0, r6, lsl #5
   11c1c:	strb	r0, [lr]
   11c20:	ldr	r1, [r3]
   11c24:	add	lr, lr, #1
   11c28:	sub	r1, r1, #1
   11c2c:	str	r1, [r3]
   11c30:	str	lr, [r2]
   11c34:	mov	r0, #1
   11c38:	pop	{r4, r5, r6, pc}
   11c3c:	mov	r0, #0
   11c40:	pop	{r4, r5, r6, pc}
   11c44:	ldrb	r3, [r0, #3]
   11c48:	cmp	r3, #61	; 0x3d
   11c4c:	bne	11c80 <__assert_fail@plt+0xd50>
   11c50:	ldrb	r3, [r0, #4]
   11c54:	cmp	r3, #61	; 0x3d
   11c58:	bne	11c80 <__assert_fail@plt+0xd50>
   11c5c:	ldrb	r3, [r0, #5]
   11c60:	cmp	r3, #61	; 0x3d
   11c64:	bne	11c80 <__assert_fail@plt+0xd50>
   11c68:	ldrb	r3, [r0, #6]
   11c6c:	cmp	r3, #61	; 0x3d
   11c70:	bne	11c80 <__assert_fail@plt+0xd50>
   11c74:	ldrb	r3, [r0, #7]
   11c78:	cmp	r3, #61	; 0x3d
   11c7c:	beq	11c30 <__assert_fail@plt+0xd00>
   11c80:	str	lr, [r2]
   11c84:	mov	r0, #0
   11c88:	pop	{r4, r5, r6, pc}
   11c8c:	mov	r0, #0
   11c90:	bx	lr
   11c94:	asr	r1, r5, #2
   11c98:	orr	r4, r1, r4, lsl #3
   11c9c:	strb	r4, [lr]
   11ca0:	ldr	r1, [r3]
   11ca4:	add	lr, lr, #1
   11ca8:	sub	r1, r1, #1
   11cac:	str	r1, [r3]
   11cb0:	b	11b1c <__assert_fail@plt+0xbec>
   11cb4:	strdeq	r6, [r1], -ip
   11cb8:	push	{r4, r5, r6, lr}
   11cbc:	add	r2, r2, #8
   11cc0:	sub	r5, r3, #8
   11cc4:	ldr	lr, [pc, #568]	; 11f04 <__assert_fail@plt+0xfd4>
   11cc8:	mov	r4, #61	; 0x3d
   11ccc:	b	11dd0 <__assert_fail@plt+0xea0>
   11cd0:	ldrb	r6, [r0, #1]
   11cd4:	cmp	r3, #2
   11cd8:	add	ip, ip, r6, lsr #6
   11cdc:	and	ip, ip, #31
   11ce0:	add	ip, lr, ip
   11ce4:	ldrb	ip, [ip, #256]	; 0x100
   11ce8:	strb	ip, [r2, #-7]
   11cec:	beq	11ed8 <__assert_fail@plt+0xfa8>
   11cf0:	lsl	ip, r6, #26
   11cf4:	cmp	r3, #3
   11cf8:	add	ip, lr, ip, lsr #27
   11cfc:	ldrb	ip, [ip, #256]	; 0x100
   11d00:	strb	ip, [r2, #-6]
   11d04:	beq	11ee4 <__assert_fail@plt+0xfb4>
   11d08:	cmp	r1, #2
   11d0c:	lsl	r6, r6, #4
   11d10:	beq	11e70 <__assert_fail@plt+0xf40>
   11d14:	ldrb	ip, [r0, #2]
   11d18:	cmp	r3, #4
   11d1c:	add	r6, r6, ip, lsr #4
   11d20:	and	r6, r6, #31
   11d24:	add	r6, lr, r6
   11d28:	ldrb	r6, [r6, #256]	; 0x100
   11d2c:	strb	r6, [r2, #-5]
   11d30:	beq	11ef8 <__assert_fail@plt+0xfc8>
   11d34:	cmp	r1, #3
   11d38:	lsl	r6, ip, #1
   11d3c:	beq	11e8c <__assert_fail@plt+0xf5c>
   11d40:	ldrb	ip, [r0, #3]
   11d44:	cmp	r3, #5
   11d48:	add	r6, r6, ip, lsr #7
   11d4c:	and	r6, r6, #31
   11d50:	add	r6, lr, r6
   11d54:	ldrb	r6, [r6, #256]	; 0x100
   11d58:	strb	r6, [r2, #-4]
   11d5c:	beq	11efc <__assert_fail@plt+0xfcc>
   11d60:	lsl	r6, ip, #25
   11d64:	cmp	r3, #6
   11d68:	add	r6, lr, r6, lsr #27
   11d6c:	ldrb	r6, [r6, #256]	; 0x100
   11d70:	strb	r6, [r2, #-3]
   11d74:	beq	11eec <__assert_fail@plt+0xfbc>
   11d78:	cmp	r1, #4
   11d7c:	lsl	ip, ip, #3
   11d80:	beq	11ea8 <__assert_fail@plt+0xf78>
   11d84:	ldrb	r6, [r0, #4]
   11d88:	cmp	r3, #7
   11d8c:	add	ip, ip, r6, lsr #5
   11d90:	and	ip, ip, #31
   11d94:	add	ip, lr, ip
   11d98:	ldrb	ip, [ip, #256]	; 0x100
   11d9c:	strb	ip, [r2, #-2]
   11da0:	beq	11f00 <__assert_fail@plt+0xfd0>
   11da4:	and	r6, r6, #31
   11da8:	add	r6, lr, r6
   11dac:	cmp	r5, #0
   11db0:	ldrb	ip, [r6, #256]	; 0x100
   11db4:	strb	ip, [r2, #-1]
   11db8:	beq	11ef4 <__assert_fail@plt+0xfc4>
   11dbc:	subs	r1, r1, #5
   11dc0:	addne	r0, r0, #5
   11dc4:	sub	r3, r3, #8
   11dc8:	sub	r5, r5, #8
   11dcc:	add	r2, r2, #8
   11dd0:	cmp	r1, #0
   11dd4:	cmpne	r3, #0
   11dd8:	movne	r6, #1
   11ddc:	moveq	r6, #0
   11de0:	beq	11ec4 <__assert_fail@plt+0xf94>
   11de4:	ldrb	ip, [r0]
   11de8:	cmp	r3, #1
   11dec:	add	r6, lr, ip, lsr #3
   11df0:	ldrb	r6, [r6, #256]	; 0x100
   11df4:	strb	r6, [r2, #-8]
   11df8:	popeq	{r4, r5, r6, pc}
   11dfc:	cmp	r1, #1
   11e00:	lsl	ip, ip, #2
   11e04:	bne	11cd0 <__assert_fail@plt+0xda0>
   11e08:	and	ip, ip, #31
   11e0c:	add	ip, lr, ip
   11e10:	cmp	r3, #2
   11e14:	ldrb	r1, [ip, #256]	; 0x100
   11e18:	strb	r1, [r2, #-7]
   11e1c:	beq	11edc <__assert_fail@plt+0xfac>
   11e20:	cmp	r3, #3
   11e24:	strb	r4, [r2, #-6]
   11e28:	beq	11ee0 <__assert_fail@plt+0xfb0>
   11e2c:	cmp	r3, #4
   11e30:	strb	r4, [r2, #-5]
   11e34:	beq	11ee8 <__assert_fail@plt+0xfb8>
   11e38:	cmp	r3, #5
   11e3c:	strb	r4, [r2, #-4]
   11e40:	beq	11ed0 <__assert_fail@plt+0xfa0>
   11e44:	cmp	r3, #6
   11e48:	strb	r4, [r2, #-3]
   11e4c:	beq	11ed4 <__assert_fail@plt+0xfa4>
   11e50:	cmp	r3, #7
   11e54:	strb	r4, [r2, #-2]
   11e58:	beq	11ef0 <__assert_fail@plt+0xfc0>
   11e5c:	cmp	r5, #0
   11e60:	strb	r4, [r2, #-1]
   11e64:	popeq	{r4, r5, r6, pc}
   11e68:	mov	r1, #0
   11e6c:	b	11dc4 <__assert_fail@plt+0xe94>
   11e70:	and	r6, r6, #31
   11e74:	add	r6, lr, r6
   11e78:	cmp	r3, #4
   11e7c:	ldrb	r1, [r6, #256]	; 0x100
   11e80:	strb	r1, [r2, #-5]
   11e84:	bne	11e38 <__assert_fail@plt+0xf08>
   11e88:	pop	{r4, r5, r6, pc}
   11e8c:	and	ip, r6, #31
   11e90:	add	ip, lr, ip
   11e94:	cmp	r3, #5
   11e98:	ldrb	r1, [ip, #256]	; 0x100
   11e9c:	strb	r1, [r2, #-4]
   11ea0:	bne	11e44 <__assert_fail@plt+0xf14>
   11ea4:	pop	{r4, r5, r6, pc}
   11ea8:	and	ip, ip, #31
   11eac:	add	ip, lr, ip
   11eb0:	cmp	r3, #7
   11eb4:	ldrb	r1, [ip, #256]	; 0x100
   11eb8:	strb	r1, [r2, #-2]
   11ebc:	bne	11e5c <__assert_fail@plt+0xf2c>
   11ec0:	pop	{r4, r5, r6, pc}
   11ec4:	cmp	r3, #0
   11ec8:	strbne	r6, [r2, #-8]
   11ecc:	pop	{r4, r5, r6, pc}
   11ed0:	pop	{r4, r5, r6, pc}
   11ed4:	pop	{r4, r5, r6, pc}
   11ed8:	pop	{r4, r5, r6, pc}
   11edc:	pop	{r4, r5, r6, pc}
   11ee0:	pop	{r4, r5, r6, pc}
   11ee4:	pop	{r4, r5, r6, pc}
   11ee8:	pop	{r4, r5, r6, pc}
   11eec:	pop	{r4, r5, r6, pc}
   11ef0:	pop	{r4, r5, r6, pc}
   11ef4:	pop	{r4, r5, r6, pc}
   11ef8:	pop	{r4, r5, r6, pc}
   11efc:	pop	{r4, r5, r6, pc}
   11f00:	pop	{r4, r5, r6, pc}
   11f04:	strdeq	r6, [r1], -ip
   11f08:	ldr	r3, [pc, #168]	; 11fb8 <__assert_fail@plt+0x1088>
   11f0c:	push	{r4, r5, r6, r7, r8, lr}
   11f10:	mov	r5, r1
   11f14:	smull	r3, r1, r3, r1
   11f18:	asr	r3, r5, #31
   11f1c:	rsb	r3, r3, r1, asr #1
   11f20:	mov	r6, r0
   11f24:	add	r4, r3, r3, lsl #2
   11f28:	cmp	r5, r4
   11f2c:	moveq	r4, r3
   11f30:	addne	r4, r3, #1
   11f34:	cmp	r4, #0
   11f38:	mov	r7, r2
   11f3c:	blt	11f8c <__assert_fail@plt+0x105c>
   11f40:	cmn	r4, #-268435455	; 0xf0000001
   11f44:	bgt	11fa8 <__assert_fail@plt+0x1078>
   11f48:	cmp	r5, #0
   11f4c:	blt	11fa8 <__assert_fail@plt+0x1078>
   11f50:	lsl	r4, r4, #3
   11f54:	add	r8, r4, #1
   11f58:	mov	r0, r8
   11f5c:	bl	155f4 <__assert_fail@plt+0x46c4>
   11f60:	cmp	r0, #0
   11f64:	str	r0, [r7]
   11f68:	moveq	r4, r8
   11f6c:	beq	11fb0 <__assert_fail@plt+0x1080>
   11f70:	mov	r2, r0
   11f74:	mov	r3, r8
   11f78:	mov	r0, r6
   11f7c:	mov	r1, r5
   11f80:	bl	11cb8 <__assert_fail@plt+0xd88>
   11f84:	mov	r0, r4
   11f88:	pop	{r4, r5, r6, r7, r8, pc}
   11f8c:	cmn	r4, #1
   11f90:	beq	11f48 <__assert_fail@plt+0x1018>
   11f94:	mov	r1, r4
   11f98:	mov	r0, #-2147483648	; 0x80000000
   11f9c:	bl	15acc <__assert_fail@plt+0x4b9c>
   11fa0:	cmp	r0, #7
   11fa4:	bgt	11f48 <__assert_fail@plt+0x1018>
   11fa8:	mov	r4, #0
   11fac:	str	r4, [r7]
   11fb0:	mov	r0, r4
   11fb4:	pop	{r4, r5, r6, r7, r8, pc}
   11fb8:	strbtvs	r6, [r6], -r7, ror #12
   11fbc:	ldr	r3, [pc, #12]	; 11fd0 <__assert_fail@plt+0x10a0>
   11fc0:	ldrb	r0, [r3, r0]
   11fc4:	eor	r0, r0, #128	; 0x80
   11fc8:	lsr	r0, r0, #7
   11fcc:	bx	lr
   11fd0:	strdeq	r6, [r1], -ip
   11fd4:	mov	r3, #0
   11fd8:	str	r3, [r0]
   11fdc:	bx	lr
   11fe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe4:	sub	sp, sp, #20
   11fe8:	mov	r5, r1
   11fec:	ldr	r1, [sp, #56]	; 0x38
   11ff0:	subs	r6, r0, #0
   11ff4:	mov	r4, r2
   11ff8:	ldr	r7, [r1]
   11ffc:	str	r3, [sp, #4]
   12000:	str	r7, [sp, #12]
   12004:	movne	sl, #1
   12008:	moveq	sl, #0
   1200c:	beq	1220c <__assert_fail@plt+0x12dc>
   12010:	adds	r8, r2, #0
   12014:	ldr	r9, [r6]
   12018:	movne	r8, #1
   1201c:	cmp	r9, #0
   12020:	movne	r9, #0
   12024:	andeq	r9, r8, #1
   12028:	and	sl, sl, r8
   1202c:	cmp	r9, #0
   12030:	moveq	r3, r7
   12034:	bne	12168 <__assert_fail@plt+0x1238>
   12038:	cmp	r4, #0
   1203c:	movne	r0, #0
   12040:	andeq	r0, r8, #1
   12044:	cmp	r0, #0
   12048:	bne	121a0 <__assert_fail@plt+0x1270>
   1204c:	cmp	r4, #0
   12050:	beq	12060 <__assert_fail@plt+0x1130>
   12054:	ldrb	r2, [r5]
   12058:	cmp	r2, #10
   1205c:	beq	121c8 <__assert_fail@plt+0x1298>
   12060:	ldr	r2, [sp, #4]
   12064:	sub	r3, r7, r3
   12068:	sub	r3, r2, r3
   1206c:	cmp	r6, #0
   12070:	str	r7, [sp, #12]
   12074:	str	r3, [sp, #4]
   12078:	add	r7, r5, r4
   1207c:	beq	1218c <__assert_fail@plt+0x125c>
   12080:	ldr	fp, [r6]
   12084:	cmp	fp, #8
   12088:	moveq	r2, #0
   1208c:	clzne	r3, fp
   12090:	moveq	r3, #1
   12094:	lsrne	r3, r3, #5
   12098:	moveq	fp, r2
   1209c:	streq	r2, [r6]
   120a0:	cmp	r4, #7
   120a4:	movle	r4, #0
   120a8:	andgt	r4, r3, #1
   120ac:	cmp	r4, #0
   120b0:	beq	120d8 <__assert_fail@plt+0x11a8>
   120b4:	mov	r0, r5
   120b8:	mov	r2, #8
   120bc:	mov	r1, #10
   120c0:	bl	10e94 <memchr@plt>
   120c4:	cmp	r0, #0
   120c8:	moveq	r4, #8
   120cc:	moveq	r0, r5
   120d0:	addeq	r5, r5, r4
   120d4:	beq	12138 <__assert_fail@plt+0x1208>
   120d8:	cmp	r7, r5
   120dc:	mov	r0, r5
   120e0:	bls	12114 <__assert_fail@plt+0x11e4>
   120e4:	ldrb	r2, [r0], #1
   120e8:	add	r4, fp, #1
   120ec:	mov	r3, r6
   120f0:	cmp	r2, #10
   120f4:	beq	1210c <__assert_fail@plt+0x11dc>
   120f8:	cmp	r4, #8
   120fc:	str	r4, [r3], fp
   12100:	mov	fp, r4
   12104:	strb	r2, [r3, #4]
   12108:	beq	121bc <__assert_fail@plt+0x128c>
   1210c:	cmp	r7, r0
   12110:	bne	120e4 <__assert_fail@plt+0x11b4>
   12114:	mov	r4, fp
   12118:	cmp	r4, #0
   1211c:	mov	r5, r0
   12120:	add	r0, r6, #4
   12124:	beq	12198 <__assert_fail@plt+0x1268>
   12128:	cmp	r4, #7
   1212c:	bgt	12138 <__assert_fail@plt+0x1208>
   12130:	cmp	sl, #0
   12134:	bne	12198 <__assert_fail@plt+0x1268>
   12138:	add	r3, sp, #12
   1213c:	add	r2, sp, #4
   12140:	mov	r1, r4
   12144:	bl	11adc <__assert_fail@plt+0xbac>
   12148:	cmp	r0, #0
   1214c:	beq	121fc <__assert_fail@plt+0x12cc>
   12150:	sub	r4, r7, r5
   12154:	ldr	r7, [sp, #12]
   12158:	b	1202c <__assert_fail@plt+0x10fc>
   1215c:	ldr	r7, [sp, #12]
   12160:	sub	r4, r4, #8
   12164:	add	r5, r5, #8
   12168:	add	r3, sp, #12
   1216c:	add	r2, sp, #4
   12170:	mov	r1, r4
   12174:	mov	r0, r5
   12178:	bl	11adc <__assert_fail@plt+0xbac>
   1217c:	cmp	r0, #0
   12180:	bne	1215c <__assert_fail@plt+0x122c>
   12184:	ldr	r3, [sp, #12]
   12188:	b	12038 <__assert_fail@plt+0x1108>
   1218c:	cmp	r4, #0
   12190:	mov	r0, r5
   12194:	bne	12128 <__assert_fail@plt+0x11f8>
   12198:	ldr	r3, [sp, #12]
   1219c:	mov	r0, #1
   121a0:	ldr	r2, [sp, #56]	; 0x38
   121a4:	ldr	r2, [r2]
   121a8:	sub	r3, r2, r3
   121ac:	ldr	r2, [sp, #56]	; 0x38
   121b0:	str	r3, [r2]
   121b4:	add	sp, sp, #20
   121b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121bc:	mov	r5, r0
   121c0:	add	r0, r6, #4
   121c4:	b	12138 <__assert_fail@plt+0x1208>
   121c8:	cmp	r6, #0
   121cc:	subne	r4, r4, #1
   121d0:	movne	r7, r3
   121d4:	addne	r5, r5, #1
   121d8:	bne	1202c <__assert_fail@plt+0x10fc>
   121dc:	ldr	r2, [sp, #4]
   121e0:	sub	r3, r7, r3
   121e4:	sub	r3, r2, r3
   121e8:	str	r7, [sp, #12]
   121ec:	str	r3, [sp, #4]
   121f0:	add	r7, r5, r4
   121f4:	mov	r0, r5
   121f8:	b	12128 <__assert_fail@plt+0x11f8>
   121fc:	clz	r0, r4
   12200:	ldr	r3, [sp, #12]
   12204:	lsr	r0, r0, #5
   12208:	b	121a0 <__assert_fail@plt+0x1270>
   1220c:	mov	r9, #1
   12210:	mov	r8, r9
   12214:	b	12028 <__assert_fail@plt+0x10f8>
   12218:	asr	ip, r2, #3
   1221c:	add	ip, ip, #1
   12220:	push	{r4, r5, r6, r7, r8, lr}
   12224:	add	ip, ip, ip, lsl #2
   12228:	sub	sp, sp, #16
   1222c:	mov	r7, r0
   12230:	mov	r0, ip
   12234:	mov	r5, r3
   12238:	mov	r4, r2
   1223c:	mov	r8, r1
   12240:	str	ip, [sp, #12]
   12244:	ldr	r6, [sp, #40]	; 0x28
   12248:	bl	155f4 <__assert_fail@plt+0x46c4>
   1224c:	cmp	r0, #0
   12250:	str	r0, [r5]
   12254:	beq	12298 <__assert_fail@plt+0x1368>
   12258:	add	ip, sp, #12
   1225c:	mov	r3, r0
   12260:	mov	r2, r4
   12264:	mov	r1, r8
   12268:	mov	r0, r7
   1226c:	str	ip, [sp]
   12270:	bl	11fe0 <__assert_fail@plt+0x10b0>
   12274:	subs	r4, r0, #0
   12278:	beq	122a8 <__assert_fail@plt+0x1378>
   1227c:	cmp	r6, #0
   12280:	beq	12298 <__assert_fail@plt+0x1368>
   12284:	ldr	r3, [sp, #12]
   12288:	mov	r0, r4
   1228c:	str	r3, [r6]
   12290:	add	sp, sp, #16
   12294:	pop	{r4, r5, r6, r7, r8, pc}
   12298:	mov	r4, #1
   1229c:	mov	r0, r4
   122a0:	add	sp, sp, #16
   122a4:	pop	{r4, r5, r6, r7, r8, pc}
   122a8:	ldr	r0, [r5]
   122ac:	bl	12504 <__assert_fail@plt+0x15d4>
   122b0:	mov	r0, r4
   122b4:	str	r4, [r5]
   122b8:	add	sp, sp, #16
   122bc:	pop	{r4, r5, r6, r7, r8, pc}
   122c0:	ldr	r3, [pc, #4]	; 122cc <__assert_fail@plt+0x139c>
   122c4:	str	r0, [r3]
   122c8:	bx	lr
   122cc:	andeq	r7, r2, r0, ror #2
   122d0:	ldr	r3, [pc, #4]	; 122dc <__assert_fail@plt+0x13ac>
   122d4:	strb	r0, [r3, #4]
   122d8:	bx	lr
   122dc:	andeq	r7, r2, r0, ror #2
   122e0:	ldr	r3, [pc, #192]	; 123a8 <__assert_fail@plt+0x1478>
   122e4:	push	{r4, r5, r6, lr}
   122e8:	sub	sp, sp, #8
   122ec:	ldr	r0, [r3]
   122f0:	bl	1567c <__assert_fail@plt+0x474c>
   122f4:	cmp	r0, #0
   122f8:	beq	1231c <__assert_fail@plt+0x13ec>
   122fc:	ldr	r4, [pc, #168]	; 123ac <__assert_fail@plt+0x147c>
   12300:	ldrb	r3, [r4, #4]
   12304:	cmp	r3, #0
   12308:	beq	12338 <__assert_fail@plt+0x1408>
   1230c:	bl	10e4c <__errno_location@plt>
   12310:	ldr	r3, [r0]
   12314:	cmp	r3, #32
   12318:	bne	12338 <__assert_fail@plt+0x1408>
   1231c:	ldr	r3, [pc, #140]	; 123b0 <__assert_fail@plt+0x1480>
   12320:	ldr	r0, [r3]
   12324:	bl	1567c <__assert_fail@plt+0x474c>
   12328:	cmp	r0, #0
   1232c:	bne	12380 <__assert_fail@plt+0x1450>
   12330:	add	sp, sp, #8
   12334:	pop	{r4, r5, r6, pc}
   12338:	mov	r2, #5
   1233c:	ldr	r1, [pc, #112]	; 123b4 <__assert_fail@plt+0x1484>
   12340:	mov	r0, #0
   12344:	bl	10d68 <dcgettext@plt>
   12348:	ldr	r4, [r4]
   1234c:	cmp	r4, #0
   12350:	mov	r5, r0
   12354:	beq	1238c <__assert_fail@plt+0x145c>
   12358:	bl	10e4c <__errno_location@plt>
   1235c:	ldr	r6, [r0]
   12360:	mov	r0, r4
   12364:	bl	14324 <__assert_fail@plt+0x33f4>
   12368:	mov	r1, r6
   1236c:	str	r5, [sp]
   12370:	ldr	r2, [pc, #64]	; 123b8 <__assert_fail@plt+0x1488>
   12374:	mov	r3, r0
   12378:	mov	r0, #0
   1237c:	bl	10dd4 <error@plt>
   12380:	ldr	r3, [pc, #52]	; 123bc <__assert_fail@plt+0x148c>
   12384:	ldr	r0, [r3]
   12388:	bl	10d20 <_exit@plt>
   1238c:	bl	10e4c <__errno_location@plt>
   12390:	mov	r3, r5
   12394:	ldr	r2, [pc, #36]	; 123c0 <__assert_fail@plt+0x1490>
   12398:	ldr	r1, [r0]
   1239c:	mov	r0, r4
   123a0:	bl	10dd4 <error@plt>
   123a4:	b	12380 <__assert_fail@plt+0x1450>
   123a8:	andeq	r7, r2, r4, asr r1
   123ac:	andeq	r7, r2, r0, ror #2
   123b0:	andeq	r7, r2, r8, asr #2
   123b4:	andeq	r6, r1, r4, lsr r5
   123b8:	strdeq	r6, [r1], -r0
   123bc:	strdeq	r7, [r2], -r0
   123c0:	strdeq	r6, [r1], -r4
   123c4:	push	{r4, r5}
   123c8:	pop	{r4, r5}
   123cc:	b	10cf0 <posix_fadvise64@plt>
   123d0:	cmp	r0, #0
   123d4:	bxeq	lr
   123d8:	push	{r4, lr}
   123dc:	sub	sp, sp, #16
   123e0:	mov	r4, r1
   123e4:	bl	10e7c <fileno@plt>
   123e8:	mov	r2, #0
   123ec:	mov	r3, #0
   123f0:	str	r4, [sp, #8]
   123f4:	strd	r2, [sp]
   123f8:	bl	10cf0 <posix_fadvise64@plt>
   123fc:	add	sp, sp, #16
   12400:	pop	{r4, pc}
   12404:	push	{r4, r5, lr}
   12408:	sub	sp, sp, #12
   1240c:	mov	r4, r0
   12410:	bl	10e7c <fileno@plt>
   12414:	cmp	r0, #0
   12418:	mov	r0, r4
   1241c:	blt	12498 <__assert_fail@plt+0x1568>
   12420:	bl	10df8 <__freading@plt>
   12424:	cmp	r0, #0
   12428:	bne	12464 <__assert_fail@plt+0x1534>
   1242c:	mov	r0, r4
   12430:	bl	124a4 <__assert_fail@plt+0x1574>
   12434:	cmp	r0, #0
   12438:	beq	12494 <__assert_fail@plt+0x1564>
   1243c:	bl	10e4c <__errno_location@plt>
   12440:	mov	r5, r0
   12444:	mov	r0, r4
   12448:	ldr	r4, [r5]
   1244c:	bl	10ea0 <fclose@plt>
   12450:	cmp	r4, #0
   12454:	mvnne	r0, #0
   12458:	strne	r4, [r5]
   1245c:	add	sp, sp, #12
   12460:	pop	{r4, r5, pc}
   12464:	mov	r0, r4
   12468:	bl	10e7c <fileno@plt>
   1246c:	mov	r3, #1
   12470:	str	r3, [sp]
   12474:	mov	r2, #0
   12478:	mov	r3, #0
   1247c:	bl	10da4 <lseek64@plt>
   12480:	mvn	r3, #0
   12484:	mvn	r2, #0
   12488:	cmp	r1, r3
   1248c:	cmpeq	r0, r2
   12490:	bne	1242c <__assert_fail@plt+0x14fc>
   12494:	mov	r0, r4
   12498:	add	sp, sp, #12
   1249c:	pop	{r4, r5, lr}
   124a0:	b	10ea0 <fclose@plt>
   124a4:	push	{r4, lr}
   124a8:	subs	r4, r0, #0
   124ac:	sub	sp, sp, #8
   124b0:	beq	124cc <__assert_fail@plt+0x159c>
   124b4:	bl	10df8 <__freading@plt>
   124b8:	cmp	r0, #0
   124bc:	beq	124cc <__assert_fail@plt+0x159c>
   124c0:	ldr	r3, [r4]
   124c4:	tst	r3, #256	; 0x100
   124c8:	bne	124dc <__assert_fail@plt+0x15ac>
   124cc:	mov	r0, r4
   124d0:	add	sp, sp, #8
   124d4:	pop	{r4, lr}
   124d8:	b	10cfc <fflush@plt>
   124dc:	mov	r3, #1
   124e0:	str	r3, [sp]
   124e4:	mov	r2, #0
   124e8:	mov	r3, #0
   124ec:	mov	r0, r4
   124f0:	bl	1255c <__assert_fail@plt+0x162c>
   124f4:	mov	r0, r4
   124f8:	add	sp, sp, #8
   124fc:	pop	{r4, lr}
   12500:	b	10cfc <fflush@plt>
   12504:	push	{r4, r5, lr}
   12508:	sub	sp, sp, #12
   1250c:	mov	r5, r0
   12510:	bl	10e4c <__errno_location@plt>
   12514:	mov	r2, #0
   12518:	mov	r4, r0
   1251c:	ldr	r3, [r0]
   12520:	str	r2, [r4]
   12524:	mov	r0, r5
   12528:	str	r3, [sp]
   1252c:	str	r3, [sp, #4]
   12530:	bl	10d14 <free@plt>
   12534:	ldr	r3, [r4]
   12538:	add	r2, sp, #8
   1253c:	cmp	r3, #0
   12540:	moveq	r3, #4
   12544:	movne	r3, #0
   12548:	add	r3, r2, r3
   1254c:	ldr	r3, [r3, #-8]
   12550:	str	r3, [r4]
   12554:	add	sp, sp, #12
   12558:	pop	{r4, r5, pc}
   1255c:	push	{r4, r5, r6, r7, r8, lr}
   12560:	sub	sp, sp, #8
   12564:	ldmib	r0, {ip, lr}
   12568:	mov	r4, r0
   1256c:	ldr	r5, [sp, #32]
   12570:	cmp	lr, ip
   12574:	beq	1258c <__assert_fail@plt+0x165c>
   12578:	str	r5, [sp, #32]
   1257c:	mov	r0, r4
   12580:	add	sp, sp, #8
   12584:	pop	{r4, r5, r6, r7, r8, lr}
   12588:	b	10eac <fseeko64@plt>
   1258c:	ldr	lr, [r0, #20]
   12590:	ldr	ip, [r0, #16]
   12594:	cmp	lr, ip
   12598:	bne	12578 <__assert_fail@plt+0x1648>
   1259c:	ldr	r8, [r0, #36]	; 0x24
   125a0:	cmp	r8, #0
   125a4:	bne	12578 <__assert_fail@plt+0x1648>
   125a8:	mov	r6, r2
   125ac:	mov	r7, r3
   125b0:	bl	10e7c <fileno@plt>
   125b4:	mov	r2, r6
   125b8:	mov	r3, r7
   125bc:	str	r5, [sp]
   125c0:	bl	10da4 <lseek64@plt>
   125c4:	mvn	r3, #0
   125c8:	mvn	r2, #0
   125cc:	cmp	r1, r3
   125d0:	cmpeq	r0, r2
   125d4:	beq	125f4 <__assert_fail@plt+0x16c4>
   125d8:	ldr	r3, [r4]
   125dc:	strd	r0, [r4, #80]	; 0x50
   125e0:	mov	r0, r8
   125e4:	bic	r3, r3, #16
   125e8:	str	r3, [r4]
   125ec:	add	sp, sp, #8
   125f0:	pop	{r4, r5, r6, r7, r8, pc}
   125f4:	mvn	r0, #0
   125f8:	b	125ec <__assert_fail@plt+0x16bc>
   125fc:	push	{r4, r5, r6, lr}
   12600:	subs	r4, r0, #0
   12604:	beq	12678 <__assert_fail@plt+0x1748>
   12608:	mov	r1, #47	; 0x2f
   1260c:	bl	10ed0 <strrchr@plt>
   12610:	subs	r5, r0, #0
   12614:	beq	12664 <__assert_fail@plt+0x1734>
   12618:	add	r6, r5, #1
   1261c:	sub	r3, r6, r4
   12620:	cmp	r3, #6
   12624:	ble	12664 <__assert_fail@plt+0x1734>
   12628:	mov	r2, #7
   1262c:	ldr	r1, [pc, #96]	; 12694 <__assert_fail@plt+0x1764>
   12630:	sub	r0, r5, #6
   12634:	bl	10f18 <strncmp@plt>
   12638:	cmp	r0, #0
   1263c:	bne	12664 <__assert_fail@plt+0x1734>
   12640:	mov	r2, #3
   12644:	ldr	r1, [pc, #76]	; 12698 <__assert_fail@plt+0x1768>
   12648:	mov	r0, r6
   1264c:	bl	10f18 <strncmp@plt>
   12650:	cmp	r0, #0
   12654:	movne	r4, r6
   12658:	ldreq	r3, [pc, #60]	; 1269c <__assert_fail@plt+0x176c>
   1265c:	addeq	r4, r5, #4
   12660:	streq	r4, [r3]
   12664:	ldr	r2, [pc, #52]	; 126a0 <__assert_fail@plt+0x1770>
   12668:	ldr	r3, [pc, #52]	; 126a4 <__assert_fail@plt+0x1774>
   1266c:	str	r4, [r2]
   12670:	str	r4, [r3]
   12674:	pop	{r4, r5, r6, pc}
   12678:	ldr	r3, [pc, #40]	; 126a8 <__assert_fail@plt+0x1778>
   1267c:	mov	r2, #55	; 0x37
   12680:	mov	r1, #1
   12684:	ldr	r3, [r3]
   12688:	ldr	r0, [pc, #28]	; 126ac <__assert_fail@plt+0x177c>
   1268c:	bl	10d98 <fwrite@plt>
   12690:	bl	10f24 <abort@plt>
   12694:	andeq	r6, r1, r4, asr r7
   12698:	andeq	r6, r1, ip, asr r7
   1269c:	andeq	r7, r2, r8, lsr r1
   126a0:	andeq	r7, r2, r8, ror #2
   126a4:	andeq	r7, r2, ip, lsr r1
   126a8:	andeq	r7, r2, r8, asr #2
   126ac:	andeq	r6, r1, ip, lsl r7
   126b0:	push	{r4, r5, r6, lr}
   126b4:	mov	r2, #48	; 0x30
   126b8:	mov	r4, r1
   126bc:	mov	r1, #0
   126c0:	mov	r5, r0
   126c4:	bl	10e64 <memset@plt>
   126c8:	cmp	r4, #10
   126cc:	beq	126dc <__assert_fail@plt+0x17ac>
   126d0:	str	r4, [r5]
   126d4:	mov	r0, r5
   126d8:	pop	{r4, r5, r6, pc}
   126dc:	bl	10f24 <abort@plt>
   126e0:	push	{r4, r5, r6, lr}
   126e4:	mov	r4, r0
   126e8:	mov	r5, r1
   126ec:	bl	156f8 <__assert_fail@plt+0x47c8>
   126f0:	ldrb	r3, [r0]
   126f4:	bic	r3, r3, #32
   126f8:	cmp	r3, #85	; 0x55
   126fc:	bne	1275c <__assert_fail@plt+0x182c>
   12700:	ldrb	r3, [r0, #1]
   12704:	bic	r3, r3, #32
   12708:	cmp	r3, #84	; 0x54
   1270c:	bne	12798 <__assert_fail@plt+0x1868>
   12710:	ldrb	r3, [r0, #2]
   12714:	bic	r3, r3, #32
   12718:	cmp	r3, #70	; 0x46
   1271c:	bne	12798 <__assert_fail@plt+0x1868>
   12720:	ldrb	r3, [r0, #3]
   12724:	cmp	r3, #45	; 0x2d
   12728:	bne	12798 <__assert_fail@plt+0x1868>
   1272c:	ldrb	r3, [r0, #4]
   12730:	cmp	r3, #56	; 0x38
   12734:	bne	12798 <__assert_fail@plt+0x1868>
   12738:	ldrb	r3, [r0, #5]
   1273c:	cmp	r3, #0
   12740:	bne	12798 <__assert_fail@plt+0x1868>
   12744:	ldrb	r2, [r4]
   12748:	ldr	r3, [pc, #152]	; 127e8 <__assert_fail@plt+0x18b8>
   1274c:	ldr	r0, [pc, #152]	; 127ec <__assert_fail@plt+0x18bc>
   12750:	cmp	r2, #96	; 0x60
   12754:	movne	r0, r3
   12758:	pop	{r4, r5, r6, pc}
   1275c:	cmp	r3, #71	; 0x47
   12760:	bne	12798 <__assert_fail@plt+0x1868>
   12764:	ldrb	r3, [r0, #1]
   12768:	bic	r3, r3, #32
   1276c:	cmp	r3, #66	; 0x42
   12770:	bne	12798 <__assert_fail@plt+0x1868>
   12774:	ldrb	r3, [r0, #2]
   12778:	cmp	r3, #49	; 0x31
   1277c:	bne	12798 <__assert_fail@plt+0x1868>
   12780:	ldrb	r3, [r0, #3]
   12784:	cmp	r3, #56	; 0x38
   12788:	bne	12798 <__assert_fail@plt+0x1868>
   1278c:	ldrb	r3, [r0, #4]
   12790:	cmp	r3, #48	; 0x30
   12794:	beq	127ac <__assert_fail@plt+0x187c>
   12798:	ldr	r3, [pc, #80]	; 127f0 <__assert_fail@plt+0x18c0>
   1279c:	cmp	r5, #9
   127a0:	ldr	r0, [pc, #76]	; 127f4 <__assert_fail@plt+0x18c4>
   127a4:	movne	r0, r3
   127a8:	pop	{r4, r5, r6, pc}
   127ac:	ldrb	r3, [r0, #5]
   127b0:	cmp	r3, #51	; 0x33
   127b4:	bne	12798 <__assert_fail@plt+0x1868>
   127b8:	ldrb	r3, [r0, #6]
   127bc:	cmp	r3, #48	; 0x30
   127c0:	bne	12798 <__assert_fail@plt+0x1868>
   127c4:	ldrb	r3, [r0, #7]
   127c8:	cmp	r3, #0
   127cc:	bne	12798 <__assert_fail@plt+0x1868>
   127d0:	ldrb	r2, [r4]
   127d4:	ldr	r3, [pc, #28]	; 127f8 <__assert_fail@plt+0x18c8>
   127d8:	ldr	r0, [pc, #28]	; 127fc <__assert_fail@plt+0x18cc>
   127dc:	cmp	r2, #96	; 0x60
   127e0:	movne	r0, r3
   127e4:	pop	{r4, r5, r6, pc}
   127e8:			; <UNDEFINED> instruction: 0x000167b8
   127ec:			; <UNDEFINED> instruction: 0x000167b4
   127f0:	andeq	r6, r1, r8, asr #15
   127f4:	andeq	r6, r1, r4, asr #15
   127f8:	andeq	r6, r1, r0, asr #15
   127fc:			; <UNDEFINED> instruction: 0x000167bc
   12800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12804:	sub	sp, sp, #116	; 0x74
   12808:	mov	sl, r0
   1280c:	str	r3, [sp, #24]
   12810:	mov	r3, #1
   12814:	mov	r8, r1
   12818:	str	r2, [sp, #56]	; 0x38
   1281c:	str	r3, [sp, #36]	; 0x24
   12820:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   12824:	ldr	r3, [sp, #156]	; 0x9c
   12828:	mov	fp, r8
   1282c:	mov	r2, #0
   12830:	lsr	r3, r3, #1
   12834:	and	r3, r3, #1
   12838:	str	r2, [sp, #68]	; 0x44
   1283c:	str	r3, [sp, #28]
   12840:	str	r2, [sp, #40]	; 0x28
   12844:	str	r2, [sp, #44]	; 0x2c
   12848:	str	r2, [sp, #52]	; 0x34
   1284c:	str	r2, [sp, #64]	; 0x40
   12850:	str	r2, [sp, #72]	; 0x48
   12854:	str	sl, [sp, #32]
   12858:	str	r0, [sp, #76]	; 0x4c
   1285c:	ldr	r3, [sp, #152]	; 0x98
   12860:	cmp	r3, #10
   12864:	ldrls	pc, [pc, r3, lsl #2]
   12868:	b	13a28 <__assert_fail@plt+0x2af8>
   1286c:	muleq	r1, r8, r8
   12870:	andeq	r2, r1, r0, lsl #23
   12874:	andeq	r2, r1, r4, lsr #23
   12878:	andeq	r2, r1, r8, asr #23
   1287c:	strdeq	r2, [r1], -r4
   12880:	andeq	r2, r1, r8, asr #25
   12884:	andeq	r2, r1, r0, lsr #25
   12888:	ldrdeq	r2, [r1], -ip
   1288c:	strdeq	r2, [r1], -r4
   12890:	strdeq	r2, [r1], -r4
   12894:	strdeq	r2, [r1], -r4
   12898:	mov	r3, #0
   1289c:	mov	r7, r3
   128a0:	str	r3, [sp, #28]
   128a4:	ldr	r3, [sp, #44]	; 0x2c
   128a8:	mov	sl, #0
   128ac:	eor	r3, r3, #1
   128b0:	str	r3, [sp, #60]	; 0x3c
   128b4:	ldr	r3, [sp, #24]
   128b8:	cmn	r3, #1
   128bc:	beq	12e20 <__assert_fail@plt+0x1ef0>
   128c0:	ldr	r3, [sp, #24]
   128c4:	subs	r5, r3, sl
   128c8:	movne	r5, #1
   128cc:	cmp	r5, #0
   128d0:	beq	12e38 <__assert_fail@plt+0x1f08>
   128d4:	ldr	r3, [sp, #152]	; 0x98
   128d8:	ldr	r8, [sp, #44]	; 0x2c
   128dc:	cmp	r3, #2
   128e0:	moveq	r8, #0
   128e4:	andne	r8, r8, #1
   128e8:	ldr	r3, [sp, #52]	; 0x34
   128ec:	adds	r9, r3, #0
   128f0:	movne	r9, #1
   128f4:	ands	r6, r9, r8
   128f8:	beq	132a0 <__assert_fail@plt+0x2370>
   128fc:	ldr	r2, [sp, #52]	; 0x34
   12900:	ldr	r1, [sp, #24]
   12904:	cmp	r2, #1
   12908:	mov	r3, r2
   1290c:	movls	r3, #0
   12910:	movhi	r3, #1
   12914:	cmn	r1, #1
   12918:	movne	r3, #0
   1291c:	cmp	r3, #0
   12920:	add	r4, sl, r2
   12924:	beq	12934 <__assert_fail@plt+0x1a04>
   12928:	ldr	r0, [sp, #56]	; 0x38
   1292c:	bl	10e34 <strlen@plt>
   12930:	str	r0, [sp, #24]
   12934:	ldr	r3, [sp, #24]
   12938:	cmp	r3, r4
   1293c:	ldr	r3, [sp, #56]	; 0x38
   12940:	add	r3, r3, sl
   12944:	str	r3, [sp, #48]	; 0x30
   12948:	bcc	132ac <__assert_fail@plt+0x237c>
   1294c:	mov	r0, r3
   12950:	ldr	r2, [sp, #52]	; 0x34
   12954:	ldr	r1, [sp, #64]	; 0x40
   12958:	bl	10d50 <memcmp@plt>
   1295c:	cmp	r0, #0
   12960:	bne	132ac <__assert_fail@plt+0x237c>
   12964:	ldr	r3, [sp, #28]
   12968:	cmp	r3, #0
   1296c:	bne	13b28 <__assert_fail@plt+0x2bf8>
   12970:	ldr	r3, [sp, #48]	; 0x30
   12974:	ldrb	r4, [r3]
   12978:	cmp	r4, #126	; 0x7e
   1297c:	ldrls	pc, [pc, r4, lsl #2]
   12980:	b	13240 <__assert_fail@plt+0x2310>
   12984:	andeq	r3, r1, r4, rrx
   12988:	andeq	r3, r1, r0, asr #4
   1298c:	andeq	r3, r1, r0, asr #4
   12990:	andeq	r3, r1, r0, asr #4
   12994:	andeq	r3, r1, r0, asr #4
   12998:	andeq	r3, r1, r0, asr #4
   1299c:	andeq	r3, r1, r0, asr #4
   129a0:	andeq	r3, r1, r8, asr #32
   129a4:	andeq	r3, r1, ip, lsr #32
   129a8:	andeq	r3, r1, r8, lsr #4
   129ac:	andeq	r2, r1, ip, lsl #31
   129b0:	andeq	r2, r1, r0, ror pc
   129b4:	andeq	r3, r1, r4, lsl #4
   129b8:	andeq	r3, r1, r0, ror #3
   129bc:	andeq	r3, r1, r0, asr #4
   129c0:	andeq	r3, r1, r0, asr #4
   129c4:	andeq	r3, r1, r0, asr #4
   129c8:	andeq	r3, r1, r0, asr #4
   129cc:	andeq	r3, r1, r0, asr #4
   129d0:	andeq	r3, r1, r0, asr #4
   129d4:	andeq	r3, r1, r0, asr #4
   129d8:	andeq	r3, r1, r0, asr #4
   129dc:	andeq	r3, r1, r0, asr #4
   129e0:	andeq	r3, r1, r0, asr #4
   129e4:	andeq	r3, r1, r0, asr #4
   129e8:	andeq	r3, r1, r0, asr #4
   129ec:	andeq	r3, r1, r0, asr #4
   129f0:	andeq	r3, r1, r0, asr #4
   129f4:	andeq	r3, r1, r0, asr #4
   129f8:	andeq	r3, r1, r0, asr #4
   129fc:	andeq	r3, r1, r0, asr #4
   12a00:	andeq	r3, r1, r0, asr #4
   12a04:	andeq	r3, r1, r0, lsr #4
   12a08:	andeq	r3, r1, r4, asr r1
   12a0c:	andeq	r3, r1, r4, asr r1
   12a10:	andeq	r2, r1, r4, ror #26
   12a14:	andeq	r3, r1, r4, asr r1
   12a18:	andeq	r3, r1, ip, ror #3
   12a1c:	andeq	r3, r1, r4, asr r1
   12a20:	andeq	r3, r1, r0, asr #3
   12a24:	andeq	r3, r1, r4, asr r1
   12a28:	andeq	r3, r1, r4, asr r1
   12a2c:	andeq	r3, r1, r4, asr r1
   12a30:	andeq	r3, r1, ip, ror #3
   12a34:	andeq	r3, r1, ip, ror #3
   12a38:	andeq	r3, r1, ip, ror #3
   12a3c:	andeq	r3, r1, ip, ror #3
   12a40:	andeq	r3, r1, ip, ror #3
   12a44:	andeq	r3, r1, ip, ror #3
   12a48:	andeq	r3, r1, ip, ror #3
   12a4c:	andeq	r3, r1, ip, ror #3
   12a50:	andeq	r3, r1, ip, ror #3
   12a54:	andeq	r3, r1, ip, ror #3
   12a58:	andeq	r3, r1, ip, ror #3
   12a5c:	andeq	r3, r1, ip, ror #3
   12a60:	andeq	r3, r1, ip, ror #3
   12a64:	andeq	r3, r1, ip, ror #3
   12a68:	andeq	r3, r1, ip, ror #3
   12a6c:	andeq	r3, r1, ip, ror #3
   12a70:	andeq	r3, r1, r4, asr r1
   12a74:	andeq	r3, r1, r4, asr r1
   12a78:	andeq	r3, r1, r4, asr r1
   12a7c:	andeq	r3, r1, r4, asr r1
   12a80:	muleq	r1, r0, r1
   12a84:	andeq	r3, r1, r0, asr #4
   12a88:	andeq	r3, r1, ip, ror #3
   12a8c:	andeq	r3, r1, ip, ror #3
   12a90:	andeq	r3, r1, ip, ror #3
   12a94:	andeq	r3, r1, ip, ror #3
   12a98:	andeq	r3, r1, ip, ror #3
   12a9c:	andeq	r3, r1, ip, ror #3
   12aa0:	andeq	r3, r1, ip, ror #3
   12aa4:	andeq	r3, r1, ip, ror #3
   12aa8:	andeq	r3, r1, ip, ror #3
   12aac:	andeq	r3, r1, ip, ror #3
   12ab0:	andeq	r3, r1, ip, ror #3
   12ab4:	andeq	r3, r1, ip, ror #3
   12ab8:	andeq	r3, r1, ip, ror #3
   12abc:	andeq	r3, r1, ip, ror #3
   12ac0:	andeq	r3, r1, ip, ror #3
   12ac4:	andeq	r3, r1, ip, ror #3
   12ac8:	andeq	r3, r1, ip, ror #3
   12acc:	andeq	r3, r1, ip, ror #3
   12ad0:	andeq	r3, r1, ip, ror #3
   12ad4:	andeq	r3, r1, ip, ror #3
   12ad8:	andeq	r3, r1, ip, ror #3
   12adc:	andeq	r3, r1, ip, ror #3
   12ae0:	andeq	r3, r1, ip, ror #3
   12ae4:	andeq	r3, r1, ip, ror #3
   12ae8:	andeq	r3, r1, ip, ror #3
   12aec:	andeq	r3, r1, ip, ror #3
   12af0:	andeq	r3, r1, r4, asr r1
   12af4:			; <UNDEFINED> instruction: 0x00012eb0
   12af8:	andeq	r3, r1, ip, ror #3
   12afc:	andeq	r3, r1, r4, asr r1
   12b00:	andeq	r3, r1, ip, ror #3
   12b04:	andeq	r3, r1, r4, asr r1
   12b08:	andeq	r3, r1, ip, ror #3
   12b0c:	andeq	r3, r1, ip, ror #3
   12b10:	andeq	r3, r1, ip, ror #3
   12b14:	andeq	r3, r1, ip, ror #3
   12b18:	andeq	r3, r1, ip, ror #3
   12b1c:	andeq	r3, r1, ip, ror #3
   12b20:	andeq	r3, r1, ip, ror #3
   12b24:	andeq	r3, r1, ip, ror #3
   12b28:	andeq	r3, r1, ip, ror #3
   12b2c:	andeq	r3, r1, ip, ror #3
   12b30:	andeq	r3, r1, ip, ror #3
   12b34:	andeq	r3, r1, ip, ror #3
   12b38:	andeq	r3, r1, ip, ror #3
   12b3c:	andeq	r3, r1, ip, ror #3
   12b40:	andeq	r3, r1, ip, ror #3
   12b44:	andeq	r3, r1, ip, ror #3
   12b48:	andeq	r3, r1, ip, ror #3
   12b4c:	andeq	r3, r1, ip, ror #3
   12b50:	andeq	r3, r1, ip, ror #3
   12b54:	andeq	r3, r1, ip, ror #3
   12b58:	andeq	r3, r1, ip, ror #3
   12b5c:	andeq	r3, r1, ip, ror #3
   12b60:	andeq	r3, r1, ip, ror #3
   12b64:	andeq	r3, r1, ip, ror #3
   12b68:	andeq	r3, r1, ip, ror #3
   12b6c:	andeq	r3, r1, ip, ror #3
   12b70:	andeq	r2, r1, r4, asr #26
   12b74:	andeq	r3, r1, r4, asr r1
   12b78:	andeq	r2, r1, r4, asr #26
   12b7c:	andeq	r2, r1, r4, ror #26
   12b80:	mov	r3, #1
   12b84:	str	r3, [sp, #28]
   12b88:	str	r3, [sp, #52]	; 0x34
   12b8c:	ldr	r3, [pc, #4000]	; 13b34 <__assert_fail@plt+0x2c04>
   12b90:	mov	r7, #0
   12b94:	str	r3, [sp, #64]	; 0x40
   12b98:	mov	r3, #2
   12b9c:	str	r3, [sp, #152]	; 0x98
   12ba0:	b	128a4 <__assert_fail@plt+0x1974>
   12ba4:	ldr	r3, [sp, #28]
   12ba8:	cmp	r3, #0
   12bac:	beq	12d08 <__assert_fail@plt+0x1dd8>
   12bb0:	mov	r3, #1
   12bb4:	str	r3, [sp, #52]	; 0x34
   12bb8:	ldr	r3, [pc, #3956]	; 13b34 <__assert_fail@plt+0x2c04>
   12bbc:	mov	r7, #0
   12bc0:	str	r3, [sp, #64]	; 0x40
   12bc4:	b	128a4 <__assert_fail@plt+0x1974>
   12bc8:	mov	r3, #1
   12bcc:	str	r3, [sp, #44]	; 0x2c
   12bd0:	str	r3, [sp, #52]	; 0x34
   12bd4:	str	r3, [sp, #28]
   12bd8:	b	12b8c <__assert_fail@plt+0x1c5c>
   12bdc:	mov	r3, #0
   12be0:	str	r3, [sp, #28]
   12be4:	mov	r3, #1
   12be8:	str	r3, [sp, #44]	; 0x2c
   12bec:	mov	r7, #0
   12bf0:	b	128a4 <__assert_fail@plt+0x1974>
   12bf4:	ldr	r3, [sp, #152]	; 0x98
   12bf8:	cmp	r3, #10
   12bfc:	beq	12c40 <__assert_fail@plt+0x1d10>
   12c00:	mov	r2, #5
   12c04:	ldr	r1, [pc, #3884]	; 13b38 <__assert_fail@plt+0x2c08>
   12c08:	mov	r0, #0
   12c0c:	bl	10d68 <dcgettext@plt>
   12c10:	ldr	r2, [pc, #3872]	; 13b38 <__assert_fail@plt+0x2c08>
   12c14:	cmp	r0, r2
   12c18:	str	r0, [sp, #164]	; 0xa4
   12c1c:	beq	13c24 <__assert_fail@plt+0x2cf4>
   12c20:	mov	r2, #5
   12c24:	ldr	r1, [pc, #3848]	; 13b34 <__assert_fail@plt+0x2c04>
   12c28:	mov	r0, #0
   12c2c:	bl	10d68 <dcgettext@plt>
   12c30:	ldr	r2, [pc, #3836]	; 13b34 <__assert_fail@plt+0x2c04>
   12c34:	cmp	r0, r2
   12c38:	str	r0, [sp, #168]	; 0xa8
   12c3c:	beq	13c14 <__assert_fail@plt+0x2ce4>
   12c40:	ldr	r7, [sp, #28]
   12c44:	cmp	r7, #0
   12c48:	movne	r7, #0
   12c4c:	bne	12c80 <__assert_fail@plt+0x1d50>
   12c50:	ldr	r3, [sp, #164]	; 0xa4
   12c54:	ldrb	r3, [r3]
   12c58:	cmp	r3, #0
   12c5c:	beq	13c34 <__assert_fail@plt+0x2d04>
   12c60:	ldr	r2, [sp, #164]	; 0xa4
   12c64:	ldr	r1, [sp, #32]
   12c68:	cmp	fp, r7
   12c6c:	strbhi	r3, [r1, r7]
   12c70:	ldrb	r3, [r2, #1]!
   12c74:	add	r7, r7, #1
   12c78:	cmp	r3, #0
   12c7c:	bne	12c68 <__assert_fail@plt+0x1d38>
   12c80:	ldr	r0, [sp, #168]	; 0xa8
   12c84:	bl	10e34 <strlen@plt>
   12c88:	ldr	r3, [sp, #168]	; 0xa8
   12c8c:	str	r3, [sp, #64]	; 0x40
   12c90:	mov	r3, #1
   12c94:	str	r3, [sp, #44]	; 0x2c
   12c98:	str	r0, [sp, #52]	; 0x34
   12c9c:	b	128a4 <__assert_fail@plt+0x1974>
   12ca0:	mov	r3, #1
   12ca4:	str	r3, [sp, #44]	; 0x2c
   12ca8:	str	r3, [sp, #52]	; 0x34
   12cac:	str	r3, [sp, #28]
   12cb0:	ldr	r3, [pc, #3716]	; 13b3c <__assert_fail@plt+0x2c0c>
   12cb4:	mov	r7, #0
   12cb8:	str	r3, [sp, #64]	; 0x40
   12cbc:	mov	r3, #5
   12cc0:	str	r3, [sp, #152]	; 0x98
   12cc4:	b	128a4 <__assert_fail@plt+0x1974>
   12cc8:	ldr	r3, [sp, #28]
   12ccc:	cmp	r3, #0
   12cd0:	beq	139d0 <__assert_fail@plt+0x2aa0>
   12cd4:	ldr	r3, [sp, #28]
   12cd8:	mov	r7, #0
   12cdc:	str	r3, [sp, #44]	; 0x2c
   12ce0:	mov	r3, #1
   12ce4:	str	r3, [sp, #52]	; 0x34
   12ce8:	ldr	r3, [pc, #3660]	; 13b3c <__assert_fail@plt+0x2c0c>
   12cec:	str	r3, [sp, #64]	; 0x40
   12cf0:	b	128a4 <__assert_fail@plt+0x1974>
   12cf4:	ldr	r3, [sp, #28]
   12cf8:	cmp	r3, #0
   12cfc:	mov	r3, #1
   12d00:	streq	r3, [sp, #44]	; 0x2c
   12d04:	bne	12b88 <__assert_fail@plt+0x1c58>
   12d08:	cmp	fp, #0
   12d0c:	beq	13a00 <__assert_fail@plt+0x2ad0>
   12d10:	ldr	r3, [sp, #32]
   12d14:	mov	r2, #39	; 0x27
   12d18:	mov	r7, #1
   12d1c:	strb	r2, [r3]
   12d20:	mov	r3, #0
   12d24:	str	r3, [sp, #28]
   12d28:	mov	r3, #1
   12d2c:	str	r3, [sp, #52]	; 0x34
   12d30:	ldr	r3, [pc, #3580]	; 13b34 <__assert_fail@plt+0x2c04>
   12d34:	str	r3, [sp, #64]	; 0x40
   12d38:	mov	r3, #2
   12d3c:	str	r3, [sp, #152]	; 0x98
   12d40:	b	128a4 <__assert_fail@plt+0x1974>
   12d44:	ldr	r3, [sp, #24]
   12d48:	cmn	r3, #1
   12d4c:	beq	13964 <__assert_fail@plt+0x2a34>
   12d50:	ldr	r3, [sp, #24]
   12d54:	subs	r3, r3, #1
   12d58:	movne	r3, #1
   12d5c:	cmp	r3, #0
   12d60:	bne	12d6c <__assert_fail@plt+0x1e3c>
   12d64:	cmp	sl, #0
   12d68:	beq	13158 <__assert_fail@plt+0x2228>
   12d6c:	ldr	r3, [sp, #152]	; 0x98
   12d70:	mov	r5, #0
   12d74:	sub	r2, r3, #2
   12d78:	mov	r8, r5
   12d7c:	clz	r2, r2
   12d80:	lsr	r2, r2, #5
   12d84:	ldr	r3, [sp, #60]	; 0x3c
   12d88:	ldr	r1, [sp, #28]
   12d8c:	orr	r3, r2, r3
   12d90:	eor	r3, r3, #1
   12d94:	orr	r3, r1, r3
   12d98:	tst	r3, #255	; 0xff
   12d9c:	bne	134c8 <__assert_fail@plt+0x2598>
   12da0:	cmp	r6, #0
   12da4:	bne	12ef4 <__assert_fail@plt+0x1fc4>
   12da8:	ldr	r3, [sp, #40]	; 0x28
   12dac:	eor	r8, r8, #1
   12db0:	and	r8, r8, r3
   12db4:	add	sl, sl, #1
   12db8:	uxtb	r6, r8
   12dbc:	cmp	r6, #0
   12dc0:	beq	12df4 <__assert_fail@plt+0x1ec4>
   12dc4:	cmp	fp, r7
   12dc8:	movhi	r2, #39	; 0x27
   12dcc:	ldrhi	r3, [sp, #32]
   12dd0:	strbhi	r2, [r3, r7]
   12dd4:	add	r3, r7, #1
   12dd8:	cmp	fp, r3
   12ddc:	movhi	r1, #39	; 0x27
   12de0:	ldrhi	r2, [sp, #32]
   12de4:	add	r7, r7, #2
   12de8:	strbhi	r1, [r2, r3]
   12dec:	mov	r3, #0
   12df0:	str	r3, [sp, #40]	; 0x28
   12df4:	cmp	r7, fp
   12df8:	ldrcc	r3, [sp, #32]
   12dfc:	strbcc	r4, [r3, r7]
   12e00:	ldr	r3, [sp, #36]	; 0x24
   12e04:	cmp	r5, #0
   12e08:	moveq	r3, #0
   12e0c:	str	r3, [sp, #36]	; 0x24
   12e10:	ldr	r3, [sp, #24]
   12e14:	add	r7, r7, #1
   12e18:	cmn	r3, #1
   12e1c:	bne	128c0 <__assert_fail@plt+0x1990>
   12e20:	ldr	r3, [sp, #56]	; 0x38
   12e24:	ldrb	r5, [r3, sl]
   12e28:	adds	r5, r5, #0
   12e2c:	movne	r5, #1
   12e30:	cmp	r5, #0
   12e34:	bne	128d4 <__assert_fail@plt+0x19a4>
   12e38:	ldr	r3, [sp, #152]	; 0x98
   12e3c:	ldr	r1, [sp, #28]
   12e40:	sub	r3, r3, #2
   12e44:	clz	r3, r3
   12e48:	lsr	r3, r3, #5
   12e4c:	and	r9, r1, r3
   12e50:	cmp	r7, #0
   12e54:	movne	r2, #0
   12e58:	andeq	r2, r9, #1
   12e5c:	cmp	r2, #0
   12e60:	bne	1383c <__assert_fail@plt+0x290c>
   12e64:	eor	r2, r1, #1
   12e68:	ands	r3, r3, r2
   12e6c:	beq	13cf8 <__assert_fail@plt+0x2dc8>
   12e70:	ldr	r2, [sp, #68]	; 0x44
   12e74:	cmp	r2, #0
   12e78:	beq	13ce4 <__assert_fail@plt+0x2db4>
   12e7c:	ldr	r3, [sp, #36]	; 0x24
   12e80:	cmp	r3, #0
   12e84:	bne	13c9c <__assert_fail@plt+0x2d6c>
   12e88:	ldr	r2, [sp, #72]	; 0x48
   12e8c:	clz	r3, fp
   12e90:	cmp	r2, #0
   12e94:	lsr	r3, r3, #5
   12e98:	moveq	r3, #0
   12e9c:	cmp	r3, #0
   12ea0:	beq	13c3c <__assert_fail@plt+0x2d0c>
   12ea4:	str	r3, [sp, #68]	; 0x44
   12ea8:	ldr	fp, [sp, #72]	; 0x48
   12eac:	b	1285c <__assert_fail@plt+0x192c>
   12eb0:	ldr	r3, [sp, #152]	; 0x98
   12eb4:	cmp	r3, #2
   12eb8:	beq	1350c <__assert_fail@plt+0x25dc>
   12ebc:	ldr	r3, [sp, #44]	; 0x2c
   12ec0:	ldr	r2, [sp, #28]
   12ec4:	and	r2, r3, r2
   12ec8:	ands	r2, r9, r2
   12ecc:	bne	13518 <__assert_fail@plt+0x25e8>
   12ed0:	mov	r4, #92	; 0x5c
   12ed4:	mov	r3, r4
   12ed8:	ldr	r1, [sp, #44]	; 0x2c
   12edc:	cmp	r1, #0
   12ee0:	moveq	r5, #0
   12ee4:	moveq	r8, r1
   12ee8:	beq	12d84 <__assert_fail@plt+0x1e54>
   12eec:	mov	r4, r3
   12ef0:	mov	r5, #0
   12ef4:	ldr	r3, [sp, #28]
   12ef8:	cmp	r3, #0
   12efc:	bne	13500 <__assert_fail@plt+0x25d0>
   12f00:	ldr	r3, [sp, #40]	; 0x28
   12f04:	eor	r9, r3, #1
   12f08:	and	r9, r9, r2
   12f0c:	ands	r9, r9, #255	; 0xff
   12f10:	beq	12f54 <__assert_fail@plt+0x2024>
   12f14:	cmp	fp, r7
   12f18:	movhi	r2, #39	; 0x27
   12f1c:	ldrhi	r3, [sp, #32]
   12f20:	str	r9, [sp, #40]	; 0x28
   12f24:	strbhi	r2, [r3, r7]
   12f28:	add	r3, r7, #1
   12f2c:	cmp	fp, r3
   12f30:	movhi	r1, #36	; 0x24
   12f34:	ldrhi	r2, [sp, #32]
   12f38:	strbhi	r1, [r2, r3]
   12f3c:	add	r3, r7, #2
   12f40:	cmp	fp, r3
   12f44:	add	r7, r7, #3
   12f48:	ldrhi	r2, [sp, #32]
   12f4c:	movhi	r1, #39	; 0x27
   12f50:	strbhi	r1, [r2, r3]
   12f54:	cmp	fp, r7
   12f58:	movhi	r2, #92	; 0x5c
   12f5c:	ldrhi	r3, [sp, #32]
   12f60:	add	sl, sl, #1
   12f64:	strbhi	r2, [r3, r7]
   12f68:	add	r7, r7, #1
   12f6c:	b	12df4 <__assert_fail@plt+0x1ec4>
   12f70:	ldr	r3, [sp, #152]	; 0x98
   12f74:	mov	r4, #11
   12f78:	sub	r2, r3, #2
   12f7c:	mov	r3, #118	; 0x76
   12f80:	clz	r2, r2
   12f84:	lsr	r2, r2, #5
   12f88:	b	12ed8 <__assert_fail@plt+0x1fa8>
   12f8c:	mov	r4, #10
   12f90:	mov	r3, #110	; 0x6e
   12f94:	ldr	r2, [sp, #152]	; 0x98
   12f98:	ldr	r1, [sp, #28]
   12f9c:	sub	r2, r2, #2
   12fa0:	clz	r2, r2
   12fa4:	lsr	r2, r2, #5
   12fa8:	ands	r1, r1, r2
   12fac:	beq	12ed8 <__assert_fail@plt+0x1fa8>
   12fb0:	ldr	sl, [sp, #32]
   12fb4:	mov	r8, fp
   12fb8:	mov	r2, r1
   12fbc:	mov	r3, #2
   12fc0:	str	r3, [sp, #152]	; 0x98
   12fc4:	ldr	r9, [sp, #44]	; 0x2c
   12fc8:	ldr	r3, [sp, #152]	; 0x98
   12fcc:	and	r9, r9, r2
   12fd0:	tst	r9, #255	; 0xff
   12fd4:	movne	r3, #4
   12fd8:	str	r3, [sp, #152]	; 0x98
   12fdc:	ldr	r3, [sp, #156]	; 0x9c
   12fe0:	mov	ip, #0
   12fe4:	bic	r3, r3, #2
   12fe8:	str	r3, [sp, #4]
   12fec:	ldr	r3, [sp, #168]	; 0xa8
   12ff0:	ldr	r2, [sp, #56]	; 0x38
   12ff4:	str	r3, [sp, #16]
   12ff8:	ldr	r3, [sp, #164]	; 0xa4
   12ffc:	mov	r1, r8
   13000:	str	r3, [sp, #12]
   13004:	ldr	r3, [sp, #152]	; 0x98
   13008:	mov	r0, sl
   1300c:	str	r3, [sp]
   13010:	str	ip, [sp, #8]
   13014:	ldr	r3, [sp, #24]
   13018:	bl	12800 <__assert_fail@plt+0x18d0>
   1301c:	mov	fp, r0
   13020:	mov	r0, fp
   13024:	add	sp, sp, #116	; 0x74
   13028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1302c:	ldr	r3, [sp, #152]	; 0x98
   13030:	mov	r4, #8
   13034:	sub	r2, r3, #2
   13038:	mov	r3, #98	; 0x62
   1303c:	clz	r2, r2
   13040:	lsr	r2, r2, #5
   13044:	b	12ed8 <__assert_fail@plt+0x1fa8>
   13048:	ldr	r3, [sp, #152]	; 0x98
   1304c:	mov	r4, #7
   13050:	sub	r2, r3, #2
   13054:	mov	r3, #97	; 0x61
   13058:	clz	r2, r2
   1305c:	lsr	r2, r2, #5
   13060:	b	12ed8 <__assert_fail@plt+0x1fa8>
   13064:	ldr	r3, [sp, #44]	; 0x2c
   13068:	cmp	r3, #0
   1306c:	beq	13850 <__assert_fail@plt+0x2920>
   13070:	ldr	r3, [sp, #28]
   13074:	cmp	r3, #0
   13078:	bne	13b28 <__assert_fail@plt+0x2bf8>
   1307c:	ldr	r3, [sp, #152]	; 0x98
   13080:	sub	r2, r3, #2
   13084:	ldr	r3, [sp, #40]	; 0x28
   13088:	clz	r2, r2
   1308c:	eor	r3, r3, #1
   13090:	lsr	r2, r2, #5
   13094:	ands	r3, r2, r3
   13098:	moveq	r1, r7
   1309c:	beq	130e0 <__assert_fail@plt+0x21b0>
   130a0:	cmp	fp, r7
   130a4:	movhi	r0, #39	; 0x27
   130a8:	ldrhi	r1, [sp, #32]
   130ac:	str	r3, [sp, #40]	; 0x28
   130b0:	strbhi	r0, [r1, r7]
   130b4:	add	r1, r7, #1
   130b8:	cmp	fp, r1
   130bc:	movhi	ip, #36	; 0x24
   130c0:	ldrhi	r0, [sp, #32]
   130c4:	strbhi	ip, [r0, r1]
   130c8:	add	r1, r7, #2
   130cc:	cmp	fp, r1
   130d0:	movhi	ip, #39	; 0x27
   130d4:	ldrhi	r0, [sp, #32]
   130d8:	strbhi	ip, [r0, r1]
   130dc:	add	r1, r7, #3
   130e0:	cmp	fp, r1
   130e4:	movhi	r0, #92	; 0x5c
   130e8:	ldrhi	r3, [sp, #32]
   130ec:	add	r7, r1, #1
   130f0:	strbhi	r0, [r3, r1]
   130f4:	cmp	r8, #0
   130f8:	beq	13a3c <__assert_fail@plt+0x2b0c>
   130fc:	ldr	r0, [sp, #24]
   13100:	add	r3, sl, #1
   13104:	cmp	r3, r0
   13108:	bcs	13978 <__assert_fail@plt+0x2a48>
   1310c:	ldr	r0, [sp, #56]	; 0x38
   13110:	ldrb	r3, [r0, r3]
   13114:	sub	r3, r3, #48	; 0x30
   13118:	cmp	r3, #9
   1311c:	bhi	13978 <__assert_fail@plt+0x2a48>
   13120:	cmp	fp, r7
   13124:	movhi	r3, #48	; 0x30
   13128:	ldrhi	r0, [sp, #32]
   1312c:	ldr	r5, [sp, #28]
   13130:	mov	r4, #48	; 0x30
   13134:	strbhi	r3, [r0, r7]
   13138:	add	r3, r1, #2
   1313c:	cmp	fp, r3
   13140:	movhi	r0, #48	; 0x30
   13144:	ldrhi	ip, [sp, #32]
   13148:	add	r7, r1, #3
   1314c:	strbhi	r0, [ip, r3]
   13150:	b	12d84 <__assert_fail@plt+0x1e54>
   13154:	mov	r5, #0
   13158:	ldr	r3, [sp, #152]	; 0x98
   1315c:	sub	r2, r3, #2
   13160:	ldr	r3, [sp, #28]
   13164:	clz	r2, r2
   13168:	lsr	r2, r2, #5
   1316c:	ands	r8, r3, r2
   13170:	beq	12d84 <__assert_fail@plt+0x1e54>
   13174:	mov	r3, r8
   13178:	mov	r2, r3
   1317c:	mov	r3, #2
   13180:	ldr	sl, [sp, #32]
   13184:	mov	r8, fp
   13188:	str	r3, [sp, #152]	; 0x98
   1318c:	b	12fc4 <__assert_fail@plt+0x2094>
   13190:	ldr	r3, [sp, #152]	; 0x98
   13194:	cmp	r3, #2
   13198:	beq	138bc <__assert_fail@plt+0x298c>
   1319c:	cmp	r3, #5
   131a0:	beq	1387c <__assert_fail@plt+0x294c>
   131a4:	mov	r5, #0
   131a8:	sub	r2, r3, #2
   131ac:	mov	r8, r5
   131b0:	clz	r2, r2
   131b4:	mov	r4, #63	; 0x3f
   131b8:	lsr	r2, r2, #5
   131bc:	b	12d84 <__assert_fail@plt+0x1e54>
   131c0:	ldr	r3, [sp, #152]	; 0x98
   131c4:	cmp	r3, #2
   131c8:	beq	138dc <__assert_fail@plt+0x29ac>
   131cc:	mov	r2, #0
   131d0:	str	r5, [sp, #68]	; 0x44
   131d4:	mov	r8, r2
   131d8:	mov	r4, #39	; 0x27
   131dc:	b	12d84 <__assert_fail@plt+0x1e54>
   131e0:	mov	r4, #13
   131e4:	mov	r3, #114	; 0x72
   131e8:	b	12f94 <__assert_fail@plt+0x2064>
   131ec:	ldr	r3, [sp, #152]	; 0x98
   131f0:	mov	r8, #0
   131f4:	sub	r2, r3, #2
   131f8:	clz	r2, r2
   131fc:	lsr	r2, r2, #5
   13200:	b	12d84 <__assert_fail@plt+0x1e54>
   13204:	ldr	r3, [sp, #152]	; 0x98
   13208:	mov	r4, #12
   1320c:	sub	r2, r3, #2
   13210:	mov	r3, #102	; 0x66
   13214:	clz	r2, r2
   13218:	lsr	r2, r2, #5
   1321c:	b	12ed8 <__assert_fail@plt+0x1fa8>
   13220:	mov	r5, r6
   13224:	b	13158 <__assert_fail@plt+0x2228>
   13228:	ldr	r3, [sp, #152]	; 0x98
   1322c:	sub	r2, r3, #2
   13230:	mov	r3, #116	; 0x74
   13234:	clz	r2, r2
   13238:	lsr	r2, r2, #5
   1323c:	b	12ed8 <__assert_fail@plt+0x1fa8>
   13240:	ldr	r8, [sp, #76]	; 0x4c
   13244:	cmp	r8, #1
   13248:	bne	136f8 <__assert_fail@plt+0x27c8>
   1324c:	bl	10e1c <__ctype_b_loc@plt>
   13250:	sxth	r3, r4
   13254:	mov	ip, r8
   13258:	lsl	r3, r3, #1
   1325c:	ldr	r2, [r0]
   13260:	ldrh	r3, [r2, r3]
   13264:	and	r3, r3, #16384	; 0x4000
   13268:	cmp	r3, #0
   1326c:	movne	r5, #1
   13270:	moveq	r5, #0
   13274:	moveq	r3, #1
   13278:	movne	r3, #0
   1327c:	ldr	r2, [sp, #44]	; 0x2c
   13280:	and	r3, r3, r2
   13284:	ands	r8, r3, #255	; 0xff
   13288:	bne	1358c <__assert_fail@plt+0x265c>
   1328c:	ldr	r3, [sp, #152]	; 0x98
   13290:	sub	r2, r3, #2
   13294:	clz	r2, r2
   13298:	lsr	r2, r2, #5
   1329c:	b	12d84 <__assert_fail@plt+0x1e54>
   132a0:	ldr	r3, [sp, #56]	; 0x38
   132a4:	add	r3, r3, sl
   132a8:	str	r3, [sp, #48]	; 0x30
   132ac:	ldr	r3, [sp, #48]	; 0x30
   132b0:	mov	r6, #0
   132b4:	ldrb	r4, [r3]
   132b8:	cmp	r4, #126	; 0x7e
   132bc:	ldrls	pc, [pc, r4, lsl #2]
   132c0:	b	13240 <__assert_fail@plt+0x2310>
   132c4:	andeq	r3, r1, r4, rrx
   132c8:	andeq	r3, r1, r0, asr #4
   132cc:	andeq	r3, r1, r0, asr #4
   132d0:	andeq	r3, r1, r0, asr #4
   132d4:	andeq	r3, r1, r0, asr #4
   132d8:	andeq	r3, r1, r0, asr #4
   132dc:	andeq	r3, r1, r0, asr #4
   132e0:	andeq	r3, r1, r8, asr #32
   132e4:	andeq	r3, r1, ip, lsr #32
   132e8:	andeq	r3, r1, r0, asr #9
   132ec:	andeq	r2, r1, ip, lsl #31
   132f0:	andeq	r2, r1, r0, ror pc
   132f4:	andeq	r3, r1, r4, lsl #4
   132f8:	andeq	r3, r1, r0, ror #3
   132fc:	andeq	r3, r1, r0, asr #4
   13300:	andeq	r3, r1, r0, asr #4
   13304:	andeq	r3, r1, r0, asr #4
   13308:	andeq	r3, r1, r0, asr #4
   1330c:	andeq	r3, r1, r0, asr #4
   13310:	andeq	r3, r1, r0, asr #4
   13314:	andeq	r3, r1, r0, asr #4
   13318:	andeq	r3, r1, r0, asr #4
   1331c:	andeq	r3, r1, r0, asr #4
   13320:	andeq	r3, r1, r0, asr #4
   13324:	andeq	r3, r1, r0, asr #4
   13328:	andeq	r3, r1, r0, asr #4
   1332c:	andeq	r3, r1, r0, asr #4
   13330:	andeq	r3, r1, r0, asr #4
   13334:	andeq	r3, r1, r0, asr #4
   13338:	andeq	r3, r1, r0, asr #4
   1333c:	andeq	r3, r1, r0, asr #4
   13340:	andeq	r3, r1, r0, asr #4
   13344:	andeq	r3, r1, r8, asr r1
   13348:	andeq	r3, r1, r4, asr r1
   1334c:	andeq	r3, r1, r4, asr r1
   13350:	andeq	r2, r1, r4, ror #26
   13354:	andeq	r3, r1, r4, asr r1
   13358:	andeq	r3, r1, ip, ror #3
   1335c:	andeq	r3, r1, r4, asr r1
   13360:	andeq	r3, r1, r0, asr #3
   13364:	andeq	r3, r1, r4, asr r1
   13368:	andeq	r3, r1, r4, asr r1
   1336c:	andeq	r3, r1, r4, asr r1
   13370:	andeq	r3, r1, ip, ror #3
   13374:	andeq	r3, r1, ip, ror #3
   13378:	andeq	r3, r1, ip, ror #3
   1337c:	andeq	r3, r1, ip, ror #3
   13380:	andeq	r3, r1, ip, ror #3
   13384:	andeq	r3, r1, ip, ror #3
   13388:	andeq	r3, r1, ip, ror #3
   1338c:	andeq	r3, r1, ip, ror #3
   13390:	andeq	r3, r1, ip, ror #3
   13394:	andeq	r3, r1, ip, ror #3
   13398:	andeq	r3, r1, ip, ror #3
   1339c:	andeq	r3, r1, ip, ror #3
   133a0:	andeq	r3, r1, ip, ror #3
   133a4:	andeq	r3, r1, ip, ror #3
   133a8:	andeq	r3, r1, ip, ror #3
   133ac:	andeq	r3, r1, ip, ror #3
   133b0:	andeq	r3, r1, r4, asr r1
   133b4:	andeq	r3, r1, r4, asr r1
   133b8:	andeq	r3, r1, r4, asr r1
   133bc:	andeq	r3, r1, r4, asr r1
   133c0:	muleq	r1, r0, r1
   133c4:	andeq	r3, r1, r0, asr #4
   133c8:	andeq	r3, r1, ip, ror #3
   133cc:	andeq	r3, r1, ip, ror #3
   133d0:	andeq	r3, r1, ip, ror #3
   133d4:	andeq	r3, r1, ip, ror #3
   133d8:	andeq	r3, r1, ip, ror #3
   133dc:	andeq	r3, r1, ip, ror #3
   133e0:	andeq	r3, r1, ip, ror #3
   133e4:	andeq	r3, r1, ip, ror #3
   133e8:	andeq	r3, r1, ip, ror #3
   133ec:	andeq	r3, r1, ip, ror #3
   133f0:	andeq	r3, r1, ip, ror #3
   133f4:	andeq	r3, r1, ip, ror #3
   133f8:	andeq	r3, r1, ip, ror #3
   133fc:	andeq	r3, r1, ip, ror #3
   13400:	andeq	r3, r1, ip, ror #3
   13404:	andeq	r3, r1, ip, ror #3
   13408:	andeq	r3, r1, ip, ror #3
   1340c:	andeq	r3, r1, ip, ror #3
   13410:	andeq	r3, r1, ip, ror #3
   13414:	andeq	r3, r1, ip, ror #3
   13418:	andeq	r3, r1, ip, ror #3
   1341c:	andeq	r3, r1, ip, ror #3
   13420:	andeq	r3, r1, ip, ror #3
   13424:	andeq	r3, r1, ip, ror #3
   13428:	andeq	r3, r1, ip, ror #3
   1342c:	andeq	r3, r1, ip, ror #3
   13430:	andeq	r3, r1, r4, asr r1
   13434:			; <UNDEFINED> instruction: 0x00012eb0
   13438:	andeq	r3, r1, ip, ror #3
   1343c:	andeq	r3, r1, r4, asr r1
   13440:	andeq	r3, r1, ip, ror #3
   13444:	andeq	r3, r1, r4, asr r1
   13448:	andeq	r3, r1, ip, ror #3
   1344c:	andeq	r3, r1, ip, ror #3
   13450:	andeq	r3, r1, ip, ror #3
   13454:	andeq	r3, r1, ip, ror #3
   13458:	andeq	r3, r1, ip, ror #3
   1345c:	andeq	r3, r1, ip, ror #3
   13460:	andeq	r3, r1, ip, ror #3
   13464:	andeq	r3, r1, ip, ror #3
   13468:	andeq	r3, r1, ip, ror #3
   1346c:	andeq	r3, r1, ip, ror #3
   13470:	andeq	r3, r1, ip, ror #3
   13474:	andeq	r3, r1, ip, ror #3
   13478:	andeq	r3, r1, ip, ror #3
   1347c:	andeq	r3, r1, ip, ror #3
   13480:	andeq	r3, r1, ip, ror #3
   13484:	andeq	r3, r1, ip, ror #3
   13488:	andeq	r3, r1, ip, ror #3
   1348c:	andeq	r3, r1, ip, ror #3
   13490:	andeq	r3, r1, ip, ror #3
   13494:	andeq	r3, r1, ip, ror #3
   13498:	andeq	r3, r1, ip, ror #3
   1349c:	andeq	r3, r1, ip, ror #3
   134a0:	andeq	r3, r1, ip, ror #3
   134a4:	andeq	r3, r1, ip, ror #3
   134a8:	andeq	r3, r1, ip, ror #3
   134ac:	andeq	r3, r1, ip, ror #3
   134b0:	andeq	r2, r1, r4, asr #26
   134b4:	andeq	r3, r1, r4, asr r1
   134b8:	andeq	r2, r1, r4, asr #26
   134bc:	andeq	r2, r1, r4, ror #26
   134c0:	mov	r3, #116	; 0x74
   134c4:	b	12f94 <__assert_fail@plt+0x2064>
   134c8:	ldr	r3, [sp, #160]	; 0xa0
   134cc:	cmp	r3, #0
   134d0:	beq	12da0 <__assert_fail@plt+0x1e70>
   134d4:	lsr	r3, r4, #5
   134d8:	ldr	r0, [sp, #160]	; 0xa0
   134dc:	uxtb	r3, r3
   134e0:	and	r1, r4, #31
   134e4:	ldr	r0, [r0, r3, lsl #2]
   134e8:	lsr	r3, r0, r1
   134ec:	tst	r3, #1
   134f0:	beq	12da0 <__assert_fail@plt+0x1e70>
   134f4:	ldr	r3, [sp, #28]
   134f8:	cmp	r3, #0
   134fc:	beq	12f00 <__assert_fail@plt+0x1fd0>
   13500:	ldr	sl, [sp, #32]
   13504:	mov	r8, fp
   13508:	b	12fc4 <__assert_fail@plt+0x2094>
   1350c:	ldr	r3, [sp, #28]
   13510:	cmp	r3, #0
   13514:	bne	13a68 <__assert_fail@plt+0x2b38>
   13518:	add	sl, sl, #1
   1351c:	ldr	r6, [sp, #40]	; 0x28
   13520:	mov	r5, #0
   13524:	mov	r4, #92	; 0x5c
   13528:	b	12dbc <__assert_fail@plt+0x1e8c>
   1352c:	cmp	r9, r8
   13530:	bne	137a0 <__assert_fail@plt+0x2870>
   13534:	ldr	r0, [sp, #100]	; 0x64
   13538:	bl	10d8c <iswprint@plt>
   1353c:	add	r5, r5, r4
   13540:	cmp	r0, #0
   13544:	add	r0, sp, #104	; 0x68
   13548:	moveq	r6, #0
   1354c:	bl	10d38 <mbsinit@plt>
   13550:	cmp	r0, #0
   13554:	beq	13734 <__assert_fail@plt+0x2804>
   13558:	mov	r2, r6
   1355c:	mov	ip, r5
   13560:	eor	r5, r2, #1
   13564:	ldr	r4, [sp, #80]	; 0x50
   13568:	ldr	r6, [sp, #84]	; 0x54
   1356c:	ldr	r7, [sp, #88]	; 0x58
   13570:	uxtb	r5, r5
   13574:	cmp	ip, #1
   13578:	bls	13a78 <__assert_fail@plt+0x2b48>
   1357c:	ldr	r3, [sp, #44]	; 0x2c
   13580:	and	r8, r3, r5
   13584:	mov	r5, r2
   13588:	uxtb	r8, r8
   1358c:	add	r2, sl, ip
   13590:	ldr	r0, [sp, #48]	; 0x30
   13594:	mov	r1, #0
   13598:	str	r5, [sp, #48]	; 0x30
   1359c:	ldr	r9, [sp, #28]
   135a0:	ldr	ip, [sp, #40]	; 0x28
   135a4:	ldr	r3, [sp, #32]
   135a8:	ldr	r5, [sp, #152]	; 0x98
   135ac:	b	13668 <__assert_fail@plt+0x2738>
   135b0:	cmp	r9, #0
   135b4:	bne	1398c <__assert_fail@plt+0x2a5c>
   135b8:	eor	r1, ip, #1
   135bc:	cmp	r5, #2
   135c0:	movne	r1, #0
   135c4:	andeq	r1, r1, #1
   135c8:	cmp	r1, #0
   135cc:	beq	13604 <__assert_fail@plt+0x26d4>
   135d0:	cmp	fp, r7
   135d4:	movhi	ip, #39	; 0x27
   135d8:	strbhi	ip, [r3, r7]
   135dc:	add	ip, r7, #1
   135e0:	cmp	fp, ip
   135e4:	movhi	lr, #36	; 0x24
   135e8:	strbhi	lr, [r3, ip]
   135ec:	add	ip, r7, #2
   135f0:	cmp	fp, ip
   135f4:	movhi	lr, #39	; 0x27
   135f8:	strbhi	lr, [r3, ip]
   135fc:	add	r7, r7, #3
   13600:	mov	ip, r1
   13604:	cmp	fp, r7
   13608:	movhi	r1, #92	; 0x5c
   1360c:	strbhi	r1, [r3, r7]
   13610:	add	r1, r7, #1
   13614:	cmp	fp, r1
   13618:	lsrhi	lr, r4, #6
   1361c:	addhi	lr, lr, #48	; 0x30
   13620:	strbhi	lr, [r3, r1]
   13624:	add	lr, r7, #2
   13628:	cmp	fp, lr
   1362c:	lsrhi	r1, r4, #3
   13630:	andhi	r1, r1, #7
   13634:	addhi	r1, r1, #48	; 0x30
   13638:	add	sl, sl, #1
   1363c:	strbhi	r1, [r3, lr]
   13640:	and	r4, r4, #7
   13644:	cmp	r2, sl
   13648:	add	r4, r4, #48	; 0x30
   1364c:	add	r7, r7, #3
   13650:	bls	139b0 <__assert_fail@plt+0x2a80>
   13654:	mov	r1, r8
   13658:	cmp	fp, r7
   1365c:	strbhi	r4, [r3, r7]
   13660:	ldrb	r4, [r0, #1]!
   13664:	add	r7, r7, #1
   13668:	cmp	r8, #0
   1366c:	bne	135b0 <__assert_fail@plt+0x2680>
   13670:	cmp	r6, #0
   13674:	bne	136c4 <__assert_fail@plt+0x2794>
   13678:	eor	r6, r1, #1
   1367c:	and	r6, r6, ip
   13680:	add	sl, sl, #1
   13684:	cmp	r2, sl
   13688:	uxtb	r6, r6
   1368c:	bls	136ec <__assert_fail@plt+0x27bc>
   13690:	cmp	r6, #0
   13694:	beq	13658 <__assert_fail@plt+0x2728>
   13698:	cmp	fp, r7
   1369c:	movhi	ip, #39	; 0x27
   136a0:	strbhi	ip, [r3, r7]
   136a4:	add	ip, r7, #1
   136a8:	cmp	fp, ip
   136ac:	movhi	lr, #39	; 0x27
   136b0:	strbhi	lr, [r3, ip]
   136b4:	add	r7, r7, #2
   136b8:	mov	r6, r8
   136bc:	mov	ip, r8
   136c0:	b	13658 <__assert_fail@plt+0x2728>
   136c4:	cmp	fp, r7
   136c8:	eor	r6, r1, #1
   136cc:	movhi	lr, #92	; 0x5c
   136d0:	and	r6, r6, ip
   136d4:	add	sl, sl, #1
   136d8:	strbhi	lr, [r3, r7]
   136dc:	cmp	r2, sl
   136e0:	add	r7, r7, #1
   136e4:	uxtb	r6, r6
   136e8:	bhi	13690 <__assert_fail@plt+0x2760>
   136ec:	str	ip, [sp, #40]	; 0x28
   136f0:	ldr	r5, [sp, #48]	; 0x30
   136f4:	b	12dbc <__assert_fail@plt+0x1e8c>
   136f8:	ldr	r3, [sp, #24]
   136fc:	cmn	r3, #1
   13700:	mov	r3, #0
   13704:	str	r3, [sp, #104]	; 0x68
   13708:	str	r3, [sp, #108]	; 0x6c
   1370c:	beq	13a2c <__assert_fail@plt+0x2afc>
   13710:	mov	r2, r5
   13714:	mov	r3, #0
   13718:	str	r7, [sp, #88]	; 0x58
   1371c:	ldr	r7, [sp, #152]	; 0x98
   13720:	str	r5, [sp, #92]	; 0x5c
   13724:	str	r6, [sp, #84]	; 0x54
   13728:	mov	r5, r3
   1372c:	mov	r6, r2
   13730:	str	r4, [sp, #80]	; 0x50
   13734:	ldr	r3, [sp, #56]	; 0x38
   13738:	add	r9, sl, r5
   1373c:	add	r8, r3, r9
   13740:	ldr	r3, [sp, #24]
   13744:	mov	r1, r8
   13748:	sub	r2, r3, r9
   1374c:	add	r0, sp, #100	; 0x64
   13750:	add	r3, sp, #104	; 0x68
   13754:	bl	1572c <__assert_fail@plt+0x47fc>
   13758:	subs	r4, r0, #0
   1375c:	beq	13b04 <__assert_fail@plt+0x2bd4>
   13760:	cmn	r4, #1
   13764:	beq	13ae4 <__assert_fail@plt+0x2bb4>
   13768:	cmn	r4, #2
   1376c:	beq	13a84 <__assert_fail@plt+0x2b54>
   13770:	ldr	r2, [sp, #28]
   13774:	cmp	r7, #2
   13778:	movne	r2, #0
   1377c:	andeq	r2, r2, #1
   13780:	cmp	r2, #0
   13784:	beq	13534 <__assert_fail@plt+0x2604>
   13788:	cmp	r4, #1
   1378c:	beq	13534 <__assert_fail@plt+0x2604>
   13790:	sub	r3, r4, #1
   13794:	add	r9, r3, r9
   13798:	ldr	r3, [sp, #56]	; 0x38
   1379c:	add	r9, r3, r9
   137a0:	ldrb	r3, [r8, #1]!
   137a4:	sub	r3, r3, #91	; 0x5b
   137a8:	cmp	r3, #33	; 0x21
   137ac:	ldrls	pc, [pc, r3, lsl #2]
   137b0:	b	1352c <__assert_fail@plt+0x25fc>
   137b4:	andeq	r3, r1, ip, lsr r8
   137b8:	andeq	r3, r1, ip, lsr r8
   137bc:	andeq	r3, r1, ip, lsr #10
   137c0:	andeq	r3, r1, ip, lsr r8
   137c4:	andeq	r3, r1, ip, lsr #10
   137c8:	andeq	r3, r1, ip, lsr r8
   137cc:	andeq	r3, r1, ip, lsr #10
   137d0:	andeq	r3, r1, ip, lsr #10
   137d4:	andeq	r3, r1, ip, lsr #10
   137d8:	andeq	r3, r1, ip, lsr #10
   137dc:	andeq	r3, r1, ip, lsr #10
   137e0:	andeq	r3, r1, ip, lsr #10
   137e4:	andeq	r3, r1, ip, lsr #10
   137e8:	andeq	r3, r1, ip, lsr #10
   137ec:	andeq	r3, r1, ip, lsr #10
   137f0:	andeq	r3, r1, ip, lsr #10
   137f4:	andeq	r3, r1, ip, lsr #10
   137f8:	andeq	r3, r1, ip, lsr #10
   137fc:	andeq	r3, r1, ip, lsr #10
   13800:	andeq	r3, r1, ip, lsr #10
   13804:	andeq	r3, r1, ip, lsr #10
   13808:	andeq	r3, r1, ip, lsr #10
   1380c:	andeq	r3, r1, ip, lsr #10
   13810:	andeq	r3, r1, ip, lsr #10
   13814:	andeq	r3, r1, ip, lsr #10
   13818:	andeq	r3, r1, ip, lsr #10
   1381c:	andeq	r3, r1, ip, lsr #10
   13820:	andeq	r3, r1, ip, lsr #10
   13824:	andeq	r3, r1, ip, lsr #10
   13828:	andeq	r3, r1, ip, lsr #10
   1382c:	andeq	r3, r1, ip, lsr #10
   13830:	andeq	r3, r1, ip, lsr #10
   13834:	andeq	r3, r1, ip, lsr #10
   13838:	andeq	r3, r1, ip, lsr r8
   1383c:	mov	r3, #2
   13840:	ldr	sl, [sp, #32]
   13844:	mov	r8, fp
   13848:	str	r3, [sp, #152]	; 0x98
   1384c:	b	12fc4 <__assert_fail@plt+0x2094>
   13850:	ldr	r3, [sp, #156]	; 0x9c
   13854:	tst	r3, #1
   13858:	bne	13984 <__assert_fail@plt+0x2a54>
   1385c:	ldr	r3, [sp, #152]	; 0x98
   13860:	ldr	r4, [sp, #44]	; 0x2c
   13864:	sub	r2, r3, #2
   13868:	mov	r5, #0
   1386c:	clz	r2, r2
   13870:	mov	r8, r4
   13874:	lsr	r2, r2, #5
   13878:	b	12d84 <__assert_fail@plt+0x1e54>
   1387c:	ldr	r3, [sp, #156]	; 0x9c
   13880:	ands	r9, r3, #4
   13884:	beq	139bc <__assert_fail@plt+0x2a8c>
   13888:	ldr	r2, [sp, #24]
   1388c:	add	r3, sl, #2
   13890:	cmp	r3, r2
   13894:	bcs	138a8 <__assert_fail@plt+0x2978>
   13898:	ldr	r2, [sp, #48]	; 0x30
   1389c:	ldrb	r4, [r2, #1]
   138a0:	cmp	r4, #63	; 0x3f
   138a4:	beq	13b44 <__assert_fail@plt+0x2c14>
   138a8:	mov	r2, #0
   138ac:	mov	r8, r2
   138b0:	mov	r5, r2
   138b4:	mov	r4, #63	; 0x3f
   138b8:	b	12d84 <__assert_fail@plt+0x1e54>
   138bc:	ldr	r3, [sp, #28]
   138c0:	cmp	r3, #0
   138c4:	bne	13be8 <__assert_fail@plt+0x2cb8>
   138c8:	mov	r2, r5
   138cc:	mov	r8, r3
   138d0:	mov	r5, #0
   138d4:	mov	r4, #63	; 0x3f
   138d8:	b	12d84 <__assert_fail@plt+0x1e54>
   138dc:	ldr	r3, [sp, #28]
   138e0:	cmp	r3, #0
   138e4:	bne	13be8 <__assert_fail@plt+0x2cb8>
   138e8:	ldr	r2, [sp, #72]	; 0x48
   138ec:	adds	r3, fp, #0
   138f0:	movne	r3, #1
   138f4:	cmp	r2, #0
   138f8:	movne	r3, #0
   138fc:	cmp	r3, #0
   13900:	strne	fp, [sp, #72]	; 0x48
   13904:	movne	fp, #0
   13908:	bne	13944 <__assert_fail@plt+0x2a14>
   1390c:	cmp	fp, r7
   13910:	movhi	r2, #39	; 0x27
   13914:	ldrhi	r3, [sp, #32]
   13918:	strbhi	r2, [r3, r7]
   1391c:	add	r3, r7, #1
   13920:	cmp	fp, r3
   13924:	movhi	r1, #92	; 0x5c
   13928:	ldrhi	r2, [sp, #32]
   1392c:	strbhi	r1, [r2, r3]
   13930:	add	r3, r7, #2
   13934:	cmp	fp, r3
   13938:	movhi	r1, #39	; 0x27
   1393c:	ldrhi	r2, [sp, #32]
   13940:	strbhi	r1, [r2, r3]
   13944:	ldr	r3, [sp, #28]
   13948:	add	r7, r7, #3
   1394c:	mov	r2, r5
   13950:	mov	r8, r3
   13954:	str	r5, [sp, #68]	; 0x44
   13958:	str	r3, [sp, #40]	; 0x28
   1395c:	mov	r4, #39	; 0x27
   13960:	b	12d84 <__assert_fail@plt+0x1e54>
   13964:	ldr	r3, [sp, #56]	; 0x38
   13968:	ldrb	r3, [r3, #1]
   1396c:	adds	r3, r3, #0
   13970:	movne	r3, #1
   13974:	b	12d5c <__assert_fail@plt+0x1e2c>
   13978:	ldr	r5, [sp, #28]
   1397c:	mov	r4, #48	; 0x30
   13980:	b	12d84 <__assert_fail@plt+0x1e54>
   13984:	add	sl, sl, #1
   13988:	b	128b4 <__assert_fail@plt+0x1984>
   1398c:	mov	sl, r3
   13990:	ldr	r3, [sp, #28]
   13994:	mov	r8, fp
   13998:	str	r3, [sp, #44]	; 0x2c
   1399c:	ldr	r3, [sp, #152]	; 0x98
   139a0:	sub	r2, r3, #2
   139a4:	clz	r2, r2
   139a8:	lsr	r2, r2, #5
   139ac:	b	12fc4 <__assert_fail@plt+0x2094>
   139b0:	str	ip, [sp, #40]	; 0x28
   139b4:	ldr	r5, [sp, #48]	; 0x30
   139b8:	b	12df4 <__assert_fail@plt+0x1ec4>
   139bc:	mov	r2, r9
   139c0:	mov	r8, r9
   139c4:	mov	r5, #0
   139c8:	mov	r4, #63	; 0x3f
   139cc:	b	12d84 <__assert_fail@plt+0x1e54>
   139d0:	cmp	fp, #0
   139d4:	beq	13a4c <__assert_fail@plt+0x2b1c>
   139d8:	ldr	r1, [sp, #32]
   139dc:	mov	r3, #34	; 0x22
   139e0:	mov	r2, #1
   139e4:	strb	r3, [r1]
   139e8:	ldr	r3, [pc, #332]	; 13b3c <__assert_fail@plt+0x2c0c>
   139ec:	str	r2, [sp, #52]	; 0x34
   139f0:	mov	r7, r2
   139f4:	str	r2, [sp, #44]	; 0x2c
   139f8:	str	r3, [sp, #64]	; 0x40
   139fc:	b	128a4 <__assert_fail@plt+0x1974>
   13a00:	ldr	r3, [pc, #300]	; 13b34 <__assert_fail@plt+0x2c04>
   13a04:	str	r3, [sp, #64]	; 0x40
   13a08:	mov	r3, #0
   13a0c:	str	r3, [sp, #28]
   13a10:	mov	r3, #1
   13a14:	str	r3, [sp, #52]	; 0x34
   13a18:	mov	r7, r3
   13a1c:	mov	r3, #2
   13a20:	str	r3, [sp, #152]	; 0x98
   13a24:	b	128a4 <__assert_fail@plt+0x1974>
   13a28:	bl	10f24 <abort@plt>
   13a2c:	ldr	r0, [sp, #56]	; 0x38
   13a30:	bl	10e34 <strlen@plt>
   13a34:	str	r0, [sp, #24]
   13a38:	b	13710 <__assert_fail@plt+0x27e0>
   13a3c:	mov	r5, r8
   13a40:	mov	r4, #48	; 0x30
   13a44:	ldr	r8, [sp, #44]	; 0x2c
   13a48:	b	12d84 <__assert_fail@plt+0x1e54>
   13a4c:	mov	r3, #1
   13a50:	str	r3, [sp, #52]	; 0x34
   13a54:	mov	r7, r3
   13a58:	str	r3, [sp, #44]	; 0x2c
   13a5c:	ldr	r3, [pc, #216]	; 13b3c <__assert_fail@plt+0x2c0c>
   13a60:	str	r3, [sp, #64]	; 0x40
   13a64:	b	128a4 <__assert_fail@plt+0x1974>
   13a68:	ldr	sl, [sp, #32]
   13a6c:	mov	r8, fp
   13a70:	mov	r2, r3
   13a74:	b	12fc4 <__assert_fail@plt+0x2094>
   13a78:	mov	r3, r5
   13a7c:	mov	r5, r2
   13a80:	b	1327c <__assert_fail@plt+0x234c>
   13a84:	ldr	r1, [sp, #24]
   13a88:	mov	r2, r5
   13a8c:	cmp	r1, r9
   13a90:	mov	ip, r5
   13a94:	ldr	r4, [sp, #80]	; 0x50
   13a98:	ldr	r5, [sp, #92]	; 0x5c
   13a9c:	ldr	r6, [sp, #84]	; 0x54
   13aa0:	ldr	r7, [sp, #88]	; 0x58
   13aa4:	bls	13ad8 <__assert_fail@plt+0x2ba8>
   13aa8:	ldrb	r3, [r8]
   13aac:	cmp	r3, #0
   13ab0:	bne	13ac4 <__assert_fail@plt+0x2b94>
   13ab4:	b	13adc <__assert_fail@plt+0x2bac>
   13ab8:	ldrb	r3, [r8, #1]!
   13abc:	cmp	r3, #0
   13ac0:	beq	13bdc <__assert_fail@plt+0x2cac>
   13ac4:	add	r2, r2, #1
   13ac8:	add	r3, sl, r2
   13acc:	cmp	r1, r3
   13ad0:	bhi	13ab8 <__assert_fail@plt+0x2b88>
   13ad4:	mov	ip, r2
   13ad8:	mov	r3, #0
   13adc:	mov	r2, r3
   13ae0:	b	13574 <__assert_fail@plt+0x2644>
   13ae4:	mov	r3, #0
   13ae8:	mov	ip, r5
   13aec:	ldr	r4, [sp, #80]	; 0x50
   13af0:	ldr	r5, [sp, #92]	; 0x5c
   13af4:	ldr	r6, [sp, #84]	; 0x54
   13af8:	ldr	r7, [sp, #88]	; 0x58
   13afc:	mov	r2, r3
   13b00:	b	13574 <__assert_fail@plt+0x2644>
   13b04:	mov	r3, r6
   13b08:	mov	ip, r5
   13b0c:	eor	r5, r3, #1
   13b10:	mov	r2, r6
   13b14:	ldr	r4, [sp, #80]	; 0x50
   13b18:	ldr	r6, [sp, #84]	; 0x54
   13b1c:	ldr	r7, [sp, #88]	; 0x58
   13b20:	uxtb	r5, r5
   13b24:	b	13574 <__assert_fail@plt+0x2644>
   13b28:	ldr	sl, [sp, #32]
   13b2c:	mov	r8, fp
   13b30:	b	13998 <__assert_fail@plt+0x2a68>
   13b34:	andeq	r6, r1, r8, asr #15
   13b38:	andeq	r6, r1, ip, asr #15
   13b3c:	andeq	r6, r1, r4, asr #15
   13b40:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13b44:	ldr	r2, [sp, #56]	; 0x38
   13b48:	ldrb	r1, [r2, r3]
   13b4c:	sub	r2, r1, #33	; 0x21
   13b50:	uxtb	r2, r2
   13b54:	cmp	r2, #29
   13b58:	bhi	13bf8 <__assert_fail@plt+0x2cc8>
   13b5c:	ldr	r0, [pc, #-36]	; 13b40 <__assert_fail@plt+0x2c10>
   13b60:	mov	ip, #1
   13b64:	ands	r2, r0, ip, lsl r2
   13b68:	beq	13c08 <__assert_fail@plt+0x2cd8>
   13b6c:	ldr	r2, [sp, #28]
   13b70:	cmp	r2, #0
   13b74:	bne	13d08 <__assert_fail@plt+0x2dd8>
   13b78:	cmp	fp, r7
   13b7c:	ldr	r8, [sp, #28]
   13b80:	ldrhi	r2, [sp, #32]
   13b84:	mov	sl, r3
   13b88:	mov	r5, r8
   13b8c:	strbhi	r4, [r2, r7]
   13b90:	add	r2, r7, #1
   13b94:	cmp	fp, r2
   13b98:	movhi	r0, #34	; 0x22
   13b9c:	ldrhi	ip, [sp, #32]
   13ba0:	mov	r4, r1
   13ba4:	strbhi	r0, [ip, r2]
   13ba8:	add	r2, r7, #2
   13bac:	cmp	fp, r2
   13bb0:	movhi	r0, #34	; 0x22
   13bb4:	ldrhi	ip, [sp, #32]
   13bb8:	strbhi	r0, [ip, r2]
   13bbc:	add	r2, r7, #3
   13bc0:	cmp	fp, r2
   13bc4:	movhi	r0, #63	; 0x3f
   13bc8:	ldrhi	ip, [sp, #32]
   13bcc:	add	r7, r7, #4
   13bd0:	strbhi	r0, [ip, r2]
   13bd4:	mov	r2, r8
   13bd8:	b	12d84 <__assert_fail@plt+0x1e54>
   13bdc:	mov	ip, r2
   13be0:	mov	r2, r3
   13be4:	b	13574 <__assert_fail@plt+0x2644>
   13be8:	ldr	sl, [sp, #32]
   13bec:	mov	r8, fp
   13bf0:	ldr	r2, [sp, #28]
   13bf4:	b	12fc4 <__assert_fail@plt+0x2094>
   13bf8:	mov	r2, #0
   13bfc:	mov	r8, r2
   13c00:	mov	r5, r2
   13c04:	b	12d84 <__assert_fail@plt+0x1e54>
   13c08:	mov	r8, r2
   13c0c:	mov	r5, #0
   13c10:	b	12d84 <__assert_fail@plt+0x1e54>
   13c14:	ldr	r1, [sp, #152]	; 0x98
   13c18:	bl	126e0 <__assert_fail@plt+0x17b0>
   13c1c:	str	r0, [sp, #168]	; 0xa8
   13c20:	b	12c40 <__assert_fail@plt+0x1d10>
   13c24:	ldr	r1, [sp, #152]	; 0x98
   13c28:	bl	126e0 <__assert_fail@plt+0x17b0>
   13c2c:	str	r0, [sp, #164]	; 0xa4
   13c30:	b	12c20 <__assert_fail@plt+0x1cf0>
   13c34:	ldr	r7, [sp, #28]
   13c38:	b	12c80 <__assert_fail@plt+0x1d50>
   13c3c:	ldr	sl, [sp, #32]
   13c40:	ldr	r2, [sp, #68]	; 0x44
   13c44:	mov	r8, fp
   13c48:	mov	fp, r7
   13c4c:	ldr	r3, [sp, #64]	; 0x40
   13c50:	cmp	r3, #0
   13c54:	moveq	r2, #0
   13c58:	andne	r2, r2, #1
   13c5c:	cmp	r2, #0
   13c60:	beq	13c8c <__assert_fail@plt+0x2d5c>
   13c64:	mov	r2, r3
   13c68:	ldrb	r3, [r3]
   13c6c:	cmp	r3, #0
   13c70:	beq	13c8c <__assert_fail@plt+0x2d5c>
   13c74:	cmp	r8, fp
   13c78:	strbhi	r3, [sl, fp]
   13c7c:	ldrb	r3, [r2, #1]!
   13c80:	add	fp, fp, #1
   13c84:	cmp	r3, #0
   13c88:	bne	13c74 <__assert_fail@plt+0x2d44>
   13c8c:	cmp	r8, fp
   13c90:	movhi	r3, #0
   13c94:	strbhi	r3, [sl, fp]
   13c98:	b	13020 <__assert_fail@plt+0x20f0>
   13c9c:	ldr	r3, [sp, #168]	; 0xa8
   13ca0:	ldr	sl, [sp, #32]
   13ca4:	str	r3, [sp, #16]
   13ca8:	ldr	r3, [sp, #164]	; 0xa4
   13cac:	mov	ip, #5
   13cb0:	str	r3, [sp, #12]
   13cb4:	ldr	r3, [sp, #160]	; 0xa0
   13cb8:	ldr	r2, [sp, #56]	; 0x38
   13cbc:	str	r3, [sp, #8]
   13cc0:	ldr	r3, [sp, #156]	; 0x9c
   13cc4:	ldr	r1, [sp, #72]	; 0x48
   13cc8:	str	r3, [sp, #4]
   13ccc:	mov	r0, sl
   13cd0:	ldr	r3, [sp, #24]
   13cd4:	str	ip, [sp]
   13cd8:	bl	12800 <__assert_fail@plt+0x18d0>
   13cdc:	mov	fp, r0
   13ce0:	b	13020 <__assert_fail@plt+0x20f0>
   13ce4:	mov	r8, fp
   13ce8:	ldr	sl, [sp, #32]
   13cec:	mov	fp, r7
   13cf0:	mov	r2, r3
   13cf4:	b	13c4c <__assert_fail@plt+0x2d1c>
   13cf8:	mov	r8, fp
   13cfc:	ldr	sl, [sp, #32]
   13d00:	mov	fp, r7
   13d04:	b	13c4c <__assert_fail@plt+0x2d1c>
   13d08:	ldr	sl, [sp, #32]
   13d0c:	mov	r8, fp
   13d10:	b	12fdc <__assert_fail@plt+0x20ac>
   13d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	sub	sp, sp, #52	; 0x34
   13d1c:	mov	r4, r0
   13d20:	mov	r5, r3
   13d24:	mov	sl, r1
   13d28:	mov	fp, r2
   13d2c:	bl	10e4c <__errno_location@plt>
   13d30:	ldr	r7, [pc, #412]	; 13ed4 <__assert_fail@plt+0x2fa4>
   13d34:	cmn	r4, #-2147483647	; 0x80000001
   13d38:	ldr	r6, [r7]
   13d3c:	mov	r8, r0
   13d40:	movne	r0, #0
   13d44:	moveq	r0, #1
   13d48:	ldr	r3, [r8]
   13d4c:	orrs	r0, r0, r4, lsr #31
   13d50:	str	r3, [sp, #24]
   13d54:	bne	13ed0 <__assert_fail@plt+0x2fa0>
   13d58:	ldr	r2, [r7, #4]
   13d5c:	cmp	r4, r2
   13d60:	blt	13dc0 <__assert_fail@plt+0x2e90>
   13d64:	add	r9, r7, #8
   13d68:	cmp	r6, r9
   13d6c:	str	r2, [sp, #44]	; 0x2c
   13d70:	beq	13ea0 <__assert_fail@plt+0x2f70>
   13d74:	mov	r3, #8
   13d78:	sub	r2, r4, r2
   13d7c:	mov	r0, r6
   13d80:	str	r3, [sp]
   13d84:	add	r2, r2, #1
   13d88:	mvn	r3, #-2147483648	; 0x80000000
   13d8c:	add	r1, sp, #44	; 0x2c
   13d90:	bl	14b80 <__assert_fail@plt+0x3c50>
   13d94:	mov	r6, r0
   13d98:	str	r0, [r7]
   13d9c:	ldr	r0, [r7, #4]
   13da0:	ldr	r2, [sp, #44]	; 0x2c
   13da4:	mov	r1, #0
   13da8:	sub	r2, r2, r0
   13dac:	add	r0, r6, r0, lsl #3
   13db0:	lsl	r2, r2, #3
   13db4:	bl	10e64 <memset@plt>
   13db8:	ldr	r3, [sp, #44]	; 0x2c
   13dbc:	str	r3, [r7, #4]
   13dc0:	add	r3, r6, r4, lsl #3
   13dc4:	ldr	r1, [r5, #4]
   13dc8:	ldr	r7, [r3, #4]
   13dcc:	ldr	r9, [r6, r4, lsl #3]
   13dd0:	ldr	r2, [r5, #40]	; 0x28
   13dd4:	ldr	ip, [r5, #44]	; 0x2c
   13dd8:	add	r0, r5, #8
   13ddc:	str	r3, [sp, #28]
   13de0:	ldr	r3, [r5]
   13de4:	orr	r1, r1, #1
   13de8:	mov	lr, r0
   13dec:	str	r1, [sp, #32]
   13df0:	str	r0, [sp, #36]	; 0x24
   13df4:	str	r1, [sp, #4]
   13df8:	str	r2, [sp, #12]
   13dfc:	str	r3, [sp]
   13e00:	mov	r0, r7
   13e04:	mov	r1, r9
   13e08:	str	ip, [sp, #16]
   13e0c:	str	lr, [sp, #8]
   13e10:	mov	r3, fp
   13e14:	mov	r2, sl
   13e18:	bl	12800 <__assert_fail@plt+0x18d0>
   13e1c:	cmp	r9, r0
   13e20:	bhi	13e8c <__assert_fail@plt+0x2f5c>
   13e24:	ldr	r3, [pc, #172]	; 13ed8 <__assert_fail@plt+0x2fa8>
   13e28:	add	r9, r0, #1
   13e2c:	cmp	r7, r3
   13e30:	str	r9, [r6, r4, lsl #3]
   13e34:	beq	13e40 <__assert_fail@plt+0x2f10>
   13e38:	mov	r0, r7
   13e3c:	bl	12504 <__assert_fail@plt+0x15d4>
   13e40:	mov	r0, r9
   13e44:	bl	14a1c <__assert_fail@plt+0x3aec>
   13e48:	ldr	lr, [sp, #28]
   13e4c:	ldr	ip, [r5, #44]	; 0x2c
   13e50:	ldr	r4, [r5, #40]	; 0x28
   13e54:	mov	r3, fp
   13e58:	mov	r2, sl
   13e5c:	mov	r1, r9
   13e60:	str	r0, [lr, #4]
   13e64:	ldr	lr, [r5]
   13e68:	ldr	r5, [sp, #36]	; 0x24
   13e6c:	str	ip, [sp, #16]
   13e70:	str	r5, [sp, #8]
   13e74:	ldr	r5, [sp, #32]
   13e78:	str	r4, [sp, #12]
   13e7c:	str	r5, [sp, #4]
   13e80:	str	lr, [sp]
   13e84:	mov	r7, r0
   13e88:	bl	12800 <__assert_fail@plt+0x18d0>
   13e8c:	ldr	r3, [sp, #24]
   13e90:	mov	r0, r7
   13e94:	str	r3, [r8]
   13e98:	add	sp, sp, #52	; 0x34
   13e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea0:	mov	r3, #8
   13ea4:	sub	r2, r4, r2
   13ea8:	str	r3, [sp]
   13eac:	add	r1, sp, #44	; 0x2c
   13eb0:	add	r2, r2, #1
   13eb4:	mvn	r3, #-2147483648	; 0x80000000
   13eb8:	bl	14b80 <__assert_fail@plt+0x3c50>
   13ebc:	mov	r6, r0
   13ec0:	ldm	r9, {r0, r1}
   13ec4:	str	r6, [r7]
   13ec8:	stm	r6, {r0, r1}
   13ecc:	b	13d9c <__assert_fail@plt+0x2e6c>
   13ed0:	bl	10f24 <abort@plt>
   13ed4:	strdeq	r7, [r2], -r4
   13ed8:	andeq	r7, r2, ip, ror #2
   13edc:	push	{r4, r5, r6, lr}
   13ee0:	mov	r5, r0
   13ee4:	bl	10e4c <__errno_location@plt>
   13ee8:	cmp	r5, #0
   13eec:	mov	r1, #48	; 0x30
   13ef0:	mov	r4, r0
   13ef4:	ldr	r0, [pc, #16]	; 13f0c <__assert_fail@plt+0x2fdc>
   13ef8:	ldr	r6, [r4]
   13efc:	movne	r0, r5
   13f00:	bl	14e7c <__assert_fail@plt+0x3f4c>
   13f04:	str	r6, [r4]
   13f08:	pop	{r4, r5, r6, pc}
   13f0c:	andeq	r7, r2, ip, ror #4
   13f10:	ldr	r3, [pc, #12]	; 13f24 <__assert_fail@plt+0x2ff4>
   13f14:	cmp	r0, #0
   13f18:	moveq	r0, r3
   13f1c:	ldr	r0, [r0]
   13f20:	bx	lr
   13f24:	andeq	r7, r2, ip, ror #4
   13f28:	ldr	r3, [pc, #12]	; 13f3c <__assert_fail@plt+0x300c>
   13f2c:	cmp	r0, #0
   13f30:	moveq	r0, r3
   13f34:	str	r1, [r0]
   13f38:	bx	lr
   13f3c:	andeq	r7, r2, ip, ror #4
   13f40:	ldr	r3, [pc, #52]	; 13f7c <__assert_fail@plt+0x304c>
   13f44:	cmp	r0, #0
   13f48:	moveq	r0, r3
   13f4c:	add	r3, r0, #8
   13f50:	push	{lr}		; (str lr, [sp, #-4]!)
   13f54:	lsr	lr, r1, #5
   13f58:	and	r1, r1, #31
   13f5c:	ldr	ip, [r3, lr, lsl #2]
   13f60:	lsr	r0, ip, r1
   13f64:	eor	r2, r2, r0
   13f68:	and	r2, r2, #1
   13f6c:	and	r0, r0, #1
   13f70:	eor	r1, ip, r2, lsl r1
   13f74:	str	r1, [r3, lr, lsl #2]
   13f78:	pop	{pc}		; (ldr pc, [sp], #4)
   13f7c:	andeq	r7, r2, ip, ror #4
   13f80:	ldr	r3, [pc, #16]	; 13f98 <__assert_fail@plt+0x3068>
   13f84:	cmp	r0, #0
   13f88:	movne	r3, r0
   13f8c:	ldr	r0, [r3, #4]
   13f90:	str	r1, [r3, #4]
   13f94:	bx	lr
   13f98:	andeq	r7, r2, ip, ror #4
   13f9c:	ldr	r3, [pc, #44]	; 13fd0 <__assert_fail@plt+0x30a0>
   13fa0:	cmp	r0, #0
   13fa4:	moveq	r0, r3
   13fa8:	mov	ip, #10
   13fac:	cmp	r2, #0
   13fb0:	cmpne	r1, #0
   13fb4:	str	ip, [r0]
   13fb8:	beq	13fc8 <__assert_fail@plt+0x3098>
   13fbc:	str	r1, [r0, #40]	; 0x28
   13fc0:	str	r2, [r0, #44]	; 0x2c
   13fc4:	bx	lr
   13fc8:	push	{r4, lr}
   13fcc:	bl	10f24 <abort@plt>
   13fd0:	andeq	r7, r2, ip, ror #4
   13fd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fd8:	sub	sp, sp, #24
   13fdc:	ldr	ip, [pc, #108]	; 14050 <__assert_fail@plt+0x3120>
   13fe0:	ldr	r4, [sp, #56]	; 0x38
   13fe4:	mov	r9, r2
   13fe8:	cmp	r4, #0
   13fec:	moveq	r4, ip
   13ff0:	mov	sl, r3
   13ff4:	mov	r7, r0
   13ff8:	mov	r8, r1
   13ffc:	bl	10e4c <__errno_location@plt>
   14000:	ldr	r3, [r4, #44]	; 0x2c
   14004:	mov	r1, r8
   14008:	ldr	r6, [r0]
   1400c:	str	r3, [sp, #16]
   14010:	ldr	r2, [r4, #40]	; 0x28
   14014:	add	r3, r4, #8
   14018:	str	r3, [sp, #8]
   1401c:	str	r2, [sp, #12]
   14020:	ldr	r2, [r4, #4]
   14024:	mov	r5, r0
   14028:	str	r2, [sp, #4]
   1402c:	ldr	ip, [r4]
   14030:	mov	r3, sl
   14034:	mov	r2, r9
   14038:	mov	r0, r7
   1403c:	str	ip, [sp]
   14040:	bl	12800 <__assert_fail@plt+0x18d0>
   14044:	str	r6, [r5]
   14048:	add	sp, sp, #24
   1404c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14050:	andeq	r7, r2, ip, ror #4
   14054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14058:	cmp	r3, #0
   1405c:	sub	sp, sp, #44	; 0x2c
   14060:	ldr	r4, [pc, #192]	; 14128 <__assert_fail@plt+0x31f8>
   14064:	mov	r6, r2
   14068:	movne	r4, r3
   1406c:	mov	r9, r1
   14070:	mov	r8, r0
   14074:	bl	10e4c <__errno_location@plt>
   14078:	ldr	r3, [r4, #44]	; 0x2c
   1407c:	ldr	r5, [r4, #4]
   14080:	add	sl, r4, #8
   14084:	cmp	r6, #0
   14088:	orreq	r5, r5, #1
   1408c:	mov	r1, #0
   14090:	ldr	r2, [r0]
   14094:	str	r3, [sp, #16]
   14098:	ldr	r3, [r4, #40]	; 0x28
   1409c:	stmib	sp, {r5, sl}
   140a0:	str	r3, [sp, #12]
   140a4:	ldr	r3, [r4]
   140a8:	mov	r7, r0
   140ac:	str	r2, [sp, #28]
   140b0:	str	r3, [sp]
   140b4:	mov	r2, r8
   140b8:	mov	r3, r9
   140bc:	mov	r0, r1
   140c0:	bl	12800 <__assert_fail@plt+0x18d0>
   140c4:	add	r1, r0, #1
   140c8:	mov	fp, r0
   140cc:	mov	r0, r1
   140d0:	str	r1, [sp, #36]	; 0x24
   140d4:	bl	14a1c <__assert_fail@plt+0x3aec>
   140d8:	ldr	r3, [r4, #44]	; 0x2c
   140dc:	mov	r2, r8
   140e0:	str	r3, [sp, #16]
   140e4:	ldr	r3, [r4, #40]	; 0x28
   140e8:	str	r5, [sp, #4]
   140ec:	str	r3, [sp, #12]
   140f0:	str	sl, [sp, #8]
   140f4:	ldr	ip, [r4]
   140f8:	ldr	r1, [sp, #36]	; 0x24
   140fc:	mov	r3, r9
   14100:	str	ip, [sp]
   14104:	str	r0, [sp, #32]
   14108:	bl	12800 <__assert_fail@plt+0x18d0>
   1410c:	ldr	r2, [sp, #28]
   14110:	cmp	r6, #0
   14114:	str	r2, [r7]
   14118:	ldr	r0, [sp, #32]
   1411c:	strne	fp, [r6]
   14120:	add	sp, sp, #44	; 0x2c
   14124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14128:	andeq	r7, r2, ip, ror #4
   1412c:	mov	r3, r2
   14130:	mov	r2, #0
   14134:	b	14054 <__assert_fail@plt+0x3124>
   14138:	push	{r4, r5, r6, r7, r8, lr}
   1413c:	ldr	r6, [pc, #116]	; 141b8 <__assert_fail@plt+0x3288>
   14140:	ldr	r3, [r6, #4]
   14144:	ldr	r7, [r6]
   14148:	cmp	r3, #1
   1414c:	movgt	r5, r7
   14150:	movgt	r4, #1
   14154:	ble	14174 <__assert_fail@plt+0x3244>
   14158:	ldr	r0, [r5, #12]
   1415c:	bl	12504 <__assert_fail@plt+0x15d4>
   14160:	ldr	r3, [r6, #4]
   14164:	add	r4, r4, #1
   14168:	cmp	r3, r4
   1416c:	add	r5, r5, #8
   14170:	bgt	14158 <__assert_fail@plt+0x3228>
   14174:	ldr	r0, [r7, #4]
   14178:	ldr	r4, [pc, #60]	; 141bc <__assert_fail@plt+0x328c>
   1417c:	cmp	r0, r4
   14180:	beq	14194 <__assert_fail@plt+0x3264>
   14184:	bl	12504 <__assert_fail@plt+0x15d4>
   14188:	mov	r3, #256	; 0x100
   1418c:	str	r4, [r6, #12]
   14190:	str	r3, [r6, #8]
   14194:	ldr	r4, [pc, #36]	; 141c0 <__assert_fail@plt+0x3290>
   14198:	cmp	r7, r4
   1419c:	beq	141ac <__assert_fail@plt+0x327c>
   141a0:	mov	r0, r7
   141a4:	bl	12504 <__assert_fail@plt+0x15d4>
   141a8:	str	r4, [r6]
   141ac:	mov	r3, #1
   141b0:	str	r3, [r6, #4]
   141b4:	pop	{r4, r5, r6, r7, r8, pc}
   141b8:	strdeq	r7, [r2], -r4
   141bc:	andeq	r7, r2, ip, ror #2
   141c0:	strdeq	r7, [r2], -ip
   141c4:	ldr	r3, [pc, #4]	; 141d0 <__assert_fail@plt+0x32a0>
   141c8:	mvn	r2, #0
   141cc:	b	13d14 <__assert_fail@plt+0x2de4>
   141d0:	andeq	r7, r2, ip, ror #4
   141d4:	ldr	r3, [pc]	; 141dc <__assert_fail@plt+0x32ac>
   141d8:	b	13d14 <__assert_fail@plt+0x2de4>
   141dc:	andeq	r7, r2, ip, ror #4
   141e0:	mov	r1, r0
   141e4:	ldr	r3, [pc, #8]	; 141f4 <__assert_fail@plt+0x32c4>
   141e8:	mvn	r2, #0
   141ec:	mov	r0, #0
   141f0:	b	13d14 <__assert_fail@plt+0x2de4>
   141f4:	andeq	r7, r2, ip, ror #4
   141f8:	mov	r2, r1
   141fc:	ldr	r3, [pc, #8]	; 1420c <__assert_fail@plt+0x32dc>
   14200:	mov	r1, r0
   14204:	mov	r0, #0
   14208:	b	13d14 <__assert_fail@plt+0x2de4>
   1420c:	andeq	r7, r2, ip, ror #4
   14210:	push	{r4, r5, lr}
   14214:	sub	sp, sp, #52	; 0x34
   14218:	mov	r5, r2
   1421c:	mov	r4, r0
   14220:	mov	r0, sp
   14224:	bl	126b0 <__assert_fail@plt+0x1780>
   14228:	mov	r3, sp
   1422c:	mov	r1, r5
   14230:	mov	r0, r4
   14234:	mvn	r2, #0
   14238:	bl	13d14 <__assert_fail@plt+0x2de4>
   1423c:	add	sp, sp, #52	; 0x34
   14240:	pop	{r4, r5, pc}
   14244:	push	{r4, r5, r6, lr}
   14248:	sub	sp, sp, #48	; 0x30
   1424c:	mov	r5, r2
   14250:	mov	r6, r3
   14254:	mov	r4, r0
   14258:	mov	r0, sp
   1425c:	bl	126b0 <__assert_fail@plt+0x1780>
   14260:	mov	r3, sp
   14264:	mov	r2, r6
   14268:	mov	r1, r5
   1426c:	mov	r0, r4
   14270:	bl	13d14 <__assert_fail@plt+0x2de4>
   14274:	add	sp, sp, #48	; 0x30
   14278:	pop	{r4, r5, r6, pc}
   1427c:	mov	r2, r1
   14280:	mov	r1, r0
   14284:	mov	r0, #0
   14288:	b	14210 <__assert_fail@plt+0x32e0>
   1428c:	mov	r3, r2
   14290:	mov	r2, r1
   14294:	mov	r1, r0
   14298:	mov	r0, #0
   1429c:	b	14244 <__assert_fail@plt+0x3314>
   142a0:	push	{r4, r5, r6, r7, r8, lr}
   142a4:	mov	r7, r0
   142a8:	ldr	lr, [pc, #100]	; 14314 <__assert_fail@plt+0x33e4>
   142ac:	mov	r8, r1
   142b0:	mov	r4, r2
   142b4:	ldm	lr!, {r0, r1, r2, r3}
   142b8:	sub	sp, sp, #48	; 0x30
   142bc:	mov	ip, sp
   142c0:	lsr	r5, r4, #5
   142c4:	stmia	ip!, {r0, r1, r2, r3}
   142c8:	add	r6, sp, #8
   142cc:	ldm	lr!, {r0, r1, r2, r3}
   142d0:	and	r4, r4, #31
   142d4:	stmia	ip!, {r0, r1, r2, r3}
   142d8:	ldm	lr, {r0, r1, r2, r3}
   142dc:	stm	ip, {r0, r1, r2, r3}
   142e0:	mov	r2, r8
   142e4:	ldr	lr, [r6, r5, lsl #2]
   142e8:	mov	r1, r7
   142ec:	mov	r3, sp
   142f0:	lsr	ip, lr, r4
   142f4:	eor	ip, ip, #1
   142f8:	and	ip, ip, #1
   142fc:	mov	r0, #0
   14300:	eor	r4, lr, ip, lsl r4
   14304:	str	r4, [r6, r5, lsl #2]
   14308:	bl	13d14 <__assert_fail@plt+0x2de4>
   1430c:	add	sp, sp, #48	; 0x30
   14310:	pop	{r4, r5, r6, r7, r8, pc}
   14314:	andeq	r7, r2, ip, ror #4
   14318:	mov	r2, r1
   1431c:	mvn	r1, #0
   14320:	b	142a0 <__assert_fail@plt+0x3370>
   14324:	mov	r2, #58	; 0x3a
   14328:	mvn	r1, #0
   1432c:	b	142a0 <__assert_fail@plt+0x3370>
   14330:	mov	r2, #58	; 0x3a
   14334:	b	142a0 <__assert_fail@plt+0x3370>
   14338:	push	{r4, r5, r6, r7, lr}
   1433c:	sub	sp, sp, #100	; 0x64
   14340:	mov	r6, r0
   14344:	mov	r0, sp
   14348:	mov	r7, r2
   1434c:	bl	126b0 <__assert_fail@plt+0x1780>
   14350:	mov	ip, sp
   14354:	add	lr, sp, #48	; 0x30
   14358:	ldm	ip!, {r0, r1, r2, r3}
   1435c:	stmia	lr!, {r0, r1, r2, r3}
   14360:	ldm	ip!, {r0, r1, r2, r3}
   14364:	ldr	r5, [sp, #60]	; 0x3c
   14368:	stmia	lr!, {r0, r1, r2, r3}
   1436c:	mvn	r4, r5
   14370:	ldm	ip, {r0, r1, r2, r3}
   14374:	and	ip, r4, #67108864	; 0x4000000
   14378:	eor	ip, ip, r5
   1437c:	str	ip, [sp, #60]	; 0x3c
   14380:	stm	lr, {r0, r1, r2, r3}
   14384:	mov	r1, r7
   14388:	mov	r0, r6
   1438c:	add	r3, sp, #48	; 0x30
   14390:	mvn	r2, #0
   14394:	bl	13d14 <__assert_fail@plt+0x2de4>
   14398:	add	sp, sp, #100	; 0x64
   1439c:	pop	{r4, r5, r6, r7, pc}
   143a0:	push	{r4, r5, r6, r7, r8, lr}
   143a4:	mov	r5, r1
   143a8:	ldr	lr, [pc, #100]	; 14414 <__assert_fail@plt+0x34e4>
   143ac:	mov	r4, r2
   143b0:	mov	r7, r0
   143b4:	mov	r8, r3
   143b8:	ldm	lr!, {r0, r1, r2, r3}
   143bc:	sub	sp, sp, #48	; 0x30
   143c0:	mov	ip, sp
   143c4:	mov	r6, #10
   143c8:	stmia	ip!, {r0, r1, r2, r3}
   143cc:	cmp	r4, #0
   143d0:	cmpne	r5, #0
   143d4:	ldm	lr!, {r0, r1, r2, r3}
   143d8:	str	r6, [sp]
   143dc:	stmia	ip!, {r0, r1, r2, r3}
   143e0:	ldm	lr, {r0, r1, r2, r3}
   143e4:	stm	ip, {r0, r1, r2, r3}
   143e8:	beq	14410 <__assert_fail@plt+0x34e0>
   143ec:	mov	r3, sp
   143f0:	mov	r1, r8
   143f4:	mov	r0, r7
   143f8:	ldr	r2, [sp, #72]	; 0x48
   143fc:	str	r5, [sp, #40]	; 0x28
   14400:	str	r4, [sp, #44]	; 0x2c
   14404:	bl	13d14 <__assert_fail@plt+0x2de4>
   14408:	add	sp, sp, #48	; 0x30
   1440c:	pop	{r4, r5, r6, r7, r8, pc}
   14410:	bl	10f24 <abort@plt>
   14414:	andeq	r7, r2, ip, ror #4
   14418:	push	{lr}		; (str lr, [sp, #-4]!)
   1441c:	sub	sp, sp, #12
   14420:	mvn	ip, #0
   14424:	str	ip, [sp]
   14428:	bl	143a0 <__assert_fail@plt+0x3470>
   1442c:	add	sp, sp, #12
   14430:	pop	{pc}		; (ldr pc, [sp], #4)
   14434:	push	{lr}		; (str lr, [sp, #-4]!)
   14438:	sub	sp, sp, #12
   1443c:	mvn	ip, #0
   14440:	mov	r3, r2
   14444:	str	ip, [sp]
   14448:	mov	r2, r1
   1444c:	mov	r1, r0
   14450:	mov	r0, #0
   14454:	bl	143a0 <__assert_fail@plt+0x3470>
   14458:	add	sp, sp, #12
   1445c:	pop	{pc}		; (ldr pc, [sp], #4)
   14460:	push	{lr}		; (str lr, [sp, #-4]!)
   14464:	sub	sp, sp, #12
   14468:	str	r3, [sp]
   1446c:	mov	r3, r2
   14470:	mov	r2, r1
   14474:	mov	r1, r0
   14478:	mov	r0, #0
   1447c:	bl	143a0 <__assert_fail@plt+0x3470>
   14480:	add	sp, sp, #12
   14484:	pop	{pc}		; (ldr pc, [sp], #4)
   14488:	ldr	r3, [pc]	; 14490 <__assert_fail@plt+0x3560>
   1448c:	b	13d14 <__assert_fail@plt+0x2de4>
   14490:	andeq	r7, r2, r4, lsl #2
   14494:	mov	r2, r1
   14498:	ldr	r3, [pc, #8]	; 144a8 <__assert_fail@plt+0x3578>
   1449c:	mov	r1, r0
   144a0:	mov	r0, #0
   144a4:	b	13d14 <__assert_fail@plt+0x2de4>
   144a8:	andeq	r7, r2, r4, lsl #2
   144ac:	ldr	r3, [pc, #4]	; 144b8 <__assert_fail@plt+0x3588>
   144b0:	mvn	r2, #0
   144b4:	b	13d14 <__assert_fail@plt+0x2de4>
   144b8:	andeq	r7, r2, r4, lsl #2
   144bc:	mov	r1, r0
   144c0:	ldr	r3, [pc, #8]	; 144d0 <__assert_fail@plt+0x35a0>
   144c4:	mvn	r2, #0
   144c8:	mov	r0, #0
   144cc:	b	13d14 <__assert_fail@plt+0x2de4>
   144d0:	andeq	r7, r2, r4, lsl #2
   144d4:	push	{r4, r5, r6, lr}
   144d8:	sub	sp, sp, #32
   144dc:	cmp	r1, #0
   144e0:	mov	r4, r0
   144e4:	ldr	r5, [sp, #48]	; 0x30
   144e8:	ldr	r6, [sp, #52]	; 0x34
   144ec:	beq	14804 <__assert_fail@plt+0x38d4>
   144f0:	stm	sp, {r2, r3}
   144f4:	mov	r3, r1
   144f8:	ldr	r2, [pc, #808]	; 14828 <__assert_fail@plt+0x38f8>
   144fc:	mov	r1, #1
   14500:	bl	10e88 <__fprintf_chk@plt>
   14504:	mov	r2, #5
   14508:	ldr	r1, [pc, #796]	; 1482c <__assert_fail@plt+0x38fc>
   1450c:	mov	r0, #0
   14510:	bl	10d68 <dcgettext@plt>
   14514:	ldr	r3, [pc, #788]	; 14830 <__assert_fail@plt+0x3900>
   14518:	ldr	r2, [pc, #788]	; 14834 <__assert_fail@plt+0x3904>
   1451c:	str	r3, [sp]
   14520:	mov	r1, #1
   14524:	mov	r3, r0
   14528:	mov	r0, r4
   1452c:	bl	10e88 <__fprintf_chk@plt>
   14530:	mov	r1, r4
   14534:	mov	r0, #10
   14538:	bl	10d5c <fputc_unlocked@plt>
   1453c:	mov	r2, #5
   14540:	ldr	r1, [pc, #752]	; 14838 <__assert_fail@plt+0x3908>
   14544:	mov	r0, #0
   14548:	bl	10d68 <dcgettext@plt>
   1454c:	mov	r1, #1
   14550:	ldr	r3, [pc, #740]	; 1483c <__assert_fail@plt+0x390c>
   14554:	mov	r2, r0
   14558:	mov	r0, r4
   1455c:	bl	10e88 <__fprintf_chk@plt>
   14560:	mov	r1, r4
   14564:	mov	r0, #10
   14568:	bl	10d5c <fputc_unlocked@plt>
   1456c:	cmp	r6, #9
   14570:	ldrls	pc, [pc, r6, lsl #2]
   14574:	b	1481c <__assert_fail@plt+0x38ec>
   14578:	strdeq	r4, [r1], -ip
   1457c:	andeq	r4, r1, r4, lsl #12
   14580:	andeq	r4, r1, r0, lsr r6
   14584:	andeq	r4, r1, r4, ror #12
   14588:	andeq	r4, r1, r0, lsr #13
   1458c:	ldrdeq	r4, [r1], -ip
   14590:	andeq	r4, r1, r8, lsl r7
   14594:	andeq	r4, r1, ip, asr r7
   14598:	andeq	r4, r1, ip, lsr #15
   1459c:	andeq	r4, r1, r0, lsr #11
   145a0:	ldr	r1, [pc, #664]	; 14840 <__assert_fail@plt+0x3910>
   145a4:	mov	r2, #5
   145a8:	mov	r0, #0
   145ac:	bl	10d68 <dcgettext@plt>
   145b0:	ldr	ip, [r5, #32]
   145b4:	ldr	r1, [r5, #28]
   145b8:	ldr	r2, [r5, #24]
   145bc:	ldr	r3, [r5]
   145c0:	ldr	r6, [r5, #20]
   145c4:	str	ip, [sp, #28]
   145c8:	ldr	lr, [r5, #16]
   145cc:	str	r1, [sp, #24]
   145d0:	ldr	ip, [r5, #12]
   145d4:	str	r2, [sp, #20]
   145d8:	ldr	r1, [r5, #8]
   145dc:	ldr	r2, [r5, #4]
   145e0:	str	r6, [sp, #16]
   145e4:	stmib	sp, {r1, ip, lr}
   145e8:	mov	r1, #1
   145ec:	str	r2, [sp]
   145f0:	mov	r2, r0
   145f4:	mov	r0, r4
   145f8:	bl	10e88 <__fprintf_chk@plt>
   145fc:	add	sp, sp, #32
   14600:	pop	{r4, r5, r6, pc}
   14604:	mov	r2, #5
   14608:	ldr	r1, [pc, #564]	; 14844 <__assert_fail@plt+0x3914>
   1460c:	mov	r0, #0
   14610:	bl	10d68 <dcgettext@plt>
   14614:	ldr	r3, [r5]
   14618:	mov	r1, #1
   1461c:	mov	r2, r0
   14620:	mov	r0, r4
   14624:	add	sp, sp, #32
   14628:	pop	{r4, r5, r6, lr}
   1462c:	b	10e88 <__fprintf_chk@plt>
   14630:	mov	r2, #5
   14634:	ldr	r1, [pc, #524]	; 14848 <__assert_fail@plt+0x3918>
   14638:	mov	r0, #0
   1463c:	bl	10d68 <dcgettext@plt>
   14640:	ldr	r2, [r5, #4]
   14644:	ldr	r3, [r5]
   14648:	mov	r1, #1
   1464c:	str	r2, [sp, #48]	; 0x30
   14650:	mov	r2, r0
   14654:	mov	r0, r4
   14658:	add	sp, sp, #32
   1465c:	pop	{r4, r5, r6, lr}
   14660:	b	10e88 <__fprintf_chk@plt>
   14664:	mov	r2, #5
   14668:	ldr	r1, [pc, #476]	; 1484c <__assert_fail@plt+0x391c>
   1466c:	mov	r0, #0
   14670:	bl	10d68 <dcgettext@plt>
   14674:	ldr	r1, [r5, #8]
   14678:	ldr	r2, [r5, #4]
   1467c:	ldr	r3, [r5]
   14680:	str	r1, [sp, #52]	; 0x34
   14684:	str	r2, [sp, #48]	; 0x30
   14688:	mov	r1, #1
   1468c:	mov	r2, r0
   14690:	mov	r0, r4
   14694:	add	sp, sp, #32
   14698:	pop	{r4, r5, r6, lr}
   1469c:	b	10e88 <__fprintf_chk@plt>
   146a0:	mov	r2, #5
   146a4:	ldr	r1, [pc, #420]	; 14850 <__assert_fail@plt+0x3920>
   146a8:	mov	r0, #0
   146ac:	bl	10d68 <dcgettext@plt>
   146b0:	ldr	r1, [r5, #8]
   146b4:	ldr	ip, [r5, #12]
   146b8:	ldr	r2, [r5, #4]
   146bc:	ldr	r3, [r5]
   146c0:	stmib	sp, {r1, ip}
   146c4:	str	r2, [sp]
   146c8:	mov	r1, #1
   146cc:	mov	r2, r0
   146d0:	mov	r0, r4
   146d4:	bl	10e88 <__fprintf_chk@plt>
   146d8:	b	145fc <__assert_fail@plt+0x36cc>
   146dc:	mov	r2, #5
   146e0:	ldr	r1, [pc, #364]	; 14854 <__assert_fail@plt+0x3924>
   146e4:	mov	r0, #0
   146e8:	bl	10d68 <dcgettext@plt>
   146ec:	add	r1, r5, #8
   146f0:	ldr	r2, [r5, #4]
   146f4:	ldm	r1, {r1, ip, lr}
   146f8:	ldr	r3, [r5]
   146fc:	str	r2, [sp]
   14700:	stmib	sp, {r1, ip, lr}
   14704:	mov	r1, #1
   14708:	mov	r2, r0
   1470c:	mov	r0, r4
   14710:	bl	10e88 <__fprintf_chk@plt>
   14714:	b	145fc <__assert_fail@plt+0x36cc>
   14718:	mov	r2, #5
   1471c:	ldr	r1, [pc, #308]	; 14858 <__assert_fail@plt+0x3928>
   14720:	mov	r0, #0
   14724:	bl	10d68 <dcgettext@plt>
   14728:	add	r1, r5, #8
   1472c:	ldr	r2, [r5, #4]
   14730:	ldm	r1, {r1, ip, lr}
   14734:	ldr	r6, [r5, #20]
   14738:	ldr	r3, [r5]
   1473c:	stmib	sp, {r1, ip, lr}
   14740:	mov	r1, #1
   14744:	str	r2, [sp]
   14748:	str	r6, [sp, #16]
   1474c:	mov	r2, r0
   14750:	mov	r0, r4
   14754:	bl	10e88 <__fprintf_chk@plt>
   14758:	b	145fc <__assert_fail@plt+0x36cc>
   1475c:	mov	r2, #5
   14760:	ldr	r1, [pc, #244]	; 1485c <__assert_fail@plt+0x392c>
   14764:	mov	r0, #0
   14768:	bl	10d68 <dcgettext@plt>
   1476c:	ldr	r2, [r5, #24]
   14770:	ldr	r3, [r5]
   14774:	ldr	r6, [r5, #20]
   14778:	ldr	lr, [r5, #16]
   1477c:	ldr	ip, [r5, #12]
   14780:	str	r2, [sp, #20]
   14784:	ldr	r1, [r5, #8]
   14788:	ldr	r2, [r5, #4]
   1478c:	str	r6, [sp, #16]
   14790:	stmib	sp, {r1, ip, lr}
   14794:	mov	r1, #1
   14798:	str	r2, [sp]
   1479c:	mov	r2, r0
   147a0:	mov	r0, r4
   147a4:	bl	10e88 <__fprintf_chk@plt>
   147a8:	b	145fc <__assert_fail@plt+0x36cc>
   147ac:	mov	r2, #5
   147b0:	ldr	r1, [pc, #168]	; 14860 <__assert_fail@plt+0x3930>
   147b4:	mov	r0, #0
   147b8:	bl	10d68 <dcgettext@plt>
   147bc:	ldr	r1, [r5, #28]
   147c0:	ldr	r2, [r5, #24]
   147c4:	ldr	r3, [r5]
   147c8:	ldr	r6, [r5, #20]
   147cc:	ldr	lr, [r5, #16]
   147d0:	str	r1, [sp, #24]
   147d4:	ldr	ip, [r5, #12]
   147d8:	str	r2, [sp, #20]
   147dc:	ldr	r1, [r5, #8]
   147e0:	ldr	r2, [r5, #4]
   147e4:	str	r6, [sp, #16]
   147e8:	stmib	sp, {r1, ip, lr}
   147ec:	mov	r1, #1
   147f0:	str	r2, [sp]
   147f4:	mov	r2, r0
   147f8:	mov	r0, r4
   147fc:	bl	10e88 <__fprintf_chk@plt>
   14800:	b	145fc <__assert_fail@plt+0x36cc>
   14804:	str	r3, [sp]
   14808:	mov	r1, #1
   1480c:	mov	r3, r2
   14810:	ldr	r2, [pc, #76]	; 14864 <__assert_fail@plt+0x3934>
   14814:	bl	10e88 <__fprintf_chk@plt>
   14818:	b	14504 <__assert_fail@plt+0x35d4>
   1481c:	mov	r2, #5
   14820:	ldr	r1, [pc, #64]	; 14868 <__assert_fail@plt+0x3938>
   14824:	b	145a8 <__assert_fail@plt+0x3678>
   14828:	andeq	r6, r1, r4, lsr r8
   1482c:	andeq	r6, r1, r8, asr #16
   14830:	andeq	r0, r0, r6, ror #15
   14834:	andeq	r6, r1, r0, lsr #22
   14838:	andeq	r6, r1, ip, asr #16
   1483c:	strdeq	r6, [r1], -r8
   14840:	andeq	r6, r1, r8, lsr #20
   14844:	andeq	r6, r1, ip, lsl r9
   14848:	andeq	r6, r1, ip, lsr #18
   1484c:	andeq	r6, r1, r4, asr #18
   14850:	andeq	r6, r1, r0, ror #18
   14854:	andeq	r6, r1, r0, lsl #19
   14858:	andeq	r6, r1, r4, lsr #19
   1485c:	andeq	r6, r1, ip, asr #19
   14860:	strdeq	r6, [r1], -r8
   14864:	andeq	r6, r1, r0, asr #16
   14868:	andeq	r6, r1, ip, asr sl
   1486c:	push	{r4, r5, lr}
   14870:	sub	sp, sp, #12
   14874:	ldr	r5, [sp, #24]
   14878:	ldr	ip, [r5]
   1487c:	cmp	ip, #0
   14880:	beq	1489c <__assert_fail@plt+0x396c>
   14884:	mov	lr, r5
   14888:	mov	ip, #0
   1488c:	ldr	r4, [lr, #4]!
   14890:	add	ip, ip, #1
   14894:	cmp	r4, #0
   14898:	bne	1488c <__assert_fail@plt+0x395c>
   1489c:	stm	sp, {r5, ip}
   148a0:	bl	144d4 <__assert_fail@plt+0x35a4>
   148a4:	add	sp, sp, #12
   148a8:	pop	{r4, r5, pc}
   148ac:	push	{r4, r5, lr}
   148b0:	sub	sp, sp, #52	; 0x34
   148b4:	add	r5, sp, #4
   148b8:	ldr	r4, [sp, #64]	; 0x40
   148bc:	mov	ip, #0
   148c0:	sub	r4, r4, #4
   148c4:	ldr	lr, [r4, #4]!
   148c8:	cmp	lr, #0
   148cc:	str	lr, [r5, #4]!
   148d0:	beq	148e0 <__assert_fail@plt+0x39b0>
   148d4:	add	ip, ip, #1
   148d8:	cmp	ip, #10
   148dc:	bne	148c4 <__assert_fail@plt+0x3994>
   148e0:	add	lr, sp, #8
   148e4:	str	ip, [sp, #4]
   148e8:	str	lr, [sp]
   148ec:	bl	144d4 <__assert_fail@plt+0x35a4>
   148f0:	add	sp, sp, #52	; 0x34
   148f4:	pop	{r4, r5, pc}
   148f8:	push	{r3}		; (str r3, [sp, #-4]!)
   148fc:	push	{r4, lr}
   14900:	sub	sp, sp, #60	; 0x3c
   14904:	add	lr, sp, #56	; 0x38
   14908:	add	r3, sp, #72	; 0x48
   1490c:	str	r3, [lr, #-44]!	; 0xffffffd4
   14910:	add	r4, sp, #68	; 0x44
   14914:	mov	r3, #0
   14918:	ldr	ip, [r4, #4]!
   1491c:	cmp	ip, #0
   14920:	str	ip, [lr, #4]!
   14924:	beq	14934 <__assert_fail@plt+0x3a04>
   14928:	add	r3, r3, #1
   1492c:	cmp	r3, #10
   14930:	bne	14918 <__assert_fail@plt+0x39e8>
   14934:	add	ip, sp, #16
   14938:	str	r3, [sp, #4]
   1493c:	str	ip, [sp]
   14940:	ldr	r3, [sp, #68]	; 0x44
   14944:	bl	144d4 <__assert_fail@plt+0x35a4>
   14948:	add	sp, sp, #60	; 0x3c
   1494c:	pop	{r4, lr}
   14950:	add	sp, sp, #4
   14954:	bx	lr
   14958:	ldr	r3, [pc, #116]	; 149d4 <__assert_fail@plt+0x3aa4>
   1495c:	push	{r4, lr}
   14960:	mov	r0, #10
   14964:	ldr	r1, [r3]
   14968:	bl	10d5c <fputc_unlocked@plt>
   1496c:	mov	r2, #5
   14970:	ldr	r1, [pc, #96]	; 149d8 <__assert_fail@plt+0x3aa8>
   14974:	mov	r0, #0
   14978:	bl	10d68 <dcgettext@plt>
   1497c:	ldr	r2, [pc, #88]	; 149dc <__assert_fail@plt+0x3aac>
   14980:	mov	r1, r0
   14984:	mov	r0, #1
   14988:	bl	10e70 <__printf_chk@plt>
   1498c:	mov	r2, #5
   14990:	ldr	r1, [pc, #72]	; 149e0 <__assert_fail@plt+0x3ab0>
   14994:	mov	r0, #0
   14998:	bl	10d68 <dcgettext@plt>
   1499c:	ldr	r3, [pc, #64]	; 149e4 <__assert_fail@plt+0x3ab4>
   149a0:	ldr	r2, [pc, #64]	; 149e8 <__assert_fail@plt+0x3ab8>
   149a4:	mov	r1, r0
   149a8:	mov	r0, #1
   149ac:	bl	10e70 <__printf_chk@plt>
   149b0:	mov	r2, #5
   149b4:	ldr	r1, [pc, #48]	; 149ec <__assert_fail@plt+0x3abc>
   149b8:	mov	r0, #0
   149bc:	bl	10d68 <dcgettext@plt>
   149c0:	ldr	r2, [pc, #40]	; 149f0 <__assert_fail@plt+0x3ac0>
   149c4:	pop	{r4, lr}
   149c8:	mov	r1, r0
   149cc:	mov	r0, #1
   149d0:	b	10e70 <__printf_chk@plt>
   149d4:	andeq	r7, r2, r4, asr r1
   149d8:	muleq	r1, r8, sl
   149dc:	andeq	r6, r1, ip, lsr #21
   149e0:	andeq	r6, r1, r4, asr #21
   149e4:	strdeq	r6, [r1], -r0
   149e8:	andeq	r6, r1, r8, lsl r4
   149ec:	ldrdeq	r6, [r1], -r8
   149f0:	andeq	r6, r1, r0, lsl #22
   149f4:	push	{r4, lr}
   149f8:	bl	155f4 <__assert_fail@plt+0x46c4>
   149fc:	cmp	r0, #0
   14a00:	popne	{r4, pc}
   14a04:	bl	14f3c <__assert_fail@plt+0x400c>
   14a08:	push	{r4, lr}
   14a0c:	bl	155f4 <__assert_fail@plt+0x46c4>
   14a10:	cmp	r0, #0
   14a14:	popne	{r4, pc}
   14a18:	bl	14f3c <__assert_fail@plt+0x400c>
   14a1c:	push	{r4, lr}
   14a20:	bl	155f4 <__assert_fail@plt+0x46c4>
   14a24:	cmp	r0, #0
   14a28:	popne	{r4, pc}
   14a2c:	bl	14f3c <__assert_fail@plt+0x400c>
   14a30:	push	{r4, r5, r6, lr}
   14a34:	mov	r5, r0
   14a38:	mov	r4, r1
   14a3c:	bl	15620 <__assert_fail@plt+0x46f0>
   14a40:	cmp	r0, #0
   14a44:	popne	{r4, r5, r6, pc}
   14a48:	adds	r4, r4, #0
   14a4c:	movne	r4, #1
   14a50:	cmp	r5, #0
   14a54:	orreq	r4, r4, #1
   14a58:	cmp	r4, #0
   14a5c:	popeq	{r4, r5, r6, pc}
   14a60:	bl	14f3c <__assert_fail@plt+0x400c>
   14a64:	push	{r4, lr}
   14a68:	cmp	r1, #0
   14a6c:	orreq	r1, r1, #1
   14a70:	bl	15620 <__assert_fail@plt+0x46f0>
   14a74:	cmp	r0, #0
   14a78:	popne	{r4, pc}
   14a7c:	bl	14f3c <__assert_fail@plt+0x400c>
   14a80:	push	{r4, r5, r6, lr}
   14a84:	mov	r6, r0
   14a88:	mov	r5, r1
   14a8c:	mov	r4, r2
   14a90:	bl	15780 <__assert_fail@plt+0x4850>
   14a94:	cmp	r0, #0
   14a98:	popne	{r4, r5, r6, pc}
   14a9c:	cmp	r6, #0
   14aa0:	beq	14ab0 <__assert_fail@plt+0x3b80>
   14aa4:	cmp	r5, #0
   14aa8:	cmpne	r4, #0
   14aac:	popeq	{r4, r5, r6, pc}
   14ab0:	bl	14f3c <__assert_fail@plt+0x400c>
   14ab4:	b	14a80 <__assert_fail@plt+0x3b50>
   14ab8:	cmp	r2, #0
   14abc:	cmpne	r1, #0
   14ac0:	moveq	r2, #1
   14ac4:	moveq	r1, r2
   14ac8:	push	{r4, lr}
   14acc:	bl	15780 <__assert_fail@plt+0x4850>
   14ad0:	cmp	r0, #0
   14ad4:	popne	{r4, pc}
   14ad8:	bl	14f3c <__assert_fail@plt+0x400c>
   14adc:	mov	r2, r1
   14ae0:	mov	r1, r0
   14ae4:	mov	r0, #0
   14ae8:	b	14a80 <__assert_fail@plt+0x3b50>
   14aec:	mov	r2, r1
   14af0:	mov	r1, r0
   14af4:	mov	r0, #0
   14af8:	b	14ab8 <__assert_fail@plt+0x3b88>
   14afc:	push	{r4, r5, r6, lr}
   14b00:	subs	r6, r0, #0
   14b04:	sub	sp, sp, #8
   14b08:	mov	r5, r1
   14b0c:	ldr	r4, [r1]
   14b10:	beq	14b4c <__assert_fail@plt+0x3c1c>
   14b14:	lsr	r1, r4, #1
   14b18:	add	r3, r1, #1
   14b1c:	mvn	r3, r3
   14b20:	cmp	r4, r3
   14b24:	bhi	14b48 <__assert_fail@plt+0x3c18>
   14b28:	add	r4, r4, #1
   14b2c:	add	r4, r4, r1
   14b30:	mov	r0, r6
   14b34:	mov	r1, r4
   14b38:	bl	14a80 <__assert_fail@plt+0x3b50>
   14b3c:	str	r4, [r5]
   14b40:	add	sp, sp, #8
   14b44:	pop	{r4, r5, r6, pc}
   14b48:	bl	14f3c <__assert_fail@plt+0x400c>
   14b4c:	cmp	r4, #0
   14b50:	bne	14b30 <__assert_fail@plt+0x3c00>
   14b54:	mov	r1, r2
   14b58:	mov	r0, #64	; 0x40
   14b5c:	str	r2, [sp, #4]
   14b60:	bl	158c0 <__assert_fail@plt+0x4990>
   14b64:	ldr	r2, [sp, #4]
   14b68:	cmp	r0, #0
   14b6c:	movne	r4, r0
   14b70:	addeq	r4, r0, #1
   14b74:	b	14b30 <__assert_fail@plt+0x3c00>
   14b78:	mov	r2, #1
   14b7c:	b	14afc <__assert_fail@plt+0x3bcc>
   14b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b84:	sub	sp, sp, #12
   14b88:	ldr	r6, [r1]
   14b8c:	mov	sl, r1
   14b90:	mov	r9, r0
   14b94:	asrs	r4, r6, #1
   14b98:	mov	r5, r2
   14b9c:	mov	fp, r3
   14ba0:	ldr	r7, [sp, #48]	; 0x30
   14ba4:	bmi	14d10 <__assert_fail@plt+0x3de0>
   14ba8:	mvn	r3, #-2147483648	; 0x80000000
   14bac:	sub	r3, r3, r4
   14bb0:	cmp	r6, r3
   14bb4:	movle	r3, #0
   14bb8:	movgt	r3, #1
   14bbc:	mvn	r8, fp
   14bc0:	cmp	r3, #0
   14bc4:	addeq	r4, r4, r6
   14bc8:	mvnne	r4, #-2147483648	; 0x80000000
   14bcc:	lsr	r8, r8, #31
   14bd0:	cmp	fp, r4
   14bd4:	movge	r3, #0
   14bd8:	andlt	r3, r8, #1
   14bdc:	cmp	r3, #0
   14be0:	beq	14cc8 <__assert_fail@plt+0x3d98>
   14be4:	cmp	r7, #0
   14be8:	blt	14d98 <__assert_fail@plt+0x3e68>
   14bec:	bne	14d90 <__assert_fail@plt+0x3e60>
   14bf0:	mov	r2, #64	; 0x40
   14bf4:	mov	r1, r7
   14bf8:	mov	r0, r2
   14bfc:	str	r2, [sp, #4]
   14c00:	bl	15acc <__assert_fail@plt+0x4b9c>
   14c04:	ldr	r2, [sp, #4]
   14c08:	mov	r1, r7
   14c0c:	mov	r4, r0
   14c10:	mov	r0, r2
   14c14:	bl	15cec <__assert_fail@plt+0x4dbc>
   14c18:	ldr	r2, [sp, #4]
   14c1c:	sub	r1, r2, r1
   14c20:	cmp	r9, #0
   14c24:	sub	r3, r4, r6
   14c28:	streq	r9, [sl]
   14c2c:	cmp	r3, r5
   14c30:	bge	14cb4 <__assert_fail@plt+0x3d84>
   14c34:	cmp	r5, #0
   14c38:	blt	14d24 <__assert_fail@plt+0x3df4>
   14c3c:	cmp	r6, #0
   14c40:	blt	14c60 <__assert_fail@plt+0x3d30>
   14c44:	mvn	r3, #-2147483648	; 0x80000000
   14c48:	sub	r3, r3, r5
   14c4c:	cmp	r6, r3
   14c50:	movle	r3, #0
   14c54:	movgt	r3, #1
   14c58:	cmp	r3, #0
   14c5c:	bne	14e20 <__assert_fail@plt+0x3ef0>
   14c60:	add	r5, r6, r5
   14c64:	cmp	fp, r5
   14c68:	movge	r8, #0
   14c6c:	andlt	r8, r8, #1
   14c70:	cmp	r8, #0
   14c74:	mov	r4, r5
   14c78:	bne	14e20 <__assert_fail@plt+0x3ef0>
   14c7c:	cmp	r7, #0
   14c80:	blt	14d38 <__assert_fail@plt+0x3e08>
   14c84:	beq	14cb0 <__assert_fail@plt+0x3d80>
   14c88:	cmp	r5, #0
   14c8c:	blt	14de0 <__assert_fail@plt+0x3eb0>
   14c90:	mov	r1, r7
   14c94:	mvn	r0, #-2147483648	; 0x80000000
   14c98:	bl	15acc <__assert_fail@plt+0x4b9c>
   14c9c:	cmp	r5, r0
   14ca0:	movle	r0, #0
   14ca4:	movgt	r0, #1
   14ca8:	cmp	r0, #0
   14cac:	bne	14e20 <__assert_fail@plt+0x3ef0>
   14cb0:	mul	r1, r5, r7
   14cb4:	mov	r0, r9
   14cb8:	bl	14a30 <__assert_fail@plt+0x3b00>
   14cbc:	str	r4, [sl]
   14cc0:	add	sp, sp, #12
   14cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cc8:	cmp	r7, #0
   14ccc:	blt	14d64 <__assert_fail@plt+0x3e34>
   14cd0:	beq	14bf0 <__assert_fail@plt+0x3cc0>
   14cd4:	cmp	r4, #0
   14cd8:	blt	14da0 <__assert_fail@plt+0x3e70>
   14cdc:	mov	r1, r7
   14ce0:	mvn	r0, #-2147483648	; 0x80000000
   14ce4:	bl	15acc <__assert_fail@plt+0x4b9c>
   14ce8:	cmp	r0, r4
   14cec:	movge	r0, #0
   14cf0:	movlt	r0, #1
   14cf4:	cmp	r0, #0
   14cf8:	mvnne	r2, #-2147483648	; 0x80000000
   14cfc:	bne	14bf4 <__assert_fail@plt+0x3cc4>
   14d00:	mul	r1, r7, r4
   14d04:	cmp	r1, #63	; 0x3f
   14d08:	bgt	14c20 <__assert_fail@plt+0x3cf0>
   14d0c:	b	14bf0 <__assert_fail@plt+0x3cc0>
   14d10:	rsb	r3, r4, #-2147483648	; 0x80000000
   14d14:	cmp	r6, r3
   14d18:	movge	r3, #0
   14d1c:	movlt	r3, #1
   14d20:	b	14bbc <__assert_fail@plt+0x3c8c>
   14d24:	rsb	r3, r5, #-2147483648	; 0x80000000
   14d28:	cmp	r6, r3
   14d2c:	movge	r3, #0
   14d30:	movlt	r3, #1
   14d34:	b	14c58 <__assert_fail@plt+0x3d28>
   14d38:	cmp	r5, #0
   14d3c:	blt	14dc4 <__assert_fail@plt+0x3e94>
   14d40:	cmn	r7, #1
   14d44:	beq	14cb0 <__assert_fail@plt+0x3d80>
   14d48:	mov	r1, r7
   14d4c:	mov	r0, #-2147483648	; 0x80000000
   14d50:	bl	15acc <__assert_fail@plt+0x4b9c>
   14d54:	cmp	r5, r0
   14d58:	movle	r0, #0
   14d5c:	movgt	r0, #1
   14d60:	b	14ca8 <__assert_fail@plt+0x3d78>
   14d64:	cmp	r4, #0
   14d68:	blt	14e04 <__assert_fail@plt+0x3ed4>
   14d6c:	cmn	r7, #1
   14d70:	beq	14d00 <__assert_fail@plt+0x3dd0>
   14d74:	mov	r1, r7
   14d78:	mov	r0, #-2147483648	; 0x80000000
   14d7c:	bl	15acc <__assert_fail@plt+0x4b9c>
   14d80:	cmp	r0, r4
   14d84:	movge	r0, #0
   14d88:	movlt	r0, #1
   14d8c:	b	14cf4 <__assert_fail@plt+0x3dc4>
   14d90:	mov	r4, fp
   14d94:	b	14cdc <__assert_fail@plt+0x3dac>
   14d98:	mov	r4, fp
   14d9c:	b	14d6c <__assert_fail@plt+0x3e3c>
   14da0:	cmn	r4, #1
   14da4:	beq	14d00 <__assert_fail@plt+0x3dd0>
   14da8:	mov	r1, r4
   14dac:	mov	r0, #-2147483648	; 0x80000000
   14db0:	bl	15acc <__assert_fail@plt+0x4b9c>
   14db4:	cmp	r7, r0
   14db8:	movle	r0, #0
   14dbc:	movgt	r0, #1
   14dc0:	b	14cf4 <__assert_fail@plt+0x3dc4>
   14dc4:	mov	r1, r7
   14dc8:	mvn	r0, #-2147483648	; 0x80000000
   14dcc:	bl	15acc <__assert_fail@plt+0x4b9c>
   14dd0:	cmp	r5, r0
   14dd4:	movge	r0, #0
   14dd8:	movlt	r0, #1
   14ddc:	b	14ca8 <__assert_fail@plt+0x3d78>
   14de0:	cmn	r5, #1
   14de4:	beq	14cb0 <__assert_fail@plt+0x3d80>
   14de8:	mov	r1, r5
   14dec:	mov	r0, #-2147483648	; 0x80000000
   14df0:	bl	15acc <__assert_fail@plt+0x4b9c>
   14df4:	cmp	r7, r0
   14df8:	movle	r0, #0
   14dfc:	movgt	r0, #1
   14e00:	b	14ca8 <__assert_fail@plt+0x3d78>
   14e04:	mov	r1, r7
   14e08:	mvn	r0, #-2147483648	; 0x80000000
   14e0c:	bl	15acc <__assert_fail@plt+0x4b9c>
   14e10:	cmp	r0, r4
   14e14:	movle	r0, #0
   14e18:	movgt	r0, #1
   14e1c:	b	14cf4 <__assert_fail@plt+0x3dc4>
   14e20:	bl	14f3c <__assert_fail@plt+0x400c>
   14e24:	push	{r4, lr}
   14e28:	mov	r1, #1
   14e2c:	bl	155ac <__assert_fail@plt+0x467c>
   14e30:	cmp	r0, #0
   14e34:	popne	{r4, pc}
   14e38:	bl	14f3c <__assert_fail@plt+0x400c>
   14e3c:	push	{r4, lr}
   14e40:	mov	r1, #1
   14e44:	bl	155ac <__assert_fail@plt+0x467c>
   14e48:	cmp	r0, #0
   14e4c:	popne	{r4, pc}
   14e50:	bl	14f3c <__assert_fail@plt+0x400c>
   14e54:	push	{r4, lr}
   14e58:	bl	155ac <__assert_fail@plt+0x467c>
   14e5c:	cmp	r0, #0
   14e60:	popne	{r4, pc}
   14e64:	bl	14f3c <__assert_fail@plt+0x400c>
   14e68:	push	{r4, lr}
   14e6c:	bl	155ac <__assert_fail@plt+0x467c>
   14e70:	cmp	r0, #0
   14e74:	popne	{r4, pc}
   14e78:	bl	14f3c <__assert_fail@plt+0x400c>
   14e7c:	push	{r4, r5, r6, lr}
   14e80:	mov	r6, r0
   14e84:	mov	r0, r1
   14e88:	mov	r4, r1
   14e8c:	bl	155f4 <__assert_fail@plt+0x46c4>
   14e90:	subs	r5, r0, #0
   14e94:	beq	14eac <__assert_fail@plt+0x3f7c>
   14e98:	mov	r2, r4
   14e9c:	mov	r1, r6
   14ea0:	bl	10d2c <memcpy@plt>
   14ea4:	mov	r0, r5
   14ea8:	pop	{r4, r5, r6, pc}
   14eac:	bl	14f3c <__assert_fail@plt+0x400c>
   14eb0:	push	{r4, r5, r6, lr}
   14eb4:	mov	r6, r0
   14eb8:	mov	r0, r1
   14ebc:	mov	r4, r1
   14ec0:	bl	155f4 <__assert_fail@plt+0x46c4>
   14ec4:	subs	r5, r0, #0
   14ec8:	beq	14ee0 <__assert_fail@plt+0x3fb0>
   14ecc:	mov	r2, r4
   14ed0:	mov	r1, r6
   14ed4:	bl	10d2c <memcpy@plt>
   14ed8:	mov	r0, r5
   14edc:	pop	{r4, r5, r6, pc}
   14ee0:	bl	14f3c <__assert_fail@plt+0x400c>
   14ee4:	push	{r4, r5, r6, lr}
   14ee8:	mov	r6, r0
   14eec:	add	r0, r1, #1
   14ef0:	mov	r4, r1
   14ef4:	bl	155f4 <__assert_fail@plt+0x46c4>
   14ef8:	subs	r5, r0, #0
   14efc:	beq	14f1c <__assert_fail@plt+0x3fec>
   14f00:	mov	r3, #0
   14f04:	mov	r1, r6
   14f08:	strb	r3, [r5, r4]
   14f0c:	mov	r2, r4
   14f10:	bl	10d2c <memcpy@plt>
   14f14:	mov	r0, r5
   14f18:	pop	{r4, r5, r6, pc}
   14f1c:	bl	14f3c <__assert_fail@plt+0x400c>
   14f20:	push	{r4, lr}
   14f24:	mov	r4, r0
   14f28:	bl	10e34 <strlen@plt>
   14f2c:	add	r1, r0, #1
   14f30:	mov	r0, r4
   14f34:	pop	{r4, lr}
   14f38:	b	14e7c <__assert_fail@plt+0x3f4c>
   14f3c:	ldr	r3, [pc, #44]	; 14f70 <__assert_fail@plt+0x4040>
   14f40:	push	{r4, lr}
   14f44:	mov	r2, #5
   14f48:	ldr	r1, [pc, #36]	; 14f74 <__assert_fail@plt+0x4044>
   14f4c:	mov	r0, #0
   14f50:	ldr	r4, [r3]
   14f54:	bl	10d68 <dcgettext@plt>
   14f58:	ldr	r2, [pc, #24]	; 14f78 <__assert_fail@plt+0x4048>
   14f5c:	mov	r1, #0
   14f60:	mov	r3, r0
   14f64:	mov	r0, r4
   14f68:	bl	10dd4 <error@plt>
   14f6c:	bl	10f24 <abort@plt>
   14f70:	strdeq	r7, [r2], -r0
   14f74:	andeq	r6, r1, r0, asr fp
   14f78:	strdeq	r6, [r1], -r4
   14f7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f80:	subs	r5, r1, #0
   14f84:	mov	r4, r0
   14f88:	blt	14fe4 <__assert_fail@plt+0x40b4>
   14f8c:	moveq	r6, #0
   14f90:	moveq	r7, #0
   14f94:	beq	1502c <__assert_fail@plt+0x40fc>
   14f98:	ldrd	r8, [r0]
   14f9c:	cmp	r8, #0
   14fa0:	sbcs	r3, r9, #0
   14fa4:	blt	15084 <__assert_fail@plt+0x4154>
   14fa8:	asr	r7, r5, #31
   14fac:	mov	r3, r7
   14fb0:	mov	r2, r5
   14fb4:	mvn	r0, #0
   14fb8:	mvn	r1, #-2147483648	; 0x80000000
   14fbc:	bl	15d0c <__assert_fail@plt+0x4ddc>
   14fc0:	mov	r6, r5
   14fc4:	cmp	r0, r8
   14fc8:	sbcs	r3, r1, r9
   14fcc:	bge	1502c <__assert_fail@plt+0x40fc>
   14fd0:	mvn	r2, #0
   14fd4:	mvn	r3, #-2147483648	; 0x80000000
   14fd8:	mov	r0, #1
   14fdc:	strd	r2, [r4]
   14fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fe4:	ldrd	r8, [r0]
   14fe8:	cmp	r8, #0
   14fec:	sbcs	r3, r9, #0
   14ff0:	blt	15050 <__assert_fail@plt+0x4120>
   14ff4:	cmn	r5, #1
   14ff8:	mvneq	r6, #0
   14ffc:	mvneq	r7, #0
   15000:	beq	1502c <__assert_fail@plt+0x40fc>
   15004:	asr	r7, r5, #31
   15008:	mov	r3, r7
   1500c:	mov	r2, r5
   15010:	mov	r0, #0
   15014:	mov	r1, #-2147483648	; 0x80000000
   15018:	bl	15d0c <__assert_fail@plt+0x4ddc>
   1501c:	mov	r6, r5
   15020:	cmp	r0, r8
   15024:	sbcs	r3, r1, r9
   15028:	blt	14fd0 <__assert_fail@plt+0x40a0>
   1502c:	ldr	r2, [r4]
   15030:	ldr	r1, [r4, #4]
   15034:	mov	r0, #0
   15038:	mul	ip, r2, r7
   1503c:	umull	r2, r3, r2, r5
   15040:	mla	r5, r5, r1, ip
   15044:	add	r3, r5, r3
   15048:	strd	r2, [r4]
   1504c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15050:	asr	r7, r5, #31
   15054:	mov	r3, r7
   15058:	mov	r2, r5
   1505c:	mvn	r0, #0
   15060:	mvn	r1, #-2147483648	; 0x80000000
   15064:	bl	15d0c <__assert_fail@plt+0x4ddc>
   15068:	mov	r6, r5
   1506c:	cmp	r8, r0
   15070:	sbcs	r3, r9, r1
   15074:	bge	1502c <__assert_fail@plt+0x40fc>
   15078:	mov	r2, #0
   1507c:	mov	r3, #-2147483648	; 0x80000000
   15080:	b	14fd8 <__assert_fail@plt+0x40a8>
   15084:	mvn	r3, #0
   15088:	cmp	r9, r3
   1508c:	mvn	r2, #0
   15090:	cmpeq	r8, r2
   15094:	moveq	r6, r5
   15098:	asreq	r7, r6, #31
   1509c:	beq	1502c <__assert_fail@plt+0x40fc>
   150a0:	mov	r3, r9
   150a4:	mov	r2, r8
   150a8:	mov	r0, #0
   150ac:	mov	r1, #-2147483648	; 0x80000000
   150b0:	bl	15d0c <__assert_fail@plt+0x4ddc>
   150b4:	asr	r7, r5, #31
   150b8:	mov	r6, r5
   150bc:	cmp	r0, r5
   150c0:	sbcs	r3, r1, r7
   150c4:	blt	15078 <__assert_fail@plt+0x4148>
   150c8:	b	1502c <__assert_fail@plt+0x40fc>
   150cc:	cmp	r2, #36	; 0x24
   150d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150d4:	sub	sp, sp, #20
   150d8:	bhi	1558c <__assert_fail@plt+0x465c>
   150dc:	cmp	r1, #0
   150e0:	mov	r6, r1
   150e4:	mov	r5, r2
   150e8:	addeq	r6, sp, #4
   150ec:	mov	r8, r0
   150f0:	mov	r7, r3
   150f4:	bl	10e4c <__errno_location@plt>
   150f8:	mov	r4, #0
   150fc:	mov	r2, r5
   15100:	mov	r3, r4
   15104:	mov	r1, r6
   15108:	str	r4, [r0]
   1510c:	mov	r9, r0
   15110:	mov	r0, r8
   15114:	bl	10ee8 <__strtoll_internal@plt>
   15118:	ldr	r5, [r6]
   1511c:	cmp	r8, r5
   15120:	strd	r0, [sp, #8]
   15124:	beq	15174 <__assert_fail@plt+0x4244>
   15128:	ldr	r4, [r9]
   1512c:	cmp	r4, #0
   15130:	bne	1515c <__assert_fail@plt+0x422c>
   15134:	ldr	r3, [sp, #56]	; 0x38
   15138:	cmp	r3, #0
   1513c:	beq	1514c <__assert_fail@plt+0x421c>
   15140:	ldrb	r8, [r5]
   15144:	cmp	r8, #0
   15148:	bne	151ac <__assert_fail@plt+0x427c>
   1514c:	strd	r0, [r7]
   15150:	mov	r0, r4
   15154:	add	sp, sp, #20
   15158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1515c:	cmp	r4, #34	; 0x22
   15160:	beq	153bc <__assert_fail@plt+0x448c>
   15164:	mov	r4, #4
   15168:	mov	r0, r4
   1516c:	add	sp, sp, #20
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15174:	ldr	r3, [sp, #56]	; 0x38
   15178:	cmp	r3, r4
   1517c:	beq	15164 <__assert_fail@plt+0x4234>
   15180:	ldrb	r1, [r5]
   15184:	cmp	r1, r4
   15188:	beq	15164 <__assert_fail@plt+0x4234>
   1518c:	mov	r0, r3
   15190:	bl	10e40 <strchr@plt>
   15194:	cmp	r0, r4
   15198:	beq	15164 <__assert_fail@plt+0x4234>
   1519c:	ldrb	r8, [r5]
   151a0:	mov	r2, #1
   151a4:	mov	r3, #0
   151a8:	strd	r2, [sp, #8]
   151ac:	mov	r1, r8
   151b0:	ldr	r0, [sp, #56]	; 0x38
   151b4:	bl	10e40 <strchr@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	1557c <__assert_fail@plt+0x464c>
   151c0:	sub	r3, r8, #69	; 0x45
   151c4:	cmp	r3, #47	; 0x2f
   151c8:	ldrls	pc, [pc, r3, lsl #2]
   151cc:	b	15290 <__assert_fail@plt+0x4360>
   151d0:	andeq	r5, r1, r0, lsl #7
   151d4:	muleq	r1, r0, r2
   151d8:	andeq	r5, r1, r0, lsl #7
   151dc:	muleq	r1, r0, r2
   151e0:	muleq	r1, r0, r2
   151e4:	muleq	r1, r0, r2
   151e8:	andeq	r5, r1, r0, lsl #7
   151ec:	muleq	r1, r0, r2
   151f0:	andeq	r5, r1, r0, lsl #7
   151f4:	muleq	r1, r0, r2
   151f8:	muleq	r1, r0, r2
   151fc:	andeq	r5, r1, r0, lsl #7
   15200:	muleq	r1, r0, r2
   15204:	muleq	r1, r0, r2
   15208:	muleq	r1, r0, r2
   1520c:	andeq	r5, r1, r0, lsl #7
   15210:	muleq	r1, r0, r2
   15214:	muleq	r1, r0, r2
   15218:	muleq	r1, r0, r2
   1521c:	muleq	r1, r0, r2
   15220:	andeq	r5, r1, r0, lsl #7
   15224:	andeq	r5, r1, r0, lsl #7
   15228:	muleq	r1, r0, r2
   1522c:	muleq	r1, r0, r2
   15230:	muleq	r1, r0, r2
   15234:	muleq	r1, r0, r2
   15238:	muleq	r1, r0, r2
   1523c:	muleq	r1, r0, r2
   15240:	muleq	r1, r0, r2
   15244:	muleq	r1, r0, r2
   15248:	muleq	r1, r0, r2
   1524c:	muleq	r1, r0, r2
   15250:	muleq	r1, r0, r2
   15254:	muleq	r1, r0, r2
   15258:	andeq	r5, r1, r0, lsl #7
   1525c:	muleq	r1, r0, r2
   15260:	muleq	r1, r0, r2
   15264:	muleq	r1, r0, r2
   15268:	andeq	r5, r1, r0, lsl #7
   1526c:	muleq	r1, r0, r2
   15270:	andeq	r5, r1, r0, lsl #7
   15274:	muleq	r1, r0, r2
   15278:	muleq	r1, r0, r2
   1527c:	muleq	r1, r0, r2
   15280:	muleq	r1, r0, r2
   15284:	muleq	r1, r0, r2
   15288:	muleq	r1, r0, r2
   1528c:	andeq	r5, r1, r0, lsl #7
   15290:	mov	sl, #1
   15294:	mov	r9, #1024	; 0x400
   15298:	sub	r8, r8, #66	; 0x42
   1529c:	cmp	r8, #53	; 0x35
   152a0:	ldrls	pc, [pc, r8, lsl #2]
   152a4:	b	1557c <__assert_fail@plt+0x464c>
   152a8:	muleq	r1, r4, r4
   152ac:	andeq	r5, r1, ip, ror r5
   152b0:	andeq	r5, r1, ip, ror r5
   152b4:	andeq	r5, r1, ip, ror #8
   152b8:	andeq	r5, r1, ip, ror r5
   152bc:	andeq	r5, r1, r0, asr #8
   152c0:	andeq	r5, r1, ip, ror r5
   152c4:	andeq	r5, r1, ip, ror r5
   152c8:	andeq	r5, r1, ip, ror r5
   152cc:	andeq	r5, r1, r8, lsr #8
   152d0:	andeq	r5, r1, ip, ror r5
   152d4:	andeq	r5, r1, r0, lsl #8
   152d8:	andeq	r5, r1, ip, ror r5
   152dc:	andeq	r5, r1, ip, ror r5
   152e0:	andeq	r5, r1, r4, asr r5
   152e4:	andeq	r5, r1, ip, ror r5
   152e8:	andeq	r5, r1, ip, ror r5
   152ec:	andeq	r5, r1, ip, ror r5
   152f0:	andeq	r5, r1, ip, lsr #10
   152f4:	andeq	r5, r1, ip, ror r5
   152f8:	andeq	r5, r1, ip, ror r5
   152fc:	andeq	r5, r1, ip, ror r5
   15300:	andeq	r5, r1, ip, ror r5
   15304:	andeq	r5, r1, r4, lsl #10
   15308:	ldrdeq	r5, [r1], -ip
   1530c:	andeq	r5, r1, ip, ror r5
   15310:	andeq	r5, r1, ip, ror r5
   15314:	andeq	r5, r1, ip, ror r5
   15318:	andeq	r5, r1, ip, ror r5
   1531c:	andeq	r5, r1, ip, ror r5
   15320:	andeq	r5, r1, ip, ror r5
   15324:	andeq	r5, r1, ip, ror r5
   15328:	andeq	r5, r1, r4, asr #9
   1532c:	ldrdeq	r5, [r1], -ip
   15330:	andeq	r5, r1, ip, ror r5
   15334:	andeq	r5, r1, ip, ror r5
   15338:	andeq	r5, r1, ip, ror r5
   1533c:	andeq	r5, r1, r0, asr #8
   15340:	andeq	r5, r1, ip, ror r5
   15344:	andeq	r5, r1, ip, ror r5
   15348:	andeq	r5, r1, ip, ror r5
   1534c:	andeq	r5, r1, r8, lsr #8
   15350:	andeq	r5, r1, ip, ror r5
   15354:	andeq	r5, r1, r0, lsl #8
   15358:	andeq	r5, r1, ip, ror r5
   1535c:	andeq	r5, r1, ip, ror r5
   15360:	andeq	r5, r1, ip, ror r5
   15364:	andeq	r5, r1, ip, ror r5
   15368:	andeq	r5, r1, ip, ror r5
   1536c:	andeq	r5, r1, ip, ror r5
   15370:	andeq	r5, r1, ip, lsr #10
   15374:	andeq	r5, r1, ip, ror r5
   15378:	andeq	r5, r1, ip, ror r5
   1537c:	andeq	r5, r1, ip, lsr #9
   15380:	mov	r1, #48	; 0x30
   15384:	ldr	r0, [sp, #56]	; 0x38
   15388:	bl	10e40 <strchr@plt>
   1538c:	cmp	r0, #0
   15390:	beq	15290 <__assert_fail@plt+0x4360>
   15394:	ldrb	r3, [r5, #1]
   15398:	cmp	r3, #68	; 0x44
   1539c:	beq	153b0 <__assert_fail@plt+0x4480>
   153a0:	cmp	r3, #105	; 0x69
   153a4:	beq	153c4 <__assert_fail@plt+0x4494>
   153a8:	cmp	r3, #66	; 0x42
   153ac:	bne	15290 <__assert_fail@plt+0x4360>
   153b0:	mov	sl, #2
   153b4:	mov	r9, #1000	; 0x3e8
   153b8:	b	15298 <__assert_fail@plt+0x4368>
   153bc:	mov	r4, #1
   153c0:	b	15134 <__assert_fail@plt+0x4204>
   153c4:	ldrb	sl, [r5, #2]
   153c8:	mov	r9, #1024	; 0x400
   153cc:	cmp	sl, #66	; 0x42
   153d0:	movne	sl, #1
   153d4:	moveq	sl, #3
   153d8:	b	15298 <__assert_fail@plt+0x4368>
   153dc:	mov	r8, #0
   153e0:	add	r3, r5, sl
   153e4:	str	r3, [r6]
   153e8:	ldrb	r3, [r5, sl]
   153ec:	orr	r4, r4, r8
   153f0:	ldrd	r0, [sp, #8]
   153f4:	cmp	r3, #0
   153f8:	orrne	r4, r4, #2
   153fc:	b	1514c <__assert_fail@plt+0x421c>
   15400:	mov	r1, r9
   15404:	add	r0, sp, #8
   15408:	bl	14f7c <__assert_fail@plt+0x404c>
   1540c:	mov	r1, r9
   15410:	mov	r8, r0
   15414:	add	r0, sp, #8
   15418:	bl	14f7c <__assert_fail@plt+0x404c>
   1541c:	ldr	r5, [r6]
   15420:	orr	r8, r8, r0
   15424:	b	153e0 <__assert_fail@plt+0x44b0>
   15428:	mov	r1, r9
   1542c:	add	r0, sp, #8
   15430:	bl	14f7c <__assert_fail@plt+0x404c>
   15434:	ldr	r5, [r6]
   15438:	mov	r8, r0
   1543c:	b	153e0 <__assert_fail@plt+0x44b0>
   15440:	mov	fp, #3
   15444:	mov	r8, #0
   15448:	add	r5, sp, #8
   1544c:	mov	r1, r9
   15450:	mov	r0, r5
   15454:	bl	14f7c <__assert_fail@plt+0x404c>
   15458:	subs	fp, fp, #1
   1545c:	orr	r8, r8, r0
   15460:	bne	1544c <__assert_fail@plt+0x451c>
   15464:	ldr	r5, [r6]
   15468:	b	153e0 <__assert_fail@plt+0x44b0>
   1546c:	mov	fp, #6
   15470:	mov	r8, #0
   15474:	add	r5, sp, #8
   15478:	mov	r1, r9
   1547c:	mov	r0, r5
   15480:	bl	14f7c <__assert_fail@plt+0x404c>
   15484:	subs	fp, fp, #1
   15488:	orr	r8, r8, r0
   1548c:	bne	15478 <__assert_fail@plt+0x4548>
   15490:	b	15464 <__assert_fail@plt+0x4534>
   15494:	mov	r1, #1024	; 0x400
   15498:	add	r0, sp, #8
   1549c:	bl	14f7c <__assert_fail@plt+0x404c>
   154a0:	ldr	r5, [r6]
   154a4:	mov	r8, r0
   154a8:	b	153e0 <__assert_fail@plt+0x44b0>
   154ac:	mov	r1, #2
   154b0:	add	r0, sp, #8
   154b4:	bl	14f7c <__assert_fail@plt+0x404c>
   154b8:	ldr	r5, [r6]
   154bc:	mov	r8, r0
   154c0:	b	153e0 <__assert_fail@plt+0x44b0>
   154c4:	mov	r1, #512	; 0x200
   154c8:	add	r0, sp, #8
   154cc:	bl	14f7c <__assert_fail@plt+0x404c>
   154d0:	ldr	r5, [r6]
   154d4:	mov	r8, r0
   154d8:	b	153e0 <__assert_fail@plt+0x44b0>
   154dc:	mov	fp, #7
   154e0:	mov	r8, #0
   154e4:	add	r5, sp, #8
   154e8:	mov	r1, r9
   154ec:	mov	r0, r5
   154f0:	bl	14f7c <__assert_fail@plt+0x404c>
   154f4:	subs	fp, fp, #1
   154f8:	orr	r8, r8, r0
   154fc:	bne	154e8 <__assert_fail@plt+0x45b8>
   15500:	b	15464 <__assert_fail@plt+0x4534>
   15504:	mov	fp, #8
   15508:	mov	r8, #0
   1550c:	add	r5, sp, fp
   15510:	mov	r1, r9
   15514:	mov	r0, r5
   15518:	bl	14f7c <__assert_fail@plt+0x404c>
   1551c:	subs	fp, fp, #1
   15520:	orr	r8, r8, r0
   15524:	bne	15510 <__assert_fail@plt+0x45e0>
   15528:	b	15464 <__assert_fail@plt+0x4534>
   1552c:	mov	fp, #4
   15530:	mov	r8, #0
   15534:	add	r5, sp, #8
   15538:	mov	r1, r9
   1553c:	mov	r0, r5
   15540:	bl	14f7c <__assert_fail@plt+0x404c>
   15544:	subs	fp, fp, #1
   15548:	orr	r8, r8, r0
   1554c:	bne	15538 <__assert_fail@plt+0x4608>
   15550:	b	15464 <__assert_fail@plt+0x4534>
   15554:	mov	fp, #5
   15558:	mov	r8, #0
   1555c:	add	r5, sp, #8
   15560:	mov	r1, r9
   15564:	mov	r0, r5
   15568:	bl	14f7c <__assert_fail@plt+0x404c>
   1556c:	subs	fp, fp, #1
   15570:	orr	r8, r8, r0
   15574:	bne	15560 <__assert_fail@plt+0x4630>
   15578:	b	15464 <__assert_fail@plt+0x4534>
   1557c:	ldrd	r2, [sp, #8]
   15580:	orr	r4, r4, #2
   15584:	strd	r2, [r7]
   15588:	b	15150 <__assert_fail@plt+0x4220>
   1558c:	ldr	r3, [pc, #12]	; 155a0 <__assert_fail@plt+0x4670>
   15590:	mov	r2, #85	; 0x55
   15594:	ldr	r1, [pc, #8]	; 155a4 <__assert_fail@plt+0x4674>
   15598:	ldr	r0, [pc, #8]	; 155a8 <__assert_fail@plt+0x4678>
   1559c:	bl	10f30 <__assert_fail@plt>
   155a0:	andeq	r6, r1, r4, ror #22
   155a4:	andeq	r6, r1, r0, ror fp
   155a8:	andeq	r6, r1, r0, lsl #23
   155ac:	cmp	r1, #0
   155b0:	cmpne	r0, #0
   155b4:	moveq	r1, #1
   155b8:	moveq	r0, r1
   155bc:	umull	r2, r3, r0, r1
   155c0:	adds	r3, r3, #0
   155c4:	movne	r3, #1
   155c8:	cmp	r2, #0
   155cc:	blt	155dc <__assert_fail@plt+0x46ac>
   155d0:	cmp	r3, #0
   155d4:	bne	155dc <__assert_fail@plt+0x46ac>
   155d8:	b	10cc0 <calloc@plt>
   155dc:	push	{r4, lr}
   155e0:	bl	10e4c <__errno_location@plt>
   155e4:	mov	r3, #12
   155e8:	str	r3, [r0]
   155ec:	mov	r0, #0
   155f0:	pop	{r4, pc}
   155f4:	cmp	r0, #0
   155f8:	moveq	r0, #1
   155fc:	cmp	r0, #0
   15600:	blt	15608 <__assert_fail@plt+0x46d8>
   15604:	b	10de0 <malloc@plt>
   15608:	push	{r4, lr}
   1560c:	bl	10e4c <__errno_location@plt>
   15610:	mov	r3, #12
   15614:	str	r3, [r0]
   15618:	mov	r0, #0
   1561c:	pop	{r4, pc}
   15620:	cmp	r0, #0
   15624:	beq	15648 <__assert_fail@plt+0x4718>
   15628:	cmp	r1, #0
   1562c:	push	{lr}		; (str lr, [sp, #-4]!)
   15630:	sub	sp, sp, #12
   15634:	beq	15650 <__assert_fail@plt+0x4720>
   15638:	blt	15668 <__assert_fail@plt+0x4738>
   1563c:	add	sp, sp, #12
   15640:	pop	{lr}		; (ldr lr, [sp], #4)
   15644:	b	10d74 <realloc@plt>
   15648:	mov	r0, r1
   1564c:	b	155f4 <__assert_fail@plt+0x46c4>
   15650:	str	r1, [sp, #4]
   15654:	bl	12504 <__assert_fail@plt+0x15d4>
   15658:	ldr	r3, [sp, #4]
   1565c:	mov	r0, r3
   15660:	add	sp, sp, #12
   15664:	pop	{pc}		; (ldr pc, [sp], #4)
   15668:	bl	10e4c <__errno_location@plt>
   1566c:	mov	r2, #12
   15670:	mov	r3, #0
   15674:	str	r2, [r0]
   15678:	b	1565c <__assert_fail@plt+0x472c>
   1567c:	push	{r4, r5, r6, lr}
   15680:	mov	r4, r0
   15684:	bl	10dbc <__fpending@plt>
   15688:	ldr	r5, [r4]
   1568c:	and	r5, r5, #32
   15690:	mov	r6, r0
   15694:	mov	r0, r4
   15698:	bl	12404 <__assert_fail@plt+0x14d4>
   1569c:	cmp	r5, #0
   156a0:	mov	r4, r0
   156a4:	bne	156c4 <__assert_fail@plt+0x4794>
   156a8:	cmp	r0, #0
   156ac:	beq	156bc <__assert_fail@plt+0x478c>
   156b0:	cmp	r6, #0
   156b4:	beq	156e0 <__assert_fail@plt+0x47b0>
   156b8:	mvn	r4, #0
   156bc:	mov	r0, r4
   156c0:	pop	{r4, r5, r6, pc}
   156c4:	cmp	r0, #0
   156c8:	bne	156b8 <__assert_fail@plt+0x4788>
   156cc:	bl	10e4c <__errno_location@plt>
   156d0:	str	r4, [r0]
   156d4:	mvn	r4, #0
   156d8:	mov	r0, r4
   156dc:	pop	{r4, r5, r6, pc}
   156e0:	bl	10e4c <__errno_location@plt>
   156e4:	ldr	r4, [r0]
   156e8:	subs	r4, r4, #9
   156ec:	mvnne	r4, #0
   156f0:	mov	r0, r4
   156f4:	pop	{r4, r5, r6, pc}
   156f8:	push	{r4, lr}
   156fc:	mov	r0, #14
   15700:	bl	10edc <nl_langinfo@plt>
   15704:	cmp	r0, #0
   15708:	beq	15720 <__assert_fail@plt+0x47f0>
   1570c:	ldrb	r2, [r0]
   15710:	ldr	r3, [pc, #16]	; 15728 <__assert_fail@plt+0x47f8>
   15714:	cmp	r2, #0
   15718:	moveq	r0, r3
   1571c:	pop	{r4, pc}
   15720:	ldr	r0, [pc]	; 15728 <__assert_fail@plt+0x47f8>
   15724:	pop	{r4, pc}
   15728:	andeq	r6, r1, r8, lsr #23
   1572c:	push	{r4, r5, r6, r7, lr}
   15730:	subs	r6, r0, #0
   15734:	sub	sp, sp, #12
   15738:	addeq	r6, sp, #4
   1573c:	mov	r0, r6
   15740:	mov	r5, r2
   15744:	mov	r7, r1
   15748:	bl	10dc8 <mbrtowc@plt>
   1574c:	cmp	r5, #0
   15750:	cmnne	r0, #3
   15754:	mov	r4, r0
   15758:	bls	15774 <__assert_fail@plt+0x4844>
   1575c:	mov	r0, #0
   15760:	bl	157cc <__assert_fail@plt+0x489c>
   15764:	cmp	r0, #0
   15768:	moveq	r4, #1
   1576c:	ldrbeq	r3, [r7]
   15770:	streq	r3, [r6]
   15774:	mov	r0, r4
   15778:	add	sp, sp, #12
   1577c:	pop	{r4, r5, r6, r7, pc}
   15780:	push	{r4, r5, r6, lr}
   15784:	subs	r4, r2, #0
   15788:	mov	r6, r0
   1578c:	mov	r5, r1
   15790:	beq	157bc <__assert_fail@plt+0x488c>
   15794:	mov	r1, r4
   15798:	mvn	r0, #0
   1579c:	bl	158c0 <__assert_fail@plt+0x4990>
   157a0:	cmp	r0, r5
   157a4:	bcs	157bc <__assert_fail@plt+0x488c>
   157a8:	bl	10e4c <__errno_location@plt>
   157ac:	mov	r3, #12
   157b0:	str	r3, [r0]
   157b4:	mov	r0, #0
   157b8:	pop	{r4, r5, r6, pc}
   157bc:	mul	r1, r5, r4
   157c0:	mov	r0, r6
   157c4:	pop	{r4, r5, r6, lr}
   157c8:	b	15620 <__assert_fail@plt+0x46f0>
   157cc:	push	{lr}		; (str lr, [sp, #-4]!)
   157d0:	sub	sp, sp, #268	; 0x10c
   157d4:	add	r1, sp, #4
   157d8:	ldr	r2, [pc, #60]	; 1581c <__assert_fail@plt+0x48ec>
   157dc:	bl	15828 <__assert_fail@plt+0x48f8>
   157e0:	cmp	r0, #0
   157e4:	movne	r0, #0
   157e8:	bne	15814 <__assert_fail@plt+0x48e4>
   157ec:	ldr	r1, [pc, #44]	; 15820 <__assert_fail@plt+0x48f0>
   157f0:	add	r0, sp, #4
   157f4:	bl	10ce4 <strcmp@plt>
   157f8:	cmp	r0, #0
   157fc:	beq	15814 <__assert_fail@plt+0x48e4>
   15800:	add	r0, sp, #4
   15804:	ldr	r1, [pc, #24]	; 15824 <__assert_fail@plt+0x48f4>
   15808:	bl	10ce4 <strcmp@plt>
   1580c:	adds	r0, r0, #0
   15810:	movne	r0, #1
   15814:	add	sp, sp, #268	; 0x10c
   15818:	pop	{pc}		; (ldr pc, [sp], #4)
   1581c:	andeq	r0, r0, r1, lsl #2
   15820:			; <UNDEFINED> instruction: 0x00016bb0
   15824:			; <UNDEFINED> instruction: 0x00016bb4
   15828:	push	{r4, r5, r6, lr}
   1582c:	mov	r5, r1
   15830:	mov	r1, #0
   15834:	mov	r4, r2
   15838:	bl	10ec4 <setlocale@plt>
   1583c:	subs	r6, r0, #0
   15840:	beq	1589c <__assert_fail@plt+0x496c>
   15844:	bl	10e34 <strlen@plt>
   15848:	cmp	r4, r0
   1584c:	bhi	15884 <__assert_fail@plt+0x4954>
   15850:	cmp	r4, #0
   15854:	bne	15860 <__assert_fail@plt+0x4930>
   15858:	mov	r0, #34	; 0x22
   1585c:	pop	{r4, r5, r6, pc}
   15860:	sub	r4, r4, #1
   15864:	mov	r1, r6
   15868:	mov	r2, r4
   1586c:	mov	r0, r5
   15870:	bl	10d2c <memcpy@plt>
   15874:	mov	r3, #0
   15878:	strb	r3, [r5, r4]
   1587c:	mov	r0, #34	; 0x22
   15880:	pop	{r4, r5, r6, pc}
   15884:	add	r2, r0, #1
   15888:	mov	r1, r6
   1588c:	mov	r0, r5
   15890:	bl	10d2c <memcpy@plt>
   15894:	mov	r0, #0
   15898:	pop	{r4, r5, r6, pc}
   1589c:	cmp	r4, #0
   158a0:	beq	158b0 <__assert_fail@plt+0x4980>
   158a4:	strb	r6, [r5]
   158a8:	mov	r0, #22
   158ac:	pop	{r4, r5, r6, pc}
   158b0:	mov	r0, #22
   158b4:	pop	{r4, r5, r6, pc}
   158b8:	mov	r1, #0
   158bc:	b	10ec4 <setlocale@plt>
   158c0:	subs	r2, r1, #1
   158c4:	bxeq	lr
   158c8:	bcc	15aa0 <__assert_fail@plt+0x4b70>
   158cc:	cmp	r0, r1
   158d0:	bls	15a84 <__assert_fail@plt+0x4b54>
   158d4:	tst	r1, r2
   158d8:	beq	15a90 <__assert_fail@plt+0x4b60>
   158dc:	clz	r3, r0
   158e0:	clz	r2, r1
   158e4:	sub	r3, r2, r3
   158e8:	rsbs	r3, r3, #31
   158ec:	addne	r3, r3, r3, lsl #1
   158f0:	mov	r2, #0
   158f4:	addne	pc, pc, r3, lsl #2
   158f8:	nop			; (mov r0, r0)
   158fc:	cmp	r0, r1, lsl #31
   15900:	adc	r2, r2, r2
   15904:	subcs	r0, r0, r1, lsl #31
   15908:	cmp	r0, r1, lsl #30
   1590c:	adc	r2, r2, r2
   15910:	subcs	r0, r0, r1, lsl #30
   15914:	cmp	r0, r1, lsl #29
   15918:	adc	r2, r2, r2
   1591c:	subcs	r0, r0, r1, lsl #29
   15920:	cmp	r0, r1, lsl #28
   15924:	adc	r2, r2, r2
   15928:	subcs	r0, r0, r1, lsl #28
   1592c:	cmp	r0, r1, lsl #27
   15930:	adc	r2, r2, r2
   15934:	subcs	r0, r0, r1, lsl #27
   15938:	cmp	r0, r1, lsl #26
   1593c:	adc	r2, r2, r2
   15940:	subcs	r0, r0, r1, lsl #26
   15944:	cmp	r0, r1, lsl #25
   15948:	adc	r2, r2, r2
   1594c:	subcs	r0, r0, r1, lsl #25
   15950:	cmp	r0, r1, lsl #24
   15954:	adc	r2, r2, r2
   15958:	subcs	r0, r0, r1, lsl #24
   1595c:	cmp	r0, r1, lsl #23
   15960:	adc	r2, r2, r2
   15964:	subcs	r0, r0, r1, lsl #23
   15968:	cmp	r0, r1, lsl #22
   1596c:	adc	r2, r2, r2
   15970:	subcs	r0, r0, r1, lsl #22
   15974:	cmp	r0, r1, lsl #21
   15978:	adc	r2, r2, r2
   1597c:	subcs	r0, r0, r1, lsl #21
   15980:	cmp	r0, r1, lsl #20
   15984:	adc	r2, r2, r2
   15988:	subcs	r0, r0, r1, lsl #20
   1598c:	cmp	r0, r1, lsl #19
   15990:	adc	r2, r2, r2
   15994:	subcs	r0, r0, r1, lsl #19
   15998:	cmp	r0, r1, lsl #18
   1599c:	adc	r2, r2, r2
   159a0:	subcs	r0, r0, r1, lsl #18
   159a4:	cmp	r0, r1, lsl #17
   159a8:	adc	r2, r2, r2
   159ac:	subcs	r0, r0, r1, lsl #17
   159b0:	cmp	r0, r1, lsl #16
   159b4:	adc	r2, r2, r2
   159b8:	subcs	r0, r0, r1, lsl #16
   159bc:	cmp	r0, r1, lsl #15
   159c0:	adc	r2, r2, r2
   159c4:	subcs	r0, r0, r1, lsl #15
   159c8:	cmp	r0, r1, lsl #14
   159cc:	adc	r2, r2, r2
   159d0:	subcs	r0, r0, r1, lsl #14
   159d4:	cmp	r0, r1, lsl #13
   159d8:	adc	r2, r2, r2
   159dc:	subcs	r0, r0, r1, lsl #13
   159e0:	cmp	r0, r1, lsl #12
   159e4:	adc	r2, r2, r2
   159e8:	subcs	r0, r0, r1, lsl #12
   159ec:	cmp	r0, r1, lsl #11
   159f0:	adc	r2, r2, r2
   159f4:	subcs	r0, r0, r1, lsl #11
   159f8:	cmp	r0, r1, lsl #10
   159fc:	adc	r2, r2, r2
   15a00:	subcs	r0, r0, r1, lsl #10
   15a04:	cmp	r0, r1, lsl #9
   15a08:	adc	r2, r2, r2
   15a0c:	subcs	r0, r0, r1, lsl #9
   15a10:	cmp	r0, r1, lsl #8
   15a14:	adc	r2, r2, r2
   15a18:	subcs	r0, r0, r1, lsl #8
   15a1c:	cmp	r0, r1, lsl #7
   15a20:	adc	r2, r2, r2
   15a24:	subcs	r0, r0, r1, lsl #7
   15a28:	cmp	r0, r1, lsl #6
   15a2c:	adc	r2, r2, r2
   15a30:	subcs	r0, r0, r1, lsl #6
   15a34:	cmp	r0, r1, lsl #5
   15a38:	adc	r2, r2, r2
   15a3c:	subcs	r0, r0, r1, lsl #5
   15a40:	cmp	r0, r1, lsl #4
   15a44:	adc	r2, r2, r2
   15a48:	subcs	r0, r0, r1, lsl #4
   15a4c:	cmp	r0, r1, lsl #3
   15a50:	adc	r2, r2, r2
   15a54:	subcs	r0, r0, r1, lsl #3
   15a58:	cmp	r0, r1, lsl #2
   15a5c:	adc	r2, r2, r2
   15a60:	subcs	r0, r0, r1, lsl #2
   15a64:	cmp	r0, r1, lsl #1
   15a68:	adc	r2, r2, r2
   15a6c:	subcs	r0, r0, r1, lsl #1
   15a70:	cmp	r0, r1
   15a74:	adc	r2, r2, r2
   15a78:	subcs	r0, r0, r1
   15a7c:	mov	r0, r2
   15a80:	bx	lr
   15a84:	moveq	r0, #1
   15a88:	movne	r0, #0
   15a8c:	bx	lr
   15a90:	clz	r2, r1
   15a94:	rsb	r2, r2, #31
   15a98:	lsr	r0, r0, r2
   15a9c:	bx	lr
   15aa0:	cmp	r0, #0
   15aa4:	mvnne	r0, #0
   15aa8:	b	15de0 <__assert_fail@plt+0x4eb0>
   15aac:	cmp	r1, #0
   15ab0:	beq	15aa0 <__assert_fail@plt+0x4b70>
   15ab4:	push	{r0, r1, lr}
   15ab8:	bl	158c0 <__assert_fail@plt+0x4990>
   15abc:	pop	{r1, r2, lr}
   15ac0:	mul	r3, r2, r0
   15ac4:	sub	r1, r1, r3
   15ac8:	bx	lr
   15acc:	cmp	r1, #0
   15ad0:	beq	15cdc <__assert_fail@plt+0x4dac>
   15ad4:	eor	ip, r0, r1
   15ad8:	rsbmi	r1, r1, #0
   15adc:	subs	r2, r1, #1
   15ae0:	beq	15ca8 <__assert_fail@plt+0x4d78>
   15ae4:	movs	r3, r0
   15ae8:	rsbmi	r3, r0, #0
   15aec:	cmp	r3, r1
   15af0:	bls	15cb4 <__assert_fail@plt+0x4d84>
   15af4:	tst	r1, r2
   15af8:	beq	15cc4 <__assert_fail@plt+0x4d94>
   15afc:	clz	r2, r3
   15b00:	clz	r0, r1
   15b04:	sub	r2, r0, r2
   15b08:	rsbs	r2, r2, #31
   15b0c:	addne	r2, r2, r2, lsl #1
   15b10:	mov	r0, #0
   15b14:	addne	pc, pc, r2, lsl #2
   15b18:	nop			; (mov r0, r0)
   15b1c:	cmp	r3, r1, lsl #31
   15b20:	adc	r0, r0, r0
   15b24:	subcs	r3, r3, r1, lsl #31
   15b28:	cmp	r3, r1, lsl #30
   15b2c:	adc	r0, r0, r0
   15b30:	subcs	r3, r3, r1, lsl #30
   15b34:	cmp	r3, r1, lsl #29
   15b38:	adc	r0, r0, r0
   15b3c:	subcs	r3, r3, r1, lsl #29
   15b40:	cmp	r3, r1, lsl #28
   15b44:	adc	r0, r0, r0
   15b48:	subcs	r3, r3, r1, lsl #28
   15b4c:	cmp	r3, r1, lsl #27
   15b50:	adc	r0, r0, r0
   15b54:	subcs	r3, r3, r1, lsl #27
   15b58:	cmp	r3, r1, lsl #26
   15b5c:	adc	r0, r0, r0
   15b60:	subcs	r3, r3, r1, lsl #26
   15b64:	cmp	r3, r1, lsl #25
   15b68:	adc	r0, r0, r0
   15b6c:	subcs	r3, r3, r1, lsl #25
   15b70:	cmp	r3, r1, lsl #24
   15b74:	adc	r0, r0, r0
   15b78:	subcs	r3, r3, r1, lsl #24
   15b7c:	cmp	r3, r1, lsl #23
   15b80:	adc	r0, r0, r0
   15b84:	subcs	r3, r3, r1, lsl #23
   15b88:	cmp	r3, r1, lsl #22
   15b8c:	adc	r0, r0, r0
   15b90:	subcs	r3, r3, r1, lsl #22
   15b94:	cmp	r3, r1, lsl #21
   15b98:	adc	r0, r0, r0
   15b9c:	subcs	r3, r3, r1, lsl #21
   15ba0:	cmp	r3, r1, lsl #20
   15ba4:	adc	r0, r0, r0
   15ba8:	subcs	r3, r3, r1, lsl #20
   15bac:	cmp	r3, r1, lsl #19
   15bb0:	adc	r0, r0, r0
   15bb4:	subcs	r3, r3, r1, lsl #19
   15bb8:	cmp	r3, r1, lsl #18
   15bbc:	adc	r0, r0, r0
   15bc0:	subcs	r3, r3, r1, lsl #18
   15bc4:	cmp	r3, r1, lsl #17
   15bc8:	adc	r0, r0, r0
   15bcc:	subcs	r3, r3, r1, lsl #17
   15bd0:	cmp	r3, r1, lsl #16
   15bd4:	adc	r0, r0, r0
   15bd8:	subcs	r3, r3, r1, lsl #16
   15bdc:	cmp	r3, r1, lsl #15
   15be0:	adc	r0, r0, r0
   15be4:	subcs	r3, r3, r1, lsl #15
   15be8:	cmp	r3, r1, lsl #14
   15bec:	adc	r0, r0, r0
   15bf0:	subcs	r3, r3, r1, lsl #14
   15bf4:	cmp	r3, r1, lsl #13
   15bf8:	adc	r0, r0, r0
   15bfc:	subcs	r3, r3, r1, lsl #13
   15c00:	cmp	r3, r1, lsl #12
   15c04:	adc	r0, r0, r0
   15c08:	subcs	r3, r3, r1, lsl #12
   15c0c:	cmp	r3, r1, lsl #11
   15c10:	adc	r0, r0, r0
   15c14:	subcs	r3, r3, r1, lsl #11
   15c18:	cmp	r3, r1, lsl #10
   15c1c:	adc	r0, r0, r0
   15c20:	subcs	r3, r3, r1, lsl #10
   15c24:	cmp	r3, r1, lsl #9
   15c28:	adc	r0, r0, r0
   15c2c:	subcs	r3, r3, r1, lsl #9
   15c30:	cmp	r3, r1, lsl #8
   15c34:	adc	r0, r0, r0
   15c38:	subcs	r3, r3, r1, lsl #8
   15c3c:	cmp	r3, r1, lsl #7
   15c40:	adc	r0, r0, r0
   15c44:	subcs	r3, r3, r1, lsl #7
   15c48:	cmp	r3, r1, lsl #6
   15c4c:	adc	r0, r0, r0
   15c50:	subcs	r3, r3, r1, lsl #6
   15c54:	cmp	r3, r1, lsl #5
   15c58:	adc	r0, r0, r0
   15c5c:	subcs	r3, r3, r1, lsl #5
   15c60:	cmp	r3, r1, lsl #4
   15c64:	adc	r0, r0, r0
   15c68:	subcs	r3, r3, r1, lsl #4
   15c6c:	cmp	r3, r1, lsl #3
   15c70:	adc	r0, r0, r0
   15c74:	subcs	r3, r3, r1, lsl #3
   15c78:	cmp	r3, r1, lsl #2
   15c7c:	adc	r0, r0, r0
   15c80:	subcs	r3, r3, r1, lsl #2
   15c84:	cmp	r3, r1, lsl #1
   15c88:	adc	r0, r0, r0
   15c8c:	subcs	r3, r3, r1, lsl #1
   15c90:	cmp	r3, r1
   15c94:	adc	r0, r0, r0
   15c98:	subcs	r3, r3, r1
   15c9c:	cmp	ip, #0
   15ca0:	rsbmi	r0, r0, #0
   15ca4:	bx	lr
   15ca8:	teq	ip, r0
   15cac:	rsbmi	r0, r0, #0
   15cb0:	bx	lr
   15cb4:	movcc	r0, #0
   15cb8:	asreq	r0, ip, #31
   15cbc:	orreq	r0, r0, #1
   15cc0:	bx	lr
   15cc4:	clz	r2, r1
   15cc8:	rsb	r2, r2, #31
   15ccc:	cmp	ip, #0
   15cd0:	lsr	r0, r3, r2
   15cd4:	rsbmi	r0, r0, #0
   15cd8:	bx	lr
   15cdc:	cmp	r0, #0
   15ce0:	mvngt	r0, #-2147483648	; 0x80000000
   15ce4:	movlt	r0, #-2147483648	; 0x80000000
   15ce8:	b	15de0 <__assert_fail@plt+0x4eb0>
   15cec:	cmp	r1, #0
   15cf0:	beq	15cdc <__assert_fail@plt+0x4dac>
   15cf4:	push	{r0, r1, lr}
   15cf8:	bl	15ad4 <__assert_fail@plt+0x4ba4>
   15cfc:	pop	{r1, r2, lr}
   15d00:	mul	r3, r2, r0
   15d04:	sub	r1, r1, r3
   15d08:	bx	lr
   15d0c:	cmp	r3, #0
   15d10:	cmpeq	r2, #0
   15d14:	bne	15d38 <__assert_fail@plt+0x4e08>
   15d18:	cmp	r1, #0
   15d1c:	movlt	r1, #-2147483648	; 0x80000000
   15d20:	movlt	r0, #0
   15d24:	blt	15d34 <__assert_fail@plt+0x4e04>
   15d28:	cmpeq	r0, #0
   15d2c:	mvnne	r1, #-2147483648	; 0x80000000
   15d30:	mvnne	r0, #0
   15d34:	b	15de0 <__assert_fail@plt+0x4eb0>
   15d38:	sub	sp, sp, #8
   15d3c:	push	{sp, lr}
   15d40:	cmp	r1, #0
   15d44:	blt	15d64 <__assert_fail@plt+0x4e34>
   15d48:	cmp	r3, #0
   15d4c:	blt	15d98 <__assert_fail@plt+0x4e68>
   15d50:	bl	15df0 <__assert_fail@plt+0x4ec0>
   15d54:	ldr	lr, [sp, #4]
   15d58:	add	sp, sp, #8
   15d5c:	pop	{r2, r3}
   15d60:	bx	lr
   15d64:	rsbs	r0, r0, #0
   15d68:	sbc	r1, r1, r1, lsl #1
   15d6c:	cmp	r3, #0
   15d70:	blt	15dbc <__assert_fail@plt+0x4e8c>
   15d74:	bl	15df0 <__assert_fail@plt+0x4ec0>
   15d78:	ldr	lr, [sp, #4]
   15d7c:	add	sp, sp, #8
   15d80:	pop	{r2, r3}
   15d84:	rsbs	r0, r0, #0
   15d88:	sbc	r1, r1, r1, lsl #1
   15d8c:	rsbs	r2, r2, #0
   15d90:	sbc	r3, r3, r3, lsl #1
   15d94:	bx	lr
   15d98:	rsbs	r2, r2, #0
   15d9c:	sbc	r3, r3, r3, lsl #1
   15da0:	bl	15df0 <__assert_fail@plt+0x4ec0>
   15da4:	ldr	lr, [sp, #4]
   15da8:	add	sp, sp, #8
   15dac:	pop	{r2, r3}
   15db0:	rsbs	r0, r0, #0
   15db4:	sbc	r1, r1, r1, lsl #1
   15db8:	bx	lr
   15dbc:	rsbs	r2, r2, #0
   15dc0:	sbc	r3, r3, r3, lsl #1
   15dc4:	bl	15df0 <__assert_fail@plt+0x4ec0>
   15dc8:	ldr	lr, [sp, #4]
   15dcc:	add	sp, sp, #8
   15dd0:	pop	{r2, r3}
   15dd4:	rsbs	r2, r2, #0
   15dd8:	sbc	r3, r3, r3, lsl #1
   15ddc:	bx	lr
   15de0:	push	{r1, lr}
   15de4:	mov	r0, #8
   15de8:	bl	10cd8 <raise@plt>
   15dec:	pop	{r1, pc}
   15df0:	cmp	r1, r3
   15df4:	push	{r4, r5, r6, r7, r8, r9, lr}
   15df8:	cmpeq	r0, r2
   15dfc:	mov	r4, r0
   15e00:	mov	r5, r1
   15e04:	ldr	r9, [sp, #28]
   15e08:	movcc	r0, #0
   15e0c:	movcc	r1, #0
   15e10:	bcc	15f08 <__assert_fail@plt+0x4fd8>
   15e14:	cmp	r3, #0
   15e18:	clzeq	ip, r2
   15e1c:	clzne	ip, r3
   15e20:	addeq	ip, ip, #32
   15e24:	cmp	r5, #0
   15e28:	clzeq	r1, r4
   15e2c:	addeq	r1, r1, #32
   15e30:	clzne	r1, r5
   15e34:	sub	ip, ip, r1
   15e38:	sub	lr, ip, #32
   15e3c:	lsl	r7, r3, ip
   15e40:	rsb	r8, ip, #32
   15e44:	orr	r7, r7, r2, lsl lr
   15e48:	orr	r7, r7, r2, lsr r8
   15e4c:	lsl	r6, r2, ip
   15e50:	cmp	r5, r7
   15e54:	cmpeq	r4, r6
   15e58:	movcc	r0, #0
   15e5c:	movcc	r1, #0
   15e60:	bcc	15e7c <__assert_fail@plt+0x4f4c>
   15e64:	mov	r3, #1
   15e68:	subs	r4, r4, r6
   15e6c:	lsl	r1, r3, lr
   15e70:	lsl	r0, r3, ip
   15e74:	orr	r1, r1, r3, lsr r8
   15e78:	sbc	r5, r5, r7
   15e7c:	cmp	ip, #0
   15e80:	beq	15f08 <__assert_fail@plt+0x4fd8>
   15e84:	lsrs	r3, r7, #1
   15e88:	rrx	r2, r6
   15e8c:	mov	r6, ip
   15e90:	b	15eb4 <__assert_fail@plt+0x4f84>
   15e94:	subs	r4, r4, r2
   15e98:	sbc	r5, r5, r3
   15e9c:	adds	r4, r4, r4
   15ea0:	adc	r5, r5, r5
   15ea4:	adds	r4, r4, #1
   15ea8:	adc	r5, r5, #0
   15eac:	subs	r6, r6, #1
   15eb0:	beq	15ed0 <__assert_fail@plt+0x4fa0>
   15eb4:	cmp	r5, r3
   15eb8:	cmpeq	r4, r2
   15ebc:	bcs	15e94 <__assert_fail@plt+0x4f64>
   15ec0:	adds	r4, r4, r4
   15ec4:	adc	r5, r5, r5
   15ec8:	subs	r6, r6, #1
   15ecc:	bne	15eb4 <__assert_fail@plt+0x4f84>
   15ed0:	lsr	r6, r4, ip
   15ed4:	lsr	r7, r5, ip
   15ed8:	orr	r6, r6, r5, lsl r8
   15edc:	adds	r2, r0, r4
   15ee0:	orr	r6, r6, r5, lsr lr
   15ee4:	adc	r3, r1, r5
   15ee8:	lsl	r1, r7, ip
   15eec:	orr	r1, r1, r6, lsl lr
   15ef0:	lsl	r0, r6, ip
   15ef4:	orr	r1, r1, r6, lsr r8
   15ef8:	subs	r0, r2, r0
   15efc:	mov	r4, r6
   15f00:	mov	r5, r7
   15f04:	sbc	r1, r3, r1
   15f08:	cmp	r9, #0
   15f0c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15f10:	strd	r4, [r9]
   15f14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f1c:	mov	r7, r0
   15f20:	ldr	r6, [pc, #72]	; 15f70 <__assert_fail@plt+0x5040>
   15f24:	ldr	r5, [pc, #72]	; 15f74 <__assert_fail@plt+0x5044>
   15f28:	add	r6, pc, r6
   15f2c:	add	r5, pc, r5
   15f30:	sub	r6, r6, r5
   15f34:	mov	r8, r1
   15f38:	mov	r9, r2
   15f3c:	bl	10ca0 <calloc@plt-0x20>
   15f40:	asrs	r6, r6, #2
   15f44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f48:	mov	r4, #0
   15f4c:	add	r4, r4, #1
   15f50:	ldr	r3, [r5], #4
   15f54:	mov	r2, r9
   15f58:	mov	r1, r8
   15f5c:	mov	r0, r7
   15f60:	blx	r3
   15f64:	cmp	r6, r4
   15f68:	bne	15f4c <__assert_fail@plt+0x501c>
   15f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f70:	andeq	r0, r1, r0, ror #31
   15f74:	ldrdeq	r0, [r1], -r8
   15f78:	bx	lr
   15f7c:	ldr	r3, [pc, #12]	; 15f90 <__assert_fail@plt+0x5060>
   15f80:	mov	r1, #0
   15f84:	add	r3, pc, r3
   15f88:	ldr	r2, [r3]
   15f8c:	b	10e58 <__cxa_atexit@plt>
   15f90:	andeq	r1, r1, ip, asr r1

Disassembly of section .fini:

00015f94 <.fini>:
   15f94:	push	{r3, lr}
   15f98:	pop	{r3, pc}
