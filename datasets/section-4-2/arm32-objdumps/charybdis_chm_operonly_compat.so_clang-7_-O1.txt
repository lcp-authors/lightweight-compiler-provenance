
../repos/charybdis/extensions/.libs/chm_operonly_compat.so:     file format elf32-littlearm


Disassembly of section .init:

00000428 <_init>:
 428:	push	{r3, lr}
 42c:	bl	484 <call_weak_fn>
 430:	pop	{r3, pc}

Disassembly of section .plt:

00000434 <.plt>:
 434:	push	{lr}		; (str lr, [sp, #-4]!)
 438:	ldr	lr, [pc, #4]	; 444 <.plt+0x10>
 43c:	add	lr, pc, lr
 440:	ldr	pc, [lr, #8]!
 444:	.word	0x00010bbc

00000448 <__cxa_finalize@plt>:
 448:	add	ip, pc, #0, 12
 44c:	add	ip, ip, #16, 20	; 0x10000
 450:	ldr	pc, [ip, #3004]!	; 0xbbc

00000454 <chm_nosuch@plt>:
 454:	add	ip, pc, #0, 12
 458:	add	ip, ip, #16, 20	; 0x10000
 45c:	ldr	pc, [ip, #2996]!	; 0xbb4

00000460 <chm_simple@plt>:
 460:	add	ip, pc, #0, 12
 464:	add	ip, ip, #16, 20	; 0x10000
 468:	ldr	pc, [ip, #2988]!	; 0xbac

0000046c <__gmon_start__@plt>:
 46c:	add	ip, pc, #0, 12
 470:	add	ip, ip, #16, 20	; 0x10000
 474:	ldr	pc, [ip, #2980]!	; 0xba4

00000478 <chm_ban@plt>:
 478:	add	ip, pc, #0, 12
 47c:	add	ip, ip, #16, 20	; 0x10000
 480:	ldr	pc, [ip, #2972]!	; 0xb9c

Disassembly of section .text:

00000484 <call_weak_fn>:
 484:	ldr	r3, [pc, #20]	; 4a0 <call_weak_fn+0x1c>
 488:	ldr	r2, [pc, #20]	; 4a4 <call_weak_fn+0x20>
 48c:	add	r3, pc, r3
 490:	ldr	r2, [r3, r2]
 494:	cmp	r2, #0
 498:	bxeq	lr
 49c:	b	46c <__gmon_start__@plt>
 4a0:	.word	0x00010b6c
 4a4:	.word	0x0000002c

000004a8 <deregister_tm_clones>:
 4a8:	ldr	r0, [pc, #44]	; 4dc <deregister_tm_clones+0x34>
 4ac:	ldr	r3, [pc, #44]	; 4e0 <deregister_tm_clones+0x38>
 4b0:	add	r0, pc, r0
 4b4:	add	r3, pc, r3
 4b8:	cmp	r3, r0
 4bc:	ldr	r3, [pc, #32]	; 4e4 <deregister_tm_clones+0x3c>
 4c0:	add	r3, pc, r3
 4c4:	bxeq	lr
 4c8:	ldr	r2, [pc, #24]	; 4e8 <deregister_tm_clones+0x40>
 4cc:	ldr	r3, [r3, r2]
 4d0:	cmp	r3, #0
 4d4:	bxeq	lr
 4d8:	bx	r3
 4dc:	.word	0x00010bac
 4e0:	.word	0x00010ba8
 4e4:	.word	0x00010b38
 4e8:	.word	0x00000024

000004ec <register_tm_clones>:
 4ec:	ldr	r0, [pc, #56]	; 52c <register_tm_clones+0x40>
 4f0:	ldr	r3, [pc, #56]	; 530 <register_tm_clones+0x44>
 4f4:	add	r0, pc, r0
 4f8:	add	r3, pc, r3
 4fc:	sub	r1, r3, r0
 500:	ldr	r3, [pc, #44]	; 534 <register_tm_clones+0x48>
 504:	asr	r1, r1, #2
 508:	add	r3, pc, r3
 50c:	add	r1, r1, r1, lsr #31
 510:	asrs	r1, r1, #1
 514:	bxeq	lr
 518:	ldr	r2, [pc, #24]	; 538 <register_tm_clones+0x4c>
 51c:	ldr	r3, [r3, r2]
 520:	cmp	r3, #0
 524:	bxeq	lr
 528:	bx	r3
 52c:	.word	0x00010b68
 530:	.word	0x00010b64
 534:	.word	0x00010af0
 538:	.word	0x00000034

0000053c <__do_global_dtors_aux>:
 53c:	ldr	r3, [pc, #76]	; 590 <__do_global_dtors_aux+0x54>
 540:	ldr	r2, [pc, #76]	; 594 <__do_global_dtors_aux+0x58>
 544:	add	r3, pc, r3
 548:	add	r2, pc, r2
 54c:	ldrb	r3, [r3]
 550:	cmp	r3, #0
 554:	bxne	lr
 558:	ldr	r3, [pc, #56]	; 598 <__do_global_dtors_aux+0x5c>
 55c:	push	{r4, lr}
 560:	ldr	r3, [r2, r3]
 564:	cmp	r3, #0
 568:	beq	578 <__do_global_dtors_aux+0x3c>
 56c:	ldr	r3, [pc, #40]	; 59c <__do_global_dtors_aux+0x60>
 570:	ldr	r0, [pc, r3]
 574:	bl	448 <__cxa_finalize@plt>
 578:	bl	4a8 <deregister_tm_clones>
 57c:	ldr	r3, [pc, #28]	; 5a0 <__do_global_dtors_aux+0x64>
 580:	mov	r2, #1
 584:	add	r3, pc, r3
 588:	strb	r2, [r3]
 58c:	pop	{r4, pc}
 590:	.word	0x00010b18
 594:	.word	0x00010ab0
 598:	.word	0x00000020
 59c:	.word	0x00010ac0
 5a0:	.word	0x00010ad8

000005a4 <frame_dummy>:
 5a4:	b	4ec <register_tm_clones>

000005a8 <_modinit>:
 5a8:	ldr	r0, [pc, #28]	; 5cc <_modinit+0x24>
 5ac:	ldr	r0, [pc, r0]
 5b0:	mov	r1, #0
 5b4:	ldr	r2, [pc, #20]	; 5d0 <_modinit+0x28>
 5b8:	add	r2, pc, r2
 5bc:	str	r2, [r0, #632]	; 0x278
 5c0:	str	r1, [r0, #636]	; 0x27c
 5c4:	mov	r0, #0
 5c8:	bx	lr
 5cc:	.word	0x00010a7c
 5d0:	.word	0x0000003c

000005d4 <_moddeinit>:
 5d4:	ldr	r0, [pc, #24]	; 5f4 <_moddeinit+0x20>
 5d8:	ldr	r0, [pc, r0]
 5dc:	mov	r1, #0
 5e0:	ldr	r2, [pc, #16]	; 5f8 <_moddeinit+0x24>
 5e4:	ldr	r2, [pc, r2]
 5e8:	str	r2, [r0, #632]	; 0x278
 5ec:	str	r1, [r0, #636]	; 0x27c
 5f0:	bx	lr
 5f4:	.word	0x00010a50
 5f8:	.word	0x00010a3c

000005fc <chm_operonly>:
 5fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 600:	add	fp, sp, #24
 604:	sub	sp, sp, #32
 608:	mov	r4, r2
 60c:	mov	r5, r1
 610:	mov	r6, r0
 614:	mov	r0, #0
 618:	str	r0, [sp, #28]
 61c:	ldr	r0, [pc, #204]	; 6f0 <chm_operonly+0xf4>
 620:	add	r0, pc, r0
 624:	str	r0, [sp, #24]
 628:	ldrb	r2, [r6, #65]	; 0x41
 62c:	ldr	r8, [fp, #20]
 630:	ldr	r9, [fp, #16]
 634:	ldr	r0, [fp, #12]
 638:	ldr	r1, [fp, #8]
 63c:	tst	r2, #32
 640:	beq	6bc <chm_operonly+0xc0>
 644:	ldrh	r2, [r6, #80]	; 0x50
 648:	cmp	r2, #64	; 0x40
 64c:	bne	6bc <chm_operonly+0xc0>
 650:	mov	ip, #16
 654:	mov	r2, #105	; 0x69
 658:	str	r1, [sp]
 65c:	stmib	sp, {r0, r9}
 660:	str	r8, [sp, #12]
 664:	str	r2, [sp, #16]
 668:	str	ip, [sp, #20]
 66c:	mov	r0, r6
 670:	mov	r1, r5
 674:	mov	r2, r4
 678:	bl	460 <chm_simple@plt>
 67c:	mov	r0, #1073741824	; 0x40000000
 680:	mov	r1, #73	; 0x49
 684:	add	r2, sp, #24
 688:	add	r3, sp, #28
 68c:	str	r3, [sp]
 690:	stmib	sp, {r2, r9}
 694:	str	r8, [sp, #12]
 698:	str	r1, [sp, #16]
 69c:	str	r0, [sp, #20]
 6a0:	mov	r0, r6
 6a4:	mov	r1, r5
 6a8:	mov	r2, r4
 6ac:	mov	r3, #1
 6b0:	bl	478 <chm_ban@plt>
 6b4:	sub	sp, fp, #24
 6b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 6bc:	ldr	r2, [fp, #28]
 6c0:	ldr	r7, [fp, #24]
 6c4:	str	r1, [sp]
 6c8:	stmib	sp, {r0, r9}
 6cc:	str	r8, [sp, #12]
 6d0:	str	r7, [sp, #16]
 6d4:	str	r2, [sp, #20]
 6d8:	mov	r0, r6
 6dc:	mov	r1, r5
 6e0:	mov	r2, r4
 6e4:	bl	454 <chm_nosuch@plt>
 6e8:	sub	sp, fp, #24
 6ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 6f0:	.word	0x0000011f

Disassembly of section .fini:

000006f4 <_fini>:
 6f4:	push	{r3, lr}
 6f8:	pop	{r3, pc}
