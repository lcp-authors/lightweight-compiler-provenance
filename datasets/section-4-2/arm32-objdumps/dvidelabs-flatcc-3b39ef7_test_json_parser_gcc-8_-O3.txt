
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012550 <.init>:
   12550:	push	{r3, lr}
   12554:	bl	12758 <_start@@Base+0x3c>
   12558:	pop	{r3, pc}

Disassembly of section .plt:

0001255c <fopen@plt-0x14>:
   1255c:	push	{lr}		; (str lr, [sp, #-4]!)
   12560:	ldr	lr, [pc, #4]	; 1256c <fopen@plt-0x4>
   12564:	add	lr, pc, lr
   12568:	ldr	pc, [lr, #8]!
   1256c:	muleq	r2, r4, sl

00012570 <fopen@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #184320	; 0x2d000
   12578:	ldr	pc, [ip, #2708]!	; 0xa94

0001257c <free@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #184320	; 0x2d000
   12584:	ldr	pc, [ip, #2700]!	; 0xa8c

00012588 <memcpy@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #184320	; 0x2d000
   12590:	ldr	pc, [ip, #2692]!	; 0xa84

00012594 <ftell@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #184320	; 0x2d000
   1259c:	ldr	pc, [ip, #2684]!	; 0xa7c

000125a0 <memcmp@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #184320	; 0x2d000
   125a8:	ldr	pc, [ip, #2676]!	; 0xa74

000125ac <rewind@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #184320	; 0x2d000
   125b4:	ldr	pc, [ip, #2668]!	; 0xa6c

000125b8 <realloc@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #184320	; 0x2d000
   125c0:	ldr	pc, [ip, #2660]!	; 0xa64

000125c4 <fwrite@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #184320	; 0x2d000
   125cc:	ldr	pc, [ip, #2652]!	; 0xa5c

000125d0 <fread@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #184320	; 0x2d000
   125d8:	ldr	pc, [ip, #2644]!	; 0xa54

000125dc <malloc@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #184320	; 0x2d000
   125e4:	ldr	pc, [ip, #2636]!	; 0xa4c

000125e8 <__libc_start_main@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #184320	; 0x2d000
   125f0:	ldr	pc, [ip, #2628]!	; 0xa44

000125f4 <__gmon_start__@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #184320	; 0x2d000
   125fc:	ldr	pc, [ip, #2620]!	; 0xa3c

00012600 <exit@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #184320	; 0x2d000
   12608:	ldr	pc, [ip, #2612]!	; 0xa34

0001260c <strlen@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #184320	; 0x2d000
   12614:	ldr	pc, [ip, #2604]!	; 0xa2c

00012618 <fprintf@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #184320	; 0x2d000
   12620:	ldr	pc, [ip, #2596]!	; 0xa24

00012624 <posix_memalign@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #184320	; 0x2d000
   1262c:	ldr	pc, [ip, #2588]!	; 0xa1c

00012630 <memset@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #184320	; 0x2d000
   12638:	ldr	pc, [ip, #2580]!	; 0xa14

0001263c <strtod@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #184320	; 0x2d000
   12644:	ldr	pc, [ip, #2572]!	; 0xa0c

00012648 <memchr@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #184320	; 0x2d000
   12650:	ldr	pc, [ip, #2564]!	; 0xa04

00012654 <fclose@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #184320	; 0x2d000
   1265c:	ldr	pc, [ip, #2556]!	; 0x9fc

00012660 <fputc@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #184320	; 0x2d000
   12668:	ldr	pc, [ip, #2548]!	; 0x9f4

0001266c <fseek@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #184320	; 0x2d000
   12674:	ldr	pc, [ip, #2540]!	; 0x9ec

00012678 <abort@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #184320	; 0x2d000
   12680:	ldr	pc, [ip, #2532]!	; 0x9e4

00012684 <__assert_fail@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #184320	; 0x2d000
   1268c:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00012690 <main@@Base>:
   12690:	strd	r4, [sp, #-16]!
   12694:	movw	r4, #952	; 0x3b8
   12698:	movt	r4, #4
   1269c:	mov	r5, r0
   126a0:	mov	r2, #16
   126a4:	str	r6, [sp, #8]
   126a8:	movw	r0, #56620	; 0xdd2c
   126ac:	movt	r0, #2
   126b0:	ldr	r3, [r4]
   126b4:	mov	r6, r1
   126b8:	mov	r1, #1
   126bc:	str	lr, [sp, #12]
   126c0:	bl	125c4 <fwrite@plt>
   126c4:	sub	r3, r5, #1
   126c8:	cmp	r3, #1
   126cc:	bhi	126fc <main@@Base+0x6c>
   126d0:	cmp	r5, #2
   126d4:	bne	126e8 <main@@Base+0x58>
   126d8:	ldr	r2, [r6, #4]
   126dc:	movw	r3, #120	; 0x78
   126e0:	movt	r3, #4
   126e4:	str	r2, [r3, #716]	; 0x2cc
   126e8:	ldrd	r4, [sp]
   126ec:	ldr	r6, [sp, #8]
   126f0:	ldr	lr, [sp, #12]
   126f4:	add	sp, sp, #16
   126f8:	b	205d0 <test_parse@@Base>
   126fc:	movw	r0, #56640	; 0xdd40
   12700:	movt	r0, #2
   12704:	ldr	r3, [r4]
   12708:	mov	r2, #63	; 0x3f
   1270c:	mov	r1, #1
   12710:	bl	125c4 <fwrite@plt>
   12714:	mov	r0, #1
   12718:	bl	12600 <exit@plt>

0001271c <_start@@Base>:
   1271c:	mov	fp, #0
   12720:	mov	lr, #0
   12724:	pop	{r1}		; (ldr r1, [sp], #4)
   12728:	mov	r2, sp
   1272c:	push	{r2}		; (str r2, [sp, #-4]!)
   12730:	push	{r0}		; (str r0, [sp, #-4]!)
   12734:	ldr	ip, [pc, #16]	; 1274c <_start@@Base+0x30>
   12738:	push	{ip}		; (str ip, [sp, #-4]!)
   1273c:	ldr	r0, [pc, #12]	; 12750 <_start@@Base+0x34>
   12740:	ldr	r3, [pc, #12]	; 12754 <_start@@Base+0x38>
   12744:	bl	125e8 <__libc_start_main@plt>
   12748:	bl	12678 <abort@plt>
   1274c:	strdeq	sp, [r2], -r0
   12750:	muleq	r1, r0, r6
   12754:	muleq	r2, r0, sl
   12758:	ldr	r3, [pc, #20]	; 12774 <_start@@Base+0x58>
   1275c:	ldr	r2, [pc, #20]	; 12778 <_start@@Base+0x5c>
   12760:	add	r3, pc, r3
   12764:	ldr	r2, [r3, r2]
   12768:	cmp	r2, #0
   1276c:	bxeq	lr
   12770:	b	125f4 <__gmon_start__@plt>
   12774:	muleq	r2, r8, r8
   12778:	andeq	r0, r0, ip, rrx
   1277c:	ldr	r0, [pc, #24]	; 1279c <_start@@Base+0x80>
   12780:	ldr	r3, [pc, #24]	; 127a0 <_start@@Base+0x84>
   12784:	cmp	r3, r0
   12788:	bxeq	lr
   1278c:	ldr	r3, [pc, #16]	; 127a4 <_start@@Base+0x88>
   12790:	cmp	r3, #0
   12794:	bxeq	lr
   12798:	bx	r3
   1279c:			; <UNDEFINED> instruction: 0x000403b8
   127a0:			; <UNDEFINED> instruction: 0x000403b8
   127a4:	andeq	r0, r0, r0
   127a8:	ldr	r0, [pc, #36]	; 127d4 <_start@@Base+0xb8>
   127ac:	ldr	r1, [pc, #36]	; 127d8 <_start@@Base+0xbc>
   127b0:	sub	r1, r1, r0
   127b4:	asr	r1, r1, #2
   127b8:	add	r1, r1, r1, lsr #31
   127bc:	asrs	r1, r1, #1
   127c0:	bxeq	lr
   127c4:	ldr	r3, [pc, #16]	; 127dc <_start@@Base+0xc0>
   127c8:	cmp	r3, #0
   127cc:	bxeq	lr
   127d0:	bx	r3
   127d4:			; <UNDEFINED> instruction: 0x000403b8
   127d8:			; <UNDEFINED> instruction: 0x000403b8
   127dc:	andeq	r0, r0, r0
   127e0:	push	{r4, lr}
   127e4:	ldr	r4, [pc, #24]	; 12804 <_start@@Base+0xe8>
   127e8:	ldrb	r3, [r4]
   127ec:	cmp	r3, #0
   127f0:	popne	{r4, pc}
   127f4:	bl	1277c <_start@@Base+0x60>
   127f8:	mov	r3, #1
   127fc:	strb	r3, [r4]
   12800:	pop	{r4, pc}
   12804:	andeq	r0, r4, r0, asr #7
   12808:	b	127a8 <_start@@Base+0x8c>
   1280c:	andeq	r0, r0, r0
   12810:	sub	r1, r1, r0
   12814:	strd	r4, [sp, #-8]!
   12818:	cmp	r1, #8
   1281c:	bhi	12850 <_start@@Base+0x134>
   12820:	sub	r1, r1, #1
   12824:	cmp	r1, #7
   12828:	ldrls	pc, [pc, r1, lsl #2]
   1282c:	b	128f8 <_start@@Base+0x1dc>
   12830:			; <UNDEFINED> instruction: 0x000128b0
   12834:			; <UNDEFINED> instruction: 0x000128bc
   12838:	andeq	r2, r1, r8, asr #17
   1283c:	ldrdeq	r2, [r1], -r4
   12840:	andeq	r2, r1, r0, ror #17
   12844:	andeq	r2, r1, ip, ror #17
   12848:	andeq	r2, r1, r4, lsr #17
   1284c:	andeq	r2, r1, r0, asr r8
   12850:	ldrb	r2, [r0, #7]
   12854:	mov	r3, #0
   12858:	mov	r1, r3
   1285c:	ldrb	r4, [r0, #6]
   12860:	orr	r2, r2, r4, lsl #8
   12864:	ldrb	r4, [r0, #5]
   12868:	orr	r2, r2, r4, lsl #16
   1286c:	ldrb	r4, [r0, #4]
   12870:	orr	r2, r2, r4, lsl #24
   12874:	ldrb	r4, [r0, #3]
   12878:	orr	r1, r1, r4
   1287c:	ldrb	r4, [r0, #2]
   12880:	orr	r1, r1, r4, lsl #8
   12884:	ldrb	r4, [r0, #1]
   12888:	orr	r1, r1, r4, lsl #16
   1288c:	ldrb	r4, [r0]
   12890:	mov	r0, r2
   12894:	orr	r1, r1, r4, lsl #24
   12898:	ldrd	r4, [sp]
   1289c:	add	sp, sp, #8
   128a0:	bx	lr
   128a4:	mov	r2, #0
   128a8:	mov	r3, #0
   128ac:	b	12858 <_start@@Base+0x13c>
   128b0:	mov	r2, #0
   128b4:	mov	r1, r2
   128b8:	b	1288c <_start@@Base+0x170>
   128bc:	mov	r2, #0
   128c0:	mov	r1, r2
   128c4:	b	12884 <_start@@Base+0x168>
   128c8:	mov	r2, #0
   128cc:	mov	r1, r2
   128d0:	b	1287c <_start@@Base+0x160>
   128d4:	mov	r2, #0
   128d8:	mov	r1, r2
   128dc:	b	12874 <_start@@Base+0x158>
   128e0:	mov	r2, #0
   128e4:	mov	r1, r2
   128e8:	b	1286c <_start@@Base+0x150>
   128ec:	mov	r2, #0
   128f0:	mov	r1, r2
   128f4:	b	12864 <_start@@Base+0x148>
   128f8:	mov	r0, #0
   128fc:	mov	r1, r0
   12900:	b	12898 <_start@@Base+0x17c>
   12904:	cmp	r0, #4
   12908:	movhi	r0, #0
   1290c:	movls	r0, #1
   12910:	bx	lr
   12914:	cmp	r0, #11
   12918:	bhi	1293c <_start@@Base+0x220>
   1291c:	cmp	r0, #8
   12920:	bcs	1294c <_start@@Base+0x230>
   12924:	cmp	r0, #0
   12928:	beq	1294c <_start@@Base+0x230>
   1292c:	sub	r0, r0, #2
   12930:	clz	r0, r0
   12934:	lsr	r0, r0, #5
   12938:	bx	lr
   1293c:	sub	r0, r0, #255	; 0xff
   12940:	clz	r0, r0
   12944:	lsr	r0, r0, #5
   12948:	bx	lr
   1294c:	mov	r0, #1
   12950:	bx	lr
   12954:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12958:	mov	r4, r1
   1295c:	mov	r1, r2
   12960:	strd	r6, [sp, #8]
   12964:	mov	r5, r2
   12968:	strd	r8, [sp, #16]
   1296c:	mov	r8, r0
   12970:	mov	r0, r4
   12974:	str	sl, [sp, #24]
   12978:	mov	r9, r3
   1297c:	str	lr, [sp, #28]
   12980:	sub	sp, sp, #8
   12984:	bl	12810 <_start@@Base+0xf4>
   12988:	add	r3, pc, #648	; 0x288
   1298c:	ldrd	r2, [r3]
   12990:	cmp	r1, r3
   12994:	cmpeq	r0, r2
   12998:	bhi	12a5c <_start@@Base+0x340>
   1299c:	add	r7, pc, #636	; 0x27c
   129a0:	ldrd	r6, [r7]
   129a4:	and	r2, r0, #-16777216	; 0xff000000
   129a8:	mov	r3, r1
   129ac:	cmp	r1, r7
   129b0:	cmpeq	r0, r6
   129b4:	bhi	129ec <_start@@Base+0x2d0>
   129b8:	add	r1, pc, #616	; 0x268
   129bc:	ldrd	r0, [r1]
   129c0:	cmp	r3, r1
   129c4:	cmpeq	r2, r0
   129c8:	beq	12b94 <_start@@Base+0x478>
   129cc:	mov	r0, r4
   129d0:	add	sp, sp, #8
   129d4:	ldrd	r4, [sp]
   129d8:	ldrd	r6, [sp, #8]
   129dc:	ldrd	r8, [sp, #16]
   129e0:	ldr	sl, [sp, #24]
   129e4:	add	sp, sp, #28
   129e8:	pop	{pc}		; (ldr pc, [sp], #4)
   129ec:	add	r7, pc, #572	; 0x23c
   129f0:	ldrd	r6, [r7]
   129f4:	cmp	r1, r7
   129f8:	cmpeq	r2, r6
   129fc:	beq	12bc0 <_start@@Base+0x4a4>
   12a00:	add	r7, pc, #560	; 0x230
   12a04:	ldrd	r6, [r7]
   12a08:	bic	r2, r0, #255	; 0xff
   12a0c:	cmp	r1, r7
   12a10:	cmpeq	r2, r6
   12a14:	bne	129cc <_start@@Base+0x2b0>
   12a18:	ldr	r3, [sp, #44]	; 0x2c
   12a1c:	mov	r2, r5
   12a20:	mov	r0, r8
   12a24:	mov	r1, r4
   12a28:	str	r3, [sp]
   12a2c:	mov	r3, #7
   12a30:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12a34:	cmp	r4, r0
   12a38:	movne	r6, #10
   12a3c:	beq	129cc <_start@@Base+0x2b0>
   12a40:	ldr	r2, [sp, #40]	; 0x28
   12a44:	mov	r7, #0
   12a48:	mov	r3, #0
   12a4c:	mov	r4, r0
   12a50:	strd	r6, [r2]
   12a54:	str	r3, [r9]
   12a58:	b	129cc <_start@@Base+0x2b0>
   12a5c:	add	r3, pc, #476	; 0x1dc
   12a60:	ldrd	r2, [r3]
   12a64:	cmp	r1, r3
   12a68:	cmpeq	r0, r2
   12a6c:	bhi	12ac8 <_start@@Base+0x3ac>
   12a70:	add	r7, pc, #464	; 0x1d0
   12a74:	ldrd	r6, [r7]
   12a78:	mov	sl, #0
   12a7c:	cmp	r1, r7
   12a80:	cmpeq	sl, r6
   12a84:	bne	129cc <_start@@Base+0x2b0>
   12a88:	ldr	r3, [sp, #44]	; 0x2c
   12a8c:	mov	r2, r5
   12a90:	mov	r0, r8
   12a94:	mov	r1, r4
   12a98:	str	r3, [sp]
   12a9c:	mov	r3, #4
   12aa0:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12aa4:	cmp	r4, r0
   12aa8:	beq	129cc <_start@@Base+0x2b0>
   12aac:	ldr	r1, [sp, #40]	; 0x28
   12ab0:	mov	r2, #0
   12ab4:	mov	r3, #0
   12ab8:	mov	r4, r0
   12abc:	strd	r2, [r1]
   12ac0:	str	sl, [r9]
   12ac4:	b	129cc <_start@@Base+0x2b0>
   12ac8:	add	r3, pc, #384	; 0x180
   12acc:	ldrd	r2, [r3]
   12ad0:	cmp	r1, r3
   12ad4:	cmpeq	r0, r2
   12ad8:	bls	12b50 <_start@@Base+0x434>
   12adc:	add	r7, pc, #372	; 0x174
   12ae0:	ldrd	r6, [r7]
   12ae4:	lsr	r2, r0, #16
   12ae8:	lsl	r2, r2, #16
   12aec:	cmp	r1, r7
   12af0:	cmpeq	r2, r6
   12af4:	beq	12bec <_start@@Base+0x4d0>
   12af8:	add	r3, pc, #352	; 0x160
   12afc:	ldrd	r2, [r3]
   12b00:	cmp	r1, r3
   12b04:	cmpeq	r0, r2
   12b08:	bne	129cc <_start@@Base+0x2b0>
   12b0c:	ldr	r3, [sp, #44]	; 0x2c
   12b10:	mov	r2, r5
   12b14:	mov	r0, r8
   12b18:	mov	r1, r4
   12b1c:	str	r3, [sp]
   12b20:	mov	r3, #8
   12b24:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12b28:	cmp	r4, r0
   12b2c:	beq	129cc <_start@@Base+0x2b0>
   12b30:	ldr	r2, [sp, #40]	; 0x28
   12b34:	mov	r4, r0
   12b38:	mov	r1, #0
   12b3c:	mov	r0, #8
   12b40:	mov	r3, #0
   12b44:	strd	r0, [r2]
   12b48:	str	r3, [r9]
   12b4c:	b	129cc <_start@@Base+0x2b0>
   12b50:	add	r7, pc, #272	; 0x110
   12b54:	ldrd	r6, [r7]
   12b58:	and	r2, r0, #-16777216	; 0xff000000
   12b5c:	cmp	r1, r7
   12b60:	cmpeq	r2, r6
   12b64:	bne	129cc <_start@@Base+0x2b0>
   12b68:	ldr	r3, [sp, #44]	; 0x2c
   12b6c:	mov	r2, r5
   12b70:	mov	r0, r8
   12b74:	mov	r1, r4
   12b78:	str	r3, [sp]
   12b7c:	mov	r3, #5
   12b80:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12b84:	cmp	r4, r0
   12b88:	movne	r6, #11
   12b8c:	bne	12a40 <_start@@Base+0x324>
   12b90:	b	129cc <_start@@Base+0x2b0>
   12b94:	ldr	r3, [sp, #44]	; 0x2c
   12b98:	mov	r2, r5
   12b9c:	mov	r0, r8
   12ba0:	mov	r1, r4
   12ba4:	str	r3, [sp]
   12ba8:	mov	r3, #5
   12bac:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12bb0:	cmp	r4, r0
   12bb4:	movne	r6, #9
   12bb8:	bne	12a40 <_start@@Base+0x324>
   12bbc:	b	129cc <_start@@Base+0x2b0>
   12bc0:	ldr	r3, [sp, #44]	; 0x2c
   12bc4:	mov	r2, r5
   12bc8:	mov	r0, r8
   12bcc:	mov	r1, r4
   12bd0:	str	r3, [sp]
   12bd4:	mov	r3, #5
   12bd8:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12bdc:	cmp	r4, r0
   12be0:	movne	r6, #2
   12be4:	bne	12a40 <_start@@Base+0x324>
   12be8:	b	129cc <_start@@Base+0x2b0>
   12bec:	ldr	r3, [sp, #44]	; 0x2c
   12bf0:	mov	r2, r5
   12bf4:	mov	r0, r8
   12bf8:	mov	r1, r4
   12bfc:	str	r3, [sp]
   12c00:	mov	r3, #6
   12c04:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12c08:	cmp	r4, r0
   12c0c:	beq	129cc <_start@@Base+0x2b0>
   12c10:	mov	r6, #255	; 0xff
   12c14:	b	12a40 <_start@@Base+0x324>
   12c18:			; <UNDEFINED> instruction: 0xffffffff
   12c1c:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12c20:			; <UNDEFINED> instruction: 0x46616dff
   12c24:	rsbmi	r6, pc, #428	; 0x1ac
   12c28:	strvs	r0, [r0, #-0]
   12c2c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12c30:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12c34:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12c38:	strbtmi	r6, [r1], -r0, lsl #28
   12c3c:	rsbmi	r6, pc, #428	; 0x1ac
   12c40:	ldrshvc	pc, [pc, #255]	; 12d47 <_start@@Base+0x62b>	; <UNPREDICTABLE>
   12c44:	svcmi	0x00746865
   12c48:	andeq	r0, r0, r0
   12c4c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12c50:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12c54:	rsbpl	r7, r1, #117	; 0x75
   12c58:	strbvs	r0, [r4, #-0]!
   12c5c:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12c60:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12c64:	rsbpl	r7, r1, #117	; 0x75
   12c68:	andvc	r0, r0, #0
   12c6c:	svcmi	0x00746865
   12c70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c74:	mov	r4, r1
   12c78:	mov	r1, r2
   12c7c:	strd	r6, [sp, #8]
   12c80:	mov	r5, r2
   12c84:	strd	r8, [sp, #16]
   12c88:	mov	r8, r0
   12c8c:	mov	r0, r4
   12c90:	strd	sl, [sp, #24]
   12c94:	mov	r9, r3
   12c98:	str	lr, [sp, #32]
   12c9c:	sub	sp, sp, #12
   12ca0:	bl	12810 <_start@@Base+0xf4>
   12ca4:	add	r3, pc, #524	; 0x20c
   12ca8:	ldrd	r2, [r3]
   12cac:	cmp	r1, r3
   12cb0:	cmpeq	r0, r2
   12cb4:	bhi	12cf4 <_start@@Base+0x5d8>
   12cb8:	add	r7, pc, #512	; 0x200
   12cbc:	ldrd	r6, [r7]
   12cc0:	bic	r3, r1, #255	; 0xff
   12cc4:	mov	sl, #0
   12cc8:	cmp	r3, r7
   12ccc:	cmpeq	sl, r6
   12cd0:	beq	12dd0 <_start@@Base+0x6b4>
   12cd4:	mov	r0, r4
   12cd8:	add	sp, sp, #12
   12cdc:	ldrd	r4, [sp]
   12ce0:	ldrd	r6, [sp, #8]
   12ce4:	ldrd	r8, [sp, #16]
   12ce8:	ldrd	sl, [sp, #24]
   12cec:	add	sp, sp, #32
   12cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf4:	add	r3, pc, #460	; 0x1cc
   12cf8:	ldrd	r2, [r3]
   12cfc:	cmp	r1, r3
   12d00:	cmpeq	r0, r2
   12d04:	beq	12e88 <_start@@Base+0x76c>
   12d08:	add	r7, pc, #448	; 0x1c0
   12d0c:	ldrd	r6, [r7]
   12d10:	bic	r2, r0, #255	; 0xff
   12d14:	cmp	r1, r7
   12d18:	cmpeq	r2, r6
   12d1c:	beq	12e48 <_start@@Base+0x72c>
   12d20:	add	r7, pc, #432	; 0x1b0
   12d24:	ldrd	r6, [r7]
   12d28:	mov	sl, #0
   12d2c:	cmp	r1, r7
   12d30:	cmpeq	sl, r6
   12d34:	beq	12e0c <_start@@Base+0x6f0>
   12d38:	add	r3, pc, #416	; 0x1a0
   12d3c:	ldrd	r2, [r3]
   12d40:	cmp	r1, r3
   12d44:	cmpeq	r0, r2
   12d48:	bne	12cd4 <_start@@Base+0x5b8>
   12d4c:	mov	r1, r5
   12d50:	add	r0, r4, #8
   12d54:	bl	12810 <_start@@Base+0xf4>
   12d58:	add	r3, pc, #392	; 0x188
   12d5c:	ldrd	r2, [r3]
   12d60:	cmp	r1, r3
   12d64:	cmpeq	r0, r2
   12d68:	bne	12cd4 <_start@@Base+0x5b8>
   12d6c:	add	r7, pc, #380	; 0x17c
   12d70:	ldrd	r6, [r7]
   12d74:	add	fp, r4, #16
   12d78:	mov	r1, r5
   12d7c:	mov	r0, fp
   12d80:	bl	12810 <_start@@Base+0xf4>
   12d84:	bic	r2, r0, #255	; 0xff
   12d88:	cmp	r1, r7
   12d8c:	cmpeq	r2, r6
   12d90:	bne	12cd4 <_start@@Base+0x5b8>
   12d94:	ldr	r3, [sp, #52]	; 0x34
   12d98:	mov	r2, r5
   12d9c:	mov	r0, r8
   12da0:	mov	r1, fp
   12da4:	str	r3, [sp]
   12da8:	mov	r3, #7
   12dac:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12db0:	cmp	fp, r0
   12db4:	beq	12cd4 <_start@@Base+0x5b8>
   12db8:	ldr	r1, [sp, #48]	; 0x30
   12dbc:	mov	r2, #2
   12dc0:	mov	r3, #0
   12dc4:	strd	r2, [r1]
   12dc8:	str	sl, [r9]
   12dcc:	b	12cd8 <_start@@Base+0x5bc>
   12dd0:	ldr	r3, [sp, #52]	; 0x34
   12dd4:	mov	r2, r5
   12dd8:	mov	r0, r8
   12ddc:	mov	r1, r4
   12de0:	str	r3, [sp]
   12de4:	mov	r3, #3
   12de8:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12dec:	cmp	r4, r0
   12df0:	beq	12cd8 <_start@@Base+0x5bc>
   12df4:	ldr	r1, [sp, #48]	; 0x30
   12df8:	mov	r2, #4
   12dfc:	mov	r3, #0
   12e00:	strd	r2, [r1]
   12e04:	str	sl, [r9]
   12e08:	b	12cd8 <_start@@Base+0x5bc>
   12e0c:	ldr	r3, [sp, #52]	; 0x34
   12e10:	mov	r2, r5
   12e14:	mov	r0, r8
   12e18:	mov	r1, r4
   12e1c:	str	r3, [sp]
   12e20:	mov	r3, #4
   12e24:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12e28:	cmp	r4, r0
   12e2c:	beq	12cd8 <_start@@Base+0x5bc>
   12e30:	ldr	r1, [sp, #48]	; 0x30
   12e34:	mov	r2, #0
   12e38:	mov	r3, #0
   12e3c:	strd	r2, [r1]
   12e40:	str	sl, [r9]
   12e44:	b	12cd8 <_start@@Base+0x5bc>
   12e48:	ldr	r3, [sp, #52]	; 0x34
   12e4c:	mov	r2, r5
   12e50:	mov	r0, r8
   12e54:	mov	r1, r4
   12e58:	str	r3, [sp]
   12e5c:	mov	r3, #7
   12e60:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12e64:	cmp	r4, r0
   12e68:	beq	12cd4 <_start@@Base+0x5b8>
   12e6c:	mov	r4, #1
   12e70:	ldr	r2, [sp, #48]	; 0x30
   12e74:	mov	r5, #0
   12e78:	mov	r3, #0
   12e7c:	strd	r4, [r2]
   12e80:	str	r3, [r9]
   12e84:	b	12cd8 <_start@@Base+0x5bc>
   12e88:	ldr	r3, [sp, #52]	; 0x34
   12e8c:	mov	r1, r4
   12e90:	mov	r2, r5
   12e94:	mov	r0, r8
   12e98:	str	r3, [sp]
   12e9c:	mov	r3, #8
   12ea0:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12ea4:	cmp	r4, r0
   12ea8:	movne	r4, #3
   12eac:	bne	12e70 <_start@@Base+0x754>
   12eb0:	b	12cd4 <_start@@Base+0x5b8>
   12eb4:	nop	{0}
   12eb8:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   12ebc:	stclmi	14, cr6, [pc, #-460]!	; 12cf8 <_start@@Base+0x5dc>
   12ec0:	andeq	r0, r0, r0
   12ec4:	cmnmi	ip, r0, lsl #8
   12ec8:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   12ecc:	stclmi	14, cr6, [pc, #-460]!	; 12d08 <_start@@Base+0x5ec>
   12ed0:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   12ed4:	stclmi	14, cr6, [pc, #-460]!	; 12d10 <_start@@Base+0x5f4>
   12ed8:	andeq	r0, r0, r0
   12edc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12ee0:	cmnpl	r9, #112, 26	; 0x1c00
   12ee4:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   12ee8:	rsbvs	r6, ip, #364904448	; 0x15c00000
   12eec:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   12ef0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   12ef4:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   12ef8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12efc:	mov	r4, r1
   12f00:	mov	r5, r0
   12f04:	mov	r1, r2
   12f08:	mov	r0, r4
   12f0c:	strd	r6, [sp, #8]
   12f10:	strd	r8, [sp, #16]
   12f14:	strd	sl, [sp, #24]
   12f18:	mov	sl, r2
   12f1c:	mov	fp, r3
   12f20:	str	lr, [sp, #32]
   12f24:	sub	sp, sp, #12
   12f28:	bl	12810 <_start@@Base+0xf4>
   12f2c:	add	r3, pc, #316	; 0x13c
   12f30:	ldrd	r2, [r3]
   12f34:	cmp	r1, r3
   12f38:	cmpeq	r0, r2
   12f3c:	bhi	12f78 <_start@@Base+0x85c>
   12f40:	add	r7, pc, #304	; 0x130
   12f44:	ldrd	r6, [r7]
   12f48:	mov	r8, #0
   12f4c:	cmp	r1, r7
   12f50:	cmpeq	r8, r6
   12f54:	beq	12fec <_start@@Base+0x8d0>
   12f58:	mov	r0, r4
   12f5c:	add	sp, sp, #12
   12f60:	ldrd	r4, [sp]
   12f64:	ldrd	r6, [sp, #8]
   12f68:	ldrd	r8, [sp, #16]
   12f6c:	ldrd	sl, [sp, #24]
   12f70:	add	sp, sp, #32
   12f74:	pop	{pc}		; (ldr pc, [sp], #4)
   12f78:	add	r9, pc, #256	; 0x100
   12f7c:	ldrd	r8, [r9]
   12f80:	lsr	r6, r0, #16
   12f84:	lsl	r6, r6, #16
   12f88:	cmp	r1, r9
   12f8c:	cmpeq	r6, r8
   12f90:	beq	1302c <_start@@Base+0x910>
   12f94:	add	r7, pc, #236	; 0xec
   12f98:	ldrd	r6, [r7]
   12f9c:	mov	r8, #0
   12fa0:	cmp	r1, r7
   12fa4:	cmpeq	r8, r6
   12fa8:	bne	12f58 <_start@@Base+0x83c>
   12fac:	ldr	r3, [sp, #52]	; 0x34
   12fb0:	mov	r2, sl
   12fb4:	mov	r0, r5
   12fb8:	mov	r1, r4
   12fbc:	str	r3, [sp]
   12fc0:	mov	r3, #4
   12fc4:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   12fc8:	cmp	r4, r0
   12fcc:	beq	12f58 <_start@@Base+0x83c>
   12fd0:	add	r3, pc, #184	; 0xb8
   12fd4:	ldrd	r2, [r3]
   12fd8:	mov	r4, r0
   12fdc:	ldr	r1, [sp, #48]	; 0x30
   12fe0:	strd	r2, [r1]
   12fe4:	str	r8, [fp]
   12fe8:	b	12f58 <_start@@Base+0x83c>
   12fec:	ldr	r3, [sp, #52]	; 0x34
   12ff0:	mov	r2, sl
   12ff4:	mov	r0, r5
   12ff8:	mov	r1, r4
   12ffc:	str	r3, [sp]
   13000:	mov	r3, #4
   13004:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   13008:	cmp	r4, r0
   1300c:	beq	12f58 <_start@@Base+0x83c>
   13010:	ldr	r1, [sp, #48]	; 0x30
   13014:	mov	r2, #3
   13018:	mov	r3, #0
   1301c:	mov	r4, r0
   13020:	strd	r2, [r1]
   13024:	str	r8, [fp]
   13028:	b	12f58 <_start@@Base+0x83c>
   1302c:	ldr	r3, [sp, #52]	; 0x34
   13030:	mov	r2, sl
   13034:	mov	r0, r5
   13038:	mov	r1, r4
   1303c:	str	r3, [sp]
   13040:	mov	r3, #6
   13044:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   13048:	cmp	r4, r0
   1304c:	beq	12f58 <_start@@Base+0x83c>
   13050:	ldr	r2, [sp, #48]	; 0x30
   13054:	mvn	r6, #1
   13058:	mvn	r7, #0
   1305c:	mov	r3, #1
   13060:	mov	r4, r0
   13064:	strd	r6, [r2]
   13068:	str	r3, [fp]
   1306c:	b	12f58 <_start@@Base+0x83c>
   13070:			; <UNDEFINED> instruction: 0xffffffff
   13074:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13078:	andeq	r0, r0, r0
   1307c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   13080:	strbvs	r0, [r7, #-0]!
   13084:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   13088:	andeq	r0, r0, r0
   1308c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   13090:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   13094:	andeq	r0, r0, r0
   13098:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1309c:	mov	r4, r1
   130a0:	mov	r1, r2
   130a4:	strd	r6, [sp, #8]
   130a8:	mov	r5, r2
   130ac:	strd	r8, [sp, #16]
   130b0:	mov	r8, r0
   130b4:	mov	r0, r4
   130b8:	str	sl, [sp, #24]
   130bc:	mov	r9, r3
   130c0:	str	lr, [sp, #28]
   130c4:	sub	sp, sp, #8
   130c8:	bl	12810 <_start@@Base+0xf4>
   130cc:	add	r3, pc, #412	; 0x19c
   130d0:	ldrd	r2, [r3]
   130d4:	cmp	r1, r3
   130d8:	cmpeq	r0, r2
   130dc:	bhi	13118 <_start@@Base+0x9fc>
   130e0:	add	r7, pc, #400	; 0x190
   130e4:	ldrd	r6, [r7]
   130e8:	mov	sl, #0
   130ec:	cmp	r1, r7
   130f0:	cmpeq	sl, r6
   130f4:	beq	131e8 <_start@@Base+0xacc>
   130f8:	mov	r0, r4
   130fc:	add	sp, sp, #8
   13100:	ldrd	r4, [sp]
   13104:	ldrd	r6, [sp, #8]
   13108:	ldrd	r8, [sp, #16]
   1310c:	ldr	sl, [sp, #24]
   13110:	add	sp, sp, #28
   13114:	pop	{pc}		; (ldr pc, [sp], #4)
   13118:	add	r3, pc, #352	; 0x160
   1311c:	ldrd	r2, [r3]
   13120:	cmp	r1, r3
   13124:	cmpeq	r0, r2
   13128:	bhi	13170 <_start@@Base+0xa54>
   1312c:	add	r7, pc, #340	; 0x154
   13130:	ldrd	r6, [r7]
   13134:	mov	sl, #0
   13138:	cmp	r1, r7
   1313c:	cmpeq	sl, r6
   13140:	bne	130f8 <_start@@Base+0x9dc>
   13144:	ldr	r3, [sp, #44]	; 0x2c
   13148:	mov	r2, r5
   1314c:	mov	r0, r8
   13150:	mov	r1, r4
   13154:	str	r3, [sp]
   13158:	mov	r3, #4
   1315c:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   13160:	cmp	r4, r0
   13164:	beq	130f8 <_start@@Base+0x9dc>
   13168:	mov	r2, #42	; 0x2a
   1316c:	b	13210 <_start@@Base+0xaf4>
   13170:	add	r7, pc, #280	; 0x118
   13174:	ldrd	r6, [r7]
   13178:	bic	r2, r0, #255	; 0xff
   1317c:	cmp	r1, r7
   13180:	cmpeq	r2, r6
   13184:	beq	13228 <_start@@Base+0xb0c>
   13188:	add	r7, pc, #264	; 0x108
   1318c:	ldrd	r6, [r7]
   13190:	lsr	r2, r0, #16
   13194:	lsl	r2, r2, #16
   13198:	cmp	r1, r7
   1319c:	cmpeq	r2, r6
   131a0:	bne	130f8 <_start@@Base+0x9dc>
   131a4:	ldr	r3, [sp, #44]	; 0x2c
   131a8:	mov	r2, r5
   131ac:	mov	r0, r8
   131b0:	mov	r1, r4
   131b4:	str	r3, [sp]
   131b8:	mov	r3, #6
   131bc:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   131c0:	cmp	r4, r0
   131c4:	beq	130f8 <_start@@Base+0x9dc>
   131c8:	ldr	r2, [sp, #40]	; 0x28
   131cc:	mov	r4, r0
   131d0:	mvn	r1, #0
   131d4:	mvn	r0, #1
   131d8:	mov	r3, #1
   131dc:	strd	r0, [r2]
   131e0:	str	r3, [r9]
   131e4:	b	130f8 <_start@@Base+0x9dc>
   131e8:	ldr	r3, [sp, #44]	; 0x2c
   131ec:	mov	r2, r5
   131f0:	mov	r0, r8
   131f4:	mov	r1, r4
   131f8:	str	r3, [sp]
   131fc:	mov	r3, #4
   13200:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   13204:	cmp	r4, r0
   13208:	movne	r2, #2
   1320c:	beq	130f8 <_start@@Base+0x9dc>
   13210:	ldr	r1, [sp, #40]	; 0x28
   13214:	mov	r3, #0
   13218:	mov	r4, r0
   1321c:	strd	r2, [r1]
   13220:	str	sl, [r9]
   13224:	b	130f8 <_start@@Base+0x9dc>
   13228:	ldr	r3, [sp, #44]	; 0x2c
   1322c:	mov	r2, r5
   13230:	mov	r0, r8
   13234:	mov	r1, r4
   13238:	str	r3, [sp]
   1323c:	mov	r3, #7
   13240:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   13244:	cmp	r4, r0
   13248:	beq	130f8 <_start@@Base+0x9dc>
   1324c:	ldr	r2, [sp, #40]	; 0x28
   13250:	mvn	r6, #0
   13254:	mvn	r7, #0
   13258:	mov	r3, #1
   1325c:	mov	r4, r0
   13260:	strd	r6, [r2]
   13264:	str	r3, [r9]
   13268:	b	130f8 <_start@@Base+0x9dc>
   1326c:	nop	{0}
   13270:			; <UNDEFINED> instruction: 0xffffffff
   13274:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13278:	andeq	r0, r0, r0
   1327c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13280:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   13284:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13288:	andeq	r0, r0, r0
   1328c:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   13290:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   13294:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13298:	strbvs	r0, [r7, #-0]!
   1329c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   132a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   132a4:	mov	r4, r1
   132a8:	mov	r1, r2
   132ac:	strd	r6, [sp, #8]
   132b0:	mov	r5, r2
   132b4:	strd	r8, [sp, #16]
   132b8:	mov	r8, r0
   132bc:	mov	r0, r4
   132c0:	str	sl, [sp, #24]
   132c4:	mov	r9, r3
   132c8:	str	lr, [sp, #28]
   132cc:	sub	sp, sp, #8
   132d0:	bl	12810 <_start@@Base+0xf4>
   132d4:	add	r3, pc, #292	; 0x124
   132d8:	ldrd	r2, [r3]
   132dc:	cmp	r1, r3
   132e0:	cmpeq	r0, r2
   132e4:	bhi	13320 <_start@@Base+0xc04>
   132e8:	add	r7, pc, #280	; 0x118
   132ec:	ldrd	r6, [r7]
   132f0:	mov	sl, #0
   132f4:	cmp	r1, r7
   132f8:	cmpeq	sl, r6
   132fc:	beq	13394 <_start@@Base+0xc78>
   13300:	mov	r0, r4
   13304:	add	sp, sp, #8
   13308:	ldrd	r4, [sp]
   1330c:	ldrd	r6, [sp, #8]
   13310:	ldrd	r8, [sp, #16]
   13314:	ldr	sl, [sp, #24]
   13318:	add	sp, sp, #28
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)
   13320:	add	r7, pc, #232	; 0xe8
   13324:	ldrd	r6, [r7]
   13328:	bic	r3, r1, #255	; 0xff
   1332c:	mov	sl, #0
   13330:	cmp	r3, r7
   13334:	cmpeq	sl, r6
   13338:	beq	133d4 <_start@@Base+0xcb8>
   1333c:	add	r7, pc, #212	; 0xd4
   13340:	ldrd	r6, [r7]
   13344:	and	r2, r0, #-16777216	; 0xff000000
   13348:	cmp	r1, r7
   1334c:	cmpeq	r2, r6
   13350:	bne	13300 <_start@@Base+0xbe4>
   13354:	ldr	r3, [sp, #44]	; 0x2c
   13358:	mov	r2, r5
   1335c:	mov	r0, r8
   13360:	mov	r1, r4
   13364:	str	r3, [sp]
   13368:	mov	r3, #5
   1336c:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   13370:	cmp	r4, r0
   13374:	beq	13300 <_start@@Base+0xbe4>
   13378:	ldr	r1, [sp, #40]	; 0x28
   1337c:	mov	r2, #2
   13380:	mov	r3, #0
   13384:	mov	r4, r0
   13388:	strd	r2, [r1]
   1338c:	str	sl, [r9]
   13390:	b	13300 <_start@@Base+0xbe4>
   13394:	ldr	r3, [sp, #44]	; 0x2c
   13398:	mov	r2, r5
   1339c:	mov	r0, r8
   133a0:	mov	r1, r4
   133a4:	str	r3, [sp]
   133a8:	mov	r3, #4
   133ac:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   133b0:	cmp	r4, r0
   133b4:	movne	r2, #8
   133b8:	beq	13300 <_start@@Base+0xbe4>
   133bc:	ldr	r1, [sp, #40]	; 0x28
   133c0:	mov	r3, #0
   133c4:	mov	r4, r0
   133c8:	strd	r2, [r1]
   133cc:	str	sl, [r9]
   133d0:	b	13300 <_start@@Base+0xbe4>
   133d4:	ldr	r3, [sp, #44]	; 0x2c
   133d8:	mov	r2, r5
   133dc:	mov	r0, r8
   133e0:	mov	r1, r4
   133e4:	str	r3, [sp]
   133e8:	mov	r3, #3
   133ec:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   133f0:	cmp	r4, r0
   133f4:	beq	13300 <_start@@Base+0xbe4>
   133f8:	mov	r2, #1
   133fc:	b	133bc <_start@@Base+0xca0>
   13400:	ldclvs	15, cr15, [pc, #1020]!	; 13804 <_start@@Base+0x10e8>
   13404:	ldrbmi	r6, [r2, -r5, ror #10]!
   13408:	andeq	r0, r0, r0
   1340c:	rsbmi	r7, ip, #423624704	; 0x19400000
   13410:	andeq	r0, r0, r0
   13414:	rsbpl	r6, r5, #0, 8
   13418:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1341c:	ldrbmi	r6, [r2, -r5, ror #10]!
   13420:	sub	r3, r2, r1
   13424:	cmp	r3, #1
   13428:	ble	1343c <_start@@Base+0xd20>
   1342c:	ldrb	r3, [r1]
   13430:	cmp	r3, #32
   13434:	bhi	13440 <_start@@Base+0xd24>
   13438:	beq	13448 <_start@@Base+0xd2c>
   1343c:	b	2806c <flatcc_json_parser_space_ext@@Base>
   13440:	mov	r0, r1
   13444:	bx	lr
   13448:	ldrb	r3, [r1, #1]
   1344c:	cmp	r3, #32
   13450:	bls	1343c <_start@@Base+0xd20>
   13454:	add	r0, r1, #1
   13458:	bx	lr
   1345c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13460:	mov	r4, #0
   13464:	mov	r5, #0
   13468:	strd	r6, [sp, #8]
   1346c:	mov	r6, #0
   13470:	cmp	r1, r2
   13474:	str	lr, [sp, #16]
   13478:	sub	sp, sp, #28
   1347c:	moveq	r0, r1
   13480:	strd	r4, [r3]
   13484:	str	r6, [sp, #12]
   13488:	strd	r4, [sp, #16]
   1348c:	beq	134b8 <_start@@Base+0xd9c>
   13490:	add	ip, sp, #16
   13494:	mov	r5, r3
   13498:	add	r3, sp, #12
   1349c:	mov	r4, r1
   134a0:	str	ip, [sp]
   134a4:	mov	r7, r0
   134a8:	mov	r6, r2
   134ac:	bl	2b638 <flatcc_json_parser_integer@@Base>
   134b0:	cmp	r4, r0
   134b4:	bne	134cc <_start@@Base+0xdb0>
   134b8:	add	sp, sp, #28
   134bc:	ldrd	r4, [sp]
   134c0:	ldrd	r6, [sp, #8]
   134c4:	add	sp, sp, #16
   134c8:	pop	{pc}		; (ldr pc, [sp], #4)
   134cc:	ldr	r1, [sp, #12]
   134d0:	ldrd	r2, [sp, #16]
   134d4:	cmp	r1, #0
   134d8:	beq	134f8 <_start@@Base+0xddc>
   134dc:	cmp	r3, #-2147483648	; 0x80000000
   134e0:	cmpeq	r2, #0
   134e4:	bhi	13520 <_start@@Base+0xe04>
   134e8:	rsbs	r2, r2, #0
   134ec:	rsc	r3, r3, #0
   134f0:	strd	r2, [r5]
   134f4:	b	134b8 <_start@@Base+0xd9c>
   134f8:	cmp	r2, #0
   134fc:	sbcs	r1, r3, #0
   13500:	strdge	r2, [r5]
   13504:	bge	134b8 <_start@@Base+0xd9c>
   13508:	mov	r1, r0
   1350c:	mov	r2, r6
   13510:	mov	r0, r7
   13514:	mov	r3, #7
   13518:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1351c:	b	134b8 <_start@@Base+0xd9c>
   13520:	mov	r1, r0
   13524:	mov	r2, r6
   13528:	mov	r0, r7
   1352c:	mov	r3, #8
   13530:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13534:	b	134b8 <_start@@Base+0xd9c>
   13538:	strd	r4, [sp, #-20]!	; 0xffffffec
   1353c:	mov	r4, #0
   13540:	mov	r5, #0
   13544:	strd	r6, [sp, #8]
   13548:	mov	r6, #0
   1354c:	cmp	r1, r2
   13550:	str	lr, [sp, #16]
   13554:	sub	sp, sp, #28
   13558:	moveq	r0, r1
   1355c:	strd	r4, [r3]
   13560:	str	r6, [sp, #12]
   13564:	strd	r4, [sp, #16]
   13568:	beq	135a8 <_start@@Base+0xe8c>
   1356c:	add	ip, sp, #16
   13570:	mov	r5, r3
   13574:	add	r3, sp, #12
   13578:	mov	r4, r1
   1357c:	str	ip, [sp]
   13580:	mov	r7, r0
   13584:	mov	r6, r2
   13588:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1358c:	cmp	r4, r0
   13590:	beq	135a8 <_start@@Base+0xe8c>
   13594:	ldr	r3, [sp, #12]
   13598:	cmp	r3, #0
   1359c:	bne	135bc <_start@@Base+0xea0>
   135a0:	ldrd	r2, [sp, #16]
   135a4:	strd	r2, [r5]
   135a8:	add	sp, sp, #28
   135ac:	ldrd	r4, [sp]
   135b0:	ldrd	r6, [sp, #8]
   135b4:	add	sp, sp, #16
   135b8:	pop	{pc}		; (ldr pc, [sp], #4)
   135bc:	mov	r1, r0
   135c0:	mov	r2, r6
   135c4:	mov	r0, r7
   135c8:	mov	r3, #8
   135cc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   135d0:	b	135a8 <_start@@Base+0xe8c>
   135d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   135d8:	cmp	r1, r2
   135dc:	strd	r6, [sp, #8]
   135e0:	mov	r6, #0
   135e4:	mov	r7, #0
   135e8:	str	lr, [sp, #16]
   135ec:	sub	sp, sp, #28
   135f0:	mov	lr, #0
   135f4:	moveq	r0, r1
   135f8:	strb	lr, [r3]
   135fc:	str	lr, [sp, #12]
   13600:	strd	r6, [sp, #16]
   13604:	beq	13630 <_start@@Base+0xf14>
   13608:	add	ip, sp, #16
   1360c:	mov	r5, r3
   13610:	add	r3, sp, #12
   13614:	mov	r4, r1
   13618:	str	ip, [sp]
   1361c:	mov	r7, r0
   13620:	mov	r6, r2
   13624:	bl	2b638 <flatcc_json_parser_integer@@Base>
   13628:	cmp	r4, r0
   1362c:	bne	13644 <_start@@Base+0xf28>
   13630:	add	sp, sp, #28
   13634:	ldrd	r4, [sp]
   13638:	ldrd	r6, [sp, #8]
   1363c:	add	sp, sp, #16
   13640:	pop	{pc}		; (ldr pc, [sp], #4)
   13644:	ldr	r3, [sp, #12]
   13648:	cmp	r3, #0
   1364c:	bne	1367c <_start@@Base+0xf60>
   13650:	ldrd	r2, [sp, #16]
   13654:	cmp	r3, #0
   13658:	cmpeq	r2, #255	; 0xff
   1365c:	strbls	r2, [r5]
   13660:	bls	13630 <_start@@Base+0xf14>
   13664:	mov	r1, r0
   13668:	mov	r2, r6
   1366c:	mov	r0, r7
   13670:	mov	r3, #7
   13674:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13678:	b	13630 <_start@@Base+0xf14>
   1367c:	mov	r1, r0
   13680:	mov	r2, r6
   13684:	mov	r0, r7
   13688:	mov	r3, #8
   1368c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13690:	b	13630 <_start@@Base+0xf14>
   13694:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13698:	cmp	r1, r2
   1369c:	strd	r6, [sp, #8]
   136a0:	mov	r6, #0
   136a4:	mov	r7, #0
   136a8:	strd	r8, [sp, #16]
   136ac:	moveq	r0, r1
   136b0:	str	lr, [sp, #24]
   136b4:	sub	sp, sp, #28
   136b8:	mov	lr, #0
   136bc:	str	lr, [r3]
   136c0:	str	lr, [sp, #12]
   136c4:	strd	r6, [sp, #16]
   136c8:	beq	136f4 <_start@@Base+0xfd8>
   136cc:	add	ip, sp, #16
   136d0:	mov	r5, r3
   136d4:	add	r3, sp, #12
   136d8:	mov	r4, r1
   136dc:	str	ip, [sp]
   136e0:	mov	r7, r0
   136e4:	mov	r6, r2
   136e8:	bl	2b638 <flatcc_json_parser_integer@@Base>
   136ec:	cmp	r4, r0
   136f0:	bne	1370c <_start@@Base+0xff0>
   136f4:	add	sp, sp, #28
   136f8:	ldrd	r4, [sp]
   136fc:	ldrd	r6, [sp, #8]
   13700:	ldrd	r8, [sp, #16]
   13704:	add	sp, sp, #24
   13708:	pop	{pc}		; (ldr pc, [sp], #4)
   1370c:	ldr	r3, [sp, #12]
   13710:	cmp	r3, #0
   13714:	bne	1374c <_start@@Base+0x1030>
   13718:	ldrd	r2, [sp, #16]
   1371c:	mov	r9, #0
   13720:	mvn	r8, #0
   13724:	cmp	r3, r9
   13728:	cmpeq	r2, r8
   1372c:	strls	r2, [r5]
   13730:	bls	136f4 <_start@@Base+0xfd8>
   13734:	mov	r1, r0
   13738:	mov	r2, r6
   1373c:	mov	r0, r7
   13740:	mov	r3, #7
   13744:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13748:	b	136f4 <_start@@Base+0xfd8>
   1374c:	mov	r1, r0
   13750:	mov	r2, r6
   13754:	mov	r0, r7
   13758:	mov	r3, #8
   1375c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13760:	b	136f4 <_start@@Base+0xfd8>
   13764:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13768:	cmp	r1, r2
   1376c:	strd	r6, [sp, #8]
   13770:	mov	r6, #0
   13774:	mov	r7, #0
   13778:	strd	r8, [sp, #16]
   1377c:	moveq	r0, r1
   13780:	str	lr, [sp, #24]
   13784:	sub	sp, sp, #28
   13788:	mov	lr, #0
   1378c:	str	lr, [r3]
   13790:	str	lr, [sp, #12]
   13794:	strd	r6, [sp, #16]
   13798:	beq	137c4 <_start@@Base+0x10a8>
   1379c:	add	ip, sp, #16
   137a0:	mov	r5, r3
   137a4:	add	r3, sp, #12
   137a8:	mov	r4, r1
   137ac:	str	ip, [sp]
   137b0:	mov	r7, r0
   137b4:	mov	r6, r2
   137b8:	bl	2b638 <flatcc_json_parser_integer@@Base>
   137bc:	cmp	r4, r0
   137c0:	bne	137dc <_start@@Base+0x10c0>
   137c4:	add	sp, sp, #28
   137c8:	ldrd	r4, [sp]
   137cc:	ldrd	r6, [sp, #8]
   137d0:	ldrd	r8, [sp, #16]
   137d4:	add	sp, sp, #24
   137d8:	pop	{pc}		; (ldr pc, [sp], #4)
   137dc:	ldr	r1, [sp, #12]
   137e0:	ldrd	r2, [sp, #16]
   137e4:	cmp	r1, #0
   137e8:	beq	13818 <_start@@Base+0x10fc>
   137ec:	cmp	r3, #0
   137f0:	cmpeq	r2, #-2147483648	; 0x80000000
   137f4:	rsbls	r2, r2, #0
   137f8:	strls	r2, [r5]
   137fc:	bls	137c4 <_start@@Base+0x10a8>
   13800:	mov	r1, r0
   13804:	mov	r2, r6
   13808:	mov	r0, r7
   1380c:	mov	r3, #8
   13810:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13814:	b	137c4 <_start@@Base+0x10a8>
   13818:	mov	r9, #0
   1381c:	mvn	r8, #-2147483648	; 0x80000000
   13820:	cmp	r3, r9
   13824:	cmpeq	r2, r8
   13828:	strls	r2, [r5]
   1382c:	bls	137c4 <_start@@Base+0x10a8>
   13830:	mov	r1, r0
   13834:	mov	r2, r6
   13838:	mov	r0, r7
   1383c:	mov	r3, #7
   13840:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13844:	b	137c4 <_start@@Base+0x10a8>
   13848:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1384c:	cmp	r1, r2
   13850:	strd	r6, [sp, #8]
   13854:	mov	r6, #0
   13858:	mov	r7, #0
   1385c:	strd	r8, [sp, #16]
   13860:	moveq	r0, r1
   13864:	str	lr, [sp, #24]
   13868:	sub	sp, sp, #28
   1386c:	mov	lr, #0
   13870:	strh	lr, [r3]
   13874:	str	lr, [sp, #12]
   13878:	strd	r6, [sp, #16]
   1387c:	beq	138a8 <_start@@Base+0x118c>
   13880:	add	ip, sp, #16
   13884:	mov	r5, r3
   13888:	add	r3, sp, #12
   1388c:	mov	r4, r1
   13890:	str	ip, [sp]
   13894:	mov	r7, r0
   13898:	mov	r6, r2
   1389c:	bl	2b638 <flatcc_json_parser_integer@@Base>
   138a0:	cmp	r4, r0
   138a4:	bne	138c0 <_start@@Base+0x11a4>
   138a8:	add	sp, sp, #28
   138ac:	ldrd	r4, [sp]
   138b0:	ldrd	r6, [sp, #8]
   138b4:	ldrd	r8, [sp, #16]
   138b8:	add	sp, sp, #24
   138bc:	pop	{pc}		; (ldr pc, [sp], #4)
   138c0:	ldr	r1, [sp, #12]
   138c4:	ldrd	r2, [sp, #16]
   138c8:	cmp	r1, #0
   138cc:	beq	138fc <_start@@Base+0x11e0>
   138d0:	cmp	r3, #0
   138d4:	cmpeq	r2, #32768	; 0x8000
   138d8:	rsbls	r2, r2, #0
   138dc:	strhls	r2, [r5]
   138e0:	bls	138a8 <_start@@Base+0x118c>
   138e4:	mov	r1, r0
   138e8:	mov	r2, r6
   138ec:	mov	r0, r7
   138f0:	mov	r3, #8
   138f4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   138f8:	b	138a8 <_start@@Base+0x118c>
   138fc:	mov	r9, #0
   13900:	movw	r8, #32767	; 0x7fff
   13904:	cmp	r3, r9
   13908:	cmpeq	r2, r8
   1390c:	strhls	r2, [r5]
   13910:	bls	138a8 <_start@@Base+0x118c>
   13914:	mov	r1, r0
   13918:	mov	r2, r6
   1391c:	mov	r0, r7
   13920:	mov	r3, #7
   13924:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   13928:	b	138a8 <_start@@Base+0x118c>
   1392c:	ldr	ip, [r0, #12]
   13930:	ldrb	r3, [r1, #1]
   13934:	cmp	ip, #0
   13938:	beq	139d4 <_start@@Base+0x12b8>
   1393c:	cmp	r3, #58	; 0x3a
   13940:	cmpne	r3, #32
   13944:	movhi	r3, #1
   13948:	movls	r3, #0
   1394c:	bhi	139cc <_start@@Base+0x12b0>
   13950:	add	r1, r1, #1
   13954:	str	r3, [r0, #12]
   13958:	sub	r3, r2, r1
   1395c:	strd	r4, [sp, #-16]!
   13960:	mov	r5, r2
   13964:	cmp	r3, #1
   13968:	mov	r4, r0
   1396c:	str	r6, [sp, #8]
   13970:	str	lr, [sp, #12]
   13974:	ble	13988 <_start@@Base+0x126c>
   13978:	ldrb	r3, [r1]
   1397c:	cmp	r3, #32
   13980:	bhi	13998 <_start@@Base+0x127c>
   13984:	beq	139e4 <_start@@Base+0x12c8>
   13988:	mov	r2, r5
   1398c:	mov	r0, r4
   13990:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13994:	mov	r1, r0
   13998:	cmp	r5, r1
   1399c:	mov	r2, r5
   139a0:	beq	139b0 <_start@@Base+0x1294>
   139a4:	ldrb	r3, [r1]
   139a8:	cmp	r3, #58	; 0x3a
   139ac:	beq	139f8 <_start@@Base+0x12dc>
   139b0:	mov	r0, r4
   139b4:	mov	r3, #4
   139b8:	ldrd	r4, [sp]
   139bc:	ldr	r6, [sp, #8]
   139c0:	ldr	lr, [sp, #12]
   139c4:	add	sp, sp, #16
   139c8:	b	27f68 <flatcc_json_parser_set_error@@Base>
   139cc:	mov	r0, r1
   139d0:	bx	lr
   139d4:	cmp	r3, #34	; 0x22
   139d8:	bne	139cc <_start@@Base+0x12b0>
   139dc:	add	r1, r1, #2
   139e0:	b	13958 <_start@@Base+0x123c>
   139e4:	ldrb	r3, [r1, #1]
   139e8:	cmp	r3, #32
   139ec:	addhi	r1, r1, #1
   139f0:	bls	13988 <_start@@Base+0x126c>
   139f4:	b	13998 <_start@@Base+0x127c>
   139f8:	mov	r0, r4
   139fc:	add	r1, r1, #1
   13a00:	ldrd	r4, [sp]
   13a04:	ldr	r6, [sp, #8]
   13a08:	ldr	lr, [sp, #12]
   13a0c:	add	sp, sp, #16
   13a10:	b	13420 <_start@@Base+0xd04>
   13a14:	ldr	ip, [r0, #12]
   13a18:	ldrb	r3, [r1, #2]
   13a1c:	cmp	ip, #0
   13a20:	beq	13abc <_start@@Base+0x13a0>
   13a24:	cmp	r3, #58	; 0x3a
   13a28:	cmpne	r3, #32
   13a2c:	movhi	r3, #1
   13a30:	movls	r3, #0
   13a34:	bhi	13ab4 <_start@@Base+0x1398>
   13a38:	add	r1, r1, #2
   13a3c:	str	r3, [r0, #12]
   13a40:	sub	r3, r2, r1
   13a44:	strd	r4, [sp, #-16]!
   13a48:	mov	r5, r2
   13a4c:	cmp	r3, #1
   13a50:	mov	r4, r0
   13a54:	str	r6, [sp, #8]
   13a58:	str	lr, [sp, #12]
   13a5c:	ble	13a70 <_start@@Base+0x1354>
   13a60:	ldrb	r3, [r1]
   13a64:	cmp	r3, #32
   13a68:	bhi	13a80 <_start@@Base+0x1364>
   13a6c:	beq	13acc <_start@@Base+0x13b0>
   13a70:	mov	r2, r5
   13a74:	mov	r0, r4
   13a78:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13a7c:	mov	r1, r0
   13a80:	cmp	r5, r1
   13a84:	mov	r2, r5
   13a88:	beq	13a98 <_start@@Base+0x137c>
   13a8c:	ldrb	r3, [r1]
   13a90:	cmp	r3, #58	; 0x3a
   13a94:	beq	13ae0 <_start@@Base+0x13c4>
   13a98:	mov	r0, r4
   13a9c:	mov	r3, #4
   13aa0:	ldrd	r4, [sp]
   13aa4:	ldr	r6, [sp, #8]
   13aa8:	ldr	lr, [sp, #12]
   13aac:	add	sp, sp, #16
   13ab0:	b	27f68 <flatcc_json_parser_set_error@@Base>
   13ab4:	mov	r0, r1
   13ab8:	bx	lr
   13abc:	cmp	r3, #34	; 0x22
   13ac0:	bne	13ab4 <_start@@Base+0x1398>
   13ac4:	add	r1, r1, #3
   13ac8:	b	13a40 <_start@@Base+0x1324>
   13acc:	ldrb	r3, [r1, #1]
   13ad0:	cmp	r3, #32
   13ad4:	addhi	r1, r1, #1
   13ad8:	bls	13a70 <_start@@Base+0x1354>
   13adc:	b	13a80 <_start@@Base+0x1364>
   13ae0:	mov	r0, r4
   13ae4:	add	r1, r1, #1
   13ae8:	ldrd	r4, [sp]
   13aec:	ldr	r6, [sp, #8]
   13af0:	ldr	lr, [sp, #12]
   13af4:	add	sp, sp, #16
   13af8:	b	13420 <_start@@Base+0xd04>
   13afc:	ldr	ip, [r0, #12]
   13b00:	ldrb	r3, [r1, #8]
   13b04:	cmp	ip, #0
   13b08:	beq	13ba4 <_start@@Base+0x1488>
   13b0c:	cmp	r3, #58	; 0x3a
   13b10:	cmpne	r3, #32
   13b14:	movhi	r3, #1
   13b18:	movls	r3, #0
   13b1c:	bhi	13b9c <_start@@Base+0x1480>
   13b20:	add	r1, r1, #8
   13b24:	str	r3, [r0, #12]
   13b28:	sub	r3, r2, r1
   13b2c:	strd	r4, [sp, #-16]!
   13b30:	mov	r5, r2
   13b34:	cmp	r3, #1
   13b38:	mov	r4, r0
   13b3c:	str	r6, [sp, #8]
   13b40:	str	lr, [sp, #12]
   13b44:	ble	13b58 <_start@@Base+0x143c>
   13b48:	ldrb	r3, [r1]
   13b4c:	cmp	r3, #32
   13b50:	bhi	13b68 <_start@@Base+0x144c>
   13b54:	beq	13bb4 <_start@@Base+0x1498>
   13b58:	mov	r2, r5
   13b5c:	mov	r0, r4
   13b60:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13b64:	mov	r1, r0
   13b68:	cmp	r5, r1
   13b6c:	mov	r2, r5
   13b70:	beq	13b80 <_start@@Base+0x1464>
   13b74:	ldrb	r3, [r1]
   13b78:	cmp	r3, #58	; 0x3a
   13b7c:	beq	13bc8 <_start@@Base+0x14ac>
   13b80:	mov	r0, r4
   13b84:	mov	r3, #4
   13b88:	ldrd	r4, [sp]
   13b8c:	ldr	r6, [sp, #8]
   13b90:	ldr	lr, [sp, #12]
   13b94:	add	sp, sp, #16
   13b98:	b	27f68 <flatcc_json_parser_set_error@@Base>
   13b9c:	mov	r0, r1
   13ba0:	bx	lr
   13ba4:	cmp	r3, #34	; 0x22
   13ba8:	bne	13b9c <_start@@Base+0x1480>
   13bac:	add	r1, r1, #9
   13bb0:	b	13b28 <_start@@Base+0x140c>
   13bb4:	ldrb	r3, [r1, #1]
   13bb8:	cmp	r3, #32
   13bbc:	addhi	r1, r1, #1
   13bc0:	bls	13b58 <_start@@Base+0x143c>
   13bc4:	b	13b68 <_start@@Base+0x144c>
   13bc8:	mov	r0, r4
   13bcc:	add	r1, r1, #1
   13bd0:	ldrd	r4, [sp]
   13bd4:	ldr	r6, [sp, #8]
   13bd8:	ldr	lr, [sp, #12]
   13bdc:	add	sp, sp, #16
   13be0:	b	13420 <_start@@Base+0xd04>
   13be4:	ldr	ip, [r0, #12]
   13be8:	ldrb	r3, [r1, #5]
   13bec:	cmp	ip, #0
   13bf0:	beq	13c8c <_start@@Base+0x1570>
   13bf4:	cmp	r3, #58	; 0x3a
   13bf8:	cmpne	r3, #32
   13bfc:	movhi	r3, #1
   13c00:	movls	r3, #0
   13c04:	bhi	13c84 <_start@@Base+0x1568>
   13c08:	add	r1, r1, #5
   13c0c:	str	r3, [r0, #12]
   13c10:	sub	r3, r2, r1
   13c14:	strd	r4, [sp, #-16]!
   13c18:	mov	r5, r2
   13c1c:	cmp	r3, #1
   13c20:	mov	r4, r0
   13c24:	str	r6, [sp, #8]
   13c28:	str	lr, [sp, #12]
   13c2c:	ble	13c40 <_start@@Base+0x1524>
   13c30:	ldrb	r3, [r1]
   13c34:	cmp	r3, #32
   13c38:	bhi	13c50 <_start@@Base+0x1534>
   13c3c:	beq	13c9c <_start@@Base+0x1580>
   13c40:	mov	r2, r5
   13c44:	mov	r0, r4
   13c48:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13c4c:	mov	r1, r0
   13c50:	cmp	r5, r1
   13c54:	mov	r2, r5
   13c58:	beq	13c68 <_start@@Base+0x154c>
   13c5c:	ldrb	r3, [r1]
   13c60:	cmp	r3, #58	; 0x3a
   13c64:	beq	13cb0 <_start@@Base+0x1594>
   13c68:	mov	r0, r4
   13c6c:	mov	r3, #4
   13c70:	ldrd	r4, [sp]
   13c74:	ldr	r6, [sp, #8]
   13c78:	ldr	lr, [sp, #12]
   13c7c:	add	sp, sp, #16
   13c80:	b	27f68 <flatcc_json_parser_set_error@@Base>
   13c84:	mov	r0, r1
   13c88:	bx	lr
   13c8c:	cmp	r3, #34	; 0x22
   13c90:	bne	13c84 <_start@@Base+0x1568>
   13c94:	add	r1, r1, #6
   13c98:	b	13c10 <_start@@Base+0x14f4>
   13c9c:	ldrb	r3, [r1, #1]
   13ca0:	cmp	r3, #32
   13ca4:	addhi	r1, r1, #1
   13ca8:	bls	13c40 <_start@@Base+0x1524>
   13cac:	b	13c50 <_start@@Base+0x1534>
   13cb0:	mov	r0, r4
   13cb4:	add	r1, r1, #1
   13cb8:	ldrd	r4, [sp]
   13cbc:	ldr	r6, [sp, #8]
   13cc0:	ldr	lr, [sp, #12]
   13cc4:	add	sp, sp, #16
   13cc8:	b	13420 <_start@@Base+0xd04>
   13ccc:	strd	r4, [sp, #-16]!
   13cd0:	add	ip, r1, r3
   13cd4:	ldr	r4, [r0, #12]
   13cd8:	str	r6, [sp, #8]
   13cdc:	str	lr, [sp, #12]
   13ce0:	ldrb	lr, [r1, r3]
   13ce4:	cmp	r4, #0
   13ce8:	beq	13d88 <_start@@Base+0x166c>
   13cec:	cmp	lr, #58	; 0x3a
   13cf0:	cmpne	lr, #32
   13cf4:	movls	lr, #0
   13cf8:	movhi	lr, #1
   13cfc:	strls	lr, [r0, #12]
   13d00:	bhi	13d74 <_start@@Base+0x1658>
   13d04:	sub	r3, r2, ip
   13d08:	mov	r5, r2
   13d0c:	cmp	r3, #1
   13d10:	mov	r4, r0
   13d14:	ble	13d28 <_start@@Base+0x160c>
   13d18:	ldrb	r3, [ip]
   13d1c:	cmp	r3, #32
   13d20:	bhi	13d3c <_start@@Base+0x1620>
   13d24:	beq	13d9c <_start@@Base+0x1680>
   13d28:	mov	r1, ip
   13d2c:	mov	r2, r5
   13d30:	mov	r0, r4
   13d34:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13d38:	mov	ip, r0
   13d3c:	cmp	r5, ip
   13d40:	mov	r2, r5
   13d44:	beq	13d54 <_start@@Base+0x1638>
   13d48:	ldrb	r3, [ip]
   13d4c:	cmp	r3, #58	; 0x3a
   13d50:	beq	13db0 <_start@@Base+0x1694>
   13d54:	mov	r0, r4
   13d58:	mov	r1, ip
   13d5c:	ldrd	r4, [sp]
   13d60:	mov	r3, #4
   13d64:	ldr	r6, [sp, #8]
   13d68:	ldr	lr, [sp, #12]
   13d6c:	add	sp, sp, #16
   13d70:	b	27f68 <flatcc_json_parser_set_error@@Base>
   13d74:	ldrd	r4, [sp]
   13d78:	mov	r0, r1
   13d7c:	ldr	r6, [sp, #8]
   13d80:	add	sp, sp, #12
   13d84:	pop	{pc}		; (ldr pc, [sp], #4)
   13d88:	cmp	lr, #34	; 0x22
   13d8c:	bne	13d74 <_start@@Base+0x1658>
   13d90:	add	r3, r3, #1
   13d94:	add	ip, r1, r3
   13d98:	b	13d04 <_start@@Base+0x15e8>
   13d9c:	ldrb	r3, [ip, #1]
   13da0:	cmp	r3, #32
   13da4:	addhi	ip, ip, #1
   13da8:	bls	13d28 <_start@@Base+0x160c>
   13dac:	b	13d3c <_start@@Base+0x1620>
   13db0:	mov	r0, r4
   13db4:	add	r1, ip, #1
   13db8:	ldrd	r4, [sp]
   13dbc:	ldr	r6, [sp, #8]
   13dc0:	ldr	lr, [sp, #12]
   13dc4:	add	sp, sp, #16
   13dc8:	b	13420 <_start@@Base+0xd04>
   13dcc:	cmp	r1, r2
   13dd0:	beq	13de0 <_start@@Base+0x16c4>
   13dd4:	ldrb	ip, [r1]
   13dd8:	cmp	ip, #123	; 0x7b
   13ddc:	beq	13df0 <_start@@Base+0x16d4>
   13de0:	mov	ip, #0
   13de4:	str	ip, [r3]
   13de8:	mov	r3, #21
   13dec:	b	27f68 <flatcc_json_parser_set_error@@Base>
   13df0:	strd	r4, [sp, #-16]!
   13df4:	mov	r5, r0
   13df8:	add	r0, r1, #1
   13dfc:	str	r6, [sp, #8]
   13e00:	mov	r6, r3
   13e04:	sub	r3, r2, r0
   13e08:	cmp	r3, #1
   13e0c:	mov	r4, r2
   13e10:	str	lr, [sp, #12]
   13e14:	ble	13e28 <_start@@Base+0x170c>
   13e18:	ldrb	r3, [r1, #1]
   13e1c:	cmp	r3, #32
   13e20:	bhi	13e38 <_start@@Base+0x171c>
   13e24:	beq	13e64 <_start@@Base+0x1748>
   13e28:	mov	r1, r0
   13e2c:	mov	r2, r4
   13e30:	mov	r0, r5
   13e34:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13e38:	cmp	r4, r0
   13e3c:	beq	13e4c <_start@@Base+0x1730>
   13e40:	ldrb	r3, [r0]
   13e44:	cmp	r3, #125	; 0x7d
   13e48:	beq	13e78 <_start@@Base+0x175c>
   13e4c:	mov	r3, #1
   13e50:	ldrd	r4, [sp]
   13e54:	str	r3, [r6]
   13e58:	ldr	r6, [sp, #8]
   13e5c:	add	sp, sp, #12
   13e60:	pop	{pc}		; (ldr pc, [sp], #4)
   13e64:	ldrb	r3, [r1, #2]
   13e68:	cmp	r3, #32
   13e6c:	addhi	r0, r1, #2
   13e70:	bls	13e28 <_start@@Base+0x170c>
   13e74:	b	13e38 <_start@@Base+0x171c>
   13e78:	mov	r3, #0
   13e7c:	mov	r2, r4
   13e80:	ldr	lr, [sp, #12]
   13e84:	add	r1, r0, #1
   13e88:	mov	r0, r5
   13e8c:	ldrd	r4, [sp]
   13e90:	str	r3, [r6]
   13e94:	ldr	r6, [sp, #8]
   13e98:	add	sp, sp, #16
   13e9c:	b	13420 <_start@@Base+0xd04>
   13ea0:	cmp	r1, r2
   13ea4:	beq	13eb4 <_start@@Base+0x1798>
   13ea8:	ldrb	ip, [r1]
   13eac:	cmp	ip, #91	; 0x5b
   13eb0:	beq	13ec4 <_start@@Base+0x17a8>
   13eb4:	mov	ip, #0
   13eb8:	str	ip, [r3]
   13ebc:	mov	r3, #22
   13ec0:	b	27f68 <flatcc_json_parser_set_error@@Base>
   13ec4:	strd	r4, [sp, #-16]!
   13ec8:	mov	r5, r0
   13ecc:	add	r0, r1, #1
   13ed0:	str	r6, [sp, #8]
   13ed4:	mov	r6, r3
   13ed8:	sub	r3, r2, r0
   13edc:	cmp	r3, #1
   13ee0:	mov	r4, r2
   13ee4:	str	lr, [sp, #12]
   13ee8:	ble	13efc <_start@@Base+0x17e0>
   13eec:	ldrb	r3, [r1, #1]
   13ef0:	cmp	r3, #32
   13ef4:	bhi	13f0c <_start@@Base+0x17f0>
   13ef8:	beq	13f38 <_start@@Base+0x181c>
   13efc:	mov	r1, r0
   13f00:	mov	r2, r4
   13f04:	mov	r0, r5
   13f08:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   13f0c:	cmp	r4, r0
   13f10:	beq	13f20 <_start@@Base+0x1804>
   13f14:	ldrb	r3, [r0]
   13f18:	cmp	r3, #93	; 0x5d
   13f1c:	beq	13f4c <_start@@Base+0x1830>
   13f20:	mov	r3, #1
   13f24:	ldrd	r4, [sp]
   13f28:	str	r3, [r6]
   13f2c:	ldr	r6, [sp, #8]
   13f30:	add	sp, sp, #12
   13f34:	pop	{pc}		; (ldr pc, [sp], #4)
   13f38:	ldrb	r3, [r1, #2]
   13f3c:	cmp	r3, #32
   13f40:	addhi	r0, r1, #2
   13f44:	bls	13efc <_start@@Base+0x17e0>
   13f48:	b	13f0c <_start@@Base+0x17f0>
   13f4c:	mov	r3, #0
   13f50:	mov	r2, r4
   13f54:	ldr	lr, [sp, #12]
   13f58:	add	r1, r0, #1
   13f5c:	mov	r0, r5
   13f60:	ldrd	r4, [sp]
   13f64:	str	r3, [r6]
   13f68:	ldr	r6, [sp, #8]
   13f6c:	add	sp, sp, #16
   13f70:	b	13420 <_start@@Base+0xd04>
   13f74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f78:	mov	r4, r1
   13f7c:	mov	r5, r0
   13f80:	strd	r6, [sp, #8]
   13f84:	strd	r8, [sp, #16]
   13f88:	strd	sl, [sp, #24]
   13f8c:	mov	sl, r2
   13f90:	mov	fp, r3
   13f94:	str	lr, [sp, #32]
   13f98:	sub	sp, sp, #12
   13f9c:	ldrd	r2, [sp, #48]	; 0x30
   13fa0:	strd	r2, [sp]
   13fa4:	sub	r2, sl, r1
   13fa8:	cmp	r2, #8
   13fac:	bhi	13fe0 <_start@@Base+0x18c4>
   13fb0:	sub	r2, r2, #1
   13fb4:	cmp	r2, #7
   13fb8:	ldrls	pc, [pc, r2, lsl #2]
   13fbc:	b	140b8 <_start@@Base+0x199c>
   13fc0:	ldrdeq	r4, [r1], -r8
   13fc4:	andeq	r4, r1, r4, ror #1
   13fc8:	strdeq	r4, [r1], -r0
   13fcc:	strdeq	r4, [r1], -ip
   13fd0:	andeq	r4, r1, r8, lsl #2
   13fd4:	andeq	r4, r1, r4, lsl r1
   13fd8:	andeq	r4, r1, r0, lsr #2
   13fdc:	andeq	r3, r1, r0, ror #31
   13fe0:	ldrb	r6, [r4, #7]
   13fe4:	mov	r7, #0
   13fe8:	mov	r3, r7
   13fec:	ldrb	r0, [r4, #6]
   13ff0:	orr	r2, r6, r0, lsl #8
   13ff4:	ldrb	r0, [r4, #5]
   13ff8:	orr	r2, r2, r0, lsl #16
   13ffc:	ldrb	r0, [r4, #4]
   14000:	orr	r2, r2, r0, lsl #24
   14004:	ldrb	r8, [r4, #3]
   14008:	orr	r3, r3, r8
   1400c:	ldrb	r6, [r4, #2]
   14010:	orr	r3, r3, r6, lsl #8
   14014:	ldrb	r6, [r4, #1]
   14018:	orr	r3, r3, r6, lsl #16
   1401c:	ldrb	r8, [r4]
   14020:	add	r7, pc, #264	; 0x108
   14024:	ldrd	r6, [r7]
   14028:	orr	r1, r3, r8, lsl #24
   1402c:	mov	r8, #0
   14030:	cmp	r1, r7
   14034:	cmpeq	r2, r6
   14038:	bne	140b8 <_start@@Base+0x199c>
   1403c:	add	r6, r4, #8
   14040:	mov	r1, sl
   14044:	mov	r0, r6
   14048:	bl	12810 <_start@@Base+0xf4>
   1404c:	and	r3, r1, #-16777216	; 0xff000000
   14050:	cmp	r3, #1912602624	; 0x72000000
   14054:	cmpeq	r8, #0
   14058:	bne	140b8 <_start@@Base+0x199c>
   1405c:	sub	r3, sl, r6
   14060:	cmp	r3, #1
   14064:	ble	140b8 <_start@@Base+0x199c>
   14068:	ldrb	r3, [r4, #9]
   1406c:	cmp	r3, #46	; 0x2e
   14070:	bne	140b8 <_start@@Base+0x199c>
   14074:	add	r1, r4, #10
   14078:	cmp	r6, r1
   1407c:	beq	140b8 <_start@@Base+0x199c>
   14080:	ldm	sp, {r0, ip}
   14084:	mov	r3, fp
   14088:	mov	r2, sl
   1408c:	str	r0, [sp, #48]	; 0x30
   14090:	mov	r0, r5
   14094:	str	ip, [sp, #52]	; 0x34
   14098:	add	sp, sp, #12
   1409c:	ldrd	r4, [sp]
   140a0:	ldrd	r6, [sp, #8]
   140a4:	ldrd	r8, [sp, #16]
   140a8:	ldrd	sl, [sp, #24]
   140ac:	ldr	lr, [sp, #32]
   140b0:	add	sp, sp, #36	; 0x24
   140b4:	b	12954 <_start@@Base+0x238>
   140b8:	mov	r0, r4
   140bc:	add	sp, sp, #12
   140c0:	ldrd	r4, [sp]
   140c4:	ldrd	r6, [sp, #8]
   140c8:	ldrd	r8, [sp, #16]
   140cc:	ldrd	sl, [sp, #24]
   140d0:	add	sp, sp, #32
   140d4:	pop	{pc}		; (ldr pc, [sp], #4)
   140d8:	mov	r2, #0
   140dc:	mov	r3, r2
   140e0:	b	1401c <_start@@Base+0x1900>
   140e4:	mov	r2, #0
   140e8:	mov	r3, r2
   140ec:	b	14014 <_start@@Base+0x18f8>
   140f0:	mov	r2, #0
   140f4:	mov	r3, r2
   140f8:	b	1400c <_start@@Base+0x18f0>
   140fc:	mov	r2, #0
   14100:	mov	r3, r2
   14104:	b	14004 <_start@@Base+0x18e8>
   14108:	mov	r2, #0
   1410c:	mov	r3, r2
   14110:	b	13ffc <_start@@Base+0x18e0>
   14114:	mov	r2, #0
   14118:	mov	r3, r2
   1411c:	b	13ff4 <_start@@Base+0x18d8>
   14120:	mov	r6, #0
   14124:	mov	r7, #0
   14128:	b	13fe8 <_start@@Base+0x18cc>
   1412c:	nop	{0}
   14130:	cmnvs	r3, r5, ror #8
   14134:	cmnmi	r8, #-2147483620	; 0x8000001c
   14138:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1413c:	mov	ip, #0
   14140:	cmp	r1, r2
   14144:	strd	r6, [sp, #8]
   14148:	mov	r4, r1
   1414c:	mov	r6, r2
   14150:	strd	r8, [sp, #16]
   14154:	mov	r8, r0
   14158:	strd	sl, [sp, #24]
   1415c:	str	lr, [sp, #32]
   14160:	sub	sp, sp, #36	; 0x24
   14164:	str	r3, [sp, #12]
   14168:	ldr	r3, [sp, #72]	; 0x48
   1416c:	str	ip, [r3]
   14170:	beq	142ac <_start@@Base+0x1b90>
   14174:	ldrb	r3, [r1]
   14178:	cmp	r3, #34	; 0x22
   1417c:	moveq	r3, #0
   14180:	addeq	r4, r1, #1
   14184:	streq	r3, [r0, #12]
   14188:	beq	142bc <_start@@Base+0x1ba0>
   1418c:	cmp	r3, #46	; 0x2e
   14190:	movne	r3, #1
   14194:	strne	r3, [r0, #12]
   14198:	beq	14284 <_start@@Base+0x1b68>
   1419c:	mov	fp, #0
   141a0:	add	sl, sp, #20
   141a4:	add	r9, sp, #24
   141a8:	ldr	r5, [sp, #12]
   141ac:	b	141c8 <_start@@Base+0x1aac>
   141b0:	cmp	r4, r0
   141b4:	mov	r4, r0
   141b8:	bne	14210 <_start@@Base+0x1af4>
   141bc:	ldr	r3, [r5, #4]!
   141c0:	cmp	r3, #0
   141c4:	beq	14300 <_start@@Base+0x1be4>
   141c8:	add	r3, sp, #16
   141cc:	mov	r2, r6
   141d0:	stm	sp, {r9, sl}
   141d4:	mov	r1, r4
   141d8:	mov	r0, r8
   141dc:	ldr	r7, [r5]
   141e0:	blx	r7
   141e4:	cmp	r6, r0
   141e8:	bne	141b0 <_start@@Base+0x1a94>
   141ec:	mov	r7, r0
   141f0:	mov	r0, r7
   141f4:	add	sp, sp, #36	; 0x24
   141f8:	ldrd	r4, [sp]
   141fc:	ldrd	r6, [sp, #8]
   14200:	ldrd	r8, [sp, #16]
   14204:	ldrd	sl, [sp, #24]
   14208:	add	sp, sp, #32
   1420c:	pop	{pc}		; (ldr pc, [sp], #4)
   14210:	cmp	fp, #0
   14214:	mov	r7, r0
   14218:	beq	14228 <_start@@Base+0x1b0c>
   1421c:	ldr	r3, [r8, #12]
   14220:	cmp	r3, #0
   14224:	bne	1431c <_start@@Base+0x1c00>
   14228:	ldrd	r0, [sp, #24]
   1422c:	add	fp, fp, #1
   14230:	bl	2da04 <flatcc_json_parser_struct_as_root@@Base+0x664>
   14234:	ldr	r3, [sp, #16]
   14238:	vmov	s14, r0
   1423c:	cmp	r3, #0
   14240:	ldr	r3, [sp, #72]	; 0x48
   14244:	vldr	s15, [r3]
   14248:	ldr	r3, [sp, #20]
   1424c:	beq	1426c <_start@@Base+0x1b50>
   14250:	vsub.f32	s15, s15, s14
   14254:	cmp	r3, #0
   14258:	ldr	r3, [sp, #72]	; 0x48
   1425c:	vstr	s15, [r3]
   14260:	beq	141f0 <_start@@Base+0x1ad4>
   14264:	mov	r4, r7
   14268:	b	141a8 <_start@@Base+0x1a8c>
   1426c:	vadd.f32	s15, s15, s14
   14270:	cmp	r3, #0
   14274:	ldr	r3, [sp, #72]	; 0x48
   14278:	vstr	s15, [r3]
   1427c:	bne	14264 <_start@@Base+0x1b48>
   14280:	b	141f0 <_start@@Base+0x1ad4>
   14284:	mov	r3, #5
   14288:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1428c:	ldr	r3, [r8, #12]
   14290:	mov	r4, r0
   14294:	cmp	r3, #0
   14298:	beq	142bc <_start@@Base+0x1ba0>
   1429c:	cmp	r6, r4
   142a0:	bne	1419c <_start@@Base+0x1a80>
   142a4:	mov	r7, r6
   142a8:	b	141f0 <_start@@Base+0x1ad4>
   142ac:	ldr	r3, [r0, #12]
   142b0:	cmp	r3, #0
   142b4:	movne	r7, r1
   142b8:	bne	141f0 <_start@@Base+0x1ad4>
   142bc:	sub	r3, r6, r4
   142c0:	cmp	r3, #1
   142c4:	ble	142e8 <_start@@Base+0x1bcc>
   142c8:	ldrb	r3, [r4]
   142cc:	cmp	r3, #32
   142d0:	bhi	1429c <_start@@Base+0x1b80>
   142d4:	bne	142e8 <_start@@Base+0x1bcc>
   142d8:	ldrb	r3, [r4, #1]
   142dc:	cmp	r3, #32
   142e0:	addhi	r4, r4, #1
   142e4:	bhi	1429c <_start@@Base+0x1b80>
   142e8:	mov	r1, r4
   142ec:	mov	r2, r6
   142f0:	mov	r0, r8
   142f4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   142f8:	mov	r4, r0
   142fc:	b	1429c <_start@@Base+0x1b80>
   14300:	mov	r1, r0
   14304:	mov	r2, r6
   14308:	mov	r0, r8
   1430c:	mov	r3, #23
   14310:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14314:	mov	r7, r0
   14318:	b	141f0 <_start@@Base+0x1ad4>
   1431c:	mov	r1, r7
   14320:	mov	r2, r6
   14324:	mov	r0, r8
   14328:	mov	r3, #14
   1432c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14330:	mov	r7, r0
   14334:	b	141f0 <_start@@Base+0x1ad4>
   14338:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1433c:	cmp	r1, r2
   14340:	mov	r4, r1
   14344:	strd	r6, [sp, #8]
   14348:	mov	r6, r2
   1434c:	strd	r8, [sp, #16]
   14350:	mov	r8, r0
   14354:	strd	sl, [sp, #24]
   14358:	mov	sl, #0
   1435c:	mov	fp, #0
   14360:	str	lr, [sp, #32]
   14364:	sub	sp, sp, #36	; 0x24
   14368:	str	r3, [sp, #12]
   1436c:	ldr	r3, [sp, #72]	; 0x48
   14370:	strd	sl, [r3]
   14374:	beq	144b0 <_start@@Base+0x1d94>
   14378:	ldrb	r3, [r1]
   1437c:	cmp	r3, #34	; 0x22
   14380:	moveq	r3, #0
   14384:	addeq	r4, r1, #1
   14388:	streq	r3, [r0, #12]
   1438c:	beq	144c0 <_start@@Base+0x1da4>
   14390:	cmp	r3, #46	; 0x2e
   14394:	movne	r3, #1
   14398:	strne	r3, [r0, #12]
   1439c:	beq	14488 <_start@@Base+0x1d6c>
   143a0:	mov	fp, #0
   143a4:	add	sl, sp, #20
   143a8:	add	r9, sp, #24
   143ac:	ldr	r5, [sp, #12]
   143b0:	b	143cc <_start@@Base+0x1cb0>
   143b4:	cmp	r4, r0
   143b8:	mov	r4, r0
   143bc:	bne	14414 <_start@@Base+0x1cf8>
   143c0:	ldr	r3, [r5, #4]!
   143c4:	cmp	r3, #0
   143c8:	beq	14504 <_start@@Base+0x1de8>
   143cc:	add	r3, sp, #16
   143d0:	mov	r2, r6
   143d4:	stm	sp, {r9, sl}
   143d8:	mov	r1, r4
   143dc:	mov	r0, r8
   143e0:	ldr	r7, [r5]
   143e4:	blx	r7
   143e8:	cmp	r6, r0
   143ec:	bne	143b4 <_start@@Base+0x1c98>
   143f0:	mov	r7, r0
   143f4:	mov	r0, r7
   143f8:	add	sp, sp, #36	; 0x24
   143fc:	ldrd	r4, [sp]
   14400:	ldrd	r6, [sp, #8]
   14404:	ldrd	r8, [sp, #16]
   14408:	ldrd	sl, [sp, #24]
   1440c:	add	sp, sp, #32
   14410:	pop	{pc}		; (ldr pc, [sp], #4)
   14414:	cmp	fp, #0
   14418:	mov	r7, r0
   1441c:	beq	1442c <_start@@Base+0x1d10>
   14420:	ldr	r3, [r8, #12]
   14424:	cmp	r3, #0
   14428:	bne	14520 <_start@@Base+0x1e04>
   1442c:	ldrd	r0, [sp, #24]
   14430:	add	fp, fp, #1
   14434:	bl	2d7cc <flatcc_json_parser_struct_as_root@@Base+0x42c>
   14438:	ldr	r3, [sp, #16]
   1443c:	vmov	d6, r0, r1
   14440:	cmp	r3, #0
   14444:	ldr	r3, [sp, #72]	; 0x48
   14448:	vldr	d7, [r3]
   1444c:	ldr	r3, [sp, #20]
   14450:	beq	14470 <_start@@Base+0x1d54>
   14454:	vsub.f64	d7, d7, d6
   14458:	cmp	r3, #0
   1445c:	ldr	r3, [sp, #72]	; 0x48
   14460:	vstr	d7, [r3]
   14464:	beq	143f4 <_start@@Base+0x1cd8>
   14468:	mov	r4, r7
   1446c:	b	143ac <_start@@Base+0x1c90>
   14470:	vadd.f64	d7, d7, d6
   14474:	cmp	r3, #0
   14478:	ldr	r3, [sp, #72]	; 0x48
   1447c:	vstr	d7, [r3]
   14480:	bne	14468 <_start@@Base+0x1d4c>
   14484:	b	143f4 <_start@@Base+0x1cd8>
   14488:	mov	r3, #5
   1448c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14490:	ldr	r3, [r8, #12]
   14494:	mov	r4, r0
   14498:	cmp	r3, #0
   1449c:	beq	144c0 <_start@@Base+0x1da4>
   144a0:	cmp	r6, r4
   144a4:	bne	143a0 <_start@@Base+0x1c84>
   144a8:	mov	r7, r6
   144ac:	b	143f4 <_start@@Base+0x1cd8>
   144b0:	ldr	r3, [r0, #12]
   144b4:	cmp	r3, #0
   144b8:	movne	r7, r1
   144bc:	bne	143f4 <_start@@Base+0x1cd8>
   144c0:	sub	r3, r6, r4
   144c4:	cmp	r3, #1
   144c8:	ble	144ec <_start@@Base+0x1dd0>
   144cc:	ldrb	r3, [r4]
   144d0:	cmp	r3, #32
   144d4:	bhi	144a0 <_start@@Base+0x1d84>
   144d8:	bne	144ec <_start@@Base+0x1dd0>
   144dc:	ldrb	r3, [r4, #1]
   144e0:	cmp	r3, #32
   144e4:	addhi	r4, r4, #1
   144e8:	bhi	144a0 <_start@@Base+0x1d84>
   144ec:	mov	r1, r4
   144f0:	mov	r2, r6
   144f4:	mov	r0, r8
   144f8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   144fc:	mov	r4, r0
   14500:	b	144a0 <_start@@Base+0x1d84>
   14504:	mov	r1, r0
   14508:	mov	r2, r6
   1450c:	mov	r0, r8
   14510:	mov	r3, #23
   14514:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14518:	mov	r7, r0
   1451c:	b	143f4 <_start@@Base+0x1cd8>
   14520:	mov	r1, r7
   14524:	mov	r2, r6
   14528:	mov	r0, r8
   1452c:	mov	r3, #14
   14530:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14534:	mov	r7, r0
   14538:	b	143f4 <_start@@Base+0x1cd8>
   1453c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14540:	mov	ip, #0
   14544:	cmp	r1, r2
   14548:	strd	r6, [sp, #8]
   1454c:	mov	r4, r1
   14550:	mov	r6, r2
   14554:	strd	r8, [sp, #16]
   14558:	mov	r8, r0
   1455c:	strd	sl, [sp, #24]
   14560:	str	lr, [sp, #32]
   14564:	sub	sp, sp, #36	; 0x24
   14568:	str	r3, [sp, #12]
   1456c:	ldr	r3, [sp, #72]	; 0x48
   14570:	strb	ip, [r3]
   14574:	beq	146bc <_start@@Base+0x1fa0>
   14578:	ldrb	r3, [r1]
   1457c:	cmp	r3, #34	; 0x22
   14580:	addeq	r4, r1, #1
   14584:	streq	ip, [r0, #12]
   14588:	beq	146cc <_start@@Base+0x1fb0>
   1458c:	cmp	r3, #46	; 0x2e
   14590:	movne	r3, #1
   14594:	strne	r3, [r0, #12]
   14598:	beq	14698 <_start@@Base+0x1f7c>
   1459c:	mov	fp, #0
   145a0:	add	sl, sp, #20
   145a4:	add	r9, sp, #24
   145a8:	str	fp, [sp, #8]
   145ac:	mov	r7, r4
   145b0:	mov	r1, r4
   145b4:	ldr	r5, [sp, #12]
   145b8:	b	145d4 <_start@@Base+0x1eb8>
   145bc:	cmp	r7, r0
   145c0:	mov	r7, r0
   145c4:	bne	1461c <_start@@Base+0x1f00>
   145c8:	ldr	r3, [r5, #4]!
   145cc:	cmp	r3, #0
   145d0:	beq	14680 <_start@@Base+0x1f64>
   145d4:	add	r3, sp, #16
   145d8:	mov	r2, r6
   145dc:	stm	sp, {r9, sl}
   145e0:	mov	r0, r8
   145e4:	ldr	r4, [r5]
   145e8:	blx	r4
   145ec:	cmp	r6, r0
   145f0:	mov	r1, r0
   145f4:	bne	145bc <_start@@Base+0x1ea0>
   145f8:	mov	r4, r0
   145fc:	mov	r0, r4
   14600:	add	sp, sp, #36	; 0x24
   14604:	ldrd	r4, [sp]
   14608:	ldrd	r6, [sp, #8]
   1460c:	ldrd	r8, [sp, #16]
   14610:	ldrd	sl, [sp, #24]
   14614:	add	sp, sp, #32
   14618:	pop	{pc}		; (ldr pc, [sp], #4)
   1461c:	cmp	fp, #0
   14620:	mov	r4, r0
   14624:	beq	14634 <_start@@Base+0x1f18>
   14628:	ldr	r3, [r8, #12]
   1462c:	cmp	r3, #0
   14630:	bne	14734 <_start@@Base+0x2018>
   14634:	ldr	r3, [sp, #16]
   14638:	cmp	r3, #0
   1463c:	bne	14710 <_start@@Base+0x1ff4>
   14640:	ldrd	r2, [sp, #24]
   14644:	orrs	r3, r2, r3
   14648:	movne	r3, #1
   1464c:	moveq	r3, #0
   14650:	str	r3, [sp, #8]
   14654:	ldr	r1, [sp, #8]
   14658:	add	fp, fp, #1
   1465c:	ldr	r3, [sp, #72]	; 0x48
   14660:	ldr	r2, [sp, #20]
   14664:	ldrb	r3, [r3]
   14668:	cmp	r2, #0
   1466c:	ldr	r2, [sp, #72]	; 0x48
   14670:	add	r3, r1, r3
   14674:	strb	r3, [r2]
   14678:	bne	145ac <_start@@Base+0x1e90>
   1467c:	b	145fc <_start@@Base+0x1ee0>
   14680:	mov	r2, r6
   14684:	mov	r0, r8
   14688:	mov	r3, #23
   1468c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14690:	mov	r4, r0
   14694:	b	145fc <_start@@Base+0x1ee0>
   14698:	mov	r3, #5
   1469c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   146a0:	ldr	r3, [r8, #12]
   146a4:	mov	r4, r0
   146a8:	cmp	r3, #0
   146ac:	beq	146cc <_start@@Base+0x1fb0>
   146b0:	cmp	r6, r4
   146b4:	bne	1459c <_start@@Base+0x1e80>
   146b8:	b	145fc <_start@@Base+0x1ee0>
   146bc:	ldr	r3, [r0, #12]
   146c0:	cmp	r3, #0
   146c4:	bne	145fc <_start@@Base+0x1ee0>
   146c8:	mov	r4, r6
   146cc:	sub	r3, r6, r4
   146d0:	cmp	r3, #1
   146d4:	ble	146f8 <_start@@Base+0x1fdc>
   146d8:	ldrb	r3, [r4]
   146dc:	cmp	r3, #32
   146e0:	bhi	146b0 <_start@@Base+0x1f94>
   146e4:	bne	146f8 <_start@@Base+0x1fdc>
   146e8:	ldrb	r3, [r4, #1]
   146ec:	cmp	r3, #32
   146f0:	addhi	r4, r4, #1
   146f4:	bhi	146b0 <_start@@Base+0x1f94>
   146f8:	mov	r1, r4
   146fc:	mov	r2, r6
   14700:	mov	r0, r8
   14704:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   14708:	mov	r4, r0
   1470c:	b	146b0 <_start@@Base+0x1f94>
   14710:	mov	r3, #8
   14714:	mov	r2, r6
   14718:	mov	r1, r4
   1471c:	mov	r0, r8
   14720:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14724:	cmp	r6, r0
   14728:	bne	14654 <_start@@Base+0x1f38>
   1472c:	mov	r4, r6
   14730:	b	145fc <_start@@Base+0x1ee0>
   14734:	mov	r1, r4
   14738:	mov	r2, r6
   1473c:	mov	r0, r8
   14740:	mov	r3, #14
   14744:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14748:	mov	r4, r0
   1474c:	b	145fc <_start@@Base+0x1ee0>
   14750:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14754:	mov	r4, #0
   14758:	mov	r5, #0
   1475c:	strd	r6, [sp, #8]
   14760:	cmp	r1, r2
   14764:	mov	r6, r2
   14768:	strd	r8, [sp, #16]
   1476c:	mov	r8, r0
   14770:	strd	sl, [sp, #24]
   14774:	str	lr, [sp, #32]
   14778:	sub	sp, sp, #44	; 0x2c
   1477c:	ldr	fp, [sp, #80]	; 0x50
   14780:	str	r3, [sp, #20]
   14784:	strd	r4, [fp]
   14788:	beq	148f0 <_start@@Base+0x21d4>
   1478c:	ldrb	r3, [r1]
   14790:	cmp	r3, #34	; 0x22
   14794:	moveq	r3, #0
   14798:	addeq	r4, r1, #1
   1479c:	streq	r3, [r0, #12]
   147a0:	beq	14904 <_start@@Base+0x21e8>
   147a4:	cmp	r3, #46	; 0x2e
   147a8:	movne	r3, #1
   147ac:	movne	r4, r1
   147b0:	strne	r3, [r0, #12]
   147b4:	beq	148cc <_start@@Base+0x21b0>
   147b8:	mov	r3, #0
   147bc:	add	sl, sp, #28
   147c0:	add	r9, sp, #32
   147c4:	str	r3, [sp, #8]
   147c8:	str	r3, [sp, #12]
   147cc:	str	r3, [sp, #16]
   147d0:	mov	r7, r4
   147d4:	mov	r1, r4
   147d8:	ldr	r5, [sp, #20]
   147dc:	b	147f8 <_start@@Base+0x20dc>
   147e0:	cmp	r7, r0
   147e4:	mov	r7, r0
   147e8:	bne	14840 <_start@@Base+0x2124>
   147ec:	ldr	r3, [r5, #4]!
   147f0:	cmp	r3, #0
   147f4:	beq	148b4 <_start@@Base+0x2198>
   147f8:	add	r3, sp, #24
   147fc:	mov	r2, r6
   14800:	stm	sp, {r9, sl}
   14804:	mov	r0, r8
   14808:	ldr	r4, [r5]
   1480c:	blx	r4
   14810:	cmp	r6, r0
   14814:	mov	r1, r0
   14818:	bne	147e0 <_start@@Base+0x20c4>
   1481c:	mov	r4, r0
   14820:	mov	r0, r4
   14824:	add	sp, sp, #44	; 0x2c
   14828:	ldrd	r4, [sp]
   1482c:	ldrd	r6, [sp, #8]
   14830:	ldrd	r8, [sp, #16]
   14834:	ldrd	sl, [sp, #24]
   14838:	add	sp, sp, #32
   1483c:	pop	{pc}		; (ldr pc, [sp], #4)
   14840:	ldr	r3, [sp, #8]
   14844:	mov	r4, r0
   14848:	cmp	r3, #0
   1484c:	beq	1485c <_start@@Base+0x2140>
   14850:	ldr	r3, [r8, #12]
   14854:	cmp	r3, #0
   14858:	bne	1496c <_start@@Base+0x2250>
   1485c:	ldr	r3, [sp, #24]
   14860:	cmp	r3, #0
   14864:	bne	14948 <_start@@Base+0x222c>
   14868:	ldr	r3, [sp, #32]
   1486c:	str	r3, [sp, #12]
   14870:	ldr	r3, [sp, #36]	; 0x24
   14874:	str	r3, [sp, #16]
   14878:	ldr	r2, [sp, #8]
   1487c:	ldr	r3, [fp]
   14880:	ldr	r0, [sp, #12]
   14884:	add	r2, r2, #1
   14888:	ldr	r1, [sp, #28]
   1488c:	str	r2, [sp, #8]
   14890:	ldr	r2, [fp, #4]
   14894:	adds	r3, r3, r0
   14898:	ldr	r0, [sp, #16]
   1489c:	str	r3, [fp]
   148a0:	adc	r2, r2, r0
   148a4:	cmp	r1, #0
   148a8:	str	r2, [fp, #4]
   148ac:	bne	147d0 <_start@@Base+0x20b4>
   148b0:	b	14820 <_start@@Base+0x2104>
   148b4:	mov	r2, r6
   148b8:	mov	r0, r8
   148bc:	mov	r3, #23
   148c0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   148c4:	mov	r4, r0
   148c8:	b	14820 <_start@@Base+0x2104>
   148cc:	mov	r3, #5
   148d0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   148d4:	ldr	r3, [r8, #12]
   148d8:	mov	r4, r0
   148dc:	cmp	r3, #0
   148e0:	beq	14904 <_start@@Base+0x21e8>
   148e4:	cmp	r6, r4
   148e8:	bne	147b8 <_start@@Base+0x209c>
   148ec:	b	14820 <_start@@Base+0x2104>
   148f0:	ldr	r3, [r0, #12]
   148f4:	cmp	r3, #0
   148f8:	movne	r4, r1
   148fc:	bne	14820 <_start@@Base+0x2104>
   14900:	mov	r4, r6
   14904:	sub	r3, r6, r4
   14908:	cmp	r3, #1
   1490c:	ble	14930 <_start@@Base+0x2214>
   14910:	ldrb	r3, [r4]
   14914:	cmp	r3, #32
   14918:	bhi	148e4 <_start@@Base+0x21c8>
   1491c:	bne	14930 <_start@@Base+0x2214>
   14920:	ldrb	r3, [r4, #1]
   14924:	cmp	r3, #32
   14928:	addhi	r4, r4, #1
   1492c:	bhi	148e4 <_start@@Base+0x21c8>
   14930:	mov	r1, r4
   14934:	mov	r2, r6
   14938:	mov	r0, r8
   1493c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   14940:	mov	r4, r0
   14944:	b	148e4 <_start@@Base+0x21c8>
   14948:	mov	r3, #8
   1494c:	mov	r2, r6
   14950:	mov	r1, r4
   14954:	mov	r0, r8
   14958:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1495c:	cmp	r6, r0
   14960:	bne	14878 <_start@@Base+0x215c>
   14964:	mov	r4, r6
   14968:	b	14820 <_start@@Base+0x2104>
   1496c:	mov	r1, r4
   14970:	mov	r2, r6
   14974:	mov	r0, r8
   14978:	mov	r3, #14
   1497c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14980:	mov	r4, r0
   14984:	b	14820 <_start@@Base+0x2104>
   14988:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1498c:	mov	ip, #0
   14990:	cmp	r1, r2
   14994:	strd	r6, [sp, #8]
   14998:	mov	r4, r1
   1499c:	mov	r6, r2
   149a0:	strd	r8, [sp, #16]
   149a4:	mov	r8, r0
   149a8:	strd	sl, [sp, #24]
   149ac:	str	lr, [sp, #32]
   149b0:	sub	sp, sp, #36	; 0x24
   149b4:	str	r3, [sp, #8]
   149b8:	ldr	r3, [sp, #72]	; 0x48
   149bc:	strh	ip, [r3]
   149c0:	beq	14b14 <_start@@Base+0x23f8>
   149c4:	ldrb	r3, [r1]
   149c8:	cmp	r3, #34	; 0x22
   149cc:	addeq	r4, r1, #1
   149d0:	streq	ip, [r0, #12]
   149d4:	beq	14b24 <_start@@Base+0x2408>
   149d8:	cmp	r3, #46	; 0x2e
   149dc:	movne	r3, #1
   149e0:	strne	r3, [r0, #12]
   149e4:	beq	14af0 <_start@@Base+0x23d4>
   149e8:	mov	fp, #0
   149ec:	add	sl, sp, #20
   149f0:	add	r9, sp, #24
   149f4:	str	fp, [sp, #12]
   149f8:	mov	r7, r4
   149fc:	mov	r1, r4
   14a00:	ldr	r5, [sp, #8]
   14a04:	b	14a20 <_start@@Base+0x2304>
   14a08:	cmp	r7, r0
   14a0c:	mov	r7, r0
   14a10:	bne	14a68 <_start@@Base+0x234c>
   14a14:	ldr	r3, [r5, #4]!
   14a18:	cmp	r3, #0
   14a1c:	beq	14ad8 <_start@@Base+0x23bc>
   14a20:	add	r3, sp, #16
   14a24:	mov	r2, r6
   14a28:	stm	sp, {r9, sl}
   14a2c:	mov	r0, r8
   14a30:	ldr	r4, [r5]
   14a34:	blx	r4
   14a38:	cmp	r6, r0
   14a3c:	mov	r1, r0
   14a40:	bne	14a08 <_start@@Base+0x22ec>
   14a44:	mov	r4, r0
   14a48:	mov	r0, r4
   14a4c:	add	sp, sp, #36	; 0x24
   14a50:	ldrd	r4, [sp]
   14a54:	ldrd	r6, [sp, #8]
   14a58:	ldrd	r8, [sp, #16]
   14a5c:	ldrd	sl, [sp, #24]
   14a60:	add	sp, sp, #32
   14a64:	pop	{pc}		; (ldr pc, [sp], #4)
   14a68:	cmp	fp, #0
   14a6c:	mov	r4, r0
   14a70:	beq	14a80 <_start@@Base+0x2364>
   14a74:	ldr	r3, [r8, #12]
   14a78:	cmp	r3, #0
   14a7c:	bne	14ba4 <_start@@Base+0x2488>
   14a80:	ldr	r3, [sp, #16]
   14a84:	cmp	r3, #0
   14a88:	bne	14b68 <_start@@Base+0x244c>
   14a8c:	ldrd	r2, [sp, #24]
   14a90:	mov	r1, #0
   14a94:	movw	r0, #65535	; 0xffff
   14a98:	cmp	r3, r1
   14a9c:	cmpeq	r2, r0
   14aa0:	uxthls	r3, r2
   14aa4:	strls	r3, [sp, #12]
   14aa8:	bhi	14b8c <_start@@Base+0x2470>
   14aac:	ldr	r1, [sp, #12]
   14ab0:	add	fp, fp, #1
   14ab4:	ldr	r3, [sp, #72]	; 0x48
   14ab8:	ldr	r2, [sp, #20]
   14abc:	ldrh	r3, [r3]
   14ac0:	cmp	r2, #0
   14ac4:	ldr	r2, [sp, #72]	; 0x48
   14ac8:	add	r3, r1, r3
   14acc:	strh	r3, [r2]
   14ad0:	bne	149f8 <_start@@Base+0x22dc>
   14ad4:	b	14a48 <_start@@Base+0x232c>
   14ad8:	mov	r2, r6
   14adc:	mov	r0, r8
   14ae0:	mov	r3, #23
   14ae4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14ae8:	mov	r4, r0
   14aec:	b	14a48 <_start@@Base+0x232c>
   14af0:	mov	r3, #5
   14af4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14af8:	ldr	r3, [r8, #12]
   14afc:	mov	r4, r0
   14b00:	cmp	r3, #0
   14b04:	beq	14b24 <_start@@Base+0x2408>
   14b08:	cmp	r6, r4
   14b0c:	bne	149e8 <_start@@Base+0x22cc>
   14b10:	b	14a48 <_start@@Base+0x232c>
   14b14:	ldr	r3, [r0, #12]
   14b18:	cmp	r3, #0
   14b1c:	bne	14a48 <_start@@Base+0x232c>
   14b20:	mov	r4, r6
   14b24:	sub	r3, r6, r4
   14b28:	cmp	r3, #1
   14b2c:	ble	14b50 <_start@@Base+0x2434>
   14b30:	ldrb	r3, [r4]
   14b34:	cmp	r3, #32
   14b38:	bhi	14b08 <_start@@Base+0x23ec>
   14b3c:	bne	14b50 <_start@@Base+0x2434>
   14b40:	ldrb	r3, [r4, #1]
   14b44:	cmp	r3, #32
   14b48:	addhi	r4, r4, #1
   14b4c:	bhi	14b08 <_start@@Base+0x23ec>
   14b50:	mov	r1, r4
   14b54:	mov	r2, r6
   14b58:	mov	r0, r8
   14b5c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   14b60:	mov	r4, r0
   14b64:	b	14b08 <_start@@Base+0x23ec>
   14b68:	mov	r3, #8
   14b6c:	mov	r2, r6
   14b70:	mov	r1, r4
   14b74:	mov	r0, r8
   14b78:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14b7c:	cmp	r6, r0
   14b80:	bne	14aac <_start@@Base+0x2390>
   14b84:	mov	r4, r6
   14b88:	b	14a48 <_start@@Base+0x232c>
   14b8c:	mov	r3, #7
   14b90:	mov	r2, r6
   14b94:	mov	r1, r4
   14b98:	mov	r0, r8
   14b9c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14ba0:	b	14b7c <_start@@Base+0x2460>
   14ba4:	mov	r1, r4
   14ba8:	mov	r2, r6
   14bac:	mov	r0, r8
   14bb0:	mov	r3, #14
   14bb4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14bb8:	mov	r4, r0
   14bbc:	b	14a48 <_start@@Base+0x232c>
   14bc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bc4:	mov	ip, #0
   14bc8:	cmp	r1, r2
   14bcc:	strd	r6, [sp, #8]
   14bd0:	mov	r4, r1
   14bd4:	mov	r6, r2
   14bd8:	strd	r8, [sp, #16]
   14bdc:	mov	r8, r0
   14be0:	strd	sl, [sp, #24]
   14be4:	str	lr, [sp, #32]
   14be8:	sub	sp, sp, #36	; 0x24
   14bec:	str	r3, [sp, #8]
   14bf0:	ldr	r3, [sp, #72]	; 0x48
   14bf4:	strh	ip, [r3]
   14bf8:	beq	14d8c <_start@@Base+0x2670>
   14bfc:	ldrb	r3, [r1]
   14c00:	cmp	r3, #34	; 0x22
   14c04:	addeq	r4, r1, #1
   14c08:	streq	ip, [r0, #12]
   14c0c:	beq	14d9c <_start@@Base+0x2680>
   14c10:	cmp	r3, #46	; 0x2e
   14c14:	movne	r3, #1
   14c18:	strne	r3, [r0, #12]
   14c1c:	beq	14d68 <_start@@Base+0x264c>
   14c20:	mov	fp, #0
   14c24:	add	sl, sp, #20
   14c28:	add	r9, sp, #24
   14c2c:	str	fp, [sp, #12]
   14c30:	mov	r7, r4
   14c34:	mov	r1, r4
   14c38:	ldr	r5, [sp, #8]
   14c3c:	b	14c58 <_start@@Base+0x253c>
   14c40:	cmp	r7, r0
   14c44:	mov	r7, r0
   14c48:	bne	14ca0 <_start@@Base+0x2584>
   14c4c:	ldr	r3, [r5, #4]!
   14c50:	cmp	r3, #0
   14c54:	beq	14d0c <_start@@Base+0x25f0>
   14c58:	add	r3, sp, #16
   14c5c:	mov	r2, r6
   14c60:	stm	sp, {r9, sl}
   14c64:	mov	r0, r8
   14c68:	ldr	r4, [r5]
   14c6c:	blx	r4
   14c70:	cmp	r6, r0
   14c74:	mov	r1, r0
   14c78:	bne	14c40 <_start@@Base+0x2524>
   14c7c:	mov	r4, r0
   14c80:	mov	r0, r4
   14c84:	add	sp, sp, #36	; 0x24
   14c88:	ldrd	r4, [sp]
   14c8c:	ldrd	r6, [sp, #8]
   14c90:	ldrd	r8, [sp, #16]
   14c94:	ldrd	sl, [sp, #24]
   14c98:	add	sp, sp, #32
   14c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14ca0:	cmp	fp, #0
   14ca4:	mov	r4, r0
   14ca8:	beq	14cb8 <_start@@Base+0x259c>
   14cac:	ldr	r3, [r8, #12]
   14cb0:	cmp	r3, #0
   14cb4:	bne	14e00 <_start@@Base+0x26e4>
   14cb8:	ldr	r1, [sp, #16]
   14cbc:	ldrd	r2, [sp, #24]
   14cc0:	cmp	r1, #0
   14cc4:	beq	14d24 <_start@@Base+0x2608>
   14cc8:	cmp	r3, #0
   14ccc:	cmpeq	r2, #32768	; 0x8000
   14cd0:	bhi	14de0 <_start@@Base+0x26c4>
   14cd4:	rsb	r2, r2, #0
   14cd8:	uxth	r2, r2
   14cdc:	sxth	r3, r2
   14ce0:	str	r3, [sp, #12]
   14ce4:	ldr	r3, [sp, #72]	; 0x48
   14ce8:	add	fp, fp, #1
   14cec:	ldrh	r1, [r3]
   14cf0:	ldr	r3, [sp, #20]
   14cf4:	add	r2, r2, r1
   14cf8:	cmp	r3, #0
   14cfc:	ldr	r3, [sp, #72]	; 0x48
   14d00:	strh	r2, [r3]
   14d04:	bne	14c30 <_start@@Base+0x2514>
   14d08:	b	14c80 <_start@@Base+0x2564>
   14d0c:	mov	r2, r6
   14d10:	mov	r0, r8
   14d14:	mov	r3, #23
   14d18:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14d1c:	mov	r4, r0
   14d20:	b	14c80 <_start@@Base+0x2564>
   14d24:	mov	r1, #0
   14d28:	movw	r0, #32767	; 0x7fff
   14d2c:	cmp	r3, r1
   14d30:	cmpeq	r2, r0
   14d34:	sxthls	r1, r2
   14d38:	uxthls	r2, r2
   14d3c:	strls	r1, [sp, #12]
   14d40:	bls	14ce4 <_start@@Base+0x25c8>
   14d44:	mov	r3, #7
   14d48:	mov	r2, r6
   14d4c:	mov	r1, r4
   14d50:	mov	r0, r8
   14d54:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14d58:	cmp	r6, r0
   14d5c:	beq	14df8 <_start@@Base+0x26dc>
   14d60:	ldrh	r2, [sp, #12]
   14d64:	b	14ce4 <_start@@Base+0x25c8>
   14d68:	mov	r3, #5
   14d6c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14d70:	ldr	r3, [r8, #12]
   14d74:	mov	r4, r0
   14d78:	cmp	r3, #0
   14d7c:	beq	14d9c <_start@@Base+0x2680>
   14d80:	cmp	r6, r4
   14d84:	bne	14c20 <_start@@Base+0x2504>
   14d88:	b	14c80 <_start@@Base+0x2564>
   14d8c:	ldr	r3, [r0, #12]
   14d90:	cmp	r3, #0
   14d94:	bne	14c80 <_start@@Base+0x2564>
   14d98:	mov	r4, r6
   14d9c:	sub	r3, r6, r4
   14da0:	cmp	r3, #1
   14da4:	ble	14dc8 <_start@@Base+0x26ac>
   14da8:	ldrb	r3, [r4]
   14dac:	cmp	r3, #32
   14db0:	bhi	14d80 <_start@@Base+0x2664>
   14db4:	bne	14dc8 <_start@@Base+0x26ac>
   14db8:	ldrb	r3, [r4, #1]
   14dbc:	cmp	r3, #32
   14dc0:	addhi	r4, r4, #1
   14dc4:	bhi	14d80 <_start@@Base+0x2664>
   14dc8:	mov	r1, r4
   14dcc:	mov	r2, r6
   14dd0:	mov	r0, r8
   14dd4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   14dd8:	mov	r4, r0
   14ddc:	b	14d80 <_start@@Base+0x2664>
   14de0:	mov	r3, #8
   14de4:	mov	r2, r6
   14de8:	mov	r1, r4
   14dec:	mov	r0, r8
   14df0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14df4:	b	14d58 <_start@@Base+0x263c>
   14df8:	mov	r4, r6
   14dfc:	b	14c80 <_start@@Base+0x2564>
   14e00:	mov	r1, r4
   14e04:	mov	r2, r6
   14e08:	mov	r0, r8
   14e0c:	mov	r3, #14
   14e10:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14e14:	mov	r4, r0
   14e18:	b	14c80 <_start@@Base+0x2564>
   14e1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e20:	mov	ip, #0
   14e24:	cmp	r1, r2
   14e28:	strd	r6, [sp, #8]
   14e2c:	mov	r4, r1
   14e30:	mov	r6, r2
   14e34:	strd	r8, [sp, #16]
   14e38:	mov	r8, r0
   14e3c:	strd	sl, [sp, #24]
   14e40:	str	lr, [sp, #32]
   14e44:	sub	sp, sp, #36	; 0x24
   14e48:	str	r3, [sp, #8]
   14e4c:	ldr	r3, [sp, #72]	; 0x48
   14e50:	str	ip, [r3]
   14e54:	beq	14fa4 <_start@@Base+0x2888>
   14e58:	ldrb	r3, [r1]
   14e5c:	cmp	r3, #34	; 0x22
   14e60:	addeq	r4, r1, #1
   14e64:	streq	ip, [r0, #12]
   14e68:	beq	14fb4 <_start@@Base+0x2898>
   14e6c:	cmp	r3, #46	; 0x2e
   14e70:	movne	r3, #1
   14e74:	strne	r3, [r0, #12]
   14e78:	beq	14f80 <_start@@Base+0x2864>
   14e7c:	mov	fp, #0
   14e80:	add	sl, sp, #20
   14e84:	add	r9, sp, #24
   14e88:	str	fp, [sp, #12]
   14e8c:	mov	r7, r4
   14e90:	mov	r1, r4
   14e94:	ldr	r5, [sp, #8]
   14e98:	b	14eb4 <_start@@Base+0x2798>
   14e9c:	cmp	r7, r0
   14ea0:	mov	r7, r0
   14ea4:	bne	14efc <_start@@Base+0x27e0>
   14ea8:	ldr	r3, [r5, #4]!
   14eac:	cmp	r3, #0
   14eb0:	beq	14f68 <_start@@Base+0x284c>
   14eb4:	add	r3, sp, #16
   14eb8:	mov	r2, r6
   14ebc:	stm	sp, {r9, sl}
   14ec0:	mov	r0, r8
   14ec4:	ldr	r4, [r5]
   14ec8:	blx	r4
   14ecc:	cmp	r6, r0
   14ed0:	mov	r1, r0
   14ed4:	bne	14e9c <_start@@Base+0x2780>
   14ed8:	mov	r4, r0
   14edc:	mov	r0, r4
   14ee0:	add	sp, sp, #36	; 0x24
   14ee4:	ldrd	r4, [sp]
   14ee8:	ldrd	r6, [sp, #8]
   14eec:	ldrd	r8, [sp, #16]
   14ef0:	ldrd	sl, [sp, #24]
   14ef4:	add	sp, sp, #32
   14ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   14efc:	cmp	fp, #0
   14f00:	mov	r4, r0
   14f04:	beq	14f14 <_start@@Base+0x27f8>
   14f08:	ldr	r3, [r8, #12]
   14f0c:	cmp	r3, #0
   14f10:	bne	15034 <_start@@Base+0x2918>
   14f14:	ldr	r3, [sp, #16]
   14f18:	cmp	r3, #0
   14f1c:	bne	14ff8 <_start@@Base+0x28dc>
   14f20:	ldrd	r2, [sp, #24]
   14f24:	mov	r1, #0
   14f28:	mvn	r0, #0
   14f2c:	cmp	r3, r1
   14f30:	cmpeq	r2, r0
   14f34:	strls	r2, [sp, #12]
   14f38:	bhi	1501c <_start@@Base+0x2900>
   14f3c:	ldr	r1, [sp, #12]
   14f40:	add	fp, fp, #1
   14f44:	ldr	r3, [sp, #72]	; 0x48
   14f48:	ldr	r2, [sp, #20]
   14f4c:	ldr	r3, [r3]
   14f50:	cmp	r2, #0
   14f54:	ldr	r2, [sp, #72]	; 0x48
   14f58:	add	r3, r3, r1
   14f5c:	str	r3, [r2]
   14f60:	bne	14e8c <_start@@Base+0x2770>
   14f64:	b	14edc <_start@@Base+0x27c0>
   14f68:	mov	r2, r6
   14f6c:	mov	r0, r8
   14f70:	mov	r3, #23
   14f74:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14f78:	mov	r4, r0
   14f7c:	b	14edc <_start@@Base+0x27c0>
   14f80:	mov	r3, #5
   14f84:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   14f88:	ldr	r3, [r8, #12]
   14f8c:	mov	r4, r0
   14f90:	cmp	r3, #0
   14f94:	beq	14fb4 <_start@@Base+0x2898>
   14f98:	cmp	r6, r4
   14f9c:	bne	14e7c <_start@@Base+0x2760>
   14fa0:	b	14edc <_start@@Base+0x27c0>
   14fa4:	ldr	r3, [r0, #12]
   14fa8:	cmp	r3, #0
   14fac:	bne	14edc <_start@@Base+0x27c0>
   14fb0:	mov	r4, r6
   14fb4:	sub	r3, r6, r4
   14fb8:	cmp	r3, #1
   14fbc:	ble	14fe0 <_start@@Base+0x28c4>
   14fc0:	ldrb	r3, [r4]
   14fc4:	cmp	r3, #32
   14fc8:	bhi	14f98 <_start@@Base+0x287c>
   14fcc:	bne	14fe0 <_start@@Base+0x28c4>
   14fd0:	ldrb	r3, [r4, #1]
   14fd4:	cmp	r3, #32
   14fd8:	addhi	r4, r4, #1
   14fdc:	bhi	14f98 <_start@@Base+0x287c>
   14fe0:	mov	r1, r4
   14fe4:	mov	r2, r6
   14fe8:	mov	r0, r8
   14fec:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   14ff0:	mov	r4, r0
   14ff4:	b	14f98 <_start@@Base+0x287c>
   14ff8:	mov	r3, #8
   14ffc:	mov	r2, r6
   15000:	mov	r1, r4
   15004:	mov	r0, r8
   15008:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1500c:	cmp	r6, r0
   15010:	bne	14f3c <_start@@Base+0x2820>
   15014:	mov	r4, r6
   15018:	b	14edc <_start@@Base+0x27c0>
   1501c:	mov	r3, #7
   15020:	mov	r2, r6
   15024:	mov	r1, r4
   15028:	mov	r0, r8
   1502c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15030:	b	1500c <_start@@Base+0x28f0>
   15034:	mov	r1, r4
   15038:	mov	r2, r6
   1503c:	mov	r0, r8
   15040:	mov	r3, #14
   15044:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15048:	mov	r4, r0
   1504c:	b	14edc <_start@@Base+0x27c0>
   15050:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15054:	mov	ip, #0
   15058:	cmp	r1, r2
   1505c:	strd	r6, [sp, #8]
   15060:	mov	r4, r1
   15064:	mov	r6, r2
   15068:	strd	r8, [sp, #16]
   1506c:	mov	r8, r0
   15070:	strd	sl, [sp, #24]
   15074:	str	lr, [sp, #32]
   15078:	sub	sp, sp, #36	; 0x24
   1507c:	str	r3, [sp, #12]
   15080:	ldr	r3, [sp, #72]	; 0x48
   15084:	str	ip, [r3]
   15088:	beq	15210 <_start@@Base+0x2af4>
   1508c:	ldrb	r3, [r1]
   15090:	cmp	r3, #34	; 0x22
   15094:	addeq	r4, r1, #1
   15098:	streq	ip, [r0, #12]
   1509c:	beq	15220 <_start@@Base+0x2b04>
   150a0:	cmp	r3, #46	; 0x2e
   150a4:	movne	r3, #1
   150a8:	strne	r3, [r0, #12]
   150ac:	beq	151ec <_start@@Base+0x2ad0>
   150b0:	mov	fp, #0
   150b4:	add	sl, sp, #20
   150b8:	add	r9, sp, #24
   150bc:	str	fp, [sp, #8]
   150c0:	mov	r7, r4
   150c4:	mov	r1, r4
   150c8:	ldr	r5, [sp, #12]
   150cc:	b	150e8 <_start@@Base+0x29cc>
   150d0:	cmp	r7, r0
   150d4:	mov	r7, r0
   150d8:	bne	15130 <_start@@Base+0x2a14>
   150dc:	ldr	r3, [r5, #4]!
   150e0:	cmp	r3, #0
   150e4:	beq	15198 <_start@@Base+0x2a7c>
   150e8:	add	r3, sp, #16
   150ec:	mov	r2, r6
   150f0:	stm	sp, {r9, sl}
   150f4:	mov	r0, r8
   150f8:	ldr	r4, [r5]
   150fc:	blx	r4
   15100:	cmp	r6, r0
   15104:	mov	r1, r0
   15108:	bne	150d0 <_start@@Base+0x29b4>
   1510c:	mov	r4, r0
   15110:	mov	r0, r4
   15114:	add	sp, sp, #36	; 0x24
   15118:	ldrd	r4, [sp]
   1511c:	ldrd	r6, [sp, #8]
   15120:	ldrd	r8, [sp, #16]
   15124:	ldrd	sl, [sp, #24]
   15128:	add	sp, sp, #32
   1512c:	pop	{pc}		; (ldr pc, [sp], #4)
   15130:	cmp	fp, #0
   15134:	mov	r4, r0
   15138:	beq	15148 <_start@@Base+0x2a2c>
   1513c:	ldr	r3, [r8, #12]
   15140:	cmp	r3, #0
   15144:	bne	1527c <_start@@Base+0x2b60>
   15148:	ldr	r1, [sp, #16]
   1514c:	ldrd	r2, [sp, #24]
   15150:	cmp	r1, #0
   15154:	beq	151b0 <_start@@Base+0x2a94>
   15158:	cmp	r3, #0
   1515c:	cmpeq	r2, #-2147483648	; 0x80000000
   15160:	rsbls	r3, r2, #0
   15164:	strls	r3, [sp, #8]
   15168:	bhi	15264 <_start@@Base+0x2b48>
   1516c:	ldr	r1, [sp, #8]
   15170:	add	fp, fp, #1
   15174:	ldr	r3, [sp, #72]	; 0x48
   15178:	ldr	r2, [sp, #20]
   1517c:	ldr	r3, [r3]
   15180:	cmp	r2, #0
   15184:	ldr	r2, [sp, #72]	; 0x48
   15188:	add	r3, r3, r1
   1518c:	str	r3, [r2]
   15190:	bne	150c0 <_start@@Base+0x29a4>
   15194:	b	15110 <_start@@Base+0x29f4>
   15198:	mov	r2, r6
   1519c:	mov	r0, r8
   151a0:	mov	r3, #23
   151a4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   151a8:	mov	r4, r0
   151ac:	b	15110 <_start@@Base+0x29f4>
   151b0:	mov	r1, #0
   151b4:	mvn	r0, #-2147483648	; 0x80000000
   151b8:	cmp	r3, r1
   151bc:	cmpeq	r2, r0
   151c0:	strls	r2, [sp, #8]
   151c4:	bls	1516c <_start@@Base+0x2a50>
   151c8:	mov	r3, #7
   151cc:	mov	r2, r6
   151d0:	mov	r1, r4
   151d4:	mov	r0, r8
   151d8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   151dc:	cmp	r6, r0
   151e0:	bne	1516c <_start@@Base+0x2a50>
   151e4:	mov	r4, r6
   151e8:	b	15110 <_start@@Base+0x29f4>
   151ec:	mov	r3, #5
   151f0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   151f4:	ldr	r3, [r8, #12]
   151f8:	mov	r4, r0
   151fc:	cmp	r3, #0
   15200:	beq	15220 <_start@@Base+0x2b04>
   15204:	cmp	r6, r4
   15208:	bne	150b0 <_start@@Base+0x2994>
   1520c:	b	15110 <_start@@Base+0x29f4>
   15210:	ldr	r3, [r0, #12]
   15214:	cmp	r3, #0
   15218:	bne	15110 <_start@@Base+0x29f4>
   1521c:	mov	r4, r6
   15220:	sub	r3, r6, r4
   15224:	cmp	r3, #1
   15228:	ble	1524c <_start@@Base+0x2b30>
   1522c:	ldrb	r3, [r4]
   15230:	cmp	r3, #32
   15234:	bhi	15204 <_start@@Base+0x2ae8>
   15238:	bne	1524c <_start@@Base+0x2b30>
   1523c:	ldrb	r3, [r4, #1]
   15240:	cmp	r3, #32
   15244:	addhi	r4, r4, #1
   15248:	bhi	15204 <_start@@Base+0x2ae8>
   1524c:	mov	r1, r4
   15250:	mov	r2, r6
   15254:	mov	r0, r8
   15258:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1525c:	mov	r4, r0
   15260:	b	15204 <_start@@Base+0x2ae8>
   15264:	mov	r3, #8
   15268:	mov	r2, r6
   1526c:	mov	r1, r4
   15270:	mov	r0, r8
   15274:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15278:	b	151dc <_start@@Base+0x2ac0>
   1527c:	mov	r1, r4
   15280:	mov	r2, r6
   15284:	mov	r0, r8
   15288:	mov	r3, #14
   1528c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15290:	mov	r4, r0
   15294:	b	15110 <_start@@Base+0x29f4>
   15298:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1529c:	mov	r5, r0
   152a0:	mov	r4, r2
   152a4:	ldr	r0, [r0]
   152a8:	mov	r2, #4
   152ac:	strd	r6, [sp, #8]
   152b0:	mov	r7, r3
   152b4:	mov	r3, #0
   152b8:	mov	r6, r1
   152bc:	mov	r1, r2
   152c0:	strd	r8, [sp, #16]
   152c4:	strd	sl, [sp, #24]
   152c8:	str	lr, [sp, #32]
   152cc:	sub	sp, sp, #52	; 0x34
   152d0:	str	r3, [r7]
   152d4:	bl	21e68 <flatcc_builder_start_struct@@Base>
   152d8:	subs	r3, r0, #0
   152dc:	str	r3, [sp, #24]
   152e0:	beq	15330 <_start@@Base+0x2c14>
   152e4:	cmp	r6, r4
   152e8:	beq	152f8 <_start@@Base+0x2bdc>
   152ec:	ldrb	r3, [r6]
   152f0:	cmp	r3, #123	; 0x7b
   152f4:	beq	15368 <_start@@Base+0x2c4c>
   152f8:	mov	r1, r6
   152fc:	mov	r3, #21
   15300:	mov	r2, r4
   15304:	mov	r0, r5
   15308:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1530c:	mov	r8, r0
   15310:	cmp	r4, r8
   15314:	beq	1596c <_start@@Base+0x3250>
   15318:	ldr	r0, [r5]
   1531c:	bl	2203c <flatcc_builder_end_struct@@Base>
   15320:	cmp	r0, #0
   15324:	str	r0, [r7]
   15328:	moveq	r6, r8
   1532c:	bne	15348 <_start@@Base+0x2c2c>
   15330:	mov	r2, r4
   15334:	mov	r1, r6
   15338:	mov	r0, r5
   1533c:	mov	r3, #33	; 0x21
   15340:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15344:	mov	r8, r0
   15348:	mov	r0, r8
   1534c:	add	sp, sp, #52	; 0x34
   15350:	ldrd	r4, [sp]
   15354:	ldrd	r6, [sp, #8]
   15358:	ldrd	r8, [sp, #16]
   1535c:	ldrd	sl, [sp, #24]
   15360:	add	sp, sp, #32
   15364:	pop	{pc}		; (ldr pc, [sp], #4)
   15368:	add	r1, r6, #1
   1536c:	sub	r3, r4, r1
   15370:	cmp	r3, #1
   15374:	ble	15388 <_start@@Base+0x2c6c>
   15378:	ldrb	r3, [r6, #1]
   1537c:	cmp	r3, #32
   15380:	bhi	15398 <_start@@Base+0x2c7c>
   15384:	beq	15924 <_start@@Base+0x3208>
   15388:	mov	r2, r4
   1538c:	mov	r0, r5
   15390:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15394:	mov	r1, r0
   15398:	cmp	r4, r1
   1539c:	beq	153ac <_start@@Base+0x2c90>
   153a0:	ldrb	r3, [r1]
   153a4:	cmp	r3, #125	; 0x7d
   153a8:	beq	15954 <_start@@Base+0x3238>
   153ac:	mov	r3, #0
   153b0:	movt	r3, #65535	; 0xffff
   153b4:	str	r3, [sp, #28]
   153b8:	cmp	r4, r1
   153bc:	beq	153e8 <_start@@Base+0x2ccc>
   153c0:	ldrb	r3, [r1]
   153c4:	cmp	r3, #34	; 0x22
   153c8:	moveq	r3, #0
   153cc:	addeq	r1, r1, #1
   153d0:	streq	r3, [r5, #12]
   153d4:	beq	153e8 <_start@@Base+0x2ccc>
   153d8:	cmp	r3, #46	; 0x2e
   153dc:	movne	r3, #1
   153e0:	strne	r3, [r5, #12]
   153e4:	beq	15810 <_start@@Base+0x30f4>
   153e8:	sub	r3, r4, r1
   153ec:	cmp	r3, #8
   153f0:	bhi	15424 <_start@@Base+0x2d08>
   153f4:	sub	r3, r3, #1
   153f8:	cmp	r3, #7
   153fc:	ldrls	pc, [pc, r3, lsl #2]
   15400:	b	157ec <_start@@Base+0x30d0>
   15404:	andeq	r5, r1, ip, ror #13
   15408:	andeq	r5, r1, r0, ror #13
   1540c:	ldrdeq	r5, [r1], -r4
   15410:	andeq	r5, r1, r8, asr #13
   15414:			; <UNDEFINED> instruction: 0x000156bc
   15418:			; <UNDEFINED> instruction: 0x000156b0
   1541c:	andeq	r5, r1, r4, lsr #13
   15420:	andeq	r5, r1, r4, lsr #8
   15424:	ldrb	sl, [r1, #7]
   15428:	mov	fp, #0
   1542c:	mov	r3, fp
   15430:	ldrb	r8, [r1, #6]
   15434:	orr	r2, sl, r8, lsl #8
   15438:	ldrb	r8, [r1, #5]
   1543c:	orr	r2, r2, r8, lsl #16
   15440:	ldrb	r8, [r1, #4]
   15444:	orr	r2, r2, r8, lsl #24
   15448:	ldrb	sl, [r1, #3]
   1544c:	orr	r3, r3, sl
   15450:	ldrb	sl, [r1, #2]
   15454:	orr	sl, r3, sl, lsl #8
   15458:	ldrb	r8, [r1, #1]
   1545c:	orr	sl, sl, r8, lsl #16
   15460:	str	r2, [sp, #8]
   15464:	ldrb	r2, [r1]
   15468:	add	r9, pc, #960	; 0x3c0
   1546c:	ldrd	r8, [r9]
   15470:	orr	r3, sl, r2, lsl #24
   15474:	str	r3, [sp, #12]
   15478:	ldrd	r2, [sp, #8]
   1547c:	cmp	r3, r9
   15480:	cmpeq	r2, r8
   15484:	bne	157ec <_start@@Base+0x30d0>
   15488:	add	r6, r1, #8
   1548c:	sub	r3, r4, r6
   15490:	cmp	r3, #8
   15494:	bhi	154c4 <_start@@Base+0x2da8>
   15498:	sub	r2, r3, #2
   1549c:	cmp	r2, #6
   154a0:	ldrls	pc, [pc, r2, lsl #2]
   154a4:	b	157c0 <_start@@Base+0x30a4>
   154a8:	andeq	r5, r1, r0, lsl #14
   154ac:	strdeq	r5, [r1], -r8
   154b0:	andeq	r5, r1, r8, lsl #14
   154b4:	muleq	r1, ip, r6
   154b8:	muleq	r1, ip, r6
   154bc:	andeq	r5, r1, r4, asr #9
   154c0:	andeq	r5, r1, r4, asr #9
   154c4:	mov	r9, #0
   154c8:	mov	sl, r9
   154cc:	mov	r8, sl
   154d0:	ldrb	sl, [r1, #11]
   154d4:	orr	sl, r8, sl
   154d8:	ldrb	r8, [r1, #10]
   154dc:	orr	sl, sl, r8, lsl #8
   154e0:	ldrb	r8, [r1, #9]
   154e4:	mov	r2, #0
   154e8:	mov	fp, #0
   154ec:	movt	fp, #24932	; 0x6164
   154f0:	str	r2, [sp, #16]
   154f4:	ldr	r2, [sp, #28]
   154f8:	orr	sl, sl, r8, lsl #16
   154fc:	ldrb	r8, [r1, #8]
   15500:	orr	r8, sl, r8, lsl #24
   15504:	mov	sl, #0
   15508:	and	r2, r8, r2
   1550c:	str	r2, [sp, #20]
   15510:	ldrd	r8, [sp, #16]
   15514:	cmp	r9, fp
   15518:	cmpeq	r8, sl
   1551c:	bne	157c0 <_start@@Base+0x30a4>
   15520:	cmp	r3, #2
   15524:	ble	157c0 <_start@@Base+0x30a4>
   15528:	ldr	r2, [r5, #12]
   1552c:	ldrb	r3, [r1, #10]
   15530:	cmp	r2, #0
   15534:	beq	15800 <_start@@Base+0x30e4>
   15538:	cmp	r3, #58	; 0x3a
   1553c:	cmpne	r3, #32
   15540:	movhi	r3, #1
   15544:	movls	r3, #0
   15548:	bhi	157c0 <_start@@Base+0x30a4>
   1554c:	add	r1, r1, #10
   15550:	str	r3, [r5, #12]
   15554:	sub	r3, r4, r1
   15558:	cmp	r3, #1
   1555c:	ble	15570 <_start@@Base+0x2e54>
   15560:	ldrb	r3, [r1]
   15564:	cmp	r3, #32
   15568:	bhi	15580 <_start@@Base+0x2e64>
   1556c:	beq	158f8 <_start@@Base+0x31dc>
   15570:	mov	r2, r4
   15574:	mov	r0, r5
   15578:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1557c:	mov	r1, r0
   15580:	cmp	r4, r1
   15584:	beq	15594 <_start@@Base+0x2e78>
   15588:	ldrb	r3, [r1]
   1558c:	cmp	r3, #58	; 0x3a
   15590:	beq	1590c <_start@@Base+0x31f0>
   15594:	mov	r3, #4
   15598:	mov	r2, r4
   1559c:	mov	r0, r5
   155a0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   155a4:	mov	r8, r0
   155a8:	cmp	r6, r8
   155ac:	beq	157c0 <_start@@Base+0x30a4>
   155b0:	mov	r3, #0
   155b4:	mov	r0, #0
   155b8:	mov	r1, #0
   155bc:	cmp	r4, r8
   155c0:	str	r3, [sp, #32]
   155c4:	str	r3, [sp, #36]	; 0x24
   155c8:	strd	r0, [sp, #40]	; 0x28
   155cc:	beq	15828 <_start@@Base+0x310c>
   155d0:	add	r0, sp, #40	; 0x28
   155d4:	add	r3, sp, #36	; 0x24
   155d8:	mov	r2, r4
   155dc:	mov	r1, r8
   155e0:	str	r0, [sp]
   155e4:	mov	r0, r5
   155e8:	bl	2b638 <flatcc_json_parser_integer@@Base>
   155ec:	cmp	r8, r0
   155f0:	mov	r6, r0
   155f4:	bne	15838 <_start@@Base+0x311c>
   155f8:	add	r0, sp, #32
   155fc:	movw	r3, #120	; 0x78
   15600:	movt	r3, #4
   15604:	mov	r2, r4
   15608:	mov	r1, r6
   1560c:	str	r0, [sp]
   15610:	mov	r0, r5
   15614:	bl	15050 <_start@@Base+0x2934>
   15618:	cmp	r4, r0
   1561c:	cmpne	r0, r6
   15620:	beq	15938 <_start@@Base+0x321c>
   15624:	ldr	r2, [sp, #32]
   15628:	mov	r6, r0
   1562c:	ldr	r3, [sp, #24]
   15630:	str	r2, [r3]
   15634:	sub	r3, r4, r6
   15638:	cmp	r3, #1
   1563c:	ble	15650 <_start@@Base+0x2f34>
   15640:	ldrb	r3, [r6]
   15644:	cmp	r3, #32
   15648:	bhi	15664 <_start@@Base+0x2f48>
   1564c:	beq	157d8 <_start@@Base+0x30bc>
   15650:	mov	r1, r6
   15654:	mov	r2, r4
   15658:	mov	r0, r5
   1565c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15660:	mov	r6, r0
   15664:	cmp	r4, r6
   15668:	beq	15330 <_start@@Base+0x2c14>
   1566c:	ldrb	r3, [r6]
   15670:	cmp	r3, #44	; 0x2c
   15674:	beq	15748 <_start@@Base+0x302c>
   15678:	cmp	r3, #125	; 0x7d
   1567c:	beq	15710 <_start@@Base+0x2ff4>
   15680:	mov	r1, r6
   15684:	mov	r3, #10
   15688:	mov	r2, r4
   1568c:	mov	r0, r5
   15690:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15694:	mov	r8, r0
   15698:	b	15310 <_start@@Base+0x2bf4>
   1569c:	mov	sl, #0
   156a0:	b	154cc <_start@@Base+0x2db0>
   156a4:	mov	sl, #0
   156a8:	mov	fp, #0
   156ac:	b	1542c <_start@@Base+0x2d10>
   156b0:	mov	r2, #0
   156b4:	mov	r3, r2
   156b8:	b	15438 <_start@@Base+0x2d1c>
   156bc:	mov	r2, #0
   156c0:	mov	r3, r2
   156c4:	b	15440 <_start@@Base+0x2d24>
   156c8:	mov	r2, #0
   156cc:	mov	r3, r2
   156d0:	b	15448 <_start@@Base+0x2d2c>
   156d4:	mov	r2, #0
   156d8:	mov	r3, r2
   156dc:	b	15450 <_start@@Base+0x2d34>
   156e0:	mov	r2, #0
   156e4:	mov	sl, r2
   156e8:	b	15458 <_start@@Base+0x2d3c>
   156ec:	mov	r2, #0
   156f0:	mov	sl, r2
   156f4:	b	15460 <_start@@Base+0x2d44>
   156f8:	mov	sl, #0
   156fc:	b	154d8 <_start@@Base+0x2dbc>
   15700:	mov	sl, #0
   15704:	b	154e0 <_start@@Base+0x2dc4>
   15708:	mov	r8, #0
   1570c:	b	154d0 <_start@@Base+0x2db4>
   15710:	add	r8, r6, #1
   15714:	sub	r3, r4, r8
   15718:	cmp	r3, #1
   1571c:	ble	15730 <_start@@Base+0x3014>
   15720:	ldrb	r3, [r6, #1]
   15724:	cmp	r3, #32
   15728:	bhi	15310 <_start@@Base+0x2bf4>
   1572c:	beq	15880 <_start@@Base+0x3164>
   15730:	mov	r1, r8
   15734:	mov	r2, r4
   15738:	mov	r0, r5
   1573c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15740:	mov	r8, r0
   15744:	b	15310 <_start@@Base+0x2bf4>
   15748:	add	r1, r6, #1
   1574c:	sub	r3, r4, r1
   15750:	cmp	r3, #1
   15754:	ble	15768 <_start@@Base+0x304c>
   15758:	ldrb	r3, [r6, #1]
   1575c:	cmp	r3, #32
   15760:	bhi	15778 <_start@@Base+0x305c>
   15764:	beq	15894 <_start@@Base+0x3178>
   15768:	mov	r2, r4
   1576c:	mov	r0, r5
   15770:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15774:	mov	r1, r0
   15778:	cmp	r4, r1
   1577c:	beq	158ac <_start@@Base+0x3190>
   15780:	ldrb	r3, [r1]
   15784:	cmp	r3, #125	; 0x7d
   15788:	bne	153b8 <_start@@Base+0x2c9c>
   1578c:	add	r8, r1, #1
   15790:	sub	r3, r4, r8
   15794:	cmp	r3, #1
   15798:	ble	15730 <_start@@Base+0x3014>
   1579c:	ldrb	r3, [r1, #1]
   157a0:	cmp	r3, #32
   157a4:	bhi	15310 <_start@@Base+0x2bf4>
   157a8:	bne	15730 <_start@@Base+0x3014>
   157ac:	ldrb	r3, [r1, #2]
   157b0:	cmp	r3, #32
   157b4:	addhi	r8, r1, #2
   157b8:	bls	15730 <_start@@Base+0x3014>
   157bc:	b	15310 <_start@@Base+0x2bf4>
   157c0:	mov	r1, r6
   157c4:	mov	r2, r4
   157c8:	mov	r0, r5
   157cc:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   157d0:	mov	r6, r0
   157d4:	b	15634 <_start@@Base+0x2f18>
   157d8:	ldrb	r3, [r6, #1]
   157dc:	cmp	r3, #32
   157e0:	addhi	r6, r6, #1
   157e4:	bls	15650 <_start@@Base+0x2f34>
   157e8:	b	15664 <_start@@Base+0x2f48>
   157ec:	mov	r2, r4
   157f0:	mov	r0, r5
   157f4:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   157f8:	mov	r6, r0
   157fc:	b	15634 <_start@@Base+0x2f18>
   15800:	cmp	r3, #34	; 0x22
   15804:	bne	157c0 <_start@@Base+0x30a4>
   15808:	add	r1, r1, #11
   1580c:	b	15554 <_start@@Base+0x2e38>
   15810:	mov	r3, #5
   15814:	mov	r2, r4
   15818:	mov	r0, r5
   1581c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15820:	mov	r1, r0
   15824:	b	153e8 <_start@@Base+0x2ccc>
   15828:	mov	r6, r4
   1582c:	b	155f8 <_start@@Base+0x2edc>
   15830:	cmpvc	pc, #1342177286	; 0x50000006
   15834:	rsbvs	r6, pc, #428	; 0x1ac
   15838:	ldr	r1, [sp, #36]	; 0x24
   1583c:	ldrd	r2, [sp, #40]	; 0x28
   15840:	cmp	r1, #0
   15844:	beq	158c8 <_start@@Base+0x31ac>
   15848:	cmp	r3, #0
   1584c:	cmpeq	r2, #-2147483648	; 0x80000000
   15850:	rsbls	r2, r2, #0
   15854:	bls	1562c <_start@@Base+0x2f10>
   15858:	mov	r1, r0
   1585c:	mov	r3, #8
   15860:	mov	r2, r4
   15864:	mov	r0, r5
   15868:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1586c:	mov	r6, r0
   15870:	cmp	r8, r6
   15874:	ldrne	r2, [sp, #32]
   15878:	bne	1562c <_start@@Base+0x2f10>
   1587c:	b	155f8 <_start@@Base+0x2edc>
   15880:	ldrb	r3, [r6, #2]
   15884:	cmp	r3, #32
   15888:	addhi	r8, r6, #2
   1588c:	bls	15730 <_start@@Base+0x3014>
   15890:	b	15310 <_start@@Base+0x2bf4>
   15894:	ldrb	r3, [r6, #2]
   15898:	cmp	r3, #32
   1589c:	addhi	r1, r6, #2
   158a0:	bls	15768 <_start@@Base+0x304c>
   158a4:	cmp	r4, r1
   158a8:	bne	15780 <_start@@Base+0x3064>
   158ac:	mov	r3, #10
   158b0:	mov	r2, r4
   158b4:	mov	r1, r4
   158b8:	mov	r0, r5
   158bc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   158c0:	mov	r8, r0
   158c4:	b	15310 <_start@@Base+0x2bf4>
   158c8:	mov	r1, #0
   158cc:	mvn	r0, #-2147483648	; 0x80000000
   158d0:	cmp	r3, r1
   158d4:	cmpeq	r2, r0
   158d8:	bls	1562c <_start@@Base+0x2f10>
   158dc:	mov	r1, r6
   158e0:	mov	r3, #7
   158e4:	mov	r2, r4
   158e8:	mov	r0, r5
   158ec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   158f0:	mov	r6, r0
   158f4:	b	15870 <_start@@Base+0x3154>
   158f8:	ldrb	r3, [r1, #1]
   158fc:	cmp	r3, #32
   15900:	addhi	r1, r1, #1
   15904:	bls	15570 <_start@@Base+0x2e54>
   15908:	b	15580 <_start@@Base+0x2e64>
   1590c:	add	r1, r1, #1
   15910:	mov	r2, r4
   15914:	mov	r0, r5
   15918:	bl	13420 <_start@@Base+0xd04>
   1591c:	mov	r8, r0
   15920:	b	155a8 <_start@@Base+0x2e8c>
   15924:	ldrb	r3, [r6, #2]
   15928:	cmp	r3, #32
   1592c:	addhi	r1, r6, #2
   15930:	bls	15388 <_start@@Base+0x2c6c>
   15934:	b	15398 <_start@@Base+0x2c7c>
   15938:	mov	r1, r0
   1593c:	mov	r3, #33	; 0x21
   15940:	mov	r2, r4
   15944:	mov	r0, r5
   15948:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1594c:	mov	r8, r0
   15950:	b	15310 <_start@@Base+0x2bf4>
   15954:	add	r1, r1, #1
   15958:	mov	r2, r4
   1595c:	mov	r0, r5
   15960:	bl	13420 <_start@@Base+0xd04>
   15964:	mov	r8, r0
   15968:	b	15310 <_start@@Base+0x2bf4>
   1596c:	mov	r6, r4
   15970:	b	15330 <_start@@Base+0x2c14>
   15974:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15978:	mov	ip, #0
   1597c:	cmp	r1, r2
   15980:	strd	r6, [sp, #8]
   15984:	mov	r4, r1
   15988:	mov	r6, r2
   1598c:	strd	r8, [sp, #16]
   15990:	mov	r8, r0
   15994:	strd	sl, [sp, #24]
   15998:	str	lr, [sp, #32]
   1599c:	sub	sp, sp, #36	; 0x24
   159a0:	str	r3, [sp, #8]
   159a4:	ldr	r3, [sp, #72]	; 0x48
   159a8:	strb	ip, [r3]
   159ac:	beq	15b38 <_start@@Base+0x341c>
   159b0:	ldrb	r3, [r1]
   159b4:	cmp	r3, #34	; 0x22
   159b8:	addeq	r4, r1, #1
   159bc:	streq	ip, [r0, #12]
   159c0:	beq	15b48 <_start@@Base+0x342c>
   159c4:	cmp	r3, #46	; 0x2e
   159c8:	movne	r3, #1
   159cc:	strne	r3, [r0, #12]
   159d0:	beq	15b14 <_start@@Base+0x33f8>
   159d4:	mov	fp, #0
   159d8:	add	sl, sp, #20
   159dc:	add	r9, sp, #24
   159e0:	str	fp, [sp, #12]
   159e4:	mov	r7, r4
   159e8:	mov	r1, r4
   159ec:	ldr	r5, [sp, #8]
   159f0:	b	15a0c <_start@@Base+0x32f0>
   159f4:	cmp	r7, r0
   159f8:	mov	r7, r0
   159fc:	bne	15a54 <_start@@Base+0x3338>
   15a00:	ldr	r3, [r5, #4]!
   15a04:	cmp	r3, #0
   15a08:	beq	15ac0 <_start@@Base+0x33a4>
   15a0c:	add	r3, sp, #16
   15a10:	mov	r2, r6
   15a14:	stm	sp, {r9, sl}
   15a18:	mov	r0, r8
   15a1c:	ldr	r4, [r5]
   15a20:	blx	r4
   15a24:	cmp	r6, r0
   15a28:	mov	r1, r0
   15a2c:	bne	159f4 <_start@@Base+0x32d8>
   15a30:	mov	r4, r0
   15a34:	mov	r0, r4
   15a38:	add	sp, sp, #36	; 0x24
   15a3c:	ldrd	r4, [sp]
   15a40:	ldrd	r6, [sp, #8]
   15a44:	ldrd	r8, [sp, #16]
   15a48:	ldrd	sl, [sp, #24]
   15a4c:	add	sp, sp, #32
   15a50:	pop	{pc}		; (ldr pc, [sp], #4)
   15a54:	cmp	fp, #0
   15a58:	mov	r4, r0
   15a5c:	beq	15a6c <_start@@Base+0x3350>
   15a60:	ldr	r3, [r8, #12]
   15a64:	cmp	r3, #0
   15a68:	bne	15bac <_start@@Base+0x3490>
   15a6c:	ldr	r1, [sp, #16]
   15a70:	ldrd	r2, [sp, #24]
   15a74:	cmp	r1, #0
   15a78:	beq	15ad8 <_start@@Base+0x33bc>
   15a7c:	cmp	r3, #0
   15a80:	cmpeq	r2, #128	; 0x80
   15a84:	bhi	15b8c <_start@@Base+0x3470>
   15a88:	rsb	r2, r2, #0
   15a8c:	uxtb	r2, r2
   15a90:	sxtb	r3, r2
   15a94:	str	r3, [sp, #12]
   15a98:	ldr	r3, [sp, #72]	; 0x48
   15a9c:	add	fp, fp, #1
   15aa0:	ldrb	r1, [r3]
   15aa4:	ldr	r3, [sp, #20]
   15aa8:	add	r2, r2, r1
   15aac:	cmp	r3, #0
   15ab0:	ldr	r3, [sp, #72]	; 0x48
   15ab4:	strb	r2, [r3]
   15ab8:	bne	159e4 <_start@@Base+0x32c8>
   15abc:	b	15a34 <_start@@Base+0x3318>
   15ac0:	mov	r2, r6
   15ac4:	mov	r0, r8
   15ac8:	mov	r3, #23
   15acc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15ad0:	mov	r4, r0
   15ad4:	b	15a34 <_start@@Base+0x3318>
   15ad8:	cmp	r3, #0
   15adc:	cmpeq	r2, #127	; 0x7f
   15ae0:	sxtbls	r1, r2
   15ae4:	uxtbls	r2, r2
   15ae8:	strls	r1, [sp, #12]
   15aec:	bls	15a98 <_start@@Base+0x337c>
   15af0:	mov	r3, #7
   15af4:	mov	r2, r6
   15af8:	mov	r1, r4
   15afc:	mov	r0, r8
   15b00:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15b04:	cmp	r6, r0
   15b08:	beq	15ba4 <_start@@Base+0x3488>
   15b0c:	ldrb	r2, [sp, #12]
   15b10:	b	15a98 <_start@@Base+0x337c>
   15b14:	mov	r3, #5
   15b18:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15b1c:	ldr	r3, [r8, #12]
   15b20:	mov	r4, r0
   15b24:	cmp	r3, #0
   15b28:	beq	15b48 <_start@@Base+0x342c>
   15b2c:	cmp	r6, r4
   15b30:	bne	159d4 <_start@@Base+0x32b8>
   15b34:	b	15a34 <_start@@Base+0x3318>
   15b38:	ldr	r3, [r0, #12]
   15b3c:	cmp	r3, #0
   15b40:	bne	15a34 <_start@@Base+0x3318>
   15b44:	mov	r4, r6
   15b48:	sub	r3, r6, r4
   15b4c:	cmp	r3, #1
   15b50:	ble	15b74 <_start@@Base+0x3458>
   15b54:	ldrb	r3, [r4]
   15b58:	cmp	r3, #32
   15b5c:	bhi	15b2c <_start@@Base+0x3410>
   15b60:	bne	15b74 <_start@@Base+0x3458>
   15b64:	ldrb	r3, [r4, #1]
   15b68:	cmp	r3, #32
   15b6c:	addhi	r4, r4, #1
   15b70:	bhi	15b2c <_start@@Base+0x3410>
   15b74:	mov	r1, r4
   15b78:	mov	r2, r6
   15b7c:	mov	r0, r8
   15b80:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15b84:	mov	r4, r0
   15b88:	b	15b2c <_start@@Base+0x3410>
   15b8c:	mov	r3, #8
   15b90:	mov	r2, r6
   15b94:	mov	r1, r4
   15b98:	mov	r0, r8
   15b9c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15ba0:	b	15b04 <_start@@Base+0x33e8>
   15ba4:	mov	r4, r6
   15ba8:	b	15a34 <_start@@Base+0x3318>
   15bac:	mov	r1, r4
   15bb0:	mov	r2, r6
   15bb4:	mov	r0, r8
   15bb8:	mov	r3, #14
   15bbc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15bc0:	mov	r4, r0
   15bc4:	b	15a34 <_start@@Base+0x3318>
   15bc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15bcc:	mov	ip, #0
   15bd0:	cmp	r1, r2
   15bd4:	strd	r6, [sp, #8]
   15bd8:	mov	r4, r1
   15bdc:	mov	r6, r2
   15be0:	strd	r8, [sp, #16]
   15be4:	mov	r8, r0
   15be8:	strd	sl, [sp, #24]
   15bec:	str	lr, [sp, #32]
   15bf0:	sub	sp, sp, #36	; 0x24
   15bf4:	str	r3, [sp, #8]
   15bf8:	ldr	r3, [sp, #72]	; 0x48
   15bfc:	strb	ip, [r3]
   15c00:	beq	15d4c <_start@@Base+0x3630>
   15c04:	ldrb	r3, [r1]
   15c08:	cmp	r3, #34	; 0x22
   15c0c:	addeq	r4, r1, #1
   15c10:	streq	ip, [r0, #12]
   15c14:	beq	15d5c <_start@@Base+0x3640>
   15c18:	cmp	r3, #46	; 0x2e
   15c1c:	movne	r3, #1
   15c20:	strne	r3, [r0, #12]
   15c24:	beq	15d28 <_start@@Base+0x360c>
   15c28:	mov	fp, #0
   15c2c:	add	sl, sp, #20
   15c30:	add	r9, sp, #24
   15c34:	str	fp, [sp, #12]
   15c38:	mov	r7, r4
   15c3c:	mov	r1, r4
   15c40:	ldr	r5, [sp, #8]
   15c44:	b	15c60 <_start@@Base+0x3544>
   15c48:	cmp	r7, r0
   15c4c:	mov	r7, r0
   15c50:	bne	15ca8 <_start@@Base+0x358c>
   15c54:	ldr	r3, [r5, #4]!
   15c58:	cmp	r3, #0
   15c5c:	beq	15d10 <_start@@Base+0x35f4>
   15c60:	add	r3, sp, #16
   15c64:	mov	r2, r6
   15c68:	stm	sp, {r9, sl}
   15c6c:	mov	r0, r8
   15c70:	ldr	r4, [r5]
   15c74:	blx	r4
   15c78:	cmp	r6, r0
   15c7c:	mov	r1, r0
   15c80:	bne	15c48 <_start@@Base+0x352c>
   15c84:	mov	r4, r0
   15c88:	mov	r0, r4
   15c8c:	add	sp, sp, #36	; 0x24
   15c90:	ldrd	r4, [sp]
   15c94:	ldrd	r6, [sp, #8]
   15c98:	ldrd	r8, [sp, #16]
   15c9c:	ldrd	sl, [sp, #24]
   15ca0:	add	sp, sp, #32
   15ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca8:	cmp	fp, #0
   15cac:	mov	r4, r0
   15cb0:	beq	15cc0 <_start@@Base+0x35a4>
   15cb4:	ldr	r3, [r8, #12]
   15cb8:	cmp	r3, #0
   15cbc:	bne	15ddc <_start@@Base+0x36c0>
   15cc0:	ldr	r3, [sp, #16]
   15cc4:	cmp	r3, #0
   15cc8:	bne	15da0 <_start@@Base+0x3684>
   15ccc:	ldrd	r2, [sp, #24]
   15cd0:	cmp	r3, #0
   15cd4:	cmpeq	r2, #255	; 0xff
   15cd8:	uxtbls	r3, r2
   15cdc:	strls	r3, [sp, #12]
   15ce0:	bhi	15dc4 <_start@@Base+0x36a8>
   15ce4:	ldr	r1, [sp, #12]
   15ce8:	add	fp, fp, #1
   15cec:	ldr	r3, [sp, #72]	; 0x48
   15cf0:	ldr	r2, [sp, #20]
   15cf4:	ldrb	r3, [r3]
   15cf8:	cmp	r2, #0
   15cfc:	ldr	r2, [sp, #72]	; 0x48
   15d00:	add	r3, r1, r3
   15d04:	strb	r3, [r2]
   15d08:	bne	15c38 <_start@@Base+0x351c>
   15d0c:	b	15c88 <_start@@Base+0x356c>
   15d10:	mov	r2, r6
   15d14:	mov	r0, r8
   15d18:	mov	r3, #23
   15d1c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15d20:	mov	r4, r0
   15d24:	b	15c88 <_start@@Base+0x356c>
   15d28:	mov	r3, #5
   15d2c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15d30:	ldr	r3, [r8, #12]
   15d34:	mov	r4, r0
   15d38:	cmp	r3, #0
   15d3c:	beq	15d5c <_start@@Base+0x3640>
   15d40:	cmp	r6, r4
   15d44:	bne	15c28 <_start@@Base+0x350c>
   15d48:	b	15c88 <_start@@Base+0x356c>
   15d4c:	ldr	r3, [r0, #12]
   15d50:	cmp	r3, #0
   15d54:	bne	15c88 <_start@@Base+0x356c>
   15d58:	mov	r4, r6
   15d5c:	sub	r3, r6, r4
   15d60:	cmp	r3, #1
   15d64:	ble	15d88 <_start@@Base+0x366c>
   15d68:	ldrb	r3, [r4]
   15d6c:	cmp	r3, #32
   15d70:	bhi	15d40 <_start@@Base+0x3624>
   15d74:	bne	15d88 <_start@@Base+0x366c>
   15d78:	ldrb	r3, [r4, #1]
   15d7c:	cmp	r3, #32
   15d80:	addhi	r4, r4, #1
   15d84:	bhi	15d40 <_start@@Base+0x3624>
   15d88:	mov	r1, r4
   15d8c:	mov	r2, r6
   15d90:	mov	r0, r8
   15d94:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15d98:	mov	r4, r0
   15d9c:	b	15d40 <_start@@Base+0x3624>
   15da0:	mov	r3, #8
   15da4:	mov	r2, r6
   15da8:	mov	r1, r4
   15dac:	mov	r0, r8
   15db0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15db4:	cmp	r6, r0
   15db8:	bne	15ce4 <_start@@Base+0x35c8>
   15dbc:	mov	r4, r6
   15dc0:	b	15c88 <_start@@Base+0x356c>
   15dc4:	mov	r3, #7
   15dc8:	mov	r2, r6
   15dcc:	mov	r1, r4
   15dd0:	mov	r0, r8
   15dd4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15dd8:	b	15db4 <_start@@Base+0x3698>
   15ddc:	mov	r1, r4
   15de0:	mov	r2, r6
   15de4:	mov	r0, r8
   15de8:	mov	r3, #14
   15dec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15df0:	mov	r4, r0
   15df4:	b	15c88 <_start@@Base+0x356c>
   15df8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15dfc:	mov	r4, r1
   15e00:	mov	r5, r2
   15e04:	strd	r6, [sp, #8]
   15e08:	mov	r7, r3
   15e0c:	mov	r3, #0
   15e10:	mov	r6, r0
   15e14:	mov	r1, r3
   15e18:	strd	r8, [sp, #16]
   15e1c:	str	sl, [sp, #24]
   15e20:	str	lr, [sp, #28]
   15e24:	ldr	r0, [r0]
   15e28:	str	r3, [r7]
   15e2c:	bl	23668 <flatcc_builder_start_table@@Base>
   15e30:	cmp	r0, #0
   15e34:	beq	15e64 <_start@@Base+0x3748>
   15e38:	mov	r2, r5
   15e3c:	mov	r1, r4
   15e40:	ldrd	r4, [sp]
   15e44:	mov	r0, r6
   15e48:	mov	r3, #33	; 0x21
   15e4c:	ldrd	r6, [sp, #8]
   15e50:	ldrd	r8, [sp, #16]
   15e54:	ldr	sl, [sp, #24]
   15e58:	ldr	lr, [sp, #28]
   15e5c:	add	sp, sp, #32
   15e60:	b	27f68 <flatcc_json_parser_set_error@@Base>
   15e64:	cmp	r4, r5
   15e68:	beq	15e78 <_start@@Base+0x375c>
   15e6c:	ldrb	r3, [r4]
   15e70:	cmp	r3, #123	; 0x7b
   15e74:	beq	15ecc <_start@@Base+0x37b0>
   15e78:	mov	r1, r4
   15e7c:	mov	r3, #21
   15e80:	mov	r2, r5
   15e84:	mov	r0, r6
   15e88:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15e8c:	mov	r4, r0
   15e90:	ldr	r3, [r6, #24]
   15e94:	cmp	r3, #0
   15e98:	bne	15e38 <_start@@Base+0x371c>
   15e9c:	ldr	r0, [r6]
   15ea0:	bl	23fe8 <flatcc_builder_end_table@@Base>
   15ea4:	cmp	r0, #0
   15ea8:	str	r0, [r7]
   15eac:	beq	15e38 <_start@@Base+0x371c>
   15eb0:	mov	r0, r4
   15eb4:	ldrd	r4, [sp]
   15eb8:	ldrd	r6, [sp, #8]
   15ebc:	ldrd	r8, [sp, #16]
   15ec0:	ldr	sl, [sp, #24]
   15ec4:	add	sp, sp, #28
   15ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ecc:	add	r1, r4, #1
   15ed0:	sub	r3, r5, r1
   15ed4:	cmp	r3, #1
   15ed8:	ble	15eec <_start@@Base+0x37d0>
   15edc:	ldrb	r3, [r4, #1]
   15ee0:	cmp	r3, #32
   15ee4:	bhi	15efc <_start@@Base+0x37e0>
   15ee8:	beq	160bc <_start@@Base+0x39a0>
   15eec:	mov	r2, r5
   15ef0:	mov	r0, r6
   15ef4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15ef8:	mov	r1, r0
   15efc:	cmp	r5, r1
   15f00:	beq	15f10 <_start@@Base+0x37f4>
   15f04:	ldrb	r3, [r1]
   15f08:	cmp	r3, #125	; 0x7d
   15f0c:	beq	16048 <_start@@Base+0x392c>
   15f10:	mov	r8, #1
   15f14:	mov	r9, #0
   15f18:	cmp	r5, r1
   15f1c:	beq	15f40 <_start@@Base+0x3824>
   15f20:	ldrb	r3, [r1]
   15f24:	cmp	r3, #34	; 0x22
   15f28:	addeq	r1, r1, #1
   15f2c:	streq	r9, [r6, #12]
   15f30:	beq	15f40 <_start@@Base+0x3824>
   15f34:	cmp	r3, #46	; 0x2e
   15f38:	strne	r8, [r6, #12]
   15f3c:	beq	16060 <_start@@Base+0x3944>
   15f40:	mov	r2, r5
   15f44:	mov	r0, r6
   15f48:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   15f4c:	sub	r3, r5, r0
   15f50:	mov	r4, r0
   15f54:	cmp	r3, #1
   15f58:	ble	15f6c <_start@@Base+0x3850>
   15f5c:	ldrb	r3, [r0]
   15f60:	cmp	r3, #32
   15f64:	bhi	15f80 <_start@@Base+0x3864>
   15f68:	beq	15ff0 <_start@@Base+0x38d4>
   15f6c:	mov	r1, r4
   15f70:	mov	r2, r5
   15f74:	mov	r0, r6
   15f78:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15f7c:	mov	r4, r0
   15f80:	cmp	r5, r4
   15f84:	beq	15e90 <_start@@Base+0x3774>
   15f88:	ldrb	r3, [r4]
   15f8c:	cmp	r3, #44	; 0x2c
   15f90:	beq	16004 <_start@@Base+0x38e8>
   15f94:	cmp	r3, #125	; 0x7d
   15f98:	beq	15fb8 <_start@@Base+0x389c>
   15f9c:	mov	r1, r4
   15fa0:	mov	r3, #10
   15fa4:	mov	r2, r5
   15fa8:	mov	r0, r6
   15fac:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   15fb0:	mov	r4, r0
   15fb4:	b	15e90 <_start@@Base+0x3774>
   15fb8:	add	r1, r4, #1
   15fbc:	sub	r3, r5, r1
   15fc0:	cmp	r3, #1
   15fc4:	ble	15fdc <_start@@Base+0x38c0>
   15fc8:	ldrb	r3, [r4, #1]
   15fcc:	cmp	r3, #32
   15fd0:	movhi	r4, r1
   15fd4:	bhi	15e90 <_start@@Base+0x3774>
   15fd8:	beq	16078 <_start@@Base+0x395c>
   15fdc:	mov	r2, r5
   15fe0:	mov	r0, r6
   15fe4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   15fe8:	mov	r4, r0
   15fec:	b	15e90 <_start@@Base+0x3774>
   15ff0:	ldrb	r3, [r0, #1]
   15ff4:	cmp	r3, #32
   15ff8:	addhi	r4, r0, #1
   15ffc:	bls	15f6c <_start@@Base+0x3850>
   16000:	b	15f80 <_start@@Base+0x3864>
   16004:	add	r1, r4, #1
   16008:	sub	r3, r5, r1
   1600c:	cmp	r3, #1
   16010:	ble	16024 <_start@@Base+0x3908>
   16014:	ldrb	r3, [r4, #1]
   16018:	cmp	r3, #32
   1601c:	bhi	16034 <_start@@Base+0x3918>
   16020:	beq	1608c <_start@@Base+0x3970>
   16024:	mov	r2, r5
   16028:	mov	r0, r6
   1602c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   16030:	mov	r1, r0
   16034:	cmp	r5, r1
   16038:	beq	160a0 <_start@@Base+0x3984>
   1603c:	ldrb	r3, [r1]
   16040:	cmp	r3, #125	; 0x7d
   16044:	bne	15f18 <_start@@Base+0x37fc>
   16048:	add	r1, r1, #1
   1604c:	mov	r2, r5
   16050:	mov	r0, r6
   16054:	bl	13420 <_start@@Base+0xd04>
   16058:	mov	r4, r0
   1605c:	b	15e90 <_start@@Base+0x3774>
   16060:	mov	r3, #5
   16064:	mov	r2, r5
   16068:	mov	r0, r6
   1606c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16070:	mov	r1, r0
   16074:	b	15f40 <_start@@Base+0x3824>
   16078:	ldrb	r3, [r4, #2]
   1607c:	cmp	r3, #32
   16080:	addhi	r4, r4, #2
   16084:	bls	15fdc <_start@@Base+0x38c0>
   16088:	b	15e90 <_start@@Base+0x3774>
   1608c:	ldrb	r3, [r4, #2]
   16090:	cmp	r3, #32
   16094:	addhi	r1, r4, #2
   16098:	bls	16024 <_start@@Base+0x3908>
   1609c:	b	16034 <_start@@Base+0x3918>
   160a0:	mov	r3, #10
   160a4:	mov	r2, r5
   160a8:	mov	r1, r5
   160ac:	mov	r0, r6
   160b0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   160b4:	mov	r4, r0
   160b8:	b	15e90 <_start@@Base+0x3774>
   160bc:	ldrb	r3, [r4, #2]
   160c0:	cmp	r3, #32
   160c4:	addhi	r1, r4, #2
   160c8:	bls	15eec <_start@@Base+0x37d0>
   160cc:	b	15efc <_start@@Base+0x37e0>
   160d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160d4:	mov	r4, #0
   160d8:	mov	r5, #0
   160dc:	strd	r6, [sp, #8]
   160e0:	cmp	r1, r2
   160e4:	mov	r6, r2
   160e8:	strd	r8, [sp, #16]
   160ec:	mov	r8, r0
   160f0:	strd	sl, [sp, #24]
   160f4:	str	lr, [sp, #32]
   160f8:	sub	sp, sp, #44	; 0x2c
   160fc:	ldr	fp, [sp, #80]	; 0x50
   16100:	str	r3, [sp, #20]
   16104:	strd	r4, [fp]
   16108:	beq	162ac <_start@@Base+0x3b90>
   1610c:	ldrb	r3, [r1]
   16110:	cmp	r3, #34	; 0x22
   16114:	moveq	r3, #0
   16118:	addeq	r4, r1, #1
   1611c:	streq	r3, [r0, #12]
   16120:	beq	162c0 <_start@@Base+0x3ba4>
   16124:	cmp	r3, #46	; 0x2e
   16128:	movne	r3, #1
   1612c:	movne	r4, r1
   16130:	strne	r3, [r0, #12]
   16134:	beq	16288 <_start@@Base+0x3b6c>
   16138:	mov	r3, #0
   1613c:	add	sl, sp, #28
   16140:	add	r9, sp, #32
   16144:	str	r3, [sp, #8]
   16148:	str	r3, [sp, #12]
   1614c:	str	r3, [sp, #16]
   16150:	mov	r7, r4
   16154:	mov	r1, r4
   16158:	ldr	r5, [sp, #20]
   1615c:	b	16178 <_start@@Base+0x3a5c>
   16160:	cmp	r7, r0
   16164:	mov	r7, r0
   16168:	bne	161c0 <_start@@Base+0x3aa4>
   1616c:	ldr	r3, [r5, #4]!
   16170:	cmp	r3, #0
   16174:	beq	16240 <_start@@Base+0x3b24>
   16178:	add	r3, sp, #24
   1617c:	mov	r2, r6
   16180:	stm	sp, {r9, sl}
   16184:	mov	r0, r8
   16188:	ldr	r4, [r5]
   1618c:	blx	r4
   16190:	cmp	r6, r0
   16194:	mov	r1, r0
   16198:	bne	16160 <_start@@Base+0x3a44>
   1619c:	mov	r4, r0
   161a0:	mov	r0, r4
   161a4:	add	sp, sp, #44	; 0x2c
   161a8:	ldrd	r4, [sp]
   161ac:	ldrd	r6, [sp, #8]
   161b0:	ldrd	r8, [sp, #16]
   161b4:	ldrd	sl, [sp, #24]
   161b8:	add	sp, sp, #32
   161bc:	pop	{pc}		; (ldr pc, [sp], #4)
   161c0:	ldr	r3, [sp, #8]
   161c4:	mov	r4, r0
   161c8:	cmp	r3, #0
   161cc:	beq	161dc <_start@@Base+0x3ac0>
   161d0:	ldr	r3, [r8, #12]
   161d4:	cmp	r3, #0
   161d8:	bne	1631c <_start@@Base+0x3c00>
   161dc:	ldr	r1, [sp, #24]
   161e0:	ldrd	r2, [sp, #32]
   161e4:	cmp	r1, #0
   161e8:	beq	16258 <_start@@Base+0x3b3c>
   161ec:	cmp	r3, #-2147483648	; 0x80000000
   161f0:	cmpeq	r2, #0
   161f4:	bhi	16304 <_start@@Base+0x3be8>
   161f8:	rsbs	r2, r2, #0
   161fc:	rsc	r3, r3, #0
   16200:	strd	r2, [sp, #12]
   16204:	ldr	r2, [sp, #8]
   16208:	ldr	r3, [fp]
   1620c:	ldr	r0, [sp, #12]
   16210:	add	r2, r2, #1
   16214:	ldr	r1, [sp, #28]
   16218:	str	r2, [sp, #8]
   1621c:	ldr	r2, [fp, #4]
   16220:	adds	r3, r3, r0
   16224:	ldr	r0, [sp, #16]
   16228:	str	r3, [fp]
   1622c:	adc	r2, r2, r0
   16230:	cmp	r1, #0
   16234:	str	r2, [fp, #4]
   16238:	bne	16150 <_start@@Base+0x3a34>
   1623c:	b	161a0 <_start@@Base+0x3a84>
   16240:	mov	r2, r6
   16244:	mov	r0, r8
   16248:	mov	r3, #23
   1624c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16250:	mov	r4, r0
   16254:	b	161a0 <_start@@Base+0x3a84>
   16258:	cmp	r2, #0
   1625c:	sbcs	r1, r3, #0
   16260:	bge	16200 <_start@@Base+0x3ae4>
   16264:	mov	r3, #7
   16268:	mov	r2, r6
   1626c:	mov	r1, r4
   16270:	mov	r0, r8
   16274:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16278:	cmp	r6, r0
   1627c:	bne	16204 <_start@@Base+0x3ae8>
   16280:	mov	r4, r6
   16284:	b	161a0 <_start@@Base+0x3a84>
   16288:	mov	r3, #5
   1628c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16290:	ldr	r3, [r8, #12]
   16294:	mov	r4, r0
   16298:	cmp	r3, #0
   1629c:	beq	162c0 <_start@@Base+0x3ba4>
   162a0:	cmp	r6, r4
   162a4:	bne	16138 <_start@@Base+0x3a1c>
   162a8:	b	161a0 <_start@@Base+0x3a84>
   162ac:	ldr	r3, [r0, #12]
   162b0:	cmp	r3, #0
   162b4:	movne	r4, r1
   162b8:	bne	161a0 <_start@@Base+0x3a84>
   162bc:	mov	r4, r6
   162c0:	sub	r3, r6, r4
   162c4:	cmp	r3, #1
   162c8:	ble	162ec <_start@@Base+0x3bd0>
   162cc:	ldrb	r3, [r4]
   162d0:	cmp	r3, #32
   162d4:	bhi	162a0 <_start@@Base+0x3b84>
   162d8:	bne	162ec <_start@@Base+0x3bd0>
   162dc:	ldrb	r3, [r4, #1]
   162e0:	cmp	r3, #32
   162e4:	addhi	r4, r4, #1
   162e8:	bhi	162a0 <_start@@Base+0x3b84>
   162ec:	mov	r1, r4
   162f0:	mov	r2, r6
   162f4:	mov	r0, r8
   162f8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   162fc:	mov	r4, r0
   16300:	b	162a0 <_start@@Base+0x3b84>
   16304:	mov	r3, #8
   16308:	mov	r2, r6
   1630c:	mov	r1, r4
   16310:	mov	r0, r8
   16314:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16318:	b	16278 <_start@@Base+0x3b5c>
   1631c:	mov	r1, r4
   16320:	mov	r2, r6
   16324:	mov	r0, r8
   16328:	mov	r3, #14
   1632c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16330:	mov	r4, r0
   16334:	b	161a0 <_start@@Base+0x3a84>
   16338:	sub	ip, r2, r1
   1633c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16340:	cmp	ip, #8
   16344:	strd	r6, [sp, #8]
   16348:	strd	r8, [sp, #16]
   1634c:	strd	sl, [sp, #24]
   16350:	str	lr, [sp, #32]
   16354:	sub	sp, sp, #12
   16358:	bhi	1638c <_start@@Base+0x3c70>
   1635c:	sub	ip, ip, #1
   16360:	cmp	ip, #7
   16364:	ldrls	pc, [pc, ip, lsl #2]
   16368:	b	1653c <_start@@Base+0x3e20>
   1636c:	andeq	r6, r1, r8, ror #9
   16370:	strdeq	r6, [r1], -r4
   16374:	andeq	r6, r1, r0, lsl #10
   16378:	andeq	r6, r1, ip, lsl #10
   1637c:	andeq	r6, r1, r8, lsl r5
   16380:	andeq	r6, r1, r4, lsr #10
   16384:	andeq	r6, r1, r0, lsr r5
   16388:	andeq	r6, r1, ip, lsl #7
   1638c:	ldrb	r6, [r1, #7]
   16390:	mov	r7, #0
   16394:	mov	ip, r7
   16398:	ldrb	r4, [r1, #6]
   1639c:	orr	r6, r6, r4, lsl #8
   163a0:	ldrb	r4, [r1, #5]
   163a4:	orr	r6, r6, r4, lsl #16
   163a8:	ldrb	r4, [r1, #4]
   163ac:	orr	r6, r6, r4, lsl #24
   163b0:	ldrb	r4, [r1, #3]
   163b4:	orr	ip, ip, r4
   163b8:	ldrb	r4, [r1, #2]
   163bc:	orr	ip, ip, r4, lsl #8
   163c0:	ldrb	r4, [r1, #1]
   163c4:	orr	ip, ip, r4, lsl #16
   163c8:	mov	r5, r1
   163cc:	mov	r4, r2
   163d0:	mov	r2, r6
   163d4:	ldrb	r6, [r5]
   163d8:	mov	sl, r0
   163dc:	mov	fp, r3
   163e0:	add	r1, pc, #352	; 0x160
   163e4:	ldrd	r0, [r1]
   163e8:	orr	r3, ip, r6, lsl #24
   163ec:	mov	r6, #0
   163f0:	cmp	r3, r1
   163f4:	cmpeq	r2, r0
   163f8:	beq	1646c <_start@@Base+0x3d50>
   163fc:	add	r9, pc, #332	; 0x14c
   16400:	ldrd	r8, [r9]
   16404:	cmp	r3, r9
   16408:	cmpeq	r6, r8
   1640c:	beq	16430 <_start@@Base+0x3d14>
   16410:	mov	r0, r5
   16414:	add	sp, sp, #12
   16418:	ldrd	r4, [sp]
   1641c:	ldrd	r6, [sp, #8]
   16420:	ldrd	r8, [sp, #16]
   16424:	ldrd	sl, [sp, #24]
   16428:	add	sp, sp, #32
   1642c:	pop	{pc}		; (ldr pc, [sp], #4)
   16430:	ldr	r3, [sp, #52]	; 0x34
   16434:	mov	r2, r4
   16438:	mov	r0, sl
   1643c:	mov	r1, r5
   16440:	str	r3, [sp]
   16444:	mov	r3, #4
   16448:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1644c:	cmp	r5, r0
   16450:	beq	16414 <_start@@Base+0x3cf8>
   16454:	ldr	r1, [sp, #48]	; 0x30
   16458:	mov	r2, #0
   1645c:	mov	r3, #0
   16460:	strd	r2, [r1]
   16464:	str	r6, [fp]
   16468:	b	16414 <_start@@Base+0x3cf8>
   1646c:	mov	r1, r4
   16470:	add	r0, r5, #8
   16474:	bl	12810 <_start@@Base+0xf4>
   16478:	add	r3, pc, #216	; 0xd8
   1647c:	ldrd	r2, [r3]
   16480:	cmp	r1, r3
   16484:	cmpeq	r0, r2
   16488:	bne	16410 <_start@@Base+0x3cf4>
   1648c:	add	r7, r5, #16
   16490:	mov	r1, r4
   16494:	mov	r0, r7
   16498:	bl	12810 <_start@@Base+0xf4>
   1649c:	and	r3, r1, #-16777216	; 0xff000000
   164a0:	cmp	r3, #1694498816	; 0x65000000
   164a4:	cmpeq	r6, #0
   164a8:	bne	16410 <_start@@Base+0x3cf4>
   164ac:	ldr	r3, [sp, #52]	; 0x34
   164b0:	mov	r2, r4
   164b4:	mov	r0, sl
   164b8:	mov	r1, r7
   164bc:	str	r3, [sp]
   164c0:	mov	r3, #1
   164c4:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   164c8:	cmp	r7, r0
   164cc:	beq	16410 <_start@@Base+0x3cf4>
   164d0:	ldr	r1, [sp, #48]	; 0x30
   164d4:	mov	r2, #1
   164d8:	mov	r3, #0
   164dc:	strd	r2, [r1]
   164e0:	str	r6, [fp]
   164e4:	b	16414 <_start@@Base+0x3cf8>
   164e8:	mov	r6, #0
   164ec:	mov	ip, r6
   164f0:	b	163c8 <_start@@Base+0x3cac>
   164f4:	mov	r6, #0
   164f8:	mov	ip, r6
   164fc:	b	163c0 <_start@@Base+0x3ca4>
   16500:	mov	r6, #0
   16504:	mov	ip, r6
   16508:	b	163b8 <_start@@Base+0x3c9c>
   1650c:	mov	r6, #0
   16510:	mov	ip, r6
   16514:	b	163b0 <_start@@Base+0x3c94>
   16518:	mov	r6, #0
   1651c:	mov	ip, r6
   16520:	b	163a8 <_start@@Base+0x3c8c>
   16524:	mov	r6, #0
   16528:	mov	ip, r6
   1652c:	b	163a0 <_start@@Base+0x3c84>
   16530:	mov	r6, #0
   16534:	mov	r7, #0
   16538:	b	16394 <_start@@Base+0x3c78>
   1653c:	mov	r0, r1
   16540:	b	16414 <_start@@Base+0x3cf8>
   16544:	nop	{0}
   16548:	rsbvc	r6, r5, #116, 28	; 0x740
   1654c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   16550:	andeq	r0, r0, r0
   16554:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16558:	cmnvc	r0, #-1073741800	; 0xc0000018
   1655c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   16560:	strd	r4, [sp, #-16]!
   16564:	mov	r4, r2
   16568:	sub	r2, r2, r1
   1656c:	cmp	r2, #1
   16570:	mov	r5, r0
   16574:	str	r6, [sp, #8]
   16578:	mov	r6, r3
   1657c:	str	lr, [sp, #12]
   16580:	ble	16594 <_start@@Base+0x3e78>
   16584:	ldrb	r3, [r1]
   16588:	cmp	r3, #32
   1658c:	bhi	165a4 <_start@@Base+0x3e88>
   16590:	beq	16674 <_start@@Base+0x3f58>
   16594:	mov	r2, r4
   16598:	mov	r0, r5
   1659c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   165a0:	mov	r1, r0
   165a4:	cmp	r4, r1
   165a8:	moveq	r3, #0
   165ac:	moveq	r0, r4
   165b0:	streq	r3, [r6]
   165b4:	beq	16664 <_start@@Base+0x3f48>
   165b8:	ldrb	r3, [r1]
   165bc:	cmp	r3, #44	; 0x2c
   165c0:	beq	16638 <_start@@Base+0x3f1c>
   165c4:	mov	r3, #0
   165c8:	str	r3, [r6]
   165cc:	ldrb	r3, [r1]
   165d0:	cmp	r3, #125	; 0x7d
   165d4:	beq	165f8 <_start@@Base+0x3edc>
   165d8:	mov	r2, r4
   165dc:	mov	r0, r5
   165e0:	mov	r3, #10
   165e4:	ldrd	r4, [sp]
   165e8:	ldr	r6, [sp, #8]
   165ec:	ldr	lr, [sp, #12]
   165f0:	add	sp, sp, #16
   165f4:	b	27f68 <flatcc_json_parser_set_error@@Base>
   165f8:	add	r0, r1, #1
   165fc:	sub	r3, r4, r0
   16600:	cmp	r3, #1
   16604:	ble	16618 <_start@@Base+0x3efc>
   16608:	ldrb	r3, [r1, #1]
   1660c:	cmp	r3, #32
   16610:	bhi	16664 <_start@@Base+0x3f48>
   16614:	beq	166c0 <_start@@Base+0x3fa4>
   16618:	mov	r2, r4
   1661c:	mov	r1, r0
   16620:	ldr	r6, [sp, #8]
   16624:	mov	r0, r5
   16628:	ldrd	r4, [sp]
   1662c:	ldr	lr, [sp, #12]
   16630:	add	sp, sp, #16
   16634:	b	2806c <flatcc_json_parser_space_ext@@Base>
   16638:	add	r1, r1, #1
   1663c:	mov	r2, r4
   16640:	mov	r0, r5
   16644:	bl	13420 <_start@@Base+0xd04>
   16648:	cmp	r4, r0
   1664c:	beq	166d4 <_start@@Base+0x3fb8>
   16650:	ldrb	r3, [r0]
   16654:	cmp	r3, #125	; 0x7d
   16658:	movne	r3, #1
   1665c:	strne	r3, [r6]
   16660:	beq	16698 <_start@@Base+0x3f7c>
   16664:	ldrd	r4, [sp]
   16668:	ldr	r6, [sp, #8]
   1666c:	add	sp, sp, #12
   16670:	pop	{pc}		; (ldr pc, [sp], #4)
   16674:	ldrb	r3, [r1, #1]
   16678:	cmp	r3, #32
   1667c:	addhi	r1, r1, #1
   16680:	bhi	165a4 <_start@@Base+0x3e88>
   16684:	mov	r2, r4
   16688:	mov	r0, r5
   1668c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   16690:	mov	r1, r0
   16694:	b	165a4 <_start@@Base+0x3e88>
   16698:	mov	r3, #0
   1669c:	mov	r2, r4
   166a0:	ldr	lr, [sp, #12]
   166a4:	add	r1, r0, #1
   166a8:	mov	r0, r5
   166ac:	ldrd	r4, [sp]
   166b0:	str	r3, [r6]
   166b4:	ldr	r6, [sp, #8]
   166b8:	add	sp, sp, #16
   166bc:	b	13420 <_start@@Base+0xd04>
   166c0:	ldrb	r3, [r1, #2]
   166c4:	cmp	r3, #32
   166c8:	addhi	r0, r1, #2
   166cc:	bls	16618 <_start@@Base+0x3efc>
   166d0:	b	16664 <_start@@Base+0x3f48>
   166d4:	mov	ip, #0
   166d8:	mov	r0, r5
   166dc:	mov	r3, #10
   166e0:	mov	r2, r4
   166e4:	mov	r1, r4
   166e8:	str	ip, [r6]
   166ec:	b	165e4 <_start@@Base+0x3ec8>
   166f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166f4:	mov	ip, r3
   166f8:	strd	r6, [sp, #8]
   166fc:	strd	r8, [sp, #16]
   16700:	mov	r9, r1
   16704:	mov	r1, #4
   16708:	strd	sl, [sp, #24]
   1670c:	mov	fp, r0
   16710:	mov	sl, r2
   16714:	str	lr, [sp, #32]
   16718:	sub	sp, sp, #332	; 0x14c
   1671c:	ldr	r0, [r0]
   16720:	str	r3, [sp, #272]	; 0x110
   16724:	mov	r3, #0
   16728:	str	r3, [ip]
   1672c:	bl	23668 <flatcc_builder_start_table@@Base>
   16730:	cmp	r0, #0
   16734:	beq	16770 <_start@@Base+0x4054>
   16738:	mov	r1, r9
   1673c:	mov	r2, sl
   16740:	mov	r0, fp
   16744:	mov	r3, #33	; 0x21
   16748:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1674c:	mov	r9, r0
   16750:	mov	r0, r9
   16754:	add	sp, sp, #332	; 0x14c
   16758:	ldrd	r4, [sp]
   1675c:	ldrd	r6, [sp, #8]
   16760:	ldrd	r8, [sp, #16]
   16764:	ldrd	sl, [sp, #24]
   16768:	add	sp, sp, #32
   1676c:	pop	{pc}		; (ldr pc, [sp], #4)
   16770:	add	r0, sp, #296	; 0x128
   16774:	mov	r3, #1
   16778:	mov	r2, sl
   1677c:	mov	r1, r9
   16780:	str	r0, [sp]
   16784:	mov	r0, fp
   16788:	bl	2c008 <flatcc_json_parser_prepare_unions@@Base>
   1678c:	cmp	sl, r0
   16790:	beq	16738 <_start@@Base+0x401c>
   16794:	add	r3, sp, #292	; 0x124
   16798:	mov	r1, r9
   1679c:	mov	r2, sl
   167a0:	mov	r0, fp
   167a4:	bl	13dcc <_start@@Base+0x16b0>
   167a8:	ldr	r3, [sp, #292]	; 0x124
   167ac:	mov	r4, r0
   167b0:	cmp	r3, #0
   167b4:	beq	16968 <_start@@Base+0x424c>
   167b8:	mov	r5, fp
   167bc:	mov	r7, sl
   167c0:	cmp	r7, r4
   167c4:	beq	169a0 <_start@@Base+0x4284>
   167c8:	ldrb	r3, [r4]
   167cc:	cmp	r3, #34	; 0x22
   167d0:	moveq	r3, #0
   167d4:	addeq	r4, r4, #1
   167d8:	streq	r3, [r5, #12]
   167dc:	beq	167f0 <_start@@Base+0x40d4>
   167e0:	cmp	r3, #46	; 0x2e
   167e4:	movne	r3, #1
   167e8:	strne	r3, [r5, #12]
   167ec:	beq	185dc <_start@@Base+0x5ec0>
   167f0:	sub	ip, r7, r4
   167f4:	cmp	ip, #8
   167f8:	bls	16970 <_start@@Base+0x4254>
   167fc:	ldrb	r2, [r4, #7]
   16800:	mov	r3, #0
   16804:	mov	lr, r3
   16808:	ldrb	r0, [r4, #6]
   1680c:	orr	r2, r2, r0, lsl #8
   16810:	ldrb	r8, [r4, #5]
   16814:	orr	r2, r2, r8, lsl #16
   16818:	ldrb	r8, [r4, #4]
   1681c:	orr	r2, r2, r8, lsl #24
   16820:	ldrb	r8, [r4, #3]
   16824:	orr	lr, lr, r8
   16828:	ldrb	r0, [r4]
   1682c:	str	r2, [sp, #40]	; 0x28
   16830:	ldrb	r8, [r4, #1]
   16834:	add	r3, pc, #796	; 0x31c
   16838:	ldrd	r2, [r3]
   1683c:	lsl	r0, r0, #24
   16840:	orr	r8, r0, r8, lsl #16
   16844:	ldrb	r0, [r4, #2]
   16848:	orr	r6, lr, r0, lsl #8
   1684c:	orr	r1, r8, r6
   16850:	str	r1, [sp, #44]	; 0x2c
   16854:	ldrd	r0, [sp, #40]	; 0x28
   16858:	cmp	r1, r3
   1685c:	cmpeq	r0, r2
   16860:	beq	16a18 <_start@@Base+0x42fc>
   16864:	ldrd	r0, [sp, #40]	; 0x28
   16868:	add	r3, pc, #752	; 0x2f0
   1686c:	ldrd	r2, [r3]
   16870:	bic	lr, r0, #255	; 0xff
   16874:	str	lr, [sp, #104]	; 0x68
   16878:	str	r1, [sp, #108]	; 0x6c
   1687c:	ldrd	r0, [sp, #104]	; 0x68
   16880:	cmp	r1, r3
   16884:	cmpeq	r0, r2
   16888:	bne	16b74 <_start@@Base+0x4458>
   1688c:	cmp	ip, #7
   16890:	ble	169a4 <_start@@Base+0x4288>
   16894:	mov	r3, #7
   16898:	mov	r2, r7
   1689c:	mov	r1, r4
   168a0:	mov	r0, r5
   168a4:	bl	13ccc <_start@@Base+0x15b0>
   168a8:	cmp	r0, r4
   168ac:	beq	169a4 <_start@@Base+0x4288>
   168b0:	ldr	ip, [sp, #296]	; 0x128
   168b4:	mov	lr, #3
   168b8:	movw	r3, #64180	; 0xfab4
   168bc:	movt	r3, #1
   168c0:	mov	r1, r0
   168c4:	mov	r2, r7
   168c8:	mov	r0, r5
   168cc:	str	lr, [sp]
   168d0:	str	ip, [sp, #4]
   168d4:	str	r3, [sp, #8]
   168d8:	mov	r3, #0
   168dc:	bl	2c538 <flatcc_json_parser_union_vector@@Base>
   168e0:	mov	fp, r0
   168e4:	sub	r3, r7, fp
   168e8:	cmp	r3, #1
   168ec:	ble	16900 <_start@@Base+0x41e4>
   168f0:	ldrb	r3, [fp]
   168f4:	cmp	r3, #32
   168f8:	bhi	16914 <_start@@Base+0x41f8>
   168fc:	beq	17f48 <_start@@Base+0x582c>
   16900:	mov	r1, fp
   16904:	mov	r2, r7
   16908:	mov	r0, r5
   1690c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   16910:	mov	fp, r0
   16914:	cmp	r7, fp
   16918:	beq	17edc <_start@@Base+0x57c0>
   1691c:	ldrb	r3, [fp]
   16920:	cmp	r3, #44	; 0x2c
   16924:	beq	17f5c <_start@@Base+0x5840>
   16928:	mov	r3, #0
   1692c:	str	r3, [sp, #292]	; 0x124
   16930:	ldrb	r3, [fp]
   16934:	cmp	r3, #125	; 0x7d
   16938:	beq	16b20 <_start@@Base+0x4404>
   1693c:	mov	r3, #10
   16940:	mov	r1, fp
   16944:	mov	r2, r7
   16948:	mov	r0, r5
   1694c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16950:	ldr	r3, [sp, #292]	; 0x124
   16954:	mov	r4, r0
   16958:	cmp	r3, #0
   1695c:	bne	167c0 <_start@@Base+0x40a4>
   16960:	mov	fp, r5
   16964:	mov	sl, r7
   16968:	mov	r9, r4
   1696c:	b	17ef0 <_start@@Base+0x57d4>
   16970:	sub	r3, ip, #1
   16974:	cmp	r3, #7
   16978:	ldrls	pc, [pc, r3, lsl #2]
   1697c:	b	169a4 <_start@@Base+0x4288>
   16980:	andeq	r6, r1, r4, lsr #19
   16984:	andeq	r6, r1, ip, ror #19
   16988:	andeq	r6, r1, r0, ror #19
   1698c:	ldrdeq	r6, [r1], -r4
   16990:	andeq	r6, r1, r8, asr #19
   16994:			; <UNDEFINED> instruction: 0x000169bc
   16998:	andeq	r6, r1, ip, lsl #20
   1699c:	strdeq	r6, [r1], -ip
   169a0:	mov	r4, r7
   169a4:	mov	r1, r4
   169a8:	mov	r2, r7
   169ac:	mov	r0, r5
   169b0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   169b4:	mov	fp, r0
   169b8:	b	168e4 <_start@@Base+0x41c8>
   169bc:	mov	r2, #0
   169c0:	mov	lr, r2
   169c4:	b	16810 <_start@@Base+0x40f4>
   169c8:	mov	r2, #0
   169cc:	mov	lr, r2
   169d0:	b	16818 <_start@@Base+0x40fc>
   169d4:	mov	r2, #0
   169d8:	mov	lr, r2
   169dc:	b	16820 <_start@@Base+0x4104>
   169e0:	mov	r2, #0
   169e4:	mov	lr, r2
   169e8:	b	16828 <_start@@Base+0x410c>
   169ec:	ldrb	r2, [r4, #1]
   169f0:	mov	r1, #0
   169f4:	ldrb	r0, [r4]
   169f8:	str	r1, [sp, #40]	; 0x28
   169fc:	lsl	r2, r2, #16
   16a00:	orr	r3, r2, r0, lsl #24
   16a04:	str	r3, [sp, #44]	; 0x2c
   16a08:	b	16864 <_start@@Base+0x4148>
   16a0c:	mov	r2, #0
   16a10:	mov	r3, #0
   16a14:	b	16804 <_start@@Base+0x40e8>
   16a18:	add	r8, r4, #8
   16a1c:	sub	ip, r7, r8
   16a20:	cmp	ip, #8
   16a24:	bhi	16b04 <_start@@Base+0x43e8>
   16a28:	sub	r3, ip, #2
   16a2c:	cmp	r3, #6
   16a30:	ldrls	pc, [pc, r3, lsl #2]
   16a34:	b	171c0 <_start@@Base+0x4aa4>
   16a38:	andeq	r6, r1, r8, lsl fp
   16a3c:	andeq	r6, r1, r0, lsl fp
   16a40:	andeq	r6, r1, r4, asr sl
   16a44:	andeq	r6, r1, r4, asr sl
   16a48:	andeq	r6, r1, r4, asr sl
   16a4c:	andeq	r6, r1, r4, lsl #22
   16a50:	andeq	r6, r1, r4, lsl #22
   16a54:	mov	lr, #0
   16a58:	ldrb	r2, [r4, #11]
   16a5c:	orr	lr, lr, r2
   16a60:	ldrb	r2, [r4, #10]
   16a64:	orr	lr, lr, r2, lsl #8
   16a68:	ldrb	r0, [r4, #9]
   16a6c:	mov	r6, #0
   16a70:	str	r6, [sp, #152]	; 0x98
   16a74:	add	r3, pc, #236	; 0xec
   16a78:	ldrd	r2, [r3]
   16a7c:	orr	lr, lr, r0, lsl #16
   16a80:	ldrb	r0, [r4, #8]
   16a84:	orr	r1, lr, r0, lsl #24
   16a88:	str	r1, [sp, #156]	; 0x9c
   16a8c:	ldrd	r0, [sp, #152]	; 0x98
   16a90:	cmp	r1, r3
   16a94:	cmpeq	r0, r2
   16a98:	bne	171c0 <_start@@Base+0x4aa4>
   16a9c:	cmp	ip, #4
   16aa0:	ble	171c0 <_start@@Base+0x4aa4>
   16aa4:	mov	r1, r8
   16aa8:	mov	r3, #4
   16aac:	mov	r2, r7
   16ab0:	mov	r0, r5
   16ab4:	bl	13ccc <_start@@Base+0x15b0>
   16ab8:	cmp	r8, r0
   16abc:	mov	r1, r0
   16ac0:	beq	171c0 <_start@@Base+0x4aa4>
   16ac4:	ldr	lr, [pc, #164]	; 16b70 <_start@@Base+0x4454>
   16ac8:	mov	r0, #3
   16acc:	movw	r2, #10500	; 0x2904
   16ad0:	movt	r2, #1
   16ad4:	movw	r4, #64180	; 0xfab4
   16ad8:	movt	r4, #1
   16adc:	ldr	ip, [sp, #296]	; 0x128
   16ae0:	mov	r3, r6
   16ae4:	str	r2, [sp, #16]
   16ae8:	mov	r2, r7
   16aec:	stm	sp, {r0, ip, lr}
   16af0:	mov	r0, r5
   16af4:	str	r4, [sp, #12]
   16af8:	bl	2c66c <flatcc_json_parser_union_type_vector@@Base>
   16afc:	mov	fp, r0
   16b00:	b	168e4 <_start@@Base+0x41c8>
   16b04:	mov	r3, #0
   16b08:	mov	lr, r3
   16b0c:	b	16a58 <_start@@Base+0x433c>
   16b10:	mov	lr, #0
   16b14:	b	16a60 <_start@@Base+0x4344>
   16b18:	mov	lr, #0
   16b1c:	b	16a68 <_start@@Base+0x434c>
   16b20:	add	r1, fp, #1
   16b24:	sub	r3, r7, r1
   16b28:	cmp	r3, #1
   16b2c:	ble	16b40 <_start@@Base+0x4424>
   16b30:	ldrb	r3, [fp, #1]
   16b34:	cmp	r3, #32
   16b38:	bhi	18ef0 <_start@@Base+0x67d4>
   16b3c:	beq	18fc0 <_start@@Base+0x68a4>
   16b40:	mov	r2, r7
   16b44:	mov	r0, r5
   16b48:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   16b4c:	mov	r4, r0
   16b50:	ldr	r3, [sp, #292]	; 0x124
   16b54:	b	16958 <_start@@Base+0x423c>
   16b58:	cmnvs	lr, pc, asr r9
   16b5c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   16b60:	cmnvs	lr, r0, lsl #18
   16b64:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   16b68:	andeq	r0, r0, r0
   16b6c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   16b70:	andeq	r0, r4, r4, lsl #1
   16b74:	ldrd	r0, [sp, #40]	; 0x28
   16b78:	lsr	r3, r0, #16
   16b7c:	str	r3, [sp, #136]	; 0x88
   16b80:	ldr	lr, [sp, #136]	; 0x88
   16b84:	str	r1, [sp, #140]	; 0x8c
   16b88:	add	r3, pc, #1000	; 0x3e8
   16b8c:	ldrd	r2, [r3]
   16b90:	lsl	lr, lr, #16
   16b94:	str	lr, [sp, #136]	; 0x88
   16b98:	ldrd	r0, [sp, #136]	; 0x88
   16b9c:	cmp	r1, r3
   16ba0:	cmpeq	r0, r2
   16ba4:	bne	18050 <_start@@Base+0x5934>
   16ba8:	cmp	ip, #6
   16bac:	ble	169a4 <_start@@Base+0x4288>
   16bb0:	mov	r3, #6
   16bb4:	mov	r2, r7
   16bb8:	mov	r1, r4
   16bbc:	mov	r0, r5
   16bc0:	bl	13ccc <_start@@Base+0x15b0>
   16bc4:	cmp	r0, r4
   16bc8:	mov	r6, r0
   16bcc:	beq	169a4 <_start@@Base+0x4288>
   16bd0:	mov	r1, #3
   16bd4:	ldr	r0, [r5]
   16bd8:	bl	23668 <flatcc_builder_start_table@@Base>
   16bdc:	cmp	r0, #0
   16be0:	bne	17fe8 <_start@@Base+0x58cc>
   16be4:	add	r3, sp, #300	; 0x12c
   16be8:	mov	r1, r6
   16bec:	mov	r2, r7
   16bf0:	mov	r0, r5
   16bf4:	bl	13dcc <_start@@Base+0x16b0>
   16bf8:	ldr	r3, [sp, #300]	; 0x12c
   16bfc:	cmp	r3, #0
   16c00:	beq	196ac <_start@@Base+0x6f90>
   16c04:	cmp	r7, r0
   16c08:	beq	16c34 <_start@@Base+0x4518>
   16c0c:	ldrb	r3, [r0]
   16c10:	cmp	r3, #34	; 0x22
   16c14:	moveq	r3, #0
   16c18:	addeq	r0, r0, #1
   16c1c:	streq	r3, [r5, #12]
   16c20:	beq	16c34 <_start@@Base+0x4518>
   16c24:	cmp	r3, #46	; 0x2e
   16c28:	movne	r3, #1
   16c2c:	strne	r3, [r5, #12]
   16c30:	beq	17ff8 <_start@@Base+0x58dc>
   16c34:	sub	r3, r7, r0
   16c38:	cmp	r3, #8
   16c3c:	bhi	16c70 <_start@@Base+0x4554>
   16c40:	sub	r3, r3, #1
   16c44:	cmp	r3, #7
   16c48:	ldrls	pc, [pc, r3, lsl #2]
   16c4c:	b	17010 <_start@@Base+0x48f4>
   16c50:	andeq	r6, r1, r8, lsr sp
   16c54:	andeq	r6, r1, ip, lsr #26
   16c58:	andeq	r6, r1, r0, lsr #26
   16c5c:	andeq	r6, r1, r0, asr sp
   16c60:	andeq	r6, r1, r4, asr #26
   16c64:	andeq	r6, r1, ip, asr sp
   16c68:	andeq	r6, r1, r4, lsl sp
   16c6c:	andeq	r6, r1, r0, ror ip
   16c70:	ldrb	sl, [r0, #7]
   16c74:	mov	fp, #0
   16c78:	mov	r3, fp
   16c7c:	ldrb	r8, [r0, #6]
   16c80:	orr	r2, sl, r8, lsl #8
   16c84:	ldrb	r8, [r0, #5]
   16c88:	orr	r2, r2, r8, lsl #16
   16c8c:	ldrb	r8, [r0, #4]
   16c90:	orr	r2, r2, r8, lsl #24
   16c94:	ldrb	sl, [r0, #3]
   16c98:	orr	r3, r3, sl
   16c9c:	ldrb	sl, [r0, #2]
   16ca0:	orr	sl, r3, sl, lsl #8
   16ca4:	ldrb	r8, [r0, #1]
   16ca8:	orr	sl, sl, r8, lsl #16
   16cac:	str	r2, [sp, #48]	; 0x30
   16cb0:	ldrb	r2, [r0]
   16cb4:	add	r9, pc, #708	; 0x2c4
   16cb8:	ldrd	r8, [r9]
   16cbc:	orr	r3, sl, r2, lsl #24
   16cc0:	str	r3, [sp, #52]	; 0x34
   16cc4:	ldrd	r2, [sp, #48]	; 0x30
   16cc8:	cmp	r3, r9
   16ccc:	cmpeq	r2, r8
   16cd0:	bne	17010 <_start@@Base+0x48f4>
   16cd4:	add	r1, r0, #8
   16cd8:	sub	r3, r7, r1
   16cdc:	cmp	r3, #8
   16ce0:	bhi	16d68 <_start@@Base+0x464c>
   16ce4:	sub	r3, r3, #1
   16ce8:	cmp	r3, #7
   16cec:	ldrls	pc, [pc, r3, lsl #2]
   16cf0:	b	17014 <_start@@Base+0x48f8>
   16cf4:	andeq	r6, r1, r4, asr lr
   16cf8:	andeq	r6, r1, r8, asr #28
   16cfc:	andeq	r6, r1, ip, lsr lr
   16d00:	andeq	r6, r1, r0, lsr lr
   16d04:	andeq	r6, r1, r4, lsr #28
   16d08:	andeq	r6, r1, r8, lsl lr
   16d0c:	andeq	r6, r1, ip, lsl #28
   16d10:	andeq	r6, r1, r8, ror #26
   16d14:	mov	sl, #0
   16d18:	mov	fp, #0
   16d1c:	b	16c78 <_start@@Base+0x455c>
   16d20:	mov	r2, #0
   16d24:	mov	r3, r2
   16d28:	b	16c9c <_start@@Base+0x4580>
   16d2c:	mov	r2, #0
   16d30:	mov	sl, r2
   16d34:	b	16ca4 <_start@@Base+0x4588>
   16d38:	mov	r2, #0
   16d3c:	mov	sl, r2
   16d40:	b	16cac <_start@@Base+0x4590>
   16d44:	mov	r2, #0
   16d48:	mov	r3, r2
   16d4c:	b	16c8c <_start@@Base+0x4570>
   16d50:	mov	r2, #0
   16d54:	mov	r3, r2
   16d58:	b	16c94 <_start@@Base+0x4578>
   16d5c:	mov	r2, #0
   16d60:	mov	r3, r2
   16d64:	b	16c84 <_start@@Base+0x4568>
   16d68:	ldrb	sl, [r0, #15]
   16d6c:	mov	fp, #0
   16d70:	mov	r3, fp
   16d74:	ldrb	r8, [r0, #14]
   16d78:	orr	r2, sl, r8, lsl #8
   16d7c:	ldrb	r8, [r0, #13]
   16d80:	orr	r2, r2, r8, lsl #16
   16d84:	ldrb	r8, [r0, #12]
   16d88:	orr	r8, r2, r8, lsl #24
   16d8c:	ldrb	sl, [r0, #11]
   16d90:	orr	r3, r3, sl
   16d94:	ldrb	sl, [r0, #10]
   16d98:	orr	r3, r3, sl, lsl #8
   16d9c:	ldrb	sl, [r0, #9]
   16da0:	orr	sl, r3, sl, lsl #16
   16da4:	ldrb	r2, [r0, #8]
   16da8:	str	r8, [sp, #80]	; 0x50
   16dac:	add	r9, pc, #468	; 0x1d4
   16db0:	ldrd	r8, [r9]
   16db4:	orr	r3, sl, r2, lsl #24
   16db8:	str	r3, [sp, #84]	; 0x54
   16dbc:	ldrd	r2, [sp, #80]	; 0x50
   16dc0:	cmp	r3, r9
   16dc4:	cmpeq	r2, r8
   16dc8:	bne	17014 <_start@@Base+0x48f8>
   16dcc:	add	r4, r0, #16
   16dd0:	sub	r6, r7, r4
   16dd4:	cmp	r6, #8
   16dd8:	bhi	16e60 <_start@@Base+0x4744>
   16ddc:	sub	r3, r6, #1
   16de0:	cmp	r3, #7
   16de4:	ldrls	pc, [pc, r3, lsl #2]
   16de8:	b	17914 <_start@@Base+0x51f8>
   16dec:	andeq	r6, r1, ip, ror #31
   16df0:			; <UNDEFINED> instruction: 0x00016fb0
   16df4:	andeq	r6, r1, r0, ror #31
   16df8:	ldrdeq	r6, [r1], -r4
   16dfc:	andeq	r6, r1, r8, asr #31
   16e00:			; <UNDEFINED> instruction: 0x00016fbc
   16e04:	andeq	r6, r1, ip, ror #30
   16e08:	andeq	r6, r1, r0, ror #28
   16e0c:	mov	sl, #0
   16e10:	mov	fp, #0
   16e14:	b	16d70 <_start@@Base+0x4654>
   16e18:	mov	r2, #0
   16e1c:	mov	r3, r2
   16e20:	b	16d7c <_start@@Base+0x4660>
   16e24:	mov	r2, #0
   16e28:	mov	r3, r2
   16e2c:	b	16d84 <_start@@Base+0x4668>
   16e30:	mov	r8, #0
   16e34:	mov	r3, r8
   16e38:	b	16d8c <_start@@Base+0x4670>
   16e3c:	mov	r8, #0
   16e40:	mov	r3, r8
   16e44:	b	16d94 <_start@@Base+0x4678>
   16e48:	mov	r8, #0
   16e4c:	mov	r3, r8
   16e50:	b	16d9c <_start@@Base+0x4680>
   16e54:	mov	r8, #0
   16e58:	mov	sl, r8
   16e5c:	b	16da4 <_start@@Base+0x4688>
   16e60:	ldrb	r2, [r0, #23]
   16e64:	mov	r3, #0
   16e68:	mov	sl, r3
   16e6c:	ldrb	r8, [r0, #22]
   16e70:	orr	r2, r2, r8, lsl #8
   16e74:	ldrb	r8, [r0, #21]
   16e78:	orr	r2, r2, r8, lsl #16
   16e7c:	ldrb	r8, [r0, #20]
   16e80:	orr	ip, r2, r8, lsl #24
   16e84:	ldrb	r8, [r0, #19]
   16e88:	orr	r3, sl, r8
   16e8c:	ldrb	sl, [r0, #18]
   16e90:	orr	r3, r3, sl, lsl #8
   16e94:	lsr	r2, ip, #16
   16e98:	ldrb	sl, [r0, #17]
   16e9c:	ldrb	r0, [r0, #16]
   16ea0:	str	r2, [sp, #96]	; 0x60
   16ea4:	ldr	lr, [sp, #96]	; 0x60
   16ea8:	orr	sl, r3, sl, lsl #16
   16eac:	add	r3, pc, #220	; 0xdc
   16eb0:	ldrd	r2, [r3]
   16eb4:	orr	sl, sl, r0, lsl #24
   16eb8:	lsl	lr, lr, #16
   16ebc:	str	lr, [sp, #96]	; 0x60
   16ec0:	str	sl, [sp, #100]	; 0x64
   16ec4:	ldrd	r0, [sp, #96]	; 0x60
   16ec8:	cmp	r1, r3
   16ecc:	cmpeq	r0, r2
   16ed0:	beq	1792c <_start@@Base+0x5210>
   16ed4:	and	r1, ip, #-16777216	; 0xff000000
   16ed8:	add	r3, pc, #184	; 0xb8
   16edc:	ldrd	r2, [r3]
   16ee0:	str	r1, [sp, #144]	; 0x90
   16ee4:	str	sl, [sp, #148]	; 0x94
   16ee8:	ldrd	r0, [sp, #144]	; 0x90
   16eec:	cmp	r1, r3
   16ef0:	cmpeq	r0, r2
   16ef4:	bne	171d8 <_start@@Base+0x4abc>
   16ef8:	cmp	r6, #5
   16efc:	ble	171d8 <_start@@Base+0x4abc>
   16f00:	mov	r2, r7
   16f04:	mov	r1, r4
   16f08:	mov	r0, r5
   16f0c:	bl	13be4 <_start@@Base+0x14c8>
   16f10:	cmp	r4, r0
   16f14:	mov	r8, r0
   16f18:	beq	171d8 <_start@@Base+0x4abc>
   16f1c:	mov	r1, #9
   16f20:	ldr	r0, [r5]
   16f24:	bl	23668 <flatcc_builder_start_table@@Base>
   16f28:	cmp	r0, #0
   16f2c:	beq	1862c <_start@@Base+0x5f10>
   16f30:	mov	fp, r5
   16f34:	mov	sl, r7
   16f38:	mov	r1, r8
   16f3c:	mov	r3, #33	; 0x21
   16f40:	mov	r2, sl
   16f44:	mov	r0, fp
   16f48:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16f4c:	mov	r9, r0
   16f50:	mov	r1, r9
   16f54:	mov	r3, #33	; 0x21
   16f58:	mov	r2, sl
   16f5c:	mov	r0, fp
   16f60:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   16f64:	mov	r9, r0
   16f68:	b	16738 <_start@@Base+0x401c>
   16f6c:	mov	r2, #0
   16f70:	mov	r3, #0
   16f74:	b	16e68 <_start@@Base+0x474c>
   16f78:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   16f7c:	rsbsvc	r6, r2, r6, ror #10
   16f80:	bvs	1cf2d40 <__bss_end__@@Base+0x1cb297c>
   16f84:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16f88:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   16f8c:	rsbsvc	r6, r2, r6, ror #10
   16f90:	ldrvs	r0, [r2, -r0]!
   16f94:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   16f98:	strvs	r0, [r0, -r0]
   16f9c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   16fa0:	ldrvs	r0, [r3, -r0]!
   16fa4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   16fa8:	svcpl	0x00626262
   16fac:	cmnvs	r1, r1, ror #2
   16fb0:	mov	ip, #0
   16fb4:	mov	r3, ip
   16fb8:	b	16e94 <_start@@Base+0x4778>
   16fbc:	mov	r2, #0
   16fc0:	mov	sl, r2
   16fc4:	b	16e74 <_start@@Base+0x4758>
   16fc8:	mov	r2, #0
   16fcc:	mov	sl, r2
   16fd0:	b	16e7c <_start@@Base+0x4760>
   16fd4:	mov	ip, #0
   16fd8:	mov	sl, ip
   16fdc:	b	16e84 <_start@@Base+0x4768>
   16fe0:	mov	ip, #0
   16fe4:	mov	r3, ip
   16fe8:	b	16e8c <_start@@Base+0x4770>
   16fec:	ldrb	r2, [r0, #16]
   16ff0:	lsl	r3, r2, #24
   16ff4:	str	r3, [sp, #100]	; 0x64
   16ff8:	mov	r3, #0
   16ffc:	str	r3, [sp, #96]	; 0x60
   17000:	ldrd	r2, [sp, #96]	; 0x60
   17004:	mov	ip, r2
   17008:	mov	sl, r3
   1700c:	b	16ed4 <_start@@Base+0x47b8>
   17010:	mov	r1, r0
   17014:	mov	r2, r7
   17018:	mov	r0, r5
   1701c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   17020:	mov	fp, r0
   17024:	sub	r3, r7, fp
   17028:	cmp	r3, #1
   1702c:	ble	17040 <_start@@Base+0x4924>
   17030:	ldrb	r3, [fp]
   17034:	cmp	r3, #32
   17038:	bhi	17054 <_start@@Base+0x4938>
   1703c:	beq	1715c <_start@@Base+0x4a40>
   17040:	mov	r1, fp
   17044:	mov	r2, r7
   17048:	mov	r0, r5
   1704c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17050:	mov	fp, r0
   17054:	cmp	r7, fp
   17058:	beq	170cc <_start@@Base+0x49b0>
   1705c:	ldrb	r3, [fp]
   17060:	cmp	r3, #44	; 0x2c
   17064:	beq	17170 <_start@@Base+0x4a54>
   17068:	mov	r3, #0
   1706c:	str	r3, [sp, #300]	; 0x12c
   17070:	ldrb	r3, [fp]
   17074:	cmp	r3, #125	; 0x7d
   17078:	beq	17098 <_start@@Base+0x497c>
   1707c:	mov	r3, #10
   17080:	mov	r1, fp
   17084:	mov	r2, r7
   17088:	mov	r0, r5
   1708c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   17090:	ldr	r3, [sp, #300]	; 0x12c
   17094:	b	16bfc <_start@@Base+0x44e0>
   17098:	add	r1, fp, #1
   1709c:	sub	r3, r7, r1
   170a0:	cmp	r3, #1
   170a4:	ble	170b8 <_start@@Base+0x499c>
   170a8:	ldrb	r3, [fp, #1]
   170ac:	cmp	r3, #32
   170b0:	bhi	18040 <_start@@Base+0x5924>
   170b4:	beq	184e4 <_start@@Base+0x5dc8>
   170b8:	mov	r2, r7
   170bc:	mov	r0, r5
   170c0:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   170c4:	ldr	r3, [sp, #300]	; 0x12c
   170c8:	b	16bfc <_start@@Base+0x44e0>
   170cc:	mov	r3, #0
   170d0:	str	r3, [sp, #300]	; 0x12c
   170d4:	ldr	r1, [r5, #24]
   170d8:	cmp	r1, #0
   170dc:	bne	1714c <_start@@Base+0x4a30>
   170e0:	ldr	r0, [r5]
   170e4:	str	r1, [sp, #276]	; 0x114
   170e8:	bl	23fe8 <flatcc_builder_end_table@@Base>
   170ec:	subs	r4, r0, #0
   170f0:	ldr	r1, [sp, #276]	; 0x114
   170f4:	beq	1714c <_start@@Base+0x4a30>
   170f8:	ldr	r0, [r5]
   170fc:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   17100:	cmp	r0, #0
   17104:	beq	19684 <_start@@Base+0x6f68>
   17108:	str	r4, [r0]
   1710c:	b	168e4 <_start@@Base+0x41c8>
   17110:	mov	r3, #0
   17114:	str	r3, [sp, #308]	; 0x134
   17118:	ldr	r1, [r5, #24]
   1711c:	cmp	r1, #0
   17120:	bne	176bc <_start@@Base+0x4fa0>
   17124:	ldr	r0, [r5]
   17128:	str	r1, [sp, #276]	; 0x114
   1712c:	bl	23fe8 <flatcc_builder_end_table@@Base>
   17130:	subs	r4, r0, #0
   17134:	ldr	r1, [sp, #276]	; 0x114
   17138:	beq	176bc <_start@@Base+0x4fa0>
   1713c:	ldr	r0, [r5]
   17140:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   17144:	cmp	r0, #0
   17148:	bne	17690 <_start@@Base+0x4f74>
   1714c:	mov	r9, fp
   17150:	mov	sl, r7
   17154:	mov	fp, r5
   17158:	b	16f50 <_start@@Base+0x4834>
   1715c:	ldrb	r3, [fp, #1]
   17160:	cmp	r3, #32
   17164:	addhi	fp, fp, #1
   17168:	bls	17040 <_start@@Base+0x4924>
   1716c:	b	17054 <_start@@Base+0x4938>
   17170:	add	r0, fp, #1
   17174:	sub	r3, r7, r0
   17178:	cmp	r3, #1
   1717c:	ble	17190 <_start@@Base+0x4a74>
   17180:	ldrb	r3, [fp, #1]
   17184:	cmp	r3, #32
   17188:	bhi	171a0 <_start@@Base+0x4a84>
   1718c:	beq	18eb4 <_start@@Base+0x6798>
   17190:	mov	r1, r0
   17194:	mov	r2, r7
   17198:	mov	r0, r5
   1719c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   171a0:	cmp	r7, r0
   171a4:	beq	18ecc <_start@@Base+0x67b0>
   171a8:	ldrb	r3, [r0]
   171ac:	cmp	r3, #125	; 0x7d
   171b0:	beq	19020 <_start@@Base+0x6904>
   171b4:	mov	r3, #1
   171b8:	str	r3, [sp, #300]	; 0x12c
   171bc:	b	16c04 <_start@@Base+0x44e8>
   171c0:	mov	r1, r8
   171c4:	mov	r2, r7
   171c8:	mov	r0, r5
   171cc:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   171d0:	mov	fp, r0
   171d4:	b	168e4 <_start@@Base+0x41c8>
   171d8:	sub	r3, pc, #576	; 0x240
   171dc:	ldrd	r2, [r3]
   171e0:	ldrd	r0, [sp, #96]	; 0x60
   171e4:	cmp	r1, r3
   171e8:	cmpeq	r0, r2
   171ec:	bne	17914 <_start@@Base+0x51f8>
   171f0:	cmp	r6, #6
   171f4:	ble	17914 <_start@@Base+0x51f8>
   171f8:	mov	r3, #6
   171fc:	mov	r2, r7
   17200:	mov	r1, r4
   17204:	mov	r0, r5
   17208:	bl	13ccc <_start@@Base+0x15b0>
   1720c:	cmp	r4, r0
   17210:	mov	r6, r0
   17214:	beq	17914 <_start@@Base+0x51f8>
   17218:	mov	r1, #2
   1721c:	ldr	r0, [r5]
   17220:	bl	23668 <flatcc_builder_start_table@@Base>
   17224:	cmp	r0, #0
   17228:	bne	18030 <_start@@Base+0x5914>
   1722c:	add	r3, sp, #304	; 0x130
   17230:	mov	r1, r6
   17234:	mov	r2, r7
   17238:	mov	r0, r5
   1723c:	bl	13dcc <_start@@Base+0x16b0>
   17240:	ldr	r3, [sp, #304]	; 0x130
   17244:	cmp	r3, #0
   17248:	beq	196b4 <_start@@Base+0x6f98>
   1724c:	cmp	r7, r0
   17250:	beq	1727c <_start@@Base+0x4b60>
   17254:	ldrb	r3, [r0]
   17258:	cmp	r3, #34	; 0x22
   1725c:	moveq	r3, #0
   17260:	addeq	r0, r0, #1
   17264:	streq	r3, [r5, #12]
   17268:	beq	1727c <_start@@Base+0x4b60>
   1726c:	cmp	r3, #46	; 0x2e
   17270:	movne	r3, #1
   17274:	strne	r3, [r5, #12]
   17278:	beq	18018 <_start@@Base+0x58fc>
   1727c:	sub	r3, r7, r0
   17280:	cmp	r3, #8
   17284:	bhi	172b8 <_start@@Base+0x4b9c>
   17288:	sub	r3, r3, #1
   1728c:	cmp	r3, #7
   17290:	ldrls	pc, [pc, r3, lsl #2]
   17294:	b	175f4 <_start@@Base+0x4ed8>
   17298:	andeq	r7, r1, r0, lsr #7
   1729c:	muleq	r1, r4, r3
   172a0:	andeq	r7, r1, r8, lsl #7
   172a4:	andeq	r7, r1, ip, ror r3
   172a8:	andeq	r7, r1, r0, ror r3
   172ac:	andeq	r7, r1, r4, ror #6
   172b0:	andeq	r7, r1, r8, asr r3
   172b4:			; <UNDEFINED> instruction: 0x000172b8
   172b8:	ldrb	sl, [r0, #7]
   172bc:	mov	fp, #0
   172c0:	mov	r3, fp
   172c4:	ldrb	r8, [r0, #6]
   172c8:	orr	r2, sl, r8, lsl #8
   172cc:	ldrb	r8, [r0, #5]
   172d0:	orr	r2, r2, r8, lsl #16
   172d4:	ldrb	r8, [r0, #4]
   172d8:	orr	r2, r2, r8, lsl #24
   172dc:	ldrb	sl, [r0, #3]
   172e0:	orr	r3, r3, sl
   172e4:	ldrb	sl, [r0, #2]
   172e8:	orr	r3, r3, sl, lsl #8
   172ec:	ldrb	sl, [r0, #1]
   172f0:	orr	sl, r3, sl, lsl #16
   172f4:	str	r2, [sp, #64]	; 0x40
   172f8:	ldrb	r2, [r0]
   172fc:	sub	r9, pc, #860	; 0x35c
   17300:	ldrd	r8, [r9]
   17304:	orr	r3, sl, r2, lsl #24
   17308:	str	r3, [sp, #68]	; 0x44
   1730c:	ldrd	r2, [sp, #64]	; 0x40
   17310:	cmp	r3, r9
   17314:	cmpeq	r2, r8
   17318:	bne	175f4 <_start@@Base+0x4ed8>
   1731c:	add	r4, r0, #8
   17320:	sub	r1, r7, r4
   17324:	cmp	r1, #8
   17328:	bhi	173ac <_start@@Base+0x4c90>
   1732c:	sub	r3, r1, #2
   17330:	cmp	r3, #6
   17334:	ldrls	pc, [pc, r3, lsl #2]
   17338:	b	1760c <_start@@Base+0x4ef0>
   1733c:	ldrdeq	r7, [r1], -r4
   17340:	andeq	r7, r1, r8, asr #11
   17344:			; <UNDEFINED> instruction: 0x000175bc
   17348:			; <UNDEFINED> instruction: 0x000175b0
   1734c:	andeq	r7, r1, r4, lsr #11
   17350:	muleq	r1, r8, r5
   17354:	andeq	r7, r1, ip, lsr #7
   17358:	mov	sl, #0
   1735c:	mov	fp, #0
   17360:	b	172c0 <_start@@Base+0x4ba4>
   17364:	mov	r2, #0
   17368:	mov	r3, r2
   1736c:	b	172cc <_start@@Base+0x4bb0>
   17370:	mov	r2, #0
   17374:	mov	r3, r2
   17378:	b	172d4 <_start@@Base+0x4bb8>
   1737c:	mov	r2, #0
   17380:	mov	r3, r2
   17384:	b	172dc <_start@@Base+0x4bc0>
   17388:	mov	r2, #0
   1738c:	mov	r3, r2
   17390:	b	172e4 <_start@@Base+0x4bc8>
   17394:	mov	r2, #0
   17398:	mov	r3, r2
   1739c:	b	172ec <_start@@Base+0x4bd0>
   173a0:	mov	r2, #0
   173a4:	mov	sl, r2
   173a8:	b	172f4 <_start@@Base+0x4bd8>
   173ac:	ldrb	r2, [r0, #15]
   173b0:	mov	r3, #0
   173b4:	mov	ip, r3
   173b8:	ldrb	sl, [r0, #14]
   173bc:	orr	r2, r2, sl, lsl #8
   173c0:	ldrb	sl, [r0, #13]
   173c4:	orr	r2, r2, sl, lsl #16
   173c8:	ldrb	sl, [r0, #12]
   173cc:	orr	sl, r2, sl, lsl #24
   173d0:	ldrb	r8, [r0, #11]
   173d4:	orr	ip, ip, r8
   173d8:	ldrb	r2, [r0, #8]
   173dc:	str	sl, [sp, #72]	; 0x48
   173e0:	ldrb	r8, [r0, #10]
   173e4:	lsl	lr, r2, #24
   173e8:	ldrb	r2, [r0, #9]
   173ec:	orr	r8, ip, r8, lsl #8
   173f0:	orr	r2, lr, r2, lsl #16
   173f4:	orr	r3, r2, r8
   173f8:	add	r9, pc, #784	; 0x310
   173fc:	ldrd	r8, [r9]
   17400:	str	r3, [sp, #76]	; 0x4c
   17404:	ldrd	r2, [sp, #72]	; 0x48
   17408:	cmp	r3, r9
   1740c:	cmpeq	r2, r8
   17410:	beq	176d0 <_start@@Base+0x4fb4>
   17414:	ldrd	r2, [sp, #72]	; 0x48
   17418:	add	r9, pc, #760	; 0x2f8
   1741c:	ldrd	r8, [r9]
   17420:	bic	r0, r2, #255	; 0xff
   17424:	str	r0, [sp, #112]	; 0x70
   17428:	str	r3, [sp, #116]	; 0x74
   1742c:	ldrd	r2, [sp, #112]	; 0x70
   17430:	cmp	r3, r9
   17434:	cmpeq	r2, r8
   17438:	bne	1760c <_start@@Base+0x4ef0>
   1743c:	cmp	r1, #7
   17440:	ble	1760c <_start@@Base+0x4ef0>
   17444:	mov	r3, #7
   17448:	mov	r2, r7
   1744c:	mov	r1, r4
   17450:	mov	r0, r5
   17454:	bl	13ccc <_start@@Base+0x15b0>
   17458:	cmp	r4, r0
   1745c:	mov	r6, r0
   17460:	beq	1760c <_start@@Base+0x4ef0>
   17464:	mov	r1, #0
   17468:	add	r2, sp, #312	; 0x138
   1746c:	cmp	r7, r0
   17470:	mov	r0, #0
   17474:	mov	r3, #0
   17478:	strd	r0, [r2]
   1747c:	add	r2, sp, #320	; 0x140
   17480:	str	r3, [sp, #308]	; 0x134
   17484:	strd	r0, [r2]
   17488:	beq	184f8 <_start@@Base+0x5ddc>
   1748c:	mov	r0, r2
   17490:	add	r3, sp, #308	; 0x134
   17494:	mov	r2, r7
   17498:	mov	r1, r6
   1749c:	str	r0, [sp]
   174a0:	mov	r0, r5
   174a4:	bl	2b638 <flatcc_json_parser_integer@@Base>
   174a8:	cmp	r6, r0
   174ac:	mov	fp, r0
   174b0:	bne	185f8 <_start@@Base+0x5edc>
   174b4:	add	r0, sp, #312	; 0x138
   174b8:	ldr	r3, [pc, #608]	; 17720 <_start@@Base+0x5004>
   174bc:	mov	r2, r7
   174c0:	mov	r1, fp
   174c4:	str	r0, [sp]
   174c8:	mov	r0, r5
   174cc:	bl	160d0 <_start@@Base+0x39b4>
   174d0:	cmp	r7, r0
   174d4:	cmpne	r0, fp
   174d8:	beq	19694 <_start@@Base+0x6f78>
   174dc:	add	r3, sp, #312	; 0x138
   174e0:	mov	fp, r0
   174e4:	ldrd	r2, [r3]
   174e8:	orrs	r3, r2, r3
   174ec:	bne	174fc <_start@@Base+0x4de0>
   174f0:	ldr	r3, [r5, #8]
   174f4:	tst	r3, #2
   174f8:	beq	17524 <_start@@Base+0x4e08>
   174fc:	mov	r3, #8
   17500:	mov	r1, #0
   17504:	ldr	r0, [r5]
   17508:	mov	r2, r3
   1750c:	bl	259e0 <flatcc_builder_table_add@@Base>
   17510:	cmp	r0, #0
   17514:	beq	176bc <_start@@Base+0x4fa0>
   17518:	add	r3, sp, #312	; 0x138
   1751c:	ldrd	r2, [r3]
   17520:	strd	r2, [r0]
   17524:	sub	r3, r7, fp
   17528:	cmp	r3, #1
   1752c:	ble	17540 <_start@@Base+0x4e24>
   17530:	ldrb	r3, [fp]
   17534:	cmp	r3, #32
   17538:	bhi	17554 <_start@@Base+0x4e38>
   1753c:	beq	178b0 <_start@@Base+0x5194>
   17540:	mov	r1, fp
   17544:	mov	r2, r7
   17548:	mov	r0, r5
   1754c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17550:	mov	fp, r0
   17554:	cmp	r7, fp
   17558:	beq	17658 <_start@@Base+0x4f3c>
   1755c:	ldrb	r3, [fp]
   17560:	cmp	r3, #44	; 0x2c
   17564:	beq	178c4 <_start@@Base+0x51a8>
   17568:	mov	r3, #0
   1756c:	str	r3, [sp, #304]	; 0x130
   17570:	ldrb	r3, [fp]
   17574:	cmp	r3, #125	; 0x7d
   17578:	beq	17624 <_start@@Base+0x4f08>
   1757c:	mov	r3, #10
   17580:	mov	r1, fp
   17584:	mov	r2, r7
   17588:	mov	r0, r5
   1758c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   17590:	ldr	r3, [sp, #304]	; 0x130
   17594:	b	17244 <_start@@Base+0x4b28>
   17598:	mov	r2, #0
   1759c:	mov	r3, #0
   175a0:	b	173b4 <_start@@Base+0x4c98>
   175a4:	mov	r2, #0
   175a8:	mov	ip, r2
   175ac:	b	173c0 <_start@@Base+0x4ca4>
   175b0:	mov	r2, #0
   175b4:	mov	ip, r2
   175b8:	b	173c8 <_start@@Base+0x4cac>
   175bc:	mov	sl, #0
   175c0:	mov	ip, sl
   175c4:	b	173d0 <_start@@Base+0x4cb4>
   175c8:	mov	sl, #0
   175cc:	mov	ip, sl
   175d0:	b	173d8 <_start@@Base+0x4cbc>
   175d4:	ldrb	r2, [r0, #9]
   175d8:	mov	ip, #0
   175dc:	ldrb	r8, [r0, #8]
   175e0:	str	ip, [sp, #72]	; 0x48
   175e4:	lsl	r2, r2, #16
   175e8:	orr	r3, r2, r8, lsl #24
   175ec:	str	r3, [sp, #76]	; 0x4c
   175f0:	b	17414 <_start@@Base+0x4cf8>
   175f4:	mov	r1, r0
   175f8:	mov	r2, r7
   175fc:	mov	r0, r5
   17600:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   17604:	mov	fp, r0
   17608:	b	17524 <_start@@Base+0x4e08>
   1760c:	mov	r1, r4
   17610:	mov	r2, r7
   17614:	mov	r0, r5
   17618:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1761c:	mov	fp, r0
   17620:	b	17524 <_start@@Base+0x4e08>
   17624:	add	r1, fp, #1
   17628:	sub	r3, r7, r1
   1762c:	cmp	r3, #1
   17630:	ble	17644 <_start@@Base+0x4f28>
   17634:	ldrb	r3, [fp, #1]
   17638:	cmp	r3, #32
   1763c:	bhi	18048 <_start@@Base+0x592c>
   17640:	beq	18500 <_start@@Base+0x5de4>
   17644:	mov	r2, r7
   17648:	mov	r0, r5
   1764c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17650:	ldr	r3, [sp, #304]	; 0x130
   17654:	b	17244 <_start@@Base+0x4b28>
   17658:	mov	r3, #0
   1765c:	str	r3, [sp, #304]	; 0x130
   17660:	ldr	r3, [r5, #24]
   17664:	cmp	r3, #0
   17668:	bne	176bc <_start@@Base+0x4fa0>
   1766c:	ldr	r0, [r5]
   17670:	bl	23fe8 <flatcc_builder_end_table@@Base>
   17674:	subs	r4, r0, #0
   17678:	beq	176bc <_start@@Base+0x4fa0>
   1767c:	mov	r1, #2
   17680:	ldr	r0, [r5]
   17684:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   17688:	cmp	r0, #0
   1768c:	beq	1714c <_start@@Base+0x4a30>
   17690:	str	r4, [r0]
   17694:	b	17024 <_start@@Base+0x4908>
   17698:	mov	r3, #0
   1769c:	str	r3, [sp, #304]	; 0x130
   176a0:	ldr	r3, [r5, #24]
   176a4:	cmp	r3, #0
   176a8:	bne	176bc <_start@@Base+0x4fa0>
   176ac:	ldr	r0, [r5]
   176b0:	bl	23fe8 <flatcc_builder_end_table@@Base>
   176b4:	subs	r4, r0, #0
   176b8:	bne	17d78 <_start@@Base+0x565c>
   176bc:	mov	r9, fp
   176c0:	mov	sl, r7
   176c4:	mov	fp, r5
   176c8:	mov	r1, r9
   176cc:	b	16f3c <_start@@Base+0x4820>
   176d0:	add	r4, r0, #16
   176d4:	sub	r1, r7, r4
   176d8:	cmp	r1, #8
   176dc:	bhi	17724 <_start@@Base+0x5008>
   176e0:	sub	r3, r1, #2
   176e4:	cmp	r3, #6
   176e8:	ldrls	pc, [pc, r3, lsl #2]
   176ec:	b	1760c <_start@@Base+0x4ef0>
   176f0:	muleq	r1, r8, r8
   176f4:	andeq	r7, r1, ip, lsl #17
   176f8:	andeq	r7, r1, r0, lsl #17
   176fc:	andeq	r7, r1, r4, ror r8
   17700:	andeq	r7, r1, r8, ror #16
   17704:	andeq	r7, r1, r4, lsr #17
   17708:	andeq	r7, r1, r4, lsr #14
   1770c:	nop	{0}
   17710:	cmnvs	r2, pc, asr r4
   17714:	subsvs	r7, pc, #116, 6	; 0xd0000001
   17718:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1771c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   17720:	andeq	r0, r4, r0, lsl #2
   17724:	ldrb	sl, [r0, #23]
   17728:	mov	fp, #0
   1772c:	mov	r3, fp
   17730:	ldrb	r8, [r0, #22]
   17734:	orr	r2, sl, r8, lsl #8
   17738:	ldrb	r8, [r0, #21]
   1773c:	orr	r2, r2, r8, lsl #16
   17740:	ldrb	r8, [r0, #20]
   17744:	orr	r8, r2, r8, lsl #24
   17748:	ldrb	sl, [r0, #19]
   1774c:	orr	r3, r3, sl
   17750:	ldrb	sl, [r0, #18]
   17754:	orr	r3, r3, sl, lsl #8
   17758:	and	r2, r8, #-16777216	; 0xff000000
   1775c:	ldrb	sl, [r0, #17]
   17760:	mov	r8, #0
   17764:	str	r2, [sp, #160]	; 0xa0
   17768:	ldrb	r2, [r0, #16]
   1776c:	orr	sl, r3, sl, lsl #16
   17770:	orr	r3, sl, r2, lsl #24
   17774:	add	fp, pc, #876	; 0x36c
   17778:	ldrd	sl, [fp]
   1777c:	str	r3, [sp, #164]	; 0xa4
   17780:	ldrd	r2, [sp, #160]	; 0xa0
   17784:	cmp	r3, fp
   17788:	cmpeq	r2, sl
   1778c:	bne	1760c <_start@@Base+0x4ef0>
   17790:	cmp	r1, #5
   17794:	ble	1760c <_start@@Base+0x4ef0>
   17798:	mov	r2, r7
   1779c:	mov	r1, r4
   177a0:	mov	r0, r5
   177a4:	bl	13be4 <_start@@Base+0x14c8>
   177a8:	cmp	r4, r0
   177ac:	mov	r6, r0
   177b0:	beq	1760c <_start@@Base+0x4ef0>
   177b4:	mov	r2, #0
   177b8:	mov	r3, #0
   177bc:	str	r8, [sp, #308]	; 0x134
   177c0:	add	r1, sp, #320	; 0x140
   177c4:	cmp	r7, r0
   177c8:	str	r8, [sp, #312]	; 0x138
   177cc:	strd	r2, [r1]
   177d0:	beq	18fb8 <_start@@Base+0x689c>
   177d4:	mov	r0, r1
   177d8:	add	r3, sp, #312	; 0x138
   177dc:	mov	r2, r7
   177e0:	mov	r1, r6
   177e4:	str	r0, [sp]
   177e8:	mov	r0, r5
   177ec:	bl	2b638 <flatcc_json_parser_integer@@Base>
   177f0:	cmp	r6, r0
   177f4:	mov	r4, r0
   177f8:	bne	19108 <_start@@Base+0x69ec>
   177fc:	add	ip, sp, #308	; 0x134
   17800:	ldr	r3, [pc, #752]	; 17af8 <_start@@Base+0x53dc>
   17804:	mov	r2, r7
   17808:	mov	r1, r4
   1780c:	mov	r0, r5
   17810:	str	ip, [sp]
   17814:	bl	14e1c <_start@@Base+0x2700>
   17818:	cmp	r7, r0
   1781c:	cmpne	r0, r4
   17820:	mov	fp, r0
   17824:	beq	176bc <_start@@Base+0x4fa0>
   17828:	ldr	r2, [sp, #308]	; 0x134
   1782c:	cmp	r2, #0
   17830:	bne	17840 <_start@@Base+0x5124>
   17834:	ldr	r3, [r5, #8]
   17838:	tst	r3, #2
   1783c:	beq	17524 <_start@@Base+0x4e08>
   17840:	mov	r3, #4
   17844:	mov	r1, #1
   17848:	ldr	r0, [r5]
   1784c:	mov	r2, r3
   17850:	bl	259e0 <flatcc_builder_table_add@@Base>
   17854:	cmp	r0, #0
   17858:	beq	176bc <_start@@Base+0x4fa0>
   1785c:	ldr	r3, [sp, #308]	; 0x134
   17860:	str	r3, [r0]
   17864:	b	17524 <_start@@Base+0x4e08>
   17868:	mov	r2, #0
   1786c:	mov	r3, r2
   17870:	b	17738 <_start@@Base+0x501c>
   17874:	mov	r2, #0
   17878:	mov	r3, r2
   1787c:	b	17740 <_start@@Base+0x5024>
   17880:	mov	r8, #0
   17884:	mov	r3, r8
   17888:	b	17748 <_start@@Base+0x502c>
   1788c:	mov	r8, #0
   17890:	mov	r3, r8
   17894:	b	17750 <_start@@Base+0x5034>
   17898:	mov	r8, #0
   1789c:	mov	r3, r8
   178a0:	b	17758 <_start@@Base+0x503c>
   178a4:	mov	sl, #0
   178a8:	mov	fp, #0
   178ac:	b	1772c <_start@@Base+0x5010>
   178b0:	ldrb	r3, [fp, #1]
   178b4:	cmp	r3, #32
   178b8:	addhi	fp, fp, #1
   178bc:	bls	17540 <_start@@Base+0x4e24>
   178c0:	b	17554 <_start@@Base+0x4e38>
   178c4:	add	r0, fp, #1
   178c8:	sub	r3, r7, r0
   178cc:	cmp	r3, #1
   178d0:	ble	178e4 <_start@@Base+0x51c8>
   178d4:	ldrb	r3, [fp, #1]
   178d8:	cmp	r3, #32
   178dc:	bhi	178f4 <_start@@Base+0x51d8>
   178e0:	beq	18f00 <_start@@Base+0x67e4>
   178e4:	mov	r1, r0
   178e8:	mov	r2, r7
   178ec:	mov	r0, r5
   178f0:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   178f4:	cmp	r7, r0
   178f8:	beq	18f18 <_start@@Base+0x67fc>
   178fc:	ldrb	r3, [r0]
   17900:	cmp	r3, #125	; 0x7d
   17904:	beq	190e8 <_start@@Base+0x69cc>
   17908:	mov	r3, #1
   1790c:	str	r3, [sp, #304]	; 0x130
   17910:	b	1724c <_start@@Base+0x4b30>
   17914:	mov	r1, r4
   17918:	mov	r2, r7
   1791c:	mov	r0, r5
   17920:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   17924:	mov	fp, r0
   17928:	b	17024 <_start@@Base+0x4908>
   1792c:	cmp	r6, #6
   17930:	ble	17914 <_start@@Base+0x51f8>
   17934:	mov	r3, #6
   17938:	mov	r2, r7
   1793c:	mov	r1, r4
   17940:	mov	r0, r5
   17944:	bl	13ccc <_start@@Base+0x15b0>
   17948:	cmp	r4, r0
   1794c:	mov	r6, r0
   17950:	beq	17914 <_start@@Base+0x51f8>
   17954:	mov	r1, #2
   17958:	ldr	r0, [r5]
   1795c:	bl	23668 <flatcc_builder_start_table@@Base>
   17960:	cmp	r0, #0
   17964:	bne	18030 <_start@@Base+0x5914>
   17968:	add	r3, sp, #304	; 0x130
   1796c:	mov	r1, r6
   17970:	mov	r2, r7
   17974:	mov	r0, r5
   17978:	bl	13dcc <_start@@Base+0x16b0>
   1797c:	ldr	r3, [sp, #304]	; 0x130
   17980:	cmp	r3, #0
   17984:	beq	196a4 <_start@@Base+0x6f88>
   17988:	cmp	r7, r0
   1798c:	beq	179b8 <_start@@Base+0x529c>
   17990:	ldrb	r3, [r0]
   17994:	cmp	r3, #34	; 0x22
   17998:	moveq	r3, #0
   1799c:	addeq	r0, r0, #1
   179a0:	streq	r3, [r5, #12]
   179a4:	beq	179b8 <_start@@Base+0x529c>
   179a8:	cmp	r3, #46	; 0x2e
   179ac:	movne	r3, #1
   179b0:	strne	r3, [r5, #12]
   179b4:	beq	17fd0 <_start@@Base+0x58b4>
   179b8:	sub	r3, r7, r0
   179bc:	cmp	r3, #8
   179c0:	bhi	179f4 <_start@@Base+0x52d8>
   179c4:	sub	r3, r3, #1
   179c8:	cmp	r3, #7
   179cc:	ldrls	pc, [pc, r3, lsl #2]
   179d0:	b	17d14 <_start@@Base+0x55f8>
   179d4:	andeq	r7, r1, ip, asr #21
   179d8:	andeq	r7, r1, r0, asr #21
   179dc:			; <UNDEFINED> instruction: 0x00017ab4
   179e0:	andeq	r7, r1, r8, lsr #21
   179e4:	muleq	r1, ip, sl
   179e8:	ldrdeq	r7, [r1], -r8
   179ec:	muleq	r1, r0, sl
   179f0:	strdeq	r7, [r1], -r4
   179f4:	ldrb	sl, [r0, #7]
   179f8:	mov	fp, #0
   179fc:	mov	r3, fp
   17a00:	ldrb	r8, [r0, #6]
   17a04:	orr	r2, sl, r8, lsl #8
   17a08:	ldrb	r8, [r0, #5]
   17a0c:	orr	r2, r2, r8, lsl #16
   17a10:	ldrb	r8, [r0, #4]
   17a14:	orr	r2, r2, r8, lsl #24
   17a18:	ldrb	sl, [r0, #3]
   17a1c:	orr	r3, r3, sl
   17a20:	ldrb	sl, [r0, #2]
   17a24:	orr	sl, r3, sl, lsl #8
   17a28:	ldrb	r8, [r0, #1]
   17a2c:	orr	sl, sl, r8, lsl #16
   17a30:	str	r2, [sp, #56]	; 0x38
   17a34:	ldrb	r2, [r0]
   17a38:	add	r9, pc, #176	; 0xb0
   17a3c:	ldrd	r8, [r9]
   17a40:	orr	r3, sl, r2, lsl #24
   17a44:	str	r3, [sp, #60]	; 0x3c
   17a48:	ldrd	r2, [sp, #56]	; 0x38
   17a4c:	cmp	r3, r9
   17a50:	cmpeq	r2, r8
   17a54:	bne	17d14 <_start@@Base+0x55f8>
   17a58:	add	r4, r0, #8
   17a5c:	sub	r1, r7, r4
   17a60:	cmp	r1, #8
   17a64:	bhi	17afc <_start@@Base+0x53e0>
   17a68:	sub	r3, r1, #3
   17a6c:	cmp	r3, #5
   17a70:	ldrls	pc, [pc, r3, lsl #2]
   17a74:	b	17d2c <_start@@Base+0x5610>
   17a78:	andeq	r7, r1, r8, lsl #26
   17a7c:	strdeq	r7, [r1], -ip
   17a80:	strdeq	r7, [r1], -r0
   17a84:	ldrdeq	r7, [r1], -r8
   17a88:	andeq	r7, r1, r4, ror #25
   17a8c:	strdeq	r7, [r1], -ip
   17a90:	mov	sl, #0
   17a94:	mov	fp, #0
   17a98:	b	179fc <_start@@Base+0x52e0>
   17a9c:	mov	r2, #0
   17aa0:	mov	r3, r2
   17aa4:	b	17a10 <_start@@Base+0x52f4>
   17aa8:	mov	r2, #0
   17aac:	mov	r3, r2
   17ab0:	b	17a18 <_start@@Base+0x52fc>
   17ab4:	mov	r2, #0
   17ab8:	mov	r3, r2
   17abc:	b	17a20 <_start@@Base+0x5304>
   17ac0:	mov	r2, #0
   17ac4:	mov	sl, r2
   17ac8:	b	17a28 <_start@@Base+0x530c>
   17acc:	mov	r2, #0
   17ad0:	mov	sl, r2
   17ad4:	b	17a30 <_start@@Base+0x5314>
   17ad8:	mov	r2, #0
   17adc:	mov	r3, r2
   17ae0:	b	17a08 <_start@@Base+0x52ec>
   17ae4:	nop	{0}
   17ae8:	movwvc	r0, #0
   17aec:	cmnvc	r4, #112, 10	; 0x1c000000
   17af0:	svcpl	0x00626262
   17af4:	cmnvs	r1, r1, ror #2
   17af8:	strdeq	r0, [r4], -r4
   17afc:	ldrb	r2, [r0, #15]
   17b00:	mov	r3, #0
   17b04:	mov	ip, r3
   17b08:	ldrb	r8, [r0, #14]
   17b0c:	orr	r2, r2, r8, lsl #8
   17b10:	ldrb	r8, [r0, #13]
   17b14:	orr	r2, r2, r8, lsl #16
   17b18:	ldrb	r8, [r0, #12]
   17b1c:	orr	r2, r2, r8, lsl #24
   17b20:	ldrb	sl, [r0, #11]
   17b24:	orr	ip, ip, sl
   17b28:	ldrb	r8, [r0, #8]
   17b2c:	mov	r6, #0
   17b30:	str	r2, [sp, #32]
   17b34:	ldrb	sl, [r0, #10]
   17b38:	ldrb	r2, [r0, #9]
   17b3c:	lsl	r8, r8, #24
   17b40:	orr	sl, ip, sl, lsl #8
   17b44:	orr	r8, r8, r2, lsl #16
   17b48:	orr	r3, r8, sl
   17b4c:	add	r9, pc, #988	; 0x3dc
   17b50:	ldrd	r8, [r9]
   17b54:	str	r3, [sp, #36]	; 0x24
   17b58:	ldrd	r2, [sp, #32]
   17b5c:	bic	r0, r2, #255	; 0xff
   17b60:	str	r0, [sp, #88]	; 0x58
   17b64:	str	r3, [sp, #92]	; 0x5c
   17b68:	ldrd	r2, [sp, #88]	; 0x58
   17b6c:	cmp	r3, r9
   17b70:	cmpeq	r2, r8
   17b74:	beq	17d90 <_start@@Base+0x5674>
   17b78:	add	r9, pc, #952	; 0x3b8
   17b7c:	ldrd	r8, [r9]
   17b80:	ldrd	r2, [sp, #32]
   17b84:	cmp	r3, r9
   17b88:	cmpeq	r2, r8
   17b8c:	bne	17d2c <_start@@Base+0x5610>
   17b90:	cmp	r1, #8
   17b94:	ble	17d2c <_start@@Base+0x5610>
   17b98:	mov	r2, r7
   17b9c:	mov	r1, r4
   17ba0:	mov	r0, r5
   17ba4:	bl	13afc <_start@@Base+0x13e0>
   17ba8:	cmp	r4, r0
   17bac:	mov	r8, r0
   17bb0:	beq	17d2c <_start@@Base+0x5610>
   17bb4:	mov	r2, #0
   17bb8:	mov	r3, #0
   17bbc:	str	r6, [sp, #308]	; 0x134
   17bc0:	add	r1, sp, #320	; 0x140
   17bc4:	cmp	r7, r0
   17bc8:	str	r6, [sp, #312]	; 0x138
   17bcc:	strd	r2, [r1]
   17bd0:	beq	18384 <_start@@Base+0x5c68>
   17bd4:	mov	r0, r1
   17bd8:	add	r3, sp, #312	; 0x138
   17bdc:	mov	r2, r7
   17be0:	mov	r1, r8
   17be4:	str	r0, [sp]
   17be8:	mov	r0, r5
   17bec:	bl	2b638 <flatcc_json_parser_integer@@Base>
   17bf0:	cmp	r8, r0
   17bf4:	mov	r4, r0
   17bf8:	bne	18548 <_start@@Base+0x5e2c>
   17bfc:	add	ip, sp, #308	; 0x134
   17c00:	ldr	r3, [pc, #824]	; 17f40 <_start@@Base+0x5824>
   17c04:	mov	r2, r7
   17c08:	mov	r1, r4
   17c0c:	mov	r0, r5
   17c10:	str	ip, [sp]
   17c14:	bl	14e1c <_start@@Base+0x2700>
   17c18:	cmp	r7, r0
   17c1c:	cmpne	r0, r4
   17c20:	mov	fp, r0
   17c24:	beq	176bc <_start@@Base+0x4fa0>
   17c28:	ldr	r2, [sp, #308]	; 0x134
   17c2c:	cmp	r2, #0
   17c30:	bne	17c40 <_start@@Base+0x5524>
   17c34:	ldr	r3, [r5, #8]
   17c38:	tst	r3, #2
   17c3c:	beq	17c64 <_start@@Base+0x5548>
   17c40:	mov	r3, #4
   17c44:	mov	r1, #1
   17c48:	ldr	r0, [r5]
   17c4c:	mov	r2, r3
   17c50:	bl	259e0 <flatcc_builder_table_add@@Base>
   17c54:	cmp	r0, #0
   17c58:	beq	176bc <_start@@Base+0x4fa0>
   17c5c:	ldr	r3, [sp, #308]	; 0x134
   17c60:	str	r3, [r0]
   17c64:	sub	r3, r7, fp
   17c68:	cmp	r3, #1
   17c6c:	ble	17c80 <_start@@Base+0x5564>
   17c70:	ldrb	r3, [fp]
   17c74:	cmp	r3, #32
   17c78:	bhi	17c94 <_start@@Base+0x5578>
   17c7c:	beq	17e78 <_start@@Base+0x575c>
   17c80:	mov	r1, fp
   17c84:	mov	r2, r7
   17c88:	mov	r0, r5
   17c8c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17c90:	mov	fp, r0
   17c94:	cmp	r7, fp
   17c98:	beq	17698 <_start@@Base+0x4f7c>
   17c9c:	ldrb	r3, [fp]
   17ca0:	cmp	r3, #44	; 0x2c
   17ca4:	beq	17e8c <_start@@Base+0x5770>
   17ca8:	mov	r3, #0
   17cac:	str	r3, [sp, #304]	; 0x130
   17cb0:	ldrb	r3, [fp]
   17cb4:	cmp	r3, #125	; 0x7d
   17cb8:	beq	17d44 <_start@@Base+0x5628>
   17cbc:	mov	r3, #10
   17cc0:	mov	r1, fp
   17cc4:	mov	r2, r7
   17cc8:	mov	r0, r5
   17ccc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   17cd0:	ldr	r3, [sp, #304]	; 0x130
   17cd4:	b	17980 <_start@@Base+0x5264>
   17cd8:	mov	r2, #0
   17cdc:	mov	ip, r2
   17ce0:	b	17b10 <_start@@Base+0x53f4>
   17ce4:	mov	r2, #0
   17ce8:	mov	r3, #0
   17cec:	b	17b04 <_start@@Base+0x53e8>
   17cf0:	mov	r2, #0
   17cf4:	mov	ip, r2
   17cf8:	b	17b18 <_start@@Base+0x53fc>
   17cfc:	mov	r2, #0
   17d00:	mov	ip, r2
   17d04:	b	17b20 <_start@@Base+0x5404>
   17d08:	mov	r2, #0
   17d0c:	mov	ip, r2
   17d10:	b	17b28 <_start@@Base+0x540c>
   17d14:	mov	r1, r0
   17d18:	mov	r2, r7
   17d1c:	mov	r0, r5
   17d20:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   17d24:	mov	fp, r0
   17d28:	b	17c64 <_start@@Base+0x5548>
   17d2c:	mov	r1, r4
   17d30:	mov	r2, r7
   17d34:	mov	r0, r5
   17d38:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   17d3c:	mov	fp, r0
   17d40:	b	17c64 <_start@@Base+0x5548>
   17d44:	add	r1, fp, #1
   17d48:	sub	r3, r7, r1
   17d4c:	cmp	r3, #1
   17d50:	ble	17d64 <_start@@Base+0x5648>
   17d54:	ldrb	r3, [fp, #1]
   17d58:	cmp	r3, #32
   17d5c:	bhi	18010 <_start@@Base+0x58f4>
   17d60:	beq	1838c <_start@@Base+0x5c70>
   17d64:	mov	r2, r7
   17d68:	mov	r0, r5
   17d6c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17d70:	ldr	r3, [sp, #304]	; 0x130
   17d74:	b	17980 <_start@@Base+0x5264>
   17d78:	mov	r1, #1
   17d7c:	ldr	r0, [r5]
   17d80:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   17d84:	cmp	r0, #0
   17d88:	bne	17690 <_start@@Base+0x4f74>
   17d8c:	b	1714c <_start@@Base+0x4a30>
   17d90:	cmp	r1, #7
   17d94:	ble	17d2c <_start@@Base+0x5610>
   17d98:	mov	r3, #7
   17d9c:	mov	r2, r7
   17da0:	mov	r1, r4
   17da4:	mov	r0, r5
   17da8:	bl	13ccc <_start@@Base+0x15b0>
   17dac:	cmp	r4, r0
   17db0:	mov	r8, r0
   17db4:	beq	17d2c <_start@@Base+0x5610>
   17db8:	mov	r2, #0
   17dbc:	mov	r3, #0
   17dc0:	str	r6, [sp, #308]	; 0x134
   17dc4:	add	r1, sp, #312	; 0x138
   17dc8:	cmp	r7, r0
   17dcc:	strd	r2, [r1]
   17dd0:	add	r1, sp, #320	; 0x140
   17dd4:	strd	r2, [r1]
   17dd8:	beq	1837c <_start@@Base+0x5c60>
   17ddc:	mov	r0, r1
   17de0:	add	r3, sp, #308	; 0x134
   17de4:	mov	r2, r7
   17de8:	mov	r1, r8
   17dec:	str	r0, [sp]
   17df0:	mov	r0, r5
   17df4:	bl	2b638 <flatcc_json_parser_integer@@Base>
   17df8:	cmp	r8, r0
   17dfc:	mov	fp, r0
   17e00:	bne	18514 <_start@@Base+0x5df8>
   17e04:	add	ip, sp, #312	; 0x138
   17e08:	ldr	r3, [pc, #308]	; 17f44 <_start@@Base+0x5828>
   17e0c:	mov	r2, r7
   17e10:	mov	r1, fp
   17e14:	mov	r0, r5
   17e18:	str	ip, [sp]
   17e1c:	bl	160d0 <_start@@Base+0x39b4>
   17e20:	cmp	r7, r0
   17e24:	cmpne	r0, fp
   17e28:	beq	19694 <_start@@Base+0x6f78>
   17e2c:	add	r3, sp, #312	; 0x138
   17e30:	mov	fp, r0
   17e34:	ldrd	r2, [r3]
   17e38:	orrs	r3, r2, r3
   17e3c:	bne	17e4c <_start@@Base+0x5730>
   17e40:	ldr	r3, [r5, #8]
   17e44:	tst	r3, #2
   17e48:	beq	17c64 <_start@@Base+0x5548>
   17e4c:	mov	r3, #8
   17e50:	mov	r1, #0
   17e54:	ldr	r0, [r5]
   17e58:	mov	r2, r3
   17e5c:	bl	259e0 <flatcc_builder_table_add@@Base>
   17e60:	cmp	r0, #0
   17e64:	beq	176bc <_start@@Base+0x4fa0>
   17e68:	add	r3, sp, #312	; 0x138
   17e6c:	ldrd	r2, [r3]
   17e70:	strd	r2, [r0]
   17e74:	b	17c64 <_start@@Base+0x5548>
   17e78:	ldrb	r3, [fp, #1]
   17e7c:	cmp	r3, #32
   17e80:	addhi	fp, fp, #1
   17e84:	bls	17c80 <_start@@Base+0x5564>
   17e88:	b	17c94 <_start@@Base+0x5578>
   17e8c:	add	r0, fp, #1
   17e90:	sub	r3, r7, r0
   17e94:	cmp	r3, #1
   17e98:	ble	17eac <_start@@Base+0x5790>
   17e9c:	ldrb	r3, [fp, #1]
   17ea0:	cmp	r3, #32
   17ea4:	bhi	17ebc <_start@@Base+0x57a0>
   17ea8:	beq	185a0 <_start@@Base+0x5e84>
   17eac:	mov	r1, r0
   17eb0:	mov	r2, r7
   17eb4:	mov	r0, r5
   17eb8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17ebc:	cmp	r7, r0
   17ec0:	beq	185b8 <_start@@Base+0x5e9c>
   17ec4:	ldrb	r3, [r0]
   17ec8:	cmp	r3, #125	; 0x7d
   17ecc:	beq	18f7c <_start@@Base+0x6860>
   17ed0:	mov	r3, #1
   17ed4:	str	r3, [sp, #304]	; 0x130
   17ed8:	b	17988 <_start@@Base+0x526c>
   17edc:	mov	r9, fp
   17ee0:	mov	r3, #0
   17ee4:	mov	fp, r5
   17ee8:	mov	sl, r7
   17eec:	str	r3, [sp, #292]	; 0x124
   17ef0:	ldr	r3, [fp, #24]
   17ef4:	cmp	r3, #0
   17ef8:	bne	16738 <_start@@Base+0x401c>
   17efc:	mov	r1, r9
   17f00:	mov	r2, sl
   17f04:	ldr	r3, [sp, #296]	; 0x128
   17f08:	mov	r0, fp
   17f0c:	bl	2c0a4 <flatcc_json_parser_finalize_unions@@Base>
   17f10:	mov	r9, r0
   17f14:	ldr	r0, [fp]
   17f18:	bl	23fe8 <flatcc_builder_end_table@@Base>
   17f1c:	ldr	r3, [sp, #272]	; 0x110
   17f20:	cmp	r0, #0
   17f24:	str	r0, [r3]
   17f28:	bne	16750 <_start@@Base+0x4034>
   17f2c:	b	16738 <_start@@Base+0x401c>
   17f30:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   17f34:	subsvs	r7, pc, #116, 6	; 0xd0000001
   17f38:	cmnvs	r2, pc, asr r4
   17f3c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   17f40:	andeq	r0, r4, r0, lsr #1
   17f44:	muleq	r4, r4, r0
   17f48:	ldrb	r3, [fp, #1]
   17f4c:	cmp	r3, #32
   17f50:	addhi	fp, fp, #1
   17f54:	bls	16900 <_start@@Base+0x41e4>
   17f58:	b	16914 <_start@@Base+0x41f8>
   17f5c:	add	r4, fp, #1
   17f60:	sub	r3, r7, r4
   17f64:	cmp	r3, #1
   17f68:	ble	17f7c <_start@@Base+0x5860>
   17f6c:	ldrb	r3, [fp, #1]
   17f70:	cmp	r3, #32
   17f74:	bhi	17f90 <_start@@Base+0x5874>
   17f78:	beq	19190 <_start@@Base+0x6a74>
   17f7c:	mov	r1, r4
   17f80:	mov	r2, r7
   17f84:	mov	r0, r5
   17f88:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   17f8c:	mov	r4, r0
   17f90:	cmp	r7, r4
   17f94:	beq	19484 <_start@@Base+0x6d68>
   17f98:	ldrb	r3, [r4]
   17f9c:	cmp	r3, #125	; 0x7d
   17fa0:	movne	r3, #1
   17fa4:	strne	r3, [sp, #292]	; 0x124
   17fa8:	bne	167c0 <_start@@Base+0x40a4>
   17fac:	mov	r3, #0
   17fb0:	add	r1, r4, #1
   17fb4:	mov	r2, r7
   17fb8:	mov	r0, r5
   17fbc:	str	r3, [sp, #292]	; 0x124
   17fc0:	bl	13420 <_start@@Base+0xd04>
   17fc4:	mov	r4, r0
   17fc8:	ldr	r3, [sp, #292]	; 0x124
   17fcc:	b	16958 <_start@@Base+0x423c>
   17fd0:	mov	r1, r0
   17fd4:	mov	r3, #5
   17fd8:	mov	r2, r7
   17fdc:	mov	r0, r5
   17fe0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   17fe4:	b	179b8 <_start@@Base+0x529c>
   17fe8:	mov	fp, r5
   17fec:	mov	sl, r7
   17ff0:	mov	r1, r6
   17ff4:	b	16f54 <_start@@Base+0x4838>
   17ff8:	mov	r1, r0
   17ffc:	mov	r3, #5
   18000:	mov	r2, r7
   18004:	mov	r0, r5
   18008:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1800c:	b	16c34 <_start@@Base+0x4518>
   18010:	mov	fp, r1
   18014:	b	176a0 <_start@@Base+0x4f84>
   18018:	mov	r1, r0
   1801c:	mov	r3, #5
   18020:	mov	r2, r7
   18024:	mov	r0, r5
   18028:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1802c:	b	1727c <_start@@Base+0x4b60>
   18030:	mov	fp, r5
   18034:	mov	sl, r7
   18038:	mov	r1, r6
   1803c:	b	16f3c <_start@@Base+0x4820>
   18040:	mov	fp, r1
   18044:	b	170d4 <_start@@Base+0x49b8>
   18048:	mov	fp, r1
   1804c:	b	17660 <_start@@Base+0x4f44>
   18050:	ldrd	r0, [sp, #40]	; 0x28
   18054:	add	r3, pc, #836	; 0x344
   18058:	ldrd	r2, [r3]
   1805c:	and	lr, r0, #-16777216	; 0xff000000
   18060:	str	lr, [sp, #184]	; 0xb8
   18064:	str	r1, [sp, #188]	; 0xbc
   18068:	ldrd	r0, [sp, #184]	; 0xb8
   1806c:	cmp	r1, r3
   18070:	cmpeq	r0, r2
   18074:	bne	169a4 <_start@@Base+0x4288>
   18078:	cmp	ip, #5
   1807c:	ble	169a4 <_start@@Base+0x4288>
   18080:	mov	r2, r7
   18084:	mov	r1, r4
   18088:	mov	r0, r5
   1808c:	bl	13be4 <_start@@Base+0x14c8>
   18090:	cmp	r0, r4
   18094:	mov	r6, r0
   18098:	beq	169a4 <_start@@Base+0x4288>
   1809c:	mov	r1, #10
   180a0:	ldr	r0, [r5]
   180a4:	bl	23668 <flatcc_builder_start_table@@Base>
   180a8:	cmp	r0, #0
   180ac:	bne	17fe8 <_start@@Base+0x58cc>
   180b0:	add	r0, sp, #320	; 0x140
   180b4:	mov	r3, #5
   180b8:	mov	r2, r7
   180bc:	mov	r1, r6
   180c0:	str	r0, [sp]
   180c4:	mov	r0, r5
   180c8:	bl	2c008 <flatcc_json_parser_prepare_unions@@Base>
   180cc:	cmp	r7, r0
   180d0:	beq	17fe8 <_start@@Base+0x58cc>
   180d4:	add	r3, sp, #312	; 0x138
   180d8:	mov	r1, r6
   180dc:	mov	r2, r7
   180e0:	mov	r0, r5
   180e4:	bl	13dcc <_start@@Base+0x16b0>
   180e8:	ldr	r3, [sp, #312]	; 0x138
   180ec:	mov	r8, r0
   180f0:	cmp	r3, #0
   180f4:	beq	18f9c <_start@@Base+0x6880>
   180f8:	add	fp, pc, #680	; 0x2a8
   180fc:	ldrd	sl, [fp]
   18100:	b	181c8 <_start@@Base+0x5aac>
   18104:	add	r3, pc, #676	; 0x2a4
   18108:	ldrd	r2, [r3]
   1810c:	cmp	r1, r3
   18110:	cmpeq	r0, r2
   18114:	beq	182fc <_start@@Base+0x5be0>
   18118:	add	r3, pc, #664	; 0x298
   1811c:	ldrd	r2, [r3]
   18120:	cmp	r1, r3
   18124:	cmpeq	r0, r2
   18128:	beq	19040 <_start@@Base+0x6924>
   1812c:	and	ip, r0, #-16777216	; 0xff000000
   18130:	add	r3, pc, #648	; 0x288
   18134:	ldrd	r2, [r3]
   18138:	str	ip, [sp, #200]	; 0xc8
   1813c:	str	r1, [sp, #204]	; 0xcc
   18140:	ldrd	r0, [sp, #200]	; 0xc8
   18144:	cmp	r1, r3
   18148:	cmpeq	r0, r2
   1814c:	bne	18364 <_start@@Base+0x5c48>
   18150:	sub	r3, r7, r8
   18154:	cmp	r3, #5
   18158:	ble	18364 <_start@@Base+0x5c48>
   1815c:	mov	r1, r8
   18160:	mov	r2, r7
   18164:	mov	r0, r5
   18168:	bl	13be4 <_start@@Base+0x14c8>
   1816c:	cmp	r0, r8
   18170:	mov	r1, r0
   18174:	beq	18364 <_start@@Base+0x5c48>
   18178:	ldr	ip, [sp, #320]	; 0x140
   1817c:	movw	r3, #40836	; 0x9f84
   18180:	movt	r3, #1
   18184:	mov	lr, #7
   18188:	str	r3, [sp, #8]
   1818c:	mov	r3, #3
   18190:	mov	r2, r7
   18194:	mov	r0, r5
   18198:	str	lr, [sp]
   1819c:	str	ip, [sp, #4]
   181a0:	bl	2c130 <flatcc_json_parser_union@@Base>
   181a4:	mov	r1, r0
   181a8:	add	r3, sp, #312	; 0x138
   181ac:	mov	r2, r7
   181b0:	mov	r0, r5
   181b4:	bl	16560 <_start@@Base+0x3e44>
   181b8:	ldr	r3, [sp, #312]	; 0x138
   181bc:	mov	r8, r0
   181c0:	cmp	r3, #0
   181c4:	beq	18f9c <_start@@Base+0x6880>
   181c8:	cmp	r7, r8
   181cc:	beq	181f8 <_start@@Base+0x5adc>
   181d0:	ldrb	r3, [r8]
   181d4:	cmp	r3, #34	; 0x22
   181d8:	moveq	r3, #0
   181dc:	addeq	r8, r8, #1
   181e0:	streq	r3, [r5, #12]
   181e4:	beq	181f8 <_start@@Base+0x5adc>
   181e8:	cmp	r3, #46	; 0x2e
   181ec:	movne	r3, #1
   181f0:	strne	r3, [r5, #12]
   181f4:	beq	1938c <_start@@Base+0x6c70>
   181f8:	mov	r1, r7
   181fc:	mov	r0, r8
   18200:	bl	12810 <_start@@Base+0xf4>
   18204:	cmp	r1, fp
   18208:	cmpeq	r0, sl
   1820c:	bls	18104 <_start@@Base+0x59e8>
   18210:	add	r3, pc, #432	; 0x1b0
   18214:	ldrd	r2, [r3]
   18218:	cmp	r1, r3
   1821c:	cmpeq	r0, r2
   18220:	bhi	18410 <_start@@Base+0x5cf4>
   18224:	add	r3, pc, #420	; 0x1a4
   18228:	ldrd	r2, [r3]
   1822c:	cmp	r1, r3
   18230:	cmpeq	r0, r2
   18234:	bne	18364 <_start@@Base+0x5c48>
   18238:	add	r8, r8, #8
   1823c:	mov	r1, r7
   18240:	mov	r0, r8
   18244:	bl	12810 <_start@@Base+0xf4>
   18248:	mov	ip, r1
   1824c:	bic	r1, r0, #255	; 0xff
   18250:	add	r3, pc, #384	; 0x180
   18254:	ldrd	r2, [r3]
   18258:	str	r1, [sp, #248]	; 0xf8
   1825c:	str	ip, [sp, #252]	; 0xfc
   18260:	ldrd	r0, [sp, #248]	; 0xf8
   18264:	cmp	r1, r3
   18268:	cmpeq	r0, r2
   1826c:	beq	194f8 <_start@@Base+0x6ddc>
   18270:	lsr	r1, ip, #16
   18274:	mov	r3, #0
   18278:	mov	r2, #0
   1827c:	lsl	r1, r1, #16
   18280:	str	r3, [sp, #232]	; 0xe8
   18284:	mov	r3, #0
   18288:	movt	r3, #29299	; 0x7273
   1828c:	str	r1, [sp, #236]	; 0xec
   18290:	ldrd	r0, [sp, #232]	; 0xe8
   18294:	cmp	r1, r3
   18298:	cmpeq	r0, r2
   1829c:	bne	18364 <_start@@Base+0x5c48>
   182a0:	sub	r3, r7, r8
   182a4:	cmp	r3, #2
   182a8:	ble	18364 <_start@@Base+0x5c48>
   182ac:	mov	r1, r8
   182b0:	mov	r2, r7
   182b4:	mov	r0, r5
   182b8:	bl	13a14 <_start@@Base+0x12f8>
   182bc:	cmp	r8, r0
   182c0:	mov	r1, r0
   182c4:	beq	18364 <_start@@Base+0x5c48>
   182c8:	ldr	ip, [sp, #320]	; 0x140
   182cc:	mov	lr, #9
   182d0:	movw	r3, #40836	; 0x9f84
   182d4:	movt	r3, #1
   182d8:	mov	r2, r7
   182dc:	mov	r0, r5
   182e0:	str	lr, [sp]
   182e4:	str	ip, [sp, #4]
   182e8:	str	r3, [sp, #8]
   182ec:	mov	r3, #4
   182f0:	bl	2c538 <flatcc_json_parser_union_vector@@Base>
   182f4:	mov	r1, r0
   182f8:	b	181a8 <_start@@Base+0x5a8c>
   182fc:	add	r8, r8, #8
   18300:	mov	r1, r7
   18304:	mov	r0, r8
   18308:	bl	12810 <_start@@Base+0xf4>
   1830c:	mov	ip, r1
   18310:	bic	r1, r0, #255	; 0xff
   18314:	add	r3, pc, #196	; 0xc4
   18318:	ldrd	r2, [r3]
   1831c:	str	r1, [sp, #224]	; 0xe0
   18320:	str	ip, [sp, #228]	; 0xe4
   18324:	ldrd	r0, [sp, #224]	; 0xe0
   18328:	cmp	r1, r3
   1832c:	cmpeq	r0, r2
   18330:	beq	193d8 <_start@@Base+0x6cbc>
   18334:	lsr	r1, ip, #16
   18338:	mov	r3, #0
   1833c:	mov	r2, #0
   18340:	lsl	r1, r1, #16
   18344:	str	r3, [sp, #208]	; 0xd0
   18348:	mov	r3, #0
   1834c:	movt	r3, #29556	; 0x7374
   18350:	str	r1, [sp, #212]	; 0xd4
   18354:	ldrd	r0, [sp, #208]	; 0xd0
   18358:	cmp	r1, r3
   1835c:	cmpeq	r0, r2
   18360:	beq	19274 <_start@@Base+0x6b58>
   18364:	mov	r1, r8
   18368:	mov	r2, r7
   1836c:	mov	r0, r5
   18370:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   18374:	mov	r1, r0
   18378:	b	181a8 <_start@@Base+0x5a8c>
   1837c:	mov	fp, r7
   18380:	b	17e04 <_start@@Base+0x56e8>
   18384:	mov	r4, r7
   18388:	b	17bfc <_start@@Base+0x54e0>
   1838c:	ldrb	r3, [fp, #2]
   18390:	cmp	r3, #32
   18394:	bls	17d64 <_start@@Base+0x5648>
   18398:	add	fp, fp, #2
   1839c:	b	176a0 <_start@@Base+0x4f84>
   183a0:	strvs	r0, [r0, #-0]
   183a4:	stclvs	6, cr7, [pc, #-420]!	; 18208 <_start@@Base+0x5aec>
   183a8:	cmnvs	r3, r4, ror #8
   183ac:	cmnvs	r8, #-2147483620	; 0x8000001c
   183b0:	strbvs	r6, [pc, -r9, ror #28]!
   183b4:	cmnvs	lr, r1, ror #8
   183b8:	svcvs	0x005f7479
   183bc:	cmnvs	r1, #6464	; 0x1940
   183c0:	svcvs	0x00000000
   183c4:	cmnvs	r1, #6464	; 0x1940
   183c8:	svcpl	0x00636860
   183cc:			; <UNDEFINED> instruction: 0x6d61696e
   183d0:	cmnvs	r3, r5, ror #8
   183d4:	cmnvs	r8, #-2147483620	; 0x8000001c
   183d8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   183dc:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   183e0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   183e4:	cmnvc	r4, #116, 30	; 0x1d0
   183e8:	svcpl	0x00636861
   183ec:			; <UNDEFINED> instruction: 0x6d61696e
   183f0:	svcpl	0x006b6963
   183f4:	cmnvc	r9, #1694498816	; 0x65000000
   183f8:	rsbvc	r0, r5, r0
   183fc:	blvs	17f55e8 <__bss_end__@@Base+0x17b5224>
   18400:			; <UNDEFINED> instruction: 0xffffffff
   18404:	cmnvs	r3, #-2013265919	; 0x88000001
   18408:	teqcc	r2, r4, lsr r3
   1840c:	cmnvs	r1, r1, ror #2
   18410:	sub	r3, pc, #48	; 0x30
   18414:	ldrd	r2, [r3]
   18418:	cmp	r1, r3
   1841c:	cmpeq	r0, r2
   18420:	beq	191a4 <_start@@Base+0x6a88>
   18424:	sub	r3, pc, #60	; 0x3c
   18428:	ldrd	r2, [r3]
   1842c:	cmp	r1, r3
   18430:	cmpeq	r0, r2
   18434:	bne	18364 <_start@@Base+0x5c48>
   18438:	add	r8, r8, #8
   1843c:	mov	r1, r7
   18440:	mov	r0, r8
   18444:	bl	12810 <_start@@Base+0xf4>
   18448:	lsr	r3, r0, #16
   1844c:	mov	ip, r1
   18450:	str	r3, [sp, #240]	; 0xf0
   18454:	str	r1, [sp, #244]	; 0xf4
   18458:	ldr	r1, [sp, #240]	; 0xf0
   1845c:	sub	r3, pc, #108	; 0x6c
   18460:	ldrd	r2, [r3]
   18464:	lsl	r1, r1, #16
   18468:	str	r1, [sp, #240]	; 0xf0
   1846c:	ldrd	r0, [sp, #240]	; 0xf0
   18470:	cmp	r1, r3
   18474:	cmpeq	r0, r2
   18478:	beq	192b8 <_start@@Base+0x6b9c>
   1847c:	mov	r3, #0
   18480:	str	r3, [sp, #264]	; 0x108
   18484:	and	r3, ip, #-16777216	; 0xff000000
   18488:	str	r3, [sp, #268]	; 0x10c
   1848c:	add	r3, sp, #264	; 0x108
   18490:	ldrd	r2, [r3]
   18494:	cmp	r3, #1795162112	; 0x6b000000
   18498:	cmpeq	r2, #0
   1849c:	bne	18364 <_start@@Base+0x5c48>
   184a0:	sub	r3, r7, r8
   184a4:	cmp	r3, #1
   184a8:	ble	18364 <_start@@Base+0x5c48>
   184ac:	mov	r1, r8
   184b0:	mov	r2, r7
   184b4:	mov	r0, r5
   184b8:	bl	1392c <_start@@Base+0x1210>
   184bc:	cmp	r8, r0
   184c0:	mov	r1, r0
   184c4:	beq	18364 <_start@@Base+0x5c48>
   184c8:	movw	r3, #40836	; 0x9f84
   184cc:	movt	r3, #1
   184d0:	ldr	ip, [sp, #320]	; 0x140
   184d4:	mov	lr, #5
   184d8:	str	r3, [sp, #8]
   184dc:	mov	r3, #2
   184e0:	b	18190 <_start@@Base+0x5a74>
   184e4:	ldrb	r3, [fp, #2]
   184e8:	cmp	r3, #32
   184ec:	bls	170b8 <_start@@Base+0x499c>
   184f0:	add	fp, fp, #2
   184f4:	b	170d4 <_start@@Base+0x49b8>
   184f8:	mov	fp, r7
   184fc:	b	174b4 <_start@@Base+0x4d98>
   18500:	ldrb	r3, [fp, #2]
   18504:	cmp	r3, #32
   18508:	bls	17644 <_start@@Base+0x4f28>
   1850c:	add	fp, fp, #2
   18510:	b	17660 <_start@@Base+0x4f44>
   18514:	ldr	r1, [sp, #308]	; 0x134
   18518:	add	r3, sp, #320	; 0x140
   1851c:	ldrd	r2, [r3]
   18520:	cmp	r1, r6
   18524:	beq	18fe0 <_start@@Base+0x68c4>
   18528:	cmp	r3, #-2147483648	; 0x80000000
   1852c:	cmpeq	r2, #0
   18530:	bhi	195f0 <_start@@Base+0x6ed4>
   18534:	rsbs	r2, r2, #0
   18538:	add	r1, sp, #312	; 0x138
   1853c:	rsc	r3, r3, #0
   18540:	strd	r2, [r1]
   18544:	b	17e38 <_start@@Base+0x571c>
   18548:	ldr	r3, [sp, #312]	; 0x138
   1854c:	cmp	r3, #0
   18550:	bne	194dc <_start@@Base+0x6dc0>
   18554:	add	r3, sp, #320	; 0x140
   18558:	mov	r1, #0
   1855c:	ldrd	r2, [r3]
   18560:	mvn	r0, #0
   18564:	cmp	r3, r1
   18568:	cmpeq	r2, r0
   1856c:	movls	fp, r4
   18570:	strls	r2, [sp, #308]	; 0x134
   18574:	bls	17c2c <_start@@Base+0x5510>
   18578:	mov	r1, r4
   1857c:	mov	r3, #7
   18580:	mov	r2, r7
   18584:	mov	r0, r5
   18588:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1858c:	mov	fp, r0
   18590:	cmp	r8, fp
   18594:	bne	17c28 <_start@@Base+0x550c>
   18598:	mov	r4, r8
   1859c:	b	17bfc <_start@@Base+0x54e0>
   185a0:	ldrb	r3, [fp, #2]
   185a4:	cmp	r3, #32
   185a8:	addhi	r0, fp, #2
   185ac:	bls	17eac <_start@@Base+0x5790>
   185b0:	cmp	r7, r0
   185b4:	bne	17ec4 <_start@@Base+0x57a8>
   185b8:	mov	ip, #0
   185bc:	mov	r3, #10
   185c0:	mov	r2, r7
   185c4:	mov	r1, r7
   185c8:	mov	r0, r5
   185cc:	str	ip, [sp, #304]	; 0x130
   185d0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   185d4:	ldr	r3, [sp, #304]	; 0x130
   185d8:	b	17980 <_start@@Base+0x5264>
   185dc:	mov	r1, r4
   185e0:	mov	r3, #5
   185e4:	mov	r2, r7
   185e8:	mov	r0, r5
   185ec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   185f0:	mov	r4, r0
   185f4:	b	167f0 <_start@@Base+0x40d4>
   185f8:	ldr	r1, [sp, #308]	; 0x134
   185fc:	add	r3, sp, #320	; 0x140
   18600:	ldrd	r2, [r3]
   18604:	cmp	r1, #0
   18608:	beq	19160 <_start@@Base+0x6a44>
   1860c:	cmp	r3, #-2147483648	; 0x80000000
   18610:	cmpeq	r2, #0
   18614:	bhi	19628 <_start@@Base+0x6f0c>
   18618:	rsbs	r2, r2, #0
   1861c:	add	r1, sp, #312	; 0x138
   18620:	rsc	r3, r3, #0
   18624:	strd	r2, [r1]
   18628:	b	174e8 <_start@@Base+0x4dcc>
   1862c:	add	r3, sp, #308	; 0x134
   18630:	mov	r1, r8
   18634:	mov	r2, r7
   18638:	mov	r0, r5
   1863c:	bl	13dcc <_start@@Base+0x16b0>
   18640:	ldr	r3, [sp, #308]	; 0x134
   18644:	mov	r4, r0
   18648:	cmp	r3, #0
   1864c:	beq	18848 <_start@@Base+0x612c>
   18650:	sub	r9, pc, #600	; 0x258
   18654:	ldrd	r8, [r9]
   18658:	cmp	r7, r4
   1865c:	beq	18688 <_start@@Base+0x5f6c>
   18660:	ldrb	r3, [r4]
   18664:	cmp	r3, #34	; 0x22
   18668:	moveq	r3, #0
   1866c:	addeq	r4, r4, #1
   18670:	streq	r3, [r5, #12]
   18674:	beq	18688 <_start@@Base+0x5f6c>
   18678:	cmp	r3, #46	; 0x2e
   1867c:	movne	r3, #1
   18680:	strne	r3, [r5, #12]
   18684:	beq	18ddc <_start@@Base+0x66c0>
   18688:	sub	ip, r7, r4
   1868c:	cmp	ip, #8
   18690:	bhi	186c4 <_start@@Base+0x5fa8>
   18694:	sub	r3, ip, #1
   18698:	cmp	r3, #7
   1869c:	ldrls	pc, [pc, r3, lsl #2]
   186a0:	b	18850 <_start@@Base+0x6134>
   186a4:	andeq	r8, r1, r0, asr r8
   186a8:	andeq	r8, r1, r4, lsr #17
   186ac:	andeq	r8, r1, r8, ror #16
   186b0:	andeq	r8, r1, ip, lsl #17
   186b4:	andeq	r8, r1, r0, lsl #17
   186b8:	andeq	r8, r1, r4, ror r8
   186bc:	muleq	r1, r8, r8
   186c0:	andeq	r8, r1, r4, asr #13
   186c4:	ldrb	r2, [r4, #7]
   186c8:	mov	r3, #0
   186cc:	mov	lr, r3
   186d0:	ldrb	sl, [r4, #6]
   186d4:	orr	r2, r2, sl, lsl #8
   186d8:	ldrb	sl, [r4, #5]
   186dc:	orr	r2, r2, sl, lsl #16
   186e0:	ldrb	sl, [r4, #4]
   186e4:	orr	sl, r2, sl, lsl #24
   186e8:	ldrb	r0, [r4, #3]
   186ec:	orr	lr, lr, r0
   186f0:	ldrb	r2, [r4]
   186f4:	mov	r6, #0
   186f8:	str	sl, [sp, #24]
   186fc:	ldrb	r0, [r4, #2]
   18700:	lsl	sl, r2, #24
   18704:	ldrb	r2, [r4, #1]
   18708:	orr	r0, lr, r0, lsl #8
   1870c:	orr	r2, sl, r2, lsl #16
   18710:	orr	r3, r2, r0
   18714:	str	r3, [sp, #28]
   18718:	ldrd	r2, [sp, #24]
   1871c:	cmp	r3, r9
   18720:	cmpeq	r2, r8
   18724:	bhi	188d0 <_start@@Base+0x61b4>
   18728:	sub	r1, pc, #808	; 0x328
   1872c:	ldrd	r0, [r1]
   18730:	cmp	r3, r1
   18734:	cmpeq	r2, r0
   18738:	beq	189a8 <_start@@Base+0x628c>
   1873c:	ldr	r1, [sp, #28]
   18740:	mov	r6, #0
   18744:	movw	r3, #24929	; 0x6161
   18748:	movt	r3, #24929	; 0x6161
   1874c:	mov	r2, #0
   18750:	str	r6, [sp, #120]	; 0x78
   18754:	str	r1, [sp, #124]	; 0x7c
   18758:	ldrd	r0, [sp, #120]	; 0x78
   1875c:	cmp	r1, r3
   18760:	cmpeq	r0, r2
   18764:	bne	18c10 <_start@@Base+0x64f4>
   18768:	cmp	ip, #4
   1876c:	ble	18850 <_start@@Base+0x6134>
   18770:	mov	r1, r4
   18774:	mov	r3, #4
   18778:	mov	r2, r7
   1877c:	mov	r0, r5
   18780:	bl	13ccc <_start@@Base+0x15b0>
   18784:	cmp	r0, r4
   18788:	mov	r1, r0
   1878c:	beq	18850 <_start@@Base+0x6134>
   18790:	add	r3, sp, #312	; 0x138
   18794:	mov	r2, r7
   18798:	mov	r0, r5
   1879c:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   187a0:	ldr	r3, [sp, #312]	; 0x138
   187a4:	mov	fp, r0
   187a8:	cmp	r3, #0
   187ac:	beq	176bc <_start@@Base+0x4fa0>
   187b0:	mov	r1, r6
   187b4:	ldr	r0, [r5]
   187b8:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   187bc:	cmp	r0, #0
   187c0:	beq	176bc <_start@@Base+0x4fa0>
   187c4:	ldr	r3, [sp, #312]	; 0x138
   187c8:	str	r3, [r0]
   187cc:	sub	r3, r7, fp
   187d0:	cmp	r3, #1
   187d4:	ble	187e8 <_start@@Base+0x60cc>
   187d8:	ldrb	r3, [fp]
   187dc:	cmp	r3, #32
   187e0:	bhi	187fc <_start@@Base+0x60e0>
   187e4:	beq	18af8 <_start@@Base+0x63dc>
   187e8:	mov	r1, fp
   187ec:	mov	r2, r7
   187f0:	mov	r0, r5
   187f4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   187f8:	mov	fp, r0
   187fc:	cmp	r7, fp
   18800:	beq	17110 <_start@@Base+0x49f4>
   18804:	ldrb	r3, [fp]
   18808:	cmp	r3, #44	; 0x2c
   1880c:	beq	18b0c <_start@@Base+0x63f0>
   18810:	mov	r3, #0
   18814:	str	r3, [sp, #308]	; 0x134
   18818:	ldrb	r3, [fp]
   1881c:	cmp	r3, #125	; 0x7d
   18820:	beq	18970 <_start@@Base+0x6254>
   18824:	mov	r3, #10
   18828:	mov	r1, fp
   1882c:	mov	r2, r7
   18830:	mov	r0, r5
   18834:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   18838:	ldr	r3, [sp, #308]	; 0x134
   1883c:	mov	r4, r0
   18840:	cmp	r3, #0
   18844:	bne	18658 <_start@@Base+0x5f3c>
   18848:	mov	fp, r4
   1884c:	b	17118 <_start@@Base+0x49fc>
   18850:	mov	r1, r4
   18854:	mov	r2, r7
   18858:	mov	r0, r5
   1885c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   18860:	mov	fp, r0
   18864:	b	187cc <_start@@Base+0x60b0>
   18868:	mov	sl, #0
   1886c:	mov	lr, sl
   18870:	b	186f0 <_start@@Base+0x5fd4>
   18874:	mov	r2, #0
   18878:	mov	lr, r2
   1887c:	b	186d8 <_start@@Base+0x5fbc>
   18880:	mov	r2, #0
   18884:	mov	lr, r2
   18888:	b	186e0 <_start@@Base+0x5fc4>
   1888c:	mov	sl, #0
   18890:	mov	lr, sl
   18894:	b	186e8 <_start@@Base+0x5fcc>
   18898:	mov	r2, #0
   1889c:	mov	r3, #0
   188a0:	b	186cc <_start@@Base+0x5fb0>
   188a4:	ldrb	r2, [r4, #1]
   188a8:	mov	r1, #0
   188ac:	ldrb	r0, [r4]
   188b0:	str	r1, [sp, #24]
   188b4:	lsl	r2, r2, #16
   188b8:	orr	r3, r2, r0, lsl #24
   188bc:	str	r3, [sp, #28]
   188c0:	ldrd	r2, [sp, #24]
   188c4:	cmp	r3, r9
   188c8:	cmpeq	r2, r8
   188cc:	bls	1873c <_start@@Base+0x6020>
   188d0:	add	r1, pc, #976	; 0x3d0
   188d4:	ldrd	r0, [r1]
   188d8:	ldrd	r2, [sp, #24]
   188dc:	cmp	r3, r1
   188e0:	cmpeq	r2, r0
   188e4:	beq	18a60 <_start@@Base+0x6344>
   188e8:	mov	r1, #0
   188ec:	mov	r0, #0
   188f0:	str	r1, [sp, #128]	; 0x80
   188f4:	movw	r1, #25443	; 0x6363
   188f8:	movt	r1, #25443	; 0x6363
   188fc:	str	r3, [sp, #132]	; 0x84
   18900:	ldrd	r2, [sp, #128]	; 0x80
   18904:	cmp	r3, r1
   18908:	cmpeq	r2, r0
   1890c:	bne	18b80 <_start@@Base+0x6464>
   18910:	cmp	ip, #4
   18914:	ble	18850 <_start@@Base+0x6134>
   18918:	mov	r1, r4
   1891c:	mov	r3, #4
   18920:	mov	r2, r7
   18924:	mov	r0, r5
   18928:	bl	13ccc <_start@@Base+0x15b0>
   1892c:	cmp	r0, r4
   18930:	mov	r1, r0
   18934:	beq	18850 <_start@@Base+0x6134>
   18938:	add	r3, sp, #312	; 0x138
   1893c:	mov	r2, r7
   18940:	mov	r0, r5
   18944:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   18948:	ldr	r3, [sp, #312]	; 0x138
   1894c:	mov	fp, r0
   18950:	cmp	r3, #0
   18954:	beq	176bc <_start@@Base+0x4fa0>
   18958:	mov	r1, #4
   1895c:	ldr	r0, [r5]
   18960:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   18964:	cmp	r0, #0
   18968:	bne	187c4 <_start@@Base+0x60a8>
   1896c:	b	176bc <_start@@Base+0x4fa0>
   18970:	add	r1, fp, #1
   18974:	sub	r3, r7, r1
   18978:	cmp	r3, #1
   1897c:	ble	18990 <_start@@Base+0x6274>
   18980:	ldrb	r3, [fp, #1]
   18984:	cmp	r3, #32
   18988:	bhi	18df8 <_start@@Base+0x66dc>
   1898c:	beq	18ea0 <_start@@Base+0x6784>
   18990:	mov	r2, r7
   18994:	mov	r0, r5
   18998:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1899c:	mov	r4, r0
   189a0:	ldr	r3, [sp, #308]	; 0x134
   189a4:	b	18840 <_start@@Base+0x6124>
   189a8:	add	r4, r4, #8
   189ac:	mov	r1, r7
   189b0:	str	r6, [sp, #168]	; 0xa8
   189b4:	mov	r0, r4
   189b8:	bl	12810 <_start@@Base+0xf4>
   189bc:	and	r3, r1, #-16777216	; 0xff000000
   189c0:	str	r3, [sp, #172]	; 0xac
   189c4:	ldrd	r2, [sp, #168]	; 0xa8
   189c8:	cmp	r3, #889192448	; 0x35000000
   189cc:	cmpeq	r2, #0
   189d0:	bne	18850 <_start@@Base+0x6134>
   189d4:	sub	r3, r7, r4
   189d8:	cmp	r3, #1
   189dc:	ble	18850 <_start@@Base+0x6134>
   189e0:	mov	r2, r7
   189e4:	mov	r1, r4
   189e8:	mov	r0, r5
   189ec:	bl	1392c <_start@@Base+0x1210>
   189f0:	cmp	r4, r0
   189f4:	mov	sl, r0
   189f8:	beq	18850 <_start@@Base+0x6134>
   189fc:	mov	r1, r0
   18a00:	mov	r2, r7
   18a04:	str	r6, [sp, #320]	; 0x140
   18a08:	add	r3, sp, #320	; 0x140
   18a0c:	mov	r0, r5
   18a10:	bl	13694 <_start@@Base+0xf78>
   18a14:	cmp	sl, r0
   18a18:	mov	fp, r0
   18a1c:	beq	19424 <_start@@Base+0x6d08>
   18a20:	ldr	r3, [sp, #320]	; 0x140
   18a24:	cmp	r3, #0
   18a28:	bne	18a38 <_start@@Base+0x631c>
   18a2c:	ldr	r3, [r5, #8]
   18a30:	tst	r3, #2
   18a34:	beq	187cc <_start@@Base+0x60b0>
   18a38:	mov	r3, #4
   18a3c:	mov	r1, #1
   18a40:	mov	r2, r3
   18a44:	ldr	r0, [r5]
   18a48:	bl	259e0 <flatcc_builder_table_add@@Base>
   18a4c:	cmp	r0, #0
   18a50:	beq	176bc <_start@@Base+0x4fa0>
   18a54:	ldr	r3, [sp, #320]	; 0x140
   18a58:	str	r3, [r0]
   18a5c:	b	187cc <_start@@Base+0x60b0>
   18a60:	cmp	ip, #8
   18a64:	ble	18cc4 <_start@@Base+0x65a8>
   18a68:	mov	r2, r7
   18a6c:	mov	r1, r4
   18a70:	mov	r0, r5
   18a74:	bl	13afc <_start@@Base+0x13e0>
   18a78:	cmp	r0, r4
   18a7c:	mov	r6, r0
   18a80:	beq	18cc4 <_start@@Base+0x65a8>
   18a84:	mov	fp, #0
   18a88:	add	r3, sp, #320	; 0x140
   18a8c:	mov	sl, #0
   18a90:	mov	r1, r0
   18a94:	mov	r2, r7
   18a98:	mov	r0, r5
   18a9c:	strd	sl, [r3]
   18aa0:	bl	1345c <_start@@Base+0xd40>
   18aa4:	cmp	r6, r0
   18aa8:	mov	fp, r0
   18aac:	beq	19244 <_start@@Base+0x6b28>
   18ab0:	add	r3, sp, #320	; 0x140
   18ab4:	ldrd	r2, [r3]
   18ab8:	orrs	r3, r2, r3
   18abc:	bne	18acc <_start@@Base+0x63b0>
   18ac0:	ldr	r3, [r5, #8]
   18ac4:	tst	r3, #2
   18ac8:	beq	187cc <_start@@Base+0x60b0>
   18acc:	mov	r3, #8
   18ad0:	mov	r1, #5
   18ad4:	mov	r2, r3
   18ad8:	ldr	r0, [r5]
   18adc:	bl	259e0 <flatcc_builder_table_add@@Base>
   18ae0:	cmp	r0, #0
   18ae4:	beq	176bc <_start@@Base+0x4fa0>
   18ae8:	add	r3, sp, #320	; 0x140
   18aec:	ldrd	r2, [r3]
   18af0:	strd	r2, [r0]
   18af4:	b	187cc <_start@@Base+0x60b0>
   18af8:	ldrb	r3, [fp, #1]
   18afc:	cmp	r3, #32
   18b00:	addhi	fp, fp, #1
   18b04:	bls	187e8 <_start@@Base+0x60cc>
   18b08:	b	187fc <_start@@Base+0x60e0>
   18b0c:	add	r4, fp, #1
   18b10:	sub	r3, r7, r4
   18b14:	cmp	r3, #1
   18b18:	ble	18b2c <_start@@Base+0x6410>
   18b1c:	ldrb	r3, [fp, #1]
   18b20:	cmp	r3, #32
   18b24:	bhi	18b40 <_start@@Base+0x6424>
   18b28:	beq	18f3c <_start@@Base+0x6820>
   18b2c:	mov	r1, r4
   18b30:	mov	r2, r7
   18b34:	mov	r0, r5
   18b38:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   18b3c:	mov	r4, r0
   18b40:	cmp	r7, r4
   18b44:	beq	18f54 <_start@@Base+0x6838>
   18b48:	ldrb	r3, [r4]
   18b4c:	cmp	r3, #125	; 0x7d
   18b50:	movne	r3, #1
   18b54:	strne	r3, [sp, #308]	; 0x134
   18b58:	bne	18658 <_start@@Base+0x5f3c>
   18b5c:	mov	r3, #0
   18b60:	add	r1, r4, #1
   18b64:	mov	r2, r7
   18b68:	mov	r0, r5
   18b6c:	str	r3, [sp, #308]	; 0x134
   18b70:	bl	13420 <_start@@Base+0xd04>
   18b74:	mov	r4, r0
   18b78:	ldr	r3, [sp, #308]	; 0x134
   18b7c:	b	18840 <_start@@Base+0x6124>
   18b80:	add	r1, pc, #296	; 0x128
   18b84:	ldrd	r0, [r1]
   18b88:	ldrd	r2, [sp, #24]
   18b8c:	cmp	r3, r1
   18b90:	cmpeq	r2, r0
   18b94:	bne	18850 <_start@@Base+0x6134>
   18b98:	cmp	ip, #8
   18b9c:	ble	18e00 <_start@@Base+0x66e4>
   18ba0:	mov	r2, r7
   18ba4:	mov	r1, r4
   18ba8:	mov	r0, r5
   18bac:	bl	13afc <_start@@Base+0x13e0>
   18bb0:	cmp	r0, r4
   18bb4:	mov	r6, r0
   18bb8:	beq	18e00 <_start@@Base+0x66e4>
   18bbc:	mov	fp, #0
   18bc0:	add	r3, sp, #320	; 0x140
   18bc4:	mov	sl, #0
   18bc8:	mov	r1, r0
   18bcc:	mov	r2, r7
   18bd0:	mov	r0, r5
   18bd4:	strd	sl, [r3]
   18bd8:	bl	1345c <_start@@Base+0xd40>
   18bdc:	cmp	r6, r0
   18be0:	mov	fp, r0
   18be4:	beq	19454 <_start@@Base+0x6d38>
   18be8:	add	r3, sp, #320	; 0x140
   18bec:	ldrd	r2, [r3]
   18bf0:	orrs	r3, r2, r3
   18bf4:	bne	18c04 <_start@@Base+0x64e8>
   18bf8:	ldr	r3, [r5, #8]
   18bfc:	tst	r3, #2
   18c00:	beq	187cc <_start@@Base+0x60b0>
   18c04:	mov	r3, #8
   18c08:	mov	r1, #7
   18c0c:	b	18ad4 <_start@@Base+0x63b8>
   18c10:	add	r1, pc, #160	; 0xa0
   18c14:	ldrd	r0, [r1]
   18c18:	ldrd	r2, [sp, #24]
   18c1c:	cmp	r3, r1
   18c20:	cmpeq	r2, r0
   18c24:	beq	18d64 <_start@@Base+0x6648>
   18c28:	ldrd	r0, [sp, #120]	; 0x78
   18c2c:	movw	r3, #25186	; 0x6262
   18c30:	movt	r3, #25186	; 0x6262
   18c34:	mov	r2, #0
   18c38:	cmp	r1, r3
   18c3c:	cmpeq	r0, r2
   18c40:	bne	18850 <_start@@Base+0x6134>
   18c44:	cmp	ip, #4
   18c48:	ble	18850 <_start@@Base+0x6134>
   18c4c:	mov	r1, r4
   18c50:	mov	r3, #4
   18c54:	mov	r2, r7
   18c58:	mov	r0, r5
   18c5c:	bl	13ccc <_start@@Base+0x15b0>
   18c60:	cmp	r0, r4
   18c64:	mov	r1, r0
   18c68:	beq	18850 <_start@@Base+0x6134>
   18c6c:	add	r3, sp, #312	; 0x138
   18c70:	mov	r2, r7
   18c74:	mov	r0, r5
   18c78:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   18c7c:	ldr	r3, [sp, #312]	; 0x138
   18c80:	mov	fp, r0
   18c84:	cmp	r3, #0
   18c88:	beq	176bc <_start@@Base+0x4fa0>
   18c8c:	mov	r1, #2
   18c90:	ldr	r0, [r5]
   18c94:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   18c98:	cmp	r0, #0
   18c9c:	bne	187c4 <_start@@Base+0x60a8>
   18ca0:	b	176bc <_start@@Base+0x4fa0>
   18ca4:	nop	{0}
   18ca8:	teqcc	r2, r4, lsr r3
   18cac:	cmnvs	r3, #-1946157055	; 0x8c000001
   18cb0:	teqcc	r2, r4, lsr r3
   18cb4:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   18cb8:	teqcc	r2, r4, lsr r3
   18cbc:	rsbvs	r6, r2, #536870918	; 0x20000006
   18cc0:	andeq	r0, r4, ip, lsl r1
   18cc4:	add	r4, r4, #8
   18cc8:	mov	r1, r7
   18ccc:	mov	r0, r4
   18cd0:	mov	sl, #0
   18cd4:	bl	12810 <_start@@Base+0xf4>
   18cd8:	and	r3, r1, #-16777216	; 0xff000000
   18cdc:	str	sl, [sp, #176]	; 0xb0
   18ce0:	str	r3, [sp, #180]	; 0xb4
   18ce4:	ldrd	r2, [sp, #176]	; 0xb0
   18ce8:	cmp	r3, #889192448	; 0x35000000
   18cec:	cmpeq	r2, #0
   18cf0:	bne	18850 <_start@@Base+0x6134>
   18cf4:	sub	r3, r7, r4
   18cf8:	cmp	r3, #1
   18cfc:	ble	18850 <_start@@Base+0x6134>
   18d00:	mov	r2, r7
   18d04:	mov	r1, r4
   18d08:	mov	r0, r5
   18d0c:	bl	1392c <_start@@Base+0x1210>
   18d10:	cmp	r4, r0
   18d14:	mov	r6, r0
   18d18:	beq	18850 <_start@@Base+0x6134>
   18d1c:	mov	r1, r0
   18d20:	mov	r2, r7
   18d24:	str	sl, [sp, #320]	; 0x140
   18d28:	add	r3, sp, #320	; 0x140
   18d2c:	mov	r0, r5
   18d30:	bl	13694 <_start@@Base+0xf78>
   18d34:	cmp	r6, r0
   18d38:	mov	fp, r0
   18d3c:	beq	195c0 <_start@@Base+0x6ea4>
   18d40:	ldr	r3, [sp, #320]	; 0x140
   18d44:	cmp	r3, #0
   18d48:	bne	18d58 <_start@@Base+0x663c>
   18d4c:	ldr	r3, [r5, #8]
   18d50:	tst	r3, #2
   18d54:	beq	187cc <_start@@Base+0x60b0>
   18d58:	mov	r3, #4
   18d5c:	mov	r1, #6
   18d60:	b	18a40 <_start@@Base+0x6324>
   18d64:	cmp	ip, #8
   18d68:	ble	18850 <_start@@Base+0x6134>
   18d6c:	mov	r2, r7
   18d70:	mov	r1, r4
   18d74:	mov	r0, r5
   18d78:	bl	13afc <_start@@Base+0x13e0>
   18d7c:	cmp	r0, r4
   18d80:	mov	r6, r0
   18d84:	beq	18850 <_start@@Base+0x6134>
   18d88:	mov	fp, #0
   18d8c:	add	r3, sp, #320	; 0x140
   18d90:	mov	sl, #0
   18d94:	mov	r1, r0
   18d98:	mov	r2, r7
   18d9c:	mov	r0, r5
   18da0:	strd	sl, [r3]
   18da4:	bl	1345c <_start@@Base+0xd40>
   18da8:	cmp	r6, r0
   18dac:	mov	fp, r0
   18db0:	beq	194ac <_start@@Base+0x6d90>
   18db4:	add	r3, sp, #320	; 0x140
   18db8:	ldrd	r2, [r3]
   18dbc:	orrs	r3, r2, r3
   18dc0:	bne	18dd0 <_start@@Base+0x66b4>
   18dc4:	ldr	r3, [r5, #8]
   18dc8:	tst	r3, #2
   18dcc:	beq	187cc <_start@@Base+0x60b0>
   18dd0:	mov	r3, #8
   18dd4:	mov	r1, #3
   18dd8:	b	18ad4 <_start@@Base+0x63b8>
   18ddc:	mov	r1, r4
   18de0:	mov	r3, #5
   18de4:	mov	r2, r7
   18de8:	mov	r0, r5
   18dec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   18df0:	mov	r4, r0
   18df4:	b	18688 <_start@@Base+0x5f6c>
   18df8:	mov	fp, r1
   18dfc:	b	17118 <_start@@Base+0x49fc>
   18e00:	add	r4, r4, #8
   18e04:	mov	r1, r7
   18e08:	mov	r0, r4
   18e0c:	mov	sl, #0
   18e10:	bl	12810 <_start@@Base+0xf4>
   18e14:	and	r3, r1, #-16777216	; 0xff000000
   18e18:	str	sl, [sp, #192]	; 0xc0
   18e1c:	str	r3, [sp, #196]	; 0xc4
   18e20:	ldrd	r2, [sp, #192]	; 0xc0
   18e24:	cmp	r3, #889192448	; 0x35000000
   18e28:	cmpeq	r2, #0
   18e2c:	bne	18850 <_start@@Base+0x6134>
   18e30:	sub	r3, r7, r4
   18e34:	cmp	r3, #1
   18e38:	ble	18850 <_start@@Base+0x6134>
   18e3c:	mov	r2, r7
   18e40:	mov	r1, r4
   18e44:	mov	r0, r5
   18e48:	bl	1392c <_start@@Base+0x1210>
   18e4c:	cmp	r4, r0
   18e50:	mov	r6, r0
   18e54:	beq	18850 <_start@@Base+0x6134>
   18e58:	mov	r1, r0
   18e5c:	mov	r2, r7
   18e60:	str	sl, [sp, #320]	; 0x140
   18e64:	add	r3, sp, #320	; 0x140
   18e68:	mov	r0, r5
   18e6c:	bl	13694 <_start@@Base+0xf78>
   18e70:	cmp	r6, r0
   18e74:	mov	fp, r0
   18e78:	beq	19654 <_start@@Base+0x6f38>
   18e7c:	ldr	r3, [sp, #320]	; 0x140
   18e80:	cmp	r3, #0
   18e84:	bne	18e94 <_start@@Base+0x6778>
   18e88:	ldr	r3, [r5, #8]
   18e8c:	tst	r3, #2
   18e90:	beq	187cc <_start@@Base+0x60b0>
   18e94:	mov	r3, #4
   18e98:	mov	r1, #8
   18e9c:	b	18a40 <_start@@Base+0x6324>
   18ea0:	ldrb	r3, [fp, #2]
   18ea4:	cmp	r3, #32
   18ea8:	bls	18990 <_start@@Base+0x6274>
   18eac:	add	fp, fp, #2
   18eb0:	b	17118 <_start@@Base+0x49fc>
   18eb4:	ldrb	r3, [fp, #2]
   18eb8:	cmp	r3, #32
   18ebc:	addhi	r0, fp, #2
   18ec0:	bls	17190 <_start@@Base+0x4a74>
   18ec4:	cmp	r7, r0
   18ec8:	bne	171a8 <_start@@Base+0x4a8c>
   18ecc:	mov	ip, #0
   18ed0:	mov	r3, #10
   18ed4:	mov	r2, r7
   18ed8:	mov	r1, r7
   18edc:	mov	r0, r5
   18ee0:	str	ip, [sp, #300]	; 0x12c
   18ee4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   18ee8:	ldr	r3, [sp, #300]	; 0x12c
   18eec:	b	16bfc <_start@@Base+0x44e0>
   18ef0:	mov	fp, r5
   18ef4:	mov	sl, r7
   18ef8:	mov	r9, r1
   18efc:	b	17ef0 <_start@@Base+0x57d4>
   18f00:	ldrb	r3, [fp, #2]
   18f04:	cmp	r3, #32
   18f08:	addhi	r0, fp, #2
   18f0c:	bls	178e4 <_start@@Base+0x51c8>
   18f10:	cmp	r7, r0
   18f14:	bne	178fc <_start@@Base+0x51e0>
   18f18:	mov	ip, #0
   18f1c:	mov	r3, #10
   18f20:	mov	r2, r7
   18f24:	mov	r1, r7
   18f28:	mov	r0, r5
   18f2c:	str	ip, [sp, #304]	; 0x130
   18f30:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   18f34:	ldr	r3, [sp, #304]	; 0x130
   18f38:	b	17244 <_start@@Base+0x4b28>
   18f3c:	ldrb	r3, [fp, #2]
   18f40:	cmp	r3, #32
   18f44:	addhi	r4, fp, #2
   18f48:	bls	18b2c <_start@@Base+0x6410>
   18f4c:	cmp	r7, r4
   18f50:	bne	18b48 <_start@@Base+0x642c>
   18f54:	mov	ip, #0
   18f58:	mov	r3, #10
   18f5c:	mov	r2, r7
   18f60:	mov	r1, r7
   18f64:	mov	r0, r5
   18f68:	str	ip, [sp, #308]	; 0x134
   18f6c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   18f70:	mov	r4, r0
   18f74:	ldr	r3, [sp, #308]	; 0x134
   18f78:	b	18840 <_start@@Base+0x6124>
   18f7c:	mov	r3, #0
   18f80:	add	r1, r0, #1
   18f84:	mov	r2, r7
   18f88:	mov	r0, r5
   18f8c:	str	r3, [sp, #304]	; 0x130
   18f90:	bl	13420 <_start@@Base+0xd04>
   18f94:	ldr	r3, [sp, #304]	; 0x130
   18f98:	b	17980 <_start@@Base+0x5264>
   18f9c:	ldr	r3, [r5, #24]
   18fa0:	cmp	r3, #0
   18fa4:	beq	193a8 <_start@@Base+0x6c8c>
   18fa8:	mov	fp, r5
   18fac:	mov	sl, r7
   18fb0:	mov	r1, r8
   18fb4:	b	16f54 <_start@@Base+0x4838>
   18fb8:	mov	r4, r7
   18fbc:	b	177fc <_start@@Base+0x50e0>
   18fc0:	ldrb	r3, [fp, #2]
   18fc4:	cmp	r3, #32
   18fc8:	bls	16b40 <_start@@Base+0x4424>
   18fcc:	mov	r9, fp
   18fd0:	mov	sl, r7
   18fd4:	mov	fp, r5
   18fd8:	add	r9, r9, #2
   18fdc:	b	17ef0 <_start@@Base+0x57d4>
   18fe0:	cmp	r2, #0
   18fe4:	sbcs	r1, r3, #0
   18fe8:	addge	r1, sp, #312	; 0x138
   18fec:	strdge	r2, [r1]
   18ff0:	bge	17e38 <_start@@Base+0x571c>
   18ff4:	mov	r1, r0
   18ff8:	mov	r3, #7
   18ffc:	mov	r2, r7
   19000:	mov	r0, r5
   19004:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19008:	mov	fp, r0
   1900c:	cmp	r8, fp
   19010:	beq	17e04 <_start@@Base+0x56e8>
   19014:	add	r3, sp, #312	; 0x138
   19018:	ldrd	r2, [r3]
   1901c:	b	17e38 <_start@@Base+0x571c>
   19020:	mov	r3, #0
   19024:	add	r1, r0, #1
   19028:	mov	r2, r7
   1902c:	mov	r0, r5
   19030:	str	r3, [sp, #300]	; 0x12c
   19034:	bl	13420 <_start@@Base+0xd04>
   19038:	ldr	r3, [sp, #300]	; 0x12c
   1903c:	b	16bfc <_start@@Base+0x44e0>
   19040:	mov	r3, #0
   19044:	add	r8, r8, #8
   19048:	mov	r1, r7
   1904c:	mov	r0, r8
   19050:	str	r3, [sp, #216]	; 0xd8
   19054:	bl	12810 <_start@@Base+0xf4>
   19058:	lsr	r3, r1, #16
   1905c:	mov	r2, #0
   19060:	str	r3, [sp, #220]	; 0xdc
   19064:	mov	r3, #0
   19068:	movt	r3, #28773	; 0x7065
   1906c:	ldr	r1, [sp, #220]	; 0xdc
   19070:	lsl	r1, r1, #16
   19074:	str	r1, [sp, #220]	; 0xdc
   19078:	ldrd	r0, [sp, #216]	; 0xd8
   1907c:	cmp	r1, r3
   19080:	cmpeq	r0, r2
   19084:	bne	18364 <_start@@Base+0x5c48>
   19088:	sub	r3, r7, r8
   1908c:	cmp	r3, #2
   19090:	ble	18364 <_start@@Base+0x5c48>
   19094:	mov	r1, r8
   19098:	mov	r2, r7
   1909c:	mov	r0, r5
   190a0:	bl	13a14 <_start@@Base+0x12f8>
   190a4:	cmp	r8, r0
   190a8:	mov	r1, r0
   190ac:	beq	18364 <_start@@Base+0x5c48>
   190b0:	ldr	lr, [pc, #-1016]	; 18cc0 <_start@@Base+0x65a4>
   190b4:	mov	r3, #7
   190b8:	movw	r2, #40836	; 0x9f84
   190bc:	movt	r2, #1
   190c0:	ldr	ip, [sp, #320]	; 0x140
   190c4:	str	r3, [sp]
   190c8:	mov	r3, #3
   190cc:	mov	r0, r5
   190d0:	stmib	sp, {ip, lr}
   190d4:	str	r2, [sp, #12]
   190d8:	mov	r2, r7
   190dc:	bl	2c2b8 <flatcc_json_parser_union_type@@Base>
   190e0:	mov	r1, r0
   190e4:	b	181a8 <_start@@Base+0x5a8c>
   190e8:	mov	r3, #0
   190ec:	add	r1, r0, #1
   190f0:	mov	r2, r7
   190f4:	mov	r0, r5
   190f8:	str	r3, [sp, #304]	; 0x130
   190fc:	bl	13420 <_start@@Base+0xd04>
   19100:	ldr	r3, [sp, #304]	; 0x130
   19104:	b	17244 <_start@@Base+0x4b28>
   19108:	ldr	r3, [sp, #312]	; 0x138
   1910c:	cmp	r3, r8
   19110:	bne	1960c <_start@@Base+0x6ef0>
   19114:	add	r3, sp, #320	; 0x140
   19118:	mov	r1, #0
   1911c:	ldrd	r2, [r3]
   19120:	mvn	r0, #0
   19124:	cmp	r3, r1
   19128:	cmpeq	r2, r0
   1912c:	movls	fp, r4
   19130:	strls	r2, [sp, #308]	; 0x134
   19134:	bls	1782c <_start@@Base+0x5110>
   19138:	mov	r1, r4
   1913c:	mov	r3, #7
   19140:	mov	r2, r7
   19144:	mov	r0, r5
   19148:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1914c:	mov	fp, r0
   19150:	cmp	r6, fp
   19154:	bne	17828 <_start@@Base+0x510c>
   19158:	mov	r4, r6
   1915c:	b	177fc <_start@@Base+0x50e0>
   19160:	cmp	r2, #0
   19164:	sbcs	r1, r3, #0
   19168:	addge	r1, sp, #312	; 0x138
   1916c:	strdge	r2, [r1]
   19170:	bge	174e8 <_start@@Base+0x4dcc>
   19174:	mov	r1, r0
   19178:	mov	r3, #7
   1917c:	mov	r2, r7
   19180:	mov	r0, r5
   19184:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19188:	mov	fp, r0
   1918c:	b	19640 <_start@@Base+0x6f24>
   19190:	ldrb	r3, [fp, #2]
   19194:	cmp	r3, #32
   19198:	addhi	r4, fp, #2
   1919c:	bls	17f7c <_start@@Base+0x5860>
   191a0:	b	17f90 <_start@@Base+0x5874>
   191a4:	add	r4, r8, #8
   191a8:	mov	r1, r7
   191ac:	mov	r0, r4
   191b0:	bl	12810 <_start@@Base+0xf4>
   191b4:	add	r3, pc, #964	; 0x3c4
   191b8:	ldrd	r2, [r3]
   191bc:	cmp	r1, r3
   191c0:	cmpeq	r0, r2
   191c4:	beq	19304 <_start@@Base+0x6be8>
   191c8:	lsr	r3, r0, #16
   191cc:	str	r3, [sp, #256]	; 0x100
   191d0:	ldr	ip, [sp, #256]	; 0x100
   191d4:	str	r1, [sp, #260]	; 0x104
   191d8:	add	r1, sp, #256	; 0x100
   191dc:	add	r3, pc, #932	; 0x3a4
   191e0:	ldrd	r2, [r3]
   191e4:	lsl	ip, ip, #16
   191e8:	str	ip, [sp, #256]	; 0x100
   191ec:	ldrd	r0, [r1]
   191f0:	cmp	r1, r3
   191f4:	cmpeq	r0, r2
   191f8:	bne	19564 <_start@@Base+0x6e48>
   191fc:	sub	r3, r7, r4
   19200:	cmp	r3, #6
   19204:	ble	19564 <_start@@Base+0x6e48>
   19208:	mov	r1, r4
   1920c:	mov	r3, #6
   19210:	mov	r2, r7
   19214:	mov	r0, r5
   19218:	bl	13ccc <_start@@Base+0x15b0>
   1921c:	cmp	r4, r0
   19220:	mov	r1, r0
   19224:	beq	19564 <_start@@Base+0x6e48>
   19228:	movw	r3, #40836	; 0x9f84
   1922c:	movt	r3, #1
   19230:	ldr	ip, [sp, #320]	; 0x140
   19234:	mov	lr, #1
   19238:	str	r3, [sp, #8]
   1923c:	mov	r3, #0
   19240:	b	18190 <_start@@Base+0x5a74>
   19244:	mov	r1, r0
   19248:	add	r0, sp, #320	; 0x140
   1924c:	ldr	r3, [pc, #836]	; 19598 <_start@@Base+0x6e7c>
   19250:	mov	r2, r7
   19254:	str	r0, [sp]
   19258:	mov	r0, r5
   1925c:	bl	160d0 <_start@@Base+0x39b4>
   19260:	cmp	r7, r0
   19264:	cmpne	fp, r0
   19268:	beq	19694 <_start@@Base+0x6f78>
   1926c:	mov	fp, r0
   19270:	b	18ab0 <_start@@Base+0x6394>
   19274:	sub	r3, r7, r8
   19278:	cmp	r3, #2
   1927c:	ble	18364 <_start@@Base+0x5c48>
   19280:	mov	r1, r8
   19284:	mov	r2, r7
   19288:	mov	r0, r5
   1928c:	bl	13a14 <_start@@Base+0x12f8>
   19290:	cmp	r8, r0
   19294:	mov	r1, r0
   19298:	beq	18364 <_start@@Base+0x5c48>
   1929c:	movw	r3, #40836	; 0x9f84
   192a0:	movt	r3, #1
   192a4:	ldr	ip, [sp, #320]	; 0x140
   192a8:	mov	lr, #3
   192ac:	str	r3, [sp, #8]
   192b0:	mov	r3, #1
   192b4:	b	18190 <_start@@Base+0x5a74>
   192b8:	sub	r3, r7, r8
   192bc:	cmp	r3, #6
   192c0:	ble	18364 <_start@@Base+0x5c48>
   192c4:	mov	r1, r8
   192c8:	mov	r3, #6
   192cc:	mov	r2, r7
   192d0:	mov	r0, r5
   192d4:	bl	13ccc <_start@@Base+0x15b0>
   192d8:	cmp	r8, r0
   192dc:	mov	r1, r0
   192e0:	beq	18364 <_start@@Base+0x5c48>
   192e4:	mov	r3, #5
   192e8:	movw	r2, #40836	; 0x9f84
   192ec:	movt	r2, #1
   192f0:	ldr	lr, [pc, #676]	; 1959c <_start@@Base+0x6e80>
   192f4:	str	r3, [sp]
   192f8:	mov	r3, #2
   192fc:	ldr	ip, [sp, #320]	; 0x140
   19300:	b	190cc <_start@@Base+0x69b0>
   19304:	add	r8, r8, #16
   19308:	mov	r1, r7
   1930c:	mov	r0, r8
   19310:	mov	r4, #0
   19314:	bl	12810 <_start@@Base+0xf4>
   19318:	bic	r1, r1, #255	; 0xff
   1931c:	add	r3, pc, #620	; 0x26c
   19320:	ldrd	r2, [r3]
   19324:	str	r4, [sp, #280]	; 0x118
   19328:	str	r1, [sp, #284]	; 0x11c
   1932c:	add	r1, sp, #280	; 0x118
   19330:	ldrd	r0, [r1]
   19334:	cmp	r1, r3
   19338:	cmpeq	r0, r2
   1933c:	bne	18364 <_start@@Base+0x5c48>
   19340:	sub	r3, r7, r8
   19344:	cmp	r3, #3
   19348:	ble	18364 <_start@@Base+0x5c48>
   1934c:	mov	r1, r8
   19350:	mov	r3, #3
   19354:	mov	r2, r7
   19358:	mov	r0, r5
   1935c:	bl	13ccc <_start@@Base+0x15b0>
   19360:	cmp	r8, r0
   19364:	mov	r1, r0
   19368:	beq	18364 <_start@@Base+0x5c48>
   1936c:	mov	r6, #1
   19370:	movw	r2, #40836	; 0x9f84
   19374:	movt	r2, #1
   19378:	ldr	lr, [pc, #544]	; 195a0 <_start@@Base+0x6e84>
   1937c:	mov	r3, r4
   19380:	str	r6, [sp]
   19384:	ldr	ip, [sp, #320]	; 0x140
   19388:	b	190cc <_start@@Base+0x69b0>
   1938c:	mov	r1, r8
   19390:	mov	r3, #5
   19394:	mov	r2, r7
   19398:	mov	r0, r5
   1939c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   193a0:	mov	r8, r0
   193a4:	b	181f8 <_start@@Base+0x5adc>
   193a8:	mov	r1, r8
   193ac:	mov	r2, r7
   193b0:	ldr	r3, [sp, #320]	; 0x140
   193b4:	mov	r0, r5
   193b8:	bl	2c0a4 <flatcc_json_parser_finalize_unions@@Base>
   193bc:	mov	fp, r0
   193c0:	ldr	r0, [r5]
   193c4:	bl	23fe8 <flatcc_builder_end_table@@Base>
   193c8:	subs	r4, r0, #0
   193cc:	beq	1714c <_start@@Base+0x4a30>
   193d0:	mov	r1, #1
   193d4:	b	170f8 <_start@@Base+0x49dc>
   193d8:	sub	r3, r7, r8
   193dc:	cmp	r3, #7
   193e0:	ble	18364 <_start@@Base+0x5c48>
   193e4:	mov	r1, r8
   193e8:	mov	r3, #7
   193ec:	mov	r2, r7
   193f0:	mov	r0, r5
   193f4:	bl	13ccc <_start@@Base+0x15b0>
   193f8:	cmp	r8, r0
   193fc:	mov	r1, r0
   19400:	beq	18364 <_start@@Base+0x5c48>
   19404:	mov	r3, #3
   19408:	movw	r2, #40836	; 0x9f84
   1940c:	movt	r2, #1
   19410:	ldr	lr, [pc, #396]	; 195a4 <_start@@Base+0x6e88>
   19414:	str	r3, [sp]
   19418:	mov	r3, #1
   1941c:	ldr	ip, [sp, #320]	; 0x140
   19420:	b	190cc <_start@@Base+0x69b0>
   19424:	mov	r1, r0
   19428:	add	r0, sp, #320	; 0x140
   1942c:	ldr	r3, [pc, #372]	; 195a8 <_start@@Base+0x6e8c>
   19430:	mov	r2, r7
   19434:	str	r0, [sp]
   19438:	mov	r0, r5
   1943c:	bl	14e1c <_start@@Base+0x2700>
   19440:	cmp	r7, r0
   19444:	cmpne	fp, r0
   19448:	beq	19694 <_start@@Base+0x6f78>
   1944c:	mov	fp, r0
   19450:	b	18a20 <_start@@Base+0x6304>
   19454:	mov	r1, r0
   19458:	add	r0, sp, #320	; 0x140
   1945c:	ldr	r3, [pc, #328]	; 195ac <_start@@Base+0x6e90>
   19460:	mov	r2, r7
   19464:	str	r0, [sp]
   19468:	mov	r0, r5
   1946c:	bl	160d0 <_start@@Base+0x39b4>
   19470:	cmp	r7, r0
   19474:	cmpne	fp, r0
   19478:	beq	19694 <_start@@Base+0x6f78>
   1947c:	mov	fp, r0
   19480:	b	18be8 <_start@@Base+0x64cc>
   19484:	mov	ip, #0
   19488:	mov	r3, #10
   1948c:	mov	r2, r7
   19490:	mov	r1, r7
   19494:	mov	r0, r5
   19498:	str	ip, [sp, #292]	; 0x124
   1949c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   194a0:	mov	r4, r0
   194a4:	ldr	r3, [sp, #292]	; 0x124
   194a8:	b	16958 <_start@@Base+0x423c>
   194ac:	mov	r1, r0
   194b0:	add	r0, sp, #320	; 0x140
   194b4:	ldr	r3, [pc, #244]	; 195b0 <_start@@Base+0x6e94>
   194b8:	mov	r2, r7
   194bc:	str	r0, [sp]
   194c0:	mov	r0, r5
   194c4:	bl	160d0 <_start@@Base+0x39b4>
   194c8:	cmp	r7, r0
   194cc:	cmpne	fp, r0
   194d0:	beq	19694 <_start@@Base+0x6f78>
   194d4:	mov	fp, r0
   194d8:	b	18db4 <_start@@Base+0x6698>
   194dc:	mov	r1, r0
   194e0:	mov	r3, #8
   194e4:	mov	r2, r7
   194e8:	mov	r0, r5
   194ec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   194f0:	mov	fp, r0
   194f4:	b	18590 <_start@@Base+0x5e74>
   194f8:	sub	r3, r7, r8
   194fc:	cmp	r3, #7
   19500:	ble	18364 <_start@@Base+0x5c48>
   19504:	mov	r1, r8
   19508:	mov	r3, #7
   1950c:	mov	r2, r7
   19510:	mov	r0, r5
   19514:	bl	13ccc <_start@@Base+0x15b0>
   19518:	cmp	r8, r0
   1951c:	mov	r1, r0
   19520:	beq	18364 <_start@@Base+0x5c48>
   19524:	ldr	r2, [pc, #136]	; 195b4 <_start@@Base+0x6e98>
   19528:	movw	ip, #10516	; 0x2914
   1952c:	movt	ip, #1
   19530:	movw	r3, #40836	; 0x9f84
   19534:	movt	r3, #1
   19538:	ldr	lr, [sp, #320]	; 0x140
   1953c:	mov	r4, #9
   19540:	mov	r0, r5
   19544:	stm	sp, {r4, lr}
   19548:	strd	r2, [sp, #8]
   1954c:	mov	r3, #4
   19550:	mov	r2, r7
   19554:	str	ip, [sp, #16]
   19558:	bl	2c66c <flatcc_json_parser_union_type_vector@@Base>
   1955c:	mov	r1, r0
   19560:	b	181a8 <_start@@Base+0x5a8c>
   19564:	mov	r1, r4
   19568:	mov	r2, r7
   1956c:	mov	r0, r5
   19570:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   19574:	mov	r1, r0
   19578:	b	181a8 <_start@@Base+0x5a8c>
   1957c:	nop	{0}
   19580:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   19584:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19588:	ldrbvs	r0, [r2, #-0]!
   1958c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19590:	andeq	r0, r0, r0
   19594:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19598:	andeq	r0, r4, r4, asr #1
   1959c:	andeq	r0, r4, ip, asr #2
   195a0:	andeq	r0, r4, ip, lsr r1
   195a4:	andeq	r0, r4, ip, lsl #2
   195a8:	andeq	r0, r4, ip, lsr #1
   195ac:	ldrdeq	r0, [r4], -ip
   195b0:	strheq	r0, [r4], -r8
   195b4:	andeq	r0, r4, ip, lsr #2
   195b8:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   195bc:	andeq	r0, r4, r8, ror #1
   195c0:	mov	r1, r0
   195c4:	add	r0, sp, #320	; 0x140
   195c8:	ldr	r3, [pc, #-24]	; 195b8 <_start@@Base+0x6e9c>
   195cc:	mov	r2, r7
   195d0:	str	r0, [sp]
   195d4:	mov	r0, r5
   195d8:	bl	14e1c <_start@@Base+0x2700>
   195dc:	cmp	r7, r0
   195e0:	cmpne	fp, r0
   195e4:	beq	19694 <_start@@Base+0x6f78>
   195e8:	mov	fp, r0
   195ec:	b	18d40 <_start@@Base+0x6624>
   195f0:	mov	r1, r0
   195f4:	mov	r3, #8
   195f8:	mov	r2, r7
   195fc:	mov	r0, r5
   19600:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19604:	mov	fp, r0
   19608:	b	1900c <_start@@Base+0x68f0>
   1960c:	mov	r1, r0
   19610:	mov	r3, #8
   19614:	mov	r2, r7
   19618:	mov	r0, r5
   1961c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19620:	mov	fp, r0
   19624:	b	19150 <_start@@Base+0x6a34>
   19628:	mov	r1, r0
   1962c:	mov	r3, #8
   19630:	mov	r2, r7
   19634:	mov	r0, r5
   19638:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1963c:	mov	fp, r0
   19640:	cmp	r6, fp
   19644:	beq	174b4 <_start@@Base+0x4d98>
   19648:	add	r3, sp, #312	; 0x138
   1964c:	ldrd	r2, [r3]
   19650:	b	174e8 <_start@@Base+0x4dcc>
   19654:	mov	r1, r0
   19658:	add	r0, sp, #320	; 0x140
   1965c:	ldr	r3, [pc, #-168]	; 195bc <_start@@Base+0x6ea0>
   19660:	mov	r2, r7
   19664:	str	r0, [sp]
   19668:	mov	r0, r5
   1966c:	bl	14e1c <_start@@Base+0x2700>
   19670:	cmp	r7, r0
   19674:	cmpne	fp, r0
   19678:	beq	19694 <_start@@Base+0x6f78>
   1967c:	mov	fp, r0
   19680:	b	18e7c <_start@@Base+0x6760>
   19684:	mov	r9, fp
   19688:	mov	sl, r7
   1968c:	mov	fp, r5
   19690:	b	16738 <_start@@Base+0x401c>
   19694:	mov	fp, r5
   19698:	mov	sl, r7
   1969c:	mov	r9, r0
   196a0:	b	176c8 <_start@@Base+0x4fac>
   196a4:	mov	fp, r0
   196a8:	b	176a0 <_start@@Base+0x4f84>
   196ac:	mov	fp, r0
   196b0:	b	170d4 <_start@@Base+0x49b8>
   196b4:	mov	fp, r0
   196b8:	b	17660 <_start@@Base+0x4f44>
   196bc:	strd	r4, [sp, #-16]!
   196c0:	mov	r4, r2
   196c4:	sub	r2, r2, r1
   196c8:	cmp	r2, #1
   196cc:	mov	r5, r0
   196d0:	str	r6, [sp, #8]
   196d4:	mov	r6, r3
   196d8:	str	lr, [sp, #12]
   196dc:	ble	196f0 <_start@@Base+0x6fd4>
   196e0:	ldrb	r3, [r1]
   196e4:	cmp	r3, #32
   196e8:	bhi	19700 <_start@@Base+0x6fe4>
   196ec:	beq	197d0 <_start@@Base+0x70b4>
   196f0:	mov	r2, r4
   196f4:	mov	r0, r5
   196f8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   196fc:	mov	r1, r0
   19700:	cmp	r4, r1
   19704:	moveq	r3, #0
   19708:	moveq	r0, r4
   1970c:	streq	r3, [r6]
   19710:	beq	197c0 <_start@@Base+0x70a4>
   19714:	ldrb	r3, [r1]
   19718:	cmp	r3, #44	; 0x2c
   1971c:	beq	19794 <_start@@Base+0x7078>
   19720:	mov	r3, #0
   19724:	str	r3, [r6]
   19728:	ldrb	r3, [r1]
   1972c:	cmp	r3, #93	; 0x5d
   19730:	beq	19754 <_start@@Base+0x7038>
   19734:	mov	r2, r4
   19738:	mov	r0, r5
   1973c:	mov	r3, #9
   19740:	ldrd	r4, [sp]
   19744:	ldr	r6, [sp, #8]
   19748:	ldr	lr, [sp, #12]
   1974c:	add	sp, sp, #16
   19750:	b	27f68 <flatcc_json_parser_set_error@@Base>
   19754:	add	r0, r1, #1
   19758:	sub	r3, r4, r0
   1975c:	cmp	r3, #1
   19760:	ble	19774 <_start@@Base+0x7058>
   19764:	ldrb	r3, [r1, #1]
   19768:	cmp	r3, #32
   1976c:	bhi	197c0 <_start@@Base+0x70a4>
   19770:	beq	1981c <_start@@Base+0x7100>
   19774:	mov	r2, r4
   19778:	mov	r1, r0
   1977c:	ldr	r6, [sp, #8]
   19780:	mov	r0, r5
   19784:	ldrd	r4, [sp]
   19788:	ldr	lr, [sp, #12]
   1978c:	add	sp, sp, #16
   19790:	b	2806c <flatcc_json_parser_space_ext@@Base>
   19794:	add	r1, r1, #1
   19798:	mov	r2, r4
   1979c:	mov	r0, r5
   197a0:	bl	13420 <_start@@Base+0xd04>
   197a4:	cmp	r4, r0
   197a8:	beq	19830 <_start@@Base+0x7114>
   197ac:	ldrb	r3, [r0]
   197b0:	cmp	r3, #93	; 0x5d
   197b4:	movne	r3, #1
   197b8:	strne	r3, [r6]
   197bc:	beq	197f4 <_start@@Base+0x70d8>
   197c0:	ldrd	r4, [sp]
   197c4:	ldr	r6, [sp, #8]
   197c8:	add	sp, sp, #12
   197cc:	pop	{pc}		; (ldr pc, [sp], #4)
   197d0:	ldrb	r3, [r1, #1]
   197d4:	cmp	r3, #32
   197d8:	addhi	r1, r1, #1
   197dc:	bhi	19700 <_start@@Base+0x6fe4>
   197e0:	mov	r2, r4
   197e4:	mov	r0, r5
   197e8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   197ec:	mov	r1, r0
   197f0:	b	19700 <_start@@Base+0x6fe4>
   197f4:	mov	r3, #0
   197f8:	mov	r2, r4
   197fc:	ldr	lr, [sp, #12]
   19800:	add	r1, r0, #1
   19804:	mov	r0, r5
   19808:	ldrd	r4, [sp]
   1980c:	str	r3, [r6]
   19810:	ldr	r6, [sp, #8]
   19814:	add	sp, sp, #16
   19818:	b	13420 <_start@@Base+0xd04>
   1981c:	ldrb	r3, [r1, #2]
   19820:	cmp	r3, #32
   19824:	addhi	r0, r1, #2
   19828:	bls	19774 <_start@@Base+0x7058>
   1982c:	b	197c0 <_start@@Base+0x70a4>
   19830:	mov	ip, #0
   19834:	mov	r0, r5
   19838:	mov	r3, #9
   1983c:	mov	r2, r4
   19840:	mov	r1, r4
   19844:	str	ip, [r6]
   19848:	b	19740 <_start@@Base+0x7024>
   1984c:	cmp	r1, r2
   19850:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19854:	strd	r6, [sp, #8]
   19858:	mov	r6, r2
   1985c:	mov	r7, r0
   19860:	strd	r8, [sp, #16]
   19864:	strd	sl, [sp, #24]
   19868:	str	lr, [sp, #32]
   1986c:	sub	sp, sp, #28
   19870:	beq	19884 <_start@@Base+0x7168>
   19874:	mov	fp, r3
   19878:	ldrb	r3, [r1]
   1987c:	cmp	r3, #123	; 0x7b
   19880:	beq	198b8 <_start@@Base+0x719c>
   19884:	mov	r2, r6
   19888:	mov	r0, r7
   1988c:	mov	r3, #21
   19890:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19894:	mov	r5, r0
   19898:	mov	r0, r5
   1989c:	add	sp, sp, #28
   198a0:	ldrd	r4, [sp]
   198a4:	ldrd	r6, [sp, #8]
   198a8:	ldrd	r8, [sp, #16]
   198ac:	ldrd	sl, [sp, #24]
   198b0:	add	sp, sp, #32
   198b4:	pop	{pc}		; (ldr pc, [sp], #4)
   198b8:	add	r4, r1, #1
   198bc:	sub	r3, r2, r4
   198c0:	cmp	r3, #1
   198c4:	ble	198d8 <_start@@Base+0x71bc>
   198c8:	ldrb	r3, [r1, #1]
   198cc:	cmp	r3, #32
   198d0:	bhi	198ec <_start@@Base+0x71d0>
   198d4:	beq	19f50 <_start@@Base+0x7834>
   198d8:	mov	r1, r4
   198dc:	mov	r2, r6
   198e0:	mov	r0, r7
   198e4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   198e8:	mov	r4, r0
   198ec:	cmp	r6, r4
   198f0:	beq	19900 <_start@@Base+0x71e4>
   198f4:	ldrb	r3, [r4]
   198f8:	cmp	r3, #125	; 0x7d
   198fc:	beq	19f64 <_start@@Base+0x7848>
   19900:	cmp	r6, r4
   19904:	beq	19af8 <_start@@Base+0x73dc>
   19908:	ldrb	r3, [r4]
   1990c:	cmp	r3, #34	; 0x22
   19910:	moveq	r3, #0
   19914:	addeq	r4, r4, #1
   19918:	streq	r3, [r7, #12]
   1991c:	beq	19930 <_start@@Base+0x7214>
   19920:	cmp	r3, #46	; 0x2e
   19924:	movne	r3, #1
   19928:	strne	r3, [r7, #12]
   1992c:	beq	19d6c <_start@@Base+0x7650>
   19930:	sub	r2, r6, r4
   19934:	cmp	r2, #8
   19938:	bls	19b10 <_start@@Base+0x73f4>
   1993c:	mov	r1, #0
   19940:	mov	r3, r1
   19944:	ldrb	r0, [r4, #3]
   19948:	orr	r3, r3, r0
   1994c:	ldrb	r0, [r4, #2]
   19950:	orr	r3, r3, r0, lsl #8
   19954:	ldrb	r0, [r4, #1]
   19958:	orr	r3, r3, r0, lsl #16
   1995c:	ldrb	r0, [r4]
   19960:	mov	r8, #0
   19964:	orr	r3, r3, r0, lsl #24
   19968:	and	r9, r3, #-16777216	; 0xff000000
   1996c:	cmp	r9, #1644167168	; 0x62000000
   19970:	cmpeq	r8, #0
   19974:	beq	19b60 <_start@@Base+0x7444>
   19978:	cmp	r9, #1627389952	; 0x61000000
   1997c:	cmpeq	r8, #0
   19980:	bne	19af8 <_start@@Base+0x73dc>
   19984:	cmp	r2, #1
   19988:	ble	19af8 <_start@@Base+0x73dc>
   1998c:	ldr	r2, [r7, #12]
   19990:	ldrb	r3, [r4, #1]
   19994:	cmp	r2, #0
   19998:	beq	19d4c <_start@@Base+0x7630>
   1999c:	cmp	r3, #58	; 0x3a
   199a0:	cmpne	r3, #32
   199a4:	movhi	r3, #1
   199a8:	movls	r3, #0
   199ac:	bhi	19af8 <_start@@Base+0x73dc>
   199b0:	add	r1, r4, #1
   199b4:	str	r3, [r7, #12]
   199b8:	sub	r3, r6, r1
   199bc:	cmp	r3, #1
   199c0:	ble	199d4 <_start@@Base+0x72b8>
   199c4:	ldrb	r3, [r1]
   199c8:	cmp	r3, #32
   199cc:	bhi	199e4 <_start@@Base+0x72c8>
   199d0:	beq	19edc <_start@@Base+0x77c0>
   199d4:	mov	r2, r6
   199d8:	mov	r0, r7
   199dc:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   199e0:	mov	r1, r0
   199e4:	cmp	r6, r1
   199e8:	beq	199f8 <_start@@Base+0x72dc>
   199ec:	ldrb	r3, [r1]
   199f0:	cmp	r3, #58	; 0x3a
   199f4:	beq	19f08 <_start@@Base+0x77ec>
   199f8:	mov	r3, #4
   199fc:	mov	r2, r6
   19a00:	mov	r0, r7
   19a04:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19a08:	mov	sl, r0
   19a0c:	cmp	sl, r4
   19a10:	beq	19af8 <_start@@Base+0x73dc>
   19a14:	mov	r3, #0
   19a18:	mov	r0, #0
   19a1c:	mov	r1, #0
   19a20:	cmp	r6, sl
   19a24:	strh	r3, [sp, #10]
   19a28:	str	r3, [sp, #12]
   19a2c:	strd	r0, [sp, #16]
   19a30:	beq	19d64 <_start@@Base+0x7648>
   19a34:	add	r0, sp, #16
   19a38:	add	r3, sp, #12
   19a3c:	mov	r2, r6
   19a40:	mov	r1, sl
   19a44:	str	r0, [sp]
   19a48:	mov	r0, r7
   19a4c:	bl	2b638 <flatcc_json_parser_integer@@Base>
   19a50:	cmp	sl, r0
   19a54:	mov	r5, r0
   19a58:	bne	19dc8 <_start@@Base+0x76ac>
   19a5c:	add	ip, sp, #10
   19a60:	ldr	r3, [pc, #1300]	; 19f7c <_start@@Base+0x7860>
   19a64:	mov	r2, r6
   19a68:	mov	r1, r5
   19a6c:	mov	r0, r7
   19a70:	str	ip, [sp]
   19a74:	bl	14bc0 <_start@@Base+0x24a4>
   19a78:	cmp	r6, r0
   19a7c:	cmpne	r0, r5
   19a80:	beq	19f34 <_start@@Base+0x7818>
   19a84:	ldrsh	r2, [sp, #10]
   19a88:	mov	r5, r0
   19a8c:	strh	r2, [fp]
   19a90:	sub	r3, r6, r5
   19a94:	cmp	r3, #1
   19a98:	ble	19aac <_start@@Base+0x7390>
   19a9c:	ldrb	r3, [r5]
   19aa0:	cmp	r3, #32
   19aa4:	bhi	19ac0 <_start@@Base+0x73a4>
   19aa8:	beq	19ca8 <_start@@Base+0x758c>
   19aac:	mov	r1, r5
   19ab0:	mov	r2, r6
   19ab4:	mov	r0, r7
   19ab8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   19abc:	mov	r5, r0
   19ac0:	cmp	r6, r5
   19ac4:	beq	19898 <_start@@Base+0x717c>
   19ac8:	ldrb	r3, [r5]
   19acc:	cmp	r3, #44	; 0x2c
   19ad0:	beq	19cbc <_start@@Base+0x75a0>
   19ad4:	cmp	r3, #125	; 0x7d
   19ad8:	beq	19c70 <_start@@Base+0x7554>
   19adc:	mov	r1, r5
   19ae0:	mov	r2, r6
   19ae4:	mov	r0, r7
   19ae8:	mov	r3, #10
   19aec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19af0:	mov	r5, r0
   19af4:	b	19898 <_start@@Base+0x717c>
   19af8:	mov	r1, r4
   19afc:	mov	r2, r6
   19b00:	mov	r0, r7
   19b04:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   19b08:	mov	r5, r0
   19b0c:	b	19a90 <_start@@Base+0x7374>
   19b10:	sub	r3, r2, #1
   19b14:	cmp	r3, #7
   19b18:	ldrls	pc, [pc, r3, lsl #2]
   19b1c:	b	19af8 <_start@@Base+0x73dc>
   19b20:	andeq	r9, r1, r8, asr fp
   19b24:	andeq	r9, r1, r0, asr fp
   19b28:	andeq	r9, r1, r8, asr #22
   19b2c:	andeq	r9, r1, r0, asr #22
   19b30:	andeq	r9, r1, r0, asr #22
   19b34:	andeq	r9, r1, r0, asr #22
   19b38:	andeq	r9, r1, ip, lsr r9
   19b3c:	andeq	r9, r1, ip, lsr r9
   19b40:	mov	r3, #0
   19b44:	b	19944 <_start@@Base+0x7228>
   19b48:	mov	r3, #0
   19b4c:	b	1994c <_start@@Base+0x7230>
   19b50:	mov	r3, #0
   19b54:	b	19954 <_start@@Base+0x7238>
   19b58:	mov	r3, #0
   19b5c:	b	1995c <_start@@Base+0x7240>
   19b60:	cmp	r2, #1
   19b64:	ble	19af8 <_start@@Base+0x73dc>
   19b68:	ldr	r2, [r7, #12]
   19b6c:	ldrb	r3, [r4, #1]
   19b70:	cmp	r2, r8
   19b74:	beq	19d3c <_start@@Base+0x7620>
   19b78:	cmp	r3, #58	; 0x3a
   19b7c:	cmpne	r3, #32
   19b80:	movhi	r3, #1
   19b84:	movls	r3, #0
   19b88:	bhi	19af8 <_start@@Base+0x73dc>
   19b8c:	add	r1, r4, #1
   19b90:	str	r3, [r7, #12]
   19b94:	sub	r3, r6, r1
   19b98:	cmp	r3, #1
   19b9c:	ble	19bb0 <_start@@Base+0x7494>
   19ba0:	ldrb	r3, [r1]
   19ba4:	cmp	r3, #32
   19ba8:	bhi	19bc0 <_start@@Base+0x74a4>
   19bac:	beq	19ec8 <_start@@Base+0x77ac>
   19bb0:	mov	r2, r6
   19bb4:	mov	r0, r7
   19bb8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   19bbc:	mov	r1, r0
   19bc0:	cmp	r6, r1
   19bc4:	beq	19bd4 <_start@@Base+0x74b8>
   19bc8:	ldrb	r3, [r1]
   19bcc:	cmp	r3, #58	; 0x3a
   19bd0:	beq	19ef0 <_start@@Base+0x77d4>
   19bd4:	mov	r3, #4
   19bd8:	mov	r2, r6
   19bdc:	mov	r0, r7
   19be0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19be4:	mov	sl, r0
   19be8:	cmp	sl, r4
   19bec:	beq	19af8 <_start@@Base+0x73dc>
   19bf0:	mov	r3, #0
   19bf4:	mov	r0, #0
   19bf8:	mov	r1, #0
   19bfc:	cmp	r6, sl
   19c00:	strb	r3, [sp, #10]
   19c04:	str	r3, [sp, #12]
   19c08:	strd	r0, [sp, #16]
   19c0c:	beq	19d5c <_start@@Base+0x7640>
   19c10:	add	r0, sp, #16
   19c14:	add	r3, sp, #12
   19c18:	mov	r2, r6
   19c1c:	mov	r1, sl
   19c20:	str	r0, [sp]
   19c24:	mov	r0, r7
   19c28:	bl	2b638 <flatcc_json_parser_integer@@Base>
   19c2c:	cmp	sl, r0
   19c30:	mov	r5, r0
   19c34:	bne	19d88 <_start@@Base+0x766c>
   19c38:	add	ip, sp, #10
   19c3c:	ldr	r3, [pc, #828]	; 19f80 <_start@@Base+0x7864>
   19c40:	mov	r2, r6
   19c44:	mov	r1, r5
   19c48:	mov	r0, r7
   19c4c:	str	ip, [sp]
   19c50:	bl	15974 <_start@@Base+0x3258>
   19c54:	cmp	r6, r0
   19c58:	cmpne	r0, r5
   19c5c:	beq	19f34 <_start@@Base+0x7818>
   19c60:	ldrsb	r2, [sp, #10]
   19c64:	mov	r5, r0
   19c68:	strb	r2, [fp, #2]
   19c6c:	b	19a90 <_start@@Base+0x7374>
   19c70:	add	r1, r5, #1
   19c74:	sub	r3, r6, r1
   19c78:	cmp	r3, #1
   19c7c:	ble	19c94 <_start@@Base+0x7578>
   19c80:	ldrb	r3, [r5, #1]
   19c84:	cmp	r3, #32
   19c88:	movhi	r5, r1
   19c8c:	bhi	19898 <_start@@Base+0x717c>
   19c90:	beq	19e14 <_start@@Base+0x76f8>
   19c94:	mov	r2, r6
   19c98:	mov	r0, r7
   19c9c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   19ca0:	mov	r5, r0
   19ca4:	b	19898 <_start@@Base+0x717c>
   19ca8:	ldrb	r3, [r5, #1]
   19cac:	cmp	r3, #32
   19cb0:	addhi	r5, r5, #1
   19cb4:	bls	19aac <_start@@Base+0x7390>
   19cb8:	b	19ac0 <_start@@Base+0x73a4>
   19cbc:	add	r4, r5, #1
   19cc0:	sub	r3, r6, r4
   19cc4:	cmp	r3, #1
   19cc8:	ble	19cdc <_start@@Base+0x75c0>
   19ccc:	ldrb	r3, [r5, #1]
   19cd0:	cmp	r3, #32
   19cd4:	bhi	19cf0 <_start@@Base+0x75d4>
   19cd8:	beq	19e94 <_start@@Base+0x7778>
   19cdc:	mov	r1, r4
   19ce0:	mov	r2, r6
   19ce4:	mov	r0, r7
   19ce8:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   19cec:	mov	r4, r0
   19cf0:	cmp	r6, r4
   19cf4:	beq	19eac <_start@@Base+0x7790>
   19cf8:	ldrb	r3, [r4]
   19cfc:	cmp	r3, #125	; 0x7d
   19d00:	bne	19900 <_start@@Base+0x71e4>
   19d04:	add	r5, r4, #1
   19d08:	sub	r3, r6, r5
   19d0c:	cmp	r3, #1
   19d10:	ble	19d24 <_start@@Base+0x7608>
   19d14:	ldrb	r3, [r4, #1]
   19d18:	cmp	r3, #32
   19d1c:	bhi	19898 <_start@@Base+0x717c>
   19d20:	beq	19f20 <_start@@Base+0x7804>
   19d24:	mov	r1, r5
   19d28:	mov	r2, r6
   19d2c:	mov	r0, r7
   19d30:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   19d34:	mov	r5, r0
   19d38:	b	19898 <_start@@Base+0x717c>
   19d3c:	cmp	r3, #34	; 0x22
   19d40:	bne	19af8 <_start@@Base+0x73dc>
   19d44:	add	r1, r4, #2
   19d48:	b	19b94 <_start@@Base+0x7478>
   19d4c:	cmp	r3, #34	; 0x22
   19d50:	bne	19af8 <_start@@Base+0x73dc>
   19d54:	add	r1, r4, #2
   19d58:	b	199b8 <_start@@Base+0x729c>
   19d5c:	mov	r5, r6
   19d60:	b	19c38 <_start@@Base+0x751c>
   19d64:	mov	r5, r6
   19d68:	b	19a5c <_start@@Base+0x7340>
   19d6c:	mov	r1, r4
   19d70:	mov	r3, #5
   19d74:	mov	r2, r6
   19d78:	mov	r0, r7
   19d7c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19d80:	mov	r4, r0
   19d84:	b	19930 <_start@@Base+0x7214>
   19d88:	ldr	r1, [sp, #12]
   19d8c:	ldrd	r2, [sp, #16]
   19d90:	cmp	r1, #0
   19d94:	beq	19e28 <_start@@Base+0x770c>
   19d98:	cmp	r3, #0
   19d9c:	cmpeq	r2, #128	; 0x80
   19da0:	rsbls	r2, r2, #0
   19da4:	sxtbls	r2, r2
   19da8:	bls	19c68 <_start@@Base+0x754c>
   19dac:	mov	r1, r0
   19db0:	mov	r3, #8
   19db4:	mov	r2, r6
   19db8:	mov	r0, r7
   19dbc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19dc0:	mov	r5, r0
   19dc4:	b	19e50 <_start@@Base+0x7734>
   19dc8:	ldr	r1, [sp, #12]
   19dcc:	ldrd	r2, [sp, #16]
   19dd0:	cmp	r1, #0
   19dd4:	beq	19e60 <_start@@Base+0x7744>
   19dd8:	cmp	r3, #0
   19ddc:	cmpeq	r2, #32768	; 0x8000
   19de0:	rsbls	r2, r2, #0
   19de4:	sxthls	r2, r2
   19de8:	bls	19a8c <_start@@Base+0x7370>
   19dec:	mov	r1, r0
   19df0:	mov	r3, #8
   19df4:	mov	r2, r6
   19df8:	mov	r0, r7
   19dfc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19e00:	mov	r5, r0
   19e04:	cmp	sl, r5
   19e08:	ldrshne	r2, [sp, #10]
   19e0c:	bne	19a8c <_start@@Base+0x7370>
   19e10:	b	19a5c <_start@@Base+0x7340>
   19e14:	ldrb	r3, [r5, #2]
   19e18:	cmp	r3, #32
   19e1c:	addhi	r5, r5, #2
   19e20:	bls	19c94 <_start@@Base+0x7578>
   19e24:	b	19898 <_start@@Base+0x717c>
   19e28:	cmp	r3, #0
   19e2c:	cmpeq	r2, #127	; 0x7f
   19e30:	sxtbls	r2, r2
   19e34:	bls	19c68 <_start@@Base+0x754c>
   19e38:	mov	r1, r0
   19e3c:	mov	r3, #7
   19e40:	mov	r2, r6
   19e44:	mov	r0, r7
   19e48:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19e4c:	mov	r5, r0
   19e50:	cmp	sl, r5
   19e54:	ldrsbne	r2, [sp, #10]
   19e58:	bne	19c68 <_start@@Base+0x754c>
   19e5c:	b	19c38 <_start@@Base+0x751c>
   19e60:	mov	r1, #0
   19e64:	movw	r0, #32767	; 0x7fff
   19e68:	cmp	r3, r1
   19e6c:	cmpeq	r2, r0
   19e70:	sxthls	r2, r2
   19e74:	bls	19a8c <_start@@Base+0x7370>
   19e78:	mov	r1, r5
   19e7c:	mov	r3, #7
   19e80:	mov	r2, r6
   19e84:	mov	r0, r7
   19e88:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19e8c:	mov	r5, r0
   19e90:	b	19e04 <_start@@Base+0x76e8>
   19e94:	ldrb	r3, [r5, #2]
   19e98:	cmp	r3, #32
   19e9c:	addhi	r4, r5, #2
   19ea0:	bls	19cdc <_start@@Base+0x75c0>
   19ea4:	cmp	r6, r4
   19ea8:	bne	19cf8 <_start@@Base+0x75dc>
   19eac:	mov	r0, r7
   19eb0:	mov	r3, #10
   19eb4:	mov	r2, r6
   19eb8:	mov	r1, r6
   19ebc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19ec0:	mov	r5, r0
   19ec4:	b	19898 <_start@@Base+0x717c>
   19ec8:	ldrb	r3, [r1, #1]
   19ecc:	cmp	r3, #32
   19ed0:	addhi	r1, r1, #1
   19ed4:	bls	19bb0 <_start@@Base+0x7494>
   19ed8:	b	19bc0 <_start@@Base+0x74a4>
   19edc:	ldrb	r3, [r1, #1]
   19ee0:	cmp	r3, #32
   19ee4:	addhi	r1, r1, #1
   19ee8:	bls	199d4 <_start@@Base+0x72b8>
   19eec:	b	199e4 <_start@@Base+0x72c8>
   19ef0:	add	r1, r1, #1
   19ef4:	mov	r2, r6
   19ef8:	mov	r0, r7
   19efc:	bl	13420 <_start@@Base+0xd04>
   19f00:	mov	sl, r0
   19f04:	b	19be8 <_start@@Base+0x74cc>
   19f08:	add	r1, r1, #1
   19f0c:	mov	r2, r6
   19f10:	mov	r0, r7
   19f14:	bl	13420 <_start@@Base+0xd04>
   19f18:	mov	sl, r0
   19f1c:	b	19a0c <_start@@Base+0x72f0>
   19f20:	ldrb	r3, [r4, #2]
   19f24:	cmp	r3, #32
   19f28:	addhi	r5, r4, #2
   19f2c:	bls	19d24 <_start@@Base+0x7608>
   19f30:	b	19898 <_start@@Base+0x717c>
   19f34:	mov	r1, r0
   19f38:	mov	r2, r6
   19f3c:	mov	r0, r7
   19f40:	mov	r3, #33	; 0x21
   19f44:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19f48:	mov	r5, r0
   19f4c:	b	19898 <_start@@Base+0x717c>
   19f50:	ldrb	r3, [r1, #2]
   19f54:	cmp	r3, #32
   19f58:	addhi	r4, r1, #2
   19f5c:	bls	198d8 <_start@@Base+0x71bc>
   19f60:	b	198ec <_start@@Base+0x71d0>
   19f64:	mov	r2, r6
   19f68:	add	r1, r4, #1
   19f6c:	mov	r0, r7
   19f70:	bl	13420 <_start@@Base+0xd04>
   19f74:	mov	r5, r0
   19f78:	b	19898 <_start@@Base+0x717c>
   19f7c:	andeq	r0, r4, r8, ror #2
   19f80:	andeq	r0, r4, ip, asr r1
   19f84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19f88:	mov	ip, #0
   19f8c:	cmp	r3, #9
   19f90:	strd	r6, [sp, #8]
   19f94:	mov	r4, r1
   19f98:	mov	r5, r2
   19f9c:	strd	r8, [sp, #16]
   19fa0:	strd	sl, [sp, #24]
   19fa4:	mov	sl, r0
   19fa8:	str	lr, [sp, #32]
   19fac:	sub	sp, sp, #60	; 0x3c
   19fb0:	ldr	fp, [sp, #96]	; 0x60
   19fb4:	str	ip, [fp]
   19fb8:	beq	1a078 <_start@@Base+0x795c>
   19fbc:	bhi	1a01c <_start@@Base+0x7900>
   19fc0:	cmp	r3, #2
   19fc4:	beq	1a3ac <_start@@Base+0x7c90>
   19fc8:	cmp	r3, #8
   19fcc:	beq	1a0ac <_start@@Base+0x7990>
   19fd0:	cmp	r3, ip
   19fd4:	beq	1a378 <_start@@Base+0x7c5c>
   19fd8:	ldr	r3, [sl, #8]
   19fdc:	mov	r2, r5
   19fe0:	mov	r1, r4
   19fe4:	mov	r0, sl
   19fe8:	tst	r3, #1
   19fec:	bne	1a0a0 <_start@@Base+0x7984>
   19ff0:	mov	r3, #15
   19ff4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   19ff8:	mov	r1, r0
   19ffc:	mov	r0, r1
   1a000:	add	sp, sp, #60	; 0x3c
   1a004:	ldrd	r4, [sp]
   1a008:	ldrd	r6, [sp, #8]
   1a00c:	ldrd	r8, [sp, #16]
   1a010:	ldrd	sl, [sp, #24]
   1a014:	add	sp, sp, #32
   1a018:	pop	{pc}		; (ldr pc, [sp], #4)
   1a01c:	cmp	r3, #11
   1a020:	beq	1a030 <_start@@Base+0x7914>
   1a024:	bcc	1a078 <_start@@Base+0x795c>
   1a028:	cmp	r3, #255	; 0xff
   1a02c:	bne	19fd8 <_start@@Base+0x78bc>
   1a030:	mov	r1, r4
   1a034:	mov	r3, fp
   1a038:	mov	r2, r5
   1a03c:	mov	r0, sl
   1a040:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   1a044:	mov	r1, r0
   1a048:	ldr	r3, [sl, #24]
   1a04c:	cmp	r3, #0
   1a050:	bne	19ffc <_start@@Base+0x78e0>
   1a054:	ldr	r3, [fp]
   1a058:	cmp	r3, #0
   1a05c:	bne	19ffc <_start@@Base+0x78e0>
   1a060:	mov	r2, r5
   1a064:	mov	r0, sl
   1a068:	mov	r3, #33	; 0x21
   1a06c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a070:	mov	r1, r0
   1a074:	b	19ffc <_start@@Base+0x78e0>
   1a078:	mov	r1, r4
   1a07c:	mov	r3, fp
   1a080:	mov	r2, r5
   1a084:	mov	r0, sl
   1a088:	bl	15298 <_start@@Base+0x2b7c>
   1a08c:	ldr	r3, [sl, #24]
   1a090:	mov	r1, r0
   1a094:	cmp	r3, #0
   1a098:	beq	1a054 <_start@@Base+0x7938>
   1a09c:	b	19ffc <_start@@Base+0x78e0>
   1a0a0:	bl	29980 <flatcc_json_parser_generic_json@@Base>
   1a0a4:	mov	r1, r0
   1a0a8:	b	19ffc <_start@@Base+0x78e0>
   1a0ac:	mov	r2, #2
   1a0b0:	ldr	r0, [r0]
   1a0b4:	mov	r1, r2
   1a0b8:	bl	21e68 <flatcc_builder_start_struct@@Base>
   1a0bc:	subs	r3, r0, #0
   1a0c0:	mov	r1, r4
   1a0c4:	str	r3, [sp, #20]
   1a0c8:	beq	1a2ec <_start@@Base+0x7bd0>
   1a0cc:	add	r3, sp, #40	; 0x28
   1a0d0:	mov	r2, r5
   1a0d4:	mov	r0, sl
   1a0d8:	bl	13dcc <_start@@Base+0x16b0>
   1a0dc:	ldr	r3, [sp, #40]	; 0x28
   1a0e0:	mov	r1, r0
   1a0e4:	cmp	r3, #0
   1a0e8:	beq	1a2c8 <_start@@Base+0x7bac>
   1a0ec:	mov	r4, r0
   1a0f0:	str	fp, [sp, #96]	; 0x60
   1a0f4:	cmp	r5, r4
   1a0f8:	beq	1a124 <_start@@Base+0x7a08>
   1a0fc:	ldrb	r3, [r4]
   1a100:	cmp	r3, #34	; 0x22
   1a104:	moveq	r3, #0
   1a108:	addeq	r4, r4, #1
   1a10c:	streq	r3, [sl, #12]
   1a110:	beq	1a124 <_start@@Base+0x7a08>
   1a114:	cmp	r3, #46	; 0x2e
   1a118:	movne	r3, #1
   1a11c:	strne	r3, [sl, #12]
   1a120:	beq	1a6d8 <_start@@Base+0x7fbc>
   1a124:	sub	r3, r5, r4
   1a128:	cmp	r3, #8
   1a12c:	bhi	1a160 <_start@@Base+0x7a44>
   1a130:	sub	r3, r3, #1
   1a134:	cmp	r3, #7
   1a138:	ldrls	pc, [pc, r3, lsl #2]
   1a13c:	b	1a364 <_start@@Base+0x7c48>
   1a140:	andeq	sl, r1, ip, asr #6
   1a144:	andeq	sl, r1, r0, asr #6
   1a148:	andeq	sl, r1, r4, lsr r3
   1a14c:	andeq	sl, r1, r8, lsr #6
   1a150:	andeq	sl, r1, ip, lsl r3
   1a154:	andeq	sl, r1, r8, asr r3
   1a158:	andeq	sl, r1, r0, lsl r3
   1a15c:	andeq	sl, r1, r0, ror #2
   1a160:	ldrb	r2, [r4, #7]
   1a164:	mov	r3, #0
   1a168:	mov	ip, r3
   1a16c:	ldrb	r0, [r4, #6]
   1a170:	orr	r1, r2, r0, lsl #8
   1a174:	ldrb	r2, [r4, #5]
   1a178:	mov	r0, ip
   1a17c:	orr	r1, r1, r2, lsl #16
   1a180:	ldrb	r2, [r4, #4]
   1a184:	mov	ip, r0
   1a188:	orr	r2, r1, r2, lsl #24
   1a18c:	ldrb	r0, [r4, #3]
   1a190:	orr	r3, ip, r0
   1a194:	ldrb	r0, [r4, #2]
   1a198:	orr	r3, r3, r0, lsl #8
   1a19c:	ldrb	r0, [r4, #1]
   1a1a0:	orr	r0, r3, r0, lsl #16
   1a1a4:	mov	r6, r2
   1a1a8:	ldrb	r2, [r4]
   1a1ac:	mov	fp, #0
   1a1b0:	orr	r7, r0, r2, lsl #24
   1a1b4:	add	r3, pc, #668	; 0x29c
   1a1b8:	ldrd	r2, [r3]
   1a1bc:	cmp	r7, r3
   1a1c0:	cmpeq	r6, r2
   1a1c4:	bne	1a364 <_start@@Base+0x7c48>
   1a1c8:	add	r4, r4, #8
   1a1cc:	mov	r1, r5
   1a1d0:	mov	r0, r4
   1a1d4:	mov	r8, fp
   1a1d8:	bl	12810 <_start@@Base+0xf4>
   1a1dc:	add	r3, pc, #636	; 0x27c
   1a1e0:	ldrd	r2, [r3]
   1a1e4:	bic	r9, r1, #255	; 0xff
   1a1e8:	cmp	r9, r3
   1a1ec:	cmpeq	fp, r2
   1a1f0:	bne	1a364 <_start@@Base+0x7c48>
   1a1f4:	sub	r3, r5, r4
   1a1f8:	cmp	r3, #3
   1a1fc:	ble	1a364 <_start@@Base+0x7c48>
   1a200:	mov	r1, r4
   1a204:	mov	r3, #3
   1a208:	mov	r2, r5
   1a20c:	mov	r0, sl
   1a210:	bl	13ccc <_start@@Base+0x15b0>
   1a214:	cmp	r4, r0
   1a218:	mov	r1, r0
   1a21c:	str	r0, [sp, #8]
   1a220:	beq	1a364 <_start@@Base+0x7c48>
   1a224:	mov	r2, #0
   1a228:	mov	r3, #0
   1a22c:	strh	fp, [sp, #36]	; 0x24
   1a230:	cmp	r5, r0
   1a234:	str	fp, [sp, #44]	; 0x2c
   1a238:	strd	r2, [sp, #48]	; 0x30
   1a23c:	beq	1a6f4 <_start@@Base+0x7fd8>
   1a240:	add	r0, sp, #48	; 0x30
   1a244:	add	r3, sp, #44	; 0x2c
   1a248:	mov	r2, r5
   1a24c:	mov	fp, r1
   1a250:	str	r0, [sp]
   1a254:	mov	r0, sl
   1a258:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1a25c:	cmp	fp, r0
   1a260:	mov	r4, r0
   1a264:	bne	1a6fc <_start@@Base+0x7fe0>
   1a268:	add	ip, sp, #36	; 0x24
   1a26c:	ldr	r3, [pc, #500]	; 1a468 <_start@@Base+0x7d4c>
   1a270:	mov	r2, r5
   1a274:	mov	r1, r4
   1a278:	mov	r0, sl
   1a27c:	str	ip, [sp]
   1a280:	bl	14988 <_start@@Base+0x226c>
   1a284:	cmp	r5, r0
   1a288:	cmpne	r0, r4
   1a28c:	beq	1a76c <_start@@Base+0x8050>
   1a290:	ldrh	r2, [sp, #36]	; 0x24
   1a294:	ldr	r3, [sp, #20]
   1a298:	strh	r2, [r3]
   1a29c:	mov	r1, r0
   1a2a0:	add	r3, sp, #40	; 0x28
   1a2a4:	mov	r2, r5
   1a2a8:	mov	r0, sl
   1a2ac:	bl	16560 <_start@@Base+0x3e44>
   1a2b0:	ldr	r3, [sp, #40]	; 0x28
   1a2b4:	mov	r4, r0
   1a2b8:	cmp	r3, #0
   1a2bc:	bne	1a0f4 <_start@@Base+0x79d8>
   1a2c0:	ldr	fp, [sp, #96]	; 0x60
   1a2c4:	mov	r1, r0
   1a2c8:	cmp	r5, r1
   1a2cc:	beq	1a2ec <_start@@Base+0x7bd0>
   1a2d0:	ldr	r0, [sl]
   1a2d4:	str	r1, [sp, #8]
   1a2d8:	bl	2203c <flatcc_builder_end_struct@@Base>
   1a2dc:	cmp	r0, #0
   1a2e0:	str	r0, [fp]
   1a2e4:	ldr	r1, [sp, #8]
   1a2e8:	bne	19ffc <_start@@Base+0x78e0>
   1a2ec:	mov	r3, #33	; 0x21
   1a2f0:	mov	r2, r5
   1a2f4:	mov	r0, sl
   1a2f8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a2fc:	ldr	r3, [sl, #24]
   1a300:	mov	r1, r0
   1a304:	cmp	r3, #0
   1a308:	beq	1a054 <_start@@Base+0x7938>
   1a30c:	b	19ffc <_start@@Base+0x78e0>
   1a310:	mov	r2, #0
   1a314:	mov	r3, #0
   1a318:	b	1a168 <_start@@Base+0x7a4c>
   1a31c:	mov	r1, #0
   1a320:	mov	r0, r1
   1a324:	b	1a180 <_start@@Base+0x7a64>
   1a328:	mov	r2, #0
   1a32c:	mov	ip, r2
   1a330:	b	1a18c <_start@@Base+0x7a70>
   1a334:	mov	r2, #0
   1a338:	mov	r3, r2
   1a33c:	b	1a194 <_start@@Base+0x7a78>
   1a340:	mov	r2, #0
   1a344:	mov	r3, r2
   1a348:	b	1a19c <_start@@Base+0x7a80>
   1a34c:	mov	r2, #0
   1a350:	mov	r0, r2
   1a354:	b	1a1a4 <_start@@Base+0x7a88>
   1a358:	mov	r1, #0
   1a35c:	mov	ip, r1
   1a360:	b	1a174 <_start@@Base+0x7a58>
   1a364:	mov	r1, r4
   1a368:	mov	r2, r5
   1a36c:	mov	r0, sl
   1a370:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1a374:	b	1a29c <_start@@Base+0x7b80>
   1a378:	sub	r3, r2, r1
   1a37c:	cmp	r3, #3
   1a380:	ble	1a390 <_start@@Base+0x7c74>
   1a384:	ldrb	r3, [r1]
   1a388:	cmp	r3, #110	; 0x6e
   1a38c:	beq	1a7ec <_start@@Base+0x80d0>
   1a390:	mov	r1, r4
   1a394:	mov	r2, r5
   1a398:	mov	r0, sl
   1a39c:	mov	r3, #26
   1a3a0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a3a4:	mov	r1, r0
   1a3a8:	b	19ffc <_start@@Base+0x78e0>
   1a3ac:	mov	r1, #1
   1a3b0:	ldr	r0, [r0]
   1a3b4:	bl	23668 <flatcc_builder_start_table@@Base>
   1a3b8:	cmp	r0, #0
   1a3bc:	bne	1a69c <_start@@Base+0x7f80>
   1a3c0:	mov	r1, r4
   1a3c4:	add	r3, sp, #36	; 0x24
   1a3c8:	mov	r2, r5
   1a3cc:	mov	r0, sl
   1a3d0:	bl	13dcc <_start@@Base+0x16b0>
   1a3d4:	ldr	r3, [sp, #36]	; 0x24
   1a3d8:	mov	r4, r0
   1a3dc:	cmp	r3, #0
   1a3e0:	beq	1a690 <_start@@Base+0x7f74>
   1a3e4:	str	fp, [sp, #96]	; 0x60
   1a3e8:	cmp	r5, r4
   1a3ec:	beq	1a418 <_start@@Base+0x7cfc>
   1a3f0:	ldrb	r3, [r4]
   1a3f4:	cmp	r3, #34	; 0x22
   1a3f8:	moveq	r3, #0
   1a3fc:	addeq	r4, r4, #1
   1a400:	streq	r3, [sl, #12]
   1a404:	beq	1a418 <_start@@Base+0x7cfc>
   1a408:	cmp	r3, #46	; 0x2e
   1a40c:	movne	r3, #1
   1a410:	strne	r3, [sl, #12]
   1a414:	beq	1a6bc <_start@@Base+0x7fa0>
   1a418:	sub	r3, r5, r4
   1a41c:	cmp	r3, #8
   1a420:	bhi	1a46c <_start@@Base+0x7d50>
   1a424:	sub	r3, r3, #1
   1a428:	cmp	r3, #7
   1a42c:	ldrls	pc, [pc, r3, lsl #2]
   1a430:	b	1a654 <_start@@Base+0x7f38>
   1a434:	andeq	sl, r1, r4, lsr #12
   1a438:	andeq	sl, r1, r8, lsl r6
   1a43c:	andeq	sl, r1, ip, lsl #12
   1a440:	andeq	sl, r1, ip, lsr r6
   1a444:	andeq	sl, r1, r0, lsr r6
   1a448:	andeq	sl, r1, r8, asr #12
   1a44c:	andeq	sl, r1, r0, lsl #12
   1a450:	andeq	sl, r1, ip, ror #8
   1a454:	nop	{0}
   1a458:	svcpl	0x006c656e
   1a45c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1a460:	andeq	r0, r0, r0
   1a464:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1a468:	andeq	r0, r4, r0, lsl #3
   1a46c:	ldrb	r6, [r4, #7]
   1a470:	mov	r7, #0
   1a474:	mov	r3, r7
   1a478:	ldrb	r0, [r4, #6]
   1a47c:	orr	r2, r6, r0, lsl #8
   1a480:	ldrb	r0, [r4, #5]
   1a484:	orr	r2, r2, r0, lsl #16
   1a488:	ldrb	r0, [r4, #4]
   1a48c:	orr	r2, r2, r0, lsl #24
   1a490:	ldrb	r0, [r4, #3]
   1a494:	orr	r3, r3, r0
   1a498:	ldrb	r0, [r4, #2]
   1a49c:	orr	r3, r3, r0, lsl #8
   1a4a0:	ldrb	r0, [r4, #1]
   1a4a4:	orr	r3, r3, r0, lsl #16
   1a4a8:	ldrb	r0, [r4]
   1a4ac:	mov	r8, r2
   1a4b0:	mov	fp, #0
   1a4b4:	orr	r9, r3, r0, lsl #24
   1a4b8:	add	r3, pc, #944	; 0x3b0
   1a4bc:	ldrd	r2, [r3]
   1a4c0:	cmp	r9, r3
   1a4c4:	cmpeq	r8, r2
   1a4c8:	bne	1a654 <_start@@Base+0x7f38>
   1a4cc:	add	r6, r4, #8
   1a4d0:	mov	r1, r5
   1a4d4:	mov	r0, r6
   1a4d8:	bl	12810 <_start@@Base+0xf4>
   1a4dc:	add	r3, pc, #916	; 0x394
   1a4e0:	ldrd	r2, [r3]
   1a4e4:	cmp	r1, r3
   1a4e8:	cmpeq	r0, r2
   1a4ec:	bne	1a6a4 <_start@@Base+0x7f88>
   1a4f0:	add	r4, r4, #16
   1a4f4:	mov	r1, r5
   1a4f8:	str	fp, [sp, #8]
   1a4fc:	mov	r0, r4
   1a500:	bl	12810 <_start@@Base+0xf4>
   1a504:	bic	r3, r1, #255	; 0xff
   1a508:	add	r1, pc, #880	; 0x370
   1a50c:	ldrd	r0, [r1]
   1a510:	str	r3, [sp, #12]
   1a514:	ldrd	r2, [sp, #8]
   1a518:	cmp	r3, r1
   1a51c:	cmpeq	r2, r0
   1a520:	bne	1a654 <_start@@Base+0x7f38>
   1a524:	sub	r3, r5, r4
   1a528:	cmp	r3, #3
   1a52c:	ble	1a654 <_start@@Base+0x7f38>
   1a530:	mov	r3, #3
   1a534:	mov	r2, r5
   1a538:	mov	r1, r4
   1a53c:	mov	r0, sl
   1a540:	bl	13ccc <_start@@Base+0x15b0>
   1a544:	cmp	r4, r0
   1a548:	mov	r6, r0
   1a54c:	beq	1a654 <_start@@Base+0x7f38>
   1a550:	mov	r2, #0
   1a554:	mov	r3, #0
   1a558:	str	fp, [sp, #40]	; 0x28
   1a55c:	cmp	r5, r0
   1a560:	str	fp, [sp, #44]	; 0x2c
   1a564:	strd	r2, [sp, #48]	; 0x30
   1a568:	beq	1a798 <_start@@Base+0x807c>
   1a56c:	add	r0, sp, #48	; 0x30
   1a570:	add	r3, sp, #44	; 0x2c
   1a574:	mov	r2, r5
   1a578:	mov	r1, r6
   1a57c:	str	r0, [sp]
   1a580:	mov	r0, sl
   1a584:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1a588:	cmp	r6, r0
   1a58c:	mov	r4, r0
   1a590:	bne	1a7a0 <_start@@Base+0x8084>
   1a594:	add	ip, sp, #40	; 0x28
   1a598:	ldr	r3, [pc, #744]	; 1a888 <_start@@Base+0x816c>
   1a59c:	mov	r2, r5
   1a5a0:	mov	r1, r4
   1a5a4:	mov	r0, sl
   1a5a8:	str	ip, [sp]
   1a5ac:	bl	15050 <_start@@Base+0x2934>
   1a5b0:	cmp	r5, r0
   1a5b4:	cmpne	r0, r4
   1a5b8:	beq	1a78c <_start@@Base+0x8070>
   1a5bc:	ldr	r2, [sp, #40]	; 0x28
   1a5c0:	mov	r4, r0
   1a5c4:	cmp	r2, #0
   1a5c8:	bne	1a5d8 <_start@@Base+0x7ebc>
   1a5cc:	ldr	r3, [sl, #8]
   1a5d0:	tst	r3, #2
   1a5d4:	beq	1a668 <_start@@Base+0x7f4c>
   1a5d8:	mov	r3, #4
   1a5dc:	mov	r1, #0
   1a5e0:	ldr	r0, [sl]
   1a5e4:	mov	r2, r3
   1a5e8:	bl	259e0 <flatcc_builder_table_add@@Base>
   1a5ec:	cmp	r0, #0
   1a5f0:	beq	1a868 <_start@@Base+0x814c>
   1a5f4:	ldr	r3, [sp, #40]	; 0x28
   1a5f8:	str	r3, [r0]
   1a5fc:	b	1a668 <_start@@Base+0x7f4c>
   1a600:	mov	r6, #0
   1a604:	mov	r7, #0
   1a608:	b	1a474 <_start@@Base+0x7d58>
   1a60c:	mov	r2, #0
   1a610:	mov	r3, r2
   1a614:	b	1a498 <_start@@Base+0x7d7c>
   1a618:	mov	r2, #0
   1a61c:	mov	r3, r2
   1a620:	b	1a4a0 <_start@@Base+0x7d84>
   1a624:	mov	r2, #0
   1a628:	mov	r3, r2
   1a62c:	b	1a4a8 <_start@@Base+0x7d8c>
   1a630:	mov	r2, #0
   1a634:	mov	r3, r2
   1a638:	b	1a488 <_start@@Base+0x7d6c>
   1a63c:	mov	r2, #0
   1a640:	mov	r3, r2
   1a644:	b	1a490 <_start@@Base+0x7d74>
   1a648:	mov	r2, #0
   1a64c:	mov	r3, r2
   1a650:	b	1a480 <_start@@Base+0x7d64>
   1a654:	mov	r1, r4
   1a658:	mov	r2, r5
   1a65c:	mov	r0, sl
   1a660:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1a664:	mov	r4, r0
   1a668:	mov	r1, r4
   1a66c:	add	r3, sp, #36	; 0x24
   1a670:	mov	r2, r5
   1a674:	mov	r0, sl
   1a678:	bl	16560 <_start@@Base+0x3e44>
   1a67c:	ldr	r3, [sp, #36]	; 0x24
   1a680:	mov	r4, r0
   1a684:	cmp	r3, #0
   1a688:	bne	1a3e8 <_start@@Base+0x7ccc>
   1a68c:	ldr	fp, [sp, #96]	; 0x60
   1a690:	ldr	r3, [sl, #24]
   1a694:	cmp	r3, #0
   1a698:	beq	1a750 <_start@@Base+0x8034>
   1a69c:	mov	r1, r4
   1a6a0:	b	1a2ec <_start@@Base+0x7bd0>
   1a6a4:	mov	r1, r6
   1a6a8:	mov	r2, r5
   1a6ac:	mov	r0, sl
   1a6b0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1a6b4:	mov	r4, r0
   1a6b8:	b	1a668 <_start@@Base+0x7f4c>
   1a6bc:	mov	r1, r4
   1a6c0:	mov	r3, #5
   1a6c4:	mov	r2, r5
   1a6c8:	mov	r0, sl
   1a6cc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a6d0:	mov	r4, r0
   1a6d4:	b	1a418 <_start@@Base+0x7cfc>
   1a6d8:	mov	r1, r4
   1a6dc:	mov	r3, #5
   1a6e0:	mov	r2, r5
   1a6e4:	mov	r0, sl
   1a6e8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a6ec:	mov	r4, r0
   1a6f0:	b	1a124 <_start@@Base+0x7a08>
   1a6f4:	mov	r4, r5
   1a6f8:	b	1a268 <_start@@Base+0x7b4c>
   1a6fc:	ldr	r3, [sp, #44]	; 0x2c
   1a700:	cmp	r3, r8
   1a704:	bne	1a850 <_start@@Base+0x8134>
   1a708:	ldrd	r2, [sp, #48]	; 0x30
   1a70c:	mov	r1, #0
   1a710:	movw	r0, #65535	; 0xffff
   1a714:	cmp	r3, r1
   1a718:	cmpeq	r2, r0
   1a71c:	uxthls	r2, r2
   1a720:	movls	r0, r4
   1a724:	bls	1a294 <_start@@Base+0x7b78>
   1a728:	mov	r1, r4
   1a72c:	mov	r3, #7
   1a730:	mov	r2, r5
   1a734:	mov	r0, sl
   1a738:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a73c:	ldr	r3, [sp, #8]
   1a740:	cmp	r3, r0
   1a744:	bne	1a290 <_start@@Base+0x7b74>
   1a748:	mov	r4, r3
   1a74c:	b	1a268 <_start@@Base+0x7b4c>
   1a750:	ldr	r0, [sl]
   1a754:	bl	23fe8 <flatcc_builder_end_table@@Base>
   1a758:	cmp	r0, #0
   1a75c:	str	r0, [fp]
   1a760:	movne	r1, r4
   1a764:	bne	1a048 <_start@@Base+0x792c>
   1a768:	b	1a69c <_start@@Base+0x7f80>
   1a76c:	mov	r1, r0
   1a770:	mov	r3, #33	; 0x21
   1a774:	ldr	fp, [sp, #96]	; 0x60
   1a778:	mov	r2, r5
   1a77c:	mov	r0, sl
   1a780:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a784:	mov	r1, r0
   1a788:	b	1a2c8 <_start@@Base+0x7bac>
   1a78c:	mov	r4, r0
   1a790:	ldr	fp, [sp, #96]	; 0x60
   1a794:	b	1a69c <_start@@Base+0x7f80>
   1a798:	mov	r4, r5
   1a79c:	b	1a594 <_start@@Base+0x7e78>
   1a7a0:	ldr	r1, [sp, #44]	; 0x2c
   1a7a4:	ldrd	r2, [sp, #48]	; 0x30
   1a7a8:	cmp	r1, fp
   1a7ac:	beq	1a81c <_start@@Base+0x8100>
   1a7b0:	cmp	r3, #0
   1a7b4:	cmpeq	r2, #-2147483648	; 0x80000000
   1a7b8:	rsbls	r2, r2, #0
   1a7bc:	strls	r2, [sp, #40]	; 0x28
   1a7c0:	bls	1a5c4 <_start@@Base+0x7ea8>
   1a7c4:	mov	r1, r0
   1a7c8:	mov	r3, #8
   1a7cc:	mov	r2, r5
   1a7d0:	mov	r0, sl
   1a7d4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a7d8:	mov	r4, r0
   1a7dc:	cmp	r6, r4
   1a7e0:	beq	1a594 <_start@@Base+0x7e78>
   1a7e4:	ldr	r2, [sp, #40]	; 0x28
   1a7e8:	b	1a5c4 <_start@@Base+0x7ea8>
   1a7ec:	ldrb	r3, [r1, #1]
   1a7f0:	add	r2, r1, #1
   1a7f4:	cmp	r3, #117	; 0x75
   1a7f8:	bne	1a390 <_start@@Base+0x7c74>
   1a7fc:	ldrb	r3, [r2, #1]!
   1a800:	cmp	r3, #108	; 0x6c
   1a804:	bne	1a390 <_start@@Base+0x7c74>
   1a808:	ldrb	r3, [r2, #1]
   1a80c:	cmp	r3, #108	; 0x6c
   1a810:	addeq	r1, r1, #4
   1a814:	bne	1a390 <_start@@Base+0x7c74>
   1a818:	b	19ffc <_start@@Base+0x78e0>
   1a81c:	mov	r1, #0
   1a820:	mvn	r0, #-2147483648	; 0x80000000
   1a824:	cmp	r3, r1
   1a828:	cmpeq	r2, r0
   1a82c:	strls	r2, [sp, #40]	; 0x28
   1a830:	bls	1a5c4 <_start@@Base+0x7ea8>
   1a834:	mov	r1, r4
   1a838:	mov	r3, #7
   1a83c:	mov	r2, r5
   1a840:	mov	r0, sl
   1a844:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a848:	mov	r4, r0
   1a84c:	b	1a7dc <_start@@Base+0x80c0>
   1a850:	mov	r1, r0
   1a854:	mov	r3, #8
   1a858:	mov	r2, r5
   1a85c:	mov	r0, sl
   1a860:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1a864:	b	1a73c <_start@@Base+0x8020>
   1a868:	ldr	fp, [sp, #96]	; 0x60
   1a86c:	b	1a69c <_start@@Base+0x7f80>
   1a870:	ldrbvs	r6, [pc], #-372	; 1a878 <_start@@Base+0x815c>
   1a874:	cmnvc	r7, #456	; 0x1c8
   1a878:	svcpl	0x0064616d
   1a87c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1a880:	andeq	r0, r0, r0
   1a884:	cmnvs	r7, r0, lsl #10
   1a888:	andeq	r0, r4, r4, ror r1
   1a88c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a890:	mov	r4, r1
   1a894:	sub	r1, r2, r1
   1a898:	cmp	r1, #8
   1a89c:	mov	r5, r3
   1a8a0:	strd	r6, [sp, #8]
   1a8a4:	strd	r8, [sp, #16]
   1a8a8:	strd	sl, [sp, #24]
   1a8ac:	str	lr, [sp, #32]
   1a8b0:	sub	sp, sp, #12
   1a8b4:	bhi	1a8e8 <_start@@Base+0x81cc>
   1a8b8:	sub	r1, r1, #1
   1a8bc:	cmp	r1, #7
   1a8c0:	ldrls	pc, [pc, r1, lsl #2]
   1a8c4:	b	1a970 <_start@@Base+0x8254>
   1a8c8:	andeq	sl, r1, r0, asr #20
   1a8cc:	andeq	sl, r1, r4, ror #20
   1a8d0:	andeq	sl, r1, r0, ror sl
   1a8d4:	andeq	sl, r1, ip, ror sl
   1a8d8:	andeq	sl, r1, r8, lsl #21
   1a8dc:	andeq	sl, r1, ip, asr #20
   1a8e0:	andeq	sl, r1, r8, asr sl
   1a8e4:	andeq	sl, r1, r8, ror #17
   1a8e8:	ldrb	r6, [r4, #7]
   1a8ec:	mov	r7, #0
   1a8f0:	mov	r1, r7
   1a8f4:	ldrb	r8, [r4, #6]
   1a8f8:	orr	r3, r6, r8, lsl #8
   1a8fc:	ldrb	r6, [r4, #5]
   1a900:	orr	r3, r3, r6, lsl #16
   1a904:	ldrb	r6, [r4, #4]
   1a908:	orr	r3, r3, r6, lsl #24
   1a90c:	ldrb	r6, [r4, #3]
   1a910:	orr	r1, r1, r6
   1a914:	ldrb	r6, [r4, #2]
   1a918:	orr	r1, r1, r6, lsl #8
   1a91c:	ldrb	r6, [r4, #1]
   1a920:	orr	r1, r1, r6, lsl #16
   1a924:	ldrb	r8, [r4]
   1a928:	add	fp, pc, #360	; 0x168
   1a92c:	ldrd	sl, [fp]
   1a930:	orr	r7, r1, r8, lsl #24
   1a934:	mov	r8, #0
   1a938:	cmp	r7, fp
   1a93c:	mov	r9, r7
   1a940:	cmpeq	r3, sl
   1a944:	bls	1a990 <_start@@Base+0x8274>
   1a948:	add	r7, pc, #336	; 0x150
   1a94c:	ldrd	r6, [r7]
   1a950:	cmp	r9, r7
   1a954:	cmpeq	r8, r6
   1a958:	beq	1aa1c <_start@@Base+0x8300>
   1a95c:	add	r7, pc, #324	; 0x144
   1a960:	ldrd	r6, [r7]
   1a964:	cmp	r9, r7
   1a968:	cmpeq	r8, r6
   1a96c:	beq	1a9e0 <_start@@Base+0x82c4>
   1a970:	mov	r0, r4
   1a974:	add	sp, sp, #12
   1a978:	ldrd	r4, [sp]
   1a97c:	ldrd	r6, [sp, #8]
   1a980:	ldrd	r8, [sp, #16]
   1a984:	ldrd	sl, [sp, #24]
   1a988:	add	sp, sp, #32
   1a98c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a990:	add	r7, pc, #280	; 0x118
   1a994:	ldrd	r6, [r7]
   1a998:	cmp	r9, r7
   1a99c:	cmpeq	r8, r6
   1a9a0:	bne	1a970 <_start@@Base+0x8254>
   1a9a4:	ldr	r3, [sp, #52]	; 0x34
   1a9a8:	mov	r1, r4
   1a9ac:	str	r3, [sp]
   1a9b0:	mov	r3, #4
   1a9b4:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1a9b8:	cmp	r4, r0
   1a9bc:	mvnne	r6, #11
   1a9c0:	beq	1a970 <_start@@Base+0x8254>
   1a9c4:	ldr	r2, [sp, #48]	; 0x30
   1a9c8:	mvn	r7, #0
   1a9cc:	mov	r3, #1
   1a9d0:	mov	r4, r0
   1a9d4:	strd	r6, [r2]
   1a9d8:	str	r3, [r5]
   1a9dc:	b	1a970 <_start@@Base+0x8254>
   1a9e0:	ldr	r3, [sp, #52]	; 0x34
   1a9e4:	mov	r1, r4
   1a9e8:	str	r3, [sp]
   1a9ec:	mov	r3, #4
   1a9f0:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1a9f4:	cmp	r4, r0
   1a9f8:	beq	1a970 <_start@@Base+0x8254>
   1a9fc:	ldr	r2, [sp, #48]	; 0x30
   1aa00:	mov	r4, r0
   1aa04:	mvn	r1, #0
   1aa08:	mvn	r0, #10
   1aa0c:	mov	r3, #1
   1aa10:	strd	r0, [r2]
   1aa14:	str	r3, [r5]
   1aa18:	b	1a970 <_start@@Base+0x8254>
   1aa1c:	ldr	r3, [sp, #52]	; 0x34
   1aa20:	mov	r1, r4
   1aa24:	str	r3, [sp]
   1aa28:	mov	r3, #4
   1aa2c:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1aa30:	cmp	r4, r0
   1aa34:	beq	1a970 <_start@@Base+0x8254>
   1aa38:	mvn	r6, #9
   1aa3c:	b	1a9c4 <_start@@Base+0x82a8>
   1aa40:	mov	r3, #0
   1aa44:	mov	r1, r3
   1aa48:	b	1a924 <_start@@Base+0x8208>
   1aa4c:	mov	r3, #0
   1aa50:	mov	r1, r3
   1aa54:	b	1a8fc <_start@@Base+0x81e0>
   1aa58:	mov	r6, #0
   1aa5c:	mov	r7, #0
   1aa60:	b	1a8f0 <_start@@Base+0x81d4>
   1aa64:	mov	r3, #0
   1aa68:	mov	r1, r3
   1aa6c:	b	1a91c <_start@@Base+0x8200>
   1aa70:	mov	r3, #0
   1aa74:	mov	r1, r3
   1aa78:	b	1a914 <_start@@Base+0x81f8>
   1aa7c:	mov	r3, #0
   1aa80:	mov	r1, r3
   1aa84:	b	1a90c <_start@@Base+0x81f0>
   1aa88:	mov	r3, #0
   1aa8c:	mov	r1, r3
   1aa90:	b	1a904 <_start@@Base+0x81e8>
   1aa94:	nop	{0}
   1aa98:			; <UNDEFINED> instruction: 0xffffffff
   1aa9c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   1aaa0:	andeq	r0, r0, r0
   1aaa4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   1aaa8:	andeq	r0, r0, r0
   1aaac:	mcrvs	7, 3, r6, cr5, cr2, {1}
   1aab0:	andeq	r0, r0, r0
   1aab4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   1aab8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aabc:	mov	r4, r1
   1aac0:	mov	r1, r2
   1aac4:	strd	r6, [sp, #8]
   1aac8:	mov	r5, r2
   1aacc:	strd	r8, [sp, #16]
   1aad0:	mov	r8, r0
   1aad4:	mov	r0, r4
   1aad8:	strd	sl, [sp, #24]
   1aadc:	mov	sl, r3
   1aae0:	str	lr, [sp, #32]
   1aae4:	sub	sp, sp, #20
   1aae8:	bl	12810 <_start@@Base+0xf4>
   1aaec:	add	r3, pc, #924	; 0x39c
   1aaf0:	ldrd	r2, [r3]
   1aaf4:	ldr	r7, [sp, #56]	; 0x38
   1aaf8:	ldr	fp, [sp, #60]	; 0x3c
   1aafc:	cmp	r1, r3
   1ab00:	cmpeq	r0, r2
   1ab04:	bhi	1aba8 <_start@@Base+0x848c>
   1ab08:	add	r3, pc, #904	; 0x388
   1ab0c:	ldrd	r2, [r3]
   1ab10:	cmp	r1, r3
   1ab14:	cmpeq	r0, r2
   1ab18:	bne	1ace8 <_start@@Base+0x85cc>
   1ab1c:	mov	r1, r5
   1ab20:	add	r0, r4, #8
   1ab24:	bl	12810 <_start@@Base+0xf4>
   1ab28:	add	r3, pc, #880	; 0x370
   1ab2c:	ldrd	r2, [r3]
   1ab30:	cmp	r1, r3
   1ab34:	cmpeq	r0, r2
   1ab38:	bne	1ace8 <_start@@Base+0x85cc>
   1ab3c:	add	r6, r4, #16
   1ab40:	mov	r1, r5
   1ab44:	mov	r0, r6
   1ab48:	bl	12810 <_start@@Base+0xf4>
   1ab4c:	and	r3, r1, #-16777216	; 0xff000000
   1ab50:	mov	r2, #0
   1ab54:	cmp	r3, #1912602624	; 0x72000000
   1ab58:	cmpeq	r2, #0
   1ab5c:	bne	1ace8 <_start@@Base+0x85cc>
   1ab60:	sub	r6, r5, r6
   1ab64:	cmp	r6, #1
   1ab68:	ble	1ace8 <_start@@Base+0x85cc>
   1ab6c:	ldrb	r3, [r4, #17]
   1ab70:	cmp	r3, #46	; 0x2e
   1ab74:	bne	1ace8 <_start@@Base+0x85cc>
   1ab78:	mov	r3, sl
   1ab7c:	mov	r2, r5
   1ab80:	add	r1, r4, #18
   1ab84:	mov	r0, r8
   1ab88:	add	sp, sp, #20
   1ab8c:	ldrd	r4, [sp]
   1ab90:	ldrd	r6, [sp, #8]
   1ab94:	ldrd	r8, [sp, #16]
   1ab98:	ldrd	sl, [sp, #24]
   1ab9c:	ldr	lr, [sp, #32]
   1aba0:	add	sp, sp, #36	; 0x24
   1aba4:	b	12954 <_start@@Base+0x238>
   1aba8:	add	r3, pc, #760	; 0x2f8
   1abac:	ldrd	r2, [r3]
   1abb0:	cmp	r1, r3
   1abb4:	cmpeq	r0, r2
   1abb8:	beq	1ad08 <_start@@Base+0x85ec>
   1abbc:	add	r3, pc, #748	; 0x2ec
   1abc0:	ldrd	r2, [r3]
   1abc4:	cmp	r1, r3
   1abc8:	cmpeq	r0, r2
   1abcc:	bne	1ace8 <_start@@Base+0x85cc>
   1abd0:	mov	r1, r5
   1abd4:	add	r0, r4, #8
   1abd8:	bl	12810 <_start@@Base+0xf4>
   1abdc:	add	r3, pc, #724	; 0x2d4
   1abe0:	ldrd	r2, [r3]
   1abe4:	cmp	r1, r3
   1abe8:	cmpeq	r0, r2
   1abec:	bne	1ace8 <_start@@Base+0x85cc>
   1abf0:	mov	r1, r5
   1abf4:	add	r0, r4, #16
   1abf8:	bl	12810 <_start@@Base+0xf4>
   1abfc:	add	r3, pc, #700	; 0x2bc
   1ac00:	ldrd	r2, [r3]
   1ac04:	cmp	r1, r3
   1ac08:	cmpeq	r0, r2
   1ac0c:	bne	1ace8 <_start@@Base+0x85cc>
   1ac10:	mov	r1, r5
   1ac14:	add	r0, r4, #24
   1ac18:	bl	12810 <_start@@Base+0xf4>
   1ac1c:	add	r3, pc, #676	; 0x2a4
   1ac20:	ldrd	r2, [r3]
   1ac24:	cmp	r1, r3
   1ac28:	cmpeq	r0, r2
   1ac2c:	bne	1ace8 <_start@@Base+0x85cc>
   1ac30:	add	r6, r4, #32
   1ac34:	mov	r1, r5
   1ac38:	mov	r0, r6
   1ac3c:	mov	r9, #0
   1ac40:	bl	12810 <_start@@Base+0xf4>
   1ac44:	and	r3, r1, #-16777216	; 0xff000000
   1ac48:	cmp	r3, #1694498816	; 0x65000000
   1ac4c:	cmpeq	r9, #0
   1ac50:	bne	1ace8 <_start@@Base+0x85cc>
   1ac54:	sub	r6, r5, r6
   1ac58:	cmp	r6, #1
   1ac5c:	ble	1ace8 <_start@@Base+0x85cc>
   1ac60:	ldrb	r3, [r4, #33]	; 0x21
   1ac64:	cmp	r3, #46	; 0x2e
   1ac68:	bne	1ace8 <_start@@Base+0x85cc>
   1ac6c:	add	r6, r4, #34	; 0x22
   1ac70:	mov	r1, r5
   1ac74:	mov	r0, r6
   1ac78:	bl	12810 <_start@@Base+0xf4>
   1ac7c:	bic	r3, r1, #255	; 0xff
   1ac80:	strd	r0, [sp, #8]
   1ac84:	add	r1, pc, #580	; 0x244
   1ac88:	ldrd	r0, [r1]
   1ac8c:	cmp	r3, r1
   1ac90:	cmpeq	r9, r0
   1ac94:	beq	1b20c <_start@@Base+0x8af0>
   1ac98:	add	r3, pc, #568	; 0x238
   1ac9c:	ldrd	r2, [r3]
   1aca0:	ldrd	r0, [sp, #8]
   1aca4:	cmp	r1, r3
   1aca8:	cmpeq	r0, r2
   1acac:	bne	1ace4 <_start@@Base+0x85c8>
   1acb0:	add	r9, r4, #42	; 0x2a
   1acb4:	mov	r1, r5
   1acb8:	mov	r0, r9
   1acbc:	bl	12810 <_start@@Base+0xf4>
   1acc0:	lsr	r3, r1, #16
   1acc4:	mov	r1, #0
   1acc8:	movt	r1, #24940	; 0x616c
   1accc:	mov	r2, #0
   1acd0:	mov	r0, #0
   1acd4:	lsl	r3, r3, #16
   1acd8:	cmp	r3, r1
   1acdc:	cmpeq	r2, r0
   1ace0:	beq	1b244 <_start@@Base+0x8b28>
   1ace4:	mov	r4, r6
   1ace8:	mov	r0, r4
   1acec:	add	sp, sp, #20
   1acf0:	ldrd	r4, [sp]
   1acf4:	ldrd	r6, [sp, #8]
   1acf8:	ldrd	r8, [sp, #16]
   1acfc:	ldrd	sl, [sp, #24]
   1ad00:	add	sp, sp, #32
   1ad04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad08:	mov	r1, r5
   1ad0c:	add	r0, r4, #8
   1ad10:	bl	12810 <_start@@Base+0xf4>
   1ad14:	add	r3, pc, #452	; 0x1c4
   1ad18:	ldrd	r2, [r3]
   1ad1c:	cmp	r1, r3
   1ad20:	cmpeq	r0, r2
   1ad24:	bhi	1ade0 <_start@@Base+0x86c4>
   1ad28:	add	r3, pc, #440	; 0x1b8
   1ad2c:	ldrd	r2, [r3]
   1ad30:	cmp	r1, r3
   1ad34:	cmpeq	r0, r2
   1ad38:	bls	1afc8 <_start@@Base+0x88ac>
   1ad3c:	add	r3, pc, #428	; 0x1ac
   1ad40:	ldrd	r2, [r3]
   1ad44:	cmp	r1, r3
   1ad48:	cmpeq	r0, r2
   1ad4c:	beq	1b0e4 <_start@@Base+0x89c8>
   1ad50:	add	r3, pc, #416	; 0x1a0
   1ad54:	ldrd	r2, [r3]
   1ad58:	cmp	r1, r3
   1ad5c:	cmpeq	r0, r2
   1ad60:	bne	1ace8 <_start@@Base+0x85cc>
   1ad64:	add	r9, r4, #16
   1ad68:	mov	r1, r5
   1ad6c:	mov	r0, r9
   1ad70:	mov	r7, #0
   1ad74:	movt	r7, #28527	; 0x6f6f
   1ad78:	mov	r6, #0
   1ad7c:	bl	12810 <_start@@Base+0xf4>
   1ad80:	lsr	r3, r1, #16
   1ad84:	mov	r2, #0
   1ad88:	lsl	r3, r3, #16
   1ad8c:	cmp	r3, r7
   1ad90:	cmpeq	r2, r6
   1ad94:	bne	1ace8 <_start@@Base+0x85cc>
   1ad98:	sub	r9, r5, r9
   1ad9c:	cmp	r9, #2
   1ada0:	ble	1ace8 <_start@@Base+0x85cc>
   1ada4:	ldrb	r3, [r4, #18]
   1ada8:	cmp	r3, #46	; 0x2e
   1adac:	bne	1ace8 <_start@@Base+0x85cc>
   1adb0:	mov	r3, sl
   1adb4:	mov	r2, r5
   1adb8:	add	r1, r4, #19
   1adbc:	mov	r0, r8
   1adc0:	add	sp, sp, #20
   1adc4:	ldrd	r4, [sp]
   1adc8:	ldrd	r6, [sp, #8]
   1adcc:	ldrd	r8, [sp, #16]
   1add0:	ldrd	sl, [sp, #24]
   1add4:	ldr	lr, [sp, #32]
   1add8:	add	sp, sp, #36	; 0x24
   1addc:	b	16338 <_start@@Base+0x3c1c>
   1ade0:	add	r3, pc, #280	; 0x118
   1ade4:	ldrd	r2, [r3]
   1ade8:	cmp	r1, r3
   1adec:	cmpeq	r0, r2
   1adf0:	beq	1af58 <_start@@Base+0x883c>
   1adf4:	add	r3, pc, #268	; 0x10c
   1adf8:	ldrd	r2, [r3]
   1adfc:	cmp	r1, r3
   1ae00:	cmpeq	r0, r2
   1ae04:	bhi	1b058 <_start@@Base+0x893c>
   1ae08:	add	r3, pc, #256	; 0x100
   1ae0c:	ldrd	r2, [r3]
   1ae10:	cmp	r1, r3
   1ae14:	cmpeq	r0, r2
   1ae18:	bne	1ace8 <_start@@Base+0x85cc>
   1ae1c:	add	r7, pc, #244	; 0xf4
   1ae20:	ldrd	r6, [r7]
   1ae24:	add	r9, r4, #16
   1ae28:	mov	r1, r5
   1ae2c:	mov	r0, r9
   1ae30:	bl	12810 <_start@@Base+0xf4>
   1ae34:	bic	r2, r0, #255	; 0xff
   1ae38:	cmp	r1, r7
   1ae3c:	cmpeq	r2, r6
   1ae40:	bne	1ace8 <_start@@Base+0x85cc>
   1ae44:	sub	r9, r5, r9
   1ae48:	cmp	r9, #7
   1ae4c:	ble	1ace8 <_start@@Base+0x85cc>
   1ae50:	ldrb	r3, [r4, #23]
   1ae54:	cmp	r3, #46	; 0x2e
   1ae58:	bne	1ace8 <_start@@Base+0x85cc>
   1ae5c:	mov	r3, sl
   1ae60:	mov	r2, r5
   1ae64:	add	r1, r4, #24
   1ae68:	mov	r0, r8
   1ae6c:	add	sp, sp, #20
   1ae70:	ldrd	r4, [sp]
   1ae74:	ldrd	r6, [sp, #8]
   1ae78:	ldrd	r8, [sp, #16]
   1ae7c:	ldrd	sl, [sp, #24]
   1ae80:	ldr	lr, [sp, #32]
   1ae84:	add	sp, sp, #36	; 0x24
   1ae88:	b	13098 <_start@@Base+0x97c>
   1ae8c:	nop	{0}
   1ae90:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1ae94:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   1ae98:	cmnvs	r3, lr, lsr #18
   1ae9c:			; <UNDEFINED> instruction: 0x46616e74
   1aea0:	cmnvs	r3, r5, ror #8
   1aea4:	cmnmi	r8, #-2147483620	; 0x8000001c
   1aea8:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1aeac:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   1aeb0:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   1aeb4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   1aeb8:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1aebc:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   1aec0:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   1aec4:	cmnpl	r0, #-1073741800	; 0xc0000018
   1aec8:	cmnvs	ip, #100, 10	; 0x19000000
   1aecc:	svcvs	0x006d496e
   1aed0:	andeq	r0, r0, r0
   1aed4:	strbtmi	r6, [pc], -r0, lsl #30
   1aed8:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1aedc:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   1aee0:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   1aee4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1aee8:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1aeec:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1aef0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   1aef4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1aef8:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   1aefc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1af00:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   1af04:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1af08:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   1af0c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1af10:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1af14:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1af18:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1af1c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   1af20:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1af24:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   1af28:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   1af2c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1af30:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   1af34:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   1af38:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1af3c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   1af40:	andeq	r0, r0, r0
   1af44:	svcvs	0x006c6f72
   1af48:	rsbsvc	r7, r4, r5, ror #18
   1af4c:	svcvs	0x0074656d
   1af50:	andeq	r0, r0, r0
   1af54:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1af58:	sub	r7, pc, #64	; 0x40
   1af5c:	ldrd	r6, [r7]
   1af60:	add	r9, r4, #16
   1af64:	mov	r1, r5
   1af68:	mov	r0, r9
   1af6c:	bl	12810 <_start@@Base+0xf4>
   1af70:	bic	r2, r0, #255	; 0xff
   1af74:	cmp	r1, r7
   1af78:	cmpeq	r2, r6
   1af7c:	bne	1ace8 <_start@@Base+0x85cc>
   1af80:	sub	r9, r5, r9
   1af84:	cmp	r9, #7
   1af88:	ble	1ace8 <_start@@Base+0x85cc>
   1af8c:	ldrb	r3, [r4, #23]
   1af90:	cmp	r3, #46	; 0x2e
   1af94:	bne	1ace8 <_start@@Base+0x85cc>
   1af98:	mov	r3, sl
   1af9c:	mov	r2, r5
   1afa0:	add	r1, r4, #24
   1afa4:	mov	r0, r8
   1afa8:	add	sp, sp, #20
   1afac:	ldrd	r4, [sp]
   1afb0:	ldrd	r6, [sp, #8]
   1afb4:	ldrd	r8, [sp, #16]
   1afb8:	ldrd	sl, [sp, #24]
   1afbc:	ldr	lr, [sp, #32]
   1afc0:	add	sp, sp, #36	; 0x24
   1afc4:	b	12ef8 <_start@@Base+0x7dc>
   1afc8:	sub	r3, pc, #168	; 0xa8
   1afcc:	ldrd	r2, [r3]
   1afd0:	cmp	r1, r3
   1afd4:	cmpeq	r0, r2
   1afd8:	bne	1ace8 <_start@@Base+0x85cc>
   1afdc:	add	r9, r4, #16
   1afe0:	mov	r1, r5
   1afe4:	mov	r0, r9
   1afe8:	mov	r7, #0
   1afec:	movt	r7, #28281	; 0x6e79
   1aff0:	mov	r6, #0
   1aff4:	bl	12810 <_start@@Base+0xf4>
   1aff8:	lsr	r3, r1, #16
   1affc:	mov	r2, #0
   1b000:	lsl	r3, r3, #16
   1b004:	cmp	r3, r7
   1b008:	cmpeq	r2, r6
   1b00c:	bne	1ace8 <_start@@Base+0x85cc>
   1b010:	sub	r9, r5, r9
   1b014:	cmp	r9, #2
   1b018:	ble	1ace8 <_start@@Base+0x85cc>
   1b01c:	ldrb	r3, [r4, #18]
   1b020:	cmp	r3, #46	; 0x2e
   1b024:	bne	1ace8 <_start@@Base+0x85cc>
   1b028:	mov	r3, sl
   1b02c:	mov	r2, r5
   1b030:	add	r1, r4, #19
   1b034:	mov	r0, r8
   1b038:	add	sp, sp, #20
   1b03c:	ldrd	r4, [sp]
   1b040:	ldrd	r6, [sp, #8]
   1b044:	ldrd	r8, [sp, #16]
   1b048:	ldrd	sl, [sp, #24]
   1b04c:	ldr	lr, [sp, #32]
   1b050:	add	sp, sp, #36	; 0x24
   1b054:	b	12c70 <_start@@Base+0x554>
   1b058:	sub	r3, pc, #304	; 0x130
   1b05c:	ldrd	r2, [r3]
   1b060:	cmp	r1, r3
   1b064:	cmpeq	r0, r2
   1b068:	bne	1ace8 <_start@@Base+0x85cc>
   1b06c:	add	r9, r4, #16
   1b070:	mov	r1, r5
   1b074:	mov	r0, r9
   1b078:	bl	12810 <_start@@Base+0xf4>
   1b07c:	bic	r2, r0, #255	; 0xff
   1b080:	mov	r3, r1
   1b084:	strd	r0, [sp, #8]
   1b088:	sub	r1, pc, #344	; 0x158
   1b08c:	ldrd	r0, [r1]
   1b090:	cmp	r3, r1
   1b094:	cmpeq	r2, r0
   1b098:	bne	1b154 <_start@@Base+0x8a38>
   1b09c:	sub	r9, r5, r9
   1b0a0:	cmp	r9, #7
   1b0a4:	ble	1ace8 <_start@@Base+0x85cc>
   1b0a8:	ldrb	r3, [r4, #23]
   1b0ac:	cmp	r3, #46	; 0x2e
   1b0b0:	bne	1ace8 <_start@@Base+0x85cc>
   1b0b4:	mov	r3, sl
   1b0b8:	mov	r2, r5
   1b0bc:	add	r1, r4, #24
   1b0c0:	mov	r0, r8
   1b0c4:	add	sp, sp, #20
   1b0c8:	ldrd	r4, [sp]
   1b0cc:	ldrd	r6, [sp, #8]
   1b0d0:	ldrd	r8, [sp, #16]
   1b0d4:	ldrd	sl, [sp, #24]
   1b0d8:	ldr	lr, [sp, #32]
   1b0dc:	add	sp, sp, #36	; 0x24
   1b0e0:	b	1a88c <_start@@Base+0x8170>
   1b0e4:	sub	r7, pc, #428	; 0x1ac
   1b0e8:	ldrd	r6, [r7]
   1b0ec:	add	r9, r4, #16
   1b0f0:	mov	r1, r5
   1b0f4:	mov	r0, r9
   1b0f8:	bl	12810 <_start@@Base+0xf4>
   1b0fc:	mov	r2, #0
   1b100:	cmp	r1, r7
   1b104:	cmpeq	r2, r6
   1b108:	bne	1ace8 <_start@@Base+0x85cc>
   1b10c:	sub	r9, r5, r9
   1b110:	cmp	r9, #4
   1b114:	ble	1ace8 <_start@@Base+0x85cc>
   1b118:	ldrb	r3, [r4, #20]
   1b11c:	cmp	r3, #46	; 0x2e
   1b120:	bne	1ace8 <_start@@Base+0x85cc>
   1b124:	mov	r3, sl
   1b128:	mov	r2, r5
   1b12c:	add	r1, r4, #21
   1b130:	mov	r0, r8
   1b134:	add	sp, sp, #20
   1b138:	ldrd	r4, [sp]
   1b13c:	ldrd	r6, [sp, #8]
   1b140:	ldrd	r8, [sp, #16]
   1b144:	ldrd	sl, [sp, #24]
   1b148:	ldr	lr, [sp, #32]
   1b14c:	add	sp, sp, #36	; 0x24
   1b150:	b	132a0 <_start@@Base+0xb84>
   1b154:	sub	r3, pc, #532	; 0x214
   1b158:	ldrd	r2, [r3]
   1b15c:	ldrd	r0, [sp, #8]
   1b160:	cmp	r1, r3
   1b164:	cmpeq	r0, r2
   1b168:	bne	1ace8 <_start@@Base+0x85cc>
   1b16c:	add	r9, r4, #24
   1b170:	mov	r1, r5
   1b174:	mov	r0, r9
   1b178:	bl	12810 <_start@@Base+0xf4>
   1b17c:	bic	r3, r1, #255	; 0xff
   1b180:	sub	r1, pc, #568	; 0x238
   1b184:	ldrd	r0, [r1]
   1b188:	mov	r2, #0
   1b18c:	cmp	r3, r1
   1b190:	cmpeq	r2, r0
   1b194:	bne	1ace8 <_start@@Base+0x85cc>
   1b198:	sub	r9, r5, r9
   1b19c:	cmp	r9, #3
   1b1a0:	ble	1ace8 <_start@@Base+0x85cc>
   1b1a4:	ldrb	r3, [r4, #27]
   1b1a8:	cmp	r3, #46	; 0x2e
   1b1ac:	bne	1ace8 <_start@@Base+0x85cc>
   1b1b0:	add	r6, r4, #28
   1b1b4:	mov	r1, r5
   1b1b8:	mov	r0, r6
   1b1bc:	mov	r9, #0
   1b1c0:	bl	12810 <_start@@Base+0xf4>
   1b1c4:	and	r3, r1, #-16777216	; 0xff000000
   1b1c8:	cmp	r3, #2013265920	; 0x78000000
   1b1cc:	cmpeq	r9, #0
   1b1d0:	bne	1ace4 <_start@@Base+0x85c8>
   1b1d4:	mov	r2, r5
   1b1d8:	mov	r0, r8
   1b1dc:	str	fp, [sp]
   1b1e0:	mov	r3, #1
   1b1e4:	mov	r1, r6
   1b1e8:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1b1ec:	cmp	r6, r0
   1b1f0:	mov	r4, r0
   1b1f4:	beq	1ace8 <_start@@Base+0x85cc>
   1b1f8:	mov	r2, #0
   1b1fc:	mov	r3, #0
   1b200:	strd	r2, [r7]
   1b204:	str	r9, [sl]
   1b208:	b	1ace8 <_start@@Base+0x85cc>
   1b20c:	mov	r2, r5
   1b210:	mov	r0, r8
   1b214:	str	fp, [sp]
   1b218:	mov	r3, #3
   1b21c:	mov	r1, r6
   1b220:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1b224:	cmp	r6, r0
   1b228:	mov	r4, r0
   1b22c:	beq	1ace8 <_start@@Base+0x85cc>
   1b230:	mov	r0, #17
   1b234:	mov	r1, #0
   1b238:	strd	r0, [r7]
   1b23c:	str	r9, [sl]
   1b240:	b	1ace8 <_start@@Base+0x85cc>
   1b244:	mov	r2, r5
   1b248:	mov	r0, r8
   1b24c:	str	fp, [sp]
   1b250:	mov	r3, #2
   1b254:	mov	r1, r9
   1b258:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1b25c:	cmp	r9, r0
   1b260:	mov	r4, r0
   1b264:	beq	1ace4 <_start@@Base+0x85c8>
   1b268:	mov	r3, #0
   1b26c:	mov	r2, #0
   1b270:	strd	r2, [r7]
   1b274:	mov	r3, #0
   1b278:	str	r3, [sl]
   1b27c:	b	1ace8 <_start@@Base+0x85cc>
   1b280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b284:	mov	r4, r1
   1b288:	mov	r5, r0
   1b28c:	mov	r1, r2
   1b290:	mov	r0, r4
   1b294:	strd	r6, [sp, #8]
   1b298:	strd	r8, [sp, #16]
   1b29c:	strd	sl, [sp, #24]
   1b2a0:	mov	sl, r2
   1b2a4:	mov	fp, r3
   1b2a8:	str	lr, [sp, #32]
   1b2ac:	sub	sp, sp, #20
   1b2b0:	bl	12810 <_start@@Base+0xf4>
   1b2b4:	add	r3, pc, #876	; 0x36c
   1b2b8:	ldrd	r2, [r3]
   1b2bc:	ldr	r9, [sp, #56]	; 0x38
   1b2c0:	ldr	r8, [sp, #60]	; 0x3c
   1b2c4:	cmp	r1, r3
   1b2c8:	cmpeq	r0, r2
   1b2cc:	bhi	1b3ac <_start@@Base+0x8c90>
   1b2d0:	add	r3, pc, #856	; 0x358
   1b2d4:	ldrd	r2, [r3]
   1b2d8:	mov	r6, #0
   1b2dc:	bic	r7, r1, #255	; 0xff
   1b2e0:	cmp	r1, r3
   1b2e4:	cmpeq	r0, r2
   1b2e8:	bhi	1b338 <_start@@Base+0x8c1c>
   1b2ec:	add	r3, pc, #836	; 0x344
   1b2f0:	ldrd	r2, [r3]
   1b2f4:	cmp	r7, r3
   1b2f8:	cmpeq	r6, r2
   1b2fc:	bne	1b318 <_start@@Base+0x8bfc>
   1b300:	sub	r3, sl, r4
   1b304:	cmp	r3, #3
   1b308:	ble	1b318 <_start@@Base+0x8bfc>
   1b30c:	ldrb	r3, [r4, #3]
   1b310:	cmp	r3, #46	; 0x2e
   1b314:	beq	1b574 <_start@@Base+0x8e58>
   1b318:	mov	r0, r4
   1b31c:	add	sp, sp, #20
   1b320:	ldrd	r4, [sp]
   1b324:	ldrd	r6, [sp, #8]
   1b328:	ldrd	r8, [sp, #16]
   1b32c:	ldrd	sl, [sp, #24]
   1b330:	add	sp, sp, #32
   1b334:	pop	{pc}		; (ldr pc, [sp], #4)
   1b338:	add	r3, pc, #768	; 0x300
   1b33c:	ldrd	r2, [r3]
   1b340:	cmp	r7, r3
   1b344:	cmpeq	r6, r2
   1b348:	beq	1b52c <_start@@Base+0x8e10>
   1b34c:	add	r9, pc, #756	; 0x2f4
   1b350:	ldrd	r8, [r9]
   1b354:	and	r6, r0, #-16777216	; 0xff000000
   1b358:	cmp	r1, r9
   1b35c:	cmpeq	r6, r8
   1b360:	bne	1b318 <_start@@Base+0x8bfc>
   1b364:	sub	r3, sl, r4
   1b368:	cmp	r3, #5
   1b36c:	ble	1b318 <_start@@Base+0x8bfc>
   1b370:	ldrb	r3, [r4, #5]
   1b374:	cmp	r3, #46	; 0x2e
   1b378:	bne	1b318 <_start@@Base+0x8bfc>
   1b37c:	mov	r3, fp
   1b380:	mov	r2, sl
   1b384:	add	r1, r4, #6
   1b388:	mov	r0, r5
   1b38c:	add	sp, sp, #20
   1b390:	ldrd	r4, [sp]
   1b394:	ldrd	r6, [sp, #8]
   1b398:	ldrd	r8, [sp, #16]
   1b39c:	ldrd	sl, [sp, #24]
   1b3a0:	ldr	lr, [sp, #32]
   1b3a4:	add	sp, sp, #36	; 0x24
   1b3a8:	b	132a0 <_start@@Base+0xb84>
   1b3ac:	add	r3, pc, #668	; 0x29c
   1b3b0:	ldrd	r2, [r3]
   1b3b4:	cmp	r1, r3
   1b3b8:	cmpeq	r0, r2
   1b3bc:	bhi	1b41c <_start@@Base+0x8d00>
   1b3c0:	add	r3, pc, #656	; 0x290
   1b3c4:	ldrd	r2, [r3]
   1b3c8:	cmp	r1, r3
   1b3cc:	cmpeq	r0, r2
   1b3d0:	bne	1b318 <_start@@Base+0x8bfc>
   1b3d4:	sub	r3, sl, r4
   1b3d8:	cmp	r3, #8
   1b3dc:	ble	1b318 <_start@@Base+0x8bfc>
   1b3e0:	ldrb	r3, [r4, #8]
   1b3e4:	cmp	r3, #46	; 0x2e
   1b3e8:	bne	1b318 <_start@@Base+0x8bfc>
   1b3ec:	mov	r3, fp
   1b3f0:	mov	r2, sl
   1b3f4:	add	r1, r4, #9
   1b3f8:	mov	r0, r5
   1b3fc:	add	sp, sp, #20
   1b400:	ldrd	r4, [sp]
   1b404:	ldrd	r6, [sp, #8]
   1b408:	ldrd	r8, [sp, #16]
   1b40c:	ldrd	sl, [sp, #24]
   1b410:	ldr	lr, [sp, #32]
   1b414:	add	sp, sp, #36	; 0x24
   1b418:	b	12ef8 <_start@@Base+0x7dc>
   1b41c:	add	r3, pc, #572	; 0x23c
   1b420:	ldrd	r2, [r3]
   1b424:	cmp	r1, r3
   1b428:	cmpeq	r0, r2
   1b42c:	bhi	1b48c <_start@@Base+0x8d70>
   1b430:	add	r3, pc, #560	; 0x230
   1b434:	ldrd	r2, [r3]
   1b438:	cmp	r1, r3
   1b43c:	cmpeq	r0, r2
   1b440:	bne	1b318 <_start@@Base+0x8bfc>
   1b444:	sub	r3, sl, r4
   1b448:	cmp	r3, #8
   1b44c:	ble	1b318 <_start@@Base+0x8bfc>
   1b450:	ldrb	r3, [r4, #8]
   1b454:	cmp	r3, #46	; 0x2e
   1b458:	bne	1b318 <_start@@Base+0x8bfc>
   1b45c:	mov	r3, fp
   1b460:	mov	r2, sl
   1b464:	add	r1, r4, #9
   1b468:	mov	r0, r5
   1b46c:	add	sp, sp, #20
   1b470:	ldrd	r4, [sp]
   1b474:	ldrd	r6, [sp, #8]
   1b478:	ldrd	r8, [sp, #16]
   1b47c:	ldrd	sl, [sp, #24]
   1b480:	ldr	lr, [sp, #32]
   1b484:	add	sp, sp, #36	; 0x24
   1b488:	b	13098 <_start@@Base+0x97c>
   1b48c:	add	r3, pc, #476	; 0x1dc
   1b490:	ldrd	r2, [r3]
   1b494:	cmp	r1, r3
   1b498:	cmpeq	r0, r2
   1b49c:	beq	1b5a4 <_start@@Base+0x8e88>
   1b4a0:	add	r3, pc, #464	; 0x1d0
   1b4a4:	ldrd	r2, [r3]
   1b4a8:	cmp	r1, r3
   1b4ac:	cmpeq	r0, r2
   1b4b0:	bne	1b318 <_start@@Base+0x8bfc>
   1b4b4:	add	r6, r4, #8
   1b4b8:	mov	r1, sl
   1b4bc:	mov	r0, r6
   1b4c0:	mov	r7, #0
   1b4c4:	bl	12810 <_start@@Base+0xf4>
   1b4c8:	mov	r3, r1
   1b4cc:	add	r1, pc, #428	; 0x1ac
   1b4d0:	ldrd	r0, [r1]
   1b4d4:	cmp	r3, r1
   1b4d8:	cmpeq	r7, r0
   1b4dc:	bne	1b318 <_start@@Base+0x8bfc>
   1b4e0:	sub	r3, sl, r6
   1b4e4:	cmp	r3, #4
   1b4e8:	ble	1b318 <_start@@Base+0x8bfc>
   1b4ec:	ldrb	r3, [r4, #12]
   1b4f0:	cmp	r3, #46	; 0x2e
   1b4f4:	bne	1b318 <_start@@Base+0x8bfc>
   1b4f8:	add	r3, r4, #13
   1b4fc:	cmp	r6, r3
   1b500:	str	r3, [sp, #12]
   1b504:	beq	1b318 <_start@@Base+0x8bfc>
   1b508:	mov	r0, r3
   1b50c:	mov	r1, sl
   1b510:	bl	12810 <_start@@Base+0xf4>
   1b514:	and	r3, r1, #-16777216	; 0xff000000
   1b518:	cmp	r3, #2013265920	; 0x78000000
   1b51c:	cmpeq	r7, #0
   1b520:	beq	1b5ec <_start@@Base+0x8ed0>
   1b524:	ldr	r4, [sp, #12]
   1b528:	b	1b318 <_start@@Base+0x8bfc>
   1b52c:	sub	r3, sl, r4
   1b530:	cmp	r3, #3
   1b534:	ble	1b318 <_start@@Base+0x8bfc>
   1b538:	ldrb	r3, [r4, #3]
   1b53c:	cmp	r3, #46	; 0x2e
   1b540:	bne	1b318 <_start@@Base+0x8bfc>
   1b544:	mov	r3, fp
   1b548:	mov	r2, sl
   1b54c:	add	r1, r4, #4
   1b550:	mov	r0, r5
   1b554:	add	sp, sp, #20
   1b558:	ldrd	r4, [sp]
   1b55c:	ldrd	r6, [sp, #8]
   1b560:	ldrd	r8, [sp, #16]
   1b564:	ldrd	sl, [sp, #24]
   1b568:	ldr	lr, [sp, #32]
   1b56c:	add	sp, sp, #36	; 0x24
   1b570:	b	16338 <_start@@Base+0x3c1c>
   1b574:	mov	r3, fp
   1b578:	mov	r2, sl
   1b57c:	add	r1, r4, #4
   1b580:	mov	r0, r5
   1b584:	add	sp, sp, #20
   1b588:	ldrd	r4, [sp]
   1b58c:	ldrd	r6, [sp, #8]
   1b590:	ldrd	r8, [sp, #16]
   1b594:	ldrd	sl, [sp, #24]
   1b598:	ldr	lr, [sp, #32]
   1b59c:	add	sp, sp, #36	; 0x24
   1b5a0:	b	12c70 <_start@@Base+0x554>
   1b5a4:	sub	r3, sl, r4
   1b5a8:	cmp	r3, #8
   1b5ac:	ble	1b318 <_start@@Base+0x8bfc>
   1b5b0:	ldrb	r3, [r4, #8]
   1b5b4:	cmp	r3, #46	; 0x2e
   1b5b8:	bne	1b318 <_start@@Base+0x8bfc>
   1b5bc:	mov	r3, fp
   1b5c0:	mov	r2, sl
   1b5c4:	add	r1, r4, #9
   1b5c8:	mov	r0, r5
   1b5cc:	add	sp, sp, #20
   1b5d0:	ldrd	r4, [sp]
   1b5d4:	ldrd	r6, [sp, #8]
   1b5d8:	ldrd	r8, [sp, #16]
   1b5dc:	ldrd	sl, [sp, #24]
   1b5e0:	ldr	lr, [sp, #32]
   1b5e4:	add	sp, sp, #36	; 0x24
   1b5e8:	b	1a88c <_start@@Base+0x8170>
   1b5ec:	mov	r0, r5
   1b5f0:	ldr	r5, [sp, #12]
   1b5f4:	mov	r2, sl
   1b5f8:	mov	r3, #1
   1b5fc:	str	r8, [sp]
   1b600:	mov	r1, r5
   1b604:	bl	29258 <flatcc_json_parser_match_constant@@Base>
   1b608:	cmp	r5, r0
   1b60c:	mov	r4, r0
   1b610:	beq	1b318 <_start@@Base+0x8bfc>
   1b614:	mov	r0, #0
   1b618:	mov	r1, #0
   1b61c:	strd	r0, [r9]
   1b620:	str	r7, [fp]
   1b624:	b	1b318 <_start@@Base+0x8bfc>
   1b628:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b62c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1b630:	ldrshvc	pc, [pc, #255]	; 1b737 <_start@@Base+0x901b>	; <UNPREDICTABLE>
   1b634:	cmnmi	pc, #28416	; 0x6f00
   1b638:	andeq	r0, r0, r0
   1b63c:	cmnmi	lr, r0, lsl #18
   1b640:	andeq	r0, r0, r0
   1b644:	strbtmi	r6, [pc], -r0, lsl #30
   1b648:	andvc	r0, r0, #0
   1b64c:	cmnmi	pc, #28416	; 0x6f00
   1b650:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b654:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1b658:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b65c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1b660:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b664:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1b668:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b66c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1b670:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b674:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1b678:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1b67c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1b680:	andeq	r0, r0, r0
   1b684:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b688:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b68c:	mov	ip, r3
   1b690:	strd	r6, [sp, #8]
   1b694:	strd	r8, [sp, #16]
   1b698:	mov	r9, r2
   1b69c:	strd	sl, [sp, #24]
   1b6a0:	mov	fp, r0
   1b6a4:	mov	sl, r1
   1b6a8:	str	lr, [sp, #32]
   1b6ac:	mov	r1, #36	; 0x24
   1b6b0:	vpush	{d8-d9}
   1b6b4:	sub	sp, sp, #356	; 0x164
   1b6b8:	ldr	r0, [r0]
   1b6bc:	str	r3, [sp, #68]	; 0x44
   1b6c0:	mov	r3, #0
   1b6c4:	str	r3, [ip]
   1b6c8:	bl	23668 <flatcc_builder_start_table@@Base>
   1b6cc:	cmp	r0, #0
   1b6d0:	beq	1b710 <_start@@Base+0x8ff4>
   1b6d4:	mov	r2, r9
   1b6d8:	mov	r1, sl
   1b6dc:	mov	r0, fp
   1b6e0:	mov	r3, #33	; 0x21
   1b6e4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1b6e8:	mov	r4, r0
   1b6ec:	mov	r0, r4
   1b6f0:	add	sp, sp, #356	; 0x164
   1b6f4:	vpop	{d8-d9}
   1b6f8:	ldrd	r4, [sp]
   1b6fc:	ldrd	r6, [sp, #8]
   1b700:	ldrd	r8, [sp, #16]
   1b704:	ldrd	sl, [sp, #24]
   1b708:	add	sp, sp, #32
   1b70c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b710:	add	r0, sp, #328	; 0x148
   1b714:	mov	r3, #1
   1b718:	mov	r2, r9
   1b71c:	mov	r1, sl
   1b720:	str	r0, [sp]
   1b724:	mov	r0, fp
   1b728:	bl	2c008 <flatcc_json_parser_prepare_unions@@Base>
   1b72c:	cmp	r9, r0
   1b730:	beq	1b6d4 <_start@@Base+0x8fb8>
   1b734:	mov	r1, sl
   1b738:	add	r3, sp, #320	; 0x140
   1b73c:	mov	r2, r9
   1b740:	mov	r0, fp
   1b744:	bl	13dcc <_start@@Base+0x16b0>
   1b748:	ldr	r3, [sp, #320]	; 0x140
   1b74c:	mov	sl, r0
   1b750:	cmp	r3, #0
   1b754:	beq	1bf70 <_start@@Base+0x9854>
   1b758:	mov	r6, r4
   1b75c:	mov	r7, r5
   1b760:	cmp	sl, r9
   1b764:	beq	1b790 <_start@@Base+0x9074>
   1b768:	ldrb	r3, [sl]
   1b76c:	cmp	r3, #34	; 0x22
   1b770:	moveq	r3, #0
   1b774:	addeq	sl, sl, #1
   1b778:	streq	r3, [fp, #12]
   1b77c:	beq	1b790 <_start@@Base+0x9074>
   1b780:	cmp	r3, #46	; 0x2e
   1b784:	movne	r3, #1
   1b788:	strne	r3, [fp, #12]
   1b78c:	beq	1c5d0 <_start@@Base+0x9eb4>
   1b790:	mov	r1, r9
   1b794:	mov	r0, sl
   1b798:	bl	12810 <_start@@Base+0xf4>
   1b79c:	add	r3, pc, #788	; 0x314
   1b7a0:	ldrd	r2, [r3]
   1b7a4:	mov	r4, r0
   1b7a8:	mov	r5, r1
   1b7ac:	strd	r4, [sp, #16]
   1b7b0:	cmp	r1, r3
   1b7b4:	cmpeq	r0, r2
   1b7b8:	bhi	1b904 <_start@@Base+0x91e8>
   1b7bc:	add	r3, pc, #764	; 0x2fc
   1b7c0:	ldrd	r2, [r3]
   1b7c4:	cmp	r1, r3
   1b7c8:	cmpeq	r0, r2
   1b7cc:	bhi	1ba00 <_start@@Base+0x92e4>
   1b7d0:	add	r3, pc, #752	; 0x2f0
   1b7d4:	ldrd	r2, [r3]
   1b7d8:	cmp	r1, r3
   1b7dc:	cmpeq	r0, r2
   1b7e0:	bhi	1bd48 <_start@@Base+0x962c>
   1b7e4:	and	r1, r0, #-16777216	; 0xff000000
   1b7e8:	add	r3, pc, #736	; 0x2e0
   1b7ec:	ldrd	r2, [r3]
   1b7f0:	str	r1, [sp, #40]	; 0x28
   1b7f4:	str	r5, [sp, #44]	; 0x2c
   1b7f8:	ldrd	r0, [sp, #40]	; 0x28
   1b7fc:	cmp	r1, r3
   1b800:	cmpeq	r0, r2
   1b804:	beq	1c958 <_start@@Base+0xa23c>
   1b808:	add	r3, pc, #712	; 0x2c8
   1b80c:	ldrd	r2, [r3]
   1b810:	cmp	r1, r3
   1b814:	cmpeq	r0, r2
   1b818:	bne	1da24 <_start@@Base+0xb308>
   1b81c:	sub	r3, r9, sl
   1b820:	cmp	r3, #5
   1b824:	ble	1d5cc <_start@@Base+0xaeb0>
   1b828:	mov	r2, r9
   1b82c:	mov	r1, sl
   1b830:	mov	r0, fp
   1b834:	bl	13be4 <_start@@Base+0x14c8>
   1b838:	cmp	r0, sl
   1b83c:	mov	r4, r0
   1b840:	beq	1d5cc <_start@@Base+0xaeb0>
   1b844:	mov	r3, #0
   1b848:	mov	r0, #0
   1b84c:	mov	r1, #0
   1b850:	cmp	r9, r4
   1b854:	strb	r3, [sp, #336]	; 0x150
   1b858:	str	r3, [sp, #340]	; 0x154
   1b85c:	add	r3, sp, #344	; 0x158
   1b860:	strd	r0, [r3]
   1b864:	beq	1eb74 <_start@@Base+0xc458>
   1b868:	mov	r0, r3
   1b86c:	mov	r2, r9
   1b870:	add	r3, sp, #340	; 0x154
   1b874:	mov	r1, r4
   1b878:	str	r0, [sp]
   1b87c:	mov	r0, fp
   1b880:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1b884:	cmp	r4, r0
   1b888:	mov	sl, r0
   1b88c:	bne	1ebb4 <_start@@Base+0xc498>
   1b890:	add	ip, sp, #336	; 0x150
   1b894:	ldr	r3, [pc, #644]	; 1bb20 <_start@@Base+0x9404>
   1b898:	mov	r2, r9
   1b89c:	mov	r1, sl
   1b8a0:	mov	r0, fp
   1b8a4:	str	ip, [sp]
   1b8a8:	bl	15974 <_start@@Base+0x3258>
   1b8ac:	cmp	r9, r0
   1b8b0:	cmpne	r0, sl
   1b8b4:	beq	1e868 <_start@@Base+0xc14c>
   1b8b8:	add	r3, sp, #336	; 0x150
   1b8bc:	mov	sl, r0
   1b8c0:	ldrsb	r2, [r3]
   1b8c4:	cmp	r2, #8
   1b8c8:	bne	1b8d8 <_start@@Base+0x91bc>
   1b8cc:	ldr	r3, [fp, #8]
   1b8d0:	tst	r3, #2
   1b8d4:	beq	1bf4c <_start@@Base+0x9830>
   1b8d8:	mov	r3, #1
   1b8dc:	mov	r1, #6
   1b8e0:	ldr	r0, [fp]
   1b8e4:	mov	r2, r3
   1b8e8:	bl	259e0 <flatcc_builder_table_add@@Base>
   1b8ec:	cmp	r0, #0
   1b8f0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1b8f4:	add	r3, sp, #336	; 0x150
   1b8f8:	ldrsb	r3, [r3]
   1b8fc:	strb	r3, [r0]
   1b900:	b	1bf4c <_start@@Base+0x9830>
   1b904:	add	r3, pc, #468	; 0x1d4
   1b908:	ldrd	r2, [r3]
   1b90c:	cmp	r1, r3
   1b910:	cmpeq	r0, r2
   1b914:	bhi	1bb24 <_start@@Base+0x9408>
   1b918:	add	r3, pc, #456	; 0x1c8
   1b91c:	ldrd	r2, [r3]
   1b920:	cmp	r1, r3
   1b924:	cmpeq	r0, r2
   1b928:	beq	1bfc8 <_start@@Base+0x98ac>
   1b92c:	add	r3, pc, #444	; 0x1bc
   1b930:	ldrd	r2, [r3]
   1b934:	cmp	r1, r3
   1b938:	cmpeq	r0, r2
   1b93c:	bhi	1c164 <_start@@Base+0x9a48>
   1b940:	add	r3, pc, #432	; 0x1b0
   1b944:	ldrd	r2, [r3]
   1b948:	cmp	r1, r3
   1b94c:	cmpeq	r0, r2
   1b950:	beq	1dbc0 <_start@@Base+0xb4a4>
   1b954:	add	r3, pc, #420	; 0x1a4
   1b958:	ldrd	r2, [r3]
   1b95c:	cmp	r1, r3
   1b960:	cmpeq	r0, r2
   1b964:	bne	1cd50 <_start@@Base+0xa634>
   1b968:	sub	r3, r9, sl
   1b96c:	cmp	r3, #8
   1b970:	ble	1eb44 <_start@@Base+0xc428>
   1b974:	mov	r2, r9
   1b978:	mov	r1, sl
   1b97c:	mov	r0, fp
   1b980:	bl	13afc <_start@@Base+0x13e0>
   1b984:	cmp	r0, sl
   1b988:	mov	r4, r0
   1b98c:	beq	1eb44 <_start@@Base+0xc428>
   1b990:	mov	r2, #0
   1b994:	sub	r3, r9, r0
   1b998:	cmp	r3, #3
   1b99c:	strb	r2, [sp, #336]	; 0x150
   1b9a0:	ble	1d67c <_start@@Base+0xaf60>
   1b9a4:	ldrb	r2, [r0]
   1b9a8:	cmp	r2, #116	; 0x74
   1b9ac:	beq	1f040 <_start@@Base+0xc924>
   1b9b0:	cmp	r3, #4
   1b9b4:	beq	1d67c <_start@@Base+0xaf60>
   1b9b8:	movw	r1, #56128	; 0xdb40
   1b9bc:	movt	r1, #2
   1b9c0:	mov	r2, #5
   1b9c4:	mov	r0, r4
   1b9c8:	bl	125a0 <memcmp@plt>
   1b9cc:	cmp	r0, #0
   1b9d0:	addeq	sl, r4, #5
   1b9d4:	bne	1d67c <_start@@Base+0xaf60>
   1b9d8:	mov	r3, #1
   1b9dc:	mov	r1, #15
   1b9e0:	ldr	r0, [fp]
   1b9e4:	mov	r2, r3
   1b9e8:	bl	259e0 <flatcc_builder_table_add@@Base>
   1b9ec:	cmp	r0, #0
   1b9f0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1b9f4:	ldrb	r3, [sp, #336]	; 0x150
   1b9f8:	strb	r3, [r0]
   1b9fc:	b	1bf4c <_start@@Base+0x9830>
   1ba00:	add	r3, pc, #256	; 0x100
   1ba04:	ldrd	r2, [r3]
   1ba08:	cmp	r1, r3
   1ba0c:	cmpeq	r0, r2
   1ba10:	bhi	1becc <_start@@Base+0x97b0>
   1ba14:	add	r3, pc, #244	; 0xf4
   1ba18:	ldrd	r2, [r3]
   1ba1c:	cmp	r1, r3
   1ba20:	cmpeq	r0, r2
   1ba24:	bhi	1c4b0 <_start@@Base+0x9d94>
   1ba28:	mov	r1, #0
   1ba2c:	add	r3, pc, #228	; 0xe4
   1ba30:	ldrd	r2, [r3]
   1ba34:	str	r1, [sp, #104]	; 0x68
   1ba38:	str	r5, [sp, #108]	; 0x6c
   1ba3c:	ldrd	r0, [sp, #104]	; 0x68
   1ba40:	cmp	r1, r3
   1ba44:	cmpeq	r0, r2
   1ba48:	bne	1cd20 <_start@@Base+0xa604>
   1ba4c:	sub	r3, r9, sl
   1ba50:	cmp	r3, #4
   1ba54:	ble	1e188 <_start@@Base+0xba6c>
   1ba58:	mov	r1, sl
   1ba5c:	mov	r3, #4
   1ba60:	mov	r2, r9
   1ba64:	mov	r0, fp
   1ba68:	bl	13ccc <_start@@Base+0x15b0>
   1ba6c:	cmp	r0, sl
   1ba70:	mov	r1, r0
   1ba74:	beq	1e188 <_start@@Base+0xba6c>
   1ba78:	add	r3, sp, #324	; 0x144
   1ba7c:	mov	r2, r9
   1ba80:	mov	r0, fp
   1ba84:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   1ba88:	ldr	r3, [sp, #324]	; 0x144
   1ba8c:	mov	sl, r0
   1ba90:	cmp	r3, #0
   1ba94:	beq	1b6d4 <_start@@Base+0x8fb8>
   1ba98:	mov	r1, #3
   1ba9c:	ldr	r0, [fp]
   1baa0:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1baa4:	cmp	r0, #0
   1baa8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1baac:	ldr	r3, [sp, #324]	; 0x144
   1bab0:	str	r3, [r0]
   1bab4:	b	1bf4c <_start@@Base+0x9830>
   1bab8:	cmnvs	r2, r0, ror #4
   1babc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bac0:			; <UNDEFINED> instruction: 0xffffffff
   1bac4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1bac8:			; <UNDEFINED> instruction: 0xffffffff
   1bacc:			; <UNDEFINED> instruction: 0x666c6577
   1bad0:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1bad4:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1bad8:	andvc	r0, r0, #0
   1badc:	cmnvs	pc, #28416	; 0x6f00
   1bae0:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1bae4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bae8:	cmnvs	r2, r1, ror #4
   1baec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1baf0:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1baf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1baf8:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1bafc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bb00:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1bb04:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bb08:			; <UNDEFINED> instruction: 0xffffffff
   1bb0c:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1bb10:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1bb14:	rsbvc	r7, r1, r5, ror #4
   1bb18:	andeq	r0, r0, r0
   1bb1c:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1bb20:	andeq	r0, r4, ip, lsl #3
   1bb24:	add	r3, pc, #860	; 0x35c
   1bb28:	ldrd	r2, [r3]
   1bb2c:	cmp	r1, r3
   1bb30:	cmpeq	r0, r2
   1bb34:	bhi	1bc00 <_start@@Base+0x94e4>
   1bb38:	lsr	r3, r0, #16
   1bb3c:	str	r3, [sp, #24]
   1bb40:	ldr	r1, [sp, #24]
   1bb44:	str	r5, [sp, #28]
   1bb48:	add	r3, pc, #832	; 0x340
   1bb4c:	ldrd	r2, [r3]
   1bb50:	lsl	r1, r1, #16
   1bb54:	str	r1, [sp, #24]
   1bb58:	ldrd	r0, [sp, #24]
   1bb5c:	cmp	r1, r3
   1bb60:	cmpeq	r0, r2
   1bb64:	bne	1c700 <_start@@Base+0x9fe4>
   1bb68:	sub	r3, r9, sl
   1bb6c:	cmp	r3, #6
   1bb70:	ble	1df8c <_start@@Base+0xb870>
   1bb74:	mov	r3, #6
   1bb78:	mov	r2, r9
   1bb7c:	mov	r1, sl
   1bb80:	mov	r0, fp
   1bb84:	bl	13ccc <_start@@Base+0x15b0>
   1bb88:	cmp	r0, sl
   1bb8c:	mov	r4, r0
   1bb90:	beq	1df8c <_start@@Base+0xb870>
   1bb94:	mov	ip, #0
   1bb98:	mov	r1, r0
   1bb9c:	mov	r2, r9
   1bba0:	add	r3, sp, #344	; 0x158
   1bba4:	mov	r0, fp
   1bba8:	str	ip, [sp, #344]	; 0x158
   1bbac:	bl	29830 <flatcc_json_parser_float@@Base>
   1bbb0:	cmp	r0, r4
   1bbb4:	mov	sl, r0
   1bbb8:	beq	1e484 <_start@@Base+0xbd68>
   1bbbc:	vldr	s15, [sp, #344]	; 0x158
   1bbc0:	vcmp.f32	s15, #0.0
   1bbc4:	vmrs	APSR_nzcv, fpscr
   1bbc8:	bne	1bbd8 <_start@@Base+0x94bc>
   1bbcc:	ldr	r3, [fp, #8]
   1bbd0:	tst	r3, #2
   1bbd4:	beq	1bf4c <_start@@Base+0x9830>
   1bbd8:	mov	r3, #4
   1bbdc:	mov	r1, #27
   1bbe0:	ldr	r0, [fp]
   1bbe4:	mov	r2, r3
   1bbe8:	bl	259e0 <flatcc_builder_table_add@@Base>
   1bbec:	cmp	r0, #0
   1bbf0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1bbf4:	ldr	r3, [sp, #344]	; 0x158
   1bbf8:	str	r3, [r0]
   1bbfc:	b	1bf4c <_start@@Base+0x9830>
   1bc00:	add	r3, pc, #656	; 0x290
   1bc04:	ldrd	r2, [r3]
   1bc08:	cmp	r1, r3
   1bc0c:	cmpeq	r0, r2
   1bc10:	beq	1c718 <_start@@Base+0x9ffc>
   1bc14:	add	r3, pc, #644	; 0x284
   1bc18:	ldrd	r2, [r3]
   1bc1c:	cmp	r1, r3
   1bc20:	cmpeq	r0, r2
   1bc24:	bhi	1ca04 <_start@@Base+0xa2e8>
   1bc28:	add	r3, pc, #632	; 0x278
   1bc2c:	ldrd	r2, [r3]
   1bc30:	cmp	r1, r3
   1bc34:	cmpeq	r0, r2
   1bc38:	bne	1d430 <_start@@Base+0xad14>
   1bc3c:	add	r4, sl, #8
   1bc40:	mov	r1, r9
   1bc44:	mov	r0, r4
   1bc48:	bl	12810 <_start@@Base+0xf4>
   1bc4c:	add	r3, pc, #604	; 0x25c
   1bc50:	ldrd	r2, [r3]
   1bc54:	cmp	r1, r3
   1bc58:	cmpeq	r0, r2
   1bc5c:	bne	1e424 <_start@@Base+0xbd08>
   1bc60:	mov	r3, #0
   1bc64:	add	r4, sl, #16
   1bc68:	mov	r1, r9
   1bc6c:	mov	r0, r4
   1bc70:	str	r3, [sp, #240]	; 0xf0
   1bc74:	bl	12810 <_start@@Base+0xf4>
   1bc78:	str	r1, [sp, #244]	; 0xf4
   1bc7c:	add	r3, pc, #564	; 0x234
   1bc80:	ldrd	r2, [r3]
   1bc84:	ldrd	r0, [sp, #240]	; 0xf0
   1bc88:	cmp	r1, r3
   1bc8c:	cmpeq	r0, r2
   1bc90:	bne	1e4e4 <_start@@Base+0xbdc8>
   1bc94:	sub	r3, r9, r4
   1bc98:	cmp	r3, #4
   1bc9c:	ble	1f718 <_start@@Base+0xcffc>
   1bca0:	mov	r3, #4
   1bca4:	mov	r2, r9
   1bca8:	mov	r1, r4
   1bcac:	mov	r0, fp
   1bcb0:	bl	13ccc <_start@@Base+0x15b0>
   1bcb4:	cmp	r4, r0
   1bcb8:	mov	sl, r0
   1bcbc:	beq	1f714 <_start@@Base+0xcff8>
   1bcc0:	cmp	r9, r0
   1bcc4:	ldr	r0, [fp]
   1bcc8:	beq	1bcd8 <_start@@Base+0x95bc>
   1bccc:	ldrb	r3, [sl]
   1bcd0:	cmp	r3, #91	; 0x5b
   1bcd4:	beq	1f850 <_start@@Base+0xd134>
   1bcd8:	mov	r3, #0
   1bcdc:	mov	r2, r3
   1bce0:	mov	r1, r3
   1bce4:	bl	21b7c <flatcc_builder_start_buffer@@Base>
   1bce8:	cmp	r0, #0
   1bcec:	bne	1b6d4 <_start@@Base+0x8fb8>
   1bcf0:	mov	r1, sl
   1bcf4:	add	r3, sp, #324	; 0x144
   1bcf8:	mov	r2, r9
   1bcfc:	mov	r0, fp
   1bd00:	bl	1b688 <_start@@Base+0x8f6c>
   1bd04:	ldr	r1, [sp, #324]	; 0x144
   1bd08:	mov	sl, r0
   1bd0c:	cmp	r1, #0
   1bd10:	beq	1b6d4 <_start@@Base+0x8fb8>
   1bd14:	ldr	r0, [fp]
   1bd18:	bl	21d28 <flatcc_builder_end_buffer@@Base>
   1bd1c:	str	r0, [sp, #324]	; 0x144
   1bd20:	cmp	r0, #0
   1bd24:	beq	1b6d4 <_start@@Base+0x8fb8>
   1bd28:	mov	r1, #13
   1bd2c:	ldr	r0, [fp]
   1bd30:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1bd34:	cmp	r0, #0
   1bd38:	beq	1b6d4 <_start@@Base+0x8fb8>
   1bd3c:	ldr	r3, [sp, #324]	; 0x144
   1bd40:	str	r3, [r0]
   1bd44:	b	1bf4c <_start@@Base+0x9830>
   1bd48:	movw	r3, #65535	; 0xffff
   1bd4c:	movt	r3, #26735	; 0x686f
   1bd50:	mvn	r2, #0
   1bd54:	cmp	r1, r3
   1bd58:	cmpeq	r0, r2
   1bd5c:	bhi	1c620 <_start@@Base+0x9f04>
   1bd60:	mov	r1, #0
   1bd64:	add	r3, pc, #340	; 0x154
   1bd68:	ldrd	r2, [r3]
   1bd6c:	str	r1, [sp, #96]	; 0x60
   1bd70:	str	r5, [sp, #100]	; 0x64
   1bd74:	ldrd	r0, [sp, #96]	; 0x60
   1bd78:	cmp	r1, r3
   1bd7c:	cmpeq	r0, r2
   1bd80:	bne	1cd38 <_start@@Base+0xa61c>
   1bd84:	sub	r3, r9, sl
   1bd88:	cmp	r3, #4
   1bd8c:	ble	1e0c4 <_start@@Base+0xb9a8>
   1bd90:	mov	r3, #4
   1bd94:	mov	r2, r9
   1bd98:	mov	r1, sl
   1bd9c:	mov	r0, fp
   1bda0:	bl	13ccc <_start@@Base+0x15b0>
   1bda4:	cmp	r0, sl
   1bda8:	mov	r4, r0
   1bdac:	beq	1e0c4 <_start@@Base+0xb9a8>
   1bdb0:	mov	r2, #1
   1bdb4:	mvn	r3, #0
   1bdb8:	ldr	r0, [fp]
   1bdbc:	mov	r1, r2
   1bdc0:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1bdc4:	subs	r5, r0, #0
   1bdc8:	bne	1f950 <_start@@Base+0xd234>
   1bdcc:	add	r3, sp, #320	; 0x140
   1bdd0:	mov	r1, r4
   1bdd4:	mov	r2, r9
   1bdd8:	mov	r0, fp
   1bddc:	bl	13ea0 <_start@@Base+0x1784>
   1bde0:	ldr	r3, [sp, #320]	; 0x140
   1bde4:	mov	sl, r0
   1bde8:	cmp	r3, #0
   1bdec:	beq	1ede4 <_start@@Base+0xc6c8>
   1bdf0:	ldr	r8, [pc, #208]	; 1bec8 <_start@@Base+0x97ac>
   1bdf4:	b	1be24 <_start@@Base+0x9708>
   1bdf8:	ldrb	ip, [sp, #344]	; 0x158
   1bdfc:	mov	r1, r0
   1be00:	add	r3, sp, #320	; 0x140
   1be04:	mov	r2, r9
   1be08:	mov	r0, fp
   1be0c:	strb	ip, [r4]
   1be10:	bl	196bc <_start@@Base+0x6fa0>
   1be14:	ldr	r3, [sp, #320]	; 0x140
   1be18:	mov	sl, r0
   1be1c:	cmp	r3, #0
   1be20:	beq	1ede4 <_start@@Base+0xc6c8>
   1be24:	mov	r1, #1
   1be28:	ldr	r0, [fp]
   1be2c:	strb	r5, [sp, #344]	; 0x158
   1be30:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1be34:	subs	r4, r0, #0
   1be38:	mov	r1, sl
   1be3c:	add	r3, sp, #344	; 0x158
   1be40:	mov	r2, r9
   1be44:	mov	r0, fp
   1be48:	beq	1b6d4 <_start@@Base+0x8fb8>
   1be4c:	bl	135d4 <_start@@Base+0xeb8>
   1be50:	cmp	r0, sl
   1be54:	bne	1bdf8 <_start@@Base+0x96dc>
   1be58:	add	r1, sp, #344	; 0x158
   1be5c:	mov	r3, r8
   1be60:	mov	r2, r9
   1be64:	mov	r0, fp
   1be68:	str	r1, [sp]
   1be6c:	mov	r1, sl
   1be70:	bl	15bc8 <_start@@Base+0x34ac>
   1be74:	cmp	r9, r0
   1be78:	cmpne	r0, sl
   1be7c:	bne	1bdf8 <_start@@Base+0x96dc>
   1be80:	mov	sl, r0
   1be84:	b	1b6d4 <_start@@Base+0x8fb8>
   1be88:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1be8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1be90:	ldrtvs	r0, [r3], -r0
   1be94:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1be98:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1be9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bea0:	svcvs	0x00725f6e
   1bea4:			; <UNDEFINED> instruction: 0x76656374
   1bea8:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1beac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1beb0:	cmnvs	r4, r5, ror r2
   1beb4:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1beb8:	andeq	r0, r0, r0
   1bebc:			; <UNDEFINED> instruction: 0x66666572
   1bec0:	andeq	r0, r0, r0
   1bec4:			; <UNDEFINED> instruction: 0x666c6578
   1bec8:	muleq	r4, ip, r1
   1becc:	and	r1, r0, #-16777216	; 0xff000000
   1bed0:	add	r3, pc, #872	; 0x368
   1bed4:	ldrd	r2, [r3]
   1bed8:	sub	r8, r9, sl
   1bedc:	str	r1, [sp, #48]	; 0x30
   1bee0:	str	r5, [sp, #52]	; 0x34
   1bee4:	ldrd	r0, [sp, #48]	; 0x30
   1bee8:	cmp	r1, r3
   1beec:	cmpeq	r0, r2
   1bef0:	beq	1c7e0 <_start@@Base+0xa0c4>
   1bef4:	cmp	r8, #4
   1bef8:	ble	1da4c <_start@@Base+0xb330>
   1befc:	mov	r3, #4
   1bf00:	mov	r2, r9
   1bf04:	mov	r1, sl
   1bf08:	mov	r0, fp
   1bf0c:	bl	13ccc <_start@@Base+0x15b0>
   1bf10:	cmp	r0, sl
   1bf14:	beq	1da4c <_start@@Base+0xb330>
   1bf18:	ldr	ip, [sp, #328]	; 0x148
   1bf1c:	mov	lr, #8
   1bf20:	movw	r3, #64180	; 0xfab4
   1bf24:	movt	r3, #1
   1bf28:	mov	r1, r0
   1bf2c:	mov	r2, r9
   1bf30:	mov	r0, fp
   1bf34:	str	lr, [sp]
   1bf38:	str	ip, [sp, #4]
   1bf3c:	str	r3, [sp, #8]
   1bf40:	mov	r3, #0
   1bf44:	bl	2c130 <flatcc_json_parser_union@@Base>
   1bf48:	mov	sl, r0
   1bf4c:	mov	r1, sl
   1bf50:	add	r3, sp, #320	; 0x140
   1bf54:	mov	r2, r9
   1bf58:	mov	r0, fp
   1bf5c:	bl	16560 <_start@@Base+0x3e44>
   1bf60:	ldr	r3, [sp, #320]	; 0x140
   1bf64:	mov	sl, r0
   1bf68:	cmp	r3, #0
   1bf6c:	bne	1b760 <_start@@Base+0x9044>
   1bf70:	ldr	r3, [fp, #24]
   1bf74:	cmp	r3, #0
   1bf78:	bne	1b6d4 <_start@@Base+0x8fb8>
   1bf7c:	mov	r1, #3
   1bf80:	ldr	r0, [fp]
   1bf84:	bl	23e50 <flatcc_builder_check_required_field@@Base>
   1bf88:	cmp	r0, #0
   1bf8c:	mov	r1, sl
   1bf90:	beq	1efc8 <_start@@Base+0xc8ac>
   1bf94:	mov	r2, r9
   1bf98:	mov	r0, fp
   1bf9c:	ldr	r3, [sp, #328]	; 0x148
   1bfa0:	bl	2c0a4 <flatcc_json_parser_finalize_unions@@Base>
   1bfa4:	mov	r4, r0
   1bfa8:	ldr	r0, [fp]
   1bfac:	bl	23fe8 <flatcc_builder_end_table@@Base>
   1bfb0:	ldr	r3, [sp, #68]	; 0x44
   1bfb4:	cmp	r0, #0
   1bfb8:	moveq	sl, r4
   1bfbc:	str	r0, [r3]
   1bfc0:	bne	1b6ec <_start@@Base+0x8fd0>
   1bfc4:	b	1b6d4 <_start@@Base+0x8fb8>
   1bfc8:	add	r4, sl, #8
   1bfcc:	mov	r1, r9
   1bfd0:	mov	r0, r4
   1bfd4:	bl	12810 <_start@@Base+0xf4>
   1bfd8:	add	r3, pc, #616	; 0x268
   1bfdc:	ldrd	r2, [r3]
   1bfe0:	cmp	r1, r3
   1bfe4:	cmpeq	r0, r2
   1bfe8:	bhi	1c8c0 <_start@@Base+0xa1a4>
   1bfec:	add	r3, pc, #604	; 0x25c
   1bff0:	ldrd	r2, [r3]
   1bff4:	cmp	r1, r3
   1bff8:	cmpeq	r0, r2
   1bffc:	bne	1cd68 <_start@@Base+0xa64c>
   1c000:	sub	r3, r9, r4
   1c004:	cmp	r3, #8
   1c008:	ble	1e0e0 <_start@@Base+0xb9c4>
   1c00c:	mov	r2, r9
   1c010:	mov	r1, r4
   1c014:	mov	r0, fp
   1c018:	bl	13afc <_start@@Base+0x13e0>
   1c01c:	cmp	r4, r0
   1c020:	mov	sl, r0
   1c024:	beq	1e0dc <_start@@Base+0xb9c0>
   1c028:	mov	r2, #1
   1c02c:	mvn	r3, #0
   1c030:	ldr	r0, [fp]
   1c034:	mov	r1, r2
   1c038:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1c03c:	cmp	r0, #0
   1c040:	bne	1b6d4 <_start@@Base+0x8fb8>
   1c044:	mov	r1, sl
   1c048:	add	r3, sp, #320	; 0x140
   1c04c:	mov	r2, r9
   1c050:	mov	r0, fp
   1c054:	bl	13ea0 <_start@@Base+0x1784>
   1c058:	ldr	r3, [sp, #320]	; 0x140
   1c05c:	mov	sl, r0
   1c060:	cmp	r3, #0
   1c064:	beq	1eeb8 <_start@@Base+0xc79c>
   1c068:	movw	r8, #56128	; 0xdb40
   1c06c:	movt	r8, #2
   1c070:	b	1c09c <_start@@Base+0x9980>
   1c074:	add	r3, sp, #320	; 0x140
   1c078:	mov	r1, r4
   1c07c:	strb	r2, [r5]
   1c080:	mov	r0, fp
   1c084:	mov	r2, r9
   1c088:	bl	196bc <_start@@Base+0x6fa0>
   1c08c:	ldr	r3, [sp, #320]	; 0x140
   1c090:	mov	sl, r0
   1c094:	cmp	r3, #0
   1c098:	beq	1eeb8 <_start@@Base+0xc79c>
   1c09c:	mov	r3, #0
   1c0a0:	mov	r1, #1
   1c0a4:	ldr	r0, [fp]
   1c0a8:	strb	r3, [sp, #340]	; 0x154
   1c0ac:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1c0b0:	subs	r5, r0, #0
   1c0b4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c0b8:	sub	r3, r9, sl
   1c0bc:	cmp	r3, #3
   1c0c0:	ble	1c0fc <_start@@Base+0x99e0>
   1c0c4:	ldrb	r2, [sl]
   1c0c8:	cmp	r2, #116	; 0x74
   1c0cc:	beq	1eac0 <_start@@Base+0xc3a4>
   1c0d0:	cmp	r3, #4
   1c0d4:	beq	1c0fc <_start@@Base+0x99e0>
   1c0d8:	mov	r2, #5
   1c0dc:	mov	r1, r8
   1c0e0:	mov	r0, sl
   1c0e4:	bl	125a0 <memcmp@plt>
   1c0e8:	cmp	r0, #0
   1c0ec:	moveq	r2, r0
   1c0f0:	addeq	r4, sl, #5
   1c0f4:	strbeq	r0, [sp, #340]	; 0x154
   1c0f8:	beq	1c124 <_start@@Base+0x9a08>
   1c0fc:	mov	r2, r9
   1c100:	add	r3, sp, #344	; 0x158
   1c104:	mov	r1, sl
   1c108:	mov	r0, fp
   1c10c:	bl	135d4 <_start@@Base+0xeb8>
   1c110:	ldrb	r2, [sp, #344]	; 0x158
   1c114:	mov	r4, r0
   1c118:	adds	r2, r2, #0
   1c11c:	movne	r2, #1
   1c120:	strb	r2, [sp, #340]	; 0x154
   1c124:	cmp	sl, r4
   1c128:	bne	1c074 <_start@@Base+0x9958>
   1c12c:	add	ip, sp, #340	; 0x154
   1c130:	ldr	r3, [pc, #304]	; 1c268 <_start@@Base+0x9b4c>
   1c134:	mov	r2, r9
   1c138:	mov	r1, r4
   1c13c:	mov	r0, fp
   1c140:	str	ip, [sp]
   1c144:	bl	1453c <_start@@Base+0x1e20>
   1c148:	cmp	r9, r0
   1c14c:	cmpne	r0, r4
   1c150:	mov	sl, r0
   1c154:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c158:	ldrb	r2, [sp, #340]	; 0x154
   1c15c:	mov	r4, r0
   1c160:	b	1c074 <_start@@Base+0x9958>
   1c164:	add	r3, pc, #236	; 0xec
   1c168:	ldrd	r2, [r3]
   1c16c:	cmp	r1, r3
   1c170:	cmpeq	r0, r2
   1c174:	bhi	1cb80 <_start@@Base+0xa464>
   1c178:	add	r3, pc, #224	; 0xe0
   1c17c:	ldrd	r2, [r3]
   1c180:	cmp	r1, r3
   1c184:	cmpeq	r0, r2
   1c188:	bne	1d3e8 <_start@@Base+0xaccc>
   1c18c:	add	r5, sl, #8
   1c190:	mov	r1, r9
   1c194:	mov	r0, r5
   1c198:	mov	r4, #0
   1c19c:	bl	12810 <_start@@Base+0xf4>
   1c1a0:	and	r3, r1, #-16777216	; 0xff000000
   1c1a4:	str	r4, [sp, #192]	; 0xc0
   1c1a8:	str	r3, [sp, #196]	; 0xc4
   1c1ac:	ldrd	r2, [sp, #192]	; 0xc0
   1c1b0:	cmp	r3, #2030043136	; 0x79000000
   1c1b4:	cmpeq	r2, #0
   1c1b8:	bne	1e40c <_start@@Base+0xbcf0>
   1c1bc:	sub	r3, r9, r5
   1c1c0:	cmp	r3, #1
   1c1c4:	ble	1e774 <_start@@Base+0xc058>
   1c1c8:	mov	r2, r9
   1c1cc:	mov	r1, r5
   1c1d0:	mov	r0, fp
   1c1d4:	bl	1392c <_start@@Base+0x1210>
   1c1d8:	cmp	r5, r0
   1c1dc:	mov	sl, r0
   1c1e0:	beq	1e770 <_start@@Base+0xc054>
   1c1e4:	mov	r1, #3
   1c1e8:	ldr	r0, [fp]
   1c1ec:	str	r4, [sp, #324]	; 0x144
   1c1f0:	bl	23668 <flatcc_builder_start_table@@Base>
   1c1f4:	cmp	r0, r4
   1c1f8:	bne	1eda0 <_start@@Base+0xc684>
   1c1fc:	mov	r1, sl
   1c200:	add	r3, sp, #332	; 0x14c
   1c204:	mov	r2, r9
   1c208:	mov	r0, fp
   1c20c:	bl	13dcc <_start@@Base+0x16b0>
   1c210:	ldr	r3, [sp, #332]	; 0x14c
   1c214:	mov	sl, r0
   1c218:	cmp	r3, r4
   1c21c:	beq	1f1a4 <_start@@Base+0xca88>
   1c220:	mov	r8, r4
   1c224:	add	r3, sp, #280	; 0x118
   1c228:	strd	r6, [sp, #16]
   1c22c:	movt	r8, #65535	; 0xffff
   1c230:	ldrd	r4, [r3]
   1c234:	mov	r6, r8
   1c238:	b	1c3ac <_start@@Base+0x9c90>
   1c23c:	nop	{0}
   1c240:	strcc	r0, [r0], #-0
   1c244:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c248:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1c24c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c250:	svcvs	0x006f6c73
   1c254:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c258:	ldrbvs	pc, [pc, #4095]!	; 1d25f <_start@@Base+0xab43>	; <UNPREDICTABLE>
   1c25c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c260:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1c264:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c268:	andeq	r0, r4, ip, lsl r2
   1c26c:	and	r3, r0, #-16777216	; 0xff000000
   1c270:	str	r3, [sp, #112]	; 0x70
   1c274:	str	r1, [sp, #116]	; 0x74
   1c278:	add	r1, pc, #880	; 0x370
   1c27c:	ldrd	r0, [r1]
   1c280:	ldrd	r2, [sp, #112]	; 0x70
   1c284:	cmp	r3, r1
   1c288:	cmpeq	r2, r0
   1c28c:	bne	1e8a0 <_start@@Base+0xc184>
   1c290:	sub	r3, r9, sl
   1c294:	cmp	r3, #5
   1c298:	ble	1e8a0 <_start@@Base+0xc184>
   1c29c:	mov	r2, r9
   1c2a0:	mov	r1, sl
   1c2a4:	mov	r0, fp
   1c2a8:	bl	13be4 <_start@@Base+0x14c8>
   1c2ac:	cmp	r0, sl
   1c2b0:	mov	r8, r0
   1c2b4:	beq	1e8a0 <_start@@Base+0xc184>
   1c2b8:	add	r2, sp, #344	; 0x158
   1c2bc:	cmp	r9, r0
   1c2c0:	mov	r1, #0
   1c2c4:	mov	r0, #0
   1c2c8:	mov	r3, #0
   1c2cc:	strd	r0, [r2]
   1c2d0:	add	r2, sp, #316	; 0x13c
   1c2d4:	add	r2, r2, #2
   1c2d8:	str	r3, [sp, #340]	; 0x154
   1c2dc:	strh	r3, [r2]
   1c2e0:	beq	1ed84 <_start@@Base+0xc668>
   1c2e4:	add	r0, sp, #344	; 0x158
   1c2e8:	add	r3, sp, #340	; 0x154
   1c2ec:	mov	r2, r9
   1c2f0:	mov	r1, r8
   1c2f4:	str	r0, [sp]
   1c2f8:	mov	r0, fp
   1c2fc:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1c300:	cmp	r8, r0
   1c304:	mov	r7, r0
   1c308:	bne	1ee18 <_start@@Base+0xc6fc>
   1c30c:	add	ip, sp, #316	; 0x13c
   1c310:	ldr	r3, [pc, #772]	; 1c61c <_start@@Base+0x9f00>
   1c314:	mov	r2, r9
   1c318:	add	ip, ip, #2
   1c31c:	mov	r1, r7
   1c320:	mov	r0, fp
   1c324:	str	ip, [sp]
   1c328:	bl	14988 <_start@@Base+0x226c>
   1c32c:	cmp	r9, r0
   1c330:	cmpne	r0, r7
   1c334:	mov	sl, r0
   1c338:	beq	1f6cc <_start@@Base+0xcfb0>
   1c33c:	add	r3, sp, #316	; 0x13c
   1c340:	add	r3, r3, #2
   1c344:	ldrh	r2, [r3]
   1c348:	cmp	r2, #0
   1c34c:	bne	1c35c <_start@@Base+0x9c40>
   1c350:	ldr	r3, [fp, #8]
   1c354:	tst	r3, #2
   1c358:	beq	1c388 <_start@@Base+0x9c6c>
   1c35c:	mov	r3, #2
   1c360:	ldr	r0, [fp]
   1c364:	mov	r2, r3
   1c368:	mov	r1, r3
   1c36c:	bl	259e0 <flatcc_builder_table_add@@Base>
   1c370:	cmp	r0, #0
   1c374:	beq	1f6cc <_start@@Base+0xcfb0>
   1c378:	add	r3, sp, #316	; 0x13c
   1c37c:	add	r3, r3, #2
   1c380:	ldrh	r3, [r3]
   1c384:	strh	r3, [r0]
   1c388:	mov	r1, sl
   1c38c:	add	r3, sp, #332	; 0x14c
   1c390:	mov	r2, r9
   1c394:	mov	r0, fp
   1c398:	bl	16560 <_start@@Base+0x3e44>
   1c39c:	ldr	r3, [sp, #332]	; 0x14c
   1c3a0:	mov	sl, r0
   1c3a4:	cmp	r3, #0
   1c3a8:	beq	1f198 <_start@@Base+0xca7c>
   1c3ac:	cmp	r9, sl
   1c3b0:	beq	1c3dc <_start@@Base+0x9cc0>
   1c3b4:	ldrb	r3, [sl]
   1c3b8:	cmp	r3, #34	; 0x22
   1c3bc:	moveq	r3, #0
   1c3c0:	addeq	sl, sl, #1
   1c3c4:	streq	r3, [fp, #12]
   1c3c8:	beq	1c3dc <_start@@Base+0x9cc0>
   1c3cc:	cmp	r3, #46	; 0x2e
   1c3d0:	movne	r3, #1
   1c3d4:	strne	r3, [fp, #12]
   1c3d8:	beq	1eb98 <_start@@Base+0xc47c>
   1c3dc:	mov	r1, r9
   1c3e0:	mov	r0, sl
   1c3e4:	bl	12810 <_start@@Base+0xf4>
   1c3e8:	movw	r3, #65535	; 0xffff
   1c3ec:	movt	r3, #26979	; 0x6963
   1c3f0:	mvn	r2, #0
   1c3f4:	cmp	r1, r3
   1c3f8:	cmpeq	r0, r2
   1c3fc:	bls	1c26c <_start@@Base+0x9b50>
   1c400:	add	r3, pc, #496	; 0x1f0
   1c404:	ldrd	r2, [r3]
   1c408:	bic	r5, r1, #255	; 0xff
   1c40c:	mov	r8, #0
   1c410:	mov	r4, r8
   1c414:	cmp	r5, r3
   1c418:	cmpeq	r8, r2
   1c41c:	beq	1ea20 <_start@@Base+0xc304>
   1c420:	and	r3, r1, r6
   1c424:	str	r8, [sp, #152]	; 0x98
   1c428:	mov	r1, #0
   1c42c:	movt	r1, #26980	; 0x6964
   1c430:	mov	r0, #0
   1c434:	str	r3, [sp, #156]	; 0x9c
   1c438:	ldrd	r2, [sp, #152]	; 0x98
   1c43c:	cmp	r3, r1
   1c440:	cmpeq	r2, r0
   1c444:	bne	1e8a0 <_start@@Base+0xc184>
   1c448:	sub	r3, r9, sl
   1c44c:	cmp	r3, #2
   1c450:	ble	1e8a0 <_start@@Base+0xc184>
   1c454:	mov	r1, sl
   1c458:	mov	r2, r9
   1c45c:	mov	r0, fp
   1c460:	bl	13a14 <_start@@Base+0x12f8>
   1c464:	cmp	r0, sl
   1c468:	mov	r1, r0
   1c46c:	beq	1e8a0 <_start@@Base+0xc184>
   1c470:	add	r3, sp, #336	; 0x150
   1c474:	mov	r2, r9
   1c478:	mov	r0, fp
   1c47c:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   1c480:	ldr	r3, [sp, #336]	; 0x150
   1c484:	mov	sl, r0
   1c488:	cmp	r3, #0
   1c48c:	beq	1f6cc <_start@@Base+0xcfb0>
   1c490:	mov	r1, r8
   1c494:	ldr	r0, [fp]
   1c498:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1c49c:	cmp	r0, #0
   1c4a0:	beq	1f6cc <_start@@Base+0xcfb0>
   1c4a4:	ldr	r3, [sp, #336]	; 0x150
   1c4a8:	str	r3, [r0]
   1c4ac:	b	1c388 <_start@@Base+0x9c6c>
   1c4b0:	add	r3, pc, #328	; 0x148
   1c4b4:	ldrd	r2, [r3]
   1c4b8:	cmp	r1, r3
   1c4bc:	cmpeq	r0, r2
   1c4c0:	beq	1dfa4 <_start@@Base+0xb888>
   1c4c4:	ldr	r1, [sp, #20]
   1c4c8:	mov	r4, #0
   1c4cc:	str	r4, [sp, #144]	; 0x90
   1c4d0:	add	r3, pc, #304	; 0x130
   1c4d4:	ldrd	r2, [r3]
   1c4d8:	bic	r1, r1, #255	; 0xff
   1c4dc:	str	r1, [sp, #148]	; 0x94
   1c4e0:	ldrd	r0, [sp, #144]	; 0x90
   1c4e4:	cmp	r1, r3
   1c4e8:	cmpeq	r0, r2
   1c4ec:	bne	1d400 <_start@@Base+0xace4>
   1c4f0:	sub	r3, r9, sl
   1c4f4:	cmp	r3, #3
   1c4f8:	ble	1ec34 <_start@@Base+0xc518>
   1c4fc:	mov	r3, #3
   1c500:	mov	r2, r9
   1c504:	mov	r1, sl
   1c508:	mov	r0, fp
   1c50c:	bl	13ccc <_start@@Base+0x15b0>
   1c510:	cmp	r0, sl
   1c514:	mov	r5, r0
   1c518:	beq	1ec34 <_start@@Base+0xc518>
   1c51c:	mov	r1, r4
   1c520:	mov	r3, #16
   1c524:	ldr	r0, [fp]
   1c528:	mov	r2, #32
   1c52c:	bl	259e0 <flatcc_builder_table_add@@Base>
   1c530:	subs	r8, r0, #0
   1c534:	beq	1f98c <_start@@Base+0xd270>
   1c538:	add	r3, sp, #336	; 0x150
   1c53c:	mov	r1, r5
   1c540:	mov	r2, r9
   1c544:	mov	r0, fp
   1c548:	bl	13dcc <_start@@Base+0x16b0>
   1c54c:	ldr	r3, [sp, #336]	; 0x150
   1c550:	mov	r4, r0
   1c554:	cmp	r3, #0
   1c558:	beq	1f9dc <_start@@Base+0xd2c0>
   1c55c:	vldr	s18, [pc, #180]	; 1c618 <_start@@Base+0x9efc>
   1c560:	vldr	d8, [pc, #168]	; 1c610 <_start@@Base+0x9ef4>
   1c564:	cmp	r9, r4
   1c568:	beq	1c594 <_start@@Base+0x9e78>
   1c56c:	ldrb	r3, [r4]
   1c570:	cmp	r3, #34	; 0x22
   1c574:	moveq	r3, #0
   1c578:	addeq	r4, r4, #1
   1c57c:	streq	r3, [fp, #12]
   1c580:	beq	1c594 <_start@@Base+0x9e78>
   1c584:	cmp	r3, #46	; 0x2e
   1c588:	movne	r3, #1
   1c58c:	strne	r3, [fp, #12]
   1c590:	beq	1da08 <_start@@Base+0xb2ec>
   1c594:	sub	ip, r9, r4
   1c598:	cmp	ip, #8
   1c59c:	bhi	1d0a8 <_start@@Base+0xa98c>
   1c5a0:	sub	r3, ip, #1
   1c5a4:	cmp	r3, #7
   1c5a8:	ldrls	pc, [pc, r3, lsl #2]
   1c5ac:	b	1d714 <_start@@Base+0xaff8>
   1c5b0:	strdeq	sp, [r1], -r0
   1c5b4:	andeq	sp, r1, ip, asr #5
   1c5b8:	andeq	sp, r1, r0, asr #5
   1c5bc:	andeq	sp, r1, r4, ror #5
   1c5c0:	ldrdeq	sp, [r1], -r8
   1c5c4:	andeq	sp, r1, r8, ror r2
   1c5c8:	andeq	sp, r1, ip, ror #4
   1c5cc:	andeq	sp, r1, r8, lsr #1
   1c5d0:	mov	r1, sl
   1c5d4:	mov	r3, #5
   1c5d8:	mov	r2, r9
   1c5dc:	mov	r0, fp
   1c5e0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1c5e4:	mov	sl, r0
   1c5e8:	b	1b790 <_start@@Base+0x9074>
   1c5ec:	nop	{0}
   1c5f0:	strvc	r0, [r0], #-0
   1c5f4:	cmnvs	pc, #461373440	; 0x1b800000
   1c5f8:	andeq	r0, r0, r0
   1c5fc:	strbtvc	r6, [r1], -r0, lsl #24
   1c600:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1c604:	rsbvc	r7, r1, r5, ror #4
   1c608:	andeq	r0, r0, r0
   1c60c:	rsbvc	r7, pc, r0, lsl #6
	...
   1c61c:	andeq	r0, r4, ip, asr #4
   1c620:	add	r3, pc, #920	; 0x398
   1c624:	ldrd	r2, [r3]
   1c628:	cmp	r1, r3
   1c62c:	cmpeq	r0, r2
   1c630:	bhi	1cc48 <_start@@Base+0xa52c>
   1c634:	lsr	r3, r1, #16
   1c638:	mov	r8, #0
   1c63c:	mov	r2, #0
   1c640:	str	r8, [sp, #120]	; 0x78
   1c644:	str	r3, [sp, #124]	; 0x7c
   1c648:	mov	r3, #0
   1c64c:	movt	r3, #26736	; 0x6870
   1c650:	ldr	r1, [sp, #124]	; 0x7c
   1c654:	lsl	r1, r1, #16
   1c658:	str	r1, [sp, #124]	; 0x7c
   1c65c:	ldrd	r0, [sp, #120]	; 0x78
   1c660:	cmp	r1, r3
   1c664:	cmpeq	r0, r2
   1c668:	bne	1e0f8 <_start@@Base+0xb9dc>
   1c66c:	sub	r3, r9, sl
   1c670:	cmp	r3, #2
   1c674:	ble	1ee6c <_start@@Base+0xc750>
   1c678:	mov	r2, r9
   1c67c:	mov	r1, sl
   1c680:	mov	r0, fp
   1c684:	bl	13a14 <_start@@Base+0x12f8>
   1c688:	cmp	r0, sl
   1c68c:	mov	r4, r0
   1c690:	beq	1ee6c <_start@@Base+0xc750>
   1c694:	add	r3, sp, #344	; 0x158
   1c698:	mov	r1, r0
   1c69c:	mov	r2, r9
   1c6a0:	mov	r0, fp
   1c6a4:	strh	r8, [r3]
   1c6a8:	bl	13848 <_start@@Base+0x112c>
   1c6ac:	cmp	r0, r4
   1c6b0:	mov	sl, r0
   1c6b4:	beq	1e838 <_start@@Base+0xc11c>
   1c6b8:	add	r3, sp, #344	; 0x158
   1c6bc:	ldrsh	r3, [r3]
   1c6c0:	cmp	r3, #100	; 0x64
   1c6c4:	bne	1c6d4 <_start@@Base+0x9fb8>
   1c6c8:	ldr	r3, [fp, #8]
   1c6cc:	tst	r3, #2
   1c6d0:	beq	1bf4c <_start@@Base+0x9830>
   1c6d4:	mov	r3, #2
   1c6d8:	ldr	r0, [fp]
   1c6dc:	mov	r2, r3
   1c6e0:	mov	r1, r3
   1c6e4:	bl	259e0 <flatcc_builder_table_add@@Base>
   1c6e8:	cmp	r0, #0
   1c6ec:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c6f0:	add	r3, sp, #344	; 0x158
   1c6f4:	ldrsh	r3, [r3]
   1c6f8:	strh	r3, [r0]
   1c6fc:	b	1bf4c <_start@@Base+0x9830>
   1c700:	mov	r1, sl
   1c704:	mov	r2, r9
   1c708:	mov	r0, fp
   1c70c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1c710:	mov	sl, r0
   1c714:	b	1bf4c <_start@@Base+0x9830>
   1c718:	add	sl, sl, #8
   1c71c:	mov	r1, r9
   1c720:	mov	r0, sl
   1c724:	bl	12810 <_start@@Base+0xf4>
   1c728:	add	r3, pc, #664	; 0x298
   1c72c:	ldrd	r2, [r3]
   1c730:	cmp	r1, r3
   1c734:	cmpeq	r0, r2
   1c738:	bhi	1cfdc <_start@@Base+0xa8c0>
   1c73c:	add	r3, pc, #652	; 0x28c
   1c740:	ldrd	r2, [r3]
   1c744:	cmp	r1, r3
   1c748:	cmpeq	r0, r2
   1c74c:	bne	1e3f4 <_start@@Base+0xbcd8>
   1c750:	sub	r3, r9, sl
   1c754:	cmp	r3, #8
   1c758:	ble	1e6ac <_start@@Base+0xbf90>
   1c75c:	mov	r2, r9
   1c760:	mov	r1, sl
   1c764:	mov	r0, fp
   1c768:	bl	13afc <_start@@Base+0x13e0>
   1c76c:	cmp	sl, r0
   1c770:	mov	r4, r0
   1c774:	beq	1e6ac <_start@@Base+0xbf90>
   1c778:	mov	ip, #0
   1c77c:	mov	r1, r0
   1c780:	add	r3, sp, #344	; 0x158
   1c784:	mov	r2, r9
   1c788:	mov	r0, fp
   1c78c:	str	ip, [sp, #344]	; 0x158
   1c790:	bl	13764 <_start@@Base+0x1048>
   1c794:	cmp	r0, r4
   1c798:	mov	sl, r0
   1c79c:	beq	1f69c <_start@@Base+0xcf80>
   1c7a0:	ldr	r3, [sp, #344]	; 0x158
   1c7a4:	cmp	r3, #0
   1c7a8:	bne	1c7b8 <_start@@Base+0xa09c>
   1c7ac:	ldr	r3, [fp, #8]
   1c7b0:	tst	r3, #2
   1c7b4:	beq	1bf4c <_start@@Base+0x9830>
   1c7b8:	mov	r3, #4
   1c7bc:	mov	r1, #16
   1c7c0:	ldr	r0, [fp]
   1c7c4:	mov	r2, r3
   1c7c8:	bl	259e0 <flatcc_builder_table_add@@Base>
   1c7cc:	cmp	r0, #0
   1c7d0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c7d4:	ldr	r3, [sp, #344]	; 0x158
   1c7d8:	str	r3, [r0]
   1c7dc:	b	1bf4c <_start@@Base+0x9830>
   1c7e0:	cmp	r8, #5
   1c7e4:	ble	1d448 <_start@@Base+0xad2c>
   1c7e8:	mov	r2, r9
   1c7ec:	mov	r1, sl
   1c7f0:	mov	r0, fp
   1c7f4:	bl	13be4 <_start@@Base+0x14c8>
   1c7f8:	cmp	r0, sl
   1c7fc:	mov	r4, r0
   1c800:	beq	1d448 <_start@@Base+0xad2c>
   1c804:	mvn	r3, #-1073741824	; 0xc0000000
   1c808:	mov	r2, #2
   1c80c:	ldr	r0, [fp]
   1c810:	mov	r1, #4
   1c814:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1c818:	cmp	r0, #0
   1c81c:	bne	1f830 <_start@@Base+0xd114>
   1c820:	add	r3, sp, #320	; 0x140
   1c824:	mov	r1, r4
   1c828:	mov	r2, r9
   1c82c:	mov	r0, fp
   1c830:	bl	13ea0 <_start@@Base+0x1784>
   1c834:	ldr	r3, [sp, #320]	; 0x140
   1c838:	mov	sl, r0
   1c83c:	cmp	r3, #0
   1c840:	beq	1c88c <_start@@Base+0xa170>
   1c844:	mov	r1, #1
   1c848:	ldr	r0, [fp]
   1c84c:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1c850:	subs	r3, r0, #0
   1c854:	mov	r1, sl
   1c858:	mov	r2, r9
   1c85c:	mov	r0, fp
   1c860:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c864:	bl	1984c <_start@@Base+0x7130>
   1c868:	mov	r1, r0
   1c86c:	add	r3, sp, #320	; 0x140
   1c870:	mov	r2, r9
   1c874:	mov	r0, fp
   1c878:	bl	196bc <_start@@Base+0x6fa0>
   1c87c:	ldr	r3, [sp, #320]	; 0x140
   1c880:	mov	sl, r0
   1c884:	cmp	r3, #0
   1c888:	bne	1c844 <_start@@Base+0xa128>
   1c88c:	ldr	r0, [fp]
   1c890:	bl	24304 <flatcc_builder_end_vector@@Base>
   1c894:	cmp	r0, #0
   1c898:	str	r0, [sp, #324]	; 0x144
   1c89c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c8a0:	mov	r1, #9
   1c8a4:	ldr	r0, [fp]
   1c8a8:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1c8ac:	cmp	r0, #0
   1c8b0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c8b4:	ldr	r3, [sp, #324]	; 0x144
   1c8b8:	str	r3, [r0]
   1c8bc:	b	1bf4c <_start@@Base+0x9830>
   1c8c0:	add	r3, pc, #272	; 0x110
   1c8c4:	ldrd	r2, [r3]
   1c8c8:	cmp	r1, r3
   1c8cc:	cmpeq	r0, r2
   1c8d0:	beq	1d478 <_start@@Base+0xad5c>
   1c8d4:	add	r3, pc, #260	; 0x104
   1c8d8:	ldrd	r2, [r3]
   1c8dc:	cmp	r1, r3
   1c8e0:	cmpeq	r0, r2
   1c8e4:	bne	1e158 <_start@@Base+0xba3c>
   1c8e8:	mov	r3, #0
   1c8ec:	add	r4, sl, #16
   1c8f0:	mov	r1, r9
   1c8f4:	mov	r0, r4
   1c8f8:	str	r3, [sp, #208]	; 0xd0
   1c8fc:	bl	12810 <_start@@Base+0xf4>
   1c900:	and	r3, r1, #-16777216	; 0xff000000
   1c904:	str	r3, [sp, #212]	; 0xd4
   1c908:	ldrd	r2, [sp, #208]	; 0xd0
   1c90c:	cmp	r3, #1929379840	; 0x73000000
   1c910:	cmpeq	r2, #0
   1c914:	bne	1e4b4 <_start@@Base+0xbd98>
   1c918:	sub	r3, r9, r4
   1c91c:	cmp	r3, #1
   1c920:	ble	1f2c8 <_start@@Base+0xcbac>
   1c924:	mov	r2, r9
   1c928:	mov	r1, r4
   1c92c:	mov	r0, fp
   1c930:	bl	1392c <_start@@Base+0x1210>
   1c934:	cmp	r4, r0
   1c938:	mov	sl, r0
   1c93c:	bne	1f2e8 <_start@@Base+0xcbcc>
   1c940:	mov	r1, sl
   1c944:	mov	r2, r9
   1c948:	mov	r0, fp
   1c94c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1c950:	mov	sl, r0
   1c954:	b	1bf4c <_start@@Base+0x9830>
   1c958:	sub	r3, r9, sl
   1c95c:	cmp	r3, #5
   1c960:	ble	1d460 <_start@@Base+0xad44>
   1c964:	mov	r1, sl
   1c968:	mov	r2, r9
   1c96c:	mov	r0, fp
   1c970:	bl	13be4 <_start@@Base+0x14c8>
   1c974:	cmp	r0, sl
   1c978:	mov	r1, r0
   1c97c:	beq	1d460 <_start@@Base+0xad44>
   1c980:	add	r3, sp, #324	; 0x144
   1c984:	mov	r2, r9
   1c988:	mov	r0, fp
   1c98c:	bl	1b688 <_start@@Base+0x8f6c>
   1c990:	ldr	r3, [sp, #324]	; 0x144
   1c994:	mov	sl, r0
   1c998:	cmp	r3, #0
   1c99c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c9a0:	mov	r1, #12
   1c9a4:	ldr	r0, [fp]
   1c9a8:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1c9ac:	cmp	r0, #0
   1c9b0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1c9b4:	ldr	r3, [sp, #324]	; 0x144
   1c9b8:	str	r3, [r0]
   1c9bc:	b	1bf4c <_start@@Base+0x9830>
   1c9c0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1c9c4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c9c8:			; <UNDEFINED> instruction: 0x666e7630
   1c9cc:	teqvc	r6, #1593835520	; 0x5f000000
   1c9d0:			; <UNDEFINED> instruction: 0x666e7631
   1c9d4:	teqvc	r3, #-268435451	; 0xf0000005
   1c9d8:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1c9dc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c9e0:	cmnvs	r2, r5, ror #24
   1c9e4:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c9e8:	svcvs	0x00725f6f
   1c9ec:			; <UNDEFINED> instruction: 0x76656374
   1c9f0:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1c9f4:	ldrbvs	r6, [pc], -pc, ror #8
   1c9f8:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1c9fc:	ldrbvs	r6, [pc], -pc, ror #24
   1ca00:	andeq	r0, r4, r0, lsl #6
   1ca04:	sub	r3, pc, #36	; 0x24
   1ca08:	ldrd	r2, [r3]
   1ca0c:	cmp	r1, r3
   1ca10:	cmpeq	r0, r2
   1ca14:	bne	1d418 <_start@@Base+0xacfc>
   1ca18:	add	r4, sl, #8
   1ca1c:	mov	r1, r9
   1ca20:	mov	r0, r4
   1ca24:	bl	12810 <_start@@Base+0xf4>
   1ca28:	sub	r3, pc, #64	; 0x40
   1ca2c:	ldrd	r2, [r3]
   1ca30:	cmp	r1, r3
   1ca34:	cmpeq	r0, r2
   1ca38:	beq	1ec4c <_start@@Base+0xc530>
   1ca3c:	bic	ip, r0, #255	; 0xff
   1ca40:	sub	r3, pc, #80	; 0x50
   1ca44:	ldrd	r2, [r3]
   1ca48:	str	ip, [sp, #216]	; 0xd8
   1ca4c:	str	r1, [sp, #220]	; 0xdc
   1ca50:	ldrd	r0, [sp, #216]	; 0xd8
   1ca54:	cmp	r1, r3
   1ca58:	cmpeq	r0, r2
   1ca5c:	bne	1e4cc <_start@@Base+0xbdb0>
   1ca60:	sub	r3, r9, r4
   1ca64:	cmp	r3, #7
   1ca68:	ble	1ef50 <_start@@Base+0xc834>
   1ca6c:	mov	r3, #7
   1ca70:	mov	r2, r9
   1ca74:	mov	r1, r4
   1ca78:	mov	r0, fp
   1ca7c:	bl	13ccc <_start@@Base+0x15b0>
   1ca80:	cmp	r4, r0
   1ca84:	mov	sl, r0
   1ca88:	beq	1ef4c <_start@@Base+0xc830>
   1ca8c:	mov	r2, #8
   1ca90:	mvn	r3, #-536870912	; 0xe0000000
   1ca94:	ldr	r0, [fp]
   1ca98:	mov	r1, r2
   1ca9c:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1caa0:	cmp	r0, #0
   1caa4:	bne	1b6d4 <_start@@Base+0x8fb8>
   1caa8:	mov	r1, sl
   1caac:	add	r3, sp, #320	; 0x140
   1cab0:	mov	r2, r9
   1cab4:	mov	r0, fp
   1cab8:	bl	13ea0 <_start@@Base+0x1784>
   1cabc:	ldr	r3, [sp, #320]	; 0x140
   1cac0:	mov	sl, r0
   1cac4:	cmp	r3, #0
   1cac8:	beq	1f5c8 <_start@@Base+0xceac>
   1cacc:	ldr	r5, [pc, #-212]	; 1ca00 <_start@@Base+0xa2e4>
   1cad0:	mov	r8, r0
   1cad4:	mov	r4, r9
   1cad8:	b	1cb0c <_start@@Base+0xa3f0>
   1cadc:	add	r3, sp, #344	; 0x158
   1cae0:	mov	r1, r0
   1cae4:	ldrd	r8, [r3]
   1cae8:	mov	r2, r4
   1caec:	add	r3, sp, #320	; 0x140
   1caf0:	mov	r0, fp
   1caf4:	strd	r8, [sl]
   1caf8:	bl	196bc <_start@@Base+0x6fa0>
   1cafc:	ldr	r3, [sp, #320]	; 0x140
   1cb00:	mov	r8, r0
   1cb04:	cmp	r3, #0
   1cb08:	beq	1f5c0 <_start@@Base+0xcea4>
   1cb0c:	mov	r2, #0
   1cb10:	mov	r3, #0
   1cb14:	ldr	r0, [fp]
   1cb18:	add	ip, sp, #344	; 0x158
   1cb1c:	mov	r1, #1
   1cb20:	strd	r2, [ip]
   1cb24:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1cb28:	subs	sl, r0, #0
   1cb2c:	mov	r1, r8
   1cb30:	add	r3, sp, #344	; 0x158
   1cb34:	mov	r2, r4
   1cb38:	mov	r0, fp
   1cb3c:	beq	1f5b4 <_start@@Base+0xce98>
   1cb40:	bl	1345c <_start@@Base+0xd40>
   1cb44:	cmp	r0, r8
   1cb48:	bne	1cadc <_start@@Base+0xa3c0>
   1cb4c:	add	r1, sp, #344	; 0x158
   1cb50:	mov	r3, r5
   1cb54:	mov	r2, r4
   1cb58:	mov	r0, fp
   1cb5c:	str	r1, [sp]
   1cb60:	mov	r1, r8
   1cb64:	bl	160d0 <_start@@Base+0x39b4>
   1cb68:	cmp	r4, r0
   1cb6c:	cmpne	r0, r8
   1cb70:	bne	1cadc <_start@@Base+0xa3c0>
   1cb74:	mov	r9, r4
   1cb78:	mov	sl, r0
   1cb7c:	b	1b6d4 <_start@@Base+0x8fb8>
   1cb80:	lsr	r3, r0, #16
   1cb84:	str	r3, [sp, #72]	; 0x48
   1cb88:	ldr	r1, [sp, #72]	; 0x48
   1cb8c:	str	r5, [sp, #76]	; 0x4c
   1cb90:	add	r3, pc, #720	; 0x2d0
   1cb94:	ldrd	r2, [r3]
   1cb98:	lsl	r1, r1, #16
   1cb9c:	str	r1, [sp, #72]	; 0x48
   1cba0:	sub	r1, r9, sl
   1cba4:	ldrd	r4, [sp, #72]	; 0x48
   1cba8:	cmp	r5, r3
   1cbac:	cmpeq	r4, r2
   1cbb0:	beq	1d5e4 <_start@@Base+0xaec8>
   1cbb4:	cmp	r1, #5
   1cbb8:	ble	1eb5c <_start@@Base+0xc440>
   1cbbc:	mov	r2, r9
   1cbc0:	mov	r1, sl
   1cbc4:	mov	r0, fp
   1cbc8:	bl	13be4 <_start@@Base+0x14c8>
   1cbcc:	cmp	r0, sl
   1cbd0:	mov	r4, r0
   1cbd4:	beq	1eb5c <_start@@Base+0xc440>
   1cbd8:	mov	ip, #0
   1cbdc:	mov	r1, r0
   1cbe0:	mov	r2, r9
   1cbe4:	add	r3, sp, #344	; 0x158
   1cbe8:	mov	r0, fp
   1cbec:	str	ip, [sp, #344]	; 0x158
   1cbf0:	bl	29830 <flatcc_json_parser_float@@Base>
   1cbf4:	cmp	r0, r4
   1cbf8:	mov	sl, r0
   1cbfc:	beq	1efe0 <_start@@Base+0xc8c4>
   1cc00:	vldr	s15, [pc, #648]	; 1ce90 <_start@@Base+0xa774>
   1cc04:	vldr	s14, [sp, #344]	; 0x158
   1cc08:	vcmp.f32	s14, s15
   1cc0c:	vmrs	APSR_nzcv, fpscr
   1cc10:	bne	1cc20 <_start@@Base+0xa504>
   1cc14:	ldr	r3, [fp, #8]
   1cc18:	tst	r3, #2
   1cc1c:	beq	1bf4c <_start@@Base+0x9830>
   1cc20:	mov	r3, #4
   1cc24:	mov	r1, #25
   1cc28:	ldr	r0, [fp]
   1cc2c:	mov	r2, r3
   1cc30:	bl	259e0 <flatcc_builder_table_add@@Base>
   1cc34:	cmp	r0, #0
   1cc38:	beq	1b6d4 <_start@@Base+0x8fb8>
   1cc3c:	ldr	r3, [sp, #344]	; 0x158
   1cc40:	str	r3, [r0]
   1cc44:	b	1bf4c <_start@@Base+0x9830>
   1cc48:	add	r3, pc, #544	; 0x220
   1cc4c:	ldrd	r2, [r3]
   1cc50:	cmp	r1, r3
   1cc54:	cmpeq	r0, r2
   1cc58:	beq	1e1c8 <_start@@Base+0xbaac>
   1cc5c:	ldr	r1, [sp, #20]
   1cc60:	mov	r4, #0
   1cc64:	str	r4, [sp, #176]	; 0xb0
   1cc68:	add	r3, pc, #520	; 0x208
   1cc6c:	ldrd	r2, [r3]
   1cc70:	str	r1, [sp, #180]	; 0xb4
   1cc74:	ldrd	r0, [sp, #176]	; 0xb0
   1cc78:	cmp	r1, r3
   1cc7c:	cmpeq	r0, r2
   1cc80:	bne	1eb2c <_start@@Base+0xc410>
   1cc84:	sub	r3, r9, sl
   1cc88:	cmp	r3, #4
   1cc8c:	ble	1e78c <_start@@Base+0xc070>
   1cc90:	mov	r3, #4
   1cc94:	mov	r2, r9
   1cc98:	mov	r1, sl
   1cc9c:	mov	r0, fp
   1cca0:	bl	13ccc <_start@@Base+0x15b0>
   1cca4:	cmp	r0, sl
   1cca8:	mov	r5, r0
   1ccac:	beq	1e78c <_start@@Base+0xc070>
   1ccb0:	add	r8, sp, #344	; 0x158
   1ccb4:	mov	r1, r0
   1ccb8:	mov	r2, r9
   1ccbc:	mov	r3, r8
   1ccc0:	mov	r0, fp
   1ccc4:	strh	r4, [r8]
   1ccc8:	bl	13848 <_start@@Base+0x112c>
   1cccc:	cmp	r5, r0
   1ccd0:	mov	sl, r0
   1ccd4:	beq	1f5fc <_start@@Base+0xcee0>
   1ccd8:	add	r3, sp, #344	; 0x158
   1ccdc:	ldrsh	r3, [r3]
   1cce0:	cmp	r3, #150	; 0x96
   1cce4:	bne	1ccf4 <_start@@Base+0xa5d8>
   1cce8:	ldr	r3, [fp, #8]
   1ccec:	tst	r3, #2
   1ccf0:	beq	1bf4c <_start@@Base+0x9830>
   1ccf4:	mov	r3, #2
   1ccf8:	mov	r1, #1
   1ccfc:	ldr	r0, [fp]
   1cd00:	mov	r2, r3
   1cd04:	bl	259e0 <flatcc_builder_table_add@@Base>
   1cd08:	cmp	r0, #0
   1cd0c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1cd10:	add	r3, sp, #344	; 0x158
   1cd14:	ldrsh	r3, [r3]
   1cd18:	strh	r3, [r0]
   1cd1c:	b	1bf4c <_start@@Base+0x9830>
   1cd20:	mov	r1, sl
   1cd24:	mov	r2, r9
   1cd28:	mov	r0, fp
   1cd2c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1cd30:	mov	sl, r0
   1cd34:	b	1bf4c <_start@@Base+0x9830>
   1cd38:	mov	r1, sl
   1cd3c:	mov	r2, r9
   1cd40:	mov	r0, fp
   1cd44:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1cd48:	mov	sl, r0
   1cd4c:	b	1bf4c <_start@@Base+0x9830>
   1cd50:	mov	r1, sl
   1cd54:	mov	r2, r9
   1cd58:	mov	r0, fp
   1cd5c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1cd60:	mov	sl, r0
   1cd64:	b	1bf4c <_start@@Base+0x9830>
   1cd68:	add	r3, pc, #272	; 0x110
   1cd6c:	ldrd	r2, [r3]
   1cd70:	cmp	r1, r3
   1cd74:	cmpeq	r0, r2
   1cd78:	bne	1e0e0 <_start@@Base+0xb9c4>
   1cd7c:	add	r4, sl, #16
   1cd80:	mov	r1, r9
   1cd84:	mov	r0, r4
   1cd88:	bl	12810 <_start@@Base+0xf4>
   1cd8c:	bic	r0, r0, #255	; 0xff
   1cd90:	add	r3, pc, #240	; 0xf0
   1cd94:	ldrd	r2, [r3]
   1cd98:	strd	r0, [sp, #200]	; 0xc8
   1cd9c:	ldrd	r0, [sp, #200]	; 0xc8
   1cda0:	cmp	r1, r3
   1cda4:	cmpeq	r0, r2
   1cda8:	bne	1e46c <_start@@Base+0xbd50>
   1cdac:	sub	r3, r9, r4
   1cdb0:	cmp	r3, #7
   1cdb4:	ble	1eea0 <_start@@Base+0xc784>
   1cdb8:	mov	r3, #7
   1cdbc:	mov	r2, r9
   1cdc0:	mov	r1, r4
   1cdc4:	mov	r0, fp
   1cdc8:	bl	13ccc <_start@@Base+0x15b0>
   1cdcc:	cmp	r4, r0
   1cdd0:	mov	sl, r0
   1cdd4:	beq	1ee9c <_start@@Base+0xc780>
   1cdd8:	mvn	r3, #-536870912	; 0xe0000000
   1cddc:	mov	r2, #4
   1cde0:	ldr	r0, [fp]
   1cde4:	mov	r1, #8
   1cde8:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1cdec:	cmp	r0, #0
   1cdf0:	bne	1b6d4 <_start@@Base+0x8fb8>
   1cdf4:	mov	r1, sl
   1cdf8:	add	r3, sp, #320	; 0x140
   1cdfc:	mov	r2, r9
   1ce00:	mov	r0, fp
   1ce04:	bl	13ea0 <_start@@Base+0x1784>
   1ce08:	ldr	r3, [sp, #320]	; 0x140
   1ce0c:	mov	sl, r0
   1ce10:	cmp	r3, #0
   1ce14:	beq	1e97c <_start@@Base+0xc260>
   1ce18:	add	r3, sp, #272	; 0x110
   1ce1c:	strd	r6, [r3]
   1ce20:	mov	r1, #1
   1ce24:	ldr	r0, [fp]
   1ce28:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1ce2c:	subs	r7, r0, #0
   1ce30:	beq	1b6d4 <_start@@Base+0x8fb8>
   1ce34:	add	r8, sp, #340	; 0x154
   1ce38:	mov	r1, sl
   1ce3c:	mov	r3, r8
   1ce40:	mov	r2, r9
   1ce44:	mov	r0, fp
   1ce48:	bl	13dcc <_start@@Base+0x16b0>
   1ce4c:	ldr	r3, [sp, #340]	; 0x154
   1ce50:	mov	r4, r0
   1ce54:	cmp	r3, #0
   1ce58:	beq	1e950 <_start@@Base+0xc234>
   1ce5c:	mov	r5, #0
   1ce60:	str	r7, [sp, #16]
   1ce64:	b	1cf24 <_start@@Base+0xa808>
   1ce68:	ldrtvs	r0, [r2], -r0
   1ce6c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ce70:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1ce74:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1ce78:	andeq	r0, r0, r0
   1ce7c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1ce80:	svcvs	0x00727465
   1ce84:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1ce88:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1ce8c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1ce90:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1ce94:	add	r3, pc, #1004	; 0x3ec
   1ce98:	ldrd	r2, [r3]
   1ce9c:	cmp	r1, r3
   1cea0:	cmpeq	r0, r2
   1cea4:	bne	1e870 <_start@@Base+0xc154>
   1cea8:	sub	r3, r9, r4
   1ceac:	cmp	r3, #8
   1ceb0:	ble	1e870 <_start@@Base+0xc154>
   1ceb4:	mov	r2, r9
   1ceb8:	mov	r1, r4
   1cebc:	mov	r0, fp
   1cec0:	bl	13afc <_start@@Base+0x13e0>
   1cec4:	cmp	r0, r4
   1cec8:	mov	sl, r0
   1cecc:	beq	1e870 <_start@@Base+0xc154>
   1ced0:	mov	r1, r0
   1ced4:	mov	r2, r9
   1ced8:	str	r5, [sp, #344]	; 0x158
   1cedc:	add	r3, sp, #344	; 0x158
   1cee0:	mov	r0, fp
   1cee4:	bl	13694 <_start@@Base+0xf78>
   1cee8:	cmp	sl, r0
   1ceec:	mov	r4, r0
   1cef0:	beq	1e904 <_start@@Base+0xc1e8>
   1cef4:	ldr	r2, [sp, #16]
   1cef8:	ldr	r3, [sp, #344]	; 0x158
   1cefc:	str	r3, [r2, #4]
   1cf00:	mov	r1, r4
   1cf04:	mov	r3, r8
   1cf08:	mov	r2, r9
   1cf0c:	mov	r0, fp
   1cf10:	bl	16560 <_start@@Base+0x3e44>
   1cf14:	ldr	r3, [sp, #340]	; 0x154
   1cf18:	mov	r4, r0
   1cf1c:	cmp	r3, #0
   1cf20:	beq	1e9b0 <_start@@Base+0xc294>
   1cf24:	cmp	r9, r4
   1cf28:	beq	1cf50 <_start@@Base+0xa834>
   1cf2c:	ldrb	r3, [r4]
   1cf30:	cmp	r3, #34	; 0x22
   1cf34:	addeq	r4, r4, #1
   1cf38:	streq	r5, [fp, #12]
   1cf3c:	beq	1cf50 <_start@@Base+0xa834>
   1cf40:	cmp	r3, #46	; 0x2e
   1cf44:	movne	r3, #1
   1cf48:	strne	r3, [fp, #12]
   1cf4c:	beq	1e8b8 <_start@@Base+0xc19c>
   1cf50:	mov	r1, r9
   1cf54:	mov	r0, r4
   1cf58:	bl	12810 <_start@@Base+0xf4>
   1cf5c:	lsr	r7, r1, #16
   1cf60:	mov	r3, #0
   1cf64:	movt	r3, #26980	; 0x6964
   1cf68:	mov	r2, #0
   1cf6c:	mov	r6, r5
   1cf70:	lsl	r7, r7, #16
   1cf74:	cmp	r7, r3
   1cf78:	cmpeq	r5, r2
   1cf7c:	bne	1ce94 <_start@@Base+0xa778>
   1cf80:	sub	r3, r9, r4
   1cf84:	cmp	r3, #2
   1cf88:	ble	1e870 <_start@@Base+0xc154>
   1cf8c:	mov	r2, r9
   1cf90:	mov	r1, r4
   1cf94:	mov	r0, fp
   1cf98:	bl	13a14 <_start@@Base+0x12f8>
   1cf9c:	cmp	r0, r4
   1cfa0:	mov	sl, r0
   1cfa4:	beq	1e870 <_start@@Base+0xc154>
   1cfa8:	mov	r1, r0
   1cfac:	mov	r2, r9
   1cfb0:	str	r5, [sp, #344]	; 0x158
   1cfb4:	add	r3, sp, #344	; 0x158
   1cfb8:	mov	r0, fp
   1cfbc:	bl	13694 <_start@@Base+0xf78>
   1cfc0:	cmp	sl, r0
   1cfc4:	mov	r4, r0
   1cfc8:	beq	1e8d4 <_start@@Base+0xc1b8>
   1cfcc:	ldr	r2, [sp, #16]
   1cfd0:	ldr	r3, [sp, #344]	; 0x158
   1cfd4:	str	r3, [r2]
   1cfd8:	b	1cf00 <_start@@Base+0xa7e4>
   1cfdc:	add	r3, pc, #684	; 0x2ac
   1cfe0:	ldrd	r2, [r3]
   1cfe4:	cmp	r1, r3
   1cfe8:	cmpeq	r0, r2
   1cfec:	bhi	1e318 <_start@@Base+0xbbfc>
   1cff0:	add	r3, pc, #672	; 0x2a0
   1cff4:	ldrd	r2, [r3]
   1cff8:	cmp	r1, r3
   1cffc:	cmpeq	r0, r2
   1d000:	bne	1e514 <_start@@Base+0xbdf8>
   1d004:	sub	r3, r9, sl
   1d008:	cmp	r3, #8
   1d00c:	ble	1f1f8 <_start@@Base+0xcadc>
   1d010:	mov	r1, sl
   1d014:	mov	r2, r9
   1d018:	mov	r0, fp
   1d01c:	bl	13afc <_start@@Base+0x13e0>
   1d020:	cmp	sl, r0
   1d024:	mov	r1, r0
   1d028:	str	r0, [sp, #16]
   1d02c:	beq	1f1f8 <_start@@Base+0xcadc>
   1d030:	add	r8, sp, #344	; 0x158
   1d034:	mov	r4, #0
   1d038:	mov	r5, #0
   1d03c:	mov	r3, r8
   1d040:	mov	r2, r9
   1d044:	mov	r0, fp
   1d048:	strd	r4, [r8]
   1d04c:	bl	1345c <_start@@Base+0xd40>
   1d050:	ldr	r1, [sp, #16]
   1d054:	mov	sl, r0
   1d058:	cmp	r0, r1
   1d05c:	beq	1f804 <_start@@Base+0xd0e8>
   1d060:	add	r3, sp, #344	; 0x158
   1d064:	ldrd	r2, [r3]
   1d068:	orrs	r3, r2, r3
   1d06c:	bne	1d07c <_start@@Base+0xa960>
   1d070:	ldr	r3, [fp, #8]
   1d074:	tst	r3, #2
   1d078:	beq	1bf4c <_start@@Base+0x9830>
   1d07c:	mov	r3, #8
   1d080:	mov	r1, #18
   1d084:	ldr	r0, [fp]
   1d088:	mov	r2, r3
   1d08c:	bl	259e0 <flatcc_builder_table_add@@Base>
   1d090:	cmp	r0, #0
   1d094:	beq	1b6d4 <_start@@Base+0x8fb8>
   1d098:	add	r3, sp, #344	; 0x158
   1d09c:	ldrd	r2, [r3]
   1d0a0:	strd	r2, [r0]
   1d0a4:	b	1bf4c <_start@@Base+0x9830>
   1d0a8:	ldrb	r2, [r4, #7]
   1d0ac:	mov	r3, #0
   1d0b0:	mov	lr, r3
   1d0b4:	ldrb	r0, [r4, #6]
   1d0b8:	orr	r1, r2, r0, lsl #8
   1d0bc:	ldrb	r2, [r4, #5]
   1d0c0:	mov	r0, lr
   1d0c4:	orr	r1, r1, r2, lsl #16
   1d0c8:	ldrb	r2, [r4, #4]
   1d0cc:	mov	lr, r0
   1d0d0:	orr	r2, r1, r2, lsl #24
   1d0d4:	ldrb	r0, [r4, #3]
   1d0d8:	orr	r3, lr, r0
   1d0dc:	ldrb	r0, [r4, #2]
   1d0e0:	orr	r3, r3, r0, lsl #8
   1d0e4:	ldrb	r0, [r4, #1]
   1d0e8:	mov	r6, r2
   1d0ec:	ldrb	r2, [r4]
   1d0f0:	orr	r0, r3, r0, lsl #16
   1d0f4:	orr	r7, r0, r2, lsl #24
   1d0f8:	add	r3, pc, #424	; 0x1a8
   1d0fc:	ldrd	r2, [r3]
   1d100:	cmp	r7, r3
   1d104:	cmpeq	r6, r2
   1d108:	bls	1d72c <_start@@Base+0xb010>
   1d10c:	mvn	r3, #-2013265920	; 0x88000000
   1d110:	mvn	r2, #0
   1d114:	cmp	r7, r3
   1d118:	cmpeq	r6, r2
   1d11c:	bhi	1d860 <_start@@Base+0xb144>
   1d120:	and	r3, r6, #-16777216	; 0xff000000
   1d124:	add	r1, pc, #372	; 0x174
   1d128:	ldrd	r0, [r1]
   1d12c:	str	r3, [sp, #32]
   1d130:	str	r7, [sp, #36]	; 0x24
   1d134:	ldrd	r2, [sp, #32]
   1d138:	cmp	r3, r1
   1d13c:	cmpeq	r2, r0
   1d140:	bne	1d714 <_start@@Base+0xaff8>
   1d144:	cmp	ip, #5
   1d148:	ble	1d714 <_start@@Base+0xaff8>
   1d14c:	ldr	r2, [fp, #12]
   1d150:	ldrb	r3, [r4, #5]
   1d154:	cmp	r2, #0
   1d158:	beq	1debc <_start@@Base+0xb7a0>
   1d15c:	cmp	r3, #58	; 0x3a
   1d160:	cmpne	r3, #32
   1d164:	movhi	r3, #1
   1d168:	movls	r3, #0
   1d16c:	bhi	1d714 <_start@@Base+0xaff8>
   1d170:	add	r1, r4, #5
   1d174:	str	r3, [fp, #12]
   1d178:	sub	r3, r9, r1
   1d17c:	cmp	r3, #1
   1d180:	ble	1d194 <_start@@Base+0xaa78>
   1d184:	ldrb	r3, [r1]
   1d188:	cmp	r3, #32
   1d18c:	bhi	1d1a4 <_start@@Base+0xaa88>
   1d190:	beq	1ee58 <_start@@Base+0xc73c>
   1d194:	mov	r2, r9
   1d198:	mov	r0, fp
   1d19c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1d1a0:	mov	r1, r0
   1d1a4:	cmp	r9, r1
   1d1a8:	beq	1d1b8 <_start@@Base+0xaa9c>
   1d1ac:	ldrb	r3, [r1]
   1d1b0:	cmp	r3, #58	; 0x3a
   1d1b4:	beq	1f0b4 <_start@@Base+0xc998>
   1d1b8:	mov	r3, #4
   1d1bc:	mov	r2, r9
   1d1c0:	mov	r0, fp
   1d1c4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1d1c8:	mov	r1, r0
   1d1cc:	cmp	r1, r4
   1d1d0:	beq	1d714 <_start@@Base+0xaff8>
   1d1d4:	add	r3, r8, #26
   1d1d8:	mov	r2, r9
   1d1dc:	mov	r0, fp
   1d1e0:	bl	1984c <_start@@Base+0x7130>
   1d1e4:	mov	sl, r0
   1d1e8:	sub	r3, r9, sl
   1d1ec:	cmp	r3, #1
   1d1f0:	ble	1d204 <_start@@Base+0xaae8>
   1d1f4:	ldrb	r3, [sl]
   1d1f8:	cmp	r3, #32
   1d1fc:	bhi	1d218 <_start@@Base+0xaafc>
   1d200:	beq	1d900 <_start@@Base+0xb1e4>
   1d204:	mov	r1, sl
   1d208:	mov	r2, r9
   1d20c:	mov	r0, fp
   1d210:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1d214:	mov	sl, r0
   1d218:	cmp	r9, sl
   1d21c:	beq	1bf4c <_start@@Base+0x9830>
   1d220:	ldrb	r3, [sl]
   1d224:	cmp	r3, #44	; 0x2c
   1d228:	beq	1d914 <_start@@Base+0xb1f8>
   1d22c:	mov	r3, #0
   1d230:	str	r3, [sp, #336]	; 0x150
   1d234:	ldrb	r3, [sl]
   1d238:	cmp	r3, #125	; 0x7d
   1d23c:	beq	1d8c8 <_start@@Base+0xb1ac>
   1d240:	mov	r3, #10
   1d244:	mov	r1, sl
   1d248:	mov	r2, r9
   1d24c:	mov	r0, fp
   1d250:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1d254:	ldr	r3, [sp, #336]	; 0x150
   1d258:	mov	r4, r0
   1d25c:	cmp	r3, #0
   1d260:	bne	1c564 <_start@@Base+0x9e48>
   1d264:	mov	sl, r4
   1d268:	b	1bf4c <_start@@Base+0x9830>
   1d26c:	mov	r2, #0
   1d270:	mov	r3, #0
   1d274:	b	1d0b0 <_start@@Base+0xa994>
   1d278:	mov	r1, #0
   1d27c:	mov	lr, r1
   1d280:	b	1d0bc <_start@@Base+0xa9a0>
   1d284:	nop	{0}
   1d288:	cmnvs	lr, r5, ror #6
   1d28c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1d290:			; <UNDEFINED> instruction: 0x666e7630
   1d294:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1d298:			; <UNDEFINED> instruction: 0x666e7631
   1d29c:	teqvc	r6, #1593835520	; 0x5f000000
   1d2a0:	movwcc	r0, #0
   1d2a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d2a8:	rscscc	pc, pc, #1020	; 0x3fc
   1d2ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d2b0:	mrscc	r0, (UNDEF: 0)
   1d2b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d2b8:	andeq	r0, r4, r0, asr #4
   1d2bc:	submi	r0, r0, r0
   1d2c0:	mov	r2, #0
   1d2c4:	mov	r3, r2
   1d2c8:	b	1d0dc <_start@@Base+0xa9c0>
   1d2cc:	mov	r2, #0
   1d2d0:	mov	r3, r2
   1d2d4:	b	1d0e4 <_start@@Base+0xa9c8>
   1d2d8:	mov	r1, #0
   1d2dc:	mov	r0, r1
   1d2e0:	b	1d0c8 <_start@@Base+0xa9ac>
   1d2e4:	mov	r2, #0
   1d2e8:	mov	lr, r2
   1d2ec:	b	1d0d4 <_start@@Base+0xa9b8>
   1d2f0:	ldrb	r2, [r4]
   1d2f4:	mov	r6, #0
   1d2f8:	lsl	r7, r2, #24
   1d2fc:	sub	r3, pc, #92	; 0x5c
   1d300:	ldrd	r2, [r3]
   1d304:	cmp	r7, r3
   1d308:	cmpeq	r6, r2
   1d30c:	bhi	1d10c <_start@@Base+0xa9f0>
   1d310:	sub	r3, pc, #104	; 0x68
   1d314:	ldrd	r2, [r3]
   1d318:	cmp	r7, r3
   1d31c:	cmpeq	r6, r2
   1d320:	bne	1d714 <_start@@Base+0xaff8>
   1d324:	cmp	ip, #5
   1d328:	ble	1d714 <_start@@Base+0xaff8>
   1d32c:	ldr	r2, [fp, #12]
   1d330:	ldrb	r3, [r4, #5]
   1d334:	cmp	r2, #0
   1d338:	beq	1db5c <_start@@Base+0xb440>
   1d33c:	cmp	r3, #58	; 0x3a
   1d340:	cmpne	r3, #32
   1d344:	movhi	r3, #1
   1d348:	movls	r3, #0
   1d34c:	bhi	1d714 <_start@@Base+0xaff8>
   1d350:	add	r1, r4, #5
   1d354:	str	r3, [fp, #12]
   1d358:	sub	r3, r9, r1
   1d35c:	cmp	r3, #1
   1d360:	ble	1d374 <_start@@Base+0xac58>
   1d364:	ldrb	r3, [r1]
   1d368:	cmp	r3, #32
   1d36c:	bhi	1d384 <_start@@Base+0xac68>
   1d370:	beq	1ec20 <_start@@Base+0xc504>
   1d374:	mov	r2, r9
   1d378:	mov	r0, fp
   1d37c:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1d380:	mov	r1, r0
   1d384:	cmp	r9, r1
   1d388:	beq	1d398 <_start@@Base+0xac7c>
   1d38c:	ldrb	r3, [r1]
   1d390:	cmp	r3, #58	; 0x3a
   1d394:	beq	1ef04 <_start@@Base+0xc7e8>
   1d398:	mov	r3, #4
   1d39c:	mov	r2, r9
   1d3a0:	mov	r0, fp
   1d3a4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1d3a8:	mov	r5, r0
   1d3ac:	cmp	r5, r4
   1d3b0:	beq	1d714 <_start@@Base+0xaff8>
   1d3b4:	mov	r2, r9
   1d3b8:	add	r3, sp, #344	; 0x158
   1d3bc:	vstr	d8, [sp, #344]	; 0x158
   1d3c0:	mov	r1, r5
   1d3c4:	mov	r0, fp
   1d3c8:	bl	296f8 <flatcc_json_parser_double@@Base>
   1d3cc:	cmp	r5, r0
   1d3d0:	mov	sl, r0
   1d3d4:	beq	1e110 <_start@@Base+0xb9f4>
   1d3d8:	add	r3, sp, #344	; 0x158
   1d3dc:	ldrd	r2, [r3]
   1d3e0:	strd	r2, [r8, #16]
   1d3e4:	b	1d1e8 <_start@@Base+0xaacc>
   1d3e8:	mov	r1, sl
   1d3ec:	mov	r2, r9
   1d3f0:	mov	r0, fp
   1d3f4:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d3f8:	mov	sl, r0
   1d3fc:	b	1bf4c <_start@@Base+0x9830>
   1d400:	mov	r1, sl
   1d404:	mov	r2, r9
   1d408:	mov	r0, fp
   1d40c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d410:	mov	sl, r0
   1d414:	b	1bf4c <_start@@Base+0x9830>
   1d418:	mov	r1, sl
   1d41c:	mov	r2, r9
   1d420:	mov	r0, fp
   1d424:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d428:	mov	sl, r0
   1d42c:	b	1bf4c <_start@@Base+0x9830>
   1d430:	mov	r1, sl
   1d434:	mov	r2, r9
   1d438:	mov	r0, fp
   1d43c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d440:	mov	sl, r0
   1d444:	b	1bf4c <_start@@Base+0x9830>
   1d448:	mov	r1, sl
   1d44c:	mov	r2, r9
   1d450:	mov	r0, fp
   1d454:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d458:	mov	sl, r0
   1d45c:	b	1bf4c <_start@@Base+0x9830>
   1d460:	mov	r1, sl
   1d464:	mov	r2, r9
   1d468:	mov	r0, fp
   1d46c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d470:	mov	sl, r0
   1d474:	b	1bf4c <_start@@Base+0x9830>
   1d478:	add	r8, sl, #16
   1d47c:	mov	r1, r9
   1d480:	mov	r0, r8
   1d484:	bl	12810 <_start@@Base+0xf4>
   1d488:	lsr	ip, r1, #16
   1d48c:	mov	r0, #0
   1d490:	mov	r3, #0
   1d494:	movt	r3, #26418	; 0x6732
   1d498:	mov	r2, #0
   1d49c:	lsl	ip, ip, #16
   1d4a0:	str	r0, [sp, #160]	; 0xa0
   1d4a4:	str	ip, [sp, #164]	; 0xa4
   1d4a8:	ldrd	r4, [sp, #160]	; 0xa0
   1d4ac:	cmp	r5, r3
   1d4b0:	cmpeq	r4, r2
   1d4b4:	beq	1e544 <_start@@Base+0xbe28>
   1d4b8:	and	r3, r1, #-16777216	; 0xff000000
   1d4bc:	str	r0, [sp, #248]	; 0xf8
   1d4c0:	str	r3, [sp, #252]	; 0xfc
   1d4c4:	ldrd	r2, [sp, #248]	; 0xf8
   1d4c8:	cmp	r3, #1728053248	; 0x67000000
   1d4cc:	cmpeq	r2, #0
   1d4d0:	bne	1ee84 <_start@@Base+0xc768>
   1d4d4:	sub	r3, r9, r8
   1d4d8:	cmp	r3, #1
   1d4dc:	ble	1f164 <_start@@Base+0xca48>
   1d4e0:	mov	r2, r9
   1d4e4:	mov	r1, r8
   1d4e8:	mov	r0, fp
   1d4ec:	bl	1392c <_start@@Base+0x1210>
   1d4f0:	cmp	r8, r0
   1d4f4:	mov	sl, r0
   1d4f8:	beq	1f160 <_start@@Base+0xca44>
   1d4fc:	ldr	r0, [fp]
   1d500:	bl	23048 <flatcc_builder_start_offset_vector@@Base>
   1d504:	cmp	r0, #0
   1d508:	bne	1b6d4 <_start@@Base+0x8fb8>
   1d50c:	mov	r1, sl
   1d510:	add	r3, sp, #320	; 0x140
   1d514:	mov	r2, r9
   1d518:	mov	r0, fp
   1d51c:	bl	13ea0 <_start@@Base+0x1784>
   1d520:	ldr	r3, [sp, #320]	; 0x140
   1d524:	mov	sl, r0
   1d528:	cmp	r3, #0
   1d52c:	beq	1d598 <_start@@Base+0xae7c>
   1d530:	add	r4, sp, #324	; 0x144
   1d534:	mov	r1, sl
   1d538:	mov	r3, r4
   1d53c:	mov	r2, r9
   1d540:	mov	r0, fp
   1d544:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   1d548:	ldr	r3, [sp, #324]	; 0x144
   1d54c:	mov	sl, r0
   1d550:	mov	r1, #1
   1d554:	cmp	r3, #0
   1d558:	beq	1b6d4 <_start@@Base+0x8fb8>
   1d55c:	ldr	r0, [fp]
   1d560:	bl	2259c <flatcc_builder_extend_offset_vector@@Base>
   1d564:	subs	ip, r0, #0
   1d568:	add	r3, sp, #320	; 0x140
   1d56c:	mov	r2, r9
   1d570:	mov	r1, sl
   1d574:	mov	r0, fp
   1d578:	beq	1b6d4 <_start@@Base+0x8fb8>
   1d57c:	ldr	lr, [sp, #324]	; 0x144
   1d580:	str	lr, [ip]
   1d584:	bl	196bc <_start@@Base+0x6fa0>
   1d588:	ldr	r3, [sp, #320]	; 0x140
   1d58c:	mov	sl, r0
   1d590:	cmp	r3, #0
   1d594:	bne	1d534 <_start@@Base+0xae18>
   1d598:	ldr	r0, [fp]
   1d59c:	bl	246c8 <flatcc_builder_end_offset_vector@@Base>
   1d5a0:	cmp	r0, #0
   1d5a4:	str	r0, [sp, #324]	; 0x144
   1d5a8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1d5ac:	mov	r1, #10
   1d5b0:	ldr	r0, [fp]
   1d5b4:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1d5b8:	cmp	r0, #0
   1d5bc:	beq	1b6d4 <_start@@Base+0x8fb8>
   1d5c0:	ldr	r3, [sp, #324]	; 0x144
   1d5c4:	str	r3, [r0]
   1d5c8:	b	1bf4c <_start@@Base+0x9830>
   1d5cc:	mov	r1, sl
   1d5d0:	mov	r2, r9
   1d5d4:	mov	r0, fp
   1d5d8:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d5dc:	mov	sl, r0
   1d5e0:	b	1bf4c <_start@@Base+0x9830>
   1d5e4:	cmp	r1, #6
   1d5e8:	ble	1e658 <_start@@Base+0xbf3c>
   1d5ec:	mov	r3, #6
   1d5f0:	mov	r2, r9
   1d5f4:	mov	r1, sl
   1d5f8:	mov	r0, fp
   1d5fc:	bl	13ccc <_start@@Base+0x15b0>
   1d600:	cmp	r0, sl
   1d604:	mov	r4, r0
   1d608:	beq	1e658 <_start@@Base+0xbf3c>
   1d60c:	mov	ip, #0
   1d610:	mov	r1, r0
   1d614:	mov	r2, r9
   1d618:	add	r3, sp, #344	; 0x158
   1d61c:	mov	r0, fp
   1d620:	str	ip, [sp, #344]	; 0x158
   1d624:	bl	29830 <flatcc_json_parser_float@@Base>
   1d628:	cmp	r0, r4
   1d62c:	mov	sl, r0
   1d630:	beq	1f3d4 <_start@@Base+0xccb8>
   1d634:	vldr	s15, [pc, #-896]	; 1d2bc <_start@@Base+0xaba0>
   1d638:	vldr	s14, [sp, #344]	; 0x158
   1d63c:	vcmp.f32	s14, s15
   1d640:	vmrs	APSR_nzcv, fpscr
   1d644:	bne	1d654 <_start@@Base+0xaf38>
   1d648:	ldr	r3, [fp, #8]
   1d64c:	tst	r3, #2
   1d650:	beq	1bf4c <_start@@Base+0x9830>
   1d654:	mov	r3, #4
   1d658:	mov	r1, #26
   1d65c:	ldr	r0, [fp]
   1d660:	mov	r2, r3
   1d664:	bl	259e0 <flatcc_builder_table_add@@Base>
   1d668:	cmp	r0, #0
   1d66c:	beq	1f9fc <_start@@Base+0xd2e0>
   1d670:	ldr	r3, [sp, #344]	; 0x158
   1d674:	str	r3, [r0]
   1d678:	b	1bf4c <_start@@Base+0x9830>
   1d67c:	mov	r2, #0
   1d680:	mov	r3, #0
   1d684:	mov	r8, #0
   1d688:	add	r1, sp, #344	; 0x158
   1d68c:	cmp	r9, r4
   1d690:	moveq	r5, r9
   1d694:	strd	r2, [r1]
   1d698:	str	r8, [sp, #340]	; 0x154
   1d69c:	beq	1d6cc <_start@@Base+0xafb0>
   1d6a0:	add	r0, sp, #344	; 0x158
   1d6a4:	add	r3, sp, #340	; 0x154
   1d6a8:	mov	r2, r9
   1d6ac:	mov	r1, r4
   1d6b0:	str	r0, [sp]
   1d6b4:	mov	r0, fp
   1d6b8:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1d6bc:	cmp	r4, r0
   1d6c0:	mov	r5, r0
   1d6c4:	strbeq	r8, [sp, #336]	; 0x150
   1d6c8:	bne	1f078 <_start@@Base+0xc95c>
   1d6cc:	add	ip, sp, #336	; 0x150
   1d6d0:	ldr	r3, [pc, #-1056]	; 1d2b8 <_start@@Base+0xab9c>
   1d6d4:	mov	r2, r9
   1d6d8:	mov	r1, r5
   1d6dc:	mov	r0, fp
   1d6e0:	str	ip, [sp]
   1d6e4:	bl	1453c <_start@@Base+0x1e20>
   1d6e8:	cmp	r9, r0
   1d6ec:	cmpne	r0, r5
   1d6f0:	mov	sl, r0
   1d6f4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1d6f8:	ldrb	r3, [sp, #336]	; 0x150
   1d6fc:	cmp	r3, #1
   1d700:	bne	1b9d8 <_start@@Base+0x92bc>
   1d704:	ldr	r3, [fp, #8]
   1d708:	tst	r3, #2
   1d70c:	beq	1bf4c <_start@@Base+0x9830>
   1d710:	b	1b9d8 <_start@@Base+0x92bc>
   1d714:	mov	r1, r4
   1d718:	mov	r2, r9
   1d71c:	mov	r0, fp
   1d720:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1d724:	mov	sl, r0
   1d728:	b	1d1e8 <_start@@Base+0xaacc>
   1d72c:	and	r2, r6, #-16777216	; 0xff000000
   1d730:	mov	r6, r2
   1d734:	add	r3, pc, #772	; 0x304
   1d738:	ldrd	r2, [r3]
   1d73c:	cmp	r7, r3
   1d740:	cmpeq	r6, r2
   1d744:	bne	1d310 <_start@@Base+0xabf4>
   1d748:	cmp	ip, #5
   1d74c:	ble	1d714 <_start@@Base+0xaff8>
   1d750:	ldr	r2, [fp, #12]
   1d754:	ldrb	r3, [r4, #5]
   1d758:	cmp	r2, #0
   1d75c:	beq	1db44 <_start@@Base+0xb428>
   1d760:	cmp	r3, #58	; 0x3a
   1d764:	cmpne	r3, #32
   1d768:	movhi	r3, #1
   1d76c:	movls	r3, #0
   1d770:	bhi	1d714 <_start@@Base+0xaff8>
   1d774:	add	r1, r4, #5
   1d778:	str	r3, [fp, #12]
   1d77c:	sub	r3, r9, r1
   1d780:	cmp	r3, #1
   1d784:	ble	1d798 <_start@@Base+0xb07c>
   1d788:	ldrb	r3, [r1]
   1d78c:	cmp	r3, #32
   1d790:	bhi	1d7a8 <_start@@Base+0xb08c>
   1d794:	beq	1ec0c <_start@@Base+0xc4f0>
   1d798:	mov	r2, r9
   1d79c:	mov	r0, fp
   1d7a0:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1d7a4:	mov	r1, r0
   1d7a8:	cmp	r9, r1
   1d7ac:	beq	1d7bc <_start@@Base+0xb0a0>
   1d7b0:	ldrb	r3, [r1]
   1d7b4:	cmp	r3, #58	; 0x3a
   1d7b8:	beq	1eeec <_start@@Base+0xc7d0>
   1d7bc:	mov	r3, #4
   1d7c0:	mov	r2, r9
   1d7c4:	mov	r0, fp
   1d7c8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1d7cc:	mov	r5, r0
   1d7d0:	cmp	r5, r4
   1d7d4:	beq	1d714 <_start@@Base+0xaff8>
   1d7d8:	mov	r3, #0
   1d7dc:	mov	r0, #0
   1d7e0:	mov	r1, #0
   1d7e4:	cmp	r9, r5
   1d7e8:	strb	r3, [sp, #332]	; 0x14c
   1d7ec:	str	r3, [sp, #340]	; 0x154
   1d7f0:	add	r3, sp, #344	; 0x158
   1d7f4:	strd	r0, [r3]
   1d7f8:	beq	1dee0 <_start@@Base+0xb7c4>
   1d7fc:	mov	r0, r3
   1d800:	mov	r2, r9
   1d804:	add	r3, sp, #340	; 0x154
   1d808:	mov	r1, r5
   1d80c:	str	r0, [sp]
   1d810:	mov	r0, fp
   1d814:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1d818:	cmp	r5, r0
   1d81c:	mov	sl, r0
   1d820:	bne	1e060 <_start@@Base+0xb944>
   1d824:	add	ip, sp, #332	; 0x14c
   1d828:	ldr	r3, [pc, #536]	; 1da48 <_start@@Base+0xb32c>
   1d82c:	mov	r2, r9
   1d830:	mov	r1, sl
   1d834:	mov	r0, fp
   1d838:	str	ip, [sp]
   1d83c:	bl	15974 <_start@@Base+0x3258>
   1d840:	cmp	r9, r0
   1d844:	cmpne	r0, sl
   1d848:	beq	1f6f8 <_start@@Base+0xcfdc>
   1d84c:	add	r3, sp, #332	; 0x14c
   1d850:	mov	sl, r0
   1d854:	ldrsb	r2, [r3]
   1d858:	strb	r2, [r8, #24]
   1d85c:	b	1d1e8 <_start@@Base+0xaacc>
   1d860:	mvn	r3, #-2030043136	; 0x87000000
   1d864:	mvn	r2, #0
   1d868:	cmp	r7, r3
   1d86c:	cmpeq	r6, r2
   1d870:	bhi	1d988 <_start@@Base+0xb26c>
   1d874:	cmp	ip, #1
   1d878:	ble	1d714 <_start@@Base+0xaff8>
   1d87c:	mov	r2, r9
   1d880:	mov	r1, r4
   1d884:	mov	r0, fp
   1d888:	bl	1392c <_start@@Base+0x1210>
   1d88c:	cmp	r0, r4
   1d890:	mov	r5, r0
   1d894:	beq	1d714 <_start@@Base+0xaff8>
   1d898:	mov	r1, r0
   1d89c:	mov	r2, r9
   1d8a0:	vstr	s18, [sp, #344]	; 0x158
   1d8a4:	add	r3, sp, #344	; 0x158
   1d8a8:	mov	r0, fp
   1d8ac:	bl	29830 <flatcc_json_parser_float@@Base>
   1d8b0:	cmp	r5, r0
   1d8b4:	mov	sl, r0
   1d8b8:	beq	1eafc <_start@@Base+0xc3e0>
   1d8bc:	ldr	r3, [sp, #344]	; 0x158
   1d8c0:	str	r3, [r8]
   1d8c4:	b	1d1e8 <_start@@Base+0xaacc>
   1d8c8:	add	r1, sl, #1
   1d8cc:	sub	r3, r9, r1
   1d8d0:	cmp	r3, #1
   1d8d4:	ble	1d8e8 <_start@@Base+0xb1cc>
   1d8d8:	ldrb	r3, [sl, #1]
   1d8dc:	cmp	r3, #32
   1d8e0:	bhi	1db54 <_start@@Base+0xb438>
   1d8e4:	beq	1decc <_start@@Base+0xb7b0>
   1d8e8:	mov	r2, r9
   1d8ec:	mov	r0, fp
   1d8f0:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1d8f4:	mov	r4, r0
   1d8f8:	ldr	r3, [sp, #336]	; 0x150
   1d8fc:	b	1d25c <_start@@Base+0xab40>
   1d900:	ldrb	r3, [sl, #1]
   1d904:	cmp	r3, #32
   1d908:	addhi	sl, sl, #1
   1d90c:	bls	1d204 <_start@@Base+0xaae8>
   1d910:	b	1d218 <_start@@Base+0xaafc>
   1d914:	add	r4, sl, #1
   1d918:	sub	r3, r9, r4
   1d91c:	cmp	r3, #1
   1d920:	ble	1d934 <_start@@Base+0xb218>
   1d924:	ldrb	r3, [sl, #1]
   1d928:	cmp	r3, #32
   1d92c:	bhi	1d948 <_start@@Base+0xb22c>
   1d930:	beq	1e0b0 <_start@@Base+0xb994>
   1d934:	mov	r1, r4
   1d938:	mov	r2, r9
   1d93c:	mov	r0, fp
   1d940:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   1d944:	mov	r4, r0
   1d948:	cmp	r9, r4
   1d94c:	beq	1e1a0 <_start@@Base+0xba84>
   1d950:	ldrb	r3, [r4]
   1d954:	cmp	r3, #125	; 0x7d
   1d958:	movne	r3, #1
   1d95c:	strne	r3, [sp, #336]	; 0x150
   1d960:	bne	1c564 <_start@@Base+0x9e48>
   1d964:	mov	r3, #0
   1d968:	add	r1, r4, #1
   1d96c:	mov	r2, r9
   1d970:	mov	r0, fp
   1d974:	str	r3, [sp, #336]	; 0x150
   1d978:	bl	13420 <_start@@Base+0xd04>
   1d97c:	mov	r4, r0
   1d980:	ldr	r3, [sp, #336]	; 0x150
   1d984:	b	1d25c <_start@@Base+0xab40>
   1d988:	mov	r3, #0
   1d98c:	str	r3, [sp, #56]	; 0x38
   1d990:	and	r3, r7, #-16777216	; 0xff000000
   1d994:	str	r3, [sp, #60]	; 0x3c
   1d998:	ldrd	r2, [sp, #56]	; 0x38
   1d99c:	cmp	r3, #2046820352	; 0x7a000000
   1d9a0:	cmpeq	r2, #0
   1d9a4:	beq	1db6c <_start@@Base+0xb450>
   1d9a8:	cmp	r3, #2030043136	; 0x79000000
   1d9ac:	cmpeq	r2, #0
   1d9b0:	bne	1d714 <_start@@Base+0xaff8>
   1d9b4:	cmp	ip, #1
   1d9b8:	ble	1d714 <_start@@Base+0xaff8>
   1d9bc:	mov	r2, r9
   1d9c0:	mov	r1, r4
   1d9c4:	mov	r0, fp
   1d9c8:	bl	1392c <_start@@Base+0x1210>
   1d9cc:	cmp	r0, r4
   1d9d0:	mov	r5, r0
   1d9d4:	beq	1d714 <_start@@Base+0xaff8>
   1d9d8:	mov	r1, r0
   1d9dc:	mov	r2, r9
   1d9e0:	vstr	s18, [sp, #344]	; 0x158
   1d9e4:	add	r3, sp, #344	; 0x158
   1d9e8:	mov	r0, fp
   1d9ec:	bl	29830 <flatcc_json_parser_float@@Base>
   1d9f0:	cmp	r5, r0
   1d9f4:	mov	sl, r0
   1d9f8:	beq	1f010 <_start@@Base+0xc8f4>
   1d9fc:	ldr	r3, [sp, #344]	; 0x158
   1da00:	str	r3, [r8, #4]
   1da04:	b	1d1e8 <_start@@Base+0xaacc>
   1da08:	mov	r1, r4
   1da0c:	mov	r3, #5
   1da10:	mov	r2, r9
   1da14:	mov	r0, fp
   1da18:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1da1c:	mov	r4, r0
   1da20:	b	1c594 <_start@@Base+0x9e78>
   1da24:	mov	r1, sl
   1da28:	mov	r2, r9
   1da2c:	mov	r0, fp
   1da30:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1da34:	mov	sl, r0
   1da38:	b	1bf4c <_start@@Base+0x9830>
   1da3c:	nop	{0}
   1da40:	andcc	r0, r0, #0
   1da44:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1da48:	andeq	r0, r4, ip, asr #3
   1da4c:	add	r3, pc, #564	; 0x234
   1da50:	ldrd	r2, [r3]
   1da54:	ldrd	r0, [sp, #48]	; 0x30
   1da58:	cmp	r1, r3
   1da5c:	cmpeq	r0, r2
   1da60:	bne	1dee8 <_start@@Base+0xb7cc>
   1da64:	cmp	r8, #5
   1da68:	ble	1d448 <_start@@Base+0xad2c>
   1da6c:	mov	r2, r9
   1da70:	mov	r1, sl
   1da74:	mov	r0, fp
   1da78:	bl	13be4 <_start@@Base+0x14c8>
   1da7c:	cmp	r0, sl
   1da80:	mov	r4, r0
   1da84:	beq	1d448 <_start@@Base+0xad2c>
   1da88:	mvn	r3, #-1073741824	; 0xc0000000
   1da8c:	mov	r2, #2
   1da90:	ldr	r0, [fp]
   1da94:	mov	r1, #4
   1da98:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1da9c:	cmp	r0, #0
   1daa0:	bne	1f984 <_start@@Base+0xd268>
   1daa4:	add	r3, sp, #320	; 0x140
   1daa8:	mov	r1, r4
   1daac:	mov	r2, r9
   1dab0:	mov	r0, fp
   1dab4:	bl	13ea0 <_start@@Base+0x1784>
   1dab8:	ldr	r3, [sp, #320]	; 0x140
   1dabc:	mov	sl, r0
   1dac0:	cmp	r3, #0
   1dac4:	beq	1db10 <_start@@Base+0xb3f4>
   1dac8:	mov	r1, #1
   1dacc:	ldr	r0, [fp]
   1dad0:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1dad4:	subs	r3, r0, #0
   1dad8:	mov	r1, sl
   1dadc:	mov	r2, r9
   1dae0:	mov	r0, fp
   1dae4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1dae8:	bl	1984c <_start@@Base+0x7130>
   1daec:	mov	r1, r0
   1daf0:	add	r3, sp, #320	; 0x140
   1daf4:	mov	r2, r9
   1daf8:	mov	r0, fp
   1dafc:	bl	196bc <_start@@Base+0x6fa0>
   1db00:	ldr	r3, [sp, #320]	; 0x140
   1db04:	mov	sl, r0
   1db08:	cmp	r3, #0
   1db0c:	bne	1dac8 <_start@@Base+0xb3ac>
   1db10:	ldr	r0, [fp]
   1db14:	bl	24304 <flatcc_builder_end_vector@@Base>
   1db18:	cmp	r0, #0
   1db1c:	str	r0, [sp, #324]	; 0x144
   1db20:	beq	1b6d4 <_start@@Base+0x8fb8>
   1db24:	mov	r1, #31
   1db28:	ldr	r0, [fp]
   1db2c:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1db30:	cmp	r0, #0
   1db34:	beq	1b6d4 <_start@@Base+0x8fb8>
   1db38:	ldr	r3, [sp, #324]	; 0x144
   1db3c:	str	r3, [r0]
   1db40:	b	1bf4c <_start@@Base+0x9830>
   1db44:	cmp	r3, #34	; 0x22
   1db48:	bne	1d714 <_start@@Base+0xaff8>
   1db4c:	add	r1, r4, #6
   1db50:	b	1d77c <_start@@Base+0xb060>
   1db54:	mov	sl, r1
   1db58:	b	1bf4c <_start@@Base+0x9830>
   1db5c:	cmp	r3, #34	; 0x22
   1db60:	bne	1d714 <_start@@Base+0xaff8>
   1db64:	add	r1, r4, #6
   1db68:	b	1d358 <_start@@Base+0xac3c>
   1db6c:	cmp	ip, #1
   1db70:	ble	1d714 <_start@@Base+0xaff8>
   1db74:	mov	r2, r9
   1db78:	mov	r1, r4
   1db7c:	mov	r0, fp
   1db80:	bl	1392c <_start@@Base+0x1210>
   1db84:	cmp	r0, r4
   1db88:	mov	r5, r0
   1db8c:	beq	1d714 <_start@@Base+0xaff8>
   1db90:	mov	r1, r0
   1db94:	mov	r2, r9
   1db98:	vstr	s18, [sp, #344]	; 0x158
   1db9c:	add	r3, sp, #344	; 0x158
   1dba0:	mov	r0, fp
   1dba4:	bl	29830 <flatcc_json_parser_float@@Base>
   1dba8:	cmp	r5, r0
   1dbac:	mov	sl, r0
   1dbb0:	beq	1ef80 <_start@@Base+0xc864>
   1dbb4:	ldr	r3, [sp, #344]	; 0x158
   1dbb8:	str	r3, [r8, #8]
   1dbbc:	b	1d1e8 <_start@@Base+0xaacc>
   1dbc0:	add	r5, sl, #8
   1dbc4:	mov	r1, r9
   1dbc8:	mov	r0, r5
   1dbcc:	mov	r4, #0
   1dbd0:	bl	12810 <_start@@Base+0xf4>
   1dbd4:	lsr	r1, r1, #16
   1dbd8:	str	r4, [sp, #128]	; 0x80
   1dbdc:	mov	r3, #0
   1dbe0:	movt	r3, #13876	; 0x3634
   1dbe4:	mov	r2, #0
   1dbe8:	lsl	r1, r1, #16
   1dbec:	str	r1, [sp, #132]	; 0x84
   1dbf0:	ldrd	r0, [sp, #128]	; 0x80
   1dbf4:	cmp	r1, r3
   1dbf8:	cmpeq	r0, r2
   1dbfc:	bne	1e140 <_start@@Base+0xba24>
   1dc00:	sub	r3, r9, r5
   1dc04:	cmp	r3, #2
   1dc08:	ble	1e640 <_start@@Base+0xbf24>
   1dc0c:	mov	r2, r9
   1dc10:	mov	r1, r5
   1dc14:	mov	r0, fp
   1dc18:	bl	13a14 <_start@@Base+0x12f8>
   1dc1c:	cmp	r5, r0
   1dc20:	mov	sl, r0
   1dc24:	beq	1e63c <_start@@Base+0xbf20>
   1dc28:	mov	r1, #3
   1dc2c:	ldr	r0, [fp]
   1dc30:	str	r4, [sp, #324]	; 0x144
   1dc34:	bl	23668 <flatcc_builder_start_table@@Base>
   1dc38:	cmp	r0, r4
   1dc3c:	bne	1de78 <_start@@Base+0xb75c>
   1dc40:	add	r5, sp, #340	; 0x154
   1dc44:	mov	r1, sl
   1dc48:	mov	r3, r5
   1dc4c:	mov	r2, r9
   1dc50:	mov	r0, fp
   1dc54:	bl	13dcc <_start@@Base+0x16b0>
   1dc58:	ldr	r3, [sp, #340]	; 0x154
   1dc5c:	mov	sl, r0
   1dc60:	cmp	r3, r4
   1dc64:	beq	1f13c <_start@@Base+0xca20>
   1dc68:	mov	r3, r4
   1dc6c:	add	r2, sp, #272	; 0x110
   1dc70:	movt	r3, #65535	; 0xffff
   1dc74:	mov	r8, #1
   1dc78:	strd	r6, [r2]
   1dc7c:	str	r3, [sp, #16]
   1dc80:	b	1dd70 <_start@@Base+0xb654>
   1dc84:	nop	{0}
   1dc88:	strcc	r0, [r0, #-0]
   1dc8c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dc90:	andeq	r0, r0, r0
   1dc94:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1dc98:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1dc9c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1dca0:	cmnvs	r4, r0, lsl #2
   1dca4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1dca8:	strbvs	r0, [r4, #-0]!
   1dcac:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1dcb0:	svcpl	0x00747970
   1dcb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dcb8:	andeq	r0, r4, ip, lsl #4
   1dcbc:	mov	r4, #0
   1dcc0:	str	r4, [sp, #80]	; 0x50
   1dcc4:	str	r1, [sp, #84]	; 0x54
   1dcc8:	sub	r1, pc, #64	; 0x40
   1dccc:	ldrd	r0, [r1]
   1dcd0:	ldrd	r2, [sp, #80]	; 0x50
   1dcd4:	cmp	r3, r1
   1dcd8:	cmpeq	r2, r0
   1dcdc:	bne	1e888 <_start@@Base+0xc16c>
   1dce0:	sub	r3, r9, sl
   1dce4:	cmp	r3, #4
   1dce8:	ble	1e888 <_start@@Base+0xc16c>
   1dcec:	mov	r1, sl
   1dcf0:	mov	r3, #4
   1dcf4:	mov	r2, r9
   1dcf8:	mov	r0, fp
   1dcfc:	bl	13ccc <_start@@Base+0x15b0>
   1dd00:	cmp	r0, sl
   1dd04:	mov	r1, r0
   1dd08:	beq	1e888 <_start@@Base+0xc16c>
   1dd0c:	add	r3, sp, #344	; 0x158
   1dd10:	mov	r2, r9
   1dd14:	str	r4, [sp]
   1dd18:	mov	r0, fp
   1dd1c:	bl	2b7a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1dd20:	ldr	r3, [sp, #344]	; 0x158
   1dd24:	mov	sl, r0
   1dd28:	cmp	r3, r4
   1dd2c:	beq	1de70 <_start@@Base+0xb754>
   1dd30:	mov	r1, r4
   1dd34:	ldr	r0, [fp]
   1dd38:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1dd3c:	cmp	r0, #0
   1dd40:	beq	1de70 <_start@@Base+0xb754>
   1dd44:	ldr	r3, [sp, #344]	; 0x158
   1dd48:	str	r3, [r0]
   1dd4c:	mov	r1, sl
   1dd50:	mov	r3, r5
   1dd54:	mov	r2, r9
   1dd58:	mov	r0, fp
   1dd5c:	bl	16560 <_start@@Base+0x3e44>
   1dd60:	ldr	r3, [sp, #340]	; 0x154
   1dd64:	mov	sl, r0
   1dd68:	cmp	r3, #0
   1dd6c:	beq	1f134 <_start@@Base+0xca18>
   1dd70:	cmp	r9, sl
   1dd74:	beq	1dd9c <_start@@Base+0xb680>
   1dd78:	ldrb	r3, [sl]
   1dd7c:	cmp	r3, #34	; 0x22
   1dd80:	moveq	r3, #0
   1dd84:	addeq	sl, sl, #1
   1dd88:	streq	r3, [fp, #12]
   1dd8c:	beq	1dd9c <_start@@Base+0xb680>
   1dd90:	cmp	r3, #46	; 0x2e
   1dd94:	strne	r8, [fp, #12]
   1dd98:	beq	1eb7c <_start@@Base+0xc460>
   1dd9c:	mov	r1, r9
   1dda0:	mov	r0, sl
   1dda4:	bl	12810 <_start@@Base+0xf4>
   1dda8:	sub	r3, pc, #280	; 0x118
   1ddac:	ldrd	r2, [r3]
   1ddb0:	cmp	r1, r3
   1ddb4:	cmpeq	r0, r2
   1ddb8:	bls	1dcbc <_start@@Base+0xb5a0>
   1ddbc:	bic	r3, r0, #255	; 0xff
   1ddc0:	sub	r7, pc, #296	; 0x128
   1ddc4:	ldrd	r6, [r7]
   1ddc8:	str	r3, [sp, #88]	; 0x58
   1ddcc:	str	r1, [sp, #92]	; 0x5c
   1ddd0:	ldrd	r2, [sp, #88]	; 0x58
   1ddd4:	cmp	r3, r7
   1ddd8:	cmpeq	r2, r6
   1dddc:	beq	1e9b8 <_start@@Base+0xc29c>
   1dde0:	ldr	r3, [sp, #16]
   1dde4:	str	r1, [sp, #140]	; 0x8c
   1dde8:	and	r3, r0, r3
   1ddec:	sub	r1, pc, #332	; 0x14c
   1ddf0:	ldrd	r0, [r1]
   1ddf4:	str	r3, [sp, #136]	; 0x88
   1ddf8:	ldrd	r2, [sp, #136]	; 0x88
   1ddfc:	cmp	r3, r1
   1de00:	cmpeq	r2, r0
   1de04:	bne	1e888 <_start@@Base+0xc16c>
   1de08:	sub	r3, r9, sl
   1de0c:	cmp	r3, #6
   1de10:	ble	1e888 <_start@@Base+0xc16c>
   1de14:	mov	r1, sl
   1de18:	mov	r3, #6
   1de1c:	mov	r2, r9
   1de20:	mov	r0, fp
   1de24:	bl	13ccc <_start@@Base+0x15b0>
   1de28:	cmp	r0, sl
   1de2c:	mov	r1, r0
   1de30:	beq	1e888 <_start@@Base+0xc16c>
   1de34:	mov	r0, #0
   1de38:	add	r3, sp, #344	; 0x158
   1de3c:	mov	r2, r9
   1de40:	str	r0, [sp]
   1de44:	mov	r0, fp
   1de48:	bl	2b7a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1de4c:	ldr	r3, [sp, #344]	; 0x158
   1de50:	mov	sl, r0
   1de54:	cmp	r3, #0
   1de58:	beq	1de70 <_start@@Base+0xb754>
   1de5c:	mov	r1, #2
   1de60:	ldr	r0, [fp]
   1de64:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1de68:	cmp	r0, #0
   1de6c:	bne	1dd44 <_start@@Base+0xb628>
   1de70:	add	r3, sp, #272	; 0x110
   1de74:	ldrd	r6, [r3]
   1de78:	mov	r1, sl
   1de7c:	mov	r3, #33	; 0x21
   1de80:	mov	r2, r9
   1de84:	mov	r0, fp
   1de88:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1de8c:	ldr	r3, [sp, #324]	; 0x144
   1de90:	mov	sl, r0
   1de94:	cmp	r3, #0
   1de98:	beq	1b6d4 <_start@@Base+0x8fb8>
   1de9c:	mov	r1, #35	; 0x23
   1dea0:	ldr	r0, [fp]
   1dea4:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1dea8:	cmp	r0, #0
   1deac:	beq	1b6d4 <_start@@Base+0x8fb8>
   1deb0:	ldr	r3, [sp, #324]	; 0x144
   1deb4:	str	r3, [r0]
   1deb8:	b	1bf4c <_start@@Base+0x9830>
   1debc:	cmp	r3, #34	; 0x22
   1dec0:	bne	1d714 <_start@@Base+0xaff8>
   1dec4:	add	r1, r4, #6
   1dec8:	b	1d178 <_start@@Base+0xaa5c>
   1decc:	ldrb	r3, [sl, #2]
   1ded0:	cmp	r3, #32
   1ded4:	bls	1d8e8 <_start@@Base+0xb1cc>
   1ded8:	add	sl, sl, #2
   1dedc:	b	1bf4c <_start@@Base+0x9830>
   1dee0:	mov	sl, r9
   1dee4:	b	1d824 <_start@@Base+0xb108>
   1dee8:	sub	r3, pc, #576	; 0x240
   1deec:	ldrd	r2, [r3]
   1def0:	ldrd	r0, [sp, #16]
   1def4:	cmp	r1, r3
   1def8:	cmpeq	r0, r2
   1defc:	bne	1d448 <_start@@Base+0xad2c>
   1df00:	add	sl, sl, #8
   1df04:	mov	r1, r9
   1df08:	mov	r0, sl
   1df0c:	mov	r4, #0
   1df10:	bl	12810 <_start@@Base+0xf4>
   1df14:	and	r3, r1, #-16777216	; 0xff000000
   1df18:	str	r4, [sp, #168]	; 0xa8
   1df1c:	str	r3, [sp, #172]	; 0xac
   1df20:	ldrd	r2, [sp, #168]	; 0xa8
   1df24:	cmp	r3, #1694498816	; 0x65000000
   1df28:	cmpeq	r2, #0
   1df2c:	bne	1e170 <_start@@Base+0xba54>
   1df30:	sub	r3, r9, sl
   1df34:	cmp	r3, #1
   1df38:	ble	1e670 <_start@@Base+0xbf54>
   1df3c:	mov	r1, sl
   1df40:	mov	r2, r9
   1df44:	mov	r0, fp
   1df48:	bl	1392c <_start@@Base+0x1210>
   1df4c:	cmp	sl, r0
   1df50:	mov	r1, r0
   1df54:	beq	1e670 <_start@@Base+0xbf54>
   1df58:	ldr	lr, [pc, #-680]	; 1dcb8 <_start@@Base+0xb59c>
   1df5c:	movw	r2, #64180	; 0xfab4
   1df60:	movt	r2, #1
   1df64:	mov	r5, #8
   1df68:	mov	r3, r4
   1df6c:	ldr	ip, [sp, #328]	; 0x148
   1df70:	mov	r0, fp
   1df74:	stm	sp, {r5, ip, lr}
   1df78:	str	r2, [sp, #12]
   1df7c:	mov	r2, r9
   1df80:	bl	2c2b8 <flatcc_json_parser_union_type@@Base>
   1df84:	mov	sl, r0
   1df88:	b	1bf4c <_start@@Base+0x9830>
   1df8c:	mov	r1, sl
   1df90:	mov	r2, r9
   1df94:	mov	r0, fp
   1df98:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1df9c:	mov	sl, r0
   1dfa0:	b	1bf4c <_start@@Base+0x9830>
   1dfa4:	add	r4, sl, #8
   1dfa8:	mov	r1, r9
   1dfac:	mov	r0, r4
   1dfb0:	bl	12810 <_start@@Base+0xf4>
   1dfb4:	add	r3, pc, #836	; 0x344
   1dfb8:	ldrd	r2, [r3]
   1dfbc:	cmp	r1, r3
   1dfc0:	cmpeq	r0, r2
   1dfc4:	bne	1e3dc <_start@@Base+0xbcc0>
   1dfc8:	add	sl, sl, #16
   1dfcc:	mov	r1, r9
   1dfd0:	mov	r0, sl
   1dfd4:	bl	12810 <_start@@Base+0xf4>
   1dfd8:	and	r0, r0, #-16777216	; 0xff000000
   1dfdc:	add	r3, pc, #804	; 0x324
   1dfe0:	ldrd	r2, [r3]
   1dfe4:	strd	r0, [sp, #232]	; 0xe8
   1dfe8:	ldrd	r0, [sp, #232]	; 0xe8
   1dfec:	cmp	r1, r3
   1dff0:	cmpeq	r0, r2
   1dff4:	bne	1e4fc <_start@@Base+0xbde0>
   1dff8:	sub	r3, r9, sl
   1dffc:	cmp	r3, #5
   1e000:	ble	1f59c <_start@@Base+0xce80>
   1e004:	mov	r1, sl
   1e008:	mov	r2, r9
   1e00c:	mov	r0, fp
   1e010:	bl	13be4 <_start@@Base+0x14c8>
   1e014:	cmp	sl, r0
   1e018:	mov	r1, r0
   1e01c:	beq	1f59c <_start@@Base+0xce80>
   1e020:	add	r3, sp, #324	; 0x144
   1e024:	mov	r2, r9
   1e028:	mov	r0, fp
   1e02c:	bl	15df8 <_start@@Base+0x36dc>
   1e030:	ldr	r3, [sp, #324]	; 0x144
   1e034:	mov	sl, r0
   1e038:	cmp	r3, #0
   1e03c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e040:	mov	r1, #34	; 0x22
   1e044:	ldr	r0, [fp]
   1e048:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1e04c:	cmp	r0, #0
   1e050:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e054:	ldr	r3, [sp, #324]	; 0x144
   1e058:	str	r3, [r0]
   1e05c:	b	1bf4c <_start@@Base+0x9830>
   1e060:	ldr	r1, [sp, #340]	; 0x154
   1e064:	add	r3, sp, #344	; 0x158
   1e068:	ldrd	r2, [r3]
   1e06c:	cmp	r1, #0
   1e070:	bne	1e43c <_start@@Base+0xbd20>
   1e074:	cmp	r3, #0
   1e078:	cmpeq	r2, #127	; 0x7f
   1e07c:	sxtbls	r2, r2
   1e080:	bls	1d858 <_start@@Base+0xb13c>
   1e084:	mov	r1, r0
   1e088:	mov	r3, #7
   1e08c:	mov	r2, r9
   1e090:	mov	r0, fp
   1e094:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1e098:	mov	sl, r0
   1e09c:	cmp	r5, sl
   1e0a0:	beq	1d824 <_start@@Base+0xb108>
   1e0a4:	add	r3, sp, #332	; 0x14c
   1e0a8:	ldrsb	r2, [r3]
   1e0ac:	b	1d858 <_start@@Base+0xb13c>
   1e0b0:	ldrb	r3, [sl, #2]
   1e0b4:	cmp	r3, #32
   1e0b8:	addhi	r4, sl, #2
   1e0bc:	bls	1d934 <_start@@Base+0xb218>
   1e0c0:	b	1d948 <_start@@Base+0xb22c>
   1e0c4:	mov	r1, sl
   1e0c8:	mov	r2, r9
   1e0cc:	mov	r0, fp
   1e0d0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e0d4:	mov	sl, r0
   1e0d8:	b	1bf4c <_start@@Base+0x9830>
   1e0dc:	mov	r4, r0
   1e0e0:	mov	r1, r4
   1e0e4:	mov	r2, r9
   1e0e8:	mov	r0, fp
   1e0ec:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e0f0:	mov	sl, r0
   1e0f4:	b	1bf4c <_start@@Base+0x9830>
   1e0f8:	mov	r1, sl
   1e0fc:	mov	r2, r9
   1e100:	mov	r0, fp
   1e104:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e108:	mov	sl, r0
   1e10c:	b	1bf4c <_start@@Base+0x9830>
   1e110:	mov	r1, r0
   1e114:	add	r0, sp, #344	; 0x158
   1e118:	ldr	r3, [pc, #496]	; 1e310 <_start@@Base+0xbbf4>
   1e11c:	mov	r2, r9
   1e120:	str	r0, [sp]
   1e124:	mov	r0, fp
   1e128:	bl	14338 <_start@@Base+0x1c1c>
   1e12c:	cmp	r9, r0
   1e130:	cmpne	sl, r0
   1e134:	beq	1f6f8 <_start@@Base+0xcfdc>
   1e138:	mov	sl, r0
   1e13c:	b	1d3d8 <_start@@Base+0xacbc>
   1e140:	mov	r1, r5
   1e144:	mov	r2, r9
   1e148:	mov	r0, fp
   1e14c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e150:	mov	sl, r0
   1e154:	b	1bf4c <_start@@Base+0x9830>
   1e158:	mov	r1, r4
   1e15c:	mov	r2, r9
   1e160:	mov	r0, fp
   1e164:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e168:	mov	sl, r0
   1e16c:	b	1bf4c <_start@@Base+0x9830>
   1e170:	mov	r1, sl
   1e174:	mov	r2, r9
   1e178:	mov	r0, fp
   1e17c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e180:	mov	sl, r0
   1e184:	b	1bf4c <_start@@Base+0x9830>
   1e188:	mov	r1, sl
   1e18c:	mov	r2, r9
   1e190:	mov	r0, fp
   1e194:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e198:	mov	sl, r0
   1e19c:	b	1bf4c <_start@@Base+0x9830>
   1e1a0:	mov	ip, #0
   1e1a4:	mov	r3, #10
   1e1a8:	mov	r2, r9
   1e1ac:	mov	r1, r9
   1e1b0:	mov	r0, fp
   1e1b4:	str	ip, [sp, #336]	; 0x150
   1e1b8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1e1bc:	mov	r4, r0
   1e1c0:	ldr	r3, [sp, #336]	; 0x150
   1e1c4:	b	1d25c <_start@@Base+0xab40>
   1e1c8:	mov	r3, #0
   1e1cc:	add	r4, sl, #8
   1e1d0:	mov	r1, r9
   1e1d4:	mov	r0, r4
   1e1d8:	str	r3, [sp, #224]	; 0xe0
   1e1dc:	bl	12810 <_start@@Base+0xf4>
   1e1e0:	and	r3, r1, #-16777216	; 0xff000000
   1e1e4:	str	r3, [sp, #228]	; 0xe4
   1e1e8:	ldrd	r2, [sp, #224]	; 0xe0
   1e1ec:	cmp	r3, #2030043136	; 0x79000000
   1e1f0:	cmpeq	r2, #0
   1e1f4:	bne	1e52c <_start@@Base+0xbe10>
   1e1f8:	sub	r3, r9, r4
   1e1fc:	cmp	r3, #1
   1e200:	ble	1f11c <_start@@Base+0xca00>
   1e204:	mov	r2, r9
   1e208:	mov	r1, r4
   1e20c:	mov	r0, fp
   1e210:	bl	1392c <_start@@Base+0x1210>
   1e214:	cmp	r4, r0
   1e218:	mov	sl, r0
   1e21c:	beq	1f118 <_start@@Base+0xc9fc>
   1e220:	mov	r2, #1
   1e224:	mvn	r3, #0
   1e228:	ldr	r0, [fp]
   1e22c:	mov	r1, r2
   1e230:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1e234:	cmp	r0, #0
   1e238:	bne	1b6d4 <_start@@Base+0x8fb8>
   1e23c:	mov	r1, sl
   1e240:	add	r3, sp, #320	; 0x140
   1e244:	mov	r2, r9
   1e248:	mov	r0, fp
   1e24c:	bl	13ea0 <_start@@Base+0x1784>
   1e250:	ldr	r3, [sp, #320]	; 0x140
   1e254:	mov	sl, r0
   1e258:	cmp	r3, #0
   1e25c:	beq	1f668 <_start@@Base+0xcf4c>
   1e260:	mov	r8, #0
   1e264:	b	1e294 <_start@@Base+0xbb78>
   1e268:	ldrb	ip, [sp, #344]	; 0x158
   1e26c:	add	r3, sp, #320	; 0x140
   1e270:	mov	r1, r4
   1e274:	mov	r2, r9
   1e278:	mov	r0, fp
   1e27c:	strb	ip, [r5]
   1e280:	bl	196bc <_start@@Base+0x6fa0>
   1e284:	ldr	r3, [sp, #320]	; 0x140
   1e288:	mov	sl, r0
   1e28c:	cmp	r3, #0
   1e290:	beq	1f668 <_start@@Base+0xcf4c>
   1e294:	mov	r1, #1
   1e298:	ldr	r0, [fp]
   1e29c:	strb	r8, [sp, #344]	; 0x158
   1e2a0:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1e2a4:	subs	r5, r0, #0
   1e2a8:	mov	r1, sl
   1e2ac:	add	r3, sp, #344	; 0x158
   1e2b0:	mov	r2, r9
   1e2b4:	mov	r0, fp
   1e2b8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e2bc:	bl	135d4 <_start@@Base+0xeb8>
   1e2c0:	cmp	sl, r0
   1e2c4:	mov	r4, r0
   1e2c8:	bne	1e268 <_start@@Base+0xbb4c>
   1e2cc:	add	r1, sp, #344	; 0x158
   1e2d0:	ldr	r3, [pc, #60]	; 1e314 <_start@@Base+0xbbf8>
   1e2d4:	mov	r2, r9
   1e2d8:	mov	r0, fp
   1e2dc:	str	r1, [sp]
   1e2e0:	mov	r1, r4
   1e2e4:	bl	15bc8 <_start@@Base+0x34ac>
   1e2e8:	cmp	r9, r0
   1e2ec:	cmpne	r4, r0
   1e2f0:	mov	sl, r0
   1e2f4:	mov	r4, r0
   1e2f8:	bne	1e268 <_start@@Base+0xbb4c>
   1e2fc:	b	1b6d4 <_start@@Base+0x8fb8>
   1e300:	rsbvc	r6, r1, r5, ror #6
   1e304:	smcvs	54867	; 0xd653
   1e308:	strvc	r0, [r0], #-0
   1e30c:	svcpl	0x00746573
   1e310:	ldrdeq	r0, [r4], -ip
   1e314:			; <UNDEFINED> instruction: 0x000401b4
   1e318:	add	r3, pc, #872	; 0x368
   1e31c:	ldrd	r2, [r3]
   1e320:	cmp	r1, r3
   1e324:	cmpeq	r0, r2
   1e328:	beq	1e7a4 <_start@@Base+0xc088>
   1e32c:	add	r3, pc, #860	; 0x35c
   1e330:	ldrd	r2, [r3]
   1e334:	cmp	r1, r3
   1e338:	cmpeq	r0, r2
   1e33c:	bne	1efb0 <_start@@Base+0xc894>
   1e340:	sub	r3, r9, sl
   1e344:	cmp	r3, #8
   1e348:	ble	1f4cc <_start@@Base+0xcdb0>
   1e34c:	mov	r2, r9
   1e350:	mov	r1, sl
   1e354:	mov	r0, fp
   1e358:	bl	13afc <_start@@Base+0x13e0>
   1e35c:	cmp	sl, r0
   1e360:	mov	r8, r0
   1e364:	beq	1f4c8 <_start@@Base+0xcdac>
   1e368:	add	r3, sp, #344	; 0x158
   1e36c:	mov	r4, #0
   1e370:	mov	r5, #0
   1e374:	mov	r1, r0
   1e378:	mov	r2, r9
   1e37c:	mov	r0, fp
   1e380:	strd	r4, [r3]
   1e384:	bl	13538 <_start@@Base+0xe1c>
   1e388:	cmp	r0, r8
   1e38c:	mov	sl, r0
   1e390:	beq	1f994 <_start@@Base+0xd278>
   1e394:	add	r3, sp, #344	; 0x158
   1e398:	ldrd	r2, [r3]
   1e39c:	orrs	r3, r2, r3
   1e3a0:	bne	1e3b0 <_start@@Base+0xbc94>
   1e3a4:	ldr	r3, [fp, #8]
   1e3a8:	tst	r3, #2
   1e3ac:	beq	1bf4c <_start@@Base+0x9830>
   1e3b0:	mov	r3, #8
   1e3b4:	mov	r1, #19
   1e3b8:	ldr	r0, [fp]
   1e3bc:	mov	r2, r3
   1e3c0:	bl	259e0 <flatcc_builder_table_add@@Base>
   1e3c4:	cmp	r0, #0
   1e3c8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e3cc:	add	r3, sp, #344	; 0x158
   1e3d0:	ldrd	r2, [r3]
   1e3d4:	strd	r2, [r0]
   1e3d8:	b	1bf4c <_start@@Base+0x9830>
   1e3dc:	mov	r1, r4
   1e3e0:	mov	r2, r9
   1e3e4:	mov	r0, fp
   1e3e8:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e3ec:	mov	sl, r0
   1e3f0:	b	1bf4c <_start@@Base+0x9830>
   1e3f4:	mov	r1, sl
   1e3f8:	mov	r2, r9
   1e3fc:	mov	r0, fp
   1e400:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e404:	mov	sl, r0
   1e408:	b	1bf4c <_start@@Base+0x9830>
   1e40c:	mov	r1, r5
   1e410:	mov	r2, r9
   1e414:	mov	r0, fp
   1e418:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e41c:	mov	sl, r0
   1e420:	b	1bf4c <_start@@Base+0x9830>
   1e424:	mov	r1, r4
   1e428:	mov	r2, r9
   1e42c:	mov	r0, fp
   1e430:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e434:	mov	sl, r0
   1e438:	b	1bf4c <_start@@Base+0x9830>
   1e43c:	cmp	r3, #0
   1e440:	cmpeq	r2, #128	; 0x80
   1e444:	rsbls	r2, r2, #0
   1e448:	sxtbls	r2, r2
   1e44c:	bls	1d858 <_start@@Base+0xb13c>
   1e450:	mov	r1, r0
   1e454:	mov	r3, #8
   1e458:	mov	r2, r9
   1e45c:	mov	r0, fp
   1e460:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1e464:	mov	sl, r0
   1e468:	b	1e09c <_start@@Base+0xb980>
   1e46c:	mov	r1, r4
   1e470:	mov	r2, r9
   1e474:	mov	r0, fp
   1e478:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e47c:	mov	sl, r0
   1e480:	b	1bf4c <_start@@Base+0x9830>
   1e484:	mov	r1, r0
   1e488:	add	r0, sp, #344	; 0x158
   1e48c:	ldr	r3, [pc, #516]	; 1e698 <_start@@Base+0xbf7c>
   1e490:	mov	r2, r9
   1e494:	str	r0, [sp]
   1e498:	mov	r0, fp
   1e49c:	bl	14138 <_start@@Base+0x1a1c>
   1e4a0:	cmp	r9, r0
   1e4a4:	cmpne	sl, r0
   1e4a8:	mov	sl, r0
   1e4ac:	bne	1bbbc <_start@@Base+0x94a0>
   1e4b0:	b	1b6d4 <_start@@Base+0x8fb8>
   1e4b4:	mov	r1, r4
   1e4b8:	mov	r2, r9
   1e4bc:	mov	r0, fp
   1e4c0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e4c4:	mov	sl, r0
   1e4c8:	b	1bf4c <_start@@Base+0x9830>
   1e4cc:	mov	r1, r4
   1e4d0:	mov	r2, r9
   1e4d4:	mov	r0, fp
   1e4d8:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e4dc:	mov	sl, r0
   1e4e0:	b	1bf4c <_start@@Base+0x9830>
   1e4e4:	mov	r1, r4
   1e4e8:	mov	r2, r9
   1e4ec:	mov	r0, fp
   1e4f0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e4f4:	mov	sl, r0
   1e4f8:	b	1bf4c <_start@@Base+0x9830>
   1e4fc:	mov	r1, sl
   1e500:	mov	r2, r9
   1e504:	mov	r0, fp
   1e508:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e50c:	mov	sl, r0
   1e510:	b	1bf4c <_start@@Base+0x9830>
   1e514:	mov	r1, sl
   1e518:	mov	r2, r9
   1e51c:	mov	r0, fp
   1e520:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e524:	mov	sl, r0
   1e528:	b	1bf4c <_start@@Base+0x9830>
   1e52c:	mov	r1, r4
   1e530:	mov	r2, r9
   1e534:	mov	r0, fp
   1e538:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e53c:	mov	sl, r0
   1e540:	b	1bf4c <_start@@Base+0x9830>
   1e544:	sub	r3, r9, r8
   1e548:	cmp	r3, #2
   1e54c:	ble	1f180 <_start@@Base+0xca64>
   1e550:	mov	r2, r9
   1e554:	mov	r1, r8
   1e558:	mov	r0, fp
   1e55c:	bl	13a14 <_start@@Base+0x12f8>
   1e560:	cmp	r8, r0
   1e564:	mov	sl, r0
   1e568:	beq	1f17c <_start@@Base+0xca60>
   1e56c:	ldr	r0, [fp]
   1e570:	bl	23048 <flatcc_builder_start_offset_vector@@Base>
   1e574:	cmp	r0, #0
   1e578:	bne	1b6d4 <_start@@Base+0x8fb8>
   1e57c:	mov	r1, sl
   1e580:	add	r3, sp, #320	; 0x140
   1e584:	mov	r2, r9
   1e588:	mov	r0, fp
   1e58c:	bl	13ea0 <_start@@Base+0x1784>
   1e590:	ldr	r3, [sp, #320]	; 0x140
   1e594:	mov	sl, r0
   1e598:	cmp	r3, #0
   1e59c:	beq	1e608 <_start@@Base+0xbeec>
   1e5a0:	add	r4, sp, #324	; 0x144
   1e5a4:	mov	r1, sl
   1e5a8:	mov	r3, r4
   1e5ac:	mov	r2, r9
   1e5b0:	mov	r0, fp
   1e5b4:	bl	2bcc0 <flatcc_json_parser_build_string@@Base>
   1e5b8:	ldr	r3, [sp, #324]	; 0x144
   1e5bc:	mov	sl, r0
   1e5c0:	mov	r1, #1
   1e5c4:	cmp	r3, #0
   1e5c8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e5cc:	ldr	r0, [fp]
   1e5d0:	bl	2259c <flatcc_builder_extend_offset_vector@@Base>
   1e5d4:	subs	ip, r0, #0
   1e5d8:	add	r3, sp, #320	; 0x140
   1e5dc:	mov	r2, r9
   1e5e0:	mov	r1, sl
   1e5e4:	mov	r0, fp
   1e5e8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e5ec:	ldr	lr, [sp, #324]	; 0x144
   1e5f0:	str	lr, [ip]
   1e5f4:	bl	196bc <_start@@Base+0x6fa0>
   1e5f8:	ldr	r3, [sp, #320]	; 0x140
   1e5fc:	mov	sl, r0
   1e600:	cmp	r3, #0
   1e604:	bne	1e5a4 <_start@@Base+0xbe88>
   1e608:	ldr	r0, [fp]
   1e60c:	bl	246c8 <flatcc_builder_end_offset_vector@@Base>
   1e610:	cmp	r0, #0
   1e614:	str	r0, [sp, #324]	; 0x144
   1e618:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e61c:	mov	r1, #28
   1e620:	ldr	r0, [fp]
   1e624:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1e628:	cmp	r0, #0
   1e62c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e630:	ldr	r3, [sp, #324]	; 0x144
   1e634:	str	r3, [r0]
   1e638:	b	1bf4c <_start@@Base+0x9830>
   1e63c:	mov	r5, r0
   1e640:	mov	r1, r5
   1e644:	mov	r2, r9
   1e648:	mov	r0, fp
   1e64c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e650:	mov	sl, r0
   1e654:	b	1bf4c <_start@@Base+0x9830>
   1e658:	mov	r1, sl
   1e65c:	mov	r2, r9
   1e660:	mov	r0, fp
   1e664:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e668:	mov	sl, r0
   1e66c:	b	1bf4c <_start@@Base+0x9830>
   1e670:	mov	r1, sl
   1e674:	mov	r2, r9
   1e678:	mov	r0, fp
   1e67c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e680:	mov	sl, r0
   1e684:	b	1bf4c <_start@@Base+0x9830>
   1e688:			; <UNDEFINED> instruction: 0x666e7631
   1e68c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e690:			; <UNDEFINED> instruction: 0x666e7631
   1e694:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1e698:	andeq	r0, r4, ip, ror r2
   1e69c:	andeq	r0, r4, r8, lsr #3
   1e6a0:	andeq	r0, r4, r8, lsr #4
   1e6a4:	andeq	r0, r4, r4, lsr r2
   1e6a8:	andeq	r0, r4, r8, ror #3
   1e6ac:	add	sl, sl, #8
   1e6b0:	mov	r1, r9
   1e6b4:	mov	r0, sl
   1e6b8:	mov	r5, #0
   1e6bc:	bl	12810 <_start@@Base+0xf4>
   1e6c0:	and	r3, r1, #-16777216	; 0xff000000
   1e6c4:	str	r5, [sp, #264]	; 0x108
   1e6c8:	str	r3, [sp, #268]	; 0x10c
   1e6cc:	add	r3, sp, #264	; 0x108
   1e6d0:	ldrd	r2, [r3]
   1e6d4:	cmp	r3, #1627389952	; 0x61000000
   1e6d8:	cmpeq	r2, #0
   1e6dc:	bne	1f2d0 <_start@@Base+0xcbb4>
   1e6e0:	sub	r3, r9, sl
   1e6e4:	cmp	r3, #1
   1e6e8:	ble	1f760 <_start@@Base+0xd044>
   1e6ec:	mov	r2, r9
   1e6f0:	mov	r1, sl
   1e6f4:	mov	r0, fp
   1e6f8:	bl	1392c <_start@@Base+0x1210>
   1e6fc:	cmp	sl, r0
   1e700:	mov	r4, r0
   1e704:	beq	1f760 <_start@@Base+0xd044>
   1e708:	add	r8, sp, #344	; 0x158
   1e70c:	mov	r1, r0
   1e710:	str	r5, [sp, #344]	; 0x158
   1e714:	mov	r2, r9
   1e718:	mov	r3, r8
   1e71c:	mov	r0, fp
   1e720:	bl	13764 <_start@@Base+0x1048>
   1e724:	cmp	r0, r4
   1e728:	mov	sl, r0
   1e72c:	beq	1f924 <_start@@Base+0xd208>
   1e730:	ldr	r3, [sp, #344]	; 0x158
   1e734:	cmp	r3, #0
   1e738:	bne	1e748 <_start@@Base+0xc02c>
   1e73c:	ldr	r3, [fp, #8]
   1e740:	tst	r3, #2
   1e744:	beq	1bf4c <_start@@Base+0x9830>
   1e748:	mov	r3, #4
   1e74c:	mov	r1, #20
   1e750:	ldr	r0, [fp]
   1e754:	mov	r2, r3
   1e758:	bl	259e0 <flatcc_builder_table_add@@Base>
   1e75c:	cmp	r0, #0
   1e760:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e764:	ldr	r3, [sp, #344]	; 0x158
   1e768:	str	r3, [r0]
   1e76c:	b	1bf4c <_start@@Base+0x9830>
   1e770:	mov	r5, r0
   1e774:	mov	r1, r5
   1e778:	mov	r2, r9
   1e77c:	mov	r0, fp
   1e780:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e784:	mov	sl, r0
   1e788:	b	1bf4c <_start@@Base+0x9830>
   1e78c:	mov	r1, sl
   1e790:	mov	r2, r9
   1e794:	mov	r0, fp
   1e798:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e79c:	mov	sl, r0
   1e7a0:	b	1bf4c <_start@@Base+0x9830>
   1e7a4:	sub	r3, r9, sl
   1e7a8:	cmp	r3, #8
   1e7ac:	ble	1f404 <_start@@Base+0xcce8>
   1e7b0:	mov	r2, r9
   1e7b4:	mov	r1, sl
   1e7b8:	mov	r0, fp
   1e7bc:	bl	13afc <_start@@Base+0x13e0>
   1e7c0:	cmp	sl, r0
   1e7c4:	mov	r4, r0
   1e7c8:	beq	1f404 <_start@@Base+0xcce8>
   1e7cc:	mov	ip, #0
   1e7d0:	add	r8, sp, #344	; 0x158
   1e7d4:	mov	r1, r0
   1e7d8:	mov	r3, r8
   1e7dc:	mov	r2, r9
   1e7e0:	mov	r0, fp
   1e7e4:	str	ip, [sp, #344]	; 0x158
   1e7e8:	bl	13694 <_start@@Base+0xf78>
   1e7ec:	cmp	r0, r4
   1e7f0:	mov	sl, r0
   1e7f4:	beq	1f958 <_start@@Base+0xd23c>
   1e7f8:	ldr	r3, [sp, #344]	; 0x158
   1e7fc:	cmp	r3, #0
   1e800:	bne	1e810 <_start@@Base+0xc0f4>
   1e804:	ldr	r3, [fp, #8]
   1e808:	tst	r3, #2
   1e80c:	beq	1bf4c <_start@@Base+0x9830>
   1e810:	mov	r3, #4
   1e814:	mov	r1, #17
   1e818:	ldr	r0, [fp]
   1e81c:	mov	r2, r3
   1e820:	bl	259e0 <flatcc_builder_table_add@@Base>
   1e824:	cmp	r0, #0
   1e828:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e82c:	ldr	r3, [sp, #344]	; 0x158
   1e830:	str	r3, [r0]
   1e834:	b	1bf4c <_start@@Base+0x9830>
   1e838:	mov	r1, r0
   1e83c:	add	r0, sp, #344	; 0x158
   1e840:	ldr	r3, [pc, #-428]	; 1e69c <_start@@Base+0xbf80>
   1e844:	mov	r2, r9
   1e848:	str	r0, [sp]
   1e84c:	mov	r0, fp
   1e850:	bl	14bc0 <_start@@Base+0x24a4>
   1e854:	cmp	r9, r0
   1e858:	cmpne	r0, r4
   1e85c:	mov	sl, r0
   1e860:	bne	1c6b8 <_start@@Base+0x9f9c>
   1e864:	b	1b6d4 <_start@@Base+0x8fb8>
   1e868:	mov	sl, r0
   1e86c:	b	1b6d4 <_start@@Base+0x8fb8>
   1e870:	mov	r1, r4
   1e874:	mov	r2, r9
   1e878:	mov	r0, fp
   1e87c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e880:	mov	r4, r0
   1e884:	b	1cf00 <_start@@Base+0xa7e4>
   1e888:	mov	r1, sl
   1e88c:	mov	r2, r9
   1e890:	mov	r0, fp
   1e894:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e898:	mov	sl, r0
   1e89c:	b	1dd4c <_start@@Base+0xb630>
   1e8a0:	mov	r1, sl
   1e8a4:	mov	r2, r9
   1e8a8:	mov	r0, fp
   1e8ac:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1e8b0:	mov	sl, r0
   1e8b4:	b	1c388 <_start@@Base+0x9c6c>
   1e8b8:	mov	r1, r4
   1e8bc:	mov	r3, #5
   1e8c0:	mov	r2, r9
   1e8c4:	mov	r0, fp
   1e8c8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1e8cc:	mov	r4, r0
   1e8d0:	b	1cf50 <_start@@Base+0xa834>
   1e8d4:	mov	r1, r0
   1e8d8:	add	r0, sp, #344	; 0x158
   1e8dc:	ldr	r3, [pc, #-580]	; 1e6a0 <_start@@Base+0xbf84>
   1e8e0:	mov	r2, r9
   1e8e4:	str	r0, [sp]
   1e8e8:	mov	r0, fp
   1e8ec:	bl	14e1c <_start@@Base+0x2700>
   1e8f0:	cmp	r9, r0
   1e8f4:	cmpne	r4, r0
   1e8f8:	beq	1e934 <_start@@Base+0xc218>
   1e8fc:	mov	r4, r0
   1e900:	b	1cfcc <_start@@Base+0xa8b0>
   1e904:	mov	r1, r0
   1e908:	add	r0, sp, #344	; 0x158
   1e90c:	ldr	r3, [pc, #-624]	; 1e6a4 <_start@@Base+0xbf88>
   1e910:	mov	r2, r9
   1e914:	str	r0, [sp]
   1e918:	mov	r0, fp
   1e91c:	bl	14e1c <_start@@Base+0x2700>
   1e920:	cmp	r9, r0
   1e924:	cmpne	r4, r0
   1e928:	beq	1e934 <_start@@Base+0xc218>
   1e92c:	mov	r4, r0
   1e930:	b	1cef4 <_start@@Base+0xa7d8>
   1e934:	mov	r1, r0
   1e938:	mov	r3, #33	; 0x21
   1e93c:	strd	r6, [sp, #184]	; 0xb8
   1e940:	mov	r2, r9
   1e944:	mov	r0, fp
   1e948:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1e94c:	mov	r4, r0
   1e950:	add	r3, sp, #320	; 0x140
   1e954:	mov	r1, r4
   1e958:	mov	r2, r9
   1e95c:	mov	r0, fp
   1e960:	bl	196bc <_start@@Base+0x6fa0>
   1e964:	ldr	r3, [sp, #320]	; 0x140
   1e968:	mov	sl, r0
   1e96c:	cmp	r3, #0
   1e970:	bne	1ce20 <_start@@Base+0xa704>
   1e974:	add	r3, sp, #272	; 0x110
   1e978:	ldrd	r6, [r3]
   1e97c:	ldr	r0, [fp]
   1e980:	bl	24304 <flatcc_builder_end_vector@@Base>
   1e984:	cmp	r0, #0
   1e988:	str	r0, [sp, #324]	; 0x144
   1e98c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e990:	mov	r1, #29
   1e994:	ldr	r0, [fp]
   1e998:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1e99c:	cmp	r0, #0
   1e9a0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1e9a4:	ldr	r3, [sp, #324]	; 0x144
   1e9a8:	str	r3, [r0]
   1e9ac:	b	1bf4c <_start@@Base+0x9830>
   1e9b0:	strd	r6, [sp, #184]	; 0xb8
   1e9b4:	b	1e950 <_start@@Base+0xc234>
   1e9b8:	sub	r3, r9, sl
   1e9bc:	cmp	r3, #7
   1e9c0:	ble	1e888 <_start@@Base+0xc16c>
   1e9c4:	mov	r1, sl
   1e9c8:	mov	r3, #7
   1e9cc:	mov	r2, r9
   1e9d0:	mov	r0, fp
   1e9d4:	bl	13ccc <_start@@Base+0x15b0>
   1e9d8:	cmp	r0, sl
   1e9dc:	mov	r1, r0
   1e9e0:	beq	1e888 <_start@@Base+0xc16c>
   1e9e4:	add	r3, sp, #344	; 0x158
   1e9e8:	mov	r2, r9
   1e9ec:	str	r8, [sp]
   1e9f0:	mov	r0, fp
   1e9f4:	bl	2b7a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1e9f8:	ldr	r3, [sp, #344]	; 0x158
   1e9fc:	mov	sl, r0
   1ea00:	cmp	r3, #0
   1ea04:	beq	1de70 <_start@@Base+0xb754>
   1ea08:	mov	r1, #1
   1ea0c:	ldr	r0, [fp]
   1ea10:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1ea14:	cmp	r0, #0
   1ea18:	bne	1dd44 <_start@@Base+0xb628>
   1ea1c:	b	1de70 <_start@@Base+0xb754>
   1ea20:	sub	r3, r9, sl
   1ea24:	cmp	r3, #3
   1ea28:	ble	1e8a0 <_start@@Base+0xc184>
   1ea2c:	mov	r3, #3
   1ea30:	mov	r2, r9
   1ea34:	mov	r1, sl
   1ea38:	mov	r0, fp
   1ea3c:	bl	13ccc <_start@@Base+0x15b0>
   1ea40:	cmp	r0, sl
   1ea44:	mov	r8, r0
   1ea48:	beq	1e8a0 <_start@@Base+0xc184>
   1ea4c:	mov	r0, #0
   1ea50:	mov	r1, #0
   1ea54:	add	r3, sp, #344	; 0x158
   1ea58:	mov	r2, r9
   1ea5c:	strd	r0, [r3]
   1ea60:	mov	r1, r8
   1ea64:	mov	r0, fp
   1ea68:	bl	1345c <_start@@Base+0xd40>
   1ea6c:	cmp	r8, r0
   1ea70:	mov	sl, r0
   1ea74:	beq	1f1c8 <_start@@Base+0xcaac>
   1ea78:	add	r3, sp, #344	; 0x158
   1ea7c:	ldrd	r2, [r3]
   1ea80:	orrs	r3, r2, r3
   1ea84:	bne	1ea94 <_start@@Base+0xc378>
   1ea88:	ldr	r3, [fp, #8]
   1ea8c:	tst	r3, #2
   1ea90:	beq	1c388 <_start@@Base+0x9c6c>
   1ea94:	mov	r3, #8
   1ea98:	mov	r1, #1
   1ea9c:	ldr	r0, [fp]
   1eaa0:	mov	r2, r3
   1eaa4:	bl	259e0 <flatcc_builder_table_add@@Base>
   1eaa8:	cmp	r0, #0
   1eaac:	beq	1ed8c <_start@@Base+0xc670>
   1eab0:	add	r3, sp, #344	; 0x158
   1eab4:	ldrd	r2, [r3]
   1eab8:	strd	r2, [r0]
   1eabc:	b	1c388 <_start@@Base+0x9c6c>
   1eac0:	ldrb	r2, [sl, #1]
   1eac4:	add	r1, sl, #1
   1eac8:	cmp	r2, #114	; 0x72
   1eacc:	bne	1c0d0 <_start@@Base+0x99b4>
   1ead0:	ldrb	r2, [r1, #1]!
   1ead4:	cmp	r2, #117	; 0x75
   1ead8:	bne	1c0d0 <_start@@Base+0x99b4>
   1eadc:	ldrb	r2, [r1, #1]
   1eae0:	cmp	r2, #101	; 0x65
   1eae4:	bne	1c0d0 <_start@@Base+0x99b4>
   1eae8:	mov	r3, #1
   1eaec:	add	r4, sl, #4
   1eaf0:	mov	r2, #1
   1eaf4:	strb	r3, [sp, #340]	; 0x154
   1eaf8:	b	1c124 <_start@@Base+0x9a08>
   1eafc:	mov	r1, r0
   1eb00:	add	r0, sp, #344	; 0x158
   1eb04:	ldr	r3, [pc, #-1124]	; 1e6a8 <_start@@Base+0xbf8c>
   1eb08:	mov	r2, r9
   1eb0c:	str	r0, [sp]
   1eb10:	mov	r0, fp
   1eb14:	bl	14138 <_start@@Base+0x1a1c>
   1eb18:	cmp	r9, r0
   1eb1c:	cmpne	sl, r0
   1eb20:	beq	1f6f8 <_start@@Base+0xcfdc>
   1eb24:	mov	sl, r0
   1eb28:	b	1d8bc <_start@@Base+0xb1a0>
   1eb2c:	mov	r1, sl
   1eb30:	mov	r2, r9
   1eb34:	mov	r0, fp
   1eb38:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1eb3c:	mov	sl, r0
   1eb40:	b	1bf4c <_start@@Base+0x9830>
   1eb44:	mov	r1, sl
   1eb48:	mov	r2, r9
   1eb4c:	mov	r0, fp
   1eb50:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1eb54:	mov	sl, r0
   1eb58:	b	1bf4c <_start@@Base+0x9830>
   1eb5c:	mov	r1, sl
   1eb60:	mov	r2, r9
   1eb64:	mov	r0, fp
   1eb68:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1eb6c:	mov	sl, r0
   1eb70:	b	1bf4c <_start@@Base+0x9830>
   1eb74:	mov	sl, r9
   1eb78:	b	1b890 <_start@@Base+0x9174>
   1eb7c:	mov	r1, sl
   1eb80:	mov	r3, #5
   1eb84:	mov	r2, r9
   1eb88:	mov	r0, fp
   1eb8c:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1eb90:	mov	sl, r0
   1eb94:	b	1dd9c <_start@@Base+0xb680>
   1eb98:	mov	r1, sl
   1eb9c:	mov	r3, #5
   1eba0:	mov	r2, r9
   1eba4:	mov	r0, fp
   1eba8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1ebac:	mov	sl, r0
   1ebb0:	b	1c3dc <_start@@Base+0x9cc0>
   1ebb4:	ldr	r1, [sp, #340]	; 0x154
   1ebb8:	add	r3, sp, #344	; 0x158
   1ebbc:	ldrd	r2, [r3]
   1ebc0:	cmp	r1, #0
   1ebc4:	beq	1ef1c <_start@@Base+0xc800>
   1ebc8:	cmp	r3, #0
   1ebcc:	cmpeq	r2, #128	; 0x80
   1ebd0:	rsbls	r2, r2, #0
   1ebd4:	sxtbls	r2, r2
   1ebd8:	strbls	r2, [sp, #336]	; 0x150
   1ebdc:	bls	1b8c4 <_start@@Base+0x91a8>
   1ebe0:	mov	r1, r0
   1ebe4:	mov	r3, #8
   1ebe8:	mov	r2, r9
   1ebec:	mov	r0, fp
   1ebf0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1ebf4:	mov	sl, r0
   1ebf8:	cmp	r4, sl
   1ebfc:	beq	1b890 <_start@@Base+0x9174>
   1ec00:	add	r3, sp, #336	; 0x150
   1ec04:	ldrsb	r2, [r3]
   1ec08:	b	1b8c4 <_start@@Base+0x91a8>
   1ec0c:	ldrb	r3, [r1, #1]
   1ec10:	cmp	r3, #32
   1ec14:	addhi	r1, r1, #1
   1ec18:	bls	1d798 <_start@@Base+0xb07c>
   1ec1c:	b	1d7a8 <_start@@Base+0xb08c>
   1ec20:	ldrb	r3, [r1, #1]
   1ec24:	cmp	r3, #32
   1ec28:	addhi	r1, r1, #1
   1ec2c:	bls	1d374 <_start@@Base+0xac58>
   1ec30:	b	1d384 <_start@@Base+0xac68>
   1ec34:	mov	r1, sl
   1ec38:	mov	r2, r9
   1ec3c:	mov	r0, fp
   1ec40:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1ec44:	mov	sl, r0
   1ec48:	b	1bf4c <_start@@Base+0x9830>
   1ec4c:	mov	r3, #0
   1ec50:	add	r4, sl, #16
   1ec54:	mov	r1, r9
   1ec58:	mov	r0, r4
   1ec5c:	str	r3, [sp, #256]	; 0x100
   1ec60:	bl	12810 <_start@@Base+0xf4>
   1ec64:	and	r3, r1, #-16777216	; 0xff000000
   1ec68:	str	r3, [sp, #260]	; 0x104
   1ec6c:	add	r3, sp, #256	; 0x100
   1ec70:	ldrd	r2, [r3]
   1ec74:	cmp	r3, #1929379840	; 0x73000000
   1ec78:	cmpeq	r2, #0
   1ec7c:	bne	1ef68 <_start@@Base+0xc84c>
   1ec80:	sub	r3, r9, r4
   1ec84:	cmp	r3, #1
   1ec88:	ble	1f3bc <_start@@Base+0xcca0>
   1ec8c:	mov	r2, r9
   1ec90:	mov	r1, r4
   1ec94:	mov	r0, fp
   1ec98:	bl	1392c <_start@@Base+0x1210>
   1ec9c:	cmp	r4, r0
   1eca0:	mov	sl, r0
   1eca4:	beq	1f3b8 <_start@@Base+0xcc9c>
   1eca8:	mov	r2, #8
   1ecac:	mvn	r3, #-536870912	; 0xe0000000
   1ecb0:	ldr	r0, [fp]
   1ecb4:	mov	r1, r2
   1ecb8:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1ecbc:	cmp	r0, #0
   1ecc0:	bne	1b6d4 <_start@@Base+0x8fb8>
   1ecc4:	mov	r1, sl
   1ecc8:	add	r3, sp, #320	; 0x140
   1eccc:	mov	r2, r9
   1ecd0:	mov	r0, fp
   1ecd4:	bl	13ea0 <_start@@Base+0x1784>
   1ecd8:	ldr	r3, [sp, #320]	; 0x140
   1ecdc:	mov	sl, r0
   1ece0:	cmp	r3, #0
   1ece4:	beq	1f778 <_start@@Base+0xd05c>
   1ece8:	vldr	d8, [pc, #992]	; 1f0d0 <_start@@Base+0xc9b4>
   1ecec:	ldr	r5, [pc, #996]	; 1f0d8 <_start@@Base+0xc9bc>
   1ecf0:	b	1ed20 <_start@@Base+0xc604>
   1ecf4:	vldr	d7, [sp, #344]	; 0x158
   1ecf8:	mov	r1, r0
   1ecfc:	add	r3, sp, #320	; 0x140
   1ed00:	mov	r2, r9
   1ed04:	mov	r0, fp
   1ed08:	vstr	d7, [r4]
   1ed0c:	bl	196bc <_start@@Base+0x6fa0>
   1ed10:	ldr	r3, [sp, #320]	; 0x140
   1ed14:	mov	sl, r0
   1ed18:	cmp	r3, #0
   1ed1c:	beq	1f778 <_start@@Base+0xd05c>
   1ed20:	mov	r1, #1
   1ed24:	ldr	r0, [fp]
   1ed28:	vstr	d8, [sp, #344]	; 0x158
   1ed2c:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1ed30:	subs	r4, r0, #0
   1ed34:	mov	r1, sl
   1ed38:	add	r3, sp, #344	; 0x158
   1ed3c:	mov	r2, r9
   1ed40:	mov	r0, fp
   1ed44:	beq	1b6d4 <_start@@Base+0x8fb8>
   1ed48:	bl	296f8 <flatcc_json_parser_double@@Base>
   1ed4c:	cmp	r0, sl
   1ed50:	bne	1ecf4 <_start@@Base+0xc5d8>
   1ed54:	add	r1, sp, #344	; 0x158
   1ed58:	mov	r3, r5
   1ed5c:	mov	r2, r9
   1ed60:	mov	r0, fp
   1ed64:	str	r1, [sp]
   1ed68:	mov	r1, sl
   1ed6c:	bl	14338 <_start@@Base+0x1c1c>
   1ed70:	cmp	r9, r0
   1ed74:	cmpne	r0, sl
   1ed78:	bne	1ecf4 <_start@@Base+0xc5d8>
   1ed7c:	mov	sl, r0
   1ed80:	b	1b6d4 <_start@@Base+0x8fb8>
   1ed84:	mov	r7, r9
   1ed88:	b	1c30c <_start@@Base+0x9bf0>
   1ed8c:	ldrd	r6, [sp, #16]
   1ed90:	add	r3, sp, #280	; 0x118
   1ed94:	mov	r0, sl
   1ed98:	strd	r4, [r3]
   1ed9c:	mov	sl, r0
   1eda0:	mov	r1, sl
   1eda4:	mov	r3, #33	; 0x21
   1eda8:	mov	r2, r9
   1edac:	mov	r0, fp
   1edb0:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1edb4:	ldr	r3, [sp, #324]	; 0x144
   1edb8:	mov	sl, r0
   1edbc:	cmp	r3, #0
   1edc0:	beq	1b6d4 <_start@@Base+0x8fb8>
   1edc4:	mov	r1, #14
   1edc8:	ldr	r0, [fp]
   1edcc:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1edd0:	cmp	r0, #0
   1edd4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1edd8:	ldr	r3, [sp, #324]	; 0x144
   1eddc:	str	r3, [r0]
   1ede0:	b	1bf4c <_start@@Base+0x9830>
   1ede4:	ldr	r0, [fp]
   1ede8:	bl	24304 <flatcc_builder_end_vector@@Base>
   1edec:	cmp	r0, #0
   1edf0:	str	r0, [sp, #324]	; 0x144
   1edf4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1edf8:	mov	r1, #30
   1edfc:	ldr	r0, [fp]
   1ee00:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1ee04:	cmp	r0, #0
   1ee08:	beq	1b6d4 <_start@@Base+0x8fb8>
   1ee0c:	ldr	r3, [sp, #324]	; 0x144
   1ee10:	str	r3, [r0]
   1ee14:	b	1bf4c <_start@@Base+0x9830>
   1ee18:	ldr	r3, [sp, #340]	; 0x154
   1ee1c:	cmp	r3, #0
   1ee20:	bne	1f640 <_start@@Base+0xcf24>
   1ee24:	add	r3, sp, #344	; 0x158
   1ee28:	mov	r1, #0
   1ee2c:	ldrd	r2, [r3]
   1ee30:	movw	r0, #65535	; 0xffff
   1ee34:	cmp	r3, r1
   1ee38:	cmpeq	r2, r0
   1ee3c:	bhi	1f6dc <_start@@Base+0xcfc0>
   1ee40:	add	r3, sp, #316	; 0x13c
   1ee44:	uxth	r2, r2
   1ee48:	add	r3, r3, #2
   1ee4c:	mov	sl, r7
   1ee50:	strh	r2, [r3]
   1ee54:	b	1c348 <_start@@Base+0x9c2c>
   1ee58:	ldrb	r3, [r1, #1]
   1ee5c:	cmp	r3, #32
   1ee60:	addhi	r1, r1, #1
   1ee64:	bls	1d194 <_start@@Base+0xaa78>
   1ee68:	b	1d1a4 <_start@@Base+0xaa88>
   1ee6c:	mov	r1, sl
   1ee70:	mov	r2, r9
   1ee74:	mov	r0, fp
   1ee78:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1ee7c:	mov	sl, r0
   1ee80:	b	1bf4c <_start@@Base+0x9830>
   1ee84:	mov	r1, r8
   1ee88:	mov	r2, r9
   1ee8c:	mov	r0, fp
   1ee90:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1ee94:	mov	sl, r0
   1ee98:	b	1bf4c <_start@@Base+0x9830>
   1ee9c:	mov	r4, r0
   1eea0:	mov	r1, r4
   1eea4:	mov	r2, r9
   1eea8:	mov	r0, fp
   1eeac:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1eeb0:	mov	sl, r0
   1eeb4:	b	1bf4c <_start@@Base+0x9830>
   1eeb8:	ldr	r0, [fp]
   1eebc:	bl	24304 <flatcc_builder_end_vector@@Base>
   1eec0:	cmp	r0, #0
   1eec4:	str	r0, [sp, #324]	; 0x144
   1eec8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1eecc:	mov	r1, #24
   1eed0:	ldr	r0, [fp]
   1eed4:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1eed8:	cmp	r0, #0
   1eedc:	beq	1b6d4 <_start@@Base+0x8fb8>
   1eee0:	ldr	r3, [sp, #324]	; 0x144
   1eee4:	str	r3, [r0]
   1eee8:	b	1bf4c <_start@@Base+0x9830>
   1eeec:	add	r1, r1, #1
   1eef0:	mov	r2, r9
   1eef4:	mov	r0, fp
   1eef8:	bl	13420 <_start@@Base+0xd04>
   1eefc:	mov	r5, r0
   1ef00:	b	1d7d0 <_start@@Base+0xb0b4>
   1ef04:	add	r1, r1, #1
   1ef08:	mov	r2, r9
   1ef0c:	mov	r0, fp
   1ef10:	bl	13420 <_start@@Base+0xd04>
   1ef14:	mov	r5, r0
   1ef18:	b	1d3ac <_start@@Base+0xac90>
   1ef1c:	cmp	r3, #0
   1ef20:	cmpeq	r2, #127	; 0x7f
   1ef24:	sxtbls	r2, r2
   1ef28:	strbls	r2, [sp, #336]	; 0x150
   1ef2c:	bls	1b8c4 <_start@@Base+0x91a8>
   1ef30:	mov	r1, r0
   1ef34:	mov	r3, #7
   1ef38:	mov	r2, r9
   1ef3c:	mov	r0, fp
   1ef40:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1ef44:	mov	sl, r0
   1ef48:	b	1ebf8 <_start@@Base+0xc4dc>
   1ef4c:	mov	r4, r0
   1ef50:	mov	r1, r4
   1ef54:	mov	r2, r9
   1ef58:	mov	r0, fp
   1ef5c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1ef60:	mov	sl, r0
   1ef64:	b	1bf4c <_start@@Base+0x9830>
   1ef68:	mov	r1, r4
   1ef6c:	mov	r2, r9
   1ef70:	mov	r0, fp
   1ef74:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1ef78:	mov	sl, r0
   1ef7c:	b	1bf4c <_start@@Base+0x9830>
   1ef80:	mov	r1, r0
   1ef84:	add	r0, sp, #344	; 0x158
   1ef88:	ldr	r3, [pc, #332]	; 1f0dc <_start@@Base+0xc9c0>
   1ef8c:	mov	r2, r9
   1ef90:	str	r0, [sp]
   1ef94:	mov	r0, fp
   1ef98:	bl	14138 <_start@@Base+0x1a1c>
   1ef9c:	cmp	r9, r0
   1efa0:	cmpne	sl, r0
   1efa4:	beq	1f6f8 <_start@@Base+0xcfdc>
   1efa8:	mov	sl, r0
   1efac:	b	1dbb4 <_start@@Base+0xb498>
   1efb0:	mov	r1, sl
   1efb4:	mov	r2, r9
   1efb8:	mov	r0, fp
   1efbc:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1efc0:	mov	sl, r0
   1efc4:	b	1bf4c <_start@@Base+0x9830>
   1efc8:	mov	r3, #29
   1efcc:	mov	r2, r9
   1efd0:	mov	r0, fp
   1efd4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1efd8:	mov	sl, r0
   1efdc:	b	1b6d4 <_start@@Base+0x8fb8>
   1efe0:	mov	r1, r0
   1efe4:	add	r0, sp, #344	; 0x158
   1efe8:	ldr	r3, [pc, #240]	; 1f0e0 <_start@@Base+0xc9c4>
   1efec:	mov	r2, r9
   1eff0:	str	r0, [sp]
   1eff4:	mov	r0, fp
   1eff8:	bl	14138 <_start@@Base+0x1a1c>
   1effc:	cmp	r9, r0
   1f000:	cmpne	r0, r4
   1f004:	mov	sl, r0
   1f008:	bne	1cc00 <_start@@Base+0xa4e4>
   1f00c:	b	1b6d4 <_start@@Base+0x8fb8>
   1f010:	mov	r1, r0
   1f014:	add	r0, sp, #344	; 0x158
   1f018:	ldr	r3, [pc, #196]	; 1f0e4 <_start@@Base+0xc9c8>
   1f01c:	mov	r2, r9
   1f020:	str	r0, [sp]
   1f024:	mov	r0, fp
   1f028:	bl	14138 <_start@@Base+0x1a1c>
   1f02c:	cmp	r9, r0
   1f030:	cmpne	sl, r0
   1f034:	beq	1f6f8 <_start@@Base+0xcfdc>
   1f038:	mov	sl, r0
   1f03c:	b	1d9fc <_start@@Base+0xb2e0>
   1f040:	ldrb	r1, [r0, #1]
   1f044:	add	r2, r0, #1
   1f048:	cmp	r1, #114	; 0x72
   1f04c:	bne	1b9b0 <_start@@Base+0x9294>
   1f050:	ldrb	r1, [r2, #1]!
   1f054:	cmp	r1, #117	; 0x75
   1f058:	bne	1b9b0 <_start@@Base+0x9294>
   1f05c:	ldrb	r2, [r2, #1]
   1f060:	cmp	r2, #101	; 0x65
   1f064:	moveq	r3, #1
   1f068:	addeq	sl, r0, #4
   1f06c:	strbeq	r3, [sp, #336]	; 0x150
   1f070:	bne	1b9b0 <_start@@Base+0x9294>
   1f074:	b	1d704 <_start@@Base+0xafe8>
   1f078:	ldr	r3, [sp, #340]	; 0x154
   1f07c:	cmp	r3, #0
   1f080:	str	r3, [sp, #16]
   1f084:	bne	1f7ac <_start@@Base+0xd090>
   1f088:	add	r3, sp, #344	; 0x158
   1f08c:	ldrd	r2, [r3]
   1f090:	cmp	r3, #0
   1f094:	cmpeq	r2, #255	; 0xff
   1f098:	bhi	1f7d8 <_start@@Base+0xd0bc>
   1f09c:	uxtb	r3, r2
   1f0a0:	mov	sl, r0
   1f0a4:	adds	r3, r3, #0
   1f0a8:	movne	r3, #1
   1f0ac:	strb	r3, [sp, #336]	; 0x150
   1f0b0:	b	1d6fc <_start@@Base+0xafe0>
   1f0b4:	add	r1, r1, #1
   1f0b8:	mov	r2, r9
   1f0bc:	mov	r0, fp
   1f0c0:	bl	13420 <_start@@Base+0xd04>
   1f0c4:	mov	r1, r0
   1f0c8:	b	1d1cc <_start@@Base+0xaab0>
   1f0cc:	nop	{0}
	...
   1f0d8:	strdeq	r0, [r4], -r4
   1f0dc:	strdeq	r0, [r4], -r4
   1f0e0:	andeq	r0, r4, r0, ror r2
   1f0e4:	andeq	r0, r4, r0, lsl #4
   1f0e8:	andeq	r0, r4, r8, asr r2
   1f0ec:	andeq	r0, r4, r4, ror #4
   1f0f0:	andeq	r0, r4, r0, asr #3
   1f0f4:	andeq	r0, r4, r8, lsl #5
   1f0f8:	andeq	r0, r4, r0, lsr #5
   1f0fc:	andeq	r0, r4, r8, ror #5
   1f100:	muleq	r4, r4, r2
   1f104:			; <UNDEFINED> instruction: 0x000402b8
   1f108:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   1f10c:	andeq	r0, r4, ip, lsr #5
   1f110:	andeq	r0, r4, r4, asr #5
   1f114:	ldrdeq	r0, [r4], -ip
   1f118:	mov	r4, r0
   1f11c:	mov	r1, r4
   1f120:	mov	r2, r9
   1f124:	mov	r0, fp
   1f128:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f12c:	mov	sl, r0
   1f130:	b	1bf4c <_start@@Base+0x9830>
   1f134:	add	r3, sp, #272	; 0x110
   1f138:	ldrd	r6, [r3]
   1f13c:	ldr	r3, [fp, #24]
   1f140:	cmp	r3, #0
   1f144:	bne	1de78 <_start@@Base+0xb75c>
   1f148:	ldr	r0, [fp]
   1f14c:	bl	23fe8 <flatcc_builder_end_table@@Base>
   1f150:	cmp	r0, #0
   1f154:	str	r0, [sp, #324]	; 0x144
   1f158:	bne	1de9c <_start@@Base+0xb780>
   1f15c:	b	1de78 <_start@@Base+0xb75c>
   1f160:	mov	r8, r0
   1f164:	mov	r1, r8
   1f168:	mov	r2, r9
   1f16c:	mov	r0, fp
   1f170:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f174:	mov	sl, r0
   1f178:	b	1bf4c <_start@@Base+0x9830>
   1f17c:	mov	r8, r0
   1f180:	mov	r1, r8
   1f184:	mov	r2, r9
   1f188:	mov	r0, fp
   1f18c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f190:	mov	sl, r0
   1f194:	b	1bf4c <_start@@Base+0x9830>
   1f198:	ldrd	r6, [sp, #16]
   1f19c:	add	r3, sp, #280	; 0x118
   1f1a0:	strd	r4, [r3]
   1f1a4:	ldr	r3, [fp, #24]
   1f1a8:	cmp	r3, #0
   1f1ac:	bne	1eda0 <_start@@Base+0xc684>
   1f1b0:	ldr	r0, [fp]
   1f1b4:	bl	23fe8 <flatcc_builder_end_table@@Base>
   1f1b8:	cmp	r0, #0
   1f1bc:	str	r0, [sp, #324]	; 0x144
   1f1c0:	bne	1edc4 <_start@@Base+0xc6a8>
   1f1c4:	b	1eda0 <_start@@Base+0xc684>
   1f1c8:	mov	r1, r0
   1f1cc:	add	r0, sp, #344	; 0x158
   1f1d0:	ldr	r3, [pc, #-240]	; 1f0e8 <_start@@Base+0xc9cc>
   1f1d4:	mov	r2, r9
   1f1d8:	str	r0, [sp]
   1f1dc:	mov	r0, fp
   1f1e0:	bl	160d0 <_start@@Base+0x39b4>
   1f1e4:	cmp	r9, r0
   1f1e8:	cmpne	sl, r0
   1f1ec:	beq	1faa4 <_start@@Base+0xd388>
   1f1f0:	mov	sl, r0
   1f1f4:	b	1ea78 <_start@@Base+0xc35c>
   1f1f8:	mov	r3, #0
   1f1fc:	add	sl, sl, #8
   1f200:	mov	r1, r9
   1f204:	mov	r0, sl
   1f208:	str	r3, [sp, #288]	; 0x120
   1f20c:	bl	12810 <_start@@Base+0xf4>
   1f210:	and	r3, r1, #-16777216	; 0xff000000
   1f214:	str	r3, [sp, #292]	; 0x124
   1f218:	add	r3, sp, #288	; 0x120
   1f21c:	ldrd	r2, [r3]
   1f220:	cmp	r3, #1627389952	; 0x61000000
   1f224:	cmpeq	r2, #0
   1f228:	bne	1f628 <_start@@Base+0xcf0c>
   1f22c:	sub	r3, r9, sl
   1f230:	cmp	r3, #1
   1f234:	ble	1f838 <_start@@Base+0xd11c>
   1f238:	mov	r2, r9
   1f23c:	mov	r1, sl
   1f240:	mov	r0, fp
   1f244:	bl	1392c <_start@@Base+0x1210>
   1f248:	cmp	sl, r0
   1f24c:	mov	r8, r0
   1f250:	beq	1f838 <_start@@Base+0xd11c>
   1f254:	add	r3, sp, #344	; 0x158
   1f258:	mov	r4, #0
   1f25c:	mov	r5, #0
   1f260:	mov	r1, r0
   1f264:	mov	r2, r9
   1f268:	mov	r0, fp
   1f26c:	strd	r4, [r3]
   1f270:	bl	1345c <_start@@Base+0xd40>
   1f274:	cmp	r0, r8
   1f278:	mov	sl, r0
   1f27c:	beq	1fa08 <_start@@Base+0xd2ec>
   1f280:	add	r3, sp, #344	; 0x158
   1f284:	ldrd	r2, [r3]
   1f288:	orrs	r3, r2, r3
   1f28c:	bne	1f29c <_start@@Base+0xcb80>
   1f290:	ldr	r3, [fp, #8]
   1f294:	tst	r3, #2
   1f298:	beq	1bf4c <_start@@Base+0x9830>
   1f29c:	mov	r3, #8
   1f2a0:	mov	r1, #22
   1f2a4:	ldr	r0, [fp]
   1f2a8:	mov	r2, r3
   1f2ac:	bl	259e0 <flatcc_builder_table_add@@Base>
   1f2b0:	cmp	r0, #0
   1f2b4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f2b8:	add	r3, sp, #344	; 0x158
   1f2bc:	ldrd	r2, [r3]
   1f2c0:	strd	r2, [r0]
   1f2c4:	b	1bf4c <_start@@Base+0x9830>
   1f2c8:	mov	sl, r4
   1f2cc:	b	1c940 <_start@@Base+0xa224>
   1f2d0:	mov	r1, sl
   1f2d4:	mov	r2, r9
   1f2d8:	mov	r0, fp
   1f2dc:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f2e0:	mov	sl, r0
   1f2e4:	b	1bf4c <_start@@Base+0x9830>
   1f2e8:	ldr	r0, [fp]
   1f2ec:	bl	23048 <flatcc_builder_start_offset_vector@@Base>
   1f2f0:	cmp	r0, #0
   1f2f4:	bne	1b6d4 <_start@@Base+0x8fb8>
   1f2f8:	mov	r1, sl
   1f2fc:	add	r3, sp, #320	; 0x140
   1f300:	mov	r2, r9
   1f304:	mov	r0, fp
   1f308:	bl	13ea0 <_start@@Base+0x1784>
   1f30c:	ldr	r3, [sp, #320]	; 0x140
   1f310:	mov	sl, r0
   1f314:	cmp	r3, #0
   1f318:	beq	1f384 <_start@@Base+0xcc68>
   1f31c:	add	r4, sp, #324	; 0x144
   1f320:	mov	r1, sl
   1f324:	mov	r3, r4
   1f328:	mov	r2, r9
   1f32c:	mov	r0, fp
   1f330:	bl	1b688 <_start@@Base+0x8f6c>
   1f334:	ldr	r3, [sp, #324]	; 0x144
   1f338:	mov	sl, r0
   1f33c:	mov	r1, #1
   1f340:	cmp	r3, #0
   1f344:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f348:	ldr	r0, [fp]
   1f34c:	bl	2259c <flatcc_builder_extend_offset_vector@@Base>
   1f350:	subs	ip, r0, #0
   1f354:	add	r3, sp, #320	; 0x140
   1f358:	mov	r2, r9
   1f35c:	mov	r1, sl
   1f360:	mov	r0, fp
   1f364:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f368:	ldr	lr, [sp, #324]	; 0x144
   1f36c:	str	lr, [ip]
   1f370:	bl	196bc <_start@@Base+0x6fa0>
   1f374:	ldr	r3, [sp, #320]	; 0x140
   1f378:	mov	sl, r0
   1f37c:	cmp	r3, #0
   1f380:	bne	1f320 <_start@@Base+0xcc04>
   1f384:	ldr	r0, [fp]
   1f388:	bl	246c8 <flatcc_builder_end_offset_vector@@Base>
   1f38c:	cmp	r0, #0
   1f390:	str	r0, [sp, #324]	; 0x144
   1f394:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f398:	mov	r1, #11
   1f39c:	ldr	r0, [fp]
   1f3a0:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1f3a4:	cmp	r0, #0
   1f3a8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f3ac:	ldr	r3, [sp, #324]	; 0x144
   1f3b0:	str	r3, [r0]
   1f3b4:	b	1bf4c <_start@@Base+0x9830>
   1f3b8:	mov	r4, r0
   1f3bc:	mov	r1, r4
   1f3c0:	mov	r2, r9
   1f3c4:	mov	r0, fp
   1f3c8:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f3cc:	mov	sl, r0
   1f3d0:	b	1bf4c <_start@@Base+0x9830>
   1f3d4:	mov	r1, r0
   1f3d8:	add	r0, sp, #344	; 0x158
   1f3dc:	ldr	r3, [pc, #-760]	; 1f0ec <_start@@Base+0xc9d0>
   1f3e0:	mov	r2, r9
   1f3e4:	str	r0, [sp]
   1f3e8:	mov	r0, fp
   1f3ec:	bl	14138 <_start@@Base+0x1a1c>
   1f3f0:	cmp	r9, r0
   1f3f4:	cmpne	sl, r0
   1f3f8:	beq	1fa00 <_start@@Base+0xd2e4>
   1f3fc:	mov	sl, r0
   1f400:	b	1d634 <_start@@Base+0xaf18>
   1f404:	add	sl, sl, #8
   1f408:	mov	r1, r9
   1f40c:	mov	r0, sl
   1f410:	mov	r8, #0
   1f414:	bl	12810 <_start@@Base+0xf4>
   1f418:	and	r3, r1, #-16777216	; 0xff000000
   1f41c:	str	r8, [sp, #296]	; 0x128
   1f420:	str	r3, [sp, #300]	; 0x12c
   1f424:	add	r3, sp, #296	; 0x128
   1f428:	ldrd	r2, [r3]
   1f42c:	cmp	r3, #1627389952	; 0x61000000
   1f430:	cmpeq	r2, #0
   1f434:	bne	1f730 <_start@@Base+0xd014>
   1f438:	sub	r3, r9, sl
   1f43c:	cmp	r3, #1
   1f440:	ble	1f9e4 <_start@@Base+0xd2c8>
   1f444:	mov	r2, r9
   1f448:	mov	r1, sl
   1f44c:	mov	r0, fp
   1f450:	bl	1392c <_start@@Base+0x1210>
   1f454:	cmp	sl, r0
   1f458:	mov	r4, r0
   1f45c:	beq	1f9e4 <_start@@Base+0xd2c8>
   1f460:	add	r5, sp, #344	; 0x158
   1f464:	mov	r1, r0
   1f468:	str	r8, [sp, #344]	; 0x158
   1f46c:	mov	r2, r9
   1f470:	mov	r3, r5
   1f474:	mov	r0, fp
   1f478:	bl	13694 <_start@@Base+0xf78>
   1f47c:	cmp	r0, r4
   1f480:	mov	sl, r0
   1f484:	beq	1fa38 <_start@@Base+0xd31c>
   1f488:	ldr	r3, [sp, #344]	; 0x158
   1f48c:	cmp	r3, #0
   1f490:	bne	1f4a0 <_start@@Base+0xcd84>
   1f494:	ldr	r3, [fp, #8]
   1f498:	tst	r3, #2
   1f49c:	beq	1bf4c <_start@@Base+0x9830>
   1f4a0:	mov	r3, #4
   1f4a4:	mov	r1, #21
   1f4a8:	ldr	r0, [fp]
   1f4ac:	mov	r2, r3
   1f4b0:	bl	259e0 <flatcc_builder_table_add@@Base>
   1f4b4:	cmp	r0, #0
   1f4b8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f4bc:	ldr	r3, [sp, #344]	; 0x158
   1f4c0:	str	r3, [r0]
   1f4c4:	b	1bf4c <_start@@Base+0x9830>
   1f4c8:	mov	sl, r0
   1f4cc:	mov	r3, #0
   1f4d0:	add	sl, sl, #8
   1f4d4:	mov	r1, r9
   1f4d8:	mov	r0, sl
   1f4dc:	str	r3, [sp, #304]	; 0x130
   1f4e0:	bl	12810 <_start@@Base+0xf4>
   1f4e4:	and	r3, r1, #-16777216	; 0xff000000
   1f4e8:	str	r3, [sp, #308]	; 0x134
   1f4ec:	add	r3, sp, #304	; 0x130
   1f4f0:	ldrd	r2, [r3]
   1f4f4:	cmp	r3, #1627389952	; 0x61000000
   1f4f8:	cmpeq	r2, #0
   1f4fc:	bne	1f748 <_start@@Base+0xd02c>
   1f500:	sub	r3, r9, sl
   1f504:	cmp	r3, #1
   1f508:	ble	1f9c4 <_start@@Base+0xd2a8>
   1f50c:	mov	r2, r9
   1f510:	mov	r1, sl
   1f514:	mov	r0, fp
   1f518:	bl	1392c <_start@@Base+0x1210>
   1f51c:	cmp	sl, r0
   1f520:	mov	r8, r0
   1f524:	beq	1f9c4 <_start@@Base+0xd2a8>
   1f528:	add	r3, sp, #344	; 0x158
   1f52c:	mov	r4, #0
   1f530:	mov	r5, #0
   1f534:	mov	r1, r0
   1f538:	mov	r2, r9
   1f53c:	mov	r0, fp
   1f540:	strd	r4, [r3]
   1f544:	bl	13538 <_start@@Base+0xe1c>
   1f548:	cmp	r0, r8
   1f54c:	mov	sl, r0
   1f550:	beq	1fa64 <_start@@Base+0xd348>
   1f554:	add	r3, sp, #344	; 0x158
   1f558:	ldrd	r2, [r3]
   1f55c:	orrs	r3, r2, r3
   1f560:	bne	1f570 <_start@@Base+0xce54>
   1f564:	ldr	r3, [fp, #8]
   1f568:	tst	r3, #2
   1f56c:	beq	1bf4c <_start@@Base+0x9830>
   1f570:	mov	r3, #8
   1f574:	mov	r1, #23
   1f578:	ldr	r0, [fp]
   1f57c:	mov	r2, r3
   1f580:	bl	259e0 <flatcc_builder_table_add@@Base>
   1f584:	cmp	r0, #0
   1f588:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f58c:	add	r3, sp, #344	; 0x158
   1f590:	ldrd	r2, [r3]
   1f594:	strd	r2, [r0]
   1f598:	b	1bf4c <_start@@Base+0x9830>
   1f59c:	mov	r1, sl
   1f5a0:	mov	r2, r9
   1f5a4:	mov	r0, fp
   1f5a8:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f5ac:	mov	sl, r0
   1f5b0:	b	1bf4c <_start@@Base+0x9830>
   1f5b4:	mov	sl, r8
   1f5b8:	mov	r9, r4
   1f5bc:	b	1b6d4 <_start@@Base+0x8fb8>
   1f5c0:	mov	sl, r0
   1f5c4:	mov	r9, r4
   1f5c8:	ldr	r0, [fp]
   1f5cc:	bl	24304 <flatcc_builder_end_vector@@Base>
   1f5d0:	cmp	r0, #0
   1f5d4:	str	r0, [sp, #324]	; 0x144
   1f5d8:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f5dc:	mov	r1, #32
   1f5e0:	ldr	r0, [fp]
   1f5e4:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1f5e8:	cmp	r0, #0
   1f5ec:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f5f0:	ldr	r3, [sp, #324]	; 0x144
   1f5f4:	str	r3, [r0]
   1f5f8:	b	1bf4c <_start@@Base+0x9830>
   1f5fc:	mov	r1, r0
   1f600:	ldr	r3, [pc, #-1304]	; 1f0f0 <_start@@Base+0xc9d4>
   1f604:	mov	r2, r9
   1f608:	mov	r0, fp
   1f60c:	str	r8, [sp]
   1f610:	bl	14bc0 <_start@@Base+0x24a4>
   1f614:	cmp	r9, r0
   1f618:	cmpne	sl, r0
   1f61c:	mov	sl, r0
   1f620:	bne	1ccd8 <_start@@Base+0xa5bc>
   1f624:	b	1b6d4 <_start@@Base+0x8fb8>
   1f628:	mov	r1, sl
   1f62c:	mov	r2, r9
   1f630:	mov	r0, fp
   1f634:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f638:	mov	sl, r0
   1f63c:	b	1bf4c <_start@@Base+0x9830>
   1f640:	mov	r1, r0
   1f644:	mov	r3, #8
   1f648:	mov	r2, r9
   1f64c:	mov	r0, fp
   1f650:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1f654:	mov	sl, r0
   1f658:	cmp	r8, sl
   1f65c:	bne	1c33c <_start@@Base+0x9c20>
   1f660:	mov	r7, r8
   1f664:	b	1c30c <_start@@Base+0x9bf0>
   1f668:	ldr	r0, [fp]
   1f66c:	bl	24304 <flatcc_builder_end_vector@@Base>
   1f670:	cmp	r0, #0
   1f674:	str	r0, [sp, #324]	; 0x144
   1f678:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f67c:	mov	r1, #5
   1f680:	ldr	r0, [fp]
   1f684:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1f688:	cmp	r0, #0
   1f68c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f690:	ldr	r3, [sp, #324]	; 0x144
   1f694:	str	r3, [r0]
   1f698:	b	1bf4c <_start@@Base+0x9830>
   1f69c:	mov	r1, r0
   1f6a0:	add	r0, sp, #344	; 0x158
   1f6a4:	ldr	r3, [pc, #-1464]	; 1f0f4 <_start@@Base+0xc9d8>
   1f6a8:	mov	r2, r9
   1f6ac:	str	r0, [sp]
   1f6b0:	mov	r0, fp
   1f6b4:	bl	15050 <_start@@Base+0x2934>
   1f6b8:	cmp	r9, r0
   1f6bc:	cmpne	r0, r4
   1f6c0:	mov	sl, r0
   1f6c4:	bne	1c7a0 <_start@@Base+0xa084>
   1f6c8:	b	1b6d4 <_start@@Base+0x8fb8>
   1f6cc:	add	r3, sp, #280	; 0x118
   1f6d0:	ldrd	r6, [sp, #16]
   1f6d4:	strd	r4, [r3]
   1f6d8:	b	1eda0 <_start@@Base+0xc684>
   1f6dc:	mov	r1, r7
   1f6e0:	mov	r3, #7
   1f6e4:	mov	r2, r9
   1f6e8:	mov	r0, fp
   1f6ec:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1f6f0:	mov	sl, r0
   1f6f4:	b	1f658 <_start@@Base+0xcf3c>
   1f6f8:	mov	r1, r0
   1f6fc:	mov	r3, #33	; 0x21
   1f700:	mov	r2, r9
   1f704:	mov	r0, fp
   1f708:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1f70c:	mov	sl, r0
   1f710:	b	1bf4c <_start@@Base+0x9830>
   1f714:	mov	r4, r0
   1f718:	mov	r1, r4
   1f71c:	mov	r2, r9
   1f720:	mov	r0, fp
   1f724:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f728:	mov	sl, r0
   1f72c:	b	1bf4c <_start@@Base+0x9830>
   1f730:	mov	r1, sl
   1f734:	mov	r2, r9
   1f738:	mov	r0, fp
   1f73c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f740:	mov	sl, r0
   1f744:	b	1bf4c <_start@@Base+0x9830>
   1f748:	mov	r1, sl
   1f74c:	mov	r2, r9
   1f750:	mov	r0, fp
   1f754:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f758:	mov	sl, r0
   1f75c:	b	1bf4c <_start@@Base+0x9830>
   1f760:	mov	r1, sl
   1f764:	mov	r2, r9
   1f768:	mov	r0, fp
   1f76c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f770:	mov	sl, r0
   1f774:	b	1bf4c <_start@@Base+0x9830>
   1f778:	ldr	r0, [fp]
   1f77c:	bl	24304 <flatcc_builder_end_vector@@Base>
   1f780:	cmp	r0, #0
   1f784:	str	r0, [sp, #324]	; 0x144
   1f788:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f78c:	mov	r1, #33	; 0x21
   1f790:	ldr	r0, [fp]
   1f794:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   1f798:	cmp	r0, #0
   1f79c:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f7a0:	ldr	r3, [sp, #324]	; 0x144
   1f7a4:	str	r3, [r0]
   1f7a8:	b	1bf4c <_start@@Base+0x9830>
   1f7ac:	mov	r1, r0
   1f7b0:	mov	r3, #8
   1f7b4:	mov	r2, r9
   1f7b8:	mov	r0, fp
   1f7bc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1f7c0:	cmp	r4, r0
   1f7c4:	mov	sl, r0
   1f7c8:	strb	r8, [sp, #336]	; 0x150
   1f7cc:	bne	1b9d8 <_start@@Base+0x92bc>
   1f7d0:	mov	r5, r4
   1f7d4:	b	1d6cc <_start@@Base+0xafb0>
   1f7d8:	mov	r1, r0
   1f7dc:	mov	r3, #7
   1f7e0:	mov	r2, r9
   1f7e4:	mov	r0, fp
   1f7e8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1f7ec:	ldr	r3, [sp, #16]
   1f7f0:	cmp	r4, r0
   1f7f4:	mov	sl, r0
   1f7f8:	strb	r3, [sp, #336]	; 0x150
   1f7fc:	bne	1b9d8 <_start@@Base+0x92bc>
   1f800:	b	1f7d0 <_start@@Base+0xd0b4>
   1f804:	ldr	r3, [pc, #-1812]	; 1f0f8 <_start@@Base+0xc9dc>
   1f808:	mov	r2, r9
   1f80c:	mov	r0, fp
   1f810:	str	r8, [sp]
   1f814:	mov	r4, r1
   1f818:	bl	160d0 <_start@@Base+0x39b4>
   1f81c:	cmp	r9, r0
   1f820:	cmpne	r0, r4
   1f824:	mov	sl, r0
   1f828:	bne	1d060 <_start@@Base+0xa944>
   1f82c:	b	1b6d4 <_start@@Base+0x8fb8>
   1f830:	mov	sl, r4
   1f834:	b	1b6d4 <_start@@Base+0x8fb8>
   1f838:	mov	r1, sl
   1f83c:	mov	r2, r9
   1f840:	mov	r0, fp
   1f844:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f848:	mov	sl, r0
   1f84c:	b	1bf4c <_start@@Base+0x9830>
   1f850:	mov	r2, #1
   1f854:	mvn	r3, #0
   1f858:	mov	r1, r2
   1f85c:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   1f860:	subs	r5, r0, #0
   1f864:	bne	1b6d4 <_start@@Base+0x8fb8>
   1f868:	mov	r1, sl
   1f86c:	add	r3, sp, #320	; 0x140
   1f870:	mov	r2, r9
   1f874:	mov	r0, fp
   1f878:	bl	13ea0 <_start@@Base+0x1784>
   1f87c:	ldr	r3, [sp, #320]	; 0x140
   1f880:	mov	sl, r0
   1f884:	cmp	r3, #0
   1f888:	beq	1fa94 <_start@@Base+0xd378>
   1f88c:	ldr	r8, [pc, #-1944]	; 1f0fc <_start@@Base+0xc9e0>
   1f890:	b	1f8c0 <_start@@Base+0xd1a4>
   1f894:	ldrb	ip, [sp, #344]	; 0x158
   1f898:	mov	r1, r0
   1f89c:	add	r3, sp, #320	; 0x140
   1f8a0:	mov	r2, r9
   1f8a4:	mov	r0, fp
   1f8a8:	strb	ip, [r4]
   1f8ac:	bl	196bc <_start@@Base+0x6fa0>
   1f8b0:	ldr	r3, [sp, #320]	; 0x140
   1f8b4:	mov	sl, r0
   1f8b8:	cmp	r3, #0
   1f8bc:	beq	1fa94 <_start@@Base+0xd378>
   1f8c0:	mov	r1, #1
   1f8c4:	ldr	r0, [fp]
   1f8c8:	strb	r5, [sp, #344]	; 0x158
   1f8cc:	bl	2222c <flatcc_builder_extend_vector@@Base>
   1f8d0:	subs	r4, r0, #0
   1f8d4:	mov	r1, sl
   1f8d8:	add	r3, sp, #344	; 0x158
   1f8dc:	mov	r2, r9
   1f8e0:	mov	r0, fp
   1f8e4:	beq	1b6d4 <_start@@Base+0x8fb8>
   1f8e8:	bl	135d4 <_start@@Base+0xeb8>
   1f8ec:	cmp	r0, sl
   1f8f0:	bne	1f894 <_start@@Base+0xd178>
   1f8f4:	add	r1, sp, #344	; 0x158
   1f8f8:	mov	r3, r8
   1f8fc:	mov	r2, r9
   1f900:	mov	r0, fp
   1f904:	str	r1, [sp]
   1f908:	mov	r1, sl
   1f90c:	bl	15bc8 <_start@@Base+0x34ac>
   1f910:	cmp	r9, r0
   1f914:	cmpne	r0, sl
   1f918:	bne	1f894 <_start@@Base+0xd178>
   1f91c:	mov	sl, r0
   1f920:	b	1b6d4 <_start@@Base+0x8fb8>
   1f924:	mov	r1, r0
   1f928:	ldr	r3, [pc, #-2096]	; 1f100 <_start@@Base+0xc9e4>
   1f92c:	mov	r2, r9
   1f930:	mov	r0, fp
   1f934:	str	r8, [sp]
   1f938:	bl	15050 <_start@@Base+0x2934>
   1f93c:	cmp	r9, r0
   1f940:	cmpne	r0, r4
   1f944:	mov	sl, r0
   1f948:	bne	1e730 <_start@@Base+0xc014>
   1f94c:	b	1b6d4 <_start@@Base+0x8fb8>
   1f950:	mov	sl, r4
   1f954:	b	1b6d4 <_start@@Base+0x8fb8>
   1f958:	ldr	r3, [pc, #-2140]	; 1f104 <_start@@Base+0xc9e8>
   1f95c:	mov	r2, r9
   1f960:	mov	r1, r4
   1f964:	mov	r0, fp
   1f968:	str	r8, [sp]
   1f96c:	bl	14e1c <_start@@Base+0x2700>
   1f970:	cmp	r9, r0
   1f974:	cmpne	r0, r4
   1f978:	mov	sl, r0
   1f97c:	bne	1e7f8 <_start@@Base+0xc0dc>
   1f980:	b	1b6d4 <_start@@Base+0x8fb8>
   1f984:	mov	sl, r4
   1f988:	b	1b6d4 <_start@@Base+0x8fb8>
   1f98c:	mov	sl, r5
   1f990:	b	1b6d4 <_start@@Base+0x8fb8>
   1f994:	add	r0, sp, #344	; 0x158
   1f998:	ldr	r3, [pc, #-2200]	; 1f108 <_start@@Base+0xc9ec>
   1f99c:	mov	r2, r9
   1f9a0:	mov	r1, r8
   1f9a4:	str	r0, [sp]
   1f9a8:	mov	r0, fp
   1f9ac:	bl	14750 <_start@@Base+0x2034>
   1f9b0:	cmp	r9, r0
   1f9b4:	cmpne	r0, r8
   1f9b8:	mov	sl, r0
   1f9bc:	bne	1e394 <_start@@Base+0xbc78>
   1f9c0:	b	1b6d4 <_start@@Base+0x8fb8>
   1f9c4:	mov	r1, sl
   1f9c8:	mov	r2, r9
   1f9cc:	mov	r0, fp
   1f9d0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f9d4:	mov	sl, r0
   1f9d8:	b	1bf4c <_start@@Base+0x9830>
   1f9dc:	mov	sl, r0
   1f9e0:	b	1bf4c <_start@@Base+0x9830>
   1f9e4:	mov	r1, sl
   1f9e8:	mov	r2, r9
   1f9ec:	mov	r0, fp
   1f9f0:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1f9f4:	mov	sl, r0
   1f9f8:	b	1bf4c <_start@@Base+0x9830>
   1f9fc:	mov	r0, sl
   1fa00:	mov	sl, r0
   1fa04:	b	1b6d4 <_start@@Base+0x8fb8>
   1fa08:	mov	r1, r0
   1fa0c:	add	r0, sp, #344	; 0x158
   1fa10:	ldr	r3, [pc, #-2316]	; 1f10c <_start@@Base+0xc9f0>
   1fa14:	mov	r2, r9
   1fa18:	str	r0, [sp]
   1fa1c:	mov	r0, fp
   1fa20:	bl	160d0 <_start@@Base+0x39b4>
   1fa24:	cmp	r9, r0
   1fa28:	cmpne	r0, r8
   1fa2c:	mov	sl, r0
   1fa30:	bne	1f280 <_start@@Base+0xcb64>
   1fa34:	b	1b6d4 <_start@@Base+0x8fb8>
   1fa38:	mov	r1, r0
   1fa3c:	ldr	r3, [pc, #-2356]	; 1f110 <_start@@Base+0xc9f4>
   1fa40:	mov	r2, r9
   1fa44:	mov	r0, fp
   1fa48:	str	r5, [sp]
   1fa4c:	bl	14e1c <_start@@Base+0x2700>
   1fa50:	cmp	r9, r0
   1fa54:	cmpne	r0, r4
   1fa58:	mov	sl, r0
   1fa5c:	bne	1f488 <_start@@Base+0xcd6c>
   1fa60:	b	1b6d4 <_start@@Base+0x8fb8>
   1fa64:	mov	r1, r0
   1fa68:	add	r0, sp, #344	; 0x158
   1fa6c:	ldr	r3, [pc, #-2400]	; 1f114 <_start@@Base+0xc9f8>
   1fa70:	mov	r2, r9
   1fa74:	str	r0, [sp]
   1fa78:	mov	r0, fp
   1fa7c:	bl	14750 <_start@@Base+0x2034>
   1fa80:	cmp	r9, r0
   1fa84:	cmpne	r0, r8
   1fa88:	mov	sl, r0
   1fa8c:	bne	1f554 <_start@@Base+0xce38>
   1fa90:	b	1b6d4 <_start@@Base+0x8fb8>
   1fa94:	ldr	r0, [fp]
   1fa98:	bl	24304 <flatcc_builder_end_vector@@Base>
   1fa9c:	str	r0, [sp, #324]	; 0x144
   1faa0:	b	1bd20 <_start@@Base+0x9604>
   1faa4:	add	r3, sp, #280	; 0x118
   1faa8:	ldrd	r6, [sp, #16]
   1faac:	strd	r4, [r3]
   1fab0:	b	1ed9c <_start@@Base+0xc680>
   1fab4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fab8:	mov	ip, #0
   1fabc:	mov	r5, r0
   1fac0:	strd	r6, [sp, #8]
   1fac4:	mov	r4, r1
   1fac8:	mov	r6, r2
   1facc:	strd	r8, [sp, #16]
   1fad0:	strd	sl, [sp, #24]
   1fad4:	str	lr, [sp, #32]
   1fad8:	sub	sp, sp, #68	; 0x44
   1fadc:	ldr	r7, [sp, #104]	; 0x68
   1fae0:	str	ip, [r7]
   1fae4:	cmp	r3, #4
   1fae8:	ldrls	pc, [pc, r3, lsl #2]
   1faec:	b	203bc <_start@@Base+0xdca0>
   1faf0:	andeq	pc, r1, r0, asr #22
   1faf4:	andeq	pc, r1, r0, ror fp	; <UNPREDICTABLE>
   1faf8:	andeq	pc, r1, ip, ror fp	; <UNPREDICTABLE>
   1fafc:	andeq	pc, r1, r0, lsr ip	; <UNPREDICTABLE>
   1fb00:	andeq	pc, r1, r4, lsl #22
   1fb04:	mov	r3, r7
   1fb08:	bl	166f0 <_start@@Base+0x3fd4>
   1fb0c:	ldr	r3, [r5, #24]
   1fb10:	cmp	r3, #0
   1fb14:	bne	1fb24 <_start@@Base+0xd408>
   1fb18:	ldr	r3, [r7]
   1fb1c:	cmp	r3, #0
   1fb20:	beq	20218 <_start@@Base+0xdafc>
   1fb24:	add	sp, sp, #68	; 0x44
   1fb28:	ldrd	r4, [sp]
   1fb2c:	ldrd	r6, [sp, #8]
   1fb30:	ldrd	r8, [sp, #16]
   1fb34:	ldrd	sl, [sp, #24]
   1fb38:	add	sp, sp, #32
   1fb3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb40:	sub	r3, r2, r1
   1fb44:	cmp	r3, #3
   1fb48:	ble	1fb58 <_start@@Base+0xd43c>
   1fb4c:	ldrb	r3, [r1]
   1fb50:	cmp	r3, #110	; 0x6e
   1fb54:	beq	20348 <_start@@Base+0xdc2c>
   1fb58:	mov	r2, r6
   1fb5c:	mov	r1, r4
   1fb60:	mov	r0, r5
   1fb64:	mov	r3, #26
   1fb68:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1fb6c:	b	1fb24 <_start@@Base+0xd408>
   1fb70:	mov	r3, r7
   1fb74:	bl	1b688 <_start@@Base+0x8f6c>
   1fb78:	b	1fb0c <_start@@Base+0xd3f0>
   1fb7c:	mov	r1, #4
   1fb80:	ldr	r0, [r0]
   1fb84:	bl	23668 <flatcc_builder_start_table@@Base>
   1fb88:	cmp	r0, #0
   1fb8c:	bne	1fdec <_start@@Base+0xd6d0>
   1fb90:	mov	r1, r4
   1fb94:	add	r3, sp, #48	; 0x30
   1fb98:	mov	r2, r6
   1fb9c:	mov	r0, r5
   1fba0:	bl	13dcc <_start@@Base+0x16b0>
   1fba4:	ldr	r3, [sp, #48]	; 0x30
   1fba8:	mov	r4, r0
   1fbac:	cmp	r3, #0
   1fbb0:	beq	1fdc8 <_start@@Base+0xd6ac>
   1fbb4:	mov	r9, #0
   1fbb8:	movt	r9, #65535	; 0xffff
   1fbbc:	str	r9, [sp, #28]
   1fbc0:	str	r7, [sp, #104]	; 0x68
   1fbc4:	cmp	r6, r4
   1fbc8:	beq	1fbf4 <_start@@Base+0xd4d8>
   1fbcc:	ldrb	r3, [r4]
   1fbd0:	cmp	r3, #34	; 0x22
   1fbd4:	moveq	r3, #0
   1fbd8:	addeq	r4, r4, #1
   1fbdc:	streq	r3, [r5, #12]
   1fbe0:	beq	1fbf4 <_start@@Base+0xd4d8>
   1fbe4:	cmp	r3, #46	; 0x2e
   1fbe8:	movne	r3, #1
   1fbec:	strne	r3, [r5, #12]
   1fbf0:	beq	20164 <_start@@Base+0xda48>
   1fbf4:	sub	ip, r6, r4
   1fbf8:	cmp	ip, #8
   1fbfc:	bhi	1fc3c <_start@@Base+0xd520>
   1fc00:	sub	r3, ip, #1
   1fc04:	cmp	r3, #7
   1fc08:	ldrls	pc, [pc, r3, lsl #2]
   1fc0c:	b	1ff30 <_start@@Base+0xd814>
   1fc10:	andeq	pc, r1, ip, asr #28
   1fc14:	andeq	pc, r1, r0, lsl lr	; <UNPREDICTABLE>
   1fc18:	andeq	pc, r1, r0, asr #28
   1fc1c:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   1fc20:	andeq	pc, r1, r8, lsr #28
   1fc24:	andeq	pc, r1, ip, lsl lr	; <UNPREDICTABLE>
   1fc28:	andeq	pc, r1, r4, lsl #28
   1fc2c:	andeq	pc, r1, ip, lsr ip	; <UNPREDICTABLE>
   1fc30:	mov	r3, r7
   1fc34:	bl	15df8 <_start@@Base+0x36dc>
   1fc38:	b	1fb0c <_start@@Base+0xd3f0>
   1fc3c:	ldrb	r8, [r4, #7]
   1fc40:	mov	r9, #0
   1fc44:	mov	r3, r9
   1fc48:	ldrb	r0, [r4, #6]
   1fc4c:	orr	r2, r8, r0, lsl #8
   1fc50:	ldrb	r0, [r4, #5]
   1fc54:	mov	lr, r3
   1fc58:	orr	r1, r2, r0, lsl #16
   1fc5c:	ldrb	r2, [r4, #4]
   1fc60:	orr	r2, r1, r2, lsl #24
   1fc64:	ldrb	r0, [r4, #3]
   1fc68:	orr	r3, lr, r0
   1fc6c:	ldrb	r0, [r4, #2]
   1fc70:	orr	r3, r3, r0, lsl #8
   1fc74:	ldrb	r0, [r4, #1]
   1fc78:	mov	r8, #0
   1fc7c:	ldr	lr, [sp, #28]
   1fc80:	orr	r3, r3, r0, lsl #16
   1fc84:	ldrb	r0, [r4]
   1fc88:	and	sl, r2, lr
   1fc8c:	mov	lr, r2
   1fc90:	orr	r0, r3, r0, lsl #24
   1fc94:	add	r3, pc, #940	; 0x3ac
   1fc98:	ldrd	r2, [r3]
   1fc9c:	cmp	r0, r3
   1fca0:	cmpeq	sl, r2
   1fca4:	beq	1fe5c <_start@@Base+0xd740>
   1fca8:	and	r3, lr, #-16777216	; 0xff000000
   1fcac:	add	r9, pc, #924	; 0x39c
   1fcb0:	ldrd	r8, [r9]
   1fcb4:	str	r3, [sp, #8]
   1fcb8:	str	r0, [sp, #12]
   1fcbc:	ldrd	r2, [sp, #8]
   1fcc0:	cmp	r3, r9
   1fcc4:	cmpeq	r2, r8
   1fcc8:	bne	1ff48 <_start@@Base+0xd82c>
   1fccc:	cmp	ip, #5
   1fcd0:	ble	1ff30 <_start@@Base+0xd814>
   1fcd4:	mov	r2, r6
   1fcd8:	mov	r1, r4
   1fcdc:	mov	r0, r5
   1fce0:	bl	13be4 <_start@@Base+0x14c8>
   1fce4:	cmp	r0, r4
   1fce8:	mov	r7, r0
   1fcec:	beq	1ff30 <_start@@Base+0xd814>
   1fcf0:	mov	r3, #0
   1fcf4:	cmp	r6, r0
   1fcf8:	mov	r1, #0
   1fcfc:	mov	r0, #0
   1fd00:	strb	r3, [sp, #47]	; 0x2f
   1fd04:	str	r3, [sp, #52]	; 0x34
   1fd08:	strd	r0, [sp, #56]	; 0x38
   1fd0c:	beq	2015c <_start@@Base+0xda40>
   1fd10:	add	r0, sp, #56	; 0x38
   1fd14:	add	r3, sp, #52	; 0x34
   1fd18:	mov	r2, r6
   1fd1c:	mov	r1, r7
   1fd20:	str	r0, [sp]
   1fd24:	mov	r0, r5
   1fd28:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1fd2c:	cmp	r7, r0
   1fd30:	mov	r4, r0
   1fd34:	bne	201c4 <_start@@Base+0xdaa8>
   1fd38:	add	ip, sp, #47	; 0x2f
   1fd3c:	ldr	r3, [pc, #796]	; 20060 <_start@@Base+0xd944>
   1fd40:	mov	r2, r6
   1fd44:	mov	r1, r4
   1fd48:	mov	r0, r5
   1fd4c:	str	ip, [sp]
   1fd50:	bl	15974 <_start@@Base+0x3258>
   1fd54:	cmp	r6, r0
   1fd58:	cmpne	r0, r4
   1fd5c:	beq	203b0 <_start@@Base+0xdc94>
   1fd60:	ldrsb	r2, [sp, #47]	; 0x2f
   1fd64:	mov	r4, r0
   1fd68:	cmp	r2, #2
   1fd6c:	bne	1fd7c <_start@@Base+0xd660>
   1fd70:	ldr	r3, [r5, #8]
   1fd74:	tst	r3, #2
   1fd78:	beq	1fda0 <_start@@Base+0xd684>
   1fd7c:	mov	r3, #1
   1fd80:	mov	r1, #0
   1fd84:	ldr	r0, [r5]
   1fd88:	mov	r2, r3
   1fd8c:	bl	259e0 <flatcc_builder_table_add@@Base>
   1fd90:	cmp	r0, #0
   1fd94:	beq	1ff28 <_start@@Base+0xd80c>
   1fd98:	ldrsb	r3, [sp, #47]	; 0x2f
   1fd9c:	strb	r3, [r0]
   1fda0:	mov	r1, r4
   1fda4:	add	r3, sp, #48	; 0x30
   1fda8:	mov	r2, r6
   1fdac:	mov	r0, r5
   1fdb0:	bl	16560 <_start@@Base+0x3e44>
   1fdb4:	ldr	r3, [sp, #48]	; 0x30
   1fdb8:	mov	r4, r0
   1fdbc:	cmp	r3, #0
   1fdc0:	bne	1fbc4 <_start@@Base+0xd4a8>
   1fdc4:	ldr	r7, [sp, #104]	; 0x68
   1fdc8:	ldr	r3, [r5, #24]
   1fdcc:	cmp	r3, #0
   1fdd0:	bne	1fdec <_start@@Base+0xd6d0>
   1fdd4:	ldr	r0, [r5]
   1fdd8:	bl	23fe8 <flatcc_builder_end_table@@Base>
   1fddc:	cmp	r0, #0
   1fde0:	str	r0, [r7]
   1fde4:	movne	r0, r4
   1fde8:	bne	1fb0c <_start@@Base+0xd3f0>
   1fdec:	mov	r1, r4
   1fdf0:	mov	r3, #33	; 0x21
   1fdf4:	mov	r2, r6
   1fdf8:	mov	r0, r5
   1fdfc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   1fe00:	b	1fb0c <_start@@Base+0xd3f0>
   1fe04:	mov	r8, #0
   1fe08:	mov	r9, #0
   1fe0c:	b	1fc44 <_start@@Base+0xd528>
   1fe10:	mov	r2, #0
   1fe14:	mov	r3, r2
   1fe18:	b	1fc74 <_start@@Base+0xd558>
   1fe1c:	mov	r2, #0
   1fe20:	mov	r3, r2
   1fe24:	b	1fc50 <_start@@Base+0xd534>
   1fe28:	mov	r1, #0
   1fe2c:	mov	lr, r1
   1fe30:	b	1fc5c <_start@@Base+0xd540>
   1fe34:	mov	r2, #0
   1fe38:	mov	lr, r2
   1fe3c:	b	1fc64 <_start@@Base+0xd548>
   1fe40:	mov	r2, #0
   1fe44:	mov	r3, r2
   1fe48:	b	1fc6c <_start@@Base+0xd550>
   1fe4c:	ldrb	r0, [r4]
   1fe50:	mov	lr, #0
   1fe54:	lsl	r0, r0, #24
   1fe58:	b	1fca8 <_start@@Base+0xd58c>
   1fe5c:	cmp	ip, #6
   1fe60:	ble	1ff30 <_start@@Base+0xd814>
   1fe64:	mov	r3, #6
   1fe68:	mov	r2, r6
   1fe6c:	mov	r1, r4
   1fe70:	mov	r0, r5
   1fe74:	bl	13ccc <_start@@Base+0x15b0>
   1fe78:	cmp	r0, r4
   1fe7c:	mov	r7, r0
   1fe80:	beq	1ff30 <_start@@Base+0xd814>
   1fe84:	mov	r2, #0
   1fe88:	mov	r3, #0
   1fe8c:	strb	r8, [sp, #47]	; 0x2f
   1fe90:	cmp	r6, r0
   1fe94:	str	r8, [sp, #52]	; 0x34
   1fe98:	strd	r2, [sp, #56]	; 0x38
   1fe9c:	beq	20154 <_start@@Base+0xda38>
   1fea0:	add	r0, sp, #56	; 0x38
   1fea4:	add	r3, sp, #52	; 0x34
   1fea8:	mov	r2, r6
   1feac:	mov	r1, r7
   1feb0:	str	r0, [sp]
   1feb4:	mov	r0, r5
   1feb8:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1febc:	cmp	r7, r0
   1fec0:	mov	r4, r0
   1fec4:	bne	20180 <_start@@Base+0xda64>
   1fec8:	add	ip, sp, #47	; 0x2f
   1fecc:	ldr	r3, [pc, #400]	; 20064 <_start@@Base+0xd948>
   1fed0:	mov	r2, r6
   1fed4:	mov	r1, r4
   1fed8:	mov	r0, r5
   1fedc:	str	ip, [sp]
   1fee0:	bl	15974 <_start@@Base+0x3258>
   1fee4:	cmp	r6, r0
   1fee8:	cmpne	r0, r4
   1feec:	beq	203b0 <_start@@Base+0xdc94>
   1fef0:	ldrsb	r2, [sp, #47]	; 0x2f
   1fef4:	mov	r4, r0
   1fef8:	cmp	r2, #2
   1fefc:	bne	1ff0c <_start@@Base+0xd7f0>
   1ff00:	ldr	r3, [r5, #8]
   1ff04:	tst	r3, #2
   1ff08:	beq	1fda0 <_start@@Base+0xd684>
   1ff0c:	mov	r3, #1
   1ff10:	ldr	r0, [r5]
   1ff14:	mov	r2, r3
   1ff18:	mov	r1, r3
   1ff1c:	bl	259e0 <flatcc_builder_table_add@@Base>
   1ff20:	cmp	r0, #0
   1ff24:	bne	1fd98 <_start@@Base+0xd67c>
   1ff28:	ldr	r7, [sp, #104]	; 0x68
   1ff2c:	b	1fdec <_start@@Base+0xd6d0>
   1ff30:	mov	r1, r4
   1ff34:	mov	r2, r6
   1ff38:	mov	r0, r5
   1ff3c:	bl	2b19c <flatcc_json_parser_unmatched_symbol@@Base>
   1ff40:	mov	r4, r0
   1ff44:	b	1fda0 <_start@@Base+0xd684>
   1ff48:	bic	r3, r0, #255	; 0xff
   1ff4c:	mov	r7, #0
   1ff50:	add	r9, pc, #256	; 0x100
   1ff54:	ldrd	r8, [r9]
   1ff58:	str	r7, [sp, #16]
   1ff5c:	str	r3, [sp, #20]
   1ff60:	ldrd	r2, [sp, #16]
   1ff64:	cmp	r3, r9
   1ff68:	cmpeq	r2, r8
   1ff6c:	bne	20070 <_start@@Base+0xd954>
   1ff70:	cmp	ip, #3
   1ff74:	ble	1ff30 <_start@@Base+0xd814>
   1ff78:	mov	r3, #3
   1ff7c:	mov	r2, r6
   1ff80:	mov	r1, r4
   1ff84:	mov	r0, r5
   1ff88:	bl	13ccc <_start@@Base+0x15b0>
   1ff8c:	cmp	r0, r4
   1ff90:	mov	r8, r0
   1ff94:	beq	1ff30 <_start@@Base+0xd814>
   1ff98:	mov	r2, #0
   1ff9c:	mov	r3, #0
   1ffa0:	strb	r7, [sp, #47]	; 0x2f
   1ffa4:	cmp	r6, r0
   1ffa8:	str	r7, [sp, #52]	; 0x34
   1ffac:	strd	r2, [sp, #56]	; 0x38
   1ffb0:	beq	20208 <_start@@Base+0xdaec>
   1ffb4:	add	r0, sp, #56	; 0x38
   1ffb8:	add	r3, sp, #52	; 0x34
   1ffbc:	mov	r2, r6
   1ffc0:	mov	r1, r8
   1ffc4:	str	r0, [sp]
   1ffc8:	mov	r0, r5
   1ffcc:	bl	2b638 <flatcc_json_parser_integer@@Base>
   1ffd0:	cmp	r8, r0
   1ffd4:	mov	r7, r0
   1ffd8:	bne	20230 <_start@@Base+0xdb14>
   1ffdc:	add	ip, sp, #47	; 0x2f
   1ffe0:	ldr	r3, [pc, #128]	; 20068 <_start@@Base+0xd94c>
   1ffe4:	mov	r2, r6
   1ffe8:	mov	r1, r7
   1ffec:	mov	r0, r5
   1fff0:	str	ip, [sp]
   1fff4:	bl	15bc8 <_start@@Base+0x34ac>
   1fff8:	cmp	r6, r0
   1fffc:	cmpne	r0, r7
   20000:	mov	r4, r0
   20004:	beq	1ff28 <_start@@Base+0xd80c>
   20008:	ldrb	r2, [sp, #47]	; 0x2f
   2000c:	cmp	r2, #2
   20010:	bne	20020 <_start@@Base+0xd904>
   20014:	ldr	r3, [r5, #8]
   20018:	tst	r3, #2
   2001c:	beq	1fda0 <_start@@Base+0xd684>
   20020:	mov	r3, #1
   20024:	mov	r1, #3
   20028:	mov	r2, r3
   2002c:	ldr	r0, [r5]
   20030:	bl	259e0 <flatcc_builder_table_add@@Base>
   20034:	cmp	r0, #0
   20038:	beq	1ff28 <_start@@Base+0xd80c>
   2003c:	ldrb	r3, [sp, #47]	; 0x2f
   20040:	strb	r3, [r0]
   20044:	b	1fda0 <_start@@Base+0xd684>
   20048:	eorsvc	r0, r2, #0
   2004c:	cmnvs	pc, #28416	; 0x6f00
   20050:	andvc	r0, r0, #0
   20054:	cmnvs	pc, #28416	; 0x6f00
   20058:	andeq	r0, r0, r0
   2005c:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   20060:	andeq	r0, r4, ip, lsl r3
   20064:	andeq	r0, r4, ip, lsl #6
   20068:	andeq	r0, r4, ip, lsr #6
   2006c:	andeq	r0, r4, r8, lsr r3
   20070:	ldr	r3, [sp, #28]
   20074:	mov	r1, #0
   20078:	movt	r1, #30051	; 0x7563
   2007c:	str	r7, [sp, #32]
   20080:	and	r3, r0, r3
   20084:	mov	r0, #0
   20088:	str	r3, [sp, #36]	; 0x24
   2008c:	ldrd	r2, [sp, #32]
   20090:	cmp	r3, r1
   20094:	cmpeq	r2, r0
   20098:	bne	1ff30 <_start@@Base+0xd814>
   2009c:	cmp	ip, #2
   200a0:	ble	1ff30 <_start@@Base+0xd814>
   200a4:	mov	r2, r6
   200a8:	mov	r1, r4
   200ac:	mov	r0, r5
   200b0:	bl	13a14 <_start@@Base+0x12f8>
   200b4:	cmp	r0, r4
   200b8:	mov	r8, r0
   200bc:	beq	1ff30 <_start@@Base+0xd814>
   200c0:	mov	r2, #0
   200c4:	mov	r3, #0
   200c8:	strb	r7, [sp, #47]	; 0x2f
   200cc:	cmp	r6, r0
   200d0:	str	r7, [sp, #52]	; 0x34
   200d4:	strd	r2, [sp, #56]	; 0x38
   200d8:	beq	20210 <_start@@Base+0xdaf4>
   200dc:	add	r0, sp, #56	; 0x38
   200e0:	add	r3, sp, #52	; 0x34
   200e4:	mov	r2, r6
   200e8:	mov	r1, r8
   200ec:	str	r0, [sp]
   200f0:	mov	r0, r5
   200f4:	bl	2b638 <flatcc_json_parser_integer@@Base>
   200f8:	cmp	r8, r0
   200fc:	mov	r7, r0
   20100:	bne	20280 <_start@@Base+0xdb64>
   20104:	add	ip, sp, #47	; 0x2f
   20108:	ldr	r3, [pc, #-164]	; 2006c <_start@@Base+0xd950>
   2010c:	mov	r2, r6
   20110:	mov	r1, r7
   20114:	mov	r0, r5
   20118:	str	ip, [sp]
   2011c:	bl	15bc8 <_start@@Base+0x34ac>
   20120:	cmp	r6, r0
   20124:	cmpne	r0, r7
   20128:	mov	r4, r0
   2012c:	beq	1ff28 <_start@@Base+0xd80c>
   20130:	ldrb	r2, [sp, #47]	; 0x2f
   20134:	cmp	r2, #2
   20138:	bne	20148 <_start@@Base+0xda2c>
   2013c:	ldr	r3, [r5, #8]
   20140:	tst	r3, #2
   20144:	beq	1fda0 <_start@@Base+0xd684>
   20148:	mov	r3, #1
   2014c:	mov	r1, #2
   20150:	b	20028 <_start@@Base+0xd90c>
   20154:	mov	r4, r6
   20158:	b	1fec8 <_start@@Base+0xd7ac>
   2015c:	mov	r4, r6
   20160:	b	1fd38 <_start@@Base+0xd61c>
   20164:	mov	r1, r4
   20168:	mov	r3, #5
   2016c:	mov	r2, r6
   20170:	mov	r0, r5
   20174:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   20178:	mov	r4, r0
   2017c:	b	1fbf4 <_start@@Base+0xd4d8>
   20180:	ldr	r1, [sp, #52]	; 0x34
   20184:	ldrd	r2, [sp, #56]	; 0x38
   20188:	cmp	r1, #0
   2018c:	beq	202d0 <_start@@Base+0xdbb4>
   20190:	cmp	r3, #0
   20194:	cmpeq	r2, #128	; 0x80
   20198:	rsbls	r2, r2, #0
   2019c:	sxtbls	r2, r2
   201a0:	strbls	r2, [sp, #47]	; 0x2f
   201a4:	bls	1fef8 <_start@@Base+0xd7dc>
   201a8:	mov	r1, r0
   201ac:	mov	r3, #8
   201b0:	mov	r2, r6
   201b4:	mov	r0, r5
   201b8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   201bc:	mov	r4, r0
   201c0:	b	202fc <_start@@Base+0xdbe0>
   201c4:	ldr	r1, [sp, #52]	; 0x34
   201c8:	ldrd	r2, [sp, #56]	; 0x38
   201cc:	cmp	r1, #0
   201d0:	beq	2030c <_start@@Base+0xdbf0>
   201d4:	cmp	r3, #0
   201d8:	cmpeq	r2, #128	; 0x80
   201dc:	rsbls	r2, r2, #0
   201e0:	sxtbls	r2, r2
   201e4:	strbls	r2, [sp, #47]	; 0x2f
   201e8:	bls	1fd68 <_start@@Base+0xd64c>
   201ec:	mov	r1, r0
   201f0:	mov	r3, #8
   201f4:	mov	r2, r6
   201f8:	mov	r0, r5
   201fc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   20200:	mov	r4, r0
   20204:	b	20338 <_start@@Base+0xdc1c>
   20208:	mov	r7, r6
   2020c:	b	1ffdc <_start@@Base+0xd8c0>
   20210:	mov	r7, r6
   20214:	b	20104 <_start@@Base+0xd9e8>
   20218:	mov	r1, r0
   2021c:	mov	r2, r6
   20220:	mov	r0, r5
   20224:	mov	r3, #33	; 0x21
   20228:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   2022c:	b	1fb24 <_start@@Base+0xd408>
   20230:	ldr	r3, [sp, #52]	; 0x34
   20234:	cmp	r3, #0
   20238:	bne	20378 <_start@@Base+0xdc5c>
   2023c:	ldrd	r2, [sp, #56]	; 0x38
   20240:	cmp	r3, #0
   20244:	cmpeq	r2, #255	; 0xff
   20248:	uxtbls	r2, r2
   2024c:	movls	r4, r0
   20250:	strbls	r2, [sp, #47]	; 0x2f
   20254:	bls	2000c <_start@@Base+0xd8f0>
   20258:	mov	r1, r0
   2025c:	mov	r3, #7
   20260:	mov	r2, r6
   20264:	mov	r0, r5
   20268:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   2026c:	mov	r4, r0
   20270:	cmp	r8, r4
   20274:	bne	20008 <_start@@Base+0xd8ec>
   20278:	mov	r7, r8
   2027c:	b	1ffdc <_start@@Base+0xd8c0>
   20280:	ldr	r3, [sp, #52]	; 0x34
   20284:	cmp	r3, #0
   20288:	bne	20394 <_start@@Base+0xdc78>
   2028c:	ldrd	r2, [sp, #56]	; 0x38
   20290:	cmp	r3, #0
   20294:	cmpeq	r2, #255	; 0xff
   20298:	uxtbls	r2, r2
   2029c:	movls	r4, r0
   202a0:	strbls	r2, [sp, #47]	; 0x2f
   202a4:	bls	20134 <_start@@Base+0xda18>
   202a8:	mov	r1, r0
   202ac:	mov	r3, #7
   202b0:	mov	r2, r6
   202b4:	mov	r0, r5
   202b8:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   202bc:	mov	r4, r0
   202c0:	cmp	r8, r4
   202c4:	bne	20130 <_start@@Base+0xda14>
   202c8:	mov	r7, r8
   202cc:	b	20104 <_start@@Base+0xd9e8>
   202d0:	cmp	r3, #0
   202d4:	cmpeq	r2, #127	; 0x7f
   202d8:	sxtbls	r2, r2
   202dc:	strbls	r2, [sp, #47]	; 0x2f
   202e0:	bls	1fef8 <_start@@Base+0xd7dc>
   202e4:	mov	r1, r0
   202e8:	mov	r3, #7
   202ec:	mov	r2, r6
   202f0:	mov	r0, r5
   202f4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   202f8:	mov	r4, r0
   202fc:	cmp	r7, r4
   20300:	beq	1fec8 <_start@@Base+0xd7ac>
   20304:	ldrsb	r2, [sp, #47]	; 0x2f
   20308:	b	1fef8 <_start@@Base+0xd7dc>
   2030c:	cmp	r3, #0
   20310:	cmpeq	r2, #127	; 0x7f
   20314:	sxtbls	r2, r2
   20318:	strbls	r2, [sp, #47]	; 0x2f
   2031c:	bls	1fd68 <_start@@Base+0xd64c>
   20320:	mov	r1, r0
   20324:	mov	r3, #7
   20328:	mov	r2, r6
   2032c:	mov	r0, r5
   20330:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   20334:	mov	r4, r0
   20338:	cmp	r7, r4
   2033c:	beq	1fd38 <_start@@Base+0xd61c>
   20340:	ldrsb	r2, [sp, #47]	; 0x2f
   20344:	b	1fd68 <_start@@Base+0xd64c>
   20348:	ldrb	r3, [r1, #1]
   2034c:	add	r2, r1, #1
   20350:	cmp	r3, #117	; 0x75
   20354:	bne	1fb58 <_start@@Base+0xd43c>
   20358:	ldrb	r3, [r2, #1]!
   2035c:	cmp	r3, #108	; 0x6c
   20360:	bne	1fb58 <_start@@Base+0xd43c>
   20364:	ldrb	r3, [r2, #1]
   20368:	cmp	r3, #108	; 0x6c
   2036c:	addeq	r0, r1, #4
   20370:	bne	1fb58 <_start@@Base+0xd43c>
   20374:	b	1fb24 <_start@@Base+0xd408>
   20378:	mov	r1, r0
   2037c:	mov	r3, #8
   20380:	mov	r2, r6
   20384:	mov	r0, r5
   20388:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   2038c:	mov	r4, r0
   20390:	b	20270 <_start@@Base+0xdb54>
   20394:	mov	r1, r0
   20398:	mov	r3, #8
   2039c:	mov	r2, r6
   203a0:	mov	r0, r5
   203a4:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   203a8:	mov	r4, r0
   203ac:	b	202c0 <_start@@Base+0xdba4>
   203b0:	mov	r4, r0
   203b4:	ldr	r7, [sp, #104]	; 0x68
   203b8:	b	1fdec <_start@@Base+0xd6d0>
   203bc:	ldr	r3, [r0, #8]
   203c0:	tst	r3, #1
   203c4:	bne	203d4 <_start@@Base+0xdcb8>
   203c8:	mov	r3, #15
   203cc:	bl	27f68 <flatcc_json_parser_set_error@@Base>
   203d0:	b	1fb24 <_start@@Base+0xd408>
   203d4:	bl	29980 <flatcc_json_parser_generic_json@@Base>
   203d8:	b	1fb24 <_start@@Base+0xd408>

000203dc <verify_parse@@Base>:
   203dc:	cmp	r0, #0
   203e0:	str	r4, [sp, #-8]!
   203e4:	str	lr, [sp, #4]
   203e8:	beq	20400 <verify_parse@@Base+0x24>
   203ec:	ldr	r2, [r0, #4]
   203f0:	movw	r3, #20301	; 0x4f4d
   203f4:	movt	r3, #21326	; 0x534e
   203f8:	cmp	r2, r3
   203fc:	beq	20420 <verify_parse@@Base+0x44>
   20400:	movw	r3, #56068	; 0xdb04
   20404:	movt	r3, #2
   20408:	movw	r1, #56136	; 0xdb48
   2040c:	movt	r1, #2
   20410:	movw	r0, #56232	; 0xdba8
   20414:	movt	r0, #2
   20418:	mov	r2, #696	; 0x2b8
   2041c:	bl	12684 <__assert_fail@plt>
   20420:	ldr	r2, [r0]
   20424:	adds	r3, r0, r2
   20428:	beq	20400 <verify_parse@@Base+0x24>
   2042c:	ldr	r2, [r0, r2]
   20430:	sub	r2, r3, r2
   20434:	ldrh	r1, [r2]
   20438:	cmp	r1, #5
   2043c:	bls	204d8 <verify_parse@@Base+0xfc>
   20440:	ldrh	r2, [r2, #4]
   20444:	cmp	r2, #0
   20448:	beq	204d8 <verify_parse@@Base+0xfc>
   2044c:	adds	r3, r3, r2
   20450:	beq	204d8 <verify_parse@@Base+0xfc>
   20454:	vldr	s15, [pc, #356]	; 205c0 <verify_parse@@Base+0x1e4>
   20458:	vldr	s14, [r3]
   2045c:	vcmp.f32	s14, s15
   20460:	vmrs	APSR_nzcv, fpscr
   20464:	bne	20548 <verify_parse@@Base+0x16c>
   20468:	vldr	s15, [pc, #340]	; 205c4 <verify_parse@@Base+0x1e8>
   2046c:	vldr	s14, [r3, #4]
   20470:	vcmp.f32	s14, s15
   20474:	vmrs	APSR_nzcv, fpscr
   20478:	bne	20564 <verify_parse@@Base+0x188>
   2047c:	vldr	s15, [pc, #324]	; 205c8 <verify_parse@@Base+0x1ec>
   20480:	vldr	s14, [r3, #8]
   20484:	vcmp.f32	s14, s15
   20488:	vmrs	APSR_nzcv, fpscr
   2048c:	bne	20580 <verify_parse@@Base+0x1a4>
   20490:	vldr	d7, [pc, #288]	; 205b8 <verify_parse@@Base+0x1dc>
   20494:	vldr	d6, [r3, #16]
   20498:	vcmp.f64	d6, d7
   2049c:	vmrs	APSR_nzcv, fpscr
   204a0:	bne	2059c <verify_parse@@Base+0x1c0>
   204a4:	ldrsb	r2, [r3, #24]
   204a8:	cmp	r2, #2
   204ac:	bne	20510 <verify_parse@@Base+0x134>
   204b0:	ldrsh	r2, [r3, #26]
   204b4:	cmp	r2, #5
   204b8:	bne	2052c <verify_parse@@Base+0x150>
   204bc:	ldrsb	r3, [r3, #28]
   204c0:	cmp	r3, #6
   204c4:	bne	204f4 <verify_parse@@Base+0x118>
   204c8:	ldr	r4, [sp]
   204cc:	add	sp, sp, #4
   204d0:	mov	r0, #0
   204d4:	pop	{pc}		; (ldr pc, [sp], #4)
   204d8:	movw	r1, #56272	; 0xdbd0
   204dc:	movt	r1, #2
   204e0:	ldr	r3, [pc, #228]	; 205cc <verify_parse@@Base+0x1f0>
   204e4:	movw	r0, #58792	; 0xe5a8
   204e8:	movt	r0, #2
   204ec:	mov	r2, #45	; 0x2d
   204f0:	bl	12684 <__assert_fail@plt>
   204f4:	movw	r1, #56272	; 0xdbd0
   204f8:	movt	r1, #2
   204fc:	ldr	r3, [pc, #200]	; 205cc <verify_parse@@Base+0x1f0>
   20500:	movw	r0, #58792	; 0xe5a8
   20504:	movt	r0, #2
   20508:	mov	r2, #54	; 0x36
   2050c:	bl	12684 <__assert_fail@plt>
   20510:	movw	r1, #56272	; 0xdbd0
   20514:	movt	r1, #2
   20518:	ldr	r3, [pc, #172]	; 205cc <verify_parse@@Base+0x1f0>
   2051c:	movw	r0, #58792	; 0xe5a8
   20520:	movt	r0, #2
   20524:	mov	r2, #50	; 0x32
   20528:	bl	12684 <__assert_fail@plt>
   2052c:	movw	r1, #56272	; 0xdbd0
   20530:	movt	r1, #2
   20534:	ldr	r3, [pc, #144]	; 205cc <verify_parse@@Base+0x1f0>
   20538:	movw	r0, #58792	; 0xe5a8
   2053c:	movt	r0, #2
   20540:	mov	r2, #53	; 0x35
   20544:	bl	12684 <__assert_fail@plt>
   20548:	movw	r1, #56272	; 0xdbd0
   2054c:	movt	r1, #2
   20550:	ldr	r3, [pc, #116]	; 205cc <verify_parse@@Base+0x1f0>
   20554:	movw	r0, #58792	; 0xe5a8
   20558:	movt	r0, #2
   2055c:	mov	r2, #46	; 0x2e
   20560:	bl	12684 <__assert_fail@plt>
   20564:	movw	r1, #56272	; 0xdbd0
   20568:	movt	r1, #2
   2056c:	ldr	r3, [pc, #88]	; 205cc <verify_parse@@Base+0x1f0>
   20570:	movw	r0, #58792	; 0xe5a8
   20574:	movt	r0, #2
   20578:	mov	r2, #47	; 0x2f
   2057c:	bl	12684 <__assert_fail@plt>
   20580:	movw	r1, #56272	; 0xdbd0
   20584:	movt	r1, #2
   20588:	ldr	r3, [pc, #60]	; 205cc <verify_parse@@Base+0x1f0>
   2058c:	movw	r0, #58792	; 0xe5a8
   20590:	movt	r0, #2
   20594:	mov	r2, #48	; 0x30
   20598:	bl	12684 <__assert_fail@plt>
   2059c:	movw	r1, #56272	; 0xdbd0
   205a0:	movt	r1, #2
   205a4:	ldr	r3, [pc, #32]	; 205cc <verify_parse@@Base+0x1f0>
   205a8:	movw	r0, #58792	; 0xe5a8
   205ac:	movt	r0, #2
   205b0:	mov	r2, #49	; 0x31
   205b4:	bl	12684 <__assert_fail@plt>
   205b8:	andeq	r0, r0, r0
   205bc:	andmi	r0, r8, r0
   205c0:	svccc	0x00800000
   205c4:	andmi	r0, r0, r0
   205c8:	submi	r0, r0, r0
   205cc:	andeq	sp, r2, r0, lsr #22

000205d0 <test_parse@@Base>:
   205d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   205d4:	strd	r6, [sp, #8]
   205d8:	movw	r7, #120	; 0x78
   205dc:	movt	r7, #4
   205e0:	strd	r8, [sp, #16]
   205e4:	strd	sl, [sp, #24]
   205e8:	str	lr, [sp, #32]
   205ec:	sub	sp, sp, #340	; 0x154
   205f0:	add	r0, sp, #104	; 0x68
   205f4:	bl	210e4 <flatcc_builder_init@@Base>
   205f8:	movw	r1, #56356	; 0xdc24
   205fc:	movt	r1, #2
   20600:	ldr	r0, [r7, #716]	; 0x2cc
   20604:	bl	12570 <fopen@plt>
   20608:	subs	r6, r0, #0
   2060c:	beq	209c8 <test_parse@@Base+0x3f8>
   20610:	mov	r2, #2
   20614:	mov	r1, #0
   20618:	bl	1266c <fseek@plt>
   2061c:	mov	r0, r6
   20620:	bl	12594 <ftell@plt>
   20624:	mov	r9, r0
   20628:	mov	r0, r6
   2062c:	cmp	r9, #10240	; 0x2800
   20630:	bhi	20a70 <test_parse@@Base+0x4a0>
   20634:	bl	125ac <rewind@plt>
   20638:	cmp	r9, #0
   2063c:	movne	r0, r9
   20640:	moveq	r0, #1
   20644:	bl	125dc <malloc@plt>
   20648:	subs	r4, r0, #0
   2064c:	beq	20a78 <test_parse@@Base+0x4a8>
   20650:	mov	r8, #0
   20654:	b	2065c <test_parse@@Base+0x8c>
   20658:	add	r8, r8, r0
   2065c:	add	sl, r4, r8
   20660:	mov	r3, r6
   20664:	mov	r0, sl
   20668:	sub	r2, r9, r8
   2066c:	mov	r1, #1
   20670:	bl	125d0 <fread@plt>
   20674:	cmp	r0, #0
   20678:	bne	20658 <test_parse@@Base+0x88>
   2067c:	cmp	r9, r8
   20680:	mov	r5, r0
   20684:	str	sl, [sp, #8]
   20688:	mov	r0, r6
   2068c:	bne	209bc <test_parse@@Base+0x3ec>
   20690:	bl	12654 <fclose@plt>
   20694:	ldr	r0, [sp, #8]
   20698:	mov	sl, #0
   2069c:	mov	fp, #0
   206a0:	add	r3, sp, #104	; 0x68
   206a4:	mov	r2, #1
   206a8:	movw	r1, #56360	; 0xdc28
   206ac:	movt	r1, #2
   206b0:	str	r3, [sp, #60]	; 0x3c
   206b4:	mov	r3, r5
   206b8:	strd	r4, [sp, #64]	; 0x40
   206bc:	strd	sl, [sp, #72]	; 0x48
   206c0:	str	r2, [sp, #76]	; 0x4c
   206c4:	mov	r2, r5
   206c8:	strd	sl, [sp, #80]	; 0x50
   206cc:	str	r0, [sp, #92]	; 0x5c
   206d0:	add	r0, sp, #104	; 0x68
   206d4:	str	r4, [sp, #88]	; 0x58
   206d8:	strd	sl, [sp, #96]	; 0x60
   206dc:	str	r4, [sp, #96]	; 0x60
   206e0:	bl	21b7c <flatcc_builder_start_buffer@@Base>
   206e4:	cmp	r0, #0
   206e8:	bne	20a84 <test_parse@@Base+0x4b4>
   206ec:	add	r3, sp, #40	; 0x28
   206f0:	add	r0, sp, #60	; 0x3c
   206f4:	ldr	r2, [sp, #8]
   206f8:	mov	r1, r4
   206fc:	bl	1b688 <_start@@Base+0x8f6c>
   20700:	ldr	r3, [sp, #84]	; 0x54
   20704:	cmp	r3, #0
   20708:	str	r3, [sp, #12]
   2070c:	beq	20794 <test_parse@@Base+0x1c4>
   20710:	movw	r3, #952	; 0x3b8
   20714:	movt	r3, #4
   20718:	ldr	r7, [r7, #716]	; 0x2cc
   2071c:	mvn	r1, #0
   20720:	ldr	r2, [sp, #64]	; 0x40
   20724:	ldr	r5, [sp, #96]	; 0x60
   20728:	ldr	r8, [r3]
   2072c:	ldr	r6, [sp, #76]	; 0x4c
   20730:	sub	r5, r5, r2
   20734:	add	r5, r5, #1
   20738:	ldr	r0, [sp, #12]
   2073c:	str	r1, [sp, #12]
   20740:	bl	27f40 <flatcc_json_parser_error_string@@Base>
   20744:	movw	r1, #56556	; 0xdcec
   20748:	movt	r1, #2
   2074c:	str	r5, [sp]
   20750:	mov	r2, r7
   20754:	mov	r3, r6
   20758:	str	r0, [sp, #4]
   2075c:	mov	r0, r8
   20760:	bl	12618 <fprintf@plt>
   20764:	mov	r0, r4
   20768:	bl	1257c <free@plt>
   2076c:	add	r0, sp, #104	; 0x68
   20770:	bl	212ac <flatcc_builder_clear@@Base>
   20774:	ldr	r0, [sp, #12]
   20778:	add	sp, sp, #340	; 0x154
   2077c:	ldrd	r4, [sp]
   20780:	ldrd	r6, [sp, #8]
   20784:	ldrd	r8, [sp, #16]
   20788:	ldrd	sl, [sp, #24]
   2078c:	add	sp, sp, #32
   20790:	pop	{pc}		; (ldr pc, [sp], #4)
   20794:	add	r0, sp, #104	; 0x68
   20798:	ldr	r1, [sp, #40]	; 0x28
   2079c:	bl	21d28 <flatcc_builder_end_buffer@@Base>
   207a0:	cmp	r0, #0
   207a4:	beq	20a84 <test_parse@@Base+0x4b4>
   207a8:	movw	r3, #952	; 0x3b8
   207ac:	movt	r3, #4
   207b0:	str	r4, [sp, #100]	; 0x64
   207b4:	mov	r2, r3
   207b8:	movw	r1, #56404	; 0xdc54
   207bc:	movt	r1, #2
   207c0:	ldr	r0, [r3]
   207c4:	movw	fp, #956	; 0x3bc
   207c8:	movt	fp, #4
   207cc:	str	r2, [sp, #28]
   207d0:	ldr	r3, [sp, #76]	; 0x4c
   207d4:	ldr	r2, [r7, #716]	; 0x2cc
   207d8:	bl	12618 <fprintf@plt>
   207dc:	add	r1, sp, #36	; 0x24
   207e0:	add	r0, sp, #104	; 0x68
   207e4:	bl	264e8 <flatcc_builder_finalize_aligned_buffer@@Base>
   207e8:	ldr	r7, [fp]
   207ec:	movw	r2, #56440	; 0xdc78
   207f0:	movt	r2, #2
   207f4:	movw	r1, #56472	; 0xdc98
   207f8:	movt	r1, #2
   207fc:	str	r0, [sp, #8]
   20800:	ldr	r6, [sp, #36]	; 0x24
   20804:	mov	r0, r7
   20808:	bl	12618 <fprintf@plt>
   2080c:	cmp	r6, #0
   20810:	beq	208e8 <test_parse@@Base+0x318>
   20814:	movw	r3, #56572	; 0xdcfc
   20818:	movt	r3, #2
   2081c:	str	r3, [sp, #16]
   20820:	movw	r3, #56480	; 0xdca0
   20824:	movt	r3, #2
   20828:	str	r3, [sp, #20]
   2082c:	movw	r3, #56580	; 0xdd04
   20830:	movt	r3, #2
   20834:	str	r3, [sp, #24]
   20838:	ldr	r3, [sp, #8]
   2083c:	sub	sl, r3, #1
   20840:	ands	r8, r5, #15
   20844:	bne	20a20 <test_parse@@Base+0x450>
   20848:	cmp	r5, #0
   2084c:	add	r2, sp, #40	; 0x28
   20850:	ldr	r1, [sp, #20]
   20854:	mov	r0, r7
   20858:	beq	20860 <test_parse@@Base+0x290>
   2085c:	bl	12618 <fprintf@plt>
   20860:	mov	r2, r5
   20864:	mov	r0, r7
   20868:	ldr	r1, [sp, #16]
   2086c:	bl	12618 <fprintf@plt>
   20870:	ldrb	r2, [sl, #1]!
   20874:	mov	r0, r7
   20878:	add	r5, r5, #1
   2087c:	ldr	r1, [sp, #24]
   20880:	bl	12618 <fprintf@plt>
   20884:	add	r3, sp, #336	; 0x150
   20888:	mov	ip, #46	; 0x2e
   2088c:	add	r2, r3, r8
   20890:	ldrb	r3, [sl]
   20894:	mov	r0, #0
   20898:	mov	r8, r2
   2089c:	sub	lr, r3, #32
   208a0:	cmp	lr, #94	; 0x5e
   208a4:	bls	20a08 <test_parse@@Base+0x438>
   208a8:	cmp	r6, r5
   208ac:	strb	ip, [r2, #-296]	; 0xfffffed8
   208b0:	strb	r0, [r2, #-295]	; 0xfffffed9
   208b4:	bne	20840 <test_parse@@Base+0x270>
   208b8:	tst	r6, #15
   208bc:	beq	208e8 <test_parse@@Base+0x318>
   208c0:	movw	r5, #56588	; 0xdd0c
   208c4:	movt	r5, #2
   208c8:	add	r6, r6, #1
   208cc:	mov	r3, r7
   208d0:	mov	r2, #3
   208d4:	mov	r1, #1
   208d8:	mov	r0, r5
   208dc:	bl	125c4 <fwrite@plt>
   208e0:	tst	r6, #15
   208e4:	bne	208c8 <test_parse@@Base+0x2f8>
   208e8:	add	r2, sp, #40	; 0x28
   208ec:	mov	r0, r7
   208f0:	movw	r1, #56480	; 0xdca0
   208f4:	movt	r1, #2
   208f8:	bl	12618 <fprintf@plt>
   208fc:	ldr	r0, [sp, #28]
   20900:	mov	r2, r9
   20904:	movw	r1, #56488	; 0xdca8
   20908:	movt	r1, #2
   2090c:	ldr	r3, [sp, #36]	; 0x24
   20910:	ldr	r0, [r0]
   20914:	bl	12618 <fprintf@plt>
   20918:	ldr	r0, [sp, #8]
   2091c:	bl	203dc <verify_parse@@Base>
   20920:	ldr	r5, [fp]
   20924:	movw	r2, #56464	; 0xdc90
   20928:	movt	r2, #2
   2092c:	movw	r1, #56524	; 0xdccc
   20930:	movt	r1, #2
   20934:	ldr	r6, [sp, #36]	; 0x24
   20938:	mov	r0, r5
   2093c:	bl	12618 <fprintf@plt>
   20940:	cmp	r6, #0
   20944:	beq	20a38 <test_parse@@Base+0x468>
   20948:	ldr	r3, [sp, #8]
   2094c:	sub	r6, r6, #1
   20950:	movw	sl, #56588	; 0xdd0c
   20954:	movt	sl, #2
   20958:	movw	r9, #56600	; 0xdd18
   2095c:	movt	r9, #2
   20960:	movw	r8, #56608	; 0xdd20
   20964:	movt	r8, #2
   20968:	add	r6, r6, r3
   2096c:	sub	r7, r3, #1
   20970:	rsb	fp, r3, #1
   20974:	b	20998 <test_parse@@Base+0x3c8>
   20978:	tst	r3, #7
   2097c:	beq	209f0 <test_parse@@Base+0x420>
   20980:	ldrb	r2, [r7, #1]!
   20984:	mov	r1, r8
   20988:	mov	r0, r5
   2098c:	bl	12618 <fprintf@plt>
   20990:	cmp	r6, r7
   20994:	beq	20a38 <test_parse@@Base+0x468>
   20998:	add	r3, fp, r7
   2099c:	tst	r3, #15
   209a0:	bne	20978 <test_parse@@Base+0x3a8>
   209a4:	mov	r3, r5
   209a8:	mov	r2, #4
   209ac:	mov	r1, #1
   209b0:	mov	r0, r9
   209b4:	bl	125c4 <fwrite@plt>
   209b8:	b	20980 <test_parse@@Base+0x3b0>
   209bc:	bl	12654 <fclose@plt>
   209c0:	mov	r0, r4
   209c4:	bl	1257c <free@plt>
   209c8:	movw	r3, #952	; 0x3b8
   209cc:	movt	r3, #4
   209d0:	ldr	r2, [r7, #716]	; 0x2cc
   209d4:	movw	r1, #56368	; 0xdc30
   209d8:	movt	r1, #2
   209dc:	ldr	r0, [r3]
   209e0:	mvn	r3, #0
   209e4:	str	r3, [sp, #12]
   209e8:	bl	12618 <fprintf@plt>
   209ec:	b	20774 <test_parse@@Base+0x1a4>
   209f0:	mov	r3, r5
   209f4:	mov	r2, #3
   209f8:	mov	r1, #1
   209fc:	mov	r0, sl
   20a00:	bl	125c4 <fwrite@plt>
   20a04:	b	20980 <test_parse@@Base+0x3b0>
   20a08:	cmp	r6, r5
   20a0c:	strb	r3, [r2, #-296]	; 0xfffffed8
   20a10:	strb	r0, [r8, #-295]	; 0xfffffed9
   20a14:	beq	208b8 <test_parse@@Base+0x2e8>
   20a18:	ands	r8, r5, #15
   20a1c:	beq	20848 <test_parse@@Base+0x278>
   20a20:	tst	r5, #7
   20a24:	bne	20870 <test_parse@@Base+0x2a0>
   20a28:	mov	r1, r7
   20a2c:	mov	r0, #32
   20a30:	bl	12660 <fputc@plt>
   20a34:	b	20870 <test_parse@@Base+0x2a0>
   20a38:	mov	r3, r5
   20a3c:	mov	r2, #4
   20a40:	mov	r1, #1
   20a44:	movw	r0, #56592	; 0xdd10
   20a48:	movt	r0, #2
   20a4c:	bl	125c4 <fwrite@plt>
   20a50:	add	r0, sp, #104	; 0x68
   20a54:	bl	212a0 <flatcc_builder_reset@@Base>
   20a58:	ldr	r3, [sp, #8]
   20a5c:	cmp	r3, #0
   20a60:	beq	20764 <test_parse@@Base+0x194>
   20a64:	mov	r0, r3
   20a68:	bl	26618 <flatcc_builder_aligned_free@@Base>
   20a6c:	b	20764 <test_parse@@Base+0x194>
   20a70:	bl	12654 <fclose@plt>
   20a74:	b	209c8 <test_parse@@Base+0x3f8>
   20a78:	mov	r0, r6
   20a7c:	bl	12654 <fclose@plt>
   20a80:	b	209c8 <test_parse@@Base+0x3f8>
   20a84:	ldr	r3, [sp, #84]	; 0x54
   20a88:	str	r3, [sp, #12]
   20a8c:	b	20710 <test_parse@@Base+0x140>

00020a90 <flatcc_builder_default_alloc@@Base>:
   20a90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20a94:	subs	r5, r2, #0
   20a98:	strd	r6, [sp, #8]
   20a9c:	mov	r6, r1
   20aa0:	str	r8, [sp, #16]
   20aa4:	str	lr, [sp, #20]
   20aa8:	beq	20ae0 <flatcc_builder_default_alloc@@Base+0x50>
   20aac:	mov	r7, r3
   20ab0:	ldr	r3, [sp, #24]
   20ab4:	sub	r2, r3, #1
   20ab8:	cmp	r2, #6
   20abc:	ldrls	pc, [pc, r2, lsl #2]
   20ac0:	b	20b90 <flatcc_builder_default_alloc@@Base+0x100>
   20ac4:	andeq	r0, r2, r0, lsl fp
   20ac8:	muleq	r2, r0, fp
   20acc:	muleq	r2, r0, fp
   20ad0:	andeq	r0, r2, r8, lsl #23
   20ad4:	andeq	r0, r2, r8, ror fp
   20ad8:	muleq	r2, r0, fp
   20adc:	andeq	r0, r2, r0, lsl #23
   20ae0:	ldr	r0, [r1]
   20ae4:	cmp	r0, #0
   20ae8:	beq	20afc <flatcc_builder_default_alloc@@Base+0x6c>
   20aec:	bl	1257c <free@plt>
   20af0:	mov	r0, r5
   20af4:	str	r5, [r6]
   20af8:	str	r5, [r6, #4]
   20afc:	ldrd	r4, [sp]
   20b00:	ldrd	r6, [sp, #8]
   20b04:	ldr	r8, [sp, #16]
   20b08:	add	sp, sp, #20
   20b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   20b10:	mov	r4, #256	; 0x100
   20b14:	cmp	r4, r5
   20b18:	bcs	20b28 <flatcc_builder_default_alloc@@Base+0x98>
   20b1c:	lsl	r4, r4, #1
   20b20:	cmp	r5, r4
   20b24:	bhi	20b1c <flatcc_builder_default_alloc@@Base+0x8c>
   20b28:	ldr	r2, [r6, #4]
   20b2c:	cmp	r5, r2
   20b30:	bhi	20b40 <flatcc_builder_default_alloc@@Base+0xb0>
   20b34:	cmp	r4, r2, lsr #1
   20b38:	movls	r0, #0
   20b3c:	bls	20afc <flatcc_builder_default_alloc@@Base+0x6c>
   20b40:	mov	r1, r4
   20b44:	ldr	r0, [r6]
   20b48:	bl	125b8 <realloc@plt>
   20b4c:	subs	r5, r0, #0
   20b50:	beq	20bac <flatcc_builder_default_alloc@@Base+0x11c>
   20b54:	cmp	r7, #0
   20b58:	beq	20b68 <flatcc_builder_default_alloc@@Base+0xd8>
   20b5c:	ldr	r0, [r6, #4]
   20b60:	cmp	r0, r4
   20b64:	bcc	20b98 <flatcc_builder_default_alloc@@Base+0x108>
   20b68:	mov	r0, #0
   20b6c:	str	r5, [r6]
   20b70:	str	r4, [r6, #4]
   20b74:	b	20afc <flatcc_builder_default_alloc@@Base+0x6c>
   20b78:	mov	r4, r5
   20b7c:	b	20b28 <flatcc_builder_default_alloc@@Base+0x98>
   20b80:	mov	r4, #64	; 0x40
   20b84:	b	20b14 <flatcc_builder_default_alloc@@Base+0x84>
   20b88:	mov	r4, #288	; 0x120
   20b8c:	b	20b14 <flatcc_builder_default_alloc@@Base+0x84>
   20b90:	mov	r4, #32
   20b94:	b	20b14 <flatcc_builder_default_alloc@@Base+0x84>
   20b98:	sub	r2, r4, r0
   20b9c:	mov	r1, #0
   20ba0:	add	r0, r5, r0
   20ba4:	bl	12630 <memset@plt>
   20ba8:	b	20b68 <flatcc_builder_default_alloc@@Base+0xd8>
   20bac:	mvn	r0, #0
   20bb0:	b	20afc <flatcc_builder_default_alloc@@Base+0x6c>
   20bb4:	movw	r3, #56728	; 0xdd98
   20bb8:	movt	r3, #2
   20bbc:	str	r4, [sp, #-8]!
   20bc0:	movw	r1, #58600	; 0xe4e8
   20bc4:	movt	r1, #2
   20bc8:	str	lr, [sp, #4]
   20bcc:	movw	r0, #58792	; 0xe5a8
   20bd0:	movt	r0, #2
   20bd4:	mov	r2, #308	; 0x134
   20bd8:	bl	12684 <__assert_fail@plt>
   20bdc:	movw	r1, #58600	; 0xe4e8
   20be0:	movt	r1, #2
   20be4:	ldr	r3, [pc, #20]	; 20c00 <flatcc_builder_default_alloc@@Base+0x170>
   20be8:	movw	r0, #58792	; 0xe5a8
   20bec:	movt	r0, #2
   20bf0:	str	r4, [sp, #-8]!
   20bf4:	movw	r2, #677	; 0x2a5
   20bf8:	str	lr, [sp, #4]
   20bfc:	bl	12684 <__assert_fail@plt>
   20c00:	andeq	sp, r2, r8, lsr #27
   20c04:	movw	r1, #58600	; 0xe4e8
   20c08:	movt	r1, #2
   20c0c:	ldr	r3, [pc, #20]	; 20c28 <flatcc_builder_default_alloc@@Base+0x198>
   20c10:	movw	r0, #58792	; 0xe5a8
   20c14:	movt	r0, #2
   20c18:	str	r4, [sp, #-8]!
   20c1c:	movw	r2, #702	; 0x2be
   20c20:	str	lr, [sp, #4]
   20c24:	bl	12684 <__assert_fail@plt>
   20c28:			; <UNDEFINED> instruction: 0x0002ddb4
   20c2c:	movw	r1, #58600	; 0xe4e8
   20c30:	movt	r1, #2
   20c34:	ldr	r3, [pc, #20]	; 20c50 <flatcc_builder_default_alloc@@Base+0x1c0>
   20c38:	movw	r0, #58792	; 0xe5a8
   20c3c:	movt	r0, #2
   20c40:	str	r4, [sp, #-8]!
   20c44:	movw	r2, #651	; 0x28b
   20c48:	str	lr, [sp, #4]
   20c4c:	bl	12684 <__assert_fail@plt>
   20c50:	andeq	sp, r2, r4, asr #27
   20c54:	movw	r1, #58600	; 0xe4e8
   20c58:	movt	r1, #2
   20c5c:	ldr	r3, [pc, #20]	; 20c78 <flatcc_builder_default_alloc@@Base+0x1e8>
   20c60:	movw	r0, #58672	; 0xe530
   20c64:	movt	r0, #2
   20c68:	str	r4, [sp, #-8]!
   20c6c:	mov	r2, #892	; 0x37c
   20c70:	str	lr, [sp, #4]
   20c74:	bl	12684 <__assert_fail@plt>
   20c78:	ldrdeq	sp, [r2], -r0
   20c7c:	movw	r1, #58600	; 0xe4e8
   20c80:	movt	r1, #2
   20c84:	ldr	r3, [pc, #20]	; 20ca0 <flatcc_builder_default_alloc@@Base+0x210>
   20c88:	movw	r0, #58700	; 0xe54c
   20c8c:	movt	r0, #2
   20c90:	str	r4, [sp, #-8]!
   20c94:	movw	r2, #542	; 0x21e
   20c98:	str	lr, [sp, #4]
   20c9c:	bl	12684 <__assert_fail@plt>
   20ca0:	andeq	sp, r2, r4, ror #27
   20ca4:	movw	r1, #58600	; 0xe4e8
   20ca8:	movt	r1, #2
   20cac:	ldr	r3, [pc, #20]	; 20cc8 <flatcc_builder_default_alloc@@Base+0x238>
   20cb0:	movw	r0, #58728	; 0xe568
   20cb4:	movt	r0, #2
   20cb8:	str	r4, [sp, #-8]!
   20cbc:	movw	r2, #966	; 0x3c6
   20cc0:	str	lr, [sp, #4]
   20cc4:	bl	12684 <__assert_fail@plt>
   20cc8:	andeq	sp, r2, r4, lsl #28
   20ccc:	movw	r1, #58600	; 0xe4e8
   20cd0:	movt	r1, #2
   20cd4:	ldr	r3, [pc, #20]	; 20cf0 <flatcc_builder_default_alloc@@Base+0x260>
   20cd8:	movw	r0, #58772	; 0xe594
   20cdc:	movt	r0, #2
   20ce0:	str	r4, [sp, #-8]!
   20ce4:	movw	r2, #1926	; 0x786
   20ce8:	str	lr, [sp, #4]
   20cec:	bl	12684 <__assert_fail@plt>
   20cf0:	andeq	sp, r2, r4, lsr #28
   20cf4:	ldrd	r2, [r0, #156]	; 0x9c
   20cf8:	strd	r4, [sp, #-20]!	; 0xffffffec
   20cfc:	mov	r5, r1
   20d00:	mov	r4, r0
   20d04:	strd	r6, [sp, #8]
   20d08:	str	lr, [sp, #16]
   20d0c:	sub	sp, sp, #12
   20d10:	add	r1, r2, #1
   20d14:	cmp	r1, r3
   20d18:	str	r1, [r0, #156]	; 0x9c
   20d1c:	ble	20dfc <flatcc_builder_default_alloc@@Base+0x36c>
   20d20:	ldr	r3, [r0, #176]	; 0xb0
   20d24:	cmp	r1, r3
   20d28:	cmpgt	r3, #0
   20d2c:	movgt	r3, #1
   20d30:	movle	r3, #0
   20d34:	bgt	20e0c <flatcc_builder_default_alloc@@Base+0x37c>
   20d38:	add	r2, r2, r2, lsl #3
   20d3c:	ldr	r1, [r0, #88]	; 0x58
   20d40:	lsl	r6, r2, #2
   20d44:	add	r2, r6, #36	; 0x24
   20d48:	cmp	r2, r1
   20d4c:	bls	20d70 <flatcc_builder_default_alloc@@Base+0x2e0>
   20d50:	mov	ip, #4
   20d54:	add	r1, r0, #84	; 0x54
   20d58:	ldr	r0, [r0, #40]	; 0x28
   20d5c:	str	ip, [sp]
   20d60:	ldr	r7, [r4, #48]	; 0x30
   20d64:	blx	r7
   20d68:	cmp	r0, #0
   20d6c:	bne	20e14 <flatcc_builder_default_alloc@@Base+0x384>
   20d70:	ldr	r2, [r4, #84]	; 0x54
   20d74:	add	r2, r2, r6
   20d78:	cmp	r2, #0
   20d7c:	str	r2, [r4, #32]
   20d80:	beq	20e0c <flatcc_builder_default_alloc@@Base+0x37c>
   20d84:	ldr	r3, [r4, #88]	; 0x58
   20d88:	movw	r0, #36409	; 0x8e39
   20d8c:	movt	r0, #14563	; 0x38e3
   20d90:	ldr	r1, [r4, #176]	; 0xb0
   20d94:	umull	r0, r3, r0, r3
   20d98:	lsr	r3, r3, #3
   20d9c:	cmp	r3, r1
   20da0:	cmpgt	r1, #0
   20da4:	movgt	r3, r1
   20da8:	str	r3, [r4, #160]	; 0xa0
   20dac:	ldr	r3, [r4, #20]
   20db0:	mov	r1, #0
   20db4:	mvn	lr, #3
   20db8:	mov	r0, r1
   20dbc:	ldr	ip, [r4, #28]
   20dc0:	ldrh	r6, [r4, #130]	; 0x82
   20dc4:	str	r3, [r2, #8]
   20dc8:	add	r3, r3, ip
   20dcc:	add	r3, r3, #7
   20dd0:	bic	r3, r3, #7
   20dd4:	strh	r6, [r2, #12]
   20dd8:	strh	r5, [r4, #130]	; 0x82
   20ddc:	stm	r2, {ip, lr}
   20de0:	str	r1, [r4, #20]
   20de4:	str	r3, [r4, #28]
   20de8:	add	sp, sp, #12
   20dec:	ldrd	r4, [sp]
   20df0:	ldrd	r6, [sp, #8]
   20df4:	add	sp, sp, #16
   20df8:	pop	{pc}		; (ldr pc, [sp], #4)
   20dfc:	ldr	r2, [r0, #32]
   20e00:	add	r2, r2, #36	; 0x24
   20e04:	str	r2, [r0, #32]
   20e08:	b	20dac <flatcc_builder_default_alloc@@Base+0x31c>
   20e0c:	mvn	r0, #0
   20e10:	b	20de8 <flatcc_builder_default_alloc@@Base+0x358>
   20e14:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>
   20e18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20e1c:	mov	r4, r0
   20e20:	ldrh	r0, [r0, #128]	; 0x80
   20e24:	strd	r6, [sp, #8]
   20e28:	mov	r6, #4
   20e2c:	ldr	r5, [r4, #136]	; 0x88
   20e30:	str	lr, [sp, #20]
   20e34:	mov	lr, r2
   20e38:	str	r8, [sp, #16]
   20e3c:	sub	sp, sp, #88	; 0x58
   20e40:	cmp	r0, #3
   20e44:	add	r0, sp, #12
   20e48:	movls	r2, #4
   20e4c:	str	lr, [sp, #12]
   20e50:	str	r6, [sp, #16]
   20e54:	strhls	r2, [r4, #128]	; 0x80
   20e58:	mov	r2, #1
   20e5c:	lsls	ip, lr, #2
   20e60:	moveq	r7, #2
   20e64:	str	r2, [sp, #20]
   20e68:	str	r0, [sp, #24]
   20e6c:	and	r0, r5, #3
   20e70:	str	r6, [sp, #28]
   20e74:	beq	20e98 <flatcc_builder_default_alloc@@Base+0x408>
   20e78:	mov	r8, #2
   20e7c:	add	r6, ip, r6
   20e80:	mov	r2, r8
   20e84:	mov	r7, #3
   20e88:	str	r6, [sp, #16]
   20e8c:	str	r8, [sp, #20]
   20e90:	str	r1, [sp, #32]
   20e94:	str	ip, [sp, #36]	; 0x24
   20e98:	cmp	r0, #0
   20e9c:	beq	20ec4 <flatcc_builder_default_alloc@@Base+0x434>
   20ea0:	ldr	r8, [pc, #360]	; 21010 <flatcc_builder_default_alloc@@Base+0x580>
   20ea4:	add	r2, r2, #1
   20ea8:	add	ip, sp, #88	; 0x58
   20eac:	add	ip, ip, r2, lsl #3
   20eb0:	add	r6, r6, r0
   20eb4:	mov	r2, r7
   20eb8:	strd	r6, [sp, #16]
   20ebc:	str	r8, [ip, #-72]	; 0xffffffb8
   20ec0:	str	r0, [ip, #-68]	; 0xffffffbc
   20ec4:	cmp	lr, #0
   20ec8:	beq	20f58 <flatcc_builder_default_alloc@@Base+0x4c8>
   20ecc:	cmp	r3, #0
   20ed0:	subne	r5, r1, r5
   20ed4:	addne	lr, r3, lr
   20ed8:	addne	r5, r5, r6
   20edc:	bne	20f08 <flatcc_builder_default_alloc@@Base+0x478>
   20ee0:	b	20fc0 <flatcc_builder_default_alloc@@Base+0x530>
   20ee4:	sub	ip, r5, r1
   20ee8:	add	r0, ip, r0
   20eec:	str	r0, [r1, #-4]
   20ef0:	ldrb	r0, [r3]
   20ef4:	cmp	r0, #0
   20ef8:	beq	20fa4 <flatcc_builder_default_alloc@@Base+0x514>
   20efc:	add	r3, r3, #1
   20f00:	cmp	r3, lr
   20f04:	beq	20f54 <flatcc_builder_default_alloc@@Base+0x4c4>
   20f08:	ldr	r0, [r1], #4
   20f0c:	cmp	r0, #0
   20f10:	bne	20ee4 <flatcc_builder_default_alloc@@Base+0x454>
   20f14:	ldrb	r0, [r3]
   20f18:	cmp	r0, #0
   20f1c:	beq	20efc <flatcc_builder_default_alloc@@Base+0x46c>
   20f20:	movw	r1, #58600	; 0xe4e8
   20f24:	movt	r1, #2
   20f28:	ldr	r3, [pc, #228]	; 21014 <flatcc_builder_default_alloc@@Base+0x584>
   20f2c:	movw	r0, #58796	; 0xe5ac
   20f30:	movt	r0, #2
   20f34:	movw	r2, #1461	; 0x5b5
   20f38:	bl	12684 <__assert_fail@plt>
   20f3c:	sub	r0, ip, r1
   20f40:	add	r3, r3, #1
   20f44:	add	r0, r0, r5
   20f48:	cmp	lr, r3
   20f4c:	str	r0, [r1, #-4]
   20f50:	bne	20fc8 <flatcc_builder_default_alloc@@Base+0x538>
   20f54:	ldr	r5, [r4, #136]	; 0x88
   20f58:	sub	r7, r5, r6
   20f5c:	cmp	r7, r5
   20f60:	bge	20ff4 <flatcc_builder_default_alloc@@Base+0x564>
   20f64:	mov	r3, r7
   20f68:	add	r1, sp, #24
   20f6c:	str	r6, [sp]
   20f70:	ldr	r0, [r4, #36]	; 0x24
   20f74:	ldr	r5, [r4, #44]	; 0x2c
   20f78:	blx	r5
   20f7c:	cmp	r0, #0
   20f80:	bne	20ff0 <flatcc_builder_default_alloc@@Base+0x560>
   20f84:	mov	r0, r7
   20f88:	str	r7, [r4, #136]	; 0x88
   20f8c:	add	sp, sp, #88	; 0x58
   20f90:	ldrd	r4, [sp]
   20f94:	ldrd	r6, [sp, #8]
   20f98:	ldr	r8, [sp, #16]
   20f9c:	add	sp, sp, #20
   20fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   20fa4:	movw	r1, #58600	; 0xe4e8
   20fa8:	movt	r1, #2
   20fac:	ldr	r3, [pc, #96]	; 21014 <flatcc_builder_default_alloc@@Base+0x584>
   20fb0:	movw	r0, #58780	; 0xe59c
   20fb4:	movt	r0, #2
   20fb8:	movw	r2, #1457	; 0x5b1
   20fbc:	bl	12684 <__assert_fail@plt>
   20fc0:	sub	ip, r1, r5
   20fc4:	add	ip, ip, r6
   20fc8:	ldr	r5, [r1], #4
   20fcc:	cmp	r5, #0
   20fd0:	bne	20f3c <flatcc_builder_default_alloc@@Base+0x4ac>
   20fd4:	movw	r1, #58600	; 0xe4e8
   20fd8:	movt	r1, #2
   20fdc:	ldr	r3, [pc, #48]	; 21014 <flatcc_builder_default_alloc@@Base+0x584>
   20fe0:	movw	r0, #58792	; 0xe5a8
   20fe4:	movt	r0, #2
   20fe8:	movw	r2, #1463	; 0x5b7
   20fec:	bl	12684 <__assert_fail@plt>
   20ff0:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   20ff4:	movw	r1, #58600	; 0xe4e8
   20ff8:	movt	r1, #2
   20ffc:	ldr	r3, [pc, #20]	; 21018 <flatcc_builder_default_alloc@@Base+0x588>
   21000:	movw	r0, #58792	; 0xe5a8
   21004:	movt	r0, #2
   21008:	movw	r2, #647	; 0x287
   2100c:	bl	12684 <__assert_fail@plt>
   21010:	andeq	sp, r2, r0, asr #28
   21014:	andeq	lr, r2, r0, asr #32
   21018:	andeq	sp, r2, r4, asr #27

0002101c <flatcc_builder_flush_vtable_cache@@Base>:
   2101c:	ldr	r3, [r0, #116]	; 0x74
   21020:	cmp	r3, #0
   21024:	bxeq	lr
   21028:	str	r4, [sp, #-8]!
   2102c:	mov	r4, r0
   21030:	mov	r1, #0
   21034:	ldr	r0, [r0, #92]	; 0x5c
   21038:	ldr	r2, [r4, #96]	; 0x60
   2103c:	str	lr, [sp, #4]
   21040:	bl	12630 <memset@plt>
   21044:	mov	r3, #16
   21048:	mov	r2, #0
   2104c:	strd	r2, [r4, #120]	; 0x78
   21050:	ldr	r4, [sp]
   21054:	add	sp, sp, #4
   21058:	pop	{pc}		; (ldr pc, [sp], #4)

0002105c <flatcc_builder_custom_init@@Base>:
   2105c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21060:	mov	r5, r3
   21064:	mov	r4, r0
   21068:	strd	r6, [sp, #8]
   2106c:	mov	r6, r1
   21070:	mov	r7, r2
   21074:	mov	r1, #0
   21078:	mov	r2, #232	; 0xe8
   2107c:	str	r8, [sp, #16]
   21080:	str	lr, [sp, #20]
   21084:	ldr	r8, [sp, #24]
   21088:	bl	12630 <memset@plt>
   2108c:	cmp	r6, #0
   21090:	beq	210cc <flatcc_builder_custom_init@@Base+0x70>
   21094:	cmp	r5, #0
   21098:	movw	r3, #2704	; 0xa90
   2109c:	movt	r3, #2
   210a0:	str	r7, [r4, #36]	; 0x24
   210a4:	mov	r0, #0
   210a8:	moveq	r5, r3
   210ac:	str	r8, [r4, #40]	; 0x28
   210b0:	str	r6, [r4, #44]	; 0x2c
   210b4:	str	r5, [r4, #48]	; 0x30
   210b8:	ldrd	r4, [sp]
   210bc:	ldrd	r6, [sp, #8]
   210c0:	ldr	r8, [sp, #16]
   210c4:	add	sp, sp, #20
   210c8:	pop	{pc}		; (ldr pc, [sp], #4)
   210cc:	mov	r3, #1
   210d0:	movw	r6, #26572	; 0x67cc
   210d4:	movt	r6, #2
   210d8:	add	r7, r4, #188	; 0xbc
   210dc:	str	r3, [r4, #184]	; 0xb8
   210e0:	b	21094 <flatcc_builder_custom_init@@Base+0x38>

000210e4 <flatcc_builder_init@@Base>:
   210e4:	mov	r2, #232	; 0xe8
   210e8:	mov	r1, #0
   210ec:	str	r4, [sp, #-8]!
   210f0:	str	lr, [sp, #4]
   210f4:	bl	12630 <memset@plt>
   210f8:	mov	r3, r0
   210fc:	movw	r2, #2704	; 0xa90
   21100:	movt	r2, #2
   21104:	mov	r0, #1
   21108:	ldr	r4, [sp]
   2110c:	add	ip, r3, #188	; 0xbc
   21110:	movw	r1, #26572	; 0x67cc
   21114:	movt	r1, #2
   21118:	add	sp, sp, #4
   2111c:	str	ip, [r3, #36]	; 0x24
   21120:	str	r1, [r3, #44]	; 0x2c
   21124:	str	r2, [r3, #48]	; 0x30
   21128:	str	r0, [r3, #184]	; 0xb8
   2112c:	mov	r0, #0
   21130:	pop	{pc}		; (ldr pc, [sp], #4)

00021134 <flatcc_builder_custom_reset@@Base>:
   21134:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21138:	mov	r5, #0
   2113c:	mov	r4, r0
   21140:	strd	r6, [sp, #8]
   21144:	mov	r6, r0
   21148:	strd	r8, [sp, #16]
   2114c:	mov	r8, r1
   21150:	mov	r9, r2
   21154:	str	lr, [sp, #24]
   21158:	sub	sp, sp, #12
   2115c:	b	211ac <flatcc_builder_custom_reset@@Base+0x78>
   21160:	cmp	r5, #5
   21164:	cmpne	r9, #0
   21168:	beq	21190 <flatcc_builder_custom_reset@@Base+0x5c>
   2116c:	mov	r3, #1
   21170:	str	r5, [sp]
   21174:	mov	r2, r3
   21178:	ldr	r0, [r6, #40]	; 0x28
   2117c:	ldr	r7, [r6, #48]	; 0x30
   21180:	blx	r7
   21184:	cmp	r0, #0
   21188:	bne	21294 <flatcc_builder_custom_reset@@Base+0x160>
   2118c:	ldr	r0, [r4, #52]	; 0x34
   21190:	mov	r1, #0
   21194:	ldr	r2, [r4, #56]	; 0x38
   21198:	bl	12630 <memset@plt>
   2119c:	add	r5, r5, #1
   211a0:	add	r4, r4, #8
   211a4:	cmp	r5, #8
   211a8:	beq	211e4 <flatcc_builder_custom_reset@@Base+0xb0>
   211ac:	ldr	r0, [r4, #52]	; 0x34
   211b0:	add	r1, r4, #52	; 0x34
   211b4:	cmp	r0, #0
   211b8:	bne	21160 <flatcc_builder_custom_reset@@Base+0x2c>
   211bc:	ldr	r3, [r4, #56]	; 0x38
   211c0:	cmp	r3, #0
   211c4:	beq	2119c <flatcc_builder_custom_reset@@Base+0x68>
   211c8:	movw	r1, #58600	; 0xe4e8
   211cc:	movt	r1, #2
   211d0:	ldr	r3, [pc, #196]	; 2129c <flatcc_builder_custom_reset@@Base+0x168>
   211d4:	movw	r0, #58812	; 0xe5bc
   211d8:	movt	r0, #2
   211dc:	movw	r2, #434	; 0x1b2
   211e0:	bl	12684 <__assert_fail@plt>
   211e4:	mov	r2, #0
   211e8:	ldr	r0, [r6, #52]	; 0x34
   211ec:	ldr	r3, [r6, #124]	; 0x7c
   211f0:	ldr	r1, [r6, #60]	; 0x3c
   211f4:	str	r0, [r6, #4]
   211f8:	str	r2, [r6, #120]	; 0x78
   211fc:	cmp	r3, r2
   21200:	ldr	r2, [r6, #76]	; 0x4c
   21204:	movne	r3, #16
   21208:	strne	r3, [r6, #124]	; 0x7c
   2120c:	mov	r3, #0
   21210:	cmp	r8, r3
   21214:	str	r2, [r6]
   21218:	str	r1, [r6, #16]
   2121c:	str	r3, [r6, #20]
   21220:	str	r3, [r6, #24]
   21224:	str	r3, [r6, #32]
   21228:	strh	r3, [r6, #128]	; 0x80
   2122c:	str	r3, [r6, #136]	; 0x88
   21230:	str	r3, [r6, #140]	; 0x8c
   21234:	str	r3, [r6, #148]	; 0x94
   21238:	str	r3, [r6, #152]	; 0x98
   2123c:	str	r3, [r6, #156]	; 0x9c
   21240:	str	r3, [r6, #160]	; 0xa0
   21244:	bne	2126c <flatcc_builder_custom_reset@@Base+0x138>
   21248:	ldr	r0, [r6, #184]	; 0xb8
   2124c:	cmp	r0, #0
   21250:	bne	21284 <flatcc_builder_custom_reset@@Base+0x150>
   21254:	add	sp, sp, #12
   21258:	ldrd	r4, [sp]
   2125c:	ldrd	r6, [sp, #8]
   21260:	ldrd	r8, [sp, #16]
   21264:	add	sp, sp, #24
   21268:	pop	{pc}		; (ldr pc, [sp], #4)
   2126c:	ldr	r0, [r6, #184]	; 0xb8
   21270:	str	r3, [r6, #172]	; 0xac
   21274:	str	r3, [r6, #176]	; 0xb0
   21278:	str	r3, [r6, #180]	; 0xb4
   2127c:	cmp	r0, #0
   21280:	beq	21254 <flatcc_builder_custom_reset@@Base+0x120>
   21284:	add	r0, r6, #188	; 0xbc
   21288:	bl	26678 <flatcc_emitter_reset@@Base>
   2128c:	mov	r0, #0
   21290:	b	21254 <flatcc_builder_custom_reset@@Base+0x120>
   21294:	mvn	r0, #0
   21298:	b	21254 <flatcc_builder_custom_reset@@Base+0x120>
   2129c:	andeq	lr, r2, r0, rrx

000212a0 <flatcc_builder_reset@@Base>:
   212a0:	mov	r2, #0
   212a4:	mov	r1, r2
   212a8:	b	21134 <flatcc_builder_custom_reset@@Base>

000212ac <flatcc_builder_clear@@Base>:
   212ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   212b0:	mov	r4, #0
   212b4:	add	r5, r0, #52	; 0x34
   212b8:	strd	r6, [sp, #8]
   212bc:	mov	r6, r0
   212c0:	str	lr, [sp, #16]
   212c4:	sub	sp, sp, #12
   212c8:	mov	r3, #0
   212cc:	mov	r1, r5
   212d0:	str	r4, [sp]
   212d4:	mov	r2, r3
   212d8:	add	r4, r4, #1
   212dc:	ldr	r0, [r6, #40]	; 0x28
   212e0:	add	r5, r5, #8
   212e4:	ldr	r7, [r6, #48]	; 0x30
   212e8:	blx	r7
   212ec:	cmp	r4, #8
   212f0:	bne	212c8 <flatcc_builder_clear@@Base+0x1c>
   212f4:	ldr	r3, [r6, #184]	; 0xb8
   212f8:	cmp	r3, #0
   212fc:	bne	21324 <flatcc_builder_clear@@Base+0x78>
   21300:	mov	r0, r6
   21304:	mov	r2, #232	; 0xe8
   21308:	mov	r1, #0
   2130c:	add	sp, sp, #12
   21310:	ldrd	r4, [sp]
   21314:	ldrd	r6, [sp, #8]
   21318:	ldr	lr, [sp, #16]
   2131c:	add	sp, sp, #20
   21320:	b	12630 <memset@plt>
   21324:	add	r0, r6, #188	; 0xbc
   21328:	bl	2674c <flatcc_emitter_clear@@Base>
   2132c:	b	21300 <flatcc_builder_clear@@Base+0x54>

00021330 <flatcc_builder_enter_user_frame_ptr@@Base>:
   21330:	strd	r4, [sp, #-20]!	; 0xffffffec
   21334:	add	r4, r1, #3
   21338:	mov	r5, r0
   2133c:	ldr	r3, [r0, #112]	; 0x70
   21340:	bic	r4, r4, #3
   21344:	strd	r6, [sp, #8]
   21348:	add	r4, r4, #4
   2134c:	ldr	r6, [r0, #228]	; 0xe4
   21350:	str	lr, [sp, #16]
   21354:	sub	sp, sp, #12
   21358:	add	r2, r6, r4
   2135c:	cmp	r2, r3
   21360:	bls	21388 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   21364:	mov	ip, #7
   21368:	add	r1, r0, #108	; 0x6c
   2136c:	ldr	r0, [r0, #40]	; 0x28
   21370:	mov	r3, #0
   21374:	str	ip, [sp]
   21378:	ldr	r7, [r5, #48]	; 0x30
   2137c:	blx	r7
   21380:	cmp	r0, #0
   21384:	bne	213dc <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   21388:	ldr	r7, [r5, #108]	; 0x6c
   2138c:	adds	r3, r7, r6
   21390:	moveq	r0, r3
   21394:	beq	213c8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   21398:	mov	r2, r4
   2139c:	mov	r0, r3
   213a0:	mov	r1, #0
   213a4:	bl	12630 <memset@plt>
   213a8:	ldr	r2, [r5, #224]	; 0xe0
   213ac:	add	r0, r0, #4
   213b0:	str	r2, [r7, r6]
   213b4:	ldr	r3, [r5, #228]	; 0xe4
   213b8:	add	r4, r3, r4
   213bc:	add	r3, r3, #4
   213c0:	str	r3, [r5, #224]	; 0xe0
   213c4:	str	r4, [r5, #228]	; 0xe4
   213c8:	add	sp, sp, #12
   213cc:	ldrd	r4, [sp]
   213d0:	ldrd	r6, [sp, #8]
   213d4:	add	sp, sp, #16
   213d8:	pop	{pc}		; (ldr pc, [sp], #4)
   213dc:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

000213e0 <flatcc_builder_enter_user_frame@@Base>:
   213e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   213e4:	add	r4, r1, #3
   213e8:	mov	r5, r0
   213ec:	ldr	r3, [r0, #112]	; 0x70
   213f0:	bic	r4, r4, #3
   213f4:	strd	r6, [sp, #8]
   213f8:	add	r4, r4, #4
   213fc:	ldr	r6, [r0, #228]	; 0xe4
   21400:	str	lr, [sp, #16]
   21404:	sub	sp, sp, #12
   21408:	add	r2, r6, r4
   2140c:	cmp	r2, r3
   21410:	bls	21438 <flatcc_builder_enter_user_frame@@Base+0x58>
   21414:	mov	ip, #7
   21418:	add	r1, r0, #108	; 0x6c
   2141c:	ldr	r0, [r0, #40]	; 0x28
   21420:	mov	r3, #0
   21424:	str	ip, [sp]
   21428:	ldr	r7, [r5, #48]	; 0x30
   2142c:	blx	r7
   21430:	cmp	r0, #0
   21434:	bne	21480 <flatcc_builder_enter_user_frame@@Base+0xa0>
   21438:	ldr	r7, [r5, #108]	; 0x6c
   2143c:	adds	r0, r7, r6
   21440:	beq	2146c <flatcc_builder_enter_user_frame@@Base+0x8c>
   21444:	mov	r2, r4
   21448:	mov	r1, #0
   2144c:	bl	12630 <memset@plt>
   21450:	ldr	r3, [r5, #224]	; 0xe0
   21454:	str	r3, [r7, r6]
   21458:	ldr	r0, [r5, #228]	; 0xe4
   2145c:	add	r4, r0, r4
   21460:	add	r0, r0, #4
   21464:	str	r0, [r5, #224]	; 0xe0
   21468:	str	r4, [r5, #228]	; 0xe4
   2146c:	add	sp, sp, #12
   21470:	ldrd	r4, [sp]
   21474:	ldrd	r6, [sp, #8]
   21478:	add	sp, sp, #16
   2147c:	pop	{pc}		; (ldr pc, [sp], #4)
   21480:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

00021484 <flatcc_builder_exit_user_frame@@Base>:
   21484:	ldr	r2, [r0, #224]	; 0xe0
   21488:	cmp	r2, #0
   2148c:	beq	214b4 <flatcc_builder_exit_user_frame@@Base+0x30>
   21490:	mov	r3, r0
   21494:	sub	r0, r2, #4
   21498:	ldr	r1, [r3, #108]	; 0x6c
   2149c:	str	r0, [r3, #228]	; 0xe4
   214a0:	add	r2, r1, r2
   214a4:	ldr	r2, [r2, #-4]
   214a8:	mov	r0, r2
   214ac:	str	r2, [r3, #224]	; 0xe0
   214b0:	bx	lr
   214b4:	str	r4, [sp, #-8]!
   214b8:	str	lr, [sp, #4]
   214bc:	bl	20c7c <flatcc_builder_default_alloc@@Base+0x1ec>

000214c0 <flatcc_builder_exit_user_frame_at@@Base>:
   214c0:	ldr	r2, [r0, #224]	; 0xe0
   214c4:	str	r4, [sp, #-8]!
   214c8:	str	lr, [sp, #4]
   214cc:	cmp	r2, r1
   214d0:	bcc	2150c <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   214d4:	cmp	r1, #0
   214d8:	mov	r3, r0
   214dc:	str	r1, [r0, #224]	; 0xe0
   214e0:	beq	21528 <flatcc_builder_exit_user_frame_at@@Base+0x68>
   214e4:	ldr	r2, [r3, #108]	; 0x6c
   214e8:	sub	r0, r1, #4
   214ec:	ldr	r4, [sp]
   214f0:	add	sp, sp, #4
   214f4:	str	r0, [r3, #228]	; 0xe4
   214f8:	add	r1, r2, r1
   214fc:	ldr	r2, [r1, #-4]
   21500:	mov	r0, r2
   21504:	str	r2, [r3, #224]	; 0xe0
   21508:	pop	{pc}		; (ldr pc, [sp], #4)
   2150c:	movw	r1, #58600	; 0xe4e8
   21510:	movt	r1, #2
   21514:	ldr	r3, [pc, #16]	; 2152c <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   21518:	movw	r0, #58832	; 0xe5d0
   2151c:	movt	r0, #2
   21520:	movw	r2, #551	; 0x227
   21524:	bl	12684 <__assert_fail@plt>
   21528:	bl	20c7c <flatcc_builder_default_alloc@@Base+0x1ec>
   2152c:	andeq	lr, r2, ip, ror r0

00021530 <flatcc_builder_get_current_user_frame@@Base>:
   21530:	ldr	r0, [r0, #224]	; 0xe0
   21534:	bx	lr

00021538 <flatcc_builder_get_user_frame_ptr@@Base>:
   21538:	ldr	r0, [r0, #108]	; 0x6c
   2153c:	add	r0, r0, r1
   21540:	bx	lr

00021544 <flatcc_builder_embed_buffer@@Base>:
   21544:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21548:	mov	r5, r0
   2154c:	ldr	r0, [r0, #152]	; 0x98
   21550:	strd	r6, [sp, #8]
   21554:	mov	r7, r2
   21558:	mov	r6, r3
   2155c:	strd	r8, [sp, #16]
   21560:	str	sl, [sp, #24]
   21564:	str	lr, [sp, #28]
   21568:	sub	sp, sp, #88	; 0x58
   2156c:	ldrh	r4, [sp, #120]	; 0x78
   21570:	ldr	r8, [sp, #124]	; 0x7c
   21574:	cmp	r4, #4
   21578:	movcc	r4, #4
   2157c:	cmp	r1, #0
   21580:	and	r8, r8, #2
   21584:	bne	21594 <flatcc_builder_embed_buffer@@Base+0x50>
   21588:	ldrh	r1, [r5, #132]	; 0x84
   2158c:	cmp	r1, #0
   21590:	beq	215b4 <flatcc_builder_embed_buffer@@Base+0x70>
   21594:	cmp	r1, r4
   21598:	movcs	r4, r1
   2159c:	cmp	r0, #0
   215a0:	bne	215b4 <flatcc_builder_embed_buffer@@Base+0x70>
   215a4:	ldr	r9, [r5, #140]	; 0x8c
   215a8:	sub	r1, r1, #1
   215ac:	ands	r1, r1, r9
   215b0:	bne	216dc <flatcc_builder_embed_buffer@@Base+0x198>
   215b4:	ldr	r1, [r5, #136]	; 0x88
   215b8:	cmp	r8, #0
   215bc:	sub	r4, r4, #1
   215c0:	movne	ip, #4
   215c4:	moveq	ip, #0
   215c8:	mov	r2, #0
   215cc:	cmp	r0, r2
   215d0:	str	r2, [sp, #16]
   215d4:	sub	r3, r1, r6
   215d8:	str	r2, [sp, #20]
   215dc:	sub	r3, r3, ip
   215e0:	and	r4, r4, r3
   215e4:	add	r3, r6, r4
   215e8:	str	r3, [sp, #12]
   215ec:	bne	216ac <flatcc_builder_embed_buffer@@Base+0x168>
   215f0:	mov	lr, #2
   215f4:	mov	r3, #1
   215f8:	mov	r2, r0
   215fc:	cmp	r6, #0
   21600:	beq	2162c <flatcc_builder_embed_buffer@@Base+0xe8>
   21604:	add	r2, r2, #1
   21608:	add	ip, sp, #88	; 0x58
   2160c:	add	ip, ip, r2, lsl #3
   21610:	add	r0, r0, r6
   21614:	mov	r2, r3
   21618:	str	r0, [sp, #16]
   2161c:	str	r7, [ip, #-72]	; 0xffffffb8
   21620:	str	r6, [ip, #-68]	; 0xffffffbc
   21624:	str	r3, [sp, #20]
   21628:	mov	r3, lr
   2162c:	cmp	r4, #0
   21630:	beq	2165c <flatcc_builder_embed_buffer@@Base+0x118>
   21634:	ldr	lr, [pc, #312]	; 21774 <flatcc_builder_embed_buffer@@Base+0x230>
   21638:	add	r2, r2, #1
   2163c:	add	ip, sp, #88	; 0x58
   21640:	add	ip, ip, r2, lsl #3
   21644:	add	r0, r0, r4
   21648:	mov	r2, r3
   2164c:	str	r0, [sp, #16]
   21650:	str	lr, [ip, #-72]	; 0xffffffb8
   21654:	str	r4, [ip, #-68]	; 0xffffffbc
   21658:	str	r3, [sp, #20]
   2165c:	sub	r4, r1, r0
   21660:	cmp	r1, r4
   21664:	ble	21734 <flatcc_builder_embed_buffer@@Base+0x1f0>
   21668:	mov	r3, r4
   2166c:	add	r1, sp, #24
   21670:	str	r0, [sp]
   21674:	ldr	r0, [r5, #36]	; 0x24
   21678:	ldr	r6, [r5, #44]	; 0x2c
   2167c:	blx	r6
   21680:	cmp	r0, #0
   21684:	bne	21730 <flatcc_builder_embed_buffer@@Base+0x1ec>
   21688:	mov	r0, r4
   2168c:	str	r4, [r5, #136]	; 0x88
   21690:	add	sp, sp, #88	; 0x58
   21694:	ldrd	r4, [sp]
   21698:	ldrd	r6, [sp, #8]
   2169c:	ldrd	r8, [sp, #16]
   216a0:	ldr	sl, [sp, #24]
   216a4:	add	sp, sp, #28
   216a8:	pop	{pc}		; (ldr pc, [sp], #4)
   216ac:	mov	ip, #4
   216b0:	mov	r3, #1
   216b4:	add	r8, sp, #12
   216b8:	mov	r2, r3
   216bc:	mov	r0, ip
   216c0:	mov	lr, #3
   216c4:	str	ip, [sp, #16]
   216c8:	str	r3, [sp, #20]
   216cc:	mov	r3, #2
   216d0:	str	r8, [sp, #24]
   216d4:	str	ip, [sp, #28]
   216d8:	b	215fc <flatcc_builder_embed_buffer@@Base+0xb8>
   216dc:	ldr	r3, [pc, #144]	; 21774 <flatcc_builder_embed_buffer@@Base+0x230>
   216e0:	add	r0, r9, r1
   216e4:	mov	r2, #1
   216e8:	cmp	r9, r0
   216ec:	str	r1, [sp, #16]
   216f0:	str	r0, [r5, #140]	; 0x8c
   216f4:	strd	r2, [sp, #20]
   216f8:	str	r1, [sp, #28]
   216fc:	bgt	21750 <flatcc_builder_embed_buffer@@Base+0x20c>
   21700:	mov	r3, r9
   21704:	str	r1, [sp]
   21708:	add	r1, sp, #24
   2170c:	ldr	r0, [r5, #36]	; 0x24
   21710:	ldr	sl, [r5, #44]	; 0x2c
   21714:	blx	sl
   21718:	cmp	r0, #0
   2171c:	bne	21770 <flatcc_builder_embed_buffer@@Base+0x22c>
   21720:	cmn	r9, #1
   21724:	beq	2176c <flatcc_builder_embed_buffer@@Base+0x228>
   21728:	ldr	r0, [r5, #152]	; 0x98
   2172c:	b	215b4 <flatcc_builder_embed_buffer@@Base+0x70>
   21730:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   21734:	movw	r1, #58600	; 0xe4e8
   21738:	movt	r1, #2
   2173c:	ldr	r3, [pc, #52]	; 21778 <flatcc_builder_embed_buffer@@Base+0x234>
   21740:	movw	r0, #58792	; 0xe5a8
   21744:	movt	r0, #2
   21748:	movw	r2, #647	; 0x287
   2174c:	bl	12684 <__assert_fail@plt>
   21750:	movw	r1, #58600	; 0xe4e8
   21754:	movt	r1, #2
   21758:	movw	r0, #58792	; 0xe5a8
   2175c:	movt	r0, #2
   21760:	sub	r3, r3, #152	; 0x98
   21764:	movw	r2, #673	; 0x2a1
   21768:	bl	12684 <__assert_fail@plt>
   2176c:	bl	20c04 <flatcc_builder_default_alloc@@Base+0x174>
   21770:	bl	20bdc <flatcc_builder_default_alloc@@Base+0x14c>
   21774:	andeq	sp, r2, r0, asr #28
   21778:	andeq	sp, r2, r4, asr #27

0002177c <flatcc_builder_create_buffer@@Base>:
   2177c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21780:	mov	ip, #0
   21784:	mov	r5, r0
   21788:	strd	r6, [sp, #8]
   2178c:	mov	r7, r3
   21790:	strd	r8, [sp, #16]
   21794:	mov	r9, r1
   21798:	strd	sl, [sp, #24]
   2179c:	str	lr, [sp, #32]
   217a0:	sub	sp, sp, #100	; 0x64
   217a4:	ldrh	r4, [sp, #136]	; 0x88
   217a8:	str	ip, [sp, #20]
   217ac:	ldr	r6, [sp, #140]	; 0x8c
   217b0:	cmp	r4, #4
   217b4:	movcc	r4, #4
   217b8:	cmp	r2, #0
   217bc:	and	r8, r6, #1
   217c0:	bne	217d0 <flatcc_builder_create_buffer@@Base+0x54>
   217c4:	ldrh	r2, [r0, #132]	; 0x84
   217c8:	cmp	r2, ip
   217cc:	beq	217f0 <flatcc_builder_create_buffer@@Base+0x74>
   217d0:	cmp	r2, r4
   217d4:	movcs	r4, r2
   217d8:	cmp	r8, #0
   217dc:	bne	217f0 <flatcc_builder_create_buffer@@Base+0x74>
   217e0:	ldr	sl, [r5, #140]	; 0x8c
   217e4:	sub	r2, r2, #1
   217e8:	ands	r1, r2, sl
   217ec:	bne	21984 <flatcc_builder_create_buffer@@Base+0x208>
   217f0:	ldrh	r3, [r5, #128]	; 0x80
   217f4:	ldr	r0, [r5, #136]	; 0x88
   217f8:	cmp	r3, r4
   217fc:	strhcc	r4, [r5, #128]	; 0x80
   21800:	cmp	r9, #0
   21804:	sub	r4, r4, #1
   21808:	ldrne	r3, [r9]
   2180c:	ldreq	r1, [sp, #20]
   21810:	movne	r1, r3
   21814:	strne	r3, [sp, #20]
   21818:	sub	r3, r0, #4
   2181c:	cmp	r1, #0
   21820:	movne	r1, #4
   21824:	tst	r6, #2
   21828:	movne	r2, #4
   2182c:	moveq	r2, #0
   21830:	sub	r3, r3, r1
   21834:	ands	r6, r6, #3
   21838:	sub	r3, r3, r2
   2183c:	and	r4, r4, r3
   21840:	bne	2195c <flatcc_builder_create_buffer@@Base+0x1e0>
   21844:	mov	r3, r6
   21848:	mov	r9, #3
   2184c:	mov	lr, #2
   21850:	mov	r2, #1
   21854:	mov	ip, #4
   21858:	add	fp, sp, #96	; 0x60
   2185c:	add	r3, r3, #1
   21860:	str	ip, [sp, #24]
   21864:	add	r3, fp, r3, lsl #3
   21868:	add	sl, sp, #12
   2186c:	mov	fp, #4
   21870:	cmp	r1, #0
   21874:	strd	sl, [r3, #-72]	; 0xffffffb8
   21878:	str	r2, [sp, #28]
   2187c:	beq	218ac <flatcc_builder_create_buffer@@Base+0x130>
   21880:	add	r2, r2, #1
   21884:	add	r3, sp, #96	; 0x60
   21888:	add	r3, r3, r2, lsl #3
   2188c:	add	ip, ip, r1
   21890:	add	sl, sp, #20
   21894:	mov	r2, lr
   21898:	str	ip, [sp, #24]
   2189c:	str	sl, [r3, #-72]	; 0xffffffb8
   218a0:	str	r1, [r3, #-68]	; 0xffffffbc
   218a4:	str	lr, [sp, #28]
   218a8:	mov	lr, r9
   218ac:	cmp	r4, #0
   218b0:	beq	218dc <flatcc_builder_create_buffer@@Base+0x160>
   218b4:	ldr	r1, [pc, #372]	; 21a30 <flatcc_builder_create_buffer@@Base+0x2b4>
   218b8:	add	r2, r2, #1
   218bc:	add	r3, sp, #96	; 0x60
   218c0:	add	r3, r3, r2, lsl #3
   218c4:	add	ip, ip, r4
   218c8:	mov	r2, lr
   218cc:	str	ip, [sp, #24]
   218d0:	str	r1, [r3, #-72]	; 0xffffffb8
   218d4:	str	r4, [r3, #-68]	; 0xffffffbc
   218d8:	str	lr, [sp, #28]
   218dc:	sub	r4, r0, ip
   218e0:	cmp	r6, #0
   218e4:	mov	r1, r4
   218e8:	addne	r1, r4, #4
   218ec:	cmp	r8, #0
   218f0:	sub	r7, r7, r1
   218f4:	ldrne	r3, [r5, #144]	; 0x90
   218f8:	str	r7, [sp, #12]
   218fc:	ldreq	r3, [r5, #140]	; 0x8c
   21900:	cmp	r0, r4
   21904:	sub	r3, r3, r1
   21908:	str	r3, [sp, #16]
   2190c:	ble	219d4 <flatcc_builder_create_buffer@@Base+0x258>
   21910:	mov	r3, r4
   21914:	add	r1, sp, #32
   21918:	str	ip, [sp]
   2191c:	ldr	r0, [r5, #36]	; 0x24
   21920:	ldr	r6, [r5, #44]	; 0x2c
   21924:	blx	r6
   21928:	cmp	r0, #0
   2192c:	bne	219f0 <flatcc_builder_create_buffer@@Base+0x274>
   21930:	cmp	r4, #0
   21934:	str	r4, [r5, #136]	; 0x88
   21938:	beq	219f4 <flatcc_builder_create_buffer@@Base+0x278>
   2193c:	mov	r0, r4
   21940:	add	sp, sp, #100	; 0x64
   21944:	ldrd	r4, [sp]
   21948:	ldrd	r6, [sp, #8]
   2194c:	ldrd	r8, [sp, #16]
   21950:	ldrd	sl, [sp, #24]
   21954:	add	sp, sp, #32
   21958:	pop	{pc}		; (ldr pc, [sp], #4)
   2195c:	mov	ip, #4
   21960:	add	r3, sp, #16
   21964:	mov	r9, ip
   21968:	mov	lr, #3
   2196c:	mov	r2, #2
   21970:	str	r3, [sp, #32]
   21974:	mov	r3, #1
   21978:	str	ip, [sp, #36]	; 0x24
   2197c:	mov	ip, #8
   21980:	b	21858 <flatcc_builder_create_buffer@@Base+0xdc>
   21984:	ldr	r3, [pc, #164]	; 21a30 <flatcc_builder_create_buffer@@Base+0x2b4>
   21988:	add	r0, sl, r1
   2198c:	mov	r2, #1
   21990:	cmp	sl, r0
   21994:	str	r1, [sp, #24]
   21998:	str	r0, [r5, #140]	; 0x8c
   2199c:	strd	r2, [sp, #28]
   219a0:	str	r1, [sp, #36]	; 0x24
   219a4:	bgt	21a14 <flatcc_builder_create_buffer@@Base+0x298>
   219a8:	mov	r3, sl
   219ac:	str	r1, [sp]
   219b0:	add	r1, sp, #32
   219b4:	ldr	r0, [r5, #36]	; 0x24
   219b8:	ldr	fp, [r5, #44]	; 0x2c
   219bc:	blx	fp
   219c0:	cmp	r0, #0
   219c4:	bne	21a10 <flatcc_builder_create_buffer@@Base+0x294>
   219c8:	cmn	sl, #1
   219cc:	bne	217f0 <flatcc_builder_create_buffer@@Base+0x74>
   219d0:	bl	20c04 <flatcc_builder_default_alloc@@Base+0x174>
   219d4:	movw	r1, #58600	; 0xe4e8
   219d8:	movt	r1, #2
   219dc:	ldr	r3, [pc, #80]	; 21a34 <flatcc_builder_create_buffer@@Base+0x2b8>
   219e0:	movw	r0, #58792	; 0xe5a8
   219e4:	movt	r0, #2
   219e8:	movw	r2, #647	; 0x287
   219ec:	bl	12684 <__assert_fail@plt>
   219f0:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   219f4:	movw	r1, #58600	; 0xe4e8
   219f8:	movt	r1, #2
   219fc:	ldr	r3, [pc, #52]	; 21a38 <flatcc_builder_create_buffer@@Base+0x2bc>
   21a00:	movw	r0, #58792	; 0xe5a8
   21a04:	movt	r0, #2
   21a08:	mov	r2, #772	; 0x304
   21a0c:	bl	12684 <__assert_fail@plt>
   21a10:	bl	20bdc <flatcc_builder_default_alloc@@Base+0x14c>
   21a14:	movw	r1, #58600	; 0xe4e8
   21a18:	movt	r1, #2
   21a1c:	movw	r0, #58792	; 0xe5a8
   21a20:	movt	r0, #2
   21a24:	sub	r3, r3, #152	; 0x98
   21a28:	movw	r2, #673	; 0x2a1
   21a2c:	bl	12684 <__assert_fail@plt>
   21a30:	andeq	sp, r2, r0, asr #28
   21a34:	andeq	sp, r2, r4, asr #27
   21a38:	andeq	lr, r2, r0, lsr #1

00021a3c <flatcc_builder_create_struct@@Base>:
   21a3c:	cmp	r3, #0
   21a40:	strd	r4, [sp, #-16]!
   21a44:	str	r6, [sp, #8]
   21a48:	str	lr, [sp, #12]
   21a4c:	sub	sp, sp, #80	; 0x50
   21a50:	beq	21b54 <flatcc_builder_create_struct@@Base+0x118>
   21a54:	mov	r4, r0
   21a58:	mov	r0, r2
   21a5c:	ldrh	r2, [r4, #128]	; 0x80
   21a60:	ldr	ip, [r4, #136]	; 0x88
   21a64:	cmp	r2, r3
   21a68:	mov	r2, #0
   21a6c:	strhcc	r3, [r4, #128]	; 0x80
   21a70:	sub	r5, ip, r0
   21a74:	sub	r3, r3, #1
   21a78:	cmp	r0, r2
   21a7c:	and	r3, r3, r5
   21a80:	str	r2, [sp, #8]
   21a84:	str	r2, [sp, #12]
   21a88:	bne	21b08 <flatcc_builder_create_struct@@Base+0xcc>
   21a8c:	cmp	r3, #0
   21a90:	movne	r1, r2
   21a94:	movne	r0, r3
   21a98:	movne	r2, #1
   21a9c:	beq	21b34 <flatcc_builder_create_struct@@Base+0xf8>
   21aa0:	ldr	lr, [pc, #200]	; 21b70 <flatcc_builder_create_struct@@Base+0x134>
   21aa4:	add	r5, sp, #80	; 0x50
   21aa8:	add	r1, r1, #1
   21aac:	add	r1, r5, r1, lsl #3
   21ab0:	sub	r5, ip, r0
   21ab4:	str	r0, [sp, #8]
   21ab8:	str	r2, [sp, #12]
   21abc:	str	lr, [r1, #-72]	; 0xffffffb8
   21ac0:	str	r3, [r1, #-68]	; 0xffffffbc
   21ac4:	cmp	ip, r5
   21ac8:	ble	21b34 <flatcc_builder_create_struct@@Base+0xf8>
   21acc:	mov	r3, r5
   21ad0:	add	r1, sp, #16
   21ad4:	str	r0, [sp]
   21ad8:	ldr	r0, [r4, #36]	; 0x24
   21adc:	ldr	r6, [r4, #44]	; 0x2c
   21ae0:	blx	r6
   21ae4:	cmp	r0, #0
   21ae8:	bne	21b50 <flatcc_builder_create_struct@@Base+0x114>
   21aec:	mov	r0, r5
   21af0:	str	r5, [r4, #136]	; 0x88
   21af4:	add	sp, sp, #80	; 0x50
   21af8:	ldrd	r4, [sp]
   21afc:	ldr	r6, [sp, #8]
   21b00:	add	sp, sp, #12
   21b04:	pop	{pc}		; (ldr pc, [sp], #4)
   21b08:	mov	r2, #1
   21b0c:	cmp	r3, #0
   21b10:	str	r0, [sp, #8]
   21b14:	str	r2, [sp, #12]
   21b18:	str	r1, [sp, #16]
   21b1c:	movne	r1, r2
   21b20:	movne	r2, #2
   21b24:	str	r0, [sp, #20]
   21b28:	addne	r0, r0, r3
   21b2c:	beq	21ac4 <flatcc_builder_create_struct@@Base+0x88>
   21b30:	b	21aa0 <flatcc_builder_create_struct@@Base+0x64>
   21b34:	movw	r1, #58600	; 0xe4e8
   21b38:	movt	r1, #2
   21b3c:	ldr	r3, [pc, #48]	; 21b74 <flatcc_builder_create_struct@@Base+0x138>
   21b40:	movw	r0, #58792	; 0xe5a8
   21b44:	movt	r0, #2
   21b48:	movw	r2, #647	; 0x287
   21b4c:	bl	12684 <__assert_fail@plt>
   21b50:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   21b54:	movw	r1, #58600	; 0xe4e8
   21b58:	movt	r1, #2
   21b5c:	ldr	r3, [pc, #20]	; 21b78 <flatcc_builder_create_struct@@Base+0x13c>
   21b60:	movw	r0, #58864	; 0xe5f0
   21b64:	movt	r0, #2
   21b68:	movw	r2, #783	; 0x30f
   21b6c:	bl	12684 <__assert_fail@plt>
   21b70:	andeq	sp, r2, r0, asr #28
   21b74:	andeq	sp, r2, r4, asr #27
   21b78:	andeq	lr, r2, r0, asr #1

00021b7c <flatcc_builder_start_buffer@@Base>:
   21b7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21b80:	mov	r5, r1
   21b84:	mov	r4, r0
   21b88:	ldr	r1, [r0, #156]	; 0x9c
   21b8c:	strd	r6, [sp, #8]
   21b90:	mov	r6, r3
   21b94:	mov	r7, r2
   21b98:	ldr	r3, [r0, #160]	; 0xa0
   21b9c:	strd	r8, [sp, #16]
   21ba0:	ldrh	r8, [r0, #128]	; 0x80
   21ba4:	add	r2, r1, #1
   21ba8:	strd	sl, [sp, #24]
   21bac:	str	lr, [sp, #32]
   21bb0:	sub	sp, sp, #12
   21bb4:	cmp	r2, r3
   21bb8:	str	r2, [r0, #156]	; 0x9c
   21bbc:	ble	21d08 <flatcc_builder_start_buffer@@Base+0x18c>
   21bc0:	ldr	r3, [r0, #176]	; 0xb0
   21bc4:	cmp	r3, #0
   21bc8:	cmpgt	r2, r3
   21bcc:	movgt	r3, #1
   21bd0:	movle	r3, #0
   21bd4:	bgt	21d18 <flatcc_builder_start_buffer@@Base+0x19c>
   21bd8:	add	r1, r1, r1, lsl #3
   21bdc:	ldr	r0, [r0, #88]	; 0x58
   21be0:	lsl	r9, r1, #2
   21be4:	add	r2, r9, #36	; 0x24
   21be8:	cmp	r2, r0
   21bec:	bls	21c10 <flatcc_builder_start_buffer@@Base+0x94>
   21bf0:	mov	ip, #4
   21bf4:	add	r1, r4, #84	; 0x54
   21bf8:	ldr	r0, [r4, #40]	; 0x28
   21bfc:	str	ip, [sp]
   21c00:	ldr	sl, [r4, #48]	; 0x30
   21c04:	blx	sl
   21c08:	cmp	r0, #0
   21c0c:	bne	21d20 <flatcc_builder_start_buffer@@Base+0x1a4>
   21c10:	ldr	r3, [r4, #84]	; 0x54
   21c14:	add	r3, r3, r9
   21c18:	cmp	r3, #0
   21c1c:	str	r3, [r4, #32]
   21c20:	beq	21d18 <flatcc_builder_start_buffer@@Base+0x19c>
   21c24:	ldr	r2, [r4, #88]	; 0x58
   21c28:	movw	r0, #36409	; 0x8e39
   21c2c:	movt	r0, #14563	; 0x38e3
   21c30:	ldr	r1, [r4, #176]	; 0xb0
   21c34:	umull	r0, r2, r0, r2
   21c38:	lsr	r2, r2, #3
   21c3c:	cmp	r1, #0
   21c40:	cmpgt	r2, r1
   21c44:	movgt	r2, r1
   21c48:	str	r2, [r4, #160]	; 0xa0
   21c4c:	ldr	sl, [pc, #208]	; 21d24 <flatcc_builder_start_buffer@@Base+0x1a8>
   21c50:	mov	r0, #0
   21c54:	mvn	lr, #3
   21c58:	cmp	r5, r0
   21c5c:	ldr	r2, [r4, #20]
   21c60:	ldr	ip, [r4, #28]
   21c64:	moveq	r5, sl
   21c68:	ldrh	r9, [r4, #130]	; 0x82
   21c6c:	ldrh	fp, [r4, #132]	; 0x84
   21c70:	ldr	r1, [r4, #148]	; 0x94
   21c74:	ldr	sl, [r4, #152]	; 0x98
   21c78:	str	r2, [r3, #8]
   21c7c:	add	r2, r2, ip
   21c80:	add	r2, r2, #7
   21c84:	strh	r9, [r3, #12]
   21c88:	bic	r2, r2, #7
   21c8c:	strh	r8, [r4, #130]	; 0x82
   21c90:	ldrh	r8, [r4, #164]	; 0xa4
   21c94:	ldr	r9, [r4, #136]	; 0x88
   21c98:	stm	r3, {ip, lr}
   21c9c:	mov	ip, #1
   21ca0:	str	r0, [r4, #20]
   21ca4:	str	r2, [r4, #28]
   21ca8:	add	r2, r1, ip
   21cac:	strh	ip, [r4, #128]	; 0x80
   21cb0:	ldr	lr, [r4, #144]	; 0x90
   21cb4:	strh	fp, [r3, #34]	; 0x22
   21cb8:	strh	r7, [r4, #132]	; 0x84
   21cbc:	ldr	r7, [r4, #168]	; 0xa8
   21cc0:	strh	r8, [r3, #32]
   21cc4:	strh	r6, [r4, #164]	; 0xa4
   21cc8:	str	lr, [r3, #20]
   21ccc:	str	sl, [r3, #28]
   21cd0:	str	r9, [r4, #144]	; 0x90
   21cd4:	str	r2, [r4, #148]	; 0x94
   21cd8:	str	r1, [r4, #152]	; 0x98
   21cdc:	str	r7, [r3, #16]
   21ce0:	ldr	r2, [r5]
   21ce4:	str	r2, [r4, #168]	; 0xa8
   21ce8:	strh	ip, [r3, #14]
   21cec:	add	sp, sp, #12
   21cf0:	ldrd	r4, [sp]
   21cf4:	ldrd	r6, [sp, #8]
   21cf8:	ldrd	r8, [sp, #16]
   21cfc:	ldrd	sl, [sp, #24]
   21d00:	add	sp, sp, #32
   21d04:	pop	{pc}		; (ldr pc, [sp], #4)
   21d08:	ldr	r3, [r0, #32]
   21d0c:	add	r3, r3, #36	; 0x24
   21d10:	str	r3, [r0, #32]
   21d14:	b	21c4c <flatcc_builder_start_buffer@@Base+0xd0>
   21d18:	mvn	r0, #0
   21d1c:	b	21cec <flatcc_builder_start_buffer@@Base+0x170>
   21d20:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>
   21d24:	andeq	sp, r2, r0, asr #28

00021d28 <flatcc_builder_end_buffer@@Base>:
   21d28:	ldr	ip, [r0, #32]
   21d2c:	strd	r4, [sp, #-16]!
   21d30:	mov	r4, r0
   21d34:	ldrh	r2, [r0, #164]	; 0xa4
   21d38:	ldr	r0, [r0, #152]	; 0x98
   21d3c:	ldrh	ip, [ip, #14]
   21d40:	and	r2, r2, #2
   21d44:	str	r6, [sp, #8]
   21d48:	str	lr, [sp, #12]
   21d4c:	sub	sp, sp, #8
   21d50:	cmp	r0, #0
   21d54:	moveq	r0, r2
   21d58:	orrne	r0, r2, #1
   21d5c:	cmp	ip, #1
   21d60:	bne	21e48 <flatcc_builder_end_buffer@@Base+0x120>
   21d64:	ldrh	r2, [r4, #132]	; 0x84
   21d68:	mov	r3, r1
   21d6c:	add	r1, r4, #168	; 0xa8
   21d70:	ldrh	ip, [r4, #128]	; 0x80
   21d74:	cmp	r2, ip
   21d78:	movhi	ip, r2
   21d7c:	strhhi	r2, [r4, #128]	; 0x80
   21d80:	str	ip, [sp]
   21d84:	str	r0, [sp, #4]
   21d88:	mov	r0, r4
   21d8c:	bl	2177c <flatcc_builder_create_buffer@@Base>
   21d90:	subs	r5, r0, #0
   21d94:	beq	21e30 <flatcc_builder_end_buffer@@Base+0x108>
   21d98:	mov	r1, #0
   21d9c:	ldr	r0, [r4, #16]
   21da0:	ldr	r3, [r4, #32]
   21da4:	ldr	r2, [r4, #20]
   21da8:	ldrh	lr, [r3, #32]
   21dac:	ldr	ip, [r3, #16]
   21db0:	ldr	r6, [r3, #20]
   21db4:	ldr	r3, [r3, #28]
   21db8:	str	r6, [r4, #144]	; 0x90
   21dbc:	strh	lr, [r4, #164]	; 0xa4
   21dc0:	str	r3, [r4, #152]	; 0x98
   21dc4:	str	ip, [r4, #168]	; 0xa8
   21dc8:	bl	12630 <memset@plt>
   21dcc:	ldr	r3, [r4, #32]
   21dd0:	ldr	r0, [r4, #60]	; 0x3c
   21dd4:	ldr	r2, [r4, #64]	; 0x40
   21dd8:	ldr	ip, [r3]
   21ddc:	ldmib	r3, {r1, lr}
   21de0:	add	r0, r0, ip
   21de4:	sub	r2, r2, ip
   21de8:	str	r0, [r4, #16]
   21dec:	cmp	r2, r1
   21df0:	ldrh	r0, [r4, #128]	; 0x80
   21df4:	movcs	r2, r1
   21df8:	str	lr, [r4, #20]
   21dfc:	str	ip, [r4, #28]
   21e00:	ldrh	ip, [r4, #130]	; 0x82
   21e04:	str	r2, [r4, #24]
   21e08:	ldr	r2, [r4, #156]	; 0x9c
   21e0c:	str	r1, [r3, #4]
   21e10:	cmp	r0, ip
   21e14:	sub	r0, r3, #36	; 0x24
   21e18:	strhcc	ip, [r4, #128]	; 0x80
   21e1c:	ldrh	r1, [r3, #12]
   21e20:	sub	r3, r2, #1
   21e24:	str	r0, [r4, #32]
   21e28:	strh	r1, [r4, #130]	; 0x82
   21e2c:	str	r3, [r4, #156]	; 0x9c
   21e30:	mov	r0, r5
   21e34:	add	sp, sp, #8
   21e38:	ldrd	r4, [sp]
   21e3c:	ldr	r6, [sp, #8]
   21e40:	add	sp, sp, #12
   21e44:	pop	{pc}		; (ldr pc, [sp], #4)
   21e48:	movw	r1, #58600	; 0xe4e8
   21e4c:	movt	r1, #2
   21e50:	ldr	r3, [pc, #12]	; 21e64 <flatcc_builder_end_buffer@@Base+0x13c>
   21e54:	movw	r0, #58876	; 0xe5fc
   21e58:	movt	r0, #2
   21e5c:	movw	r2, #838	; 0x346
   21e60:	bl	12684 <__assert_fail@plt>
   21e64:	andeq	lr, r2, r0, ror #1

00021e68 <flatcc_builder_start_struct@@Base>:
   21e68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21e6c:	mov	r5, r1
   21e70:	mov	r4, r0
   21e74:	ldr	r1, [r0, #156]	; 0x9c
   21e78:	ldr	r3, [r0, #160]	; 0xa0
   21e7c:	strd	r6, [sp, #8]
   21e80:	mov	r6, r2
   21e84:	str	r8, [sp, #16]
   21e88:	add	r2, r1, #1
   21e8c:	str	lr, [sp, #20]
   21e90:	sub	sp, sp, #8
   21e94:	cmp	r2, r3
   21e98:	str	r2, [r0, #156]	; 0x9c
   21e9c:	ble	21fbc <flatcc_builder_start_struct@@Base+0x154>
   21ea0:	ldr	r3, [r0, #176]	; 0xb0
   21ea4:	cmp	r3, #0
   21ea8:	cmpgt	r2, r3
   21eac:	movgt	r3, #1
   21eb0:	movle	r3, #0
   21eb4:	bgt	22028 <flatcc_builder_start_struct@@Base+0x1c0>
   21eb8:	add	r1, r1, r1, lsl #3
   21ebc:	ldr	r0, [r0, #88]	; 0x58
   21ec0:	lsl	r7, r1, #2
   21ec4:	add	r2, r7, #36	; 0x24
   21ec8:	cmp	r2, r0
   21ecc:	bls	21ef0 <flatcc_builder_start_struct@@Base+0x88>
   21ed0:	mov	ip, #4
   21ed4:	add	r1, r4, #84	; 0x54
   21ed8:	ldr	r0, [r4, #40]	; 0x28
   21edc:	str	ip, [sp]
   21ee0:	ldr	r8, [r4, #48]	; 0x30
   21ee4:	blx	r8
   21ee8:	cmp	r0, #0
   21eec:	bne	22030 <flatcc_builder_start_struct@@Base+0x1c8>
   21ef0:	ldr	r1, [r4, #84]	; 0x54
   21ef4:	add	r1, r1, r7
   21ef8:	cmp	r1, #0
   21efc:	str	r1, [r4, #32]
   21f00:	beq	22028 <flatcc_builder_start_struct@@Base+0x1c0>
   21f04:	ldr	r3, [r4, #88]	; 0x58
   21f08:	movw	r0, #36409	; 0x8e39
   21f0c:	movt	r0, #14563	; 0x38e3
   21f10:	ldr	r2, [r4, #176]	; 0xb0
   21f14:	umull	r0, r3, r0, r3
   21f18:	lsr	r3, r3, #3
   21f1c:	cmp	r2, #0
   21f20:	cmpgt	r3, r2
   21f24:	movgt	r3, r2
   21f28:	str	r3, [r4, #160]	; 0xa0
   21f2c:	ldr	r3, [r4, #20]
   21f30:	mvn	lr, #3
   21f34:	ldr	ip, [r4, #28]
   21f38:	ldrh	r7, [r4, #130]	; 0x82
   21f3c:	ldr	r2, [r4, #64]	; 0x40
   21f40:	ldr	r0, [r4, #60]	; 0x3c
   21f44:	str	r3, [r1, #8]
   21f48:	add	r3, r3, ip
   21f4c:	add	r3, r3, #7
   21f50:	strh	r7, [r1, #12]
   21f54:	mov	r7, #0
   21f58:	bic	r3, r3, #7
   21f5c:	strh	r6, [r4, #130]	; 0x82
   21f60:	mvn	r6, #3
   21f64:	sub	r2, r2, r3
   21f68:	stm	r1, {ip, lr}
   21f6c:	mov	ip, #2
   21f70:	cmp	r2, lr
   21f74:	add	r0, r0, r3
   21f78:	str	r7, [r4, #20]
   21f7c:	movhi	r2, lr
   21f80:	str	r3, [r4, #28]
   21f84:	strh	ip, [r1, #14]
   21f88:	strls	r2, [r4, #24]
   21f8c:	strhi	lr, [r4, #24]
   21f90:	cmp	r5, r2
   21f94:	str	r0, [r4, #16]
   21f98:	str	r6, [r1, #4]
   21f9c:	str	r5, [r4, #20]
   21fa0:	bcs	21fcc <flatcc_builder_start_struct@@Base+0x164>
   21fa4:	add	sp, sp, #8
   21fa8:	ldrd	r4, [sp]
   21fac:	ldrd	r6, [sp, #8]
   21fb0:	ldr	r8, [sp, #16]
   21fb4:	add	sp, sp, #20
   21fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   21fbc:	ldr	r1, [r0, #32]
   21fc0:	add	r1, r1, #36	; 0x24
   21fc4:	str	r1, [r0, #32]
   21fc8:	b	21f2c <flatcc_builder_start_struct@@Base+0xc4>
   21fcc:	mov	ip, #1
   21fd0:	add	r1, r4, #60	; 0x3c
   21fd4:	ldr	r0, [r4, #40]	; 0x28
   21fd8:	add	r2, r5, ip
   21fdc:	add	r2, r2, r3
   21fe0:	mov	r3, ip
   21fe4:	str	ip, [sp]
   21fe8:	ldr	r5, [r4, #48]	; 0x30
   21fec:	blx	r5
   21ff0:	cmp	r0, #0
   21ff4:	bne	22028 <flatcc_builder_start_struct@@Base+0x1c0>
   21ff8:	ldr	r0, [r4, #28]
   21ffc:	ldr	r2, [r4, #32]
   22000:	ldr	r3, [r4, #64]	; 0x40
   22004:	ldr	r1, [r4, #60]	; 0x3c
   22008:	sub	r3, r3, r0
   2200c:	cmp	r3, r6
   22010:	movhi	r3, r6
   22014:	add	r0, r1, r0
   22018:	str	r0, [r4, #16]
   2201c:	str	r3, [r4, #24]
   22020:	str	r6, [r2, #4]
   22024:	b	21fa4 <flatcc_builder_start_struct@@Base+0x13c>
   22028:	mov	r0, #0
   2202c:	b	21fa4 <flatcc_builder_start_struct@@Base+0x13c>
   22030:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

00022034 <flatcc_builder_struct_edit@@Base>:
   22034:	ldr	r0, [r0, #16]
   22038:	bx	lr

0002203c <flatcc_builder_end_struct@@Base>:
   2203c:	ldr	r3, [r0, #32]
   22040:	strd	r4, [sp, #-16]!
   22044:	ldrh	r3, [r3, #14]
   22048:	str	r6, [sp, #8]
   2204c:	str	lr, [sp, #12]
   22050:	sub	sp, sp, #80	; 0x50
   22054:	cmp	r3, #2
   22058:	bne	22200 <flatcc_builder_end_struct@@Base+0x1c4>
   2205c:	ldrh	r3, [r0, #130]	; 0x82
   22060:	mov	r4, r0
   22064:	ldr	r1, [r0, #16]
   22068:	ldr	r0, [r0, #20]
   2206c:	cmp	r3, #0
   22070:	beq	221e4 <flatcc_builder_end_struct@@Base+0x1a8>
   22074:	ldrh	r2, [r4, #128]	; 0x80
   22078:	ldr	ip, [r4, #136]	; 0x88
   2207c:	cmp	r2, r3
   22080:	mov	r2, #0
   22084:	strhcc	r3, [r4, #128]	; 0x80
   22088:	sub	r5, ip, r0
   2208c:	sub	r3, r3, #1
   22090:	cmp	r0, r2
   22094:	and	r3, r3, r5
   22098:	str	r2, [sp, #8]
   2209c:	str	r2, [sp, #12]
   220a0:	bne	22198 <flatcc_builder_end_struct@@Base+0x15c>
   220a4:	cmp	r3, #0
   220a8:	movne	r1, r2
   220ac:	movne	r0, r3
   220b0:	movne	r2, #1
   220b4:	beq	221c4 <flatcc_builder_end_struct@@Base+0x188>
   220b8:	ldr	lr, [pc, #348]	; 2221c <flatcc_builder_end_struct@@Base+0x1e0>
   220bc:	add	r5, sp, #80	; 0x50
   220c0:	add	r1, r1, #1
   220c4:	add	r1, r5, r1, lsl #3
   220c8:	sub	r5, ip, r0
   220cc:	str	r0, [sp, #8]
   220d0:	str	r2, [sp, #12]
   220d4:	str	lr, [r1, #-72]	; 0xffffffb8
   220d8:	str	r3, [r1, #-68]	; 0xffffffbc
   220dc:	cmp	ip, r5
   220e0:	ble	221c4 <flatcc_builder_end_struct@@Base+0x188>
   220e4:	add	r1, sp, #16
   220e8:	mov	r3, r5
   220ec:	str	r0, [sp]
   220f0:	ldr	r0, [r4, #36]	; 0x24
   220f4:	ldr	r6, [r4, #44]	; 0x2c
   220f8:	blx	r6
   220fc:	subs	r1, r0, #0
   22100:	bne	221e0 <flatcc_builder_end_struct@@Base+0x1a4>
   22104:	cmp	r5, #0
   22108:	str	r5, [r4, #136]	; 0x88
   2210c:	beq	22180 <flatcc_builder_end_struct@@Base+0x144>
   22110:	ldr	r0, [r4, #16]
   22114:	ldr	r2, [r4, #20]
   22118:	bl	12630 <memset@plt>
   2211c:	ldr	r3, [r4, #32]
   22120:	ldr	r0, [r4, #60]	; 0x3c
   22124:	ldr	r2, [r4, #64]	; 0x40
   22128:	ldr	ip, [r3]
   2212c:	ldmib	r3, {r1, lr}
   22130:	add	r0, r0, ip
   22134:	sub	r2, r2, ip
   22138:	str	r0, [r4, #16]
   2213c:	cmp	r2, r1
   22140:	ldrh	r0, [r4, #128]	; 0x80
   22144:	movcs	r2, r1
   22148:	str	lr, [r4, #20]
   2214c:	str	ip, [r4, #28]
   22150:	ldrh	ip, [r4, #130]	; 0x82
   22154:	str	r2, [r4, #24]
   22158:	ldr	r2, [r4, #156]	; 0x9c
   2215c:	str	r1, [r3, #4]
   22160:	cmp	r0, ip
   22164:	sub	r0, r3, #36	; 0x24
   22168:	strhcc	ip, [r4, #128]	; 0x80
   2216c:	ldrh	r1, [r3, #12]
   22170:	sub	r3, r2, #1
   22174:	str	r0, [r4, #32]
   22178:	strh	r1, [r4, #130]	; 0x82
   2217c:	str	r3, [r4, #156]	; 0x9c
   22180:	mov	r0, r5
   22184:	add	sp, sp, #80	; 0x50
   22188:	ldrd	r4, [sp]
   2218c:	ldr	r6, [sp, #8]
   22190:	add	sp, sp, #12
   22194:	pop	{pc}		; (ldr pc, [sp], #4)
   22198:	mov	r2, #1
   2219c:	cmp	r3, #0
   221a0:	str	r0, [sp, #8]
   221a4:	str	r2, [sp, #12]
   221a8:	str	r1, [sp, #16]
   221ac:	movne	r1, r2
   221b0:	movne	r2, #2
   221b4:	str	r0, [sp, #20]
   221b8:	addne	r0, r0, r3
   221bc:	beq	220dc <flatcc_builder_end_struct@@Base+0xa0>
   221c0:	b	220b8 <flatcc_builder_end_struct@@Base+0x7c>
   221c4:	movw	r1, #58600	; 0xe4e8
   221c8:	movt	r1, #2
   221cc:	ldr	r3, [pc, #76]	; 22220 <flatcc_builder_end_struct@@Base+0x1e4>
   221d0:	movw	r0, #58792	; 0xe5a8
   221d4:	movt	r0, #2
   221d8:	movw	r2, #647	; 0x287
   221dc:	bl	12684 <__assert_fail@plt>
   221e0:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   221e4:	movw	r1, #58600	; 0xe4e8
   221e8:	movt	r1, #2
   221ec:	ldr	r3, [pc, #48]	; 22224 <flatcc_builder_end_struct@@Base+0x1e8>
   221f0:	movw	r0, #58864	; 0xe5f0
   221f4:	movt	r0, #2
   221f8:	movw	r2, #783	; 0x30f
   221fc:	bl	12684 <__assert_fail@plt>
   22200:	movw	r1, #58600	; 0xe4e8
   22204:	movt	r1, #2
   22208:	ldr	r3, [pc, #24]	; 22228 <flatcc_builder_end_struct@@Base+0x1ec>
   2220c:	movw	r0, #58920	; 0xe628
   22210:	movt	r0, #2
   22214:	mov	r2, #872	; 0x368
   22218:	bl	12684 <__assert_fail@plt>
   2221c:	andeq	sp, r2, r0, asr #28
   22220:	andeq	sp, r2, r4, asr #27
   22224:	andeq	lr, r2, r0, asr #1
   22228:	strdeq	lr, [r2], -ip

0002222c <flatcc_builder_extend_vector@@Base>:
   2222c:	ldr	ip, [r0, #32]
   22230:	strd	r4, [sp, #-20]!	; 0xffffffec
   22234:	mov	r4, r0
   22238:	ldr	r3, [ip, #20]
   2223c:	ldr	r0, [ip, #24]
   22240:	strd	r6, [sp, #8]
   22244:	str	lr, [sp, #16]
   22248:	sub	sp, sp, #12
   2224c:	adds	r3, r1, r3
   22250:	movcs	r5, #1
   22254:	movcc	r5, #0
   22258:	cmp	r0, r3
   2225c:	orrcc	r5, r5, #1
   22260:	cmp	r5, #0
   22264:	bne	22310 <flatcc_builder_extend_vector@@Base+0xe4>
   22268:	ldr	r2, [ip, #16]
   2226c:	ldr	r6, [r4, #20]
   22270:	str	r3, [ip, #20]
   22274:	ldr	r3, [r4, #24]
   22278:	mla	r2, r2, r1, r6
   2227c:	cmp	r2, r3
   22280:	str	r2, [r4, #20]
   22284:	bcs	222a4 <flatcc_builder_extend_vector@@Base+0x78>
   22288:	ldr	r0, [r4, #16]
   2228c:	add	r0, r0, r6
   22290:	add	sp, sp, #12
   22294:	ldrd	r4, [sp]
   22298:	ldrd	r6, [sp, #8]
   2229c:	add	sp, sp, #16
   222a0:	pop	{pc}		; (ldr pc, [sp], #4)
   222a4:	ldr	ip, [r4, #28]
   222a8:	mov	r0, #1
   222ac:	add	r1, r4, #60	; 0x3c
   222b0:	mov	r3, r0
   222b4:	str	r0, [sp]
   222b8:	ldr	r7, [r4, #48]	; 0x30
   222bc:	add	ip, ip, r0
   222c0:	ldr	r0, [r4, #40]	; 0x28
   222c4:	add	r2, ip, r2
   222c8:	blx	r7
   222cc:	cmp	r0, #0
   222d0:	bne	22308 <flatcc_builder_extend_vector@@Base+0xdc>
   222d4:	ldr	r2, [r4, #28]
   222d8:	ldr	r0, [r4, #60]	; 0x3c
   222dc:	ldr	r3, [r4, #64]	; 0x40
   222e0:	add	r0, r0, r2
   222e4:	sub	r3, r3, r2
   222e8:	mvn	r2, #3
   222ec:	str	r0, [r4, #16]
   222f0:	cmn	r3, #4
   222f4:	mvnhi	r3, #3
   222f8:	str	r3, [r4, #24]
   222fc:	ldr	r3, [r4, #32]
   22300:	str	r2, [r3, #4]
   22304:	b	2228c <flatcc_builder_extend_vector@@Base+0x60>
   22308:	mov	r0, r5
   2230c:	b	22290 <flatcc_builder_extend_vector@@Base+0x64>
   22310:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>

00022314 <flatcc_builder_vector_push@@Base>:
   22314:	ldr	r3, [r0, #32]
   22318:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2231c:	ldrh	r2, [r3, #14]
   22320:	strd	r6, [sp, #8]
   22324:	str	r8, [sp, #16]
   22328:	str	lr, [sp, #20]
   2232c:	sub	sp, sp, #8
   22330:	cmp	r2, #4
   22334:	bne	22438 <flatcc_builder_vector_push@@Base+0x124>
   22338:	mov	r6, r1
   2233c:	ldr	r2, [r3, #20]
   22340:	ldr	r1, [r3, #24]
   22344:	cmp	r2, r1
   22348:	bhi	2241c <flatcc_builder_vector_push@@Base+0x108>
   2234c:	add	r2, r2, #1
   22350:	ldr	r5, [r3, #16]
   22354:	mov	r4, r0
   22358:	ldr	r7, [r0, #20]
   2235c:	str	r2, [r3, #20]
   22360:	ldr	r3, [r0, #24]
   22364:	add	ip, r5, r7
   22368:	cmp	ip, r3
   2236c:	str	ip, [r0, #20]
   22370:	bcs	223b0 <flatcc_builder_vector_push@@Base+0x9c>
   22374:	ldr	r3, [r0, #16]
   22378:	adds	r3, r3, r7
   2237c:	beq	22394 <flatcc_builder_vector_push@@Base+0x80>
   22380:	mov	r0, r3
   22384:	mov	r2, r5
   22388:	mov	r1, r6
   2238c:	bl	12588 <memcpy@plt>
   22390:	mov	r3, r0
   22394:	mov	r0, r3
   22398:	add	sp, sp, #8
   2239c:	ldrd	r4, [sp]
   223a0:	ldrd	r6, [sp, #8]
   223a4:	ldr	r8, [sp, #16]
   223a8:	add	sp, sp, #20
   223ac:	pop	{pc}		; (ldr pc, [sp], #4)
   223b0:	ldr	r2, [r4, #28]
   223b4:	mov	r0, #1
   223b8:	add	r1, r4, #60	; 0x3c
   223bc:	mov	r3, r0
   223c0:	str	r0, [sp]
   223c4:	ldr	r8, [r4, #48]	; 0x30
   223c8:	add	r2, r2, r0
   223cc:	ldr	r0, [r4, #40]	; 0x28
   223d0:	add	r2, r2, ip
   223d4:	blx	r8
   223d8:	cmp	r0, #0
   223dc:	bne	22414 <flatcc_builder_vector_push@@Base+0x100>
   223e0:	ldr	r1, [r4, #28]
   223e4:	ldr	r3, [r4, #60]	; 0x3c
   223e8:	ldr	r2, [r4, #64]	; 0x40
   223ec:	add	r3, r3, r1
   223f0:	sub	r2, r2, r1
   223f4:	mvn	r1, #3
   223f8:	str	r3, [r4, #16]
   223fc:	cmn	r2, #4
   22400:	mvnhi	r2, #3
   22404:	str	r2, [r4, #24]
   22408:	ldr	r2, [r4, #32]
   2240c:	str	r1, [r2, #4]
   22410:	b	22378 <flatcc_builder_vector_push@@Base+0x64>
   22414:	mov	r3, #0
   22418:	b	22394 <flatcc_builder_vector_push@@Base+0x80>
   2241c:	movw	r1, #58600	; 0xe4e8
   22420:	movt	r1, #2
   22424:	ldr	r3, [pc, #40]	; 22454 <flatcc_builder_vector_push@@Base+0x140>
   22428:	movw	r0, #59008	; 0xe680
   2242c:	movt	r0, #2
   22430:	mov	r2, #908	; 0x38c
   22434:	bl	12684 <__assert_fail@plt>
   22438:	movw	r1, #58600	; 0xe4e8
   2243c:	movt	r1, #2
   22440:	ldr	r3, [pc, #12]	; 22454 <flatcc_builder_vector_push@@Base+0x140>
   22444:	movw	r0, #58964	; 0xe654
   22448:	movt	r0, #2
   2244c:	movw	r2, #907	; 0x38b
   22450:	bl	12684 <__assert_fail@plt>
   22454:	andeq	lr, r2, r8, lsl r1

00022458 <flatcc_builder_append_vector@@Base>:
   22458:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2245c:	mov	r5, r0
   22460:	ldr	r0, [r0, #32]
   22464:	ldrh	r3, [r0, #14]
   22468:	strd	r6, [sp, #8]
   2246c:	strd	r8, [sp, #16]
   22470:	str	lr, [sp, #24]
   22474:	sub	sp, sp, #12
   22478:	cmp	r3, #4
   2247c:	bne	2257c <flatcc_builder_append_vector@@Base+0x124>
   22480:	mov	r6, r1
   22484:	ldr	r1, [r0, #20]
   22488:	ldr	r4, [r0, #24]
   2248c:	adds	r1, r2, r1
   22490:	movcs	r3, #1
   22494:	movcc	r3, #0
   22498:	cmp	r4, r1
   2249c:	movcs	r4, r3
   224a0:	orrcc	r4, r3, #1
   224a4:	cmp	r4, #0
   224a8:	bne	22578 <flatcc_builder_append_vector@@Base+0x120>
   224ac:	ldr	r7, [r0, #16]
   224b0:	ldr	r8, [r5, #20]
   224b4:	ldr	r3, [r5, #24]
   224b8:	mul	r7, r7, r2
   224bc:	str	r1, [r0, #20]
   224c0:	add	ip, r7, r8
   224c4:	cmp	ip, r3
   224c8:	str	ip, [r5, #20]
   224cc:	bcs	2250c <flatcc_builder_append_vector@@Base+0xb4>
   224d0:	ldr	r3, [r5, #16]
   224d4:	adds	r3, r3, r8
   224d8:	beq	224f0 <flatcc_builder_append_vector@@Base+0x98>
   224dc:	mov	r0, r3
   224e0:	mov	r2, r7
   224e4:	mov	r1, r6
   224e8:	bl	12588 <memcpy@plt>
   224ec:	mov	r3, r0
   224f0:	mov	r0, r3
   224f4:	add	sp, sp, #12
   224f8:	ldrd	r4, [sp]
   224fc:	ldrd	r6, [sp, #8]
   22500:	ldrd	r8, [sp, #16]
   22504:	add	sp, sp, #24
   22508:	pop	{pc}		; (ldr pc, [sp], #4)
   2250c:	ldr	r2, [r5, #28]
   22510:	mov	r0, #1
   22514:	add	r1, r5, #60	; 0x3c
   22518:	mov	r3, r0
   2251c:	str	r0, [sp]
   22520:	ldr	r9, [r5, #48]	; 0x30
   22524:	add	r2, r2, r0
   22528:	ldr	r0, [r5, #40]	; 0x28
   2252c:	add	r2, r2, ip
   22530:	blx	r9
   22534:	cmp	r0, #0
   22538:	bne	22570 <flatcc_builder_append_vector@@Base+0x118>
   2253c:	ldr	r1, [r5, #28]
   22540:	ldr	r3, [r5, #60]	; 0x3c
   22544:	ldr	r2, [r5, #64]	; 0x40
   22548:	add	r3, r3, r1
   2254c:	sub	r2, r2, r1
   22550:	mvn	r1, #3
   22554:	str	r3, [r5, #16]
   22558:	cmn	r2, #4
   2255c:	mvnhi	r2, #3
   22560:	str	r2, [r5, #24]
   22564:	ldr	r2, [r5, #32]
   22568:	str	r1, [r2, #4]
   2256c:	b	224d4 <flatcc_builder_append_vector@@Base+0x7c>
   22570:	mov	r3, r4
   22574:	b	224f0 <flatcc_builder_append_vector@@Base+0x98>
   22578:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   2257c:	movw	r1, #58600	; 0xe4e8
   22580:	movt	r1, #2
   22584:	ldr	r3, [pc, #12]	; 22598 <flatcc_builder_append_vector@@Base+0x140>
   22588:	movw	r0, #58964	; 0xe654
   2258c:	movt	r0, #2
   22590:	movw	r2, #915	; 0x393
   22594:	bl	12684 <__assert_fail@plt>
   22598:	andeq	lr, r2, r4, lsr r1

0002259c <flatcc_builder_extend_offset_vector@@Base>:
   2259c:	ldr	ip, [r0, #32]
   225a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   225a4:	mov	r4, r0
   225a8:	ldr	r3, [ip, #20]
   225ac:	strd	r6, [sp, #8]
   225b0:	str	lr, [sp, #16]
   225b4:	sub	sp, sp, #12
   225b8:	adds	r3, r1, r3
   225bc:	movcs	r2, #1
   225c0:	movcc	r2, #0
   225c4:	cmn	r3, #-1073741823	; 0xc0000001
   225c8:	movls	r0, #0
   225cc:	movhi	r0, #1
   225d0:	orrs	r5, r2, r0
   225d4:	bne	2267c <flatcc_builder_extend_offset_vector@@Base+0xe0>
   225d8:	ldr	r6, [r4, #20]
   225dc:	str	r3, [ip, #20]
   225e0:	ldr	r3, [r4, #24]
   225e4:	add	r2, r6, r1, lsl #2
   225e8:	cmp	r2, r3
   225ec:	str	r2, [r4, #20]
   225f0:	bcs	22610 <flatcc_builder_extend_offset_vector@@Base+0x74>
   225f4:	ldr	r0, [r4, #16]
   225f8:	add	r0, r0, r6
   225fc:	add	sp, sp, #12
   22600:	ldrd	r4, [sp]
   22604:	ldrd	r6, [sp, #8]
   22608:	add	sp, sp, #16
   2260c:	pop	{pc}		; (ldr pc, [sp], #4)
   22610:	ldr	ip, [r4, #28]
   22614:	mov	r0, #1
   22618:	add	r1, r4, #60	; 0x3c
   2261c:	mov	r3, r0
   22620:	str	r0, [sp]
   22624:	ldr	r7, [r4, #48]	; 0x30
   22628:	add	ip, ip, r0
   2262c:	ldr	r0, [r4, #40]	; 0x28
   22630:	add	r2, ip, r2
   22634:	blx	r7
   22638:	cmp	r0, #0
   2263c:	bne	22674 <flatcc_builder_extend_offset_vector@@Base+0xd8>
   22640:	ldr	r2, [r4, #28]
   22644:	ldr	r0, [r4, #60]	; 0x3c
   22648:	ldr	r3, [r4, #64]	; 0x40
   2264c:	add	r0, r0, r2
   22650:	sub	r3, r3, r2
   22654:	mvn	r2, #3
   22658:	str	r0, [r4, #16]
   2265c:	cmn	r3, #4
   22660:	mvnhi	r3, #3
   22664:	str	r3, [r4, #24]
   22668:	ldr	r3, [r4, #32]
   2266c:	str	r2, [r3, #4]
   22670:	b	225f8 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   22674:	mov	r0, r5
   22678:	b	225fc <flatcc_builder_extend_offset_vector@@Base+0x60>
   2267c:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>

00022680 <flatcc_builder_offset_vector_push@@Base>:
   22680:	ldr	r2, [r0, #32]
   22684:	strd	r4, [sp, #-20]!	; 0xffffffec
   22688:	ldrh	r3, [r2, #14]
   2268c:	strd	r6, [sp, #8]
   22690:	str	lr, [sp, #16]
   22694:	sub	sp, sp, #12
   22698:	cmp	r3, #5
   2269c:	bne	22760 <flatcc_builder_offset_vector_push@@Base+0xe0>
   226a0:	ldr	r3, [r2, #20]
   226a4:	cmn	r3, #-1073741823	; 0xc0000001
   226a8:	beq	22758 <flatcc_builder_offset_vector_push@@Base+0xd8>
   226ac:	ldr	r5, [r0, #20]
   226b0:	mov	r6, r1
   226b4:	add	r3, r3, #1
   226b8:	mov	r4, r0
   226bc:	ldr	r1, [r0, #24]
   226c0:	str	r3, [r2, #20]
   226c4:	add	r3, r5, #4
   226c8:	cmp	r3, r1
   226cc:	str	r3, [r0, #20]
   226d0:	bcs	226f4 <flatcc_builder_offset_vector_push@@Base+0x74>
   226d4:	ldr	r3, [r0, #16]
   226d8:	adds	r0, r3, r5
   226dc:	strne	r6, [r3, r5]
   226e0:	add	sp, sp, #12
   226e4:	ldrd	r4, [sp]
   226e8:	ldrd	r6, [sp, #8]
   226ec:	add	sp, sp, #16
   226f0:	pop	{pc}		; (ldr pc, [sp], #4)
   226f4:	ldr	r2, [r4, #28]
   226f8:	mov	r0, #1
   226fc:	add	r1, r4, #60	; 0x3c
   22700:	mov	r3, r0
   22704:	str	r0, [sp]
   22708:	ldr	r0, [r4, #40]	; 0x28
   2270c:	add	r2, r5, r2
   22710:	ldr	r7, [r4, #48]	; 0x30
   22714:	add	r2, r2, #5
   22718:	blx	r7
   2271c:	cmp	r0, #0
   22720:	bne	22758 <flatcc_builder_offset_vector_push@@Base+0xd8>
   22724:	ldr	r1, [r4, #28]
   22728:	ldr	r3, [r4, #60]	; 0x3c
   2272c:	ldr	r2, [r4, #64]	; 0x40
   22730:	add	r3, r3, r1
   22734:	sub	r2, r2, r1
   22738:	mvn	r1, #3
   2273c:	str	r3, [r4, #16]
   22740:	cmn	r2, #4
   22744:	mvnhi	r2, #3
   22748:	str	r2, [r4, #24]
   2274c:	ldr	r2, [r4, #32]
   22750:	str	r1, [r2, #4]
   22754:	b	226d8 <flatcc_builder_offset_vector_push@@Base+0x58>
   22758:	mov	r0, #0
   2275c:	b	226e0 <flatcc_builder_offset_vector_push@@Base+0x60>
   22760:	movw	r1, #58600	; 0xe4e8
   22764:	movt	r1, #2
   22768:	ldr	r3, [pc, #12]	; 2277c <flatcc_builder_offset_vector_push@@Base+0xfc>
   2276c:	movw	r0, #59072	; 0xe6c0
   22770:	movt	r0, #2
   22774:	movw	r2, #934	; 0x3a6
   22778:	bl	12684 <__assert_fail@plt>
   2277c:	andeq	lr, r2, r4, asr r1

00022780 <flatcc_builder_append_offset_vector@@Base>:
   22780:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22784:	mov	r5, r0
   22788:	ldr	r0, [r0, #32]
   2278c:	ldrh	r3, [r0, #14]
   22790:	strd	r6, [sp, #8]
   22794:	strd	r8, [sp, #16]
   22798:	str	lr, [sp, #24]
   2279c:	sub	sp, sp, #12
   227a0:	cmp	r3, #5
   227a4:	bne	2289c <flatcc_builder_append_offset_vector@@Base+0x11c>
   227a8:	ldr	r3, [r0, #20]
   227ac:	mov	r7, r1
   227b0:	adds	r1, r2, r3
   227b4:	movcs	r4, #1
   227b8:	movcc	r4, #0
   227bc:	cmn	r1, #-1073741823	; 0xc0000001
   227c0:	movls	r3, #0
   227c4:	movhi	r3, #1
   227c8:	orrs	r4, r4, r3
   227cc:	bne	22898 <flatcc_builder_append_offset_vector@@Base+0x118>
   227d0:	ldr	r8, [r5, #20]
   227d4:	lsl	r6, r2, #2
   227d8:	ldr	r3, [r5, #24]
   227dc:	str	r1, [r0, #20]
   227e0:	add	ip, r6, r8
   227e4:	cmp	ip, r3
   227e8:	str	ip, [r5, #20]
   227ec:	bcs	2282c <flatcc_builder_append_offset_vector@@Base+0xac>
   227f0:	ldr	r3, [r5, #16]
   227f4:	adds	r3, r3, r8
   227f8:	beq	22810 <flatcc_builder_append_offset_vector@@Base+0x90>
   227fc:	mov	r0, r3
   22800:	mov	r2, r6
   22804:	mov	r1, r7
   22808:	bl	12588 <memcpy@plt>
   2280c:	mov	r3, r0
   22810:	mov	r0, r3
   22814:	add	sp, sp, #12
   22818:	ldrd	r4, [sp]
   2281c:	ldrd	r6, [sp, #8]
   22820:	ldrd	r8, [sp, #16]
   22824:	add	sp, sp, #24
   22828:	pop	{pc}		; (ldr pc, [sp], #4)
   2282c:	ldr	r2, [r5, #28]
   22830:	mov	r0, #1
   22834:	add	r1, r5, #60	; 0x3c
   22838:	mov	r3, r0
   2283c:	str	r0, [sp]
   22840:	ldr	r9, [r5, #48]	; 0x30
   22844:	add	r2, r2, r0
   22848:	ldr	r0, [r5, #40]	; 0x28
   2284c:	add	r2, r2, ip
   22850:	blx	r9
   22854:	cmp	r0, #0
   22858:	bne	22890 <flatcc_builder_append_offset_vector@@Base+0x110>
   2285c:	ldr	r1, [r5, #28]
   22860:	ldr	r3, [r5, #60]	; 0x3c
   22864:	ldr	r2, [r5, #64]	; 0x40
   22868:	add	r3, r3, r1
   2286c:	sub	r2, r2, r1
   22870:	mvn	r1, #3
   22874:	str	r3, [r5, #16]
   22878:	cmn	r2, #4
   2287c:	mvnhi	r2, #3
   22880:	str	r2, [r5, #24]
   22884:	ldr	r2, [r5, #32]
   22888:	str	r1, [r2, #4]
   2288c:	b	227f4 <flatcc_builder_append_offset_vector@@Base+0x74>
   22890:	mov	r3, r4
   22894:	b	22810 <flatcc_builder_append_offset_vector@@Base+0x90>
   22898:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   2289c:	movw	r1, #58600	; 0xe4e8
   228a0:	movt	r1, #2
   228a4:	ldr	r3, [pc, #12]	; 228b8 <flatcc_builder_append_offset_vector@@Base+0x138>
   228a8:	movw	r0, #59072	; 0xe6c0
   228ac:	movt	r0, #2
   228b0:	mov	r2, #948	; 0x3b4
   228b4:	bl	12684 <__assert_fail@plt>
   228b8:	andeq	lr, r2, r8, ror r1

000228bc <flatcc_builder_extend_string@@Base>:
   228bc:	ldr	r2, [r0, #32]
   228c0:	strd	r4, [sp, #-16]!
   228c4:	ldrh	r3, [r2, #14]
   228c8:	str	r6, [sp, #8]
   228cc:	str	lr, [sp, #12]
   228d0:	sub	sp, sp, #8
   228d4:	cmp	r3, #6
   228d8:	bne	22994 <flatcc_builder_extend_string@@Base+0xd8>
   228dc:	ldr	r3, [r2, #20]
   228e0:	adds	r3, r1, r3
   228e4:	bcs	22990 <flatcc_builder_extend_string@@Base+0xd4>
   228e8:	ldr	r5, [r0, #20]
   228ec:	mov	r4, r0
   228f0:	str	r3, [r2, #20]
   228f4:	ldr	r3, [r0, #24]
   228f8:	add	r2, r1, r5
   228fc:	cmp	r2, r3
   22900:	str	r2, [r0, #20]
   22904:	bcs	22924 <flatcc_builder_extend_string@@Base+0x68>
   22908:	ldr	r0, [r0, #16]
   2290c:	add	r0, r0, r5
   22910:	add	sp, sp, #8
   22914:	ldrd	r4, [sp]
   22918:	ldr	r6, [sp, #8]
   2291c:	add	sp, sp, #12
   22920:	pop	{pc}		; (ldr pc, [sp], #4)
   22924:	ldr	ip, [r4, #28]
   22928:	mov	r0, #1
   2292c:	add	r1, r4, #60	; 0x3c
   22930:	mov	r3, r0
   22934:	str	r0, [sp]
   22938:	ldr	r6, [r4, #48]	; 0x30
   2293c:	add	ip, ip, r0
   22940:	ldr	r0, [r4, #40]	; 0x28
   22944:	add	r2, ip, r2
   22948:	blx	r6
   2294c:	cmp	r0, #0
   22950:	bne	22988 <flatcc_builder_extend_string@@Base+0xcc>
   22954:	ldr	r2, [r4, #28]
   22958:	ldr	r0, [r4, #60]	; 0x3c
   2295c:	ldr	r3, [r4, #64]	; 0x40
   22960:	add	r0, r0, r2
   22964:	sub	r3, r3, r2
   22968:	mvn	r2, #3
   2296c:	str	r0, [r4, #16]
   22970:	cmn	r3, #4
   22974:	mvnhi	r3, #3
   22978:	str	r3, [r4, #24]
   2297c:	ldr	r3, [r4, #32]
   22980:	str	r2, [r3, #4]
   22984:	b	2290c <flatcc_builder_extend_string@@Base+0x50>
   22988:	mov	r0, #0
   2298c:	b	22910 <flatcc_builder_extend_string@@Base+0x54>
   22990:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   22994:	movw	r1, #58600	; 0xe4e8
   22998:	movt	r1, #2
   2299c:	ldr	r3, [pc, #12]	; 229b0 <flatcc_builder_extend_string@@Base+0xf4>
   229a0:	movw	r0, #58728	; 0xe568
   229a4:	movt	r0, #2
   229a8:	movw	r2, #957	; 0x3bd
   229ac:	bl	12684 <__assert_fail@plt>
   229b0:	muleq	r2, ip, r1

000229b4 <flatcc_builder_append_string@@Base>:
   229b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   229b8:	strd	r6, [sp, #8]
   229bc:	mov	r6, r1
   229c0:	ldr	r1, [r0, #32]
   229c4:	str	r8, [sp, #16]
   229c8:	str	lr, [sp, #20]
   229cc:	sub	sp, sp, #8
   229d0:	ldrh	r3, [r1, #14]
   229d4:	cmp	r3, #6
   229d8:	bne	22ab8 <flatcc_builder_append_string@@Base+0x104>
   229dc:	ldr	r3, [r1, #20]
   229e0:	mov	r5, r2
   229e4:	adds	r3, r2, r3
   229e8:	bcs	22ab4 <flatcc_builder_append_string@@Base+0x100>
   229ec:	ldr	r7, [r0, #20]
   229f0:	mov	r4, r0
   229f4:	str	r3, [r1, #20]
   229f8:	ldr	r3, [r0, #24]
   229fc:	add	ip, r2, r7
   22a00:	cmp	ip, r3
   22a04:	str	ip, [r0, #20]
   22a08:	bcs	22a48 <flatcc_builder_append_string@@Base+0x94>
   22a0c:	ldr	r3, [r0, #16]
   22a10:	adds	r3, r3, r7
   22a14:	beq	22a2c <flatcc_builder_append_string@@Base+0x78>
   22a18:	mov	r0, r3
   22a1c:	mov	r2, r5
   22a20:	mov	r1, r6
   22a24:	bl	12588 <memcpy@plt>
   22a28:	mov	r3, r0
   22a2c:	mov	r0, r3
   22a30:	add	sp, sp, #8
   22a34:	ldrd	r4, [sp]
   22a38:	ldrd	r6, [sp, #8]
   22a3c:	ldr	r8, [sp, #16]
   22a40:	add	sp, sp, #20
   22a44:	pop	{pc}		; (ldr pc, [sp], #4)
   22a48:	ldr	r2, [r4, #28]
   22a4c:	mov	r0, #1
   22a50:	add	r1, r4, #60	; 0x3c
   22a54:	mov	r3, r0
   22a58:	str	r0, [sp]
   22a5c:	ldr	r8, [r4, #48]	; 0x30
   22a60:	add	r2, r2, r0
   22a64:	ldr	r0, [r4, #40]	; 0x28
   22a68:	add	r2, r2, ip
   22a6c:	blx	r8
   22a70:	cmp	r0, #0
   22a74:	bne	22aac <flatcc_builder_append_string@@Base+0xf8>
   22a78:	ldr	r1, [r4, #28]
   22a7c:	ldr	r3, [r4, #60]	; 0x3c
   22a80:	ldr	r2, [r4, #64]	; 0x40
   22a84:	add	r3, r3, r1
   22a88:	sub	r2, r2, r1
   22a8c:	mvn	r1, #3
   22a90:	str	r3, [r4, #16]
   22a94:	cmn	r2, #4
   22a98:	mvnhi	r2, #3
   22a9c:	str	r2, [r4, #24]
   22aa0:	ldr	r2, [r4, #32]
   22aa4:	str	r1, [r2, #4]
   22aa8:	b	22a10 <flatcc_builder_append_string@@Base+0x5c>
   22aac:	mov	r3, #0
   22ab0:	b	22a2c <flatcc_builder_append_string@@Base+0x78>
   22ab4:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   22ab8:	bl	20ca4 <flatcc_builder_default_alloc@@Base+0x214>

00022abc <flatcc_builder_append_string_str@@Base>:
   22abc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22ac0:	mov	r4, r0
   22ac4:	mov	r0, r1
   22ac8:	strd	r6, [sp, #8]
   22acc:	mov	r6, r1
   22ad0:	str	r8, [sp, #16]
   22ad4:	str	lr, [sp, #20]
   22ad8:	sub	sp, sp, #8
   22adc:	bl	1260c <strlen@plt>
   22ae0:	ldr	r2, [r4, #32]
   22ae4:	ldrh	r3, [r2, #14]
   22ae8:	cmp	r3, #6
   22aec:	bne	22bc8 <flatcc_builder_append_string_str@@Base+0x10c>
   22af0:	ldr	r3, [r2, #20]
   22af4:	mov	r5, r0
   22af8:	adds	r3, r0, r3
   22afc:	bcs	22bc4 <flatcc_builder_append_string_str@@Base+0x108>
   22b00:	ldr	r7, [r4, #20]
   22b04:	str	r3, [r2, #20]
   22b08:	ldr	r3, [r4, #24]
   22b0c:	add	ip, r0, r7
   22b10:	cmp	ip, r3
   22b14:	str	ip, [r4, #20]
   22b18:	bcs	22b58 <flatcc_builder_append_string_str@@Base+0x9c>
   22b1c:	ldr	r3, [r4, #16]
   22b20:	adds	r3, r3, r7
   22b24:	beq	22b3c <flatcc_builder_append_string_str@@Base+0x80>
   22b28:	mov	r0, r3
   22b2c:	mov	r2, r5
   22b30:	mov	r1, r6
   22b34:	bl	12588 <memcpy@plt>
   22b38:	mov	r3, r0
   22b3c:	mov	r0, r3
   22b40:	add	sp, sp, #8
   22b44:	ldrd	r4, [sp]
   22b48:	ldrd	r6, [sp, #8]
   22b4c:	ldr	r8, [sp, #16]
   22b50:	add	sp, sp, #20
   22b54:	pop	{pc}		; (ldr pc, [sp], #4)
   22b58:	ldr	r2, [r4, #28]
   22b5c:	mov	r0, #1
   22b60:	add	r1, r4, #60	; 0x3c
   22b64:	mov	r3, r0
   22b68:	str	r0, [sp]
   22b6c:	ldr	r8, [r4, #48]	; 0x30
   22b70:	add	r2, r2, r0
   22b74:	ldr	r0, [r4, #40]	; 0x28
   22b78:	add	r2, r2, ip
   22b7c:	blx	r8
   22b80:	cmp	r0, #0
   22b84:	bne	22bbc <flatcc_builder_append_string_str@@Base+0x100>
   22b88:	ldr	r1, [r4, #28]
   22b8c:	ldr	r3, [r4, #60]	; 0x3c
   22b90:	ldr	r2, [r4, #64]	; 0x40
   22b94:	add	r3, r3, r1
   22b98:	sub	r2, r2, r1
   22b9c:	mvn	r1, #3
   22ba0:	str	r3, [r4, #16]
   22ba4:	cmn	r2, #4
   22ba8:	mvnhi	r2, #3
   22bac:	str	r2, [r4, #24]
   22bb0:	ldr	r2, [r4, #32]
   22bb4:	str	r1, [r2, #4]
   22bb8:	b	22b20 <flatcc_builder_append_string_str@@Base+0x64>
   22bbc:	mov	r3, #0
   22bc0:	b	22b3c <flatcc_builder_append_string_str@@Base+0x80>
   22bc4:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   22bc8:	bl	20ca4 <flatcc_builder_default_alloc@@Base+0x214>

00022bcc <flatcc_builder_append_string_strn@@Base>:
   22bcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22bd0:	mov	r4, r0
   22bd4:	mov	r5, r2
   22bd8:	strd	r6, [sp, #8]
   22bdc:	mov	r6, r1
   22be0:	mov	r1, #0
   22be4:	mov	r0, r6
   22be8:	str	r8, [sp, #16]
   22bec:	str	lr, [sp, #20]
   22bf0:	sub	sp, sp, #8
   22bf4:	bl	12648 <memchr@plt>
   22bf8:	ldr	r2, [r4, #32]
   22bfc:	cmp	r0, #0
   22c00:	subne	r5, r0, r6
   22c04:	ldrh	r3, [r2, #14]
   22c08:	cmp	r3, #6
   22c0c:	bne	22ce4 <flatcc_builder_append_string_strn@@Base+0x118>
   22c10:	ldr	r3, [r2, #20]
   22c14:	adds	r3, r5, r3
   22c18:	bcs	22ce0 <flatcc_builder_append_string_strn@@Base+0x114>
   22c1c:	ldr	r7, [r4, #20]
   22c20:	str	r3, [r2, #20]
   22c24:	ldr	r3, [r4, #24]
   22c28:	add	ip, r5, r7
   22c2c:	cmp	ip, r3
   22c30:	str	ip, [r4, #20]
   22c34:	bcs	22c74 <flatcc_builder_append_string_strn@@Base+0xa8>
   22c38:	ldr	r3, [r4, #16]
   22c3c:	adds	r3, r3, r7
   22c40:	beq	22c58 <flatcc_builder_append_string_strn@@Base+0x8c>
   22c44:	mov	r0, r3
   22c48:	mov	r2, r5
   22c4c:	mov	r1, r6
   22c50:	bl	12588 <memcpy@plt>
   22c54:	mov	r3, r0
   22c58:	mov	r0, r3
   22c5c:	add	sp, sp, #8
   22c60:	ldrd	r4, [sp]
   22c64:	ldrd	r6, [sp, #8]
   22c68:	ldr	r8, [sp, #16]
   22c6c:	add	sp, sp, #20
   22c70:	pop	{pc}		; (ldr pc, [sp], #4)
   22c74:	ldr	r2, [r4, #28]
   22c78:	mov	r0, #1
   22c7c:	add	r1, r4, #60	; 0x3c
   22c80:	mov	r3, r0
   22c84:	str	r0, [sp]
   22c88:	ldr	r8, [r4, #48]	; 0x30
   22c8c:	add	r2, r2, r0
   22c90:	ldr	r0, [r4, #40]	; 0x28
   22c94:	add	r2, r2, ip
   22c98:	blx	r8
   22c9c:	cmp	r0, #0
   22ca0:	bne	22cd8 <flatcc_builder_append_string_strn@@Base+0x10c>
   22ca4:	ldr	r1, [r4, #28]
   22ca8:	ldr	r3, [r4, #60]	; 0x3c
   22cac:	ldr	r2, [r4, #64]	; 0x40
   22cb0:	add	r3, r3, r1
   22cb4:	sub	r2, r2, r1
   22cb8:	mvn	r1, #3
   22cbc:	str	r3, [r4, #16]
   22cc0:	cmn	r2, #4
   22cc4:	mvnhi	r2, #3
   22cc8:	str	r2, [r4, #24]
   22ccc:	ldr	r2, [r4, #32]
   22cd0:	str	r1, [r2, #4]
   22cd4:	b	22c3c <flatcc_builder_append_string_strn@@Base+0x70>
   22cd8:	mov	r3, #0
   22cdc:	b	22c58 <flatcc_builder_append_string_strn@@Base+0x8c>
   22ce0:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   22ce4:	bl	20ca4 <flatcc_builder_default_alloc@@Base+0x214>

00022ce8 <flatcc_builder_truncate_vector@@Base>:
   22ce8:	mov	r3, r0
   22cec:	ldr	r0, [r0, #32]
   22cf0:	str	r4, [sp, #-8]!
   22cf4:	ldrh	r2, [r0, #14]
   22cf8:	str	lr, [sp, #4]
   22cfc:	cmp	r2, #4
   22d00:	bne	22d50 <flatcc_builder_truncate_vector@@Base+0x68>
   22d04:	mov	lr, r1
   22d08:	ldr	r1, [r0, #20]
   22d0c:	cmp	r1, lr
   22d10:	bcc	22d6c <flatcc_builder_truncate_vector@@Base+0x84>
   22d14:	ldr	r2, [r0, #16]
   22d18:	sub	ip, r1, lr
   22d1c:	mov	r1, #0
   22d20:	str	ip, [r0, #20]
   22d24:	ldr	r0, [r3, #16]
   22d28:	ldr	ip, [r3, #20]
   22d2c:	mul	r2, r2, lr
   22d30:	sub	ip, ip, r2
   22d34:	add	r0, r0, ip
   22d38:	str	ip, [r3, #20]
   22d3c:	bl	12630 <memset@plt>
   22d40:	ldr	r4, [sp]
   22d44:	add	sp, sp, #4
   22d48:	mov	r0, #0
   22d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   22d50:	movw	r1, #58600	; 0xe4e8
   22d54:	movt	r1, #2
   22d58:	ldr	r3, [pc, #40]	; 22d88 <flatcc_builder_truncate_vector@@Base+0xa0>
   22d5c:	movw	r0, #58964	; 0xe654
   22d60:	movt	r0, #2
   22d64:	movw	r2, #985	; 0x3d9
   22d68:	bl	12684 <__assert_fail@plt>
   22d6c:	movw	r1, #58600	; 0xe4e8
   22d70:	movt	r1, #2
   22d74:	ldr	r3, [pc, #12]	; 22d88 <flatcc_builder_truncate_vector@@Base+0xa0>
   22d78:	movw	r0, #59124	; 0xe6f4
   22d7c:	movt	r0, #2
   22d80:	movw	r2, #986	; 0x3da
   22d84:	bl	12684 <__assert_fail@plt>
   22d88:			; <UNDEFINED> instruction: 0x0002e1bc

00022d8c <flatcc_builder_truncate_offset_vector@@Base>:
   22d8c:	mov	r3, r0
   22d90:	ldr	r0, [r0, #32]
   22d94:	str	r4, [sp, #-8]!
   22d98:	ldrh	r2, [r0, #14]
   22d9c:	str	lr, [sp, #4]
   22da0:	cmp	r2, #5
   22da4:	bne	22df4 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   22da8:	mov	lr, r1
   22dac:	ldr	r1, [r0, #20]
   22db0:	cmp	r1, lr
   22db4:	bcc	22e10 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   22db8:	ldr	r2, [r0, #16]
   22dbc:	sub	ip, r1, lr
   22dc0:	mov	r1, #0
   22dc4:	str	ip, [r0, #20]
   22dc8:	ldr	r0, [r3, #16]
   22dcc:	ldr	ip, [r3, #20]
   22dd0:	mul	r2, r2, lr
   22dd4:	sub	ip, ip, r2
   22dd8:	add	r0, r0, ip
   22ddc:	str	ip, [r3, #20]
   22de0:	bl	12630 <memset@plt>
   22de4:	ldr	r4, [sp]
   22de8:	add	sp, sp, #4
   22dec:	mov	r0, #0
   22df0:	pop	{pc}		; (ldr pc, [sp], #4)
   22df4:	movw	r1, #58600	; 0xe4e8
   22df8:	movt	r1, #2
   22dfc:	ldr	r3, [pc, #40]	; 22e2c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   22e00:	movw	r0, #59072	; 0xe6c0
   22e04:	movt	r0, #2
   22e08:	movw	r2, #994	; 0x3e2
   22e0c:	bl	12684 <__assert_fail@plt>
   22e10:	movw	r1, #58600	; 0xe4e8
   22e14:	movt	r1, #2
   22e18:	ldr	r3, [pc, #12]	; 22e2c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   22e1c:	movw	r0, #59160	; 0xe718
   22e20:	movt	r0, #2
   22e24:	movw	r2, #995	; 0x3e3
   22e28:	bl	12684 <__assert_fail@plt>
   22e2c:	ldrdeq	lr, [r2], -ip

00022e30 <flatcc_builder_truncate_string@@Base>:
   22e30:	str	r4, [sp, #-8]!
   22e34:	str	lr, [sp, #4]
   22e38:	ldr	lr, [r0, #32]
   22e3c:	ldrh	r2, [lr, #14]
   22e40:	cmp	r2, #6
   22e44:	bne	22e94 <flatcc_builder_truncate_string@@Base+0x64>
   22e48:	ldr	r2, [lr, #20]
   22e4c:	mov	ip, r1
   22e50:	cmp	r2, r1
   22e54:	bcc	22eb0 <flatcc_builder_truncate_string@@Base+0x80>
   22e58:	sub	r1, r2, r1
   22e5c:	mov	r3, r0
   22e60:	ldr	r0, [r0, #16]
   22e64:	mov	r2, ip
   22e68:	str	r1, [lr, #20]
   22e6c:	mov	r1, #0
   22e70:	ldr	lr, [r3, #20]
   22e74:	sub	ip, lr, ip
   22e78:	add	r0, r0, ip
   22e7c:	str	ip, [r3, #20]
   22e80:	bl	12630 <memset@plt>
   22e84:	ldr	r4, [sp]
   22e88:	add	sp, sp, #4
   22e8c:	mov	r0, #0
   22e90:	pop	{pc}		; (ldr pc, [sp], #4)
   22e94:	movw	r1, #58600	; 0xe4e8
   22e98:	movt	r1, #2
   22e9c:	ldr	r3, [pc, #40]	; 22ecc <flatcc_builder_truncate_string@@Base+0x9c>
   22ea0:	movw	r0, #58728	; 0xe568
   22ea4:	movt	r0, #2
   22ea8:	movw	r2, #1003	; 0x3eb
   22eac:	bl	12684 <__assert_fail@plt>
   22eb0:	movw	r1, #58600	; 0xe4e8
   22eb4:	movt	r1, #2
   22eb8:	ldr	r3, [pc, #12]	; 22ecc <flatcc_builder_truncate_string@@Base+0x9c>
   22ebc:	movw	r0, #59220	; 0xe754
   22ec0:	movt	r0, #2
   22ec4:	mov	r2, #1004	; 0x3ec
   22ec8:	bl	12684 <__assert_fail@plt>
   22ecc:	andeq	lr, r2, r4, lsl #4

00022ed0 <flatcc_builder_start_vector@@Base>:
   22ed0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   22ed4:	mov	r4, r0
   22ed8:	mov	r5, r3
   22edc:	ldr	r0, [r0, #156]	; 0x9c
   22ee0:	cmp	r2, #4
   22ee4:	ldr	r3, [r4, #160]	; 0xa0
   22ee8:	strd	r6, [sp, #8]
   22eec:	movcs	r7, r2
   22ef0:	movcc	r7, #4
   22ef4:	mov	r6, r1
   22ef8:	strd	r8, [sp, #16]
   22efc:	add	r2, r0, #1
   22f00:	str	lr, [sp, #24]
   22f04:	sub	sp, sp, #12
   22f08:	cmp	r2, r3
   22f0c:	str	r2, [r4, #156]	; 0x9c
   22f10:	ble	2302c <flatcc_builder_start_vector@@Base+0x15c>
   22f14:	ldr	r3, [r4, #176]	; 0xb0
   22f18:	cmp	r3, #0
   22f1c:	cmpgt	r2, r3
   22f20:	movgt	r3, #1
   22f24:	movle	r3, #0
   22f28:	bgt	2303c <flatcc_builder_start_vector@@Base+0x16c>
   22f2c:	add	r0, r0, r0, lsl #3
   22f30:	ldr	r1, [r4, #88]	; 0x58
   22f34:	lsl	r8, r0, #2
   22f38:	add	r2, r8, #36	; 0x24
   22f3c:	cmp	r2, r1
   22f40:	bls	22f64 <flatcc_builder_start_vector@@Base+0x94>
   22f44:	mov	ip, #4
   22f48:	add	r1, r4, #84	; 0x54
   22f4c:	ldr	r0, [r4, #40]	; 0x28
   22f50:	str	ip, [sp]
   22f54:	ldr	r9, [r4, #48]	; 0x30
   22f58:	blx	r9
   22f5c:	cmp	r0, #0
   22f60:	bne	23044 <flatcc_builder_start_vector@@Base+0x174>
   22f64:	ldr	r3, [r4, #84]	; 0x54
   22f68:	add	r3, r3, r8
   22f6c:	cmp	r3, #0
   22f70:	str	r3, [r4, #32]
   22f74:	beq	2303c <flatcc_builder_start_vector@@Base+0x16c>
   22f78:	ldr	r2, [r4, #88]	; 0x58
   22f7c:	movw	r0, #36409	; 0x8e39
   22f80:	movt	r0, #14563	; 0x38e3
   22f84:	ldr	r1, [r4, #176]	; 0xb0
   22f88:	umull	r0, r2, r0, r2
   22f8c:	lsr	r2, r2, #3
   22f90:	cmp	r1, #0
   22f94:	cmpgt	r2, r1
   22f98:	movgt	r2, r1
   22f9c:	str	r2, [r4, #160]	; 0xa0
   22fa0:	ldr	r2, [r4, #20]
   22fa4:	mvn	r9, #3
   22fa8:	mov	ip, #0
   22fac:	ldr	r0, [r4, #28]
   22fb0:	ldrh	lr, [r4, #130]	; 0x82
   22fb4:	ldr	r1, [r4, #64]	; 0x40
   22fb8:	ldr	r8, [r4, #60]	; 0x3c
   22fbc:	str	r2, [r3, #8]
   22fc0:	add	r2, r2, r0
   22fc4:	add	r2, r2, #7
   22fc8:	strh	lr, [r3, #12]
   22fcc:	bic	r2, r2, #7
   22fd0:	strh	r7, [r4, #130]	; 0x82
   22fd4:	mov	r7, #4
   22fd8:	sub	r1, r1, r2
   22fdc:	str	r0, [r3]
   22fe0:	mov	r0, ip
   22fe4:	cmp	r1, r9
   22fe8:	add	lr, r8, r2
   22fec:	str	ip, [r4, #20]
   22ff0:	movhi	r1, r9
   22ff4:	str	r2, [r4, #28]
   22ff8:	strh	r7, [r3, #14]
   22ffc:	str	r6, [r3, #16]
   23000:	str	ip, [r3, #20]
   23004:	str	r5, [r3, #24]
   23008:	str	lr, [r4, #16]
   2300c:	str	r1, [r4, #24]
   23010:	str	r9, [r3, #4]
   23014:	add	sp, sp, #12
   23018:	ldrd	r4, [sp]
   2301c:	ldrd	r6, [sp, #8]
   23020:	ldrd	r8, [sp, #16]
   23024:	add	sp, sp, #24
   23028:	pop	{pc}		; (ldr pc, [sp], #4)
   2302c:	ldr	r3, [r4, #32]
   23030:	add	r3, r3, #36	; 0x24
   23034:	str	r3, [r4, #32]
   23038:	b	22fa0 <flatcc_builder_start_vector@@Base+0xd0>
   2303c:	mvn	r0, #0
   23040:	b	23014 <flatcc_builder_start_vector@@Base+0x144>
   23044:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

00023048 <flatcc_builder_start_offset_vector@@Base>:
   23048:	ldrd	r2, [r0, #156]	; 0x9c
   2304c:	strd	r4, [sp, #-16]!
   23050:	mov	r4, r0
   23054:	str	r6, [sp, #8]
   23058:	str	lr, [sp, #12]
   2305c:	sub	sp, sp, #8
   23060:	add	r1, r2, #1
   23064:	cmp	r1, r3
   23068:	str	r1, [r0, #156]	; 0x9c
   2306c:	ble	23184 <flatcc_builder_start_offset_vector@@Base+0x13c>
   23070:	ldr	r3, [r0, #176]	; 0xb0
   23074:	cmp	r3, #0
   23078:	cmpgt	r1, r3
   2307c:	movgt	r3, #1
   23080:	movle	r3, #0
   23084:	bgt	23194 <flatcc_builder_start_offset_vector@@Base+0x14c>
   23088:	add	r2, r2, r2, lsl #3
   2308c:	ldr	r1, [r0, #88]	; 0x58
   23090:	lsl	r5, r2, #2
   23094:	add	r2, r5, #36	; 0x24
   23098:	cmp	r2, r1
   2309c:	bls	230c0 <flatcc_builder_start_offset_vector@@Base+0x78>
   230a0:	mov	ip, #4
   230a4:	add	r1, r0, #84	; 0x54
   230a8:	ldr	r0, [r0, #40]	; 0x28
   230ac:	str	ip, [sp]
   230b0:	ldr	r6, [r4, #48]	; 0x30
   230b4:	blx	r6
   230b8:	cmp	r0, #0
   230bc:	bne	2319c <flatcc_builder_start_offset_vector@@Base+0x154>
   230c0:	ldr	r3, [r4, #84]	; 0x54
   230c4:	add	r3, r3, r5
   230c8:	cmp	r3, #0
   230cc:	str	r3, [r4, #32]
   230d0:	beq	23194 <flatcc_builder_start_offset_vector@@Base+0x14c>
   230d4:	ldr	r2, [r4, #88]	; 0x58
   230d8:	movw	r0, #36409	; 0x8e39
   230dc:	movt	r0, #14563	; 0x38e3
   230e0:	ldr	r1, [r4, #176]	; 0xb0
   230e4:	umull	r0, r2, r0, r2
   230e8:	lsr	r2, r2, #3
   230ec:	cmp	r1, #0
   230f0:	cmpgt	r2, r1
   230f4:	movgt	r2, r1
   230f8:	str	r2, [r4, #160]	; 0xa0
   230fc:	ldr	r2, [r4, #20]
   23100:	mvn	r5, #3
   23104:	mov	lr, #0
   23108:	ldr	r0, [r4, #28]
   2310c:	ldrh	r6, [r4, #130]	; 0x82
   23110:	ldr	ip, [r4, #60]	; 0x3c
   23114:	ldr	r1, [r4, #64]	; 0x40
   23118:	str	r2, [r3, #8]
   2311c:	add	r2, r2, r0
   23120:	add	r2, r2, #7
   23124:	strh	r6, [r3, #12]
   23128:	mov	r6, #4
   2312c:	bic	r2, r2, #7
   23130:	add	ip, ip, r2
   23134:	strh	r6, [r4, #130]	; 0x82
   23138:	sub	r1, r1, r2
   2313c:	str	r0, [r3]
   23140:	mov	r0, lr
   23144:	cmp	r1, r5
   23148:	str	lr, [r4, #20]
   2314c:	movhi	r1, r5
   23150:	str	r2, [r4, #28]
   23154:	mov	r2, #5
   23158:	strh	r2, [r3, #14]
   2315c:	str	r6, [r3, #16]
   23160:	str	lr, [r3, #20]
   23164:	str	ip, [r4, #16]
   23168:	str	r1, [r4, #24]
   2316c:	str	r5, [r3, #4]
   23170:	add	sp, sp, #8
   23174:	ldrd	r4, [sp]
   23178:	ldr	r6, [sp, #8]
   2317c:	add	sp, sp, #12
   23180:	pop	{pc}		; (ldr pc, [sp], #4)
   23184:	ldr	r3, [r0, #32]
   23188:	add	r3, r3, #36	; 0x24
   2318c:	str	r3, [r0, #32]
   23190:	b	230fc <flatcc_builder_start_offset_vector@@Base+0xb4>
   23194:	mvn	r0, #0
   23198:	b	23170 <flatcc_builder_start_offset_vector@@Base+0x128>
   2319c:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

000231a0 <flatcc_builder_create_offset_vector@@Base>:
   231a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   231a4:	mov	r5, r2
   231a8:	mov	r4, r0
   231ac:	ldr	r3, [r0, #160]	; 0xa0
   231b0:	strd	r6, [sp, #8]
   231b4:	mov	r6, r1
   231b8:	ldr	r1, [r0, #156]	; 0x9c
   231bc:	strd	r8, [sp, #16]
   231c0:	str	lr, [sp, #24]
   231c4:	sub	sp, sp, #12
   231c8:	add	r2, r1, #1
   231cc:	cmp	r2, r3
   231d0:	str	r2, [r0, #156]	; 0x9c
   231d4:	ble	2334c <flatcc_builder_create_offset_vector@@Base+0x1ac>
   231d8:	ldr	r3, [r0, #176]	; 0xb0
   231dc:	cmp	r2, r3
   231e0:	cmpgt	r3, #0
   231e4:	movgt	r3, #1
   231e8:	movle	r3, #0
   231ec:	bgt	2332c <flatcc_builder_create_offset_vector@@Base+0x18c>
   231f0:	add	r1, r1, r1, lsl #3
   231f4:	ldr	r0, [r0, #88]	; 0x58
   231f8:	lsl	r7, r1, #2
   231fc:	add	r2, r7, #36	; 0x24
   23200:	cmp	r2, r0
   23204:	bls	23228 <flatcc_builder_create_offset_vector@@Base+0x88>
   23208:	mov	ip, #4
   2320c:	add	r1, r4, #84	; 0x54
   23210:	ldr	r0, [r4, #40]	; 0x28
   23214:	str	ip, [sp]
   23218:	ldr	r8, [r4, #48]	; 0x30
   2321c:	blx	r8
   23220:	cmp	r0, #0
   23224:	bne	233f0 <flatcc_builder_create_offset_vector@@Base+0x250>
   23228:	ldr	r3, [r4, #84]	; 0x54
   2322c:	add	r3, r3, r7
   23230:	cmp	r3, #0
   23234:	str	r3, [r4, #32]
   23238:	beq	2332c <flatcc_builder_create_offset_vector@@Base+0x18c>
   2323c:	ldr	r2, [r4, #88]	; 0x58
   23240:	movw	r0, #36409	; 0x8e39
   23244:	movt	r0, #14563	; 0x38e3
   23248:	ldr	r1, [r4, #176]	; 0xb0
   2324c:	umull	r0, r2, r0, r2
   23250:	lsr	r2, r2, #3
   23254:	cmp	r2, r1
   23258:	cmpgt	r1, #0
   2325c:	movgt	r2, r1
   23260:	str	r2, [r4, #160]	; 0xa0
   23264:	ldr	r2, [r4, #20]
   23268:	mvn	lr, #3
   2326c:	mov	r0, #4
   23270:	ldr	r8, [r4, #28]
   23274:	ldrh	r7, [r4, #130]	; 0x82
   23278:	ldr	r1, [r4, #64]	; 0x40
   2327c:	ldr	r9, [r4, #60]	; 0x3c
   23280:	str	r2, [r3, #8]
   23284:	add	r2, r2, r8
   23288:	add	r2, r2, #7
   2328c:	strh	r7, [r3, #12]
   23290:	mov	r7, #0
   23294:	bic	r2, r2, #7
   23298:	strh	r0, [r4, #130]	; 0x82
   2329c:	sub	r1, r1, r2
   232a0:	str	r8, [r3]
   232a4:	cmp	r1, lr
   232a8:	add	r9, r9, r2
   232ac:	str	r7, [r4, #20]
   232b0:	movls	ip, r1
   232b4:	movhi	ip, lr
   232b8:	str	r2, [r4, #28]
   232bc:	mov	r1, #5
   232c0:	strh	r1, [r3, #14]
   232c4:	mov	r1, r5
   232c8:	str	r0, [r3, #16]
   232cc:	mov	r0, r4
   232d0:	str	r7, [r3, #20]
   232d4:	str	r9, [r4, #16]
   232d8:	str	ip, [r4, #24]
   232dc:	str	lr, [r3, #4]
   232e0:	bl	2259c <flatcc_builder_extend_offset_vector@@Base>
   232e4:	cmp	r0, r7
   232e8:	beq	2332c <flatcc_builder_create_offset_vector@@Base+0x18c>
   232ec:	lsl	r2, r5, #2
   232f0:	mov	r1, r6
   232f4:	bl	12588 <memcpy@plt>
   232f8:	ldr	r3, [r4, #32]
   232fc:	ldrh	r2, [r3, #14]
   23300:	cmp	r2, #5
   23304:	bne	233d4 <flatcc_builder_create_offset_vector@@Base+0x234>
   23308:	ldr	r2, [r3, #20]
   2330c:	cmn	r2, #-1073741823	; 0xc0000001
   23310:	bhi	2332c <flatcc_builder_create_offset_vector@@Base+0x18c>
   23314:	mov	r3, r7
   23318:	mov	r0, r4
   2331c:	ldr	r1, [r4, #16]
   23320:	bl	20e18 <flatcc_builder_default_alloc@@Base+0x388>
   23324:	subs	r5, r0, #0
   23328:	bne	2335c <flatcc_builder_create_offset_vector@@Base+0x1bc>
   2332c:	mov	r5, #0
   23330:	mov	r0, r5
   23334:	add	sp, sp, #12
   23338:	ldrd	r4, [sp]
   2333c:	ldrd	r6, [sp, #8]
   23340:	ldrd	r8, [sp, #16]
   23344:	add	sp, sp, #24
   23348:	pop	{pc}		; (ldr pc, [sp], #4)
   2334c:	ldr	r3, [r0, #32]
   23350:	add	r3, r3, #36	; 0x24
   23354:	str	r3, [r0, #32]
   23358:	b	23264 <flatcc_builder_create_offset_vector@@Base+0xc4>
   2335c:	mov	r1, r7
   23360:	ldr	r0, [r4, #16]
   23364:	ldr	r2, [r4, #20]
   23368:	bl	12630 <memset@plt>
   2336c:	ldr	r3, [r4, #32]
   23370:	ldr	r0, [r4, #60]	; 0x3c
   23374:	ldr	r2, [r4, #64]	; 0x40
   23378:	ldr	ip, [r3]
   2337c:	ldmib	r3, {r1, lr}
   23380:	add	r0, r0, ip
   23384:	sub	r2, r2, ip
   23388:	str	r0, [r4, #16]
   2338c:	cmp	r2, r1
   23390:	ldrh	r0, [r4, #128]	; 0x80
   23394:	movcs	r2, r1
   23398:	str	lr, [r4, #20]
   2339c:	str	ip, [r4, #28]
   233a0:	ldrh	ip, [r4, #130]	; 0x82
   233a4:	str	r2, [r4, #24]
   233a8:	ldr	r2, [r4, #156]	; 0x9c
   233ac:	str	r1, [r3, #4]
   233b0:	cmp	r0, ip
   233b4:	sub	r0, r3, #36	; 0x24
   233b8:	strhcc	ip, [r4, #128]	; 0x80
   233bc:	ldrh	r1, [r3, #12]
   233c0:	sub	r3, r2, #1
   233c4:	str	r0, [r4, #32]
   233c8:	strh	r1, [r4, #130]	; 0x82
   233cc:	str	r3, [r4, #156]	; 0x9c
   233d0:	b	23330 <flatcc_builder_create_offset_vector@@Base+0x190>
   233d4:	movw	r1, #58600	; 0xe4e8
   233d8:	movt	r1, #2
   233dc:	ldr	r3, [pc, #16]	; 233f4 <flatcc_builder_create_offset_vector@@Base+0x254>
   233e0:	movw	r0, #59072	; 0xe6c0
   233e4:	movt	r0, #2
   233e8:	movw	r2, #1480	; 0x5c8
   233ec:	bl	12684 <__assert_fail@plt>
   233f0:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>
   233f4:	andeq	lr, r2, r4, lsr #4

000233f8 <flatcc_builder_start_string@@Base>:
   233f8:	ldrd	r2, [r0, #156]	; 0x9c
   233fc:	strd	r4, [sp, #-16]!
   23400:	mov	r4, r0
   23404:	str	r6, [sp, #8]
   23408:	str	lr, [sp, #12]
   2340c:	sub	sp, sp, #8
   23410:	add	r1, r2, #1
   23414:	cmp	r1, r3
   23418:	str	r1, [r0, #156]	; 0x9c
   2341c:	ble	23534 <flatcc_builder_start_string@@Base+0x13c>
   23420:	ldr	r3, [r0, #176]	; 0xb0
   23424:	cmp	r3, #0
   23428:	cmpgt	r1, r3
   2342c:	movgt	r3, #1
   23430:	movle	r3, #0
   23434:	bgt	23544 <flatcc_builder_start_string@@Base+0x14c>
   23438:	add	r2, r2, r2, lsl #3
   2343c:	ldr	r1, [r0, #88]	; 0x58
   23440:	lsl	r5, r2, #2
   23444:	add	r2, r5, #36	; 0x24
   23448:	cmp	r2, r1
   2344c:	bls	23470 <flatcc_builder_start_string@@Base+0x78>
   23450:	mov	ip, #4
   23454:	add	r1, r0, #84	; 0x54
   23458:	ldr	r0, [r0, #40]	; 0x28
   2345c:	str	ip, [sp]
   23460:	ldr	r6, [r4, #48]	; 0x30
   23464:	blx	r6
   23468:	cmp	r0, #0
   2346c:	bne	2354c <flatcc_builder_start_string@@Base+0x154>
   23470:	ldr	r3, [r4, #84]	; 0x54
   23474:	add	r3, r3, r5
   23478:	cmp	r3, #0
   2347c:	str	r3, [r4, #32]
   23480:	beq	23544 <flatcc_builder_start_string@@Base+0x14c>
   23484:	ldr	r2, [r4, #88]	; 0x58
   23488:	movw	r0, #36409	; 0x8e39
   2348c:	movt	r0, #14563	; 0x38e3
   23490:	ldr	r1, [r4, #176]	; 0xb0
   23494:	umull	r0, r2, r0, r2
   23498:	lsr	r2, r2, #3
   2349c:	cmp	r1, #0
   234a0:	cmpgt	r2, r1
   234a4:	movgt	r2, r1
   234a8:	str	r2, [r4, #160]	; 0xa0
   234ac:	ldr	r2, [r4, #20]
   234b0:	mvn	r5, #3
   234b4:	mov	lr, #0
   234b8:	ldr	r0, [r4, #28]
   234bc:	ldrh	r6, [r4, #130]	; 0x82
   234c0:	ldr	ip, [r4, #60]	; 0x3c
   234c4:	ldr	r1, [r4, #64]	; 0x40
   234c8:	str	r2, [r3, #8]
   234cc:	add	r2, r2, r0
   234d0:	add	r2, r2, #7
   234d4:	strh	r6, [r3, #12]
   234d8:	mov	r6, #1
   234dc:	bic	r2, r2, #7
   234e0:	add	ip, ip, r2
   234e4:	strh	r6, [r4, #130]	; 0x82
   234e8:	sub	r1, r1, r2
   234ec:	str	r0, [r3]
   234f0:	mov	r0, lr
   234f4:	cmp	r1, r5
   234f8:	str	lr, [r4, #20]
   234fc:	movhi	r1, r5
   23500:	str	r2, [r4, #28]
   23504:	mov	r2, #6
   23508:	strh	r2, [r3, #14]
   2350c:	str	r6, [r3, #16]
   23510:	str	lr, [r3, #20]
   23514:	str	ip, [r4, #16]
   23518:	str	r1, [r4, #24]
   2351c:	str	r5, [r3, #4]
   23520:	add	sp, sp, #8
   23524:	ldrd	r4, [sp]
   23528:	ldr	r6, [sp, #8]
   2352c:	add	sp, sp, #12
   23530:	pop	{pc}		; (ldr pc, [sp], #4)
   23534:	ldr	r3, [r0, #32]
   23538:	add	r3, r3, #36	; 0x24
   2353c:	str	r3, [r0, #32]
   23540:	b	234ac <flatcc_builder_start_string@@Base+0xb4>
   23544:	mvn	r0, #0
   23548:	b	23520 <flatcc_builder_start_string@@Base+0x128>
   2354c:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

00023550 <flatcc_builder_reserve_table@@Base>:
   23550:	cmp	r1, #0
   23554:	strd	r4, [sp, #-20]!	; 0xffffffec
   23558:	strd	r6, [sp, #8]
   2355c:	str	lr, [sp, #16]
   23560:	sub	sp, sp, #12
   23564:	blt	23648 <flatcc_builder_reserve_table@@Base+0xf8>
   23568:	ldr	r2, [r0, #32]
   2356c:	add	r1, r1, #2
   23570:	mov	r4, r0
   23574:	lsl	r5, r1, #1
   23578:	ldr	r1, [r0, #56]	; 0x38
   2357c:	ldrh	r6, [r2, #28]
   23580:	ldr	r3, [r2, #16]
   23584:	add	r6, r3, r6, lsl #1
   23588:	add	r2, r6, r5
   2358c:	cmp	r2, r1
   23590:	bhi	235f8 <flatcc_builder_reserve_table@@Base+0xa8>
   23594:	ldr	r3, [r4, #52]	; 0x34
   23598:	adds	r3, r3, r6
   2359c:	mvneq	r0, #0
   235a0:	streq	r3, [r4, #4]
   235a4:	beq	235e4 <flatcc_builder_reserve_table@@Base+0x94>
   235a8:	ldr	r2, [r4, #32]
   235ac:	add	r3, r3, #4
   235b0:	ldr	r1, [r4, #80]	; 0x50
   235b4:	ldr	r6, [r2, #20]
   235b8:	str	r3, [r4, #4]
   235bc:	add	r2, r5, r6
   235c0:	sub	r2, r2, #3
   235c4:	cmp	r2, r1
   235c8:	bhi	23620 <flatcc_builder_reserve_table@@Base+0xd0>
   235cc:	ldr	r3, [r4, #76]	; 0x4c
   235d0:	add	r3, r3, r6
   235d4:	clz	r0, r3
   235d8:	lsr	r0, r0, #5
   235dc:	str	r3, [r4]
   235e0:	rsb	r0, r0, #0
   235e4:	add	sp, sp, #12
   235e8:	ldrd	r4, [sp]
   235ec:	ldrd	r6, [sp, #8]
   235f0:	add	sp, sp, #16
   235f4:	pop	{pc}		; (ldr pc, [sp], #4)
   235f8:	mov	ip, #0
   235fc:	add	r1, r0, #52	; 0x34
   23600:	ldr	r0, [r0, #40]	; 0x28
   23604:	mov	r3, #1
   23608:	str	ip, [sp]
   2360c:	ldr	r7, [r4, #48]	; 0x30
   23610:	blx	r7
   23614:	cmp	r0, #0
   23618:	beq	23594 <flatcc_builder_reserve_table@@Base+0x44>
   2361c:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>
   23620:	mov	ip, #3
   23624:	mov	r3, #0
   23628:	ldr	r0, [r4, #40]	; 0x28
   2362c:	add	r1, r4, #76	; 0x4c
   23630:	str	ip, [sp]
   23634:	ldr	r5, [r4, #48]	; 0x30
   23638:	blx	r5
   2363c:	cmp	r0, #0
   23640:	beq	235cc <flatcc_builder_reserve_table@@Base+0x7c>
   23644:	b	2361c <flatcc_builder_reserve_table@@Base+0xcc>
   23648:	movw	r1, #58600	; 0xe4e8
   2364c:	movt	r1, #2
   23650:	ldr	r3, [pc, #12]	; 23664 <flatcc_builder_reserve_table@@Base+0x114>
   23654:	movw	r0, #59256	; 0xe778
   23658:	movt	r0, #2
   2365c:	movw	r2, #1065	; 0x429
   23660:	bl	12684 <__assert_fail@plt>
   23664:	andeq	lr, r2, r8, asr #4

00023668 <flatcc_builder_start_table@@Base>:
   23668:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2366c:	mov	r5, r1
   23670:	mov	r1, #4
   23674:	strd	r6, [sp, #8]
   23678:	mov	r4, r0
   2367c:	strd	r8, [sp, #16]
   23680:	str	sl, [sp, #24]
   23684:	str	lr, [sp, #28]
   23688:	sub	sp, sp, #8
   2368c:	bl	20cf4 <flatcc_builder_default_alloc@@Base+0x264>
   23690:	subs	r7, r0, #0
   23694:	bne	237dc <flatcc_builder_start_table@@Base+0x174>
   23698:	ldm	r4, {r0, r2}
   2369c:	add	r5, r5, #2
   236a0:	movw	ip, #15186	; 0x3b52
   236a4:	movt	ip, #12137	; 0x2f69
   236a8:	lsl	r5, r5, #1
   236ac:	mov	r8, #3
   236b0:	ldrh	lr, [r4, #8]
   236b4:	ldr	r1, [r4, #52]	; 0x34
   236b8:	ldr	sl, [r4, #76]	; 0x4c
   236bc:	ldr	r3, [r4, #32]
   236c0:	sub	r2, r2, r1
   236c4:	ldr	r9, [r4, #56]	; 0x38
   236c8:	add	r6, r2, lr, lsl #1
   236cc:	sub	r0, r0, sl
   236d0:	ldr	sl, [r4, #12]
   236d4:	str	r2, [r3, #16]
   236d8:	add	r2, r6, r5
   236dc:	str	r0, [r3, #20]
   236e0:	cmp	r2, r9
   236e4:	str	sl, [r3, #24]
   236e8:	strh	lr, [r3, #28]
   236ec:	strh	r7, [r4, #8]
   236f0:	str	ip, [r4, #12]
   236f4:	strh	r8, [r3, #14]
   236f8:	bls	23720 <flatcc_builder_start_table@@Base+0xb8>
   236fc:	mov	r3, #1
   23700:	add	r1, r4, #52	; 0x34
   23704:	str	r7, [sp]
   23708:	ldr	r0, [r4, #40]	; 0x28
   2370c:	ldr	r8, [r4, #48]	; 0x30
   23710:	blx	r8
   23714:	cmp	r0, #0
   23718:	bne	237d8 <flatcc_builder_start_table@@Base+0x170>
   2371c:	ldr	r1, [r4, #52]	; 0x34
   23720:	adds	r6, r6, r1
   23724:	streq	r6, [r4, #4]
   23728:	beq	237dc <flatcc_builder_start_table@@Base+0x174>
   2372c:	ldr	r1, [r4, #32]
   23730:	sub	r2, r5, #3
   23734:	add	r6, r6, #4
   23738:	ldr	r3, [r4, #80]	; 0x50
   2373c:	ldr	r5, [r1, #20]
   23740:	str	r6, [r4, #4]
   23744:	add	r2, r2, r5
   23748:	cmp	r2, r3
   2374c:	bhi	237b4 <flatcc_builder_start_table@@Base+0x14c>
   23750:	ldr	r3, [r4, #76]	; 0x4c
   23754:	add	r3, r3, r5
   23758:	cmp	r3, #0
   2375c:	str	r3, [r4]
   23760:	beq	237dc <flatcc_builder_start_table@@Base+0x174>
   23764:	ldr	r0, [r4, #28]
   23768:	movw	r2, #65532	; 0xfffc
   2376c:	ldr	ip, [r4, #32]
   23770:	ldr	r3, [r4, #64]	; 0x40
   23774:	ldr	r1, [r4, #60]	; 0x3c
   23778:	sub	r3, r3, r0
   2377c:	cmp	r3, r2
   23780:	add	r1, r1, r0
   23784:	movcs	r3, r2
   23788:	str	r1, [r4, #16]
   2378c:	str	r3, [r4, #24]
   23790:	str	r2, [ip, #4]
   23794:	mov	r0, r7
   23798:	add	sp, sp, #8
   2379c:	ldrd	r4, [sp]
   237a0:	ldrd	r6, [sp, #8]
   237a4:	ldrd	r8, [sp, #16]
   237a8:	ldr	sl, [sp, #24]
   237ac:	add	sp, sp, #28
   237b0:	pop	{pc}		; (ldr pc, [sp], #4)
   237b4:	mov	ip, #3
   237b8:	mov	r3, #0
   237bc:	ldr	r0, [r4, #40]	; 0x28
   237c0:	add	r1, r4, #76	; 0x4c
   237c4:	str	ip, [sp]
   237c8:	ldr	r6, [r4, #48]	; 0x30
   237cc:	blx	r6
   237d0:	cmp	r0, #0
   237d4:	beq	23750 <flatcc_builder_start_table@@Base+0xe8>
   237d8:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>
   237dc:	mvn	r7, #0
   237e0:	b	23794 <flatcc_builder_start_table@@Base+0x12c>

000237e4 <flatcc_builder_create_vtable@@Base>:
   237e4:	strd	r4, [sp, #-16]!
   237e8:	mov	r5, r0
   237ec:	mov	r3, #0
   237f0:	ldr	ip, [r5, #152]	; 0x98
   237f4:	subs	r0, r2, #0
   237f8:	str	r6, [sp, #8]
   237fc:	str	lr, [sp, #12]
   23800:	sub	sp, sp, #80	; 0x50
   23804:	str	r3, [sp, #8]
   23808:	str	r3, [sp, #12]
   2380c:	beq	23888 <flatcc_builder_create_vtable@@Base+0xa4>
   23810:	mov	r2, #1
   23814:	cmp	ip, r3
   23818:	str	r0, [sp, #8]
   2381c:	str	r2, [sp, #12]
   23820:	str	r1, [sp, #16]
   23824:	str	r0, [sp, #20]
   23828:	beq	238b8 <flatcc_builder_create_vtable@@Base+0xd4>
   2382c:	ldr	r3, [r5, #136]	; 0x88
   23830:	sub	r4, r3, r0
   23834:	cmp	r3, r4
   23838:	ble	2389c <flatcc_builder_create_vtable@@Base+0xb8>
   2383c:	mov	r3, r4
   23840:	mov	r2, #1
   23844:	str	r0, [sp]
   23848:	add	r1, sp, #16
   2384c:	ldr	r0, [r5, #36]	; 0x24
   23850:	ldr	r6, [r5, #44]	; 0x2c
   23854:	blx	r6
   23858:	cmp	r0, #0
   2385c:	bne	23900 <flatcc_builder_create_vtable@@Base+0x11c>
   23860:	cmp	r4, #0
   23864:	str	r4, [r5, #136]	; 0x88
   23868:	beq	23870 <flatcc_builder_create_vtable@@Base+0x8c>
   2386c:	add	r4, r4, #1
   23870:	mov	r0, r4
   23874:	add	sp, sp, #80	; 0x50
   23878:	ldrd	r4, [sp]
   2387c:	ldr	r6, [sp, #8]
   23880:	add	sp, sp, #12
   23884:	pop	{pc}		; (ldr pc, [sp], #4)
   23888:	cmp	ip, #0
   2388c:	bne	2389c <flatcc_builder_create_vtable@@Base+0xb8>
   23890:	ldr	r2, [r5, #180]	; 0xb4
   23894:	cmp	r2, #0
   23898:	beq	238f8 <flatcc_builder_create_vtable@@Base+0x114>
   2389c:	movw	r1, #58600	; 0xe4e8
   238a0:	movt	r1, #2
   238a4:	ldr	r3, [pc, #88]	; 23904 <flatcc_builder_create_vtable@@Base+0x120>
   238a8:	movw	r0, #58792	; 0xe5a8
   238ac:	movt	r0, #2
   238b0:	movw	r2, #647	; 0x287
   238b4:	bl	12684 <__assert_fail@plt>
   238b8:	ldr	r3, [r5, #180]	; 0xb4
   238bc:	cmp	r3, #0
   238c0:	bne	2382c <flatcc_builder_create_vtable@@Base+0x48>
   238c4:	ldr	r4, [r5, #140]	; 0x8c
   238c8:	mov	ip, r0
   238cc:	add	r0, r4, r0
   238d0:	str	r0, [r5, #140]	; 0x8c
   238d4:	mov	r3, r4
   238d8:	add	r1, sp, #16
   238dc:	str	ip, [sp]
   238e0:	ldr	r0, [r5, #36]	; 0x24
   238e4:	ldr	r5, [r5, #44]	; 0x2c
   238e8:	blx	r5
   238ec:	cmp	r0, #0
   238f0:	beq	2386c <flatcc_builder_create_vtable@@Base+0x88>
   238f4:	bl	20bdc <flatcc_builder_default_alloc@@Base+0x14c>
   238f8:	ldr	r4, [r5, #140]	; 0x8c
   238fc:	b	238d4 <flatcc_builder_create_vtable@@Base+0xf0>
   23900:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   23904:	andeq	sp, r2, r4, asr #27

00023908 <flatcc_builder_create_cached_vtable@@Base>:
   23908:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2390c:	strd	r6, [sp, #8]
   23910:	mov	r6, r0
   23914:	strd	r8, [sp, #16]
   23918:	mov	r9, r2
   2391c:	mov	r8, r3
   23920:	strd	sl, [sp, #24]
   23924:	str	lr, [sp, #32]
   23928:	sub	sp, sp, #28
   2392c:	str	r1, [sp, #8]
   23930:	ldr	r1, [r0, #116]	; 0x74
   23934:	cmp	r1, #0
   23938:	rsbne	r1, r1, #32
   2393c:	beq	23ac4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   23940:	ldr	sl, [r6, #92]	; 0x5c
   23944:	lsr	r8, r8, r1
   23948:	adds	fp, sl, r8, lsl #2
   2394c:	str	fp, [sp, #12]
   23950:	beq	23b60 <flatcc_builder_create_cached_vtable@@Base+0x258>
   23954:	ldr	r5, [sl, r8, lsl #2]
   23958:	cmp	r5, #0
   2395c:	beq	23b94 <flatcc_builder_create_cached_vtable@@Base+0x28c>
   23960:	mov	r3, #0
   23964:	str	r8, [sp, #16]
   23968:	mov	r8, fp
   2396c:	mov	fp, r6
   23970:	ldr	r7, [r6, #68]	; 0x44
   23974:	str	r3, [sp, #20]
   23978:	ldr	r3, [r6, #100]	; 0x64
   2397c:	mov	r6, r3
   23980:	add	r4, r6, r5
   23984:	ldr	r1, [r4, #8]
   23988:	ldrh	r2, [r7, r1]
   2398c:	add	r1, r7, r1
   23990:	cmp	r2, r9
   23994:	bne	23a70 <flatcc_builder_create_cached_vtable@@Base+0x168>
   23998:	mov	r2, r9
   2399c:	ldr	r0, [sp, #8]
   239a0:	bl	125a0 <memcmp@plt>
   239a4:	cmp	r0, #0
   239a8:	bne	23a70 <flatcc_builder_create_cached_vtable@@Base+0x168>
   239ac:	ldr	r1, [r4, #4]
   239b0:	ldr	r2, [fp, #152]	; 0x98
   239b4:	cmp	r1, r2
   239b8:	beq	23a7c <flatcc_builder_create_cached_vtable@@Base+0x174>
   239bc:	ldr	r5, [r4, #12]
   239c0:	add	r8, r4, #12
   239c4:	str	r4, [sp, #20]
   239c8:	cmp	r5, #0
   239cc:	bne	23980 <flatcc_builder_create_cached_vtable@@Base+0x78>
   239d0:	ldr	r8, [sp, #16]
   239d4:	mov	r6, fp
   239d8:	ldr	r3, [r6, #104]	; 0x68
   239dc:	ldr	r4, [r6, #124]	; 0x7c
   239e0:	add	r2, r4, #16
   239e4:	cmp	r2, r3
   239e8:	bls	23a10 <flatcc_builder_create_cached_vtable@@Base+0x108>
   239ec:	mov	ip, #6
   239f0:	mov	r3, #0
   239f4:	ldr	r0, [r6, #40]	; 0x28
   239f8:	add	r1, r6, #100	; 0x64
   239fc:	str	ip, [sp]
   23a00:	ldr	r5, [r6, #48]	; 0x30
   23a04:	blx	r5
   23a08:	cmp	r0, #0
   23a0c:	bne	23b90 <flatcc_builder_create_cached_vtable@@Base+0x288>
   23a10:	ldr	r5, [r6, #100]	; 0x64
   23a14:	adds	r7, r5, r4
   23a18:	beq	23b60 <flatcc_builder_create_cached_vtable@@Base+0x258>
   23a1c:	ldr	r3, [r6, #124]	; 0x7c
   23a20:	mov	r2, r9
   23a24:	ldr	r0, [r6, #152]	; 0x98
   23a28:	ldr	r1, [sp, #8]
   23a2c:	add	ip, r3, #16
   23a30:	str	ip, [r6, #124]	; 0x7c
   23a34:	str	r0, [r7, #4]
   23a38:	mov	r0, r6
   23a3c:	ldr	ip, [sl, r8, lsl #2]
   23a40:	str	ip, [r7, #12]
   23a44:	str	r3, [sl, r8, lsl #2]
   23a48:	bl	237e4 <flatcc_builder_create_vtable@@Base>
   23a4c:	cmp	r0, #0
   23a50:	str	r0, [r5, r4]
   23a54:	beq	23b60 <flatcc_builder_create_cached_vtable@@Base+0x258>
   23a58:	ldr	r3, [sp, #20]
   23a5c:	cmp	r3, #0
   23a60:	beq	23ba4 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   23a64:	ldr	r3, [r3, #8]
   23a68:	str	r3, [r7, #8]
   23a6c:	b	23aa8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23a70:	add	r8, r4, #12
   23a74:	ldr	r5, [r4, #12]
   23a78:	b	239c8 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   23a7c:	ldr	r3, [sp, #12]
   23a80:	mov	fp, r8
   23a84:	ldr	r8, [sp, #16]
   23a88:	cmp	r3, fp
   23a8c:	beq	23aa4 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   23a90:	ldr	r3, [r4, #12]
   23a94:	str	r3, [fp]
   23a98:	ldr	r3, [sl, r8, lsl #2]
   23a9c:	str	r3, [r4, #12]
   23aa0:	str	r5, [sl, r8, lsl #2]
   23aa4:	ldr	r0, [r4]
   23aa8:	add	sp, sp, #28
   23aac:	ldrd	r4, [sp]
   23ab0:	ldrd	r6, [sp, #8]
   23ab4:	ldrd	r8, [sp, #16]
   23ab8:	ldrd	sl, [sp, #24]
   23abc:	add	sp, sp, #32
   23ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   23ac4:	ldr	r4, [r0, #124]	; 0x7c
   23ac8:	add	r5, r0, #92	; 0x5c
   23acc:	cmp	r4, #0
   23ad0:	bne	23c54 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   23ad4:	ldr	r3, [r0, #104]	; 0x68
   23ad8:	cmp	r3, #15
   23adc:	bls	23b68 <flatcc_builder_create_cached_vtable@@Base+0x260>
   23ae0:	ldr	r3, [r6, #100]	; 0x64
   23ae4:	cmp	r3, #0
   23ae8:	beq	23b60 <flatcc_builder_create_cached_vtable@@Base+0x258>
   23aec:	mov	ip, #16
   23af0:	mov	r2, #5
   23af4:	ldr	r0, [r6, #40]	; 0x28
   23af8:	mov	r1, r5
   23afc:	mov	r3, #1
   23b00:	str	r2, [sp]
   23b04:	mov	r2, #256	; 0x100
   23b08:	str	ip, [r6, #124]	; 0x7c
   23b0c:	ldr	r5, [r6, #48]	; 0x30
   23b10:	blx	r5
   23b14:	cmp	r0, #0
   23b18:	bne	23b60 <flatcc_builder_create_cached_vtable@@Base+0x258>
   23b1c:	mov	r3, #256	; 0x100
   23b20:	ldr	r1, [r6, #96]	; 0x60
   23b24:	b	23b2c <flatcc_builder_create_cached_vtable@@Base+0x224>
   23b28:	mov	r3, r2
   23b2c:	lsl	r2, r3, #1
   23b30:	cmp	r2, r1
   23b34:	bls	23b28 <flatcc_builder_create_cached_vtable@@Base+0x220>
   23b38:	lsr	r3, r3, #2
   23b3c:	cmp	r3, #1
   23b40:	bls	23b9c <flatcc_builder_create_cached_vtable@@Base+0x294>
   23b44:	mov	r2, #1
   23b48:	add	r4, r4, #1
   23b4c:	cmp	r3, r2, lsl r4
   23b50:	bhi	23b48 <flatcc_builder_create_cached_vtable@@Base+0x240>
   23b54:	rsb	r1, r4, #32
   23b58:	str	r4, [r6, #116]	; 0x74
   23b5c:	b	23940 <flatcc_builder_create_cached_vtable@@Base+0x38>
   23b60:	mov	r0, #0
   23b64:	b	23aa8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23b68:	mov	ip, #6
   23b6c:	add	r1, r0, #100	; 0x64
   23b70:	ldr	r0, [r0, #40]	; 0x28
   23b74:	mov	r3, r4
   23b78:	mov	r2, #16
   23b7c:	str	ip, [sp]
   23b80:	ldr	r7, [r6, #48]	; 0x30
   23b84:	blx	r7
   23b88:	cmp	r0, #0
   23b8c:	beq	23ae0 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   23b90:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>
   23b94:	str	r5, [sp, #20]
   23b98:	b	239d8 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   23b9c:	mov	r1, #32
   23ba0:	b	23b58 <flatcc_builder_create_cached_vtable@@Base+0x250>
   23ba4:	ldr	r8, [r6, #120]	; 0x78
   23ba8:	ldr	r3, [r6, #172]	; 0xac
   23bac:	add	r2, r9, r8
   23bb0:	cmp	r3, #0
   23bb4:	beq	23bf4 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   23bb8:	cmp	r3, r2
   23bbc:	bcs	23bf4 <flatcc_builder_create_cached_vtable@@Base+0x2ec>
   23bc0:	ldr	r3, [r6, #116]	; 0x74
   23bc4:	cmp	r3, #0
   23bc8:	beq	23aa8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23bcc:	ldr	r7, [sp, #20]
   23bd0:	ldr	r0, [r6, #92]	; 0x5c
   23bd4:	ldr	r2, [r6, #96]	; 0x60
   23bd8:	mov	r1, r7
   23bdc:	bl	12630 <memset@plt>
   23be0:	mov	r3, #16
   23be4:	mov	r2, r7
   23be8:	ldr	r0, [r5, r4]
   23bec:	strd	r2, [r6, #120]	; 0x78
   23bf0:	b	23aa8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23bf4:	ldr	r3, [r6, #72]	; 0x48
   23bf8:	cmp	r3, r2
   23bfc:	bcs	23c24 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   23c00:	mov	ip, #2
   23c04:	mov	r3, #0
   23c08:	ldr	r0, [r6, #40]	; 0x28
   23c0c:	add	r1, r6, #68	; 0x44
   23c10:	str	ip, [sp]
   23c14:	ldr	sl, [r6, #48]	; 0x30
   23c18:	blx	sl
   23c1c:	cmp	r0, #0
   23c20:	bne	23b90 <flatcc_builder_create_cached_vtable@@Base+0x288>
   23c24:	ldr	r3, [r6, #68]	; 0x44
   23c28:	adds	r0, r3, r8
   23c2c:	beq	23c70 <flatcc_builder_create_cached_vtable@@Base+0x368>
   23c30:	ldr	r3, [r6, #120]	; 0x78
   23c34:	mov	r2, r9
   23c38:	ldr	r1, [sp, #8]
   23c3c:	add	r9, r3, r9
   23c40:	str	r3, [r7, #8]
   23c44:	str	r9, [r6, #120]	; 0x78
   23c48:	bl	12588 <memcpy@plt>
   23c4c:	ldr	r0, [r5, r4]
   23c50:	b	23aa8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23c54:	movw	r1, #58600	; 0xe4e8
   23c58:	movt	r1, #2
   23c5c:	ldr	r3, [pc, #20]	; 23c78 <flatcc_builder_create_cached_vtable@@Base+0x370>
   23c60:	movw	r0, #59268	; 0xe784
   23c64:	movt	r0, #2
   23c68:	movw	r2, #342	; 0x156
   23c6c:	bl	12684 <__assert_fail@plt>
   23c70:	mvn	r0, #0
   23c74:	b	23aa8 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23c78:	andeq	lr, r2, r8, ror #4

00023c7c <flatcc_builder_create_table@@Base>:
   23c7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23c80:	mov	r5, r0
   23c84:	strd	r6, [sp, #8]
   23c88:	str	r8, [sp, #16]
   23c8c:	str	lr, [sp, #20]
   23c90:	sub	sp, sp, #88	; 0x58
   23c94:	ldr	r6, [sp, #116]	; 0x74
   23c98:	ldr	r0, [sp, #120]	; 0x78
   23c9c:	cmp	r6, #0
   23ca0:	blt	23e08 <flatcc_builder_create_table@@Base+0x18c>
   23ca4:	ands	r7, r0, #1
   23ca8:	beq	23dec <flatcc_builder_create_table@@Base+0x170>
   23cac:	ldrh	ip, [r5, #128]	; 0x80
   23cb0:	cmp	r3, #4
   23cb4:	sub	r0, r0, #1
   23cb8:	movcc	r3, #4
   23cbc:	cmp	ip, r3
   23cc0:	ldr	ip, [r5, #136]	; 0x88
   23cc4:	strhcc	r3, [r5, #128]	; 0x80
   23cc8:	sub	r3, r3, #1
   23ccc:	cmp	r6, #0
   23cd0:	sub	r4, ip, r2
   23cd4:	mov	r8, r4
   23cd8:	sub	r4, r4, #4
   23cdc:	and	r8, r8, r3
   23ce0:	sub	r0, r4, r0
   23ce4:	sub	r0, r0, r8
   23ce8:	str	r0, [sp, #12]
   23cec:	beq	23d20 <flatcc_builder_create_table@@Base+0xa4>
   23cf0:	ldr	ip, [sp, #112]	; 0x70
   23cf4:	sub	r4, r8, r4
   23cf8:	sub	r4, r4, #4
   23cfc:	add	r6, ip, r6, lsl #1
   23d00:	ldrh	r3, [ip], #2
   23d04:	ldr	r0, [r1, r3]
   23d08:	sub	lr, r4, r3
   23d0c:	cmp	r6, ip
   23d10:	add	r0, r0, lr
   23d14:	str	r0, [r1, r3]
   23d18:	bne	23d00 <flatcc_builder_create_table@@Base+0x84>
   23d1c:	ldr	ip, [r5, #136]	; 0x88
   23d20:	mov	r0, #4
   23d24:	add	r3, sp, #12
   23d28:	mov	lr, #1
   23d2c:	cmp	r2, #0
   23d30:	moveq	r2, #2
   23d34:	str	r0, [sp, #16]
   23d38:	str	lr, [sp, #20]
   23d3c:	str	r3, [sp, #24]
   23d40:	str	r0, [sp, #28]
   23d44:	beq	23d68 <flatcc_builder_create_table@@Base+0xec>
   23d48:	mov	r3, #2
   23d4c:	add	r0, r2, r0
   23d50:	mov	r7, r3
   23d54:	str	r0, [sp, #16]
   23d58:	str	r2, [sp, #36]	; 0x24
   23d5c:	mov	r2, #3
   23d60:	str	r3, [sp, #20]
   23d64:	str	r1, [sp, #32]
   23d68:	cmp	r8, #0
   23d6c:	bne	23dc0 <flatcc_builder_create_table@@Base+0x144>
   23d70:	sub	r4, ip, r0
   23d74:	cmp	r4, ip
   23d78:	bge	23e28 <flatcc_builder_create_table@@Base+0x1ac>
   23d7c:	mov	r2, r7
   23d80:	mov	r3, r4
   23d84:	str	r0, [sp]
   23d88:	add	r1, sp, #24
   23d8c:	ldr	r0, [r5, #36]	; 0x24
   23d90:	ldr	r6, [r5, #44]	; 0x2c
   23d94:	blx	r6
   23d98:	cmp	r0, #0
   23d9c:	bne	23e24 <flatcc_builder_create_table@@Base+0x1a8>
   23da0:	mov	r0, r4
   23da4:	str	r4, [r5, #136]	; 0x88
   23da8:	add	sp, sp, #88	; 0x58
   23dac:	ldrd	r4, [sp]
   23db0:	ldrd	r6, [sp, #8]
   23db4:	ldr	r8, [sp, #16]
   23db8:	add	sp, sp, #20
   23dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   23dc0:	ldr	r1, [pc, #124]	; 23e44 <flatcc_builder_create_table@@Base+0x1c8>
   23dc4:	add	r7, r7, #1
   23dc8:	add	r3, sp, #88	; 0x58
   23dcc:	add	r3, r3, r7, lsl #3
   23dd0:	add	r0, r0, r8
   23dd4:	mov	r7, r2
   23dd8:	str	r0, [sp, #16]
   23ddc:	str	r2, [sp, #20]
   23de0:	str	r1, [r3, #-72]	; 0xffffffb8
   23de4:	str	r8, [r3, #-68]	; 0xffffffbc
   23de8:	b	23d70 <flatcc_builder_create_table@@Base+0xf4>
   23dec:	movw	r1, #58600	; 0xe4e8
   23df0:	movt	r1, #2
   23df4:	ldr	r3, [pc, #76]	; 23e48 <flatcc_builder_create_table@@Base+0x1cc>
   23df8:	movw	r0, #59304	; 0xe7a8
   23dfc:	movt	r0, #2
   23e00:	movw	r2, #1243	; 0x4db
   23e04:	bl	12684 <__assert_fail@plt>
   23e08:	movw	r1, #58600	; 0xe4e8
   23e0c:	movt	r1, #2
   23e10:	ldr	r3, [pc, #48]	; 23e48 <flatcc_builder_create_table@@Base+0x1cc>
   23e14:	movw	r0, #59284	; 0xe794
   23e18:	movt	r0, #2
   23e1c:	movw	r2, #1237	; 0x4d5
   23e20:	bl	12684 <__assert_fail@plt>
   23e24:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   23e28:	movw	r1, #58600	; 0xe4e8
   23e2c:	movt	r1, #2
   23e30:	ldr	r3, [pc, #20]	; 23e4c <flatcc_builder_create_table@@Base+0x1d0>
   23e34:	movw	r0, #58792	; 0xe5a8
   23e38:	movt	r0, #2
   23e3c:	movw	r2, #647	; 0x287
   23e40:	bl	12684 <__assert_fail@plt>
   23e44:	andeq	sp, r2, r0, asr #28
   23e48:	andeq	lr, r2, r4, ror r2
   23e4c:	andeq	sp, r2, r4, asr #27

00023e50 <flatcc_builder_check_required_field@@Base>:
   23e50:	ldr	r3, [r0, #32]
   23e54:	ldrh	r3, [r3, #14]
   23e58:	cmp	r3, #3
   23e5c:	bne	23e8c <flatcc_builder_check_required_field@@Base+0x3c>
   23e60:	ldrh	r3, [r0, #8]
   23e64:	cmp	r3, r1
   23e68:	bls	23e84 <flatcc_builder_check_required_field@@Base+0x34>
   23e6c:	ldr	r3, [r0, #4]
   23e70:	lsl	r1, r1, #1
   23e74:	ldrh	r0, [r3, r1]
   23e78:	adds	r0, r0, #0
   23e7c:	movne	r0, #1
   23e80:	bx	lr
   23e84:	mov	r0, #0
   23e88:	bx	lr
   23e8c:	movw	r1, #58600	; 0xe4e8
   23e90:	movt	r1, #2
   23e94:	ldr	r3, [pc, #20]	; 23eb0 <flatcc_builder_check_required_field@@Base+0x60>
   23e98:	movw	r0, #59316	; 0xe7b4
   23e9c:	movt	r0, #2
   23ea0:	str	r4, [sp, #-8]!
   23ea4:	movw	r2, #1272	; 0x4f8
   23ea8:	str	lr, [sp, #4]
   23eac:	bl	12684 <__assert_fail@plt>
   23eb0:	muleq	r2, r0, r2

00023eb4 <flatcc_builder_check_union_field@@Base>:
   23eb4:	ldr	r3, [r0, #32]
   23eb8:	ldrh	r3, [r3, #14]
   23ebc:	cmp	r3, #3
   23ec0:	bne	23f24 <flatcc_builder_check_union_field@@Base+0x70>
   23ec4:	cmp	r1, #0
   23ec8:	beq	23f10 <flatcc_builder_check_union_field@@Base+0x5c>
   23ecc:	ldrh	r3, [r0, #8]
   23ed0:	cmp	r3, r1
   23ed4:	bls	23f10 <flatcc_builder_check_union_field@@Base+0x5c>
   23ed8:	ldr	r3, [r0, #4]
   23edc:	sub	r1, r1, #-2147483647	; 0x80000001
   23ee0:	lsl	r1, r1, #1
   23ee4:	ldrh	r2, [r3, r1]!
   23ee8:	cmp	r2, #0
   23eec:	ldrh	r1, [r3, #2]
   23ef0:	beq	23f04 <flatcc_builder_check_union_field@@Base+0x50>
   23ef4:	ldr	r3, [r0, #16]
   23ef8:	ldrb	r3, [r3, r2]
   23efc:	cmp	r3, #0
   23f00:	bne	23f18 <flatcc_builder_check_union_field@@Base+0x64>
   23f04:	clz	r0, r1
   23f08:	lsr	r0, r0, #5
   23f0c:	bx	lr
   23f10:	mov	r0, #0
   23f14:	bx	lr
   23f18:	adds	r0, r1, #0
   23f1c:	movne	r0, #1
   23f20:	bx	lr
   23f24:	movw	r1, #58600	; 0xe4e8
   23f28:	movt	r1, #2
   23f2c:	ldr	r3, [pc, #20]	; 23f48 <flatcc_builder_check_union_field@@Base+0x94>
   23f30:	movw	r0, #59316	; 0xe7b4
   23f34:	movt	r0, #2
   23f38:	str	r4, [sp, #-8]!
   23f3c:	movw	r2, #1279	; 0x4ff
   23f40:	str	lr, [sp, #4]
   23f44:	bl	12684 <__assert_fail@plt>
   23f48:			; <UNDEFINED> instruction: 0x0002e2b4

00023f4c <flatcc_builder_check_required@@Base>:
   23f4c:	ldr	r3, [r0, #32]
   23f50:	ldrh	r3, [r3, #14]
   23f54:	cmp	r3, #3
   23f58:	bne	23fc0 <flatcc_builder_check_required@@Base+0x74>
   23f5c:	ldrh	r3, [r0, #8]
   23f60:	cmp	r3, r2
   23f64:	blt	23fb8 <flatcc_builder_check_required@@Base+0x6c>
   23f68:	cmp	r2, #0
   23f6c:	ble	23fb0 <flatcc_builder_check_required@@Base+0x64>
   23f70:	ldrh	r3, [r1]
   23f74:	ldr	ip, [r0, #4]
   23f78:	lsl	r3, r3, #1
   23f7c:	ldrh	r0, [ip, r3]
   23f80:	cmp	r0, #0
   23f84:	bxeq	lr
   23f88:	add	r2, r1, r2, lsl #1
   23f8c:	add	r1, r1, #2
   23f90:	b	23fa8 <flatcc_builder_check_required@@Base+0x5c>
   23f94:	ldrh	r3, [r1], #2
   23f98:	lsl	r3, r3, #1
   23f9c:	ldrh	r0, [ip, r3]
   23fa0:	cmp	r0, #0
   23fa4:	bxeq	lr
   23fa8:	cmp	r1, r2
   23fac:	bne	23f94 <flatcc_builder_check_required@@Base+0x48>
   23fb0:	mov	r0, #1
   23fb4:	bx	lr
   23fb8:	mov	r0, #0
   23fbc:	bx	lr
   23fc0:	movw	r1, #58600	; 0xe4e8
   23fc4:	movt	r1, #2
   23fc8:	ldr	r3, [pc, #20]	; 23fe4 <flatcc_builder_check_required@@Base+0x98>
   23fcc:	movw	r0, #59316	; 0xe7b4
   23fd0:	movt	r0, #2
   23fd4:	str	r4, [sp, #-8]!
   23fd8:	movw	r2, #1297	; 0x511
   23fdc:	str	lr, [sp, #4]
   23fe0:	bl	12684 <__assert_fail@plt>
   23fe4:	ldrdeq	lr, [r2], -r8

00023fe8 <flatcc_builder_end_table@@Base>:
   23fe8:	ldr	r3, [r0, #32]
   23fec:	strd	r4, [sp, #-20]!	; 0xffffffec
   23ff0:	ldrh	r3, [r3, #14]
   23ff4:	strd	r6, [sp, #8]
   23ff8:	str	lr, [sp, #16]
   23ffc:	sub	sp, sp, #20
   24000:	cmp	r3, #3
   24004:	bne	24188 <flatcc_builder_end_table@@Base+0x1a0>
   24008:	ldrh	r5, [r0, #8]
   2400c:	movw	ip, #31153	; 0x79b1
   24010:	movt	ip, #40503	; 0x9e37
   24014:	mov	r4, r0
   24018:	ldr	r1, [r0, #4]
   2401c:	ldr	r3, [r0, #12]
   24020:	add	r5, r5, #2
   24024:	lsl	r5, r5, #1
   24028:	ldr	lr, [r0, #20]
   2402c:	sub	r6, r1, #4
   24030:	uxth	r5, r5
   24034:	eor	r3, r3, r5
   24038:	mov	r2, r5
   2403c:	strh	r5, [r1, #-4]
   24040:	mul	r3, ip, r3
   24044:	add	lr, lr, #4
   24048:	uxth	lr, lr
   2404c:	eor	r3, r3, lr
   24050:	strh	lr, [r1, #-2]
   24054:	mov	r1, r6
   24058:	mul	r3, ip, r3
   2405c:	str	r3, [r0, #12]
   24060:	bl	23908 <flatcc_builder_create_cached_vtable@@Base>
   24064:	subs	r7, r0, #0
   24068:	bne	24088 <flatcc_builder_end_table@@Base+0xa0>
   2406c:	mov	r5, #0
   24070:	mov	r0, r5
   24074:	add	sp, sp, #20
   24078:	ldrd	r4, [sp]
   2407c:	ldrd	r6, [sp, #8]
   24080:	add	sp, sp, #16
   24084:	pop	{pc}		; (ldr pc, [sp], #4)
   24088:	mov	r2, r5
   2408c:	mov	r1, #0
   24090:	mov	r0, r6
   24094:	bl	12630 <memset@plt>
   24098:	ldr	ip, [r4]
   2409c:	mov	r0, r4
   240a0:	ldr	r3, [r4, #32]
   240a4:	ldr	r2, [r4, #76]	; 0x4c
   240a8:	ldr	r1, [r3, #20]
   240ac:	str	r7, [sp, #8]
   240b0:	ldrh	r3, [r4, #130]	; 0x82
   240b4:	add	r2, r2, r1
   240b8:	ldr	r1, [r4, #16]
   240bc:	sub	ip, ip, r2
   240c0:	asr	ip, ip, #1
   240c4:	str	r2, [sp]
   240c8:	ldr	r2, [r4, #20]
   240cc:	str	ip, [sp, #4]
   240d0:	bl	23c7c <flatcc_builder_create_table@@Base>
   240d4:	subs	r5, r0, #0
   240d8:	beq	2406c <flatcc_builder_end_table@@Base+0x84>
   240dc:	ldr	r3, [r4, #32]
   240e0:	mov	r1, #0
   240e4:	ldr	r0, [r4, #52]	; 0x34
   240e8:	ldr	r2, [r4, #76]	; 0x4c
   240ec:	ldr	ip, [r3, #16]
   240f0:	ldr	r6, [r3, #20]
   240f4:	ldrh	lr, [r3, #28]
   240f8:	add	r0, r0, ip
   240fc:	ldr	ip, [r3, #24]
   24100:	add	r3, r2, r6
   24104:	ldr	r2, [r4, #20]
   24108:	str	r3, [r4]
   2410c:	str	r0, [r4, #4]
   24110:	strh	lr, [r4, #8]
   24114:	str	ip, [r4, #12]
   24118:	ldr	r0, [r4, #16]
   2411c:	bl	12630 <memset@plt>
   24120:	ldr	r3, [r4, #32]
   24124:	ldr	r0, [r4, #60]	; 0x3c
   24128:	ldr	r2, [r4, #64]	; 0x40
   2412c:	ldr	ip, [r3]
   24130:	ldmib	r3, {r1, lr}
   24134:	add	r0, r0, ip
   24138:	sub	r2, r2, ip
   2413c:	str	r0, [r4, #16]
   24140:	cmp	r2, r1
   24144:	ldrh	r0, [r4, #128]	; 0x80
   24148:	movcs	r2, r1
   2414c:	str	lr, [r4, #20]
   24150:	str	ip, [r4, #28]
   24154:	ldrh	ip, [r4, #130]	; 0x82
   24158:	str	r2, [r4, #24]
   2415c:	ldr	r2, [r4, #156]	; 0x9c
   24160:	str	r1, [r3, #4]
   24164:	cmp	r0, ip
   24168:	sub	r0, r3, #36	; 0x24
   2416c:	strhcc	ip, [r4, #128]	; 0x80
   24170:	ldrh	r1, [r3, #12]
   24174:	sub	r3, r2, #1
   24178:	str	r0, [r4, #32]
   2417c:	strh	r1, [r4, #130]	; 0x82
   24180:	str	r3, [r4, #156]	; 0x9c
   24184:	b	24070 <flatcc_builder_end_table@@Base+0x88>
   24188:	movw	r1, #58600	; 0xe4e8
   2418c:	movt	r1, #2
   24190:	ldr	r3, [pc, #12]	; 241a4 <flatcc_builder_end_table@@Base+0x1bc>
   24194:	movw	r0, #59316	; 0xe7b4
   24198:	movt	r0, #2
   2419c:	movw	r2, #1317	; 0x525
   241a0:	bl	12684 <__assert_fail@plt>
   241a4:	strdeq	lr, [r2], -r8

000241a8 <flatcc_builder_create_vector@@Base>:
   241a8:	strd	r4, [sp, #-16]!
   241ac:	mov	r4, r0
   241b0:	str	r6, [sp, #8]
   241b4:	str	lr, [sp, #12]
   241b8:	sub	sp, sp, #88	; 0x58
   241bc:	ldr	ip, [sp, #108]	; 0x6c
   241c0:	ldrh	r0, [sp, #104]	; 0x68
   241c4:	cmp	r2, ip
   241c8:	bhi	242bc <flatcc_builder_create_vector@@Base+0x114>
   241cc:	ldrh	ip, [r4, #128]	; 0x80
   241d0:	cmp	r0, #4
   241d4:	mul	r3, r3, r2
   241d8:	movcc	r0, #4
   241dc:	add	lr, sp, #12
   241e0:	str	r2, [sp, #12]
   241e4:	ldr	r6, [r4, #136]	; 0x88
   241e8:	mov	r2, #1
   241ec:	str	lr, [sp, #24]
   241f0:	cmp	ip, r0
   241f4:	mov	ip, #4
   241f8:	strhcc	r0, [r4, #128]	; 0x80
   241fc:	sub	lr, r6, r3
   24200:	sub	r0, r0, #1
   24204:	cmp	r3, #0
   24208:	and	r0, r0, lr
   2420c:	str	ip, [sp, #16]
   24210:	moveq	r3, #2
   24214:	str	r2, [sp, #20]
   24218:	str	ip, [sp, #28]
   2421c:	beq	24240 <flatcc_builder_create_vector@@Base+0x98>
   24220:	mov	lr, #2
   24224:	add	ip, r3, ip
   24228:	mov	r2, lr
   2422c:	str	ip, [sp, #16]
   24230:	str	r3, [sp, #36]	; 0x24
   24234:	mov	r3, #3
   24238:	str	lr, [sp, #20]
   2423c:	str	r1, [sp, #32]
   24240:	cmp	r0, #0
   24244:	bne	24290 <flatcc_builder_create_vector@@Base+0xe8>
   24248:	sub	r5, r6, ip
   2424c:	cmp	r6, r5
   24250:	ble	242dc <flatcc_builder_create_vector@@Base+0x134>
   24254:	mov	r3, r5
   24258:	add	r1, sp, #24
   2425c:	str	ip, [sp]
   24260:	ldr	r0, [r4, #36]	; 0x24
   24264:	ldr	r6, [r4, #44]	; 0x2c
   24268:	blx	r6
   2426c:	cmp	r0, #0
   24270:	bne	242d8 <flatcc_builder_create_vector@@Base+0x130>
   24274:	mov	r0, r5
   24278:	str	r5, [r4, #136]	; 0x88
   2427c:	add	sp, sp, #88	; 0x58
   24280:	ldrd	r4, [sp]
   24284:	ldr	r6, [sp, #8]
   24288:	add	sp, sp, #12
   2428c:	pop	{pc}		; (ldr pc, [sp], #4)
   24290:	ldr	lr, [pc, #96]	; 242f8 <flatcc_builder_create_vector@@Base+0x150>
   24294:	add	r2, r2, #1
   24298:	add	r1, sp, #88	; 0x58
   2429c:	add	r1, r1, r2, lsl #3
   242a0:	add	ip, ip, r0
   242a4:	mov	r2, r3
   242a8:	str	ip, [sp, #16]
   242ac:	str	r3, [sp, #20]
   242b0:	str	lr, [r1, #-72]	; 0xffffffb8
   242b4:	str	r0, [r1, #-68]	; 0xffffffbc
   242b8:	b	24248 <flatcc_builder_create_vector@@Base+0xa0>
   242bc:	movw	r1, #58600	; 0xe4e8
   242c0:	movt	r1, #2
   242c4:	ldr	r3, [pc, #48]	; 242fc <flatcc_builder_create_vector@@Base+0x154>
   242c8:	movw	r0, #59360	; 0xe7e0
   242cc:	movt	r0, #2
   242d0:	movw	r2, #1365	; 0x555
   242d4:	bl	12684 <__assert_fail@plt>
   242d8:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   242dc:	movw	r1, #58600	; 0xe4e8
   242e0:	movt	r1, #2
   242e4:	ldr	r3, [pc, #20]	; 24300 <flatcc_builder_create_vector@@Base+0x158>
   242e8:	movw	r0, #58792	; 0xe5a8
   242ec:	movt	r0, #2
   242f0:	movw	r2, #647	; 0x287
   242f4:	bl	12684 <__assert_fail@plt>
   242f8:	andeq	sp, r2, r0, asr #28
   242fc:	andeq	lr, r2, r4, lsl r3
   24300:	andeq	sp, r2, r4, asr #27

00024304 <flatcc_builder_end_vector@@Base>:
   24304:	ldr	r2, [r0, #32]
   24308:	strd	r4, [sp, #-16]!
   2430c:	ldrh	r3, [r2, #14]
   24310:	str	r6, [sp, #8]
   24314:	str	lr, [sp, #12]
   24318:	sub	sp, sp, #88	; 0x58
   2431c:	cmp	r3, #4
   24320:	bne	244e8 <flatcc_builder_end_vector@@Base+0x1e4>
   24324:	ldr	ip, [r2, #20]
   24328:	mov	r4, r0
   2432c:	ldr	r1, [r2, #24]
   24330:	ldrh	r3, [r0, #130]	; 0x82
   24334:	ldr	r5, [r4, #16]
   24338:	cmp	ip, r1
   2433c:	ldr	r0, [r2, #16]
   24340:	bhi	244cc <flatcc_builder_end_vector@@Base+0x1c8>
   24344:	cmp	r3, #4
   24348:	mul	r0, r0, ip
   2434c:	mov	r1, #4
   24350:	ldrh	r2, [r4, #128]	; 0x80
   24354:	movcc	r3, #4
   24358:	add	r6, sp, #12
   2435c:	str	ip, [sp, #12]
   24360:	ldr	lr, [r4, #136]	; 0x88
   24364:	str	r1, [sp, #16]
   24368:	str	r6, [sp, #24]
   2436c:	cmp	r2, r3
   24370:	mov	r2, #1
   24374:	strhcc	r3, [r4, #128]	; 0x80
   24378:	sub	ip, lr, r0
   2437c:	sub	r3, r3, #1
   24380:	cmp	r0, #0
   24384:	and	r3, r3, ip
   24388:	str	r2, [sp, #20]
   2438c:	moveq	r0, #2
   24390:	str	r1, [sp, #28]
   24394:	beq	243b8 <flatcc_builder_end_vector@@Base+0xb4>
   24398:	mov	ip, #2
   2439c:	add	r1, r0, r1
   243a0:	mov	r2, ip
   243a4:	str	r1, [sp, #16]
   243a8:	str	r0, [sp, #36]	; 0x24
   243ac:	mov	r0, #3
   243b0:	str	ip, [sp, #20]
   243b4:	str	r5, [sp, #32]
   243b8:	cmp	r3, #0
   243bc:	bne	24480 <flatcc_builder_end_vector@@Base+0x17c>
   243c0:	sub	r5, lr, r1
   243c4:	cmp	lr, r5
   243c8:	ble	244b0 <flatcc_builder_end_vector@@Base+0x1ac>
   243cc:	mov	r3, r5
   243d0:	str	r1, [sp]
   243d4:	add	r1, sp, #24
   243d8:	ldr	r0, [r4, #36]	; 0x24
   243dc:	ldr	r6, [r4, #44]	; 0x2c
   243e0:	blx	r6
   243e4:	subs	r1, r0, #0
   243e8:	bne	244ac <flatcc_builder_end_vector@@Base+0x1a8>
   243ec:	cmp	r5, #0
   243f0:	str	r5, [r4, #136]	; 0x88
   243f4:	beq	24468 <flatcc_builder_end_vector@@Base+0x164>
   243f8:	ldr	r0, [r4, #16]
   243fc:	ldr	r2, [r4, #20]
   24400:	bl	12630 <memset@plt>
   24404:	ldr	r3, [r4, #32]
   24408:	ldr	r0, [r4, #60]	; 0x3c
   2440c:	ldr	r2, [r4, #64]	; 0x40
   24410:	ldr	ip, [r3]
   24414:	ldmib	r3, {r1, lr}
   24418:	add	r0, r0, ip
   2441c:	sub	r2, r2, ip
   24420:	str	r0, [r4, #16]
   24424:	cmp	r2, r1
   24428:	ldrh	r0, [r4, #128]	; 0x80
   2442c:	movcs	r2, r1
   24430:	str	lr, [r4, #20]
   24434:	str	ip, [r4, #28]
   24438:	ldrh	ip, [r4, #130]	; 0x82
   2443c:	str	r2, [r4, #24]
   24440:	ldr	r2, [r4, #156]	; 0x9c
   24444:	str	r1, [r3, #4]
   24448:	cmp	r0, ip
   2444c:	sub	r0, r3, #36	; 0x24
   24450:	strhcc	ip, [r4, #128]	; 0x80
   24454:	ldrh	r1, [r3, #12]
   24458:	sub	r3, r2, #1
   2445c:	str	r0, [r4, #32]
   24460:	strh	r1, [r4, #130]	; 0x82
   24464:	str	r3, [r4, #156]	; 0x9c
   24468:	mov	r0, r5
   2446c:	add	sp, sp, #88	; 0x58
   24470:	ldrd	r4, [sp]
   24474:	ldr	r6, [sp, #8]
   24478:	add	sp, sp, #12
   2447c:	pop	{pc}		; (ldr pc, [sp], #4)
   24480:	ldr	r5, [pc, #124]	; 24504 <flatcc_builder_end_vector@@Base+0x200>
   24484:	add	r2, r2, #1
   24488:	add	ip, sp, #88	; 0x58
   2448c:	add	ip, ip, r2, lsl #3
   24490:	add	r1, r1, r3
   24494:	mov	r2, r0
   24498:	str	r1, [sp, #16]
   2449c:	str	r0, [sp, #20]
   244a0:	str	r5, [ip, #-72]	; 0xffffffb8
   244a4:	str	r3, [ip, #-68]	; 0xffffffbc
   244a8:	b	243c0 <flatcc_builder_end_vector@@Base+0xbc>
   244ac:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   244b0:	movw	r1, #58600	; 0xe4e8
   244b4:	movt	r1, #2
   244b8:	ldr	r3, [pc, #72]	; 24508 <flatcc_builder_end_vector@@Base+0x204>
   244bc:	movw	r0, #58792	; 0xe5a8
   244c0:	movt	r0, #2
   244c4:	movw	r2, #647	; 0x287
   244c8:	bl	12684 <__assert_fail@plt>
   244cc:	movw	r1, #58600	; 0xe4e8
   244d0:	movt	r1, #2
   244d4:	ldr	r3, [pc, #48]	; 2450c <flatcc_builder_end_vector@@Base+0x208>
   244d8:	movw	r0, #59360	; 0xe7e0
   244dc:	movt	r0, #2
   244e0:	movw	r2, #1365	; 0x555
   244e4:	bl	12684 <__assert_fail@plt>
   244e8:	movw	r1, #58600	; 0xe4e8
   244ec:	movt	r1, #2
   244f0:	ldr	r3, [pc, #24]	; 24510 <flatcc_builder_end_vector@@Base+0x20c>
   244f4:	movw	r0, #58964	; 0xe654
   244f8:	movt	r0, #2
   244fc:	movw	r2, #1400	; 0x578
   24500:	bl	12684 <__assert_fail@plt>
   24504:	andeq	sp, r2, r0, asr #28
   24508:	andeq	sp, r2, r4, asr #27
   2450c:	andeq	lr, r2, r4, lsl r3
   24510:	andeq	lr, r2, r4, lsr r3

00024514 <flatcc_builder_vector_count@@Base>:
   24514:	ldr	r3, [r0, #32]
   24518:	ldr	r0, [r3, #20]
   2451c:	bx	lr

00024520 <flatcc_builder_vector_edit@@Base>:
   24520:	ldr	r0, [r0, #16]
   24524:	bx	lr

00024528 <flatcc_builder_create_offset_vector_direct@@Base>:
   24528:	cmn	r2, #-1073741823	; 0xc0000001
   2452c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24530:	strd	r6, [sp, #8]
   24534:	str	r8, [sp, #16]
   24538:	str	lr, [sp, #20]
   2453c:	sub	sp, sp, #88	; 0x58
   24540:	bhi	24644 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   24544:	ldrh	r3, [r0, #128]	; 0x80
   24548:	mov	r4, r0
   2454c:	mov	ip, #1
   24550:	str	r2, [sp, #12]
   24554:	ldr	r5, [r4, #136]	; 0x88
   24558:	str	ip, [sp, #20]
   2455c:	cmp	r3, #3
   24560:	movls	r3, #4
   24564:	strhls	r3, [r0, #128]	; 0x80
   24568:	mov	r0, #4
   2456c:	add	r3, sp, #12
   24570:	lsls	lr, r2, #2
   24574:	str	r0, [sp, #16]
   24578:	moveq	r7, #2
   2457c:	str	r3, [sp, #24]
   24580:	and	r3, r5, #3
   24584:	str	r0, [sp, #28]
   24588:	beq	245ac <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   2458c:	mov	r6, #2
   24590:	add	r0, lr, r0
   24594:	mov	ip, r6
   24598:	mov	r7, #3
   2459c:	str	r0, [sp, #16]
   245a0:	str	r6, [sp, #20]
   245a4:	str	r1, [sp, #32]
   245a8:	str	lr, [sp, #36]	; 0x24
   245ac:	cmp	r3, #0
   245b0:	bne	24618 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   245b4:	cmp	r2, #0
   245b8:	beq	24668 <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   245bc:	ldr	r3, [r1]
   245c0:	cmp	r3, #0
   245c4:	subne	lr, lr, #4
   245c8:	movne	r2, #0
   245cc:	beq	245fc <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   245d0:	sub	r3, r3, #4
   245d4:	cmp	r2, lr
   245d8:	sub	r3, r3, r5
   245dc:	add	r3, r3, r0
   245e0:	sub	r3, r3, r2
   245e4:	str	r3, [r1]
   245e8:	beq	24664 <flatcc_builder_create_offset_vector_direct@@Base+0x13c>
   245ec:	ldr	r3, [r1, #4]!
   245f0:	add	r2, r2, #4
   245f4:	cmp	r3, #0
   245f8:	bne	245d0 <flatcc_builder_create_offset_vector_direct@@Base+0xa8>
   245fc:	movw	r1, #58600	; 0xe4e8
   24600:	movt	r1, #2
   24604:	ldr	r3, [pc, #176]	; 246bc <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   24608:	movw	r0, #58792	; 0xe5a8
   2460c:	movt	r0, #2
   24610:	movw	r2, #1463	; 0x5b7
   24614:	bl	12684 <__assert_fail@plt>
   24618:	ldr	r8, [pc, #160]	; 246c0 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   2461c:	add	ip, ip, #1
   24620:	add	r6, sp, #88	; 0x58
   24624:	add	r6, r6, ip, lsl #3
   24628:	add	r0, r0, r3
   2462c:	mov	ip, r7
   24630:	str	r0, [sp, #16]
   24634:	str	r7, [sp, #20]
   24638:	str	r8, [r6, #-72]	; 0xffffffb8
   2463c:	str	r3, [r6, #-68]	; 0xffffffbc
   24640:	b	245b4 <flatcc_builder_create_offset_vector_direct@@Base+0x8c>
   24644:	mov	r6, #0
   24648:	mov	r0, r6
   2464c:	add	sp, sp, #88	; 0x58
   24650:	ldrd	r4, [sp]
   24654:	ldrd	r6, [sp, #8]
   24658:	ldr	r8, [sp, #16]
   2465c:	add	sp, sp, #20
   24660:	pop	{pc}		; (ldr pc, [sp], #4)
   24664:	ldr	r5, [r4, #136]	; 0x88
   24668:	sub	r6, r5, r0
   2466c:	cmp	r6, r5
   24670:	bge	246a0 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   24674:	mov	r2, ip
   24678:	mov	r3, r6
   2467c:	str	r0, [sp]
   24680:	add	r1, sp, #24
   24684:	ldr	r0, [r4, #36]	; 0x24
   24688:	ldr	r5, [r4, #44]	; 0x2c
   2468c:	blx	r5
   24690:	cmp	r0, #0
   24694:	streq	r6, [r4, #136]	; 0x88
   24698:	beq	24648 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   2469c:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   246a0:	movw	r1, #58600	; 0xe4e8
   246a4:	movt	r1, #2
   246a8:	ldr	r3, [pc, #20]	; 246c4 <flatcc_builder_create_offset_vector_direct@@Base+0x19c>
   246ac:	movw	r0, #58792	; 0xe5a8
   246b0:	movt	r0, #2
   246b4:	movw	r2, #647	; 0x287
   246b8:	bl	12684 <__assert_fail@plt>
   246bc:	andeq	lr, r2, r0, asr #32
   246c0:	andeq	sp, r2, r0, asr #28
   246c4:	andeq	sp, r2, r4, asr #27

000246c8 <flatcc_builder_end_offset_vector@@Base>:
   246c8:	ldr	r3, [r0, #32]
   246cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   246d0:	ldrh	r2, [r3, #14]
   246d4:	strd	r6, [sp, #8]
   246d8:	str	r8, [sp, #16]
   246dc:	str	lr, [sp, #20]
   246e0:	sub	sp, sp, #88	; 0x58
   246e4:	cmp	r2, #5
   246e8:	bne	248d0 <flatcc_builder_end_offset_vector@@Base+0x208>
   246ec:	ldr	r3, [r3, #20]
   246f0:	cmn	r3, #-1073741823	; 0xc0000001
   246f4:	bhi	247f8 <flatcc_builder_end_offset_vector@@Base+0x130>
   246f8:	ldrh	r2, [r0, #128]	; 0x80
   246fc:	mov	r4, r0
   24700:	add	r5, sp, #12
   24704:	mov	r1, #1
   24708:	str	r3, [sp, #12]
   2470c:	ldr	ip, [r4, #136]	; 0x88
   24710:	str	r1, [sp, #20]
   24714:	ldr	r0, [r0, #16]
   24718:	cmp	r2, #3
   2471c:	str	r5, [sp, #24]
   24720:	movls	r2, #4
   24724:	and	r5, ip, #3
   24728:	strhls	r2, [r4, #128]	; 0x80
   2472c:	mov	r2, #4
   24730:	lsls	lr, r3, #2
   24734:	moveq	r6, #2
   24738:	str	r2, [sp, #16]
   2473c:	str	r2, [sp, #28]
   24740:	beq	24764 <flatcc_builder_end_offset_vector@@Base+0x9c>
   24744:	mov	r7, #2
   24748:	add	r2, lr, r2
   2474c:	mov	r1, r7
   24750:	mov	r6, #3
   24754:	str	r2, [sp, #16]
   24758:	str	r7, [sp, #20]
   2475c:	str	r0, [sp, #32]
   24760:	str	lr, [sp, #36]	; 0x24
   24764:	cmp	r5, #0
   24768:	bne	247d0 <flatcc_builder_end_offset_vector@@Base+0x108>
   2476c:	cmp	r3, #0
   24770:	beq	24820 <flatcc_builder_end_offset_vector@@Base+0x158>
   24774:	ldr	r3, [r0]
   24778:	cmp	r3, #0
   2477c:	subne	lr, lr, #4
   24780:	movne	r1, #0
   24784:	beq	247b4 <flatcc_builder_end_offset_vector@@Base+0xec>
   24788:	sub	r3, r3, #4
   2478c:	cmp	r1, lr
   24790:	sub	r3, r3, ip
   24794:	add	r3, r3, r2
   24798:	sub	r3, r3, r1
   2479c:	str	r3, [r0]
   247a0:	beq	24818 <flatcc_builder_end_offset_vector@@Base+0x150>
   247a4:	ldr	r3, [r0, #4]!
   247a8:	add	r1, r1, #4
   247ac:	cmp	r3, #0
   247b0:	bne	24788 <flatcc_builder_end_offset_vector@@Base+0xc0>
   247b4:	movw	r1, #58600	; 0xe4e8
   247b8:	movt	r1, #2
   247bc:	ldr	r3, [pc, #328]	; 2490c <flatcc_builder_end_offset_vector@@Base+0x244>
   247c0:	movw	r0, #58792	; 0xe5a8
   247c4:	movt	r0, #2
   247c8:	movw	r2, #1463	; 0x5b7
   247cc:	bl	12684 <__assert_fail@plt>
   247d0:	ldr	r7, [pc, #312]	; 24910 <flatcc_builder_end_offset_vector@@Base+0x248>
   247d4:	add	r1, r1, #1
   247d8:	add	r8, sp, #88	; 0x58
   247dc:	add	r1, r8, r1, lsl #3
   247e0:	add	r2, r2, r5
   247e4:	str	r2, [sp, #16]
   247e8:	str	r6, [sp, #20]
   247ec:	str	r7, [r1, #-72]	; 0xffffffb8
   247f0:	str	r5, [r1, #-68]	; 0xffffffbc
   247f4:	b	2476c <flatcc_builder_end_offset_vector@@Base+0xa4>
   247f8:	mov	r5, #0
   247fc:	mov	r0, r5
   24800:	add	sp, sp, #88	; 0x58
   24804:	ldrd	r4, [sp]
   24808:	ldrd	r6, [sp, #8]
   2480c:	ldr	r8, [sp, #16]
   24810:	add	sp, sp, #20
   24814:	pop	{pc}		; (ldr pc, [sp], #4)
   24818:	ldr	r2, [sp, #16]
   2481c:	ldr	ip, [r4, #136]	; 0x88
   24820:	sub	r5, ip, r2
   24824:	cmp	r5, ip
   24828:	bge	248f0 <flatcc_builder_end_offset_vector@@Base+0x228>
   2482c:	add	r1, sp, #24
   24830:	mov	r3, r5
   24834:	str	r2, [sp]
   24838:	ldr	r2, [sp, #20]
   2483c:	ldr	r0, [r4, #36]	; 0x24
   24840:	ldr	r6, [r4, #44]	; 0x2c
   24844:	blx	r6
   24848:	subs	r1, r0, #0
   2484c:	bne	248ec <flatcc_builder_end_offset_vector@@Base+0x224>
   24850:	cmp	r5, #0
   24854:	str	r5, [r4, #136]	; 0x88
   24858:	beq	247f8 <flatcc_builder_end_offset_vector@@Base+0x130>
   2485c:	ldr	r0, [r4, #16]
   24860:	ldr	r2, [r4, #20]
   24864:	bl	12630 <memset@plt>
   24868:	ldr	r3, [r4, #32]
   2486c:	ldr	r0, [r4, #60]	; 0x3c
   24870:	ldr	r2, [r4, #64]	; 0x40
   24874:	ldr	ip, [r3]
   24878:	ldmib	r3, {r1, lr}
   2487c:	add	r0, r0, ip
   24880:	sub	r2, r2, ip
   24884:	str	r0, [r4, #16]
   24888:	cmp	r2, r1
   2488c:	ldrh	r0, [r4, #128]	; 0x80
   24890:	movcs	r2, r1
   24894:	str	lr, [r4, #20]
   24898:	str	ip, [r4, #28]
   2489c:	ldrh	ip, [r4, #130]	; 0x82
   248a0:	str	r2, [r4, #24]
   248a4:	ldr	r2, [r4, #156]	; 0x9c
   248a8:	str	r1, [r3, #4]
   248ac:	cmp	r0, ip
   248b0:	sub	r0, r3, #36	; 0x24
   248b4:	strhcc	ip, [r4, #128]	; 0x80
   248b8:	ldrh	r1, [r3, #12]
   248bc:	sub	r3, r2, #1
   248c0:	str	r0, [r4, #32]
   248c4:	strh	r1, [r4, #130]	; 0x82
   248c8:	str	r3, [r4, #156]	; 0x9c
   248cc:	b	247fc <flatcc_builder_end_offset_vector@@Base+0x134>
   248d0:	movw	r1, #58600	; 0xe4e8
   248d4:	movt	r1, #2
   248d8:	ldr	r3, [pc, #52]	; 24914 <flatcc_builder_end_offset_vector@@Base+0x24c>
   248dc:	movw	r0, #59072	; 0xe6c0
   248e0:	movt	r0, #2
   248e4:	movw	r2, #1480	; 0x5c8
   248e8:	bl	12684 <__assert_fail@plt>
   248ec:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   248f0:	movw	r1, #58600	; 0xe4e8
   248f4:	movt	r1, #2
   248f8:	ldr	r3, [pc, #24]	; 24918 <flatcc_builder_end_offset_vector@@Base+0x250>
   248fc:	movw	r0, #58792	; 0xe5a8
   24900:	movt	r0, #2
   24904:	movw	r2, #647	; 0x287
   24908:	bl	12684 <__assert_fail@plt>
   2490c:	andeq	lr, r2, r0, asr #32
   24910:	andeq	sp, r2, r0, asr #28
   24914:	andeq	lr, r2, r4, lsr #4
   24918:	andeq	sp, r2, r4, asr #27

0002491c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2491c:	ldr	r2, [r0, #32]
   24920:	strd	r4, [sp, #-16]!
   24924:	ldrh	ip, [r2, #14]
   24928:	str	r6, [sp, #8]
   2492c:	str	lr, [sp, #12]
   24930:	cmp	ip, #5
   24934:	bne	249ec <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   24938:	ldr	r2, [r2, #20]
   2493c:	cmn	r2, #-1073741823	; 0xc0000001
   24940:	bhi	2495c <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   24944:	mov	r3, r1
   24948:	ldr	r1, [r0, #16]
   2494c:	mov	r4, r0
   24950:	bl	20e18 <flatcc_builder_default_alloc@@Base+0x388>
   24954:	subs	r5, r0, #0
   24958:	bne	24974 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   2495c:	mov	r5, #0
   24960:	mov	r0, r5
   24964:	ldrd	r4, [sp]
   24968:	ldr	r6, [sp, #8]
   2496c:	add	sp, sp, #12
   24970:	pop	{pc}		; (ldr pc, [sp], #4)
   24974:	mov	r1, #0
   24978:	ldr	r0, [r4, #16]
   2497c:	ldr	r2, [r4, #20]
   24980:	bl	12630 <memset@plt>
   24984:	ldr	r3, [r4, #32]
   24988:	ldr	r0, [r4, #60]	; 0x3c
   2498c:	ldr	r2, [r4, #64]	; 0x40
   24990:	ldr	ip, [r3]
   24994:	ldmib	r3, {r1, lr}
   24998:	add	r0, r0, ip
   2499c:	sub	r2, r2, ip
   249a0:	str	r0, [r4, #16]
   249a4:	cmp	r2, r1
   249a8:	ldrh	r0, [r4, #128]	; 0x80
   249ac:	movcs	r2, r1
   249b0:	str	lr, [r4, #20]
   249b4:	str	ip, [r4, #28]
   249b8:	ldrh	ip, [r4, #130]	; 0x82
   249bc:	str	r2, [r4, #24]
   249c0:	ldr	r2, [r4, #156]	; 0x9c
   249c4:	str	r1, [r3, #4]
   249c8:	cmp	r0, ip
   249cc:	sub	r0, r3, #36	; 0x24
   249d0:	strhcc	ip, [r4, #128]	; 0x80
   249d4:	ldrh	r1, [r3, #12]
   249d8:	sub	r3, r2, #1
   249dc:	str	r0, [r4, #32]
   249e0:	strh	r1, [r4, #130]	; 0x82
   249e4:	str	r3, [r4, #156]	; 0x9c
   249e8:	b	24960 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   249ec:	movw	r1, #58600	; 0xe4e8
   249f0:	movt	r1, #2
   249f4:	ldr	r3, [pc, #12]	; 24a08 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   249f8:	movw	r0, #59072	; 0xe6c0
   249fc:	movt	r0, #2
   24a00:	movw	r2, #1493	; 0x5d5
   24a04:	bl	12684 <__assert_fail@plt>
   24a08:	andeq	lr, r2, r0, asr r3

00024a0c <flatcc_builder_offset_vector_edit@@Base>:
   24a0c:	ldr	r0, [r0, #16]
   24a10:	bx	lr

00024a14 <flatcc_builder_offset_vector_count@@Base>:
   24a14:	ldr	r3, [r0, #32]
   24a18:	ldr	r0, [r3, #20]
   24a1c:	bx	lr

00024a20 <flatcc_builder_create_union_vector@@Base>:
   24a20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24a24:	mov	r4, r1
   24a28:	mov	r1, #4
   24a2c:	strd	r6, [sp, #8]
   24a30:	mov	r6, r0
   24a34:	mov	r0, r4
   24a38:	strd	r8, [sp, #16]
   24a3c:	mov	r5, r2
   24a40:	mov	r7, r3
   24a44:	str	sl, [sp, #24]
   24a48:	str	lr, [sp, #28]
   24a4c:	sub	sp, sp, #8
   24a50:	bl	20cf4 <flatcc_builder_default_alloc@@Base+0x264>
   24a54:	cmp	r0, #0
   24a58:	bne	24bc4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   24a5c:	ldr	ip, [r4, #28]
   24a60:	mov	lr, #4
   24a64:	mov	r8, #5
   24a68:	mvn	r9, #3
   24a6c:	ldr	r3, [r4, #32]
   24a70:	ldr	r2, [r4, #64]	; 0x40
   24a74:	ldr	r1, [r4, #60]	; 0x3c
   24a78:	strh	r8, [r3, #14]
   24a7c:	str	lr, [r3, #16]
   24a80:	sub	r2, r2, ip
   24a84:	str	r0, [r3, #20]
   24a88:	mov	r0, r4
   24a8c:	cmn	r2, #4
   24a90:	add	r1, r1, ip
   24a94:	mvnhi	r2, #3
   24a98:	str	r1, [r4, #16]
   24a9c:	mov	r1, r7
   24aa0:	str	r2, [r4, #24]
   24aa4:	str	r9, [r3, #4]
   24aa8:	bl	2259c <flatcc_builder_extend_offset_vector@@Base>
   24aac:	cmp	r0, #0
   24ab0:	beq	24bc4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   24ab4:	ldr	r8, [r4, #20]
   24ab8:	ldr	r3, [r4, #24]
   24abc:	add	r2, r7, r8
   24ac0:	cmp	r2, r3
   24ac4:	str	r2, [r4, #20]
   24ac8:	bcs	24bf0 <flatcc_builder_create_union_vector@@Base+0x1d0>
   24acc:	ldr	r1, [r4, #16]
   24ad0:	adds	r8, r1, r8
   24ad4:	beq	24bc4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   24ad8:	cmp	r7, #0
   24adc:	beq	24b0c <flatcc_builder_create_union_vector@@Base+0xec>
   24ae0:	add	lr, r5, r7, lsl #3
   24ae4:	mov	r2, r5
   24ae8:	sub	r0, r8, #1
   24aec:	sub	r3, r1, #4
   24af0:	ldrb	ip, [r2]
   24af4:	add	r2, r2, #8
   24af8:	strb	ip, [r0, #1]!
   24afc:	ldr	ip, [r2, #-4]
   24b00:	cmp	lr, r2
   24b04:	str	ip, [r3, #4]!
   24b08:	bne	24af0 <flatcc_builder_create_union_vector@@Base+0xd0>
   24b0c:	mov	r3, r8
   24b10:	mov	r2, r7
   24b14:	mov	r0, r4
   24b18:	bl	20e18 <flatcc_builder_default_alloc@@Base+0x388>
   24b1c:	subs	r5, r0, #0
   24b20:	beq	24c50 <flatcc_builder_create_union_vector@@Base+0x230>
   24b24:	mvn	ip, #0
   24b28:	mov	r3, #1
   24b2c:	mov	r2, r7
   24b30:	mov	r1, r8
   24b34:	mov	r0, r4
   24b38:	stm	sp, {r3, ip}
   24b3c:	bl	241a8 <flatcc_builder_create_vector@@Base>
   24b40:	mov	r7, r0
   24b44:	mov	r1, #0
   24b48:	ldr	r0, [r4, #16]
   24b4c:	ldr	r2, [r4, #20]
   24b50:	bl	12630 <memset@plt>
   24b54:	ldr	r3, [r4, #32]
   24b58:	str	r7, [r6]
   24b5c:	ldr	r0, [r4, #60]	; 0x3c
   24b60:	str	r5, [r6, #4]
   24b64:	ldr	r2, [r4, #64]	; 0x40
   24b68:	ldr	ip, [r3]
   24b6c:	ldmib	r3, {r1, lr}
   24b70:	add	r0, r0, ip
   24b74:	sub	r2, r2, ip
   24b78:	str	r0, [r4, #16]
   24b7c:	cmp	r2, r1
   24b80:	ldrh	r0, [r4, #128]	; 0x80
   24b84:	movcs	r2, r1
   24b88:	str	lr, [r4, #20]
   24b8c:	str	ip, [r4, #28]
   24b90:	ldrh	ip, [r4, #130]	; 0x82
   24b94:	str	r2, [r4, #24]
   24b98:	ldr	r2, [r4, #156]	; 0x9c
   24b9c:	str	r1, [r3, #4]
   24ba0:	cmp	r0, ip
   24ba4:	sub	r0, r3, #36	; 0x24
   24ba8:	strhcc	ip, [r4, #128]	; 0x80
   24bac:	ldrh	r1, [r3, #12]
   24bb0:	sub	r3, r2, #1
   24bb4:	str	r0, [r4, #32]
   24bb8:	strh	r1, [r4, #130]	; 0x82
   24bbc:	str	r3, [r4, #156]	; 0x9c
   24bc0:	b	24bd0 <flatcc_builder_create_union_vector@@Base+0x1b0>
   24bc4:	mov	r3, #0
   24bc8:	str	r3, [r6]
   24bcc:	str	r3, [r6, #4]
   24bd0:	mov	r0, r6
   24bd4:	add	sp, sp, #8
   24bd8:	ldrd	r4, [sp]
   24bdc:	ldrd	r6, [sp, #8]
   24be0:	ldrd	r8, [sp, #16]
   24be4:	ldr	sl, [sp, #24]
   24be8:	add	sp, sp, #28
   24bec:	pop	{pc}		; (ldr pc, [sp], #4)
   24bf0:	ldr	ip, [r4, #28]
   24bf4:	mov	r0, #1
   24bf8:	add	r1, r4, #60	; 0x3c
   24bfc:	mov	r3, r0
   24c00:	str	r0, [sp]
   24c04:	ldr	sl, [r4, #48]	; 0x30
   24c08:	add	ip, ip, r0
   24c0c:	ldr	r0, [r4, #40]	; 0x28
   24c10:	add	r2, ip, r2
   24c14:	blx	sl
   24c18:	cmp	r0, #0
   24c1c:	bne	24bc4 <flatcc_builder_create_union_vector@@Base+0x1a4>
   24c20:	ldr	r1, [r4, #28]
   24c24:	ldr	r2, [r4, #32]
   24c28:	ldr	r3, [r4, #64]	; 0x40
   24c2c:	ldr	r0, [r4, #60]	; 0x3c
   24c30:	sub	r3, r3, r1
   24c34:	cmn	r3, #4
   24c38:	movhi	r3, r9
   24c3c:	add	r1, r0, r1
   24c40:	str	r1, [r4, #16]
   24c44:	str	r3, [r4, #24]
   24c48:	str	r9, [r2, #4]
   24c4c:	b	24ad0 <flatcc_builder_create_union_vector@@Base+0xb0>
   24c50:	mov	r7, r5
   24c54:	b	24b44 <flatcc_builder_create_union_vector@@Base+0x124>

00024c58 <flatcc_builder_create_union_vector_direct@@Base>:
   24c58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24c5c:	strd	r6, [sp, #8]
   24c60:	mov	r6, r0
   24c64:	str	r8, [sp, #16]
   24c68:	str	lr, [sp, #20]
   24c6c:	sub	sp, sp, #88	; 0x58
   24c70:	ldr	r4, [sp, #112]	; 0x70
   24c74:	cmn	r4, #-1073741823	; 0xc0000001
   24c78:	bhi	24d4c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   24c7c:	mov	r5, r1
   24c80:	mov	r8, r2
   24c84:	mov	r1, r3
   24c88:	mov	r0, r5
   24c8c:	mov	r3, r2
   24c90:	mov	r2, r4
   24c94:	bl	20e18 <flatcc_builder_default_alloc@@Base+0x388>
   24c98:	subs	r7, r0, #0
   24c9c:	beq	24d4c <flatcc_builder_create_union_vector_direct@@Base+0xf4>
   24ca0:	ldrh	r3, [r5, #128]	; 0x80
   24ca4:	mov	r2, #1
   24ca8:	mov	r1, #4
   24cac:	str	r4, [sp, #12]
   24cb0:	ldr	r0, [r5, #136]	; 0x88
   24cb4:	str	r1, [sp, #16]
   24cb8:	str	r1, [sp, #28]
   24cbc:	cmp	r3, #3
   24cc0:	movls	r3, #4
   24cc4:	strhls	r3, [r5, #128]	; 0x80
   24cc8:	add	r3, sp, #12
   24ccc:	cmp	r4, #0
   24cd0:	moveq	ip, #2
   24cd4:	strd	r2, [sp, #20]
   24cd8:	sub	r3, r0, r4
   24cdc:	and	r3, r3, #3
   24ce0:	bne	24d74 <flatcc_builder_create_union_vector_direct@@Base+0x11c>
   24ce4:	cmp	r3, #0
   24ce8:	beq	24d14 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   24cec:	ldr	r4, [pc, #196]	; 24db8 <flatcc_builder_create_union_vector_direct@@Base+0x160>
   24cf0:	add	r2, r2, #1
   24cf4:	add	lr, sp, #88	; 0x58
   24cf8:	add	lr, lr, r2, lsl #3
   24cfc:	add	r1, r1, r3
   24d00:	mov	r2, ip
   24d04:	str	r1, [sp, #16]
   24d08:	str	ip, [sp, #20]
   24d0c:	str	r4, [lr, #-72]	; 0xffffffb8
   24d10:	str	r3, [lr, #-68]	; 0xffffffbc
   24d14:	sub	r4, r0, r1
   24d18:	cmp	r0, r4
   24d1c:	ble	24d98 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   24d20:	mov	r3, r4
   24d24:	str	r1, [sp]
   24d28:	add	r1, sp, #24
   24d2c:	ldr	r0, [r5, #36]	; 0x24
   24d30:	ldr	r8, [r5, #44]	; 0x2c
   24d34:	blx	r8
   24d38:	cmp	r0, #0
   24d3c:	bne	24db4 <flatcc_builder_create_union_vector_direct@@Base+0x15c>
   24d40:	stm	r6, {r4, r7}
   24d44:	str	r4, [r5, #136]	; 0x88
   24d48:	b	24d58 <flatcc_builder_create_union_vector_direct@@Base+0x100>
   24d4c:	mov	r3, #0
   24d50:	str	r3, [r6]
   24d54:	str	r3, [r6, #4]
   24d58:	mov	r0, r6
   24d5c:	add	sp, sp, #88	; 0x58
   24d60:	ldrd	r4, [sp]
   24d64:	ldrd	r6, [sp, #8]
   24d68:	ldr	r8, [sp, #16]
   24d6c:	add	sp, sp, #20
   24d70:	pop	{pc}		; (ldr pc, [sp], #4)
   24d74:	mov	lr, #2
   24d78:	add	r1, r4, r1
   24d7c:	mov	r2, lr
   24d80:	mov	ip, #3
   24d84:	str	r1, [sp, #16]
   24d88:	str	lr, [sp, #20]
   24d8c:	str	r8, [sp, #32]
   24d90:	str	r4, [sp, #36]	; 0x24
   24d94:	b	24ce4 <flatcc_builder_create_union_vector_direct@@Base+0x8c>
   24d98:	movw	r1, #58600	; 0xe4e8
   24d9c:	movt	r1, #2
   24da0:	ldr	r3, [pc, #20]	; 24dbc <flatcc_builder_create_union_vector_direct@@Base+0x164>
   24da4:	movw	r0, #58792	; 0xe5a8
   24da8:	movt	r0, #2
   24dac:	movw	r2, #647	; 0x287
   24db0:	bl	12684 <__assert_fail@plt>
   24db4:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   24db8:	andeq	sp, r2, r0, asr #28
   24dbc:	andeq	sp, r2, r4, asr #27

00024dc0 <flatcc_builder_start_union_vector@@Base>:
   24dc0:	ldrd	r2, [r0, #156]	; 0x9c
   24dc4:	strd	r4, [sp, #-16]!
   24dc8:	mov	r4, r0
   24dcc:	str	r6, [sp, #8]
   24dd0:	str	lr, [sp, #12]
   24dd4:	sub	sp, sp, #8
   24dd8:	add	r1, r2, #1
   24ddc:	cmp	r1, r3
   24de0:	str	r1, [r0, #156]	; 0x9c
   24de4:	ble	24f00 <flatcc_builder_start_union_vector@@Base+0x140>
   24de8:	ldr	r3, [r0, #176]	; 0xb0
   24dec:	cmp	r3, #0
   24df0:	cmpgt	r1, r3
   24df4:	movgt	r3, #1
   24df8:	movle	r3, #0
   24dfc:	bgt	24f10 <flatcc_builder_start_union_vector@@Base+0x150>
   24e00:	add	r2, r2, r2, lsl #3
   24e04:	ldr	r1, [r0, #88]	; 0x58
   24e08:	lsl	r5, r2, #2
   24e0c:	add	r2, r5, #36	; 0x24
   24e10:	cmp	r2, r1
   24e14:	bls	24e38 <flatcc_builder_start_union_vector@@Base+0x78>
   24e18:	mov	ip, #4
   24e1c:	add	r1, r0, #84	; 0x54
   24e20:	ldr	r0, [r0, #40]	; 0x28
   24e24:	str	ip, [sp]
   24e28:	ldr	r6, [r4, #48]	; 0x30
   24e2c:	blx	r6
   24e30:	cmp	r0, #0
   24e34:	bne	24f18 <flatcc_builder_start_union_vector@@Base+0x158>
   24e38:	ldr	r3, [r4, #84]	; 0x54
   24e3c:	add	r3, r3, r5
   24e40:	cmp	r3, #0
   24e44:	str	r3, [r4, #32]
   24e48:	beq	24f10 <flatcc_builder_start_union_vector@@Base+0x150>
   24e4c:	ldr	r2, [r4, #88]	; 0x58
   24e50:	movw	r0, #36409	; 0x8e39
   24e54:	movt	r0, #14563	; 0x38e3
   24e58:	ldr	r1, [r4, #176]	; 0xb0
   24e5c:	umull	r0, r2, r0, r2
   24e60:	lsr	r2, r2, #3
   24e64:	cmp	r1, #0
   24e68:	cmpgt	r2, r1
   24e6c:	movgt	r2, r1
   24e70:	str	r2, [r4, #160]	; 0xa0
   24e74:	ldr	r2, [r4, #20]
   24e78:	mvn	r5, #3
   24e7c:	mov	lr, #0
   24e80:	ldr	r6, [r4, #28]
   24e84:	ldrh	r0, [r4, #130]	; 0x82
   24e88:	ldr	ip, [r4, #60]	; 0x3c
   24e8c:	ldr	r1, [r4, #64]	; 0x40
   24e90:	str	r2, [r3, #8]
   24e94:	add	r2, r2, r6
   24e98:	add	r2, r2, #7
   24e9c:	strh	r0, [r3, #12]
   24ea0:	mov	r0, #4
   24ea4:	bic	r2, r2, #7
   24ea8:	add	ip, ip, r2
   24eac:	strh	r0, [r4, #130]	; 0x82
   24eb0:	mov	r0, lr
   24eb4:	sub	r1, r1, r2
   24eb8:	str	r6, [r3]
   24ebc:	mov	r6, #8
   24ec0:	cmp	r1, r5
   24ec4:	str	lr, [r4, #20]
   24ec8:	movhi	r1, r5
   24ecc:	str	r2, [r4, #28]
   24ed0:	mov	r2, #7
   24ed4:	strh	r2, [r3, #14]
   24ed8:	str	r6, [r3, #16]
   24edc:	str	lr, [r3, #20]
   24ee0:	str	ip, [r4, #16]
   24ee4:	str	r1, [r4, #24]
   24ee8:	str	r5, [r3, #4]
   24eec:	add	sp, sp, #8
   24ef0:	ldrd	r4, [sp]
   24ef4:	ldr	r6, [sp, #8]
   24ef8:	add	sp, sp, #12
   24efc:	pop	{pc}		; (ldr pc, [sp], #4)
   24f00:	ldr	r3, [r0, #32]
   24f04:	add	r3, r3, #36	; 0x24
   24f08:	str	r3, [r0, #32]
   24f0c:	b	24e74 <flatcc_builder_start_union_vector@@Base+0xb4>
   24f10:	mvn	r0, #0
   24f14:	b	24eec <flatcc_builder_start_union_vector@@Base+0x12c>
   24f18:	bl	20bb4 <flatcc_builder_default_alloc@@Base+0x124>

00024f1c <flatcc_builder_end_union_vector@@Base>:
   24f1c:	ldr	r3, [r1, #32]
   24f20:	strd	r4, [sp, #-28]!	; 0xffffffe4
   24f24:	ldrh	r2, [r3, #14]
   24f28:	strd	r6, [sp, #8]
   24f2c:	strd	r8, [sp, #16]
   24f30:	str	lr, [sp, #24]
   24f34:	sub	sp, sp, #12
   24f38:	cmp	r2, #7
   24f3c:	bne	250f8 <flatcc_builder_end_union_vector@@Base+0x1dc>
   24f40:	ldr	r5, [r3, #20]
   24f44:	mov	r4, r1
   24f48:	mov	r6, r0
   24f4c:	ldr	r8, [r1, #20]
   24f50:	ldr	r3, [r1, #24]
   24f54:	lsl	r7, r5, #2
   24f58:	add	r2, r7, r5
   24f5c:	add	r2, r2, r8
   24f60:	cmp	r2, r3
   24f64:	str	r2, [r1, #20]
   24f68:	bcs	25078 <flatcc_builder_end_union_vector@@Base+0x15c>
   24f6c:	ldr	r3, [r1, #16]
   24f70:	adds	r1, r3, r8
   24f74:	beq	250e0 <flatcc_builder_end_union_vector@@Base+0x1c4>
   24f78:	cmp	r5, #0
   24f7c:	add	r7, r1, r7
   24f80:	subne	r0, r7, #1
   24f84:	addne	lr, r3, r5, lsl #3
   24f88:	subne	r2, r1, #4
   24f8c:	beq	24fac <flatcc_builder_end_union_vector@@Base+0x90>
   24f90:	ldrb	ip, [r3]
   24f94:	add	r3, r3, #8
   24f98:	strb	ip, [r0, #1]!
   24f9c:	ldr	ip, [r3, #-4]
   24fa0:	cmp	lr, r3
   24fa4:	str	ip, [r2, #4]!
   24fa8:	bne	24f90 <flatcc_builder_end_union_vector@@Base+0x74>
   24fac:	mov	r3, r7
   24fb0:	mov	r2, r5
   24fb4:	mov	r0, r4
   24fb8:	bl	20e18 <flatcc_builder_default_alloc@@Base+0x388>
   24fbc:	subs	r8, r0, #0
   24fc0:	beq	250f0 <flatcc_builder_end_union_vector@@Base+0x1d4>
   24fc4:	mvn	ip, #0
   24fc8:	mov	r3, #1
   24fcc:	mov	r2, r5
   24fd0:	mov	r1, r7
   24fd4:	mov	r0, r4
   24fd8:	stm	sp, {r3, ip}
   24fdc:	bl	241a8 <flatcc_builder_create_vector@@Base>
   24fe0:	mov	r5, r0
   24fe4:	mov	r1, #0
   24fe8:	ldr	r0, [r4, #16]
   24fec:	ldr	r2, [r4, #20]
   24ff0:	bl	12630 <memset@plt>
   24ff4:	ldr	r3, [r4, #32]
   24ff8:	stm	r6, {r5, r8}
   24ffc:	ldr	r0, [r4, #60]	; 0x3c
   25000:	ldr	r2, [r4, #64]	; 0x40
   25004:	ldr	ip, [r3]
   25008:	ldmib	r3, {r1, lr}
   2500c:	add	r0, r0, ip
   25010:	sub	r2, r2, ip
   25014:	str	r0, [r4, #16]
   25018:	cmp	r2, r1
   2501c:	ldrh	r0, [r4, #128]	; 0x80
   25020:	movcs	r2, r1
   25024:	str	lr, [r4, #20]
   25028:	str	ip, [r4, #28]
   2502c:	ldrh	ip, [r4, #130]	; 0x82
   25030:	str	r2, [r4, #24]
   25034:	ldr	r2, [r4, #156]	; 0x9c
   25038:	str	r1, [r3, #4]
   2503c:	cmp	r0, ip
   25040:	sub	r0, r3, #36	; 0x24
   25044:	strhcc	ip, [r4, #128]	; 0x80
   25048:	ldrh	r1, [r3, #12]
   2504c:	sub	r3, r2, #1
   25050:	str	r0, [r4, #32]
   25054:	strh	r1, [r4, #130]	; 0x82
   25058:	str	r3, [r4, #156]	; 0x9c
   2505c:	mov	r0, r6
   25060:	add	sp, sp, #12
   25064:	ldrd	r4, [sp]
   25068:	ldrd	r6, [sp, #8]
   2506c:	ldrd	r8, [sp, #16]
   25070:	add	sp, sp, #24
   25074:	pop	{pc}		; (ldr pc, [sp], #4)
   25078:	ldr	ip, [r4, #28]
   2507c:	mov	r0, #1
   25080:	add	r1, r1, #60	; 0x3c
   25084:	mov	r3, r0
   25088:	str	r0, [sp]
   2508c:	ldr	r9, [r4, #48]	; 0x30
   25090:	add	ip, ip, r0
   25094:	ldr	r0, [r4, #40]	; 0x28
   25098:	add	r2, ip, r2
   2509c:	blx	r9
   250a0:	cmp	r0, #0
   250a4:	bne	250e0 <flatcc_builder_end_union_vector@@Base+0x1c4>
   250a8:	ldr	r1, [r4, #28]
   250ac:	ldr	r3, [r4, #60]	; 0x3c
   250b0:	ldr	r2, [r4, #64]	; 0x40
   250b4:	add	r3, r3, r1
   250b8:	sub	r2, r2, r1
   250bc:	mvn	r1, #3
   250c0:	str	r3, [r4, #16]
   250c4:	cmn	r2, #4
   250c8:	mvnhi	r2, #3
   250cc:	str	r2, [r4, #24]
   250d0:	ldr	r2, [r4, #32]
   250d4:	str	r1, [r2, #4]
   250d8:	adds	r1, r3, r8
   250dc:	bne	24f78 <flatcc_builder_end_union_vector@@Base+0x5c>
   250e0:	mov	r3, #0
   250e4:	str	r3, [r6]
   250e8:	str	r3, [r6, #4]
   250ec:	b	2505c <flatcc_builder_end_union_vector@@Base+0x140>
   250f0:	mov	r5, r8
   250f4:	b	24fe4 <flatcc_builder_end_union_vector@@Base+0xc8>
   250f8:	movw	r1, #58600	; 0xe4e8
   250fc:	movt	r1, #2
   25100:	ldr	r3, [pc, #12]	; 25114 <flatcc_builder_end_union_vector@@Base+0x1f8>
   25104:	movw	r0, #59380	; 0xe7f4
   25108:	movt	r0, #2
   2510c:	movw	r2, #1617	; 0x651
   25110:	bl	12684 <__assert_fail@plt>
   25114:	andeq	lr, r2, ip, ror r3

00025118 <flatcc_builder_union_vector_edit@@Base>:
   25118:	ldr	r0, [r0, #16]
   2511c:	bx	lr

00025120 <flatcc_builder_union_vector_count@@Base>:
   25120:	ldr	r3, [r0, #32]
   25124:	ldr	r0, [r3, #20]
   25128:	bx	lr

0002512c <flatcc_builder_extend_union_vector@@Base>:
   2512c:	ldr	ip, [r0, #32]
   25130:	strd	r4, [sp, #-20]!	; 0xffffffec
   25134:	mov	r4, r0
   25138:	ldr	r3, [ip, #20]
   2513c:	strd	r6, [sp, #8]
   25140:	str	lr, [sp, #16]
   25144:	sub	sp, sp, #12
   25148:	adds	r3, r1, r3
   2514c:	movcs	r2, #1
   25150:	movcc	r2, #0
   25154:	cmn	r3, #-536870911	; 0xe0000001
   25158:	movls	r0, #0
   2515c:	movhi	r0, #1
   25160:	orrs	r5, r2, r0
   25164:	bne	2520c <flatcc_builder_extend_union_vector@@Base+0xe0>
   25168:	ldr	r6, [r4, #20]
   2516c:	str	r3, [ip, #20]
   25170:	ldr	r3, [r4, #24]
   25174:	add	r2, r6, r1, lsl #3
   25178:	cmp	r2, r3
   2517c:	str	r2, [r4, #20]
   25180:	bcs	251a0 <flatcc_builder_extend_union_vector@@Base+0x74>
   25184:	ldr	r0, [r4, #16]
   25188:	add	r0, r0, r6
   2518c:	add	sp, sp, #12
   25190:	ldrd	r4, [sp]
   25194:	ldrd	r6, [sp, #8]
   25198:	add	sp, sp, #16
   2519c:	pop	{pc}		; (ldr pc, [sp], #4)
   251a0:	ldr	ip, [r4, #28]
   251a4:	mov	r0, #1
   251a8:	add	r1, r4, #60	; 0x3c
   251ac:	mov	r3, r0
   251b0:	str	r0, [sp]
   251b4:	ldr	r7, [r4, #48]	; 0x30
   251b8:	add	ip, ip, r0
   251bc:	ldr	r0, [r4, #40]	; 0x28
   251c0:	add	r2, ip, r2
   251c4:	blx	r7
   251c8:	cmp	r0, #0
   251cc:	bne	25204 <flatcc_builder_extend_union_vector@@Base+0xd8>
   251d0:	ldr	r2, [r4, #28]
   251d4:	ldr	r0, [r4, #60]	; 0x3c
   251d8:	ldr	r3, [r4, #64]	; 0x40
   251dc:	add	r0, r0, r2
   251e0:	sub	r3, r3, r2
   251e4:	mvn	r2, #3
   251e8:	str	r0, [r4, #16]
   251ec:	cmn	r3, #4
   251f0:	mvnhi	r3, #3
   251f4:	str	r3, [r4, #24]
   251f8:	ldr	r3, [r4, #32]
   251fc:	str	r2, [r3, #4]
   25200:	b	25188 <flatcc_builder_extend_union_vector@@Base+0x5c>
   25204:	mov	r0, r5
   25208:	b	2518c <flatcc_builder_extend_union_vector@@Base+0x60>
   2520c:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>

00025210 <flatcc_builder_truncate_union_vector@@Base>:
   25210:	mov	r3, r0
   25214:	ldr	r0, [r0, #32]
   25218:	str	r4, [sp, #-8]!
   2521c:	ldrh	r2, [r0, #14]
   25220:	str	lr, [sp, #4]
   25224:	cmp	r2, #7
   25228:	bne	25278 <flatcc_builder_truncate_union_vector@@Base+0x68>
   2522c:	mov	lr, r1
   25230:	ldr	r1, [r0, #20]
   25234:	cmp	r1, lr
   25238:	bcc	25294 <flatcc_builder_truncate_union_vector@@Base+0x84>
   2523c:	ldr	r2, [r0, #16]
   25240:	sub	ip, r1, lr
   25244:	mov	r1, #0
   25248:	str	ip, [r0, #20]
   2524c:	ldr	r0, [r3, #16]
   25250:	ldr	ip, [r3, #20]
   25254:	mul	r2, r2, lr
   25258:	sub	ip, ip, r2
   2525c:	add	r0, r0, ip
   25260:	str	ip, [r3, #20]
   25264:	bl	12630 <memset@plt>
   25268:	ldr	r4, [sp]
   2526c:	add	sp, sp, #4
   25270:	mov	r0, #0
   25274:	pop	{pc}		; (ldr pc, [sp], #4)
   25278:	movw	r1, #58600	; 0xe4e8
   2527c:	movt	r1, #2
   25280:	ldr	r3, [pc, #40]	; 252b0 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   25284:	movw	r0, #59380	; 0xe7f4
   25288:	movt	r0, #2
   2528c:	movw	r2, #1665	; 0x681
   25290:	bl	12684 <__assert_fail@plt>
   25294:	movw	r1, #58600	; 0xe4e8
   25298:	movt	r1, #2
   2529c:	ldr	r3, [pc, #12]	; 252b0 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   252a0:	movw	r0, #59160	; 0xe718
   252a4:	movt	r0, #2
   252a8:	movw	r2, #1666	; 0x682
   252ac:	bl	12684 <__assert_fail@plt>
   252b0:	muleq	r2, ip, r3

000252b4 <flatcc_builder_union_vector_push@@Base>:
   252b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   252b8:	strd	r6, [sp, #8]
   252bc:	str	lr, [sp, #16]
   252c0:	sub	sp, sp, #20
   252c4:	add	r3, sp, #16
   252c8:	stmdb	r3, {r1, r2}
   252cc:	ldr	r2, [r0, #32]
   252d0:	ldrh	r3, [r2, #14]
   252d4:	cmp	r3, #7
   252d8:	bne	2539c <flatcc_builder_union_vector_push@@Base+0xe8>
   252dc:	ldr	r3, [r2, #20]
   252e0:	cmn	r3, #-536870911	; 0xe0000001
   252e4:	beq	25394 <flatcc_builder_union_vector_push@@Base+0xe0>
   252e8:	ldr	r5, [r0, #20]
   252ec:	add	r3, r3, #1
   252f0:	mov	r4, r0
   252f4:	ldr	r1, [r0, #24]
   252f8:	str	r3, [r2, #20]
   252fc:	add	r3, r5, #8
   25300:	cmp	r3, r1
   25304:	str	r3, [r0, #20]
   25308:	bcs	25330 <flatcc_builder_union_vector_push@@Base+0x7c>
   2530c:	ldr	r3, [r0, #16]
   25310:	adds	r0, r3, r5
   25314:	ldrdne	r6, [sp, #8]
   25318:	strdne	r6, [r3, r5]
   2531c:	add	sp, sp, #20
   25320:	ldrd	r4, [sp]
   25324:	ldrd	r6, [sp, #8]
   25328:	add	sp, sp, #16
   2532c:	pop	{pc}		; (ldr pc, [sp], #4)
   25330:	ldr	r2, [r4, #28]
   25334:	mov	r0, #1
   25338:	add	r1, r4, #60	; 0x3c
   2533c:	mov	r3, r0
   25340:	str	r0, [sp]
   25344:	ldr	r0, [r4, #40]	; 0x28
   25348:	add	r2, r5, r2
   2534c:	ldr	r6, [r4, #48]	; 0x30
   25350:	add	r2, r2, #9
   25354:	blx	r6
   25358:	cmp	r0, #0
   2535c:	bne	25394 <flatcc_builder_union_vector_push@@Base+0xe0>
   25360:	ldr	r1, [r4, #28]
   25364:	ldr	r3, [r4, #60]	; 0x3c
   25368:	ldr	r2, [r4, #64]	; 0x40
   2536c:	add	r3, r3, r1
   25370:	sub	r2, r2, r1
   25374:	mvn	r1, #3
   25378:	str	r3, [r4, #16]
   2537c:	cmn	r2, #4
   25380:	mvnhi	r2, #3
   25384:	str	r2, [r4, #24]
   25388:	ldr	r2, [r4, #32]
   2538c:	str	r1, [r2, #4]
   25390:	b	25310 <flatcc_builder_union_vector_push@@Base+0x5c>
   25394:	mov	r0, #0
   25398:	b	2531c <flatcc_builder_union_vector_push@@Base+0x68>
   2539c:	movw	r1, #58600	; 0xe4e8
   253a0:	movt	r1, #2
   253a4:	ldr	r3, [pc, #12]	; 253b8 <flatcc_builder_union_vector_push@@Base+0x104>
   253a8:	movw	r0, #59380	; 0xe7f4
   253ac:	movt	r0, #2
   253b0:	movw	r2, #1677	; 0x68d
   253b4:	bl	12684 <__assert_fail@plt>
   253b8:	andeq	lr, r2, r4, asr #7

000253bc <flatcc_builder_append_union_vector@@Base>:
   253bc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   253c0:	mov	r5, r0
   253c4:	ldr	r0, [r0, #32]
   253c8:	ldrh	r3, [r0, #14]
   253cc:	strd	r6, [sp, #8]
   253d0:	strd	r8, [sp, #16]
   253d4:	str	lr, [sp, #24]
   253d8:	sub	sp, sp, #12
   253dc:	cmp	r3, #7
   253e0:	bne	254d8 <flatcc_builder_append_union_vector@@Base+0x11c>
   253e4:	ldr	r3, [r0, #20]
   253e8:	mov	r7, r1
   253ec:	adds	r1, r2, r3
   253f0:	movcs	r4, #1
   253f4:	movcc	r4, #0
   253f8:	cmn	r1, #-536870911	; 0xe0000001
   253fc:	movls	r3, #0
   25400:	movhi	r3, #1
   25404:	orrs	r4, r4, r3
   25408:	bne	254d4 <flatcc_builder_append_union_vector@@Base+0x118>
   2540c:	ldr	r8, [r5, #20]
   25410:	lsl	r6, r2, #3
   25414:	ldr	r3, [r5, #24]
   25418:	str	r1, [r0, #20]
   2541c:	add	ip, r6, r8
   25420:	cmp	ip, r3
   25424:	str	ip, [r5, #20]
   25428:	bcs	25468 <flatcc_builder_append_union_vector@@Base+0xac>
   2542c:	ldr	r3, [r5, #16]
   25430:	adds	r3, r3, r8
   25434:	beq	2544c <flatcc_builder_append_union_vector@@Base+0x90>
   25438:	mov	r0, r3
   2543c:	mov	r2, r6
   25440:	mov	r1, r7
   25444:	bl	12588 <memcpy@plt>
   25448:	mov	r3, r0
   2544c:	mov	r0, r3
   25450:	add	sp, sp, #12
   25454:	ldrd	r4, [sp]
   25458:	ldrd	r6, [sp, #8]
   2545c:	ldrd	r8, [sp, #16]
   25460:	add	sp, sp, #24
   25464:	pop	{pc}		; (ldr pc, [sp], #4)
   25468:	ldr	r2, [r5, #28]
   2546c:	mov	r0, #1
   25470:	add	r1, r5, #60	; 0x3c
   25474:	mov	r3, r0
   25478:	str	r0, [sp]
   2547c:	ldr	r9, [r5, #48]	; 0x30
   25480:	add	r2, r2, r0
   25484:	ldr	r0, [r5, #40]	; 0x28
   25488:	add	r2, r2, ip
   2548c:	blx	r9
   25490:	cmp	r0, #0
   25494:	bne	254cc <flatcc_builder_append_union_vector@@Base+0x110>
   25498:	ldr	r1, [r5, #28]
   2549c:	ldr	r3, [r5, #60]	; 0x3c
   254a0:	ldr	r2, [r5, #64]	; 0x40
   254a4:	add	r3, r3, r1
   254a8:	sub	r2, r2, r1
   254ac:	mvn	r1, #3
   254b0:	str	r3, [r5, #16]
   254b4:	cmn	r2, #4
   254b8:	mvnhi	r2, #3
   254bc:	str	r2, [r5, #24]
   254c0:	ldr	r2, [r5, #32]
   254c4:	str	r1, [r2, #4]
   254c8:	b	25430 <flatcc_builder_append_union_vector@@Base+0x74>
   254cc:	mov	r3, r4
   254d0:	b	2544c <flatcc_builder_append_union_vector@@Base+0x90>
   254d4:	bl	20c54 <flatcc_builder_default_alloc@@Base+0x1c4>
   254d8:	movw	r1, #58600	; 0xe4e8
   254dc:	movt	r1, #2
   254e0:	ldr	r3, [pc, #12]	; 254f4 <flatcc_builder_append_union_vector@@Base+0x138>
   254e4:	movw	r0, #59380	; 0xe7f4
   254e8:	movt	r0, #2
   254ec:	movw	r2, #1692	; 0x69c
   254f0:	bl	12684 <__assert_fail@plt>
   254f4:	andeq	lr, r2, r8, ror #7

000254f8 <flatcc_builder_create_string@@Base>:
   254f8:	strd	r4, [sp, #-16]!
   254fc:	mov	r4, r0
   25500:	mov	ip, #4
   25504:	str	r6, [sp, #8]
   25508:	cmp	r2, #0
   2550c:	str	lr, [sp, #12]
   25510:	sub	sp, sp, #88	; 0x58
   25514:	moveq	r6, #2
   25518:	ldr	lr, [r0, #136]	; 0x88
   2551c:	add	r3, sp, #12
   25520:	str	r2, [sp, #12]
   25524:	str	r3, [sp, #24]
   25528:	mov	r3, #1
   2552c:	moveq	r1, r3
   25530:	str	ip, [sp, #28]
   25534:	sub	r0, lr, r2
   25538:	sub	r0, r0, #1
   2553c:	and	r0, r0, #3
   25540:	add	r0, r0, r3
   25544:	beq	2555c <flatcc_builder_create_string@@Base+0x64>
   25548:	add	ip, r2, ip
   2554c:	mov	r6, #3
   25550:	str	r1, [sp, #32]
   25554:	mov	r1, #2
   25558:	str	r2, [sp, #36]	; 0x24
   2555c:	ldr	r3, [pc, #136]	; 255ec <flatcc_builder_create_string@@Base+0xf4>
   25560:	add	r1, r1, #1
   25564:	add	r2, sp, #88	; 0x58
   25568:	add	ip, r0, ip
   2556c:	add	r1, r2, r1, lsl #3
   25570:	sub	r5, lr, ip
   25574:	cmp	lr, r5
   25578:	str	ip, [sp, #16]
   2557c:	str	r6, [sp, #20]
   25580:	str	r3, [r1, #-72]	; 0xffffffb8
   25584:	str	r0, [r1, #-68]	; 0xffffffbc
   25588:	ble	255cc <flatcc_builder_create_string@@Base+0xd4>
   2558c:	mov	r2, r6
   25590:	mov	r3, r5
   25594:	str	ip, [sp]
   25598:	add	r1, sp, #24
   2559c:	ldr	r0, [r4, #36]	; 0x24
   255a0:	ldr	r6, [r4, #44]	; 0x2c
   255a4:	blx	r6
   255a8:	cmp	r0, #0
   255ac:	bne	255e8 <flatcc_builder_create_string@@Base+0xf0>
   255b0:	mov	r0, r5
   255b4:	str	r5, [r4, #136]	; 0x88
   255b8:	add	sp, sp, #88	; 0x58
   255bc:	ldrd	r4, [sp]
   255c0:	ldr	r6, [sp, #8]
   255c4:	add	sp, sp, #12
   255c8:	pop	{pc}		; (ldr pc, [sp], #4)
   255cc:	movw	r1, #58600	; 0xe4e8
   255d0:	movt	r1, #2
   255d4:	movw	r0, #58792	; 0xe5a8
   255d8:	movt	r0, #2
   255dc:	sub	r3, r3, #124	; 0x7c
   255e0:	movw	r2, #647	; 0x287
   255e4:	bl	12684 <__assert_fail@plt>
   255e8:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   255ec:	andeq	sp, r2, r0, asr #28

000255f0 <flatcc_builder_create_string_str@@Base>:
   255f0:	strd	r4, [sp, #-16]!
   255f4:	mov	r4, r0
   255f8:	mov	r0, r1
   255fc:	str	r6, [sp, #8]
   25600:	mov	r6, r1
   25604:	str	lr, [sp, #12]
   25608:	sub	sp, sp, #88	; 0x58
   2560c:	bl	1260c <strlen@plt>
   25610:	ldr	r5, [r4, #136]	; 0x88
   25614:	mov	r2, #4
   25618:	add	r1, sp, #12
   2561c:	mov	r3, #1
   25620:	cmp	r0, #0
   25624:	str	r0, [sp, #12]
   25628:	str	r1, [sp, #24]
   2562c:	str	r2, [sp, #28]
   25630:	sub	ip, r5, #1
   25634:	sub	ip, ip, r0
   25638:	and	ip, ip, #3
   2563c:	add	ip, ip, r3
   25640:	beq	256c4 <flatcc_builder_create_string_str@@Base+0xd4>
   25644:	add	lr, r0, r2
   25648:	mov	r1, #2
   2564c:	str	r6, [sp, #32]
   25650:	mov	r2, #3
   25654:	str	r0, [sp, #36]	; 0x24
   25658:	ldr	r3, [pc, #148]	; 256f4 <flatcc_builder_create_string_str@@Base+0x104>
   2565c:	add	r0, ip, lr
   25660:	add	r1, r1, #1
   25664:	add	lr, sp, #88	; 0x58
   25668:	sub	r6, r5, r0
   2566c:	add	r1, lr, r1, lsl #3
   25670:	cmp	r5, r6
   25674:	str	r0, [sp, #16]
   25678:	str	r2, [sp, #20]
   2567c:	str	r3, [r1, #-72]	; 0xffffffb8
   25680:	str	ip, [r1, #-68]	; 0xffffffbc
   25684:	ble	256d4 <flatcc_builder_create_string_str@@Base+0xe4>
   25688:	mov	r3, r6
   2568c:	add	r1, sp, #24
   25690:	str	r0, [sp]
   25694:	ldr	r0, [r4, #36]	; 0x24
   25698:	ldr	r5, [r4, #44]	; 0x2c
   2569c:	blx	r5
   256a0:	cmp	r0, #0
   256a4:	bne	256f0 <flatcc_builder_create_string_str@@Base+0x100>
   256a8:	mov	r0, r6
   256ac:	str	r6, [r4, #136]	; 0x88
   256b0:	add	sp, sp, #88	; 0x58
   256b4:	ldrd	r4, [sp]
   256b8:	ldr	r6, [sp, #8]
   256bc:	add	sp, sp, #12
   256c0:	pop	{pc}		; (ldr pc, [sp], #4)
   256c4:	mov	lr, r2
   256c8:	mov	r1, r3
   256cc:	mov	r2, #2
   256d0:	b	25658 <flatcc_builder_create_string_str@@Base+0x68>
   256d4:	movw	r1, #58600	; 0xe4e8
   256d8:	movt	r1, #2
   256dc:	movw	r0, #58792	; 0xe5a8
   256e0:	movt	r0, #2
   256e4:	sub	r3, r3, #124	; 0x7c
   256e8:	movw	r2, #647	; 0x287
   256ec:	bl	12684 <__assert_fail@plt>
   256f0:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   256f4:	andeq	sp, r2, r0, asr #28

000256f8 <flatcc_builder_create_string_strn@@Base>:
   256f8:	strd	r4, [sp, #-16]!
   256fc:	mov	r4, r0
   25700:	mov	r5, r2
   25704:	str	r6, [sp, #8]
   25708:	mov	r6, r1
   2570c:	mov	r1, #0
   25710:	mov	r0, r6
   25714:	str	lr, [sp, #12]
   25718:	sub	sp, sp, #88	; 0x58
   2571c:	bl	12648 <memchr@plt>
   25720:	ldr	lr, [r4, #136]	; 0x88
   25724:	cmp	r0, #0
   25728:	mov	ip, #4
   2572c:	subne	r5, r0, r6
   25730:	add	r3, sp, #12
   25734:	cmp	r5, #0
   25738:	mov	r0, #1
   2573c:	moveq	r2, #2
   25740:	str	r5, [sp, #12]
   25744:	str	r3, [sp, #24]
   25748:	sub	r1, lr, #1
   2574c:	str	ip, [sp, #28]
   25750:	sub	r1, r1, r5
   25754:	and	r1, r1, #3
   25758:	add	r1, r1, r0
   2575c:	beq	25774 <flatcc_builder_create_string_strn@@Base+0x7c>
   25760:	add	ip, r5, ip
   25764:	mov	r2, #3
   25768:	str	r6, [sp, #32]
   2576c:	mov	r0, #2
   25770:	str	r5, [sp, #36]	; 0x24
   25774:	ldr	r3, [pc, #132]	; 25800 <flatcc_builder_create_string_strn@@Base+0x108>
   25778:	add	r5, sp, #88	; 0x58
   2577c:	add	r0, r0, #1
   25780:	add	r0, r5, r0, lsl #3
   25784:	add	ip, r1, ip
   25788:	sub	r5, lr, ip
   2578c:	cmp	lr, r5
   25790:	str	ip, [sp, #16]
   25794:	str	r2, [sp, #20]
   25798:	str	r3, [r0, #-72]	; 0xffffffb8
   2579c:	str	r1, [r0, #-68]	; 0xffffffbc
   257a0:	ble	257e0 <flatcc_builder_create_string_strn@@Base+0xe8>
   257a4:	mov	r3, r5
   257a8:	add	r1, sp, #24
   257ac:	str	ip, [sp]
   257b0:	ldr	r0, [r4, #36]	; 0x24
   257b4:	ldr	r6, [r4, #44]	; 0x2c
   257b8:	blx	r6
   257bc:	cmp	r0, #0
   257c0:	bne	257fc <flatcc_builder_create_string_strn@@Base+0x104>
   257c4:	mov	r0, r5
   257c8:	str	r5, [r4, #136]	; 0x88
   257cc:	add	sp, sp, #88	; 0x58
   257d0:	ldrd	r4, [sp]
   257d4:	ldr	r6, [sp, #8]
   257d8:	add	sp, sp, #12
   257dc:	pop	{pc}		; (ldr pc, [sp], #4)
   257e0:	movw	r1, #58600	; 0xe4e8
   257e4:	movt	r1, #2
   257e8:	movw	r0, #58792	; 0xe5a8
   257ec:	movt	r0, #2
   257f0:	sub	r3, r3, #124	; 0x7c
   257f4:	movw	r2, #647	; 0x287
   257f8:	bl	12684 <__assert_fail@plt>
   257fc:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   25800:	andeq	sp, r2, r0, asr #28

00025804 <flatcc_builder_end_string@@Base>:
   25804:	ldr	r3, [r0, #32]
   25808:	strd	r4, [sp, #-16]!
   2580c:	ldrh	r2, [r3, #14]
   25810:	str	r6, [sp, #8]
   25814:	str	lr, [sp, #12]
   25818:	sub	sp, sp, #88	; 0x58
   2581c:	cmp	r2, #6
   25820:	bne	259a8 <flatcc_builder_end_string@@Base+0x1a4>
   25824:	ldr	r3, [r3, #20]
   25828:	mov	r4, r0
   2582c:	ldr	r2, [r0, #20]
   25830:	cmp	r3, r2
   25834:	bne	2598c <flatcc_builder_end_string@@Base+0x188>
   25838:	ldr	lr, [r4, #136]	; 0x88
   2583c:	add	r2, sp, #12
   25840:	mov	ip, #4
   25844:	cmp	r3, #0
   25848:	mov	r0, #1
   2584c:	str	r3, [sp, #12]
   25850:	str	r2, [sp, #24]
   25854:	str	ip, [sp, #28]
   25858:	ldr	r2, [r4, #16]
   2585c:	moveq	r2, #2
   25860:	sub	r1, lr, r3
   25864:	sub	r1, r1, #1
   25868:	and	r1, r1, #3
   2586c:	add	r1, r1, r0
   25870:	bne	25958 <flatcc_builder_end_string@@Base+0x154>
   25874:	ldr	r3, [pc, #328]	; 259c4 <flatcc_builder_end_string@@Base+0x1c0>
   25878:	add	r5, sp, #88	; 0x58
   2587c:	add	r0, r0, #1
   25880:	add	r0, r5, r0, lsl #3
   25884:	add	ip, r1, ip
   25888:	sub	r5, lr, ip
   2588c:	cmp	lr, r5
   25890:	str	ip, [sp, #16]
   25894:	str	r2, [sp, #20]
   25898:	str	r3, [r0, #-72]	; 0xffffffb8
   2589c:	str	r1, [r0, #-68]	; 0xffffffbc
   258a0:	ble	25970 <flatcc_builder_end_string@@Base+0x16c>
   258a4:	add	r1, sp, #24
   258a8:	mov	r3, r5
   258ac:	str	ip, [sp]
   258b0:	ldr	r0, [r4, #36]	; 0x24
   258b4:	ldr	r6, [r4, #44]	; 0x2c
   258b8:	blx	r6
   258bc:	subs	r1, r0, #0
   258c0:	bne	2596c <flatcc_builder_end_string@@Base+0x168>
   258c4:	cmp	r5, #0
   258c8:	str	r5, [r4, #136]	; 0x88
   258cc:	beq	25940 <flatcc_builder_end_string@@Base+0x13c>
   258d0:	ldr	r0, [r4, #16]
   258d4:	ldr	r2, [r4, #20]
   258d8:	bl	12630 <memset@plt>
   258dc:	ldr	r3, [r4, #32]
   258e0:	ldr	r0, [r4, #60]	; 0x3c
   258e4:	ldr	r2, [r4, #64]	; 0x40
   258e8:	ldr	ip, [r3]
   258ec:	ldmib	r3, {r1, lr}
   258f0:	add	r0, r0, ip
   258f4:	sub	r2, r2, ip
   258f8:	str	r0, [r4, #16]
   258fc:	cmp	r2, r1
   25900:	ldrh	r0, [r4, #128]	; 0x80
   25904:	movcs	r2, r1
   25908:	str	lr, [r4, #20]
   2590c:	str	ip, [r4, #28]
   25910:	ldrh	ip, [r4, #130]	; 0x82
   25914:	str	r2, [r4, #24]
   25918:	ldr	r2, [r4, #156]	; 0x9c
   2591c:	str	r1, [r3, #4]
   25920:	cmp	r0, ip
   25924:	sub	r0, r3, #36	; 0x24
   25928:	strhcc	ip, [r4, #128]	; 0x80
   2592c:	ldrh	r1, [r3, #12]
   25930:	sub	r3, r2, #1
   25934:	str	r0, [r4, #32]
   25938:	strh	r1, [r4, #130]	; 0x82
   2593c:	str	r3, [r4, #156]	; 0x9c
   25940:	mov	r0, r5
   25944:	add	sp, sp, #88	; 0x58
   25948:	ldrd	r4, [sp]
   2594c:	ldr	r6, [sp, #8]
   25950:	add	sp, sp, #12
   25954:	pop	{pc}		; (ldr pc, [sp], #4)
   25958:	add	ip, r3, ip
   2595c:	mov	r0, #2
   25960:	strd	r2, [sp, #32]
   25964:	mov	r2, #3
   25968:	b	25874 <flatcc_builder_end_string@@Base+0x70>
   2596c:	bl	20c2c <flatcc_builder_default_alloc@@Base+0x19c>
   25970:	movw	r1, #58600	; 0xe4e8
   25974:	movt	r1, #2
   25978:	movw	r0, #58792	; 0xe5a8
   2597c:	movt	r0, #2
   25980:	sub	r3, r3, #124	; 0x7c
   25984:	movw	r2, #647	; 0x287
   25988:	bl	12684 <__assert_fail@plt>
   2598c:	movw	r1, #58600	; 0xe4e8
   25990:	movt	r1, #2
   25994:	ldr	r3, [pc, #44]	; 259c8 <flatcc_builder_end_string@@Base+0x1c4>
   25998:	movw	r0, #59432	; 0xe828
   2599c:	movt	r0, #2
   259a0:	movw	r2, #1733	; 0x6c5
   259a4:	bl	12684 <__assert_fail@plt>
   259a8:	movw	r1, #58600	; 0xe4e8
   259ac:	movt	r1, #2
   259b0:	ldr	r3, [pc, #16]	; 259c8 <flatcc_builder_end_string@@Base+0x1c4>
   259b4:	movw	r0, #58728	; 0xe568
   259b8:	movt	r0, #2
   259bc:	movw	r2, #1732	; 0x6c4
   259c0:	bl	12684 <__assert_fail@plt>
   259c4:	andeq	sp, r2, r0, asr #28
   259c8:	andeq	lr, r2, ip, lsl #8

000259cc <flatcc_builder_string_edit@@Base>:
   259cc:	ldr	r0, [r0, #16]
   259d0:	bx	lr

000259d4 <flatcc_builder_string_len@@Base>:
   259d4:	ldr	r3, [r0, #32]
   259d8:	ldr	r0, [r3, #20]
   259dc:	bx	lr

000259e0 <flatcc_builder_table_add@@Base>:
   259e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   259e4:	mov	r4, r0
   259e8:	ldr	r0, [r0, #32]
   259ec:	ldrh	r0, [r0, #14]
   259f0:	strd	r6, [sp, #8]
   259f4:	strd	r8, [sp, #16]
   259f8:	str	lr, [sp, #24]
   259fc:	sub	sp, sp, #12
   25a00:	cmp	r0, #3
   25a04:	bne	25b68 <flatcc_builder_table_add@@Base+0x188>
   25a08:	movw	r0, #32764	; 0x7ffc
   25a0c:	cmp	r1, r0
   25a10:	bhi	25b4c <flatcc_builder_table_add@@Base+0x16c>
   25a14:	ldrh	r0, [r4, #130]	; 0x82
   25a18:	lsl	r7, r1, #1
   25a1c:	ldr	ip, [r4, #4]
   25a20:	cmp	r0, r3
   25a24:	strhcc	r3, [r4, #130]	; 0x82
   25a28:	ldrh	r5, [ip, r7]
   25a2c:	add	ip, ip, r7
   25a30:	cmp	r5, #0
   25a34:	bne	25b30 <flatcc_builder_table_add@@Base+0x150>
   25a38:	ldr	r9, [r4, #12]
   25a3c:	movw	lr, #31153	; 0x79b1
   25a40:	movt	lr, #40503	; 0x9e37
   25a44:	uxth	r6, r1
   25a48:	sub	r8, r3, #1
   25a4c:	ldr	r0, [r4, #20]
   25a50:	rsb	r3, r3, #0
   25a54:	eor	r1, r1, r9
   25a58:	mul	r1, lr, r1
   25a5c:	add	r8, r8, r0
   25a60:	ldr	r0, [r4, #24]
   25a64:	and	r8, r8, r3
   25a68:	eor	r1, r1, r2
   25a6c:	add	r2, r2, r8
   25a70:	mul	r1, lr, r1
   25a74:	cmp	r2, r0
   25a78:	str	r1, [r4, #12]
   25a7c:	str	r2, [r4, #20]
   25a80:	bcs	25abc <flatcc_builder_table_add@@Base+0xdc>
   25a84:	ldr	r0, [r4, #16]
   25a88:	add	r3, r8, #4
   25a8c:	add	r0, r0, r8
   25a90:	strh	r3, [ip]
   25a94:	ldrh	r3, [r4, #8]
   25a98:	cmp	r3, r6
   25a9c:	addls	r6, r6, #1
   25aa0:	strhls	r6, [r4, #8]
   25aa4:	add	sp, sp, #12
   25aa8:	ldrd	r4, [sp]
   25aac:	ldrd	r6, [sp, #8]
   25ab0:	ldrd	r8, [sp, #16]
   25ab4:	add	sp, sp, #24
   25ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   25abc:	ldr	ip, [r4, #28]
   25ac0:	mov	r0, #1
   25ac4:	add	r1, r4, #60	; 0x3c
   25ac8:	mov	r3, r0
   25acc:	str	r0, [sp]
   25ad0:	ldr	r9, [r4, #48]	; 0x30
   25ad4:	add	ip, ip, r0
   25ad8:	ldr	r0, [r4, #40]	; 0x28
   25adc:	add	r2, ip, r2
   25ae0:	blx	r9
   25ae4:	cmp	r0, #0
   25ae8:	bne	25b28 <flatcc_builder_table_add@@Base+0x148>
   25aec:	ldr	ip, [r4, #4]
   25af0:	movw	r2, #65532	; 0xfffc
   25af4:	ldr	r5, [r4, #28]
   25af8:	ldr	r3, [r4, #64]	; 0x40
   25afc:	add	ip, ip, r7
   25b00:	ldr	r0, [r4, #60]	; 0x3c
   25b04:	ldr	r1, [r4, #32]
   25b08:	sub	r3, r3, r5
   25b0c:	cmp	r3, r2
   25b10:	add	r0, r0, r5
   25b14:	movcs	r3, r2
   25b18:	str	r0, [r4, #16]
   25b1c:	str	r3, [r4, #24]
   25b20:	str	r2, [r1, #4]
   25b24:	b	25a88 <flatcc_builder_table_add@@Base+0xa8>
   25b28:	mov	r0, r5
   25b2c:	b	25aa4 <flatcc_builder_table_add@@Base+0xc4>
   25b30:	movw	r1, #58600	; 0xe4e8
   25b34:	movt	r1, #2
   25b38:	ldr	r3, [pc, #68]	; 25b84 <flatcc_builder_table_add@@Base+0x1a4>
   25b3c:	movw	r0, #58792	; 0xe5a8
   25b40:	movt	r0, #2
   25b44:	movw	r2, #1784	; 0x6f8
   25b48:	bl	12684 <__assert_fail@plt>
   25b4c:	movw	r1, #58600	; 0xe4e8
   25b50:	movt	r1, #2
   25b54:	ldr	r3, [pc, #40]	; 25b84 <flatcc_builder_table_add@@Base+0x1a4>
   25b58:	movw	r0, #59468	; 0xe84c
   25b5c:	movt	r0, #2
   25b60:	movw	r2, #1774	; 0x6ee
   25b64:	bl	12684 <__assert_fail@plt>
   25b68:	movw	r1, #58600	; 0xe4e8
   25b6c:	movt	r1, #2
   25b70:	ldr	r3, [pc, #12]	; 25b84 <flatcc_builder_table_add@@Base+0x1a4>
   25b74:	movw	r0, #59316	; 0xe7b4
   25b78:	movt	r0, #2
   25b7c:	movw	r2, #1773	; 0x6ed
   25b80:	bl	12684 <__assert_fail@plt>
   25b84:	andeq	lr, r2, r8, lsr #8

00025b88 <flatcc_builder_table_edit@@Base>:
   25b88:	ldr	r2, [r0, #32]
   25b8c:	ldrh	r2, [r2, #14]
   25b90:	cmp	r2, #3
   25b94:	bne	25bac <flatcc_builder_table_edit@@Base+0x24>
   25b98:	ldr	r3, [r0, #20]
   25b9c:	ldr	r0, [r0, #16]
   25ba0:	sub	r3, r3, r1
   25ba4:	add	r0, r0, r3
   25ba8:	bx	lr
   25bac:	movw	r1, #58600	; 0xe4e8
   25bb0:	movt	r1, #2
   25bb4:	ldr	r3, [pc, #20]	; 25bd0 <flatcc_builder_table_edit@@Base+0x48>
   25bb8:	movw	r0, #59316	; 0xe7b4
   25bbc:	movt	r0, #2
   25bc0:	str	r4, [sp, #-8]!
   25bc4:	movw	r2, #1794	; 0x702
   25bc8:	str	lr, [sp, #4]
   25bcc:	bl	12684 <__assert_fail@plt>
   25bd0:	andeq	lr, r2, r4, asr #8

00025bd4 <flatcc_builder_table_add_copy@@Base>:
   25bd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25bd8:	mov	r5, r3
   25bdc:	ldr	r3, [r0, #32]
   25be0:	ldrh	r3, [r3, #14]
   25be4:	strd	r6, [sp, #8]
   25be8:	strd	r8, [sp, #16]
   25bec:	strd	sl, [sp, #24]
   25bf0:	str	lr, [sp, #32]
   25bf4:	sub	sp, sp, #12
   25bf8:	cmp	r3, #3
   25bfc:	ldrh	ip, [sp, #48]	; 0x30
   25c00:	bne	25d8c <flatcc_builder_table_add_copy@@Base+0x1b8>
   25c04:	movw	r3, #32764	; 0x7ffc
   25c08:	cmp	r1, r3
   25c0c:	bhi	25d70 <flatcc_builder_table_add_copy@@Base+0x19c>
   25c10:	ldrh	r3, [r0, #130]	; 0x82
   25c14:	mov	r7, r2
   25c18:	lsl	r8, r1, #1
   25c1c:	mov	r4, r0
   25c20:	ldr	r2, [r0, #4]
   25c24:	cmp	r3, ip
   25c28:	strhcc	ip, [r0, #130]	; 0x82
   25c2c:	ldrh	r9, [r2, r8]
   25c30:	add	r2, r2, r8
   25c34:	cmp	r9, #0
   25c38:	bne	25d54 <flatcc_builder_table_add_copy@@Base+0x180>
   25c3c:	ldr	lr, [r4, #12]
   25c40:	movw	r0, #31153	; 0x79b1
   25c44:	movt	r0, #40503	; 0x9e37
   25c48:	uxth	r6, r1
   25c4c:	sub	r3, ip, #1
   25c50:	ldr	sl, [r4, #20]
   25c54:	rsb	ip, ip, #0
   25c58:	eor	r1, r1, lr
   25c5c:	ldr	lr, [r4, #24]
   25c60:	mul	r1, r0, r1
   25c64:	add	r3, r3, sl
   25c68:	and	sl, r3, ip
   25c6c:	add	ip, r5, sl
   25c70:	eor	r1, r1, r5
   25c74:	cmp	ip, lr
   25c78:	str	ip, [r4, #20]
   25c7c:	mul	r1, r0, r1
   25c80:	str	r1, [r4, #12]
   25c84:	bcs	25ce0 <flatcc_builder_table_add_copy@@Base+0x10c>
   25c88:	ldr	r3, [r4, #16]
   25c8c:	add	r1, sl, #4
   25c90:	strh	r1, [r2]
   25c94:	ldrh	r2, [r4, #8]
   25c98:	cmp	r2, r6
   25c9c:	addls	r6, r6, #1
   25ca0:	strhls	r6, [r4, #8]
   25ca4:	adds	r3, r3, sl
   25ca8:	beq	25cc0 <flatcc_builder_table_add_copy@@Base+0xec>
   25cac:	mov	r0, r3
   25cb0:	mov	r2, r5
   25cb4:	mov	r1, r7
   25cb8:	bl	12588 <memcpy@plt>
   25cbc:	mov	r3, r0
   25cc0:	mov	r0, r3
   25cc4:	add	sp, sp, #12
   25cc8:	ldrd	r4, [sp]
   25ccc:	ldrd	r6, [sp, #8]
   25cd0:	ldrd	r8, [sp, #16]
   25cd4:	ldrd	sl, [sp, #24]
   25cd8:	add	sp, sp, #32
   25cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   25ce0:	ldr	r2, [r4, #28]
   25ce4:	mov	r0, #1
   25ce8:	add	r1, r4, #60	; 0x3c
   25cec:	mov	r3, r0
   25cf0:	str	r0, [sp]
   25cf4:	ldr	fp, [r4, #48]	; 0x30
   25cf8:	add	r2, r2, r0
   25cfc:	ldr	r0, [r4, #40]	; 0x28
   25d00:	add	r2, r2, ip
   25d04:	blx	fp
   25d08:	cmp	r0, #0
   25d0c:	bne	25d4c <flatcc_builder_table_add_copy@@Base+0x178>
   25d10:	ldr	r2, [r4, #4]
   25d14:	movw	r0, #65532	; 0xfffc
   25d18:	ldr	r3, [r4, #28]
   25d1c:	ldr	r1, [r4, #64]	; 0x40
   25d20:	add	r2, r2, r8
   25d24:	ldr	lr, [r4, #60]	; 0x3c
   25d28:	ldr	ip, [r4, #32]
   25d2c:	sub	r1, r1, r3
   25d30:	cmp	r1, r0
   25d34:	add	r3, lr, r3
   25d38:	movcs	r1, r0
   25d3c:	str	r3, [r4, #16]
   25d40:	str	r1, [r4, #24]
   25d44:	str	r0, [ip, #4]
   25d48:	b	25c8c <flatcc_builder_table_add_copy@@Base+0xb8>
   25d4c:	mov	r3, r9
   25d50:	b	25cc0 <flatcc_builder_table_add_copy@@Base+0xec>
   25d54:	movw	r1, #58600	; 0xe4e8
   25d58:	movt	r1, #2
   25d5c:	ldr	r3, [pc, #68]	; 25da8 <flatcc_builder_table_add_copy@@Base+0x1d4>
   25d60:	movw	r0, #58792	; 0xe5a8
   25d64:	movt	r0, #2
   25d68:	movw	r2, #1784	; 0x6f8
   25d6c:	bl	12684 <__assert_fail@plt>
   25d70:	movw	r1, #58600	; 0xe4e8
   25d74:	movt	r1, #2
   25d78:	ldr	r3, [pc, #40]	; 25da8 <flatcc_builder_table_add_copy@@Base+0x1d4>
   25d7c:	movw	r0, #59468	; 0xe84c
   25d80:	movt	r0, #2
   25d84:	movw	r2, #1774	; 0x6ee
   25d88:	bl	12684 <__assert_fail@plt>
   25d8c:	movw	r1, #58600	; 0xe4e8
   25d90:	movt	r1, #2
   25d94:	ldr	r3, [pc, #12]	; 25da8 <flatcc_builder_table_add_copy@@Base+0x1d4>
   25d98:	movw	r0, #59316	; 0xe7b4
   25d9c:	movt	r0, #2
   25da0:	movw	r2, #1773	; 0x6ed
   25da4:	bl	12684 <__assert_fail@plt>
   25da8:	andeq	lr, r2, r8, lsr #8

00025dac <flatcc_builder_table_add_offset@@Base>:
   25dac:	ldr	r3, [r0, #32]
   25db0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25db4:	ldrh	r3, [r3, #14]
   25db8:	strd	r6, [sp, #8]
   25dbc:	strd	r8, [sp, #16]
   25dc0:	str	lr, [sp, #24]
   25dc4:	sub	sp, sp, #12
   25dc8:	cmp	r3, #3
   25dcc:	bne	25f2c <flatcc_builder_table_add_offset@@Base+0x180>
   25dd0:	movw	r3, #32764	; 0x7ffc
   25dd4:	cmp	r1, r3
   25dd8:	bhi	25f10 <flatcc_builder_table_add_offset@@Base+0x164>
   25ddc:	ldr	ip, [r0, #4]
   25de0:	lsl	r7, r1, #1
   25de4:	mov	r4, r0
   25de8:	ldrh	r5, [ip, r7]
   25dec:	add	ip, ip, r7
   25df0:	cmp	r5, #0
   25df4:	bne	25ef4 <flatcc_builder_table_add_offset@@Base+0x148>
   25df8:	ldr	r2, [r0, #12]
   25dfc:	movw	r3, #31153	; 0x79b1
   25e00:	movt	r3, #40503	; 0x9e37
   25e04:	uxth	r6, r1
   25e08:	ldr	r8, [r0, #20]
   25e0c:	ldr	r0, [r0, #24]
   25e10:	eor	r1, r1, r2
   25e14:	mul	r1, r3, r1
   25e18:	add	r8, r8, #3
   25e1c:	bic	r8, r8, #3
   25e20:	add	r2, r8, #4
   25e24:	eor	r1, r1, #4
   25e28:	cmp	r2, r0
   25e2c:	str	r2, [r4, #20]
   25e30:	mul	r1, r3, r1
   25e34:	str	r1, [r4, #12]
   25e38:	bhi	25e88 <flatcc_builder_table_add_offset@@Base+0xdc>
   25e3c:	ldr	r0, [r4, #16]
   25e40:	uxth	r2, r8
   25e44:	add	r0, r0, r8
   25e48:	add	r3, r2, #4
   25e4c:	strh	r3, [ip]
   25e50:	ldrh	r3, [r4, #8]
   25e54:	cmp	r3, r6
   25e58:	ldr	r3, [r4]
   25e5c:	addls	r6, r6, #1
   25e60:	strhls	r6, [r4, #8]
   25e64:	add	r1, r3, #2
   25e68:	str	r1, [r4]
   25e6c:	strh	r2, [r3]
   25e70:	add	sp, sp, #12
   25e74:	ldrd	r4, [sp]
   25e78:	ldrd	r6, [sp, #8]
   25e7c:	ldrd	r8, [sp, #16]
   25e80:	add	sp, sp, #24
   25e84:	pop	{pc}		; (ldr pc, [sp], #4)
   25e88:	ldr	ip, [r4, #28]
   25e8c:	mov	r0, #1
   25e90:	add	r1, r4, #60	; 0x3c
   25e94:	mov	r3, r0
   25e98:	str	r0, [sp]
   25e9c:	ldr	r0, [r4, #40]	; 0x28
   25ea0:	add	r2, r2, ip
   25ea4:	ldr	r9, [r4, #48]	; 0x30
   25ea8:	blx	r9
   25eac:	cmp	r0, #0
   25eb0:	bne	25eec <flatcc_builder_table_add_offset@@Base+0x140>
   25eb4:	ldr	ip, [r4, #4]
   25eb8:	movw	r2, #65532	; 0xfffc
   25ebc:	ldrd	r0, [r4, #28]
   25ec0:	ldr	r3, [r4, #64]	; 0x40
   25ec4:	add	ip, ip, r7
   25ec8:	ldr	r5, [r4, #60]	; 0x3c
   25ecc:	sub	r3, r3, r0
   25ed0:	cmp	r3, r2
   25ed4:	add	r0, r5, r0
   25ed8:	movcs	r3, r2
   25edc:	str	r0, [r4, #16]
   25ee0:	str	r3, [r4, #24]
   25ee4:	str	r2, [r1, #4]
   25ee8:	b	25e40 <flatcc_builder_table_add_offset@@Base+0x94>
   25eec:	mov	r0, r5
   25ef0:	b	25e70 <flatcc_builder_table_add_offset@@Base+0xc4>
   25ef4:	movw	r1, #58600	; 0xe4e8
   25ef8:	movt	r1, #2
   25efc:	ldr	r3, [pc, #68]	; 25f48 <flatcc_builder_table_add_offset@@Base+0x19c>
   25f00:	movw	r0, #58792	; 0xe5a8
   25f04:	movt	r0, #2
   25f08:	movw	r2, #1819	; 0x71b
   25f0c:	bl	12684 <__assert_fail@plt>
   25f10:	movw	r1, #58600	; 0xe4e8
   25f14:	movt	r1, #2
   25f18:	ldr	r3, [pc, #40]	; 25f48 <flatcc_builder_table_add_offset@@Base+0x19c>
   25f1c:	movw	r0, #59468	; 0xe84c
   25f20:	movt	r0, #2
   25f24:	movw	r2, #1812	; 0x714
   25f28:	bl	12684 <__assert_fail@plt>
   25f2c:	movw	r1, #58600	; 0xe4e8
   25f30:	movt	r1, #2
   25f34:	ldr	r3, [pc, #12]	; 25f48 <flatcc_builder_table_add_offset@@Base+0x19c>
   25f38:	movw	r0, #59316	; 0xe7b4
   25f3c:	movt	r0, #2
   25f40:	movw	r2, #1811	; 0x713
   25f44:	bl	12684 <__assert_fail@plt>
   25f48:	andeq	lr, r2, r0, ror #8

00025f4c <flatcc_builder_table_add_union@@Base>:
   25f4c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25f50:	strd	r6, [sp, #8]
   25f54:	strd	r8, [sp, #16]
   25f58:	str	lr, [sp, #24]
   25f5c:	sub	sp, sp, #20
   25f60:	add	ip, sp, #16
   25f64:	stmdb	ip, {r2, r3}
   25f68:	ldr	r3, [r0, #32]
   25f6c:	ldrb	r7, [sp, #8]
   25f70:	ldr	r6, [sp, #12]
   25f74:	ldrh	r3, [r3, #14]
   25f78:	cmp	r3, #3
   25f7c:	bne	26138 <flatcc_builder_table_add_union@@Base+0x1ec>
   25f80:	cmp	r7, #0
   25f84:	mov	r4, r0
   25f88:	mov	r5, r1
   25f8c:	beq	26070 <flatcc_builder_table_add_union@@Base+0x124>
   25f90:	cmp	r6, #0
   25f94:	beq	25fb8 <flatcc_builder_table_add_union@@Base+0x6c>
   25f98:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   25f9c:	cmp	r0, #0
   25fa0:	beq	2618c <flatcc_builder_table_add_union@@Base+0x240>
   25fa4:	ldr	r3, [r4, #32]
   25fa8:	ldrh	r3, [r3, #14]
   25fac:	str	r6, [r0]
   25fb0:	cmp	r3, #3
   25fb4:	bne	26154 <flatcc_builder_table_add_union@@Base+0x208>
   25fb8:	sub	r1, r5, #1
   25fbc:	movw	r3, #32764	; 0x7ffc
   25fc0:	cmp	r1, r3
   25fc4:	bhi	26170 <flatcc_builder_table_add_union@@Base+0x224>
   25fc8:	ldrh	r3, [r4, #130]	; 0x82
   25fcc:	lsl	r8, r1, #1
   25fd0:	cmp	r3, #0
   25fd4:	moveq	r3, #1
   25fd8:	strheq	r3, [r4, #130]	; 0x82
   25fdc:	ldr	r3, [r4, #4]
   25fe0:	ldrh	r2, [r3, r8]
   25fe4:	add	r0, r3, r8
   25fe8:	cmp	r2, #0
   25fec:	bne	2611c <flatcc_builder_table_add_union@@Base+0x1d0>
   25ff0:	ldr	r2, [r4, #12]
   25ff4:	movw	r3, #31153	; 0x79b1
   25ff8:	movt	r3, #40503	; 0x9e37
   25ffc:	uxth	r6, r1
   26000:	ldr	r5, [r4, #20]
   26004:	ldr	ip, [r4, #24]
   26008:	eor	r1, r1, r2
   2600c:	mul	r1, r3, r1
   26010:	add	r2, r5, #1
   26014:	cmp	r2, ip
   26018:	str	r2, [r4, #20]
   2601c:	eor	r1, r1, #1
   26020:	mul	r1, r3, r1
   26024:	str	r1, [r4, #12]
   26028:	bcs	26094 <flatcc_builder_table_add_union@@Base+0x148>
   2602c:	ldr	r3, [r4, #16]
   26030:	add	r2, r5, #4
   26034:	strh	r2, [r0]
   26038:	ldrh	r2, [r4, #8]
   2603c:	cmp	r2, r6
   26040:	addls	r6, r6, #1
   26044:	strhls	r6, [r4, #8]
   26048:	cmn	r3, r5
   2604c:	beq	26100 <flatcc_builder_table_add_union@@Base+0x1b4>
   26050:	mov	r0, #0
   26054:	strb	r7, [r3, r5]
   26058:	add	sp, sp, #20
   2605c:	ldrd	r4, [sp]
   26060:	ldrd	r6, [sp, #8]
   26064:	ldrd	r8, [sp, #16]
   26068:	add	sp, sp, #24
   2606c:	pop	{pc}		; (ldr pc, [sp], #4)
   26070:	cmp	r6, #0
   26074:	beq	25fb8 <flatcc_builder_table_add_union@@Base+0x6c>
   26078:	movw	r1, #58600	; 0xe4e8
   2607c:	movt	r1, #2
   26080:	ldr	r3, [pc, #288]	; 261a8 <flatcc_builder_table_add_union@@Base+0x25c>
   26084:	movw	r0, #59536	; 0xe890
   26088:	movt	r0, #2
   2608c:	movw	r2, #1519	; 0x5ef
   26090:	bl	12684 <__assert_fail@plt>
   26094:	ldr	r2, [r4, #28]
   26098:	mov	r0, #1
   2609c:	add	r1, r4, #60	; 0x3c
   260a0:	mov	r3, r0
   260a4:	str	r0, [sp]
   260a8:	ldr	r0, [r4, #40]	; 0x28
   260ac:	add	r2, r5, r2
   260b0:	ldr	r9, [r4, #48]	; 0x30
   260b4:	add	r2, r2, #2
   260b8:	blx	r9
   260bc:	cmp	r0, #0
   260c0:	bne	26100 <flatcc_builder_table_add_union@@Base+0x1b4>
   260c4:	ldr	r0, [r4, #4]
   260c8:	movw	r1, #65532	; 0xfffc
   260cc:	ldr	ip, [r4, #28]
   260d0:	ldr	r2, [r4, #64]	; 0x40
   260d4:	add	r0, r0, r8
   260d8:	ldr	r3, [r4, #60]	; 0x3c
   260dc:	ldr	lr, [r4, #32]
   260e0:	sub	r2, r2, ip
   260e4:	cmp	r2, r1
   260e8:	add	r3, r3, ip
   260ec:	movcs	r2, r1
   260f0:	str	r3, [r4, #16]
   260f4:	str	r2, [r4, #24]
   260f8:	str	r1, [lr, #4]
   260fc:	b	26030 <flatcc_builder_table_add_union@@Base+0xe4>
   26100:	movw	r1, #58600	; 0xe4e8
   26104:	movt	r1, #2
   26108:	ldr	r3, [pc, #152]	; 261a8 <flatcc_builder_table_add_union@@Base+0x25c>
   2610c:	movw	r0, #59584	; 0xe8c0
   26110:	movt	r0, #2
   26114:	movw	r2, #1526	; 0x5f6
   26118:	bl	12684 <__assert_fail@plt>
   2611c:	movw	r1, #58600	; 0xe4e8
   26120:	movt	r1, #2
   26124:	ldr	r3, [pc, #128]	; 261ac <flatcc_builder_table_add_union@@Base+0x260>
   26128:	movw	r0, #58792	; 0xe5a8
   2612c:	movt	r0, #2
   26130:	movw	r2, #1784	; 0x6f8
   26134:	bl	12684 <__assert_fail@plt>
   26138:	movw	r1, #58600	; 0xe4e8
   2613c:	movt	r1, #2
   26140:	ldr	r3, [pc, #96]	; 261a8 <flatcc_builder_table_add_union@@Base+0x25c>
   26144:	movw	r0, #59316	; 0xe7b4
   26148:	movt	r0, #2
   2614c:	movw	r2, #1518	; 0x5ee
   26150:	bl	12684 <__assert_fail@plt>
   26154:	movw	r1, #58600	; 0xe4e8
   26158:	movt	r1, #2
   2615c:	ldr	r3, [pc, #72]	; 261ac <flatcc_builder_table_add_union@@Base+0x260>
   26160:	movw	r0, #59316	; 0xe7b4
   26164:	movt	r0, #2
   26168:	movw	r2, #1773	; 0x6ed
   2616c:	bl	12684 <__assert_fail@plt>
   26170:	movw	r1, #58600	; 0xe4e8
   26174:	movt	r1, #2
   26178:	ldr	r3, [pc, #44]	; 261ac <flatcc_builder_table_add_union@@Base+0x260>
   2617c:	movw	r0, #59468	; 0xe84c
   26180:	movt	r0, #2
   26184:	movw	r2, #1774	; 0x6ee
   26188:	bl	12684 <__assert_fail@plt>
   2618c:	movw	r1, #58600	; 0xe4e8
   26190:	movt	r1, #2
   26194:	ldr	r3, [pc, #12]	; 261a8 <flatcc_builder_table_add_union@@Base+0x25c>
   26198:	movw	r0, #59572	; 0xe8b4
   2619c:	movt	r0, #2
   261a0:	movw	r2, #1522	; 0x5f2
   261a4:	bl	12684 <__assert_fail@plt>
   261a8:	andeq	lr, r2, r0, lsl #9
   261ac:	andeq	lr, r2, r8, lsr #8

000261b0 <flatcc_builder_table_add_union_vector@@Base>:
   261b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   261b4:	strd	r6, [sp, #8]
   261b8:	mov	r7, r1
   261bc:	str	lr, [sp, #16]
   261c0:	sub	sp, sp, #12
   261c4:	add	r1, sp, #8
   261c8:	stmdb	r1, {r2, r3}
   261cc:	ldr	r3, [r0, #32]
   261d0:	ldm	sp, {r4, r6}
   261d4:	ldrh	r3, [r3, #14]
   261d8:	cmp	r3, #3
   261dc:	bne	2627c <flatcc_builder_table_add_union_vector@@Base+0xcc>
   261e0:	clz	r3, r6
   261e4:	clz	r2, r4
   261e8:	lsr	r3, r3, #5
   261ec:	lsr	r2, r2, #5
   261f0:	cmp	r2, r3
   261f4:	beq	26224 <flatcc_builder_table_add_union_vector@@Base+0x74>
   261f8:	adds	r4, r4, #0
   261fc:	movne	r4, #1
   26200:	cmp	r4, r3
   26204:	mvnne	r4, #0
   26208:	beq	26298 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   2620c:	mov	r0, r4
   26210:	add	sp, sp, #12
   26214:	ldrd	r4, [sp]
   26218:	ldrd	r6, [sp, #8]
   2621c:	add	sp, sp, #16
   26220:	pop	{pc}		; (ldr pc, [sp], #4)
   26224:	cmp	r4, #0
   26228:	beq	2620c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2622c:	sub	r1, r7, #1
   26230:	mov	r5, r0
   26234:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   26238:	subs	r3, r0, #0
   2623c:	beq	262b4 <flatcc_builder_table_add_union_vector@@Base+0x104>
   26240:	mov	r1, r7
   26244:	mov	r0, r5
   26248:	str	r4, [r3]
   2624c:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   26250:	cmp	r0, #0
   26254:	movne	r4, #0
   26258:	strne	r6, [r0]
   2625c:	bne	2620c <flatcc_builder_table_add_union_vector@@Base+0x5c>
   26260:	movw	r1, #58600	; 0xe4e8
   26264:	movt	r1, #2
   26268:	ldr	r3, [pc, #96]	; 262d0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   2626c:	movw	r0, #59572	; 0xe8b4
   26270:	movt	r0, #2
   26274:	movw	r2, #1544	; 0x608
   26278:	bl	12684 <__assert_fail@plt>
   2627c:	movw	r1, #58600	; 0xe4e8
   26280:	movt	r1, #2
   26284:	ldr	r3, [pc, #68]	; 262d0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   26288:	movw	r0, #59316	; 0xe7b4
   2628c:	movt	r0, #2
   26290:	mov	r2, #1536	; 0x600
   26294:	bl	12684 <__assert_fail@plt>
   26298:	movw	r1, #58600	; 0xe4e8
   2629c:	movt	r1, #2
   262a0:	ldr	r3, [pc, #40]	; 262d0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   262a4:	movw	r0, #59596	; 0xe8cc
   262a8:	movt	r0, #2
   262ac:	movw	r2, #1537	; 0x601
   262b0:	bl	12684 <__assert_fail@plt>
   262b4:	movw	r1, #58600	; 0xe4e8
   262b8:	movt	r1, #2
   262bc:	ldr	r3, [pc, #12]	; 262d0 <flatcc_builder_table_add_union_vector@@Base+0x120>
   262c0:	movw	r0, #59572	; 0xe8b4
   262c4:	movt	r0, #2
   262c8:	movw	r2, #1540	; 0x604
   262cc:	bl	12684 <__assert_fail@plt>
   262d0:	andeq	lr, r2, r0, lsr #9

000262d4 <flatcc_builder_push_buffer_alignment@@Base>:
   262d4:	mov	r3, r0
   262d8:	mov	r2, #4
   262dc:	ldrh	r0, [r0, #128]	; 0x80
   262e0:	strh	r2, [r3, #128]	; 0x80
   262e4:	bx	lr

000262e8 <flatcc_builder_pop_buffer_alignment@@Base>:
   262e8:	ldrh	r3, [r0, #128]	; 0x80
   262ec:	cmp	r3, r1
   262f0:	strhcc	r1, [r0, #128]	; 0x80
   262f4:	bx	lr

000262f8 <flatcc_builder_get_buffer_alignment@@Base>:
   262f8:	ldrh	r0, [r0, #128]	; 0x80
   262fc:	bx	lr

00026300 <flatcc_builder_set_vtable_clustering@@Base>:
   26300:	clz	r1, r1
   26304:	lsr	r1, r1, #5
   26308:	str	r1, [r0, #180]	; 0xb4
   2630c:	bx	lr

00026310 <flatcc_builder_set_block_align@@Base>:
   26310:	strh	r1, [r0, #132]	; 0x84
   26314:	bx	lr

00026318 <flatcc_builder_get_level@@Base>:
   26318:	ldr	r0, [r0, #156]	; 0x9c
   2631c:	bx	lr

00026320 <flatcc_builder_set_max_level@@Base>:
   26320:	ldr	r3, [r0, #160]	; 0xa0
   26324:	str	r1, [r0, #176]	; 0xb0
   26328:	cmp	r3, r1
   2632c:	strlt	r1, [r0, #160]	; 0xa0
   26330:	bx	lr

00026334 <flatcc_builder_get_buffer_size@@Base>:
   26334:	ldr	r3, [r0, #136]	; 0x88
   26338:	ldr	r0, [r0, #140]	; 0x8c
   2633c:	sub	r0, r0, r3
   26340:	bx	lr

00026344 <flatcc_builder_get_buffer_start@@Base>:
   26344:	ldr	r0, [r0, #136]	; 0x88
   26348:	bx	lr

0002634c <flatcc_builder_get_buffer_end@@Base>:
   2634c:	ldr	r0, [r0, #140]	; 0x8c
   26350:	bx	lr

00026354 <flatcc_builder_set_vtable_cache_limit@@Base>:
   26354:	str	r1, [r0, #172]	; 0xac
   26358:	bx	lr

0002635c <flatcc_builder_set_identifier@@Base>:
   2635c:	ldr	r3, [pc, #16]	; 26374 <flatcc_builder_set_identifier@@Base+0x18>
   26360:	cmp	r1, #0
   26364:	moveq	r1, r3
   26368:	ldr	r3, [r1]
   2636c:	str	r3, [r0, #168]	; 0xa8
   26370:	bx	lr
   26374:	andeq	sp, r2, r0, asr #28

00026378 <flatcc_builder_get_type@@Base>:
   26378:	ldr	r0, [r0, #32]
   2637c:	cmp	r0, #0
   26380:	ldrhne	r0, [r0, #14]
   26384:	bx	lr

00026388 <flatcc_builder_get_type_at@@Base>:
   26388:	cmp	r1, #0
   2638c:	ble	263b4 <flatcc_builder_get_type_at@@Base+0x2c>
   26390:	ldr	r3, [r0, #156]	; 0x9c
   26394:	cmp	r3, r1
   26398:	blt	263b4 <flatcc_builder_get_type_at@@Base+0x2c>
   2639c:	ldr	r2, [r0, #32]
   263a0:	sub	r1, r1, r3
   263a4:	add	r1, r1, r1, lsl #3
   263a8:	add	r1, r2, r1, lsl #2
   263ac:	ldrh	r0, [r1, #14]
   263b0:	bx	lr
   263b4:	mov	r0, #0
   263b8:	bx	lr

000263bc <flatcc_builder_get_direct_buffer@@Base>:
   263bc:	ldr	r3, [r0, #184]	; 0xb8
   263c0:	cmp	r3, #0
   263c4:	bne	263e0 <flatcc_builder_get_direct_buffer@@Base+0x24>
   263c8:	cmp	r1, #0
   263cc:	movne	r3, #0
   263d0:	movne	r0, r3
   263d4:	moveq	r0, r1
   263d8:	strne	r3, [r1]
   263dc:	bx	lr
   263e0:	ldrd	r2, [r0, #188]	; 0xbc
   263e4:	cmp	r2, r3
   263e8:	bne	263c8 <flatcc_builder_get_direct_buffer@@Base+0xc>
   263ec:	cmp	r1, #0
   263f0:	ldrne	r3, [r0, #212]	; 0xd4
   263f4:	ldr	r0, [r0, #196]	; 0xc4
   263f8:	strne	r3, [r1]
   263fc:	bx	lr

00026400 <flatcc_builder_copy_buffer@@Base>:
   26400:	ldr	r3, [r0, #184]	; 0xb8
   26404:	cmp	r3, #0
   26408:	beq	26430 <flatcc_builder_copy_buffer@@Base+0x30>
   2640c:	add	r0, r0, #188	; 0xbc
   26410:	str	r4, [sp, #-8]!
   26414:	str	lr, [sp, #4]
   26418:	bl	26b6c <flatcc_emitter_copy_buffer@@Base>
   2641c:	cmp	r0, #0
   26420:	beq	26438 <flatcc_builder_copy_buffer@@Base+0x38>
   26424:	ldr	r4, [sp]
   26428:	add	sp, sp, #4
   2642c:	pop	{pc}		; (ldr pc, [sp], #4)
   26430:	mov	r0, r3
   26434:	bx	lr
   26438:	bl	20ccc <flatcc_builder_default_alloc@@Base+0x23c>

0002643c <flatcc_builder_finalize_buffer@@Base>:
   2643c:	strd	r4, [sp, #-16]!
   26440:	cmp	r1, #0
   26444:	mov	r5, r0
   26448:	ldr	r2, [r0, #136]	; 0x88
   2644c:	ldr	r4, [r0, #140]	; 0x8c
   26450:	str	r6, [sp, #8]
   26454:	str	lr, [sp, #12]
   26458:	sub	r4, r4, r2
   2645c:	mov	r0, r4
   26460:	strne	r4, [r1]
   26464:	bl	125dc <malloc@plt>
   26468:	subs	r6, r0, #0
   2646c:	beq	264c4 <flatcc_builder_finalize_buffer@@Base+0x88>
   26470:	ldr	r3, [r5, #184]	; 0xb8
   26474:	cmp	r3, #0
   26478:	beq	264a8 <flatcc_builder_finalize_buffer@@Base+0x6c>
   2647c:	mov	r2, r4
   26480:	add	r0, r5, #188	; 0xbc
   26484:	mov	r1, r6
   26488:	bl	26b6c <flatcc_emitter_copy_buffer@@Base>
   2648c:	cmp	r0, #0
   26490:	beq	264e0 <flatcc_builder_finalize_buffer@@Base+0xa4>
   26494:	mov	r0, r6
   26498:	ldrd	r4, [sp]
   2649c:	ldr	r6, [sp, #8]
   264a0:	add	sp, sp, #12
   264a4:	pop	{pc}		; (ldr pc, [sp], #4)
   264a8:	movw	r1, #58600	; 0xe4e8
   264ac:	movt	r1, #2
   264b0:	ldr	r3, [pc, #44]	; 264e4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   264b4:	movw	r0, #58792	; 0xe5a8
   264b8:	movt	r0, #2
   264bc:	movw	r2, #1948	; 0x79c
   264c0:	bl	12684 <__assert_fail@plt>
   264c4:	movw	r1, #58600	; 0xe4e8
   264c8:	movt	r1, #2
   264cc:	ldr	r3, [pc, #16]	; 264e4 <flatcc_builder_finalize_buffer@@Base+0xa8>
   264d0:	movw	r0, #58792	; 0xe5a8
   264d4:	movt	r0, #2
   264d8:	movw	r2, #1944	; 0x798
   264dc:	bl	12684 <__assert_fail@plt>
   264e0:	bl	20ccc <flatcc_builder_default_alloc@@Base+0x23c>
   264e4:	andeq	lr, r2, r8, asr #9

000264e8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   264e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   264ec:	mov	r2, #0
   264f0:	mov	r5, r0
   264f4:	ldr	r3, [r0, #136]	; 0x88
   264f8:	ldr	r4, [r0, #140]	; 0x8c
   264fc:	strd	r6, [sp, #8]
   26500:	subs	r6, r1, #0
   26504:	ldrh	r1, [r0, #128]	; 0x80
   26508:	str	lr, [sp, #16]
   2650c:	sub	sp, sp, #12
   26510:	add	r0, sp, #4
   26514:	sub	r3, r4, r3
   26518:	str	r2, [sp, #4]
   2651c:	sub	r4, r1, #1
   26520:	rsb	r2, r1, #0
   26524:	strne	r3, [r6]
   26528:	add	r4, r4, r3
   2652c:	cmp	r1, #4
   26530:	and	r4, r4, r2
   26534:	movcc	r1, #4
   26538:	mov	r2, r4
   2653c:	bl	12624 <posix_memalign@plt>
   26540:	cmp	r0, #0
   26544:	beq	26584 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   26548:	ldr	r0, [sp, #4]
   2654c:	cmp	r0, #0
   26550:	beq	26558 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   26554:	bl	1257c <free@plt>
   26558:	cmp	r6, #0
   2655c:	movne	r3, #0
   26560:	moveq	r7, r6
   26564:	movne	r7, r3
   26568:	strne	r3, [r6]
   2656c:	mov	r0, r7
   26570:	add	sp, sp, #12
   26574:	ldrd	r4, [sp]
   26578:	ldrd	r6, [sp, #8]
   2657c:	add	sp, sp, #16
   26580:	pop	{pc}		; (ldr pc, [sp], #4)
   26584:	ldr	r7, [sp, #4]
   26588:	cmp	r7, #0
   2658c:	beq	26558 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   26590:	ldr	r3, [r5, #184]	; 0xb8
   26594:	cmp	r3, #0
   26598:	beq	265b8 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   2659c:	mov	r2, r4
   265a0:	add	r0, r5, #188	; 0xbc
   265a4:	mov	r1, r7
   265a8:	bl	26b6c <flatcc_emitter_copy_buffer@@Base>
   265ac:	cmp	r0, #0
   265b0:	bne	2656c <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   265b4:	bl	20ccc <flatcc_builder_default_alloc@@Base+0x23c>
   265b8:	mov	r0, r7
   265bc:	b	26554 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

000265c0 <flatcc_builder_aligned_alloc@@Base>:
   265c0:	cmp	r0, #4
   265c4:	str	r4, [sp, #-8]!
   265c8:	mov	r4, #0
   265cc:	str	lr, [sp, #4]
   265d0:	sub	sp, sp, #8
   265d4:	mov	r2, r1
   265d8:	movcs	r1, r0
   265dc:	movcc	r1, #4
   265e0:	add	r0, sp, #4
   265e4:	str	r4, [sp, #4]
   265e8:	bl	12624 <posix_memalign@plt>
   265ec:	cmp	r0, r4
   265f0:	ldr	r0, [sp, #4]
   265f4:	beq	26608 <flatcc_builder_aligned_alloc@@Base+0x48>
   265f8:	cmp	r0, #0
   265fc:	beq	26608 <flatcc_builder_aligned_alloc@@Base+0x48>
   26600:	bl	1257c <free@plt>
   26604:	mov	r0, r4
   26608:	add	sp, sp, #8
   2660c:	ldr	r4, [sp]
   26610:	add	sp, sp, #4
   26614:	pop	{pc}		; (ldr pc, [sp], #4)

00026618 <flatcc_builder_aligned_free@@Base>:
   26618:	b	1257c <free@plt>

0002661c <flatcc_builder_get_emit_context@@Base>:
   2661c:	ldr	r0, [r0, #36]	; 0x24
   26620:	bx	lr

00026624 <flatcc_emitter_recycle_page@@Base>:
   26624:	ldr	r3, [r0]
   26628:	cmp	r3, r1
   2662c:	beq	26670 <flatcc_emitter_recycle_page@@Base+0x4c>
   26630:	ldr	r2, [r0, #4]
   26634:	cmp	r2, r1
   26638:	beq	26670 <flatcc_emitter_recycle_page@@Base+0x4c>
   2663c:	push	{lr}		; (str lr, [sp, #-4]!)
   26640:	mov	r0, #0
   26644:	ldr	lr, [r1, #2944]	; 0xb80
   26648:	ldr	ip, [r1, #2948]	; 0xb84
   2664c:	str	ip, [lr, #2948]	; 0xb84
   26650:	ldr	r2, [r3, #2948]	; 0xb84
   26654:	str	lr, [ip, #2944]	; 0xb80
   26658:	str	r3, [r1, #2944]	; 0xb80
   2665c:	str	r2, [r1, #2948]	; 0xb84
   26660:	str	r1, [r2, #2944]	; 0xb80
   26664:	ldr	r3, [r1, #2944]	; 0xb80
   26668:	str	r1, [r3, #2948]	; 0xb84
   2666c:	pop	{pc}		; (ldr pc, [sp], #4)
   26670:	mvn	r0, #0
   26674:	bx	lr

00026678 <flatcc_emitter_reset@@Base>:
   26678:	ldr	r2, [r0]
   2667c:	cmp	r2, #0
   26680:	bxeq	lr
   26684:	strd	r4, [sp, #-16]!
   26688:	movw	ip, #64064	; 0xfa40
   2668c:	movt	ip, #65535	; 0xffff
   26690:	ldr	r1, [r0, #24]
   26694:	add	r4, r2, #1472	; 0x5c0
   26698:	ldr	r3, [r0, #32]
   2669c:	ldr	r5, [r0, #28]
   266a0:	str	r6, [sp, #8]
   266a4:	str	lr, [sp, #12]
   266a8:	mov	lr, #1472	; 0x5c0
   266ac:	cmp	r3, #0
   266b0:	stmib	r0, {r2, r4}
   266b4:	moveq	r3, r1
   266b8:	lsr	r1, r1, #2
   266bc:	str	lr, [r0, #12]
   266c0:	add	r3, r3, r3, lsl #1
   266c4:	str	r4, [r0, #16]
   266c8:	str	lr, [r0, #20]
   266cc:	add	r3, r1, r3, lsr #2
   266d0:	str	ip, [r2, #2952]	; 0xb88
   266d4:	mov	ip, #0
   266d8:	cmp	r5, r3, lsl #1
   266dc:	str	ip, [r0, #24]
   266e0:	str	r3, [r0, #32]
   266e4:	bls	2673c <flatcc_emitter_reset@@Base+0xc4>
   266e8:	ldr	r3, [r2, #2944]	; 0xb80
   266ec:	mov	r4, r0
   266f0:	cmp	r2, r3
   266f4:	bne	2670c <flatcc_emitter_reset@@Base+0x94>
   266f8:	b	2673c <flatcc_emitter_reset@@Base+0xc4>
   266fc:	ldm	r4, {r1, r2}
   26700:	ldr	r3, [r2, #2944]	; 0xb80
   26704:	cmp	r3, r1
   26708:	beq	2673c <flatcc_emitter_reset@@Base+0xc4>
   2670c:	ldr	r1, [r3, #2944]	; 0xb80
   26710:	mov	r0, r3
   26714:	str	r1, [r2, #2944]	; 0xb80
   26718:	ldr	r3, [r3, #2944]	; 0xb80
   2671c:	str	r2, [r3, #2948]	; 0xb84
   26720:	bl	1257c <free@plt>
   26724:	ldr	r3, [r4, #28]
   26728:	ldr	r2, [r4, #32]
   2672c:	sub	r3, r3, #2944	; 0xb80
   26730:	cmp	r3, r2, lsl #1
   26734:	str	r3, [r4, #28]
   26738:	bhi	266fc <flatcc_emitter_reset@@Base+0x84>
   2673c:	ldrd	r4, [sp]
   26740:	ldr	r6, [sp, #8]
   26744:	add	sp, sp, #12
   26748:	pop	{pc}		; (ldr pc, [sp], #4)

0002674c <flatcc_emitter_clear@@Base>:
   2674c:	ldr	r3, [r0]
   26750:	cmp	r3, #0
   26754:	bxeq	lr
   26758:	mov	r1, #0
   2675c:	strd	r4, [sp, #-16]!
   26760:	mov	r5, r0
   26764:	ldr	r2, [r3, #2948]	; 0xb84
   26768:	str	r6, [sp, #8]
   2676c:	str	lr, [sp, #12]
   26770:	str	r1, [r2, #2944]	; 0xb80
   26774:	ldr	r4, [r3, #2944]	; 0xb80
   26778:	cmp	r4, r1
   2677c:	bne	26788 <flatcc_emitter_clear@@Base+0x3c>
   26780:	b	267c4 <flatcc_emitter_clear@@Base+0x78>
   26784:	mov	r4, r3
   26788:	ldr	r0, [r4, #2948]	; 0xb84
   2678c:	bl	1257c <free@plt>
   26790:	ldr	r3, [r4, #2944]	; 0xb80
   26794:	cmp	r3, #0
   26798:	bne	26784 <flatcc_emitter_clear@@Base+0x38>
   2679c:	mov	r0, r4
   267a0:	bl	1257c <free@plt>
   267a4:	mov	r0, r5
   267a8:	mov	r2, #36	; 0x24
   267ac:	ldrd	r4, [sp]
   267b0:	mov	r1, #0
   267b4:	ldr	r6, [sp, #8]
   267b8:	ldr	lr, [sp, #12]
   267bc:	add	sp, sp, #16
   267c0:	b	12630 <memset@plt>
   267c4:	mov	r4, r3
   267c8:	b	2679c <flatcc_emitter_clear@@Base+0x50>

000267cc <flatcc_emitter@@Base>:
   267cc:	cmp	r3, #0
   267d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   267d4:	mov	r4, r0
   267d8:	ldr	r3, [r0, #24]
   267dc:	strd	r6, [sp, #8]
   267e0:	strd	r8, [sp, #16]
   267e4:	sub	r8, r2, #1
   267e8:	strd	sl, [sp, #24]
   267ec:	str	lr, [sp, #32]
   267f0:	sub	sp, sp, #12
   267f4:	ldr	ip, [sp, #48]	; 0x30
   267f8:	add	r3, r3, ip
   267fc:	str	r3, [r0, #24]
   26800:	blt	269e4 <flatcc_emitter@@Base+0x218>
   26804:	ldr	r0, [r0, #20]
   26808:	cmp	r0, ip
   2680c:	bcs	268a4 <flatcc_emitter@@Base+0xd8>
   26810:	cmp	r2, #0
   26814:	beq	268e8 <flatcc_emitter@@Base+0x11c>
   26818:	movw	r3, #64064	; 0xfa40
   2681c:	movt	r3, #65535	; 0xffff
   26820:	add	r5, r1, #8
   26824:	mov	r8, r2
   26828:	mov	r9, #1472	; 0x5c0
   2682c:	str	r3, [sp, #4]
   26830:	ldr	r7, [r5, #-8]
   26834:	ldr	r6, [r5, #-4]
   26838:	cmp	r6, #0
   2683c:	beq	26980 <flatcc_emitter@@Base+0x1b4>
   26840:	mov	r3, r0
   26844:	cmp	r6, r3
   26848:	bls	2689c <flatcc_emitter@@Base+0xd0>
   2684c:	cmp	r3, #0
   26850:	beq	26908 <flatcc_emitter@@Base+0x13c>
   26854:	sub	fp, r6, r3
   26858:	mov	r6, r3
   2685c:	mov	r2, r6
   26860:	mov	r1, r7
   26864:	ldr	r0, [r4, #16]
   26868:	bl	12588 <memcpy@plt>
   2686c:	ldr	r2, [r4, #16]
   26870:	cmp	fp, #0
   26874:	add	r7, r7, r6
   26878:	ldr	r0, [r4, #20]
   2687c:	add	r2, r2, r6
   26880:	sub	r3, r0, r6
   26884:	mov	r0, r3
   26888:	strd	r2, [r4, #16]
   2688c:	beq	26980 <flatcc_emitter@@Base+0x1b4>
   26890:	mov	r6, fp
   26894:	cmp	r6, r3
   26898:	bhi	2684c <flatcc_emitter@@Base+0x80>
   2689c:	mov	fp, #0
   268a0:	b	2685c <flatcc_emitter@@Base+0x90>
   268a4:	ldr	r3, [r4, #16]
   268a8:	sub	r0, r0, ip
   268ac:	str	r0, [r4, #20]
   268b0:	add	ip, r3, ip
   268b4:	str	ip, [r4, #16]
   268b8:	cmp	r2, #0
   268bc:	addne	r4, r1, #8
   268c0:	beq	268e8 <flatcc_emitter@@Base+0x11c>
   268c4:	mov	r0, r3
   268c8:	ldmdb	r4, {r1, r2}
   268cc:	sub	r8, r8, #1
   268d0:	bl	12588 <memcpy@plt>
   268d4:	ldr	r2, [r4, #-4]
   268d8:	cmn	r8, #1
   268dc:	add	r4, r4, #8
   268e0:	add	r3, r0, r2
   268e4:	bne	268c4 <flatcc_emitter@@Base+0xf8>
   268e8:	mov	r0, #0
   268ec:	add	sp, sp, #12
   268f0:	ldrd	r4, [sp]
   268f4:	ldrd	r6, [sp, #8]
   268f8:	ldrd	r8, [sp, #16]
   268fc:	ldrd	sl, [sp, #24]
   26900:	add	sp, sp, #32
   26904:	pop	{pc}		; (ldr pc, [sp], #4)
   26908:	ldr	fp, [r4, #4]
   2690c:	cmp	fp, #0
   26910:	beq	26990 <flatcc_emitter@@Base+0x1c4>
   26914:	ldr	sl, [r4]
   26918:	ldr	r0, [fp, #2944]	; 0xb80
   2691c:	cmp	r0, sl
   26920:	beq	2694c <flatcc_emitter@@Base+0x180>
   26924:	str	r0, [r4, #4]
   26928:	ldr	r1, [r0, #2948]	; 0xb84
   2692c:	mov	r2, #2944	; 0xb80
   26930:	mov	r3, r2
   26934:	str	r0, [r4, #16]
   26938:	str	r2, [r4, #20]
   2693c:	ldr	r2, [r1, #2952]	; 0xb88
   26940:	add	r2, r2, r3
   26944:	str	r2, [r0, #2952]	; 0xb88
   26948:	b	26844 <flatcc_emitter@@Base+0x78>
   2694c:	movw	r0, #2956	; 0xb8c
   26950:	bl	125dc <malloc@plt>
   26954:	cmp	r0, #0
   26958:	beq	269dc <flatcc_emitter@@Base+0x210>
   2695c:	ldr	r2, [r4, #28]
   26960:	str	sl, [r0, #2944]	; 0xb80
   26964:	str	fp, [r0, #2948]	; 0xb84
   26968:	add	r2, r2, #2944	; 0xb80
   2696c:	str	r2, [r4, #28]
   26970:	str	r0, [sl, #2948]	; 0xb84
   26974:	str	r0, [fp, #2944]	; 0xb80
   26978:	str	r0, [r4, #4]
   2697c:	b	26928 <flatcc_emitter@@Base+0x15c>
   26980:	subs	r8, r8, #1
   26984:	add	r5, r5, #8
   26988:	bne	26830 <flatcc_emitter@@Base+0x64>
   2698c:	b	268e8 <flatcc_emitter@@Base+0x11c>
   26990:	movw	r0, #2956	; 0xb8c
   26994:	bl	125dc <malloc@plt>
   26998:	cmp	r0, #0
   2699c:	beq	269dc <flatcc_emitter@@Base+0x210>
   269a0:	ldr	r2, [r4, #28]
   269a4:	add	r1, r0, #1472	; 0x5c0
   269a8:	mov	r3, #1472	; 0x5c0
   269ac:	str	r0, [r4]
   269b0:	strd	r0, [r4, #4]
   269b4:	str	r9, [r4, #12]
   269b8:	str	r1, [r4, #16]
   269bc:	add	r2, r2, #2944	; 0xb80
   269c0:	str	r9, [r4, #20]
   269c4:	str	r0, [r0, #2944]	; 0xb80
   269c8:	str	r2, [r4, #28]
   269cc:	ldr	r2, [sp, #4]
   269d0:	str	r0, [r0, #2948]	; 0xb84
   269d4:	str	r2, [r0, #2952]	; 0xb88
   269d8:	b	26844 <flatcc_emitter@@Base+0x78>
   269dc:	mvn	r0, #0
   269e0:	b	268ec <flatcc_emitter@@Base+0x120>
   269e4:	ldr	r0, [r0, #12]
   269e8:	cmp	r0, ip
   269ec:	bcs	26b54 <flatcc_emitter@@Base+0x388>
   269f0:	add	r5, r1, r2, lsl #3
   269f4:	movw	r3, #64064	; 0xfa40
   269f8:	movt	r3, #65535	; 0xffff
   269fc:	str	r3, [sp, #4]
   26a00:	cmn	r8, #1
   26a04:	beq	268e8 <flatcc_emitter@@Base+0x11c>
   26a08:	ldr	r7, [r5, #-8]
   26a0c:	ldr	r6, [r5, #-4]
   26a10:	cmp	r6, #0
   26a14:	add	r7, r7, r6
   26a18:	beq	26a68 <flatcc_emitter@@Base+0x29c>
   26a1c:	mov	r9, #1472	; 0x5c0
   26a20:	ldr	r2, [r4, #12]
   26a24:	cmp	r2, r6
   26a28:	bcs	26acc <flatcc_emitter@@Base+0x300>
   26a2c:	cmp	r2, #0
   26a30:	beq	26a74 <flatcc_emitter@@Base+0x2a8>
   26a34:	sub	r6, r6, r2
   26a38:	mov	r1, #0
   26a3c:	ldr	r3, [r4, #8]
   26a40:	rsb	r0, r2, #0
   26a44:	add	r7, r7, r0
   26a48:	str	r1, [r4, #12]
   26a4c:	mov	r1, r7
   26a50:	add	r3, r3, r0
   26a54:	mov	r0, r3
   26a58:	str	r3, [r4, #8]
   26a5c:	bl	12588 <memcpy@plt>
   26a60:	cmp	r6, #0
   26a64:	bne	26a20 <flatcc_emitter@@Base+0x254>
   26a68:	sub	r5, r5, #8
   26a6c:	sub	r8, r8, #1
   26a70:	b	26a00 <flatcc_emitter@@Base+0x234>
   26a74:	ldr	fp, [r4]
   26a78:	cmp	fp, #0
   26a7c:	beq	26b10 <flatcc_emitter@@Base+0x344>
   26a80:	ldr	sl, [r4, #4]
   26a84:	ldr	r0, [fp, #2948]	; 0xb84
   26a88:	cmp	r0, sl
   26a8c:	beq	26adc <flatcc_emitter@@Base+0x310>
   26a90:	ldr	r3, [fp, #2952]	; 0xb88
   26a94:	sub	r3, r3, #2944	; 0xb80
   26a98:	str	r3, [r0, #2952]	; 0xb88
   26a9c:	str	r0, [r4]
   26aa0:	ldr	r3, [r0, #2944]	; 0xb80
   26aa4:	mov	r2, #2944	; 0xb80
   26aa8:	add	r1, r0, #2944	; 0xb80
   26aac:	ldr	r3, [r3, #2952]	; 0xb88
   26ab0:	str	r1, [r4, #8]
   26ab4:	str	r2, [r4, #12]
   26ab8:	sub	r3, r3, #2944	; 0xb80
   26abc:	str	r3, [r0, #2952]	; 0xb88
   26ac0:	ldr	r2, [r4, #12]
   26ac4:	cmp	r2, r6
   26ac8:	bcc	26a2c <flatcc_emitter@@Base+0x260>
   26acc:	sub	r1, r2, r6
   26ad0:	mov	r2, r6
   26ad4:	mov	r6, #0
   26ad8:	b	26a3c <flatcc_emitter@@Base+0x270>
   26adc:	movw	r0, #2956	; 0xb8c
   26ae0:	bl	125dc <malloc@plt>
   26ae4:	cmp	r0, #0
   26ae8:	beq	269dc <flatcc_emitter@@Base+0x210>
   26aec:	ldr	r2, [r4, #28]
   26af0:	str	fp, [r0, #2944]	; 0xb80
   26af4:	str	sl, [r0, #2948]	; 0xb84
   26af8:	add	r2, r2, #2944	; 0xb80
   26afc:	str	r2, [r4, #28]
   26b00:	str	r0, [fp, #2948]	; 0xb84
   26b04:	str	r0, [sl, #2944]	; 0xb80
   26b08:	str	r0, [r4]
   26b0c:	b	26aa0 <flatcc_emitter@@Base+0x2d4>
   26b10:	movw	r0, #2956	; 0xb8c
   26b14:	bl	125dc <malloc@plt>
   26b18:	cmp	r0, #0
   26b1c:	beq	269dc <flatcc_emitter@@Base+0x210>
   26b20:	ldr	r3, [r4, #28]
   26b24:	add	r2, r0, #1472	; 0x5c0
   26b28:	str	r0, [r4]
   26b2c:	stmib	r4, {r0, r2, r9}
   26b30:	add	r3, r3, #2944	; 0xb80
   26b34:	str	r2, [r4, #16]
   26b38:	str	r9, [r4, #20]
   26b3c:	str	r3, [r4, #28]
   26b40:	ldr	r3, [sp, #4]
   26b44:	str	r0, [r0, #2944]	; 0xb80
   26b48:	str	r0, [r0, #2948]	; 0xb84
   26b4c:	str	r3, [r0, #2952]	; 0xb88
   26b50:	b	26a20 <flatcc_emitter@@Base+0x254>
   26b54:	ldr	r3, [r4, #8]
   26b58:	sub	r0, r0, ip
   26b5c:	str	r0, [r4, #12]
   26b60:	sub	r3, r3, ip
   26b64:	str	r3, [r4, #8]
   26b68:	b	268b8 <flatcc_emitter@@Base+0xec>

00026b6c <flatcc_emitter_copy_buffer@@Base>:
   26b6c:	ldr	r3, [r0, #24]
   26b70:	strd	r4, [sp, #-16]!
   26b74:	str	r6, [sp, #8]
   26b78:	str	lr, [sp, #12]
   26b7c:	cmp	r3, r2
   26b80:	movhi	r5, #0
   26b84:	bhi	26c04 <flatcc_emitter_copy_buffer@@Base+0x98>
   26b88:	ldr	r5, [r0]
   26b8c:	mov	r6, r0
   26b90:	cmp	r5, #0
   26b94:	beq	26c04 <flatcc_emitter_copy_buffer@@Base+0x98>
   26b98:	ldr	r2, [r6, #4]
   26b9c:	mov	r0, r1
   26ba0:	ldr	r1, [r6, #8]
   26ba4:	cmp	r5, r2
   26ba8:	beq	26c18 <flatcc_emitter_copy_buffer@@Base+0xac>
   26bac:	ldr	r2, [r6, #12]
   26bb0:	rsb	r2, r2, #2944	; 0xb80
   26bb4:	add	r5, r0, r2
   26bb8:	bl	12588 <memcpy@plt>
   26bbc:	ldrd	r2, [r6]
   26bc0:	ldr	r4, [r2, #2944]	; 0xb80
   26bc4:	cmp	r4, r3
   26bc8:	beq	26bf0 <flatcc_emitter_copy_buffer@@Base+0x84>
   26bcc:	mov	r2, #2944	; 0xb80
   26bd0:	mov	r1, r4
   26bd4:	mov	r0, r5
   26bd8:	add	r5, r5, r2
   26bdc:	bl	12588 <memcpy@plt>
   26be0:	ldr	r3, [r6, #4]
   26be4:	ldr	r4, [r4, #2944]	; 0xb80
   26be8:	cmp	r3, r4
   26bec:	bne	26bcc <flatcc_emitter_copy_buffer@@Base+0x60>
   26bf0:	ldr	r2, [r6, #20]
   26bf4:	mov	r1, r4
   26bf8:	mov	r0, r5
   26bfc:	rsb	r2, r2, #2944	; 0xb80
   26c00:	bl	12588 <memcpy@plt>
   26c04:	mov	r0, r5
   26c08:	ldrd	r4, [sp]
   26c0c:	ldr	r6, [sp, #8]
   26c10:	add	sp, sp, #12
   26c14:	pop	{pc}		; (ldr pc, [sp], #4)
   26c18:	mov	r2, r3
   26c1c:	mov	r5, r0
   26c20:	bl	12588 <memcpy@plt>
   26c24:	b	26c04 <flatcc_emitter_copy_buffer@@Base+0x98>
   26c28:	movw	r3, #59640	; 0xe8f8
   26c2c:	movt	r3, #2
   26c30:	str	r4, [sp, #-8]!
   26c34:	movw	r1, #61840	; 0xf190
   26c38:	movt	r1, #2
   26c3c:	str	lr, [sp, #4]
   26c40:	movw	r0, #61928	; 0xf1e8
   26c44:	movt	r0, #2
   26c48:	mov	r2, #260	; 0x104
   26c4c:	bl	12684 <__assert_fail@plt>
   26c50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26c54:	mov	ip, #0
   26c58:	cmp	r1, r2
   26c5c:	strd	r6, [sp, #8]
   26c60:	moveq	r0, r1
   26c64:	strd	r8, [sp, #16]
   26c68:	strd	sl, [sp, #24]
   26c6c:	str	lr, [sp, #32]
   26c70:	sub	sp, sp, #36	; 0x24
   26c74:	ldr	lr, [sp, #72]	; 0x48
   26c78:	strb	ip, [lr]
   26c7c:	beq	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26c80:	mov	r7, r3
   26c84:	ldrb	r3, [r1]
   26c88:	mov	r8, r0
   26c8c:	mov	r5, r2
   26c90:	cmp	r3, #34	; 0x22
   26c94:	beq	26df4 <flatcc_emitter_copy_buffer@@Base+0x288>
   26c98:	cmp	r3, #46	; 0x2e
   26c9c:	movne	r3, #1
   26ca0:	movne	r0, r1
   26ca4:	strne	r3, [r8, #12]
   26ca8:	beq	26dac <flatcc_emitter_copy_buffer@@Base+0x240>
   26cac:	mov	fp, #0
   26cb0:	add	sl, sp, #20
   26cb4:	add	r9, sp, #24
   26cb8:	mov	r4, r7
   26cbc:	mov	r6, r0
   26cc0:	b	26cdc <flatcc_emitter_copy_buffer@@Base+0x170>
   26cc4:	cmp	r6, r0
   26cc8:	mov	r6, r0
   26ccc:	bne	26d1c <flatcc_emitter_copy_buffer@@Base+0x1b0>
   26cd0:	ldr	r3, [r4, #4]!
   26cd4:	cmp	r3, #0
   26cd8:	beq	26f54 <flatcc_emitter_copy_buffer@@Base+0x3e8>
   26cdc:	mov	r1, r0
   26ce0:	add	r3, sp, #16
   26ce4:	stm	sp, {r9, sl}
   26ce8:	mov	r2, r5
   26cec:	mov	r0, r8
   26cf0:	ldr	ip, [r4]
   26cf4:	blx	ip
   26cf8:	cmp	r5, r0
   26cfc:	bne	26cc4 <flatcc_emitter_copy_buffer@@Base+0x158>
   26d00:	add	sp, sp, #36	; 0x24
   26d04:	ldrd	r4, [sp]
   26d08:	ldrd	r6, [sp, #8]
   26d0c:	ldrd	r8, [sp, #16]
   26d10:	ldrd	sl, [sp, #24]
   26d14:	add	sp, sp, #32
   26d18:	pop	{pc}		; (ldr pc, [sp], #4)
   26d1c:	cmp	fp, #0
   26d20:	beq	26d30 <flatcc_emitter_copy_buffer@@Base+0x1c4>
   26d24:	ldr	r3, [r8, #12]
   26d28:	cmp	r3, #0
   26d2c:	bne	26f6c <flatcc_emitter_copy_buffer@@Base+0x400>
   26d30:	ldr	r3, [sp, #16]
   26d34:	cmp	r3, #0
   26d38:	bne	26d7c <flatcc_emitter_copy_buffer@@Base+0x210>
   26d3c:	ldrd	r2, [sp, #24]
   26d40:	cmp	r3, #0
   26d44:	strd	r2, [sp, #8]
   26d48:	cmpeq	r2, #255	; 0xff
   26d4c:	bhi	26ddc <flatcc_emitter_copy_buffer@@Base+0x270>
   26d50:	ldr	r2, [sp, #8]
   26d54:	add	fp, fp, #1
   26d58:	ldr	r3, [sp, #72]	; 0x48
   26d5c:	ldr	r1, [sp, #20]
   26d60:	ldrb	r3, [r3]
   26d64:	cmp	r1, #0
   26d68:	add	r3, r3, r2
   26d6c:	ldr	r2, [sp, #72]	; 0x48
   26d70:	strb	r3, [r2]
   26d74:	bne	26cb8 <flatcc_emitter_copy_buffer@@Base+0x14c>
   26d78:	b	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26d7c:	ldr	r3, [r8, #24]
   26d80:	cmp	r3, #0
   26d84:	bne	26dd4 <flatcc_emitter_copy_buffer@@Base+0x268>
   26d88:	ldr	r3, [r8, #4]
   26d8c:	mov	r2, #8
   26d90:	sub	r3, r0, r3
   26d94:	str	r2, [r8, #24]
   26d98:	add	r3, r3, #1
   26d9c:	str	r3, [r8, #20]
   26da0:	str	r0, [r8, #36]	; 0x24
   26da4:	mov	r0, r5
   26da8:	b	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26dac:	ldr	r3, [r8, #24]
   26db0:	cmp	r3, #0
   26db4:	bne	26dd4 <flatcc_emitter_copy_buffer@@Base+0x268>
   26db8:	ldr	r3, [r8, #4]
   26dbc:	mov	r2, #5
   26dc0:	str	r1, [r8, #36]	; 0x24
   26dc4:	str	r2, [r8, #24]
   26dc8:	sub	r1, r1, r3
   26dcc:	add	r3, r1, #1
   26dd0:	str	r3, [r8, #20]
   26dd4:	mov	r0, r5
   26dd8:	b	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26ddc:	ldr	r3, [r8, #24]
   26de0:	cmp	r3, #0
   26de4:	bne	26dd4 <flatcc_emitter_copy_buffer@@Base+0x268>
   26de8:	mov	r2, #7
   26dec:	ldr	r3, [r8, #4]
   26df0:	b	26d90 <flatcc_emitter_copy_buffer@@Base+0x224>
   26df4:	add	r0, r1, #1
   26df8:	str	ip, [r8, #12]
   26dfc:	sub	r3, r2, r0
   26e00:	cmp	r3, #1
   26e04:	ble	26e34 <flatcc_emitter_copy_buffer@@Base+0x2c8>
   26e08:	ldrb	r3, [r1, #1]
   26e0c:	cmp	r3, #32
   26e10:	bls	26e20 <flatcc_emitter_copy_buffer@@Base+0x2b4>
   26e14:	cmp	r5, r0
   26e18:	bne	26cac <flatcc_emitter_copy_buffer@@Base+0x140>
   26e1c:	b	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26e20:	bne	26e34 <flatcc_emitter_copy_buffer@@Base+0x2c8>
   26e24:	ldrb	r3, [r1, #2]
   26e28:	cmp	r3, #32
   26e2c:	addhi	r0, r1, #2
   26e30:	bhi	26e14 <flatcc_emitter_copy_buffer@@Base+0x2a8>
   26e34:	cmp	r5, r0
   26e38:	beq	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26e3c:	ldrb	r2, [r0]
   26e40:	cmp	r2, #32
   26e44:	bne	26e6c <flatcc_emitter_copy_buffer@@Base+0x300>
   26e48:	add	r3, r0, #1
   26e4c:	b	26e5c <flatcc_emitter_copy_buffer@@Base+0x2f0>
   26e50:	ldrb	r2, [r3], #1
   26e54:	cmp	r2, #32
   26e58:	bne	26e6c <flatcc_emitter_copy_buffer@@Base+0x300>
   26e5c:	cmp	r5, r3
   26e60:	mov	r0, r3
   26e64:	bne	26e50 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   26e68:	b	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26e6c:	cmp	r2, #32
   26e70:	bhi	26cac <flatcc_emitter_copy_buffer@@Base+0x140>
   26e74:	sub	r2, r2, #9
   26e78:	cmp	r2, #23
   26e7c:	ldrls	pc, [pc, r2, lsl #2]
   26e80:	b	26f3c <flatcc_emitter_copy_buffer@@Base+0x3d0>
   26e84:	andeq	r6, r2, r4, lsr pc
   26e88:	andeq	r6, r2, ip, lsr #30
   26e8c:	andeq	r6, r2, ip, lsr pc
   26e90:	andeq	r6, r2, ip, lsr pc
   26e94:	andeq	r6, r2, r4, ror #29
   26e98:	andeq	r6, r2, ip, lsr pc
   26e9c:	andeq	r6, r2, ip, lsr pc
   26ea0:	andeq	r6, r2, ip, lsr pc
   26ea4:	andeq	r6, r2, ip, lsr pc
   26ea8:	andeq	r6, r2, ip, lsr pc
   26eac:	andeq	r6, r2, ip, lsr pc
   26eb0:	andeq	r6, r2, ip, lsr pc
   26eb4:	andeq	r6, r2, ip, lsr pc
   26eb8:	andeq	r6, r2, ip, lsr pc
   26ebc:	andeq	r6, r2, ip, lsr pc
   26ec0:	andeq	r6, r2, ip, lsr pc
   26ec4:	andeq	r6, r2, ip, lsr pc
   26ec8:	andeq	r6, r2, ip, lsr pc
   26ecc:	andeq	r6, r2, ip, lsr pc
   26ed0:	andeq	r6, r2, ip, lsr pc
   26ed4:	andeq	r6, r2, ip, lsr pc
   26ed8:	andeq	r6, r2, ip, lsr pc
   26edc:	andeq	r6, r2, ip, lsr pc
   26ee0:	andeq	r6, r2, r4, lsr lr
   26ee4:	sub	r3, r5, r0
   26ee8:	add	r2, r0, #1
   26eec:	cmp	r3, #1
   26ef0:	ble	26f00 <flatcc_emitter_copy_buffer@@Base+0x394>
   26ef4:	ldrb	r3, [r0, #1]
   26ef8:	cmp	r3, #10
   26efc:	addeq	r2, r0, #2
   26f00:	mov	r0, r2
   26f04:	ldr	r3, [r8, #16]
   26f08:	str	r0, [r8, #4]
   26f0c:	add	r3, r3, #1
   26f10:	str	r3, [r8, #16]
   26f14:	cmp	r5, r0
   26f18:	beq	26d00 <flatcc_emitter_copy_buffer@@Base+0x194>
   26f1c:	ldrb	r2, [r0]
   26f20:	cmp	r2, #32
   26f24:	bls	26e74 <flatcc_emitter_copy_buffer@@Base+0x308>
   26f28:	b	26cac <flatcc_emitter_copy_buffer@@Base+0x140>
   26f2c:	add	r0, r0, #1
   26f30:	b	26f04 <flatcc_emitter_copy_buffer@@Base+0x398>
   26f34:	add	r0, r0, #1
   26f38:	b	26f14 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   26f3c:	ldr	r3, [r8, #24]
   26f40:	cmp	r3, #0
   26f44:	bne	26dd4 <flatcc_emitter_copy_buffer@@Base+0x268>
   26f48:	mov	r2, #5
   26f4c:	ldr	r3, [r8, #4]
   26f50:	b	26d90 <flatcc_emitter_copy_buffer@@Base+0x224>
   26f54:	ldr	r3, [r8, #24]
   26f58:	cmp	r3, #0
   26f5c:	bne	26dd4 <flatcc_emitter_copy_buffer@@Base+0x268>
   26f60:	mov	r2, #23
   26f64:	ldr	r3, [r8, #4]
   26f68:	b	26d90 <flatcc_emitter_copy_buffer@@Base+0x224>
   26f6c:	ldr	r3, [r8, #24]
   26f70:	cmp	r3, #0
   26f74:	bne	26dd4 <flatcc_emitter_copy_buffer@@Base+0x268>
   26f78:	mov	r2, #14
   26f7c:	ldr	r3, [r8, #4]
   26f80:	b	26d90 <flatcc_emitter_copy_buffer@@Base+0x224>

00026f84 <grisu3_diy_fp_encode_double@@Base>:
   26f84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   26f88:	sub	r2, r2, r3
   26f8c:	strd	r6, [sp, #8]
   26f90:	strd	r8, [sp, #16]
   26f94:	strd	sl, [sp, #24]
   26f98:	mov	sl, r0
   26f9c:	mov	fp, r1
   26fa0:	str	lr, [sp, #32]
   26fa4:	sub	sp, sp, #60	; 0x3c
   26fa8:	ldr	ip, [sp, #96]	; 0x60
   26fac:	cmp	ip, #0
   26fb0:	movne	ip, #4
   26fb4:	orrs	r1, sl, fp
   26fb8:	beq	2744c <grisu3_diy_fp_encode_double@@Base+0x4c8>
   26fbc:	mov	lr, #0
   26fc0:	mov	r4, lr
   26fc4:	mov	r0, lr
   26fc8:	movt	r4, #65472	; 0xffc0
   26fcc:	and	r1, fp, r4
   26fd0:	orrs	r1, r0, r1
   26fd4:	movne	r1, lr
   26fd8:	bne	27014 <grisu3_diy_fp_encode_double@@Base+0x90>
   26fdc:	mvn	r5, #9
   26fe0:	str	r4, [sp, #16]
   26fe4:	lsl	r0, fp, #10
   26fe8:	mov	r6, lr
   26fec:	mov	r1, r5
   26ff0:	lsl	r4, sl, #10
   26ff4:	sub	r5, r5, #10
   26ff8:	orr	r0, r0, sl, lsr #22
   26ffc:	mov	sl, r4
   27000:	mov	fp, r0
   27004:	ldr	r0, [sp, #16]
   27008:	and	r7, fp, r0
   2700c:	orrs	r0, r6, r7
   27010:	beq	26fe4 <grisu3_diy_fp_encode_double@@Base+0x60>
   27014:	cmp	sl, #0
   27018:	sbcs	r0, fp, #0
   2701c:	blt	27040 <grisu3_diy_fp_encode_double@@Base+0xbc>
   27020:	sub	r0, r1, #1
   27024:	adds	sl, sl, sl
   27028:	mov	r1, r0
   2702c:	adc	fp, fp, fp
   27030:	cmp	sl, #0
   27034:	sbcs	lr, fp, #0
   27038:	sub	r0, r0, #1
   2703c:	bge	27024 <grisu3_diy_fp_encode_double@@Base+0xa0>
   27040:	rsb	r0, r1, #0
   27044:	cmn	r2, #348	; 0x15c
   27048:	lsl	r0, ip, r0
   2704c:	str	r0, [sp, #20]
   27050:	blt	274a4 <grisu3_diy_fp_encode_double@@Base+0x520>
   27054:	cmp	r2, #348	; 0x15c
   27058:	bge	2746c <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2705c:	add	r0, r2, #348	; 0x15c
   27060:	movw	ip, #59640	; 0xe8f8
   27064:	movt	ip, #2
   27068:	asr	r0, r0, #3
   2706c:	add	r0, ip, r0, lsl #4
   27070:	ldrsh	r5, [r0, #66]	; 0x42
   27074:	ldrsh	lr, [r0, #64]	; 0x40
   27078:	ldr	r7, [r0, #56]	; 0x38
   2707c:	cmp	r2, r5
   27080:	ldr	r0, [r0, #60]	; 0x3c
   27084:	str	r0, [sp, #16]
   27088:	blt	27488 <grisu3_diy_fp_encode_double@@Base+0x504>
   2708c:	add	r0, r5, #7
   27090:	cmp	r2, r0
   27094:	bgt	27450 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   27098:	cmp	r2, r5
   2709c:	beq	27154 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   270a0:	sub	r5, r2, r5
   270a4:	sub	r5, r5, #1
   270a8:	cmp	r5, #6
   270ac:	bhi	274c0 <grisu3_diy_fp_encode_double@@Base+0x53c>
   270b0:	movw	r2, #840	; 0x348
   270b4:	movt	r2, #4
   270b8:	add	r4, r2, r5, lsl #4
   270bc:	ldr	r2, [r2, r5, lsl #4]
   270c0:	add	r3, r3, #1
   270c4:	add	r5, r3, r5
   270c8:	mov	ip, #0
   270cc:	ldr	r6, [r4, #4]
   270d0:	str	r6, [sp, #32]
   270d4:	str	r5, [sp, #36]	; 0x24
   270d8:	ldr	r6, [r4, #8]
   270dc:	umull	r4, r5, fp, r2
   270e0:	umull	r2, r3, sl, r2
   270e4:	ldr	r0, [sp, #32]
   270e8:	strd	r4, [sp, #40]	; 0x28
   270ec:	mov	r2, r3
   270f0:	ldr	r3, [sp, #32]
   270f4:	add	r1, r1, r6
   270f8:	add	r1, r1, #64	; 0x40
   270fc:	umull	r4, r5, sl, r3
   27100:	ldr	r3, [sp, #40]	; 0x28
   27104:	strd	r4, [sp]
   27108:	ldr	r5, [sp, #36]	; 0x24
   2710c:	adds	r4, r2, r3
   27110:	ldrd	r2, [sp]
   27114:	adc	r6, ip, ip
   27118:	adds	r4, r4, #-2147483648	; 0x80000000
   2711c:	adc	r6, r6, ip
   27120:	adds	r4, r4, r2
   27124:	ldr	r2, [sp, #44]	; 0x2c
   27128:	adc	r6, r6, ip
   2712c:	adds	r2, r2, r3
   27130:	str	r2, [sp, #24]
   27134:	adc	r2, ip, ip
   27138:	str	r2, [sp, #28]
   2713c:	ldrd	r2, [sp, #24]
   27140:	umlal	r2, r3, r0, fp
   27144:	adds	sl, r6, r2
   27148:	adc	fp, ip, r3
   2714c:	cmp	r5, #19
   27150:	bgt	2740c <grisu3_diy_fp_encode_double@@Base+0x488>
   27154:	umull	r2, r3, fp, r7
   27158:	add	lr, r1, lr
   2715c:	mov	ip, #0
   27160:	umull	r0, r1, sl, r7
   27164:	add	r7, lr, #64	; 0x40
   27168:	strd	r2, [sp]
   2716c:	strd	r0, [sp, #24]
   27170:	ldr	r3, [sp, #16]
   27174:	ldr	r2, [sp]
   27178:	ldr	r1, [sp, #28]
   2717c:	umull	r4, r5, sl, r3
   27180:	ldr	r3, [sp, #4]
   27184:	adds	r2, r1, r2
   27188:	mov	r1, r4
   2718c:	adc	r0, ip, ip
   27190:	adds	r2, r2, #-2147483648	; 0x80000000
   27194:	adc	r0, r0, ip
   27198:	adds	r2, r2, r1
   2719c:	ldr	r2, [sp, #16]
   271a0:	adc	r0, r0, ip
   271a4:	adds	r1, r3, r5
   271a8:	ldr	r3, [sp, #20]
   271ac:	str	r1, [sp, #8]
   271b0:	adc	r1, ip, ip
   271b4:	str	r1, [sp, #12]
   271b8:	ldrd	r4, [sp, #8]
   271bc:	umlal	r4, r5, r2, fp
   271c0:	adds	r8, r0, r4
   271c4:	adc	r9, ip, r5
   271c8:	cmp	r3, ip
   271cc:	movne	r2, #9
   271d0:	moveq	r2, #8
   271d4:	orrs	r1, r8, r9
   271d8:	add	r2, r3, r2
   271dc:	beq	2744c <grisu3_diy_fp_encode_double@@Base+0x4c8>
   271e0:	mov	r3, ip
   271e4:	mov	r4, ip
   271e8:	movt	r3, #65472	; 0xffc0
   271ec:	and	r5, r9, r3
   271f0:	orrs	r1, r4, r5
   271f4:	bne	27434 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   271f8:	add	r1, lr, #54	; 0x36
   271fc:	mov	r0, r3
   27200:	lsl	lr, r9, #10
   27204:	mov	r4, ip
   27208:	mov	r3, r1
   2720c:	lsl	r6, r8, #10
   27210:	sub	r1, r1, #10
   27214:	orr	lr, lr, r8, lsr #22
   27218:	mov	r8, r6
   2721c:	and	r5, lr, r0
   27220:	mov	r9, lr
   27224:	orrs	lr, r4, r5
   27228:	beq	27200 <grisu3_diy_fp_encode_double@@Base+0x27c>
   2722c:	cmp	r8, #0
   27230:	sbcs	r1, r9, #0
   27234:	blt	27258 <grisu3_diy_fp_encode_double@@Base+0x2d4>
   27238:	sub	r1, r3, #1
   2723c:	adds	r8, r8, r8
   27240:	mov	r3, r1
   27244:	adc	r9, r9, r9
   27248:	cmp	r8, #0
   2724c:	sbcs	r0, r9, #0
   27250:	sub	r1, r1, #1
   27254:	bge	2723c <grisu3_diy_fp_encode_double@@Base+0x2b8>
   27258:	movw	r1, #64526	; 0xfc0e
   2725c:	movt	r1, #65535	; 0xffff
   27260:	add	r0, r3, #64	; 0x40
   27264:	sub	r7, r7, r3
   27268:	cmp	r0, r1
   2726c:	lsl	r2, r2, r7
   27270:	blt	273b0 <grisu3_diy_fp_encode_double@@Base+0x42c>
   27274:	add	ip, r2, #4
   27278:	mov	r1, #4
   2727c:	cmp	ip, #0
   27280:	mov	r0, #0
   27284:	bgt	272d0 <grisu3_diy_fp_encode_double@@Base+0x34c>
   27288:	adds	r8, r8, #1
   2728c:	mov	r4, #0
   27290:	adc	r9, r9, #0
   27294:	and	r5, r9, #2097152	; 0x200000
   27298:	orrs	lr, r4, r5
   2729c:	beq	272b8 <grisu3_diy_fp_encode_double@@Base+0x334>
   272a0:	lsr	lr, r8, #1
   272a4:	add	r3, r3, #1
   272a8:	lsr	r4, r9, #1
   272ac:	orr	lr, lr, r9, lsl #31
   272b0:	mov	r9, r4
   272b4:	mov	r8, lr
   272b8:	movw	r5, #65535	; 0xffff
   272bc:	movt	r5, #31
   272c0:	mvn	r4, #0
   272c4:	cmp	r9, r5
   272c8:	cmpeq	r8, r4
   272cc:	bls	27308 <grisu3_diy_fp_encode_double@@Base+0x384>
   272d0:	movw	r5, #65535	; 0xffff
   272d4:	movt	r5, #31
   272d8:	add	r6, r3, #1
   272dc:	mvn	r4, #0
   272e0:	lsr	lr, r8, #1
   272e4:	mov	r3, r6
   272e8:	add	r6, r6, #1
   272ec:	lsr	r7, r9, #1
   272f0:	orr	lr, lr, r9, lsl #31
   272f4:	cmp	r7, r5
   272f8:	mov	r9, r7
   272fc:	cmpeq	lr, r4
   27300:	mov	r8, lr
   27304:	bhi	272e0 <grisu3_diy_fp_encode_double@@Base+0x35c>
   27308:	movw	lr, #64462	; 0xfbce
   2730c:	movt	lr, #65535	; 0xffff
   27310:	cmp	r3, lr
   27314:	mov	r6, #0
   27318:	movlt	r7, #0
   2731c:	blt	27378 <grisu3_diy_fp_encode_double@@Base+0x3f4>
   27320:	mov	r4, r6
   27324:	and	r5, r9, #1048576	; 0x100000
   27328:	beq	27360 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2732c:	orrs	r7, r4, r5
   27330:	beq	27344 <grisu3_diy_fp_encode_double@@Base+0x3c0>
   27334:	b	2743c <grisu3_diy_fp_encode_double@@Base+0x4b8>
   27338:	orrs	sl, r4, r5
   2733c:	bne	2741c <grisu3_diy_fp_encode_double@@Base+0x498>
   27340:	mov	r3, r7
   27344:	adds	r8, r8, r8
   27348:	sub	r7, r3, #1
   2734c:	adc	r9, r9, r9
   27350:	cmp	r7, lr
   27354:	mov	r4, r6
   27358:	and	r5, r9, #1048576	; 0x100000
   2735c:	bne	27338 <grisu3_diy_fp_encode_double@@Base+0x3b4>
   27360:	orrs	r3, r4, r5
   27364:	movne	r4, #0
   27368:	movne	r5, #1048576	; 0x100000
   2736c:	ubfx	r3, r9, #0, #20
   27370:	orr	r6, r8, r4
   27374:	orr	r7, r3, r5
   27378:	ldr	r3, [sp, #100]	; 0x64
   2737c:	sub	r2, r1, r2
   27380:	cmp	r0, ip
   27384:	cmplt	r2, r0
   27388:	movge	r0, #1
   2738c:	movlt	r0, #0
   27390:	strd	r6, [r3]
   27394:	add	sp, sp, #60	; 0x3c
   27398:	ldrd	r4, [sp]
   2739c:	ldrd	r6, [sp, #8]
   273a0:	ldrd	r8, [sp, #16]
   273a4:	ldrd	sl, [sp, #24]
   273a8:	add	sp, sp, #32
   273ac:	pop	{pc}		; (ldr pc, [sp], #4)
   273b0:	mvn	r1, #1072	; 0x430
   273b4:	cmp	r0, r1
   273b8:	blt	2742c <grisu3_diy_fp_encode_double@@Base+0x4a8>
   273bc:	add	r0, r3, #1136	; 0x470
   273c0:	add	r0, r0, #2
   273c4:	rsb	lr, r0, #64	; 0x40
   273c8:	cmp	lr, #60	; 0x3c
   273cc:	rsbgt	r0, r0, #2
   273d0:	ble	274dc <grisu3_diy_fp_encode_double@@Base+0x558>
   273d4:	asr	r2, r2, r0
   273d8:	add	r3, r3, r0
   273dc:	mov	lr, #62	; 0x3e
   273e0:	lsr	r1, r9, r0
   273e4:	mov	r9, #0
   273e8:	add	r3, r3, #62	; 0x3e
   273ec:	add	r2, r2, #9
   273f0:	mov	r0, r9
   273f4:	lsr	r8, r1, #30
   273f8:	mov	ip, r2
   273fc:	mov	r1, r9
   27400:	cmp	lr, ip
   27404:	blt	272b8 <grisu3_diy_fp_encode_double@@Base+0x334>
   27408:	b	27288 <grisu3_diy_fp_encode_double@@Base+0x304>
   2740c:	ldr	r3, [sp, #20]
   27410:	add	r3, r3, #4
   27414:	str	r3, [sp, #20]
   27418:	b	27154 <grisu3_diy_fp_encode_double@@Base+0x1d0>
   2741c:	add	r3, r3, #1072	; 0x430
   27420:	add	r3, r3, #2
   27424:	lsl	r5, r3, #20
   27428:	b	2736c <grisu3_diy_fp_encode_double@@Base+0x3e8>
   2742c:	mov	r0, #2
   27430:	b	273d4 <grisu3_diy_fp_encode_double@@Base+0x450>
   27434:	mov	r3, r7
   27438:	b	2722c <grisu3_diy_fp_encode_double@@Base+0x2a8>
   2743c:	add	r3, r3, #1072	; 0x430
   27440:	add	r3, r3, #3
   27444:	lsl	r5, r3, #20
   27448:	b	2736c <grisu3_diy_fp_encode_double@@Base+0x3e8>
   2744c:	bl	26c28 <flatcc_emitter_copy_buffer@@Base+0xbc>
   27450:	movw	r1, #61940	; 0xf1f4
   27454:	movt	r1, #2
   27458:	movw	r0, #62120	; 0xf2a8
   2745c:	movt	r0, #2
   27460:	add	r3, ip, #24
   27464:	mov	r2, #89	; 0x59
   27468:	bl	12684 <__assert_fail@plt>
   2746c:	movw	r1, #61940	; 0xf1f4
   27470:	movt	r1, #2
   27474:	ldr	r3, [pc, #164]	; 27520 <grisu3_diy_fp_encode_double@@Base+0x59c>
   27478:	movw	r0, #62060	; 0xf26c
   2747c:	movt	r0, #2
   27480:	mov	r2, #81	; 0x51
   27484:	bl	12684 <__assert_fail@plt>
   27488:	movw	r1, #61940	; 0xf1f4
   2748c:	movt	r1, #2
   27490:	movw	r0, #62104	; 0xf298
   27494:	movt	r0, #2
   27498:	add	r3, ip, #24
   2749c:	mov	r2, #88	; 0x58
   274a0:	bl	12684 <__assert_fail@plt>
   274a4:	movw	r1, #61940	; 0xf1f4
   274a8:	movt	r1, #2
   274ac:	ldr	r3, [pc, #108]	; 27520 <grisu3_diy_fp_encode_double@@Base+0x59c>
   274b0:	movw	r0, #62028	; 0xf24c
   274b4:	movt	r0, #2
   274b8:	mov	r2, #80	; 0x50
   274bc:	bl	12684 <__assert_fail@plt>
   274c0:	movw	r1, #61940	; 0xf1f4
   274c4:	movt	r1, #2
   274c8:	ldr	r3, [pc, #84]	; 27524 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   274cc:	movw	r0, #62148	; 0xf2c4
   274d0:	movt	r0, #2
   274d4:	mov	r2, #185	; 0xb9
   274d8:	bl	12684 <__assert_fail@plt>
   274dc:	lsr	ip, r8, lr
   274e0:	rsb	r1, lr, #32
   274e4:	rsb	r0, r0, #63	; 0x3f
   274e8:	sub	r5, lr, #32
   274ec:	mov	r4, #1
   274f0:	orr	ip, ip, r9, lsl r1
   274f4:	mov	r1, #8
   274f8:	add	r3, r3, lr
   274fc:	and	r4, r8, r4, lsl r0
   27500:	orr	ip, ip, r9, lsr r5
   27504:	lsl	r1, r1, r0
   27508:	lsr	r5, r9, lr
   2750c:	mov	r8, ip
   27510:	lsl	r0, r4, #3
   27514:	add	ip, r2, r1
   27518:	mov	r9, r5
   2751c:	b	27400 <grisu3_diy_fp_encode_double@@Base+0x47c>
   27520:	andeq	lr, r2, r0, lsl r9
   27524:	andeq	lr, r2, r0, lsr #29
   27528:	cmp	r1, #1000	; 0x3e8
   2752c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27530:	mov	r4, #0
   27534:	addgt	ip, r0, #1000	; 0x3e8
   27538:	addle	r1, r1, #1
   2753c:	strd	r6, [sp, #8]
   27540:	addle	ip, r0, r1
   27544:	addgt	ip, ip, #1
   27548:	strd	r8, [sp, #16]
   2754c:	mov	r5, #0
   27550:	strd	sl, [sp, #24]
   27554:	cmp	ip, r0
   27558:	str	lr, [sp, #32]
   2755c:	sub	sp, sp, #52	; 0x34
   27560:	moveq	r6, ip
   27564:	strd	r4, [r2]
   27568:	str	r2, [sp, #16]
   2756c:	beq	27704 <grisu3_diy_fp_encode_double@@Base+0x780>
   27570:	ldrb	r4, [r0]
   27574:	cmp	r4, #45	; 0x2d
   27578:	beq	277fc <grisu3_diy_fp_encode_double@@Base+0x878>
   2757c:	cmp	r4, #48	; 0x30
   27580:	beq	27724 <grisu3_diy_fp_encode_double@@Base+0x7a0>
   27584:	sub	r3, r4, #49	; 0x31
   27588:	cmp	r3, #8
   2758c:	bhi	278ac <grisu3_diy_fp_encode_double@@Base+0x928>
   27590:	mov	r2, #0
   27594:	mov	r3, r0
   27598:	str	r2, [sp, #20]
   2759c:	add	r7, r3, #1
   275a0:	sub	r4, r4, #48	; 0x30
   275a4:	cmp	ip, r7
   275a8:	asr	r5, r4, #31
   275ac:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   275b0:	ldrb	r1, [r3, #1]
   275b4:	sub	r3, r1, #48	; 0x30
   275b8:	cmp	r3, #9
   275bc:	movhi	sl, #0
   275c0:	movhi	lr, sl
   275c4:	bhi	27ef8 <grisu3_diy_fp_encode_double@@Base+0xf74>
   275c8:	add	fp, pc, #992	; 0x3e0
   275cc:	ldrd	sl, [fp]
   275d0:	add	lr, r7, #1
   275d4:	b	275e4 <grisu3_diy_fp_encode_double@@Base+0x660>
   275d8:	cmp	r5, fp
   275dc:	cmpeq	r4, sl
   275e0:	bhi	2777c <grisu3_diy_fp_encode_double@@Base+0x7f8>
   275e4:	lsl	r2, r5, #2
   275e8:	mov	r6, lr
   275ec:	lsl	r3, r4, #2
   275f0:	orr	r2, r2, r4, lsr #30
   275f4:	adds	r3, r3, r4
   275f8:	adc	r2, r2, r5
   275fc:	adds	r8, r3, r3
   27600:	adc	r9, r2, r2
   27604:	adds	r2, r8, r1
   27608:	adc	r3, r9, #0
   2760c:	subs	r4, r2, #48	; 0x30
   27610:	sbc	r5, r3, #0
   27614:	cmp	ip, lr
   27618:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2761c:	ldrb	r1, [lr]
   27620:	add	lr, lr, #1
   27624:	sub	r3, r1, #48	; 0x30
   27628:	cmp	r3, #9
   2762c:	bls	275d8 <grisu3_diy_fp_encode_double@@Base+0x654>
   27630:	mov	lr, #0
   27634:	sub	sl, r6, r7
   27638:	mov	r7, lr
   2763c:	sub	r3, r1, #49	; 0x31
   27640:	cmp	r3, #8
   27644:	bls	2783c <grisu3_diy_fp_encode_double@@Base+0x8b8>
   27648:	cmp	r1, #46	; 0x2e
   2764c:	beq	278b4 <grisu3_diy_fp_encode_double@@Base+0x930>
   27650:	orr	r1, r1, #32
   27654:	add	r7, r7, sl
   27658:	cmp	r1, #101	; 0x65
   2765c:	beq	27a68 <grisu3_diy_fp_encode_double@@Base+0xae4>
   27660:	orrs	r3, r4, r5
   27664:	mov	r9, r0
   27668:	ldr	r8, [sp, #16]
   2766c:	moveq	r2, #1
   27670:	movne	r2, #0
   27674:	cmn	r7, #324	; 0x144
   27678:	movge	r3, #0
   2767c:	movlt	r3, #1
   27680:	orrs	r3, r2, r3
   27684:	bne	277e0 <grisu3_diy_fp_encode_double@@Base+0x85c>
   27688:	movw	r3, #310	; 0x136
   2768c:	cmp	r7, r3
   27690:	bgt	2788c <grisu3_diy_fp_encode_double@@Base+0x908>
   27694:	movw	r3, #65535	; 0xffff
   27698:	movt	r3, #31
   2769c:	cmp	r5, r3
   276a0:	mvn	r2, #0
   276a4:	cmpeq	r4, r2
   276a8:	movls	r3, #1
   276ac:	movhi	r3, #0
   276b0:	cmp	r7, #22
   276b4:	movhi	r3, #0
   276b8:	andls	r3, r3, #1
   276bc:	cmp	r3, #0
   276c0:	bne	27b84 <grisu3_diy_fp_encode_double@@Base+0xc00>
   276c4:	mov	r3, sl
   276c8:	mov	r2, r7
   276cc:	str	lr, [sp]
   276d0:	mov	r0, r4
   276d4:	mov	r1, r5
   276d8:	str	r8, [sp, #4]
   276dc:	bl	26f84 <grisu3_diy_fp_encode_double@@Base>
   276e0:	cmp	r0, #0
   276e4:	bne	277e0 <grisu3_diy_fp_encode_double@@Base+0x85c>
   276e8:	mov	r0, r9
   276ec:	add	r1, sp, #44	; 0x2c
   276f0:	bl	1263c <strtod@plt>
   276f4:	ldr	r3, [sp, #44]	; 0x2c
   276f8:	vstr	d0, [r8]
   276fc:	cmp	r6, r3
   27700:	movcs	r6, r3
   27704:	mov	r0, r6
   27708:	add	sp, sp, #52	; 0x34
   2770c:	ldrd	r4, [sp]
   27710:	ldrd	r6, [sp, #8]
   27714:	ldrd	r8, [sp, #16]
   27718:	ldrd	sl, [sp, #24]
   2771c:	add	sp, sp, #32
   27720:	pop	{pc}		; (ldr pc, [sp], #4)
   27724:	mov	r2, #0
   27728:	mov	r3, r0
   2772c:	str	r2, [sp, #20]
   27730:	add	r7, r3, #1
   27734:	cmp	ip, r7
   27738:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2773c:	ldrb	r1, [r3, #1]
   27740:	orr	r2, r1, #32
   27744:	cmp	r2, #120	; 0x78
   27748:	beq	278ac <grisu3_diy_fp_encode_double@@Base+0x928>
   2774c:	cmp	r1, #48	; 0x30
   27750:	addeq	r3, r3, #2
   27754:	beq	27768 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   27758:	b	27b0c <grisu3_diy_fp_encode_double@@Base+0xb88>
   2775c:	ldrb	r1, [r3], #1
   27760:	cmp	r1, #48	; 0x30
   27764:	bne	27b0c <grisu3_diy_fp_encode_double@@Base+0xb88>
   27768:	cmp	ip, r3
   2776c:	mov	r7, r3
   27770:	bne	2775c <grisu3_diy_fp_encode_double@@Base+0x7d8>
   27774:	mov	r6, #0
   27778:	b	27704 <grisu3_diy_fp_encode_double@@Base+0x780>
   2777c:	cmp	r1, #52	; 0x34
   27780:	sub	sl, r6, r7
   27784:	movls	r3, #0
   27788:	movhi	r3, #1
   2778c:	adds	r4, r4, r3
   27790:	adc	r5, r5, #0
   27794:	cmp	r1, #48	; 0x30
   27798:	movne	r7, r6
   2779c:	movne	lr, #1
   277a0:	bne	27ef8 <grisu3_diy_fp_encode_double@@Base+0xf74>
   277a4:	add	r3, r6, #1
   277a8:	mov	r7, #0
   277ac:	b	277c0 <grisu3_diy_fp_encode_double@@Base+0x83c>
   277b0:	ldrb	r1, [r3]
   277b4:	add	r3, r3, #1
   277b8:	cmp	r1, #48	; 0x30
   277bc:	bne	2782c <grisu3_diy_fp_encode_double@@Base+0x8a8>
   277c0:	cmp	r3, ip
   277c4:	mov	r6, r3
   277c8:	add	r7, r7, #1
   277cc:	bne	277b0 <grisu3_diy_fp_encode_double@@Base+0x82c>
   277d0:	b	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   277d4:	vldr	d6, [pc, #476]	; 279b8 <grisu3_diy_fp_encode_double@@Base+0xa34>
   277d8:	vmul.f64	d7, d7, d6
   277dc:	vstr	d7, [r8]
   277e0:	ldr	r3, [sp, #20]
   277e4:	cmp	r3, #0
   277e8:	beq	27704 <grisu3_diy_fp_encode_double@@Base+0x780>
   277ec:	vldr	d7, [r8]
   277f0:	vneg.f64	d7, d7
   277f4:	vstr	d7, [r8]
   277f8:	b	27704 <grisu3_diy_fp_encode_double@@Base+0x780>
   277fc:	add	r3, r0, #1
   27800:	cmp	ip, r3
   27804:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27808:	ldrb	r4, [r0, #1]
   2780c:	cmp	r4, #48	; 0x30
   27810:	beq	278a0 <grisu3_diy_fp_encode_double@@Base+0x91c>
   27814:	sub	r2, r4, #49	; 0x31
   27818:	cmp	r2, #8
   2781c:	bhi	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27820:	mov	r2, #1
   27824:	str	r2, [sp, #20]
   27828:	b	2759c <grisu3_diy_fp_encode_double@@Base+0x618>
   2782c:	sub	r3, r1, #49	; 0x31
   27830:	mov	lr, #1
   27834:	cmp	r3, #8
   27838:	bhi	27648 <grisu3_diy_fp_encode_double@@Base+0x6c4>
   2783c:	add	r3, r6, #1
   27840:	add	lr, r7, #1
   27844:	cmp	ip, r3
   27848:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   2784c:	ldrb	r1, [r6, #1]
   27850:	sub	r2, r1, #48	; 0x30
   27854:	cmp	r2, #9
   27858:	bhi	27edc <grisu3_diy_fp_encode_double@@Base+0xf58>
   2785c:	sub	r8, r7, r6
   27860:	add	r3, r6, #2
   27864:	cmp	ip, r3
   27868:	add	r7, r8, r3
   2786c:	mov	r6, r3
   27870:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27874:	ldrb	r1, [r3], #1
   27878:	sub	r2, r1, #48	; 0x30
   2787c:	cmp	r2, #9
   27880:	bls	27864 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   27884:	mov	lr, #1
   27888:	b	27648 <grisu3_diy_fp_encode_double@@Base+0x6c4>
   2788c:	mov	r2, #0
   27890:	mov	r3, #0
   27894:	movt	r3, #32752	; 0x7ff0
   27898:	strd	r2, [r8]
   2789c:	b	277e0 <grisu3_diy_fp_encode_double@@Base+0x85c>
   278a0:	mov	r2, #1
   278a4:	str	r2, [sp, #20]
   278a8:	b	27730 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   278ac:	mov	r6, r0
   278b0:	b	27704 <grisu3_diy_fp_encode_double@@Base+0x780>
   278b4:	ldrb	r9, [r6, #1]
   278b8:	add	fp, r6, #1
   278bc:	sub	r3, r9, #48	; 0x30
   278c0:	cmp	r3, #9
   278c4:	bhi	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   278c8:	cmp	ip, fp
   278cc:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   278d0:	add	r3, pc, #216	; 0xd8
   278d4:	ldrd	r2, [r3]
   278d8:	cmp	r5, r3
   278dc:	cmpeq	r4, r2
   278e0:	bhi	27ee8 <grisu3_diy_fp_encode_double@@Base+0xf64>
   278e4:	add	r7, r6, r7
   278e8:	add	r6, r6, #2
   278ec:	strd	r2, [sp, #8]
   278f0:	add	r1, r7, #1
   278f4:	str	fp, [sp, #24]
   278f8:	mov	fp, r6
   278fc:	str	r0, [sp, #28]
   27900:	b	27914 <grisu3_diy_fp_encode_double@@Base+0x990>
   27904:	ldrd	r2, [sp, #8]
   27908:	cmp	r5, r3
   2790c:	cmpeq	r4, r2
   27910:	bhi	27e9c <grisu3_diy_fp_encode_double@@Base+0xf18>
   27914:	lsl	r2, r5, #2
   27918:	mov	r8, fp
   2791c:	sub	r0, r1, fp
   27920:	lsl	r3, r4, #2
   27924:	orr	r2, r2, r4, lsr #30
   27928:	adds	r3, r3, r4
   2792c:	adc	r2, r2, r5
   27930:	adds	r6, r3, r3
   27934:	adc	r7, r2, r2
   27938:	adds	r2, r6, r9
   2793c:	adc	r3, r7, #0
   27940:	subs	r4, r2, #48	; 0x30
   27944:	sbc	r5, r3, #0
   27948:	cmp	ip, fp
   2794c:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27950:	ldrb	r9, [fp]
   27954:	add	fp, fp, #1
   27958:	sub	r3, r9, #48	; 0x30
   2795c:	cmp	r3, #9
   27960:	bls	27904 <grisu3_diy_fp_encode_double@@Base+0x980>
   27964:	ldr	fp, [sp, #24]
   27968:	mov	r7, r0
   2796c:	ldr	r0, [sp, #28]
   27970:	sub	fp, r8, fp
   27974:	add	sl, sl, fp
   27978:	ldrb	r1, [r8]
   2797c:	cmp	r1, #48	; 0x30
   27980:	bne	27b18 <grisu3_diy_fp_encode_double@@Base+0xb94>
   27984:	sub	r3, r7, r8
   27988:	add	r8, r8, #1
   2798c:	b	2799c <grisu3_diy_fp_encode_double@@Base+0xa18>
   27990:	ldrb	r1, [r8], #1
   27994:	cmp	r1, #48	; 0x30
   27998:	bne	27b1c <grisu3_diy_fp_encode_double@@Base+0xb98>
   2799c:	cmp	ip, r8
   279a0:	add	r7, r3, r8
   279a4:	mov	r6, r8
   279a8:	bne	27990 <grisu3_diy_fp_encode_double@@Base+0xa0c>
   279ac:	b	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   279b0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   279b4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   279b8:	usatle	lr, #2, r0, asr #30
   279bc:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   279c0:	ldmvc	r5!, {r6, sl, fp, pc}
   279c4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   279c8:	addsvs	r3, r1, r0, lsl #26
   279cc:	mvnmi	r5, #228, 16	; 0xe40000
   279d0:	strbvs	ip, [lr, -r0, lsl #16]
   279d4:			; <UNDEFINED> instruction: 0x43abc16d
   279d8:	ldrbhi	sl, [r8]
   279dc:	cmnmi	r6, #1459617792	; 0x57000000
   279e0:	strbcc	r8, [r0, r0]!
   279e4:	movtmi	ip, #4985	; 0x1379
   279e8:	andeq	r0, r0, r0
   279ec:	sbcmi	r8, r3, r0, lsl #16
   279f0:	andeq	r0, r0, r0
   279f4:	addmi	r4, pc, r0
   279f8:	andeq	r0, r0, r0
   279fc:	smlawbmi	lr, r0, r4, r8
   27a00:	andeq	r0, r0, r0
   27a04:	orrsmi	sp, r7, r4, lsl #15
   27a08:	andcs	r0, r0, r0
   27a0c:	andmi	sl, r2, #95	; 0x5f
   27a10:	andge	r0, r0, #0
   27a14:	rsbmi	r1, sp, #148, 20	; 0x94000
   27a18:	cdpne	0, 9, cr0, cr0, cr0, {0}
   27a1c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   27a20:	ldrtcs	r0, [r4], -r0
   27a24:	movwmi	r6, #52213	; 0xcbf5
   27a28:	strb	r0, [r0, #-0]
   27a2c:	adcmi	r3, r2, #156	; 0x9c
   27a30:	stmda	r0, {}	; <UNPREDICTABLE>
   27a34:	eorsmi	r4, r7, #7733248	; 0x760000
   27a38:	andeq	r0, r0, r0
   27a3c:	bicmi	ip, sp, r5, ror #26
   27a40:	andeq	r0, r0, r0
   27a44:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   27a48:	andeq	r0, r0, r0
   27a4c:	rscsmi	r6, r8, r0, lsl #20
   27a50:	andeq	r0, r0, r0
   27a54:	subsmi	r0, r9, r0
   27a58:			; <UNDEFINED> instruction: 0x064dd592
   27a5c:	strmi	pc, [r0], #207	; 0xcf
   27a60:	andeq	r0, r0, r0
   27a64:	eormi	r0, r4, r0
   27a68:	sub	r3, ip, r6
   27a6c:	cmp	r3, #1
   27a70:	ble	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27a74:	ldrb	r8, [r6, #1]
   27a78:	cmp	r8, #43	; 0x2b
   27a7c:	beq	27e60 <grisu3_diy_fp_encode_double@@Base+0xedc>
   27a80:	cmp	r8, #45	; 0x2d
   27a84:	beq	27e84 <grisu3_diy_fp_encode_double@@Base+0xf00>
   27a88:	add	r2, r6, #1
   27a8c:	mov	fp, #0
   27a90:	sub	r8, r8, #48	; 0x30
   27a94:	uxtb	r3, r8
   27a98:	cmp	r3, #9
   27a9c:	bhi	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27aa0:	add	r6, r2, #1
   27aa4:	mov	r3, r8
   27aa8:	cmp	ip, r6
   27aac:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27ab0:	ldrb	r1, [r2, #1]
   27ab4:	sub	r9, r1, #48	; 0x30
   27ab8:	cmp	r9, #9
   27abc:	bhi	27b70 <grisu3_diy_fp_encode_double@@Base+0xbec>
   27ac0:	add	r2, r2, #2
   27ac4:	add	r8, r3, r3, lsl #2
   27ac8:	cmp	r3, #32768	; 0x8000
   27acc:	mov	r6, r2
   27ad0:	addlt	r3, r1, r8, lsl #1
   27ad4:	sublt	r3, r3, #48	; 0x30
   27ad8:	cmp	ip, r2
   27adc:	beq	27e78 <grisu3_diy_fp_encode_double@@Base+0xef4>
   27ae0:	ldrb	r1, [r2]
   27ae4:	add	r2, r2, #1
   27ae8:	sub	r8, r1, #48	; 0x30
   27aec:	cmp	r8, #9
   27af0:	bls	27ac4 <grisu3_diy_fp_encode_double@@Base+0xb40>
   27af4:	cmp	fp, #0
   27af8:	beq	27b7c <grisu3_diy_fp_encode_double@@Base+0xbf8>
   27afc:	cmp	ip, r6
   27b00:	sub	r7, r7, r3
   27b04:	bne	27660 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   27b08:	b	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27b0c:	mov	r4, #0
   27b10:	mov	r5, #0
   27b14:	b	275b4 <grisu3_diy_fp_encode_double@@Base+0x630>
   27b18:	mov	r6, r8
   27b1c:	sub	r3, r1, #49	; 0x31
   27b20:	cmp	r3, #8
   27b24:	bhi	27650 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   27b28:	add	r3, r6, #1
   27b2c:	cmp	ip, r3
   27b30:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27b34:	ldrb	r1, [r6, #1]
   27b38:	sub	r2, r1, #48	; 0x30
   27b3c:	cmp	r2, #9
   27b40:	bhi	27ef0 <grisu3_diy_fp_encode_double@@Base+0xf6c>
   27b44:	add	r3, r6, #2
   27b48:	cmp	ip, r3
   27b4c:	mov	r6, r3
   27b50:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27b54:	ldrb	r1, [r3]
   27b58:	add	r3, r3, #1
   27b5c:	sub	r2, r1, #48	; 0x30
   27b60:	cmp	r2, #9
   27b64:	bls	27b48 <grisu3_diy_fp_encode_double@@Base+0xbc4>
   27b68:	mov	lr, #1
   27b6c:	b	27650 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   27b70:	cmp	fp, #0
   27b74:	subne	r7, r7, r8
   27b78:	bne	27660 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   27b7c:	add	r7, r7, r3
   27b80:	b	27660 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   27b84:	mov	r0, r4
   27b88:	mov	r1, r5
   27b8c:	bl	2d7cc <flatcc_json_parser_struct_as_root@@Base+0x42c>
   27b90:	sub	r3, r7, sl
   27b94:	vmov	d7, r0, r1
   27b98:	add	r3, r3, #22
   27b9c:	cmp	r3, #44	; 0x2c
   27ba0:	ldrls	pc, [pc, r3, lsl #2]
   27ba4:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27ba8:	andeq	r7, r2, ip, lsr lr
   27bac:	andeq	r7, r2, r4, asr lr
   27bb0:	andeq	r7, r2, r8, asr #28
   27bb4:	andeq	r7, r2, r0, lsr lr
   27bb8:	andeq	r7, r2, r4, lsr #28
   27bbc:	andeq	r7, r2, r8, lsl lr
   27bc0:	andeq	r7, r2, ip, lsl #28
   27bc4:	andeq	r7, r2, r0, lsl #28
   27bc8:	strdeq	r7, [r2], -r4
   27bcc:	andeq	r7, r2, r8, ror #27
   27bd0:	ldrdeq	r7, [r2], -ip
   27bd4:	ldrdeq	r7, [r2], -r0
   27bd8:	andeq	r7, r2, r4, asr #27
   27bdc:			; <UNDEFINED> instruction: 0x00027db8
   27be0:	andeq	r7, r2, ip, lsr #27
   27be4:	andeq	r7, r2, r0, lsr #27
   27be8:	muleq	r2, r4, sp
   27bec:	andeq	r7, r2, r8, lsl #27
   27bf0:	andeq	r7, r2, ip, ror sp
   27bf4:	andeq	r7, r2, r0, ror sp
   27bf8:	andeq	r7, r2, r4, ror #26
   27bfc:	andeq	r7, r2, r8, asr sp
   27c00:	ldrdeq	r7, [r2], -ip
   27c04:	andeq	r7, r2, r0, asr #26
   27c08:	andeq	r7, r2, r4, lsr sp
   27c0c:	andeq	r7, r2, r8, lsr #26
   27c10:	andeq	r7, r2, ip, lsl sp
   27c14:	andeq	r7, r2, r0, lsl sp
   27c18:	andeq	r7, r2, r4, lsl #26
   27c1c:	strdeq	r7, [r2], -r8
   27c20:	andeq	r7, r2, ip, ror #25
   27c24:	andeq	r7, r2, r0, ror #25
   27c28:	ldrdeq	r7, [r2], -r4
   27c2c:	andeq	r7, r2, r8, asr #25
   27c30:			; <UNDEFINED> instruction: 0x00027cbc
   27c34:			; <UNDEFINED> instruction: 0x00027cb0
   27c38:	andeq	r7, r2, r4, lsr #25
   27c3c:	muleq	r2, r8, ip
   27c40:	andeq	r7, r2, ip, lsl #25
   27c44:	andeq	r7, r2, r0, lsl #25
   27c48:	andeq	r7, r2, r4, ror ip
   27c4c:	andeq	r7, r2, r8, ror #24
   27c50:	andeq	r7, r2, ip, asr ip
   27c54:	ldrdeq	r7, [r2], -r4
   27c58:	andeq	r7, r2, ip, asr #26
   27c5c:	vldr	d6, [pc, #-676]	; 279c0 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   27c60:	vmul.f64	d7, d7, d6
   27c64:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27c68:	vldr	d6, [pc, #-680]	; 279c8 <grisu3_diy_fp_encode_double@@Base+0xa44>
   27c6c:	vmul.f64	d7, d7, d6
   27c70:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27c74:	vldr	d6, [pc, #-684]	; 279d0 <grisu3_diy_fp_encode_double@@Base+0xa4c>
   27c78:	vmul.f64	d7, d7, d6
   27c7c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27c80:	vldr	d6, [pc, #-688]	; 279d8 <grisu3_diy_fp_encode_double@@Base+0xa54>
   27c84:	vmul.f64	d7, d7, d6
   27c88:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27c8c:	vldr	d6, [pc, #-692]	; 279e0 <grisu3_diy_fp_encode_double@@Base+0xa5c>
   27c90:	vmul.f64	d7, d7, d6
   27c94:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27c98:	vldr	d6, [pc, #-640]	; 27a20 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   27c9c:	vmul.f64	d7, d7, d6
   27ca0:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27ca4:	vldr	d6, [pc, #-660]	; 27a18 <grisu3_diy_fp_encode_double@@Base+0xa94>
   27ca8:	vmul.f64	d7, d7, d6
   27cac:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27cb0:	vldr	d6, [pc, #-656]	; 27a28 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   27cb4:	vmul.f64	d7, d7, d6
   27cb8:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27cbc:	vldr	d6, [pc, #-692]	; 27a10 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   27cc0:	vmul.f64	d7, d7, d6
   27cc4:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27cc8:	vldr	d6, [pc, #-672]	; 27a30 <grisu3_diy_fp_encode_double@@Base+0xaac>
   27ccc:	vmul.f64	d7, d7, d6
   27cd0:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27cd4:	vldr	d6, [pc, #-724]	; 27a08 <grisu3_diy_fp_encode_double@@Base+0xa84>
   27cd8:	vmul.f64	d7, d7, d6
   27cdc:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27ce0:	vldr	d6, [pc, #-688]	; 27a38 <grisu3_diy_fp_encode_double@@Base+0xab4>
   27ce4:	vmul.f64	d7, d7, d6
   27ce8:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27cec:	vldr	d6, [pc, #-756]	; 27a00 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   27cf0:	vmul.f64	d7, d7, d6
   27cf4:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27cf8:	vldr	d6, [pc, #-704]	; 27a40 <grisu3_diy_fp_encode_double@@Base+0xabc>
   27cfc:	vmul.f64	d7, d7, d6
   27d00:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d04:	vldr	d6, [pc, #-788]	; 279f8 <grisu3_diy_fp_encode_double@@Base+0xa74>
   27d08:	vmul.f64	d7, d7, d6
   27d0c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d10:	vldr	d6, [pc, #-720]	; 27a48 <grisu3_diy_fp_encode_double@@Base+0xac4>
   27d14:	vmul.f64	d7, d7, d6
   27d18:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d1c:	vldr	d6, [pc, #-828]	; 279e8 <grisu3_diy_fp_encode_double@@Base+0xa64>
   27d20:	vmul.f64	d7, d7, d6
   27d24:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d28:	vldr	d6, [pc, #-832]	; 279f0 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   27d2c:	vmul.f64	d7, d7, d6
   27d30:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d34:	vldr	d6, [pc, #-748]	; 27a50 <grisu3_diy_fp_encode_double@@Base+0xacc>
   27d38:	vmul.f64	d7, d7, d6
   27d3c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d40:	vldr	d6, [pc, #-744]	; 27a60 <grisu3_diy_fp_encode_double@@Base+0xadc>
   27d44:	vmul.f64	d7, d7, d6
   27d48:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d4c:	vldr	d6, [pc, #-764]	; 27a58 <grisu3_diy_fp_encode_double@@Base+0xad4>
   27d50:	vmul.f64	d7, d7, d6
   27d54:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d58:	vldr	d6, [pc, #-768]	; 27a60 <grisu3_diy_fp_encode_double@@Base+0xadc>
   27d5c:	vdiv.f64	d7, d7, d6
   27d60:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d64:	vldr	d6, [pc, #-796]	; 27a50 <grisu3_diy_fp_encode_double@@Base+0xacc>
   27d68:	vdiv.f64	d7, d7, d6
   27d6c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d70:	vldr	d6, [pc, #-904]	; 279f0 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   27d74:	vdiv.f64	d7, d7, d6
   27d78:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d7c:	vldr	d6, [pc, #-924]	; 279e8 <grisu3_diy_fp_encode_double@@Base+0xa64>
   27d80:	vdiv.f64	d7, d7, d6
   27d84:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d88:	vldr	d6, [pc, #-840]	; 27a48 <grisu3_diy_fp_encode_double@@Base+0xac4>
   27d8c:	vdiv.f64	d7, d7, d6
   27d90:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27d94:	vldr	d6, [pc, #-932]	; 279f8 <grisu3_diy_fp_encode_double@@Base+0xa74>
   27d98:	vdiv.f64	d7, d7, d6
   27d9c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27da0:	vldr	d6, [pc, #-872]	; 27a40 <grisu3_diy_fp_encode_double@@Base+0xabc>
   27da4:	vdiv.f64	d7, d7, d6
   27da8:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27dac:	vldr	d6, [pc, #-948]	; 27a00 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   27db0:	vdiv.f64	d7, d7, d6
   27db4:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27db8:	vldr	d6, [pc, #-904]	; 27a38 <grisu3_diy_fp_encode_double@@Base+0xab4>
   27dbc:	vdiv.f64	d7, d7, d6
   27dc0:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27dc4:	vldr	d6, [pc, #-964]	; 27a08 <grisu3_diy_fp_encode_double@@Base+0xa84>
   27dc8:	vdiv.f64	d7, d7, d6
   27dcc:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27dd0:	vldr	d6, [pc, #-936]	; 27a30 <grisu3_diy_fp_encode_double@@Base+0xaac>
   27dd4:	vdiv.f64	d7, d7, d6
   27dd8:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27ddc:	vldr	d6, [pc, #-980]	; 27a10 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   27de0:	vdiv.f64	d7, d7, d6
   27de4:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27de8:	vldr	d6, [pc, #-968]	; 27a28 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   27dec:	vdiv.f64	d7, d7, d6
   27df0:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27df4:	vldr	d6, [pc, #-996]	; 27a18 <grisu3_diy_fp_encode_double@@Base+0xa94>
   27df8:	vdiv.f64	d7, d7, d6
   27dfc:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e00:	vldr	d6, [pc, #-1000]	; 27a20 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   27e04:	vdiv.f64	d7, d7, d6
   27e08:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e0c:	vldr	d6, [pc, #244]	; 27f08 <grisu3_diy_fp_encode_double@@Base+0xf84>
   27e10:	vdiv.f64	d7, d7, d6
   27e14:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e18:	vldr	d6, [pc, #240]	; 27f10 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   27e1c:	vdiv.f64	d7, d7, d6
   27e20:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e24:	vldr	d6, [pc, #236]	; 27f18 <grisu3_diy_fp_encode_double@@Base+0xf94>
   27e28:	vdiv.f64	d7, d7, d6
   27e2c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e30:	vldr	d6, [pc, #232]	; 27f20 <grisu3_diy_fp_encode_double@@Base+0xf9c>
   27e34:	vdiv.f64	d7, d7, d6
   27e38:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e3c:	vldr	d6, [pc, #228]	; 27f28 <grisu3_diy_fp_encode_double@@Base+0xfa4>
   27e40:	vdiv.f64	d7, d7, d6
   27e44:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e48:	vldr	d6, [pc, #224]	; 27f30 <grisu3_diy_fp_encode_double@@Base+0xfac>
   27e4c:	vdiv.f64	d7, d7, d6
   27e50:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e54:	vldr	d6, [pc, #220]	; 27f38 <grisu3_diy_fp_encode_double@@Base+0xfb4>
   27e58:	vdiv.f64	d7, d7, d6
   27e5c:	b	277dc <grisu3_diy_fp_encode_double@@Base+0x858>
   27e60:	add	r2, r6, #2
   27e64:	cmp	ip, r2
   27e68:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27e6c:	ldrb	r8, [r6, #2]
   27e70:	mov	fp, #0
   27e74:	b	27a90 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   27e78:	cmp	fp, #0
   27e7c:	bne	27afc <grisu3_diy_fp_encode_double@@Base+0xb78>
   27e80:	b	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27e84:	add	r2, r6, #2
   27e88:	cmp	ip, r2
   27e8c:	beq	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27e90:	ldrb	r8, [r6, #2]
   27e94:	mov	fp, #1
   27e98:	b	27a90 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   27e9c:	ldr	fp, [sp, #24]
   27ea0:	mov	r7, r0
   27ea4:	ldr	r0, [sp, #28]
   27ea8:	sub	fp, r8, fp
   27eac:	add	sl, sl, fp
   27eb0:	cmp	lr, #0
   27eb4:	bne	27978 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   27eb8:	cmp	r9, #52	; 0x34
   27ebc:	movls	r9, #0
   27ec0:	movhi	r9, #1
   27ec4:	adds	r4, r4, r9
   27ec8:	adc	r5, r5, #0
   27ecc:	cmp	ip, r8
   27ed0:	movne	lr, #1
   27ed4:	bne	27978 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   27ed8:	b	27774 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   27edc:	mov	r7, lr
   27ee0:	mov	r6, r3
   27ee4:	b	27884 <grisu3_diy_fp_encode_double@@Base+0x900>
   27ee8:	mov	r8, fp
   27eec:	b	27eb0 <grisu3_diy_fp_encode_double@@Base+0xf2c>
   27ef0:	mov	r6, r3
   27ef4:	b	27b68 <grisu3_diy_fp_encode_double@@Base+0xbe4>
   27ef8:	mov	r6, r7
   27efc:	mov	r7, #0
   27f00:	b	2763c <grisu3_diy_fp_encode_double@@Base+0x6b8>
   27f04:	nop	{0}
   27f08:	strbcc	r8, [r0, r0]!
   27f0c:	movtmi	ip, #4985	; 0x1379
   27f10:	ldrbhi	sl, [r8]
   27f14:	cmnmi	r6, #1459617792	; 0x57000000
   27f18:	strbvs	ip, [lr, -r0, lsl #16]
   27f1c:			; <UNDEFINED> instruction: 0x43abc16d
   27f20:	addsvs	r3, r1, r0, lsl #26
   27f24:	mvnmi	r5, #228, 16	; 0xe40000
   27f28:			; <UNDEFINED> instruction: 0x064dd592
   27f2c:	strmi	pc, [r0], #207	; 0xcf
   27f30:	ldmvc	r5!, {r6, sl, fp, pc}
   27f34:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   27f38:	usatle	lr, #2, r0, asr #30
   27f3c:	strbmi	r1, [fp], #-2788	; 0xfffff51c

00027f40 <flatcc_json_parser_error_string@@Base>:
   27f40:	cmp	r0, #34	; 0x22
   27f44:	bhi	27f5c <flatcc_json_parser_error_string@@Base+0x1c>
   27f48:	movw	r3, #59640	; 0xe8f8
   27f4c:	movt	r3, #2
   27f50:	add	r3, r3, r0, lsl #2
   27f54:	ldr	r0, [r3, #1476]	; 0x5c4
   27f58:	bx	lr
   27f5c:	movw	r0, #62176	; 0xf2e0
   27f60:	movt	r0, #2
   27f64:	bx	lr

00027f68 <flatcc_json_parser_set_error@@Base>:
   27f68:	ldr	ip, [r0, #24]
   27f6c:	cmp	ip, #0
   27f70:	bne	27f8c <flatcc_json_parser_set_error@@Base+0x24>
   27f74:	ldr	ip, [r0, #4]
   27f78:	str	r3, [r0, #24]
   27f7c:	str	r1, [r0, #36]	; 0x24
   27f80:	sub	r1, r1, ip
   27f84:	add	r1, r1, #1
   27f88:	str	r1, [r0, #20]
   27f8c:	mov	r0, r2
   27f90:	bx	lr

00027f94 <flatcc_json_parser_string_part@@Base>:
   27f94:	cmp	r1, r2
   27f98:	push	{lr}		; (str lr, [sp, #-4]!)
   27f9c:	mov	lr, r0
   27fa0:	beq	28048 <flatcc_json_parser_string_part@@Base+0xb4>
   27fa4:	ldrb	r3, [r1]
   27fa8:	cmp	r3, #34	; 0x22
   27fac:	cmpne	r3, #31
   27fb0:	movhi	ip, #1
   27fb4:	movls	ip, #0
   27fb8:	cmp	r3, #92	; 0x5c
   27fbc:	moveq	ip, #0
   27fc0:	andne	ip, ip, #1
   27fc4:	cmp	ip, #0
   27fc8:	beq	28064 <flatcc_json_parser_string_part@@Base+0xd0>
   27fcc:	add	r1, r1, #1
   27fd0:	cmp	r1, r2
   27fd4:	mov	r0, r1
   27fd8:	beq	2804c <flatcc_json_parser_string_part@@Base+0xb8>
   27fdc:	ldrb	r3, [r1], #1
   27fe0:	cmp	r3, #34	; 0x22
   27fe4:	cmpne	r3, #31
   27fe8:	movhi	ip, #1
   27fec:	movls	ip, #0
   27ff0:	cmp	r3, #92	; 0x5c
   27ff4:	moveq	ip, #0
   27ff8:	andne	ip, ip, #1
   27ffc:	cmp	ip, #0
   28000:	bne	27fd0 <flatcc_json_parser_string_part@@Base+0x3c>
   28004:	cmp	r3, #31
   28008:	bls	28010 <flatcc_json_parser_string_part@@Base+0x7c>
   2800c:	pop	{pc}		; (ldr pc, [sp], #4)
   28010:	ldr	r3, [lr, #24]
   28014:	cmp	r3, #0
   28018:	bne	28040 <flatcc_json_parser_string_part@@Base+0xac>
   2801c:	ldr	r3, [lr, #4]
   28020:	mov	r1, #17
   28024:	sub	r3, r0, r3
   28028:	str	r1, [lr, #24]
   2802c:	add	r3, r3, #1
   28030:	str	r3, [lr, #20]
   28034:	str	r0, [lr, #36]	; 0x24
   28038:	mov	r0, r2
   2803c:	pop	{pc}		; (ldr pc, [sp], #4)
   28040:	mov	r0, r2
   28044:	pop	{pc}		; (ldr pc, [sp], #4)
   28048:	mov	r0, r2
   2804c:	ldr	r3, [lr, #24]
   28050:	cmp	r3, #0
   28054:	bne	28040 <flatcc_json_parser_string_part@@Base+0xac>
   28058:	mov	r1, #20
   2805c:	ldr	r3, [lr, #4]
   28060:	b	28024 <flatcc_json_parser_string_part@@Base+0x90>
   28064:	mov	r0, r1
   28068:	b	28004 <flatcc_json_parser_string_part@@Base+0x70>

0002806c <flatcc_json_parser_space_ext@@Base>:
   2806c:	cmp	r1, r2
   28070:	beq	28128 <flatcc_json_parser_space_ext@@Base+0xbc>
   28074:	ldrb	ip, [r1]
   28078:	cmp	ip, #32
   2807c:	bne	280a8 <flatcc_json_parser_space_ext@@Base+0x3c>
   28080:	add	r3, r1, #1
   28084:	b	28094 <flatcc_json_parser_space_ext@@Base+0x28>
   28088:	ldrb	ip, [r3], #1
   2808c:	cmp	ip, #32
   28090:	bne	280a8 <flatcc_json_parser_space_ext@@Base+0x3c>
   28094:	cmp	r3, r2
   28098:	mov	r1, r3
   2809c:	bne	28088 <flatcc_json_parser_space_ext@@Base+0x1c>
   280a0:	mov	r0, r1
   280a4:	bx	lr
   280a8:	cmp	ip, #32
   280ac:	bhi	280a0 <flatcc_json_parser_space_ext@@Base+0x34>
   280b0:	sub	ip, ip, #9
   280b4:	cmp	ip, #23
   280b8:	ldrls	pc, [pc, ip, lsl #2]
   280bc:	b	2818c <flatcc_json_parser_space_ext@@Base+0x120>
   280c0:	andeq	r8, r2, r4, lsl #3
   280c4:	andeq	r8, r2, r8, asr r1
   280c8:	andeq	r8, r2, ip, lsl #3
   280cc:	andeq	r8, r2, ip, lsl #3
   280d0:	andeq	r8, r2, r4, lsr r1
   280d4:	andeq	r8, r2, ip, lsl #3
   280d8:	andeq	r8, r2, ip, lsl #3
   280dc:	andeq	r8, r2, ip, lsl #3
   280e0:	andeq	r8, r2, ip, lsl #3
   280e4:	andeq	r8, r2, ip, lsl #3
   280e8:	andeq	r8, r2, ip, lsl #3
   280ec:	andeq	r8, r2, ip, lsl #3
   280f0:	andeq	r8, r2, ip, lsl #3
   280f4:	andeq	r8, r2, ip, lsl #3
   280f8:	andeq	r8, r2, ip, lsl #3
   280fc:	andeq	r8, r2, ip, lsl #3
   28100:	andeq	r8, r2, ip, lsl #3
   28104:	andeq	r8, r2, ip, lsl #3
   28108:	andeq	r8, r2, ip, lsl #3
   2810c:	andeq	r8, r2, ip, lsl #3
   28110:	andeq	r8, r2, ip, lsl #3
   28114:	andeq	r8, r2, ip, lsl #3
   28118:	andeq	r8, r2, ip, lsl #3
   2811c:	andeq	r8, r2, r0, lsr #2
   28120:	cmp	r2, r1
   28124:	bne	28074 <flatcc_json_parser_space_ext@@Base+0x8>
   28128:	mov	r1, r2
   2812c:	mov	r0, r1
   28130:	bx	lr
   28134:	sub	r3, r2, r1
   28138:	add	ip, r1, #1
   2813c:	cmp	r3, #1
   28140:	ble	28150 <flatcc_json_parser_space_ext@@Base+0xe4>
   28144:	ldrb	r3, [r1, #1]
   28148:	cmp	r3, #10
   2814c:	addeq	ip, r1, #2
   28150:	mov	r1, ip
   28154:	b	2815c <flatcc_json_parser_space_ext@@Base+0xf0>
   28158:	add	r1, r1, #1
   2815c:	ldr	r3, [r0, #16]
   28160:	str	r1, [r0, #4]
   28164:	add	r3, r3, #1
   28168:	str	r3, [r0, #16]
   2816c:	cmp	r2, r1
   28170:	beq	280a0 <flatcc_json_parser_space_ext@@Base+0x34>
   28174:	ldrb	ip, [r1]
   28178:	cmp	ip, #32
   2817c:	bls	280b0 <flatcc_json_parser_space_ext@@Base+0x44>
   28180:	b	280a0 <flatcc_json_parser_space_ext@@Base+0x34>
   28184:	add	r1, r1, #1
   28188:	b	2816c <flatcc_json_parser_space_ext@@Base+0x100>
   2818c:	ldr	r3, [r0, #24]
   28190:	cmp	r3, #0
   28194:	bne	28128 <flatcc_json_parser_space_ext@@Base+0xbc>
   28198:	ldr	r3, [r0, #4]
   2819c:	mov	ip, #5
   281a0:	str	r1, [r0, #36]	; 0x24
   281a4:	str	ip, [r0, #24]
   281a8:	sub	r3, r1, r3
   281ac:	mov	r1, r2
   281b0:	add	r3, r3, #1
   281b4:	str	r3, [r0, #20]
   281b8:	mov	r0, r1
   281bc:	bx	lr
   281c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   281c4:	mov	r5, r0
   281c8:	mov	ip, #0
   281cc:	strd	r6, [sp, #8]
   281d0:	mov	r4, r2
   281d4:	strd	r8, [sp, #16]
   281d8:	mov	r8, r3
   281dc:	strd	sl, [sp, #24]
   281e0:	mov	sl, r1
   281e4:	str	lr, [sp, #32]
   281e8:	sub	sp, sp, #28
   281ec:	ldrh	r0, [sp, #68]	; 0x44
   281f0:	ldr	r7, [sp, #64]	; 0x40
   281f4:	str	r0, [sp, #12]
   281f8:	ldr	r0, [r5]
   281fc:	str	ip, [sp, #20]
   28200:	bl	23048 <flatcc_builder_start_offset_vector@@Base>
   28204:	cmp	r0, #0
   28208:	beq	28260 <flatcc_json_parser_space_ext@@Base+0x1f4>
   2820c:	ldr	r3, [r5, #24]
   28210:	cmp	r3, #0
   28214:	beq	2823c <flatcc_json_parser_space_ext@@Base+0x1d0>
   28218:	mov	fp, r4
   2821c:	mov	r0, fp
   28220:	add	sp, sp, #28
   28224:	ldrd	r4, [sp]
   28228:	ldrd	r6, [sp, #8]
   2822c:	ldrd	r8, [sp, #16]
   28230:	ldrd	sl, [sp, #24]
   28234:	add	sp, sp, #32
   28238:	pop	{pc}		; (ldr pc, [sp], #4)
   2823c:	ldr	r2, [r5, #4]
   28240:	mov	r1, #33	; 0x21
   28244:	mov	fp, r4
   28248:	str	sl, [r5, #36]	; 0x24
   2824c:	str	r1, [r5, #24]
   28250:	sub	sl, sl, r2
   28254:	add	sl, sl, #1
   28258:	str	sl, [r5, #20]
   2825c:	b	2821c <flatcc_json_parser_space_ext@@Base+0x1b0>
   28260:	cmp	sl, r4
   28264:	beq	28274 <flatcc_json_parser_space_ext@@Base+0x208>
   28268:	ldrb	r3, [sl]
   2826c:	cmp	r3, #91	; 0x5b
   28270:	beq	282f8 <flatcc_json_parser_space_ext@@Base+0x28c>
   28274:	ldr	r6, [r5, #24]
   28278:	cmp	r6, #0
   2827c:	beq	282d8 <flatcc_json_parser_space_ext@@Base+0x26c>
   28280:	mov	r6, #0
   28284:	cmp	r7, r6
   28288:	moveq	sl, r4
   2828c:	bne	28218 <flatcc_json_parser_space_ext@@Base+0x1ac>
   28290:	mov	r1, r8
   28294:	ldr	r0, [r5]
   28298:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2829c:	mov	r1, r0
   282a0:	ldr	r0, [r5]
   282a4:	bl	2491c <flatcc_builder_end_offset_vector_for_unions@@Base>
   282a8:	cmp	r0, #0
   282ac:	str	r0, [sp, #20]
   282b0:	beq	2820c <flatcc_json_parser_space_ext@@Base+0x1a0>
   282b4:	ldr	r0, [r5]
   282b8:	ldr	r1, [sp, #12]
   282bc:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   282c0:	cmp	r0, #0
   282c4:	beq	2820c <flatcc_json_parser_space_ext@@Base+0x1a0>
   282c8:	ldr	r2, [sp, #20]
   282cc:	mov	fp, sl
   282d0:	str	r2, [r0]
   282d4:	b	2821c <flatcc_json_parser_space_ext@@Base+0x1b0>
   282d8:	ldr	r3, [r5, #4]
   282dc:	mov	r2, #22
   282e0:	str	sl, [r5, #36]	; 0x24
   282e4:	str	r2, [r5, #24]
   282e8:	sub	sl, sl, r3
   282ec:	add	sl, sl, #1
   282f0:	str	sl, [r5, #20]
   282f4:	b	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   282f8:	add	r9, sl, #1
   282fc:	sub	r3, r4, r9
   28300:	cmp	r3, #1
   28304:	ble	28318 <flatcc_json_parser_space_ext@@Base+0x2ac>
   28308:	ldrb	r1, [sl, #1]
   2830c:	cmp	r1, #32
   28310:	bhi	28934 <flatcc_json_parser_space_ext@@Base+0x8c8>
   28314:	beq	28924 <flatcc_json_parser_space_ext@@Base+0x8b8>
   28318:	cmp	r4, r9
   2831c:	beq	2834c <flatcc_json_parser_space_ext@@Base+0x2e0>
   28320:	ldrb	r1, [r9]
   28324:	cmp	r1, #32
   28328:	bne	287bc <flatcc_json_parser_space_ext@@Base+0x750>
   2832c:	add	r3, r9, #1
   28330:	b	28340 <flatcc_json_parser_space_ext@@Base+0x2d4>
   28334:	ldrb	r1, [r3], #1
   28338:	cmp	r1, #32
   2833c:	bne	287bc <flatcc_json_parser_space_ext@@Base+0x750>
   28340:	cmp	r4, r3
   28344:	mov	r9, r3
   28348:	bne	28334 <flatcc_json_parser_space_ext@@Base+0x2c8>
   2834c:	cmp	r7, #0
   28350:	beq	285d0 <flatcc_json_parser_space_ext@@Base+0x564>
   28354:	mov	r6, #0
   28358:	add	sl, sp, #20
   2835c:	mov	r1, r8
   28360:	ldr	r0, [r5]
   28364:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   28368:	ldrb	r3, [r0, r6]
   2836c:	mov	r1, r9
   28370:	mov	r2, r4
   28374:	mov	r0, r5
   28378:	str	sl, [sp]
   2837c:	ldr	ip, [sp, #72]	; 0x48
   28380:	blx	ip
   28384:	cmp	r4, r0
   28388:	mov	fp, r0
   2838c:	beq	2821c <flatcc_json_parser_space_ext@@Base+0x1b0>
   28390:	mov	r1, #1
   28394:	ldr	r0, [r5]
   28398:	bl	2259c <flatcc_builder_extend_offset_vector@@Base>
   2839c:	cmp	r0, #0
   283a0:	beq	28908 <flatcc_json_parser_space_ext@@Base+0x89c>
   283a4:	ldr	r2, [sp, #20]
   283a8:	sub	r1, r4, fp
   283ac:	cmp	r1, #1
   283b0:	str	r2, [r0]
   283b4:	ble	283c8 <flatcc_json_parser_space_ext@@Base+0x35c>
   283b8:	ldrb	r2, [fp]
   283bc:	cmp	r2, #32
   283c0:	bhi	283e8 <flatcc_json_parser_space_ext@@Base+0x37c>
   283c4:	beq	28464 <flatcc_json_parser_space_ext@@Base+0x3f8>
   283c8:	mov	r1, fp
   283cc:	mov	r2, r4
   283d0:	mov	r0, r5
   283d4:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   283d8:	mov	fp, r0
   283dc:	cmp	r4, fp
   283e0:	beq	28428 <flatcc_json_parser_space_ext@@Base+0x3bc>
   283e4:	ldrb	r2, [fp]
   283e8:	cmp	r2, #44	; 0x2c
   283ec:	beq	28478 <flatcc_json_parser_space_ext@@Base+0x40c>
   283f0:	cmp	r2, #93	; 0x5d
   283f4:	add	r6, r6, #1
   283f8:	beq	28648 <flatcc_json_parser_space_ext@@Base+0x5dc>
   283fc:	ldr	r2, [r5, #24]
   28400:	cmp	r2, #0
   28404:	bne	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   28408:	ldr	r2, [r5, #4]
   2840c:	mov	r1, #9
   28410:	sub	r3, fp, r2
   28414:	str	r1, [r5, #24]
   28418:	add	r3, r3, #1
   2841c:	str	r3, [r5, #20]
   28420:	str	fp, [r5, #36]	; 0x24
   28424:	b	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   28428:	add	r6, r6, #1
   2842c:	cmp	r7, r6
   28430:	beq	28ba8 <flatcc_json_parser_space_ext@@Base+0xb3c>
   28434:	ldr	r2, [r5, #24]
   28438:	cmp	r2, #0
   2843c:	bne	28218 <flatcc_json_parser_space_ext@@Base+0x1ac>
   28440:	ldr	r2, [r5, #4]
   28444:	mov	r1, #30
   28448:	str	r1, [r5, #24]
   2844c:	str	fp, [r5, #36]	; 0x24
   28450:	sub	r2, fp, r2
   28454:	mov	fp, r4
   28458:	add	r2, r2, #1
   2845c:	str	r2, [r5, #20]
   28460:	b	2821c <flatcc_json_parser_space_ext@@Base+0x1b0>
   28464:	ldrb	r2, [fp, #1]
   28468:	cmp	r2, #32
   2846c:	addhi	fp, fp, #1
   28470:	bls	283c8 <flatcc_json_parser_space_ext@@Base+0x35c>
   28474:	b	283dc <flatcc_json_parser_space_ext@@Base+0x370>
   28478:	add	r9, fp, #1
   2847c:	sub	r1, r4, r9
   28480:	cmp	r1, #1
   28484:	ble	28498 <flatcc_json_parser_space_ext@@Base+0x42c>
   28488:	ldrb	r1, [fp, #1]
   2848c:	cmp	r1, #32
   28490:	bhi	287b0 <flatcc_json_parser_space_ext@@Base+0x744>
   28494:	beq	287a0 <flatcc_json_parser_space_ext@@Base+0x734>
   28498:	cmp	r4, r9
   2849c:	beq	284cc <flatcc_json_parser_space_ext@@Base+0x460>
   284a0:	ldrb	r1, [r9]
   284a4:	cmp	r1, #32
   284a8:	bne	28500 <flatcc_json_parser_space_ext@@Base+0x494>
   284ac:	add	r3, r9, #1
   284b0:	b	284c0 <flatcc_json_parser_space_ext@@Base+0x454>
   284b4:	ldrb	r1, [r3], #1
   284b8:	cmp	r1, #32
   284bc:	bne	28500 <flatcc_json_parser_space_ext@@Base+0x494>
   284c0:	cmp	r4, r3
   284c4:	mov	r9, r3
   284c8:	bne	284b4 <flatcc_json_parser_space_ext@@Base+0x448>
   284cc:	ldr	r3, [r5, #24]
   284d0:	add	r6, r6, #1
   284d4:	mov	r1, r6
   284d8:	cmp	r3, #0
   284dc:	bne	28640 <flatcc_json_parser_space_ext@@Base+0x5d4>
   284e0:	ldr	r3, [r5, #4]
   284e4:	mov	r1, #9
   284e8:	str	r1, [r5, #24]
   284ec:	str	r9, [r5, #36]	; 0x24
   284f0:	sub	r3, r9, r3
   284f4:	add	r3, r3, #1
   284f8:	str	r3, [r5, #20]
   284fc:	b	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   28500:	cmp	r1, #32
   28504:	bhi	285bc <flatcc_json_parser_space_ext@@Base+0x550>
   28508:	sub	r1, r1, #9
   2850c:	cmp	r1, #23
   28510:	ldrls	pc, [pc, r1, lsl #2]
   28514:	b	28610 <flatcc_json_parser_space_ext@@Base+0x5a4>
   28518:	andeq	r8, r2, r8, lsl #12
   2851c:	andeq	r8, r2, r0, lsl #12
   28520:	andeq	r8, r2, r0, lsl r6
   28524:	andeq	r8, r2, r0, lsl r6
   28528:	andeq	r8, r2, r8, ror r5
   2852c:	andeq	r8, r2, r0, lsl r6
   28530:	andeq	r8, r2, r0, lsl r6
   28534:	andeq	r8, r2, r0, lsl r6
   28538:	andeq	r8, r2, r0, lsl r6
   2853c:	andeq	r8, r2, r0, lsl r6
   28540:	andeq	r8, r2, r0, lsl r6
   28544:	andeq	r8, r2, r0, lsl r6
   28548:	andeq	r8, r2, r0, lsl r6
   2854c:	andeq	r8, r2, r0, lsl r6
   28550:	andeq	r8, r2, r0, lsl r6
   28554:	andeq	r8, r2, r0, lsl r6
   28558:	andeq	r8, r2, r0, lsl r6
   2855c:	andeq	r8, r2, r0, lsl r6
   28560:	andeq	r8, r2, r0, lsl r6
   28564:	andeq	r8, r2, r0, lsl r6
   28568:	andeq	r8, r2, r0, lsl r6
   2856c:	andeq	r8, r2, r0, lsl r6
   28570:	andeq	r8, r2, r0, lsl r6
   28574:	muleq	r2, r8, r4
   28578:	sub	r3, r4, r9
   2857c:	add	r1, r9, #1
   28580:	cmp	r3, #1
   28584:	ble	28594 <flatcc_json_parser_space_ext@@Base+0x528>
   28588:	ldrb	r3, [r9, #1]
   2858c:	cmp	r3, #10
   28590:	addeq	r1, r9, #2
   28594:	mov	r9, r1
   28598:	ldr	r3, [r5, #16]
   2859c:	str	r9, [r5, #4]
   285a0:	add	r3, r3, #1
   285a4:	str	r3, [r5, #16]
   285a8:	cmp	r4, r9
   285ac:	beq	284cc <flatcc_json_parser_space_ext@@Base+0x460>
   285b0:	ldrb	r1, [r9]
   285b4:	cmp	r1, #32
   285b8:	bls	28508 <flatcc_json_parser_space_ext@@Base+0x49c>
   285bc:	cmp	r1, #93	; 0x5d
   285c0:	add	r6, r6, #1
   285c4:	beq	28940 <flatcc_json_parser_space_ext@@Base+0x8d4>
   285c8:	cmp	r7, r6
   285cc:	bne	2835c <flatcc_json_parser_space_ext@@Base+0x2f0>
   285d0:	ldr	r3, [r5, #24]
   285d4:	cmp	r3, #0
   285d8:	bne	28218 <flatcc_json_parser_space_ext@@Base+0x1ac>
   285dc:	ldr	r1, [r5, #4]
   285e0:	mov	r0, #30
   285e4:	mov	fp, r4
   285e8:	str	r0, [r5, #24]
   285ec:	str	r9, [r5, #36]	; 0x24
   285f0:	sub	r2, r9, r1
   285f4:	add	r2, r2, #1
   285f8:	str	r2, [r5, #20]
   285fc:	b	2821c <flatcc_json_parser_space_ext@@Base+0x1b0>
   28600:	add	r9, r9, #1
   28604:	b	28598 <flatcc_json_parser_space_ext@@Base+0x52c>
   28608:	add	r9, r9, #1
   2860c:	b	285a8 <flatcc_json_parser_space_ext@@Base+0x53c>
   28610:	ldr	r3, [r5, #24]
   28614:	cmp	r3, #0
   28618:	addne	r1, r6, #1
   2861c:	bne	28640 <flatcc_json_parser_space_ext@@Base+0x5d4>
   28620:	ldr	r3, [r5, #4]
   28624:	mov	r0, #5
   28628:	add	r1, r6, #1
   2862c:	str	r0, [r5, #24]
   28630:	str	r9, [r5, #36]	; 0x24
   28634:	sub	r2, r9, r3
   28638:	add	r2, r2, #1
   2863c:	str	r2, [r5, #20]
   28640:	mov	r6, r1
   28644:	b	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   28648:	add	r1, fp, #1
   2864c:	sub	r2, r4, r1
   28650:	cmp	r2, #1
   28654:	ble	28668 <flatcc_json_parser_space_ext@@Base+0x5fc>
   28658:	ldrb	r2, [fp, #1]
   2865c:	cmp	r2, #32
   28660:	bhi	2869c <flatcc_json_parser_space_ext@@Base+0x630>
   28664:	beq	28910 <flatcc_json_parser_space_ext@@Base+0x8a4>
   28668:	cmp	r4, r1
   2866c:	beq	2869c <flatcc_json_parser_space_ext@@Base+0x630>
   28670:	ldrb	r2, [r1]
   28674:	cmp	r2, #32
   28678:	bne	286a4 <flatcc_json_parser_space_ext@@Base+0x638>
   2867c:	add	r3, r1, #1
   28680:	b	28690 <flatcc_json_parser_space_ext@@Base+0x624>
   28684:	ldrb	r2, [r3], #1
   28688:	cmp	r2, #32
   2868c:	bne	286a4 <flatcc_json_parser_space_ext@@Base+0x638>
   28690:	cmp	r3, r4
   28694:	mov	r1, r3
   28698:	bne	28684 <flatcc_json_parser_space_ext@@Base+0x618>
   2869c:	mov	fp, r1
   286a0:	b	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   286a4:	cmp	r2, #32
   286a8:	bhi	2869c <flatcc_json_parser_space_ext@@Base+0x630>
   286ac:	sub	r2, r2, #9
   286b0:	cmp	r2, #23
   286b4:	ldrls	pc, [pc, r2, lsl #2]
   286b8:	b	28774 <flatcc_json_parser_space_ext@@Base+0x708>
   286bc:	andeq	r8, r2, ip, ror #14
   286c0:	andeq	r8, r2, r4, ror #14
   286c4:	andeq	r8, r2, r4, ror r7
   286c8:	andeq	r8, r2, r4, ror r7
   286cc:	andeq	r8, r2, ip, lsl r7
   286d0:	andeq	r8, r2, r4, ror r7
   286d4:	andeq	r8, r2, r4, ror r7
   286d8:	andeq	r8, r2, r4, ror r7
   286dc:	andeq	r8, r2, r4, ror r7
   286e0:	andeq	r8, r2, r4, ror r7
   286e4:	andeq	r8, r2, r4, ror r7
   286e8:	andeq	r8, r2, r4, ror r7
   286ec:	andeq	r8, r2, r4, ror r7
   286f0:	andeq	r8, r2, r4, ror r7
   286f4:	andeq	r8, r2, r4, ror r7
   286f8:	andeq	r8, r2, r4, ror r7
   286fc:	andeq	r8, r2, r4, ror r7
   28700:	andeq	r8, r2, r4, ror r7
   28704:	andeq	r8, r2, r4, ror r7
   28708:	andeq	r8, r2, r4, ror r7
   2870c:	andeq	r8, r2, r4, ror r7
   28710:	andeq	r8, r2, r4, ror r7
   28714:	andeq	r8, r2, r4, ror r7
   28718:	andeq	r8, r2, r8, ror #12
   2871c:	sub	r3, r4, r1
   28720:	add	r2, r1, #1
   28724:	cmp	r3, #1
   28728:	ble	28738 <flatcc_json_parser_space_ext@@Base+0x6cc>
   2872c:	ldrb	r3, [r1, #1]
   28730:	cmp	r3, #10
   28734:	addeq	r2, r1, #2
   28738:	mov	r1, r2
   2873c:	ldr	r3, [r5, #16]
   28740:	str	r1, [r5, #4]
   28744:	add	r3, r3, #1
   28748:	str	r3, [r5, #16]
   2874c:	cmp	r4, r1
   28750:	beq	28aa8 <flatcc_json_parser_space_ext@@Base+0xa3c>
   28754:	ldrb	r2, [r1]
   28758:	cmp	r2, #32
   2875c:	bls	286ac <flatcc_json_parser_space_ext@@Base+0x640>
   28760:	b	2869c <flatcc_json_parser_space_ext@@Base+0x630>
   28764:	add	r1, r1, #1
   28768:	b	2873c <flatcc_json_parser_space_ext@@Base+0x6d0>
   2876c:	add	r1, r1, #1
   28770:	b	2874c <flatcc_json_parser_space_ext@@Base+0x6e0>
   28774:	ldr	r3, [r5, #24]
   28778:	cmp	r3, #0
   2877c:	bne	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   28780:	ldr	r3, [r5, #4]
   28784:	mov	r2, #5
   28788:	str	r1, [r5, #36]	; 0x24
   2878c:	str	r2, [r5, #24]
   28790:	sub	r1, r1, r3
   28794:	add	r1, r1, #1
   28798:	str	r1, [r5, #20]
   2879c:	b	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   287a0:	ldrb	r1, [fp, #2]
   287a4:	cmp	r1, #32
   287a8:	addhi	r9, fp, #2
   287ac:	bls	28498 <flatcc_json_parser_space_ext@@Base+0x42c>
   287b0:	cmp	r4, r9
   287b4:	bne	285bc <flatcc_json_parser_space_ext@@Base+0x550>
   287b8:	b	284cc <flatcc_json_parser_space_ext@@Base+0x460>
   287bc:	cmp	r1, #32
   287c0:	bhi	28880 <flatcc_json_parser_space_ext@@Base+0x814>
   287c4:	sub	r1, r1, #9
   287c8:	cmp	r1, #23
   287cc:	ldrls	pc, [pc, r1, lsl #2]
   287d0:	b	288ec <flatcc_json_parser_space_ext@@Base+0x880>
   287d4:	andeq	r8, r2, r4, ror #17
   287d8:	andeq	r8, r2, r8, asr r8
   287dc:	andeq	r8, r2, ip, ror #17
   287e0:	andeq	r8, r2, ip, ror #17
   287e4:	andeq	r8, r2, r4, lsr r8
   287e8:	andeq	r8, r2, ip, ror #17
   287ec:	andeq	r8, r2, ip, ror #17
   287f0:	andeq	r8, r2, ip, ror #17
   287f4:	andeq	r8, r2, ip, ror #17
   287f8:	andeq	r8, r2, ip, ror #17
   287fc:	andeq	r8, r2, ip, ror #17
   28800:	andeq	r8, r2, ip, ror #17
   28804:	andeq	r8, r2, ip, ror #17
   28808:	andeq	r8, r2, ip, ror #17
   2880c:	andeq	r8, r2, ip, ror #17
   28810:	andeq	r8, r2, ip, ror #17
   28814:	andeq	r8, r2, ip, ror #17
   28818:	andeq	r8, r2, ip, ror #17
   2881c:	andeq	r8, r2, ip, ror #17
   28820:	andeq	r8, r2, ip, ror #17
   28824:	andeq	r8, r2, ip, ror #17
   28828:	andeq	r8, r2, ip, ror #17
   2882c:	andeq	r8, r2, ip, ror #17
   28830:	andeq	r8, r2, r8, lsl r3
   28834:	sub	r3, r4, r9
   28838:	add	r1, r9, #1
   2883c:	cmp	r3, #1
   28840:	ble	28850 <flatcc_json_parser_space_ext@@Base+0x7e4>
   28844:	ldrb	r3, [r9, #1]
   28848:	cmp	r3, #10
   2884c:	addeq	r1, r9, #2
   28850:	mov	r9, r1
   28854:	b	2885c <flatcc_json_parser_space_ext@@Base+0x7f0>
   28858:	add	r9, r9, #1
   2885c:	ldr	r3, [r5, #16]
   28860:	str	r9, [r5, #4]
   28864:	add	r3, r3, #1
   28868:	str	r3, [r5, #16]
   2886c:	cmp	r4, r9
   28870:	beq	2834c <flatcc_json_parser_space_ext@@Base+0x2e0>
   28874:	ldrb	r1, [r9]
   28878:	cmp	r1, #32
   2887c:	bls	287c4 <flatcc_json_parser_space_ext@@Base+0x758>
   28880:	cmp	r1, #93	; 0x5d
   28884:	bne	2834c <flatcc_json_parser_space_ext@@Base+0x2e0>
   28888:	add	fp, r9, #1
   2888c:	sub	r1, r4, fp
   28890:	cmp	r1, #1
   28894:	ble	288a8 <flatcc_json_parser_space_ext@@Base+0x83c>
   28898:	ldrb	r1, [r9, #1]
   2889c:	cmp	r1, #32
   288a0:	bhi	288dc <flatcc_json_parser_space_ext@@Base+0x870>
   288a4:	beq	28b90 <flatcc_json_parser_space_ext@@Base+0xb24>
   288a8:	cmp	r4, fp
   288ac:	beq	288dc <flatcc_json_parser_space_ext@@Base+0x870>
   288b0:	ldrb	r1, [fp]
   288b4:	cmp	r1, #32
   288b8:	bne	28ab0 <flatcc_json_parser_space_ext@@Base+0xa44>
   288bc:	add	r2, fp, #1
   288c0:	b	288d0 <flatcc_json_parser_space_ext@@Base+0x864>
   288c4:	ldrb	r1, [r2], #1
   288c8:	cmp	r1, #32
   288cc:	bne	28ab0 <flatcc_json_parser_space_ext@@Base+0xa44>
   288d0:	cmp	r2, r4
   288d4:	mov	fp, r2
   288d8:	bne	288c4 <flatcc_json_parser_space_ext@@Base+0x858>
   288dc:	mov	r6, #0
   288e0:	b	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   288e4:	add	r9, r9, #1
   288e8:	b	2886c <flatcc_json_parser_space_ext@@Base+0x800>
   288ec:	ldr	r3, [r5, #24]
   288f0:	cmp	r3, #0
   288f4:	beq	28a70 <flatcc_json_parser_space_ext@@Base+0xa04>
   288f8:	cmp	r7, #0
   288fc:	beq	28218 <flatcc_json_parser_space_ext@@Base+0x1ac>
   28900:	mov	r9, r4
   28904:	b	28354 <flatcc_json_parser_space_ext@@Base+0x2e8>
   28908:	mov	sl, fp
   2890c:	b	2820c <flatcc_json_parser_space_ext@@Base+0x1a0>
   28910:	ldrb	r2, [fp, #2]
   28914:	cmp	r2, #32
   28918:	addhi	fp, fp, #2
   2891c:	bls	28668 <flatcc_json_parser_space_ext@@Base+0x5fc>
   28920:	b	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28924:	ldrb	r1, [sl, #2]
   28928:	cmp	r1, #32
   2892c:	addhi	r9, sl, #2
   28930:	bls	28318 <flatcc_json_parser_space_ext@@Base+0x2ac>
   28934:	cmp	r4, r9
   28938:	bne	28880 <flatcc_json_parser_space_ext@@Base+0x814>
   2893c:	b	2834c <flatcc_json_parser_space_ext@@Base+0x2e0>
   28940:	add	fp, r9, #1
   28944:	sub	r1, r4, fp
   28948:	cmp	r1, #1
   2894c:	ble	28970 <flatcc_json_parser_space_ext@@Base+0x904>
   28950:	ldrb	r1, [r9, #1]
   28954:	cmp	r1, #32
   28958:	bhi	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   2895c:	bne	28970 <flatcc_json_parser_space_ext@@Base+0x904>
   28960:	ldrb	r1, [r9, #2]
   28964:	cmp	r1, #32
   28968:	addhi	fp, r9, #2
   2896c:	bhi	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28970:	cmp	r4, fp
   28974:	beq	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28978:	ldrb	r1, [fp]
   2897c:	cmp	r1, #32
   28980:	bne	289a0 <flatcc_json_parser_space_ext@@Base+0x934>
   28984:	add	r2, fp, #1
   28988:	cmp	r2, r4
   2898c:	mov	fp, r2
   28990:	beq	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28994:	ldrb	r1, [r2], #1
   28998:	cmp	r1, #32
   2899c:	beq	28988 <flatcc_json_parser_space_ext@@Base+0x91c>
   289a0:	cmp	r1, #32
   289a4:	bhi	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   289a8:	sub	r1, r1, #9
   289ac:	cmp	r1, #23
   289b0:	ldrls	pc, [pc, r1, lsl #2]
   289b4:	b	28a90 <flatcc_json_parser_space_ext@@Base+0xa24>
   289b8:	andeq	r8, r2, r8, ror #20
   289bc:	andeq	r8, r2, r0, ror #20
   289c0:	muleq	r2, r0, sl
   289c4:	muleq	r2, r0, sl
   289c8:	andeq	r8, r2, r8, lsl sl
   289cc:	muleq	r2, r0, sl
   289d0:	muleq	r2, r0, sl
   289d4:	muleq	r2, r0, sl
   289d8:	muleq	r2, r0, sl
   289dc:	muleq	r2, r0, sl
   289e0:	muleq	r2, r0, sl
   289e4:	muleq	r2, r0, sl
   289e8:	muleq	r2, r0, sl
   289ec:	muleq	r2, r0, sl
   289f0:	muleq	r2, r0, sl
   289f4:	muleq	r2, r0, sl
   289f8:	muleq	r2, r0, sl
   289fc:	muleq	r2, r0, sl
   28a00:	muleq	r2, r0, sl
   28a04:	muleq	r2, r0, sl
   28a08:	muleq	r2, r0, sl
   28a0c:	muleq	r2, r0, sl
   28a10:	muleq	r2, r0, sl
   28a14:	andeq	r8, r2, r0, ror r9
   28a18:	sub	r2, r4, fp
   28a1c:	add	r1, fp, #1
   28a20:	cmp	r2, #1
   28a24:	ble	28a34 <flatcc_json_parser_space_ext@@Base+0x9c8>
   28a28:	ldrb	r2, [fp, #1]
   28a2c:	cmp	r2, #10
   28a30:	addeq	r1, fp, #2
   28a34:	mov	fp, r1
   28a38:	ldr	r2, [r5, #16]
   28a3c:	str	fp, [r5, #4]
   28a40:	add	r2, r2, #1
   28a44:	str	r2, [r5, #16]
   28a48:	cmp	r4, fp
   28a4c:	beq	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28a50:	ldrb	r1, [fp]
   28a54:	cmp	r1, #32
   28a58:	bls	289a8 <flatcc_json_parser_space_ext@@Base+0x93c>
   28a5c:	b	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28a60:	add	fp, fp, #1
   28a64:	b	28a38 <flatcc_json_parser_space_ext@@Base+0x9cc>
   28a68:	add	fp, fp, #1
   28a6c:	b	28a48 <flatcc_json_parser_space_ext@@Base+0x9dc>
   28a70:	ldr	r3, [r5, #4]
   28a74:	mov	r1, #5
   28a78:	str	r1, [r5, #24]
   28a7c:	str	r9, [r5, #36]	; 0x24
   28a80:	sub	r3, r9, r3
   28a84:	add	r3, r3, #1
   28a88:	str	r3, [r5, #20]
   28a8c:	b	288f8 <flatcc_json_parser_space_ext@@Base+0x88c>
   28a90:	ldr	r2, [r5, #24]
   28a94:	cmp	r2, #0
   28a98:	bne	28284 <flatcc_json_parser_space_ext@@Base+0x218>
   28a9c:	mov	r1, #5
   28aa0:	ldr	r2, [r5, #4]
   28aa4:	b	28410 <flatcc_json_parser_space_ext@@Base+0x3a4>
   28aa8:	mov	fp, r4
   28aac:	b	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28ab0:	cmp	r1, #32
   28ab4:	bhi	288dc <flatcc_json_parser_space_ext@@Base+0x870>
   28ab8:	sub	r1, r1, #9
   28abc:	cmp	r1, #23
   28ac0:	ldrls	pc, [pc, r1, lsl #2]
   28ac4:	b	28b80 <flatcc_json_parser_space_ext@@Base+0xb14>
   28ac8:	andeq	r8, r2, r8, ror fp
   28acc:	andeq	r8, r2, r0, ror fp
   28ad0:	andeq	r8, r2, r0, lsl #23
   28ad4:	andeq	r8, r2, r0, lsl #23
   28ad8:	andeq	r8, r2, r8, lsr #22
   28adc:	andeq	r8, r2, r0, lsl #23
   28ae0:	andeq	r8, r2, r0, lsl #23
   28ae4:	andeq	r8, r2, r0, lsl #23
   28ae8:	andeq	r8, r2, r0, lsl #23
   28aec:	andeq	r8, r2, r0, lsl #23
   28af0:	andeq	r8, r2, r0, lsl #23
   28af4:	andeq	r8, r2, r0, lsl #23
   28af8:	andeq	r8, r2, r0, lsl #23
   28afc:	andeq	r8, r2, r0, lsl #23
   28b00:	andeq	r8, r2, r0, lsl #23
   28b04:	andeq	r8, r2, r0, lsl #23
   28b08:	andeq	r8, r2, r0, lsl #23
   28b0c:	andeq	r8, r2, r0, lsl #23
   28b10:	andeq	r8, r2, r0, lsl #23
   28b14:	andeq	r8, r2, r0, lsl #23
   28b18:	andeq	r8, r2, r0, lsl #23
   28b1c:	andeq	r8, r2, r0, lsl #23
   28b20:	andeq	r8, r2, r0, lsl #23
   28b24:	andeq	r8, r2, r8, lsr #17
   28b28:	sub	r2, r4, fp
   28b2c:	add	r1, fp, #1
   28b30:	cmp	r2, #1
   28b34:	ble	28b44 <flatcc_json_parser_space_ext@@Base+0xad8>
   28b38:	ldrb	r2, [fp, #1]
   28b3c:	cmp	r2, #10
   28b40:	addeq	r1, fp, #2
   28b44:	mov	fp, r1
   28b48:	ldr	r2, [r5, #16]
   28b4c:	str	fp, [r5, #4]
   28b50:	add	r2, r2, #1
   28b54:	str	r2, [r5, #16]
   28b58:	cmp	r4, fp
   28b5c:	beq	288dc <flatcc_json_parser_space_ext@@Base+0x870>
   28b60:	ldrb	r1, [fp]
   28b64:	cmp	r1, #32
   28b68:	bls	28ab8 <flatcc_json_parser_space_ext@@Base+0xa4c>
   28b6c:	b	288dc <flatcc_json_parser_space_ext@@Base+0x870>
   28b70:	add	fp, fp, #1
   28b74:	b	28b48 <flatcc_json_parser_space_ext@@Base+0xadc>
   28b78:	add	fp, fp, #1
   28b7c:	b	28b58 <flatcc_json_parser_space_ext@@Base+0xaec>
   28b80:	ldr	r6, [r5, #24]
   28b84:	cmp	r6, #0
   28b88:	bne	28280 <flatcc_json_parser_space_ext@@Base+0x214>
   28b8c:	b	28a9c <flatcc_json_parser_space_ext@@Base+0xa30>
   28b90:	ldrb	r1, [r9, #2]
   28b94:	cmp	r1, #32
   28b98:	addhi	fp, r9, #2
   28b9c:	movhi	r6, #0
   28ba0:	bls	288a8 <flatcc_json_parser_space_ext@@Base+0x83c>
   28ba4:	b	2842c <flatcc_json_parser_space_ext@@Base+0x3c0>
   28ba8:	mov	sl, fp
   28bac:	b	28290 <flatcc_json_parser_space_ext@@Base+0x224>

00028bb0 <flatcc_json_parser_string_escape@@Base>:
   28bb0:	sub	ip, r2, r1
   28bb4:	strd	r4, [sp, #-12]!
   28bb8:	cmp	ip, #1
   28bbc:	str	lr, [sp, #8]
   28bc0:	ble	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28bc4:	ldrb	lr, [r1]
   28bc8:	cmp	lr, #92	; 0x5c
   28bcc:	beq	28c10 <flatcc_json_parser_string_escape@@Base+0x60>
   28bd0:	mov	ip, #0
   28bd4:	strb	ip, [r3]
   28bd8:	ldr	r3, [r0, #24]
   28bdc:	cmp	r3, ip
   28be0:	bne	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28be4:	ldr	r3, [r0, #4]
   28be8:	mov	ip, #18
   28bec:	str	ip, [r0, #24]
   28bf0:	str	r1, [r0, #36]	; 0x24
   28bf4:	sub	r3, r1, r3
   28bf8:	add	r3, r3, #1
   28bfc:	str	r3, [r0, #20]
   28c00:	ldrd	r4, [sp]
   28c04:	add	sp, sp, #8
   28c08:	mov	r0, r2
   28c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   28c10:	ldrb	lr, [r1, #1]
   28c14:	sub	lr, lr, #34	; 0x22
   28c18:	cmp	lr, #86	; 0x56
   28c1c:	ldrls	pc, [pc, lr, lsl #2]
   28c20:	b	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28c24:	andeq	r8, r2, r8, lsl #28
   28c28:	ldrdeq	r8, [r2], -r0
   28c2c:	ldrdeq	r8, [r2], -r0
   28c30:	ldrdeq	r8, [r2], -r0
   28c34:	ldrdeq	r8, [r2], -r0
   28c38:	ldrdeq	r8, [r2], -r0
   28c3c:	ldrdeq	r8, [r2], -r0
   28c40:	ldrdeq	r8, [r2], -r0
   28c44:	ldrdeq	r8, [r2], -r0
   28c48:	ldrdeq	r8, [r2], -r0
   28c4c:	ldrdeq	r8, [r2], -r0
   28c50:	ldrdeq	r8, [r2], -r0
   28c54:	ldrdeq	r8, [r2], -r0
   28c58:	andeq	r8, r2, r0, lsr #28
   28c5c:	ldrdeq	r8, [r2], -r0
   28c60:	ldrdeq	r8, [r2], -r0
   28c64:	ldrdeq	r8, [r2], -r0
   28c68:	ldrdeq	r8, [r2], -r0
   28c6c:	ldrdeq	r8, [r2], -r0
   28c70:	ldrdeq	r8, [r2], -r0
   28c74:	ldrdeq	r8, [r2], -r0
   28c78:	ldrdeq	r8, [r2], -r0
   28c7c:	ldrdeq	r8, [r2], -r0
   28c80:	ldrdeq	r8, [r2], -r0
   28c84:	ldrdeq	r8, [r2], -r0
   28c88:	ldrdeq	r8, [r2], -r0
   28c8c:	ldrdeq	r8, [r2], -r0
   28c90:	ldrdeq	r8, [r2], -r0
   28c94:	ldrdeq	r8, [r2], -r0
   28c98:	ldrdeq	r8, [r2], -r0
   28c9c:	ldrdeq	r8, [r2], -r0
   28ca0:	ldrdeq	r8, [r2], -r0
   28ca4:	ldrdeq	r8, [r2], -r0
   28ca8:	ldrdeq	r8, [r2], -r0
   28cac:	ldrdeq	r8, [r2], -r0
   28cb0:	ldrdeq	r8, [r2], -r0
   28cb4:	ldrdeq	r8, [r2], -r0
   28cb8:	ldrdeq	r8, [r2], -r0
   28cbc:	ldrdeq	r8, [r2], -r0
   28cc0:	ldrdeq	r8, [r2], -r0
   28cc4:	ldrdeq	r8, [r2], -r0
   28cc8:	ldrdeq	r8, [r2], -r0
   28ccc:	ldrdeq	r8, [r2], -r0
   28cd0:	ldrdeq	r8, [r2], -r0
   28cd4:	ldrdeq	r8, [r2], -r0
   28cd8:	ldrdeq	r8, [r2], -r0
   28cdc:	ldrdeq	r8, [r2], -r0
   28ce0:	ldrdeq	r8, [r2], -r0
   28ce4:	ldrdeq	r8, [r2], -r0
   28ce8:	ldrdeq	r8, [r2], -r0
   28cec:	ldrdeq	r8, [r2], -r0
   28cf0:	ldrdeq	r8, [r2], -r0
   28cf4:	ldrdeq	r8, [r2], -r0
   28cf8:	ldrdeq	r8, [r2], -r0
   28cfc:	ldrdeq	r8, [r2], -r0
   28d00:	ldrdeq	r8, [r2], -r0
   28d04:	ldrdeq	r8, [r2], -r0
   28d08:	ldrdeq	r8, [r2], -r0
   28d0c:	andeq	r8, r2, r8, lsr lr
   28d10:	ldrdeq	r8, [r2], -r0
   28d14:	ldrdeq	r8, [r2], -r0
   28d18:	ldrdeq	r8, [r2], -r0
   28d1c:	ldrdeq	r8, [r2], -r0
   28d20:	ldrdeq	r8, [r2], -r0
   28d24:	andeq	r8, r2, r0, asr lr
   28d28:	ldrdeq	r8, [r2], -r0
   28d2c:	ldrdeq	r8, [r2], -r0
   28d30:	ldrdeq	r8, [r2], -r0
   28d34:	andeq	r8, r2, r8, ror #28
   28d38:	ldrdeq	r8, [r2], -r0
   28d3c:	ldrdeq	r8, [r2], -r0
   28d40:	ldrdeq	r8, [r2], -r0
   28d44:	ldrdeq	r8, [r2], -r0
   28d48:	ldrdeq	r8, [r2], -r0
   28d4c:	ldrdeq	r8, [r2], -r0
   28d50:	ldrdeq	r8, [r2], -r0
   28d54:	andeq	r8, r2, r0, lsl #29
   28d58:	ldrdeq	r8, [r2], -r0
   28d5c:	ldrdeq	r8, [r2], -r0
   28d60:	ldrdeq	r8, [r2], -r0
   28d64:	muleq	r2, r8, lr
   28d68:	ldrdeq	r8, [r2], -r0
   28d6c:			; <UNDEFINED> instruction: 0x00028eb0
   28d70:	andeq	r8, r2, r8, asr #29
   28d74:	ldrdeq	r8, [r2], -r0
   28d78:	ldrdeq	r8, [r2], -r0
   28d7c:	andeq	r8, r2, r0, lsl #27
   28d80:	mov	lr, #1
   28d84:	cmp	ip, #3
   28d88:	strb	lr, [r3]
   28d8c:	ble	28f98 <flatcc_json_parser_string_escape@@Base+0x3e8>
   28d90:	ldrb	ip, [r1, #2]
   28d94:	sub	lr, ip, #48	; 0x30
   28d98:	uxtb	r4, lr
   28d9c:	cmp	r4, #9
   28da0:	lslls	ip, lr, #4
   28da4:	uxtbls	ip, ip
   28da8:	bls	28dc8 <flatcc_json_parser_string_escape@@Base+0x218>
   28dac:	orr	ip, ip, #32
   28db0:	sub	lr, ip, #97	; 0x61
   28db4:	cmp	lr, #5
   28db8:	bhi	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28dbc:	sub	ip, ip, #87	; 0x57
   28dc0:	lsl	ip, ip, #4
   28dc4:	uxtb	ip, ip
   28dc8:	ldrb	lr, [r1, #3]
   28dcc:	sub	r4, lr, #48	; 0x30
   28dd0:	uxtb	r4, r4
   28dd4:	cmp	r4, #9
   28dd8:	orrls	ip, r4, ip
   28ddc:	bls	28dfc <flatcc_json_parser_string_escape@@Base+0x24c>
   28de0:	orr	lr, lr, #32
   28de4:	sub	r4, lr, #97	; 0x61
   28de8:	cmp	r4, #5
   28dec:	bhi	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28df0:	sub	lr, lr, #87	; 0x57
   28df4:	orr	ip, lr, ip
   28df8:	uxtb	ip, ip
   28dfc:	add	r2, r1, #4
   28e00:	strb	ip, [r3, #1]
   28e04:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e08:	mov	ip, #1
   28e0c:	mov	r0, #34	; 0x22
   28e10:	add	r2, r1, #2
   28e14:	strb	ip, [r3]
   28e18:	strb	r0, [r3, #1]
   28e1c:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e20:	mov	ip, #1
   28e24:	mov	r0, #47	; 0x2f
   28e28:	add	r2, r1, #2
   28e2c:	strb	ip, [r3]
   28e30:	strb	r0, [r3, #1]
   28e34:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e38:	mov	ip, #1
   28e3c:	mov	r0, #92	; 0x5c
   28e40:	add	r2, r1, #2
   28e44:	strb	ip, [r3]
   28e48:	strb	r0, [r3, #1]
   28e4c:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e50:	mov	ip, #1
   28e54:	mov	r0, #8
   28e58:	add	r2, r1, #2
   28e5c:	strb	ip, [r3]
   28e60:	strb	r0, [r3, #1]
   28e64:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e68:	mov	ip, #1
   28e6c:	mov	r0, #12
   28e70:	add	r2, r1, #2
   28e74:	strb	ip, [r3]
   28e78:	strb	r0, [r3, #1]
   28e7c:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e80:	mov	ip, #1
   28e84:	mov	r0, #10
   28e88:	add	r2, r1, #2
   28e8c:	strb	ip, [r3]
   28e90:	strb	r0, [r3, #1]
   28e94:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28e98:	mov	ip, #1
   28e9c:	mov	r0, #13
   28ea0:	add	r2, r1, #2
   28ea4:	strb	ip, [r3]
   28ea8:	strb	r0, [r3, #1]
   28eac:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28eb0:	mov	ip, #1
   28eb4:	mov	r0, #9
   28eb8:	add	r2, r1, #2
   28ebc:	strb	ip, [r3]
   28ec0:	strb	r0, [r3, #1]
   28ec4:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28ec8:	cmp	ip, #5
   28ecc:	ble	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28ed0:	ldrb	ip, [r1, #2]
   28ed4:	sub	lr, ip, #48	; 0x30
   28ed8:	uxtb	r4, lr
   28edc:	cmp	r4, #9
   28ee0:	lslls	ip, lr, #12
   28ee4:	uxthls	ip, ip
   28ee8:	bls	28f08 <flatcc_json_parser_string_escape@@Base+0x358>
   28eec:	orr	ip, ip, #32
   28ef0:	sub	lr, ip, #97	; 0x61
   28ef4:	cmp	lr, #5
   28ef8:	bhi	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28efc:	sub	ip, ip, #87	; 0x57
   28f00:	lsl	ip, ip, #12
   28f04:	and	ip, ip, #61440	; 0xf000
   28f08:	ldrb	lr, [r1, #3]
   28f0c:	sub	r4, lr, #48	; 0x30
   28f10:	uxtb	r5, r4
   28f14:	cmp	r5, #9
   28f18:	bhi	28fcc <flatcc_json_parser_string_escape@@Base+0x41c>
   28f1c:	uxth	r4, r4
   28f20:	orr	ip, ip, r4, lsl #8
   28f24:	sxth	ip, ip
   28f28:	ldrb	lr, [r1, #4]
   28f2c:	sub	r4, lr, #48	; 0x30
   28f30:	uxtb	r5, r4
   28f34:	cmp	r5, #9
   28f38:	bhi	28ff0 <flatcc_json_parser_string_escape@@Base+0x440>
   28f3c:	orr	ip, ip, r4, lsl #4
   28f40:	uxth	ip, ip
   28f44:	ldrb	lr, [r1, #5]
   28f48:	sub	r4, lr, #48	; 0x30
   28f4c:	uxtb	r5, r4
   28f50:	cmp	r5, #9
   28f54:	orrls	r2, ip, r4
   28f58:	uxthls	r2, r2
   28f5c:	bls	28f7c <flatcc_json_parser_string_escape@@Base+0x3cc>
   28f60:	orr	lr, lr, #32
   28f64:	sub	r4, lr, #97	; 0x61
   28f68:	cmp	r4, #5
   28f6c:	bhi	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28f70:	sub	r2, lr, #87	; 0x57
   28f74:	orr	r2, ip, r2
   28f78:	uxth	r2, r2
   28f7c:	cmp	r2, #127	; 0x7f
   28f80:	bhi	29010 <flatcc_json_parser_string_escape@@Base+0x460>
   28f84:	mov	r0, #1
   28f88:	strb	r0, [r3]
   28f8c:	strb	r2, [r3, #1]
   28f90:	add	r2, r1, #6
   28f94:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28f98:	mov	ip, #0
   28f9c:	strb	ip, [r3]
   28fa0:	ldr	r3, [r0, #24]
   28fa4:	cmp	r3, ip
   28fa8:	bne	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28fac:	ldr	r3, [r0, #4]
   28fb0:	mov	ip, #18
   28fb4:	str	ip, [r0, #24]
   28fb8:	str	r1, [r0, #36]	; 0x24
   28fbc:	sub	r3, r1, r3
   28fc0:	add	r3, r3, lr
   28fc4:	str	r3, [r0, #20]
   28fc8:	b	28c00 <flatcc_json_parser_string_escape@@Base+0x50>
   28fcc:	orr	lr, lr, #32
   28fd0:	sub	r4, lr, #97	; 0x61
   28fd4:	cmp	r4, #5
   28fd8:	bhi	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   28fdc:	sub	lr, lr, #87	; 0x57
   28fe0:	uxth	lr, lr
   28fe4:	orr	ip, ip, lr, lsl #8
   28fe8:	sxth	ip, ip
   28fec:	b	28f28 <flatcc_json_parser_string_escape@@Base+0x378>
   28ff0:	orr	lr, lr, #32
   28ff4:	sub	r4, lr, #97	; 0x61
   28ff8:	cmp	r4, #5
   28ffc:	bhi	28bd0 <flatcc_json_parser_string_escape@@Base+0x20>
   29000:	sub	lr, lr, #87	; 0x57
   29004:	orr	ip, ip, lr, lsl #4
   29008:	uxth	ip, ip
   2900c:	b	28f44 <flatcc_json_parser_string_escape@@Base+0x394>
   29010:	and	r0, r2, #63	; 0x3f
   29014:	cmp	r2, #2048	; 0x800
   29018:	lsr	ip, r2, #6
   2901c:	orr	r0, r0, #128	; 0x80
   29020:	mvn	lr, #127	; 0x7f
   29024:	bcs	29044 <flatcc_json_parser_string_escape@@Base+0x494>
   29028:	mvn	ip, ip, lsl #26
   2902c:	mov	r2, #2
   29030:	mvn	ip, ip, lsr #26
   29034:	strb	r2, [r3]
   29038:	strb	r0, [r3, #2]
   2903c:	strb	ip, [r3, #1]
   29040:	b	28f90 <flatcc_json_parser_string_escape@@Base+0x3e0>
   29044:	mvn	r4, #31
   29048:	and	ip, ip, #63	; 0x3f
   2904c:	strb	r0, [r3, #3]
   29050:	orr	r2, r4, r2, lsr #12
   29054:	orr	ip, lr, ip
   29058:	mov	r0, #3
   2905c:	strb	r0, [r3]
   29060:	strb	r2, [r3, #1]
   29064:	strb	ip, [r3, #2]
   29068:	b	28f90 <flatcc_json_parser_string_escape@@Base+0x3e0>

0002906c <flatcc_json_parser_skip_constant@@Base>:
   2906c:	cmp	r1, r2
   29070:	beq	29250 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   29074:	push	{lr}		; (str lr, [sp, #-4]!)
   29078:	ldrb	r3, [r1]
   2907c:	sub	ip, r3, #95	; 0x5f
   29080:	clz	ip, ip
   29084:	lsr	ip, ip, #5
   29088:	orrs	ip, ip, r3, lsr #7
   2908c:	bne	29114 <flatcc_json_parser_skip_constant@@Base+0xa8>
   29090:	sub	ip, r3, #48	; 0x30
   29094:	cmp	r3, #46	; 0x2e
   29098:	cmpne	ip, #9
   2909c:	bls	29114 <flatcc_json_parser_skip_constant@@Base+0xa8>
   290a0:	orr	ip, r3, #32
   290a4:	sub	ip, ip, #97	; 0x61
   290a8:	cmp	ip, #25
   290ac:	bls	29114 <flatcc_json_parser_skip_constant@@Base+0xa8>
   290b0:	sub	ip, r2, r1
   290b4:	cmp	ip, #1
   290b8:	ble	290c8 <flatcc_json_parser_skip_constant@@Base+0x5c>
   290bc:	cmp	r3, #32
   290c0:	bhi	29240 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   290c4:	beq	29108 <flatcc_json_parser_skip_constant@@Base+0x9c>
   290c8:	cmp	r2, r1
   290cc:	beq	29248 <flatcc_json_parser_skip_constant@@Base+0x1dc>
   290d0:	mov	lr, r1
   290d4:	ldrb	r3, [lr]
   290d8:	cmp	r3, #32
   290dc:	bne	2912c <flatcc_json_parser_skip_constant@@Base+0xc0>
   290e0:	add	ip, lr, #1
   290e4:	b	290f4 <flatcc_json_parser_skip_constant@@Base+0x88>
   290e8:	ldrb	r3, [ip], #1
   290ec:	cmp	r3, #32
   290f0:	bne	2912c <flatcc_json_parser_skip_constant@@Base+0xc0>
   290f4:	cmp	r2, ip
   290f8:	mov	lr, ip
   290fc:	bne	290e8 <flatcc_json_parser_skip_constant@@Base+0x7c>
   29100:	mov	r2, lr
   29104:	b	2923c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   29108:	ldrb	r3, [r1, #1]
   2910c:	cmp	r3, #32
   29110:	bls	290c8 <flatcc_json_parser_skip_constant@@Base+0x5c>
   29114:	add	ip, r1, #1
   29118:	cmp	r2, ip
   2911c:	beq	2923c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   29120:	ldrb	r3, [r1, #1]
   29124:	mov	r1, ip
   29128:	b	2907c <flatcc_json_parser_skip_constant@@Base+0x10>
   2912c:	cmp	r3, #32
   29130:	bhi	291f4 <flatcc_json_parser_skip_constant@@Base+0x188>
   29134:	sub	r3, r3, #9
   29138:	cmp	r3, #23
   2913c:	ldrls	pc, [pc, r3, lsl #2]
   29140:	b	29214 <flatcc_json_parser_skip_constant@@Base+0x1a8>
   29144:	andeq	r9, r2, ip, lsl #4
   29148:	andeq	r9, r2, r4, lsl #4
   2914c:	andeq	r9, r2, r4, lsl r2
   29150:	andeq	r9, r2, r4, lsl r2
   29154:			; <UNDEFINED> instruction: 0x000291b0
   29158:	andeq	r9, r2, r4, lsl r2
   2915c:	andeq	r9, r2, r4, lsl r2
   29160:	andeq	r9, r2, r4, lsl r2
   29164:	andeq	r9, r2, r4, lsl r2
   29168:	andeq	r9, r2, r4, lsl r2
   2916c:	andeq	r9, r2, r4, lsl r2
   29170:	andeq	r9, r2, r4, lsl r2
   29174:	andeq	r9, r2, r4, lsl r2
   29178:	andeq	r9, r2, r4, lsl r2
   2917c:	andeq	r9, r2, r4, lsl r2
   29180:	andeq	r9, r2, r4, lsl r2
   29184:	andeq	r9, r2, r4, lsl r2
   29188:	andeq	r9, r2, r4, lsl r2
   2918c:	andeq	r9, r2, r4, lsl r2
   29190:	andeq	r9, r2, r4, lsl r2
   29194:	andeq	r9, r2, r4, lsl r2
   29198:	andeq	r9, r2, r4, lsl r2
   2919c:	andeq	r9, r2, r4, lsl r2
   291a0:	andeq	r9, r2, r4, lsr #3
   291a4:	cmp	r2, lr
   291a8:	bne	290d4 <flatcc_json_parser_skip_constant@@Base+0x68>
   291ac:	b	29100 <flatcc_json_parser_skip_constant@@Base+0x94>
   291b0:	sub	r3, r2, lr
   291b4:	add	ip, lr, #1
   291b8:	cmp	r3, #1
   291bc:	ble	291cc <flatcc_json_parser_skip_constant@@Base+0x160>
   291c0:	ldrb	r3, [lr, #1]
   291c4:	cmp	r3, #10
   291c8:	addeq	ip, lr, #2
   291cc:	mov	lr, ip
   291d0:	ldr	r3, [r0, #16]
   291d4:	str	lr, [r0, #4]
   291d8:	add	r3, r3, #1
   291dc:	str	r3, [r0, #16]
   291e0:	cmp	r2, lr
   291e4:	beq	2923c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   291e8:	ldrb	r3, [lr]
   291ec:	cmp	r3, #32
   291f0:	bls	29134 <flatcc_json_parser_skip_constant@@Base+0xc8>
   291f4:	cmp	lr, r1
   291f8:	beq	29240 <flatcc_json_parser_skip_constant@@Base+0x1d4>
   291fc:	mov	r1, lr
   29200:	b	2907c <flatcc_json_parser_skip_constant@@Base+0x10>
   29204:	add	lr, lr, #1
   29208:	b	291d0 <flatcc_json_parser_skip_constant@@Base+0x164>
   2920c:	add	lr, lr, #1
   29210:	b	291e0 <flatcc_json_parser_skip_constant@@Base+0x174>
   29214:	ldr	r3, [r0, #24]
   29218:	cmp	r3, #0
   2921c:	bne	2923c <flatcc_json_parser_skip_constant@@Base+0x1d0>
   29220:	ldr	r3, [r0, #4]
   29224:	mov	r1, #5
   29228:	str	lr, [r0, #36]	; 0x24
   2922c:	str	r1, [r0, #24]
   29230:	sub	lr, lr, r3
   29234:	add	lr, lr, #1
   29238:	str	lr, [r0, #20]
   2923c:	mov	r1, r2
   29240:	mov	r0, r1
   29244:	pop	{pc}		; (ldr pc, [sp], #4)
   29248:	mov	lr, r2
   2924c:	b	29100 <flatcc_json_parser_skip_constant@@Base+0x94>
   29250:	mov	r0, r1
   29254:	bx	lr

00029258 <flatcc_json_parser_match_constant@@Base>:
   29258:	sub	ip, r2, r1
   2925c:	str	r4, [sp, #-8]!
   29260:	cmp	ip, r3
   29264:	str	lr, [sp, #4]
   29268:	ble	29344 <flatcc_json_parser_match_constant@@Base+0xec>
   2926c:	ldr	ip, [r0, #12]
   29270:	add	r4, r1, r3
   29274:	cmp	ip, #0
   29278:	bne	292d4 <flatcc_json_parser_match_constant@@Base+0x7c>
   2927c:	ldrb	r3, [r1, r3]
   29280:	cmp	r3, #32
   29284:	beq	29464 <flatcc_json_parser_match_constant@@Base+0x20c>
   29288:	cmp	r3, #34	; 0x22
   2928c:	beq	29544 <flatcc_json_parser_match_constant@@Base+0x2ec>
   29290:	cmp	r3, #92	; 0x5c
   29294:	bne	29418 <flatcc_json_parser_match_constant@@Base+0x1c0>
   29298:	ldr	r3, [sp, #8]
   2929c:	str	ip, [r3]
   292a0:	ldr	r3, [r0, #24]
   292a4:	cmp	r3, #0
   292a8:	movne	r3, r2
   292ac:	bne	29354 <flatcc_json_parser_match_constant@@Base+0xfc>
   292b0:	ldr	r1, [r0, #4]
   292b4:	mov	ip, #18
   292b8:	mov	r3, r2
   292bc:	str	ip, [r0, #24]
   292c0:	str	r4, [r0, #36]	; 0x24
   292c4:	sub	r1, r4, r1
   292c8:	add	r1, r1, #1
   292cc:	str	r1, [r0, #20]
   292d0:	b	29354 <flatcc_json_parser_match_constant@@Base+0xfc>
   292d4:	sub	ip, r2, r4
   292d8:	cmp	ip, #1
   292dc:	ble	292f0 <flatcc_json_parser_match_constant@@Base+0x98>
   292e0:	ldrb	r3, [r1, r3]
   292e4:	cmp	r3, #32
   292e8:	bhi	296cc <flatcc_json_parser_match_constant@@Base+0x474>
   292ec:	beq	294b0 <flatcc_json_parser_match_constant@@Base+0x258>
   292f0:	cmp	r4, r2
   292f4:	mov	r3, r4
   292f8:	beq	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   292fc:	ldrb	ip, [r3]
   29300:	cmp	ip, #32
   29304:	bne	293a0 <flatcc_json_parser_match_constant@@Base+0x148>
   29308:	add	lr, r3, #1
   2930c:	b	2931c <flatcc_json_parser_match_constant@@Base+0xc4>
   29310:	ldrb	ip, [lr], #1
   29314:	cmp	ip, #32
   29318:	bne	293a0 <flatcc_json_parser_match_constant@@Base+0x148>
   2931c:	cmp	r2, lr
   29320:	mov	r3, lr
   29324:	bne	29310 <flatcc_json_parser_match_constant@@Base+0xb8>
   29328:	ldr	r1, [sp, #8]
   2932c:	mov	r2, #0
   29330:	str	r2, [r1]
   29334:	ldr	r4, [sp]
   29338:	add	sp, sp, #4
   2933c:	mov	r0, r3
   29340:	pop	{pc}		; (ldr pc, [sp], #4)
   29344:	mov	r3, r1
   29348:	ldr	r1, [sp, #8]
   2934c:	mov	r2, #0
   29350:	str	r2, [r1]
   29354:	ldr	r4, [sp]
   29358:	add	sp, sp, #4
   2935c:	mov	r0, r3
   29360:	pop	{pc}		; (ldr pc, [sp], #4)
   29364:	sub	ip, r2, r3
   29368:	add	lr, r3, #1
   2936c:	cmp	ip, #1
   29370:	ble	29380 <flatcc_json_parser_match_constant@@Base+0x128>
   29374:	ldrb	ip, [r3, #1]
   29378:	cmp	ip, #10
   2937c:	addeq	lr, r3, #2
   29380:	mov	r3, lr
   29384:	ldr	ip, [r0, #16]
   29388:	str	r3, [r0, #4]
   2938c:	add	ip, ip, #1
   29390:	str	ip, [r0, #16]
   29394:	cmp	r2, r3
   29398:	beq	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   2939c:	ldrb	ip, [r3]
   293a0:	cmp	ip, #32
   293a4:	bhi	294c8 <flatcc_json_parser_match_constant@@Base+0x270>
   293a8:	sub	ip, ip, #9
   293ac:	cmp	ip, #23
   293b0:	ldrls	pc, [pc, ip, lsl #2]
   293b4:	b	29450 <flatcc_json_parser_match_constant@@Base+0x1f8>
   293b8:	andeq	r9, r2, r8, asr #8
   293bc:	andeq	r9, r2, r0, asr #8
   293c0:	andeq	r9, r2, r0, asr r4
   293c4:	andeq	r9, r2, r0, asr r4
   293c8:	andeq	r9, r2, r4, ror #6
   293cc:	andeq	r9, r2, r0, asr r4
   293d0:	andeq	r9, r2, r0, asr r4
   293d4:	andeq	r9, r2, r0, asr r4
   293d8:	andeq	r9, r2, r0, asr r4
   293dc:	andeq	r9, r2, r0, asr r4
   293e0:	andeq	r9, r2, r0, asr r4
   293e4:	andeq	r9, r2, r0, asr r4
   293e8:	andeq	r9, r2, r0, asr r4
   293ec:	andeq	r9, r2, r0, asr r4
   293f0:	andeq	r9, r2, r0, asr r4
   293f4:	andeq	r9, r2, r0, asr r4
   293f8:	andeq	r9, r2, r0, asr r4
   293fc:	andeq	r9, r2, r0, asr r4
   29400:	andeq	r9, r2, r0, asr r4
   29404:	andeq	r9, r2, r0, asr r4
   29408:	andeq	r9, r2, r0, asr r4
   2940c:	andeq	r9, r2, r0, asr r4
   29410:	andeq	r9, r2, r0, asr r4
   29414:	andeq	r9, r2, r4, lsr r4
   29418:	mov	r3, r1
   2941c:	ldr	r4, [sp]
   29420:	mov	r0, r3
   29424:	ldr	r2, [sp, #8]
   29428:	add	sp, sp, #4
   2942c:	str	ip, [r2]
   29430:	pop	{pc}		; (ldr pc, [sp], #4)
   29434:	cmp	r2, r3
   29438:	bne	292fc <flatcc_json_parser_match_constant@@Base+0xa4>
   2943c:	b	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   29440:	add	r3, r3, #1
   29444:	b	29384 <flatcc_json_parser_match_constant@@Base+0x12c>
   29448:	add	r3, r3, #1
   2944c:	b	29394 <flatcc_json_parser_match_constant@@Base+0x13c>
   29450:	ldr	r1, [r0, #24]
   29454:	cmp	r1, #0
   29458:	beq	296a8 <flatcc_json_parser_match_constant@@Base+0x450>
   2945c:	mov	r3, r2
   29460:	b	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   29464:	add	r3, r4, #1
   29468:	cmp	r2, r3
   2946c:	beq	296f0 <flatcc_json_parser_match_constant@@Base+0x498>
   29470:	ldrb	r1, [r4, #1]
   29474:	cmp	r1, #32
   29478:	bne	29524 <flatcc_json_parser_match_constant@@Base+0x2cc>
   2947c:	add	r3, r4, #2
   29480:	b	29490 <flatcc_json_parser_match_constant@@Base+0x238>
   29484:	ldrb	r1, [r3], #1
   29488:	cmp	r1, #32
   2948c:	bne	29528 <flatcc_json_parser_match_constant@@Base+0x2d0>
   29490:	cmp	r2, r3
   29494:	mov	r4, r3
   29498:	bne	29484 <flatcc_json_parser_match_constant@@Base+0x22c>
   2949c:	ldr	r1, [sp, #8]
   294a0:	mov	r2, #0
   294a4:	mov	r3, r4
   294a8:	str	r2, [r1]
   294ac:	b	29354 <flatcc_json_parser_match_constant@@Base+0xfc>
   294b0:	ldrb	ip, [r4, #1]
   294b4:	cmp	ip, #32
   294b8:	bls	292f0 <flatcc_json_parser_match_constant@@Base+0x98>
   294bc:	add	r3, r4, #1
   294c0:	cmp	r2, r3
   294c4:	beq	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   294c8:	cmp	r4, r3
   294cc:	beq	294f4 <flatcc_json_parser_match_constant@@Base+0x29c>
   294d0:	sub	r2, ip, #95	; 0x5f
   294d4:	clz	r2, r2
   294d8:	lsr	r2, r2, #5
   294dc:	orrs	r2, r2, ip, lsr #7
   294e0:	bne	29698 <flatcc_json_parser_match_constant@@Base+0x440>
   294e4:	orr	ip, ip, #32
   294e8:	sub	ip, ip, #97	; 0x61
   294ec:	cmp	ip, #25
   294f0:	bls	29698 <flatcc_json_parser_match_constant@@Base+0x440>
   294f4:	mov	r2, #0
   294f8:	ldr	r4, [sp]
   294fc:	ldr	r0, [sp, #8]
   29500:	add	sp, sp, #4
   29504:	str	r2, [r0]
   29508:	ldrb	r2, [r3]
   2950c:	and	r0, r2, #223	; 0xdf
   29510:	cmp	r2, #44	; 0x2c
   29514:	cmpne	r0, #93	; 0x5d
   29518:	movne	r3, r1
   2951c:	mov	r0, r3
   29520:	pop	{pc}		; (ldr pc, [sp], #4)
   29524:	mov	r4, r3
   29528:	cmp	r1, #34	; 0x22
   2952c:	beq	29544 <flatcc_json_parser_match_constant@@Base+0x2ec>
   29530:	ldr	r1, [sp, #8]
   29534:	mov	r2, #1
   29538:	mov	r3, r4
   2953c:	str	r2, [r1]
   29540:	b	29354 <flatcc_json_parser_match_constant@@Base+0xfc>
   29544:	add	r3, r4, #1
   29548:	cmn	r3, #1
   2954c:	bge	29560 <flatcc_json_parser_match_constant@@Base+0x308>
   29550:	ldrb	r2, [r4, #1]
   29554:	cmp	r2, #32
   29558:	bhi	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   2955c:	beq	296dc <flatcc_json_parser_match_constant@@Base+0x484>
   29560:	cmp	r3, #0
   29564:	beq	29594 <flatcc_json_parser_match_constant@@Base+0x33c>
   29568:	ldrb	r1, [r3]
   2956c:	cmp	r1, #32
   29570:	bne	295c8 <flatcc_json_parser_match_constant@@Base+0x370>
   29574:	add	r2, r3, #1
   29578:	b	29588 <flatcc_json_parser_match_constant@@Base+0x330>
   2957c:	ldrb	r1, [r2], #1
   29580:	cmp	r1, #32
   29584:	bne	295c8 <flatcc_json_parser_match_constant@@Base+0x370>
   29588:	cmp	r2, #0
   2958c:	mov	r3, r2
   29590:	bne	2957c <flatcc_json_parser_match_constant@@Base+0x324>
   29594:	ldr	r1, [sp, #8]
   29598:	mov	r2, #0
   2959c:	mov	r3, #0
   295a0:	str	r2, [r1]
   295a4:	b	29334 <flatcc_json_parser_match_constant@@Base+0xdc>
   295a8:	add	r3, r3, #1
   295ac:	ldr	r2, [r0, #16]
   295b0:	str	r3, [r0, #4]
   295b4:	add	r2, r2, #1
   295b8:	str	r2, [r0, #16]
   295bc:	cmp	r3, #0
   295c0:	beq	29594 <flatcc_json_parser_match_constant@@Base+0x33c>
   295c4:	ldrb	r1, [r3]
   295c8:	cmp	r1, #32
   295cc:	bhi	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   295d0:	sub	r1, r1, #9
   295d4:	cmp	r1, #23
   295d8:	ldrls	pc, [pc, r1, lsl #2]
   295dc:	b	29668 <flatcc_json_parser_match_constant@@Base+0x410>
   295e0:	andeq	r9, r2, r0, ror #12
   295e4:	andeq	r9, r2, r8, lsr #11
   295e8:	andeq	r9, r2, r8, ror #12
   295ec:	andeq	r9, r2, r8, ror #12
   295f0:	andeq	r9, r2, r0, asr #12
   295f4:	andeq	r9, r2, r8, ror #12
   295f8:	andeq	r9, r2, r8, ror #12
   295fc:	andeq	r9, r2, r8, ror #12
   29600:	andeq	r9, r2, r8, ror #12
   29604:	andeq	r9, r2, r8, ror #12
   29608:	andeq	r9, r2, r8, ror #12
   2960c:	andeq	r9, r2, r8, ror #12
   29610:	andeq	r9, r2, r8, ror #12
   29614:	andeq	r9, r2, r8, ror #12
   29618:	andeq	r9, r2, r8, ror #12
   2961c:	andeq	r9, r2, r8, ror #12
   29620:	andeq	r9, r2, r8, ror #12
   29624:	andeq	r9, r2, r8, ror #12
   29628:	andeq	r9, r2, r8, ror #12
   2962c:	andeq	r9, r2, r8, ror #12
   29630:	andeq	r9, r2, r8, ror #12
   29634:	andeq	r9, r2, r8, ror #12
   29638:	andeq	r9, r2, r8, ror #12
   2963c:	andeq	r9, r2, r8, ror #10
   29640:	cmn	r3, #1
   29644:	add	r2, r3, #1
   29648:	bge	29658 <flatcc_json_parser_match_constant@@Base+0x400>
   2964c:	ldrb	r1, [r3, #1]
   29650:	cmp	r1, #10
   29654:	addeq	r2, r3, #2
   29658:	mov	r3, r2
   2965c:	b	295ac <flatcc_json_parser_match_constant@@Base+0x354>
   29660:	add	r3, r3, #1
   29664:	b	295bc <flatcc_json_parser_match_constant@@Base+0x364>
   29668:	ldr	r1, [r0, #24]
   2966c:	cmp	r1, #0
   29670:	bne	29594 <flatcc_json_parser_match_constant@@Base+0x33c>
   29674:	ldr	r2, [r0, #4]
   29678:	mov	ip, #5
   2967c:	str	ip, [r0, #24]
   29680:	str	r3, [r0, #36]	; 0x24
   29684:	sub	r2, r3, r2
   29688:	mov	r3, r1
   2968c:	add	r2, r2, #1
   29690:	str	r2, [r0, #20]
   29694:	b	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   29698:	ldr	r1, [sp, #8]
   2969c:	mov	r2, #1
   296a0:	str	r2, [r1]
   296a4:	b	29354 <flatcc_json_parser_match_constant@@Base+0xfc>
   296a8:	ldr	r1, [r0, #4]
   296ac:	mov	ip, #5
   296b0:	str	ip, [r0, #24]
   296b4:	str	r3, [r0, #36]	; 0x24
   296b8:	sub	r1, r3, r1
   296bc:	mov	r3, r2
   296c0:	add	r1, r1, #1
   296c4:	str	r1, [r0, #20]
   296c8:	b	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   296cc:	cmp	r4, r2
   296d0:	beq	2945c <flatcc_json_parser_match_constant@@Base+0x204>
   296d4:	mov	r3, r4
   296d8:	b	294f4 <flatcc_json_parser_match_constant@@Base+0x29c>
   296dc:	ldrb	r2, [r4, #2]
   296e0:	cmp	r2, #32
   296e4:	addhi	r3, r4, #2
   296e8:	bls	29560 <flatcc_json_parser_match_constant@@Base+0x308>
   296ec:	b	29328 <flatcc_json_parser_match_constant@@Base+0xd0>
   296f0:	mov	r4, r2
   296f4:	b	2949c <flatcc_json_parser_match_constant@@Base+0x244>

000296f8 <flatcc_json_parser_double@@Base>:
   296f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   296fc:	cmp	r1, r2
   29700:	mov	r5, r2
   29704:	strd	r6, [sp, #8]
   29708:	strd	r8, [sp, #16]
   2970c:	mov	r8, #0
   29710:	mov	r9, #0
   29714:	str	sl, [sp, #24]
   29718:	str	lr, [sp, #28]
   2971c:	strd	r8, [r3]
   29720:	beq	297e0 <flatcc_json_parser_double@@Base+0xe8>
   29724:	mov	r6, r3
   29728:	ldrb	r3, [r1]
   2972c:	mov	r4, r1
   29730:	mov	r7, r0
   29734:	cmp	r3, #45	; 0x2d
   29738:	addeq	r3, r1, #1
   2973c:	movne	r3, r1
   29740:	sub	r2, r2, r3
   29744:	cmp	r2, #1
   29748:	ble	29760 <flatcc_json_parser_double@@Base+0x68>
   2974c:	ldrb	r2, [r3]
   29750:	cmp	r2, #46	; 0x2e
   29754:	beq	2980c <flatcc_json_parser_double@@Base+0x114>
   29758:	cmp	r2, #48	; 0x30
   2975c:	beq	29800 <flatcc_json_parser_double@@Base+0x108>
   29760:	mov	r2, r6
   29764:	sub	r1, r5, r4
   29768:	mov	r0, r4
   2976c:	bl	27528 <grisu3_diy_fp_encode_double@@Base+0x5a4>
   29770:	cmp	r4, r0
   29774:	cmpne	r0, #0
   29778:	mov	r3, r0
   2977c:	bne	297c4 <flatcc_json_parser_double@@Base+0xcc>
   29780:	vldr	d7, [r6]
   29784:	vldr	d6, [pc, #156]	; 29828 <flatcc_json_parser_double@@Base+0x130>
   29788:	ldr	r3, [r7, #24]
   2978c:	vabs.f64	d7, d7
   29790:	vcmp.f64	d7, d6
   29794:	vmrs	APSR_nzcv, fpscr
   29798:	bgt	297e8 <flatcc_json_parser_double@@Base+0xf0>
   2979c:	cmp	r3, #0
   297a0:	bne	297e0 <flatcc_json_parser_double@@Base+0xe8>
   297a4:	ldr	r2, [r7, #4]
   297a8:	mov	r3, r5
   297ac:	mov	r1, #6
   297b0:	str	r1, [r7, #24]
   297b4:	str	r4, [r7, #36]	; 0x24
   297b8:	sub	r4, r4, r2
   297bc:	add	r4, r4, #1
   297c0:	str	r4, [r7, #20]
   297c4:	ldrd	r4, [sp]
   297c8:	mov	r0, r3
   297cc:	ldrd	r6, [sp, #8]
   297d0:	ldrd	r8, [sp, #16]
   297d4:	ldr	sl, [sp, #24]
   297d8:	add	sp, sp, #28
   297dc:	pop	{pc}		; (ldr pc, [sp], #4)
   297e0:	mov	r3, r5
   297e4:	b	297c4 <flatcc_json_parser_double@@Base+0xcc>
   297e8:	cmp	r3, #0
   297ec:	bne	297e0 <flatcc_json_parser_double@@Base+0xe8>
   297f0:	mov	r1, #7
   297f4:	mov	r3, r5
   297f8:	ldr	r2, [r7, #4]
   297fc:	b	297b0 <flatcc_json_parser_double@@Base+0xb8>
   29800:	ldrb	r3, [r3, #1]
   29804:	cmp	r3, #48	; 0x30
   29808:	bne	29760 <flatcc_json_parser_double@@Base+0x68>
   2980c:	ldr	r3, [r7, #24]
   29810:	cmp	r3, #0
   29814:	bne	297e0 <flatcc_json_parser_double@@Base+0xe8>
   29818:	mov	r1, #6
   2981c:	mov	r3, r5
   29820:	ldr	r2, [r7, #4]
   29824:	b	297b0 <flatcc_json_parser_double@@Base+0xb8>
   29828:			; <UNDEFINED> instruction: 0xffffffff
   2982c:	svcvc	0x00efffff

00029830 <flatcc_json_parser_float@@Base>:
   29830:	mov	ip, #0
   29834:	cmp	r1, r2
   29838:	strd	r4, [sp, #-20]!	; 0xffffffec
   2983c:	mov	r5, r2
   29840:	strd	r6, [sp, #8]
   29844:	str	lr, [sp, #16]
   29848:	sub	sp, sp, #12
   2984c:	str	ip, [r3]
   29850:	beq	29914 <flatcc_json_parser_float@@Base+0xe4>
   29854:	mov	r6, r3
   29858:	ldrb	r3, [r1]
   2985c:	mov	r4, r1
   29860:	mov	r7, r0
   29864:	cmp	r3, #45	; 0x2d
   29868:	addeq	r3, r1, #1
   2986c:	movne	r3, r1
   29870:	sub	r2, r2, r3
   29874:	cmp	r2, #1
   29878:	ble	29890 <flatcc_json_parser_float@@Base+0x60>
   2987c:	ldrb	r2, [r3]
   29880:	cmp	r2, #46	; 0x2e
   29884:	beq	29928 <flatcc_json_parser_float@@Base+0xf8>
   29888:	cmp	r2, #48	; 0x30
   2988c:	beq	2991c <flatcc_json_parser_float@@Base+0xec>
   29890:	mov	r2, sp
   29894:	sub	r1, r5, r4
   29898:	mov	r0, r4
   2989c:	bl	27528 <grisu3_diy_fp_encode_double@@Base+0x5a4>
   298a0:	vldr	d6, [sp]
   298a4:	vldr	s14, [pc, #200]	; 29974 <flatcc_json_parser_float@@Base+0x144>
   298a8:	vcvt.f32.f64	s15, d6
   298ac:	vabs.f32	s11, s15
   298b0:	vstr	s15, [r6]
   298b4:	vcmp.f32	s11, s14
   298b8:	vmrs	APSR_nzcv, fpscr
   298bc:	bgt	298e0 <flatcc_json_parser_float@@Base+0xb0>
   298c0:	cmp	r4, r0
   298c4:	cmpne	r0, #0
   298c8:	beq	29958 <flatcc_json_parser_float@@Base+0x128>
   298cc:	add	sp, sp, #12
   298d0:	ldrd	r4, [sp]
   298d4:	ldrd	r6, [sp, #8]
   298d8:	add	sp, sp, #16
   298dc:	pop	{pc}		; (ldr pc, [sp], #4)
   298e0:	vcmpe.f64	d6, #0.0
   298e4:	vldr	s15, [pc, #140]	; 29978 <flatcc_json_parser_float@@Base+0x148>
   298e8:	vldr	s14, [pc, #140]	; 2997c <flatcc_json_parser_float@@Base+0x14c>
   298ec:	ldr	r3, [r7, #24]
   298f0:	vmrs	APSR_nzcv, fpscr
   298f4:	vmovpl.f32	s15, s14
   298f8:	cmp	r3, #0
   298fc:	vstr	s15, [r6]
   29900:	bne	29914 <flatcc_json_parser_float@@Base+0xe4>
   29904:	mov	r2, #7
   29908:	mov	r0, r5
   2990c:	ldr	r3, [r7, #4]
   29910:	b	29940 <flatcc_json_parser_float@@Base+0x110>
   29914:	mov	r0, r5
   29918:	b	298cc <flatcc_json_parser_float@@Base+0x9c>
   2991c:	ldrb	r3, [r3, #1]
   29920:	cmp	r3, #48	; 0x30
   29924:	bne	29890 <flatcc_json_parser_float@@Base+0x60>
   29928:	ldr	r3, [r7, #24]
   2992c:	cmp	r3, #0
   29930:	bne	29914 <flatcc_json_parser_float@@Base+0xe4>
   29934:	ldr	r3, [r7, #4]
   29938:	mov	r2, #6
   2993c:	mov	r0, r5
   29940:	str	r2, [r7, #24]
   29944:	str	r4, [r7, #36]	; 0x24
   29948:	sub	r4, r4, r3
   2994c:	add	r4, r4, #1
   29950:	str	r4, [r7, #20]
   29954:	b	298cc <flatcc_json_parser_float@@Base+0x9c>
   29958:	ldr	r3, [r7, #24]
   2995c:	cmp	r3, #0
   29960:	bne	29914 <flatcc_json_parser_float@@Base+0xe4>
   29964:	mov	r0, r5
   29968:	mov	r2, #6
   2996c:	ldr	r3, [r7, #4]
   29970:	b	29940 <flatcc_json_parser_float@@Base+0x110>
   29974:	svcvc	0x007fffff
   29978:			; <UNDEFINED> instruction: 0xff800000
   2997c:	svcvc	0x00800000

00029980 <flatcc_json_parser_generic_json@@Base>:
   29980:	cmp	r1, r2
   29984:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29988:	mov	r4, r2
   2998c:	strd	r6, [sp, #8]
   29990:	strd	r8, [sp, #16]
   29994:	strd	sl, [sp, #24]
   29998:	str	lr, [sp, #32]
   2999c:	sub	sp, sp, #524	; 0x20c
   299a0:	beq	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   299a4:	ldrb	r3, [r1]
   299a8:	add	r8, sp, #8
   299ac:	mov	r5, r1
   299b0:	mov	r6, r0
   299b4:	mov	sl, #125	; 0x7d
   299b8:	mov	r7, r8
   299bc:	mov	r9, #17
   299c0:	cmp	r7, r8
   299c4:	beq	29a68 <flatcc_json_parser_generic_json@@Base+0xe8>
   299c8:	ldrb	r2, [r7, #-1]
   299cc:	cmp	r2, #125	; 0x7d
   299d0:	beq	2a7b8 <flatcc_json_parser_generic_json@@Base+0xe38>
   299d4:	cmp	r3, #57	; 0x39
   299d8:	bls	29a70 <flatcc_json_parser_generic_json@@Base+0xf0>
   299dc:	cmp	r3, #91	; 0x5b
   299e0:	beq	2a374 <flatcc_json_parser_generic_json@@Base+0x9f4>
   299e4:	cmp	r3, #123	; 0x7b
   299e8:	bne	29c1c <flatcc_json_parser_generic_json@@Base+0x29c>
   299ec:	add	r3, sp, #520	; 0x208
   299f0:	cmp	r7, r3
   299f4:	beq	2b004 <flatcc_json_parser_generic_json@@Base+0x1684>
   299f8:	add	r1, r5, #1
   299fc:	strb	sl, [r7], #1
   29a00:	sub	r3, r4, r1
   29a04:	cmp	r3, #1
   29a08:	ble	29a2c <flatcc_json_parser_generic_json@@Base+0xac>
   29a0c:	ldrb	r3, [r5, #1]
   29a10:	cmp	r3, #32
   29a14:	bhi	2a8d8 <flatcc_json_parser_generic_json@@Base+0xf58>
   29a18:	bne	29a2c <flatcc_json_parser_generic_json@@Base+0xac>
   29a1c:	ldrb	r3, [r5, #2]
   29a20:	cmp	r3, #32
   29a24:	addhi	r5, r5, #2
   29a28:	bhi	2a8dc <flatcc_json_parser_generic_json@@Base+0xf5c>
   29a2c:	cmp	r1, r4
   29a30:	beq	29a60 <flatcc_json_parser_generic_json@@Base+0xe0>
   29a34:	ldrb	r3, [r1]
   29a38:	cmp	r3, #32
   29a3c:	bne	2a488 <flatcc_json_parser_generic_json@@Base+0xb08>
   29a40:	add	r2, r1, #1
   29a44:	b	29a54 <flatcc_json_parser_generic_json@@Base+0xd4>
   29a48:	ldrb	r3, [r2], #1
   29a4c:	cmp	r3, #32
   29a50:	bne	2a488 <flatcc_json_parser_generic_json@@Base+0xb08>
   29a54:	cmp	r4, r2
   29a58:	mov	r1, r2
   29a5c:	bne	29a48 <flatcc_json_parser_generic_json@@Base+0xc8>
   29a60:	mov	r4, r1
   29a64:	b	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   29a68:	cmp	r3, #57	; 0x39
   29a6c:	bhi	2a190 <flatcc_json_parser_generic_json@@Base+0x810>
   29a70:	cmp	r3, #48	; 0x30
   29a74:	bcs	2a674 <flatcc_json_parser_generic_json@@Base+0xcf4>
   29a78:	cmp	r3, #34	; 0x22
   29a7c:	bne	29c14 <flatcc_json_parser_generic_json@@Base+0x294>
   29a80:	add	r1, r5, #1
   29a84:	cmp	r4, r1
   29a88:	beq	2ae30 <flatcc_json_parser_generic_json@@Base+0x14b0>
   29a8c:	ldrb	r3, [r5, #1]
   29a90:	cmp	r3, #34	; 0x22
   29a94:	beq	29b24 <flatcc_json_parser_generic_json@@Base+0x1a4>
   29a98:	mov	r5, #20
   29a9c:	cmp	r4, r1
   29aa0:	beq	2a470 <flatcc_json_parser_generic_json@@Base+0xaf0>
   29aa4:	cmp	r3, #92	; 0x5c
   29aa8:	cmpne	r3, #31
   29aac:	addhi	r0, r1, #1
   29ab0:	bls	2a434 <flatcc_json_parser_generic_json@@Base+0xab4>
   29ab4:	cmp	r4, r0
   29ab8:	mov	r1, r0
   29abc:	beq	2a470 <flatcc_json_parser_generic_json@@Base+0xaf0>
   29ac0:	ldrb	r3, [r0]
   29ac4:	add	r0, r0, #1
   29ac8:	cmp	r3, #34	; 0x22
   29acc:	cmpne	r3, #31
   29ad0:	movhi	r2, #1
   29ad4:	movls	r2, #0
   29ad8:	cmp	r3, #92	; 0x5c
   29adc:	moveq	r2, #0
   29ae0:	andne	r2, r2, #1
   29ae4:	cmp	r2, #0
   29ae8:	bne	29ab4 <flatcc_json_parser_generic_json@@Base+0x134>
   29aec:	cmp	r3, #31
   29af0:	bls	2a43c <flatcc_json_parser_generic_json@@Base+0xabc>
   29af4:	cmp	r3, #34	; 0x22
   29af8:	beq	29b24 <flatcc_json_parser_generic_json@@Base+0x1a4>
   29afc:	add	r3, sp, #4
   29b00:	mov	r2, r4
   29b04:	mov	r0, r6
   29b08:	bl	28bb0 <flatcc_json_parser_string_escape@@Base>
   29b0c:	cmp	r4, r0
   29b10:	mov	r1, r0
   29b14:	beq	2ae30 <flatcc_json_parser_generic_json@@Base+0x14b0>
   29b18:	ldrb	r3, [r0]
   29b1c:	cmp	r3, #34	; 0x22
   29b20:	bne	29a9c <flatcc_json_parser_generic_json@@Base+0x11c>
   29b24:	add	r0, r1, #1
   29b28:	cmp	r4, r0
   29b2c:	beq	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   29b30:	cmp	r7, r8
   29b34:	beq	29be0 <flatcc_json_parser_generic_json@@Base+0x260>
   29b38:	ldrb	r3, [r7, #-1]
   29b3c:	sub	fp, r7, #1
   29b40:	sub	r2, r4, r0
   29b44:	cmp	r3, #93	; 0x5d
   29b48:	beq	29c4c <flatcc_json_parser_generic_json@@Base+0x2cc>
   29b4c:	cmp	r2, #1
   29b50:	ble	29b64 <flatcc_json_parser_generic_json@@Base+0x1e4>
   29b54:	ldrb	r3, [r0]
   29b58:	cmp	r3, #32
   29b5c:	bhi	29b74 <flatcc_json_parser_generic_json@@Base+0x1f4>
   29b60:	beq	29cc8 <flatcc_json_parser_generic_json@@Base+0x348>
   29b64:	mov	r1, r0
   29b68:	mov	r2, r4
   29b6c:	mov	r0, r6
   29b70:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   29b74:	cmp	r4, r0
   29b78:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29b7c:	ldrb	r3, [r0]
   29b80:	cmp	r3, #44	; 0x2c
   29b84:	beq	29cdc <flatcc_json_parser_generic_json@@Base+0x35c>
   29b88:	cmp	r3, #125	; 0x7d
   29b8c:	beq	29f24 <flatcc_json_parser_generic_json@@Base+0x5a4>
   29b90:	ldr	r3, [r6, #24]
   29b94:	cmp	r3, #0
   29b98:	beq	29cbc <flatcc_json_parser_generic_json@@Base+0x33c>
   29b9c:	mov	r0, r4
   29ba0:	cmp	fp, r8
   29ba4:	beq	29be0 <flatcc_json_parser_generic_json@@Base+0x260>
   29ba8:	ldrb	r2, [fp, #-1]
   29bac:	ldr	r3, [r6, #24]
   29bb0:	cmp	r2, #93	; 0x5d
   29bb4:	moveq	r2, #9
   29bb8:	movne	r2, #10
   29bbc:	cmp	r3, #0
   29bc0:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   29bc4:	ldr	r3, [r6, #4]
   29bc8:	str	r2, [r6, #24]
   29bcc:	str	r0, [r6, #36]	; 0x24
   29bd0:	sub	r3, r0, r3
   29bd4:	mov	r0, r4
   29bd8:	add	r3, r3, #1
   29bdc:	str	r3, [r6, #20]
   29be0:	add	sp, sp, #524	; 0x20c
   29be4:	ldrd	r4, [sp]
   29be8:	ldrd	r6, [sp, #8]
   29bec:	ldrd	r8, [sp, #16]
   29bf0:	ldrd	sl, [sp, #24]
   29bf4:	add	sp, sp, #32
   29bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   29bfc:	cmp	r3, #57	; 0x39
   29c00:	bhi	299dc <flatcc_json_parser_generic_json@@Base+0x5c>
   29c04:	cmp	r3, #48	; 0x30
   29c08:	bcs	2a674 <flatcc_json_parser_generic_json@@Base+0xcf4>
   29c0c:	cmp	r3, #34	; 0x22
   29c10:	beq	2a784 <flatcc_json_parser_generic_json@@Base+0xe04>
   29c14:	cmp	r3, #45	; 0x2d
   29c18:	beq	2a674 <flatcc_json_parser_generic_json@@Base+0xcf4>
   29c1c:	mov	r2, r4
   29c20:	mov	r1, r5
   29c24:	mov	r0, r6
   29c28:	bl	2906c <flatcc_json_parser_skip_constant@@Base>
   29c2c:	cmp	r0, r5
   29c30:	bne	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   29c34:	ldr	r3, [r6, #24]
   29c38:	cmp	r3, #0
   29c3c:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   29c40:	mov	r2, #5
   29c44:	ldr	r3, [r6, #4]
   29c48:	b	2b018 <flatcc_json_parser_generic_json@@Base+0x1698>
   29c4c:	cmp	r2, #1
   29c50:	ble	29c64 <flatcc_json_parser_generic_json@@Base+0x2e4>
   29c54:	ldrb	r3, [r0]
   29c58:	cmp	r3, #32
   29c5c:	bhi	29c74 <flatcc_json_parser_generic_json@@Base+0x2f4>
   29c60:	beq	2a098 <flatcc_json_parser_generic_json@@Base+0x718>
   29c64:	mov	r1, r0
   29c68:	mov	r2, r4
   29c6c:	mov	r0, r6
   29c70:	bl	2806c <flatcc_json_parser_space_ext@@Base>
   29c74:	cmp	r4, r0
   29c78:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29c7c:	ldrb	r3, [r0]
   29c80:	cmp	r3, #44	; 0x2c
   29c84:	beq	2a0ac <flatcc_json_parser_generic_json@@Base+0x72c>
   29c88:	cmp	r3, #93	; 0x5d
   29c8c:	beq	2a1f8 <flatcc_json_parser_generic_json@@Base+0x878>
   29c90:	ldr	r3, [r6, #24]
   29c94:	cmp	r3, #0
   29c98:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29c9c:	ldr	r1, [r6, #4]
   29ca0:	mov	r3, #9
   29ca4:	sub	r1, r0, r1
   29ca8:	str	r3, [r6, #24]
   29cac:	add	r1, r1, #1
   29cb0:	str	r1, [r6, #20]
   29cb4:	str	r0, [r6, #36]	; 0x24
   29cb8:	b	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29cbc:	mov	r3, #10
   29cc0:	ldr	r1, [r6, #4]
   29cc4:	b	29ca4 <flatcc_json_parser_generic_json@@Base+0x324>
   29cc8:	ldrb	r3, [r0, #1]
   29ccc:	cmp	r3, #32
   29cd0:	addhi	r0, r0, #1
   29cd4:	bls	29b64 <flatcc_json_parser_generic_json@@Base+0x1e4>
   29cd8:	b	29b74 <flatcc_json_parser_generic_json@@Base+0x1f4>
   29cdc:	add	r5, r0, #1
   29ce0:	sub	r3, r4, r5
   29ce4:	cmp	r3, #1
   29ce8:	ble	29cfc <flatcc_json_parser_generic_json@@Base+0x37c>
   29cec:	ldrb	r3, [r0, #1]
   29cf0:	cmp	r3, #32
   29cf4:	bhi	2a084 <flatcc_json_parser_generic_json@@Base+0x704>
   29cf8:	beq	2a074 <flatcc_json_parser_generic_json@@Base+0x6f4>
   29cfc:	cmp	r4, r5
   29d00:	beq	29d30 <flatcc_json_parser_generic_json@@Base+0x3b0>
   29d04:	ldrb	r3, [r5]
   29d08:	cmp	r3, #32
   29d0c:	bne	29d5c <flatcc_json_parser_generic_json@@Base+0x3dc>
   29d10:	add	r2, r5, #1
   29d14:	b	29d24 <flatcc_json_parser_generic_json@@Base+0x3a4>
   29d18:	ldrb	r3, [r2], #1
   29d1c:	cmp	r3, #32
   29d20:	bne	29d5c <flatcc_json_parser_generic_json@@Base+0x3dc>
   29d24:	cmp	r4, r2
   29d28:	mov	r5, r2
   29d2c:	bne	29d18 <flatcc_json_parser_generic_json@@Base+0x398>
   29d30:	ldr	r3, [r6, #24]
   29d34:	cmp	r3, #0
   29d38:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29d3c:	ldr	r3, [r6, #4]
   29d40:	mov	r2, #10
   29d44:	sub	r3, r5, r3
   29d48:	str	r2, [r6, #24]
   29d4c:	add	r3, r3, #1
   29d50:	str	r3, [r6, #20]
   29d54:	str	r5, [r6, #36]	; 0x24
   29d58:	b	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29d5c:	cmp	r3, #32
   29d60:	bhi	29e20 <flatcc_json_parser_generic_json@@Base+0x4a0>
   29d64:	sub	r3, r3, #9
   29d68:	cmp	r3, #23
   29d6c:	ldrls	pc, [pc, r3, lsl #2]
   29d70:	b	29ef8 <flatcc_json_parser_generic_json@@Base+0x578>
   29d74:	strdeq	r9, [r2], -r0
   29d78:	strdeq	r9, [r2], -r8
   29d7c:	strdeq	r9, [r2], -r8
   29d80:	strdeq	r9, [r2], -r8
   29d84:	ldrdeq	r9, [r2], -r4
   29d88:	strdeq	r9, [r2], -r8
   29d8c:	strdeq	r9, [r2], -r8
   29d90:	strdeq	r9, [r2], -r8
   29d94:	strdeq	r9, [r2], -r8
   29d98:	strdeq	r9, [r2], -r8
   29d9c:	strdeq	r9, [r2], -r8
   29da0:	strdeq	r9, [r2], -r8
   29da4:	strdeq	r9, [r2], -r8
   29da8:	strdeq	r9, [r2], -r8
   29dac:	strdeq	r9, [r2], -r8
   29db0:	strdeq	r9, [r2], -r8
   29db4:	strdeq	r9, [r2], -r8
   29db8:	strdeq	r9, [r2], -r8
   29dbc:	strdeq	r9, [r2], -r8
   29dc0:	strdeq	r9, [r2], -r8
   29dc4:	strdeq	r9, [r2], -r8
   29dc8:	strdeq	r9, [r2], -r8
   29dcc:	strdeq	r9, [r2], -r8
   29dd0:	strdeq	r9, [r2], -ip
   29dd4:	sub	r3, r4, r5
   29dd8:	add	r2, r5, #1
   29ddc:	cmp	r3, #1
   29de0:	ble	29df0 <flatcc_json_parser_generic_json@@Base+0x470>
   29de4:	ldrb	r3, [r5, #1]
   29de8:	cmp	r3, #10
   29dec:	addeq	r2, r5, #2
   29df0:	mov	r5, r2
   29df4:	b	29dfc <flatcc_json_parser_generic_json@@Base+0x47c>
   29df8:	add	r5, r5, #1
   29dfc:	ldr	r3, [r6, #16]
   29e00:	str	r5, [r6, #4]
   29e04:	add	r3, r3, #1
   29e08:	str	r3, [r6, #16]
   29e0c:	cmp	r4, r5
   29e10:	beq	29d30 <flatcc_json_parser_generic_json@@Base+0x3b0>
   29e14:	ldrb	r3, [r5]
   29e18:	cmp	r3, #32
   29e1c:	bls	29d64 <flatcc_json_parser_generic_json@@Base+0x3e4>
   29e20:	cmp	r3, #125	; 0x7d
   29e24:	bne	299c0 <flatcc_json_parser_generic_json@@Base+0x40>
   29e28:	add	r0, r5, #1
   29e2c:	sub	r3, r4, r0
   29e30:	cmp	r3, #1
   29e34:	ble	29e48 <flatcc_json_parser_generic_json@@Base+0x4c8>
   29e38:	ldrb	r3, [r5, #1]
   29e3c:	cmp	r3, #32
   29e40:	bhi	2a664 <flatcc_json_parser_generic_json@@Base+0xce4>
   29e44:	beq	2afc0 <flatcc_json_parser_generic_json@@Base+0x1640>
   29e48:	cmp	r4, r0
   29e4c:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29e50:	ldrb	r2, [r0]
   29e54:	cmp	r2, #32
   29e58:	bne	29e78 <flatcc_json_parser_generic_json@@Base+0x4f8>
   29e5c:	add	r3, r0, #1
   29e60:	cmp	r4, r3
   29e64:	mov	r0, r3
   29e68:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29e6c:	ldrb	r2, [r3], #1
   29e70:	cmp	r2, #32
   29e74:	beq	29e60 <flatcc_json_parser_generic_json@@Base+0x4e0>
   29e78:	cmp	r2, #32
   29e7c:	bhi	2a66c <flatcc_json_parser_generic_json@@Base+0xcec>
   29e80:	sub	r2, r2, #9
   29e84:	cmp	r2, #23
   29e88:	ldrls	pc, [pc, r2, lsl #2]
   29e8c:	b	2aabc <flatcc_json_parser_generic_json@@Base+0x113c>
   29e90:	andeq	sl, r2, ip, lsl #20
   29e94:	andeq	sl, r2, r0, ror #19
   29e98:			; <UNDEFINED> instruction: 0x0002aabc
   29e9c:			; <UNDEFINED> instruction: 0x0002aabc
   29ea0:			; <UNDEFINED> instruction: 0x0002a9bc
   29ea4:			; <UNDEFINED> instruction: 0x0002aabc
   29ea8:			; <UNDEFINED> instruction: 0x0002aabc
   29eac:			; <UNDEFINED> instruction: 0x0002aabc
   29eb0:			; <UNDEFINED> instruction: 0x0002aabc
   29eb4:			; <UNDEFINED> instruction: 0x0002aabc
   29eb8:			; <UNDEFINED> instruction: 0x0002aabc
   29ebc:			; <UNDEFINED> instruction: 0x0002aabc
   29ec0:			; <UNDEFINED> instruction: 0x0002aabc
   29ec4:			; <UNDEFINED> instruction: 0x0002aabc
   29ec8:			; <UNDEFINED> instruction: 0x0002aabc
   29ecc:			; <UNDEFINED> instruction: 0x0002aabc
   29ed0:			; <UNDEFINED> instruction: 0x0002aabc
   29ed4:			; <UNDEFINED> instruction: 0x0002aabc
   29ed8:			; <UNDEFINED> instruction: 0x0002aabc
   29edc:			; <UNDEFINED> instruction: 0x0002aabc
   29ee0:			; <UNDEFINED> instruction: 0x0002aabc
   29ee4:			; <UNDEFINED> instruction: 0x0002aabc
   29ee8:			; <UNDEFINED> instruction: 0x0002aabc
   29eec:	andeq	r9, r2, r8, asr #28
   29ef0:	add	r5, r5, #1
   29ef4:	b	29e0c <flatcc_json_parser_generic_json@@Base+0x48c>
   29ef8:	ldr	r3, [r6, #24]
   29efc:	cmp	r3, #0
   29f00:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29f04:	ldr	r3, [r6, #4]
   29f08:	mov	r2, #5
   29f0c:	str	r5, [r6, #36]	; 0x24
   29f10:	str	r2, [r6, #24]
   29f14:	sub	r5, r5, r3
   29f18:	add	r5, r5, #1
   29f1c:	str	r5, [r6, #20]
   29f20:	b	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29f24:	add	r1, r0, #1
   29f28:	sub	r3, r4, r1
   29f2c:	cmp	r3, #1
   29f30:	ble	29f44 <flatcc_json_parser_generic_json@@Base+0x5c4>
   29f34:	ldrb	r3, [r0, #1]
   29f38:	cmp	r3, #32
   29f3c:	bhi	2a660 <flatcc_json_parser_generic_json@@Base+0xce0>
   29f40:	beq	2a8a8 <flatcc_json_parser_generic_json@@Base+0xf28>
   29f44:	cmp	r4, r1
   29f48:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29f4c:	ldrb	r2, [r1]
   29f50:	cmp	r2, #32
   29f54:	bne	29f74 <flatcc_json_parser_generic_json@@Base+0x5f4>
   29f58:	add	r3, r1, #1
   29f5c:	cmp	r4, r3
   29f60:	mov	r1, r3
   29f64:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   29f68:	ldrb	r2, [r3], #1
   29f6c:	cmp	r2, #32
   29f70:	beq	29f5c <flatcc_json_parser_generic_json@@Base+0x5dc>
   29f74:	cmp	r2, #32
   29f78:	bhi	2a038 <flatcc_json_parser_generic_json@@Base+0x6b8>
   29f7c:	sub	r2, r2, #9
   29f80:	cmp	r2, #23
   29f84:	ldrls	pc, [pc, r2, lsl #2]
   29f88:	b	2a048 <flatcc_json_parser_generic_json@@Base+0x6c8>
   29f8c:	andeq	sl, r2, r0, asr #32
   29f90:	andeq	sl, r2, r0, lsl r0
   29f94:	andeq	sl, r2, r8, asr #32
   29f98:	andeq	sl, r2, r8, asr #32
   29f9c:	andeq	r9, r2, ip, ror #31
   29fa0:	andeq	sl, r2, r8, asr #32
   29fa4:	andeq	sl, r2, r8, asr #32
   29fa8:	andeq	sl, r2, r8, asr #32
   29fac:	andeq	sl, r2, r8, asr #32
   29fb0:	andeq	sl, r2, r8, asr #32
   29fb4:	andeq	sl, r2, r8, asr #32
   29fb8:	andeq	sl, r2, r8, asr #32
   29fbc:	andeq	sl, r2, r8, asr #32
   29fc0:	andeq	sl, r2, r8, asr #32
   29fc4:	andeq	sl, r2, r8, asr #32
   29fc8:	andeq	sl, r2, r8, asr #32
   29fcc:	andeq	sl, r2, r8, asr #32
   29fd0:	andeq	sl, r2, r8, asr #32
   29fd4:	andeq	sl, r2, r8, asr #32
   29fd8:	andeq	sl, r2, r8, asr #32
   29fdc:	andeq	sl, r2, r8, asr #32
   29fe0:	andeq	sl, r2, r8, asr #32
   29fe4:	andeq	sl, r2, r8, asr #32
   29fe8:	andeq	r9, r2, r4, asr #30
   29fec:	sub	r3, r4, r1
   29ff0:	add	r2, r1, #1
   29ff4:	cmp	r3, #1
   29ff8:	ble	2a008 <flatcc_json_parser_generic_json@@Base+0x688>
   29ffc:	ldrb	r3, [r1, #1]
   2a000:	cmp	r3, #10
   2a004:	addeq	r2, r1, #2
   2a008:	mov	r1, r2
   2a00c:	b	2a014 <flatcc_json_parser_generic_json@@Base+0x694>
   2a010:	add	r1, r1, #1
   2a014:	ldr	r3, [r6, #16]
   2a018:	str	r1, [r6, #4]
   2a01c:	add	r3, r3, #1
   2a020:	str	r3, [r6, #16]
   2a024:	cmp	r4, r1
   2a028:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a02c:	ldrb	r2, [r1]
   2a030:	cmp	r2, #32
   2a034:	bls	29f7c <flatcc_json_parser_generic_json@@Base+0x5fc>
   2a038:	mov	r0, r1
   2a03c:	b	2a66c <flatcc_json_parser_generic_json@@Base+0xcec>
   2a040:	add	r1, r1, #1
   2a044:	b	2a024 <flatcc_json_parser_generic_json@@Base+0x6a4>
   2a048:	ldr	r3, [r6, #24]
   2a04c:	cmp	r3, #0
   2a050:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a054:	ldr	r3, [r6, #4]
   2a058:	mov	r2, #5
   2a05c:	str	r1, [r6, #36]	; 0x24
   2a060:	str	r2, [r6, #24]
   2a064:	sub	r1, r1, r3
   2a068:	add	r1, r1, #1
   2a06c:	str	r1, [r6, #20]
   2a070:	b	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a074:	ldrb	r3, [r0, #2]
   2a078:	cmp	r3, #32
   2a07c:	addhi	r5, r0, #2
   2a080:	bls	29cfc <flatcc_json_parser_generic_json@@Base+0x37c>
   2a084:	cmp	r4, r5
   2a088:	beq	29d30 <flatcc_json_parser_generic_json@@Base+0x3b0>
   2a08c:	cmp	r3, #125	; 0x7d
   2a090:	bne	299c0 <flatcc_json_parser_generic_json@@Base+0x40>
   2a094:	b	29e28 <flatcc_json_parser_generic_json@@Base+0x4a8>
   2a098:	ldrb	r3, [r0, #1]
   2a09c:	cmp	r3, #32
   2a0a0:	addhi	r0, r0, #1
   2a0a4:	bls	29c64 <flatcc_json_parser_generic_json@@Base+0x2e4>
   2a0a8:	b	29c74 <flatcc_json_parser_generic_json@@Base+0x2f4>
   2a0ac:	add	r5, r0, #1
   2a0b0:	sub	r3, r4, r5
   2a0b4:	cmp	r3, #1
   2a0b8:	ble	2a0cc <flatcc_json_parser_generic_json@@Base+0x74c>
   2a0bc:	ldrb	r3, [r0, #1]
   2a0c0:	cmp	r3, #32
   2a0c4:	bhi	2a1b4 <flatcc_json_parser_generic_json@@Base+0x834>
   2a0c8:	beq	2a1a4 <flatcc_json_parser_generic_json@@Base+0x824>
   2a0cc:	cmp	r4, r5
   2a0d0:	beq	2a100 <flatcc_json_parser_generic_json@@Base+0x780>
   2a0d4:	ldrb	r3, [r5]
   2a0d8:	cmp	r3, #32
   2a0dc:	bne	2a118 <flatcc_json_parser_generic_json@@Base+0x798>
   2a0e0:	add	r2, r5, #1
   2a0e4:	b	2a0f4 <flatcc_json_parser_generic_json@@Base+0x774>
   2a0e8:	ldrb	r3, [r2], #1
   2a0ec:	cmp	r3, #32
   2a0f0:	bne	2a118 <flatcc_json_parser_generic_json@@Base+0x798>
   2a0f4:	cmp	r2, r4
   2a0f8:	mov	r5, r2
   2a0fc:	bne	2a0e8 <flatcc_json_parser_generic_json@@Base+0x768>
   2a100:	ldr	r3, [r6, #24]
   2a104:	cmp	r3, #0
   2a108:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a10c:	mov	r2, #9
   2a110:	ldr	r3, [r6, #4]
   2a114:	b	29d44 <flatcc_json_parser_generic_json@@Base+0x3c4>
   2a118:	cmp	r3, #32
   2a11c:	bhi	2a1bc <flatcc_json_parser_generic_json@@Base+0x83c>
   2a120:	sub	r3, r3, #9
   2a124:	cmp	r3, #23
   2a128:	ldrls	pc, [pc, r3, lsl #2]
   2a12c:	b	2a3f0 <flatcc_json_parser_generic_json@@Base+0xa70>
   2a130:	andeq	sl, r2, r0, lsl r3
   2a134:	andeq	sl, r2, r8, lsl #6
   2a138:	strdeq	sl, [r2], -r0
   2a13c:	strdeq	sl, [r2], -r0
   2a140:	andeq	sl, r2, r0, asr #5
   2a144:	strdeq	sl, [r2], -r0
   2a148:	strdeq	sl, [r2], -r0
   2a14c:	strdeq	sl, [r2], -r0
   2a150:	strdeq	sl, [r2], -r0
   2a154:	strdeq	sl, [r2], -r0
   2a158:	strdeq	sl, [r2], -r0
   2a15c:	strdeq	sl, [r2], -r0
   2a160:	strdeq	sl, [r2], -r0
   2a164:	strdeq	sl, [r2], -r0
   2a168:	strdeq	sl, [r2], -r0
   2a16c:	strdeq	sl, [r2], -r0
   2a170:	strdeq	sl, [r2], -r0
   2a174:	strdeq	sl, [r2], -r0
   2a178:	strdeq	sl, [r2], -r0
   2a17c:	strdeq	sl, [r2], -r0
   2a180:	strdeq	sl, [r2], -r0
   2a184:	strdeq	sl, [r2], -r0
   2a188:	strdeq	sl, [r2], -r0
   2a18c:	andeq	sl, r2, ip, asr #1
   2a190:	cmp	r3, #91	; 0x5b
   2a194:	beq	2a374 <flatcc_json_parser_generic_json@@Base+0x9f4>
   2a198:	cmp	r3, #123	; 0x7b
   2a19c:	beq	299f8 <flatcc_json_parser_generic_json@@Base+0x78>
   2a1a0:	b	29c1c <flatcc_json_parser_generic_json@@Base+0x29c>
   2a1a4:	ldrb	r3, [r0, #2]
   2a1a8:	cmp	r3, #32
   2a1ac:	addhi	r5, r0, #2
   2a1b0:	bls	2a0cc <flatcc_json_parser_generic_json@@Base+0x74c>
   2a1b4:	cmp	r4, r5
   2a1b8:	beq	2a100 <flatcc_json_parser_generic_json@@Base+0x780>
   2a1bc:	cmp	r3, #93	; 0x5d
   2a1c0:	bne	299c0 <flatcc_json_parser_generic_json@@Base+0x40>
   2a1c4:	add	r0, r5, #1
   2a1c8:	sub	r3, r4, r0
   2a1cc:	cmp	r3, #1
   2a1d0:	ble	2aa14 <flatcc_json_parser_generic_json@@Base+0x1094>
   2a1d4:	ldrb	r3, [r5, #1]
   2a1d8:	cmp	r3, #32
   2a1dc:	bhi	2a664 <flatcc_json_parser_generic_json@@Base+0xce4>
   2a1e0:	bne	2aa14 <flatcc_json_parser_generic_json@@Base+0x1094>
   2a1e4:	ldrb	r3, [r5, #2]
   2a1e8:	cmp	r3, #32
   2a1ec:	bls	2aa14 <flatcc_json_parser_generic_json@@Base+0x1094>
   2a1f0:	add	r0, r5, #2
   2a1f4:	b	2a664 <flatcc_json_parser_generic_json@@Base+0xce4>
   2a1f8:	add	r1, r0, #1
   2a1fc:	sub	r3, r4, r1
   2a200:	cmp	r3, #1
   2a204:	ble	2a218 <flatcc_json_parser_generic_json@@Base+0x898>
   2a208:	ldrb	r3, [r0, #1]
   2a20c:	cmp	r3, #32
   2a210:	bhi	2a660 <flatcc_json_parser_generic_json@@Base+0xce0>
   2a214:	beq	2a8f0 <flatcc_json_parser_generic_json@@Base+0xf70>
   2a218:	cmp	r4, r1
   2a21c:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a220:	ldrb	r2, [r1]
   2a224:	cmp	r2, #32
   2a228:	bne	2a248 <flatcc_json_parser_generic_json@@Base+0x8c8>
   2a22c:	add	r3, r1, #1
   2a230:	cmp	r4, r3
   2a234:	mov	r1, r3
   2a238:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a23c:	ldrb	r2, [r3], #1
   2a240:	cmp	r2, #32
   2a244:	beq	2a230 <flatcc_json_parser_generic_json@@Base+0x8b0>
   2a248:	cmp	r2, #32
   2a24c:	bhi	2a038 <flatcc_json_parser_generic_json@@Base+0x6b8>
   2a250:	sub	r2, r2, #9
   2a254:	cmp	r2, #23
   2a258:	ldrls	pc, [pc, r2, lsl #2]
   2a25c:	b	2a408 <flatcc_json_parser_generic_json@@Base+0xa88>
   2a260:	andeq	sl, r2, r4, asr #6
   2a264:	andeq	sl, r2, r8, lsl r3
   2a268:	andeq	sl, r2, r8, lsl #8
   2a26c:	andeq	sl, r2, r8, lsl #8
   2a270:	andeq	sl, r2, ip, asr #6
   2a274:	andeq	sl, r2, r8, lsl #8
   2a278:	andeq	sl, r2, r8, lsl #8
   2a27c:	andeq	sl, r2, r8, lsl #8
   2a280:	andeq	sl, r2, r8, lsl #8
   2a284:	andeq	sl, r2, r8, lsl #8
   2a288:	andeq	sl, r2, r8, lsl #8
   2a28c:	andeq	sl, r2, r8, lsl #8
   2a290:	andeq	sl, r2, r8, lsl #8
   2a294:	andeq	sl, r2, r8, lsl #8
   2a298:	andeq	sl, r2, r8, lsl #8
   2a29c:	andeq	sl, r2, r8, lsl #8
   2a2a0:	andeq	sl, r2, r8, lsl #8
   2a2a4:	andeq	sl, r2, r8, lsl #8
   2a2a8:	andeq	sl, r2, r8, lsl #8
   2a2ac:	andeq	sl, r2, r8, lsl #8
   2a2b0:	andeq	sl, r2, r8, lsl #8
   2a2b4:	andeq	sl, r2, r8, lsl #8
   2a2b8:	andeq	sl, r2, r8, lsl #8
   2a2bc:	andeq	sl, r2, r8, lsl r2
   2a2c0:	sub	r3, r4, r5
   2a2c4:	add	r2, r5, #1
   2a2c8:	cmp	r3, #1
   2a2cc:	ble	2a2dc <flatcc_json_parser_generic_json@@Base+0x95c>
   2a2d0:	ldrb	r3, [r5, #1]
   2a2d4:	cmp	r3, #10
   2a2d8:	addeq	r2, r5, #2
   2a2dc:	mov	r5, r2
   2a2e0:	ldr	r3, [r6, #16]
   2a2e4:	str	r5, [r6, #4]
   2a2e8:	add	r3, r3, #1
   2a2ec:	str	r3, [r6, #16]
   2a2f0:	cmp	r4, r5
   2a2f4:	beq	2a100 <flatcc_json_parser_generic_json@@Base+0x780>
   2a2f8:	ldrb	r3, [r5]
   2a2fc:	cmp	r3, #32
   2a300:	bls	2a120 <flatcc_json_parser_generic_json@@Base+0x7a0>
   2a304:	b	2a1bc <flatcc_json_parser_generic_json@@Base+0x83c>
   2a308:	add	r5, r5, #1
   2a30c:	b	2a2e0 <flatcc_json_parser_generic_json@@Base+0x960>
   2a310:	add	r5, r5, #1
   2a314:	b	2a2f0 <flatcc_json_parser_generic_json@@Base+0x970>
   2a318:	add	r1, r1, #1
   2a31c:	ldr	r3, [r6, #16]
   2a320:	str	r1, [r6, #4]
   2a324:	add	r3, r3, #1
   2a328:	str	r3, [r6, #16]
   2a32c:	cmp	r4, r1
   2a330:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a334:	ldrb	r2, [r1]
   2a338:	cmp	r2, #32
   2a33c:	bls	2a250 <flatcc_json_parser_generic_json@@Base+0x8d0>
   2a340:	b	2a038 <flatcc_json_parser_generic_json@@Base+0x6b8>
   2a344:	add	r1, r1, #1
   2a348:	b	2a32c <flatcc_json_parser_generic_json@@Base+0x9ac>
   2a34c:	sub	r3, r4, r1
   2a350:	add	r2, r1, #1
   2a354:	cmp	r3, #1
   2a358:	ble	2a368 <flatcc_json_parser_generic_json@@Base+0x9e8>
   2a35c:	ldrb	r3, [r1, #1]
   2a360:	cmp	r3, #10
   2a364:	addeq	r2, r1, #2
   2a368:	mov	r1, r2
   2a36c:	b	2a31c <flatcc_json_parser_generic_json@@Base+0x99c>
   2a370:	mov	r5, r4
   2a374:	add	r3, sp, #520	; 0x208
   2a378:	cmp	r7, r3
   2a37c:	beq	2b004 <flatcc_json_parser_generic_json@@Base+0x1684>
   2a380:	add	r1, r5, #1
   2a384:	mov	r3, #93	; 0x5d
   2a388:	sub	r2, r4, r1
   2a38c:	cmp	r2, #1
   2a390:	strb	r3, [r7], #1
   2a394:	ble	2a3b8 <flatcc_json_parser_generic_json@@Base+0xa38>
   2a398:	ldrb	r3, [r5, #1]
   2a39c:	cmp	r3, #32
   2a3a0:	bhi	2a8bc <flatcc_json_parser_generic_json@@Base+0xf3c>
   2a3a4:	bne	2a3b8 <flatcc_json_parser_generic_json@@Base+0xa38>
   2a3a8:	ldrb	r3, [r5, #2]
   2a3ac:	cmp	r3, #32
   2a3b0:	addhi	r5, r5, #2
   2a3b4:	bhi	2a8c0 <flatcc_json_parser_generic_json@@Base+0xf40>
   2a3b8:	cmp	r1, r4
   2a3bc:	beq	29a60 <flatcc_json_parser_generic_json@@Base+0xe0>
   2a3c0:	ldrb	r3, [r1]
   2a3c4:	cmp	r3, #32
   2a3c8:	bne	2a58c <flatcc_json_parser_generic_json@@Base+0xc0c>
   2a3cc:	add	r2, r1, #1
   2a3d0:	b	2a3e0 <flatcc_json_parser_generic_json@@Base+0xa60>
   2a3d4:	ldrb	r3, [r2], #1
   2a3d8:	cmp	r3, #32
   2a3dc:	bne	2a58c <flatcc_json_parser_generic_json@@Base+0xc0c>
   2a3e0:	cmp	r4, r2
   2a3e4:	mov	r1, r2
   2a3e8:	bne	2a3d4 <flatcc_json_parser_generic_json@@Base+0xa54>
   2a3ec:	b	29a60 <flatcc_json_parser_generic_json@@Base+0xe0>
   2a3f0:	ldr	r3, [r6, #24]
   2a3f4:	cmp	r3, #0
   2a3f8:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a3fc:	mov	r2, #5
   2a400:	ldr	r3, [r6, #4]
   2a404:	b	29d44 <flatcc_json_parser_generic_json@@Base+0x3c4>
   2a408:	ldr	r3, [r6, #24]
   2a40c:	cmp	r3, #0
   2a410:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a414:	ldr	r3, [r6, #4]
   2a418:	mov	r2, #5
   2a41c:	str	r2, [r6, #24]
   2a420:	str	r1, [r6, #36]	; 0x24
   2a424:	sub	r3, r1, r3
   2a428:	add	r3, r3, #1
   2a42c:	str	r3, [r6, #20]
   2a430:	b	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a434:	cmp	r3, #31
   2a438:	bhi	29afc <flatcc_json_parser_generic_json@@Base+0x17c>
   2a43c:	ldr	r3, [r6, #24]
   2a440:	cmp	r3, #0
   2a444:	bne	2a468 <flatcc_json_parser_generic_json@@Base+0xae8>
   2a448:	ldr	r3, [r6, #4]
   2a44c:	str	r9, [r6, #24]
   2a450:	sub	r3, r1, r3
   2a454:	str	r1, [r6, #36]	; 0x24
   2a458:	mov	r1, r4
   2a45c:	add	r3, r3, #1
   2a460:	str	r3, [r6, #20]
   2a464:	b	29afc <flatcc_json_parser_generic_json@@Base+0x17c>
   2a468:	mov	r1, r4
   2a46c:	b	29afc <flatcc_json_parser_generic_json@@Base+0x17c>
   2a470:	ldr	r3, [r6, #24]
   2a474:	cmp	r3, #0
   2a478:	bne	2a468 <flatcc_json_parser_generic_json@@Base+0xae8>
   2a47c:	str	r5, [r6, #24]
   2a480:	ldr	r3, [r6, #4]
   2a484:	b	2a450 <flatcc_json_parser_generic_json@@Base+0xad0>
   2a488:	cmp	r3, #32
   2a48c:	bhi	2a54c <flatcc_json_parser_generic_json@@Base+0xbcc>
   2a490:	sub	r3, r3, #9
   2a494:	cmp	r3, #23
   2a498:	ldrls	pc, [pc, r3, lsl #2]
   2a49c:	b	2a55c <flatcc_json_parser_generic_json@@Base+0xbdc>
   2a4a0:	andeq	sl, r2, r4, asr r5
   2a4a4:	andeq	sl, r2, r4, lsr #10
   2a4a8:	andeq	sl, r2, ip, asr r5
   2a4ac:	andeq	sl, r2, ip, asr r5
   2a4b0:	andeq	sl, r2, r0, lsl #10
   2a4b4:	andeq	sl, r2, ip, asr r5
   2a4b8:	andeq	sl, r2, ip, asr r5
   2a4bc:	andeq	sl, r2, ip, asr r5
   2a4c0:	andeq	sl, r2, ip, asr r5
   2a4c4:	andeq	sl, r2, ip, asr r5
   2a4c8:	andeq	sl, r2, ip, asr r5
   2a4cc:	andeq	sl, r2, ip, asr r5
   2a4d0:	andeq	sl, r2, ip, asr r5
   2a4d4:	andeq	sl, r2, ip, asr r5
   2a4d8:	andeq	sl, r2, ip, asr r5
   2a4dc:	andeq	sl, r2, ip, asr r5
   2a4e0:	andeq	sl, r2, ip, asr r5
   2a4e4:	andeq	sl, r2, ip, asr r5
   2a4e8:	andeq	sl, r2, ip, asr r5
   2a4ec:	andeq	sl, r2, ip, asr r5
   2a4f0:	andeq	sl, r2, ip, asr r5
   2a4f4:	andeq	sl, r2, ip, asr r5
   2a4f8:	andeq	sl, r2, ip, asr r5
   2a4fc:	andeq	r9, r2, ip, lsr #20
   2a500:	sub	r3, r4, r1
   2a504:	add	r2, r1, #1
   2a508:	cmp	r3, #1
   2a50c:	ble	2a51c <flatcc_json_parser_generic_json@@Base+0xb9c>
   2a510:	ldrb	r3, [r1, #1]
   2a514:	cmp	r3, #10
   2a518:	addeq	r2, r1, #2
   2a51c:	mov	r1, r2
   2a520:	b	2a528 <flatcc_json_parser_generic_json@@Base+0xba8>
   2a524:	add	r1, r1, #1
   2a528:	ldr	r3, [r6, #16]
   2a52c:	str	r1, [r6, #4]
   2a530:	add	r3, r3, #1
   2a534:	str	r3, [r6, #16]
   2a538:	cmp	r4, r1
   2a53c:	beq	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2a540:	ldrb	r3, [r1]
   2a544:	cmp	r3, #32
   2a548:	bls	2a490 <flatcc_json_parser_generic_json@@Base+0xb10>
   2a54c:	mov	r5, r1
   2a550:	b	2a8e4 <flatcc_json_parser_generic_json@@Base+0xf64>
   2a554:	add	r1, r1, #1
   2a558:	b	2a538 <flatcc_json_parser_generic_json@@Base+0xbb8>
   2a55c:	ldr	r3, [r6, #24]
   2a560:	cmp	r3, #0
   2a564:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2a568:	ldr	r3, [r6, #4]
   2a56c:	mov	r2, #5
   2a570:	str	r2, [r6, #24]
   2a574:	str	r1, [r6, #36]	; 0x24
   2a578:	sub	r3, r1, r3
   2a57c:	add	r3, r3, #1
   2a580:	str	r3, [r6, #20]
   2a584:	mov	r0, r4
   2a588:	b	29be0 <flatcc_json_parser_generic_json@@Base+0x260>
   2a58c:	cmp	r3, #32
   2a590:	bhi	2a650 <flatcc_json_parser_generic_json@@Base+0xcd0>
   2a594:	sub	r3, r3, #9
   2a598:	cmp	r3, #23
   2a59c:	ldrls	pc, [pc, r3, lsl #2]
   2a5a0:	b	2a55c <flatcc_json_parser_generic_json@@Base+0xbdc>
   2a5a4:	andeq	sl, r2, r8, asr r6
   2a5a8:	andeq	sl, r2, r8, lsr #12
   2a5ac:	andeq	sl, r2, ip, asr r5
   2a5b0:	andeq	sl, r2, ip, asr r5
   2a5b4:	andeq	sl, r2, r4, lsl #12
   2a5b8:	andeq	sl, r2, ip, asr r5
   2a5bc:	andeq	sl, r2, ip, asr r5
   2a5c0:	andeq	sl, r2, ip, asr r5
   2a5c4:	andeq	sl, r2, ip, asr r5
   2a5c8:	andeq	sl, r2, ip, asr r5
   2a5cc:	andeq	sl, r2, ip, asr r5
   2a5d0:	andeq	sl, r2, ip, asr r5
   2a5d4:	andeq	sl, r2, ip, asr r5
   2a5d8:	andeq	sl, r2, ip, asr r5
   2a5dc:	andeq	sl, r2, ip, asr r5
   2a5e0:	andeq	sl, r2, ip, asr r5
   2a5e4:	andeq	sl, r2, ip, asr r5
   2a5e8:	andeq	sl, r2, ip, asr r5
   2a5ec:	andeq	sl, r2, ip, asr r5
   2a5f0:	andeq	sl, r2, ip, asr r5
   2a5f4:	andeq	sl, r2, ip, asr r5
   2a5f8:	andeq	sl, r2, ip, asr r5
   2a5fc:	andeq	sl, r2, ip, asr r5
   2a600:			; <UNDEFINED> instruction: 0x0002a3b8
   2a604:	sub	r3, r4, r1
   2a608:	add	r2, r1, #1
   2a60c:	cmp	r3, #1
   2a610:	ble	2a620 <flatcc_json_parser_generic_json@@Base+0xca0>
   2a614:	ldrb	r3, [r1, #1]
   2a618:	cmp	r3, #10
   2a61c:	addeq	r2, r1, #2
   2a620:	mov	r1, r2
   2a624:	b	2a62c <flatcc_json_parser_generic_json@@Base+0xcac>
   2a628:	add	r1, r1, #1
   2a62c:	ldr	r3, [r6, #16]
   2a630:	str	r1, [r6, #4]
   2a634:	add	r3, r3, #1
   2a638:	str	r3, [r6, #16]
   2a63c:	cmp	r4, r1
   2a640:	beq	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2a644:	ldrb	r3, [r1]
   2a648:	cmp	r3, #32
   2a64c:	bls	2a594 <flatcc_json_parser_generic_json@@Base+0xc14>
   2a650:	mov	r5, r1
   2a654:	b	2a8c8 <flatcc_json_parser_generic_json@@Base+0xf48>
   2a658:	add	r1, r1, #1
   2a65c:	b	2a63c <flatcc_json_parser_generic_json@@Base+0xcbc>
   2a660:	mov	r0, r1
   2a664:	cmp	r0, r4
   2a668:	beq	29ba0 <flatcc_json_parser_generic_json@@Base+0x220>
   2a66c:	mov	r7, fp
   2a670:	b	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2a674:	cmp	r4, r5
   2a678:	beq	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2a67c:	cmp	r3, #45	; 0x2d
   2a680:	beq	2ad4c <flatcc_json_parser_generic_json@@Base+0x13cc>
   2a684:	cmp	r3, #48	; 0x30
   2a688:	beq	2aef0 <flatcc_json_parser_generic_json@@Base+0x1570>
   2a68c:	sub	r3, r3, #49	; 0x31
   2a690:	uxtb	r3, r3
   2a694:	cmp	r3, #8
   2a698:	bhi	2a98c <flatcc_json_parser_generic_json@@Base+0x100c>
   2a69c:	add	r0, r5, #1
   2a6a0:	cmp	r4, r0
   2a6a4:	beq	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2a6a8:	ldrb	r3, [r5, #1]
   2a6ac:	sub	r2, r3, #48	; 0x30
   2a6b0:	cmp	r2, #9
   2a6b4:	bhi	2a6d8 <flatcc_json_parser_generic_json@@Base+0xd58>
   2a6b8:	add	r5, r5, #2
   2a6bc:	cmp	r4, r5
   2a6c0:	mov	r0, r5
   2a6c4:	beq	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2a6c8:	ldrb	r3, [r5], #1
   2a6cc:	sub	r2, r3, #48	; 0x30
   2a6d0:	cmp	r2, #9
   2a6d4:	bls	2a6bc <flatcc_json_parser_generic_json@@Base+0xd3c>
   2a6d8:	cmp	r3, #46	; 0x2e
   2a6dc:	beq	2af14 <flatcc_json_parser_generic_json@@Base+0x1594>
   2a6e0:	and	r2, r3, #223	; 0xdf
   2a6e4:	cmp	r2, #69	; 0x45
   2a6e8:	bne	2ae9c <flatcc_json_parser_generic_json@@Base+0x151c>
   2a6ec:	add	r2, r0, #1
   2a6f0:	cmp	r4, r2
   2a6f4:	beq	2b0c8 <flatcc_json_parser_generic_json@@Base+0x1748>
   2a6f8:	ldrb	r3, [r0, #1]
   2a6fc:	sub	r1, r3, #43	; 0x2b
   2a700:	tst	r1, #253	; 0xfd
   2a704:	bne	2a718 <flatcc_json_parser_generic_json@@Base+0xd98>
   2a708:	add	r2, r0, #2
   2a70c:	cmp	r4, r2
   2a710:	beq	2a724 <flatcc_json_parser_generic_json@@Base+0xda4>
   2a714:	ldrb	r3, [r0, #2]
   2a718:	sub	r3, r3, #48	; 0x30
   2a71c:	cmp	r3, #9
   2a720:	bls	2ae60 <flatcc_json_parser_generic_json@@Base+0x14e0>
   2a724:	ldr	r3, [r6, #24]
   2a728:	cmp	r3, #0
   2a72c:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2a730:	ldr	r3, [r6, #4]
   2a734:	mov	r1, #6
   2a738:	mov	r0, r4
   2a73c:	str	r2, [r6, #36]	; 0x24
   2a740:	str	r1, [r6, #24]
   2a744:	sub	r2, r2, r3
   2a748:	add	r3, r2, #1
   2a74c:	str	r3, [r6, #20]
   2a750:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2a754:	ldrb	r3, [r2, #2]
   2a758:	cmp	r3, #32
   2a75c:	addhi	r5, r2, #2
   2a760:	bls	2ac04 <flatcc_json_parser_generic_json@@Base+0x1284>
   2a764:	cmp	r3, #57	; 0x39
   2a768:	bhi	299dc <flatcc_json_parser_generic_json@@Base+0x5c>
   2a76c:	cmp	r3, #48	; 0x30
   2a770:	bcs	2a674 <flatcc_json_parser_generic_json@@Base+0xcf4>
   2a774:	cmp	r3, #34	; 0x22
   2a778:	bne	29c14 <flatcc_json_parser_generic_json@@Base+0x294>
   2a77c:	cmp	r5, r4
   2a780:	bne	29a80 <flatcc_json_parser_generic_json@@Base+0x100>
   2a784:	ldr	r2, [r6, #24]
   2a788:	cmp	r2, #0
   2a78c:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2a790:	ldr	r3, [r6, #4]
   2a794:	mov	r2, #16
   2a798:	str	r2, [r6, #24]
   2a79c:	str	r4, [r6, #36]	; 0x24
   2a7a0:	sub	r3, r4, r3
   2a7a4:	add	r3, r3, #1
   2a7a8:	str	r3, [r6, #20]
   2a7ac:	mov	r0, r4
   2a7b0:	mov	fp, r7
   2a7b4:	b	29ba0 <flatcc_json_parser_generic_json@@Base+0x220>
   2a7b8:	cmp	r3, #34	; 0x22
   2a7bc:	beq	2a900 <flatcc_json_parser_generic_json@@Base+0xf80>
   2a7c0:	cmp	r3, #46	; 0x2e
   2a7c4:	beq	2b034 <flatcc_json_parser_generic_json@@Base+0x16b4>
   2a7c8:	mov	r3, #1
   2a7cc:	cmp	r4, r5
   2a7d0:	str	r3, [r6, #12]
   2a7d4:	beq	2b190 <flatcc_json_parser_generic_json@@Base+0x1810>
   2a7d8:	ldrb	r3, [r5]
   2a7dc:	cmp	r3, #32
   2a7e0:	movls	r2, r5
   2a7e4:	bls	2a828 <flatcc_json_parser_generic_json@@Base+0xea8>
   2a7e8:	sub	r2, r3, #48	; 0x30
   2a7ec:	cmp	r3, #46	; 0x2e
   2a7f0:	cmpne	r3, #95	; 0x5f
   2a7f4:	uxtb	ip, r2
   2a7f8:	add	r0, r5, #1
   2a7fc:	mov	r2, r5
   2a800:	beq	2aaec <flatcc_json_parser_generic_json@@Base+0x116c>
   2a804:	orr	r1, r3, #32
   2a808:	tst	r3, #128	; 0x80
   2a80c:	sub	r1, r1, #97	; 0x61
   2a810:	bne	2aaec <flatcc_json_parser_generic_json@@Base+0x116c>
   2a814:	cmp	ip, #9
   2a818:	uxtb	r1, r1
   2a81c:	bls	2aaec <flatcc_json_parser_generic_json@@Base+0x116c>
   2a820:	cmp	r1, #25
   2a824:	bls	2aae8 <flatcc_json_parser_generic_json@@Base+0x1168>
   2a828:	sub	r3, r4, r2
   2a82c:	cmp	r3, #1
   2a830:	ble	2a844 <flatcc_json_parser_generic_json@@Base+0xec4>
   2a834:	ldrb	r1, [r2]
   2a838:	cmp	r1, #32
   2a83c:	bhi	2add8 <flatcc_json_parser_generic_json@@Base+0x1458>
   2a840:	beq	2adc8 <flatcc_json_parser_generic_json@@Base+0x1448>
   2a844:	cmp	r4, r2
   2a848:	beq	2a878 <flatcc_json_parser_generic_json@@Base+0xef8>
   2a84c:	ldrb	r1, [r2]
   2a850:	cmp	r1, #32
   2a854:	bne	2ab10 <flatcc_json_parser_generic_json@@Base+0x1190>
   2a858:	add	r3, r2, #1
   2a85c:	b	2a86c <flatcc_json_parser_generic_json@@Base+0xeec>
   2a860:	ldrb	r1, [r3], #1
   2a864:	cmp	r1, #32
   2a868:	bne	2ab10 <flatcc_json_parser_generic_json@@Base+0x1190>
   2a86c:	cmp	r4, r3
   2a870:	mov	r2, r3
   2a874:	bne	2a860 <flatcc_json_parser_generic_json@@Base+0xee0>
   2a878:	ldr	r1, [r6, #24]
   2a87c:	cmp	r1, #0
   2a880:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2a884:	ldr	r3, [r6, #4]
   2a888:	mov	r1, #10
   2a88c:	sub	r3, r2, r3
   2a890:	mov	r0, r4
   2a894:	str	r1, [r6, #24]
   2a898:	add	r3, r3, #1
   2a89c:	str	r3, [r6, #20]
   2a8a0:	str	r2, [r6, #36]	; 0x24
   2a8a4:	b	29be0 <flatcc_json_parser_generic_json@@Base+0x260>
   2a8a8:	ldrb	r3, [r0, #2]
   2a8ac:	cmp	r3, #32
   2a8b0:	bls	29f44 <flatcc_json_parser_generic_json@@Base+0x5c4>
   2a8b4:	add	r0, r0, #2
   2a8b8:	b	2a664 <flatcc_json_parser_generic_json@@Base+0xce4>
   2a8bc:	mov	r5, r1
   2a8c0:	cmp	r4, r5
   2a8c4:	beq	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2a8c8:	cmp	r3, #93	; 0x5d
   2a8cc:	bne	299c0 <flatcc_json_parser_generic_json@@Base+0x40>
   2a8d0:	mov	r0, r5
   2a8d4:	b	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2a8d8:	mov	r5, r1
   2a8dc:	cmp	r4, r5
   2a8e0:	beq	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2a8e4:	cmp	r3, #125	; 0x7d
   2a8e8:	bne	299c0 <flatcc_json_parser_generic_json@@Base+0x40>
   2a8ec:	b	2a8d0 <flatcc_json_parser_generic_json@@Base+0xf50>
   2a8f0:	ldrb	r3, [r0, #2]
   2a8f4:	cmp	r3, #32
   2a8f8:	bls	2a218 <flatcc_json_parser_generic_json@@Base+0x898>
   2a8fc:	b	2a8b4 <flatcc_json_parser_generic_json@@Base+0xf34>
   2a900:	add	r2, r5, #1
   2a904:	mov	r3, #0
   2a908:	cmp	r4, r2
   2a90c:	str	r3, [r6, #12]
   2a910:	beq	2a958 <flatcc_json_parser_generic_json@@Base+0xfd8>
   2a914:	ldrb	r1, [r5, #1]
   2a918:	cmp	r1, #34	; 0x22
   2a91c:	bne	2a93c <flatcc_json_parser_generic_json@@Base+0xfbc>
   2a920:	b	2af0c <flatcc_json_parser_generic_json@@Base+0x158c>
   2a924:	add	r2, r3, #1
   2a928:	cmp	r4, r2
   2a92c:	beq	2a958 <flatcc_json_parser_generic_json@@Base+0xfd8>
   2a930:	ldrb	r1, [r3, #1]
   2a934:	cmp	r1, #34	; 0x22
   2a938:	beq	2af0c <flatcc_json_parser_generic_json@@Base+0x158c>
   2a93c:	cmp	r1, #92	; 0x5c
   2a940:	mov	r3, r2
   2a944:	bne	2a924 <flatcc_json_parser_generic_json@@Base+0xfa4>
   2a948:	sub	r1, r4, r2
   2a94c:	add	r3, r2, #1
   2a950:	cmp	r1, #1
   2a954:	bgt	2a924 <flatcc_json_parser_generic_json@@Base+0xfa4>
   2a958:	ldr	r1, [r6, #24]
   2a95c:	cmp	r1, #0
   2a960:	bne	2a984 <flatcc_json_parser_generic_json@@Base+0x1004>
   2a964:	ldr	r0, [r6, #4]
   2a968:	mov	r3, #20
   2a96c:	mov	r1, r3
   2a970:	str	r2, [r6, #36]	; 0x24
   2a974:	str	r3, [r6, #24]
   2a978:	sub	r2, r2, r0
   2a97c:	add	r3, r2, #1
   2a980:	str	r3, [r6, #20]
   2a984:	mov	r2, r4
   2a988:	b	2a87c <flatcc_json_parser_generic_json@@Base+0xefc>
   2a98c:	ldr	r3, [r6, #24]
   2a990:	cmp	r3, #0
   2a994:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2a998:	ldr	r3, [r6, #4]
   2a99c:	mov	r2, #6
   2a9a0:	mov	r0, r4
   2a9a4:	str	r2, [r6, #24]
   2a9a8:	str	r5, [r6, #36]	; 0x24
   2a9ac:	sub	r3, r5, r3
   2a9b0:	add	r3, r3, #1
   2a9b4:	str	r3, [r6, #20]
   2a9b8:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2a9bc:	sub	r3, r4, r0
   2a9c0:	add	r2, r0, #1
   2a9c4:	cmp	r3, #1
   2a9c8:	ble	2a9d8 <flatcc_json_parser_generic_json@@Base+0x1058>
   2a9cc:	ldrb	r3, [r0, #1]
   2a9d0:	cmp	r3, #10
   2a9d4:	addeq	r2, r0, #2
   2a9d8:	mov	r0, r2
   2a9dc:	b	2a9e4 <flatcc_json_parser_generic_json@@Base+0x1064>
   2a9e0:	add	r0, r0, #1
   2a9e4:	ldr	r3, [r6, #16]
   2a9e8:	str	r0, [r6, #4]
   2a9ec:	add	r3, r3, #1
   2a9f0:	str	r3, [r6, #16]
   2a9f4:	cmp	r4, r0
   2a9f8:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2a9fc:	ldrb	r2, [r0]
   2aa00:	cmp	r2, #32
   2aa04:	bls	29e80 <flatcc_json_parser_generic_json@@Base+0x500>
   2aa08:	b	2a66c <flatcc_json_parser_generic_json@@Base+0xcec>
   2aa0c:	add	r0, r0, #1
   2aa10:	b	2a9f4 <flatcc_json_parser_generic_json@@Base+0x1074>
   2aa14:	cmp	r4, r0
   2aa18:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2aa1c:	ldrb	r2, [r0]
   2aa20:	cmp	r2, #32
   2aa24:	bne	2aa44 <flatcc_json_parser_generic_json@@Base+0x10c4>
   2aa28:	add	r3, r0, #1
   2aa2c:	cmp	r3, r4
   2aa30:	mov	r0, r3
   2aa34:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2aa38:	ldrb	r2, [r3], #1
   2aa3c:	cmp	r2, #32
   2aa40:	beq	2aa2c <flatcc_json_parser_generic_json@@Base+0x10ac>
   2aa44:	cmp	r2, #32
   2aa48:	bhi	2a66c <flatcc_json_parser_generic_json@@Base+0xcec>
   2aa4c:	sub	r2, r2, #9
   2aa50:	cmp	r2, #23
   2aa54:	ldrls	pc, [pc, r2, lsl #2]
   2aa58:	b	2aabc <flatcc_json_parser_generic_json@@Base+0x113c>
   2aa5c:			; <UNDEFINED> instruction: 0x0002afb8
   2aa60:			; <UNDEFINED> instruction: 0x0002afb0
   2aa64:			; <UNDEFINED> instruction: 0x0002aabc
   2aa68:			; <UNDEFINED> instruction: 0x0002aabc
   2aa6c:	andeq	sl, r2, r8, ror #30
   2aa70:			; <UNDEFINED> instruction: 0x0002aabc
   2aa74:			; <UNDEFINED> instruction: 0x0002aabc
   2aa78:			; <UNDEFINED> instruction: 0x0002aabc
   2aa7c:			; <UNDEFINED> instruction: 0x0002aabc
   2aa80:			; <UNDEFINED> instruction: 0x0002aabc
   2aa84:			; <UNDEFINED> instruction: 0x0002aabc
   2aa88:			; <UNDEFINED> instruction: 0x0002aabc
   2aa8c:			; <UNDEFINED> instruction: 0x0002aabc
   2aa90:			; <UNDEFINED> instruction: 0x0002aabc
   2aa94:			; <UNDEFINED> instruction: 0x0002aabc
   2aa98:			; <UNDEFINED> instruction: 0x0002aabc
   2aa9c:			; <UNDEFINED> instruction: 0x0002aabc
   2aaa0:			; <UNDEFINED> instruction: 0x0002aabc
   2aaa4:			; <UNDEFINED> instruction: 0x0002aabc
   2aaa8:			; <UNDEFINED> instruction: 0x0002aabc
   2aaac:			; <UNDEFINED> instruction: 0x0002aabc
   2aab0:			; <UNDEFINED> instruction: 0x0002aabc
   2aab4:			; <UNDEFINED> instruction: 0x0002aabc
   2aab8:	andeq	sl, r2, r4, lsl sl
   2aabc:	ldr	r3, [r6, #24]
   2aac0:	cmp	r3, #0
   2aac4:	bne	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2aac8:	ldr	r3, [r6, #4]
   2aacc:	mov	r2, #5
   2aad0:	str	r2, [r6, #24]
   2aad4:	str	r0, [r6, #36]	; 0x24
   2aad8:	sub	r3, r0, r3
   2aadc:	add	r3, r3, #1
   2aae0:	str	r3, [r6, #20]
   2aae4:	b	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2aae8:	add	r0, r5, #1
   2aaec:	cmp	r4, r0
   2aaf0:	mov	r2, r0
   2aaf4:	mov	r5, r0
   2aaf8:	beq	2b064 <flatcc_json_parser_generic_json@@Base+0x16e4>
   2aafc:	ldrb	r1, [r0]
   2ab00:	cmp	r1, #32
   2ab04:	bls	2b064 <flatcc_json_parser_generic_json@@Base+0x16e4>
   2ab08:	mov	r3, r1
   2ab0c:	b	2a7e8 <flatcc_json_parser_generic_json@@Base+0xe68>
   2ab10:	cmp	r1, #32
   2ab14:	bhi	2abd8 <flatcc_json_parser_generic_json@@Base+0x1258>
   2ab18:	sub	r1, r1, #9
   2ab1c:	cmp	r1, #23
   2ab20:	ldrls	pc, [pc, r1, lsl #2]
   2ab24:	b	2acb0 <flatcc_json_parser_generic_json@@Base+0x1330>
   2ab28:	andeq	sl, r2, r8, lsr #25
   2ab2c:	andeq	sl, r2, r0, lsr #25
   2ab30:			; <UNDEFINED> instruction: 0x0002acb0
   2ab34:			; <UNDEFINED> instruction: 0x0002acb0
   2ab38:	muleq	r2, r4, fp
   2ab3c:			; <UNDEFINED> instruction: 0x0002acb0
   2ab40:			; <UNDEFINED> instruction: 0x0002acb0
   2ab44:			; <UNDEFINED> instruction: 0x0002acb0
   2ab48:			; <UNDEFINED> instruction: 0x0002acb0
   2ab4c:			; <UNDEFINED> instruction: 0x0002acb0
   2ab50:			; <UNDEFINED> instruction: 0x0002acb0
   2ab54:			; <UNDEFINED> instruction: 0x0002acb0
   2ab58:			; <UNDEFINED> instruction: 0x0002acb0
   2ab5c:			; <UNDEFINED> instruction: 0x0002acb0
   2ab60:			; <UNDEFINED> instruction: 0x0002acb0
   2ab64:			; <UNDEFINED> instruction: 0x0002acb0
   2ab68:			; <UNDEFINED> instruction: 0x0002acb0
   2ab6c:			; <UNDEFINED> instruction: 0x0002acb0
   2ab70:			; <UNDEFINED> instruction: 0x0002acb0
   2ab74:			; <UNDEFINED> instruction: 0x0002acb0
   2ab78:			; <UNDEFINED> instruction: 0x0002acb0
   2ab7c:			; <UNDEFINED> instruction: 0x0002acb0
   2ab80:			; <UNDEFINED> instruction: 0x0002acb0
   2ab84:	andeq	sl, r2, r8, lsl #23
   2ab88:	cmp	r2, r4
   2ab8c:	bne	2a84c <flatcc_json_parser_generic_json@@Base+0xecc>
   2ab90:	b	2a878 <flatcc_json_parser_generic_json@@Base+0xef8>
   2ab94:	sub	r3, r4, r2
   2ab98:	add	r1, r2, #1
   2ab9c:	cmp	r3, #1
   2aba0:	ble	2abb0 <flatcc_json_parser_generic_json@@Base+0x1230>
   2aba4:	ldrb	r3, [r2, #1]
   2aba8:	cmp	r3, #10
   2abac:	addeq	r1, r2, #2
   2abb0:	mov	r2, r1
   2abb4:	ldr	r3, [r6, #16]
   2abb8:	str	r2, [r6, #4]
   2abbc:	add	r3, r3, #1
   2abc0:	str	r3, [r6, #16]
   2abc4:	cmp	r4, r2
   2abc8:	beq	2a878 <flatcc_json_parser_generic_json@@Base+0xef8>
   2abcc:	ldrb	r1, [r2]
   2abd0:	cmp	r1, #32
   2abd4:	bls	2ab18 <flatcc_json_parser_generic_json@@Base+0x1198>
   2abd8:	cmp	r1, #58	; 0x3a
   2abdc:	bne	2b11c <flatcc_json_parser_generic_json@@Base+0x179c>
   2abe0:	add	r5, r2, #1
   2abe4:	sub	r3, r4, r5
   2abe8:	cmp	r3, #1
   2abec:	ble	2af04 <flatcc_json_parser_generic_json@@Base+0x1584>
   2abf0:	ldrb	r3, [r2, #1]
   2abf4:	cmp	r3, #32
   2abf8:	mov	r1, r3
   2abfc:	bhi	2a764 <flatcc_json_parser_generic_json@@Base+0xde4>
   2ac00:	beq	2a754 <flatcc_json_parser_generic_json@@Base+0xdd4>
   2ac04:	cmp	r5, r4
   2ac08:	mov	r3, r1
   2ac0c:	bne	2ac20 <flatcc_json_parser_generic_json@@Base+0x12a0>
   2ac10:	b	29bfc <flatcc_json_parser_generic_json@@Base+0x27c>
   2ac14:	ldrb	r3, [r5, #1]!
   2ac18:	cmp	r4, r5
   2ac1c:	beq	29bfc <flatcc_json_parser_generic_json@@Base+0x27c>
   2ac20:	cmp	r3, #32
   2ac24:	beq	2ac14 <flatcc_json_parser_generic_json@@Base+0x1294>
   2ac28:	cmp	r3, #32
   2ac2c:	bhi	299d4 <flatcc_json_parser_generic_json@@Base+0x54>
   2ac30:	sub	r3, r3, #9
   2ac34:	cmp	r3, #23
   2ac38:	ldrls	pc, [pc, r3, lsl #2]
   2ac3c:	b	2ad74 <flatcc_json_parser_generic_json@@Base+0x13f4>
   2ac40:	andeq	sl, r2, ip, ror #26
   2ac44:	andeq	sl, r2, r4, ror #26
   2ac48:	andeq	sl, r2, r4, ror sp
   2ac4c:	andeq	sl, r2, r4, ror sp
   2ac50:	andeq	sl, r2, r8, ror #25
   2ac54:	andeq	sl, r2, r4, ror sp
   2ac58:	andeq	sl, r2, r4, ror sp
   2ac5c:	andeq	sl, r2, r4, ror sp
   2ac60:	andeq	sl, r2, r4, ror sp
   2ac64:	andeq	sl, r2, r4, ror sp
   2ac68:	andeq	sl, r2, r4, ror sp
   2ac6c:	andeq	sl, r2, r4, ror sp
   2ac70:	andeq	sl, r2, r4, ror sp
   2ac74:	andeq	sl, r2, r4, ror sp
   2ac78:	andeq	sl, r2, r4, ror sp
   2ac7c:	andeq	sl, r2, r4, ror sp
   2ac80:	andeq	sl, r2, r4, ror sp
   2ac84:	andeq	sl, r2, r4, ror sp
   2ac88:	andeq	sl, r2, r4, ror sp
   2ac8c:	andeq	sl, r2, r4, ror sp
   2ac90:	andeq	sl, r2, r4, ror sp
   2ac94:	andeq	sl, r2, r4, ror sp
   2ac98:	andeq	sl, r2, r4, ror sp
   2ac9c:	ldrdeq	sl, [r2], -ip
   2aca0:	add	r2, r2, #1
   2aca4:	b	2abb4 <flatcc_json_parser_generic_json@@Base+0x1234>
   2aca8:	add	r2, r2, #1
   2acac:	b	2abc4 <flatcc_json_parser_generic_json@@Base+0x1244>
   2acb0:	ldr	r3, [r6, #24]
   2acb4:	cmp	r3, #0
   2acb8:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2acbc:	ldr	r3, [r6, #4]
   2acc0:	mov	r1, #5
   2acc4:	str	r1, [r6, #24]
   2acc8:	str	r2, [r6, #36]	; 0x24
   2accc:	sub	r3, r2, r3
   2acd0:	add	r3, r3, #1
   2acd4:	str	r3, [r6, #20]
   2acd8:	b	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2acdc:	cmp	r4, r5
   2ace0:	bne	2ac14 <flatcc_json_parser_generic_json@@Base+0x1294>
   2ace4:	b	29c1c <flatcc_json_parser_generic_json@@Base+0x29c>
   2ace8:	sub	r3, r4, r5
   2acec:	add	r2, r5, #1
   2acf0:	cmp	r3, #1
   2acf4:	ble	2ad04 <flatcc_json_parser_generic_json@@Base+0x1384>
   2acf8:	ldrb	r3, [r5, #1]
   2acfc:	cmp	r3, #10
   2ad00:	addeq	r2, r5, #2
   2ad04:	mov	r5, r2
   2ad08:	ldr	r3, [r6, #16]
   2ad0c:	str	r5, [r6, #4]
   2ad10:	add	r3, r3, #1
   2ad14:	str	r3, [r6, #16]
   2ad18:	cmp	r4, r5
   2ad1c:	ldrb	r3, [r5]
   2ad20:	beq	2b0f8 <flatcc_json_parser_generic_json@@Base+0x1778>
   2ad24:	cmp	r3, #32
   2ad28:	bls	2ac30 <flatcc_json_parser_generic_json@@Base+0x12b0>
   2ad2c:	cmp	r3, #57	; 0x39
   2ad30:	bhi	299dc <flatcc_json_parser_generic_json@@Base+0x5c>
   2ad34:	cmp	r3, #48	; 0x30
   2ad38:	bcs	2a67c <flatcc_json_parser_generic_json@@Base+0xcfc>
   2ad3c:	cmp	r3, #34	; 0x22
   2ad40:	beq	29a80 <flatcc_json_parser_generic_json@@Base+0x100>
   2ad44:	cmp	r3, #45	; 0x2d
   2ad48:	bne	29c1c <flatcc_json_parser_generic_json@@Base+0x29c>
   2ad4c:	add	r0, r5, #1
   2ad50:	cmp	r4, r0
   2ad54:	beq	2b09c <flatcc_json_parser_generic_json@@Base+0x171c>
   2ad58:	ldrb	r3, [r5, #1]
   2ad5c:	mov	r5, r0
   2ad60:	b	2a684 <flatcc_json_parser_generic_json@@Base+0xd04>
   2ad64:	add	r5, r5, #1
   2ad68:	b	2ad08 <flatcc_json_parser_generic_json@@Base+0x1388>
   2ad6c:	add	r5, r5, #1
   2ad70:	b	2ad18 <flatcc_json_parser_generic_json@@Base+0x1398>
   2ad74:	ldr	r2, [r6, #24]
   2ad78:	cmp	r2, #0
   2ad7c:	bne	2ad9c <flatcc_json_parser_generic_json@@Base+0x141c>
   2ad80:	ldr	r3, [r6, #4]
   2ad84:	mov	r2, #5
   2ad88:	str	r2, [r6, #24]
   2ad8c:	str	r5, [r6, #36]	; 0x24
   2ad90:	sub	r3, r5, r3
   2ad94:	add	r3, r3, #1
   2ad98:	str	r3, [r6, #20]
   2ad9c:	ldrb	r3, [r4]
   2ada0:	cmp	r3, #57	; 0x39
   2ada4:	bhi	2ade4 <flatcc_json_parser_generic_json@@Base+0x1464>
   2ada8:	cmp	r3, #48	; 0x30
   2adac:	bcs	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2adb0:	cmp	r3, #34	; 0x22
   2adb4:	beq	2a788 <flatcc_json_parser_generic_json@@Base+0xe08>
   2adb8:	cmp	r3, #45	; 0x2d
   2adbc:	beq	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2adc0:	mov	r5, r4
   2adc4:	b	29c1c <flatcc_json_parser_generic_json@@Base+0x29c>
   2adc8:	ldrb	r1, [r2, #1]
   2adcc:	cmp	r1, #32
   2add0:	addhi	r2, r2, #1
   2add4:	bls	2a844 <flatcc_json_parser_generic_json@@Base+0xec4>
   2add8:	cmp	r4, r2
   2addc:	bne	2abd8 <flatcc_json_parser_generic_json@@Base+0x1258>
   2ade0:	b	2a878 <flatcc_json_parser_generic_json@@Base+0xef8>
   2ade4:	cmp	r3, #91	; 0x5b
   2ade8:	beq	2a370 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2adec:	cmp	r3, #123	; 0x7b
   2adf0:	moveq	r5, r4
   2adf4:	beq	299ec <flatcc_json_parser_generic_json@@Base+0x6c>
   2adf8:	b	2adc0 <flatcc_json_parser_generic_json@@Base+0x1440>
   2adfc:	mov	r0, r4
   2ae00:	ldr	r3, [r6, #24]
   2ae04:	cmp	r3, #0
   2ae08:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2ae0c:	ldr	r3, [r6, #4]
   2ae10:	mov	r2, #6
   2ae14:	str	r2, [r6, #24]
   2ae18:	str	r0, [r6, #36]	; 0x24
   2ae1c:	sub	r3, r0, r3
   2ae20:	mov	r0, r4
   2ae24:	add	r3, r3, #1
   2ae28:	str	r3, [r6, #20]
   2ae2c:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2ae30:	ldr	r3, [r6, #24]
   2ae34:	cmp	r3, #0
   2ae38:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2ae3c:	ldr	r3, [r6, #4]
   2ae40:	mov	r2, #20
   2ae44:	mov	r0, r4
   2ae48:	str	r2, [r6, #24]
   2ae4c:	str	r1, [r6, #36]	; 0x24
   2ae50:	sub	r3, r1, r3
   2ae54:	add	r3, r3, #1
   2ae58:	str	r3, [r6, #20]
   2ae5c:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2ae60:	add	r0, r2, #1
   2ae64:	cmp	r4, r0
   2ae68:	beq	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2ae6c:	ldrb	r3, [r2, #1]
   2ae70:	sub	r1, r3, #48	; 0x30
   2ae74:	cmp	r1, #9
   2ae78:	bhi	2b13c <flatcc_json_parser_generic_json@@Base+0x17bc>
   2ae7c:	add	r2, r2, #2
   2ae80:	cmp	r4, r2
   2ae84:	mov	r0, r2
   2ae88:	beq	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2ae8c:	ldrb	r3, [r2], #1
   2ae90:	sub	r1, r3, #48	; 0x30
   2ae94:	cmp	r1, #9
   2ae98:	bls	2ae80 <flatcc_json_parser_generic_json@@Base+0x1500>
   2ae9c:	cmp	r3, #32
   2aea0:	beq	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aea4:	bls	2aec8 <flatcc_json_parser_generic_json@@Base+0x1548>
   2aea8:	cmp	r3, #58	; 0x3a
   2aeac:	beq	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aeb0:	bls	2aee4 <flatcc_json_parser_generic_json@@Base+0x1564>
   2aeb4:	cmp	r3, #93	; 0x5d
   2aeb8:	beq	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aebc:	cmp	r3, #125	; 0x7d
   2aec0:	bne	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2aec4:	b	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aec8:	cmp	r3, #9
   2aecc:	bcc	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2aed0:	cmp	r3, #11
   2aed4:	bls	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aed8:	cmp	r3, #13
   2aedc:	bne	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2aee0:	b	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aee4:	cmp	r3, #44	; 0x2c
   2aee8:	bne	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2aeec:	b	29b28 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2aef0:	add	r0, r5, #1
   2aef4:	cmp	r4, r0
   2aef8:	beq	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2aefc:	ldrb	r3, [r5, #1]
   2af00:	b	2a6d8 <flatcc_json_parser_generic_json@@Base+0xd58>
   2af04:	ldrb	r1, [r2, #1]
   2af08:	b	2ac04 <flatcc_json_parser_generic_json@@Base+0x1284>
   2af0c:	add	r2, r2, #1
   2af10:	b	2a828 <flatcc_json_parser_generic_json@@Base+0xea8>
   2af14:	ldrb	r3, [r0, #1]
   2af18:	sub	r3, r3, #48	; 0x30
   2af1c:	cmp	r3, #9
   2af20:	bhi	2afd0 <flatcc_json_parser_generic_json@@Base+0x1650>
   2af24:	add	r2, r0, #2
   2af28:	cmp	r4, r2
   2af2c:	beq	2adfc <flatcc_json_parser_generic_json@@Base+0x147c>
   2af30:	ldrb	r3, [r0, #2]
   2af34:	sub	r1, r3, #48	; 0x30
   2af38:	cmp	r1, #9
   2af3c:	bhi	2b134 <flatcc_json_parser_generic_json@@Base+0x17b4>
   2af40:	add	r2, r0, #3
   2af44:	b	2af58 <flatcc_json_parser_generic_json@@Base+0x15d8>
   2af48:	ldrb	r3, [r2], #1
   2af4c:	sub	r1, r3, #48	; 0x30
   2af50:	cmp	r1, #9
   2af54:	bhi	2a6e0 <flatcc_json_parser_generic_json@@Base+0xd60>
   2af58:	cmp	r4, r2
   2af5c:	mov	r0, r2
   2af60:	bne	2af48 <flatcc_json_parser_generic_json@@Base+0x15c8>
   2af64:	b	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2af68:	sub	r3, r4, r0
   2af6c:	add	r2, r0, #1
   2af70:	cmp	r3, #1
   2af74:	ble	2af84 <flatcc_json_parser_generic_json@@Base+0x1604>
   2af78:	ldrb	r3, [r0, #1]
   2af7c:	cmp	r3, #10
   2af80:	addeq	r2, r0, #2
   2af84:	mov	r0, r2
   2af88:	ldr	r3, [r6, #16]
   2af8c:	str	r0, [r6, #4]
   2af90:	add	r3, r3, #1
   2af94:	str	r3, [r6, #16]
   2af98:	cmp	r4, r0
   2af9c:	beq	29b9c <flatcc_json_parser_generic_json@@Base+0x21c>
   2afa0:	ldrb	r2, [r0]
   2afa4:	cmp	r2, #32
   2afa8:	bls	2aa4c <flatcc_json_parser_generic_json@@Base+0x10cc>
   2afac:	b	2a66c <flatcc_json_parser_generic_json@@Base+0xcec>
   2afb0:	add	r0, r0, #1
   2afb4:	b	2af88 <flatcc_json_parser_generic_json@@Base+0x1608>
   2afb8:	add	r0, r0, #1
   2afbc:	b	2af98 <flatcc_json_parser_generic_json@@Base+0x1618>
   2afc0:	ldrb	r3, [r5, #2]
   2afc4:	cmp	r3, #32
   2afc8:	bls	29e48 <flatcc_json_parser_generic_json@@Base+0x4c8>
   2afcc:	b	2a1f0 <flatcc_json_parser_generic_json@@Base+0x870>
   2afd0:	ldr	r3, [r6, #24]
   2afd4:	cmp	r3, #0
   2afd8:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2afdc:	ldr	r2, [r6, #4]
   2afe0:	add	r3, r0, #1
   2afe4:	mov	r1, #6
   2afe8:	mov	r0, r4
   2afec:	str	r1, [r6, #24]
   2aff0:	str	r3, [r6, #36]	; 0x24
   2aff4:	sub	r3, r3, r2
   2aff8:	add	r3, r3, #1
   2affc:	str	r3, [r6, #20]
   2b000:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2b004:	ldr	r3, [r6, #24]
   2b008:	cmp	r3, #0
   2b00c:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2b010:	ldr	r3, [r6, #4]
   2b014:	mov	r2, #2
   2b018:	sub	r3, r5, r3
   2b01c:	mov	r0, r4
   2b020:	str	r2, [r6, #24]
   2b024:	add	r3, r3, #1
   2b028:	str	r3, [r6, #20]
   2b02c:	str	r5, [r6, #36]	; 0x24
   2b030:	b	29be0 <flatcc_json_parser_generic_json@@Base+0x260>
   2b034:	ldr	r1, [r6, #24]
   2b038:	cmp	r1, #0
   2b03c:	bne	2a984 <flatcc_json_parser_generic_json@@Base+0x1004>
   2b040:	ldr	r3, [r6, #4]
   2b044:	mov	r2, #5
   2b048:	mov	r1, r2
   2b04c:	str	r2, [r6, #24]
   2b050:	str	r5, [r6, #36]	; 0x24
   2b054:	sub	r3, r5, r3
   2b058:	add	r3, r3, #1
   2b05c:	str	r3, [r6, #20]
   2b060:	b	2a984 <flatcc_json_parser_generic_json@@Base+0x1004>
   2b064:	cmp	r3, #46	; 0x2e
   2b068:	bne	2a828 <flatcc_json_parser_generic_json@@Base+0xea8>
   2b06c:	ldr	r1, [r6, #24]
   2b070:	cmp	r1, #0
   2b074:	bne	2a984 <flatcc_json_parser_generic_json@@Base+0x1004>
   2b078:	ldr	r2, [r6, #4]
   2b07c:	mov	r3, #5
   2b080:	mov	r1, r3
   2b084:	str	r3, [r6, #24]
   2b088:	str	r0, [r6, #36]	; 0x24
   2b08c:	sub	r3, r0, r2
   2b090:	add	r3, r3, #1
   2b094:	str	r3, [r6, #20]
   2b098:	b	2a984 <flatcc_json_parser_generic_json@@Base+0x1004>
   2b09c:	ldr	r3, [r6, #24]
   2b0a0:	cmp	r3, #0
   2b0a4:	bne	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2b0a8:	ldr	r3, [r6, #4]
   2b0ac:	mov	r2, #6
   2b0b0:	str	r2, [r6, #24]
   2b0b4:	str	r4, [r6, #36]	; 0x24
   2b0b8:	sub	r3, r4, r3
   2b0bc:	add	r3, r3, #1
   2b0c0:	str	r3, [r6, #20]
   2b0c4:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2b0c8:	ldr	r3, [r6, #24]
   2b0cc:	cmp	r3, #0
   2b0d0:	bne	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2b0d4:	ldr	r3, [r6, #4]
   2b0d8:	mov	r2, #6
   2b0dc:	mov	r0, r4
   2b0e0:	str	r2, [r6, #24]
   2b0e4:	str	r4, [r6, #36]	; 0x24
   2b0e8:	sub	r3, r4, r3
   2b0ec:	add	r3, r3, #1
   2b0f0:	str	r3, [r6, #20]
   2b0f4:	b	2a7b0 <flatcc_json_parser_generic_json@@Base+0xe30>
   2b0f8:	cmp	r3, #57	; 0x39
   2b0fc:	bhi	299dc <flatcc_json_parser_generic_json@@Base+0x5c>
   2b100:	cmp	r3, #48	; 0x30
   2b104:	bcs	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2b108:	cmp	r3, #34	; 0x22
   2b10c:	beq	2a784 <flatcc_json_parser_generic_json@@Base+0xe04>
   2b110:	cmp	r3, #45	; 0x2d
   2b114:	bne	29c1c <flatcc_json_parser_generic_json@@Base+0x29c>
   2b118:	b	2a7ac <flatcc_json_parser_generic_json@@Base+0xe2c>
   2b11c:	ldr	r3, [r6, #24]
   2b120:	cmp	r3, #0
   2b124:	bne	2a584 <flatcc_json_parser_generic_json@@Base+0xc04>
   2b128:	mov	r1, #4
   2b12c:	ldr	r3, [r6, #4]
   2b130:	b	2a88c <flatcc_json_parser_generic_json@@Base+0xf0c>
   2b134:	mov	r0, r2
   2b138:	b	2a6e0 <flatcc_json_parser_generic_json@@Base+0xd60>
   2b13c:	cmp	r3, #32
   2b140:	beq	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b144:	bls	2b168 <flatcc_json_parser_generic_json@@Base+0x17e8>
   2b148:	cmp	r3, #58	; 0x3a
   2b14c:	beq	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b150:	bls	2b184 <flatcc_json_parser_generic_json@@Base+0x1804>
   2b154:	cmp	r3, #93	; 0x5d
   2b158:	beq	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b15c:	cmp	r3, #125	; 0x7d
   2b160:	bne	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2b164:	b	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b168:	cmp	r3, #9
   2b16c:	bcc	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2b170:	cmp	r3, #11
   2b174:	bls	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b178:	cmp	r3, #13
   2b17c:	bne	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2b180:	b	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b184:	cmp	r3, #44	; 0x2c
   2b188:	bne	2ae00 <flatcc_json_parser_generic_json@@Base+0x1480>
   2b18c:	b	29b30 <flatcc_json_parser_generic_json@@Base+0x1b0>
   2b190:	mov	r2, r4
   2b194:	ldr	r1, [r6, #24]
   2b198:	b	2a87c <flatcc_json_parser_generic_json@@Base+0xefc>

0002b19c <flatcc_json_parser_unmatched_symbol@@Base>:
   2b19c:	ldr	r3, [r0, #8]
   2b1a0:	tst	r3, #1
   2b1a4:	bne	2b1d8 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   2b1a8:	ldr	r3, [r0, #24]
   2b1ac:	cmp	r3, #0
   2b1b0:	bne	2b1d0 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   2b1b4:	ldr	r3, [r0, #4]
   2b1b8:	mov	ip, #13
   2b1bc:	str	r1, [r0, #36]	; 0x24
   2b1c0:	str	ip, [r0, #24]
   2b1c4:	sub	r1, r1, r3
   2b1c8:	add	r1, r1, #1
   2b1cc:	str	r1, [r0, #20]
   2b1d0:	mov	r0, r2
   2b1d4:	bx	lr
   2b1d8:	ldr	r3, [r0, #12]
   2b1dc:	str	r4, [sp, #-8]!
   2b1e0:	str	lr, [sp, #4]
   2b1e4:	cmp	r3, #0
   2b1e8:	bne	2b26c <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   2b1ec:	cmp	r1, r2
   2b1f0:	beq	2b238 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   2b1f4:	ldrb	ip, [r1]
   2b1f8:	cmp	ip, #34	; 0x22
   2b1fc:	bne	2b21c <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   2b200:	b	2b4f4 <flatcc_json_parser_unmatched_symbol@@Base+0x358>
   2b204:	add	r1, r3, #1
   2b208:	cmp	r2, r1
   2b20c:	beq	2b238 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   2b210:	ldrb	ip, [r3, #1]
   2b214:	cmp	ip, #34	; 0x22
   2b218:	beq	2b4f4 <flatcc_json_parser_unmatched_symbol@@Base+0x358>
   2b21c:	cmp	ip, #92	; 0x5c
   2b220:	mov	r3, r1
   2b224:	bne	2b204 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   2b228:	sub	ip, r2, r1
   2b22c:	add	r3, r1, #1
   2b230:	cmp	ip, #1
   2b234:	bgt	2b204 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   2b238:	ldr	r3, [r0, #24]
   2b23c:	cmp	r3, #0
   2b240:	bne	2b264 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2b244:	ldr	ip, [r0, #4]
   2b248:	mov	lr, #20
   2b24c:	mov	r3, lr
   2b250:	str	r1, [r0, #36]	; 0x24
   2b254:	str	lr, [r0, #24]
   2b258:	sub	r1, r1, ip
   2b25c:	add	r1, r1, #1
   2b260:	str	r1, [r0, #20]
   2b264:	mov	r1, r2
   2b268:	b	2b318 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   2b26c:	cmp	r1, r2
   2b270:	beq	2b314 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   2b274:	ldrb	r3, [r1]
   2b278:	cmp	r3, #32
   2b27c:	bls	2b2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2b280:	mov	lr, r1
   2b284:	sub	r1, r3, #48	; 0x30
   2b288:	cmp	r3, #46	; 0x2e
   2b28c:	cmpne	r3, #95	; 0x5f
   2b290:	uxtb	ip, r1
   2b294:	add	r4, lr, #1
   2b298:	mov	r1, lr
   2b29c:	beq	2b350 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   2b2a0:	orr	lr, r3, #32
   2b2a4:	tst	r3, #128	; 0x80
   2b2a8:	sub	lr, lr, #97	; 0x61
   2b2ac:	bne	2b350 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   2b2b0:	cmp	ip, #9
   2b2b4:	uxtb	lr, lr
   2b2b8:	bls	2b350 <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   2b2bc:	cmp	lr, #25
   2b2c0:	bls	2b34c <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   2b2c4:	sub	r3, r2, r1
   2b2c8:	cmp	r3, #1
   2b2cc:	ble	2b2e0 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   2b2d0:	ldrb	r3, [r1]
   2b2d4:	cmp	r3, #32
   2b2d8:	bhi	2b384 <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   2b2dc:	beq	2b374 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   2b2e0:	cmp	r2, r1
   2b2e4:	beq	2b314 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   2b2e8:	ldrb	r3, [r1]
   2b2ec:	cmp	r3, #32
   2b2f0:	bne	2b40c <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   2b2f4:	add	ip, r1, #1
   2b2f8:	b	2b308 <flatcc_json_parser_unmatched_symbol@@Base+0x16c>
   2b2fc:	ldrb	r3, [ip], #1
   2b300:	cmp	r3, #32
   2b304:	bne	2b40c <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   2b308:	cmp	r2, ip
   2b30c:	mov	r1, ip
   2b310:	bne	2b2fc <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   2b314:	ldr	r3, [r0, #24]
   2b318:	cmp	r3, #0
   2b31c:	bne	2b33c <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   2b320:	ldr	r3, [r0, #4]
   2b324:	mov	ip, #4
   2b328:	str	ip, [r0, #24]
   2b32c:	str	r1, [r0, #36]	; 0x24
   2b330:	sub	r1, r1, r3
   2b334:	add	r1, r1, #1
   2b338:	str	r1, [r0, #20]
   2b33c:	ldr	r4, [sp]
   2b340:	add	sp, sp, #4
   2b344:	mov	r0, r2
   2b348:	pop	{pc}		; (ldr pc, [sp], #4)
   2b34c:	add	r4, r1, #1
   2b350:	cmp	r2, r4
   2b354:	mov	r1, r4
   2b358:	mov	lr, r4
   2b35c:	beq	2b574 <flatcc_json_parser_unmatched_symbol@@Base+0x3d8>
   2b360:	ldrb	ip, [r4]
   2b364:	cmp	ip, #32
   2b368:	bls	2b574 <flatcc_json_parser_unmatched_symbol@@Base+0x3d8>
   2b36c:	mov	r3, ip
   2b370:	b	2b284 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   2b374:	ldrb	r3, [r1, #1]
   2b378:	cmp	r3, #32
   2b37c:	addhi	r1, r1, #1
   2b380:	bls	2b2e0 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
   2b384:	cmp	r2, r1
   2b388:	beq	2b314 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   2b38c:	cmp	r3, #58	; 0x3a
   2b390:	bne	2b314 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   2b394:	add	lr, r1, #1
   2b398:	sub	r3, r2, lr
   2b39c:	cmp	r3, #1
   2b3a0:	ble	2b3c4 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   2b3a4:	ldrb	r3, [r1, #1]
   2b3a8:	cmp	r3, #32
   2b3ac:	bhi	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b3b0:	bne	2b3c4 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   2b3b4:	ldrb	r3, [r1, #2]
   2b3b8:	cmp	r3, #32
   2b3bc:	addhi	lr, r1, #2
   2b3c0:	bhi	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b3c4:	cmp	r2, lr
   2b3c8:	beq	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b3cc:	ldrb	ip, [lr]
   2b3d0:	cmp	ip, #32
   2b3d4:	bne	2b4fc <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   2b3d8:	add	r3, lr, #1
   2b3dc:	b	2b3ec <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   2b3e0:	ldrb	ip, [r3], #1
   2b3e4:	cmp	ip, #32
   2b3e8:	bne	2b4fc <flatcc_json_parser_unmatched_symbol@@Base+0x360>
   2b3ec:	cmp	r2, r3
   2b3f0:	mov	lr, r3
   2b3f4:	bne	2b3e0 <flatcc_json_parser_unmatched_symbol@@Base+0x244>
   2b3f8:	mov	r1, lr
   2b3fc:	ldr	r4, [sp]
   2b400:	ldr	lr, [sp, #4]
   2b404:	add	sp, sp, #8
   2b408:	b	29980 <flatcc_json_parser_generic_json@@Base>
   2b40c:	cmp	r3, #32
   2b410:	bhi	2b38c <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   2b414:	sub	r3, r3, #9
   2b418:	cmp	r3, #23
   2b41c:	ldrls	pc, [pc, r3, lsl #2]
   2b420:	b	2b4dc <flatcc_json_parser_unmatched_symbol@@Base+0x340>
   2b424:	ldrdeq	fp, [r2], -r4
   2b428:	andeq	fp, r2, r8, lsr #9
   2b42c:	ldrdeq	fp, [r2], -ip
   2b430:	ldrdeq	fp, [r2], -ip
   2b434:	andeq	fp, r2, r4, lsl #9
   2b438:	ldrdeq	fp, [r2], -ip
   2b43c:	ldrdeq	fp, [r2], -ip
   2b440:	ldrdeq	fp, [r2], -ip
   2b444:	ldrdeq	fp, [r2], -ip
   2b448:	ldrdeq	fp, [r2], -ip
   2b44c:	ldrdeq	fp, [r2], -ip
   2b450:	ldrdeq	fp, [r2], -ip
   2b454:	ldrdeq	fp, [r2], -ip
   2b458:	ldrdeq	fp, [r2], -ip
   2b45c:	ldrdeq	fp, [r2], -ip
   2b460:	ldrdeq	fp, [r2], -ip
   2b464:	ldrdeq	fp, [r2], -ip
   2b468:	ldrdeq	fp, [r2], -ip
   2b46c:	ldrdeq	fp, [r2], -ip
   2b470:	ldrdeq	fp, [r2], -ip
   2b474:	ldrdeq	fp, [r2], -ip
   2b478:	ldrdeq	fp, [r2], -ip
   2b47c:	ldrdeq	fp, [r2], -ip
   2b480:	andeq	fp, r2, r0, ror #5
   2b484:	sub	r3, r2, r1
   2b488:	add	ip, r1, #1
   2b48c:	cmp	r3, #1
   2b490:	ble	2b4a0 <flatcc_json_parser_unmatched_symbol@@Base+0x304>
   2b494:	ldrb	r3, [r1, #1]
   2b498:	cmp	r3, #10
   2b49c:	addeq	ip, r1, #2
   2b4a0:	mov	r1, ip
   2b4a4:	b	2b4ac <flatcc_json_parser_unmatched_symbol@@Base+0x310>
   2b4a8:	add	r1, r1, #1
   2b4ac:	ldr	r3, [r0, #16]
   2b4b0:	str	r1, [r0, #4]
   2b4b4:	add	r3, r3, #1
   2b4b8:	str	r3, [r0, #16]
   2b4bc:	cmp	r2, r1
   2b4c0:	beq	2b314 <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   2b4c4:	ldrb	r3, [r1]
   2b4c8:	cmp	r3, #32
   2b4cc:	bls	2b414 <flatcc_json_parser_unmatched_symbol@@Base+0x278>
   2b4d0:	b	2b38c <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   2b4d4:	add	r1, r1, #1
   2b4d8:	b	2b4bc <flatcc_json_parser_unmatched_symbol@@Base+0x320>
   2b4dc:	ldr	r3, [r0, #24]
   2b4e0:	cmp	r3, #0
   2b4e4:	bne	2b33c <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   2b4e8:	mov	ip, #5
   2b4ec:	ldr	r3, [r0, #4]
   2b4f0:	b	2b328 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   2b4f4:	add	r1, r1, #1
   2b4f8:	b	2b2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2b4fc:	cmp	ip, #32
   2b500:	bhi	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b504:	sub	ip, ip, #9
   2b508:	cmp	ip, #23
   2b50c:	ldrls	pc, [pc, ip, lsl #2]
   2b510:	b	2b604 <flatcc_json_parser_unmatched_symbol@@Base+0x468>
   2b514:	strdeq	fp, [r2], -ip
   2b518:	strdeq	fp, [r2], -r4
   2b51c:	andeq	fp, r2, r4, lsl #12
   2b520:	andeq	fp, r2, r4, lsl #12
   2b524:	andeq	fp, r2, ip, lsr #11
   2b528:	andeq	fp, r2, r4, lsl #12
   2b52c:	andeq	fp, r2, r4, lsl #12
   2b530:	andeq	fp, r2, r4, lsl #12
   2b534:	andeq	fp, r2, r4, lsl #12
   2b538:	andeq	fp, r2, r4, lsl #12
   2b53c:	andeq	fp, r2, r4, lsl #12
   2b540:	andeq	fp, r2, r4, lsl #12
   2b544:	andeq	fp, r2, r4, lsl #12
   2b548:	andeq	fp, r2, r4, lsl #12
   2b54c:	andeq	fp, r2, r4, lsl #12
   2b550:	andeq	fp, r2, r4, lsl #12
   2b554:	andeq	fp, r2, r4, lsl #12
   2b558:	andeq	fp, r2, r4, lsl #12
   2b55c:	andeq	fp, r2, r4, lsl #12
   2b560:	andeq	fp, r2, r4, lsl #12
   2b564:	andeq	fp, r2, r4, lsl #12
   2b568:	andeq	fp, r2, r4, lsl #12
   2b56c:	andeq	fp, r2, r4, lsl #12
   2b570:	andeq	fp, r2, r4, asr #7
   2b574:	cmp	r3, #46	; 0x2e
   2b578:	bne	2b2c4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2b57c:	ldr	r3, [r0, #24]
   2b580:	cmp	r3, #0
   2b584:	bne	2b264 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2b588:	ldr	ip, [r0, #4]
   2b58c:	mov	r1, #5
   2b590:	mov	r3, r1
   2b594:	str	r4, [r0, #36]	; 0x24
   2b598:	str	r1, [r0, #24]
   2b59c:	sub	r4, r4, ip
   2b5a0:	add	r4, r4, #1
   2b5a4:	str	r4, [r0, #20]
   2b5a8:	b	2b264 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   2b5ac:	sub	r3, r2, lr
   2b5b0:	add	r1, lr, #1
   2b5b4:	cmp	r3, #1
   2b5b8:	ble	2b5c8 <flatcc_json_parser_unmatched_symbol@@Base+0x42c>
   2b5bc:	ldrb	r3, [lr, #1]
   2b5c0:	cmp	r3, #10
   2b5c4:	addeq	r1, lr, #2
   2b5c8:	mov	lr, r1
   2b5cc:	ldr	r3, [r0, #16]
   2b5d0:	str	lr, [r0, #4]
   2b5d4:	add	r3, r3, #1
   2b5d8:	str	r3, [r0, #16]
   2b5dc:	cmp	r2, lr
   2b5e0:	beq	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b5e4:	ldrb	ip, [lr]
   2b5e8:	cmp	ip, #32
   2b5ec:	bls	2b504 <flatcc_json_parser_unmatched_symbol@@Base+0x368>
   2b5f0:	b	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b5f4:	add	lr, lr, #1
   2b5f8:	b	2b5cc <flatcc_json_parser_unmatched_symbol@@Base+0x430>
   2b5fc:	add	lr, lr, #1
   2b600:	b	2b5dc <flatcc_json_parser_unmatched_symbol@@Base+0x440>
   2b604:	ldr	r3, [r0, #24]
   2b608:	cmp	r3, #0
   2b60c:	movne	lr, r2
   2b610:	bne	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>
   2b614:	ldr	r3, [r0, #4]
   2b618:	mov	r1, #5
   2b61c:	str	r1, [r0, #24]
   2b620:	str	lr, [r0, #36]	; 0x24
   2b624:	sub	r3, lr, r3
   2b628:	mov	lr, r2
   2b62c:	add	r3, r3, #1
   2b630:	str	r3, [r0, #20]
   2b634:	b	2b3f8 <flatcc_json_parser_unmatched_symbol@@Base+0x25c>

0002b638 <flatcc_json_parser_integer@@Base>:
   2b638:	cmp	r1, r2
   2b63c:	beq	2b788 <flatcc_json_parser_integer@@Base+0x150>
   2b640:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b644:	mov	ip, r0
   2b648:	strd	r6, [sp, #8]
   2b64c:	strd	r8, [sp, #16]
   2b650:	strd	sl, [sp, #24]
   2b654:	str	lr, [sp, #32]
   2b658:	ldrb	lr, [r1]
   2b65c:	sub	lr, lr, #45	; 0x2d
   2b660:	clz	lr, lr
   2b664:	lsr	lr, lr, #5
   2b668:	add	r0, r1, lr
   2b66c:	cmp	r2, r0
   2b670:	str	lr, [r3]
   2b674:	beq	2b79c <flatcc_json_parser_integer@@Base+0x164>
   2b678:	ldrb	r8, [r1, lr]
   2b67c:	sub	r3, r8, #48	; 0x30
   2b680:	cmp	r3, #9
   2b684:	bhi	2b790 <flatcc_json_parser_integer@@Base+0x158>
   2b688:	uxtb	r8, r8
   2b68c:	mov	r9, #0
   2b690:	subs	r4, r8, #48	; 0x30
   2b694:	add	lr, r0, #1
   2b698:	sbc	r5, r9, #0
   2b69c:	b	2b6d4 <flatcc_json_parser_integer@@Base+0x9c>
   2b6a0:	adds	r9, r9, r4
   2b6a4:	adc	r3, r3, r5
   2b6a8:	adds	r9, r9, r9
   2b6ac:	adc	r3, r3, r3
   2b6b0:	subs	r6, r9, #48	; 0x30
   2b6b4:	sbc	r7, r3, #0
   2b6b8:	adds	sl, r6, r8
   2b6bc:	adc	fp, r7, #0
   2b6c0:	cmp	fp, r5
   2b6c4:	mov	r5, fp
   2b6c8:	cmpeq	sl, r4
   2b6cc:	mov	r4, sl
   2b6d0:	bcc	2b770 <flatcc_json_parser_integer@@Base+0x138>
   2b6d4:	lsl	r3, r5, #2
   2b6d8:	cmp	lr, r2
   2b6dc:	mov	r0, lr
   2b6e0:	lsl	r9, r4, #2
   2b6e4:	orr	r3, r3, r4, lsr #30
   2b6e8:	beq	2b718 <flatcc_json_parser_integer@@Base+0xe0>
   2b6ec:	ldrb	r8, [lr]
   2b6f0:	add	lr, lr, #1
   2b6f4:	sub	sl, r8, #48	; 0x30
   2b6f8:	cmp	sl, #9
   2b6fc:	bls	2b6a0 <flatcc_json_parser_integer@@Base+0x68>
   2b700:	cmp	r1, r0
   2b704:	beq	2b720 <flatcc_json_parser_integer@@Base+0xe8>
   2b708:	and	r3, r8, #223	; 0xdf
   2b70c:	cmp	r8, #46	; 0x2e
   2b710:	cmpne	r3, #69	; 0x45
   2b714:	beq	2b738 <flatcc_json_parser_integer@@Base+0x100>
   2b718:	ldr	r3, [sp, #36]	; 0x24
   2b71c:	strd	r4, [r3]
   2b720:	ldrd	r4, [sp]
   2b724:	ldrd	r6, [sp, #8]
   2b728:	ldrd	r8, [sp, #16]
   2b72c:	ldrd	sl, [sp, #24]
   2b730:	add	sp, sp, #32
   2b734:	pop	{pc}		; (ldr pc, [sp], #4)
   2b738:	ldr	r3, [ip, #24]
   2b73c:	cmp	r3, #0
   2b740:	bne	2b768 <flatcc_json_parser_integer@@Base+0x130>
   2b744:	ldr	r3, [ip, #4]
   2b748:	mov	r1, #12
   2b74c:	sub	r3, r0, r3
   2b750:	str	r1, [ip, #24]
   2b754:	add	r3, r3, #1
   2b758:	str	r3, [ip, #20]
   2b75c:	str	r0, [ip, #36]	; 0x24
   2b760:	mov	r0, r2
   2b764:	b	2b720 <flatcc_json_parser_integer@@Base+0xe8>
   2b768:	mov	r0, r2
   2b76c:	b	2b720 <flatcc_json_parser_integer@@Base+0xe8>
   2b770:	ldr	r3, [ip, #24]
   2b774:	cmp	r3, #0
   2b778:	bne	2b768 <flatcc_json_parser_integer@@Base+0x130>
   2b77c:	mov	r1, #8
   2b780:	ldr	r3, [ip, #4]
   2b784:	b	2b74c <flatcc_json_parser_integer@@Base+0x114>
   2b788:	mov	r0, r2
   2b78c:	bx	lr
   2b790:	mov	r4, #0
   2b794:	mov	r5, #0
   2b798:	b	2b700 <flatcc_json_parser_integer@@Base+0xc8>
   2b79c:	mov	r4, #0
   2b7a0:	mov	r5, #0
   2b7a4:	b	2b718 <flatcc_json_parser_integer@@Base+0xe0>

0002b7a8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2b7a8:	cmp	r1, r2
   2b7ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b7b0:	mov	r5, r2
   2b7b4:	mov	r4, r0
   2b7b8:	strd	r6, [sp, #8]
   2b7bc:	strd	r8, [sp, #16]
   2b7c0:	mov	r8, r3
   2b7c4:	strd	sl, [sp, #24]
   2b7c8:	str	lr, [sp, #32]
   2b7cc:	sub	sp, sp, #44	; 0x2c
   2b7d0:	beq	2b970 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   2b7d4:	ldrb	r3, [r1]
   2b7d8:	cmp	r3, #34	; 0x22
   2b7dc:	bne	2b970 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   2b7e0:	add	sl, r1, #1
   2b7e4:	cmp	r2, sl
   2b7e8:	beq	2ba84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   2b7ec:	ldrb	r3, [r1, #1]
   2b7f0:	cmp	r3, #34	; 0x22
   2b7f4:	cmpne	r3, #31
   2b7f8:	movhi	r2, #1
   2b7fc:	movls	r2, #0
   2b800:	cmp	r3, #92	; 0x5c
   2b804:	moveq	r2, #0
   2b808:	andne	r2, r2, #1
   2b80c:	cmp	r2, #0
   2b810:	beq	2baac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x304>
   2b814:	add	r1, r1, #2
   2b818:	cmp	r1, r5
   2b81c:	mov	r6, r1
   2b820:	beq	2ba88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   2b824:	ldrb	r3, [r1], #1
   2b828:	cmp	r3, #34	; 0x22
   2b82c:	cmpne	r3, #31
   2b830:	movhi	r2, #1
   2b834:	movls	r2, #0
   2b838:	cmp	r3, #92	; 0x5c
   2b83c:	moveq	r2, #0
   2b840:	andne	r2, r2, #1
   2b844:	cmp	r2, #0
   2b848:	bne	2b818 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   2b84c:	cmp	r3, #31
   2b850:	bls	2ba38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x290>
   2b854:	cmp	r3, #34	; 0x22
   2b858:	bne	2b99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   2b85c:	sub	r9, r6, sl
   2b860:	lsr	r7, r9, #2
   2b864:	and	r3, r9, #3
   2b868:	cmp	r3, #2
   2b86c:	add	r7, r7, r7, lsl #1
   2b870:	addeq	r7, r7, #1
   2b874:	beq	2b880 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   2b878:	cmp	r3, #3
   2b87c:	addeq	r7, r7, #2
   2b880:	mov	r2, #1
   2b884:	mvn	r3, #0
   2b888:	ldr	r0, [r4]
   2b88c:	mov	r1, r2
   2b890:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   2b894:	cmp	r0, #0
   2b898:	bne	2b9f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   2b89c:	mov	r1, r7
   2b8a0:	ldr	r0, [r4]
   2b8a4:	bl	2222c <flatcc_builder_extend_vector@@Base>
   2b8a8:	subs	fp, r0, #0
   2b8ac:	beq	2b9f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   2b8b0:	ldr	r3, [pc, #1028]	; 2bcbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x514>
   2b8b4:	ldr	r1, [sp, #80]	; 0x50
   2b8b8:	add	r2, r3, #256	; 0x100
   2b8bc:	cmp	r1, #0
   2b8c0:	moveq	r3, r2
   2b8c4:	cmp	r7, #0
   2b8c8:	movne	r1, r7
   2b8cc:	mvneq	r1, #0
   2b8d0:	cmp	r9, #0
   2b8d4:	beq	2bc9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4f4>
   2b8d8:	sub	r2, fp, #3
   2b8dc:	add	r0, fp, r1
   2b8e0:	str	fp, [sp, #4]
   2b8e4:	add	r2, r2, r1
   2b8e8:	mov	lr, sl
   2b8ec:	str	r9, [sp, #8]
   2b8f0:	str	r0, [sp, #12]
   2b8f4:	str	r2, [sp, #24]
   2b8f8:	mov	r2, fp
   2b8fc:	ldrd	r0, [sp, #8]
   2b900:	str	r2, [sp, #16]
   2b904:	sub	r2, r1, r2
   2b908:	mov	r1, #0
   2b90c:	str	r2, [sp, #20]
   2b910:	ldrb	r2, [lr, r1]
   2b914:	ldrb	ip, [r3, r2]
   2b918:	add	r2, sp, #40	; 0x28
   2b91c:	add	r2, r2, r1
   2b920:	cmp	ip, #63	; 0x3f
   2b924:	strb	ip, [r2, #-4]
   2b928:	bls	2ba68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   2b92c:	cmp	ip, #65	; 0x41
   2b930:	beq	2baa0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f8>
   2b934:	cmp	ip, #66	; 0x42
   2b938:	movne	r2, r1
   2b93c:	beq	2bab4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   2b940:	sub	r2, r0, r2
   2b944:	cmp	r1, #2
   2b948:	beq	2bb08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   2b94c:	cmp	r1, #3
   2b950:	beq	2bc48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4a0>
   2b954:	cmp	r1, #0
   2b958:	subeq	r2, r9, r2
   2b95c:	beq	2bc3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   2b960:	ldr	r3, [sp, #8]
   2b964:	sub	r6, r9, r3
   2b968:	add	r6, sl, r6
   2b96c:	b	2b99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   2b970:	ldr	r3, [r4, #24]
   2b974:	cmp	r3, #0
   2b978:	bne	2b998 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   2b97c:	ldr	r3, [r4, #4]
   2b980:	mov	r2, #16
   2b984:	str	r1, [r4, #36]	; 0x24
   2b988:	str	r2, [r4, #24]
   2b98c:	sub	r1, r1, r3
   2b990:	add	r1, r1, #1
   2b994:	str	r1, [r4, #20]
   2b998:	mov	r6, r5
   2b99c:	ldr	r2, [sp, #80]	; 0x50
   2b9a0:	mov	r3, #0
   2b9a4:	str	r3, [r8]
   2b9a8:	cmp	r2, r3
   2b9ac:	ldr	r3, [r4, #24]
   2b9b0:	movne	r2, #32
   2b9b4:	moveq	r2, #31
   2b9b8:	cmp	r3, #0
   2b9bc:	bne	2ba30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   2b9c0:	ldr	r3, [r4, #4]
   2b9c4:	mov	r0, r5
   2b9c8:	str	r2, [r4, #24]
   2b9cc:	str	r6, [r4, #36]	; 0x24
   2b9d0:	sub	r6, r6, r3
   2b9d4:	add	r6, r6, #1
   2b9d8:	str	r6, [r4, #20]
   2b9dc:	add	sp, sp, #44	; 0x2c
   2b9e0:	ldrd	r4, [sp]
   2b9e4:	ldrd	r6, [sp, #8]
   2b9e8:	ldrd	r8, [sp, #16]
   2b9ec:	ldrd	sl, [sp, #24]
   2b9f0:	add	sp, sp, #32
   2b9f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9f8:	mov	r3, #0
   2b9fc:	str	r3, [r8]
   2ba00:	ldr	r3, [r4, #24]
   2ba04:	cmp	r3, #0
   2ba08:	bne	2ba30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   2ba0c:	ldr	r3, [r4, #4]
   2ba10:	mov	r2, #33	; 0x21
   2ba14:	mov	r0, r5
   2ba18:	str	r6, [r4, #36]	; 0x24
   2ba1c:	str	r2, [r4, #24]
   2ba20:	sub	r6, r6, r3
   2ba24:	add	r6, r6, #1
   2ba28:	str	r6, [r4, #20]
   2ba2c:	b	2b9dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   2ba30:	mov	r0, r5
   2ba34:	b	2b9dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   2ba38:	ldr	r3, [r4, #24]
   2ba3c:	cmp	r3, #0
   2ba40:	bne	2b998 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   2ba44:	ldr	r3, [r4, #4]
   2ba48:	mov	r2, #17
   2ba4c:	sub	r3, r6, r3
   2ba50:	str	r2, [r4, #24]
   2ba54:	add	r3, r3, #1
   2ba58:	str	r3, [r4, #20]
   2ba5c:	str	r6, [r4, #36]	; 0x24
   2ba60:	mov	r6, r5
   2ba64:	b	2b99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   2ba68:	add	r1, r1, #1
   2ba6c:	cmp	r1, #3
   2ba70:	bhi	2bbb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x408>
   2ba74:	cmp	r0, r1
   2ba78:	bne	2b910 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   2ba7c:	mov	r2, #0
   2ba80:	b	2b944 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   2ba84:	mov	r6, r2
   2ba88:	ldr	r3, [r4, #24]
   2ba8c:	cmp	r3, #0
   2ba90:	bne	2b998 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   2ba94:	mov	r2, #20
   2ba98:	ldr	r3, [r4, #4]
   2ba9c:	b	2ba4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   2baa0:	add	lr, lr, #1
   2baa4:	sub	r0, r0, #1
   2baa8:	b	2ba6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   2baac:	mov	r6, sl
   2bab0:	b	2b84c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa4>
   2bab4:	add	r2, r1, #1
   2bab8:	cmp	r2, #7
   2babc:	cmpls	r2, r0
   2bac0:	bcs	2b940 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2bac4:	ldrb	ip, [lr, r2]
   2bac8:	add	lr, lr, r2
   2bacc:	ldrb	ip, [r3, ip]
   2bad0:	sub	ip, ip, #65	; 0x41
   2bad4:	cmp	ip, #1
   2bad8:	bls	2baf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34c>
   2badc:	b	2b940 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2bae0:	ldrb	ip, [lr, #1]!
   2bae4:	ldrb	ip, [r3, ip]
   2bae8:	sub	ip, ip, #65	; 0x41
   2baec:	cmp	ip, #1
   2baf0:	bhi	2b940 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2baf4:	add	r2, r2, #1
   2baf8:	cmp	r2, #7
   2bafc:	cmpls	r2, r0
   2bb00:	bcc	2bae0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x338>
   2bb04:	b	2b940 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   2bb08:	ldrb	r3, [sp, #37]	; 0x25
   2bb0c:	lsl	r1, r3, #4
   2bb10:	tst	r1, #240	; 0xf0
   2bb14:	bne	2b960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2bb18:	ldrb	r0, [sp, #36]	; 0x24
   2bb1c:	lsr	r3, r3, #4
   2bb20:	sub	r2, r9, r2
   2bb24:	ldr	r1, [sp, #4]
   2bb28:	orr	r3, r3, r0, lsl #2
   2bb2c:	strb	r3, [r1], #1
   2bb30:	sub	r1, r1, fp
   2bb34:	cmp	r9, r2
   2bb38:	addne	r6, sl, r2
   2bb3c:	bne	2b99c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   2bb40:	cmp	r7, r1
   2bb44:	ldr	r0, [r4]
   2bb48:	bls	2bb60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   2bb4c:	sub	r1, r7, r1
   2bb50:	bl	22ce8 <flatcc_builder_truncate_vector@@Base>
   2bb54:	cmp	r0, #0
   2bb58:	bne	2b9f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   2bb5c:	ldr	r0, [r4]
   2bb60:	bl	24304 <flatcc_builder_end_vector@@Base>
   2bb64:	cmp	r0, #0
   2bb68:	str	r0, [r8]
   2bb6c:	beq	2b9f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   2bb70:	ldrb	r3, [r6]
   2bb74:	cmp	r3, #34	; 0x22
   2bb78:	addeq	r0, r6, #1
   2bb7c:	beq	2b9dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   2bb80:	ldr	r3, [r4, #24]
   2bb84:	cmp	r3, #0
   2bb88:	bne	2ba30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   2bb8c:	ldr	r3, [r4, #4]
   2bb90:	mov	r2, #20
   2bb94:	mov	r0, r5
   2bb98:	str	r2, [r4, #24]
   2bb9c:	str	r6, [r4, #36]	; 0x24
   2bba0:	sub	r3, r6, r3
   2bba4:	add	r3, r3, #1
   2bba8:	str	r3, [r4, #20]
   2bbac:	b	2b9dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   2bbb0:	ldr	r2, [sp, #20]
   2bbb4:	cmp	r2, #2
   2bbb8:	bls	2b960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2bbbc:	ldr	r2, [sp, #4]
   2bbc0:	sub	r0, r0, #4
   2bbc4:	add	lr, lr, #4
   2bbc8:	ldr	ip, [sp, #24]
   2bbcc:	str	r0, [sp, #8]
   2bbd0:	ldrb	r1, [sp, #37]	; 0x25
   2bbd4:	add	r0, r2, #3
   2bbd8:	cmp	ip, r2
   2bbdc:	ldrb	ip, [sp, #36]	; 0x24
   2bbe0:	str	r0, [sp, #16]
   2bbe4:	ldrb	r2, [sp, #38]	; 0x26
   2bbe8:	lsr	r0, r1, #4
   2bbec:	str	r1, [sp, #20]
   2bbf0:	ldrb	r1, [sp, #39]	; 0x27
   2bbf4:	orr	r0, r0, ip, lsl #2
   2bbf8:	ldr	ip, [sp, #20]
   2bbfc:	str	r1, [sp, #28]
   2bc00:	lsr	r1, r2, #2
   2bc04:	orr	r1, r1, ip, lsl #4
   2bc08:	ldr	ip, [sp, #28]
   2bc0c:	orr	r2, ip, r2, lsl #6
   2bc10:	ldr	ip, [sp, #4]
   2bc14:	strb	r0, [ip]
   2bc18:	strb	r1, [ip, #1]
   2bc1c:	strb	r2, [ip, #2]
   2bc20:	beq	2bca8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x500>
   2bc24:	ldr	r2, [sp, #8]
   2bc28:	cmp	r2, #0
   2bc2c:	ldr	r2, [sp, #16]
   2bc30:	str	r2, [sp, #4]
   2bc34:	bne	2b8fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x154>
   2bc38:	mov	r2, r9
   2bc3c:	ldr	r3, [sp, #16]
   2bc40:	sub	r1, r3, fp
   2bc44:	b	2bb34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   2bc48:	ldrb	r3, [sp, #38]	; 0x26
   2bc4c:	lsl	r1, r3, #6
   2bc50:	tst	r1, #192	; 0xc0
   2bc54:	bne	2b960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2bc58:	ldr	r1, [sp, #20]
   2bc5c:	cmp	r1, #1
   2bc60:	beq	2b960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2bc64:	ldrb	r0, [sp, #37]	; 0x25
   2bc68:	lsr	r3, r3, #2
   2bc6c:	sub	r2, r9, r2
   2bc70:	ldrb	lr, [sp, #36]	; 0x24
   2bc74:	ldr	r1, [sp, #4]
   2bc78:	lsr	ip, r0, #4
   2bc7c:	orr	r0, r3, r0, lsl #4
   2bc80:	orr	r3, ip, lr, lsl #2
   2bc84:	ldr	ip, [sp, #4]
   2bc88:	add	r1, r1, #2
   2bc8c:	sub	r1, r1, fp
   2bc90:	strb	r3, [ip]
   2bc94:	strb	r0, [ip, #1]
   2bc98:	b	2bb34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   2bc9c:	mov	r2, r9
   2bca0:	str	fp, [sp, #16]
   2bca4:	b	2bc3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x494>
   2bca8:	ldr	r3, [sp, #16]
   2bcac:	sub	r1, r3, fp
   2bcb0:	ldr	r3, [sp, #8]
   2bcb4:	sub	r2, r9, r3
   2bcb8:	b	2bb34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   2bcbc:	andeq	lr, r2, r8, asr #30

0002bcc0 <flatcc_json_parser_build_string@@Base>:
   2bcc0:	cmp	r1, r2
   2bcc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2bcc8:	mov	r5, r0
   2bccc:	strd	r6, [sp, #8]
   2bcd0:	mov	r6, r2
   2bcd4:	mov	r7, r3
   2bcd8:	str	r8, [sp, #16]
   2bcdc:	str	lr, [sp, #20]
   2bce0:	sub	sp, sp, #8
   2bce4:	beq	2be88 <flatcc_json_parser_build_string@@Base+0x1c8>
   2bce8:	ldrb	r3, [r1]
   2bcec:	cmp	r3, #34	; 0x22
   2bcf0:	bne	2be88 <flatcc_json_parser_build_string@@Base+0x1c8>
   2bcf4:	add	r8, r1, #1
   2bcf8:	cmp	r2, r8
   2bcfc:	beq	2bfd8 <flatcc_json_parser_build_string@@Base+0x318>
   2bd00:	ldrb	r2, [r1, #1]
   2bd04:	cmp	r2, #34	; 0x22
   2bd08:	cmpne	r2, #31
   2bd0c:	movhi	r3, #1
   2bd10:	movls	r3, #0
   2bd14:	cmp	r2, #92	; 0x5c
   2bd18:	moveq	r3, #0
   2bd1c:	andne	r3, r3, #1
   2bd20:	cmp	r3, #0
   2bd24:	beq	2bff8 <flatcc_json_parser_build_string@@Base+0x338>
   2bd28:	add	r3, r1, #2
   2bd2c:	cmp	r3, r6
   2bd30:	mov	r4, r3
   2bd34:	beq	2bfdc <flatcc_json_parser_build_string@@Base+0x31c>
   2bd38:	ldrb	r2, [r3], #1
   2bd3c:	cmp	r2, #34	; 0x22
   2bd40:	cmpne	r2, #31
   2bd44:	movhi	r0, #1
   2bd48:	movls	r0, #0
   2bd4c:	cmp	r2, #92	; 0x5c
   2bd50:	moveq	r0, #0
   2bd54:	andne	r0, r0, #1
   2bd58:	cmp	r0, #0
   2bd5c:	bne	2bd2c <flatcc_json_parser_build_string@@Base+0x6c>
   2bd60:	cmp	r2, #31
   2bd64:	ldr	r0, [r5]
   2bd68:	bls	2bf54 <flatcc_json_parser_build_string@@Base+0x294>
   2bd6c:	cmp	r2, #34	; 0x22
   2bd70:	beq	2bf8c <flatcc_json_parser_build_string@@Base+0x2cc>
   2bd74:	bl	233f8 <flatcc_builder_start_string@@Base>
   2bd78:	cmp	r0, #0
   2bd7c:	bne	2be64 <flatcc_json_parser_build_string@@Base+0x1a4>
   2bd80:	sub	r2, r4, r8
   2bd84:	mov	r1, r8
   2bd88:	ldr	r0, [r5]
   2bd8c:	bl	229b4 <flatcc_builder_append_string@@Base>
   2bd90:	cmp	r0, #0
   2bd94:	beq	2be64 <flatcc_json_parser_build_string@@Base+0x1a4>
   2bd98:	cmp	r6, r4
   2bd9c:	beq	2c000 <flatcc_json_parser_build_string@@Base+0x340>
   2bda0:	ldrb	r3, [r4]
   2bda4:	cmp	r3, #34	; 0x22
   2bda8:	beq	2bfc0 <flatcc_json_parser_build_string@@Base+0x300>
   2bdac:	mov	r1, r4
   2bdb0:	add	r3, sp, #4
   2bdb4:	mov	r2, r6
   2bdb8:	mov	r0, r5
   2bdbc:	bl	28bb0 <flatcc_json_parser_string_escape@@Base>
   2bdc0:	mov	r8, r0
   2bdc4:	ldrb	r2, [sp, #4]
   2bdc8:	add	r1, sp, #5
   2bdcc:	ldr	r0, [r5]
   2bdd0:	bl	229b4 <flatcc_builder_append_string@@Base>
   2bdd4:	cmp	r0, #0
   2bdd8:	beq	2bfd0 <flatcc_json_parser_build_string@@Base+0x310>
   2bddc:	cmp	r6, r8
   2bde0:	beq	2bf0c <flatcc_json_parser_build_string@@Base+0x24c>
   2bde4:	ldrb	r3, [r8]
   2bde8:	cmp	r3, #34	; 0x22
   2bdec:	cmpne	r3, #31
   2bdf0:	movhi	r2, #1
   2bdf4:	movls	r2, #0
   2bdf8:	cmp	r3, #92	; 0x5c
   2bdfc:	moveq	r2, #0
   2be00:	andne	r2, r2, #1
   2be04:	cmp	r2, #0
   2be08:	beq	2bf4c <flatcc_json_parser_build_string@@Base+0x28c>
   2be0c:	add	r2, r8, #1
   2be10:	cmp	r6, r2
   2be14:	mov	r4, r2
   2be18:	beq	2bf10 <flatcc_json_parser_build_string@@Base+0x250>
   2be1c:	ldrb	r3, [r2], #1
   2be20:	cmp	r3, #34	; 0x22
   2be24:	cmpne	r3, #31
   2be28:	movhi	r1, #1
   2be2c:	movls	r1, #0
   2be30:	cmp	r3, #92	; 0x5c
   2be34:	moveq	r1, #0
   2be38:	andne	r1, r1, #1
   2be3c:	cmp	r1, #0
   2be40:	bne	2be10 <flatcc_json_parser_build_string@@Base+0x150>
   2be44:	cmp	r3, #31
   2be48:	ldr	r0, [r5]
   2be4c:	bls	2bec0 <flatcc_json_parser_build_string@@Base+0x200>
   2be50:	sub	r2, r4, r8
   2be54:	mov	r1, r8
   2be58:	bl	229b4 <flatcc_builder_append_string@@Base>
   2be5c:	cmp	r0, #0
   2be60:	bne	2bda0 <flatcc_json_parser_build_string@@Base+0xe0>
   2be64:	mov	r3, #0
   2be68:	str	r3, [r7]
   2be6c:	mov	r0, r4
   2be70:	add	sp, sp, #8
   2be74:	ldrd	r4, [sp]
   2be78:	ldrd	r6, [sp, #8]
   2be7c:	ldr	r8, [sp, #16]
   2be80:	add	sp, sp, #20
   2be84:	pop	{pc}		; (ldr pc, [sp], #4)
   2be88:	ldr	r3, [r5, #24]
   2be8c:	cmp	r3, #0
   2be90:	bne	2beb0 <flatcc_json_parser_build_string@@Base+0x1f0>
   2be94:	ldr	r3, [r5, #4]
   2be98:	mov	r2, #16
   2be9c:	str	r2, [r5, #24]
   2bea0:	str	r1, [r5, #36]	; 0x24
   2bea4:	sub	r3, r1, r3
   2bea8:	add	r3, r3, #1
   2beac:	str	r3, [r5, #20]
   2beb0:	mov	r4, r6
   2beb4:	mov	r8, r6
   2beb8:	ldr	r0, [r5]
   2bebc:	b	2bd74 <flatcc_json_parser_build_string@@Base+0xb4>
   2bec0:	ldr	r3, [r5, #24]
   2bec4:	cmp	r3, #0
   2bec8:	beq	2bf40 <flatcc_json_parser_build_string@@Base+0x280>
   2becc:	bl	25804 <flatcc_builder_end_string@@Base>
   2bed0:	str	r0, [r7]
   2bed4:	mov	r4, r6
   2bed8:	ldr	r3, [r5, #24]
   2bedc:	cmp	r3, #0
   2bee0:	movne	r4, r6
   2bee4:	bne	2be6c <flatcc_json_parser_build_string@@Base+0x1ac>
   2bee8:	ldr	r3, [r5, #4]
   2beec:	mov	r2, #20
   2bef0:	str	r2, [r5, #24]
   2bef4:	str	r4, [r5, #36]	; 0x24
   2bef8:	sub	r3, r4, r3
   2befc:	mov	r4, r6
   2bf00:	add	r3, r3, #1
   2bf04:	str	r3, [r5, #20]
   2bf08:	b	2be6c <flatcc_json_parser_build_string@@Base+0x1ac>
   2bf0c:	mov	r4, r6
   2bf10:	ldr	r0, [r5]
   2bf14:	ldr	r3, [r5, #24]
   2bf18:	cmp	r3, #0
   2bf1c:	bne	2becc <flatcc_json_parser_build_string@@Base+0x20c>
   2bf20:	ldr	r3, [r5, #4]
   2bf24:	mov	r2, #20
   2bf28:	str	r2, [r5, #24]
   2bf2c:	str	r4, [r5, #36]	; 0x24
   2bf30:	sub	r4, r4, r3
   2bf34:	add	r4, r4, #1
   2bf38:	str	r4, [r5, #20]
   2bf3c:	b	2becc <flatcc_json_parser_build_string@@Base+0x20c>
   2bf40:	mov	r2, #17
   2bf44:	ldr	r3, [r5, #4]
   2bf48:	b	2bf28 <flatcc_json_parser_build_string@@Base+0x268>
   2bf4c:	mov	r4, r8
   2bf50:	b	2be44 <flatcc_json_parser_build_string@@Base+0x184>
   2bf54:	ldr	r3, [r5, #24]
   2bf58:	cmp	r3, #0
   2bf5c:	bne	2bf84 <flatcc_json_parser_build_string@@Base+0x2c4>
   2bf60:	ldr	r3, [r5, #4]
   2bf64:	mov	r2, #17
   2bf68:	sub	r3, r4, r3
   2bf6c:	str	r2, [r5, #24]
   2bf70:	add	r3, r3, #1
   2bf74:	str	r3, [r5, #20]
   2bf78:	str	r4, [r5, #36]	; 0x24
   2bf7c:	mov	r4, r6
   2bf80:	b	2bd74 <flatcc_json_parser_build_string@@Base+0xb4>
   2bf84:	mov	r4, r6
   2bf88:	b	2bd74 <flatcc_json_parser_build_string@@Base+0xb4>
   2bf8c:	sub	r2, r4, r8
   2bf90:	mov	r1, r8
   2bf94:	bl	254f8 <flatcc_builder_create_string@@Base>
   2bf98:	str	r0, [r7]
   2bf9c:	ldrb	r3, [r4]
   2bfa0:	cmp	r3, #34	; 0x22
   2bfa4:	addeq	r4, r4, #1
   2bfa8:	beq	2be6c <flatcc_json_parser_build_string@@Base+0x1ac>
   2bfac:	ldr	r3, [r5, #24]
   2bfb0:	cmp	r3, #0
   2bfb4:	movne	r4, r6
   2bfb8:	bne	2be6c <flatcc_json_parser_build_string@@Base+0x1ac>
   2bfbc:	b	2bee8 <flatcc_json_parser_build_string@@Base+0x228>
   2bfc0:	ldr	r0, [r5]
   2bfc4:	bl	25804 <flatcc_builder_end_string@@Base>
   2bfc8:	str	r0, [r7]
   2bfcc:	b	2bf9c <flatcc_json_parser_build_string@@Base+0x2dc>
   2bfd0:	mov	r4, r8
   2bfd4:	b	2be64 <flatcc_json_parser_build_string@@Base+0x1a4>
   2bfd8:	mov	r4, r2
   2bfdc:	ldr	r0, [r5]
   2bfe0:	ldr	r3, [r5, #24]
   2bfe4:	cmp	r3, #0
   2bfe8:	bne	2bf84 <flatcc_json_parser_build_string@@Base+0x2c4>
   2bfec:	mov	r2, #20
   2bff0:	ldr	r3, [r5, #4]
   2bff4:	b	2bf68 <flatcc_json_parser_build_string@@Base+0x2a8>
   2bff8:	mov	r4, r8
   2bffc:	b	2bd60 <flatcc_json_parser_build_string@@Base+0xa0>
   2c000:	ldr	r0, [r5]
   2c004:	b	2becc <flatcc_json_parser_build_string@@Base+0x20c>

0002c008 <flatcc_json_parser_prepare_unions@@Base>:
   2c008:	add	ip, r3, r3, lsl #1
   2c00c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c010:	mov	r4, r0
   2c014:	ldr	r0, [r0]
   2c018:	mov	r5, r2
   2c01c:	strd	r6, [sp, #8]
   2c020:	mov	r7, r1
   2c024:	lsl	r1, ip, #3
   2c028:	str	r8, [sp, #16]
   2c02c:	mov	r6, r3
   2c030:	ldr	r8, [sp, #24]
   2c034:	add	r1, r1, #8
   2c038:	str	lr, [sp, #20]
   2c03c:	bl	213e0 <flatcc_builder_enter_user_frame@@Base>
   2c040:	cmp	r0, #0
   2c044:	str	r0, [r8]
   2c048:	bne	2c08c <flatcc_json_parser_prepare_unions@@Base+0x84>
   2c04c:	ldr	r3, [r4, #24]
   2c050:	cmp	r3, #0
   2c054:	bne	2c074 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   2c058:	ldr	r3, [r4, #4]
   2c05c:	mov	r1, #33	; 0x21
   2c060:	str	r7, [r4, #36]	; 0x24
   2c064:	str	r1, [r4, #24]
   2c068:	sub	r7, r7, r3
   2c06c:	add	r7, r7, #1
   2c070:	str	r7, [r4, #20]
   2c074:	mov	r0, r5
   2c078:	ldrd	r4, [sp]
   2c07c:	ldrd	r6, [sp, #8]
   2c080:	ldr	r8, [sp, #16]
   2c084:	add	sp, sp, #20
   2c088:	pop	{pc}		; (ldr pc, [sp], #4)
   2c08c:	mov	r1, r0
   2c090:	ldr	r0, [r4]
   2c094:	mov	r5, r7
   2c098:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c09c:	str	r6, [r0]
   2c0a0:	b	2c074 <flatcc_json_parser_prepare_unions@@Base+0x6c>

0002c0a4 <flatcc_json_parser_finalize_unions@@Base>:
   2c0a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c0a8:	mov	r4, r0
   2c0ac:	mov	r5, r1
   2c0b0:	mov	r1, r3
   2c0b4:	ldr	r0, [r0]
   2c0b8:	strd	r6, [sp, #8]
   2c0bc:	mov	r6, r3
   2c0c0:	mov	r7, r2
   2c0c4:	str	r8, [sp, #16]
   2c0c8:	str	lr, [sp, #20]
   2c0cc:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c0d0:	ldr	r3, [r0, #4]
   2c0d4:	cmp	r3, #0
   2c0d8:	beq	2c10c <flatcc_json_parser_finalize_unions@@Base+0x68>
   2c0dc:	ldr	r3, [r4, #24]
   2c0e0:	cmp	r3, #0
   2c0e4:	movne	r5, r7
   2c0e8:	bne	2c10c <flatcc_json_parser_finalize_unions@@Base+0x68>
   2c0ec:	ldr	r3, [r4, #4]
   2c0f0:	mov	r2, #27
   2c0f4:	str	r5, [r4, #36]	; 0x24
   2c0f8:	str	r2, [r4, #24]
   2c0fc:	sub	r3, r5, r3
   2c100:	mov	r5, r7
   2c104:	add	r3, r3, #1
   2c108:	str	r3, [r4, #20]
   2c10c:	mov	r1, r6
   2c110:	ldr	r0, [r4]
   2c114:	bl	214c0 <flatcc_builder_exit_user_frame_at@@Base>
   2c118:	mov	r0, r5
   2c11c:	ldrd	r4, [sp]
   2c120:	ldrd	r6, [sp, #8]
   2c124:	ldr	r8, [sp, #16]
   2c128:	add	sp, sp, #20
   2c12c:	pop	{pc}		; (ldr pc, [sp], #4)

0002c130 <flatcc_json_parser_union@@Base>:
   2c130:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2c134:	mov	r5, r0
   2c138:	mov	r4, r3
   2c13c:	ldr	r0, [r0]
   2c140:	strd	r6, [sp, #8]
   2c144:	mov	r7, r1
   2c148:	mov	r6, r2
   2c14c:	str	r8, [sp, #16]
   2c150:	str	lr, [sp, #20]
   2c154:	sub	sp, sp, #16
   2c158:	ldr	r1, [sp, #44]	; 0x2c
   2c15c:	ldrh	r8, [sp, #40]	; 0x28
   2c160:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c164:	add	r3, r4, r4, lsl #1
   2c168:	add	r3, r0, r3, lsl #3
   2c16c:	ldr	r2, [r3, #8]
   2c170:	cmp	r2, #0
   2c174:	beq	2c1c8 <flatcc_json_parser_union@@Base+0x98>
   2c178:	ldr	r3, [r5, #24]
   2c17c:	cmp	r3, #0
   2c180:	bne	2c1a8 <flatcc_json_parser_union@@Base+0x78>
   2c184:	ldr	r3, [r5, #4]
   2c188:	mov	r2, #28
   2c18c:	mov	r4, r6
   2c190:	str	r2, [r5, #24]
   2c194:	str	r7, [r5, #36]	; 0x24
   2c198:	sub	r7, r7, r3
   2c19c:	add	r7, r7, #1
   2c1a0:	str	r7, [r5, #20]
   2c1a4:	b	2c1ac <flatcc_json_parser_union@@Base+0x7c>
   2c1a8:	mov	r4, r6
   2c1ac:	mov	r0, r4
   2c1b0:	add	sp, sp, #16
   2c1b4:	ldrd	r4, [sp]
   2c1b8:	ldrd	r6, [sp, #8]
   2c1bc:	ldr	r8, [sp, #16]
   2c1c0:	add	sp, sp, #20
   2c1c4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c1c8:	ldrb	r2, [r3, #20]
   2c1cc:	mov	ip, r0
   2c1d0:	cmp	r2, #0
   2c1d4:	beq	2c268 <flatcc_json_parser_union@@Base+0x138>
   2c1d8:	ldrb	r3, [r3, #21]
   2c1dc:	cmp	r3, #0
   2c1e0:	strb	r3, [sp, #8]
   2c1e4:	beq	2c2a0 <flatcc_json_parser_union@@Base+0x170>
   2c1e8:	ldr	lr, [ip, #4]
   2c1ec:	add	r4, sp, #12
   2c1f0:	mov	r1, r7
   2c1f4:	mov	r2, r6
   2c1f8:	mov	r0, r5
   2c1fc:	add	r7, sp, #8
   2c200:	sub	lr, lr, #1
   2c204:	str	lr, [ip, #4]
   2c208:	str	r4, [sp]
   2c20c:	ldr	ip, [sp, #48]	; 0x30
   2c210:	blx	ip
   2c214:	cmp	r6, r0
   2c218:	mov	r4, r0
   2c21c:	beq	2c1ac <flatcc_json_parser_union@@Base+0x7c>
   2c220:	mov	r1, r8
   2c224:	ldm	r7, {r2, r3}
   2c228:	ldr	r0, [r5]
   2c22c:	bl	25f4c <flatcc_builder_table_add_union@@Base>
   2c230:	cmp	r0, #0
   2c234:	beq	2c1ac <flatcc_json_parser_union@@Base+0x7c>
   2c238:	ldr	r3, [r5, #24]
   2c23c:	cmp	r3, #0
   2c240:	bne	2c1a8 <flatcc_json_parser_union@@Base+0x78>
   2c244:	ldr	r3, [r5, #4]
   2c248:	mov	r2, #28
   2c24c:	str	r2, [r5, #24]
   2c250:	str	r4, [r5, #36]	; 0x24
   2c254:	sub	r3, r4, r3
   2c258:	mov	r4, r6
   2c25c:	add	r3, r3, #1
   2c260:	str	r3, [r5, #20]
   2c264:	b	2c1ac <flatcc_json_parser_union@@Base+0x7c>
   2c268:	ldr	lr, [ip, #4]
   2c26c:	mov	r2, r6
   2c270:	mov	r1, r7
   2c274:	mov	r0, r5
   2c278:	ldr	r6, [r5, #4]
   2c27c:	ldr	r4, [r5, #16]
   2c280:	add	lr, lr, #1
   2c284:	str	lr, [ip, #4]
   2c288:	str	r7, [r3, #8]
   2c28c:	str	r6, [r3, #12]
   2c290:	str	r4, [r3, #16]
   2c294:	bl	29980 <flatcc_json_parser_generic_json@@Base>
   2c298:	mov	r4, r0
   2c29c:	b	2c1ac <flatcc_json_parser_union@@Base+0x7c>
   2c2a0:	ldr	r3, [r5, #24]
   2c2a4:	cmp	r3, #0
   2c2a8:	bne	2c1a8 <flatcc_json_parser_union@@Base+0x78>
   2c2ac:	mov	r2, #25
   2c2b0:	ldr	r3, [r5, #4]
   2c2b4:	b	2c18c <flatcc_json_parser_union@@Base+0x5c>

0002c2b8 <flatcc_json_parser_union_type@@Base>:
   2c2b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c2bc:	mov	r5, r0
   2c2c0:	add	r4, r3, r3, lsl #1
   2c2c4:	ldr	r0, [r0]
   2c2c8:	strd	r6, [sp, #8]
   2c2cc:	lsl	r4, r4, #3
   2c2d0:	mov	r7, r2
   2c2d4:	strd	r8, [sp, #16]
   2c2d8:	strd	sl, [sp, #24]
   2c2dc:	mov	sl, r1
   2c2e0:	str	lr, [sp, #32]
   2c2e4:	sub	sp, sp, #36	; 0x24
   2c2e8:	ldrh	r3, [sp, #72]	; 0x48
   2c2ec:	ldr	r1, [sp, #76]	; 0x4c
   2c2f0:	str	r3, [sp, #12]
   2c2f4:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c2f8:	add	fp, r0, #8
   2c2fc:	add	r6, fp, r4
   2c300:	ldrb	r3, [r6, #12]
   2c304:	cmp	r3, #0
   2c308:	beq	2c360 <flatcc_json_parser_union_type@@Base+0xa8>
   2c30c:	ldr	r3, [r5, #24]
   2c310:	cmp	r3, #0
   2c314:	beq	2c33c <flatcc_json_parser_union_type@@Base+0x84>
   2c318:	mov	r9, r7
   2c31c:	mov	r0, r9
   2c320:	add	sp, sp, #36	; 0x24
   2c324:	ldrd	r4, [sp]
   2c328:	ldrd	r6, [sp, #8]
   2c32c:	ldrd	r8, [sp, #16]
   2c330:	ldrd	sl, [sp, #24]
   2c334:	add	sp, sp, #32
   2c338:	pop	{pc}		; (ldr pc, [sp], #4)
   2c33c:	ldr	r3, [r5, #4]
   2c340:	mov	r2, #28
   2c344:	mov	r9, r7
   2c348:	str	sl, [r5, #36]	; 0x24
   2c34c:	str	r2, [r5, #24]
   2c350:	sub	sl, sl, r3
   2c354:	add	sl, sl, #1
   2c358:	str	sl, [r5, #20]
   2c35c:	b	2c31c <flatcc_json_parser_union_type@@Base+0x64>
   2c360:	mov	r8, r0
   2c364:	mov	r1, #0
   2c368:	str	r3, [sp, #20]
   2c36c:	mov	r0, #0
   2c370:	mov	r3, #1
   2c374:	cmp	sl, r7
   2c378:	strd	r0, [sp, #24]
   2c37c:	strh	r3, [r6, #12]
   2c380:	beq	2c480 <flatcc_json_parser_union_type@@Base+0x1c8>
   2c384:	add	r0, sp, #24
   2c388:	add	r3, sp, #20
   2c38c:	mov	r2, r7
   2c390:	mov	r1, sl
   2c394:	str	r0, [sp]
   2c398:	mov	r0, r5
   2c39c:	bl	2b638 <flatcc_json_parser_integer@@Base>
   2c3a0:	cmp	sl, r0
   2c3a4:	mov	r9, r0
   2c3a8:	bne	2c488 <flatcc_json_parser_union_type@@Base+0x1d0>
   2c3ac:	add	r0, r6, #13
   2c3b0:	mov	r1, r9
   2c3b4:	ldr	r3, [sp, #80]	; 0x50
   2c3b8:	mov	r2, r7
   2c3bc:	str	r0, [sp]
   2c3c0:	mov	r0, r5
   2c3c4:	bl	26c50 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2c3c8:	mov	r9, r0
   2c3cc:	ldr	r1, [fp, r4]
   2c3d0:	ldr	r3, [r8, #4]
   2c3d4:	cmp	r1, #0
   2c3d8:	beq	2c4d8 <flatcc_json_parser_union_type@@Base+0x220>
   2c3dc:	cmp	r3, #0
   2c3e0:	beq	2c518 <flatcc_json_parser_union_type@@Base+0x260>
   2c3e4:	ldr	lr, [r6, #4]
   2c3e8:	sub	r3, r3, #1
   2c3ec:	add	ip, sp, #28
   2c3f0:	mov	r2, r7
   2c3f4:	mov	r0, r5
   2c3f8:	ldr	sl, [r6, #8]
   2c3fc:	add	r4, sp, #24
   2c400:	str	r3, [r8, #4]
   2c404:	ldr	r8, [r5, #16]
   2c408:	str	sl, [r5, #16]
   2c40c:	ldr	sl, [r5, #4]
   2c410:	str	lr, [r5, #4]
   2c414:	ldrb	r3, [r6, #13]
   2c418:	str	ip, [sp]
   2c41c:	ldr	ip, [sp, #84]	; 0x54
   2c420:	strb	r3, [sp, #24]
   2c424:	blx	ip
   2c428:	cmp	r7, r0
   2c42c:	beq	2c318 <flatcc_json_parser_union_type@@Base+0x60>
   2c430:	ldm	r4, {r2, r3}
   2c434:	ldr	r0, [r5]
   2c438:	ldr	r1, [sp, #12]
   2c43c:	bl	25f4c <flatcc_builder_table_add_union@@Base>
   2c440:	cmp	r0, #0
   2c444:	streq	sl, [r5, #4]
   2c448:	streq	r8, [r5, #16]
   2c44c:	beq	2c31c <flatcc_json_parser_union_type@@Base+0x64>
   2c450:	ldr	r3, [r5, #24]
   2c454:	cmp	r3, #0
   2c458:	bne	2c318 <flatcc_json_parser_union_type@@Base+0x60>
   2c45c:	ldr	r3, [r5, #4]
   2c460:	mov	r2, #28
   2c464:	str	r2, [r5, #24]
   2c468:	str	r9, [r5, #36]	; 0x24
   2c46c:	sub	r3, r9, r3
   2c470:	mov	r9, r7
   2c474:	add	r3, r3, #1
   2c478:	str	r3, [r5, #20]
   2c47c:	b	2c31c <flatcc_json_parser_union_type@@Base+0x64>
   2c480:	mov	r9, r7
   2c484:	b	2c3ac <flatcc_json_parser_union_type@@Base+0xf4>
   2c488:	ldr	r3, [sp, #20]
   2c48c:	cmp	r3, #0
   2c490:	bne	2c4ec <flatcc_json_parser_union_type@@Base+0x234>
   2c494:	ldrd	r2, [sp, #24]
   2c498:	cmp	r3, #0
   2c49c:	cmpeq	r2, #255	; 0xff
   2c4a0:	strbls	r2, [r6, #13]
   2c4a4:	bls	2c3cc <flatcc_json_parser_union_type@@Base+0x114>
   2c4a8:	ldr	r3, [r5, #24]
   2c4ac:	cmp	r3, #0
   2c4b0:	bne	2c4d0 <flatcc_json_parser_union_type@@Base+0x218>
   2c4b4:	ldr	r3, [r5, #4]
   2c4b8:	mov	r2, #7
   2c4bc:	str	r2, [r5, #24]
   2c4c0:	str	r0, [r5, #36]	; 0x24
   2c4c4:	sub	r3, r0, r3
   2c4c8:	add	r3, r3, #1
   2c4cc:	str	r3, [r5, #20]
   2c4d0:	mov	r9, r7
   2c4d4:	b	2c3cc <flatcc_json_parser_union_type@@Base+0x114>
   2c4d8:	ldrb	r2, [r6, #13]
   2c4dc:	cmp	r2, #0
   2c4e0:	addne	r3, r3, #1
   2c4e4:	str	r3, [r8, #4]
   2c4e8:	b	2c31c <flatcc_json_parser_union_type@@Base+0x64>
   2c4ec:	ldr	r3, [r5, #24]
   2c4f0:	cmp	r3, #0
   2c4f4:	bne	2c4d0 <flatcc_json_parser_union_type@@Base+0x218>
   2c4f8:	ldr	r3, [r5, #4]
   2c4fc:	mov	r2, #8
   2c500:	str	r2, [r5, #24]
   2c504:	str	r0, [r5, #36]	; 0x24
   2c508:	sub	r9, r0, r3
   2c50c:	add	r9, r9, #1
   2c510:	str	r9, [r5, #20]
   2c514:	b	2c4d0 <flatcc_json_parser_union_type@@Base+0x218>
   2c518:	movw	r1, #62184	; 0xf2e8
   2c51c:	movt	r1, #2
   2c520:	ldr	r3, [pc, #12]	; 2c534 <flatcc_json_parser_union_type@@Base+0x27c>
   2c524:	movw	r0, #62260	; 0xf334
   2c528:	movt	r0, #2
   2c52c:	movw	r2, #965	; 0x3c5
   2c530:	bl	12684 <__assert_fail@plt>
   2c534:	andeq	pc, r2, r8, asr #2

0002c538 <flatcc_json_parser_union_vector@@Base>:
   2c538:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2c53c:	mov	r4, r3
   2c540:	mov	r5, r0
   2c544:	ldr	r0, [r0]
   2c548:	strd	r6, [sp, #8]
   2c54c:	mov	r6, r1
   2c550:	ldr	r1, [sp, #36]	; 0x24
   2c554:	strd	r8, [sp, #16]
   2c558:	mov	r9, r2
   2c55c:	ldrh	r8, [sp, #32]
   2c560:	str	sl, [sp, #24]
   2c564:	str	lr, [sp, #28]
   2c568:	ldr	r7, [sp, #40]	; 0x28
   2c56c:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c570:	add	r3, r4, r4, lsl #1
   2c574:	add	ip, r0, #8
   2c578:	lsl	r3, r3, #3
   2c57c:	ldr	r2, [ip, r3]
   2c580:	add	r4, ip, r3
   2c584:	cmp	r2, #0
   2c588:	beq	2c5d0 <flatcc_json_parser_union_vector@@Base+0x98>
   2c58c:	ldr	r3, [r5, #24]
   2c590:	cmp	r3, #0
   2c594:	bne	2c5b4 <flatcc_json_parser_union_vector@@Base+0x7c>
   2c598:	ldr	r3, [r5, #4]
   2c59c:	mov	r2, #28
   2c5a0:	str	r6, [r5, #36]	; 0x24
   2c5a4:	str	r2, [r5, #24]
   2c5a8:	sub	r6, r6, r3
   2c5ac:	add	r6, r6, #1
   2c5b0:	str	r6, [r5, #20]
   2c5b4:	mov	r0, r9
   2c5b8:	ldrd	r4, [sp]
   2c5bc:	ldrd	r6, [sp, #8]
   2c5c0:	ldrd	r8, [sp, #16]
   2c5c4:	ldr	sl, [sp, #24]
   2c5c8:	add	sp, sp, #28
   2c5cc:	pop	{pc}		; (ldr pc, [sp], #4)
   2c5d0:	ldrb	r1, [r4, #12]
   2c5d4:	mov	lr, r0
   2c5d8:	ldr	r2, [r0, #4]
   2c5dc:	cmp	r1, #0
   2c5e0:	bne	2c628 <flatcc_json_parser_union_vector@@Base+0xf0>
   2c5e4:	ldr	r8, [r5, #4]
   2c5e8:	add	r1, r2, #1
   2c5ec:	mov	r0, r5
   2c5f0:	mov	r2, r9
   2c5f4:	ldr	r7, [r5, #16]
   2c5f8:	ldr	sl, [sp, #24]
   2c5fc:	str	r1, [lr, #4]
   2c600:	mov	r1, r6
   2c604:	str	r8, [r4, #4]
   2c608:	str	r7, [r4, #8]
   2c60c:	str	r6, [ip, r3]
   2c610:	ldrd	r4, [sp]
   2c614:	ldrd	r6, [sp, #8]
   2c618:	ldrd	r8, [sp, #16]
   2c61c:	ldr	lr, [sp, #28]
   2c620:	add	sp, sp, #32
   2c624:	b	29980 <flatcc_json_parser_generic_json@@Base>
   2c628:	sub	ip, r2, #1
   2c62c:	ldr	r3, [r4, #20]
   2c630:	mov	r2, r9
   2c634:	mov	r1, r6
   2c638:	mov	r0, r5
   2c63c:	ldr	sl, [sp, #24]
   2c640:	str	ip, [lr, #4]
   2c644:	str	r8, [sp, #36]	; 0x24
   2c648:	str	r7, [sp, #40]	; 0x28
   2c64c:	ldr	ip, [r4, #16]
   2c650:	ldrd	r4, [sp]
   2c654:	ldrd	r6, [sp, #8]
   2c658:	str	ip, [sp, #32]
   2c65c:	ldrd	r8, [sp, #16]
   2c660:	ldr	lr, [sp, #28]
   2c664:	add	sp, sp, #32
   2c668:	b	281c0 <flatcc_json_parser_space_ext@@Base+0x154>

0002c66c <flatcc_json_parser_union_type_vector@@Base>:
   2c66c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c670:	mov	r5, r2
   2c674:	strd	r6, [sp, #8]
   2c678:	mov	r6, r0
   2c67c:	mov	r7, r1
   2c680:	strd	r8, [sp, #16]
   2c684:	mov	r8, r3
   2c688:	strd	sl, [sp, #24]
   2c68c:	add	r8, r8, r8, lsl #1
   2c690:	str	lr, [sp, #32]
   2c694:	sub	sp, sp, #44	; 0x2c
   2c698:	ldrh	r3, [sp, #80]	; 0x50
   2c69c:	lsl	r8, r8, #3
   2c6a0:	ldr	r0, [r0]
   2c6a4:	ldr	r1, [sp, #84]	; 0x54
   2c6a8:	str	r3, [sp, #20]
   2c6ac:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c6b0:	add	r0, r0, #8
   2c6b4:	add	fp, r0, r8
   2c6b8:	ldrb	r3, [fp, #12]
   2c6bc:	cmp	r3, #0
   2c6c0:	beq	2c718 <flatcc_json_parser_union_type_vector@@Base+0xac>
   2c6c4:	ldr	r3, [r6, #24]
   2c6c8:	cmp	r3, #0
   2c6cc:	bne	2c6f4 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2c6d0:	ldr	r3, [r6, #4]
   2c6d4:	mov	r2, #28
   2c6d8:	mov	r4, r5
   2c6dc:	str	r2, [r6, #24]
   2c6e0:	str	r7, [r6, #36]	; 0x24
   2c6e4:	sub	r7, r7, r3
   2c6e8:	add	r7, r7, #1
   2c6ec:	str	r7, [r6, #20]
   2c6f0:	b	2c6f8 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   2c6f4:	mov	r4, r5
   2c6f8:	mov	r0, r4
   2c6fc:	add	sp, sp, #44	; 0x2c
   2c700:	ldrd	r4, [sp]
   2c704:	ldrd	r6, [sp, #8]
   2c708:	ldrd	r8, [sp, #16]
   2c70c:	ldrd	sl, [sp, #24]
   2c710:	add	sp, sp, #32
   2c714:	pop	{pc}		; (ldr pc, [sp], #4)
   2c718:	mov	r0, #1
   2c71c:	mvn	r3, #0
   2c720:	mov	r2, r0
   2c724:	mov	r1, r0
   2c728:	strb	r0, [fp, #12]
   2c72c:	ldr	r0, [r6]
   2c730:	bl	22ed0 <flatcc_builder_start_vector@@Base>
   2c734:	cmp	r0, #0
   2c738:	bne	2c7d8 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   2c73c:	cmp	r7, r5
   2c740:	beq	2c750 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2c744:	ldrb	r3, [r7]
   2c748:	cmp	r3, #91	; 0x5b
   2c74c:	beq	2c820 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   2c750:	ldr	r3, [r6, #24]
   2c754:	cmp	r3, #0
   2c758:	bne	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2c75c:	ldr	r3, [r6, #4]
   2c760:	mov	r2, #22
   2c764:	mov	r4, r5
   2c768:	str	r7, [r6, #36]	; 0x24
   2c76c:	str	r2, [r6, #24]
   2c770:	sub	r7, r7, r3
   2c774:	add	r7, r7, #1
   2c778:	str	r7, [r6, #20]
   2c77c:	ldr	r0, [r6]
   2c780:	bl	24514 <flatcc_builder_vector_count@@Base>
   2c784:	mov	r7, r0
   2c788:	mov	r1, r0
   2c78c:	ldr	r0, [r6]
   2c790:	str	r7, [fp, #16]
   2c794:	bl	213e0 <flatcc_builder_enter_user_frame@@Base>
   2c798:	mov	r1, r0
   2c79c:	mov	r9, r0
   2c7a0:	ldr	r0, [r6]
   2c7a4:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2c7a8:	mov	sl, r0
   2c7ac:	ldr	r0, [r6]
   2c7b0:	bl	24520 <flatcc_builder_vector_edit@@Base>
   2c7b4:	mov	r1, r0
   2c7b8:	mov	r2, r7
   2c7bc:	mov	r0, sl
   2c7c0:	bl	12588 <memcpy@plt>
   2c7c4:	ldr	r0, [r6]
   2c7c8:	bl	24304 <flatcc_builder_end_vector@@Base>
   2c7cc:	subs	sl, r0, #0
   2c7d0:	bne	2cb44 <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   2c7d4:	mov	r7, r4
   2c7d8:	ldr	r3, [r6, #24]
   2c7dc:	cmp	r3, #0
   2c7e0:	bne	2c6f4 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2c7e4:	mov	r2, #33	; 0x21
   2c7e8:	ldr	r3, [r6, #4]
   2c7ec:	b	2c6d8 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   2c7f0:	ldr	r3, [r6, #24]
   2c7f4:	cmp	r3, #0
   2c7f8:	bne	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2c7fc:	ldr	r3, [r6, #4]
   2c800:	mov	r2, #5
   2c804:	str	r7, [r6, #36]	; 0x24
   2c808:	str	r2, [r6, #24]
   2c80c:	sub	r7, r7, r3
   2c810:	add	r7, r7, #1
   2c814:	str	r7, [r6, #20]
   2c818:	mov	r4, r5
   2c81c:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2c820:	add	r1, r7, #1
   2c824:	sub	r3, r5, r1
   2c828:	cmp	r3, #1
   2c82c:	ble	2c9d8 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   2c830:	ldrb	r2, [r7, #1]
   2c834:	cmp	r2, #32
   2c838:	bhi	2d154 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   2c83c:	bne	2c9d8 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   2c840:	ldrb	r2, [r7, #2]
   2c844:	cmp	r2, #32
   2c848:	addhi	r7, r7, #2
   2c84c:	bls	2c9d8 <flatcc_json_parser_union_type_vector@@Base+0x36c>
   2c850:	cmp	r5, r7
   2c854:	beq	2c860 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   2c858:	cmp	r2, #93	; 0x5d
   2c85c:	beq	2d170 <flatcc_json_parser_union_type_vector@@Base+0xb04>
   2c860:	mov	r9, #0
   2c864:	mov	r1, #1
   2c868:	ldr	r0, [r6]
   2c86c:	bl	2222c <flatcc_builder_extend_vector@@Base>
   2c870:	subs	sl, r0, #0
   2c874:	beq	2c7d8 <flatcc_json_parser_union_type_vector@@Base+0x16c>
   2c878:	mov	r2, #0
   2c87c:	mov	r3, #0
   2c880:	strb	r9, [sp, #27]
   2c884:	cmp	r5, r7
   2c888:	str	r9, [sp, #28]
   2c88c:	strd	r2, [sp, #32]
   2c890:	beq	2c8bc <flatcc_json_parser_union_type_vector@@Base+0x250>
   2c894:	add	r0, sp, #32
   2c898:	add	r3, sp, #28
   2c89c:	mov	r2, r5
   2c8a0:	mov	r1, r7
   2c8a4:	str	r0, [sp]
   2c8a8:	mov	r0, r6
   2c8ac:	bl	2b638 <flatcc_json_parser_integer@@Base>
   2c8b0:	cmp	r0, r7
   2c8b4:	mov	r4, r0
   2c8b8:	bne	2cd28 <flatcc_json_parser_union_type_vector@@Base+0x6bc>
   2c8bc:	add	r0, sp, #27
   2c8c0:	mov	r2, r5
   2c8c4:	ldr	r3, [sp, #88]	; 0x58
   2c8c8:	mov	r1, r7
   2c8cc:	str	r0, [sp]
   2c8d0:	mov	r0, r6
   2c8d4:	bl	26c50 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2c8d8:	cmp	r5, r0
   2c8dc:	cmpne	r0, r7
   2c8e0:	mov	r4, r0
   2c8e4:	beq	2c7d4 <flatcc_json_parser_union_type_vector@@Base+0x168>
   2c8e8:	ldrb	r0, [sp, #27]
   2c8ec:	ldr	r3, [sp, #96]	; 0x60
   2c8f0:	blx	r3
   2c8f4:	cmp	r0, #0
   2c8f8:	bne	2cd20 <flatcc_json_parser_union_type_vector@@Base+0x6b4>
   2c8fc:	ldr	r3, [r6, #8]
   2c900:	tst	r3, #1
   2c904:	beq	2d124 <flatcc_json_parser_union_type_vector@@Base+0xab8>
   2c908:	mov	r1, r0
   2c90c:	strb	r0, [sp, #27]
   2c910:	sub	r3, r5, r4
   2c914:	strb	r1, [sl]
   2c918:	cmp	r3, #1
   2c91c:	ble	2c930 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   2c920:	ldrb	r3, [r4]
   2c924:	cmp	r3, #32
   2c928:	bhi	2cc8c <flatcc_json_parser_union_type_vector@@Base+0x620>
   2c92c:	beq	2cc7c <flatcc_json_parser_union_type_vector@@Base+0x610>
   2c930:	cmp	r4, r5
   2c934:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2c938:	ldrb	r3, [r4]
   2c93c:	cmp	r3, #32
   2c940:	bne	2c960 <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   2c944:	add	r2, r4, #1
   2c948:	cmp	r5, r2
   2c94c:	mov	r4, r2
   2c950:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2c954:	ldrb	r3, [r2], #1
   2c958:	cmp	r3, #32
   2c95c:	beq	2c948 <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   2c960:	cmp	r3, #32
   2c964:	bhi	2cadc <flatcc_json_parser_union_type_vector@@Base+0x470>
   2c968:	sub	r3, r3, #9
   2c96c:	cmp	r3, #23
   2c970:	ldrls	pc, [pc, r3, lsl #2]
   2c974:	b	2cb2c <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   2c978:	andeq	ip, r2, r4, lsr #22
   2c97c:	andeq	ip, r2, ip, lsl fp
   2c980:	andeq	ip, r2, ip, lsr #22
   2c984:	andeq	ip, r2, ip, lsr #22
   2c988:	muleq	r2, r8, sl
   2c98c:	andeq	ip, r2, ip, lsr #22
   2c990:	andeq	ip, r2, ip, lsr #22
   2c994:	andeq	ip, r2, ip, lsr #22
   2c998:	andeq	ip, r2, ip, lsr #22
   2c99c:	andeq	ip, r2, ip, lsr #22
   2c9a0:	andeq	ip, r2, ip, lsr #22
   2c9a4:	andeq	ip, r2, ip, lsr #22
   2c9a8:	andeq	ip, r2, ip, lsr #22
   2c9ac:	andeq	ip, r2, ip, lsr #22
   2c9b0:	andeq	ip, r2, ip, lsr #22
   2c9b4:	andeq	ip, r2, ip, lsr #22
   2c9b8:	andeq	ip, r2, ip, lsr #22
   2c9bc:	andeq	ip, r2, ip, lsr #22
   2c9c0:	andeq	ip, r2, ip, lsr #22
   2c9c4:	andeq	ip, r2, ip, lsr #22
   2c9c8:	andeq	ip, r2, ip, lsr #22
   2c9cc:	andeq	ip, r2, ip, lsr #22
   2c9d0:	andeq	ip, r2, ip, lsr #22
   2c9d4:	andeq	ip, r2, ip, lsl #21
   2c9d8:	cmp	r5, r1
   2c9dc:	beq	2ca0c <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2c9e0:	ldrb	r2, [r1]
   2c9e4:	cmp	r2, #32
   2c9e8:	bne	2ca14 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2c9ec:	add	r3, r1, #1
   2c9f0:	b	2ca00 <flatcc_json_parser_union_type_vector@@Base+0x394>
   2c9f4:	ldrb	r2, [r3], #1
   2c9f8:	cmp	r2, #32
   2c9fc:	bne	2ca14 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2ca00:	cmp	r5, r3
   2ca04:	mov	r1, r3
   2ca08:	bne	2c9f4 <flatcc_json_parser_union_type_vector@@Base+0x388>
   2ca0c:	mov	r7, r1
   2ca10:	b	2c860 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   2ca14:	cmp	r2, #32
   2ca18:	bhi	2cc30 <flatcc_json_parser_union_type_vector@@Base+0x5c4>
   2ca1c:	sub	r2, r2, #9
   2ca20:	cmp	r2, #23
   2ca24:	ldrls	pc, [pc, r2, lsl #2]
   2ca28:	b	2cc48 <flatcc_json_parser_union_type_vector@@Base+0x5dc>
   2ca2c:	andeq	ip, r2, r0, asr #24
   2ca30:	andeq	ip, r2, r8, lsr ip
   2ca34:	andeq	ip, r2, r8, asr #24
   2ca38:	andeq	ip, r2, r8, asr #24
   2ca3c:	andeq	ip, r2, ip, ror #23
   2ca40:	andeq	ip, r2, r8, asr #24
   2ca44:	andeq	ip, r2, r8, asr #24
   2ca48:	andeq	ip, r2, r8, asr #24
   2ca4c:	andeq	ip, r2, r8, asr #24
   2ca50:	andeq	ip, r2, r8, asr #24
   2ca54:	andeq	ip, r2, r8, asr #24
   2ca58:	andeq	ip, r2, r8, asr #24
   2ca5c:	andeq	ip, r2, r8, asr #24
   2ca60:	andeq	ip, r2, r8, asr #24
   2ca64:	andeq	ip, r2, r8, asr #24
   2ca68:	andeq	ip, r2, r8, asr #24
   2ca6c:	andeq	ip, r2, r8, asr #24
   2ca70:	andeq	ip, r2, r8, asr #24
   2ca74:	andeq	ip, r2, r8, asr #24
   2ca78:	andeq	ip, r2, r8, asr #24
   2ca7c:	andeq	ip, r2, r8, asr #24
   2ca80:	andeq	ip, r2, r8, asr #24
   2ca84:	andeq	ip, r2, r8, asr #24
   2ca88:	ldrdeq	ip, [r2], -r8
   2ca8c:	cmp	r5, r4
   2ca90:	bne	2c938 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   2ca94:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2ca98:	sub	r3, r5, r4
   2ca9c:	add	r2, r4, #1
   2caa0:	cmp	r3, #1
   2caa4:	ble	2cab4 <flatcc_json_parser_union_type_vector@@Base+0x448>
   2caa8:	ldrb	r3, [r4, #1]
   2caac:	cmp	r3, #10
   2cab0:	addeq	r2, r4, #2
   2cab4:	mov	r4, r2
   2cab8:	ldr	r3, [r6, #16]
   2cabc:	str	r4, [r6, #4]
   2cac0:	add	r3, r3, #1
   2cac4:	str	r3, [r6, #16]
   2cac8:	cmp	r5, r4
   2cacc:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cad0:	ldrb	r3, [r4]
   2cad4:	cmp	r3, #32
   2cad8:	bls	2c968 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   2cadc:	cmp	r3, #44	; 0x2c
   2cae0:	beq	2cc9c <flatcc_json_parser_union_type_vector@@Base+0x630>
   2cae4:	cmp	r3, #93	; 0x5d
   2cae8:	beq	2cf74 <flatcc_json_parser_union_type_vector@@Base+0x908>
   2caec:	ldr	r3, [r6, #24]
   2caf0:	cmp	r3, #0
   2caf4:	bne	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2caf8:	ldr	r3, [r6, #4]
   2cafc:	mov	r2, #9
   2cb00:	sub	r3, r4, r3
   2cb04:	str	r2, [r6, #24]
   2cb08:	add	r3, r3, #1
   2cb0c:	str	r3, [r6, #20]
   2cb10:	str	r4, [r6, #36]	; 0x24
   2cb14:	mov	r4, r5
   2cb18:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cb1c:	add	r4, r4, #1
   2cb20:	b	2cab8 <flatcc_json_parser_union_type_vector@@Base+0x44c>
   2cb24:	add	r4, r4, #1
   2cb28:	b	2cac8 <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2cb2c:	ldr	r3, [r6, #24]
   2cb30:	cmp	r3, #0
   2cb34:	bne	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2cb38:	mov	r2, #5
   2cb3c:	ldr	r3, [r6, #4]
   2cb40:	b	2cb00 <flatcc_json_parser_union_type_vector@@Base+0x494>
   2cb44:	ldr	r3, [sp, #20]
   2cb48:	ldr	r0, [r6]
   2cb4c:	sub	r1, r3, #1
   2cb50:	bl	25dac <flatcc_builder_table_add_offset@@Base>
   2cb54:	cmp	r0, #0
   2cb58:	beq	2c7d4 <flatcc_json_parser_union_type_vector@@Base+0x168>
   2cb5c:	str	sl, [r0]
   2cb60:	ldr	r0, [r6]
   2cb64:	ldr	r1, [sp, #84]	; 0x54
   2cb68:	bl	21538 <flatcc_builder_get_user_frame_ptr@@Base>
   2cb6c:	add	r3, r0, #8
   2cb70:	ldr	r1, [r3, r8]
   2cb74:	add	r8, r3, r8
   2cb78:	ldr	r3, [r0, #4]
   2cb7c:	str	r9, [r8, #20]
   2cb80:	cmp	r1, #0
   2cb84:	addeq	r3, r3, #1
   2cb88:	streq	r3, [r0, #4]
   2cb8c:	beq	2c6f8 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   2cb90:	cmp	r3, #0
   2cb94:	beq	2d2a0 <flatcc_json_parser_union_type_vector@@Base+0xc34>
   2cb98:	sub	r2, r3, #1
   2cb9c:	ldmib	r8, {ip, lr}
   2cba0:	mov	r3, r9
   2cba4:	str	r2, [r0, #4]
   2cba8:	mov	r2, r5
   2cbac:	mov	r0, r6
   2cbb0:	str	r7, [sp]
   2cbb4:	ldr	r7, [sp, #20]
   2cbb8:	str	r7, [sp, #4]
   2cbbc:	ldr	r7, [sp, #92]	; 0x5c
   2cbc0:	str	r7, [sp, #8]
   2cbc4:	ldr	r8, [r6, #4]
   2cbc8:	str	ip, [r6, #4]
   2cbcc:	ldr	r7, [r6, #16]
   2cbd0:	str	lr, [r6, #16]
   2cbd4:	bl	281c0 <flatcc_json_parser_space_ext@@Base+0x154>
   2cbd8:	cmp	r5, r0
   2cbdc:	beq	2c6f4 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2cbe0:	str	r8, [r6, #4]
   2cbe4:	str	r7, [r6, #16]
   2cbe8:	b	2c6f8 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   2cbec:	sub	r3, r5, r1
   2cbf0:	add	r2, r1, #1
   2cbf4:	cmp	r3, #1
   2cbf8:	ble	2cc08 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   2cbfc:	ldrb	r3, [r1, #1]
   2cc00:	cmp	r3, #10
   2cc04:	addeq	r2, r1, #2
   2cc08:	mov	r1, r2
   2cc0c:	ldr	r3, [r6, #16]
   2cc10:	str	r1, [r6, #4]
   2cc14:	add	r3, r3, #1
   2cc18:	str	r3, [r6, #16]
   2cc1c:	cmp	r5, r1
   2cc20:	beq	2ca0c <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   2cc24:	ldrb	r2, [r1]
   2cc28:	cmp	r2, #32
   2cc2c:	bls	2ca1c <flatcc_json_parser_union_type_vector@@Base+0x3b0>
   2cc30:	mov	r7, r1
   2cc34:	b	2c858 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   2cc38:	add	r1, r1, #1
   2cc3c:	b	2cc0c <flatcc_json_parser_union_type_vector@@Base+0x5a0>
   2cc40:	add	r1, r1, #1
   2cc44:	b	2cc1c <flatcc_json_parser_union_type_vector@@Base+0x5b0>
   2cc48:	ldr	r3, [r6, #24]
   2cc4c:	cmp	r3, #0
   2cc50:	movne	r7, r5
   2cc54:	bne	2c860 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   2cc58:	ldr	r3, [r6, #4]
   2cc5c:	mov	r2, #5
   2cc60:	mov	r7, r5
   2cc64:	str	r2, [r6, #24]
   2cc68:	str	r1, [r6, #36]	; 0x24
   2cc6c:	sub	r3, r1, r3
   2cc70:	add	r3, r3, #1
   2cc74:	str	r3, [r6, #20]
   2cc78:	b	2c860 <flatcc_json_parser_union_type_vector@@Base+0x1f4>
   2cc7c:	ldrb	r3, [r4, #1]
   2cc80:	cmp	r3, #32
   2cc84:	addhi	r4, r4, #1
   2cc88:	bls	2c930 <flatcc_json_parser_union_type_vector@@Base+0x2c4>
   2cc8c:	cmp	r5, r4
   2cc90:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cc94:	cmp	r3, #44	; 0x2c
   2cc98:	bne	2cae4 <flatcc_json_parser_union_type_vector@@Base+0x478>
   2cc9c:	add	r7, r4, #1
   2cca0:	sub	r3, r5, r7
   2cca4:	cmp	r3, #1
   2cca8:	ble	2ccbc <flatcc_json_parser_union_type_vector@@Base+0x650>
   2ccac:	ldrb	r3, [r4, #1]
   2ccb0:	cmp	r3, #32
   2ccb4:	bhi	2d0e0 <flatcc_json_parser_union_type_vector@@Base+0xa74>
   2ccb8:	beq	2d0d0 <flatcc_json_parser_union_type_vector@@Base+0xa64>
   2ccbc:	cmp	r5, r7
   2ccc0:	beq	2ccf0 <flatcc_json_parser_union_type_vector@@Base+0x684>
   2ccc4:	ldrb	r3, [r7]
   2ccc8:	cmp	r3, #32
   2cccc:	bne	2cd80 <flatcc_json_parser_union_type_vector@@Base+0x714>
   2ccd0:	add	r2, r7, #1
   2ccd4:	b	2cce4 <flatcc_json_parser_union_type_vector@@Base+0x678>
   2ccd8:	ldrb	r3, [r2], #1
   2ccdc:	cmp	r3, #32
   2cce0:	bne	2cd80 <flatcc_json_parser_union_type_vector@@Base+0x714>
   2cce4:	cmp	r5, r2
   2cce8:	mov	r7, r2
   2ccec:	bne	2ccd8 <flatcc_json_parser_union_type_vector@@Base+0x66c>
   2ccf0:	ldr	r3, [r6, #24]
   2ccf4:	cmp	r3, #0
   2ccf8:	bne	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2ccfc:	ldr	r3, [r6, #4]
   2cd00:	mov	r2, #9
   2cd04:	mov	r4, r5
   2cd08:	str	r2, [r6, #24]
   2cd0c:	str	r7, [r6, #36]	; 0x24
   2cd10:	sub	r3, r7, r3
   2cd14:	add	r3, r3, #1
   2cd18:	str	r3, [r6, #20]
   2cd1c:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cd20:	ldrb	r1, [sp, #27]
   2cd24:	b	2c910 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2cd28:	ldr	r3, [sp, #28]
   2cd2c:	cmp	r3, #0
   2cd30:	bne	2d0ec <flatcc_json_parser_union_type_vector@@Base+0xa80>
   2cd34:	ldrd	r0, [sp, #32]
   2cd38:	cmp	r1, #0
   2cd3c:	cmpeq	r0, #255	; 0xff
   2cd40:	uxtbls	r0, r0
   2cd44:	strbls	r0, [sp, #27]
   2cd48:	bls	2c8ec <flatcc_json_parser_union_type_vector@@Base+0x280>
   2cd4c:	ldr	r3, [r6, #24]
   2cd50:	ldrb	r0, [sp, #27]
   2cd54:	cmp	r3, #0
   2cd58:	bne	2d108 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   2cd5c:	ldr	r3, [r6, #4]
   2cd60:	mov	r1, #7
   2cd64:	sub	r3, r4, r3
   2cd68:	str	r1, [r6, #24]
   2cd6c:	add	r3, r3, #1
   2cd70:	str	r3, [r6, #20]
   2cd74:	str	r4, [r6, #36]	; 0x24
   2cd78:	mov	r4, r5
   2cd7c:	b	2c8ec <flatcc_json_parser_union_type_vector@@Base+0x280>
   2cd80:	cmp	r3, #32
   2cd84:	bhi	2ce3c <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   2cd88:	sub	r3, r3, #9
   2cd8c:	cmp	r3, #23
   2cd90:	ldrls	pc, [pc, r3, lsl #2]
   2cd94:	b	2c7f0 <flatcc_json_parser_union_type_vector@@Base+0x184>
   2cd98:	andeq	ip, r2, ip, lsl #30
   2cd9c:	andeq	ip, r2, r4, lsl pc
   2cda0:	strdeq	ip, [r2], -r0
   2cda4:	strdeq	ip, [r2], -r0
   2cda8:	strdeq	ip, [r2], -r8
   2cdac:	strdeq	ip, [r2], -r0
   2cdb0:	strdeq	ip, [r2], -r0
   2cdb4:	strdeq	ip, [r2], -r0
   2cdb8:	strdeq	ip, [r2], -r0
   2cdbc:	strdeq	ip, [r2], -r0
   2cdc0:	strdeq	ip, [r2], -r0
   2cdc4:	strdeq	ip, [r2], -r0
   2cdc8:	strdeq	ip, [r2], -r0
   2cdcc:	strdeq	ip, [r2], -r0
   2cdd0:	strdeq	ip, [r2], -r0
   2cdd4:	strdeq	ip, [r2], -r0
   2cdd8:	strdeq	ip, [r2], -r0
   2cddc:	strdeq	ip, [r2], -r0
   2cde0:	strdeq	ip, [r2], -r0
   2cde4:	strdeq	ip, [r2], -r0
   2cde8:	strdeq	ip, [r2], -r0
   2cdec:	strdeq	ip, [r2], -r0
   2cdf0:	strdeq	ip, [r2], -r0
   2cdf4:			; <UNDEFINED> instruction: 0x0002ccbc
   2cdf8:	sub	r3, r5, r7
   2cdfc:	add	r2, r7, #1
   2ce00:	cmp	r3, #1
   2ce04:	ble	2ce14 <flatcc_json_parser_union_type_vector@@Base+0x7a8>
   2ce08:	ldrb	r3, [r7, #1]
   2ce0c:	cmp	r3, #10
   2ce10:	addeq	r2, r7, #2
   2ce14:	mov	r7, r2
   2ce18:	ldr	r3, [r6, #16]
   2ce1c:	str	r7, [r6, #4]
   2ce20:	add	r3, r3, #1
   2ce24:	str	r3, [r6, #16]
   2ce28:	cmp	r5, r7
   2ce2c:	beq	2ccf0 <flatcc_json_parser_union_type_vector@@Base+0x684>
   2ce30:	ldrb	r3, [r7]
   2ce34:	cmp	r3, #32
   2ce38:	bls	2cd88 <flatcc_json_parser_union_type_vector@@Base+0x71c>
   2ce3c:	cmp	r3, #93	; 0x5d
   2ce40:	bne	2c864 <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   2ce44:	add	r4, r7, #1
   2ce48:	sub	r3, r5, r4
   2ce4c:	cmp	r3, #1
   2ce50:	ble	2ce64 <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   2ce54:	ldrb	r3, [r7, #1]
   2ce58:	cmp	r3, #32
   2ce5c:	bhi	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2ce60:	beq	2d15c <flatcc_json_parser_union_type_vector@@Base+0xaf0>
   2ce64:	cmp	r5, r4
   2ce68:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2ce6c:	ldrb	r2, [r4]
   2ce70:	cmp	r2, #32
   2ce74:	bne	2ce94 <flatcc_json_parser_union_type_vector@@Base+0x828>
   2ce78:	add	r3, r4, #1
   2ce7c:	cmp	r5, r3
   2ce80:	mov	r4, r3
   2ce84:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2ce88:	ldrb	r2, [r3], #1
   2ce8c:	cmp	r2, #32
   2ce90:	beq	2ce7c <flatcc_json_parser_union_type_vector@@Base+0x810>
   2ce94:	cmp	r2, #32
   2ce98:	bhi	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2ce9c:	sub	r2, r2, #9
   2cea0:	cmp	r2, #23
   2cea4:	ldrls	pc, [pc, r2, lsl #2]
   2cea8:	b	2cb2c <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   2ceac:	andeq	ip, r2, ip, ror #30
   2ceb0:	andeq	ip, r2, r4, ror #30
   2ceb4:	andeq	ip, r2, ip, lsr #22
   2ceb8:	andeq	ip, r2, ip, lsr #22
   2cebc:	andeq	ip, r2, ip, lsl pc
   2cec0:	andeq	ip, r2, ip, lsr #22
   2cec4:	andeq	ip, r2, ip, lsr #22
   2cec8:	andeq	ip, r2, ip, lsr #22
   2cecc:	andeq	ip, r2, ip, lsr #22
   2ced0:	andeq	ip, r2, ip, lsr #22
   2ced4:	andeq	ip, r2, ip, lsr #22
   2ced8:	andeq	ip, r2, ip, lsr #22
   2cedc:	andeq	ip, r2, ip, lsr #22
   2cee0:	andeq	ip, r2, ip, lsr #22
   2cee4:	andeq	ip, r2, ip, lsr #22
   2cee8:	andeq	ip, r2, ip, lsr #22
   2ceec:	andeq	ip, r2, ip, lsr #22
   2cef0:	andeq	ip, r2, ip, lsr #22
   2cef4:	andeq	ip, r2, ip, lsr #22
   2cef8:	andeq	ip, r2, ip, lsr #22
   2cefc:	andeq	ip, r2, ip, lsr #22
   2cf00:	andeq	ip, r2, ip, lsr #22
   2cf04:	andeq	ip, r2, ip, lsr #22
   2cf08:	andeq	ip, r2, r4, ror #28
   2cf0c:	add	r7, r7, #1
   2cf10:	b	2ce28 <flatcc_json_parser_union_type_vector@@Base+0x7bc>
   2cf14:	add	r7, r7, #1
   2cf18:	b	2ce18 <flatcc_json_parser_union_type_vector@@Base+0x7ac>
   2cf1c:	sub	r3, r5, r4
   2cf20:	add	r2, r4, #1
   2cf24:	cmp	r3, #1
   2cf28:	ble	2cf38 <flatcc_json_parser_union_type_vector@@Base+0x8cc>
   2cf2c:	ldrb	r3, [r4, #1]
   2cf30:	cmp	r3, #10
   2cf34:	addeq	r2, r4, #2
   2cf38:	mov	r4, r2
   2cf3c:	ldr	r3, [r6, #16]
   2cf40:	str	r4, [r6, #4]
   2cf44:	add	r3, r3, #1
   2cf48:	str	r3, [r6, #16]
   2cf4c:	cmp	r5, r4
   2cf50:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cf54:	ldrb	r2, [r4]
   2cf58:	cmp	r2, #32
   2cf5c:	bls	2ce9c <flatcc_json_parser_union_type_vector@@Base+0x830>
   2cf60:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cf64:	add	r4, r4, #1
   2cf68:	b	2cf3c <flatcc_json_parser_union_type_vector@@Base+0x8d0>
   2cf6c:	add	r4, r4, #1
   2cf70:	b	2cf4c <flatcc_json_parser_union_type_vector@@Base+0x8e0>
   2cf74:	add	r1, r4, #1
   2cf78:	sub	r3, r5, r1
   2cf7c:	cmp	r3, #1
   2cf80:	ble	2cf94 <flatcc_json_parser_union_type_vector@@Base+0x928>
   2cf84:	ldrb	r3, [r4, #1]
   2cf88:	cmp	r3, #32
   2cf8c:	bhi	2cfc8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   2cf90:	beq	2d110 <flatcc_json_parser_union_type_vector@@Base+0xaa4>
   2cf94:	cmp	r5, r1
   2cf98:	beq	2cfc8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   2cf9c:	ldrb	r2, [r1]
   2cfa0:	cmp	r2, #32
   2cfa4:	bne	2cfd0 <flatcc_json_parser_union_type_vector@@Base+0x964>
   2cfa8:	add	r3, r1, #1
   2cfac:	b	2cfbc <flatcc_json_parser_union_type_vector@@Base+0x950>
   2cfb0:	ldrb	r2, [r3], #1
   2cfb4:	cmp	r2, #32
   2cfb8:	bne	2cfd0 <flatcc_json_parser_union_type_vector@@Base+0x964>
   2cfbc:	cmp	r3, r5
   2cfc0:	mov	r1, r3
   2cfc4:	bne	2cfb0 <flatcc_json_parser_union_type_vector@@Base+0x944>
   2cfc8:	mov	r4, r1
   2cfcc:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2cfd0:	cmp	r2, #32
   2cfd4:	bhi	2cfc8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   2cfd8:	sub	r2, r2, #9
   2cfdc:	cmp	r2, #23
   2cfe0:	ldrls	pc, [pc, r2, lsl #2]
   2cfe4:	b	2d0a0 <flatcc_json_parser_union_type_vector@@Base+0xa34>
   2cfe8:	muleq	r2, r8, r0
   2cfec:	muleq	r2, r0, r0
   2cff0:	andeq	sp, r2, r0, lsr #1
   2cff4:	andeq	sp, r2, r0, lsr #1
   2cff8:	andeq	sp, r2, r8, asr #32
   2cffc:	andeq	sp, r2, r0, lsr #1
   2d000:	andeq	sp, r2, r0, lsr #1
   2d004:	andeq	sp, r2, r0, lsr #1
   2d008:	andeq	sp, r2, r0, lsr #1
   2d00c:	andeq	sp, r2, r0, lsr #1
   2d010:	andeq	sp, r2, r0, lsr #1
   2d014:	andeq	sp, r2, r0, lsr #1
   2d018:	andeq	sp, r2, r0, lsr #1
   2d01c:	andeq	sp, r2, r0, lsr #1
   2d020:	andeq	sp, r2, r0, lsr #1
   2d024:	andeq	sp, r2, r0, lsr #1
   2d028:	andeq	sp, r2, r0, lsr #1
   2d02c:	andeq	sp, r2, r0, lsr #1
   2d030:	andeq	sp, r2, r0, lsr #1
   2d034:	andeq	sp, r2, r0, lsr #1
   2d038:	andeq	sp, r2, r0, lsr #1
   2d03c:	andeq	sp, r2, r0, lsr #1
   2d040:	andeq	sp, r2, r0, lsr #1
   2d044:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2d048:	sub	r3, r5, r1
   2d04c:	add	r2, r1, #1
   2d050:	cmp	r3, #1
   2d054:	ble	2d064 <flatcc_json_parser_union_type_vector@@Base+0x9f8>
   2d058:	ldrb	r3, [r1, #1]
   2d05c:	cmp	r3, #10
   2d060:	addeq	r2, r1, #2
   2d064:	mov	r1, r2
   2d068:	ldr	r3, [r6, #16]
   2d06c:	str	r1, [r6, #4]
   2d070:	add	r3, r3, #1
   2d074:	str	r3, [r6, #16]
   2d078:	cmp	r5, r1
   2d07c:	beq	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2d080:	ldrb	r2, [r1]
   2d084:	cmp	r2, #32
   2d088:	bls	2cfd8 <flatcc_json_parser_union_type_vector@@Base+0x96c>
   2d08c:	b	2cfc8 <flatcc_json_parser_union_type_vector@@Base+0x95c>
   2d090:	add	r1, r1, #1
   2d094:	b	2d068 <flatcc_json_parser_union_type_vector@@Base+0x9fc>
   2d098:	add	r1, r1, #1
   2d09c:	b	2d078 <flatcc_json_parser_union_type_vector@@Base+0xa0c>
   2d0a0:	ldr	r3, [r6, #24]
   2d0a4:	cmp	r3, #0
   2d0a8:	bne	2c818 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2d0ac:	ldr	r3, [r6, #4]
   2d0b0:	mov	r2, #5
   2d0b4:	mov	r4, r5
   2d0b8:	str	r1, [r6, #36]	; 0x24
   2d0bc:	str	r2, [r6, #24]
   2d0c0:	sub	r1, r1, r3
   2d0c4:	add	r1, r1, #1
   2d0c8:	str	r1, [r6, #20]
   2d0cc:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d0d0:	ldrb	r3, [r4, #2]
   2d0d4:	cmp	r3, #32
   2d0d8:	addhi	r7, r4, #2
   2d0dc:	bls	2ccbc <flatcc_json_parser_union_type_vector@@Base+0x650>
   2d0e0:	cmp	r5, r7
   2d0e4:	bne	2ce3c <flatcc_json_parser_union_type_vector@@Base+0x7d0>
   2d0e8:	b	2ccf0 <flatcc_json_parser_union_type_vector@@Base+0x684>
   2d0ec:	ldr	r3, [r6, #24]
   2d0f0:	ldrb	r0, [sp, #27]
   2d0f4:	cmp	r3, #0
   2d0f8:	bne	2d108 <flatcc_json_parser_union_type_vector@@Base+0xa9c>
   2d0fc:	mov	r1, #8
   2d100:	ldr	r3, [r6, #4]
   2d104:	b	2cd64 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   2d108:	mov	r4, r5
   2d10c:	b	2c8ec <flatcc_json_parser_union_type_vector@@Base+0x280>
   2d110:	ldrb	r3, [r4, #2]
   2d114:	cmp	r3, #32
   2d118:	addhi	r4, r4, #2
   2d11c:	bls	2cf94 <flatcc_json_parser_union_type_vector@@Base+0x928>
   2d120:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d124:	ldr	r3, [r6, #24]
   2d128:	cmp	r3, #0
   2d12c:	bne	2c6f4 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2d130:	ldr	r3, [r6, #4]
   2d134:	mov	r2, #15
   2d138:	str	r2, [r6, #24]
   2d13c:	str	r4, [r6, #36]	; 0x24
   2d140:	sub	r3, r4, r3
   2d144:	mov	r4, r5
   2d148:	add	r3, r3, #1
   2d14c:	str	r3, [r6, #20]
   2d150:	b	2c6f8 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   2d154:	mov	r7, r1
   2d158:	b	2c850 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   2d15c:	ldrb	r3, [r7, #2]
   2d160:	cmp	r3, #32
   2d164:	bls	2ce64 <flatcc_json_parser_union_type_vector@@Base+0x7f8>
   2d168:	add	r4, r7, #2
   2d16c:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d170:	add	r4, r7, #1
   2d174:	sub	r3, r5, r4
   2d178:	cmp	r3, #1
   2d17c:	ble	2d190 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   2d180:	ldrb	r3, [r7, #1]
   2d184:	cmp	r3, #32
   2d188:	bhi	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d18c:	beq	2d290 <flatcc_json_parser_union_type_vector@@Base+0xc24>
   2d190:	cmp	r5, r4
   2d194:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d198:	ldrb	r2, [r4]
   2d19c:	cmp	r2, #32
   2d1a0:	bne	2d1c0 <flatcc_json_parser_union_type_vector@@Base+0xb54>
   2d1a4:	add	r3, r4, #1
   2d1a8:	cmp	r3, r5
   2d1ac:	mov	r4, r3
   2d1b0:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d1b4:	ldrb	r2, [r3], #1
   2d1b8:	cmp	r2, #32
   2d1bc:	beq	2d1a8 <flatcc_json_parser_union_type_vector@@Base+0xb3c>
   2d1c0:	cmp	r2, #32
   2d1c4:	bhi	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d1c8:	sub	r2, r2, #9
   2d1cc:	cmp	r2, #23
   2d1d0:	ldrls	pc, [pc, r2, lsl #2]
   2d1d4:	b	2cb2c <flatcc_json_parser_union_type_vector@@Base+0x4c0>
   2d1d8:	andeq	sp, r2, r8, lsl #5
   2d1dc:	andeq	sp, r2, r0, lsl #5
   2d1e0:	andeq	ip, r2, ip, lsr #22
   2d1e4:	andeq	ip, r2, ip, lsr #22
   2d1e8:	andeq	sp, r2, r8, lsr r2
   2d1ec:	andeq	ip, r2, ip, lsr #22
   2d1f0:	andeq	ip, r2, ip, lsr #22
   2d1f4:	andeq	ip, r2, ip, lsr #22
   2d1f8:	andeq	ip, r2, ip, lsr #22
   2d1fc:	andeq	ip, r2, ip, lsr #22
   2d200:	andeq	ip, r2, ip, lsr #22
   2d204:	andeq	ip, r2, ip, lsr #22
   2d208:	andeq	ip, r2, ip, lsr #22
   2d20c:	andeq	ip, r2, ip, lsr #22
   2d210:	andeq	ip, r2, ip, lsr #22
   2d214:	andeq	ip, r2, ip, lsr #22
   2d218:	andeq	ip, r2, ip, lsr #22
   2d21c:	andeq	ip, r2, ip, lsr #22
   2d220:	andeq	ip, r2, ip, lsr #22
   2d224:	andeq	ip, r2, ip, lsr #22
   2d228:	andeq	ip, r2, ip, lsr #22
   2d22c:	andeq	ip, r2, ip, lsr #22
   2d230:	andeq	ip, r2, ip, lsr #22
   2d234:	muleq	r2, r0, r1
   2d238:	sub	r3, r5, r4
   2d23c:	add	r2, r4, #1
   2d240:	cmp	r3, #1
   2d244:	ble	2d254 <flatcc_json_parser_union_type_vector@@Base+0xbe8>
   2d248:	ldrb	r3, [r4, #1]
   2d24c:	cmp	r3, #10
   2d250:	addeq	r2, r4, #2
   2d254:	mov	r4, r2
   2d258:	ldr	r3, [r6, #16]
   2d25c:	str	r4, [r6, #4]
   2d260:	add	r3, r3, #1
   2d264:	str	r3, [r6, #16]
   2d268:	cmp	r5, r4
   2d26c:	beq	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d270:	ldrb	r2, [r4]
   2d274:	cmp	r2, #32
   2d278:	bls	2d1c8 <flatcc_json_parser_union_type_vector@@Base+0xb5c>
   2d27c:	b	2c77c <flatcc_json_parser_union_type_vector@@Base+0x110>
   2d280:	add	r4, r4, #1
   2d284:	b	2d258 <flatcc_json_parser_union_type_vector@@Base+0xbec>
   2d288:	add	r4, r4, #1
   2d28c:	b	2d268 <flatcc_json_parser_union_type_vector@@Base+0xbfc>
   2d290:	ldrb	r3, [r7, #2]
   2d294:	cmp	r3, #32
   2d298:	bls	2d190 <flatcc_json_parser_union_type_vector@@Base+0xb24>
   2d29c:	b	2d168 <flatcc_json_parser_union_type_vector@@Base+0xafc>
   2d2a0:	movw	r1, #62184	; 0xf2e8
   2d2a4:	movt	r1, #2
   2d2a8:	ldr	r3, [pc, #12]	; 2d2bc <flatcc_json_parser_union_type_vector@@Base+0xc50>
   2d2ac:	movw	r0, #62260	; 0xf334
   2d2b0:	movt	r0, #2
   2d2b4:	movw	r2, #1122	; 0x462
   2d2b8:	bl	12684 <__assert_fail@plt>
   2d2bc:	andeq	pc, r2, r8, ror #2

0002d2c0 <flatcc_json_parser_table_as_root@@Base>:
   2d2c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2d2c4:	subs	r4, r1, #0
   2d2c8:	mov	r5, r2
   2d2cc:	strd	r6, [sp, #8]
   2d2d0:	mov	r2, #32
   2d2d4:	mov	r1, #0
   2d2d8:	strd	r8, [sp, #16]
   2d2dc:	mov	r8, r0
   2d2e0:	add	r6, r5, r3
   2d2e4:	str	lr, [sp, #24]
   2d2e8:	sub	sp, sp, #52	; 0x34
   2d2ec:	ldr	r9, [sp, #80]	; 0x50
   2d2f0:	addeq	r4, sp, #4
   2d2f4:	add	r0, r4, #12
   2d2f8:	bl	12630 <memset@plt>
   2d2fc:	mov	ip, #1
   2d300:	mov	r2, #0
   2d304:	str	r8, [r4]
   2d308:	mov	r0, r8
   2d30c:	ldr	r1, [sp, #84]	; 0x54
   2d310:	asr	r7, r9, #1
   2d314:	stmib	r4, {r5, r9}
   2d318:	str	ip, [r4, #16]
   2d31c:	and	r7, r7, #2
   2d320:	str	r5, [r4, #28]
   2d324:	mov	r3, r7
   2d328:	str	r6, [r4, #32]
   2d32c:	str	r5, [r4, #36]	; 0x24
   2d330:	bl	21b7c <flatcc_builder_start_buffer@@Base>
   2d334:	cmp	r0, #0
   2d338:	bne	2d398 <flatcc_json_parser_table_as_root@@Base+0xd8>
   2d33c:	mov	r2, r6
   2d340:	mov	r3, sp
   2d344:	ldr	ip, [sp, #88]	; 0x58
   2d348:	mov	r1, r5
   2d34c:	mov	r0, r4
   2d350:	blx	ip
   2d354:	ldr	r6, [r4, #24]
   2d358:	cmp	r6, #0
   2d35c:	beq	2d37c <flatcc_json_parser_table_as_root@@Base+0xbc>
   2d360:	mov	r0, r6
   2d364:	add	sp, sp, #52	; 0x34
   2d368:	ldrd	r4, [sp]
   2d36c:	ldrd	r6, [sp, #8]
   2d370:	ldrd	r8, [sp, #16]
   2d374:	add	sp, sp, #24
   2d378:	pop	{pc}		; (ldr pc, [sp], #4)
   2d37c:	mov	r0, r8
   2d380:	ldr	r1, [sp]
   2d384:	bl	21d28 <flatcc_builder_end_buffer@@Base>
   2d388:	cmp	r0, #0
   2d38c:	beq	2d398 <flatcc_json_parser_table_as_root@@Base+0xd8>
   2d390:	str	r5, [r4, #40]	; 0x28
   2d394:	b	2d360 <flatcc_json_parser_table_as_root@@Base+0xa0>
   2d398:	mvn	r6, #0
   2d39c:	b	2d360 <flatcc_json_parser_table_as_root@@Base+0xa0>

0002d3a0 <flatcc_json_parser_struct_as_root@@Base>:
   2d3a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2d3a4:	subs	r4, r1, #0
   2d3a8:	mov	r5, r2
   2d3ac:	strd	r6, [sp, #8]
   2d3b0:	mov	r2, #32
   2d3b4:	mov	r1, #0
   2d3b8:	strd	r8, [sp, #16]
   2d3bc:	mov	r8, r0
   2d3c0:	add	r6, r5, r3
   2d3c4:	str	lr, [sp, #24]
   2d3c8:	sub	sp, sp, #52	; 0x34
   2d3cc:	ldr	r9, [sp, #80]	; 0x50
   2d3d0:	addeq	r4, sp, #4
   2d3d4:	add	r0, r4, #12
   2d3d8:	bl	12630 <memset@plt>
   2d3dc:	mov	ip, #1
   2d3e0:	mov	r2, #0
   2d3e4:	str	r8, [r4]
   2d3e8:	mov	r0, r8
   2d3ec:	ldr	r1, [sp, #84]	; 0x54
   2d3f0:	asr	r7, r9, #1
   2d3f4:	stmib	r4, {r5, r9}
   2d3f8:	str	ip, [r4, #16]
   2d3fc:	and	r7, r7, #2
   2d400:	str	r5, [r4, #28]
   2d404:	mov	r3, r7
   2d408:	str	r6, [r4, #32]
   2d40c:	str	r5, [r4, #36]	; 0x24
   2d410:	bl	21b7c <flatcc_builder_start_buffer@@Base>
   2d414:	cmp	r0, #0
   2d418:	bne	2d478 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   2d41c:	mov	r2, r6
   2d420:	mov	r3, sp
   2d424:	ldr	ip, [sp, #88]	; 0x58
   2d428:	mov	r1, r5
   2d42c:	mov	r0, r4
   2d430:	blx	ip
   2d434:	ldr	r6, [r4, #24]
   2d438:	cmp	r6, #0
   2d43c:	beq	2d45c <flatcc_json_parser_struct_as_root@@Base+0xbc>
   2d440:	mov	r0, r6
   2d444:	add	sp, sp, #52	; 0x34
   2d448:	ldrd	r4, [sp]
   2d44c:	ldrd	r6, [sp, #8]
   2d450:	ldrd	r8, [sp, #16]
   2d454:	add	sp, sp, #24
   2d458:	pop	{pc}		; (ldr pc, [sp], #4)
   2d45c:	mov	r0, r8
   2d460:	ldr	r1, [sp]
   2d464:	bl	21d28 <flatcc_builder_end_buffer@@Base>
   2d468:	cmp	r0, #0
   2d46c:	beq	2d478 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   2d470:	str	r5, [r4, #40]	; 0x28
   2d474:	b	2d440 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   2d478:	mvn	r6, #0
   2d47c:	b	2d440 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   2d480:	eor	r1, r1, #-2147483648	; 0x80000000
   2d484:	b	2d48c <flatcc_json_parser_struct_as_root@@Base+0xec>
   2d488:	eor	r3, r3, #-2147483648	; 0x80000000
   2d48c:	push	{r4, r5, lr}
   2d490:	lsl	r4, r1, #1
   2d494:	lsl	r5, r3, #1
   2d498:	teq	r4, r5
   2d49c:	teqeq	r0, r2
   2d4a0:	orrsne	ip, r4, r0
   2d4a4:	orrsne	ip, r5, r2
   2d4a8:	mvnsne	ip, r4, asr #21
   2d4ac:	mvnsne	ip, r5, asr #21
   2d4b0:	beq	2d69c <flatcc_json_parser_struct_as_root@@Base+0x2fc>
   2d4b4:	lsr	r4, r4, #21
   2d4b8:	rsbs	r5, r4, r5, lsr #21
   2d4bc:	rsblt	r5, r5, #0
   2d4c0:	ble	2d4e0 <flatcc_json_parser_struct_as_root@@Base+0x140>
   2d4c4:	add	r4, r4, r5
   2d4c8:	eor	r2, r0, r2
   2d4cc:	eor	r3, r1, r3
   2d4d0:	eor	r0, r2, r0
   2d4d4:	eor	r1, r3, r1
   2d4d8:	eor	r2, r0, r2
   2d4dc:	eor	r3, r1, r3
   2d4e0:	cmp	r5, #54	; 0x36
   2d4e4:	pophi	{r4, r5, pc}
   2d4e8:	tst	r1, #-2147483648	; 0x80000000
   2d4ec:	lsl	r1, r1, #12
   2d4f0:	mov	ip, #1048576	; 0x100000
   2d4f4:	orr	r1, ip, r1, lsr #12
   2d4f8:	beq	2d504 <flatcc_json_parser_struct_as_root@@Base+0x164>
   2d4fc:	rsbs	r0, r0, #0
   2d500:	rsc	r1, r1, #0
   2d504:	tst	r3, #-2147483648	; 0x80000000
   2d508:	lsl	r3, r3, #12
   2d50c:	orr	r3, ip, r3, lsr #12
   2d510:	beq	2d51c <flatcc_json_parser_struct_as_root@@Base+0x17c>
   2d514:	rsbs	r2, r2, #0
   2d518:	rsc	r3, r3, #0
   2d51c:	teq	r4, r5
   2d520:	beq	2d684 <flatcc_json_parser_struct_as_root@@Base+0x2e4>
   2d524:	sub	r4, r4, #1
   2d528:	rsbs	lr, r5, #32
   2d52c:	blt	2d548 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   2d530:	lsl	ip, r2, lr
   2d534:	adds	r0, r0, r2, lsr r5
   2d538:	adc	r1, r1, #0
   2d53c:	adds	r0, r0, r3, lsl lr
   2d540:	adcs	r1, r1, r3, asr r5
   2d544:	b	2d564 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   2d548:	sub	r5, r5, #32
   2d54c:	add	lr, lr, #32
   2d550:	cmp	r2, #1
   2d554:	lsl	ip, r3, lr
   2d558:	orrcs	ip, ip, #2
   2d55c:	adds	r0, r0, r3, asr r5
   2d560:	adcs	r1, r1, r3, asr #31
   2d564:	and	r5, r1, #-2147483648	; 0x80000000
   2d568:	bpl	2d578 <flatcc_json_parser_struct_as_root@@Base+0x1d8>
   2d56c:	rsbs	ip, ip, #0
   2d570:	rscs	r0, r0, #0
   2d574:	rsc	r1, r1, #0
   2d578:	cmp	r1, #1048576	; 0x100000
   2d57c:	bcc	2d5bc <flatcc_json_parser_struct_as_root@@Base+0x21c>
   2d580:	cmp	r1, #2097152	; 0x200000
   2d584:	bcc	2d5a4 <flatcc_json_parser_struct_as_root@@Base+0x204>
   2d588:	lsrs	r1, r1, #1
   2d58c:	rrxs	r0, r0
   2d590:	rrx	ip, ip
   2d594:	add	r4, r4, #1
   2d598:	lsl	r2, r4, #21
   2d59c:	cmn	r2, #4194304	; 0x400000
   2d5a0:	bcs	2d6fc <flatcc_json_parser_struct_as_root@@Base+0x35c>
   2d5a4:	cmp	ip, #-2147483648	; 0x80000000
   2d5a8:	lsrseq	ip, r0, #1
   2d5ac:	adcs	r0, r0, #0
   2d5b0:	adc	r1, r1, r4, lsl #20
   2d5b4:	orr	r1, r1, r5
   2d5b8:	pop	{r4, r5, pc}
   2d5bc:	lsls	ip, ip, #1
   2d5c0:	adcs	r0, r0, r0
   2d5c4:	adc	r1, r1, r1
   2d5c8:	tst	r1, #1048576	; 0x100000
   2d5cc:	sub	r4, r4, #1
   2d5d0:	bne	2d5a4 <flatcc_json_parser_struct_as_root@@Base+0x204>
   2d5d4:	teq	r1, #0
   2d5d8:	moveq	r1, r0
   2d5dc:	moveq	r0, #0
   2d5e0:	clz	r3, r1
   2d5e4:	addeq	r3, r3, #32
   2d5e8:	sub	r3, r3, #11
   2d5ec:	subs	r2, r3, #32
   2d5f0:	bge	2d614 <flatcc_json_parser_struct_as_root@@Base+0x274>
   2d5f4:	adds	r2, r2, #12
   2d5f8:	ble	2d610 <flatcc_json_parser_struct_as_root@@Base+0x270>
   2d5fc:	add	ip, r2, #20
   2d600:	rsb	r2, r2, #12
   2d604:	lsl	r0, r1, ip
   2d608:	lsr	r1, r1, r2
   2d60c:	b	2d624 <flatcc_json_parser_struct_as_root@@Base+0x284>
   2d610:	add	r2, r2, #20
   2d614:	rsble	ip, r2, #32
   2d618:	lsl	r1, r1, r2
   2d61c:	orrle	r1, r1, r0, lsr ip
   2d620:	lslle	r0, r0, r2
   2d624:	subs	r4, r4, r3
   2d628:	addge	r1, r1, r4, lsl #20
   2d62c:	orrge	r1, r1, r5
   2d630:	popge	{r4, r5, pc}
   2d634:	mvn	r4, r4
   2d638:	subs	r4, r4, #31
   2d63c:	bge	2d678 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   2d640:	adds	r4, r4, #12
   2d644:	bgt	2d660 <flatcc_json_parser_struct_as_root@@Base+0x2c0>
   2d648:	add	r4, r4, #20
   2d64c:	rsb	r2, r4, #32
   2d650:	lsr	r0, r0, r4
   2d654:	orr	r0, r0, r1, lsl r2
   2d658:	orr	r1, r5, r1, lsr r4
   2d65c:	pop	{r4, r5, pc}
   2d660:	rsb	r4, r4, #12
   2d664:	rsb	r2, r4, #32
   2d668:	lsr	r0, r0, r2
   2d66c:	orr	r0, r0, r1, lsl r4
   2d670:	mov	r1, r5
   2d674:	pop	{r4, r5, pc}
   2d678:	lsr	r0, r1, r4
   2d67c:	mov	r1, r5
   2d680:	pop	{r4, r5, pc}
   2d684:	teq	r4, #0
   2d688:	eor	r3, r3, #1048576	; 0x100000
   2d68c:	eoreq	r1, r1, #1048576	; 0x100000
   2d690:	addeq	r4, r4, #1
   2d694:	subne	r5, r5, #1
   2d698:	b	2d524 <flatcc_json_parser_struct_as_root@@Base+0x184>
   2d69c:	mvns	ip, r4, asr #21
   2d6a0:	mvnsne	ip, r5, asr #21
   2d6a4:	beq	2d70c <flatcc_json_parser_struct_as_root@@Base+0x36c>
   2d6a8:	teq	r4, r5
   2d6ac:	teqeq	r0, r2
   2d6b0:	beq	2d6c4 <flatcc_json_parser_struct_as_root@@Base+0x324>
   2d6b4:	orrs	ip, r4, r0
   2d6b8:	moveq	r1, r3
   2d6bc:	moveq	r0, r2
   2d6c0:	pop	{r4, r5, pc}
   2d6c4:	teq	r1, r3
   2d6c8:	movne	r1, #0
   2d6cc:	movne	r0, #0
   2d6d0:	popne	{r4, r5, pc}
   2d6d4:	lsrs	ip, r4, #21
   2d6d8:	bne	2d6ec <flatcc_json_parser_struct_as_root@@Base+0x34c>
   2d6dc:	lsls	r0, r0, #1
   2d6e0:	adcs	r1, r1, r1
   2d6e4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2d6e8:	pop	{r4, r5, pc}
   2d6ec:	adds	r4, r4, #4194304	; 0x400000
   2d6f0:	addcc	r1, r1, #1048576	; 0x100000
   2d6f4:	popcc	{r4, r5, pc}
   2d6f8:	and	r5, r1, #-2147483648	; 0x80000000
   2d6fc:	orr	r1, r5, #2130706432	; 0x7f000000
   2d700:	orr	r1, r1, #15728640	; 0xf00000
   2d704:	mov	r0, #0
   2d708:	pop	{r4, r5, pc}
   2d70c:	mvns	ip, r4, asr #21
   2d710:	movne	r1, r3
   2d714:	movne	r0, r2
   2d718:	mvnseq	ip, r5, asr #21
   2d71c:	movne	r3, r1
   2d720:	movne	r2, r0
   2d724:	orrs	r4, r0, r1, lsl #12
   2d728:	orrseq	r5, r2, r3, lsl #12
   2d72c:	teqeq	r1, r3
   2d730:	orrne	r1, r1, #524288	; 0x80000
   2d734:	pop	{r4, r5, pc}
   2d738:	teq	r0, #0
   2d73c:	moveq	r1, #0
   2d740:	bxeq	lr
   2d744:	push	{r4, r5, lr}
   2d748:	mov	r4, #1024	; 0x400
   2d74c:	add	r4, r4, #50	; 0x32
   2d750:	mov	r5, #0
   2d754:	mov	r1, #0
   2d758:	b	2d5d4 <flatcc_json_parser_struct_as_root@@Base+0x234>
   2d75c:	teq	r0, #0
   2d760:	moveq	r1, #0
   2d764:	bxeq	lr
   2d768:	push	{r4, r5, lr}
   2d76c:	mov	r4, #1024	; 0x400
   2d770:	add	r4, r4, #50	; 0x32
   2d774:	ands	r5, r0, #-2147483648	; 0x80000000
   2d778:	rsbmi	r0, r0, #0
   2d77c:	mov	r1, #0
   2d780:	b	2d5d4 <flatcc_json_parser_struct_as_root@@Base+0x234>
   2d784:	lsls	r2, r0, #1
   2d788:	asr	r1, r2, #3
   2d78c:	rrx	r1, r1
   2d790:	lsl	r0, r2, #28
   2d794:	andsne	r3, r2, #-16777216	; 0xff000000
   2d798:	teqne	r3, #-16777216	; 0xff000000
   2d79c:	eorne	r1, r1, #939524096	; 0x38000000
   2d7a0:	bxne	lr
   2d7a4:	bics	r2, r2, #-16777216	; 0xff000000
   2d7a8:	bxeq	lr
   2d7ac:	teq	r3, #-16777216	; 0xff000000
   2d7b0:	orreq	r1, r1, #524288	; 0x80000
   2d7b4:	bxeq	lr
   2d7b8:	push	{r4, r5, lr}
   2d7bc:	mov	r4, #896	; 0x380
   2d7c0:	and	r5, r1, #-2147483648	; 0x80000000
   2d7c4:	bic	r1, r1, #-2147483648	; 0x80000000
   2d7c8:	b	2d5d4 <flatcc_json_parser_struct_as_root@@Base+0x234>
   2d7cc:	orrs	r2, r0, r1
   2d7d0:	bxeq	lr
   2d7d4:	push	{r4, r5, lr}
   2d7d8:	mov	r5, #0
   2d7dc:	b	2d7fc <flatcc_json_parser_struct_as_root@@Base+0x45c>
   2d7e0:	orrs	r2, r0, r1
   2d7e4:	bxeq	lr
   2d7e8:	push	{r4, r5, lr}
   2d7ec:	ands	r5, r1, #-2147483648	; 0x80000000
   2d7f0:	bpl	2d7fc <flatcc_json_parser_struct_as_root@@Base+0x45c>
   2d7f4:	rsbs	r0, r0, #0
   2d7f8:	rsc	r1, r1, #0
   2d7fc:	mov	r4, #1024	; 0x400
   2d800:	add	r4, r4, #50	; 0x32
   2d804:	lsrs	ip, r1, #22
   2d808:	beq	2d578 <flatcc_json_parser_struct_as_root@@Base+0x1d8>
   2d80c:	mov	r2, #3
   2d810:	lsrs	ip, ip, #3
   2d814:	addne	r2, r2, #3
   2d818:	lsrs	ip, ip, #3
   2d81c:	addne	r2, r2, #3
   2d820:	add	r2, r2, ip, lsr #3
   2d824:	rsb	r3, r2, #32
   2d828:	lsl	ip, r0, r3
   2d82c:	lsr	r0, r0, r2
   2d830:	orr	r0, r0, r1, lsl r3
   2d834:	lsr	r1, r1, r2
   2d838:	add	r4, r4, r2
   2d83c:	b	2d578 <flatcc_json_parser_struct_as_root@@Base+0x1d8>
   2d840:	eor	r0, r0, #-2147483648	; 0x80000000
   2d844:	b	2d84c <flatcc_json_parser_struct_as_root@@Base+0x4ac>
   2d848:	eor	r1, r1, #-2147483648	; 0x80000000
   2d84c:	lsls	r2, r0, #1
   2d850:	lslsne	r3, r1, #1
   2d854:	teqne	r2, r3
   2d858:	mvnsne	ip, r2, asr #24
   2d85c:	mvnsne	ip, r3, asr #24
   2d860:	beq	2d958 <flatcc_json_parser_struct_as_root@@Base+0x5b8>
   2d864:	lsr	r2, r2, #24
   2d868:	rsbs	r3, r2, r3, lsr #24
   2d86c:	addgt	r2, r2, r3
   2d870:	eorgt	r1, r0, r1
   2d874:	eorgt	r0, r1, r0
   2d878:	eorgt	r1, r0, r1
   2d87c:	rsblt	r3, r3, #0
   2d880:	cmp	r3, #25
   2d884:	bxhi	lr
   2d888:	tst	r0, #-2147483648	; 0x80000000
   2d88c:	orr	r0, r0, #8388608	; 0x800000
   2d890:	bic	r0, r0, #-16777216	; 0xff000000
   2d894:	rsbne	r0, r0, #0
   2d898:	tst	r1, #-2147483648	; 0x80000000
   2d89c:	orr	r1, r1, #8388608	; 0x800000
   2d8a0:	bic	r1, r1, #-16777216	; 0xff000000
   2d8a4:	rsbne	r1, r1, #0
   2d8a8:	teq	r2, r3
   2d8ac:	beq	2d940 <flatcc_json_parser_struct_as_root@@Base+0x5a0>
   2d8b0:	sub	r2, r2, #1
   2d8b4:	adds	r0, r0, r1, asr r3
   2d8b8:	rsb	r3, r3, #32
   2d8bc:	lsl	r1, r1, r3
   2d8c0:	and	r3, r0, #-2147483648	; 0x80000000
   2d8c4:	bpl	2d8d0 <flatcc_json_parser_struct_as_root@@Base+0x530>
   2d8c8:	rsbs	r1, r1, #0
   2d8cc:	rsc	r0, r0, #0
   2d8d0:	cmp	r0, #8388608	; 0x800000
   2d8d4:	bcc	2d908 <flatcc_json_parser_struct_as_root@@Base+0x568>
   2d8d8:	cmp	r0, #16777216	; 0x1000000
   2d8dc:	bcc	2d8f4 <flatcc_json_parser_struct_as_root@@Base+0x554>
   2d8e0:	lsrs	r0, r0, #1
   2d8e4:	rrx	r1, r1
   2d8e8:	add	r2, r2, #1
   2d8ec:	cmp	r2, #254	; 0xfe
   2d8f0:	bcs	2d9ac <flatcc_json_parser_struct_as_root@@Base+0x60c>
   2d8f4:	cmp	r1, #-2147483648	; 0x80000000
   2d8f8:	adc	r0, r0, r2, lsl #23
   2d8fc:	biceq	r0, r0, #1
   2d900:	orr	r0, r0, r3
   2d904:	bx	lr
   2d908:	lsls	r1, r1, #1
   2d90c:	adc	r0, r0, r0
   2d910:	tst	r0, #8388608	; 0x800000
   2d914:	sub	r2, r2, #1
   2d918:	bne	2d8f4 <flatcc_json_parser_struct_as_root@@Base+0x554>
   2d91c:	clz	ip, r0
   2d920:	sub	ip, ip, #8
   2d924:	subs	r2, r2, ip
   2d928:	lsl	r0, r0, ip
   2d92c:	addge	r0, r0, r2, lsl #23
   2d930:	rsblt	r2, r2, #0
   2d934:	orrge	r0, r0, r3
   2d938:	orrlt	r0, r3, r0, lsr r2
   2d93c:	bx	lr
   2d940:	teq	r2, #0
   2d944:	eor	r1, r1, #8388608	; 0x800000
   2d948:	eoreq	r0, r0, #8388608	; 0x800000
   2d94c:	addeq	r2, r2, #1
   2d950:	subne	r3, r3, #1
   2d954:	b	2d8b0 <flatcc_json_parser_struct_as_root@@Base+0x510>
   2d958:	lsl	r3, r1, #1
   2d95c:	mvns	ip, r2, asr #24
   2d960:	mvnsne	ip, r3, asr #24
   2d964:	beq	2d9b8 <flatcc_json_parser_struct_as_root@@Base+0x618>
   2d968:	teq	r2, r3
   2d96c:	beq	2d97c <flatcc_json_parser_struct_as_root@@Base+0x5dc>
   2d970:	teq	r2, #0
   2d974:	moveq	r0, r1
   2d978:	bx	lr
   2d97c:	teq	r0, r1
   2d980:	movne	r0, #0
   2d984:	bxne	lr
   2d988:	tst	r2, #-16777216	; 0xff000000
   2d98c:	bne	2d99c <flatcc_json_parser_struct_as_root@@Base+0x5fc>
   2d990:	lsls	r0, r0, #1
   2d994:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2d998:	bx	lr
   2d99c:	adds	r2, r2, #33554432	; 0x2000000
   2d9a0:	addcc	r0, r0, #8388608	; 0x800000
   2d9a4:	bxcc	lr
   2d9a8:	and	r3, r0, #-2147483648	; 0x80000000
   2d9ac:	orr	r0, r3, #2130706432	; 0x7f000000
   2d9b0:	orr	r0, r0, #8388608	; 0x800000
   2d9b4:	bx	lr
   2d9b8:	mvns	r2, r2, asr #24
   2d9bc:	movne	r0, r1
   2d9c0:	mvnseq	r3, r3, asr #24
   2d9c4:	movne	r1, r0
   2d9c8:	lsls	r2, r0, #9
   2d9cc:	lslseq	r3, r1, #9
   2d9d0:	teqeq	r0, r1
   2d9d4:	orrne	r0, r0, #4194304	; 0x400000
   2d9d8:	bx	lr
   2d9dc:	mov	r3, #0
   2d9e0:	b	2d9ec <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2d9e4:	ands	r3, r0, #-2147483648	; 0x80000000
   2d9e8:	rsbmi	r0, r0, #0
   2d9ec:	movs	ip, r0
   2d9f0:	bxeq	lr
   2d9f4:	orr	r3, r3, #1258291200	; 0x4b000000
   2d9f8:	mov	r1, r0
   2d9fc:	mov	r0, #0
   2da00:	b	2da44 <flatcc_json_parser_struct_as_root@@Base+0x6a4>
   2da04:	orrs	r2, r0, r1
   2da08:	bxeq	lr
   2da0c:	mov	r3, #0
   2da10:	b	2da2c <flatcc_json_parser_struct_as_root@@Base+0x68c>
   2da14:	orrs	r2, r0, r1
   2da18:	bxeq	lr
   2da1c:	ands	r3, r1, #-2147483648	; 0x80000000
   2da20:	bpl	2da2c <flatcc_json_parser_struct_as_root@@Base+0x68c>
   2da24:	rsbs	r0, r0, #0
   2da28:	rsc	r1, r1, #0
   2da2c:	movs	ip, r1
   2da30:	moveq	ip, r0
   2da34:	moveq	r1, r0
   2da38:	moveq	r0, #0
   2da3c:	orr	r3, r3, #1526726656	; 0x5b000000
   2da40:	subeq	r3, r3, #268435456	; 0x10000000
   2da44:	sub	r3, r3, #8388608	; 0x800000
   2da48:	clz	r2, ip
   2da4c:	subs	r2, r2, #8
   2da50:	sub	r3, r3, r2, lsl #23
   2da54:	blt	2da74 <flatcc_json_parser_struct_as_root@@Base+0x6d4>
   2da58:	add	r3, r3, r1, lsl r2
   2da5c:	lsl	ip, r0, r2
   2da60:	rsb	r2, r2, #32
   2da64:	cmp	ip, #-2147483648	; 0x80000000
   2da68:	adc	r0, r3, r0, lsr r2
   2da6c:	biceq	r0, r0, #1
   2da70:	bx	lr
   2da74:	add	r2, r2, #32
   2da78:	lsl	ip, r1, r2
   2da7c:	rsb	r2, r2, #32
   2da80:	orrs	r0, r0, ip, lsl #1
   2da84:	adc	r0, r3, r1, lsr r2
   2da88:	biceq	r0, r0, ip, lsr #31
   2da8c:	bx	lr

0002da90 <__libc_csu_init@@Base>:
   2da90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2da94:	mov	r7, r0
   2da98:	ldr	r6, [pc, #72]	; 2dae8 <__libc_csu_init@@Base+0x58>
   2da9c:	ldr	r5, [pc, #72]	; 2daec <__libc_csu_init@@Base+0x5c>
   2daa0:	add	r6, pc, r6
   2daa4:	add	r5, pc, r5
   2daa8:	sub	r6, r6, r5
   2daac:	mov	r8, r1
   2dab0:	mov	r9, r2
   2dab4:	bl	12550 <fopen@plt-0x20>
   2dab8:	asrs	r6, r6, #2
   2dabc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dac0:	mov	r4, #0
   2dac4:	add	r4, r4, #1
   2dac8:	ldr	r3, [r5], #4
   2dacc:	mov	r2, r9
   2dad0:	mov	r1, r8
   2dad4:	mov	r0, r7
   2dad8:	blx	r3
   2dadc:	cmp	r6, r4
   2dae0:	bne	2dac4 <__libc_csu_init@@Base+0x34>
   2dae4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dae8:	andeq	r2, r1, ip, ror #8
   2daec:	andeq	r2, r1, r4, ror #8

0002daf0 <__libc_csu_fini@@Base>:
   2daf0:	bx	lr

Disassembly of section .fini:

0002daf4 <.fini>:
   2daf4:	push	{r3, lr}
   2daf8:	pop	{r3, pc}
