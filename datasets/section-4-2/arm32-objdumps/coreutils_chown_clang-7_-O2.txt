
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111c4 <.init>:
   111c4:	push	{r3, lr}
   111c8:	bl	1156c <__assert_fail@plt+0x4c>
   111cc:	pop	{r3, pc}

Disassembly of section .plt:

000111d0 <fstatfs64@plt-0x14>:
   111d0:	push	{lr}		; (str lr, [sp, #-4]!)
   111d4:	ldr	lr, [pc, #4]	; 111e0 <fstatfs64@plt-0x4>
   111d8:	add	lr, pc, lr
   111dc:	ldr	pc, [lr, #8]!
   111e0:	andeq	fp, r1, r0, lsr #28

000111e4 <fstatfs64@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3616]!	; 0xe20

000111f0 <calloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3608]!	; 0xe18

000111fc <endgrent@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3600]!	; 0xe10

00011208 <fputs_unlocked@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3592]!	; 0xe08

00011214 <raise@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3584]!	; 0xe00

00011220 <getpwnam@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3576]!	; 0xdf8

0001122c <strcmp@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3568]!	; 0xdf0

00011238 <getpwuid@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3560]!	; 0xde8

00011244 <fflush@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3552]!	; 0xde0

00011250 <memmove@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3544]!	; 0xdd8

0001125c <free@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3536]!	; 0xdd0

00011268 <_exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3528]!	; 0xdc8

00011274 <memcpy@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011280 <mbsinit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3512]!	; 0xdb8

0001128c <memcmp@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3504]!	; 0xdb0

00011298 <stpcpy@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3496]!	; 0xda8

000112a4 <dcgettext@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3488]!	; 0xda0

000112b0 <realloc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3480]!	; 0xd98

000112bc <textdomain@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3472]!	; 0xd90

000112c8 <__fxstatat64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3464]!	; 0xd88

000112d4 <iswprint@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3456]!	; 0xd80

000112e0 <__fxstat64@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ec <fwrite@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3440]!	; 0xd70

000112f8 <lseek64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3432]!	; 0xd68

00011304 <__ctype_get_mb_cur_max@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3424]!	; 0xd60

00011310 <__fpending@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3416]!	; 0xd58

0001131c <mbrtowc@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3408]!	; 0xd50

00011328 <error@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3400]!	; 0xd48

00011334 <open64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3392]!	; 0xd40

00011340 <malloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3384]!	; 0xd38

0001134c <__libc_start_main@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3376]!	; 0xd30

00011358 <__freading@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3368]!	; 0xd28

00011364 <__gmon_start__@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3360]!	; 0xd20

00011370 <getopt_long@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3352]!	; 0xd18

0001137c <__ctype_b_loc@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3344]!	; 0xd10

00011388 <exit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3336]!	; 0xd08

00011394 <strtoul@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3328]!	; 0xd00

000113a0 <strlen@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113ac <strchr@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b8 <openat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3304]!	; 0xce8

000113c4 <fchown@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3296]!	; 0xce0

000113d0 <__errno_location@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113dc <__cxa_atexit@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e8 <memset@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113f4 <__printf_chk@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3264]!	; 0xcc0

00011400 <fileno@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3256]!	; 0xcb8

0001140c <__fprintf_chk@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3248]!	; 0xcb0

00011418 <fclose@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3240]!	; 0xca8

00011424 <fseeko64@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3232]!	; 0xca0

00011430 <fcntl64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3224]!	; 0xc98

0001143c <setlocale@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3216]!	; 0xc90

00011448 <endpwent@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3208]!	; 0xc88

00011454 <strrchr@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3200]!	; 0xc80

00011460 <nl_langinfo@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3192]!	; 0xc78

0001146c <readdir64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3184]!	; 0xc70

00011478 <fdopendir@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #110592	; 0x1b000
   11480:	ldr	pc, [ip, #3176]!	; 0xc68

00011484 <dirfd@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #3168]!	; 0xc60

00011490 <fchdir@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #3160]!	; 0xc58

0001149c <qsort@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #3152]!	; 0xc50

000114a8 <fchownat@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #3144]!	; 0xc48

000114b4 <bindtextdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #3136]!	; 0xc40

000114c0 <__xstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #3128]!	; 0xc38

000114cc <strncmp@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #3120]!	; 0xc30

000114d8 <abort@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #3112]!	; 0xc28

000114e4 <close@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #3104]!	; 0xc20

000114f0 <__lxstat64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #3096]!	; 0xc18

000114fc <closedir@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #3088]!	; 0xc10

00011508 <getgrgid@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #3080]!	; 0xc08

00011514 <getgrnam@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #3072]!	; 0xc00

00011520 <__assert_fail@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011530 <.text>:
   11530:	mov	fp, #0
   11534:	mov	lr, #0
   11538:	pop	{r1}		; (ldr r1, [sp], #4)
   1153c:	mov	r2, sp
   11540:	push	{r2}		; (str r2, [sp, #-4]!)
   11544:	push	{r0}		; (str r0, [sp, #-4]!)
   11548:	ldr	ip, [pc, #16]	; 11560 <__assert_fail@plt+0x40>
   1154c:	push	{ip}		; (str ip, [sp, #-4]!)
   11550:	ldr	r0, [pc, #12]	; 11564 <__assert_fail@plt+0x44>
   11554:	ldr	r3, [pc, #12]	; 11568 <__assert_fail@plt+0x48>
   11558:	bl	1134c <__libc_start_main@plt>
   1155c:	bl	114d8 <abort@plt>
   11560:	andeq	sl, r1, ip, asr #15
   11564:	muleq	r1, r0, r9
   11568:	andeq	sl, r1, ip, ror #14
   1156c:	ldr	r3, [pc, #20]	; 11588 <__assert_fail@plt+0x68>
   11570:	ldr	r2, [pc, #20]	; 1158c <__assert_fail@plt+0x6c>
   11574:	add	r3, pc, r3
   11578:	ldr	r2, [r3, r2]
   1157c:	cmp	r2, #0
   11580:	bxeq	lr
   11584:	b	11364 <__gmon_start__@plt>
   11588:	andeq	fp, r1, r4, lsl #21
   1158c:	andeq	r0, r0, r4, lsr #2
   11590:	ldr	r0, [pc, #24]	; 115b0 <__assert_fail@plt+0x90>
   11594:	ldr	r3, [pc, #24]	; 115b4 <__assert_fail@plt+0x94>
   11598:	cmp	r3, r0
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0x98>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	sp, r2, r8, ror r1
   115b4:	andeq	sp, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	ldr	r0, [pc, #36]	; 115e8 <__assert_fail@plt+0xc8>
   115c0:	ldr	r1, [pc, #36]	; 115ec <__assert_fail@plt+0xcc>
   115c4:	sub	r1, r1, r0
   115c8:	asr	r1, r1, #2
   115cc:	add	r1, r1, r1, lsr #31
   115d0:	asrs	r1, r1, #1
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0xd0>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	sp, r2, r8, ror r1
   115ec:	andeq	sp, r2, r8, ror r1
   115f0:	andeq	r0, r0, r0
   115f4:	push	{r4, lr}
   115f8:	ldr	r4, [pc, #24]	; 11618 <__assert_fail@plt+0xf8>
   115fc:	ldrb	r3, [r4]
   11600:	cmp	r3, #0
   11604:	popne	{r4, pc}
   11608:	bl	11590 <__assert_fail@plt+0x70>
   1160c:	mov	r3, #1
   11610:	strb	r3, [r4]
   11614:	pop	{r4, pc}
   11618:	muleq	r2, r4, r1
   1161c:	b	115bc <__assert_fail@plt+0x9c>
   11620:	push	{fp, lr}
   11624:	mov	fp, sp
   11628:	sub	sp, sp, #64	; 0x40
   1162c:	mov	r4, r0
   11630:	cmp	r0, #0
   11634:	bne	1194c <__assert_fail@plt+0x42c>
   11638:	movw	r1, #43035	; 0xa81b
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	112a4 <dcgettext@plt>
   1164c:	movw	r5, #53688	; 0xd1b8
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	movt	r5, #2
   1165c:	ldr	r2, [r5]
   11660:	mov	r3, r2
   11664:	bl	113f4 <__printf_chk@plt>
   11668:	movw	r1, #43132	; 0xa87c
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	112a4 <dcgettext@plt>
   1167c:	movw	r7, #53644	; 0xd18c
   11680:	movt	r7, #2
   11684:	ldr	r1, [r7]
   11688:	bl	11208 <fputs_unlocked@plt>
   1168c:	movw	r1, #43277	; 0xa90d
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	movt	r1, #1
   1169c:	bl	112a4 <dcgettext@plt>
   116a0:	ldr	r1, [r7]
   116a4:	bl	11208 <fputs_unlocked@plt>
   116a8:	movw	r1, #43478	; 0xa9d6
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	112a4 <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	11208 <fputs_unlocked@plt>
   116c4:	movw	r1, #43709	; 0xaabd
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	112a4 <dcgettext@plt>
   116d8:	ldr	r1, [r7]
   116dc:	bl	11208 <fputs_unlocked@plt>
   116e0:	movw	r1, #43828	; 0xab34
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	112a4 <dcgettext@plt>
   116f4:	ldr	r1, [r7]
   116f8:	bl	11208 <fputs_unlocked@plt>
   116fc:	movw	r1, #44168	; 0xac88
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	112a4 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	11208 <fputs_unlocked@plt>
   11718:	movw	r1, #44296	; 0xad08
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	112a4 <dcgettext@plt>
   1172c:	ldr	r1, [r7]
   11730:	bl	11208 <fputs_unlocked@plt>
   11734:	movw	r1, #44417	; 0xad81
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	movt	r1, #1
   11744:	bl	112a4 <dcgettext@plt>
   11748:	ldr	r1, [r7]
   1174c:	bl	11208 <fputs_unlocked@plt>
   11750:	movw	r1, #44488	; 0xadc8
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	112a4 <dcgettext@plt>
   11764:	ldr	r1, [r7]
   11768:	bl	11208 <fputs_unlocked@plt>
   1176c:	movw	r1, #44953	; 0xaf99
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	112a4 <dcgettext@plt>
   11780:	ldr	r1, [r7]
   11784:	bl	11208 <fputs_unlocked@plt>
   11788:	movw	r1, #44998	; 0xafc6
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	112a4 <dcgettext@plt>
   1179c:	ldr	r1, [r7]
   117a0:	bl	11208 <fputs_unlocked@plt>
   117a4:	movw	r1, #45052	; 0xaffc
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	movt	r1, #1
   117b4:	bl	112a4 <dcgettext@plt>
   117b8:	ldr	r1, [r7]
   117bc:	bl	11208 <fputs_unlocked@plt>
   117c0:	movw	r1, #45244	; 0xb0bc
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	112a4 <dcgettext@plt>
   117d4:	ldr	r2, [r5]
   117d8:	mov	r1, r0
   117dc:	mov	r0, #1
   117e0:	mov	r3, r2
   117e4:	str	r2, [sp]
   117e8:	bl	113f4 <__printf_chk@plt>
   117ec:	movw	r0, #46272	; 0xb4c0
   117f0:	mov	r2, #48	; 0x30
   117f4:	add	r6, sp, #8
   117f8:	movw	r5, #45445	; 0xb185
   117fc:	movt	r0, #1
   11800:	movt	r5, #1
   11804:	add	r1, r0, #32
   11808:	add	r3, r0, #16
   1180c:	vld1.64	{d18-d19}, [r0], r2
   11810:	vld1.64	{d16-d17}, [r1]
   11814:	vld1.64	{d20-d21}, [r3]
   11818:	add	r1, r6, #32
   1181c:	vldr	d22, [r0]
   11820:	add	r0, r6, #16
   11824:	vst1.64	{d16-d17}, [r1]
   11828:	movw	r1, #45648	; 0xb250
   1182c:	vst1.64	{d20-d21}, [r0]
   11830:	mov	r0, r6
   11834:	vst1.64	{d18-d19}, [r0], r2
   11838:	movt	r1, #1
   1183c:	vstr	d22, [r0]
   11840:	mov	r0, r5
   11844:	bl	1122c <strcmp@plt>
   11848:	cmp	r0, #0
   1184c:	ldrne	r1, [r6, #8]!
   11850:	cmpne	r1, #0
   11854:	bne	11840 <__assert_fail@plt+0x320>
   11858:	ldr	r6, [r6, #4]
   1185c:	movw	r1, #45743	; 0xb2af
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	movt	r1, #1
   1186c:	bl	112a4 <dcgettext@plt>
   11870:	movw	r2, #45491	; 0xb1b3
   11874:	movw	r3, #45766	; 0xb2c6
   11878:	mov	r1, r0
   1187c:	mov	r0, #1
   11880:	movt	r2, #1
   11884:	movt	r3, #1
   11888:	bl	113f4 <__printf_chk@plt>
   1188c:	cmp	r6, #0
   11890:	mov	r0, #5
   11894:	mov	r1, #0
   11898:	moveq	r6, r5
   1189c:	bl	1143c <setlocale@plt>
   118a0:	cmp	r0, #0
   118a4:	beq	118dc <__assert_fail@plt+0x3bc>
   118a8:	movw	r1, #45806	; 0xb2ee
   118ac:	mov	r2, #3
   118b0:	movt	r1, #1
   118b4:	bl	114cc <strncmp@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	118dc <__assert_fail@plt+0x3bc>
   118c0:	movw	r1, #45810	; 0xb2f2
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	112a4 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	11208 <fputs_unlocked@plt>
   118dc:	movw	r1, #45881	; 0xb339
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	112a4 <dcgettext@plt>
   118f0:	movw	r2, #45766	; 0xb2c6
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	mov	r3, r5
   11900:	movt	r2, #1
   11904:	bl	113f4 <__printf_chk@plt>
   11908:	movw	r1, #45908	; 0xb354
   1190c:	mov	r0, #0
   11910:	mov	r2, #5
   11914:	movt	r1, #1
   11918:	bl	112a4 <dcgettext@plt>
   1191c:	movw	r3, #44952	; 0xaf98
   11920:	mov	r1, r0
   11924:	movw	r0, #45676	; 0xb26c
   11928:	cmp	r6, r5
   1192c:	mov	r2, r6
   11930:	movt	r0, #1
   11934:	movt	r3, #1
   11938:	moveq	r3, r0
   1193c:	mov	r0, #1
   11940:	bl	113f4 <__printf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	11388 <exit@plt>
   1194c:	movw	r0, #53640	; 0xd188
   11950:	movw	r1, #42996	; 0xa7f4
   11954:	mov	r2, #5
   11958:	movt	r0, #2
   1195c:	movt	r1, #1
   11960:	ldr	r5, [r0]
   11964:	mov	r0, #0
   11968:	bl	112a4 <dcgettext@plt>
   1196c:	mov	r2, r0
   11970:	movw	r0, #53688	; 0xd1b8
   11974:	mov	r1, #1
   11978:	movt	r0, #2
   1197c:	ldr	r3, [r0]
   11980:	mov	r0, r5
   11984:	bl	1140c <__fprintf_chk@plt>
   11988:	mov	r0, r4
   1198c:	bl	11388 <exit@plt>
   11990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11994:	add	fp, sp, #28
   11998:	sub	sp, sp, #164	; 0xa4
   1199c:	mvn	r9, #0
   119a0:	mov	r6, r0
   119a4:	mov	sl, r1
   119a8:	str	r9, [fp, #-32]	; 0xffffffe0
   119ac:	str	r9, [fp, #-36]	; 0xffffffdc
   119b0:	str	r9, [fp, #-40]	; 0xffffffd8
   119b4:	str	r9, [fp, #-44]	; 0xffffffd4
   119b8:	ldr	r0, [r1]
   119bc:	bl	1674c <__assert_fail@plt+0x522c>
   119c0:	movw	r1, #44952	; 0xaf98
   119c4:	mov	r0, #6
   119c8:	movt	r1, #1
   119cc:	bl	1143c <setlocale@plt>
   119d0:	movw	r5, #45495	; 0xb1b7
   119d4:	movw	r1, #45451	; 0xb18b
   119d8:	movt	r5, #1
   119dc:	movt	r1, #1
   119e0:	mov	r0, r5
   119e4:	bl	114b4 <bindtextdomain@plt>
   119e8:	mov	r0, r5
   119ec:	bl	112bc <textdomain@plt>
   119f0:	movw	r0, #11796	; 0x2e14
   119f4:	movt	r0, #1
   119f8:	bl	1a7d0 <__assert_fail@plt+0x92b0>
   119fc:	sub	r0, fp, #68	; 0x44
   11a00:	bl	11f64 <__assert_fail@plt+0xa44>
   11a04:	movw	r7, #45475	; 0xb1a3
   11a08:	movw	r5, #46048	; 0xb3e0
   11a0c:	mov	r8, #0
   11a10:	mov	r0, #16
   11a14:	movt	r7, #1
   11a18:	movt	r5, #1
   11a1c:	b	11a24 <__assert_fail@plt+0x504>
   11a20:	mov	r0, r4
   11a24:	mov	r1, #0
   11a28:	str	r1, [sp, #12]
   11a2c:	b	11a3c <__assert_fail@plt+0x51c>
   11a30:	mov	r0, #1
   11a34:	str	r0, [fp, #-68]	; 0xffffffbc
   11a38:	mov	r0, r4
   11a3c:	mov	r4, r0
   11a40:	mov	r0, r6
   11a44:	mov	r1, sl
   11a48:	mov	r2, r7
   11a4c:	mov	r3, r5
   11a50:	str	r8, [sp]
   11a54:	bl	11370 <getopt_long@plt>
   11a58:	cmp	r0, #71	; 0x47
   11a5c:	ble	11c14 <__assert_fail@plt+0x6f4>
   11a60:	sub	r1, r0, #72	; 0x48
   11a64:	cmp	r1, #46	; 0x2e
   11a68:	bhi	11b3c <__assert_fail@plt+0x61c>
   11a6c:	add	r2, pc, #4
   11a70:	mov	r0, #17
   11a74:	ldr	pc, [r2, r1, lsl #2]
   11a78:	andeq	r1, r1, ip, lsr sl
   11a7c:	muleq	r1, r0, lr
   11a80:	muleq	r1, r0, lr
   11a84:	muleq	r1, r0, lr
   11a88:	andeq	r1, r1, r4, lsr fp
   11a8c:	muleq	r1, r0, lr
   11a90:	muleq	r1, r0, lr
   11a94:	muleq	r1, r0, lr
   11a98:	andeq	r1, r1, r0, lsr #23
   11a9c:	muleq	r1, r0, lr
   11aa0:	andeq	r1, r1, r0, ror fp
   11aa4:	muleq	r1, r0, lr
   11aa8:	muleq	r1, r0, lr
   11aac:	muleq	r1, r0, lr
   11ab0:	muleq	r1, r0, lr
   11ab4:	muleq	r1, r0, lr
   11ab8:	muleq	r1, r0, lr
   11abc:	muleq	r1, r0, lr
   11ac0:	muleq	r1, r0, lr
   11ac4:	muleq	r1, r0, lr
   11ac8:	muleq	r1, r0, lr
   11acc:	muleq	r1, r0, lr
   11ad0:	muleq	r1, r0, lr
   11ad4:	muleq	r1, r0, lr
   11ad8:	muleq	r1, r0, lr
   11adc:	muleq	r1, r0, lr
   11ae0:	muleq	r1, r0, lr
   11ae4:	andeq	r1, r1, r0, lsr sl
   11ae8:	muleq	r1, r0, lr
   11aec:	muleq	r1, r0, lr
   11af0:	andeq	r1, r1, r8, lsr #23
   11af4:	muleq	r1, r0, lr
   11af8:			; <UNDEFINED> instruction: 0x00011bb8
   11afc:	muleq	r1, r0, lr
   11b00:	muleq	r1, r0, lr
   11b04:	muleq	r1, r0, lr
   11b08:	muleq	r1, r0, lr
   11b0c:	muleq	r1, r0, lr
   11b10:	muleq	r1, r0, lr
   11b14:	muleq	r1, r0, lr
   11b18:	muleq	r1, r0, lr
   11b1c:	muleq	r1, r0, lr
   11b20:	muleq	r1, r0, lr
   11b24:	muleq	r1, r0, lr
   11b28:	muleq	r1, r0, lr
   11b2c:	muleq	r1, r0, lr
   11b30:	andeq	r1, r1, r4, asr #23
   11b34:	mov	r0, #2
   11b38:	b	11a3c <__assert_fail@plt+0x51c>
   11b3c:	sub	r0, r0, #256	; 0x100
   11b40:	cmp	r0, #4
   11b44:	bhi	11e90 <__assert_fail@plt+0x970>
   11b48:	add	r1, pc, #0
   11b4c:	ldr	pc, [r1, r0, lsl #2]
   11b50:	andeq	r1, r1, r4, ror #22
   11b54:	ldrdeq	r1, [r1], -r0
   11b58:	andeq	r1, r1, r0, lsr #20
   11b5c:	andeq	r1, r1, r4, lsl #24
   11b60:	andeq	r1, r1, r0, lsl #23
   11b64:	mov	r9, #1
   11b68:	mov	r0, r4
   11b6c:	b	11a3c <__assert_fail@plt+0x51c>
   11b70:	mov	r0, #1
   11b74:	strb	r0, [fp, #-64]	; 0xffffffc0
   11b78:	mov	r0, r4
   11b7c:	b	11a3c <__assert_fail@plt+0x51c>
   11b80:	movw	r0, #53648	; 0xd190
   11b84:	movw	r1, #53656	; 0xd198
   11b88:	movt	r0, #2
   11b8c:	movt	r1, #2
   11b90:	ldr	r0, [r0]
   11b94:	str	r0, [r1]
   11b98:	mov	r0, r4
   11b9c:	b	11a3c <__assert_fail@plt+0x51c>
   11ba0:	mov	r0, #16
   11ba4:	b	11a3c <__assert_fail@plt+0x51c>
   11ba8:	mov	r0, #1
   11bac:	strb	r0, [fp, #-55]	; 0xffffffc9
   11bb0:	mov	r0, r4
   11bb4:	b	11a3c <__assert_fail@plt+0x51c>
   11bb8:	mov	r9, #0
   11bbc:	mov	r0, r4
   11bc0:	b	11a3c <__assert_fail@plt+0x51c>
   11bc4:	str	r8, [fp, #-68]	; 0xffffffbc
   11bc8:	mov	r0, r4
   11bcc:	b	11a3c <__assert_fail@plt+0x51c>
   11bd0:	movw	r0, #53648	; 0xd190
   11bd4:	sub	r1, fp, #40	; 0x28
   11bd8:	sub	r2, fp, #44	; 0x2c
   11bdc:	mov	r3, #0
   11be0:	str	r8, [sp]
   11be4:	movt	r0, #2
   11be8:	ldr	r0, [r0]
   11bec:	bl	18554 <__assert_fail@plt+0x7034>
   11bf0:	mov	r1, r0
   11bf4:	cmp	r0, #0
   11bf8:	mov	r0, r4
   11bfc:	beq	11a3c <__assert_fail@plt+0x51c>
   11c00:	b	11e20 <__assert_fail@plt+0x900>
   11c04:	mov	r0, #1
   11c08:	str	r0, [sp, #12]
   11c0c:	mov	r0, r4
   11c10:	b	11a3c <__assert_fail@plt+0x51c>
   11c14:	cmn	r0, #1
   11c18:	bne	11db4 <__assert_fail@plt+0x894>
   11c1c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11c20:	mov	r7, #16
   11c24:	cmp	r0, #0
   11c28:	beq	11c64 <__assert_fail@plt+0x744>
   11c2c:	cmp	r4, #16
   11c30:	bne	11c6c <__assert_fail@plt+0x74c>
   11c34:	mov	r0, #0
   11c38:	cmp	r9, #1
   11c3c:	bne	11c74 <__assert_fail@plt+0x754>
   11c40:	movw	r1, #45534	; 0xb1de
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	112a4 <dcgettext@plt>
   11c54:	mov	r2, r0
   11c58:	mov	r0, #1
   11c5c:	mov	r1, #0
   11c60:	bl	11328 <error@plt>
   11c64:	mov	r0, r9
   11c68:	b	11c74 <__assert_fail@plt+0x754>
   11c6c:	mov	r0, r9
   11c70:	mov	r7, r4
   11c74:	cmp	r0, #0
   11c78:	movw	r4, #53632	; 0xd180
   11c7c:	mov	r2, #2
   11c80:	sub	r8, fp, #68	; 0x44
   11c84:	movwne	r0, #1
   11c88:	movt	r4, #2
   11c8c:	strb	r0, [fp, #-56]	; 0xffffffc8
   11c90:	movw	r0, #53656	; 0xd198
   11c94:	movt	r0, #2
   11c98:	ldr	r1, [r0]
   11c9c:	ldr	r0, [r4]
   11ca0:	cmp	r1, #0
   11ca4:	sub	r3, r6, r0
   11ca8:	movwne	r2, #1
   11cac:	cmp	r3, r2
   11cb0:	blt	11e50 <__assert_fail@plt+0x930>
   11cb4:	cmp	r1, #0
   11cb8:	beq	11cf8 <__assert_fail@plt+0x7d8>
   11cbc:	add	r2, sp, #16
   11cc0:	mov	r0, #3
   11cc4:	bl	114c0 <__xstat64@plt>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11e98 <__assert_fail@plt+0x978>
   11cd0:	ldr	r0, [sp, #40]	; 0x28
   11cd4:	ldr	r1, [sp, #44]	; 0x2c
   11cd8:	str	r0, [fp, #-32]	; 0xffffffe0
   11cdc:	str	r1, [fp, #-36]	; 0xffffffdc
   11ce0:	bl	11fec <__assert_fail@plt+0xacc>
   11ce4:	str	r0, [fp, #-52]	; 0xffffffcc
   11ce8:	ldr	r0, [sp, #44]	; 0x2c
   11cec:	bl	11fac <__assert_fail@plt+0xa8c>
   11cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   11cf4:	b	11d50 <__assert_fail@plt+0x830>
   11cf8:	ldr	r0, [sl, r0, lsl #2]
   11cfc:	add	r1, r8, #20
   11d00:	add	r3, r8, #16
   11d04:	sub	r2, fp, #36	; 0x24
   11d08:	str	r1, [sp]
   11d0c:	sub	r1, fp, #32
   11d10:	bl	18554 <__assert_fail@plt+0x7034>
   11d14:	cmp	r0, #0
   11d18:	bne	11f38 <__assert_fail@plt+0xa18>
   11d1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d20:	cmp	r0, #0
   11d24:	bne	11d44 <__assert_fail@plt+0x824>
   11d28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d2c:	cmp	r0, #0
   11d30:	beq	11d44 <__assert_fail@plt+0x824>
   11d34:	movw	r0, #44952	; 0xaf98
   11d38:	movt	r0, #1
   11d3c:	bl	194d8 <__assert_fail@plt+0x7fb8>
   11d40:	str	r0, [fp, #-52]	; 0xffffffcc
   11d44:	ldr	r0, [r4]
   11d48:	add	r0, r0, #1
   11d4c:	str	r0, [r4]
   11d50:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11d54:	cmp	r0, #0
   11d58:	beq	11d84 <__assert_fail@plt+0x864>
   11d5c:	ldr	r0, [sp, #12]
   11d60:	eor	r0, r0, #1
   11d64:	tst	r0, #1
   11d68:	bne	11d84 <__assert_fail@plt+0x864>
   11d6c:	movw	r0, #53664	; 0xd1a0
   11d70:	movt	r0, #2
   11d74:	bl	184b8 <__assert_fail@plt+0x6f98>
   11d78:	cmp	r0, #0
   11d7c:	str	r0, [fp, #-60]	; 0xffffffc4
   11d80:	beq	11ec8 <__assert_fail@plt+0x9a8>
   11d84:	ldr	r0, [r4]
   11d88:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11d8c:	ldr	r6, [fp, #-44]	; 0xffffffd4
   11d90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d94:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d98:	stm	sp, {r1, r6, r8}
   11d9c:	add	r0, sl, r0, lsl #2
   11da0:	orr	r1, r7, #1024	; 0x400
   11da4:	bl	1202c <__assert_fail@plt+0xb0c>
   11da8:	eor	r0, r0, #1
   11dac:	sub	sp, fp, #28
   11db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11db4:	cmn	r0, #3
   11db8:	bne	11e10 <__assert_fail@plt+0x8f0>
   11dbc:	movw	r0, #53552	; 0xd130
   11dc0:	movw	r2, #45521	; 0xb1d1
   11dc4:	mov	r1, #0
   11dc8:	movw	r7, #45505	; 0xb1c1
   11dcc:	movt	r0, #2
   11dd0:	movt	r2, #1
   11dd4:	str	r1, [sp, #8]
   11dd8:	movw	r1, #45445	; 0xb185
   11ddc:	movt	r7, #1
   11de0:	ldr	r3, [r0]
   11de4:	movw	r0, #53644	; 0xd18c
   11de8:	str	r2, [sp, #4]
   11dec:	movw	r2, #45491	; 0xb1b3
   11df0:	movt	r1, #1
   11df4:	str	r7, [sp]
   11df8:	movt	r0, #2
   11dfc:	movt	r2, #1
   11e00:	ldr	r0, [r0]
   11e04:	bl	18d84 <__assert_fail@plt+0x7864>
   11e08:	mov	r0, #0
   11e0c:	bl	11388 <exit@plt>
   11e10:	cmn	r0, #2
   11e14:	bne	11e90 <__assert_fail@plt+0x970>
   11e18:	mov	r0, #0
   11e1c:	bl	11620 <__assert_fail@plt+0x100>
   11e20:	movw	r0, #53648	; 0xd190
   11e24:	mov	r4, r1
   11e28:	movt	r0, #2
   11e2c:	ldr	r0, [r0]
   11e30:	bl	18380 <__assert_fail@plt+0x6e60>
   11e34:	movw	r2, #45484	; 0xb1ac
   11e38:	str	r0, [sp]
   11e3c:	mov	r0, #1
   11e40:	mov	r1, #0
   11e44:	mov	r3, r4
   11e48:	movt	r2, #1
   11e4c:	bl	11328 <error@plt>
   11e50:	cmp	r0, r6
   11e54:	bge	11f0c <__assert_fail@plt+0x9ec>
   11e58:	movw	r1, #45592	; 0xb218
   11e5c:	mov	r0, #0
   11e60:	mov	r2, #5
   11e64:	movt	r1, #1
   11e68:	bl	112a4 <dcgettext@plt>
   11e6c:	mov	r5, r0
   11e70:	add	r0, sl, r6, lsl #2
   11e74:	ldr	r0, [r0, #-4]
   11e78:	bl	18380 <__assert_fail@plt+0x6e60>
   11e7c:	mov	r3, r0
   11e80:	mov	r0, #0
   11e84:	mov	r1, #0
   11e88:	mov	r2, r5
   11e8c:	bl	11328 <error@plt>
   11e90:	mov	r0, #1
   11e94:	bl	11620 <__assert_fail@plt+0x100>
   11e98:	bl	113d0 <__errno_location@plt>
   11e9c:	ldr	r4, [r0]
   11ea0:	movw	r1, #45617	; 0xb231
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	movt	r1, #1
   11eb0:	bl	112a4 <dcgettext@plt>
   11eb4:	mov	r5, r0
   11eb8:	movw	r0, #53656	; 0xd198
   11ebc:	movt	r0, #2
   11ec0:	ldr	r1, [r0]
   11ec4:	b	11ef0 <__assert_fail@plt+0x9d0>
   11ec8:	bl	113d0 <__errno_location@plt>
   11ecc:	ldr	r4, [r0]
   11ed0:	movw	r1, #45617	; 0xb231
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	movt	r1, #1
   11ee0:	bl	112a4 <dcgettext@plt>
   11ee4:	movw	r1, #48503	; 0xbd77
   11ee8:	mov	r5, r0
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #4
   11ef4:	bl	17e58 <__assert_fail@plt+0x6938>
   11ef8:	mov	r3, r0
   11efc:	mov	r0, #1
   11f00:	mov	r1, r4
   11f04:	mov	r2, r5
   11f08:	bl	11328 <error@plt>
   11f0c:	movw	r1, #45576	; 0xb208
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	112a4 <dcgettext@plt>
   11f20:	mov	r2, r0
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	bl	11328 <error@plt>
   11f30:	mov	r0, #1
   11f34:	bl	11620 <__assert_fail@plt+0x100>
   11f38:	mov	r5, r0
   11f3c:	ldr	r0, [r4]
   11f40:	ldr	r0, [sl, r0, lsl #2]
   11f44:	bl	18380 <__assert_fail@plt+0x6e60>
   11f48:	movw	r2, #45484	; 0xb1ac
   11f4c:	str	r0, [sp]
   11f50:	mov	r0, #1
   11f54:	mov	r1, #0
   11f58:	mov	r3, r5
   11f5c:	movt	r2, #1
   11f60:	bl	11328 <error@plt>
   11f64:	mov	r1, #0
   11f68:	mov	r2, #2
   11f6c:	str	r1, [r0, #8]
   11f70:	str	r2, [r0]
   11f74:	mov	r2, #1
   11f78:	strb	r1, [r0, #4]
   11f7c:	strh	r2, [r0, #12]
   11f80:	str	r1, [r0, #16]
   11f84:	str	r1, [r0, #20]
   11f88:	bx	lr
   11f8c:	push	{r4, sl, fp, lr}
   11f90:	add	fp, sp, #8
   11f94:	mov	r4, r0
   11f98:	ldr	r0, [r0, #16]
   11f9c:	bl	12efc <__assert_fail@plt+0x19dc>
   11fa0:	ldr	r0, [r4, #20]
   11fa4:	pop	{r4, sl, fp, lr}
   11fa8:	b	12efc <__assert_fail@plt+0x19dc>
   11fac:	push	{r4, sl, fp, lr}
   11fb0:	add	fp, sp, #8
   11fb4:	sub	sp, sp, #24
   11fb8:	mov	r4, r0
   11fbc:	bl	11508 <getgrgid@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fd0 <__assert_fail@plt+0xab0>
   11fc8:	ldr	r0, [r0]
   11fcc:	b	11fe0 <__assert_fail@plt+0xac0>
   11fd0:	add	r2, sp, #3
   11fd4:	mov	r0, r4
   11fd8:	mov	r1, #0
   11fdc:	bl	16650 <__assert_fail@plt+0x5130>
   11fe0:	bl	194d8 <__assert_fail@plt+0x7fb8>
   11fe4:	sub	sp, fp, #8
   11fe8:	pop	{r4, sl, fp, pc}
   11fec:	push	{r4, sl, fp, lr}
   11ff0:	add	fp, sp, #8
   11ff4:	sub	sp, sp, #24
   11ff8:	mov	r4, r0
   11ffc:	bl	11238 <getpwuid@plt>
   12000:	cmp	r0, #0
   12004:	beq	12010 <__assert_fail@plt+0xaf0>
   12008:	ldr	r0, [r0]
   1200c:	b	12020 <__assert_fail@plt+0xb00>
   12010:	add	r2, sp, #3
   12014:	mov	r0, r4
   12018:	mov	r1, #0
   1201c:	bl	16650 <__assert_fail@plt+0x5130>
   12020:	bl	194d8 <__assert_fail@plt+0x7fb8>
   12024:	sub	sp, fp, #8
   12028:	pop	{r4, sl, fp, pc}
   1202c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12030:	add	fp, sp, #28
   12034:	sub	sp, sp, #260	; 0x104
   12038:	str	r3, [sp, #24]
   1203c:	str	r2, [sp, #28]
   12040:	ldr	r2, [fp, #8]
   12044:	ldr	r3, [fp, #12]
   12048:	ldr	r5, [fp, #16]
   1204c:	and	r3, r3, r2
   12050:	mov	r2, #0
   12054:	cmn	r3, #1
   12058:	str	r3, [sp, #32]
   1205c:	bne	12080 <__assert_fail@plt+0xb60>
   12060:	ldrb	r3, [r5, #12]
   12064:	cmp	r3, #0
   12068:	bne	12080 <__assert_fail@plt+0xb60>
   1206c:	ldr	r2, [r5]
   12070:	sub	r2, r2, #2
   12074:	clz	r2, r2
   12078:	lsr	r2, r2, #5
   1207c:	lsl	r2, r2, #3
   12080:	orr	r1, r2, r1
   12084:	mov	r2, #0
   12088:	bl	1955c <__assert_fail@plt+0x803c>
   1208c:	str	r0, [sp, #44]	; 0x2c
   12090:	bl	1383c <__assert_fail@plt+0x231c>
   12094:	cmp	r0, #0
   12098:	beq	120d4 <__assert_fail@plt+0xbb4>
   1209c:	ldr	r1, [sp, #28]
   120a0:	movw	r2, #46763	; 0xb6ab
   120a4:	mov	r9, r0
   120a8:	movw	r0, #46788	; 0xb6c4
   120ac:	mov	r7, #1
   120b0:	movt	r0, #1
   120b4:	movt	r2, #1
   120b8:	cmn	r1, #1
   120bc:	moveq	r2, r0
   120c0:	sub	r0, fp, #136	; 0x88
   120c4:	add	r0, r0, #96	; 0x60
   120c8:	str	r2, [sp, #12]
   120cc:	str	r0, [sp, #8]
   120d0:	b	120f4 <__assert_fail@plt+0xbd4>
   120d4:	mov	r7, #1
   120d8:	b	12ccc <__assert_fail@plt+0x17ac>
   120dc:	ldr	r0, [sp, #36]	; 0x24
   120e0:	bl	114e4 <close@plt>
   120e4:	cmp	r0, #0
   120e8:	mov	r0, #6
   120ec:	movweq	r0, #2
   120f0:	b	12714 <__assert_fail@plt+0x11f4>
   120f4:	ldr	r8, [r9, #24]
   120f8:	ldr	r4, [r9, #28]
   120fc:	ldrh	r0, [r9, #56]	; 0x38
   12100:	sub	r0, r0, #1
   12104:	cmp	r0, #9
   12108:	bhi	12308 <__assert_fail@plt+0xde8>
   1210c:	add	r1, pc, #0
   12110:	ldr	pc, [r1, r0, lsl #2]
   12114:	andeq	r2, r1, ip, lsr r1
   12118:	andeq	r2, r1, r0, lsr #5
   1211c:	andeq	r2, r1, r8, lsl #6
   12120:	andeq	r2, r1, r0, lsl #4
   12124:	andeq	r2, r1, r8, lsl #6
   12128:	strdeq	r2, [r1], -ip
   1212c:	andeq	r2, r1, r0, lsl r4
   12130:	andeq	r2, r1, r8, lsl #6
   12134:	andeq	r2, r1, r8, lsl #6
   12138:	andeq	r2, r1, r0, lsr r2
   1213c:	ldrb	r0, [r5, #4]
   12140:	cmp	r0, #0
   12144:	beq	12308 <__assert_fail@plt+0xde8>
   12148:	ldr	r0, [r5, #8]
   1214c:	mov	r6, r4
   12150:	mov	r4, #1
   12154:	cmp	r0, #0
   12158:	beq	12cb4 <__assert_fail@plt+0x1794>
   1215c:	ldrd	r2, [r0]
   12160:	ldrd	r4, [r9, #160]	; 0xa0
   12164:	eor	r1, r5, r3
   12168:	eor	r2, r4, r2
   1216c:	orrs	r1, r2, r1
   12170:	bne	12494 <__assert_fail@plt+0xf74>
   12174:	ldrd	r0, [r0, #8]
   12178:	ldrd	r2, [r9, #64]	; 0x40
   1217c:	ldr	r5, [fp, #16]
   12180:	mov	r4, #1
   12184:	eor	r1, r3, r1
   12188:	eor	r0, r2, r0
   1218c:	orrs	r0, r0, r1
   12190:	bne	12cb4 <__assert_fail@plt+0x1794>
   12194:	movw	r8, #48503	; 0xbd77
   12198:	mov	r0, r6
   1219c:	mov	r4, r6
   121a0:	movt	r8, #1
   121a4:	mov	r1, r8
   121a8:	bl	1122c <strcmp@plt>
   121ac:	cmp	r0, #0
   121b0:	beq	12b90 <__assert_fail@plt+0x1670>
   121b4:	movw	r1, #46406	; 0xb546
   121b8:	mov	r0, #0
   121bc:	mov	r2, #5
   121c0:	movt	r1, #1
   121c4:	bl	112a4 <dcgettext@plt>
   121c8:	mov	r6, r0
   121cc:	mov	r0, #0
   121d0:	mov	r1, #4
   121d4:	mov	r2, r4
   121d8:	bl	17db0 <__assert_fail@plt+0x6890>
   121dc:	mov	r5, r0
   121e0:	mov	r0, #1
   121e4:	mov	r1, #4
   121e8:	mov	r2, r8
   121ec:	bl	17db0 <__assert_fail@plt+0x6890>
   121f0:	mov	r3, r5
   121f4:	ldr	r5, [fp, #16]
   121f8:	str	r0, [sp]
   121fc:	b	12bb8 <__assert_fail@plt+0x1698>
   12200:	ldrb	r0, [r5, #13]
   12204:	mov	sl, #0
   12208:	mov	r6, #1
   1220c:	str	r4, [sp, #40]	; 0x28
   12210:	cmp	r0, #0
   12214:	bne	12428 <__assert_fail@plt+0xf08>
   12218:	ldr	r8, [r9, #32]
   1221c:	movw	r1, #46530	; 0xb5c2
   12220:	mov	sl, #0
   12224:	mov	r0, #0
   12228:	movt	r1, #1
   1222c:	b	12274 <__assert_fail@plt+0xd54>
   12230:	ldr	r0, [r9, #48]	; 0x30
   12234:	cmp	r0, #0
   12238:	bne	12248 <__assert_fail@plt+0xd28>
   1223c:	ldr	r0, [r9, #16]
   12240:	cmp	r0, #0
   12244:	beq	1260c <__assert_fail@plt+0x10ec>
   12248:	ldrb	r0, [r5, #13]
   1224c:	mov	sl, #0
   12250:	mov	r6, #1
   12254:	str	r4, [sp, #40]	; 0x28
   12258:	cmp	r0, #0
   1225c:	bne	12428 <__assert_fail@plt+0xf08>
   12260:	ldr	r8, [r9, #32]
   12264:	movw	r1, #46513	; 0xb5b1
   12268:	mov	sl, #0
   1226c:	mov	r0, #0
   12270:	movt	r1, #1
   12274:	mov	r2, #5
   12278:	bl	112a4 <dcgettext@plt>
   1227c:	mov	r5, r0
   12280:	mov	r0, #4
   12284:	mov	r1, r4
   12288:	bl	17e58 <__assert_fail@plt+0x6938>
   1228c:	mov	r3, r0
   12290:	mov	r0, #0
   12294:	mov	r1, r8
   12298:	mov	r2, r5
   1229c:	b	12488 <__assert_fail@plt+0xf68>
   122a0:	ldr	r0, [sp, #44]	; 0x2c
   122a4:	mov	r1, r9
   122a8:	bl	195a8 <__assert_fail@plt+0x8088>
   122ac:	cmp	r0, #0
   122b0:	beq	12308 <__assert_fail@plt+0xde8>
   122b4:	movw	r1, #46555	; 0xb5db
   122b8:	mov	r0, #0
   122bc:	mov	r2, #5
   122c0:	mov	r6, r4
   122c4:	movt	r1, #1
   122c8:	bl	112a4 <dcgettext@plt>
   122cc:	mov	r4, r0
   122d0:	mov	r0, #0
   122d4:	mov	r1, #3
   122d8:	mov	r2, r6
   122dc:	bl	180d4 <__assert_fail@plt+0x6bb4>
   122e0:	mov	r3, r0
   122e4:	mov	r2, r4
   122e8:	mov	r0, #0
   122ec:	mov	r1, #0
   122f0:	mov	r4, #0
   122f4:	bl	11328 <error@plt>
   122f8:	b	12cb4 <__assert_fail@plt+0x1794>
   122fc:	ldrb	r0, [r5, #4]
   12300:	cmp	r0, #0
   12304:	beq	12454 <__assert_fail@plt+0xf34>
   12308:	ldr	r0, [sp, #32]
   1230c:	cmn	r0, #1
   12310:	bne	12328 <__assert_fail@plt+0xe08>
   12314:	ldr	r0, [r5]
   12318:	cmp	r0, #2
   1231c:	ldreq	r0, [r5, #8]
   12320:	cmpeq	r0, #0
   12324:	beq	124a0 <__assert_fail@plt+0xf80>
   12328:	ldrb	r0, [r5, #12]
   1232c:	add	sl, r9, #64	; 0x40
   12330:	cmp	r0, #0
   12334:	beq	123dc <__assert_fail@plt+0xebc>
   12338:	ldr	r0, [r9, #80]	; 0x50
   1233c:	and	r0, r0, #61440	; 0xf000
   12340:	cmp	r0, #40960	; 0xa000
   12344:	bne	123dc <__assert_fail@plt+0xebc>
   12348:	ldr	r0, [sp, #44]	; 0x2c
   1234c:	add	sl, sp, #48	; 0x30
   12350:	mov	r2, r8
   12354:	mov	r3, sl
   12358:	ldr	r1, [r0, #32]
   1235c:	mov	r0, #0
   12360:	str	r0, [sp]
   12364:	mov	r0, #3
   12368:	bl	112c8 <__fxstatat64@plt>
   1236c:	cmp	r0, #0
   12370:	beq	123dc <__assert_fail@plt+0xebc>
   12374:	ldrb	r0, [r5, #13]
   12378:	str	r4, [sp, #40]	; 0x28
   1237c:	mov	r4, #0
   12380:	mov	r6, #1
   12384:	cmp	r0, #0
   12388:	bne	123d0 <__assert_fail@plt+0xeb0>
   1238c:	bl	113d0 <__errno_location@plt>
   12390:	ldr	r4, [r0]
   12394:	movw	r1, #46741	; 0xb695
   12398:	mov	r0, #0
   1239c:	mov	r2, #5
   123a0:	movt	r1, #1
   123a4:	bl	112a4 <dcgettext@plt>
   123a8:	ldr	r1, [sp, #40]	; 0x28
   123ac:	mov	r5, r0
   123b0:	mov	r0, #4
   123b4:	bl	17e58 <__assert_fail@plt+0x6938>
   123b8:	mov	r3, r0
   123bc:	mov	r1, r4
   123c0:	mov	r0, #0
   123c4:	mov	r2, r5
   123c8:	mov	r4, #0
   123cc:	bl	11328 <error@plt>
   123d0:	add	sl, sp, #48	; 0x30
   123d4:	mov	r5, #1
   123d8:	b	12828 <__assert_fail@plt+0x1308>
   123dc:	ldr	r2, [fp, #8]
   123e0:	cmn	r2, #1
   123e4:	beq	12430 <__assert_fail@plt+0xf10>
   123e8:	ldr	r1, [sl, #24]
   123ec:	ldr	r3, [fp, #12]
   123f0:	sub	r0, r1, r2
   123f4:	cmn	r3, #1
   123f8:	clz	r0, r0
   123fc:	lsr	r0, r0, #5
   12400:	beq	124b4 <__assert_fail@plt+0xf94>
   12404:	cmp	r1, r2
   12408:	beq	1243c <__assert_fail@plt+0xf1c>
   1240c:	b	124b4 <__assert_fail@plt+0xf94>
   12410:	ldrb	r0, [r5, #13]
   12414:	mov	sl, #0
   12418:	mov	r6, #1
   1241c:	str	r4, [sp, #40]	; 0x28
   12420:	cmp	r0, #0
   12424:	beq	1245c <__assert_fail@plt+0xf3c>
   12428:	mov	r5, #1
   1242c:	b	12824 <__assert_fail@plt+0x1304>
   12430:	ldr	r0, [fp, #12]
   12434:	cmn	r0, #1
   12438:	beq	124b0 <__assert_fail@plt+0xf90>
   1243c:	ldr	r0, [sl, #28]
   12440:	ldr	r1, [fp, #12]
   12444:	sub	r0, r0, r1
   12448:	clz	r0, r0
   1244c:	lsr	r0, r0, #5
   12450:	b	124b4 <__assert_fail@plt+0xf94>
   12454:	mov	r4, #1
   12458:	b	12cb4 <__assert_fail@plt+0x1794>
   1245c:	ldr	r5, [r9, #32]
   12460:	mov	r0, #0
   12464:	mov	r1, #3
   12468:	mov	r2, r4
   1246c:	mov	sl, #0
   12470:	bl	180d4 <__assert_fail@plt+0x6bb4>
   12474:	movw	r2, #45488	; 0xb1b0
   12478:	mov	r3, r0
   1247c:	mov	r0, #0
   12480:	mov	r1, r5
   12484:	movt	r2, #1
   12488:	bl	11328 <error@plt>
   1248c:	mov	r5, #1
   12490:	b	12824 <__assert_fail@plt+0x1304>
   12494:	ldr	r5, [fp, #16]
   12498:	mov	r4, #1
   1249c:	b	12cb4 <__assert_fail@plt+0x1794>
   124a0:	ldrb	r0, [r5, #12]
   124a4:	add	sl, r9, #64	; 0x40
   124a8:	cmp	r0, #0
   124ac:	bne	12338 <__assert_fail@plt+0xe18>
   124b0:	mov	r0, #1
   124b4:	ldrh	r1, [r9, #56]	; 0x38
   124b8:	cmp	r1, #6
   124bc:	bhi	124d8 <__assert_fail@plt+0xfb8>
   124c0:	mov	r2, #1
   124c4:	mov	r3, #86	; 0x56
   124c8:	tst	r3, r2, lsl r1
   124cc:	ldrne	r1, [r5, #8]
   124d0:	cmpne	r1, #0
   124d4:	bne	12528 <__assert_fail@plt+0x1008>
   124d8:	str	r4, [sp, #40]	; 0x28
   124dc:	mov	r4, #1
   124e0:	cmp	r0, #0
   124e4:	beq	12748 <__assert_fail@plt+0x1228>
   124e8:	ldr	r0, [sp, #44]	; 0x2c
   124ec:	ldr	r6, [r0, #32]
   124f0:	ldrb	r0, [r5, #12]
   124f4:	cmp	r0, #0
   124f8:	beq	125cc <__assert_fail@plt+0x10ac>
   124fc:	ldr	r0, [sp, #32]
   12500:	cmn	r0, #1
   12504:	beq	127a4 <__assert_fail@plt+0x1284>
   12508:	ldr	r0, [sl, #16]
   1250c:	and	r0, r0, #61440	; 0xf000
   12510:	cmp	r0, #32768	; 0x8000
   12514:	beq	12630 <__assert_fail@plt+0x1110>
   12518:	cmp	r0, #16384	; 0x4000
   1251c:	bne	127a4 <__assert_fail@plt+0x1284>
   12520:	mov	r5, #18688	; 0x4900
   12524:	b	12634 <__assert_fail@plt+0x1114>
   12528:	ldrd	r2, [r1]
   1252c:	ldr	r6, [sl, #96]	; 0x60
   12530:	ldr	r5, [sl, #100]	; 0x64
   12534:	eor	r3, r5, r3
   12538:	ldr	r5, [fp, #16]
   1253c:	eor	r2, r6, r2
   12540:	orrs	r2, r2, r3
   12544:	bne	124d8 <__assert_fail@plt+0xfb8>
   12548:	ldrd	r2, [r1, #8]
   1254c:	ldr	r6, [sl]
   12550:	ldr	r1, [sl, #4]
   12554:	eor	r1, r1, r3
   12558:	eor	r2, r6, r2
   1255c:	orrs	r1, r2, r1
   12560:	bne	124d8 <__assert_fail@plt+0xfb8>
   12564:	movw	r8, #48503	; 0xbd77
   12568:	mov	r0, r4
   1256c:	movt	r8, #1
   12570:	mov	r1, r8
   12574:	bl	1122c <strcmp@plt>
   12578:	cmp	r0, #0
   1257c:	beq	12b0c <__assert_fail@plt+0x15ec>
   12580:	movw	r1, #46406	; 0xb546
   12584:	mov	r0, #0
   12588:	mov	r2, #5
   1258c:	movt	r1, #1
   12590:	bl	112a4 <dcgettext@plt>
   12594:	mov	r6, r0
   12598:	mov	r0, #0
   1259c:	mov	r1, #4
   125a0:	mov	r2, r4
   125a4:	bl	17db0 <__assert_fail@plt+0x6890>
   125a8:	mov	r5, r0
   125ac:	mov	r0, #1
   125b0:	mov	r1, #4
   125b4:	mov	r2, r8
   125b8:	bl	17db0 <__assert_fail@plt+0x6890>
   125bc:	mov	r3, r5
   125c0:	ldr	r5, [fp, #16]
   125c4:	str	r0, [sp]
   125c8:	b	12b34 <__assert_fail@plt+0x1614>
   125cc:	ldr	r2, [sp, #28]
   125d0:	ldr	r3, [sp, #24]
   125d4:	mov	r0, #256	; 0x100
   125d8:	mov	r1, r8
   125dc:	str	r0, [sp]
   125e0:	mov	r0, r6
   125e4:	bl	114a8 <fchownat@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	12624 <__assert_fail@plt+0x1104>
   125f0:	bl	113d0 <__errno_location@plt>
   125f4:	ldr	r0, [r0]
   125f8:	mov	r6, #0
   125fc:	cmp	r0, #95	; 0x5f
   12600:	bne	127cc <__assert_fail@plt+0x12ac>
   12604:	mov	r5, #0
   12608:	b	12828 <__assert_fail@plt+0x1308>
   1260c:	ldr	r0, [sp, #44]	; 0x2c
   12610:	mov	r4, #1
   12614:	mov	r1, r9
   12618:	mov	r2, #1
   1261c:	str	r4, [r9, #16]
   12620:	b	12cb0 <__assert_fail@plt+0x1790>
   12624:	mov	r5, #0
   12628:	mov	r6, #1
   1262c:	b	12828 <__assert_fail@plt+0x1308>
   12630:	mov	r5, #2304	; 0x900
   12634:	mov	r0, r6
   12638:	mov	r1, r8
   1263c:	mov	r2, r5
   12640:	bl	113b8 <openat64@plt>
   12644:	mov	r1, r0
   12648:	cmn	r0, #1
   1264c:	ble	12754 <__assert_fail@plt+0x1234>
   12650:	mov	r0, #3
   12654:	sub	r2, fp, #136	; 0x88
   12658:	str	r1, [sp, #36]	; 0x24
   1265c:	bl	112e0 <__fxstat64@plt>
   12660:	mov	r6, #6
   12664:	cmp	r0, #0
   12668:	bne	126f4 <__assert_fail@plt+0x11d4>
   1266c:	ldr	r0, [sp, #8]
   12670:	ldrd	r2, [sl, #96]	; 0x60
   12674:	mov	r6, #4
   12678:	ldrd	r0, [r0]
   1267c:	eor	r1, r3, r1
   12680:	eor	r0, r2, r0
   12684:	orrs	r0, r0, r1
   12688:	bne	126f4 <__assert_fail@plt+0x11d4>
   1268c:	ldrd	r0, [sl]
   12690:	ldr	r2, [fp, #-136]	; 0xffffff78
   12694:	ldr	r3, [fp, #-132]	; 0xffffff7c
   12698:	eor	r1, r1, r3
   1269c:	eor	r0, r0, r2
   126a0:	orrs	r0, r0, r1
   126a4:	bne	126f4 <__assert_fail@plt+0x11d4>
   126a8:	ldr	r1, [fp, #8]
   126ac:	mov	r6, #2
   126b0:	cmn	r1, #1
   126b4:	ldrne	r0, [fp, #-112]	; 0xffffff90
   126b8:	cmpne	r0, r1
   126bc:	bne	126f4 <__assert_fail@plt+0x11d4>
   126c0:	ldr	r0, [fp, #12]
   126c4:	cmn	r0, #1
   126c8:	ldrne	r0, [fp, #-108]	; 0xffffff94
   126cc:	ldrne	r1, [fp, #12]
   126d0:	cmpne	r0, r1
   126d4:	bne	126f4 <__assert_fail@plt+0x11d4>
   126d8:	ldr	r0, [sp, #36]	; 0x24
   126dc:	ldr	r1, [sp, #28]
   126e0:	ldr	r2, [sp, #24]
   126e4:	bl	113c4 <fchown@plt>
   126e8:	cmp	r0, #0
   126ec:	mov	r6, #6
   126f0:	beq	120dc <__assert_fail@plt+0xbbc>
   126f4:	str	r6, [sp, #20]
   126f8:	bl	113d0 <__errno_location@plt>
   126fc:	mov	r5, r0
   12700:	ldr	r6, [r0]
   12704:	ldr	r0, [sp, #36]	; 0x24
   12708:	bl	114e4 <close@plt>
   1270c:	ldr	r0, [sp, #20]
   12710:	str	r6, [r5]
   12714:	sub	r0, r0, #2
   12718:	cmp	r0, #4
   1271c:	bhi	12d64 <__assert_fail@plt+0x1844>
   12720:	add	r1, pc, #8
   12724:	mov	r5, #0
   12728:	mov	r6, #1
   1272c:	ldr	pc, [r1, r0, lsl #2]
   12730:	andeq	r2, r1, r8, lsr #16
   12734:	andeq	r2, r1, r4, asr #14
   12738:	andeq	r2, r1, r4, asr #14
   1273c:	andeq	r2, r1, r4, lsr #15
   12740:	andeq	r2, r1, ip, asr #15
   12744:	mov	r4, #0
   12748:	mov	r6, #1
   1274c:	mov	r5, #1
   12750:	b	12828 <__assert_fail@plt+0x1308>
   12754:	bl	113d0 <__errno_location@plt>
   12758:	ldr	r1, [r0]
   1275c:	cmp	r1, #13
   12760:	bne	127cc <__assert_fail@plt+0x12ac>
   12764:	ldr	r1, [sl, #16]
   12768:	and	r1, r1, #61440	; 0xf000
   1276c:	cmp	r1, #32768	; 0x8000
   12770:	bne	127a4 <__assert_fail@plt+0x1284>
   12774:	str	r0, [sp, #36]	; 0x24
   12778:	orr	r2, r5, #1
   1277c:	mov	r0, r6
   12780:	mov	r1, r8
   12784:	bl	113b8 <openat64@plt>
   12788:	mov	r1, r0
   1278c:	cmn	r0, #1
   12790:	bgt	12650 <__assert_fail@plt+0x1130>
   12794:	ldr	r0, [sp, #36]	; 0x24
   12798:	ldr	r0, [r0]
   1279c:	cmp	r0, #13
   127a0:	bne	127cc <__assert_fail@plt+0x12ac>
   127a4:	ldr	r0, [sp, #44]	; 0x2c
   127a8:	ldr	r2, [sp, #28]
   127ac:	ldr	r3, [sp, #24]
   127b0:	mov	r5, #0
   127b4:	mov	r1, r8
   127b8:	str	r5, [sp]
   127bc:	ldr	r0, [r0, #32]
   127c0:	bl	114a8 <fchownat@plt>
   127c4:	cmp	r0, #0
   127c8:	beq	12a74 <__assert_fail@plt+0x1554>
   127cc:	ldr	r0, [fp, #16]
   127d0:	mov	r5, #0
   127d4:	ldrb	r0, [r0, #13]
   127d8:	cmp	r0, #0
   127dc:	bne	12820 <__assert_fail@plt+0x1300>
   127e0:	bl	113d0 <__errno_location@plt>
   127e4:	ldr	r1, [sp, #12]
   127e8:	ldr	r4, [r0]
   127ec:	mov	r0, #0
   127f0:	mov	r2, #5
   127f4:	mov	r5, #0
   127f8:	bl	112a4 <dcgettext@plt>
   127fc:	ldr	r1, [sp, #40]	; 0x28
   12800:	mov	r6, r0
   12804:	mov	r0, #4
   12808:	bl	17e58 <__assert_fail@plt+0x6938>
   1280c:	mov	r3, r0
   12810:	mov	r0, #0
   12814:	mov	r1, r4
   12818:	mov	r2, r6
   1281c:	bl	11328 <error@plt>
   12820:	mov	r6, #1
   12824:	mov	r4, #0
   12828:	ldr	r0, [fp, #16]
   1282c:	ldr	r0, [r0]
   12830:	cmp	r0, #2
   12834:	beq	12c94 <__assert_fail@plt+0x1774>
   12838:	eor	r1, r4, #1
   1283c:	orrs	r1, r5, r1
   12840:	eorseq	r1, r6, #1
   12844:	beq	12878 <__assert_fail@plt+0x1358>
   12848:	cmp	r0, #0
   1284c:	bne	12c94 <__assert_fail@plt+0x1774>
   12850:	cmp	r6, #0
   12854:	mov	r5, #1
   12858:	mov	r0, #3
   1285c:	movwne	r5, #4
   12860:	cmp	r4, #0
   12864:	moveq	r5, r0
   12868:	cmp	sl, #0
   1286c:	beq	1293c <__assert_fail@plt+0x141c>
   12870:	mov	r6, r4
   12874:	b	128cc <__assert_fail@plt+0x13ac>
   12878:	ldr	r1, [sp, #28]
   1287c:	cmn	r1, #1
   12880:	beq	12894 <__assert_fail@plt+0x1374>
   12884:	ldr	r1, [sl, #24]
   12888:	ldr	r2, [sp, #28]
   1288c:	cmp	r1, r2
   12890:	bne	128b0 <__assert_fail@plt+0x1390>
   12894:	ldr	r1, [sp, #24]
   12898:	cmn	r1, #1
   1289c:	beq	12848 <__assert_fail@plt+0x1328>
   128a0:	ldr	r1, [sl, #28]
   128a4:	ldr	r2, [sp, #24]
   128a8:	cmp	r1, r2
   128ac:	beq	12848 <__assert_fail@plt+0x1328>
   128b0:	cmp	r6, #0
   128b4:	mov	r5, #1
   128b8:	mov	r0, #3
   128bc:	mov	r6, r4
   128c0:	movwne	r5, #2
   128c4:	cmp	r4, #0
   128c8:	moveq	r5, r0
   128cc:	ldr	r4, [sl, #24]
   128d0:	mov	r0, r4
   128d4:	bl	11238 <getpwuid@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	128e8 <__assert_fail@plt+0x13c8>
   128e0:	ldr	r0, [r0]
   128e4:	b	128f8 <__assert_fail@plt+0x13d8>
   128e8:	mov	r0, r4
   128ec:	mov	r1, #0
   128f0:	sub	r2, fp, #136	; 0x88
   128f4:	bl	16650 <__assert_fail@plt+0x5130>
   128f8:	bl	194d8 <__assert_fail@plt+0x7fb8>
   128fc:	ldr	r4, [sl, #28]
   12900:	str	r0, [sp, #36]	; 0x24
   12904:	mov	r0, r4
   12908:	bl	11508 <getgrgid@plt>
   1290c:	cmp	r0, #0
   12910:	beq	1291c <__assert_fail@plt+0x13fc>
   12914:	ldr	r0, [r0]
   12918:	b	1292c <__assert_fail@plt+0x140c>
   1291c:	mov	r0, r4
   12920:	mov	r1, #0
   12924:	sub	r2, fp, #136	; 0x88
   12928:	bl	16650 <__assert_fail@plt+0x5130>
   1292c:	mov	r4, r6
   12930:	bl	194d8 <__assert_fail@plt+0x7fb8>
   12934:	mov	sl, r0
   12938:	b	12948 <__assert_fail@plt+0x1428>
   1293c:	mov	r0, #0
   12940:	mov	sl, #0
   12944:	str	r0, [sp, #36]	; 0x24
   12948:	mov	r8, r4
   1294c:	cmp	r5, #1
   12950:	bne	12990 <__assert_fail@plt+0x1470>
   12954:	movw	r1, #46809	; 0xb6d9
   12958:	mov	r0, #0
   1295c:	mov	r2, #5
   12960:	movt	r1, #1
   12964:	bl	112a4 <dcgettext@plt>
   12968:	ldr	r1, [sp, #40]	; 0x28
   1296c:	mov	r4, r0
   12970:	mov	r0, #4
   12974:	bl	17e58 <__assert_fail@plt+0x6938>
   12978:	mov	r2, r0
   1297c:	mov	r0, #1
   12980:	mov	r1, r4
   12984:	bl	113f4 <__printf_chk@plt>
   12988:	mov	r4, r8
   1298c:	b	12c84 <__assert_fail@plt+0x1764>
   12990:	ldr	r0, [fp, #16]
   12994:	ldr	r6, [r0, #20]
   12998:	ldr	r4, [r0, #16]
   1299c:	mov	r0, r4
   129a0:	mov	r1, r6
   129a4:	bl	12d68 <__assert_fail@plt+0x1848>
   129a8:	ldr	r1, [sp, #36]	; 0x24
   129ac:	mov	r2, sl
   129b0:	mov	sl, r0
   129b4:	cmp	r4, #0
   129b8:	mov	r0, r4
   129bc:	str	r2, [sp, #20]
   129c0:	movne	r0, r1
   129c4:	cmp	r6, #0
   129c8:	mov	r1, r6
   129cc:	movne	r1, r2
   129d0:	bl	12d68 <__assert_fail@plt+0x1848>
   129d4:	cmp	r5, #4
   129d8:	beq	12a44 <__assert_fail@plt+0x1524>
   129dc:	cmp	r5, #3
   129e0:	beq	12a0c <__assert_fail@plt+0x14ec>
   129e4:	cmp	r5, #2
   129e8:	bne	12d64 <__assert_fail@plt+0x1844>
   129ec:	cmp	r4, #0
   129f0:	mov	r5, sl
   129f4:	str	r0, [sp, #16]
   129f8:	beq	12a7c <__assert_fail@plt+0x155c>
   129fc:	movw	r1, #46865	; 0xb711
   12a00:	mov	r0, #0
   12a04:	movt	r1, #1
   12a08:	b	12a30 <__assert_fail@plt+0x1510>
   12a0c:	cmp	r0, #0
   12a10:	beq	12a9c <__assert_fail@plt+0x157c>
   12a14:	cmp	r4, #0
   12a18:	mov	r5, sl
   12a1c:	str	r0, [sp, #16]
   12a20:	beq	12b70 <__assert_fail@plt+0x1650>
   12a24:	movw	r1, #46969	; 0xb779
   12a28:	mov	r0, #0
   12a2c:	movt	r1, #1
   12a30:	mov	r2, #5
   12a34:	bl	112a4 <dcgettext@plt>
   12a38:	mov	r6, r0
   12a3c:	mov	r4, r8
   12a40:	b	12c30 <__assert_fail@plt+0x1710>
   12a44:	cmp	r4, #0
   12a48:	str	r0, [sp, #16]
   12a4c:	beq	12aec <__assert_fail@plt+0x15cc>
   12a50:	movw	r1, #47171	; 0xb843
   12a54:	mov	r0, #0
   12a58:	mov	r2, #5
   12a5c:	movt	r1, #1
   12a60:	bl	112a4 <dcgettext@plt>
   12a64:	mov	r6, r0
   12a68:	mov	r4, r8
   12a6c:	mov	r5, sl
   12a70:	b	12c30 <__assert_fail@plt+0x1710>
   12a74:	mov	r6, #1
   12a78:	b	12828 <__assert_fail@plt+0x1308>
   12a7c:	ldr	sl, [sp, #20]
   12a80:	cmp	r6, #0
   12a84:	mov	r4, r8
   12a88:	mov	r0, #0
   12a8c:	beq	12c10 <__assert_fail@plt+0x16f0>
   12a90:	movw	r1, #46904	; 0xb738
   12a94:	movt	r1, #1
   12a98:	b	12c40 <__assert_fail@plt+0x1720>
   12a9c:	movw	r1, #47061	; 0xb7d5
   12aa0:	movw	r0, #47135	; 0xb81f
   12aa4:	cmp	r6, #0
   12aa8:	mov	r2, #5
   12aac:	movt	r1, #1
   12ab0:	movt	r0, #1
   12ab4:	movne	r1, r0
   12ab8:	movw	r0, #47095	; 0xb7f7
   12abc:	cmp	r4, #0
   12ac0:	movt	r0, #1
   12ac4:	movne	r1, r0
   12ac8:	mov	r0, #0
   12acc:	bl	112a4 <dcgettext@plt>
   12ad0:	mov	r6, r0
   12ad4:	mov	r0, #0
   12ad8:	bl	12efc <__assert_fail@plt+0x19dc>
   12adc:	str	sl, [sp, #16]
   12ae0:	mov	r5, #0
   12ae4:	mov	r4, r8
   12ae8:	b	12c30 <__assert_fail@plt+0x1710>
   12aec:	cmp	r6, #0
   12af0:	mov	r4, r8
   12af4:	mov	r5, sl
   12af8:	mov	r0, #0
   12afc:	beq	12c1c <__assert_fail@plt+0x16fc>
   12b00:	movw	r1, #47203	; 0xb863
   12b04:	movt	r1, #1
   12b08:	b	12c24 <__assert_fail@plt+0x1704>
   12b0c:	movw	r1, #46361	; 0xb519
   12b10:	mov	r0, #0
   12b14:	mov	r2, #5
   12b18:	movt	r1, #1
   12b1c:	bl	112a4 <dcgettext@plt>
   12b20:	mov	r6, r0
   12b24:	mov	r0, #4
   12b28:	mov	r1, r4
   12b2c:	bl	17e58 <__assert_fail@plt+0x6938>
   12b30:	mov	r3, r0
   12b34:	mov	r0, #0
   12b38:	mov	r1, #0
   12b3c:	mov	r2, r6
   12b40:	bl	11328 <error@plt>
   12b44:	movw	r1, #46464	; 0xb580
   12b48:	mov	r0, #0
   12b4c:	mov	r2, #5
   12b50:	mov	r4, #0
   12b54:	movt	r1, #1
   12b58:	bl	112a4 <dcgettext@plt>
   12b5c:	mov	r2, r0
   12b60:	mov	r0, #0
   12b64:	mov	r1, #0
   12b68:	bl	11328 <error@plt>
   12b6c:	b	12cb4 <__assert_fail@plt+0x1794>
   12b70:	ldr	sl, [sp, #20]
   12b74:	cmp	r6, #0
   12b78:	mov	r4, r8
   12b7c:	mov	r0, #0
   12b80:	beq	12c38 <__assert_fail@plt+0x1718>
   12b84:	movw	r1, #47017	; 0xb7a9
   12b88:	movt	r1, #1
   12b8c:	b	12c40 <__assert_fail@plt+0x1720>
   12b90:	movw	r1, #46361	; 0xb519
   12b94:	mov	r0, #0
   12b98:	mov	r2, #5
   12b9c:	movt	r1, #1
   12ba0:	bl	112a4 <dcgettext@plt>
   12ba4:	mov	r6, r0
   12ba8:	mov	r0, #4
   12bac:	mov	r1, r4
   12bb0:	bl	17e58 <__assert_fail@plt+0x6938>
   12bb4:	mov	r3, r0
   12bb8:	mov	r0, #0
   12bbc:	mov	r1, #0
   12bc0:	mov	r2, r6
   12bc4:	bl	11328 <error@plt>
   12bc8:	movw	r1, #46464	; 0xb580
   12bcc:	mov	r0, #0
   12bd0:	mov	r2, #5
   12bd4:	movt	r1, #1
   12bd8:	bl	112a4 <dcgettext@plt>
   12bdc:	mov	r2, r0
   12be0:	mov	r0, #0
   12be4:	mov	r1, #0
   12be8:	bl	11328 <error@plt>
   12bec:	ldr	r4, [sp, #44]	; 0x2c
   12bf0:	mov	r1, r9
   12bf4:	mov	r2, #4
   12bf8:	mov	r0, r4
   12bfc:	bl	14ebc <__assert_fail@plt+0x399c>
   12c00:	mov	r0, r4
   12c04:	mov	r4, #0
   12c08:	bl	1383c <__assert_fail@plt+0x231c>
   12c0c:	b	12cb4 <__assert_fail@plt+0x1794>
   12c10:	movw	r1, #46939	; 0xb75b
   12c14:	movt	r1, #1
   12c18:	b	12c40 <__assert_fail@plt+0x1720>
   12c1c:	movw	r1, #47231	; 0xb87f
   12c20:	movt	r1, #1
   12c24:	mov	r2, #5
   12c28:	bl	112a4 <dcgettext@plt>
   12c2c:	mov	r6, r0
   12c30:	ldr	sl, [sp, #20]
   12c34:	b	12c4c <__assert_fail@plt+0x172c>
   12c38:	movw	r1, #47061	; 0xb7d5
   12c3c:	movt	r1, #1
   12c40:	mov	r2, #5
   12c44:	bl	112a4 <dcgettext@plt>
   12c48:	mov	r6, r0
   12c4c:	ldr	r1, [sp, #40]	; 0x28
   12c50:	mov	r0, #4
   12c54:	bl	17e58 <__assert_fail@plt+0x6938>
   12c58:	mov	r1, r6
   12c5c:	ldr	r6, [sp, #16]
   12c60:	mov	r2, r0
   12c64:	mov	r0, #1
   12c68:	str	r5, [sp]
   12c6c:	mov	r3, r6
   12c70:	bl	113f4 <__printf_chk@plt>
   12c74:	mov	r0, r6
   12c78:	bl	12efc <__assert_fail@plt+0x19dc>
   12c7c:	mov	r0, r5
   12c80:	bl	12efc <__assert_fail@plt+0x19dc>
   12c84:	ldr	r0, [sp, #36]	; 0x24
   12c88:	bl	12efc <__assert_fail@plt+0x19dc>
   12c8c:	mov	r0, sl
   12c90:	bl	12efc <__assert_fail@plt+0x19dc>
   12c94:	ldr	r5, [fp, #16]
   12c98:	ldrb	r0, [r5, #4]
   12c9c:	cmp	r0, #0
   12ca0:	bne	12cb4 <__assert_fail@plt+0x1794>
   12ca4:	ldr	r0, [sp, #44]	; 0x2c
   12ca8:	mov	r1, r9
   12cac:	mov	r2, #4
   12cb0:	bl	14ebc <__assert_fail@plt+0x399c>
   12cb4:	ldr	r0, [sp, #44]	; 0x2c
   12cb8:	and	r7, r7, r4
   12cbc:	bl	1383c <__assert_fail@plt+0x231c>
   12cc0:	mov	r9, r0
   12cc4:	cmp	r0, #0
   12cc8:	bne	120f4 <__assert_fail@plt+0xbd4>
   12ccc:	bl	113d0 <__errno_location@plt>
   12cd0:	ldr	r4, [r0]
   12cd4:	mov	r5, r0
   12cd8:	cmp	r4, #0
   12cdc:	beq	12d1c <__assert_fail@plt+0x17fc>
   12ce0:	ldr	r0, [fp, #16]
   12ce4:	mov	r7, #0
   12ce8:	ldrb	r0, [r0, #13]
   12cec:	cmp	r0, #0
   12cf0:	bne	12d1c <__assert_fail@plt+0x17fc>
   12cf4:	movw	r1, #46328	; 0xb4f8
   12cf8:	mov	r0, #0
   12cfc:	mov	r2, #5
   12d00:	mov	r7, #0
   12d04:	movt	r1, #1
   12d08:	bl	112a4 <dcgettext@plt>
   12d0c:	mov	r2, r0
   12d10:	mov	r0, #0
   12d14:	mov	r1, r4
   12d18:	bl	11328 <error@plt>
   12d1c:	ldr	r0, [sp, #44]	; 0x2c
   12d20:	bl	1369c <__assert_fail@plt+0x217c>
   12d24:	cmp	r0, #0
   12d28:	beq	12d58 <__assert_fail@plt+0x1838>
   12d2c:	ldr	r4, [r5]
   12d30:	movw	r1, #46344	; 0xb508
   12d34:	mov	r0, #0
   12d38:	mov	r2, #5
   12d3c:	mov	r7, #0
   12d40:	movt	r1, #1
   12d44:	bl	112a4 <dcgettext@plt>
   12d48:	mov	r2, r0
   12d4c:	mov	r0, #0
   12d50:	mov	r1, r4
   12d54:	bl	11328 <error@plt>
   12d58:	mov	r0, r7
   12d5c:	sub	sp, fp, #28
   12d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d64:	bl	114d8 <abort@plt>
   12d68:	push	{r4, r5, r6, sl, fp, lr}
   12d6c:	add	fp, sp, #16
   12d70:	mov	r4, r1
   12d74:	cmp	r0, #0
   12d78:	beq	12dcc <__assert_fail@plt+0x18ac>
   12d7c:	mov	r5, r0
   12d80:	cmp	r4, #0
   12d84:	beq	12de8 <__assert_fail@plt+0x18c8>
   12d88:	mov	r0, r5
   12d8c:	bl	113a0 <strlen@plt>
   12d90:	mov	r6, r0
   12d94:	mov	r0, r4
   12d98:	bl	113a0 <strlen@plt>
   12d9c:	add	r0, r6, r0
   12da0:	add	r0, r0, #2
   12da4:	bl	18fb8 <__assert_fail@plt+0x7a98>
   12da8:	mov	r1, r5
   12dac:	mov	r6, r0
   12db0:	bl	11298 <stpcpy@plt>
   12db4:	mov	r1, #58	; 0x3a
   12db8:	strh	r1, [r0], #1
   12dbc:	mov	r1, r4
   12dc0:	bl	11298 <stpcpy@plt>
   12dc4:	mov	r0, r6
   12dc8:	pop	{r4, r5, r6, sl, fp, pc}
   12dcc:	cmp	r4, #0
   12dd0:	moveq	r6, #0
   12dd4:	moveq	r0, r6
   12dd8:	popeq	{r4, r5, r6, sl, fp, pc}
   12ddc:	mov	r0, r4
   12de0:	bl	194d8 <__assert_fail@plt+0x7fb8>
   12de4:	pop	{r4, r5, r6, sl, fp, pc}
   12de8:	mov	r0, r5
   12dec:	bl	194d8 <__assert_fail@plt+0x7fb8>
   12df0:	pop	{r4, r5, r6, sl, fp, pc}
   12df4:	movw	r1, #53680	; 0xd1b0
   12df8:	movt	r1, #2
   12dfc:	str	r0, [r1]
   12e00:	bx	lr
   12e04:	movw	r1, #53684	; 0xd1b4
   12e08:	movt	r1, #2
   12e0c:	strb	r0, [r1]
   12e10:	bx	lr
   12e14:	push	{r4, r5, r6, sl, fp, lr}
   12e18:	add	fp, sp, #16
   12e1c:	sub	sp, sp, #8
   12e20:	movw	r0, #53644	; 0xd18c
   12e24:	movt	r0, #2
   12e28:	ldr	r0, [r0]
   12e2c:	bl	19ed4 <__assert_fail@plt+0x89b4>
   12e30:	cmp	r0, #0
   12e34:	beq	12e5c <__assert_fail@plt+0x193c>
   12e38:	movw	r0, #53684	; 0xd1b4
   12e3c:	movt	r0, #2
   12e40:	ldrb	r0, [r0]
   12e44:	cmp	r0, #0
   12e48:	beq	12e7c <__assert_fail@plt+0x195c>
   12e4c:	bl	113d0 <__errno_location@plt>
   12e50:	ldr	r0, [r0]
   12e54:	cmp	r0, #32
   12e58:	bne	12e7c <__assert_fail@plt+0x195c>
   12e5c:	movw	r0, #53640	; 0xd188
   12e60:	movt	r0, #2
   12e64:	ldr	r0, [r0]
   12e68:	bl	19ed4 <__assert_fail@plt+0x89b4>
   12e6c:	cmp	r0, #0
   12e70:	subeq	sp, fp, #16
   12e74:	popeq	{r4, r5, r6, sl, fp, pc}
   12e78:	b	12eec <__assert_fail@plt+0x19cc>
   12e7c:	movw	r1, #47272	; 0xb8a8
   12e80:	mov	r0, #0
   12e84:	mov	r2, #5
   12e88:	movt	r1, #1
   12e8c:	bl	112a4 <dcgettext@plt>
   12e90:	mov	r4, r0
   12e94:	movw	r0, #53680	; 0xd1b0
   12e98:	movt	r0, #2
   12e9c:	ldr	r6, [r0]
   12ea0:	bl	113d0 <__errno_location@plt>
   12ea4:	ldr	r5, [r0]
   12ea8:	cmp	r6, #0
   12eac:	bne	12ec8 <__assert_fail@plt+0x19a8>
   12eb0:	movw	r2, #45488	; 0xb1b0
   12eb4:	mov	r0, #0
   12eb8:	mov	r1, r5
   12ebc:	mov	r3, r4
   12ec0:	movt	r2, #1
   12ec4:	b	12ee8 <__assert_fail@plt+0x19c8>
   12ec8:	mov	r0, r6
   12ecc:	bl	17ff8 <__assert_fail@plt+0x6ad8>
   12ed0:	movw	r2, #45484	; 0xb1ac
   12ed4:	mov	r3, r0
   12ed8:	str	r4, [sp]
   12edc:	mov	r0, #0
   12ee0:	mov	r1, r5
   12ee4:	movt	r2, #1
   12ee8:	bl	11328 <error@plt>
   12eec:	movw	r0, #53556	; 0xd134
   12ef0:	movt	r0, #2
   12ef4:	ldr	r0, [r0]
   12ef8:	bl	11268 <_exit@plt>
   12efc:	push	{r4, r5, r6, sl, fp, lr}
   12f00:	add	fp, sp, #16
   12f04:	mov	r4, r0
   12f08:	bl	113d0 <__errno_location@plt>
   12f0c:	ldr	r6, [r0]
   12f10:	mov	r5, r0
   12f14:	mov	r0, r4
   12f18:	bl	1125c <free@plt>
   12f1c:	str	r6, [r5]
   12f20:	pop	{r4, r5, r6, sl, fp, pc}
   12f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f28:	add	fp, sp, #28
   12f2c:	sub	sp, sp, #28
   12f30:	cmp	r1, #4096	; 0x1000
   12f34:	bcs	12f50 <__assert_fail@plt+0x1a30>
   12f38:	mov	r7, r0
   12f3c:	and	r0, r1, #516	; 0x204
   12f40:	mov	r5, r1
   12f44:	cmp	r0, #516	; 0x204
   12f48:	tstne	r5, #18
   12f4c:	bne	12f6c <__assert_fail@plt+0x1a4c>
   12f50:	bl	113d0 <__errno_location@plt>
   12f54:	mov	r1, #22
   12f58:	mov	r4, #0
   12f5c:	str	r1, [r0]
   12f60:	mov	r0, r4
   12f64:	sub	sp, fp, #28
   12f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f6c:	mov	r0, #1
   12f70:	mov	r1, #96	; 0x60
   12f74:	mov	sl, r2
   12f78:	bl	19dfc <__assert_fail@plt+0x88dc>
   12f7c:	cmp	r0, #0
   12f80:	beq	13370 <__assert_fail@plt+0x1e50>
   12f84:	mov	r4, r0
   12f88:	mvn	r0, #99	; 0x63
   12f8c:	tst	r5, #2
   12f90:	mov	r1, r5
   12f94:	str	r0, [r4, #32]
   12f98:	bic	r0, r5, #516	; 0x204
   12f9c:	str	sl, [r4, #44]	; 0x2c
   12fa0:	str	r4, [sp, #24]
   12fa4:	orrne	r1, r0, #4
   12fa8:	str	r1, [r4, #48]	; 0x30
   12fac:	ldr	r0, [r7]
   12fb0:	cmp	r0, #0
   12fb4:	beq	12fec <__assert_fail@plt+0x1acc>
   12fb8:	add	r6, r7, #4
   12fbc:	mov	r4, #0
   12fc0:	bl	113a0 <strlen@plt>
   12fc4:	cmp	r0, r4
   12fc8:	movhi	r4, r0
   12fcc:	ldr	r0, [r6], #4
   12fd0:	cmp	r0, #0
   12fd4:	bne	12fc0 <__assert_fail@plt+0x1aa0>
   12fd8:	add	r0, r4, #1
   12fdc:	ldr	r4, [sp, #24]
   12fe0:	cmp	r0, #4096	; 0x1000
   12fe4:	movls	r0, #4096	; 0x1000
   12fe8:	b	12ff0 <__assert_fail@plt+0x1ad0>
   12fec:	mov	r0, #4096	; 0x1000
   12ff0:	ldr	r1, [r4, #36]	; 0x24
   12ff4:	add	r0, r0, #256	; 0x100
   12ff8:	adds	r1, r0, r1
   12ffc:	bcc	13020 <__assert_fail@plt+0x1b00>
   13000:	ldr	r0, [r4, #24]
   13004:	bl	12efc <__assert_fail@plt+0x19dc>
   13008:	mov	r0, #0
   1300c:	str	r0, [r4, #24]
   13010:	bl	113d0 <__errno_location@plt>
   13014:	mov	r1, #36	; 0x24
   13018:	str	r1, [r0]
   1301c:	b	13368 <__assert_fail@plt+0x1e48>
   13020:	str	r1, [r4, #36]	; 0x24
   13024:	ldr	r0, [r4, #24]
   13028:	bl	19e80 <__assert_fail@plt+0x8960>
   1302c:	cmp	r0, #0
   13030:	beq	13094 <__assert_fail@plt+0x1b74>
   13034:	str	r0, [r4, #24]
   13038:	ldr	r0, [r7]
   1303c:	cmp	r0, #0
   13040:	beq	130a8 <__assert_fail@plt+0x1b88>
   13044:	mov	r0, #176	; 0xb0
   13048:	bl	19e50 <__assert_fail@plt+0x8930>
   1304c:	cmp	r0, #0
   13050:	beq	13360 <__assert_fail@plt+0x1e40>
   13054:	ldr	r1, [r4, #24]
   13058:	mov	r8, r0
   1305c:	mov	r0, #0
   13060:	mov	r2, #196608	; 0x30000
   13064:	strb	r0, [r8, #168]	; 0xa8
   13068:	str	r2, [r8, #58]	; 0x3a
   1306c:	mvn	r2, #0
   13070:	str	r0, [r8, #12]
   13074:	str	r0, [r8, #16]
   13078:	str	r0, [r8, #20]
   1307c:	str	r4, [r8, #44]	; 0x2c
   13080:	str	r2, [r8, #48]	; 0x30
   13084:	str	r0, [r8, #52]	; 0x34
   13088:	str	r1, [r8, #28]
   1308c:	str	r0, [r8, #32]
   13090:	b	130ac <__assert_fail@plt+0x1b8c>
   13094:	ldr	r0, [r4, #24]
   13098:	bl	12efc <__assert_fail@plt+0x19dc>
   1309c:	mov	r0, #0
   130a0:	str	r0, [r4, #24]
   130a4:	b	13368 <__assert_fail@plt+0x1e48>
   130a8:	mov	r8, #0
   130ac:	cmp	sl, #0
   130b0:	ldrbne	r0, [r4, #49]	; 0x31
   130b4:	ubfxne	r0, r0, #2, #1
   130b8:	ldr	r4, [r7]
   130bc:	moveq	r0, #1
   130c0:	cmp	r4, #0
   130c4:	beq	13230 <__assert_fail@plt+0x1d10>
   130c8:	eor	r0, r0, #1
   130cc:	and	r1, r5, #2048	; 0x800
   130d0:	mov	r9, #0
   130d4:	mov	r6, #0
   130d8:	str	r8, [sp, #16]
   130dc:	str	sl, [sp, #8]
   130e0:	str	r0, [sp, #12]
   130e4:	mov	r0, #0
   130e8:	str	r1, [sp, #20]
   130ec:	str	r0, [sp, #4]
   130f0:	mov	r0, r4
   130f4:	bl	113a0 <strlen@plt>
   130f8:	mov	r8, r0
   130fc:	ldr	r0, [sp, #20]
   13100:	cmp	r0, #0
   13104:	bne	1313c <__assert_fail@plt+0x1c1c>
   13108:	cmp	r8, #3
   1310c:	bcc	1313c <__assert_fail@plt+0x1c1c>
   13110:	add	r0, r4, r8
   13114:	ldrb	r0, [r0, #-1]
   13118:	cmp	r0, #47	; 0x2f
   1311c:	bne	1313c <__assert_fail@plt+0x1c1c>
   13120:	sub	r0, r4, #2
   13124:	ldrb	r1, [r0, r8]
   13128:	cmp	r1, #47	; 0x2f
   1312c:	bne	1313c <__assert_fail@plt+0x1c1c>
   13130:	sub	r8, r8, #1
   13134:	cmp	r8, #1
   13138:	bhi	13124 <__assert_fail@plt+0x1c04>
   1313c:	add	r0, r8, #176	; 0xb0
   13140:	bic	r0, r0, #7
   13144:	bl	19e50 <__assert_fail@plt+0x8930>
   13148:	cmp	r0, #0
   1314c:	beq	1323c <__assert_fail@plt+0x1d1c>
   13150:	add	sl, r0, #168	; 0xa8
   13154:	mov	r5, r0
   13158:	mov	r1, r4
   1315c:	mov	r2, r8
   13160:	mov	r0, sl
   13164:	bl	11274 <memcpy@plt>
   13168:	ldr	r0, [sp, #24]
   1316c:	mov	r4, #0
   13170:	mov	r2, #196608	; 0x30000
   13174:	strb	r4, [sl, r8]
   13178:	str	r2, [r5, #58]	; 0x3a
   1317c:	add	r2, r5, #44	; 0x2c
   13180:	ldr	r1, [r0, #24]
   13184:	stm	r2, {r0, r4, r8}
   13188:	ldr	r8, [sp, #16]
   1318c:	ldr	r2, [sp, #12]
   13190:	str	r8, [r5, #4]
   13194:	str	r4, [r5, #12]
   13198:	str	r4, [r5, #16]
   1319c:	str	r4, [r5, #20]
   131a0:	str	sl, [r5, #24]
   131a4:	str	r1, [r5, #28]
   131a8:	clz	r1, r9
   131ac:	str	r4, [r5, #32]
   131b0:	lsr	r1, r1, #5
   131b4:	orrs	r1, r2, r1
   131b8:	bne	131d0 <__assert_fail@plt+0x1cb0>
   131bc:	mov	r0, #2
   131c0:	str	r0, [r5, #112]	; 0x70
   131c4:	str	r4, [r5, #116]	; 0x74
   131c8:	mov	r0, #11
   131cc:	b	131dc <__assert_fail@plt+0x1cbc>
   131d0:	mov	r1, r5
   131d4:	mov	r2, #0
   131d8:	bl	13400 <__assert_fail@plt+0x1ee0>
   131dc:	ldr	sl, [sp, #8]
   131e0:	strh	r0, [r5, #56]	; 0x38
   131e4:	cmp	sl, #0
   131e8:	beq	131f8 <__assert_fail@plt+0x1cd8>
   131ec:	str	r9, [r5, #8]
   131f0:	mov	r9, r5
   131f4:	b	13210 <__assert_fail@plt+0x1cf0>
   131f8:	cmp	r9, #0
   131fc:	str	r4, [r5, #8]
   13200:	beq	13224 <__assert_fail@plt+0x1d04>
   13204:	ldr	r0, [sp, #4]
   13208:	str	r5, [sp, #4]
   1320c:	str	r5, [r0, #8]
   13210:	ldr	r4, [r7, #4]!
   13214:	add	r6, r6, #1
   13218:	cmp	r4, #0
   1321c:	bne	130f0 <__assert_fail@plt+0x1bd0>
   13220:	b	1324c <__assert_fail@plt+0x1d2c>
   13224:	mov	r0, r5
   13228:	str	r5, [sp, #4]
   1322c:	b	131f0 <__assert_fail@plt+0x1cd0>
   13230:	ldr	r4, [sp, #24]
   13234:	mov	r9, #0
   13238:	b	1327c <__assert_fail@plt+0x1d5c>
   1323c:	ldr	r8, [sp, #16]
   13240:	cmp	r9, #0
   13244:	bne	1332c <__assert_fail@plt+0x1e0c>
   13248:	b	13354 <__assert_fail@plt+0x1e34>
   1324c:	cmp	sl, #0
   13250:	beq	13278 <__assert_fail@plt+0x1d58>
   13254:	ldr	r4, [sp, #24]
   13258:	cmp	r6, #2
   1325c:	bcc	1327c <__assert_fail@plt+0x1d5c>
   13260:	mov	r0, r4
   13264:	mov	r1, r9
   13268:	mov	r2, r6
   1326c:	bl	13598 <__assert_fail@plt+0x2078>
   13270:	mov	r9, r0
   13274:	b	1327c <__assert_fail@plt+0x1d5c>
   13278:	ldr	r4, [sp, #24]
   1327c:	mov	r0, #176	; 0xb0
   13280:	bl	19e50 <__assert_fail@plt+0x8930>
   13284:	cmp	r0, #0
   13288:	beq	1331c <__assert_fail@plt+0x1dfc>
   1328c:	ldr	r2, [r4, #24]
   13290:	mov	r1, #0
   13294:	mov	r3, #196608	; 0x30000
   13298:	str	r0, [r4]
   1329c:	str	r1, [r0, #52]	; 0x34
   132a0:	strb	r1, [r0, #168]	; 0xa8
   132a4:	str	r4, [r0, #44]	; 0x2c
   132a8:	str	r3, [r0, #58]	; 0x3a
   132ac:	str	r2, [r0, #28]
   132b0:	mov	r2, #9
   132b4:	str	r1, [r0, #32]
   132b8:	strh	r2, [r0, #56]	; 0x38
   132bc:	str	r9, [r0, #8]
   132c0:	str	r1, [r0, #12]
   132c4:	str	r1, [r0, #16]
   132c8:	str	r1, [r0, #20]
   132cc:	mov	r1, #1
   132d0:	str	r1, [r0, #48]	; 0x30
   132d4:	ldrh	r0, [r4, #48]	; 0x30
   132d8:	movw	r1, #258	; 0x102
   132dc:	tst	r0, r1
   132e0:	beq	13378 <__assert_fail@plt+0x1e58>
   132e4:	movw	r0, #12028	; 0x2efc
   132e8:	movw	r2, #20676	; 0x50c4
   132ec:	movw	r3, #20708	; 0x50e4
   132f0:	mov	r1, #0
   132f4:	movt	r0, #1
   132f8:	movt	r2, #1
   132fc:	movt	r3, #1
   13300:	str	r0, [sp]
   13304:	mov	r0, #31
   13308:	bl	15758 <__assert_fail@plt+0x4238>
   1330c:	cmp	r0, #0
   13310:	str	r0, [r4, #56]	; 0x38
   13314:	bne	13390 <__assert_fail@plt+0x1e70>
   13318:	b	13324 <__assert_fail@plt+0x1e04>
   1331c:	mov	r0, #0
   13320:	str	r0, [r4]
   13324:	cmp	r9, #0
   13328:	beq	13354 <__assert_fail@plt+0x1e34>
   1332c:	ldrd	r4, [r9, #8]
   13330:	cmp	r5, #0
   13334:	beq	13340 <__assert_fail@plt+0x1e20>
   13338:	mov	r0, r5
   1333c:	bl	114fc <closedir@plt>
   13340:	mov	r0, r9
   13344:	bl	12efc <__assert_fail@plt+0x19dc>
   13348:	cmp	r4, #0
   1334c:	mov	r9, r4
   13350:	bne	1332c <__assert_fail@plt+0x1e0c>
   13354:	mov	r0, r8
   13358:	bl	12efc <__assert_fail@plt+0x19dc>
   1335c:	ldr	r4, [sp, #24]
   13360:	ldr	r0, [r4, #24]
   13364:	bl	12efc <__assert_fail@plt+0x19dc>
   13368:	mov	r0, r4
   1336c:	bl	12efc <__assert_fail@plt+0x19dc>
   13370:	mov	r4, #0
   13374:	b	12f60 <__assert_fail@plt+0x1a40>
   13378:	mov	r0, #32
   1337c:	bl	19e50 <__assert_fail@plt+0x8930>
   13380:	cmp	r0, #0
   13384:	str	r0, [r4, #56]	; 0x38
   13388:	beq	13324 <__assert_fail@plt+0x1e04>
   1338c:	bl	19f58 <__assert_fail@plt+0x8a38>
   13390:	ldr	r4, [sp, #24]
   13394:	ldr	r0, [r4, #48]	; 0x30
   13398:	tst	r0, #516	; 0x204
   1339c:	bne	133f0 <__assert_fail@plt+0x1ed0>
   133a0:	mov	r1, #32768	; 0x8000
   133a4:	tst	r0, #512	; 0x200
   133a8:	and	r1, r1, r0, lsl #11
   133ac:	orr	r1, r1, #18688	; 0x4900
   133b0:	orr	r2, r1, #524288	; 0x80000
   133b4:	bne	133cc <__assert_fail@plt+0x1eac>
   133b8:	movw	r0, #47285	; 0xb8b5
   133bc:	mov	r1, r2
   133c0:	movt	r0, #1
   133c4:	bl	1a2c8 <__assert_fail@plt+0x8da8>
   133c8:	b	133dc <__assert_fail@plt+0x1ebc>
   133cc:	ldr	r0, [r4, #32]
   133d0:	movw	r1, #47285	; 0xb8b5
   133d4:	movt	r1, #1
   133d8:	bl	166ac <__assert_fail@plt+0x518c>
   133dc:	str	r0, [r4, #28]
   133e0:	cmn	r0, #1
   133e4:	ldrle	r0, [r4, #48]	; 0x30
   133e8:	orrle	r0, r0, #4
   133ec:	strle	r0, [r4, #48]	; 0x30
   133f0:	add	r0, r4, #60	; 0x3c
   133f4:	mvn	r1, #0
   133f8:	bl	16580 <__assert_fail@plt+0x5060>
   133fc:	b	12f60 <__assert_fail@plt+0x1a40>
   13400:	push	{r4, r5, r6, sl, fp, lr}
   13404:	add	fp, sp, #16
   13408:	sub	sp, sp, #8
   1340c:	mov	r4, r1
   13410:	ldr	r1, [r0, #48]	; 0x30
   13414:	ldr	r3, [r4, #48]	; 0x30
   13418:	add	r5, r4, #64	; 0x40
   1341c:	cmp	r3, #0
   13420:	andeq	r3, r1, #1
   13424:	orreq	r2, r3, r2
   13428:	cmp	r2, #0
   1342c:	andseq	r1, r1, #2
   13430:	beq	1348c <__assert_fail@plt+0x1f6c>
   13434:	ldr	r1, [r4, #24]
   13438:	mov	r0, #3
   1343c:	mov	r2, r5
   13440:	bl	114c0 <__xstat64@plt>
   13444:	cmp	r0, #0
   13448:	beq	1350c <__assert_fail@plt+0x1fec>
   1344c:	bl	113d0 <__errno_location@plt>
   13450:	mov	r6, r0
   13454:	ldr	r0, [r0]
   13458:	cmp	r0, #2
   1345c:	bne	134bc <__assert_fail@plt+0x1f9c>
   13460:	ldr	r1, [r4, #24]
   13464:	mov	r0, #3
   13468:	mov	r2, r5
   1346c:	bl	114f0 <__lxstat64@plt>
   13470:	cmp	r0, #0
   13474:	bne	134b8 <__assert_fail@plt+0x1f98>
   13478:	mov	r0, #0
   1347c:	str	r0, [r6]
   13480:	mov	r0, #13
   13484:	sub	sp, fp, #16
   13488:	pop	{r4, r5, r6, sl, fp, pc}
   1348c:	ldr	r1, [r0, #32]
   13490:	ldr	r2, [r4, #24]
   13494:	mov	r0, #256	; 0x100
   13498:	mov	r3, r5
   1349c:	str	r0, [sp]
   134a0:	mov	r0, #3
   134a4:	bl	112c8 <__fxstatat64@plt>
   134a8:	cmp	r0, #0
   134ac:	beq	1350c <__assert_fail@plt+0x1fec>
   134b0:	bl	113d0 <__errno_location@plt>
   134b4:	mov	r6, r0
   134b8:	ldr	r0, [r6]
   134bc:	vmov.i32	q8, #0	; 0x00000000
   134c0:	add	r1, r5, #80	; 0x50
   134c4:	str	r0, [r4, #32]
   134c8:	mov	r0, #0
   134cc:	vst1.64	{d16-d17}, [r1]
   134d0:	add	r1, r5, #64	; 0x40
   134d4:	str	r0, [r5, #96]	; 0x60
   134d8:	vst1.64	{d16-d17}, [r1]
   134dc:	add	r1, r5, #48	; 0x30
   134e0:	vst1.64	{d16-d17}, [r1]
   134e4:	add	r1, r5, #32
   134e8:	vst1.64	{d16-d17}, [r1]
   134ec:	add	r1, r5, #16
   134f0:	vst1.64	{d16-d17}, [r1]
   134f4:	mov	r1, #100	; 0x64
   134f8:	vst1.64	{d16-d17}, [r5], r1
   134fc:	str	r0, [r5]
   13500:	mov	r0, #10
   13504:	sub	sp, fp, #16
   13508:	pop	{r4, r5, r6, sl, fp, pc}
   1350c:	ldr	r0, [r4, #80]	; 0x50
   13510:	and	r0, r0, #61440	; 0xf000
   13514:	cmp	r0, #40960	; 0xa000
   13518:	beq	13574 <__assert_fail@plt+0x2054>
   1351c:	cmp	r0, #32768	; 0x8000
   13520:	moveq	r0, #8
   13524:	subeq	sp, fp, #16
   13528:	popeq	{r4, r5, r6, sl, fp, pc}
   1352c:	cmp	r0, #16384	; 0x4000
   13530:	bne	13568 <__assert_fail@plt+0x2048>
   13534:	ldrb	r1, [r4, #168]	; 0xa8
   13538:	mov	r0, #1
   1353c:	cmp	r1, #46	; 0x2e
   13540:	bne	13560 <__assert_fail@plt+0x2040>
   13544:	ldrb	r1, [r4, #169]	; 0xa9
   13548:	cmp	r1, #0
   1354c:	beq	13580 <__assert_fail@plt+0x2060>
   13550:	cmp	r1, #46	; 0x2e
   13554:	ldrbeq	r1, [r4, #170]	; 0xaa
   13558:	cmpeq	r1, #0
   1355c:	beq	13580 <__assert_fail@plt+0x2060>
   13560:	sub	sp, fp, #16
   13564:	pop	{r4, r5, r6, sl, fp, pc}
   13568:	mov	r0, #3
   1356c:	sub	sp, fp, #16
   13570:	pop	{r4, r5, r6, sl, fp, pc}
   13574:	mov	r0, #12
   13578:	sub	sp, fp, #16
   1357c:	pop	{r4, r5, r6, sl, fp, pc}
   13580:	ldr	r1, [r4, #48]	; 0x30
   13584:	mov	r0, #5
   13588:	cmp	r1, #0
   1358c:	movweq	r0, #1
   13590:	sub	sp, fp, #16
   13594:	pop	{r4, r5, r6, sl, fp, pc}
   13598:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1359c:	add	fp, sp, #24
   135a0:	ldrd	r8, [r0, #40]	; 0x28
   135a4:	mov	r5, r2
   135a8:	mov	r4, r1
   135ac:	mov	r6, r0
   135b0:	cmp	r8, r2
   135b4:	bcs	135f4 <__assert_fail@plt+0x20d4>
   135b8:	add	r1, r5, #40	; 0x28
   135bc:	cmn	r1, #-1073741823	; 0xc0000001
   135c0:	str	r1, [r6, #40]	; 0x28
   135c4:	bhi	13680 <__assert_fail@plt+0x2160>
   135c8:	add	r7, r6, #8
   135cc:	lsl	r1, r1, #2
   135d0:	ldr	r0, [r7]
   135d4:	bl	19e80 <__assert_fail@plt+0x8960>
   135d8:	cmp	r0, #0
   135dc:	beq	13680 <__assert_fail@plt+0x2160>
   135e0:	mov	r6, r7
   135e4:	str	r0, [r7]
   135e8:	cmp	r4, #0
   135ec:	bne	13600 <__assert_fail@plt+0x20e0>
   135f0:	b	13614 <__assert_fail@plt+0x20f4>
   135f4:	ldr	r0, [r6, #8]!
   135f8:	cmp	r4, #0
   135fc:	beq	13614 <__assert_fail@plt+0x20f4>
   13600:	str	r4, [r0], #4
   13604:	ldr	r4, [r4, #8]
   13608:	cmp	r4, #0
   1360c:	bne	13600 <__assert_fail@plt+0x20e0>
   13610:	ldr	r0, [r6]
   13614:	mov	r1, r5
   13618:	mov	r2, #4
   1361c:	mov	r3, r9
   13620:	bl	1149c <qsort@plt>
   13624:	ldr	r7, [r6]
   13628:	subs	r0, r5, #1
   1362c:	ldr	r4, [r7]
   13630:	mov	r1, r4
   13634:	beq	13670 <__assert_fail@plt+0x2150>
   13638:	mov	r1, r7
   1363c:	cmp	r5, #2
   13640:	ldr	r2, [r1, #4]!
   13644:	str	r2, [r4, #8]
   13648:	beq	1366c <__assert_fail@plt+0x214c>
   1364c:	rsb	r3, r5, #2
   13650:	mov	r2, r1
   13654:	ldr	r6, [r2, #4]!
   13658:	ldr	r1, [r1]
   1365c:	adds	r3, r3, #1
   13660:	str	r6, [r1, #8]
   13664:	mov	r1, r2
   13668:	bne	13654 <__assert_fail@plt+0x2134>
   1366c:	ldr	r1, [r7, r0, lsl #2]
   13670:	mov	r0, #0
   13674:	str	r0, [r1, #8]
   13678:	mov	r0, r4
   1367c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13680:	ldr	r0, [r6, #8]
   13684:	bl	12efc <__assert_fail@plt+0x19dc>
   13688:	mov	r0, #0
   1368c:	str	r0, [r6, #40]	; 0x28
   13690:	str	r0, [r6, #8]
   13694:	mov	r0, r4
   13698:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1369c:	push	{r4, r5, r6, r7, fp, lr}
   136a0:	add	fp, sp, #16
   136a4:	mov	r4, r0
   136a8:	ldr	r0, [r0]
   136ac:	cmp	r0, #0
   136b0:	beq	136f0 <__assert_fail@plt+0x21d0>
   136b4:	ldr	r1, [r0, #48]	; 0x30
   136b8:	cmp	r1, #0
   136bc:	blt	136e4 <__assert_fail@plt+0x21c4>
   136c0:	ldr	r5, [r0, #8]
   136c4:	cmp	r5, #0
   136c8:	ldreq	r5, [r0, #4]
   136cc:	bl	12efc <__assert_fail@plt+0x19dc>
   136d0:	ldr	r0, [r5, #48]	; 0x30
   136d4:	cmn	r0, #1
   136d8:	mov	r0, r5
   136dc:	bgt	136c0 <__assert_fail@plt+0x21a0>
   136e0:	b	136e8 <__assert_fail@plt+0x21c8>
   136e4:	mov	r5, r0
   136e8:	mov	r0, r5
   136ec:	bl	12efc <__assert_fail@plt+0x19dc>
   136f0:	ldr	r5, [r4, #4]
   136f4:	cmp	r5, #0
   136f8:	beq	13724 <__assert_fail@plt+0x2204>
   136fc:	ldrd	r6, [r5, #8]
   13700:	cmp	r7, #0
   13704:	beq	13710 <__assert_fail@plt+0x21f0>
   13708:	mov	r0, r7
   1370c:	bl	114fc <closedir@plt>
   13710:	mov	r0, r5
   13714:	bl	12efc <__assert_fail@plt+0x19dc>
   13718:	cmp	r6, #0
   1371c:	mov	r5, r6
   13720:	bne	136fc <__assert_fail@plt+0x21dc>
   13724:	ldr	r0, [r4, #8]
   13728:	bl	12efc <__assert_fail@plt+0x19dc>
   1372c:	ldr	r0, [r4, #24]
   13730:	bl	12efc <__assert_fail@plt+0x19dc>
   13734:	ldr	r0, [r4, #48]	; 0x30
   13738:	tst	r0, #512	; 0x200
   1373c:	bne	13768 <__assert_fail@plt+0x2248>
   13740:	mov	r6, #0
   13744:	tst	r0, #4
   13748:	bne	137ac <__assert_fail@plt+0x228c>
   1374c:	ldr	r0, [r4, #28]
   13750:	bl	11490 <fchdir@plt>
   13754:	cmp	r0, #0
   13758:	beq	13788 <__assert_fail@plt+0x2268>
   1375c:	bl	113d0 <__errno_location@plt>
   13760:	ldr	r6, [r0]
   13764:	b	1378c <__assert_fail@plt+0x226c>
   13768:	ldr	r0, [r4, #32]
   1376c:	mov	r6, #0
   13770:	cmp	r0, #0
   13774:	blt	137ac <__assert_fail@plt+0x228c>
   13778:	bl	114e4 <close@plt>
   1377c:	cmp	r0, #0
   13780:	bne	137a4 <__assert_fail@plt+0x2284>
   13784:	b	137ac <__assert_fail@plt+0x228c>
   13788:	mov	r6, #0
   1378c:	ldr	r0, [r4, #28]
   13790:	bl	114e4 <close@plt>
   13794:	cmp	r6, #0
   13798:	bne	137ac <__assert_fail@plt+0x228c>
   1379c:	cmp	r0, #0
   137a0:	beq	137ac <__assert_fail@plt+0x228c>
   137a4:	bl	113d0 <__errno_location@plt>
   137a8:	ldr	r6, [r0]
   137ac:	add	r5, r4, #60	; 0x3c
   137b0:	b	137b8 <__assert_fail@plt+0x2298>
   137b4:	bl	114e4 <close@plt>
   137b8:	mov	r0, r5
   137bc:	bl	165a4 <__assert_fail@plt+0x5084>
   137c0:	cmp	r0, #0
   137c4:	bne	137dc <__assert_fail@plt+0x22bc>
   137c8:	mov	r0, r5
   137cc:	bl	165f8 <__assert_fail@plt+0x50d8>
   137d0:	cmp	r0, #0
   137d4:	bge	137b4 <__assert_fail@plt+0x2294>
   137d8:	b	137b8 <__assert_fail@plt+0x2298>
   137dc:	ldr	r0, [r4, #52]	; 0x34
   137e0:	cmp	r0, #0
   137e4:	beq	137ec <__assert_fail@plt+0x22cc>
   137e8:	bl	15a50 <__assert_fail@plt+0x4530>
   137ec:	ldrh	r0, [r4, #48]	; 0x30
   137f0:	movw	r1, #258	; 0x102
   137f4:	tst	r0, r1
   137f8:	beq	13810 <__assert_fail@plt+0x22f0>
   137fc:	ldr	r0, [r4, #56]	; 0x38
   13800:	cmp	r0, #0
   13804:	beq	13818 <__assert_fail@plt+0x22f8>
   13808:	bl	15a50 <__assert_fail@plt+0x4530>
   1380c:	b	13818 <__assert_fail@plt+0x22f8>
   13810:	ldr	r0, [r4, #56]	; 0x38
   13814:	bl	12efc <__assert_fail@plt+0x19dc>
   13818:	mov	r0, r4
   1381c:	bl	12efc <__assert_fail@plt+0x19dc>
   13820:	cmp	r6, #0
   13824:	moveq	r0, #0
   13828:	popeq	{r4, r5, r6, r7, fp, pc}
   1382c:	bl	113d0 <__errno_location@plt>
   13830:	str	r6, [r0]
   13834:	mvn	r0, #0
   13838:	pop	{r4, r5, r6, r7, fp, pc}
   1383c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13840:	add	fp, sp, #24
   13844:	sub	sp, sp, #8
   13848:	ldr	r6, [r0]
   1384c:	mov	r5, #0
   13850:	cmp	r6, #0
   13854:	beq	13f88 <__assert_fail@plt+0x2a68>
   13858:	mov	r4, r0
   1385c:	ldr	r0, [r0, #48]	; 0x30
   13860:	tst	r0, #8192	; 0x2000
   13864:	bne	13f88 <__assert_fail@plt+0x2a68>
   13868:	ldrh	r1, [r6, #60]	; 0x3c
   1386c:	mov	r2, #3
   13870:	strh	r2, [r6, #60]	; 0x3c
   13874:	cmp	r1, #1
   13878:	beq	138f0 <__assert_fail@plt+0x23d0>
   1387c:	mov	r7, r6
   13880:	cmp	r1, #2
   13884:	bne	1390c <__assert_fail@plt+0x23ec>
   13888:	ldrh	r2, [r7, #56]!	; 0x38
   1388c:	movw	r3, #65534	; 0xfffe
   13890:	and	r3, r2, r3
   13894:	cmp	r3, #12
   13898:	bne	13910 <__assert_fail@plt+0x23f0>
   1389c:	mov	r0, r4
   138a0:	mov	r1, r6
   138a4:	mov	r2, #1
   138a8:	bl	13400 <__assert_fail@plt+0x1ee0>
   138ac:	cmp	r0, #1
   138b0:	strh	r0, [r6, #56]	; 0x38
   138b4:	bne	139f8 <__assert_fail@plt+0x24d8>
   138b8:	ldr	r0, [r4, #48]	; 0x30
   138bc:	tst	r0, #4
   138c0:	bne	139f8 <__assert_fail@plt+0x24d8>
   138c4:	mov	r1, #32768	; 0x8000
   138c8:	tst	r0, #512	; 0x200
   138cc:	and	r1, r1, r0, lsl #11
   138d0:	orr	r1, r1, #18688	; 0x4900
   138d4:	orr	r2, r1, #524288	; 0x80000
   138d8:	bne	13c64 <__assert_fail@plt+0x2744>
   138dc:	movw	r0, #47285	; 0xb8b5
   138e0:	mov	r1, r2
   138e4:	movt	r0, #1
   138e8:	bl	1a2c8 <__assert_fail@plt+0x8da8>
   138ec:	b	13c74 <__assert_fail@plt+0x2754>
   138f0:	mov	r0, r4
   138f4:	mov	r1, r6
   138f8:	mov	r2, #0
   138fc:	bl	13400 <__assert_fail@plt+0x1ee0>
   13900:	strh	r0, [r6, #56]	; 0x38
   13904:	mov	r5, r6
   13908:	b	13f88 <__assert_fail@plt+0x2a68>
   1390c:	ldrh	r2, [r7, #56]!	; 0x38
   13910:	cmp	r2, #1
   13914:	bne	1398c <__assert_fail@plt+0x246c>
   13918:	cmp	r1, #4
   1391c:	bne	13a00 <__assert_fail@plt+0x24e0>
   13920:	ldrb	r0, [r6, #58]	; 0x3a
   13924:	tst	r0, #2
   13928:	beq	13934 <__assert_fail@plt+0x2414>
   1392c:	ldr	r0, [r6, #36]	; 0x24
   13930:	bl	114e4 <close@plt>
   13934:	ldr	r5, [r4, #4]
   13938:	cmp	r5, #0
   1393c:	beq	13970 <__assert_fail@plt+0x2450>
   13940:	ldrd	r8, [r5, #8]
   13944:	cmp	r9, #0
   13948:	beq	13954 <__assert_fail@plt+0x2434>
   1394c:	mov	r0, r9
   13950:	bl	114fc <closedir@plt>
   13954:	mov	r0, r5
   13958:	bl	12efc <__assert_fail@plt+0x19dc>
   1395c:	cmp	r8, #0
   13960:	mov	r5, r8
   13964:	bne	13940 <__assert_fail@plt+0x2420>
   13968:	mov	r0, #0
   1396c:	str	r0, [r4, #4]
   13970:	mov	r0, #6
   13974:	strh	r0, [r6, #56]	; 0x38
   13978:	mov	r0, r4
   1397c:	mov	r1, r6
   13980:	bl	13f98 <__assert_fail@plt+0x2a78>
   13984:	mov	r5, r6
   13988:	b	13f88 <__assert_fail@plt+0x2a68>
   1398c:	ldr	r5, [r6, #8]
   13990:	cmp	r5, #0
   13994:	beq	13a90 <__assert_fail@plt+0x2570>
   13998:	mov	r0, r6
   1399c:	str	r5, [r4]
   139a0:	bl	12efc <__assert_fail@plt+0x19dc>
   139a4:	ldr	r0, [r5, #48]	; 0x30
   139a8:	cmp	r0, #0
   139ac:	beq	13adc <__assert_fail@plt+0x25bc>
   139b0:	ldrh	r0, [r5, #60]	; 0x3c
   139b4:	mov	r6, r5
   139b8:	cmp	r0, #4
   139bc:	beq	1398c <__assert_fail@plt+0x246c>
   139c0:	cmp	r0, #2
   139c4:	bne	13b7c <__assert_fail@plt+0x265c>
   139c8:	mov	r0, r4
   139cc:	mov	r1, r5
   139d0:	mov	r2, #1
   139d4:	bl	13400 <__assert_fail@plt+0x1ee0>
   139d8:	strh	r0, [r5, #56]	; 0x38
   139dc:	cmp	r0, #1
   139e0:	ldreq	r0, [r4, #48]	; 0x30
   139e4:	tsteq	r0, #4
   139e8:	beq	13ea0 <__assert_fail@plt+0x2980>
   139ec:	mov	r0, #3
   139f0:	strh	r0, [r5, #60]	; 0x3c
   139f4:	b	13b7c <__assert_fail@plt+0x265c>
   139f8:	mov	r5, r6
   139fc:	b	13bb8 <__assert_fail@plt+0x2698>
   13a00:	tst	r0, #64	; 0x40
   13a04:	beq	13a20 <__assert_fail@plt+0x2500>
   13a08:	ldrd	r2, [r4, #16]
   13a0c:	ldrd	r8, [r6, #64]	; 0x40
   13a10:	eor	r1, r9, r3
   13a14:	eor	r2, r8, r2
   13a18:	orrs	r1, r2, r1
   13a1c:	bne	13920 <__assert_fail@plt+0x2400>
   13a20:	ldr	r5, [r4, #4]
   13a24:	cmp	r5, #0
   13a28:	beq	13b58 <__assert_fail@plt+0x2638>
   13a2c:	tst	r0, #4096	; 0x1000
   13a30:	bne	13b20 <__assert_fail@plt+0x2600>
   13a34:	ldr	r3, [r6, #24]
   13a38:	mov	r0, r4
   13a3c:	mov	r1, r6
   13a40:	mvn	r2, #0
   13a44:	bl	14068 <__assert_fail@plt+0x2b48>
   13a48:	cmp	r0, #0
   13a4c:	beq	13b70 <__assert_fail@plt+0x2650>
   13a50:	bl	113d0 <__errno_location@plt>
   13a54:	ldr	r0, [r0]
   13a58:	str	r0, [r6, #32]
   13a5c:	ldrh	r0, [r6, #58]	; 0x3a
   13a60:	orr	r0, r0, #1
   13a64:	strh	r0, [r6, #58]	; 0x3a
   13a68:	ldr	r0, [r4, #4]
   13a6c:	cmp	r0, #0
   13a70:	beq	13b70 <__assert_fail@plt+0x2650>
   13a74:	ldmib	r0, {r1, r2}
   13a78:	ldr	r1, [r1, #24]
   13a7c:	cmp	r2, #0
   13a80:	str	r1, [r0, #24]
   13a84:	mov	r0, r2
   13a88:	bne	13a74 <__assert_fail@plt+0x2554>
   13a8c:	b	13b70 <__assert_fail@plt+0x2650>
   13a90:	ldr	r5, [r6, #4]
   13a94:	ldr	r0, [r5, #12]
   13a98:	cmp	r0, #0
   13a9c:	beq	13ca4 <__assert_fail@plt+0x2784>
   13aa0:	str	r5, [r4]
   13aa4:	ldr	r1, [r5, #40]	; 0x28
   13aa8:	ldr	r0, [r4, #24]
   13aac:	mov	r5, #0
   13ab0:	strb	r5, [r0, r1]
   13ab4:	mov	r0, r4
   13ab8:	mov	r1, #3
   13abc:	bl	142c0 <__assert_fail@plt+0x2da0>
   13ac0:	cmp	r0, #0
   13ac4:	beq	13c94 <__assert_fail@plt+0x2774>
   13ac8:	mov	r7, r0
   13acc:	mov	r0, r6
   13ad0:	bl	12efc <__assert_fail@plt+0x19dc>
   13ad4:	mov	r5, r7
   13ad8:	b	13b7c <__assert_fail@plt+0x265c>
   13adc:	mov	r0, r4
   13ae0:	bl	14d74 <__assert_fail@plt+0x3854>
   13ae4:	ldr	r1, [r4, #48]	; 0x30
   13ae8:	cmp	r0, #0
   13aec:	beq	13b00 <__assert_fail@plt+0x25e0>
   13af0:	orr	r0, r1, #8192	; 0x2000
   13af4:	mov	r5, #0
   13af8:	str	r0, [r4, #48]	; 0x30
   13afc:	b	13f88 <__assert_fail@plt+0x2a68>
   13b00:	movw	r0, #258	; 0x102
   13b04:	tst	r1, r0
   13b08:	beq	13d54 <__assert_fail@plt+0x2834>
   13b0c:	ldr	r0, [r4, #56]	; 0x38
   13b10:	cmp	r0, #0
   13b14:	beq	13d5c <__assert_fail@plt+0x283c>
   13b18:	bl	15a50 <__assert_fail@plt+0x4530>
   13b1c:	b	13d5c <__assert_fail@plt+0x283c>
   13b20:	bic	r0, r0, #4096	; 0x1000
   13b24:	str	r0, [r4, #48]	; 0x30
   13b28:	ldrd	r8, [r5, #8]
   13b2c:	cmp	r9, #0
   13b30:	beq	13b3c <__assert_fail@plt+0x261c>
   13b34:	mov	r0, r9
   13b38:	bl	114fc <closedir@plt>
   13b3c:	mov	r0, r5
   13b40:	bl	12efc <__assert_fail@plt+0x19dc>
   13b44:	cmp	r8, #0
   13b48:	mov	r5, r8
   13b4c:	bne	13b28 <__assert_fail@plt+0x2608>
   13b50:	mov	r0, #0
   13b54:	str	r0, [r4, #4]
   13b58:	mov	r0, r4
   13b5c:	mov	r1, #3
   13b60:	bl	142c0 <__assert_fail@plt+0x2da0>
   13b64:	cmp	r0, #0
   13b68:	str	r0, [r4, #4]
   13b6c:	beq	13c38 <__assert_fail@plt+0x2718>
   13b70:	ldr	r5, [r4, #4]
   13b74:	mov	r0, #0
   13b78:	str	r0, [r4, #4]
   13b7c:	ldr	r0, [r5, #4]
   13b80:	ldr	r1, [r0, #28]
   13b84:	ldr	r0, [r0, #40]	; 0x28
   13b88:	sub	r2, r0, #1
   13b8c:	ldrb	r1, [r1, r2]
   13b90:	cmp	r1, #47	; 0x2f
   13b94:	ldr	r1, [r4, #24]
   13b98:	moveq	r0, r2
   13b9c:	mov	r2, #47	; 0x2f
   13ba0:	strb	r2, [r1, r0]!
   13ba4:	ldr	r2, [r5, #52]	; 0x34
   13ba8:	add	r0, r1, #1
   13bac:	add	r1, r5, #168	; 0xa8
   13bb0:	add	r2, r2, #1
   13bb4:	bl	11250 <memmove@plt>
   13bb8:	str	r5, [r4]
   13bbc:	ldrh	r0, [r5, #56]	; 0x38
   13bc0:	cmp	r0, #11
   13bc4:	bne	13bf8 <__assert_fail@plt+0x26d8>
   13bc8:	ldrd	r0, [r5, #112]	; 0x70
   13bcc:	eor	r2, r0, #1
   13bd0:	orrs	r2, r2, r1
   13bd4:	beq	13f88 <__assert_fail@plt+0x2a68>
   13bd8:	eor	r0, r0, #2
   13bdc:	orrs	r0, r0, r1
   13be0:	bne	13f94 <__assert_fail@plt+0x2a74>
   13be4:	mov	r0, r4
   13be8:	mov	r1, r5
   13bec:	mov	r2, #0
   13bf0:	bl	13400 <__assert_fail@plt+0x1ee0>
   13bf4:	strh	r0, [r5, #56]	; 0x38
   13bf8:	cmp	r0, #1
   13bfc:	bne	13f88 <__assert_fail@plt+0x2a68>
   13c00:	ldr	r0, [r5, #48]	; 0x30
   13c04:	cmp	r0, #0
   13c08:	ldrdeq	r0, [r5, #64]	; 0x40
   13c0c:	strdeq	r0, [r4, #16]
   13c10:	mov	r0, r4
   13c14:	mov	r1, r5
   13c18:	bl	14e04 <__assert_fail@plt+0x38e4>
   13c1c:	cmp	r0, #0
   13c20:	bne	13f88 <__assert_fail@plt+0x2a68>
   13c24:	bl	113d0 <__errno_location@plt>
   13c28:	mov	r1, #12
   13c2c:	mov	r5, #0
   13c30:	str	r1, [r0]
   13c34:	b	13f88 <__assert_fail@plt+0x2a68>
   13c38:	ldrb	r0, [r4, #49]	; 0x31
   13c3c:	mov	r5, #0
   13c40:	tst	r0, #32
   13c44:	bne	13f88 <__assert_fail@plt+0x2a68>
   13c48:	ldr	r0, [r6, #32]
   13c4c:	cmp	r0, #0
   13c50:	ldrhne	r0, [r7]
   13c54:	cmpne	r0, #4
   13c58:	movne	r0, #7
   13c5c:	strhne	r0, [r7]
   13c60:	b	13978 <__assert_fail@plt+0x2458>
   13c64:	ldr	r0, [r4, #32]
   13c68:	movw	r1, #47285	; 0xb8b5
   13c6c:	movt	r1, #1
   13c70:	bl	166ac <__assert_fail@plt+0x518c>
   13c74:	cmn	r0, #1
   13c78:	str	r0, [r6, #36]	; 0x24
   13c7c:	ble	13d38 <__assert_fail@plt+0x2818>
   13c80:	ldrh	r0, [r6, #58]	; 0x3a
   13c84:	mov	r5, r6
   13c88:	orr	r0, r0, #2
   13c8c:	strh	r0, [r6, #58]	; 0x3a
   13c90:	b	13bb8 <__assert_fail@plt+0x2698>
   13c94:	ldrb	r0, [r4, #49]	; 0x31
   13c98:	tst	r0, #32
   13c9c:	bne	13f88 <__assert_fail@plt+0x2a68>
   13ca0:	ldr	r5, [r6, #4]
   13ca4:	mov	r0, r6
   13ca8:	str	r5, [r4]
   13cac:	bl	12efc <__assert_fail@plt+0x19dc>
   13cb0:	ldr	r0, [r5, #48]	; 0x30
   13cb4:	cmn	r0, #1
   13cb8:	beq	13d1c <__assert_fail@plt+0x27fc>
   13cbc:	ldrh	r0, [r5, #56]	; 0x38
   13cc0:	cmp	r0, #11
   13cc4:	beq	13f94 <__assert_fail@plt+0x2a74>
   13cc8:	ldr	r0, [r5, #40]	; 0x28
   13ccc:	ldr	r1, [r4, #24]
   13cd0:	mov	r2, #0
   13cd4:	strb	r2, [r1, r0]
   13cd8:	ldr	r0, [r5, #48]	; 0x30
   13cdc:	cmp	r0, #0
   13ce0:	beq	13e2c <__assert_fail@plt+0x290c>
   13ce4:	ldrh	r0, [r5, #58]	; 0x3a
   13ce8:	tst	r0, #2
   13cec:	bne	13e58 <__assert_fail@plt+0x2938>
   13cf0:	tst	r0, #1
   13cf4:	bne	13f4c <__assert_fail@plt+0x2a2c>
   13cf8:	ldr	r1, [r5, #4]
   13cfc:	movw	r3, #47284	; 0xb8b4
   13d00:	mov	r0, r4
   13d04:	mvn	r2, #0
   13d08:	movt	r3, #1
   13d0c:	bl	14068 <__assert_fail@plt+0x2b48>
   13d10:	cmp	r0, #0
   13d14:	bne	13e3c <__assert_fail@plt+0x291c>
   13d18:	b	13f4c <__assert_fail@plt+0x2a2c>
   13d1c:	mov	r0, r5
   13d20:	bl	12efc <__assert_fail@plt+0x19dc>
   13d24:	bl	113d0 <__errno_location@plt>
   13d28:	mov	r5, #0
   13d2c:	str	r5, [r0]
   13d30:	str	r5, [r4]
   13d34:	b	13f88 <__assert_fail@plt+0x2a68>
   13d38:	bl	113d0 <__errno_location@plt>
   13d3c:	ldr	r0, [r0]
   13d40:	mov	r1, #7
   13d44:	mov	r5, r6
   13d48:	strh	r1, [r6, #56]	; 0x38
   13d4c:	str	r0, [r6, #32]
   13d50:	b	13bb8 <__assert_fail@plt+0x2698>
   13d54:	ldr	r0, [r4, #56]	; 0x38
   13d58:	bl	12efc <__assert_fail@plt+0x19dc>
   13d5c:	ldr	r1, [r5, #52]	; 0x34
   13d60:	add	r6, r5, #168	; 0xa8
   13d64:	str	r1, [r5, #40]	; 0x28
   13d68:	add	r2, r1, #1
   13d6c:	mov	r1, r6
   13d70:	ldr	r0, [r4, #24]
   13d74:	bl	11250 <memmove@plt>
   13d78:	mov	r0, r6
   13d7c:	mov	r1, #47	; 0x2f
   13d80:	bl	11454 <strrchr@plt>
   13d84:	cmp	r0, #0
   13d88:	beq	13dc4 <__assert_fail@plt+0x28a4>
   13d8c:	cmp	r0, r6
   13d90:	bne	13da0 <__assert_fail@plt+0x2880>
   13d94:	ldrb	r1, [r5, #169]	; 0xa9
   13d98:	cmp	r1, #0
   13d9c:	beq	13dc4 <__assert_fail@plt+0x28a4>
   13da0:	add	r7, r0, #1
   13da4:	mov	r0, r7
   13da8:	bl	113a0 <strlen@plt>
   13dac:	mov	r8, r0
   13db0:	add	r2, r0, #1
   13db4:	mov	r0, r6
   13db8:	mov	r1, r7
   13dbc:	bl	11250 <memmove@plt>
   13dc0:	str	r8, [r5, #52]	; 0x34
   13dc4:	ldr	r0, [r4, #24]
   13dc8:	movw	r1, #258	; 0x102
   13dcc:	str	r0, [r5, #24]
   13dd0:	str	r0, [r5, #28]
   13dd4:	ldrh	r0, [r4, #48]	; 0x30
   13dd8:	tst	r0, r1
   13ddc:	beq	13e10 <__assert_fail@plt+0x28f0>
   13de0:	movw	r0, #12028	; 0x2efc
   13de4:	movw	r2, #20676	; 0x50c4
   13de8:	movw	r3, #20708	; 0x50e4
   13dec:	mov	r1, #0
   13df0:	movt	r0, #1
   13df4:	movt	r2, #1
   13df8:	movt	r3, #1
   13dfc:	str	r0, [sp]
   13e00:	mov	r0, #31
   13e04:	bl	15758 <__assert_fail@plt+0x4238>
   13e08:	str	r0, [r4, #56]	; 0x38
   13e0c:	b	13bb8 <__assert_fail@plt+0x2698>
   13e10:	mov	r0, #32
   13e14:	bl	19e50 <__assert_fail@plt+0x8930>
   13e18:	cmp	r0, #0
   13e1c:	str	r0, [r4, #56]	; 0x38
   13e20:	beq	13bb8 <__assert_fail@plt+0x2698>
   13e24:	bl	19f58 <__assert_fail@plt+0x8a38>
   13e28:	b	13bb8 <__assert_fail@plt+0x2698>
   13e2c:	mov	r0, r4
   13e30:	bl	14d74 <__assert_fail@plt+0x3854>
   13e34:	cmp	r0, #0
   13e38:	beq	13f4c <__assert_fail@plt+0x2a2c>
   13e3c:	bl	113d0 <__errno_location@plt>
   13e40:	ldr	r0, [r0]
   13e44:	str	r0, [r5, #32]
   13e48:	ldr	r0, [r4, #48]	; 0x30
   13e4c:	orr	r0, r0, #8192	; 0x2000
   13e50:	str	r0, [r4, #48]	; 0x30
   13e54:	b	13f4c <__assert_fail@plt+0x2a2c>
   13e58:	ldr	r0, [r4, #48]	; 0x30
   13e5c:	tst	r0, #4
   13e60:	bne	13ecc <__assert_fail@plt+0x29ac>
   13e64:	mov	r7, r5
   13e68:	tst	r0, #512	; 0x200
   13e6c:	ldr	r6, [r7, #36]!	; 0x24
   13e70:	bne	13f18 <__assert_fail@plt+0x29f8>
   13e74:	mov	r0, r6
   13e78:	bl	11490 <fchdir@plt>
   13e7c:	cmp	r0, #0
   13e80:	beq	13f44 <__assert_fail@plt+0x2a24>
   13e84:	bl	113d0 <__errno_location@plt>
   13e88:	ldr	r0, [r0]
   13e8c:	str	r0, [r5, #32]
   13e90:	ldr	r0, [r4, #48]	; 0x30
   13e94:	orr	r0, r0, #8192	; 0x2000
   13e98:	str	r0, [r4, #48]	; 0x30
   13e9c:	b	13f44 <__assert_fail@plt+0x2a24>
   13ea0:	mov	r1, #32768	; 0x8000
   13ea4:	tst	r0, #512	; 0x200
   13ea8:	and	r1, r1, r0, lsl #11
   13eac:	orr	r1, r1, #18688	; 0x4900
   13eb0:	orr	r2, r1, #524288	; 0x80000
   13eb4:	bne	13ed4 <__assert_fail@plt+0x29b4>
   13eb8:	movw	r0, #47285	; 0xb8b5
   13ebc:	mov	r1, r2
   13ec0:	movt	r0, #1
   13ec4:	bl	1a2c8 <__assert_fail@plt+0x8da8>
   13ec8:	b	13ee4 <__assert_fail@plt+0x29c4>
   13ecc:	add	r7, r5, #36	; 0x24
   13ed0:	b	13f44 <__assert_fail@plt+0x2a24>
   13ed4:	ldr	r0, [r4, #32]
   13ed8:	movw	r1, #47285	; 0xb8b5
   13edc:	movt	r1, #1
   13ee0:	bl	166ac <__assert_fail@plt+0x518c>
   13ee4:	cmn	r0, #1
   13ee8:	str	r0, [r5, #36]	; 0x24
   13eec:	ble	13f00 <__assert_fail@plt+0x29e0>
   13ef0:	ldrh	r0, [r5, #58]	; 0x3a
   13ef4:	orr	r0, r0, #2
   13ef8:	strh	r0, [r5, #58]	; 0x3a
   13efc:	b	139ec <__assert_fail@plt+0x24cc>
   13f00:	bl	113d0 <__errno_location@plt>
   13f04:	ldr	r0, [r0]
   13f08:	mov	r1, #7
   13f0c:	strh	r1, [r5, #56]	; 0x38
   13f10:	str	r0, [r5, #32]
   13f14:	b	139ec <__assert_fail@plt+0x24cc>
   13f18:	ldr	r1, [r4, #32]
   13f1c:	cmp	r1, r6
   13f20:	bne	13f2c <__assert_fail@plt+0x2a0c>
   13f24:	cmn	r1, #100	; 0x64
   13f28:	bne	13f94 <__assert_fail@plt+0x2a74>
   13f2c:	add	r0, r4, #60	; 0x3c
   13f30:	bl	165ac <__assert_fail@plt+0x508c>
   13f34:	cmp	r0, #0
   13f38:	blt	13f40 <__assert_fail@plt+0x2a20>
   13f3c:	bl	114e4 <close@plt>
   13f40:	str	r6, [r4, #32]
   13f44:	ldr	r0, [r7]
   13f48:	bl	114e4 <close@plt>
   13f4c:	ldrh	r0, [r5, #56]	; 0x38
   13f50:	cmp	r0, #2
   13f54:	beq	13f7c <__assert_fail@plt+0x2a5c>
   13f58:	ldr	r0, [r5, #32]
   13f5c:	mov	r1, #7
   13f60:	cmp	r0, #0
   13f64:	movweq	r1, #6
   13f68:	strh	r1, [r5, #56]	; 0x38
   13f6c:	bne	13f7c <__assert_fail@plt+0x2a5c>
   13f70:	mov	r0, r4
   13f74:	mov	r1, r5
   13f78:	bl	13f98 <__assert_fail@plt+0x2a78>
   13f7c:	ldrb	r0, [r4, #49]	; 0x31
   13f80:	tst	r0, #32
   13f84:	movne	r5, #0
   13f88:	mov	r0, r5
   13f8c:	sub	sp, fp, #24
   13f90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f94:	bl	114d8 <abort@plt>
   13f98:	push	{r4, r5, r6, r7, fp, lr}
   13f9c:	add	fp, sp, #16
   13fa0:	sub	sp, sp, #24
   13fa4:	ldrh	r2, [r0, #48]	; 0x30
   13fa8:	movw	r3, #258	; 0x102
   13fac:	add	lr, r1, #64	; 0x40
   13fb0:	tst	r2, r3
   13fb4:	beq	13fec <__assert_fail@plt+0x2acc>
   13fb8:	ldrd	r2, [lr]
   13fbc:	stm	sp, {r2, r3}
   13fc0:	ldrd	r2, [r1, #160]	; 0xa0
   13fc4:	mov	r1, sp
   13fc8:	str	r3, [sp, #12]
   13fcc:	str	r2, [sp, #8]
   13fd0:	ldr	r0, [r0, #56]	; 0x38
   13fd4:	bl	162dc <__assert_fail@plt+0x4dbc>
   13fd8:	cmp	r0, #0
   13fdc:	beq	14064 <__assert_fail@plt+0x2b44>
   13fe0:	bl	12efc <__assert_fail@plt+0x19dc>
   13fe4:	sub	sp, fp, #16
   13fe8:	pop	{r4, r5, r6, r7, fp, pc}
   13fec:	ldr	r2, [r1, #4]
   13ff0:	cmp	r2, #0
   13ff4:	beq	1405c <__assert_fail@plt+0x2b3c>
   13ff8:	ldr	r3, [r2, #48]	; 0x30
   13ffc:	cmp	r3, #0
   14000:	blt	1405c <__assert_fail@plt+0x2b3c>
   14004:	ldr	ip, [r0, #56]	; 0x38
   14008:	ldrd	r4, [ip, #16]
   1400c:	orrs	r3, r4, r5
   14010:	beq	14064 <__assert_fail@plt+0x2b44>
   14014:	ldrd	r4, [r1, #160]	; 0xa0
   14018:	ldrd	r6, [ip]
   1401c:	eor	r1, r7, r5
   14020:	eor	r3, r6, r4
   14024:	orrs	r1, r3, r1
   14028:	bne	1405c <__assert_fail@plt+0x2b3c>
   1402c:	ldr	r1, [ip, #8]!
   14030:	ldrd	r4, [lr]
   14034:	ldr	r3, [ip, #4]
   14038:	eor	r1, r1, r4
   1403c:	eor	r3, r3, r5
   14040:	orrs	r1, r1, r3
   14044:	bne	1405c <__assert_fail@plt+0x2b3c>
   14048:	ldrd	r4, [r2, #64]	; 0x40
   1404c:	strd	r4, [ip]
   14050:	ldr	r0, [r0, #56]	; 0x38
   14054:	ldrd	r2, [r2, #160]	; 0xa0
   14058:	strd	r2, [r0]
   1405c:	sub	sp, fp, #16
   14060:	pop	{r4, r5, r6, r7, fp, pc}
   14064:	bl	114d8 <abort@plt>
   14068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1406c:	add	fp, sp, #28
   14070:	sub	sp, sp, #108	; 0x6c
   14074:	mov	r7, r3
   14078:	mov	r4, r2
   1407c:	mov	r8, r1
   14080:	mov	sl, r0
   14084:	cmp	r3, #0
   14088:	beq	140ac <__assert_fail@plt+0x2b8c>
   1408c:	movw	r1, #47284	; 0xb8b4
   14090:	mov	r0, r7
   14094:	movt	r1, #1
   14098:	bl	1122c <strcmp@plt>
   1409c:	mov	r6, r0
   140a0:	cmp	r0, #0
   140a4:	movwne	r6, #1
   140a8:	b	140b0 <__assert_fail@plt+0x2b90>
   140ac:	mov	r6, #1
   140b0:	ldr	r0, [sl, #48]	; 0x30
   140b4:	tst	r0, #4
   140b8:	bne	14110 <__assert_fail@plt+0x2bf0>
   140bc:	cmn	r4, #1
   140c0:	mov	r1, #0
   140c4:	mov	r9, #0
   140c8:	movwgt	r1, #1
   140cc:	orrs	r1, r1, r6
   140d0:	bne	14130 <__assert_fail@plt+0x2c10>
   140d4:	ands	r0, r0, #512	; 0x200
   140d8:	beq	14130 <__assert_fail@plt+0x2c10>
   140dc:	add	r4, sl, #60	; 0x3c
   140e0:	mov	r0, r4
   140e4:	bl	165a4 <__assert_fail@plt+0x5084>
   140e8:	cmp	r0, #0
   140ec:	bne	14138 <__assert_fail@plt+0x2c18>
   140f0:	mov	r0, r4
   140f4:	bl	165f8 <__assert_fail@plt+0x50d8>
   140f8:	cmn	r0, #1
   140fc:	ble	14138 <__assert_fail@plt+0x2c18>
   14100:	mov	r4, r0
   14104:	mov	r9, #0
   14108:	mov	r7, #0
   1410c:	b	14180 <__assert_fail@plt+0x2c60>
   14110:	mov	r5, #0
   14114:	cmp	r4, #0
   14118:	blt	142b0 <__assert_fail@plt+0x2d90>
   1411c:	ands	r0, r0, #512	; 0x200
   14120:	beq	142b0 <__assert_fail@plt+0x2d90>
   14124:	mov	r0, r4
   14128:	bl	114e4 <close@plt>
   1412c:	b	142b0 <__assert_fail@plt+0x2d90>
   14130:	cmn	r4, #1
   14134:	bgt	14180 <__assert_fail@plt+0x2c60>
   14138:	ldr	r0, [sl, #48]	; 0x30
   1413c:	mov	r1, #32768	; 0x8000
   14140:	and	r1, r1, r0, lsl #11
   14144:	tst	r0, #512	; 0x200
   14148:	orr	r1, r1, #18688	; 0x4900
   1414c:	orr	r2, r1, #524288	; 0x80000
   14150:	bne	14164 <__assert_fail@plt+0x2c44>
   14154:	mov	r0, r7
   14158:	mov	r1, r2
   1415c:	bl	1a2c8 <__assert_fail@plt+0x8da8>
   14160:	b	14170 <__assert_fail@plt+0x2c50>
   14164:	ldr	r0, [sl, #32]
   14168:	mov	r1, r7
   1416c:	bl	166ac <__assert_fail@plt+0x518c>
   14170:	mov	r4, r0
   14174:	mov	r9, #1
   14178:	cmp	r0, #0
   1417c:	blt	14254 <__assert_fail@plt+0x2d34>
   14180:	ldr	r5, [sl, #48]	; 0x30
   14184:	tst	r5, #2
   14188:	bne	141cc <__assert_fail@plt+0x2cac>
   1418c:	cmp	r7, #0
   14190:	beq	141ac <__assert_fail@plt+0x2c8c>
   14194:	movw	r1, #47284	; 0xb8b4
   14198:	mov	r0, r7
   1419c:	movt	r1, #1
   141a0:	bl	1122c <strcmp@plt>
   141a4:	cmp	r0, #0
   141a8:	beq	141cc <__assert_fail@plt+0x2cac>
   141ac:	tst	r5, #512	; 0x200
   141b0:	bne	14224 <__assert_fail@plt+0x2d04>
   141b4:	mov	r0, r4
   141b8:	bl	11490 <fchdir@plt>
   141bc:	mov	r5, r0
   141c0:	cmp	r9, #0
   141c4:	bne	14274 <__assert_fail@plt+0x2d54>
   141c8:	b	142b0 <__assert_fail@plt+0x2d90>
   141cc:	mov	r2, sp
   141d0:	mov	r0, #3
   141d4:	mov	r1, r4
   141d8:	bl	112e0 <__fxstat64@plt>
   141dc:	cmp	r0, #0
   141e0:	bne	14268 <__assert_fail@plt+0x2d48>
   141e4:	ldrd	r0, [r8, #64]	; 0x40
   141e8:	ldm	sp, {r2, r3}
   141ec:	eor	r1, r1, r3
   141f0:	eor	r0, r0, r2
   141f4:	orrs	r0, r0, r1
   141f8:	bne	1425c <__assert_fail@plt+0x2d3c>
   141fc:	ldrd	r0, [r8, #160]	; 0xa0
   14200:	ldr	r2, [sp, #96]	; 0x60
   14204:	ldr	r3, [sp, #100]	; 0x64
   14208:	eor	r1, r1, r3
   1420c:	eor	r0, r0, r2
   14210:	orrs	r0, r0, r1
   14214:	bne	1425c <__assert_fail@plt+0x2d3c>
   14218:	ldr	r5, [sl, #48]	; 0x30
   1421c:	tst	r5, #512	; 0x200
   14220:	beq	141b4 <__assert_fail@plt+0x2c94>
   14224:	ldr	r1, [sl, #32]
   14228:	cmp	r1, r4
   1422c:	bne	14238 <__assert_fail@plt+0x2d18>
   14230:	cmn	r1, #100	; 0x64
   14234:	bne	142bc <__assert_fail@plt+0x2d9c>
   14238:	cmp	r6, #0
   1423c:	beq	14290 <__assert_fail@plt+0x2d70>
   14240:	add	r0, sl, #60	; 0x3c
   14244:	bl	165ac <__assert_fail@plt+0x508c>
   14248:	cmp	r0, #0
   1424c:	bge	142a4 <__assert_fail@plt+0x2d84>
   14250:	b	142a8 <__assert_fail@plt+0x2d88>
   14254:	mvn	r5, #0
   14258:	b	142b0 <__assert_fail@plt+0x2d90>
   1425c:	bl	113d0 <__errno_location@plt>
   14260:	mov	r1, #2
   14264:	str	r1, [r0]
   14268:	mvn	r5, #0
   1426c:	cmp	r9, #0
   14270:	beq	142b0 <__assert_fail@plt+0x2d90>
   14274:	bl	113d0 <__errno_location@plt>
   14278:	ldr	r7, [r0]
   1427c:	mov	r6, r0
   14280:	mov	r0, r4
   14284:	bl	114e4 <close@plt>
   14288:	str	r7, [r6]
   1428c:	b	142b0 <__assert_fail@plt+0x2d90>
   14290:	tst	r5, #4
   14294:	bne	142a8 <__assert_fail@plt+0x2d88>
   14298:	cmp	r1, #0
   1429c:	blt	142a8 <__assert_fail@plt+0x2d88>
   142a0:	mov	r0, r1
   142a4:	bl	114e4 <close@plt>
   142a8:	str	r4, [sl, #32]
   142ac:	mov	r5, #0
   142b0:	mov	r0, r5
   142b4:	sub	sp, fp, #28
   142b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142bc:	bl	114d8 <abort@plt>
   142c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c4:	add	fp, sp, #28
   142c8:	sub	sp, sp, #76	; 0x4c
   142cc:	ldr	sl, [r0]
   142d0:	mov	r8, r1
   142d4:	mov	r5, r0
   142d8:	str	r0, [sp, #44]	; 0x2c
   142dc:	ldr	r4, [sl, #12]
   142e0:	cmp	r4, #0
   142e4:	beq	14330 <__assert_fail@plt+0x2e10>
   142e8:	mov	r0, r4
   142ec:	bl	11484 <dirfd@plt>
   142f0:	cmn	r0, #1
   142f4:	str	r0, [fp, #-32]	; 0xffffffe0
   142f8:	ble	14368 <__assert_fail@plt+0x2e48>
   142fc:	mov	r1, r5
   14300:	mvn	r2, #0
   14304:	str	r4, [sp, #16]
   14308:	str	r8, [sp, #8]
   1430c:	mov	ip, #0
   14310:	ldr	r0, [r1, #44]!	; 0x2c
   14314:	cmp	r0, #0
   14318:	str	r1, [sp, #52]	; 0x34
   1431c:	add	r7, r1, #4
   14320:	movweq	r2, #34464	; 0x86a0
   14324:	movteq	r2, #1
   14328:	str	r2, [sp, #32]
   1432c:	b	1454c <__assert_fail@plt+0x302c>
   14330:	mov	r7, r5
   14334:	mvn	r0, #99	; 0x63
   14338:	mov	r2, #0
   1433c:	ldr	r3, [r7, #48]!	; 0x30
   14340:	and	r1, r3, #516	; 0x204
   14344:	cmp	r1, #512	; 0x200
   14348:	ldr	r1, [sl, #24]
   1434c:	ldreq	r0, [r5, #32]
   14350:	tst	r3, #16
   14354:	beq	14390 <__assert_fail@plt+0x2e70>
   14358:	tst	r3, #1
   1435c:	bne	14384 <__assert_fail@plt+0x2e64>
   14360:	mov	r2, #32768	; 0x8000
   14364:	b	14390 <__assert_fail@plt+0x2e70>
   14368:	ldr	r0, [sl, #12]
   1436c:	bl	114fc <closedir@plt>
   14370:	mov	r6, #0
   14374:	str	r6, [sl, #12]
   14378:	cmp	r8, #3
   1437c:	beq	143d4 <__assert_fail@plt+0x2eb4>
   14380:	b	14c68 <__assert_fail@plt+0x3748>
   14384:	ldr	r3, [sl, #48]	; 0x30
   14388:	cmp	r3, #0
   1438c:	movne	r2, #32768	; 0x8000
   14390:	sub	r3, fp, #32
   14394:	bl	166f0 <__assert_fail@plt+0x51d0>
   14398:	cmp	r0, #0
   1439c:	str	r0, [sl, #12]
   143a0:	beq	143c8 <__assert_fail@plt+0x2ea8>
   143a4:	ldrh	r0, [sl, #56]	; 0x38
   143a8:	cmp	r0, #11
   143ac:	bne	143ec <__assert_fail@plt+0x2ecc>
   143b0:	mov	r0, r5
   143b4:	mov	r1, sl
   143b8:	mov	r2, #0
   143bc:	bl	13400 <__assert_fail@plt+0x1ee0>
   143c0:	strh	r0, [sl, #56]	; 0x38
   143c4:	b	1442c <__assert_fail@plt+0x2f0c>
   143c8:	mov	r6, #0
   143cc:	cmp	r8, #3
   143d0:	bne	14c68 <__assert_fail@plt+0x3748>
   143d4:	mov	r0, #4
   143d8:	strh	r0, [sl, #56]	; 0x38
   143dc:	bl	113d0 <__errno_location@plt>
   143e0:	ldr	r0, [r0]
   143e4:	str	r0, [sl, #32]
   143e8:	b	14c68 <__assert_fail@plt+0x3748>
   143ec:	ldrb	r0, [r7, #1]
   143f0:	tst	r0, #1
   143f4:	beq	1442c <__assert_fail@plt+0x2f0c>
   143f8:	mov	r0, r5
   143fc:	mov	r1, sl
   14400:	bl	13f98 <__assert_fail@plt+0x2a78>
   14404:	mov	r0, r5
   14408:	mov	r1, sl
   1440c:	mov	r2, #0
   14410:	mov	r6, #0
   14414:	bl	13400 <__assert_fail@plt+0x1ee0>
   14418:	mov	r0, r5
   1441c:	mov	r1, sl
   14420:	bl	14e04 <__assert_fail@plt+0x38e4>
   14424:	cmp	r0, #0
   14428:	beq	14bd4 <__assert_fail@plt+0x36b4>
   1442c:	mov	r1, r5
   14430:	str	r8, [sp, #8]
   14434:	str	r4, [sp, #16]
   14438:	ldr	r0, [r1, #44]!	; 0x2c
   1443c:	str	r1, [sp, #52]	; 0x34
   14440:	mvn	r1, #0
   14444:	cmp	r0, #0
   14448:	movweq	r1, #34464	; 0x86a0
   1444c:	movteq	r1, #1
   14450:	cmp	r8, #2
   14454:	str	r1, [sp, #32]
   14458:	bne	14474 <__assert_fail@plt+0x2f54>
   1445c:	mov	ip, #1
   14460:	cmp	r8, #3
   14464:	bne	1454c <__assert_fail@plt+0x302c>
   14468:	sub	r0, r8, #3
   1446c:	mov	r5, #0
   14470:	b	14494 <__assert_fail@plt+0x2f74>
   14474:	ldr	r0, [r7]
   14478:	and	r0, r0, #56	; 0x38
   1447c:	cmp	r0, #24
   14480:	ldreq	r0, [sl, #84]	; 0x54
   14484:	cmpeq	r0, #2
   14488:	beq	14d1c <__assert_fail@plt+0x37fc>
   1448c:	sub	r0, r8, #3
   14490:	mov	r5, #1
   14494:	clz	r0, r0
   14498:	lsr	r6, r0, #5
   1449c:	ldrb	r0, [r7, #1]
   144a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144a4:	tst	r0, #2
   144a8:	beq	144c4 <__assert_fail@plt+0x2fa4>
   144ac:	mov	r0, r2
   144b0:	movw	r1, #1030	; 0x406
   144b4:	mov	r2, #3
   144b8:	bl	1a0e8 <__assert_fail@plt+0x8bc8>
   144bc:	mov	r2, r0
   144c0:	str	r0, [fp, #-32]	; 0xffffffe0
   144c4:	cmp	r2, #0
   144c8:	blt	144e4 <__assert_fail@plt+0x2fc4>
   144cc:	ldr	r0, [sp, #44]	; 0x2c
   144d0:	mov	r1, sl
   144d4:	mov	r3, #0
   144d8:	bl	14068 <__assert_fail@plt+0x2b48>
   144dc:	cmp	r0, #0
   144e0:	beq	14544 <__assert_fail@plt+0x3024>
   144e4:	and	r0, r6, r5
   144e8:	cmp	r0, #1
   144ec:	bne	144fc <__assert_fail@plt+0x2fdc>
   144f0:	bl	113d0 <__errno_location@plt>
   144f4:	ldr	r0, [r0]
   144f8:	str	r0, [sl, #32]
   144fc:	ldrh	r0, [sl, #58]	; 0x3a
   14500:	orr	r0, r0, #1
   14504:	strh	r0, [sl, #58]	; 0x3a
   14508:	ldr	r0, [sl, #12]
   1450c:	bl	114fc <closedir@plt>
   14510:	mov	r4, #0
   14514:	ldr	r5, [sp, #44]	; 0x2c
   14518:	str	r4, [sl, #12]
   1451c:	ldr	r0, [r7]
   14520:	tst	r0, #512	; 0x200
   14524:	beq	14538 <__assert_fail@plt+0x3018>
   14528:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1452c:	cmp	r0, #0
   14530:	blt	14538 <__assert_fail@plt+0x3018>
   14534:	bl	114e4 <close@plt>
   14538:	mov	ip, #1
   1453c:	str	r4, [sl, #12]
   14540:	b	1454c <__assert_fail@plt+0x302c>
   14544:	ldr	r5, [sp, #44]	; 0x2c
   14548:	mov	ip, #0
   1454c:	ldr	r0, [sl, #40]	; 0x28
   14550:	ldr	r1, [sl, #28]
   14554:	mov	r9, #0
   14558:	sub	r2, r0, #1
   1455c:	ldrb	r1, [r1, r2]
   14560:	cmp	r1, #47	; 0x2f
   14564:	ldrb	r1, [r7]
   14568:	moveq	r0, r2
   1456c:	tst	r1, #4
   14570:	mov	r1, #0
   14574:	str	r1, [sp, #40]	; 0x28
   14578:	beq	14590 <__assert_fail@plt+0x3070>
   1457c:	ldr	r1, [r5, #24]
   14580:	mov	r2, #47	; 0x2f
   14584:	strb	r2, [r1, r0]!
   14588:	add	r1, r1, #1
   1458c:	str	r1, [sp, #40]	; 0x28
   14590:	ldr	r6, [sl, #12]
   14594:	add	r1, r0, #1
   14598:	str	r1, [fp, #-48]	; 0xffffffd0
   1459c:	cmp	r6, #0
   145a0:	beq	14918 <__assert_fail@plt+0x33f8>
   145a4:	ldr	r0, [sl, #48]	; 0x30
   145a8:	str	r7, [fp, #-36]	; 0xffffffdc
   145ac:	str	ip, [sp, #4]
   145b0:	mov	r7, #0
   145b4:	add	r0, r0, #1
   145b8:	str	r0, [sp, #24]
   145bc:	ldr	r0, [r5, #36]	; 0x24
   145c0:	sub	r0, r0, r1
   145c4:	str	r0, [fp, #-44]	; 0xffffffd4
   145c8:	bl	113d0 <__errno_location@plt>
   145cc:	str	r0, [sp, #36]	; 0x24
   145d0:	mov	r0, #0
   145d4:	mov	r9, #0
   145d8:	mov	r4, #0
   145dc:	str	sl, [sp, #28]
   145e0:	str	r0, [sp, #48]	; 0x30
   145e4:	mov	r0, #0
   145e8:	str	r0, [sp, #12]
   145ec:	mov	r0, #0
   145f0:	str	r0, [sp, #20]
   145f4:	ldr	r0, [sp, #36]	; 0x24
   145f8:	str	r7, [r0]
   145fc:	mov	r0, r6
   14600:	bl	1146c <readdir64@plt>
   14604:	cmp	r0, #0
   14608:	beq	14a6c <__assert_fail@plt+0x354c>
   1460c:	mov	r8, r0
   14610:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14614:	str	r4, [fp, #-40]	; 0xffffffd8
   14618:	add	r4, r8, #19
   1461c:	ldrb	r0, [r0]
   14620:	tst	r0, #32
   14624:	ldrbeq	r0, [r4]
   14628:	cmpeq	r0, #46	; 0x2e
   1462c:	beq	14728 <__assert_fail@plt+0x3208>
   14630:	mov	r0, r4
   14634:	bl	113a0 <strlen@plt>
   14638:	mov	r5, r0
   1463c:	add	r0, r0, #176	; 0xb0
   14640:	bic	r0, r0, #7
   14644:	bl	19e50 <__assert_fail@plt+0x8930>
   14648:	mov	r6, r0
   1464c:	cmp	r0, #0
   14650:	beq	14bf8 <__assert_fail@plt+0x36d8>
   14654:	add	sl, r6, #168	; 0xa8
   14658:	mov	r1, r4
   1465c:	mov	r2, r5
   14660:	mov	r0, sl
   14664:	bl	11274 <memcpy@plt>
   14668:	ldr	r2, [sp, #44]	; 0x2c
   1466c:	mov	r0, #0
   14670:	mov	r1, #196608	; 0x30000
   14674:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14678:	strb	r0, [sl, r5]
   1467c:	str	r5, [r6, #52]	; 0x34
   14680:	str	r2, [r6, #44]	; 0x2c
   14684:	add	r7, r5, r3
   14688:	ldr	r4, [r2, #24]
   1468c:	str	r1, [r6, #58]	; 0x3a
   14690:	str	r0, [r6, #12]
   14694:	str	r0, [r6, #16]
   14698:	str	r0, [r6, #20]
   1469c:	str	r4, [r6, #28]
   146a0:	str	r0, [r6, #32]
   146a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   146a8:	cmp	r5, r0
   146ac:	bcs	146c4 <__assert_fail@plt+0x31a4>
   146b0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   146b4:	mov	r5, r2
   146b8:	cmp	r7, r3
   146bc:	bcs	14768 <__assert_fail@plt+0x3248>
   146c0:	b	14ad0 <__assert_fail@plt+0x35b0>
   146c4:	ldr	r1, [r2, #36]	; 0x24
   146c8:	movw	r0, #257	; 0x101
   146cc:	mov	r5, r2
   146d0:	add	r0, r7, r0
   146d4:	adds	r1, r0, r1
   146d8:	bcs	14bb4 <__assert_fail@plt+0x3694>
   146dc:	mov	r0, r4
   146e0:	str	r1, [r5, #36]	; 0x24
   146e4:	bl	19e80 <__assert_fail@plt+0x8960>
   146e8:	cmp	r0, #0
   146ec:	beq	14be4 <__assert_fail@plt+0x36c4>
   146f0:	cmp	r0, r4
   146f4:	str	r0, [r5, #24]
   146f8:	beq	14750 <__assert_fail@plt+0x3230>
   146fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14700:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14704:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14708:	ldrb	r1, [r1]
   1470c:	tst	r1, #4
   14710:	ldr	r1, [sp, #40]	; 0x28
   14714:	addne	r1, r0, r3
   14718:	mov	r0, #1
   1471c:	str	r1, [sp, #40]	; 0x28
   14720:	str	r0, [sp, #20]
   14724:	b	14758 <__assert_fail@plt+0x3238>
   14728:	ldrb	r0, [r8, #20]
   1472c:	cmp	r0, #0
   14730:	beq	14744 <__assert_fail@plt+0x3224>
   14734:	cmp	r0, #46	; 0x2e
   14738:	ldrbeq	r0, [r8, #21]
   1473c:	cmpeq	r0, #0
   14740:	bne	14630 <__assert_fail@plt+0x3110>
   14744:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14748:	mov	r7, #0
   1474c:	b	148fc <__assert_fail@plt+0x33dc>
   14750:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14754:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14758:	ldr	r0, [r5, #36]	; 0x24
   1475c:	sub	r0, r0, r3
   14760:	cmp	r7, r3
   14764:	bcc	14ad0 <__assert_fail@plt+0x35b0>
   14768:	str	r0, [fp, #-44]	; 0xffffffd4
   1476c:	ldr	r0, [sp, #24]
   14770:	str	r0, [r6, #48]	; 0x30
   14774:	ldr	r0, [r5]
   14778:	str	r7, [r6, #40]	; 0x28
   1477c:	str	r0, [r6, #4]
   14780:	ldrd	r0, [r8]
   14784:	strd	r0, [r6, #160]	; 0xa0
   14788:	ldrb	r0, [r5, #48]	; 0x30
   1478c:	tst	r0, #4
   14790:	bne	1479c <__assert_fail@plt+0x327c>
   14794:	str	sl, [r6, #24]
   14798:	b	147b8 <__assert_fail@plt+0x3298>
   1479c:	ldr	r0, [r6, #28]
   147a0:	ldr	r1, [r6, #52]	; 0x34
   147a4:	str	r0, [r6, #24]
   147a8:	ldr	r0, [sp, #40]	; 0x28
   147ac:	add	r2, r1, #1
   147b0:	mov	r1, sl
   147b4:	bl	11250 <memmove@plt>
   147b8:	ldr	r0, [sp, #52]	; 0x34
   147bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   147c0:	ldr	sl, [sp, #28]
   147c4:	ldr	r0, [r0]
   147c8:	ldr	r2, [r1]
   147cc:	cmp	r0, #0
   147d0:	beq	147f8 <__assert_fail@plt+0x32d8>
   147d4:	ands	r0, r2, #1024	; 0x400
   147d8:	bne	147f8 <__assert_fail@plt+0x32d8>
   147dc:	mov	r0, r5
   147e0:	mov	r1, r6
   147e4:	mov	r2, #0
   147e8:	bl	13400 <__assert_fail@plt+0x1ee0>
   147ec:	mov	r7, #0
   147f0:	strh	r0, [r6, #56]	; 0x38
   147f4:	b	1486c <__assert_fail@plt+0x334c>
   147f8:	ldrb	r3, [r8, #18]
   147fc:	mov	r0, #0
   14800:	tst	r2, #8
   14804:	mov	r1, #0
   14808:	beq	1482c <__assert_fail@plt+0x330c>
   1480c:	orr	r1, r3, #4
   14810:	cmp	r1, #4
   14814:	mov	r1, #0
   14818:	beq	1482c <__assert_fail@plt+0x330c>
   1481c:	eor	r1, r3, #10
   14820:	and	r2, r2, #16
   14824:	orrs	r1, r2, r1
   14828:	movwne	r1, #1
   1482c:	mov	r2, #11
   14830:	mov	r7, #0
   14834:	strh	r2, [r6, #56]	; 0x38
   14838:	sub	r2, r3, #1
   1483c:	uxtb	r3, r2
   14840:	cmp	r3, #11
   14844:	sxtbls	r0, r2
   14848:	movwls	r2, #47296	; 0xb8c0
   1484c:	movtls	r2, #1
   14850:	ldrls	r0, [r2, r0, lsl #2]
   14854:	cmp	r1, #0
   14858:	str	r0, [r6, #80]	; 0x50
   1485c:	mov	r0, #2
   14860:	movwne	r0, #1
   14864:	str	r0, [r6, #112]	; 0x70
   14868:	str	r7, [r6, #116]	; 0x74
   1486c:	cmp	r9, #0
   14870:	str	r7, [r6, #8]
   14874:	ldrne	r0, [sp, #48]	; 0x30
   14878:	moveq	r9, r6
   1487c:	strne	r6, [r0, #8]
   14880:	movw	r0, #10000	; 0x2710
   14884:	cmp	r4, r0
   14888:	bne	148dc <__assert_fail@plt+0x33bc>
   1488c:	ldr	r0, [sp, #52]	; 0x34
   14890:	ldr	r0, [r0]
   14894:	cmp	r0, #0
   14898:	bne	148dc <__assert_fail@plt+0x33bc>
   1489c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   148a0:	mov	r0, sl
   148a4:	bl	15164 <__assert_fail@plt+0x3c44>
   148a8:	mov	r1, #0
   148ac:	str	r1, [sp, #12]
   148b0:	movw	r1, #19778	; 0x4d42
   148b4:	movt	r1, #65363	; 0xff53
   148b8:	cmp	r0, r1
   148bc:	movwne	r1, #26985	; 0x6969
   148c0:	cmpne	r0, r1
   148c4:	beq	148dc <__assert_fail@plt+0x33bc>
   148c8:	movw	r1, #6548	; 0x1994
   148cc:	movt	r1, #258	; 0x102
   148d0:	cmp	r0, r1
   148d4:	movne	r0, #1
   148d8:	strne	r0, [sp, #12]
   148dc:	ldr	r0, [sp, #32]
   148e0:	add	r4, r4, #1
   148e4:	cmp	r0, r4
   148e8:	mov	r0, #0
   148ec:	movwls	r0, #15
   148f0:	cmp	r0, #0
   148f4:	bne	14b44 <__assert_fail@plt+0x3624>
   148f8:	str	r6, [sp, #48]	; 0x30
   148fc:	ldr	r6, [sl, #12]
   14900:	cmp	r6, #0
   14904:	bne	145f4 <__assert_fail@plt+0x30d4>
   14908:	ldr	r0, [sp, #20]
   1490c:	ldr	ip, [sp, #4]
   14910:	ldr	r6, [sp, #12]
   14914:	b	14ab8 <__assert_fail@plt+0x3598>
   14918:	mov	r4, #0
   1491c:	mov	r6, #0
   14920:	ldrb	r0, [r7]
   14924:	tst	r0, #4
   14928:	beq	14954 <__assert_fail@plt+0x3434>
   1492c:	ldr	r2, [sp, #40]	; 0x28
   14930:	ldr	r0, [r5, #36]	; 0x24
   14934:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14938:	cmp	r3, r0
   1493c:	sub	r1, r2, #1
   14940:	mov	r0, #0
   14944:	moveq	r2, r1
   14948:	cmp	r4, #0
   1494c:	moveq	r2, r1
   14950:	strb	r0, [r2]
   14954:	ldr	r0, [sp, #16]
   14958:	cmp	r0, #0
   1495c:	movwne	r0, #1
   14960:	orrs	r0, r0, ip
   14964:	beq	149c8 <__assert_fail@plt+0x34a8>
   14968:	cmp	r4, #0
   1496c:	bne	14a08 <__assert_fail@plt+0x34e8>
   14970:	ldr	r0, [sp, #8]
   14974:	cmp	r0, #3
   14978:	bne	14990 <__assert_fail@plt+0x3470>
   1497c:	ldrh	r0, [sl, #56]	; 0x38
   14980:	cmp	r0, #4
   14984:	cmpne	r0, #7
   14988:	movne	r0, #6
   1498c:	strhne	r0, [sl, #56]	; 0x38
   14990:	mov	r6, #0
   14994:	cmp	r9, #0
   14998:	beq	14c68 <__assert_fail@plt+0x3748>
   1499c:	ldrd	r4, [r9, #8]
   149a0:	cmp	r5, #0
   149a4:	beq	149b0 <__assert_fail@plt+0x3490>
   149a8:	mov	r0, r5
   149ac:	bl	114fc <closedir@plt>
   149b0:	mov	r0, r9
   149b4:	bl	12efc <__assert_fail@plt+0x19dc>
   149b8:	cmp	r4, #0
   149bc:	mov	r9, r4
   149c0:	bne	1499c <__assert_fail@plt+0x347c>
   149c4:	b	14c68 <__assert_fail@plt+0x3748>
   149c8:	ldr	r0, [sp, #8]
   149cc:	cmp	r0, #1
   149d0:	cmpne	r4, #0
   149d4:	bne	14a08 <__assert_fail@plt+0x34e8>
   149d8:	ldr	r0, [sl, #48]	; 0x30
   149dc:	cmp	r0, #0
   149e0:	beq	14b58 <__assert_fail@plt+0x3638>
   149e4:	ldr	r1, [sl, #4]
   149e8:	movw	r3, #47284	; 0xb8b4
   149ec:	mov	r0, r5
   149f0:	mvn	r2, #0
   149f4:	movt	r3, #1
   149f8:	bl	14068 <__assert_fail@plt+0x2b48>
   149fc:	cmp	r0, #0
   14a00:	bne	14b68 <__assert_fail@plt+0x3648>
   14a04:	b	14968 <__assert_fail@plt+0x3448>
   14a08:	tst	r6, #1
   14a0c:	beq	14a3c <__assert_fail@plt+0x351c>
   14a10:	movw	r0, #20780	; 0x512c
   14a14:	mov	r1, r9
   14a18:	mov	r2, r4
   14a1c:	movt	r0, #1
   14a20:	str	r0, [r5, #44]	; 0x2c
   14a24:	mov	r0, r5
   14a28:	bl	13598 <__assert_fail@plt+0x2078>
   14a2c:	mov	r6, r0
   14a30:	mov	r0, #0
   14a34:	str	r0, [r5, #44]	; 0x2c
   14a38:	b	14c68 <__assert_fail@plt+0x3748>
   14a3c:	cmp	r4, #2
   14a40:	bcc	14ac8 <__assert_fail@plt+0x35a8>
   14a44:	ldr	r0, [sp, #52]	; 0x34
   14a48:	ldr	r0, [r0]
   14a4c:	cmp	r0, #0
   14a50:	beq	14ac8 <__assert_fail@plt+0x35a8>
   14a54:	mov	r0, r5
   14a58:	mov	r1, r9
   14a5c:	mov	r2, r4
   14a60:	bl	13598 <__assert_fail@plt+0x2078>
   14a64:	mov	r6, r0
   14a68:	b	14c68 <__assert_fail@plt+0x3748>
   14a6c:	ldr	r0, [sp, #36]	; 0x24
   14a70:	ldr	r0, [r0]
   14a74:	cmp	r0, #0
   14a78:	beq	14a94 <__assert_fail@plt+0x3574>
   14a7c:	str	r0, [sl, #32]
   14a80:	ldr	r0, [sp, #16]
   14a84:	orrs	r0, r0, r4
   14a88:	mov	r0, #4
   14a8c:	movwne	r0, #7
   14a90:	strh	r0, [sl, #56]	; 0x38
   14a94:	ldr	r0, [sl, #12]
   14a98:	ldr	r6, [sp, #12]
   14a9c:	cmp	r0, #0
   14aa0:	beq	14c7c <__assert_fail@plt+0x375c>
   14aa4:	bl	114fc <closedir@plt>
   14aa8:	mov	r0, #0
   14aac:	ldr	ip, [sp, #4]
   14ab0:	str	r0, [sl, #12]
   14ab4:	ldr	r0, [sp, #20]
   14ab8:	tst	r0, #1
   14abc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14ac0:	beq	14920 <__assert_fail@plt+0x3400>
   14ac4:	b	14c90 <__assert_fail@plt+0x3770>
   14ac8:	mov	r6, r9
   14acc:	b	14c68 <__assert_fail@plt+0x3748>
   14ad0:	mov	r0, r6
   14ad4:	bl	12efc <__assert_fail@plt+0x19dc>
   14ad8:	ldr	r7, [sp, #28]
   14adc:	cmp	r9, #0
   14ae0:	beq	14b0c <__assert_fail@plt+0x35ec>
   14ae4:	ldrd	r4, [r9, #8]
   14ae8:	cmp	r5, #0
   14aec:	beq	14af8 <__assert_fail@plt+0x35d8>
   14af0:	mov	r0, r5
   14af4:	bl	114fc <closedir@plt>
   14af8:	mov	r0, r9
   14afc:	bl	12efc <__assert_fail@plt+0x19dc>
   14b00:	cmp	r4, #0
   14b04:	mov	r9, r4
   14b08:	bne	14ae4 <__assert_fail@plt+0x35c4>
   14b0c:	ldr	r0, [r7, #12]
   14b10:	bl	114fc <closedir@plt>
   14b14:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14b18:	mov	r6, #0
   14b1c:	mov	r0, #7
   14b20:	str	r6, [r7, #12]
   14b24:	strh	r0, [r7, #56]	; 0x38
   14b28:	ldr	r0, [r1]
   14b2c:	orr	r0, r0, #8192	; 0x2000
   14b30:	str	r0, [r1]
   14b34:	ldr	r1, [sp, #36]	; 0x24
   14b38:	mov	r0, #36	; 0x24
   14b3c:	str	r0, [r1]
   14b40:	b	14c68 <__assert_fail@plt+0x3748>
   14b44:	ldr	ip, [sp, #4]
   14b48:	cmp	r0, #15
   14b4c:	bne	14c74 <__assert_fail@plt+0x3754>
   14b50:	ldr	r6, [sp, #12]
   14b54:	b	14c80 <__assert_fail@plt+0x3760>
   14b58:	mov	r0, r5
   14b5c:	bl	14d74 <__assert_fail@plt+0x3854>
   14b60:	cmp	r0, #0
   14b64:	beq	14968 <__assert_fail@plt+0x3448>
   14b68:	mov	r0, #7
   14b6c:	mov	r6, #0
   14b70:	cmp	r9, #0
   14b74:	strh	r0, [sl, #56]	; 0x38
   14b78:	ldr	r0, [r7]
   14b7c:	orr	r0, r0, #8192	; 0x2000
   14b80:	str	r0, [r7]
   14b84:	beq	14c68 <__assert_fail@plt+0x3748>
   14b88:	ldrd	r4, [r9, #8]
   14b8c:	cmp	r5, #0
   14b90:	beq	14b9c <__assert_fail@plt+0x367c>
   14b94:	mov	r0, r5
   14b98:	bl	114fc <closedir@plt>
   14b9c:	mov	r0, r9
   14ba0:	bl	12efc <__assert_fail@plt+0x19dc>
   14ba4:	cmp	r4, #0
   14ba8:	mov	r9, r4
   14bac:	bne	14b88 <__assert_fail@plt+0x3668>
   14bb0:	b	14c68 <__assert_fail@plt+0x3748>
   14bb4:	mov	r0, r4
   14bb8:	bl	12efc <__assert_fail@plt+0x19dc>
   14bbc:	ldr	r1, [sp, #36]	; 0x24
   14bc0:	mov	r0, #0
   14bc4:	str	r0, [r5, #24]
   14bc8:	mov	r0, #36	; 0x24
   14bcc:	str	r0, [r1]
   14bd0:	b	14bf4 <__assert_fail@plt+0x36d4>
   14bd4:	bl	113d0 <__errno_location@plt>
   14bd8:	mov	r1, #12
   14bdc:	str	r1, [r0]
   14be0:	b	14c68 <__assert_fail@plt+0x3748>
   14be4:	ldr	r0, [r5, #24]
   14be8:	bl	12efc <__assert_fail@plt+0x19dc>
   14bec:	mov	r0, #0
   14bf0:	str	r0, [r5, #24]
   14bf4:	ldr	sl, [sp, #28]
   14bf8:	ldr	r0, [sp, #36]	; 0x24
   14bfc:	ldr	r4, [r0]
   14c00:	mov	r0, r6
   14c04:	bl	12efc <__assert_fail@plt+0x19dc>
   14c08:	cmp	r9, #0
   14c0c:	beq	14c38 <__assert_fail@plt+0x3718>
   14c10:	ldrd	r6, [r9, #8]
   14c14:	cmp	r7, #0
   14c18:	beq	14c24 <__assert_fail@plt+0x3704>
   14c1c:	mov	r0, r7
   14c20:	bl	114fc <closedir@plt>
   14c24:	mov	r0, r9
   14c28:	bl	12efc <__assert_fail@plt+0x19dc>
   14c2c:	cmp	r6, #0
   14c30:	mov	r9, r6
   14c34:	bne	14c10 <__assert_fail@plt+0x36f0>
   14c38:	ldr	r0, [sl, #12]
   14c3c:	bl	114fc <closedir@plt>
   14c40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14c44:	mov	r6, #0
   14c48:	mov	r0, #7
   14c4c:	str	r6, [sl, #12]
   14c50:	strh	r0, [sl, #56]	; 0x38
   14c54:	ldr	r0, [r1]
   14c58:	orr	r0, r0, #8192	; 0x2000
   14c5c:	str	r0, [r1]
   14c60:	ldr	r0, [sp, #36]	; 0x24
   14c64:	str	r4, [r0]
   14c68:	mov	r0, r6
   14c6c:	sub	sp, fp, #28
   14c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c74:	mov	r6, #0
   14c78:	b	14c68 <__assert_fail@plt+0x3748>
   14c7c:	ldr	ip, [sp, #4]
   14c80:	ldr	r0, [sp, #20]
   14c84:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14c88:	tst	r0, #1
   14c8c:	beq	14920 <__assert_fail@plt+0x3400>
   14c90:	ldr	r1, [r5, #4]
   14c94:	ldr	r0, [r5, #24]
   14c98:	cmp	r1, #0
   14c9c:	beq	14ccc <__assert_fail@plt+0x37ac>
   14ca0:	ldr	r2, [r1, #24]
   14ca4:	add	r3, r1, #168	; 0xa8
   14ca8:	cmp	r2, r3
   14cac:	ldrne	r3, [r1, #28]
   14cb0:	subne	r2, r2, r3
   14cb4:	addne	r2, r0, r2
   14cb8:	strne	r2, [r1, #24]
   14cbc:	str	r0, [r1, #28]
   14cc0:	ldr	r1, [r1, #8]
   14cc4:	cmp	r1, #0
   14cc8:	bne	14ca0 <__assert_fail@plt+0x3780>
   14ccc:	ldr	r1, [r9, #48]	; 0x30
   14cd0:	cmp	r1, #0
   14cd4:	blt	14920 <__assert_fail@plt+0x3400>
   14cd8:	mov	r1, r9
   14cdc:	ldr	r2, [r1, #24]
   14ce0:	add	r3, r1, #168	; 0xa8
   14ce4:	cmp	r2, r3
   14ce8:	ldrne	r3, [r1, #28]
   14cec:	subne	r2, r2, r3
   14cf0:	addne	r2, r0, r2
   14cf4:	strne	r2, [r1, #24]
   14cf8:	str	r0, [r1, #28]
   14cfc:	ldr	r2, [r1, #8]
   14d00:	cmp	r2, #0
   14d04:	ldreq	r2, [r1, #4]
   14d08:	ldr	r1, [r2, #48]	; 0x30
   14d0c:	cmn	r1, #1
   14d10:	mov	r1, r2
   14d14:	bgt	14cdc <__assert_fail@plt+0x37bc>
   14d18:	b	14920 <__assert_fail@plt+0x3400>
   14d1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14d20:	mov	r0, sl
   14d24:	bl	15164 <__assert_fail@plt+0x3c44>
   14d28:	movw	r1, #26984	; 0x6968
   14d2c:	cmp	r0, r1
   14d30:	ble	14d5c <__assert_fail@plt+0x383c>
   14d34:	movw	r1, #26985	; 0x6969
   14d38:	cmp	r0, r1
   14d3c:	movwne	r1, #16719	; 0x414f
   14d40:	movtne	r1, #21318	; 0x5346
   14d44:	cmpne	r0, r1
   14d48:	beq	1448c <__assert_fail@plt+0x2f6c>
   14d4c:	movw	r1, #40864	; 0x9fa0
   14d50:	cmp	r0, r1
   14d54:	beq	1448c <__assert_fail@plt+0x2f6c>
   14d58:	b	1445c <__assert_fail@plt+0x2f3c>
   14d5c:	movw	r1, #19778	; 0x4d42
   14d60:	movt	r1, #65363	; 0xff53
   14d64:	cmp	r0, r1
   14d68:	cmpne	r0, #0
   14d6c:	beq	1448c <__assert_fail@plt+0x2f6c>
   14d70:	b	1445c <__assert_fail@plt+0x2f3c>
   14d74:	push	{r4, r5, fp, lr}
   14d78:	add	fp, sp, #8
   14d7c:	mov	r5, r0
   14d80:	ldr	r0, [r0, #48]	; 0x30
   14d84:	mov	r4, #0
   14d88:	tst	r0, #4
   14d8c:	bne	14dd0 <__assert_fail@plt+0x38b0>
   14d90:	tst	r0, #512	; 0x200
   14d94:	bne	14db0 <__assert_fail@plt+0x3890>
   14d98:	ldr	r0, [r5, #28]
   14d9c:	bl	11490 <fchdir@plt>
   14da0:	mov	r4, r0
   14da4:	cmp	r0, #0
   14da8:	movwne	r4, #1
   14dac:	b	14dd0 <__assert_fail@plt+0x38b0>
   14db0:	ldr	r1, [r5, #32]
   14db4:	add	r0, r5, #60	; 0x3c
   14db8:	bl	165ac <__assert_fail@plt+0x508c>
   14dbc:	cmp	r0, #0
   14dc0:	blt	14dc8 <__assert_fail@plt+0x38a8>
   14dc4:	bl	114e4 <close@plt>
   14dc8:	mvn	r0, #99	; 0x63
   14dcc:	str	r0, [r5, #32]
   14dd0:	add	r5, r5, #60	; 0x3c
   14dd4:	b	14ddc <__assert_fail@plt+0x38bc>
   14dd8:	bl	114e4 <close@plt>
   14ddc:	mov	r0, r5
   14de0:	bl	165a4 <__assert_fail@plt+0x5084>
   14de4:	cmp	r0, #0
   14de8:	movne	r0, r4
   14dec:	popne	{r4, r5, fp, pc}
   14df0:	mov	r0, r5
   14df4:	bl	165f8 <__assert_fail@plt+0x50d8>
   14df8:	cmp	r0, #0
   14dfc:	bge	14dd8 <__assert_fail@plt+0x38b8>
   14e00:	b	14ddc <__assert_fail@plt+0x38bc>
   14e04:	push	{r4, r5, r6, r7, fp, lr}
   14e08:	add	fp, sp, #16
   14e0c:	mov	r6, r0
   14e10:	ldrh	r0, [r0, #48]	; 0x30
   14e14:	mov	r4, r1
   14e18:	movw	r1, #258	; 0x102
   14e1c:	tst	r0, r1
   14e20:	beq	14e94 <__assert_fail@plt+0x3974>
   14e24:	mov	r0, #24
   14e28:	bl	19e50 <__assert_fail@plt+0x8930>
   14e2c:	mov	r5, #0
   14e30:	cmp	r0, #0
   14e34:	beq	14eb4 <__assert_fail@plt+0x3994>
   14e38:	mov	r7, r0
   14e3c:	ldrd	r0, [r4, #64]	; 0x40
   14e40:	add	r2, r7, #8
   14e44:	stm	r7, {r0, r1}
   14e48:	ldrd	r0, [r4, #160]	; 0xa0
   14e4c:	stm	r2, {r0, r1, r4}
   14e50:	mov	r1, r7
   14e54:	ldr	r0, [r6, #56]	; 0x38
   14e58:	bl	1629c <__assert_fail@plt+0x4d7c>
   14e5c:	cmp	r0, r7
   14e60:	beq	14e88 <__assert_fail@plt+0x3968>
   14e64:	mov	r6, r0
   14e68:	mov	r0, r7
   14e6c:	bl	12efc <__assert_fail@plt+0x19dc>
   14e70:	cmp	r6, #0
   14e74:	beq	14eb4 <__assert_fail@plt+0x3994>
   14e78:	ldr	r0, [r6, #16]
   14e7c:	mov	r1, #2
   14e80:	strh	r1, [r4, #56]	; 0x38
   14e84:	str	r0, [r4]
   14e88:	mov	r5, #1
   14e8c:	mov	r0, r5
   14e90:	pop	{r4, r5, r6, r7, fp, pc}
   14e94:	ldr	r0, [r6, #56]	; 0x38
   14e98:	add	r1, r4, #64	; 0x40
   14e9c:	bl	19f74 <__assert_fail@plt+0x8a54>
   14ea0:	cmp	r0, #0
   14ea4:	mov	r5, #1
   14ea8:	movne	r0, #2
   14eac:	strhne	r0, [r4, #56]	; 0x38
   14eb0:	strne	r4, [r4]
   14eb4:	mov	r0, r5
   14eb8:	pop	{r4, r5, r6, r7, fp, pc}
   14ebc:	cmp	r2, #5
   14ec0:	movcc	r0, #0
   14ec4:	strhcc	r2, [r1, #60]	; 0x3c
   14ec8:	bxcc	lr
   14ecc:	push	{fp, lr}
   14ed0:	mov	fp, sp
   14ed4:	bl	113d0 <__errno_location@plt>
   14ed8:	mov	r1, #22
   14edc:	str	r1, [r0]
   14ee0:	mov	r0, #1
   14ee4:	pop	{fp, pc}
   14ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eec:	add	fp, sp, #28
   14ef0:	sub	sp, sp, #4
   14ef4:	mov	r9, r0
   14ef8:	orr	r0, r1, #4096	; 0x1000
   14efc:	cmp	r0, #4096	; 0x1000
   14f00:	bne	14f40 <__assert_fail@plt+0x3a20>
   14f04:	ldr	r8, [r9]
   14f08:	mov	r7, r1
   14f0c:	bl	113d0 <__errno_location@plt>
   14f10:	mov	r5, #0
   14f14:	mov	sl, r0
   14f18:	str	r5, [r0]
   14f1c:	ldrb	r0, [r9, #49]	; 0x31
   14f20:	tst	r0, #32
   14f24:	bne	14f50 <__assert_fail@plt+0x3a30>
   14f28:	ldrh	r0, [r8, #56]	; 0x38
   14f2c:	cmp	r0, #1
   14f30:	beq	14f5c <__assert_fail@plt+0x3a3c>
   14f34:	cmp	r0, #9
   14f38:	ldreq	r5, [r8, #8]
   14f3c:	b	14f50 <__assert_fail@plt+0x3a30>
   14f40:	bl	113d0 <__errno_location@plt>
   14f44:	mov	r1, #22
   14f48:	mov	r5, #0
   14f4c:	str	r1, [r0]
   14f50:	mov	r0, r5
   14f54:	sub	sp, fp, #28
   14f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f5c:	ldr	r6, [r9, #4]
   14f60:	cmp	r6, #0
   14f64:	beq	14f94 <__assert_fail@plt+0x3a74>
   14f68:	ldr	r4, [r6, #8]
   14f6c:	ldr	r1, [r6, #12]
   14f70:	cmp	r1, #0
   14f74:	beq	14f80 <__assert_fail@plt+0x3a60>
   14f78:	mov	r0, r1
   14f7c:	bl	114fc <closedir@plt>
   14f80:	mov	r0, r6
   14f84:	bl	12efc <__assert_fail@plt+0x19dc>
   14f88:	cmp	r4, #0
   14f8c:	mov	r6, r4
   14f90:	bne	14f68 <__assert_fail@plt+0x3a48>
   14f94:	cmp	r7, #4096	; 0x1000
   14f98:	mov	r4, #1
   14f9c:	ldreq	r0, [r9, #48]	; 0x30
   14fa0:	moveq	r4, #2
   14fa4:	orreq	r0, r0, #4096	; 0x1000
   14fa8:	streq	r0, [r9, #48]	; 0x30
   14fac:	ldr	r0, [r8, #48]	; 0x30
   14fb0:	cmp	r0, #0
   14fb4:	bne	15000 <__assert_fail@plt+0x3ae0>
   14fb8:	ldr	r0, [r8, #24]
   14fbc:	ldrb	r0, [r0]
   14fc0:	cmp	r0, #47	; 0x2f
   14fc4:	beq	15000 <__assert_fail@plt+0x3ae0>
   14fc8:	ldr	r0, [r9, #48]	; 0x30
   14fcc:	tst	r0, #4
   14fd0:	bne	15000 <__assert_fail@plt+0x3ae0>
   14fd4:	mov	r1, #32768	; 0x8000
   14fd8:	tst	r0, #512	; 0x200
   14fdc:	and	r1, r1, r0, lsl #11
   14fe0:	orr	r1, r1, #18688	; 0x4900
   14fe4:	orr	r2, r1, #524288	; 0x80000
   14fe8:	bne	15018 <__assert_fail@plt+0x3af8>
   14fec:	movw	r0, #47285	; 0xb8b5
   14ff0:	mov	r1, r2
   14ff4:	movt	r0, #1
   14ff8:	bl	1a2c8 <__assert_fail@plt+0x8da8>
   14ffc:	b	15028 <__assert_fail@plt+0x3b08>
   15000:	mov	r0, r9
   15004:	mov	r1, r4
   15008:	bl	142c0 <__assert_fail@plt+0x2da0>
   1500c:	mov	r5, r0
   15010:	str	r0, [r9, #4]
   15014:	b	14f50 <__assert_fail@plt+0x3a30>
   15018:	ldr	r0, [r9, #32]
   1501c:	movw	r1, #47285	; 0xb8b5
   15020:	movt	r1, #1
   15024:	bl	166ac <__assert_fail@plt+0x518c>
   15028:	mov	r8, r0
   1502c:	cmn	r0, #1
   15030:	ble	15074 <__assert_fail@plt+0x3b54>
   15034:	mov	r0, r9
   15038:	mov	r1, r4
   1503c:	bl	142c0 <__assert_fail@plt+0x2da0>
   15040:	str	r0, [r9, #4]
   15044:	ldrb	r0, [r9, #49]	; 0x31
   15048:	tst	r0, #2
   1504c:	bne	15080 <__assert_fail@plt+0x3b60>
   15050:	mov	r0, r8
   15054:	bl	11490 <fchdir@plt>
   15058:	cmp	r0, #0
   1505c:	beq	150b0 <__assert_fail@plt+0x3b90>
   15060:	ldr	r4, [sl]
   15064:	mov	r0, r8
   15068:	bl	114e4 <close@plt>
   1506c:	str	r4, [sl]
   15070:	b	14f50 <__assert_fail@plt+0x3a30>
   15074:	mov	r5, #0
   15078:	str	r5, [r9, #4]
   1507c:	b	14f50 <__assert_fail@plt+0x3a30>
   15080:	ldr	r1, [r9, #32]
   15084:	cmp	r1, r8
   15088:	bne	15094 <__assert_fail@plt+0x3b74>
   1508c:	cmn	r1, #100	; 0x64
   15090:	bne	150c0 <__assert_fail@plt+0x3ba0>
   15094:	add	r0, r9, #60	; 0x3c
   15098:	bl	165ac <__assert_fail@plt+0x508c>
   1509c:	cmp	r0, #0
   150a0:	blt	150a8 <__assert_fail@plt+0x3b88>
   150a4:	bl	114e4 <close@plt>
   150a8:	str	r8, [r9, #32]
   150ac:	b	150b8 <__assert_fail@plt+0x3b98>
   150b0:	mov	r0, r8
   150b4:	bl	114e4 <close@plt>
   150b8:	ldr	r5, [r9, #4]
   150bc:	b	14f50 <__assert_fail@plt+0x3a30>
   150c0:	bl	114d8 <abort@plt>
   150c4:	push	{fp, lr}
   150c8:	mov	fp, sp
   150cc:	mov	r2, r1
   150d0:	ldrd	r0, [r0, #8]
   150d4:	mov	r3, #0
   150d8:	bl	1a5f8 <__assert_fail@plt+0x90d8>
   150dc:	mov	r0, r2
   150e0:	pop	{fp, pc}
   150e4:	push	{r4, r5, fp, lr}
   150e8:	add	fp, sp, #8
   150ec:	ldrd	r2, [r1, #8]
   150f0:	ldrd	r4, [r0, #8]
   150f4:	eor	r3, r5, r3
   150f8:	eor	r2, r4, r2
   150fc:	orrs	r2, r2, r3
   15100:	mov	r2, #0
   15104:	bne	15124 <__assert_fail@plt+0x3c04>
   15108:	ldrd	r2, [r1]
   1510c:	ldrd	r0, [r0]
   15110:	eor	r1, r1, r3
   15114:	eor	r0, r0, r2
   15118:	orr	r0, r0, r1
   1511c:	clz	r0, r0
   15120:	lsr	r2, r0, #5
   15124:	mov	r0, r2
   15128:	pop	{r4, r5, fp, pc}
   1512c:	push	{r4, r5, fp, lr}
   15130:	add	fp, sp, #8
   15134:	ldr	r0, [r0]
   15138:	ldrd	r2, [r0, #160]	; 0xa0
   1513c:	ldr	r0, [r1]
   15140:	ldrd	r4, [r0, #160]	; 0xa0
   15144:	mov	r0, #0
   15148:	subs	r1, r4, r2
   1514c:	sbcs	r1, r5, r3
   15150:	movwcc	r0, #1
   15154:	subs	r1, r2, r4
   15158:	sbcs	r1, r3, r5
   1515c:	subcc	r0, r0, #1
   15160:	pop	{r4, r5, fp, pc}
   15164:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15168:	add	fp, sp, #24
   1516c:	sub	sp, sp, #96	; 0x60
   15170:	ldr	r7, [r0, #44]	; 0x2c
   15174:	mov	r4, r0
   15178:	mov	r5, #0
   1517c:	ldrb	r0, [r7, #49]	; 0x31
   15180:	tst	r0, #2
   15184:	beq	15280 <__assert_fail@plt+0x3d60>
   15188:	ldr	r6, [r7, #52]	; 0x34
   1518c:	mov	r9, r1
   15190:	cmp	r6, #0
   15194:	bne	151d4 <__assert_fail@plt+0x3cb4>
   15198:	movw	r0, #12028	; 0x2efc
   1519c:	movw	r2, #21132	; 0x528c
   151a0:	movw	r3, #21164	; 0x52ac
   151a4:	mov	r1, #0
   151a8:	mov	r8, #0
   151ac:	movt	r0, #1
   151b0:	movt	r2, #1
   151b4:	movt	r3, #1
   151b8:	str	r0, [sp]
   151bc:	mov	r0, #13
   151c0:	bl	15758 <__assert_fail@plt+0x4238>
   151c4:	mov	r6, r0
   151c8:	cmp	r0, #0
   151cc:	str	r0, [r7, #52]	; 0x34
   151d0:	beq	1520c <__assert_fail@plt+0x3cec>
   151d4:	ldrd	r0, [r4, #64]	; 0x40
   151d8:	str	r1, [sp, #12]
   151dc:	str	r0, [sp, #8]
   151e0:	add	r1, sp, #8
   151e4:	mov	r0, r6
   151e8:	bl	154a8 <__assert_fail@plt+0x3f88>
   151ec:	cmp	r0, #0
   151f0:	beq	151fc <__assert_fail@plt+0x3cdc>
   151f4:	ldr	r5, [r0, #8]
   151f8:	b	15280 <__assert_fail@plt+0x3d60>
   151fc:	mov	r8, #1
   15200:	cmp	r9, #0
   15204:	bge	15218 <__assert_fail@plt+0x3cf8>
   15208:	b	15280 <__assert_fail@plt+0x3d60>
   1520c:	mov	r6, #0
   15210:	cmp	r9, #0
   15214:	blt	15280 <__assert_fail@plt+0x3d60>
   15218:	add	r1, sp, #8
   1521c:	mov	r0, r9
   15220:	bl	111e4 <fstatfs64@plt>
   15224:	cmp	r0, #0
   15228:	bne	15280 <__assert_fail@plt+0x3d60>
   1522c:	cmp	r8, #0
   15230:	beq	1527c <__assert_fail@plt+0x3d5c>
   15234:	mov	r0, #16
   15238:	bl	19e50 <__assert_fail@plt+0x8930>
   1523c:	cmp	r0, #0
   15240:	beq	1527c <__assert_fail@plt+0x3d5c>
   15244:	mov	r5, r0
   15248:	ldrd	r0, [r4, #64]	; 0x40
   1524c:	ldr	r2, [sp, #8]
   15250:	stm	r5, {r0, r1, r2}
   15254:	mov	r0, r6
   15258:	mov	r1, r5
   1525c:	bl	1629c <__assert_fail@plt+0x4d7c>
   15260:	cmp	r0, #0
   15264:	beq	15274 <__assert_fail@plt+0x3d54>
   15268:	cmp	r0, r5
   1526c:	beq	1527c <__assert_fail@plt+0x3d5c>
   15270:	bl	114d8 <abort@plt>
   15274:	mov	r0, r5
   15278:	bl	12efc <__assert_fail@plt+0x19dc>
   1527c:	ldr	r5, [sp, #8]
   15280:	mov	r0, r5
   15284:	sub	sp, fp, #24
   15288:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1528c:	push	{fp, lr}
   15290:	mov	fp, sp
   15294:	mov	r2, r1
   15298:	ldrd	r0, [r0]
   1529c:	mov	r3, #0
   152a0:	bl	1a5f8 <__assert_fail@plt+0x90d8>
   152a4:	mov	r0, r2
   152a8:	pop	{fp, pc}
   152ac:	ldrd	r2, [r1]
   152b0:	ldrd	r0, [r0]
   152b4:	eor	r1, r1, r3
   152b8:	eor	r0, r0, r2
   152bc:	orr	r0, r0, r1
   152c0:	clz	r0, r0
   152c4:	lsr	r0, r0, #5
   152c8:	bx	lr
   152cc:	andeq	r0, r0, r0
   152d0:	ldr	r0, [r0, #8]
   152d4:	bx	lr
   152d8:	ldr	r0, [r0, #12]
   152dc:	bx	lr
   152e0:	ldr	r0, [r0, #16]
   152e4:	bx	lr
   152e8:	ldm	r0, {r2, ip}
   152ec:	mov	r0, #0
   152f0:	cmp	r2, ip
   152f4:	bxcs	lr
   152f8:	mov	r0, #0
   152fc:	ldr	r1, [r2]
   15300:	cmp	r1, #0
   15304:	beq	15328 <__assert_fail@plt+0x3e08>
   15308:	mov	r3, #0
   1530c:	mov	r1, r2
   15310:	ldr	r1, [r1, #4]
   15314:	add	r3, r3, #1
   15318:	cmp	r1, #0
   1531c:	bne	15310 <__assert_fail@plt+0x3df0>
   15320:	cmp	r3, r0
   15324:	movhi	r0, r3
   15328:	add	r2, r2, #8
   1532c:	cmp	r2, ip
   15330:	bcc	152fc <__assert_fail@plt+0x3ddc>
   15334:	bx	lr
   15338:	push	{fp, lr}
   1533c:	mov	fp, sp
   15340:	ldm	r0, {r3, ip}
   15344:	mov	lr, #0
   15348:	mov	r1, #0
   1534c:	cmp	r3, ip
   15350:	bcs	1538c <__assert_fail@plt+0x3e6c>
   15354:	mov	r1, #0
   15358:	mov	lr, #0
   1535c:	ldr	r2, [r3]
   15360:	cmp	r2, #0
   15364:	beq	15380 <__assert_fail@plt+0x3e60>
   15368:	mov	r2, r3
   1536c:	ldr	r2, [r2, #4]
   15370:	add	r1, r1, #1
   15374:	cmp	r2, #0
   15378:	bne	1536c <__assert_fail@plt+0x3e4c>
   1537c:	add	lr, lr, #1
   15380:	add	r3, r3, #8
   15384:	cmp	r3, ip
   15388:	bcc	1535c <__assert_fail@plt+0x3e3c>
   1538c:	ldr	r2, [r0, #12]
   15390:	cmp	lr, r2
   15394:	bne	153ac <__assert_fail@plt+0x3e8c>
   15398:	ldr	r2, [r0, #16]
   1539c:	mov	r0, #1
   153a0:	cmp	r1, r2
   153a4:	movne	r0, #0
   153a8:	pop	{fp, pc}
   153ac:	mov	r0, #0
   153b0:	pop	{fp, pc}
   153b4:	nop	{0}
   153b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153bc:	add	fp, sp, #24
   153c0:	sub	sp, sp, #8
   153c4:	ldr	r6, [r0]
   153c8:	ldmib	r0, {r2, r7, r8}
   153cc:	ldr	r3, [r0, #16]
   153d0:	mov	r4, r1
   153d4:	mov	r5, #0
   153d8:	cmp	r6, r2
   153dc:	bcs	1541c <__assert_fail@plt+0x3efc>
   153e0:	mov	r5, #0
   153e4:	ldr	r0, [r6]
   153e8:	cmp	r0, #0
   153ec:	beq	15410 <__assert_fail@plt+0x3ef0>
   153f0:	mov	r0, #0
   153f4:	mov	r1, r6
   153f8:	ldr	r1, [r1, #4]
   153fc:	add	r0, r0, #1
   15400:	cmp	r1, #0
   15404:	bne	153f8 <__assert_fail@plt+0x3ed8>
   15408:	cmp	r0, r5
   1540c:	movhi	r5, r0
   15410:	add	r6, r6, #8
   15414:	cmp	r6, r2
   15418:	bcc	153e4 <__assert_fail@plt+0x3ec4>
   1541c:	movw	r2, #47344	; 0xb8f0
   15420:	mov	r0, r4
   15424:	mov	r1, #1
   15428:	movt	r2, #1
   1542c:	bl	1140c <__fprintf_chk@plt>
   15430:	movw	r2, #47368	; 0xb908
   15434:	mov	r0, r4
   15438:	mov	r1, #1
   1543c:	mov	r3, r7
   15440:	movt	r2, #1
   15444:	bl	1140c <__fprintf_chk@plt>
   15448:	vldr	d16, [pc, #80]	; 154a0 <__assert_fail@plt+0x3f80>
   1544c:	vmov	s0, r8
   15450:	movw	r2, #47392	; 0xb920
   15454:	mov	r0, r4
   15458:	mov	r1, #1
   1545c:	mov	r3, r8
   15460:	vcvt.f64.u32	d17, s0
   15464:	vmov	s0, r7
   15468:	movt	r2, #1
   1546c:	vcvt.f64.u32	d18, s0
   15470:	vmul.f64	d16, d17, d16
   15474:	vdiv.f64	d16, d16, d18
   15478:	vstr	d16, [sp]
   1547c:	bl	1140c <__fprintf_chk@plt>
   15480:	movw	r2, #47425	; 0xb941
   15484:	mov	r0, r4
   15488:	mov	r1, #1
   1548c:	mov	r3, r5
   15490:	movt	r2, #1
   15494:	sub	sp, fp, #24
   15498:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1549c:	b	1140c <__fprintf_chk@plt>
   154a0:	andeq	r0, r0, r0
   154a4:	subsmi	r0, r9, r0
   154a8:	push	{r4, r5, r6, r7, fp, lr}
   154ac:	add	fp, sp, #16
   154b0:	mov	r4, r1
   154b4:	ldr	r1, [r0, #8]
   154b8:	ldr	r2, [r0, #24]
   154bc:	mov	r5, r0
   154c0:	mov	r0, r4
   154c4:	blx	r2
   154c8:	ldr	r1, [r5, #8]
   154cc:	cmp	r0, r1
   154d0:	bcs	1553c <__assert_fail@plt+0x401c>
   154d4:	ldr	r7, [r5]
   154d8:	mov	r6, #0
   154dc:	ldr	r1, [r7, r0, lsl #3]!
   154e0:	cmp	r1, #0
   154e4:	cmpne	r7, #0
   154e8:	bne	154f8 <__assert_fail@plt+0x3fd8>
   154ec:	mov	r0, r6
   154f0:	pop	{r4, r5, r6, r7, fp, pc}
   154f4:	ldr	r1, [r7]
   154f8:	cmp	r1, r4
   154fc:	beq	15524 <__assert_fail@plt+0x4004>
   15500:	ldr	r2, [r5, #28]
   15504:	mov	r0, r4
   15508:	blx	r2
   1550c:	cmp	r0, #0
   15510:	bne	15530 <__assert_fail@plt+0x4010>
   15514:	ldr	r7, [r7, #4]
   15518:	cmp	r7, #0
   1551c:	bne	154f4 <__assert_fail@plt+0x3fd4>
   15520:	b	154ec <__assert_fail@plt+0x3fcc>
   15524:	mov	r6, r4
   15528:	mov	r0, r6
   1552c:	pop	{r4, r5, r6, r7, fp, pc}
   15530:	ldr	r6, [r7]
   15534:	mov	r0, r6
   15538:	pop	{r4, r5, r6, r7, fp, pc}
   1553c:	bl	114d8 <abort@plt>
   15540:	ldr	r1, [r0, #16]
   15544:	cmp	r1, #0
   15548:	moveq	r0, #0
   1554c:	bxeq	lr
   15550:	ldm	r0, {r1, r2}
   15554:	cmp	r1, r2
   15558:	bcs	15570 <__assert_fail@plt+0x4050>
   1555c:	ldr	r0, [r1], #8
   15560:	cmp	r0, #0
   15564:	bxne	lr
   15568:	cmp	r1, r2
   1556c:	bcc	1555c <__assert_fail@plt+0x403c>
   15570:	push	{fp, lr}
   15574:	mov	fp, sp
   15578:	bl	114d8 <abort@plt>
   1557c:	push	{r4, r5, fp, lr}
   15580:	add	fp, sp, #8
   15584:	mov	r5, r1
   15588:	ldr	r1, [r0, #8]
   1558c:	ldr	r2, [r0, #24]
   15590:	mov	r4, r0
   15594:	mov	r0, r5
   15598:	blx	r2
   1559c:	ldr	r1, [r4, #8]
   155a0:	cmp	r0, r1
   155a4:	bcs	15600 <__assert_fail@plt+0x40e0>
   155a8:	ldr	r1, [r4]
   155ac:	add	r2, r1, r0, lsl #3
   155b0:	ldr	r3, [r2]
   155b4:	ldr	r2, [r2, #4]
   155b8:	cmp	r3, r5
   155bc:	beq	155cc <__assert_fail@plt+0x40ac>
   155c0:	cmp	r2, #0
   155c4:	bne	155b0 <__assert_fail@plt+0x4090>
   155c8:	b	155d8 <__assert_fail@plt+0x40b8>
   155cc:	cmp	r2, #0
   155d0:	ldrne	r0, [r2]
   155d4:	popne	{r4, r5, fp, pc}
   155d8:	ldr	r2, [r4, #4]
   155dc:	add	r0, r1, r0, lsl #3
   155e0:	add	r1, r0, #8
   155e4:	cmp	r1, r2
   155e8:	movcs	r0, #0
   155ec:	popcs	{r4, r5, fp, pc}
   155f0:	ldr	r0, [r1], #8
   155f4:	cmp	r0, #0
   155f8:	popne	{r4, r5, fp, pc}
   155fc:	b	155e4 <__assert_fail@plt+0x40c4>
   15600:	bl	114d8 <abort@plt>
   15604:	push	{r4, r5, fp, lr}
   15608:	add	fp, sp, #8
   1560c:	ldm	r0, {r5, lr}
   15610:	mov	ip, r0
   15614:	mov	r0, #0
   15618:	cmp	r5, lr
   1561c:	bcs	15668 <__assert_fail@plt+0x4148>
   15620:	mov	r0, #0
   15624:	ldr	r3, [r5]
   15628:	cmp	r3, #0
   1562c:	cmpne	r5, #0
   15630:	beq	1565c <__assert_fail@plt+0x413c>
   15634:	mov	r3, r5
   15638:	cmp	r0, r2
   1563c:	popcs	{r4, r5, fp, pc}
   15640:	ldr	r4, [r3]
   15644:	str	r4, [r1, r0, lsl #2]
   15648:	add	r0, r0, #1
   1564c:	ldr	r3, [r3, #4]
   15650:	cmp	r3, #0
   15654:	bne	15638 <__assert_fail@plt+0x4118>
   15658:	ldr	lr, [ip, #4]
   1565c:	add	r5, r5, #8
   15660:	cmp	r5, lr
   15664:	bcc	15624 <__assert_fail@plt+0x4104>
   15668:	pop	{r4, r5, fp, pc}
   1566c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15670:	add	fp, sp, #24
   15674:	mov	r5, r1
   15678:	ldr	r4, [r0]
   1567c:	ldr	r1, [r0, #4]
   15680:	mov	r6, #0
   15684:	cmp	r4, r1
   15688:	bcs	156fc <__assert_fail@plt+0x41dc>
   1568c:	mov	r9, r2
   15690:	mov	r8, r0
   15694:	mov	r6, #0
   15698:	b	156e0 <__assert_fail@plt+0x41c0>
   1569c:	mov	r1, r9
   156a0:	blx	r5
   156a4:	cmp	r0, #0
   156a8:	beq	156fc <__assert_fail@plt+0x41dc>
   156ac:	mov	r7, r4
   156b0:	ldr	r7, [r7, #4]
   156b4:	add	r6, r6, #1
   156b8:	cmp	r7, #0
   156bc:	beq	156d8 <__assert_fail@plt+0x41b8>
   156c0:	ldr	r0, [r7]
   156c4:	mov	r1, r9
   156c8:	blx	r5
   156cc:	cmp	r0, #0
   156d0:	bne	156b0 <__assert_fail@plt+0x4190>
   156d4:	b	156fc <__assert_fail@plt+0x41dc>
   156d8:	ldr	r1, [r8, #4]
   156dc:	b	156f0 <__assert_fail@plt+0x41d0>
   156e0:	ldr	r0, [r4]
   156e4:	cmp	r0, #0
   156e8:	cmpne	r4, #0
   156ec:	bne	1569c <__assert_fail@plt+0x417c>
   156f0:	add	r4, r4, #8
   156f4:	cmp	r4, r1
   156f8:	bcc	156e0 <__assert_fail@plt+0x41c0>
   156fc:	mov	r0, r6
   15700:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15704:	ldrb	r2, [r0]
   15708:	cmp	r2, #0
   1570c:	moveq	r0, #0
   15710:	bxeq	lr
   15714:	add	r3, r0, #1
   15718:	mov	r0, #0
   1571c:	rsb	r0, r0, r0, lsl #5
   15720:	uxtab	r0, r0, r2
   15724:	udiv	r2, r0, r1
   15728:	mls	r0, r2, r1, r0
   1572c:	ldrb	r2, [r3], #1
   15730:	cmp	r2, #0
   15734:	bne	1571c <__assert_fail@plt+0x41fc>
   15738:	bx	lr
   1573c:	movw	r1, #47456	; 0xb960
   15740:	movt	r1, #1
   15744:	vld1.32	{d16-d17}, [r1]!
   15748:	ldr	r1, [r1]
   1574c:	vst1.32	{d16-d17}, [r0]!
   15750:	str	r1, [r0]
   15754:	bx	lr
   15758:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1575c:	add	fp, sp, #24
   15760:	movw	r9, #22912	; 0x5980
   15764:	movw	r5, #22892	; 0x596c
   15768:	cmp	r3, #0
   1576c:	mov	r6, r0
   15770:	mov	r0, #40	; 0x28
   15774:	mov	r7, r1
   15778:	movt	r9, #1
   1577c:	movt	r5, #1
   15780:	movne	r9, r3
   15784:	cmp	r2, #0
   15788:	movne	r5, r2
   1578c:	bl	19e50 <__assert_fail@plt+0x8930>
   15790:	mov	r8, #0
   15794:	cmp	r0, #0
   15798:	beq	15954 <__assert_fail@plt+0x4434>
   1579c:	mov	r4, r0
   157a0:	movw	r0, #47456	; 0xb960
   157a4:	cmp	r7, #0
   157a8:	movt	r0, #1
   157ac:	moveq	r7, r0
   157b0:	cmp	r7, r0
   157b4:	str	r7, [r4, #20]
   157b8:	beq	15834 <__assert_fail@plt+0x4314>
   157bc:	vldr	s2, [pc, #408]	; 1595c <__assert_fail@plt+0x443c>
   157c0:	vldr	s0, [r7, #8]
   157c4:	vcmpe.f32	s0, s2
   157c8:	vmrs	APSR_nzcv, fpscr
   157cc:	ble	158e0 <__assert_fail@plt+0x43c0>
   157d0:	vldr	s4, [pc, #392]	; 15960 <__assert_fail@plt+0x4440>
   157d4:	vcmpe.f32	s0, s4
   157d8:	vmrs	APSR_nzcv, fpscr
   157dc:	bpl	158e0 <__assert_fail@plt+0x43c0>
   157e0:	vldr	s4, [pc, #380]	; 15964 <__assert_fail@plt+0x4444>
   157e4:	vldr	s6, [r7, #12]
   157e8:	vcmpe.f32	s6, s4
   157ec:	vmrs	APSR_nzcv, fpscr
   157f0:	ble	158e0 <__assert_fail@plt+0x43c0>
   157f4:	vldr	s4, [r7]
   157f8:	vcmpe.f32	s4, #0.0
   157fc:	vmrs	APSR_nzcv, fpscr
   15800:	blt	158e0 <__assert_fail@plt+0x43c0>
   15804:	vadd.f32	s2, s4, s2
   15808:	vcmpe.f32	s2, s0
   1580c:	vmrs	APSR_nzcv, fpscr
   15810:	bpl	158e0 <__assert_fail@plt+0x43c0>
   15814:	vldr	s0, [r7, #4]
   15818:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1581c:	vcmpe.f32	s0, s4
   15820:	vmrs	APSR_nzcv, fpscr
   15824:	bhi	158e0 <__assert_fail@plt+0x43c0>
   15828:	vcmpe.f32	s2, s0
   1582c:	vmrs	APSR_nzcv, fpscr
   15830:	bpl	158e0 <__assert_fail@plt+0x43c0>
   15834:	ldrb	r0, [r7, #16]
   15838:	cmp	r0, #0
   1583c:	bne	15868 <__assert_fail@plt+0x4348>
   15840:	vldr	s0, [r7, #8]
   15844:	vldr	s4, [pc, #284]	; 15968 <__assert_fail@plt+0x4448>
   15848:	vmov	s2, r6
   1584c:	vcvt.f32.u32	s2, s2
   15850:	vdiv.f32	s2, s2, s0
   15854:	vcmpe.f32	s2, s4
   15858:	vcvt.u32.f32	s0, s2
   1585c:	vmrs	APSR_nzcv, fpscr
   15860:	bge	158f0 <__assert_fail@plt+0x43d0>
   15864:	vmov	r6, s0
   15868:	cmp	r6, #10
   1586c:	movls	r6, #10
   15870:	orr	r0, r6, #1
   15874:	cmn	r0, #1
   15878:	beq	158f0 <__assert_fail@plt+0x43d0>
   1587c:	ldr	r6, [fp, #8]
   15880:	mov	r1, #3
   15884:	cmp	r0, #10
   15888:	bcc	158c0 <__assert_fail@plt+0x43a0>
   1588c:	mov	r1, #3
   15890:	mov	r3, #9
   15894:	mov	r2, #12
   15898:	udiv	r7, r0, r1
   1589c:	mls	r7, r7, r1, r0
   158a0:	cmp	r7, #0
   158a4:	beq	158c0 <__assert_fail@plt+0x43a0>
   158a8:	add	r3, r3, r2
   158ac:	add	r2, r2, #8
   158b0:	add	r1, r1, #2
   158b4:	add	r3, r3, #4
   158b8:	cmp	r3, r0
   158bc:	bcc	15898 <__assert_fail@plt+0x4378>
   158c0:	udiv	r2, r0, r1
   158c4:	mls	r1, r2, r1, r0
   158c8:	cmp	r1, #0
   158cc:	bne	158e8 <__assert_fail@plt+0x43c8>
   158d0:	add	r0, r0, #2
   158d4:	cmn	r0, #1
   158d8:	bne	15880 <__assert_fail@plt+0x4360>
   158dc:	b	158f0 <__assert_fail@plt+0x43d0>
   158e0:	str	r0, [r4, #20]
   158e4:	b	158f8 <__assert_fail@plt+0x43d8>
   158e8:	cmp	r0, #536870912	; 0x20000000
   158ec:	bcc	15908 <__assert_fail@plt+0x43e8>
   158f0:	mov	r0, #0
   158f4:	str	r0, [r4, #8]
   158f8:	mov	r0, r4
   158fc:	bl	12efc <__assert_fail@plt+0x19dc>
   15900:	mov	r0, r8
   15904:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15908:	cmp	r0, #0
   1590c:	str	r0, [r4, #8]
   15910:	beq	158f8 <__assert_fail@plt+0x43d8>
   15914:	mov	r1, #8
   15918:	bl	19dfc <__assert_fail@plt+0x88dc>
   1591c:	cmp	r0, #0
   15920:	str	r0, [r4]
   15924:	beq	158f8 <__assert_fail@plt+0x43d8>
   15928:	mov	r1, #0
   1592c:	mov	r8, r4
   15930:	str	r1, [r4, #12]
   15934:	str	r1, [r4, #16]
   15938:	str	r5, [r4, #24]
   1593c:	str	r9, [r4, #28]
   15940:	str	r6, [r4, #32]
   15944:	str	r1, [r4, #36]	; 0x24
   15948:	ldr	r1, [r4, #8]
   1594c:	add	r0, r0, r1, lsl #3
   15950:	str	r0, [r4, #4]
   15954:	mov	r0, r8
   15958:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1595c:	stclcc	12, cr12, [ip, #820]	; 0x334
   15960:	svccc	0x00666666
   15964:	svccc	0x008ccccd
   15968:	svcmi	0x00800000
   1596c:	ror	r2, r0, #3
   15970:	udiv	r2, r2, r1
   15974:	mul	r1, r2, r1
   15978:	rsb	r0, r1, r0, ror #3
   1597c:	bx	lr
   15980:	sub	r0, r0, r1
   15984:	clz	r0, r0
   15988:	lsr	r0, r0, #5
   1598c:	bx	lr
   15990:	push	{r4, r5, r6, r7, fp, lr}
   15994:	add	fp, sp, #16
   15998:	mov	r4, r0
   1599c:	ldr	r5, [r0]
   159a0:	ldr	r0, [r0, #4]
   159a4:	cmp	r5, r0
   159a8:	bcs	15a40 <__assert_fail@plt+0x4520>
   159ac:	mov	r6, #0
   159b0:	ldr	r1, [r5]
   159b4:	cmp	r1, #0
   159b8:	beq	15a34 <__assert_fail@plt+0x4514>
   159bc:	ldr	r1, [r4, #32]
   159c0:	ldr	r7, [r5, #4]
   159c4:	cmp	r1, #0
   159c8:	mov	r0, r1
   159cc:	movwne	r0, #1
   159d0:	cmp	r7, #0
   159d4:	beq	15a18 <__assert_fail@plt+0x44f8>
   159d8:	tst	r0, #1
   159dc:	beq	159ec <__assert_fail@plt+0x44cc>
   159e0:	ldr	r0, [r7]
   159e4:	blx	r1
   159e8:	ldr	r1, [r4, #32]
   159ec:	str	r6, [r7]
   159f0:	cmp	r1, #0
   159f4:	ldr	r0, [r4, #36]	; 0x24
   159f8:	ldr	r2, [r7, #4]
   159fc:	str	r0, [r7, #4]
   15a00:	mov	r0, r1
   15a04:	str	r7, [r4, #36]	; 0x24
   15a08:	mov	r7, r2
   15a0c:	movwne	r0, #1
   15a10:	cmp	r2, #0
   15a14:	bne	159d8 <__assert_fail@plt+0x44b8>
   15a18:	cmp	r0, #0
   15a1c:	beq	15a28 <__assert_fail@plt+0x4508>
   15a20:	ldr	r0, [r5]
   15a24:	blx	r1
   15a28:	str	r6, [r5]
   15a2c:	str	r6, [r5, #4]
   15a30:	ldr	r0, [r4, #4]
   15a34:	add	r5, r5, #8
   15a38:	cmp	r5, r0
   15a3c:	bcc	159b0 <__assert_fail@plt+0x4490>
   15a40:	mov	r0, #0
   15a44:	str	r0, [r4, #12]
   15a48:	str	r0, [r4, #16]
   15a4c:	pop	{r4, r5, r6, r7, fp, pc}
   15a50:	push	{r4, r5, r6, sl, fp, lr}
   15a54:	add	fp, sp, #16
   15a58:	mov	r4, r0
   15a5c:	ldr	r0, [r0, #32]
   15a60:	cmp	r0, #0
   15a64:	ldrne	r0, [r4, #16]
   15a68:	cmpne	r0, #0
   15a6c:	beq	15ad4 <__assert_fail@plt+0x45b4>
   15a70:	ldr	r5, [r4]
   15a74:	ldr	r1, [r4, #4]
   15a78:	cmp	r5, r1
   15a7c:	bcc	15a90 <__assert_fail@plt+0x4570>
   15a80:	b	15ad4 <__assert_fail@plt+0x45b4>
   15a84:	add	r5, r5, #8
   15a88:	cmp	r5, r1
   15a8c:	bcs	15ad4 <__assert_fail@plt+0x45b4>
   15a90:	ldr	r0, [r5]
   15a94:	cmp	r0, #0
   15a98:	cmpne	r5, #0
   15a9c:	beq	15a84 <__assert_fail@plt+0x4564>
   15aa0:	ldr	r1, [r4, #32]
   15aa4:	blx	r1
   15aa8:	ldr	r6, [r5, #4]
   15aac:	cmp	r6, #0
   15ab0:	beq	15acc <__assert_fail@plt+0x45ac>
   15ab4:	ldr	r1, [r4, #32]
   15ab8:	ldr	r0, [r6]
   15abc:	blx	r1
   15ac0:	ldr	r6, [r6, #4]
   15ac4:	cmp	r6, #0
   15ac8:	bne	15ab4 <__assert_fail@plt+0x4594>
   15acc:	ldr	r1, [r4, #4]
   15ad0:	b	15a84 <__assert_fail@plt+0x4564>
   15ad4:	ldr	r5, [r4]
   15ad8:	ldr	r1, [r4, #4]
   15adc:	cmp	r5, r1
   15ae0:	bcc	15af4 <__assert_fail@plt+0x45d4>
   15ae4:	b	15b1c <__assert_fail@plt+0x45fc>
   15ae8:	add	r5, r5, #8
   15aec:	cmp	r5, r1
   15af0:	bcs	15b1c <__assert_fail@plt+0x45fc>
   15af4:	ldr	r0, [r5, #4]
   15af8:	cmp	r0, #0
   15afc:	beq	15ae8 <__assert_fail@plt+0x45c8>
   15b00:	ldr	r6, [r0, #4]
   15b04:	bl	12efc <__assert_fail@plt+0x19dc>
   15b08:	cmp	r6, #0
   15b0c:	mov	r0, r6
   15b10:	bne	15b00 <__assert_fail@plt+0x45e0>
   15b14:	ldr	r1, [r4, #4]
   15b18:	b	15ae8 <__assert_fail@plt+0x45c8>
   15b1c:	ldr	r0, [r4, #36]	; 0x24
   15b20:	cmp	r0, #0
   15b24:	beq	15b3c <__assert_fail@plt+0x461c>
   15b28:	ldr	r5, [r0, #4]
   15b2c:	bl	12efc <__assert_fail@plt+0x19dc>
   15b30:	cmp	r5, #0
   15b34:	mov	r0, r5
   15b38:	bne	15b28 <__assert_fail@plt+0x4608>
   15b3c:	ldr	r0, [r4]
   15b40:	bl	12efc <__assert_fail@plt+0x19dc>
   15b44:	mov	r0, r4
   15b48:	pop	{r4, r5, r6, sl, fp, lr}
   15b4c:	b	12efc <__assert_fail@plt+0x19dc>
   15b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b54:	add	fp, sp, #28
   15b58:	sub	sp, sp, #44	; 0x2c
   15b5c:	mov	r7, r0
   15b60:	mov	r4, r0
   15b64:	ldr	r0, [r7, #20]!
   15b68:	ldrb	r2, [r0, #16]
   15b6c:	cmp	r2, #0
   15b70:	bne	15ba0 <__assert_fail@plt+0x4680>
   15b74:	vldr	s0, [r0, #8]
   15b78:	vldr	s4, [pc, #560]	; 15db0 <__assert_fail@plt+0x4890>
   15b7c:	vmov	s2, r1
   15b80:	mov	r5, #0
   15b84:	vcvt.f32.u32	s2, s2
   15b88:	vdiv.f32	s2, s2, s0
   15b8c:	vcmpe.f32	s2, s4
   15b90:	vcvt.u32.f32	s0, s2
   15b94:	vmrs	APSR_nzcv, fpscr
   15b98:	bge	15da0 <__assert_fail@plt+0x4880>
   15b9c:	vmov	r1, s0
   15ba0:	cmp	r1, #10
   15ba4:	mov	r5, #0
   15ba8:	movls	r1, #10
   15bac:	orr	r6, r1, #1
   15bb0:	cmn	r6, #1
   15bb4:	bne	15bc8 <__assert_fail@plt+0x46a8>
   15bb8:	b	15da0 <__assert_fail@plt+0x4880>
   15bbc:	add	r6, r6, #2
   15bc0:	cmn	r6, #1
   15bc4:	beq	15da0 <__assert_fail@plt+0x4880>
   15bc8:	mov	r0, #3
   15bcc:	cmp	r6, #10
   15bd0:	bcc	15c08 <__assert_fail@plt+0x46e8>
   15bd4:	mov	r0, #3
   15bd8:	mov	r2, #9
   15bdc:	mov	r1, #12
   15be0:	udiv	r3, r6, r0
   15be4:	mls	r3, r3, r0, r6
   15be8:	cmp	r3, #0
   15bec:	beq	15c08 <__assert_fail@plt+0x46e8>
   15bf0:	add	r2, r2, r1
   15bf4:	add	r1, r1, #8
   15bf8:	add	r0, r0, #2
   15bfc:	add	r2, r2, #4
   15c00:	cmp	r2, r6
   15c04:	bcc	15be0 <__assert_fail@plt+0x46c0>
   15c08:	udiv	r1, r6, r0
   15c0c:	mls	r0, r1, r0, r6
   15c10:	cmp	r0, #0
   15c14:	beq	15bbc <__assert_fail@plt+0x469c>
   15c18:	sub	r0, r6, #1
   15c1c:	cmn	r0, #-536870910	; 0xe0000002
   15c20:	bhi	15da0 <__assert_fail@plt+0x4880>
   15c24:	ldr	r0, [r4, #8]
   15c28:	cmp	r6, r0
   15c2c:	bne	15c38 <__assert_fail@plt+0x4718>
   15c30:	mov	r5, #1
   15c34:	b	15da0 <__assert_fail@plt+0x4880>
   15c38:	mov	r0, r6
   15c3c:	mov	r1, #8
   15c40:	bl	19dfc <__assert_fail@plt+0x88dc>
   15c44:	cmp	r0, #0
   15c48:	str	r0, [sp, #4]
   15c4c:	beq	15da0 <__assert_fail@plt+0x4880>
   15c50:	mov	r1, #0
   15c54:	add	r0, r0, r6, lsl #3
   15c58:	str	r6, [sp, #12]
   15c5c:	add	r5, sp, #4
   15c60:	mov	sl, r4
   15c64:	mov	r2, #0
   15c68:	str	r1, [sp, #16]
   15c6c:	str	r1, [sp, #20]
   15c70:	str	r0, [sp, #8]
   15c74:	add	r0, r5, #20
   15c78:	mov	r1, r4
   15c7c:	vld1.32	{d16-d17}, [r7]
   15c80:	vst1.32	{d16-d17}, [r0]
   15c84:	ldr	r0, [sl, #36]!	; 0x24
   15c88:	str	r0, [sp, #40]	; 0x28
   15c8c:	mov	r0, r5
   15c90:	bl	15db4 <__assert_fail@plt+0x4894>
   15c94:	cmp	r0, #0
   15c98:	beq	15cc0 <__assert_fail@plt+0x47a0>
   15c9c:	ldr	r0, [r4]
   15ca0:	bl	12efc <__assert_fail@plt+0x19dc>
   15ca4:	mov	r0, #36	; 0x24
   15ca8:	vld1.32	{d16-d17}, [r5], r0
   15cac:	vst1.32	{d16-d17}, [r4], r0
   15cb0:	ldr	r0, [r5]
   15cb4:	mov	r5, #1
   15cb8:	str	r0, [r4]
   15cbc:	b	15da0 <__assert_fail@plt+0x4880>
   15cc0:	ldr	r0, [sp, #40]	; 0x28
   15cc4:	str	r0, [sl]
   15cc8:	ldr	r0, [sp, #8]
   15ccc:	ldr	r8, [sp, #4]
   15cd0:	cmp	r8, r0
   15cd4:	str	r0, [sp]
   15cd8:	bcs	15d7c <__assert_fail@plt+0x485c>
   15cdc:	mov	r9, #0
   15ce0:	ldr	r0, [r8]
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d6c <__assert_fail@plt+0x484c>
   15cec:	ldr	r6, [r8, #4]
   15cf0:	cmp	r6, #0
   15cf4:	beq	15d68 <__assert_fail@plt+0x4848>
   15cf8:	ldr	r1, [r4, #8]
   15cfc:	ldr	r5, [r6]
   15d00:	ldr	r2, [r4, #24]
   15d04:	mov	r0, r5
   15d08:	blx	r2
   15d0c:	ldr	r1, [r4, #8]
   15d10:	cmp	r0, r1
   15d14:	bcs	15dac <__assert_fail@plt+0x488c>
   15d18:	ldr	r3, [r4]
   15d1c:	ldr	r2, [r6, #4]
   15d20:	ldr	r7, [r3, r0, lsl #3]
   15d24:	cmp	r7, #0
   15d28:	beq	15d38 <__assert_fail@plt+0x4818>
   15d2c:	add	r0, r3, r0, lsl #3
   15d30:	add	r0, r0, #4
   15d34:	b	15d50 <__assert_fail@plt+0x4830>
   15d38:	str	r5, [r3, r0, lsl #3]
   15d3c:	ldr	r0, [r4, #12]
   15d40:	add	r0, r0, #1
   15d44:	str	r0, [r4, #12]
   15d48:	mov	r0, sl
   15d4c:	str	r9, [r6]
   15d50:	ldr	r3, [r0]
   15d54:	cmp	r2, #0
   15d58:	str	r3, [r6, #4]
   15d5c:	str	r6, [r0]
   15d60:	mov	r6, r2
   15d64:	bne	15cfc <__assert_fail@plt+0x47dc>
   15d68:	str	r9, [r8, #4]
   15d6c:	ldr	r0, [sp]
   15d70:	add	r8, r8, #8
   15d74:	cmp	r8, r0
   15d78:	bcc	15ce0 <__assert_fail@plt+0x47c0>
   15d7c:	add	r1, sp, #4
   15d80:	mov	r0, r4
   15d84:	mov	r2, #0
   15d88:	mov	r5, #0
   15d8c:	bl	15db4 <__assert_fail@plt+0x4894>
   15d90:	cmp	r0, #0
   15d94:	beq	15dac <__assert_fail@plt+0x488c>
   15d98:	ldr	r0, [sp, #4]
   15d9c:	bl	12efc <__assert_fail@plt+0x19dc>
   15da0:	mov	r0, r5
   15da4:	sub	sp, fp, #28
   15da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dac:	bl	114d8 <abort@plt>
   15db0:	svcmi	0x00800000
   15db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15db8:	add	fp, sp, #28
   15dbc:	sub	sp, sp, #12
   15dc0:	ldr	sl, [r1]
   15dc4:	str	r1, [sp, #8]
   15dc8:	ldr	r1, [r1, #4]
   15dcc:	mov	r7, r0
   15dd0:	mov	r0, #1
   15dd4:	str	r2, [sp, #4]
   15dd8:	cmp	sl, r1
   15ddc:	bcs	15f38 <__assert_fail@plt+0x4a18>
   15de0:	add	r8, r7, #36	; 0x24
   15de4:	mov	r9, #0
   15de8:	ldr	r4, [sl]
   15dec:	cmp	r4, #0
   15df0:	beq	15f20 <__assert_fail@plt+0x4a00>
   15df4:	ldr	r5, [sl, #4]
   15df8:	cmp	r5, #0
   15dfc:	beq	15e74 <__assert_fail@plt+0x4954>
   15e00:	ldr	r1, [r7, #8]
   15e04:	ldr	r4, [r5]
   15e08:	ldr	r2, [r7, #24]
   15e0c:	mov	r0, r4
   15e10:	blx	r2
   15e14:	ldr	r1, [r7, #8]
   15e18:	cmp	r0, r1
   15e1c:	bcs	15f4c <__assert_fail@plt+0x4a2c>
   15e20:	ldr	r3, [r7]
   15e24:	ldr	r2, [r5, #4]
   15e28:	ldr	r6, [r3, r0, lsl #3]
   15e2c:	cmp	r6, #0
   15e30:	beq	15e40 <__assert_fail@plt+0x4920>
   15e34:	add	r0, r3, r0, lsl #3
   15e38:	add	r0, r0, #4
   15e3c:	b	15e58 <__assert_fail@plt+0x4938>
   15e40:	str	r4, [r3, r0, lsl #3]
   15e44:	ldr	r0, [r7, #12]
   15e48:	add	r0, r0, #1
   15e4c:	str	r0, [r7, #12]
   15e50:	mov	r0, r8
   15e54:	str	r9, [r5]
   15e58:	ldr	r3, [r0]
   15e5c:	cmp	r2, #0
   15e60:	str	r3, [r5, #4]
   15e64:	str	r5, [r0]
   15e68:	mov	r5, r2
   15e6c:	bne	15e04 <__assert_fail@plt+0x48e4>
   15e70:	ldr	r4, [sl]
   15e74:	ldr	r0, [sp, #4]
   15e78:	str	r9, [sl, #4]
   15e7c:	cmp	r0, #0
   15e80:	bne	15f20 <__assert_fail@plt+0x4a00>
   15e84:	ldr	r1, [r7, #8]
   15e88:	ldr	r2, [r7, #24]
   15e8c:	mov	r0, r4
   15e90:	blx	r2
   15e94:	mov	r5, r0
   15e98:	ldr	r0, [r7, #8]
   15e9c:	cmp	r5, r0
   15ea0:	bcs	15f4c <__assert_fail@plt+0x4a2c>
   15ea4:	ldr	r6, [r7]
   15ea8:	ldr	r0, [r6, r5, lsl #3]
   15eac:	cmp	r0, #0
   15eb0:	beq	15ed0 <__assert_fail@plt+0x49b0>
   15eb4:	ldr	r0, [r8]
   15eb8:	cmp	r0, #0
   15ebc:	beq	15ee4 <__assert_fail@plt+0x49c4>
   15ec0:	mov	r1, r0
   15ec4:	ldr	r2, [r1, #4]!
   15ec8:	str	r2, [r8]
   15ecc:	b	15ef8 <__assert_fail@plt+0x49d8>
   15ed0:	str	r4, [r6, r5, lsl #3]
   15ed4:	ldr	r0, [r7, #12]
   15ed8:	add	r0, r0, #1
   15edc:	str	r0, [r7, #12]
   15ee0:	b	15f0c <__assert_fail@plt+0x49ec>
   15ee4:	mov	r0, #8
   15ee8:	bl	19e50 <__assert_fail@plt+0x8930>
   15eec:	cmp	r0, #0
   15ef0:	beq	15f40 <__assert_fail@plt+0x4a20>
   15ef4:	add	r1, r0, #4
   15ef8:	str	r4, [r0]
   15efc:	add	r2, r6, r5, lsl #3
   15f00:	ldr	r3, [r2, #4]
   15f04:	str	r3, [r1]
   15f08:	str	r0, [r2, #4]
   15f0c:	ldr	r1, [sp, #8]
   15f10:	str	r9, [sl]
   15f14:	ldr	r0, [r1, #12]
   15f18:	sub	r0, r0, #1
   15f1c:	str	r0, [r1, #12]
   15f20:	ldr	r0, [sp, #8]
   15f24:	add	sl, sl, #8
   15f28:	ldr	r0, [r0, #4]
   15f2c:	cmp	sl, r0
   15f30:	bcc	15de8 <__assert_fail@plt+0x48c8>
   15f34:	mov	r0, #1
   15f38:	sub	sp, fp, #28
   15f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f40:	mov	r0, #0
   15f44:	sub	sp, fp, #28
   15f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f4c:	bl	114d8 <abort@plt>
   15f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f54:	add	fp, sp, #28
   15f58:	sub	sp, sp, #4
   15f5c:	cmp	r1, #0
   15f60:	beq	16284 <__assert_fail@plt+0x4d64>
   15f64:	mov	r8, r2
   15f68:	mov	sl, r1
   15f6c:	ldr	r1, [r0, #8]
   15f70:	ldr	r2, [r0, #24]
   15f74:	mov	r4, r0
   15f78:	mov	r0, sl
   15f7c:	blx	r2
   15f80:	mov	r7, r0
   15f84:	ldr	r0, [r4, #8]
   15f88:	cmp	r7, r0
   15f8c:	bcs	16284 <__assert_fail@plt+0x4d64>
   15f90:	ldr	r5, [r4]
   15f94:	mov	r9, r5
   15f98:	ldr	r1, [r9, r7, lsl #3]!
   15f9c:	cmp	r1, #0
   15fa0:	beq	1602c <__assert_fail@plt+0x4b0c>
   15fa4:	cmp	r1, sl
   15fa8:	beq	15fd4 <__assert_fail@plt+0x4ab4>
   15fac:	ldr	r2, [r4, #28]
   15fb0:	mov	r0, sl
   15fb4:	blx	r2
   15fb8:	cmp	r0, #0
   15fbc:	mov	r6, r9
   15fc0:	beq	15fe8 <__assert_fail@plt+0x4ac8>
   15fc4:	ldr	r0, [r6]
   15fc8:	cmp	r0, #0
   15fcc:	bne	15fd8 <__assert_fail@plt+0x4ab8>
   15fd0:	b	1602c <__assert_fail@plt+0x4b0c>
   15fd4:	mov	r0, sl
   15fd8:	cmp	r8, #0
   15fdc:	mov	r7, #0
   15fe0:	strne	r0, [r8]
   15fe4:	b	16220 <__assert_fail@plt+0x4d00>
   15fe8:	add	r6, r5, r7, lsl #3
   15fec:	ldr	r0, [r6, #4]!
   15ff0:	cmp	r0, #0
   15ff4:	beq	1602c <__assert_fail@plt+0x4b0c>
   15ff8:	ldr	r1, [r0]
   15ffc:	cmp	r1, sl
   16000:	beq	16020 <__assert_fail@plt+0x4b00>
   16004:	ldr	r2, [r4, #28]
   16008:	mov	r0, sl
   1600c:	blx	r2
   16010:	ldr	r6, [r6]
   16014:	cmp	r0, #0
   16018:	beq	15fec <__assert_fail@plt+0x4acc>
   1601c:	b	15fc4 <__assert_fail@plt+0x4aa4>
   16020:	mov	r0, sl
   16024:	cmp	r0, #0
   16028:	bne	15fd8 <__assert_fail@plt+0x4ab8>
   1602c:	vldr	s0, [r4, #8]
   16030:	vldr	s2, [r4, #12]
   16034:	ldr	r0, [r4, #20]
   16038:	vcvt.f32.u32	s0, s0
   1603c:	vcvt.f32.u32	s4, s2
   16040:	vldr	s2, [r0, #8]
   16044:	vmul.f32	s6, s2, s0
   16048:	vcmpe.f32	s6, s4
   1604c:	vmrs	APSR_nzcv, fpscr
   16050:	bpl	161a4 <__assert_fail@plt+0x4c84>
   16054:	movw	r1, #47456	; 0xb960
   16058:	movt	r1, #1
   1605c:	cmp	r0, r1
   16060:	beq	160ec <__assert_fail@plt+0x4bcc>
   16064:	vldr	s6, [pc, #540]	; 16288 <__assert_fail@plt+0x4d68>
   16068:	vcmpe.f32	s2, s6
   1606c:	vmrs	APSR_nzcv, fpscr
   16070:	ble	160d8 <__assert_fail@plt+0x4bb8>
   16074:	vldr	s8, [pc, #528]	; 1628c <__assert_fail@plt+0x4d6c>
   16078:	vcmpe.f32	s2, s8
   1607c:	vmrs	APSR_nzcv, fpscr
   16080:	bpl	160d8 <__assert_fail@plt+0x4bb8>
   16084:	vldr	s8, [pc, #516]	; 16290 <__assert_fail@plt+0x4d70>
   16088:	vldr	s10, [r0, #12]
   1608c:	vcmpe.f32	s10, s8
   16090:	vmrs	APSR_nzcv, fpscr
   16094:	ble	160d8 <__assert_fail@plt+0x4bb8>
   16098:	vldr	s8, [r0]
   1609c:	vcmpe.f32	s8, #0.0
   160a0:	vmrs	APSR_nzcv, fpscr
   160a4:	blt	160d8 <__assert_fail@plt+0x4bb8>
   160a8:	vadd.f32	s6, s8, s6
   160ac:	vcmpe.f32	s6, s2
   160b0:	vmrs	APSR_nzcv, fpscr
   160b4:	bpl	160d8 <__assert_fail@plt+0x4bb8>
   160b8:	vldr	s8, [r0, #4]
   160bc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   160c0:	vcmpe.f32	s8, s10
   160c4:	vmrs	APSR_nzcv, fpscr
   160c8:	bhi	160d8 <__assert_fail@plt+0x4bb8>
   160cc:	vcmpe.f32	s6, s8
   160d0:	vmrs	APSR_nzcv, fpscr
   160d4:	bmi	160f0 <__assert_fail@plt+0x4bd0>
   160d8:	vldr	s2, [pc, #436]	; 16294 <__assert_fail@plt+0x4d74>
   160dc:	movw	r0, #47456	; 0xb960
   160e0:	movt	r0, #1
   160e4:	str	r0, [r4, #20]
   160e8:	b	160f0 <__assert_fail@plt+0x4bd0>
   160ec:	mov	r0, r1
   160f0:	vmul.f32	s6, s2, s0
   160f4:	vcmpe.f32	s6, s4
   160f8:	vmrs	APSR_nzcv, fpscr
   160fc:	bpl	161a4 <__assert_fail@plt+0x4c84>
   16100:	vldr	s4, [r0, #12]
   16104:	ldrb	r0, [r0, #16]
   16108:	mvn	r7, #0
   1610c:	vmul.f32	s0, s4, s0
   16110:	vldr	s4, [pc, #384]	; 16298 <__assert_fail@plt+0x4d78>
   16114:	cmp	r0, #0
   16118:	vmul.f32	s2, s2, s0
   1611c:	vseleq.f32	s0, s2, s0
   16120:	vcmpe.f32	s0, s4
   16124:	vmrs	APSR_nzcv, fpscr
   16128:	bge	16220 <__assert_fail@plt+0x4d00>
   1612c:	vcvt.u32.f32	s0, s0
   16130:	mov	r0, r4
   16134:	vmov	r1, s0
   16138:	bl	15b50 <__assert_fail@plt+0x4630>
   1613c:	cmp	r0, #0
   16140:	beq	16220 <__assert_fail@plt+0x4d00>
   16144:	ldr	r1, [r4, #8]
   16148:	ldr	r2, [r4, #24]
   1614c:	mov	r0, sl
   16150:	blx	r2
   16154:	mov	r7, r0
   16158:	ldr	r0, [r4, #8]
   1615c:	cmp	r7, r0
   16160:	bcs	16284 <__assert_fail@plt+0x4d64>
   16164:	ldr	r5, [r4]
   16168:	mov	r9, r5
   1616c:	ldr	r1, [r9, r7, lsl #3]!
   16170:	cmp	r1, #0
   16174:	beq	161cc <__assert_fail@plt+0x4cac>
   16178:	cmp	r1, sl
   1617c:	mov	r0, sl
   16180:	beq	1619c <__assert_fail@plt+0x4c7c>
   16184:	ldr	r2, [r4, #28]
   16188:	mov	r0, sl
   1618c:	blx	r2
   16190:	cmp	r0, #0
   16194:	beq	16234 <__assert_fail@plt+0x4d14>
   16198:	ldr	r0, [r9]
   1619c:	cmp	r0, #0
   161a0:	bne	16284 <__assert_fail@plt+0x4d64>
   161a4:	ldr	r0, [r9]
   161a8:	cmp	r0, #0
   161ac:	beq	161cc <__assert_fail@plt+0x4cac>
   161b0:	ldr	r0, [r4, #36]	; 0x24
   161b4:	cmp	r0, #0
   161b8:	beq	161ec <__assert_fail@plt+0x4ccc>
   161bc:	mov	r1, r0
   161c0:	ldr	r2, [r1, #4]!
   161c4:	str	r2, [r4, #36]	; 0x24
   161c8:	b	16200 <__assert_fail@plt+0x4ce0>
   161cc:	str	sl, [r9]
   161d0:	ldr	r0, [r4, #12]
   161d4:	ldr	r1, [r4, #16]
   161d8:	add	r0, r0, #1
   161dc:	add	r1, r1, #1
   161e0:	str	r0, [r4, #12]
   161e4:	str	r1, [r4, #16]
   161e8:	b	1621c <__assert_fail@plt+0x4cfc>
   161ec:	mov	r0, #8
   161f0:	bl	19e50 <__assert_fail@plt+0x8930>
   161f4:	cmp	r0, #0
   161f8:	beq	1622c <__assert_fail@plt+0x4d0c>
   161fc:	add	r1, r0, #4
   16200:	str	sl, [r0]
   16204:	ldr	r2, [r9, #4]
   16208:	str	r2, [r1]
   1620c:	str	r0, [r9, #4]
   16210:	ldr	r0, [r4, #16]
   16214:	add	r0, r0, #1
   16218:	str	r0, [r4, #16]
   1621c:	mov	r7, #1
   16220:	mov	r0, r7
   16224:	sub	sp, fp, #28
   16228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1622c:	mvn	r7, #0
   16230:	b	16220 <__assert_fail@plt+0x4d00>
   16234:	add	r6, r5, r7, lsl #3
   16238:	ldr	r0, [r6, #4]!
   1623c:	cmp	r0, #0
   16240:	beq	161a4 <__assert_fail@plt+0x4c84>
   16244:	ldr	r1, [r0]
   16248:	cmp	r1, sl
   1624c:	beq	16278 <__assert_fail@plt+0x4d58>
   16250:	ldr	r2, [r4, #28]
   16254:	mov	r0, sl
   16258:	blx	r2
   1625c:	ldr	r6, [r6]
   16260:	cmp	r0, #0
   16264:	beq	16238 <__assert_fail@plt+0x4d18>
   16268:	ldr	r0, [r6]
   1626c:	cmp	r0, #0
   16270:	beq	161a4 <__assert_fail@plt+0x4c84>
   16274:	b	16284 <__assert_fail@plt+0x4d64>
   16278:	mov	r0, sl
   1627c:	cmp	r0, #0
   16280:	beq	161a4 <__assert_fail@plt+0x4c84>
   16284:	bl	114d8 <abort@plt>
   16288:	stclcc	12, cr12, [ip, #820]	; 0x334
   1628c:	svccc	0x00666666
   16290:	svccc	0x008ccccd
   16294:	svccc	0x004ccccd
   16298:	svcmi	0x00800000
   1629c:	push	{r4, sl, fp, lr}
   162a0:	add	fp, sp, #8
   162a4:	sub	sp, sp, #8
   162a8:	add	r2, sp, #4
   162ac:	mov	r4, r1
   162b0:	bl	15f50 <__assert_fail@plt+0x4a30>
   162b4:	cmn	r0, #1
   162b8:	beq	162cc <__assert_fail@plt+0x4dac>
   162bc:	ldr	r1, [sp, #4]
   162c0:	cmp	r0, #0
   162c4:	moveq	r4, r1
   162c8:	b	162d0 <__assert_fail@plt+0x4db0>
   162cc:	mov	r4, #0
   162d0:	mov	r0, r4
   162d4:	sub	sp, fp, #8
   162d8:	pop	{r4, sl, fp, pc}
   162dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   162e0:	add	fp, sp, #24
   162e4:	mov	r9, r1
   162e8:	ldr	r1, [r0, #8]
   162ec:	ldr	r2, [r0, #24]
   162f0:	mov	r5, r0
   162f4:	mov	r0, r9
   162f8:	blx	r2
   162fc:	mov	r7, r0
   16300:	ldr	r0, [r5, #8]
   16304:	cmp	r7, r0
   16308:	bcs	16568 <__assert_fail@plt+0x5048>
   1630c:	ldr	r6, [r5]
   16310:	mov	r8, #0
   16314:	mov	r4, r6
   16318:	ldr	r1, [r4, r7, lsl #3]!
   1631c:	cmp	r1, #0
   16320:	beq	163d4 <__assert_fail@plt+0x4eb4>
   16324:	cmp	r1, r9
   16328:	beq	16344 <__assert_fail@plt+0x4e24>
   1632c:	ldr	r2, [r5, #28]
   16330:	mov	r0, r9
   16334:	blx	r2
   16338:	cmp	r0, #0
   1633c:	beq	1637c <__assert_fail@plt+0x4e5c>
   16340:	ldr	r9, [r4]
   16344:	add	r0, r6, r7, lsl #3
   16348:	ldr	r0, [r0, #4]
   1634c:	cmp	r0, #0
   16350:	beq	163c4 <__assert_fail@plt+0x4ea4>
   16354:	ldm	r0, {r1, r2}
   16358:	stm	r4, {r1, r2}
   1635c:	mov	r1, #0
   16360:	str	r1, [r0]
   16364:	ldr	r1, [r5, #36]	; 0x24
   16368:	str	r1, [r0, #4]
   1636c:	str	r0, [r5, #36]	; 0x24
   16370:	cmp	r9, #0
   16374:	bne	1640c <__assert_fail@plt+0x4eec>
   16378:	b	163d4 <__assert_fail@plt+0x4eb4>
   1637c:	add	r7, r6, r7, lsl #3
   16380:	ldr	r0, [r7, #4]!
   16384:	cmp	r0, #0
   16388:	beq	163d4 <__assert_fail@plt+0x4eb4>
   1638c:	ldr	r1, [r0]
   16390:	cmp	r1, r9
   16394:	beq	163dc <__assert_fail@plt+0x4ebc>
   16398:	ldr	r2, [r5, #28]
   1639c:	mov	r0, r9
   163a0:	blx	r2
   163a4:	ldr	r1, [r7]
   163a8:	cmp	r0, #0
   163ac:	bne	163e4 <__assert_fail@plt+0x4ec4>
   163b0:	ldr	r0, [r1, #4]!
   163b4:	cmp	r0, #0
   163b8:	mov	r7, r1
   163bc:	bne	1638c <__assert_fail@plt+0x4e6c>
   163c0:	b	163d4 <__assert_fail@plt+0x4eb4>
   163c4:	mov	r0, #0
   163c8:	str	r0, [r4]
   163cc:	cmp	r9, #0
   163d0:	bne	1640c <__assert_fail@plt+0x4eec>
   163d4:	mov	r0, r8
   163d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   163dc:	mov	r1, r0
   163e0:	b	163e8 <__assert_fail@plt+0x4ec8>
   163e4:	ldr	r9, [r1]
   163e8:	ldr	r0, [r1, #4]
   163ec:	str	r0, [r7]
   163f0:	mov	r0, #0
   163f4:	str	r0, [r1]
   163f8:	ldr	r0, [r5, #36]	; 0x24
   163fc:	str	r0, [r1, #4]
   16400:	str	r1, [r5, #36]	; 0x24
   16404:	cmp	r9, #0
   16408:	beq	163d4 <__assert_fail@plt+0x4eb4>
   1640c:	ldr	r0, [r5, #16]
   16410:	sub	r0, r0, #1
   16414:	str	r0, [r5, #16]
   16418:	ldr	r0, [r4]
   1641c:	cmp	r0, #0
   16420:	bne	16528 <__assert_fail@plt+0x5008>
   16424:	ldr	r0, [r5, #12]
   16428:	vldr	s0, [r5, #8]
   1642c:	sub	r1, r0, #1
   16430:	str	r1, [r5, #12]
   16434:	vmov	s2, r1
   16438:	ldr	r0, [r5, #20]
   1643c:	vcvt.f32.u32	s0, s0
   16440:	vcvt.f32.u32	s2, s2
   16444:	vldr	s4, [r0]
   16448:	vmul.f32	s6, s4, s0
   1644c:	vcmpe.f32	s6, s2
   16450:	vmrs	APSR_nzcv, fpscr
   16454:	ble	16528 <__assert_fail@plt+0x5008>
   16458:	movw	r1, #47456	; 0xb960
   1645c:	movt	r1, #1
   16460:	cmp	r0, r1
   16464:	beq	164bc <__assert_fail@plt+0x4f9c>
   16468:	vldr	s8, [pc, #252]	; 1656c <__assert_fail@plt+0x504c>
   1646c:	vldr	s6, [r0, #8]
   16470:	vcmpe.f32	s6, s8
   16474:	vmrs	APSR_nzcv, fpscr
   16478:	ble	164a8 <__assert_fail@plt+0x4f88>
   1647c:	vldr	s10, [pc, #236]	; 16570 <__assert_fail@plt+0x5050>
   16480:	vcmpe.f32	s6, s10
   16484:	vmrs	APSR_nzcv, fpscr
   16488:	bpl	164a8 <__assert_fail@plt+0x4f88>
   1648c:	vcmpe.f32	s4, #0.0
   16490:	vmrs	APSR_nzcv, fpscr
   16494:	vldrge	s10, [r0, #12]
   16498:	vldrge	s12, [pc, #212]	; 16574 <__assert_fail@plt+0x5054>
   1649c:	vcmpege.f32	s10, s12
   164a0:	vmrsge	APSR_nzcv, fpscr
   164a4:	bgt	16534 <__assert_fail@plt+0x5014>
   164a8:	vldr	s4, [pc, #200]	; 16578 <__assert_fail@plt+0x5058>
   164ac:	movw	r0, #47456	; 0xb960
   164b0:	movt	r0, #1
   164b4:	str	r0, [r5, #20]
   164b8:	b	164c0 <__assert_fail@plt+0x4fa0>
   164bc:	mov	r0, r1
   164c0:	vmul.f32	s4, s4, s0
   164c4:	vcmpe.f32	s4, s2
   164c8:	vmrs	APSR_nzcv, fpscr
   164cc:	ble	16528 <__assert_fail@plt+0x5008>
   164d0:	ldrb	r1, [r0, #16]
   164d4:	vldr	s2, [r0, #4]
   164d8:	cmp	r1, #0
   164dc:	vmul.f32	s0, s2, s0
   164e0:	vldreq	s2, [r0, #8]
   164e4:	mov	r0, r5
   164e8:	vmuleq.f32	s0, s0, s2
   164ec:	vcvt.u32.f32	s0, s0
   164f0:	vmov	r1, s0
   164f4:	bl	15b50 <__assert_fail@plt+0x4630>
   164f8:	cmp	r0, #0
   164fc:	bne	16528 <__assert_fail@plt+0x5008>
   16500:	ldr	r0, [r5, #36]	; 0x24
   16504:	cmp	r0, #0
   16508:	beq	16520 <__assert_fail@plt+0x5000>
   1650c:	ldr	r4, [r0, #4]
   16510:	bl	12efc <__assert_fail@plt+0x19dc>
   16514:	cmp	r4, #0
   16518:	mov	r0, r4
   1651c:	bne	1650c <__assert_fail@plt+0x4fec>
   16520:	mov	r0, #0
   16524:	str	r0, [r5, #36]	; 0x24
   16528:	mov	r8, r9
   1652c:	mov	r0, r8
   16530:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16534:	vadd.f32	s8, s4, s8
   16538:	vcmpe.f32	s8, s6
   1653c:	vmrs	APSR_nzcv, fpscr
   16540:	bpl	164a8 <__assert_fail@plt+0x4f88>
   16544:	vldr	s6, [r0, #4]
   16548:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1654c:	vcmpe.f32	s6, s10
   16550:	vmrs	APSR_nzcv, fpscr
   16554:	bhi	164a8 <__assert_fail@plt+0x4f88>
   16558:	vcmpe.f32	s8, s6
   1655c:	vmrs	APSR_nzcv, fpscr
   16560:	bmi	164c0 <__assert_fail@plt+0x4fa0>
   16564:	b	164a8 <__assert_fail@plt+0x4f88>
   16568:	bl	114d8 <abort@plt>
   1656c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16570:	svccc	0x00666666
   16574:	svccc	0x008ccccd
   16578:	andeq	r0, r0, r0
   1657c:	b	162dc <__assert_fail@plt+0x4dbc>
   16580:	mov	r3, #1
   16584:	mov	r2, #0
   16588:	vdup.32	q8, r1
   1658c:	strb	r3, [r0, #28]
   16590:	str	r2, [r0, #20]
   16594:	str	r2, [r0, #24]
   16598:	vst1.32	{d16-d17}, [r0]!
   1659c:	str	r1, [r0]
   165a0:	bx	lr
   165a4:	ldrb	r0, [r0, #28]
   165a8:	bx	lr
   165ac:	push	{fp, lr}
   165b0:	mov	fp, sp
   165b4:	ldrb	r3, [r0, #28]
   165b8:	ldr	r2, [r0, #20]
   165bc:	eor	lr, r3, #1
   165c0:	add	r2, r2, lr
   165c4:	and	r3, r2, #3
   165c8:	ldr	ip, [r0, r3, lsl #2]
   165cc:	str	r1, [r0, r3, lsl #2]
   165d0:	str	r3, [r0, #20]
   165d4:	ldr	r1, [r0, #24]
   165d8:	cmp	r3, r1
   165dc:	addeq	r1, r2, lr
   165e0:	andeq	r1, r1, #3
   165e4:	streq	r1, [r0, #24]
   165e8:	mov	r1, #0
   165ec:	strb	r1, [r0, #28]
   165f0:	mov	r0, ip
   165f4:	pop	{fp, pc}
   165f8:	ldrb	r1, [r0, #28]
   165fc:	cmp	r1, #0
   16600:	bne	16644 <__assert_fail@plt+0x5124>
   16604:	ldr	r3, [r0, #20]
   16608:	ldr	r2, [r0, #16]
   1660c:	ldr	r1, [r0, r3, lsl #2]
   16610:	str	r2, [r0, r3, lsl #2]
   16614:	ldr	r2, [r0, #20]
   16618:	ldr	r3, [r0, #24]
   1661c:	cmp	r2, r3
   16620:	moveq	r2, #1
   16624:	strbeq	r2, [r0, #28]
   16628:	moveq	r0, r1
   1662c:	bxeq	lr
   16630:	sub	r2, r2, #1
   16634:	and	r2, r2, #3
   16638:	str	r2, [r0, #20]
   1663c:	mov	r0, r1
   16640:	bx	lr
   16644:	push	{fp, lr}
   16648:	mov	fp, sp
   1664c:	bl	114d8 <abort@plt>
   16650:	push	{r4, r5, r6, sl, fp, lr}
   16654:	add	fp, sp, #16
   16658:	mov	r5, r0
   1665c:	mov	r0, #0
   16660:	mov	r4, r1
   16664:	add	r6, r2, #19
   16668:	strb	r0, [r2, #20]
   1666c:	mov	r0, r5
   16670:	mov	r1, r4
   16674:	mov	r2, #10
   16678:	mov	r3, #0
   1667c:	bl	1a5f8 <__assert_fail@plt+0x90d8>
   16680:	add	r2, r0, r0, lsl #2
   16684:	sub	r2, r5, r2, lsl #1
   16688:	orr	r2, r2, #48	; 0x30
   1668c:	strb	r2, [r6], #-1
   16690:	rsbs	r2, r5, #9
   16694:	mov	r5, r0
   16698:	rscs	r2, r4, #0
   1669c:	mov	r4, r1
   166a0:	bcc	1666c <__assert_fail@plt+0x514c>
   166a4:	add	r0, r6, #1
   166a8:	pop	{r4, r5, r6, sl, fp, pc}
   166ac:	sub	sp, sp, #4
   166b0:	push	{fp, lr}
   166b4:	mov	fp, sp
   166b8:	sub	sp, sp, #4
   166bc:	str	r3, [fp, #8]
   166c0:	mov	r3, #0
   166c4:	tst	r2, #64	; 0x40
   166c8:	addne	r3, fp, #8
   166cc:	addne	r3, r3, #4
   166d0:	strne	r3, [sp]
   166d4:	ldrne	r3, [fp, #8]
   166d8:	bl	113b8 <openat64@plt>
   166dc:	bl	18510 <__assert_fail@plt+0x6ff0>
   166e0:	mov	sp, fp
   166e4:	pop	{fp, lr}
   166e8:	add	sp, sp, #4
   166ec:	bx	lr
   166f0:	push	{r4, r5, r6, sl, fp, lr}
   166f4:	add	fp, sp, #16
   166f8:	orr	r2, r2, #18688	; 0x4900
   166fc:	mov	r4, r3
   16700:	orr	r2, r2, #524288	; 0x80000
   16704:	bl	166ac <__assert_fail@plt+0x518c>
   16708:	mov	r5, r0
   1670c:	mov	r0, #0
   16710:	cmp	r5, #0
   16714:	poplt	{r4, r5, r6, sl, fp, pc}
   16718:	mov	r0, r5
   1671c:	bl	11478 <fdopendir@plt>
   16720:	cmp	r0, #0
   16724:	strne	r5, [r4]
   16728:	popne	{r4, r5, r6, sl, fp, pc}
   1672c:	bl	113d0 <__errno_location@plt>
   16730:	ldr	r6, [r0]
   16734:	mov	r4, r0
   16738:	mov	r0, r5
   1673c:	bl	114e4 <close@plt>
   16740:	mov	r0, #0
   16744:	str	r6, [r4]
   16748:	pop	{r4, r5, r6, sl, fp, pc}
   1674c:	push	{r4, r5, fp, lr}
   16750:	add	fp, sp, #8
   16754:	cmp	r0, #0
   16758:	beq	167ec <__assert_fail@plt+0x52cc>
   1675c:	mov	r1, #47	; 0x2f
   16760:	mov	r4, r0
   16764:	bl	11454 <strrchr@plt>
   16768:	cmp	r0, #0
   1676c:	mov	r5, r4
   16770:	addne	r5, r0, #1
   16774:	sub	r0, r5, r4
   16778:	cmp	r0, #7
   1677c:	blt	167d0 <__assert_fail@plt+0x52b0>
   16780:	movw	r1, #47532	; 0xb9ac
   16784:	sub	r0, r5, #7
   16788:	mov	r2, #7
   1678c:	movt	r1, #1
   16790:	bl	114cc <strncmp@plt>
   16794:	cmp	r0, #0
   16798:	bne	167d0 <__assert_fail@plt+0x52b0>
   1679c:	movw	r1, #47540	; 0xb9b4
   167a0:	mov	r0, r5
   167a4:	mov	r2, #3
   167a8:	movt	r1, #1
   167ac:	bl	114cc <strncmp@plt>
   167b0:	cmp	r0, #0
   167b4:	beq	167c0 <__assert_fail@plt+0x52a0>
   167b8:	mov	r4, r5
   167bc:	b	167d0 <__assert_fail@plt+0x52b0>
   167c0:	movw	r0, #53624	; 0xd178
   167c4:	add	r4, r5, #3
   167c8:	movt	r0, #2
   167cc:	str	r4, [r0]
   167d0:	movw	r0, #53628	; 0xd17c
   167d4:	movt	r0, #2
   167d8:	str	r4, [r0]
   167dc:	movw	r0, #53688	; 0xd1b8
   167e0:	movt	r0, #2
   167e4:	str	r4, [r0]
   167e8:	pop	{r4, r5, fp, pc}
   167ec:	movw	r0, #53640	; 0xd188
   167f0:	mov	r1, #55	; 0x37
   167f4:	mov	r2, #1
   167f8:	movt	r0, #2
   167fc:	ldr	r3, [r0]
   16800:	movw	r0, #47476	; 0xb974
   16804:	movt	r0, #1
   16808:	bl	112ec <fwrite@plt>
   1680c:	bl	114d8 <abort@plt>
   16810:	push	{r4, r5, r6, sl, fp, lr}
   16814:	add	fp, sp, #16
   16818:	mov	r4, r0
   1681c:	movw	r0, #53696	; 0xd1c0
   16820:	movt	r0, #2
   16824:	cmp	r4, #0
   16828:	moveq	r4, r0
   1682c:	bl	113d0 <__errno_location@plt>
   16830:	ldr	r6, [r0]
   16834:	mov	r5, r0
   16838:	mov	r0, r4
   1683c:	mov	r1, #48	; 0x30
   16840:	bl	19418 <__assert_fail@plt+0x7ef8>
   16844:	str	r6, [r5]
   16848:	pop	{r4, r5, r6, sl, fp, pc}
   1684c:	movw	r1, #53696	; 0xd1c0
   16850:	cmp	r0, #0
   16854:	movt	r1, #2
   16858:	movne	r1, r0
   1685c:	ldr	r0, [r1]
   16860:	bx	lr
   16864:	movw	r2, #53696	; 0xd1c0
   16868:	cmp	r0, #0
   1686c:	movt	r2, #2
   16870:	movne	r2, r0
   16874:	str	r1, [r2]
   16878:	bx	lr
   1687c:	movw	r3, #53696	; 0xd1c0
   16880:	cmp	r0, #0
   16884:	movt	r3, #2
   16888:	movne	r3, r0
   1688c:	ubfx	r0, r1, #5, #3
   16890:	and	r1, r1, #31
   16894:	add	r0, r3, r0, lsl #2
   16898:	ldr	r3, [r0, #8]
   1689c:	eor	r2, r2, r3, lsr r1
   168a0:	and	r2, r2, #1
   168a4:	eor	r2, r3, r2, lsl r1
   168a8:	str	r2, [r0, #8]
   168ac:	mov	r0, #1
   168b0:	and	r0, r0, r3, lsr r1
   168b4:	bx	lr
   168b8:	movw	r2, #53696	; 0xd1c0
   168bc:	cmp	r0, #0
   168c0:	movt	r2, #2
   168c4:	movne	r2, r0
   168c8:	ldr	r0, [r2, #4]
   168cc:	str	r1, [r2, #4]
   168d0:	bx	lr
   168d4:	movw	r3, #53696	; 0xd1c0
   168d8:	cmp	r0, #0
   168dc:	movt	r3, #2
   168e0:	movne	r3, r0
   168e4:	cmp	r1, #0
   168e8:	mov	r0, #10
   168ec:	cmpne	r2, #0
   168f0:	str	r0, [r3]
   168f4:	bne	16904 <__assert_fail@plt+0x53e4>
   168f8:	push	{fp, lr}
   168fc:	mov	fp, sp
   16900:	bl	114d8 <abort@plt>
   16904:	str	r1, [r3, #40]	; 0x28
   16908:	str	r2, [r3, #44]	; 0x2c
   1690c:	bx	lr
   16910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16914:	add	fp, sp, #28
   16918:	sub	sp, sp, #20
   1691c:	mov	r7, r0
   16920:	ldr	r0, [fp, #8]
   16924:	movw	r5, #53696	; 0xd1c0
   16928:	mov	r8, r3
   1692c:	mov	r9, r2
   16930:	mov	sl, r1
   16934:	movt	r5, #2
   16938:	cmp	r0, #0
   1693c:	movne	r5, r0
   16940:	bl	113d0 <__errno_location@plt>
   16944:	mov	r4, r0
   16948:	ldm	r5, {r0, r1}
   1694c:	ldr	r2, [r5, #40]	; 0x28
   16950:	ldr	r3, [r5, #44]	; 0x2c
   16954:	add	r5, r5, #8
   16958:	ldr	r6, [r4]
   1695c:	stm	sp, {r0, r1, r5}
   16960:	str	r2, [sp, #12]
   16964:	str	r3, [sp, #16]
   16968:	mov	r0, r7
   1696c:	mov	r1, sl
   16970:	mov	r2, r9
   16974:	mov	r3, r8
   16978:	bl	16988 <__assert_fail@plt+0x5468>
   1697c:	str	r6, [r4]
   16980:	sub	sp, fp, #28
   16984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1698c:	add	fp, sp, #28
   16990:	sub	sp, sp, #156	; 0x9c
   16994:	str	r0, [sp, #80]	; 0x50
   16998:	ldr	r0, [fp, #12]
   1699c:	mov	r6, r1
   169a0:	mov	r9, r3
   169a4:	str	r2, [fp, #-84]	; 0xffffffac
   169a8:	and	r1, r0, #4
   169ac:	str	r1, [sp, #32]
   169b0:	and	r1, r0, #1
   169b4:	str	r1, [sp, #36]	; 0x24
   169b8:	ubfx	r4, r0, #1, #1
   169bc:	bl	11304 <__ctype_get_mb_cur_max@plt>
   169c0:	str	r0, [sp, #40]	; 0x28
   169c4:	ldr	r0, [fp, #24]
   169c8:	ldr	r7, [fp, #8]
   169cc:	mov	r1, #0
   169d0:	mov	r5, #1
   169d4:	str	r1, [fp, #-56]	; 0xffffffc8
   169d8:	mov	r1, #0
   169dc:	str	r1, [sp, #60]	; 0x3c
   169e0:	str	r0, [sp, #76]	; 0x4c
   169e4:	ldr	r0, [fp, #20]
   169e8:	str	r0, [sp, #72]	; 0x48
   169ec:	mov	r0, #0
   169f0:	str	r0, [sp, #56]	; 0x38
   169f4:	mov	r0, #0
   169f8:	str	r0, [sp, #92]	; 0x5c
   169fc:	mov	r0, #0
   16a00:	str	r0, [fp, #-76]	; 0xffffffb4
   16a04:	mov	r0, #0
   16a08:	cmp	r7, #10
   16a0c:	bhi	1798c <__assert_fail@plt+0x646c>
   16a10:	add	r1, pc, #28
   16a14:	mov	sl, r6
   16a18:	ldr	r6, [sp, #80]	; 0x50
   16a1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a20:	mov	r8, #0
   16a24:	mov	r2, #1
   16a28:	mov	r3, #0
   16a2c:	mov	lr, r9
   16a30:	ldr	pc, [r1, r7, lsl #2]
   16a34:	andeq	r6, r1, r8, lsl fp
   16a38:	andeq	r6, r1, r4, asr #22
   16a3c:	andeq	r6, r1, r8, lsl #22
   16a40:	andeq	r6, r1, r0, lsl #22
   16a44:	andeq	r6, r1, r8, lsr fp
   16a48:	andeq	r6, r1, ip, lsl #23
   16a4c:	andeq	r6, r1, r8, lsr #22
   16a50:	andeq	r6, r1, r8, ror #23
   16a54:	andeq	r6, r1, r0, ror #20
   16a58:	andeq	r6, r1, r0, ror #20
   16a5c:	andeq	r6, r1, r8, lsl #21
   16a60:	movw	r0, #47622	; 0xba06
   16a64:	mov	r1, r7
   16a68:	movt	r0, #1
   16a6c:	bl	18398 <__assert_fail@plt+0x6e78>
   16a70:	str	r0, [sp, #72]	; 0x48
   16a74:	movw	r0, #47624	; 0xba08
   16a78:	mov	r1, r7
   16a7c:	movt	r0, #1
   16a80:	bl	18398 <__assert_fail@plt+0x6e78>
   16a84:	str	r0, [sp, #76]	; 0x4c
   16a88:	str	r5, [fp, #-48]	; 0xffffffd0
   16a8c:	mov	r8, #0
   16a90:	mov	r5, r7
   16a94:	tst	r4, #1
   16a98:	bne	16ad0 <__assert_fail@plt+0x55b0>
   16a9c:	ldr	r0, [sp, #72]	; 0x48
   16aa0:	ldrb	r0, [r0]
   16aa4:	cmp	r0, #0
   16aa8:	beq	16ad0 <__assert_fail@plt+0x55b0>
   16aac:	ldr	r1, [sp, #72]	; 0x48
   16ab0:	mov	r8, #0
   16ab4:	add	r1, r1, #1
   16ab8:	cmp	r8, sl
   16abc:	strbcc	r0, [r6, r8]
   16ac0:	ldrb	r0, [r1, r8]
   16ac4:	add	r8, r8, #1
   16ac8:	cmp	r0, #0
   16acc:	bne	16ab8 <__assert_fail@plt+0x5598>
   16ad0:	ldr	r7, [sp, #76]	; 0x4c
   16ad4:	mov	r0, r7
   16ad8:	bl	113a0 <strlen@plt>
   16adc:	str	r7, [sp, #92]	; 0x5c
   16ae0:	mov	r7, r5
   16ae4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ae8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16aec:	str	r0, [fp, #-76]	; 0xffffffb4
   16af0:	mov	r2, #1
   16af4:	mov	r3, r4
   16af8:	mov	lr, r9
   16afc:	b	16be8 <__assert_fail@plt+0x56c8>
   16b00:	mov	r0, #1
   16b04:	b	16b44 <__assert_fail@plt+0x5624>
   16b08:	tst	r4, #1
   16b0c:	bne	16b44 <__assert_fail@plt+0x5624>
   16b10:	mov	r2, r0
   16b14:	b	16b6c <__assert_fail@plt+0x564c>
   16b18:	mov	r7, #0
   16b1c:	mov	r8, #0
   16b20:	mov	r2, r0
   16b24:	b	16be4 <__assert_fail@plt+0x56c4>
   16b28:	mov	r0, #1
   16b2c:	mov	r8, #0
   16b30:	mov	r7, #5
   16b34:	b	16ba0 <__assert_fail@plt+0x5680>
   16b38:	mov	r2, #1
   16b3c:	tst	r4, #1
   16b40:	beq	16b6c <__assert_fail@plt+0x564c>
   16b44:	mov	r1, #1
   16b48:	mov	r8, #0
   16b4c:	mov	r7, #2
   16b50:	mov	r2, r0
   16b54:	mov	r3, #1
   16b58:	str	r1, [fp, #-76]	; 0xffffffb4
   16b5c:	movw	r1, #47624	; 0xba08
   16b60:	movt	r1, #1
   16b64:	str	r1, [sp, #92]	; 0x5c
   16b68:	b	16be8 <__assert_fail@plt+0x56c8>
   16b6c:	cmp	sl, #0
   16b70:	mov	r8, #1
   16b74:	mov	r7, #2
   16b78:	movne	r0, #39	; 0x27
   16b7c:	strbne	r0, [r6]
   16b80:	movw	r0, #47624	; 0xba08
   16b84:	movt	r0, #1
   16b88:	b	16bd8 <__assert_fail@plt+0x56b8>
   16b8c:	mov	r7, #5
   16b90:	tst	r4, #1
   16b94:	beq	16bbc <__assert_fail@plt+0x569c>
   16b98:	mov	r0, #1
   16b9c:	mov	r8, #0
   16ba0:	str	r0, [fp, #-76]	; 0xffffffb4
   16ba4:	movw	r0, #47620	; 0xba04
   16ba8:	mov	r2, #1
   16bac:	mov	r3, #1
   16bb0:	movt	r0, #1
   16bb4:	str	r0, [sp, #92]	; 0x5c
   16bb8:	b	16be8 <__assert_fail@plt+0x56c8>
   16bbc:	cmp	sl, #0
   16bc0:	mov	r8, #1
   16bc4:	mov	r2, #1
   16bc8:	movne	r0, #34	; 0x22
   16bcc:	strbne	r0, [r6]
   16bd0:	movw	r0, #47620	; 0xba04
   16bd4:	movt	r0, #1
   16bd8:	str	r0, [sp, #92]	; 0x5c
   16bdc:	mov	r0, #1
   16be0:	str	r0, [fp, #-76]	; 0xffffffb4
   16be4:	mov	r3, #0
   16be8:	ldr	r0, [fp, #16]
   16bec:	str	r3, [fp, #-72]	; 0xffffffb8
   16bf0:	str	r7, [fp, #-64]	; 0xffffffc0
   16bf4:	str	r2, [sp, #84]	; 0x54
   16bf8:	cmp	r0, #0
   16bfc:	movwne	r0, #1
   16c00:	and	r0, r0, r3
   16c04:	str	r0, [fp, #-88]	; 0xffffffa8
   16c08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16c0c:	cmp	r0, #0
   16c10:	movwne	r0, #1
   16c14:	subs	r4, r7, #2
   16c18:	mov	r7, #0
   16c1c:	and	r1, r0, r3
   16c20:	str	r4, [fp, #-80]	; 0xffffffb0
   16c24:	and	r1, r2, r1
   16c28:	str	r1, [sp, #48]	; 0x30
   16c2c:	clz	r1, r4
   16c30:	lsr	r1, r1, #5
   16c34:	and	r1, r1, r3
   16c38:	eor	r3, r3, #1
   16c3c:	str	r1, [sp, #64]	; 0x40
   16c40:	mov	r1, r4
   16c44:	str	r3, [sp, #88]	; 0x58
   16c48:	movwne	r1, #1
   16c4c:	orr	r3, r1, r3
   16c50:	and	r1, r1, r2
   16c54:	and	r0, r0, r1
   16c58:	str	r3, [sp, #68]	; 0x44
   16c5c:	str	r1, [fp, #-68]	; 0xffffffbc
   16c60:	str	r0, [fp, #-60]	; 0xffffffc4
   16c64:	eor	r0, r2, #1
   16c68:	str	r0, [sp, #52]	; 0x34
   16c6c:	cmn	lr, #1
   16c70:	beq	16c80 <__assert_fail@plt+0x5760>
   16c74:	cmp	r7, lr
   16c78:	bne	16c8c <__assert_fail@plt+0x576c>
   16c7c:	b	177b4 <__assert_fail@plt+0x6294>
   16c80:	ldrb	r0, [ip, r7]
   16c84:	cmp	r0, #0
   16c88:	beq	177bc <__assert_fail@plt+0x629c>
   16c8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16c90:	mov	r9, #0
   16c94:	str	r5, [fp, #-48]	; 0xffffffd0
   16c98:	cmp	r0, #0
   16c9c:	beq	16cd0 <__assert_fail@plt+0x57b0>
   16ca0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ca4:	add	r4, r7, r0
   16ca8:	cmp	r0, #2
   16cac:	bcc	16cc8 <__assert_fail@plt+0x57a8>
   16cb0:	cmn	lr, #1
   16cb4:	bne	16cc8 <__assert_fail@plt+0x57a8>
   16cb8:	mov	r0, ip
   16cbc:	bl	113a0 <strlen@plt>
   16cc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16cc4:	mov	lr, r0
   16cc8:	cmp	r4, lr
   16ccc:	bls	16cd8 <__assert_fail@plt+0x57b8>
   16cd0:	mov	r0, #0
   16cd4:	b	16d18 <__assert_fail@plt+0x57f8>
   16cd8:	ldr	r1, [sp, #92]	; 0x5c
   16cdc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16ce0:	add	r0, ip, r7
   16ce4:	mov	r4, lr
   16ce8:	bl	1128c <memcmp@plt>
   16cec:	ldr	r2, [sp, #88]	; 0x58
   16cf0:	cmp	r0, #0
   16cf4:	mov	r1, r0
   16cf8:	movwne	r1, #1
   16cfc:	orr	r1, r1, r2
   16d00:	tst	r1, #1
   16d04:	beq	1784c <__assert_fail@plt+0x632c>
   16d08:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d0c:	clz	r0, r0
   16d10:	mov	lr, r4
   16d14:	lsr	r0, r0, #5
   16d18:	str	r0, [fp, #-52]	; 0xffffffcc
   16d1c:	ldrb	r5, [ip, r7]
   16d20:	cmp	r5, #126	; 0x7e
   16d24:	bhi	170dc <__assert_fail@plt+0x5bbc>
   16d28:	add	r3, pc, #16
   16d2c:	mov	r4, #1
   16d30:	mov	r2, #110	; 0x6e
   16d34:	mov	r0, #97	; 0x61
   16d38:	mov	r1, #0
   16d3c:	ldr	pc, [r3, r5, lsl #2]
   16d40:	ldrdeq	r6, [r1], -r8
   16d44:	ldrdeq	r7, [r1], -ip
   16d48:	ldrdeq	r7, [r1], -ip
   16d4c:	ldrdeq	r7, [r1], -ip
   16d50:	ldrdeq	r7, [r1], -ip
   16d54:	ldrdeq	r7, [r1], -ip
   16d58:	ldrdeq	r7, [r1], -ip
   16d5c:	muleq	r1, r0, r1
   16d60:			; <UNDEFINED> instruction: 0x00016fb8
   16d64:			; <UNDEFINED> instruction: 0x00016fb0
   16d68:	andeq	r6, r1, r4, asr #31
   16d6c:	andeq	r7, r1, r4, asr #32
   16d70:	andeq	r6, r1, r8, lsr #31
   16d74:	andeq	r6, r1, r0, asr #31
   16d78:	ldrdeq	r7, [r1], -ip
   16d7c:	ldrdeq	r7, [r1], -ip
   16d80:	ldrdeq	r7, [r1], -ip
   16d84:	ldrdeq	r7, [r1], -ip
   16d88:	ldrdeq	r7, [r1], -ip
   16d8c:	ldrdeq	r7, [r1], -ip
   16d90:	ldrdeq	r7, [r1], -ip
   16d94:	ldrdeq	r7, [r1], -ip
   16d98:	ldrdeq	r7, [r1], -ip
   16d9c:	ldrdeq	r7, [r1], -ip
   16da0:	ldrdeq	r7, [r1], -ip
   16da4:	ldrdeq	r7, [r1], -ip
   16da8:	ldrdeq	r7, [r1], -ip
   16dac:	ldrdeq	r7, [r1], -ip
   16db0:	ldrdeq	r7, [r1], -ip
   16db4:	ldrdeq	r7, [r1], -ip
   16db8:	ldrdeq	r7, [r1], -ip
   16dbc:	ldrdeq	r7, [r1], -ip
   16dc0:	andeq	r7, r1, r8, asr #2
   16dc4:	andeq	r7, r1, ip, asr #2
   16dc8:	andeq	r7, r1, ip, asr #2
   16dcc:	andeq	r6, r1, r0, asr pc
   16dd0:	andeq	r7, r1, ip, asr #2
   16dd4:	andeq	r6, r1, ip, lsr pc
   16dd8:	andeq	r7, r1, ip, asr #2
   16ddc:	andeq	r7, r1, ip, asr #32
   16de0:	andeq	r7, r1, ip, asr #2
   16de4:	andeq	r7, r1, ip, asr #2
   16de8:	andeq	r7, r1, ip, asr #2
   16dec:	andeq	r6, r1, ip, lsr pc
   16df0:	andeq	r6, r1, ip, lsr pc
   16df4:	andeq	r6, r1, ip, lsr pc
   16df8:	andeq	r6, r1, ip, lsr pc
   16dfc:	andeq	r6, r1, ip, lsr pc
   16e00:	andeq	r6, r1, ip, lsr pc
   16e04:	andeq	r6, r1, ip, lsr pc
   16e08:	andeq	r6, r1, ip, lsr pc
   16e0c:	andeq	r6, r1, ip, lsr pc
   16e10:	andeq	r6, r1, ip, lsr pc
   16e14:	andeq	r6, r1, ip, lsr pc
   16e18:	andeq	r6, r1, ip, lsr pc
   16e1c:	andeq	r6, r1, ip, lsr pc
   16e20:	andeq	r6, r1, ip, lsr pc
   16e24:	andeq	r6, r1, ip, lsr pc
   16e28:	andeq	r6, r1, ip, lsr pc
   16e2c:	andeq	r7, r1, ip, asr #2
   16e30:	andeq	r7, r1, ip, asr #2
   16e34:	andeq	r7, r1, ip, asr #2
   16e38:	andeq	r7, r1, ip, asr #2
   16e3c:	andeq	r7, r1, r8, lsl r0
   16e40:	ldrdeq	r7, [r1], -ip
   16e44:	andeq	r6, r1, ip, lsr pc
   16e48:	andeq	r6, r1, ip, lsr pc
   16e4c:	andeq	r6, r1, ip, lsr pc
   16e50:	andeq	r6, r1, ip, lsr pc
   16e54:	andeq	r6, r1, ip, lsr pc
   16e58:	andeq	r6, r1, ip, lsr pc
   16e5c:	andeq	r6, r1, ip, lsr pc
   16e60:	andeq	r6, r1, ip, lsr pc
   16e64:	andeq	r6, r1, ip, lsr pc
   16e68:	andeq	r6, r1, ip, lsr pc
   16e6c:	andeq	r6, r1, ip, lsr pc
   16e70:	andeq	r6, r1, ip, lsr pc
   16e74:	andeq	r6, r1, ip, lsr pc
   16e78:	andeq	r6, r1, ip, lsr pc
   16e7c:	andeq	r6, r1, ip, lsr pc
   16e80:	andeq	r6, r1, ip, lsr pc
   16e84:	andeq	r6, r1, ip, lsr pc
   16e88:	andeq	r6, r1, ip, lsr pc
   16e8c:	andeq	r6, r1, ip, lsr pc
   16e90:	andeq	r6, r1, ip, lsr pc
   16e94:	andeq	r6, r1, ip, lsr pc
   16e98:	andeq	r6, r1, ip, lsr pc
   16e9c:	andeq	r6, r1, ip, lsr pc
   16ea0:	andeq	r6, r1, ip, lsr pc
   16ea4:	andeq	r6, r1, ip, lsr pc
   16ea8:	andeq	r6, r1, ip, lsr pc
   16eac:	andeq	r7, r1, ip, asr #2
   16eb0:	andeq	r6, r1, r4, lsl #31
   16eb4:	andeq	r6, r1, ip, lsr pc
   16eb8:	andeq	r7, r1, ip, asr #2
   16ebc:	andeq	r6, r1, ip, lsr pc
   16ec0:	andeq	r7, r1, ip, asr #2
   16ec4:	andeq	r6, r1, ip, lsr pc
   16ec8:	andeq	r6, r1, ip, lsr pc
   16ecc:	andeq	r6, r1, ip, lsr pc
   16ed0:	andeq	r6, r1, ip, lsr pc
   16ed4:	andeq	r6, r1, ip, lsr pc
   16ed8:	andeq	r6, r1, ip, lsr pc
   16edc:	andeq	r6, r1, ip, lsr pc
   16ee0:	andeq	r6, r1, ip, lsr pc
   16ee4:	andeq	r6, r1, ip, lsr pc
   16ee8:	andeq	r6, r1, ip, lsr pc
   16eec:	andeq	r6, r1, ip, lsr pc
   16ef0:	andeq	r6, r1, ip, lsr pc
   16ef4:	andeq	r6, r1, ip, lsr pc
   16ef8:	andeq	r6, r1, ip, lsr pc
   16efc:	andeq	r6, r1, ip, lsr pc
   16f00:	andeq	r6, r1, ip, lsr pc
   16f04:	andeq	r6, r1, ip, lsr pc
   16f08:	andeq	r6, r1, ip, lsr pc
   16f0c:	andeq	r6, r1, ip, lsr pc
   16f10:	andeq	r6, r1, ip, lsr pc
   16f14:	andeq	r6, r1, ip, lsr pc
   16f18:	andeq	r6, r1, ip, lsr pc
   16f1c:	andeq	r6, r1, ip, lsr pc
   16f20:	andeq	r6, r1, ip, lsr pc
   16f24:	andeq	r6, r1, ip, lsr pc
   16f28:	andeq	r6, r1, ip, lsr pc
   16f2c:	andeq	r6, r1, r4, ror #30
   16f30:	andeq	r7, r1, ip, asr #2
   16f34:	andeq	r6, r1, r4, ror #30
   16f38:	andeq	r6, r1, r0, asr pc
   16f3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16f40:	cmp	r0, #0
   16f44:	beq	171a4 <__assert_fail@plt+0x5c84>
   16f48:	ldr	r0, [fp, #16]
   16f4c:	b	171a8 <__assert_fail@plt+0x5c88>
   16f50:	mov	r4, #0
   16f54:	cmp	r7, #0
   16f58:	beq	17148 <__assert_fail@plt+0x5c28>
   16f5c:	mov	r9, #0
   16f60:	b	16f3c <__assert_fail@plt+0x5a1c>
   16f64:	mov	r4, #0
   16f68:	cmn	lr, #1
   16f6c:	beq	1712c <__assert_fail@plt+0x5c0c>
   16f70:	cmp	r7, #0
   16f74:	bne	16f5c <__assert_fail@plt+0x5a3c>
   16f78:	cmp	lr, #1
   16f7c:	beq	17148 <__assert_fail@plt+0x5c28>
   16f80:	b	16f5c <__assert_fail@plt+0x5a3c>
   16f84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16f88:	cmp	r0, #2
   16f8c:	bne	1716c <__assert_fail@plt+0x5c4c>
   16f90:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16f94:	tst	r0, #1
   16f98:	bne	17868 <__assert_fail@plt+0x6348>
   16f9c:	mov	r9, #0
   16fa0:	mov	r0, #92	; 0x5c
   16fa4:	b	17180 <__assert_fail@plt+0x5c60>
   16fa8:	mov	r0, #102	; 0x66
   16fac:	b	17190 <__assert_fail@plt+0x5c70>
   16fb0:	mov	r2, #116	; 0x74
   16fb4:	b	16fc4 <__assert_fail@plt+0x5aa4>
   16fb8:	mov	r0, #98	; 0x62
   16fbc:	b	17190 <__assert_fail@plt+0x5c70>
   16fc0:	mov	r2, #114	; 0x72
   16fc4:	ldr	r0, [sp, #68]	; 0x44
   16fc8:	tst	r0, #1
   16fcc:	mov	r0, r2
   16fd0:	bne	17190 <__assert_fail@plt+0x5c70>
   16fd4:	b	17868 <__assert_fail@plt+0x6348>
   16fd8:	ldr	r0, [sp, #84]	; 0x54
   16fdc:	tst	r0, #1
   16fe0:	beq	17280 <__assert_fail@plt+0x5d60>
   16fe4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16fe8:	tst	r0, #1
   16fec:	bne	17978 <__assert_fail@plt+0x6458>
   16ff0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16ff4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ff8:	cmp	r0, #2
   16ffc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17000:	movwne	r0, #1
   17004:	orr	r0, r0, r2
   17008:	tst	r0, #1
   1700c:	beq	17650 <__assert_fail@plt+0x6130>
   17010:	mov	r0, r8
   17014:	b	17684 <__assert_fail@plt+0x6164>
   17018:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1701c:	mov	r9, #0
   17020:	mov	r5, #63	; 0x3f
   17024:	cmp	r0, #5
   17028:	beq	17434 <__assert_fail@plt+0x5f14>
   1702c:	cmp	r0, #2
   17030:	bne	174d8 <__assert_fail@plt+0x5fb8>
   17034:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17038:	tst	r0, #1
   1703c:	beq	174dc <__assert_fail@plt+0x5fbc>
   17040:	b	17868 <__assert_fail@plt+0x6348>
   17044:	mov	r0, #118	; 0x76
   17048:	b	17190 <__assert_fail@plt+0x5c70>
   1704c:	mov	r0, #1
   17050:	mov	r5, #39	; 0x27
   17054:	str	r0, [sp, #60]	; 0x3c
   17058:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1705c:	cmp	r0, #2
   17060:	bne	170d4 <__assert_fail@plt+0x5bb4>
   17064:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17068:	tst	r0, #1
   1706c:	bne	17868 <__assert_fail@plt+0x6348>
   17070:	ldr	r2, [sp, #56]	; 0x38
   17074:	clz	r1, sl
   17078:	mov	r9, #0
   1707c:	lsr	r1, r1, #5
   17080:	cmp	r2, #0
   17084:	mov	r0, r2
   17088:	movwne	r0, #1
   1708c:	orrs	r0, r0, r1
   17090:	moveq	r2, sl
   17094:	moveq	sl, r0
   17098:	cmp	r8, sl
   1709c:	str	r2, [sp, #56]	; 0x38
   170a0:	movcc	r0, #39	; 0x27
   170a4:	strbcc	r0, [r6, r8]
   170a8:	add	r0, r8, #1
   170ac:	cmp	r0, sl
   170b0:	movcc	r1, #92	; 0x5c
   170b4:	strbcc	r1, [r6, r0]
   170b8:	add	r0, r8, #2
   170bc:	add	r8, r8, #3
   170c0:	cmp	r0, sl
   170c4:	movcc	r1, #39	; 0x27
   170c8:	strbcc	r1, [r6, r0]
   170cc:	mov	r0, #0
   170d0:	str	r0, [fp, #-56]	; 0xffffffc8
   170d4:	mov	r4, #1
   170d8:	b	16f3c <__assert_fail@plt+0x5a1c>
   170dc:	ldr	r0, [sp, #40]	; 0x28
   170e0:	cmp	r0, #1
   170e4:	bne	172ac <__assert_fail@plt+0x5d8c>
   170e8:	str	lr, [sp, #28]
   170ec:	bl	1137c <__ctype_b_loc@plt>
   170f0:	ldr	r0, [r0]
   170f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   170f8:	mov	r1, #1
   170fc:	add	r0, r0, r5, lsl #1
   17100:	ldrb	r0, [r0, #1]
   17104:	ubfx	r4, r0, #6, #1
   17108:	ldr	r0, [sp, #52]	; 0x34
   1710c:	mov	r2, r1
   17110:	cmp	r1, #1
   17114:	orr	r0, r4, r0
   17118:	bhi	174e4 <__assert_fail@plt+0x5fc4>
   1711c:	tst	r0, #1
   17120:	beq	174e4 <__assert_fail@plt+0x5fc4>
   17124:	ldr	lr, [sp, #28]
   17128:	b	16f3c <__assert_fail@plt+0x5a1c>
   1712c:	cmp	r7, #0
   17130:	ldrbeq	r0, [ip, #1]
   17134:	cmpeq	r0, #0
   17138:	beq	17148 <__assert_fail@plt+0x5c28>
   1713c:	mvn	lr, #0
   17140:	mov	r9, #0
   17144:	b	16f3c <__assert_fail@plt+0x5a1c>
   17148:	mov	r1, #1
   1714c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17150:	cmp	r0, #2
   17154:	bne	17164 <__assert_fail@plt+0x5c44>
   17158:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1715c:	tst	r0, #1
   17160:	bne	17868 <__assert_fail@plt+0x6348>
   17164:	mov	r4, r1
   17168:	b	16f3c <__assert_fail@plt+0x5a1c>
   1716c:	ldr	r1, [sp, #48]	; 0x30
   17170:	mov	r9, #0
   17174:	mov	r0, #92	; 0x5c
   17178:	cmp	r1, #0
   1717c:	beq	17190 <__assert_fail@plt+0x5c70>
   17180:	mov	r4, #0
   17184:	cmp	r9, #0
   17188:	beq	1771c <__assert_fail@plt+0x61fc>
   1718c:	b	17758 <__assert_fail@plt+0x6238>
   17190:	ldr	r1, [sp, #84]	; 0x54
   17194:	mov	r4, #0
   17198:	mov	r9, #0
   1719c:	tst	r1, #1
   171a0:	bne	171e0 <__assert_fail@plt+0x5cc0>
   171a4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   171a8:	cmp	r0, #0
   171ac:	mov	r0, r5
   171b0:	beq	171d4 <__assert_fail@plt+0x5cb4>
   171b4:	ldr	r1, [fp, #16]
   171b8:	ubfx	r0, r5, #5, #3
   171bc:	mov	r2, #1
   171c0:	ldr	r0, [r1, r0, lsl #2]
   171c4:	and	r1, r5, #31
   171c8:	tst	r0, r2, lsl r1
   171cc:	mov	r0, r5
   171d0:	bne	171e0 <__assert_fail@plt+0x5cc0>
   171d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   171d8:	cmp	r1, #0
   171dc:	beq	17714 <__assert_fail@plt+0x61f4>
   171e0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   171e4:	tst	r1, #1
   171e8:	bne	17840 <__assert_fail@plt+0x6320>
   171ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   171f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   171f4:	cmp	r1, #2
   171f8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   171fc:	movwne	r1, #1
   17200:	orr	r1, r1, r2
   17204:	tst	r1, #1
   17208:	beq	17214 <__assert_fail@plt+0x5cf4>
   1720c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17210:	b	17250 <__assert_fail@plt+0x5d30>
   17214:	cmp	r8, sl
   17218:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1721c:	movcc	r1, #39	; 0x27
   17220:	strbcc	r1, [r6, r8]
   17224:	add	r1, r8, #1
   17228:	cmp	r1, sl
   1722c:	movcc	r2, #36	; 0x24
   17230:	strbcc	r2, [r6, r1]
   17234:	add	r1, r8, #2
   17238:	add	r8, r8, #3
   1723c:	cmp	r1, sl
   17240:	movcc	r2, #39	; 0x27
   17244:	strbcc	r2, [r6, r1]
   17248:	mov	r1, #1
   1724c:	str	r1, [fp, #-56]	; 0xffffffc8
   17250:	cmp	r8, sl
   17254:	movcc	r1, #92	; 0x5c
   17258:	strbcc	r1, [r6, r8]
   1725c:	add	r8, r8, #1
   17260:	cmp	r8, sl
   17264:	and	r5, r5, r4
   17268:	add	r7, r7, #1
   1726c:	strbcc	r0, [r6, r8]
   17270:	add	r8, r8, #1
   17274:	cmn	lr, #1
   17278:	bne	16c74 <__assert_fail@plt+0x5754>
   1727c:	b	16c80 <__assert_fail@plt+0x5760>
   17280:	ldr	r0, [sp, #36]	; 0x24
   17284:	mov	r4, #0
   17288:	mov	r9, #0
   1728c:	mov	r5, #0
   17290:	cmp	r0, #0
   17294:	beq	171a4 <__assert_fail@plt+0x5c84>
   17298:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1729c:	add	r7, r7, #1
   172a0:	cmn	lr, #1
   172a4:	bne	16c74 <__assert_fail@plt+0x5754>
   172a8:	b	16c80 <__assert_fail@plt+0x5760>
   172ac:	mov	r0, #0
   172b0:	cmn	lr, #1
   172b4:	str	r0, [fp, #-36]	; 0xffffffdc
   172b8:	str	r0, [fp, #-40]	; 0xffffffd8
   172bc:	bne	172d0 <__assert_fail@plt+0x5db0>
   172c0:	mov	r0, ip
   172c4:	bl	113a0 <strlen@plt>
   172c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   172cc:	mov	lr, r0
   172d0:	add	r0, ip, r7
   172d4:	mov	r4, #1
   172d8:	mov	r6, #0
   172dc:	str	lr, [sp, #28]
   172e0:	str	r0, [sp, #24]
   172e4:	sub	r0, fp, #40	; 0x28
   172e8:	mov	r3, r0
   172ec:	str	r6, [sp, #44]	; 0x2c
   172f0:	add	r6, r6, r7
   172f4:	sub	r0, fp, #44	; 0x2c
   172f8:	add	r1, ip, r6
   172fc:	sub	r2, lr, r6
   17300:	bl	1a448 <__assert_fail@plt+0x8f28>
   17304:	cmp	r0, #0
   17308:	beq	177a0 <__assert_fail@plt+0x6280>
   1730c:	cmn	r0, #1
   17310:	beq	17760 <__assert_fail@plt+0x6240>
   17314:	ldr	lr, [sp, #28]
   17318:	cmn	r0, #2
   1731c:	beq	17768 <__assert_fail@plt+0x6248>
   17320:	ldr	r2, [sp, #64]	; 0x40
   17324:	cmp	r0, #2
   17328:	mov	r1, #0
   1732c:	movwcc	r1, #1
   17330:	eor	r2, r2, #1
   17334:	orrs	r1, r2, r1
   17338:	bne	173f8 <__assert_fail@plt+0x5ed8>
   1733c:	ldr	r1, [sp, #44]	; 0x2c
   17340:	ldr	r2, [sp, #24]
   17344:	add	r1, r2, r1
   17348:	mov	r2, #1
   1734c:	ldrb	r3, [r1, r2]
   17350:	sub	r3, r3, #91	; 0x5b
   17354:	cmp	r3, #33	; 0x21
   17358:	bhi	173ec <__assert_fail@plt+0x5ecc>
   1735c:	add	r6, pc, #0
   17360:	ldr	pc, [r6, r3, lsl #2]
   17364:	andeq	r7, r1, r0, ror #16
   17368:	andeq	r7, r1, r0, ror #16
   1736c:	andeq	r7, r1, ip, ror #7
   17370:	andeq	r7, r1, r0, ror #16
   17374:	andeq	r7, r1, ip, ror #7
   17378:	andeq	r7, r1, r0, ror #16
   1737c:	andeq	r7, r1, ip, ror #7
   17380:	andeq	r7, r1, ip, ror #7
   17384:	andeq	r7, r1, ip, ror #7
   17388:	andeq	r7, r1, ip, ror #7
   1738c:	andeq	r7, r1, ip, ror #7
   17390:	andeq	r7, r1, ip, ror #7
   17394:	andeq	r7, r1, ip, ror #7
   17398:	andeq	r7, r1, ip, ror #7
   1739c:	andeq	r7, r1, ip, ror #7
   173a0:	andeq	r7, r1, ip, ror #7
   173a4:	andeq	r7, r1, ip, ror #7
   173a8:	andeq	r7, r1, ip, ror #7
   173ac:	andeq	r7, r1, ip, ror #7
   173b0:	andeq	r7, r1, ip, ror #7
   173b4:	andeq	r7, r1, ip, ror #7
   173b8:	andeq	r7, r1, ip, ror #7
   173bc:	andeq	r7, r1, ip, ror #7
   173c0:	andeq	r7, r1, ip, ror #7
   173c4:	andeq	r7, r1, ip, ror #7
   173c8:	andeq	r7, r1, ip, ror #7
   173cc:	andeq	r7, r1, ip, ror #7
   173d0:	andeq	r7, r1, ip, ror #7
   173d4:	andeq	r7, r1, ip, ror #7
   173d8:	andeq	r7, r1, ip, ror #7
   173dc:	andeq	r7, r1, ip, ror #7
   173e0:	andeq	r7, r1, ip, ror #7
   173e4:	andeq	r7, r1, ip, ror #7
   173e8:	andeq	r7, r1, r0, ror #16
   173ec:	add	r2, r2, #1
   173f0:	cmp	r2, r0
   173f4:	bcc	1734c <__assert_fail@plt+0x5e2c>
   173f8:	ldr	r6, [sp, #44]	; 0x2c
   173fc:	add	r6, r0, r6
   17400:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17404:	bl	112d4 <iswprint@plt>
   17408:	cmp	r0, #0
   1740c:	movwne	r0, #1
   17410:	and	r4, r4, r0
   17414:	sub	r0, fp, #40	; 0x28
   17418:	bl	11280 <mbsinit@plt>
   1741c:	ldr	lr, [sp, #28]
   17420:	ldr	ip, [fp, #-84]	; 0xffffffac
   17424:	sub	r3, fp, #40	; 0x28
   17428:	cmp	r0, #0
   1742c:	beq	172ec <__assert_fail@plt+0x5dcc>
   17430:	b	177a8 <__assert_fail@plt+0x6288>
   17434:	ldr	r0, [sp, #32]
   17438:	cmp	r0, #0
   1743c:	beq	174d8 <__assert_fail@plt+0x5fb8>
   17440:	add	r0, r7, #2
   17444:	cmp	r0, lr
   17448:	bcs	174d8 <__assert_fail@plt+0x5fb8>
   1744c:	add	r1, ip, r7
   17450:	ldrb	r1, [r1, #1]
   17454:	cmp	r1, #63	; 0x3f
   17458:	bne	174d8 <__assert_fail@plt+0x5fb8>
   1745c:	ldrb	r5, [ip, r0]
   17460:	sub	r1, r5, #33	; 0x21
   17464:	cmp	r1, #29
   17468:	bhi	174d8 <__assert_fail@plt+0x5fb8>
   1746c:	movw	r3, #20929	; 0x51c1
   17470:	mov	r2, #1
   17474:	movt	r3, #14336	; 0x3800
   17478:	tst	r3, r2, lsl r1
   1747c:	beq	174d8 <__assert_fail@plt+0x5fb8>
   17480:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17484:	tst	r1, #1
   17488:	bne	17980 <__assert_fail@plt+0x6460>
   1748c:	cmp	r8, sl
   17490:	mov	r7, r0
   17494:	mov	r4, #0
   17498:	movcc	r1, #63	; 0x3f
   1749c:	strbcc	r1, [r6, r8]
   174a0:	add	r1, r8, #1
   174a4:	cmp	r1, sl
   174a8:	movcc	r2, #34	; 0x22
   174ac:	strbcc	r2, [r6, r1]
   174b0:	add	r1, r8, #2
   174b4:	cmp	r1, sl
   174b8:	movcc	r2, #34	; 0x22
   174bc:	strbcc	r2, [r6, r1]
   174c0:	add	r1, r8, #3
   174c4:	add	r8, r8, #4
   174c8:	cmp	r1, sl
   174cc:	movcc	r2, #63	; 0x3f
   174d0:	strbcc	r2, [r6, r1]
   174d4:	b	16f3c <__assert_fail@plt+0x5a1c>
   174d8:	mov	r5, #63	; 0x3f
   174dc:	mov	r4, #0
   174e0:	b	16f3c <__assert_fail@plt+0x5a1c>
   174e4:	add	r1, r2, r7
   174e8:	ldr	lr, [sp, #28]
   174ec:	mov	r3, #0
   174f0:	str	r1, [sp, #44]	; 0x2c
   174f4:	add	r1, r7, #1
   174f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   174fc:	tst	r0, #1
   17500:	bne	175d4 <__assert_fail@plt+0x60b4>
   17504:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17508:	tst	r2, #1
   1750c:	bne	178c8 <__assert_fail@plt+0x63a8>
   17510:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17514:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17518:	cmp	r7, #2
   1751c:	movwne	r3, #1
   17520:	orr	r3, r3, r2
   17524:	tst	r3, #1
   17528:	bne	17564 <__assert_fail@plt+0x6044>
   1752c:	cmp	r8, sl
   17530:	add	r3, r8, #1
   17534:	movcc	r2, #39	; 0x27
   17538:	strbcc	r2, [r6, r8]
   1753c:	cmp	r3, sl
   17540:	movcc	r2, #36	; 0x24
   17544:	strbcc	r2, [r6, r3]
   17548:	add	r3, r8, #2
   1754c:	add	r8, r8, #3
   17550:	cmp	r3, sl
   17554:	movcc	r2, #39	; 0x27
   17558:	strbcc	r2, [r6, r3]
   1755c:	mov	r2, #1
   17560:	str	r2, [fp, #-56]	; 0xffffffc8
   17564:	cmp	r8, sl
   17568:	movcc	r3, #92	; 0x5c
   1756c:	strbcc	r3, [r6, r8]
   17570:	add	r3, r8, #1
   17574:	cmp	r3, sl
   17578:	andcc	r7, r5, #192	; 0xc0
   1757c:	movcc	r2, #48	; 0x30
   17580:	orrcc	r7, r2, r7, lsr #6
   17584:	strbcc	r7, [r6, r3]
   17588:	add	r3, r8, #2
   1758c:	add	r8, r8, #3
   17590:	cmp	r3, sl
   17594:	lsrcc	r7, r5, #3
   17598:	movcc	r2, #6
   1759c:	bficc	r7, r2, #3, #29
   175a0:	mov	r2, #6
   175a4:	strbcc	r7, [r6, r3]
   175a8:	bfi	r5, r2, #3, #29
   175ac:	mov	r3, #1
   175b0:	b	175f8 <__assert_fail@plt+0x60d8>
   175b4:	cmp	r8, sl
   175b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   175bc:	strbcc	r5, [r6, r8]
   175c0:	add	r8, r8, #1
   175c4:	ldrb	r5, [ip, r1]
   175c8:	add	r1, r1, #1
   175cc:	tst	r0, #1
   175d0:	beq	17504 <__assert_fail@plt+0x5fe4>
   175d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   175d8:	tst	r2, #1
   175dc:	beq	175f0 <__assert_fail@plt+0x60d0>
   175e0:	cmp	r8, sl
   175e4:	movcc	r7, #92	; 0x5c
   175e8:	strbcc	r7, [r6, r8]
   175ec:	add	r8, r8, #1
   175f0:	mov	r2, #0
   175f4:	str	r2, [fp, #-52]	; 0xffffffcc
   175f8:	ldr	r2, [sp, #44]	; 0x2c
   175fc:	and	r9, r3, #1
   17600:	cmp	r2, r1
   17604:	bls	17704 <__assert_fail@plt+0x61e4>
   17608:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1760c:	cmp	r9, #0
   17610:	movwne	r9, #1
   17614:	mvn	r7, r2
   17618:	orr	r7, r7, r9
   1761c:	tst	r7, #1
   17620:	bne	175b4 <__assert_fail@plt+0x6094>
   17624:	cmp	r8, sl
   17628:	movcc	r7, #39	; 0x27
   1762c:	strbcc	r7, [r6, r8]
   17630:	add	r7, r8, #1
   17634:	add	r8, r8, #2
   17638:	cmp	r7, sl
   1763c:	movcc	r2, #39	; 0x27
   17640:	strbcc	r2, [r6, r7]
   17644:	mov	r2, #0
   17648:	str	r2, [fp, #-56]	; 0xffffffc8
   1764c:	b	175b4 <__assert_fail@plt+0x6094>
   17650:	cmp	r8, sl
   17654:	mov	r2, #1
   17658:	movcc	r0, #39	; 0x27
   1765c:	strbcc	r0, [r6, r8]
   17660:	add	r0, r8, #1
   17664:	cmp	r0, sl
   17668:	movcc	r1, #36	; 0x24
   1766c:	strbcc	r1, [r6, r0]
   17670:	add	r0, r8, #2
   17674:	cmp	r0, sl
   17678:	movcc	r1, #39	; 0x27
   1767c:	strbcc	r1, [r6, r0]
   17680:	add	r0, r8, #3
   17684:	cmp	r0, sl
   17688:	add	r8, r0, #1
   1768c:	str	r2, [fp, #-56]	; 0xffffffc8
   17690:	movcc	r1, #92	; 0x5c
   17694:	strbcc	r1, [r6, r0]
   17698:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1769c:	cmp	r1, #2
   176a0:	beq	176f4 <__assert_fail@plt+0x61d4>
   176a4:	add	r1, r7, #1
   176a8:	mov	r4, #0
   176ac:	mov	r9, #1
   176b0:	mov	r5, #48	; 0x30
   176b4:	cmp	r1, lr
   176b8:	bcs	16f3c <__assert_fail@plt+0x5a1c>
   176bc:	ldrb	r1, [ip, r1]
   176c0:	sub	r1, r1, #48	; 0x30
   176c4:	uxtb	r1, r1
   176c8:	cmp	r1, #9
   176cc:	bhi	16f3c <__assert_fail@plt+0x5a1c>
   176d0:	cmp	r8, sl
   176d4:	movcc	r1, #48	; 0x30
   176d8:	strbcc	r1, [r6, r8]
   176dc:	add	r1, r0, #2
   176e0:	add	r8, r0, #3
   176e4:	cmp	r1, sl
   176e8:	movcc	r2, #48	; 0x30
   176ec:	strbcc	r2, [r6, r1]
   176f0:	b	16f3c <__assert_fail@plt+0x5a1c>
   176f4:	mov	r0, #48	; 0x30
   176f8:	mov	r9, #1
   176fc:	mov	r4, #0
   17700:	b	171d4 <__assert_fail@plt+0x5cb4>
   17704:	cmp	r9, #0
   17708:	sub	r7, r1, #1
   1770c:	mov	r0, r5
   17710:	movwne	r9, #1
   17714:	cmp	r9, #0
   17718:	bne	17758 <__assert_fail@plt+0x6238>
   1771c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17720:	tst	r1, #1
   17724:	beq	17758 <__assert_fail@plt+0x6238>
   17728:	cmp	r8, sl
   1772c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17730:	movcc	r1, #39	; 0x27
   17734:	strbcc	r1, [r6, r8]
   17738:	add	r1, r8, #1
   1773c:	add	r8, r8, #2
   17740:	cmp	r1, sl
   17744:	movcc	r2, #39	; 0x27
   17748:	strbcc	r2, [r6, r1]
   1774c:	mov	r1, #0
   17750:	str	r1, [fp, #-56]	; 0xffffffc8
   17754:	b	17260 <__assert_fail@plt+0x5d40>
   17758:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1775c:	b	17260 <__assert_fail@plt+0x5d40>
   17760:	mov	r4, #0
   17764:	b	177a0 <__assert_fail@plt+0x6280>
   17768:	mov	r4, #0
   1776c:	cmp	lr, r6
   17770:	bls	177a0 <__assert_fail@plt+0x6280>
   17774:	ldr	ip, [fp, #-84]	; 0xffffffac
   17778:	ldr	r6, [sp, #44]	; 0x2c
   1777c:	ldr	r0, [sp, #24]
   17780:	ldrb	r0, [r0, r6]
   17784:	cmp	r0, #0
   17788:	beq	177a8 <__assert_fail@plt+0x6288>
   1778c:	add	r6, r6, #1
   17790:	add	r0, r7, r6
   17794:	cmp	r0, lr
   17798:	bcc	1777c <__assert_fail@plt+0x625c>
   1779c:	b	177a8 <__assert_fail@plt+0x6288>
   177a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   177a4:	ldr	r6, [sp, #44]	; 0x2c
   177a8:	mov	r1, r6
   177ac:	ldr	r6, [sp, #80]	; 0x50
   177b0:	b	17108 <__assert_fail@plt+0x5be8>
   177b4:	mov	lr, r7
   177b8:	b	177c0 <__assert_fail@plt+0x62a0>
   177bc:	mvn	lr, #0
   177c0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   177c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   177c8:	eor	r0, r7, #2
   177cc:	orr	r0, r0, r8
   177d0:	clz	r0, r0
   177d4:	lsr	r0, r0, #5
   177d8:	tst	r1, r0
   177dc:	bne	17868 <__assert_fail@plt+0x6348>
   177e0:	mov	r0, r1
   177e4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   177e8:	cmp	r7, #2
   177ec:	movwne	r1, #1
   177f0:	orr	r0, r0, r1
   177f4:	tst	r0, #1
   177f8:	ldreq	r0, [sp, #60]	; 0x3c
   177fc:	eoreq	r0, r0, #1
   17800:	tsteq	r0, #1
   17804:	bne	17914 <__assert_fail@plt+0x63f4>
   17808:	mov	r9, lr
   1780c:	tst	r5, #1
   17810:	bne	178d0 <__assert_fail@plt+0x63b0>
   17814:	ldr	r6, [sp, #56]	; 0x38
   17818:	mov	r4, #0
   1781c:	cmp	r6, #0
   17820:	beq	1790c <__assert_fail@plt+0x63ec>
   17824:	ldr	r0, [sp, #84]	; 0x54
   17828:	mov	r1, #0
   1782c:	cmp	sl, #0
   17830:	mov	r5, #0
   17834:	str	r1, [fp, #-72]	; 0xffffffb8
   17838:	beq	16a08 <__assert_fail@plt+0x54e8>
   1783c:	b	17914 <__assert_fail@plt+0x63f4>
   17840:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17844:	ldr	r2, [sp, #84]	; 0x54
   17848:	b	17870 <__assert_fail@plt+0x6350>
   1784c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17850:	mov	r2, #1
   17854:	mov	lr, r4
   17858:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1785c:	b	17870 <__assert_fail@plt+0x6350>
   17860:	ldr	r6, [sp, #80]	; 0x50
   17864:	ldr	ip, [fp, #-84]	; 0xffffffac
   17868:	ldr	r2, [sp, #84]	; 0x54
   1786c:	mov	r7, #2
   17870:	mov	r0, #0
   17874:	ldr	r1, [fp, #12]
   17878:	tst	r2, #1
   1787c:	mov	r2, r7
   17880:	mov	r3, lr
   17884:	str	r0, [sp, #8]
   17888:	ldr	r0, [sp, #72]	; 0x48
   1788c:	movwne	r2, #4
   17890:	cmp	r7, #2
   17894:	movne	r2, r7
   17898:	str	r2, [sp]
   1789c:	mov	r2, ip
   178a0:	bic	r1, r1, #2
   178a4:	str	r0, [sp, #12]
   178a8:	ldr	r0, [sp, #76]	; 0x4c
   178ac:	str	r1, [sp, #4]
   178b0:	mov	r1, sl
   178b4:	str	r0, [sp, #16]
   178b8:	mov	r0, r6
   178bc:	bl	16988 <__assert_fail@plt+0x5468>
   178c0:	mov	r8, r0
   178c4:	b	1796c <__assert_fail@plt+0x644c>
   178c8:	ldr	r2, [sp, #84]	; 0x54
   178cc:	b	17870 <__assert_fail@plt+0x6350>
   178d0:	mov	r0, #5
   178d4:	ldr	r1, [sp, #56]	; 0x38
   178d8:	ldr	r2, [fp, #-84]	; 0xffffffac
   178dc:	mov	r3, r9
   178e0:	str	r0, [sp]
   178e4:	ldr	r0, [fp, #12]
   178e8:	str	r0, [sp, #4]
   178ec:	ldr	r0, [fp, #16]
   178f0:	str	r0, [sp, #8]
   178f4:	ldr	r0, [sp, #72]	; 0x48
   178f8:	str	r0, [sp, #12]
   178fc:	ldr	r0, [sp, #76]	; 0x4c
   17900:	str	r0, [sp, #16]
   17904:	ldr	r0, [sp, #80]	; 0x50
   17908:	b	178bc <__assert_fail@plt+0x639c>
   1790c:	mov	r0, #0
   17910:	str	r0, [fp, #-72]	; 0xffffffb8
   17914:	ldr	r1, [sp, #92]	; 0x5c
   17918:	cmp	r1, #0
   1791c:	beq	1795c <__assert_fail@plt+0x643c>
   17920:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17924:	ldr	r2, [sp, #80]	; 0x50
   17928:	tst	r0, #1
   1792c:	bne	17960 <__assert_fail@plt+0x6440>
   17930:	ldrb	r0, [r1]
   17934:	cmp	r0, #0
   17938:	beq	17960 <__assert_fail@plt+0x6440>
   1793c:	add	r1, r1, #1
   17940:	cmp	r8, sl
   17944:	strbcc	r0, [r2, r8]
   17948:	add	r8, r8, #1
   1794c:	ldrb	r0, [r1], #1
   17950:	cmp	r0, #0
   17954:	bne	17940 <__assert_fail@plt+0x6420>
   17958:	b	17960 <__assert_fail@plt+0x6440>
   1795c:	ldr	r2, [sp, #80]	; 0x50
   17960:	cmp	r8, sl
   17964:	movcc	r0, #0
   17968:	strbcc	r0, [r2, r8]
   1796c:	mov	r0, r8
   17970:	sub	sp, fp, #28
   17974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17978:	mov	r2, #1
   1797c:	b	17858 <__assert_fail@plt+0x6338>
   17980:	ldr	r2, [sp, #84]	; 0x54
   17984:	mov	r7, #5
   17988:	b	17870 <__assert_fail@plt+0x6350>
   1798c:	bl	114d8 <abort@plt>
   17990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17994:	add	fp, sp, #28
   17998:	sub	sp, sp, #28
   1799c:	movw	r5, #53696	; 0xd1c0
   179a0:	cmp	r2, #0
   179a4:	mov	r4, r1
   179a8:	mov	r7, r0
   179ac:	str	r0, [sp, #20]
   179b0:	movt	r5, #2
   179b4:	movne	r5, r2
   179b8:	bl	113d0 <__errno_location@plt>
   179bc:	mov	sl, r0
   179c0:	ldm	r5, {r0, r1}
   179c4:	ldr	r2, [r5, #40]	; 0x28
   179c8:	ldr	r3, [r5, #44]	; 0x2c
   179cc:	add	r9, r5, #8
   179d0:	ldr	r6, [sl]
   179d4:	orr	r8, r1, #1
   179d8:	mov	r1, #0
   179dc:	str	r6, [sp, #24]
   179e0:	stm	sp, {r0, r8, r9}
   179e4:	str	r2, [sp, #12]
   179e8:	str	r3, [sp, #16]
   179ec:	mov	r0, #0
   179f0:	mov	r2, r7
   179f4:	mov	r3, r4
   179f8:	mov	r6, r4
   179fc:	bl	16988 <__assert_fail@plt+0x5468>
   17a00:	add	r7, r0, #1
   17a04:	mov	r0, r7
   17a08:	bl	18fe8 <__assert_fail@plt+0x7ac8>
   17a0c:	mov	r4, r0
   17a10:	ldr	r0, [r5]
   17a14:	ldr	r2, [r5, #44]	; 0x2c
   17a18:	ldr	r1, [r5, #40]	; 0x28
   17a1c:	mov	r3, r6
   17a20:	stm	sp, {r0, r8, r9}
   17a24:	str	r2, [sp, #16]
   17a28:	str	r1, [sp, #12]
   17a2c:	mov	r0, r4
   17a30:	mov	r1, r7
   17a34:	ldr	r2, [sp, #20]
   17a38:	bl	16988 <__assert_fail@plt+0x5468>
   17a3c:	ldr	r0, [sp, #24]
   17a40:	str	r0, [sl]
   17a44:	mov	r0, r4
   17a48:	sub	sp, fp, #28
   17a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a54:	add	fp, sp, #28
   17a58:	sub	sp, sp, #36	; 0x24
   17a5c:	movw	r8, #53696	; 0xd1c0
   17a60:	cmp	r3, #0
   17a64:	mov	r4, r2
   17a68:	str	r2, [sp, #24]
   17a6c:	mov	r5, r1
   17a70:	mov	r6, r0
   17a74:	str	r0, [sp, #20]
   17a78:	movt	r8, #2
   17a7c:	movne	r8, r3
   17a80:	bl	113d0 <__errno_location@plt>
   17a84:	str	r0, [sp, #28]
   17a88:	cmp	r4, #0
   17a8c:	add	sl, r8, #8
   17a90:	ldm	r8, {r3, r9}
   17a94:	ldr	r7, [r0]
   17a98:	ldr	r1, [r8, #40]	; 0x28
   17a9c:	ldr	r2, [r8, #44]	; 0x2c
   17aa0:	mov	r0, #0
   17aa4:	orreq	r9, r9, #1
   17aa8:	str	r7, [sp, #32]
   17aac:	mov	r7, r5
   17ab0:	stm	sp, {r3, r9, sl}
   17ab4:	str	r1, [sp, #12]
   17ab8:	str	r2, [sp, #16]
   17abc:	mov	r1, #0
   17ac0:	mov	r2, r6
   17ac4:	mov	r3, r5
   17ac8:	bl	16988 <__assert_fail@plt+0x5468>
   17acc:	add	r4, r0, #1
   17ad0:	mov	r5, r0
   17ad4:	mov	r0, r4
   17ad8:	bl	18fe8 <__assert_fail@plt+0x7ac8>
   17adc:	mov	r6, r0
   17ae0:	ldr	r0, [r8]
   17ae4:	ldr	r2, [r8, #44]	; 0x2c
   17ae8:	ldr	r1, [r8, #40]	; 0x28
   17aec:	mov	r3, r7
   17af0:	stm	sp, {r0, r9, sl}
   17af4:	str	r2, [sp, #16]
   17af8:	str	r1, [sp, #12]
   17afc:	mov	r0, r6
   17b00:	mov	r1, r4
   17b04:	ldr	r2, [sp, #20]
   17b08:	bl	16988 <__assert_fail@plt+0x5468>
   17b0c:	ldr	r0, [sp, #24]
   17b10:	ldr	r1, [sp, #32]
   17b14:	ldr	r2, [sp, #28]
   17b18:	cmp	r0, #0
   17b1c:	str	r1, [r2]
   17b20:	strne	r5, [r0]
   17b24:	mov	r0, r6
   17b28:	sub	sp, fp, #28
   17b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b34:	add	fp, sp, #24
   17b38:	movw	r5, #53564	; 0xd13c
   17b3c:	movw	r8, #53560	; 0xd138
   17b40:	movt	r5, #2
   17b44:	movt	r8, #2
   17b48:	ldr	r0, [r5]
   17b4c:	ldr	r4, [r8]
   17b50:	cmp	r0, #2
   17b54:	blt	17b80 <__assert_fail@plt+0x6660>
   17b58:	add	r7, r4, #12
   17b5c:	mov	r6, #0
   17b60:	ldr	r0, [r7, r6, lsl #3]
   17b64:	bl	12efc <__assert_fail@plt+0x19dc>
   17b68:	ldr	r1, [r5]
   17b6c:	add	r2, r6, #2
   17b70:	add	r0, r6, #1
   17b74:	mov	r6, r0
   17b78:	cmp	r2, r1
   17b7c:	blt	17b60 <__assert_fail@plt+0x6640>
   17b80:	ldr	r0, [r4, #4]
   17b84:	movw	r7, #53744	; 0xd1f0
   17b88:	movt	r7, #2
   17b8c:	cmp	r0, r7
   17b90:	beq	17ba8 <__assert_fail@plt+0x6688>
   17b94:	bl	12efc <__assert_fail@plt+0x19dc>
   17b98:	movw	r0, #53568	; 0xd140
   17b9c:	mov	r6, #256	; 0x100
   17ba0:	movt	r0, #2
   17ba4:	strd	r6, [r0]
   17ba8:	movw	r6, #53568	; 0xd140
   17bac:	movt	r6, #2
   17bb0:	cmp	r4, r6
   17bb4:	beq	17bc4 <__assert_fail@plt+0x66a4>
   17bb8:	mov	r0, r4
   17bbc:	bl	12efc <__assert_fail@plt+0x19dc>
   17bc0:	str	r6, [r8]
   17bc4:	mov	r0, #1
   17bc8:	str	r0, [r5]
   17bcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17bd0:	movw	r3, #53696	; 0xd1c0
   17bd4:	mvn	r2, #0
   17bd8:	movt	r3, #2
   17bdc:	b	17be0 <__assert_fail@plt+0x66c0>
   17be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17be4:	add	fp, sp, #28
   17be8:	sub	sp, sp, #44	; 0x2c
   17bec:	mov	r7, r3
   17bf0:	str	r2, [sp, #36]	; 0x24
   17bf4:	str	r1, [sp, #32]
   17bf8:	mov	r5, r0
   17bfc:	bl	113d0 <__errno_location@plt>
   17c00:	cmp	r5, #0
   17c04:	blt	17d70 <__assert_fail@plt+0x6850>
   17c08:	cmn	r5, #-2147483647	; 0x80000001
   17c0c:	beq	17d70 <__assert_fail@plt+0x6850>
   17c10:	movw	r8, #53564	; 0xd13c
   17c14:	movw	r4, #53560	; 0xd138
   17c18:	str	r0, [sp, #28]
   17c1c:	ldr	r0, [r0]
   17c20:	movt	r8, #2
   17c24:	movt	r4, #2
   17c28:	ldr	r1, [r8]
   17c2c:	ldr	r6, [r4]
   17c30:	str	r0, [sp, #24]
   17c34:	cmp	r1, r5
   17c38:	ble	17c44 <__assert_fail@plt+0x6724>
   17c3c:	mov	sl, r6
   17c40:	b	17cac <__assert_fail@plt+0x678c>
   17c44:	movw	r9, #53568	; 0xd140
   17c48:	mov	r0, #8
   17c4c:	add	r2, r5, #1
   17c50:	str	r1, [fp, #-32]	; 0xffffffe0
   17c54:	mvn	r3, #-2147483648	; 0x80000000
   17c58:	movt	r9, #2
   17c5c:	str	r0, [sp]
   17c60:	sub	r2, r2, r1
   17c64:	sub	r1, fp, #32
   17c68:	subs	r0, r6, r9
   17c6c:	movne	r0, r6
   17c70:	bl	191e8 <__assert_fail@plt+0x7cc8>
   17c74:	cmp	r6, r9
   17c78:	mov	sl, r0
   17c7c:	str	r0, [r4]
   17c80:	ldrdeq	r0, [r9]
   17c84:	stmeq	sl, {r0, r1}
   17c88:	ldr	r1, [r8]
   17c8c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17c90:	add	r0, sl, r1, lsl #3
   17c94:	sub	r1, r2, r1
   17c98:	lsl	r2, r1, #3
   17c9c:	mov	r1, #0
   17ca0:	bl	113e8 <memset@plt>
   17ca4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ca8:	str	r0, [r8]
   17cac:	mov	r9, sl
   17cb0:	ldr	r6, [r9, r5, lsl #3]!
   17cb4:	ldr	r4, [r9, #4]!
   17cb8:	ldm	r7, {r0, r1}
   17cbc:	ldr	r2, [r7, #40]	; 0x28
   17cc0:	ldr	r3, [r7, #44]	; 0x2c
   17cc4:	orr	r8, r1, #1
   17cc8:	add	r1, r7, #8
   17ccc:	stm	sp, {r0, r8}
   17cd0:	add	r0, sp, #8
   17cd4:	str	r1, [sp, #20]
   17cd8:	stm	r0, {r1, r2, r3}
   17cdc:	mov	r0, r4
   17ce0:	mov	r1, r6
   17ce4:	ldr	r2, [sp, #32]
   17ce8:	ldr	r3, [sp, #36]	; 0x24
   17cec:	bl	16988 <__assert_fail@plt+0x5468>
   17cf0:	cmp	r6, r0
   17cf4:	bhi	17d58 <__assert_fail@plt+0x6838>
   17cf8:	add	r6, r0, #1
   17cfc:	movw	r0, #53744	; 0xd1f0
   17d00:	movt	r0, #2
   17d04:	str	r6, [sl, r5, lsl #3]
   17d08:	cmp	r4, r0
   17d0c:	beq	17d18 <__assert_fail@plt+0x67f8>
   17d10:	mov	r0, r4
   17d14:	bl	12efc <__assert_fail@plt+0x19dc>
   17d18:	mov	r0, r6
   17d1c:	bl	18fe8 <__assert_fail@plt+0x7ac8>
   17d20:	str	r0, [r9]
   17d24:	mov	r4, r0
   17d28:	add	r3, sp, #8
   17d2c:	ldr	r0, [r7]
   17d30:	ldr	r1, [r7, #40]	; 0x28
   17d34:	ldr	r2, [r7, #44]	; 0x2c
   17d38:	stm	sp, {r0, r8}
   17d3c:	ldr	r0, [sp, #20]
   17d40:	stm	r3, {r0, r1, r2}
   17d44:	mov	r0, r4
   17d48:	mov	r1, r6
   17d4c:	ldr	r2, [sp, #32]
   17d50:	ldr	r3, [sp, #36]	; 0x24
   17d54:	bl	16988 <__assert_fail@plt+0x5468>
   17d58:	ldr	r0, [sp, #28]
   17d5c:	ldr	r1, [sp, #24]
   17d60:	str	r1, [r0]
   17d64:	mov	r0, r4
   17d68:	sub	sp, fp, #28
   17d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d70:	bl	114d8 <abort@plt>
   17d74:	movw	r3, #53696	; 0xd1c0
   17d78:	movt	r3, #2
   17d7c:	b	17be0 <__assert_fail@plt+0x66c0>
   17d80:	movw	r3, #53696	; 0xd1c0
   17d84:	mov	r1, r0
   17d88:	mov	r0, #0
   17d8c:	mvn	r2, #0
   17d90:	movt	r3, #2
   17d94:	b	17be0 <__assert_fail@plt+0x66c0>
   17d98:	movw	r3, #53696	; 0xd1c0
   17d9c:	mov	r2, r1
   17da0:	mov	r1, r0
   17da4:	mov	r0, #0
   17da8:	movt	r3, #2
   17dac:	b	17be0 <__assert_fail@plt+0x66c0>
   17db0:	push	{fp, lr}
   17db4:	mov	fp, sp
   17db8:	sub	sp, sp, #48	; 0x30
   17dbc:	vmov.i32	q8, #0	; 0x00000000
   17dc0:	mov	ip, #32
   17dc4:	mov	r3, sp
   17dc8:	mov	lr, r2
   17dcc:	cmp	r1, #10
   17dd0:	add	r2, r3, #16
   17dd4:	vst1.64	{d16-d17}, [r3], ip
   17dd8:	vst1.64	{d16-d17}, [r3]
   17ddc:	vst1.64	{d16-d17}, [r2]
   17de0:	beq	17e00 <__assert_fail@plt+0x68e0>
   17de4:	str	r1, [sp]
   17de8:	mov	r3, sp
   17dec:	mov	r1, lr
   17df0:	mvn	r2, #0
   17df4:	bl	17be0 <__assert_fail@plt+0x66c0>
   17df8:	mov	sp, fp
   17dfc:	pop	{fp, pc}
   17e00:	bl	114d8 <abort@plt>
   17e04:	push	{r4, sl, fp, lr}
   17e08:	add	fp, sp, #8
   17e0c:	sub	sp, sp, #48	; 0x30
   17e10:	mov	ip, r3
   17e14:	mov	r3, sp
   17e18:	vmov.i32	q8, #0	; 0x00000000
   17e1c:	mov	lr, #32
   17e20:	cmp	r1, #10
   17e24:	add	r4, r3, #16
   17e28:	vst1.64	{d16-d17}, [r3], lr
   17e2c:	vst1.64	{d16-d17}, [r3]
   17e30:	vst1.64	{d16-d17}, [r4]
   17e34:	beq	17e54 <__assert_fail@plt+0x6934>
   17e38:	str	r1, [sp]
   17e3c:	mov	r1, r2
   17e40:	mov	r3, sp
   17e44:	mov	r2, ip
   17e48:	bl	17be0 <__assert_fail@plt+0x66c0>
   17e4c:	sub	sp, fp, #8
   17e50:	pop	{r4, sl, fp, pc}
   17e54:	bl	114d8 <abort@plt>
   17e58:	push	{fp, lr}
   17e5c:	mov	fp, sp
   17e60:	sub	sp, sp, #48	; 0x30
   17e64:	mov	r3, sp
   17e68:	vmov.i32	q8, #0	; 0x00000000
   17e6c:	mov	ip, #32
   17e70:	cmp	r0, #10
   17e74:	add	r2, r3, #16
   17e78:	vst1.64	{d16-d17}, [r3], ip
   17e7c:	vst1.64	{d16-d17}, [r3]
   17e80:	vst1.64	{d16-d17}, [r2]
   17e84:	beq	17ea4 <__assert_fail@plt+0x6984>
   17e88:	str	r0, [sp]
   17e8c:	mov	r3, sp
   17e90:	mov	r0, #0
   17e94:	mvn	r2, #0
   17e98:	bl	17be0 <__assert_fail@plt+0x66c0>
   17e9c:	mov	sp, fp
   17ea0:	pop	{fp, pc}
   17ea4:	bl	114d8 <abort@plt>
   17ea8:	push	{fp, lr}
   17eac:	mov	fp, sp
   17eb0:	sub	sp, sp, #48	; 0x30
   17eb4:	mov	r3, sp
   17eb8:	vmov.i32	q8, #0	; 0x00000000
   17ebc:	mov	ip, #32
   17ec0:	cmp	r0, #10
   17ec4:	add	lr, r3, #16
   17ec8:	vst1.64	{d16-d17}, [r3], ip
   17ecc:	vst1.64	{d16-d17}, [r3]
   17ed0:	vst1.64	{d16-d17}, [lr]
   17ed4:	beq	17ef0 <__assert_fail@plt+0x69d0>
   17ed8:	str	r0, [sp]
   17edc:	mov	r3, sp
   17ee0:	mov	r0, #0
   17ee4:	bl	17be0 <__assert_fail@plt+0x66c0>
   17ee8:	mov	sp, fp
   17eec:	pop	{fp, pc}
   17ef0:	bl	114d8 <abort@plt>
   17ef4:	push	{r4, sl, fp, lr}
   17ef8:	add	fp, sp, #8
   17efc:	sub	sp, sp, #48	; 0x30
   17f00:	mov	lr, r0
   17f04:	movw	r0, #53696	; 0xd1c0
   17f08:	mov	r3, #32
   17f0c:	mov	ip, r1
   17f10:	mov	r4, #1
   17f14:	movt	r0, #2
   17f18:	add	r1, r0, #16
   17f1c:	vld1.64	{d16-d17}, [r0], r3
   17f20:	mov	r3, sp
   17f24:	vld1.64	{d18-d19}, [r1]
   17f28:	add	r1, r3, #16
   17f2c:	vld1.64	{d20-d21}, [r0]
   17f30:	add	r0, r3, #32
   17f34:	vst1.64	{d18-d19}, [r1]
   17f38:	mov	r1, r3
   17f3c:	vst1.64	{d20-d21}, [r0]
   17f40:	mov	r0, #28
   17f44:	and	r0, r0, r2, lsr #3
   17f48:	and	r2, r2, #31
   17f4c:	vst1.64	{d16-d17}, [r1], r0
   17f50:	ldr	r0, [r1, #8]
   17f54:	bic	r4, r4, r0, lsr r2
   17f58:	eor	r0, r0, r4, lsl r2
   17f5c:	mov	r2, ip
   17f60:	str	r0, [r1, #8]
   17f64:	mov	r0, #0
   17f68:	mov	r1, lr
   17f6c:	bl	17be0 <__assert_fail@plt+0x66c0>
   17f70:	sub	sp, fp, #8
   17f74:	pop	{r4, sl, fp, pc}
   17f78:	push	{fp, lr}
   17f7c:	mov	fp, sp
   17f80:	sub	sp, sp, #48	; 0x30
   17f84:	mov	ip, r0
   17f88:	movw	r0, #53696	; 0xd1c0
   17f8c:	mov	r3, #32
   17f90:	movt	r0, #2
   17f94:	add	r2, r0, #16
   17f98:	vld1.64	{d16-d17}, [r0], r3
   17f9c:	mov	r3, sp
   17fa0:	vld1.64	{d18-d19}, [r2]
   17fa4:	add	r2, r3, #16
   17fa8:	vld1.64	{d20-d21}, [r0]
   17fac:	add	r0, r3, #32
   17fb0:	vst1.64	{d18-d19}, [r2]
   17fb4:	mov	r2, r3
   17fb8:	vst1.64	{d20-d21}, [r0]
   17fbc:	mov	r0, #28
   17fc0:	and	r0, r0, r1, lsr #3
   17fc4:	and	r1, r1, #31
   17fc8:	vst1.64	{d16-d17}, [r2], r0
   17fcc:	mov	r0, #1
   17fd0:	ldr	lr, [r2, #8]
   17fd4:	bic	r0, r0, lr, lsr r1
   17fd8:	eor	r0, lr, r0, lsl r1
   17fdc:	mov	r1, ip
   17fe0:	str	r0, [r2, #8]
   17fe4:	mov	r0, #0
   17fe8:	mvn	r2, #0
   17fec:	bl	17be0 <__assert_fail@plt+0x66c0>
   17ff0:	mov	sp, fp
   17ff4:	pop	{fp, pc}
   17ff8:	push	{fp, lr}
   17ffc:	mov	fp, sp
   18000:	sub	sp, sp, #48	; 0x30
   18004:	movw	r2, #53696	; 0xd1c0
   18008:	mov	r3, #32
   1800c:	mov	r1, r0
   18010:	movt	r2, #2
   18014:	add	r0, r2, #16
   18018:	vld1.64	{d16-d17}, [r2], r3
   1801c:	mov	r3, sp
   18020:	vld1.64	{d18-d19}, [r0]
   18024:	add	r0, r3, #16
   18028:	vld1.64	{d20-d21}, [r2]
   1802c:	mov	r2, r3
   18030:	vst1.64	{d18-d19}, [r0]
   18034:	add	r0, r3, #32
   18038:	vst1.64	{d20-d21}, [r0]
   1803c:	mov	r0, #12
   18040:	vst1.64	{d16-d17}, [r2], r0
   18044:	ldr	r0, [r2]
   18048:	orr	r0, r0, #67108864	; 0x4000000
   1804c:	str	r0, [r2]
   18050:	mov	r0, #0
   18054:	mvn	r2, #0
   18058:	bl	17be0 <__assert_fail@plt+0x66c0>
   1805c:	mov	sp, fp
   18060:	pop	{fp, pc}
   18064:	push	{fp, lr}
   18068:	mov	fp, sp
   1806c:	sub	sp, sp, #48	; 0x30
   18070:	mov	ip, r1
   18074:	mov	r1, r0
   18078:	movw	r0, #53696	; 0xd1c0
   1807c:	mov	r3, #32
   18080:	movt	r0, #2
   18084:	add	r2, r0, #16
   18088:	vld1.64	{d16-d17}, [r0], r3
   1808c:	mov	r3, sp
   18090:	vld1.64	{d18-d19}, [r2]
   18094:	add	r2, r3, #16
   18098:	vld1.64	{d20-d21}, [r0]
   1809c:	add	r0, r3, #32
   180a0:	vst1.64	{d18-d19}, [r2]
   180a4:	mov	r2, r3
   180a8:	vst1.64	{d20-d21}, [r0]
   180ac:	mov	r0, #12
   180b0:	vst1.64	{d16-d17}, [r2], r0
   180b4:	ldr	r0, [r2]
   180b8:	orr	r0, r0, #67108864	; 0x4000000
   180bc:	str	r0, [r2]
   180c0:	mov	r0, #0
   180c4:	mov	r2, ip
   180c8:	bl	17be0 <__assert_fail@plt+0x66c0>
   180cc:	mov	sp, fp
   180d0:	pop	{fp, pc}
   180d4:	push	{r4, sl, fp, lr}
   180d8:	add	fp, sp, #8
   180dc:	sub	sp, sp, #96	; 0x60
   180e0:	mov	ip, r2
   180e4:	mov	r2, sp
   180e8:	vmov.i32	q8, #0	; 0x00000000
   180ec:	mov	r4, #28
   180f0:	cmp	r1, #10
   180f4:	mov	r3, r2
   180f8:	add	lr, r2, #16
   180fc:	vst1.64	{d16-d17}, [r3], r4
   18100:	vst1.64	{d16-d17}, [lr]
   18104:	vst1.32	{d16-d17}, [r3]
   18108:	beq	18158 <__assert_fail@plt+0x6c38>
   1810c:	vld1.64	{d16-d17}, [r2], r4
   18110:	vld1.64	{d18-d19}, [lr]
   18114:	add	r3, sp, #48	; 0x30
   18118:	add	r4, r3, #4
   1811c:	vld1.32	{d20-d21}, [r2]
   18120:	add	r2, r3, #20
   18124:	vst1.32	{d16-d17}, [r4]
   18128:	vst1.32	{d18-d19}, [r2]
   1812c:	add	r2, r3, #32
   18130:	vst1.32	{d20-d21}, [r2]
   18134:	str	r1, [sp, #48]	; 0x30
   18138:	mvn	r2, #0
   1813c:	ldr	r1, [sp, #60]	; 0x3c
   18140:	orr	r1, r1, #67108864	; 0x4000000
   18144:	str	r1, [sp, #60]	; 0x3c
   18148:	mov	r1, ip
   1814c:	bl	17be0 <__assert_fail@plt+0x66c0>
   18150:	sub	sp, fp, #8
   18154:	pop	{r4, sl, fp, pc}
   18158:	bl	114d8 <abort@plt>
   1815c:	push	{r4, r5, fp, lr}
   18160:	add	fp, sp, #8
   18164:	sub	sp, sp, #48	; 0x30
   18168:	mov	ip, r3
   1816c:	movw	r3, #53696	; 0xd1c0
   18170:	mov	lr, #32
   18174:	cmp	r1, #0
   18178:	mov	r5, sp
   1817c:	movt	r3, #2
   18180:	cmpne	r2, #0
   18184:	add	r4, r3, #16
   18188:	vld1.64	{d16-d17}, [r3], lr
   1818c:	vld1.64	{d18-d19}, [r4]
   18190:	add	r4, r5, #16
   18194:	vld1.64	{d20-d21}, [r3]
   18198:	vst1.64	{d16-d17}, [r5], lr
   1819c:	mov	r3, #10
   181a0:	vst1.64	{d18-d19}, [r4]
   181a4:	vst1.64	{d20-d21}, [r5]
   181a8:	str	r3, [sp]
   181ac:	bne	181b4 <__assert_fail@plt+0x6c94>
   181b0:	bl	114d8 <abort@plt>
   181b4:	str	r2, [sp, #44]	; 0x2c
   181b8:	str	r1, [sp, #40]	; 0x28
   181bc:	mov	r3, sp
   181c0:	mov	r1, ip
   181c4:	mvn	r2, #0
   181c8:	bl	17be0 <__assert_fail@plt+0x66c0>
   181cc:	sub	sp, fp, #8
   181d0:	pop	{r4, r5, fp, pc}
   181d4:	push	{r4, r5, fp, lr}
   181d8:	add	fp, sp, #8
   181dc:	sub	sp, sp, #48	; 0x30
   181e0:	mov	lr, r3
   181e4:	movw	r3, #53696	; 0xd1c0
   181e8:	mov	ip, #32
   181ec:	cmp	r1, #0
   181f0:	mov	r5, sp
   181f4:	movt	r3, #2
   181f8:	cmpne	r2, #0
   181fc:	add	r4, r3, #16
   18200:	vld1.64	{d16-d17}, [r3], ip
   18204:	vld1.64	{d18-d19}, [r4]
   18208:	add	r4, r5, #16
   1820c:	vld1.64	{d20-d21}, [r3]
   18210:	vst1.64	{d16-d17}, [r5], ip
   18214:	mov	r3, #10
   18218:	vst1.64	{d18-d19}, [r4]
   1821c:	vst1.64	{d20-d21}, [r5]
   18220:	str	r3, [sp]
   18224:	bne	1822c <__assert_fail@plt+0x6d0c>
   18228:	bl	114d8 <abort@plt>
   1822c:	ldr	ip, [fp, #8]
   18230:	str	r2, [sp, #44]	; 0x2c
   18234:	str	r1, [sp, #40]	; 0x28
   18238:	mov	r3, sp
   1823c:	mov	r1, lr
   18240:	mov	r2, ip
   18244:	bl	17be0 <__assert_fail@plt+0x66c0>
   18248:	sub	sp, fp, #8
   1824c:	pop	{r4, r5, fp, pc}
   18250:	push	{r4, sl, fp, lr}
   18254:	add	fp, sp, #8
   18258:	sub	sp, sp, #48	; 0x30
   1825c:	mov	ip, r2
   18260:	movw	r2, #53696	; 0xd1c0
   18264:	mov	lr, #32
   18268:	cmp	r0, #0
   1826c:	mov	r4, sp
   18270:	movt	r2, #2
   18274:	cmpne	r1, #0
   18278:	add	r3, r2, #16
   1827c:	vld1.64	{d16-d17}, [r2], lr
   18280:	vld1.64	{d18-d19}, [r3]
   18284:	add	r3, r4, #16
   18288:	vld1.64	{d20-d21}, [r2]
   1828c:	vst1.64	{d16-d17}, [r4], lr
   18290:	mov	r2, #10
   18294:	vst1.64	{d18-d19}, [r3]
   18298:	vst1.64	{d20-d21}, [r4]
   1829c:	str	r2, [sp]
   182a0:	bne	182a8 <__assert_fail@plt+0x6d88>
   182a4:	bl	114d8 <abort@plt>
   182a8:	str	r1, [sp, #44]	; 0x2c
   182ac:	str	r0, [sp, #40]	; 0x28
   182b0:	mov	r3, sp
   182b4:	mov	r0, #0
   182b8:	mov	r1, ip
   182bc:	mvn	r2, #0
   182c0:	bl	17be0 <__assert_fail@plt+0x66c0>
   182c4:	sub	sp, fp, #8
   182c8:	pop	{r4, sl, fp, pc}
   182cc:	push	{r4, r5, fp, lr}
   182d0:	add	fp, sp, #8
   182d4:	sub	sp, sp, #48	; 0x30
   182d8:	mov	lr, r2
   182dc:	movw	r2, #53696	; 0xd1c0
   182e0:	mov	ip, r3
   182e4:	mov	r3, #32
   182e8:	cmp	r0, #0
   182ec:	mov	r5, sp
   182f0:	movt	r2, #2
   182f4:	cmpne	r1, #0
   182f8:	add	r4, r2, #16
   182fc:	vld1.64	{d16-d17}, [r2], r3
   18300:	vld1.64	{d18-d19}, [r4]
   18304:	add	r4, r5, #16
   18308:	vld1.64	{d20-d21}, [r2]
   1830c:	vst1.64	{d16-d17}, [r5], r3
   18310:	mov	r2, #10
   18314:	vst1.64	{d18-d19}, [r4]
   18318:	vst1.64	{d20-d21}, [r5]
   1831c:	str	r2, [sp]
   18320:	bne	18328 <__assert_fail@plt+0x6e08>
   18324:	bl	114d8 <abort@plt>
   18328:	str	r1, [sp, #44]	; 0x2c
   1832c:	str	r0, [sp, #40]	; 0x28
   18330:	mov	r3, sp
   18334:	mov	r0, #0
   18338:	mov	r1, lr
   1833c:	mov	r2, ip
   18340:	bl	17be0 <__assert_fail@plt+0x66c0>
   18344:	sub	sp, fp, #8
   18348:	pop	{r4, r5, fp, pc}
   1834c:	movw	r3, #53576	; 0xd148
   18350:	movt	r3, #2
   18354:	b	17be0 <__assert_fail@plt+0x66c0>
   18358:	movw	r3, #53576	; 0xd148
   1835c:	mov	r2, r1
   18360:	mov	r1, r0
   18364:	mov	r0, #0
   18368:	movt	r3, #2
   1836c:	b	17be0 <__assert_fail@plt+0x66c0>
   18370:	movw	r3, #53576	; 0xd148
   18374:	mvn	r2, #0
   18378:	movt	r3, #2
   1837c:	b	17be0 <__assert_fail@plt+0x66c0>
   18380:	movw	r3, #53576	; 0xd148
   18384:	mov	r1, r0
   18388:	mov	r0, #0
   1838c:	mvn	r2, #0
   18390:	movt	r3, #2
   18394:	b	17be0 <__assert_fail@plt+0x66c0>
   18398:	push	{r4, r5, fp, lr}
   1839c:	add	fp, sp, #8
   183a0:	mov	r5, r0
   183a4:	mov	r4, r1
   183a8:	mov	r0, #0
   183ac:	mov	r2, #5
   183b0:	mov	r1, r5
   183b4:	bl	112a4 <dcgettext@plt>
   183b8:	cmp	r0, r5
   183bc:	popne	{r4, r5, fp, pc}
   183c0:	bl	1a410 <__assert_fail@plt+0x8ef0>
   183c4:	ldrb	r1, [r0]
   183c8:	and	r1, r1, #223	; 0xdf
   183cc:	cmp	r1, #71	; 0x47
   183d0:	beq	18438 <__assert_fail@plt+0x6f18>
   183d4:	cmp	r1, #85	; 0x55
   183d8:	bne	1845c <__assert_fail@plt+0x6f3c>
   183dc:	ldrb	r1, [r0, #1]
   183e0:	and	r1, r1, #223	; 0xdf
   183e4:	cmp	r1, #84	; 0x54
   183e8:	bne	1845c <__assert_fail@plt+0x6f3c>
   183ec:	ldrb	r1, [r0, #2]
   183f0:	and	r1, r1, #223	; 0xdf
   183f4:	cmp	r1, #70	; 0x46
   183f8:	ldrbeq	r1, [r0, #3]
   183fc:	cmpeq	r1, #45	; 0x2d
   18400:	bne	1845c <__assert_fail@plt+0x6f3c>
   18404:	ldrb	r1, [r0, #4]
   18408:	cmp	r1, #56	; 0x38
   1840c:	ldrbeq	r0, [r0, #5]
   18410:	cmpeq	r0, #0
   18414:	bne	1845c <__assert_fail@plt+0x6f3c>
   18418:	ldrb	r1, [r5]
   1841c:	movw	r2, #47626	; 0xba0a
   18420:	movw	r0, #47630	; 0xba0e
   18424:	movt	r2, #1
   18428:	movt	r0, #1
   1842c:	cmp	r1, #96	; 0x60
   18430:	moveq	r0, r2
   18434:	pop	{r4, r5, fp, pc}
   18438:	ldrb	r1, [r0, #1]
   1843c:	and	r1, r1, #223	; 0xdf
   18440:	cmp	r1, #66	; 0x42
   18444:	bne	1845c <__assert_fail@plt+0x6f3c>
   18448:	ldrb	r1, [r0, #2]
   1844c:	cmp	r1, #49	; 0x31
   18450:	ldrbeq	r1, [r0, #3]
   18454:	cmpeq	r1, #56	; 0x38
   18458:	beq	18478 <__assert_fail@plt+0x6f58>
   1845c:	movw	r1, #47620	; 0xba04
   18460:	movw	r0, #47624	; 0xba08
   18464:	cmp	r4, #9
   18468:	movt	r1, #1
   1846c:	movt	r0, #1
   18470:	moveq	r0, r1
   18474:	pop	{r4, r5, fp, pc}
   18478:	ldrb	r1, [r0, #4]
   1847c:	cmp	r1, #48	; 0x30
   18480:	ldrbeq	r1, [r0, #5]
   18484:	cmpeq	r1, #51	; 0x33
   18488:	bne	1845c <__assert_fail@plt+0x6f3c>
   1848c:	ldrb	r1, [r0, #6]
   18490:	cmp	r1, #48	; 0x30
   18494:	ldrbeq	r0, [r0, #7]
   18498:	cmpeq	r0, #0
   1849c:	bne	1845c <__assert_fail@plt+0x6f3c>
   184a0:	ldrb	r1, [r5]
   184a4:	movw	r2, #47634	; 0xba12
   184a8:	movw	r0, #47638	; 0xba16
   184ac:	movt	r2, #1
   184b0:	movt	r0, #1
   184b4:	b	1842c <__assert_fail@plt+0x6f0c>
   184b8:	push	{r4, sl, fp, lr}
   184bc:	add	fp, sp, #8
   184c0:	sub	sp, sp, #104	; 0x68
   184c4:	movw	r1, #48503	; 0xbd77
   184c8:	mov	r4, r0
   184cc:	mov	r2, sp
   184d0:	mov	r0, #3
   184d4:	movt	r1, #1
   184d8:	bl	114f0 <__lxstat64@plt>
   184dc:	mov	r1, r0
   184e0:	mov	r0, #0
   184e4:	cmp	r1, #0
   184e8:	beq	184f4 <__assert_fail@plt+0x6fd4>
   184ec:	sub	sp, fp, #8
   184f0:	pop	{r4, sl, fp, pc}
   184f4:	ldr	r0, [sp, #96]	; 0x60
   184f8:	ldr	r1, [sp, #100]	; 0x64
   184fc:	ldm	sp, {r2, r3}
   18500:	stm	r4, {r0, r1, r2, r3}
   18504:	mov	r0, r4
   18508:	sub	sp, fp, #8
   1850c:	pop	{r4, sl, fp, pc}
   18510:	push	{r4, r5, r6, r7, fp, lr}
   18514:	add	fp, sp, #16
   18518:	mov	r4, r0
   1851c:	cmp	r0, #2
   18520:	movhi	r0, r4
   18524:	pophi	{r4, r5, r6, r7, fp, pc}
   18528:	mov	r0, r4
   1852c:	bl	1a4e4 <__assert_fail@plt+0x8fc4>
   18530:	mov	r5, r0
   18534:	bl	113d0 <__errno_location@plt>
   18538:	ldr	r7, [r0]
   1853c:	mov	r6, r0
   18540:	mov	r0, r4
   18544:	bl	114e4 <close@plt>
   18548:	mov	r0, r5
   1854c:	str	r7, [r6]
   18550:	pop	{r4, r5, r6, r7, fp, pc}
   18554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18558:	add	fp, sp, #28
   1855c:	sub	sp, sp, #12
   18560:	ldr	sl, [fp, #8]
   18564:	mov	r9, r3
   18568:	mov	r4, r2
   1856c:	mov	r8, r1
   18570:	mov	r7, r0
   18574:	cmp	r2, #0
   18578:	beq	18590 <__assert_fail@plt+0x7070>
   1857c:	mov	r0, r7
   18580:	mov	r1, #58	; 0x3a
   18584:	bl	113ac <strchr@plt>
   18588:	mov	r6, r0
   1858c:	b	18594 <__assert_fail@plt+0x7074>
   18590:	mov	r6, #0
   18594:	mov	r0, r7
   18598:	mov	r1, r6
   1859c:	mov	r2, r8
   185a0:	mov	r3, r4
   185a4:	stm	sp, {r9, sl}
   185a8:	bl	18610 <__assert_fail@plt+0x70f0>
   185ac:	mov	r5, r0
   185b0:	cmp	r4, #0
   185b4:	beq	18604 <__assert_fail@plt+0x70e4>
   185b8:	cmp	r6, #0
   185bc:	bne	18604 <__assert_fail@plt+0x70e4>
   185c0:	cmp	r5, #0
   185c4:	beq	18604 <__assert_fail@plt+0x70e4>
   185c8:	mov	r0, r7
   185cc:	mov	r1, #46	; 0x2e
   185d0:	bl	113ac <strchr@plt>
   185d4:	cmp	r0, #0
   185d8:	beq	18604 <__assert_fail@plt+0x70e4>
   185dc:	mov	r1, r0
   185e0:	mov	r0, r7
   185e4:	mov	r2, r8
   185e8:	mov	r3, r4
   185ec:	stm	sp, {r9, sl}
   185f0:	bl	18610 <__assert_fail@plt+0x70f0>
   185f4:	cmp	r0, #0
   185f8:	movne	r0, r5
   185fc:	sub	sp, fp, #28
   18600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18604:	mov	r0, r5
   18608:	sub	sp, fp, #28
   1860c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18614:	add	fp, sp, #28
   18618:	sub	sp, sp, #36	; 0x24
   1861c:	mov	sl, r3
   18620:	ldr	r3, [r2]
   18624:	mov	r9, r2
   18628:	mov	r4, r1
   1862c:	ldr	r2, [fp, #8]
   18630:	ldr	r8, [fp, #12]
   18634:	cmp	sl, #0
   18638:	ldrne	r1, [sl]
   1863c:	str	r3, [sp, #4]
   18640:	mvneq	r1, #0
   18644:	cmp	r2, #0
   18648:	str	r1, [sp, #8]
   1864c:	movne	r1, #0
   18650:	strne	r1, [r2]
   18654:	cmp	r8, #0
   18658:	movne	r1, #0
   1865c:	strne	r1, [r8]
   18660:	cmp	r4, #0
   18664:	beq	18698 <__assert_fail@plt+0x7178>
   18668:	subs	r5, r4, r0
   1866c:	beq	18728 <__assert_fail@plt+0x7208>
   18670:	add	r1, r5, #1
   18674:	bl	19454 <__assert_fail@plt+0x7f34>
   18678:	mov	r7, r0
   1867c:	mov	r0, #0
   18680:	mov	r6, r4
   18684:	strb	r0, [r7, r5]
   18688:	ldrb	r0, [r6, #1]!
   1868c:	cmp	r0, #0
   18690:	moveq	r6, r0
   18694:	b	186b0 <__assert_fail@plt+0x7190>
   18698:	ldrb	r1, [r0]
   1869c:	cmp	r1, #0
   186a0:	beq	18840 <__assert_fail@plt+0x7320>
   186a4:	bl	194d8 <__assert_fail@plt+0x7fb8>
   186a8:	mov	r7, r0
   186ac:	mov	r6, #0
   186b0:	ldrb	r0, [r7]
   186b4:	cmp	r0, #43	; 0x2b
   186b8:	beq	18708 <__assert_fail@plt+0x71e8>
   186bc:	mov	r0, r7
   186c0:	bl	11220 <getpwnam@plt>
   186c4:	cmp	r0, #0
   186c8:	beq	18708 <__assert_fail@plt+0x71e8>
   186cc:	ldr	r1, [r0, #8]
   186d0:	mov	r5, #0
   186d4:	cmp	r4, #0
   186d8:	str	r1, [sp, #4]
   186dc:	beq	1884c <__assert_fail@plt+0x732c>
   186e0:	cmp	r6, #0
   186e4:	bne	1884c <__assert_fail@plt+0x732c>
   186e8:	ldr	r4, [r0, #12]
   186ec:	mov	r0, r4
   186f0:	bl	11508 <getgrgid@plt>
   186f4:	cmp	r0, #0
   186f8:	str	r4, [sp, #8]
   186fc:	beq	18854 <__assert_fail@plt+0x7334>
   18700:	ldr	r0, [r0]
   18704:	b	18864 <__assert_fail@plt+0x7344>
   18708:	cmp	r4, #0
   1870c:	beq	187e4 <__assert_fail@plt+0x72c4>
   18710:	cmp	r6, #0
   18714:	bne	187e4 <__assert_fail@plt+0x72c4>
   18718:	movw	r5, #47755	; 0xba8b
   1871c:	mov	r4, #0
   18720:	movt	r5, #1
   18724:	b	18870 <__assert_fail@plt+0x7350>
   18728:	ldrb	r0, [r4, #1]!
   1872c:	mov	r7, #0
   18730:	mov	r5, #0
   18734:	cmp	r0, #0
   18738:	moveq	r4, r0
   1873c:	mov	r6, r4
   18740:	mov	r4, #0
   18744:	cmp	r6, #0
   18748:	beq	1887c <__assert_fail@plt+0x735c>
   1874c:	cmp	r5, #0
   18750:	bne	1887c <__assert_fail@plt+0x735c>
   18754:	ldrb	r0, [r6]
   18758:	cmp	r0, #43	; 0x2b
   1875c:	beq	1877c <__assert_fail@plt+0x725c>
   18760:	mov	r0, r6
   18764:	bl	11514 <getgrnam@plt>
   18768:	cmp	r0, #0
   1876c:	beq	1877c <__assert_fail@plt+0x725c>
   18770:	ldr	r0, [r0, #8]
   18774:	mov	r5, #0
   18778:	b	187cc <__assert_fail@plt+0x72ac>
   1877c:	movw	r0, #44952	; 0xaf98
   18780:	add	r3, sp, #12
   18784:	mov	r1, #0
   18788:	mov	r2, #10
   1878c:	movt	r0, #1
   18790:	str	r0, [sp]
   18794:	mov	r0, r6
   18798:	bl	195d8 <__assert_fail@plt+0x80b8>
   1879c:	ldr	r1, [sp, #12]
   187a0:	clz	r0, r0
   187a4:	movw	r5, #47741	; 0xba7d
   187a8:	lsr	r0, r0, #5
   187ac:	movt	r5, #1
   187b0:	add	r2, r1, #1
   187b4:	cmn	r1, #1
   187b8:	movwne	r2, #1
   187bc:	ands	r0, r0, r2
   187c0:	ldr	r0, [sp, #8]
   187c4:	movwne	r5, #0
   187c8:	movne	r0, r1
   187cc:	str	r0, [sp, #8]
   187d0:	bl	111fc <endgrent@plt>
   187d4:	mov	r0, r6
   187d8:	bl	194d8 <__assert_fail@plt+0x7fb8>
   187dc:	mov	r4, r0
   187e0:	b	1887c <__assert_fail@plt+0x735c>
   187e4:	movw	r0, #44952	; 0xaf98
   187e8:	add	r3, sp, #12
   187ec:	mov	r1, #0
   187f0:	mov	r2, #10
   187f4:	mov	r4, #0
   187f8:	movt	r0, #1
   187fc:	str	r0, [sp]
   18800:	mov	r0, r7
   18804:	bl	195d8 <__assert_fail@plt+0x80b8>
   18808:	ldr	r1, [sp, #12]
   1880c:	clz	r0, r0
   18810:	movw	r5, #47728	; 0xba70
   18814:	lsr	r0, r0, #5
   18818:	movt	r5, #1
   1881c:	add	r2, r1, #1
   18820:	cmn	r1, #1
   18824:	movwne	r2, #1
   18828:	ands	r0, r0, r2
   1882c:	ldr	r0, [sp, #4]
   18830:	movwne	r5, #0
   18834:	movne	r0, r1
   18838:	str	r0, [sp, #4]
   1883c:	b	18870 <__assert_fail@plt+0x7350>
   18840:	mov	r4, #0
   18844:	mov	r7, #0
   18848:	b	18888 <__assert_fail@plt+0x7368>
   1884c:	mov	r4, #0
   18850:	b	18870 <__assert_fail@plt+0x7350>
   18854:	add	r2, sp, #12
   18858:	mov	r0, r4
   1885c:	mov	r1, #0
   18860:	bl	16650 <__assert_fail@plt+0x5130>
   18864:	bl	194d8 <__assert_fail@plt+0x7fb8>
   18868:	mov	r4, r0
   1886c:	bl	111fc <endgrent@plt>
   18870:	bl	11448 <endpwent@plt>
   18874:	cmp	r6, #0
   18878:	bne	1874c <__assert_fail@plt+0x722c>
   1887c:	mov	r6, #0
   18880:	cmp	r5, #0
   18884:	bne	188cc <__assert_fail@plt+0x73ac>
   18888:	ldr	r0, [sp, #4]
   1888c:	cmp	sl, #0
   18890:	mov	r6, #1
   18894:	str	r0, [r9]
   18898:	ldrne	r0, [sp, #8]
   1889c:	strne	r0, [sl]
   188a0:	ldr	r0, [fp, #8]
   188a4:	cmp	r0, #0
   188a8:	strne	r7, [r0]
   188ac:	movne	r7, #0
   188b0:	cmp	r8, #0
   188b4:	beq	188c8 <__assert_fail@plt+0x73a8>
   188b8:	str	r4, [r8]
   188bc:	mov	r5, #0
   188c0:	mov	r4, #0
   188c4:	b	188cc <__assert_fail@plt+0x73ac>
   188c8:	mov	r5, #0
   188cc:	mov	r0, r7
   188d0:	bl	12efc <__assert_fail@plt+0x19dc>
   188d4:	mov	r0, r4
   188d8:	bl	12efc <__assert_fail@plt+0x19dc>
   188dc:	mov	r0, #0
   188e0:	cmp	r6, #0
   188e4:	bne	188f8 <__assert_fail@plt+0x73d8>
   188e8:	mov	r0, #0
   188ec:	mov	r1, r5
   188f0:	mov	r2, #5
   188f4:	bl	112a4 <dcgettext@plt>
   188f8:	sub	sp, fp, #28
   188fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18900:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18904:	add	fp, sp, #24
   18908:	sub	sp, sp, #32
   1890c:	ldr	r6, [fp, #12]
   18910:	ldr	r7, [fp, #8]
   18914:	mov	r4, r2
   18918:	mov	r8, r0
   1891c:	cmp	r1, #0
   18920:	beq	18948 <__assert_fail@plt+0x7428>
   18924:	movw	r2, #47768	; 0xba98
   18928:	mov	r5, r1
   1892c:	str	r3, [sp, #4]
   18930:	str	r4, [sp]
   18934:	mov	r0, r8
   18938:	mov	r1, #1
   1893c:	movt	r2, #1
   18940:	mov	r3, r5
   18944:	b	18960 <__assert_fail@plt+0x7440>
   18948:	movw	r2, #47780	; 0xbaa4
   1894c:	str	r3, [sp]
   18950:	mov	r0, r8
   18954:	mov	r1, #1
   18958:	mov	r3, r4
   1895c:	movt	r2, #1
   18960:	bl	1140c <__fprintf_chk@plt>
   18964:	movw	r1, #47787	; 0xbaab
   18968:	mov	r0, #0
   1896c:	mov	r2, #5
   18970:	movt	r1, #1
   18974:	bl	112a4 <dcgettext@plt>
   18978:	movw	r2, #48505	; 0xbd79
   1897c:	mov	r3, r0
   18980:	movw	r0, #2022	; 0x7e6
   18984:	mov	r1, #1
   18988:	str	r0, [sp]
   1898c:	movt	r2, #1
   18990:	mov	r0, r8
   18994:	bl	1140c <__fprintf_chk@plt>
   18998:	movw	r4, #44951	; 0xaf97
   1899c:	mov	r1, r8
   189a0:	movt	r4, #1
   189a4:	mov	r0, r4
   189a8:	bl	11208 <fputs_unlocked@plt>
   189ac:	movw	r1, #47791	; 0xbaaf
   189b0:	mov	r0, #0
   189b4:	mov	r2, #5
   189b8:	movt	r1, #1
   189bc:	bl	112a4 <dcgettext@plt>
   189c0:	movw	r3, #47962	; 0xbb5a
   189c4:	mov	r2, r0
   189c8:	mov	r0, r8
   189cc:	mov	r1, #1
   189d0:	movt	r3, #1
   189d4:	bl	1140c <__fprintf_chk@plt>
   189d8:	mov	r0, r4
   189dc:	mov	r1, r8
   189e0:	bl	11208 <fputs_unlocked@plt>
   189e4:	cmp	r6, #9
   189e8:	bhi	18a24 <__assert_fail@plt+0x7504>
   189ec:	add	r0, pc, #0
   189f0:	ldr	pc, [r0, r6, lsl #2]
   189f4:	andeq	r8, r1, ip, lsl sl
   189f8:	andeq	r8, r1, r0, lsr sl
   189fc:	andeq	r8, r1, r0, ror #20
   18a00:	andeq	r8, r1, r8, lsl #21
   18a04:			; <UNDEFINED> instruction: 0x00018ab0
   18a08:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a0c:	andeq	r8, r1, r0, lsl #22
   18a10:	andeq	r8, r1, r8, lsr fp
   18a14:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18a18:	andeq	r8, r1, r0, lsl #23
   18a1c:	sub	sp, fp, #24
   18a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a24:	movw	r1, #48315	; 0xbcbb
   18a28:	movt	r1, #1
   18a2c:	b	18b88 <__assert_fail@plt+0x7668>
   18a30:	movw	r1, #47996	; 0xbb7c
   18a34:	mov	r0, #0
   18a38:	mov	r2, #5
   18a3c:	movt	r1, #1
   18a40:	bl	112a4 <dcgettext@plt>
   18a44:	ldr	r3, [r7]
   18a48:	mov	r2, r0
   18a4c:	mov	r0, r8
   18a50:	mov	r1, #1
   18a54:	sub	sp, fp, #24
   18a58:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a5c:	b	1140c <__fprintf_chk@plt>
   18a60:	movw	r1, #48012	; 0xbb8c
   18a64:	mov	r0, #0
   18a68:	mov	r2, #5
   18a6c:	movt	r1, #1
   18a70:	bl	112a4 <dcgettext@plt>
   18a74:	mov	r2, r0
   18a78:	ldr	r3, [r7]
   18a7c:	ldr	r0, [r7, #4]
   18a80:	str	r0, [sp]
   18a84:	b	18b74 <__assert_fail@plt+0x7654>
   18a88:	movw	r1, #48035	; 0xbba3
   18a8c:	mov	r0, #0
   18a90:	mov	r2, #5
   18a94:	movt	r1, #1
   18a98:	bl	112a4 <dcgettext@plt>
   18a9c:	ldr	r3, [r7]
   18aa0:	mov	r2, r0
   18aa4:	ldmib	r7, {r0, r1}
   18aa8:	stm	sp, {r0, r1}
   18aac:	b	18b74 <__assert_fail@plt+0x7654>
   18ab0:	movw	r1, #48063	; 0xbbbf
   18ab4:	mov	r0, #0
   18ab8:	mov	r2, #5
   18abc:	movt	r1, #1
   18ac0:	bl	112a4 <dcgettext@plt>
   18ac4:	ldr	r3, [r7]
   18ac8:	mov	r2, r0
   18acc:	ldmib	r7, {r0, r1, r7}
   18ad0:	stm	sp, {r0, r1, r7}
   18ad4:	b	18b74 <__assert_fail@plt+0x7654>
   18ad8:	movw	r1, #48095	; 0xbbdf
   18adc:	mov	r0, #0
   18ae0:	mov	r2, #5
   18ae4:	movt	r1, #1
   18ae8:	bl	112a4 <dcgettext@plt>
   18aec:	ldr	r3, [r7]
   18af0:	mov	r2, r0
   18af4:	ldmib	r7, {r0, r1, r6, r7}
   18af8:	stm	sp, {r0, r1, r6, r7}
   18afc:	b	18b74 <__assert_fail@plt+0x7654>
   18b00:	movw	r1, #48131	; 0xbc03
   18b04:	mov	r0, #0
   18b08:	mov	r2, #5
   18b0c:	movt	r1, #1
   18b10:	bl	112a4 <dcgettext@plt>
   18b14:	ldr	r3, [r7]
   18b18:	mov	r2, r0
   18b1c:	ldmib	r7, {r0, r1, r6}
   18b20:	ldr	r5, [r7, #16]
   18b24:	ldr	r7, [r7, #20]
   18b28:	stm	sp, {r0, r1, r6}
   18b2c:	str	r5, [sp, #12]
   18b30:	str	r7, [sp, #16]
   18b34:	b	18b74 <__assert_fail@plt+0x7654>
   18b38:	movw	r1, #48171	; 0xbc2b
   18b3c:	mov	r0, #0
   18b40:	mov	r2, #5
   18b44:	movt	r1, #1
   18b48:	bl	112a4 <dcgettext@plt>
   18b4c:	ldr	r3, [r7]
   18b50:	mov	r2, r0
   18b54:	ldmib	r7, {r0, r1, r6}
   18b58:	ldr	r5, [r7, #16]
   18b5c:	ldr	r4, [r7, #20]
   18b60:	ldr	r7, [r7, #24]
   18b64:	stm	sp, {r0, r1, r6}
   18b68:	str	r5, [sp, #12]
   18b6c:	str	r4, [sp, #16]
   18b70:	str	r7, [sp, #20]
   18b74:	mov	r0, r8
   18b78:	mov	r1, #1
   18b7c:	b	18c28 <__assert_fail@plt+0x7708>
   18b80:	movw	r1, #48263	; 0xbc87
   18b84:	movt	r1, #1
   18b88:	mov	r0, #0
   18b8c:	mov	r2, #5
   18b90:	bl	112a4 <dcgettext@plt>
   18b94:	mov	ip, r0
   18b98:	ldr	r3, [r7]
   18b9c:	ldr	r0, [r7, #4]
   18ba0:	ldr	r1, [r7, #8]
   18ba4:	ldr	r6, [r7, #12]
   18ba8:	ldr	r5, [r7, #16]
   18bac:	ldr	r4, [r7, #20]
   18bb0:	ldr	r2, [r7, #24]
   18bb4:	ldr	lr, [r7, #28]
   18bb8:	ldr	r7, [r7, #32]
   18bbc:	stm	sp, {r0, r1, r6}
   18bc0:	str	r5, [sp, #12]
   18bc4:	str	r4, [sp, #16]
   18bc8:	str	r2, [sp, #20]
   18bcc:	str	lr, [sp, #24]
   18bd0:	str	r7, [sp, #28]
   18bd4:	b	18c1c <__assert_fail@plt+0x76fc>
   18bd8:	movw	r1, #48215	; 0xbc57
   18bdc:	mov	r0, #0
   18be0:	mov	r2, #5
   18be4:	movt	r1, #1
   18be8:	bl	112a4 <dcgettext@plt>
   18bec:	mov	ip, r0
   18bf0:	ldr	r3, [r7]
   18bf4:	ldmib	r7, {r0, r1, r6}
   18bf8:	ldr	r5, [r7, #16]
   18bfc:	ldr	r4, [r7, #20]
   18c00:	ldr	r2, [r7, #24]
   18c04:	ldr	r7, [r7, #28]
   18c08:	stm	sp, {r0, r1, r6}
   18c0c:	str	r5, [sp, #12]
   18c10:	str	r4, [sp, #16]
   18c14:	str	r2, [sp, #20]
   18c18:	str	r7, [sp, #24]
   18c1c:	mov	r0, r8
   18c20:	mov	r1, #1
   18c24:	mov	r2, ip
   18c28:	bl	1140c <__fprintf_chk@plt>
   18c2c:	sub	sp, fp, #24
   18c30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c34:	push	{r4, sl, fp, lr}
   18c38:	add	fp, sp, #8
   18c3c:	sub	sp, sp, #8
   18c40:	ldr	ip, [fp, #8]
   18c44:	mov	lr, #0
   18c48:	ldr	r4, [ip, lr, lsl #2]
   18c4c:	add	lr, lr, #1
   18c50:	cmp	r4, #0
   18c54:	bne	18c48 <__assert_fail@plt+0x7728>
   18c58:	sub	r4, lr, #1
   18c5c:	str	ip, [sp]
   18c60:	str	r4, [sp, #4]
   18c64:	bl	18900 <__assert_fail@plt+0x73e0>
   18c68:	sub	sp, fp, #8
   18c6c:	pop	{r4, sl, fp, pc}
   18c70:	push	{fp, lr}
   18c74:	mov	fp, sp
   18c78:	sub	sp, sp, #48	; 0x30
   18c7c:	ldr	ip, [fp, #8]
   18c80:	ldr	lr, [ip]
   18c84:	cmp	lr, #0
   18c88:	str	lr, [sp, #8]
   18c8c:	beq	18d28 <__assert_fail@plt+0x7808>
   18c90:	ldr	lr, [ip, #4]
   18c94:	cmp	lr, #0
   18c98:	str	lr, [sp, #12]
   18c9c:	beq	18d30 <__assert_fail@plt+0x7810>
   18ca0:	ldr	lr, [ip, #8]
   18ca4:	cmp	lr, #0
   18ca8:	str	lr, [sp, #16]
   18cac:	beq	18d38 <__assert_fail@plt+0x7818>
   18cb0:	ldr	lr, [ip, #12]
   18cb4:	cmp	lr, #0
   18cb8:	str	lr, [sp, #20]
   18cbc:	beq	18d40 <__assert_fail@plt+0x7820>
   18cc0:	ldr	lr, [ip, #16]
   18cc4:	cmp	lr, #0
   18cc8:	str	lr, [sp, #24]
   18ccc:	beq	18d48 <__assert_fail@plt+0x7828>
   18cd0:	ldr	lr, [ip, #20]
   18cd4:	cmp	lr, #0
   18cd8:	str	lr, [sp, #28]
   18cdc:	beq	18d50 <__assert_fail@plt+0x7830>
   18ce0:	ldr	lr, [ip, #24]
   18ce4:	cmp	lr, #0
   18ce8:	str	lr, [sp, #32]
   18cec:	beq	18d58 <__assert_fail@plt+0x7838>
   18cf0:	ldr	lr, [ip, #28]
   18cf4:	cmp	lr, #0
   18cf8:	str	lr, [sp, #36]	; 0x24
   18cfc:	beq	18d60 <__assert_fail@plt+0x7840>
   18d00:	ldr	lr, [ip, #32]
   18d04:	cmp	lr, #0
   18d08:	str	lr, [sp, #40]	; 0x28
   18d0c:	beq	18d68 <__assert_fail@plt+0x7848>
   18d10:	ldr	lr, [ip, #36]	; 0x24
   18d14:	mov	ip, #10
   18d18:	cmp	lr, #0
   18d1c:	str	lr, [sp, #44]	; 0x2c
   18d20:	movweq	ip, #9
   18d24:	b	18d6c <__assert_fail@plt+0x784c>
   18d28:	mov	ip, #0
   18d2c:	b	18d6c <__assert_fail@plt+0x784c>
   18d30:	mov	ip, #1
   18d34:	b	18d6c <__assert_fail@plt+0x784c>
   18d38:	mov	ip, #2
   18d3c:	b	18d6c <__assert_fail@plt+0x784c>
   18d40:	mov	ip, #3
   18d44:	b	18d6c <__assert_fail@plt+0x784c>
   18d48:	mov	ip, #4
   18d4c:	b	18d6c <__assert_fail@plt+0x784c>
   18d50:	mov	ip, #5
   18d54:	b	18d6c <__assert_fail@plt+0x784c>
   18d58:	mov	ip, #6
   18d5c:	b	18d6c <__assert_fail@plt+0x784c>
   18d60:	mov	ip, #7
   18d64:	b	18d6c <__assert_fail@plt+0x784c>
   18d68:	mov	ip, #8
   18d6c:	add	lr, sp, #8
   18d70:	str	ip, [sp, #4]
   18d74:	str	lr, [sp]
   18d78:	bl	18900 <__assert_fail@plt+0x73e0>
   18d7c:	mov	sp, fp
   18d80:	pop	{fp, pc}
   18d84:	push	{fp, lr}
   18d88:	mov	fp, sp
   18d8c:	sub	sp, sp, #56	; 0x38
   18d90:	add	ip, fp, #8
   18d94:	str	ip, [sp, #12]
   18d98:	ldr	lr, [fp, #8]
   18d9c:	cmp	lr, #0
   18da0:	str	lr, [sp, #16]
   18da4:	beq	18e40 <__assert_fail@plt+0x7920>
   18da8:	ldr	lr, [ip, #4]
   18dac:	cmp	lr, #0
   18db0:	str	lr, [sp, #20]
   18db4:	beq	18e48 <__assert_fail@plt+0x7928>
   18db8:	ldr	lr, [ip, #8]
   18dbc:	cmp	lr, #0
   18dc0:	str	lr, [sp, #24]
   18dc4:	beq	18e50 <__assert_fail@plt+0x7930>
   18dc8:	ldr	lr, [ip, #12]
   18dcc:	cmp	lr, #0
   18dd0:	str	lr, [sp, #28]
   18dd4:	beq	18e58 <__assert_fail@plt+0x7938>
   18dd8:	ldr	lr, [ip, #16]
   18ddc:	cmp	lr, #0
   18de0:	str	lr, [sp, #32]
   18de4:	beq	18e60 <__assert_fail@plt+0x7940>
   18de8:	ldr	lr, [ip, #20]
   18dec:	cmp	lr, #0
   18df0:	str	lr, [sp, #36]	; 0x24
   18df4:	beq	18e68 <__assert_fail@plt+0x7948>
   18df8:	ldr	lr, [ip, #24]
   18dfc:	cmp	lr, #0
   18e00:	str	lr, [sp, #40]	; 0x28
   18e04:	beq	18e70 <__assert_fail@plt+0x7950>
   18e08:	ldr	lr, [ip, #28]
   18e0c:	cmp	lr, #0
   18e10:	str	lr, [sp, #44]	; 0x2c
   18e14:	beq	18e78 <__assert_fail@plt+0x7958>
   18e18:	ldr	lr, [ip, #32]
   18e1c:	cmp	lr, #0
   18e20:	str	lr, [sp, #48]	; 0x30
   18e24:	beq	18e80 <__assert_fail@plt+0x7960>
   18e28:	ldr	lr, [ip, #36]	; 0x24
   18e2c:	mov	ip, #10
   18e30:	cmp	lr, #0
   18e34:	str	lr, [sp, #52]	; 0x34
   18e38:	movweq	ip, #9
   18e3c:	b	18e84 <__assert_fail@plt+0x7964>
   18e40:	mov	ip, #0
   18e44:	b	18e84 <__assert_fail@plt+0x7964>
   18e48:	mov	ip, #1
   18e4c:	b	18e84 <__assert_fail@plt+0x7964>
   18e50:	mov	ip, #2
   18e54:	b	18e84 <__assert_fail@plt+0x7964>
   18e58:	mov	ip, #3
   18e5c:	b	18e84 <__assert_fail@plt+0x7964>
   18e60:	mov	ip, #4
   18e64:	b	18e84 <__assert_fail@plt+0x7964>
   18e68:	mov	ip, #5
   18e6c:	b	18e84 <__assert_fail@plt+0x7964>
   18e70:	mov	ip, #6
   18e74:	b	18e84 <__assert_fail@plt+0x7964>
   18e78:	mov	ip, #7
   18e7c:	b	18e84 <__assert_fail@plt+0x7964>
   18e80:	mov	ip, #8
   18e84:	add	lr, sp, #16
   18e88:	str	ip, [sp, #4]
   18e8c:	str	lr, [sp]
   18e90:	bl	18900 <__assert_fail@plt+0x73e0>
   18e94:	mov	sp, fp
   18e98:	pop	{fp, pc}
   18e9c:	push	{fp, lr}
   18ea0:	mov	fp, sp
   18ea4:	movw	r0, #53644	; 0xd18c
   18ea8:	movt	r0, #2
   18eac:	ldr	r1, [r0]
   18eb0:	movw	r0, #44951	; 0xaf97
   18eb4:	movt	r0, #1
   18eb8:	bl	11208 <fputs_unlocked@plt>
   18ebc:	movw	r1, #48375	; 0xbcf7
   18ec0:	mov	r0, #0
   18ec4:	mov	r2, #5
   18ec8:	movt	r1, #1
   18ecc:	bl	112a4 <dcgettext@plt>
   18ed0:	movw	r2, #48395	; 0xbd0b
   18ed4:	mov	r1, r0
   18ed8:	mov	r0, #1
   18edc:	movt	r2, #1
   18ee0:	bl	113f4 <__printf_chk@plt>
   18ee4:	movw	r1, #48417	; 0xbd21
   18ee8:	mov	r0, #0
   18eec:	mov	r2, #5
   18ef0:	movt	r1, #1
   18ef4:	bl	112a4 <dcgettext@plt>
   18ef8:	movw	r2, #45491	; 0xb1b3
   18efc:	movw	r3, #45766	; 0xb2c6
   18f00:	mov	r1, r0
   18f04:	mov	r0, #1
   18f08:	movt	r2, #1
   18f0c:	movt	r3, #1
   18f10:	bl	113f4 <__printf_chk@plt>
   18f14:	movw	r1, #48437	; 0xbd35
   18f18:	mov	r0, #0
   18f1c:	mov	r2, #5
   18f20:	movt	r1, #1
   18f24:	bl	112a4 <dcgettext@plt>
   18f28:	movw	r2, #48476	; 0xbd5c
   18f2c:	mov	r1, r0
   18f30:	mov	r0, #1
   18f34:	movt	r2, #1
   18f38:	pop	{fp, lr}
   18f3c:	b	113f4 <__printf_chk@plt>
   18f40:	push	{r4, r5, r6, sl, fp, lr}
   18f44:	add	fp, sp, #16
   18f48:	mov	r4, r2
   18f4c:	mov	r5, r1
   18f50:	mov	r6, r0
   18f54:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   18f58:	cmp	r0, #0
   18f5c:	popne	{r4, r5, r6, sl, fp, pc}
   18f60:	cmp	r6, #0
   18f64:	beq	18f78 <__assert_fail@plt+0x7a58>
   18f68:	cmp	r5, #0
   18f6c:	cmpne	r4, #0
   18f70:	bne	18f78 <__assert_fail@plt+0x7a58>
   18f74:	pop	{r4, r5, r6, sl, fp, pc}
   18f78:	bl	19518 <__assert_fail@plt+0x7ff8>
   18f7c:	push	{r4, r5, r6, sl, fp, lr}
   18f80:	add	fp, sp, #16
   18f84:	mov	r4, r2
   18f88:	mov	r5, r1
   18f8c:	mov	r6, r0
   18f90:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   18f94:	cmp	r0, #0
   18f98:	popne	{r4, r5, r6, sl, fp, pc}
   18f9c:	cmp	r6, #0
   18fa0:	beq	18fb4 <__assert_fail@plt+0x7a94>
   18fa4:	cmp	r5, #0
   18fa8:	cmpne	r4, #0
   18fac:	bne	18fb4 <__assert_fail@plt+0x7a94>
   18fb0:	pop	{r4, r5, r6, sl, fp, pc}
   18fb4:	bl	19518 <__assert_fail@plt+0x7ff8>
   18fb8:	push	{fp, lr}
   18fbc:	mov	fp, sp
   18fc0:	bl	19e50 <__assert_fail@plt+0x8930>
   18fc4:	cmp	r0, #0
   18fc8:	popne	{fp, pc}
   18fcc:	bl	19518 <__assert_fail@plt+0x7ff8>
   18fd0:	push	{fp, lr}
   18fd4:	mov	fp, sp
   18fd8:	bl	19e50 <__assert_fail@plt+0x8930>
   18fdc:	cmp	r0, #0
   18fe0:	popne	{fp, pc}
   18fe4:	bl	19518 <__assert_fail@plt+0x7ff8>
   18fe8:	push	{fp, lr}
   18fec:	mov	fp, sp
   18ff0:	bl	19e50 <__assert_fail@plt+0x8930>
   18ff4:	cmp	r0, #0
   18ff8:	popne	{fp, pc}
   18ffc:	bl	19518 <__assert_fail@plt+0x7ff8>
   19000:	push	{r4, r5, fp, lr}
   19004:	add	fp, sp, #8
   19008:	mov	r4, r1
   1900c:	mov	r5, r0
   19010:	bl	19e80 <__assert_fail@plt+0x8960>
   19014:	cmp	r0, #0
   19018:	popne	{r4, r5, fp, pc}
   1901c:	cmp	r5, #0
   19020:	beq	19030 <__assert_fail@plt+0x7b10>
   19024:	cmp	r4, #0
   19028:	bne	19030 <__assert_fail@plt+0x7b10>
   1902c:	pop	{r4, r5, fp, pc}
   19030:	bl	19518 <__assert_fail@plt+0x7ff8>
   19034:	push	{fp, lr}
   19038:	mov	fp, sp
   1903c:	cmp	r1, #0
   19040:	orreq	r1, r1, #1
   19044:	bl	19e80 <__assert_fail@plt+0x8960>
   19048:	cmp	r0, #0
   1904c:	popne	{fp, pc}
   19050:	bl	19518 <__assert_fail@plt+0x7ff8>
   19054:	push	{fp, lr}
   19058:	mov	fp, sp
   1905c:	clz	r3, r2
   19060:	lsr	ip, r3, #5
   19064:	clz	r3, r1
   19068:	lsr	r3, r3, #5
   1906c:	orrs	r3, r3, ip
   19070:	movwne	r1, #1
   19074:	movwne	r2, #1
   19078:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   1907c:	cmp	r0, #0
   19080:	popne	{fp, pc}
   19084:	bl	19518 <__assert_fail@plt+0x7ff8>
   19088:	push	{fp, lr}
   1908c:	mov	fp, sp
   19090:	mov	r2, r1
   19094:	mov	r1, r0
   19098:	mov	r0, #0
   1909c:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   190a0:	cmp	r0, #0
   190a4:	popne	{fp, pc}
   190a8:	bl	19518 <__assert_fail@plt+0x7ff8>
   190ac:	push	{fp, lr}
   190b0:	mov	fp, sp
   190b4:	mov	r2, r1
   190b8:	mov	r1, r0
   190bc:	clz	r0, r2
   190c0:	clz	r3, r1
   190c4:	lsr	r0, r0, #5
   190c8:	lsr	r3, r3, #5
   190cc:	orrs	r0, r3, r0
   190d0:	movwne	r1, #1
   190d4:	movwne	r2, #1
   190d8:	mov	r0, #0
   190dc:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   190e0:	cmp	r0, #0
   190e4:	popne	{fp, pc}
   190e8:	bl	19518 <__assert_fail@plt+0x7ff8>
   190ec:	push	{r4, r5, r6, sl, fp, lr}
   190f0:	add	fp, sp, #16
   190f4:	ldr	r5, [r1]
   190f8:	mov	r4, r1
   190fc:	mov	r6, r0
   19100:	cmp	r0, #0
   19104:	beq	1911c <__assert_fail@plt+0x7bfc>
   19108:	mov	r0, #1
   1910c:	add	r0, r0, r5, lsr #1
   19110:	adds	r5, r5, r0
   19114:	bcc	19124 <__assert_fail@plt+0x7c04>
   19118:	b	19160 <__assert_fail@plt+0x7c40>
   1911c:	cmp	r5, #0
   19120:	movweq	r5, #64	; 0x40
   19124:	mov	r0, r6
   19128:	mov	r1, r5
   1912c:	mov	r2, #1
   19130:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   19134:	cmp	r5, #0
   19138:	mov	r1, r5
   1913c:	movwne	r1, #1
   19140:	cmp	r0, #0
   19144:	bne	19158 <__assert_fail@plt+0x7c38>
   19148:	clz	r2, r6
   1914c:	lsr	r2, r2, #5
   19150:	orrs	r1, r2, r1
   19154:	bne	19160 <__assert_fail@plt+0x7c40>
   19158:	str	r5, [r4]
   1915c:	pop	{r4, r5, r6, sl, fp, pc}
   19160:	bl	19518 <__assert_fail@plt+0x7ff8>
   19164:	push	{r4, r5, r6, r7, fp, lr}
   19168:	add	fp, sp, #16
   1916c:	ldr	r5, [r1]
   19170:	mov	r6, r2
   19174:	mov	r4, r1
   19178:	mov	r7, r0
   1917c:	cmp	r0, #0
   19180:	beq	19198 <__assert_fail@plt+0x7c78>
   19184:	mov	r0, #1
   19188:	add	r0, r0, r5, lsr #1
   1918c:	adds	r5, r5, r0
   19190:	bcc	191b0 <__assert_fail@plt+0x7c90>
   19194:	b	191e4 <__assert_fail@plt+0x7cc4>
   19198:	cmp	r5, #0
   1919c:	bne	191b0 <__assert_fail@plt+0x7c90>
   191a0:	mov	r0, #64	; 0x40
   191a4:	cmp	r6, #64	; 0x40
   191a8:	udiv	r5, r0, r6
   191ac:	addhi	r5, r5, #1
   191b0:	mov	r0, r7
   191b4:	mov	r1, r5
   191b8:	mov	r2, r6
   191bc:	bl	1a4a8 <__assert_fail@plt+0x8f88>
   191c0:	cmp	r0, #0
   191c4:	bne	191dc <__assert_fail@plt+0x7cbc>
   191c8:	cmp	r7, #0
   191cc:	beq	191e4 <__assert_fail@plt+0x7cc4>
   191d0:	cmp	r6, #0
   191d4:	cmpne	r5, #0
   191d8:	bne	191e4 <__assert_fail@plt+0x7cc4>
   191dc:	str	r5, [r4]
   191e0:	pop	{r4, r5, r6, r7, fp, pc}
   191e4:	bl	19518 <__assert_fail@plt+0x7ff8>
   191e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   191ec:	add	fp, sp, #24
   191f0:	mov	r8, r1
   191f4:	ldr	r1, [r1]
   191f8:	mov	r5, r0
   191fc:	add	r0, r1, r1, asr #1
   19200:	cmp	r0, r1
   19204:	mvnvs	r0, #-2147483648	; 0x80000000
   19208:	cmp	r0, r3
   1920c:	mov	r7, r0
   19210:	movgt	r7, r3
   19214:	cmn	r3, #1
   19218:	movle	r7, r0
   1921c:	ldr	r0, [fp, #8]
   19220:	cmn	r0, #1
   19224:	ble	1924c <__assert_fail@plt+0x7d2c>
   19228:	cmp	r0, #0
   1922c:	beq	192a0 <__assert_fail@plt+0x7d80>
   19230:	cmn	r7, #1
   19234:	ble	19274 <__assert_fail@plt+0x7d54>
   19238:	mvn	r4, #-2147483648	; 0x80000000
   1923c:	udiv	r6, r4, r0
   19240:	cmp	r6, r7
   19244:	bge	192a0 <__assert_fail@plt+0x7d80>
   19248:	b	192b0 <__assert_fail@plt+0x7d90>
   1924c:	cmn	r7, #1
   19250:	ble	19290 <__assert_fail@plt+0x7d70>
   19254:	cmn	r0, #1
   19258:	beq	192a0 <__assert_fail@plt+0x7d80>
   1925c:	mov	r6, #-2147483648	; 0x80000000
   19260:	mvn	r4, #-2147483648	; 0x80000000
   19264:	sdiv	r6, r6, r0
   19268:	cmp	r6, r7
   1926c:	bge	192a0 <__assert_fail@plt+0x7d80>
   19270:	b	192b0 <__assert_fail@plt+0x7d90>
   19274:	beq	192a0 <__assert_fail@plt+0x7d80>
   19278:	mov	r6, #-2147483648	; 0x80000000
   1927c:	mvn	r4, #-2147483648	; 0x80000000
   19280:	sdiv	r6, r6, r7
   19284:	cmp	r6, r0
   19288:	bge	192a0 <__assert_fail@plt+0x7d80>
   1928c:	b	192b0 <__assert_fail@plt+0x7d90>
   19290:	mvn	r4, #-2147483648	; 0x80000000
   19294:	sdiv	r6, r4, r0
   19298:	cmp	r7, r6
   1929c:	blt	192b0 <__assert_fail@plt+0x7d90>
   192a0:	mul	r6, r7, r0
   192a4:	mov	r4, #64	; 0x40
   192a8:	cmp	r6, #63	; 0x3f
   192ac:	bgt	192b8 <__assert_fail@plt+0x7d98>
   192b0:	sdiv	r7, r4, r0
   192b4:	mul	r6, r7, r0
   192b8:	cmp	r5, #0
   192bc:	moveq	r4, #0
   192c0:	streq	r4, [r8]
   192c4:	sub	r4, r7, r1
   192c8:	cmp	r4, r2
   192cc:	bge	19378 <__assert_fail@plt+0x7e58>
   192d0:	add	r7, r1, r2
   192d4:	mov	r6, #0
   192d8:	mov	r2, #0
   192dc:	cmp	r7, r3
   192e0:	movwgt	r6, #1
   192e4:	cmn	r3, #1
   192e8:	movwgt	r2, #1
   192ec:	cmp	r7, r1
   192f0:	bvs	193ac <__assert_fail@plt+0x7e8c>
   192f4:	ands	r1, r2, r6
   192f8:	bne	193ac <__assert_fail@plt+0x7e8c>
   192fc:	cmn	r0, #1
   19300:	ble	19328 <__assert_fail@plt+0x7e08>
   19304:	cmp	r0, #0
   19308:	beq	19374 <__assert_fail@plt+0x7e54>
   1930c:	cmn	r7, #1
   19310:	ble	1934c <__assert_fail@plt+0x7e2c>
   19314:	mvn	r1, #-2147483648	; 0x80000000
   19318:	udiv	r1, r1, r0
   1931c:	cmp	r1, r7
   19320:	bge	19374 <__assert_fail@plt+0x7e54>
   19324:	b	193ac <__assert_fail@plt+0x7e8c>
   19328:	cmn	r7, #1
   1932c:	ble	19364 <__assert_fail@plt+0x7e44>
   19330:	cmn	r0, #1
   19334:	beq	19374 <__assert_fail@plt+0x7e54>
   19338:	mov	r1, #-2147483648	; 0x80000000
   1933c:	sdiv	r1, r1, r0
   19340:	cmp	r1, r7
   19344:	bge	19374 <__assert_fail@plt+0x7e54>
   19348:	b	193ac <__assert_fail@plt+0x7e8c>
   1934c:	beq	19374 <__assert_fail@plt+0x7e54>
   19350:	mov	r1, #-2147483648	; 0x80000000
   19354:	sdiv	r1, r1, r7
   19358:	cmp	r1, r0
   1935c:	bge	19374 <__assert_fail@plt+0x7e54>
   19360:	b	193ac <__assert_fail@plt+0x7e8c>
   19364:	mvn	r1, #-2147483648	; 0x80000000
   19368:	sdiv	r1, r1, r0
   1936c:	cmp	r7, r1
   19370:	blt	193ac <__assert_fail@plt+0x7e8c>
   19374:	mul	r6, r7, r0
   19378:	mov	r0, r5
   1937c:	mov	r1, r6
   19380:	bl	19e80 <__assert_fail@plt+0x8960>
   19384:	cmp	r6, #0
   19388:	movwne	r6, #1
   1938c:	cmp	r0, #0
   19390:	bne	193a4 <__assert_fail@plt+0x7e84>
   19394:	clz	r1, r5
   19398:	lsr	r1, r1, #5
   1939c:	orrs	r1, r1, r6
   193a0:	bne	193ac <__assert_fail@plt+0x7e8c>
   193a4:	str	r7, [r8]
   193a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   193ac:	bl	19518 <__assert_fail@plt+0x7ff8>
   193b0:	push	{fp, lr}
   193b4:	mov	fp, sp
   193b8:	mov	r1, #1
   193bc:	bl	19dfc <__assert_fail@plt+0x88dc>
   193c0:	cmp	r0, #0
   193c4:	popne	{fp, pc}
   193c8:	bl	19518 <__assert_fail@plt+0x7ff8>
   193cc:	push	{fp, lr}
   193d0:	mov	fp, sp
   193d4:	bl	19dfc <__assert_fail@plt+0x88dc>
   193d8:	cmp	r0, #0
   193dc:	popne	{fp, pc}
   193e0:	bl	19518 <__assert_fail@plt+0x7ff8>
   193e4:	push	{fp, lr}
   193e8:	mov	fp, sp
   193ec:	mov	r1, #1
   193f0:	bl	19dfc <__assert_fail@plt+0x88dc>
   193f4:	cmp	r0, #0
   193f8:	popne	{fp, pc}
   193fc:	bl	19518 <__assert_fail@plt+0x7ff8>
   19400:	push	{fp, lr}
   19404:	mov	fp, sp
   19408:	bl	19dfc <__assert_fail@plt+0x88dc>
   1940c:	cmp	r0, #0
   19410:	popne	{fp, pc}
   19414:	bl	19518 <__assert_fail@plt+0x7ff8>
   19418:	push	{r4, r5, r6, sl, fp, lr}
   1941c:	add	fp, sp, #16
   19420:	mov	r5, r0
   19424:	mov	r0, r1
   19428:	mov	r4, r1
   1942c:	bl	19e50 <__assert_fail@plt+0x8930>
   19430:	cmp	r0, #0
   19434:	beq	19450 <__assert_fail@plt+0x7f30>
   19438:	mov	r1, r5
   1943c:	mov	r2, r4
   19440:	mov	r6, r0
   19444:	bl	11274 <memcpy@plt>
   19448:	mov	r0, r6
   1944c:	pop	{r4, r5, r6, sl, fp, pc}
   19450:	bl	19518 <__assert_fail@plt+0x7ff8>
   19454:	push	{r4, r5, r6, sl, fp, lr}
   19458:	add	fp, sp, #16
   1945c:	mov	r5, r0
   19460:	mov	r0, r1
   19464:	mov	r4, r1
   19468:	bl	19e50 <__assert_fail@plt+0x8930>
   1946c:	cmp	r0, #0
   19470:	beq	1948c <__assert_fail@plt+0x7f6c>
   19474:	mov	r1, r5
   19478:	mov	r2, r4
   1947c:	mov	r6, r0
   19480:	bl	11274 <memcpy@plt>
   19484:	mov	r0, r6
   19488:	pop	{r4, r5, r6, sl, fp, pc}
   1948c:	bl	19518 <__assert_fail@plt+0x7ff8>
   19490:	push	{r4, r5, r6, sl, fp, lr}
   19494:	add	fp, sp, #16
   19498:	mov	r5, r0
   1949c:	add	r0, r1, #1
   194a0:	mov	r4, r1
   194a4:	bl	19e50 <__assert_fail@plt+0x8930>
   194a8:	cmp	r0, #0
   194ac:	beq	194d4 <__assert_fail@plt+0x7fb4>
   194b0:	mov	r6, r0
   194b4:	mov	r0, #0
   194b8:	mov	r1, r5
   194bc:	mov	r2, r4
   194c0:	strb	r0, [r6, r4]
   194c4:	mov	r0, r6
   194c8:	bl	11274 <memcpy@plt>
   194cc:	mov	r0, r6
   194d0:	pop	{r4, r5, r6, sl, fp, pc}
   194d4:	bl	19518 <__assert_fail@plt+0x7ff8>
   194d8:	push	{r4, r5, r6, sl, fp, lr}
   194dc:	add	fp, sp, #16
   194e0:	mov	r4, r0
   194e4:	bl	113a0 <strlen@plt>
   194e8:	add	r5, r0, #1
   194ec:	mov	r0, r5
   194f0:	bl	19e50 <__assert_fail@plt+0x8930>
   194f4:	cmp	r0, #0
   194f8:	beq	19514 <__assert_fail@plt+0x7ff4>
   194fc:	mov	r1, r4
   19500:	mov	r2, r5
   19504:	mov	r6, r0
   19508:	bl	11274 <memcpy@plt>
   1950c:	mov	r0, r6
   19510:	pop	{r4, r5, r6, sl, fp, pc}
   19514:	bl	19518 <__assert_fail@plt+0x7ff8>
   19518:	push	{fp, lr}
   1951c:	mov	fp, sp
   19520:	movw	r0, #53556	; 0xd134
   19524:	movw	r1, #48552	; 0xbda8
   19528:	mov	r2, #5
   1952c:	movt	r0, #2
   19530:	movt	r1, #1
   19534:	ldr	r4, [r0]
   19538:	mov	r0, #0
   1953c:	bl	112a4 <dcgettext@plt>
   19540:	movw	r2, #45488	; 0xb1b0
   19544:	mov	r3, r0
   19548:	mov	r0, r4
   1954c:	mov	r1, #0
   19550:	movt	r2, #1
   19554:	bl	11328 <error@plt>
   19558:	bl	114d8 <abort@plt>
   1955c:	push	{fp, lr}
   19560:	mov	fp, sp
   19564:	orr	r1, r1, #512	; 0x200
   19568:	bl	12f24 <__assert_fail@plt+0x1a04>
   1956c:	cmp	r0, #0
   19570:	popne	{fp, pc}
   19574:	bl	113d0 <__errno_location@plt>
   19578:	ldr	r0, [r0]
   1957c:	cmp	r0, #22
   19580:	bne	195a4 <__assert_fail@plt+0x8084>
   19584:	movw	r0, #48569	; 0xbdb9
   19588:	movw	r1, #48585	; 0xbdc9
   1958c:	movw	r3, #48596	; 0xbdd4
   19590:	mov	r2, #41	; 0x29
   19594:	movt	r0, #1
   19598:	movt	r1, #1
   1959c:	movt	r3, #1
   195a0:	bl	11520 <__assert_fail@plt>
   195a4:	bl	19518 <__assert_fail@plt+0x7ff8>
   195a8:	ldr	r0, [r0, #48]	; 0x30
   195ac:	and	r0, r0, #17
   195b0:	cmp	r0, #16
   195b4:	moveq	r0, #1
   195b8:	bxeq	lr
   195bc:	cmp	r0, #17
   195c0:	movne	r0, #0
   195c4:	bxne	lr
   195c8:	ldr	r0, [r1, #48]	; 0x30
   195cc:	cmp	r0, #0
   195d0:	movwne	r0, #1
   195d4:	bx	lr
   195d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195dc:	add	fp, sp, #28
   195e0:	sub	sp, sp, #20
   195e4:	cmp	r2, #37	; 0x25
   195e8:	bcs	19ddc <__assert_fail@plt+0x88bc>
   195ec:	ldr	r9, [fp, #8]
   195f0:	mov	r5, r2
   195f4:	mov	r4, r1
   195f8:	mov	r7, r0
   195fc:	str	r3, [sp, #12]
   19600:	bl	113d0 <__errno_location@plt>
   19604:	mov	r8, r0
   19608:	mov	r0, #0
   1960c:	str	r0, [r8]
   19610:	bl	1137c <__ctype_b_loc@plt>
   19614:	ldr	r1, [r0]
   19618:	mov	r2, r7
   1961c:	ldrb	r0, [r2], #1
   19620:	add	r3, r1, r0, lsl #1
   19624:	ldrb	r3, [r3, #1]
   19628:	tst	r3, #32
   1962c:	bne	1961c <__assert_fail@plt+0x80fc>
   19630:	add	r6, sp, #16
   19634:	cmp	r4, #0
   19638:	mov	sl, #4
   1963c:	movne	r6, r4
   19640:	cmp	r0, #45	; 0x2d
   19644:	beq	19dd0 <__assert_fail@plt+0x88b0>
   19648:	mov	r0, r7
   1964c:	mov	r1, r6
   19650:	mov	r2, r5
   19654:	bl	11394 <strtoul@plt>
   19658:	ldr	r5, [r6]
   1965c:	cmp	r5, r7
   19660:	beq	1968c <__assert_fail@plt+0x816c>
   19664:	mov	r4, r0
   19668:	ldr	r0, [r8]
   1966c:	cmp	r0, #0
   19670:	beq	196b8 <__assert_fail@plt+0x8198>
   19674:	cmp	r0, #34	; 0x22
   19678:	bne	19dd0 <__assert_fail@plt+0x88b0>
   1967c:	mov	sl, #1
   19680:	cmp	r9, #0
   19684:	bne	196c4 <__assert_fail@plt+0x81a4>
   19688:	b	19dc8 <__assert_fail@plt+0x88a8>
   1968c:	cmp	r9, #0
   19690:	ldrbne	r1, [r7]
   19694:	cmpne	r1, #0
   19698:	beq	19dd0 <__assert_fail@plt+0x88b0>
   1969c:	mov	r0, r9
   196a0:	bl	113ac <strchr@plt>
   196a4:	cmp	r0, #0
   196a8:	beq	19dd0 <__assert_fail@plt+0x88b0>
   196ac:	mov	r4, #1
   196b0:	mov	sl, #0
   196b4:	b	196c4 <__assert_fail@plt+0x81a4>
   196b8:	mov	sl, r0
   196bc:	cmp	r9, #0
   196c0:	beq	19dc8 <__assert_fail@plt+0x88a8>
   196c4:	ldrb	r7, [r5]
   196c8:	cmp	r7, #0
   196cc:	beq	19dc8 <__assert_fail@plt+0x88a8>
   196d0:	mov	r0, r9
   196d4:	mov	r1, r7
   196d8:	bl	113ac <strchr@plt>
   196dc:	cmp	r0, #0
   196e0:	beq	1995c <__assert_fail@plt+0x843c>
   196e4:	sub	r0, r7, #69	; 0x45
   196e8:	mov	lr, #1
   196ec:	mov	r8, #1024	; 0x400
   196f0:	cmp	r0, #47	; 0x2f
   196f4:	bhi	19810 <__assert_fail@plt+0x82f0>
   196f8:	add	r1, pc, #0
   196fc:	ldr	pc, [r1, r0, lsl #2]
   19700:	andeq	r9, r1, r0, asr #15
   19704:	andeq	r9, r1, r0, lsl r8
   19708:	andeq	r9, r1, r0, asr #15
   1970c:	andeq	r9, r1, r0, lsl r8
   19710:	andeq	r9, r1, r0, lsl r8
   19714:	andeq	r9, r1, r0, lsl r8
   19718:	andeq	r9, r1, r0, asr #15
   1971c:	andeq	r9, r1, r0, lsl r8
   19720:	andeq	r9, r1, r0, asr #15
   19724:	andeq	r9, r1, r0, lsl r8
   19728:	andeq	r9, r1, r0, lsl r8
   1972c:	andeq	r9, r1, r0, asr #15
   19730:	andeq	r9, r1, r0, lsl r8
   19734:	andeq	r9, r1, r0, lsl r8
   19738:	andeq	r9, r1, r0, lsl r8
   1973c:	andeq	r9, r1, r0, asr #15
   19740:	andeq	r9, r1, r0, lsl r8
   19744:	andeq	r9, r1, r0, lsl r8
   19748:	andeq	r9, r1, r0, lsl r8
   1974c:	andeq	r9, r1, r0, lsl r8
   19750:	andeq	r9, r1, r0, asr #15
   19754:	andeq	r9, r1, r0, asr #15
   19758:	andeq	r9, r1, r0, lsl r8
   1975c:	andeq	r9, r1, r0, lsl r8
   19760:	andeq	r9, r1, r0, lsl r8
   19764:	andeq	r9, r1, r0, lsl r8
   19768:	andeq	r9, r1, r0, lsl r8
   1976c:	andeq	r9, r1, r0, lsl r8
   19770:	andeq	r9, r1, r0, lsl r8
   19774:	andeq	r9, r1, r0, lsl r8
   19778:	andeq	r9, r1, r0, lsl r8
   1977c:	andeq	r9, r1, r0, lsl r8
   19780:	andeq	r9, r1, r0, lsl r8
   19784:	andeq	r9, r1, r0, lsl r8
   19788:	andeq	r9, r1, r0, asr #15
   1978c:	andeq	r9, r1, r0, lsl r8
   19790:	andeq	r9, r1, r0, lsl r8
   19794:	andeq	r9, r1, r0, lsl r8
   19798:	andeq	r9, r1, r0, asr #15
   1979c:	andeq	r9, r1, r0, lsl r8
   197a0:	andeq	r9, r1, r0, asr #15
   197a4:	andeq	r9, r1, r0, lsl r8
   197a8:	andeq	r9, r1, r0, lsl r8
   197ac:	andeq	r9, r1, r0, lsl r8
   197b0:	andeq	r9, r1, r0, lsl r8
   197b4:	andeq	r9, r1, r0, lsl r8
   197b8:	andeq	r9, r1, r0, lsl r8
   197bc:	andeq	r9, r1, r0, asr #15
   197c0:	mov	r0, r9
   197c4:	mov	r1, #48	; 0x30
   197c8:	bl	113ac <strchr@plt>
   197cc:	cmp	r0, #0
   197d0:	beq	1980c <__assert_fail@plt+0x82ec>
   197d4:	ldrb	r0, [r5, #1]
   197d8:	cmp	r0, #66	; 0x42
   197dc:	cmpne	r0, #68	; 0x44
   197e0:	bne	197f0 <__assert_fail@plt+0x82d0>
   197e4:	mov	lr, #2
   197e8:	mov	r8, #1000	; 0x3e8
   197ec:	b	19810 <__assert_fail@plt+0x82f0>
   197f0:	cmp	r0, #105	; 0x69
   197f4:	bne	1980c <__assert_fail@plt+0x82ec>
   197f8:	ldrb	r0, [r5, #2]
   197fc:	mov	lr, #1
   19800:	cmp	r0, #66	; 0x42
   19804:	movweq	lr, #3
   19808:	b	19810 <__assert_fail@plt+0x82f0>
   1980c:	mov	lr, #1
   19810:	sub	r1, r7, #66	; 0x42
   19814:	cmp	r1, #53	; 0x35
   19818:	bhi	1995c <__assert_fail@plt+0x843c>
   1981c:	add	r2, pc, #4
   19820:	mov	r0, #0
   19824:	ldr	pc, [r2, r1, lsl #2]
   19828:	andeq	r9, r1, r0, lsl fp
   1982c:	andeq	r9, r1, ip, asr r9
   19830:	andeq	r9, r1, ip, asr r9
   19834:	andeq	r9, r1, ip, lsr #22
   19838:	andeq	r9, r1, ip, asr r9
   1983c:	andeq	r9, r1, r0, lsl #18
   19840:	andeq	r9, r1, ip, asr r9
   19844:	andeq	r9, r1, ip, asr r9
   19848:	andeq	r9, r1, ip, asr r9
   1984c:	andeq	r9, r1, r8, ror #18
   19850:	andeq	r9, r1, ip, asr r9
   19854:	andeq	r9, r1, r8, lsl #19
   19858:	andeq	r9, r1, ip, asr r9
   1985c:	andeq	r9, r1, ip, asr r9
   19860:	andeq	r9, r1, r4, ror #23
   19864:	andeq	r9, r1, ip, asr r9
   19868:	andeq	r9, r1, ip, asr r9
   1986c:	andeq	r9, r1, ip, asr r9
   19870:	andeq	r9, r1, r8, asr #19
   19874:	andeq	r9, r1, ip, asr r9
   19878:	andeq	r9, r1, ip, asr r9
   1987c:	andeq	r9, r1, ip, asr r9
   19880:	andeq	r9, r1, ip, asr r9
   19884:	andeq	r9, r1, r0, lsl #25
   19888:	andeq	r9, r1, ip, lsr sl
   1988c:	andeq	r9, r1, ip, asr r9
   19890:	andeq	r9, r1, ip, asr r9
   19894:	andeq	r9, r1, ip, asr r9
   19898:	andeq	r9, r1, ip, asr r9
   1989c:	andeq	r9, r1, ip, asr r9
   198a0:	andeq	r9, r1, ip, asr r9
   198a4:	andeq	r9, r1, ip, asr r9
   198a8:	andeq	r9, r1, r8, ror sp
   198ac:			; <UNDEFINED> instruction: 0x00019db0
   198b0:	andeq	r9, r1, ip, asr r9
   198b4:	andeq	r9, r1, ip, asr r9
   198b8:	andeq	r9, r1, ip, asr r9
   198bc:	andeq	r9, r1, r0, lsl #18
   198c0:	andeq	r9, r1, ip, asr r9
   198c4:	andeq	r9, r1, ip, asr r9
   198c8:	andeq	r9, r1, ip, asr r9
   198cc:	andeq	r9, r1, r8, ror #18
   198d0:	andeq	r9, r1, ip, asr r9
   198d4:	andeq	r9, r1, r8, lsl #19
   198d8:	andeq	r9, r1, ip, asr r9
   198dc:	andeq	r9, r1, ip, asr r9
   198e0:	andeq	r9, r1, ip, asr r9
   198e4:	andeq	r9, r1, ip, asr r9
   198e8:	andeq	r9, r1, ip, asr r9
   198ec:	andeq	r9, r1, ip, asr r9
   198f0:	andeq	r9, r1, r8, asr #19
   198f4:	andeq	r9, r1, ip, asr r9
   198f8:	andeq	r9, r1, ip, asr r9
   198fc:	muleq	r1, ip, sp
   19900:	mvn	r0, #0
   19904:	mul	r1, r4, r8
   19908:	mov	r7, #0
   1990c:	udiv	r0, r0, r8
   19910:	cmp	r0, r4
   19914:	mvncc	r1, #0
   19918:	mul	r2, r1, r8
   1991c:	cmp	r0, r1
   19920:	mvncc	r2, #0
   19924:	cmp	r0, r2
   19928:	mul	r3, r2, r8
   1992c:	mov	r2, #0
   19930:	mvncc	r3, #0
   19934:	movwcc	r7, #1
   19938:	cmp	r0, r1
   1993c:	mov	r1, #0
   19940:	movwcc	r1, #1
   19944:	cmp	r0, r4
   19948:	mov	r4, r3
   1994c:	movwcc	r2, #1
   19950:	orr	r0, r2, r1
   19954:	orr	r0, r0, r7
   19958:	b	19db0 <__assert_fail@plt+0x8890>
   1995c:	ldr	r0, [sp, #12]
   19960:	orr	sl, sl, #2
   19964:	b	19dcc <__assert_fail@plt+0x88ac>
   19968:	mvn	r0, #0
   1996c:	mul	r1, r4, r8
   19970:	udiv	r0, r0, r8
   19974:	cmp	r0, r4
   19978:	mov	r0, #0
   1997c:	mvncc	r1, #0
   19980:	movwcc	r0, #1
   19984:	b	19dac <__assert_fail@plt+0x888c>
   19988:	mvn	r0, #0
   1998c:	mul	r1, r4, r8
   19990:	mov	r3, #0
   19994:	udiv	r0, r0, r8
   19998:	cmp	r0, r4
   1999c:	mvncc	r1, #0
   199a0:	cmp	r0, r1
   199a4:	mul	r2, r1, r8
   199a8:	mov	r1, #0
   199ac:	mvncc	r2, #0
   199b0:	movwcc	r3, #1
   199b4:	cmp	r0, r4
   199b8:	movwcc	r1, #1
   199bc:	mov	r4, r2
   199c0:	orr	r0, r1, r3
   199c4:	b	19db0 <__assert_fail@plt+0x8890>
   199c8:	mvn	r0, #0
   199cc:	mul	r1, r4, r8
   199d0:	mov	r7, #0
   199d4:	udiv	r0, r0, r8
   199d8:	cmp	r0, r4
   199dc:	mvncc	r1, #0
   199e0:	mul	r2, r1, r8
   199e4:	cmp	r0, r1
   199e8:	mvncc	r2, #0
   199ec:	mul	r3, r2, r8
   199f0:	cmp	r0, r2
   199f4:	mvncc	r3, #0
   199f8:	cmp	r0, r3
   199fc:	mul	ip, r3, r8
   19a00:	mov	r3, #0
   19a04:	mvncc	ip, #0
   19a08:	movwcc	r7, #1
   19a0c:	cmp	r0, r2
   19a10:	mov	r2, #0
   19a14:	movwcc	r2, #1
   19a18:	cmp	r0, r1
   19a1c:	mov	r1, #0
   19a20:	movwcc	r1, #1
   19a24:	cmp	r0, r4
   19a28:	movwcc	r3, #1
   19a2c:	orr	r0, r3, r1
   19a30:	orr	r0, r0, r2
   19a34:	orr	r0, r0, r7
   19a38:	b	19c78 <__assert_fail@plt+0x8758>
   19a3c:	mvn	r0, #0
   19a40:	str	lr, [sp, #8]
   19a44:	mul	lr, r4, r8
   19a48:	udiv	r0, r0, r8
   19a4c:	cmp	r0, r4
   19a50:	mvncc	lr, #0
   19a54:	mul	r9, lr, r8
   19a58:	cmp	r0, lr
   19a5c:	mvncc	r9, #0
   19a60:	mul	r7, r9, r8
   19a64:	cmp	r0, r9
   19a68:	mvncc	r7, #0
   19a6c:	mul	r3, r7, r8
   19a70:	cmp	r0, r7
   19a74:	mvncc	r3, #0
   19a78:	mul	r1, r3, r8
   19a7c:	cmp	r0, r3
   19a80:	mvncc	r1, #0
   19a84:	mul	r2, r1, r8
   19a88:	cmp	r0, r1
   19a8c:	mvncc	r2, #0
   19a90:	mul	ip, r2, r8
   19a94:	cmp	r0, r2
   19a98:	mov	r8, #0
   19a9c:	mov	r2, #0
   19aa0:	mvncc	ip, #0
   19aa4:	movwcc	r8, #1
   19aa8:	cmp	r0, r1
   19aac:	mov	r1, #0
   19ab0:	movwcc	r1, #1
   19ab4:	cmp	r0, r3
   19ab8:	mov	r3, #0
   19abc:	movwcc	r3, #1
   19ac0:	cmp	r0, r7
   19ac4:	mov	r7, #0
   19ac8:	movwcc	r7, #1
   19acc:	cmp	r0, r9
   19ad0:	mov	r9, #0
   19ad4:	movwcc	r9, #1
   19ad8:	cmp	r0, lr
   19adc:	mov	lr, #0
   19ae0:	movwcc	lr, #1
   19ae4:	cmp	r0, r4
   19ae8:	movwcc	r2, #1
   19aec:	orr	r0, r2, lr
   19af0:	ldr	lr, [sp, #8]
   19af4:	orr	r0, r0, r9
   19af8:	orr	r0, r0, r7
   19afc:	orr	r0, r0, r3
   19b00:	orr	r0, r0, r1
   19b04:	orr	r0, r0, r8
   19b08:	and	r0, r0, #1
   19b0c:	b	19c78 <__assert_fail@plt+0x8758>
   19b10:	mov	r1, #0
   19b14:	lsr	r0, r4, #22
   19b18:	cmp	r1, r4, lsr #22
   19b1c:	lsl	r4, r4, #10
   19b20:	movwne	r0, #1
   19b24:	mvnne	r4, #0
   19b28:	b	19db0 <__assert_fail@plt+0x8890>
   19b2c:	mvn	r0, #0
   19b30:	mul	ip, r4, r8
   19b34:	str	lr, [sp, #8]
   19b38:	mov	r9, #0
   19b3c:	udiv	r0, r0, r8
   19b40:	cmp	r0, r4
   19b44:	mvncc	ip, #0
   19b48:	mul	r2, ip, r8
   19b4c:	cmp	r0, ip
   19b50:	mvncc	r2, #0
   19b54:	mul	r3, r2, r8
   19b58:	cmp	r0, r2
   19b5c:	mvncc	r3, #0
   19b60:	mul	r7, r3, r8
   19b64:	cmp	r0, r3
   19b68:	mvncc	r7, #0
   19b6c:	mul	r1, r7, r8
   19b70:	cmp	r0, r7
   19b74:	mvncc	r1, #0
   19b78:	mul	lr, r1, r8
   19b7c:	cmp	r0, r1
   19b80:	mov	r8, #0
   19b84:	mov	r1, #0
   19b88:	mvncc	lr, #0
   19b8c:	movwcc	r8, #1
   19b90:	cmp	r0, r7
   19b94:	mov	r7, #0
   19b98:	movwcc	r7, #1
   19b9c:	cmp	r0, r3
   19ba0:	mov	r3, #0
   19ba4:	movwcc	r3, #1
   19ba8:	cmp	r0, r2
   19bac:	mov	r2, #0
   19bb0:	movwcc	r2, #1
   19bb4:	cmp	r0, ip
   19bb8:	movwcc	r1, #1
   19bbc:	cmp	r0, r4
   19bc0:	mov	r4, lr
   19bc4:	ldr	lr, [sp, #8]
   19bc8:	movwcc	r9, #1
   19bcc:	orr	r0, r9, r1
   19bd0:	orr	r0, r0, r2
   19bd4:	orr	r0, r0, r3
   19bd8:	orr	r0, r0, r7
   19bdc:	orr	r0, r0, r8
   19be0:	b	19db0 <__assert_fail@plt+0x8890>
   19be4:	mvn	r0, #0
   19be8:	mul	r1, r4, r8
   19bec:	udiv	r0, r0, r8
   19bf0:	cmp	r0, r4
   19bf4:	mvncc	r1, #0
   19bf8:	mul	r2, r1, r8
   19bfc:	cmp	r0, r1
   19c00:	mvncc	r2, #0
   19c04:	mul	r3, r2, r8
   19c08:	cmp	r0, r2
   19c0c:	mvncc	r3, #0
   19c10:	mul	r7, r3, r8
   19c14:	cmp	r0, r3
   19c18:	mvncc	r7, #0
   19c1c:	mul	ip, r7, r8
   19c20:	cmp	r0, r7
   19c24:	mov	r8, lr
   19c28:	mov	lr, #0
   19c2c:	mov	r7, #0
   19c30:	mvncc	ip, #0
   19c34:	movwcc	lr, #1
   19c38:	cmp	r0, r3
   19c3c:	mov	r3, #0
   19c40:	movwcc	r3, #1
   19c44:	cmp	r0, r2
   19c48:	mov	r2, #0
   19c4c:	movwcc	r2, #1
   19c50:	cmp	r0, r1
   19c54:	mov	r1, #0
   19c58:	movwcc	r1, #1
   19c5c:	cmp	r0, r4
   19c60:	movwcc	r7, #1
   19c64:	orr	r0, r7, r1
   19c68:	orr	r0, r0, r2
   19c6c:	orr	r0, r0, r3
   19c70:	orr	r0, r0, lr
   19c74:	mov	lr, r8
   19c78:	mov	r4, ip
   19c7c:	b	19db0 <__assert_fail@plt+0x8890>
   19c80:	mvn	r0, #0
   19c84:	str	lr, [sp, #8]
   19c88:	mul	lr, r4, r8
   19c8c:	udiv	r0, r0, r8
   19c90:	cmp	r0, r4
   19c94:	mvncc	lr, #0
   19c98:	mul	r9, lr, r8
   19c9c:	cmp	r0, lr
   19ca0:	mvncc	r9, #0
   19ca4:	mul	r7, r9, r8
   19ca8:	cmp	r0, r9
   19cac:	mvncc	r7, #0
   19cb0:	mul	r3, r7, r8
   19cb4:	cmp	r0, r7
   19cb8:	mvncc	r3, #0
   19cbc:	mul	r1, r3, r8
   19cc0:	cmp	r0, r3
   19cc4:	mvncc	r1, #0
   19cc8:	mul	r2, r1, r8
   19ccc:	cmp	r0, r1
   19cd0:	mvncc	r2, #0
   19cd4:	mul	ip, r2, r8
   19cd8:	cmp	r0, r2
   19cdc:	mvncc	ip, #0
   19ce0:	mul	r8, ip, r8
   19ce4:	cmp	r0, ip
   19ce8:	mov	ip, #0
   19cec:	mvncc	r8, #0
   19cf0:	str	r8, [sp, #4]
   19cf4:	mov	r8, #0
   19cf8:	movwcc	r8, #1
   19cfc:	cmp	r0, r2
   19d00:	mov	r2, #0
   19d04:	movwcc	r2, #1
   19d08:	cmp	r0, r1
   19d0c:	mov	r1, #0
   19d10:	movwcc	r1, #1
   19d14:	cmp	r0, r3
   19d18:	mov	r3, #0
   19d1c:	movwcc	r3, #1
   19d20:	cmp	r0, r7
   19d24:	mov	r7, #0
   19d28:	movwcc	r7, #1
   19d2c:	cmp	r0, r9
   19d30:	mov	r9, #0
   19d34:	movwcc	r9, #1
   19d38:	cmp	r0, lr
   19d3c:	mov	lr, #0
   19d40:	movwcc	lr, #1
   19d44:	cmp	r0, r4
   19d48:	ldr	r4, [sp, #4]
   19d4c:	movwcc	ip, #1
   19d50:	orr	r0, ip, lr
   19d54:	ldr	lr, [sp, #8]
   19d58:	orr	r0, r0, r9
   19d5c:	orr	r0, r0, r7
   19d60:	orr	r0, r0, r3
   19d64:	orr	r0, r0, r1
   19d68:	orr	r0, r0, r2
   19d6c:	orr	r0, r0, r8
   19d70:	and	r0, r0, #1
   19d74:	b	19db0 <__assert_fail@plt+0x8890>
   19d78:	movw	r0, #65535	; 0xffff
   19d7c:	movt	r0, #63	; 0x3f
   19d80:	add	r1, r0, #4194304	; 0x400000
   19d84:	mov	r0, #0
   19d88:	cmp	r4, r1
   19d8c:	lsl	r4, r4, #9
   19d90:	movwhi	r0, #1
   19d94:	mvnhi	r4, #0
   19d98:	b	19db0 <__assert_fail@plt+0x8890>
   19d9c:	lsl	r1, r4, #1
   19da0:	cmp	r4, #0
   19da4:	lsr	r0, r4, #31
   19da8:	mvnlt	r1, #0
   19dac:	mov	r4, r1
   19db0:	add	r1, r5, lr
   19db4:	orr	sl, r0, sl
   19db8:	str	r1, [r6]
   19dbc:	ldrb	r1, [r5, lr]
   19dc0:	cmp	r1, #0
   19dc4:	orrne	sl, sl, #2
   19dc8:	ldr	r0, [sp, #12]
   19dcc:	str	r4, [r0]
   19dd0:	mov	r0, sl
   19dd4:	sub	sp, fp, #28
   19dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ddc:	movw	r0, #48674	; 0xbe22
   19de0:	movw	r1, #48712	; 0xbe48
   19de4:	movw	r3, #48728	; 0xbe58
   19de8:	mov	r2, #85	; 0x55
   19dec:	movt	r0, #1
   19df0:	movt	r1, #1
   19df4:	movt	r3, #1
   19df8:	bl	11520 <__assert_fail@plt>
   19dfc:	clz	r2, r1
   19e00:	clz	r3, r0
   19e04:	lsr	r2, r2, #5
   19e08:	lsr	r3, r3, #5
   19e0c:	orrs	r2, r3, r2
   19e10:	movwne	r1, #1
   19e14:	movwne	r0, #1
   19e18:	cmp	r1, #0
   19e1c:	beq	19e4c <__assert_fail@plt+0x892c>
   19e20:	mvn	r2, #-2147483648	; 0x80000000
   19e24:	udiv	r2, r2, r1
   19e28:	cmp	r2, r0
   19e2c:	bcs	19e4c <__assert_fail@plt+0x892c>
   19e30:	push	{fp, lr}
   19e34:	mov	fp, sp
   19e38:	bl	113d0 <__errno_location@plt>
   19e3c:	mov	r1, #12
   19e40:	str	r1, [r0]
   19e44:	mov	r0, #0
   19e48:	pop	{fp, pc}
   19e4c:	b	111f0 <calloc@plt>
   19e50:	cmp	r0, #0
   19e54:	movweq	r0, #1
   19e58:	cmn	r0, #1
   19e5c:	ble	19e64 <__assert_fail@plt+0x8944>
   19e60:	b	11340 <malloc@plt>
   19e64:	push	{fp, lr}
   19e68:	mov	fp, sp
   19e6c:	bl	113d0 <__errno_location@plt>
   19e70:	mov	r1, #12
   19e74:	str	r1, [r0]
   19e78:	mov	r0, #0
   19e7c:	pop	{fp, pc}
   19e80:	push	{fp, lr}
   19e84:	mov	fp, sp
   19e88:	cmp	r0, #0
   19e8c:	beq	19ea8 <__assert_fail@plt+0x8988>
   19e90:	cmp	r1, #0
   19e94:	beq	19eb4 <__assert_fail@plt+0x8994>
   19e98:	cmn	r1, #1
   19e9c:	ble	19ec0 <__assert_fail@plt+0x89a0>
   19ea0:	pop	{fp, lr}
   19ea4:	b	112b0 <realloc@plt>
   19ea8:	mov	r0, r1
   19eac:	pop	{fp, lr}
   19eb0:	b	19e50 <__assert_fail@plt+0x8930>
   19eb4:	bl	12efc <__assert_fail@plt+0x19dc>
   19eb8:	mov	r0, #0
   19ebc:	pop	{fp, pc}
   19ec0:	bl	113d0 <__errno_location@plt>
   19ec4:	mov	r1, #12
   19ec8:	str	r1, [r0]
   19ecc:	mov	r0, #0
   19ed0:	pop	{fp, pc}
   19ed4:	push	{r4, r5, r6, sl, fp, lr}
   19ed8:	add	fp, sp, #16
   19edc:	mov	r4, r0
   19ee0:	bl	11310 <__fpending@plt>
   19ee4:	ldr	r6, [r4]
   19ee8:	mov	r5, r0
   19eec:	mov	r0, r4
   19ef0:	bl	1a04c <__assert_fail@plt+0x8b2c>
   19ef4:	tst	r6, #32
   19ef8:	bne	19f30 <__assert_fail@plt+0x8a10>
   19efc:	cmp	r0, #0
   19f00:	mov	r4, r0
   19f04:	mvnne	r4, #0
   19f08:	cmp	r5, #0
   19f0c:	bne	19f3c <__assert_fail@plt+0x8a1c>
   19f10:	cmp	r0, #0
   19f14:	beq	19f3c <__assert_fail@plt+0x8a1c>
   19f18:	bl	113d0 <__errno_location@plt>
   19f1c:	ldr	r0, [r0]
   19f20:	subs	r4, r0, #9
   19f24:	mvnne	r4, #0
   19f28:	mov	r0, r4
   19f2c:	pop	{r4, r5, r6, sl, fp, pc}
   19f30:	mvn	r4, #0
   19f34:	cmp	r0, #0
   19f38:	beq	19f44 <__assert_fail@plt+0x8a24>
   19f3c:	mov	r0, r4
   19f40:	pop	{r4, r5, r6, sl, fp, pc}
   19f44:	bl	113d0 <__errno_location@plt>
   19f48:	mov	r1, #0
   19f4c:	str	r1, [r0]
   19f50:	mov	r0, r4
   19f54:	pop	{r4, r5, r6, sl, fp, pc}
   19f58:	movw	r2, #62998	; 0xf616
   19f5c:	mov	r1, #0
   19f60:	movt	r2, #149	; 0x95
   19f64:	str	r1, [r0, #16]
   19f68:	str	r1, [r0, #20]
   19f6c:	str	r2, [r0, #24]
   19f70:	bx	lr
   19f74:	push	{r4, r5, r6, r7, fp, lr}
   19f78:	add	fp, sp, #16
   19f7c:	ldr	r2, [r0, #24]
   19f80:	movw	r3, #62998	; 0xf616
   19f84:	movt	r3, #149	; 0x95
   19f88:	cmp	r2, r3
   19f8c:	bne	1a02c <__assert_fail@plt+0x8b0c>
   19f90:	mov	r3, r0
   19f94:	ldr	r2, [r3, #16]!
   19f98:	ldr	lr, [r3, #4]
   19f9c:	orrs	r5, r2, lr
   19fa0:	beq	19fd8 <__assert_fail@plt+0x8ab8>
   19fa4:	ldrd	r4, [r0]
   19fa8:	ldrd	r6, [r1, #96]	; 0x60
   19fac:	eor	r7, r7, r5
   19fb0:	eor	r6, r6, r4
   19fb4:	orrs	r7, r6, r7
   19fb8:	bne	19fd8 <__assert_fail@plt+0x8ab8>
   19fbc:	ldrd	r4, [r0, #8]
   19fc0:	ldrd	r6, [r1]
   19fc4:	mov	ip, #1
   19fc8:	eor	r7, r7, r5
   19fcc:	eor	r6, r6, r4
   19fd0:	orrs	r7, r6, r7
   19fd4:	beq	19ff8 <__assert_fail@plt+0x8ad8>
   19fd8:	adds	r4, r2, #1
   19fdc:	mov	ip, #0
   19fe0:	adc	r5, lr, #0
   19fe4:	and	r2, r4, r2
   19fe8:	strd	r4, [r3]
   19fec:	and	r3, r5, lr
   19ff0:	orrs	r2, r2, r3
   19ff4:	beq	1a000 <__assert_fail@plt+0x8ae0>
   19ff8:	mov	r0, ip
   19ffc:	pop	{r4, r5, r6, r7, fp, pc}
   1a000:	orrs	r2, r4, r5
   1a004:	moveq	ip, #1
   1a008:	moveq	r0, ip
   1a00c:	popeq	{r4, r5, r6, r7, fp, pc}
   1a010:	ldrd	r2, [r1]
   1a014:	str	r3, [r0, #12]
   1a018:	str	r2, [r0, #8]
   1a01c:	ldrd	r2, [r1, #96]	; 0x60
   1a020:	stm	r0, {r2, r3}
   1a024:	mov	r0, ip
   1a028:	pop	{r4, r5, r6, r7, fp, pc}
   1a02c:	movw	r0, #48809	; 0xbea9
   1a030:	movw	r1, #48833	; 0xbec1
   1a034:	movw	r3, #48851	; 0xbed3
   1a038:	mov	r2, #60	; 0x3c
   1a03c:	movt	r0, #1
   1a040:	movt	r1, #1
   1a044:	movt	r3, #1
   1a048:	bl	11520 <__assert_fail@plt>
   1a04c:	push	{r4, r5, r6, sl, fp, lr}
   1a050:	add	fp, sp, #16
   1a054:	sub	sp, sp, #8
   1a058:	mov	r4, r0
   1a05c:	bl	11400 <fileno@plt>
   1a060:	cmn	r0, #1
   1a064:	ble	1a0d8 <__assert_fail@plt+0x8bb8>
   1a068:	mov	r0, r4
   1a06c:	bl	11358 <__freading@plt>
   1a070:	cmp	r0, #0
   1a074:	beq	1a0a0 <__assert_fail@plt+0x8b80>
   1a078:	mov	r0, r4
   1a07c:	bl	11400 <fileno@plt>
   1a080:	mov	r1, #1
   1a084:	mov	r2, #0
   1a088:	mov	r3, #0
   1a08c:	str	r1, [sp]
   1a090:	bl	112f8 <lseek64@plt>
   1a094:	and	r0, r0, r1
   1a098:	cmn	r0, #1
   1a09c:	beq	1a0d8 <__assert_fail@plt+0x8bb8>
   1a0a0:	mov	r0, r4
   1a0a4:	bl	1a310 <__assert_fail@plt+0x8df0>
   1a0a8:	cmp	r0, #0
   1a0ac:	beq	1a0d8 <__assert_fail@plt+0x8bb8>
   1a0b0:	bl	113d0 <__errno_location@plt>
   1a0b4:	ldr	r6, [r0]
   1a0b8:	mov	r5, r0
   1a0bc:	mov	r0, r4
   1a0c0:	bl	11418 <fclose@plt>
   1a0c4:	cmp	r6, #0
   1a0c8:	strne	r6, [r5]
   1a0cc:	mvnne	r0, #0
   1a0d0:	sub	sp, fp, #16
   1a0d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a0d8:	mov	r0, r4
   1a0dc:	sub	sp, fp, #16
   1a0e0:	pop	{r4, r5, r6, sl, fp, lr}
   1a0e4:	b	11418 <fclose@plt>
   1a0e8:	sub	sp, sp, #8
   1a0ec:	push	{r4, r5, r6, r7, fp, lr}
   1a0f0:	add	fp, sp, #16
   1a0f4:	sub	sp, sp, #8
   1a0f8:	mov	r5, r0
   1a0fc:	add	r0, fp, #8
   1a100:	cmp	r1, #11
   1a104:	str	r3, [fp, #12]
   1a108:	str	r2, [fp, #8]
   1a10c:	str	r0, [sp, #4]
   1a110:	bhi	1a14c <__assert_fail@plt+0x8c2c>
   1a114:	mov	r0, #1
   1a118:	movw	r2, #1300	; 0x514
   1a11c:	tst	r2, r0, lsl r1
   1a120:	bne	1a20c <__assert_fail@plt+0x8cec>
   1a124:	movw	r2, #2570	; 0xa0a
   1a128:	tst	r2, r0, lsl r1
   1a12c:	bne	1a174 <__assert_fail@plt+0x8c54>
   1a130:	cmp	r1, #0
   1a134:	bne	1a14c <__assert_fail@plt+0x8c2c>
   1a138:	ldr	r0, [sp, #4]
   1a13c:	add	r1, r0, #4
   1a140:	str	r1, [sp, #4]
   1a144:	mov	r1, #0
   1a148:	b	1a218 <__assert_fail@plt+0x8cf8>
   1a14c:	sub	r0, r1, #1024	; 0x400
   1a150:	cmp	r0, #10
   1a154:	bhi	1a20c <__assert_fail@plt+0x8cec>
   1a158:	mov	r2, #1
   1a15c:	movw	r3, #645	; 0x285
   1a160:	tst	r3, r2, lsl r0
   1a164:	bne	1a20c <__assert_fail@plt+0x8cec>
   1a168:	movw	r3, #1282	; 0x502
   1a16c:	tst	r3, r2, lsl r0
   1a170:	beq	1a180 <__assert_fail@plt+0x8c60>
   1a174:	mov	r0, r5
   1a178:	bl	11430 <fcntl64@plt>
   1a17c:	b	1a224 <__assert_fail@plt+0x8d04>
   1a180:	cmp	r0, #6
   1a184:	bne	1a20c <__assert_fail@plt+0x8cec>
   1a188:	ldr	r0, [sp, #4]
   1a18c:	movw	r7, #54000	; 0xd2f0
   1a190:	movt	r7, #2
   1a194:	add	r1, r0, #4
   1a198:	str	r1, [sp, #4]
   1a19c:	ldr	r6, [r0]
   1a1a0:	ldr	r0, [r7]
   1a1a4:	cmp	r0, #0
   1a1a8:	blt	1a248 <__assert_fail@plt+0x8d28>
   1a1ac:	mov	r0, r5
   1a1b0:	movw	r1, #1030	; 0x406
   1a1b4:	mov	r2, r6
   1a1b8:	bl	11430 <fcntl64@plt>
   1a1bc:	mov	r4, r0
   1a1c0:	cmn	r0, #1
   1a1c4:	bgt	1a23c <__assert_fail@plt+0x8d1c>
   1a1c8:	bl	113d0 <__errno_location@plt>
   1a1cc:	ldr	r0, [r0]
   1a1d0:	cmp	r0, #22
   1a1d4:	bne	1a23c <__assert_fail@plt+0x8d1c>
   1a1d8:	mov	r0, r5
   1a1dc:	mov	r1, #0
   1a1e0:	mov	r2, r6
   1a1e4:	bl	11430 <fcntl64@plt>
   1a1e8:	mov	r4, r0
   1a1ec:	cmp	r0, #0
   1a1f0:	blt	1a228 <__assert_fail@plt+0x8d08>
   1a1f4:	mvn	r0, #0
   1a1f8:	str	r0, [r7]
   1a1fc:	mov	r0, #1
   1a200:	cmp	r0, #0
   1a204:	bne	1a274 <__assert_fail@plt+0x8d54>
   1a208:	b	1a228 <__assert_fail@plt+0x8d08>
   1a20c:	ldr	r0, [sp, #4]
   1a210:	add	r2, r0, #4
   1a214:	str	r2, [sp, #4]
   1a218:	ldr	r2, [r0]
   1a21c:	mov	r0, r5
   1a220:	bl	11430 <fcntl64@plt>
   1a224:	mov	r4, r0
   1a228:	mov	r0, r4
   1a22c:	sub	sp, fp, #16
   1a230:	pop	{r4, r5, r6, r7, fp, lr}
   1a234:	add	sp, sp, #8
   1a238:	bx	lr
   1a23c:	mov	r0, #1
   1a240:	str	r0, [r7]
   1a244:	b	1a228 <__assert_fail@plt+0x8d08>
   1a248:	mov	r0, r5
   1a24c:	mov	r1, #0
   1a250:	mov	r2, r6
   1a254:	bl	11430 <fcntl64@plt>
   1a258:	mov	r4, r0
   1a25c:	ldr	r0, [r7]
   1a260:	add	r0, r0, #1
   1a264:	clz	r0, r0
   1a268:	lsr	r0, r0, #5
   1a26c:	cmp	r0, #0
   1a270:	beq	1a228 <__assert_fail@plt+0x8d08>
   1a274:	cmp	r4, #0
   1a278:	blt	1a228 <__assert_fail@plt+0x8d08>
   1a27c:	mov	r0, r4
   1a280:	mov	r1, #1
   1a284:	bl	11430 <fcntl64@plt>
   1a288:	cmp	r0, #0
   1a28c:	blt	1a2a8 <__assert_fail@plt+0x8d88>
   1a290:	orr	r2, r0, #1
   1a294:	mov	r0, r4
   1a298:	mov	r1, #2
   1a29c:	bl	11430 <fcntl64@plt>
   1a2a0:	cmn	r0, #1
   1a2a4:	bne	1a228 <__assert_fail@plt+0x8d08>
   1a2a8:	bl	113d0 <__errno_location@plt>
   1a2ac:	ldr	r6, [r0]
   1a2b0:	mov	r5, r0
   1a2b4:	mov	r0, r4
   1a2b8:	bl	114e4 <close@plt>
   1a2bc:	str	r6, [r5]
   1a2c0:	mvn	r4, #0
   1a2c4:	b	1a228 <__assert_fail@plt+0x8d08>
   1a2c8:	sub	sp, sp, #8
   1a2cc:	push	{fp, lr}
   1a2d0:	mov	fp, sp
   1a2d4:	sub	sp, sp, #8
   1a2d8:	str	r2, [fp, #8]
   1a2dc:	mov	r2, #0
   1a2e0:	tst	r1, #64	; 0x40
   1a2e4:	str	r3, [fp, #12]
   1a2e8:	addne	r2, fp, #8
   1a2ec:	orrne	r2, r2, #4
   1a2f0:	strne	r2, [sp, #4]
   1a2f4:	ldrne	r2, [fp, #8]
   1a2f8:	bl	11334 <open64@plt>
   1a2fc:	bl	18510 <__assert_fail@plt+0x6ff0>
   1a300:	mov	sp, fp
   1a304:	pop	{fp, lr}
   1a308:	add	sp, sp, #8
   1a30c:	bx	lr
   1a310:	push	{r4, sl, fp, lr}
   1a314:	add	fp, sp, #8
   1a318:	sub	sp, sp, #8
   1a31c:	mov	r4, r0
   1a320:	cmp	r0, #0
   1a324:	beq	1a340 <__assert_fail@plt+0x8e20>
   1a328:	mov	r0, r4
   1a32c:	bl	11358 <__freading@plt>
   1a330:	cmp	r0, #0
   1a334:	ldrbne	r0, [r4, #1]
   1a338:	tstne	r0, #1
   1a33c:	bne	1a350 <__assert_fail@plt+0x8e30>
   1a340:	mov	r0, r4
   1a344:	sub	sp, fp, #8
   1a348:	pop	{r4, sl, fp, lr}
   1a34c:	b	11244 <fflush@plt>
   1a350:	mov	r0, #1
   1a354:	mov	r2, #0
   1a358:	mov	r3, #0
   1a35c:	str	r0, [sp]
   1a360:	mov	r0, r4
   1a364:	bl	1a36c <__assert_fail@plt+0x8e4c>
   1a368:	b	1a340 <__assert_fail@plt+0x8e20>
   1a36c:	push	{r4, r5, r6, r7, fp, lr}
   1a370:	add	fp, sp, #16
   1a374:	sub	sp, sp, #8
   1a378:	mov	r4, r0
   1a37c:	ldr	r0, [r0, #4]
   1a380:	mov	r5, r3
   1a384:	mov	r6, r2
   1a388:	ldr	r1, [r4, #8]
   1a38c:	cmp	r1, r0
   1a390:	bne	1a3ac <__assert_fail@plt+0x8e8c>
   1a394:	ldrd	r0, [r4, #16]
   1a398:	cmp	r1, r0
   1a39c:	bne	1a3ac <__assert_fail@plt+0x8e8c>
   1a3a0:	ldr	r0, [r4, #36]	; 0x24
   1a3a4:	cmp	r0, #0
   1a3a8:	beq	1a3c4 <__assert_fail@plt+0x8ea4>
   1a3ac:	mov	r0, r4
   1a3b0:	mov	r2, r6
   1a3b4:	mov	r3, r5
   1a3b8:	sub	sp, fp, #16
   1a3bc:	pop	{r4, r5, r6, r7, fp, lr}
   1a3c0:	b	11424 <fseeko64@plt>
   1a3c4:	ldr	r7, [fp, #8]
   1a3c8:	mov	r0, r4
   1a3cc:	bl	11400 <fileno@plt>
   1a3d0:	mov	r2, r6
   1a3d4:	mov	r3, r5
   1a3d8:	str	r7, [sp]
   1a3dc:	bl	112f8 <lseek64@plt>
   1a3e0:	and	r2, r0, r1
   1a3e4:	cmn	r2, #1
   1a3e8:	mvneq	r0, #0
   1a3ec:	subeq	sp, fp, #16
   1a3f0:	popeq	{r4, r5, r6, r7, fp, pc}
   1a3f4:	strd	r0, [r4, #80]	; 0x50
   1a3f8:	ldr	r0, [r4]
   1a3fc:	bic	r0, r0, #16
   1a400:	str	r0, [r4]
   1a404:	mov	r0, #0
   1a408:	sub	sp, fp, #16
   1a40c:	pop	{r4, r5, r6, r7, fp, pc}
   1a410:	push	{fp, lr}
   1a414:	mov	fp, sp
   1a418:	mov	r0, #14
   1a41c:	bl	11460 <nl_langinfo@plt>
   1a420:	movw	r1, #44952	; 0xaf98
   1a424:	cmp	r0, #0
   1a428:	movt	r1, #1
   1a42c:	movne	r1, r0
   1a430:	movw	r0, #48918	; 0xbf16
   1a434:	ldrb	r2, [r1]
   1a438:	movt	r0, #1
   1a43c:	cmp	r2, #0
   1a440:	movne	r0, r1
   1a444:	pop	{fp, pc}
   1a448:	push	{r4, r5, r6, r7, fp, lr}
   1a44c:	add	fp, sp, #16
   1a450:	sub	sp, sp, #8
   1a454:	add	r5, sp, #4
   1a458:	cmp	r0, #0
   1a45c:	mov	r7, r2
   1a460:	mov	r4, r1
   1a464:	movne	r5, r0
   1a468:	mov	r0, r5
   1a46c:	bl	1131c <mbrtowc@plt>
   1a470:	mov	r6, r0
   1a474:	cmp	r7, #0
   1a478:	beq	1a49c <__assert_fail@plt+0x8f7c>
   1a47c:	cmn	r6, #2
   1a480:	bcc	1a49c <__assert_fail@plt+0x8f7c>
   1a484:	mov	r0, #0
   1a488:	bl	1a4f0 <__assert_fail@plt+0x8fd0>
   1a48c:	cmp	r0, #0
   1a490:	ldrbeq	r0, [r4]
   1a494:	moveq	r6, #1
   1a498:	streq	r0, [r5]
   1a49c:	mov	r0, r6
   1a4a0:	sub	sp, fp, #16
   1a4a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a4a8:	cmp	r2, #0
   1a4ac:	beq	1a4dc <__assert_fail@plt+0x8fbc>
   1a4b0:	mvn	r3, #0
   1a4b4:	udiv	r3, r3, r2
   1a4b8:	cmp	r3, r1
   1a4bc:	bcs	1a4dc <__assert_fail@plt+0x8fbc>
   1a4c0:	push	{fp, lr}
   1a4c4:	mov	fp, sp
   1a4c8:	bl	113d0 <__errno_location@plt>
   1a4cc:	mov	r1, #12
   1a4d0:	str	r1, [r0]
   1a4d4:	mov	r0, #0
   1a4d8:	pop	{fp, pc}
   1a4dc:	mul	r1, r2, r1
   1a4e0:	b	19e80 <__assert_fail@plt+0x8960>
   1a4e4:	mov	r1, #0
   1a4e8:	mov	r2, #3
   1a4ec:	b	1a0e8 <__assert_fail@plt+0x8bc8>
   1a4f0:	push	{r4, sl, fp, lr}
   1a4f4:	add	fp, sp, #8
   1a4f8:	sub	sp, sp, #264	; 0x108
   1a4fc:	add	r1, sp, #7
   1a500:	movw	r2, #257	; 0x101
   1a504:	bl	1a554 <__assert_fail@plt+0x9034>
   1a508:	mov	r4, #0
   1a50c:	cmp	r0, #0
   1a510:	bne	1a548 <__assert_fail@plt+0x9028>
   1a514:	movw	r1, #48924	; 0xbf1c
   1a518:	add	r0, sp, #7
   1a51c:	movt	r1, #1
   1a520:	bl	1122c <strcmp@plt>
   1a524:	cmp	r0, #0
   1a528:	beq	1a548 <__assert_fail@plt+0x9028>
   1a52c:	movw	r1, #48926	; 0xbf1e
   1a530:	add	r0, sp, #7
   1a534:	movt	r1, #1
   1a538:	bl	1122c <strcmp@plt>
   1a53c:	mov	r4, r0
   1a540:	cmp	r0, #0
   1a544:	movwne	r4, #1
   1a548:	mov	r0, r4
   1a54c:	sub	sp, fp, #8
   1a550:	pop	{r4, sl, fp, pc}
   1a554:	push	{r4, r5, r6, r7, fp, lr}
   1a558:	add	fp, sp, #16
   1a55c:	mov	r4, r1
   1a560:	mov	r1, #0
   1a564:	mov	r6, r2
   1a568:	bl	1143c <setlocale@plt>
   1a56c:	cmp	r0, #0
   1a570:	beq	1a5a0 <__assert_fail@plt+0x9080>
   1a574:	mov	r7, r0
   1a578:	bl	113a0 <strlen@plt>
   1a57c:	cmp	r0, r6
   1a580:	bcs	1a5c0 <__assert_fail@plt+0x90a0>
   1a584:	add	r2, r0, #1
   1a588:	mov	r0, r4
   1a58c:	mov	r1, r7
   1a590:	bl	11274 <memcpy@plt>
   1a594:	mov	r5, #0
   1a598:	mov	r0, r5
   1a59c:	pop	{r4, r5, r6, r7, fp, pc}
   1a5a0:	cmp	r6, #0
   1a5a4:	mov	r5, #22
   1a5a8:	movne	r0, #0
   1a5ac:	strbne	r0, [r4]
   1a5b0:	movne	r0, r5
   1a5b4:	popne	{r4, r5, r6, r7, fp, pc}
   1a5b8:	mov	r0, r5
   1a5bc:	pop	{r4, r5, r6, r7, fp, pc}
   1a5c0:	mov	r5, #34	; 0x22
   1a5c4:	cmp	r6, #0
   1a5c8:	beq	1a5e8 <__assert_fail@plt+0x90c8>
   1a5cc:	sub	r6, r6, #1
   1a5d0:	mov	r0, r4
   1a5d4:	mov	r1, r7
   1a5d8:	mov	r2, r6
   1a5dc:	bl	11274 <memcpy@plt>
   1a5e0:	mov	r0, #0
   1a5e4:	strb	r0, [r4, r6]
   1a5e8:	mov	r0, r5
   1a5ec:	pop	{r4, r5, r6, r7, fp, pc}
   1a5f0:	mov	r1, #0
   1a5f4:	b	1143c <setlocale@plt>
   1a5f8:	cmp	r3, #0
   1a5fc:	cmpeq	r2, #0
   1a600:	bne	1a618 <__assert_fail@plt+0x90f8>
   1a604:	cmp	r1, #0
   1a608:	cmpeq	r0, #0
   1a60c:	mvnne	r1, #0
   1a610:	mvnne	r0, #0
   1a614:	b	1a634 <__assert_fail@plt+0x9114>
   1a618:	sub	sp, sp, #8
   1a61c:	push	{sp, lr}
   1a620:	bl	1a644 <__assert_fail@plt+0x9124>
   1a624:	ldr	lr, [sp, #4]
   1a628:	add	sp, sp, #8
   1a62c:	pop	{r2, r3}
   1a630:	bx	lr
   1a634:	push	{r1, lr}
   1a638:	mov	r0, #8
   1a63c:	bl	11214 <raise@plt>
   1a640:	pop	{r1, pc}
   1a644:	cmp	r1, r3
   1a648:	cmpeq	r0, r2
   1a64c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a650:	mov	r4, r0
   1a654:	movcc	r0, #0
   1a658:	mov	r5, r1
   1a65c:	ldr	lr, [sp, #36]	; 0x24
   1a660:	movcc	r1, r0
   1a664:	bcc	1a760 <__assert_fail@plt+0x9240>
   1a668:	cmp	r3, #0
   1a66c:	clzeq	ip, r2
   1a670:	clzne	ip, r3
   1a674:	addeq	ip, ip, #32
   1a678:	cmp	r5, #0
   1a67c:	clzeq	r1, r4
   1a680:	addeq	r1, r1, #32
   1a684:	clzne	r1, r5
   1a688:	sub	ip, ip, r1
   1a68c:	sub	sl, ip, #32
   1a690:	lsl	r9, r3, ip
   1a694:	rsb	fp, ip, #32
   1a698:	orr	r9, r9, r2, lsl sl
   1a69c:	orr	r9, r9, r2, lsr fp
   1a6a0:	lsl	r8, r2, ip
   1a6a4:	cmp	r5, r9
   1a6a8:	cmpeq	r4, r8
   1a6ac:	movcc	r0, #0
   1a6b0:	movcc	r1, r0
   1a6b4:	bcc	1a6d0 <__assert_fail@plt+0x91b0>
   1a6b8:	mov	r0, #1
   1a6bc:	subs	r4, r4, r8
   1a6c0:	lsl	r1, r0, sl
   1a6c4:	orr	r1, r1, r0, lsr fp
   1a6c8:	lsl	r0, r0, ip
   1a6cc:	sbc	r5, r5, r9
   1a6d0:	cmp	ip, #0
   1a6d4:	beq	1a760 <__assert_fail@plt+0x9240>
   1a6d8:	lsr	r6, r8, #1
   1a6dc:	orr	r6, r6, r9, lsl #31
   1a6e0:	lsr	r7, r9, #1
   1a6e4:	mov	r2, ip
   1a6e8:	b	1a70c <__assert_fail@plt+0x91ec>
   1a6ec:	subs	r3, r4, r6
   1a6f0:	sbc	r8, r5, r7
   1a6f4:	adds	r3, r3, r3
   1a6f8:	adc	r8, r8, r8
   1a6fc:	adds	r4, r3, #1
   1a700:	adc	r5, r8, #0
   1a704:	subs	r2, r2, #1
   1a708:	beq	1a728 <__assert_fail@plt+0x9208>
   1a70c:	cmp	r5, r7
   1a710:	cmpeq	r4, r6
   1a714:	bcs	1a6ec <__assert_fail@plt+0x91cc>
   1a718:	adds	r4, r4, r4
   1a71c:	adc	r5, r5, r5
   1a720:	subs	r2, r2, #1
   1a724:	bne	1a70c <__assert_fail@plt+0x91ec>
   1a728:	lsr	r3, r4, ip
   1a72c:	orr	r3, r3, r5, lsl fp
   1a730:	lsr	r2, r5, ip
   1a734:	orr	r3, r3, r5, lsr sl
   1a738:	adds	r0, r0, r4
   1a73c:	mov	r4, r3
   1a740:	lsl	r3, r2, ip
   1a744:	orr	r3, r3, r4, lsl sl
   1a748:	lsl	ip, r4, ip
   1a74c:	orr	r3, r3, r4, lsr fp
   1a750:	adc	r1, r1, r5
   1a754:	subs	r0, r0, ip
   1a758:	mov	r5, r2
   1a75c:	sbc	r1, r1, r3
   1a760:	cmp	lr, #0
   1a764:	strdne	r4, [lr]
   1a768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a76c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a770:	mov	r7, r0
   1a774:	ldr	r6, [pc, #72]	; 1a7c4 <__assert_fail@plt+0x92a4>
   1a778:	ldr	r5, [pc, #72]	; 1a7c8 <__assert_fail@plt+0x92a8>
   1a77c:	add	r6, pc, r6
   1a780:	add	r5, pc, r5
   1a784:	sub	r6, r6, r5
   1a788:	mov	r8, r1
   1a78c:	mov	r9, r2
   1a790:	bl	111c4 <fstatfs64@plt-0x20>
   1a794:	asrs	r6, r6, #2
   1a798:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a79c:	mov	r4, #0
   1a7a0:	add	r4, r4, #1
   1a7a4:	ldr	r3, [r5], #4
   1a7a8:	mov	r2, r9
   1a7ac:	mov	r1, r8
   1a7b0:	mov	r0, r7
   1a7b4:	blx	r3
   1a7b8:	cmp	r6, r4
   1a7bc:	bne	1a7a0 <__assert_fail@plt+0x9280>
   1a7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7c4:	andeq	r2, r1, r8, lsl #15
   1a7c8:	andeq	r2, r1, r0, lsl #15
   1a7cc:	bx	lr
   1a7d0:	ldr	r3, [pc, #12]	; 1a7e4 <__assert_fail@plt+0x92c4>
   1a7d4:	mov	r1, #0
   1a7d8:	add	r3, pc, r3
   1a7dc:	ldr	r2, [r3]
   1a7e0:	b	113dc <__cxa_atexit@plt>
   1a7e4:	andeq	r2, r1, ip, asr #18

Disassembly of section .fini:

0001a7e8 <.fini>:
   1a7e8:	push	{r3, lr}
   1a7ec:	pop	{r3, pc}
