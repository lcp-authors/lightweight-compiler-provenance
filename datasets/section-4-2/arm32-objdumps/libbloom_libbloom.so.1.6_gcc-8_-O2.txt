
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

000004c4 <.init>:
 4c4:	push	{r3, lr}
 4c8:	bl	560 <bloom_init@plt+0x10>
 4cc:	pop	{r3, pc}

Disassembly of section .plt:

000004d0 <calloc@plt-0x14>:
 4d0:	push	{lr}		; (str lr, [sp, #-4]!)
 4d4:	ldr	lr, [pc, #4]	; 4e0 <calloc@plt-0x4>
 4d8:	add	lr, pc, lr
 4dc:	ldr	pc, [lr, #8]!
 4e0:	andeq	r0, r1, r0, lsr #22

000004e4 <calloc@plt>:
 4e4:	add	ip, pc, #0, 12
 4e8:	add	ip, ip, #16, 20	; 0x10000
 4ec:	ldr	pc, [ip, #2848]!	; 0xb20

000004f0 <log@plt>:
 4f0:	add	ip, pc, #0, 12
 4f4:	add	ip, ip, #16, 20	; 0x10000
 4f8:	ldr	pc, [ip, #2840]!	; 0xb18

000004fc <__cxa_finalize@plt>:
 4fc:	add	ip, pc, #0, 12
 500:	add	ip, ip, #16, 20	; 0x10000
 504:	ldr	pc, [ip, #2832]!	; 0xb10

00000508 <printf@plt>:
 508:	add	ip, pc, #0, 12
 50c:	add	ip, ip, #16, 20	; 0x10000
 510:	ldr	pc, [ip, #2824]!	; 0xb08

00000514 <murmurhash2@plt>:
 514:	add	ip, pc, #0, 12
 518:	add	ip, ip, #16, 20	; 0x10000
 51c:	ldr	pc, [ip, #2816]!	; 0xb00

00000520 <free@plt>:
 520:	add	ip, pc, #0, 12
 524:	add	ip, ip, #16, 20	; 0x10000
 528:	ldr	pc, [ip, #2808]!	; 0xaf8

0000052c <__gmon_start__@plt>:
 52c:	add	ip, pc, #0, 12
 530:	add	ip, ip, #16, 20	; 0x10000
 534:	ldr	pc, [ip, #2800]!	; 0xaf0

00000538 <memset@plt>:
 538:	add	ip, pc, #0, 12
 53c:	add	ip, ip, #16, 20	; 0x10000
 540:	ldr	pc, [ip, #2792]!	; 0xae8

00000544 <ceil@plt>:
 544:	add	ip, pc, #0, 12
 548:	add	ip, ip, #16, 20	; 0x10000
 54c:	ldr	pc, [ip, #2784]!	; 0xae0

00000550 <bloom_init@plt>:
 550:	add	ip, pc, #0, 12
 554:	add	ip, ip, #16, 20	; 0x10000
 558:	ldr	pc, [ip, #2776]!	; 0xad8

Disassembly of section .text:

00000560 <bloom_init@@Base-0x20c>:
 560:	ldr	r3, [pc, #20]	; 57c <bloom_init@plt+0x2c>
 564:	ldr	r2, [pc, #20]	; 580 <bloom_init@plt+0x30>
 568:	add	r3, pc, r3
 56c:	ldr	r2, [r3, r2]
 570:	cmp	r2, #0
 574:	bxeq	lr
 578:	b	52c <__gmon_start__@plt>
 57c:	muleq	r1, r0, sl
 580:	andeq	r0, r0, ip, lsr r0
 584:	ldr	r0, [pc, #44]	; 5b8 <bloom_init@plt+0x68>
 588:	ldr	r3, [pc, #44]	; 5bc <bloom_init@plt+0x6c>
 58c:	add	r0, pc, r0
 590:	add	r3, pc, r3
 594:	cmp	r3, r0
 598:	ldr	r3, [pc, #32]	; 5c0 <bloom_init@plt+0x70>
 59c:	add	r3, pc, r3
 5a0:	bxeq	lr
 5a4:	ldr	r2, [pc, #24]	; 5c4 <bloom_init@plt+0x74>
 5a8:	ldr	r3, [r3, r2]
 5ac:	cmp	r3, #0
 5b0:	bxeq	lr
 5b4:	bx	r3
 5b8:			; <UNDEFINED> instruction: 0x00010ab4
 5bc:			; <UNDEFINED> instruction: 0x00010ab0
 5c0:	andeq	r0, r1, ip, asr sl
 5c4:	andeq	r0, r0, r8, lsr r0
 5c8:	ldr	r0, [pc, #56]	; 608 <bloom_init@plt+0xb8>
 5cc:	ldr	r3, [pc, #56]	; 60c <bloom_init@plt+0xbc>
 5d0:	add	r0, pc, r0
 5d4:	add	r3, pc, r3
 5d8:	sub	r1, r3, r0
 5dc:	ldr	r3, [pc, #44]	; 610 <bloom_init@plt+0xc0>
 5e0:	asr	r1, r1, #2
 5e4:	add	r3, pc, r3
 5e8:	add	r1, r1, r1, lsr #31
 5ec:	asrs	r1, r1, #1
 5f0:	bxeq	lr
 5f4:	ldr	r2, [pc, #24]	; 614 <bloom_init@plt+0xc4>
 5f8:	ldr	r3, [r3, r2]
 5fc:	cmp	r3, #0
 600:	bxeq	lr
 604:	bx	r3
 608:	andeq	r0, r1, r0, ror sl
 60c:	andeq	r0, r1, ip, ror #20
 610:	andeq	r0, r1, r4, lsl sl
 614:	andeq	r0, r0, r0, asr #32
 618:	ldr	r3, [pc, #76]	; 66c <bloom_init@plt+0x11c>
 61c:	ldr	r2, [pc, #76]	; 670 <bloom_init@plt+0x120>
 620:	add	r3, pc, r3
 624:	add	r2, pc, r2
 628:	ldrb	r3, [r3]
 62c:	cmp	r3, #0
 630:	bxne	lr
 634:	ldr	r3, [pc, #56]	; 674 <bloom_init@plt+0x124>
 638:	push	{r4, lr}
 63c:	ldr	r3, [r2, r3]
 640:	cmp	r3, #0
 644:	beq	654 <bloom_init@plt+0x104>
 648:	ldr	r3, [pc, #40]	; 678 <bloom_init@plt+0x128>
 64c:	ldr	r0, [pc, r3]
 650:	bl	4fc <__cxa_finalize@plt>
 654:	bl	584 <bloom_init@plt+0x34>
 658:	ldr	r3, [pc, #28]	; 67c <bloom_init@plt+0x12c>
 65c:	mov	r2, #1
 660:	add	r3, pc, r3
 664:	strb	r2, [r3]
 668:	pop	{r4, pc}
 66c:	andeq	r0, r1, r0, lsr #20
 670:	ldrdeq	r0, [r1], -r4
 674:	andeq	r0, r0, r4, lsr r0
 678:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 67c:	andeq	r0, r1, r0, ror #19
 680:	b	5c8 <bloom_init@plt+0x78>
 684:	andeq	r0, r0, r0
 688:	strd	r4, [sp, #-32]!	; 0xffffffe0
 68c:	mov	r5, r0
 690:	strd	r6, [sp, #8]
 694:	mov	r7, r1
 698:	mov	r1, r2
 69c:	mov	r0, r7
 6a0:	strd	r8, [sp, #16]
 6a4:	mov	r8, r2
 6a8:	movw	r2, #45708	; 0xb28c
 6ac:	movt	r2, #38727	; 0x9747
 6b0:	str	sl, [sp, #24]
 6b4:	mov	r6, r3
 6b8:	str	lr, [sp, #28]
 6bc:	bl	514 <murmurhash2@plt>
 6c0:	mov	r2, r0
 6c4:	mov	r4, r0
 6c8:	mov	r1, r8
 6cc:	mov	r0, r7
 6d0:	bl	514 <murmurhash2@plt>
 6d4:	ldr	r9, [r5, #24]
 6d8:	cmp	r9, #0
 6dc:	beq	764 <bloom_init@plt+0x214>
 6e0:	mov	r7, #0
 6e4:	mov	r8, #1
 6e8:	mov	r3, r7
 6ec:	ldr	r1, [r5, #16]
 6f0:	ldr	lr, [r5, #40]	; 0x28
 6f4:	udiv	r2, r4, r1
 6f8:	mls	r2, r1, r2, r4
 6fc:	ldrb	ip, [lr, r2, lsr #3]
 700:	and	r1, r2, #7
 704:	lsl	r1, r8, r1
 708:	tst	r1, ip
 70c:	addne	r7, r7, #1
 710:	bne	744 <bloom_init@plt+0x1f4>
 714:	cmp	r6, #0
 718:	orr	r1, ip, r1
 71c:	bne	73c <bloom_init@plt+0x1ec>
 720:	mov	r0, r6
 724:	ldrd	r4, [sp]
 728:	ldrd	r6, [sp, #8]
 72c:	ldrd	r8, [sp, #16]
 730:	ldr	sl, [sp, #24]
 734:	add	sp, sp, #28
 738:	pop	{pc}		; (ldr pc, [sp], #4)
 73c:	strb	r1, [lr, r2, lsr #3]
 740:	ldr	r9, [r5, #24]
 744:	add	r3, r3, #1
 748:	add	r4, r4, r0
 74c:	cmp	r3, r9
 750:	bcc	6ec <bloom_init@plt+0x19c>
 754:	sub	r6, r9, r7
 758:	clz	r6, r6
 75c:	lsr	r6, r6, #5
 760:	b	720 <bloom_init@plt+0x1d0>
 764:	mov	r6, #1
 768:	b	720 <bloom_init@plt+0x1d0>

0000076c <bloom_init@@Base>:
 76c:	vcmp.f64	d0, #0.0
 770:	mov	r3, #0
 774:	str	r3, [r0, #44]	; 0x2c
 778:	vmrs	APSR_nzcv, fpscr
 77c:	moveq	r3, #1
 780:	cmp	r1, #1000	; 0x3e8
 784:	orrlt	r3, r3, #1
 788:	cmp	r3, #0
 78c:	beq	798 <bloom_init@@Base+0x2c>
 790:	mov	r0, #1
 794:	bx	lr
 798:	strd	r4, [sp, #-16]!
 79c:	mov	r5, r0
 7a0:	mov	r4, r1
 7a4:	str	r6, [sp, #8]
 7a8:	str	lr, [sp, #12]
 7ac:	str	r1, [r5]
 7b0:	vstr	d0, [r5, #8]
 7b4:	bl	4f0 <log@plt>
 7b8:	vldr	d6, [pc, #160]	; 860 <bloom_init@@Base+0xf4>
 7bc:	vmov	s15, r4
 7c0:	vdiv.f64	d0, d0, d6
 7c4:	vcvt.f64.s32	d7, s15
 7c8:	vneg.f64	d0, d0
 7cc:	vmul.f64	d7, d7, d0
 7d0:	vstr	d0, [r5, #32]
 7d4:	vcvt.s32.f64	s15, d7
 7d8:	vmov	r3, s15
 7dc:	vstr	s15, [r5, #16]
 7e0:	tst	r3, #7
 7e4:	add	r4, r3, #7
 7e8:	beq	84c <bloom_init@@Base+0xe0>
 7ec:	cmp	r3, #0
 7f0:	movlt	r3, r4
 7f4:	asr	r4, r3, #3
 7f8:	add	r4, r4, #1
 7fc:	vldr	d7, [pc, #100]	; 868 <bloom_init@@Base+0xfc>
 800:	str	r4, [r5, #20]
 804:	vmul.f64	d0, d0, d7
 808:	bl	544 <ceil@plt>
 80c:	vcvt.s32.f64	s0, d0
 810:	mov	r0, r4
 814:	mov	r1, #1
 818:	vstr	s0, [r5, #24]
 81c:	bl	4e4 <calloc@plt>
 820:	cmp	r0, #0
 824:	str	r0, [r5, #40]	; 0x28
 828:	moveq	r0, #1
 82c:	beq	83c <bloom_init@@Base+0xd0>
 830:	mov	r3, #1
 834:	mov	r0, #0
 838:	str	r3, [r5, #44]	; 0x2c
 83c:	ldrd	r4, [sp]
 840:	ldr	r6, [sp, #8]
 844:	add	sp, sp, #12
 848:	pop	{pc}		; (ldr pc, [sp], #4)
 84c:	cmp	r3, #0
 850:	movlt	r3, r4
 854:	asr	r4, r3, #3
 858:	b	7fc <bloom_init@@Base+0x90>
 85c:	nop	{0}
 860:			; <UNDEFINED> instruction: 0xff82c587
 864:	svccc	0x00debfbd
 868:			; <UNDEFINED> instruction: 0xfefa39ec
 86c:	svccc	0x00e62e42

00000870 <bloom_init_size@@Base>:
 870:	b	550 <bloom_init@plt>

00000874 <bloom_check@@Base>:
 874:	ldr	ip, [r0, #44]	; 0x2c
 878:	cmp	ip, #0
 87c:	beq	888 <bloom_check@@Base+0x14>
 880:	mov	r3, #0
 884:	b	688 <bloom_init@plt+0x138>
 888:	mov	r1, r0
 88c:	ldr	r0, [pc, #28]	; 8b0 <bloom_check@@Base+0x3c>
 890:	str	r4, [sp, #-8]!
 894:	str	lr, [sp, #4]
 898:	add	r0, pc, r0
 89c:	bl	508 <printf@plt>
 8a0:	ldr	r4, [sp]
 8a4:	add	sp, sp, #4
 8a8:	mvn	r0, #0
 8ac:	pop	{pc}		; (ldr pc, [sp], #4)
 8b0:	andeq	r0, r0, ip, lsr r2

000008b4 <bloom_add@@Base>:
 8b4:	ldr	ip, [r0, #44]	; 0x2c
 8b8:	cmp	ip, #0
 8bc:	beq	8c8 <bloom_add@@Base+0x14>
 8c0:	mov	r3, #1
 8c4:	b	688 <bloom_init@plt+0x138>
 8c8:	mov	r1, r0
 8cc:	ldr	r0, [pc, #28]	; 8f0 <bloom_add@@Base+0x3c>
 8d0:	str	r4, [sp, #-8]!
 8d4:	str	lr, [sp, #4]
 8d8:	add	r0, pc, r0
 8dc:	bl	508 <printf@plt>
 8e0:	ldr	r4, [sp]
 8e4:	add	sp, sp, #4
 8e8:	mvn	r0, #0
 8ec:	pop	{pc}		; (ldr pc, [sp], #4)
 8f0:	strdeq	r0, [r0], -ip

000008f4 <bloom_print@@Base>:
 8f4:	str	r4, [sp, #-8]!
 8f8:	mov	r4, r0
 8fc:	ldr	r0, [pc, #120]	; 97c <bloom_print@@Base+0x88>
 900:	mov	r1, r4
 904:	str	lr, [sp, #4]
 908:	add	r0, pc, r0
 90c:	bl	508 <printf@plt>
 910:	ldr	r0, [pc, #104]	; 980 <bloom_print@@Base+0x8c>
 914:	ldr	r1, [r4]
 918:	add	r0, pc, r0
 91c:	bl	508 <printf@plt>
 920:	ldr	r0, [pc, #92]	; 984 <bloom_print@@Base+0x90>
 924:	ldrd	r2, [r4, #8]
 928:	add	r0, pc, r0
 92c:	bl	508 <printf@plt>
 930:	ldr	r0, [pc, #80]	; 988 <bloom_print@@Base+0x94>
 934:	ldr	r1, [r4, #16]
 938:	add	r0, pc, r0
 93c:	bl	508 <printf@plt>
 940:	ldr	r0, [pc, #68]	; 98c <bloom_print@@Base+0x98>
 944:	ldrd	r2, [r4, #32]
 948:	add	r0, pc, r0
 94c:	bl	508 <printf@plt>
 950:	ldr	r0, [pc, #56]	; 990 <bloom_print@@Base+0x9c>
 954:	ldr	r1, [r4, #20]
 958:	add	r0, pc, r0
 95c:	bl	508 <printf@plt>
 960:	ldr	r0, [pc, #44]	; 994 <bloom_print@@Base+0xa0>
 964:	ldr	lr, [sp, #4]
 968:	ldr	r1, [r4, #24]
 96c:	add	r0, pc, r0
 970:	ldr	r4, [sp]
 974:	add	sp, sp, #8
 978:	b	508 <printf@plt>
 97c:	andeq	r0, r0, ip, ror #3
 980:	andeq	r0, r0, ip, ror #3
 984:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 988:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 98c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 990:	strdeq	r0, [r0], -r8
 994:	strdeq	r0, [r0], -r4

00000998 <bloom_free@@Base>:
 998:	ldr	r3, [r0, #44]	; 0x2c
 99c:	str	r4, [sp, #-8]!
 9a0:	mov	r4, r0
 9a4:	str	lr, [sp, #4]
 9a8:	cmp	r3, #0
 9ac:	bne	9c4 <bloom_free@@Base+0x2c>
 9b0:	mov	r3, #0
 9b4:	str	r3, [r4, #44]	; 0x2c
 9b8:	ldr	r4, [sp]
 9bc:	add	sp, sp, #4
 9c0:	pop	{pc}		; (ldr pc, [sp], #4)
 9c4:	ldr	r0, [r0, #40]	; 0x28
 9c8:	bl	520 <free@plt>
 9cc:	b	9b0 <bloom_free@@Base+0x18>

000009d0 <bloom_reset@@Base>:
 9d0:	ldr	r3, [r0, #44]	; 0x2c
 9d4:	cmp	r3, #0
 9d8:	bne	9e4 <bloom_reset@@Base+0x14>
 9dc:	mov	r0, #1
 9e0:	bx	lr
 9e4:	mov	r1, #0
 9e8:	str	r4, [sp, #-8]!
 9ec:	ldr	r2, [r0, #20]
 9f0:	ldr	r0, [r0, #40]	; 0x28
 9f4:	str	lr, [sp, #4]
 9f8:	bl	538 <memset@plt>
 9fc:	ldr	r4, [sp]
 a00:	add	sp, sp, #4
 a04:	mov	r0, #0
 a08:	pop	{pc}		; (ldr pc, [sp], #4)

00000a0c <bloom_version@@Base>:
 a0c:	ldr	r0, [pc, #4]	; a18 <bloom_version@@Base+0xc>
 a10:	add	r0, pc, r0
 a14:	bx	lr
 a18:	andeq	r0, r0, r8, ror #2

00000a1c <murmurhash2@@Base>:
 a1c:	cmp	r1, #3
 a20:	eor	r2, r2, r1
 a24:	str	r4, [sp, #-8]!
 a28:	str	lr, [sp, #4]
 a2c:	ble	acc <murmurhash2@@Base+0xb0>
 a30:	sub	r1, r1, #4
 a34:	movw	ip, #59797	; 0xe995
 a38:	movt	ip, #23505	; 0x5bd1
 a3c:	lsr	r4, r1, #2
 a40:	add	lr, r4, #1
 a44:	add	lr, r0, lr, lsl #2
 a48:	ldr	r3, [r0], #4
 a4c:	mul	r2, ip, r2
 a50:	mul	r3, ip, r3
 a54:	cmp	r0, lr
 a58:	eor	r3, r3, r3, lsr #24
 a5c:	mul	r3, ip, r3
 a60:	eor	r2, r2, r3
 a64:	bne	a48 <murmurhash2@@Base+0x2c>
 a68:	sub	r1, r1, r4, lsl #2
 a6c:	cmp	r1, #2
 a70:	beq	aac <murmurhash2@@Base+0x90>
 a74:	cmp	r1, #3
 a78:	beq	aa4 <murmurhash2@@Base+0x88>
 a7c:	cmp	r1, #1
 a80:	beq	ab4 <murmurhash2@@Base+0x98>
 a84:	eor	r3, r2, r2, lsr #13
 a88:	movw	r0, #59797	; 0xe995
 a8c:	movt	r0, #23505	; 0x5bd1
 a90:	ldr	r4, [sp]
 a94:	add	sp, sp, #4
 a98:	mul	r0, r0, r3
 a9c:	eor	r0, r0, r0, lsr #15
 aa0:	pop	{pc}		; (ldr pc, [sp], #4)
 aa4:	ldrb	r3, [lr, #2]
 aa8:	eor	r2, r2, r3, lsl #16
 aac:	ldrb	r3, [lr, #1]
 ab0:	eor	r2, r2, r3, lsl #8
 ab4:	ldrb	r3, [lr]
 ab8:	movw	r1, #59797	; 0xe995
 abc:	movt	r1, #23505	; 0x5bd1
 ac0:	eor	r3, r3, r2
 ac4:	mul	r2, r1, r3
 ac8:	b	a84 <murmurhash2@@Base+0x68>
 acc:	mov	lr, r0
 ad0:	b	a6c <murmurhash2@@Base+0x50>

Disassembly of section .fini:

00000ad4 <.fini>:
 ad4:	push	{r3, lr}
 ad8:	pop	{r3, pc}
