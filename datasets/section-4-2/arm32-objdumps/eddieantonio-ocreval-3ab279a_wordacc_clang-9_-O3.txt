
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010b24 <.init>:
   10b24:	push	{r3, lr}
   10b28:	bl	10d3c <__assert_fail@plt+0x48>
   10b2c:	pop	{r3, pc}

Disassembly of section .plt:

00010b30 <calloc@plt-0x14>:
   10b30:	push	{lr}		; (str lr, [sp, #-4]!)
   10b34:	ldr	lr, [pc, #4]	; 10b40 <calloc@plt-0x4>
   10b38:	add	lr, pc, lr
   10b3c:	ldr	pc, [lr, #8]!
   10b40:	andeq	r8, r1, r0, asr #9

00010b44 <calloc@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #24, 20	; 0x18000
   10b4c:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b50 <strcmp@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #24, 20	; 0x18000
   10b58:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b5c <strtol@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #24, 20	; 0x18000
   10b64:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b68 <fopen@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #24, 20	; 0x18000
   10b70:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b74 <free@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #24, 20	; 0x18000
   10b7c:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b80 <utf8proc_get_property@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #24, 20	; 0x18000
   10b88:	ldr	pc, [ip, #1176]!	; 0x498

00010b8c <fgets@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #24, 20	; 0x18000
   10b94:	ldr	pc, [ip, #1168]!	; 0x490

00010b98 <utf8proc_encode_char@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #24, 20	; 0x18000
   10ba0:	ldr	pc, [ip, #1160]!	; 0x488

00010ba4 <strdup@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #24, 20	; 0x18000
   10bac:	ldr	pc, [ip, #1152]!	; 0x480

00010bb0 <rewind@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #24, 20	; 0x18000
   10bb8:	ldr	pc, [ip, #1144]!	; 0x478

00010bbc <unlink@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #24, 20	; 0x18000
   10bc4:	ldr	pc, [ip, #1136]!	; 0x470

00010bc8 <utf8proc_tolower@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #24, 20	; 0x18000
   10bd0:	ldr	pc, [ip, #1128]!	; 0x468

00010bd4 <__xstat@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #24, 20	; 0x18000
   10bdc:	ldr	pc, [ip, #1120]!	; 0x460

00010be0 <fwrite@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #24, 20	; 0x18000
   10be8:	ldr	pc, [ip, #1112]!	; 0x458

00010bec <fread@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #24, 20	; 0x18000
   10bf4:	ldr	pc, [ip, #1104]!	; 0x450

00010bf8 <utf8proc_iterate@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #24, 20	; 0x18000
   10c00:	ldr	pc, [ip, #1096]!	; 0x448

00010c04 <malloc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #24, 20	; 0x18000
   10c0c:	ldr	pc, [ip, #1088]!	; 0x440

00010c10 <__libc_start_main@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #24, 20	; 0x18000
   10c18:	ldr	pc, [ip, #1080]!	; 0x438

00010c1c <__sysv_signal@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #24, 20	; 0x18000
   10c24:	ldr	pc, [ip, #1072]!	; 0x430

00010c28 <__gmon_start__@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #24, 20	; 0x18000
   10c30:	ldr	pc, [ip, #1064]!	; 0x428

00010c34 <getpid@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #24, 20	; 0x18000
   10c3c:	ldr	pc, [ip, #1056]!	; 0x420

00010c40 <exit@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #24, 20	; 0x18000
   10c48:	ldr	pc, [ip, #1048]!	; 0x418

00010c4c <bcmp@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #24, 20	; 0x18000
   10c54:	ldr	pc, [ip, #1040]!	; 0x410

00010c58 <utf8proc_category@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #24, 20	; 0x18000
   10c60:	ldr	pc, [ip, #1032]!	; 0x408

00010c64 <strlen@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #1024]!	; 0x400

00010c70 <fprintf@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c7c <__isoc99_sscanf@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c88 <fclose@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c94 <utf8proc_NFC@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca0 <fputc@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #984]!	; 0x3d8

00010cac <sprintf@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #976]!	; 0x3d0

00010cb8 <utf8proc_errmsg@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc4 <fputs@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd0 <strncmp@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #952]!	; 0x3b8

00010cdc <abort@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #944]!	; 0x3b0

00010ce8 <getc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #936]!	; 0x3a8

00010cf4 <__assert_fail@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #928]!	; 0x3a0

Disassembly of section .text:

00010d00 <error@@Base-0x3128>:
   10d00:	mov	fp, #0
   10d04:	mov	lr, #0
   10d08:	pop	{r1}		; (ldr r1, [sp], #4)
   10d0c:	mov	r2, sp
   10d10:	push	{r2}		; (str r2, [sp, #-4]!)
   10d14:	push	{r0}		; (str r0, [sp, #-4]!)
   10d18:	ldr	ip, [pc, #16]	; 10d30 <__assert_fail@plt+0x3c>
   10d1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d20:	ldr	r0, [pc, #12]	; 10d34 <__assert_fail@plt+0x40>
   10d24:	ldr	r3, [pc, #12]	; 10d38 <__assert_fail@plt+0x44>
   10d28:	bl	10c10 <__libc_start_main@plt>
   10d2c:	bl	10cdc <abort@plt>
   10d30:	andeq	r4, r1, r4, asr #17
   10d34:	ldrdeq	r1, [r1], -r8
   10d38:	andeq	r4, r1, r4, ror #16
   10d3c:	ldr	r3, [pc, #20]	; 10d58 <__assert_fail@plt+0x64>
   10d40:	ldr	r2, [pc, #20]	; 10d5c <__assert_fail@plt+0x68>
   10d44:	add	r3, pc, r3
   10d48:	ldr	r2, [r3, r2]
   10d4c:	cmp	r2, #0
   10d50:	bxeq	lr
   10d54:	b	10c28 <__gmon_start__@plt>
   10d58:			; <UNDEFINED> instruction: 0x000182b4
   10d5c:	andeq	r0, r0, r0, lsr #1
   10d60:	ldr	r0, [pc, #24]	; 10d80 <__assert_fail@plt+0x8c>
   10d64:	ldr	r3, [pc, #24]	; 10d84 <__assert_fail@plt+0x90>
   10d68:	cmp	r3, r0
   10d6c:	bxeq	lr
   10d70:	ldr	r3, [pc, #16]	; 10d88 <__assert_fail@plt+0x94>
   10d74:	cmp	r3, #0
   10d78:	bxeq	lr
   10d7c:	bx	r3
   10d80:	andeq	r9, r2, r4, ror #1
   10d84:	andeq	r9, r2, r4, ror #1
   10d88:	andeq	r0, r0, r0
   10d8c:	ldr	r0, [pc, #36]	; 10db8 <__assert_fail@plt+0xc4>
   10d90:	ldr	r1, [pc, #36]	; 10dbc <__assert_fail@plt+0xc8>
   10d94:	sub	r1, r1, r0
   10d98:	asr	r1, r1, #2
   10d9c:	add	r1, r1, r1, lsr #31
   10da0:	asrs	r1, r1, #1
   10da4:	bxeq	lr
   10da8:	ldr	r3, [pc, #16]	; 10dc0 <__assert_fail@plt+0xcc>
   10dac:	cmp	r3, #0
   10db0:	bxeq	lr
   10db4:	bx	r3
   10db8:	andeq	r9, r2, r4, ror #1
   10dbc:	andeq	r9, r2, r4, ror #1
   10dc0:	andeq	r0, r0, r0
   10dc4:	push	{r4, lr}
   10dc8:	ldr	r4, [pc, #24]	; 10de8 <__assert_fail@plt+0xf4>
   10dcc:	ldrb	r3, [r4]
   10dd0:	cmp	r3, #0
   10dd4:	popne	{r4, pc}
   10dd8:	bl	10d60 <__assert_fail@plt+0x6c>
   10ddc:	mov	r3, #1
   10de0:	strb	r3, [r4]
   10de4:	pop	{r4, pc}
   10de8:	strdeq	r9, [r2], -r8
   10dec:	b	10d8c <__assert_fail@plt+0x98>
   10df0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10df4:	add	fp, sp, #24
   10df8:	mov	r9, r0
   10dfc:	movw	r0, #45364	; 0xb134
   10e00:	mov	r8, r1
   10e04:	mov	r1, #4
   10e08:	movt	r0, #2
   10e0c:	add	r4, r0, r9, lsl #4
   10e10:	ldr	r0, [r4, #12]
   10e14:	add	r0, r0, #1
   10e18:	bl	138f0 <__assert_fail@plt+0x2bfc>
   10e1c:	ldr	r1, [r4, #12]
   10e20:	cmp	r1, #1
   10e24:	blt	10e74 <__assert_fail@plt+0x180>
   10e28:	movw	ip, #5052	; 0x13bc
   10e2c:	rsb	r3, r9, #1
   10e30:	mov	r4, #0
   10e34:	mov	r2, #0
   10e38:	mov	r7, #0
   10e3c:	movt	ip, #3
   10e40:	ldr	r6, [ip, r9, lsl #2]
   10e44:	add	r7, r7, #1
   10e48:	ldr	r5, [r6, r4]!
   10e4c:	add	r4, r4, #8
   10e50:	add	r5, r5, r3
   10e54:	ldrb	r5, [r5, #12]
   10e58:	cmp	r5, #0
   10e5c:	strne	r6, [r0, r2, lsl #2]
   10e60:	addne	r2, r2, #1
   10e64:	cmp	r7, r1
   10e68:	blt	10e40 <__assert_fail@plt+0x14c>
   10e6c:	str	r2, [r8]
   10e70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e74:	mov	r2, #0
   10e78:	str	r2, [r8]
   10e7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e84:	add	fp, sp, #28
   10e88:	sub	sp, sp, #4
   10e8c:	movw	r4, #37060	; 0x90c4
   10e90:	ldr	r1, [r0]
   10e94:	mov	sl, r0
   10e98:	movw	r0, #45320	; 0xb108
   10e9c:	movt	r4, #2
   10ea0:	movt	r0, #2
   10ea4:	mov	r2, r4
   10ea8:	bl	14038 <error@@Base+0x210>
   10eac:	ldrb	r0, [r4, #11]
   10eb0:	cmp	r0, #0
   10eb4:	bne	1112c <__assert_fail@plt+0x438>
   10eb8:	movw	r4, #45364	; 0xb134
   10ebc:	movw	r1, #45320	; 0xb108
   10ec0:	movt	r4, #2
   10ec4:	movt	r1, #2
   10ec8:	mov	r0, r4
   10ecc:	bl	13088 <__assert_fail@plt+0x2394>
   10ed0:	ldr	r0, [r4, #12]
   10ed4:	mov	r1, #8
   10ed8:	add	r0, r0, #1
   10edc:	bl	138f0 <__assert_fail@plt+0x2bfc>
   10ee0:	ldr	r5, [r4]
   10ee4:	movw	r9, #5052	; 0x13bc
   10ee8:	movt	r9, #3
   10eec:	str	r0, [r9]
   10ef0:	cmp	r5, #0
   10ef4:	beq	10f68 <__assert_fail@plt+0x274>
   10ef8:	movw	r7, #45412	; 0xb164
   10efc:	mov	r8, #0
   10f00:	mov	r4, #1
   10f04:	movt	r7, #2
   10f08:	b	10f28 <__assert_fail@plt+0x234>
   10f0c:	strb	r4, [r6, #12]
   10f10:	ldr	r0, [r9]
   10f14:	str	r6, [r0, r8]
   10f18:	add	r8, r8, #8
   10f1c:	ldr	r5, [r5, #4]
   10f20:	cmp	r5, #0
   10f24:	beq	10f68 <__assert_fail@plt+0x274>
   10f28:	ldr	r1, [r5, #8]
   10f2c:	mov	r0, r7
   10f30:	bl	12e08 <__assert_fail@plt+0x2114>
   10f34:	mov	r6, r0
   10f38:	cmp	r0, #0
   10f3c:	bne	10f0c <__assert_fail@plt+0x218>
   10f40:	mov	r0, #1
   10f44:	mov	r1, #16
   10f48:	bl	138f0 <__assert_fail@plt+0x2bfc>
   10f4c:	mov	r6, r0
   10f50:	ldr	r0, [r5, #8]
   10f54:	mov	r1, r6
   10f58:	str	r0, [r6, #8]
   10f5c:	mov	r0, r7
   10f60:	bl	12e98 <__assert_fail@plt+0x21a4>
   10f64:	b	10f0c <__assert_fail@plt+0x218>
   10f68:	movw	r0, #45320	; 0xb108
   10f6c:	ldr	r1, [sl, #4]
   10f70:	movw	r2, #37060	; 0x90c4
   10f74:	movt	r0, #2
   10f78:	movt	r2, #2
   10f7c:	add	r5, r0, #16
   10f80:	mov	r0, r5
   10f84:	bl	14038 <error@@Base+0x210>
   10f88:	movw	sl, #45364	; 0xb134
   10f8c:	mov	r1, r5
   10f90:	movt	sl, #2
   10f94:	add	r0, sl, #16
   10f98:	bl	13088 <__assert_fail@plt+0x2394>
   10f9c:	ldr	r0, [sl, #28]
   10fa0:	mov	r1, #8
   10fa4:	add	r0, r0, #1
   10fa8:	bl	138f0 <__assert_fail@plt+0x2bfc>
   10fac:	ldr	r7, [sl, #16]
   10fb0:	str	r0, [r9, #4]
   10fb4:	cmp	r7, #0
   10fb8:	beq	1102c <__assert_fail@plt+0x338>
   10fbc:	movw	r5, #45412	; 0xb164
   10fc0:	mov	r4, #0
   10fc4:	mov	r8, #1
   10fc8:	movt	r5, #2
   10fcc:	b	10fec <__assert_fail@plt+0x2f8>
   10fd0:	strb	r8, [r6, #13]
   10fd4:	ldr	r0, [r9, #4]
   10fd8:	str	r6, [r0, r4]
   10fdc:	add	r4, r4, #8
   10fe0:	ldr	r7, [r7, #4]
   10fe4:	cmp	r7, #0
   10fe8:	beq	1102c <__assert_fail@plt+0x338>
   10fec:	ldr	r1, [r7, #8]
   10ff0:	mov	r0, r5
   10ff4:	bl	12e08 <__assert_fail@plt+0x2114>
   10ff8:	mov	r6, r0
   10ffc:	cmp	r0, #0
   11000:	bne	10fd0 <__assert_fail@plt+0x2dc>
   11004:	mov	r0, #1
   11008:	mov	r1, #16
   1100c:	bl	138f0 <__assert_fail@plt+0x2bfc>
   11010:	mov	r6, r0
   11014:	ldr	r0, [r7, #8]
   11018:	mov	r1, r6
   1101c:	str	r0, [r6, #8]
   11020:	mov	r0, r5
   11024:	bl	12e98 <__assert_fail@plt+0x21a4>
   11028:	b	10fd0 <__assert_fail@plt+0x2dc>
   1102c:	ldr	r0, [sl, #12]
   11030:	mov	r1, #4
   11034:	add	r0, r0, #1
   11038:	bl	138f0 <__assert_fail@plt+0x2bfc>
   1103c:	ldr	r1, [sl, #12]
   11040:	cmp	r1, #1
   11044:	blt	110a0 <__assert_fail@plt+0x3ac>
   11048:	mov	r3, #0
   1104c:	mov	r2, #0
   11050:	ldr	r7, [r9]
   11054:	ldr	r6, [r7, r3]!
   11058:	add	r3, r3, #8
   1105c:	ldrb	r6, [r6, #13]
   11060:	cmp	r6, #0
   11064:	strne	r7, [r0, r2, lsl #2]
   11068:	addne	r2, r2, #1
   1106c:	subs	r1, r1, #1
   11070:	bne	11050 <__assert_fail@plt+0x35c>
   11074:	movw	r1, #5040	; 0x13b0
   11078:	cmp	r2, #65536	; 0x10000
   1107c:	movt	r1, #3
   11080:	str	r0, [r1]
   11084:	movw	r0, #5044	; 0x13b4
   11088:	movt	r0, #3
   1108c:	str	r2, [r0]
   11090:	blt	110bc <__assert_fail@plt+0x3c8>
   11094:	movw	r0, #18670	; 0x48ee
   11098:	movt	r0, #1
   1109c:	bl	13e28 <error@@Base>
   110a0:	movw	r1, #5040	; 0x13b0
   110a4:	movt	r1, #3
   110a8:	str	r0, [r1]
   110ac:	movw	r0, #5044	; 0x13b4
   110b0:	mov	r1, #0
   110b4:	movt	r0, #3
   110b8:	str	r1, [r0]
   110bc:	ldr	r0, [sl, #28]
   110c0:	mov	r1, #4
   110c4:	add	r0, r0, #1
   110c8:	bl	138f0 <__assert_fail@plt+0x2bfc>
   110cc:	ldr	r1, [sl, #28]
   110d0:	cmp	r1, #1
   110d4:	blt	11108 <__assert_fail@plt+0x414>
   110d8:	mov	r3, #0
   110dc:	mov	r2, #0
   110e0:	ldr	r7, [r9, #4]
   110e4:	ldr	r6, [r7, r3]!
   110e8:	add	r3, r3, #8
   110ec:	ldrb	r6, [r6, #12]
   110f0:	cmp	r6, #0
   110f4:	strne	r7, [r0, r2, lsl #2]
   110f8:	addne	r2, r2, #1
   110fc:	subs	r1, r1, #1
   11100:	bne	110e0 <__assert_fail@plt+0x3ec>
   11104:	b	1110c <__assert_fail@plt+0x418>
   11108:	mov	r2, #0
   1110c:	movw	r1, #45352	; 0xb128
   11110:	movt	r1, #2
   11114:	str	r0, [r1]
   11118:	movw	r0, #45356	; 0xb12c
   1111c:	movt	r0, #2
   11120:	str	r2, [r0]
   11124:	sub	sp, fp, #28
   11128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1112c:	movw	r0, #18644	; 0x48d4
   11130:	movt	r0, #1
   11134:	bl	13e28 <error@@Base>
   11138:	push	{fp, lr}
   1113c:	mov	fp, sp
   11140:	cmp	r1, #0
   11144:	beq	111b4 <__assert_fail@plt+0x4c0>
   11148:	ldr	r3, [r1, #8]
   1114c:	mov	ip, r0
   11150:	mov	r0, #0
   11154:	rsb	lr, r3, #0
   11158:	cmp	lr, ip
   1115c:	bge	11180 <__assert_fail@plt+0x48c>
   11160:	sub	lr, ip, #1
   11164:	add	r0, r3, lr
   11168:	ldr	r3, [r1, #12]
   1116c:	bic	r0, r0, #1
   11170:	add	r0, r3, r0
   11174:	ldrh	r0, [r0]
   11178:	str	lr, [r2]
   1117c:	ldr	r3, [r1, #8]
   11180:	cmp	r3, ip
   11184:	pople	{fp, pc}
   11188:	ldr	r1, [r1, #12]
   1118c:	add	ip, ip, #1
   11190:	add	r3, r3, ip
   11194:	bic	r3, r3, #1
   11198:	add	r1, r1, r3
   1119c:	ldrh	r1, [r1]
   111a0:	add	r1, r1, #1
   111a4:	cmp	r1, r0
   111a8:	movcs	r0, r1
   111ac:	strcs	ip, [r2]
   111b0:	pop	{fp, pc}
   111b4:	mov	r0, #0
   111b8:	pop	{fp, pc}
   111bc:	push	{r4, r5, r6, sl, fp, lr}
   111c0:	add	fp, sp, #16
   111c4:	ldr	r2, [r1]
   111c8:	cmp	r2, #0
   111cc:	beq	11214 <__assert_fail@plt+0x520>
   111d0:	ldr	r5, [r2, #8]
   111d4:	mov	r3, #0
   111d8:	rsb	r4, r5, #0
   111dc:	cmp	r4, r0
   111e0:	blt	1121c <__assert_fail@plt+0x528>
   111e4:	cmp	r5, r0
   111e8:	ble	1123c <__assert_fail@plt+0x548>
   111ec:	ldr	r2, [r2, #12]
   111f0:	add	r5, r0, r5
   111f4:	add	r5, r5, #1
   111f8:	bic	r5, r5, #1
   111fc:	add	r2, r2, r5
   11200:	ldrh	r2, [r2]
   11204:	add	r2, r2, #1
   11208:	cmp	r2, r3
   1120c:	movcc	r2, r3
   11210:	b	11240 <__assert_fail@plt+0x54c>
   11214:	mov	r2, #0
   11218:	b	11240 <__assert_fail@plt+0x54c>
   1121c:	ldr	r4, [r2, #12]
   11220:	add	r3, r0, r5
   11224:	sub	r3, r3, #1
   11228:	bic	r3, r3, #1
   1122c:	add	r3, r4, r3
   11230:	ldrh	r3, [r3]
   11234:	cmp	r5, r0
   11238:	bgt	111ec <__assert_fail@plt+0x4f8>
   1123c:	mov	r2, r3
   11240:	movw	r3, #45356	; 0xb12c
   11244:	add	r4, r2, r0
   11248:	movt	r3, #2
   1124c:	ldr	ip, [r3]
   11250:	movw	r3, #5044	; 0x13b4
   11254:	movt	r3, #3
   11258:	ldr	lr, [r3]
   1125c:	cmp	r2, lr
   11260:	cmplt	r4, ip
   11264:	blt	112b0 <__assert_fail@plt+0x5bc>
   11268:	mov	r3, r2
   1126c:	cmp	r3, lr
   11270:	movweq	r6, #5048	; 0x13b8
   11274:	addeq	r2, r0, #1
   11278:	movteq	r6, #3
   1127c:	streq	r2, [r6]
   11280:	cmp	r4, ip
   11284:	movweq	r6, #5036	; 0x13ac
   11288:	subeq	r2, r0, #1
   1128c:	movteq	r6, #3
   11290:	streq	r2, [r6]
   11294:	ldr	r2, [r1, #8]
   11298:	ldr	r1, [r1, #12]
   1129c:	add	r0, r2, r0
   112a0:	bic	r0, r0, #1
   112a4:	add	r0, r1, r0
   112a8:	strh	r3, [r0]
   112ac:	pop	{r4, r5, r6, sl, fp, pc}
   112b0:	movw	r3, #45352	; 0xb128
   112b4:	movt	r3, #2
   112b8:	ldr	r3, [r3]
   112bc:	add	r4, r3, r0, lsl #2
   112c0:	movw	r3, #5040	; 0x13b0
   112c4:	movt	r3, #3
   112c8:	ldr	r5, [r3]
   112cc:	ldr	r3, [r4, r2, lsl #2]
   112d0:	ldr	r6, [r5, r2, lsl #2]
   112d4:	ldr	r3, [r3]
   112d8:	ldr	r6, [r6]
   112dc:	cmp	r6, r3
   112e0:	bne	1130c <__assert_fail@plt+0x618>
   112e4:	add	r3, r2, #1
   112e8:	cmp	r3, lr
   112ec:	bge	11304 <__assert_fail@plt+0x610>
   112f0:	add	r2, r0, r2
   112f4:	add	r2, r2, #1
   112f8:	cmp	r2, ip
   112fc:	mov	r2, r3
   11300:	blt	112cc <__assert_fail@plt+0x5d8>
   11304:	add	r4, r0, r3
   11308:	b	1126c <__assert_fail@plt+0x578>
   1130c:	add	r4, r0, r2
   11310:	b	11268 <__assert_fail@plt+0x574>
   11314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11318:	add	fp, sp, #28
   1131c:	sub	sp, sp, #4
   11320:	movw	r0, #45356	; 0xb12c
   11324:	movw	r9, #5044	; 0x13b4
   11328:	movw	r7, #5036	; 0x13ac
   1132c:	movw	r4, #5048	; 0x13b8
   11330:	movt	r0, #2
   11334:	movt	r9, #3
   11338:	movt	r7, #3
   1133c:	movt	r4, #3
   11340:	ldr	r0, [r0]
   11344:	ldr	r1, [r9]
   11348:	str	r0, [r7]
   1134c:	rsb	r2, r1, #0
   11350:	sub	r0, r0, r1
   11354:	cmp	r0, r2
   11358:	str	r2, [r4]
   1135c:	blt	11408 <__assert_fail@plt+0x714>
   11360:	movw	sl, #45396	; 0xb154
   11364:	mvn	r8, #0
   11368:	movt	sl, #2
   1136c:	b	11390 <__assert_fail@plt+0x69c>
   11370:	movw	r1, #45356	; 0xb12c
   11374:	ldr	r0, [r9]
   11378:	movt	r1, #2
   1137c:	ldr	r1, [r1]
   11380:	sub	r0, r1, r0
   11384:	ldr	r1, [r4]
   11388:	cmp	r1, r0
   1138c:	bgt	11408 <__assert_fail@plt+0x714>
   11390:	mov	r0, #1
   11394:	mov	r1, #16
   11398:	mov	r6, r8
   1139c:	bl	138f0 <__assert_fail@plt+0x2bfc>
   113a0:	add	r8, r8, #1
   113a4:	mov	r5, r0
   113a8:	mov	r1, #2
   113ac:	str	r8, [r0, #8]
   113b0:	add	r0, r6, #2
   113b4:	bl	138f0 <__assert_fail@plt+0x2bfc>
   113b8:	str	r0, [r5, #12]
   113bc:	mov	r0, sl
   113c0:	mov	r1, r5
   113c4:	bl	11e08 <__assert_fail@plt+0x1114>
   113c8:	mvn	r6, r6
   113cc:	cmp	r8, r6
   113d0:	bge	113e4 <__assert_fail@plt+0x6f0>
   113d4:	b	11370 <__assert_fail@plt+0x67c>
   113d8:	add	r6, r6, #2
   113dc:	cmp	r6, r8
   113e0:	bgt	11370 <__assert_fail@plt+0x67c>
   113e4:	ldr	r0, [r4]
   113e8:	cmp	r6, r0
   113ec:	blt	113d8 <__assert_fail@plt+0x6e4>
   113f0:	ldr	r0, [r7]
   113f4:	cmp	r6, r0
   113f8:	movle	r0, r6
   113fc:	movle	r1, r5
   11400:	blle	111bc <__assert_fail@plt+0x4c8>
   11404:	b	113d8 <__assert_fail@plt+0x6e4>
   11408:	sub	sp, fp, #28
   1140c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11410:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11414:	add	fp, sp, #24
   11418:	movw	r0, #45396	; 0xb154
   1141c:	movt	r0, #2
   11420:	ldr	r4, [r0, #4]
   11424:	cmp	r4, #0
   11428:	beq	11590 <__assert_fail@plt+0x89c>
   1142c:	movw	r0, #5044	; 0x13b4
   11430:	movw	r1, #45356	; 0xb12c
   11434:	mov	r2, #1
   11438:	movt	r0, #3
   1143c:	movt	r1, #2
   11440:	ldr	r0, [r0]
   11444:	ldr	r1, [r1]
   11448:	sub	lr, r1, r0
   1144c:	movw	r0, #5040	; 0x13b0
   11450:	movt	r0, #3
   11454:	ldr	r0, [r0]
   11458:	sub	ip, r0, #8
   1145c:	sub	r1, r0, #4
   11460:	b	11470 <__assert_fail@plt+0x77c>
   11464:	ldr	r4, [r0]
   11468:	cmp	r4, #0
   1146c:	beq	11590 <__assert_fail@plt+0x89c>
   11470:	mov	r0, r4
   11474:	ldr	r4, [r4]
   11478:	ldr	r3, [r0, #8]
   1147c:	ldr	r5, [r0, #12]
   11480:	cmp	r4, #0
   11484:	add	r3, r3, lr
   11488:	bic	r3, r3, #1
   1148c:	add	r3, r5, r3
   11490:	ldrh	r3, [r3]
   11494:	beq	11508 <__assert_fail@plt+0x814>
   11498:	ldr	r5, [r4, #8]
   1149c:	mov	r7, #0
   114a0:	rsb	r6, r5, #0
   114a4:	cmp	lr, r6
   114a8:	mov	r6, lr
   114ac:	ble	114c8 <__assert_fail@plt+0x7d4>
   114b0:	sub	r6, lr, #1
   114b4:	add	r7, r5, r6
   114b8:	bic	r8, r7, #1
   114bc:	ldr	r7, [r4, #12]
   114c0:	add	r7, r7, r8
   114c4:	ldrh	r7, [r7]
   114c8:	cmp	r5, lr
   114cc:	ble	11518 <__assert_fail@plt+0x824>
   114d0:	add	lr, lr, #1
   114d4:	add	r5, r5, lr
   114d8:	bic	r8, r5, #1
   114dc:	ldr	r5, [r4, #12]
   114e0:	add	r5, r5, r8
   114e4:	ldrh	r5, [r5]
   114e8:	add	r5, r5, #1
   114ec:	cmp	r5, r7
   114f0:	movcs	r6, lr
   114f4:	movcc	r5, r7
   114f8:	mov	lr, r6
   114fc:	cmp	r5, r3
   11500:	bge	11468 <__assert_fail@plt+0x774>
   11504:	b	11528 <__assert_fail@plt+0x834>
   11508:	mov	r5, #0
   1150c:	cmp	r5, r3
   11510:	bge	11468 <__assert_fail@plt+0x774>
   11514:	b	11528 <__assert_fail@plt+0x834>
   11518:	mov	lr, r6
   1151c:	mov	r5, r7
   11520:	cmp	r5, r3
   11524:	bge	11468 <__assert_fail@plt+0x774>
   11528:	mvn	r4, r5
   1152c:	sub	r6, r3, r5
   11530:	add	r4, r4, r3
   11534:	ands	r6, r6, #3
   11538:	beq	11550 <__assert_fail@plt+0x85c>
   1153c:	ldr	r7, [r1, r3, lsl #2]
   11540:	subs	r6, r6, #1
   11544:	sub	r3, r3, #1
   11548:	strb	r2, [r7, #4]
   1154c:	bne	1153c <__assert_fail@plt+0x848>
   11550:	cmp	r4, #3
   11554:	bcc	11464 <__assert_fail@plt+0x770>
   11558:	add	r4, ip, r3, lsl #2
   1155c:	ldr	r6, [r4, #4]
   11560:	sub	r3, r3, #4
   11564:	cmp	r3, r5
   11568:	strb	r2, [r6, #4]
   1156c:	ldr	r6, [r4]
   11570:	strb	r2, [r6, #4]
   11574:	ldr	r6, [r4, #-4]
   11578:	strb	r2, [r6, #4]
   1157c:	ldr	r6, [r4, #-8]
   11580:	sub	r4, r4, #16
   11584:	strb	r2, [r6, #4]
   11588:	bgt	1155c <__assert_fail@plt+0x868>
   1158c:	b	11464 <__assert_fail@plt+0x770>
   11590:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11598:	add	fp, sp, #28
   1159c:	sub	sp, sp, #4
   115a0:	mov	r9, r2
   115a4:	mov	sl, r1
   115a8:	mov	r6, r0
   115ac:	bl	12fa8 <__assert_fail@plt+0x22b4>
   115b0:	movw	r0, #8052	; 0x1f74
   115b4:	ldr	r0, [r6, r0]
   115b8:	cmp	r0, #1
   115bc:	blt	116d4 <__assert_fail@plt+0x9e0>
   115c0:	movw	r8, #53468	; 0xd0dc
   115c4:	movw	r0, #8048	; 0x1f70
   115c8:	mov	r4, #0
   115cc:	cmp	r9, #0
   115d0:	movt	r8, #2
   115d4:	add	r5, r6, r0
   115d8:	beq	11674 <__assert_fail@plt+0x980>
   115dc:	ldr	r0, [r5]
   115e0:	ldr	r0, [r0, r4, lsl #2]
   115e4:	ldr	r7, [r0, #12]
   115e8:	ldr	r6, [r0, #16]
   115ec:	mov	r0, r8
   115f0:	mov	r1, r7
   115f4:	mov	r2, r6
   115f8:	bl	12218 <__assert_fail@plt+0x1524>
   115fc:	mov	r0, sl
   11600:	mov	r1, r7
   11604:	mov	r2, r6
   11608:	bl	12218 <__assert_fail@plt+0x1524>
   1160c:	ldr	r0, [r5]
   11610:	ldr	r0, [r0, r4, lsl #2]
   11614:	ldr	r0, [r0, #8]
   11618:	bl	10c64 <strlen@plt>
   1161c:	add	r0, sl, r0, lsl #3
   11620:	mov	r1, r7
   11624:	mov	r2, r6
   11628:	bl	12218 <__assert_fail@plt+0x1524>
   1162c:	sub	r0, r7, r6
   11630:	mov	r1, #1
   11634:	clz	r0, r0
   11638:	lsr	r6, r0, #5
   1163c:	mov	r0, r9
   11640:	mov	r2, r6
   11644:	bl	12218 <__assert_fail@plt+0x1524>
   11648:	cmp	r7, #11
   1164c:	mov	r1, #1
   11650:	mov	r2, r6
   11654:	movge	r7, #11
   11658:	add	r0, r9, r7, lsl #3
   1165c:	bl	12218 <__assert_fail@plt+0x1524>
   11660:	ldr	r0, [r5, #4]
   11664:	add	r4, r4, #1
   11668:	cmp	r4, r0
   1166c:	blt	115dc <__assert_fail@plt+0x8e8>
   11670:	b	116d4 <__assert_fail@plt+0x9e0>
   11674:	ldr	r0, [r5]
   11678:	ldr	r0, [r0, r4, lsl #2]
   1167c:	ldr	r6, [r0, #12]
   11680:	ldr	r7, [r0, #16]
   11684:	mov	r0, r8
   11688:	mov	r1, r6
   1168c:	mov	r2, r7
   11690:	bl	12218 <__assert_fail@plt+0x1524>
   11694:	mov	r0, sl
   11698:	mov	r1, r6
   1169c:	mov	r2, r7
   116a0:	bl	12218 <__assert_fail@plt+0x1524>
   116a4:	ldr	r0, [r5]
   116a8:	ldr	r0, [r0, r4, lsl #2]
   116ac:	ldr	r0, [r0, #8]
   116b0:	bl	10c64 <strlen@plt>
   116b4:	add	r0, sl, r0, lsl #3
   116b8:	mov	r1, r6
   116bc:	mov	r2, r7
   116c0:	bl	12218 <__assert_fail@plt+0x1524>
   116c4:	ldr	r0, [r5, #4]
   116c8:	add	r4, r4, #1
   116cc:	cmp	r4, r0
   116d0:	blt	11674 <__assert_fail@plt+0x980>
   116d4:	sub	sp, fp, #28
   116d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e0:	add	fp, sp, #28
   116e4:	sub	sp, sp, #12
   116e8:	movw	r7, #45364	; 0xb134
   116ec:	movt	r7, #2
   116f0:	ldr	r0, [r7, #12]
   116f4:	cmp	r0, #1
   116f8:	blt	118e4 <__assert_fail@plt+0xbf0>
   116fc:	movw	r9, #53468	; 0xd0dc
   11700:	movw	r6, #5052	; 0x13bc
   11704:	mov	r8, #0
   11708:	movt	r9, #2
   1170c:	movt	r6, #3
   11710:	add	r1, r9, #936	; 0x3a8
   11714:	add	r4, r9, #928	; 0x3a0
   11718:	str	r1, [sp, #8]
   1171c:	add	r1, r9, #944	; 0x3b0
   11720:	str	r1, [sp, #4]
   11724:	add	r1, r9, #952	; 0x3b8
   11728:	str	r1, [sp]
   1172c:	cmp	r8, r0
   11730:	blt	11748 <__assert_fail@plt+0xa54>
   11734:	add	r8, r8, #1
   11738:	cmp	r8, r0
   1173c:	bge	118e4 <__assert_fail@plt+0xbf0>
   11740:	cmp	r8, r0
   11744:	bge	11734 <__assert_fail@plt+0xa40>
   11748:	ldr	r0, [r6]
   1174c:	mov	r1, #1
   11750:	add	r0, r0, r8, lsl #3
   11754:	ldrb	r0, [r0, #4]
   11758:	and	r5, r0, #1
   1175c:	mov	r0, r4
   11760:	eor	r2, r5, #1
   11764:	bl	12218 <__assert_fail@plt+0x1524>
   11768:	ldr	r0, [r7, #12]
   1176c:	add	sl, r8, #1
   11770:	cmp	sl, r0
   11774:	bge	118d8 <__assert_fail@plt+0xbe4>
   11778:	ldr	r0, [r6]
   1177c:	mov	r1, #1
   11780:	add	r0, r0, sl, lsl #3
   11784:	ldrb	r0, [r0, #4]
   11788:	and	r5, r5, r0
   1178c:	ldr	r0, [sp, #8]
   11790:	eor	r2, r5, #1
   11794:	bl	12218 <__assert_fail@plt+0x1524>
   11798:	ldr	r0, [r7, #12]
   1179c:	add	r1, r8, #2
   117a0:	cmp	r1, r0
   117a4:	bge	118d8 <__assert_fail@plt+0xbe4>
   117a8:	ldr	r0, [r6]
   117ac:	add	r0, r0, r1, lsl #3
   117b0:	mov	r1, #1
   117b4:	ldrb	r0, [r0, #4]
   117b8:	and	r5, r5, r0
   117bc:	ldr	r0, [sp, #4]
   117c0:	eor	r2, r5, #1
   117c4:	bl	12218 <__assert_fail@plt+0x1524>
   117c8:	ldr	r0, [r7, #12]
   117cc:	add	r1, r8, #3
   117d0:	cmp	r1, r0
   117d4:	bge	118d8 <__assert_fail@plt+0xbe4>
   117d8:	ldr	r0, [r6]
   117dc:	add	r0, r0, r1, lsl #3
   117e0:	mov	r1, #1
   117e4:	ldrb	r0, [r0, #4]
   117e8:	and	r5, r5, r0
   117ec:	ldr	r0, [sp]
   117f0:	eor	r2, r5, #1
   117f4:	bl	12218 <__assert_fail@plt+0x1524>
   117f8:	ldr	r0, [r7, #12]
   117fc:	add	r1, r8, #4
   11800:	cmp	r1, r0
   11804:	bge	118d8 <__assert_fail@plt+0xbe4>
   11808:	ldr	r0, [r6]
   1180c:	add	r0, r0, r1, lsl #3
   11810:	mov	r1, r9
   11814:	ldrb	r0, [r0, #4]
   11818:	and	r9, r5, r0
   1181c:	mov	r5, r1
   11820:	add	r0, r1, #960	; 0x3c0
   11824:	mov	r1, #1
   11828:	eor	r2, r9, #1
   1182c:	bl	12218 <__assert_fail@plt+0x1524>
   11830:	ldr	r0, [r7, #12]
   11834:	add	r1, r8, #5
   11838:	cmp	r1, r0
   1183c:	bge	118c4 <__assert_fail@plt+0xbd0>
   11840:	ldr	r0, [r6]
   11844:	add	r0, r0, r1, lsl #3
   11848:	mov	r1, #1
   1184c:	ldrb	r0, [r0, #4]
   11850:	and	r9, r9, r0
   11854:	add	r0, r5, #968	; 0x3c8
   11858:	eor	r2, r9, #1
   1185c:	bl	12218 <__assert_fail@plt+0x1524>
   11860:	ldr	r0, [r7, #12]
   11864:	add	r1, r8, #6
   11868:	cmp	r1, r0
   1186c:	bge	118c4 <__assert_fail@plt+0xbd0>
   11870:	ldr	r0, [r6]
   11874:	add	r0, r0, r1, lsl #3
   11878:	mov	r1, #1
   1187c:	ldrb	r0, [r0, #4]
   11880:	and	r9, r9, r0
   11884:	add	r0, r5, #976	; 0x3d0
   11888:	eor	r2, r9, #1
   1188c:	bl	12218 <__assert_fail@plt+0x1524>
   11890:	ldr	r0, [r7, #12]
   11894:	add	r1, r8, #7
   11898:	cmp	r1, r0
   1189c:	bge	118c4 <__assert_fail@plt+0xbd0>
   118a0:	ldr	r0, [r6]
   118a4:	add	r0, r0, r1, lsl #3
   118a8:	mov	r1, #1
   118ac:	ldrb	r0, [r0, #4]
   118b0:	and	r0, r9, r0
   118b4:	eor	r2, r0, #1
   118b8:	add	r0, r5, #984	; 0x3d8
   118bc:	bl	12218 <__assert_fail@plt+0x1524>
   118c0:	ldr	r0, [r7, #12]
   118c4:	mov	r8, sl
   118c8:	mov	r9, r5
   118cc:	cmp	r8, r0
   118d0:	blt	11740 <__assert_fail@plt+0xa4c>
   118d4:	b	118e4 <__assert_fail@plt+0xbf0>
   118d8:	mov	r8, sl
   118dc:	cmp	r8, r0
   118e0:	blt	11740 <__assert_fail@plt+0xa4c>
   118e4:	sub	sp, fp, #28
   118e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118f0:	add	fp, sp, #28
   118f4:	sub	sp, sp, #4
   118f8:	movw	r8, #45364	; 0xb134
   118fc:	movw	r9, #53468	; 0xd0dc
   11900:	movt	r8, #2
   11904:	movt	r9, #2
   11908:	ldr	r0, [r8, #12]
   1190c:	cmp	r0, #1
   11910:	blt	11974 <__assert_fail@plt+0xc80>
   11914:	movw	r6, #5052	; 0x13bc
   11918:	mov	r5, #0
   1191c:	movw	r7, #9048	; 0x2358
   11920:	add	r4, r9, #992	; 0x3e0
   11924:	movt	r6, #3
   11928:	ldr	r0, [r6]
   1192c:	ldr	r0, [r0, r5, lsl #3]
   11930:	ldr	r0, [r0, #8]
   11934:	bl	121d4 <__assert_fail@plt+0x14e0>
   11938:	ldr	r2, [r6]
   1193c:	cmp	r0, #0
   11940:	mov	r0, r4
   11944:	addeq	r0, r9, r7
   11948:	ldr	r1, [r2, r5, lsl #3]!
   1194c:	ldrb	r2, [r2, #4]
   11950:	ldr	r1, [r1, #8]
   11954:	clz	r2, r2
   11958:	lsr	r3, r2, #5
   1195c:	mov	r2, #1
   11960:	bl	1222c <__assert_fail@plt+0x1538>
   11964:	ldr	r0, [r8, #12]
   11968:	add	r5, r5, #1
   1196c:	cmp	r5, r0
   11970:	blt	11928 <__assert_fail@plt+0xc34>
   11974:	add	r0, r9, #992	; 0x3e0
   11978:	bl	12fa8 <__assert_fail@plt+0x22b4>
   1197c:	movw	r0, #9044	; 0x2354
   11980:	ldr	r0, [r9, r0]
   11984:	cmp	r0, #1
   11988:	blt	11a00 <__assert_fail@plt+0xd0c>
   1198c:	mov	r4, #0
   11990:	movw	sl, #9040	; 0x2350
   11994:	add	r5, r9, #8
   11998:	mov	r8, r9
   1199c:	ldr	r0, [r8, sl]!
   119a0:	ldr	r0, [r0, r4, lsl #2]
   119a4:	ldr	r6, [r0, #12]
   119a8:	ldr	r7, [r0, #16]
   119ac:	mov	r0, r9
   119b0:	mov	r1, r6
   119b4:	mov	r2, r7
   119b8:	bl	12218 <__assert_fail@plt+0x1524>
   119bc:	mov	r0, r5
   119c0:	mov	r1, r6
   119c4:	mov	r2, r7
   119c8:	bl	12218 <__assert_fail@plt+0x1524>
   119cc:	ldr	r0, [r8]
   119d0:	ldr	r0, [r0, r4, lsl #2]
   119d4:	ldr	r0, [r0, #8]
   119d8:	bl	10c64 <strlen@plt>
   119dc:	add	r0, r5, r0, lsl #3
   119e0:	mov	r1, r6
   119e4:	mov	r2, r7
   119e8:	bl	12218 <__assert_fail@plt+0x1524>
   119ec:	movw	r0, #9044	; 0x2354
   119f0:	add	r4, r4, #1
   119f4:	ldr	r0, [r9, r0]
   119f8:	cmp	r4, r0
   119fc:	blt	11998 <__assert_fail@plt+0xca4>
   11a00:	movw	r0, #9048	; 0x2358
   11a04:	add	r0, r9, r0
   11a08:	bl	12fa8 <__assert_fail@plt+0x22b4>
   11a0c:	movw	r0, #17100	; 0x42cc
   11a10:	ldr	r0, [r9, r0]
   11a14:	cmp	r0, #1
   11a18:	blt	11acc <__assert_fail@plt+0xdd8>
   11a1c:	mov	r5, #0
   11a20:	add	sl, r9, #416	; 0x1a0
   11a24:	add	r6, r9, #824	; 0x338
   11a28:	movw	r0, #17096	; 0x42c8
   11a2c:	mov	r8, r9
   11a30:	ldr	r0, [r9, r0]!
   11a34:	ldr	r0, [r0, r5, lsl #2]
   11a38:	ldr	r7, [r0, #12]
   11a3c:	ldr	r4, [r0, #16]
   11a40:	mov	r0, r8
   11a44:	mov	r1, r7
   11a48:	mov	r2, r4
   11a4c:	bl	12218 <__assert_fail@plt+0x1524>
   11a50:	mov	r0, sl
   11a54:	mov	r1, r7
   11a58:	mov	r2, r4
   11a5c:	bl	12218 <__assert_fail@plt+0x1524>
   11a60:	ldr	r0, [r9]
   11a64:	mov	r9, r8
   11a68:	ldr	r0, [r0, r5, lsl #2]
   11a6c:	ldr	r0, [r0, #8]
   11a70:	bl	10c64 <strlen@plt>
   11a74:	add	r0, sl, r0, lsl #3
   11a78:	mov	r1, r7
   11a7c:	mov	r2, r4
   11a80:	bl	12218 <__assert_fail@plt+0x1524>
   11a84:	sub	r0, r7, r4
   11a88:	mov	r1, #1
   11a8c:	clz	r0, r0
   11a90:	lsr	r4, r0, #5
   11a94:	mov	r0, r6
   11a98:	mov	r2, r4
   11a9c:	bl	12218 <__assert_fail@plt+0x1524>
   11aa0:	cmp	r7, #11
   11aa4:	mov	r1, #1
   11aa8:	mov	r2, r4
   11aac:	movge	r7, #11
   11ab0:	add	r0, r6, r7, lsl #3
   11ab4:	bl	12218 <__assert_fail@plt+0x1524>
   11ab8:	movw	r0, #17100	; 0x42cc
   11abc:	add	r5, r5, #1
   11ac0:	ldr	r0, [r8, r0]
   11ac4:	cmp	r5, r0
   11ac8:	blt	11a28 <__assert_fail@plt+0xd34>
   11acc:	sub	sp, fp, #28
   11ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad4:	b	116dc <__assert_fail@plt+0x9e8>
   11ad8:	push	{fp, lr}
   11adc:	mov	fp, sp
   11ae0:	sub	sp, sp, #8
   11ae4:	movw	r2, #18694	; 0x4906
   11ae8:	movw	r3, #37036	; 0x90ac
   11aec:	str	r0, [sp, #4]
   11af0:	add	r0, sp, #4
   11af4:	mov	r4, r1
   11af8:	movt	r2, #1
   11afc:	movt	r3, #2
   11b00:	bl	13b10 <__assert_fail@plt+0x2e1c>
   11b04:	ldr	r0, [sp, #4]
   11b08:	bic	r0, r0, #1
   11b0c:	cmp	r0, #2
   11b10:	bne	11da0 <__assert_fail@plt+0x10ac>
   11b14:	movw	r0, #45360	; 0xb130
   11b18:	movt	r0, #2
   11b1c:	ldr	r0, [r0]
   11b20:	bl	12070 <__assert_fail@plt+0x137c>
   11b24:	mov	r0, r4
   11b28:	str	r4, [sp]
   11b2c:	bl	10e80 <__assert_fail@plt+0x18c>
   11b30:	movw	r0, #45356	; 0xb12c
   11b34:	movw	sl, #5044	; 0x13b4
   11b38:	movw	r4, #5036	; 0x13ac
   11b3c:	movw	r8, #5048	; 0x13b8
   11b40:	movt	r0, #2
   11b44:	movt	sl, #3
   11b48:	movt	r4, #3
   11b4c:	movt	r8, #3
   11b50:	ldr	r1, [r0]
   11b54:	ldr	r2, [sl]
   11b58:	rsb	r0, r2, #0
   11b5c:	sub	r3, r1, r2
   11b60:	str	r1, [r4]
   11b64:	cmp	r3, r0
   11b68:	str	r0, [r8]
   11b6c:	blt	11c18 <__assert_fail@plt+0xf24>
   11b70:	movw	r5, #45396	; 0xb154
   11b74:	mvn	r9, #0
   11b78:	movt	r5, #2
   11b7c:	b	11ba0 <__assert_fail@plt+0xeac>
   11b80:	movw	r0, #45356	; 0xb12c
   11b84:	ldr	r2, [sl]
   11b88:	ldr	r3, [r8]
   11b8c:	movt	r0, #2
   11b90:	ldr	r1, [r0]
   11b94:	sub	r0, r1, r2
   11b98:	cmp	r3, r0
   11b9c:	bgt	11c18 <__assert_fail@plt+0xf24>
   11ba0:	mov	r0, #1
   11ba4:	mov	r1, #16
   11ba8:	mov	r7, r9
   11bac:	bl	138f0 <__assert_fail@plt+0x2bfc>
   11bb0:	add	r9, r9, #1
   11bb4:	mov	r6, r0
   11bb8:	mov	r1, #2
   11bbc:	str	r9, [r0, #8]
   11bc0:	add	r0, r7, #2
   11bc4:	bl	138f0 <__assert_fail@plt+0x2bfc>
   11bc8:	str	r0, [r6, #12]
   11bcc:	mov	r0, r5
   11bd0:	mov	r1, r6
   11bd4:	bl	11e08 <__assert_fail@plt+0x1114>
   11bd8:	mvn	r7, r7
   11bdc:	cmp	r9, r7
   11be0:	bge	11bf4 <__assert_fail@plt+0xf00>
   11be4:	b	11b80 <__assert_fail@plt+0xe8c>
   11be8:	add	r7, r7, #2
   11bec:	cmp	r7, r9
   11bf0:	bgt	11b80 <__assert_fail@plt+0xe8c>
   11bf4:	ldr	r0, [r8]
   11bf8:	cmp	r7, r0
   11bfc:	blt	11be8 <__assert_fail@plt+0xef4>
   11c00:	ldr	r0, [r4]
   11c04:	cmp	r7, r0
   11c08:	movle	r0, r7
   11c0c:	movle	r1, r6
   11c10:	blle	111bc <__assert_fail@plt+0x4c8>
   11c14:	b	11be8 <__assert_fail@plt+0xef4>
   11c18:	movw	r0, #45396	; 0xb154
   11c1c:	movt	r0, #2
   11c20:	ldr	r0, [r0, #4]
   11c24:	cmp	r0, #0
   11c28:	beq	11d74 <__assert_fail@plt+0x1080>
   11c2c:	sub	r4, r1, r2
   11c30:	movw	r1, #5040	; 0x13b0
   11c34:	mov	r3, #1
   11c38:	movt	r1, #3
   11c3c:	ldr	r1, [r1]
   11c40:	sub	ip, r1, #8
   11c44:	sub	r2, r1, #4
   11c48:	b	11c54 <__assert_fail@plt+0xf60>
   11c4c:	cmp	r0, #0
   11c50:	beq	11d74 <__assert_fail@plt+0x1080>
   11c54:	mov	r1, r0
   11c58:	ldr	r0, [r0]
   11c5c:	ldr	r7, [r1, #8]
   11c60:	ldr	r1, [r1, #12]
   11c64:	cmp	r0, #0
   11c68:	add	r7, r7, r4
   11c6c:	bic	r7, r7, #1
   11c70:	add	r1, r1, r7
   11c74:	ldrh	r6, [r1]
   11c78:	beq	11cec <__assert_fail@plt+0xff8>
   11c7c:	ldr	r5, [r0, #8]
   11c80:	mov	r1, #0
   11c84:	rsb	r7, r5, #0
   11c88:	cmp	r4, r7
   11c8c:	mov	r7, r4
   11c90:	ble	11cac <__assert_fail@plt+0xfb8>
   11c94:	sub	r7, r4, #1
   11c98:	add	r1, r5, r7
   11c9c:	bic	lr, r1, #1
   11ca0:	ldr	r1, [r0, #12]
   11ca4:	add	r1, r1, lr
   11ca8:	ldrh	r1, [r1]
   11cac:	cmp	r5, r4
   11cb0:	ble	11cfc <__assert_fail@plt+0x1008>
   11cb4:	add	r4, r4, #1
   11cb8:	add	r5, r5, r4
   11cbc:	bic	lr, r5, #1
   11cc0:	ldr	r5, [r0, #12]
   11cc4:	add	r5, r5, lr
   11cc8:	ldrh	r5, [r5]
   11ccc:	add	r5, r5, #1
   11cd0:	cmp	r5, r1
   11cd4:	movcs	r7, r4
   11cd8:	movcc	r5, r1
   11cdc:	mov	r4, r7
   11ce0:	cmp	r5, r6
   11ce4:	bge	11c4c <__assert_fail@plt+0xf58>
   11ce8:	b	11d0c <__assert_fail@plt+0x1018>
   11cec:	mov	r5, #0
   11cf0:	cmp	r5, r6
   11cf4:	bge	11c4c <__assert_fail@plt+0xf58>
   11cf8:	b	11d0c <__assert_fail@plt+0x1018>
   11cfc:	mov	r4, r7
   11d00:	mov	r5, r1
   11d04:	cmp	r5, r6
   11d08:	bge	11c4c <__assert_fail@plt+0xf58>
   11d0c:	sub	r7, r6, r5
   11d10:	mvn	r1, r5
   11d14:	add	lr, r1, r6
   11d18:	ands	r7, r7, #3
   11d1c:	beq	11d34 <__assert_fail@plt+0x1040>
   11d20:	ldr	r1, [r2, r6, lsl #2]
   11d24:	subs	r7, r7, #1
   11d28:	sub	r6, r6, #1
   11d2c:	strb	r3, [r1, #4]
   11d30:	bne	11d20 <__assert_fail@plt+0x102c>
   11d34:	cmp	lr, #3
   11d38:	bcc	11c4c <__assert_fail@plt+0xf58>
   11d3c:	add	r1, ip, r6, lsl #2
   11d40:	ldr	r7, [r1, #4]
   11d44:	sub	r6, r6, #4
   11d48:	cmp	r6, r5
   11d4c:	strb	r3, [r7, #4]
   11d50:	ldr	r7, [r1]
   11d54:	strb	r3, [r7, #4]
   11d58:	ldr	r7, [r1, #-4]
   11d5c:	strb	r3, [r7, #4]
   11d60:	ldr	r7, [r1, #-8]
   11d64:	sub	r1, r1, #16
   11d68:	strb	r3, [r7, #4]
   11d6c:	bgt	11d40 <__assert_fail@plt+0x104c>
   11d70:	b	11c4c <__assert_fail@plt+0xf58>
   11d74:	bl	118ec <__assert_fail@plt+0xbf8>
   11d78:	ldr	r0, [sp, #4]
   11d7c:	mov	r1, #0
   11d80:	cmp	r0, #3
   11d84:	bne	11d90 <__assert_fail@plt+0x109c>
   11d88:	ldr	r0, [sp]
   11d8c:	ldr	r1, [r0, #8]
   11d90:	movw	r0, #53468	; 0xd0dc
   11d94:	movt	r0, #2
   11d98:	bl	126f0 <__assert_fail@plt+0x19fc>
   11d9c:	bl	13de8 <__assert_fail@plt+0x30f4>
   11da0:	movw	r0, #18755	; 0x4943
   11da4:	movt	r0, #1
   11da8:	bl	13e28 <error@@Base>
   11dac:	vmov.i32	q8, #0	; 0x00000000
   11db0:	vst1.32	{d16-d17}, [r0]
   11db4:	bx	lr
   11db8:	push	{r4, r5, fp, lr}
   11dbc:	add	fp, sp, #8
   11dc0:	mov	r4, r0
   11dc4:	ldr	r0, [r0]
   11dc8:	mov	r5, #0
   11dcc:	str	r5, [r1]
   11dd0:	cmp	r0, #0
   11dd4:	str	r0, [r1, #4]
   11dd8:	str	r1, [r4]
   11ddc:	addeq	r0, r4, #4
   11de0:	str	r1, [r0]
   11de4:	ldr	r0, [r4, #8]
   11de8:	cmp	r0, #0
   11dec:	beq	11df8 <__assert_fail@plt+0x1104>
   11df0:	bl	10b74 <free@plt>
   11df4:	str	r5, [r4, #8]
   11df8:	ldr	r0, [r4, #12]
   11dfc:	add	r0, r0, #1
   11e00:	str	r0, [r4, #12]
   11e04:	pop	{r4, r5, fp, pc}
   11e08:	push	{r4, r5, fp, lr}
   11e0c:	add	fp, sp, #8
   11e10:	mov	r4, r0
   11e14:	ldr	r0, [r0, #4]
   11e18:	mov	r5, #0
   11e1c:	mov	r2, r4
   11e20:	cmp	r0, #0
   11e24:	stm	r1, {r0, r5}
   11e28:	addne	r2, r0, #4
   11e2c:	str	r1, [r2]
   11e30:	str	r1, [r4, #4]
   11e34:	ldr	r0, [r4, #8]
   11e38:	cmp	r0, #0
   11e3c:	beq	11e48 <__assert_fail@plt+0x1154>
   11e40:	bl	10b74 <free@plt>
   11e44:	str	r5, [r4, #8]
   11e48:	ldr	r0, [r4, #12]
   11e4c:	add	r0, r0, #1
   11e50:	str	r0, [r4, #12]
   11e54:	pop	{r4, r5, fp, pc}
   11e58:	push	{r4, sl, fp, lr}
   11e5c:	add	fp, sp, #8
   11e60:	mov	r4, r0
   11e64:	ldr	r0, [r2]
   11e68:	mov	r3, r4
   11e6c:	cmp	r0, #0
   11e70:	stm	r1, {r0, r2}
   11e74:	addne	r3, r0, #4
   11e78:	str	r1, [r3]
   11e7c:	str	r1, [r2]
   11e80:	ldr	r0, [r4, #8]
   11e84:	cmp	r0, #0
   11e88:	beq	11e98 <__assert_fail@plt+0x11a4>
   11e8c:	bl	10b74 <free@plt>
   11e90:	mov	r0, #0
   11e94:	str	r0, [r4, #8]
   11e98:	ldr	r0, [r4, #12]
   11e9c:	add	r0, r0, #1
   11ea0:	str	r0, [r4, #12]
   11ea4:	pop	{r4, sl, fp, pc}
   11ea8:	push	{r4, sl, fp, lr}
   11eac:	add	fp, sp, #8
   11eb0:	mov	r4, r0
   11eb4:	mov	r0, r1
   11eb8:	cmp	r1, #0
   11ebc:	ldr	r3, [r0, #4]!
   11ec0:	moveq	r0, r4
   11ec4:	stm	r2, {r1, r3}
   11ec8:	str	r2, [r0]
   11ecc:	cmp	r3, #0
   11ed0:	addeq	r3, r4, #4
   11ed4:	str	r2, [r3]
   11ed8:	ldr	r0, [r4, #8]
   11edc:	cmp	r0, #0
   11ee0:	beq	11ef0 <__assert_fail@plt+0x11fc>
   11ee4:	bl	10b74 <free@plt>
   11ee8:	mov	r0, #0
   11eec:	str	r0, [r4, #8]
   11ef0:	ldr	r0, [r4, #12]
   11ef4:	add	r0, r0, #1
   11ef8:	str	r0, [r4, #12]
   11efc:	pop	{r4, sl, fp, pc}
   11f00:	push	{r4, r5, fp, lr}
   11f04:	add	fp, sp, #8
   11f08:	mov	r4, r0
   11f0c:	ldm	r1, {r0, r2}
   11f10:	cmp	r0, #0
   11f14:	beq	11f24 <__assert_fail@plt+0x1230>
   11f18:	str	r2, [r0, #4]
   11f1c:	ldr	r2, [r1, #4]
   11f20:	b	11f28 <__assert_fail@plt+0x1234>
   11f24:	str	r2, [r4]
   11f28:	cmp	r2, #0
   11f2c:	mov	r5, #0
   11f30:	addeq	r2, r4, #4
   11f34:	str	r0, [r2]
   11f38:	str	r5, [r1]
   11f3c:	str	r5, [r1, #4]
   11f40:	ldr	r0, [r4, #8]
   11f44:	cmp	r0, #0
   11f48:	beq	11f54 <__assert_fail@plt+0x1260>
   11f4c:	bl	10b74 <free@plt>
   11f50:	str	r5, [r4, #8]
   11f54:	ldr	r0, [r4, #12]
   11f58:	sub	r0, r0, #1
   11f5c:	str	r0, [r4, #12]
   11f60:	pop	{r4, r5, fp, pc}
   11f64:	push	{r4, sl, fp, lr}
   11f68:	add	fp, sp, #8
   11f6c:	mov	r4, r0
   11f70:	ldr	r0, [r0, #8]
   11f74:	cmp	r0, #0
   11f78:	beq	11f80 <__assert_fail@plt+0x128c>
   11f7c:	pop	{r4, sl, fp, pc}
   11f80:	ldr	r0, [r4, #12]
   11f84:	cmp	r0, #0
   11f88:	beq	11f7c <__assert_fail@plt+0x1288>
   11f8c:	mov	r1, #4
   11f90:	bl	138f0 <__assert_fail@plt+0x2bfc>
   11f94:	str	r0, [r4, #8]
   11f98:	ldr	r1, [r4]
   11f9c:	cmp	r1, #0
   11fa0:	beq	11f7c <__assert_fail@plt+0x1288>
   11fa4:	str	r1, [r0]
   11fa8:	ldr	r0, [r1, #4]
   11fac:	cmp	r0, #0
   11fb0:	popeq	{r4, sl, fp, pc}
   11fb4:	mov	r1, #4
   11fb8:	ldr	r2, [r4, #8]
   11fbc:	str	r0, [r2, r1]
   11fc0:	add	r1, r1, #4
   11fc4:	ldr	r0, [r0, #4]
   11fc8:	cmp	r0, #0
   11fcc:	bne	11fb8 <__assert_fail@plt+0x12c4>
   11fd0:	b	11f7c <__assert_fail@plt+0x1288>
   11fd4:	push	{r4, r5, r6, r7, fp, lr}
   11fd8:	add	fp, sp, #16
   11fdc:	ldr	r6, [r0]
   11fe0:	cmp	r6, #0
   11fe4:	beq	1206c <__assert_fail@plt+0x1378>
   11fe8:	mov	r4, r1
   11fec:	mov	r5, r0
   11ff0:	mov	r7, #0
   11ff4:	ldm	r6, {r0, r1}
   11ff8:	cmp	r0, #0
   11ffc:	bne	12030 <__assert_fail@plt+0x133c>
   12000:	b	1203c <__assert_fail@plt+0x1348>
   12004:	ldr	r0, [r5, #12]
   12008:	sub	r0, r0, #1
   1200c:	str	r0, [r5, #12]
   12010:	mov	r0, r6
   12014:	blx	r4
   12018:	ldr	r6, [r5]
   1201c:	cmp	r6, #0
   12020:	beq	1206c <__assert_fail@plt+0x1378>
   12024:	ldm	r6, {r0, r1}
   12028:	cmp	r0, #0
   1202c:	beq	1203c <__assert_fail@plt+0x1348>
   12030:	str	r1, [r0, #4]
   12034:	ldr	r1, [r6, #4]
   12038:	b	12040 <__assert_fail@plt+0x134c>
   1203c:	str	r1, [r5]
   12040:	cmp	r1, #0
   12044:	addeq	r1, r5, #4
   12048:	str	r0, [r1]
   1204c:	str	r7, [r6]
   12050:	str	r7, [r6, #4]
   12054:	ldr	r0, [r5, #8]
   12058:	cmp	r0, #0
   1205c:	beq	12004 <__assert_fail@plt+0x1310>
   12060:	bl	10b74 <free@plt>
   12064:	str	r7, [r5, #8]
   12068:	b	12004 <__assert_fail@plt+0x1310>
   1206c:	pop	{r4, r5, r6, r7, fp, pc}
   12070:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12074:	add	fp, sp, #24
   12078:	movw	r8, #45172	; 0xb074
   1207c:	mov	r1, r0
   12080:	movt	r8, #2
   12084:	ldrb	r0, [r8]
   12088:	cmp	r0, #1
   1208c:	beq	121c8 <__assert_fail@plt+0x14d4>
   12090:	cmp	r1, #0
   12094:	beq	12144 <__assert_fail@plt+0x1450>
   12098:	movw	r2, #37072	; 0x90d0
   1209c:	add	r4, r8, #4
   120a0:	movt	r2, #2
   120a4:	mov	r0, r4
   120a8:	bl	14038 <error@@Base+0x210>
   120ac:	add	r0, r8, #20
   120b0:	mov	r1, r4
   120b4:	bl	13088 <__assert_fail@plt+0x2394>
   120b8:	movw	r1, #2932	; 0xb74
   120bc:	mov	r0, r4
   120c0:	movt	r1, #1
   120c4:	bl	11fd4 <__assert_fail@plt+0x12e0>
   120c8:	ldr	r7, [r8, #20]
   120cc:	cmp	r7, #0
   120d0:	beq	121bc <__assert_fail@plt+0x14c8>
   120d4:	movw	r4, #37116	; 0x90fc
   120d8:	movw	r5, #18835	; 0x4993
   120dc:	movt	r4, #2
   120e0:	movt	r5, #1
   120e4:	b	12110 <__assert_fail@plt+0x141c>
   120e8:	mov	r0, #1
   120ec:	mov	r1, #12
   120f0:	bl	138f0 <__assert_fail@plt+0x2bfc>
   120f4:	mov	r1, r0
   120f8:	str	r6, [r0, #8]
   120fc:	mov	r0, r4
   12100:	bl	12e98 <__assert_fail@plt+0x21a4>
   12104:	ldr	r7, [r7, #4]
   12108:	cmp	r7, #0
   1210c:	beq	121bc <__assert_fail@plt+0x14c8>
   12110:	ldr	r6, [r7, #8]
   12114:	mov	r0, r4
   12118:	mov	r1, r6
   1211c:	bl	12e08 <__assert_fail@plt+0x2114>
   12120:	cmp	r0, #0
   12124:	beq	120e8 <__assert_fail@plt+0x13f4>
   12128:	mov	r0, r5
   1212c:	mov	r1, r6
   12130:	bl	13eb0 <error@@Base+0x88>
   12134:	ldr	r7, [r7, #4]
   12138:	cmp	r7, #0
   1213c:	bne	12110 <__assert_fail@plt+0x141c>
   12140:	b	121bc <__assert_fail@plt+0x14c8>
   12144:	movw	r5, #19272	; 0x4b48
   12148:	movw	r4, #37116	; 0x90fc
   1214c:	movw	r9, #18835	; 0x4993
   12150:	mov	r7, #0
   12154:	movt	r5, #1
   12158:	movt	r4, #2
   1215c:	movt	r9, #1
   12160:	b	1218c <__assert_fail@plt+0x1498>
   12164:	mov	r0, #1
   12168:	mov	r1, #12
   1216c:	bl	138f0 <__assert_fail@plt+0x2bfc>
   12170:	mov	r1, r0
   12174:	str	r6, [r0, #8]
   12178:	mov	r0, r4
   1217c:	bl	12e98 <__assert_fail@plt+0x21a4>
   12180:	add	r7, r7, #1
   12184:	cmp	r7, #110	; 0x6e
   12188:	beq	121bc <__assert_fail@plt+0x14c8>
   1218c:	ldr	r6, [r5, r7, lsl #2]
   12190:	mov	r0, r4
   12194:	mov	r1, r6
   12198:	bl	12e08 <__assert_fail@plt+0x2114>
   1219c:	cmp	r0, #0
   121a0:	beq	12164 <__assert_fail@plt+0x1470>
   121a4:	mov	r0, r9
   121a8:	mov	r1, r6
   121ac:	bl	13eb0 <error@@Base+0x88>
   121b0:	add	r7, r7, #1
   121b4:	cmp	r7, #110	; 0x6e
   121b8:	bne	1218c <__assert_fail@plt+0x1498>
   121bc:	mov	r0, #1
   121c0:	strb	r0, [r8]
   121c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   121c8:	movw	r0, #18779	; 0x495b
   121cc:	movt	r0, #1
   121d0:	bl	13e28 <error@@Base>
   121d4:	push	{fp, lr}
   121d8:	mov	fp, sp
   121dc:	mov	r1, r0
   121e0:	movw	r0, #45172	; 0xb074
   121e4:	movt	r0, #2
   121e8:	ldrb	r0, [r0]
   121ec:	cmp	r0, #0
   121f0:	beq	1220c <__assert_fail@plt+0x1518>
   121f4:	movw	r0, #37116	; 0x90fc
   121f8:	movt	r0, #2
   121fc:	bl	12e08 <__assert_fail@plt+0x2114>
   12200:	cmp	r0, #0
   12204:	movwne	r0, #1
   12208:	pop	{fp, pc}
   1220c:	movw	r0, #18809	; 0x4979
   12210:	movt	r0, #1
   12214:	bl	13e28 <error@@Base>
   12218:	ldm	r0, {r3, ip}
   1221c:	add	r2, ip, r2
   12220:	add	r1, r3, r1
   12224:	stm	r0, {r1, r2}
   12228:	bx	lr
   1222c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12230:	add	fp, sp, #24
   12234:	mov	r8, r3
   12238:	mov	r5, r2
   1223c:	mov	r4, r1
   12240:	mov	r6, r0
   12244:	bl	12e08 <__assert_fail@plt+0x2114>
   12248:	mov	r7, r0
   1224c:	cmp	r0, #0
   12250:	bne	1227c <__assert_fail@plt+0x1588>
   12254:	mov	r0, #1
   12258:	mov	r1, #20
   1225c:	bl	138f0 <__assert_fail@plt+0x2bfc>
   12260:	mov	r7, r0
   12264:	mov	r0, r4
   12268:	bl	10ba4 <strdup@plt>
   1226c:	str	r0, [r7, #8]
   12270:	mov	r0, r6
   12274:	mov	r1, r7
   12278:	bl	12e98 <__assert_fail@plt+0x21a4>
   1227c:	ldr	r0, [r7, #12]
   12280:	ldr	r1, [r7, #16]
   12284:	add	r0, r0, r5
   12288:	add	r1, r1, r8
   1228c:	str	r0, [r7, #12]
   12290:	str	r1, [r7, #16]
   12294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12298:	push	{r4, r5, r6, r7, fp, lr}
   1229c:	add	fp, sp, #16
   122a0:	sub	sp, sp, #8
   122a4:	mov	r6, r1
   122a8:	movw	r1, #19088	; 0x4a90
   122ac:	mov	r5, r0
   122b0:	movt	r1, #1
   122b4:	mov	r0, r6
   122b8:	bl	13994 <__assert_fail@plt+0x2ca0>
   122bc:	mov	r4, r0
   122c0:	movw	r0, #45208	; 0xb098
   122c4:	mov	r1, #99	; 0x63
   122c8:	movt	r0, #2
   122cc:	mov	r2, r4
   122d0:	bl	10b8c <fgets@plt>
   122d4:	cmp	r0, #0
   122d8:	beq	12478 <__assert_fail@plt+0x1784>
   122dc:	movw	r0, #45208	; 0xb098
   122e0:	movw	r1, #19712	; 0x4d00
   122e4:	mov	r2, #45	; 0x2d
   122e8:	movt	r0, #2
   122ec:	movt	r1, #1
   122f0:	bl	10c4c <bcmp@plt>
   122f4:	cmp	r0, #0
   122f8:	bne	12478 <__assert_fail@plt+0x1784>
   122fc:	movw	r0, #45208	; 0xb098
   12300:	mov	r1, #99	; 0x63
   12304:	mov	r2, r4
   12308:	movt	r0, #2
   1230c:	bl	10b8c <fgets@plt>
   12310:	cmp	r0, #0
   12314:	beq	12478 <__assert_fail@plt+0x1784>
   12318:	movw	r0, #45208	; 0xb098
   1231c:	movw	r1, #33503	; 0x82df
   12320:	mov	r2, #48	; 0x30
   12324:	movt	r0, #2
   12328:	movt	r1, #1
   1232c:	bl	10c4c <bcmp@plt>
   12330:	cmp	r0, #0
   12334:	bne	12478 <__assert_fail@plt+0x1784>
   12338:	movw	r0, #45208	; 0xb098
   1233c:	mov	r1, #99	; 0x63
   12340:	mov	r2, r4
   12344:	movt	r0, #2
   12348:	bl	10b8c <fgets@plt>
   1234c:	cmp	r0, #0
   12350:	beq	12478 <__assert_fail@plt+0x1784>
   12354:	movw	r0, #45208	; 0xb098
   12358:	movw	r1, #19891	; 0x4db3
   1235c:	add	r2, sp, #4
   12360:	movt	r0, #2
   12364:	movt	r1, #1
   12368:	bl	10c7c <__isoc99_sscanf@plt>
   1236c:	cmp	r0, #1
   12370:	bne	12478 <__assert_fail@plt+0x1784>
   12374:	movw	r0, #45208	; 0xb098
   12378:	mov	r1, #99	; 0x63
   1237c:	mov	r2, r4
   12380:	movt	r0, #2
   12384:	bl	10b8c <fgets@plt>
   12388:	cmp	r0, #0
   1238c:	beq	12478 <__assert_fail@plt+0x1784>
   12390:	movw	r0, #45208	; 0xb098
   12394:	movw	r1, #19891	; 0x4db3
   12398:	mov	r2, sp
   1239c:	movt	r0, #2
   123a0:	movt	r1, #1
   123a4:	bl	10c7c <__isoc99_sscanf@plt>
   123a8:	cmp	r0, #1
   123ac:	bne	12478 <__assert_fail@plt+0x1784>
   123b0:	movw	r0, #45208	; 0xb098
   123b4:	mov	r1, #99	; 0x63
   123b8:	mov	r2, r4
   123bc:	movt	r0, #2
   123c0:	bl	10b8c <fgets@plt>
   123c4:	cmp	r0, #0
   123c8:	beq	12478 <__assert_fail@plt+0x1784>
   123cc:	movw	r0, #45208	; 0xb098
   123d0:	mov	r1, #99	; 0x63
   123d4:	mov	r2, r4
   123d8:	movt	r0, #2
   123dc:	bl	10b8c <fgets@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	12478 <__assert_fail@plt+0x1784>
   123e8:	ldr	r2, [sp, #4]
   123ec:	ldm	r5, {r0, r1}
   123f0:	add	r0, r0, r2
   123f4:	ldr	r2, [sp]
   123f8:	add	r1, r1, r2
   123fc:	stm	r5, {r0, r1}
   12400:	add	r1, r5, #8
   12404:	mov	r0, r4
   12408:	bl	12494 <__assert_fail@plt+0x17a0>
   1240c:	mov	r7, r0
   12410:	add	r1, r5, #416	; 0x1a0
   12414:	mov	r0, r4
   12418:	bl	12494 <__assert_fail@plt+0x17a0>
   1241c:	mov	r6, r0
   12420:	add	r1, r5, #824	; 0x338
   12424:	mov	r0, r4
   12428:	bl	12494 <__assert_fail@plt+0x17a0>
   1242c:	ldr	r0, [sp, #4]
   12430:	cmp	r0, #1
   12434:	blt	12468 <__assert_fail@plt+0x1774>
   12438:	add	r1, r5, #920	; 0x398
   1243c:	mov	r0, r4
   12440:	bl	12494 <__assert_fail@plt+0x17a0>
   12444:	cmp	r7, #1
   12448:	addge	r1, r5, #992	; 0x3e0
   1244c:	movge	r0, r4
   12450:	blge	125c0 <__assert_fail@plt+0x18cc>
   12454:	cmp	r6, #1
   12458:	movwge	r0, #9048	; 0x2358
   1245c:	addge	r1, r5, r0
   12460:	movge	r0, r4
   12464:	blge	125c0 <__assert_fail@plt+0x18cc>
   12468:	mov	r0, r4
   1246c:	bl	13a0c <__assert_fail@plt+0x2d18>
   12470:	sub	sp, fp, #16
   12474:	pop	{r4, r5, r6, r7, fp, pc}
   12478:	movw	r0, #19760	; 0x4d30
   1247c:	movw	r1, #19778	; 0x4d42
   12480:	cmp	r6, #0
   12484:	movt	r0, #1
   12488:	movt	r1, #1
   1248c:	movne	r1, r6
   12490:	bl	13e68 <error@@Base+0x40>
   12494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12498:	add	fp, sp, #28
   1249c:	sub	sp, sp, #12
   124a0:	mov	r5, r0
   124a4:	movw	r0, #45208	; 0xb098
   124a8:	mov	r4, r1
   124ac:	mov	r1, #99	; 0x63
   124b0:	movt	r0, #2
   124b4:	mov	r2, r5
   124b8:	bl	10b8c <fgets@plt>
   124bc:	mov	r6, #0
   124c0:	cmp	r0, #0
   124c4:	beq	125b4 <__assert_fail@plt+0x18c0>
   124c8:	movw	r0, #45208	; 0xb098
   124cc:	mov	r1, #99	; 0x63
   124d0:	mov	r2, r5
   124d4:	movt	r0, #2
   124d8:	bl	10b8c <fgets@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	125b4 <__assert_fail@plt+0x18c0>
   124e4:	movw	r7, #45208	; 0xb098
   124e8:	mov	r1, #99	; 0x63
   124ec:	mov	r2, r5
   124f0:	movt	r7, #2
   124f4:	mov	r0, r7
   124f8:	bl	10b8c <fgets@plt>
   124fc:	cmp	r0, #0
   12500:	beq	125b4 <__assert_fail@plt+0x18c0>
   12504:	mov	r6, #0
   12508:	add	r9, sp, #8
   1250c:	add	sl, sp, #4
   12510:	add	r8, r7, #29
   12514:	b	12574 <__assert_fail@plt+0x1880>
   12518:	movw	r1, #19879	; 0x4da7
   1251c:	mov	r0, r8
   12520:	mov	r2, #8
   12524:	movt	r1, #1
   12528:	bl	10c4c <bcmp@plt>
   1252c:	ldr	r1, [sp, #8]
   12530:	cmp	r0, #0
   12534:	movwne	r0, #11
   12538:	moveq	r6, r1
   1253c:	mov	r2, r4
   12540:	ldr	r0, [r2, r0, lsl #3]!
   12544:	add	r0, r0, r1
   12548:	ldr	r1, [sp, #4]
   1254c:	str	r0, [r2]
   12550:	ldr	r0, [r2, #4]
   12554:	add	r0, r0, r1
   12558:	mov	r1, #99	; 0x63
   1255c:	str	r0, [r2, #4]
   12560:	mov	r0, r7
   12564:	mov	r2, r5
   12568:	bl	10b8c <fgets@plt>
   1256c:	cmp	r0, #0
   12570:	beq	125b4 <__assert_fail@plt+0x18c0>
   12574:	movw	r1, #19887	; 0x4daf
   12578:	mov	r0, r7
   1257c:	mov	r2, r9
   12580:	mov	r3, sl
   12584:	movt	r1, #1
   12588:	bl	10c7c <__isoc99_sscanf@plt>
   1258c:	cmp	r0, #2
   12590:	bne	125b4 <__assert_fail@plt+0x18c0>
   12594:	mov	r0, r8
   12598:	mov	r1, #0
   1259c:	mov	r2, #10
   125a0:	bl	10b5c <strtol@plt>
   125a4:	cmp	r0, #0
   125a8:	beq	12518 <__assert_fail@plt+0x1824>
   125ac:	ldr	r1, [sp, #8]
   125b0:	b	1253c <__assert_fail@plt+0x1848>
   125b4:	mov	r0, r6
   125b8:	sub	sp, fp, #28
   125bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c4:	add	fp, sp, #28
   125c8:	sub	sp, sp, #12
   125cc:	mov	r5, r0
   125d0:	movw	r0, #45208	; 0xb098
   125d4:	mov	r4, r1
   125d8:	mov	r1, #99	; 0x63
   125dc:	movt	r0, #2
   125e0:	mov	r2, r5
   125e4:	bl	10b8c <fgets@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	126e4 <__assert_fail@plt+0x19f0>
   125f0:	movw	r0, #45208	; 0xb098
   125f4:	mov	r1, #99	; 0x63
   125f8:	mov	r2, r5
   125fc:	movt	r0, #2
   12600:	bl	10b8c <fgets@plt>
   12604:	cmp	r0, #0
   12608:	beq	126e4 <__assert_fail@plt+0x19f0>
   1260c:	movw	r6, #45208	; 0xb098
   12610:	mov	r1, #99	; 0x63
   12614:	mov	r2, r5
   12618:	movt	r6, #2
   1261c:	mov	r0, r6
   12620:	bl	10b8c <fgets@plt>
   12624:	cmp	r0, #0
   12628:	beq	126e4 <__assert_fail@plt+0x19f0>
   1262c:	add	r7, r6, #29
   12630:	b	12664 <__assert_fail@plt+0x1970>
   12634:	ldr	r0, [r8, #12]
   12638:	ldr	r1, [r8, #16]
   1263c:	mov	r2, r5
   12640:	add	r0, r0, r9
   12644:	add	r1, r1, sl
   12648:	str	r0, [r8, #12]
   1264c:	str	r1, [r8, #16]
   12650:	mov	r0, r6
   12654:	mov	r1, #99	; 0x63
   12658:	bl	10b8c <fgets@plt>
   1265c:	cmp	r0, #0
   12660:	beq	126e4 <__assert_fail@plt+0x19f0>
   12664:	movw	r1, #19887	; 0x4daf
   12668:	mov	r0, r6
   1266c:	add	r2, sp, #8
   12670:	add	r3, sp, #4
   12674:	movt	r1, #1
   12678:	bl	10c7c <__isoc99_sscanf@plt>
   1267c:	cmp	r0, #2
   12680:	bne	126e4 <__assert_fail@plt+0x19f0>
   12684:	mov	r0, r6
   12688:	bl	10c64 <strlen@plt>
   1268c:	ldr	r9, [sp, #8]
   12690:	ldr	sl, [sp, #4]
   12694:	add	r0, r0, r6
   12698:	mov	r1, #0
   1269c:	strb	r1, [r0, #-1]
   126a0:	mov	r0, r4
   126a4:	mov	r1, r7
   126a8:	bl	12e08 <__assert_fail@plt+0x2114>
   126ac:	mov	r8, r0
   126b0:	cmp	r0, #0
   126b4:	bne	12634 <__assert_fail@plt+0x1940>
   126b8:	mov	r0, #1
   126bc:	mov	r1, #20
   126c0:	bl	138f0 <__assert_fail@plt+0x2bfc>
   126c4:	mov	r8, r0
   126c8:	mov	r0, r7
   126cc:	bl	10ba4 <strdup@plt>
   126d0:	str	r0, [r8, #8]
   126d4:	mov	r0, r4
   126d8:	mov	r1, r8
   126dc:	bl	12e98 <__assert_fail@plt+0x21a4>
   126e0:	b	12634 <__assert_fail@plt+0x1940>
   126e4:	sub	sp, fp, #28
   126e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ec:	nop	{0}
   126f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   126f4:	add	fp, sp, #24
   126f8:	sub	sp, sp, #8
   126fc:	mov	r2, r1
   12700:	movw	r1, #19063	; 0x4a77
   12704:	mov	r5, r0
   12708:	movt	r1, #1
   1270c:	mov	r0, r2
   12710:	bl	13994 <__assert_fail@plt+0x2ca0>
   12714:	movw	r1, #19784	; 0x4d48
   12718:	movw	r2, #19712	; 0x4d00
   1271c:	movw	r3, #33503	; 0x82df
   12720:	mov	r4, r0
   12724:	movt	r1, #1
   12728:	movt	r2, #1
   1272c:	movt	r3, #1
   12730:	bl	10c70 <fprintf@plt>
   12734:	ldr	r2, [r5]
   12738:	movw	r1, #19789	; 0x4d4d
   1273c:	mov	r0, r4
   12740:	movt	r1, #1
   12744:	bl	10c70 <fprintf@plt>
   12748:	ldr	r2, [r5, #4]
   1274c:	movw	r1, #19803	; 0x4d5b
   12750:	mov	r0, r4
   12754:	movt	r1, #1
   12758:	bl	10c70 <fprintf@plt>
   1275c:	ldr	r0, [r5]
   12760:	cmp	r0, #0
   12764:	beq	127a4 <__assert_fail@plt+0x1ab0>
   12768:	ldr	r1, [r5, #4]
   1276c:	vldr	d16, [pc, #332]	; 128c0 <__assert_fail@plt+0x1bcc>
   12770:	vmov	s2, r0
   12774:	sub	r1, r0, r1
   12778:	mov	r0, r4
   1277c:	vmov	s0, r1
   12780:	movw	r1, #19904	; 0x4dc0
   12784:	movt	r1, #1
   12788:	vcvt.f64.s32	d17, s0
   1278c:	vcvt.f64.s32	d18, s2
   12790:	vmul.f64	d16, d17, d16
   12794:	vdiv.f64	d16, d16, d18
   12798:	vmov	r2, r3, d16
   1279c:	bl	10c70 <fprintf@plt>
   127a0:	b	127bc <__assert_fail@plt+0x1ac8>
   127a4:	movw	r0, #19895	; 0x4db7
   127a8:	mov	r1, #8
   127ac:	mov	r2, #1
   127b0:	mov	r3, r4
   127b4:	movt	r0, #1
   127b8:	bl	10be0 <fwrite@plt>
   127bc:	movw	r0, #19825	; 0x4d71
   127c0:	mov	r1, #12
   127c4:	mov	r2, #1
   127c8:	mov	r3, r4
   127cc:	mov	r7, #1
   127d0:	movt	r0, #1
   127d4:	bl	10be0 <fwrite@plt>
   127d8:	movw	r3, #19838	; 0x4d7e
   127dc:	mov	r8, #0
   127e0:	add	r1, r5, #8
   127e4:	mov	r0, r4
   127e8:	mov	r2, #50	; 0x32
   127ec:	str	r7, [sp, #4]
   127f0:	movt	r3, #1
   127f4:	str	r8, [sp]
   127f8:	bl	128c8 <__assert_fail@plt+0x1bd4>
   127fc:	movw	r3, #19857	; 0x4d91
   12800:	add	r6, r5, #416	; 0x1a0
   12804:	mov	r0, r4
   12808:	mov	r2, #50	; 0x32
   1280c:	str	r8, [sp]
   12810:	str	r7, [sp, #4]
   12814:	movt	r3, #1
   12818:	mov	r1, r6
   1281c:	bl	128c8 <__assert_fail@plt+0x1bd4>
   12820:	movw	r3, #19848	; 0x4d88
   12824:	add	r1, r5, #824	; 0x338
   12828:	mov	r0, r4
   1282c:	mov	r2, #10
   12830:	str	r7, [sp]
   12834:	str	r7, [sp, #4]
   12838:	movt	r3, #1
   1283c:	bl	128c8 <__assert_fail@plt+0x1bd4>
   12840:	ldr	r0, [r5]
   12844:	cmp	r0, #1
   12848:	blt	128b0 <__assert_fail@plt+0x1bbc>
   1284c:	movw	r3, #19871	; 0x4d9f
   12850:	add	r1, r5, #920	; 0x398
   12854:	mov	r0, r4
   12858:	mov	r2, #8
   1285c:	str	r8, [sp]
   12860:	str	r8, [sp, #4]
   12864:	movt	r3, #1
   12868:	bl	128c8 <__assert_fail@plt+0x1bd4>
   1286c:	ldr	r0, [r5, #8]
   12870:	cmp	r0, #1
   12874:	blt	1288c <__assert_fail@plt+0x1b98>
   12878:	movw	r2, #19838	; 0x4d7e
   1287c:	add	r1, r5, #992	; 0x3e0
   12880:	mov	r0, r4
   12884:	movt	r2, #1
   12888:	bl	12c38 <__assert_fail@plt+0x1f44>
   1288c:	ldr	r0, [r6]
   12890:	cmp	r0, #1
   12894:	blt	128b0 <__assert_fail@plt+0x1bbc>
   12898:	movw	r2, #19857	; 0x4d91
   1289c:	movw	r0, #9048	; 0x2358
   128a0:	movt	r2, #1
   128a4:	add	r1, r5, r0
   128a8:	mov	r0, r4
   128ac:	bl	12c38 <__assert_fail@plt+0x1f44>
   128b0:	mov	r0, r4
   128b4:	sub	sp, fp, #24
   128b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   128bc:	b	13a0c <__assert_fail@plt+0x2d18>
   128c0:	andeq	r0, r0, r0
   128c4:	subsmi	r0, r9, r0
   128c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128cc:	add	fp, sp, #28
   128d0:	sub	sp, sp, #4
   128d4:	vpush	{d8}
   128d8:	sub	sp, sp, #8
   128dc:	mov	r5, r1
   128e0:	movw	r1, #19910	; 0x4dc6
   128e4:	mov	r8, r2
   128e8:	mov	r2, r3
   128ec:	mov	r4, r0
   128f0:	movt	r1, #1
   128f4:	bl	10c70 <fprintf@plt>
   128f8:	movw	r0, #19958	; 0x4df6
   128fc:	mov	r1, #26
   12900:	mov	r2, #1
   12904:	mov	r3, r4
   12908:	mov	r7, #1
   1290c:	movt	r0, #1
   12910:	bl	10be0 <fwrite@plt>
   12914:	movw	r0, #19985	; 0x4e11
   12918:	mov	r1, #3
   1291c:	mov	r2, #1
   12920:	mov	r3, r4
   12924:	movt	r0, #1
   12928:	bl	10be0 <fwrite@plt>
   1292c:	ldrb	r1, [fp, #8]
   12930:	movw	r0, #19915	; 0x4dcb
   12934:	movw	r2, #19922	; 0x4dd2
   12938:	movt	r0, #1
   1293c:	movt	r2, #1
   12940:	cmp	r1, #0
   12944:	str	r1, [sp]
   12948:	movw	r1, #19911	; 0x4dc7
   1294c:	movt	r1, #1
   12950:	movne	r2, r0
   12954:	mov	r0, r4
   12958:	bl	10c70 <fprintf@plt>
   1295c:	ldr	r1, [fp, #12]
   12960:	lsl	r0, r8, #16
   12964:	sxth	r6, r8
   12968:	cmp	r0, #65536	; 0x10000
   1296c:	str	r1, [sp, #4]
   12970:	blt	12a6c <__assert_fail@plt+0x1d78>
   12974:	vldr	d8, [pc, #692]	; 12c30 <__assert_fail@plt+0x1f3c>
   12978:	movw	sl, #19929	; 0x4dd9
   1297c:	mov	r8, #1
   12980:	movt	sl, #1
   12984:	mov	r0, r5
   12988:	ldr	r2, [r0, r7, lsl #3]!
   1298c:	cmp	r2, #1
   12990:	bge	129f8 <__assert_fail@plt+0x1d04>
   12994:	b	129d8 <__assert_fail@plt+0x1ce4>
   12998:	movw	r0, #19958	; 0x4df6
   1299c:	mov	r1, #26
   129a0:	movt	r0, #1
   129a4:	mov	r2, #1
   129a8:	mov	r3, r4
   129ac:	bl	10be0 <fwrite@plt>
   129b0:	movw	r0, #19985	; 0x4e11
   129b4:	mov	r1, #3
   129b8:	mov	r2, #1
   129bc:	mov	r3, r4
   129c0:	movt	r0, #1
   129c4:	bl	10be0 <fwrite@plt>
   129c8:	mov	r0, r4
   129cc:	mov	r1, sl
   129d0:	mov	r2, r7
   129d4:	bl	10c70 <fprintf@plt>
   129d8:	add	r8, r8, #1
   129dc:	sxth	r7, r8
   129e0:	cmp	r6, r7
   129e4:	blt	12a6c <__assert_fail@plt+0x1d78>
   129e8:	mov	r0, r5
   129ec:	ldr	r2, [r0, r7, lsl #3]!
   129f0:	cmp	r2, #1
   129f4:	blt	129d8 <__assert_fail@plt+0x1ce4>
   129f8:	cmp	r0, #0
   129fc:	beq	12998 <__assert_fail@plt+0x1ca4>
   12a00:	add	r9, r5, r7, lsl #3
   12a04:	movw	r1, #19947	; 0x4deb
   12a08:	mov	r0, r4
   12a0c:	movt	r1, #1
   12a10:	ldr	r3, [r9, #4]!
   12a14:	bl	10c70 <fprintf@plt>
   12a18:	ldr	r0, [r5, r7, lsl #3]
   12a1c:	cmp	r0, #0
   12a20:	beq	12a5c <__assert_fail@plt+0x1d68>
   12a24:	ldr	r1, [r9]
   12a28:	vmov	s2, r0
   12a2c:	sub	r1, r0, r1
   12a30:	mov	r0, r4
   12a34:	vmov	s0, r1
   12a38:	movw	r1, #19904	; 0x4dc0
   12a3c:	movt	r1, #1
   12a40:	vcvt.f64.s32	d16, s0
   12a44:	vcvt.f64.s32	d17, s2
   12a48:	vmul.f64	d16, d16, d8
   12a4c:	vdiv.f64	d16, d16, d17
   12a50:	vmov	r2, r3, d16
   12a54:	bl	10c70 <fprintf@plt>
   12a58:	b	129b0 <__assert_fail@plt+0x1cbc>
   12a5c:	movw	r0, #19895	; 0x4db7
   12a60:	mov	r1, #8
   12a64:	movt	r0, #1
   12a68:	b	129a4 <__assert_fail@plt+0x1cb0>
   12a6c:	ldr	r0, [sp]
   12a70:	cmp	r0, #0
   12a74:	beq	12b48 <__assert_fail@plt+0x1e54>
   12a78:	add	r7, r6, #1
   12a7c:	mov	r0, r5
   12a80:	ldr	r2, [r0, r7, lsl #3]!
   12a84:	cmp	r2, #1
   12a88:	blt	12b48 <__assert_fail@plt+0x1e54>
   12a8c:	cmp	r0, #0
   12a90:	beq	12af4 <__assert_fail@plt+0x1e00>
   12a94:	add	r8, r5, r7, lsl #3
   12a98:	movw	r1, #19947	; 0x4deb
   12a9c:	mov	r0, r4
   12aa0:	movt	r1, #1
   12aa4:	ldr	r3, [r8, #4]!
   12aa8:	bl	10c70 <fprintf@plt>
   12aac:	ldr	r0, [r5, r7, lsl #3]
   12ab0:	cmp	r0, #0
   12ab4:	beq	12b04 <__assert_fail@plt+0x1e10>
   12ab8:	ldr	r1, [r8]
   12abc:	vldr	d16, [pc, #364]	; 12c30 <__assert_fail@plt+0x1f3c>
   12ac0:	vmov	s2, r0
   12ac4:	sub	r1, r0, r1
   12ac8:	mov	r0, r4
   12acc:	vmov	s0, r1
   12ad0:	movw	r1, #19904	; 0x4dc0
   12ad4:	movt	r1, #1
   12ad8:	vcvt.f64.s32	d17, s0
   12adc:	vcvt.f64.s32	d18, s2
   12ae0:	vmul.f64	d16, d17, d16
   12ae4:	vdiv.f64	d16, d16, d18
   12ae8:	vmov	r2, r3, d16
   12aec:	bl	10c70 <fprintf@plt>
   12af0:	b	12b1c <__assert_fail@plt+0x1e28>
   12af4:	movw	r0, #19958	; 0x4df6
   12af8:	mov	r1, #26
   12afc:	movt	r0, #1
   12b00:	b	12b10 <__assert_fail@plt+0x1e1c>
   12b04:	movw	r0, #19895	; 0x4db7
   12b08:	mov	r1, #8
   12b0c:	movt	r0, #1
   12b10:	mov	r2, #1
   12b14:	mov	r3, r4
   12b18:	bl	10be0 <fwrite@plt>
   12b1c:	movw	r0, #19985	; 0x4e11
   12b20:	mov	r1, #3
   12b24:	mov	r2, #1
   12b28:	mov	r3, r4
   12b2c:	movt	r0, #1
   12b30:	bl	10be0 <fwrite@plt>
   12b34:	movw	r1, #19938	; 0x4de2
   12b38:	mov	r0, r4
   12b3c:	mov	r2, r6
   12b40:	movt	r1, #1
   12b44:	bl	10c70 <fprintf@plt>
   12b48:	ldr	r0, [sp, #4]
   12b4c:	tst	r0, #255	; 0xff
   12b50:	beq	12bb8 <__assert_fail@plt+0x1ec4>
   12b54:	cmp	r5, #0
   12b58:	beq	12bc8 <__assert_fail@plt+0x1ed4>
   12b5c:	movw	r1, #19947	; 0x4deb
   12b60:	ldm	r5, {r2, r3}
   12b64:	mov	r0, r4
   12b68:	movt	r1, #1
   12b6c:	bl	10c70 <fprintf@plt>
   12b70:	ldr	r0, [r5]
   12b74:	cmp	r0, #0
   12b78:	beq	12bd8 <__assert_fail@plt+0x1ee4>
   12b7c:	ldr	r1, [r5, #4]
   12b80:	vldr	d16, [pc, #168]	; 12c30 <__assert_fail@plt+0x1f3c>
   12b84:	vmov	s2, r0
   12b88:	sub	r1, r0, r1
   12b8c:	mov	r0, r4
   12b90:	vmov	s0, r1
   12b94:	movw	r1, #19904	; 0x4dc0
   12b98:	movt	r1, #1
   12b9c:	vcvt.f64.s32	d17, s0
   12ba0:	vcvt.f64.s32	d18, s2
   12ba4:	vmul.f64	d16, d17, d16
   12ba8:	vdiv.f64	d16, d16, d18
   12bac:	vmov	r2, r3, d16
   12bb0:	bl	10c70 <fprintf@plt>
   12bb4:	b	12bf0 <__assert_fail@plt+0x1efc>
   12bb8:	sub	sp, fp, #40	; 0x28
   12bbc:	vpop	{d8}
   12bc0:	add	sp, sp, #4
   12bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc8:	movw	r0, #19958	; 0x4df6
   12bcc:	mov	r1, #26
   12bd0:	movt	r0, #1
   12bd4:	b	12be4 <__assert_fail@plt+0x1ef0>
   12bd8:	movw	r0, #19895	; 0x4db7
   12bdc:	mov	r1, #8
   12be0:	movt	r0, #1
   12be4:	mov	r2, #1
   12be8:	mov	r3, r4
   12bec:	bl	10be0 <fwrite@plt>
   12bf0:	movw	r0, #19985	; 0x4e11
   12bf4:	mov	r1, #3
   12bf8:	mov	r2, #1
   12bfc:	mov	r3, r4
   12c00:	movt	r0, #1
   12c04:	bl	10be0 <fwrite@plt>
   12c08:	movw	r0, #19879	; 0x4da7
   12c0c:	mov	r1, #7
   12c10:	mov	r2, #1
   12c14:	mov	r3, r4
   12c18:	movt	r0, #1
   12c1c:	sub	sp, fp, #40	; 0x28
   12c20:	vpop	{d8}
   12c24:	add	sp, sp, #4
   12c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c2c:	b	10be0 <fwrite@plt>
   12c30:	andeq	r0, r0, r0
   12c34:	subsmi	r0, r9, r0
   12c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c3c:	add	fp, sp, #28
   12c40:	sub	sp, sp, #4
   12c44:	vpush	{d8}
   12c48:	mov	r5, r0
   12c4c:	mov	r0, r1
   12c50:	mov	r6, r2
   12c54:	mov	r4, r1
   12c58:	bl	12fa8 <__assert_fail@plt+0x22b4>
   12c5c:	movw	r0, #8048	; 0x1f70
   12c60:	movw	r2, #11712	; 0x2dc0
   12c64:	ldr	r1, [r4, r0]!
   12c68:	movt	r2, #1
   12c6c:	ldr	r0, [r4, #4]
   12c70:	bl	1472c <error@@Base+0x904>
   12c74:	movw	r1, #19910	; 0x4dc6
   12c78:	mov	r0, r5
   12c7c:	mov	r2, r6
   12c80:	movt	r1, #1
   12c84:	bl	10c70 <fprintf@plt>
   12c88:	movw	r0, #19958	; 0x4df6
   12c8c:	mov	r1, #26
   12c90:	mov	r2, #1
   12c94:	mov	r3, r5
   12c98:	movt	r0, #1
   12c9c:	bl	10be0 <fwrite@plt>
   12ca0:	movw	r0, #19985	; 0x4e11
   12ca4:	mov	r1, #3
   12ca8:	mov	r2, #1
   12cac:	mov	r3, r5
   12cb0:	movt	r0, #1
   12cb4:	bl	10be0 <fwrite@plt>
   12cb8:	mov	r0, #10
   12cbc:	mov	r1, r5
   12cc0:	bl	10ca0 <fputc@plt>
   12cc4:	ldr	r0, [r4, #4]
   12cc8:	cmp	r0, #1
   12ccc:	blt	12da8 <__assert_fail@plt+0x20b4>
   12cd0:	vldr	d8, [pc, #224]	; 12db8 <__assert_fail@plt+0x20c4>
   12cd4:	movw	r9, #19947	; 0x4deb
   12cd8:	movw	r7, #19985	; 0x4e11
   12cdc:	movw	r6, #19911	; 0x4dc7
   12ce0:	mov	r8, #0
   12ce4:	movt	r9, #1
   12ce8:	movt	r7, #1
   12cec:	movt	r6, #1
   12cf0:	b	12d64 <__assert_fail@plt+0x2070>
   12cf4:	ldr	r1, [sl, #16]
   12cf8:	vmov	s2, r0
   12cfc:	sub	r1, r0, r1
   12d00:	mov	r0, r5
   12d04:	vmov	s0, r1
   12d08:	movw	r1, #19904	; 0x4dc0
   12d0c:	movt	r1, #1
   12d10:	vcvt.f64.s32	d16, s0
   12d14:	vcvt.f64.s32	d17, s2
   12d18:	vmul.f64	d16, d16, d8
   12d1c:	vdiv.f64	d16, d16, d17
   12d20:	vmov	r2, r3, d16
   12d24:	bl	10c70 <fprintf@plt>
   12d28:	mov	r0, r7
   12d2c:	mov	r1, #3
   12d30:	mov	r2, #1
   12d34:	mov	r3, r5
   12d38:	bl	10be0 <fwrite@plt>
   12d3c:	ldr	r0, [r4]
   12d40:	mov	r1, r6
   12d44:	ldr	r0, [r0, r8, lsl #2]
   12d48:	ldr	r2, [r0, #8]
   12d4c:	mov	r0, r5
   12d50:	bl	10c70 <fprintf@plt>
   12d54:	ldr	r0, [r4, #4]
   12d58:	add	r8, r8, #1
   12d5c:	cmp	r8, r0
   12d60:	bge	12da8 <__assert_fail@plt+0x20b4>
   12d64:	ldr	r0, [r4]
   12d68:	mov	r1, r9
   12d6c:	ldr	sl, [r0, r8, lsl #2]
   12d70:	mov	r0, r5
   12d74:	ldr	r2, [sl, #12]
   12d78:	ldr	r3, [sl, #16]
   12d7c:	bl	10c70 <fprintf@plt>
   12d80:	ldr	r0, [sl, #12]
   12d84:	cmp	r0, #0
   12d88:	bne	12cf4 <__assert_fail@plt+0x2000>
   12d8c:	movw	r0, #19895	; 0x4db7
   12d90:	mov	r1, #8
   12d94:	mov	r2, #1
   12d98:	mov	r3, r5
   12d9c:	movt	r0, #1
   12da0:	bl	10be0 <fwrite@plt>
   12da4:	b	12d28 <__assert_fail@plt+0x2034>
   12da8:	vpop	{d8}
   12dac:	add	sp, sp, #4
   12db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12db4:	nop	{0}
   12db8:	andeq	r0, r0, r0
   12dbc:	subsmi	r0, r9, r0
   12dc0:	ldr	r1, [r1, #8]
   12dc4:	ldr	r0, [r0, #8]
   12dc8:	b	13910 <__assert_fail@plt+0x2c1c>
   12dcc:	push	{r4, r5, r6, sl, fp, lr}
   12dd0:	add	fp, sp, #16
   12dd4:	mov	r4, r0
   12dd8:	movw	r0, #8048	; 0x1f70
   12ddc:	movw	r6, #503	; 0x1f7
   12de0:	add	r5, r4, r0
   12de4:	mov	r0, r4
   12de8:	bl	11dac <__assert_fail@plt+0x10b8>
   12dec:	subs	r6, r6, #1
   12df0:	add	r4, r4, #16
   12df4:	bne	12de4 <__assert_fail@plt+0x20f0>
   12df8:	mov	r0, #0
   12dfc:	str	r0, [r5]
   12e00:	str	r0, [r5, #4]
   12e04:	pop	{r4, r5, r6, sl, fp, pc}
   12e08:	push	{r4, r5, r6, sl, fp, lr}
   12e0c:	add	fp, sp, #16
   12e10:	mov	r5, r1
   12e14:	ldrb	r1, [r1]
   12e18:	mov	r4, #0
   12e1c:	mov	r2, #0
   12e20:	cmp	r1, #0
   12e24:	beq	12e58 <__assert_fail@plt+0x2164>
   12e28:	add	r3, r5, #1
   12e2c:	mov	r2, #0
   12e30:	uxtab	r2, r2, r1
   12e34:	ldrb	r1, [r3], #1
   12e38:	cmp	r1, #0
   12e3c:	bne	12e30 <__assert_fail@plt+0x213c>
   12e40:	movw	r1, #20065	; 0x4e61
   12e44:	movt	r1, #33354	; 0x824a
   12e48:	umull	r1, r3, r2, r1
   12e4c:	lsr	r1, r3, #8
   12e50:	movw	r3, #503	; 0x1f7
   12e54:	mls	r2, r1, r3, r2
   12e58:	ldr	r6, [r0, r2, lsl #4]
   12e5c:	cmp	r6, #0
   12e60:	beq	12e84 <__assert_fail@plt+0x2190>
   12e64:	ldr	r1, [r6, #8]
   12e68:	mov	r0, r5
   12e6c:	bl	10b50 <strcmp@plt>
   12e70:	cmp	r0, #0
   12e74:	beq	12e8c <__assert_fail@plt+0x2198>
   12e78:	ldr	r6, [r6, #4]
   12e7c:	cmp	r6, #0
   12e80:	bne	12e64 <__assert_fail@plt+0x2170>
   12e84:	mov	r0, r4
   12e88:	pop	{r4, r5, r6, sl, fp, pc}
   12e8c:	mov	r4, r6
   12e90:	mov	r0, r4
   12e94:	pop	{r4, r5, r6, sl, fp, pc}
   12e98:	push	{r4, r5, fp, lr}
   12e9c:	add	fp, sp, #8
   12ea0:	movw	r2, #8048	; 0x1f70
   12ea4:	add	r5, r0, r2
   12ea8:	ldr	r2, [r1, #8]
   12eac:	ldrb	r3, [r2]
   12eb0:	cmp	r3, #0
   12eb4:	beq	12eec <__assert_fail@plt+0x21f8>
   12eb8:	add	r4, r2, #1
   12ebc:	mov	r2, #0
   12ec0:	uxtab	r2, r2, r3
   12ec4:	ldrb	r3, [r4], #1
   12ec8:	cmp	r3, #0
   12ecc:	bne	12ec0 <__assert_fail@plt+0x21cc>
   12ed0:	movw	r3, #20065	; 0x4e61
   12ed4:	movt	r3, #33354	; 0x824a
   12ed8:	umull	r3, r4, r2, r3
   12edc:	lsr	r3, r4, #8
   12ee0:	movw	r4, #503	; 0x1f7
   12ee4:	mls	r2, r3, r4, r2
   12ee8:	b	12ef0 <__assert_fail@plt+0x21fc>
   12eec:	mov	r2, #0
   12ef0:	add	r0, r0, r2, lsl #4
   12ef4:	bl	11db8 <__assert_fail@plt+0x10c4>
   12ef8:	ldr	r0, [r5]
   12efc:	cmp	r0, #0
   12f00:	beq	12f10 <__assert_fail@plt+0x221c>
   12f04:	bl	10b74 <free@plt>
   12f08:	mov	r0, #0
   12f0c:	str	r0, [r5]
   12f10:	ldr	r0, [r5, #4]
   12f14:	add	r0, r0, #1
   12f18:	str	r0, [r5, #4]
   12f1c:	pop	{r4, r5, fp, pc}
   12f20:	push	{r4, r5, fp, lr}
   12f24:	add	fp, sp, #8
   12f28:	movw	r2, #8048	; 0x1f70
   12f2c:	add	r5, r0, r2
   12f30:	ldr	r2, [r1, #8]
   12f34:	ldrb	r3, [r2]
   12f38:	cmp	r3, #0
   12f3c:	beq	12f74 <__assert_fail@plt+0x2280>
   12f40:	add	r4, r2, #1
   12f44:	mov	r2, #0
   12f48:	uxtab	r2, r2, r3
   12f4c:	ldrb	r3, [r4], #1
   12f50:	cmp	r3, #0
   12f54:	bne	12f48 <__assert_fail@plt+0x2254>
   12f58:	movw	r3, #20065	; 0x4e61
   12f5c:	movt	r3, #33354	; 0x824a
   12f60:	umull	r3, r4, r2, r3
   12f64:	lsr	r3, r4, #8
   12f68:	movw	r4, #503	; 0x1f7
   12f6c:	mls	r2, r3, r4, r2
   12f70:	b	12f78 <__assert_fail@plt+0x2284>
   12f74:	mov	r2, #0
   12f78:	add	r0, r0, r2, lsl #4
   12f7c:	bl	11f00 <__assert_fail@plt+0x120c>
   12f80:	ldr	r0, [r5]
   12f84:	cmp	r0, #0
   12f88:	beq	12f98 <__assert_fail@plt+0x22a4>
   12f8c:	bl	10b74 <free@plt>
   12f90:	mov	r0, #0
   12f94:	str	r0, [r5]
   12f98:	ldr	r0, [r5, #4]
   12f9c:	sub	r0, r0, #1
   12fa0:	str	r0, [r5, #4]
   12fa4:	pop	{r4, r5, fp, pc}
   12fa8:	push	{r4, r5, fp, lr}
   12fac:	add	fp, sp, #8
   12fb0:	mov	r4, r0
   12fb4:	movw	r0, #8048	; 0x1f70
   12fb8:	mov	r5, r4
   12fbc:	ldr	r0, [r5, r0]!
   12fc0:	cmp	r0, #0
   12fc4:	bne	1302c <__assert_fail@plt+0x2338>
   12fc8:	ldr	r0, [r5, #4]
   12fcc:	cmp	r0, #0
   12fd0:	popeq	{r4, r5, fp, pc}
   12fd4:	mov	r1, #4
   12fd8:	bl	138f0 <__assert_fail@plt+0x2bfc>
   12fdc:	str	r0, [r5]
   12fe0:	mov	r0, #0
   12fe4:	movw	ip, #503	; 0x1f7
   12fe8:	mov	r2, #0
   12fec:	ldr	r3, [r4, r2, lsl #4]
   12ff0:	cmp	r3, #0
   12ff4:	bne	13010 <__assert_fail@plt+0x231c>
   12ff8:	add	r2, r2, #1
   12ffc:	cmp	r2, ip
   13000:	beq	1302c <__assert_fail@plt+0x2338>
   13004:	ldr	r3, [r4, r2, lsl #4]
   13008:	cmp	r3, #0
   1300c:	beq	12ff8 <__assert_fail@plt+0x2304>
   13010:	ldr	r1, [r5]
   13014:	str	r3, [r1, r0, lsl #2]
   13018:	add	r0, r0, #1
   1301c:	ldr	r3, [r3, #4]
   13020:	cmp	r3, #0
   13024:	bne	13010 <__assert_fail@plt+0x231c>
   13028:	b	12ff8 <__assert_fail@plt+0x2304>
   1302c:	pop	{r4, r5, fp, pc}
   13030:	push	{r4, r5, r6, r7, fp, lr}
   13034:	add	fp, sp, #16
   13038:	mov	r5, r0
   1303c:	movw	r0, #8048	; 0x1f70
   13040:	mov	r4, r1
   13044:	movw	r7, #503	; 0x1f7
   13048:	add	r6, r5, r0
   1304c:	mov	r0, r5
   13050:	mov	r1, r4
   13054:	bl	11fd4 <__assert_fail@plt+0x12e0>
   13058:	subs	r7, r7, #1
   1305c:	add	r5, r5, #16
   13060:	bne	1304c <__assert_fail@plt+0x2358>
   13064:	ldr	r0, [r6]
   13068:	cmp	r0, #0
   1306c:	beq	1307c <__assert_fail@plt+0x2388>
   13070:	bl	10b74 <free@plt>
   13074:	mov	r0, #0
   13078:	str	r0, [r6]
   1307c:	mov	r0, #0
   13080:	str	r0, [r6, #4]
   13084:	pop	{r4, r5, r6, r7, fp, pc}
   13088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1308c:	add	fp, sp, #28
   13090:	sub	sp, sp, #28
   13094:	ldr	r8, [r1]
   13098:	str	r0, [sp, #4]
   1309c:	cmp	r8, #0
   130a0:	str	r8, [sp, #16]
   130a4:	beq	13868 <__assert_fail@plt+0x2b74>
   130a8:	movw	sl, #19992	; 0x4e18
   130ac:	add	r9, sp, #12
   130b0:	movt	sl, #1
   130b4:	mov	r0, #17
   130b8:	mov	r1, r8
   130bc:	mov	r7, r9
   130c0:	mov	ip, r0
   130c4:	mov	lr, #18
   130c8:	cmp	r7, #0
   130cc:	beq	13238 <__assert_fail@plt+0x2544>
   130d0:	mov	r7, r1
   130d4:	ldr	r0, [r7, #12]
   130d8:	mov	r2, #0
   130dc:	movw	r1, #1092	; 0x444
   130e0:	sub	r3, r1, r2
   130e4:	add	r3, r2, r3, lsr #1
   130e8:	add	r4, r3, r3, lsl #1
   130ec:	ldr	r5, [sl, r4, lsl #2]
   130f0:	cmp	r5, r0
   130f4:	bls	13108 <__assert_fail@plt+0x2414>
   130f8:	sub	r1, r3, #1
   130fc:	cmp	r1, r2
   13100:	bcs	130e0 <__assert_fail@plt+0x23ec>
   13104:	b	13154 <__assert_fail@plt+0x2460>
   13108:	add	r2, sl, r4, lsl #2
   1310c:	ldr	r4, [r2, #4]
   13110:	cmp	r4, r0
   13114:	bcs	13128 <__assert_fail@plt+0x2434>
   13118:	add	r2, r3, #1
   1311c:	cmp	r1, r2
   13120:	bcs	130e0 <__assert_fail@plt+0x23ec>
   13124:	b	13154 <__assert_fail@plt+0x2460>
   13128:	ldr	r1, [r2, #8]
   1312c:	orr	r1, r1, #2
   13130:	cmp	r1, #6
   13134:	bne	13154 <__assert_fail@plt+0x2460>
   13138:	ldr	r7, [r7, #4]
   1313c:	cmp	r7, #0
   13140:	bne	130d4 <__assert_fail@plt+0x23e0>
   13144:	mov	r2, #18
   13148:	mov	r9, #18
   1314c:	mov	r7, #0
   13150:	b	13244 <__assert_fail@plt+0x2550>
   13154:	cmp	r7, #0
   13158:	beq	13238 <__assert_fail@plt+0x2544>
   1315c:	mov	r2, #0
   13160:	movw	r1, #1092	; 0x444
   13164:	sub	r3, r1, r2
   13168:	add	r3, r2, r3, lsr #1
   1316c:	add	r4, r3, r3, lsl #1
   13170:	ldr	r5, [sl, r4, lsl #2]
   13174:	cmp	r5, r0
   13178:	bls	1318c <__assert_fail@plt+0x2498>
   1317c:	sub	r1, r3, #1
   13180:	cmp	r1, r2
   13184:	bcs	13164 <__assert_fail@plt+0x2470>
   13188:	b	131a8 <__assert_fail@plt+0x24b4>
   1318c:	add	r2, sl, r4, lsl #2
   13190:	ldr	r4, [r2, #4]
   13194:	cmp	r4, r0
   13198:	bcs	1359c <__assert_fail@plt+0x28a8>
   1319c:	add	r2, r3, #1
   131a0:	cmp	r1, r2
   131a4:	bcs	13164 <__assert_fail@plt+0x2470>
   131a8:	mov	r9, #0
   131ac:	ldr	r6, [r7, #4]
   131b0:	cmp	r6, #0
   131b4:	beq	135ac <__assert_fail@plt+0x28b8>
   131b8:	mov	r2, r6
   131bc:	str	r7, [sp, #8]
   131c0:	ldr	r0, [r2, #12]
   131c4:	mov	r4, #0
   131c8:	movw	r3, #1092	; 0x444
   131cc:	sub	r7, r3, r4
   131d0:	add	r7, r4, r7, lsr #1
   131d4:	add	r5, r7, r7, lsl #1
   131d8:	ldr	r1, [sl, r5, lsl #2]
   131dc:	cmp	r1, r0
   131e0:	bls	131f4 <__assert_fail@plt+0x2500>
   131e4:	sub	r3, r7, #1
   131e8:	cmp	r3, r4
   131ec:	bcs	131cc <__assert_fail@plt+0x24d8>
   131f0:	b	132ac <__assert_fail@plt+0x25b8>
   131f4:	add	r5, sl, r5, lsl #2
   131f8:	ldr	r1, [r5, #4]
   131fc:	cmp	r1, r0
   13200:	bcs	13214 <__assert_fail@plt+0x2520>
   13204:	add	r4, r7, #1
   13208:	cmp	r3, r4
   1320c:	bcs	131cc <__assert_fail@plt+0x24d8>
   13210:	b	132ac <__assert_fail@plt+0x25b8>
   13214:	ldr	r1, [r5, #8]
   13218:	orr	r1, r1, #2
   1321c:	cmp	r1, #6
   13220:	bne	132ac <__assert_fail@plt+0x25b8>
   13224:	ldr	r2, [r2, #4]
   13228:	cmp	r2, #0
   1322c:	bne	131c0 <__assert_fail@plt+0x24cc>
   13230:	mov	r2, #18
   13234:	b	133fc <__assert_fail@plt+0x2708>
   13238:	mov	r7, #0
   1323c:	mov	r2, #18
   13240:	mov	r9, #18
   13244:	sub	r0, r2, #1
   13248:	cmp	r0, #3
   1324c:	subcs	r0, r9, #1
   13250:	cmpcs	r0, #3
   13254:	bcc	136b8 <__assert_fail@plt+0x29c4>
   13258:	orr	r4, r2, #1
   1325c:	orr	r6, r9, #1
   13260:	cmp	r4, #9
   13264:	cmpeq	r6, #9
   13268:	beq	133dc <__assert_fail@plt+0x26e8>
   1326c:	cmp	r6, #9
   13270:	bne	13308 <__assert_fail@plt+0x2614>
   13274:	cmp	r2, #13
   13278:	bhi	13308 <__assert_fail@plt+0x2614>
   1327c:	mov	r0, #1
   13280:	mov	r1, #13312	; 0x3400
   13284:	tst	r1, r0, lsl r2
   13288:	beq	13308 <__assert_fail@plt+0x2614>
   1328c:	orr	r0, lr, #1
   13290:	cmp	r0, #9
   13294:	bne	13308 <__assert_fail@plt+0x2614>
   13298:	mov	r0, r9
   1329c:	ldr	r1, [r7, #4]
   132a0:	cmp	r1, #0
   132a4:	bne	130c0 <__assert_fail@plt+0x23cc>
   132a8:	b	136b8 <__assert_fail@plt+0x29c4>
   132ac:	cmp	r2, #0
   132b0:	beq	133f8 <__assert_fail@plt+0x2704>
   132b4:	mov	r3, #0
   132b8:	movw	r2, #1092	; 0x444
   132bc:	sub	r1, r2, r3
   132c0:	add	r7, r3, r1, lsr #1
   132c4:	add	r5, r7, r7, lsl #1
   132c8:	ldr	r1, [sl, r5, lsl #2]
   132cc:	cmp	r1, r0
   132d0:	bls	132e4 <__assert_fail@plt+0x25f0>
   132d4:	sub	r2, r7, #1
   132d8:	cmp	r2, r3
   132dc:	bcs	132bc <__assert_fail@plt+0x25c8>
   132e0:	b	133f0 <__assert_fail@plt+0x26fc>
   132e4:	add	r3, sl, r5, lsl #2
   132e8:	ldr	r1, [r3, #4]
   132ec:	cmp	r1, r0
   132f0:	bcs	135c8 <__assert_fail@plt+0x28d4>
   132f4:	add	r3, r7, #1
   132f8:	cmp	r2, r3
   132fc:	bcs	132bc <__assert_fail@plt+0x25c8>
   13300:	mov	r2, #0
   13304:	b	133fc <__assert_fail@plt+0x2708>
   13308:	orr	r0, ip, #1
   1330c:	cmp	r0, #9
   13310:	bne	13348 <__assert_fail@plt+0x2654>
   13314:	cmp	r9, #13
   13318:	bhi	13348 <__assert_fail@plt+0x2654>
   1331c:	mov	r0, #1
   13320:	mov	r1, #13312	; 0x3400
   13324:	tst	r1, r0, lsl r9
   13328:	beq	13348 <__assert_fail@plt+0x2654>
   1332c:	cmp	r4, #9
   13330:	bne	13348 <__assert_fail@plt+0x2654>
   13334:	mov	r0, r9
   13338:	ldr	r1, [r7, #4]
   1333c:	cmp	r1, #0
   13340:	bne	130c0 <__assert_fail@plt+0x23cc>
   13344:	b	136b8 <__assert_fail@plt+0x29c4>
   13348:	cmp	r2, #10
   1334c:	mov	r0, #8
   13350:	cmpeq	r9, #8
   13354:	beq	13570 <__assert_fail@plt+0x287c>
   13358:	cmp	lr, #8
   1335c:	cmpeq	r2, #11
   13360:	beq	13580 <__assert_fail@plt+0x288c>
   13364:	cmp	r2, #8
   13368:	cmpeq	ip, #8
   1336c:	beq	1358c <__assert_fail@plt+0x2898>
   13370:	cmp	r2, #15
   13374:	mov	r0, #15
   13378:	cmpeq	r9, #15
   1337c:	beq	13570 <__assert_fail@plt+0x287c>
   13380:	cmp	r2, #15
   13384:	cmpeq	r6, #9
   13388:	beq	135b4 <__assert_fail@plt+0x28c0>
   1338c:	cmp	r9, #15
   13390:	cmpeq	r4, #9
   13394:	beq	13570 <__assert_fail@plt+0x287c>
   13398:	cmp	ip, #15
   1339c:	cmpeq	r2, #15
   133a0:	beq	13630 <__assert_fail@plt+0x293c>
   133a4:	cmp	r9, #15
   133a8:	bne	135d0 <__assert_fail@plt+0x28dc>
   133ac:	cmp	lr, #15
   133b0:	bne	135e0 <__assert_fail@plt+0x28ec>
   133b4:	orr	r3, r2, #2
   133b8:	sub	r1, r2, #10
   133bc:	sub	r3, r3, #14
   133c0:	clz	r1, r1
   133c4:	clz	r3, r3
   133c8:	lsr	r1, r1, #5
   133cc:	lsr	r3, r3, #5
   133d0:	orrs	r1, r1, r3
   133d4:	bne	13570 <__assert_fail@plt+0x287c>
   133d8:	b	135e0 <__assert_fail@plt+0x28ec>
   133dc:	mov	r0, r9
   133e0:	ldr	r1, [r7, #4]
   133e4:	cmp	r1, #0
   133e8:	bne	130c0 <__assert_fail@plt+0x23cc>
   133ec:	b	136b8 <__assert_fail@plt+0x29c4>
   133f0:	mov	r2, #0
   133f4:	b	133fc <__assert_fail@plt+0x2708>
   133f8:	mov	r2, #18
   133fc:	ldr	r0, [r6, #12]
   13400:	mov	r4, #0
   13404:	movw	r3, #1092	; 0x444
   13408:	sub	r1, r3, r4
   1340c:	add	r7, r4, r1, lsr #1
   13410:	add	r5, r7, r7, lsl #1
   13414:	ldr	r1, [sl, r5, lsl #2]
   13418:	cmp	r1, r0
   1341c:	bls	13430 <__assert_fail@plt+0x273c>
   13420:	sub	r3, r7, #1
   13424:	cmp	r3, r4
   13428:	bcs	13408 <__assert_fail@plt+0x2714>
   1342c:	b	1347c <__assert_fail@plt+0x2788>
   13430:	add	r5, sl, r5, lsl #2
   13434:	ldr	r1, [r5, #4]
   13438:	cmp	r1, r0
   1343c:	bcs	13450 <__assert_fail@plt+0x275c>
   13440:	add	r4, r7, #1
   13444:	cmp	r3, r4
   13448:	bcs	13408 <__assert_fail@plt+0x2714>
   1344c:	b	1347c <__assert_fail@plt+0x2788>
   13450:	ldr	r0, [r5, #8]
   13454:	orr	r0, r0, #2
   13458:	cmp	r0, #6
   1345c:	bne	1347c <__assert_fail@plt+0x2788>
   13460:	ldr	r6, [r6, #4]
   13464:	cmp	r6, #0
   13468:	bne	133fc <__assert_fail@plt+0x2708>
   1346c:	mov	lr, #18
   13470:	cmp	r9, #1
   13474:	beq	13560 <__assert_fail@plt+0x286c>
   13478:	b	13674 <__assert_fail@plt+0x2980>
   1347c:	mov	lr, #18
   13480:	cmp	r6, #0
   13484:	beq	13558 <__assert_fail@plt+0x2864>
   13488:	ldr	r6, [r6, #4]
   1348c:	cmp	r6, #0
   13490:	beq	13558 <__assert_fail@plt+0x2864>
   13494:	ldr	r0, [r6, #12]
   13498:	mov	r3, #0
   1349c:	movw	r4, #1092	; 0x444
   134a0:	sub	r1, r4, r3
   134a4:	add	r7, r3, r1, lsr #1
   134a8:	add	r5, r7, r7, lsl #1
   134ac:	ldr	r1, [sl, r5, lsl #2]
   134b0:	cmp	r1, r0
   134b4:	bls	134c8 <__assert_fail@plt+0x27d4>
   134b8:	sub	r4, r7, #1
   134bc:	cmp	r4, r3
   134c0:	bcs	134a0 <__assert_fail@plt+0x27ac>
   134c4:	b	134f8 <__assert_fail@plt+0x2804>
   134c8:	add	r3, sl, r5, lsl #2
   134cc:	ldr	r1, [r3, #4]
   134d0:	cmp	r1, r0
   134d4:	bcs	134e8 <__assert_fail@plt+0x27f4>
   134d8:	add	r3, r7, #1
   134dc:	cmp	r4, r3
   134e0:	bcs	134a0 <__assert_fail@plt+0x27ac>
   134e4:	b	134f8 <__assert_fail@plt+0x2804>
   134e8:	ldr	r1, [r3, #8]
   134ec:	orr	r1, r1, #2
   134f0:	cmp	r1, #6
   134f4:	beq	13488 <__assert_fail@plt+0x2794>
   134f8:	cmp	r6, #0
   134fc:	beq	13558 <__assert_fail@plt+0x2864>
   13500:	mov	r4, #0
   13504:	movw	r6, #1092	; 0x444
   13508:	sub	r1, r6, r4
   1350c:	add	r3, r4, r1, lsr #1
   13510:	add	r7, r3, r3, lsl #1
   13514:	ldr	r1, [sl, r7, lsl #2]
   13518:	cmp	r1, r0
   1351c:	bls	13530 <__assert_fail@plt+0x283c>
   13520:	sub	r6, r3, #1
   13524:	cmp	r6, r4
   13528:	bcs	13508 <__assert_fail@plt+0x2814>
   1352c:	b	13554 <__assert_fail@plt+0x2860>
   13530:	add	r7, sl, r7, lsl #2
   13534:	ldr	r1, [r7, #4]
   13538:	cmp	r1, r0
   1353c:	bcs	13668 <__assert_fail@plt+0x2974>
   13540:	add	r4, r3, #1
   13544:	mov	lr, #0
   13548:	cmp	r6, r4
   1354c:	bcs	13508 <__assert_fail@plt+0x2814>
   13550:	b	13558 <__assert_fail@plt+0x2864>
   13554:	mov	lr, #0
   13558:	cmp	r9, #1
   1355c:	bne	13674 <__assert_fail@plt+0x2980>
   13560:	ldr	r7, [sp, #8]
   13564:	mov	r0, #1
   13568:	cmp	r2, #2
   1356c:	bne	13244 <__assert_fail@plt+0x2550>
   13570:	ldr	r1, [r7, #4]
   13574:	cmp	r1, #0
   13578:	bne	130c0 <__assert_fail@plt+0x23cc>
   1357c:	b	136b8 <__assert_fail@plt+0x29c4>
   13580:	cmp	r9, #8
   13584:	beq	13570 <__assert_fail@plt+0x287c>
   13588:	b	13364 <__assert_fail@plt+0x2670>
   1358c:	mov	r0, #11
   13590:	cmp	r9, #11
   13594:	beq	13570 <__assert_fail@plt+0x287c>
   13598:	b	13370 <__assert_fail@plt+0x267c>
   1359c:	ldr	r9, [r2, #8]
   135a0:	ldr	r6, [r7, #4]
   135a4:	cmp	r6, #0
   135a8:	bne	131b8 <__assert_fail@plt+0x24c4>
   135ac:	mov	r2, #18
   135b0:	b	13244 <__assert_fail@plt+0x2550>
   135b4:	mov	r0, r9
   135b8:	ldr	r1, [r7, #4]
   135bc:	cmp	r1, #0
   135c0:	bne	130c0 <__assert_fail@plt+0x23cc>
   135c4:	b	136b8 <__assert_fail@plt+0x29c4>
   135c8:	ldr	r2, [r3, #8]
   135cc:	b	133fc <__assert_fail@plt+0x2708>
   135d0:	cmp	r2, #7
   135d4:	moveq	r0, #7
   135d8:	cmpeq	r9, #7
   135dc:	beq	13570 <__assert_fail@plt+0x287c>
   135e0:	cmp	r2, #16
   135e4:	bne	1367c <__assert_fail@plt+0x2988>
   135e8:	orr	r1, r9, #8
   135ec:	sub	r0, r6, #9
   135f0:	sub	r1, r1, #15
   135f4:	clz	r0, r0
   135f8:	clz	r1, r1
   135fc:	lsr	r0, r0, #5
   13600:	lsr	r1, r1, #5
   13604:	orr	r0, r1, r0
   13608:	sub	r1, r9, #16
   1360c:	clz	r1, r1
   13610:	lsr	r1, r1, #5
   13614:	orrs	r0, r1, r0
   13618:	beq	1367c <__assert_fail@plt+0x2988>
   1361c:	mov	r0, r9
   13620:	ldr	r1, [r7, #4]
   13624:	cmp	r1, #0
   13628:	bne	130c0 <__assert_fail@plt+0x23cc>
   1362c:	b	136b8 <__assert_fail@plt+0x29c4>
   13630:	orr	r3, r9, #2
   13634:	sub	r1, r9, #10
   13638:	sub	r3, r3, #14
   1363c:	clz	r1, r1
   13640:	clz	r3, r3
   13644:	lsr	r1, r1, #5
   13648:	lsr	r3, r3, #5
   1364c:	orrs	r1, r1, r3
   13650:	beq	133a4 <__assert_fail@plt+0x26b0>
   13654:	mov	r0, r9
   13658:	ldr	r1, [r7, #4]
   1365c:	cmp	r1, #0
   13660:	bne	130c0 <__assert_fail@plt+0x23cc>
   13664:	b	136b8 <__assert_fail@plt+0x29c4>
   13668:	ldr	lr, [r7, #8]
   1366c:	cmp	r9, #1
   13670:	beq	13560 <__assert_fail@plt+0x286c>
   13674:	ldr	r7, [sp, #8]
   13678:	b	13244 <__assert_fail@plt+0x2550>
   1367c:	cmp	r9, #16
   13680:	bne	136a8 <__assert_fail@plt+0x29b4>
   13684:	cmp	r2, #16
   13688:	bhi	136b8 <__assert_fail@plt+0x29c4>
   1368c:	movw	r3, #33664	; 0x8380
   13690:	mov	r1, #1
   13694:	mov	r0, #16
   13698:	movt	r3, #1
   1369c:	tst	r3, r1, lsl r2
   136a0:	bne	13570 <__assert_fail@plt+0x287c>
   136a4:	b	136b8 <__assert_fail@plt+0x29c4>
   136a8:	cmp	r2, #5
   136ac:	moveq	r0, #5
   136b0:	cmpeq	r9, #5
   136b4:	beq	13570 <__assert_fail@plt+0x287c>
   136b8:	cmp	r7, #0
   136bc:	add	r9, sp, #12
   136c0:	beq	13868 <__assert_fail@plt+0x2b74>
   136c4:	ldr	r1, [r7, #4]
   136c8:	cmp	r1, #0
   136cc:	beq	1375c <__assert_fail@plt+0x2a68>
   136d0:	mov	r0, r1
   136d4:	ldr	r1, [r1, #12]
   136d8:	mov	r4, r7
   136dc:	mov	r3, #0
   136e0:	movw	r2, #1092	; 0x444
   136e4:	sub	r7, r2, r3
   136e8:	add	r7, r3, r7, lsr #1
   136ec:	add	r6, r7, r7, lsl #1
   136f0:	ldr	r5, [sl, r6, lsl #2]
   136f4:	cmp	r5, r1
   136f8:	bls	1370c <__assert_fail@plt+0x2a18>
   136fc:	sub	r2, r7, #1
   13700:	cmp	r2, r3
   13704:	bcs	136e4 <__assert_fail@plt+0x29f0>
   13708:	b	13750 <__assert_fail@plt+0x2a5c>
   1370c:	add	r3, sl, r6, lsl #2
   13710:	ldr	r6, [r3, #4]
   13714:	cmp	r6, r1
   13718:	bcs	1372c <__assert_fail@plt+0x2a38>
   1371c:	add	r3, r7, #1
   13720:	cmp	r2, r3
   13724:	bcs	136e4 <__assert_fail@plt+0x29f0>
   13728:	b	13750 <__assert_fail@plt+0x2a5c>
   1372c:	ldr	r1, [r3, #8]
   13730:	orr	r1, r1, #2
   13734:	cmp	r1, #6
   13738:	bne	13750 <__assert_fail@plt+0x2a5c>
   1373c:	ldr	r1, [r0, #4]
   13740:	mov	r7, r0
   13744:	cmp	r1, #0
   13748:	bne	136d0 <__assert_fail@plt+0x29dc>
   1374c:	b	13760 <__assert_fail@plt+0x2a6c>
   13750:	cmp	r4, #0
   13754:	bne	13764 <__assert_fail@plt+0x2a70>
   13758:	b	13868 <__assert_fail@plt+0x2b74>
   1375c:	mov	r0, r7
   13760:	mov	r4, r0
   13764:	ldr	r0, [r8, #12]
   13768:	bl	10b80 <utf8proc_get_property@plt>
   1376c:	ldrsh	r0, [r0]
   13770:	sub	r1, r0, #1
   13774:	cmp	r1, #12
   13778:	bcs	1385c <__assert_fail@plt+0x2b68>
   1377c:	mov	r5, r4
   13780:	ldr	r4, [r4, #4]
   13784:	cmp	r8, r4
   13788:	beq	137f8 <__assert_fail@plt+0x2b04>
   1378c:	mov	r6, #0
   13790:	mov	r7, r8
   13794:	cmp	r7, #0
   13798:	beq	13870 <__assert_fail@plt+0x2b7c>
   1379c:	ldr	r0, [r7, #12]
   137a0:	mov	r1, r9
   137a4:	bl	10b98 <utf8proc_encode_char@plt>
   137a8:	cmp	r0, #0
   137ac:	beq	13890 <__assert_fail@plt+0x2b9c>
   137b0:	ldr	r7, [r7, #4]
   137b4:	add	r6, r0, r6
   137b8:	cmp	r7, r4
   137bc:	bne	13794 <__assert_fail@plt+0x2aa0>
   137c0:	add	r0, r6, #1
   137c4:	bl	10c04 <malloc@plt>
   137c8:	mov	r6, r0
   137cc:	mov	r9, #0
   137d0:	cmp	r8, #0
   137d4:	beq	138b0 <__assert_fail@plt+0x2bbc>
   137d8:	ldr	r0, [r8, #12]
   137dc:	add	r1, r6, r9
   137e0:	bl	10b98 <utf8proc_encode_char@plt>
   137e4:	ldr	r8, [r8, #4]
   137e8:	add	r9, r0, r9
   137ec:	cmp	r8, r4
   137f0:	bne	137d0 <__assert_fail@plt+0x2adc>
   137f4:	b	13808 <__assert_fail@plt+0x2b14>
   137f8:	mov	r0, #1
   137fc:	bl	10c04 <malloc@plt>
   13800:	mov	r6, r0
   13804:	mov	r9, #0
   13808:	mov	r0, #0
   1380c:	mov	r1, #12
   13810:	strb	r0, [r6, r9]
   13814:	mov	r0, #1
   13818:	bl	138f0 <__assert_fail@plt+0x2bfc>
   1381c:	mov	r7, r0
   13820:	mov	r0, r6
   13824:	bl	10c94 <utf8proc_NFC@plt>
   13828:	str	r0, [r7, #8]
   1382c:	ldr	r0, [sp, #4]
   13830:	mov	r1, r7
   13834:	bl	11e08 <__assert_fail@plt+0x1114>
   13838:	mov	r0, r6
   1383c:	bl	10b74 <free@plt>
   13840:	add	r9, sp, #12
   13844:	mov	r4, r5
   13848:	ldr	r8, [r4, #4]
   1384c:	cmp	r8, #0
   13850:	str	r8, [sp, #16]
   13854:	bne	130b4 <__assert_fail@plt+0x23c0>
   13858:	b	13868 <__assert_fail@plt+0x2b74>
   1385c:	cmp	r0, #29
   13860:	beq	1377c <__assert_fail@plt+0x2a88>
   13864:	b	13848 <__assert_fail@plt+0x2b54>
   13868:	sub	sp, fp, #28
   1386c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13870:	movw	r0, #33115	; 0x815b
   13874:	movw	r1, #33108	; 0x8154
   13878:	movw	r3, #33131	; 0x816b
   1387c:	mov	r2, #249	; 0xf9
   13880:	movt	r0, #1
   13884:	movt	r1, #1
   13888:	movt	r3, #1
   1388c:	bl	10cf4 <__assert_fail@plt>
   13890:	movw	r0, #33157	; 0x8185
   13894:	movw	r1, #33108	; 0x8154
   13898:	movw	r3, #33131	; 0x816b
   1389c:	mov	r2, #253	; 0xfd
   138a0:	movt	r0, #1
   138a4:	movt	r1, #1
   138a8:	movt	r3, #1
   138ac:	bl	10cf4 <__assert_fail@plt>
   138b0:	movw	r0, #33115	; 0x815b
   138b4:	movw	r1, #33108	; 0x8154
   138b8:	movw	r3, #33176	; 0x8198
   138bc:	movw	r2, #269	; 0x10d
   138c0:	movt	r0, #1
   138c4:	movt	r1, #1
   138c8:	movt	r3, #1
   138cc:	bl	10cf4 <__assert_fail@plt>
   138d0:	push	{r4, sl, fp, lr}
   138d4:	add	fp, sp, #8
   138d8:	mov	r4, r0
   138dc:	ldr	r0, [r0, #8]
   138e0:	bl	10b74 <free@plt>
   138e4:	mov	r0, r4
   138e8:	pop	{r4, sl, fp, lr}
   138ec:	b	10b74 <free@plt>
   138f0:	push	{fp, lr}
   138f4:	mov	fp, sp
   138f8:	bl	10b44 <calloc@plt>
   138fc:	cmp	r0, #0
   13900:	popne	{fp, pc}
   13904:	movw	r0, #33200	; 0x81b0
   13908:	movt	r0, #1
   1390c:	bl	13e28 <error@@Base>
   13910:	push	{r4, r5, r6, sl, fp, lr}
   13914:	add	fp, sp, #16
   13918:	ldrb	r3, [r0]
   1391c:	ldrb	ip, [r1]
   13920:	mov	r2, r0
   13924:	mov	r0, #0
   13928:	cmp	r3, #0
   1392c:	beq	1396c <__assert_fail@plt+0x2c78>
   13930:	add	r6, r2, #1
   13934:	add	lr, r1, #1
   13938:	mov	r2, #0
   1393c:	uxtb	r4, ip
   13940:	uxtb	r5, r3
   13944:	cmp	r5, r4
   13948:	bne	1397c <__assert_fail@plt+0x2c88>
   1394c:	ldrb	r3, [r6, r2]
   13950:	ldrb	ip, [lr, r2]
   13954:	add	r2, r2, #1
   13958:	cmp	r3, #0
   1395c:	bne	1393c <__assert_fail@plt+0x2c48>
   13960:	cmp	ip, #0
   13964:	bne	13978 <__assert_fail@plt+0x2c84>
   13968:	pop	{r4, r5, r6, sl, fp, pc}
   1396c:	mov	r2, #0
   13970:	cmp	ip, #0
   13974:	beq	13968 <__assert_fail@plt+0x2c74>
   13978:	mov	r3, #0
   1397c:	ldrb	r1, [r1, r2]
   13980:	uxtb	r2, r3
   13984:	mov	r0, #1
   13988:	cmp	r2, r1
   1398c:	mvncc	r0, #0
   13990:	pop	{r4, r5, r6, sl, fp, pc}
   13994:	push	{r4, r5, fp, lr}
   13998:	add	fp, sp, #8
   1399c:	mov	r5, r1
   139a0:	cmp	r0, #0
   139a4:	beq	139d8 <__assert_fail@plt+0x2ce4>
   139a8:	mov	r1, r5
   139ac:	mov	r4, r0
   139b0:	bl	10b68 <fopen@plt>
   139b4:	cmp	r0, #0
   139b8:	popne	{r4, r5, fp, pc}
   139bc:	ldrb	r0, [r5]
   139c0:	cmp	r0, #119	; 0x77
   139c4:	bne	139fc <__assert_fail@plt+0x2d08>
   139c8:	movw	r0, #33226	; 0x81ca
   139cc:	mov	r1, r4
   139d0:	movt	r0, #1
   139d4:	bl	13e68 <error@@Base+0x40>
   139d8:	ldrb	r0, [r5]
   139dc:	movw	r1, #37104	; 0x90f0
   139e0:	movw	r2, #37108	; 0x90f4
   139e4:	movt	r1, #2
   139e8:	movt	r2, #2
   139ec:	cmp	r0, #114	; 0x72
   139f0:	moveq	r2, r1
   139f4:	ldr	r0, [r2]
   139f8:	pop	{r4, r5, fp, pc}
   139fc:	movw	r0, #33248	; 0x81e0
   13a00:	mov	r1, r4
   13a04:	movt	r0, #1
   13a08:	bl	13e68 <error@@Base+0x40>
   13a0c:	movw	r1, #37104	; 0x90f0
   13a10:	movt	r1, #2
   13a14:	ldr	r1, [r1]
   13a18:	cmp	r1, r0
   13a1c:	bxeq	lr
   13a20:	movw	r1, #37108	; 0x90f4
   13a24:	movt	r1, #2
   13a28:	ldr	r1, [r1]
   13a2c:	cmp	r1, r0
   13a30:	beq	13a38 <__assert_fail@plt+0x2d44>
   13a34:	b	10c88 <fclose@plt>
   13a38:	bx	lr
   13a3c:	push	{fp, lr}
   13a40:	mov	fp, sp
   13a44:	sub	sp, sp, #88	; 0x58
   13a48:	mov	r1, r0
   13a4c:	mov	r2, sp
   13a50:	mov	r0, #3
   13a54:	bl	10bd4 <__xstat@plt>
   13a58:	clz	r0, r0
   13a5c:	lsr	r0, r0, #5
   13a60:	mov	sp, fp
   13a64:	pop	{fp, pc}
   13a68:	push	{r4, r5, fp, lr}
   13a6c:	add	fp, sp, #8
   13a70:	sub	sp, sp, #104	; 0x68
   13a74:	movw	r0, #45308	; 0xb0fc
   13a78:	movt	r0, #2
   13a7c:	ldrh	r1, [r0]
   13a80:	add	r5, r1, #1
   13a84:	strh	r5, [r0]
   13a88:	movw	r0, #5064	; 0x13c8
   13a8c:	movt	r0, #3
   13a90:	ldr	r4, [r0]
   13a94:	bl	10c34 <getpid@plt>
   13a98:	movw	r1, #33289	; 0x8209
   13a9c:	mov	r3, r0
   13aa0:	sxth	r0, r5
   13aa4:	add	r5, sp, #4
   13aa8:	mov	r2, r4
   13aac:	movt	r1, #1
   13ab0:	str	r0, [sp]
   13ab4:	mov	r0, r5
   13ab8:	bl	10cac <sprintf@plt>
   13abc:	mov	r0, r5
   13ac0:	bl	10ba4 <strdup@plt>
   13ac4:	mov	r4, r0
   13ac8:	bl	10bbc <unlink@plt>
   13acc:	mov	r0, r4
   13ad0:	sub	sp, fp, #8
   13ad4:	pop	{r4, r5, fp, pc}
   13ad8:	push	{r4, sl, fp, lr}
   13adc:	add	fp, sp, #8
   13ae0:	mov	r4, r0
   13ae4:	bl	10c64 <strlen@plt>
   13ae8:	sub	r0, r0, #1
   13aec:	sxth	r0, r0
   13af0:	cmp	r0, #0
   13af4:	bmi	13b04 <__assert_fail@plt+0x2e10>
   13af8:	ldrb	r1, [r4, r0]
   13afc:	cmp	r1, #47	; 0x2f
   13b00:	bne	13ae8 <__assert_fail@plt+0x2df4>
   13b04:	add	r0, r0, r4
   13b08:	add	r0, r0, #1
   13b0c:	pop	{r4, sl, fp, pc}
   13b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b14:	add	fp, sp, #28
   13b18:	sub	sp, sp, #12
   13b1c:	ldr	r4, [r1]
   13b20:	str	r0, [sp, #8]
   13b24:	mov	r7, r3
   13b28:	str	r2, [sp]
   13b2c:	str	r1, [sp, #4]
   13b30:	mov	r0, r4
   13b34:	bl	10c64 <strlen@plt>
   13b38:	sub	r0, r0, #1
   13b3c:	sxth	r0, r0
   13b40:	cmp	r0, #0
   13b44:	bmi	13b54 <__assert_fail@plt+0x2e60>
   13b48:	ldrb	r1, [r4, r0]
   13b4c:	cmp	r1, #47	; 0x2f
   13b50:	bne	13b38 <__assert_fail@plt+0x2e44>
   13b54:	add	r0, r0, r4
   13b58:	movw	r1, #5064	; 0x13c8
   13b5c:	movw	r4, #16112	; 0x3ef0
   13b60:	movt	r1, #3
   13b64:	movt	r4, #1
   13b68:	add	r0, r0, #1
   13b6c:	str	r0, [r1]
   13b70:	mov	r0, #2
   13b74:	mov	r1, r4
   13b78:	bl	10c1c <__sysv_signal@plt>
   13b7c:	mov	r0, #15
   13b80:	mov	r1, r4
   13b84:	bl	10c1c <__sysv_signal@plt>
   13b88:	ldr	r0, [sp, #8]
   13b8c:	ldr	r6, [r0]
   13b90:	cmp	r6, #1
   13b94:	bne	13bac <__assert_fail@plt+0x2eb8>
   13b98:	movw	r0, #37084	; 0x90dc
   13b9c:	movt	r0, #2
   13ba0:	ldrb	r0, [r0]
   13ba4:	cmp	r0, #0
   13ba8:	bne	13dac <__assert_fail@plt+0x30b8>
   13bac:	ldr	ip, [sp, #4]
   13bb0:	mov	r8, #0
   13bb4:	cmp	r6, #2
   13bb8:	blt	13db4 <__assert_fail@plt+0x30c0>
   13bbc:	cmp	r7, #0
   13bc0:	beq	13d34 <__assert_fail@plt+0x3040>
   13bc4:	mov	r8, #0
   13bc8:	mov	r5, #1
   13bcc:	mov	r9, #1
   13bd0:	ldr	r4, [ip, r5, lsl #2]
   13bd4:	ldrb	r0, [r4]
   13bd8:	cmp	r0, #45	; 0x2d
   13bdc:	beq	13c0c <__assert_fail@plt+0x2f18>
   13be0:	sxth	r0, r8
   13be4:	add	r8, r8, #1
   13be8:	str	r4, [ip, r0, lsl #2]
   13bec:	add	r9, r9, #1
   13bf0:	sxth	r5, r9
   13bf4:	cmp	r6, r5
   13bf8:	ble	13db4 <__assert_fail@plt+0x30c0>
   13bfc:	ldr	r4, [ip, r5, lsl #2]
   13c00:	ldrb	r0, [r4]
   13c04:	cmp	r0, #45	; 0x2d
   13c08:	bne	13be0 <__assert_fail@plt+0x2eec>
   13c0c:	ldrb	sl, [r4, #1]
   13c10:	cmp	sl, #0
   13c14:	beq	13be0 <__assert_fail@plt+0x2eec>
   13c18:	mov	r0, r4
   13c1c:	bl	10c64 <strlen@plt>
   13c20:	mov	r2, r0
   13c24:	movw	r0, #33318	; 0x8226
   13c28:	mov	r1, r4
   13c2c:	movt	r0, #1
   13c30:	bl	10cd0 <strncmp@plt>
   13c34:	cmp	r0, #0
   13c38:	beq	13dac <__assert_fail@plt+0x30b8>
   13c3c:	ldr	ip, [sp, #4]
   13c40:	add	r1, r5, #1
   13c44:	ldrb	r2, [r7]
   13c48:	mov	r0, #0
   13c4c:	cmp	r1, r6
   13c50:	ldrlt	r0, [ip, r1, lsl #2]
   13c54:	cmp	r2, #0
   13c58:	beq	13dc8 <__assert_fail@plt+0x30d4>
   13c5c:	mov	r1, #0
   13c60:	cmp	sl, r2
   13c64:	beq	13c8c <__assert_fail@plt+0x2f98>
   13c68:	mov	r2, #1
   13c6c:	sxth	r1, r2
   13c70:	add	r3, r1, r1, lsl #1
   13c74:	ldrb	r3, [r7, r3, lsl #2]
   13c78:	cmp	r3, #0
   13c7c:	beq	13dc8 <__assert_fail@plt+0x30d4>
   13c80:	add	r2, r2, #1
   13c84:	cmp	sl, r3
   13c88:	bne	13c6c <__assert_fail@plt+0x2f78>
   13c8c:	add	r1, r1, r1, lsl #1
   13c90:	add	r3, r7, r1, lsl #2
   13c94:	ldr	r1, [r3, #4]
   13c98:	cmp	r1, #0
   13c9c:	beq	13cec <__assert_fail@plt+0x2ff8>
   13ca0:	mov	r2, r4
   13ca4:	cmp	r0, #0
   13ca8:	ldrb	r5, [r2, #2]!
   13cac:	cmpeq	r5, #0
   13cb0:	beq	13cec <__assert_fail@plt+0x2ff8>
   13cb4:	ldr	r3, [r1]
   13cb8:	cmp	r3, #0
   13cbc:	bne	13dd8 <__assert_fail@plt+0x30e4>
   13cc0:	cmp	r5, #0
   13cc4:	movne	r0, r2
   13cc8:	str	r0, [r1]
   13ccc:	ldrb	r0, [r2]
   13cd0:	cmp	r0, #0
   13cd4:	addeq	r9, r9, #1
   13cd8:	add	r9, r9, #1
   13cdc:	sxth	r5, r9
   13ce0:	cmp	r6, r5
   13ce4:	bgt	13bfc <__assert_fail@plt+0x2f08>
   13ce8:	b	13db4 <__assert_fail@plt+0x30c0>
   13cec:	ldr	r0, [r3, #8]
   13cf0:	cmp	r0, #0
   13cf4:	beq	13dc8 <__assert_fail@plt+0x30d4>
   13cf8:	ldrb	r1, [r4, #2]
   13cfc:	cmp	r1, #0
   13d00:	bne	13dc8 <__assert_fail@plt+0x30d4>
   13d04:	ldrb	r1, [r0]
   13d08:	cmp	r1, #0
   13d0c:	bne	13dd8 <__assert_fail@plt+0x30e4>
   13d10:	mov	r1, #1
   13d14:	strb	r1, [r0]
   13d18:	ldr	r0, [sp, #8]
   13d1c:	ldr	r6, [r0]
   13d20:	add	r9, r9, #1
   13d24:	sxth	r5, r9
   13d28:	cmp	r6, r5
   13d2c:	bgt	13bfc <__assert_fail@plt+0x2f08>
   13d30:	b	13db4 <__assert_fail@plt+0x30c0>
   13d34:	mov	r1, #1
   13d38:	mov	r8, #0
   13d3c:	mov	r0, #1
   13d40:	ldr	r4, [ip, r1, lsl #2]
   13d44:	ldrb	r1, [r4]
   13d48:	cmp	r1, #45	; 0x2d
   13d4c:	beq	13d7c <__assert_fail@plt+0x3088>
   13d50:	sxth	r1, r8
   13d54:	add	r0, r0, #1
   13d58:	add	r8, r8, #1
   13d5c:	str	r4, [ip, r1, lsl #2]
   13d60:	sxth	r1, r0
   13d64:	cmp	r6, r1
   13d68:	ble	13db4 <__assert_fail@plt+0x30c0>
   13d6c:	ldr	r4, [ip, r1, lsl #2]
   13d70:	ldrb	r1, [r4]
   13d74:	cmp	r1, #45	; 0x2d
   13d78:	bne	13d50 <__assert_fail@plt+0x305c>
   13d7c:	ldrb	r1, [r4, #1]
   13d80:	cmp	r1, #0
   13d84:	beq	13d50 <__assert_fail@plt+0x305c>
   13d88:	mov	r0, r4
   13d8c:	bl	10c64 <strlen@plt>
   13d90:	mov	r2, r0
   13d94:	movw	r0, #33318	; 0x8226
   13d98:	mov	r1, r4
   13d9c:	movt	r0, #1
   13da0:	bl	10cd0 <strncmp@plt>
   13da4:	cmp	r0, #0
   13da8:	bne	13dc8 <__assert_fail@plt+0x30d4>
   13dac:	ldr	r0, [sp]
   13db0:	bl	13f20 <error@@Base+0xf8>
   13db4:	ldr	r1, [sp, #8]
   13db8:	sxth	r0, r8
   13dbc:	str	r0, [r1]
   13dc0:	sub	sp, fp, #28
   13dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc8:	movw	r0, #33339	; 0x823b
   13dcc:	mov	r1, r4
   13dd0:	movt	r0, #1
   13dd4:	bl	13e68 <error@@Base+0x40>
   13dd8:	movw	r0, #33354	; 0x824a
   13ddc:	mov	r1, r4
   13de0:	movt	r0, #1
   13de4:	bl	13e68 <error@@Base+0x40>
   13de8:	push	{fp, lr}
   13dec:	mov	fp, sp
   13df0:	mov	r0, #0
   13df4:	bl	13df8 <__assert_fail@plt+0x3104>
   13df8:	push	{fp, lr}
   13dfc:	mov	fp, sp
   13e00:	mov	r4, r0
   13e04:	movw	r0, #5068	; 0x13cc
   13e08:	movt	r0, #3
   13e0c:	ldr	r0, [r0]
   13e10:	cmp	r0, #0
   13e14:	beq	13e1c <__assert_fail@plt+0x3128>
   13e18:	blx	r0
   13e1c:	bl	13f70 <error@@Base+0x148>
   13e20:	mov	r0, r4
   13e24:	bl	10c40 <exit@plt>

00013e28 <error@@Base>:
   13e28:	push	{fp, lr}
   13e2c:	mov	fp, sp
   13e30:	mov	r3, r0
   13e34:	movw	r0, #5064	; 0x13c8
   13e38:	movw	r1, #33268	; 0x81f4
   13e3c:	movt	r0, #3
   13e40:	movt	r1, #1
   13e44:	ldr	r2, [r0]
   13e48:	movw	r0, #37096	; 0x90e8
   13e4c:	movt	r0, #2
   13e50:	ldr	r0, [r0]
   13e54:	bl	10c70 <fprintf@plt>
   13e58:	movw	r0, #37088	; 0x90e0
   13e5c:	movt	r0, #2
   13e60:	ldr	r0, [r0]
   13e64:	bl	13df8 <__assert_fail@plt+0x3104>
   13e68:	push	{fp, lr}
   13e6c:	mov	fp, sp
   13e70:	sub	sp, sp, #8
   13e74:	mov	r3, r0
   13e78:	movw	r0, #5064	; 0x13c8
   13e7c:	str	r1, [sp]
   13e80:	movw	r1, #33276	; 0x81fc
   13e84:	movt	r0, #3
   13e88:	movt	r1, #1
   13e8c:	ldr	r2, [r0]
   13e90:	movw	r0, #37096	; 0x90e8
   13e94:	movt	r0, #2
   13e98:	ldr	r0, [r0]
   13e9c:	bl	10c70 <fprintf@plt>
   13ea0:	movw	r0, #37088	; 0x90e0
   13ea4:	movt	r0, #2
   13ea8:	ldr	r0, [r0]
   13eac:	bl	13df8 <__assert_fail@plt+0x3104>
   13eb0:	push	{fp, lr}
   13eb4:	mov	fp, sp
   13eb8:	sub	sp, sp, #8
   13ebc:	mov	r3, r0
   13ec0:	movw	r0, #5064	; 0x13c8
   13ec4:	str	r1, [sp]
   13ec8:	movw	r1, #33276	; 0x81fc
   13ecc:	movt	r0, #3
   13ed0:	movt	r1, #1
   13ed4:	ldr	r2, [r0]
   13ed8:	movw	r0, #37096	; 0x90e8
   13edc:	movt	r0, #2
   13ee0:	ldr	r0, [r0]
   13ee4:	bl	10c70 <fprintf@plt>
   13ee8:	mov	sp, fp
   13eec:	pop	{fp, pc}
   13ef0:	push	{fp, lr}
   13ef4:	mov	fp, sp
   13ef8:	movw	r0, #45310	; 0xb0fe
   13efc:	movt	r0, #2
   13f00:	ldrb	r1, [r0]
   13f04:	cmp	r1, #1
   13f08:	popeq	{fp, pc}
   13f0c:	mov	r1, #1
   13f10:	strb	r1, [r0]
   13f14:	movw	r0, #33303	; 0x8217
   13f18:	movt	r0, #1
   13f1c:	bl	13e28 <error@@Base>
   13f20:	push	{fp, lr}
   13f24:	mov	fp, sp
   13f28:	mov	r3, r0
   13f2c:	movw	r0, #5060	; 0x13c4
   13f30:	movt	r0, #3
   13f34:	ldr	r0, [r0]
   13f38:	cmp	r0, #0
   13f3c:	bne	13f68 <error@@Base+0x140>
   13f40:	movw	r0, #5064	; 0x13c8
   13f44:	movw	r1, #33324	; 0x822c
   13f48:	movt	r0, #3
   13f4c:	movt	r1, #1
   13f50:	ldr	r2, [r0]
   13f54:	movw	r0, #37096	; 0x90e8
   13f58:	movt	r0, #2
   13f5c:	ldr	r0, [r0]
   13f60:	bl	10c70 <fprintf@plt>
   13f64:	bl	13de8 <__assert_fail@plt+0x30f4>
   13f68:	blx	r0
   13f6c:	bl	13de8 <__assert_fail@plt+0x30f4>
   13f70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f74:	add	fp, sp, #24
   13f78:	sub	sp, sp, #104	; 0x68
   13f7c:	movw	r8, #45308	; 0xb0fc
   13f80:	movt	r8, #2
   13f84:	ldrsh	r0, [r8]
   13f88:	cmp	r0, #1
   13f8c:	blt	13ff8 <error@@Base+0x1d0>
   13f90:	movw	r9, #5064	; 0x13c8
   13f94:	movw	r5, #33289	; 0x8209
   13f98:	mov	r7, #1
   13f9c:	add	r4, sp, #4
   13fa0:	movt	r9, #3
   13fa4:	movt	r5, #1
   13fa8:	ldr	r6, [r9]
   13fac:	bl	10c34 <getpid@plt>
   13fb0:	mov	r3, r0
   13fb4:	sxth	r0, r7
   13fb8:	mov	r1, r5
   13fbc:	mov	r2, r6
   13fc0:	str	r0, [sp]
   13fc4:	mov	r0, r4
   13fc8:	bl	10cac <sprintf@plt>
   13fcc:	mov	r0, r4
   13fd0:	bl	10ba4 <strdup@plt>
   13fd4:	mov	r6, r0
   13fd8:	bl	10bbc <unlink@plt>
   13fdc:	mov	r0, r6
   13fe0:	bl	10b74 <free@plt>
   13fe4:	add	r0, r7, #1
   13fe8:	sxth	r7, r0
   13fec:	ldrsh	r0, [r8]
   13ff0:	cmp	r7, r0
   13ff4:	ble	13fa8 <error@@Base+0x180>
   13ff8:	sub	sp, fp, #24
   13ffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14000:	push	{r4, r5, r6, sl, fp, lr}
   14004:	add	fp, sp, #16
   14008:	mov	r5, r1
   1400c:	mov	r6, r0
   14010:	mov	r0, #1
   14014:	mov	r1, #16
   14018:	mov	r4, r2
   1401c:	bl	138f0 <__assert_fail@plt+0x2bfc>
   14020:	str	r4, [r0, #12]
   14024:	mov	r1, r0
   14028:	strb	r5, [r0, #8]
   1402c:	mov	r0, r6
   14030:	pop	{r4, r5, r6, sl, fp, lr}
   14034:	b	11e08 <__assert_fail@plt+0x1114>
   14038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1403c:	add	fp, sp, #28
   14040:	sub	sp, sp, #124	; 0x7c
   14044:	mov	r5, r2
   14048:	mov	r2, r1
   1404c:	cmp	r1, #0
   14050:	str	r0, [sp, #16]
   14054:	bne	14064 <error@@Base+0x23c>
   14058:	ldrb	r0, [r5]
   1405c:	cmp	r0, #0
   14060:	bne	1445c <error@@Base+0x634>
   14064:	ldr	r0, [sp, #16]
   14068:	movw	r1, #19088	; 0x4a90
   1406c:	movt	r1, #1
   14070:	ldr	r0, [r0, #4]
   14074:	str	r0, [sp, #4]
   14078:	mov	r0, r2
   1407c:	bl	13994 <__assert_fail@plt+0x2ca0>
   14080:	mov	r6, r0
   14084:	ldrb	r0, [r5]
   14088:	cmp	r0, #0
   1408c:	beq	140d4 <error@@Base+0x2ac>
   14090:	add	r0, sp, #20
   14094:	mov	r1, #99	; 0x63
   14098:	mov	r2, r6
   1409c:	bl	10b8c <fgets@plt>
   140a0:	cmp	r0, #0
   140a4:	beq	140c4 <error@@Base+0x29c>
   140a8:	movw	r1, #33439	; 0x829f
   140ac:	add	r0, sp, #20
   140b0:	mov	r2, #51	; 0x33
   140b4:	movt	r1, #1
   140b8:	bl	10c4c <bcmp@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	143e8 <error@@Base+0x5c0>
   140c4:	mov	r0, r6
   140c8:	bl	10bb0 <rewind@plt>
   140cc:	mov	r7, #0
   140d0:	strb	r7, [r5, #11]
   140d4:	ldr	r8, [r5, #4]
   140d8:	ldrb	r4, [r5, #1]
   140dc:	mov	r0, r6
   140e0:	str	r5, [sp, #8]
   140e4:	cmp	r8, #0
   140e8:	movweq	r8, #94	; 0x5e
   140ec:	bl	10ce8 <getc@plt>
   140f0:	cmn	r0, #1
   140f4:	beq	14258 <error@@Base+0x430>
   140f8:	add	r1, sp, #20
   140fc:	cmp	r4, #0
   14100:	add	r1, r1, #1
   14104:	str	r1, [sp, #12]
   14108:	beq	141bc <error@@Base+0x394>
   1410c:	mov	sl, #0
   14110:	sub	r7, fp, #32
   14114:	b	1412c <error@@Base+0x304>
   14118:	mov	r0, r6
   1411c:	bl	10ce8 <getc@plt>
   14120:	cmn	r0, #1
   14124:	mov	sl, r4
   14128:	beq	14258 <error@@Base+0x430>
   1412c:	movw	r1, #36352	; 0x8e00
   14130:	movt	r1, #2
   14134:	add	r1, r1, r0
   14138:	ldrsb	r9, [r1]
   1413c:	cmp	r9, #1
   14140:	blt	1443c <error@@Base+0x614>
   14144:	strb	r0, [sp, #20]
   14148:	beq	1416c <error@@Base+0x344>
   1414c:	ldr	r0, [sp, #12]
   14150:	sub	r4, r9, #1
   14154:	mov	r1, #1
   14158:	mov	r3, r6
   1415c:	mov	r2, r4
   14160:	bl	10bec <fread@plt>
   14164:	cmp	r0, r4
   14168:	bne	14450 <error@@Base+0x628>
   1416c:	add	r0, sp, #20
   14170:	mov	r1, #4
   14174:	mov	r2, r7
   14178:	bl	10bf8 <utf8proc_iterate@plt>
   1417c:	cmp	r0, r9
   14180:	bne	14448 <error@@Base+0x620>
   14184:	ldr	r5, [fp, #-32]	; 0xffffffe0
   14188:	mov	r4, #1
   1418c:	cmp	r5, r8
   14190:	beq	14118 <error@@Base+0x2f0>
   14194:	mov	r0, #1
   14198:	mov	r1, #16
   1419c:	bl	138f0 <__assert_fail@plt+0x2bfc>
   141a0:	str	r5, [r0, #12]
   141a4:	mov	r1, r0
   141a8:	strb	sl, [r0, #8]
   141ac:	ldr	r0, [sp, #16]
   141b0:	bl	11e08 <__assert_fail@plt+0x1114>
   141b4:	mov	r4, #0
   141b8:	b	14118 <error@@Base+0x2f0>
   141bc:	movw	r8, #36352	; 0x8e00
   141c0:	add	r9, sp, #20
   141c4:	sub	sl, fp, #32
   141c8:	mov	r5, #0
   141cc:	movt	r8, #2
   141d0:	add	r1, r8, r0
   141d4:	ldrsb	r7, [r1]
   141d8:	cmp	r7, #0
   141dc:	ble	1443c <error@@Base+0x614>
   141e0:	cmp	r7, #1
   141e4:	strb	r0, [sp, #20]
   141e8:	beq	1420c <error@@Base+0x3e4>
   141ec:	ldr	r0, [sp, #12]
   141f0:	sub	r4, r7, #1
   141f4:	mov	r1, #1
   141f8:	mov	r3, r6
   141fc:	mov	r2, r4
   14200:	bl	10bec <fread@plt>
   14204:	cmp	r0, r4
   14208:	bne	14450 <error@@Base+0x628>
   1420c:	mov	r0, r9
   14210:	mov	r1, #4
   14214:	mov	r2, sl
   14218:	bl	10bf8 <utf8proc_iterate@plt>
   1421c:	cmp	r0, r7
   14220:	bne	14448 <error@@Base+0x620>
   14224:	ldr	r4, [fp, #-32]	; 0xffffffe0
   14228:	mov	r0, #1
   1422c:	mov	r1, #16
   14230:	bl	138f0 <__assert_fail@plt+0x2bfc>
   14234:	str	r4, [r0, #12]
   14238:	mov	r1, r0
   1423c:	strb	r5, [r0, #8]
   14240:	ldr	r0, [sp, #16]
   14244:	bl	11e08 <__assert_fail@plt+0x1114>
   14248:	mov	r0, r6
   1424c:	bl	10ce8 <getc@plt>
   14250:	cmn	r0, #1
   14254:	bne	141d0 <error@@Base+0x3a8>
   14258:	mov	r0, r6
   1425c:	bl	13a0c <__assert_fail@plt+0x2d18>
   14260:	ldr	r8, [sp, #8]
   14264:	ldr	r9, [sp, #4]
   14268:	ldrb	r0, [r8, #9]
   1426c:	cmp	r0, #0
   14270:	beq	143a4 <error@@Base+0x57c>
   14274:	cmp	r9, #0
   14278:	ldr	r0, [sp, #16]
   1427c:	addne	r0, r9, #4
   14280:	ldr	r6, [r0]
   14284:	cmp	r6, #0
   14288:	beq	143a4 <error@@Base+0x57c>
   1428c:	mov	r4, #32
   14290:	mov	r7, r6
   14294:	b	142a8 <error@@Base+0x480>
   14298:	str	r4, [r7, #12]
   1429c:	ldr	r7, [r7, #4]
   142a0:	cmp	r7, #0
   142a4:	beq	14300 <error@@Base+0x4d8>
   142a8:	ldr	r5, [r7, #12]
   142ac:	mov	r0, r5
   142b0:	bl	10b80 <utf8proc_get_property@plt>
   142b4:	cmp	r5, #10
   142b8:	ble	142d4 <error@@Base+0x4ac>
   142bc:	sub	r1, r5, #11
   142c0:	cmp	r1, #3
   142c4:	bcc	14298 <error@@Base+0x470>
   142c8:	cmp	r5, #160	; 0xa0
   142cc:	beq	14298 <error@@Base+0x470>
   142d0:	b	142e4 <error@@Base+0x4bc>
   142d4:	cmp	r5, #9
   142d8:	beq	14298 <error@@Base+0x470>
   142dc:	cmp	r5, #10
   142e0:	beq	1429c <error@@Base+0x474>
   142e4:	ldrsh	r0, [r0]
   142e8:	sub	r0, r0, #23
   142ec:	cmp	r0, #2
   142f0:	strls	r4, [r7, #12]
   142f4:	ldr	r7, [r7, #4]
   142f8:	cmp	r7, #0
   142fc:	bne	142a8 <error@@Base+0x480>
   14300:	mov	r4, #0
   14304:	ldr	r1, [r6, #12]
   14308:	ldr	r5, [r6, #4]
   1430c:	cmp	r1, #32
   14310:	bne	14350 <error@@Base+0x528>
   14314:	tst	r4, #255	; 0xff
   14318:	cmpne	r5, #0
   1431c:	bne	14378 <error@@Base+0x550>
   14320:	ldr	r0, [sp, #16]
   14324:	mov	r1, r6
   14328:	bl	11f00 <__assert_fail@plt+0x120c>
   1432c:	mov	r0, r6
   14330:	bl	10b74 <free@plt>
   14334:	cmp	r5, #0
   14338:	mov	r6, r5
   1433c:	beq	143a4 <error@@Base+0x57c>
   14340:	ldr	r1, [r6, #12]
   14344:	ldr	r5, [r6, #4]
   14348:	cmp	r1, #32
   1434c:	beq	14314 <error@@Base+0x4ec>
   14350:	subs	r0, r1, #10
   14354:	movwne	r0, #1
   14358:	tst	r4, #255	; 0xff
   1435c:	cmpeq	r1, #10
   14360:	beq	14320 <error@@Base+0x4f8>
   14364:	mov	r4, r0
   14368:	cmp	r5, #0
   1436c:	mov	r6, r5
   14370:	bne	14340 <error@@Base+0x518>
   14374:	b	143a4 <error@@Base+0x57c>
   14378:	ldr	r1, [r5, #12]
   1437c:	cmp	r1, #10
   14380:	beq	14320 <error@@Base+0x4f8>
   14384:	mov	r0, #1
   14388:	cmp	r1, #32
   1438c:	bne	14364 <error@@Base+0x53c>
   14390:	ldrb	r0, [r6, #8]
   14394:	ldrb	r1, [r5, #8]
   14398:	orr	r0, r1, r0
   1439c:	strb	r0, [r5, #8]
   143a0:	b	14320 <error@@Base+0x4f8>
   143a4:	ldrb	r0, [r8, #10]
   143a8:	cmp	r0, #0
   143ac:	beq	143e0 <error@@Base+0x5b8>
   143b0:	cmp	r9, #0
   143b4:	ldr	r0, [sp, #16]
   143b8:	addne	r0, r9, #4
   143bc:	ldr	r4, [r0]
   143c0:	cmp	r4, #0
   143c4:	beq	143e0 <error@@Base+0x5b8>
   143c8:	ldr	r0, [r4, #12]
   143cc:	bl	10bc8 <utf8proc_tolower@plt>
   143d0:	str	r0, [r4, #12]
   143d4:	ldr	r4, [r4, #4]
   143d8:	cmp	r4, #0
   143dc:	bne	143c8 <error@@Base+0x5a0>
   143e0:	sub	sp, fp, #28
   143e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143e8:	movw	r8, #33495	; 0x82d7
   143ec:	mov	r4, #0
   143f0:	add	r9, sp, #20
   143f4:	mov	r7, #1
   143f8:	movt	r8, #1
   143fc:	mov	r0, r9
   14400:	mov	r1, #99	; 0x63
   14404:	mov	r2, r6
   14408:	bl	10b8c <fgets@plt>
   1440c:	cmp	r0, #0
   14410:	beq	140d0 <error@@Base+0x2a8>
   14414:	mov	r0, r9
   14418:	mov	r1, r8
   1441c:	mov	r2, #56	; 0x38
   14420:	bl	10c4c <bcmp@plt>
   14424:	cmp	r0, #0
   14428:	addeq	r4, r4, #1
   1442c:	uxth	r0, r4
   14430:	cmp	r0, #2
   14434:	bcc	143fc <error@@Base+0x5d4>
   14438:	b	140d0 <error@@Base+0x2a8>
   1443c:	movw	r0, #33551	; 0x830f
   14440:	movt	r0, #1
   14444:	bl	13e28 <error@@Base>
   14448:	bl	10cb8 <utf8proc_errmsg@plt>
   1444c:	bl	13e28 <error@@Base>
   14450:	movw	r0, #33575	; 0x8327
   14454:	movt	r0, #1
   14458:	bl	13e28 <error@@Base>
   1445c:	movw	r0, #33371	; 0x825b
   14460:	movw	r1, #33387	; 0x826b
   14464:	movt	r0, #1
   14468:	movt	r1, #1
   1446c:	bl	13e68 <error@@Base+0x40>
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	bl	10b98 <utf8proc_encode_char@plt>
   1447c:	cmp	r0, #0
   14480:	sxtbgt	r0, r0
   14484:	popgt	{fp, pc}
   14488:	movw	r0, #33397	; 0x8275
   1448c:	movt	r0, #1
   14490:	bl	13e28 <error@@Base>
   14494:	push	{r4, r5, r6, r7, fp, lr}
   14498:	add	fp, sp, #16
   1449c:	mov	r6, r3
   144a0:	mov	r4, r2
   144a4:	mov	r5, r1
   144a8:	tst	r0, #255	; 0xff
   144ac:	beq	144f4 <error@@Base+0x6cc>
   144b0:	mov	r0, #94	; 0x5e
   144b4:	mov	r1, r4
   144b8:	bl	10b98 <utf8proc_encode_char@plt>
   144bc:	cmp	r0, #0
   144c0:	ble	1456c <error@@Base+0x744>
   144c4:	sxtb	r7, r0
   144c8:	cmp	r5, #10
   144cc:	bne	14500 <error@@Base+0x6d8>
   144d0:	movw	r0, #33287	; 0x8207
   144d4:	movw	r1, #33420	; 0x828c
   144d8:	tst	r6, #255	; 0xff
   144dc:	movt	r0, #1
   144e0:	movt	r1, #1
   144e4:	moveq	r1, r0
   144e8:	add	r0, r4, r7
   144ec:	pop	{r4, r5, r6, r7, fp, lr}
   144f0:	b	10cac <sprintf@plt>
   144f4:	mov	r7, #0
   144f8:	cmp	r5, #10
   144fc:	beq	144d0 <error@@Base+0x6a8>
   14500:	mov	r0, r5
   14504:	bl	10b80 <utf8proc_get_property@plt>
   14508:	cmp	r5, #32
   1450c:	beq	14520 <error@@Base+0x6f8>
   14510:	ldrsh	r0, [r0]
   14514:	sub	r1, r0, #1
   14518:	cmp	r1, #22
   1451c:	bcs	14578 <error@@Base+0x750>
   14520:	mov	r0, r5
   14524:	bl	10c58 <utf8proc_category@plt>
   14528:	sub	r0, r0, #6
   1452c:	cmp	r0, #2
   14530:	bhi	1454c <error@@Base+0x724>
   14534:	add	r1, r4, r7
   14538:	movw	r0, #9676	; 0x25cc
   1453c:	bl	10b98 <utf8proc_encode_char@plt>
   14540:	cmp	r0, #0
   14544:	ble	1456c <error@@Base+0x744>
   14548:	sxtab	r7, r7, r0
   1454c:	add	r1, r4, r7
   14550:	mov	r0, r5
   14554:	bl	10b98 <utf8proc_encode_char@plt>
   14558:	cmp	r0, #0
   1455c:	sxtabgt	r0, r7, r0
   14560:	movgt	r1, #0
   14564:	strbgt	r1, [r4, r0]
   14568:	popgt	{r4, r5, r6, r7, fp, pc}
   1456c:	movw	r0, #33397	; 0x8275
   14570:	movt	r0, #1
   14574:	bl	13e28 <error@@Base>
   14578:	cmp	r0, #29
   1457c:	beq	14520 <error@@Base+0x6f8>
   14580:	add	r0, r4, r7
   14584:	cmp	r5, #255	; 0xff
   14588:	bhi	145a0 <error@@Base+0x778>
   1458c:	movw	r1, #33425	; 0x8291
   14590:	movt	r1, #1
   14594:	mov	r2, r5
   14598:	pop	{r4, r5, r6, r7, fp, lr}
   1459c:	b	10cac <sprintf@plt>
   145a0:	movw	r1, #33432	; 0x8298
   145a4:	movt	r1, #1
   145a8:	mov	r2, r5
   145ac:	pop	{r4, r5, r6, r7, fp, lr}
   145b0:	b	10cac <sprintf@plt>
   145b4:	push	{r4, r5, r6, r7, fp, lr}
   145b8:	add	fp, sp, #16
   145bc:	sub	sp, sp, #16
   145c0:	mov	r6, r2
   145c4:	mov	r2, r1
   145c8:	movw	r1, #19063	; 0x4a77
   145cc:	mov	r5, r0
   145d0:	movt	r1, #1
   145d4:	mov	r0, r2
   145d8:	bl	13994 <__assert_fail@plt+0x2ca0>
   145dc:	mov	r4, r0
   145e0:	cmp	r6, #0
   145e4:	beq	14638 <error@@Base+0x810>
   145e8:	movw	r0, #33439	; 0x829f
   145ec:	mov	r1, #55	; 0x37
   145f0:	mov	r2, #1
   145f4:	mov	r3, r4
   145f8:	movt	r0, #1
   145fc:	bl	10be0 <fwrite@plt>
   14600:	movw	r7, #33495	; 0x82d7
   14604:	mov	r1, #55	; 0x37
   14608:	mov	r2, #1
   1460c:	mov	r3, r4
   14610:	movt	r7, #1
   14614:	mov	r0, r7
   14618:	bl	10be0 <fwrite@plt>
   1461c:	mov	r0, r4
   14620:	blx	r6
   14624:	mov	r0, r7
   14628:	mov	r1, #55	; 0x37
   1462c:	mov	r2, #1
   14630:	mov	r3, r4
   14634:	bl	10be0 <fwrite@plt>
   14638:	ldr	r6, [r5]
   1463c:	cmp	r6, #0
   14640:	beq	14674 <error@@Base+0x84c>
   14644:	add	r5, sp, #7
   14648:	ldr	r1, [r6, #12]
   1464c:	ldrb	r0, [r6, #8]
   14650:	mov	r2, r5
   14654:	mov	r3, #0
   14658:	bl	14494 <error@@Base+0x66c>
   1465c:	mov	r0, r5
   14660:	mov	r1, r4
   14664:	bl	10cc4 <fputs@plt>
   14668:	ldr	r6, [r6, #4]
   1466c:	cmp	r6, #0
   14670:	bne	14648 <error@@Base+0x820>
   14674:	mov	r0, r4
   14678:	bl	13a0c <__assert_fail@plt+0x2d18>
   1467c:	sub	sp, fp, #16
   14680:	pop	{r4, r5, r6, r7, fp, pc}
   14684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14688:	add	fp, sp, #28
   1468c:	sub	sp, sp, #4
   14690:	mov	r9, #0
   14694:	mov	sl, r0
   14698:	str	r9, [sp]
   1469c:	ldrb	r0, [r1]
   146a0:	cmp	r0, #0
   146a4:	beq	1470c <error@@Base+0x8e4>
   146a8:	mov	r4, r1
   146ac:	mov	r8, sp
   146b0:	mov	r7, #1
   146b4:	mov	r0, r4
   146b8:	mvn	r1, #0
   146bc:	mov	r2, r8
   146c0:	bl	10bf8 <utf8proc_iterate@plt>
   146c4:	cmp	r0, #1
   146c8:	blt	1471c <error@@Base+0x8f4>
   146cc:	ldr	r5, [sp]
   146d0:	mov	r6, r0
   146d4:	mov	r0, #1
   146d8:	mov	r1, #16
   146dc:	bl	138f0 <__assert_fail@plt+0x2bfc>
   146e0:	str	r5, [r0, #12]
   146e4:	mov	r1, r0
   146e8:	strb	r9, [r0, #8]
   146ec:	mov	r0, sl
   146f0:	bl	11e08 <__assert_fail@plt+0x1114>
   146f4:	ldrb	r0, [r4, r6]!
   146f8:	cmp	r0, #0
   146fc:	bne	146b4 <error@@Base+0x88c>
   14700:	mov	r0, r7
   14704:	sub	sp, fp, #28
   14708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1470c:	mov	r7, #1
   14710:	mov	r0, r7
   14714:	sub	sp, fp, #28
   14718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1471c:	mov	r7, #0
   14720:	mov	r0, r7
   14724:	sub	sp, fp, #28
   14728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1472c:	cmp	r0, #2
   14730:	bxlt	lr
   14734:	movw	r3, #45312	; 0xb100
   14738:	movt	r3, #2
   1473c:	stm	r3, {r1, r2}
   14740:	sub	r1, r0, #1
   14744:	mov	r0, #0
   14748:	b	1474c <error@@Base+0x924>
   1474c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14750:	add	fp, sp, #24
   14754:	movw	r7, #45312	; 0xb100
   14758:	mov	r8, r1
   1475c:	mov	r9, r0
   14760:	movt	r7, #2
   14764:	b	14790 <error@@Base+0x968>
   14768:	mov	r4, r5
   1476c:	ldr	r0, [r7]
   14770:	sub	r1, r5, #1
   14774:	str	r6, [r0, r5, lsl #2]
   14778:	cmp	r1, r9
   1477c:	movgt	r0, r9
   14780:	blgt	1474c <error@@Base+0x924>
   14784:	add	r9, r4, #1
   14788:	cmp	r9, r8
   1478c:	bge	14860 <error@@Base+0xa38>
   14790:	ldr	r0, [r7]
   14794:	cmp	r9, r8
   14798:	mov	r5, r8
   1479c:	mov	r4, r9
   147a0:	ldr	r6, [r0, r9, lsl #2]
   147a4:	bge	14770 <error@@Base+0x948>
   147a8:	mov	r4, r9
   147ac:	mov	r5, r8
   147b0:	cmp	r4, r5
   147b4:	blt	147cc <error@@Base+0x9a4>
   147b8:	b	147f0 <error@@Base+0x9c8>
   147bc:	cmp	r4, r5
   147c0:	bge	1476c <error@@Base+0x944>
   147c4:	cmp	r4, r5
   147c8:	bge	147f0 <error@@Base+0x9c8>
   147cc:	ldm	r7, {r0, r2}
   147d0:	ldr	r1, [r0, r5, lsl #2]
   147d4:	mov	r0, r6
   147d8:	blx	r2
   147dc:	cmn	r0, #1
   147e0:	bgt	147f0 <error@@Base+0x9c8>
   147e4:	sub	r5, r5, #1
   147e8:	cmp	r4, r5
   147ec:	blt	147cc <error@@Base+0x9a4>
   147f0:	cmp	r4, r5
   147f4:	bne	14804 <error@@Base+0x9dc>
   147f8:	cmp	r4, r5
   147fc:	blt	1481c <error@@Base+0x9f4>
   14800:	b	14844 <error@@Base+0xa1c>
   14804:	ldr	r0, [r7]
   14808:	ldr	r1, [r0, r5, lsl #2]
   1480c:	str	r1, [r0, r4, lsl #2]
   14810:	add	r4, r4, #1
   14814:	cmp	r4, r5
   14818:	bge	14844 <error@@Base+0xa1c>
   1481c:	ldm	r7, {r0, r2}
   14820:	ldr	r1, [r0, r4, lsl #2]
   14824:	mov	r0, r6
   14828:	blx	r2
   1482c:	cmp	r0, #1
   14830:	blt	14844 <error@@Base+0xa1c>
   14834:	add	r4, r4, #1
   14838:	cmp	r5, r4
   1483c:	bne	1481c <error@@Base+0x9f4>
   14840:	b	14768 <error@@Base+0x940>
   14844:	cmp	r4, r5
   14848:	beq	147bc <error@@Base+0x994>
   1484c:	ldr	r0, [r7]
   14850:	ldr	r1, [r0, r4, lsl #2]
   14854:	str	r1, [r0, r5, lsl #2]
   14858:	sub	r5, r5, #1
   1485c:	b	147bc <error@@Base+0x994>
   14860:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14868:	mov	r7, r0
   1486c:	ldr	r6, [pc, #72]	; 148bc <error@@Base+0xa94>
   14870:	ldr	r5, [pc, #72]	; 148c0 <error@@Base+0xa98>
   14874:	add	r6, pc, r6
   14878:	add	r5, pc, r5
   1487c:	sub	r6, r6, r5
   14880:	mov	r8, r1
   14884:	mov	r9, r2
   14888:	bl	10b24 <calloc@plt-0x20>
   1488c:	asrs	r6, r6, #2
   14890:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14894:	mov	r4, #0
   14898:	add	r4, r4, #1
   1489c:	ldr	r3, [r5], #4
   148a0:	mov	r2, r9
   148a4:	mov	r1, r8
   148a8:	mov	r0, r7
   148ac:	blx	r3
   148b0:	cmp	r6, r4
   148b4:	bne	14898 <error@@Base+0xa70>
   148b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148bc:	andeq	r4, r1, r0, lsl #11
   148c0:	andeq	r4, r1, r8, ror r5
   148c4:	bx	lr

Disassembly of section .fini:

000148c8 <.fini>:
   148c8:	push	{r3, lr}
   148cc:	pop	{r3, pc}
