
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fc8 <.init>:
   10fc8:	push	{r3, lr}
   10fcc:	bl	11864 <__assert_fail@plt+0x534>
   10fd0:	pop	{r3, pc}

Disassembly of section .plt:

00010fd4 <fstatfs64@plt-0x14>:
   10fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd8:	ldr	lr, [pc, #4]	; 10fe4 <fstatfs64@plt-0x4>
   10fdc:	add	lr, pc, lr
   10fe0:	ldr	pc, [lr, #8]!
   10fe4:	andeq	fp, r1, ip, lsl r0

00010fe8 <fstatfs64@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #28]!

00010ff4 <calloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #20]!

00011000 <endgrent@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #12]!

0001100c <fputs_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #4]!

00011018 <raise@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #106496	; 0x1a000
   11020:	ldr	pc, [ip, #4092]!	; 0xffc

00011024 <strcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #106496	; 0x1a000
   1102c:	ldr	pc, [ip, #4084]!	; 0xff4

00011030 <getpwuid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #106496	; 0x1a000
   11038:	ldr	pc, [ip, #4076]!	; 0xfec

0001103c <fflush@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #4068]!	; 0xfe4

00011048 <memmove@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #4060]!	; 0xfdc

00011054 <free@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011060 <__openat64_2@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #4044]!	; 0xfcc

0001106c <_exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #4036]!	; 0xfc4

00011078 <memcpy@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4028]!	; 0xfbc

00011084 <__strtoull_internal@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011090 <mbsinit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4012]!	; 0xfac

0001109c <memcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a8 <stpcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b4 <fputc_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #3988]!	; 0xf94

000110c0 <dcgettext@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #3980]!	; 0xf8c

000110cc <realloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3972]!	; 0xf84

000110d8 <textdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e4 <__fxstatat64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3956]!	; 0xf74

000110f0 <iswprint@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3948]!	; 0xf6c

000110fc <__fxstat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3940]!	; 0xf64

00011108 <fwrite@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3932]!	; 0xf5c

00011114 <lseek64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3924]!	; 0xf54

00011120 <__ctype_get_mb_cur_max@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3916]!	; 0xf4c

0001112c <strcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3908]!	; 0xf44

00011138 <__fpending@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3900]!	; 0xf3c

00011144 <mbrtowc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3892]!	; 0xf34

00011150 <error@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3884]!	; 0xf2c

0001115c <open64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3876]!	; 0xf24

00011168 <malloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3868]!	; 0xf1c

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3860]!	; 0xf14

00011180 <__freading@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3852]!	; 0xf0c

0001118c <__gmon_start__@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3844]!	; 0xf04

00011198 <getopt_long@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3836]!	; 0xefc

000111a4 <__ctype_b_loc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3828]!	; 0xef4

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3820]!	; 0xeec

000111bc <strlen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3812]!	; 0xee4

000111c8 <strchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3804]!	; 0xedc

000111d4 <openat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3796]!	; 0xed4

000111e0 <fchown@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3788]!	; 0xecc

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3780]!	; 0xec4

000111f8 <__cxa_atexit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3772]!	; 0xebc

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3756]!	; 0xeac

0001121c <fileno@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3748]!	; 0xea4

00011228 <__fprintf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3740]!	; 0xe9c

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3732]!	; 0xe94

00011240 <fseeko64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3724]!	; 0xe8c

0001124c <fcntl64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3716]!	; 0xe84

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3708]!	; 0xe7c

00011264 <strrchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3700]!	; 0xe74

00011270 <nl_langinfo@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3692]!	; 0xe6c

0001127c <readdir64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3684]!	; 0xe64

00011288 <fdopendir@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3676]!	; 0xe5c

00011294 <dirfd@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3668]!	; 0xe54

000112a0 <fchdir@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3660]!	; 0xe4c

000112ac <qsort@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3652]!	; 0xe44

000112b8 <fchownat@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c4 <bindtextdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3636]!	; 0xe34

000112d0 <__xstat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3628]!	; 0xe2c

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3620]!	; 0xe24

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3612]!	; 0xe1c

000112f4 <close@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3604]!	; 0xe14

00011300 <__lxstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3596]!	; 0xe0c

0001130c <closedir@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3588]!	; 0xe04

00011318 <getgrgid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3580]!	; 0xdfc

00011324 <getgrnam@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011330 <__assert_fail@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3564]!	; 0xdec

Disassembly of section .text:

00011340 <.text>:
   11340:	mvn	r3, #0
   11344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11348:	movw	r5, #45052	; 0xaffc
   1134c:	movt	r5, #1
   11350:	strd	r6, [sp, #8]
   11354:	mov	r7, r0
   11358:	strd	r8, [sp, #16]
   1135c:	mov	r6, r1
   11360:	mov	r9, #16
   11364:	strd	sl, [sp, #24]
   11368:	movw	fp, #49568	; 0xc1a0
   1136c:	movt	fp, #2
   11370:	str	lr, [sp, #32]
   11374:	sub	sp, sp, #156	; 0x9c
   11378:	mov	sl, #0
   1137c:	ldr	r0, [r1]
   11380:	str	r3, [sp, #20]
   11384:	bl	1639c <__assert_fail@plt+0x506c>
   11388:	movw	r1, #44516	; 0xade4
   1138c:	movt	r1, #1
   11390:	ldr	r8, [pc, #1160]	; 11820 <__assert_fail@plt+0x4f0>
   11394:	mov	r0, #6
   11398:	bl	11258 <setlocale@plt>
   1139c:	movw	r1, #44996	; 0xafc4
   113a0:	movt	r1, #1
   113a4:	movw	r0, #44828	; 0xaf1c
   113a8:	movt	r0, #1
   113ac:	bl	112c4 <bindtextdomain@plt>
   113b0:	movw	r0, #44828	; 0xaf1c
   113b4:	movt	r0, #1
   113b8:	bl	110d8 <textdomain@plt>
   113bc:	movw	r0, #11260	; 0x2bfc
   113c0:	movt	r0, #1
   113c4:	bl	1a694 <__assert_fail@plt+0x9364>
   113c8:	add	r0, sp, #24
   113cc:	bl	11db8 <__assert_fail@plt+0xa88>
   113d0:	mov	r4, #0
   113d4:	mov	r3, r8
   113d8:	mov	r2, r5
   113dc:	mov	r1, r6
   113e0:	mov	r0, r7
   113e4:	str	r4, [sp]
   113e8:	bl	11198 <getopt_long@plt>
   113ec:	cmn	r0, #1
   113f0:	beq	1154c <__assert_fail@plt+0x21c>
   113f4:	cmp	r0, #99	; 0x63
   113f8:	beq	114d4 <__assert_fail@plt+0x1a4>
   113fc:	ble	1142c <__assert_fail@plt+0xfc>
   11400:	cmp	r0, #256	; 0x100
   11404:	beq	114c8 <__assert_fail@plt+0x198>
   11408:	bgt	11458 <__assert_fail@plt+0x128>
   1140c:	cmp	r0, #104	; 0x68
   11410:	beq	114a8 <__assert_fail@plt+0x178>
   11414:	cmp	r0, #118	; 0x76
   11418:	beq	11544 <__assert_fail@plt+0x214>
   1141c:	cmp	r0, #102	; 0x66
   11420:	beq	11538 <__assert_fail@plt+0x208>
   11424:	mov	r0, #1
   11428:	bl	11918 <__assert_fail@plt+0x5e8>
   1142c:	cmp	r0, #72	; 0x48
   11430:	beq	114c0 <__assert_fail@plt+0x190>
   11434:	ble	11488 <__assert_fail@plt+0x158>
   11438:	cmp	r0, #80	; 0x50
   1143c:	beq	114b0 <__assert_fail@plt+0x180>
   11440:	cmp	r0, #82	; 0x52
   11444:	beq	1152c <__assert_fail@plt+0x1fc>
   11448:	cmp	r0, #76	; 0x4c
   1144c:	bne	11424 <__assert_fail@plt+0xf4>
   11450:	mov	r9, #2
   11454:	b	113d0 <__assert_fail@plt+0xa0>
   11458:	movw	r3, #258	; 0x102
   1145c:	cmp	r0, r3
   11460:	beq	114b8 <__assert_fail@plt+0x188>
   11464:	blt	114a0 <__assert_fail@plt+0x170>
   11468:	movw	r3, #259	; 0x103
   1146c:	cmp	r0, r3
   11470:	bne	11424 <__assert_fail@plt+0xf4>
   11474:	movw	r3, #49560	; 0xc198
   11478:	movt	r3, #2
   1147c:	ldr	r3, [r3]
   11480:	str	r3, [fp]
   11484:	b	113d0 <__assert_fail@plt+0xa0>
   11488:	cmn	r0, #3
   1148c:	beq	114e0 <__assert_fail@plt+0x1b0>
   11490:	cmn	r0, #2
   11494:	bne	11424 <__assert_fail@plt+0xf4>
   11498:	mov	r0, r4
   1149c:	bl	11918 <__assert_fail@plt+0x5e8>
   114a0:	mov	sl, r4
   114a4:	b	113d0 <__assert_fail@plt+0xa0>
   114a8:	str	r4, [sp, #20]
   114ac:	b	113d0 <__assert_fail@plt+0xa0>
   114b0:	mov	r9, #16
   114b4:	b	113d0 <__assert_fail@plt+0xa0>
   114b8:	mov	sl, #1
   114bc:	b	113d0 <__assert_fail@plt+0xa0>
   114c0:	mov	r9, #17
   114c4:	b	113d0 <__assert_fail@plt+0xa0>
   114c8:	mov	r3, #1
   114cc:	str	r3, [sp, #20]
   114d0:	b	113d0 <__assert_fail@plt+0xa0>
   114d4:	mov	r3, #1
   114d8:	str	r3, [sp, #24]
   114dc:	b	113d0 <__assert_fail@plt+0xa0>
   114e0:	movw	r1, #45020	; 0xafdc
   114e4:	movt	r1, #1
   114e8:	movw	r2, #45036	; 0xafec
   114ec:	movt	r2, #1
   114f0:	movw	r3, #49460	; 0xc134
   114f4:	movt	r3, #2
   114f8:	movw	r0, #49556	; 0xc194
   114fc:	movt	r0, #2
   11500:	str	r2, [sp]
   11504:	movw	r2, #44824	; 0xaf18
   11508:	movt	r2, #1
   1150c:	stmib	sp, {r1, r4}
   11510:	movw	r1, #42944	; 0xa7c0
   11514:	movt	r1, #1
   11518:	ldr	r0, [r0]
   1151c:	ldr	r3, [r3]
   11520:	bl	18be0 <__assert_fail@plt+0x78b0>
   11524:	mov	r0, r4
   11528:	bl	111b0 <exit@plt>
   1152c:	mov	r3, #1
   11530:	strb	r3, [sp, #28]
   11534:	b	113d0 <__assert_fail@plt+0xa0>
   11538:	mov	r3, #1
   1153c:	strb	r3, [sp, #37]	; 0x25
   11540:	b	113d0 <__assert_fail@plt+0xa0>
   11544:	str	r4, [sp, #24]
   11548:	b	113d0 <__assert_fail@plt+0xa0>
   1154c:	ldrb	r3, [sp, #28]
   11550:	cmp	r3, r4
   11554:	beq	115cc <__assert_fail@plt+0x29c>
   11558:	cmp	r9, #16
   1155c:	beq	11610 <__assert_fail@plt+0x2e0>
   11560:	movw	r3, #49568	; 0xc1a0
   11564:	movt	r3, #2
   11568:	ldr	r5, [r3]
   1156c:	movw	r4, #49544	; 0xc188
   11570:	movt	r4, #2
   11574:	ldr	r3, [sp, #20]
   11578:	ldr	r2, [r4]
   1157c:	adds	r3, r3, #0
   11580:	movne	r3, #1
   11584:	cmp	r5, #0
   11588:	strb	r3, [sp, #36]	; 0x24
   1158c:	sub	r3, r7, r2
   11590:	beq	11644 <__assert_fail@plt+0x314>
   11594:	cmp	r3, #0
   11598:	bgt	116d4 <__assert_fail@plt+0x3a4>
   1159c:	cmp	r2, r7
   115a0:	blt	115d4 <__assert_fail@plt+0x2a4>
   115a4:	mov	r2, #5
   115a8:	movw	r1, #45108	; 0xb034
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	bl	110c0 <dcgettext@plt>
   115b8:	mov	r1, #0
   115bc:	mov	r2, r0
   115c0:	mov	r0, r1
   115c4:	bl	11150 <error@plt>
   115c8:	b	11424 <__assert_fail@plt+0xf4>
   115cc:	mov	r9, #16
   115d0:	b	11560 <__assert_fail@plt+0x230>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #45124	; 0xb044
   115dc:	movt	r1, #1
   115e0:	mov	r0, #0
   115e4:	bl	110c0 <dcgettext@plt>
   115e8:	sub	r7, r7, #-1073741823	; 0xc0000001
   115ec:	mov	r4, r0
   115f0:	ldr	r0, [r6, r7, lsl #2]
   115f4:	bl	1868c <__assert_fail@plt+0x735c>
   115f8:	mov	r1, #0
   115fc:	mov	r3, r0
   11600:	mov	r2, r4
   11604:	mov	r0, r1
   11608:	bl	11150 <error@plt>
   1160c:	b	11424 <__assert_fail@plt+0xf4>
   11610:	ldr	r3, [sp, #20]
   11614:	cmp	r3, #1
   11618:	strne	r4, [sp, #20]
   1161c:	bne	11560 <__assert_fail@plt+0x230>
   11620:	mov	r2, #5
   11624:	movw	r1, #45064	; 0xb008
   11628:	movt	r1, #1
   1162c:	mov	r0, r4
   11630:	bl	110c0 <dcgettext@plt>
   11634:	mov	r2, r0
   11638:	mov	r1, r4
   1163c:	ldr	r0, [sp, #20]
   11640:	bl	11150 <error@plt>
   11644:	cmp	r3, #1
   11648:	ble	1159c <__assert_fail@plt+0x26c>
   1164c:	ldr	r7, [r6, r2, lsl #2]
   11650:	add	r2, r2, #1
   11654:	str	r2, [r4]
   11658:	ldrb	r3, [r7]
   1165c:	cmp	r3, #0
   11660:	bne	1175c <__assert_fail@plt+0x42c>
   11664:	str	r5, [sp, #44]	; 0x2c
   11668:	ldrb	r3, [r7]
   1166c:	cmp	r3, #0
   11670:	mvneq	r5, #0
   11674:	beq	11690 <__assert_fail@plt+0x360>
   11678:	mov	r0, r7
   1167c:	bl	11324 <getgrnam@plt>
   11680:	subs	r1, r0, #0
   11684:	ldrne	r5, [r1, #8]
   11688:	beq	1176c <__assert_fail@plt+0x43c>
   1168c:	bl	11000 <endgrent@plt>
   11690:	ldrb	r3, [sp, #28]
   11694:	tst	sl, r3
   11698:	bne	11700 <__assert_fail@plt+0x3d0>
   1169c:	ldr	r0, [r4]
   116a0:	mvn	ip, #0
   116a4:	add	r2, sp, #24
   116a8:	mov	r3, r5
   116ac:	orr	r1, r9, #1024	; 0x400
   116b0:	str	ip, [sp]
   116b4:	str	ip, [sp, #4]
   116b8:	str	r2, [sp, #8]
   116bc:	mov	r2, ip
   116c0:	add	r0, r6, r0, lsl #2
   116c4:	bl	11e90 <__assert_fail@plt+0xb60>
   116c8:	eor	r0, r0, #1
   116cc:	uxtb	r0, r0
   116d0:	bl	111b0 <exit@plt>
   116d4:	add	r2, sp, #48	; 0x30
   116d8:	mov	r1, r5
   116dc:	mov	r0, #3
   116e0:	bl	112d0 <__xstat64@plt>
   116e4:	cmp	r0, #0
   116e8:	bne	117e0 <__assert_fail@plt+0x4b0>
   116ec:	ldr	r5, [sp, #76]	; 0x4c
   116f0:	mov	r0, r5
   116f4:	bl	11e08 <__assert_fail@plt+0xad8>
   116f8:	str	r0, [sp, #44]	; 0x2c
   116fc:	b	11690 <__assert_fail@plt+0x360>
   11700:	ldr	r0, [pc, #284]	; 11824 <__assert_fail@plt+0x4f4>
   11704:	bl	186a4 <__assert_fail@plt+0x7374>
   11708:	cmp	r0, #0
   1170c:	mov	r7, r0
   11710:	str	r0, [sp, #32]
   11714:	bne	1169c <__assert_fail@plt+0x36c>
   11718:	bl	111ec <__errno_location@plt>
   1171c:	ldr	r4, [r0]
   11720:	mov	r2, #5
   11724:	movw	r1, #45152	; 0xb060
   11728:	movt	r1, #1
   1172c:	mov	r0, r7
   11730:	bl	110c0 <dcgettext@plt>
   11734:	mov	r5, r0
   11738:	movw	r1, #45204	; 0xb094
   1173c:	movt	r1, #1
   11740:	mov	r0, #4
   11744:	bl	183d8 <__assert_fail@plt+0x70a8>
   11748:	mov	r3, r0
   1174c:	mov	r2, r5
   11750:	mov	r1, r4
   11754:	mov	r0, #1
   11758:	bl	11150 <error@plt>
   1175c:	mov	r0, r7
   11760:	bl	19140 <__assert_fail@plt+0x7e10>
   11764:	mov	r5, r0
   11768:	b	11664 <__assert_fail@plt+0x334>
   1176c:	movw	r0, #44516	; 0xade4
   11770:	movt	r0, #1
   11774:	add	r3, sp, #48	; 0x30
   11778:	mov	r2, #10
   1177c:	str	r0, [sp]
   11780:	mov	r0, r7
   11784:	bl	1923c <__assert_fail@plt+0x7f0c>
   11788:	cmp	r0, #0
   1178c:	bne	117ac <__assert_fail@plt+0x47c>
   11790:	ldrd	r2, [sp, #48]	; 0x30
   11794:	mov	r1, #0
   11798:	mvn	r0, #0
   1179c:	cmp	r3, r1
   117a0:	cmpeq	r2, r0
   117a4:	movls	r5, r2
   117a8:	bls	1168c <__assert_fail@plt+0x35c>
   117ac:	mov	r2, #5
   117b0:	movw	r1, #45184	; 0xb080
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	110c0 <dcgettext@plt>
   117c0:	mov	r4, r0
   117c4:	mov	r0, r7
   117c8:	bl	1868c <__assert_fail@plt+0x735c>
   117cc:	mov	r3, r0
   117d0:	mov	r2, r4
   117d4:	mov	r1, #0
   117d8:	mov	r0, #1
   117dc:	bl	11150 <error@plt>
   117e0:	bl	111ec <__errno_location@plt>
   117e4:	ldr	r4, [r0]
   117e8:	mov	r2, #5
   117ec:	movw	r1, #45152	; 0xb060
   117f0:	movt	r1, #1
   117f4:	mov	r0, #0
   117f8:	bl	110c0 <dcgettext@plt>
   117fc:	mov	r6, r0
   11800:	mov	r1, r5
   11804:	mov	r0, #4
   11808:	bl	183d8 <__assert_fail@plt+0x70a8>
   1180c:	mov	r3, r0
   11810:	mov	r2, r6
   11814:	mov	r1, r4
   11818:	mov	r0, #1
   1181c:	bl	11150 <error@plt>
   11820:	strdeq	sl, [r1], -r0
   11824:	andeq	ip, r2, r8, lsr #3
   11828:	mov	fp, #0
   1182c:	mov	lr, #0
   11830:	pop	{r1}		; (ldr r1, [sp], #4)
   11834:	mov	r2, sp
   11838:	push	{r2}		; (str r2, [sp, #-4]!)
   1183c:	push	{r0}		; (str r0, [sp, #-4]!)
   11840:	ldr	ip, [pc, #16]	; 11858 <__assert_fail@plt+0x528>
   11844:	push	{ip}		; (str ip, [sp, #-4]!)
   11848:	ldr	r0, [pc, #12]	; 1185c <__assert_fail@plt+0x52c>
   1184c:	ldr	r3, [pc, #12]	; 11860 <__assert_fail@plt+0x530>
   11850:	bl	11174 <__libc_start_main@plt>
   11854:	bl	112e8 <abort@plt>
   11858:	muleq	r1, r0, r6
   1185c:	andeq	r1, r1, r0, asr #6
   11860:	andeq	sl, r1, r0, lsr r6
   11864:	ldr	r3, [pc, #20]	; 11880 <__assert_fail@plt+0x550>
   11868:	ldr	r2, [pc, #20]	; 11884 <__assert_fail@plt+0x554>
   1186c:	add	r3, pc, r3
   11870:	ldr	r2, [r3, r2]
   11874:	cmp	r2, #0
   11878:	bxeq	lr
   1187c:	b	1118c <__gmon_start__@plt>
   11880:	andeq	sl, r1, ip, lsl #15
   11884:	andeq	r0, r0, r8, lsr #2
   11888:	ldr	r0, [pc, #24]	; 118a8 <__assert_fail@plt+0x578>
   1188c:	ldr	r3, [pc, #24]	; 118ac <__assert_fail@plt+0x57c>
   11890:	cmp	r3, r0
   11894:	bxeq	lr
   11898:	ldr	r3, [pc, #16]	; 118b0 <__assert_fail@plt+0x580>
   1189c:	cmp	r3, #0
   118a0:	bxeq	lr
   118a4:	bx	r3
   118a8:	andeq	ip, r2, ip, ror r1
   118ac:	andeq	ip, r2, ip, ror r1
   118b0:	andeq	r0, r0, r0
   118b4:	ldr	r0, [pc, #36]	; 118e0 <__assert_fail@plt+0x5b0>
   118b8:	ldr	r1, [pc, #36]	; 118e4 <__assert_fail@plt+0x5b4>
   118bc:	sub	r1, r1, r0
   118c0:	asr	r1, r1, #2
   118c4:	add	r1, r1, r1, lsr #31
   118c8:	asrs	r1, r1, #1
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x5b8>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	andeq	ip, r2, ip, ror r1
   118e4:	andeq	ip, r2, ip, ror r1
   118e8:	andeq	r0, r0, r0
   118ec:	push	{r4, lr}
   118f0:	ldr	r4, [pc, #24]	; 11910 <__assert_fail@plt+0x5e0>
   118f4:	ldrb	r3, [r4]
   118f8:	cmp	r3, #0
   118fc:	popne	{r4, pc}
   11900:	bl	11888 <__assert_fail@plt+0x558>
   11904:	mov	r3, #1
   11908:	strb	r3, [r4]
   1190c:	pop	{r4, pc}
   11910:	muleq	r2, ip, r1
   11914:	b	118b4 <__assert_fail@plt+0x584>
   11918:	subs	r6, r0, #0
   1191c:	str	r7, [sp, #-8]!
   11920:	str	lr, [sp, #4]
   11924:	sub	sp, sp, #56	; 0x38
   11928:	beq	11970 <__assert_fail@plt+0x640>
   1192c:	movw	r3, #49552	; 0xc190
   11930:	movt	r3, #2
   11934:	ldr	r4, [r3]
   11938:	mov	r2, #5
   1193c:	movw	r1, #42952	; 0xa7c8
   11940:	movt	r1, #1
   11944:	mov	r0, #0
   11948:	bl	110c0 <dcgettext@plt>
   1194c:	movw	r3, #49600	; 0xc1c0
   11950:	movt	r3, #2
   11954:	mov	r2, r0
   11958:	mov	r1, #1
   1195c:	ldr	r3, [r3]
   11960:	mov	r0, r4
   11964:	bl	11228 <__fprintf_chk@plt>
   11968:	mov	r0, r6
   1196c:	bl	111b0 <exit@plt>
   11970:	mov	r2, #5
   11974:	movw	r1, #42992	; 0xa7f0
   11978:	movt	r1, #1
   1197c:	movw	r4, #49600	; 0xc1c0
   11980:	movt	r4, #2
   11984:	movw	r7, #49556	; 0xc194
   11988:	movt	r7, #2
   1198c:	bl	110c0 <dcgettext@plt>
   11990:	ldr	r3, [r4]
   11994:	mov	r1, r0
   11998:	mov	r0, #1
   1199c:	mov	r2, r3
   119a0:	bl	11210 <__printf_chk@plt>
   119a4:	mov	r2, #5
   119a8:	movw	r1, #43080	; 0xa848
   119ac:	movt	r1, #1
   119b0:	mov	r0, r6
   119b4:	bl	110c0 <dcgettext@plt>
   119b8:	ldr	r1, [r7]
   119bc:	bl	1100c <fputs_unlocked@plt>
   119c0:	mov	r2, #5
   119c4:	movw	r1, #43188	; 0xa8b4
   119c8:	movt	r1, #1
   119cc:	mov	r0, r6
   119d0:	bl	110c0 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	1100c <fputs_unlocked@plt>
   119dc:	mov	r2, #5
   119e0:	movw	r1, #43392	; 0xa980
   119e4:	movt	r1, #1
   119e8:	mov	r0, r6
   119ec:	bl	110c0 <dcgettext@plt>
   119f0:	ldr	r1, [r7]
   119f4:	bl	1100c <fputs_unlocked@plt>
   119f8:	mov	r2, #5
   119fc:	movw	r1, #43624	; 0xaa68
   11a00:	movt	r1, #1
   11a04:	mov	r0, r6
   11a08:	bl	110c0 <dcgettext@plt>
   11a0c:	ldr	r1, [r7]
   11a10:	bl	1100c <fputs_unlocked@plt>
   11a14:	mov	r2, #5
   11a18:	movw	r1, #43744	; 0xaae0
   11a1c:	movt	r1, #1
   11a20:	mov	r0, r6
   11a24:	bl	110c0 <dcgettext@plt>
   11a28:	ldr	r1, [r7]
   11a2c:	bl	1100c <fputs_unlocked@plt>
   11a30:	mov	r2, #5
   11a34:	movw	r1, #43872	; 0xab60
   11a38:	movt	r1, #1
   11a3c:	mov	r0, r6
   11a40:	bl	110c0 <dcgettext@plt>
   11a44:	ldr	r1, [r7]
   11a48:	bl	1100c <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	movw	r1, #43980	; 0xabcc
   11a54:	movt	r1, #1
   11a58:	mov	r0, r6
   11a5c:	bl	110c0 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	1100c <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	movw	r1, #44052	; 0xac14
   11a70:	movt	r1, #1
   11a74:	mov	r0, r6
   11a78:	bl	110c0 <dcgettext@plt>
   11a7c:	ldr	r1, [r7]
   11a80:	bl	1100c <fputs_unlocked@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #44520	; 0xade8
   11a8c:	movt	r1, #1
   11a90:	mov	r0, r6
   11a94:	bl	110c0 <dcgettext@plt>
   11a98:	ldr	r1, [r7]
   11a9c:	bl	1100c <fputs_unlocked@plt>
   11aa0:	mov	r2, #5
   11aa4:	movw	r1, #44568	; 0xae18
   11aa8:	movt	r1, #1
   11aac:	mov	r0, r6
   11ab0:	bl	110c0 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	1100c <fputs_unlocked@plt>
   11abc:	mov	r2, #5
   11ac0:	movw	r1, #44624	; 0xae50
   11ac4:	movt	r1, #1
   11ac8:	mov	r0, r6
   11acc:	bl	110c0 <dcgettext@plt>
   11ad0:	ldr	r3, [r4]
   11ad4:	mov	r1, r0
   11ad8:	mov	r0, #1
   11adc:	mov	r2, r3
   11ae0:	bl	11210 <__printf_chk@plt>
   11ae4:	movw	lr, #42680	; 0xa6b8
   11ae8:	movt	lr, #1
   11aec:	ldr	ip, [lr]
   11af0:	ldr	r4, [lr, #4]
   11af4:	ldrd	r8, [lr, #8]
   11af8:	subs	r1, ip, #0
   11afc:	str	ip, [sp]
   11b00:	ldrd	r2, [lr, #16]
   11b04:	str	r4, [sp, #4]
   11b08:	ldrd	r4, [lr, #24]
   11b0c:	strd	r8, [sp, #8]
   11b10:	ldrd	r8, [lr, #32]
   11b14:	strd	r2, [sp, #16]
   11b18:	ldrd	r2, [lr, #40]	; 0x28
   11b1c:	strd	r4, [sp, #24]
   11b20:	ldrd	r4, [lr, #48]	; 0x30
   11b24:	strd	r8, [sp, #32]
   11b28:	strd	r2, [sp, #40]	; 0x28
   11b2c:	strd	r4, [sp, #48]	; 0x30
   11b30:	movwne	r5, #42944	; 0xa7c0
   11b34:	mov	r4, sp
   11b38:	movtne	r5, #1
   11b3c:	bne	11c34 <__assert_fail@plt+0x904>
   11b40:	ldr	r4, [r4, #4]
   11b44:	movw	r1, #44760	; 0xaed8
   11b48:	movt	r1, #1
   11b4c:	mov	r2, #5
   11b50:	cmp	r4, #0
   11b54:	beq	11c48 <__assert_fail@plt+0x918>
   11b58:	mov	r0, #0
   11b5c:	bl	110c0 <dcgettext@plt>
   11b60:	mov	r1, r0
   11b64:	movw	r3, #44784	; 0xaef0
   11b68:	movt	r3, #1
   11b6c:	movw	r2, #44824	; 0xaf18
   11b70:	movt	r2, #1
   11b74:	mov	r0, #1
   11b78:	bl	11210 <__printf_chk@plt>
   11b7c:	mov	r1, #0
   11b80:	mov	r0, #5
   11b84:	bl	11258 <setlocale@plt>
   11b88:	cmp	r0, #0
   11b8c:	movweq	r5, #42944	; 0xa7c0
   11b90:	movteq	r5, #1
   11b94:	beq	11bb8 <__assert_fail@plt+0x888>
   11b98:	movw	r1, #44840	; 0xaf28
   11b9c:	movt	r1, #1
   11ba0:	mov	r2, #3
   11ba4:	movw	r5, #42944	; 0xa7c0
   11ba8:	movt	r5, #1
   11bac:	bl	112dc <strncmp@plt>
   11bb0:	cmp	r0, #0
   11bb4:	bne	11d00 <__assert_fail@plt+0x9d0>
   11bb8:	mov	r2, #5
   11bbc:	movw	r1, #44916	; 0xaf74
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, #0
   11bc8:	bl	110c0 <dcgettext@plt>
   11bcc:	mov	r1, r0
   11bd0:	movw	r3, #42944	; 0xa7c0
   11bd4:	movt	r3, #1
   11bd8:	movw	r2, #44784	; 0xaef0
   11bdc:	movt	r2, #1
   11be0:	mov	r0, #1
   11be4:	bl	11210 <__printf_chk@plt>
   11be8:	mov	r2, #5
   11bec:	movw	r1, #44944	; 0xaf90
   11bf0:	movt	r1, #1
   11bf4:	mov	r0, #0
   11bf8:	bl	110c0 <dcgettext@plt>
   11bfc:	movw	r2, #45216	; 0xb0a0
   11c00:	movt	r2, #1
   11c04:	cmp	r4, r5
   11c08:	movw	r3, #44516	; 0xade4
   11c0c:	movt	r3, #1
   11c10:	mov	r1, r0
   11c14:	moveq	r3, r2
   11c18:	mov	r2, r4
   11c1c:	mov	r0, #1
   11c20:	bl	11210 <__printf_chk@plt>
   11c24:	b	11968 <__assert_fail@plt+0x638>
   11c28:	ldr	r1, [r4, #8]!
   11c2c:	cmp	r1, #0
   11c30:	beq	11b40 <__assert_fail@plt+0x810>
   11c34:	mov	r0, r5
   11c38:	bl	11024 <strcmp@plt>
   11c3c:	cmp	r0, #0
   11c40:	bne	11c28 <__assert_fail@plt+0x8f8>
   11c44:	b	11b40 <__assert_fail@plt+0x810>
   11c48:	mov	r0, r4
   11c4c:	bl	110c0 <dcgettext@plt>
   11c50:	mov	r1, r0
   11c54:	movw	r3, #44784	; 0xaef0
   11c58:	movt	r3, #1
   11c5c:	movw	r2, #44824	; 0xaf18
   11c60:	movt	r2, #1
   11c64:	mov	r0, #1
   11c68:	bl	11210 <__printf_chk@plt>
   11c6c:	mov	r1, r4
   11c70:	mov	r0, #5
   11c74:	bl	11258 <setlocale@plt>
   11c78:	cmp	r0, #0
   11c7c:	beq	11c98 <__assert_fail@plt+0x968>
   11c80:	movw	r1, #44840	; 0xaf28
   11c84:	movt	r1, #1
   11c88:	mov	r2, #3
   11c8c:	bl	112dc <strncmp@plt>
   11c90:	cmp	r0, #0
   11c94:	bne	11cf4 <__assert_fail@plt+0x9c4>
   11c98:	mov	r2, #5
   11c9c:	movw	r1, #44916	; 0xaf74
   11ca0:	movt	r1, #1
   11ca4:	mov	r0, #0
   11ca8:	bl	110c0 <dcgettext@plt>
   11cac:	mov	r1, r0
   11cb0:	movw	r3, #42944	; 0xa7c0
   11cb4:	movt	r3, #1
   11cb8:	movw	r2, #44784	; 0xaef0
   11cbc:	movt	r2, #1
   11cc0:	mov	r0, #1
   11cc4:	bl	11210 <__printf_chk@plt>
   11cc8:	movw	r1, #44944	; 0xaf90
   11ccc:	movt	r1, #1
   11cd0:	mov	r2, #5
   11cd4:	mov	r0, #0
   11cd8:	bl	110c0 <dcgettext@plt>
   11cdc:	movw	r4, #42944	; 0xa7c0
   11ce0:	movt	r4, #1
   11ce4:	movw	r3, #45216	; 0xb0a0
   11ce8:	movt	r3, #1
   11cec:	mov	r1, r0
   11cf0:	b	11c18 <__assert_fail@plt+0x8e8>
   11cf4:	movw	r5, #42944	; 0xa7c0
   11cf8:	movt	r5, #1
   11cfc:	mov	r4, r5
   11d00:	mov	r2, #5
   11d04:	movw	r1, #44844	; 0xaf2c
   11d08:	movt	r1, #1
   11d0c:	mov	r0, #0
   11d10:	bl	110c0 <dcgettext@plt>
   11d14:	ldr	r1, [r7]
   11d18:	bl	1100c <fputs_unlocked@plt>
   11d1c:	b	11bb8 <__assert_fail@plt+0x888>
   11d20:	subs	r3, r0, #0
   11d24:	strd	r4, [sp, #-16]!
   11d28:	str	r6, [sp, #8]
   11d2c:	str	lr, [sp, #12]
   11d30:	beq	11d90 <__assert_fail@plt+0xa60>
   11d34:	cmp	r1, #0
   11d38:	beq	11d9c <__assert_fail@plt+0xa6c>
   11d3c:	mov	r4, r1
   11d40:	mov	r5, r3
   11d44:	bl	111bc <strlen@plt>
   11d48:	mov	r6, r0
   11d4c:	mov	r0, r4
   11d50:	bl	111bc <strlen@plt>
   11d54:	add	r0, r6, r0
   11d58:	add	r0, r0, #2
   11d5c:	bl	18cf0 <__assert_fail@plt+0x79c0>
   11d60:	mov	r1, r5
   11d64:	mov	r6, r0
   11d68:	bl	110a8 <stpcpy@plt>
   11d6c:	mov	r3, #58	; 0x3a
   11d70:	mov	r1, r4
   11d74:	strb	r3, [r0], #1
   11d78:	bl	1112c <strcpy@plt>
   11d7c:	mov	r0, r6
   11d80:	ldrd	r4, [sp]
   11d84:	ldr	r6, [sp, #8]
   11d88:	add	sp, sp, #12
   11d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d90:	cmp	r1, #0
   11d94:	beq	11db0 <__assert_fail@plt+0xa80>
   11d98:	mov	r0, r1
   11d9c:	ldrd	r4, [sp]
   11da0:	ldr	r6, [sp, #8]
   11da4:	ldr	lr, [sp, #12]
   11da8:	add	sp, sp, #16
   11dac:	b	19140 <__assert_fail@plt+0x7e10>
   11db0:	mov	r6, r1
   11db4:	b	11d7c <__assert_fail@plt+0xa4c>
   11db8:	mov	r3, #0
   11dbc:	mov	r1, #2
   11dc0:	mov	r2, #1
   11dc4:	str	r1, [r0]
   11dc8:	strb	r3, [r0, #4]
   11dcc:	str	r3, [r0, #8]
   11dd0:	strh	r2, [r0, #12]
   11dd4:	str	r3, [r0, #16]
   11dd8:	str	r3, [r0, #20]
   11ddc:	bx	lr
   11de0:	str	r4, [sp, #-8]!
   11de4:	mov	r4, r0
   11de8:	ldr	r0, [r0, #16]
   11dec:	str	lr, [sp, #4]
   11df0:	bl	12ce8 <__assert_fail@plt+0x19b8>
   11df4:	ldr	lr, [sp, #4]
   11df8:	ldr	r0, [r4, #20]
   11dfc:	ldr	r4, [sp]
   11e00:	add	sp, sp, #8
   11e04:	b	12ce8 <__assert_fail@plt+0x19b8>
   11e08:	str	r4, [sp, #-8]!
   11e0c:	mov	r4, r0
   11e10:	str	lr, [sp, #4]
   11e14:	sub	sp, sp, #24
   11e18:	bl	11318 <getgrgid@plt>
   11e1c:	subs	r1, r0, #0
   11e20:	beq	11e3c <__assert_fail@plt+0xb0c>
   11e24:	ldr	r0, [r1]
   11e28:	bl	19140 <__assert_fail@plt+0x7e10>
   11e2c:	add	sp, sp, #24
   11e30:	ldr	r4, [sp]
   11e34:	add	sp, sp, #4
   11e38:	pop	{pc}		; (ldr pc, [sp], #4)
   11e3c:	mov	r0, r4
   11e40:	mov	r2, sp
   11e44:	bl	16280 <__assert_fail@plt+0x4f50>
   11e48:	b	11e28 <__assert_fail@plt+0xaf8>
   11e4c:	str	r4, [sp, #-8]!
   11e50:	mov	r4, r0
   11e54:	str	lr, [sp, #4]
   11e58:	sub	sp, sp, #24
   11e5c:	bl	11030 <getpwuid@plt>
   11e60:	subs	r1, r0, #0
   11e64:	beq	11e80 <__assert_fail@plt+0xb50>
   11e68:	ldr	r0, [r1]
   11e6c:	bl	19140 <__assert_fail@plt+0x7e10>
   11e70:	add	sp, sp, #24
   11e74:	ldr	r4, [sp]
   11e78:	add	sp, sp, #4
   11e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e80:	mov	r0, r4
   11e84:	mov	r2, sp
   11e88:	bl	16280 <__assert_fail@plt+0x4f50>
   11e8c:	b	11e6c <__assert_fail@plt+0xb3c>
   11e90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e94:	strd	r6, [sp, #8]
   11e98:	strd	r8, [sp, #16]
   11e9c:	strd	sl, [sp, #24]
   11ea0:	str	lr, [sp, #32]
   11ea4:	sub	sp, sp, #268	; 0x10c
   11ea8:	ldr	r6, [sp, #312]	; 0x138
   11eac:	str	r2, [sp, #24]
   11eb0:	str	r3, [sp, #40]	; 0x28
   11eb4:	ldr	r3, [sp, #304]	; 0x130
   11eb8:	ldr	r2, [sp, #308]	; 0x134
   11ebc:	and	r3, r3, r2
   11ec0:	cmn	r3, #1
   11ec4:	str	r3, [sp, #20]
   11ec8:	beq	128b0 <__assert_fail@plt+0x1580>
   11ecc:	movw	r3, #45940	; 0xb374
   11ed0:	movt	r3, #1
   11ed4:	mov	r2, #0
   11ed8:	mov	fp, #1
   11edc:	str	r3, [sp, #44]	; 0x2c
   11ee0:	movw	r3, #46196	; 0xb474
   11ee4:	movt	r3, #1
   11ee8:	str	r3, [sp, #48]	; 0x30
   11eec:	movw	r3, #46272	; 0xb4c0
   11ef0:	movt	r3, #1
   11ef4:	str	r3, [sp, #52]	; 0x34
   11ef8:	bl	191ac <__assert_fail@plt+0x7e7c>
   11efc:	str	r0, [sp, #12]
   11f00:	bl	111ec <__errno_location@plt>
   11f04:	str	r0, [sp, #32]
   11f08:	ldr	r0, [sp, #12]
   11f0c:	bl	147b0 <__assert_fail@plt+0x3480>
   11f10:	subs	r9, r0, #0
   11f14:	beq	12004 <__assert_fail@plt+0xcd4>
   11f18:	ldrh	sl, [r9, #56]	; 0x38
   11f1c:	ldr	r3, [r9, #28]
   11f20:	sub	r7, sl, #1
   11f24:	str	r3, [sp, #16]
   11f28:	cmp	r7, #9
   11f2c:	ldrls	pc, [pc, r7, lsl #2]
   11f30:	b	120b4 <__assert_fail@plt+0xd84>
   11f34:	andeq	r2, r1, r4, lsl #5
   11f38:	andeq	r2, r1, ip, lsr #4
   11f3c:	strheq	r2, [r1], -r4
   11f40:	andeq	r2, r1, r0, lsl #7
   11f44:	strheq	r2, [r1], -r4
   11f48:	andeq	r2, r1, r8, lsr #1
   11f4c:	andeq	r2, r1, r4, asr r0
   11f50:	strheq	r2, [r1], -r4
   11f54:	strheq	r2, [r1], -r4
   11f58:	andeq	r1, r1, ip, asr pc
   11f5c:	ldr	r3, [r9, #48]	; 0x30
   11f60:	cmp	r3, #0
   11f64:	bne	11f74 <__assert_fail@plt+0xc44>
   11f68:	ldr	r3, [r9, #16]
   11f6c:	cmp	r3, #0
   11f70:	beq	12a24 <__assert_fail@plt+0x16f4>
   11f74:	ldrb	r4, [r6, #13]
   11f78:	cmp	r4, #0
   11f7c:	movweq	r1, #45628	; 0xb23c
   11f80:	movteq	r1, #1
   11f84:	bne	12060 <__assert_fail@plt+0xd30>
   11f88:	ldr	r5, [r9, #32]
   11f8c:	mov	r2, #5
   11f90:	mov	r0, r4
   11f94:	bl	110c0 <dcgettext@plt>
   11f98:	mov	r7, r0
   11f9c:	mov	r0, #4
   11fa0:	ldr	r1, [sp, #16]
   11fa4:	bl	183d8 <__assert_fail@plt+0x70a8>
   11fa8:	mov	r3, r0
   11fac:	mov	r2, r7
   11fb0:	mov	r1, r5
   11fb4:	mov	r0, r4
   11fb8:	bl	11150 <error@plt>
   11fbc:	ldr	r3, [r6]
   11fc0:	mov	fp, r4
   11fc4:	mov	r5, r4
   11fc8:	mov	r7, r4
   11fcc:	mov	r4, #1
   11fd0:	cmp	r3, #2
   11fd4:	bne	12078 <__assert_fail@plt+0xd48>
   11fd8:	ldrb	r3, [r6, #4]
   11fdc:	cmp	r3, #0
   11fe0:	bne	11f08 <__assert_fail@plt+0xbd8>
   11fe4:	mov	r1, r9
   11fe8:	mov	r2, #4
   11fec:	ldr	r0, [sp, #12]
   11ff0:	bl	14e64 <__assert_fail@plt+0x3b34>
   11ff4:	ldr	r0, [sp, #12]
   11ff8:	bl	147b0 <__assert_fail@plt+0x3480>
   11ffc:	subs	r9, r0, #0
   12000:	bne	11f18 <__assert_fail@plt+0xbe8>
   12004:	ldr	r3, [sp, #32]
   12008:	ldr	r4, [r3]
   1200c:	cmp	r4, #0
   12010:	beq	12024 <__assert_fail@plt+0xcf4>
   12014:	ldrb	fp, [r6, #13]
   12018:	cmp	fp, #0
   1201c:	movne	fp, r9
   12020:	beq	129e4 <__assert_fail@plt+0x16b4>
   12024:	ldr	r0, [sp, #12]
   12028:	bl	14624 <__assert_fail@plt+0x32f4>
   1202c:	cmp	r0, #0
   12030:	bne	12960 <__assert_fail@plt+0x1630>
   12034:	mov	r0, fp
   12038:	add	sp, sp, #268	; 0x10c
   1203c:	ldrd	r4, [sp]
   12040:	ldrd	r6, [sp, #8]
   12044:	ldrd	r8, [sp, #16]
   12048:	ldrd	sl, [sp, #24]
   1204c:	add	sp, sp, #32
   12050:	pop	{pc}		; (ldr pc, [sp], #4)
   12054:	ldrb	r4, [r6, #13]
   12058:	cmp	r4, #0
   1205c:	beq	12810 <__assert_fail@plt+0x14e0>
   12060:	mov	fp, #0
   12064:	mov	r5, fp
   12068:	mov	r7, fp
   1206c:	ldr	r3, [r6]
   12070:	cmp	r3, #2
   12074:	beq	11fd8 <__assert_fail@plt+0xca8>
   12078:	cmp	r3, #0
   1207c:	bne	11fd8 <__assert_fail@plt+0xca8>
   12080:	cmp	r7, #0
   12084:	moveq	r3, #3
   12088:	streq	r3, [sp, #36]	; 0x24
   1208c:	bne	12850 <__assert_fail@plt+0x1520>
   12090:	cmp	r5, #0
   12094:	bne	127d8 <__assert_fail@plt+0x14a8>
   12098:	mov	r8, r5
   1209c:	ldr	sl, [r6, #16]
   120a0:	ldr	r4, [r6, #20]
   120a4:	b	124c4 <__assert_fail@plt+0x1194>
   120a8:	ldrb	r3, [r6, #4]
   120ac:	cmp	r3, #0
   120b0:	beq	11f08 <__assert_fail@plt+0xbd8>
   120b4:	ldr	r3, [sp, #20]
   120b8:	add	r5, r9, #64	; 0x40
   120bc:	ldrb	r4, [r6, #12]
   120c0:	ldr	r8, [r9, #24]
   120c4:	cmn	r3, #1
   120c8:	beq	1252c <__assert_fail@plt+0x11fc>
   120cc:	cmp	r4, #0
   120d0:	beq	120e4 <__assert_fail@plt+0xdb4>
   120d4:	ldr	r3, [r9, #80]	; 0x50
   120d8:	and	r3, r3, #61440	; 0xf000
   120dc:	cmp	r3, #40960	; 0xa000
   120e0:	beq	128cc <__assert_fail@plt+0x159c>
   120e4:	ldr	r3, [sp, #304]	; 0x130
   120e8:	uxth	r7, r7
   120ec:	bic	sl, sl, #2
   120f0:	cmp	sl, #4
   120f4:	cmpne	r7, #1
   120f8:	movls	r7, #1
   120fc:	movhi	r7, #0
   12100:	cmn	r3, #1
   12104:	beq	12398 <__assert_fail@plt+0x1068>
   12108:	ldr	r3, [r5, #24]
   1210c:	ldr	r2, [sp, #304]	; 0x130
   12110:	cmp	r2, r3
   12114:	beq	12398 <__assert_fail@plt+0x1068>
   12118:	cmp	r7, #0
   1211c:	beq	12804 <__assert_fail@plt+0x14d4>
   12120:	ldr	ip, [r6, #8]
   12124:	cmp	ip, #0
   12128:	beq	12bd4 <__assert_fail@plt+0x18a4>
   1212c:	ldrd	r2, [ip]
   12130:	ldrd	r0, [r5, #96]	; 0x60
   12134:	cmp	r1, r3
   12138:	cmpeq	r0, r2
   1213c:	moveq	lr, #0
   12140:	bne	12bd4 <__assert_fail@plt+0x18a4>
   12144:	ldrd	r0, [r5]
   12148:	ldrd	r2, [ip, #8]
   1214c:	cmp	r1, r3
   12150:	cmpeq	r0, r2
   12154:	beq	12674 <__assert_fail@plt+0x1344>
   12158:	cmp	lr, #0
   1215c:	beq	12804 <__assert_fail@plt+0x14d4>
   12160:	ldrb	r4, [r6, #12]
   12164:	cmp	r4, #0
   12168:	ldr	r3, [sp, #12]
   1216c:	ldr	sl, [r3, #32]
   12170:	bne	123e0 <__assert_fail@plt+0x10b0>
   12174:	mov	r2, #256	; 0x100
   12178:	mov	r1, r8
   1217c:	mov	r0, sl
   12180:	ldr	r3, [sp, #40]	; 0x28
   12184:	str	r2, [sp]
   12188:	ldr	r2, [sp, #24]
   1218c:	bl	112b8 <fchownat@plt>
   12190:	cmp	r0, #0
   12194:	moveq	r0, #1
   12198:	movne	r0, #0
   1219c:	beq	121b0 <__assert_fail@plt+0xe80>
   121a0:	ldr	r3, [sp, #32]
   121a4:	ldr	r3, [r3]
   121a8:	cmp	r3, #95	; 0x5f
   121ac:	beq	12994 <__assert_fail@plt+0x1664>
   121b0:	cmp	r0, #0
   121b4:	bne	12478 <__assert_fail@plt+0x1148>
   121b8:	ldrb	r4, [r6, #13]
   121bc:	cmp	r4, #0
   121c0:	movne	fp, #0
   121c4:	movne	r7, fp
   121c8:	bne	1206c <__assert_fail@plt+0xd3c>
   121cc:	ldr	r3, [sp, #24]
   121d0:	mov	r2, #5
   121d4:	mov	r0, r4
   121d8:	cmn	r3, #1
   121dc:	ldr	r3, [sp, #32]
   121e0:	movwne	r1, #45888	; 0xb340
   121e4:	movweq	r1, #45916	; 0xb35c
   121e8:	movtne	r1, #1
   121ec:	movteq	r1, #1
   121f0:	ldr	r7, [r3]
   121f4:	bl	110c0 <dcgettext@plt>
   121f8:	mov	r4, r0
   121fc:	mov	r0, #4
   12200:	ldr	r1, [sp, #16]
   12204:	bl	183d8 <__assert_fail@plt+0x70a8>
   12208:	mov	r3, r0
   1220c:	mov	r0, #0
   12210:	mov	r2, r4
   12214:	mov	r1, r7
   12218:	mov	fp, r0
   1221c:	mov	r4, #1
   12220:	bl	11150 <error@plt>
   12224:	mov	r7, fp
   12228:	b	1206c <__assert_fail@plt+0xd3c>
   1222c:	mov	r1, r9
   12230:	ldr	r0, [sp, #12]
   12234:	bl	19204 <__assert_fail@plt+0x7ed4>
   12238:	cmp	r0, #0
   1223c:	beq	120b4 <__assert_fail@plt+0xd84>
   12240:	mov	r2, #5
   12244:	movw	r1, #45676	; 0xb26c
   12248:	movt	r1, #1
   1224c:	mov	r0, #0
   12250:	bl	110c0 <dcgettext@plt>
   12254:	mov	r4, r0
   12258:	mov	r1, #3
   1225c:	ldr	r2, [sp, #16]
   12260:	mov	r0, #0
   12264:	bl	184b4 <__assert_fail@plt+0x7184>
   12268:	mov	r1, #0
   1226c:	mov	r3, r0
   12270:	mov	r2, r4
   12274:	mov	r0, r1
   12278:	mov	fp, r1
   1227c:	bl	11150 <error@plt>
   12280:	b	11f08 <__assert_fail@plt+0xbd8>
   12284:	ldrb	r3, [r6, #4]
   12288:	cmp	r3, #0
   1228c:	beq	120b4 <__assert_fail@plt+0xd84>
   12290:	ldr	ip, [r6, #8]
   12294:	cmp	ip, #0
   12298:	beq	11f08 <__assert_fail@plt+0xbd8>
   1229c:	ldrd	r2, [ip]
   122a0:	ldrd	r0, [r9, #160]	; 0xa0
   122a4:	cmp	r1, r3
   122a8:	cmpeq	r0, r2
   122ac:	bne	11f08 <__assert_fail@plt+0xbd8>
   122b0:	ldrd	r0, [ip, #8]
   122b4:	ldrd	r2, [r9, #64]	; 0x40
   122b8:	cmp	r3, r1
   122bc:	cmpeq	r2, r0
   122c0:	bne	11f08 <__assert_fail@plt+0xbd8>
   122c4:	ldr	r7, [sp, #16]
   122c8:	movw	r1, #45204	; 0xb094
   122cc:	movt	r1, #1
   122d0:	mov	r0, r7
   122d4:	bl	11024 <strcmp@plt>
   122d8:	subs	r4, r0, #0
   122dc:	beq	12b54 <__assert_fail@plt+0x1824>
   122e0:	mov	r2, #5
   122e4:	movw	r1, #45516	; 0xb1cc
   122e8:	movt	r1, #1
   122ec:	mov	r0, #0
   122f0:	bl	110c0 <dcgettext@plt>
   122f4:	mov	r4, r0
   122f8:	mov	r1, #4
   122fc:	ldr	r2, [sp, #16]
   12300:	mov	r0, #0
   12304:	bl	1834c <__assert_fail@plt+0x701c>
   12308:	mov	r5, r0
   1230c:	mov	r1, #4
   12310:	movw	r2, #45204	; 0xb094
   12314:	movt	r2, #1
   12318:	mov	r0, #1
   1231c:	bl	1834c <__assert_fail@plt+0x701c>
   12320:	mov	r1, #0
   12324:	mov	r3, r5
   12328:	str	r0, [sp]
   1232c:	mov	r2, r4
   12330:	mov	r0, r1
   12334:	bl	11150 <error@plt>
   12338:	mov	r2, #5
   1233c:	movw	r1, #45576	; 0xb208
   12340:	movt	r1, #1
   12344:	mov	r0, #0
   12348:	bl	110c0 <dcgettext@plt>
   1234c:	mov	r1, #0
   12350:	mov	r2, r0
   12354:	mov	r0, r1
   12358:	mov	fp, r1
   1235c:	bl	11150 <error@plt>
   12360:	ldr	r4, [sp, #12]
   12364:	mov	r1, r9
   12368:	mov	r2, #4
   1236c:	mov	r0, r4
   12370:	bl	14e64 <__assert_fail@plt+0x3b34>
   12374:	mov	r0, r4
   12378:	bl	147b0 <__assert_fail@plt+0x3480>
   1237c:	b	11f08 <__assert_fail@plt+0xbd8>
   12380:	ldrb	r4, [r6, #13]
   12384:	cmp	r4, #0
   12388:	bne	12060 <__assert_fail@plt+0xd30>
   1238c:	movw	r1, #45648	; 0xb250
   12390:	movt	r1, #1
   12394:	b	11f88 <__assert_fail@plt+0xc58>
   12398:	ldr	r3, [sp, #308]	; 0x134
   1239c:	cmn	r3, #1
   123a0:	beq	12638 <__assert_fail@plt+0x1308>
   123a4:	ldr	lr, [r5, #28]
   123a8:	cmp	r7, #0
   123ac:	sub	lr, lr, r3
   123b0:	clz	lr, lr
   123b4:	lsr	lr, lr, #5
   123b8:	beq	12158 <__assert_fail@plt+0xe28>
   123bc:	ldr	ip, [r6, #8]
   123c0:	cmp	ip, #0
   123c4:	beq	12158 <__assert_fail@plt+0xe28>
   123c8:	ldrd	r2, [ip]
   123cc:	ldrd	r0, [r5, #96]	; 0x60
   123d0:	cmp	r1, r3
   123d4:	cmpeq	r0, r2
   123d8:	bne	12158 <__assert_fail@plt+0xe28>
   123dc:	b	12144 <__assert_fail@plt+0xe14>
   123e0:	ldr	r3, [sp, #20]
   123e4:	cmn	r3, #1
   123e8:	beq	1244c <__assert_fail@plt+0x111c>
   123ec:	ldr	r3, [r5, #16]
   123f0:	and	r3, r3, #61440	; 0xf000
   123f4:	cmp	r3, #32768	; 0x8000
   123f8:	beq	127f8 <__assert_fail@plt+0x14c8>
   123fc:	cmp	r3, #16384	; 0x4000
   12400:	moveq	r3, #18688	; 0x4900
   12404:	streq	r3, [sp, #28]
   12408:	bne	1244c <__assert_fail@plt+0x111c>
   1240c:	mov	r1, r8
   12410:	mov	r0, sl
   12414:	ldr	r2, [sp, #28]
   12418:	bl	11060 <__openat64_2@plt>
   1241c:	subs	r7, r0, #0
   12420:	bge	1270c <__assert_fail@plt+0x13dc>
   12424:	ldr	r3, [sp, #32]
   12428:	ldr	r3, [r3]
   1242c:	cmp	r3, #13
   12430:	bne	121b8 <__assert_fail@plt+0xe88>
   12434:	ldr	r3, [r5, #16]
   12438:	and	r3, r3, #61440	; 0xf000
   1243c:	cmp	r3, #32768	; 0x8000
   12440:	beq	126f0 <__assert_fail@plt+0x13c0>
   12444:	ldr	r3, [sp, #12]
   12448:	ldr	sl, [r3, #32]
   1244c:	mov	r2, #0
   12450:	mov	r1, r8
   12454:	mov	r0, sl
   12458:	ldr	r3, [sp, #40]	; 0x28
   1245c:	str	r2, [sp]
   12460:	ldr	r2, [sp, #24]
   12464:	bl	112b8 <fchownat@plt>
   12468:	clz	r0, r0
   1246c:	lsr	r0, r0, #5
   12470:	cmp	r0, #0
   12474:	beq	121b8 <__assert_fail@plt+0xe88>
   12478:	ldr	r3, [r6]
   1247c:	cmp	r3, #2
   12480:	beq	11fd8 <__assert_fail@plt+0xca8>
   12484:	ldr	r2, [sp, #24]
   12488:	cmn	r2, #1
   1248c:	beq	1256c <__assert_fail@plt+0x123c>
   12490:	ldr	r0, [r5, #24]
   12494:	ldr	r2, [sp, #24]
   12498:	cmp	r2, r0
   1249c:	movne	r3, #2
   124a0:	strne	r3, [sp, #36]	; 0x24
   124a4:	beq	1256c <__assert_fail@plt+0x123c>
   124a8:	bl	11e4c <__assert_fail@plt+0xb1c>
   124ac:	mov	r8, r0
   124b0:	ldr	r0, [r5, #28]
   124b4:	bl	11e08 <__assert_fail@plt+0xad8>
   124b8:	ldr	sl, [r6, #16]
   124bc:	mov	r5, r0
   124c0:	ldr	r4, [r6, #20]
   124c4:	mov	r1, r4
   124c8:	mov	r0, sl
   124cc:	bl	11d20 <__assert_fail@plt+0x9f0>
   124d0:	cmp	sl, #0
   124d4:	str	r0, [sp, #28]
   124d8:	movne	r0, r8
   124dc:	moveq	r0, #0
   124e0:	cmp	r4, #0
   124e4:	movne	r1, r5
   124e8:	moveq	r1, #0
   124ec:	bl	11d20 <__assert_fail@plt+0x9f0>
   124f0:	ldr	r3, [sp, #36]	; 0x24
   124f4:	mov	r7, r0
   124f8:	cmp	r3, #3
   124fc:	beq	1260c <__assert_fail@plt+0x12dc>
   12500:	cmp	r3, #4
   12504:	beq	12594 <__assert_fail@plt+0x1264>
   12508:	cmp	sl, #0
   1250c:	beq	1275c <__assert_fail@plt+0x142c>
   12510:	movw	r1, #45996	; 0xb3ac
   12514:	movt	r1, #1
   12518:	mov	r2, #5
   1251c:	mov	r0, #0
   12520:	bl	110c0 <dcgettext@plt>
   12524:	mov	r4, r0
   12528:	b	125b4 <__assert_fail@plt+0x1284>
   1252c:	ldr	r3, [r6]
   12530:	cmp	r3, #2
   12534:	bne	120cc <__assert_fail@plt+0xd9c>
   12538:	ldr	r3, [r6, #8]
   1253c:	cmp	r3, #0
   12540:	bne	120cc <__assert_fail@plt+0xd9c>
   12544:	cmp	r4, #0
   12548:	bne	120d4 <__assert_fail@plt+0xda4>
   1254c:	bic	sl, sl, #2
   12550:	uxth	r7, r7
   12554:	cmp	sl, #4
   12558:	cmpne	r7, #1
   1255c:	bhi	12164 <__assert_fail@plt+0xe34>
   12560:	ldr	r3, [sp, #12]
   12564:	ldr	sl, [r3, #32]
   12568:	b	12174 <__assert_fail@plt+0xe44>
   1256c:	ldr	r1, [sp, #40]	; 0x28
   12570:	cmn	r1, #1
   12574:	beq	127c8 <__assert_fail@plt+0x1498>
   12578:	ldr	r2, [r5, #28]
   1257c:	cmp	r1, r2
   12580:	beq	127c8 <__assert_fail@plt+0x1498>
   12584:	mov	r3, #2
   12588:	ldr	r0, [r5, #24]
   1258c:	str	r3, [sp, #36]	; 0x24
   12590:	b	124a8 <__assert_fail@plt+0x1178>
   12594:	cmp	sl, #0
   12598:	beq	12780 <__assert_fail@plt+0x1450>
   1259c:	movw	r1, #46308	; 0xb4e4
   125a0:	movt	r1, #1
   125a4:	mov	r2, #5
   125a8:	mov	r0, #0
   125ac:	bl	110c0 <dcgettext@plt>
   125b0:	mov	r4, r0
   125b4:	mov	r0, #4
   125b8:	ldr	r1, [sp, #16]
   125bc:	bl	183d8 <__assert_fail@plt+0x70a8>
   125c0:	mov	r1, r4
   125c4:	ldr	r4, [sp, #28]
   125c8:	mov	r2, r0
   125cc:	mov	r3, r7
   125d0:	mov	r0, #1
   125d4:	str	r4, [sp]
   125d8:	bl	11210 <__printf_chk@plt>
   125dc:	mov	r0, r7
   125e0:	bl	12ce8 <__assert_fail@plt+0x19b8>
   125e4:	mov	r0, r4
   125e8:	bl	12ce8 <__assert_fail@plt+0x19b8>
   125ec:	mov	r0, r8
   125f0:	bl	12ce8 <__assert_fail@plt+0x19b8>
   125f4:	mov	r0, r5
   125f8:	bl	12ce8 <__assert_fail@plt+0x19b8>
   125fc:	ldrb	r3, [r6, #4]
   12600:	cmp	r3, #0
   12604:	bne	11f08 <__assert_fail@plt+0xbd8>
   12608:	b	11fe4 <__assert_fail@plt+0xcb4>
   1260c:	cmp	r0, #0
   12610:	beq	129a0 <__assert_fail@plt+0x1670>
   12614:	cmp	sl, #0
   12618:	beq	127a4 <__assert_fail@plt+0x1474>
   1261c:	movw	r1, #46104	; 0xb418
   12620:	movt	r1, #1
   12624:	mov	r2, #5
   12628:	mov	r0, #0
   1262c:	bl	110c0 <dcgettext@plt>
   12630:	mov	r4, r0
   12634:	b	125b4 <__assert_fail@plt+0x1284>
   12638:	cmp	r7, #0
   1263c:	beq	12160 <__assert_fail@plt+0xe30>
   12640:	ldr	ip, [r6, #8]
   12644:	cmp	ip, #0
   12648:	beq	12160 <__assert_fail@plt+0xe30>
   1264c:	ldrd	r2, [ip]
   12650:	ldrd	r0, [r5, #96]	; 0x60
   12654:	cmp	r1, r3
   12658:	cmpeq	r0, r2
   1265c:	bne	12160 <__assert_fail@plt+0xe30>
   12660:	ldrd	r2, [r5]
   12664:	ldrd	r0, [ip, #8]
   12668:	cmp	r1, r3
   1266c:	cmpeq	r0, r2
   12670:	bne	12160 <__assert_fail@plt+0xe30>
   12674:	ldr	r7, [sp, #16]
   12678:	movw	r1, #45204	; 0xb094
   1267c:	movt	r1, #1
   12680:	mov	r0, r7
   12684:	bl	11024 <strcmp@plt>
   12688:	subs	r4, r0, #0
   1268c:	bne	12ae4 <__assert_fail@plt+0x17b4>
   12690:	mov	r2, #5
   12694:	movw	r1, #45468	; 0xb19c
   12698:	movt	r1, #1
   1269c:	bl	110c0 <dcgettext@plt>
   126a0:	mov	r5, r0
   126a4:	mov	r1, r7
   126a8:	mov	r0, #4
   126ac:	bl	183d8 <__assert_fail@plt+0x70a8>
   126b0:	mov	r3, r0
   126b4:	mov	r2, r5
   126b8:	mov	r1, r4
   126bc:	mov	r0, r4
   126c0:	bl	11150 <error@plt>
   126c4:	mov	r2, #5
   126c8:	movw	r1, #45576	; 0xb208
   126cc:	movt	r1, #1
   126d0:	mov	r0, #0
   126d4:	bl	110c0 <dcgettext@plt>
   126d8:	mov	r1, #0
   126dc:	mov	r2, r0
   126e0:	mov	r0, r1
   126e4:	mov	fp, r1
   126e8:	bl	11150 <error@plt>
   126ec:	b	11f08 <__assert_fail@plt+0xbd8>
   126f0:	ldr	r3, [sp, #28]
   126f4:	mov	r0, sl
   126f8:	mov	r1, r8
   126fc:	orr	r2, r3, #1
   12700:	bl	11060 <__openat64_2@plt>
   12704:	subs	r7, r0, #0
   12708:	blt	12b40 <__assert_fail@plt+0x1810>
   1270c:	add	r2, sp, #160	; 0xa0
   12710:	mov	r1, r7
   12714:	mov	r0, #3
   12718:	bl	110fc <__fxstat64@plt>
   1271c:	subs	ip, r0, #0
   12720:	bne	127e0 <__assert_fail@plt+0x14b0>
   12724:	add	r3, sp, #256	; 0x100
   12728:	ldrd	r0, [r5, #96]	; 0x60
   1272c:	ldrd	r2, [r3]
   12730:	cmp	r1, r3
   12734:	cmpeq	r0, r2
   12738:	beq	12a58 <__assert_fail@plt+0x1728>
   1273c:	ldr	sl, [sp, #32]
   12740:	mov	r0, r7
   12744:	mov	fp, ip
   12748:	mov	r7, ip
   1274c:	ldr	r8, [sl]
   12750:	bl	112f4 <close@plt>
   12754:	str	r8, [sl]
   12758:	b	1206c <__assert_fail@plt+0xd3c>
   1275c:	cmp	r4, #0
   12760:	beq	12abc <__assert_fail@plt+0x178c>
   12764:	mov	r0, sl
   12768:	movw	r1, #46036	; 0xb3d4
   1276c:	movt	r1, #1
   12770:	mov	r2, #5
   12774:	bl	110c0 <dcgettext@plt>
   12778:	mov	r4, r0
   1277c:	b	125b4 <__assert_fail@plt+0x1284>
   12780:	cmp	r4, #0
   12784:	beq	12aa0 <__assert_fail@plt+0x1770>
   12788:	mov	r0, sl
   1278c:	movw	r1, #46340	; 0xb504
   12790:	movt	r1, #1
   12794:	mov	r2, #5
   12798:	bl	110c0 <dcgettext@plt>
   1279c:	mov	r4, r0
   127a0:	b	125b4 <__assert_fail@plt+0x1284>
   127a4:	cmp	r4, #0
   127a8:	beq	12a40 <__assert_fail@plt+0x1710>
   127ac:	mov	r0, sl
   127b0:	movw	r1, #46152	; 0xb448
   127b4:	movt	r1, #1
   127b8:	mov	r2, #5
   127bc:	bl	110c0 <dcgettext@plt>
   127c0:	mov	r4, r0
   127c4:	b	125b4 <__assert_fail@plt+0x1284>
   127c8:	cmp	r3, #0
   127cc:	bne	11fd8 <__assert_fail@plt+0xca8>
   127d0:	mov	r3, #4
   127d4:	str	r3, [sp, #36]	; 0x24
   127d8:	ldr	r0, [r5, #24]
   127dc:	b	124a8 <__assert_fail@plt+0x1178>
   127e0:	ldr	r8, [sp, #32]
   127e4:	mov	r0, r7
   127e8:	ldr	r4, [r8]
   127ec:	bl	112f4 <close@plt>
   127f0:	str	r4, [r8]
   127f4:	b	121b8 <__assert_fail@plt+0xe88>
   127f8:	mov	r3, #2304	; 0x900
   127fc:	str	r3, [sp, #28]
   12800:	b	1240c <__assert_fail@plt+0x10dc>
   12804:	mov	r4, #1
   12808:	mov	r7, r4
   1280c:	b	1206c <__assert_fail@plt+0xd3c>
   12810:	ldr	r5, [r9, #32]
   12814:	mov	r1, #3
   12818:	mov	r0, r4
   1281c:	mov	fp, r4
   12820:	mov	r7, r4
   12824:	ldr	r2, [sp, #16]
   12828:	mov	r4, #1
   1282c:	bl	184b4 <__assert_fail@plt+0x7184>
   12830:	mov	r3, r0
   12834:	movw	r2, #46448	; 0xb570
   12838:	movt	r2, #1
   1283c:	mov	r1, r5
   12840:	mov	r0, fp
   12844:	mov	r5, fp
   12848:	bl	11150 <error@plt>
   1284c:	b	1206c <__assert_fail@plt+0xd3c>
   12850:	cmp	r4, #0
   12854:	bne	12ad8 <__assert_fail@plt+0x17a8>
   12858:	cmp	r5, #0
   1285c:	moveq	r8, r5
   12860:	beq	1287c <__assert_fail@plt+0x154c>
   12864:	ldr	r0, [r5, #24]
   12868:	bl	11e4c <__assert_fail@plt+0xb1c>
   1286c:	mov	r8, r0
   12870:	ldr	r0, [r5, #28]
   12874:	bl	11e08 <__assert_fail@plt+0xad8>
   12878:	mov	r5, r0
   1287c:	mov	r2, #5
   12880:	mov	r0, #0
   12884:	ldr	r1, [sp, #44]	; 0x2c
   12888:	bl	110c0 <dcgettext@plt>
   1288c:	mov	r4, r0
   12890:	mov	r0, #4
   12894:	ldr	r1, [sp, #16]
   12898:	bl	183d8 <__assert_fail@plt+0x70a8>
   1289c:	mov	r2, r0
   128a0:	mov	r1, r4
   128a4:	mov	r0, #1
   128a8:	bl	11210 <__printf_chk@plt>
   128ac:	b	125ec <__assert_fail@plt+0x12bc>
   128b0:	ldrb	r3, [r6, #12]
   128b4:	cmp	r3, #0
   128b8:	bne	11ecc <__assert_fail@plt+0xb9c>
   128bc:	ldr	r3, [r6]
   128c0:	cmp	r3, #2
   128c4:	orreq	r1, r1, #8
   128c8:	b	11ecc <__assert_fail@plt+0xb9c>
   128cc:	ldr	r3, [sp, #12]
   128d0:	mov	r5, #0
   128d4:	mov	r2, r8
   128d8:	mov	r0, #3
   128dc:	ldr	r1, [r3, #32]
   128e0:	add	r3, sp, #56	; 0x38
   128e4:	str	r5, [sp]
   128e8:	bl	110e4 <__fxstatat64@plt>
   128ec:	cmp	r0, r5
   128f0:	beq	129d4 <__assert_fail@plt+0x16a4>
   128f4:	ldrb	r4, [r6, #13]
   128f8:	cmp	r4, #0
   128fc:	movne	fp, r5
   12900:	addne	r5, sp, #56	; 0x38
   12904:	movne	r7, fp
   12908:	bne	1206c <__assert_fail@plt+0xd3c>
   1290c:	ldr	r3, [sp, #32]
   12910:	mov	r2, #5
   12914:	mov	r0, r4
   12918:	movw	r1, #45864	; 0xb328
   1291c:	movt	r1, #1
   12920:	mov	fp, r4
   12924:	ldr	r5, [r3]
   12928:	bl	110c0 <dcgettext@plt>
   1292c:	mov	r7, r0
   12930:	mov	r0, #4
   12934:	ldr	r1, [sp, #16]
   12938:	bl	183d8 <__assert_fail@plt+0x70a8>
   1293c:	mov	r3, r0
   12940:	mov	r2, r7
   12944:	mov	r1, r5
   12948:	mov	r0, r4
   1294c:	add	r5, sp, #56	; 0x38
   12950:	mov	r4, #1
   12954:	bl	11150 <error@plt>
   12958:	mov	r7, fp
   1295c:	b	1206c <__assert_fail@plt+0xd3c>
   12960:	ldr	r3, [sp, #32]
   12964:	mov	r2, #5
   12968:	movw	r1, #46396	; 0xb53c
   1296c:	movt	r1, #1
   12970:	mov	r0, #0
   12974:	ldr	r4, [r3]
   12978:	bl	110c0 <dcgettext@plt>
   1297c:	mov	r2, r0
   12980:	mov	r0, #0
   12984:	mov	fp, r0
   12988:	mov	r1, r4
   1298c:	bl	11150 <error@plt>
   12990:	b	12034 <__assert_fail@plt+0xd04>
   12994:	mov	r4, #0
   12998:	mov	r7, #1
   1299c:	b	1206c <__assert_fail@plt+0xd3c>
   129a0:	cmp	sl, #0
   129a4:	beq	12a08 <__assert_fail@plt+0x16d8>
   129a8:	movw	r1, #46232	; 0xb498
   129ac:	movt	r1, #1
   129b0:	mov	r2, #5
   129b4:	bl	110c0 <dcgettext@plt>
   129b8:	mov	r4, r0
   129bc:	mov	r0, #0
   129c0:	ldr	r7, [sp, #28]
   129c4:	bl	12ce8 <__assert_fail@plt+0x19b8>
   129c8:	mov	r3, #0
   129cc:	str	r3, [sp, #28]
   129d0:	b	125b4 <__assert_fail@plt+0x1284>
   129d4:	ldrh	sl, [r9, #56]	; 0x38
   129d8:	add	r5, sp, #56	; 0x38
   129dc:	sub	r7, sl, #1
   129e0:	b	120e4 <__assert_fail@plt+0xdb4>
   129e4:	mov	r2, #5
   129e8:	movw	r1, #45452	; 0xb18c
   129ec:	movt	r1, #1
   129f0:	bl	110c0 <dcgettext@plt>
   129f4:	mov	r2, r0
   129f8:	mov	r1, r4
   129fc:	mov	r0, fp
   12a00:	bl	11150 <error@plt>
   12a04:	b	12024 <__assert_fail@plt+0xcf4>
   12a08:	cmp	r4, #0
   12a0c:	mov	r2, #5
   12a10:	ldrne	r1, [sp, #52]	; 0x34
   12a14:	ldreq	r1, [sp, #48]	; 0x30
   12a18:	bl	110c0 <dcgettext@plt>
   12a1c:	mov	r4, r0
   12a20:	b	129bc <__assert_fail@plt+0x168c>
   12a24:	mov	r3, #1
   12a28:	mov	r1, r9
   12a2c:	ldr	r0, [sp, #12]
   12a30:	mov	r2, r3
   12a34:	str	r3, [r9, #16]
   12a38:	bl	14e64 <__assert_fail@plt+0x3b34>
   12a3c:	b	11f08 <__assert_fail@plt+0xbd8>
   12a40:	mov	r0, r4
   12a44:	mov	r2, #5
   12a48:	ldr	r1, [sp, #48]	; 0x30
   12a4c:	bl	110c0 <dcgettext@plt>
   12a50:	mov	r4, r0
   12a54:	b	125b4 <__assert_fail@plt+0x1284>
   12a58:	ldrd	r0, [r5]
   12a5c:	ldrd	r2, [sp, #160]	; 0xa0
   12a60:	cmp	r1, r3
   12a64:	cmpeq	r0, r2
   12a68:	bne	1273c <__assert_fail@plt+0x140c>
   12a6c:	ldr	r3, [sp, #304]	; 0x130
   12a70:	cmn	r3, #1
   12a74:	beq	12b8c <__assert_fail@plt+0x185c>
   12a78:	ldr	r3, [sp, #184]	; 0xb8
   12a7c:	ldr	r2, [sp, #304]	; 0x130
   12a80:	cmp	r2, r3
   12a84:	beq	12b8c <__assert_fail@plt+0x185c>
   12a88:	ldr	r8, [sp, #32]
   12a8c:	mov	r0, r7
   12a90:	ldr	r4, [r8]
   12a94:	bl	112f4 <close@plt>
   12a98:	str	r4, [r8]
   12a9c:	b	12478 <__assert_fail@plt+0x1148>
   12aa0:	mov	r0, r4
   12aa4:	movw	r1, #46368	; 0xb520
   12aa8:	movt	r1, #1
   12aac:	mov	r2, #5
   12ab0:	bl	110c0 <dcgettext@plt>
   12ab4:	mov	r4, r0
   12ab8:	b	125b4 <__assert_fail@plt+0x1284>
   12abc:	mov	r0, r4
   12ac0:	movw	r1, #46072	; 0xb3f8
   12ac4:	movt	r1, #1
   12ac8:	mov	r2, #5
   12acc:	bl	110c0 <dcgettext@plt>
   12ad0:	mov	r4, r0
   12ad4:	b	125b4 <__assert_fail@plt+0x1284>
   12ad8:	mov	r3, #4
   12adc:	str	r3, [sp, #36]	; 0x24
   12ae0:	b	12090 <__assert_fail@plt+0xd60>
   12ae4:	mov	r2, #5
   12ae8:	movw	r1, #45516	; 0xb1cc
   12aec:	movt	r1, #1
   12af0:	mov	r0, #0
   12af4:	bl	110c0 <dcgettext@plt>
   12af8:	mov	r4, r0
   12afc:	mov	r1, #4
   12b00:	ldr	r2, [sp, #16]
   12b04:	mov	r0, #0
   12b08:	bl	1834c <__assert_fail@plt+0x701c>
   12b0c:	mov	r5, r0
   12b10:	mov	r1, #4
   12b14:	movw	r2, #45204	; 0xb094
   12b18:	movt	r2, #1
   12b1c:	mov	r0, #1
   12b20:	bl	1834c <__assert_fail@plt+0x701c>
   12b24:	mov	r1, #0
   12b28:	mov	r3, r5
   12b2c:	str	r0, [sp]
   12b30:	mov	r2, r4
   12b34:	mov	r0, r1
   12b38:	bl	11150 <error@plt>
   12b3c:	b	126c4 <__assert_fail@plt+0x1394>
   12b40:	ldr	r3, [sp, #32]
   12b44:	ldr	r3, [r3]
   12b48:	cmp	r3, #13
   12b4c:	bne	121b8 <__assert_fail@plt+0xe88>
   12b50:	b	12444 <__assert_fail@plt+0x1114>
   12b54:	mov	r2, #5
   12b58:	movw	r1, #45468	; 0xb19c
   12b5c:	movt	r1, #1
   12b60:	bl	110c0 <dcgettext@plt>
   12b64:	mov	r5, r0
   12b68:	mov	r1, r7
   12b6c:	mov	r0, #4
   12b70:	bl	183d8 <__assert_fail@plt+0x70a8>
   12b74:	mov	r3, r0
   12b78:	mov	r2, r5
   12b7c:	mov	r1, r4
   12b80:	mov	r0, r4
   12b84:	bl	11150 <error@plt>
   12b88:	b	12338 <__assert_fail@plt+0x1008>
   12b8c:	ldr	r3, [sp, #308]	; 0x134
   12b90:	cmn	r3, #1
   12b94:	beq	12ba8 <__assert_fail@plt+0x1878>
   12b98:	ldr	r3, [sp, #188]	; 0xbc
   12b9c:	ldr	r2, [sp, #308]	; 0x134
   12ba0:	cmp	r2, r3
   12ba4:	bne	12a88 <__assert_fail@plt+0x1758>
   12ba8:	mov	r0, r7
   12bac:	ldr	r1, [sp, #24]
   12bb0:	ldr	r2, [sp, #40]	; 0x28
   12bb4:	bl	111e0 <fchown@plt>
   12bb8:	cmp	r0, #0
   12bbc:	bne	127e0 <__assert_fail@plt+0x14b0>
   12bc0:	mov	r0, r7
   12bc4:	bl	112f4 <close@plt>
   12bc8:	cmp	r0, #0
   12bcc:	bne	121b8 <__assert_fail@plt+0xe88>
   12bd0:	b	12478 <__assert_fail@plt+0x1148>
   12bd4:	mov	r4, r7
   12bd8:	b	1206c <__assert_fail@plt+0xd3c>
   12bdc:	movw	r3, #49592	; 0xc1b8
   12be0:	movt	r3, #2
   12be4:	str	r0, [r3]
   12be8:	bx	lr
   12bec:	movw	r3, #49592	; 0xc1b8
   12bf0:	movt	r3, #2
   12bf4:	strb	r0, [r3, #4]
   12bf8:	bx	lr
   12bfc:	movw	r3, #49556	; 0xc194
   12c00:	movt	r3, #2
   12c04:	strd	r4, [sp, #-16]!
   12c08:	ldr	r0, [r3]
   12c0c:	str	r6, [sp, #8]
   12c10:	str	lr, [sp, #12]
   12c14:	sub	sp, sp, #8
   12c18:	bl	19cec <__assert_fail@plt+0x89bc>
   12c1c:	cmp	r0, #0
   12c20:	beq	12c4c <__assert_fail@plt+0x191c>
   12c24:	movw	r4, #49592	; 0xc1b8
   12c28:	movt	r4, #2
   12c2c:	ldrb	r6, [r4, #4]
   12c30:	bl	111ec <__errno_location@plt>
   12c34:	mov	r5, r0
   12c38:	cmp	r6, #0
   12c3c:	beq	12c78 <__assert_fail@plt+0x1948>
   12c40:	ldr	r3, [r0]
   12c44:	cmp	r3, #32
   12c48:	bne	12c78 <__assert_fail@plt+0x1948>
   12c4c:	movw	r3, #49552	; 0xc190
   12c50:	movt	r3, #2
   12c54:	ldr	r0, [r3]
   12c58:	bl	19cec <__assert_fail@plt+0x89bc>
   12c5c:	cmp	r0, #0
   12c60:	bne	12cc0 <__assert_fail@plt+0x1990>
   12c64:	add	sp, sp, #8
   12c68:	ldrd	r4, [sp]
   12c6c:	ldr	r6, [sp, #8]
   12c70:	add	sp, sp, #12
   12c74:	pop	{pc}		; (ldr pc, [sp], #4)
   12c78:	movw	r1, #46432	; 0xb560
   12c7c:	movt	r1, #1
   12c80:	mov	r2, #5
   12c84:	mov	r0, #0
   12c88:	bl	110c0 <dcgettext@plt>
   12c8c:	mov	r6, r0
   12c90:	ldr	r0, [r4]
   12c94:	cmp	r0, #0
   12c98:	beq	12cd0 <__assert_fail@plt+0x19a0>
   12c9c:	ldr	r4, [r5]
   12ca0:	bl	184a0 <__assert_fail@plt+0x7170>
   12ca4:	mov	r3, r0
   12ca8:	movw	r2, #46444	; 0xb56c
   12cac:	movt	r2, #1
   12cb0:	mov	r0, #0
   12cb4:	str	r6, [sp]
   12cb8:	mov	r1, r4
   12cbc:	bl	11150 <error@plt>
   12cc0:	movw	r3, #49464	; 0xc138
   12cc4:	movt	r3, #2
   12cc8:	ldr	r0, [r3]
   12ccc:	bl	1106c <_exit@plt>
   12cd0:	mov	r3, r6
   12cd4:	movw	r2, #46448	; 0xb570
   12cd8:	movt	r2, #1
   12cdc:	ldr	r1, [r5]
   12ce0:	bl	11150 <error@plt>
   12ce4:	b	12cc0 <__assert_fail@plt+0x1990>
   12ce8:	strd	r4, [sp, #-12]!
   12cec:	mov	r5, r0
   12cf0:	str	lr, [sp, #8]
   12cf4:	sub	sp, sp, #12
   12cf8:	bl	111ec <__errno_location@plt>
   12cfc:	mov	r4, r0
   12d00:	mov	r2, #0
   12d04:	ldr	r3, [r4]
   12d08:	mov	r0, r5
   12d0c:	str	r2, [r4]
   12d10:	str	r3, [sp]
   12d14:	str	r3, [sp, #4]
   12d18:	bl	11054 <free@plt>
   12d1c:	ldr	r3, [r4]
   12d20:	add	r2, sp, #8
   12d24:	clz	r3, r3
   12d28:	lsr	r3, r3, #5
   12d2c:	add	r3, r2, r3, lsl #2
   12d30:	ldr	r3, [r3, #-8]
   12d34:	str	r3, [r4]
   12d38:	add	sp, sp, #12
   12d3c:	ldrd	r4, [sp]
   12d40:	add	sp, sp, #8
   12d44:	pop	{pc}		; (ldr pc, [sp], #4)
   12d48:	strd	r4, [sp, #-8]!
   12d4c:	ldrd	r2, [r1, #8]
   12d50:	ldrd	r4, [r0, #8]
   12d54:	cmp	r5, r3
   12d58:	cmpeq	r4, r2
   12d5c:	movne	r0, #0
   12d60:	bne	12d7c <__assert_fail@plt+0x1a4c>
   12d64:	ldrd	r4, [r0]
   12d68:	ldrd	r2, [r1]
   12d6c:	cmp	r5, r3
   12d70:	cmpeq	r4, r2
   12d74:	moveq	r0, #1
   12d78:	movne	r0, #0
   12d7c:	ldrd	r4, [sp]
   12d80:	add	sp, sp, #8
   12d84:	bx	lr
   12d88:	mov	r2, r1
   12d8c:	mov	r3, #0
   12d90:	str	r4, [sp, #-8]!
   12d94:	ldrd	r0, [r0, #8]
   12d98:	str	lr, [sp, #4]
   12d9c:	bl	1a4bc <__assert_fail@plt+0x918c>
   12da0:	ldr	r4, [sp]
   12da4:	add	sp, sp, #4
   12da8:	mov	r0, r2
   12dac:	pop	{pc}		; (ldr pc, [sp], #4)
   12db0:	mov	r2, r1
   12db4:	mov	r3, #0
   12db8:	str	r4, [sp, #-8]!
   12dbc:	ldrd	r0, [r0]
   12dc0:	str	lr, [sp, #4]
   12dc4:	bl	1a4bc <__assert_fail@plt+0x918c>
   12dc8:	ldr	r4, [sp]
   12dcc:	add	sp, sp, #4
   12dd0:	mov	r0, r2
   12dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12dd8:	strd	r4, [sp, #-8]!
   12ddc:	ldrd	r2, [r1]
   12de0:	ldrd	r4, [r0]
   12de4:	cmp	r5, r3
   12de8:	cmpeq	r4, r2
   12dec:	ldrd	r4, [sp]
   12df0:	add	sp, sp, #8
   12df4:	moveq	r0, #1
   12df8:	movne	r0, #0
   12dfc:	bx	lr
   12e00:	ldr	r2, [r0]
   12e04:	ldr	r3, [r1]
   12e08:	ldrd	r0, [r2, #160]	; 0xa0
   12e0c:	ldrd	r2, [r3, #160]	; 0xa0
   12e10:	cmp	r1, r3
   12e14:	cmpeq	r0, r2
   12e18:	movhi	r0, #1
   12e1c:	movls	r0, #0
   12e20:	movcc	r3, #1
   12e24:	movcs	r3, #0
   12e28:	sub	r0, r0, r3
   12e2c:	bx	lr
   12e30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e34:	mov	r5, r2
   12e38:	mov	r4, r1
   12e3c:	ldr	r2, [r0, #40]	; 0x28
   12e40:	strd	r6, [sp, #8]
   12e44:	mov	r6, r0
   12e48:	str	r8, [sp, #16]
   12e4c:	str	lr, [sp, #20]
   12e50:	ldr	r0, [r0, #8]
   12e54:	cmp	r2, r5
   12e58:	ldr	r7, [r6, #44]	; 0x2c
   12e5c:	bcs	12e84 <__assert_fail@plt+0x1b54>
   12e60:	add	r1, r5, #40	; 0x28
   12e64:	cmn	r1, #-1073741823	; 0xc0000001
   12e68:	str	r1, [r6, #40]	; 0x28
   12e6c:	bhi	12f0c <__assert_fail@plt+0x1bdc>
   12e70:	lsl	r1, r1, #2
   12e74:	bl	19c94 <__assert_fail@plt+0x8964>
   12e78:	cmp	r0, #0
   12e7c:	strne	r0, [r6, #8]
   12e80:	beq	12f08 <__assert_fail@plt+0x1bd8>
   12e84:	cmp	r4, #0
   12e88:	movne	r2, r0
   12e8c:	beq	12ea0 <__assert_fail@plt+0x1b70>
   12e90:	str	r4, [r2], #4
   12e94:	ldr	r4, [r4, #8]
   12e98:	cmp	r4, #0
   12e9c:	bne	12e90 <__assert_fail@plt+0x1b60>
   12ea0:	mov	r3, r7
   12ea4:	mov	r2, #4
   12ea8:	mov	r1, r5
   12eac:	bl	112ac <qsort@plt>
   12eb0:	ldr	lr, [r6, #8]
   12eb4:	subs	r3, r5, #1
   12eb8:	ldr	r0, [lr]
   12ebc:	moveq	r2, r0
   12ec0:	beq	12eec <__assert_fail@plt+0x1bbc>
   12ec4:	mov	ip, r0
   12ec8:	mov	r2, lr
   12ecc:	b	12ed4 <__assert_fail@plt+0x1ba4>
   12ed0:	ldr	ip, [r2]
   12ed4:	subs	r3, r3, #1
   12ed8:	ldr	r1, [r2, #4]!
   12edc:	str	r1, [ip, #8]
   12ee0:	bne	12ed0 <__assert_fail@plt+0x1ba0>
   12ee4:	add	r5, lr, r5, lsl #2
   12ee8:	ldr	r2, [r5, #-4]
   12eec:	mov	r3, #0
   12ef0:	str	r3, [r2, #8]
   12ef4:	ldrd	r4, [sp]
   12ef8:	ldrd	r6, [sp, #8]
   12efc:	ldr	r8, [sp, #16]
   12f00:	add	sp, sp, #20
   12f04:	pop	{pc}		; (ldr pc, [sp], #4)
   12f08:	ldr	r0, [r6, #8]
   12f0c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   12f10:	mov	r3, #0
   12f14:	mov	r0, r4
   12f18:	str	r3, [r6, #8]
   12f1c:	str	r3, [r6, #40]	; 0x28
   12f20:	b	12ef4 <__assert_fail@plt+0x1bc4>
   12f24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f28:	mov	r5, r2
   12f2c:	strd	r6, [sp, #8]
   12f30:	mov	r6, r0
   12f34:	add	r0, r2, #176	; 0xb0
   12f38:	bic	r0, r0, #7
   12f3c:	mov	r7, r1
   12f40:	str	r8, [sp, #16]
   12f44:	str	lr, [sp, #20]
   12f48:	bl	19c58 <__assert_fail@plt+0x8928>
   12f4c:	subs	r4, r0, #0
   12f50:	beq	12f9c <__assert_fail@plt+0x1c6c>
   12f54:	mov	r1, r7
   12f58:	mov	r2, r5
   12f5c:	add	r0, r4, #168	; 0xa8
   12f60:	bl	11078 <memcpy@plt>
   12f64:	ldr	r1, [r6, #24]
   12f68:	mov	r3, #0
   12f6c:	add	r0, r4, r5
   12f70:	mov	r2, #3
   12f74:	strb	r3, [r0, #168]	; 0xa8
   12f78:	str	r3, [r4, #12]
   12f7c:	str	r3, [r4, #16]
   12f80:	str	r3, [r4, #20]
   12f84:	str	r1, [r4, #28]
   12f88:	str	r3, [r4, #32]
   12f8c:	str	r6, [r4, #44]	; 0x2c
   12f90:	str	r5, [r4, #52]	; 0x34
   12f94:	strh	r3, [r4, #58]	; 0x3a
   12f98:	strh	r2, [r4, #60]	; 0x3c
   12f9c:	mov	r0, r4
   12fa0:	ldrd	r4, [sp]
   12fa4:	ldrd	r6, [sp, #8]
   12fa8:	ldr	r8, [sp, #16]
   12fac:	add	sp, sp, #20
   12fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb4:	strd	r4, [sp, #-16]!
   12fb8:	subs	r4, r0, #0
   12fbc:	str	r6, [sp, #8]
   12fc0:	str	lr, [sp, #12]
   12fc4:	beq	12fec <__assert_fail@plt+0x1cbc>
   12fc8:	ldr	r5, [r4, #8]
   12fcc:	ldr	r3, [r4, #12]
   12fd0:	subs	r0, r3, #0
   12fd4:	beq	12fdc <__assert_fail@plt+0x1cac>
   12fd8:	bl	1130c <closedir@plt>
   12fdc:	mov	r0, r4
   12fe0:	bl	12ce8 <__assert_fail@plt+0x19b8>
   12fe4:	subs	r4, r5, #0
   12fe8:	bne	12fc8 <__assert_fail@plt+0x1c98>
   12fec:	ldrd	r4, [sp]
   12ff0:	ldr	r6, [sp, #8]
   12ff4:	add	sp, sp, #12
   12ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ffc:	str	r4, [sp, #-8]!
   13000:	mov	r4, r0
   13004:	str	lr, [sp, #4]
   13008:	b	13018 <__assert_fail@plt+0x1ce8>
   1300c:	bl	16230 <__assert_fail@plt+0x4f00>
   13010:	cmp	r0, #0
   13014:	bge	13038 <__assert_fail@plt+0x1d08>
   13018:	mov	r0, r4
   1301c:	bl	161e0 <__assert_fail@plt+0x4eb0>
   13020:	cmp	r0, #0
   13024:	mov	r0, r4
   13028:	beq	1300c <__assert_fail@plt+0x1cdc>
   1302c:	ldr	r4, [sp]
   13030:	add	sp, sp, #4
   13034:	pop	{pc}		; (ldr pc, [sp], #4)
   13038:	bl	112f4 <close@plt>
   1303c:	b	13018 <__assert_fail@plt+0x1ce8>
   13040:	strd	r4, [sp, #-20]!	; 0xffffffec
   13044:	ldr	r5, [r0, #44]	; 0x2c
   13048:	ldr	r3, [r5, #48]	; 0x30
   1304c:	strd	r6, [sp, #8]
   13050:	str	lr, [sp, #16]
   13054:	sub	sp, sp, #100	; 0x64
   13058:	tst	r3, #512	; 0x200
   1305c:	beq	130ec <__assert_fail@plt+0x1dbc>
   13060:	ldr	r4, [r5, #52]	; 0x34
   13064:	mov	r7, r1
   13068:	mov	r6, r0
   1306c:	cmp	r4, #0
   13070:	beq	13098 <__assert_fail@plt+0x1d68>
   13074:	ldrd	r2, [r6, #64]	; 0x40
   13078:	add	r1, sp, #8
   1307c:	mov	r0, r4
   13080:	strd	r2, [sp, #8]
   13084:	bl	156e0 <__assert_fail@plt+0x43b0>
   13088:	cmp	r0, #0
   1308c:	beq	130d0 <__assert_fail@plt+0x1da0>
   13090:	ldr	r0, [r0, #8]
   13094:	b	130f0 <__assert_fail@plt+0x1dc0>
   13098:	movw	r0, #11496	; 0x2ce8
   1309c:	movt	r0, #1
   130a0:	mov	r1, r4
   130a4:	movw	r3, #11736	; 0x2dd8
   130a8:	movt	r3, #1
   130ac:	movw	r2, #11696	; 0x2db0
   130b0:	movt	r2, #1
   130b4:	str	r0, [sp]
   130b8:	mov	r0, #13
   130bc:	bl	15a00 <__assert_fail@plt+0x46d0>
   130c0:	cmp	r0, #0
   130c4:	mov	r4, r0
   130c8:	str	r0, [r5, #52]	; 0x34
   130cc:	bne	13074 <__assert_fail@plt+0x1d44>
   130d0:	cmp	r7, #0
   130d4:	blt	130ec <__assert_fail@plt+0x1dbc>
   130d8:	mov	r0, r7
   130dc:	add	r1, sp, #8
   130e0:	bl	10fe8 <fstatfs64@plt>
   130e4:	cmp	r0, #0
   130e8:	beq	13104 <__assert_fail@plt+0x1dd4>
   130ec:	mov	r0, #0
   130f0:	add	sp, sp, #100	; 0x64
   130f4:	ldrd	r4, [sp]
   130f8:	ldrd	r6, [sp, #8]
   130fc:	add	sp, sp, #16
   13100:	pop	{pc}		; (ldr pc, [sp], #4)
   13104:	cmp	r4, #0
   13108:	beq	13148 <__assert_fail@plt+0x1e18>
   1310c:	mov	r0, #16
   13110:	bl	19c58 <__assert_fail@plt+0x8928>
   13114:	subs	r5, r0, #0
   13118:	beq	13148 <__assert_fail@plt+0x1e18>
   1311c:	ldr	ip, [sp, #8]
   13120:	mov	r0, r4
   13124:	mov	r1, r5
   13128:	ldrd	r2, [r6, #64]	; 0x40
   1312c:	strd	r2, [r5]
   13130:	str	ip, [r5, #8]
   13134:	bl	16058 <__assert_fail@plt+0x4d28>
   13138:	cmp	r0, #0
   1313c:	beq	13150 <__assert_fail@plt+0x1e20>
   13140:	cmp	r5, r0
   13144:	bne	1315c <__assert_fail@plt+0x1e2c>
   13148:	ldr	r0, [sp, #8]
   1314c:	b	130f0 <__assert_fail@plt+0x1dc0>
   13150:	mov	r0, r5
   13154:	bl	12ce8 <__assert_fail@plt+0x19b8>
   13158:	b	13148 <__assert_fail@plt+0x1e18>
   1315c:	bl	112e8 <abort@plt>
   13160:	strd	r4, [sp, #-16]!
   13164:	mov	r5, r1
   13168:	ldr	r1, [r0, #32]
   1316c:	str	r6, [sp, #8]
   13170:	str	lr, [sp, #12]
   13174:	sub	r3, r1, r5
   13178:	cmn	r1, #100	; 0x64
   1317c:	clz	r3, r3
   13180:	lsr	r3, r3, #5
   13184:	moveq	r3, #0
   13188:	cmp	r3, #0
   1318c:	bne	131ec <__assert_fail@plt+0x1ebc>
   13190:	cmp	r2, #0
   13194:	mov	r4, r0
   13198:	bne	131c8 <__assert_fail@plt+0x1e98>
   1319c:	ldr	r3, [r0, #48]	; 0x30
   131a0:	mvn	r2, r1
   131a4:	lsr	r2, r2, #31
   131a8:	eor	r3, r3, #4
   131ac:	ands	r3, r2, r3, lsr #2
   131b0:	bne	131e0 <__assert_fail@plt+0x1eb0>
   131b4:	ldr	r6, [sp, #8]
   131b8:	str	r5, [r4, #32]
   131bc:	ldrd	r4, [sp]
   131c0:	add	sp, sp, #12
   131c4:	pop	{pc}		; (ldr pc, [sp], #4)
   131c8:	add	r0, r0, #60	; 0x3c
   131cc:	bl	161e8 <__assert_fail@plt+0x4eb8>
   131d0:	cmp	r0, #0
   131d4:	blt	131b4 <__assert_fail@plt+0x1e84>
   131d8:	bl	112f4 <close@plt>
   131dc:	b	131b4 <__assert_fail@plt+0x1e84>
   131e0:	mov	r0, r1
   131e4:	bl	112f4 <close@plt>
   131e8:	b	131b4 <__assert_fail@plt+0x1e84>
   131ec:	bl	112e8 <abort@plt>
   131f0:	ldr	r3, [r0, #48]	; 0x30
   131f4:	strd	r4, [sp, #-16]!
   131f8:	mov	r4, r0
   131fc:	str	r6, [sp, #8]
   13200:	str	lr, [sp, #12]
   13204:	ands	r5, r3, #4
   13208:	movne	r5, #0
   1320c:	bne	13224 <__assert_fail@plt+0x1ef4>
   13210:	tst	r3, #512	; 0x200
   13214:	beq	13240 <__assert_fail@plt+0x1f10>
   13218:	mov	r2, #1
   1321c:	mvn	r1, #99	; 0x63
   13220:	bl	13160 <__assert_fail@plt+0x1e30>
   13224:	add	r0, r4, #60	; 0x3c
   13228:	bl	12ffc <__assert_fail@plt+0x1ccc>
   1322c:	mov	r0, r5
   13230:	ldrd	r4, [sp]
   13234:	ldr	r6, [sp, #8]
   13238:	add	sp, sp, #12
   1323c:	pop	{pc}		; (ldr pc, [sp], #4)
   13240:	ldr	r0, [r0, #28]
   13244:	bl	112a0 <fchdir@plt>
   13248:	adds	r5, r0, #0
   1324c:	movne	r5, #1
   13250:	b	13224 <__assert_fail@plt+0x1ef4>
   13254:	ldr	ip, [r2, #48]	; 0x30
   13258:	strd	r4, [sp, #-16]!
   1325c:	mov	r4, r2
   13260:	add	r5, r2, #64	; 0x40
   13264:	ldr	r2, [r2, #24]
   13268:	str	r6, [sp, #8]
   1326c:	str	lr, [sp, #12]
   13270:	sub	sp, sp, #8
   13274:	cmp	ip, #0
   13278:	bne	132f0 <__assert_fail@plt+0x1fc0>
   1327c:	tst	r1, #1
   13280:	beq	132f0 <__assert_fail@plt+0x1fc0>
   13284:	mov	r1, r2
   13288:	mov	r0, #3
   1328c:	mov	r2, r5
   13290:	bl	112d0 <__xstat64@plt>
   13294:	cmp	r0, #0
   13298:	beq	1331c <__assert_fail@plt+0x1fec>
   1329c:	bl	111ec <__errno_location@plt>
   132a0:	ldr	r3, [r0]
   132a4:	mov	r6, r0
   132a8:	cmp	r3, #2
   132ac:	bne	132d4 <__assert_fail@plt+0x1fa4>
   132b0:	mov	r2, r5
   132b4:	mov	r0, #3
   132b8:	ldr	r1, [r4, #24]
   132bc:	bl	11300 <__lxstat64@plt>
   132c0:	subs	r3, r0, #0
   132c4:	moveq	r0, #13
   132c8:	streq	r3, [r6]
   132cc:	beq	13340 <__assert_fail@plt+0x2010>
   132d0:	ldr	r3, [r6]
   132d4:	mov	r0, r5
   132d8:	mov	r2, #104	; 0x68
   132dc:	str	r3, [r4, #32]
   132e0:	mov	r1, #0
   132e4:	bl	11204 <memset@plt>
   132e8:	mov	r0, #10
   132ec:	b	13340 <__assert_fail@plt+0x2010>
   132f0:	ubfx	ip, r1, #1, #1
   132f4:	orrs	r3, r3, ip
   132f8:	bne	13284 <__assert_fail@plt+0x1f54>
   132fc:	mov	ip, #256	; 0x100
   13300:	mov	r1, r0
   13304:	mov	r3, r5
   13308:	mov	r0, #3
   1330c:	str	ip, [sp]
   13310:	bl	110e4 <__fxstatat64@plt>
   13314:	cmp	r0, #0
   13318:	bne	1339c <__assert_fail@plt+0x206c>
   1331c:	ldr	r3, [r4, #80]	; 0x50
   13320:	and	r3, r3, #61440	; 0xf000
   13324:	cmp	r3, #16384	; 0x4000
   13328:	beq	13354 <__assert_fail@plt+0x2024>
   1332c:	cmp	r3, #40960	; 0xa000
   13330:	beq	133a8 <__assert_fail@plt+0x2078>
   13334:	cmp	r3, #32768	; 0x8000
   13338:	movne	r0, #3
   1333c:	moveq	r0, #8
   13340:	add	sp, sp, #8
   13344:	ldrd	r4, [sp]
   13348:	ldr	r6, [sp, #8]
   1334c:	add	sp, sp, #12
   13350:	pop	{pc}		; (ldr pc, [sp], #4)
   13354:	ldrb	r3, [r4, #168]	; 0xa8
   13358:	cmp	r3, #46	; 0x2e
   1335c:	bne	13380 <__assert_fail@plt+0x2050>
   13360:	ldrb	r3, [r4, #169]	; 0xa9
   13364:	cmp	r3, #0
   13368:	beq	13388 <__assert_fail@plt+0x2058>
   1336c:	ldr	r3, [r4, #168]	; 0xa8
   13370:	bic	r3, r3, #-16777216	; 0xff000000
   13374:	bic	r3, r3, #255	; 0xff
   13378:	cmp	r3, #11776	; 0x2e00
   1337c:	beq	13388 <__assert_fail@plt+0x2058>
   13380:	mov	r0, #1
   13384:	b	13340 <__assert_fail@plt+0x2010>
   13388:	ldr	r3, [r4, #48]	; 0x30
   1338c:	cmp	r3, #0
   13390:	moveq	r0, #1
   13394:	movne	r0, #5
   13398:	b	13340 <__assert_fail@plt+0x2010>
   1339c:	bl	111ec <__errno_location@plt>
   133a0:	ldr	r3, [r0]
   133a4:	b	132d4 <__assert_fail@plt+0x1fa4>
   133a8:	mov	r0, #12
   133ac:	b	13340 <__assert_fail@plt+0x2010>
   133b0:	mov	ip, r1
   133b4:	ldr	r1, [r1]
   133b8:	strd	r4, [sp, #-16]!
   133bc:	mov	r4, r0
   133c0:	ldr	r0, [r0]
   133c4:	str	r6, [sp, #8]
   133c8:	str	lr, [sp, #12]
   133cc:	add	r3, r1, #256	; 0x100
   133d0:	add	r2, r3, r2
   133d4:	cmp	r1, r2
   133d8:	bhi	1340c <__assert_fail@plt+0x20dc>
   133dc:	mov	r1, r2
   133e0:	str	r2, [ip]
   133e4:	bl	19c94 <__assert_fail@plt+0x8964>
   133e8:	subs	r5, r0, #0
   133ec:	movne	r3, #1
   133f0:	strne	r5, [r4]
   133f4:	beq	1342c <__assert_fail@plt+0x20fc>
   133f8:	ldrd	r4, [sp]
   133fc:	mov	r0, r3
   13400:	ldr	r6, [sp, #8]
   13404:	add	sp, sp, #12
   13408:	pop	{pc}		; (ldr pc, [sp], #4)
   1340c:	mov	r5, #0
   13410:	bl	12ce8 <__assert_fail@plt+0x19b8>
   13414:	str	r5, [r4]
   13418:	bl	111ec <__errno_location@plt>
   1341c:	mov	r2, #36	; 0x24
   13420:	mov	r3, r5
   13424:	str	r2, [r0]
   13428:	b	133f8 <__assert_fail@plt+0x20c8>
   1342c:	ldr	r0, [r4]
   13430:	bl	12ce8 <__assert_fail@plt+0x19b8>
   13434:	mov	r3, r5
   13438:	str	r5, [r4]
   1343c:	b	133f8 <__assert_fail@plt+0x20c8>
   13440:	movw	r3, #258	; 0x102
   13444:	str	r4, [sp, #-8]!
   13448:	mov	r4, r1
   1344c:	tst	r0, r3
   13450:	str	lr, [sp, #4]
   13454:	sub	sp, sp, #8
   13458:	beq	134a4 <__assert_fail@plt+0x2174>
   1345c:	movw	r1, #11496	; 0x2ce8
   13460:	movt	r1, #1
   13464:	movw	r3, #11592	; 0x2d48
   13468:	movt	r3, #1
   1346c:	movw	r2, #11656	; 0x2d88
   13470:	movt	r2, #1
   13474:	str	r1, [sp]
   13478:	mov	r0, #31
   1347c:	mov	r1, #0
   13480:	bl	15a00 <__assert_fail@plt+0x46d0>
   13484:	mov	r3, r0
   13488:	adds	r0, r0, #0
   1348c:	movne	r0, #1
   13490:	str	r3, [r4]
   13494:	add	sp, sp, #8
   13498:	ldr	r4, [sp]
   1349c:	add	sp, sp, #4
   134a0:	pop	{pc}		; (ldr pc, [sp], #4)
   134a4:	mov	r0, #32
   134a8:	bl	19c58 <__assert_fail@plt+0x8928>
   134ac:	cmp	r0, #0
   134b0:	str	r0, [r4]
   134b4:	beq	13494 <__assert_fail@plt+0x2164>
   134b8:	bl	19d74 <__assert_fail@plt+0x8a44>
   134bc:	mov	r0, #1
   134c0:	add	sp, sp, #8
   134c4:	ldr	r4, [sp]
   134c8:	add	sp, sp, #4
   134cc:	pop	{pc}		; (ldr pc, [sp], #4)
   134d0:	mov	r3, r2
   134d4:	lsl	r2, r1, #11
   134d8:	tst	r1, #512	; 0x200
   134dc:	and	r2, r2, #32768	; 0x8000
   134e0:	orr	r2, r2, #540672	; 0x84000
   134e4:	orr	r2, r2, #2304	; 0x900
   134e8:	beq	134f4 <__assert_fail@plt+0x21c4>
   134ec:	mov	r1, r3
   134f0:	b	162f8 <__assert_fail@plt+0x4fc8>
   134f4:	mov	r1, r2
   134f8:	mov	r0, r3
   134fc:	b	1a130 <__assert_fail@plt+0x8e00>
   13500:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13504:	mov	r5, r0
   13508:	mov	r4, r2
   1350c:	strd	r6, [sp, #8]
   13510:	mov	r7, r1
   13514:	strd	r8, [sp, #16]
   13518:	ldr	r9, [r0, #48]	; 0x30
   1351c:	str	sl, [sp, #24]
   13520:	subs	sl, r3, #0
   13524:	str	lr, [sp, #28]
   13528:	sub	sp, sp, #104	; 0x68
   1352c:	and	r8, r9, #4
   13530:	beq	13608 <__assert_fail@plt+0x22d8>
   13534:	movw	r1, #46500	; 0xb5a4
   13538:	movt	r1, #1
   1353c:	mov	r0, sl
   13540:	bl	11024 <strcmp@plt>
   13544:	cmp	r0, #0
   13548:	bne	13608 <__assert_fail@plt+0x22d8>
   1354c:	cmp	r8, #0
   13550:	bne	13648 <__assert_fail@plt+0x2318>
   13554:	cmp	r4, #0
   13558:	bge	13708 <__assert_fail@plt+0x23d8>
   1355c:	tst	r9, #512	; 0x200
   13560:	bne	1368c <__assert_fail@plt+0x235c>
   13564:	mov	r8, #1
   13568:	mov	r1, r9
   1356c:	mov	r2, sl
   13570:	ldr	r0, [r5, #32]
   13574:	bl	134d0 <__assert_fail@plt+0x21a0>
   13578:	subs	r6, r0, #0
   1357c:	blt	13700 <__assert_fail@plt+0x23d0>
   13580:	ldr	r9, [r5, #48]	; 0x30
   13584:	tst	r9, #2
   13588:	beq	13624 <__assert_fail@plt+0x22f4>
   1358c:	mov	r2, sp
   13590:	mov	r1, r6
   13594:	mov	r0, #3
   13598:	bl	110fc <__fxstat64@plt>
   1359c:	cmp	r0, #0
   135a0:	bne	13684 <__assert_fail@plt+0x2354>
   135a4:	ldrd	r2, [sp]
   135a8:	ldrd	r0, [r7, #64]	; 0x40
   135ac:	cmp	r1, r3
   135b0:	cmpeq	r0, r2
   135b4:	bne	13678 <__assert_fail@plt+0x2348>
   135b8:	ldrd	r2, [sp, #96]	; 0x60
   135bc:	ldrd	r0, [r7, #160]	; 0xa0
   135c0:	cmp	r1, r3
   135c4:	cmpeq	r0, r2
   135c8:	bne	13678 <__assert_fail@plt+0x2348>
   135cc:	ldr	r9, [r5, #48]	; 0x30
   135d0:	tst	r9, #512	; 0x200
   135d4:	bne	136c8 <__assert_fail@plt+0x2398>
   135d8:	mov	r0, r6
   135dc:	bl	112a0 <fchdir@plt>
   135e0:	mov	r9, r0
   135e4:	cmp	r4, #0
   135e8:	bge	13658 <__assert_fail@plt+0x2328>
   135ec:	bl	111ec <__errno_location@plt>
   135f0:	mov	r4, r0
   135f4:	mov	r0, r6
   135f8:	ldr	r5, [r4]
   135fc:	bl	112f4 <close@plt>
   13600:	str	r5, [r4]
   13604:	b	13658 <__assert_fail@plt+0x2328>
   13608:	cmp	r8, #0
   1360c:	bne	13648 <__assert_fail@plt+0x2318>
   13610:	cmp	r4, #0
   13614:	movge	r6, r4
   13618:	blt	13568 <__assert_fail@plt+0x2238>
   1361c:	tst	r9, #2
   13620:	bne	1358c <__assert_fail@plt+0x225c>
   13624:	cmp	sl, #0
   13628:	beq	135d0 <__assert_fail@plt+0x22a0>
   1362c:	mov	r0, sl
   13630:	movw	r1, #46500	; 0xb5a4
   13634:	movt	r1, #1
   13638:	bl	11024 <strcmp@plt>
   1363c:	cmp	r0, #0
   13640:	bne	135d0 <__assert_fail@plt+0x22a0>
   13644:	b	1358c <__assert_fail@plt+0x225c>
   13648:	mvn	r3, r4
   1364c:	lsr	r3, r3, #31
   13650:	ands	r9, r3, r9, lsr #9
   13654:	bne	136e4 <__assert_fail@plt+0x23b4>
   13658:	mov	r0, r9
   1365c:	add	sp, sp, #104	; 0x68
   13660:	ldrd	r4, [sp]
   13664:	ldrd	r6, [sp, #8]
   13668:	ldrd	r8, [sp, #16]
   1366c:	ldr	sl, [sp, #24]
   13670:	add	sp, sp, #28
   13674:	pop	{pc}		; (ldr pc, [sp], #4)
   13678:	bl	111ec <__errno_location@plt>
   1367c:	mov	r3, #2
   13680:	str	r3, [r0]
   13684:	mvn	r9, #0
   13688:	b	135e4 <__assert_fail@plt+0x22b4>
   1368c:	add	r6, r5, #60	; 0x3c
   13690:	mov	r0, r6
   13694:	bl	161e0 <__assert_fail@plt+0x4eb0>
   13698:	subs	r8, r0, #0
   1369c:	bne	13568 <__assert_fail@plt+0x2238>
   136a0:	mov	r0, r6
   136a4:	bl	16230 <__assert_fail@plt+0x4f00>
   136a8:	subs	r6, r0, #0
   136ac:	blt	136f4 <__assert_fail@plt+0x23c4>
   136b0:	ldr	r9, [r5, #48]	; 0x30
   136b4:	mov	r4, r6
   136b8:	mov	r8, #1
   136bc:	tst	r9, #2
   136c0:	beq	135d0 <__assert_fail@plt+0x22a0>
   136c4:	b	1358c <__assert_fail@plt+0x225c>
   136c8:	eor	r2, r8, #1
   136cc:	mov	r1, r6
   136d0:	uxtb	r2, r2
   136d4:	mov	r0, r5
   136d8:	bl	13160 <__assert_fail@plt+0x1e30>
   136dc:	mov	r9, #0
   136e0:	b	13658 <__assert_fail@plt+0x2328>
   136e4:	mov	r0, r4
   136e8:	mov	r9, #0
   136ec:	bl	112f4 <close@plt>
   136f0:	b	13658 <__assert_fail@plt+0x2328>
   136f4:	mov	r8, #1
   136f8:	ldr	r9, [r5, #48]	; 0x30
   136fc:	b	13568 <__assert_fail@plt+0x2238>
   13700:	mvn	r9, #0
   13704:	b	13658 <__assert_fail@plt+0x2328>
   13708:	tst	r9, #2
   1370c:	mov	r6, r4
   13710:	mov	r8, #1
   13714:	beq	1362c <__assert_fail@plt+0x22fc>
   13718:	b	1358c <__assert_fail@plt+0x225c>
   1371c:	movw	r3, #258	; 0x102
   13720:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13724:	tst	r0, r3
   13728:	strd	r6, [sp, #8]
   1372c:	strd	r8, [sp, #16]
   13730:	mov	r8, r2
   13734:	str	sl, [sp, #24]
   13738:	mov	sl, r1
   1373c:	str	lr, [sp, #28]
   13740:	beq	137c4 <__assert_fail@plt+0x2494>
   13744:	mov	r0, #24
   13748:	bl	19c58 <__assert_fail@plt+0x8928>
   1374c:	subs	r9, r0, #0
   13750:	beq	137e8 <__assert_fail@plt+0x24b8>
   13754:	ldrd	r6, [r8, #64]	; 0x40
   13758:	mov	r1, r9
   1375c:	ldrd	r4, [r8, #160]	; 0xa0
   13760:	ldr	r0, [sl]
   13764:	strd	r6, [r9]
   13768:	str	r8, [r9, #16]
   1376c:	strd	r4, [r9, #8]
   13770:	bl	16058 <__assert_fail@plt+0x4d28>
   13774:	cmp	r9, r0
   13778:	mov	r4, r0
   1377c:	beq	137a8 <__assert_fail@plt+0x2478>
   13780:	mov	r0, r9
   13784:	bl	12ce8 <__assert_fail@plt+0x19b8>
   13788:	cmp	r4, #0
   1378c:	beq	137e8 <__assert_fail@plt+0x24b8>
   13790:	ldr	r3, [r4, #16]
   13794:	mov	r2, #2
   13798:	mov	r0, #1
   1379c:	str	r3, [r8]
   137a0:	strh	r2, [r8, #56]	; 0x38
   137a4:	b	137ac <__assert_fail@plt+0x247c>
   137a8:	mov	r0, #1
   137ac:	ldrd	r4, [sp]
   137b0:	ldrd	r6, [sp, #8]
   137b4:	ldrd	r8, [sp, #16]
   137b8:	ldr	sl, [sp, #24]
   137bc:	add	sp, sp, #28
   137c0:	pop	{pc}		; (ldr pc, [sp], #4)
   137c4:	add	r1, r2, #64	; 0x40
   137c8:	ldr	r0, [sl]
   137cc:	bl	19d9c <__assert_fail@plt+0x8a6c>
   137d0:	cmp	r0, #0
   137d4:	beq	137a8 <__assert_fail@plt+0x2478>
   137d8:	mov	r3, #2
   137dc:	str	r8, [r8]
   137e0:	strh	r3, [r8, #56]	; 0x38
   137e4:	b	137ac <__assert_fail@plt+0x247c>
   137e8:	mov	r0, #0
   137ec:	b	137ac <__assert_fail@plt+0x247c>
   137f0:	movw	r3, #258	; 0x102
   137f4:	mov	ip, r1
   137f8:	strd	r4, [sp, #-12]!
   137fc:	tst	r0, r3
   13800:	str	lr, [sp, #8]
   13804:	sub	sp, sp, #28
   13808:	bne	13858 <__assert_fail@plt+0x2528>
   1380c:	ldr	r3, [r2, #4]
   13810:	cmp	r3, #0
   13814:	beq	13848 <__assert_fail@plt+0x2518>
   13818:	ldr	r1, [r3, #48]	; 0x30
   1381c:	cmp	r1, #0
   13820:	blt	13848 <__assert_fail@plt+0x2518>
   13824:	ldr	ip, [ip]
   13828:	ldrd	r0, [ip, #16]
   1382c:	orrs	r1, r0, r1
   13830:	beq	138b8 <__assert_fail@plt+0x2588>
   13834:	ldrd	r4, [ip]
   13838:	ldrd	r0, [r2, #160]	; 0xa0
   1383c:	cmp	r5, r1
   13840:	cmpeq	r4, r0
   13844:	beq	13890 <__assert_fail@plt+0x2560>
   13848:	add	sp, sp, #28
   1384c:	ldrd	r4, [sp]
   13850:	add	sp, sp, #8
   13854:	pop	{pc}		; (ldr pc, [sp], #4)
   13858:	ldrd	r4, [r2, #64]	; 0x40
   1385c:	mov	r1, sp
   13860:	ldrd	r2, [r2, #160]	; 0xa0
   13864:	ldr	r0, [ip]
   13868:	strd	r4, [sp]
   1386c:	strd	r2, [sp, #8]
   13870:	bl	16098 <__assert_fail@plt+0x4d68>
   13874:	cmp	r0, #0
   13878:	beq	138b8 <__assert_fail@plt+0x2588>
   1387c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   13880:	add	sp, sp, #28
   13884:	ldrd	r4, [sp]
   13888:	add	sp, sp, #8
   1388c:	pop	{pc}		; (ldr pc, [sp], #4)
   13890:	ldrd	r0, [ip, #8]
   13894:	ldrd	r4, [r2, #64]	; 0x40
   13898:	cmp	r1, r5
   1389c:	cmpeq	r0, r4
   138a0:	bne	13848 <__assert_fail@plt+0x2518>
   138a4:	ldrd	r0, [r3, #64]	; 0x40
   138a8:	ldrd	r2, [r3, #160]	; 0xa0
   138ac:	strd	r2, [ip]
   138b0:	strd	r0, [ip, #8]
   138b4:	b	13848 <__assert_fail@plt+0x2518>
   138b8:	bl	112e8 <abort@plt>
   138bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138c0:	mov	r5, r0
   138c4:	strd	r6, [sp, #8]
   138c8:	strd	r8, [sp, #16]
   138cc:	ldr	r9, [r0]
   138d0:	strd	sl, [sp, #24]
   138d4:	str	lr, [sp, #32]
   138d8:	sub	sp, sp, #68	; 0x44
   138dc:	str	r1, [sp, #32]
   138e0:	ldr	r0, [r9, #12]
   138e4:	cmp	r0, #0
   138e8:	str	r0, [sp, #40]	; 0x28
   138ec:	beq	13c2c <__assert_fail@plt+0x28fc>
   138f0:	bl	11294 <dirfd@plt>
   138f4:	cmp	r0, #0
   138f8:	str	r0, [sp, #60]	; 0x3c
   138fc:	blt	14170 <__assert_fail@plt+0x2e40>
   13900:	ldr	r3, [r5, #44]	; 0x2c
   13904:	cmp	r3, #0
   13908:	beq	14054 <__assert_fail@plt+0x2d24>
   1390c:	ldr	r3, [r5, #48]	; 0x30
   13910:	mvn	r2, #0
   13914:	str	r2, [sp, #16]
   13918:	mov	r2, #1
   1391c:	str	r2, [sp, #52]	; 0x34
   13920:	ldr	r2, [r9, #28]
   13924:	ldr	r1, [r9, #40]	; 0x28
   13928:	sub	r0, r1, #1
   1392c:	str	r1, [sp]
   13930:	ldrb	r2, [r2, r0]
   13934:	str	r0, [sp, #28]
   13938:	cmp	r2, #47	; 0x2f
   1393c:	beq	1394c <__assert_fail@plt+0x261c>
   13940:	add	r2, r1, #1
   13944:	str	r2, [sp]
   13948:	str	r1, [sp, #28]
   1394c:	ands	r3, r3, #4
   13950:	streq	r3, [sp, #20]
   13954:	beq	13974 <__assert_fail@plt+0x2644>
   13958:	ldr	r3, [r5, #24]
   1395c:	mov	r1, #47	; 0x2f
   13960:	ldr	r0, [sp, #28]
   13964:	add	r2, r3, r0
   13968:	strb	r1, [r3, r0]
   1396c:	add	r3, r2, #1
   13970:	str	r3, [sp, #20]
   13974:	mov	sl, #0
   13978:	movw	r3, #6548	; 0x1994
   1397c:	movt	r3, #258	; 0x102
   13980:	mov	r2, sl
   13984:	ldr	fp, [r5, #36]	; 0x24
   13988:	mov	r7, sl
   1398c:	stmib	sp, {r2, r9}
   13990:	movw	r2, #19778	; 0x4d42
   13994:	movt	r2, #65363	; 0xff53
   13998:	str	sl, [sp, #24]
   1399c:	str	r3, [sp, #44]	; 0x2c
   139a0:	ldr	r3, [r9, #48]	; 0x30
   139a4:	str	sl, [sp, #36]	; 0x24
   139a8:	str	r2, [sp, #48]	; 0x30
   139ac:	ldr	r2, [sp]
   139b0:	add	r3, r3, #1
   139b4:	str	r3, [sp, #12]
   139b8:	sub	fp, fp, r2
   139bc:	b	139d4 <__assert_fail@plt+0x26a4>
   139c0:	ldr	r3, [sp, #16]
   139c4:	add	r7, r7, #1
   139c8:	cmp	r7, r3
   139cc:	bcs	13d8c <__assert_fail@plt+0x2a5c>
   139d0:	mov	sl, r4
   139d4:	ldr	r3, [sp, #8]
   139d8:	ldr	r4, [r3, #12]
   139dc:	cmp	r4, #0
   139e0:	beq	13f14 <__assert_fail@plt+0x2be4>
   139e4:	bl	111ec <__errno_location@plt>
   139e8:	mov	r8, r0
   139ec:	mov	r3, #0
   139f0:	mov	r0, r4
   139f4:	str	r3, [r8]
   139f8:	bl	1127c <readdir64@plt>
   139fc:	subs	r9, r0, #0
   13a00:	beq	13fe4 <__assert_fail@plt+0x2cb4>
   13a04:	ldr	r3, [r5, #48]	; 0x30
   13a08:	tst	r3, #32
   13a0c:	bne	13a1c <__assert_fail@plt+0x26ec>
   13a10:	ldrb	r3, [r9, #19]
   13a14:	cmp	r3, #46	; 0x2e
   13a18:	beq	13bb0 <__assert_fail@plt+0x2880>
   13a1c:	add	r4, r9, #19
   13a20:	mov	r0, r4
   13a24:	bl	111bc <strlen@plt>
   13a28:	mov	r2, r0
   13a2c:	mov	r1, r4
   13a30:	mov	r6, r0
   13a34:	mov	r0, r5
   13a38:	bl	12f24 <__assert_fail@plt+0x1bf4>
   13a3c:	subs	r4, r0, #0
   13a40:	beq	13e44 <__assert_fail@plt+0x2b14>
   13a44:	cmp	fp, r6
   13a48:	bls	13b10 <__assert_fail@plt+0x27e0>
   13a4c:	ldr	r3, [sp]
   13a50:	adds	r6, r6, r3
   13a54:	bcs	14244 <__assert_fail@plt+0x2f14>
   13a58:	ldr	r3, [sp, #12]
   13a5c:	add	r1, r4, #168	; 0xa8
   13a60:	ldr	ip, [r5]
   13a64:	ldr	r0, [r5, #48]	; 0x30
   13a68:	str	r6, [r4, #40]	; 0x28
   13a6c:	str	r3, [r4, #48]	; 0x30
   13a70:	ldrd	r2, [r9]
   13a74:	str	ip, [r4, #4]
   13a78:	tst	r0, #4
   13a7c:	streq	r1, [r4, #24]
   13a80:	strd	r2, [r4, #160]	; 0xa0
   13a84:	bne	13b90 <__assert_fail@plt+0x2860>
   13a88:	ldr	r3, [r5, #44]	; 0x2c
   13a8c:	cmp	r3, #0
   13a90:	beq	13a9c <__assert_fail@plt+0x276c>
   13a94:	ands	r3, r0, #1024	; 0x400
   13a98:	beq	13bd0 <__assert_fail@plt+0x28a0>
   13a9c:	ldrb	r3, [r9, #18]
   13aa0:	tst	r0, #8
   13aa4:	sub	r2, r3, #1
   13aa8:	beq	13ab4 <__assert_fail@plt+0x2784>
   13aac:	tst	r3, #251	; 0xfb
   13ab0:	bne	13be8 <__assert_fail@plt+0x28b8>
   13ab4:	mov	r3, #11
   13ab8:	cmp	r2, r3
   13abc:	strh	r3, [r4, #56]	; 0x38
   13ac0:	bls	13b74 <__assert_fail@plt+0x2844>
   13ac4:	mov	r1, #0
   13ac8:	mov	r2, #2
   13acc:	mov	r3, #0
   13ad0:	str	r1, [r4, #80]	; 0x50
   13ad4:	strd	r2, [r4, #112]	; 0x70
   13ad8:	ldr	r2, [sp, #4]
   13adc:	mov	r3, #0
   13ae0:	str	r3, [r4, #8]
   13ae4:	cmp	r2, r3
   13ae8:	movw	r3, #10000	; 0x2710
   13aec:	strne	r4, [sl, #8]
   13af0:	streq	r4, [sp, #4]
   13af4:	cmp	r7, r3
   13af8:	bne	139c0 <__assert_fail@plt+0x2690>
   13afc:	ldr	r6, [r5, #44]	; 0x2c
   13b00:	cmp	r6, #0
   13b04:	beq	13d40 <__assert_fail@plt+0x2a10>
   13b08:	movw	r7, #10001	; 0x2711
   13b0c:	b	139d0 <__assert_fail@plt+0x26a0>
   13b10:	ldr	r3, [sp, #28]
   13b14:	add	r1, r5, #36	; 0x24
   13b18:	add	r0, r5, #24
   13b1c:	ldr	fp, [r5, #24]
   13b20:	add	r2, r3, #2
   13b24:	add	r2, r2, r6
   13b28:	bl	133b0 <__assert_fail@plt+0x2080>
   13b2c:	cmp	r0, #0
   13b30:	beq	13e44 <__assert_fail@plt+0x2b14>
   13b34:	ldr	r3, [r5, #24]
   13b38:	cmp	r3, fp
   13b3c:	beq	13c24 <__assert_fail@plt+0x28f4>
   13b40:	ldr	r2, [r5, #48]	; 0x30
   13b44:	tst	r2, #4
   13b48:	beq	13b58 <__assert_fail@plt+0x2828>
   13b4c:	ldr	r2, [sp]
   13b50:	add	r3, r3, r2
   13b54:	str	r3, [sp, #20]
   13b58:	ldr	r3, [sp]
   13b5c:	str	r0, [sp, #24]
   13b60:	ldr	fp, [r5, #36]	; 0x24
   13b64:	sub	fp, fp, r3
   13b68:	b	13a4c <__assert_fail@plt+0x271c>
   13b6c:	mov	r3, #11
   13b70:	strh	r3, [r4, #56]	; 0x38
   13b74:	movw	r3, #46452	; 0xb574
   13b78:	movt	r3, #1
   13b7c:	ldr	r1, [r3, r2, lsl #2]
   13b80:	mov	r2, #2
   13b84:	mov	r3, #0
   13b88:	str	r1, [r4, #80]	; 0x50
   13b8c:	b	13ad4 <__assert_fail@plt+0x27a4>
   13b90:	ldr	r3, [r4, #28]
   13b94:	ldr	r2, [r4, #52]	; 0x34
   13b98:	ldr	r0, [sp, #20]
   13b9c:	str	r3, [r4, #24]
   13ba0:	add	r2, r2, #1
   13ba4:	bl	11048 <memmove@plt>
   13ba8:	ldr	r0, [r5, #48]	; 0x30
   13bac:	b	13a88 <__assert_fail@plt+0x2758>
   13bb0:	ldrb	r3, [r9, #20]
   13bb4:	cmp	r3, #0
   13bb8:	beq	13bc8 <__assert_fail@plt+0x2898>
   13bbc:	ldrh	r3, [r9, #20]
   13bc0:	cmp	r3, #46	; 0x2e
   13bc4:	bne	13a1c <__assert_fail@plt+0x26ec>
   13bc8:	mov	r4, sl
   13bcc:	b	139d0 <__assert_fail@plt+0x26a0>
   13bd0:	mov	r1, r0
   13bd4:	mov	r2, r4
   13bd8:	ldr	r0, [r5, #32]
   13bdc:	bl	13254 <__assert_fail@plt+0x1f24>
   13be0:	strh	r0, [r4, #56]	; 0x38
   13be4:	b	13ad8 <__assert_fail@plt+0x27a8>
   13be8:	ubfx	r0, r0, #4, #1
   13bec:	cmp	r3, #10
   13bf0:	moveq	r3, r0
   13bf4:	orrne	r3, r0, #1
   13bf8:	cmp	r3, #0
   13bfc:	beq	13b6c <__assert_fail@plt+0x283c>
   13c00:	mov	r3, #11
   13c04:	cmp	r2, r3
   13c08:	strh	r3, [r4, #56]	; 0x38
   13c0c:	bls	13e28 <__assert_fail@plt+0x2af8>
   13c10:	mov	r1, #0
   13c14:	mov	r2, #1
   13c18:	mov	r3, #0
   13c1c:	str	r1, [r4, #80]	; 0x50
   13c20:	b	13ad4 <__assert_fail@plt+0x27a4>
   13c24:	ldr	r0, [sp, #24]
   13c28:	b	13b58 <__assert_fail@plt+0x2828>
   13c2c:	ldr	r3, [r5, #48]	; 0x30
   13c30:	ldr	r1, [r9, #24]
   13c34:	and	r2, r3, #516	; 0x204
   13c38:	cmp	r2, #512	; 0x200
   13c3c:	ldreq	r0, [r5, #32]
   13c40:	mvnne	r0, #99	; 0x63
   13c44:	ands	r2, r3, #16
   13c48:	beq	13c58 <__assert_fail@plt+0x2928>
   13c4c:	tst	r3, #1
   13c50:	moveq	r2, #32768	; 0x8000
   13c54:	bne	13ea8 <__assert_fail@plt+0x2b78>
   13c58:	add	r3, sp, #60	; 0x3c
   13c5c:	bl	16338 <__assert_fail@plt+0x5008>
   13c60:	cmp	r0, #0
   13c64:	str	r0, [sp, #4]
   13c68:	str	r0, [r9, #12]
   13c6c:	beq	141b8 <__assert_fail@plt+0x2e88>
   13c70:	ldrh	r3, [r9, #56]	; 0x38
   13c74:	ldr	r0, [r5, #48]	; 0x30
   13c78:	cmp	r3, #11
   13c7c:	beq	14104 <__assert_fail@plt+0x2dd4>
   13c80:	tst	r0, #256	; 0x100
   13c84:	bne	14080 <__assert_fail@plt+0x2d50>
   13c88:	ldr	r2, [r5, #44]	; 0x2c
   13c8c:	movw	r3, #34464	; 0x86a0
   13c90:	movt	r3, #1
   13c94:	cmp	r2, #0
   13c98:	mvnne	r3, #0
   13c9c:	str	r3, [sp, #16]
   13ca0:	ldr	r3, [sp, #32]
   13ca4:	cmp	r3, #2
   13ca8:	beq	14070 <__assert_fail@plt+0x2d40>
   13cac:	ldr	r3, [r5, #48]	; 0x30
   13cb0:	ldr	r0, [sp, #60]	; 0x3c
   13cb4:	and	r3, r3, #56	; 0x38
   13cb8:	cmp	r3, #24
   13cbc:	beq	13eb8 <__assert_fail@plt+0x2b88>
   13cc0:	ldr	r3, [sp, #32]
   13cc4:	mov	r4, #1
   13cc8:	sub	r6, r3, #3
   13ccc:	clz	r6, r6
   13cd0:	lsr	r6, r6, #5
   13cd4:	ldr	r3, [r5, #48]	; 0x30
   13cd8:	tst	r3, #512	; 0x200
   13cdc:	bne	141a4 <__assert_fail@plt+0x2e74>
   13ce0:	cmp	r0, #0
   13ce4:	bge	14144 <__assert_fail@plt+0x2e14>
   13ce8:	tst	r6, r4
   13cec:	beq	13cfc <__assert_fail@plt+0x29cc>
   13cf0:	bl	111ec <__errno_location@plt>
   13cf4:	ldr	r3, [r0]
   13cf8:	str	r3, [r9, #32]
   13cfc:	ldrh	r3, [r9, #58]	; 0x3a
   13d00:	ldr	r0, [r9, #12]
   13d04:	orr	r3, r3, #1
   13d08:	strh	r3, [r9, #58]	; 0x3a
   13d0c:	bl	1130c <closedir@plt>
   13d10:	ldr	r3, [r5, #48]	; 0x30
   13d14:	mov	r2, #0
   13d18:	str	r2, [r9, #12]
   13d1c:	tst	r3, #512	; 0x200
   13d20:	beq	13d30 <__assert_fail@plt+0x2a00>
   13d24:	ldr	r0, [sp, #60]	; 0x3c
   13d28:	cmp	r0, r2
   13d2c:	bge	14198 <__assert_fail@plt+0x2e68>
   13d30:	mov	r2, #0
   13d34:	str	r2, [r9, #12]
   13d38:	str	r2, [sp, #52]	; 0x34
   13d3c:	b	13920 <__assert_fail@plt+0x25f0>
   13d40:	ldr	r0, [sp, #8]
   13d44:	ldr	r1, [sp, #60]	; 0x3c
   13d48:	bl	13040 <__assert_fail@plt+0x1d10>
   13d4c:	movw	r3, #26985	; 0x6969
   13d50:	cmp	r0, r3
   13d54:	beq	13d78 <__assert_fail@plt+0x2a48>
   13d58:	ldr	r3, [sp, #44]	; 0x2c
   13d5c:	cmp	r0, r3
   13d60:	beq	13d78 <__assert_fail@plt+0x2a48>
   13d64:	ldr	r3, [sp, #48]	; 0x30
   13d68:	cmp	r0, r3
   13d6c:	movne	r3, #1
   13d70:	strne	r3, [sp, #36]	; 0x24
   13d74:	bne	13b08 <__assert_fail@plt+0x27d8>
   13d78:	ldr	r3, [sp, #16]
   13d7c:	add	r7, r7, #1
   13d80:	str	r6, [sp, #36]	; 0x24
   13d84:	cmp	r7, r3
   13d88:	bcc	139d0 <__assert_fail@plt+0x26a0>
   13d8c:	ldr	r9, [sp, #8]
   13d90:	ldr	r3, [sp, #24]
   13d94:	cmp	r3, #0
   13d98:	beq	13f24 <__assert_fail@plt+0x2bf4>
   13d9c:	ldr	r3, [r5, #4]
   13da0:	ldr	r1, [r5, #24]
   13da4:	cmp	r3, #0
   13da8:	beq	13ddc <__assert_fail@plt+0x2aac>
   13dac:	ldr	r2, [r3, #24]
   13db0:	add	r0, r3, #168	; 0xa8
   13db4:	cmp	r2, r0
   13db8:	beq	13dcc <__assert_fail@plt+0x2a9c>
   13dbc:	ldr	r0, [r3, #28]
   13dc0:	sub	r2, r2, r0
   13dc4:	add	r2, r1, r2
   13dc8:	str	r2, [r3, #24]
   13dcc:	str	r1, [r3, #28]
   13dd0:	ldr	r3, [r3, #8]
   13dd4:	cmp	r3, #0
   13dd8:	bne	13dac <__assert_fail@plt+0x2a7c>
   13ddc:	ldr	r3, [sp, #4]
   13de0:	b	13e14 <__assert_fail@plt+0x2ae4>
   13de4:	ldr	r2, [r3, #24]
   13de8:	cmp	r2, r0
   13dec:	beq	13e00 <__assert_fail@plt+0x2ad0>
   13df0:	ldr	r0, [r3, #28]
   13df4:	sub	r2, r2, r0
   13df8:	add	r2, r1, r2
   13dfc:	str	r2, [r3, #24]
   13e00:	ldr	r2, [r3, #8]
   13e04:	str	r1, [r3, #28]
   13e08:	cmp	r2, #0
   13e0c:	ldreq	r2, [r3, #4]
   13e10:	mov	r3, r2
   13e14:	ldr	r2, [r3, #48]	; 0x30
   13e18:	add	r0, r3, #168	; 0xa8
   13e1c:	cmp	r2, #0
   13e20:	bge	13de4 <__assert_fail@plt+0x2ab4>
   13e24:	b	13f24 <__assert_fail@plt+0x2bf4>
   13e28:	movw	r3, #46452	; 0xb574
   13e2c:	movt	r3, #1
   13e30:	ldr	r1, [r3, r2, lsl #2]
   13e34:	mov	r2, #1
   13e38:	mov	r3, #0
   13e3c:	str	r1, [r4, #80]	; 0x50
   13e40:	b	13ad4 <__assert_fail@plt+0x27a4>
   13e44:	ldr	r9, [sp, #8]
   13e48:	mov	r0, r4
   13e4c:	ldr	r4, [r8]
   13e50:	bl	12ce8 <__assert_fail@plt+0x19b8>
   13e54:	ldr	r0, [sp, #4]
   13e58:	bl	12fb4 <__assert_fail@plt+0x1c84>
   13e5c:	ldr	r0, [r9, #12]
   13e60:	bl	1130c <closedir@plt>
   13e64:	ldr	r3, [r5, #48]	; 0x30
   13e68:	mov	r2, #0
   13e6c:	mov	r1, #7
   13e70:	str	r2, [sp, #4]
   13e74:	str	r2, [r9, #12]
   13e78:	strh	r1, [r9, #56]	; 0x38
   13e7c:	orr	r3, r3, #8192	; 0x2000
   13e80:	str	r3, [r5, #48]	; 0x30
   13e84:	str	r4, [r8]
   13e88:	ldr	r0, [sp, #4]
   13e8c:	add	sp, sp, #68	; 0x44
   13e90:	ldrd	r4, [sp]
   13e94:	ldrd	r6, [sp, #8]
   13e98:	ldrd	r8, [sp, #16]
   13e9c:	ldrd	sl, [sp, #24]
   13ea0:	add	sp, sp, #32
   13ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea8:	ldr	r2, [r9, #48]	; 0x30
   13eac:	cmp	r2, #0
   13eb0:	movne	r2, #32768	; 0x8000
   13eb4:	b	13c58 <__assert_fail@plt+0x2928>
   13eb8:	ldr	r3, [r9, #84]	; 0x54
   13ebc:	cmp	r3, #2
   13ec0:	bne	13cc0 <__assert_fail@plt+0x2990>
   13ec4:	mov	r1, r0
   13ec8:	mov	r0, r9
   13ecc:	bl	13040 <__assert_fail@plt+0x1d10>
   13ed0:	movw	r3, #26985	; 0x6969
   13ed4:	cmp	r0, r3
   13ed8:	beq	1423c <__assert_fail@plt+0x2f0c>
   13edc:	bgt	14220 <__assert_fail@plt+0x2ef0>
   13ee0:	movw	r3, #19778	; 0x4d42
   13ee4:	movt	r3, #65363	; 0xff53
   13ee8:	cmp	r0, r3
   13eec:	beq	1423c <__assert_fail@plt+0x2f0c>
   13ef0:	cmp	r0, #0
   13ef4:	beq	1423c <__assert_fail@plt+0x2f0c>
   13ef8:	ldr	r3, [sp, #32]
   13efc:	cmp	r3, #3
   13f00:	bne	14070 <__assert_fail@plt+0x2d40>
   13f04:	mov	r4, #0
   13f08:	mov	r6, #1
   13f0c:	ldr	r0, [sp, #60]	; 0x3c
   13f10:	b	13cd4 <__assert_fail@plt+0x29a4>
   13f14:	mov	r9, r3
   13f18:	ldr	r3, [sp, #24]
   13f1c:	cmp	r3, #0
   13f20:	bne	13d9c <__assert_fail@plt+0x2a6c>
   13f24:	ldr	r3, [r5, #48]	; 0x30
   13f28:	tst	r3, #4
   13f2c:	beq	13f5c <__assert_fail@plt+0x2c2c>
   13f30:	ldr	r2, [sp]
   13f34:	ldr	r3, [r5, #36]	; 0x24
   13f38:	cmp	r7, #0
   13f3c:	cmpne	r3, r2
   13f40:	bne	13f50 <__assert_fail@plt+0x2c20>
   13f44:	ldr	r3, [sp, #20]
   13f48:	sub	r3, r3, #1
   13f4c:	str	r3, [sp, #20]
   13f50:	ldr	r2, [sp, #20]
   13f54:	mov	r3, #0
   13f58:	strb	r3, [r2]
   13f5c:	ldr	r2, [sp, #40]	; 0x28
   13f60:	ldr	r3, [sp, #52]	; 0x34
   13f64:	cmp	r2, #0
   13f68:	movne	r3, #0
   13f6c:	cmp	r3, #0
   13f70:	beq	13fa8 <__assert_fail@plt+0x2c78>
   13f74:	ldr	r3, [sp, #32]
   13f78:	cmp	r7, #0
   13f7c:	cmpne	r3, #1
   13f80:	bne	13fb0 <__assert_fail@plt+0x2c80>
   13f84:	ldr	r3, [r9, #48]	; 0x30
   13f88:	cmp	r3, #0
   13f8c:	bne	14120 <__assert_fail@plt+0x2df0>
   13f90:	mov	r0, r5
   13f94:	bl	131f0 <__assert_fail@plt+0x1ec0>
   13f98:	adds	r0, r0, #0
   13f9c:	movne	r0, #1
   13fa0:	cmp	r0, #0
   13fa4:	bne	141f8 <__assert_fail@plt+0x2ec8>
   13fa8:	cmp	r7, #0
   13fac:	beq	140d0 <__assert_fail@plt+0x2da0>
   13fb0:	ldr	r3, [sp, #36]	; 0x24
   13fb4:	cmp	r3, #0
   13fb8:	bne	14028 <__assert_fail@plt+0x2cf8>
   13fbc:	ldr	r3, [r5, #44]	; 0x2c
   13fc0:	cmp	r3, #0
   13fc4:	cmpne	r7, #1
   13fc8:	beq	13e88 <__assert_fail@plt+0x2b58>
   13fcc:	mov	r2, r7
   13fd0:	mov	r0, r5
   13fd4:	ldr	r1, [sp, #4]
   13fd8:	bl	12e30 <__assert_fail@plt+0x1b00>
   13fdc:	str	r0, [sp, #4]
   13fe0:	b	13e88 <__assert_fail@plt+0x2b58>
   13fe4:	ldr	r3, [r8]
   13fe8:	ldr	r9, [sp, #8]
   13fec:	cmp	r3, #0
   13ff0:	beq	1400c <__assert_fail@plt+0x2cdc>
   13ff4:	ldr	r2, [sp, #40]	; 0x28
   13ff8:	str	r3, [r9, #32]
   13ffc:	orrs	r2, r2, r7
   14000:	moveq	r3, #4
   14004:	movne	r3, #7
   14008:	strh	r3, [r9, #56]	; 0x38
   1400c:	ldr	r0, [r9, #12]
   14010:	cmp	r0, #0
   14014:	beq	13f18 <__assert_fail@plt+0x2be8>
   14018:	bl	1130c <closedir@plt>
   1401c:	mov	r3, #0
   14020:	str	r3, [r9, #12]
   14024:	b	13f18 <__assert_fail@plt+0x2be8>
   14028:	movw	r3, #11776	; 0x2e00
   1402c:	movt	r3, #1
   14030:	ldr	r1, [sp, #4]
   14034:	mov	r2, r7
   14038:	mov	r0, r5
   1403c:	str	r3, [r5, #44]	; 0x2c
   14040:	bl	12e30 <__assert_fail@plt+0x1b00>
   14044:	mov	r3, #0
   14048:	str	r0, [sp, #4]
   1404c:	str	r3, [r5, #44]	; 0x2c
   14050:	b	13e88 <__assert_fail@plt+0x2b58>
   14054:	movw	r3, #34464	; 0x86a0
   14058:	movt	r3, #1
   1405c:	mov	r2, #1
   14060:	str	r3, [sp, #16]
   14064:	str	r2, [sp, #52]	; 0x34
   14068:	ldr	r3, [r5, #48]	; 0x30
   1406c:	b	13920 <__assert_fail@plt+0x25f0>
   14070:	mov	r3, #0
   14074:	str	r3, [sp, #52]	; 0x34
   14078:	ldr	r3, [r5, #48]	; 0x30
   1407c:	b	13920 <__assert_fail@plt+0x25f0>
   14080:	add	r4, r5, #56	; 0x38
   14084:	mov	r2, r9
   14088:	mov	r1, r4
   1408c:	bl	137f0 <__assert_fail@plt+0x24c0>
   14090:	mov	r3, #0
   14094:	mov	r2, r9
   14098:	ldr	r0, [r5, #32]
   1409c:	ldr	r1, [r5, #48]	; 0x30
   140a0:	bl	13254 <__assert_fail@plt+0x1f24>
   140a4:	mov	r1, r4
   140a8:	mov	r2, r9
   140ac:	ldr	r0, [r5, #48]	; 0x30
   140b0:	bl	1371c <__assert_fail@plt+0x23ec>
   140b4:	subs	r4, r0, #0
   140b8:	bne	13c88 <__assert_fail@plt+0x2958>
   140bc:	bl	111ec <__errno_location@plt>
   140c0:	mov	r3, #12
   140c4:	str	r4, [sp, #4]
   140c8:	str	r3, [r0]
   140cc:	b	13e88 <__assert_fail@plt+0x2b58>
   140d0:	ldr	r3, [sp, #32]
   140d4:	cmp	r3, #3
   140d8:	bne	140f0 <__assert_fail@plt+0x2dc0>
   140dc:	ldrh	r3, [r9, #56]	; 0x38
   140e0:	cmp	r3, #7
   140e4:	cmpne	r3, #4
   140e8:	movne	r3, #6
   140ec:	strhne	r3, [r9, #56]	; 0x38
   140f0:	mov	r3, #0
   140f4:	ldr	r0, [sp, #4]
   140f8:	str	r3, [sp, #4]
   140fc:	bl	12fb4 <__assert_fail@plt+0x1c84>
   14100:	b	13e88 <__assert_fail@plt+0x2b58>
   14104:	mov	r1, r0
   14108:	mov	r3, #0
   1410c:	ldr	r0, [r5, #32]
   14110:	mov	r2, r9
   14114:	bl	13254 <__assert_fail@plt+0x1f24>
   14118:	strh	r0, [r9, #56]	; 0x38
   1411c:	b	13c88 <__assert_fail@plt+0x2958>
   14120:	movw	r3, #46500	; 0xb5a4
   14124:	movt	r3, #1
   14128:	ldr	r1, [r9, #4]
   1412c:	mvn	r2, #0
   14130:	mov	r0, r5
   14134:	bl	13500 <__assert_fail@plt+0x21d0>
   14138:	adds	r0, r0, #0
   1413c:	movne	r0, #1
   14140:	b	13fa0 <__assert_fail@plt+0x2c70>
   14144:	mov	r2, r0
   14148:	mov	r3, #0
   1414c:	mov	r1, r9
   14150:	mov	r0, r5
   14154:	bl	13500 <__assert_fail@plt+0x21d0>
   14158:	cmp	r0, #0
   1415c:	bne	13ce8 <__assert_fail@plt+0x29b8>
   14160:	mov	r3, #1
   14164:	str	r3, [sp, #52]	; 0x34
   14168:	ldr	r3, [r5, #48]	; 0x30
   1416c:	b	13920 <__assert_fail@plt+0x25f0>
   14170:	ldr	r0, [r9, #12]
   14174:	mov	r4, #0
   14178:	bl	1130c <closedir@plt>
   1417c:	ldr	r3, [sp, #32]
   14180:	str	r4, [r9, #12]
   14184:	cmp	r3, #3
   14188:	beq	141dc <__assert_fail@plt+0x2eac>
   1418c:	mov	r3, #0
   14190:	str	r3, [sp, #4]
   14194:	b	13e88 <__assert_fail@plt+0x2b58>
   14198:	bl	112f4 <close@plt>
   1419c:	ldr	r3, [r5, #48]	; 0x30
   141a0:	b	13d30 <__assert_fail@plt+0x2a00>
   141a4:	mov	r2, #3
   141a8:	movw	r1, #1030	; 0x406
   141ac:	bl	19f48 <__assert_fail@plt+0x8c18>
   141b0:	str	r0, [sp, #60]	; 0x3c
   141b4:	b	13ce0 <__assert_fail@plt+0x29b0>
   141b8:	ldr	r3, [sp, #32]
   141bc:	cmp	r3, #3
   141c0:	bne	1418c <__assert_fail@plt+0x2e5c>
   141c4:	mov	r3, #4
   141c8:	strh	r3, [r9, #56]	; 0x38
   141cc:	bl	111ec <__errno_location@plt>
   141d0:	ldr	r3, [r0]
   141d4:	str	r3, [r9, #32]
   141d8:	b	13e88 <__assert_fail@plt+0x2b58>
   141dc:	mov	r3, #4
   141e0:	str	r4, [sp, #4]
   141e4:	strh	r3, [r9, #56]	; 0x38
   141e8:	bl	111ec <__errno_location@plt>
   141ec:	ldr	r3, [r0]
   141f0:	str	r3, [r9, #32]
   141f4:	b	13e88 <__assert_fail@plt+0x2b58>
   141f8:	ldr	r3, [r5, #48]	; 0x30
   141fc:	mov	r2, #7
   14200:	mov	r1, #0
   14204:	strh	r2, [r9, #56]	; 0x38
   14208:	ldr	r0, [sp, #4]
   1420c:	str	r1, [sp, #4]
   14210:	orr	r3, r3, #8192	; 0x2000
   14214:	str	r3, [r5, #48]	; 0x30
   14218:	bl	12fb4 <__assert_fail@plt+0x1c84>
   1421c:	b	13e88 <__assert_fail@plt+0x2b58>
   14220:	movw	r3, #40864	; 0x9fa0
   14224:	cmp	r0, r3
   14228:	beq	1423c <__assert_fail@plt+0x2f0c>
   1422c:	movw	r3, #16719	; 0x414f
   14230:	movt	r3, #21318	; 0x5346
   14234:	cmp	r0, r3
   14238:	bne	13ef8 <__assert_fail@plt+0x2bc8>
   1423c:	ldr	r0, [sp, #60]	; 0x3c
   14240:	b	13cc0 <__assert_fail@plt+0x2990>
   14244:	ldr	r9, [sp, #8]
   14248:	mov	r0, r4
   1424c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14250:	ldr	r0, [sp, #4]
   14254:	bl	12fb4 <__assert_fail@plt+0x1c84>
   14258:	ldr	r0, [r9, #12]
   1425c:	bl	1130c <closedir@plt>
   14260:	ldr	r3, [r5, #48]	; 0x30
   14264:	mov	r2, #0
   14268:	mov	r0, #7
   1426c:	mov	r1, #36	; 0x24
   14270:	str	r2, [sp, #4]
   14274:	str	r2, [r9, #12]
   14278:	strh	r0, [r9, #56]	; 0x38
   1427c:	orr	r3, r3, #8192	; 0x2000
   14280:	str	r3, [r5, #48]	; 0x30
   14284:	str	r1, [r8]
   14288:	b	13e88 <__assert_fail@plt+0x2b58>
   1428c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14290:	bic	r5, r1, #4080	; 0xff0
   14294:	bic	r5, r5, #15
   14298:	strd	r6, [sp, #8]
   1429c:	cmp	r5, #0
   142a0:	strd	r8, [sp, #16]
   142a4:	strd	sl, [sp, #24]
   142a8:	str	lr, [sp, #32]
   142ac:	sub	sp, sp, #12
   142b0:	bne	145cc <__assert_fail@plt+0x329c>
   142b4:	and	r3, r1, #516	; 0x204
   142b8:	mov	r7, r1
   142bc:	cmp	r3, #516	; 0x204
   142c0:	beq	14568 <__assert_fail@plt+0x3238>
   142c4:	ands	r5, r1, #18
   142c8:	beq	14568 <__assert_fail@plt+0x3238>
   142cc:	mov	r6, r0
   142d0:	mov	r1, #96	; 0x60
   142d4:	mov	r0, #1
   142d8:	mov	r9, r2
   142dc:	bl	19be4 <__assert_fail@plt+0x88b4>
   142e0:	subs	r5, r0, #0
   142e4:	beq	14520 <__assert_fail@plt+0x31f0>
   142e8:	tst	r7, #2
   142ec:	mvn	r2, #99	; 0x63
   142f0:	bicne	r3, r7, #512	; 0x200
   142f4:	orrne	r3, r3, #4
   142f8:	streq	r7, [r5, #48]	; 0x30
   142fc:	str	r2, [r5, #32]
   14300:	strne	r3, [r5, #48]	; 0x30
   14304:	ldr	r3, [r6]
   14308:	str	r9, [r5, #44]	; 0x2c
   1430c:	cmp	r3, #0
   14310:	beq	145e0 <__assert_fail@plt+0x32b0>
   14314:	mov	r8, r6
   14318:	mov	r4, #0
   1431c:	mov	r0, r3
   14320:	bl	111bc <strlen@plt>
   14324:	ldr	r3, [r8, #4]!
   14328:	cmp	r4, r0
   1432c:	movcc	r4, r0
   14330:	cmp	r3, #0
   14334:	bne	1431c <__assert_fail@plt+0x2fec>
   14338:	add	r2, r4, #1
   1433c:	cmp	r2, #4096	; 0x1000
   14340:	movcc	r2, #4096	; 0x1000
   14344:	add	r1, r5, #36	; 0x24
   14348:	add	r0, r5, #24
   1434c:	bl	133b0 <__assert_fail@plt+0x2080>
   14350:	subs	fp, r0, #0
   14354:	beq	14558 <__assert_fail@plt+0x3228>
   14358:	ldr	sl, [r6]
   1435c:	cmp	sl, #0
   14360:	beq	145bc <__assert_fail@plt+0x328c>
   14364:	movw	r1, #44516	; 0xade4
   14368:	movt	r1, #1
   1436c:	mov	r2, #0
   14370:	mov	r0, r5
   14374:	bl	12f24 <__assert_fail@plt+0x1bf4>
   14378:	subs	sl, r0, #0
   1437c:	beq	14550 <__assert_fail@plt+0x3220>
   14380:	mvn	r3, #0
   14384:	cmp	r9, #0
   14388:	ldr	r4, [r6]
   1438c:	str	r3, [sl, #48]	; 0x30
   14390:	beq	1439c <__assert_fail@plt+0x306c>
   14394:	ldr	fp, [r5, #48]	; 0x30
   14398:	ubfx	fp, fp, #10, #1
   1439c:	cmp	r4, #0
   143a0:	beq	1461c <__assert_fail@plt+0x32ec>
   143a4:	eor	r7, r7, #2048	; 0x800
   143a8:	mov	r3, #0
   143ac:	ubfx	r2, r7, #11, #1
   143b0:	mov	r8, r3
   143b4:	mov	r7, r3
   143b8:	strd	r2, [sp]
   143bc:	b	143f4 <__assert_fail@plt+0x30c4>
   143c0:	mov	r3, #11
   143c4:	mov	r2, #2
   143c8:	cmp	r9, r1
   143cc:	strh	r3, [r4, #56]	; 0x38
   143d0:	mov	r3, #0
   143d4:	strd	r2, [r4, #112]	; 0x70
   143d8:	beq	145a8 <__assert_fail@plt+0x3278>
   143dc:	str	r7, [r4, #8]
   143e0:	mov	r7, r4
   143e4:	ldr	r4, [r6, #4]!
   143e8:	add	r8, r8, #1
   143ec:	cmp	r4, #0
   143f0:	beq	144a0 <__assert_fail@plt+0x3170>
   143f4:	mov	r0, r4
   143f8:	bl	111bc <strlen@plt>
   143fc:	ldr	r3, [sp]
   14400:	mov	r2, r0
   14404:	cmp	r0, #2
   14408:	movls	r3, #0
   1440c:	andhi	r3, r3, #1
   14410:	cmp	r3, #0
   14414:	bne	14578 <__assert_fail@plt+0x3248>
   14418:	mov	r1, r4
   1441c:	mov	r0, r5
   14420:	bl	12f24 <__assert_fail@plt+0x1bf4>
   14424:	subs	r4, r0, #0
   14428:	beq	14540 <__assert_fail@plt+0x3210>
   1442c:	add	r2, r4, #168	; 0xa8
   14430:	cmp	r7, #0
   14434:	moveq	r3, #0
   14438:	andne	r3, fp, #1
   1443c:	str	sl, [r4, #4]
   14440:	mov	r1, #0
   14444:	cmp	r3, #0
   14448:	str	r2, [r4, #24]
   1444c:	str	r1, [r4, #48]	; 0x30
   14450:	bne	143c0 <__assert_fail@plt+0x3090>
   14454:	mov	r2, r4
   14458:	ldr	r0, [r5, #32]
   1445c:	ldr	r1, [r5, #48]	; 0x30
   14460:	bl	13254 <__assert_fail@plt+0x1f24>
   14464:	cmp	r9, #0
   14468:	strh	r0, [r4, #56]	; 0x38
   1446c:	bne	143dc <__assert_fail@plt+0x30ac>
   14470:	cmp	r7, #0
   14474:	str	r9, [r4, #8]
   14478:	moveq	r7, r4
   1447c:	streq	r4, [sp, #4]
   14480:	beq	143e4 <__assert_fail@plt+0x30b4>
   14484:	ldr	r3, [sp, #4]
   14488:	str	r4, [sp, #4]
   1448c:	str	r4, [r3, #8]
   14490:	ldr	r4, [r6, #4]!
   14494:	add	r8, r8, #1
   14498:	cmp	r4, #0
   1449c:	bne	143f4 <__assert_fail@plt+0x30c4>
   144a0:	cmp	r9, #0
   144a4:	cmpne	r8, #1
   144a8:	bls	144c0 <__assert_fail@plt+0x3190>
   144ac:	mov	r1, r7
   144b0:	mov	r2, r8
   144b4:	mov	r0, r5
   144b8:	bl	12e30 <__assert_fail@plt+0x1b00>
   144bc:	mov	r7, r0
   144c0:	movw	r1, #44516	; 0xade4
   144c4:	movt	r1, #1
   144c8:	mov	r2, #0
   144cc:	mov	r0, r5
   144d0:	bl	12f24 <__assert_fail@plt+0x1bf4>
   144d4:	cmp	r0, #0
   144d8:	str	r0, [r5]
   144dc:	beq	14540 <__assert_fail@plt+0x3210>
   144e0:	mov	r2, #1
   144e4:	mov	r3, #9
   144e8:	str	r7, [r0, #8]
   144ec:	add	r1, r5, #56	; 0x38
   144f0:	str	r2, [r0, #48]	; 0x30
   144f4:	strh	r3, [r0, #56]	; 0x38
   144f8:	ldr	r0, [r5, #48]	; 0x30
   144fc:	bl	13440 <__assert_fail@plt+0x2110>
   14500:	cmp	r0, #0
   14504:	beq	14540 <__assert_fail@plt+0x3210>
   14508:	ldr	r1, [r5, #48]	; 0x30
   1450c:	tst	r1, #516	; 0x204
   14510:	beq	145e8 <__assert_fail@plt+0x32b8>
   14514:	mvn	r1, #0
   14518:	add	r0, r5, #60	; 0x3c
   1451c:	bl	161b4 <__assert_fail@plt+0x4e84>
   14520:	mov	r0, r5
   14524:	add	sp, sp, #12
   14528:	ldrd	r4, [sp]
   1452c:	ldrd	r6, [sp, #8]
   14530:	ldrd	r8, [sp, #16]
   14534:	ldrd	sl, [sp, #24]
   14538:	add	sp, sp, #32
   1453c:	pop	{pc}		; (ldr pc, [sp], #4)
   14540:	mov	r0, r7
   14544:	bl	12fb4 <__assert_fail@plt+0x1c84>
   14548:	mov	r0, sl
   1454c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14550:	ldr	r0, [r5, #24]
   14554:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14558:	mov	r0, r5
   1455c:	mov	r5, #0
   14560:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14564:	b	14520 <__assert_fail@plt+0x31f0>
   14568:	bl	111ec <__errno_location@plt>
   1456c:	mov	r3, #22
   14570:	str	r3, [r0]
   14574:	b	14520 <__assert_fail@plt+0x31f0>
   14578:	sub	r3, r0, #1
   1457c:	ldrb	r1, [r4, r3]
   14580:	add	r3, r4, r3
   14584:	cmp	r1, #47	; 0x2f
   14588:	bne	14418 <__assert_fail@plt+0x30e8>
   1458c:	ldrb	r1, [r3, #-1]!
   14590:	cmp	r1, #47	; 0x2f
   14594:	bne	14418 <__assert_fail@plt+0x30e8>
   14598:	sub	r2, r2, #1
   1459c:	cmp	r2, #1
   145a0:	bne	1458c <__assert_fail@plt+0x325c>
   145a4:	b	14418 <__assert_fail@plt+0x30e8>
   145a8:	ldr	r3, [sp, #4]
   145ac:	str	r4, [sp, #4]
   145b0:	str	r9, [r4, #8]
   145b4:	str	r4, [r3, #8]
   145b8:	b	14490 <__assert_fail@plt+0x3160>
   145bc:	cmp	r9, #0
   145c0:	beq	14614 <__assert_fail@plt+0x32e4>
   145c4:	mov	r4, sl
   145c8:	b	14394 <__assert_fail@plt+0x3064>
   145cc:	bl	111ec <__errno_location@plt>
   145d0:	mov	r3, #22
   145d4:	mov	r5, #0
   145d8:	str	r3, [r0]
   145dc:	b	14520 <__assert_fail@plt+0x31f0>
   145e0:	mov	r2, #4096	; 0x1000
   145e4:	b	14344 <__assert_fail@plt+0x3014>
   145e8:	movw	r2, #46504	; 0xb5a8
   145ec:	movt	r2, #1
   145f0:	ldr	r0, [r5, #32]
   145f4:	bl	134d0 <__assert_fail@plt+0x21a0>
   145f8:	cmp	r0, #0
   145fc:	str	r0, [r5, #28]
   14600:	bge	14514 <__assert_fail@plt+0x31e4>
   14604:	ldr	r3, [r5, #48]	; 0x30
   14608:	orr	r3, r3, #4
   1460c:	str	r3, [r5, #48]	; 0x30
   14610:	b	14514 <__assert_fail@plt+0x31e4>
   14614:	mov	r7, sl
   14618:	b	144c0 <__assert_fail@plt+0x3190>
   1461c:	mov	r7, r4
   14620:	b	144c0 <__assert_fail@plt+0x3190>
   14624:	ldr	r3, [r0]
   14628:	strd	r4, [sp, #-16]!
   1462c:	mov	r5, r0
   14630:	str	r6, [sp, #8]
   14634:	str	lr, [sp, #12]
   14638:	cmp	r3, #0
   1463c:	beq	14678 <__assert_fail@plt+0x3348>
   14640:	ldr	r2, [r3, #48]	; 0x30
   14644:	cmp	r2, #0
   14648:	blt	14798 <__assert_fail@plt+0x3468>
   1464c:	ldr	r4, [r3, #8]
   14650:	mov	r0, r3
   14654:	cmp	r4, #0
   14658:	ldreq	r4, [r3, #4]
   1465c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14660:	ldr	r2, [r4, #48]	; 0x30
   14664:	mov	r3, r4
   14668:	cmp	r2, #0
   1466c:	bge	1464c <__assert_fail@plt+0x331c>
   14670:	mov	r0, r4
   14674:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14678:	ldr	r0, [r5, #4]
   1467c:	cmp	r0, #0
   14680:	beq	14688 <__assert_fail@plt+0x3358>
   14684:	bl	12fb4 <__assert_fail@plt+0x1c84>
   14688:	ldr	r0, [r5, #8]
   1468c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14690:	ldr	r0, [r5, #24]
   14694:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14698:	ldr	r3, [r5, #48]	; 0x30
   1469c:	tst	r3, #512	; 0x200
   146a0:	bne	1470c <__assert_fail@plt+0x33dc>
   146a4:	tst	r3, #4
   146a8:	beq	14738 <__assert_fail@plt+0x3408>
   146ac:	mov	r4, #0
   146b0:	add	r0, r5, #60	; 0x3c
   146b4:	bl	12ffc <__assert_fail@plt+0x1ccc>
   146b8:	ldr	r0, [r5, #52]	; 0x34
   146bc:	cmp	r0, #0
   146c0:	beq	146c8 <__assert_fail@plt+0x3398>
   146c4:	bl	15c34 <__assert_fail@plt+0x4904>
   146c8:	ldr	r3, [r5, #48]	; 0x30
   146cc:	movw	r2, #258	; 0x102
   146d0:	ldr	r0, [r5, #56]	; 0x38
   146d4:	tst	r2, r3
   146d8:	beq	14730 <__assert_fail@plt+0x3400>
   146dc:	cmp	r0, #0
   146e0:	beq	146e8 <__assert_fail@plt+0x33b8>
   146e4:	bl	15c34 <__assert_fail@plt+0x4904>
   146e8:	mov	r0, r5
   146ec:	bl	12ce8 <__assert_fail@plt+0x19b8>
   146f0:	cmp	r4, #0
   146f4:	bne	147a0 <__assert_fail@plt+0x3470>
   146f8:	mov	r0, r4
   146fc:	ldrd	r4, [sp]
   14700:	ldr	r6, [sp, #8]
   14704:	add	sp, sp, #12
   14708:	pop	{pc}		; (ldr pc, [sp], #4)
   1470c:	ldr	r0, [r5, #32]
   14710:	cmp	r0, #0
   14714:	blt	146ac <__assert_fail@plt+0x337c>
   14718:	bl	112f4 <close@plt>
   1471c:	cmp	r0, #0
   14720:	beq	146ac <__assert_fail@plt+0x337c>
   14724:	bl	111ec <__errno_location@plt>
   14728:	ldr	r4, [r0]
   1472c:	b	146b0 <__assert_fail@plt+0x3380>
   14730:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14734:	b	146e8 <__assert_fail@plt+0x33b8>
   14738:	ldr	r0, [r5, #28]
   1473c:	bl	112a0 <fchdir@plt>
   14740:	cmp	r0, #0
   14744:	bne	14768 <__assert_fail@plt+0x3438>
   14748:	ldr	r0, [r5, #28]
   1474c:	bl	112f4 <close@plt>
   14750:	cmp	r0, #0
   14754:	beq	146ac <__assert_fail@plt+0x337c>
   14758:	bl	111ec <__errno_location@plt>
   1475c:	mov	r6, r0
   14760:	ldr	r4, [r6]
   14764:	b	146b0 <__assert_fail@plt+0x3380>
   14768:	bl	111ec <__errno_location@plt>
   1476c:	mov	r6, r0
   14770:	ldr	r0, [r5, #28]
   14774:	ldr	r4, [r6]
   14778:	bl	112f4 <close@plt>
   1477c:	adds	r3, r0, #0
   14780:	movne	r3, #1
   14784:	cmp	r4, #0
   14788:	movne	r3, #0
   1478c:	cmp	r3, #0
   14790:	beq	146b0 <__assert_fail@plt+0x3380>
   14794:	b	14760 <__assert_fail@plt+0x3430>
   14798:	mov	r4, r3
   1479c:	b	14670 <__assert_fail@plt+0x3340>
   147a0:	bl	111ec <__errno_location@plt>
   147a4:	str	r4, [r0]
   147a8:	mvn	r4, #0
   147ac:	b	146f8 <__assert_fail@plt+0x33c8>
   147b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   147b4:	ldr	r4, [r0]
   147b8:	strd	r6, [sp, #8]
   147bc:	str	r8, [sp, #16]
   147c0:	str	lr, [sp, #20]
   147c4:	cmp	r4, #0
   147c8:	beq	148e8 <__assert_fail@plt+0x35b8>
   147cc:	ldr	r1, [r0, #48]	; 0x30
   147d0:	ands	r3, r1, #8192	; 0x2000
   147d4:	bne	148e8 <__assert_fail@plt+0x35b8>
   147d8:	ldrh	r2, [r4, #60]	; 0x3c
   147dc:	mov	r8, r0
   147e0:	mov	r0, #3
   147e4:	strh	r0, [r4, #60]	; 0x3c
   147e8:	cmp	r2, #1
   147ec:	beq	14b94 <__assert_fail@plt+0x3864>
   147f0:	cmp	r2, #2
   147f4:	ldrh	r3, [r4, #56]	; 0x38
   147f8:	beq	14904 <__assert_fail@plt+0x35d4>
   147fc:	cmp	r3, #1
   14800:	bne	14830 <__assert_fail@plt+0x3500>
   14804:	b	149b0 <__assert_fail@plt+0x3680>
   14808:	mov	r0, r4
   1480c:	str	r5, [r8]
   14810:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14814:	ldr	r4, [r5, #48]	; 0x30
   14818:	cmp	r4, #0
   1481c:	beq	149f8 <__assert_fail@plt+0x36c8>
   14820:	ldrh	r3, [r5, #60]	; 0x3c
   14824:	mov	r4, r5
   14828:	cmp	r3, #4
   1482c:	bne	14ab0 <__assert_fail@plt+0x3780>
   14830:	ldr	r5, [r4, #8]
   14834:	cmp	r5, #0
   14838:	bne	14808 <__assert_fail@plt+0x34d8>
   1483c:	ldr	r6, [r4, #4]
   14840:	ldr	r3, [r6, #12]
   14844:	cmp	r3, #0
   14848:	bne	14cb8 <__assert_fail@plt+0x3988>
   1484c:	mov	r0, r4
   14850:	str	r6, [r8]
   14854:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14858:	ldr	r3, [r6, #48]	; 0x30
   1485c:	cmn	r3, #1
   14860:	beq	14c5c <__assert_fail@plt+0x392c>
   14864:	ldrh	r3, [r6, #56]	; 0x38
   14868:	cmp	r3, #11
   1486c:	beq	14b90 <__assert_fail@plt+0x3860>
   14870:	ldr	r2, [r8, #24]
   14874:	mov	r1, #0
   14878:	ldr	r3, [r6, #40]	; 0x28
   1487c:	strb	r1, [r2, r3]
   14880:	ldr	r3, [r6, #48]	; 0x30
   14884:	cmp	r3, r1
   14888:	beq	14c7c <__assert_fail@plt+0x394c>
   1488c:	ldrh	r3, [r6, #58]	; 0x3a
   14890:	tst	r3, #2
   14894:	bne	14c10 <__assert_fail@plt+0x38e0>
   14898:	tst	r3, #1
   1489c:	beq	14d50 <__assert_fail@plt+0x3a20>
   148a0:	ldrh	r3, [r6, #56]	; 0x38
   148a4:	ldr	r0, [r8, #48]	; 0x30
   148a8:	cmp	r3, #2
   148ac:	beq	148dc <__assert_fail@plt+0x35ac>
   148b0:	ldr	r3, [r6, #32]
   148b4:	cmp	r3, #0
   148b8:	movne	r3, #7
   148bc:	strhne	r3, [r6, #56]	; 0x38
   148c0:	bne	148dc <__assert_fail@plt+0x35ac>
   148c4:	mov	r3, #6
   148c8:	mov	r2, r6
   148cc:	add	r1, r8, #56	; 0x38
   148d0:	strh	r3, [r6, #56]	; 0x38
   148d4:	bl	137f0 <__assert_fail@plt+0x24c0>
   148d8:	ldr	r0, [r8, #48]	; 0x30
   148dc:	tst	r0, #8192	; 0x2000
   148e0:	moveq	r4, r6
   148e4:	beq	148ec <__assert_fail@plt+0x35bc>
   148e8:	mov	r4, #0
   148ec:	mov	r0, r4
   148f0:	ldrd	r4, [sp]
   148f4:	ldrd	r6, [sp, #8]
   148f8:	ldr	r8, [sp, #16]
   148fc:	add	sp, sp, #20
   14900:	pop	{pc}		; (ldr pc, [sp], #4)
   14904:	sub	r2, r3, #12
   14908:	cmp	r2, #1
   1490c:	bls	14b4c <__assert_fail@plt+0x381c>
   14910:	cmp	r3, #1
   14914:	bne	14830 <__assert_fail@plt+0x3500>
   14918:	tst	r1, #64	; 0x40
   1491c:	beq	14934 <__assert_fail@plt+0x3604>
   14920:	ldrd	r2, [r8, #16]
   14924:	ldrd	r6, [r4, #64]	; 0x40
   14928:	cmp	r7, r3
   1492c:	cmpeq	r6, r2
   14930:	bne	149b8 <__assert_fail@plt+0x3688>
   14934:	ldr	r0, [r8, #4]
   14938:	cmp	r0, #0
   1493c:	beq	14bbc <__assert_fail@plt+0x388c>
   14940:	tst	r1, #4096	; 0x1000
   14944:	bne	14ba8 <__assert_fail@plt+0x3878>
   14948:	mvn	r2, #0
   1494c:	mov	r1, r4
   14950:	ldr	r3, [r4, #24]
   14954:	mov	r0, r8
   14958:	bl	13500 <__assert_fail@plt+0x21d0>
   1495c:	cmp	r0, #0
   14960:	beq	14c44 <__assert_fail@plt+0x3914>
   14964:	bl	111ec <__errno_location@plt>
   14968:	ldrh	r3, [r4, #58]	; 0x3a
   1496c:	ldr	r2, [r0]
   14970:	orr	r3, r3, #1
   14974:	str	r2, [r4, #32]
   14978:	strh	r3, [r4, #58]	; 0x3a
   1497c:	ldr	r4, [r8, #4]
   14980:	cmp	r4, #0
   14984:	beq	149a4 <__assert_fail@plt+0x3674>
   14988:	mov	r3, r4
   1498c:	ldr	r2, [r3, #4]
   14990:	ldr	r2, [r2, #24]
   14994:	str	r2, [r3, #24]
   14998:	ldr	r3, [r3, #8]
   1499c:	cmp	r3, #0
   149a0:	bne	1498c <__assert_fail@plt+0x365c>
   149a4:	mov	r3, #0
   149a8:	str	r3, [r8, #4]
   149ac:	b	14ab8 <__assert_fail@plt+0x3788>
   149b0:	cmp	r2, #4
   149b4:	bne	14918 <__assert_fail@plt+0x35e8>
   149b8:	ldrh	r3, [r4, #58]	; 0x3a
   149bc:	tst	r3, #2
   149c0:	bne	14cf8 <__assert_fail@plt+0x39c8>
   149c4:	ldr	r0, [r8, #4]
   149c8:	cmp	r0, #0
   149cc:	beq	149dc <__assert_fail@plt+0x36ac>
   149d0:	bl	12fb4 <__assert_fail@plt+0x1c84>
   149d4:	mov	r3, #0
   149d8:	str	r3, [r8, #4]
   149dc:	mov	r3, #6
   149e0:	mov	r2, r4
   149e4:	ldr	r0, [r8, #48]	; 0x30
   149e8:	add	r1, r8, #56	; 0x38
   149ec:	strh	r3, [r4, #56]	; 0x38
   149f0:	bl	137f0 <__assert_fail@plt+0x24c0>
   149f4:	b	148ec <__assert_fail@plt+0x35bc>
   149f8:	mov	r0, r8
   149fc:	bl	131f0 <__assert_fail@plt+0x1ec0>
   14a00:	ldr	r3, [r8, #48]	; 0x30
   14a04:	cmp	r0, #0
   14a08:	orrne	r3, r3, #8192	; 0x2000
   14a0c:	strne	r3, [r8, #48]	; 0x30
   14a10:	bne	148ec <__assert_fail@plt+0x35bc>
   14a14:	movw	r2, #258	; 0x102
   14a18:	ldr	r0, [r8, #56]	; 0x38
   14a1c:	tst	r2, r3
   14a20:	beq	14cf0 <__assert_fail@plt+0x39c0>
   14a24:	cmp	r0, #0
   14a28:	beq	14a30 <__assert_fail@plt+0x3700>
   14a2c:	bl	15c34 <__assert_fail@plt+0x4904>
   14a30:	ldr	r2, [r5, #52]	; 0x34
   14a34:	add	r4, r5, #168	; 0xa8
   14a38:	mov	r1, r4
   14a3c:	ldr	r0, [r8, #24]
   14a40:	str	r2, [r5, #40]	; 0x28
   14a44:	add	r2, r2, #1
   14a48:	bl	11048 <memmove@plt>
   14a4c:	mov	r0, r4
   14a50:	mov	r1, #47	; 0x2f
   14a54:	bl	11264 <strrchr@plt>
   14a58:	cmp	r0, #0
   14a5c:	beq	14a8c <__assert_fail@plt+0x375c>
   14a60:	cmp	r4, r0
   14a64:	beq	14c4c <__assert_fail@plt+0x391c>
   14a68:	add	r6, r0, #1
   14a6c:	mov	r0, r6
   14a70:	bl	111bc <strlen@plt>
   14a74:	mov	r7, r0
   14a78:	mov	r1, r6
   14a7c:	mov	r0, r4
   14a80:	add	r2, r7, #1
   14a84:	bl	11048 <memmove@plt>
   14a88:	str	r7, [r5, #52]	; 0x34
   14a8c:	ldr	r3, [r8, #24]
   14a90:	add	r1, r8, #56	; 0x38
   14a94:	mov	r4, r5
   14a98:	ldr	r0, [r8, #48]	; 0x30
   14a9c:	str	r3, [r5, #24]
   14aa0:	str	r3, [r5, #28]
   14aa4:	bl	13440 <__assert_fail@plt+0x2110>
   14aa8:	ldrh	r0, [r5, #56]	; 0x38
   14aac:	b	14afc <__assert_fail@plt+0x37cc>
   14ab0:	cmp	r3, #2
   14ab4:	beq	14d20 <__assert_fail@plt+0x39f0>
   14ab8:	ldr	r0, [r4, #4]
   14abc:	mov	ip, #47	; 0x2f
   14ac0:	add	r1, r4, #168	; 0xa8
   14ac4:	ldr	r3, [r8, #24]
   14ac8:	ldr	lr, [r0, #28]
   14acc:	ldr	r2, [r0, #40]	; 0x28
   14ad0:	sub	r0, r2, #1
   14ad4:	ldrb	lr, [lr, r0]
   14ad8:	cmp	lr, ip
   14adc:	movne	r0, r2
   14ae0:	strb	ip, [r3, r0]
   14ae4:	add	r0, r3, r0
   14ae8:	ldr	r2, [r4, #52]	; 0x34
   14aec:	add	r0, r0, #1
   14af0:	add	r2, r2, #1
   14af4:	bl	11048 <memmove@plt>
   14af8:	ldrh	r0, [r4, #56]	; 0x38
   14afc:	cmp	r0, #11
   14b00:	str	r4, [r8]
   14b04:	beq	14b74 <__assert_fail@plt+0x3844>
   14b08:	cmp	r0, #1
   14b0c:	bne	148ec <__assert_fail@plt+0x35bc>
   14b10:	ldr	r3, [r4, #48]	; 0x30
   14b14:	add	r1, r8, #56	; 0x38
   14b18:	ldr	r0, [r8, #48]	; 0x30
   14b1c:	cmp	r3, #0
   14b20:	ldrdeq	r2, [r4, #64]	; 0x40
   14b24:	strdeq	r2, [r8, #16]
   14b28:	mov	r2, r4
   14b2c:	bl	1371c <__assert_fail@plt+0x23ec>
   14b30:	subs	r5, r0, #0
   14b34:	bne	148ec <__assert_fail@plt+0x35bc>
   14b38:	bl	111ec <__errno_location@plt>
   14b3c:	mov	r3, #12
   14b40:	mov	r4, r5
   14b44:	str	r3, [r0]
   14b48:	b	148ec <__assert_fail@plt+0x35bc>
   14b4c:	mov	r3, #1
   14b50:	mov	r2, r4
   14b54:	ldr	r0, [r8, #32]
   14b58:	bl	13254 <__assert_fail@plt+0x1f24>
   14b5c:	cmp	r0, #1
   14b60:	strh	r0, [r4, #56]	; 0x38
   14b64:	beq	14d98 <__assert_fail@plt+0x3a68>
   14b68:	cmp	r0, #11
   14b6c:	str	r4, [r8]
   14b70:	bne	148ec <__assert_fail@plt+0x35bc>
   14b74:	ldrd	r2, [r4, #112]	; 0x70
   14b78:	cmp	r3, #0
   14b7c:	cmpeq	r2, #2
   14b80:	beq	14d04 <__assert_fail@plt+0x39d4>
   14b84:	cmp	r3, #0
   14b88:	cmpeq	r2, #1
   14b8c:	beq	148ec <__assert_fail@plt+0x35bc>
   14b90:	bl	112e8 <abort@plt>
   14b94:	mov	r2, r4
   14b98:	ldr	r0, [r8, #32]
   14b9c:	bl	13254 <__assert_fail@plt+0x1f24>
   14ba0:	strh	r0, [r4, #56]	; 0x38
   14ba4:	b	148ec <__assert_fail@plt+0x35bc>
   14ba8:	bic	r1, r1, #4096	; 0x1000
   14bac:	str	r1, [r8, #48]	; 0x30
   14bb0:	bl	12fb4 <__assert_fail@plt+0x1c84>
   14bb4:	mov	r3, #0
   14bb8:	str	r3, [r8, #4]
   14bbc:	mov	r1, #3
   14bc0:	mov	r0, r8
   14bc4:	bl	138bc <__assert_fail@plt+0x258c>
   14bc8:	cmp	r0, #0
   14bcc:	str	r0, [r8, #4]
   14bd0:	movne	r4, r0
   14bd4:	bne	149a4 <__assert_fail@plt+0x3674>
   14bd8:	ldr	r0, [r8, #48]	; 0x30
   14bdc:	tst	r0, #8192	; 0x2000
   14be0:	bne	148e8 <__assert_fail@plt+0x35b8>
   14be4:	ldr	r3, [r4, #32]
   14be8:	cmp	r3, #0
   14bec:	beq	14c00 <__assert_fail@plt+0x38d0>
   14bf0:	ldrh	r3, [r4, #56]	; 0x38
   14bf4:	cmp	r3, #4
   14bf8:	movne	r3, #7
   14bfc:	strhne	r3, [r4, #56]	; 0x38
   14c00:	add	r1, r8, #56	; 0x38
   14c04:	mov	r2, r4
   14c08:	bl	137f0 <__assert_fail@plt+0x24c0>
   14c0c:	b	148ec <__assert_fail@plt+0x35bc>
   14c10:	ldr	r3, [r8, #48]	; 0x30
   14c14:	ldr	r0, [r6, #36]	; 0x24
   14c18:	tst	r3, #4
   14c1c:	bne	14c3c <__assert_fail@plt+0x390c>
   14c20:	tst	r3, #512	; 0x200
   14c24:	beq	14d84 <__assert_fail@plt+0x3a54>
   14c28:	mov	r1, r0
   14c2c:	mov	r2, #1
   14c30:	mov	r0, r8
   14c34:	bl	13160 <__assert_fail@plt+0x1e30>
   14c38:	ldr	r0, [r6, #36]	; 0x24
   14c3c:	bl	112f4 <close@plt>
   14c40:	b	148a0 <__assert_fail@plt+0x3570>
   14c44:	ldr	r4, [r8, #4]
   14c48:	b	149a4 <__assert_fail@plt+0x3674>
   14c4c:	ldrb	r3, [r4, #1]
   14c50:	cmp	r3, #0
   14c54:	beq	14a8c <__assert_fail@plt+0x375c>
   14c58:	b	14a68 <__assert_fail@plt+0x3738>
   14c5c:	mov	r0, r6
   14c60:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14c64:	bl	111ec <__errno_location@plt>
   14c68:	mov	r3, #0
   14c6c:	mov	r4, r3
   14c70:	str	r3, [r0]
   14c74:	str	r3, [r8]
   14c78:	b	148ec <__assert_fail@plt+0x35bc>
   14c7c:	mov	r0, r8
   14c80:	bl	131f0 <__assert_fail@plt+0x1ec0>
   14c84:	cmp	r0, #0
   14c88:	beq	148a0 <__assert_fail@plt+0x3570>
   14c8c:	bl	111ec <__errno_location@plt>
   14c90:	ldr	r3, [r8, #48]	; 0x30
   14c94:	ldr	r2, [r0]
   14c98:	orr	r3, r3, #8192	; 0x2000
   14c9c:	str	r2, [r6, #32]
   14ca0:	str	r3, [r8, #48]	; 0x30
   14ca4:	ldrh	r3, [r6, #56]	; 0x38
   14ca8:	cmp	r3, #2
   14cac:	beq	148e8 <__assert_fail@plt+0x35b8>
   14cb0:	ldr	r0, [r8, #48]	; 0x30
   14cb4:	b	148b0 <__assert_fail@plt+0x3580>
   14cb8:	ldr	r2, [r8, #24]
   14cbc:	mov	r1, #3
   14cc0:	mov	r0, r8
   14cc4:	ldr	r3, [r6, #40]	; 0x28
   14cc8:	str	r6, [r8]
   14ccc:	strb	r5, [r2, r3]
   14cd0:	bl	138bc <__assert_fail@plt+0x258c>
   14cd4:	subs	r3, r0, #0
   14cd8:	bne	14d74 <__assert_fail@plt+0x3a44>
   14cdc:	ldr	r3, [r8, #48]	; 0x30
   14ce0:	tst	r3, #8192	; 0x2000
   14ce4:	bne	148e8 <__assert_fail@plt+0x35b8>
   14ce8:	ldr	r6, [r4, #4]
   14cec:	b	1484c <__assert_fail@plt+0x351c>
   14cf0:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14cf4:	b	14a30 <__assert_fail@plt+0x3700>
   14cf8:	ldr	r0, [r4, #36]	; 0x24
   14cfc:	bl	112f4 <close@plt>
   14d00:	b	149c4 <__assert_fail@plt+0x3694>
   14d04:	mov	r3, #0
   14d08:	mov	r2, r4
   14d0c:	ldr	r0, [r8, #32]
   14d10:	ldr	r1, [r8, #48]	; 0x30
   14d14:	bl	13254 <__assert_fail@plt+0x1f24>
   14d18:	strh	r0, [r4, #56]	; 0x38
   14d1c:	b	14b08 <__assert_fail@plt+0x37d8>
   14d20:	mov	r3, #1
   14d24:	mov	r2, r5
   14d28:	ldr	r0, [r8, #32]
   14d2c:	ldr	r1, [r8, #48]	; 0x30
   14d30:	bl	13254 <__assert_fail@plt+0x1f24>
   14d34:	cmp	r0, #1
   14d38:	strh	r0, [r5, #56]	; 0x38
   14d3c:	beq	14dd8 <__assert_fail@plt+0x3aa8>
   14d40:	mov	r3, #3
   14d44:	mov	r4, r5
   14d48:	strh	r3, [r5, #60]	; 0x3c
   14d4c:	b	14ab8 <__assert_fail@plt+0x3788>
   14d50:	movw	r3, #46500	; 0xb5a4
   14d54:	movt	r3, #1
   14d58:	ldr	r1, [r6, #4]
   14d5c:	mvn	r2, #0
   14d60:	mov	r0, r8
   14d64:	bl	13500 <__assert_fail@plt+0x21d0>
   14d68:	cmp	r0, #0
   14d6c:	beq	148a0 <__assert_fail@plt+0x3570>
   14d70:	b	14c8c <__assert_fail@plt+0x395c>
   14d74:	mov	r0, r4
   14d78:	mov	r4, r3
   14d7c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   14d80:	b	14ab8 <__assert_fail@plt+0x3788>
   14d84:	bl	112a0 <fchdir@plt>
   14d88:	cmp	r0, #0
   14d8c:	bne	14e10 <__assert_fail@plt+0x3ae0>
   14d90:	ldr	r0, [r6, #36]	; 0x24
   14d94:	b	14c3c <__assert_fail@plt+0x390c>
   14d98:	ldr	r1, [r8, #48]	; 0x30
   14d9c:	tst	r1, #4
   14da0:	strne	r4, [r8]
   14da4:	bne	14b10 <__assert_fail@plt+0x37e0>
   14da8:	movw	r2, #46504	; 0xb5a8
   14dac:	movt	r2, #1
   14db0:	ldr	r0, [r8, #32]
   14db4:	bl	134d0 <__assert_fail@plt+0x21a0>
   14db8:	cmp	r0, #0
   14dbc:	str	r0, [r4, #36]	; 0x24
   14dc0:	blt	14e30 <__assert_fail@plt+0x3b00>
   14dc4:	ldrh	r3, [r4, #58]	; 0x3a
   14dc8:	ldrh	r0, [r4, #56]	; 0x38
   14dcc:	orr	r3, r3, #2
   14dd0:	strh	r3, [r4, #58]	; 0x3a
   14dd4:	b	14afc <__assert_fail@plt+0x37cc>
   14dd8:	ldr	r1, [r8, #48]	; 0x30
   14ddc:	tst	r1, #4
   14de0:	bne	14d40 <__assert_fail@plt+0x3a10>
   14de4:	movw	r2, #46504	; 0xb5a8
   14de8:	movt	r2, #1
   14dec:	ldr	r0, [r8, #32]
   14df0:	bl	134d0 <__assert_fail@plt+0x21a0>
   14df4:	cmp	r0, #0
   14df8:	str	r0, [r5, #36]	; 0x24
   14dfc:	blt	14e4c <__assert_fail@plt+0x3b1c>
   14e00:	ldrh	r3, [r5, #58]	; 0x3a
   14e04:	orr	r3, r3, #2
   14e08:	strh	r3, [r5, #58]	; 0x3a
   14e0c:	b	14d40 <__assert_fail@plt+0x3a10>
   14e10:	bl	111ec <__errno_location@plt>
   14e14:	ldr	r3, [r8, #48]	; 0x30
   14e18:	ldr	r2, [r0]
   14e1c:	ldr	r0, [r6, #36]	; 0x24
   14e20:	orr	r3, r3, #8192	; 0x2000
   14e24:	str	r2, [r6, #32]
   14e28:	str	r3, [r8, #48]	; 0x30
   14e2c:	b	14c3c <__assert_fail@plt+0x390c>
   14e30:	bl	111ec <__errno_location@plt>
   14e34:	ldr	r3, [r0]
   14e38:	mov	r2, #7
   14e3c:	str	r3, [r4, #32]
   14e40:	strh	r2, [r4, #56]	; 0x38
   14e44:	str	r4, [r8]
   14e48:	b	148ec <__assert_fail@plt+0x35bc>
   14e4c:	bl	111ec <__errno_location@plt>
   14e50:	ldr	r3, [r0]
   14e54:	mov	r2, #7
   14e58:	str	r3, [r5, #32]
   14e5c:	strh	r2, [r5, #56]	; 0x38
   14e60:	b	14d40 <__assert_fail@plt+0x3a10>
   14e64:	cmp	r2, #4
   14e68:	bhi	14e7c <__assert_fail@plt+0x3b4c>
   14e6c:	mov	r3, #0
   14e70:	strh	r2, [r1, #60]	; 0x3c
   14e74:	mov	r0, r3
   14e78:	bx	lr
   14e7c:	str	r4, [sp, #-8]!
   14e80:	str	lr, [sp, #4]
   14e84:	bl	111ec <__errno_location@plt>
   14e88:	mov	r2, #22
   14e8c:	mov	r3, #1
   14e90:	ldr	r4, [sp]
   14e94:	add	sp, sp, #4
   14e98:	str	r2, [r0]
   14e9c:	mov	r0, r3
   14ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ea8:	mov	r4, r1
   14eac:	mov	r5, r0
   14eb0:	strd	r6, [sp, #8]
   14eb4:	str	r8, [sp, #16]
   14eb8:	str	lr, [sp, #20]
   14ebc:	bl	111ec <__errno_location@plt>
   14ec0:	bics	r2, r4, #4096	; 0x1000
   14ec4:	mov	r7, r0
   14ec8:	movne	r3, #22
   14ecc:	movne	r0, #0
   14ed0:	strne	r3, [r7]
   14ed4:	bne	14f68 <__assert_fail@plt+0x3c38>
   14ed8:	ldr	r6, [r5]
   14edc:	str	r2, [r7]
   14ee0:	ldr	r3, [r5, #48]	; 0x30
   14ee4:	ands	r0, r3, #8192	; 0x2000
   14ee8:	movne	r0, r2
   14eec:	bne	14f68 <__assert_fail@plt+0x3c38>
   14ef0:	ldrh	r3, [r6, #56]	; 0x38
   14ef4:	cmp	r3, #9
   14ef8:	beq	14fd8 <__assert_fail@plt+0x3ca8>
   14efc:	cmp	r3, #1
   14f00:	bne	14f68 <__assert_fail@plt+0x3c38>
   14f04:	ldr	r0, [r5, #4]
   14f08:	cmp	r0, #0
   14f0c:	beq	14f14 <__assert_fail@plt+0x3be4>
   14f10:	bl	12fb4 <__assert_fail@plt+0x1c84>
   14f14:	cmp	r4, #4096	; 0x1000
   14f18:	movne	r4, #1
   14f1c:	bne	14f30 <__assert_fail@plt+0x3c00>
   14f20:	ldr	r3, [r5, #48]	; 0x30
   14f24:	mov	r4, #2
   14f28:	orr	r3, r3, #4096	; 0x1000
   14f2c:	str	r3, [r5, #48]	; 0x30
   14f30:	ldr	r3, [r6, #48]	; 0x30
   14f34:	cmp	r3, #0
   14f38:	bne	14f58 <__assert_fail@plt+0x3c28>
   14f3c:	ldr	r3, [r6, #24]
   14f40:	ldrb	r3, [r3]
   14f44:	cmp	r3, #47	; 0x2f
   14f48:	beq	14f58 <__assert_fail@plt+0x3c28>
   14f4c:	ldr	r1, [r5, #48]	; 0x30
   14f50:	ands	r6, r1, #4
   14f54:	beq	14f7c <__assert_fail@plt+0x3c4c>
   14f58:	mov	r1, r4
   14f5c:	mov	r0, r5
   14f60:	bl	138bc <__assert_fail@plt+0x258c>
   14f64:	str	r0, [r5, #4]
   14f68:	ldrd	r4, [sp]
   14f6c:	ldrd	r6, [sp, #8]
   14f70:	ldr	r8, [sp, #16]
   14f74:	add	sp, sp, #20
   14f78:	pop	{pc}		; (ldr pc, [sp], #4)
   14f7c:	movw	r2, #46504	; 0xb5a8
   14f80:	movt	r2, #1
   14f84:	ldr	r0, [r5, #32]
   14f88:	bl	134d0 <__assert_fail@plt+0x21a0>
   14f8c:	subs	r8, r0, #0
   14f90:	movlt	r0, r6
   14f94:	strlt	r6, [r5, #4]
   14f98:	blt	14f68 <__assert_fail@plt+0x3c38>
   14f9c:	mov	r1, r4
   14fa0:	mov	r0, r5
   14fa4:	bl	138bc <__assert_fail@plt+0x258c>
   14fa8:	ldr	r3, [r5, #48]	; 0x30
   14fac:	str	r0, [r5, #4]
   14fb0:	ands	r4, r3, #512	; 0x200
   14fb4:	bne	14fe0 <__assert_fail@plt+0x3cb0>
   14fb8:	mov	r0, r8
   14fbc:	bl	112a0 <fchdir@plt>
   14fc0:	cmp	r0, #0
   14fc4:	bne	14ff4 <__assert_fail@plt+0x3cc4>
   14fc8:	mov	r0, r8
   14fcc:	bl	112f4 <close@plt>
   14fd0:	ldr	r0, [r5, #4]
   14fd4:	b	14f68 <__assert_fail@plt+0x3c38>
   14fd8:	ldr	r0, [r6, #8]
   14fdc:	b	14f68 <__assert_fail@plt+0x3c38>
   14fe0:	mov	r1, r8
   14fe4:	mov	r2, #1
   14fe8:	mov	r0, r5
   14fec:	bl	13160 <__assert_fail@plt+0x1e30>
   14ff0:	b	14fd0 <__assert_fail@plt+0x3ca0>
   14ff4:	ldr	r5, [r7]
   14ff8:	mov	r0, r8
   14ffc:	bl	112f4 <close@plt>
   15000:	mov	r0, r4
   15004:	str	r5, [r7]
   15008:	b	14f68 <__assert_fail@plt+0x3c38>
   1500c:	andeq	r0, r0, r0
   15010:	cmp	r0, #10
   15014:	movcc	r0, #10
   15018:	orr	r0, r0, #1
   1501c:	cmn	r0, #1
   15020:	bxeq	lr
   15024:	push	{lr}		; (str lr, [sp, #-4]!)
   15028:	movw	lr, #43691	; 0xaaab
   1502c:	movt	lr, #43690	; 0xaaaa
   15030:	umull	r2, r3, lr, r0
   15034:	cmp	r0, #9
   15038:	lsr	r3, r3, #1
   1503c:	add	r3, r3, r3, lsl #1
   15040:	sub	r3, r0, r3
   15044:	bls	15084 <__assert_fail@plt+0x3d54>
   15048:	cmp	r3, #0
   1504c:	beq	1508c <__assert_fail@plt+0x3d5c>
   15050:	mov	ip, #16
   15054:	mov	r1, #9
   15058:	mov	r2, #3
   1505c:	b	15068 <__assert_fail@plt+0x3d38>
   15060:	cmp	r3, #0
   15064:	beq	1508c <__assert_fail@plt+0x3d5c>
   15068:	add	r2, r2, #2
   1506c:	add	r1, r1, ip
   15070:	cmp	r1, r0
   15074:	add	ip, ip, #8
   15078:	udiv	r3, r0, r2
   1507c:	mls	r3, r2, r3, r0
   15080:	bcc	15060 <__assert_fail@plt+0x3d30>
   15084:	cmp	r3, #0
   15088:	bne	15098 <__assert_fail@plt+0x3d68>
   1508c:	add	r0, r0, #2
   15090:	cmn	r0, #1
   15094:	bne	15030 <__assert_fail@plt+0x3d00>
   15098:	pop	{pc}		; (ldr pc, [sp], #4)
   1509c:	ror	r0, r0, #3
   150a0:	udiv	r3, r0, r1
   150a4:	mls	r0, r3, r1, r0
   150a8:	bx	lr
   150ac:	sub	r0, r1, r0
   150b0:	clz	r0, r0
   150b4:	lsr	r0, r0, #5
   150b8:	bx	lr
   150bc:	str	r4, [sp, #-8]!
   150c0:	mov	r4, r0
   150c4:	mov	r0, r1
   150c8:	ldr	r1, [r4, #8]
   150cc:	ldr	r3, [r4, #24]
   150d0:	str	lr, [sp, #4]
   150d4:	blx	r3
   150d8:	ldr	r3, [r4, #8]
   150dc:	cmp	r3, r0
   150e0:	bls	150f8 <__assert_fail@plt+0x3dc8>
   150e4:	ldr	r3, [r4]
   150e8:	ldr	r4, [sp]
   150ec:	add	sp, sp, #4
   150f0:	add	r0, r3, r0, lsl #3
   150f4:	pop	{pc}		; (ldr pc, [sp], #4)
   150f8:	bl	112e8 <abort@plt>
   150fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15100:	mov	r5, r1
   15104:	strd	r6, [sp, #8]
   15108:	mov	r7, r3
   1510c:	mov	r6, r0
   15110:	str	r8, [sp, #16]
   15114:	mov	r8, r2
   15118:	str	lr, [sp, #20]
   1511c:	bl	150bc <__assert_fail@plt+0x3d8c>
   15120:	str	r0, [r8]
   15124:	ldr	r1, [r0]
   15128:	cmp	r1, #0
   1512c:	beq	1521c <__assert_fail@plt+0x3eec>
   15130:	cmp	r1, r5
   15134:	mov	r4, r0
   15138:	beq	151e4 <__assert_fail@plt+0x3eb4>
   1513c:	mov	r0, r5
   15140:	ldr	r3, [r6, #28]
   15144:	blx	r3
   15148:	cmp	r0, #0
   1514c:	bne	151e0 <__assert_fail@plt+0x3eb0>
   15150:	ldr	r3, [r4, #4]
   15154:	cmp	r3, #0
   15158:	beq	1521c <__assert_fail@plt+0x3eec>
   1515c:	ldr	r1, [r3]
   15160:	cmp	r5, r1
   15164:	bne	15188 <__assert_fail@plt+0x3e58>
   15168:	b	151a4 <__assert_fail@plt+0x3e74>
   1516c:	ldr	r4, [r4, #4]
   15170:	ldr	r3, [r4, #4]
   15174:	cmp	r3, #0
   15178:	beq	1521c <__assert_fail@plt+0x3eec>
   1517c:	ldr	r1, [r3]
   15180:	cmp	r1, r5
   15184:	beq	151a4 <__assert_fail@plt+0x3e74>
   15188:	mov	r0, r5
   1518c:	ldr	r3, [r6, #28]
   15190:	blx	r3
   15194:	cmp	r0, #0
   15198:	beq	1516c <__assert_fail@plt+0x3e3c>
   1519c:	ldr	r3, [r4, #4]
   151a0:	ldr	r1, [r3]
   151a4:	cmp	r7, #0
   151a8:	beq	151c8 <__assert_fail@plt+0x3e98>
   151ac:	ldr	r0, [r3, #4]
   151b0:	mov	r2, #0
   151b4:	str	r0, [r4, #4]
   151b8:	str	r2, [r3]
   151bc:	ldr	r2, [r6, #36]	; 0x24
   151c0:	str	r2, [r3, #4]
   151c4:	str	r3, [r6, #36]	; 0x24
   151c8:	ldrd	r4, [sp]
   151cc:	mov	r0, r1
   151d0:	ldrd	r6, [sp, #8]
   151d4:	ldr	r8, [sp, #16]
   151d8:	add	sp, sp, #20
   151dc:	pop	{pc}		; (ldr pc, [sp], #4)
   151e0:	ldr	r1, [r4]
   151e4:	cmp	r7, #0
   151e8:	beq	151c8 <__assert_fail@plt+0x3e98>
   151ec:	ldr	r0, [r4, #4]
   151f0:	cmp	r0, #0
   151f4:	streq	r0, [r4]
   151f8:	beq	151c8 <__assert_fail@plt+0x3e98>
   151fc:	ldrd	r2, [r0]
   15200:	mov	ip, #0
   15204:	strd	r2, [r4]
   15208:	str	ip, [r0]
   1520c:	ldr	r3, [r6, #36]	; 0x24
   15210:	str	r3, [r0, #4]
   15214:	str	r0, [r6, #36]	; 0x24
   15218:	b	151c8 <__assert_fail@plt+0x3e98>
   1521c:	mov	r1, #0
   15220:	b	151c8 <__assert_fail@plt+0x3e98>
   15224:	ldr	r2, [r0]
   15228:	movw	r3, #46508	; 0xb5ac
   1522c:	movt	r3, #1
   15230:	mov	r1, r0
   15234:	cmp	r2, r3
   15238:	beq	152c0 <__assert_fail@plt+0x3f90>
   1523c:	vldr	s14, [pc, #132]	; 152c8 <__assert_fail@plt+0x3f98>
   15240:	vldr	s15, [r2, #8]
   15244:	vcmpe.f32	s15, s14
   15248:	vmrs	APSR_nzcv, fpscr
   1524c:	ble	152b4 <__assert_fail@plt+0x3f84>
   15250:	vldr	s13, [pc, #116]	; 152cc <__assert_fail@plt+0x3f9c>
   15254:	vcmpe.f32	s15, s13
   15258:	vmrs	APSR_nzcv, fpscr
   1525c:	bpl	152b4 <__assert_fail@plt+0x3f84>
   15260:	vldr	s13, [pc, #104]	; 152d0 <__assert_fail@plt+0x3fa0>
   15264:	vldr	s12, [r2, #12]
   15268:	vcmpe.f32	s12, s13
   1526c:	vmrs	APSR_nzcv, fpscr
   15270:	ble	152b4 <__assert_fail@plt+0x3f84>
   15274:	vldr	s13, [r2]
   15278:	vcmpe.f32	s13, #0.0
   1527c:	vmrs	APSR_nzcv, fpscr
   15280:	blt	152b4 <__assert_fail@plt+0x3f84>
   15284:	vadd.f32	s14, s13, s14
   15288:	vldr	s13, [r2, #4]
   1528c:	vcmpe.f32	s14, s13
   15290:	vmrs	APSR_nzcv, fpscr
   15294:	bpl	152b4 <__assert_fail@plt+0x3f84>
   15298:	vldr	s12, [pc, #52]	; 152d4 <__assert_fail@plt+0x3fa4>
   1529c:	vcmpe.f32	s13, s12
   152a0:	vmrs	APSR_nzcv, fpscr
   152a4:	bhi	152b4 <__assert_fail@plt+0x3f84>
   152a8:	vcmpe.f32	s15, s14
   152ac:	vmrs	APSR_nzcv, fpscr
   152b0:	bgt	152c0 <__assert_fail@plt+0x3f90>
   152b4:	mov	r0, #0
   152b8:	str	r3, [r1]
   152bc:	bx	lr
   152c0:	mov	r0, #1
   152c4:	bx	lr
   152c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   152cc:	svccc	0x00666666
   152d0:	svccc	0x008ccccd
   152d4:	svccc	0x00800000
   152d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   152dc:	ldr	r3, [r1, #4]
   152e0:	strd	r6, [sp, #8]
   152e4:	ldr	r6, [r1]
   152e8:	strd	r8, [sp, #16]
   152ec:	str	sl, [sp, #24]
   152f0:	str	lr, [sp, #28]
   152f4:	cmp	r6, r3
   152f8:	bcs	153c0 <__assert_fail@plt+0x4090>
   152fc:	mov	r8, r2
   15300:	mov	r5, r0
   15304:	mov	r7, r1
   15308:	add	r6, r6, #8
   1530c:	mov	r9, #0
   15310:	b	15320 <__assert_fail@plt+0x3ff0>
   15314:	cmp	r3, r6
   15318:	add	r6, r6, #8
   1531c:	bls	153c0 <__assert_fail@plt+0x4090>
   15320:	ldr	sl, [r6, #-8]
   15324:	cmp	sl, #0
   15328:	beq	15314 <__assert_fail@plt+0x3fe4>
   1532c:	ldr	r4, [r6, #-4]
   15330:	cmp	r4, #0
   15334:	bne	15354 <__assert_fail@plt+0x4024>
   15338:	b	153a4 <__assert_fail@plt+0x4074>
   1533c:	ldr	r2, [r0, #4]
   15340:	cmp	r3, #0
   15344:	str	r2, [r4, #4]
   15348:	str	r4, [r0, #4]
   1534c:	mov	r4, r3
   15350:	beq	153a0 <__assert_fail@plt+0x4070>
   15354:	ldr	sl, [r4]
   15358:	mov	r0, r5
   1535c:	mov	r1, sl
   15360:	bl	150bc <__assert_fail@plt+0x3d8c>
   15364:	ldr	r2, [r0]
   15368:	ldr	r3, [r4, #4]
   1536c:	cmp	r2, #0
   15370:	bne	1533c <__assert_fail@plt+0x400c>
   15374:	ldr	r1, [r5, #12]
   15378:	cmp	r3, #0
   1537c:	str	sl, [r0]
   15380:	add	r1, r1, #1
   15384:	str	r1, [r5, #12]
   15388:	str	r2, [r4]
   1538c:	ldr	r2, [r5, #36]	; 0x24
   15390:	str	r2, [r4, #4]
   15394:	str	r4, [r5, #36]	; 0x24
   15398:	mov	r4, r3
   1539c:	bne	15354 <__assert_fail@plt+0x4024>
   153a0:	ldr	sl, [r6, #-8]
   153a4:	cmp	r8, #0
   153a8:	str	r9, [r6, #-4]
   153ac:	beq	153dc <__assert_fail@plt+0x40ac>
   153b0:	ldr	r3, [r7, #4]
   153b4:	cmp	r3, r6
   153b8:	add	r6, r6, #8
   153bc:	bhi	15320 <__assert_fail@plt+0x3ff0>
   153c0:	mov	r0, #1
   153c4:	ldrd	r4, [sp]
   153c8:	ldrd	r6, [sp, #8]
   153cc:	ldrd	r8, [sp, #16]
   153d0:	ldr	sl, [sp, #24]
   153d4:	add	sp, sp, #28
   153d8:	pop	{pc}		; (ldr pc, [sp], #4)
   153dc:	mov	r1, sl
   153e0:	mov	r0, r5
   153e4:	bl	150bc <__assert_fail@plt+0x3d8c>
   153e8:	ldr	r3, [r0]
   153ec:	mov	r4, r0
   153f0:	cmp	r3, #0
   153f4:	beq	15434 <__assert_fail@plt+0x4104>
   153f8:	ldr	r0, [r5, #36]	; 0x24
   153fc:	cmp	r0, #0
   15400:	beq	15448 <__assert_fail@plt+0x4118>
   15404:	ldr	r3, [r0, #4]
   15408:	str	r3, [r5, #36]	; 0x24
   1540c:	ldr	r3, [r4, #4]
   15410:	str	sl, [r0]
   15414:	str	r3, [r0, #4]
   15418:	str	r0, [r4, #4]
   1541c:	ldr	r2, [r7, #12]
   15420:	str	r9, [r6, #-8]
   15424:	ldr	r3, [r7, #4]
   15428:	sub	r2, r2, #1
   1542c:	str	r2, [r7, #12]
   15430:	b	15314 <__assert_fail@plt+0x3fe4>
   15434:	ldr	r3, [r5, #12]
   15438:	str	sl, [r0]
   1543c:	add	r3, r3, #1
   15440:	str	r3, [r5, #12]
   15444:	b	1541c <__assert_fail@plt+0x40ec>
   15448:	mov	r0, #8
   1544c:	bl	19c58 <__assert_fail@plt+0x8928>
   15450:	cmp	r0, #0
   15454:	bne	1540c <__assert_fail@plt+0x40dc>
   15458:	mov	r0, r8
   1545c:	b	153c4 <__assert_fail@plt+0x4094>
   15460:	ldr	r0, [r0, #8]
   15464:	bx	lr
   15468:	ldr	r0, [r0, #12]
   1546c:	bx	lr
   15470:	ldr	r0, [r0, #16]
   15474:	bx	lr
   15478:	ldm	r0, {r1, r3}
   1547c:	cmp	r1, r3
   15480:	bcs	154f4 <__assert_fail@plt+0x41c4>
   15484:	sub	ip, r3, #1
   15488:	add	r3, r1, #16
   1548c:	sub	ip, ip, r1
   15490:	mov	r0, #0
   15494:	bic	ip, ip, #7
   15498:	add	r1, r1, #8
   1549c:	add	ip, ip, r3
   154a0:	b	154b0 <__assert_fail@plt+0x4180>
   154a4:	add	r1, r1, #8
   154a8:	cmp	r1, ip
   154ac:	beq	154f0 <__assert_fail@plt+0x41c0>
   154b0:	ldr	r3, [r1, #-8]
   154b4:	cmp	r3, #0
   154b8:	beq	154a4 <__assert_fail@plt+0x4174>
   154bc:	ldr	r3, [r1, #-4]
   154c0:	mov	r2, #1
   154c4:	cmp	r3, #0
   154c8:	beq	154dc <__assert_fail@plt+0x41ac>
   154cc:	ldr	r3, [r3, #4]
   154d0:	add	r2, r2, #1
   154d4:	cmp	r3, #0
   154d8:	bne	154cc <__assert_fail@plt+0x419c>
   154dc:	cmp	r0, r2
   154e0:	add	r1, r1, #8
   154e4:	movcc	r0, r2
   154e8:	cmp	r1, ip
   154ec:	bne	154b0 <__assert_fail@plt+0x4180>
   154f0:	bx	lr
   154f4:	mov	r0, #0
   154f8:	bx	lr
   154fc:	ldm	r0, {r1, r3}
   15500:	push	{lr}		; (str lr, [sp, #-4]!)
   15504:	cmp	r1, r3
   15508:	bcs	1559c <__assert_fail@plt+0x426c>
   1550c:	sub	ip, r3, #1
   15510:	mov	r2, #0
   15514:	sub	ip, ip, r1
   15518:	add	r3, r1, #16
   1551c:	bic	ip, ip, #7
   15520:	add	r1, r1, #8
   15524:	add	ip, ip, r3
   15528:	mov	lr, r2
   1552c:	b	1553c <__assert_fail@plt+0x420c>
   15530:	add	r1, r1, #8
   15534:	cmp	r1, ip
   15538:	beq	15578 <__assert_fail@plt+0x4248>
   1553c:	ldr	r3, [r1, #-8]
   15540:	cmp	r3, #0
   15544:	beq	15530 <__assert_fail@plt+0x4200>
   15548:	ldr	r3, [r1, #-4]
   1554c:	add	lr, lr, #1
   15550:	add	r2, r2, #1
   15554:	cmp	r3, #0
   15558:	beq	15530 <__assert_fail@plt+0x4200>
   1555c:	ldr	r3, [r3, #4]
   15560:	add	r2, r2, #1
   15564:	cmp	r3, #0
   15568:	bne	1555c <__assert_fail@plt+0x422c>
   1556c:	add	r1, r1, #8
   15570:	cmp	r1, ip
   15574:	bne	1553c <__assert_fail@plt+0x420c>
   15578:	ldr	r3, [r0, #12]
   1557c:	cmp	r3, lr
   15580:	movne	r0, #0
   15584:	bne	15598 <__assert_fail@plt+0x4268>
   15588:	ldr	r0, [r0, #16]
   1558c:	sub	r0, r0, r2
   15590:	clz	r0, r0
   15594:	lsr	r0, r0, #5
   15598:	pop	{pc}		; (ldr pc, [sp], #4)
   1559c:	mov	r2, #0
   155a0:	mov	lr, r2
   155a4:	b	15578 <__assert_fail@plt+0x4248>
   155a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   155ac:	mov	r4, r1
   155b0:	ldr	r2, [r0]
   155b4:	ldr	r1, [r0, #4]
   155b8:	ldr	r3, [r0, #16]
   155bc:	strd	r6, [sp, #8]
   155c0:	str	lr, [sp, #16]
   155c4:	sub	sp, sp, #12
   155c8:	cmp	r2, r1
   155cc:	ldrd	r6, [r0, #8]
   155d0:	bcs	156d0 <__assert_fail@plt+0x43a0>
   155d4:	sub	ip, r1, #1
   155d8:	add	r1, r2, #16
   155dc:	sub	ip, ip, r2
   155e0:	add	r0, r2, #8
   155e4:	bic	ip, ip, #7
   155e8:	mov	r5, #0
   155ec:	add	ip, ip, r1
   155f0:	b	15600 <__assert_fail@plt+0x42d0>
   155f4:	add	r0, r0, #8
   155f8:	cmp	r0, ip
   155fc:	beq	15640 <__assert_fail@plt+0x4310>
   15600:	ldr	r2, [r0, #-8]
   15604:	cmp	r2, #0
   15608:	beq	155f4 <__assert_fail@plt+0x42c4>
   1560c:	ldr	r2, [r0, #-4]
   15610:	mov	r1, #1
   15614:	cmp	r2, #0
   15618:	beq	1562c <__assert_fail@plt+0x42fc>
   1561c:	ldr	r2, [r2, #4]
   15620:	add	r1, r1, #1
   15624:	cmp	r2, #0
   15628:	bne	1561c <__assert_fail@plt+0x42ec>
   1562c:	cmp	r5, r1
   15630:	add	r0, r0, #8
   15634:	movcc	r5, r1
   15638:	cmp	r0, ip
   1563c:	bne	15600 <__assert_fail@plt+0x42d0>
   15640:	mov	r1, #1
   15644:	mov	r0, r4
   15648:	movw	r2, #46528	; 0xb5c0
   1564c:	movt	r2, #1
   15650:	bl	11228 <__fprintf_chk@plt>
   15654:	mov	r3, r6
   15658:	mov	r1, #1
   1565c:	mov	r0, r4
   15660:	movw	r2, #46552	; 0xb5d8
   15664:	movt	r2, #1
   15668:	bl	11228 <__fprintf_chk@plt>
   1566c:	vmov	s15, r7
   15670:	mov	r3, r7
   15674:	mov	r1, #1
   15678:	vldr	d5, [pc, #88]	; 156d8 <__assert_fail@plt+0x43a8>
   1567c:	mov	r0, r4
   15680:	movw	r2, #46576	; 0xb5f0
   15684:	movt	r2, #1
   15688:	vcvt.f64.u32	d6, s15
   1568c:	vmov	s15, r6
   15690:	vmul.f64	d6, d6, d5
   15694:	vcvt.f64.u32	d7, s15
   15698:	vdiv.f64	d5, d6, d7
   1569c:	vstr	d5, [sp]
   156a0:	bl	11228 <__fprintf_chk@plt>
   156a4:	mov	r3, r5
   156a8:	mov	r0, r4
   156ac:	movw	r2, #46612	; 0xb614
   156b0:	movt	r2, #1
   156b4:	mov	r1, #1
   156b8:	add	sp, sp, #12
   156bc:	ldrd	r4, [sp]
   156c0:	ldrd	r6, [sp, #8]
   156c4:	ldr	lr, [sp, #16]
   156c8:	add	sp, sp, #20
   156cc:	b	11228 <__fprintf_chk@plt>
   156d0:	mov	r5, #0
   156d4:	b	15640 <__assert_fail@plt+0x4310>
   156d8:	andeq	r0, r0, r0
   156dc:	subsmi	r0, r9, r0
   156e0:	strd	r4, [sp, #-16]!
   156e4:	mov	r5, r1
   156e8:	str	r6, [sp, #8]
   156ec:	mov	r6, r0
   156f0:	str	lr, [sp, #12]
   156f4:	bl	150bc <__assert_fail@plt+0x3d8c>
   156f8:	ldr	r3, [r0]
   156fc:	cmp	r3, #0
   15700:	beq	1573c <__assert_fail@plt+0x440c>
   15704:	mov	r4, r0
   15708:	b	15710 <__assert_fail@plt+0x43e0>
   1570c:	ldr	r3, [r4]
   15710:	cmp	r3, r5
   15714:	mov	r1, r3
   15718:	mov	r0, r5
   1571c:	beq	15754 <__assert_fail@plt+0x4424>
   15720:	ldr	r3, [r6, #28]
   15724:	blx	r3
   15728:	cmp	r0, #0
   1572c:	bne	15750 <__assert_fail@plt+0x4420>
   15730:	ldr	r4, [r4, #4]
   15734:	cmp	r4, #0
   15738:	bne	1570c <__assert_fail@plt+0x43dc>
   1573c:	ldrd	r4, [sp]
   15740:	mov	r0, #0
   15744:	ldr	r6, [sp, #8]
   15748:	add	sp, sp, #12
   1574c:	pop	{pc}		; (ldr pc, [sp], #4)
   15750:	ldr	r5, [r4]
   15754:	mov	r0, r5
   15758:	ldrd	r4, [sp]
   1575c:	ldr	r6, [sp, #8]
   15760:	add	sp, sp, #12
   15764:	pop	{pc}		; (ldr pc, [sp], #4)
   15768:	ldr	r3, [r0, #16]
   1576c:	cmp	r3, #0
   15770:	beq	157c4 <__assert_fail@plt+0x4494>
   15774:	ldr	r3, [r0]
   15778:	ldr	r2, [r0, #4]
   1577c:	cmp	r3, r2
   15780:	bcs	157b8 <__assert_fail@plt+0x4488>
   15784:	ldr	r0, [r3]
   15788:	cmp	r0, #0
   1578c:	bxne	lr
   15790:	sub	r2, r2, #1
   15794:	sub	r2, r2, r3
   15798:	bic	r2, r2, #7
   1579c:	add	r2, r3, r2
   157a0:	b	157b0 <__assert_fail@plt+0x4480>
   157a4:	ldr	r0, [r3, #8]!
   157a8:	cmp	r0, #0
   157ac:	bxne	lr
   157b0:	cmp	r3, r2
   157b4:	bne	157a4 <__assert_fail@plt+0x4474>
   157b8:	str	r4, [sp, #-8]!
   157bc:	str	lr, [sp, #4]
   157c0:	bl	112e8 <abort@plt>
   157c4:	mov	r0, r3
   157c8:	bx	lr
   157cc:	strd	r4, [sp, #-16]!
   157d0:	mov	r5, r0
   157d4:	mov	r4, r1
   157d8:	str	r6, [sp, #8]
   157dc:	str	lr, [sp, #12]
   157e0:	bl	150bc <__assert_fail@plt+0x3d8c>
   157e4:	mov	r2, r0
   157e8:	mov	r3, r0
   157ec:	b	157f8 <__assert_fail@plt+0x44c8>
   157f0:	cmp	r3, #0
   157f4:	beq	15810 <__assert_fail@plt+0x44e0>
   157f8:	ldm	r3, {r1, r3}
   157fc:	cmp	r1, r4
   15800:	bne	157f0 <__assert_fail@plt+0x44c0>
   15804:	cmp	r3, #0
   15808:	ldrne	r0, [r3]
   1580c:	bne	15834 <__assert_fail@plt+0x4504>
   15810:	ldr	r3, [r5, #4]
   15814:	b	15824 <__assert_fail@plt+0x44f4>
   15818:	ldr	r0, [r2]
   1581c:	cmp	r0, #0
   15820:	bne	15834 <__assert_fail@plt+0x4504>
   15824:	add	r2, r2, #8
   15828:	cmp	r3, r2
   1582c:	bhi	15818 <__assert_fail@plt+0x44e8>
   15830:	mov	r0, #0
   15834:	ldrd	r4, [sp]
   15838:	ldr	r6, [sp, #8]
   1583c:	add	sp, sp, #12
   15840:	pop	{pc}		; (ldr pc, [sp], #4)
   15844:	strd	r4, [sp, #-12]!
   15848:	ldr	r5, [r0]
   1584c:	str	lr, [sp, #8]
   15850:	ldr	lr, [r0, #4]
   15854:	cmp	lr, r5
   15858:	bls	158e4 <__assert_fail@plt+0x45b4>
   1585c:	mov	ip, #0
   15860:	ldr	r3, [r5]
   15864:	cmp	r3, #0
   15868:	bne	1588c <__assert_fail@plt+0x455c>
   1586c:	add	r5, r5, #8
   15870:	cmp	lr, r5
   15874:	bhi	15860 <__assert_fail@plt+0x4530>
   15878:	mov	r2, ip
   1587c:	ldrd	r4, [sp]
   15880:	add	sp, sp, #8
   15884:	mov	r0, r2
   15888:	pop	{pc}		; (ldr pc, [sp], #4)
   1588c:	cmp	r2, ip
   15890:	bls	15878 <__assert_fail@plt+0x4548>
   15894:	str	r3, [r1, ip, lsl #2]
   15898:	add	r4, ip, #1
   1589c:	add	lr, r1, ip, lsl #2
   158a0:	ldr	r3, [r5, #4]
   158a4:	cmp	r3, #0
   158a8:	beq	158d8 <__assert_fail@plt+0x45a8>
   158ac:	mov	ip, r4
   158b0:	cmp	r2, ip
   158b4:	add	ip, ip, #1
   158b8:	beq	1587c <__assert_fail@plt+0x454c>
   158bc:	ldr	r4, [r3]
   158c0:	str	r4, [lr, #4]!
   158c4:	ldr	r3, [r3, #4]
   158c8:	cmp	r3, #0
   158cc:	bne	158b0 <__assert_fail@plt+0x4580>
   158d0:	ldr	lr, [r0, #4]
   158d4:	b	1586c <__assert_fail@plt+0x453c>
   158d8:	mov	ip, r4
   158dc:	ldr	lr, [r0, #4]
   158e0:	b	1586c <__assert_fail@plt+0x453c>
   158e4:	mov	r2, #0
   158e8:	b	1587c <__assert_fail@plt+0x454c>
   158ec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   158f0:	ldr	r3, [r0, #4]
   158f4:	strd	r6, [sp, #8]
   158f8:	strd	r8, [sp, #16]
   158fc:	ldr	r8, [r0]
   15900:	str	sl, [sp, #24]
   15904:	str	lr, [sp, #28]
   15908:	cmp	r3, r8
   1590c:	bls	15988 <__assert_fail@plt+0x4658>
   15910:	mov	r7, r2
   15914:	mov	r6, r1
   15918:	mov	r9, r0
   1591c:	mov	r5, #0
   15920:	ldr	r0, [r8]
   15924:	cmp	r0, #0
   15928:	bne	15954 <__assert_fail@plt+0x4624>
   1592c:	add	r8, r8, #8
   15930:	cmp	r3, r8
   15934:	bhi	15920 <__assert_fail@plt+0x45f0>
   15938:	mov	r0, r5
   1593c:	ldrd	r4, [sp]
   15940:	ldrd	r6, [sp, #8]
   15944:	ldrd	r8, [sp, #16]
   15948:	ldr	sl, [sp, #24]
   1594c:	add	sp, sp, #28
   15950:	pop	{pc}		; (ldr pc, [sp], #4)
   15954:	mov	r4, r8
   15958:	b	15960 <__assert_fail@plt+0x4630>
   1595c:	ldr	r0, [r4]
   15960:	mov	r1, r7
   15964:	blx	r6
   15968:	cmp	r0, #0
   1596c:	beq	15938 <__assert_fail@plt+0x4608>
   15970:	ldr	r4, [r4, #4]
   15974:	add	r5, r5, #1
   15978:	cmp	r4, #0
   1597c:	bne	1595c <__assert_fail@plt+0x462c>
   15980:	ldr	r3, [r9, #4]
   15984:	b	1592c <__assert_fail@plt+0x45fc>
   15988:	mov	r5, #0
   1598c:	b	15938 <__assert_fail@plt+0x4608>
   15990:	ldrb	r2, [r0]
   15994:	cmp	r2, #0
   15998:	beq	159c4 <__assert_fail@plt+0x4694>
   1599c:	mov	r3, #0
   159a0:	rsb	r3, r3, r3, lsl #5
   159a4:	add	r3, r3, r2
   159a8:	ldrb	r2, [r0, #1]!
   159ac:	udiv	ip, r3, r1
   159b0:	cmp	r2, #0
   159b4:	mls	r3, r1, ip, r3
   159b8:	bne	159a0 <__assert_fail@plt+0x4670>
   159bc:	mov	r0, r3
   159c0:	bx	lr
   159c4:	mov	r3, r2
   159c8:	mov	r0, r3
   159cc:	bx	lr
   159d0:	movw	r3, #46508	; 0xb5ac
   159d4:	movt	r3, #1
   159d8:	strd	r4, [sp, #-8]!
   159dc:	ldrd	r4, [r3]
   159e0:	ldr	r1, [r3, #16]
   159e4:	ldrd	r2, [r3, #8]
   159e8:	strd	r4, [r0]
   159ec:	ldrd	r4, [sp]
   159f0:	add	sp, sp, #8
   159f4:	strd	r2, [r0, #8]
   159f8:	str	r1, [r0, #16]
   159fc:	bx	lr
   15a00:	strd	r4, [sp, #-20]!	; 0xffffffec
   15a04:	cmp	r2, #0
   15a08:	movw	ip, #20652	; 0x50ac
   15a0c:	movt	ip, #1
   15a10:	strd	r6, [sp, #8]
   15a14:	movne	r6, r2
   15a18:	str	lr, [sp, #16]
   15a1c:	sub	sp, sp, #12
   15a20:	movw	lr, #20636	; 0x509c
   15a24:	movt	lr, #1
   15a28:	mov	r7, r1
   15a2c:	moveq	r6, lr
   15a30:	cmp	r3, #0
   15a34:	str	r0, [sp, #4]
   15a38:	mov	r0, #40	; 0x28
   15a3c:	movne	r5, r3
   15a40:	moveq	r5, ip
   15a44:	bl	19c58 <__assert_fail@plt+0x8928>
   15a48:	subs	r4, r0, #0
   15a4c:	beq	15ae4 <__assert_fail@plt+0x47b4>
   15a50:	cmp	r7, #0
   15a54:	add	r0, r4, #20
   15a58:	beq	15afc <__assert_fail@plt+0x47cc>
   15a5c:	str	r7, [r4, #20]
   15a60:	bl	15224 <__assert_fail@plt+0x3ef4>
   15a64:	cmp	r0, #0
   15a68:	beq	15b44 <__assert_fail@plt+0x4814>
   15a6c:	ldrb	r3, [r7, #16]
   15a70:	cmp	r3, #0
   15a74:	beq	15b54 <__assert_fail@plt+0x4824>
   15a78:	ldr	r0, [sp, #4]
   15a7c:	bl	15010 <__assert_fail@plt+0x3ce0>
   15a80:	lsrs	r2, r0, #30
   15a84:	movne	r7, #1
   15a88:	moveq	r7, #0
   15a8c:	tst	r0, #536870912	; 0x20000000
   15a90:	bne	15b3c <__assert_fail@plt+0x480c>
   15a94:	cmp	r7, #0
   15a98:	bne	15b3c <__assert_fail@plt+0x480c>
   15a9c:	cmp	r0, #0
   15aa0:	str	r0, [r4, #8]
   15aa4:	beq	15b44 <__assert_fail@plt+0x4814>
   15aa8:	mov	r1, #8
   15aac:	bl	19be4 <__assert_fail@plt+0x88b4>
   15ab0:	cmp	r0, #0
   15ab4:	str	r0, [r4]
   15ab8:	beq	15b44 <__assert_fail@plt+0x4814>
   15abc:	ldr	r3, [r4, #8]
   15ac0:	str	r7, [r4, #12]
   15ac4:	str	r7, [r4, #16]
   15ac8:	str	r6, [r4, #24]
   15acc:	str	r5, [r4, #28]
   15ad0:	add	r0, r0, r3, lsl #3
   15ad4:	ldr	r3, [sp, #32]
   15ad8:	str	r0, [r4, #4]
   15adc:	str	r3, [r4, #32]
   15ae0:	str	r7, [r4, #36]	; 0x24
   15ae4:	mov	r0, r4
   15ae8:	add	sp, sp, #12
   15aec:	ldrd	r4, [sp]
   15af0:	ldrd	r6, [sp, #8]
   15af4:	add	sp, sp, #16
   15af8:	pop	{pc}		; (ldr pc, [sp], #4)
   15afc:	movw	r3, #46508	; 0xb5ac
   15b00:	movt	r3, #1
   15b04:	str	r3, [r4, #20]
   15b08:	bl	15224 <__assert_fail@plt+0x3ef4>
   15b0c:	cmp	r0, #0
   15b10:	beq	15b44 <__assert_fail@plt+0x4814>
   15b14:	vldr	s13, [pc, #64]	; 15b5c <__assert_fail@plt+0x482c>
   15b18:	vldr	s15, [sp, #4]
   15b1c:	vldr	s14, [pc, #60]	; 15b60 <__assert_fail@plt+0x4830>
   15b20:	vcvt.f32.u32	s12, s15
   15b24:	vdiv.f32	s15, s12, s13
   15b28:	vcmpe.f32	s15, s14
   15b2c:	vmrs	APSR_nzcv, fpscr
   15b30:	vcvtlt.u32.f32	s15, s15
   15b34:	vstrlt	s15, [sp, #4]
   15b38:	blt	15a78 <__assert_fail@plt+0x4748>
   15b3c:	mov	r3, #0
   15b40:	str	r3, [r4, #8]
   15b44:	mov	r0, r4
   15b48:	mov	r4, #0
   15b4c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   15b50:	b	15ae4 <__assert_fail@plt+0x47b4>
   15b54:	vldr	s13, [r7, #8]
   15b58:	b	15b18 <__assert_fail@plt+0x47e8>
   15b5c:	svccc	0x004ccccd
   15b60:	svcmi	0x00800000
   15b64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b68:	mov	r5, r0
   15b6c:	ldr	r2, [r0, #4]
   15b70:	strd	r6, [sp, #8]
   15b74:	ldr	r6, [r0]
   15b78:	str	r8, [sp, #16]
   15b7c:	str	lr, [sp, #20]
   15b80:	cmp	r6, r2
   15b84:	addcc	r6, r6, #8
   15b88:	movcc	r7, #0
   15b8c:	bcc	15ba0 <__assert_fail@plt+0x4870>
   15b90:	b	15c14 <__assert_fail@plt+0x48e4>
   15b94:	cmp	r2, r6
   15b98:	add	r6, r6, #8
   15b9c:	bls	15c14 <__assert_fail@plt+0x48e4>
   15ba0:	ldr	r3, [r6, #-8]
   15ba4:	cmp	r3, #0
   15ba8:	beq	15b94 <__assert_fail@plt+0x4864>
   15bac:	ldr	r4, [r6, #-4]
   15bb0:	ldr	r2, [r5, #32]
   15bb4:	cmp	r4, #0
   15bb8:	beq	15bec <__assert_fail@plt+0x48bc>
   15bbc:	cmp	r2, #0
   15bc0:	beq	15bd0 <__assert_fail@plt+0x48a0>
   15bc4:	ldr	r0, [r4]
   15bc8:	blx	r2
   15bcc:	ldr	r2, [r5, #32]
   15bd0:	ldr	r3, [r4, #4]
   15bd4:	ldr	r1, [r5, #36]	; 0x24
   15bd8:	str	r7, [r4]
   15bdc:	str	r1, [r4, #4]
   15be0:	str	r4, [r5, #36]	; 0x24
   15be4:	subs	r4, r3, #0
   15be8:	bne	15bbc <__assert_fail@plt+0x488c>
   15bec:	cmp	r2, #0
   15bf0:	beq	15bfc <__assert_fail@plt+0x48cc>
   15bf4:	ldr	r0, [r6, #-8]
   15bf8:	blx	r2
   15bfc:	str	r7, [r6, #-8]
   15c00:	str	r7, [r6, #-4]
   15c04:	ldr	r2, [r5, #4]
   15c08:	cmp	r2, r6
   15c0c:	add	r6, r6, #8
   15c10:	bhi	15ba0 <__assert_fail@plt+0x4870>
   15c14:	mov	r3, #0
   15c18:	ldrd	r6, [sp, #8]
   15c1c:	ldr	r8, [sp, #16]
   15c20:	str	r3, [r5, #12]
   15c24:	str	r3, [r5, #16]
   15c28:	ldrd	r4, [sp]
   15c2c:	add	sp, sp, #20
   15c30:	pop	{pc}		; (ldr pc, [sp], #4)
   15c34:	strd	r4, [sp, #-16]!
   15c38:	ldr	r2, [r0, #32]
   15c3c:	ldr	r5, [r0]
   15c40:	ldr	r3, [r0, #4]
   15c44:	cmp	r2, #0
   15c48:	str	r6, [sp, #8]
   15c4c:	mov	r6, r0
   15c50:	str	lr, [sp, #12]
   15c54:	beq	15cbc <__assert_fail@plt+0x498c>
   15c58:	ldr	r2, [r0, #16]
   15c5c:	cmp	r2, #0
   15c60:	beq	15cbc <__assert_fail@plt+0x498c>
   15c64:	cmp	r5, r3
   15c68:	bcc	15c7c <__assert_fail@plt+0x494c>
   15c6c:	b	15cf0 <__assert_fail@plt+0x49c0>
   15c70:	add	r5, r5, #8
   15c74:	cmp	r3, r5
   15c78:	bls	15cb8 <__assert_fail@plt+0x4988>
   15c7c:	ldr	r0, [r5]
   15c80:	cmp	r0, #0
   15c84:	beq	15c70 <__assert_fail@plt+0x4940>
   15c88:	mov	r4, r5
   15c8c:	b	15c94 <__assert_fail@plt+0x4964>
   15c90:	ldr	r0, [r4]
   15c94:	ldr	r3, [r6, #32]
   15c98:	blx	r3
   15c9c:	ldr	r4, [r4, #4]
   15ca0:	cmp	r4, #0
   15ca4:	bne	15c90 <__assert_fail@plt+0x4960>
   15ca8:	ldr	r3, [r6, #4]
   15cac:	add	r5, r5, #8
   15cb0:	cmp	r3, r5
   15cb4:	bhi	15c7c <__assert_fail@plt+0x494c>
   15cb8:	ldr	r5, [r6]
   15cbc:	cmp	r5, r3
   15cc0:	bcs	15cf0 <__assert_fail@plt+0x49c0>
   15cc4:	ldr	r0, [r5, #4]
   15cc8:	cmp	r0, #0
   15ccc:	beq	15ce4 <__assert_fail@plt+0x49b4>
   15cd0:	ldr	r4, [r0, #4]
   15cd4:	bl	12ce8 <__assert_fail@plt+0x19b8>
   15cd8:	subs	r0, r4, #0
   15cdc:	bne	15cd0 <__assert_fail@plt+0x49a0>
   15ce0:	ldr	r3, [r6, #4]
   15ce4:	add	r5, r5, #8
   15ce8:	cmp	r3, r5
   15cec:	bhi	15cc4 <__assert_fail@plt+0x4994>
   15cf0:	ldr	r0, [r6, #36]	; 0x24
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d0c <__assert_fail@plt+0x49dc>
   15cfc:	ldr	r4, [r0, #4]
   15d00:	bl	12ce8 <__assert_fail@plt+0x19b8>
   15d04:	subs	r0, r4, #0
   15d08:	bne	15cfc <__assert_fail@plt+0x49cc>
   15d0c:	ldr	r0, [r6]
   15d10:	bl	12ce8 <__assert_fail@plt+0x19b8>
   15d14:	mov	r0, r6
   15d18:	ldrd	r4, [sp]
   15d1c:	ldr	r6, [sp, #8]
   15d20:	ldr	lr, [sp, #12]
   15d24:	add	sp, sp, #16
   15d28:	b	12ce8 <__assert_fail@plt+0x19b8>
   15d2c:	ldr	r3, [r0, #20]
   15d30:	strd	r4, [sp, #-20]!	; 0xffffffec
   15d34:	ldrb	r2, [r3, #16]
   15d38:	strd	r6, [sp, #8]
   15d3c:	mov	r6, r0
   15d40:	str	lr, [sp, #16]
   15d44:	sub	sp, sp, #52	; 0x34
   15d48:	str	r1, [sp, #4]
   15d4c:	cmp	r2, #0
   15d50:	bne	15d7c <__assert_fail@plt+0x4a4c>
   15d54:	vmov	s15, r1
   15d58:	vldr	s13, [r3, #8]
   15d5c:	vldr	s14, [pc, #340]	; 15eb8 <__assert_fail@plt+0x4b88>
   15d60:	vcvt.f32.u32	s12, s15
   15d64:	vdiv.f32	s15, s12, s13
   15d68:	vcmpe.f32	s15, s14
   15d6c:	vmrs	APSR_nzcv, fpscr
   15d70:	vcvtlt.u32.f32	s15, s15
   15d74:	vstrlt	s15, [sp, #4]
   15d78:	bge	15dac <__assert_fail@plt+0x4a7c>
   15d7c:	ldr	r0, [sp, #4]
   15d80:	bl	15010 <__assert_fail@plt+0x3ce0>
   15d84:	lsrs	r3, r0, #30
   15d88:	mov	r5, r0
   15d8c:	movne	r4, #1
   15d90:	moveq	r4, #0
   15d94:	tst	r0, #536870912	; 0x20000000
   15d98:	movne	r4, #1
   15d9c:	cmp	r0, #0
   15da0:	moveq	r4, #1
   15da4:	cmp	r4, #0
   15da8:	beq	15dc8 <__assert_fail@plt+0x4a98>
   15dac:	mov	r4, #0
   15db0:	mov	r0, r4
   15db4:	add	sp, sp, #52	; 0x34
   15db8:	ldrd	r4, [sp]
   15dbc:	ldrd	r6, [sp, #8]
   15dc0:	add	sp, sp, #16
   15dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc8:	ldr	r3, [r6, #8]
   15dcc:	cmp	r3, r0
   15dd0:	beq	15e80 <__assert_fail@plt+0x4b50>
   15dd4:	mov	r1, #8
   15dd8:	bl	19be4 <__assert_fail@plt+0x88b4>
   15ddc:	cmp	r0, #0
   15de0:	str	r0, [sp, #8]
   15de4:	beq	15dac <__assert_fail@plt+0x4a7c>
   15de8:	add	r3, r0, r5, lsl #3
   15dec:	ldr	r7, [r6, #20]
   15df0:	mov	r2, r4
   15df4:	add	r0, sp, #8
   15df8:	mov	r1, r6
   15dfc:	ldr	lr, [r6, #28]
   15e00:	str	r3, [sp, #12]
   15e04:	str	r5, [sp, #16]
   15e08:	ldr	r5, [r6, #24]
   15e0c:	str	r4, [sp, #20]
   15e10:	ldr	ip, [r6, #32]
   15e14:	str	r4, [sp, #24]
   15e18:	ldr	r3, [r6, #36]	; 0x24
   15e1c:	str	r7, [sp, #28]
   15e20:	str	r5, [sp, #32]
   15e24:	str	lr, [sp, #36]	; 0x24
   15e28:	str	ip, [sp, #40]	; 0x28
   15e2c:	str	r3, [sp, #44]	; 0x2c
   15e30:	bl	152d8 <__assert_fail@plt+0x3fa8>
   15e34:	subs	r4, r0, #0
   15e38:	bne	15e88 <__assert_fail@plt+0x4b58>
   15e3c:	ldr	r3, [sp, #44]	; 0x2c
   15e40:	mov	r2, #1
   15e44:	add	r1, sp, #8
   15e48:	mov	r0, r6
   15e4c:	str	r3, [r6, #36]	; 0x24
   15e50:	bl	152d8 <__assert_fail@plt+0x3fa8>
   15e54:	cmp	r0, #0
   15e58:	beq	15eb4 <__assert_fail@plt+0x4b84>
   15e5c:	add	r1, sp, #8
   15e60:	mov	r0, r6
   15e64:	mov	r2, r4
   15e68:	bl	152d8 <__assert_fail@plt+0x3fa8>
   15e6c:	cmp	r0, #0
   15e70:	beq	15eb4 <__assert_fail@plt+0x4b84>
   15e74:	ldr	r0, [sp, #8]
   15e78:	bl	12ce8 <__assert_fail@plt+0x19b8>
   15e7c:	b	15db0 <__assert_fail@plt+0x4a80>
   15e80:	mov	r4, #1
   15e84:	b	15db0 <__assert_fail@plt+0x4a80>
   15e88:	ldr	r0, [r6]
   15e8c:	bl	12ce8 <__assert_fail@plt+0x19b8>
   15e90:	ldrd	r2, [sp, #8]
   15e94:	ldr	r1, [sp, #16]
   15e98:	strd	r2, [r6]
   15e9c:	ldr	r2, [sp, #20]
   15ea0:	str	r1, [r6, #8]
   15ea4:	ldr	r3, [sp, #44]	; 0x2c
   15ea8:	str	r2, [r6, #12]
   15eac:	str	r3, [r6, #36]	; 0x24
   15eb0:	b	15db0 <__assert_fail@plt+0x4a80>
   15eb4:	bl	112e8 <abort@plt>
   15eb8:	svcmi	0x00800000
   15ebc:	strd	r4, [sp, #-16]!
   15ec0:	str	r6, [sp, #8]
   15ec4:	subs	r6, r1, #0
   15ec8:	str	lr, [sp, #12]
   15ecc:	sub	sp, sp, #8
   15ed0:	beq	16050 <__assert_fail@plt+0x4d20>
   15ed4:	mov	r3, #0
   15ed8:	mov	r5, r2
   15edc:	add	r2, sp, #4
   15ee0:	mov	r4, r0
   15ee4:	bl	150fc <__assert_fail@plt+0x3dcc>
   15ee8:	subs	r3, r0, #0
   15eec:	beq	15f18 <__assert_fail@plt+0x4be8>
   15ef0:	cmp	r5, #0
   15ef4:	moveq	r0, r5
   15ef8:	beq	15f04 <__assert_fail@plt+0x4bd4>
   15efc:	mov	r0, #0
   15f00:	str	r3, [r5]
   15f04:	add	sp, sp, #8
   15f08:	ldrd	r4, [sp]
   15f0c:	ldr	r6, [sp, #8]
   15f10:	add	sp, sp, #12
   15f14:	pop	{pc}		; (ldr pc, [sp], #4)
   15f18:	vldr	s15, [r4, #8]
   15f1c:	vldr	s14, [r4, #12]
   15f20:	ldr	r3, [r4, #20]
   15f24:	vcvt.f32.u32	s15, s15
   15f28:	vcvt.f32.u32	s14, s14
   15f2c:	vldr	s13, [r3, #8]
   15f30:	vmul.f32	s15, s15, s13
   15f34:	vcmpe.f32	s14, s15
   15f38:	vmrs	APSR_nzcv, fpscr
   15f3c:	bgt	15f84 <__assert_fail@plt+0x4c54>
   15f40:	ldr	r2, [sp, #4]
   15f44:	ldr	r3, [r2]
   15f48:	cmp	r3, #0
   15f4c:	beq	15fe0 <__assert_fail@plt+0x4cb0>
   15f50:	ldr	r3, [r4, #36]	; 0x24
   15f54:	cmp	r3, #0
   15f58:	beq	16004 <__assert_fail@plt+0x4cd4>
   15f5c:	ldr	r1, [r3, #4]
   15f60:	str	r1, [r4, #36]	; 0x24
   15f64:	ldr	r1, [r4, #16]
   15f68:	mov	r0, #1
   15f6c:	ldr	ip, [r2, #4]
   15f70:	add	r1, r1, r0
   15f74:	stm	r3, {r6, ip}
   15f78:	str	r3, [r2, #4]
   15f7c:	str	r1, [r4, #16]
   15f80:	b	15f04 <__assert_fail@plt+0x4bd4>
   15f84:	add	r0, r4, #20
   15f88:	bl	15224 <__assert_fail@plt+0x3ef4>
   15f8c:	vldr	s15, [r4, #8]
   15f90:	vldr	s14, [r4, #12]
   15f94:	ldr	r3, [r4, #20]
   15f98:	vcvt.f32.u32	s15, s15
   15f9c:	vcvt.f32.u32	s14, s14
   15fa0:	vldr	s13, [r3, #8]
   15fa4:	vmul.f32	s12, s13, s15
   15fa8:	vcmpe.f32	s14, s12
   15fac:	vmrs	APSR_nzcv, fpscr
   15fb0:	ble	15f40 <__assert_fail@plt+0x4c10>
   15fb4:	vldr	s14, [r3, #12]
   15fb8:	ldrb	r2, [r3, #16]
   15fbc:	vmul.f32	s15, s15, s14
   15fc0:	vldr	s14, [pc, #140]	; 16054 <__assert_fail@plt+0x4d24>
   15fc4:	cmp	r2, #0
   15fc8:	vmuleq.f32	s15, s15, s13
   15fcc:	vcmpe.f32	s15, s14
   15fd0:	vmrs	APSR_nzcv, fpscr
   15fd4:	blt	1601c <__assert_fail@plt+0x4cec>
   15fd8:	mvn	r0, #0
   15fdc:	b	15f04 <__assert_fail@plt+0x4bd4>
   15fe0:	ldr	r1, [r4, #12]
   15fe4:	mov	r0, #1
   15fe8:	ldr	r3, [r4, #16]
   15fec:	str	r6, [r2]
   15ff0:	add	r2, r1, r0
   15ff4:	add	r3, r3, r0
   15ff8:	str	r2, [r4, #12]
   15ffc:	str	r3, [r4, #16]
   16000:	b	15f04 <__assert_fail@plt+0x4bd4>
   16004:	mov	r0, #8
   16008:	bl	19c58 <__assert_fail@plt+0x8928>
   1600c:	subs	r3, r0, #0
   16010:	beq	15fd8 <__assert_fail@plt+0x4ca8>
   16014:	ldr	r2, [sp, #4]
   16018:	b	15f64 <__assert_fail@plt+0x4c34>
   1601c:	vcvt.u32.f32	s15, s15
   16020:	mov	r0, r4
   16024:	vmov	r1, s15
   16028:	bl	15d2c <__assert_fail@plt+0x49fc>
   1602c:	cmp	r0, #0
   16030:	beq	15fd8 <__assert_fail@plt+0x4ca8>
   16034:	add	r2, sp, #4
   16038:	mov	r3, #0
   1603c:	mov	r1, r6
   16040:	mov	r0, r4
   16044:	bl	150fc <__assert_fail@plt+0x3dcc>
   16048:	cmp	r0, #0
   1604c:	beq	15f40 <__assert_fail@plt+0x4c10>
   16050:	bl	112e8 <abort@plt>
   16054:	svcmi	0x00800000
   16058:	str	r4, [sp, #-8]!
   1605c:	mov	r4, r1
   16060:	str	lr, [sp, #4]
   16064:	sub	sp, sp, #8
   16068:	add	r2, sp, #4
   1606c:	bl	15ebc <__assert_fail@plt+0x4b8c>
   16070:	cmn	r0, #1
   16074:	moveq	r0, #0
   16078:	beq	16088 <__assert_fail@plt+0x4d58>
   1607c:	cmp	r0, #0
   16080:	ldreq	r0, [sp, #4]
   16084:	movne	r0, r4
   16088:	add	sp, sp, #8
   1608c:	ldr	r4, [sp]
   16090:	add	sp, sp, #4
   16094:	pop	{pc}		; (ldr pc, [sp], #4)
   16098:	strd	r4, [sp, #-16]!
   1609c:	mov	r3, #1
   160a0:	mov	r4, r0
   160a4:	str	r6, [sp, #8]
   160a8:	str	lr, [sp, #12]
   160ac:	sub	sp, sp, #8
   160b0:	add	r2, sp, #4
   160b4:	bl	150fc <__assert_fail@plt+0x3dcc>
   160b8:	subs	r5, r0, #0
   160bc:	beq	160dc <__assert_fail@plt+0x4dac>
   160c0:	ldr	r2, [sp, #4]
   160c4:	ldr	r3, [r4, #16]
   160c8:	ldr	r2, [r2]
   160cc:	sub	r3, r3, #1
   160d0:	str	r3, [r4, #16]
   160d4:	cmp	r2, #0
   160d8:	beq	160f4 <__assert_fail@plt+0x4dc4>
   160dc:	mov	r0, r5
   160e0:	add	sp, sp, #8
   160e4:	ldrd	r4, [sp]
   160e8:	ldr	r6, [sp, #8]
   160ec:	add	sp, sp, #12
   160f0:	pop	{pc}		; (ldr pc, [sp], #4)
   160f4:	vldr	s15, [r4, #8]
   160f8:	ldr	r3, [r4, #12]
   160fc:	ldr	r2, [r4, #20]
   16100:	vcvt.f32.u32	s15, s15
   16104:	sub	r3, r3, #1
   16108:	vmov	s14, r3
   1610c:	vldr	s13, [r2]
   16110:	str	r3, [r4, #12]
   16114:	vmul.f32	s15, s15, s13
   16118:	vcvt.f32.u32	s14, s14
   1611c:	vcmpe.f32	s14, s15
   16120:	vmrs	APSR_nzcv, fpscr
   16124:	bpl	160dc <__assert_fail@plt+0x4dac>
   16128:	add	r0, r4, #20
   1612c:	bl	15224 <__assert_fail@plt+0x3ef4>
   16130:	vldr	s15, [r4, #8]
   16134:	vldr	s13, [r4, #12]
   16138:	ldr	r3, [r4, #20]
   1613c:	vcvt.f32.u32	s15, s15
   16140:	vcvt.f32.u32	s13, s13
   16144:	vldr	s14, [r3]
   16148:	vmul.f32	s14, s15, s14
   1614c:	vcmpe.f32	s13, s14
   16150:	vmrs	APSR_nzcv, fpscr
   16154:	bpl	160dc <__assert_fail@plt+0x4dac>
   16158:	ldrb	r2, [r3, #16]
   1615c:	mov	r0, r4
   16160:	vldr	s14, [r3, #4]
   16164:	cmp	r2, #0
   16168:	vmul.f32	s15, s15, s14
   1616c:	vldreq	s14, [r3, #8]
   16170:	vmuleq.f32	s15, s15, s14
   16174:	vcvt.u32.f32	s15, s15
   16178:	vmov	r1, s15
   1617c:	bl	15d2c <__assert_fail@plt+0x49fc>
   16180:	cmp	r0, #0
   16184:	bne	160dc <__assert_fail@plt+0x4dac>
   16188:	ldr	r0, [r4, #36]	; 0x24
   1618c:	cmp	r0, #0
   16190:	beq	161a4 <__assert_fail@plt+0x4e74>
   16194:	ldr	r6, [r0, #4]
   16198:	bl	12ce8 <__assert_fail@plt+0x19b8>
   1619c:	subs	r0, r6, #0
   161a0:	bne	16194 <__assert_fail@plt+0x4e64>
   161a4:	mov	r3, #0
   161a8:	str	r3, [r4, #36]	; 0x24
   161ac:	b	160dc <__assert_fail@plt+0x4dac>
   161b0:	b	16098 <__assert_fail@plt+0x4d68>
   161b4:	mov	r3, #0
   161b8:	mov	r2, #1
   161bc:	str	r1, [r0]
   161c0:	str	r1, [r0, #4]
   161c4:	str	r1, [r0, #8]
   161c8:	str	r1, [r0, #12]
   161cc:	str	r1, [r0, #16]
   161d0:	str	r3, [r0, #20]
   161d4:	str	r3, [r0, #24]
   161d8:	strb	r2, [r0, #28]
   161dc:	bx	lr
   161e0:	ldrb	r0, [r0, #28]
   161e4:	bx	lr
   161e8:	ldrb	ip, [r0, #28]
   161ec:	mov	r2, r0
   161f0:	ldr	r3, [r0, #20]
   161f4:	eor	ip, ip, #1
   161f8:	add	r3, ip, r3
   161fc:	and	r3, r3, #3
   16200:	ldr	r0, [r0, r3, lsl #2]
   16204:	str	r1, [r2, r3, lsl #2]
   16208:	ldr	r1, [r2, #24]
   1620c:	str	r3, [r2, #20]
   16210:	cmp	r1, r3
   16214:	bne	16224 <__assert_fail@plt+0x4ef4>
   16218:	add	ip, ip, r1
   1621c:	and	ip, ip, #3
   16220:	str	ip, [r2, #24]
   16224:	mov	r3, #0
   16228:	strb	r3, [r2, #28]
   1622c:	bx	lr
   16230:	ldrb	r3, [r0, #28]
   16234:	cmp	r3, #0
   16238:	bne	16274 <__assert_fail@plt+0x4f44>
   1623c:	ldr	r1, [r0, #16]
   16240:	ldr	r3, [r0, #20]
   16244:	ldr	r2, [r0, r3, lsl #2]
   16248:	str	r1, [r0, r3, lsl #2]
   1624c:	ldr	r1, [r0, #24]
   16250:	cmp	r3, r1
   16254:	moveq	r3, #1
   16258:	strbeq	r3, [r0, #28]
   1625c:	beq	1626c <__assert_fail@plt+0x4f3c>
   16260:	add	r3, r3, #3
   16264:	and	r3, r3, #3
   16268:	str	r3, [r0, #20]
   1626c:	mov	r0, r2
   16270:	bx	lr
   16274:	str	r4, [sp, #-8]!
   16278:	str	lr, [sp, #4]
   1627c:	bl	112e8 <abort@plt>
   16280:	mov	r3, #0
   16284:	strd	r4, [sp, #-16]!
   16288:	mov	r4, r0
   1628c:	mov	r5, r1
   16290:	str	r6, [sp, #8]
   16294:	add	r6, r2, #20
   16298:	str	lr, [sp, #12]
   1629c:	strb	r3, [r2, #20]
   162a0:	mov	r0, r4
   162a4:	mov	r1, r5
   162a8:	mov	r2, #10
   162ac:	mov	r3, #0
   162b0:	bl	1a4bc <__assert_fail@plt+0x918c>
   162b4:	add	ip, r2, #48	; 0x30
   162b8:	mov	r0, r4
   162bc:	mov	r1, r5
   162c0:	mov	r2, #10
   162c4:	mov	r3, #0
   162c8:	strb	ip, [r6, #-1]!
   162cc:	bl	1a4bc <__assert_fail@plt+0x918c>
   162d0:	cmp	r5, #0
   162d4:	mov	r5, r1
   162d8:	cmpeq	r4, #9
   162dc:	mov	r4, r0
   162e0:	bhi	162a0 <__assert_fail@plt+0x4f70>
   162e4:	mov	r0, r6
   162e8:	ldrd	r4, [sp]
   162ec:	ldr	r6, [sp, #8]
   162f0:	add	sp, sp, #12
   162f4:	pop	{pc}		; (ldr pc, [sp], #4)
   162f8:	push	{r2, r3}
   162fc:	push	{lr}		; (str lr, [sp, #-4]!)
   16300:	sub	sp, sp, #12
   16304:	ldr	r2, [sp, #16]
   16308:	ands	r3, r2, #64	; 0x40
   1630c:	bne	16328 <__assert_fail@plt+0x4ff8>
   16310:	bl	111d4 <openat64@plt>
   16314:	bl	18700 <__assert_fail@plt+0x73d0>
   16318:	add	sp, sp, #12
   1631c:	pop	{lr}		; (ldr lr, [sp], #4)
   16320:	add	sp, sp, #8
   16324:	bx	lr
   16328:	add	ip, sp, #20
   1632c:	ldr	r3, [sp, #20]
   16330:	str	ip, [sp, #4]
   16334:	b	16310 <__assert_fail@plt+0x4fe0>
   16338:	orr	r2, r2, #540672	; 0x84000
   1633c:	strd	r4, [sp, #-16]!
   16340:	orr	r2, r2, #2304	; 0x900
   16344:	str	r6, [sp, #8]
   16348:	mov	r6, r3
   1634c:	str	lr, [sp, #12]
   16350:	bl	162f8 <__assert_fail@plt+0x4fc8>
   16354:	subs	r5, r0, #0
   16358:	movlt	r4, #0
   1635c:	blt	16370 <__assert_fail@plt+0x5040>
   16360:	bl	11288 <fdopendir@plt>
   16364:	subs	r4, r0, #0
   16368:	beq	16384 <__assert_fail@plt+0x5054>
   1636c:	str	r5, [r6]
   16370:	mov	r0, r4
   16374:	ldrd	r4, [sp]
   16378:	ldr	r6, [sp, #8]
   1637c:	add	sp, sp, #12
   16380:	pop	{pc}		; (ldr pc, [sp], #4)
   16384:	bl	111ec <__errno_location@plt>
   16388:	mov	r6, r0
   1638c:	mov	r0, r5
   16390:	ldr	r5, [r6]
   16394:	bl	112f4 <close@plt>
   16398:	b	1636c <__assert_fail@plt+0x503c>
   1639c:	strd	r4, [sp, #-16]!
   163a0:	subs	r4, r0, #0
   163a4:	str	r6, [sp, #8]
   163a8:	str	lr, [sp, #12]
   163ac:	beq	16444 <__assert_fail@plt+0x5114>
   163b0:	mov	r1, #47	; 0x2f
   163b4:	bl	11264 <strrchr@plt>
   163b8:	subs	r5, r0, #0
   163bc:	beq	1641c <__assert_fail@plt+0x50ec>
   163c0:	add	r6, r5, #1
   163c4:	sub	r3, r6, r4
   163c8:	cmp	r3, #6
   163cc:	ble	1641c <__assert_fail@plt+0x50ec>
   163d0:	movw	r1, #46692	; 0xb664
   163d4:	movt	r1, #1
   163d8:	mov	r2, #7
   163dc:	sub	r0, r5, #6
   163e0:	bl	112dc <strncmp@plt>
   163e4:	cmp	r0, #0
   163e8:	bne	1641c <__assert_fail@plt+0x50ec>
   163ec:	movw	r1, #46700	; 0xb66c
   163f0:	movt	r1, #1
   163f4:	mov	r2, #3
   163f8:	mov	r0, r6
   163fc:	bl	112dc <strncmp@plt>
   16400:	cmp	r0, #0
   16404:	movne	r4, r6
   16408:	bne	1641c <__assert_fail@plt+0x50ec>
   1640c:	add	r4, r5, #4
   16410:	movw	r3, #49536	; 0xc180
   16414:	movt	r3, #2
   16418:	str	r4, [r3]
   1641c:	movw	r2, #49600	; 0xc1c0
   16420:	movt	r2, #2
   16424:	ldr	r6, [sp, #8]
   16428:	movw	r3, #49540	; 0xc184
   1642c:	movt	r3, #2
   16430:	str	r4, [r2]
   16434:	str	r4, [r3]
   16438:	ldrd	r4, [sp]
   1643c:	add	sp, sp, #12
   16440:	pop	{pc}		; (ldr pc, [sp], #4)
   16444:	movw	r3, #49552	; 0xc190
   16448:	movt	r3, #2
   1644c:	movw	r0, #46636	; 0xb62c
   16450:	movt	r0, #1
   16454:	ldr	r3, [r3]
   16458:	mov	r2, #55	; 0x37
   1645c:	mov	r1, #1
   16460:	bl	11108 <fwrite@plt>
   16464:	bl	112e8 <abort@plt>
   16468:	strd	r4, [sp, #-16]!
   1646c:	mov	r4, #0
   16470:	mov	r5, #0
   16474:	cmp	r1, #10
   16478:	str	r6, [sp, #8]
   1647c:	strd	r4, [r0]
   16480:	strd	r4, [r0, #8]
   16484:	str	lr, [sp, #12]
   16488:	strd	r4, [r0, #16]
   1648c:	strd	r4, [r0, #24]
   16490:	strd	r4, [r0, #32]
   16494:	strd	r4, [r0, #40]	; 0x28
   16498:	beq	164b0 <__assert_fail@plt+0x5180>
   1649c:	ldrd	r4, [sp]
   164a0:	str	r1, [r0]
   164a4:	ldr	r6, [sp, #8]
   164a8:	add	sp, sp, #12
   164ac:	pop	{pc}		; (ldr pc, [sp], #4)
   164b0:	bl	112e8 <abort@plt>
   164b4:	mov	r2, #5
   164b8:	strd	r4, [sp, #-16]!
   164bc:	mov	r5, r0
   164c0:	str	r6, [sp, #8]
   164c4:	mov	r6, r1
   164c8:	mov	r1, r0
   164cc:	mov	r0, #0
   164d0:	str	lr, [sp, #12]
   164d4:	bl	110c0 <dcgettext@plt>
   164d8:	cmp	r5, r0
   164dc:	mov	r4, r0
   164e0:	beq	164f8 <__assert_fail@plt+0x51c8>
   164e4:	mov	r0, r4
   164e8:	ldrd	r4, [sp]
   164ec:	ldr	r6, [sp, #8]
   164f0:	add	sp, sp, #12
   164f4:	pop	{pc}		; (ldr pc, [sp], #4)
   164f8:	bl	1a2a0 <__assert_fail@plt+0x8f70>
   164fc:	ldrb	r3, [r0]
   16500:	bic	r3, r3, #32
   16504:	cmp	r3, #85	; 0x55
   16508:	bne	16570 <__assert_fail@plt+0x5240>
   1650c:	ldrb	r3, [r0, #1]
   16510:	bic	r3, r3, #32
   16514:	cmp	r3, #84	; 0x54
   16518:	bne	165f0 <__assert_fail@plt+0x52c0>
   1651c:	ldrb	r3, [r0, #2]
   16520:	bic	r3, r3, #32
   16524:	cmp	r3, #70	; 0x46
   16528:	bne	165f0 <__assert_fail@plt+0x52c0>
   1652c:	ldrb	r3, [r0, #3]
   16530:	cmp	r3, #45	; 0x2d
   16534:	bne	165f0 <__assert_fail@plt+0x52c0>
   16538:	ldrb	r3, [r0, #4]
   1653c:	cmp	r3, #56	; 0x38
   16540:	bne	165f0 <__assert_fail@plt+0x52c0>
   16544:	ldrb	r3, [r0, #5]
   16548:	cmp	r3, #0
   1654c:	bne	165f0 <__assert_fail@plt+0x52c0>
   16550:	ldrb	r2, [r4]
   16554:	movw	r3, #46792	; 0xb6c8
   16558:	movt	r3, #1
   1655c:	movw	r4, #46804	; 0xb6d4
   16560:	movt	r4, #1
   16564:	cmp	r2, #96	; 0x60
   16568:	movne	r4, r3
   1656c:	b	164e4 <__assert_fail@plt+0x51b4>
   16570:	cmp	r3, #71	; 0x47
   16574:	bne	165f0 <__assert_fail@plt+0x52c0>
   16578:	ldrb	r3, [r0, #1]
   1657c:	bic	r3, r3, #32
   16580:	cmp	r3, #66	; 0x42
   16584:	bne	165f0 <__assert_fail@plt+0x52c0>
   16588:	ldrb	r3, [r0, #2]
   1658c:	cmp	r3, #49	; 0x31
   16590:	bne	165f0 <__assert_fail@plt+0x52c0>
   16594:	ldrb	r3, [r0, #3]
   16598:	cmp	r3, #56	; 0x38
   1659c:	bne	165f0 <__assert_fail@plt+0x52c0>
   165a0:	ldrb	r3, [r0, #4]
   165a4:	cmp	r3, #48	; 0x30
   165a8:	bne	165f0 <__assert_fail@plt+0x52c0>
   165ac:	ldrb	r3, [r0, #5]
   165b0:	cmp	r3, #51	; 0x33
   165b4:	bne	165f0 <__assert_fail@plt+0x52c0>
   165b8:	ldrb	r3, [r0, #6]
   165bc:	cmp	r3, #48	; 0x30
   165c0:	bne	165f0 <__assert_fail@plt+0x52c0>
   165c4:	ldrb	r3, [r0, #7]
   165c8:	cmp	r3, #0
   165cc:	bne	165f0 <__assert_fail@plt+0x52c0>
   165d0:	ldrb	r2, [r4]
   165d4:	movw	r3, #46796	; 0xb6cc
   165d8:	movt	r3, #1
   165dc:	movw	r4, #46800	; 0xb6d0
   165e0:	movt	r4, #1
   165e4:	cmp	r2, #96	; 0x60
   165e8:	movne	r4, r3
   165ec:	b	164e4 <__assert_fail@plt+0x51b4>
   165f0:	movw	r3, #46808	; 0xb6d8
   165f4:	movt	r3, #1
   165f8:	cmp	r6, #9
   165fc:	movw	r4, #46788	; 0xb6c4
   16600:	movt	r4, #1
   16604:	movne	r4, r3
   16608:	b	164e4 <__assert_fail@plt+0x51b4>
   1660c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16610:	strd	r6, [sp, #8]
   16614:	strd	r8, [sp, #16]
   16618:	strd	sl, [sp, #24]
   1661c:	mov	fp, r0
   16620:	mov	sl, r1
   16624:	str	lr, [sp, #32]
   16628:	sub	sp, sp, #116	; 0x74
   1662c:	ldr	r8, [sp, #152]	; 0x98
   16630:	str	r3, [sp, #28]
   16634:	ldr	r3, [sp, #156]	; 0x9c
   16638:	str	r2, [sp, #32]
   1663c:	and	r4, r3, #2
   16640:	ubfx	r3, r3, #1, #1
   16644:	str	r3, [sp, #44]	; 0x2c
   16648:	bl	11120 <__ctype_get_mb_cur_max@plt>
   1664c:	str	r0, [sp, #64]	; 0x40
   16650:	cmp	r8, #10
   16654:	ldrls	pc, [pc, r8, lsl #2]
   16658:	b	17dc8 <__assert_fail@plt+0x6a98>
   1665c:	andeq	r6, r1, r0, ror #20
   16660:	strdeq	r6, [r1], -ip
   16664:	ldrdeq	r7, [r1], -r8
   16668:	andeq	r6, r1, ip, lsl fp
   1666c:	andeq	r6, r1, r4, asr #19
   16670:	andeq	r6, r1, r0, lsl sl
   16674:	muleq	r1, r0, sl
   16678:	andeq	r6, r1, ip, asr #21
   1667c:	andeq	r6, r1, r8, lsl #13
   16680:	andeq	r6, r1, r8, lsl #13
   16684:	andeq	r6, r1, r8, lsl #13
   16688:	cmp	r8, #10
   1668c:	beq	166b8 <__assert_fail@plt+0x5388>
   16690:	mov	r1, r8
   16694:	movw	r0, #46812	; 0xb6dc
   16698:	movt	r0, #1
   1669c:	bl	164b4 <__assert_fail@plt+0x5184>
   166a0:	mov	r1, r8
   166a4:	str	r0, [sp, #164]	; 0xa4
   166a8:	movw	r0, #46808	; 0xb6d8
   166ac:	movt	r0, #1
   166b0:	bl	164b4 <__assert_fail@plt+0x5184>
   166b4:	str	r0, [sp, #168]	; 0xa8
   166b8:	cmp	r4, #0
   166bc:	movne	r4, #0
   166c0:	beq	17aa4 <__assert_fail@plt+0x6774>
   166c4:	mov	r3, #1
   166c8:	mov	r5, #0
   166cc:	ldr	r0, [sp, #168]	; 0xa8
   166d0:	str	r3, [sp, #36]	; 0x24
   166d4:	str	r3, [sp, #40]	; 0x28
   166d8:	str	r5, [sp, #68]	; 0x44
   166dc:	bl	111bc <strlen@plt>
   166e0:	ldr	r3, [sp, #168]	; 0xa8
   166e4:	str	r5, [sp, #48]	; 0x30
   166e8:	str	r0, [sp, #56]	; 0x38
   166ec:	str	r3, [sp, #60]	; 0x3c
   166f0:	str	r5, [sp, #72]	; 0x48
   166f4:	str	r8, [sp, #152]	; 0x98
   166f8:	mov	r8, fp
   166fc:	mov	r9, #0
   16700:	ldr	fp, [sp, #152]	; 0x98
   16704:	ldr	r3, [sp, #28]
   16708:	cmn	r3, #1
   1670c:	beq	16c6c <__assert_fail@plt+0x593c>
   16710:	ldr	r3, [sp, #28]
   16714:	subs	r6, r3, r9
   16718:	movne	r6, #1
   1671c:	cmp	r6, #0
   16720:	beq	16c84 <__assert_fail@plt+0x5954>
   16724:	ldr	r0, [sp, #32]
   16728:	ldr	r7, [sp, #40]	; 0x28
   1672c:	add	r3, r0, r9
   16730:	cmp	fp, #2
   16734:	moveq	r7, #0
   16738:	andne	r7, r7, #1
   1673c:	str	r3, [sp, #52]	; 0x34
   16740:	cmp	r7, #0
   16744:	beq	17120 <__assert_fail@plt+0x5df0>
   16748:	ldr	r2, [sp, #56]	; 0x38
   1674c:	cmp	r2, #0
   16750:	beq	173bc <__assert_fail@plt+0x608c>
   16754:	ldr	r1, [sp, #28]
   16758:	cmp	r2, #1
   1675c:	mov	r3, r2
   16760:	movls	r3, #0
   16764:	movhi	r3, #1
   16768:	add	r5, r9, r2
   1676c:	cmn	r1, #1
   16770:	movne	r3, #0
   16774:	cmp	r3, #0
   16778:	beq	16784 <__assert_fail@plt+0x5454>
   1677c:	bl	111bc <strlen@plt>
   16780:	str	r0, [sp, #28]
   16784:	ldr	r3, [sp, #28]
   16788:	cmp	r5, r3
   1678c:	bhi	173bc <__assert_fail@plt+0x608c>
   16790:	ldr	r0, [sp, #52]	; 0x34
   16794:	ldr	r2, [sp, #56]	; 0x38
   16798:	ldr	r1, [sp, #60]	; 0x3c
   1679c:	bl	1109c <memcmp@plt>
   167a0:	cmp	r0, #0
   167a4:	bne	173bc <__assert_fail@plt+0x608c>
   167a8:	ldr	r3, [sp, #44]	; 0x2c
   167ac:	cmp	r3, #0
   167b0:	bne	17cec <__assert_fail@plt+0x69bc>
   167b4:	ldr	r3, [sp, #52]	; 0x34
   167b8:	ldrb	r5, [r3]
   167bc:	cmp	r5, #126	; 0x7e
   167c0:	ldrls	pc, [pc, r5, lsl #2]
   167c4:	b	1707c <__assert_fail@plt+0x5d4c>
   167c8:	andeq	r6, r1, r0, lsl #31
   167cc:	andeq	r7, r1, ip, ror r0
   167d0:	andeq	r7, r1, ip, ror r0
   167d4:	andeq	r7, r1, ip, ror r0
   167d8:	andeq	r7, r1, ip, ror r0
   167dc:	andeq	r7, r1, ip, ror r0
   167e0:	andeq	r7, r1, ip, ror r0
   167e4:	andeq	r6, r1, r4, asr pc
   167e8:	andeq	r6, r1, ip, asr #30
   167ec:	muleq	r1, r4, lr
   167f0:	andeq	r6, r1, r0, asr #30
   167f4:	andeq	r6, r1, ip, lsl #29
   167f8:	andeq	r6, r1, ip, lsl pc
   167fc:	andeq	r6, r1, r8, ror #30
   16800:	andeq	r7, r1, ip, ror r0
   16804:	andeq	r7, r1, ip, ror r0
   16808:	andeq	r7, r1, ip, ror r0
   1680c:	andeq	r7, r1, ip, ror r0
   16810:	andeq	r7, r1, ip, ror r0
   16814:	andeq	r7, r1, ip, ror r0
   16818:	andeq	r7, r1, ip, ror r0
   1681c:	andeq	r7, r1, ip, ror r0
   16820:	andeq	r7, r1, ip, ror r0
   16824:	andeq	r7, r1, ip, ror r0
   16828:	andeq	r7, r1, ip, ror r0
   1682c:	andeq	r7, r1, ip, ror r0
   16830:	andeq	r7, r1, ip, ror r0
   16834:	andeq	r7, r1, ip, ror r0
   16838:	andeq	r7, r1, ip, ror r0
   1683c:	andeq	r7, r1, ip, ror r0
   16840:	andeq	r7, r1, ip, ror r0
   16844:	andeq	r7, r1, ip, ror r0
   16848:	andeq	r7, r1, r8, asr r0
   1684c:	andeq	r6, r1, r0, ror #30
   16850:	andeq	r6, r1, r0, ror #30
   16854:	andeq	r7, r1, ip, lsr r0
   16858:	andeq	r6, r1, r0, ror #30
   1685c:	andeq	r7, r1, r0, ror r0
   16860:	andeq	r6, r1, r0, ror #30
   16864:			; <UNDEFINED> instruction: 0x00016dbc
   16868:	andeq	r6, r1, r0, ror #30
   1686c:	andeq	r6, r1, r0, ror #30
   16870:	andeq	r6, r1, r0, ror #30
   16874:	andeq	r7, r1, r0, ror r0
   16878:	andeq	r7, r1, r0, ror r0
   1687c:	andeq	r7, r1, r0, ror r0
   16880:	andeq	r7, r1, r0, ror r0
   16884:	andeq	r7, r1, r0, ror r0
   16888:	andeq	r7, r1, r0, ror r0
   1688c:	andeq	r7, r1, r0, ror r0
   16890:	andeq	r7, r1, r0, ror r0
   16894:	andeq	r7, r1, r0, ror r0
   16898:	andeq	r7, r1, r0, ror r0
   1689c:	andeq	r7, r1, r0, ror r0
   168a0:	andeq	r7, r1, r0, ror r0
   168a4:	andeq	r7, r1, r0, ror r0
   168a8:	andeq	r7, r1, r0, ror r0
   168ac:	andeq	r7, r1, r0, ror r0
   168b0:	andeq	r7, r1, r0, ror r0
   168b4:	andeq	r6, r1, r0, ror #30
   168b8:	andeq	r6, r1, r0, ror #30
   168bc:	andeq	r6, r1, r0, ror #30
   168c0:	andeq	r6, r1, r0, ror #30
   168c4:	muleq	r1, r0, sp
   168c8:	andeq	r7, r1, ip, ror r0
   168cc:	andeq	r7, r1, r0, ror r0
   168d0:	andeq	r7, r1, r0, ror r0
   168d4:	andeq	r7, r1, r0, ror r0
   168d8:	andeq	r7, r1, r0, ror r0
   168dc:	andeq	r7, r1, r0, ror r0
   168e0:	andeq	r7, r1, r0, ror r0
   168e4:	andeq	r7, r1, r0, ror r0
   168e8:	andeq	r7, r1, r0, ror r0
   168ec:	andeq	r7, r1, r0, ror r0
   168f0:	andeq	r7, r1, r0, ror r0
   168f4:	andeq	r7, r1, r0, ror r0
   168f8:	andeq	r7, r1, r0, ror r0
   168fc:	andeq	r7, r1, r0, ror r0
   16900:	andeq	r7, r1, r0, ror r0
   16904:	andeq	r7, r1, r0, ror r0
   16908:	andeq	r7, r1, r0, ror r0
   1690c:	andeq	r7, r1, r0, ror r0
   16910:	andeq	r7, r1, r0, ror r0
   16914:	andeq	r7, r1, r0, ror r0
   16918:	andeq	r7, r1, r0, ror r0
   1691c:	andeq	r7, r1, r0, ror r0
   16920:	andeq	r7, r1, r0, ror r0
   16924:	andeq	r7, r1, r0, ror r0
   16928:	andeq	r7, r1, r0, ror r0
   1692c:	andeq	r7, r1, r0, ror r0
   16930:	andeq	r7, r1, r0, ror r0
   16934:	andeq	r6, r1, r0, ror #30
   16938:	andeq	r6, r1, r8, lsr sp
   1693c:	andeq	r7, r1, r0, ror r0
   16940:	andeq	r6, r1, r0, ror #30
   16944:	andeq	r7, r1, r0, ror r0
   16948:	andeq	r6, r1, r0, ror #30
   1694c:	andeq	r7, r1, r0, ror r0
   16950:	andeq	r7, r1, r0, ror r0
   16954:	andeq	r7, r1, r0, ror r0
   16958:	andeq	r7, r1, r0, ror r0
   1695c:	andeq	r7, r1, r0, ror r0
   16960:	andeq	r7, r1, r0, ror r0
   16964:	andeq	r7, r1, r0, ror r0
   16968:	andeq	r7, r1, r0, ror r0
   1696c:	andeq	r7, r1, r0, ror r0
   16970:	andeq	r7, r1, r0, ror r0
   16974:	andeq	r7, r1, r0, ror r0
   16978:	andeq	r7, r1, r0, ror r0
   1697c:	andeq	r7, r1, r0, ror r0
   16980:	andeq	r7, r1, r0, ror r0
   16984:	andeq	r7, r1, r0, ror r0
   16988:	andeq	r7, r1, r0, ror r0
   1698c:	andeq	r7, r1, r0, ror r0
   16990:	andeq	r7, r1, r0, ror r0
   16994:	andeq	r7, r1, r0, ror r0
   16998:	andeq	r7, r1, r0, ror r0
   1699c:	andeq	r7, r1, r0, ror r0
   169a0:	andeq	r7, r1, r0, ror r0
   169a4:	andeq	r7, r1, r0, ror r0
   169a8:	andeq	r7, r1, r0, ror r0
   169ac:	andeq	r7, r1, r0, ror r0
   169b0:	andeq	r7, r1, r0, ror r0
   169b4:	andeq	r6, r1, ip, asr fp
   169b8:	andeq	r6, r1, r0, ror #30
   169bc:	andeq	r6, r1, ip, asr fp
   169c0:	andeq	r7, r1, ip, lsr r0
   169c4:	cmp	r4, #0
   169c8:	moveq	r3, #1
   169cc:	streq	r3, [sp, #40]	; 0x28
   169d0:	beq	170e4 <__assert_fail@plt+0x5db4>
   169d4:	mov	r3, #0
   169d8:	mov	r2, #1
   169dc:	mov	r4, r3
   169e0:	str	r2, [sp, #36]	; 0x24
   169e4:	str	r2, [sp, #44]	; 0x2c
   169e8:	str	r2, [sp, #56]	; 0x38
   169ec:	str	r3, [sp, #68]	; 0x44
   169f0:	movw	r3, #46808	; 0xb6d8
   169f4:	movt	r3, #1
   169f8:	str	r4, [sp, #40]	; 0x28
   169fc:	mov	r8, #2
   16a00:	str	r4, [sp, #48]	; 0x30
   16a04:	str	r3, [sp, #60]	; 0x3c
   16a08:	str	r4, [sp, #72]	; 0x48
   16a0c:	b	166f4 <__assert_fail@plt+0x53c4>
   16a10:	cmp	r4, #0
   16a14:	bne	17c60 <__assert_fail@plt+0x6930>
   16a18:	cmp	sl, #0
   16a1c:	beq	17a20 <__assert_fail@plt+0x66f0>
   16a20:	mov	r3, #34	; 0x22
   16a24:	mov	r1, r4
   16a28:	mov	r2, #1
   16a2c:	strb	r3, [fp]
   16a30:	movw	r3, #46788	; 0xb6c4
   16a34:	movt	r3, #1
   16a38:	mov	r4, r2
   16a3c:	str	r2, [sp, #36]	; 0x24
   16a40:	str	r2, [sp, #40]	; 0x28
   16a44:	str	r1, [sp, #44]	; 0x2c
   16a48:	str	r1, [sp, #48]	; 0x30
   16a4c:	str	r2, [sp, #56]	; 0x38
   16a50:	str	r3, [sp, #60]	; 0x3c
   16a54:	str	r1, [sp, #68]	; 0x44
   16a58:	str	r1, [sp, #72]	; 0x48
   16a5c:	b	166f4 <__assert_fail@plt+0x53c4>
   16a60:	mov	r3, #0
   16a64:	mov	r4, r8
   16a68:	str	r3, [sp, #40]	; 0x28
   16a6c:	str	r3, [sp, #44]	; 0x2c
   16a70:	str	r3, [sp, #48]	; 0x30
   16a74:	str	r8, [sp, #56]	; 0x38
   16a78:	str	r3, [sp, #60]	; 0x3c
   16a7c:	str	r3, [sp, #68]	; 0x44
   16a80:	mov	r3, #1
   16a84:	str	r3, [sp, #36]	; 0x24
   16a88:	str	r8, [sp, #72]	; 0x48
   16a8c:	b	166f4 <__assert_fail@plt+0x53c4>
   16a90:	mov	r3, #1
   16a94:	mov	r2, #0
   16a98:	mov	r4, r2
   16a9c:	mov	r8, #5
   16aa0:	str	r3, [sp, #36]	; 0x24
   16aa4:	str	r3, [sp, #40]	; 0x28
   16aa8:	str	r3, [sp, #44]	; 0x2c
   16aac:	str	r2, [sp, #48]	; 0x30
   16ab0:	str	r3, [sp, #56]	; 0x38
   16ab4:	movw	r3, #46788	; 0xb6c4
   16ab8:	movt	r3, #1
   16abc:	str	r3, [sp, #60]	; 0x3c
   16ac0:	str	r2, [sp, #68]	; 0x44
   16ac4:	str	r2, [sp, #72]	; 0x48
   16ac8:	b	166f4 <__assert_fail@plt+0x53c4>
   16acc:	mov	r3, #0
   16ad0:	mov	r2, #1
   16ad4:	mov	r4, r3
   16ad8:	str	r2, [sp, #36]	; 0x24
   16adc:	str	r2, [sp, #40]	; 0x28
   16ae0:	str	r3, [sp, #44]	; 0x2c
   16ae4:	str	r3, [sp, #48]	; 0x30
   16ae8:	str	r3, [sp, #56]	; 0x38
   16aec:	str	r3, [sp, #60]	; 0x3c
   16af0:	str	r3, [sp, #68]	; 0x44
   16af4:	str	r3, [sp, #72]	; 0x48
   16af8:	b	166f4 <__assert_fail@plt+0x53c4>
   16afc:	mov	r2, #1
   16b00:	mov	r3, #0
   16b04:	mov	r4, r3
   16b08:	str	r2, [sp, #36]	; 0x24
   16b0c:	str	r2, [sp, #44]	; 0x2c
   16b10:	str	r8, [sp, #56]	; 0x38
   16b14:	str	r3, [sp, #68]	; 0x44
   16b18:	b	169f0 <__assert_fail@plt+0x56c0>
   16b1c:	mov	r3, #1
   16b20:	mov	r2, #0
   16b24:	mov	r4, r2
   16b28:	mov	r8, #2
   16b2c:	str	r3, [sp, #36]	; 0x24
   16b30:	str	r3, [sp, #40]	; 0x28
   16b34:	str	r3, [sp, #44]	; 0x2c
   16b38:	str	r2, [sp, #48]	; 0x30
   16b3c:	str	r3, [sp, #56]	; 0x38
   16b40:	movw	r3, #46808	; 0xb6d8
   16b44:	movt	r3, #1
   16b48:	str	r3, [sp, #60]	; 0x3c
   16b4c:	str	r2, [sp, #68]	; 0x44
   16b50:	str	r2, [sp, #72]	; 0x48
   16b54:	b	166f4 <__assert_fail@plt+0x53c4>
   16b58:	mov	r7, #0
   16b5c:	ldr	r3, [sp, #28]
   16b60:	cmn	r3, #1
   16b64:	beq	1763c <__assert_fail@plt+0x630c>
   16b68:	ldr	r3, [sp, #28]
   16b6c:	subs	r2, r3, #1
   16b70:	movne	r2, #1
   16b74:	sub	r3, fp, #2
   16b78:	cmp	r2, #0
   16b7c:	clz	r3, r3
   16b80:	lsr	r3, r3, #5
   16b84:	bne	16b90 <__assert_fail@plt+0x5860>
   16b88:	cmp	r9, #0
   16b8c:	beq	1739c <__assert_fail@plt+0x606c>
   16b90:	mov	r6, #0
   16b94:	ldr	r2, [sp, #40]	; 0x28
   16b98:	eor	r2, r2, #1
   16b9c:	orrs	r3, r3, r2
   16ba0:	bne	16d78 <__assert_fail@plt+0x5a48>
   16ba4:	ldr	r2, [sp, #160]	; 0xa0
   16ba8:	cmp	r2, #0
   16bac:	beq	16bcc <__assert_fail@plt+0x589c>
   16bb0:	ldr	r0, [sp, #160]	; 0xa0
   16bb4:	ubfx	r1, r5, #5, #8
   16bb8:	and	r2, r5, #31
   16bbc:	ldr	r1, [r0, r1, lsl #2]
   16bc0:	lsr	r2, r1, r2
   16bc4:	tst	r2, #1
   16bc8:	bne	16bd4 <__assert_fail@plt+0x58a4>
   16bcc:	cmp	r7, #0
   16bd0:	beq	16e44 <__assert_fail@plt+0x5b14>
   16bd4:	ldr	r2, [sp, #44]	; 0x2c
   16bd8:	sub	r3, fp, #2
   16bdc:	clz	r3, r3
   16be0:	lsr	r3, r3, #5
   16be4:	cmp	r2, #0
   16be8:	bne	17990 <__assert_fail@plt+0x6660>
   16bec:	ldr	r2, [sp, #48]	; 0x30
   16bf0:	eor	r2, r2, #1
   16bf4:	ands	r3, r3, r2
   16bf8:	beq	16c30 <__assert_fail@plt+0x5900>
   16bfc:	cmp	sl, r4
   16c00:	str	r3, [sp, #48]	; 0x30
   16c04:	movhi	r2, #39	; 0x27
   16c08:	strbhi	r2, [r8, r4]
   16c0c:	add	r2, r4, #1
   16c10:	cmp	sl, r2
   16c14:	movhi	r1, #36	; 0x24
   16c18:	strbhi	r1, [r8, r2]
   16c1c:	add	r2, r4, #2
   16c20:	add	r4, r4, #3
   16c24:	cmp	sl, r2
   16c28:	movhi	r1, #39	; 0x27
   16c2c:	strbhi	r1, [r8, r2]
   16c30:	cmp	r4, sl
   16c34:	add	r9, r9, #1
   16c38:	movcc	r3, #92	; 0x5c
   16c3c:	strbcc	r3, [r8, r4]
   16c40:	add	r4, r4, #1
   16c44:	cmp	r4, sl
   16c48:	ldr	r3, [sp, #36]	; 0x24
   16c4c:	strbcc	r5, [r8, r4]
   16c50:	cmp	r6, #0
   16c54:	add	r4, r4, #1
   16c58:	moveq	r3, #0
   16c5c:	str	r3, [sp, #36]	; 0x24
   16c60:	ldr	r3, [sp, #28]
   16c64:	cmn	r3, #1
   16c68:	bne	16710 <__assert_fail@plt+0x53e0>
   16c6c:	ldr	r3, [sp, #32]
   16c70:	ldrb	r6, [r3, r9]
   16c74:	adds	r6, r6, #0
   16c78:	movne	r6, #1
   16c7c:	cmp	r6, #0
   16c80:	bne	16724 <__assert_fail@plt+0x53f4>
   16c84:	str	fp, [sp, #152]	; 0x98
   16c88:	mov	fp, r8
   16c8c:	cmp	r4, #0
   16c90:	ldr	r1, [sp, #44]	; 0x2c
   16c94:	movne	r3, #0
   16c98:	ldr	r8, [sp, #152]	; 0x98
   16c9c:	sub	r2, r8, #2
   16ca0:	clz	r2, r2
   16ca4:	lsr	r2, r2, #5
   16ca8:	andeq	r3, r2, r1
   16cac:	cmp	r3, #0
   16cb0:	bne	17d6c <__assert_fail@plt+0x6a3c>
   16cb4:	eor	r3, r1, #1
   16cb8:	ands	r2, r2, r3
   16cbc:	beq	17c98 <__assert_fail@plt+0x6968>
   16cc0:	ldr	r3, [sp, #68]	; 0x44
   16cc4:	cmp	r3, #0
   16cc8:	beq	17c9c <__assert_fail@plt+0x696c>
   16ccc:	ldr	r3, [sp, #36]	; 0x24
   16cd0:	cmp	r3, #0
   16cd4:	bne	17d28 <__assert_fail@plt+0x69f8>
   16cd8:	ldr	r3, [sp, #72]	; 0x48
   16cdc:	adds	r3, r3, #0
   16ce0:	movne	r3, #1
   16ce4:	cmp	sl, #0
   16ce8:	movne	r3, #0
   16cec:	cmp	r3, #0
   16cf0:	ldreq	r2, [sp, #68]	; 0x44
   16cf4:	beq	17c9c <__assert_fail@plt+0x696c>
   16cf8:	ldr	r2, [sp, #72]	; 0x48
   16cfc:	str	r3, [sp, #68]	; 0x44
   16d00:	movw	r3, #46808	; 0xb6d8
   16d04:	movt	r3, #1
   16d08:	mov	r1, #39	; 0x27
   16d0c:	mov	r4, #1
   16d10:	ldr	sl, [sp, #72]	; 0x48
   16d14:	mov	r8, #2
   16d18:	str	r3, [sp, #60]	; 0x3c
   16d1c:	mov	r3, #0
   16d20:	strb	r1, [fp]
   16d24:	str	r3, [sp, #44]	; 0x2c
   16d28:	str	r4, [sp, #56]	; 0x38
   16d2c:	str	r2, [sp, #72]	; 0x48
   16d30:	b	166f4 <__assert_fail@plt+0x53c4>
   16d34:	mov	r7, #0
   16d38:	cmp	fp, #2
   16d3c:	beq	1761c <__assert_fail@plt+0x62ec>
   16d40:	ldr	r2, [sp, #40]	; 0x28
   16d44:	ldr	r3, [sp, #56]	; 0x38
   16d48:	ldr	r1, [sp, #44]	; 0x2c
   16d4c:	cmp	r3, #0
   16d50:	moveq	r3, #0
   16d54:	andne	r3, r2, r1
   16d58:	cmp	r3, #0
   16d5c:	moveq	r5, #92	; 0x5c
   16d60:	moveq	r3, r5
   16d64:	bne	17628 <__assert_fail@plt+0x62f8>
   16d68:	ldr	r2, [sp, #40]	; 0x28
   16d6c:	cmp	r2, #0
   16d70:	bne	17a64 <__assert_fail@plt+0x6734>
   16d74:	mov	r6, #0
   16d78:	ldr	r3, [sp, #44]	; 0x2c
   16d7c:	cmp	r3, #0
   16d80:	beq	17614 <__assert_fail@plt+0x62e4>
   16d84:	mov	r3, #0
   16d88:	b	16ba4 <__assert_fail@plt+0x5874>
   16d8c:	mov	r7, #0
   16d90:	cmp	fp, #2
   16d94:	beq	1768c <__assert_fail@plt+0x635c>
   16d98:	cmp	fp, #5
   16d9c:	beq	17650 <__assert_fail@plt+0x6320>
   16da0:	sub	r3, fp, #2
   16da4:	mov	r6, #0
   16da8:	clz	r3, r3
   16dac:	mov	r5, #63	; 0x3f
   16db0:	lsr	r3, r3, #5
   16db4:	b	16b94 <__assert_fail@plt+0x5864>
   16db8:	mov	r7, #0
   16dbc:	cmp	fp, #2
   16dc0:	movne	r3, #0
   16dc4:	movne	r5, #39	; 0x27
   16dc8:	strne	r6, [sp, #68]	; 0x44
   16dcc:	bne	16b94 <__assert_fail@plt+0x5864>
   16dd0:	ldr	r3, [sp, #44]	; 0x2c
   16dd4:	cmp	r3, #0
   16dd8:	bne	17a94 <__assert_fail@plt+0x6764>
   16ddc:	ldr	r3, [sp, #72]	; 0x48
   16de0:	cmp	sl, #0
   16de4:	clz	r3, r3
   16de8:	lsr	r3, r3, #5
   16dec:	moveq	r3, #0
   16df0:	cmp	r3, #0
   16df4:	bne	179c0 <__assert_fail@plt+0x6690>
   16df8:	cmp	sl, r4
   16dfc:	movhi	r3, #39	; 0x27
   16e00:	strbhi	r3, [r8, r4]
   16e04:	add	r3, r4, #1
   16e08:	cmp	sl, r3
   16e0c:	movhi	r2, #92	; 0x5c
   16e10:	strbhi	r2, [r8, r3]
   16e14:	add	r3, r4, #2
   16e18:	cmp	sl, r3
   16e1c:	bls	16e28 <__assert_fail@plt+0x5af8>
   16e20:	mov	r2, #39	; 0x27
   16e24:	strb	r2, [r8, r3]
   16e28:	mov	r3, #0
   16e2c:	cmp	r7, #0
   16e30:	add	r4, r4, #3
   16e34:	mov	r5, #39	; 0x27
   16e38:	str	r3, [sp, #48]	; 0x30
   16e3c:	str	r6, [sp, #68]	; 0x44
   16e40:	bne	16bd4 <__assert_fail@plt+0x58a4>
   16e44:	ldr	r2, [sp, #48]	; 0x30
   16e48:	eor	r3, r3, #1
   16e4c:	add	r9, r9, #1
   16e50:	and	r3, r3, r2
   16e54:	uxtb	r3, r3
   16e58:	cmp	r3, #0
   16e5c:	beq	16c44 <__assert_fail@plt+0x5914>
   16e60:	cmp	sl, r4
   16e64:	movhi	r3, #39	; 0x27
   16e68:	strbhi	r3, [r8, r4]
   16e6c:	add	r3, r4, #1
   16e70:	add	r4, r4, #2
   16e74:	cmp	sl, r3
   16e78:	movhi	r2, #39	; 0x27
   16e7c:	strbhi	r2, [r8, r3]
   16e80:	mov	r3, #0
   16e84:	str	r3, [sp, #48]	; 0x30
   16e88:	b	16c44 <__assert_fail@plt+0x5914>
   16e8c:	mov	r3, #118	; 0x76
   16e90:	b	16d68 <__assert_fail@plt+0x5a38>
   16e94:	mov	r3, #116	; 0x74
   16e98:	ldr	r2, [sp, #44]	; 0x2c
   16e9c:	cmp	fp, #2
   16ea0:	movne	r2, #0
   16ea4:	andeq	r2, r2, #1
   16ea8:	cmp	r2, #0
   16eac:	beq	16d68 <__assert_fail@plt+0x5a38>
   16eb0:	mov	fp, r8
   16eb4:	mov	r8, #2
   16eb8:	ldr	r3, [sp, #40]	; 0x28
   16ebc:	cmp	r3, #0
   16ec0:	movne	r8, #4
   16ec4:	mov	lr, #0
   16ec8:	mov	r0, fp
   16ecc:	ldr	r2, [sp, #32]
   16ed0:	ldr	r3, [sp, #156]	; 0x9c
   16ed4:	ldr	r1, [sp, #164]	; 0xa4
   16ed8:	bic	ip, r3, #2
   16edc:	ldr	r3, [sp, #28]
   16ee0:	stm	sp, {r8, ip, lr}
   16ee4:	ldr	ip, [sp, #168]	; 0xa8
   16ee8:	str	r1, [sp, #12]
   16eec:	mov	r1, sl
   16ef0:	str	ip, [sp, #16]
   16ef4:	bl	1660c <__assert_fail@plt+0x52dc>
   16ef8:	mov	r4, r0
   16efc:	mov	r0, r4
   16f00:	add	sp, sp, #116	; 0x74
   16f04:	ldrd	r4, [sp]
   16f08:	ldrd	r6, [sp, #8]
   16f0c:	ldrd	r8, [sp, #16]
   16f10:	ldrd	sl, [sp, #24]
   16f14:	add	sp, sp, #32
   16f18:	pop	{pc}		; (ldr pc, [sp], #4)
   16f1c:	mov	r5, #102	; 0x66
   16f20:	ldr	r2, [sp, #44]	; 0x2c
   16f24:	sub	r3, fp, #2
   16f28:	clz	r3, r3
   16f2c:	lsr	r3, r3, #5
   16f30:	cmp	r2, #0
   16f34:	bne	17990 <__assert_fail@plt+0x6660>
   16f38:	mov	r6, r2
   16f3c:	b	16c30 <__assert_fail@plt+0x5900>
   16f40:	mov	r5, #110	; 0x6e
   16f44:	mov	r6, #0
   16f48:	b	16bd4 <__assert_fail@plt+0x58a4>
   16f4c:	mov	r5, #98	; 0x62
   16f50:	b	16f20 <__assert_fail@plt+0x5bf0>
   16f54:	mov	r5, #97	; 0x61
   16f58:	b	16f20 <__assert_fail@plt+0x5bf0>
   16f5c:	mov	r7, #0
   16f60:	mov	r6, #0
   16f64:	b	16d84 <__assert_fail@plt+0x5a54>
   16f68:	mov	r5, #114	; 0x72
   16f6c:	b	16f44 <__assert_fail@plt+0x5c14>
   16f70:	ldr	r3, [sp, #44]	; 0x2c
   16f74:	cmp	r3, #0
   16f78:	bne	17d08 <__assert_fail@plt+0x69d8>
   16f7c:	mov	r7, r3
   16f80:	ldr	r3, [sp, #48]	; 0x30
   16f84:	sub	r2, fp, #2
   16f88:	clz	r2, r2
   16f8c:	lsr	r2, r2, #5
   16f90:	eor	r3, r3, #1
   16f94:	ands	r3, r2, r3
   16f98:	beq	179ac <__assert_fail@plt+0x667c>
   16f9c:	cmp	sl, r4
   16fa0:	movhi	r1, #39	; 0x27
   16fa4:	strbhi	r1, [r8, r4]
   16fa8:	add	r1, r4, #1
   16fac:	cmp	sl, r1
   16fb0:	movhi	r0, #36	; 0x24
   16fb4:	strbhi	r0, [r8, r1]
   16fb8:	add	r1, r4, #2
   16fbc:	cmp	sl, r1
   16fc0:	movhi	r0, #39	; 0x27
   16fc4:	strbhi	r0, [r8, r1]
   16fc8:	add	r1, r4, #3
   16fcc:	cmp	sl, r1
   16fd0:	bls	17a04 <__assert_fail@plt+0x66d4>
   16fd4:	mov	r4, r1
   16fd8:	mov	r1, #92	; 0x5c
   16fdc:	mov	r0, r4
   16fe0:	str	r3, [sp, #48]	; 0x30
   16fe4:	strb	r1, [r8, r4]
   16fe8:	cmp	fp, #2
   16fec:	add	r4, r4, #1
   16ff0:	beq	17a54 <__assert_fail@plt+0x6724>
   16ff4:	ldr	r1, [sp, #28]
   16ff8:	add	r3, r9, #1
   16ffc:	cmp	r3, r1
   17000:	bcs	17018 <__assert_fail@plt+0x5ce8>
   17004:	ldr	r1, [sp, #32]
   17008:	ldrb	r3, [r1, r3]
   1700c:	sub	r3, r3, #48	; 0x30
   17010:	cmp	r3, #9
   17014:	bls	17a6c <__assert_fail@plt+0x673c>
   17018:	mov	r5, #48	; 0x30
   1701c:	ldr	r3, [sp, #40]	; 0x28
   17020:	eor	r3, r3, #1
   17024:	orrs	r2, r2, r3
   17028:	mov	r3, r6
   1702c:	moveq	r6, r2
   17030:	beq	16ba4 <__assert_fail@plt+0x5874>
   17034:	mov	r6, #0
   17038:	b	16bcc <__assert_fail@plt+0x589c>
   1703c:	cmp	r9, #0
   17040:	mov	r2, r7
   17044:	bne	175e4 <__assert_fail@plt+0x62b4>
   17048:	mov	r6, r7
   1704c:	mov	r3, r9
   17050:	mov	r7, r2
   17054:	b	16b94 <__assert_fail@plt+0x5864>
   17058:	mov	r2, r7
   1705c:	mov	r6, r7
   17060:	mov	r3, #0
   17064:	mov	r7, r2
   17068:	mov	r5, #32
   1706c:	b	16b94 <__assert_fail@plt+0x5864>
   17070:	mov	r6, r7
   17074:	b	16d84 <__assert_fail@plt+0x5a54>
   17078:	mov	r7, #0
   1707c:	ldr	r3, [sp, #64]	; 0x40
   17080:	cmp	r3, #1
   17084:	bne	176a4 <__assert_fail@plt+0x6374>
   17088:	bl	111a4 <__ctype_b_loc@plt>
   1708c:	ldr	r2, [r0]
   17090:	sxth	r3, r5
   17094:	lsl	r3, r3, #1
   17098:	ldr	r1, [sp, #64]	; 0x40
   1709c:	ldrh	r3, [r2, r3]
   170a0:	mov	ip, r1
   170a4:	and	r3, r3, #16384	; 0x4000
   170a8:	cmp	r3, #0
   170ac:	ldr	r3, [sp, #40]	; 0x28
   170b0:	movne	r6, #1
   170b4:	moveq	r6, #0
   170b8:	movne	r2, #0
   170bc:	andeq	r2, r3, #1
   170c0:	cmp	r2, #0
   170c4:	bne	179ec <__assert_fail@plt+0x66bc>
   170c8:	sub	r3, fp, #2
   170cc:	clz	r3, r3
   170d0:	lsr	r3, r3, #5
   170d4:	b	16b94 <__assert_fail@plt+0x5864>
   170d8:	cmp	r4, #0
   170dc:	bne	17d7c <__assert_fail@plt+0x6a4c>
   170e0:	str	r4, [sp, #40]	; 0x28
   170e4:	cmp	sl, #0
   170e8:	bne	17dac <__assert_fail@plt+0x6a7c>
   170ec:	mov	r3, #1
   170f0:	movw	r2, #46808	; 0xb6d8
   170f4:	movt	r2, #1
   170f8:	mov	r4, r3
   170fc:	mov	r8, #2
   17100:	str	r3, [sp, #36]	; 0x24
   17104:	str	sl, [sp, #44]	; 0x2c
   17108:	str	sl, [sp, #48]	; 0x30
   1710c:	str	r3, [sp, #56]	; 0x38
   17110:	str	r2, [sp, #60]	; 0x3c
   17114:	str	sl, [sp, #68]	; 0x44
   17118:	str	sl, [sp, #72]	; 0x48
   1711c:	b	166f4 <__assert_fail@plt+0x53c4>
   17120:	ldr	r3, [sp, #32]
   17124:	ldrb	r5, [r3, r9]
   17128:	cmp	r5, #126	; 0x7e
   1712c:	ldrls	pc, [pc, r5, lsl #2]
   17130:	b	1707c <__assert_fail@plt+0x5d4c>
   17134:	andeq	r7, r1, r8, asr r3
   17138:	andeq	r7, r1, ip, ror r0
   1713c:	andeq	r7, r1, ip, ror r0
   17140:	andeq	r7, r1, ip, ror r0
   17144:	andeq	r7, r1, ip, ror r0
   17148:	andeq	r7, r1, ip, ror r0
   1714c:	andeq	r7, r1, ip, ror r0
   17150:	andeq	r7, r1, r0, asr r3
   17154:	andeq	r7, r1, r8, asr #6
   17158:	muleq	r1, r4, lr
   1715c:	andeq	r7, r1, r0, asr #6
   17160:	andeq	r6, r1, ip, lsl #29
   17164:	andeq	r7, r1, r8, lsr r3
   17168:	andeq	r7, r1, r0, lsr r3
   1716c:	andeq	r7, r1, ip, ror r0
   17170:	andeq	r7, r1, ip, ror r0
   17174:	andeq	r7, r1, ip, ror r0
   17178:	andeq	r7, r1, ip, ror r0
   1717c:	andeq	r7, r1, ip, ror r0
   17180:	andeq	r7, r1, ip, ror r0
   17184:	andeq	r7, r1, ip, ror r0
   17188:	andeq	r7, r1, ip, ror r0
   1718c:	andeq	r7, r1, ip, ror r0
   17190:	andeq	r7, r1, ip, ror r0
   17194:	andeq	r7, r1, ip, ror r0
   17198:	andeq	r7, r1, ip, ror r0
   1719c:	andeq	r7, r1, ip, ror r0
   171a0:	andeq	r7, r1, ip, ror r0
   171a4:	andeq	r7, r1, ip, ror r0
   171a8:	andeq	r7, r1, ip, ror r0
   171ac:	andeq	r7, r1, ip, ror r0
   171b0:	andeq	r7, r1, ip, ror r0
   171b4:	andeq	r7, r1, ip, lsr #7
   171b8:	andeq	r7, r1, ip, lsl #7
   171bc:	andeq	r7, r1, ip, lsl #7
   171c0:	andeq	r7, r1, ip, ror r3
   171c4:	andeq	r7, r1, ip, lsl #7
   171c8:	andeq	r7, r1, r8, asr #1
   171cc:	andeq	r7, r1, ip, lsl #7
   171d0:			; <UNDEFINED> instruction: 0x00016dbc
   171d4:	andeq	r7, r1, ip, lsl #7
   171d8:	andeq	r7, r1, ip, lsl #7
   171dc:	andeq	r7, r1, ip, lsl #7
   171e0:	andeq	r7, r1, r8, asr #1
   171e4:	andeq	r7, r1, r8, asr #1
   171e8:	andeq	r7, r1, r8, asr #1
   171ec:	andeq	r7, r1, r8, asr #1
   171f0:	andeq	r7, r1, r8, asr #1
   171f4:	andeq	r7, r1, r8, asr #1
   171f8:	andeq	r7, r1, r8, asr #1
   171fc:	andeq	r7, r1, r8, asr #1
   17200:	andeq	r7, r1, r8, asr #1
   17204:	andeq	r7, r1, r8, asr #1
   17208:	andeq	r7, r1, r8, asr #1
   1720c:	andeq	r7, r1, r8, asr #1
   17210:	andeq	r7, r1, r8, asr #1
   17214:	andeq	r7, r1, r8, asr #1
   17218:	andeq	r7, r1, r8, asr #1
   1721c:	andeq	r7, r1, r8, asr #1
   17220:	andeq	r7, r1, ip, lsl #7
   17224:	andeq	r7, r1, ip, lsl #7
   17228:	andeq	r7, r1, ip, lsl #7
   1722c:	andeq	r7, r1, ip, lsl #7
   17230:	muleq	r1, r0, sp
   17234:	andeq	r7, r1, ip, ror r0
   17238:	andeq	r7, r1, r8, asr #1
   1723c:	andeq	r7, r1, r8, asr #1
   17240:	andeq	r7, r1, r8, asr #1
   17244:	andeq	r7, r1, r8, asr #1
   17248:	andeq	r7, r1, r8, asr #1
   1724c:	andeq	r7, r1, r8, asr #1
   17250:	andeq	r7, r1, r8, asr #1
   17254:	andeq	r7, r1, r8, asr #1
   17258:	andeq	r7, r1, r8, asr #1
   1725c:	andeq	r7, r1, r8, asr #1
   17260:	andeq	r7, r1, r8, asr #1
   17264:	andeq	r7, r1, r8, asr #1
   17268:	andeq	r7, r1, r8, asr #1
   1726c:	andeq	r7, r1, r8, asr #1
   17270:	andeq	r7, r1, r8, asr #1
   17274:	andeq	r7, r1, r8, asr #1
   17278:	andeq	r7, r1, r8, asr #1
   1727c:	andeq	r7, r1, r8, asr #1
   17280:	andeq	r7, r1, r8, asr #1
   17284:	andeq	r7, r1, r8, asr #1
   17288:	andeq	r7, r1, r8, asr #1
   1728c:	andeq	r7, r1, r8, asr #1
   17290:	andeq	r7, r1, r8, asr #1
   17294:	andeq	r7, r1, r8, asr #1
   17298:	andeq	r7, r1, r8, asr #1
   1729c:	andeq	r7, r1, r8, asr #1
   172a0:	andeq	r7, r1, ip, lsl #7
   172a4:	andeq	r6, r1, r8, lsr sp
   172a8:	andeq	r7, r1, r8, asr #1
   172ac:	andeq	r7, r1, ip, lsl #7
   172b0:	andeq	r7, r1, r8, asr #1
   172b4:	andeq	r7, r1, ip, lsl #7
   172b8:	andeq	r7, r1, r8, asr #1
   172bc:	andeq	r7, r1, r8, asr #1
   172c0:	andeq	r7, r1, r8, asr #1
   172c4:	andeq	r7, r1, r8, asr #1
   172c8:	andeq	r7, r1, r8, asr #1
   172cc:	andeq	r7, r1, r8, asr #1
   172d0:	andeq	r7, r1, r8, asr #1
   172d4:	andeq	r7, r1, r8, asr #1
   172d8:	andeq	r7, r1, r8, asr #1
   172dc:	andeq	r7, r1, r8, asr #1
   172e0:	andeq	r7, r1, r8, asr #1
   172e4:	andeq	r7, r1, r8, asr #1
   172e8:	andeq	r7, r1, r8, asr #1
   172ec:	andeq	r7, r1, r8, asr #1
   172f0:	andeq	r7, r1, r8, asr #1
   172f4:	andeq	r7, r1, r8, asr #1
   172f8:	andeq	r7, r1, r8, asr #1
   172fc:	andeq	r7, r1, r8, asr #1
   17300:	andeq	r7, r1, r8, asr #1
   17304:	andeq	r7, r1, r8, asr #1
   17308:	andeq	r7, r1, r8, asr #1
   1730c:	andeq	r7, r1, r8, asr #1
   17310:	andeq	r7, r1, r8, asr #1
   17314:	andeq	r7, r1, r8, asr #1
   17318:	andeq	r7, r1, r8, asr #1
   1731c:	andeq	r7, r1, r8, asr #1
   17320:	andeq	r6, r1, ip, asr fp
   17324:	andeq	r7, r1, ip, lsl #7
   17328:	andeq	r6, r1, ip, asr fp
   1732c:	andeq	r7, r1, ip, ror r3
   17330:	mov	r3, #114	; 0x72
   17334:	b	16e98 <__assert_fail@plt+0x5b68>
   17338:	mov	r3, #102	; 0x66
   1733c:	b	16d68 <__assert_fail@plt+0x5a38>
   17340:	mov	r3, #110	; 0x6e
   17344:	b	16e98 <__assert_fail@plt+0x5b68>
   17348:	mov	r3, #98	; 0x62
   1734c:	b	16d68 <__assert_fail@plt+0x5a38>
   17350:	mov	r3, #97	; 0x61
   17354:	b	16d68 <__assert_fail@plt+0x5a38>
   17358:	ldr	r3, [sp, #40]	; 0x28
   1735c:	cmp	r3, #0
   17360:	bne	16f70 <__assert_fail@plt+0x5c40>
   17364:	ldr	r3, [sp, #156]	; 0x9c
   17368:	tst	r3, #1
   1736c:	addne	r9, r9, #1
   17370:	bne	16704 <__assert_fail@plt+0x53d4>
   17374:	ldr	r7, [sp, #40]	; 0x28
   17378:	b	16d74 <__assert_fail@plt+0x5a44>
   1737c:	sub	r3, fp, #2
   17380:	clz	r3, r3
   17384:	lsr	r3, r3, #5
   17388:	b	16b88 <__assert_fail@plt+0x5858>
   1738c:	sub	r3, fp, #2
   17390:	mov	r6, #0
   17394:	clz	r3, r3
   17398:	lsr	r3, r3, #5
   1739c:	ldr	r2, [sp, #44]	; 0x2c
   173a0:	tst	r2, r3
   173a4:	beq	16b94 <__assert_fail@plt+0x5864>
   173a8:	b	16eb0 <__assert_fail@plt+0x5b80>
   173ac:	sub	r3, fp, #2
   173b0:	clz	r3, r3
   173b4:	lsr	r3, r3, #5
   173b8:	b	1739c <__assert_fail@plt+0x606c>
   173bc:	ldr	r3, [sp, #52]	; 0x34
   173c0:	ldrb	r5, [r3]
   173c4:	cmp	r5, #126	; 0x7e
   173c8:	ldrls	pc, [pc, r5, lsl #2]
   173cc:	b	17078 <__assert_fail@plt+0x5d48>
   173d0:	andeq	r6, r1, r0, ror pc
   173d4:	andeq	r7, r1, r8, ror r0
   173d8:	andeq	r7, r1, r8, ror r0
   173dc:	andeq	r7, r1, r8, ror r0
   173e0:	andeq	r7, r1, r8, ror r0
   173e4:	andeq	r7, r1, r8, ror r0
   173e8:	andeq	r7, r1, r8, ror r0
   173ec:	andeq	r6, r1, r4, asr pc
   173f0:	andeq	r6, r1, ip, asr #30
   173f4:	andeq	r7, r1, r8, lsl #12
   173f8:	andeq	r6, r1, r0, asr #30
   173fc:	strdeq	r7, [r1], -ip
   17400:	andeq	r6, r1, ip, lsl pc
   17404:	andeq	r6, r1, r8, ror #30
   17408:	andeq	r7, r1, r8, ror r0
   1740c:	andeq	r7, r1, r8, ror r0
   17410:	andeq	r7, r1, r8, ror r0
   17414:	andeq	r7, r1, r8, ror r0
   17418:	andeq	r7, r1, r8, ror r0
   1741c:	andeq	r7, r1, r8, ror r0
   17420:	andeq	r7, r1, r8, ror r0
   17424:	andeq	r7, r1, r8, ror r0
   17428:	andeq	r7, r1, r8, ror r0
   1742c:	andeq	r7, r1, r8, ror r0
   17430:	andeq	r7, r1, r8, ror r0
   17434:	andeq	r7, r1, r8, ror r0
   17438:	andeq	r7, r1, r8, ror r0
   1743c:	andeq	r7, r1, r8, ror r0
   17440:	andeq	r7, r1, r8, ror r0
   17444:	andeq	r7, r1, r8, ror r0
   17448:	andeq	r7, r1, r8, ror r0
   1744c:	andeq	r7, r1, r8, ror r0
   17450:	strdeq	r7, [r1], -r4
   17454:	andeq	r6, r1, ip, asr pc
   17458:	andeq	r6, r1, ip, asr pc
   1745c:	ldrdeq	r7, [r1], -r8
   17460:	andeq	r6, r1, ip, asr pc
   17464:	andeq	r7, r1, ip, asr #11
   17468:	andeq	r6, r1, ip, asr pc
   1746c:			; <UNDEFINED> instruction: 0x00016db8
   17470:	andeq	r6, r1, ip, asr pc
   17474:	andeq	r6, r1, ip, asr pc
   17478:	andeq	r6, r1, ip, asr pc
   1747c:	andeq	r7, r1, ip, asr #11
   17480:	andeq	r7, r1, ip, asr #11
   17484:	andeq	r7, r1, ip, asr #11
   17488:	andeq	r7, r1, ip, asr #11
   1748c:	andeq	r7, r1, ip, asr #11
   17490:	andeq	r7, r1, ip, asr #11
   17494:	andeq	r7, r1, ip, asr #11
   17498:	andeq	r7, r1, ip, asr #11
   1749c:	andeq	r7, r1, ip, asr #11
   174a0:	andeq	r7, r1, ip, asr #11
   174a4:	andeq	r7, r1, ip, asr #11
   174a8:	andeq	r7, r1, ip, asr #11
   174ac:	andeq	r7, r1, ip, asr #11
   174b0:	andeq	r7, r1, ip, asr #11
   174b4:	andeq	r7, r1, ip, asr #11
   174b8:	andeq	r7, r1, ip, asr #11
   174bc:	andeq	r6, r1, ip, asr pc
   174c0:	andeq	r6, r1, ip, asr pc
   174c4:	andeq	r6, r1, ip, asr pc
   174c8:	andeq	r6, r1, ip, asr pc
   174cc:	andeq	r6, r1, ip, lsl #27
   174d0:	andeq	r7, r1, r8, ror r0
   174d4:	andeq	r7, r1, ip, asr #11
   174d8:	andeq	r7, r1, ip, asr #11
   174dc:	andeq	r7, r1, ip, asr #11
   174e0:	andeq	r7, r1, ip, asr #11
   174e4:	andeq	r7, r1, ip, asr #11
   174e8:	andeq	r7, r1, ip, asr #11
   174ec:	andeq	r7, r1, ip, asr #11
   174f0:	andeq	r7, r1, ip, asr #11
   174f4:	andeq	r7, r1, ip, asr #11
   174f8:	andeq	r7, r1, ip, asr #11
   174fc:	andeq	r7, r1, ip, asr #11
   17500:	andeq	r7, r1, ip, asr #11
   17504:	andeq	r7, r1, ip, asr #11
   17508:	andeq	r7, r1, ip, asr #11
   1750c:	andeq	r7, r1, ip, asr #11
   17510:	andeq	r7, r1, ip, asr #11
   17514:	andeq	r7, r1, ip, asr #11
   17518:	andeq	r7, r1, ip, asr #11
   1751c:	andeq	r7, r1, ip, asr #11
   17520:	andeq	r7, r1, ip, asr #11
   17524:	andeq	r7, r1, ip, asr #11
   17528:	andeq	r7, r1, ip, asr #11
   1752c:	andeq	r7, r1, ip, asr #11
   17530:	andeq	r7, r1, ip, asr #11
   17534:	andeq	r7, r1, ip, asr #11
   17538:	andeq	r7, r1, ip, asr #11
   1753c:	andeq	r6, r1, ip, asr pc
   17540:	andeq	r6, r1, r4, lsr sp
   17544:	andeq	r7, r1, ip, asr #11
   17548:	andeq	r6, r1, ip, asr pc
   1754c:	andeq	r7, r1, ip, asr #11
   17550:	andeq	r6, r1, ip, asr pc
   17554:	andeq	r7, r1, ip, asr #11
   17558:	andeq	r7, r1, ip, asr #11
   1755c:	andeq	r7, r1, ip, asr #11
   17560:	andeq	r7, r1, ip, asr #11
   17564:	andeq	r7, r1, ip, asr #11
   17568:	andeq	r7, r1, ip, asr #11
   1756c:	andeq	r7, r1, ip, asr #11
   17570:	andeq	r7, r1, ip, asr #11
   17574:	andeq	r7, r1, ip, asr #11
   17578:	andeq	r7, r1, ip, asr #11
   1757c:	andeq	r7, r1, ip, asr #11
   17580:	andeq	r7, r1, ip, asr #11
   17584:	andeq	r7, r1, ip, asr #11
   17588:	andeq	r7, r1, ip, asr #11
   1758c:	andeq	r7, r1, ip, asr #11
   17590:	andeq	r7, r1, ip, asr #11
   17594:	andeq	r7, r1, ip, asr #11
   17598:	andeq	r7, r1, ip, asr #11
   1759c:	andeq	r7, r1, ip, asr #11
   175a0:	andeq	r7, r1, ip, asr #11
   175a4:	andeq	r7, r1, ip, asr #11
   175a8:	andeq	r7, r1, ip, asr #11
   175ac:	andeq	r7, r1, ip, asr #11
   175b0:	andeq	r7, r1, ip, asr #11
   175b4:	andeq	r7, r1, ip, asr #11
   175b8:	andeq	r7, r1, ip, asr #11
   175bc:	andeq	r6, r1, r8, asr fp
   175c0:	andeq	r6, r1, ip, asr pc
   175c4:	andeq	r6, r1, r8, asr fp
   175c8:	ldrdeq	r7, [r1], -r8
   175cc:	mov	r6, r7
   175d0:	mov	r7, #0
   175d4:	b	16d84 <__assert_fail@plt+0x5a54>
   175d8:	cmp	r9, #0
   175dc:	mov	r2, #0
   175e0:	beq	17048 <__assert_fail@plt+0x5d18>
   175e4:	mov	r6, #0
   175e8:	mov	r7, r2
   175ec:	mov	r3, r6
   175f0:	b	16ba4 <__assert_fail@plt+0x5874>
   175f4:	mov	r2, #0
   175f8:	b	1705c <__assert_fail@plt+0x5d2c>
   175fc:	mov	r7, #0
   17600:	mov	r3, #118	; 0x76
   17604:	b	16d68 <__assert_fail@plt+0x5a38>
   17608:	mov	r7, #0
   1760c:	mov	r3, #116	; 0x74
   17610:	b	16e98 <__assert_fail@plt+0x5b68>
   17614:	ldr	r3, [sp, #44]	; 0x2c
   17618:	b	16bcc <__assert_fail@plt+0x589c>
   1761c:	ldr	r3, [sp, #44]	; 0x2c
   17620:	cmp	r3, #0
   17624:	bne	17a94 <__assert_fail@plt+0x6764>
   17628:	add	r9, r9, #1
   1762c:	mov	r6, #0
   17630:	ldr	r3, [sp, #48]	; 0x30
   17634:	mov	r5, #92	; 0x5c
   17638:	b	16e58 <__assert_fail@plt+0x5b28>
   1763c:	ldr	r3, [sp, #32]
   17640:	ldrb	r2, [r3, #1]
   17644:	adds	r2, r2, #0
   17648:	movne	r2, #1
   1764c:	b	16b74 <__assert_fail@plt+0x5844>
   17650:	ldr	r3, [sp, #156]	; 0x9c
   17654:	ands	r3, r3, #4
   17658:	beq	17680 <__assert_fail@plt+0x6350>
   1765c:	ldr	r2, [sp, #28]
   17660:	add	r3, r9, #2
   17664:	cmp	r3, r2
   17668:	bcs	1767c <__assert_fail@plt+0x634c>
   1766c:	ldr	r2, [sp, #52]	; 0x34
   17670:	ldrb	r5, [r2, #1]
   17674:	cmp	r5, #63	; 0x3f
   17678:	beq	17af8 <__assert_fail@plt+0x67c8>
   1767c:	mov	r3, #0
   17680:	mov	r5, #63	; 0x3f
   17684:	mov	r6, r3
   17688:	b	16b94 <__assert_fail@plt+0x5864>
   1768c:	ldr	r3, [sp, #44]	; 0x2c
   17690:	cmp	r3, #0
   17694:	bne	17a94 <__assert_fail@plt+0x6764>
   17698:	mov	r6, r3
   1769c:	mov	r5, #63	; 0x3f
   176a0:	b	16bcc <__assert_fail@plt+0x589c>
   176a4:	ldr	r1, [sp, #28]
   176a8:	mov	r2, #0
   176ac:	mov	r3, #0
   176b0:	strd	r2, [sp, #104]	; 0x68
   176b4:	cmn	r1, #1
   176b8:	bne	176c8 <__assert_fail@plt+0x6398>
   176bc:	ldr	r0, [sp, #32]
   176c0:	bl	111bc <strlen@plt>
   176c4:	str	r0, [sp, #28]
   176c8:	str	r8, [sp, #76]	; 0x4c
   176cc:	mov	r3, #0
   176d0:	str	sl, [sp, #80]	; 0x50
   176d4:	ldr	sl, [sp, #32]
   176d8:	str	r5, [sp, #84]	; 0x54
   176dc:	mov	r5, r3
   176e0:	ldr	r8, [sp, #44]	; 0x2c
   176e4:	str	r7, [sp, #88]	; 0x58
   176e8:	str	r4, [sp, #92]	; 0x5c
   176ec:	ldr	r2, [sp, #28]
   176f0:	add	r4, r9, r5
   176f4:	add	r3, sp, #104	; 0x68
   176f8:	add	r7, sl, r4
   176fc:	add	r0, sp, #100	; 0x64
   17700:	mov	r1, r7
   17704:	sub	r2, r2, r4
   17708:	bl	1a2ec <__assert_fail@plt+0x8fbc>
   1770c:	subs	r1, r0, #0
   17710:	beq	1775c <__assert_fail@plt+0x642c>
   17714:	cmn	r1, #1
   17718:	beq	17ad4 <__assert_fail@plt+0x67a4>
   1771c:	cmn	r1, #2
   17720:	beq	17bf4 <__assert_fail@plt+0x68c4>
   17724:	cmp	fp, #2
   17728:	movne	r3, #0
   1772c:	andeq	r3, r8, #1
   17730:	cmp	r3, #0
   17734:	bne	178c0 <__assert_fail@plt+0x6590>
   17738:	ldr	r0, [sp, #100]	; 0x64
   1773c:	add	r5, r5, r1
   17740:	bl	110f0 <iswprint@plt>
   17744:	cmp	r0, #0
   17748:	add	r0, sp, #104	; 0x68
   1774c:	moveq	r6, #0
   17750:	bl	11090 <mbsinit@plt>
   17754:	cmp	r0, #0
   17758:	beq	176ec <__assert_fail@plt+0x63bc>
   1775c:	ldr	r3, [sp, #40]	; 0x28
   17760:	mov	ip, r5
   17764:	eor	r2, r6, #1
   17768:	ldr	r8, [sp, #76]	; 0x4c
   1776c:	ldr	sl, [sp, #80]	; 0x50
   17770:	and	r2, r2, r3
   17774:	ldr	r5, [sp, #84]	; 0x54
   17778:	ldr	r7, [sp, #88]	; 0x58
   1777c:	ldr	r4, [sp, #92]	; 0x5c
   17780:	cmp	ip, #1
   17784:	bls	170c0 <__assert_fail@plt+0x5d90>
   17788:	add	r1, ip, r9
   1778c:	mov	r0, #39	; 0x27
   17790:	ldr	lr, [sp, #52]	; 0x34
   17794:	mov	ip, #0
   17798:	str	r6, [sp, #52]	; 0x34
   1779c:	ldr	r6, [sp, #48]	; 0x30
   177a0:	b	1785c <__assert_fail@plt+0x652c>
   177a4:	ldr	ip, [sp, #44]	; 0x2c
   177a8:	sub	r3, fp, #2
   177ac:	clz	r3, r3
   177b0:	lsr	r3, r3, #5
   177b4:	cmp	ip, #0
   177b8:	bne	179cc <__assert_fail@plt+0x669c>
   177bc:	eor	ip, r6, #1
   177c0:	ands	r3, r3, ip
   177c4:	beq	177f4 <__assert_fail@plt+0x64c4>
   177c8:	cmp	sl, r4
   177cc:	add	ip, r4, #1
   177d0:	strbhi	r0, [r8, r4]
   177d4:	cmp	sl, ip
   177d8:	movhi	r6, #36	; 0x24
   177dc:	strbhi	r6, [r8, ip]
   177e0:	add	ip, r4, #2
   177e4:	mov	r6, r3
   177e8:	cmp	sl, ip
   177ec:	add	r4, r4, #3
   177f0:	strbhi	r0, [r8, ip]
   177f4:	cmp	sl, r4
   177f8:	movhi	r3, #92	; 0x5c
   177fc:	strbhi	r3, [r8, r4]
   17800:	add	r3, r4, #1
   17804:	cmp	sl, r3
   17808:	bls	17818 <__assert_fail@plt+0x64e8>
   1780c:	lsr	ip, r5, #6
   17810:	add	ip, ip, #48	; 0x30
   17814:	strb	ip, [r8, r3]
   17818:	add	r3, r4, #2
   1781c:	cmp	sl, r3
   17820:	bls	17830 <__assert_fail@plt+0x6500>
   17824:	ubfx	ip, r5, #3, #3
   17828:	add	ip, ip, #48	; 0x30
   1782c:	strb	ip, [r8, r3]
   17830:	add	r9, r9, #1
   17834:	and	r5, r5, #7
   17838:	cmp	r9, r1
   1783c:	add	r5, r5, #48	; 0x30
   17840:	add	r4, r4, #3
   17844:	bcs	179f8 <__assert_fail@plt+0x66c8>
   17848:	mov	ip, r2
   1784c:	cmp	sl, r4
   17850:	strbhi	r5, [r8, r4]
   17854:	add	r4, r4, #1
   17858:	ldrb	r5, [lr, #1]!
   1785c:	cmp	r2, #0
   17860:	bne	177a4 <__assert_fail@plt+0x6474>
   17864:	eor	r3, ip, #1
   17868:	cmp	r7, #0
   1786c:	and	r3, r3, r6
   17870:	uxtb	r3, r3
   17874:	beq	17888 <__assert_fail@plt+0x6558>
   17878:	cmp	sl, r4
   1787c:	movhi	r7, #92	; 0x5c
   17880:	strbhi	r7, [r8, r4]
   17884:	add	r4, r4, #1
   17888:	add	r9, r9, #1
   1788c:	cmp	r9, r1
   17890:	bcs	179e0 <__assert_fail@plt+0x66b0>
   17894:	cmp	r3, #0
   17898:	beq	17a18 <__assert_fail@plt+0x66e8>
   1789c:	cmp	sl, r4
   178a0:	add	r3, r4, #1
   178a4:	mov	r7, #0
   178a8:	strbhi	r0, [r8, r4]
   178ac:	cmp	sl, r3
   178b0:	add	r4, r4, #2
   178b4:	mov	r6, r7
   178b8:	strbhi	r0, [r8, r3]
   178bc:	b	1784c <__assert_fail@plt+0x651c>
   178c0:	cmp	r1, #1
   178c4:	beq	17738 <__assert_fail@plt+0x6408>
   178c8:	add	r2, r4, #1
   178cc:	add	r3, sl, r1
   178d0:	add	r2, sl, r2
   178d4:	add	r4, r3, r4
   178d8:	ldrb	r3, [r2], #1
   178dc:	sub	r3, r3, #91	; 0x5b
   178e0:	cmp	r3, #33	; 0x21
   178e4:	ldrls	pc, [pc, r3, lsl #2]
   178e8:	b	17974 <__assert_fail@plt+0x6644>
   178ec:	andeq	r7, r1, r0, lsl #19
   178f0:	andeq	r7, r1, r0, lsl #19
   178f4:	andeq	r7, r1, r4, ror r9
   178f8:	andeq	r7, r1, r0, lsl #19
   178fc:	andeq	r7, r1, r4, ror r9
   17900:	andeq	r7, r1, r0, lsl #19
   17904:	andeq	r7, r1, r4, ror r9
   17908:	andeq	r7, r1, r4, ror r9
   1790c:	andeq	r7, r1, r4, ror r9
   17910:	andeq	r7, r1, r4, ror r9
   17914:	andeq	r7, r1, r4, ror r9
   17918:	andeq	r7, r1, r4, ror r9
   1791c:	andeq	r7, r1, r4, ror r9
   17920:	andeq	r7, r1, r4, ror r9
   17924:	andeq	r7, r1, r4, ror r9
   17928:	andeq	r7, r1, r4, ror r9
   1792c:	andeq	r7, r1, r4, ror r9
   17930:	andeq	r7, r1, r4, ror r9
   17934:	andeq	r7, r1, r4, ror r9
   17938:	andeq	r7, r1, r4, ror r9
   1793c:	andeq	r7, r1, r4, ror r9
   17940:	andeq	r7, r1, r4, ror r9
   17944:	andeq	r7, r1, r4, ror r9
   17948:	andeq	r7, r1, r4, ror r9
   1794c:	andeq	r7, r1, r4, ror r9
   17950:	andeq	r7, r1, r4, ror r9
   17954:	andeq	r7, r1, r4, ror r9
   17958:	andeq	r7, r1, r4, ror r9
   1795c:	andeq	r7, r1, r4, ror r9
   17960:	andeq	r7, r1, r4, ror r9
   17964:	andeq	r7, r1, r4, ror r9
   17968:	andeq	r7, r1, r4, ror r9
   1796c:	andeq	r7, r1, r4, ror r9
   17970:	andeq	r7, r1, r0, lsl #19
   17974:	cmp	r4, r2
   17978:	bne	178d8 <__assert_fail@plt+0x65a8>
   1797c:	b	17738 <__assert_fail@plt+0x6408>
   17980:	mov	r8, #2
   17984:	ldr	fp, [sp, #76]	; 0x4c
   17988:	ldr	sl, [sp, #80]	; 0x50
   1798c:	b	16eb8 <__assert_fail@plt+0x5b88>
   17990:	ldr	r2, [sp, #40]	; 0x28
   17994:	str	fp, [sp, #152]	; 0x98
   17998:	mov	fp, r8
   1799c:	ldr	r8, [sp, #152]	; 0x98
   179a0:	and	r2, r2, r3
   179a4:	str	r2, [sp, #40]	; 0x28
   179a8:	b	16eb8 <__assert_fail@plt+0x5b88>
   179ac:	cmp	sl, r4
   179b0:	movls	r0, r4
   179b4:	bls	16fe8 <__assert_fail@plt+0x5cb8>
   179b8:	ldr	r3, [sp, #48]	; 0x30
   179bc:	b	16fd8 <__assert_fail@plt+0x5ca8>
   179c0:	str	sl, [sp, #72]	; 0x48
   179c4:	ldr	sl, [sp, #44]	; 0x2c
   179c8:	b	16e28 <__assert_fail@plt+0x5af8>
   179cc:	str	r3, [sp, #40]	; 0x28
   179d0:	str	fp, [sp, #152]	; 0x98
   179d4:	mov	fp, r8
   179d8:	ldr	r8, [sp, #152]	; 0x98
   179dc:	b	16eb8 <__assert_fail@plt+0x5b88>
   179e0:	str	r6, [sp, #48]	; 0x30
   179e4:	ldr	r6, [sp, #52]	; 0x34
   179e8:	b	16e58 <__assert_fail@plt+0x5b28>
   179ec:	mov	r6, #0
   179f0:	ldr	r2, [sp, #40]	; 0x28
   179f4:	b	17788 <__assert_fail@plt+0x6458>
   179f8:	str	r6, [sp, #48]	; 0x30
   179fc:	ldr	r6, [sp, #52]	; 0x34
   17a00:	b	16c44 <__assert_fail@plt+0x5914>
   17a04:	add	r4, r4, #4
   17a08:	mov	r6, #0
   17a0c:	str	r3, [sp, #48]	; 0x30
   17a10:	mov	r5, #48	; 0x30
   17a14:	b	16bcc <__assert_fail@plt+0x589c>
   17a18:	mov	r7, r3
   17a1c:	b	1784c <__assert_fail@plt+0x651c>
   17a20:	mov	r3, #1
   17a24:	movw	r2, #46788	; 0xb6c4
   17a28:	movt	r2, #1
   17a2c:	mov	r4, r3
   17a30:	str	r3, [sp, #36]	; 0x24
   17a34:	str	r3, [sp, #40]	; 0x28
   17a38:	str	sl, [sp, #44]	; 0x2c
   17a3c:	str	sl, [sp, #48]	; 0x30
   17a40:	str	r3, [sp, #56]	; 0x38
   17a44:	str	r2, [sp, #60]	; 0x3c
   17a48:	str	sl, [sp, #68]	; 0x44
   17a4c:	str	sl, [sp, #72]	; 0x48
   17a50:	b	166f4 <__assert_fail@plt+0x53c4>
   17a54:	mov	r3, r6
   17a58:	mov	r5, #48	; 0x30
   17a5c:	mov	r6, #0
   17a60:	b	16bcc <__assert_fail@plt+0x589c>
   17a64:	mov	r5, r3
   17a68:	b	16f44 <__assert_fail@plt+0x5c14>
   17a6c:	cmp	sl, r4
   17a70:	mov	r5, #48	; 0x30
   17a74:	movhi	r3, #48	; 0x30
   17a78:	strbhi	r3, [r8, r4]
   17a7c:	add	r3, r0, #2
   17a80:	add	r4, r0, #3
   17a84:	cmp	sl, r3
   17a88:	movhi	r1, #48	; 0x30
   17a8c:	strbhi	r1, [r8, r3]
   17a90:	b	1701c <__assert_fail@plt+0x5cec>
   17a94:	str	fp, [sp, #152]	; 0x98
   17a98:	mov	fp, r8
   17a9c:	ldr	r8, [sp, #152]	; 0x98
   17aa0:	b	16eb8 <__assert_fail@plt+0x5b88>
   17aa4:	ldr	r3, [sp, #164]	; 0xa4
   17aa8:	ldrb	r3, [r3]
   17aac:	cmp	r3, #0
   17ab0:	beq	166c4 <__assert_fail@plt+0x5394>
   17ab4:	ldr	r2, [sp, #164]	; 0xa4
   17ab8:	cmp	sl, r4
   17abc:	strbhi	r3, [fp, r4]
   17ac0:	add	r4, r4, #1
   17ac4:	ldrb	r3, [r2, #1]!
   17ac8:	cmp	r3, #0
   17acc:	bne	17ab8 <__assert_fail@plt+0x6788>
   17ad0:	b	166c4 <__assert_fail@plt+0x5394>
   17ad4:	mov	ip, r5
   17ad8:	mov	r6, #0
   17adc:	ldr	r2, [sp, #40]	; 0x28
   17ae0:	ldr	r8, [sp, #76]	; 0x4c
   17ae4:	ldr	sl, [sp, #80]	; 0x50
   17ae8:	ldr	r5, [sp, #84]	; 0x54
   17aec:	ldr	r7, [sp, #88]	; 0x58
   17af0:	ldr	r4, [sp, #92]	; 0x5c
   17af4:	b	17780 <__assert_fail@plt+0x6450>
   17af8:	ldr	r2, [sp, #32]
   17afc:	ldrb	r1, [r2, r3]
   17b00:	sub	r2, r1, #33	; 0x21
   17b04:	cmp	r2, #29
   17b08:	ldrls	pc, [pc, r2, lsl #2]
   17b0c:	b	17be8 <__assert_fail@plt+0x68b8>
   17b10:	andeq	r7, r1, r8, lsl #23
   17b14:	andeq	r7, r1, r8, ror #23
   17b18:	andeq	r7, r1, r8, ror #23
   17b1c:	andeq	r7, r1, r8, ror #23
   17b20:	andeq	r7, r1, r8, ror #23
   17b24:	andeq	r7, r1, r8, ror #23
   17b28:	andeq	r7, r1, r8, lsl #23
   17b2c:	andeq	r7, r1, r8, lsl #23
   17b30:	andeq	r7, r1, r8, lsl #23
   17b34:	andeq	r7, r1, r8, ror #23
   17b38:	andeq	r7, r1, r8, ror #23
   17b3c:	andeq	r7, r1, r8, ror #23
   17b40:	andeq	r7, r1, r8, lsl #23
   17b44:	andeq	r7, r1, r8, ror #23
   17b48:	andeq	r7, r1, r8, lsl #23
   17b4c:	andeq	r7, r1, r8, ror #23
   17b50:	andeq	r7, r1, r8, ror #23
   17b54:	andeq	r7, r1, r8, ror #23
   17b58:	andeq	r7, r1, r8, ror #23
   17b5c:	andeq	r7, r1, r8, ror #23
   17b60:	andeq	r7, r1, r8, ror #23
   17b64:	andeq	r7, r1, r8, ror #23
   17b68:	andeq	r7, r1, r8, ror #23
   17b6c:	andeq	r7, r1, r8, ror #23
   17b70:	andeq	r7, r1, r8, ror #23
   17b74:	andeq	r7, r1, r8, ror #23
   17b78:	andeq	r7, r1, r8, ror #23
   17b7c:	andeq	r7, r1, r8, lsl #23
   17b80:	andeq	r7, r1, r8, lsl #23
   17b84:	andeq	r7, r1, r8, lsl #23
   17b88:	ldr	r2, [sp, #44]	; 0x2c
   17b8c:	cmp	r2, #0
   17b90:	bne	17cec <__assert_fail@plt+0x69bc>
   17b94:	cmp	sl, r4
   17b98:	mov	r5, r1
   17b9c:	movhi	r2, #63	; 0x3f
   17ba0:	mov	r9, r3
   17ba4:	strbhi	r2, [r8, r4]
   17ba8:	add	r2, r4, #1
   17bac:	cmp	sl, r2
   17bb0:	movhi	r0, #34	; 0x22
   17bb4:	strbhi	r0, [r8, r2]
   17bb8:	add	r2, r4, #2
   17bbc:	cmp	sl, r2
   17bc0:	movhi	r0, #34	; 0x22
   17bc4:	strbhi	r0, [r8, r2]
   17bc8:	add	r2, r4, #3
   17bcc:	add	r4, r4, #4
   17bd0:	cmp	sl, r2
   17bd4:	movhi	r0, #63	; 0x3f
   17bd8:	strbhi	r0, [r8, r2]
   17bdc:	mov	r2, #0
   17be0:	mov	r6, r2
   17be4:	b	1701c <__assert_fail@plt+0x5cec>
   17be8:	mov	r3, #0
   17bec:	mov	r6, r3
   17bf0:	b	16b94 <__assert_fail@plt+0x5864>
   17bf4:	ldr	r0, [sp, #28]
   17bf8:	mov	r1, r4
   17bfc:	mov	r2, r7
   17c00:	mov	r3, r5
   17c04:	mov	ip, r5
   17c08:	ldr	r8, [sp, #76]	; 0x4c
   17c0c:	ldr	sl, [sp, #80]	; 0x50
   17c10:	cmp	r1, r0
   17c14:	ldr	r5, [sp, #84]	; 0x54
   17c18:	ldr	r7, [sp, #88]	; 0x58
   17c1c:	ldr	r4, [sp, #92]	; 0x5c
   17c20:	bcs	17c54 <__assert_fail@plt+0x6924>
   17c24:	ldrb	r6, [r2]
   17c28:	cmp	r6, #0
   17c2c:	bne	17c40 <__assert_fail@plt+0x6910>
   17c30:	b	17d74 <__assert_fail@plt+0x6a44>
   17c34:	ldrb	r6, [r2, #1]!
   17c38:	cmp	r6, #0
   17c3c:	beq	17cfc <__assert_fail@plt+0x69cc>
   17c40:	add	r3, r3, #1
   17c44:	add	r1, r9, r3
   17c48:	cmp	r1, r0
   17c4c:	bcc	17c34 <__assert_fail@plt+0x6904>
   17c50:	mov	ip, r3
   17c54:	mov	r6, #0
   17c58:	ldr	r2, [sp, #40]	; 0x28
   17c5c:	b	17780 <__assert_fail@plt+0x6450>
   17c60:	mov	r3, #1
   17c64:	mov	r2, #0
   17c68:	mov	r4, r2
   17c6c:	str	r3, [sp, #36]	; 0x24
   17c70:	str	r3, [sp, #40]	; 0x28
   17c74:	str	r3, [sp, #44]	; 0x2c
   17c78:	str	r2, [sp, #48]	; 0x30
   17c7c:	str	r3, [sp, #56]	; 0x38
   17c80:	movw	r3, #46788	; 0xb6c4
   17c84:	movt	r3, #1
   17c88:	str	r3, [sp, #60]	; 0x3c
   17c8c:	str	r2, [sp, #68]	; 0x44
   17c90:	str	r2, [sp, #72]	; 0x48
   17c94:	b	166f4 <__assert_fail@plt+0x53c4>
   17c98:	mov	r2, r3
   17c9c:	ldr	r3, [sp, #60]	; 0x3c
   17ca0:	cmp	r3, #0
   17ca4:	moveq	r2, #0
   17ca8:	andne	r2, r2, #1
   17cac:	cmp	r2, #0
   17cb0:	beq	17cdc <__assert_fail@plt+0x69ac>
   17cb4:	mov	r2, r3
   17cb8:	ldrb	r3, [r3]
   17cbc:	cmp	r3, #0
   17cc0:	beq	17cdc <__assert_fail@plt+0x69ac>
   17cc4:	cmp	sl, r4
   17cc8:	strbhi	r3, [fp, r4]
   17ccc:	add	r4, r4, #1
   17cd0:	ldrb	r3, [r2, #1]!
   17cd4:	cmp	r3, #0
   17cd8:	bne	17cc4 <__assert_fail@plt+0x6994>
   17cdc:	cmp	sl, r4
   17ce0:	movhi	r3, #0
   17ce4:	strbhi	r3, [fp, r4]
   17ce8:	b	16efc <__assert_fail@plt+0x5bcc>
   17cec:	str	fp, [sp, #152]	; 0x98
   17cf0:	mov	fp, r8
   17cf4:	ldr	r8, [sp, #152]	; 0x98
   17cf8:	b	16ec4 <__assert_fail@plt+0x5b94>
   17cfc:	mov	ip, r3
   17d00:	ldr	r2, [sp, #40]	; 0x28
   17d04:	b	17780 <__assert_fail@plt+0x6450>
   17d08:	str	fp, [sp, #152]	; 0x98
   17d0c:	mov	fp, r8
   17d10:	ldr	r8, [sp, #152]	; 0x98
   17d14:	sub	r3, r8, #2
   17d18:	clz	r3, r3
   17d1c:	lsr	r3, r3, #5
   17d20:	str	r3, [sp, #40]	; 0x28
   17d24:	b	16eb8 <__assert_fail@plt+0x5b88>
   17d28:	mov	ip, #5
   17d2c:	ldr	r3, [sp, #28]
   17d30:	str	ip, [sp]
   17d34:	ldr	r2, [sp, #156]	; 0x9c
   17d38:	ldr	ip, [sp, #164]	; 0xa4
   17d3c:	ldr	r0, [sp, #160]	; 0xa0
   17d40:	str	r2, [sp, #4]
   17d44:	ldr	r2, [sp, #32]
   17d48:	ldr	r1, [sp, #72]	; 0x48
   17d4c:	str	ip, [sp, #12]
   17d50:	ldr	ip, [sp, #168]	; 0xa8
   17d54:	str	r0, [sp, #8]
   17d58:	mov	r0, fp
   17d5c:	str	ip, [sp, #16]
   17d60:	bl	1660c <__assert_fail@plt+0x52dc>
   17d64:	mov	r4, r0
   17d68:	b	16efc <__assert_fail@plt+0x5bcc>
   17d6c:	mov	r8, #2
   17d70:	b	16eb8 <__assert_fail@plt+0x5b88>
   17d74:	ldr	r2, [sp, #40]	; 0x28
   17d78:	b	17780 <__assert_fail@plt+0x6450>
   17d7c:	mov	r3, #0
   17d80:	mov	r2, #1
   17d84:	mov	r4, r3
   17d88:	strd	r2, [sp, #36]	; 0x24
   17d8c:	strd	r2, [sp, #44]	; 0x2c
   17d90:	str	r2, [sp, #56]	; 0x38
   17d94:	str	r3, [sp, #68]	; 0x44
   17d98:	str	r3, [sp, #72]	; 0x48
   17d9c:	movw	r3, #46808	; 0xb6d8
   17da0:	movt	r3, #1
   17da4:	str	r3, [sp, #60]	; 0x3c
   17da8:	b	166f4 <__assert_fail@plt+0x53c4>
   17dac:	mov	r3, #0
   17db0:	mov	r1, #1
   17db4:	mov	r2, r3
   17db8:	str	r1, [sp, #36]	; 0x24
   17dbc:	str	r3, [sp, #48]	; 0x30
   17dc0:	str	sl, [sp, #72]	; 0x48
   17dc4:	b	16cfc <__assert_fail@plt+0x59cc>
   17dc8:	bl	112e8 <abort@plt>
   17dcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17dd0:	mov	r4, r0
   17dd4:	mov	r5, r3
   17dd8:	strd	r6, [sp, #8]
   17ddc:	movw	r7, #49468	; 0xc13c
   17de0:	movt	r7, #2
   17de4:	strd	r8, [sp, #16]
   17de8:	strd	sl, [sp, #24]
   17dec:	mov	sl, r1
   17df0:	mov	fp, r2
   17df4:	str	lr, [sp, #32]
   17df8:	sub	sp, sp, #60	; 0x3c
   17dfc:	bl	111ec <__errno_location@plt>
   17e00:	mov	r8, r0
   17e04:	cmn	r4, #-2147483647	; 0x80000001
   17e08:	ldr	r6, [r7]
   17e0c:	movne	r0, #0
   17e10:	moveq	r0, #1
   17e14:	ldr	r3, [r8]
   17e18:	orrs	r0, r0, r4, lsr #31
   17e1c:	str	r3, [sp, #28]
   17e20:	bne	17fb0 <__assert_fail@plt+0x6c80>
   17e24:	ldr	r3, [r7, #4]
   17e28:	cmp	r3, r4
   17e2c:	bgt	17e8c <__assert_fail@plt+0x6b5c>
   17e30:	add	r1, r7, #8
   17e34:	sub	r2, r4, r3
   17e38:	str	r3, [sp, #52]	; 0x34
   17e3c:	cmp	r6, r1
   17e40:	add	r2, r2, #1
   17e44:	beq	17f88 <__assert_fail@plt+0x6c58>
   17e48:	mov	r1, #8
   17e4c:	mov	r0, r6
   17e50:	mvn	r3, #-2147483648	; 0x80000000
   17e54:	str	r1, [sp]
   17e58:	add	r1, sp, #52	; 0x34
   17e5c:	bl	18ee8 <__assert_fail@plt+0x7bb8>
   17e60:	mov	r6, r0
   17e64:	str	r0, [r7]
   17e68:	ldr	r0, [r7, #4]
   17e6c:	mov	r1, #0
   17e70:	ldr	r2, [sp, #52]	; 0x34
   17e74:	sub	r2, r2, r0
   17e78:	add	r0, r6, r0, lsl #3
   17e7c:	lsl	r2, r2, #3
   17e80:	bl	11204 <memset@plt>
   17e84:	ldr	r3, [sp, #52]	; 0x34
   17e88:	str	r3, [r7, #4]
   17e8c:	ldr	r1, [r5, #4]
   17e90:	add	r0, r6, r4, lsl #3
   17e94:	add	ip, r5, #8
   17e98:	mov	r3, fp
   17e9c:	mov	r2, sl
   17ea0:	ldr	r7, [r0, #4]
   17ea4:	str	r0, [sp, #36]	; 0x24
   17ea8:	str	ip, [sp, #40]	; 0x28
   17eac:	orr	r0, r1, #1
   17eb0:	ldr	r9, [r6, r4, lsl #3]
   17eb4:	str	ip, [sp, #8]
   17eb8:	ldr	lr, [r5, #44]	; 0x2c
   17ebc:	str	r0, [sp, #4]
   17ec0:	ldr	ip, [r5]
   17ec4:	mov	r1, r9
   17ec8:	str	ip, [sp, #32]
   17ecc:	ldr	ip, [r5, #40]	; 0x28
   17ed0:	str	ip, [sp, #12]
   17ed4:	ldr	ip, [sp, #32]
   17ed8:	str	lr, [sp, #16]
   17edc:	str	r0, [sp, #44]	; 0x2c
   17ee0:	mov	r0, r7
   17ee4:	str	ip, [sp]
   17ee8:	bl	1660c <__assert_fail@plt+0x52dc>
   17eec:	cmp	r9, r0
   17ef0:	bhi	17f60 <__assert_fail@plt+0x6c30>
   17ef4:	add	r9, r0, #1
   17ef8:	movw	r3, #49604	; 0xc1c4
   17efc:	movt	r3, #2
   17f00:	cmp	r7, r3
   17f04:	str	r9, [r6, r4, lsl #3]
   17f08:	beq	17f14 <__assert_fail@plt+0x6be4>
   17f0c:	mov	r0, r7
   17f10:	bl	12ce8 <__assert_fail@plt+0x19b8>
   17f14:	mov	r0, r9
   17f18:	bl	18d38 <__assert_fail@plt+0x7a08>
   17f1c:	ldr	ip, [r5]
   17f20:	mov	r3, fp
   17f24:	mov	r2, sl
   17f28:	mov	r1, r9
   17f2c:	mov	r7, r0
   17f30:	ldr	lr, [sp, #36]	; 0x24
   17f34:	ldr	r4, [r5, #40]	; 0x28
   17f38:	str	r0, [lr, #4]
   17f3c:	ldr	lr, [r5, #44]	; 0x2c
   17f40:	str	ip, [sp]
   17f44:	ldr	ip, [sp, #44]	; 0x2c
   17f48:	str	ip, [sp, #4]
   17f4c:	ldr	ip, [sp, #40]	; 0x28
   17f50:	str	r4, [sp, #12]
   17f54:	str	lr, [sp, #16]
   17f58:	str	ip, [sp, #8]
   17f5c:	bl	1660c <__assert_fail@plt+0x52dc>
   17f60:	ldr	r3, [sp, #28]
   17f64:	mov	r0, r7
   17f68:	str	r3, [r8]
   17f6c:	add	sp, sp, #60	; 0x3c
   17f70:	ldrd	r4, [sp]
   17f74:	ldrd	r6, [sp, #8]
   17f78:	ldrd	r8, [sp, #16]
   17f7c:	ldrd	sl, [sp, #24]
   17f80:	add	sp, sp, #32
   17f84:	pop	{pc}		; (ldr pc, [sp], #4)
   17f88:	mov	r1, #8
   17f8c:	mvn	r3, #-2147483648	; 0x80000000
   17f90:	str	r1, [sp]
   17f94:	add	r1, sp, #52	; 0x34
   17f98:	bl	18ee8 <__assert_fail@plt+0x7bb8>
   17f9c:	ldrd	r2, [r7, #8]
   17fa0:	mov	r6, r0
   17fa4:	str	r0, [r7]
   17fa8:	strd	r2, [r0]
   17fac:	b	17e68 <__assert_fail@plt+0x6b38>
   17fb0:	bl	112e8 <abort@plt>
   17fb4:	strd	r4, [sp, #-16]!
   17fb8:	mov	r5, r0
   17fbc:	str	r6, [sp, #8]
   17fc0:	str	lr, [sp, #12]
   17fc4:	bl	111ec <__errno_location@plt>
   17fc8:	mov	r4, r0
   17fcc:	cmp	r5, #0
   17fd0:	ldr	r0, [pc, #32]	; 17ff8 <__assert_fail@plt+0x6cc8>
   17fd4:	mov	r1, #48	; 0x30
   17fd8:	movne	r0, r5
   17fdc:	ldr	r6, [r4]
   17fe0:	bl	19060 <__assert_fail@plt+0x7d30>
   17fe4:	str	r6, [r4]
   17fe8:	ldrd	r4, [sp]
   17fec:	ldr	r6, [sp, #8]
   17ff0:	add	sp, sp, #12
   17ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff8:	andeq	ip, r2, r4, asr #5
   17ffc:	ldr	r3, [pc, #12]	; 18010 <__assert_fail@plt+0x6ce0>
   18000:	cmp	r0, #0
   18004:	moveq	r0, r3
   18008:	ldr	r0, [r0]
   1800c:	bx	lr
   18010:	andeq	ip, r2, r4, asr #5
   18014:	ldr	r3, [pc, #12]	; 18028 <__assert_fail@plt+0x6cf8>
   18018:	cmp	r0, #0
   1801c:	moveq	r0, r3
   18020:	str	r1, [r0]
   18024:	bx	lr
   18028:	andeq	ip, r2, r4, asr #5
   1802c:	ldr	r3, [pc, #52]	; 18068 <__assert_fail@plt+0x6d38>
   18030:	cmp	r0, #0
   18034:	push	{lr}		; (str lr, [sp, #-4]!)
   18038:	lsr	lr, r1, #5
   1803c:	and	r1, r1, #31
   18040:	moveq	r0, r3
   18044:	add	r3, r0, #8
   18048:	ldr	ip, [r3, lr, lsl #2]
   1804c:	lsr	r0, ip, r1
   18050:	eor	r2, r2, r0
   18054:	and	r0, r0, #1
   18058:	and	r2, r2, #1
   1805c:	eor	r1, ip, r2, lsl r1
   18060:	str	r1, [r3, lr, lsl #2]
   18064:	pop	{pc}		; (ldr pc, [sp], #4)
   18068:	andeq	ip, r2, r4, asr #5
   1806c:	ldr	r3, [pc, #16]	; 18084 <__assert_fail@plt+0x6d54>
   18070:	cmp	r0, #0
   18074:	movne	r3, r0
   18078:	ldr	r0, [r3, #4]
   1807c:	str	r1, [r3, #4]
   18080:	bx	lr
   18084:	andeq	ip, r2, r4, asr #5
   18088:	ldr	r3, [pc, #48]	; 180c0 <__assert_fail@plt+0x6d90>
   1808c:	cmp	r0, #0
   18090:	mov	ip, #10
   18094:	moveq	r0, r3
   18098:	cmp	r2, #0
   1809c:	cmpne	r1, #0
   180a0:	str	ip, [r0]
   180a4:	beq	180b4 <__assert_fail@plt+0x6d84>
   180a8:	str	r1, [r0, #40]	; 0x28
   180ac:	str	r2, [r0, #44]	; 0x2c
   180b0:	bx	lr
   180b4:	str	r4, [sp, #-8]!
   180b8:	str	lr, [sp, #4]
   180bc:	bl	112e8 <abort@plt>
   180c0:	andeq	ip, r2, r4, asr #5
   180c4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   180c8:	strd	r6, [sp, #8]
   180cc:	mov	r7, r0
   180d0:	mov	r6, r1
   180d4:	strd	r8, [sp, #16]
   180d8:	mov	r8, r2
   180dc:	mov	r9, r3
   180e0:	str	lr, [sp, #24]
   180e4:	sub	sp, sp, #28
   180e8:	ldr	r4, [sp, #56]	; 0x38
   180ec:	ldr	ip, [pc, #104]	; 1815c <__assert_fail@plt+0x6e2c>
   180f0:	cmp	r4, #0
   180f4:	moveq	r4, ip
   180f8:	bl	111ec <__errno_location@plt>
   180fc:	ldr	ip, [r4, #44]	; 0x2c
   18100:	mov	r5, r0
   18104:	mov	r1, r6
   18108:	add	lr, r4, #8
   1810c:	mov	r3, r9
   18110:	ldr	r6, [r5]
   18114:	mov	r2, r8
   18118:	mov	r0, r7
   1811c:	str	ip, [sp, #16]
   18120:	ldr	ip, [r4, #40]	; 0x28
   18124:	str	lr, [sp, #8]
   18128:	str	ip, [sp, #12]
   1812c:	ldr	ip, [r4, #4]
   18130:	str	ip, [sp, #4]
   18134:	ldr	ip, [r4]
   18138:	str	ip, [sp]
   1813c:	bl	1660c <__assert_fail@plt+0x52dc>
   18140:	str	r6, [r5]
   18144:	add	sp, sp, #28
   18148:	ldrd	r4, [sp]
   1814c:	ldrd	r6, [sp, #8]
   18150:	ldrd	r8, [sp, #16]
   18154:	add	sp, sp, #24
   18158:	pop	{pc}		; (ldr pc, [sp], #4)
   1815c:	andeq	ip, r2, r4, asr #5
   18160:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18164:	cmp	r3, #0
   18168:	ldr	r4, [pc, #220]	; 1824c <__assert_fail@plt+0x6f1c>
   1816c:	movne	r4, r3
   18170:	strd	r6, [sp, #8]
   18174:	mov	r6, r2
   18178:	strd	r8, [sp, #16]
   1817c:	mov	r9, r0
   18180:	strd	sl, [sp, #24]
   18184:	mov	sl, r1
   18188:	str	lr, [sp, #32]
   1818c:	sub	sp, sp, #44	; 0x2c
   18190:	bl	111ec <__errno_location@plt>
   18194:	ldr	r5, [r4, #4]
   18198:	mov	r7, r0
   1819c:	mov	r1, #0
   181a0:	add	r8, r4, #8
   181a4:	mov	r3, sl
   181a8:	ldr	ip, [r4, #44]	; 0x2c
   181ac:	mov	r2, r9
   181b0:	mov	r0, r1
   181b4:	ldr	lr, [r7]
   181b8:	cmp	r6, r1
   181bc:	orreq	r5, r5, #1
   181c0:	str	ip, [sp, #16]
   181c4:	ldr	ip, [r4, #40]	; 0x28
   181c8:	stmib	sp, {r5, r8, ip}
   181cc:	ldr	ip, [r4]
   181d0:	str	lr, [sp, #28]
   181d4:	str	ip, [sp]
   181d8:	bl	1660c <__assert_fail@plt+0x52dc>
   181dc:	add	r1, r0, #1
   181e0:	mov	fp, r0
   181e4:	mov	r0, r1
   181e8:	str	r1, [sp, #36]	; 0x24
   181ec:	bl	18d38 <__assert_fail@plt+0x7a08>
   181f0:	ldr	ip, [r4, #44]	; 0x2c
   181f4:	mov	r3, sl
   181f8:	mov	r2, r9
   181fc:	ldr	r1, [sp, #36]	; 0x24
   18200:	str	ip, [sp, #16]
   18204:	ldr	ip, [r4, #40]	; 0x28
   18208:	str	r0, [sp, #32]
   1820c:	stmib	sp, {r5, r8, ip}
   18210:	ldr	ip, [r4]
   18214:	str	ip, [sp]
   18218:	bl	1660c <__assert_fail@plt+0x52dc>
   1821c:	ldr	lr, [sp, #28]
   18220:	cmp	r6, #0
   18224:	ldr	r0, [sp, #32]
   18228:	str	lr, [r7]
   1822c:	strne	fp, [r6]
   18230:	add	sp, sp, #44	; 0x2c
   18234:	ldrd	r4, [sp]
   18238:	ldrd	r6, [sp, #8]
   1823c:	ldrd	r8, [sp, #16]
   18240:	ldrd	sl, [sp, #24]
   18244:	add	sp, sp, #32
   18248:	pop	{pc}		; (ldr pc, [sp], #4)
   1824c:	andeq	ip, r2, r4, asr #5
   18250:	mov	r3, r2
   18254:	mov	r2, #0
   18258:	b	18160 <__assert_fail@plt+0x6e30>
   1825c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18260:	movw	r5, #49468	; 0xc13c
   18264:	movt	r5, #2
   18268:	ldr	r3, [r5, #4]
   1826c:	strd	r6, [sp, #8]
   18270:	str	r8, [sp, #16]
   18274:	str	lr, [sp, #20]
   18278:	ldr	r7, [r5]
   1827c:	cmp	r3, #1
   18280:	ble	182a4 <__assert_fail@plt+0x6f74>
   18284:	mov	r4, #1
   18288:	add	r6, r7, #4
   1828c:	ldr	r0, [r6, r4, lsl #3]
   18290:	add	r4, r4, #1
   18294:	bl	12ce8 <__assert_fail@plt+0x19b8>
   18298:	ldr	r3, [r5, #4]
   1829c:	cmp	r3, r4
   182a0:	bgt	1828c <__assert_fail@plt+0x6f5c>
   182a4:	ldr	r0, [r7, #4]
   182a8:	movw	r4, #49604	; 0xc1c4
   182ac:	movt	r4, #2
   182b0:	cmp	r0, r4
   182b4:	beq	182c8 <__assert_fail@plt+0x6f98>
   182b8:	bl	12ce8 <__assert_fail@plt+0x19b8>
   182bc:	mov	r3, #256	; 0x100
   182c0:	str	r3, [r5, #8]
   182c4:	str	r4, [r5, #12]
   182c8:	ldr	r4, [pc, #44]	; 182fc <__assert_fail@plt+0x6fcc>
   182cc:	cmp	r7, r4
   182d0:	beq	182e0 <__assert_fail@plt+0x6fb0>
   182d4:	mov	r0, r7
   182d8:	bl	12ce8 <__assert_fail@plt+0x19b8>
   182dc:	str	r4, [r5]
   182e0:	mov	r3, #1
   182e4:	ldrd	r6, [sp, #8]
   182e8:	str	r3, [r5, #4]
   182ec:	ldrd	r4, [sp]
   182f0:	ldr	r8, [sp, #16]
   182f4:	add	sp, sp, #20
   182f8:	pop	{pc}		; (ldr pc, [sp], #4)
   182fc:	andeq	ip, r2, r4, asr #2
   18300:	ldr	r3, [pc, #4]	; 1830c <__assert_fail@plt+0x6fdc>
   18304:	mvn	r2, #0
   18308:	b	17dcc <__assert_fail@plt+0x6a9c>
   1830c:	andeq	ip, r2, r4, asr #5
   18310:	ldr	r3, [pc]	; 18318 <__assert_fail@plt+0x6fe8>
   18314:	b	17dcc <__assert_fail@plt+0x6a9c>
   18318:	andeq	ip, r2, r4, asr #5
   1831c:	mov	r1, r0
   18320:	ldr	r3, [pc, #8]	; 18330 <__assert_fail@plt+0x7000>
   18324:	mvn	r2, #0
   18328:	mov	r0, #0
   1832c:	b	17dcc <__assert_fail@plt+0x6a9c>
   18330:	andeq	ip, r2, r4, asr #5
   18334:	mov	r2, r1
   18338:	ldr	r3, [pc, #8]	; 18348 <__assert_fail@plt+0x7018>
   1833c:	mov	r1, r0
   18340:	mov	r0, #0
   18344:	b	17dcc <__assert_fail@plt+0x6a9c>
   18348:	andeq	ip, r2, r4, asr #5
   1834c:	strd	r4, [sp, #-12]!
   18350:	mov	r5, r2
   18354:	mov	r4, r0
   18358:	str	lr, [sp, #8]
   1835c:	sub	sp, sp, #52	; 0x34
   18360:	mov	r0, sp
   18364:	bl	16468 <__assert_fail@plt+0x5138>
   18368:	mov	r3, sp
   1836c:	mov	r1, r5
   18370:	mov	r0, r4
   18374:	mvn	r2, #0
   18378:	bl	17dcc <__assert_fail@plt+0x6a9c>
   1837c:	add	sp, sp, #52	; 0x34
   18380:	ldrd	r4, [sp]
   18384:	add	sp, sp, #8
   18388:	pop	{pc}		; (ldr pc, [sp], #4)
   1838c:	strd	r4, [sp, #-16]!
   18390:	mov	r5, r2
   18394:	mov	r4, r0
   18398:	str	r6, [sp, #8]
   1839c:	mov	r6, r3
   183a0:	str	lr, [sp, #12]
   183a4:	sub	sp, sp, #48	; 0x30
   183a8:	mov	r0, sp
   183ac:	bl	16468 <__assert_fail@plt+0x5138>
   183b0:	mov	r3, sp
   183b4:	mov	r2, r6
   183b8:	mov	r1, r5
   183bc:	mov	r0, r4
   183c0:	bl	17dcc <__assert_fail@plt+0x6a9c>
   183c4:	add	sp, sp, #48	; 0x30
   183c8:	ldrd	r4, [sp]
   183cc:	ldr	r6, [sp, #8]
   183d0:	add	sp, sp, #12
   183d4:	pop	{pc}		; (ldr pc, [sp], #4)
   183d8:	mov	r2, r1
   183dc:	mov	r1, r0
   183e0:	mov	r0, #0
   183e4:	b	1834c <__assert_fail@plt+0x701c>
   183e8:	mov	r3, r2
   183ec:	mov	r2, r1
   183f0:	mov	r1, r0
   183f4:	mov	r0, #0
   183f8:	b	1838c <__assert_fail@plt+0x705c>
   183fc:	ldr	ip, [pc, #140]	; 18490 <__assert_fail@plt+0x7160>
   18400:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18404:	ldrd	r4, [ip]
   18408:	strd	r6, [sp, #8]
   1840c:	ldrd	r6, [ip, #8]
   18410:	strd	r8, [sp, #16]
   18414:	lsr	r9, r2, #5
   18418:	str	lr, [sp, #24]
   1841c:	sub	sp, sp, #52	; 0x34
   18420:	and	lr, r2, #31
   18424:	add	r8, sp, #8
   18428:	mov	r2, r1
   1842c:	strd	r4, [sp]
   18430:	mov	r1, r0
   18434:	mov	r3, sp
   18438:	strd	r6, [sp, #8]
   1843c:	mov	r0, #0
   18440:	ldrd	r4, [ip, #16]
   18444:	ldrd	r6, [ip, #24]
   18448:	strd	r4, [sp, #16]
   1844c:	ldrd	r4, [ip, #32]
   18450:	strd	r6, [sp, #24]
   18454:	ldrd	r6, [ip, #40]	; 0x28
   18458:	strd	r4, [sp, #32]
   1845c:	strd	r6, [sp, #40]	; 0x28
   18460:	ldr	ip, [r8, r9, lsl #2]
   18464:	mvn	r4, ip, lsr lr
   18468:	and	r4, r4, #1
   1846c:	eor	lr, ip, r4, lsl lr
   18470:	str	lr, [r8, r9, lsl #2]
   18474:	bl	17dcc <__assert_fail@plt+0x6a9c>
   18478:	add	sp, sp, #52	; 0x34
   1847c:	ldrd	r4, [sp]
   18480:	ldrd	r6, [sp, #8]
   18484:	ldrd	r8, [sp, #16]
   18488:	add	sp, sp, #24
   1848c:	pop	{pc}		; (ldr pc, [sp], #4)
   18490:	andeq	ip, r2, r4, asr #5
   18494:	mov	r2, r1
   18498:	mvn	r1, #0
   1849c:	b	183fc <__assert_fail@plt+0x70cc>
   184a0:	mov	r2, #58	; 0x3a
   184a4:	mvn	r1, #0
   184a8:	b	183fc <__assert_fail@plt+0x70cc>
   184ac:	mov	r2, #58	; 0x3a
   184b0:	b	183fc <__assert_fail@plt+0x70cc>
   184b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   184b8:	strd	r6, [sp, #8]
   184bc:	mov	r6, r0
   184c0:	mov	r7, r2
   184c4:	str	lr, [sp, #16]
   184c8:	sub	sp, sp, #100	; 0x64
   184cc:	mov	r0, sp
   184d0:	bl	16468 <__assert_fail@plt+0x5138>
   184d4:	ldrd	r4, [sp, #8]
   184d8:	mov	r1, r7
   184dc:	mov	r0, r6
   184e0:	add	r3, sp, #48	; 0x30
   184e4:	mvn	r2, #0
   184e8:	ldrd	r6, [sp]
   184ec:	strd	r4, [sp, #56]	; 0x38
   184f0:	ldrd	r4, [sp, #16]
   184f4:	strd	r6, [sp, #48]	; 0x30
   184f8:	ldrd	r6, [sp, #32]
   184fc:	ldr	lr, [sp, #60]	; 0x3c
   18500:	strd	r4, [sp, #64]	; 0x40
   18504:	ldrd	r4, [sp, #24]
   18508:	mvn	ip, lr
   1850c:	and	ip, ip, #67108864	; 0x4000000
   18510:	strd	r4, [sp, #72]	; 0x48
   18514:	eor	ip, ip, lr
   18518:	ldrd	r4, [sp, #40]	; 0x28
   1851c:	str	ip, [sp, #60]	; 0x3c
   18520:	strd	r6, [sp, #80]	; 0x50
   18524:	strd	r4, [sp, #88]	; 0x58
   18528:	bl	17dcc <__assert_fail@plt+0x6a9c>
   1852c:	add	sp, sp, #100	; 0x64
   18530:	ldrd	r4, [sp]
   18534:	ldrd	r6, [sp, #8]
   18538:	add	sp, sp, #16
   1853c:	pop	{pc}		; (ldr pc, [sp], #4)
   18540:	ldr	ip, [pc, #156]	; 185e4 <__assert_fail@plt+0x72b4>
   18544:	cmp	r2, #0
   18548:	cmpne	r1, #0
   1854c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18550:	strd	r6, [sp, #8]
   18554:	mov	r6, r2
   18558:	str	r8, [sp, #16]
   1855c:	mov	r8, r3
   18560:	strd	sl, [sp, #20]
   18564:	ldrd	r4, [ip]
   18568:	str	lr, [sp, #28]
   1856c:	sub	sp, sp, #48	; 0x30
   18570:	mov	lr, #10
   18574:	ldrd	r2, [ip, #8]
   18578:	ldrd	sl, [ip, #16]
   1857c:	strd	r4, [sp]
   18580:	ldrd	r4, [ip, #32]
   18584:	str	lr, [sp]
   18588:	strd	r2, [sp, #8]
   1858c:	strd	sl, [sp, #16]
   18590:	ldrd	r2, [ip, #24]
   18594:	ldrd	sl, [ip, #40]	; 0x28
   18598:	strd	r2, [sp, #24]
   1859c:	strd	r4, [sp, #32]
   185a0:	strd	sl, [sp, #40]	; 0x28
   185a4:	beq	185e0 <__assert_fail@plt+0x72b0>
   185a8:	ldr	r2, [sp, #80]	; 0x50
   185ac:	mov	r7, r1
   185b0:	mov	r3, sp
   185b4:	mov	r1, r8
   185b8:	str	r7, [sp, #40]	; 0x28
   185bc:	str	r6, [sp, #44]	; 0x2c
   185c0:	bl	17dcc <__assert_fail@plt+0x6a9c>
   185c4:	add	sp, sp, #48	; 0x30
   185c8:	ldrd	r4, [sp]
   185cc:	ldrd	r6, [sp, #8]
   185d0:	ldr	r8, [sp, #16]
   185d4:	ldrd	sl, [sp, #20]
   185d8:	add	sp, sp, #28
   185dc:	pop	{pc}		; (ldr pc, [sp], #4)
   185e0:	bl	112e8 <abort@plt>
   185e4:	andeq	ip, r2, r4, asr #5
   185e8:	mvn	ip, #0
   185ec:	push	{lr}		; (str lr, [sp, #-4]!)
   185f0:	sub	sp, sp, #12
   185f4:	str	ip, [sp]
   185f8:	bl	18540 <__assert_fail@plt+0x7210>
   185fc:	add	sp, sp, #12
   18600:	pop	{pc}		; (ldr pc, [sp], #4)
   18604:	mvn	ip, #0
   18608:	push	{lr}		; (str lr, [sp, #-4]!)
   1860c:	sub	sp, sp, #12
   18610:	mov	r3, r2
   18614:	mov	r2, r1
   18618:	mov	r1, r0
   1861c:	mov	r0, #0
   18620:	str	ip, [sp]
   18624:	bl	18540 <__assert_fail@plt+0x7210>
   18628:	add	sp, sp, #12
   1862c:	pop	{pc}		; (ldr pc, [sp], #4)
   18630:	push	{lr}		; (str lr, [sp, #-4]!)
   18634:	sub	sp, sp, #12
   18638:	str	r3, [sp]
   1863c:	mov	r3, r2
   18640:	mov	r2, r1
   18644:	mov	r1, r0
   18648:	mov	r0, #0
   1864c:	bl	18540 <__assert_fail@plt+0x7210>
   18650:	add	sp, sp, #12
   18654:	pop	{pc}		; (ldr pc, [sp], #4)
   18658:	ldr	r3, [pc]	; 18660 <__assert_fail@plt+0x7330>
   1865c:	b	17dcc <__assert_fail@plt+0x6a9c>
   18660:	andeq	ip, r2, ip, asr #2
   18664:	mov	r2, r1
   18668:	ldr	r3, [pc, #8]	; 18678 <__assert_fail@plt+0x7348>
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	b	17dcc <__assert_fail@plt+0x6a9c>
   18678:	andeq	ip, r2, ip, asr #2
   1867c:	ldr	r3, [pc, #4]	; 18688 <__assert_fail@plt+0x7358>
   18680:	mvn	r2, #0
   18684:	b	17dcc <__assert_fail@plt+0x6a9c>
   18688:	andeq	ip, r2, ip, asr #2
   1868c:	mov	r1, r0
   18690:	ldr	r3, [pc, #8]	; 186a0 <__assert_fail@plt+0x7370>
   18694:	mvn	r2, #0
   18698:	mov	r0, #0
   1869c:	b	17dcc <__assert_fail@plt+0x6a9c>
   186a0:	andeq	ip, r2, ip, asr #2
   186a4:	str	r4, [sp, #-16]!
   186a8:	movw	r1, #45204	; 0xb094
   186ac:	movt	r1, #1
   186b0:	strd	r6, [sp, #4]
   186b4:	mov	r4, r0
   186b8:	mov	r0, #3
   186bc:	str	lr, [sp, #12]
   186c0:	sub	sp, sp, #104	; 0x68
   186c4:	mov	r2, sp
   186c8:	bl	11300 <__lxstat64@plt>
   186cc:	cmp	r0, #0
   186d0:	movne	r0, #0
   186d4:	bne	186ec <__assert_fail@plt+0x73bc>
   186d8:	ldrd	r6, [sp]
   186dc:	mov	r0, r4
   186e0:	ldrd	r2, [sp, #96]	; 0x60
   186e4:	strd	r2, [r4]
   186e8:	strd	r6, [r4, #8]
   186ec:	add	sp, sp, #104	; 0x68
   186f0:	ldr	r4, [sp]
   186f4:	ldrd	r6, [sp, #4]
   186f8:	add	sp, sp, #12
   186fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18700:	cmp	r0, #2
   18704:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18708:	mov	r4, r0
   1870c:	strd	r6, [sp, #8]
   18710:	str	r8, [sp, #16]
   18714:	str	lr, [sp, #20]
   18718:	bls	18734 <__assert_fail@plt+0x7404>
   1871c:	mov	r0, r4
   18720:	ldrd	r4, [sp]
   18724:	ldrd	r6, [sp, #8]
   18728:	ldr	r8, [sp, #16]
   1872c:	add	sp, sp, #20
   18730:	pop	{pc}		; (ldr pc, [sp], #4)
   18734:	bl	1a394 <__assert_fail@plt+0x9064>
   18738:	mov	r7, r0
   1873c:	bl	111ec <__errno_location@plt>
   18740:	mov	r5, r0
   18744:	mov	r0, r4
   18748:	ldr	r6, [r5]
   1874c:	mov	r4, r7
   18750:	bl	112f4 <close@plt>
   18754:	str	r6, [r5]
   18758:	b	1871c <__assert_fail@plt+0x73ec>
   1875c:	cmp	r1, #0
   18760:	strd	r4, [sp, #-16]!
   18764:	mov	ip, r3
   18768:	str	r6, [sp, #8]
   1876c:	mov	r4, r0
   18770:	str	lr, [sp, #12]
   18774:	sub	sp, sp, #32
   18778:	ldr	r5, [sp, #48]	; 0x30
   1877c:	ldr	r6, [sp, #52]	; 0x34
   18780:	beq	188c4 <__assert_fail@plt+0x7594>
   18784:	mov	r3, r1
   18788:	mov	r1, #1
   1878c:	stm	sp, {r2, ip}
   18790:	movw	r2, #46916	; 0xb744
   18794:	movt	r2, #1
   18798:	bl	11228 <__fprintf_chk@plt>
   1879c:	mov	r2, #5
   187a0:	movw	r1, #46936	; 0xb758
   187a4:	movt	r1, #1
   187a8:	mov	r0, #0
   187ac:	bl	110c0 <dcgettext@plt>
   187b0:	movw	ip, #2022	; 0x7e6
   187b4:	mov	r3, r0
   187b8:	mov	r1, #1
   187bc:	movw	r2, #47664	; 0xba30
   187c0:	movt	r2, #1
   187c4:	mov	r0, r4
   187c8:	str	ip, [sp]
   187cc:	bl	11228 <__fprintf_chk@plt>
   187d0:	mov	r1, r4
   187d4:	mov	r0, #10
   187d8:	bl	110b4 <fputc_unlocked@plt>
   187dc:	mov	r2, #5
   187e0:	movw	r1, #46940	; 0xb75c
   187e4:	movt	r1, #1
   187e8:	mov	r0, #0
   187ec:	bl	110c0 <dcgettext@plt>
   187f0:	mov	r2, r0
   187f4:	mov	r1, #1
   187f8:	movw	r3, #47112	; 0xb808
   187fc:	movt	r3, #1
   18800:	mov	r0, r4
   18804:	bl	11228 <__fprintf_chk@plt>
   18808:	mov	r1, r4
   1880c:	mov	r0, #10
   18810:	bl	110b4 <fputc_unlocked@plt>
   18814:	cmp	r6, #9
   18818:	ldrls	pc, [pc, r6, lsl #2]
   1881c:	b	18b30 <__assert_fail@plt+0x7800>
   18820:			; <UNDEFINED> instruction: 0x000188b0
   18824:	andeq	r8, r1, r0, ror #17
   18828:	andeq	r8, r1, ip, lsl r9
   1882c:	andeq	r8, r1, ip, asr r9
   18830:	andeq	r8, r1, r4, lsr #19
   18834:	ldrdeq	r8, [r1], -ip
   18838:	andeq	r8, r1, r4, lsr #20
   1883c:	andeq	r8, r1, r8, ror sl
   18840:	ldrdeq	r8, [r1], -r0
   18844:	andeq	r8, r1, r8, asr #16
   18848:	movw	r1, #47416	; 0xb938
   1884c:	movt	r1, #1
   18850:	mov	r2, #5
   18854:	mov	r0, #0
   18858:	bl	110c0 <dcgettext@plt>
   1885c:	ldr	lr, [r5, #4]
   18860:	mov	r2, r0
   18864:	mov	r1, #1
   18868:	mov	r0, r4
   1886c:	ldr	r3, [r5, #8]
   18870:	ldr	ip, [r5, #32]
   18874:	str	lr, [sp]
   18878:	ldr	lr, [r5, #12]
   1887c:	str	ip, [sp, #28]
   18880:	ldr	ip, [r5, #28]
   18884:	str	r3, [sp, #4]
   18888:	ldr	r3, [r5, #16]
   1888c:	str	lr, [sp, #8]
   18890:	ldr	lr, [r5, #20]
   18894:	str	ip, [sp, #24]
   18898:	ldr	ip, [r5, #24]
   1889c:	str	r3, [sp, #12]
   188a0:	ldr	r3, [r5]
   188a4:	str	lr, [sp, #16]
   188a8:	str	ip, [sp, #20]
   188ac:	bl	11228 <__fprintf_chk@plt>
   188b0:	add	sp, sp, #32
   188b4:	ldrd	r4, [sp]
   188b8:	ldr	r6, [sp, #8]
   188bc:	add	sp, sp, #12
   188c0:	pop	{pc}		; (ldr pc, [sp], #4)
   188c4:	mov	r3, r2
   188c8:	mov	r1, #1
   188cc:	str	ip, [sp]
   188d0:	movw	r2, #46928	; 0xb750
   188d4:	movt	r2, #1
   188d8:	bl	11228 <__fprintf_chk@plt>
   188dc:	b	1879c <__assert_fail@plt+0x746c>
   188e0:	mov	r2, #5
   188e4:	movw	r1, #47148	; 0xb82c
   188e8:	movt	r1, #1
   188ec:	mov	r0, #0
   188f0:	bl	110c0 <dcgettext@plt>
   188f4:	ldr	r3, [r5]
   188f8:	mov	r2, r0
   188fc:	mov	r1, #1
   18900:	mov	r0, r4
   18904:	add	sp, sp, #32
   18908:	ldrd	r4, [sp]
   1890c:	ldr	r6, [sp, #8]
   18910:	ldr	lr, [sp, #12]
   18914:	add	sp, sp, #16
   18918:	b	11228 <__fprintf_chk@plt>
   1891c:	mov	r2, #5
   18920:	movw	r1, #47164	; 0xb83c
   18924:	movt	r1, #1
   18928:	mov	r0, #0
   1892c:	bl	110c0 <dcgettext@plt>
   18930:	ldm	r5, {r3, ip}
   18934:	mov	r2, r0
   18938:	mov	r1, #1
   1893c:	mov	r0, r4
   18940:	str	ip, [sp, #48]	; 0x30
   18944:	add	sp, sp, #32
   18948:	ldrd	r4, [sp]
   1894c:	ldr	r6, [sp, #8]
   18950:	ldr	lr, [sp, #12]
   18954:	add	sp, sp, #16
   18958:	b	11228 <__fprintf_chk@plt>
   1895c:	mov	r2, #5
   18960:	movw	r1, #47188	; 0xb854
   18964:	movt	r1, #1
   18968:	mov	r0, #0
   1896c:	bl	110c0 <dcgettext@plt>
   18970:	ldm	r5, {r3, lr}
   18974:	mov	r2, r0
   18978:	mov	r1, #1
   1897c:	mov	r0, r4
   18980:	ldr	ip, [r5, #8]
   18984:	str	lr, [sp, #48]	; 0x30
   18988:	str	ip, [sp, #52]	; 0x34
   1898c:	add	sp, sp, #32
   18990:	ldrd	r4, [sp]
   18994:	ldr	r6, [sp, #8]
   18998:	ldr	lr, [sp, #12]
   1899c:	add	sp, sp, #16
   189a0:	b	11228 <__fprintf_chk@plt>
   189a4:	mov	r2, #5
   189a8:	movw	r1, #47216	; 0xb870
   189ac:	movt	r1, #1
   189b0:	mov	r0, #0
   189b4:	bl	110c0 <dcgettext@plt>
   189b8:	ldmib	r5, {r3, ip, lr}
   189bc:	mov	r2, r0
   189c0:	mov	r1, #1
   189c4:	mov	r0, r4
   189c8:	str	r3, [sp]
   189cc:	ldr	r3, [r5]
   189d0:	stmib	sp, {ip, lr}
   189d4:	bl	11228 <__fprintf_chk@plt>
   189d8:	b	188b0 <__assert_fail@plt+0x7580>
   189dc:	mov	r2, #5
   189e0:	movw	r1, #47248	; 0xb890
   189e4:	movt	r1, #1
   189e8:	mov	r0, #0
   189ec:	bl	110c0 <dcgettext@plt>
   189f0:	ldmib	r5, {ip, lr}
   189f4:	mov	r2, r0
   189f8:	mov	r1, #1
   189fc:	mov	r0, r4
   18a00:	ldr	r3, [r5, #16]
   18a04:	str	ip, [sp]
   18a08:	ldr	ip, [r5, #12]
   18a0c:	str	r3, [sp, #12]
   18a10:	ldr	r3, [r5]
   18a14:	str	lr, [sp, #4]
   18a18:	str	ip, [sp, #8]
   18a1c:	bl	11228 <__fprintf_chk@plt>
   18a20:	b	188b0 <__assert_fail@plt+0x7580>
   18a24:	mov	r2, #5
   18a28:	movw	r1, #47284	; 0xb8b4
   18a2c:	movt	r1, #1
   18a30:	mov	r0, #0
   18a34:	bl	110c0 <dcgettext@plt>
   18a38:	ldr	lr, [r5, #4]
   18a3c:	mov	r2, r0
   18a40:	mov	r1, #1
   18a44:	mov	r0, r4
   18a48:	ldr	r3, [r5, #8]
   18a4c:	ldr	ip, [r5, #20]
   18a50:	str	lr, [sp]
   18a54:	ldr	lr, [r5, #12]
   18a58:	str	ip, [sp, #16]
   18a5c:	ldr	ip, [r5, #16]
   18a60:	str	r3, [sp, #4]
   18a64:	ldr	r3, [r5]
   18a68:	str	lr, [sp, #8]
   18a6c:	str	ip, [sp, #12]
   18a70:	bl	11228 <__fprintf_chk@plt>
   18a74:	b	188b0 <__assert_fail@plt+0x7580>
   18a78:	mov	r2, #5
   18a7c:	movw	r1, #47324	; 0xb8dc
   18a80:	movt	r1, #1
   18a84:	mov	r0, #0
   18a88:	bl	110c0 <dcgettext@plt>
   18a8c:	ldmib	r5, {r3, ip}
   18a90:	mov	r2, r0
   18a94:	mov	r1, #1
   18a98:	mov	r0, r4
   18a9c:	ldr	lr, [r5, #24]
   18aa0:	str	r3, [sp]
   18aa4:	ldr	r3, [r5, #12]
   18aa8:	str	lr, [sp, #20]
   18aac:	ldr	lr, [r5, #20]
   18ab0:	str	ip, [sp, #4]
   18ab4:	ldr	ip, [r5, #16]
   18ab8:	str	r3, [sp, #8]
   18abc:	ldr	r3, [r5]
   18ac0:	str	ip, [sp, #12]
   18ac4:	str	lr, [sp, #16]
   18ac8:	bl	11228 <__fprintf_chk@plt>
   18acc:	b	188b0 <__assert_fail@plt+0x7580>
   18ad0:	mov	r2, #5
   18ad4:	movw	r1, #47368	; 0xb908
   18ad8:	movt	r1, #1
   18adc:	mov	r0, #0
   18ae0:	bl	110c0 <dcgettext@plt>
   18ae4:	ldmib	r5, {ip, lr}
   18ae8:	mov	r2, r0
   18aec:	mov	r1, #1
   18af0:	mov	r0, r4
   18af4:	ldr	r3, [r5, #28]
   18af8:	str	ip, [sp]
   18afc:	ldr	ip, [r5, #12]
   18b00:	str	r3, [sp, #24]
   18b04:	ldr	r3, [r5, #24]
   18b08:	str	lr, [sp, #4]
   18b0c:	ldr	lr, [r5, #16]
   18b10:	str	ip, [sp, #8]
   18b14:	ldr	ip, [r5, #20]
   18b18:	str	r3, [sp, #20]
   18b1c:	ldr	r3, [r5]
   18b20:	str	lr, [sp, #12]
   18b24:	str	ip, [sp, #16]
   18b28:	bl	11228 <__fprintf_chk@plt>
   18b2c:	b	188b0 <__assert_fail@plt+0x7580>
   18b30:	movw	r1, #47468	; 0xb96c
   18b34:	movt	r1, #1
   18b38:	b	18850 <__assert_fail@plt+0x7520>
   18b3c:	strd	r4, [sp, #-12]!
   18b40:	str	lr, [sp, #8]
   18b44:	sub	sp, sp, #12
   18b48:	ldr	r5, [sp, #24]
   18b4c:	ldr	ip, [r5]
   18b50:	cmp	ip, #0
   18b54:	beq	18b70 <__assert_fail@plt+0x7840>
   18b58:	mov	lr, r5
   18b5c:	mov	ip, #0
   18b60:	ldr	r4, [lr, #4]!
   18b64:	add	ip, ip, #1
   18b68:	cmp	r4, #0
   18b6c:	bne	18b60 <__assert_fail@plt+0x7830>
   18b70:	stm	sp, {r5, ip}
   18b74:	bl	1875c <__assert_fail@plt+0x742c>
   18b78:	add	sp, sp, #12
   18b7c:	ldrd	r4, [sp]
   18b80:	add	sp, sp, #8
   18b84:	pop	{pc}		; (ldr pc, [sp], #4)
   18b88:	strd	r4, [sp, #-16]!
   18b8c:	mov	ip, #0
   18b90:	str	r6, [sp, #8]
   18b94:	str	lr, [sp, #12]
   18b98:	sub	sp, sp, #48	; 0x30
   18b9c:	ldr	r5, [sp, #64]	; 0x40
   18ba0:	add	r6, sp, #8
   18ba4:	mov	r4, r6
   18ba8:	ldr	lr, [r5], #4
   18bac:	cmp	lr, #0
   18bb0:	str	lr, [r4], #4
   18bb4:	beq	18bc4 <__assert_fail@plt+0x7894>
   18bb8:	add	ip, ip, #1
   18bbc:	cmp	ip, #10
   18bc0:	bne	18ba8 <__assert_fail@plt+0x7878>
   18bc4:	stm	sp, {r6, ip}
   18bc8:	bl	1875c <__assert_fail@plt+0x742c>
   18bcc:	add	sp, sp, #48	; 0x30
   18bd0:	ldrd	r4, [sp]
   18bd4:	ldr	r6, [sp, #8]
   18bd8:	add	sp, sp, #12
   18bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   18be0:	push	{r3}		; (str r3, [sp, #-4]!)
   18be4:	mov	ip, #0
   18be8:	strd	r4, [sp, #-12]!
   18bec:	str	lr, [sp, #8]
   18bf0:	sub	sp, sp, #56	; 0x38
   18bf4:	add	r3, sp, #72	; 0x48
   18bf8:	add	r5, sp, #16
   18bfc:	mov	r4, r3
   18c00:	mov	lr, r5
   18c04:	str	r3, [sp, #12]
   18c08:	ldr	r3, [r4], #4
   18c0c:	cmp	r3, #0
   18c10:	str	r3, [lr], #4
   18c14:	beq	18c24 <__assert_fail@plt+0x78f4>
   18c18:	add	ip, ip, #1
   18c1c:	cmp	ip, #10
   18c20:	bne	18c08 <__assert_fail@plt+0x78d8>
   18c24:	ldr	r3, [sp, #68]	; 0x44
   18c28:	stm	sp, {r5, ip}
   18c2c:	bl	1875c <__assert_fail@plt+0x742c>
   18c30:	add	sp, sp, #56	; 0x38
   18c34:	ldrd	r4, [sp]
   18c38:	ldr	lr, [sp, #8]
   18c3c:	add	sp, sp, #12
   18c40:	add	sp, sp, #4
   18c44:	bx	lr
   18c48:	movw	r3, #49556	; 0xc194
   18c4c:	movt	r3, #2
   18c50:	str	r4, [sp, #-8]!
   18c54:	mov	r0, #10
   18c58:	ldr	r1, [r3]
   18c5c:	str	lr, [sp, #4]
   18c60:	bl	110b4 <fputc_unlocked@plt>
   18c64:	mov	r2, #5
   18c68:	movw	r1, #47528	; 0xb9a8
   18c6c:	movt	r1, #1
   18c70:	mov	r0, #0
   18c74:	bl	110c0 <dcgettext@plt>
   18c78:	mov	r1, r0
   18c7c:	movw	r2, #47548	; 0xb9bc
   18c80:	movt	r2, #1
   18c84:	mov	r0, #1
   18c88:	bl	11210 <__printf_chk@plt>
   18c8c:	mov	r2, #5
   18c90:	movw	r1, #47572	; 0xb9d4
   18c94:	movt	r1, #1
   18c98:	mov	r0, #0
   18c9c:	bl	110c0 <dcgettext@plt>
   18ca0:	mov	r1, r0
   18ca4:	movw	r3, #44784	; 0xaef0
   18ca8:	movt	r3, #1
   18cac:	movw	r2, #44824	; 0xaf18
   18cb0:	movt	r2, #1
   18cb4:	mov	r0, #1
   18cb8:	bl	11210 <__printf_chk@plt>
   18cbc:	mov	r2, #5
   18cc0:	movw	r1, #47592	; 0xb9e8
   18cc4:	movt	r1, #1
   18cc8:	mov	r0, #0
   18ccc:	bl	110c0 <dcgettext@plt>
   18cd0:	mov	r1, r0
   18cd4:	movw	r2, #47632	; 0xba10
   18cd8:	movt	r2, #1
   18cdc:	mov	r0, #1
   18ce0:	ldr	r4, [sp]
   18ce4:	ldr	lr, [sp, #4]
   18ce8:	add	sp, sp, #8
   18cec:	b	11210 <__printf_chk@plt>
   18cf0:	str	r4, [sp, #-8]!
   18cf4:	str	lr, [sp, #4]
   18cf8:	bl	19c58 <__assert_fail@plt+0x8928>
   18cfc:	cmp	r0, #0
   18d00:	beq	18d10 <__assert_fail@plt+0x79e0>
   18d04:	ldr	r4, [sp]
   18d08:	add	sp, sp, #4
   18d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d10:	bl	19168 <__assert_fail@plt+0x7e38>
   18d14:	str	r4, [sp, #-8]!
   18d18:	str	lr, [sp, #4]
   18d1c:	bl	19c58 <__assert_fail@plt+0x8928>
   18d20:	cmp	r0, #0
   18d24:	beq	18d34 <__assert_fail@plt+0x7a04>
   18d28:	ldr	r4, [sp]
   18d2c:	add	sp, sp, #4
   18d30:	pop	{pc}		; (ldr pc, [sp], #4)
   18d34:	bl	19168 <__assert_fail@plt+0x7e38>
   18d38:	str	r4, [sp, #-8]!
   18d3c:	str	lr, [sp, #4]
   18d40:	bl	19c58 <__assert_fail@plt+0x8928>
   18d44:	cmp	r0, #0
   18d48:	beq	18d58 <__assert_fail@plt+0x7a28>
   18d4c:	ldr	r4, [sp]
   18d50:	add	sp, sp, #4
   18d54:	pop	{pc}		; (ldr pc, [sp], #4)
   18d58:	bl	19168 <__assert_fail@plt+0x7e38>
   18d5c:	strd	r4, [sp, #-16]!
   18d60:	mov	r5, r0
   18d64:	mov	r4, r1
   18d68:	str	r6, [sp, #8]
   18d6c:	str	lr, [sp, #12]
   18d70:	bl	19c94 <__assert_fail@plt+0x8964>
   18d74:	cmp	r0, #0
   18d78:	beq	18d8c <__assert_fail@plt+0x7a5c>
   18d7c:	ldrd	r4, [sp]
   18d80:	ldr	r6, [sp, #8]
   18d84:	add	sp, sp, #12
   18d88:	pop	{pc}		; (ldr pc, [sp], #4)
   18d8c:	adds	r4, r4, #0
   18d90:	movne	r4, #1
   18d94:	cmp	r5, #0
   18d98:	moveq	r4, #1
   18d9c:	cmp	r4, #0
   18da0:	beq	18d7c <__assert_fail@plt+0x7a4c>
   18da4:	bl	19168 <__assert_fail@plt+0x7e38>
   18da8:	cmp	r1, #0
   18dac:	orreq	r1, r1, #1
   18db0:	str	r4, [sp, #-8]!
   18db4:	str	lr, [sp, #4]
   18db8:	bl	19c94 <__assert_fail@plt+0x8964>
   18dbc:	cmp	r0, #0
   18dc0:	beq	18dd0 <__assert_fail@plt+0x7aa0>
   18dc4:	ldr	r4, [sp]
   18dc8:	add	sp, sp, #4
   18dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   18dd0:	bl	19168 <__assert_fail@plt+0x7e38>
   18dd4:	strd	r4, [sp, #-16]!
   18dd8:	mov	r4, r0
   18ddc:	mov	r5, r2
   18de0:	str	r6, [sp, #8]
   18de4:	mov	r6, r1
   18de8:	str	lr, [sp, #12]
   18dec:	bl	1a35c <__assert_fail@plt+0x902c>
   18df0:	cmp	r0, #0
   18df4:	beq	18e08 <__assert_fail@plt+0x7ad8>
   18df8:	ldrd	r4, [sp]
   18dfc:	ldr	r6, [sp, #8]
   18e00:	add	sp, sp, #12
   18e04:	pop	{pc}		; (ldr pc, [sp], #4)
   18e08:	cmp	r4, #0
   18e0c:	beq	18e1c <__assert_fail@plt+0x7aec>
   18e10:	cmp	r6, #0
   18e14:	cmpne	r5, #0
   18e18:	beq	18df8 <__assert_fail@plt+0x7ac8>
   18e1c:	bl	19168 <__assert_fail@plt+0x7e38>
   18e20:	b	18dd4 <__assert_fail@plt+0x7aa4>
   18e24:	cmp	r2, #0
   18e28:	cmpne	r1, #0
   18e2c:	str	r4, [sp, #-8]!
   18e30:	moveq	r2, #1
   18e34:	str	lr, [sp, #4]
   18e38:	moveq	r1, r2
   18e3c:	bl	1a35c <__assert_fail@plt+0x902c>
   18e40:	cmp	r0, #0
   18e44:	beq	18e54 <__assert_fail@plt+0x7b24>
   18e48:	ldr	r4, [sp]
   18e4c:	add	sp, sp, #4
   18e50:	pop	{pc}		; (ldr pc, [sp], #4)
   18e54:	bl	19168 <__assert_fail@plt+0x7e38>
   18e58:	mov	r2, r1
   18e5c:	mov	r1, r0
   18e60:	mov	r0, #0
   18e64:	b	18dd4 <__assert_fail@plt+0x7aa4>
   18e68:	mov	r2, r1
   18e6c:	mov	r1, r0
   18e70:	mov	r0, #0
   18e74:	b	18e24 <__assert_fail@plt+0x7af4>
   18e78:	cmp	r0, #0
   18e7c:	strd	r4, [sp, #-16]!
   18e80:	mov	r5, r1
   18e84:	ldr	r4, [r1]
   18e88:	str	r6, [sp, #8]
   18e8c:	str	lr, [sp, #12]
   18e90:	beq	18ec0 <__assert_fail@plt+0x7b90>
   18e94:	lsr	r3, r4, #1
   18e98:	add	r3, r3, #1
   18e9c:	adds	r4, r4, r3
   18ea0:	bcs	18edc <__assert_fail@plt+0x7bac>
   18ea4:	mov	r1, r4
   18ea8:	bl	18dd4 <__assert_fail@plt+0x7aa4>
   18eac:	ldr	r6, [sp, #8]
   18eb0:	str	r4, [r5]
   18eb4:	ldrd	r4, [sp]
   18eb8:	add	sp, sp, #12
   18ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   18ec0:	cmp	r4, #0
   18ec4:	bne	18ea4 <__assert_fail@plt+0x7b74>
   18ec8:	mov	r4, #64	; 0x40
   18ecc:	udiv	r4, r4, r2
   18ed0:	cmp	r2, #64	; 0x40
   18ed4:	addhi	r4, r4, #1
   18ed8:	b	18ea4 <__assert_fail@plt+0x7b74>
   18edc:	bl	19168 <__assert_fail@plt+0x7e38>
   18ee0:	mov	r2, #1
   18ee4:	b	18e78 <__assert_fail@plt+0x7b48>
   18ee8:	ldr	ip, [r1]
   18eec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18ef0:	mov	r5, r1
   18ef4:	strd	r6, [sp, #8]
   18ef8:	str	lr, [sp, #28]
   18efc:	strd	r8, [sp, #16]
   18f00:	asr	lr, ip, #1
   18f04:	ldr	r8, [sp, #32]
   18f08:	str	sl, [sp, #24]
   18f0c:	adds	r4, ip, lr
   18f10:	mvn	lr, r3
   18f14:	lsr	lr, lr, #31
   18f18:	mvnvs	r4, #-2147483648	; 0x80000000
   18f1c:	cmp	r3, r4
   18f20:	movge	r1, #0
   18f24:	andlt	r1, lr, #1
   18f28:	cmp	r1, #0
   18f2c:	movne	r4, r3
   18f30:	smull	r6, r7, r4, r8
   18f34:	cmp	r7, r6, asr #31
   18f38:	bne	18fc0 <__assert_fail@plt+0x7c90>
   18f3c:	cmp	r6, #63	; 0x3f
   18f40:	mov	r1, r6
   18f44:	ble	18fa8 <__assert_fail@plt+0x7c78>
   18f48:	cmp	r0, #0
   18f4c:	sub	r6, r4, ip
   18f50:	streq	r0, [r5]
   18f54:	cmp	r6, r2
   18f58:	bge	18f88 <__assert_fail@plt+0x7c58>
   18f5c:	adds	r4, ip, r2
   18f60:	bvs	18fbc <__assert_fail@plt+0x7c8c>
   18f64:	cmp	r4, r3
   18f68:	movle	r3, #0
   18f6c:	andgt	r3, lr, #1
   18f70:	cmp	r3, #0
   18f74:	bne	18fbc <__assert_fail@plt+0x7c8c>
   18f78:	smull	r8, r9, r4, r8
   18f7c:	cmp	r9, r8, asr #31
   18f80:	mov	r1, r8
   18f84:	bne	18fbc <__assert_fail@plt+0x7c8c>
   18f88:	bl	18d5c <__assert_fail@plt+0x7a2c>
   18f8c:	ldrd	r6, [sp, #8]
   18f90:	ldrd	r8, [sp, #16]
   18f94:	ldr	sl, [sp, #24]
   18f98:	str	r4, [r5]
   18f9c:	ldrd	r4, [sp]
   18fa0:	add	sp, sp, #28
   18fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   18fa8:	mov	r6, #64	; 0x40
   18fac:	sdiv	r4, r6, r8
   18fb0:	mls	r1, r8, r4, r6
   18fb4:	sub	r1, r6, r1
   18fb8:	b	18f48 <__assert_fail@plt+0x7c18>
   18fbc:	bl	19168 <__assert_fail@plt+0x7e38>
   18fc0:	mvn	r6, #-2147483648	; 0x80000000
   18fc4:	b	18fac <__assert_fail@plt+0x7c7c>
   18fc8:	mov	r1, #1
   18fcc:	str	r4, [sp, #-8]!
   18fd0:	str	lr, [sp, #4]
   18fd4:	bl	19be4 <__assert_fail@plt+0x88b4>
   18fd8:	cmp	r0, #0
   18fdc:	beq	18fec <__assert_fail@plt+0x7cbc>
   18fe0:	ldr	r4, [sp]
   18fe4:	add	sp, sp, #4
   18fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fec:	bl	19168 <__assert_fail@plt+0x7e38>
   18ff0:	mov	r1, #1
   18ff4:	str	r4, [sp, #-8]!
   18ff8:	str	lr, [sp, #4]
   18ffc:	bl	19be4 <__assert_fail@plt+0x88b4>
   19000:	cmp	r0, #0
   19004:	beq	19014 <__assert_fail@plt+0x7ce4>
   19008:	ldr	r4, [sp]
   1900c:	add	sp, sp, #4
   19010:	pop	{pc}		; (ldr pc, [sp], #4)
   19014:	bl	19168 <__assert_fail@plt+0x7e38>
   19018:	str	r4, [sp, #-8]!
   1901c:	str	lr, [sp, #4]
   19020:	bl	19be4 <__assert_fail@plt+0x88b4>
   19024:	cmp	r0, #0
   19028:	beq	19038 <__assert_fail@plt+0x7d08>
   1902c:	ldr	r4, [sp]
   19030:	add	sp, sp, #4
   19034:	pop	{pc}		; (ldr pc, [sp], #4)
   19038:	bl	19168 <__assert_fail@plt+0x7e38>
   1903c:	str	r4, [sp, #-8]!
   19040:	str	lr, [sp, #4]
   19044:	bl	19be4 <__assert_fail@plt+0x88b4>
   19048:	cmp	r0, #0
   1904c:	beq	1905c <__assert_fail@plt+0x7d2c>
   19050:	ldr	r4, [sp]
   19054:	add	sp, sp, #4
   19058:	pop	{pc}		; (ldr pc, [sp], #4)
   1905c:	bl	19168 <__assert_fail@plt+0x7e38>
   19060:	strd	r4, [sp, #-16]!
   19064:	mov	r4, r1
   19068:	str	r6, [sp, #8]
   1906c:	mov	r6, r0
   19070:	mov	r0, r1
   19074:	str	lr, [sp, #12]
   19078:	bl	19c58 <__assert_fail@plt+0x8928>
   1907c:	subs	r5, r0, #0
   19080:	beq	190a4 <__assert_fail@plt+0x7d74>
   19084:	mov	r2, r4
   19088:	mov	r1, r6
   1908c:	bl	11078 <memcpy@plt>
   19090:	mov	r0, r5
   19094:	ldrd	r4, [sp]
   19098:	ldr	r6, [sp, #8]
   1909c:	add	sp, sp, #12
   190a0:	pop	{pc}		; (ldr pc, [sp], #4)
   190a4:	bl	19168 <__assert_fail@plt+0x7e38>
   190a8:	strd	r4, [sp, #-16]!
   190ac:	mov	r4, r1
   190b0:	str	r6, [sp, #8]
   190b4:	mov	r6, r0
   190b8:	mov	r0, r1
   190bc:	str	lr, [sp, #12]
   190c0:	bl	19c58 <__assert_fail@plt+0x8928>
   190c4:	subs	r5, r0, #0
   190c8:	beq	190ec <__assert_fail@plt+0x7dbc>
   190cc:	mov	r2, r4
   190d0:	mov	r1, r6
   190d4:	bl	11078 <memcpy@plt>
   190d8:	mov	r0, r5
   190dc:	ldrd	r4, [sp]
   190e0:	ldr	r6, [sp, #8]
   190e4:	add	sp, sp, #12
   190e8:	pop	{pc}		; (ldr pc, [sp], #4)
   190ec:	bl	19168 <__assert_fail@plt+0x7e38>
   190f0:	strd	r4, [sp, #-16]!
   190f4:	mov	r4, r1
   190f8:	str	r6, [sp, #8]
   190fc:	mov	r6, r0
   19100:	add	r0, r1, #1
   19104:	str	lr, [sp, #12]
   19108:	bl	19c58 <__assert_fail@plt+0x8928>
   1910c:	subs	r5, r0, #0
   19110:	beq	1913c <__assert_fail@plt+0x7e0c>
   19114:	mov	r3, #0
   19118:	mov	r1, r6
   1911c:	mov	r2, r4
   19120:	strb	r3, [r5, r4]
   19124:	bl	11078 <memcpy@plt>
   19128:	mov	r0, r5
   1912c:	ldrd	r4, [sp]
   19130:	ldr	r6, [sp, #8]
   19134:	add	sp, sp, #12
   19138:	pop	{pc}		; (ldr pc, [sp], #4)
   1913c:	bl	19168 <__assert_fail@plt+0x7e38>
   19140:	str	r4, [sp, #-8]!
   19144:	mov	r4, r0
   19148:	str	lr, [sp, #4]
   1914c:	bl	111bc <strlen@plt>
   19150:	add	r1, r0, #1
   19154:	mov	r0, r4
   19158:	ldr	r4, [sp]
   1915c:	ldr	lr, [sp, #4]
   19160:	add	sp, sp, #8
   19164:	b	19060 <__assert_fail@plt+0x7d30>
   19168:	movw	r3, #49464	; 0xc138
   1916c:	movt	r3, #2
   19170:	str	r4, [sp, #-8]!
   19174:	ldr	r4, [r3]
   19178:	mov	r2, #5
   1917c:	movw	r1, #47712	; 0xba60
   19180:	movt	r1, #1
   19184:	mov	r0, #0
   19188:	str	lr, [sp, #4]
   1918c:	bl	110c0 <dcgettext@plt>
   19190:	mov	r3, r0
   19194:	movw	r2, #46448	; 0xb570
   19198:	movt	r2, #1
   1919c:	mov	r1, #0
   191a0:	mov	r0, r4
   191a4:	bl	11150 <error@plt>
   191a8:	bl	112e8 <abort@plt>
   191ac:	orr	r1, r1, #512	; 0x200
   191b0:	str	r4, [sp, #-8]!
   191b4:	str	lr, [sp, #4]
   191b8:	bl	1428c <__assert_fail@plt+0x2f5c>
   191bc:	cmp	r0, #0
   191c0:	beq	191d0 <__assert_fail@plt+0x7ea0>
   191c4:	ldr	r4, [sp]
   191c8:	add	sp, sp, #4
   191cc:	pop	{pc}		; (ldr pc, [sp], #4)
   191d0:	bl	111ec <__errno_location@plt>
   191d4:	ldr	r3, [r0]
   191d8:	cmp	r3, #22
   191dc:	beq	191e4 <__assert_fail@plt+0x7eb4>
   191e0:	bl	19168 <__assert_fail@plt+0x7e38>
   191e4:	movw	r3, #47732	; 0xba74
   191e8:	movt	r3, #1
   191ec:	movw	r1, #47744	; 0xba80
   191f0:	movt	r1, #1
   191f4:	movw	r0, #47756	; 0xba8c
   191f8:	movt	r0, #1
   191fc:	mov	r2, #41	; 0x29
   19200:	bl	11330 <__assert_fail@plt>
   19204:	ldr	r3, [r0, #48]	; 0x30
   19208:	and	r3, r3, #17
   1920c:	cmp	r3, #16
   19210:	beq	19234 <__assert_fail@plt+0x7f04>
   19214:	cmp	r3, #17
   19218:	beq	19224 <__assert_fail@plt+0x7ef4>
   1921c:	mov	r0, #0
   19220:	bx	lr
   19224:	ldr	r0, [r1, #48]	; 0x30
   19228:	adds	r0, r0, #0
   1922c:	movne	r0, #1
   19230:	bx	lr
   19234:	mov	r0, #1
   19238:	bx	lr
   1923c:	cmp	r2, #36	; 0x24
   19240:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19244:	strd	r6, [sp, #8]
   19248:	strd	r8, [sp, #16]
   1924c:	strd	sl, [sp, #24]
   19250:	str	lr, [sp, #32]
   19254:	sub	sp, sp, #36	; 0x24
   19258:	bhi	19ae8 <__assert_fail@plt+0x87b8>
   1925c:	cmp	r1, #0
   19260:	mov	r8, r2
   19264:	mov	r6, r0
   19268:	mov	r5, r1
   1926c:	mov	sl, r3
   19270:	addeq	r5, sp, #28
   19274:	bl	111ec <__errno_location@plt>
   19278:	mov	r3, #0
   1927c:	mov	r7, r0
   19280:	str	r3, [r0]
   19284:	bl	111a4 <__ctype_b_loc@plt>
   19288:	ldrb	r3, [r6]
   1928c:	mov	r2, r6
   19290:	ldr	r0, [r0]
   19294:	b	1929c <__assert_fail@plt+0x7f6c>
   19298:	ldrb	r3, [r2, #1]!
   1929c:	lsl	r1, r3, #1
   192a0:	ldrh	r4, [r0, r1]
   192a4:	ands	r4, r4, #8192	; 0x2000
   192a8:	bne	19298 <__assert_fail@plt+0x7f68>
   192ac:	cmp	r3, #45	; 0x2d
   192b0:	beq	19350 <__assert_fail@plt+0x8020>
   192b4:	mov	r2, r8
   192b8:	mov	r3, r4
   192bc:	mov	r1, r5
   192c0:	mov	r0, r6
   192c4:	bl	11084 <__strtoull_internal@plt>
   192c8:	ldr	fp, [r5]
   192cc:	mov	r9, r0
   192d0:	mov	r8, r1
   192d4:	cmp	fp, r6
   192d8:	beq	19338 <__assert_fail@plt+0x8008>
   192dc:	ldr	r4, [r7]
   192e0:	cmp	r4, #0
   192e4:	bne	19328 <__assert_fail@plt+0x7ff8>
   192e8:	ldr	r3, [sp, #72]	; 0x48
   192ec:	cmp	r3, #0
   192f0:	beq	19300 <__assert_fail@plt+0x7fd0>
   192f4:	ldrb	r6, [fp]
   192f8:	cmp	r6, #0
   192fc:	bne	19640 <__assert_fail@plt+0x8310>
   19300:	str	r9, [sl]
   19304:	str	r8, [sl, #4]
   19308:	mov	r0, r4
   1930c:	add	sp, sp, #36	; 0x24
   19310:	ldrd	r4, [sp]
   19314:	ldrd	r6, [sp, #8]
   19318:	ldrd	r8, [sp, #16]
   1931c:	ldrd	sl, [sp, #24]
   19320:	add	sp, sp, #32
   19324:	pop	{pc}		; (ldr pc, [sp], #4)
   19328:	cmp	r4, #34	; 0x22
   1932c:	bne	19350 <__assert_fail@plt+0x8020>
   19330:	mov	r4, #1
   19334:	b	192e8 <__assert_fail@plt+0x7fb8>
   19338:	ldr	r3, [sp, #72]	; 0x48
   1933c:	cmp	r3, #0
   19340:	beq	19350 <__assert_fail@plt+0x8020>
   19344:	ldrb	r6, [r6]
   19348:	cmp	r6, #0
   1934c:	bne	19358 <__assert_fail@plt+0x8028>
   19350:	mov	r4, #4
   19354:	b	19308 <__assert_fail@plt+0x7fd8>
   19358:	mov	r1, r6
   1935c:	mov	r0, r3
   19360:	bl	111c8 <strchr@plt>
   19364:	cmp	r0, #0
   19368:	movne	r9, #1
   1936c:	movne	r8, #0
   19370:	beq	19350 <__assert_fail@plt+0x8020>
   19374:	sub	r3, r6, #69	; 0x45
   19378:	cmp	r3, #47	; 0x2f
   1937c:	ldrls	pc, [pc, r3, lsl #2]
   19380:	b	19488 <__assert_fail@plt+0x8158>
   19384:	andeq	r9, r1, r4, asr #8
   19388:	andeq	r9, r1, r8, lsl #9
   1938c:	andeq	r9, r1, r4, asr #8
   19390:	andeq	r9, r1, r8, lsl #9
   19394:	andeq	r9, r1, r8, lsl #9
   19398:	andeq	r9, r1, r8, lsl #9
   1939c:	andeq	r9, r1, r4, asr #8
   193a0:	andeq	r9, r1, r8, lsl #9
   193a4:	andeq	r9, r1, r4, asr #8
   193a8:	andeq	r9, r1, r8, lsl #9
   193ac:	andeq	r9, r1, r8, lsl #9
   193b0:	andeq	r9, r1, r4, asr #8
   193b4:	andeq	r9, r1, r8, lsl #9
   193b8:	andeq	r9, r1, r8, lsl #9
   193bc:	andeq	r9, r1, r8, lsl #9
   193c0:	andeq	r9, r1, r4, asr #8
   193c4:	andeq	r9, r1, r8, lsl #9
   193c8:	andeq	r9, r1, r8, lsl #9
   193cc:	andeq	r9, r1, r8, lsl #9
   193d0:	andeq	r9, r1, r8, lsl #9
   193d4:	andeq	r9, r1, r4, asr #8
   193d8:	andeq	r9, r1, r4, asr #8
   193dc:	andeq	r9, r1, r8, lsl #9
   193e0:	andeq	r9, r1, r8, lsl #9
   193e4:	andeq	r9, r1, r8, lsl #9
   193e8:	andeq	r9, r1, r8, lsl #9
   193ec:	andeq	r9, r1, r8, lsl #9
   193f0:	andeq	r9, r1, r8, lsl #9
   193f4:	andeq	r9, r1, r8, lsl #9
   193f8:	andeq	r9, r1, r8, lsl #9
   193fc:	andeq	r9, r1, r8, lsl #9
   19400:	andeq	r9, r1, r8, lsl #9
   19404:	andeq	r9, r1, r8, lsl #9
   19408:	andeq	r9, r1, r8, lsl #9
   1940c:	andeq	r9, r1, r4, asr #8
   19410:	andeq	r9, r1, r8, lsl #9
   19414:	andeq	r9, r1, r8, lsl #9
   19418:	andeq	r9, r1, r8, lsl #9
   1941c:	andeq	r9, r1, r4, asr #8
   19420:	andeq	r9, r1, r8, lsl #9
   19424:	andeq	r9, r1, r4, asr #8
   19428:	andeq	r9, r1, r8, lsl #9
   1942c:	andeq	r9, r1, r8, lsl #9
   19430:	andeq	r9, r1, r8, lsl #9
   19434:	andeq	r9, r1, r8, lsl #9
   19438:	andeq	r9, r1, r8, lsl #9
   1943c:	andeq	r9, r1, r8, lsl #9
   19440:	andeq	r9, r1, r4, asr #8
   19444:	mov	r1, #48	; 0x30
   19448:	ldr	r0, [sp, #72]	; 0x48
   1944c:	bl	111c8 <strchr@plt>
   19450:	cmp	r0, #0
   19454:	beq	19488 <__assert_fail@plt+0x8158>
   19458:	ldrb	r3, [fp, #1]
   1945c:	cmp	r3, #68	; 0x44
   19460:	beq	199b4 <__assert_fail@plt+0x8684>
   19464:	cmp	r3, #105	; 0x69
   19468:	beq	19658 <__assert_fail@plt+0x8328>
   1946c:	cmp	r3, #66	; 0x42
   19470:	moveq	r3, #2
   19474:	movne	r3, #1
   19478:	moveq	r7, #1000	; 0x3e8
   1947c:	movne	r7, #1024	; 0x400
   19480:	str	r3, [sp, #4]
   19484:	b	19494 <__assert_fail@plt+0x8164>
   19488:	mov	r3, #1
   1948c:	mov	r7, #1024	; 0x400
   19490:	str	r3, [sp, #4]
   19494:	sub	r6, r6, #66	; 0x42
   19498:	cmp	r6, #53	; 0x35
   1949c:	ldrls	pc, [pc, r6, lsl #2]
   194a0:	b	19604 <__assert_fail@plt+0x82d4>
   194a4:	andeq	r9, r1, ip, asr r9
   194a8:	andeq	r9, r1, r4, lsl #12
   194ac:	andeq	r9, r1, r4, lsl #12
   194b0:	andeq	r9, r1, r8, ror #14
   194b4:	andeq	r9, r1, r4, lsl #12
   194b8:	andeq	r9, r1, ip, ror r5
   194bc:	andeq	r9, r1, r4, lsl #12
   194c0:	andeq	r9, r1, r4, lsl #12
   194c4:	andeq	r9, r1, r4, lsl #12
   194c8:	andeq	r9, r1, ip, lsl #12
   194cc:	andeq	r9, r1, r4, lsl #12
   194d0:	andeq	r9, r1, r8, lsl #18
   194d4:	andeq	r9, r1, r4, lsl #12
   194d8:	andeq	r9, r1, r4, lsl #12
   194dc:	andeq	r9, r1, r8, asr r8
   194e0:	andeq	r9, r1, r4, lsl #12
   194e4:	andeq	r9, r1, r4, lsl #12
   194e8:	andeq	r9, r1, r4, lsl #12
   194ec:	andeq	r9, r1, r0, ror #15
   194f0:	andeq	r9, r1, r4, lsl #12
   194f4:	andeq	r9, r1, r4, lsl #12
   194f8:	andeq	r9, r1, r4, lsl #12
   194fc:	andeq	r9, r1, r4, lsl #12
   19500:	strdeq	r9, [r1], -r0
   19504:	andeq	r9, r1, r4, ror r6
   19508:	andeq	r9, r1, r4, lsl #12
   1950c:	andeq	r9, r1, r4, lsl #12
   19510:	andeq	r9, r1, r4, lsl #12
   19514:	andeq	r9, r1, r4, lsl #12
   19518:	andeq	r9, r1, r4, lsl #12
   1951c:	andeq	r9, r1, r4, lsl #12
   19520:	andeq	r9, r1, r4, lsl #12
   19524:	andeq	r9, r1, r8, ror #17
   19528:	andeq	r9, r1, ip, ror #11
   1952c:	andeq	r9, r1, r4, lsl #12
   19530:	andeq	r9, r1, r4, lsl #12
   19534:	andeq	r9, r1, r4, lsl #12
   19538:	andeq	r9, r1, ip, ror r5
   1953c:	andeq	r9, r1, r4, lsl #12
   19540:	andeq	r9, r1, r4, lsl #12
   19544:	andeq	r9, r1, r4, lsl #12
   19548:	andeq	r9, r1, ip, lsl #12
   1954c:	andeq	r9, r1, r4, lsl #12
   19550:	andeq	r9, r1, r8, lsl #18
   19554:	andeq	r9, r1, r4, lsl #12
   19558:	andeq	r9, r1, r4, lsl #12
   1955c:	andeq	r9, r1, r4, lsl #12
   19560:	andeq	r9, r1, r4, lsl #12
   19564:	andeq	r9, r1, r4, lsl #12
   19568:	andeq	r9, r1, r4, lsl #12
   1956c:	andeq	r9, r1, r0, ror #15
   19570:	andeq	r9, r1, r4, lsl #12
   19574:	andeq	r9, r1, r4, lsl #12
   19578:	ldrdeq	r9, [r1], -r0
   1957c:	asr	r3, r7, #31
   19580:	mov	r2, r7
   19584:	cmp	r8, #0
   19588:	umull	r0, r1, r9, r7
   1958c:	mov	ip, #0
   19590:	strd	r2, [sp, #8]
   19594:	bne	199e8 <__assert_fail@plt+0x86b8>
   19598:	mov	r2, r0
   1959c:	mov	r3, r1
   195a0:	cmp	ip, #0
   195a4:	bne	19630 <__assert_fail@plt+0x8300>
   195a8:	cmp	r3, #0
   195ac:	mov	lr, ip
   195b0:	bne	19a4c <__assert_fail@plt+0x871c>
   195b4:	umull	r2, r3, r2, r7
   195b8:	mov	ip, r2
   195bc:	mov	r1, r3
   195c0:	subs	r0, lr, #0
   195c4:	bne	19630 <__assert_fail@plt+0x8300>
   195c8:	cmp	r1, #0
   195cc:	bne	19a2c <__assert_fail@plt+0x86fc>
   195d0:	umull	r2, r3, ip, r7
   195d4:	mov	r6, r2
   195d8:	mov	r2, r3
   195dc:	cmp	r0, #0
   195e0:	mov	r9, r6
   195e4:	mov	r8, r2
   195e8:	bne	19630 <__assert_fail@plt+0x8300>
   195ec:	ldr	r2, [sp, #4]
   195f0:	add	r3, fp, r2
   195f4:	str	r3, [r5]
   195f8:	ldrb	r3, [fp, r2]
   195fc:	cmp	r3, #0
   19600:	beq	19300 <__assert_fail@plt+0x7fd0>
   19604:	orr	r4, r4, #2
   19608:	b	19300 <__assert_fail@plt+0x7fd0>
   1960c:	cmp	r8, #0
   19610:	umull	r2, r3, r9, r7
   19614:	mov	ip, #0
   19618:	asr	r1, r7, #31
   1961c:	bne	19984 <__assert_fail@plt+0x8654>
   19620:	mov	r9, r2
   19624:	mov	r8, r3
   19628:	cmp	ip, #0
   1962c:	beq	195ec <__assert_fail@plt+0x82bc>
   19630:	mvn	r9, #0
   19634:	mov	r4, #1
   19638:	mov	r8, r9
   1963c:	b	195ec <__assert_fail@plt+0x82bc>
   19640:	mov	r1, r6
   19644:	ldr	r0, [sp, #72]	; 0x48
   19648:	bl	111c8 <strchr@plt>
   1964c:	cmp	r0, #0
   19650:	bne	19374 <__assert_fail@plt+0x8044>
   19654:	b	19604 <__assert_fail@plt+0x82d4>
   19658:	ldrb	r3, [fp, #2]
   1965c:	mov	r7, #1024	; 0x400
   19660:	cmp	r3, #66	; 0x42
   19664:	movne	r3, #1
   19668:	moveq	r3, #3
   1966c:	str	r3, [sp, #4]
   19670:	b	19494 <__assert_fail@plt+0x8164>
   19674:	asr	r3, r7, #31
   19678:	mov	r2, r7
   1967c:	mov	ip, #0
   19680:	mov	r0, #7
   19684:	mov	lr, ip
   19688:	mov	r6, r4
   1968c:	strd	r2, [sp, #8]
   19690:	str	r5, [sp, #16]
   19694:	b	196c0 <__assert_fail@plt+0x8390>
   19698:	umull	r2, r3, r9, r7
   1969c:	mov	r9, r2
   196a0:	mov	r8, r3
   196a4:	cmp	r1, #0
   196a8:	beq	196b8 <__assert_fail@plt+0x8388>
   196ac:	mvn	r9, #0
   196b0:	mov	ip, #1
   196b4:	mov	r8, r9
   196b8:	subs	r0, r0, #1
   196bc:	beq	199a8 <__assert_fail@plt+0x8678>
   196c0:	cmp	r8, #0
   196c4:	mov	r1, #0
   196c8:	beq	19698 <__assert_fail@plt+0x8368>
   196cc:	umull	r4, r5, r9, r7
   196d0:	mov	r3, lr
   196d4:	mov	r2, r5
   196d8:	umlal	r2, r3, r8, r7
   196dc:	cmp	r3, #0
   196e0:	bne	19b08 <__assert_fail@plt+0x87d8>
   196e4:	mov	r9, r4
   196e8:	mov	r8, r2
   196ec:	b	196a4 <__assert_fail@plt+0x8374>
   196f0:	asr	r3, r7, #31
   196f4:	mov	r2, r7
   196f8:	mov	r6, #0
   196fc:	mov	lr, #8
   19700:	mov	r0, r4
   19704:	mov	ip, r5
   19708:	strd	r2, [sp, #8]
   1970c:	b	19738 <__assert_fail@plt+0x8408>
   19710:	umull	r2, r3, r9, r7
   19714:	mov	r9, r2
   19718:	mov	r8, r3
   1971c:	cmp	r1, #0
   19720:	beq	19730 <__assert_fail@plt+0x8400>
   19724:	mvn	r9, #0
   19728:	mov	r6, #1
   1972c:	mov	r8, r9
   19730:	subs	lr, lr, #1
   19734:	beq	19978 <__assert_fail@plt+0x8648>
   19738:	cmp	r8, #0
   1973c:	mov	r1, #0
   19740:	beq	19710 <__assert_fail@plt+0x83e0>
   19744:	umull	r4, r5, r9, r7
   19748:	mov	r3, #0
   1974c:	mov	r2, r5
   19750:	umlal	r2, r3, r8, r7
   19754:	cmp	r3, #0
   19758:	bne	19b60 <__assert_fail@plt+0x8830>
   1975c:	mov	r9, r4
   19760:	mov	r8, r2
   19764:	b	1971c <__assert_fail@plt+0x83ec>
   19768:	asr	r3, r7, #31
   1976c:	mov	r2, r7
   19770:	mov	r6, #0
   19774:	mov	lr, #6
   19778:	mov	r0, r4
   1977c:	mov	ip, r5
   19780:	strd	r2, [sp, #8]
   19784:	b	197b0 <__assert_fail@plt+0x8480>
   19788:	umull	r2, r3, r9, r7
   1978c:	mov	r9, r2
   19790:	mov	r8, r3
   19794:	cmp	r1, #0
   19798:	beq	197a8 <__assert_fail@plt+0x8478>
   1979c:	mvn	r9, #0
   197a0:	mov	r6, #1
   197a4:	mov	r8, r9
   197a8:	subs	lr, lr, #1
   197ac:	beq	19978 <__assert_fail@plt+0x8648>
   197b0:	cmp	r8, #0
   197b4:	mov	r1, #0
   197b8:	beq	19788 <__assert_fail@plt+0x8458>
   197bc:	umull	r4, r5, r9, r7
   197c0:	mov	r3, #0
   197c4:	mov	r2, r5
   197c8:	umlal	r2, r3, r8, r7
   197cc:	cmp	r3, #0
   197d0:	bne	19b28 <__assert_fail@plt+0x87f8>
   197d4:	mov	r9, r4
   197d8:	mov	r8, r2
   197dc:	b	19794 <__assert_fail@plt+0x8464>
   197e0:	asr	r3, r7, #31
   197e4:	mov	r2, r7
   197e8:	mov	r6, #0
   197ec:	mov	lr, #4
   197f0:	mov	r0, r4
   197f4:	mov	ip, r5
   197f8:	strd	r2, [sp, #8]
   197fc:	b	19828 <__assert_fail@plt+0x84f8>
   19800:	umull	r2, r3, r9, r7
   19804:	mov	r9, r2
   19808:	mov	r8, r3
   1980c:	cmp	r1, #0
   19810:	beq	19820 <__assert_fail@plt+0x84f0>
   19814:	mvn	r9, #0
   19818:	mov	r6, #1
   1981c:	mov	r8, r9
   19820:	subs	lr, lr, #1
   19824:	beq	19978 <__assert_fail@plt+0x8648>
   19828:	cmp	r8, #0
   1982c:	mov	r1, #0
   19830:	beq	19800 <__assert_fail@plt+0x84d0>
   19834:	umull	r4, r5, r9, r7
   19838:	mov	r3, #0
   1983c:	mov	r2, r5
   19840:	umlal	r2, r3, r8, r7
   19844:	cmp	r3, #0
   19848:	bne	19b44 <__assert_fail@plt+0x8814>
   1984c:	mov	r9, r4
   19850:	mov	r8, r2
   19854:	b	1980c <__assert_fail@plt+0x84dc>
   19858:	asr	r3, r7, #31
   1985c:	mov	r2, r7
   19860:	mov	r6, #0
   19864:	mov	lr, #5
   19868:	mov	r0, r4
   1986c:	mov	ip, r5
   19870:	strd	r2, [sp, #8]
   19874:	b	198a0 <__assert_fail@plt+0x8570>
   19878:	umull	r2, r3, r9, r7
   1987c:	mov	r9, r2
   19880:	mov	r8, r3
   19884:	cmp	r1, #0
   19888:	beq	19898 <__assert_fail@plt+0x8568>
   1988c:	mvn	r9, #0
   19890:	mov	r6, #1
   19894:	mov	r8, r9
   19898:	subs	lr, lr, #1
   1989c:	beq	19978 <__assert_fail@plt+0x8648>
   198a0:	cmp	r8, #0
   198a4:	mov	r1, #0
   198a8:	beq	19878 <__assert_fail@plt+0x8548>
   198ac:	umull	r4, r5, r9, r7
   198b0:	mov	r3, #0
   198b4:	mov	r2, r5
   198b8:	umlal	r2, r3, r8, r7
   198bc:	cmp	r3, #0
   198c0:	bne	19ab0 <__assert_fail@plt+0x8780>
   198c4:	mov	r9, r4
   198c8:	mov	r8, r2
   198cc:	b	19884 <__assert_fail@plt+0x8554>
   198d0:	lsr	r3, r8, #31
   198d4:	adds	r9, r9, r9
   198d8:	adc	r8, r8, r8
   198dc:	cmp	r3, #0
   198e0:	beq	195ec <__assert_fail@plt+0x82bc>
   198e4:	b	19630 <__assert_fail@plt+0x8300>
   198e8:	lsr	r3, r8, #23
   198ec:	lsl	r8, r8, #9
   198f0:	cmp	r3, #0
   198f4:	lsl	r3, r9, #9
   198f8:	orr	r8, r8, r9, lsr #23
   198fc:	bne	19630 <__assert_fail@plt+0x8300>
   19900:	mov	r9, r3
   19904:	b	195ec <__assert_fail@plt+0x82bc>
   19908:	asr	r3, r7, #31
   1990c:	mov	r2, r7
   19910:	cmp	r8, #0
   19914:	mov	r1, #0
   19918:	strd	r2, [sp, #8]
   1991c:	umull	r2, r3, r9, r7
   19920:	bne	199c4 <__assert_fail@plt+0x8694>
   19924:	mov	r0, r2
   19928:	mov	ip, r3
   1992c:	cmp	r1, #0
   19930:	bne	19630 <__assert_fail@plt+0x8300>
   19934:	cmp	ip, #0
   19938:	bne	19a0c <__assert_fail@plt+0x86dc>
   1993c:	umull	r2, r3, r0, r7
   19940:	mov	r6, r2
   19944:	mov	r2, r3
   19948:	cmp	r1, #0
   1994c:	mov	r9, r6
   19950:	mov	r8, r2
   19954:	beq	195ec <__assert_fail@plt+0x82bc>
   19958:	b	19630 <__assert_fail@plt+0x8300>
   1995c:	lsr	r3, r8, #22
   19960:	lsl	r8, r8, #10
   19964:	cmp	r3, #0
   19968:	lsl	r3, r9, #10
   1996c:	orr	r8, r8, r9, lsr #22
   19970:	beq	19900 <__assert_fail@plt+0x85d0>
   19974:	b	19630 <__assert_fail@plt+0x8300>
   19978:	mov	r5, ip
   1997c:	orr	r4, r0, r6
   19980:	b	195ec <__assert_fail@plt+0x82bc>
   19984:	strd	r2, [sp, #8]
   19988:	mov	r3, ip
   1998c:	ldr	r2, [sp, #12]
   19990:	umlal	r2, r3, r8, r7
   19994:	cmp	r3, #0
   19998:	bne	19acc <__assert_fail@plt+0x879c>
   1999c:	mov	r8, r2
   199a0:	ldr	r9, [sp, #8]
   199a4:	b	19628 <__assert_fail@plt+0x82f8>
   199a8:	orr	r4, r6, ip
   199ac:	ldr	r5, [sp, #16]
   199b0:	b	195ec <__assert_fail@plt+0x82bc>
   199b4:	mov	r3, #2
   199b8:	mov	r7, #1000	; 0x3e8
   199bc:	str	r3, [sp, #4]
   199c0:	b	19494 <__assert_fail@plt+0x8164>
   199c4:	strd	r2, [sp, #16]
   199c8:	mov	r3, r1
   199cc:	ldr	r2, [sp, #20]
   199d0:	umlal	r2, r3, r8, r7
   199d4:	cmp	r3, #0
   199d8:	bne	19b9c <__assert_fail@plt+0x886c>
   199dc:	mov	ip, r2
   199e0:	ldr	r0, [sp, #16]
   199e4:	b	1992c <__assert_fail@plt+0x85fc>
   199e8:	mov	r2, r1
   199ec:	mov	r3, ip
   199f0:	umlal	r2, r3, r8, r7
   199f4:	cmp	r3, #0
   199f8:	strd	r2, [sp, #16]
   199fc:	bne	19a70 <__assert_fail@plt+0x8740>
   19a00:	mov	r2, r0
   19a04:	ldr	r3, [sp, #16]
   19a08:	b	195a0 <__assert_fail@plt+0x8270>
   19a0c:	umull	r8, r9, r0, r7
   19a10:	mov	r3, r1
   19a14:	mov	r2, r9
   19a18:	umlal	r2, r3, ip, r7
   19a1c:	cmp	r3, #0
   19a20:	bne	19b7c <__assert_fail@plt+0x884c>
   19a24:	mov	r6, r8
   19a28:	b	19948 <__assert_fail@plt+0x8618>
   19a2c:	umull	r8, r9, ip, r7
   19a30:	mov	r3, r0
   19a34:	mov	r2, r9
   19a38:	umlal	r2, r3, r1, r7
   19a3c:	cmp	r3, #0
   19a40:	bne	19bc4 <__assert_fail@plt+0x8894>
   19a44:	mov	r6, r8
   19a48:	b	195dc <__assert_fail@plt+0x82ac>
   19a4c:	umull	r8, r9, r2, r7
   19a50:	mov	r1, ip
   19a54:	mov	r0, r9
   19a58:	umlal	r0, r1, r3, r7
   19a5c:	cmp	r1, #0
   19a60:	bne	19a90 <__assert_fail@plt+0x8760>
   19a64:	mov	ip, r8
   19a68:	mov	r1, r0
   19a6c:	b	195c0 <__assert_fail@plt+0x8290>
   19a70:	ldr	lr, [sp, #8]
   19a74:	mov	r2, r0
   19a78:	mov	ip, #1
   19a7c:	ldr	r3, [sp, #12]
   19a80:	mul	r3, r9, r3
   19a84:	mla	r3, lr, r8, r3
   19a88:	add	r3, r3, r1
   19a8c:	b	195a0 <__assert_fail@plt+0x8270>
   19a90:	ldr	r1, [sp, #12]
   19a94:	mov	lr, #1
   19a98:	mov	ip, r8
   19a9c:	mul	r1, r2, r1
   19aa0:	ldr	r2, [sp, #8]
   19aa4:	mla	r1, r3, r2, r1
   19aa8:	add	r1, r1, r9
   19aac:	b	195c0 <__assert_fail@plt+0x8290>
   19ab0:	ldrd	r2, [sp, #8]
   19ab4:	mov	r1, #1
   19ab8:	mul	r3, r9, r3
   19abc:	mov	r9, r4
   19ac0:	mla	r8, r2, r8, r3
   19ac4:	add	r8, r8, r5
   19ac8:	b	19884 <__assert_fail@plt+0x8554>
   19acc:	mul	r3, r9, r1
   19ad0:	mov	ip, #1
   19ad4:	mla	r8, r7, r8, r3
   19ad8:	ldrd	r6, [sp, #8]
   19adc:	mov	r9, r6
   19ae0:	add	r8, r8, r7
   19ae4:	b	19628 <__assert_fail@plt+0x82f8>
   19ae8:	movw	r3, #47772	; 0xba9c
   19aec:	movt	r3, #1
   19af0:	movw	r1, #47784	; 0xbaa8
   19af4:	movt	r1, #1
   19af8:	movw	r0, #47800	; 0xbab8
   19afc:	movt	r0, #1
   19b00:	mov	r2, #85	; 0x55
   19b04:	bl	11330 <__assert_fail@plt>
   19b08:	ldr	r3, [sp, #12]
   19b0c:	mov	r1, #1
   19b10:	mul	r2, r9, r3
   19b14:	ldr	r3, [sp, #8]
   19b18:	mov	r9, r4
   19b1c:	mla	r8, r3, r8, r2
   19b20:	add	r8, r8, r5
   19b24:	b	196a4 <__assert_fail@plt+0x8374>
   19b28:	ldrd	r2, [sp, #8]
   19b2c:	mov	r1, #1
   19b30:	mul	r3, r9, r3
   19b34:	mov	r9, r4
   19b38:	mla	r8, r2, r8, r3
   19b3c:	add	r8, r8, r5
   19b40:	b	19794 <__assert_fail@plt+0x8464>
   19b44:	ldrd	r2, [sp, #8]
   19b48:	mov	r1, #1
   19b4c:	mul	r3, r9, r3
   19b50:	mov	r9, r4
   19b54:	mla	r8, r2, r8, r3
   19b58:	add	r8, r8, r5
   19b5c:	b	1980c <__assert_fail@plt+0x84dc>
   19b60:	ldrd	r2, [sp, #8]
   19b64:	mov	r1, #1
   19b68:	mul	r3, r9, r3
   19b6c:	mov	r9, r4
   19b70:	mla	r8, r2, r8, r3
   19b74:	add	r8, r8, r5
   19b78:	b	1971c <__assert_fail@plt+0x83ec>
   19b7c:	ldr	r3, [sp, #12]
   19b80:	mov	r6, r8
   19b84:	mov	r1, #1
   19b88:	mul	r2, r0, r3
   19b8c:	ldr	r3, [sp, #8]
   19b90:	mla	r2, ip, r3, r2
   19b94:	add	r2, r2, r9
   19b98:	b	19948 <__assert_fail@plt+0x8618>
   19b9c:	ldr	r3, [sp, #12]
   19ba0:	mov	r1, #1
   19ba4:	ldr	r2, [sp, #16]
   19ba8:	mul	ip, r9, r3
   19bac:	ldr	r3, [sp, #8]
   19bb0:	mov	r0, r2
   19bb4:	mla	ip, r3, r8, ip
   19bb8:	ldr	r3, [sp, #20]
   19bbc:	add	ip, ip, r3
   19bc0:	b	1992c <__assert_fail@plt+0x85fc>
   19bc4:	ldr	r3, [sp, #12]
   19bc8:	mov	r6, r8
   19bcc:	mov	r0, #1
   19bd0:	mul	r2, ip, r3
   19bd4:	ldr	r3, [sp, #8]
   19bd8:	mla	r2, r1, r3, r2
   19bdc:	add	r2, r2, r9
   19be0:	b	195dc <__assert_fail@plt+0x82ac>
   19be4:	cmp	r1, #0
   19be8:	cmpne	r0, #0
   19bec:	beq	19c38 <__assert_fail@plt+0x8908>
   19bf0:	strd	r4, [sp, #-16]!
   19bf4:	umull	r4, r5, r0, r1
   19bf8:	str	r6, [sp, #8]
   19bfc:	str	lr, [sp, #12]
   19c00:	adds	r3, r5, #0
   19c04:	movne	r3, #1
   19c08:	cmp	r4, #0
   19c0c:	blt	19c18 <__assert_fail@plt+0x88e8>
   19c10:	cmp	r3, #0
   19c14:	beq	19c44 <__assert_fail@plt+0x8914>
   19c18:	bl	111ec <__errno_location@plt>
   19c1c:	mov	r3, #12
   19c20:	ldrd	r4, [sp]
   19c24:	ldr	r6, [sp, #8]
   19c28:	add	sp, sp, #12
   19c2c:	str	r3, [r0]
   19c30:	mov	r0, #0
   19c34:	pop	{pc}		; (ldr pc, [sp], #4)
   19c38:	mov	r1, #1
   19c3c:	mov	r0, r1
   19c40:	b	10ff4 <calloc@plt>
   19c44:	ldrd	r4, [sp]
   19c48:	ldr	r6, [sp, #8]
   19c4c:	ldr	lr, [sp, #12]
   19c50:	add	sp, sp, #16
   19c54:	b	10ff4 <calloc@plt>
   19c58:	cmp	r0, #0
   19c5c:	beq	19c68 <__assert_fail@plt+0x8938>
   19c60:	blt	19c70 <__assert_fail@plt+0x8940>
   19c64:	b	11168 <malloc@plt>
   19c68:	mov	r0, #1
   19c6c:	b	11168 <malloc@plt>
   19c70:	str	r4, [sp, #-8]!
   19c74:	str	lr, [sp, #4]
   19c78:	bl	111ec <__errno_location@plt>
   19c7c:	mov	r3, #12
   19c80:	ldr	r4, [sp]
   19c84:	add	sp, sp, #4
   19c88:	str	r3, [r0]
   19c8c:	mov	r0, #0
   19c90:	pop	{pc}		; (ldr pc, [sp], #4)
   19c94:	cmp	r0, #0
   19c98:	beq	19cc0 <__assert_fail@plt+0x8990>
   19c9c:	cmp	r1, #0
   19ca0:	str	r4, [sp, #-8]!
   19ca4:	str	lr, [sp, #4]
   19ca8:	beq	19cc8 <__assert_fail@plt+0x8998>
   19cac:	blt	19cdc <__assert_fail@plt+0x89ac>
   19cb0:	ldr	r4, [sp]
   19cb4:	ldr	lr, [sp, #4]
   19cb8:	add	sp, sp, #8
   19cbc:	b	110cc <realloc@plt>
   19cc0:	mov	r0, r1
   19cc4:	b	19c58 <__assert_fail@plt+0x8928>
   19cc8:	bl	12ce8 <__assert_fail@plt+0x19b8>
   19ccc:	ldr	r4, [sp]
   19cd0:	add	sp, sp, #4
   19cd4:	mov	r0, #0
   19cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cdc:	bl	111ec <__errno_location@plt>
   19ce0:	mov	r3, #12
   19ce4:	str	r3, [r0]
   19ce8:	b	19ccc <__assert_fail@plt+0x899c>
   19cec:	strd	r4, [sp, #-16]!
   19cf0:	mov	r4, r0
   19cf4:	str	r6, [sp, #8]
   19cf8:	str	lr, [sp, #12]
   19cfc:	bl	11138 <__fpending@plt>
   19d00:	ldr	r5, [r4]
   19d04:	mov	r6, r0
   19d08:	mov	r0, r4
   19d0c:	bl	19e94 <__assert_fail@plt+0x8b64>
   19d10:	mov	r4, r0
   19d14:	and	r5, r5, #32
   19d18:	cmp	r5, #0
   19d1c:	bne	19d54 <__assert_fail@plt+0x8a24>
   19d20:	cmp	r0, #0
   19d24:	beq	19d40 <__assert_fail@plt+0x8a10>
   19d28:	cmp	r6, #0
   19d2c:	bne	19d6c <__assert_fail@plt+0x8a3c>
   19d30:	bl	111ec <__errno_location@plt>
   19d34:	ldr	r4, [r0]
   19d38:	subs	r4, r4, #9
   19d3c:	mvnne	r4, #0
   19d40:	mov	r0, r4
   19d44:	ldrd	r4, [sp]
   19d48:	ldr	r6, [sp, #8]
   19d4c:	add	sp, sp, #12
   19d50:	pop	{pc}		; (ldr pc, [sp], #4)
   19d54:	cmp	r0, #0
   19d58:	bne	19d6c <__assert_fail@plt+0x8a3c>
   19d5c:	bl	111ec <__errno_location@plt>
   19d60:	str	r4, [r0]
   19d64:	mvn	r4, #0
   19d68:	b	19d40 <__assert_fail@plt+0x8a10>
   19d6c:	mvn	r4, #0
   19d70:	b	19d40 <__assert_fail@plt+0x8a10>
   19d74:	movw	r3, #62998	; 0xf616
   19d78:	movt	r3, #149	; 0x95
   19d7c:	strd	r4, [sp, #-8]!
   19d80:	mov	r4, #0
   19d84:	mov	r5, #0
   19d88:	strd	r4, [r0, #16]
   19d8c:	str	r3, [r0, #24]
   19d90:	ldrd	r4, [sp]
   19d94:	add	sp, sp, #8
   19d98:	bx	lr
   19d9c:	ldr	r2, [r0, #24]
   19da0:	movw	r3, #62998	; 0xf616
   19da4:	movt	r3, #149	; 0x95
   19da8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19dac:	strd	r6, [sp, #8]
   19db0:	strd	r8, [sp, #16]
   19db4:	strd	sl, [sp, #24]
   19db8:	cmp	r2, r3
   19dbc:	str	lr, [sp, #32]
   19dc0:	sub	sp, sp, #4
   19dc4:	bne	19e74 <__assert_fail@plt+0x8b44>
   19dc8:	ldrd	r6, [r0, #16]
   19dcc:	ldrd	sl, [r1, #96]	; 0x60
   19dd0:	orrs	r3, r6, r7
   19dd4:	beq	19e28 <__assert_fail@plt+0x8af8>
   19dd8:	ldrd	r2, [r0]
   19ddc:	cmp	r3, fp
   19de0:	cmpeq	r2, sl
   19de4:	beq	19e48 <__assert_fail@plt+0x8b18>
   19de8:	adds	r8, r6, #1
   19dec:	adc	r9, r7, #0
   19df0:	and	r2, r6, r8
   19df4:	and	r3, r7, r9
   19df8:	orrs	r3, r2, r3
   19dfc:	strd	r8, [r0, #16]
   19e00:	movne	r1, #0
   19e04:	beq	19e64 <__assert_fail@plt+0x8b34>
   19e08:	mov	r0, r1
   19e0c:	add	sp, sp, #4
   19e10:	ldrd	r4, [sp]
   19e14:	ldrd	r6, [sp, #8]
   19e18:	ldrd	r8, [sp, #16]
   19e1c:	ldrd	sl, [sp, #24]
   19e20:	add	sp, sp, #32
   19e24:	pop	{pc}		; (ldr pc, [sp], #4)
   19e28:	mov	r2, #1
   19e2c:	mov	r3, #0
   19e30:	strd	r2, [r0, #16]
   19e34:	ldrd	r2, [r1]
   19e38:	mov	r1, #0
   19e3c:	strd	sl, [r0]
   19e40:	strd	r2, [r0, #8]
   19e44:	b	19e08 <__assert_fail@plt+0x8ad8>
   19e48:	ldrd	r4, [r1]
   19e4c:	ldrd	r2, [r0, #8]
   19e50:	cmp	r5, r3
   19e54:	cmpeq	r4, r2
   19e58:	bne	19de8 <__assert_fail@plt+0x8ab8>
   19e5c:	mov	r1, #1
   19e60:	b	19e08 <__assert_fail@plt+0x8ad8>
   19e64:	orrs	r3, r8, r9
   19e68:	bne	19e34 <__assert_fail@plt+0x8b04>
   19e6c:	mov	r1, #1
   19e70:	b	19e08 <__assert_fail@plt+0x8ad8>
   19e74:	movw	r3, #47840	; 0xbae0
   19e78:	movt	r3, #1
   19e7c:	movw	r1, #47852	; 0xbaec
   19e80:	movt	r1, #1
   19e84:	movw	r0, #47872	; 0xbb00
   19e88:	movt	r0, #1
   19e8c:	mov	r2, #60	; 0x3c
   19e90:	bl	11330 <__assert_fail@plt>
   19e94:	strd	r4, [sp, #-12]!
   19e98:	mov	r4, r0
   19e9c:	str	lr, [sp, #8]
   19ea0:	sub	sp, sp, #12
   19ea4:	bl	1121c <fileno@plt>
   19ea8:	cmp	r0, #0
   19eac:	mov	r0, r4
   19eb0:	blt	19f34 <__assert_fail@plt+0x8c04>
   19eb4:	bl	11180 <__freading@plt>
   19eb8:	cmp	r0, #0
   19ebc:	bne	19f00 <__assert_fail@plt+0x8bd0>
   19ec0:	mov	r0, r4
   19ec4:	bl	1a170 <__assert_fail@plt+0x8e40>
   19ec8:	cmp	r0, #0
   19ecc:	beq	19f30 <__assert_fail@plt+0x8c00>
   19ed0:	bl	111ec <__errno_location@plt>
   19ed4:	mov	r5, r0
   19ed8:	mov	r0, r4
   19edc:	ldr	r4, [r5]
   19ee0:	bl	11234 <fclose@plt>
   19ee4:	cmp	r4, #0
   19ee8:	mvnne	r0, #0
   19eec:	strne	r4, [r5]
   19ef0:	add	sp, sp, #12
   19ef4:	ldrd	r4, [sp]
   19ef8:	add	sp, sp, #8
   19efc:	pop	{pc}		; (ldr pc, [sp], #4)
   19f00:	mov	r0, r4
   19f04:	bl	1121c <fileno@plt>
   19f08:	mov	r1, #1
   19f0c:	mov	r2, #0
   19f10:	mov	r3, #0
   19f14:	str	r1, [sp]
   19f18:	bl	11114 <lseek64@plt>
   19f1c:	mvn	r3, #0
   19f20:	mvn	r2, #0
   19f24:	cmp	r1, r3
   19f28:	cmpeq	r0, r2
   19f2c:	bne	19ec0 <__assert_fail@plt+0x8b90>
   19f30:	mov	r0, r4
   19f34:	add	sp, sp, #12
   19f38:	ldrd	r4, [sp]
   19f3c:	ldr	lr, [sp, #8]
   19f40:	add	sp, sp, #12
   19f44:	b	11234 <fclose@plt>
   19f48:	push	{r1, r2, r3}
   19f4c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19f50:	strd	r6, [sp, #8]
   19f54:	str	lr, [sp, #16]
   19f58:	sub	sp, sp, #8
   19f5c:	ldr	r1, [sp, #28]
   19f60:	add	r2, sp, #32
   19f64:	str	r2, [sp, #4]
   19f68:	cmp	r1, #0
   19f6c:	beq	1a048 <__assert_fail@plt+0x8d18>
   19f70:	movw	r3, #1030	; 0x406
   19f74:	mov	r6, r0
   19f78:	cmp	r1, r3
   19f7c:	beq	1a058 <__assert_fail@plt+0x8d28>
   19f80:	cmp	r1, #11
   19f84:	beq	1a000 <__assert_fail@plt+0x8cd0>
   19f88:	ble	19fe0 <__assert_fail@plt+0x8cb0>
   19f8c:	movw	r2, #1031	; 0x407
   19f90:	cmp	r1, r2
   19f94:	bgt	1a01c <__assert_fail@plt+0x8cec>
   19f98:	cmp	r1, r3
   19f9c:	bge	19fac <__assert_fail@plt+0x8c7c>
   19fa0:	movw	r3, #1025	; 0x401
   19fa4:	cmp	r1, r3
   19fa8:	beq	1a000 <__assert_fail@plt+0x8cd0>
   19fac:	ldr	r3, [sp, #4]
   19fb0:	mov	r0, r6
   19fb4:	ldr	r2, [r3]
   19fb8:	bl	1124c <fcntl64@plt>
   19fbc:	mov	r4, r0
   19fc0:	mov	r0, r4
   19fc4:	add	sp, sp, #8
   19fc8:	ldrd	r4, [sp]
   19fcc:	ldrd	r6, [sp, #8]
   19fd0:	ldr	lr, [sp, #16]
   19fd4:	add	sp, sp, #20
   19fd8:	add	sp, sp, #12
   19fdc:	bx	lr
   19fe0:	cmp	r1, #4
   19fe4:	beq	19fac <__assert_fail@plt+0x8c7c>
   19fe8:	bgt	1a010 <__assert_fail@plt+0x8ce0>
   19fec:	cmp	r1, #2
   19ff0:	beq	19fac <__assert_fail@plt+0x8c7c>
   19ff4:	bgt	1a000 <__assert_fail@plt+0x8cd0>
   19ff8:	cmp	r1, #1
   19ffc:	bne	19fac <__assert_fail@plt+0x8c7c>
   1a000:	mov	r0, r6
   1a004:	bl	1124c <fcntl64@plt>
   1a008:	mov	r4, r0
   1a00c:	b	19fc0 <__assert_fail@plt+0x8c90>
   1a010:	cmp	r1, #9
   1a014:	bne	19fac <__assert_fail@plt+0x8c7c>
   1a018:	b	1a000 <__assert_fail@plt+0x8cd0>
   1a01c:	movw	r3, #1033	; 0x409
   1a020:	cmp	r1, r3
   1a024:	beq	19fac <__assert_fail@plt+0x8c7c>
   1a028:	blt	1a000 <__assert_fail@plt+0x8cd0>
   1a02c:	movw	r3, #1034	; 0x40a
   1a030:	cmp	r1, r3
   1a034:	bne	19fac <__assert_fail@plt+0x8c7c>
   1a038:	mov	r0, r6
   1a03c:	bl	1124c <fcntl64@plt>
   1a040:	mov	r4, r0
   1a044:	b	19fc0 <__assert_fail@plt+0x8c90>
   1a048:	ldr	r2, [sp, #32]
   1a04c:	bl	1124c <fcntl64@plt>
   1a050:	mov	r4, r0
   1a054:	b	19fc0 <__assert_fail@plt+0x8c90>
   1a058:	movw	r5, #49908	; 0xc2f4
   1a05c:	movt	r5, #2
   1a060:	ldr	r7, [r2]
   1a064:	add	r2, sp, #36	; 0x24
   1a068:	ldr	r3, [r5]
   1a06c:	str	r2, [sp, #4]
   1a070:	mov	r2, r7
   1a074:	cmp	r3, #0
   1a078:	blt	1a094 <__assert_fail@plt+0x8d64>
   1a07c:	bl	1124c <fcntl64@plt>
   1a080:	subs	r4, r0, #0
   1a084:	blt	1a0fc <__assert_fail@plt+0x8dcc>
   1a088:	mov	r3, #1
   1a08c:	str	r3, [r5]
   1a090:	b	19fc0 <__assert_fail@plt+0x8c90>
   1a094:	mov	r1, #0
   1a098:	bl	1124c <fcntl64@plt>
   1a09c:	subs	r4, r0, #0
   1a0a0:	blt	19fc0 <__assert_fail@plt+0x8c90>
   1a0a4:	ldr	r3, [r5]
   1a0a8:	cmn	r3, #1
   1a0ac:	bne	19fc0 <__assert_fail@plt+0x8c90>
   1a0b0:	mov	r1, #1
   1a0b4:	mov	r0, r4
   1a0b8:	bl	1124c <fcntl64@plt>
   1a0bc:	subs	r2, r0, #0
   1a0c0:	blt	1a0dc <__assert_fail@plt+0x8dac>
   1a0c4:	orr	r2, r2, #1
   1a0c8:	mov	r1, #2
   1a0cc:	mov	r0, r4
   1a0d0:	bl	1124c <fcntl64@plt>
   1a0d4:	cmn	r0, #1
   1a0d8:	bne	19fc0 <__assert_fail@plt+0x8c90>
   1a0dc:	bl	111ec <__errno_location@plt>
   1a0e0:	mov	r5, r0
   1a0e4:	mov	r0, r4
   1a0e8:	ldr	r6, [r5]
   1a0ec:	mvn	r4, #0
   1a0f0:	bl	112f4 <close@plt>
   1a0f4:	str	r6, [r5]
   1a0f8:	b	19fc0 <__assert_fail@plt+0x8c90>
   1a0fc:	bl	111ec <__errno_location@plt>
   1a100:	ldr	r3, [r0]
   1a104:	cmp	r3, #22
   1a108:	bne	1a088 <__assert_fail@plt+0x8d58>
   1a10c:	mov	r2, r7
   1a110:	mov	r0, r6
   1a114:	mov	r1, #0
   1a118:	bl	1124c <fcntl64@plt>
   1a11c:	subs	r4, r0, #0
   1a120:	mvnge	r3, #0
   1a124:	strge	r3, [r5]
   1a128:	bge	1a0b0 <__assert_fail@plt+0x8d80>
   1a12c:	b	19fc0 <__assert_fail@plt+0x8c90>
   1a130:	push	{r1, r2, r3}
   1a134:	push	{lr}		; (str lr, [sp, #-4]!)
   1a138:	sub	sp, sp, #8
   1a13c:	ldr	r1, [sp, #12]
   1a140:	ands	r2, r1, #64	; 0x40
   1a144:	bne	1a160 <__assert_fail@plt+0x8e30>
   1a148:	bl	1115c <open64@plt>
   1a14c:	bl	18700 <__assert_fail@plt+0x73d0>
   1a150:	add	sp, sp, #8
   1a154:	pop	{lr}		; (ldr lr, [sp], #4)
   1a158:	add	sp, sp, #12
   1a15c:	bx	lr
   1a160:	add	r3, sp, #16
   1a164:	ldr	r2, [sp, #16]
   1a168:	str	r3, [sp, #4]
   1a16c:	b	1a148 <__assert_fail@plt+0x8e18>
   1a170:	str	r4, [sp, #-8]!
   1a174:	subs	r4, r0, #0
   1a178:	str	lr, [sp, #4]
   1a17c:	sub	sp, sp, #8
   1a180:	beq	1a19c <__assert_fail@plt+0x8e6c>
   1a184:	bl	11180 <__freading@plt>
   1a188:	cmp	r0, #0
   1a18c:	beq	1a19c <__assert_fail@plt+0x8e6c>
   1a190:	ldr	r3, [r4]
   1a194:	tst	r3, #256	; 0x100
   1a198:	bne	1a1b4 <__assert_fail@plt+0x8e84>
   1a19c:	mov	r0, r4
   1a1a0:	add	sp, sp, #8
   1a1a4:	ldr	r4, [sp]
   1a1a8:	ldr	lr, [sp, #4]
   1a1ac:	add	sp, sp, #8
   1a1b0:	b	1103c <fflush@plt>
   1a1b4:	mov	r1, #1
   1a1b8:	mov	r2, #0
   1a1bc:	mov	r3, #0
   1a1c0:	mov	r0, r4
   1a1c4:	str	r1, [sp]
   1a1c8:	bl	1a1d0 <__assert_fail@plt+0x8ea0>
   1a1cc:	b	1a19c <__assert_fail@plt+0x8e6c>
   1a1d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a1d4:	mov	r4, r0
   1a1d8:	ldr	ip, [r0, #4]
   1a1dc:	strd	r6, [sp, #8]
   1a1e0:	str	lr, [sp, #20]
   1a1e4:	ldr	lr, [r0, #8]
   1a1e8:	str	r8, [sp, #16]
   1a1ec:	sub	sp, sp, #8
   1a1f0:	ldr	r5, [sp, #32]
   1a1f4:	cmp	lr, ip
   1a1f8:	beq	1a220 <__assert_fail@plt+0x8ef0>
   1a1fc:	mov	r0, r4
   1a200:	str	r5, [sp, #32]
   1a204:	add	sp, sp, #8
   1a208:	ldrd	r4, [sp]
   1a20c:	ldrd	r6, [sp, #8]
   1a210:	ldr	r8, [sp, #16]
   1a214:	ldr	lr, [sp, #20]
   1a218:	add	sp, sp, #24
   1a21c:	b	11240 <fseeko64@plt>
   1a220:	ldr	ip, [r0, #16]
   1a224:	ldr	lr, [r0, #20]
   1a228:	cmp	lr, ip
   1a22c:	bne	1a1fc <__assert_fail@plt+0x8ecc>
   1a230:	ldr	r8, [r0, #36]	; 0x24
   1a234:	cmp	r8, #0
   1a238:	bne	1a1fc <__assert_fail@plt+0x8ecc>
   1a23c:	mov	r6, r2
   1a240:	mov	r7, r3
   1a244:	bl	1121c <fileno@plt>
   1a248:	mov	r2, r6
   1a24c:	mov	r3, r7
   1a250:	str	r5, [sp]
   1a254:	bl	11114 <lseek64@plt>
   1a258:	mvn	r3, #0
   1a25c:	mvn	r2, #0
   1a260:	cmp	r1, r3
   1a264:	cmpeq	r0, r2
   1a268:	beq	1a298 <__assert_fail@plt+0x8f68>
   1a26c:	ldr	r3, [r4]
   1a270:	strd	r0, [r4, #80]	; 0x50
   1a274:	bic	r3, r3, #16
   1a278:	str	r3, [r4]
   1a27c:	mov	r0, r8
   1a280:	add	sp, sp, #8
   1a284:	ldrd	r4, [sp]
   1a288:	ldrd	r6, [sp, #8]
   1a28c:	ldr	r8, [sp, #16]
   1a290:	add	sp, sp, #20
   1a294:	pop	{pc}		; (ldr pc, [sp], #4)
   1a298:	mvn	r8, #0
   1a29c:	b	1a27c <__assert_fail@plt+0x8f4c>
   1a2a0:	mov	r0, #14
   1a2a4:	str	r4, [sp, #-8]!
   1a2a8:	str	lr, [sp, #4]
   1a2ac:	bl	11270 <nl_langinfo@plt>
   1a2b0:	cmp	r0, #0
   1a2b4:	beq	1a2d8 <__assert_fail@plt+0x8fa8>
   1a2b8:	ldrb	r2, [r0]
   1a2bc:	movw	r3, #47896	; 0xbb18
   1a2c0:	movt	r3, #1
   1a2c4:	ldr	r4, [sp]
   1a2c8:	add	sp, sp, #4
   1a2cc:	cmp	r2, #0
   1a2d0:	moveq	r0, r3
   1a2d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2d8:	ldr	r4, [sp]
   1a2dc:	add	sp, sp, #4
   1a2e0:	movw	r0, #47896	; 0xbb18
   1a2e4:	movt	r0, #1
   1a2e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a2f0:	mov	r5, r2
   1a2f4:	strd	r6, [sp, #8]
   1a2f8:	subs	r6, r0, #0
   1a2fc:	mov	r7, r1
   1a300:	str	lr, [sp, #16]
   1a304:	sub	sp, sp, #12
   1a308:	addeq	r6, sp, #4
   1a30c:	mov	r0, r6
   1a310:	bl	11144 <mbrtowc@plt>
   1a314:	cmp	r5, #0
   1a318:	cmnne	r0, #3
   1a31c:	mov	r4, r0
   1a320:	bhi	1a33c <__assert_fail@plt+0x900c>
   1a324:	mov	r0, r4
   1a328:	add	sp, sp, #12
   1a32c:	ldrd	r4, [sp]
   1a330:	ldrd	r6, [sp, #8]
   1a334:	add	sp, sp, #16
   1a338:	pop	{pc}		; (ldr pc, [sp], #4)
   1a33c:	mov	r0, #0
   1a340:	bl	1a3a0 <__assert_fail@plt+0x9070>
   1a344:	cmp	r0, #0
   1a348:	bne	1a324 <__assert_fail@plt+0x8ff4>
   1a34c:	ldrb	r3, [r7]
   1a350:	mov	r4, #1
   1a354:	str	r3, [r6]
   1a358:	b	1a324 <__assert_fail@plt+0x8ff4>
   1a35c:	umull	r2, r3, r1, r2
   1a360:	cmp	r3, #0
   1a364:	bne	1a370 <__assert_fail@plt+0x9040>
   1a368:	mov	r1, r2
   1a36c:	b	19c94 <__assert_fail@plt+0x8964>
   1a370:	str	r4, [sp, #-8]!
   1a374:	str	lr, [sp, #4]
   1a378:	bl	111ec <__errno_location@plt>
   1a37c:	mov	r3, #12
   1a380:	ldr	r4, [sp]
   1a384:	add	sp, sp, #4
   1a388:	str	r3, [r0]
   1a38c:	mov	r0, #0
   1a390:	pop	{pc}		; (ldr pc, [sp], #4)
   1a394:	mov	r2, #3
   1a398:	mov	r1, #0
   1a39c:	b	19f48 <__assert_fail@plt+0x8c18>
   1a3a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a3a4:	sub	sp, sp, #268	; 0x10c
   1a3a8:	movw	r2, #257	; 0x101
   1a3ac:	add	r1, sp, #4
   1a3b0:	bl	1a3f8 <__assert_fail@plt+0x90c8>
   1a3b4:	cmp	r0, #0
   1a3b8:	movne	r0, #0
   1a3bc:	bne	1a3f0 <__assert_fail@plt+0x90c0>
   1a3c0:	movw	r1, #47904	; 0xbb20
   1a3c4:	movt	r1, #1
   1a3c8:	add	r0, sp, #4
   1a3cc:	bl	11024 <strcmp@plt>
   1a3d0:	cmp	r0, #0
   1a3d4:	beq	1a3f0 <__assert_fail@plt+0x90c0>
   1a3d8:	add	r0, sp, #4
   1a3dc:	movw	r1, #47908	; 0xbb24
   1a3e0:	movt	r1, #1
   1a3e4:	bl	11024 <strcmp@plt>
   1a3e8:	adds	r0, r0, #0
   1a3ec:	movne	r0, #1
   1a3f0:	add	sp, sp, #268	; 0x10c
   1a3f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3f8:	strd	r4, [sp, #-16]!
   1a3fc:	mov	r5, r1
   1a400:	mov	r1, #0
   1a404:	mov	r4, r2
   1a408:	str	r6, [sp, #8]
   1a40c:	str	lr, [sp, #12]
   1a410:	bl	11258 <setlocale@plt>
   1a414:	subs	r6, r0, #0
   1a418:	beq	1a498 <__assert_fail@plt+0x9168>
   1a41c:	bl	111bc <strlen@plt>
   1a420:	cmp	r4, r0
   1a424:	bhi	1a444 <__assert_fail@plt+0x9114>
   1a428:	cmp	r4, #0
   1a42c:	moveq	r0, #34	; 0x22
   1a430:	bne	1a468 <__assert_fail@plt+0x9138>
   1a434:	ldrd	r4, [sp]
   1a438:	ldr	r6, [sp, #8]
   1a43c:	add	sp, sp, #12
   1a440:	pop	{pc}		; (ldr pc, [sp], #4)
   1a444:	add	r2, r0, #1
   1a448:	mov	r1, r6
   1a44c:	mov	r0, r5
   1a450:	bl	11078 <memcpy@plt>
   1a454:	ldrd	r4, [sp]
   1a458:	mov	r0, #0
   1a45c:	ldr	r6, [sp, #8]
   1a460:	add	sp, sp, #12
   1a464:	pop	{pc}		; (ldr pc, [sp], #4)
   1a468:	sub	r4, r4, #1
   1a46c:	mov	r1, r6
   1a470:	mov	r2, r4
   1a474:	mov	r0, r5
   1a478:	bl	11078 <memcpy@plt>
   1a47c:	mov	r3, #0
   1a480:	mov	r0, #34	; 0x22
   1a484:	strb	r3, [r5, r4]
   1a488:	ldrd	r4, [sp]
   1a48c:	ldr	r6, [sp, #8]
   1a490:	add	sp, sp, #12
   1a494:	pop	{pc}		; (ldr pc, [sp], #4)
   1a498:	cmp	r4, #0
   1a49c:	mov	r0, #22
   1a4a0:	strbne	r6, [r5]
   1a4a4:	ldrd	r4, [sp]
   1a4a8:	ldr	r6, [sp, #8]
   1a4ac:	add	sp, sp, #12
   1a4b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4b4:	mov	r1, #0
   1a4b8:	b	11258 <setlocale@plt>
   1a4bc:	cmp	r3, #0
   1a4c0:	cmpeq	r2, #0
   1a4c4:	bne	1a4dc <__assert_fail@plt+0x91ac>
   1a4c8:	cmp	r1, #0
   1a4cc:	cmpeq	r0, #0
   1a4d0:	mvnne	r1, #0
   1a4d4:	mvnne	r0, #0
   1a4d8:	b	1a4f8 <__assert_fail@plt+0x91c8>
   1a4dc:	sub	sp, sp, #8
   1a4e0:	push	{sp, lr}
   1a4e4:	bl	1a508 <__assert_fail@plt+0x91d8>
   1a4e8:	ldr	lr, [sp, #4]
   1a4ec:	add	sp, sp, #8
   1a4f0:	pop	{r2, r3}
   1a4f4:	bx	lr
   1a4f8:	push	{r1, lr}
   1a4fc:	mov	r0, #8
   1a500:	bl	11018 <raise@plt>
   1a504:	pop	{r1, pc}
   1a508:	cmp	r1, r3
   1a50c:	cmpeq	r0, r2
   1a510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a514:	mov	r4, r0
   1a518:	movcc	r0, #0
   1a51c:	mov	r5, r1
   1a520:	ldr	lr, [sp, #36]	; 0x24
   1a524:	movcc	r1, r0
   1a528:	bcc	1a624 <__assert_fail@plt+0x92f4>
   1a52c:	cmp	r3, #0
   1a530:	clzeq	ip, r2
   1a534:	clzne	ip, r3
   1a538:	addeq	ip, ip, #32
   1a53c:	cmp	r5, #0
   1a540:	clzeq	r1, r4
   1a544:	addeq	r1, r1, #32
   1a548:	clzne	r1, r5
   1a54c:	sub	ip, ip, r1
   1a550:	sub	sl, ip, #32
   1a554:	lsl	r9, r3, ip
   1a558:	rsb	fp, ip, #32
   1a55c:	orr	r9, r9, r2, lsl sl
   1a560:	orr	r9, r9, r2, lsr fp
   1a564:	lsl	r8, r2, ip
   1a568:	cmp	r5, r9
   1a56c:	cmpeq	r4, r8
   1a570:	movcc	r0, #0
   1a574:	movcc	r1, r0
   1a578:	bcc	1a594 <__assert_fail@plt+0x9264>
   1a57c:	mov	r0, #1
   1a580:	subs	r4, r4, r8
   1a584:	lsl	r1, r0, sl
   1a588:	orr	r1, r1, r0, lsr fp
   1a58c:	lsl	r0, r0, ip
   1a590:	sbc	r5, r5, r9
   1a594:	cmp	ip, #0
   1a598:	beq	1a624 <__assert_fail@plt+0x92f4>
   1a59c:	lsr	r6, r8, #1
   1a5a0:	orr	r6, r6, r9, lsl #31
   1a5a4:	lsr	r7, r9, #1
   1a5a8:	mov	r2, ip
   1a5ac:	b	1a5d0 <__assert_fail@plt+0x92a0>
   1a5b0:	subs	r3, r4, r6
   1a5b4:	sbc	r8, r5, r7
   1a5b8:	adds	r3, r3, r3
   1a5bc:	adc	r8, r8, r8
   1a5c0:	adds	r4, r3, #1
   1a5c4:	adc	r5, r8, #0
   1a5c8:	subs	r2, r2, #1
   1a5cc:	beq	1a5ec <__assert_fail@plt+0x92bc>
   1a5d0:	cmp	r5, r7
   1a5d4:	cmpeq	r4, r6
   1a5d8:	bcs	1a5b0 <__assert_fail@plt+0x9280>
   1a5dc:	adds	r4, r4, r4
   1a5e0:	adc	r5, r5, r5
   1a5e4:	subs	r2, r2, #1
   1a5e8:	bne	1a5d0 <__assert_fail@plt+0x92a0>
   1a5ec:	lsr	r3, r4, ip
   1a5f0:	orr	r3, r3, r5, lsl fp
   1a5f4:	lsr	r2, r5, ip
   1a5f8:	orr	r3, r3, r5, lsr sl
   1a5fc:	adds	r0, r0, r4
   1a600:	mov	r4, r3
   1a604:	lsl	r3, r2, ip
   1a608:	orr	r3, r3, r4, lsl sl
   1a60c:	lsl	ip, r4, ip
   1a610:	orr	r3, r3, r4, lsr fp
   1a614:	adc	r1, r1, r5
   1a618:	subs	r0, r0, ip
   1a61c:	mov	r5, r2
   1a620:	sbc	r1, r1, r3
   1a624:	cmp	lr, #0
   1a628:	strdne	r4, [lr]
   1a62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a630:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a634:	mov	r7, r0
   1a638:	ldr	r6, [pc, #72]	; 1a688 <__assert_fail@plt+0x9358>
   1a63c:	ldr	r5, [pc, #72]	; 1a68c <__assert_fail@plt+0x935c>
   1a640:	add	r6, pc, r6
   1a644:	add	r5, pc, r5
   1a648:	sub	r6, r6, r5
   1a64c:	mov	r8, r1
   1a650:	mov	r9, r2
   1a654:	bl	10fc8 <fstatfs64@plt-0x20>
   1a658:	asrs	r6, r6, #2
   1a65c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a660:	mov	r4, #0
   1a664:	add	r4, r4, #1
   1a668:	ldr	r3, [r5], #4
   1a66c:	mov	r2, r9
   1a670:	mov	r1, r8
   1a674:	mov	r0, r7
   1a678:	blx	r3
   1a67c:	cmp	r6, r4
   1a680:	bne	1a664 <__assert_fail@plt+0x9334>
   1a684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a688:	andeq	r1, r1, ip, asr #17
   1a68c:	andeq	r1, r1, r4, asr #17
   1a690:	bx	lr
   1a694:	ldr	r3, [pc, #12]	; 1a6a8 <__assert_fail@plt+0x9378>
   1a698:	mov	r1, #0
   1a69c:	add	r3, pc, r3
   1a6a0:	ldr	r2, [r3]
   1a6a4:	b	111f8 <__cxa_atexit@plt>
   1a6a8:	andeq	r1, r1, ip, lsl #21

Disassembly of section .fini:

0001a6ac <.fini>:
   1a6ac:	push	{r3, lr}
   1a6b0:	pop	{r3, pc}
