
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010af4 <.init>:
   10af4:	push	{r3, lr}
   10af8:	bl	10d04 <__assert_fail@plt+0x4c>
   10afc:	pop	{r3, pc}

Disassembly of section .plt:

00010b00 <calloc@plt-0x14>:
   10b00:	push	{lr}		; (str lr, [sp, #-4]!)
   10b04:	ldr	lr, [pc, #4]	; 10b10 <calloc@plt-0x4>
   10b08:	add	lr, pc, lr
   10b0c:	ldr	pc, [lr, #8]!
   10b10:	strdeq	r6, [r1], -r0

00010b14 <calloc@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #90112	; 0x16000
   10b1c:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b20 <strcmp@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #90112	; 0x16000
   10b28:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b2c <printf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #90112	; 0x16000
   10b34:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b38 <fopen@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #90112	; 0x16000
   10b40:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b44 <free@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #90112	; 0x16000
   10b4c:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b50 <utf8proc_get_property@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #90112	; 0x16000
   10b58:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b5c <fgets@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #90112	; 0x16000
   10b64:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b68 <utf8proc_encode_char@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #90112	; 0x16000
   10b70:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b74 <strdup@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #90112	; 0x16000
   10b7c:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b80 <rewind@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #90112	; 0x16000
   10b88:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b8c <unlink@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #90112	; 0x16000
   10b94:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b98 <utf8proc_tolower@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #90112	; 0x16000
   10ba0:	ldr	pc, [ip, #1176]!	; 0x498

00010ba4 <__xstat@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #90112	; 0x16000
   10bac:	ldr	pc, [ip, #1168]!	; 0x490

00010bb0 <fread@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #90112	; 0x16000
   10bb8:	ldr	pc, [ip, #1160]!	; 0x488

00010bbc <utf8proc_iterate@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #90112	; 0x16000
   10bc4:	ldr	pc, [ip, #1152]!	; 0x480

00010bc8 <malloc@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #90112	; 0x16000
   10bd0:	ldr	pc, [ip, #1144]!	; 0x478

00010bd4 <__libc_start_main@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #90112	; 0x16000
   10bdc:	ldr	pc, [ip, #1136]!	; 0x470

00010be0 <__sysv_signal@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #90112	; 0x16000
   10be8:	ldr	pc, [ip, #1128]!	; 0x468

00010bec <__gmon_start__@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #90112	; 0x16000
   10bf4:	ldr	pc, [ip, #1120]!	; 0x460

00010bf8 <getpid@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #90112	; 0x16000
   10c00:	ldr	pc, [ip, #1112]!	; 0x458

00010c04 <exit@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #90112	; 0x16000
   10c0c:	ldr	pc, [ip, #1104]!	; 0x450

00010c10 <utf8proc_category@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #90112	; 0x16000
   10c18:	ldr	pc, [ip, #1096]!	; 0x448

00010c1c <strlen@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #90112	; 0x16000
   10c24:	ldr	pc, [ip, #1088]!	; 0x440

00010c28 <fprintf@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #90112	; 0x16000
   10c30:	ldr	pc, [ip, #1080]!	; 0x438

00010c34 <__isoc99_sscanf@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #1072]!	; 0x430

00010c40 <fclose@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #1064]!	; 0x428

00010c4c <utf8proc_NFC@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #1056]!	; 0x420

00010c58 <fputc@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #1048]!	; 0x418

00010c64 <sprintf@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #1040]!	; 0x410

00010c70 <atoi@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #1032]!	; 0x408

00010c7c <utf8proc_errmsg@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #1024]!	; 0x400

00010c88 <fputs@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c94 <strncmp@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010ca0 <abort@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #1000]!	; 0x3e8

00010cac <getc@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #992]!	; 0x3e0

00010cb8 <__assert_fail@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #984]!	; 0x3d8

Disassembly of section .text:

00010cc8 <error@@Base-0x1890>:
   10cc8:	mov	fp, #0
   10ccc:	mov	lr, #0
   10cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10cd4:	mov	r2, sp
   10cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ce0:	ldr	ip, [pc, #16]	; 10cf8 <__assert_fail@plt+0x40>
   10ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ce8:	ldr	r0, [pc, #12]	; 10cfc <__assert_fail@plt+0x44>
   10cec:	ldr	r3, [pc, #12]	; 10d00 <__assert_fail@plt+0x48>
   10cf0:	bl	10bd4 <__libc_start_main@plt>
   10cf4:	bl	10ca0 <abort@plt>
   10cf8:	andeq	r3, r1, r8, lsr r0
   10cfc:	andeq	r0, r1, r0, ror #31
   10d00:	ldrdeq	r2, [r1], -r8
   10d04:	ldr	r3, [pc, #20]	; 10d20 <__assert_fail@plt+0x68>
   10d08:	ldr	r2, [pc, #20]	; 10d24 <__assert_fail@plt+0x6c>
   10d0c:	add	r3, pc, r3
   10d10:	ldr	r2, [r3, r2]
   10d14:	cmp	r2, #0
   10d18:	bxeq	lr
   10d1c:	b	10bec <__gmon_start__@plt>
   10d20:	andeq	r6, r1, ip, ror #5
   10d24:	muleq	r0, ip, r0
   10d28:	ldr	r0, [pc, #24]	; 10d48 <__assert_fail@plt+0x90>
   10d2c:	ldr	r3, [pc, #24]	; 10d4c <__assert_fail@plt+0x94>
   10d30:	cmp	r3, r0
   10d34:	bxeq	lr
   10d38:	ldr	r3, [pc, #16]	; 10d50 <__assert_fail@plt+0x98>
   10d3c:	cmp	r3, #0
   10d40:	bxeq	lr
   10d44:	bx	r3
   10d48:	strheq	r7, [r2], -ip
   10d4c:	strheq	r7, [r2], -ip
   10d50:	andeq	r0, r0, r0
   10d54:	ldr	r0, [pc, #36]	; 10d80 <__assert_fail@plt+0xc8>
   10d58:	ldr	r1, [pc, #36]	; 10d84 <__assert_fail@plt+0xcc>
   10d5c:	sub	r1, r1, r0
   10d60:	asr	r1, r1, #2
   10d64:	add	r1, r1, r1, lsr #31
   10d68:	asrs	r1, r1, #1
   10d6c:	bxeq	lr
   10d70:	ldr	r3, [pc, #16]	; 10d88 <__assert_fail@plt+0xd0>
   10d74:	cmp	r3, #0
   10d78:	bxeq	lr
   10d7c:	bx	r3
   10d80:	strheq	r7, [r2], -ip
   10d84:	strheq	r7, [r2], -ip
   10d88:	andeq	r0, r0, r0
   10d8c:	push	{r4, lr}
   10d90:	ldr	r4, [pc, #24]	; 10db0 <__assert_fail@plt+0xf8>
   10d94:	ldrb	r3, [r4]
   10d98:	cmp	r3, #0
   10d9c:	popne	{r4, pc}
   10da0:	bl	10d28 <__assert_fail@plt+0x70>
   10da4:	mov	r3, #1
   10da8:	strb	r3, [r4]
   10dac:	pop	{r4, pc}
   10db0:	ldrdeq	r7, [r2], -r0
   10db4:	b	10d54 <__assert_fail@plt+0x9c>
   10db8:	push	{fp, lr}
   10dbc:	mov	fp, sp
   10dc0:	bl	1198c <__assert_fail@plt+0xcd4>
   10dc4:	cmp	r0, #0
   10dc8:	popeq	{fp, pc}
   10dcc:	movw	r2, #29000	; 0x7148
   10dd0:	ldr	r1, [r0, #12]
   10dd4:	ldr	r0, [r0, #16]
   10dd8:	movt	r2, #2
   10ddc:	ldr	r3, [r2]
   10de0:	sub	r1, r3, r1
   10de4:	str	r1, [r2]
   10de8:	movw	r1, #46140	; 0xb43c
   10dec:	movt	r1, #2
   10df0:	ldr	r2, [r1]
   10df4:	sub	r0, r2, r0
   10df8:	str	r0, [r1]
   10dfc:	pop	{fp, pc}
   10e00:	movw	r0, #46140	; 0xb43c
   10e04:	movw	r1, #29000	; 0x7148
   10e08:	movw	r3, #28884	; 0x70d4
   10e0c:	vldr	d16, [pc, #76]	; 10e60 <__assert_fail@plt+0x1a8>
   10e10:	movt	r0, #2
   10e14:	movt	r1, #2
   10e18:	movt	r3, #2
   10e1c:	ldr	r2, [r1]
   10e20:	ldr	r0, [r0]
   10e24:	ldr	r1, [r3]
   10e28:	sub	r0, r2, r0
   10e2c:	vmov	s2, r2
   10e30:	vmov	s0, r0
   10e34:	add	r0, r1, #1
   10e38:	vcvt.f64.s32	d17, s0
   10e3c:	vcvt.f64.s32	d18, s2
   10e40:	str	r0, [r3]
   10e44:	movw	r0, #12376	; 0x3058
   10e48:	vmul.f64	d16, d17, d16
   10e4c:	movt	r0, #1
   10e50:	vdiv.f64	d16, d16, d18
   10e54:	vmov	r2, r3, d16
   10e58:	b	10b2c <printf@plt>
   10e5c:	nop	{0}
   10e60:	andeq	r0, r0, r0
   10e64:	subsmi	r0, r9, r0
   10e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e6c:	add	fp, sp, #28
   10e70:	sub	sp, sp, #4
   10e74:	vpush	{d8}
   10e78:	movw	r5, #29036	; 0x716c
   10e7c:	movw	r7, #29000	; 0x7148
   10e80:	movw	r6, #46140	; 0xb43c
   10e84:	movt	r5, #2
   10e88:	movt	r7, #2
   10e8c:	movt	r6, #2
   10e90:	ldm	r5, {r0, r1}
   10e94:	cmp	r0, #0
   10e98:	str	r0, [r7]
   10e9c:	str	r1, [r6]
   10ea0:	beq	10fcc <__assert_fail@plt+0x314>
   10ea4:	movw	r9, #28884	; 0x70d4
   10ea8:	sub	r2, r0, r1
   10eac:	vldr	d8, [pc, #292]	; 10fd8 <__assert_fail@plt+0x320>
   10eb0:	vmov	s2, r0
   10eb4:	movt	r9, #2
   10eb8:	vmov	s0, r2
   10ebc:	ldr	r1, [r9]
   10ec0:	vcvt.f64.s32	d16, s0
   10ec4:	vcvt.f64.s32	d17, s2
   10ec8:	vmul.f64	d16, d16, d8
   10ecc:	vdiv.f64	d16, d16, d17
   10ed0:	add	r0, r1, #1
   10ed4:	vmov	r2, r3, d16
   10ed8:	str	r0, [r9]
   10edc:	movw	r0, #12376	; 0x3058
   10ee0:	movt	r0, #1
   10ee4:	bl	10b2c <printf@plt>
   10ee8:	movw	r0, #29020	; 0x715c
   10eec:	movt	r0, #2
   10ef0:	ldr	r4, [r0]
   10ef4:	cmp	r4, #0
   10ef8:	beq	10fcc <__assert_fail@plt+0x314>
   10efc:	movw	r8, #12376	; 0x3058
   10f00:	movw	r0, #9048	; 0x2358
   10f04:	add	sl, r5, #992	; 0x3e0
   10f08:	add	r5, r5, r0
   10f0c:	movt	r8, #1
   10f10:	ldr	r1, [r4, #8]
   10f14:	mov	r0, sl
   10f18:	bl	1198c <__assert_fail@plt+0xcd4>
   10f1c:	cmp	r0, #0
   10f20:	beq	10f44 <__assert_fail@plt+0x28c>
   10f24:	ldr	r1, [r0, #12]
   10f28:	ldr	r2, [r7]
   10f2c:	ldr	r0, [r0, #16]
   10f30:	sub	r1, r2, r1
   10f34:	str	r1, [r7]
   10f38:	ldr	r1, [r6]
   10f3c:	sub	r0, r1, r0
   10f40:	str	r0, [r6]
   10f44:	ldr	r1, [r4, #8]
   10f48:	mov	r0, r5
   10f4c:	bl	1198c <__assert_fail@plt+0xcd4>
   10f50:	cmp	r0, #0
   10f54:	beq	10f7c <__assert_fail@plt+0x2c4>
   10f58:	ldr	r1, [r0, #12]
   10f5c:	ldr	r2, [r0, #16]
   10f60:	ldr	r0, [r7]
   10f64:	sub	r0, r0, r1
   10f68:	ldr	r1, [r6]
   10f6c:	str	r0, [r7]
   10f70:	sub	r1, r1, r2
   10f74:	str	r1, [r6]
   10f78:	b	10f80 <__assert_fail@plt+0x2c8>
   10f7c:	ldr	r0, [r7]
   10f80:	cmp	r0, #0
   10f84:	beq	10fcc <__assert_fail@plt+0x314>
   10f88:	ldr	r1, [r6]
   10f8c:	vmov	s2, r0
   10f90:	sub	r2, r0, r1
   10f94:	ldr	r1, [r9]
   10f98:	vmov	s0, r2
   10f9c:	vcvt.f64.s32	d16, s0
   10fa0:	vcvt.f64.s32	d17, s2
   10fa4:	vmul.f64	d16, d16, d8
   10fa8:	add	r0, r1, #1
   10fac:	vdiv.f64	d16, d16, d17
   10fb0:	str	r0, [r9]
   10fb4:	vmov	r2, r3, d16
   10fb8:	mov	r0, r8
   10fbc:	bl	10b2c <printf@plt>
   10fc0:	ldr	r4, [r4, #4]
   10fc4:	cmp	r4, #0
   10fc8:	bne	10f10 <__assert_fail@plt+0x258>
   10fcc:	vpop	{d8}
   10fd0:	add	sp, sp, #4
   10fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fd8:	andeq	r0, r0, r0
   10fdc:	subsmi	r0, r9, r0
   10fe0:	push	{fp, lr}
   10fe4:	mov	fp, sp
   10fe8:	sub	sp, sp, #8
   10fec:	movw	r2, #12388	; 0x3064
   10ff0:	str	r0, [sp, #4]
   10ff4:	add	r0, sp, #4
   10ff8:	mov	r3, #0
   10ffc:	mov	r4, r1
   11000:	movt	r2, #1
   11004:	bl	122ec <__assert_fail@plt+0x1634>
   11008:	ldr	r0, [sp, #4]
   1100c:	cmp	r0, #2
   11010:	bne	11058 <__assert_fail@plt+0x3a0>
   11014:	ldr	r1, [r4]
   11018:	movw	r5, #29004	; 0x714c
   1101c:	movw	r2, #28840	; 0x70a8
   11020:	movt	r5, #2
   11024:	movt	r2, #2
   11028:	mov	r0, r5
   1102c:	bl	12728 <error@@Base+0x1d0>
   11030:	movw	r0, #29020	; 0x715c
   11034:	mov	r1, r5
   11038:	movt	r0, #2
   1103c:	bl	11c0c <__assert_fail@plt+0xf54>
   11040:	ldr	r1, [r4, #4]
   11044:	movw	r0, #29036	; 0x716c
   11048:	movt	r0, #2
   1104c:	bl	110e8 <__assert_fail@plt+0x430>
   11050:	bl	10e68 <__assert_fail@plt+0x1b0>
   11054:	bl	12518 <__assert_fail@plt+0x1860>
   11058:	movw	r0, #12424	; 0x3088
   1105c:	movt	r0, #1
   11060:	bl	12558 <error@@Base>
   11064:	andeq	r0, r0, r0
   11068:	ldm	r0, {r3, ip}
   1106c:	add	r1, r3, r1
   11070:	add	r2, ip, r2
   11074:	stm	r0, {r1, r2}
   11078:	bx	lr
   1107c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11080:	add	fp, sp, #24
   11084:	mov	r8, r3
   11088:	mov	r5, r2
   1108c:	mov	r4, r1
   11090:	mov	r6, r0
   11094:	bl	1198c <__assert_fail@plt+0xcd4>
   11098:	mov	r7, r0
   1109c:	cmp	r0, #0
   110a0:	bne	110cc <__assert_fail@plt+0x414>
   110a4:	mov	r0, #1
   110a8:	mov	r1, #20
   110ac:	bl	120cc <__assert_fail@plt+0x1414>
   110b0:	mov	r7, r0
   110b4:	mov	r0, r4
   110b8:	bl	10b74 <strdup@plt>
   110bc:	str	r0, [r7, #8]
   110c0:	mov	r0, r6
   110c4:	mov	r1, r7
   110c8:	bl	11a14 <__assert_fail@plt+0xd5c>
   110cc:	ldr	r0, [r7, #12]
   110d0:	ldr	r1, [r7, #16]
   110d4:	add	r0, r0, r5
   110d8:	add	r1, r1, r8
   110dc:	str	r0, [r7, #12]
   110e0:	str	r1, [r7, #16]
   110e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   110e8:	push	{r4, r5, r6, r7, fp, lr}
   110ec:	add	fp, sp, #16
   110f0:	sub	sp, sp, #8
   110f4:	mov	r6, r1
   110f8:	movw	r1, #26309	; 0x66c5
   110fc:	mov	r5, r0
   11100:	movt	r1, #1
   11104:	mov	r0, r6
   11108:	bl	12168 <__assert_fail@plt+0x14b0>
   1110c:	mov	r4, r0
   11110:	movw	r0, #28888	; 0x70d8
   11114:	mov	r1, #99	; 0x63
   11118:	movt	r0, #2
   1111c:	mov	r2, r4
   11120:	bl	10b5c <fgets@plt>
   11124:	cmp	r0, #0
   11128:	beq	1127c <__assert_fail@plt+0x5c4>
   1112c:	movw	r0, #28888	; 0x70d8
   11130:	movw	r1, #12448	; 0x30a0
   11134:	mov	r2, #45	; 0x2d
   11138:	movt	r0, #2
   1113c:	movt	r1, #1
   11140:	bl	10c94 <strncmp@plt>
   11144:	cmp	r0, #0
   11148:	bne	1127c <__assert_fail@plt+0x5c4>
   1114c:	movw	r0, #28888	; 0x70d8
   11150:	mov	r1, #99	; 0x63
   11154:	mov	r2, r4
   11158:	movt	r0, #2
   1115c:	bl	10b5c <fgets@plt>
   11160:	cmp	r0, #0
   11164:	beq	1127c <__assert_fail@plt+0x5c4>
   11168:	movw	r0, #28888	; 0x70d8
   1116c:	movw	r1, #26239	; 0x667f
   11170:	movt	r0, #2
   11174:	movt	r1, #1
   11178:	bl	10b20 <strcmp@plt>
   1117c:	cmp	r0, #0
   11180:	bne	1127c <__assert_fail@plt+0x5c4>
   11184:	add	r1, sp, #4
   11188:	mov	r0, r4
   1118c:	bl	11298 <__assert_fail@plt+0x5e0>
   11190:	cmp	r0, #0
   11194:	beq	1127c <__assert_fail@plt+0x5c4>
   11198:	mov	r1, sp
   1119c:	mov	r0, r4
   111a0:	bl	11298 <__assert_fail@plt+0x5e0>
   111a4:	cmp	r0, #0
   111a8:	beq	1127c <__assert_fail@plt+0x5c4>
   111ac:	movw	r0, #28888	; 0x70d8
   111b0:	mov	r1, #99	; 0x63
   111b4:	mov	r2, r4
   111b8:	movt	r0, #2
   111bc:	bl	10b5c <fgets@plt>
   111c0:	cmp	r0, #0
   111c4:	beq	1127c <__assert_fail@plt+0x5c4>
   111c8:	movw	r0, #28888	; 0x70d8
   111cc:	mov	r1, #99	; 0x63
   111d0:	mov	r2, r4
   111d4:	movt	r0, #2
   111d8:	bl	10b5c <fgets@plt>
   111dc:	cmp	r0, #0
   111e0:	beq	1127c <__assert_fail@plt+0x5c4>
   111e4:	ldm	r5, {r0, r1}
   111e8:	ldr	r2, [sp, #4]
   111ec:	add	r0, r0, r2
   111f0:	ldr	r2, [sp]
   111f4:	add	r1, r1, r2
   111f8:	stm	r5, {r0, r1}
   111fc:	add	r1, r5, #8
   11200:	mov	r0, r4
   11204:	bl	112ec <__assert_fail@plt+0x634>
   11208:	mov	r7, r0
   1120c:	add	r1, r5, #416	; 0x1a0
   11210:	mov	r0, r4
   11214:	bl	112ec <__assert_fail@plt+0x634>
   11218:	mov	r6, r0
   1121c:	add	r1, r5, #824	; 0x338
   11220:	mov	r0, r4
   11224:	bl	112ec <__assert_fail@plt+0x634>
   11228:	ldr	r0, [sp, #4]
   1122c:	cmp	r0, #1
   11230:	blt	1126c <__assert_fail@plt+0x5b4>
   11234:	add	r1, r5, #920	; 0x398
   11238:	mov	r0, r4
   1123c:	bl	112ec <__assert_fail@plt+0x634>
   11240:	cmp	r7, #1
   11244:	blt	11254 <__assert_fail@plt+0x59c>
   11248:	add	r1, r5, #992	; 0x3e0
   1124c:	mov	r0, r4
   11250:	bl	113e8 <__assert_fail@plt+0x730>
   11254:	cmp	r6, #1
   11258:	blt	1126c <__assert_fail@plt+0x5b4>
   1125c:	movw	r0, #9048	; 0x2358
   11260:	add	r1, r5, r0
   11264:	mov	r0, r4
   11268:	bl	113e8 <__assert_fail@plt+0x730>
   1126c:	mov	r0, r4
   11270:	bl	121e0 <__assert_fail@plt+0x1528>
   11274:	sub	sp, fp, #16
   11278:	pop	{r4, r5, r6, r7, fp, pc}
   1127c:	movw	r1, #12514	; 0x30e2
   11280:	movw	r0, #12496	; 0x30d0
   11284:	cmp	r6, #0
   11288:	movt	r1, #1
   1128c:	movt	r0, #1
   11290:	movne	r1, r6
   11294:	bl	12598 <error@@Base+0x40>
   11298:	push	{r4, sl, fp, lr}
   1129c:	add	fp, sp, #8
   112a0:	mov	r2, r0
   112a4:	movw	r0, #28888	; 0x70d8
   112a8:	mov	r4, r1
   112ac:	mov	r1, #99	; 0x63
   112b0:	movt	r0, #2
   112b4:	bl	10b5c <fgets@plt>
   112b8:	cmp	r0, #0
   112bc:	moveq	r0, #0
   112c0:	popeq	{r4, sl, fp, pc}
   112c4:	movw	r0, #28888	; 0x70d8
   112c8:	movw	r1, #12629	; 0x3155
   112cc:	mov	r2, r4
   112d0:	movt	r0, #2
   112d4:	movt	r1, #1
   112d8:	bl	10c34 <__isoc99_sscanf@plt>
   112dc:	sub	r0, r0, #1
   112e0:	clz	r0, r0
   112e4:	lsr	r0, r0, #5
   112e8:	pop	{r4, sl, fp, pc}
   112ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112f0:	add	fp, sp, #28
   112f4:	sub	sp, sp, #12
   112f8:	mov	r5, r0
   112fc:	movw	r0, #28888	; 0x70d8
   11300:	mov	r4, r1
   11304:	mov	r1, #99	; 0x63
   11308:	movt	r0, #2
   1130c:	mov	r2, r5
   11310:	bl	10b5c <fgets@plt>
   11314:	mov	r6, #0
   11318:	cmp	r0, #0
   1131c:	beq	113dc <__assert_fail@plt+0x724>
   11320:	movw	r7, #28888	; 0x70d8
   11324:	mov	r1, #99	; 0x63
   11328:	mov	r2, r5
   1132c:	movt	r7, #2
   11330:	mov	r0, r7
   11334:	bl	10b5c <fgets@plt>
   11338:	cmp	r0, #0
   1133c:	beq	113dc <__assert_fail@plt+0x724>
   11340:	add	r1, sp, #8
   11344:	add	r2, sp, #4
   11348:	mov	r0, r5
   1134c:	bl	11884 <__assert_fail@plt+0xbcc>
   11350:	cmp	r0, #0
   11354:	beq	113dc <__assert_fail@plt+0x724>
   11358:	movw	r8, #12617	; 0x3149
   1135c:	mov	r6, #0
   11360:	add	r7, r7, #29
   11364:	add	r9, sp, #8
   11368:	add	sl, sp, #4
   1136c:	movt	r8, #1
   11370:	mov	r0, r7
   11374:	bl	10c70 <atoi@plt>
   11378:	cmp	r0, #0
   1137c:	beq	11388 <__assert_fail@plt+0x6d0>
   11380:	ldr	r1, [sp, #8]
   11384:	b	113a4 <__assert_fail@plt+0x6ec>
   11388:	mov	r0, r7
   1138c:	mov	r1, r8
   11390:	bl	10b20 <strcmp@plt>
   11394:	ldr	r1, [sp, #8]
   11398:	cmp	r0, #0
   1139c:	movwne	r0, #11
   113a0:	moveq	r6, r1
   113a4:	mov	r2, r4
   113a8:	ldr	r0, [r2, r0, lsl #3]!
   113ac:	add	r0, r0, r1
   113b0:	ldr	r1, [sp, #4]
   113b4:	str	r0, [r2]
   113b8:	ldr	r0, [r2, #4]
   113bc:	add	r0, r0, r1
   113c0:	mov	r1, r9
   113c4:	str	r0, [r2, #4]
   113c8:	mov	r0, r5
   113cc:	mov	r2, sl
   113d0:	bl	11884 <__assert_fail@plt+0xbcc>
   113d4:	cmp	r0, #0
   113d8:	bne	11370 <__assert_fail@plt+0x6b8>
   113dc:	mov	r0, r6
   113e0:	sub	sp, fp, #28
   113e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113ec:	add	fp, sp, #28
   113f0:	sub	sp, sp, #12
   113f4:	mov	r5, r0
   113f8:	movw	r0, #28888	; 0x70d8
   113fc:	mov	r4, r1
   11400:	mov	r1, #99	; 0x63
   11404:	movt	r0, #2
   11408:	mov	r2, r5
   1140c:	bl	10b5c <fgets@plt>
   11410:	cmp	r0, #0
   11414:	beq	1149c <__assert_fail@plt+0x7e4>
   11418:	movw	r6, #28888	; 0x70d8
   1141c:	mov	r1, #99	; 0x63
   11420:	mov	r2, r5
   11424:	movt	r6, #2
   11428:	mov	r0, r6
   1142c:	bl	10b5c <fgets@plt>
   11430:	cmp	r0, #0
   11434:	beq	1149c <__assert_fail@plt+0x7e4>
   11438:	add	r1, sp, #8
   1143c:	add	r2, sp, #4
   11440:	mov	r0, r5
   11444:	bl	11884 <__assert_fail@plt+0xbcc>
   11448:	cmp	r0, #0
   1144c:	beq	1149c <__assert_fail@plt+0x7e4>
   11450:	mov	sl, #0
   11454:	add	r7, r6, #29
   11458:	add	r8, sp, #8
   1145c:	add	r9, sp, #4
   11460:	mov	r0, r6
   11464:	bl	10c1c <strlen@plt>
   11468:	ldr	r2, [sp, #8]
   1146c:	ldr	r3, [sp, #4]
   11470:	add	r0, r6, r0
   11474:	mov	r1, r7
   11478:	strb	sl, [r0, #-1]
   1147c:	mov	r0, r4
   11480:	bl	1107c <__assert_fail@plt+0x3c4>
   11484:	mov	r0, r5
   11488:	mov	r1, r8
   1148c:	mov	r2, r9
   11490:	bl	11884 <__assert_fail@plt+0xbcc>
   11494:	cmp	r0, #0
   11498:	bne	11460 <__assert_fail@plt+0x7a8>
   1149c:	sub	sp, fp, #28
   114a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   114a8:	add	fp, sp, #24
   114ac:	sub	sp, sp, #8
   114b0:	mov	r2, r1
   114b4:	movw	r1, #12520	; 0x30e8
   114b8:	mov	r5, r0
   114bc:	movt	r1, #1
   114c0:	mov	r0, r2
   114c4:	bl	12168 <__assert_fail@plt+0x14b0>
   114c8:	movw	r1, #12522	; 0x30ea
   114cc:	movw	r2, #12448	; 0x30a0
   114d0:	movw	r3, #26239	; 0x667f
   114d4:	mov	r4, r0
   114d8:	movt	r1, #1
   114dc:	movt	r2, #1
   114e0:	movt	r3, #1
   114e4:	bl	10c28 <fprintf@plt>
   114e8:	ldr	r2, [r5]
   114ec:	movw	r1, #12527	; 0x30ef
   114f0:	mov	r0, r4
   114f4:	movt	r1, #1
   114f8:	bl	10c28 <fprintf@plt>
   114fc:	ldr	r2, [r5, #4]
   11500:	movw	r1, #12541	; 0x30fd
   11504:	mov	r0, r4
   11508:	movt	r1, #1
   1150c:	bl	10c28 <fprintf@plt>
   11510:	mov	r0, r4
   11514:	mov	r1, r5
   11518:	bl	11618 <__assert_fail@plt+0x960>
   1151c:	movw	r0, #12563	; 0x3113
   11520:	mov	r1, r4
   11524:	movt	r0, #1
   11528:	bl	10c88 <fputs@plt>
   1152c:	movw	r3, #12576	; 0x3120
   11530:	mov	r7, #1
   11534:	mov	r8, #0
   11538:	add	r1, r5, #8
   1153c:	mov	r0, r4
   11540:	mov	r2, #50	; 0x32
   11544:	movt	r3, #1
   11548:	str	r8, [sp]
   1154c:	str	r7, [sp, #4]
   11550:	bl	11678 <__assert_fail@plt+0x9c0>
   11554:	movw	r3, #12595	; 0x3133
   11558:	add	r6, r5, #416	; 0x1a0
   1155c:	mov	r0, r4
   11560:	mov	r2, #50	; 0x32
   11564:	str	r8, [sp]
   11568:	str	r7, [sp, #4]
   1156c:	movt	r3, #1
   11570:	mov	r1, r6
   11574:	bl	11678 <__assert_fail@plt+0x9c0>
   11578:	movw	r3, #12586	; 0x312a
   1157c:	add	r1, r5, #824	; 0x338
   11580:	mov	r0, r4
   11584:	mov	r2, #10
   11588:	str	r7, [sp]
   1158c:	str	r7, [sp, #4]
   11590:	movt	r3, #1
   11594:	bl	11678 <__assert_fail@plt+0x9c0>
   11598:	ldr	r0, [r5]
   1159c:	cmp	r0, #1
   115a0:	blt	11608 <__assert_fail@plt+0x950>
   115a4:	movw	r3, #12609	; 0x3141
   115a8:	add	r1, r5, #920	; 0x398
   115ac:	mov	r0, r4
   115b0:	mov	r2, #8
   115b4:	str	r8, [sp]
   115b8:	str	r8, [sp, #4]
   115bc:	movt	r3, #1
   115c0:	bl	11678 <__assert_fail@plt+0x9c0>
   115c4:	ldr	r0, [r5, #8]
   115c8:	cmp	r0, #1
   115cc:	blt	115e4 <__assert_fail@plt+0x92c>
   115d0:	movw	r2, #12576	; 0x3120
   115d4:	add	r1, r5, #992	; 0x3e0
   115d8:	mov	r0, r4
   115dc:	movt	r2, #1
   115e0:	bl	117b4 <__assert_fail@plt+0xafc>
   115e4:	ldr	r0, [r6]
   115e8:	cmp	r0, #1
   115ec:	blt	11608 <__assert_fail@plt+0x950>
   115f0:	movw	r2, #12595	; 0x3133
   115f4:	movw	r0, #9048	; 0x2358
   115f8:	add	r1, r5, r0
   115fc:	movt	r2, #1
   11600:	mov	r0, r4
   11604:	bl	117b4 <__assert_fail@plt+0xafc>
   11608:	mov	r0, r4
   1160c:	sub	sp, fp, #24
   11610:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11614:	b	121e0 <__assert_fail@plt+0x1528>
   11618:	mov	ip, r0
   1161c:	ldr	r0, [r1]
   11620:	cmp	r0, #0
   11624:	beq	11660 <__assert_fail@plt+0x9a8>
   11628:	ldr	r1, [r1, #4]
   1162c:	vldr	d16, [pc, #60]	; 11670 <__assert_fail@plt+0x9b8>
   11630:	vmov	s2, r0
   11634:	sub	r1, r0, r1
   11638:	mov	r0, ip
   1163c:	vmov	s0, r1
   11640:	movw	r1, #12642	; 0x3162
   11644:	vcvt.f64.s32	d17, s0
   11648:	vcvt.f64.s32	d18, s2
   1164c:	movt	r1, #1
   11650:	vmul.f64	d16, d17, d16
   11654:	vdiv.f64	d16, d16, d18
   11658:	vmov	r2, r3, d16
   1165c:	b	10c28 <fprintf@plt>
   11660:	movw	r0, #12633	; 0x3159
   11664:	mov	r1, ip
   11668:	movt	r0, #1
   1166c:	b	10c88 <fputs@plt>
   11670:	andeq	r0, r0, r0
   11674:	subsmi	r0, r9, r0
   11678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1167c:	add	fp, sp, #28
   11680:	sub	sp, sp, #4
   11684:	mov	r5, r1
   11688:	movw	r1, #12648	; 0x3168
   1168c:	mov	r7, r2
   11690:	mov	r2, r3
   11694:	mov	r4, r0
   11698:	movt	r1, #1
   1169c:	bl	10c28 <fprintf@plt>
   116a0:	movw	r0, #12696	; 0x3198
   116a4:	mov	r1, r4
   116a8:	movt	r0, #1
   116ac:	bl	10c88 <fputs@plt>
   116b0:	movw	r0, #12723	; 0x31b3
   116b4:	mov	r1, r4
   116b8:	movt	r0, #1
   116bc:	bl	10c88 <fputs@plt>
   116c0:	ldrb	sl, [fp, #8]
   116c4:	movw	r0, #12653	; 0x316d
   116c8:	movw	r2, #12660	; 0x3174
   116cc:	movw	r1, #12649	; 0x3169
   116d0:	movt	r0, #1
   116d4:	movt	r2, #1
   116d8:	movt	r1, #1
   116dc:	cmp	sl, #0
   116e0:	movne	r2, r0
   116e4:	mov	r0, r4
   116e8:	bl	10c28 <fprintf@plt>
   116ec:	ldr	r1, [fp, #12]
   116f0:	lsl	r0, r7, #16
   116f4:	sxth	r6, r7
   116f8:	cmp	r0, #65536	; 0x10000
   116fc:	str	r1, [sp]
   11700:	blt	1174c <__assert_fail@plt+0xa94>
   11704:	movw	r8, #12667	; 0x317b
   11708:	mov	r7, #1
   1170c:	mov	r9, #1
   11710:	movt	r8, #1
   11714:	mov	r1, r5
   11718:	ldr	r0, [r1, r7, lsl #3]!
   1171c:	cmp	r0, #1
   11720:	blt	1173c <__assert_fail@plt+0xa84>
   11724:	mov	r0, r4
   11728:	bl	118e0 <__assert_fail@plt+0xc28>
   1172c:	mov	r0, r4
   11730:	mov	r1, r8
   11734:	mov	r2, r7
   11738:	bl	10c28 <fprintf@plt>
   1173c:	add	r9, r9, #1
   11740:	sxth	r7, r9
   11744:	cmp	r6, r7
   11748:	bge	11714 <__assert_fail@plt+0xa5c>
   1174c:	cmp	sl, #0
   11750:	beq	11780 <__assert_fail@plt+0xac8>
   11754:	add	r1, r5, r6, lsl #3
   11758:	ldr	r0, [r1, #8]!
   1175c:	cmp	r0, #1
   11760:	blt	11780 <__assert_fail@plt+0xac8>
   11764:	mov	r0, r4
   11768:	bl	118e0 <__assert_fail@plt+0xc28>
   1176c:	movw	r1, #12676	; 0x3184
   11770:	mov	r0, r4
   11774:	mov	r2, r6
   11778:	movt	r1, #1
   1177c:	bl	10c28 <fprintf@plt>
   11780:	ldr	r0, [sp]
   11784:	tst	r0, #255	; 0xff
   11788:	subeq	sp, fp, #28
   1178c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11790:	mov	r0, r4
   11794:	mov	r1, r5
   11798:	bl	118e0 <__assert_fail@plt+0xc28>
   1179c:	movw	r0, #12617	; 0x3149
   117a0:	mov	r1, r4
   117a4:	movt	r0, #1
   117a8:	sub	sp, fp, #28
   117ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117b0:	b	10c88 <fputs@plt>
   117b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   117b8:	add	fp, sp, #24
   117bc:	mov	r5, r0
   117c0:	mov	r0, r1
   117c4:	mov	r6, r2
   117c8:	mov	r4, r1
   117cc:	bl	11b34 <__assert_fail@plt+0xe7c>
   117d0:	movw	r0, #8052	; 0x1f74
   117d4:	movw	r2, #6464	; 0x1940
   117d8:	ldr	r0, [r4, r0]!
   117dc:	movt	r2, #1
   117e0:	mov	r7, r4
   117e4:	ldr	r1, [r7, #-4]!
   117e8:	bl	12eb8 <error@@Base+0x960>
   117ec:	movw	r1, #12648	; 0x3168
   117f0:	mov	r0, r5
   117f4:	mov	r2, r6
   117f8:	movt	r1, #1
   117fc:	bl	10c28 <fprintf@plt>
   11800:	movw	r0, #12696	; 0x3198
   11804:	mov	r1, r5
   11808:	movt	r0, #1
   1180c:	bl	10c88 <fputs@plt>
   11810:	movw	r0, #12723	; 0x31b3
   11814:	mov	r1, r5
   11818:	movt	r0, #1
   1181c:	bl	10c88 <fputs@plt>
   11820:	mov	r0, #10
   11824:	mov	r1, r5
   11828:	bl	10c58 <fputc@plt>
   1182c:	ldr	r0, [r4]
   11830:	cmp	r0, #1
   11834:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   11838:	movw	r8, #12649	; 0x3169
   1183c:	mov	r6, #0
   11840:	movt	r8, #1
   11844:	ldr	r0, [r7]
   11848:	ldr	r0, [r0, r6, lsl #2]
   1184c:	add	r1, r0, #12
   11850:	mov	r0, r5
   11854:	bl	118e0 <__assert_fail@plt+0xc28>
   11858:	ldr	r0, [r7]
   1185c:	mov	r1, r8
   11860:	ldr	r0, [r0, r6, lsl #2]
   11864:	ldr	r2, [r0, #8]
   11868:	mov	r0, r5
   1186c:	bl	10c28 <fprintf@plt>
   11870:	ldr	r0, [r4]
   11874:	add	r6, r6, #1
   11878:	cmp	r6, r0
   1187c:	blt	11844 <__assert_fail@plt+0xb8c>
   11880:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11884:	push	{r4, r5, fp, lr}
   11888:	add	fp, sp, #8
   1188c:	mov	r4, r2
   11890:	mov	r2, r0
   11894:	movw	r0, #28888	; 0x70d8
   11898:	mov	r5, r1
   1189c:	mov	r1, #99	; 0x63
   118a0:	movt	r0, #2
   118a4:	bl	10b5c <fgets@plt>
   118a8:	cmp	r0, #0
   118ac:	moveq	r0, #0
   118b0:	popeq	{r4, r5, fp, pc}
   118b4:	movw	r0, #28888	; 0x70d8
   118b8:	movw	r1, #12625	; 0x3151
   118bc:	mov	r2, r5
   118c0:	mov	r3, r4
   118c4:	movt	r0, #2
   118c8:	movt	r1, #1
   118cc:	bl	10c34 <__isoc99_sscanf@plt>
   118d0:	sub	r0, r0, #2
   118d4:	clz	r0, r0
   118d8:	lsr	r0, r0, #5
   118dc:	pop	{r4, r5, fp, pc}
   118e0:	push	{r4, r5, fp, lr}
   118e4:	add	fp, sp, #8
   118e8:	mov	r4, r0
   118ec:	cmp	r1, #0
   118f0:	beq	1191c <__assert_fail@plt+0xc64>
   118f4:	ldm	r1, {r2, r3}
   118f8:	mov	r5, r1
   118fc:	movw	r1, #12685	; 0x318d
   11900:	mov	r0, r4
   11904:	movt	r1, #1
   11908:	bl	10c28 <fprintf@plt>
   1190c:	mov	r0, r4
   11910:	mov	r1, r5
   11914:	bl	11618 <__assert_fail@plt+0x960>
   11918:	b	1192c <__assert_fail@plt+0xc74>
   1191c:	movw	r0, #12696	; 0x3198
   11920:	mov	r1, r4
   11924:	movt	r0, #1
   11928:	bl	10c88 <fputs@plt>
   1192c:	movw	r0, #12723	; 0x31b3
   11930:	mov	r1, r4
   11934:	movt	r0, #1
   11938:	pop	{r4, r5, fp, lr}
   1193c:	b	10c88 <fputs@plt>
   11940:	ldr	r1, [r1, #8]
   11944:	ldr	r0, [r0, #8]
   11948:	b	120ec <__assert_fail@plt+0x1434>
   1194c:	push	{r4, r5, r6, sl, fp, lr}
   11950:	add	fp, sp, #16
   11954:	mov	r4, r0
   11958:	movw	r6, #503	; 0x1f7
   1195c:	mov	r5, r0
   11960:	mov	r0, r5
   11964:	bl	12d18 <error@@Base+0x7c0>
   11968:	subs	r6, r6, #1
   1196c:	add	r5, r5, #16
   11970:	bne	11960 <__assert_fail@plt+0xca8>
   11974:	movw	r0, #8052	; 0x1f74
   11978:	mov	r1, #0
   1197c:	str	r1, [r4, r0]
   11980:	movw	r0, #8048	; 0x1f70
   11984:	str	r1, [r4, r0]
   11988:	pop	{r4, r5, r6, sl, fp, pc}
   1198c:	push	{r4, r5, r6, sl, fp, lr}
   11990:	add	fp, sp, #16
   11994:	mov	r5, r1
   11998:	ldrb	r1, [r1]
   1199c:	mov	r4, #0
   119a0:	mov	r2, #0
   119a4:	cmp	r1, #0
   119a8:	beq	119dc <__assert_fail@plt+0xd24>
   119ac:	add	r3, r5, #1
   119b0:	mov	r2, #0
   119b4:	uxtab	r2, r2, r1
   119b8:	ldrb	r1, [r3], #1
   119bc:	cmp	r1, #0
   119c0:	bne	119b4 <__assert_fail@plt+0xcfc>
   119c4:	movw	r1, #20065	; 0x4e61
   119c8:	movt	r1, #33354	; 0x824a
   119cc:	umull	r1, r3, r2, r1
   119d0:	lsr	r1, r3, #8
   119d4:	movw	r3, #503	; 0x1f7
   119d8:	mls	r2, r1, r3, r2
   119dc:	ldr	r6, [r0, r2, lsl #4]
   119e0:	b	119fc <__assert_fail@plt+0xd44>
   119e4:	ldr	r1, [r6, #8]
   119e8:	mov	r0, r5
   119ec:	bl	10b20 <strcmp@plt>
   119f0:	cmp	r0, #0
   119f4:	beq	11a08 <__assert_fail@plt+0xd50>
   119f8:	ldr	r6, [r6, #4]
   119fc:	cmp	r6, #0
   11a00:	bne	119e4 <__assert_fail@plt+0xd2c>
   11a04:	b	11a0c <__assert_fail@plt+0xd54>
   11a08:	mov	r4, r6
   11a0c:	mov	r0, r4
   11a10:	pop	{r4, r5, r6, sl, fp, pc}
   11a14:	push	{r4, r5, fp, lr}
   11a18:	add	fp, sp, #8
   11a1c:	mov	r4, r0
   11a20:	ldr	r0, [r1, #8]
   11a24:	ldrb	r2, [r0]
   11a28:	cmp	r2, #0
   11a2c:	beq	11a64 <__assert_fail@plt+0xdac>
   11a30:	add	r3, r0, #1
   11a34:	mov	r0, #0
   11a38:	uxtab	r0, r0, r2
   11a3c:	ldrb	r2, [r3], #1
   11a40:	cmp	r2, #0
   11a44:	bne	11a38 <__assert_fail@plt+0xd80>
   11a48:	movw	r2, #20065	; 0x4e61
   11a4c:	movt	r2, #33354	; 0x824a
   11a50:	umull	r2, r3, r0, r2
   11a54:	lsr	r2, r3, #8
   11a58:	movw	r3, #503	; 0x1f7
   11a5c:	mls	r0, r2, r3, r0
   11a60:	b	11a68 <__assert_fail@plt+0xdb0>
   11a64:	mov	r0, #0
   11a68:	add	r0, r4, r0, lsl #4
   11a6c:	bl	12d24 <error@@Base+0x7cc>
   11a70:	movw	r0, #8048	; 0x1f70
   11a74:	mov	r5, r4
   11a78:	ldr	r0, [r5, r0]!
   11a7c:	cmp	r0, #0
   11a80:	beq	11a90 <__assert_fail@plt+0xdd8>
   11a84:	bl	10b44 <free@plt>
   11a88:	mov	r0, #0
   11a8c:	str	r0, [r5]
   11a90:	movw	r0, #8052	; 0x1f74
   11a94:	ldr	r0, [r4, r0]!
   11a98:	add	r0, r0, #1
   11a9c:	str	r0, [r4]
   11aa0:	pop	{r4, r5, fp, pc}
   11aa4:	push	{r4, r5, fp, lr}
   11aa8:	add	fp, sp, #8
   11aac:	mov	r4, r0
   11ab0:	ldr	r0, [r1, #8]
   11ab4:	ldrb	r2, [r0]
   11ab8:	cmp	r2, #0
   11abc:	beq	11af4 <__assert_fail@plt+0xe3c>
   11ac0:	add	r3, r0, #1
   11ac4:	mov	r0, #0
   11ac8:	uxtab	r0, r0, r2
   11acc:	ldrb	r2, [r3], #1
   11ad0:	cmp	r2, #0
   11ad4:	bne	11ac8 <__assert_fail@plt+0xe10>
   11ad8:	movw	r2, #20065	; 0x4e61
   11adc:	movt	r2, #33354	; 0x824a
   11ae0:	umull	r2, r3, r0, r2
   11ae4:	lsr	r2, r3, #8
   11ae8:	movw	r3, #503	; 0x1f7
   11aec:	mls	r0, r2, r3, r0
   11af0:	b	11af8 <__assert_fail@plt+0xe40>
   11af4:	mov	r0, #0
   11af8:	add	r0, r4, r0, lsl #4
   11afc:	bl	12dac <error@@Base+0x854>
   11b00:	movw	r0, #8048	; 0x1f70
   11b04:	mov	r5, r4
   11b08:	ldr	r0, [r5, r0]!
   11b0c:	cmp	r0, #0
   11b10:	beq	11b20 <__assert_fail@plt+0xe68>
   11b14:	bl	10b44 <free@plt>
   11b18:	mov	r0, #0
   11b1c:	str	r0, [r5]
   11b20:	movw	r0, #8052	; 0x1f74
   11b24:	ldr	r0, [r4, r0]!
   11b28:	sub	r0, r0, #1
   11b2c:	str	r0, [r4]
   11b30:	pop	{r4, r5, fp, pc}
   11b34:	push	{r4, r5, fp, lr}
   11b38:	add	fp, sp, #8
   11b3c:	mov	r4, r0
   11b40:	movw	r0, #8048	; 0x1f70
   11b44:	mov	r5, r4
   11b48:	ldr	r0, [r5, r0]!
   11b4c:	cmp	r0, #0
   11b50:	bne	11ba8 <__assert_fail@plt+0xef0>
   11b54:	movw	r0, #8052	; 0x1f74
   11b58:	ldr	r0, [r4, r0]
   11b5c:	cmp	r0, #0
   11b60:	popeq	{r4, r5, fp, pc}
   11b64:	mov	r1, #4
   11b68:	bl	120cc <__assert_fail@plt+0x1414>
   11b6c:	str	r0, [r5]
   11b70:	mov	r0, #0
   11b74:	movw	ip, #503	; 0x1f7
   11b78:	mov	r2, #0
   11b7c:	ldr	r3, [r4, r2, lsl #4]
   11b80:	b	11b94 <__assert_fail@plt+0xedc>
   11b84:	ldr	r1, [r5]
   11b88:	str	r3, [r1, r0, lsl #2]
   11b8c:	add	r0, r0, #1
   11b90:	ldr	r3, [r3, #4]
   11b94:	cmp	r3, #0
   11b98:	bne	11b84 <__assert_fail@plt+0xecc>
   11b9c:	add	r2, r2, #1
   11ba0:	cmp	r2, ip
   11ba4:	bne	11b7c <__assert_fail@plt+0xec4>
   11ba8:	pop	{r4, r5, fp, pc}
   11bac:	push	{r4, r5, r6, r7, fp, lr}
   11bb0:	add	fp, sp, #16
   11bb4:	mov	r5, r1
   11bb8:	mov	r4, r0
   11bbc:	movw	r7, #503	; 0x1f7
   11bc0:	mov	r6, r0
   11bc4:	mov	r0, r6
   11bc8:	mov	r1, r5
   11bcc:	bl	12e78 <error@@Base+0x920>
   11bd0:	subs	r7, r7, #1
   11bd4:	add	r6, r6, #16
   11bd8:	bne	11bc4 <__assert_fail@plt+0xf0c>
   11bdc:	movw	r0, #8048	; 0x1f70
   11be0:	mov	r5, r4
   11be4:	ldr	r0, [r5, r0]!
   11be8:	cmp	r0, #0
   11bec:	beq	11bfc <__assert_fail@plt+0xf44>
   11bf0:	bl	10b44 <free@plt>
   11bf4:	mov	r0, #0
   11bf8:	str	r0, [r5]
   11bfc:	movw	r0, #8052	; 0x1f74
   11c00:	mov	r1, #0
   11c04:	str	r1, [r4, r0]
   11c08:	pop	{r4, r5, r6, r7, fp, pc}
   11c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c10:	add	fp, sp, #28
   11c14:	sub	sp, sp, #20
   11c18:	ldr	sl, [r1]
   11c1c:	str	r0, [sp]
   11c20:	cmp	sl, #0
   11c24:	str	sl, [sp, #8]
   11c28:	beq	11f88 <__assert_fail@plt+0x12d0>
   11c2c:	add	r9, sp, #4
   11c30:	b	11c40 <__assert_fail@plt+0xf88>
   11c34:	cmp	r0, #29
   11c38:	beq	11eb8 <__assert_fail@plt+0x1200>
   11c3c:	b	11f78 <__assert_fail@plt+0x12c0>
   11c40:	mov	r7, #17
   11c44:	mov	r6, r9
   11c48:	mov	r0, r6
   11c4c:	mov	r8, r7
   11c50:	bl	12010 <__assert_fail@plt+0x1358>
   11c54:	mov	r6, r0
   11c58:	bl	1205c <__assert_fail@plt+0x13a4>
   11c5c:	mov	r7, r0
   11c60:	mov	r0, r6
   11c64:	bl	12010 <__assert_fail@plt+0x1358>
   11c68:	mov	r5, r0
   11c6c:	bl	1205c <__assert_fail@plt+0x13a4>
   11c70:	mov	r4, r0
   11c74:	mov	r0, r5
   11c78:	bl	12010 <__assert_fail@plt+0x1358>
   11c7c:	bl	1205c <__assert_fail@plt+0x13a4>
   11c80:	cmp	r7, #1
   11c84:	cmpeq	r4, #2
   11c88:	beq	11df4 <__assert_fail@plt+0x113c>
   11c8c:	sub	r1, r7, #1
   11c90:	cmp	r1, #3
   11c94:	subcs	r1, r4, #1
   11c98:	cmpcs	r1, #3
   11c9c:	bcc	11e74 <__assert_fail@plt+0x11bc>
   11ca0:	orr	r2, r7, #1
   11ca4:	orr	r1, r4, #1
   11ca8:	cmp	r2, #9
   11cac:	cmpeq	r1, #9
   11cb0:	beq	11df4 <__assert_fail@plt+0x113c>
   11cb4:	cmp	r2, #9
   11cb8:	bne	11ce0 <__assert_fail@plt+0x1028>
   11cbc:	cmp	r4, #13
   11cc0:	bhi	11ce0 <__assert_fail@plt+0x1028>
   11cc4:	mov	r3, #1
   11cc8:	mov	r5, #13312	; 0x3400
   11ccc:	tst	r5, r3, lsl r4
   11cd0:	beq	11ce0 <__assert_fail@plt+0x1028>
   11cd4:	orr	r3, r0, #1
   11cd8:	cmp	r3, #9
   11cdc:	beq	11df4 <__assert_fail@plt+0x113c>
   11ce0:	orr	r3, r8, #1
   11ce4:	cmp	r3, #9
   11ce8:	bne	11d0c <__assert_fail@plt+0x1054>
   11cec:	cmp	r7, #13
   11cf0:	bhi	11d0c <__assert_fail@plt+0x1054>
   11cf4:	mov	r3, #1
   11cf8:	mov	r5, #13312	; 0x3400
   11cfc:	tst	r5, r3, lsl r7
   11d00:	beq	11d0c <__assert_fail@plt+0x1054>
   11d04:	cmp	r1, #9
   11d08:	beq	11df4 <__assert_fail@plt+0x113c>
   11d0c:	cmp	r7, #8
   11d10:	cmpeq	r4, #10
   11d14:	beq	11df4 <__assert_fail@plt+0x113c>
   11d18:	cmp	r7, #8
   11d1c:	cmpeq	r4, #11
   11d20:	beq	11de0 <__assert_fail@plt+0x1128>
   11d24:	cmp	r8, #8
   11d28:	cmpeq	r7, #11
   11d2c:	beq	11dec <__assert_fail@plt+0x1134>
   11d30:	sub	r2, r2, #9
   11d34:	sub	r3, r7, #15
   11d38:	clz	r2, r2
   11d3c:	clz	r3, r3
   11d40:	lsr	ip, r2, #5
   11d44:	sub	r2, r4, #15
   11d48:	lsr	r3, r3, #5
   11d4c:	clz	r2, r2
   11d50:	orr	r5, r3, ip
   11d54:	lsr	r2, r2, #5
   11d58:	tst	r5, r2
   11d5c:	subeq	r1, r1, #9
   11d60:	clzeq	r1, r1
   11d64:	lsreq	r1, r1, #5
   11d68:	andseq	r1, r3, r1
   11d6c:	bne	11df4 <__assert_fail@plt+0x113c>
   11d70:	cmp	r8, #15
   11d74:	bne	11da4 <__assert_fail@plt+0x10ec>
   11d78:	orr	r2, r7, #2
   11d7c:	sub	r1, r7, #10
   11d80:	sub	r2, r2, #14
   11d84:	clz	r1, r1
   11d88:	clz	r2, r2
   11d8c:	lsr	r1, r1, #5
   11d90:	lsr	r2, r2, #5
   11d94:	orr	r1, r1, r2
   11d98:	cmp	r1, #1
   11d9c:	cmpeq	r4, #15
   11da0:	beq	11df4 <__assert_fail@plt+0x113c>
   11da4:	cmp	r7, #15
   11da8:	bne	11e04 <__assert_fail@plt+0x114c>
   11dac:	orr	r2, r4, #2
   11db0:	sub	r1, r4, #10
   11db4:	sub	r2, r2, #14
   11db8:	clz	r1, r1
   11dbc:	clz	r2, r2
   11dc0:	lsr	r1, r1, #5
   11dc4:	lsr	r2, r2, #5
   11dc8:	orr	r1, r1, r2
   11dcc:	cmp	r1, #1
   11dd0:	bne	11e10 <__assert_fail@plt+0x1158>
   11dd4:	cmp	r0, #15
   11dd8:	beq	11df4 <__assert_fail@plt+0x113c>
   11ddc:	b	11e10 <__assert_fail@plt+0x1158>
   11de0:	cmp	r0, #8
   11de4:	beq	11df4 <__assert_fail@plt+0x113c>
   11de8:	b	11d24 <__assert_fail@plt+0x106c>
   11dec:	cmp	r4, #8
   11df0:	bne	11d30 <__assert_fail@plt+0x1078>
   11df4:	ldr	r0, [r6, #4]
   11df8:	cmp	r0, #0
   11dfc:	bne	11c48 <__assert_fail@plt+0xf90>
   11e00:	b	11e7c <__assert_fail@plt+0x11c4>
   11e04:	cmp	r7, #7
   11e08:	cmpeq	r4, #7
   11e0c:	beq	11df4 <__assert_fail@plt+0x113c>
   11e10:	cmp	r4, #16
   11e14:	bne	11e40 <__assert_fail@plt+0x1188>
   11e18:	orr	r0, r7, #8
   11e1c:	sub	r1, r7, #16
   11e20:	sub	r0, r0, #15
   11e24:	clz	r1, r1
   11e28:	clz	r0, r0
   11e2c:	lsr	r1, r1, #5
   11e30:	lsr	r0, r0, #5
   11e34:	orr	r0, r0, ip
   11e38:	orrs	r0, r1, r0
   11e3c:	bne	11df4 <__assert_fail@plt+0x113c>
   11e40:	cmp	r7, #16
   11e44:	bne	11e68 <__assert_fail@plt+0x11b0>
   11e48:	cmp	r4, #16
   11e4c:	bhi	11e74 <__assert_fail@plt+0x11bc>
   11e50:	movw	r1, #33664	; 0x8380
   11e54:	mov	r0, #1
   11e58:	movt	r1, #1
   11e5c:	tst	r1, r0, lsl r4
   11e60:	bne	11df4 <__assert_fail@plt+0x113c>
   11e64:	b	11e74 <__assert_fail@plt+0x11bc>
   11e68:	cmp	r7, #5
   11e6c:	cmpeq	r4, #5
   11e70:	beq	11df4 <__assert_fail@plt+0x113c>
   11e74:	cmp	r6, #0
   11e78:	beq	11f88 <__assert_fail@plt+0x12d0>
   11e7c:	mov	r7, r6
   11e80:	ldr	r6, [r6, #4]
   11e84:	cmp	r6, #0
   11e88:	beq	11ea0 <__assert_fail@plt+0x11e8>
   11e8c:	mov	r0, r6
   11e90:	bl	1205c <__assert_fail@plt+0x13a4>
   11e94:	orr	r0, r0, #2
   11e98:	cmp	r0, #6
   11e9c:	beq	11e7c <__assert_fail@plt+0x11c4>
   11ea0:	ldr	r0, [sl, #12]
   11ea4:	bl	10b50 <utf8proc_get_property@plt>
   11ea8:	ldrsh	r0, [r0]
   11eac:	sub	r1, r0, #1
   11eb0:	cmp	r1, #12
   11eb4:	bcs	11c34 <__assert_fail@plt+0xf7c>
   11eb8:	ldr	r5, [r7, #4]
   11ebc:	cmp	r5, sl
   11ec0:	beq	11f30 <__assert_fail@plt+0x1278>
   11ec4:	mov	r4, #0
   11ec8:	mov	r6, sl
   11ecc:	cmp	r6, #0
   11ed0:	beq	11f90 <__assert_fail@plt+0x12d8>
   11ed4:	ldr	r0, [r6, #12]
   11ed8:	mov	r1, r9
   11edc:	bl	10b68 <utf8proc_encode_char@plt>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11fb0 <__assert_fail@plt+0x12f8>
   11ee8:	ldr	r6, [r6, #4]
   11eec:	add	r4, r0, r4
   11ef0:	cmp	r6, r5
   11ef4:	bne	11ecc <__assert_fail@plt+0x1214>
   11ef8:	add	r0, r4, #1
   11efc:	bl	10bc8 <malloc@plt>
   11f00:	mov	r4, r0
   11f04:	mov	r6, #0
   11f08:	cmp	sl, #0
   11f0c:	beq	11fd0 <__assert_fail@plt+0x1318>
   11f10:	ldr	r0, [sl, #12]
   11f14:	add	r1, r4, r6
   11f18:	bl	10b68 <utf8proc_encode_char@plt>
   11f1c:	ldr	sl, [sl, #4]
   11f20:	add	r6, r0, r6
   11f24:	cmp	sl, r5
   11f28:	bne	11f08 <__assert_fail@plt+0x1250>
   11f2c:	b	11f40 <__assert_fail@plt+0x1288>
   11f30:	mov	r0, #1
   11f34:	bl	10bc8 <malloc@plt>
   11f38:	mov	r4, r0
   11f3c:	mov	r6, #0
   11f40:	mov	r0, #0
   11f44:	mov	r1, #12
   11f48:	strb	r0, [r4, r6]
   11f4c:	mov	r0, #1
   11f50:	bl	120cc <__assert_fail@plt+0x1414>
   11f54:	mov	r5, r0
   11f58:	mov	r0, r4
   11f5c:	bl	10c4c <utf8proc_NFC@plt>
   11f60:	str	r0, [r5, #8]
   11f64:	ldr	r0, [sp]
   11f68:	mov	r1, r5
   11f6c:	bl	12d84 <error@@Base+0x82c>
   11f70:	mov	r0, r4
   11f74:	bl	10b44 <free@plt>
   11f78:	ldr	sl, [r7, #4]
   11f7c:	cmp	sl, #0
   11f80:	str	sl, [sp, #8]
   11f84:	bne	11c40 <__assert_fail@plt+0xf88>
   11f88:	sub	sp, fp, #28
   11f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f90:	movw	r0, #25851	; 0x64fb
   11f94:	movw	r1, #25844	; 0x64f4
   11f98:	movw	r3, #25867	; 0x650b
   11f9c:	mov	r2, #249	; 0xf9
   11fa0:	movt	r0, #1
   11fa4:	movt	r1, #1
   11fa8:	movt	r3, #1
   11fac:	bl	10cb8 <__assert_fail@plt>
   11fb0:	movw	r0, #25893	; 0x6525
   11fb4:	movw	r1, #25844	; 0x64f4
   11fb8:	movw	r3, #25867	; 0x650b
   11fbc:	mov	r2, #253	; 0xfd
   11fc0:	movt	r0, #1
   11fc4:	movt	r1, #1
   11fc8:	movt	r3, #1
   11fcc:	bl	10cb8 <__assert_fail@plt>
   11fd0:	movw	r0, #25851	; 0x64fb
   11fd4:	movw	r1, #25844	; 0x64f4
   11fd8:	movw	r3, #25912	; 0x6538
   11fdc:	movw	r2, #269	; 0x10d
   11fe0:	movt	r0, #1
   11fe4:	movt	r1, #1
   11fe8:	movt	r3, #1
   11fec:	bl	10cb8 <__assert_fail@plt>
   11ff0:	push	{r4, sl, fp, lr}
   11ff4:	add	fp, sp, #8
   11ff8:	mov	r4, r0
   11ffc:	ldr	r0, [r0, #8]
   12000:	bl	10b44 <free@plt>
   12004:	mov	r0, r4
   12008:	pop	{r4, sl, fp, lr}
   1200c:	b	10b44 <free@plt>
   12010:	push	{r4, r5, fp, lr}
   12014:	add	fp, sp, #8
   12018:	mov	r4, #0
   1201c:	cmp	r0, #0
   12020:	beq	12054 <__assert_fail@plt+0x139c>
   12024:	ldr	r5, [r0, #4]
   12028:	b	12044 <__assert_fail@plt+0x138c>
   1202c:	mov	r0, r5
   12030:	bl	1205c <__assert_fail@plt+0x13a4>
   12034:	orr	r0, r0, #2
   12038:	cmp	r0, #6
   1203c:	bne	12050 <__assert_fail@plt+0x1398>
   12040:	ldr	r5, [r5, #4]
   12044:	cmp	r5, #0
   12048:	bne	1202c <__assert_fail@plt+0x1374>
   1204c:	b	12054 <__assert_fail@plt+0x139c>
   12050:	mov	r4, r5
   12054:	mov	r0, r4
   12058:	pop	{r4, r5, fp, pc}
   1205c:	push	{r4, sl, fp, lr}
   12060:	add	fp, sp, #8
   12064:	cmp	r0, #0
   12068:	moveq	r0, #18
   1206c:	popeq	{r4, sl, fp, pc}
   12070:	ldr	lr, [r0, #12]
   12074:	movw	ip, #12728	; 0x31b8
   12078:	mov	r3, #0
   1207c:	movw	r2, #1092	; 0x444
   12080:	movt	ip, #1
   12084:	sub	r0, r2, r3
   12088:	add	r1, r3, r0, lsr #1
   1208c:	add	r0, r1, r1, lsl #1
   12090:	ldr	r4, [ip, r0, lsl #2]
   12094:	cmp	r4, lr
   12098:	bls	120b0 <__assert_fail@plt+0x13f8>
   1209c:	sub	r2, r1, #1
   120a0:	cmp	r2, r3
   120a4:	movcc	r0, #0
   120a8:	popcc	{r4, sl, fp, pc}
   120ac:	b	12084 <__assert_fail@plt+0x13cc>
   120b0:	add	r0, ip, r0, lsl #2
   120b4:	ldr	r3, [r0, #4]
   120b8:	cmp	r3, lr
   120bc:	ldrcs	r0, [r0, #8]
   120c0:	popcs	{r4, sl, fp, pc}
   120c4:	add	r3, r1, #1
   120c8:	b	120a0 <__assert_fail@plt+0x13e8>
   120cc:	push	{fp, lr}
   120d0:	mov	fp, sp
   120d4:	bl	10b14 <calloc@plt>
   120d8:	cmp	r0, #0
   120dc:	popne	{fp, pc}
   120e0:	movw	r0, #25936	; 0x6550
   120e4:	movt	r0, #1
   120e8:	bl	12558 <error@@Base>
   120ec:	push	{r4, r5, r6, sl, fp, lr}
   120f0:	add	fp, sp, #16
   120f4:	ldrb	r3, [r0]
   120f8:	ldrb	ip, [r1]
   120fc:	mov	r2, r0
   12100:	mov	r0, #0
   12104:	cmp	r3, #0
   12108:	beq	12140 <__assert_fail@plt+0x1488>
   1210c:	add	r6, r2, #1
   12110:	add	lr, r1, #1
   12114:	mov	r2, #0
   12118:	uxtb	r4, ip
   1211c:	uxtb	r5, r3
   12120:	cmp	r5, r4
   12124:	bne	12150 <__assert_fail@plt+0x1498>
   12128:	ldrb	r3, [r6, r2]
   1212c:	ldrb	ip, [lr, r2]
   12130:	add	r2, r2, #1
   12134:	cmp	r3, #0
   12138:	bne	12118 <__assert_fail@plt+0x1460>
   1213c:	b	12144 <__assert_fail@plt+0x148c>
   12140:	mov	r2, #0
   12144:	cmp	ip, #0
   12148:	popeq	{r4, r5, r6, sl, fp, pc}
   1214c:	mov	r3, #0
   12150:	ldrb	r1, [r1, r2]
   12154:	uxtb	r2, r3
   12158:	mov	r0, #1
   1215c:	cmp	r2, r1
   12160:	mvncc	r0, #0
   12164:	pop	{r4, r5, r6, sl, fp, pc}
   12168:	push	{r4, r5, fp, lr}
   1216c:	add	fp, sp, #8
   12170:	mov	r5, r1
   12174:	cmp	r0, #0
   12178:	beq	121ac <__assert_fail@plt+0x14f4>
   1217c:	mov	r1, r5
   12180:	mov	r4, r0
   12184:	bl	10b38 <fopen@plt>
   12188:	cmp	r0, #0
   1218c:	popne	{r4, r5, fp, pc}
   12190:	ldrb	r0, [r5]
   12194:	cmp	r0, #119	; 0x77
   12198:	bne	121d0 <__assert_fail@plt+0x1518>
   1219c:	movw	r0, #25962	; 0x656a
   121a0:	mov	r1, r4
   121a4:	movt	r0, #1
   121a8:	bl	12598 <error@@Base+0x40>
   121ac:	ldrb	r0, [r5]
   121b0:	movw	r1, #28872	; 0x70c8
   121b4:	movw	r2, #28876	; 0x70cc
   121b8:	movt	r1, #2
   121bc:	movt	r2, #2
   121c0:	cmp	r0, #114	; 0x72
   121c4:	moveq	r2, r1
   121c8:	ldr	r0, [r2]
   121cc:	pop	{r4, r5, fp, pc}
   121d0:	movw	r0, #25984	; 0x6580
   121d4:	mov	r1, r4
   121d8:	movt	r0, #1
   121dc:	bl	12598 <error@@Base+0x40>
   121e0:	movw	r1, #28872	; 0x70c8
   121e4:	movt	r1, #2
   121e8:	ldr	r1, [r1]
   121ec:	cmp	r1, r0
   121f0:	movwne	r1, #28876	; 0x70cc
   121f4:	movtne	r1, #2
   121f8:	ldrne	r1, [r1]
   121fc:	cmpne	r1, r0
   12200:	bxeq	lr
   12204:	b	10c40 <fclose@plt>
   12208:	push	{fp, lr}
   1220c:	mov	fp, sp
   12210:	sub	sp, sp, #88	; 0x58
   12214:	mov	r1, sp
   12218:	bl	1303c <error@@Base+0xae4>
   1221c:	clz	r0, r0
   12220:	lsr	r0, r0, #5
   12224:	mov	sp, fp
   12228:	pop	{fp, pc}
   1222c:	push	{r4, sl, fp, lr}
   12230:	add	fp, sp, #8
   12234:	movw	r0, #28988	; 0x713c
   12238:	movt	r0, #2
   1223c:	ldrh	r1, [r0]
   12240:	add	r1, r1, #1
   12244:	strh	r1, [r0]
   12248:	sxth	r0, r1
   1224c:	bl	12260 <__assert_fail@plt+0x15a8>
   12250:	mov	r4, r0
   12254:	bl	10b8c <unlink@plt>
   12258:	mov	r0, r4
   1225c:	pop	{r4, sl, fp, pc}
   12260:	push	{r4, r5, fp, lr}
   12264:	add	fp, sp, #8
   12268:	sub	sp, sp, #104	; 0x68
   1226c:	mov	r4, r0
   12270:	movw	r0, #46148	; 0xb444
   12274:	movt	r0, #2
   12278:	ldr	r5, [r0]
   1227c:	bl	10bf8 <getpid@plt>
   12280:	movw	r1, #26025	; 0x65a9
   12284:	mov	r3, r0
   12288:	sxth	r0, r4
   1228c:	add	r4, sp, #4
   12290:	mov	r2, r5
   12294:	str	r0, [sp]
   12298:	movt	r1, #1
   1229c:	mov	r0, r4
   122a0:	bl	10c64 <sprintf@plt>
   122a4:	mov	r0, r4
   122a8:	bl	10b74 <strdup@plt>
   122ac:	sub	sp, fp, #8
   122b0:	pop	{r4, r5, fp, pc}
   122b4:	push	{r4, sl, fp, lr}
   122b8:	add	fp, sp, #8
   122bc:	mov	r4, r0
   122c0:	bl	10c1c <strlen@plt>
   122c4:	sub	r0, r0, #1
   122c8:	sxth	r0, r0
   122cc:	cmp	r0, #0
   122d0:	blt	122e0 <__assert_fail@plt+0x1628>
   122d4:	ldrb	r1, [r4, r0]
   122d8:	cmp	r1, #47	; 0x2f
   122dc:	bne	122c4 <__assert_fail@plt+0x160c>
   122e0:	add	r0, r4, r0
   122e4:	add	r0, r0, #1
   122e8:	pop	{r4, sl, fp, pc}
   122ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f0:	add	fp, sp, #28
   122f4:	sub	sp, sp, #12
   122f8:	str	r2, [sp]
   122fc:	stmib	sp, {r0, r1}
   12300:	mov	r6, r3
   12304:	ldr	r4, [r1]
   12308:	mov	r0, r4
   1230c:	bl	10c1c <strlen@plt>
   12310:	sub	r0, r0, #1
   12314:	sxth	r0, r0
   12318:	cmp	r0, #0
   1231c:	blt	1232c <__assert_fail@plt+0x1674>
   12320:	ldrb	r1, [r4, r0]
   12324:	cmp	r1, #47	; 0x2f
   12328:	bne	12310 <__assert_fail@plt+0x1658>
   1232c:	add	r0, r4, r0
   12330:	movw	r1, #46148	; 0xb444
   12334:	movw	r4, #9760	; 0x2620
   12338:	add	r0, r0, #1
   1233c:	movt	r1, #2
   12340:	movt	r4, #1
   12344:	str	r0, [r1]
   12348:	mov	r0, #2
   1234c:	mov	r1, r4
   12350:	bl	10be0 <__sysv_signal@plt>
   12354:	mov	r0, #15
   12358:	mov	r1, r4
   1235c:	bl	10be0 <__sysv_signal@plt>
   12360:	ldr	r0, [sp, #4]
   12364:	ldr	r5, [r0]
   12368:	cmp	r5, #1
   1236c:	bne	12384 <__assert_fail@plt+0x16cc>
   12370:	movw	r0, #28852	; 0x70b4
   12374:	movt	r0, #2
   12378:	ldrb	r0, [r0]
   1237c:	cmp	r0, #0
   12380:	bne	12500 <__assert_fail@plt+0x1848>
   12384:	ldr	ip, [sp, #8]
   12388:	mov	r8, #0
   1238c:	cmp	r5, #2
   12390:	blt	124dc <__assert_fail@plt+0x1824>
   12394:	mov	r8, #0
   12398:	mov	r7, #1
   1239c:	mov	r9, #1
   123a0:	ldr	r4, [ip, r7, lsl #2]
   123a4:	ldrb	r0, [r4]
   123a8:	cmp	r0, #45	; 0x2d
   123ac:	bne	12484 <__assert_fail@plt+0x17cc>
   123b0:	ldrb	sl, [r4, #1]
   123b4:	cmp	sl, #0
   123b8:	beq	12484 <__assert_fail@plt+0x17cc>
   123bc:	mov	r0, r4
   123c0:	bl	10c1c <strlen@plt>
   123c4:	mov	r2, r0
   123c8:	movw	r0, #26054	; 0x65c6
   123cc:	mov	r1, r4
   123d0:	movt	r0, #1
   123d4:	bl	10c94 <strncmp@plt>
   123d8:	cmp	r0, #0
   123dc:	beq	12500 <__assert_fail@plt+0x1848>
   123e0:	ldr	ip, [sp, #8]
   123e4:	add	r1, r7, #1
   123e8:	mov	r0, #0
   123ec:	cmp	r1, r5
   123f0:	ldrlt	r0, [ip, r1, lsl #2]
   123f4:	cmp	r6, #0
   123f8:	ldrbne	r2, [r6]
   123fc:	cmpne	r2, #0
   12400:	beq	124f0 <__assert_fail@plt+0x1838>
   12404:	mov	r1, #0
   12408:	cmp	sl, r2
   1240c:	beq	12434 <__assert_fail@plt+0x177c>
   12410:	mov	r2, #1
   12414:	sxth	r1, r2
   12418:	add	r3, r1, r1, lsl #1
   1241c:	ldrb	r3, [r6, r3, lsl #2]
   12420:	cmp	r3, #0
   12424:	beq	124f0 <__assert_fail@plt+0x1838>
   12428:	add	r2, r2, #1
   1242c:	cmp	sl, r3
   12430:	bne	12414 <__assert_fail@plt+0x175c>
   12434:	add	r1, r1, r1, lsl #1
   12438:	add	r3, r6, r1, lsl #2
   1243c:	ldr	r1, [r3, #4]
   12440:	cmp	r1, #0
   12444:	beq	124a4 <__assert_fail@plt+0x17ec>
   12448:	mov	r2, r4
   1244c:	cmp	r0, #0
   12450:	ldrb	r7, [r2, #2]!
   12454:	cmpeq	r7, #0
   12458:	beq	124a4 <__assert_fail@plt+0x17ec>
   1245c:	ldr	r3, [r1]
   12460:	cmp	r3, #0
   12464:	bne	12508 <__assert_fail@plt+0x1850>
   12468:	cmp	r7, #0
   1246c:	movne	r0, r2
   12470:	str	r0, [r1]
   12474:	ldrb	r0, [r2]
   12478:	cmp	r0, #0
   1247c:	addeq	r9, r9, #1
   12480:	b	12490 <__assert_fail@plt+0x17d8>
   12484:	sxth	r0, r8
   12488:	add	r8, r8, #1
   1248c:	str	r4, [ip, r0, lsl #2]
   12490:	add	r9, r9, #1
   12494:	sxth	r7, r9
   12498:	cmp	r5, r7
   1249c:	bgt	123a0 <__assert_fail@plt+0x16e8>
   124a0:	b	124dc <__assert_fail@plt+0x1824>
   124a4:	ldr	r0, [r3, #8]
   124a8:	cmp	r0, #0
   124ac:	beq	124f0 <__assert_fail@plt+0x1838>
   124b0:	ldrb	r1, [r4, #2]
   124b4:	cmp	r1, #0
   124b8:	bne	124f0 <__assert_fail@plt+0x1838>
   124bc:	ldrb	r1, [r0]
   124c0:	cmp	r1, #0
   124c4:	bne	12508 <__assert_fail@plt+0x1850>
   124c8:	mov	r1, #1
   124cc:	strb	r1, [r0]
   124d0:	ldr	r0, [sp, #4]
   124d4:	ldr	r5, [r0]
   124d8:	b	12490 <__assert_fail@plt+0x17d8>
   124dc:	ldr	r1, [sp, #4]
   124e0:	sxth	r0, r8
   124e4:	str	r0, [r1]
   124e8:	sub	sp, fp, #28
   124ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f0:	movw	r0, #26075	; 0x65db
   124f4:	mov	r1, r4
   124f8:	movt	r0, #1
   124fc:	bl	12598 <error@@Base+0x40>
   12500:	ldr	r0, [sp]
   12504:	bl	12650 <error@@Base+0xf8>
   12508:	movw	r0, #26090	; 0x65ea
   1250c:	mov	r1, r4
   12510:	movt	r0, #1
   12514:	bl	12598 <error@@Base+0x40>
   12518:	push	{fp, lr}
   1251c:	mov	fp, sp
   12520:	mov	r0, #0
   12524:	bl	12528 <__assert_fail@plt+0x1870>
   12528:	push	{fp, lr}
   1252c:	mov	fp, sp
   12530:	mov	r4, r0
   12534:	movw	r0, #46152	; 0xb448
   12538:	movt	r0, #2
   1253c:	ldr	r0, [r0]
   12540:	cmp	r0, #0
   12544:	beq	1254c <__assert_fail@plt+0x1894>
   12548:	blx	r0
   1254c:	bl	126a0 <error@@Base+0x148>
   12550:	mov	r0, r4
   12554:	bl	10c04 <exit@plt>

00012558 <error@@Base>:
   12558:	push	{fp, lr}
   1255c:	mov	fp, sp
   12560:	mov	r3, r0
   12564:	movw	r0, #46148	; 0xb444
   12568:	movw	r1, #26004	; 0x6594
   1256c:	movt	r0, #2
   12570:	movt	r1, #1
   12574:	ldr	r2, [r0]
   12578:	movw	r0, #28864	; 0x70c0
   1257c:	movt	r0, #2
   12580:	ldr	r0, [r0]
   12584:	bl	10c28 <fprintf@plt>
   12588:	movw	r0, #28856	; 0x70b8
   1258c:	movt	r0, #2
   12590:	ldr	r0, [r0]
   12594:	bl	12528 <__assert_fail@plt+0x1870>
   12598:	push	{fp, lr}
   1259c:	mov	fp, sp
   125a0:	sub	sp, sp, #8
   125a4:	mov	r3, r0
   125a8:	movw	r0, #46148	; 0xb444
   125ac:	str	r1, [sp]
   125b0:	movw	r1, #26012	; 0x659c
   125b4:	movt	r0, #2
   125b8:	movt	r1, #1
   125bc:	ldr	r2, [r0]
   125c0:	movw	r0, #28864	; 0x70c0
   125c4:	movt	r0, #2
   125c8:	ldr	r0, [r0]
   125cc:	bl	10c28 <fprintf@plt>
   125d0:	movw	r0, #28856	; 0x70b8
   125d4:	movt	r0, #2
   125d8:	ldr	r0, [r0]
   125dc:	bl	12528 <__assert_fail@plt+0x1870>
   125e0:	push	{fp, lr}
   125e4:	mov	fp, sp
   125e8:	sub	sp, sp, #8
   125ec:	mov	r3, r0
   125f0:	movw	r0, #46148	; 0xb444
   125f4:	str	r1, [sp]
   125f8:	movw	r1, #26012	; 0x659c
   125fc:	movt	r0, #2
   12600:	movt	r1, #1
   12604:	ldr	r2, [r0]
   12608:	movw	r0, #28864	; 0x70c0
   1260c:	movt	r0, #2
   12610:	ldr	r0, [r0]
   12614:	bl	10c28 <fprintf@plt>
   12618:	mov	sp, fp
   1261c:	pop	{fp, pc}
   12620:	movw	r0, #28990	; 0x713e
   12624:	movt	r0, #2
   12628:	ldrb	r1, [r0]
   1262c:	cmp	r1, #1
   12630:	bxeq	lr
   12634:	push	{fp, lr}
   12638:	mov	fp, sp
   1263c:	mov	r1, #1
   12640:	strb	r1, [r0]
   12644:	movw	r0, #26039	; 0x65b7
   12648:	movt	r0, #1
   1264c:	bl	12558 <error@@Base>
   12650:	push	{fp, lr}
   12654:	mov	fp, sp
   12658:	mov	r3, r0
   1265c:	movw	r0, #46144	; 0xb440
   12660:	movt	r0, #2
   12664:	ldr	r0, [r0]
   12668:	cmp	r0, #0
   1266c:	bne	12698 <error@@Base+0x140>
   12670:	movw	r0, #46148	; 0xb444
   12674:	movw	r1, #26060	; 0x65cc
   12678:	movt	r0, #2
   1267c:	movt	r1, #1
   12680:	ldr	r2, [r0]
   12684:	movw	r0, #28864	; 0x70c0
   12688:	movt	r0, #2
   1268c:	ldr	r0, [r0]
   12690:	bl	10c28 <fprintf@plt>
   12694:	bl	12518 <__assert_fail@plt+0x1860>
   12698:	blx	r0
   1269c:	bl	12518 <__assert_fail@plt+0x1860>
   126a0:	push	{r4, r5, r6, sl, fp, lr}
   126a4:	add	fp, sp, #16
   126a8:	movw	r5, #28988	; 0x713c
   126ac:	movt	r5, #2
   126b0:	ldrsh	r0, [r5]
   126b4:	cmp	r0, #1
   126b8:	poplt	{r4, r5, r6, sl, fp, pc}
   126bc:	mov	r6, #1
   126c0:	sxth	r0, r6
   126c4:	bl	12260 <__assert_fail@plt+0x15a8>
   126c8:	mov	r4, r0
   126cc:	bl	10b8c <unlink@plt>
   126d0:	mov	r0, r4
   126d4:	bl	10b44 <free@plt>
   126d8:	add	r0, r6, #1
   126dc:	sxth	r6, r0
   126e0:	ldrsh	r0, [r5]
   126e4:	cmp	r6, r0
   126e8:	ble	126c0 <error@@Base+0x168>
   126ec:	pop	{r4, r5, r6, sl, fp, pc}
   126f0:	push	{r4, r5, r6, sl, fp, lr}
   126f4:	add	fp, sp, #16
   126f8:	mov	r5, r1
   126fc:	mov	r6, r0
   12700:	mov	r0, #1
   12704:	mov	r1, #16
   12708:	mov	r4, r2
   1270c:	bl	120cc <__assert_fail@plt+0x1414>
   12710:	strb	r5, [r0, #8]
   12714:	mov	r1, r0
   12718:	str	r4, [r0, #12]
   1271c:	mov	r0, r6
   12720:	pop	{r4, r5, r6, sl, fp, lr}
   12724:	b	12d84 <error@@Base+0x82c>
   12728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1272c:	add	fp, sp, #28
   12730:	sub	sp, sp, #124	; 0x7c
   12734:	mov	r4, r2
   12738:	mov	r2, r1
   1273c:	cmp	r1, #0
   12740:	str	r0, [sp, #16]
   12744:	bne	12754 <error@@Base+0x1fc>
   12748:	ldrb	r0, [r4]
   1274c:	cmp	r0, #0
   12750:	bne	12a7c <error@@Base+0x524>
   12754:	ldr	r0, [sp, #16]
   12758:	movw	r1, #26309	; 0x66c5
   1275c:	movt	r1, #1
   12760:	ldr	r0, [r0, #4]
   12764:	str	r0, [sp, #4]
   12768:	mov	r0, r2
   1276c:	bl	12168 <__assert_fail@plt+0x14b0>
   12770:	mov	r6, r0
   12774:	ldrb	r0, [r4]
   12778:	cmp	r0, #0
   1277c:	beq	127c4 <error@@Base+0x26c>
   12780:	add	r0, sp, #20
   12784:	mov	r1, #99	; 0x63
   12788:	mov	r2, r6
   1278c:	bl	10b5c <fgets@plt>
   12790:	cmp	r0, #0
   12794:	beq	127b4 <error@@Base+0x25c>
   12798:	movw	r1, #26175	; 0x663f
   1279c:	add	r0, sp, #20
   127a0:	mov	r2, #51	; 0x33
   127a4:	movt	r1, #1
   127a8:	bl	10c94 <strncmp@plt>
   127ac:	cmp	r0, #0
   127b0:	beq	12a0c <error@@Base+0x4b4>
   127b4:	mov	r0, r6
   127b8:	bl	10b80 <rewind@plt>
   127bc:	mov	r5, #0
   127c0:	strb	r5, [r4, #11]
   127c4:	ldr	r9, [r4, #4]
   127c8:	ldrb	r8, [r4, #1]
   127cc:	mov	r0, r6
   127d0:	str	r4, [sp, #8]
   127d4:	cmp	r9, #0
   127d8:	movweq	r9, #94	; 0x5e
   127dc:	bl	10cac <getc@plt>
   127e0:	cmn	r0, #1
   127e4:	beq	128a8 <error@@Base+0x350>
   127e8:	add	r1, sp, #20
   127ec:	mov	sl, #0
   127f0:	sub	r4, fp, #32
   127f4:	add	r1, r1, #1
   127f8:	str	r1, [sp, #12]
   127fc:	movw	r1, #28160	; 0x6e00
   12800:	movt	r1, #2
   12804:	add	r1, r1, r0
   12808:	ldrsb	r5, [r1]
   1280c:	cmp	r5, #0
   12810:	ble	12a5c <error@@Base+0x504>
   12814:	cmp	r5, #1
   12818:	strb	r0, [sp, #20]
   1281c:	beq	12840 <error@@Base+0x2e8>
   12820:	ldr	r0, [sp, #12]
   12824:	sub	r7, r5, #1
   12828:	mov	r1, #1
   1282c:	mov	r3, r6
   12830:	mov	r2, r7
   12834:	bl	10bb0 <fread@plt>
   12838:	cmp	r0, r7
   1283c:	bne	12a70 <error@@Base+0x518>
   12840:	add	r0, sp, #20
   12844:	mov	r1, #4
   12848:	mov	r2, r4
   1284c:	bl	10bbc <utf8proc_iterate@plt>
   12850:	cmp	r0, r5
   12854:	bne	12a68 <error@@Base+0x510>
   12858:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1285c:	cmp	r8, #0
   12860:	beq	12870 <error@@Base+0x318>
   12864:	mov	r7, #1
   12868:	cmp	r5, r9
   1286c:	beq	12894 <error@@Base+0x33c>
   12870:	mov	r0, #1
   12874:	mov	r1, #16
   12878:	bl	120cc <__assert_fail@plt+0x1414>
   1287c:	strb	sl, [r0, #8]
   12880:	mov	r1, r0
   12884:	str	r5, [r0, #12]
   12888:	ldr	r0, [sp, #16]
   1288c:	bl	12d84 <error@@Base+0x82c>
   12890:	mov	r7, #0
   12894:	mov	r0, r6
   12898:	bl	10cac <getc@plt>
   1289c:	cmn	r0, #1
   128a0:	mov	sl, r7
   128a4:	bne	127fc <error@@Base+0x2a4>
   128a8:	mov	r0, r6
   128ac:	bl	121e0 <__assert_fail@plt+0x1528>
   128b0:	ldr	r8, [sp, #8]
   128b4:	ldr	r9, [sp, #4]
   128b8:	ldrb	r0, [r8, #9]
   128bc:	cmp	r0, #0
   128c0:	beq	129cc <error@@Base+0x474>
   128c4:	ldr	r0, [sp, #16]
   128c8:	cmp	r9, #0
   128cc:	addne	r0, r9, #4
   128d0:	ldr	r6, [r0]
   128d4:	cmp	r6, #0
   128d8:	beq	129cc <error@@Base+0x474>
   128dc:	mov	r5, #32
   128e0:	mov	r7, r6
   128e4:	ldr	r4, [r7, #12]
   128e8:	mov	r0, r4
   128ec:	bl	10b50 <utf8proc_get_property@plt>
   128f0:	cmp	r4, #10
   128f4:	ble	12910 <error@@Base+0x3b8>
   128f8:	sub	r1, r4, #11
   128fc:	cmp	r1, #3
   12900:	bcc	12934 <error@@Base+0x3dc>
   12904:	cmp	r4, #160	; 0xa0
   12908:	beq	12934 <error@@Base+0x3dc>
   1290c:	b	12920 <error@@Base+0x3c8>
   12910:	cmp	r4, #9
   12914:	beq	12934 <error@@Base+0x3dc>
   12918:	cmp	r4, #10
   1291c:	beq	12938 <error@@Base+0x3e0>
   12920:	ldrsh	r0, [r0]
   12924:	sub	r0, r0, #23
   12928:	cmp	r0, #2
   1292c:	strls	r5, [r7, #12]
   12930:	b	12938 <error@@Base+0x3e0>
   12934:	str	r5, [r7, #12]
   12938:	ldr	r7, [r7, #4]
   1293c:	cmp	r7, #0
   12940:	bne	128e4 <error@@Base+0x38c>
   12944:	mov	r4, #0
   12948:	ldr	r1, [r6, #12]
   1294c:	ldr	r5, [r6, #4]
   12950:	cmp	r1, #32
   12954:	bne	12990 <error@@Base+0x438>
   12958:	tst	r4, #255	; 0xff
   1295c:	beq	129ac <error@@Base+0x454>
   12960:	cmp	r5, #0
   12964:	ldrne	r1, [r5, #12]
   12968:	cmpne	r1, #10
   1296c:	beq	129ac <error@@Base+0x454>
   12970:	mov	r0, #1
   12974:	cmp	r1, #32
   12978:	bne	129a4 <error@@Base+0x44c>
   1297c:	ldrb	r0, [r6, #8]
   12980:	ldrb	r1, [r5, #8]
   12984:	orr	r0, r1, r0
   12988:	strb	r0, [r5, #8]
   1298c:	b	129ac <error@@Base+0x454>
   12990:	subs	r0, r1, #10
   12994:	movwne	r0, #1
   12998:	tst	r4, #255	; 0xff
   1299c:	cmpeq	r1, #10
   129a0:	beq	129ac <error@@Base+0x454>
   129a4:	mov	r4, r0
   129a8:	b	129c0 <error@@Base+0x468>
   129ac:	ldr	r0, [sp, #16]
   129b0:	mov	r1, r6
   129b4:	bl	12dac <error@@Base+0x854>
   129b8:	mov	r0, r6
   129bc:	bl	10b44 <free@plt>
   129c0:	cmp	r5, #0
   129c4:	mov	r6, r5
   129c8:	bne	12948 <error@@Base+0x3f0>
   129cc:	ldrb	r0, [r8, #10]
   129d0:	cmp	r0, #0
   129d4:	beq	12a04 <error@@Base+0x4ac>
   129d8:	ldr	r0, [sp, #16]
   129dc:	cmp	r9, #0
   129e0:	addne	r0, r9, #4
   129e4:	ldr	r4, [r0]
   129e8:	b	129fc <error@@Base+0x4a4>
   129ec:	ldr	r0, [r4, #12]
   129f0:	bl	10b98 <utf8proc_tolower@plt>
   129f4:	str	r0, [r4, #12]
   129f8:	ldr	r4, [r4, #4]
   129fc:	cmp	r4, #0
   12a00:	bne	129ec <error@@Base+0x494>
   12a04:	sub	sp, fp, #28
   12a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a0c:	movw	r8, #26231	; 0x6677
   12a10:	mov	r7, #0
   12a14:	add	r9, sp, #20
   12a18:	mov	r5, #1
   12a1c:	movt	r8, #1
   12a20:	mov	r0, r9
   12a24:	mov	r1, #99	; 0x63
   12a28:	mov	r2, r6
   12a2c:	bl	10b5c <fgets@plt>
   12a30:	cmp	r0, #0
   12a34:	beq	127c0 <error@@Base+0x268>
   12a38:	mov	r0, r9
   12a3c:	mov	r1, r8
   12a40:	bl	10b20 <strcmp@plt>
   12a44:	cmp	r0, #0
   12a48:	addeq	r7, r7, #1
   12a4c:	sxth	r7, r7
   12a50:	cmp	r7, #2
   12a54:	blt	12a20 <error@@Base+0x4c8>
   12a58:	b	127c0 <error@@Base+0x268>
   12a5c:	movw	r0, #26287	; 0x66af
   12a60:	movt	r0, #1
   12a64:	bl	12558 <error@@Base>
   12a68:	bl	10c7c <utf8proc_errmsg@plt>
   12a6c:	bl	12558 <error@@Base>
   12a70:	movw	r0, #26311	; 0x66c7
   12a74:	movt	r0, #1
   12a78:	bl	12558 <error@@Base>
   12a7c:	movw	r0, #26107	; 0x65fb
   12a80:	movw	r1, #26123	; 0x660b
   12a84:	movt	r0, #1
   12a88:	movt	r1, #1
   12a8c:	bl	12598 <error@@Base+0x40>
   12a90:	push	{fp, lr}
   12a94:	mov	fp, sp
   12a98:	bl	10b68 <utf8proc_encode_char@plt>
   12a9c:	cmp	r0, #0
   12aa0:	sxtbgt	r0, r0
   12aa4:	popgt	{fp, pc}
   12aa8:	movw	r0, #26133	; 0x6615
   12aac:	movt	r0, #1
   12ab0:	bl	12558 <error@@Base>
   12ab4:	push	{r4, r5, r6, r7, fp, lr}
   12ab8:	add	fp, sp, #16
   12abc:	mov	r6, r3
   12ac0:	mov	r4, r2
   12ac4:	mov	r5, r1
   12ac8:	tst	r0, #255	; 0xff
   12acc:	beq	12aec <error@@Base+0x594>
   12ad0:	mov	r0, #94	; 0x5e
   12ad4:	mov	r1, r4
   12ad8:	bl	10b68 <utf8proc_encode_char@plt>
   12adc:	cmp	r0, #0
   12ae0:	ble	12b88 <error@@Base+0x630>
   12ae4:	sxtb	r7, r0
   12ae8:	b	12af0 <error@@Base+0x598>
   12aec:	mov	r7, #0
   12af0:	cmp	r5, #10
   12af4:	bne	12b1c <error@@Base+0x5c4>
   12af8:	movw	r0, #26023	; 0x65a7
   12afc:	movw	r1, #26156	; 0x662c
   12b00:	tst	r6, #255	; 0xff
   12b04:	movt	r0, #1
   12b08:	movt	r1, #1
   12b0c:	moveq	r1, r0
   12b10:	add	r0, r4, r7
   12b14:	pop	{r4, r5, r6, r7, fp, lr}
   12b18:	b	10c64 <sprintf@plt>
   12b1c:	mov	r0, r5
   12b20:	bl	10b50 <utf8proc_get_property@plt>
   12b24:	cmp	r5, #32
   12b28:	beq	12b3c <error@@Base+0x5e4>
   12b2c:	ldrsh	r0, [r0]
   12b30:	sub	r1, r0, #1
   12b34:	cmp	r1, #22
   12b38:	bcs	12b94 <error@@Base+0x63c>
   12b3c:	mov	r0, r5
   12b40:	bl	10c10 <utf8proc_category@plt>
   12b44:	sub	r0, r0, #6
   12b48:	cmp	r0, #2
   12b4c:	bhi	12b68 <error@@Base+0x610>
   12b50:	add	r1, r4, r7
   12b54:	movw	r0, #9676	; 0x25cc
   12b58:	bl	10b68 <utf8proc_encode_char@plt>
   12b5c:	cmp	r0, #0
   12b60:	ble	12b88 <error@@Base+0x630>
   12b64:	sxtab	r7, r7, r0
   12b68:	add	r1, r4, r7
   12b6c:	mov	r0, r5
   12b70:	bl	10b68 <utf8proc_encode_char@plt>
   12b74:	cmp	r0, #0
   12b78:	sxtabgt	r0, r7, r0
   12b7c:	movgt	r1, #0
   12b80:	strbgt	r1, [r4, r0]
   12b84:	popgt	{r4, r5, r6, r7, fp, pc}
   12b88:	movw	r0, #26133	; 0x6615
   12b8c:	movt	r0, #1
   12b90:	bl	12558 <error@@Base>
   12b94:	cmp	r0, #29
   12b98:	beq	12b3c <error@@Base+0x5e4>
   12b9c:	add	r0, r4, r7
   12ba0:	cmp	r5, #255	; 0xff
   12ba4:	bhi	12bb4 <error@@Base+0x65c>
   12ba8:	movw	r1, #26161	; 0x6631
   12bac:	movt	r1, #1
   12bb0:	b	12bbc <error@@Base+0x664>
   12bb4:	movw	r1, #26168	; 0x6638
   12bb8:	movt	r1, #1
   12bbc:	mov	r2, r5
   12bc0:	pop	{r4, r5, r6, r7, fp, lr}
   12bc4:	b	10c64 <sprintf@plt>
   12bc8:	push	{r4, r5, r6, r7, fp, lr}
   12bcc:	add	fp, sp, #16
   12bd0:	sub	sp, sp, #16
   12bd4:	mov	r6, r2
   12bd8:	mov	r2, r1
   12bdc:	movw	r1, #12520	; 0x30e8
   12be0:	mov	r5, r0
   12be4:	movt	r1, #1
   12be8:	mov	r0, r2
   12bec:	bl	12168 <__assert_fail@plt+0x14b0>
   12bf0:	mov	r4, r0
   12bf4:	cmp	r6, #0
   12bf8:	beq	12c34 <error@@Base+0x6dc>
   12bfc:	movw	r0, #26175	; 0x663f
   12c00:	mov	r1, r4
   12c04:	movt	r0, #1
   12c08:	bl	10c88 <fputs@plt>
   12c0c:	movw	r7, #26231	; 0x6677
   12c10:	mov	r1, r4
   12c14:	movt	r7, #1
   12c18:	mov	r0, r7
   12c1c:	bl	10c88 <fputs@plt>
   12c20:	mov	r0, r4
   12c24:	blx	r6
   12c28:	mov	r0, r7
   12c2c:	mov	r1, r4
   12c30:	bl	10c88 <fputs@plt>
   12c34:	ldr	r6, [r5]
   12c38:	cmp	r6, #0
   12c3c:	beq	12c70 <error@@Base+0x718>
   12c40:	add	r5, sp, #7
   12c44:	ldr	r1, [r6, #12]
   12c48:	ldrb	r0, [r6, #8]
   12c4c:	mov	r2, r5
   12c50:	mov	r3, #0
   12c54:	bl	12ab4 <error@@Base+0x55c>
   12c58:	mov	r0, r5
   12c5c:	mov	r1, r4
   12c60:	bl	10c88 <fputs@plt>
   12c64:	ldr	r6, [r6, #4]
   12c68:	cmp	r6, #0
   12c6c:	bne	12c44 <error@@Base+0x6ec>
   12c70:	mov	r0, r4
   12c74:	bl	121e0 <__assert_fail@plt+0x1528>
   12c78:	sub	sp, fp, #16
   12c7c:	pop	{r4, r5, r6, r7, fp, pc}
   12c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c84:	add	fp, sp, #28
   12c88:	sub	sp, sp, #4
   12c8c:	mov	r9, #0
   12c90:	mov	sl, r0
   12c94:	str	r9, [sp]
   12c98:	ldrb	r0, [r1]
   12c9c:	cmp	r0, #0
   12ca0:	beq	12d00 <error@@Base+0x7a8>
   12ca4:	mov	r4, r1
   12ca8:	mov	r8, sp
   12cac:	mov	r7, #1
   12cb0:	mov	r0, r4
   12cb4:	mvn	r1, #0
   12cb8:	mov	r2, r8
   12cbc:	bl	10bbc <utf8proc_iterate@plt>
   12cc0:	cmp	r0, #1
   12cc4:	blt	12d08 <error@@Base+0x7b0>
   12cc8:	ldr	r5, [sp]
   12ccc:	mov	r6, r0
   12cd0:	mov	r0, #1
   12cd4:	mov	r1, #16
   12cd8:	bl	120cc <__assert_fail@plt+0x1414>
   12cdc:	strb	r9, [r0, #8]
   12ce0:	mov	r1, r0
   12ce4:	str	r5, [r0, #12]
   12ce8:	mov	r0, sl
   12cec:	bl	12d84 <error@@Base+0x82c>
   12cf0:	ldrb	r0, [r4, r6]!
   12cf4:	cmp	r0, #0
   12cf8:	bne	12cb0 <error@@Base+0x758>
   12cfc:	b	12d0c <error@@Base+0x7b4>
   12d00:	mov	r7, #1
   12d04:	b	12d0c <error@@Base+0x7b4>
   12d08:	mov	r7, #0
   12d0c:	mov	r0, r7
   12d10:	sub	sp, fp, #28
   12d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d18:	vmov.i32	q8, #0	; 0x00000000
   12d1c:	vst1.32	{d16-d17}, [r0]
   12d20:	bx	lr
   12d24:	ldr	r3, [r0]
   12d28:	mov	r2, r1
   12d2c:	mov	r1, #0
   12d30:	b	12d34 <error@@Base+0x7dc>
   12d34:	push	{r4, sl, fp, lr}
   12d38:	add	fp, sp, #8
   12d3c:	cmp	r1, #0
   12d40:	mov	r4, r0
   12d44:	stm	r2, {r1, r3}
   12d48:	addne	r0, r1, #4
   12d4c:	cmp	r3, #0
   12d50:	addeq	r3, r4, #4
   12d54:	str	r2, [r0]
   12d58:	str	r2, [r3]
   12d5c:	ldr	r0, [r4, #8]
   12d60:	cmp	r0, #0
   12d64:	beq	12d74 <error@@Base+0x81c>
   12d68:	bl	10b44 <free@plt>
   12d6c:	mov	r0, #0
   12d70:	str	r0, [r4, #8]
   12d74:	ldr	r0, [r4, #12]
   12d78:	add	r0, r0, #1
   12d7c:	str	r0, [r4, #12]
   12d80:	pop	{r4, sl, fp, pc}
   12d84:	mov	r2, r1
   12d88:	ldr	r1, [r0, #4]
   12d8c:	mov	r3, #0
   12d90:	b	12d34 <error@@Base+0x7dc>
   12d94:	mov	r3, r2
   12d98:	mov	r2, r1
   12d9c:	ldr	r1, [r3]
   12da0:	b	12d34 <error@@Base+0x7dc>
   12da4:	ldr	r3, [r1, #4]
   12da8:	b	12d34 <error@@Base+0x7dc>
   12dac:	push	{r4, r5, fp, lr}
   12db0:	add	fp, sp, #8
   12db4:	mov	r4, r0
   12db8:	ldm	r1, {r0, r2}
   12dbc:	mov	r5, #0
   12dc0:	cmp	r0, #0
   12dc4:	streq	r2, [r4]
   12dc8:	strne	r2, [r0, #4]
   12dcc:	ldrne	r2, [r1, #4]
   12dd0:	cmp	r2, #0
   12dd4:	addeq	r2, r4, #4
   12dd8:	str	r0, [r2]
   12ddc:	str	r5, [r1]
   12de0:	str	r5, [r1, #4]
   12de4:	ldr	r0, [r4, #8]
   12de8:	cmp	r0, #0
   12dec:	beq	12df8 <error@@Base+0x8a0>
   12df0:	bl	10b44 <free@plt>
   12df4:	str	r5, [r4, #8]
   12df8:	ldr	r0, [r4, #12]
   12dfc:	sub	r0, r0, #1
   12e00:	str	r0, [r4, #12]
   12e04:	pop	{r4, r5, fp, pc}
   12e08:	push	{r4, sl, fp, lr}
   12e0c:	add	fp, sp, #8
   12e10:	mov	r4, r0
   12e14:	ldr	r0, [r0, #8]
   12e18:	cmp	r0, #0
   12e1c:	beq	12e24 <error@@Base+0x8cc>
   12e20:	pop	{r4, sl, fp, pc}
   12e24:	ldr	r0, [r4, #12]
   12e28:	cmp	r0, #0
   12e2c:	beq	12e20 <error@@Base+0x8c8>
   12e30:	mov	r1, #4
   12e34:	bl	120cc <__assert_fail@plt+0x1414>
   12e38:	str	r0, [r4, #8]
   12e3c:	ldr	r1, [r4]
   12e40:	cmp	r1, #0
   12e44:	beq	12e20 <error@@Base+0x8c8>
   12e48:	str	r1, [r0]
   12e4c:	ldr	r0, [r1, #4]
   12e50:	cmp	r0, #0
   12e54:	popeq	{r4, sl, fp, pc}
   12e58:	mov	r1, #4
   12e5c:	ldr	r2, [r4, #8]
   12e60:	str	r0, [r2, r1]
   12e64:	add	r1, r1, #4
   12e68:	ldr	r0, [r0, #4]
   12e6c:	cmp	r0, #0
   12e70:	bne	12e5c <error@@Base+0x904>
   12e74:	b	12e20 <error@@Base+0x8c8>
   12e78:	push	{r4, r5, r6, sl, fp, lr}
   12e7c:	add	fp, sp, #16
   12e80:	ldr	r6, [r0]
   12e84:	cmp	r6, #0
   12e88:	popeq	{r4, r5, r6, sl, fp, pc}
   12e8c:	mov	r4, r1
   12e90:	mov	r5, r0
   12e94:	mov	r0, r5
   12e98:	mov	r1, r6
   12e9c:	bl	12dac <error@@Base+0x854>
   12ea0:	mov	r0, r6
   12ea4:	blx	r4
   12ea8:	ldr	r6, [r5]
   12eac:	cmp	r6, #0
   12eb0:	bne	12e94 <error@@Base+0x93c>
   12eb4:	pop	{r4, r5, r6, sl, fp, pc}
   12eb8:	cmp	r0, #2
   12ebc:	bxlt	lr
   12ec0:	movw	r3, #28996	; 0x7144
   12ec4:	movt	r3, #2
   12ec8:	str	r2, [r3]
   12ecc:	movw	r2, #28992	; 0x7140
   12ed0:	movt	r2, #2
   12ed4:	str	r1, [r2]
   12ed8:	sub	r1, r0, #1
   12edc:	mov	r0, #0
   12ee0:	b	12ee4 <error@@Base+0x98c>
   12ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee8:	add	fp, sp, #28
   12eec:	sub	sp, sp, #4
   12ef0:	movw	r7, #28992	; 0x7140
   12ef4:	movw	sl, #28996	; 0x7144
   12ef8:	mov	r8, r1
   12efc:	mov	r9, r0
   12f00:	movt	r7, #2
   12f04:	movt	sl, #2
   12f08:	ldr	r0, [r7]
   12f0c:	cmp	r9, r8
   12f10:	mov	r4, r8
   12f14:	mov	r5, r9
   12f18:	ldr	r6, [r0, r9, lsl #2]
   12f1c:	bge	12fb0 <error@@Base+0xa58>
   12f20:	mov	r5, r9
   12f24:	mov	r4, r8
   12f28:	cmp	r5, r4
   12f2c:	bge	12f54 <error@@Base+0x9fc>
   12f30:	ldr	r0, [r7]
   12f34:	ldr	r2, [sl]
   12f38:	ldr	r1, [r0, r4, lsl #2]
   12f3c:	mov	r0, r6
   12f40:	blx	r2
   12f44:	cmn	r0, #1
   12f48:	bgt	12f54 <error@@Base+0x9fc>
   12f4c:	sub	r4, r4, #1
   12f50:	b	12f28 <error@@Base+0x9d0>
   12f54:	cmp	r5, r4
   12f58:	beq	12f6c <error@@Base+0xa14>
   12f5c:	ldr	r0, [r7]
   12f60:	ldr	r1, [r0, r4, lsl #2]
   12f64:	str	r1, [r0, r5, lsl #2]
   12f68:	add	r5, r5, #1
   12f6c:	cmp	r5, r4
   12f70:	bge	12f90 <error@@Base+0xa38>
   12f74:	ldr	r0, [r7]
   12f78:	ldr	r2, [sl]
   12f7c:	ldr	r1, [r0, r5, lsl #2]
   12f80:	mov	r0, r6
   12f84:	blx	r2
   12f88:	cmp	r0, #1
   12f8c:	bge	12f68 <error@@Base+0xa10>
   12f90:	cmp	r5, r4
   12f94:	ldrne	r0, [r7]
   12f98:	ldrne	r1, [r0, r5, lsl #2]
   12f9c:	strne	r1, [r0, r4, lsl #2]
   12fa0:	subne	r4, r4, #1
   12fa4:	cmp	r5, r4
   12fa8:	blt	12f28 <error@@Base+0x9d0>
   12fac:	ldr	r0, [r7]
   12fb0:	sub	r1, r4, #1
   12fb4:	str	r6, [r0, r4, lsl #2]
   12fb8:	cmp	r1, r9
   12fbc:	movgt	r0, r9
   12fc0:	blgt	12ee4 <error@@Base+0x98c>
   12fc4:	add	r9, r5, #1
   12fc8:	cmp	r9, r8
   12fcc:	subge	sp, fp, #28
   12fd0:	popge	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd4:	b	12f08 <error@@Base+0x9b0>
   12fd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fdc:	mov	r7, r0
   12fe0:	ldr	r6, [pc, #72]	; 13030 <error@@Base+0xad8>
   12fe4:	ldr	r5, [pc, #72]	; 13034 <error@@Base+0xadc>
   12fe8:	add	r6, pc, r6
   12fec:	add	r5, pc, r5
   12ff0:	sub	r6, r6, r5
   12ff4:	mov	r8, r1
   12ff8:	mov	r9, r2
   12ffc:	bl	10af4 <calloc@plt-0x20>
   13000:	asrs	r6, r6, #2
   13004:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13008:	mov	r4, #0
   1300c:	add	r4, r4, #1
   13010:	ldr	r3, [r5], #4
   13014:	mov	r2, r9
   13018:	mov	r1, r8
   1301c:	mov	r0, r7
   13020:	blx	r3
   13024:	cmp	r6, r4
   13028:	bne	1300c <error@@Base+0xab4>
   1302c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13030:	andeq	r3, r1, ip, lsl #28
   13034:	andeq	r3, r1, r4, lsl #28
   13038:	bx	lr
   1303c:	mov	r2, r1
   13040:	mov	r1, r0
   13044:	mov	r0, #3
   13048:	b	10ba4 <__xstat@plt>

Disassembly of section .fini:

0001304c <.fini>:
   1304c:	push	{r3, lr}
   13050:	pop	{r3, pc}
