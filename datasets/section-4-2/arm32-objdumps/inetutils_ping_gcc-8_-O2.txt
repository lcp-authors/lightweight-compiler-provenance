
../repos/inetutils/ping/ping:     file format elf32-littlearm


Disassembly of section .init:

000110bc <.init>:
   110bc:	push	{r3, lr}
   110c0:	bl	11754 <__assert_fail@plt+0x318>
   110c4:	pop	{r3, pc}

Disassembly of section .plt:

000110c8 <calloc@plt-0x14>:
   110c8:	push	{lr}		; (str lr, [sp, #-4]!)
   110cc:	ldr	lr, [pc, #4]	; 110d8 <calloc@plt-0x4>
   110d0:	add	lr, pc, lr
   110d4:	ldr	pc, [lr, #8]!
   110d8:	andeq	fp, r1, r8, lsr #30

000110dc <calloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #110592	; 0x1b000
   110e4:	ldr	pc, [ip, #3880]!	; 0xf28

000110e8 <fputs_unlocked@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #110592	; 0x1b000
   110f0:	ldr	pc, [ip, #3872]!	; 0xf20

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #110592	; 0x1b000
   110fc:	ldr	pc, [ip, #3864]!	; 0xf18

00011100 <strtol@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #3856]!	; 0xf10

0001110c <setsockopt@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #3848]!	; 0xf08

00011118 <printf@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #3840]!	; 0xf00

00011124 <getprotobyname@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #3832]!	; 0xef8

00011130 <fflush@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #3824]!	; 0xef0

0001113c <getuid@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #3816]!	; 0xee8

00011148 <memmove@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #110592	; 0x1b000
   11150:	ldr	pc, [ip, #3808]!	; 0xee0

00011154 <strchrnul@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #110592	; 0x1b000
   1115c:	ldr	pc, [ip, #3800]!	; 0xed8

00011160 <free@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #110592	; 0x1b000
   11168:	ldr	pc, [ip, #3792]!	; 0xed0

0001116c <gai_strerror@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #110592	; 0x1b000
   11174:	ldr	pc, [ip, #3784]!	; 0xec8

00011178 <strndup@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #110592	; 0x1b000
   11180:	ldr	pc, [ip, #3776]!	; 0xec0

00011184 <memcpy@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #110592	; 0x1b000
   1118c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011190 <signal@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #110592	; 0x1b000
   11198:	ldr	pc, [ip, #3760]!	; 0xeb0

0001119c <fwrite_unlocked@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3752]!	; 0xea8

000111a8 <memcmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3744]!	; 0xea0

000111b4 <inet_ntoa@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3736]!	; 0xe98

000111c0 <select@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3728]!	; 0xe90

000111cc <sleep@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3720]!	; 0xe88

000111d8 <gethostbyaddr@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3712]!	; 0xe80

000111e4 <recvfrom@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3704]!	; 0xe78

000111f0 <strdup@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3696]!	; 0xe70

000111fc <realloc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3688]!	; 0xe68

00011208 <strcasecmp@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3680]!	; 0xe60

00011214 <funlockfile@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3672]!	; 0xe58

00011220 <fwrite@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3664]!	; 0xe50

0001122c <gettimeofday@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3656]!	; 0xe48

00011238 <error@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3648]!	; 0xe40

00011244 <getenv@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3640]!	; 0xe38

00011250 <puts@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3632]!	; 0xe30

0001125c <malloc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3624]!	; 0xe28

00011268 <__libc_start_main@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3616]!	; 0xe20

00011274 <strerror@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3608]!	; 0xe18

00011280 <__ctype_tolower_loc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3600]!	; 0xe10

0001128c <__gmon_start__@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3592]!	; 0xe08

00011298 <mempcpy@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3584]!	; 0xe00

000112a4 <__ctype_b_loc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b0 <getpid@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112bc <exit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3560]!	; 0xde8

000112c8 <strtoul@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3552]!	; 0xde0

000112d4 <strlen@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e0 <strchr@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112ec <fprintf@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f8 <__errno_location@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3520]!	; 0xdc0

00011304 <snprintf@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011310 <strerror_r@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3504]!	; 0xdb0

0001131c <setvbuf@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3496]!	; 0xda8

00011328 <memset@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3488]!	; 0xda0

00011334 <putchar@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3480]!	; 0xd98

00011340 <strtod@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3472]!	; 0xd90

0001134c <memchr@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3464]!	; 0xd88

00011358 <sendto@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3456]!	; 0xd80

00011364 <__overflow@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3448]!	; 0xd78

00011370 <setlocale@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3440]!	; 0xd70

0001137c <getnameinfo@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3432]!	; 0xd68

00011388 <strrchr@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3424]!	; 0xd60

00011394 <vfprintf@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3416]!	; 0xd58

000113a0 <fputc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3408]!	; 0xd50

000113ac <setuid@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3400]!	; 0xd48

000113b8 <sscanf@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3392]!	; 0xd40

000113c4 <putc@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3384]!	; 0xd38

000113d0 <flockfile@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3376]!	; 0xd30

000113dc <vsnprintf@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3368]!	; 0xd28

000113e8 <qsort@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3360]!	; 0xd20

000113f4 <freeaddrinfo@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3352]!	; 0xd18

00011400 <getaddrinfo@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3344]!	; 0xd10

0001140c <socket@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3336]!	; 0xd08

00011418 <strncmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3328]!	; 0xd00

00011424 <abort@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011430 <close@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3312]!	; 0xcf0

0001143c <__assert_fail@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3304]!	; 0xce8

Disassembly of section .text:

00011448 <argp_failure@@Base-0x50f4>:
   11448:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1144c:	mov	r4, #1
   11450:	mov	r5, r0
   11454:	ldr	r0, [r1]
   11458:	strd	r6, [sp, #8]
   1145c:	mov	r6, r1
   11460:	str	r8, [sp, #16]
   11464:	str	lr, [sp, #20]
   11468:	sub	sp, sp, #16
   1146c:	str	r4, [sp, #12]
   11470:	bl	19264 <argp_parse@@Base+0x1110>
   11474:	movw	r1, #52256	; 0xcc20
   11478:	movt	r1, #1
   1147c:	mov	r0, #6
   11480:	bl	11370 <setlocale@plt>
   11484:	bl	1113c <getuid@plt>
   11488:	cmp	r0, #0
   1148c:	bne	1149c <__assert_fail@plt+0x60>
   11490:	movw	r3, #54836	; 0xd634
   11494:	movt	r3, #2
   11498:	strb	r4, [r3, #4]
   1149c:	movw	r3, #55004	; 0xd6dc
   114a0:	movt	r3, #2
   114a4:	ldr	r1, [pc, #608]	; 1170c <__assert_fail@plt+0x2d0>
   114a8:	movw	r2, #45780	; 0xb2d4
   114ac:	movt	r2, #1
   114b0:	movw	r0, #45804	; 0xb2ec
   114b4:	movt	r0, #1
   114b8:	str	r2, [r3]
   114bc:	movw	r7, #54992	; 0xd6d0
   114c0:	movt	r7, #2
   114c4:	bl	1905c <argp_parse@@Base+0xf08>
   114c8:	mov	r1, #0
   114cc:	add	r2, sp, #8
   114d0:	ldr	r0, [pc, #568]	; 11710 <__assert_fail@plt+0x2d4>
   114d4:	mov	r3, r1
   114d8:	str	r2, [sp]
   114dc:	mov	r2, r6
   114e0:	str	r1, [sp, #4]
   114e4:	mov	r1, r5
   114e8:	bl	18154 <argp_parse@@Base>
   114ec:	bl	112b0 <getpid@plt>
   114f0:	mov	r1, r0
   114f4:	mov	r0, #8
   114f8:	bl	13cbc <__assert_fail@plt+0x2880>
   114fc:	cmp	r0, #0
   11500:	str	r0, [r7]
   11504:	beq	11704 <__assert_fail@plt+0x2c8>
   11508:	mov	r3, #4
   1150c:	add	r2, sp, #12
   11510:	mov	r1, #6
   11514:	bl	1273c <__assert_fail@plt+0x1300>
   11518:	bl	1113c <getuid@plt>
   1151c:	bl	113ac <setuid@plt>
   11520:	cmp	r0, #0
   11524:	bne	116e8 <__assert_fail@plt+0x2ac>
   11528:	mov	r3, #0
   1152c:	movw	r1, #54828	; 0xd62c
   11530:	movt	r1, #2
   11534:	mov	r2, #1
   11538:	movw	r4, #54836	; 0xd634
   1153c:	movt	r4, #2
   11540:	ldr	r0, [r1]
   11544:	mov	r1, r3
   11548:	bl	1131c <setvbuf@plt>
   1154c:	ldr	r1, [r4, #8]
   11550:	ldr	r3, [sp, #8]
   11554:	cmp	r1, #0
   11558:	add	r6, r6, r3, lsl #2
   1155c:	sub	r5, r5, r3
   11560:	bne	116dc <__assert_fail@plt+0x2a0>
   11564:	movw	r3, #54988	; 0xd6cc
   11568:	movt	r3, #2
   1156c:	ldr	r1, [r3]
   11570:	cmp	r1, #0
   11574:	bne	116c8 <__assert_fail@plt+0x28c>
   11578:	movw	r3, #54984	; 0xd6c8
   1157c:	movt	r3, #2
   11580:	ldr	r3, [r3]
   11584:	tst	r3, #2
   11588:	bne	116b0 <__assert_fail@plt+0x274>
   1158c:	ldr	r3, [r4, #12]
   11590:	cmp	r3, #0
   11594:	bgt	11628 <__assert_fail@plt+0x1ec>
   11598:	movw	r8, #53564	; 0xd13c
   1159c:	movt	r8, #2
   115a0:	ldr	r3, [r8, #40]	; 0x28
   115a4:	cmp	r3, #0
   115a8:	bge	1166c <__assert_fail@plt+0x230>
   115ac:	movw	r3, #54976	; 0xd6c0
   115b0:	movt	r3, #2
   115b4:	ldr	r1, [r8, #44]	; 0x2c
   115b8:	sub	r4, r5, #1
   115bc:	ldr	r0, [r3]
   115c0:	bl	1237c <__assert_fail@plt+0xf40>
   115c4:	cmp	r5, #0
   115c8:	beq	115f4 <__assert_fail@plt+0x1b8>
   115cc:	mov	r5, #0
   115d0:	ldr	r0, [r6], #4
   115d4:	sub	r4, r4, #1
   115d8:	ldr	r3, [r8, #48]	; 0x30
   115dc:	blx	r3
   115e0:	orr	r5, r5, r0
   115e4:	ldr	r0, [r7]
   115e8:	bl	13e68 <__assert_fail@plt+0x2a2c>
   115ec:	cmn	r4, #1
   115f0:	bne	115d0 <__assert_fail@plt+0x194>
   115f4:	ldr	r0, [r7]
   115f8:	bl	19138 <argp_parse@@Base+0xfe4>
   115fc:	movw	r3, #54980	; 0xd6c4
   11600:	movt	r3, #2
   11604:	ldr	r0, [r3]
   11608:	bl	19138 <argp_parse@@Base+0xfe4>
   1160c:	mov	r0, r5
   11610:	add	sp, sp, #16
   11614:	ldrd	r4, [sp]
   11618:	ldrd	r6, [sp, #8]
   1161c:	ldr	r8, [sp, #16]
   11620:	add	sp, sp, #20
   11624:	pop	{pc}		; (ldr pc, [sp], #4)
   11628:	ldr	r0, [r7]
   1162c:	mov	r3, #4
   11630:	mov	r2, #2
   11634:	mov	r1, #0
   11638:	str	r3, [sp]
   1163c:	ldr	r3, [pc, #208]	; 11714 <__assert_fail@plt+0x2d8>
   11640:	ldr	r0, [r0]
   11644:	bl	1110c <setsockopt@plt>
   11648:	cmp	r0, #0
   1164c:	bge	11598 <__assert_fail@plt+0x15c>
   11650:	bl	112f8 <__errno_location@plt>
   11654:	movw	r2, #45820	; 0xb2fc
   11658:	movt	r2, #1
   1165c:	ldr	r1, [r0]
   11660:	mov	r0, #0
   11664:	bl	11238 <error@plt>
   11668:	b	11598 <__assert_fail@plt+0x15c>
   1166c:	ldr	r0, [r7]
   11670:	mov	ip, #4
   11674:	add	r3, r8, #40	; 0x28
   11678:	mov	r2, #1
   1167c:	mov	r1, #0
   11680:	str	ip, [sp]
   11684:	ldr	r0, [r0]
   11688:	bl	1110c <setsockopt@plt>
   1168c:	cmp	r0, #0
   11690:	bge	115ac <__assert_fail@plt+0x170>
   11694:	bl	112f8 <__errno_location@plt>
   11698:	movw	r2, #45840	; 0xb310
   1169c:	movt	r2, #1
   116a0:	ldr	r1, [r0]
   116a4:	mov	r0, #0
   116a8:	bl	11238 <error@plt>
   116ac:	b	115ac <__assert_fail@plt+0x170>
   116b0:	movw	r3, #55000	; 0xd6d8
   116b4:	movt	r3, #2
   116b8:	ldr	r0, [r7]
   116bc:	ldr	r1, [r3]
   116c0:	bl	12768 <__assert_fail@plt+0x132c>
   116c4:	b	1158c <__assert_fail@plt+0x150>
   116c8:	add	r2, sp, #12
   116cc:	mov	r3, #4
   116d0:	ldr	r0, [r7]
   116d4:	bl	1273c <__assert_fail@plt+0x1300>
   116d8:	b	11578 <__assert_fail@plt+0x13c>
   116dc:	ldr	r0, [r7]
   116e0:	bl	12734 <__assert_fail@plt+0x12f8>
   116e4:	b	11564 <__assert_fail@plt+0x128>
   116e8:	bl	112f8 <__errno_location@plt>
   116ec:	movw	r2, #45812	; 0xb2f4
   116f0:	movt	r2, #1
   116f4:	ldr	r1, [r0]
   116f8:	mov	r0, #1
   116fc:	bl	11238 <error@plt>
   11700:	b	11528 <__assert_fail@plt+0xec>
   11704:	mov	r0, #1
   11708:	bl	112bc <exit@plt>
   1170c:	andeq	sp, r2, r0, asr #2
   11710:	andeq	sp, r2, r8, asr #2
   11714:	andeq	sp, r2, r0, asr #12
   11718:	mov	fp, #0
   1171c:	mov	lr, #0
   11720:	pop	{r1}		; (ldr r1, [sp], #4)
   11724:	mov	r2, sp
   11728:	push	{r2}		; (str r2, [sp, #-4]!)
   1172c:	push	{r0}		; (str r0, [sp, #-4]!)
   11730:	ldr	ip, [pc, #16]	; 11748 <__assert_fail@plt+0x30c>
   11734:	push	{ip}		; (str ip, [sp, #-4]!)
   11738:	ldr	r0, [pc, #12]	; 1174c <__assert_fail@plt+0x310>
   1173c:	ldr	r3, [pc, #12]	; 11750 <__assert_fail@plt+0x314>
   11740:	bl	11268 <__libc_start_main@plt>
   11744:	bl	11424 <abort@plt>
   11748:	andeq	fp, r1, r4, lsr r2
   1174c:	andeq	r1, r1, r8, asr #8
   11750:	ldrdeq	fp, [r1], -r4
   11754:	ldr	r3, [pc, #20]	; 11770 <__assert_fail@plt+0x334>
   11758:	ldr	r2, [pc, #20]	; 11774 <__assert_fail@plt+0x338>
   1175c:	add	r3, pc, r3
   11760:	ldr	r2, [r3, r2]
   11764:	cmp	r2, #0
   11768:	bxeq	lr
   1176c:	b	1128c <__gmon_start__@plt>
   11770:	muleq	r1, ip, r8
   11774:	andeq	r0, r0, r0, lsr r1
   11778:	ldr	r0, [pc, #24]	; 11798 <__assert_fail@plt+0x35c>
   1177c:	ldr	r3, [pc, #24]	; 1179c <__assert_fail@plt+0x360>
   11780:	cmp	r3, r0
   11784:	bxeq	lr
   11788:	ldr	r3, [pc, #16]	; 117a0 <__assert_fail@plt+0x364>
   1178c:	cmp	r3, #0
   11790:	bxeq	lr
   11794:	bx	r3
   11798:	andeq	sp, r2, ip, lsl r6
   1179c:	andeq	sp, r2, ip, lsl r6
   117a0:	andeq	r0, r0, r0
   117a4:	ldr	r0, [pc, #36]	; 117d0 <__assert_fail@plt+0x394>
   117a8:	ldr	r1, [pc, #36]	; 117d4 <__assert_fail@plt+0x398>
   117ac:	sub	r1, r1, r0
   117b0:	asr	r1, r1, #2
   117b4:	add	r1, r1, r1, lsr #31
   117b8:	asrs	r1, r1, #1
   117bc:	bxeq	lr
   117c0:	ldr	r3, [pc, #16]	; 117d8 <__assert_fail@plt+0x39c>
   117c4:	cmp	r3, #0
   117c8:	bxeq	lr
   117cc:	bx	r3
   117d0:	andeq	sp, r2, ip, lsl r6
   117d4:	andeq	sp, r2, ip, lsl r6
   117d8:	andeq	r0, r0, r0
   117dc:	push	{r4, lr}
   117e0:	ldr	r4, [pc, #24]	; 11800 <__assert_fail@plt+0x3c4>
   117e4:	ldrb	r3, [r4]
   117e8:	cmp	r3, #0
   117ec:	popne	{r4, pc}
   117f0:	bl	11778 <__assert_fail@plt+0x33c>
   117f4:	mov	r3, #1
   117f8:	strb	r3, [r4]
   117fc:	pop	{r4, pc}
   11800:	andeq	sp, r2, r0, lsr r6
   11804:	b	117a4 <__assert_fail@plt+0x368>
   11808:	movw	r3, #54836	; 0xd634
   1180c:	movt	r3, #2
   11810:	mov	r2, #1
   11814:	str	r2, [r3]
   11818:	bx	lr
   1181c:	strd	r4, [sp, #-12]!
   11820:	movw	r4, #53564	; 0xd13c
   11824:	movt	r4, #2
   11828:	ldr	r3, [r4]
   1182c:	mov	r5, r0
   11830:	str	lr, [sp, #8]
   11834:	sub	sp, sp, #20
   11838:	cmp	r3, #7
   1183c:	movls	r2, #0
   11840:	bhi	11898 <__assert_fail@plt+0x45c>
   11844:	movw	r3, #54980	; 0xd6c4
   11848:	movt	r3, #2
   1184c:	ldr	r1, [r3]
   11850:	cmp	r1, #0
   11854:	beq	11874 <__assert_fail@plt+0x438>
   11858:	ldr	r3, [r4]
   1185c:	mov	r0, #0
   11860:	str	r0, [sp]
   11864:	mov	r0, r5
   11868:	cmp	r3, r2
   1186c:	subhi	r3, r3, r2
   11870:	bl	126bc <__assert_fail@plt+0x1280>
   11874:	mov	r0, r5
   11878:	bl	13e84 <__assert_fail@plt+0x2a48>
   1187c:	subs	r4, r0, #0
   11880:	blt	118c8 <__assert_fail@plt+0x48c>
   11884:	mov	r0, r4
   11888:	add	sp, sp, #20
   1188c:	ldrd	r4, [sp]
   11890:	add	sp, sp, #8
   11894:	pop	{pc}		; (ldr pc, [sp], #4)
   11898:	mov	r1, #0
   1189c:	add	r0, sp, #8
   118a0:	bl	1122c <gettimeofday@plt>
   118a4:	mov	r0, #0
   118a8:	add	r1, sp, #8
   118ac:	mov	r2, r0
   118b0:	mov	r3, #8
   118b4:	str	r0, [sp]
   118b8:	mov	r0, r5
   118bc:	bl	126bc <__assert_fail@plt+0x1280>
   118c0:	mov	r2, #8
   118c4:	b	11844 <__assert_fail@plt+0x408>
   118c8:	bl	112f8 <__errno_location@plt>
   118cc:	movw	r2, #45764	; 0xb2c4
   118d0:	movt	r2, #1
   118d4:	ldr	r1, [r0]
   118d8:	mov	r0, #1
   118dc:	bl	11238 <error@plt>
   118e0:	b	11884 <__assert_fail@plt+0x448>
   118e4:	movw	r1, #45860	; 0xb324
   118e8:	movt	r1, #1
   118ec:	str	r4, [sp, #-8]!
   118f0:	mov	r4, r0
   118f4:	str	lr, [sp, #4]
   118f8:	bl	11208 <strcasecmp@plt>
   118fc:	cmp	r0, #0
   11900:	movweq	r0, #11940	; 0x2ea4
   11904:	movteq	r0, #1
   11908:	beq	1192c <__assert_fail@plt+0x4f0>
   1190c:	movw	r1, #45868	; 0xb32c
   11910:	movt	r1, #1
   11914:	mov	r0, r4
   11918:	bl	11208 <strcasecmp@plt>
   1191c:	cmp	r0, #0
   11920:	movweq	r0, #15368	; 0x3c08
   11924:	movteq	r0, #1
   11928:	bne	11938 <__assert_fail@plt+0x4fc>
   1192c:	ldr	r4, [sp]
   11930:	add	sp, sp, #4
   11934:	pop	{pc}		; (ldr pc, [sp], #4)
   11938:	movw	r1, #45880	; 0xb338
   1193c:	movt	r1, #1
   11940:	mov	r0, r4
   11944:	bl	11208 <strcasecmp@plt>
   11948:	cmp	r0, #0
   1194c:	bne	11964 <__assert_fail@plt+0x528>
   11950:	ldr	r4, [sp]
   11954:	add	sp, sp, #4
   11958:	movw	r0, #14808	; 0x39d8
   1195c:	movt	r0, #1
   11960:	pop	{pc}		; (ldr pc, [sp], #4)
   11964:	movw	r1, #45888	; 0xb340
   11968:	movt	r1, #1
   1196c:	mov	r0, r4
   11970:	bl	11208 <strcasecmp@plt>
   11974:	cmp	r0, #0
   11978:	beq	11950 <__assert_fail@plt+0x514>
   1197c:	mov	r0, #1
   11980:	mov	r3, r4
   11984:	movw	r2, #45896	; 0xb348
   11988:	movt	r2, #1
   1198c:	mov	r1, #0
   11990:	bl	11238 <error@plt>
   11994:	mov	r0, #0
   11998:	b	1192c <__assert_fail@plt+0x4f0>
   1199c:	cmp	r0, #114	; 0x72
   119a0:	beq	11d84 <__assert_fail@plt+0x948>
   119a4:	strd	r4, [sp, #-12]!
   119a8:	mov	r4, r1
   119ac:	str	lr, [sp, #8]
   119b0:	vpush	{d8}
   119b4:	sub	sp, sp, #20
   119b8:	ble	11a7c <__assert_fail@plt+0x640>
   119bc:	movw	r3, #257	; 0x101
   119c0:	cmp	r0, r3
   119c4:	beq	11d78 <__assert_fail@plt+0x93c>
   119c8:	ble	11a58 <__assert_fail@plt+0x61c>
   119cc:	cmp	r0, #260	; 0x104
   119d0:	beq	11d54 <__assert_fail@plt+0x918>
   119d4:	bgt	11a24 <__assert_fail@plt+0x5e8>
   119d8:	movw	r3, #258	; 0x102
   119dc:	cmp	r0, r3
   119e0:	beq	11d48 <__assert_fail@plt+0x90c>
   119e4:	movw	r3, #259	; 0x103
   119e8:	cmp	r0, r3
   119ec:	movweq	r0, #46012	; 0xb3bc
   119f0:	movteq	r0, #1
   119f4:	bne	11a50 <__assert_fail@plt+0x614>
   119f8:	bl	118e4 <__assert_fail@plt+0x4a8>
   119fc:	movw	r2, #53564	; 0xd13c
   11a00:	movt	r2, #2
   11a04:	mov	r3, #0
   11a08:	str	r0, [r2, #48]	; 0x30
   11a0c:	mov	r0, r3
   11a10:	add	sp, sp, #20
   11a14:	vpop	{d8}
   11a18:	ldrd	r4, [sp]
   11a1c:	add	sp, sp, #8
   11a20:	pop	{pc}		; (ldr pc, [sp], #4)
   11a24:	movw	r3, #261	; 0x105
   11a28:	cmp	r0, r3
   11a2c:	beq	11cc4 <__assert_fail@plt+0x888>
   11a30:	mov	r3, #2
   11a34:	movt	r3, #256	; 0x100
   11a38:	cmp	r0, r3
   11a3c:	bne	11a50 <__assert_fail@plt+0x614>
   11a40:	movw	r1, #46068	; 0xb3f4
   11a44:	movt	r1, #1
   11a48:	mov	r0, r2
   11a4c:	bl	17a3c <argp_error@@Base>
   11a50:	mov	r3, #7
   11a54:	b	11a0c <__assert_fail@plt+0x5d0>
   11a58:	cmp	r0, #118	; 0x76
   11a5c:	beq	11ca8 <__assert_fail@plt+0x86c>
   11a60:	bgt	11ae0 <__assert_fail@plt+0x6a4>
   11a64:	cmp	r0, #115	; 0x73
   11a68:	beq	11c84 <__assert_fail@plt+0x848>
   11a6c:	cmp	r0, #116	; 0x74
   11a70:	moveq	r0, r1
   11a74:	beq	119f8 <__assert_fail@plt+0x5bc>
   11a78:	b	11a50 <__assert_fail@plt+0x614>
   11a7c:	cmp	r0, #102	; 0x66
   11a80:	beq	11c68 <__assert_fail@plt+0x82c>
   11a84:	ble	11b28 <__assert_fail@plt+0x6ec>
   11a88:	cmp	r0, #110	; 0x6e
   11a8c:	beq	11c4c <__assert_fail@plt+0x810>
   11a90:	bgt	11afc <__assert_fail@plt+0x6c0>
   11a94:	cmp	r0, #105	; 0x69
   11a98:	beq	11bb0 <__assert_fail@plt+0x774>
   11a9c:	cmp	r0, #108	; 0x6c
   11aa0:	bne	11a50 <__assert_fail@plt+0x614>
   11aa4:	mov	r2, #0
   11aa8:	add	r1, sp, #12
   11aac:	mov	r0, r4
   11ab0:	bl	112c8 <strtoul@plt>
   11ab4:	ldr	r2, [sp, #12]
   11ab8:	movw	r3, #54836	; 0xd634
   11abc:	movt	r3, #2
   11ac0:	str	r0, [r3, #32]
   11ac4:	ldrb	r3, [r2]
   11ac8:	cmp	r3, #0
   11acc:	bne	11b94 <__assert_fail@plt+0x758>
   11ad0:	cmp	r0, #0
   11ad4:	blt	11b94 <__assert_fail@plt+0x758>
   11ad8:	mov	r3, #0
   11adc:	b	11a0c <__assert_fail@plt+0x5d0>
   11ae0:	cmp	r0, #119	; 0x77
   11ae4:	beq	11e30 <__assert_fail@plt+0x9f4>
   11ae8:	cmp	r0, #256	; 0x100
   11aec:	movweq	r0, #45860	; 0xb324
   11af0:	movteq	r0, #1
   11af4:	beq	119f8 <__assert_fail@plt+0x5bc>
   11af8:	b	11a50 <__assert_fail@plt+0x614>
   11afc:	cmp	r0, #112	; 0x70
   11b00:	beq	11e08 <__assert_fail@plt+0x9cc>
   11b04:	cmp	r0, #113	; 0x71
   11b08:	bne	11a50 <__assert_fail@plt+0x614>
   11b0c:	movw	r2, #54984	; 0xd6c8
   11b10:	movt	r2, #2
   11b14:	ldr	r1, [r2]
   11b18:	mov	r3, #0
   11b1c:	orr	r1, r1, #8
   11b20:	str	r1, [r2]
   11b24:	b	11a0c <__assert_fail@plt+0x5d0>
   11b28:	cmp	r0, #87	; 0x57
   11b2c:	beq	11de4 <__assert_fail@plt+0x9a8>
   11b30:	bgt	11b68 <__assert_fail@plt+0x72c>
   11b34:	cmp	r0, #82	; 0x52
   11b38:	beq	11dc8 <__assert_fail@plt+0x98c>
   11b3c:	cmp	r0, #84	; 0x54
   11b40:	bne	11a50 <__assert_fail@plt+0x614>
   11b44:	mov	r0, r1
   11b48:	mov	r2, #1
   11b4c:	mov	r1, #255	; 0xff
   11b50:	bl	122c0 <__assert_fail@plt+0xe84>
   11b54:	movw	r2, #53564	; 0xd13c
   11b58:	movt	r2, #2
   11b5c:	mov	r3, #0
   11b60:	str	r0, [r2, #40]	; 0x28
   11b64:	b	11a0c <__assert_fail@plt+0x5d0>
   11b68:	cmp	r0, #99	; 0x63
   11b6c:	beq	11da4 <__assert_fail@plt+0x968>
   11b70:	cmp	r0, #100	; 0x64
   11b74:	bne	11a50 <__assert_fail@plt+0x614>
   11b78:	movw	r2, #54988	; 0xd6cc
   11b7c:	movt	r2, #2
   11b80:	ldr	r1, [r2]
   11b84:	mov	r3, #0
   11b88:	orr	r1, r1, #1
   11b8c:	str	r1, [r2]
   11b90:	b	11a0c <__assert_fail@plt+0x5d0>
   11b94:	mov	r3, r4
   11b98:	movw	r2, #45984	; 0xb3a0
   11b9c:	movt	r2, #1
   11ba0:	mov	r1, #0
   11ba4:	mov	r0, #1
   11ba8:	bl	11238 <error@plt>
   11bac:	b	11ad8 <__assert_fail@plt+0x69c>
   11bb0:	add	r1, sp, #12
   11bb4:	mov	r0, r4
   11bb8:	str	r2, [sp, #4]
   11bbc:	bl	11340 <strtod@plt>
   11bc0:	vmov.f64	d8, d0
   11bc4:	ldr	r2, [sp, #4]
   11bc8:	ldr	r3, [sp, #12]
   11bcc:	ldrb	r1, [r3]
   11bd0:	cmp	r1, #0
   11bd4:	bne	11e54 <__assert_fail@plt+0xa18>
   11bd8:	vldr	d0, [pc, #656]	; 11e70 <__assert_fail@plt+0xa34>
   11bdc:	movw	r3, #54984	; 0xd6c8
   11be0:	movt	r3, #2
   11be4:	movw	r2, #54836	; 0xd634
   11be8:	movt	r2, #2
   11bec:	ldr	r0, [r3]
   11bf0:	movw	r1, #55000	; 0xd6d8
   11bf4:	movt	r1, #2
   11bf8:	ldrb	r2, [r2, #4]
   11bfc:	vmul.f64	d0, d8, d0
   11c00:	orr	r0, r0, #2
   11c04:	str	r0, [r3]
   11c08:	eor	r2, r2, #1
   11c0c:	vcvt.u32.f64	s15, d0
   11c10:	vmov	r3, s15
   11c14:	vstr	s15, [r1]
   11c18:	cmp	r3, #199	; 0xc7
   11c1c:	movhi	r2, #0
   11c20:	andls	r2, r2, #1
   11c24:	cmp	r2, #0
   11c28:	beq	11ad8 <__assert_fail@plt+0x69c>
   11c2c:	mov	r3, r4
   11c30:	movw	r2, #45956	; 0xb384
   11c34:	movt	r2, #1
   11c38:	mov	r1, #0
   11c3c:	mov	r0, #1
   11c40:	bl	11238 <error@plt>
   11c44:	mov	r3, #0
   11c48:	b	11a0c <__assert_fail@plt+0x5d0>
   11c4c:	movw	r2, #54984	; 0xd6c8
   11c50:	movt	r2, #2
   11c54:	ldr	r1, [r2]
   11c58:	mov	r3, #0
   11c5c:	orr	r1, r1, #4
   11c60:	str	r1, [r2]
   11c64:	b	11a0c <__assert_fail@plt+0x5d0>
   11c68:	movw	r2, #54984	; 0xd6c8
   11c6c:	movt	r2, #2
   11c70:	ldr	r1, [r2]
   11c74:	mov	r3, #0
   11c78:	orr	r1, r1, #1
   11c7c:	str	r1, [r2]
   11c80:	b	11a0c <__assert_fail@plt+0x5d0>
   11c84:	mov	r0, r1
   11c88:	mov	r2, #1
   11c8c:	movw	r1, #65399	; 0xff77
   11c90:	bl	122c0 <__assert_fail@plt+0xe84>
   11c94:	movw	r2, #53564	; 0xd13c
   11c98:	movt	r2, #2
   11c9c:	mov	r3, #0
   11ca0:	str	r0, [r2]
   11ca4:	b	11a0c <__assert_fail@plt+0x5d0>
   11ca8:	movw	r2, #54984	; 0xd6c8
   11cac:	movt	r2, #2
   11cb0:	ldr	r1, [r2]
   11cb4:	mov	r3, #0
   11cb8:	orr	r1, r1, #32
   11cbc:	str	r1, [r2]
   11cc0:	b	11a0c <__assert_fail@plt+0x5d0>
   11cc4:	movw	r3, #54984	; 0xd6c8
   11cc8:	movt	r3, #2
   11ccc:	ldr	r2, [r3]
   11cd0:	movw	r1, #46020	; 0xb3c4
   11cd4:	movt	r1, #1
   11cd8:	mov	r0, r4
   11cdc:	orr	r2, r2, #64	; 0x40
   11ce0:	str	r2, [r3]
   11ce4:	bl	11208 <strcasecmp@plt>
   11ce8:	cmp	r0, #0
   11cec:	moveq	r0, #1
   11cf0:	beq	11d2c <__assert_fail@plt+0x8f0>
   11cf4:	movw	r1, #46028	; 0xb3cc
   11cf8:	movt	r1, #1
   11cfc:	mov	r0, r4
   11d00:	bl	11208 <strcasecmp@plt>
   11d04:	cmp	r0, #0
   11d08:	moveq	r0, #2
   11d0c:	beq	11d2c <__assert_fail@plt+0x8f0>
   11d10:	mov	r0, #1
   11d14:	mov	r3, r4
   11d18:	movw	r2, #46036	; 0xb3d4
   11d1c:	movt	r2, #1
   11d20:	mov	r1, #0
   11d24:	bl	11238 <error@plt>
   11d28:	mov	r0, #0
   11d2c:	movw	r2, #54996	; 0xd6d4
   11d30:	movt	r2, #2
   11d34:	ldr	r1, [r2]
   11d38:	mov	r3, #0
   11d3c:	orr	r1, r1, r0
   11d40:	str	r1, [r2]
   11d44:	b	11a0c <__assert_fail@plt+0x5d0>
   11d48:	movw	r0, #45868	; 0xb32c
   11d4c:	movt	r0, #1
   11d50:	b	119f8 <__assert_fail@plt+0x5bc>
   11d54:	mov	r0, r1
   11d58:	mov	r2, #0
   11d5c:	mov	r1, #255	; 0xff
   11d60:	bl	122c0 <__assert_fail@plt+0xe84>
   11d64:	movw	r2, #54836	; 0xd634
   11d68:	movt	r2, #2
   11d6c:	mov	r3, #0
   11d70:	str	r0, [r2, #12]
   11d74:	b	11a0c <__assert_fail@plt+0x5d0>
   11d78:	movw	r0, #45880	; 0xb338
   11d7c:	movt	r0, #1
   11d80:	b	119f8 <__assert_fail@plt+0x5bc>
   11d84:	movw	r2, #54988	; 0xd6cc
   11d88:	movt	r2, #2
   11d8c:	ldr	r1, [r2]
   11d90:	mov	r3, #0
   11d94:	mov	r0, r3
   11d98:	orr	r1, r1, #5
   11d9c:	str	r1, [r2]
   11da0:	bx	lr
   11da4:	mov	r0, r1
   11da8:	mov	r2, #1
   11dac:	mov	r1, #0
   11db0:	bl	122c0 <__assert_fail@plt+0xe84>
   11db4:	movw	r2, #54836	; 0xd634
   11db8:	movt	r2, #2
   11dbc:	mov	r3, #0
   11dc0:	str	r0, [r2, #8]
   11dc4:	b	11a0c <__assert_fail@plt+0x5d0>
   11dc8:	movw	r2, #54984	; 0xd6c8
   11dcc:	movt	r2, #2
   11dd0:	ldr	r1, [r2]
   11dd4:	mov	r3, #0
   11dd8:	orr	r1, r1, #16
   11ddc:	str	r1, [r2]
   11de0:	b	11a0c <__assert_fail@plt+0x5d0>
   11de4:	mov	r0, r1
   11de8:	mov	r2, #0
   11dec:	mvn	r1, #-2147483648	; 0x80000000
   11df0:	bl	122c0 <__assert_fail@plt+0xe84>
   11df4:	movw	r2, #53564	; 0xd13c
   11df8:	movt	r2, #2
   11dfc:	mov	r3, #0
   11e00:	str	r0, [r2, #56]	; 0x38
   11e04:	b	11a0c <__assert_fail@plt+0x5d0>
   11e08:	ldr	r5, [pc, #104]	; 11e78 <__assert_fail@plt+0xa3c>
   11e0c:	mov	r0, r1
   11e10:	ldr	r1, [pc, #100]	; 11e7c <__assert_fail@plt+0xa40>
   11e14:	mov	r2, r5
   11e18:	bl	12454 <__assert_fail@plt+0x1018>
   11e1c:	movw	r2, #54976	; 0xd6c0
   11e20:	movt	r2, #2
   11e24:	mov	r3, #0
   11e28:	str	r5, [r2]
   11e2c:	b	11a0c <__assert_fail@plt+0x5d0>
   11e30:	mov	r0, r1
   11e34:	mov	r2, #0
   11e38:	mvn	r1, #-2147483648	; 0x80000000
   11e3c:	bl	122c0 <__assert_fail@plt+0xe84>
   11e40:	movw	r2, #53564	; 0xd13c
   11e44:	movt	r2, #2
   11e48:	mov	r3, #0
   11e4c:	str	r0, [r2, #52]	; 0x34
   11e50:	b	11a0c <__assert_fail@plt+0x5d0>
   11e54:	mov	r0, r2
   11e58:	movw	r1, #45924	; 0xb364
   11e5c:	movt	r1, #1
   11e60:	mov	r2, r4
   11e64:	bl	17a3c <argp_error@@Base>
   11e68:	b	11bd8 <__assert_fail@plt+0x79c>
   11e6c:	nop	{0}
   11e70:	andeq	r0, r0, r0
   11e74:	addmi	r4, pc, r0
   11e78:	andeq	sp, r2, r4, asr #12
   11e7c:	andeq	sp, r2, r8, ror #2
   11e80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e84:	mov	r5, r0
   11e88:	mov	r0, #2
   11e8c:	strd	r6, [sp, #8]
   11e90:	movw	r6, #54836	; 0xd634
   11e94:	movt	r6, #2
   11e98:	strd	r8, [sp, #16]
   11e9c:	strd	sl, [sp, #24]
   11ea0:	str	lr, [sp, #32]
   11ea4:	sub	sp, sp, #188	; 0xbc
   11ea8:	str	r1, [sp, #16]
   11eac:	movw	r1, #6152	; 0x1808
   11eb0:	movt	r1, #1
   11eb4:	bl	11190 <signal@plt>
   11eb8:	ldr	r1, [r6, #32]
   11ebc:	mov	r2, #0
   11ec0:	mov	r3, #0
   11ec4:	ldr	r7, [r5]
   11ec8:	strd	r2, [sp, #24]
   11ecc:	strd	r2, [sp, #40]	; 0x28
   11ed0:	cmp	r1, #0
   11ed4:	strd	r2, [sp, #48]	; 0x30
   11ed8:	movne	r4, #0
   11edc:	add	r7, r7, #1
   11ee0:	beq	11efc <__assert_fail@plt+0xac0>
   11ee4:	mov	r0, r5
   11ee8:	add	r4, r4, #1
   11eec:	bl	1181c <__assert_fail@plt+0x3e0>
   11ef0:	ldr	r3, [r6, #32]
   11ef4:	cmp	r3, r4
   11ef8:	bhi	11ee4 <__assert_fail@plt+0xaa8>
   11efc:	movw	r9, #54984	; 0xd6c8
   11f00:	movt	r9, #2
   11f04:	ldr	r3, [r9]
   11f08:	tst	r3, #1
   11f0c:	movwne	r3, #10000	; 0x2710
   11f10:	strne	r3, [sp, #44]	; 0x2c
   11f14:	bne	11f40 <__assert_fail@plt+0xb04>
   11f18:	ldr	r1, [r5, #20]
   11f1c:	movw	r3, #19923	; 0x4dd3
   11f20:	movt	r3, #4194	; 0x1062
   11f24:	mov	r2, #1000	; 0x3e8
   11f28:	umull	r0, r3, r3, r1
   11f2c:	lsr	r3, r3, #6
   11f30:	mls	r1, r2, r3, r1
   11f34:	str	r3, [sp, #40]	; 0x28
   11f38:	mul	r2, r2, r1
   11f3c:	str	r2, [sp, #44]	; 0x2c
   11f40:	mov	r1, #0
   11f44:	add	r0, sp, #32
   11f48:	mov	fp, r1
   11f4c:	movw	r4, #16959	; 0x423f
   11f50:	movt	r4, #15
   11f54:	movw	r8, #53564	; 0xd13c
   11f58:	movt	r8, #2
   11f5c:	mov	sl, fp
   11f60:	bl	1122c <gettimeofday@plt>
   11f64:	mov	r0, r5
   11f68:	bl	1181c <__assert_fail@plt+0x3e0>
   11f6c:	movw	r3, #54828	; 0xd62c
   11f70:	movt	r3, #2
   11f74:	str	fp, [sp, #12]
   11f78:	str	r3, [sp, #20]
   11f7c:	ldr	r2, [r6]
   11f80:	cmp	r2, #0
   11f84:	bne	120b8 <__assert_fail@plt+0xc7c>
   11f88:	add	r3, sp, #52	; 0x34
   11f8c:	add	r1, sp, #180	; 0xb4
   11f90:	str	r2, [r3, #4]!
   11f94:	cmp	r3, r1
   11f98:	bne	11f90 <__assert_fail@plt+0xb54>
   11f9c:	ldr	r3, [r5]
   11fa0:	mov	r1, #0
   11fa4:	mov	lr, #1
   11fa8:	add	r0, sp, #48	; 0x30
   11fac:	cmp	r3, r1
   11fb0:	add	r2, r3, #31
   11fb4:	movge	r2, r3
   11fb8:	subs	ip, r1, r3
   11fbc:	and	ip, ip, #31
   11fc0:	asr	r2, r2, #5
   11fc4:	and	r3, r3, #31
   11fc8:	rsbpl	r3, ip, #0
   11fcc:	add	ip, sp, #184	; 0xb8
   11fd0:	add	r2, ip, r2, lsl #2
   11fd4:	ldr	ip, [r2, #-128]	; 0xffffff80
   11fd8:	orr	r3, ip, lr, lsl r3
   11fdc:	str	r3, [r2, #-128]	; 0xffffff80
   11fe0:	bl	1122c <gettimeofday@plt>
   11fe4:	ldrd	r2, [sp, #32]
   11fe8:	ldr	r1, [sp, #40]	; 0x28
   11fec:	ldr	ip, [sp, #44]	; 0x2c
   11ff0:	ldr	r0, [sp, #48]	; 0x30
   11ff4:	add	r2, r2, r1
   11ff8:	ldr	r1, [sp, #52]	; 0x34
   11ffc:	add	r3, r3, ip
   12000:	sub	r2, r2, r0
   12004:	sub	r3, r3, r1
   12008:	cmp	r3, #0
   1200c:	strd	r2, [sp, #24]
   12010:	bge	120f0 <__assert_fail@plt+0xcb4>
   12014:	sub	r1, r2, #1
   12018:	add	r3, r3, #999424	; 0xf4000
   1201c:	mov	r2, r1
   12020:	add	r3, r3, #576	; 0x240
   12024:	sub	r1, r1, #1
   12028:	cmp	r3, #0
   1202c:	blt	12018 <__assert_fail@plt+0xbdc>
   12030:	strd	r2, [sp, #24]
   12034:	cmp	r2, #0
   12038:	bge	12048 <__assert_fail@plt+0xc0c>
   1203c:	mov	r3, #0
   12040:	str	r3, [sp, #24]
   12044:	str	r3, [sp, #28]
   12048:	add	r0, sp, #24
   1204c:	mov	r3, #0
   12050:	mov	r2, r3
   12054:	add	r1, sp, #56	; 0x38
   12058:	str	r0, [sp]
   1205c:	mov	r0, r7
   12060:	bl	111c0 <select@plt>
   12064:	cmp	r0, #0
   12068:	blt	12140 <__assert_fail@plt+0xd04>
   1206c:	cmp	r0, #1
   12070:	beq	12164 <__assert_fail@plt+0xd28>
   12074:	ldr	r3, [r5, #8]
   12078:	cmp	r3, #0
   1207c:	beq	12110 <__assert_fail@plt+0xcd4>
   12080:	ldr	r2, [r5, #112]	; 0x70
   12084:	cmp	r3, r2
   12088:	bhi	12110 <__assert_fail@plt+0xcd4>
   1208c:	cmp	sl, #0
   12090:	bne	120b8 <__assert_fail@plt+0xc7c>
   12094:	ldr	r3, [r8, #56]	; 0x38
   12098:	mov	sl, #1
   1209c:	str	r3, [sp, #40]	; 0x28
   120a0:	mov	r1, #0
   120a4:	add	r0, sp, #32
   120a8:	bl	1122c <gettimeofday@plt>
   120ac:	ldr	r2, [r6]
   120b0:	cmp	r2, #0
   120b4:	beq	11f88 <__assert_fail@plt+0xb4c>
   120b8:	mov	r0, r5
   120bc:	bl	12770 <__assert_fail@plt+0x1334>
   120c0:	ldr	r0, [sp, #16]
   120c4:	cmp	r0, #0
   120c8:	beq	120d4 <__assert_fail@plt+0xc98>
   120cc:	ldr	r3, [sp, #16]
   120d0:	blx	r3
   120d4:	add	sp, sp, #188	; 0xbc
   120d8:	ldrd	r4, [sp]
   120dc:	ldrd	r6, [sp, #8]
   120e0:	ldrd	r8, [sp, #16]
   120e4:	ldrd	sl, [sp, #24]
   120e8:	add	sp, sp, #32
   120ec:	pop	{pc}		; (ldr pc, [sp], #4)
   120f0:	cmp	r3, r4
   120f4:	ble	12034 <__assert_fail@plt+0xbf8>
   120f8:	sub	r3, r3, #999424	; 0xf4000
   120fc:	add	r2, r2, #1
   12100:	sub	r3, r3, #576	; 0x240
   12104:	cmp	r3, r4
   12108:	bgt	120f8 <__assert_fail@plt+0xcbc>
   1210c:	b	12030 <__assert_fail@plt+0xbf4>
   12110:	mov	r0, r5
   12114:	bl	1181c <__assert_fail@plt+0x3e0>
   12118:	ldr	r3, [r9]
   1211c:	and	r3, r3, #9
   12120:	cmp	r3, #1
   12124:	beq	121b8 <__assert_fail@plt+0xd7c>
   12128:	add	r0, r5, #12
   1212c:	ldr	r1, [r8, #52]	; 0x34
   12130:	bl	127b8 <__assert_fail@plt+0x137c>
   12134:	cmp	r0, #0
   12138:	beq	120a0 <__assert_fail@plt+0xc64>
   1213c:	b	120b8 <__assert_fail@plt+0xc7c>
   12140:	bl	112f8 <__errno_location@plt>
   12144:	ldr	r1, [r0]
   12148:	cmp	r1, #4
   1214c:	beq	11f7c <__assert_fail@plt+0xb40>
   12150:	movw	r2, #46092	; 0xb40c
   12154:	movt	r2, #1
   12158:	mov	r0, #1
   1215c:	bl	11238 <error@plt>
   12160:	b	11f7c <__assert_fail@plt+0xb40>
   12164:	mov	r0, r5
   12168:	bl	14000 <__assert_fail@plt+0x2bc4>
   1216c:	ldr	r3, [sp, #12]
   12170:	cmp	r0, #0
   12174:	addeq	fp, fp, #1
   12178:	cmp	r3, #0
   1217c:	beq	121cc <__assert_fail@plt+0xd90>
   12180:	add	r0, r5, #12
   12184:	ldr	r1, [r8, #52]	; 0x34
   12188:	bl	127b8 <__assert_fail@plt+0x137c>
   1218c:	cmp	r0, #0
   12190:	bne	120b8 <__assert_fail@plt+0xc7c>
   12194:	ldr	r3, [r5, #8]
   12198:	cmp	r3, fp
   1219c:	movhi	r2, #0
   121a0:	movls	r2, #1
   121a4:	cmp	r3, #0
   121a8:	moveq	r2, #0
   121ac:	cmp	r2, #0
   121b0:	beq	11f7c <__assert_fail@plt+0xb40>
   121b4:	b	120b8 <__assert_fail@plt+0xc7c>
   121b8:	ldr	r3, [sp, #20]
   121bc:	mov	r0, #46	; 0x2e
   121c0:	ldr	r1, [r3]
   121c4:	bl	113c4 <putc@plt>
   121c8:	b	12128 <__assert_fail@plt+0xcec>
   121cc:	add	r0, sp, #48	; 0x30
   121d0:	mov	r1, r3
   121d4:	str	r0, [sp, #12]
   121d8:	bl	1122c <gettimeofday@plt>
   121dc:	b	12180 <__assert_fail@plt+0xd44>
   121e0:	movw	r3, #54828	; 0xd62c
   121e4:	movt	r3, #2
   121e8:	str	r4, [sp, #-8]!
   121ec:	movw	r4, #54992	; 0xd6d0
   121f0:	movt	r4, #2
   121f4:	ldr	r0, [r3]
   121f8:	str	lr, [sp, #4]
   121fc:	bl	11130 <fflush@plt>
   12200:	ldr	r3, [r4]
   12204:	movw	r0, #46108	; 0xb41c
   12208:	movt	r0, #1
   1220c:	ldr	r1, [r3, #52]	; 0x34
   12210:	bl	11118 <printf@plt>
   12214:	ldr	r3, [r4]
   12218:	movw	r0, #46136	; 0xb438
   1221c:	movt	r0, #1
   12220:	ldr	r1, [r3, #112]	; 0x70
   12224:	bl	11118 <printf@plt>
   12228:	ldr	r3, [r4]
   1222c:	movw	r0, #46164	; 0xb454
   12230:	movt	r0, #1
   12234:	ldr	r1, [r3, #116]	; 0x74
   12238:	bl	11118 <printf@plt>
   1223c:	ldr	r3, [r4]
   12240:	ldr	r1, [r3, #120]	; 0x78
   12244:	cmp	r1, #0
   12248:	bne	122a8 <__assert_fail@plt+0xe6c>
   1224c:	ldr	r2, [r3, #112]	; 0x70
   12250:	cmp	r2, #0
   12254:	beq	12270 <__assert_fail@plt+0xe34>
   12258:	ldr	r1, [r3, #116]	; 0x74
   1225c:	cmp	r2, r1
   12260:	bcs	12288 <__assert_fail@plt+0xe4c>
   12264:	movw	r0, #46208	; 0xb480
   12268:	movt	r0, #1
   1226c:	bl	11118 <printf@plt>
   12270:	mov	r0, #10
   12274:	bl	11334 <putchar@plt>
   12278:	ldr	r4, [sp]
   1227c:	add	sp, sp, #4
   12280:	mov	r0, #0
   12284:	pop	{pc}		; (ldr pc, [sp], #4)
   12288:	sub	r1, r2, r1
   1228c:	mov	r3, #100	; 0x64
   12290:	movw	r0, #46248	; 0xb4a8
   12294:	movt	r0, #1
   12298:	mul	r1, r3, r1
   1229c:	udiv	r1, r1, r2
   122a0:	bl	11118 <printf@plt>
   122a4:	b	12270 <__assert_fail@plt+0xe34>
   122a8:	movw	r0, #46188	; 0xb46c
   122ac:	movt	r0, #1
   122b0:	bl	11118 <printf@plt>
   122b4:	ldr	r3, [r4]
   122b8:	b	1224c <__assert_fail@plt+0xe10>
   122bc:	andeq	r0, r0, r0
   122c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   122c4:	mov	r5, r2
   122c8:	mov	r2, #0
   122cc:	strd	r6, [sp, #8]
   122d0:	mov	r6, r1
   122d4:	mov	r7, r0
   122d8:	str	lr, [sp, #16]
   122dc:	sub	sp, sp, #20
   122e0:	add	r1, sp, #12
   122e4:	bl	112c8 <strtoul@plt>
   122e8:	ldr	r3, [sp, #12]
   122ec:	mov	r4, r0
   122f0:	ldrb	r2, [r3]
   122f4:	cmp	r2, #0
   122f8:	bne	1235c <__assert_fail@plt+0xf20>
   122fc:	orrs	r1, r5, r4
   12300:	beq	12344 <__assert_fail@plt+0xf08>
   12304:	cmp	r6, #0
   12308:	cmpne	r4, r6
   1230c:	bhi	12328 <__assert_fail@plt+0xeec>
   12310:	mov	r0, r4
   12314:	add	sp, sp, #20
   12318:	ldrd	r4, [sp]
   1231c:	ldrd	r6, [sp, #8]
   12320:	add	sp, sp, #16
   12324:	pop	{pc}		; (ldr pc, [sp], #4)
   12328:	mov	r3, r7
   1232c:	movw	r2, #47412	; 0xb934
   12330:	movt	r2, #1
   12334:	mov	r1, #0
   12338:	mov	r0, #1
   1233c:	bl	11238 <error@plt>
   12340:	b	12310 <__assert_fail@plt+0xed4>
   12344:	mov	r3, r7
   12348:	movw	r2, #45956	; 0xb384
   1234c:	movt	r2, #1
   12350:	mov	r0, #1
   12354:	bl	11238 <error@plt>
   12358:	b	12310 <__assert_fail@plt+0xed4>
   1235c:	movw	r2, #45924	; 0xb364
   12360:	movt	r2, #1
   12364:	str	r3, [sp]
   12368:	mov	r1, #0
   1236c:	mov	r0, #1
   12370:	mov	r3, r7
   12374:	bl	11238 <error@plt>
   12378:	b	122fc <__assert_fail@plt+0xec0>
   1237c:	strd	r4, [sp, #-16]!
   12380:	movw	r5, #53564	; 0xd13c
   12384:	movt	r5, #2
   12388:	ldr	r2, [r5]
   1238c:	str	r6, [sp, #8]
   12390:	str	lr, [sp, #12]
   12394:	cmp	r2, #0
   12398:	bne	123ac <__assert_fail@plt+0xf70>
   1239c:	ldrd	r4, [sp]
   123a0:	ldr	r6, [sp, #8]
   123a4:	add	sp, sp, #12
   123a8:	pop	{pc}		; (ldr pc, [sp], #4)
   123ac:	mov	r4, r0
   123b0:	mov	r0, r2
   123b4:	mov	r6, r1
   123b8:	bl	197ac <argp_parse@@Base+0x1658>
   123bc:	movw	r2, #54980	; 0xd6c4
   123c0:	movt	r2, #2
   123c4:	cmp	r4, #0
   123c8:	str	r0, [r2]
   123cc:	beq	12418 <__assert_fail@plt+0xfdc>
   123d0:	ldr	r1, [r5]
   123d4:	add	r1, r0, r1
   123d8:	cmp	r0, r1
   123dc:	bcs	1239c <__assert_fail@plt+0xf60>
   123e0:	sub	r2, r0, #1
   123e4:	sub	r1, r1, #1
   123e8:	mov	r3, #0
   123ec:	ldrb	r0, [r4, r3]
   123f0:	add	r3, r3, #1
   123f4:	cmp	r3, r6
   123f8:	movcs	r3, #0
   123fc:	strb	r0, [r2, #1]!
   12400:	cmp	r2, r1
   12404:	bne	123ec <__assert_fail@plt+0xfb0>
   12408:	ldrd	r4, [sp]
   1240c:	ldr	r6, [sp, #8]
   12410:	add	sp, sp, #12
   12414:	pop	{pc}		; (ldr pc, [sp], #4)
   12418:	ldr	r3, [r5]
   1241c:	cmp	r3, #0
   12420:	movne	r3, r4
   12424:	bne	12430 <__assert_fail@plt+0xff4>
   12428:	b	1239c <__assert_fail@plt+0xf60>
   1242c:	ldr	r0, [r2]
   12430:	strb	r3, [r0, r3]
   12434:	add	r3, r3, #1
   12438:	ldr	r1, [r5]
   1243c:	cmp	r1, r3
   12440:	bhi	1242c <__assert_fail@plt+0xff0>
   12444:	ldrd	r4, [sp]
   12448:	ldr	r6, [sp, #8]
   1244c:	add	sp, sp, #12
   12450:	pop	{pc}		; (ldr pc, [sp], #4)
   12454:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12458:	strd	r6, [sp, #8]
   1245c:	strd	r8, [sp, #16]
   12460:	mov	r9, r1
   12464:	str	lr, [sp, #24]
   12468:	sub	sp, sp, #12
   1246c:	ldrb	r5, [r0]
   12470:	cmp	r5, #0
   12474:	beq	124fc <__assert_fail@plt+0x10c0>
   12478:	ldr	r3, [r1]
   1247c:	cmp	r3, #0
   12480:	ble	12518 <__assert_fail@plt+0x10dc>
   12484:	movw	r8, #47440	; 0xb950
   12488:	movt	r8, #1
   1248c:	movw	r7, #47448	; 0xb958
   12490:	movt	r7, #1
   12494:	mov	r4, r0
   12498:	sub	r6, r2, #1
   1249c:	mov	r5, #0
   124a0:	b	124b0 <__assert_fail@plt+0x1074>
   124a4:	ldr	r3, [r9]
   124a8:	cmp	r3, r5
   124ac:	ble	124fc <__assert_fail@plt+0x10c0>
   124b0:	add	r3, sp, #4
   124b4:	mov	r2, sp
   124b8:	mov	r1, r8
   124bc:	mov	r0, r4
   124c0:	bl	113b8 <sscanf@plt>
   124c4:	cmp	r0, #1
   124c8:	mov	r3, r4
   124cc:	mov	r2, r7
   124d0:	mov	r1, #0
   124d4:	mov	r0, #1
   124d8:	beq	124e0 <__assert_fail@plt+0x10a4>
   124dc:	bl	11238 <error@plt>
   124e0:	ldr	r3, [sp]
   124e4:	add	r5, r5, #1
   124e8:	ldr	r2, [sp, #4]
   124ec:	strb	r3, [r6, #1]!
   124f0:	ldrb	r3, [r4, r2]!
   124f4:	cmp	r3, #0
   124f8:	bne	124a4 <__assert_fail@plt+0x1068>
   124fc:	str	r5, [r9]
   12500:	add	sp, sp, #12
   12504:	ldrd	r4, [sp]
   12508:	ldrd	r6, [sp, #8]
   1250c:	ldrd	r8, [sp, #16]
   12510:	add	sp, sp, #24
   12514:	pop	{pc}		; (ldr pc, [sp], #4)
   12518:	mov	r5, #0
   1251c:	b	124fc <__assert_fail@plt+0x10c0>
   12520:	ldrd	r2, [r0]
   12524:	ldr	ip, [r1, #4]
   12528:	sub	r3, r3, ip
   1252c:	cmp	r3, #0
   12530:	str	r3, [r0, #4]
   12534:	bge	12548 <__assert_fail@plt+0x110c>
   12538:	add	r3, r3, #999424	; 0xf4000
   1253c:	sub	r2, r2, #1
   12540:	add	r3, r3, #576	; 0x240
   12544:	strd	r2, [r0]
   12548:	ldr	r3, [r1]
   1254c:	sub	r2, r2, r3
   12550:	str	r2, [r0]
   12554:	bx	lr
   12558:	vcmpe.f64	d0, #0.0
   1255c:	vmrs	APSR_nzcv, fpscr
   12560:	vnegmi.f64	d0, d0
   12564:	bx	lr
   12568:	vcmpe.f64	d0, #0.0
   1256c:	vmrs	APSR_nzcv, fpscr
   12570:	bmi	125c0 <__assert_fail@plt+0x1184>
   12574:	vcmpe.f64	d0, d1
   12578:	vmrs	APSR_nzcv, fpscr
   1257c:	bmi	125c0 <__assert_fail@plt+0x1184>
   12580:	vldr	d6, [pc, #72]	; 125d0 <__assert_fail@plt+0x1194>
   12584:	vmov.f64	d4, d6
   12588:	vmul.f64	d6, d0, d6
   1258c:	vdiv.f64	d7, d0, d6
   12590:	vadd.f64	d7, d7, d6
   12594:	vmul.f64	d7, d7, d4
   12598:	vsub.f64	d5, d7, d6
   1259c:	vmov.f64	d6, d7
   125a0:	vcmpe.f64	d5, #0.0
   125a4:	vmrs	APSR_nzcv, fpscr
   125a8:	vnegmi.f64	d5, d5
   125ac:	vcmpe.f64	d1, d5
   125b0:	vmrs	APSR_nzcv, fpscr
   125b4:	bmi	1258c <__assert_fail@plt+0x1150>
   125b8:	vmov.f64	d0, d7
   125bc:	bx	lr
   125c0:	vldr	d7, [pc, #16]	; 125d8 <__assert_fail@plt+0x119c>
   125c4:	vmov.f64	d0, d7
   125c8:	bx	lr
   125cc:	nop	{0}
   125d0:	andeq	r0, r0, r0
   125d4:	svccc	0x00e00000
	...
   125e0:	mvn	r0, r0
   125e4:	lsr	r0, r0, #31
   125e8:	bx	lr
   125ec:	cmp	r2, #0
   125f0:	bic	r3, r2, #-2147483648	; 0x80000000
   125f4:	str	r4, [sp, #-8]!
   125f8:	movwge	r2, #47476	; 0xb974
   125fc:	movwlt	r2, #47480	; 0xb978
   12600:	str	lr, [sp, #4]
   12604:	mov	r4, r0
   12608:	movtge	r2, #1
   1260c:	movtlt	r2, #1
   12610:	bl	11304 <snprintf@plt>
   12614:	mov	r0, r4
   12618:	ldr	r4, [sp]
   1261c:	add	sp, sp, #4
   12620:	pop	{pc}		; (ldr pc, [sp], #4)
   12624:	ldr	r3, [r0, #80]	; 0x50
   12628:	strd	r4, [sp, #-16]!
   1262c:	mov	r5, r0
   12630:	str	r6, [sp, #8]
   12634:	str	lr, [sp, #12]
   12638:	cmp	r3, #0
   1263c:	beq	12660 <__assert_fail@plt+0x1224>
   12640:	ldr	r4, [r5, #76]	; 0x4c
   12644:	cmp	r4, #0
   12648:	movne	r0, #0
   1264c:	beq	12688 <__assert_fail@plt+0x124c>
   12650:	ldrd	r4, [sp]
   12654:	ldr	r6, [sp, #8]
   12658:	add	sp, sp, #12
   1265c:	pop	{pc}		; (ldr pc, [sp], #4)
   12660:	ldr	r0, [r0, #56]	; 0x38
   12664:	cmp	r1, #0
   12668:	addne	r0, r0, #8
   1266c:	addeq	r0, r0, #80	; 0x50
   12670:	bl	19cc8 <argp_parse@@Base+0x1b74>
   12674:	cmp	r0, #0
   12678:	str	r0, [r5, #80]	; 0x50
   1267c:	bne	12640 <__assert_fail@plt+0x1204>
   12680:	mvn	r0, #0
   12684:	b	12650 <__assert_fail@plt+0x1214>
   12688:	ldr	r0, [r5, #72]	; 0x48
   1268c:	bl	19cc8 <argp_parse@@Base+0x1b74>
   12690:	cmp	r0, #0
   12694:	str	r0, [r5, #76]	; 0x4c
   12698:	beq	12680 <__assert_fail@plt+0x1244>
   1269c:	mov	r1, r4
   126a0:	ldr	r2, [r5, #72]	; 0x48
   126a4:	bl	11328 <memset@plt>
   126a8:	mov	r0, r4
   126ac:	ldrd	r4, [sp]
   126b0:	ldr	r6, [sp, #8]
   126b4:	add	sp, sp, #12
   126b8:	pop	{pc}		; (ldr pc, [sp], #4)
   126bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   126c0:	mov	r4, r2
   126c4:	mov	r5, r3
   126c8:	strd	r6, [sp, #8]
   126cc:	mov	r6, r0
   126d0:	str	r8, [sp, #16]
   126d4:	mov	r8, r1
   126d8:	ldrb	r1, [sp, #24]
   126dc:	str	lr, [sp, #20]
   126e0:	bl	12624 <__assert_fail@plt+0x11e8>
   126e4:	subs	r7, r0, #0
   126e8:	bne	1272c <__assert_fail@plt+0x12f0>
   126ec:	ldr	r2, [r6, #56]	; 0x38
   126f0:	add	r3, r4, r5
   126f4:	cmp	r2, r3
   126f8:	bcc	1272c <__assert_fail@plt+0x12f0>
   126fc:	ldr	r0, [r6, #80]	; 0x50
   12700:	mov	r2, r5
   12704:	mov	r1, r8
   12708:	add	r0, r0, #8
   1270c:	add	r0, r0, r4
   12710:	bl	11184 <memcpy@plt>
   12714:	mov	r0, r7
   12718:	ldrd	r4, [sp]
   1271c:	ldrd	r6, [sp, #8]
   12720:	ldr	r8, [sp, #16]
   12724:	add	sp, sp, #20
   12728:	pop	{pc}		; (ldr pc, [sp], #4)
   1272c:	mvn	r7, #0
   12730:	b	12714 <__assert_fail@plt+0x12d8>
   12734:	str	r1, [r0, #8]
   12738:	bx	lr
   1273c:	push	{lr}		; (str lr, [sp, #-4]!)
   12740:	sub	sp, sp, #20
   12744:	ldr	r0, [r0]
   12748:	str	r3, [sp]
   1274c:	add	r3, sp, #12
   12750:	str	r2, [sp, #12]
   12754:	mov	r2, r1
   12758:	mov	r1, #1
   1275c:	bl	1110c <setsockopt@plt>
   12760:	add	sp, sp, #20
   12764:	pop	{pc}		; (ldr pc, [sp], #4)
   12768:	str	r1, [r0, #20]
   1276c:	bx	lr
   12770:	str	r4, [sp, #-8]!
   12774:	mov	r4, r0
   12778:	ldr	r0, [r0, #80]	; 0x50
   1277c:	str	lr, [sp, #4]
   12780:	cmp	r0, #0
   12784:	beq	12794 <__assert_fail@plt+0x1358>
   12788:	bl	19138 <argp_parse@@Base+0xfe4>
   1278c:	mov	r3, #0
   12790:	str	r3, [r4, #80]	; 0x50
   12794:	ldr	r0, [r4, #76]	; 0x4c
   12798:	cmp	r0, #0
   1279c:	beq	127ac <__assert_fail@plt+0x1370>
   127a0:	bl	19138 <argp_parse@@Base+0xfe4>
   127a4:	mov	r3, #0
   127a8:	str	r3, [r4, #76]	; 0x4c
   127ac:	ldr	r4, [sp]
   127b0:	add	sp, sp, #4
   127b4:	pop	{pc}		; (ldr pc, [sp], #4)
   127b8:	strd	r4, [sp, #-12]!
   127bc:	mov	r4, r1
   127c0:	mov	r5, r0
   127c4:	str	lr, [sp, #8]
   127c8:	sub	sp, sp, #12
   127cc:	mov	r1, #0
   127d0:	mov	r0, sp
   127d4:	bl	1122c <gettimeofday@plt>
   127d8:	cmn	r4, #1
   127dc:	moveq	r0, #0
   127e0:	beq	1280c <__assert_fail@plt+0x13d0>
   127e4:	ldm	sp, {r0, r3}
   127e8:	ldr	r2, [r5, #4]
   127ec:	sub	r3, r3, r2
   127f0:	cmp	r3, #0
   127f4:	ldr	r3, [r5]
   127f8:	sublt	r0, r0, #1
   127fc:	sub	r0, r0, r3
   12800:	cmp	r4, r0
   12804:	movgt	r0, #0
   12808:	movle	r0, #1
   1280c:	add	sp, sp, #12
   12810:	ldrd	r4, [sp]
   12814:	add	sp, sp, #8
   12818:	pop	{pc}		; (ldr pc, [sp], #4)
   1281c:	mov	ip, #0
   12820:	strd	r4, [sp, #-12]!
   12824:	mov	r3, #46	; 0x2e
   12828:	str	lr, [sp, #8]
   1282c:	sub	sp, sp, #324	; 0x144
   12830:	mov	lr, #1
   12834:	add	r2, sp, #16
   12838:	mov	r4, r0
   1283c:	str	ip, [sp]
   12840:	mov	r5, r1
   12844:	stmib	sp, {ip, lr}
   12848:	bl	1137c <getnameinfo@plt>
   1284c:	subs	r3, r0, #0
   12850:	bne	128f8 <__assert_fail@plt+0x14bc>
   12854:	movw	r3, #54984	; 0xd6c8
   12858:	movt	r3, #2
   1285c:	ldr	r3, [r3]
   12860:	ands	r3, r3, #4
   12864:	bne	128e8 <__assert_fail@plt+0x14ac>
   12868:	mov	ip, #40	; 0x28
   1286c:	mov	r1, r5
   12870:	str	r3, [sp]
   12874:	mov	r0, r4
   12878:	add	r2, sp, #64	; 0x40
   1287c:	stmib	sp, {r3, ip}
   12880:	mov	r3, #256	; 0x100
   12884:	bl	1137c <getnameinfo@plt>
   12888:	cmp	r0, #0
   1288c:	add	r0, sp, #16
   12890:	bne	12934 <__assert_fail@plt+0x14f8>
   12894:	bl	112d4 <strlen@plt>
   12898:	mov	r4, r0
   1289c:	add	r0, sp, #64	; 0x40
   128a0:	bl	112d4 <strlen@plt>
   128a4:	add	r4, r4, r0
   128a8:	add	r4, r4, #4
   128ac:	mov	r0, r4
   128b0:	bl	197ac <argp_parse@@Base+0x1658>
   128b4:	add	r3, sp, #16
   128b8:	movw	r2, #47520	; 0xb9a0
   128bc:	movt	r2, #1
   128c0:	mov	r1, r4
   128c4:	str	r3, [sp]
   128c8:	add	r3, sp, #64	; 0x40
   128cc:	mov	r5, r0
   128d0:	bl	11304 <snprintf@plt>
   128d4:	mov	r0, r5
   128d8:	add	sp, sp, #324	; 0x144
   128dc:	ldrd	r4, [sp]
   128e0:	add	sp, sp, #8
   128e4:	pop	{pc}		; (ldr pc, [sp], #4)
   128e8:	add	r0, sp, #16
   128ec:	bl	19bfc <argp_parse@@Base+0x1aa8>
   128f0:	mov	r5, r0
   128f4:	b	128d4 <__assert_fail@plt+0x1498>
   128f8:	cmn	r3, #11
   128fc:	beq	12940 <__assert_fail@plt+0x1504>
   12900:	bl	1116c <gai_strerror@plt>
   12904:	mov	r2, r0
   12908:	movw	r3, #54824	; 0xd628
   1290c:	movt	r3, #2
   12910:	movw	r1, #47488	; 0xb980
   12914:	movt	r1, #1
   12918:	ldr	r0, [r3]
   1291c:	bl	112ec <fprintf@plt>
   12920:	movw	r0, #47512	; 0xb998
   12924:	movt	r0, #1
   12928:	bl	19bfc <argp_parse@@Base+0x1aa8>
   1292c:	mov	r5, r0
   12930:	b	128d4 <__assert_fail@plt+0x1498>
   12934:	bl	19bfc <argp_parse@@Base+0x1aa8>
   12938:	mov	r5, r0
   1293c:	b	128d4 <__assert_fail@plt+0x1498>
   12940:	bl	112f8 <__errno_location@plt>
   12944:	ldr	r0, [r0]
   12948:	bl	11274 <strerror@plt>
   1294c:	mov	r2, r0
   12950:	b	12908 <__assert_fail@plt+0x14cc>
   12954:	movw	r3, #54984	; 0xd6c8
   12958:	movt	r3, #2
   1295c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12960:	ldr	r3, [r3]
   12964:	strd	r6, [sp, #8]
   12968:	str	lr, [sp, #16]
   1296c:	sub	sp, sp, #20
   12970:	str	r0, [sp, #12]
   12974:	tst	r3, #4
   12978:	bne	129f4 <__assert_fail@plt+0x15b8>
   1297c:	mov	r2, #2
   12980:	mov	r1, #4
   12984:	add	r0, sp, #12
   12988:	bl	111d8 <gethostbyaddr@plt>
   1298c:	subs	r6, r0, #0
   12990:	ldr	r0, [sp, #12]
   12994:	beq	129f4 <__assert_fail@plt+0x15b8>
   12998:	bl	111b4 <inet_ntoa@plt>
   1299c:	mov	r7, r0
   129a0:	bl	112d4 <strlen@plt>
   129a4:	mov	r4, r0
   129a8:	ldr	r0, [r6]
   129ac:	cmp	r0, #0
   129b0:	addeq	r4, r4, #1
   129b4:	beq	129c4 <__assert_fail@plt+0x1588>
   129b8:	bl	112d4 <strlen@plt>
   129bc:	add	r4, r4, #5
   129c0:	add	r4, r4, r0
   129c4:	mov	r0, r4
   129c8:	bl	197ac <argp_parse@@Base+0x1658>
   129cc:	ldr	r3, [r6]
   129d0:	mov	r5, r0
   129d4:	cmp	r3, #0
   129d8:	beq	12a18 <__assert_fail@plt+0x15dc>
   129dc:	mov	r1, r4
   129e0:	movw	r2, #47520	; 0xb9a0
   129e4:	movt	r2, #1
   129e8:	str	r7, [sp]
   129ec:	bl	11304 <snprintf@plt>
   129f0:	b	12a00 <__assert_fail@plt+0x15c4>
   129f4:	bl	111b4 <inet_ntoa@plt>
   129f8:	bl	19bfc <argp_parse@@Base+0x1aa8>
   129fc:	mov	r5, r0
   12a00:	mov	r0, r5
   12a04:	add	sp, sp, #20
   12a08:	ldrd	r4, [sp]
   12a0c:	ldrd	r6, [sp, #8]
   12a10:	add	sp, sp, #16
   12a14:	pop	{pc}		; (ldr pc, [sp], #4)
   12a18:	mov	r3, r7
   12a1c:	mov	r1, r4
   12a20:	movw	r2, #46064	; 0xb3f0
   12a24:	movt	r2, #1
   12a28:	bl	11304 <snprintf@plt>
   12a2c:	b	12a00 <__assert_fail@plt+0x15c4>
   12a30:	str	r4, [sp, #-24]!	; 0xffffffe8
   12a34:	movw	r4, #54992	; 0xd6d0
   12a38:	movt	r4, #2
   12a3c:	strd	r6, [sp, #4]
   12a40:	strd	r8, [sp, #12]
   12a44:	str	lr, [sp, #20]
   12a48:	vpush	{d8}
   12a4c:	sub	sp, sp, #24
   12a50:	bl	121e0 <__assert_fail@plt+0xda4>
   12a54:	ldr	r3, [r4]
   12a58:	ldr	r0, [r3, #116]	; 0x74
   12a5c:	cmp	r0, #0
   12a60:	beq	12a78 <__assert_fail@plt+0x163c>
   12a64:	movw	r2, #53564	; 0xd13c
   12a68:	movt	r2, #2
   12a6c:	ldr	r2, [r2]
   12a70:	cmp	r2, #7
   12a74:	bhi	12a9c <__assert_fail@plt+0x1660>
   12a78:	clz	r0, r0
   12a7c:	lsr	r0, r0, #5
   12a80:	add	sp, sp, #24
   12a84:	vpop	{d8}
   12a88:	ldr	r4, [sp]
   12a8c:	ldrd	r6, [sp, #4]
   12a90:	ldrd	r8, [sp, #12]
   12a94:	add	sp, sp, #20
   12a98:	pop	{pc}		; (ldr pc, [sp], #4)
   12a9c:	ldr	r2, [r3, #120]	; 0x78
   12aa0:	ldr	r3, [r3, #68]	; 0x44
   12aa4:	vldr	d1, [pc, #84]	; 12b00 <__assert_fail@plt+0x16c4>
   12aa8:	add	r0, r0, r2
   12aac:	vmov	s15, r0
   12ab0:	ldrd	r8, [r3]
   12ab4:	vldr	d5, [r3, #16]
   12ab8:	vldr	d6, [r3, #24]
   12abc:	ldrd	r6, [r3, #8]
   12ac0:	vcvt.f64.u32	d7, s15
   12ac4:	vdiv.f64	d8, d5, d7
   12ac8:	vdiv.f64	d0, d6, d7
   12acc:	vmls.f64	d0, d8, d8
   12ad0:	bl	12568 <__assert_fail@plt+0x112c>
   12ad4:	mov	r3, r9
   12ad8:	mov	r2, r8
   12adc:	vstr	d8, [sp]
   12ae0:	movw	r0, #47528	; 0xb9a8
   12ae4:	movt	r0, #1
   12ae8:	strd	r6, [sp, #8]
   12aec:	vstr	d0, [sp, #16]
   12af0:	bl	11118 <printf@plt>
   12af4:	ldr	r3, [r4]
   12af8:	ldr	r0, [r3, #116]	; 0x74
   12afc:	b	12a78 <__assert_fail@plt+0x163c>
   12b00:	rscsle	sl, r1, #252, 18	; 0x3f0000
   12b04:	svccc	0x0040624d
   12b08:	movw	r3, #54984	; 0xd6c8
   12b0c:	movt	r3, #2
   12b10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b14:	ldrb	r5, [r0, #8]
   12b18:	mov	r4, r0
   12b1c:	ldr	r3, [r3]
   12b20:	strd	r6, [sp, #8]
   12b24:	add	r6, r0, #8
   12b28:	add	r7, r0, #28
   12b2c:	strd	r8, [sp, #16]
   12b30:	and	r5, r5, #15
   12b34:	strd	sl, [sp, #24]
   12b38:	lsl	r5, r5, #2
   12b3c:	str	lr, [sp, #32]
   12b40:	sub	sp, sp, #4
   12b44:	tst	r3, #32
   12b48:	bne	12c8c <__assert_fail@plt+0x1850>
   12b4c:	movw	r0, #47608	; 0xb9f8
   12b50:	movt	r0, #1
   12b54:	bl	11250 <puts@plt>
   12b58:	ldrb	r1, [r4, #8]
   12b5c:	movw	r0, #47668	; 0xba34
   12b60:	movt	r0, #1
   12b64:	ldrb	r3, [r4, #9]
   12b68:	and	r2, r1, #15
   12b6c:	lsr	r1, r1, #4
   12b70:	bl	11118 <printf@plt>
   12b74:	ldrh	r1, [r4, #10]
   12b78:	cmp	r1, #8192	; 0x2000
   12b7c:	bls	12b88 <__assert_fail@plt+0x174c>
   12b80:	rev16	r1, r1
   12b84:	uxth	r1, r1
   12b88:	ldrh	r2, [r4, #12]
   12b8c:	movw	r0, #47684	; 0xba44
   12b90:	movt	r0, #1
   12b94:	rev16	r2, r2
   12b98:	uxth	r2, r2
   12b9c:	bl	11118 <printf@plt>
   12ba0:	ldrh	r1, [r4, #14]
   12ba4:	movw	r0, #47696	; 0xba50
   12ba8:	movt	r0, #1
   12bac:	rev16	r1, r1
   12bb0:	uxth	r1, r1
   12bb4:	ubfx	r2, r1, #0, #13
   12bb8:	lsr	r1, r1, #13
   12bbc:	bl	11118 <printf@plt>
   12bc0:	ldrh	r3, [r4, #18]
   12bc4:	movw	r0, #47708	; 0xba5c
   12bc8:	movt	r0, #1
   12bcc:	ldrb	r2, [r4, #17]
   12bd0:	ldrb	r1, [r4, #16]
   12bd4:	rev16	r3, r3
   12bd8:	uxth	r3, r3
   12bdc:	bl	11118 <printf@plt>
   12be0:	ldr	r0, [r6, #12]
   12be4:	bl	111b4 <inet_ntoa@plt>
   12be8:	mov	r1, r0
   12bec:	movw	r0, #47728	; 0xba70
   12bf0:	movt	r0, #1
   12bf4:	bl	11118 <printf@plt>
   12bf8:	ldr	r0, [r6, #16]
   12bfc:	bl	111b4 <inet_ntoa@plt>
   12c00:	mov	r1, r0
   12c04:	movw	r0, #47728	; 0xba70
   12c08:	movt	r0, #1
   12c0c:	bl	11118 <printf@plt>
   12c10:	cmp	r5, #20
   12c14:	ble	12c3c <__assert_fail@plt+0x1800>
   12c18:	add	r5, r5, #8
   12c1c:	movw	r8, #47736	; 0xba78
   12c20:	movt	r8, #1
   12c24:	add	r5, r4, r5
   12c28:	ldrb	r1, [r7], #1
   12c2c:	mov	r0, r8
   12c30:	bl	11118 <printf@plt>
   12c34:	cmp	r7, r5
   12c38:	bne	12c28 <__assert_fail@plt+0x17ec>
   12c3c:	mov	r0, #10
   12c40:	bl	11334 <putchar@plt>
   12c44:	ldrb	r2, [r4, #8]
   12c48:	ldrb	r1, [r4, #17]
   12c4c:	and	r2, r2, #15
   12c50:	lsl	ip, r2, #2
   12c54:	cmp	r1, #6
   12c58:	add	r5, r6, ip
   12c5c:	beq	12cf8 <__assert_fail@plt+0x18bc>
   12c60:	cmp	r1, #17
   12c64:	beq	12d38 <__assert_fail@plt+0x18fc>
   12c68:	cmp	r1, #1
   12c6c:	beq	12d48 <__assert_fail@plt+0x190c>
   12c70:	add	sp, sp, #4
   12c74:	ldrd	r4, [sp]
   12c78:	ldrd	r6, [sp, #8]
   12c7c:	ldrd	r8, [sp, #16]
   12c80:	ldrd	sl, [sp, #24]
   12c84:	add	sp, sp, #32
   12c88:	pop	{pc}		; (ldr pc, [sp], #4)
   12c8c:	movw	r0, #47584	; 0xb9e0
   12c90:	movt	r0, #1
   12c94:	bl	11118 <printf@plt>
   12c98:	movw	sl, #47600	; 0xb9f0
   12c9c:	movt	sl, #1
   12ca0:	ldrb	r1, [r4, #8]
   12ca4:	movw	r2, #52256	; 0xcc20
   12ca8:	movt	r2, #1
   12cac:	movw	r9, #46160	; 0xb450
   12cb0:	movt	r9, #1
   12cb4:	mov	fp, r6
   12cb8:	mov	r8, #0
   12cbc:	b	12cd8 <__assert_fail@plt+0x189c>
   12cc0:	ldrb	r1, [fp, #1]!
   12cc4:	tst	r8, #1
   12cc8:	movw	r3, #52256	; 0xcc20
   12ccc:	movt	r3, #1
   12cd0:	movne	r2, r9
   12cd4:	moveq	r2, r3
   12cd8:	add	r8, r8, #1
   12cdc:	mov	r0, sl
   12ce0:	bl	11118 <printf@plt>
   12ce4:	cmp	r8, #20
   12ce8:	bne	12cc0 <__assert_fail@plt+0x1884>
   12cec:	mov	r0, #10
   12cf0:	bl	11334 <putchar@plt>
   12cf4:	b	12b4c <__assert_fail@plt+0x1710>
   12cf8:	ldrb	ip, [r6, r2, lsl #2]
   12cfc:	movw	r0, #47744	; 0xba80
   12d00:	movt	r0, #1
   12d04:	ldrb	r1, [r5, #1]
   12d08:	ldrb	r2, [r5, #2]
   12d0c:	ldrb	r3, [r5, #3]
   12d10:	add	r1, r1, ip, lsl #8
   12d14:	add	r2, r3, r2, lsl #8
   12d18:	add	sp, sp, #4
   12d1c:	ldrd	r4, [sp]
   12d20:	ldrd	r6, [sp, #8]
   12d24:	ldrd	r8, [sp, #16]
   12d28:	ldrd	sl, [sp, #24]
   12d2c:	ldr	lr, [sp, #32]
   12d30:	add	sp, sp, #36	; 0x24
   12d34:	b	11118 <printf@plt>
   12d38:	movw	r0, #47788	; 0xbaac
   12d3c:	movt	r0, #1
   12d40:	ldrb	ip, [r6, r2, lsl #2]
   12d44:	b	12d04 <__assert_fail@plt+0x18c8>
   12d48:	ldrh	r3, [r4, #10]
   12d4c:	movw	r0, #47832	; 0xbad8
   12d50:	movt	r0, #1
   12d54:	ldrb	r4, [r6, r2, lsl #2]
   12d58:	ldrb	r2, [r5, #1]
   12d5c:	rev16	r3, r3
   12d60:	uxth	r3, r3
   12d64:	sub	r3, r3, ip
   12d68:	mov	r1, r4
   12d6c:	bl	11118 <printf@plt>
   12d70:	tst	r4, #247	; 0xf7
   12d74:	beq	12d9c <__assert_fail@plt+0x1960>
   12d78:	mov	r0, #10
   12d7c:	add	sp, sp, #4
   12d80:	ldrd	r4, [sp]
   12d84:	ldrd	r6, [sp, #8]
   12d88:	ldrd	r8, [sp, #16]
   12d8c:	ldrd	sl, [sp, #24]
   12d90:	ldr	lr, [sp, #32]
   12d94:	add	sp, sp, #36	; 0x24
   12d98:	b	11334 <putchar@plt>
   12d9c:	ldrb	ip, [r5, #6]
   12da0:	movw	r0, #47864	; 0xbaf8
   12da4:	movt	r0, #1
   12da8:	ldrb	r2, [r5, #7]
   12dac:	ldrb	r1, [r5, #4]
   12db0:	ldrb	r3, [r5, #5]
   12db4:	add	r2, r2, ip, lsl #8
   12db8:	add	r1, r3, r1, lsl #8
   12dbc:	bl	11118 <printf@plt>
   12dc0:	b	12d78 <__assert_fail@plt+0x193c>
   12dc4:	strd	r4, [sp, #-16]!
   12dc8:	mov	r4, r0
   12dcc:	mov	r5, r1
   12dd0:	ldr	r0, [r0, #4]
   12dd4:	str	r6, [sp, #8]
   12dd8:	str	lr, [sp, #12]
   12ddc:	bl	111b4 <inet_ntoa@plt>
   12de0:	mov	r1, r0
   12de4:	movw	r0, #47888	; 0xbb10
   12de8:	movt	r0, #1
   12dec:	bl	11118 <printf@plt>
   12df0:	mov	r1, r5
   12df4:	mov	r0, r4
   12df8:	ldrd	r4, [sp]
   12dfc:	ldr	r6, [sp, #8]
   12e00:	ldr	lr, [sp, #12]
   12e04:	add	sp, sp, #16
   12e08:	b	12b08 <__assert_fail@plt+0x16cc>
   12e0c:	movw	r3, #54272	; 0xd400
   12e10:	movt	r3, #2
   12e14:	str	r4, [sp, #-8]!
   12e18:	mov	r4, r0
   12e1c:	add	r0, r3, #240	; 0xf0
   12e20:	str	lr, [sp, #4]
   12e24:	ldrb	ip, [r4]
   12e28:	ldrb	r2, [r4, #1]
   12e2c:	b	12e3c <__assert_fail@plt+0x1a00>
   12e30:	add	r3, r3, #12
   12e34:	cmp	r3, r0
   12e38:	beq	12e60 <__assert_fail@plt+0x1a24>
   12e3c:	ldr	lr, [r3]
   12e40:	cmp	ip, lr
   12e44:	bne	12e30 <__assert_fail@plt+0x19f4>
   12e48:	ldr	lr, [r3, #4]
   12e4c:	cmp	r2, lr
   12e50:	bne	12e30 <__assert_fail@plt+0x19f4>
   12e54:	ldr	r0, [r3, #8]
   12e58:	bl	11250 <puts@plt>
   12e5c:	b	12e6c <__assert_fail@plt+0x1a30>
   12e60:	movw	r0, #47924	; 0xbb34
   12e64:	movt	r0, #1
   12e68:	bl	11118 <printf@plt>
   12e6c:	movw	r3, #54984	; 0xd6c8
   12e70:	movt	r3, #2
   12e74:	ldr	r3, [r3]
   12e78:	tst	r3, #32
   12e7c:	bne	12e8c <__assert_fail@plt+0x1a50>
   12e80:	ldr	r4, [sp]
   12e84:	add	sp, sp, #4
   12e88:	pop	{pc}		; (ldr pc, [sp], #4)
   12e8c:	mov	r0, r4
   12e90:	mov	r1, #0
   12e94:	ldr	r4, [sp]
   12e98:	ldr	lr, [sp, #4]
   12e9c:	add	sp, sp, #8
   12ea0:	b	12b08 <__assert_fail@plt+0x16cc>
   12ea4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12ea8:	movw	r5, #54984	; 0xd6c8
   12eac:	movt	r5, #2
   12eb0:	ldr	r3, [r5]
   12eb4:	strd	r6, [sp, #8]
   12eb8:	mov	r7, r0
   12ebc:	strd	r8, [sp, #16]
   12ec0:	str	lr, [sp, #24]
   12ec4:	sub	sp, sp, #84	; 0x54
   12ec8:	and	r3, r3, #3
   12ecc:	cmp	r3, #3
   12ed0:	beq	130b8 <__assert_fail@plt+0x1c7c>
   12ed4:	mov	r3, #0
   12ed8:	mov	r2, #0
   12edc:	mov	r8, #0
   12ee0:	movt	r8, #65408	; 0xff80
   12ee4:	movw	r9, #52580	; 0xcd64
   12ee8:	movt	r9, #16845	; 0x41cd
   12eec:	movw	r4, #54992	; 0xd6d0
   12ef0:	movt	r4, #2
   12ef4:	mov	r1, #8
   12ef8:	movw	r6, #53564	; 0xd13c
   12efc:	movt	r6, #2
   12f00:	ldr	r0, [r4]
   12f04:	strd	r8, [sp, #8]
   12f08:	strd	r2, [sp, #16]
   12f0c:	strd	r2, [sp, #24]
   12f10:	strd	r2, [sp, #32]
   12f14:	bl	13e7c <__assert_fail@plt+0x2a40>
   12f18:	ldr	r0, [r4]
   12f1c:	ldr	r1, [r6]
   12f20:	bl	142a0 <__assert_fail@plt+0x2e64>
   12f24:	add	r2, sp, #8
   12f28:	movw	r1, #14500	; 0x38a4
   12f2c:	movt	r1, #1
   12f30:	ldr	r0, [r4]
   12f34:	bl	14294 <__assert_fail@plt+0x2e58>
   12f38:	mov	r1, r7
   12f3c:	ldr	r0, [r4]
   12f40:	bl	142a8 <__assert_fail@plt+0x2e6c>
   12f44:	cmp	r0, #0
   12f48:	bne	13084 <__assert_fail@plt+0x1c48>
   12f4c:	ldr	r3, [r5]
   12f50:	ldr	r7, [r4]
   12f54:	ands	r2, r3, #16
   12f58:	bne	13038 <__assert_fail@plt+0x1bfc>
   12f5c:	tst	r3, #64	; 0x40
   12f60:	bne	12fd8 <__assert_fail@plt+0x1b9c>
   12f64:	ldr	r0, [r7, #28]
   12f68:	ldr	r8, [r7, #52]	; 0x34
   12f6c:	bl	111b4 <inet_ntoa@plt>
   12f70:	mov	r2, r0
   12f74:	movw	r0, #48008	; 0xbb88
   12f78:	movt	r0, #1
   12f7c:	ldr	r3, [r6]
   12f80:	mov	r1, r8
   12f84:	bl	11118 <printf@plt>
   12f88:	ldr	r3, [r5]
   12f8c:	tst	r3, #32
   12f90:	bne	1309c <__assert_fail@plt+0x1c60>
   12f94:	mov	r0, #10
   12f98:	bl	11334 <putchar@plt>
   12f9c:	movw	r1, #10800	; 0x2a30
   12fa0:	movt	r1, #1
   12fa4:	ldr	r0, [r4]
   12fa8:	bl	11e80 <__assert_fail@plt+0xa44>
   12fac:	ldr	r3, [r4]
   12fb0:	mov	r5, r0
   12fb4:	ldr	r0, [r3, #52]	; 0x34
   12fb8:	bl	19138 <argp_parse@@Base+0xfe4>
   12fbc:	mov	r0, r5
   12fc0:	add	sp, sp, #84	; 0x54
   12fc4:	ldrd	r4, [sp]
   12fc8:	ldrd	r6, [sp, #8]
   12fcc:	ldrd	r8, [sp, #16]
   12fd0:	add	sp, sp, #24
   12fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd8:	movw	r3, #54996	; 0xd6d4
   12fdc:	movt	r3, #2
   12fe0:	ldr	r3, [r3]
   12fe4:	ands	r1, r3, #4
   12fe8:	bne	130d0 <__assert_fail@plt+0x1c94>
   12fec:	ands	r3, r3, #2
   12ff0:	bne	1312c <__assert_fail@plt+0x1cf0>
   12ff4:	movw	r2, #10308	; 0x2844
   12ff8:	mov	r0, r3
   12ffc:	mov	ip, #40	; 0x28
   13000:	strh	r2, [sp, #40]	; 0x28
   13004:	str	r3, [sp, #44]	; 0x2c
   13008:	str	r3, [sp, #48]	; 0x30
   1300c:	str	r3, [sp, #52]	; 0x34
   13010:	str	r3, [sp, #56]	; 0x38
   13014:	str	r3, [sp, #60]	; 0x3c
   13018:	str	r3, [sp, #64]	; 0x40
   1301c:	str	r3, [sp, #68]	; 0x44
   13020:	str	r3, [sp, #72]	; 0x48
   13024:	str	r3, [sp, #76]	; 0x4c
   13028:	mov	r1, #5
   1302c:	add	r3, sp, #40	; 0x28
   13030:	strb	r0, [sp, #43]	; 0x2b
   13034:	b	1305c <__assert_fail@plt+0x1c20>
   13038:	mov	r2, #38	; 0x26
   1303c:	mov	r1, #0
   13040:	add	r0, sp, #42	; 0x2a
   13044:	bl	11328 <memset@plt>
   13048:	movw	r2, #9991	; 0x2707
   1304c:	mov	r1, #4
   13050:	add	r3, sp, #40	; 0x28
   13054:	mov	ip, #40	; 0x28
   13058:	strh	r2, [sp, #40]	; 0x28
   1305c:	mov	r2, #4
   13060:	strb	r1, [sp, #42]	; 0x2a
   13064:	mov	r1, #0
   13068:	ldr	r0, [r7]
   1306c:	str	ip, [sp]
   13070:	bl	1110c <setsockopt@plt>
   13074:	cmp	r0, #0
   13078:	blt	13110 <__assert_fail@plt+0x1cd4>
   1307c:	ldr	r7, [r4]
   13080:	b	12f64 <__assert_fail@plt+0x1b28>
   13084:	movw	r2, #47980	; 0xbb6c
   13088:	movt	r2, #1
   1308c:	mov	r1, #0
   13090:	mov	r0, #1
   13094:	bl	11238 <error@plt>
   13098:	b	12f4c <__assert_fail@plt+0x1b10>
   1309c:	ldr	r3, [r4]
   130a0:	movw	r0, #48040	; 0xbba8
   130a4:	movt	r0, #1
   130a8:	ldr	r2, [r3, #60]	; 0x3c
   130ac:	mov	r1, r2
   130b0:	bl	11118 <printf@plt>
   130b4:	b	12f94 <__assert_fail@plt+0x1b58>
   130b8:	movw	r2, #47948	; 0xbb4c
   130bc:	movt	r2, #1
   130c0:	mov	r1, #0
   130c4:	mov	r0, #1
   130c8:	bl	11238 <error@plt>
   130cc:	b	12ed4 <__assert_fail@plt+0x1a98>
   130d0:	mov	r3, #68	; 0x44
   130d4:	mov	r0, #3
   130d8:	strb	r3, [sp, #40]	; 0x28
   130dc:	str	r2, [sp, #44]	; 0x2c
   130e0:	str	r2, [sp, #48]	; 0x30
   130e4:	str	r2, [sp, #52]	; 0x34
   130e8:	str	r2, [sp, #56]	; 0x38
   130ec:	str	r2, [sp, #60]	; 0x3c
   130f0:	str	r2, [sp, #64]	; 0x40
   130f4:	str	r2, [sp, #68]	; 0x44
   130f8:	str	r2, [sp, #72]	; 0x48
   130fc:	str	r2, [sp, #76]	; 0x4c
   13100:	mov	r3, #36	; 0x24
   13104:	mov	ip, r3
   13108:	strb	r3, [sp, #41]	; 0x29
   1310c:	b	13028 <__assert_fail@plt+0x1bec>
   13110:	bl	112f8 <__errno_location@plt>
   13114:	movw	r2, #47996	; 0xbb7c
   13118:	movt	r2, #1
   1311c:	ldr	r1, [r0]
   13120:	mov	r0, #1
   13124:	bl	11238 <error@plt>
   13128:	b	1307c <__assert_fail@plt+0x1c40>
   1312c:	mov	r3, #68	; 0x44
   13130:	mov	r0, #1
   13134:	strb	r3, [sp, #40]	; 0x28
   13138:	str	r1, [sp, #44]	; 0x2c
   1313c:	str	r1, [sp, #48]	; 0x30
   13140:	str	r1, [sp, #52]	; 0x34
   13144:	str	r1, [sp, #56]	; 0x38
   13148:	str	r1, [sp, #60]	; 0x3c
   1314c:	str	r1, [sp, #64]	; 0x40
   13150:	str	r1, [sp, #68]	; 0x44
   13154:	str	r1, [sp, #72]	; 0x48
   13158:	str	r1, [sp, #76]	; 0x4c
   1315c:	b	13100 <__assert_fail@plt+0x1cc4>
   13160:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13164:	strd	r6, [sp, #8]
   13168:	mov	r6, r0
   1316c:	mov	r7, r3
   13170:	strd	r8, [sp, #16]
   13174:	mov	r8, r1
   13178:	mov	r1, #0
   1317c:	strd	sl, [sp, #24]
   13180:	str	lr, [sp, #32]
   13184:	vpush	{d8}
   13188:	sub	sp, sp, #52	; 0x34
   1318c:	add	r0, sp, #24
   13190:	ldr	r5, [sp, #104]	; 0x68
   13194:	bl	1122c <gettimeofday@plt>
   13198:	ldr	r3, [sp, #96]	; 0x60
   1319c:	ldrb	r4, [r3]
   131a0:	and	r4, r4, #15
   131a4:	lsl	r4, r4, #2
   131a8:	sub	r5, r5, r4
   131ac:	sub	r3, r5, #8
   131b0:	cmp	r3, #7
   131b4:	bhi	13474 <__assert_fail@plt+0x2038>
   131b8:	vldr	d8, [pc, #896]	; 13540 <__assert_fail@plt+0x2104>
   131bc:	mov	r8, #0
   131c0:	movw	fp, #54984	; 0xd6c8
   131c4:	movt	fp, #2
   131c8:	ldr	r3, [fp]
   131cc:	tst	r3, #8
   131d0:	bne	132d0 <__assert_fail@plt+0x1e94>
   131d4:	tst	r3, #1
   131d8:	bne	132bc <__assert_fail@plt+0x1e80>
   131dc:	ldr	r0, [r7, #4]
   131e0:	bl	111b4 <inet_ntoa@plt>
   131e4:	ldr	r3, [sp, #100]	; 0x64
   131e8:	mov	r2, r0
   131ec:	mov	r1, r5
   131f0:	movw	r0, #48060	; 0xbbbc
   131f4:	movt	r0, #1
   131f8:	ldrh	r3, [r3, #6]
   131fc:	rev16	r3, r3
   13200:	uxth	r3, r3
   13204:	bl	11118 <printf@plt>
   13208:	ldr	r3, [sp, #96]	; 0x60
   1320c:	movw	r0, #48092	; 0xbbdc
   13210:	movt	r0, #1
   13214:	ldrb	r1, [r3, #8]
   13218:	bl	11118 <printf@plt>
   1321c:	cmp	r8, #0
   13220:	bne	1360c <__assert_fail@plt+0x21d0>
   13224:	cmp	r6, #0
   13228:	bne	135fc <__assert_fail@plt+0x21c0>
   1322c:	ldr	r3, [sp, #96]	; 0x60
   13230:	cmp	r4, #20
   13234:	add	r8, r3, #20
   13238:	ble	13468 <__assert_fail@plt+0x202c>
   1323c:	movw	r3, #54872	; 0xd658
   13240:	movt	r3, #2
   13244:	movw	r9, #54828	; 0xd62c
   13248:	movt	r9, #2
   1324c:	str	r3, [sp, #4]
   13250:	b	13280 <__assert_fail@plt+0x1e44>
   13254:	cmp	r1, #0
   13258:	beq	13468 <__assert_fail@plt+0x202c>
   1325c:	cmp	r1, #1
   13260:	bne	132a8 <__assert_fail@plt+0x1e6c>
   13264:	movw	r0, #48248	; 0xbc78
   13268:	movt	r0, #1
   1326c:	sub	r4, r4, #1
   13270:	bl	11118 <printf@plt>
   13274:	cmp	r4, #20
   13278:	add	r8, r8, #1
   1327c:	ble	13468 <__assert_fail@plt+0x202c>
   13280:	ldrb	r1, [r8]
   13284:	cmp	r1, #7
   13288:	beq	13310 <__assert_fail@plt+0x1ed4>
   1328c:	bls	13254 <__assert_fail@plt+0x1e18>
   13290:	cmp	r1, #131	; 0x83
   13294:	beq	134ec <__assert_fail@plt+0x20b0>
   13298:	cmp	r1, #137	; 0x89
   1329c:	beq	1378c <__assert_fail@plt+0x2350>
   132a0:	cmp	r1, #68	; 0x44
   132a4:	beq	132f4 <__assert_fail@plt+0x1eb8>
   132a8:	movw	r0, #48256	; 0xbc80
   132ac:	movt	r0, #1
   132b0:	sub	r4, r4, #1
   132b4:	bl	11118 <printf@plt>
   132b8:	b	13274 <__assert_fail@plt+0x1e38>
   132bc:	movw	r3, #54828	; 0xd62c
   132c0:	movt	r3, #2
   132c4:	mov	r0, #8
   132c8:	ldr	r1, [r3]
   132cc:	bl	113c4 <putc@plt>
   132d0:	mov	r0, #0
   132d4:	add	sp, sp, #52	; 0x34
   132d8:	vpop	{d8}
   132dc:	ldrd	r4, [sp]
   132e0:	ldrd	r6, [sp, #8]
   132e4:	ldrd	r8, [sp, #16]
   132e8:	ldrd	sl, [sp, #24]
   132ec:	add	sp, sp, #32
   132f0:	pop	{pc}		; (ldr pc, [sp], #4)
   132f4:	ldrb	r7, [r8, #1]
   132f8:	add	r3, r8, #2
   132fc:	cmp	r7, #8
   13300:	bgt	13648 <__assert_fail@plt+0x220c>
   13304:	sub	r4, r4, #3
   13308:	mov	r8, r3
   1330c:	b	13274 <__assert_fail@plt+0x1e38>
   13310:	ldrb	r3, [r8, #2]
   13314:	add	r6, r8, #2
   13318:	sub	r5, r4, #2
   1331c:	ldrb	r2, [r8, #1]
   13320:	cmp	r2, r3
   13324:	movlt	r7, r2
   13328:	movge	r7, r3
   1332c:	sub	sl, r7, #4
   13330:	cmp	sl, #0
   13334:	suble	r4, r4, #3
   13338:	movle	r8, r6
   1333c:	ble	13274 <__assert_fail@plt+0x1e38>
   13340:	ldr	r3, [sp, #4]
   13344:	ldr	r3, [r3]
   13348:	cmp	sl, r3
   1334c:	bne	133a8 <__assert_fail@plt+0x1f6c>
   13350:	ldr	r3, [sp, #96]	; 0x60
   13354:	add	r3, r3, #22
   13358:	cmp	r6, r3
   1335c:	bne	133a8 <__assert_fail@plt+0x1f6c>
   13360:	mov	r2, sl
   13364:	ldr	r1, [pc, #484]	; 13550 <__assert_fail@plt+0x2114>
   13368:	mov	r0, r6
   1336c:	bl	111a8 <memcmp@plt>
   13370:	ldr	r3, [fp]
   13374:	and	r3, r3, #1
   13378:	orrs	r3, r3, r0
   1337c:	bne	133a8 <__assert_fail@plt+0x1f6c>
   13380:	movw	r0, #48152	; 0xbc18
   13384:	movt	r0, #1
   13388:	bl	11118 <printf@plt>
   1338c:	subs	r3, r7, #1
   13390:	addmi	r3, r7, #2
   13394:	bic	r8, r3, #3
   13398:	sub	r4, r5, r8
   1339c:	add	r8, r6, r8
   133a0:	sub	r4, r4, #1
   133a4:	b	13274 <__assert_fail@plt+0x1e38>
   133a8:	cmp	sl, #39	; 0x27
   133ac:	ble	1362c <__assert_fail@plt+0x21f0>
   133b0:	ldr	r2, [sp, #4]
   133b4:	mov	r3, #0
   133b8:	str	r3, [r2]
   133bc:	movw	r0, #48168	; 0xbc28
   133c0:	movt	r0, #1
   133c4:	bl	11118 <printf@plt>
   133c8:	sub	r3, r7, #5
   133cc:	movw	sl, #48148	; 0xbc14
   133d0:	movt	sl, #1
   133d4:	bic	r3, r3, #3
   133d8:	add	r3, r3, #6
   133dc:	movw	r5, #48136	; 0xbc08
   133e0:	movt	r5, #1
   133e4:	add	r3, r8, r3
   133e8:	add	r4, r8, r4
   133ec:	add	r7, r8, #42	; 0x2a
   133f0:	str	r3, [sp]
   133f4:	b	13420 <__assert_fail@plt+0x1fe4>
   133f8:	bl	11118 <printf@plt>
   133fc:	ldr	r3, [sp]
   13400:	mov	r0, #10
   13404:	cmp	r3, r6
   13408:	sub	r3, r4, r6
   1340c:	beq	13620 <__assert_fail@plt+0x21e4>
   13410:	cmp	r7, r6
   13414:	beq	135e4 <__assert_fail@plt+0x21a8>
   13418:	ldr	r1, [r9]
   1341c:	bl	113c4 <putc@plt>
   13420:	ldrb	r3, [r6, #1]
   13424:	mov	r0, r5
   13428:	ldrb	r1, [r6, #2]
   1342c:	ldrb	r2, [r6, #3]
   13430:	add	r1, r1, r3, lsl #8
   13434:	ldrb	r3, [r6, #4]!
   13438:	add	r2, r2, r1, lsl #8
   1343c:	adds	r3, r3, r2, lsl #8
   13440:	beq	133f8 <__assert_fail@plt+0x1fbc>
   13444:	rev	r0, r3
   13448:	bl	12954 <__assert_fail@plt+0x1518>
   1344c:	mov	r8, r0
   13450:	mov	r1, r0
   13454:	mov	r0, sl
   13458:	bl	11118 <printf@plt>
   1345c:	mov	r0, r8
   13460:	bl	19138 <argp_parse@@Base+0xfe4>
   13464:	b	133fc <__assert_fail@plt+0x1fc0>
   13468:	mov	r0, #10
   1346c:	bl	11334 <putchar@plt>
   13470:	b	132d0 <__assert_fail@plt+0x1e94>
   13474:	ldr	r3, [sp, #100]	; 0x64
   13478:	add	r0, sp, #24
   1347c:	add	r1, sp, #32
   13480:	ldr	r2, [r3, #8]!
   13484:	ldr	r3, [r3, #4]
   13488:	strd	r2, [sp, #32]
   1348c:	bl	12520 <__assert_fail@plt+0x10e4>
   13490:	vldr	s15, [sp, #28]
   13494:	vldr	d2, [pc, #172]	; 13548 <__assert_fail@plt+0x210c>
   13498:	vldr	d5, [r8]
   1349c:	vcvt.f64.s32	d3, s15
   134a0:	vldr	s15, [sp, #24]
   134a4:	vldr	d6, [r8, #24]
   134a8:	vdiv.f64	d8, d3, d2
   134ac:	vcvt.f64.s32	d4, s15
   134b0:	vldr	d7, [r8, #16]
   134b4:	vmla.f64	d8, d4, d2
   134b8:	vmla.f64	d6, d8, d8
   134bc:	vadd.f64	d7, d7, d8
   134c0:	vcmpe.f64	d5, d8
   134c4:	vstr	d7, [r8, #16]
   134c8:	vldr	d7, [r8, #8]
   134cc:	vmrs	APSR_nzcv, fpscr
   134d0:	vstr	d6, [r8, #24]
   134d4:	vstrgt	d8, [r8]
   134d8:	vcmpe.f64	d7, d8
   134dc:	vmrs	APSR_nzcv, fpscr
   134e0:	vstrmi	d8, [r8, #8]
   134e4:	mov	r8, #1
   134e8:	b	131c0 <__assert_fail@plt+0x1d84>
   134ec:	mov	r1, #76	; 0x4c
   134f0:	movw	r0, #48124	; 0xbbfc
   134f4:	movt	r0, #1
   134f8:	bl	11118 <printf@plt>
   134fc:	ldrb	r5, [r8, #1]
   13500:	add	sl, r8, #2
   13504:	cmp	r5, #4
   13508:	subls	r4, r4, #3
   1350c:	movls	r8, sl
   13510:	bls	13274 <__assert_fail@plt+0x1e38>
   13514:	sub	r3, r5, #5
   13518:	mov	r5, r8
   1351c:	bic	r7, r3, #3
   13520:	movw	r8, #48148	; 0xbc14
   13524:	movt	r8, #1
   13528:	movw	r6, #48136	; 0xbc08
   1352c:	movt	r6, #1
   13530:	add	r7, r5, r7
   13534:	str	r3, [sp]
   13538:	str	r4, [sp, #8]
   1353c:	b	13570 <__assert_fail@plt+0x2134>
	...
   1354c:	addmi	r4, pc, r0
   13550:	andeq	sp, r2, ip, asr r6
   13554:	bl	11118 <printf@plt>
   13558:	cmp	r7, r5
   1355c:	mov	r0, #10
   13560:	beq	135c0 <__assert_fail@plt+0x2184>
   13564:	ldr	r1, [r9]
   13568:	add	r5, r5, #4
   1356c:	bl	113c4 <putc@plt>
   13570:	ldrb	r2, [r5, #3]
   13574:	mov	r0, r6
   13578:	ldrb	r1, [r5, #4]
   1357c:	ldrb	r3, [r5, #5]
   13580:	add	r1, r1, r2, lsl #8
   13584:	ldrb	r2, [r5, #6]
   13588:	add	r3, r3, r1, lsl #8
   1358c:	adds	r3, r2, r3, lsl #8
   13590:	beq	13554 <__assert_fail@plt+0x2118>
   13594:	rev	r0, r3
   13598:	bl	12954 <__assert_fail@plt+0x1518>
   1359c:	mov	r1, r0
   135a0:	mov	r4, r0
   135a4:	mov	r0, r8
   135a8:	bl	11118 <printf@plt>
   135ac:	mov	r0, r4
   135b0:	bl	19138 <argp_parse@@Base+0xfe4>
   135b4:	cmp	r7, r5
   135b8:	mov	r0, #10
   135bc:	bne	13564 <__assert_fail@plt+0x2128>
   135c0:	ldr	r3, [sp]
   135c4:	ldr	r4, [sp, #8]
   135c8:	lsr	r8, r3, #2
   135cc:	sub	r4, r4, #6
   135d0:	sub	r4, r4, r8, lsl #2
   135d4:	add	r8, r8, #1
   135d8:	add	r8, sl, r8, lsl #2
   135dc:	sub	r4, r4, #1
   135e0:	b	13274 <__assert_fail@plt+0x1e38>
   135e4:	movw	r0, #48176	; 0xbc30
   135e8:	movt	r0, #1
   135ec:	sub	r4, r3, #1
   135f0:	mov	r8, r7
   135f4:	bl	11118 <printf@plt>
   135f8:	b	13274 <__assert_fail@plt+0x1e38>
   135fc:	movw	r0, #48116	; 0xbbf4
   13600:	movt	r0, #1
   13604:	bl	11118 <printf@plt>
   13608:	b	1322c <__assert_fail@plt+0x1df0>
   1360c:	movw	r0, #48100	; 0xbbe4
   13610:	movt	r0, #1
   13614:	vmov	r2, r3, d8
   13618:	bl	11118 <printf@plt>
   1361c:	b	13224 <__assert_fail@plt+0x1de8>
   13620:	sub	r4, r3, #1
   13624:	ldr	r8, [sp]
   13628:	b	13274 <__assert_fail@plt+0x1e38>
   1362c:	ldr	r3, [sp, #4]
   13630:	mov	r2, sl
   13634:	mov	r1, r6
   13638:	ldr	r0, [pc, #-240]	; 13550 <__assert_fail@plt+0x2114>
   1363c:	str	sl, [r3]
   13640:	bl	11148 <memmove@plt>
   13644:	b	133bc <__assert_fail@plt+0x1f80>
   13648:	ldrb	r3, [r8, #3]
   1364c:	movw	r0, #48196	; 0xbc44
   13650:	movt	r0, #1
   13654:	movw	r5, #48204	; 0xbc4c
   13658:	movt	r5, #1
   1365c:	ldrb	sl, [r8, #2]
   13660:	add	r4, r8, r4
   13664:	add	r6, r8, #4
   13668:	str	r3, [sp, #16]
   1366c:	bl	11118 <printf@plt>
   13670:	ldr	r3, [sp, #16]
   13674:	movw	r2, #48212	; 0xbc54
   13678:	movt	r2, #1
   1367c:	str	r5, [sp, #8]
   13680:	str	r2, [sp, #12]
   13684:	and	r3, r3, #15
   13688:	str	r3, [sp]
   1368c:	mov	r3, #5
   13690:	b	136b8 <__assert_fail@plt+0x227c>
   13694:	mov	r0, #10
   13698:	ldr	r1, [r9]
   1369c:	bl	113c4 <putc@plt>
   136a0:	cmp	r7, sl
   136a4:	mov	r3, r8
   136a8:	movlt	r2, r7
   136ac:	movge	r2, sl
   136b0:	cmp	r2, r8
   136b4:	ble	1375c <__assert_fail@plt+0x2320>
   136b8:	ldr	r2, [sp]
   136bc:	add	r0, sp, #32
   136c0:	mov	r1, #16
   136c4:	add	lr, r3, #3
   136c8:	add	r8, r3, #4
   136cc:	ldr	ip, [r6], #4
   136d0:	cmp	r2, #0
   136d4:	sub	r5, r4, r6
   136d8:	rev	r2, ip
   136dc:	beq	136fc <__assert_fail@plt+0x22c0>
   136e0:	cmp	r3, #0
   136e4:	movlt	r3, lr
   136e8:	asrs	r3, r3, #2
   136ec:	and	r3, r3, #1
   136f0:	rsbmi	r3, r3, #0
   136f4:	cmp	r3, #1
   136f8:	beq	1372c <__assert_fail@plt+0x22f0>
   136fc:	bl	125ec <__assert_fail@plt+0x11b0>
   13700:	mov	r1, r0
   13704:	ldr	r0, [sp, #8]
   13708:	bl	11118 <printf@plt>
   1370c:	ldr	r3, [fp]
   13710:	tst	r3, #32
   13714:	beq	13694 <__assert_fail@plt+0x2258>
   13718:	ldr	r1, [r6, #-4]
   1371c:	ldr	r0, [sp, #12]
   13720:	rev	r1, r1
   13724:	bl	11118 <printf@plt>
   13728:	b	13694 <__assert_fail@plt+0x2258>
   1372c:	mov	r0, ip
   13730:	bl	12954 <__assert_fail@plt+0x1518>
   13734:	mov	r3, r0
   13738:	mov	r1, r0
   1373c:	movw	r0, #48148	; 0xbc14
   13740:	movt	r0, #1
   13744:	str	r3, [sp, #20]
   13748:	bl	11118 <printf@plt>
   1374c:	ldr	r3, [sp, #20]
   13750:	mov	r0, r3
   13754:	bl	19138 <argp_parse@@Base+0xfe4>
   13758:	b	136a0 <__assert_fail@plt+0x2264>
   1375c:	ldr	r3, [sp, #16]
   13760:	sub	r4, r5, #1
   13764:	tst	r3, #240	; 0xf0
   13768:	moveq	r8, r6
   1376c:	beq	13274 <__assert_fail@plt+0x1e38>
   13770:	ldr	r3, [sp, #16]
   13774:	movw	r0, #48224	; 0xbc60
   13778:	movt	r0, #1
   1377c:	mov	r8, r6
   13780:	lsr	r1, r3, #4
   13784:	bl	11118 <printf@plt>
   13788:	b	13274 <__assert_fail@plt+0x1e38>
   1378c:	mov	r1, #83	; 0x53
   13790:	b	134f0 <__assert_fail@plt+0x20b4>
   13794:	movw	ip, #54984	; 0xd6c8
   13798:	movt	ip, #2
   1379c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   137a0:	ldr	ip, [ip]
   137a4:	strd	r6, [sp, #8]
   137a8:	str	r8, [sp, #16]
   137ac:	str	lr, [sp, #20]
   137b0:	tst	ip, #32
   137b4:	bne	137d4 <__assert_fail@plt+0x2398>
   137b8:	movw	ip, #54992	; 0xd6d0
   137bc:	movt	ip, #2
   137c0:	ldr	lr, [r2, #24]
   137c4:	ldr	ip, [ip]
   137c8:	ldr	ip, [ip, #28]
   137cc:	cmp	lr, ip
   137d0:	bne	13850 <__assert_fail@plt+0x2414>
   137d4:	ldrb	r7, [r1]
   137d8:	mov	r1, #16
   137dc:	mov	r6, r3
   137e0:	mov	r5, r2
   137e4:	bl	1281c <__assert_fail@plt+0x13e0>
   137e8:	mov	r2, r0
   137ec:	mov	r8, r0
   137f0:	ldr	r4, [pc, #168]	; 138a0 <__assert_fail@plt+0x2464>
   137f4:	movw	r0, #48276	; 0xbc94
   137f8:	movt	r0, #1
   137fc:	and	r7, r7, #15
   13800:	sub	r1, r6, r7, lsl #2
   13804:	bl	11118 <printf@plt>
   13808:	mov	r0, r8
   1380c:	bl	19138 <argp_parse@@Base+0xfe4>
   13810:	ldrb	r1, [r5]
   13814:	add	r0, r4, #240	; 0xf0
   13818:	ldr	r3, [r4]
   1381c:	cmp	r3, r1
   13820:	beq	13864 <__assert_fail@plt+0x2428>
   13824:	add	r4, r4, #16
   13828:	cmp	r4, r0
   1382c:	bne	13818 <__assert_fail@plt+0x23dc>
   13830:	movw	r0, #48296	; 0xbca8
   13834:	movt	r0, #1
   13838:	ldrd	r4, [sp]
   1383c:	ldrd	r6, [sp, #8]
   13840:	ldr	r8, [sp, #16]
   13844:	ldr	lr, [sp, #20]
   13848:	add	sp, sp, #24
   1384c:	b	11118 <printf@plt>
   13850:	ldrd	r4, [sp]
   13854:	ldrd	r6, [sp, #8]
   13858:	ldr	r8, [sp, #16]
   1385c:	add	sp, sp, #20
   13860:	pop	{pc}		; (ldr pc, [sp], #4)
   13864:	ldr	r0, [r4, #4]
   13868:	cmp	r0, #0
   1386c:	beq	13874 <__assert_fail@plt+0x2438>
   13870:	bl	11250 <puts@plt>
   13874:	ldr	r3, [r4, #8]
   13878:	cmp	r3, #0
   1387c:	beq	13850 <__assert_fail@plt+0x2414>
   13880:	mov	r0, r5
   13884:	ldrd	r6, [sp, #8]
   13888:	ldr	r1, [r4, #12]
   1388c:	ldrd	r4, [sp]
   13890:	ldr	r8, [sp, #16]
   13894:	ldr	lr, [sp, #20]
   13898:	add	sp, sp, #24
   1389c:	bx	r3
   138a0:	strdeq	sp, [r2], -r0
   138a4:	subs	ip, r0, #0
   138a8:	blt	13908 <__assert_fail@plt+0x24cc>
   138ac:	cmp	ip, #1
   138b0:	push	{lr}		; (str lr, [sp, #-4]!)
   138b4:	sub	sp, sp, #20
   138b8:	ble	138e0 <__assert_fail@plt+0x24a4>
   138bc:	cmp	ip, #2
   138c0:	bne	138d4 <__assert_fail@plt+0x2498>
   138c4:	add	r1, sp, #24
   138c8:	mov	r0, r3
   138cc:	ldm	r1, {r1, r2, r3}
   138d0:	bl	13794 <__assert_fail@plt+0x2358>
   138d4:	mov	r0, #0
   138d8:	add	sp, sp, #20
   138dc:	pop	{pc}		; (ldr pc, [sp], #4)
   138e0:	ldr	ip, [sp, #24]
   138e4:	str	ip, [sp]
   138e8:	ldr	ip, [sp, #28]
   138ec:	str	ip, [sp, #4]
   138f0:	ldr	ip, [sp, #32]
   138f4:	str	ip, [sp, #8]
   138f8:	bl	13160 <__assert_fail@plt+0x1d24>
   138fc:	mov	r0, #0
   13900:	add	sp, sp, #20
   13904:	pop	{pc}		; (ldr pc, [sp], #4)
   13908:	mov	r0, #0
   1390c:	bx	lr
   13910:	mov	r0, #0
   13914:	bx	lr
   13918:	str	r4, [sp, #-8]!
   1391c:	subs	r4, r0, #0
   13920:	str	lr, [sp, #4]
   13924:	blt	13948 <__assert_fail@plt+0x250c>
   13928:	cmp	r4, #1
   1392c:	ble	13958 <__assert_fail@plt+0x251c>
   13930:	cmp	r4, #2
   13934:	bne	13948 <__assert_fail@plt+0x250c>
   13938:	add	r1, sp, #8
   1393c:	mov	r0, r3
   13940:	ldm	r1, {r1, r2, r3}
   13944:	bl	13794 <__assert_fail@plt+0x2358>
   13948:	ldr	r4, [sp]
   1394c:	add	sp, sp, #4
   13950:	mov	r0, #0
   13954:	pop	{pc}		; (ldr pc, [sp], #4)
   13958:	ldr	r0, [r3, #4]
   1395c:	bl	111b4 <inet_ntoa@plt>
   13960:	ldr	r3, [sp, #12]
   13964:	mov	r2, r0
   13968:	movw	r0, #48060	; 0xbbbc
   1396c:	movt	r0, #1
   13970:	ldr	r1, [sp, #16]
   13974:	ldrh	r3, [r3, #6]
   13978:	rev16	r3, r3
   1397c:	uxth	r3, r3
   13980:	bl	11118 <printf@plt>
   13984:	cmp	r4, #1
   13988:	beq	139c8 <__assert_fail@plt+0x258c>
   1398c:	mov	r0, #10
   13990:	bl	11334 <putchar@plt>
   13994:	ldr	r3, [sp, #12]
   13998:	ldr	r0, [r3, #8]
   1399c:	bl	111b4 <inet_ntoa@plt>
   139a0:	mov	r1, r0
   139a4:	movw	r0, #49108	; 0xbfd4
   139a8:	movt	r0, #1
   139ac:	bl	11118 <printf@plt>
   139b0:	mov	r0, #10
   139b4:	bl	11334 <putchar@plt>
   139b8:	ldr	r4, [sp]
   139bc:	add	sp, sp, #4
   139c0:	mov	r0, #0
   139c4:	pop	{pc}		; (ldr pc, [sp], #4)
   139c8:	movw	r0, #48116	; 0xbbf4
   139cc:	movt	r0, #1
   139d0:	bl	11118 <printf@plt>
   139d4:	b	1398c <__assert_fail@plt+0x2550>
   139d8:	strd	r4, [sp, #-16]!
   139dc:	movw	r4, #54992	; 0xd6d0
   139e0:	movt	r4, #2
   139e4:	mov	r5, r0
   139e8:	mov	r1, #17
   139ec:	ldr	r0, [r4]
   139f0:	str	r6, [sp, #8]
   139f4:	str	lr, [sp, #12]
   139f8:	bl	13e7c <__assert_fail@plt+0x2a40>
   139fc:	mov	r2, #0
   13a00:	movw	r1, #14616	; 0x3918
   13a04:	movt	r1, #1
   13a08:	ldr	r0, [r4]
   13a0c:	bl	14294 <__assert_fail@plt+0x2e58>
   13a10:	mov	r1, #12
   13a14:	ldr	r0, [r4]
   13a18:	bl	142a0 <__assert_fail@plt+0x2e64>
   13a1c:	mov	r1, #1
   13a20:	ldr	r0, [r4]
   13a24:	bl	12734 <__assert_fail@plt+0x12f8>
   13a28:	mov	r1, r5
   13a2c:	ldr	r0, [r4]
   13a30:	bl	142a8 <__assert_fail@plt+0x2e6c>
   13a34:	cmp	r0, #0
   13a38:	bne	13a80 <__assert_fail@plt+0x2644>
   13a3c:	ldr	r3, [r4]
   13a40:	ldr	r0, [r3, #28]
   13a44:	ldr	r5, [r3, #52]	; 0x34
   13a48:	bl	111b4 <inet_ntoa@plt>
   13a4c:	mov	r2, r0
   13a50:	movw	r0, #49124	; 0xbfe4
   13a54:	movt	r0, #1
   13a58:	mov	r1, r5
   13a5c:	bl	11118 <printf@plt>
   13a60:	movw	r1, #14608	; 0x3910
   13a64:	movt	r1, #1
   13a68:	ldr	r0, [r4]
   13a6c:	ldrd	r4, [sp]
   13a70:	ldr	r6, [sp, #8]
   13a74:	ldr	lr, [sp, #12]
   13a78:	add	sp, sp, #16
   13a7c:	b	11e80 <__assert_fail@plt+0xa44>
   13a80:	movw	r2, #47980	; 0xbb6c
   13a84:	movt	r2, #1
   13a88:	mov	r1, #0
   13a8c:	mov	r0, #1
   13a90:	bl	11238 <error@plt>
   13a94:	b	13a3c <__assert_fail@plt+0x2600>
   13a98:	mov	r0, #0
   13a9c:	bx	lr
   13aa0:	b	121e0 <__assert_fail@plt+0xda4>
   13aa4:	strd	r4, [sp, #-12]!
   13aa8:	subs	r4, r0, #0
   13aac:	str	lr, [sp, #8]
   13ab0:	sub	sp, sp, #20
   13ab4:	ldr	r5, [sp, #36]	; 0x24
   13ab8:	blt	13ae0 <__assert_fail@plt+0x26a4>
   13abc:	cmp	r4, #1
   13ac0:	ble	13af4 <__assert_fail@plt+0x26b8>
   13ac4:	cmp	r4, #2
   13ac8:	bne	13ae0 <__assert_fail@plt+0x26a4>
   13acc:	mov	r0, r3
   13ad0:	mov	r2, r5
   13ad4:	ldr	r1, [sp, #32]
   13ad8:	ldr	r3, [sp, #40]	; 0x28
   13adc:	bl	13794 <__assert_fail@plt+0x2358>
   13ae0:	mov	r0, #0
   13ae4:	add	sp, sp, #20
   13ae8:	ldrd	r4, [sp]
   13aec:	add	sp, sp, #8
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	ldr	r0, [r3, #4]
   13af8:	bl	111b4 <inet_ntoa@plt>
   13afc:	ldrh	r3, [r5, #6]
   13b00:	mov	r2, r0
   13b04:	movw	r0, #48060	; 0xbbbc
   13b08:	movt	r0, #1
   13b0c:	ldr	r1, [sp, #40]	; 0x28
   13b10:	rev16	r3, r3
   13b14:	uxth	r3, r3
   13b18:	bl	11118 <printf@plt>
   13b1c:	cmp	r4, #1
   13b20:	beq	13bf8 <__assert_fail@plt+0x27bc>
   13b24:	mov	r0, #10
   13b28:	bl	11334 <putchar@plt>
   13b2c:	ldr	r2, [r5, #8]
   13b30:	mov	r1, #16
   13b34:	mov	r0, sp
   13b38:	rev	r2, r2
   13b3c:	bl	125ec <__assert_fail@plt+0x11b0>
   13b40:	mov	r1, r0
   13b44:	movw	r0, #49168	; 0xc010
   13b48:	movt	r0, #1
   13b4c:	bl	11118 <printf@plt>
   13b50:	ldr	r2, [r5, #12]
   13b54:	mov	r1, #16
   13b58:	mov	r0, sp
   13b5c:	rev	r2, r2
   13b60:	bl	125ec <__assert_fail@plt+0x11b0>
   13b64:	mov	r1, r0
   13b68:	movw	r0, #49188	; 0xc024
   13b6c:	movt	r0, #1
   13b70:	bl	11118 <printf@plt>
   13b74:	ldr	r2, [r5, #16]
   13b78:	mov	r1, #16
   13b7c:	mov	r0, sp
   13b80:	rev	r2, r2
   13b84:	bl	125ec <__assert_fail@plt+0x11b0>
   13b88:	mov	r1, r0
   13b8c:	movw	r0, #49208	; 0xc038
   13b90:	movt	r0, #1
   13b94:	bl	11118 <printf@plt>
   13b98:	movw	r3, #54984	; 0xd6c8
   13b9c:	movt	r3, #2
   13ba0:	ldr	r3, [r3]
   13ba4:	tst	r3, #32
   13ba8:	beq	13ae0 <__assert_fail@plt+0x26a4>
   13bac:	ldr	r0, [r5, #8]
   13bb0:	rev	r0, r0
   13bb4:	bl	125e0 <__assert_fail@plt+0x11a4>
   13bb8:	cmp	r0, #0
   13bbc:	beq	13ae0 <__assert_fail@plt+0x26a4>
   13bc0:	ldr	r0, [r5, #8]
   13bc4:	rev	r0, r0
   13bc8:	bl	125e0 <__assert_fail@plt+0x11a4>
   13bcc:	cmp	r0, #0
   13bd0:	beq	13ae0 <__assert_fail@plt+0x26a4>
   13bd4:	ldr	r3, [r5, #8]
   13bd8:	movw	r0, #49228	; 0xc04c
   13bdc:	movt	r0, #1
   13be0:	ldr	r1, [r5, #16]
   13be4:	rev	r3, r3
   13be8:	rev	r1, r1
   13bec:	sub	r1, r1, r3
   13bf0:	bl	11118 <printf@plt>
   13bf4:	b	13ae0 <__assert_fail@plt+0x26a4>
   13bf8:	movw	r0, #48116	; 0xbbf4
   13bfc:	movt	r0, #1
   13c00:	bl	11118 <printf@plt>
   13c04:	b	13b24 <__assert_fail@plt+0x26e8>
   13c08:	strd	r4, [sp, #-16]!
   13c0c:	movw	r4, #54992	; 0xd6d0
   13c10:	movt	r4, #2
   13c14:	mov	r5, r0
   13c18:	mov	r1, #13
   13c1c:	ldr	r0, [r4]
   13c20:	str	r6, [sp, #8]
   13c24:	str	lr, [sp, #12]
   13c28:	bl	13e7c <__assert_fail@plt+0x2a40>
   13c2c:	mov	r2, #0
   13c30:	movw	r1, #15012	; 0x3aa4
   13c34:	movt	r1, #1
   13c38:	ldr	r0, [r4]
   13c3c:	bl	14294 <__assert_fail@plt+0x2e58>
   13c40:	mov	r1, #20
   13c44:	ldr	r0, [r4]
   13c48:	bl	142a0 <__assert_fail@plt+0x2e64>
   13c4c:	mov	r1, r5
   13c50:	ldr	r0, [r4]
   13c54:	bl	142a8 <__assert_fail@plt+0x2e6c>
   13c58:	cmp	r0, #0
   13c5c:	bne	13ca4 <__assert_fail@plt+0x2868>
   13c60:	ldr	r3, [r4]
   13c64:	ldr	r0, [r3, #28]
   13c68:	ldr	r5, [r3, #52]	; 0x34
   13c6c:	bl	111b4 <inet_ntoa@plt>
   13c70:	mov	r2, r0
   13c74:	movw	r0, #49248	; 0xc060
   13c78:	movt	r0, #1
   13c7c:	mov	r1, r5
   13c80:	bl	11118 <printf@plt>
   13c84:	movw	r1, #15008	; 0x3aa0
   13c88:	movt	r1, #1
   13c8c:	ldr	r0, [r4]
   13c90:	ldrd	r4, [sp]
   13c94:	ldr	r6, [sp, #8]
   13c98:	ldr	lr, [sp, #12]
   13c9c:	add	sp, sp, #16
   13ca0:	b	11e80 <__assert_fail@plt+0xa44>
   13ca4:	movw	r2, #47980	; 0xbb6c
   13ca8:	movt	r2, #1
   13cac:	mov	r1, #0
   13cb0:	mov	r0, #1
   13cb4:	bl	11238 <error@plt>
   13cb8:	b	13c60 <__assert_fail@plt+0x2824>
   13cbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13cc0:	mov	r5, r1
   13cc4:	strd	r6, [sp, #8]
   13cc8:	mov	r7, r0
   13ccc:	movw	r0, #49292	; 0xc08c
   13cd0:	movt	r0, #1
   13cd4:	strd	r8, [sp, #16]
   13cd8:	str	sl, [sp, #24]
   13cdc:	str	lr, [sp, #28]
   13ce0:	bl	11124 <getprotobyname@plt>
   13ce4:	subs	r4, r0, #0
   13ce8:	beq	13dcc <__assert_fail@plt+0x2990>
   13cec:	mov	r1, #3
   13cf0:	mov	r0, #2
   13cf4:	ldr	r2, [r4, #8]
   13cf8:	bl	1140c <socket@plt>
   13cfc:	subs	r6, r0, #0
   13d00:	bge	13d5c <__assert_fail@plt+0x2920>
   13d04:	bl	112f8 <__errno_location@plt>
   13d08:	ldr	r3, [r0]
   13d0c:	mov	r8, r0
   13d10:	cmp	r3, #13
   13d14:	cmpne	r3, #1
   13d18:	movne	r3, #0
   13d1c:	moveq	r3, #1
   13d20:	movne	r4, r3
   13d24:	bne	13db0 <__assert_fail@plt+0x2974>
   13d28:	mov	r9, #0
   13d2c:	mov	r1, #2
   13d30:	mov	r0, r1
   13d34:	str	r9, [r8]
   13d38:	ldr	r2, [r4, #8]
   13d3c:	bl	1140c <socket@plt>
   13d40:	subs	r6, r0, #0
   13d44:	blt	13dfc <__assert_fail@plt+0x29c0>
   13d48:	movw	r3, #54916	; 0xd684
   13d4c:	movt	r3, #2
   13d50:	ldr	r2, [r3]
   13d54:	add	r2, r2, #1
   13d58:	str	r2, [r3]
   13d5c:	mov	r0, #124	; 0x7c
   13d60:	bl	19cc8 <argp_parse@@Base+0x1b74>
   13d64:	subs	r4, r0, #0
   13d68:	beq	13df0 <__assert_fail@plt+0x29b4>
   13d6c:	add	r3, r4, #12
   13d70:	mov	r2, #112	; 0x70
   13d74:	mov	r1, #0
   13d78:	mov	r0, r3
   13d7c:	bl	11328 <memset@plt>
   13d80:	uxth	r5, r5
   13d84:	mov	r1, #0
   13d88:	strd	r6, [r4]
   13d8c:	mov	lr, #1000	; 0x3e8
   13d90:	mov	ip, #28
   13d94:	mov	r2, #128	; 0x80
   13d98:	str	r1, [r4, #8]
   13d9c:	str	lr, [r4, #20]
   13da0:	str	ip, [r4, #56]	; 0x38
   13da4:	str	r5, [r4, #60]	; 0x3c
   13da8:	str	r2, [r4, #72]	; 0x48
   13dac:	bl	1122c <gettimeofday@plt>
   13db0:	mov	r0, r4
   13db4:	ldrd	r4, [sp]
   13db8:	ldrd	r6, [sp, #8]
   13dbc:	ldrd	r8, [sp, #16]
   13dc0:	ldr	sl, [sp, #24]
   13dc4:	add	sp, sp, #28
   13dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dcc:	movw	r3, #54824	; 0xd628
   13dd0:	movt	r3, #2
   13dd4:	movw	r0, #49300	; 0xc094
   13dd8:	movt	r0, #1
   13ddc:	ldr	r3, [r3]
   13de0:	mov	r2, #29
   13de4:	mov	r1, #1
   13de8:	bl	11220 <fwrite@plt>
   13dec:	b	13db0 <__assert_fail@plt+0x2974>
   13df0:	mov	r0, r6
   13df4:	bl	11430 <close@plt>
   13df8:	b	13db0 <__assert_fail@plt+0x2974>
   13dfc:	ldr	r0, [r8]
   13e00:	movw	r3, #54824	; 0xd628
   13e04:	movt	r3, #2
   13e08:	ldr	r5, [r3]
   13e0c:	cmp	r0, #13
   13e10:	cmpne	r0, #1
   13e14:	moveq	r4, #1
   13e18:	movne	r4, #0
   13e1c:	cmp	r0, #93	; 0x5d
   13e20:	orreq	r4, r4, #1
   13e24:	cmp	r4, r9
   13e28:	beq	13e4c <__assert_fail@plt+0x2a10>
   13e2c:	mov	r3, r5
   13e30:	movw	r0, #49332	; 0xc0b4
   13e34:	movt	r0, #1
   13e38:	mov	r2, #41	; 0x29
   13e3c:	mov	r1, #1
   13e40:	mov	r4, r9
   13e44:	bl	11220 <fwrite@plt>
   13e48:	b	13db0 <__assert_fail@plt+0x2974>
   13e4c:	bl	11274 <strerror@plt>
   13e50:	mov	r2, r0
   13e54:	movw	r1, #49376	; 0xc0e0
   13e58:	movt	r1, #1
   13e5c:	mov	r0, r5
   13e60:	bl	112ec <fprintf@plt>
   13e64:	b	13db0 <__assert_fail@plt+0x2974>
   13e68:	mov	r3, #0
   13e6c:	str	r3, [r0, #112]	; 0x70
   13e70:	str	r3, [r0, #116]	; 0x74
   13e74:	str	r3, [r0, #120]	; 0x78
   13e78:	bx	lr
   13e7c:	str	r1, [r0, #4]
   13e80:	bx	lr
   13e84:	mov	r1, #0
   13e88:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e8c:	mov	r4, r0
   13e90:	strd	r6, [sp, #8]
   13e94:	str	lr, [sp, #16]
   13e98:	sub	sp, sp, #12
   13e9c:	bl	12624 <__assert_fail@plt+0x11e8>
   13ea0:	subs	r6, r0, #0
   13ea4:	bne	13ff8 <__assert_fail@plt+0x2bbc>
   13ea8:	ldr	r3, [r4, #4]
   13eac:	sub	r2, r3, #13
   13eb0:	cmp	r2, #1
   13eb4:	bls	13fe0 <__assert_fail@plt+0x2ba4>
   13eb8:	sub	r3, r3, #17
   13ebc:	cmp	r3, #1
   13ec0:	bls	13fec <__assert_fail@plt+0x2bb0>
   13ec4:	ldr	r5, [r4, #56]	; 0x38
   13ec8:	add	r5, r5, #8
   13ecc:	mov	r7, r5
   13ed0:	ldr	r3, [r4, #72]	; 0x48
   13ed4:	mov	ip, #1
   13ed8:	ldr	r1, [r4, #76]	; 0x4c
   13edc:	ldr	r0, [r4, #112]	; 0x70
   13ee0:	lsl	r2, r3, #3
   13ee4:	udiv	r3, r0, r2
   13ee8:	mls	r3, r2, r3, r0
   13eec:	ldrb	r2, [r1, r3, asr #3]
   13ef0:	and	r0, r3, #7
   13ef4:	bic	r2, r2, ip, lsl r0
   13ef8:	strb	r2, [r1, r3, asr #3]
   13efc:	ldr	r2, [r4, #4]
   13f00:	cmp	r2, #13
   13f04:	beq	13fc8 <__assert_fail@plt+0x2b8c>
   13f08:	cmp	r2, #17
   13f0c:	beq	13fb0 <__assert_fail@plt+0x2b74>
   13f10:	cmp	r2, #8
   13f14:	beq	13f98 <__assert_fail@plt+0x2b5c>
   13f18:	mov	r1, r5
   13f1c:	ldr	r3, [r4, #60]	; 0x3c
   13f20:	ldr	ip, [r4, #112]	; 0x70
   13f24:	ldr	r0, [r4, #80]	; 0x50
   13f28:	str	ip, [sp]
   13f2c:	bl	14354 <__assert_fail@plt+0x2f18>
   13f30:	add	r1, r4, #24
   13f34:	mov	ip, #16
   13f38:	ldr	r0, [r4]
   13f3c:	mov	r3, #0
   13f40:	mov	r2, r5
   13f44:	stm	sp, {r1, ip}
   13f48:	ldr	r1, [r4, #80]	; 0x50
   13f4c:	bl	11358 <sendto@plt>
   13f50:	subs	r3, r0, #0
   13f54:	blt	13ff8 <__assert_fail@plt+0x2bbc>
   13f58:	ldr	r2, [r4, #112]	; 0x70
   13f5c:	cmp	r3, r7
   13f60:	add	r2, r2, #1
   13f64:	str	r2, [r4, #112]	; 0x70
   13f68:	beq	13f80 <__assert_fail@plt+0x2b44>
   13f6c:	movw	r0, #49388	; 0xc0ec
   13f70:	movt	r0, #1
   13f74:	ldr	r1, [r4, #52]	; 0x34
   13f78:	mov	r2, r7
   13f7c:	bl	11118 <printf@plt>
   13f80:	mov	r0, r6
   13f84:	add	sp, sp, #12
   13f88:	ldrd	r4, [sp]
   13f8c:	ldrd	r6, [sp, #8]
   13f90:	add	sp, sp, #16
   13f94:	pop	{pc}		; (ldr pc, [sp], #4)
   13f98:	mov	r1, r5
   13f9c:	ldr	r2, [r4, #60]	; 0x3c
   13fa0:	ldr	r0, [r4, #80]	; 0x50
   13fa4:	ldr	r3, [r4, #112]	; 0x70
   13fa8:	bl	14420 <__assert_fail@plt+0x2fe4>
   13fac:	b	13f30 <__assert_fail@plt+0x2af4>
   13fb0:	mov	r1, r5
   13fb4:	ldr	r2, [r4, #60]	; 0x3c
   13fb8:	ldr	r0, [r4, #80]	; 0x50
   13fbc:	ldr	r3, [r4, #112]	; 0x70
   13fc0:	bl	14544 <__assert_fail@plt+0x3108>
   13fc4:	b	13f30 <__assert_fail@plt+0x2af4>
   13fc8:	mov	r1, r5
   13fcc:	ldr	r2, [r4, #60]	; 0x3c
   13fd0:	ldr	r0, [r4, #80]	; 0x50
   13fd4:	ldr	r3, [r4, #112]	; 0x70
   13fd8:	bl	14478 <__assert_fail@plt+0x303c>
   13fdc:	b	13f30 <__assert_fail@plt+0x2af4>
   13fe0:	mov	r7, #20
   13fe4:	mov	r5, r7
   13fe8:	b	13ed0 <__assert_fail@plt+0x2a94>
   13fec:	mov	r7, #12
   13ff0:	mov	r5, r7
   13ff4:	b	13ed0 <__assert_fail@plt+0x2a94>
   13ff8:	mvn	r6, #0
   13ffc:	b	13f80 <__assert_fail@plt+0x2b44>
   14000:	ldr	r2, [r0, #56]	; 0x38
   14004:	mov	r1, #16
   14008:	strd	r4, [sp, #-20]!	; 0xffffffec
   1400c:	add	r5, r0, #84	; 0x54
   14010:	mov	r4, r0
   14014:	strd	r6, [sp, #8]
   14018:	str	lr, [sp, #16]
   1401c:	sub	sp, sp, #36	; 0x24
   14020:	add	r3, sp, #20
   14024:	add	r2, r2, #80	; 0x50
   14028:	str	r5, [sp]
   1402c:	str	r3, [sp, #4]
   14030:	mov	r3, #0
   14034:	str	r1, [sp, #20]
   14038:	ldr	r0, [r0]
   1403c:	ldr	r1, [r4, #80]	; 0x50
   14040:	bl	111e4 <recvfrom@plt>
   14044:	subs	r6, r0, #0
   14048:	blt	140d8 <__assert_fail@plt+0x2c9c>
   1404c:	add	r3, sp, #24
   14050:	add	r2, sp, #28
   14054:	ldr	r0, [r4, #80]	; 0x50
   14058:	mov	r1, r6
   1405c:	bl	143b4 <__assert_fail@plt+0x2f78>
   14060:	cmp	r0, #0
   14064:	blt	14260 <__assert_fail@plt+0x2e24>
   14068:	ldr	r2, [sp, #24]
   1406c:	ldrb	r3, [r2]
   14070:	cmp	r3, #18
   14074:	ldrls	pc, [pc, r3, lsl #2]
   14078:	b	140c8 <__assert_fail@plt+0x2c8c>
   1407c:	strdeq	r4, [r1], -r0
   14080:	andeq	r4, r1, r8, asr #1
   14084:	andeq	r4, r1, r8, asr #1
   14088:	andeq	r4, r1, r8, asr #1
   1408c:	andeq	r4, r1, r8, asr #1
   14090:	andeq	r4, r1, r8, asr #1
   14094:	andeq	r4, r1, r8, asr #1
   14098:	andeq	r4, r1, r8, asr #1
   1409c:	ldrdeq	r4, [r1], -r8
   140a0:	andeq	r4, r1, r8, asr #1
   140a4:	andeq	r4, r1, r8, asr #1
   140a8:	andeq	r4, r1, r8, asr #1
   140ac:	andeq	r4, r1, r8, asr #1
   140b0:	ldrdeq	r4, [r1], -r8
   140b4:	strdeq	r4, [r1], -r0
   140b8:	andeq	r4, r1, r8, asr #1
   140bc:	andeq	r4, r1, r8, asr #1
   140c0:	ldrdeq	r4, [r1], -r8
   140c4:	strdeq	r4, [r1], -r0
   140c8:	ldr	r1, [r2, #24]
   140cc:	ldr	r3, [r4, #28]
   140d0:	cmp	r1, r3
   140d4:	beq	141b8 <__assert_fail@plt+0x2d7c>
   140d8:	mvn	r0, #0
   140dc:	add	sp, sp, #36	; 0x24
   140e0:	ldrd	r4, [sp]
   140e4:	ldrd	r6, [sp, #8]
   140e8:	add	sp, sp, #16
   140ec:	pop	{pc}		; (ldr pc, [sp], #4)
   140f0:	ldrh	r3, [r2, #4]
   140f4:	ldr	r1, [r4, #60]	; 0x3c
   140f8:	rev16	r3, r3
   140fc:	uxth	r3, r3
   14100:	cmp	r3, r1
   14104:	beq	1411c <__assert_fail@plt+0x2ce0>
   14108:	movw	r3, #54916	; 0xd684
   1410c:	movt	r3, #2
   14110:	ldr	r3, [r3]
   14114:	cmp	r3, #0
   14118:	beq	140d8 <__assert_fail@plt+0x2c9c>
   1411c:	cmp	r0, #0
   14120:	bne	14230 <__assert_fail@plt+0x2df4>
   14124:	ldrh	r3, [r2, #6]
   14128:	ldr	r1, [r4, #72]	; 0x48
   1412c:	ldr	lr, [r4, #76]	; 0x4c
   14130:	rev16	r3, r3
   14134:	uxth	r3, r3
   14138:	ldr	ip, [r4, #116]	; 0x74
   1413c:	lsl	r1, r1, #3
   14140:	sdiv	r2, r3, r1
   14144:	add	r0, ip, #1
   14148:	str	r0, [r4, #116]	; 0x74
   1414c:	mls	r3, r1, r2, r3
   14150:	ldrb	r2, [lr, r3, asr #3]
   14154:	and	r1, r3, #7
   14158:	asr	r0, r2, r1
   1415c:	ands	r0, r0, #1
   14160:	bne	141a4 <__assert_fail@plt+0x2d68>
   14164:	mov	ip, #1
   14168:	orr	r2, r2, ip, lsl r1
   1416c:	strb	r2, [lr, r3, asr #3]
   14170:	ldr	r7, [r4, #64]	; 0x40
   14174:	cmp	r7, #0
   14178:	beq	1419c <__assert_fail@plt+0x2d60>
   1417c:	ldr	lr, [sp, #24]
   14180:	mov	r3, r5
   14184:	add	r2, r4, #24
   14188:	str	r6, [sp, #8]
   1418c:	ldr	ip, [sp, #28]
   14190:	ldr	r1, [r4, #68]	; 0x44
   14194:	stm	sp, {ip, lr}
   14198:	blx	r7
   1419c:	mov	r0, #0
   141a0:	b	140dc <__assert_fail@plt+0x2ca0>
   141a4:	ldr	r3, [r4, #120]	; 0x78
   141a8:	str	ip, [r4, #116]	; 0x74
   141ac:	add	r3, r3, #1
   141b0:	str	r3, [r4, #120]	; 0x78
   141b4:	b	14170 <__assert_fail@plt+0x2d34>
   141b8:	ldrb	r3, [r2, #17]
   141bc:	cmp	r3, #1
   141c0:	bne	140d8 <__assert_fail@plt+0x2c9c>
   141c4:	ldrb	r3, [r2, #28]
   141c8:	cmp	r3, #8
   141cc:	bne	140d8 <__assert_fail@plt+0x2c9c>
   141d0:	ldrh	r3, [r2, #32]
   141d4:	ldr	r1, [r4, #60]	; 0x3c
   141d8:	rev16	r3, r3
   141dc:	uxth	r3, r3
   141e0:	cmp	r3, r1
   141e4:	beq	141fc <__assert_fail@plt+0x2dc0>
   141e8:	movw	r3, #54916	; 0xd684
   141ec:	movt	r3, #2
   141f0:	ldr	r3, [r3]
   141f4:	cmp	r3, #0
   141f8:	beq	140d8 <__assert_fail@plt+0x2c9c>
   141fc:	ldr	r7, [r4, #64]	; 0x40
   14200:	cmp	r7, #0
   14204:	beq	1419c <__assert_fail@plt+0x2d60>
   14208:	ldr	ip, [sp, #28]
   1420c:	mov	r3, r5
   14210:	mov	r0, #2
   14214:	stmib	sp, {r2, r6}
   14218:	add	r2, r4, #24
   1421c:	ldr	r1, [r4, #68]	; 0x44
   14220:	str	ip, [sp]
   14224:	blx	r7
   14228:	mov	r0, #0
   1422c:	b	140dc <__assert_fail@plt+0x2ca0>
   14230:	movw	r3, #54824	; 0xd628
   14234:	movt	r3, #2
   14238:	ldr	r0, [r4, #88]	; 0x58
   1423c:	ldr	r7, [r3]
   14240:	bl	111b4 <inet_ntoa@plt>
   14244:	mov	r2, r0
   14248:	movw	r1, #49464	; 0xc138
   1424c:	movt	r1, #1
   14250:	mov	r0, r7
   14254:	bl	112ec <fprintf@plt>
   14258:	ldr	r2, [sp, #24]
   1425c:	b	14124 <__assert_fail@plt+0x2ce8>
   14260:	movw	r3, #54824	; 0xd628
   14264:	movt	r3, #2
   14268:	ldr	r0, [r4, #88]	; 0x58
   1426c:	ldr	r4, [r3]
   14270:	bl	111b4 <inet_ntoa@plt>
   14274:	mov	r3, r0
   14278:	mov	r2, r6
   1427c:	movw	r1, #49424	; 0xc110
   14280:	movt	r1, #1
   14284:	mov	r0, r4
   14288:	bl	112ec <fprintf@plt>
   1428c:	mvn	r0, #0
   14290:	b	140dc <__assert_fail@plt+0x2ca0>
   14294:	str	r1, [r0, #64]	; 0x40
   14298:	str	r2, [r0, #68]	; 0x44
   1429c:	bx	lr
   142a0:	str	r1, [r0, #56]	; 0x38
   142a4:	bx	lr
   142a8:	mov	r3, #2
   142ac:	mov	r2, #194	; 0xc2
   142b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   142b4:	strd	r6, [sp, #8]
   142b8:	mov	r5, #0
   142bc:	mov	r4, #0
   142c0:	str	lr, [sp, #16]
   142c4:	sub	sp, sp, #44	; 0x2c
   142c8:	mov	r7, r1
   142cc:	mov	r6, r0
   142d0:	mov	r0, r1
   142d4:	mov	r1, #0
   142d8:	strd	r2, [sp, #8]
   142dc:	add	r3, sp, #4
   142e0:	add	r2, sp, #8
   142e4:	strd	r4, [sp, #16]
   142e8:	strd	r4, [sp, #24]
   142ec:	strd	r4, [sp, #32]
   142f0:	bl	11400 <getaddrinfo@plt>
   142f4:	subs	r5, r0, #0
   142f8:	bne	14344 <__assert_fail@plt+0x2f08>
   142fc:	ldr	r4, [sp, #4]
   14300:	add	r0, r6, #24
   14304:	ldr	r2, [r4, #16]
   14308:	ldr	r1, [r4, #20]
   1430c:	bl	11184 <memcpy@plt>
   14310:	ldr	r0, [r4, #24]
   14314:	cmp	r0, #0
   14318:	moveq	r0, r7
   1431c:	bl	111f0 <strdup@plt>
   14320:	str	r0, [r6, #52]	; 0x34
   14324:	mov	r0, r4
   14328:	bl	113f4 <freeaddrinfo@plt>
   1432c:	mov	r0, r5
   14330:	add	sp, sp, #44	; 0x2c
   14334:	ldrd	r4, [sp]
   14338:	ldrd	r6, [sp, #8]
   1433c:	add	sp, sp, #16
   14340:	pop	{pc}		; (ldr pc, [sp], #4)
   14344:	mov	r0, #0
   14348:	mov	r5, #1
   1434c:	bl	19138 <argp_parse@@Base+0xfe4>
   14350:	b	1432c <__assert_fail@plt+0x2ef0>
   14354:	cmp	r1, #7
   14358:	strd	r4, [sp, #-16]!
   1435c:	str	r6, [sp, #8]
   14360:	str	lr, [sp, #12]
   14364:	bls	143ac <__assert_fail@plt+0x2f70>
   14368:	strb	r2, [r0]
   1436c:	rev16	r3, r3
   14370:	mov	r5, #0
   14374:	ldr	r2, [sp, #16]
   14378:	mov	r4, r0
   1437c:	strb	r5, [r0, #1]
   14380:	strh	r5, [r0, #2]
   14384:	strh	r3, [r0, #4]
   14388:	rev16	r2, r2
   1438c:	strh	r2, [r0, #6]
   14390:	bl	14590 <__assert_fail@plt+0x3154>
   14394:	strh	r0, [r4, #2]
   14398:	mov	r0, r5
   1439c:	ldrd	r4, [sp]
   143a0:	ldr	r6, [sp, #8]
   143a4:	add	sp, sp, #12
   143a8:	pop	{pc}		; (ldr pc, [sp], #4)
   143ac:	mvn	r5, #0
   143b0:	b	14398 <__assert_fail@plt+0x2f5c>
   143b4:	ldrb	ip, [r0]
   143b8:	strd	r4, [sp, #-16]!
   143bc:	str	r6, [sp, #8]
   143c0:	str	lr, [sp, #12]
   143c4:	and	ip, ip, #15
   143c8:	lsl	ip, ip, #2
   143cc:	add	lr, ip, #8
   143d0:	cmp	lr, r1
   143d4:	mvnhi	r0, #0
   143d8:	bhi	14410 <__assert_fail@plt+0x2fd4>
   143dc:	add	r5, r0, ip
   143e0:	sub	r1, r1, ip
   143e4:	ldrh	r4, [r5, #2]
   143e8:	str	r0, [r2]
   143ec:	mov	r2, #0
   143f0:	mov	r0, r5
   143f4:	str	r5, [r3]
   143f8:	strh	r2, [r5, #2]
   143fc:	bl	14590 <__assert_fail@plt+0x3154>
   14400:	mov	r3, r0
   14404:	subs	r0, r0, r4
   14408:	movne	r0, #1
   1440c:	strh	r3, [r5, #2]
   14410:	ldrd	r4, [sp]
   14414:	ldr	r6, [sp, #8]
   14418:	add	sp, sp, #12
   1441c:	pop	{pc}		; (ldr pc, [sp], #4)
   14420:	cmp	r1, #7
   14424:	bls	14468 <__assert_fail@plt+0x302c>
   14428:	rev16	r3, r3
   1442c:	rev16	r2, r2
   14430:	str	r4, [sp, #-8]!
   14434:	mov	ip, #8
   14438:	mov	r4, r0
   1443c:	str	lr, [sp, #4]
   14440:	str	ip, [r0]
   14444:	strh	r2, [r0, #4]
   14448:	strh	r3, [r0, #6]
   1444c:	bl	14590 <__assert_fail@plt+0x3154>
   14450:	mov	r3, #0
   14454:	strh	r0, [r4, #2]
   14458:	ldr	r4, [sp]
   1445c:	add	sp, sp, #4
   14460:	mov	r0, r3
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	mvn	r3, #0
   1446c:	mov	r0, r3
   14470:	bx	lr
   14474:	b	143b4 <__assert_fail@plt+0x2f78>
   14478:	cmp	r1, #19
   1447c:	bls	1453c <__assert_fail@plt+0x3100>
   14480:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14484:	mov	r4, r0
   14488:	movw	r5, #17671	; 0x4507
   1448c:	movt	r5, #49710	; 0xc22e
   14490:	strd	r6, [sp, #8]
   14494:	mov	r6, r1
   14498:	strd	r8, [sp, #16]
   1449c:	mov	r1, #0
   144a0:	mov	r8, r2
   144a4:	str	lr, [sp, #24]
   144a8:	sub	sp, sp, #20
   144ac:	mov	r9, r3
   144b0:	add	r0, sp, #8
   144b4:	bl	1122c <gettimeofday@plt>
   144b8:	ldr	r7, [sp, #8]
   144bc:	movw	lr, #19923	; 0x4dd3
   144c0:	movt	lr, #4194	; 0x1062
   144c4:	mov	r3, r8
   144c8:	mov	r1, r6
   144cc:	str	r9, [sp]
   144d0:	ldr	r0, [sp, #12]
   144d4:	smull	r2, r5, r5, r7
   144d8:	asr	r2, r7, #31
   144dc:	smull	ip, lr, lr, r0
   144e0:	add	ip, r5, r7
   144e4:	asr	r0, r0, #31
   144e8:	mov	r5, #1000	; 0x3e8
   144ec:	rsb	r2, r2, ip, asr #16
   144f0:	movw	ip, #20864	; 0x5180
   144f4:	movt	ip, #1
   144f8:	rsb	lr, r0, lr, asr #6
   144fc:	mov	r0, r4
   14500:	mls	ip, ip, r2, r7
   14504:	mov	r2, #13
   14508:	mla	ip, r5, ip, lr
   1450c:	rev	ip, ip
   14510:	str	ip, [r4, #8]
   14514:	str	ip, [r4, #12]
   14518:	str	ip, [r4, #16]
   1451c:	bl	14354 <__assert_fail@plt+0x2f18>
   14520:	mov	r0, #0
   14524:	add	sp, sp, #20
   14528:	ldrd	r4, [sp]
   1452c:	ldrd	r6, [sp, #8]
   14530:	ldrd	r8, [sp, #16]
   14534:	add	sp, sp, #24
   14538:	pop	{pc}		; (ldr pc, [sp], #4)
   1453c:	mvn	r0, #0
   14540:	bx	lr
   14544:	cmp	r1, #11
   14548:	bls	14588 <__assert_fail@plt+0x314c>
   1454c:	str	r4, [sp, #-8]!
   14550:	mov	r4, #0
   14554:	str	lr, [sp, #4]
   14558:	sub	sp, sp, #8
   1455c:	mov	lr, r3
   14560:	mov	r3, r2
   14564:	mov	r2, #17
   14568:	str	lr, [sp]
   1456c:	str	r4, [r0, #8]
   14570:	bl	14354 <__assert_fail@plt+0x2f18>
   14574:	mov	r0, r4
   14578:	add	sp, sp, #8
   1457c:	ldr	r4, [sp]
   14580:	add	sp, sp, #4
   14584:	pop	{pc}		; (ldr pc, [sp], #4)
   14588:	mvn	r0, #0
   1458c:	bx	lr
   14590:	mov	r3, #0
   14594:	push	{lr}		; (str lr, [sp, #-4]!)
   14598:	sub	sp, sp, #12
   1459c:	cmp	r1, #1
   145a0:	strh	r3, [sp, #6]
   145a4:	ble	14600 <__assert_fail@plt+0x31c4>
   145a8:	sub	r1, r1, #2
   145ac:	lsr	lr, r1, #1
   145b0:	add	ip, lr, #1
   145b4:	add	ip, r0, ip, lsl #1
   145b8:	ldrh	r2, [r0], #2
   145bc:	cmp	r0, ip
   145c0:	add	r3, r3, r2
   145c4:	bne	145b8 <__assert_fail@plt+0x317c>
   145c8:	sub	r1, r1, lr, lsl #1
   145cc:	cmp	r1, #1
   145d0:	bne	145e4 <__assert_fail@plt+0x31a8>
   145d4:	ldrb	r2, [ip]
   145d8:	strb	r2, [sp, #6]
   145dc:	ldrh	r2, [sp, #6]
   145e0:	add	r3, r3, r2
   145e4:	uxth	r0, r3
   145e8:	add	r3, r0, r3, asr #16
   145ec:	add	r3, r3, r3, asr #16
   145f0:	mvn	r0, r3
   145f4:	uxth	r0, r0
   145f8:	add	sp, sp, #12
   145fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14600:	mov	ip, r0
   14604:	b	145cc <__assert_fail@plt+0x3190>
   14608:	strd	r4, [sp, #-16]!
   1460c:	mov	r5, r0
   14610:	ldr	r0, [r0, #12]
   14614:	str	r6, [sp, #8]
   14618:	str	lr, [sp, #12]
   1461c:	cmp	r0, #0
   14620:	beq	14634 <__assert_fail@plt+0x31f8>
   14624:	ldr	r4, [r0, #24]
   14628:	bl	19138 <argp_parse@@Base+0xfe4>
   1462c:	subs	r0, r4, #0
   14630:	bne	14624 <__assert_fail@plt+0x31e8>
   14634:	ldr	r3, [r5, #4]
   14638:	cmp	r3, #0
   1463c:	bne	14658 <__assert_fail@plt+0x321c>
   14640:	mov	r0, r5
   14644:	ldrd	r4, [sp]
   14648:	ldr	r6, [sp, #8]
   1464c:	ldr	lr, [sp, #12]
   14650:	add	sp, sp, #16
   14654:	b	19138 <argp_parse@@Base+0xfe4>
   14658:	ldr	r0, [r5]
   1465c:	bl	19138 <argp_parse@@Base+0xfe4>
   14660:	ldr	r0, [r5, #8]
   14664:	bl	19138 <argp_parse@@Base+0xfe4>
   14668:	b	14640 <__assert_fail@plt+0x3204>
   1466c:	ldr	r3, [r0, #12]
   14670:	strd	r4, [sp, #-16]!
   14674:	ldr	r2, [r1, #12]
   14678:	str	r6, [sp, #8]
   1467c:	str	lr, [sp, #12]
   14680:	cmp	r3, r2
   14684:	beq	146e4 <__assert_fail@plt+0x32a8>
   14688:	mov	r5, r1
   1468c:	mov	r4, r0
   14690:	mov	r1, r2
   14694:	mov	r0, r3
   14698:	bl	1466c <__assert_fail@plt+0x3230>
   1469c:	cmp	r0, #0
   146a0:	bne	146d4 <__assert_fail@plt+0x3298>
   146a4:	ldr	r3, [r5, #8]
   146a8:	ldr	r0, [r4, #8]
   146ac:	mvn	r2, r3
   146b0:	lsr	r2, r2, #31
   146b4:	cmp	r2, r0, lsr #31
   146b8:	subne	r0, r0, r3
   146bc:	subeq	r0, r3, r0
   146c0:	cmp	r0, #0
   146c4:	bne	146d4 <__assert_fail@plt+0x3298>
   146c8:	ldr	r0, [r4, #4]
   146cc:	ldr	r3, [r5, #4]
   146d0:	sub	r0, r3, r0
   146d4:	ldrd	r4, [sp]
   146d8:	ldr	r6, [sp, #8]
   146dc:	add	sp, sp, #12
   146e0:	pop	{pc}		; (ldr pc, [sp], #4)
   146e4:	ldr	lr, [r1, #4]
   146e8:	ldr	r3, [r1, #8]
   146ec:	ldr	r2, [r0, #8]
   146f0:	ldr	ip, [r0, #4]
   146f4:	mvn	r1, r3
   146f8:	lsr	r1, r1, #31
   146fc:	ldrd	r4, [sp]
   14700:	cmp	r1, r2, lsr #31
   14704:	ldr	r6, [sp, #8]
   14708:	add	sp, sp, #12
   1470c:	subne	r0, r2, r3
   14710:	subeq	r0, r3, r2
   14714:	cmp	r0, #0
   14718:	subeq	r0, lr, ip
   1471c:	pop	{pc}		; (ldr pc, [sp], #4)
   14720:	ldr	r2, [r0, #8]
   14724:	cmp	r2, #0
   14728:	beq	14734 <__assert_fail@plt+0x32f8>
   1472c:	mov	r0, #0
   14730:	bx	lr
   14734:	ldr	r2, [r1, #8]
   14738:	cmp	r2, #0
   1473c:	bne	1472c <__assert_fail@plt+0x32f0>
   14740:	ldr	r2, [r0, #12]
   14744:	ldr	r1, [r1, #12]
   14748:	orr	r2, r2, r1
   1474c:	tst	r2, #16
   14750:	bne	1472c <__assert_fail@plt+0x32f0>
   14754:	ldr	r2, [r3]
   14758:	ldr	r1, [r0, #4]
   1475c:	add	r0, r2, #1
   14760:	str	r0, [r3]
   14764:	strb	r1, [r2]
   14768:	b	1472c <__assert_fail@plt+0x32f0>
   1476c:	strd	r4, [sp, #-16]!
   14770:	ldr	r4, [r0, #12]
   14774:	str	r6, [sp, #8]
   14778:	str	lr, [sp, #12]
   1477c:	ands	r4, r4, #8
   14780:	movne	r4, #0
   14784:	bne	147b0 <__assert_fail@plt+0x3374>
   14788:	ldr	r5, [r0, #4]
   1478c:	sub	r3, r5, #1
   14790:	cmp	r3, #254	; 0xfe
   14794:	bhi	147b0 <__assert_fail@plt+0x3374>
   14798:	bl	112a4 <__ctype_b_loc@plt>
   1479c:	ldr	r2, [r0]
   147a0:	lsl	r3, r5, #1
   147a4:	ldrh	r3, [r2, r3]
   147a8:	tst	r3, #16384	; 0x4000
   147ac:	movne	r4, r5
   147b0:	mov	r0, r4
   147b4:	ldrd	r4, [sp]
   147b8:	ldr	r6, [sp, #8]
   147bc:	add	sp, sp, #12
   147c0:	pop	{pc}		; (ldr pc, [sp], #4)
   147c4:	str	r4, [sp, #-8]!
   147c8:	mov	r4, r0
   147cc:	str	lr, [sp, #4]
   147d0:	bl	112a4 <__ctype_b_loc@plt>
   147d4:	ldr	lr, [r0]
   147d8:	ldr	r2, [r4]
   147dc:	b	147e4 <__assert_fail@plt+0x33a8>
   147e0:	str	r2, [r4]
   147e4:	ldrb	r1, [r2]
   147e8:	mov	r3, r2
   147ec:	add	r2, r2, #1
   147f0:	lsl	r0, r1, #1
   147f4:	ldrh	ip, [lr, r0]
   147f8:	tst	ip, #8192	; 0x2000
   147fc:	bne	147e0 <__assert_fail@plt+0x33a4>
   14800:	subs	r0, r1, #45	; 0x2d
   14804:	movne	r0, #1
   14808:	cmp	r1, #0
   1480c:	beq	14840 <__assert_fail@plt+0x3404>
   14810:	tst	ip, #8
   14814:	beq	14828 <__assert_fail@plt+0x33ec>
   14818:	b	14840 <__assert_fail@plt+0x3404>
   1481c:	ldrh	r2, [lr, r1]
   14820:	tst	r2, #8
   14824:	bne	14840 <__assert_fail@plt+0x3404>
   14828:	add	r3, r3, #1
   1482c:	str	r3, [r4]
   14830:	ldrb	r2, [r3]
   14834:	cmp	r2, #0
   14838:	lsl	r1, r2, #1
   1483c:	bne	1481c <__assert_fail@plt+0x33e0>
   14840:	ldr	r4, [sp]
   14844:	add	sp, sp, #4
   14848:	pop	{pc}		; (ldr pc, [sp], #4)
   1484c:	cmp	r1, #0
   14850:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14854:	strd	r6, [sp, #8]
   14858:	str	r8, [sp, #16]
   1485c:	str	lr, [sp, #20]
   14860:	beq	148e8 <__assert_fail@plt+0x34ac>
   14864:	mov	r6, r0
   14868:	mov	r8, r2
   1486c:	sub	r7, r1, #1
   14870:	ldrd	r4, [r6]
   14874:	cmp	r5, #0
   14878:	sub	r5, r5, #1
   1487c:	beq	148bc <__assert_fail@plt+0x3480>
   14880:	add	r4, r4, #24
   14884:	ldr	r0, [r4, #-24]	; 0xffffffe8
   14888:	sub	r5, r5, #1
   1488c:	cmp	r0, #0
   14890:	beq	148b0 <__assert_fail@plt+0x3474>
   14894:	ldr	r3, [r4, #-12]
   14898:	mov	r1, r8
   1489c:	tst	r3, #2
   148a0:	bne	148b0 <__assert_fail@plt+0x3474>
   148a4:	bl	110f4 <strcmp@plt>
   148a8:	cmp	r0, #0
   148ac:	beq	148d0 <__assert_fail@plt+0x3494>
   148b0:	cmn	r5, #1
   148b4:	add	r4, r4, #24
   148b8:	bne	14884 <__assert_fail@plt+0x3448>
   148bc:	sub	r7, r7, #1
   148c0:	add	r6, r6, #28
   148c4:	cmn	r7, #1
   148c8:	bne	14870 <__assert_fail@plt+0x3434>
   148cc:	mov	r6, #0
   148d0:	mov	r0, r6
   148d4:	ldrd	r4, [sp]
   148d8:	ldrd	r6, [sp, #8]
   148dc:	ldr	r8, [sp, #16]
   148e0:	add	sp, sp, #20
   148e4:	pop	{pc}		; (ldr pc, [sp], #4)
   148e8:	mov	r6, r1
   148ec:	b	148d0 <__assert_fail@plt+0x3494>
   148f0:	strd	r4, [sp, #-16]!
   148f4:	subs	r5, r0, #0
   148f8:	mov	r4, r1
   148fc:	str	r6, [sp, #8]
   14900:	str	lr, [sp, #12]
   14904:	beq	14918 <__assert_fail@plt+0x34dc>
   14908:	mov	r1, #10
   1490c:	bl	112e0 <strchr@plt>
   14910:	adds	r5, r0, #0
   14914:	movne	r5, #1
   14918:	cmp	r4, #0
   1491c:	beq	14948 <__assert_fail@plt+0x350c>
   14920:	ldr	r3, [r4]
   14924:	cmp	r3, #0
   14928:	beq	14948 <__assert_fail@plt+0x350c>
   1492c:	ldr	r0, [r3, #8]
   14930:	ldr	r1, [r3, #16]
   14934:	bl	148f0 <__assert_fail@plt+0x34b4>
   14938:	ldr	r3, [r4, #16]!
   1493c:	add	r5, r5, r0
   14940:	cmp	r3, #0
   14944:	bne	1492c <__assert_fail@plt+0x34f0>
   14948:	mov	r0, r5
   1494c:	ldrd	r4, [sp]
   14950:	ldr	r6, [sp, #8]
   14954:	add	sp, sp, #12
   14958:	pop	{pc}		; (ldr pc, [sp], #4)
   1495c:	strd	r4, [sp, #-16]!
   14960:	mov	r5, r1
   14964:	mov	r1, r3
   14968:	str	r6, [sp, #8]
   1496c:	mov	r6, r0
   14970:	mov	r0, r2
   14974:	mov	r4, r2
   14978:	str	lr, [sp, #12]
   1497c:	bl	18fd4 <argp_parse@@Base+0xe80>
   14980:	mov	r2, r0
   14984:	mov	r1, r6
   14988:	ldr	r6, [sp, #8]
   1498c:	mov	r0, r5
   14990:	ldr	lr, [sp, #12]
   14994:	ldr	r3, [r4, #20]
   14998:	ldrd	r4, [sp]
   1499c:	add	sp, sp, #16
   149a0:	bx	r3
   149a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149a8:	ldr	r4, [r0]
   149ac:	strd	r6, [sp, #8]
   149b0:	strd	r8, [sp, #16]
   149b4:	strd	sl, [sp, #24]
   149b8:	str	lr, [sp, #32]
   149bc:	sub	sp, sp, #52	; 0x34
   149c0:	ldr	r7, [r0, #16]
   149c4:	str	r1, [sp]
   149c8:	str	r0, [sp, #4]
   149cc:	mov	r0, #16
   149d0:	bl	19cc8 <argp_parse@@Base+0x1b74>
   149d4:	subs	fp, r0, #0
   149d8:	beq	1500c <__assert_fail@plt+0x3bd0>
   149dc:	mov	r3, #0
   149e0:	cmp	r4, r3
   149e4:	str	r3, [fp, #4]
   149e8:	str	r3, [fp, #12]
   149ec:	beq	14c50 <__assert_fail@plt+0x3814>
   149f0:	ldr	r0, [r4, #12]
   149f4:	ands	r0, r0, #4
   149f8:	bne	15048 <__assert_fail@plt+0x3c0c>
   149fc:	mov	r9, r0
   14a00:	add	r5, r4, #24
   14a04:	mov	r8, r0
   14a08:	b	14a58 <__assert_fail@plt+0x361c>
   14a0c:	ldr	r3, [r5, #-12]
   14a10:	tst	r3, #4
   14a14:	bne	14a24 <__assert_fail@plt+0x35e8>
   14a18:	add	r9, r9, #1
   14a1c:	str	r9, [fp, #4]
   14a20:	ldr	r3, [r5, #-12]
   14a24:	tst	r3, #8
   14a28:	bne	14a54 <__assert_fail@plt+0x3618>
   14a2c:	ldr	r6, [r5, #-20]	; 0xffffffec
   14a30:	sub	r3, r6, #1
   14a34:	cmp	r3, #254	; 0xfe
   14a38:	bhi	14a54 <__assert_fail@plt+0x3618>
   14a3c:	bl	112a4 <__ctype_b_loc@plt>
   14a40:	ldr	r3, [r0]
   14a44:	lsl	r6, r6, #1
   14a48:	ldrh	r3, [r3, r6]
   14a4c:	tst	r3, #16384	; 0x4000
   14a50:	addne	r8, r8, #1
   14a54:	add	r5, r5, #24
   14a58:	ldr	r3, [r5, #-20]	; 0xffffffec
   14a5c:	cmp	r3, #0
   14a60:	bne	14a0c <__assert_fail@plt+0x35d0>
   14a64:	ldr	r3, [r5, #-24]	; 0xffffffe8
   14a68:	cmp	r3, #0
   14a6c:	bne	14a0c <__assert_fail@plt+0x35d0>
   14a70:	ldr	r3, [r5, #-8]
   14a74:	cmp	r3, #0
   14a78:	bne	14a0c <__assert_fail@plt+0x35d0>
   14a7c:	ldr	sl, [r5, #-4]
   14a80:	cmp	sl, #0
   14a84:	bne	14a0c <__assert_fail@plt+0x35d0>
   14a88:	rsb	r9, r9, r9, lsl #3
   14a8c:	lsl	r0, r9, #2
   14a90:	bl	19cc8 <argp_parse@@Base+0x1b74>
   14a94:	str	r0, [fp]
   14a98:	add	r0, r8, #1
   14a9c:	bl	19cc8 <argp_parse@@Base+0x1b74>
   14aa0:	ldr	r5, [fp]
   14aa4:	mov	r8, r0
   14aa8:	str	r0, [fp, #8]
   14aac:	cmp	r5, #0
   14ab0:	cmpne	r0, #0
   14ab4:	beq	14fb0 <__assert_fail@plt+0x3b74>
   14ab8:	ldr	r2, [fp, #4]
   14abc:	movw	r3, #37449	; 0x9249
   14ac0:	movt	r3, #2340	; 0x924
   14ac4:	cmp	r2, r3
   14ac8:	bhi	14fd0 <__assert_fail@plt+0x3b94>
   14acc:	mov	r6, r0
   14ad0:	mov	r0, sl
   14ad4:	str	r7, [sp, #8]
   14ad8:	mov	r7, r8
   14adc:	ldr	sl, [sp]
   14ae0:	add	r5, r5, #28
   14ae4:	str	fp, [sp, #12]
   14ae8:	ldr	r3, [r4, #4]
   14aec:	ldr	r8, [sp, #4]
   14af0:	cmp	r3, #0
   14af4:	ldr	fp, [r4, #20]
   14af8:	bne	14b08 <__assert_fail@plt+0x36cc>
   14afc:	ldr	ip, [r4]
   14b00:	cmp	ip, #0
   14b04:	beq	14be8 <__assert_fail@plt+0x37ac>
   14b08:	mov	r2, #0
   14b0c:	cmp	fp, #0
   14b10:	str	r4, [r5, #-28]	; 0xffffffe4
   14b14:	str	r2, [r5, #-24]	; 0xffffffe8
   14b18:	str	r6, [r5, #-20]	; 0xffffffec
   14b1c:	bne	14b30 <__assert_fail@plt+0x36f4>
   14b20:	ldr	r2, [r4]
   14b24:	orrs	r3, r2, r3
   14b28:	movne	fp, r0
   14b2c:	beq	14c08 <__assert_fail@plt+0x37cc>
   14b30:	mov	r3, #0
   14b34:	str	fp, [r5, #-16]
   14b38:	str	sl, [r5, #-12]
   14b3c:	str	r8, [r5, #-8]
   14b40:	add	r3, r3, #1
   14b44:	str	r3, [r5, #-24]	; 0xffffffe8
   14b48:	ldr	r3, [r4, #12]
   14b4c:	tst	r3, #8
   14b50:	bne	14bb8 <__assert_fail@plt+0x377c>
   14b54:	ldr	r9, [r4, #4]
   14b58:	sub	r3, r9, #1
   14b5c:	cmp	r3, #254	; 0xfe
   14b60:	bhi	14bb8 <__assert_fail@plt+0x377c>
   14b64:	bl	112a4 <__ctype_b_loc@plt>
   14b68:	ldr	r0, [r0]
   14b6c:	lsl	r3, r9, #1
   14b70:	ldrh	r3, [r0, r3]
   14b74:	tst	r3, #16384	; 0x4000
   14b78:	beq	14bb8 <__assert_fail@plt+0x377c>
   14b7c:	cmp	r7, r6
   14b80:	uxtb	r9, r9
   14b84:	bcs	14bb4 <__assert_fail@plt+0x3778>
   14b88:	ldrb	r3, [r7]
   14b8c:	cmp	r3, r9
   14b90:	beq	14bb8 <__assert_fail@plt+0x377c>
   14b94:	mov	r3, r7
   14b98:	sub	r0, r6, #1
   14b9c:	b	14bac <__assert_fail@plt+0x3770>
   14ba0:	ldrb	ip, [r3, #1]!
   14ba4:	cmp	ip, r9
   14ba8:	beq	14bb8 <__assert_fail@plt+0x377c>
   14bac:	cmp	r0, r3
   14bb0:	bne	14ba0 <__assert_fail@plt+0x3764>
   14bb4:	strb	r9, [r6], #1
   14bb8:	add	r4, r4, #24
   14bbc:	ldr	r0, [r4, #4]
   14bc0:	cmp	r0, #0
   14bc4:	bne	14bd4 <__assert_fail@plt+0x3798>
   14bc8:	ldr	r3, [r4]
   14bcc:	cmp	r3, #0
   14bd0:	beq	14c10 <__assert_fail@plt+0x37d4>
   14bd4:	ldr	r3, [r4, #12]
   14bd8:	tst	r3, #4
   14bdc:	beq	14c34 <__assert_fail@plt+0x37f8>
   14be0:	ldr	r3, [r5, #-24]	; 0xffffffe8
   14be4:	b	14b40 <__assert_fail@plt+0x3704>
   14be8:	ldr	ip, [r4, #16]
   14bec:	cmp	ip, #0
   14bf0:	beq	14c3c <__assert_fail@plt+0x3800>
   14bf4:	cmp	fp, #0
   14bf8:	str	r4, [r5, #-28]	; 0xffffffe4
   14bfc:	str	r3, [r5, #-24]	; 0xffffffe8
   14c00:	str	r6, [r5, #-20]	; 0xffffffec
   14c04:	bne	14b30 <__assert_fail@plt+0x36f4>
   14c08:	add	fp, r0, #1
   14c0c:	b	14b30 <__assert_fail@plt+0x36f4>
   14c10:	ldr	r3, [r4, #16]
   14c14:	cmp	r3, #0
   14c18:	bne	14bd4 <__assert_fail@plt+0x3798>
   14c1c:	ldr	r3, [r4, #20]
   14c20:	cmp	r3, #0
   14c24:	bne	14bd4 <__assert_fail@plt+0x3798>
   14c28:	add	r5, r5, #28
   14c2c:	mov	r0, fp
   14c30:	b	14af0 <__assert_fail@plt+0x36b4>
   14c34:	mov	r3, r0
   14c38:	b	14c28 <__assert_fail@plt+0x37ec>
   14c3c:	cmp	fp, #0
   14c40:	bne	14d8c <__assert_fail@plt+0x3950>
   14c44:	ldr	r7, [sp, #8]
   14c48:	strb	r3, [r6]
   14c4c:	ldr	fp, [sp, #12]
   14c50:	cmp	r7, #0
   14c54:	beq	14d6c <__assert_fail@plt+0x3930>
   14c58:	ldr	r3, [r7]
   14c5c:	cmp	r3, #0
   14c60:	beq	14d6c <__assert_fail@plt+0x3930>
   14c64:	movw	r3, #37449	; 0x9249
   14c68:	movt	r3, #2340	; 0x924
   14c6c:	mov	sl, r7
   14c70:	str	r3, [sp, #28]
   14c74:	add	r3, fp, #12
   14c78:	str	r3, [sp, #44]	; 0x2c
   14c7c:	ldr	r6, [sl, #8]
   14c80:	ldr	r5, [sl, #12]
   14c84:	cmp	r5, #0
   14c88:	bne	14c94 <__assert_fail@plt+0x3858>
   14c8c:	cmp	r6, #0
   14c90:	beq	14f90 <__assert_fail@plt+0x3b54>
   14c94:	ldr	r7, [sp, #4]
   14c98:	mov	r0, #28
   14c9c:	ldr	r4, [r7, #16]
   14ca0:	bl	19cc8 <argp_parse@@Base+0x1b74>
   14ca4:	subs	r1, r0, #0
   14ca8:	beq	14ce8 <__assert_fail@plt+0x38ac>
   14cac:	ldr	r3, [sp]
   14cb0:	sub	r4, sl, r4
   14cb4:	asr	r4, r4, #4
   14cb8:	str	r6, [r1]
   14cbc:	ldr	r2, [fp, #12]
   14cc0:	str	r1, [fp, #12]
   14cc4:	strd	r4, [r1, #4]
   14cc8:	cmp	r3, #0
   14ccc:	str	r3, [r1, #12]
   14cd0:	ldrne	r3, [r3, #20]
   14cd4:	str	r7, [r1, #16]
   14cd8:	ldreq	r3, [sp]
   14cdc:	str	r2, [r1, #24]
   14ce0:	addne	r3, r3, #1
   14ce4:	str	r3, [r1, #20]
   14ce8:	ldr	r0, [sl]
   14cec:	bl	149a4 <__assert_fail@plt+0x3568>
   14cf0:	ldr	r3, [fp, #12]
   14cf4:	mov	r6, r0
   14cf8:	cmp	r3, #0
   14cfc:	bne	14d08 <__assert_fail@plt+0x38cc>
   14d00:	b	14f98 <__assert_fail@plt+0x3b5c>
   14d04:	mov	r3, r2
   14d08:	ldr	r2, [r3, #24]
   14d0c:	cmp	r2, #0
   14d10:	bne	14d04 <__assert_fail@plt+0x38c8>
   14d14:	add	r3, r3, #24
   14d18:	ldr	r2, [r6, #4]
   14d1c:	ldr	r1, [r6, #12]
   14d20:	cmp	r2, #0
   14d24:	str	r1, [r3]
   14d28:	mov	r3, #0
   14d2c:	str	r3, [r6, #12]
   14d30:	beq	14d58 <__assert_fail@plt+0x391c>
   14d34:	ldr	r3, [fp, #4]
   14d38:	cmp	r3, #0
   14d3c:	bne	14d9c <__assert_fail@plt+0x3960>
   14d40:	ldr	r1, [r6]
   14d44:	str	r2, [fp, #4]
   14d48:	ldr	r2, [r6, #8]
   14d4c:	str	r1, [fp]
   14d50:	str	r2, [fp, #8]
   14d54:	str	r3, [r6, #4]
   14d58:	mov	r0, r6
   14d5c:	bl	14608 <__assert_fail@plt+0x31cc>
   14d60:	ldr	r3, [sl, #16]!
   14d64:	cmp	r3, #0
   14d68:	bne	14c7c <__assert_fail@plt+0x3840>
   14d6c:	mov	r0, fp
   14d70:	add	sp, sp, #52	; 0x34
   14d74:	ldrd	r4, [sp]
   14d78:	ldrd	r6, [sp, #8]
   14d7c:	ldrd	r8, [sp, #16]
   14d80:	ldrd	sl, [sp, #24]
   14d84:	add	sp, sp, #32
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	str	r4, [r5, #-28]	; 0xffffffe4
   14d90:	str	r3, [r5, #-24]	; 0xffffffe8
   14d94:	str	r6, [r5, #-20]	; 0xffffffec
   14d98:	b	14b30 <__assert_fail@plt+0x36f4>
   14d9c:	add	r3, r2, r3
   14da0:	rsb	r0, r3, r3, lsl #3
   14da4:	str	r3, [sp, #12]
   14da8:	lsl	r0, r0, #2
   14dac:	bl	19cc8 <argp_parse@@Base+0x1b74>
   14db0:	mov	r4, r0
   14db4:	ldr	r0, [fp, #8]
   14db8:	str	r4, [sp, #8]
   14dbc:	bl	112d4 <strlen@plt>
   14dc0:	mov	r8, r0
   14dc4:	ldr	r0, [r6, #8]
   14dc8:	bl	112d4 <strlen@plt>
   14dcc:	add	r0, r8, r0
   14dd0:	add	r0, r0, #1
   14dd4:	bl	19cc8 <argp_parse@@Base+0x1b74>
   14dd8:	cmp	r4, #0
   14ddc:	cmpne	r0, #0
   14de0:	mov	r9, r0
   14de4:	beq	14ff0 <__assert_fail@plt+0x3bb4>
   14de8:	ldr	r3, [sp, #12]
   14dec:	ldr	r2, [sp, #28]
   14df0:	cmp	r3, r2
   14df4:	bhi	1502c <__assert_fail@plt+0x3bf0>
   14df8:	ldm	fp, {r1, r5}
   14dfc:	ldr	r0, [sp, #8]
   14e00:	rsb	r4, r5, r5, lsl #3
   14e04:	str	r1, [sp, #24]
   14e08:	lsl	r4, r4, #2
   14e0c:	mov	r2, r4
   14e10:	bl	11298 <mempcpy@plt>
   14e14:	ldm	r6, {r1, r3}
   14e18:	rsb	r2, r3, r3, lsl #3
   14e1c:	str	r3, [sp, #16]
   14e20:	lsl	r2, r2, #2
   14e24:	bl	11184 <memcpy@plt>
   14e28:	ldr	r7, [fp, #8]
   14e2c:	mov	r2, r8
   14e30:	mov	r0, r9
   14e34:	mov	r1, r7
   14e38:	bl	11184 <memcpy@plt>
   14e3c:	cmp	r5, #0
   14e40:	ldr	r3, [sp, #16]
   14e44:	beq	14fa0 <__assert_fail@plt+0x3b64>
   14e48:	ldr	r1, [sp, #8]
   14e4c:	subs	r5, r5, #1
   14e50:	add	r1, r1, #28
   14e54:	ldr	r2, [r1, #-20]	; 0xffffffec
   14e58:	sub	r2, r2, r7
   14e5c:	add	r2, r9, r2
   14e60:	str	r2, [r1, #-20]	; 0xffffffec
   14e64:	bne	14e4c <__assert_fail@plt+0x3a10>
   14e68:	ldr	r2, [sp, #8]
   14e6c:	add	r4, r2, r4
   14e70:	add	r2, r9, r8
   14e74:	cmp	r3, #0
   14e78:	ldr	r1, [r6, #8]
   14e7c:	str	r2, [sp, #16]
   14e80:	beq	14fa8 <__assert_fail@plt+0x3b6c>
   14e84:	mov	r8, r2
   14e88:	add	r4, r4, #28
   14e8c:	str	r6, [sp, #32]
   14e90:	sub	r2, r2, #1
   14e94:	strd	sl, [sp, #36]	; 0x24
   14e98:	mov	sl, r1
   14e9c:	mov	fp, r3
   14ea0:	str	r2, [sp, #20]
   14ea4:	str	r8, [r4, #-20]	; 0xffffffec
   14ea8:	ldr	r6, [r4, #-24]	; 0xffffffe8
   14eac:	ldr	r7, [r4, #-28]	; 0xffffffe4
   14eb0:	cmp	r6, #0
   14eb4:	beq	14f08 <__assert_fail@plt+0x3acc>
   14eb8:	ldr	r3, [r7, #12]
   14ebc:	tst	r3, #8
   14ec0:	bne	14efc <__assert_fail@plt+0x3ac0>
   14ec4:	ldr	r5, [r7, #4]
   14ec8:	sub	r3, r5, #1
   14ecc:	cmp	r3, #254	; 0xfe
   14ed0:	bhi	14efc <__assert_fail@plt+0x3ac0>
   14ed4:	bl	112a4 <__ctype_b_loc@plt>
   14ed8:	ldr	r1, [r0]
   14edc:	lsl	r2, r5, #1
   14ee0:	ldrb	r3, [sl]
   14ee4:	ldrh	r2, [r1, r2]
   14ee8:	sub	r5, r3, r5
   14eec:	clz	r5, r5
   14ef0:	lsr	r5, r5, #5
   14ef4:	ands	r2, r5, r2, lsr #14
   14ef8:	bne	14f4c <__assert_fail@plt+0x3b10>
   14efc:	subs	r6, r6, #1
   14f00:	add	r7, r7, #24
   14f04:	bne	14eb8 <__assert_fail@plt+0x3a7c>
   14f08:	subs	fp, fp, #1
   14f0c:	add	r4, r4, #28
   14f10:	bne	14ea4 <__assert_fail@plt+0x3a68>
   14f14:	add	r6, sp, #32
   14f18:	ldm	r6, {r6, sl, fp}
   14f1c:	mov	r3, #0
   14f20:	strb	r3, [r8]
   14f24:	ldr	r0, [sp, #24]
   14f28:	bl	19138 <argp_parse@@Base+0xfe4>
   14f2c:	ldr	r0, [fp, #8]
   14f30:	bl	19138 <argp_parse@@Base+0xfe4>
   14f34:	ldr	r3, [sp, #8]
   14f38:	str	r3, [fp]
   14f3c:	ldr	r3, [sp, #12]
   14f40:	str	r9, [fp, #8]
   14f44:	str	r3, [fp, #4]
   14f48:	b	14d58 <__assert_fail@plt+0x391c>
   14f4c:	ldr	r2, [sp, #16]
   14f50:	cmp	r9, r2
   14f54:	bcs	14f84 <__assert_fail@plt+0x3b48>
   14f58:	ldrb	r2, [r9]
   14f5c:	cmp	r2, r3
   14f60:	beq	14f88 <__assert_fail@plt+0x3b4c>
   14f64:	mov	r2, r9
   14f68:	ldr	r0, [sp, #20]
   14f6c:	b	14f7c <__assert_fail@plt+0x3b40>
   14f70:	ldrb	r1, [r2, #1]!
   14f74:	cmp	r1, r3
   14f78:	beq	14f88 <__assert_fail@plt+0x3b4c>
   14f7c:	cmp	r2, r0
   14f80:	bne	14f70 <__assert_fail@plt+0x3b34>
   14f84:	strb	r3, [r8], #1
   14f88:	add	sl, sl, #1
   14f8c:	b	14efc <__assert_fail@plt+0x3ac0>
   14f90:	ldr	r1, [sp]
   14f94:	b	14ce8 <__assert_fail@plt+0x38ac>
   14f98:	ldr	r3, [sp, #44]	; 0x2c
   14f9c:	b	14d18 <__assert_fail@plt+0x38dc>
   14fa0:	ldr	r4, [sp, #8]
   14fa4:	b	14e70 <__assert_fail@plt+0x3a34>
   14fa8:	ldr	r8, [sp, #16]
   14fac:	b	14f1c <__assert_fail@plt+0x3ae0>
   14fb0:	movw	r3, #49492	; 0xc154
   14fb4:	movt	r3, #1
   14fb8:	movw	r1, #49660	; 0xc1fc
   14fbc:	movt	r1, #1
   14fc0:	movw	r0, #49692	; 0xc21c
   14fc4:	movt	r0, #1
   14fc8:	movw	r2, #474	; 0x1da
   14fcc:	bl	1143c <__assert_fail@plt>
   14fd0:	movw	r3, #49492	; 0xc154
   14fd4:	movt	r3, #1
   14fd8:	movw	r1, #49660	; 0xc1fc
   14fdc:	movt	r1, #1
   14fe0:	movw	r0, #49728	; 0xc240
   14fe4:	movt	r0, #1
   14fe8:	mov	r2, #476	; 0x1dc
   14fec:	bl	1143c <__assert_fail@plt>
   14ff0:	movw	r1, #49660	; 0xc1fc
   14ff4:	movt	r1, #1
   14ff8:	ldr	r3, [pc, #104]	; 15068 <__assert_fail@plt+0x3c2c>
   14ffc:	movw	r0, #49788	; 0xc27c
   15000:	movt	r0, #1
   15004:	movw	r2, #970	; 0x3ca
   15008:	bl	1143c <__assert_fail@plt>
   1500c:	movw	r3, #49492	; 0xc154
   15010:	movt	r3, #1
   15014:	movw	r1, #49660	; 0xc1fc
   15018:	movt	r1, #1
   1501c:	movw	r0, #49672	; 0xc208
   15020:	movt	r0, #1
   15024:	movw	r2, #450	; 0x1c2
   15028:	bl	1143c <__assert_fail@plt>
   1502c:	movw	r1, #49660	; 0xc1fc
   15030:	movt	r1, #1
   15034:	ldr	r3, [pc, #44]	; 15068 <__assert_fail@plt+0x3c2c>
   15038:	movw	r0, #49816	; 0xc298
   1503c:	movt	r0, #1
   15040:	mov	r2, #972	; 0x3cc
   15044:	bl	1143c <__assert_fail@plt>
   15048:	movw	r3, #49492	; 0xc154
   1504c:	movt	r3, #1
   15050:	movw	r1, #49660	; 0xc1fc
   15054:	movt	r1, #1
   15058:	movw	r0, #49676	; 0xc20c
   1505c:	movt	r0, #1
   15060:	mov	r2, #460	; 0x1cc
   15064:	bl	1143c <__assert_fail@plt>
   15068:	andeq	ip, r1, r0, ror #2
   1506c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15070:	ldr	r5, [r0, #4]
   15074:	strd	r6, [sp, #8]
   15078:	strd	r8, [sp, #16]
   1507c:	strd	sl, [sp, #24]
   15080:	str	lr, [sp, #32]
   15084:	sub	sp, sp, #12
   15088:	cmp	r5, #0
   1508c:	ldr	r7, [r0]
   15090:	ldr	r6, [r0, #8]
   15094:	beq	15164 <__assert_fail@plt+0x3d28>
   15098:	mov	sl, r3
   1509c:	mov	r4, r7
   150a0:	stm	sp, {r1, r2}
   150a4:	ldr	fp, [r4, #12]
   150a8:	ands	r8, fp, #8
   150ac:	movne	r0, #1
   150b0:	movne	r8, #0
   150b4:	bne	150f0 <__assert_fail@plt+0x3cb4>
   150b8:	ldr	r9, [r4, #4]
   150bc:	sub	r1, r9, #1
   150c0:	cmp	r1, #254	; 0xfe
   150c4:	bhi	150ec <__assert_fail@plt+0x3cb0>
   150c8:	bl	112a4 <__ctype_b_loc@plt>
   150cc:	ldr	r0, [r0]
   150d0:	lsl	r1, r9, #1
   150d4:	ldrh	r1, [r0, r1]
   150d8:	tst	r1, #16384	; 0x4000
   150dc:	beq	150ec <__assert_fail@plt+0x3cb0>
   150e0:	ldrb	r1, [r6]
   150e4:	cmp	r1, r9
   150e8:	beq	15124 <__assert_fail@plt+0x3ce8>
   150ec:	mov	r0, #1
   150f0:	subs	r5, r5, #1
   150f4:	add	r4, r4, #24
   150f8:	moveq	r0, #0
   150fc:	cmp	r0, #0
   15100:	bne	150a4 <__assert_fail@plt+0x3c68>
   15104:	mov	r0, r8
   15108:	add	sp, sp, #12
   1510c:	ldrd	r4, [sp]
   15110:	ldrd	r6, [sp, #8]
   15114:	ldrd	r8, [sp, #16]
   15118:	ldrd	sl, [sp, #24]
   1511c:	add	sp, sp, #32
   15120:	pop	{pc}		; (ldr pc, [sp], #4)
   15124:	tst	fp, #4
   15128:	moveq	r7, r4
   1512c:	tst	fp, #2
   15130:	movne	r0, #1
   15134:	bne	1515c <__assert_fail@plt+0x3d20>
   15138:	mov	r3, sl
   1513c:	mov	r1, r7
   15140:	ldr	ip, [sp]
   15144:	mov	r0, r4
   15148:	ldr	r2, [sp, #4]
   1514c:	blx	ip
   15150:	mov	r8, r0
   15154:	clz	r0, r0
   15158:	lsr	r0, r0, #5
   1515c:	add	r6, r6, #1
   15160:	b	150f0 <__assert_fail@plt+0x3cb4>
   15164:	mov	r8, r5
   15168:	b	15104 <__assert_fail@plt+0x3cc8>
   1516c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15170:	strd	r6, [sp, #8]
   15174:	strd	r8, [sp, #16]
   15178:	strd	sl, [sp, #24]
   1517c:	add	fp, sp, #32
   15180:	str	lr, [sp, #32]
   15184:	sub	sp, sp, #20
   15188:	ldr	r5, [r0, #4]
   1518c:	cmp	r5, #0
   15190:	beq	152e0 <__assert_fail@plt+0x3ea4>
   15194:	mov	r6, r0
   15198:	ldr	r0, [r0, #8]
   1519c:	mov	r9, r1
   151a0:	bl	112d4 <strlen@plt>
   151a4:	add	r3, r0, #8
   151a8:	ldr	r4, [r6]
   151ac:	movw	r7, #18208	; 0x4720
   151b0:	movt	r7, #1
   151b4:	bic	r3, r3, #7
   151b8:	sub	sp, sp, r3
   151bc:	mov	r8, sp
   151c0:	str	r8, [fp, #-40]	; 0xffffffd8
   151c4:	ldr	r2, [r4, #20]
   151c8:	mov	r0, r4
   151cc:	sub	r3, fp, #40	; 0x28
   151d0:	mov	r1, r7
   151d4:	add	r4, r4, #28
   151d8:	ldr	r2, [r2, #24]
   151dc:	bl	1506c <__assert_fail@plt+0x3c30>
   151e0:	subs	r5, r5, #1
   151e4:	bne	151c4 <__assert_fail@plt+0x3d88>
   151e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   151ec:	cmp	r3, r8
   151f0:	bhi	15320 <__assert_fail@plt+0x3ee4>
   151f4:	ldrd	r4, [r6]
   151f8:	cmp	r5, #0
   151fc:	beq	152e0 <__assert_fail@plt+0x3ea4>
   15200:	movw	r7, #22632	; 0x5868
   15204:	movt	r7, #1
   15208:	ldr	r2, [r4, #20]
   1520c:	mov	r0, r4
   15210:	mov	r3, r9
   15214:	mov	r1, r7
   15218:	add	r4, r4, #28
   1521c:	ldr	r2, [r2, #24]
   15220:	bl	1506c <__assert_fail@plt+0x3c30>
   15224:	subs	r5, r5, #1
   15228:	bne	15208 <__assert_fail@plt+0x3dcc>
   1522c:	ldm	r6, {r7, r8}
   15230:	cmp	r8, #0
   15234:	beq	152e0 <__assert_fail@plt+0x3ea4>
   15238:	movw	r3, #49876	; 0xc2d4
   1523c:	movt	r3, #1
   15240:	movw	sl, #49892	; 0xc2e4
   15244:	movt	sl, #1
   15248:	add	r7, r7, #28
   1524c:	str	r3, [fp, #-48]	; 0xffffffd0
   15250:	movw	r3, #49904	; 0xc2f0
   15254:	movt	r3, #1
   15258:	str	r3, [fp, #-52]	; 0xffffffcc
   1525c:	ldr	r6, [r7, #-28]	; 0xffffffe4
   15260:	ldr	r5, [r7, #-24]	; 0xffffffe8
   15264:	cmp	r5, #0
   15268:	movne	r4, r6
   1526c:	beq	152d4 <__assert_fail@plt+0x3e98>
   15270:	ldr	r2, [r4]
   15274:	cmp	r2, #0
   15278:	beq	152c8 <__assert_fail@plt+0x3e8c>
   1527c:	ldr	r1, [r4, #12]
   15280:	tst	r1, #4
   15284:	moveq	r6, r4
   15288:	tst	r1, #2
   1528c:	bne	152c8 <__assert_fail@plt+0x3e8c>
   15290:	ldr	r3, [r4, #8]
   15294:	ldr	r0, [r6, #12]
   15298:	cmp	r3, #0
   1529c:	orr	r1, r1, r0
   152a0:	and	r0, r1, #16
   152a4:	beq	152fc <__assert_fail@plt+0x3ec0>
   152a8:	cmp	r0, #0
   152ac:	bne	152c8 <__assert_fail@plt+0x3e8c>
   152b0:	tst	r1, #1
   152b4:	movne	r0, r9
   152b8:	ldrne	r1, [fp, #-48]	; 0xffffffd0
   152bc:	moveq	r1, sl
   152c0:	moveq	r0, r9
   152c4:	bl	1a480 <argp_parse@@Base+0x232c>
   152c8:	subs	r5, r5, #1
   152cc:	add	r4, r4, #24
   152d0:	bne	15270 <__assert_fail@plt+0x3e34>
   152d4:	subs	r8, r8, #1
   152d8:	add	r7, r7, #28
   152dc:	bne	1525c <__assert_fail@plt+0x3e20>
   152e0:	sub	sp, fp, #32
   152e4:	ldrd	r4, [sp]
   152e8:	ldrd	r6, [sp, #8]
   152ec:	ldrd	r8, [sp, #16]
   152f0:	ldrd	sl, [sp, #24]
   152f4:	add	sp, sp, #32
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	cmp	r0, #0
   15300:	bne	152c8 <__assert_fail@plt+0x3e8c>
   15304:	ldr	r3, [r6, #8]
   15308:	cmp	r3, #0
   1530c:	bne	152b0 <__assert_fail@plt+0x3e74>
   15310:	mov	r0, r9
   15314:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15318:	bl	1a480 <argp_parse@@Base+0x232c>
   1531c:	b	152c8 <__assert_fail@plt+0x3e8c>
   15320:	add	r0, r3, #1
   15324:	mov	r2, r8
   15328:	movw	r1, #49868	; 0xc2cc
   1532c:	movt	r1, #1
   15330:	str	r0, [fp, #-40]	; 0xffffffd8
   15334:	mov	r0, r9
   15338:	strb	r5, [r3]
   1533c:	bl	1a480 <argp_parse@@Base+0x232c>
   15340:	ldrd	r4, [r6]
   15344:	cmp	r5, #0
   15348:	bne	15200 <__assert_fail@plt+0x3dc4>
   1534c:	b	152e0 <__assert_fail@plt+0x3ea4>
   15350:	ldr	r3, [r0, #16]
   15354:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15358:	strd	r6, [sp, #8]
   1535c:	strd	r8, [sp, #16]
   15360:	str	lr, [sp, #24]
   15364:	sub	sp, sp, #12
   15368:	cmp	r3, #0
   1536c:	movne	r2, r3
   15370:	bne	1537c <__assert_fail@plt+0x3f40>
   15374:	b	1567c <__assert_fail@plt+0x4240>
   15378:	mov	r2, ip
   1537c:	ldr	ip, [r2, #12]
   15380:	cmp	ip, #0
   15384:	bne	15378 <__assert_fail@plt+0x3f3c>
   15388:	ldr	lr, [r2, #8]
   1538c:	ldr	r2, [r1, #16]
   15390:	cmp	r2, #0
   15394:	movne	ip, r2
   15398:	bne	153a4 <__assert_fail@plt+0x3f68>
   1539c:	b	15674 <__assert_fail@plt+0x4238>
   153a0:	mov	ip, r4
   153a4:	ldr	r4, [ip, #12]
   153a8:	cmp	r4, #0
   153ac:	bne	153a0 <__assert_fail@plt+0x3f64>
   153b0:	ldr	r4, [ip, #8]
   153b4:	mvn	ip, r4
   153b8:	lsr	ip, ip, #31
   153bc:	cmp	ip, lr, lsr #31
   153c0:	subne	r4, lr, r4
   153c4:	subeq	r4, r4, lr
   153c8:	cmp	r4, #0
   153cc:	bne	15434 <__assert_fail@plt+0x3ff8>
   153d0:	adds	r4, r2, #0
   153d4:	movne	r4, #1
   153d8:	cmp	r3, #0
   153dc:	rsbeq	r4, r4, #0
   153e0:	rsbne	r4, r4, #1
   153e4:	cmp	r4, #0
   153e8:	bne	15434 <__assert_fail@plt+0x3ff8>
   153ec:	cmp	r3, #0
   153f0:	mov	r5, r1
   153f4:	mov	r6, r0
   153f8:	beq	1548c <__assert_fail@plt+0x4050>
   153fc:	ldr	r0, [r2, #20]
   15400:	ldr	ip, [r3, #20]
   15404:	cmp	ip, r0
   15408:	bgt	15450 <__assert_fail@plt+0x4014>
   1540c:	bge	15478 <__assert_fail@plt+0x403c>
   15410:	ldr	r2, [r2, #12]
   15414:	ldr	r1, [r2, #20]
   15418:	cmp	ip, r1
   1541c:	blt	15410 <__assert_fail@plt+0x3fd4>
   15420:	mov	r1, r2
   15424:	mov	r0, r3
   15428:	bl	1466c <__assert_fail@plt+0x3230>
   1542c:	subs	r4, r0, #0
   15430:	mvneq	r4, #0
   15434:	mov	r0, r4
   15438:	add	sp, sp, #12
   1543c:	ldrd	r4, [sp]
   15440:	ldrd	r6, [sp, #8]
   15444:	ldrd	r8, [sp, #16]
   15448:	add	sp, sp, #24
   1544c:	pop	{pc}		; (ldr pc, [sp], #4)
   15450:	ldr	r3, [r3, #12]
   15454:	ldr	r1, [r3, #20]
   15458:	cmp	r0, r1
   1545c:	blt	15450 <__assert_fail@plt+0x4014>
   15460:	mov	r1, r2
   15464:	mov	r0, r3
   15468:	bl	1466c <__assert_fail@plt+0x3230>
   1546c:	subs	r4, r0, #0
   15470:	moveq	r4, #1
   15474:	b	15434 <__assert_fail@plt+0x3ff8>
   15478:	mov	r1, r2
   1547c:	mov	r0, r3
   15480:	bl	1466c <__assert_fail@plt+0x3230>
   15484:	subs	r4, r0, #0
   15488:	bne	15434 <__assert_fail@plt+0x3ff8>
   1548c:	ldr	r4, [r5, #12]
   15490:	ldr	r3, [r6, #12]
   15494:	mvn	r2, r4
   15498:	lsr	r2, r2, #31
   1549c:	cmp	r2, r3, lsr #31
   154a0:	subne	r4, r3, r4
   154a4:	subeq	r4, r4, r3
   154a8:	cmp	r4, #0
   154ac:	bne	15434 <__assert_fail@plt+0x3ff8>
   154b0:	ldr	r7, [r6]
   154b4:	ldr	r2, [r6, #4]
   154b8:	cmp	r2, #0
   154bc:	beq	154e8 <__assert_fail@plt+0x40ac>
   154c0:	add	r3, r7, #24
   154c4:	ldr	r1, [r3, #-24]	; 0xffffffe8
   154c8:	cmp	r1, #0
   154cc:	beq	154dc <__assert_fail@plt+0x40a0>
   154d0:	ldr	r0, [r3, #-12]
   154d4:	tst	r0, #2
   154d8:	beq	15684 <__assert_fail@plt+0x4248>
   154dc:	subs	r2, r2, #1
   154e0:	add	r3, r3, #24
   154e4:	bne	154c4 <__assert_fail@plt+0x4088>
   154e8:	mov	lr, #0
   154ec:	ldr	ip, [r5]
   154f0:	ldr	r2, [r5, #4]
   154f4:	str	lr, [sp]
   154f8:	cmp	r2, lr
   154fc:	beq	156e0 <__assert_fail@plt+0x42a4>
   15500:	add	r3, ip, #24
   15504:	ldr	r1, [r3, #-24]	; 0xffffffe8
   15508:	cmp	r1, #0
   1550c:	beq	1551c <__assert_fail@plt+0x40e0>
   15510:	ldr	r0, [r3, #-12]
   15514:	tst	r0, #2
   15518:	beq	1552c <__assert_fail@plt+0x40f0>
   1551c:	subs	r2, r2, #1
   15520:	add	r3, r3, #24
   15524:	bne	15504 <__assert_fail@plt+0x40c8>
   15528:	mov	r1, r2
   1552c:	ldr	r3, [r7, #12]
   15530:	str	r1, [sp, #4]
   15534:	ands	r3, lr, r3, lsr #3
   15538:	bne	156a0 <__assert_fail@plt+0x4264>
   1553c:	ldr	r3, [ip, #12]
   15540:	tst	r3, #8
   15544:	beq	1556c <__assert_fail@plt+0x4130>
   15548:	ldr	r3, [sp, #4]
   1554c:	cmp	r3, #0
   15550:	beq	1556c <__assert_fail@plt+0x4130>
   15554:	add	r0, sp, #4
   15558:	bl	147c4 <__assert_fail@plt+0x3388>
   1555c:	cmp	r0, #0
   15560:	subne	r4, r4, #1
   15564:	cmp	r4, #0
   15568:	bne	15434 <__assert_fail@plt+0x3ff8>
   1556c:	ldr	r2, [r6, #20]
   15570:	mov	r0, r6
   15574:	mov	r3, #0
   15578:	movw	r1, #18284	; 0x476c
   1557c:	movt	r1, #1
   15580:	ldr	r2, [r2, #24]
   15584:	bl	1506c <__assert_fail@plt+0x3c30>
   15588:	ldr	r2, [r5, #20]
   1558c:	uxtb	r6, r0
   15590:	movw	r1, #18284	; 0x476c
   15594:	movt	r1, #1
   15598:	mov	r0, r5
   1559c:	mov	r3, #0
   155a0:	ldr	r2, [r2, #24]
   155a4:	bl	1506c <__assert_fail@plt+0x3c30>
   155a8:	cmp	r6, #0
   155ac:	uxtb	r5, r0
   155b0:	movne	r7, r6
   155b4:	lslne	r4, r6, #2
   155b8:	bne	155d4 <__assert_fail@plt+0x4198>
   155bc:	ldr	r3, [sp]
   155c0:	cmp	r3, #0
   155c4:	ldrbne	r7, [r3]
   155c8:	moveq	r4, r6
   155cc:	moveq	r7, r6
   155d0:	lslne	r4, r7, #2
   155d4:	cmp	r5, #0
   155d8:	movne	r8, r5
   155dc:	lslne	r9, r5, #2
   155e0:	bne	155fc <__assert_fail@plt+0x41c0>
   155e4:	ldr	r3, [sp, #4]
   155e8:	cmp	r3, #0
   155ec:	ldrbne	r8, [r3]
   155f0:	moveq	r9, r5
   155f4:	moveq	r8, r5
   155f8:	lslne	r9, r8, #2
   155fc:	bl	11280 <__ctype_tolower_loc@plt>
   15600:	ldr	r3, [r0]
   15604:	ldr	r4, [r3, r4]
   15608:	ldr	r3, [r3, r9]
   1560c:	subs	r4, r4, r3
   15610:	bne	15434 <__assert_fail@plt+0x3ff8>
   15614:	subs	r4, r8, r7
   15618:	bne	15434 <__assert_fail@plt+0x3ff8>
   1561c:	adds	r4, r5, #0
   15620:	movne	r4, #1
   15624:	cmp	r6, #0
   15628:	rsbeq	r4, r4, #0
   1562c:	rsbne	r4, r4, #1
   15630:	cmp	r4, #0
   15634:	bne	15434 <__assert_fail@plt+0x3ff8>
   15638:	cmp	r6, #0
   1563c:	bne	15434 <__assert_fail@plt+0x3ff8>
   15640:	ldrd	r0, [sp]
   15644:	adds	r4, r1, #0
   15648:	movne	r4, #1
   1564c:	cmp	r0, #0
   15650:	rsbeq	r4, r4, #0
   15654:	rsbne	r4, r4, #1
   15658:	cmp	r4, #0
   1565c:	bne	15434 <__assert_fail@plt+0x3ff8>
   15660:	cmp	r0, #0
   15664:	beq	15434 <__assert_fail@plt+0x3ff8>
   15668:	bl	11208 <strcasecmp@plt>
   1566c:	mov	r4, r0
   15670:	b	15434 <__assert_fail@plt+0x3ff8>
   15674:	ldr	r4, [r1, #12]
   15678:	b	153b4 <__assert_fail@plt+0x3f78>
   1567c:	ldr	lr, [r0, #12]
   15680:	b	1538c <__assert_fail@plt+0x3f50>
   15684:	str	r1, [sp]
   15688:	ldr	r2, [r5, #4]
   1568c:	ldr	ip, [r5]
   15690:	cmp	r2, #0
   15694:	beq	156e8 <__assert_fail@plt+0x42ac>
   15698:	mov	lr, #1
   1569c:	b	15500 <__assert_fail@plt+0x40c4>
   156a0:	mov	r0, sp
   156a4:	bl	147c4 <__assert_fail@plt+0x3388>
   156a8:	cmp	r0, #0
   156ac:	beq	156d8 <__assert_fail@plt+0x429c>
   156b0:	ldr	r3, [r5]
   156b4:	ldr	r3, [r3, #12]
   156b8:	tst	r3, #8
   156bc:	moveq	r4, #1
   156c0:	beq	15434 <__assert_fail@plt+0x3ff8>
   156c4:	ldr	r3, [sp, #4]
   156c8:	mov	r4, #1
   156cc:	cmp	r3, #0
   156d0:	beq	15434 <__assert_fail@plt+0x3ff8>
   156d4:	b	15554 <__assert_fail@plt+0x4118>
   156d8:	ldr	ip, [r5]
   156dc:	b	1553c <__assert_fail@plt+0x4100>
   156e0:	str	r2, [sp, #4]
   156e4:	b	1556c <__assert_fail@plt+0x4130>
   156e8:	mov	r1, r2
   156ec:	mov	lr, #1
   156f0:	b	1552c <__assert_fail@plt+0x40f0>
   156f4:	strd	r4, [sp, #-16]!
   156f8:	mov	r5, r1
   156fc:	mov	r4, r0
   15700:	ldr	r2, [r0, #16]
   15704:	ldr	r1, [r0, #24]
   15708:	ldr	r3, [r0, #28]
   1570c:	str	r6, [sp, #8]
   15710:	str	lr, [sp, #12]
   15714:	sub	r3, r3, r1
   15718:	cmp	r3, r2
   1571c:	bhi	15784 <__assert_fail@plt+0x4348>
   15720:	ldr	r1, [r4, #20]
   15724:	mov	r6, #32
   15728:	cmp	r1, #0
   1572c:	subge	r5, r5, r1
   15730:	b	15760 <__assert_fail@plt+0x4324>
   15734:	ldr	r3, [r4, #28]
   15738:	ldr	r2, [r4, #32]
   1573c:	cmp	r3, r2
   15740:	bcc	15754 <__assert_fail@plt+0x4318>
   15744:	bl	1a460 <argp_parse@@Base+0x230c>
   15748:	cmp	r0, #0
   1574c:	beq	15760 <__assert_fail@plt+0x4324>
   15750:	ldr	r3, [r4, #28]
   15754:	add	r2, r3, #1
   15758:	str	r2, [r4, #28]
   1575c:	strb	r6, [r3]
   15760:	cmp	r5, #0
   15764:	mov	r1, #1
   15768:	mov	r0, r4
   1576c:	sub	r5, r5, #1
   15770:	bgt	15734 <__assert_fail@plt+0x42f8>
   15774:	ldrd	r4, [sp]
   15778:	ldr	r6, [sp, #8]
   1577c:	add	sp, sp, #12
   15780:	pop	{pc}		; (ldr pc, [sp], #4)
   15784:	bl	19df4 <argp_parse@@Base+0x1ca0>
   15788:	b	15720 <__assert_fail@plt+0x42e4>
   1578c:	ldrd	r2, [r0, #24]
   15790:	strd	r4, [sp, #-16]!
   15794:	mov	r5, r1
   15798:	mov	r4, r0
   1579c:	ldr	r1, [r0, #16]
   157a0:	str	r6, [sp, #8]
   157a4:	str	lr, [sp, #12]
   157a8:	sub	r2, r3, r2
   157ac:	cmp	r2, r1
   157b0:	movls	ip, r3
   157b4:	bhi	15858 <__assert_fail@plt+0x441c>
   157b8:	ldr	r0, [r4, #8]
   157bc:	ldr	r1, [r4, #20]
   157c0:	ldr	r2, [r4, #32]
   157c4:	cmp	r1, #0
   157c8:	addge	r5, r5, r1
   157cc:	cmp	r5, r0
   157d0:	bcc	15818 <__assert_fail@plt+0x43dc>
   157d4:	cmp	r3, r2
   157d8:	bcs	157fc <__assert_fail@plt+0x43c0>
   157dc:	add	r1, r3, #1
   157e0:	mov	r2, #10
   157e4:	str	r1, [r4, #28]
   157e8:	strb	r2, [r3]
   157ec:	ldrd	r4, [sp]
   157f0:	ldr	r6, [sp, #8]
   157f4:	add	sp, sp, #12
   157f8:	pop	{pc}		; (ldr pc, [sp], #4)
   157fc:	mov	r1, #1
   15800:	mov	r0, r4
   15804:	bl	1a460 <argp_parse@@Base+0x230c>
   15808:	cmp	r0, #0
   1580c:	beq	157ec <__assert_fail@plt+0x43b0>
   15810:	ldr	r3, [r4, #28]
   15814:	b	157dc <__assert_fail@plt+0x43a0>
   15818:	cmp	r3, r2
   1581c:	bcc	15838 <__assert_fail@plt+0x43fc>
   15820:	mov	r1, #1
   15824:	mov	r0, r4
   15828:	bl	1a460 <argp_parse@@Base+0x230c>
   1582c:	cmp	r0, #0
   15830:	beq	157ec <__assert_fail@plt+0x43b0>
   15834:	ldr	ip, [r4, #28]
   15838:	add	r2, ip, #1
   1583c:	mov	r3, #32
   15840:	str	r2, [r4, #28]
   15844:	strb	r3, [ip]
   15848:	ldrd	r4, [sp]
   1584c:	ldr	r6, [sp, #8]
   15850:	add	sp, sp, #12
   15854:	pop	{pc}		; (ldr pc, [sp], #4)
   15858:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1585c:	ldr	r3, [r4, #28]
   15860:	mov	ip, r3
   15864:	b	157b8 <__assert_fail@plt+0x437c>
   15868:	strd	r4, [sp, #-16]!
   1586c:	ldr	r5, [r0, #8]
   15870:	str	r6, [sp, #8]
   15874:	str	lr, [sp, #12]
   15878:	cmp	r5, #0
   1587c:	beq	158d0 <__assert_fail@plt+0x4494>
   15880:	ldr	r2, [r0, #12]
   15884:	ldr	r1, [r1, #12]
   15888:	orr	r2, r2, r1
   1588c:	tst	r2, #16
   15890:	bne	158bc <__assert_fail@plt+0x4480>
   15894:	tst	r2, #1
   15898:	mov	r6, r3
   1589c:	mov	r4, r0
   158a0:	beq	158e0 <__assert_fail@plt+0x44a4>
   158a4:	movw	r1, #49912	; 0xc2f8
   158a8:	movt	r1, #1
   158ac:	ldr	r2, [r4, #4]
   158b0:	mov	r3, r5
   158b4:	mov	r0, r6
   158b8:	bl	1a480 <argp_parse@@Base+0x232c>
   158bc:	ldrd	r4, [sp]
   158c0:	mov	r0, #0
   158c4:	ldr	r6, [sp, #8]
   158c8:	add	sp, sp, #12
   158cc:	pop	{pc}		; (ldr pc, [sp], #4)
   158d0:	ldr	r5, [r1, #8]
   158d4:	cmp	r5, #0
   158d8:	beq	158bc <__assert_fail@plt+0x4480>
   158dc:	b	15880 <__assert_fail@plt+0x4444>
   158e0:	mov	r0, r5
   158e4:	bl	112d4 <strlen@plt>
   158e8:	add	r1, r0, #6
   158ec:	mov	r0, r6
   158f0:	bl	1578c <__assert_fail@plt+0x4350>
   158f4:	mov	r3, r5
   158f8:	mov	r0, r6
   158fc:	ldr	r2, [r4, #4]
   15900:	movw	r1, #49924	; 0xc304
   15904:	movt	r1, #1
   15908:	bl	1a480 <argp_parse@@Base+0x232c>
   1590c:	b	158bc <__assert_fail@plt+0x4480>
   15910:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15914:	mov	r4, r3
   15918:	ldr	ip, [r0, #8]
   1591c:	ldr	r3, [r0, #20]
   15920:	cmp	r3, #0
   15924:	ldr	r3, [r0, #16]
   15928:	strd	r6, [sp, #8]
   1592c:	strd	r8, [sp, #16]
   15930:	mov	r8, r2
   15934:	ldr	r2, [r2]
   15938:	strd	sl, [sp, #24]
   1593c:	mov	sl, r1
   15940:	str	lr, [sp, #32]
   15944:	sub	sp, sp, #28
   15948:	ldr	r7, [sp, #64]	; 0x40
   1594c:	str	r3, [sp, #8]
   15950:	str	ip, [sp, #12]
   15954:	str	r2, [sp, #16]
   15958:	beq	15b28 <__assert_fail@plt+0x46ec>
   1595c:	mov	r2, r0
   15960:	mov	r1, #6
   15964:	movt	r1, #512	; 0x200
   15968:	mov	r3, sl
   1596c:	mov	r0, ip
   15970:	bl	1495c <__assert_fail@plt+0x3520>
   15974:	mov	r9, r0
   15978:	cmp	r9, #0
   1597c:	beq	15af8 <__assert_fail@plt+0x46bc>
   15980:	mov	r1, #10
   15984:	mov	r0, r9
   15988:	bl	11154 <strchrnul@plt>
   1598c:	ldrb	r3, [r0]
   15990:	mov	r5, r0
   15994:	cmp	r3, #0
   15998:	moveq	r6, r9
   1599c:	streq	r3, [sp, #20]
   159a0:	beq	159f0 <__assert_fail@plt+0x45b4>
   159a4:	ldr	r3, [sp, #16]
   159a8:	ldrb	r3, [r3]
   159ac:	cmp	r3, #0
   159b0:	beq	15b48 <__assert_fail@plt+0x470c>
   159b4:	mov	fp, #0
   159b8:	mov	r5, r3
   159bc:	add	r6, r0, #1
   159c0:	add	fp, fp, #1
   159c4:	mov	r0, r6
   159c8:	mov	r1, #10
   159cc:	bl	11154 <strchrnul@plt>
   159d0:	cmp	fp, r5
   159d4:	bne	159bc <__assert_fail@plt+0x4580>
   159d8:	mov	r5, r0
   159dc:	ldr	r3, [r8]
   159e0:	mov	r2, #1
   159e4:	str	r2, [sp, #20]
   159e8:	add	r3, r3, r2
   159ec:	str	r3, [r8]
   159f0:	add	r1, r5, #1
   159f4:	mov	r0, r7
   159f8:	sub	r1, r1, r6
   159fc:	sub	fp, r5, r6
   15a00:	bl	1578c <__assert_fail@plt+0x4350>
   15a04:	ldr	r0, [r7, #28]
   15a08:	ldr	r2, [r7, #32]
   15a0c:	add	r3, r0, fp
   15a10:	cmp	r2, r3
   15a14:	bcs	15a30 <__assert_fail@plt+0x45f4>
   15a18:	mov	r1, fp
   15a1c:	mov	r0, r7
   15a20:	bl	1a460 <argp_parse@@Base+0x230c>
   15a24:	cmp	r0, #0
   15a28:	beq	15a48 <__assert_fail@plt+0x460c>
   15a2c:	ldr	r0, [r7, #28]
   15a30:	mov	r2, fp
   15a34:	mov	r1, r6
   15a38:	bl	11184 <memcpy@plt>
   15a3c:	ldr	r3, [r7, #28]
   15a40:	add	fp, r3, fp
   15a44:	str	fp, [r7, #28]
   15a48:	ldr	r3, [sp, #12]
   15a4c:	cmp	r3, r9
   15a50:	beq	15a5c <__assert_fail@plt+0x4620>
   15a54:	mov	r0, r9
   15a58:	bl	19138 <argp_parse@@Base+0xfe4>
   15a5c:	ldr	r3, [sp, #8]
   15a60:	cmp	r3, #0
   15a64:	beq	15aa8 <__assert_fail@plt+0x466c>
   15a68:	ldr	r2, [r3]
   15a6c:	cmp	r2, #0
   15a70:	beq	15aa8 <__assert_fail@plt+0x466c>
   15a74:	ldr	r6, [sp, #8]
   15a78:	mov	r3, r4
   15a7c:	mov	r0, r2
   15a80:	mov	r1, sl
   15a84:	str	r7, [sp]
   15a88:	mov	r2, r8
   15a8c:	bl	15910 <__assert_fail@plt+0x44d4>
   15a90:	ldr	r2, [r6, #16]!
   15a94:	clz	r3, r0
   15a98:	lsr	r3, r3, #5
   15a9c:	cmp	r2, #0
   15aa0:	bne	15a7c <__assert_fail@plt+0x4640>
   15aa4:	mov	r4, r3
   15aa8:	ldr	r3, [sp, #20]
   15aac:	cmp	r4, #0
   15ab0:	moveq	r3, #0
   15ab4:	cmp	r3, #0
   15ab8:	beq	15b1c <__assert_fail@plt+0x46e0>
   15abc:	ldrb	r3, [r5]
   15ac0:	ldr	r2, [sp, #16]
   15ac4:	cmp	r3, #0
   15ac8:	ldrb	r0, [r2]
   15acc:	beq	15b30 <__assert_fail@plt+0x46f4>
   15ad0:	add	r4, r0, #1
   15ad4:	mov	r0, #1
   15ad8:	strb	r4, [r2]
   15adc:	add	sp, sp, #28
   15ae0:	ldrd	r4, [sp]
   15ae4:	ldrd	r6, [sp, #8]
   15ae8:	ldrd	r8, [sp, #16]
   15aec:	ldrd	sl, [sp, #24]
   15af0:	add	sp, sp, #32
   15af4:	pop	{pc}		; (ldr pc, [sp], #4)
   15af8:	ldr	r3, [sp, #8]
   15afc:	cmp	r3, #0
   15b00:	beq	15b1c <__assert_fail@plt+0x46e0>
   15b04:	ldr	r3, [sp, #8]
   15b08:	ldr	r2, [r3]
   15b0c:	cmp	r2, #0
   15b10:	movne	r5, r9
   15b14:	strne	r5, [sp, #20]
   15b18:	bne	15a74 <__assert_fail@plt+0x4638>
   15b1c:	clz	r0, r4
   15b20:	lsr	r0, r0, #5
   15b24:	b	15adc <__assert_fail@plt+0x46a0>
   15b28:	ldr	r9, [sp, #12]
   15b2c:	b	15978 <__assert_fail@plt+0x453c>
   15b30:	cmp	r0, #0
   15b34:	beq	15adc <__assert_fail@plt+0x46a0>
   15b38:	ldr	r2, [sp, #16]
   15b3c:	mov	r0, r3
   15b40:	strb	r3, [r2]
   15b44:	b	15adc <__assert_fail@plt+0x46a0>
   15b48:	mov	r6, r9
   15b4c:	b	159dc <__assert_fail@plt+0x45a0>
   15b50:	cmp	r1, #0
   15b54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b58:	strd	r6, [sp, #8]
   15b5c:	mov	r6, r2
   15b60:	strd	r8, [sp, #16]
   15b64:	mov	r8, r0
   15b68:	strd	sl, [sp, #24]
   15b6c:	str	lr, [sp, #32]
   15b70:	sub	sp, sp, #12
   15b74:	beq	15ba0 <__assert_fail@plt+0x4764>
   15b78:	ldr	r3, [r1, #20]
   15b7c:	cmp	r3, #0
   15b80:	beq	15ba0 <__assert_fail@plt+0x4764>
   15b84:	mov	r2, r1
   15b88:	mov	r1, #3
   15b8c:	movt	r1, #512	; 0x200
   15b90:	ldr	r3, [r6, #16]
   15b94:	bl	1495c <__assert_fail@plt+0x3520>
   15b98:	mov	r4, r0
   15b9c:	b	15ba4 <__assert_fail@plt+0x4768>
   15ba0:	mov	r4, r8
   15ba4:	cmp	r4, #0
   15ba8:	beq	15bc4 <__assert_fail@plt+0x4788>
   15bac:	ldrb	r2, [r4]
   15bb0:	ldr	r3, [r6, #8]
   15bb4:	cmp	r2, #0
   15bb8:	bne	15bf0 <__assert_fail@plt+0x47b4>
   15bbc:	mov	r2, #1
   15bc0:	str	r2, [r3, #4]
   15bc4:	cmp	r8, r4
   15bc8:	beq	15cd0 <__assert_fail@plt+0x4894>
   15bcc:	mov	r0, r4
   15bd0:	add	sp, sp, #12
   15bd4:	ldrd	r4, [sp]
   15bd8:	ldrd	r6, [sp, #8]
   15bdc:	ldrd	r8, [sp, #16]
   15be0:	ldrd	sl, [sp, #24]
   15be4:	ldr	lr, [sp, #32]
   15be8:	add	sp, sp, #36	; 0x24
   15bec:	b	19138 <argp_parse@@Base+0xfe4>
   15bf0:	ldr	r3, [r3]
   15bf4:	ldr	r5, [r6, #4]
   15bf8:	cmp	r3, #0
   15bfc:	beq	15c3c <__assert_fail@plt+0x4800>
   15c00:	ldr	r3, [r5, #28]
   15c04:	ldr	r2, [r5, #32]
   15c08:	cmp	r3, r2
   15c0c:	bcc	15c28 <__assert_fail@plt+0x47ec>
   15c10:	mov	r1, #1
   15c14:	mov	r0, r5
   15c18:	bl	1a460 <argp_parse@@Base+0x230c>
   15c1c:	cmp	r0, #0
   15c20:	ldrne	r3, [r5, #28]
   15c24:	beq	15c38 <__assert_fail@plt+0x47fc>
   15c28:	add	r1, r3, #1
   15c2c:	mov	r2, #10
   15c30:	str	r1, [r5, #28]
   15c34:	strb	r2, [r3]
   15c38:	ldr	r5, [r6, #4]
   15c3c:	movw	r9, #54752	; 0xd5e0
   15c40:	movt	r9, #2
   15c44:	mov	r0, r5
   15c48:	ldr	r1, [r9, #24]
   15c4c:	bl	156f4 <__assert_fail@plt+0x42b8>
   15c50:	ldr	r5, [r6, #4]
   15c54:	ldr	sl, [r9, #24]
   15c58:	ldr	r1, [r5, #16]
   15c5c:	ldr	r3, [r5, #24]
   15c60:	ldr	r7, [r5, #28]
   15c64:	sub	r3, r7, r3
   15c68:	cmp	r3, r1
   15c6c:	movls	fp, r5
   15c70:	strls	sl, [r5, #4]
   15c74:	bhi	15d6c <__assert_fail@plt+0x4930>
   15c78:	mov	r0, r4
   15c7c:	str	sl, [fp, #12]
   15c80:	bl	112d4 <strlen@plt>
   15c84:	subs	r9, r0, #0
   15c88:	bne	15d1c <__assert_fail@plt+0x48e0>
   15c8c:	ldr	r2, [r5, #16]
   15c90:	ldr	r3, [r5, #24]
   15c94:	sub	r3, r7, r3
   15c98:	cmp	r3, r2
   15c9c:	movls	r9, r5
   15ca0:	bhi	15d08 <__assert_fail@plt+0x48cc>
   15ca4:	ldr	r3, [r9, #32]
   15ca8:	mov	r2, #0
   15cac:	str	r2, [r5, #4]
   15cb0:	cmp	r3, r7
   15cb4:	bls	15cec <__assert_fail@plt+0x48b0>
   15cb8:	add	r2, r7, #1
   15cbc:	mov	r3, #10
   15cc0:	str	r2, [r9, #28]
   15cc4:	strb	r3, [r7]
   15cc8:	ldr	r3, [r6, #8]
   15ccc:	b	15bbc <__assert_fail@plt+0x4780>
   15cd0:	add	sp, sp, #12
   15cd4:	ldrd	r4, [sp]
   15cd8:	ldrd	r6, [sp, #8]
   15cdc:	ldrd	r8, [sp, #16]
   15ce0:	ldrd	sl, [sp, #24]
   15ce4:	add	sp, sp, #32
   15ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cec:	mov	r1, #1
   15cf0:	mov	r0, r9
   15cf4:	bl	1a460 <argp_parse@@Base+0x230c>
   15cf8:	cmp	r0, #0
   15cfc:	ldrne	r7, [r9, #28]
   15d00:	bne	15cb8 <__assert_fail@plt+0x487c>
   15d04:	b	15cc8 <__assert_fail@plt+0x488c>
   15d08:	mov	r0, r5
   15d0c:	bl	19df4 <argp_parse@@Base+0x1ca0>
   15d10:	ldr	r9, [r6, #4]
   15d14:	ldr	r7, [r9, #28]
   15d18:	b	15ca4 <__assert_fail@plt+0x4868>
   15d1c:	ldr	r2, [r5, #32]
   15d20:	add	r3, r7, r9
   15d24:	cmp	r2, r3
   15d28:	bcs	15d44 <__assert_fail@plt+0x4908>
   15d2c:	mov	r1, r9
   15d30:	mov	r0, r5
   15d34:	bl	1a460 <argp_parse@@Base+0x230c>
   15d38:	cmp	r0, #0
   15d3c:	beq	15d60 <__assert_fail@plt+0x4924>
   15d40:	ldr	r7, [r5, #28]
   15d44:	mov	r2, r9
   15d48:	mov	r0, r7
   15d4c:	mov	r1, r4
   15d50:	bl	11184 <memcpy@plt>
   15d54:	ldr	r3, [r5, #28]
   15d58:	add	r9, r3, r9
   15d5c:	str	r9, [r5, #28]
   15d60:	ldr	r5, [r6, #4]
   15d64:	ldr	r7, [r5, #28]
   15d68:	b	15c8c <__assert_fail@plt+0x4850>
   15d6c:	mov	r0, r5
   15d70:	str	sl, [sp, #4]
   15d74:	bl	19df4 <argp_parse@@Base+0x1ca0>
   15d78:	ldr	fp, [r6, #4]
   15d7c:	ldr	r2, [sp, #4]
   15d80:	ldr	sl, [r9, #24]
   15d84:	ldr	r1, [fp, #16]
   15d88:	ldr	r3, [fp, #24]
   15d8c:	ldr	r7, [fp, #28]
   15d90:	str	r2, [r5, #4]
   15d94:	sub	r3, r7, r3
   15d98:	cmp	r3, r1
   15d9c:	bls	15db4 <__assert_fail@plt+0x4978>
   15da0:	mov	r0, fp
   15da4:	bl	19df4 <argp_parse@@Base+0x1ca0>
   15da8:	ldr	r5, [r6, #4]
   15dac:	ldr	r7, [r5, #28]
   15db0:	b	15c78 <__assert_fail@plt+0x483c>
   15db4:	mov	r5, fp
   15db8:	b	15c78 <__assert_fail@plt+0x483c>
   15dbc:	ldr	r3, [r1, #12]
   15dc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15dc4:	mov	r4, r1
   15dc8:	ldr	r5, [r1, #4]
   15dcc:	strd	r6, [sp, #8]
   15dd0:	mov	r7, r0
   15dd4:	str	r8, [sp, #16]
   15dd8:	cmp	r3, #0
   15ddc:	str	lr, [sp, #20]
   15de0:	beq	15f0c <__assert_fail@plt+0x4ad0>
   15de4:	ldr	r2, [r1]
   15de8:	ldr	r3, [r1, #8]
   15dec:	ldr	r6, [r2, #16]
   15df0:	ldr	r8, [r3]
   15df4:	ldr	r3, [r3, #4]
   15df8:	cmp	r3, #0
   15dfc:	cmpne	r8, #0
   15e00:	bne	15eb4 <__assert_fail@plt+0x4a78>
   15e04:	cmp	r6, #0
   15e08:	beq	15e8c <__assert_fail@plt+0x4a50>
   15e0c:	ldr	r0, [r6]
   15e10:	cmp	r0, #0
   15e14:	beq	15e8c <__assert_fail@plt+0x4a50>
   15e18:	ldrb	r3, [r0]
   15e1c:	cmp	r3, #0
   15e20:	beq	15e8c <__assert_fail@plt+0x4a50>
   15e24:	cmp	r8, #0
   15e28:	beq	15e58 <__assert_fail@plt+0x4a1c>
   15e2c:	ldr	r3, [r8, #16]
   15e30:	cmp	r3, r6
   15e34:	beq	15e8c <__assert_fail@plt+0x4a50>
   15e38:	cmp	r3, #0
   15e3c:	beq	15e58 <__assert_fail@plt+0x4a1c>
   15e40:	ldr	r3, [r3, #12]
   15e44:	cmp	r3, #0
   15e48:	cmpne	r6, r3
   15e4c:	bne	15e40 <__assert_fail@plt+0x4a04>
   15e50:	cmp	r6, r3
   15e54:	beq	15e8c <__assert_fail@plt+0x4a50>
   15e58:	mov	r2, r4
   15e5c:	ldr	r1, [r6, #16]
   15e60:	ldr	r8, [r5, #12]
   15e64:	bl	15b50 <__assert_fail@plt+0x4714>
   15e68:	ldr	r6, [r4, #4]
   15e6c:	ldr	r2, [r6, #16]
   15e70:	ldr	r1, [r6, #24]
   15e74:	ldr	r3, [r6, #28]
   15e78:	sub	r3, r3, r1
   15e7c:	cmp	r3, r2
   15e80:	movls	r5, r6
   15e84:	bhi	15f5c <__assert_fail@plt+0x4b20>
   15e88:	str	r8, [r6, #12]
   15e8c:	mov	r3, #0
   15e90:	str	r3, [r4, #12]
   15e94:	mov	r1, r7
   15e98:	mov	r0, r5
   15e9c:	ldrd	r4, [sp]
   15ea0:	ldrd	r6, [sp, #8]
   15ea4:	ldr	r8, [sp, #16]
   15ea8:	ldr	lr, [sp, #20]
   15eac:	add	sp, sp, #24
   15eb0:	b	156f4 <__assert_fail@plt+0x42b8>
   15eb4:	ldr	r2, [r2, #12]
   15eb8:	ldr	r3, [r8, #12]
   15ebc:	cmp	r2, r3
   15ec0:	beq	15e04 <__assert_fail@plt+0x49c8>
   15ec4:	ldr	r3, [r5, #28]
   15ec8:	ldr	r2, [r5, #32]
   15ecc:	cmp	r3, r2
   15ed0:	bcc	15eec <__assert_fail@plt+0x4ab0>
   15ed4:	mov	r1, #1
   15ed8:	mov	r0, r5
   15edc:	bl	1a460 <argp_parse@@Base+0x230c>
   15ee0:	cmp	r0, #0
   15ee4:	ldrne	r3, [r5, #28]
   15ee8:	beq	15efc <__assert_fail@plt+0x4ac0>
   15eec:	add	r1, r3, #1
   15ef0:	mov	r2, #10
   15ef4:	str	r1, [r5, #28]
   15ef8:	strb	r2, [r3]
   15efc:	cmp	r6, #0
   15f00:	ldr	r5, [r4, #4]
   15f04:	bne	15e0c <__assert_fail@plt+0x49d0>
   15f08:	b	15e8c <__assert_fail@plt+0x4a50>
   15f0c:	ldr	r3, [r5, #28]
   15f10:	ldr	r1, [r5, #32]
   15f14:	add	r2, r3, #2
   15f18:	cmp	r1, r2
   15f1c:	bcs	15f38 <__assert_fail@plt+0x4afc>
   15f20:	mov	r1, #2
   15f24:	mov	r0, r5
   15f28:	bl	1a460 <argp_parse@@Base+0x230c>
   15f2c:	cmp	r0, #0
   15f30:	beq	15f54 <__assert_fail@plt+0x4b18>
   15f34:	ldr	r3, [r5, #28]
   15f38:	movw	r2, #46184	; 0xb468
   15f3c:	movt	r2, #1
   15f40:	ldrh	r2, [r2]
   15f44:	strh	r2, [r3]
   15f48:	ldr	r3, [r5, #28]
   15f4c:	add	r3, r3, #2
   15f50:	str	r3, [r5, #28]
   15f54:	ldr	r5, [r4, #4]
   15f58:	b	15e94 <__assert_fail@plt+0x4a58>
   15f5c:	mov	r0, r6
   15f60:	bl	19df4 <argp_parse@@Base+0x1ca0>
   15f64:	ldr	r5, [r4, #4]
   15f68:	b	15e88 <__assert_fail@plt+0x4a4c>
   15f6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f70:	strd	r6, [sp, #8]
   15f74:	mov	r7, r0
   15f78:	ldr	r6, [r0, #12]
   15f7c:	strd	r8, [sp, #16]
   15f80:	mov	r8, r2
   15f84:	strd	sl, [sp, #24]
   15f88:	mov	sl, r3
   15f8c:	mov	fp, r1
   15f90:	ldr	r3, [r0, #16]
   15f94:	str	lr, [sp, #32]
   15f98:	sub	sp, sp, #28
   15f9c:	cmp	r6, #0
   15fa0:	ldr	r5, [sp, #68]	; 0x44
   15fa4:	str	r3, [sp, #8]
   15fa8:	ldr	r3, [r0, #20]
   15fac:	beq	1631c <__assert_fail@plt+0x4ee0>
   15fb0:	mov	r1, #11
   15fb4:	mov	r0, r6
   15fb8:	str	r3, [sp, #12]
   15fbc:	bl	112e0 <strchr@plt>
   15fc0:	cmp	r8, #0
   15fc4:	mov	r9, r0
   15fc8:	ldr	r3, [sp, #12]
   15fcc:	bne	16218 <__assert_fail@plt+0x4ddc>
   15fd0:	cmp	r0, #0
   15fd4:	beq	16514 <__assert_fail@plt+0x50d8>
   15fd8:	subs	r1, r0, r6
   15fdc:	movne	r4, #1
   15fe0:	moveq	r4, #0
   15fe4:	cmp	r3, #0
   15fe8:	str	r1, [sp, #20]
   15fec:	beq	164b8 <__assert_fail@plt+0x507c>
   15ff0:	cmp	r1, #0
   15ff4:	beq	16508 <__assert_fail@plt+0x50cc>
   15ff8:	mov	r0, r6
   15ffc:	mov	r4, #1
   16000:	bl	11178 <strndup@plt>
   16004:	adds	r3, r0, #0
   16008:	mov	r6, r0
   1600c:	movne	r3, #1
   16010:	str	r3, [sp, #16]
   16014:	mov	r1, fp
   16018:	mov	r0, r7
   1601c:	bl	18fd4 <argp_parse@@Base+0xe80>
   16020:	mov	r2, r0
   16024:	mov	r1, r6
   16028:	ldr	r3, [r7, #20]
   1602c:	mov	r0, #1
   16030:	movt	r0, #512	; 0x200
   16034:	str	r2, [sp, #12]
   16038:	blx	r3
   1603c:	subs	r9, r0, #0
   16040:	moveq	r4, r9
   16044:	beq	160d4 <__assert_fail@plt+0x4c98>
   16048:	cmp	r6, r9
   1604c:	movne	r4, #0
   16050:	andeq	r4, r4, #1
   16054:	cmp	sl, #0
   16058:	ldr	r2, [r5, #28]
   1605c:	bne	16360 <__assert_fail@plt+0x4f24>
   16060:	cmp	r4, #0
   16064:	beq	162bc <__assert_fail@plt+0x4e80>
   16068:	ldr	r3, [sp, #20]
   1606c:	ldr	r0, [r5, #32]
   16070:	add	r1, r2, r3
   16074:	cmp	r0, r1
   16078:	bcs	16274 <__assert_fail@plt+0x4e38>
   1607c:	mov	r1, r3
   16080:	mov	r0, r5
   16084:	bl	1a460 <argp_parse@@Base+0x230c>
   16088:	cmp	r0, #0
   1608c:	ldr	r2, [r5, #28]
   16090:	bne	16274 <__assert_fail@plt+0x4e38>
   16094:	ldr	r0, [r5, #16]
   16098:	ldr	r1, [r5, #24]
   1609c:	sub	r2, r2, r1
   160a0:	cmp	r2, r0
   160a4:	bhi	163a8 <__assert_fail@plt+0x4f6c>
   160a8:	ldr	r1, [r5, #4]
   160ac:	ldr	r2, [r5, #20]
   160b0:	bic	r2, r2, r2, asr #31
   160b4:	cmp	r1, r2
   160b8:	bcc	16384 <__assert_fail@plt+0x4f48>
   160bc:	cmp	r9, r6
   160c0:	moveq	r4, #1
   160c4:	beq	160d4 <__assert_fail@plt+0x4c98>
   160c8:	mov	r0, r9
   160cc:	mov	r4, #1
   160d0:	bl	19138 <argp_parse@@Base+0xfe4>
   160d4:	ldr	r3, [sp, #16]
   160d8:	cmp	r3, #0
   160dc:	beq	160f4 <__assert_fail@plt+0x4cb8>
   160e0:	ldr	r3, [r7, #20]
   160e4:	cmp	r3, #0
   160e8:	beq	16174 <__assert_fail@plt+0x4d38>
   160ec:	mov	r0, r6
   160f0:	bl	19138 <argp_parse@@Base+0xfe4>
   160f4:	cmp	r8, #0
   160f8:	beq	16174 <__assert_fail@plt+0x4d38>
   160fc:	ldr	r3, [r7, #20]
   16100:	cmp	r3, #0
   16104:	beq	16174 <__assert_fail@plt+0x4d38>
   16108:	mov	r0, #4
   1610c:	movt	r0, #512	; 0x200
   16110:	ldr	r2, [sp, #12]
   16114:	mov	r1, #0
   16118:	blx	r3
   1611c:	subs	r6, r0, #0
   16120:	beq	16174 <__assert_fail@plt+0x4d38>
   16124:	orrs	r3, sl, r4
   16128:	bne	16444 <__assert_fail@plt+0x5008>
   1612c:	mov	r0, r6
   16130:	bl	112d4 <strlen@plt>
   16134:	subs	r4, r0, #0
   16138:	bne	163fc <__assert_fail@plt+0x4fc0>
   1613c:	mov	r0, r6
   16140:	bl	19138 <argp_parse@@Base+0xfe4>
   16144:	ldr	r2, [r5, #16]
   16148:	ldr	r1, [r5, #24]
   1614c:	ldr	r3, [r5, #28]
   16150:	sub	r3, r3, r1
   16154:	cmp	r3, r2
   16158:	bhi	16490 <__assert_fail@plt+0x5054>
   1615c:	ldr	r2, [r5, #4]
   16160:	ldr	r3, [r5, #20]
   16164:	bic	r3, r3, r3, asr #31
   16168:	cmp	r2, r3
   1616c:	bcc	16468 <__assert_fail@plt+0x502c>
   16170:	mov	r4, #1
   16174:	ldr	r7, [sp, #8]
   16178:	cmp	r7, #0
   1617c:	beq	161f8 <__assert_fail@plt+0x4dbc>
   16180:	ldr	r3, [r7]
   16184:	cmp	r3, #0
   16188:	beq	161f8 <__assert_fail@plt+0x4dbc>
   1618c:	ldr	r2, [sp, #64]	; 0x40
   16190:	eor	r6, r2, #1
   16194:	eor	r2, r4, #1
   16198:	orr	r2, r2, r6
   1619c:	and	r6, r6, #1
   161a0:	tst	r2, #1
   161a4:	beq	164c8 <__assert_fail@plt+0x508c>
   161a8:	ldr	r9, [sp, #64]	; 0x40
   161ac:	orrs	r2, r4, sl
   161b0:	mov	r0, r3
   161b4:	str	r9, [sp]
   161b8:	movne	r3, #1
   161bc:	moveq	r3, #0
   161c0:	str	r5, [sp, #4]
   161c4:	mov	r2, r8
   161c8:	mov	r1, fp
   161cc:	bl	15f6c <__assert_fail@plt+0x4b30>
   161d0:	ldr	r3, [r7, #16]
   161d4:	orr	r4, r4, r0
   161d8:	add	r7, r7, #16
   161dc:	cmp	r3, #0
   161e0:	beq	161f8 <__assert_fail@plt+0x4dbc>
   161e4:	cmp	r4, #0
   161e8:	movne	r2, r6
   161ec:	moveq	r2, #1
   161f0:	cmp	r2, #0
   161f4:	bne	161ac <__assert_fail@plt+0x4d70>
   161f8:	mov	r0, r4
   161fc:	add	sp, sp, #28
   16200:	ldrd	r4, [sp]
   16204:	ldrd	r6, [sp, #8]
   16208:	ldrd	r8, [sp, #16]
   1620c:	ldrd	sl, [sp, #24]
   16210:	add	sp, sp, #32
   16214:	pop	{pc}		; (ldr pc, [sp], #4)
   16218:	cmp	r0, #0
   1621c:	beq	1649c <__assert_fail@plt+0x5060>
   16220:	cmp	r3, #0
   16224:	add	r6, r0, #1
   16228:	movne	r1, fp
   1622c:	movne	r0, r7
   16230:	beq	16298 <__assert_fail@plt+0x4e5c>
   16234:	bl	18fd4 <argp_parse@@Base+0xe80>
   16238:	ldr	r3, [r7, #20]
   1623c:	str	r0, [sp, #12]
   16240:	mov	r0, #2
   16244:	movt	r0, #512	; 0x200
   16248:	mov	r1, r6
   1624c:	ldr	r2, [sp, #12]
   16250:	blx	r3
   16254:	subs	r9, r0, #0
   16258:	moveq	r4, r9
   1625c:	beq	160f4 <__assert_fail@plt+0x4cb8>
   16260:	mov	r3, #0
   16264:	mov	r4, r3
   16268:	str	r3, [sp, #16]
   1626c:	str	r3, [sp, #20]
   16270:	b	16048 <__assert_fail@plt+0x4c0c>
   16274:	ldr	r4, [sp, #20]
   16278:	mov	r0, r2
   1627c:	mov	r1, r6
   16280:	mov	r2, r4
   16284:	bl	11184 <memcpy@plt>
   16288:	ldr	r2, [r5, #28]
   1628c:	add	r2, r2, r4
   16290:	str	r2, [r5, #28]
   16294:	b	16094 <__assert_fail@plt+0x4c58>
   16298:	cmp	r6, #0
   1629c:	moveq	r4, r6
   162a0:	beq	16174 <__assert_fail@plt+0x4d38>
   162a4:	cmp	sl, #0
   162a8:	ldr	r2, [r5, #28]
   162ac:	bne	1634c <__assert_fail@plt+0x4f10>
   162b0:	mov	r9, r6
   162b4:	str	sl, [sp, #12]
   162b8:	str	sl, [sp, #16]
   162bc:	mov	r0, r9
   162c0:	str	r2, [sp, #20]
   162c4:	bl	112d4 <strlen@plt>
   162c8:	subs	r4, r0, #0
   162cc:	ldr	r2, [sp, #20]
   162d0:	beq	16094 <__assert_fail@plt+0x4c58>
   162d4:	ldr	r0, [r5, #32]
   162d8:	add	r1, r2, r4
   162dc:	cmp	r0, r1
   162e0:	bcs	162fc <__assert_fail@plt+0x4ec0>
   162e4:	mov	r1, r4
   162e8:	mov	r0, r5
   162ec:	bl	1a460 <argp_parse@@Base+0x230c>
   162f0:	cmp	r0, #0
   162f4:	ldr	r2, [r5, #28]
   162f8:	beq	16094 <__assert_fail@plt+0x4c58>
   162fc:	mov	r0, r2
   16300:	mov	r1, r9
   16304:	mov	r2, r4
   16308:	bl	11184 <memcpy@plt>
   1630c:	ldr	r2, [r5, #28]
   16310:	add	r2, r2, r4
   16314:	str	r2, [r5, #28]
   16318:	b	16094 <__assert_fail@plt+0x4c58>
   1631c:	cmp	r3, #0
   16320:	beq	164b0 <__assert_fail@plt+0x5074>
   16324:	bl	18fd4 <argp_parse@@Base+0xe80>
   16328:	mov	r2, #1
   1632c:	movt	r2, #512	; 0x200
   16330:	str	r0, [sp, #12]
   16334:	cmp	r8, #0
   16338:	mov	r0, #2
   1633c:	movt	r0, #512	; 0x200
   16340:	moveq	r0, r2
   16344:	ldr	r3, [r7, #20]
   16348:	b	16248 <__assert_fail@plt+0x4e0c>
   1634c:	mov	r4, #0
   16350:	mov	r9, r6
   16354:	str	r4, [sp, #12]
   16358:	str	r4, [sp, #16]
   1635c:	str	r4, [sp, #20]
   16360:	ldr	r1, [r5, #32]
   16364:	cmp	r1, r2
   16368:	bls	163b4 <__assert_fail@plt+0x4f78>
   1636c:	add	r0, r2, #1
   16370:	mov	r1, #10
   16374:	str	r0, [r5, #28]
   16378:	strb	r1, [r2]
   1637c:	ldr	r2, [r5, #28]
   16380:	b	16060 <__assert_fail@plt+0x4c24>
   16384:	ldr	r2, [r5, #28]
   16388:	ldr	r1, [r5, #32]
   1638c:	cmp	r2, r1
   16390:	bcs	163d0 <__assert_fail@plt+0x4f94>
   16394:	add	r0, r2, #1
   16398:	mov	r1, #10
   1639c:	str	r0, [r5, #28]
   163a0:	strb	r1, [r2]
   163a4:	b	160bc <__assert_fail@plt+0x4c80>
   163a8:	mov	r0, r5
   163ac:	bl	19df4 <argp_parse@@Base+0x1ca0>
   163b0:	b	160a8 <__assert_fail@plt+0x4c6c>
   163b4:	mov	r1, #1
   163b8:	mov	r0, r5
   163bc:	bl	1a460 <argp_parse@@Base+0x230c>
   163c0:	cmp	r0, #0
   163c4:	ldr	r2, [r5, #28]
   163c8:	bne	1636c <__assert_fail@plt+0x4f30>
   163cc:	b	16060 <__assert_fail@plt+0x4c24>
   163d0:	mov	r1, #1
   163d4:	mov	r0, r5
   163d8:	bl	1a460 <argp_parse@@Base+0x230c>
   163dc:	cmp	r0, #0
   163e0:	beq	160bc <__assert_fail@plt+0x4c80>
   163e4:	ldr	r2, [r5, #28]
   163e8:	mov	r1, #10
   163ec:	add	r0, r2, #1
   163f0:	str	r0, [r5, #28]
   163f4:	strb	r1, [r2]
   163f8:	b	160bc <__assert_fail@plt+0x4c80>
   163fc:	ldr	r0, [r5, #28]
   16400:	ldr	r2, [r5, #32]
   16404:	add	r3, r0, r4
   16408:	cmp	r2, r3
   1640c:	bcs	16428 <__assert_fail@plt+0x4fec>
   16410:	mov	r1, r4
   16414:	mov	r0, r5
   16418:	bl	1a460 <argp_parse@@Base+0x230c>
   1641c:	cmp	r0, #0
   16420:	beq	1613c <__assert_fail@plt+0x4d00>
   16424:	ldr	r0, [r5, #28]
   16428:	mov	r2, r4
   1642c:	mov	r1, r6
   16430:	bl	11184 <memcpy@plt>
   16434:	ldr	r3, [r5, #28]
   16438:	add	r4, r3, r4
   1643c:	str	r4, [r5, #28]
   16440:	b	1613c <__assert_fail@plt+0x4d00>
   16444:	ldr	r3, [r5, #28]
   16448:	ldr	r2, [r5, #32]
   1644c:	cmp	r3, r2
   16450:	bcs	164ec <__assert_fail@plt+0x50b0>
   16454:	add	r1, r3, #1
   16458:	mov	r2, #10
   1645c:	str	r1, [r5, #28]
   16460:	strb	r2, [r3]
   16464:	b	1612c <__assert_fail@plt+0x4cf0>
   16468:	ldr	r3, [r5, #28]
   1646c:	ldr	r2, [r5, #32]
   16470:	cmp	r3, r2
   16474:	bcs	164d0 <__assert_fail@plt+0x5094>
   16478:	add	r1, r3, #1
   1647c:	mov	r2, #10
   16480:	mov	r4, #1
   16484:	str	r1, [r5, #28]
   16488:	strb	r2, [r3]
   1648c:	b	16174 <__assert_fail@plt+0x4d38>
   16490:	mov	r0, r5
   16494:	bl	19df4 <argp_parse@@Base+0x1ca0>
   16498:	b	1615c <__assert_fail@plt+0x4d20>
   1649c:	cmp	r3, #0
   164a0:	movne	r1, fp
   164a4:	movne	r0, r7
   164a8:	movne	r6, r9
   164ac:	bne	16234 <__assert_fail@plt+0x4df8>
   164b0:	mov	r4, r3
   164b4:	b	16174 <__assert_fail@plt+0x4d38>
   164b8:	mov	r9, r6
   164bc:	str	r8, [sp, #12]
   164c0:	str	r4, [sp, #16]
   164c4:	b	16048 <__assert_fail@plt+0x4c0c>
   164c8:	mov	r4, #1
   164cc:	b	161f8 <__assert_fail@plt+0x4dbc>
   164d0:	mov	r1, #1
   164d4:	mov	r0, r5
   164d8:	bl	1a460 <argp_parse@@Base+0x230c>
   164dc:	cmp	r0, #0
   164e0:	beq	16170 <__assert_fail@plt+0x4d34>
   164e4:	ldr	r3, [r5, #28]
   164e8:	b	16478 <__assert_fail@plt+0x503c>
   164ec:	mov	r1, #1
   164f0:	mov	r0, r5
   164f4:	bl	1a460 <argp_parse@@Base+0x230c>
   164f8:	cmp	r0, #0
   164fc:	beq	1612c <__assert_fail@plt+0x4cf0>
   16500:	ldr	r3, [r5, #28]
   16504:	b	16454 <__assert_fail@plt+0x5018>
   16508:	ldr	r4, [sp, #20]
   1650c:	str	r4, [sp, #16]
   16510:	b	16014 <__assert_fail@plt+0x4bd8>
   16514:	cmp	r3, #0
   16518:	beq	162a4 <__assert_fail@plt+0x4e68>
   1651c:	mov	r1, fp
   16520:	mov	r0, r7
   16524:	bl	18fd4 <argp_parse@@Base+0xe80>
   16528:	str	r0, [sp, #12]
   1652c:	mov	r0, #1
   16530:	movt	r0, #512	; 0x200
   16534:	ldr	r3, [r7, #20]
   16538:	b	16248 <__assert_fail@plt+0x4e0c>

0001653c <argp_failure@@Base>:
   1653c:	push	{r3}		; (str r3, [sp, #-4]!)
   16540:	strd	r4, [sp, #-20]!	; 0xffffffec
   16544:	subs	r5, r0, #0
   16548:	strd	r6, [sp, #8]
   1654c:	mov	r7, r1
   16550:	mov	r6, r2
   16554:	str	lr, [sp, #16]
   16558:	sub	sp, sp, #200	; 0xc8
   1655c:	beq	166b8 <argp_failure@@Base+0x17c>
   16560:	ldr	r3, [r5, #16]
   16564:	tst	r3, #2
   16568:	bne	1669c <argp_failure@@Base+0x160>
   1656c:	ldr	r4, [r5, #44]	; 0x2c
   16570:	cmp	r4, #0
   16574:	beq	1669c <argp_failure@@Base+0x160>
   16578:	mov	r0, r4
   1657c:	bl	113d0 <flockfile@plt>
   16580:	ldr	r0, [r5, #40]	; 0x28
   16584:	mov	r1, r4
   16588:	bl	110e8 <fputs_unlocked@plt>
   1658c:	ldr	r3, [sp, #220]	; 0xdc
   16590:	cmp	r3, #0
   16594:	beq	165f0 <argp_failure@@Base+0xb4>
   16598:	ldr	r3, [r4, #20]
   1659c:	add	r1, sp, #224	; 0xe0
   165a0:	ldr	r2, [r4, #24]
   165a4:	str	r1, [sp]
   165a8:	cmp	r3, r2
   165ac:	addcc	r1, r3, #1
   165b0:	movcc	r2, #58	; 0x3a
   165b4:	strcc	r1, [r4, #20]
   165b8:	strbcc	r2, [r3]
   165bc:	bcs	16728 <argp_failure@@Base+0x1ec>
   165c0:	ldr	r3, [r4, #20]
   165c4:	ldr	r2, [r4, #24]
   165c8:	cmp	r3, r2
   165cc:	addcc	r1, r3, #1
   165d0:	movcc	r2, #32
   165d4:	strcc	r1, [r4, #20]
   165d8:	strbcc	r2, [r3]
   165dc:	bcs	16718 <argp_failure@@Base+0x1dc>
   165e0:	mov	r0, r4
   165e4:	ldr	r2, [sp]
   165e8:	ldr	r1, [sp, #220]	; 0xdc
   165ec:	bl	11394 <vfprintf@plt>
   165f0:	cmp	r6, #0
   165f4:	ldr	r3, [r4, #20]
   165f8:	ldr	r2, [r4, #24]
   165fc:	beq	16660 <argp_failure@@Base+0x124>
   16600:	cmp	r2, r3
   16604:	addhi	r1, r3, #1
   16608:	movhi	r2, #58	; 0x3a
   1660c:	strhi	r1, [r4, #20]
   16610:	strbhi	r2, [r3]
   16614:	bls	16748 <argp_failure@@Base+0x20c>
   16618:	ldr	r3, [r4, #20]
   1661c:	ldr	r2, [r4, #24]
   16620:	cmp	r3, r2
   16624:	addcc	r1, r3, #1
   16628:	movcc	r2, #32
   1662c:	strcc	r1, [r4, #20]
   16630:	strbcc	r2, [r3]
   16634:	bcs	16738 <argp_failure@@Base+0x1fc>
   16638:	mov	r2, #200	; 0xc8
   1663c:	mov	r1, sp
   16640:	mov	r0, r6
   16644:	bl	11310 <strerror_r@plt>
   16648:	cmp	r0, #0
   1664c:	beq	166fc <argp_failure@@Base+0x1c0>
   16650:	mov	r1, r4
   16654:	bl	110e8 <fputs_unlocked@plt>
   16658:	ldr	r3, [r4, #20]
   1665c:	ldr	r2, [r4, #24]
   16660:	cmp	r3, r2
   16664:	addcc	r1, r3, #1
   16668:	movcc	r2, #10
   1666c:	strcc	r1, [r4, #20]
   16670:	strbcc	r2, [r3]
   16674:	bcs	166ec <argp_failure@@Base+0x1b0>
   16678:	mov	r0, r4
   1667c:	bl	11214 <funlockfile@plt>
   16680:	cmp	r7, #0
   16684:	beq	1669c <argp_failure@@Base+0x160>
   16688:	cmp	r5, #0
   1668c:	beq	166e4 <argp_failure@@Base+0x1a8>
   16690:	ldr	r3, [r5, #16]
   16694:	tst	r3, #32
   16698:	beq	166e4 <argp_failure@@Base+0x1a8>
   1669c:	add	sp, sp, #200	; 0xc8
   166a0:	ldrd	r4, [sp]
   166a4:	ldrd	r6, [sp, #8]
   166a8:	ldr	lr, [sp, #16]
   166ac:	add	sp, sp, #20
   166b0:	add	sp, sp, #4
   166b4:	bx	lr
   166b8:	movw	r3, #54824	; 0xd628
   166bc:	movt	r3, #2
   166c0:	ldr	r4, [r3]
   166c4:	cmp	r4, #0
   166c8:	beq	1669c <argp_failure@@Base+0x160>
   166cc:	mov	r0, r4
   166d0:	bl	113d0 <flockfile@plt>
   166d4:	movw	r3, #54816	; 0xd620
   166d8:	movt	r3, #2
   166dc:	ldr	r0, [r3]
   166e0:	b	16584 <argp_failure@@Base+0x48>
   166e4:	mov	r0, r7
   166e8:	bl	112bc <exit@plt>
   166ec:	mov	r1, #10
   166f0:	mov	r0, r4
   166f4:	bl	11364 <__overflow@plt>
   166f8:	b	16678 <argp_failure@@Base+0x13c>
   166fc:	mov	r0, r6
   16700:	bl	11274 <strerror@plt>
   16704:	cmp	r0, #0
   16708:	movw	r3, #49936	; 0xc310
   1670c:	movt	r3, #1
   16710:	moveq	r0, r3
   16714:	b	16650 <argp_failure@@Base+0x114>
   16718:	mov	r1, #32
   1671c:	mov	r0, r4
   16720:	bl	11364 <__overflow@plt>
   16724:	b	165e0 <argp_failure@@Base+0xa4>
   16728:	mov	r1, #58	; 0x3a
   1672c:	mov	r0, r4
   16730:	bl	11364 <__overflow@plt>
   16734:	b	165c0 <argp_failure@@Base+0x84>
   16738:	mov	r1, #32
   1673c:	mov	r0, r4
   16740:	bl	11364 <__overflow@plt>
   16744:	b	16638 <argp_failure@@Base+0xfc>
   16748:	mov	r1, #58	; 0x3a
   1674c:	mov	r0, r4
   16750:	bl	11364 <__overflow@plt>
   16754:	b	16618 <argp_failure@@Base+0xdc>
   16758:	cmp	r2, #0
   1675c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16760:	strd	r6, [sp, #8]
   16764:	strd	r8, [sp, #16]
   16768:	strd	sl, [sp, #24]
   1676c:	add	fp, sp, #32
   16770:	str	lr, [sp, #32]
   16774:	sub	sp, sp, #124	; 0x7c
   16778:	str	r2, [fp, #-128]	; 0xffffff80
   1677c:	strd	r0, [fp, #-108]	; 0xffffff94
   16780:	str	r3, [fp, #-100]	; 0xffffff9c
   16784:	beq	16bf8 <argp_failure@@Base+0x6bc>
   16788:	mov	r0, r2
   1678c:	movw	r8, #54752	; 0xd5e0
   16790:	movt	r8, #2
   16794:	bl	113d0 <flockfile@plt>
   16798:	ldr	r3, [r8, #36]	; 0x24
   1679c:	cmp	r3, #0
   167a0:	beq	16c14 <argp_failure@@Base+0x6d8>
   167a4:	mov	r3, #0
   167a8:	ldr	r0, [fp, #-128]	; 0xffffff80
   167ac:	mov	r1, r3
   167b0:	ldr	r2, [r8, #32]
   167b4:	bl	19d5c <argp_parse@@Base+0x1c08>
   167b8:	subs	r7, r0, #0
   167bc:	beq	17734 <argp_failure@@Base+0x11f8>
   167c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   167c4:	ands	r3, r3, #11
   167c8:	streq	r3, [fp, #-136]	; 0xffffff78
   167cc:	bne	16f44 <argp_failure@@Base+0xa08>
   167d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   167d4:	ands	r4, r3, #3
   167d8:	bne	16dd4 <argp_failure@@Base+0x898>
   167dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   167e0:	tst	r3, #16
   167e4:	bne	16da0 <argp_failure@@Base+0x864>
   167e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   167ec:	tst	r3, #4
   167f0:	and	r5, r3, #8
   167f4:	bne	16d1c <argp_failure@@Base+0x7e0>
   167f8:	cmp	r5, #0
   167fc:	beq	16b90 <argp_failure@@Base+0x654>
   16800:	ldr	r3, [fp, #-136]	; 0xffffff78
   16804:	ldr	r3, [r3, #4]
   16808:	cmp	r3, #0
   1680c:	str	r3, [fp, #-112]	; 0xffffff90
   16810:	beq	16b90 <argp_failure@@Base+0x654>
   16814:	cmp	r4, #0
   16818:	bne	16d4c <argp_failure@@Base+0x810>
   1681c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16820:	ldr	r3, [r3]
   16824:	str	r4, [fp, #-88]	; 0xffffffa8
   16828:	str	r4, [fp, #-84]	; 0xffffffac
   1682c:	str	r4, [fp, #-80]	; 0xffffffb0
   16830:	mov	r2, r3
   16834:	movw	r3, #50772	; 0xc654
   16838:	movt	r3, #1
   1683c:	mov	r5, r2
   16840:	str	r3, [fp, #-140]	; 0xffffff74
   16844:	movw	r3, #50384	; 0xc4d0
   16848:	movt	r3, #1
   1684c:	str	r8, [fp, #-96]	; 0xffffffa0
   16850:	str	r3, [fp, #-144]	; 0xffffff70
   16854:	ldr	r0, [r7, #16]
   16858:	ldr	r3, [r7, #24]
   1685c:	ldr	r2, [r7, #28]
   16860:	ldr	r4, [r5]
   16864:	ldr	r9, [r5, #8]
   16868:	sub	r2, r2, r3
   1686c:	cmp	r2, r0
   16870:	bhi	17424 <argp_failure@@Base+0xee8>
   16874:	ldr	r1, [r7, #4]
   16878:	mov	r3, #1
   1687c:	ldr	r8, [r4, #12]
   16880:	str	r1, [fp, #-120]	; 0xffffff88
   16884:	mov	r1, #0
   16888:	str	r1, [r7, #4]
   1688c:	ldr	r1, [r7, #12]
   16890:	str	r3, [fp, #-64]	; 0xffffffc0
   16894:	ldr	r3, [fp, #-104]	; 0xffffff98
   16898:	str	r1, [fp, #-116]	; 0xffffff8c
   1689c:	ands	r1, r8, #8
   168a0:	str	r5, [fp, #-76]	; 0xffffffb4
   168a4:	str	r1, [fp, #-124]	; 0xffffff84
   168a8:	sub	r1, fp, #88	; 0x58
   168ac:	str	r7, [fp, #-72]	; 0xffffffb8
   168b0:	str	r3, [fp, #-60]	; 0xffffffc4
   168b4:	movne	r3, #0
   168b8:	str	r1, [fp, #-68]	; 0xffffffbc
   168bc:	strne	r3, [fp, #-124]	; 0xffffff84
   168c0:	bne	168f8 <argp_failure@@Base+0x3bc>
   168c4:	ldr	r1, [r5, #4]
   168c8:	cmp	r1, #0
   168cc:	beq	168f8 <argp_failure@@Base+0x3bc>
   168d0:	add	r3, r4, #24
   168d4:	ldr	ip, [r3, #-24]	; 0xffffffe8
   168d8:	cmp	ip, #0
   168dc:	beq	168ec <argp_failure@@Base+0x3b0>
   168e0:	ldr	ip, [r3, #-12]
   168e4:	tst	ip, #2
   168e8:	beq	17544 <argp_failure@@Base+0x1008>
   168ec:	subs	r1, r1, #1
   168f0:	add	r3, r3, #24
   168f4:	bne	168d4 <argp_failure@@Base+0x398>
   168f8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   168fc:	cmp	r2, r0
   16900:	ldr	r6, [r3, #8]
   16904:	bhi	17480 <argp_failure@@Base+0xf44>
   16908:	str	r6, [r7, #12]
   1690c:	ldr	sl, [r5, #4]
   16910:	cmp	sl, #0
   16914:	movne	r6, r4
   16918:	strne	r5, [fp, #-132]	; 0xffffff7c
   1691c:	movne	r5, r4
   16920:	movne	r4, r9
   16924:	beq	1697c <argp_failure@@Base+0x440>
   16928:	ldr	r9, [r6, #12]
   1692c:	tst	r9, #8
   16930:	bne	16968 <argp_failure@@Base+0x42c>
   16934:	ldr	r8, [r6, #4]
   16938:	sub	r2, r8, #1
   1693c:	cmp	r2, #254	; 0xfe
   16940:	bhi	16968 <argp_failure@@Base+0x42c>
   16944:	bl	112a4 <__ctype_b_loc@plt>
   16948:	ldr	r1, [r0]
   1694c:	lsl	r2, r8, #1
   16950:	ldrh	r2, [r1, r2]
   16954:	tst	r2, #16384	; 0x4000
   16958:	beq	16968 <argp_failure@@Base+0x42c>
   1695c:	ldrb	r2, [r4]
   16960:	cmp	r8, r2
   16964:	beq	170ac <argp_failure@@Base+0xb70>
   16968:	subs	sl, sl, #1
   1696c:	add	r6, r6, #24
   16970:	bne	16928 <argp_failure@@Base+0x3ec>
   16974:	mov	r4, r5
   16978:	ldr	r5, [fp, #-132]	; 0xffffff7c
   1697c:	ldr	r2, [r4, #12]
   16980:	ldr	r1, [r7, #24]
   16984:	ldr	r3, [r7, #28]
   16988:	tst	r2, #8
   1698c:	ldr	r2, [r7, #16]
   16990:	sub	r3, r3, r1
   16994:	beq	1719c <argp_failure@@Base+0xc60>
   16998:	cmp	r3, r2
   1699c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   169a0:	ldr	r6, [r3, #16]
   169a4:	bhi	17580 <argp_failure@@Base+0x1044>
   169a8:	str	r6, [r7, #12]
   169ac:	ldr	r8, [r5, #4]
   169b0:	cmp	r8, #0
   169b4:	addne	r6, r4, #24
   169b8:	bne	169cc <argp_failure@@Base+0x490>
   169bc:	b	16a5c <argp_failure@@Base+0x520>
   169c0:	subs	r8, r8, #1
   169c4:	add	r6, r6, #24
   169c8:	beq	16a5c <argp_failure@@Base+0x520>
   169cc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   169d0:	cmp	r3, #0
   169d4:	beq	169c0 <argp_failure@@Base+0x484>
   169d8:	ldr	r3, [r6, #-12]
   169dc:	tst	r3, #2
   169e0:	bne	169c0 <argp_failure@@Base+0x484>
   169e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   169e8:	sub	r1, fp, #76	; 0x4c
   169ec:	ldr	r0, [r3, #16]
   169f0:	bl	15dbc <__assert_fail@plt+0x4980>
   169f4:	ldr	sl, [r6, #-24]	; 0xffffffe8
   169f8:	mov	r0, sl
   169fc:	bl	112d4 <strlen@plt>
   16a00:	subs	r9, r0, #0
   16a04:	beq	169c0 <argp_failure@@Base+0x484>
   16a08:	ldr	ip, [r7, #28]
   16a0c:	mov	r1, r9
   16a10:	mov	r0, r7
   16a14:	ldr	lr, [r7, #32]
   16a18:	add	r2, ip, r9
   16a1c:	cmp	lr, r2
   16a20:	bcs	16a34 <argp_failure@@Base+0x4f8>
   16a24:	bl	1a460 <argp_parse@@Base+0x230c>
   16a28:	cmp	r0, #0
   16a2c:	beq	169c0 <argp_failure@@Base+0x484>
   16a30:	ldr	ip, [r7, #28]
   16a34:	mov	r2, r9
   16a38:	mov	r1, sl
   16a3c:	mov	r0, ip
   16a40:	add	r6, r6, #24
   16a44:	bl	11184 <memcpy@plt>
   16a48:	ldr	r2, [r7, #28]
   16a4c:	subs	r8, r8, #1
   16a50:	add	r3, r2, r9
   16a54:	str	r3, [r7, #28]
   16a58:	bne	169cc <argp_failure@@Base+0x490>
   16a5c:	ldr	r2, [r7, #16]
   16a60:	ldr	r1, [r7, #24]
   16a64:	ldr	r3, [r7, #28]
   16a68:	sub	r3, r3, r1
   16a6c:	cmp	r3, r2
   16a70:	bhi	17474 <argp_failure@@Base+0xf38>
   16a74:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16a78:	mov	r2, #0
   16a7c:	str	r2, [r7, #4]
   16a80:	cmp	r3, r2
   16a84:	beq	170bc <argp_failure@@Base+0xb80>
   16a88:	ldr	r3, [r4, #12]
   16a8c:	tst	r3, #8
   16a90:	bne	16abc <argp_failure@@Base+0x580>
   16a94:	ldr	r6, [r4, #4]
   16a98:	sub	r3, r6, #1
   16a9c:	cmp	r3, #254	; 0xfe
   16aa0:	bhi	16abc <argp_failure@@Base+0x580>
   16aa4:	bl	112a4 <__ctype_b_loc@plt>
   16aa8:	ldr	r3, [r0]
   16aac:	lsl	r6, r6, #1
   16ab0:	ldrh	r3, [r3, r6]
   16ab4:	tst	r3, #16384	; 0x4000
   16ab8:	bne	16ac8 <argp_failure@@Base+0x58c>
   16abc:	ldr	r3, [r4]
   16ac0:	cmp	r3, #0
   16ac4:	beq	175b0 <argp_failure@@Base+0x1074>
   16ac8:	ldr	r2, [r7, #16]
   16acc:	ldr	r1, [r7, #24]
   16ad0:	ldr	r3, [r7, #28]
   16ad4:	sub	r3, r3, r1
   16ad8:	cmp	r3, r2
   16adc:	bhi	17440 <argp_failure@@Base+0xf04>
   16ae0:	ldr	r3, [fp, #-120]	; 0xffffff88
   16ae4:	str	r3, [r7, #4]
   16ae8:	ldr	r3, [fp, #-112]	; 0xffffff90
   16aec:	add	r5, r5, #28
   16af0:	subs	r3, r3, #1
   16af4:	str	r3, [fp, #-112]	; 0xffffff90
   16af8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   16afc:	str	r3, [r7, #12]
   16b00:	bne	16854 <argp_failure@@Base+0x318>
   16b04:	ldr	r8, [fp, #-96]	; 0xffffffa0
   16b08:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16b0c:	cmp	r3, #0
   16b10:	beq	16b8c <argp_failure@@Base+0x650>
   16b14:	ldr	r3, [r8, #4]
   16b18:	cmp	r3, #0
   16b1c:	beq	16b8c <argp_failure@@Base+0x650>
   16b20:	ldr	ip, [fp, #-104]	; 0xffffff98
   16b24:	cmp	ip, #0
   16b28:	beq	178f0 <argp_failure@@Base+0x13b4>
   16b2c:	ldr	r2, [ip]
   16b30:	cmp	r2, #0
   16b34:	beq	17860 <argp_failure@@Base+0x1324>
   16b38:	ldr	r3, [r2, #20]
   16b3c:	cmp	r3, #0
   16b40:	beq	17860 <argp_failure@@Base+0x1324>
   16b44:	movw	r5, #49960	; 0xc328
   16b48:	movt	r5, #1
   16b4c:	mov	r0, r5
   16b50:	mov	r1, #5
   16b54:	movt	r1, #512	; 0x200
   16b58:	mov	r3, ip
   16b5c:	bl	1495c <__assert_fail@plt+0x3520>
   16b60:	subs	r4, r0, #0
   16b64:	beq	16b8c <argp_failure@@Base+0x650>
   16b68:	ldrb	r3, [r4]
   16b6c:	subs	r5, r4, r5
   16b70:	movne	r5, #1
   16b74:	cmp	r3, #0
   16b78:	bne	1786c <argp_failure@@Base+0x1330>
   16b7c:	cmp	r5, #0
   16b80:	beq	16b8c <argp_failure@@Base+0x650>
   16b84:	mov	r0, r4
   16b88:	bl	19138 <argp_parse@@Base+0xfe4>
   16b8c:	mov	r4, #1
   16b90:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16b94:	tst	r3, #32
   16b98:	bne	1704c <argp_failure@@Base+0xb10>
   16b9c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16ba0:	tst	r3, #64	; 0x40
   16ba4:	beq	16bd4 <argp_failure@@Base+0x698>
   16ba8:	movw	r5, #55004	; 0xd6dc
   16bac:	movt	r5, #2
   16bb0:	ldr	r2, [r5]
   16bb4:	cmp	r2, #0
   16bb8:	beq	16bd4 <argp_failure@@Base+0x698>
   16bbc:	cmp	r4, #0
   16bc0:	bne	17084 <argp_failure@@Base+0xb48>
   16bc4:	movw	r1, #50416	; 0xc4f0
   16bc8:	movt	r1, #1
   16bcc:	mov	r0, r7
   16bd0:	bl	1a480 <argp_parse@@Base+0x232c>
   16bd4:	ldr	r0, [fp, #-128]	; 0xffffff80
   16bd8:	bl	11214 <funlockfile@plt>
   16bdc:	ldr	r3, [fp, #-136]	; 0xffffff78
   16be0:	cmp	r3, #0
   16be4:	beq	16bf0 <argp_failure@@Base+0x6b4>
   16be8:	mov	r0, r3
   16bec:	bl	14608 <__assert_fail@plt+0x31cc>
   16bf0:	mov	r0, r7
   16bf4:	bl	1a330 <argp_parse@@Base+0x21dc>
   16bf8:	sub	sp, fp, #32
   16bfc:	ldrd	r4, [sp]
   16c00:	ldrd	r6, [sp, #8]
   16c04:	ldrd	r8, [sp, #16]
   16c08:	ldrd	sl, [sp, #24]
   16c0c:	add	sp, sp, #32
   16c10:	pop	{pc}		; (ldr pc, [sp], #4)
   16c14:	movw	r0, #50076	; 0xc39c
   16c18:	movt	r0, #1
   16c1c:	bl	11244 <getenv@plt>
   16c20:	subs	r5, r0, #0
   16c24:	ldrd	r2, [r8]
   16c28:	sub	ip, fp, #76	; 0x4c
   16c2c:	ldrd	r0, [r8, #8]
   16c30:	str	ip, [fp, #-96]	; 0xffffffa0
   16c34:	ldrd	r6, [r8, #16]
   16c38:	strd	r2, [fp, #-76]	; 0xffffffb4
   16c3c:	ldrd	r2, [r8, #24]
   16c40:	strd	r0, [fp, #-68]	; 0xffffffbc
   16c44:	ldrd	r0, [r8, #32]
   16c48:	strd	r6, [fp, #-60]	; 0xffffffc4
   16c4c:	strd	r2, [fp, #-52]	; 0xffffffcc
   16c50:	strd	r0, [fp, #-44]	; 0xffffffd4
   16c54:	beq	167a4 <argp_failure@@Base+0x268>
   16c58:	ldrb	sl, [r5]
   16c5c:	movw	r3, #50140	; 0xc3dc
   16c60:	movt	r3, #1
   16c64:	ldr	r9, [pc, #3300]	; 17950 <argp_failure@@Base+0x1414>
   16c68:	str	r3, [fp, #-116]	; 0xffffff8c
   16c6c:	movw	r3, #50092	; 0xc3ac
   16c70:	movt	r3, #1
   16c74:	str	r3, [fp, #-120]	; 0xffffff88
   16c78:	cmp	sl, #0
   16c7c:	beq	16cb4 <argp_failure@@Base+0x778>
   16c80:	bl	112a4 <__ctype_b_loc@plt>
   16c84:	mov	r7, r0
   16c88:	ldr	r1, [r0]
   16c8c:	b	16c94 <argp_failure@@Base+0x758>
   16c90:	ldrb	sl, [r5, #1]!
   16c94:	lsl	r3, sl, #1
   16c98:	ldrh	r6, [r1, r3]
   16c9c:	tst	r6, #8192	; 0x2000
   16ca0:	bne	16c90 <argp_failure@@Base+0x754>
   16ca4:	ands	r2, r6, #1024	; 0x400
   16ca8:	bne	17318 <argp_failure@@Base+0xddc>
   16cac:	cmp	sl, #0
   16cb0:	bne	17740 <argp_failure@@Base+0x1204>
   16cb4:	ldr	r1, [pc, #3224]	; 17954 <argp_failure@@Base+0x1418>
   16cb8:	ldr	lr, [fp, #-44]	; 0xffffffd4
   16cbc:	add	r3, r1, #16
   16cc0:	cmp	r3, r9
   16cc4:	mov	r1, r3
   16cc8:	beq	1761c <argp_failure@@Base+0x10e0>
   16ccc:	ldrb	r2, [r3, #14]
   16cd0:	cmp	r2, #0
   16cd4:	bne	16cbc <argp_failure@@Base+0x780>
   16cd8:	ldrb	r0, [r3, #15]
   16cdc:	sub	ip, fp, #36	; 0x24
   16ce0:	cmp	r0, #32
   16ce4:	add	ip, ip, r0
   16ce8:	beq	16cbc <argp_failure@@Base+0x780>
   16cec:	ldr	r0, [ip, #-40]	; 0xffffffd8
   16cf0:	cmp	r0, lr
   16cf4:	blt	16cbc <argp_failure@@Base+0x780>
   16cf8:	movw	r0, #50264	; 0xc458
   16cfc:	movt	r0, #1
   16d00:	mov	r1, r2
   16d04:	stm	sp, {r0, r3}
   16d08:	movw	r3, #50212	; 0xc424
   16d0c:	movt	r3, #1
   16d10:	ldr	r0, [fp, #-104]	; 0xffffff98
   16d14:	bl	1653c <argp_failure@@Base>
   16d18:	b	167a4 <argp_failure@@Base+0x268>
   16d1c:	ldr	r3, [fp, #4]
   16d20:	movw	r1, #50328	; 0xc498
   16d24:	movt	r1, #1
   16d28:	mov	r0, r7
   16d2c:	mov	r2, r3
   16d30:	bl	1a480 <argp_parse@@Base+0x232c>
   16d34:	cmp	r5, #0
   16d38:	beq	16b8c <argp_failure@@Base+0x650>
   16d3c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16d40:	ldr	r3, [r3, #4]
   16d44:	cmp	r3, #0
   16d48:	beq	16b8c <argp_failure@@Base+0x650>
   16d4c:	ldr	r3, [r7, #28]
   16d50:	ldr	r2, [r7, #32]
   16d54:	cmp	r3, r2
   16d58:	bcs	177a8 <argp_failure@@Base+0x126c>
   16d5c:	add	r1, r3, #1
   16d60:	mov	r2, #10
   16d64:	str	r1, [r7, #28]
   16d68:	strb	r2, [r3]
   16d6c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16d70:	ldr	r3, [r3, #4]
   16d74:	str	r3, [fp, #-112]	; 0xffffff90
   16d78:	mov	r3, #0
   16d7c:	ldr	r2, [fp, #-112]	; 0xffffff90
   16d80:	cmp	r2, r3
   16d84:	ldr	r2, [fp, #-136]	; 0xffffff78
   16d88:	ldr	r2, [r2]
   16d8c:	str	r3, [fp, #-88]	; 0xffffffa8
   16d90:	str	r3, [fp, #-84]	; 0xffffffac
   16d94:	str	r3, [fp, #-80]	; 0xffffffb0
   16d98:	bne	16834 <argp_failure@@Base+0x2f8>
   16d9c:	b	16b8c <argp_failure@@Base+0x650>
   16da0:	mov	r0, #1
   16da4:	mov	r3, #0
   16da8:	ldr	r1, [fp, #-104]	; 0xffffff98
   16dac:	mov	r2, r3
   16db0:	stm	sp, {r0, r7}
   16db4:	ldr	r0, [fp, #-108]	; 0xffffff94
   16db8:	bl	15f6c <__assert_fail@plt+0x4b30>
   16dbc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16dc0:	orr	r4, r4, r0
   16dc4:	tst	r3, #4
   16dc8:	and	r5, r3, #8
   16dcc:	beq	167f8 <argp_failure@@Base+0x2bc>
   16dd0:	b	16d1c <argp_failure@@Base+0x7e0>
   16dd4:	ldr	r3, [fp, #-108]	; 0xffffff94
   16dd8:	movw	r2, #50304	; 0xc480
   16ddc:	movt	r2, #1
   16de0:	movw	sl, #50296	; 0xc478
   16de4:	movt	sl, #1
   16de8:	str	r2, [fp, #-120]	; 0xffffff88
   16dec:	mov	r4, #1
   16df0:	ldr	r0, [r3, #8]
   16df4:	ldr	r1, [r3, #16]
   16df8:	movw	r3, #50288	; 0xc470
   16dfc:	movt	r3, #1
   16e00:	str	r3, [fp, #-124]	; 0xffffff84
   16e04:	bl	148f0 <__assert_fail@plt+0x34b4>
   16e08:	add	r3, r0, #7
   16e0c:	mov	r2, r0
   16e10:	bic	r3, r3, #7
   16e14:	mov	r1, #0
   16e18:	sub	sp, sp, r3
   16e1c:	add	r9, sp, #8
   16e20:	mov	r0, r9
   16e24:	bl	11328 <memset@plt>
   16e28:	sub	r3, fp, #76	; 0x4c
   16e2c:	str	sl, [fp, #-116]	; 0xffffff8c
   16e30:	str	r9, [fp, #-112]	; 0xffffff90
   16e34:	str	r3, [fp, #-96]	; 0xffffffa0
   16e38:	ldr	r9, [fp, #-136]	; 0xffffff78
   16e3c:	ldr	sl, [fp, #-100]	; 0xffffff9c
   16e40:	b	16f1c <argp_failure@@Base+0x9e0>
   16e44:	cmp	r4, #0
   16e48:	mov	r0, r7
   16e4c:	ldr	r1, [fp, #-116]	; 0xffffff8c
   16e50:	ldr	r3, [fp, #-112]	; 0xffffff90
   16e54:	ldrne	r2, [fp, #-124]	; 0xffffff84
   16e58:	ldreq	r2, [fp, #-120]	; 0xffffff88
   16e5c:	ldr	r4, [r7, #12]
   16e60:	str	r5, [r7, #12]
   16e64:	str	r3, [fp, #-76]	; 0xffffffb4
   16e68:	ldr	r3, [fp, #4]
   16e6c:	bl	1a480 <argp_parse@@Base+0x232c>
   16e70:	ldr	r2, [r7, #16]
   16e74:	ldr	r1, [r7, #24]
   16e78:	ldr	r3, [r7, #28]
   16e7c:	ldr	r5, [r8, #28]
   16e80:	sub	r3, r3, r1
   16e84:	cmp	r3, r2
   16e88:	bhi	17040 <argp_failure@@Base+0xb04>
   16e8c:	tst	sl, #2
   16e90:	ldr	r6, [r7, #4]
   16e94:	str	r5, [r7, #4]
   16e98:	beq	1702c <argp_failure@@Base+0xaf0>
   16e9c:	ldr	r3, [r9, #4]
   16ea0:	cmp	r3, #0
   16ea4:	bne	175c4 <argp_failure@@Base+0x1088>
   16ea8:	mov	r3, #1
   16eac:	str	r7, [sp]
   16eb0:	ldrd	r0, [fp, #-108]	; 0xffffff94
   16eb4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16eb8:	bl	15910 <__assert_fail@plt+0x44d4>
   16ebc:	ldr	r1, [r7, #16]
   16ec0:	mov	r5, r0
   16ec4:	ldrd	r2, [r7, #24]
   16ec8:	sub	r2, r3, r2
   16ecc:	cmp	r2, r1
   16ed0:	strls	r4, [r7, #12]
   16ed4:	bhi	16ffc <argp_failure@@Base+0xac0>
   16ed8:	ldr	r2, [r7, #32]
   16edc:	str	r6, [r7, #4]
   16ee0:	cmp	r2, r3
   16ee4:	bhi	16f00 <argp_failure@@Base+0x9c4>
   16ee8:	mov	r1, #1
   16eec:	mov	r0, r7
   16ef0:	bl	1a460 <argp_parse@@Base+0x230c>
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f10 <argp_failure@@Base+0x9d4>
   16efc:	ldr	r3, [r7, #28]
   16f00:	add	r1, r3, #1
   16f04:	mov	r2, #10
   16f08:	str	r1, [r7, #28]
   16f0c:	strb	r2, [r3]
   16f10:	cmp	r5, #0
   16f14:	mov	r4, #0
   16f18:	beq	1706c <argp_failure@@Base+0xb30>
   16f1c:	ldr	r2, [r7, #16]
   16f20:	ldr	r1, [r7, #24]
   16f24:	ldr	r3, [r7, #28]
   16f28:	ldr	r5, [r8, #28]
   16f2c:	sub	r3, r3, r1
   16f30:	cmp	r3, r2
   16f34:	bls	16e44 <argp_failure@@Base+0x908>
   16f38:	mov	r0, r7
   16f3c:	bl	19df4 <argp_parse@@Base+0x1ca0>
   16f40:	b	16e44 <argp_failure@@Base+0x908>
   16f44:	mov	r1, #0
   16f48:	ldr	r0, [fp, #-108]	; 0xffffff94
   16f4c:	bl	149a4 <__assert_fail@plt+0x3568>
   16f50:	ldr	r5, [r0]
   16f54:	mov	r6, r0
   16f58:	movw	r2, #50272	; 0xc460
   16f5c:	movt	r2, #1
   16f60:	ldr	r4, [r0, #4]
   16f64:	str	r6, [fp, #-136]	; 0xffffff78
   16f68:	mov	r0, r5
   16f6c:	mov	r1, r4
   16f70:	bl	1484c <__assert_fail@plt+0x3410>
   16f74:	cmp	r0, #0
   16f78:	beq	16f88 <argp_failure@@Base+0xa4c>
   16f7c:	mvn	r3, #0
   16f80:	str	r3, [r0, #12]
   16f84:	ldr	r4, [r6, #4]
   16f88:	movw	r2, #50280	; 0xc468
   16f8c:	movt	r2, #1
   16f90:	mov	r1, r4
   16f94:	mov	r0, r5
   16f98:	bl	1484c <__assert_fail@plt+0x3410>
   16f9c:	cmp	r0, #0
   16fa0:	beq	16fb4 <argp_failure@@Base+0xa78>
   16fa4:	mvn	r3, #0
   16fa8:	str	r3, [r0, #12]
   16fac:	ldr	r3, [fp, #-136]	; 0xffffff78
   16fb0:	ldr	r4, [r3, #4]
   16fb4:	cmp	r4, #0
   16fb8:	beq	167d0 <argp_failure@@Base+0x294>
   16fbc:	mov	r3, r5
   16fc0:	mov	r1, #0
   16fc4:	str	r1, [r3, #24]
   16fc8:	add	r1, r1, #1
   16fcc:	add	r3, r3, #28
   16fd0:	cmp	r1, r4
   16fd4:	bne	16fc4 <argp_failure@@Base+0xa88>
   16fd8:	mov	r0, r5
   16fdc:	movw	r3, #21328	; 0x5350
   16fe0:	movt	r3, #1
   16fe4:	mov	r2, #28
   16fe8:	bl	113e8 <qsort@plt>
   16fec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16ff0:	ands	r4, r3, #3
   16ff4:	beq	167dc <argp_failure@@Base+0x2a0>
   16ff8:	b	16dd4 <argp_failure@@Base+0x898>
   16ffc:	mov	r0, r7
   17000:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17004:	ldr	r1, [r7, #16]
   17008:	str	r4, [r7, #12]
   1700c:	ldrd	r2, [r7, #24]
   17010:	sub	r2, r3, r2
   17014:	cmp	r2, r1
   17018:	bls	16ed8 <argp_failure@@Base+0x99c>
   1701c:	mov	r0, r7
   17020:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17024:	ldr	r3, [r7, #28]
   17028:	b	16ed8 <argp_failure@@Base+0x99c>
   1702c:	mov	r1, r7
   17030:	mov	r0, r9
   17034:	orr	sl, sl, #2
   17038:	bl	1516c <__assert_fail@plt+0x3d30>
   1703c:	b	16ea8 <argp_failure@@Base+0x96c>
   17040:	mov	r0, r7
   17044:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17048:	b	16e8c <argp_failure@@Base+0x950>
   1704c:	mov	r2, #0
   17050:	mov	r3, r4
   17054:	ldrd	r0, [fp, #-108]	; 0xffffff94
   17058:	stm	sp, {r2, r7}
   1705c:	mov	r2, #1
   17060:	bl	15f6c <__assert_fail@plt+0x4b30>
   17064:	orr	r4, r4, r0
   17068:	b	16b9c <argp_failure@@Base+0x660>
   1706c:	str	sl, [fp, #-100]	; 0xffffff9c
   17070:	mov	r4, #1
   17074:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17078:	tst	r3, #16
   1707c:	beq	167e8 <argp_failure@@Base+0x2ac>
   17080:	b	16da0 <argp_failure@@Base+0x864>
   17084:	ldr	r3, [r7, #28]
   17088:	ldr	r2, [r7, #32]
   1708c:	cmp	r3, r2
   17090:	bcs	17778 <argp_failure@@Base+0x123c>
   17094:	add	r1, r3, #1
   17098:	mov	r2, #10
   1709c:	str	r1, [r7, #28]
   170a0:	strb	r2, [r3]
   170a4:	ldr	r2, [r5]
   170a8:	b	16bc4 <argp_failure@@Base+0x688>
   170ac:	tst	r9, #2
   170b0:	beq	17494 <argp_failure@@Base+0xf58>
   170b4:	add	r4, r4, #1
   170b8:	b	16968 <argp_failure@@Base+0x42c>
   170bc:	ldr	r2, [r5, #20]
   170c0:	ldr	r6, [r4, #16]
   170c4:	cmp	r2, #0
   170c8:	beq	1748c <argp_failure@@Base+0xf50>
   170cc:	ldr	r3, [r2, #20]
   170d0:	cmp	r3, #0
   170d4:	beq	1748c <argp_failure@@Base+0xf50>
   170d8:	mov	r0, r6
   170dc:	ldr	r3, [fp, #-104]	; 0xffffff98
   170e0:	ldr	r1, [r4, #4]
   170e4:	bl	1495c <__assert_fail@plt+0x3520>
   170e8:	mov	r4, r0
   170ec:	cmp	r4, #0
   170f0:	beq	172c0 <argp_failure@@Base+0xd84>
   170f4:	ldrb	r3, [r4]
   170f8:	cmp	r3, #0
   170fc:	beq	172b0 <argp_failure@@Base+0xd74>
   17100:	ldr	r2, [r7, #16]
   17104:	ldr	r1, [r7, #24]
   17108:	ldr	r3, [r7, #28]
   1710c:	sub	r3, r3, r1
   17110:	cmp	r3, r2
   17114:	bhi	176c8 <argp_failure@@Base+0x118c>
   17118:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1711c:	ldr	r9, [r7, #20]
   17120:	ldr	r8, [r3, #20]
   17124:	bic	r9, r9, r9, asr #31
   17128:	mov	sl, r8
   1712c:	str	r8, [r7, #4]
   17130:	add	r3, r8, #3
   17134:	str	sl, [r7, #12]
   17138:	cmp	r3, r9
   1713c:	bcc	176a4 <argp_failure@@Base+0x1168>
   17140:	cmp	r8, r9
   17144:	bhi	17250 <argp_failure@@Base+0xd14>
   17148:	ldr	r3, [r7, #28]
   1714c:	ldr	r1, [r7, #32]
   17150:	add	r2, r3, #3
   17154:	cmp	r1, r2
   17158:	bcs	17174 <argp_failure@@Base+0xc38>
   1715c:	mov	r1, #3
   17160:	mov	r0, r7
   17164:	bl	1a460 <argp_parse@@Base+0x230c>
   17168:	cmp	r0, #0
   1716c:	beq	1725c <argp_failure@@Base+0xd20>
   17170:	ldr	r3, [r7, #28]
   17174:	movw	r2, #50412	; 0xc4ec
   17178:	movt	r2, #1
   1717c:	ldrh	r1, [r2]
   17180:	ldrb	r2, [r2, #2]
   17184:	strh	r1, [r3]
   17188:	strb	r2, [r3, #2]
   1718c:	ldr	r3, [r7, #28]
   17190:	add	r3, r3, #3
   17194:	str	r3, [r7, #28]
   17198:	b	1725c <argp_failure@@Base+0xd20>
   1719c:	cmp	r3, r2
   171a0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   171a4:	ldr	r6, [r3, #12]
   171a8:	bhi	17564 <argp_failure@@Base+0x1028>
   171ac:	str	r6, [r7, #12]
   171b0:	ldr	sl, [r5, #4]
   171b4:	cmp	sl, #0
   171b8:	beq	16a5c <argp_failure@@Base+0x520>
   171bc:	movw	r3, #50400	; 0xc4e0
   171c0:	movt	r3, #1
   171c4:	movw	r8, #50392	; 0xc4d8
   171c8:	movt	r8, #1
   171cc:	movw	r9, #50408	; 0xc4e8
   171d0:	movt	r9, #1
   171d4:	str	r3, [fp, #-124]	; 0xffffff84
   171d8:	add	r6, r4, #24
   171dc:	b	171ec <argp_failure@@Base+0xcb0>
   171e0:	subs	sl, sl, #1
   171e4:	add	r6, r6, #24
   171e8:	beq	16a5c <argp_failure@@Base+0x520>
   171ec:	ldr	r3, [r6, #-24]	; 0xffffffe8
   171f0:	cmp	r3, #0
   171f4:	beq	171e0 <argp_failure@@Base+0xca4>
   171f8:	ldr	r3, [r6, #-12]
   171fc:	tst	r3, #2
   17200:	bne	171e0 <argp_failure@@Base+0xca4>
   17204:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17208:	sub	r1, fp, #76	; 0x4c
   1720c:	ldr	r0, [r3, #12]
   17210:	bl	15dbc <__assert_fail@plt+0x4980>
   17214:	mov	r1, r8
   17218:	mov	r0, r7
   1721c:	ldr	r2, [r6, #-24]	; 0xffffffe8
   17220:	bl	1a480 <argp_parse@@Base+0x232c>
   17224:	ldr	r3, [r4, #8]
   17228:	cmp	r3, #0
   1722c:	beq	171e0 <argp_failure@@Base+0xca4>
   17230:	ldr	ip, [r4, #12]
   17234:	mov	r1, r9
   17238:	mov	r2, r3
   1723c:	mov	r0, r7
   17240:	tst	ip, #1
   17244:	ldrne	r1, [fp, #-124]	; 0xffffff84
   17248:	bl	1a480 <argp_parse@@Base+0x232c>
   1724c:	b	171e0 <argp_failure@@Base+0xca4>
   17250:	mov	r1, r8
   17254:	mov	r0, r7
   17258:	bl	156f4 <__assert_fail@plt+0x42b8>
   1725c:	mov	r0, r4
   17260:	bl	112d4 <strlen@plt>
   17264:	subs	r8, r0, #0
   17268:	beq	172b0 <argp_failure@@Base+0xd74>
   1726c:	ldr	r0, [r7, #28]
   17270:	ldr	r2, [r7, #32]
   17274:	add	r3, r0, r8
   17278:	cmp	r2, r3
   1727c:	bcs	17298 <argp_failure@@Base+0xd5c>
   17280:	mov	r1, r8
   17284:	mov	r0, r7
   17288:	bl	1a460 <argp_parse@@Base+0x230c>
   1728c:	cmp	r0, #0
   17290:	beq	172b0 <argp_failure@@Base+0xd74>
   17294:	ldr	r0, [r7, #28]
   17298:	mov	r2, r8
   1729c:	mov	r1, r4
   172a0:	bl	11184 <memcpy@plt>
   172a4:	ldr	r3, [r7, #28]
   172a8:	add	r8, r3, r8
   172ac:	str	r8, [r7, #28]
   172b0:	cmp	r6, r4
   172b4:	beq	172c0 <argp_failure@@Base+0xd84>
   172b8:	mov	r0, r4
   172bc:	bl	19138 <argp_parse@@Base+0xfe4>
   172c0:	ldr	r1, [r7, #16]
   172c4:	ldrd	r2, [r7, #24]
   172c8:	sub	r2, r3, r2
   172cc:	cmp	r2, r1
   172d0:	bhi	17570 <argp_failure@@Base+0x1034>
   172d4:	mov	r2, #0
   172d8:	str	r2, [r7, #4]
   172dc:	ldr	r2, [r7, #32]
   172e0:	cmp	r2, r3
   172e4:	bhi	17300 <argp_failure@@Base+0xdc4>
   172e8:	mov	r1, #1
   172ec:	mov	r0, r7
   172f0:	bl	1a460 <argp_parse@@Base+0x230c>
   172f4:	cmp	r0, #0
   172f8:	beq	17310 <argp_failure@@Base+0xdd4>
   172fc:	ldr	r3, [r7, #28]
   17300:	add	r1, r3, #1
   17304:	mov	r2, #10
   17308:	str	r1, [r7, #28]
   1730c:	strb	r2, [r3]
   17310:	str	r5, [fp, #-88]	; 0xffffffa8
   17314:	b	16ac8 <argp_failure@@Base+0x58c>
   17318:	cmp	sl, #95	; 0x5f
   1731c:	cmpne	sl, #45	; 0x2d
   17320:	ubfx	r6, r6, #3, #1
   17324:	moveq	r3, #1
   17328:	movne	r3, #0
   1732c:	orrs	r6, r3, r6
   17330:	beq	17854 <argp_failure@@Base+0x1318>
   17334:	mov	r4, r5
   17338:	ldrb	r3, [r4, #1]!
   1733c:	lsl	r2, r3, #1
   17340:	cmp	r3, #45	; 0x2d
   17344:	cmpne	r3, #95	; 0x5f
   17348:	moveq	ip, #1
   1734c:	movne	ip, #0
   17350:	ldrh	r2, [r1, r2]
   17354:	ubfx	r0, r2, #3, #1
   17358:	orrs	r0, ip, r0
   1735c:	bne	17338 <argp_failure@@Base+0xdfc>
   17360:	tst	r2, #8192	; 0x2000
   17364:	sub	r6, r4, r5
   17368:	beq	17380 <argp_failure@@Base+0xe44>
   1736c:	ldrb	r3, [r4, #1]!
   17370:	lsl	r2, r3, #1
   17374:	ldrh	r2, [r1, r2]
   17378:	tst	r2, #8192	; 0x2000
   1737c:	bne	1736c <argp_failure@@Base+0xe30>
   17380:	cmp	r3, #44	; 0x2c
   17384:	cmpne	r3, #0
   17388:	beq	17550 <argp_failure@@Base+0x1014>
   1738c:	cmp	r3, #61	; 0x3d
   17390:	beq	177c4 <argp_failure@@Base+0x1288>
   17394:	ldrb	r3, [r4]
   17398:	lsl	r3, r3, #1
   1739c:	ldrh	r3, [r1, r3]
   173a0:	ands	r3, r3, #2048	; 0x800
   173a4:	moveq	r7, r3
   173a8:	streq	r7, [fp, #-112]	; 0xffffff90
   173ac:	bne	177f4 <argp_failure@@Base+0x12b8>
   173b0:	ldr	sl, [pc, #1436]	; 17954 <argp_failure@@Base+0x1418>
   173b4:	b	173c4 <argp_failure@@Base+0xe88>
   173b8:	add	sl, sl, #16
   173bc:	cmp	sl, r9
   173c0:	beq	17654 <argp_failure@@Base+0x1118>
   173c4:	mov	r0, sl
   173c8:	bl	112d4 <strlen@plt>
   173cc:	cmp	r0, r6
   173d0:	bne	173b8 <argp_failure@@Base+0xe7c>
   173d4:	mov	r2, r6
   173d8:	mov	r1, sl
   173dc:	mov	r0, r5
   173e0:	bl	11418 <strncmp@plt>
   173e4:	cmp	r0, #0
   173e8:	bne	173b8 <argp_failure@@Base+0xe7c>
   173ec:	cmp	r7, #0
   173f0:	bne	17794 <argp_failure@@Base+0x1258>
   173f4:	ldrb	r3, [sl, #15]
   173f8:	sub	r2, fp, #36	; 0x24
   173fc:	add	r3, r2, r3
   17400:	ldr	r2, [fp, #-112]	; 0xffffff90
   17404:	str	r2, [r3, #-40]	; 0xffffffd8
   17408:	ldrb	sl, [r4]
   1740c:	cmp	sl, #44	; 0x2c
   17410:	movne	r5, r4
   17414:	bne	16c78 <argp_failure@@Base+0x73c>
   17418:	add	r5, r4, #1
   1741c:	ldrb	sl, [r4, #1]
   17420:	b	16c78 <argp_failure@@Base+0x73c>
   17424:	mov	r0, r7
   17428:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1742c:	ldr	r0, [r7, #16]
   17430:	ldr	r3, [r7, #24]
   17434:	ldr	r2, [r7, #28]
   17438:	sub	r2, r2, r3
   1743c:	b	16874 <argp_failure@@Base+0x338>
   17440:	mov	r0, r7
   17444:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17448:	ldr	r3, [fp, #-120]	; 0xffffff88
   1744c:	ldr	r2, [r7, #16]
   17450:	ldr	r1, [r7, #24]
   17454:	str	r3, [r7, #4]
   17458:	ldr	r3, [r7, #28]
   1745c:	sub	r3, r3, r1
   17460:	cmp	r3, r2
   17464:	bls	16ae8 <argp_failure@@Base+0x5ac>
   17468:	mov	r0, r7
   1746c:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17470:	b	16ae8 <argp_failure@@Base+0x5ac>
   17474:	mov	r0, r7
   17478:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1747c:	b	16a74 <argp_failure@@Base+0x538>
   17480:	mov	r0, r7
   17484:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17488:	b	16908 <argp_failure@@Base+0x3cc>
   1748c:	mov	r4, r6
   17490:	b	170ec <argp_failure@@Base+0xbb0>
   17494:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17498:	sub	r1, fp, #76	; 0x4c
   1749c:	ldr	r0, [r3, #8]
   174a0:	bl	15dbc <__assert_fail@plt+0x4980>
   174a4:	ldr	r2, [r7, #28]
   174a8:	ldr	r1, [r7, #32]
   174ac:	cmp	r2, r1
   174b0:	bcc	174cc <argp_failure@@Base+0xf90>
   174b4:	mov	r1, #1
   174b8:	mov	r0, r7
   174bc:	bl	1a460 <argp_parse@@Base+0x230c>
   174c0:	cmp	r0, #0
   174c4:	beq	174dc <argp_failure@@Base+0xfa0>
   174c8:	ldr	r2, [r7, #28]
   174cc:	add	r0, r2, #1
   174d0:	mov	r1, #45	; 0x2d
   174d4:	str	r0, [r7, #28]
   174d8:	strb	r1, [r2]
   174dc:	ldr	r2, [r7, #28]
   174e0:	ldr	r1, [r7, #32]
   174e4:	ldrb	r8, [r4]
   174e8:	cmp	r2, r1
   174ec:	bcc	17508 <argp_failure@@Base+0xfcc>
   174f0:	mov	r1, #1
   174f4:	mov	r0, r7
   174f8:	bl	1a460 <argp_parse@@Base+0x230c>
   174fc:	cmp	r0, #0
   17500:	beq	17514 <argp_failure@@Base+0xfd8>
   17504:	ldr	r2, [r7, #28]
   17508:	add	r1, r2, #1
   1750c:	str	r1, [r7, #28]
   17510:	strb	r8, [r2]
   17514:	ldr	r3, [fp, #-124]	; 0xffffff84
   17518:	ldr	r2, [r5, #8]
   1751c:	cmp	r3, #0
   17520:	beq	1758c <argp_failure@@Base+0x1050>
   17524:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17528:	ldr	r1, [r3]
   1752c:	cmp	r1, #0
   17530:	bne	1758c <argp_failure@@Base+0x1050>
   17534:	cmp	r2, #0
   17538:	movne	r2, #1
   1753c:	strne	r2, [fp, #-80]	; 0xffffffb0
   17540:	b	170b4 <argp_failure@@Base+0xb78>
   17544:	mov	r3, #1
   17548:	str	r3, [fp, #-124]	; 0xffffff84
   1754c:	b	168f8 <argp_failure@@Base+0x3bc>
   17550:	cmp	sl, #110	; 0x6e
   17554:	beq	17674 <argp_failure@@Base+0x1138>
   17558:	mov	r7, #1
   1755c:	str	r7, [fp, #-112]	; 0xffffff90
   17560:	b	173b0 <argp_failure@@Base+0xe74>
   17564:	mov	r0, r7
   17568:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1756c:	b	171ac <argp_failure@@Base+0xc70>
   17570:	mov	r0, r7
   17574:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17578:	ldr	r3, [r7, #28]
   1757c:	b	172d4 <argp_failure@@Base+0xd98>
   17580:	mov	r0, r7
   17584:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17588:	b	169a8 <argp_failure@@Base+0x46c>
   1758c:	cmp	r2, #0
   17590:	beq	170b4 <argp_failure@@Base+0xb78>
   17594:	ldr	r1, [r5, #12]
   17598:	mov	r0, r7
   1759c:	tst	r1, #1
   175a0:	ldrne	r1, [fp, #-144]	; 0xffffff70
   175a4:	ldreq	r1, [fp, #-140]	; 0xffffff74
   175a8:	bl	1a480 <argp_parse@@Base+0x232c>
   175ac:	b	170b4 <argp_failure@@Base+0xb78>
   175b0:	sub	r2, fp, #76	; 0x4c
   175b4:	ldr	r0, [r4, #16]
   175b8:	ldr	r1, [r5, #20]
   175bc:	bl	15b50 <__assert_fail@plt+0x4714>
   175c0:	b	17310 <argp_failure@@Base+0xdd4>
   175c4:	ldr	r3, [r7, #28]
   175c8:	ldr	r1, [r7, #32]
   175cc:	add	r2, r3, #12
   175d0:	cmp	r1, r2
   175d4:	bcs	175f0 <argp_failure@@Base+0x10b4>
   175d8:	mov	r1, #12
   175dc:	mov	r0, r7
   175e0:	bl	1a460 <argp_parse@@Base+0x230c>
   175e4:	cmp	r0, #0
   175e8:	beq	16ea8 <argp_failure@@Base+0x96c>
   175ec:	ldr	r3, [r7, #28]
   175f0:	movw	r2, #50312	; 0xc488
   175f4:	movt	r2, #1
   175f8:	ldrd	r0, [r2]
   175fc:	ldr	r2, [r2, #8]
   17600:	str	r0, [r3]
   17604:	str	r1, [r3, #4]
   17608:	str	r2, [r3, #8]
   1760c:	ldr	r3, [r7, #28]
   17610:	add	r3, r3, #12
   17614:	str	r3, [r7, #28]
   17618:	b	16ea8 <argp_failure@@Base+0x96c>
   1761c:	ldr	lr, [fp, #-96]	; 0xffffffa0
   17620:	mov	ip, #1
   17624:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   17628:	ldrd	r4, [lr, #8]
   1762c:	ldrd	r2, [lr, #32]
   17630:	strd	r0, [r8]
   17634:	ldrd	r0, [lr, #24]
   17638:	strd	r4, [r8, #8]
   1763c:	strd	r2, [r8, #32]
   17640:	ldrd	r2, [lr, #16]
   17644:	strd	r2, [r8, #16]
   17648:	strd	r0, [r8, #24]
   1764c:	str	ip, [r8, #36]	; 0x24
   17650:	b	167a4 <argp_failure@@Base+0x268>
   17654:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17658:	mov	r2, #0
   1765c:	mov	r1, r2
   17660:	str	r6, [sp]
   17664:	str	r5, [sp, #4]
   17668:	ldr	r0, [fp, #-104]	; 0xffffff98
   1766c:	bl	1653c <argp_failure@@Base>
   17670:	b	17408 <argp_failure@@Base+0xecc>
   17674:	ldrb	r3, [r5, #1]
   17678:	cmp	r3, #111	; 0x6f
   1767c:	bne	17558 <argp_failure@@Base+0x101c>
   17680:	ldrb	r3, [r5, #2]
   17684:	cmp	r3, #45	; 0x2d
   17688:	bne	17558 <argp_failure@@Base+0x101c>
   1768c:	mov	r3, #0
   17690:	add	r5, r5, #3
   17694:	sub	r6, r6, #3
   17698:	mov	r7, #1
   1769c:	str	r3, [fp, #-112]	; 0xffffff90
   176a0:	b	173b0 <argp_failure@@Base+0xe74>
   176a4:	ldr	r3, [r7, #28]
   176a8:	ldr	r2, [r7, #32]
   176ac:	cmp	r3, r2
   176b0:	bcs	1775c <argp_failure@@Base+0x1220>
   176b4:	add	r1, r3, #1
   176b8:	mov	r2, #10
   176bc:	str	r1, [r7, #28]
   176c0:	strb	r2, [r3]
   176c4:	b	1725c <argp_failure@@Base+0xd20>
   176c8:	mov	r0, r7
   176cc:	bl	19df4 <argp_parse@@Base+0x1ca0>
   176d0:	ldr	r2, [r7, #16]
   176d4:	ldr	r1, [r7, #24]
   176d8:	ldr	r3, [r7, #28]
   176dc:	ldr	sl, [fp, #-96]	; 0xffffffa0
   176e0:	ldr	r9, [r7, #20]
   176e4:	sub	r3, r3, r1
   176e8:	cmp	r3, r2
   176ec:	ldr	r8, [sl, #20]
   176f0:	bic	r9, r9, r9, asr #31
   176f4:	bls	17128 <argp_failure@@Base+0xbec>
   176f8:	mov	r0, r7
   176fc:	bl	19df4 <argp_parse@@Base+0x1ca0>
   17700:	ldr	r2, [r7, #16]
   17704:	str	r8, [r7, #4]
   17708:	mov	r8, sl
   1770c:	ldr	r1, [r7, #24]
   17710:	ldr	r3, [r7, #28]
   17714:	ldr	sl, [sl, #20]
   17718:	sub	r3, r3, r1
   1771c:	cmp	r3, r2
   17720:	bls	17948 <argp_failure@@Base+0x140c>
   17724:	mov	r0, r7
   17728:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1772c:	ldr	r8, [r8, #20]
   17730:	b	17130 <argp_failure@@Base+0xbf4>
   17734:	ldr	r0, [fp, #-128]	; 0xffffff80
   17738:	bl	11214 <funlockfile@plt>
   1773c:	b	16bf8 <argp_failure@@Base+0x6bc>
   17740:	movw	r3, #50180	; 0xc404
   17744:	movt	r3, #1
   17748:	str	r5, [sp]
   1774c:	mov	r1, r2
   17750:	ldr	r0, [fp, #-104]	; 0xffffff98
   17754:	bl	1653c <argp_failure@@Base>
   17758:	b	16cb4 <argp_failure@@Base+0x778>
   1775c:	mov	r1, #1
   17760:	mov	r0, r7
   17764:	bl	1a460 <argp_parse@@Base+0x230c>
   17768:	cmp	r0, #0
   1776c:	beq	1725c <argp_failure@@Base+0xd20>
   17770:	ldr	r3, [r7, #28]
   17774:	b	176b4 <argp_failure@@Base+0x1178>
   17778:	mov	r1, #1
   1777c:	mov	r0, r7
   17780:	bl	1a460 <argp_parse@@Base+0x230c>
   17784:	cmp	r0, #0
   17788:	ldrne	r3, [r7, #28]
   1778c:	bne	17094 <argp_failure@@Base+0xb58>
   17790:	b	170a4 <argp_failure@@Base+0xb68>
   17794:	ldrb	r2, [sl, #14]
   17798:	cmp	r2, #0
   1779c:	bne	173f4 <argp_failure@@Base+0xeb8>
   177a0:	ldr	r3, [fp, #-120]	; 0xffffff88
   177a4:	b	1765c <argp_failure@@Base+0x1120>
   177a8:	mov	r1, #1
   177ac:	mov	r0, r7
   177b0:	bl	1a460 <argp_parse@@Base+0x230c>
   177b4:	cmp	r0, #0
   177b8:	ldrne	r3, [r7, #28]
   177bc:	bne	16d5c <argp_failure@@Base+0x820>
   177c0:	b	16d6c <argp_failure@@Base+0x830>
   177c4:	ldrb	r3, [r4, #1]
   177c8:	add	r4, r4, #1
   177cc:	lsl	r3, r3, #1
   177d0:	ldrh	r3, [r1, r3]
   177d4:	tst	r3, #8192	; 0x2000
   177d8:	beq	173a0 <argp_failure@@Base+0xe64>
   177dc:	ldrb	r3, [r4, #1]!
   177e0:	lsl	r3, r3, #1
   177e4:	ldrh	r3, [r1, r3]
   177e8:	tst	r3, #8192	; 0x2000
   177ec:	bne	177dc <argp_failure@@Base+0x12a0>
   177f0:	b	173a0 <argp_failure@@Base+0xe64>
   177f4:	mov	r2, #10
   177f8:	mov	r1, #0
   177fc:	mov	r0, r4
   17800:	bl	11100 <strtol@plt>
   17804:	ldrb	r3, [r4]
   17808:	ldr	r2, [r7]
   1780c:	lsl	r3, r3, #1
   17810:	ldrh	r7, [r2, r3]
   17814:	str	r0, [fp, #-112]	; 0xffffff90
   17818:	tst	r7, #2048	; 0x800
   1781c:	beq	17834 <argp_failure@@Base+0x12f8>
   17820:	ldrb	r3, [r4, #1]!
   17824:	lsl	r3, r3, #1
   17828:	ldrh	r7, [r2, r3]
   1782c:	tst	r7, #2048	; 0x800
   17830:	bne	17820 <argp_failure@@Base+0x12e4>
   17834:	ands	r7, r7, #8192	; 0x2000
   17838:	beq	173b0 <argp_failure@@Base+0xe74>
   1783c:	ldrb	r3, [r4, #1]!
   17840:	lsl	r3, r3, #1
   17844:	ldrh	r7, [r2, r3]
   17848:	ands	r7, r7, #8192	; 0x2000
   1784c:	bne	1783c <argp_failure@@Base+0x1300>
   17850:	b	173b0 <argp_failure@@Base+0xe74>
   17854:	mov	r3, sl
   17858:	mov	r4, r5
   1785c:	b	17380 <argp_failure@@Base+0xe44>
   17860:	ldr	r5, [fp, #-112]	; 0xffffff90
   17864:	movw	r4, #49960	; 0xc328
   17868:	movt	r4, #1
   1786c:	ldr	r3, [r7, #28]
   17870:	ldr	r2, [r7, #32]
   17874:	cmp	r3, r2
   17878:	bcc	17894 <argp_failure@@Base+0x1358>
   1787c:	mov	r1, #1
   17880:	mov	r0, r7
   17884:	bl	1a460 <argp_parse@@Base+0x230c>
   17888:	cmp	r0, #0
   1788c:	beq	178a4 <argp_failure@@Base+0x1368>
   17890:	ldr	r3, [r7, #28]
   17894:	add	r1, r3, #1
   17898:	mov	r2, #10
   1789c:	str	r1, [r7, #28]
   178a0:	strb	r2, [r3]
   178a4:	mov	r0, r4
   178a8:	bl	112d4 <strlen@plt>
   178ac:	subs	r6, r0, #0
   178b0:	ldr	r0, [r7, #28]
   178b4:	ldr	r3, [r7, #32]
   178b8:	bne	17900 <argp_failure@@Base+0x13c4>
   178bc:	cmp	r0, r3
   178c0:	bcc	178dc <argp_failure@@Base+0x13a0>
   178c4:	mov	r1, #1
   178c8:	mov	r0, r7
   178cc:	bl	1a460 <argp_parse@@Base+0x230c>
   178d0:	cmp	r0, #0
   178d4:	beq	16b7c <argp_failure@@Base+0x640>
   178d8:	ldr	r0, [r7, #28]
   178dc:	add	r2, r0, #1
   178e0:	mov	r3, #10
   178e4:	str	r2, [r7, #28]
   178e8:	strb	r3, [r0]
   178ec:	b	16b7c <argp_failure@@Base+0x640>
   178f0:	movw	r4, #49960	; 0xc328
   178f4:	movt	r4, #1
   178f8:	ldr	r5, [fp, #-104]	; 0xffffff98
   178fc:	b	1786c <argp_failure@@Base+0x1330>
   17900:	add	r2, r0, r6
   17904:	cmp	r3, r2
   17908:	bcs	17928 <argp_failure@@Base+0x13ec>
   1790c:	mov	r1, r6
   17910:	mov	r0, r7
   17914:	bl	1a460 <argp_parse@@Base+0x230c>
   17918:	cmp	r0, #0
   1791c:	ldr	r0, [r7, #28]
   17920:	ldreq	r3, [r7, #32]
   17924:	beq	178bc <argp_failure@@Base+0x1380>
   17928:	mov	r2, r6
   1792c:	mov	r1, r4
   17930:	bl	11184 <memcpy@plt>
   17934:	ldr	r0, [r7, #28]
   17938:	ldr	r3, [r7, #32]
   1793c:	add	r0, r0, r6
   17940:	str	r0, [r7, #28]
   17944:	b	178bc <argp_failure@@Base+0x1380>
   17948:	mov	r8, sl
   1794c:	b	17130 <argp_failure@@Base+0xbf4>
   17950:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   17954:	andeq	ip, r1, ip, ror #2

00017958 <argp_help@@Base>:
   17958:	push	{lr}		; (str lr, [sp, #-4]!)
   1795c:	sub	sp, sp, #12
   17960:	str	r3, [sp]
   17964:	mov	r3, r2
   17968:	mov	r2, r1
   1796c:	mov	r1, #0
   17970:	bl	16758 <argp_failure@@Base+0x21c>
   17974:	add	sp, sp, #12
   17978:	pop	{pc}		; (ldr pc, [sp], #4)

0001797c <argp_state_help@@Base>:
   1797c:	strd	r4, [sp, #-12]!
   17980:	subs	r4, r0, #0
   17984:	mov	r5, r2
   17988:	str	lr, [sp, #8]
   1798c:	sub	sp, sp, #12
   17990:	beq	17a00 <argp_state_help@@Base+0x84>
   17994:	ldr	r3, [r4, #16]
   17998:	adds	r2, r1, #0
   1799c:	movne	r2, #1
   179a0:	eor	r0, r3, #2
   179a4:	ands	r2, r2, r0, lsr #1
   179a8:	bne	179bc <argp_state_help@@Base+0x40>
   179ac:	add	sp, sp, #12
   179b0:	ldrd	r4, [sp]
   179b4:	add	sp, sp, #8
   179b8:	pop	{pc}		; (ldr pc, [sp], #4)
   179bc:	ldr	r0, [r4, #40]	; 0x28
   179c0:	tst	r3, #64	; 0x40
   179c4:	mov	r2, r1
   179c8:	orrne	r5, r5, #128	; 0x80
   179cc:	mov	r1, r4
   179d0:	mov	r3, r5
   179d4:	str	r0, [sp]
   179d8:	ldr	r0, [r4]
   179dc:	bl	16758 <argp_failure@@Base+0x21c>
   179e0:	ldr	r3, [r4, #16]
   179e4:	tst	r3, #32
   179e8:	bne	179ac <argp_state_help@@Base+0x30>
   179ec:	ands	r0, r5, #256	; 0x100
   179f0:	bne	17a2c <argp_state_help@@Base+0xb0>
   179f4:	tst	r5, #512	; 0x200
   179f8:	beq	179ac <argp_state_help@@Base+0x30>
   179fc:	bl	112bc <exit@plt>
   17a00:	cmp	r1, #0
   17a04:	beq	179ac <argp_state_help@@Base+0x30>
   17a08:	movw	r3, #54816	; 0xd620
   17a0c:	movt	r3, #2
   17a10:	ldr	ip, [r3]
   17a14:	mov	r2, r1
   17a18:	mov	r3, r5
   17a1c:	mov	r1, r4
   17a20:	str	ip, [sp]
   17a24:	bl	16758 <argp_failure@@Base+0x21c>
   17a28:	b	179ec <argp_state_help@@Base+0x70>
   17a2c:	movw	r3, #54792	; 0xd608
   17a30:	movt	r3, #2
   17a34:	ldr	r0, [r3]
   17a38:	bl	112bc <exit@plt>

00017a3c <argp_error@@Base>:
   17a3c:	push	{r1, r2, r3}
   17a40:	strd	r4, [sp, #-12]!
   17a44:	subs	r5, r0, #0
   17a48:	str	lr, [sp, #8]
   17a4c:	sub	sp, sp, #8
   17a50:	beq	17b28 <argp_error@@Base+0xec>
   17a54:	ldr	r3, [r5, #16]
   17a58:	tst	r3, #2
   17a5c:	bne	17b10 <argp_error@@Base+0xd4>
   17a60:	ldr	r4, [r5, #44]	; 0x2c
   17a64:	cmp	r4, #0
   17a68:	beq	17b10 <argp_error@@Base+0xd4>
   17a6c:	mov	r0, r4
   17a70:	bl	113d0 <flockfile@plt>
   17a74:	ldr	r0, [r5, #40]	; 0x28
   17a78:	add	r3, sp, #24
   17a7c:	str	r3, [sp, #4]
   17a80:	mov	r1, r4
   17a84:	bl	110e8 <fputs_unlocked@plt>
   17a88:	ldr	r3, [r4, #20]
   17a8c:	ldr	r2, [r4, #24]
   17a90:	cmp	r3, r2
   17a94:	addcc	r1, r3, #1
   17a98:	movcc	r2, #58	; 0x3a
   17a9c:	strcc	r1, [r4, #20]
   17aa0:	strbcc	r2, [r3]
   17aa4:	bcs	17b6c <argp_error@@Base+0x130>
   17aa8:	ldr	r3, [r4, #20]
   17aac:	ldr	r2, [r4, #24]
   17ab0:	cmp	r3, r2
   17ab4:	addcc	r1, r3, #1
   17ab8:	movcc	r2, #32
   17abc:	strcc	r1, [r4, #20]
   17ac0:	strbcc	r2, [r3]
   17ac4:	bcs	17b7c <argp_error@@Base+0x140>
   17ac8:	mov	r0, r4
   17acc:	ldr	r2, [sp, #4]
   17ad0:	ldr	r1, [sp, #20]
   17ad4:	bl	11394 <vfprintf@plt>
   17ad8:	ldr	r3, [r4, #20]
   17adc:	ldr	r2, [r4, #24]
   17ae0:	cmp	r3, r2
   17ae4:	addcc	r1, r3, #1
   17ae8:	movcc	r2, #10
   17aec:	strcc	r1, [r4, #20]
   17af0:	strbcc	r2, [r3]
   17af4:	bcs	17b5c <argp_error@@Base+0x120>
   17af8:	mov	r0, r5
   17afc:	mov	r2, #260	; 0x104
   17b00:	mov	r1, r4
   17b04:	bl	1797c <argp_state_help@@Base>
   17b08:	mov	r0, r4
   17b0c:	bl	11214 <funlockfile@plt>
   17b10:	add	sp, sp, #8
   17b14:	ldrd	r4, [sp]
   17b18:	ldr	lr, [sp, #8]
   17b1c:	add	sp, sp, #12
   17b20:	add	sp, sp, #12
   17b24:	bx	lr
   17b28:	movw	r3, #54824	; 0xd628
   17b2c:	movt	r3, #2
   17b30:	ldr	r4, [r3]
   17b34:	cmp	r4, #0
   17b38:	beq	17b10 <argp_error@@Base+0xd4>
   17b3c:	mov	r0, r4
   17b40:	bl	113d0 <flockfile@plt>
   17b44:	add	r2, sp, #24
   17b48:	movw	r3, #54816	; 0xd620
   17b4c:	movt	r3, #2
   17b50:	str	r2, [sp, #4]
   17b54:	ldr	r0, [r3]
   17b58:	b	17a80 <argp_error@@Base+0x44>
   17b5c:	mov	r1, #10
   17b60:	mov	r0, r4
   17b64:	bl	11364 <__overflow@plt>
   17b68:	b	17af8 <argp_error@@Base+0xbc>
   17b6c:	mov	r1, #58	; 0x3a
   17b70:	mov	r0, r4
   17b74:	bl	11364 <__overflow@plt>
   17b78:	b	17aa8 <argp_error@@Base+0x6c>
   17b7c:	mov	r1, #32
   17b80:	mov	r0, r4
   17b84:	bl	11364 <__overflow@plt>
   17b88:	b	17ac8 <argp_error@@Base+0x8c>
   17b8c:	ldr	r3, [r0]
   17b90:	strd	r4, [sp, #-16]!
   17b94:	ldr	r5, [r0, #16]
   17b98:	str	r6, [sp, #8]
   17b9c:	str	lr, [sp, #12]
   17ba0:	cmp	r3, #0
   17ba4:	beq	17c50 <argp_error@@Base+0x214>
   17ba8:	ldr	r0, [r1, #8]
   17bac:	mov	r2, #0
   17bb0:	add	r0, r0, #1
   17bb4:	str	r0, [r1, #8]
   17bb8:	b	17bc0 <argp_error@@Base+0x184>
   17bbc:	add	r2, r2, #1
   17bc0:	add	r3, r3, #24
   17bc4:	ldr	r0, [r3, #-20]	; 0xffffffec
   17bc8:	cmp	r0, #0
   17bcc:	bne	17bbc <argp_error@@Base+0x180>
   17bd0:	ldr	r0, [r3, #-24]	; 0xffffffe8
   17bd4:	cmp	r0, #0
   17bd8:	bne	17bbc <argp_error@@Base+0x180>
   17bdc:	ldr	r0, [r3, #-8]
   17be0:	cmp	r0, #0
   17be4:	bne	17bbc <argp_error@@Base+0x180>
   17be8:	ldr	r0, [r3, #-4]
   17bec:	cmp	r0, #0
   17bf0:	bne	17bbc <argp_error@@Base+0x180>
   17bf4:	ldm	r1, {r0, r3}
   17bf8:	add	ip, r2, r2, lsl #1
   17bfc:	add	r2, r3, r2
   17c00:	add	r0, r0, ip
   17c04:	stm	r1, {r0, r2}
   17c08:	cmp	r5, #0
   17c0c:	beq	17c40 <argp_error@@Base+0x204>
   17c10:	ldr	r0, [r5]
   17c14:	cmp	r0, #0
   17c18:	beq	17c40 <argp_error@@Base+0x204>
   17c1c:	mov	r4, r1
   17c20:	mov	r1, r4
   17c24:	bl	17b8c <argp_error@@Base+0x150>
   17c28:	ldr	r3, [r4, #12]
   17c2c:	ldr	r0, [r5, #16]!
   17c30:	add	r3, r3, #1
   17c34:	cmp	r0, #0
   17c38:	str	r3, [r4, #12]
   17c3c:	bne	17c20 <argp_error@@Base+0x1e4>
   17c40:	ldrd	r4, [sp]
   17c44:	ldr	r6, [sp, #8]
   17c48:	add	sp, sp, #12
   17c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c50:	ldr	r3, [r0, #4]
   17c54:	cmp	r3, #0
   17c58:	beq	17c08 <argp_error@@Base+0x1cc>
   17c5c:	ldr	r3, [r1, #8]
   17c60:	add	r3, r3, #1
   17c64:	str	r3, [r1, #8]
   17c68:	b	17c08 <argp_error@@Base+0x1cc>
   17c6c:	cmp	r0, #86	; 0x56
   17c70:	beq	17c7c <argp_error@@Base+0x240>
   17c74:	mov	r0, #7
   17c78:	bx	lr
   17c7c:	movw	r3, #54924	; 0xd68c
   17c80:	movt	r3, #2
   17c84:	str	r4, [sp, #-8]!
   17c88:	ldr	r3, [r3]
   17c8c:	mov	r4, r2
   17c90:	str	lr, [sp, #4]
   17c94:	cmp	r3, #0
   17c98:	beq	17cc8 <argp_error@@Base+0x28c>
   17c9c:	mov	r1, r2
   17ca0:	ldr	r0, [r2, #48]	; 0x30
   17ca4:	blx	r3
   17ca8:	ldr	r0, [r4, #16]
   17cac:	ands	r0, r0, #32
   17cb0:	beq	17cc4 <argp_error@@Base+0x288>
   17cb4:	ldr	r4, [sp]
   17cb8:	add	sp, sp, #4
   17cbc:	mov	r0, #0
   17cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cc4:	bl	112bc <exit@plt>
   17cc8:	movw	r3, #55008	; 0xd6e0
   17ccc:	movt	r3, #2
   17cd0:	ldr	r2, [r3]
   17cd4:	cmp	r2, #0
   17cd8:	beq	17cf0 <argp_error@@Base+0x2b4>
   17cdc:	movw	r1, #51112	; 0xc7a8
   17ce0:	movt	r1, #1
   17ce4:	ldr	r0, [r4, #48]	; 0x30
   17ce8:	bl	112ec <fprintf@plt>
   17cec:	b	17ca8 <argp_error@@Base+0x26c>
   17cf0:	movw	r2, #50716	; 0xc61c
   17cf4:	movt	r2, #1
   17cf8:	movw	r1, #46064	; 0xb3f0
   17cfc:	movt	r1, #1
   17d00:	mov	r0, r4
   17d04:	bl	17a3c <argp_error@@Base>
   17d08:	b	17ca8 <argp_error@@Base+0x26c>
   17d0c:	cmn	r0, #3
   17d10:	str	r4, [sp, #-8]!
   17d14:	mov	r4, r2
   17d18:	str	lr, [sp, #4]
   17d1c:	sub	sp, sp, #8
   17d20:	beq	17e20 <argp_error@@Base+0x3e4>
   17d24:	ble	17d5c <argp_error@@Base+0x320>
   17d28:	cmn	r0, #2
   17d2c:	beq	17dd4 <argp_error@@Base+0x398>
   17d30:	cmp	r0, #63	; 0x3f
   17d34:	bne	17dc0 <argp_error@@Base+0x384>
   17d38:	mov	r0, r4
   17d3c:	movw	r2, #634	; 0x27a
   17d40:	ldr	r1, [r4, #48]	; 0x30
   17d44:	bl	1797c <argp_state_help@@Base>
   17d48:	mov	r0, #0
   17d4c:	add	sp, sp, #8
   17d50:	ldr	r4, [sp]
   17d54:	add	sp, sp, #4
   17d58:	pop	{pc}		; (ldr pc, [sp], #4)
   17d5c:	cmn	r0, #4
   17d60:	bne	17dc0 <argp_error@@Base+0x384>
   17d64:	cmp	r1, #0
   17d68:	movw	r0, #50752	; 0xc640
   17d6c:	movt	r0, #1
   17d70:	mov	r2, #10
   17d74:	movne	r0, r1
   17d78:	movw	r4, #54920	; 0xd688
   17d7c:	movt	r4, #2
   17d80:	mov	r1, #0
   17d84:	bl	11100 <strtol@plt>
   17d88:	str	r0, [r4]
   17d8c:	b	17d98 <argp_error@@Base+0x35c>
   17d90:	mov	r0, #1
   17d94:	bl	111cc <sleep@plt>
   17d98:	ldr	r3, [r4]
   17d9c:	sub	r2, r3, #1
   17da0:	cmp	r3, #0
   17da4:	str	r2, [r4]
   17da8:	bgt	17d90 <argp_error@@Base+0x354>
   17dac:	mov	r0, #0
   17db0:	add	sp, sp, #8
   17db4:	ldr	r4, [sp]
   17db8:	add	sp, sp, #4
   17dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17dc0:	mov	r0, #7
   17dc4:	add	sp, sp, #8
   17dc8:	ldr	r4, [sp]
   17dcc:	add	sp, sp, #4
   17dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   17dd4:	movw	r3, #54820	; 0xd624
   17dd8:	movt	r3, #2
   17ddc:	str	r1, [sp, #4]
   17de0:	mov	r0, r1
   17de4:	str	r1, [r3]
   17de8:	bl	19080 <argp_parse@@Base+0xf2c>
   17dec:	ldr	r3, [r4, #16]
   17df0:	movw	r2, #54816	; 0xd620
   17df4:	movt	r2, #2
   17df8:	str	r0, [r4, #40]	; 0x28
   17dfc:	str	r0, [r2]
   17e00:	ldr	r1, [sp, #4]
   17e04:	and	r3, r3, #3
   17e08:	cmp	r3, #1
   17e0c:	bne	17dac <argp_error@@Base+0x370>
   17e10:	ldr	r3, [r4, #8]
   17e14:	mov	r0, #0
   17e18:	str	r1, [r3]
   17e1c:	b	17d4c <argp_error@@Base+0x310>
   17e20:	ldr	r1, [r4, #48]	; 0x30
   17e24:	mov	r0, r4
   17e28:	movw	r2, #513	; 0x201
   17e2c:	bl	1797c <argp_state_help@@Base>
   17e30:	mov	r0, #0
   17e34:	add	sp, sp, #8
   17e38:	ldr	r4, [sp]
   17e3c:	add	sp, sp, #4
   17e40:	pop	{pc}		; (ldr pc, [sp], #4)
   17e44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e48:	strd	r6, [sp, #8]
   17e4c:	strd	r8, [sp, #16]
   17e50:	strd	sl, [sp, #24]
   17e54:	str	lr, [sp, #32]
   17e58:	sub	sp, sp, #44	; 0x2c
   17e5c:	ldr	fp, [r0]
   17e60:	str	r3, [sp, #16]
   17e64:	ldr	r3, [r0, #16]
   17e68:	ldr	r7, [sp, #80]	; 0x50
   17e6c:	cmp	fp, #0
   17e70:	str	r3, [sp, #24]
   17e74:	strd	r0, [sp, #28]
   17e78:	str	r2, [sp, #36]	; 0x24
   17e7c:	beq	18128 <argp_error@@Base+0x6ec>
   17e80:	ldr	r9, [r7, #4]
   17e84:	movw	r3, #36409	; 0x8e39
   17e88:	movt	r3, #14563	; 0x38e3
   17e8c:	mov	r4, fp
   17e90:	str	r3, [sp, #20]
   17e94:	ldr	r6, [r4, #4]
   17e98:	cmp	r6, #0
   17e9c:	bne	17eac <argp_error@@Base+0x470>
   17ea0:	ldr	r3, [r4]
   17ea4:	cmp	r3, #0
   17ea8:	beq	18020 <argp_error@@Base+0x5e4>
   17eac:	ldr	r3, [r4, #12]
   17eb0:	tst	r3, #4
   17eb4:	moveq	r5, r3
   17eb8:	moveq	fp, r4
   17ebc:	ldrne	r5, [fp, #12]
   17ec0:	ands	r5, r5, #8
   17ec4:	bne	18008 <argp_error@@Base+0x5cc>
   17ec8:	tst	r3, #8
   17ecc:	bne	17f4c <argp_error@@Base+0x510>
   17ed0:	sub	r3, r6, #1
   17ed4:	cmp	r3, #254	; 0xfe
   17ed8:	bhi	17f4c <argp_error@@Base+0x510>
   17edc:	bl	112a4 <__ctype_b_loc@plt>
   17ee0:	ldr	r1, [r0]
   17ee4:	lsl	r3, r6, #1
   17ee8:	ldrh	r3, [r1, r3]
   17eec:	tst	r3, #16384	; 0x4000
   17ef0:	beq	17f4c <argp_error@@Base+0x510>
   17ef4:	add	r3, r9, #1
   17ef8:	str	r3, [r7, #4]
   17efc:	strb	r6, [r9]
   17f00:	ldr	r3, [fp, #8]
   17f04:	cmp	r3, #0
   17f08:	beq	17f3c <argp_error@@Base+0x500>
   17f0c:	ldr	r3, [r7, #4]
   17f10:	mov	r2, #58	; 0x3a
   17f14:	add	r1, r3, #1
   17f18:	str	r1, [r7, #4]
   17f1c:	strb	r2, [r3]
   17f20:	ldr	r3, [fp, #12]
   17f24:	tst	r3, #1
   17f28:	beq	17f3c <argp_error@@Base+0x500>
   17f2c:	ldr	r3, [r7, #4]
   17f30:	add	r1, r3, #1
   17f34:	str	r1, [r7, #4]
   17f38:	strb	r2, [r3]
   17f3c:	ldr	r3, [r7, #4]
   17f40:	mov	r2, #0
   17f44:	strb	r2, [r3]
   17f48:	ldr	r9, [r7, #4]
   17f4c:	ldr	sl, [r4]
   17f50:	cmp	sl, #0
   17f54:	beq	18008 <argp_error@@Base+0x5cc>
   17f58:	ldr	r3, [r7]
   17f5c:	ldr	r8, [r3, #8]
   17f60:	str	r3, [sp, #12]
   17f64:	ldr	r0, [r8]
   17f68:	cmp	r0, #0
   17f6c:	beq	17f90 <argp_error@@Base+0x554>
   17f70:	mov	r6, r8
   17f74:	mov	r1, sl
   17f78:	bl	110f4 <strcmp@plt>
   17f7c:	cmp	r0, #0
   17f80:	beq	18010 <argp_error@@Base+0x5d4>
   17f84:	ldr	r0, [r6, #16]!
   17f88:	cmp	r0, #0
   17f8c:	bne	17f74 <argp_error@@Base+0x538>
   17f90:	ldr	r0, [fp, #8]
   17f94:	ldr	r1, [r7, #8]
   17f98:	cmp	r0, #0
   17f9c:	str	sl, [r1]
   17fa0:	beq	17fb4 <argp_error@@Base+0x578>
   17fa4:	ldr	r3, [fp, #12]
   17fa8:	tst	r3, #1
   17fac:	movne	r5, #2
   17fb0:	moveq	r5, #1
   17fb4:	str	r5, [r1, #4]
   17fb8:	mov	r3, #0
   17fbc:	add	ip, r1, #16
   17fc0:	ldr	r0, [r4, #4]
   17fc4:	str	r3, [r1, #8]
   17fc8:	ldr	r2, [sp, #16]
   17fcc:	cmp	r0, r3
   17fd0:	ldr	r3, [sp, #12]
   17fd4:	ldreq	r0, [fp, #4]
   17fd8:	ldr	r3, [r3, #48]	; 0x30
   17fdc:	bic	r0, r0, #-16777216	; 0xff000000
   17fe0:	sub	r3, r2, r3
   17fe4:	ldr	r2, [sp, #20]
   17fe8:	asr	r3, r3, #2
   17fec:	mul	r3, r2, r3
   17ff0:	add	r3, r3, #1
   17ff4:	add	r3, r0, r3, lsl #24
   17ff8:	str	r3, [r1, #12]
   17ffc:	mov	r3, #0
   18000:	str	ip, [r7, #8]
   18004:	str	r3, [r1, #16]
   18008:	add	r4, r4, #24
   1800c:	b	17e94 <argp_error@@Base+0x458>
   18010:	sub	r6, r6, r8
   18014:	cmp	r6, #0
   18018:	bge	18008 <argp_error@@Base+0x5cc>
   1801c:	b	17f90 <argp_error@@Base+0x554>
   18020:	ldr	r3, [r4, #16]
   18024:	cmp	r3, #0
   18028:	bne	17eac <argp_error@@Base+0x470>
   1802c:	ldr	r3, [r4, #20]
   18030:	cmp	r3, #0
   18034:	bne	17eac <argp_error@@Base+0x470>
   18038:	ldr	r3, [sp, #28]
   1803c:	ldr	r2, [r3, #4]
   18040:	mov	r3, #0
   18044:	ldr	r1, [sp, #16]
   18048:	ldr	r0, [sp, #24]
   1804c:	str	r2, [r1]
   18050:	mov	r2, r1
   18054:	ldr	r1, [sp, #28]
   18058:	cmp	r0, r3
   1805c:	stmib	r2, {r1, r9}
   18060:	ldr	r1, [sp, #32]
   18064:	str	r3, [r2, #12]
   18068:	str	r1, [r2, #16]
   1806c:	ldr	r1, [sp, #36]	; 0x24
   18070:	str	r3, [r2, #24]
   18074:	str	r3, [r2, #28]
   18078:	str	r3, [r2, #32]
   1807c:	str	r1, [r2, #20]
   18080:	beq	180bc <argp_error@@Base+0x680>
   18084:	ldr	r2, [r0]
   18088:	cmp	r2, r3
   1808c:	beq	1814c <argp_error@@Base+0x710>
   18090:	mov	r1, r0
   18094:	add	r3, r3, #1
   18098:	ldr	r2, [r1, r3, lsl #4]
   1809c:	cmp	r2, #0
   180a0:	bne	18094 <argp_error@@Base+0x658>
   180a4:	lsl	r3, r3, #2
   180a8:	ldr	r2, [r7, #12]
   180ac:	ldr	r1, [sp, #16]
   180b0:	add	r3, r2, r3
   180b4:	str	r2, [r1, #28]
   180b8:	str	r3, [r7, #12]
   180bc:	ldr	r3, [sp, #16]
   180c0:	add	r0, r3, #36	; 0x24
   180c4:	ldr	r5, [sp, #24]
   180c8:	cmp	r5, #0
   180cc:	beq	1810c <argp_error@@Base+0x6d0>
   180d0:	ldr	r1, [r5]
   180d4:	cmp	r1, #0
   180d8:	beq	1810c <argp_error@@Base+0x6d0>
   180dc:	ldr	r6, [sp, #16]
   180e0:	mov	r2, #0
   180e4:	add	r4, r2, #1
   180e8:	mov	r3, r0
   180ec:	str	r7, [sp]
   180f0:	mov	r0, r1
   180f4:	mov	r1, r6
   180f8:	bl	17e44 <argp_error@@Base+0x408>
   180fc:	ldr	r1, [r5, r4, lsl #4]
   18100:	mov	r2, r4
   18104:	cmp	r1, #0
   18108:	bne	180e4 <argp_error@@Base+0x6a8>
   1810c:	add	sp, sp, #44	; 0x2c
   18110:	ldrd	r4, [sp]
   18114:	ldrd	r6, [sp, #8]
   18118:	ldrd	r8, [sp, #16]
   1811c:	ldrd	sl, [sp, #24]
   18120:	add	sp, sp, #32
   18124:	pop	{pc}		; (ldr pc, [sp], #4)
   18128:	ldr	r3, [sp, #28]
   1812c:	ldr	r2, [r3, #4]
   18130:	cmp	r2, #0
   18134:	beq	18140 <argp_error@@Base+0x704>
   18138:	ldr	r9, [r7, #4]
   1813c:	b	18040 <argp_error@@Base+0x604>
   18140:	ldr	r0, [sp, #16]
   18144:	str	r2, [sp, #16]
   18148:	b	180c4 <argp_error@@Base+0x688>
   1814c:	mov	r3, r2
   18150:	b	180a8 <argp_error@@Base+0x66c>

00018154 <argp_parse@@Base>:
   18154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18158:	tst	r3, #1
   1815c:	mov	r5, r3
   18160:	strd	r6, [sp, #8]
   18164:	mov	r7, r0
   18168:	strd	r8, [sp, #16]
   1816c:	strd	sl, [sp, #24]
   18170:	add	fp, sp, #32
   18174:	str	lr, [sp, #32]
   18178:	sub	sp, sp, #236	; 0xec
   1817c:	str	r1, [fp, #-244]	; 0xffffff0c
   18180:	str	r2, [fp, #-232]	; 0xffffff18
   18184:	bne	181b0 <argp_parse@@Base+0x5c>
   18188:	movw	r3, #54820	; 0xd624
   1818c:	movt	r3, #2
   18190:	ldr	r2, [r3]
   18194:	cmp	r2, #0
   18198:	beq	18bd4 <argp_parse@@Base+0xa80>
   1819c:	movw	r4, #54816	; 0xd620
   181a0:	movt	r4, #2
   181a4:	ldr	r3, [r4]
   181a8:	cmp	r3, #0
   181ac:	beq	18be4 <argp_parse@@Base+0xa90>
   181b0:	ands	r3, r5, #4
   181b4:	moveq	r6, #1
   181b8:	movne	r6, #0
   181bc:	ands	ip, r5, #16
   181c0:	str	r3, [fp, #-236]	; 0xffffff14
   181c4:	beq	1821c <argp_parse@@Base+0xc8>
   181c8:	mov	r3, #0
   181cc:	sub	r4, fp, #196	; 0xc4
   181d0:	str	r6, [fp, #-228]	; 0xffffff1c
   181d4:	cmp	r7, r3
   181d8:	str	r3, [fp, #-224]	; 0xffffff20
   181dc:	str	r3, [fp, #-220]	; 0xffffff24
   181e0:	str	r3, [fp, #-216]	; 0xffffff28
   181e4:	str	r3, [r4, #8]
   181e8:	str	r3, [r4, #12]
   181ec:	str	r3, [r4, #16]
   181f0:	str	r3, [r4, #20]
   181f4:	str	r3, [r4, #24]
   181f8:	str	r3, [r4, #28]
   181fc:	str	r3, [r4, #32]
   18200:	bne	182cc <argp_parse@@Base+0x178>
   18204:	mov	r3, #52	; 0x34
   18208:	mov	sl, #36	; 0x24
   1820c:	mov	r9, r7
   18210:	str	r3, [fp, #-236]	; 0xffffff14
   18214:	mov	r3, sl
   18218:	b	18304 <argp_parse@@Base+0x1b0>
   1821c:	sub	sp, sp, #64	; 0x40
   18220:	mov	r1, ip
   18224:	add	r3, sp, #8
   18228:	sub	sp, sp, #32
   1822c:	add	r4, sp, #8
   18230:	mov	r0, r3
   18234:	mov	r2, #64	; 0x40
   18238:	str	ip, [r4]
   1823c:	str	ip, [r4, #4]
   18240:	str	ip, [r4, #8]
   18244:	str	ip, [r4, #12]
   18248:	str	r3, [r4, #16]
   1824c:	str	ip, [r4, #20]
   18250:	str	ip, [r4, #24]
   18254:	bl	11328 <memset@plt>
   18258:	movw	r2, #55008	; 0xd6e0
   1825c:	movt	r2, #2
   18260:	ldr	r1, [r2]
   18264:	mov	r3, r0
   18268:	cmp	r7, #0
   1826c:	movw	r2, #50436	; 0xc504
   18270:	movt	r2, #1
   18274:	strne	r7, [r3], #16
   18278:	str	r2, [r3]
   1827c:	cmp	r1, #0
   18280:	beq	18d4c <argp_parse@@Base+0xbf8>
   18284:	ldr	r1, [pc, #3392]	; 18fcc <argp_parse@@Base+0xe78>
   18288:	add	r2, r3, #32
   1828c:	str	r1, [r3, #16]
   18290:	mov	r3, #0
   18294:	mov	r7, r4
   18298:	str	r6, [fp, #-228]	; 0xffffff1c
   1829c:	sub	r4, fp, #196	; 0xc4
   182a0:	str	r3, [fp, #-224]	; 0xffffff20
   182a4:	str	r3, [fp, #-220]	; 0xffffff24
   182a8:	str	r3, [fp, #-216]	; 0xffffff28
   182ac:	str	r3, [r2]
   182b0:	str	r3, [r4, #8]
   182b4:	str	r3, [r4, #12]
   182b8:	str	r3, [r4, #16]
   182bc:	str	r3, [r4, #20]
   182c0:	str	r3, [r4, #24]
   182c4:	str	r3, [r4, #28]
   182c8:	str	r3, [r4, #32]
   182cc:	sub	r1, fp, #228	; 0xe4
   182d0:	mov	r0, r7
   182d4:	bl	17b8c <argp_error@@Base+0x150>
   182d8:	ldr	r6, [fp, #-228]	; 0xffffff1c
   182dc:	ldrd	r2, [fp, #-224]	; 0xffffff20
   182e0:	ldr	r9, [fp, #-216]	; 0xffffff28
   182e4:	add	r3, r3, #1
   182e8:	add	r2, r2, #1
   182ec:	add	r3, r3, r3, lsl #3
   182f0:	lsl	r9, r9, #2
   182f4:	lsl	r3, r3, #2
   182f8:	add	sl, r9, r3
   182fc:	add	r2, sl, r2, lsl #4
   18300:	str	r2, [fp, #-236]	; 0xffffff14
   18304:	str	r3, [fp, #-240]	; 0xffffff10
   18308:	ldr	r3, [fp, #-236]	; 0xffffff14
   1830c:	add	r0, r6, r3
   18310:	add	r0, r0, #1
   18314:	bl	19cc8 <argp_parse@@Base+0x1b74>
   18318:	cmp	r0, #0
   1831c:	mov	r6, r0
   18320:	str	r0, [fp, #-40]	; 0xffffffd8
   18324:	moveq	r5, #12
   18328:	ldr	r3, [fp, #-240]	; 0xffffff10
   1832c:	beq	1884c <argp_parse@@Base+0x6f8>
   18330:	mov	r2, r9
   18334:	mov	r1, #1
   18338:	ldrd	r8, [r4, #8]
   1833c:	add	ip, r0, sl
   18340:	add	r3, r0, r3
   18344:	str	r0, [fp, #-112]	; 0xffffff90
   18348:	ldr	lr, [fp, #-236]	; 0xffffff14
   1834c:	str	r1, [fp, #-196]	; 0xffffff3c
   18350:	str	r1, [fp, #-192]	; 0xffffff40
   18354:	str	ip, [fp, #-240]	; 0xffffff10
   18358:	strd	r8, [fp, #-140]	; 0xffffff74
   1835c:	ldrd	r8, [r4, #16]
   18360:	add	sl, r0, lr
   18364:	str	r3, [fp, #-104]	; 0xffffff98
   18368:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   1836c:	strd	r8, [fp, #-252]	; 0xffffff04
   18370:	ldrd	r8, [r4, #24]
   18374:	str	sl, [fp, #-156]	; 0xffffff64
   18378:	strd	r0, [fp, #-148]	; 0xffffff6c
   1837c:	mov	r0, r3
   18380:	sub	r3, fp, #260	; 0x104
   18384:	str	ip, [fp, #-152]	; 0xffffff68
   18388:	mov	r1, #0
   1838c:	ldr	ip, [r4, #32]
   18390:	strd	r8, [r3]
   18394:	ldrd	r8, [fp, #-252]	; 0xffffff04
   18398:	strd	r8, [fp, #-132]	; 0xffffff7c
   1839c:	ldrd	r8, [r3]
   183a0:	str	ip, [fp, #-116]	; 0xffffff8c
   183a4:	strd	r8, [fp, #-124]	; 0xffffff84
   183a8:	bl	11328 <memset@plt>
   183ac:	ldr	ip, [fp, #-240]	; 0xffffff10
   183b0:	sub	r2, fp, #160	; 0xa0
   183b4:	tst	r5, #8
   183b8:	str	r2, [fp, #-212]	; 0xffffff2c
   183bc:	str	sl, [fp, #-208]	; 0xffffff30
   183c0:	str	r0, [fp, #-200]	; 0xffffff38
   183c4:	str	ip, [fp, #-204]	; 0xffffff34
   183c8:	bne	1886c <argp_parse@@Base+0x718>
   183cc:	ands	r3, r5, #4
   183d0:	cmp	r3, #0
   183d4:	moveq	r3, sl
   183d8:	beq	183ec <argp_parse@@Base+0x298>
   183dc:	add	r3, sl, #1
   183e0:	mov	r2, #43	; 0x2b
   183e4:	str	r3, [fp, #-208]	; 0xffffff30
   183e8:	strb	r2, [sl]
   183ec:	ldr	r2, [fp, #-204]	; 0xffffff34
   183f0:	mov	r4, #0
   183f4:	cmp	r7, r4
   183f8:	strb	r4, [r3]
   183fc:	str	r4, [r2]
   18400:	str	r7, [fp, #-160]	; 0xffffff60
   18404:	beq	18a54 <argp_parse@@Base+0x900>
   18408:	sub	ip, fp, #212	; 0xd4
   1840c:	mov	r2, r4
   18410:	ldr	r3, [fp, #-112]	; 0xffffff90
   18414:	mov	r1, r4
   18418:	mov	r0, r7
   1841c:	str	ip, [sp]
   18420:	bl	17e44 <argp_error@@Base+0x408>
   18424:	movw	r1, #54824	; 0xd628
   18428:	movt	r1, #2
   1842c:	ldr	r6, [fp, #-232]	; 0xffffff18
   18430:	movw	r2, #54828	; 0xd62c
   18434:	movt	r2, #2
   18438:	str	r0, [fp, #-108]	; 0xffffff94
   1843c:	mov	lr, #1
   18440:	ldr	r3, [fp, #-112]	; 0xffffff90
   18444:	ldr	ip, [r1]
   18448:	str	lr, [fp, #-100]	; 0xffffff9c
   1844c:	ldr	r1, [fp, #-244]	; 0xffffff0c
   18450:	cmp	r0, r3
   18454:	mov	r0, #0
   18458:	ldr	r2, [r2]
   1845c:	movls	r3, r6
   18460:	ldr	lr, [fp, #-160]	; 0xffffff60
   18464:	str	ip, [fp, #-52]	; 0xffffffcc
   18468:	str	r1, [fp, #-92]	; 0xffffffa4
   1846c:	mov	r1, #0
   18470:	str	r2, [fp, #-48]	; 0xffffffd0
   18474:	sub	r2, fp, #160	; 0xa0
   18478:	str	lr, [fp, #-96]	; 0xffffffa0
   1847c:	str	r6, [fp, #-88]	; 0xffffffa8
   18480:	strd	r4, [fp, #-84]	; 0xffffffac
   18484:	strd	r0, [fp, #-76]	; 0xffffffb4
   18488:	strd	r0, [fp, #-68]	; 0xffffffbc
   1848c:	strd	r0, [fp, #-60]	; 0xffffffc4
   18490:	str	r2, [fp, #-44]	; 0xffffffd4
   18494:	bls	1857c <argp_parse@@Base+0x428>
   18498:	mov	r6, #3
   1849c:	movt	r6, #256	; 0x100
   184a0:	ldr	r8, [fp, #-232]	; 0xffffff18
   184a4:	add	r4, r3, #36	; 0x24
   184a8:	ldr	r2, [fp, #8]
   184ac:	str	r2, [r3, #24]
   184b0:	b	184fc <argp_parse@@Base+0x3a8>
   184b4:	ldr	lr, [r4, #-24]	; 0xffffffe8
   184b8:	ldr	ip, [r4, #-4]
   184bc:	str	ip, [fp, #-60]	; 0xffffffc4
   184c0:	ldr	ip, [r4, #-12]
   184c4:	str	ip, [fp, #-68]	; 0xffffffbc
   184c8:	ldr	ip, [r4, #-8]
   184cc:	str	lr, [fp, #-76]	; 0xffffffb4
   184d0:	str	ip, [fp, #-64]	; 0xffffffc0
   184d4:	blx	r3
   184d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   184dc:	str	r3, [r4, #-4]
   184e0:	ldr	r3, [fp, #-108]	; 0xffffff94
   184e4:	cmp	r4, r3
   184e8:	bcs	18b08 <argp_parse@@Base+0x9b4>
   184ec:	cmp	r0, #7
   184f0:	cmpne	r0, #0
   184f4:	bne	18af8 <argp_parse@@Base+0x9a4>
   184f8:	add	r4, r4, #36	; 0x24
   184fc:	ldr	r3, [r4, #-20]	; 0xffffffec
   18500:	mov	r1, #0
   18504:	sub	r2, fp, #96	; 0x60
   18508:	mov	r0, r6
   1850c:	cmp	r3, r1
   18510:	beq	18524 <argp_parse@@Base+0x3d0>
   18514:	ldr	ip, [r4, #-16]
   18518:	ldr	r3, [r3, #28]
   1851c:	ldr	r3, [r3, ip, lsl #2]
   18520:	str	r3, [r4, #-12]
   18524:	ldr	r3, [r4, #-36]	; 0xffffffdc
   18528:	cmp	r3, #0
   1852c:	bne	184b4 <argp_parse@@Base+0x360>
   18530:	ldr	r3, [r4, #-32]	; 0xffffffe0
   18534:	ldr	r3, [r3, #16]
   18538:	cmp	r3, #0
   1853c:	beq	18564 <argp_parse@@Base+0x410>
   18540:	ldr	r3, [r3]
   18544:	cmp	r3, #0
   18548:	beq	18564 <argp_parse@@Base+0x410>
   1854c:	ldr	ip, [r4, #-12]
   18550:	ldr	r3, [r4, #-8]
   18554:	str	ip, [r3]
   18558:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1855c:	cmp	r3, #0
   18560:	bne	184b4 <argp_parse@@Base+0x360>
   18564:	ldr	r3, [fp, #-108]	; 0xffffff94
   18568:	cmp	r4, r3
   1856c:	bcc	184f8 <argp_parse@@Base+0x3a4>
   18570:	str	r8, [fp, #-232]	; 0xffffff18
   18574:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18578:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1857c:	tst	r5, #2
   18580:	beq	18ac8 <argp_parse@@Base+0x974>
   18584:	mov	r2, #0
   18588:	ldr	r4, [fp, #-92]	; 0xffffffa4
   1858c:	tst	r5, #1
   18590:	subne	r3, r3, #4
   18594:	str	r2, [fp, #-144]	; 0xffffff70
   18598:	ldr	r2, [fp, #-232]	; 0xffffff18
   1859c:	strne	r3, [fp, #-88]	; 0xffffffa8
   185a0:	addne	r4, r4, #1
   185a4:	strne	r4, [fp, #-92]	; 0xffffffa4
   185a8:	cmp	r2, r3
   185ac:	beq	18ae0 <argp_parse@@Base+0x98c>
   185b0:	movw	r3, #54816	; 0xd620
   185b4:	movt	r3, #2
   185b8:	ldr	r3, [r3]
   185bc:	str	r3, [fp, #-56]	; 0xffffffc8
   185c0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   185c4:	movw	r3, #50764	; 0xc64c
   185c8:	movt	r3, #1
   185cc:	mov	r9, #6
   185d0:	movt	r9, #256	; 0x100
   185d4:	ldr	r7, [fp, #-84]	; 0xffffffac
   185d8:	mov	r0, r4
   185dc:	str	r3, [fp, #-232]	; 0xffffff18
   185e0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   185e4:	cmp	r3, #0
   185e8:	beq	186d0 <argp_parse@@Base+0x57c>
   185ec:	cmp	r3, r7
   185f0:	movgt	r3, #0
   185f4:	strgt	r3, [fp, #-72]	; 0xffffffb8
   185f8:	bgt	186d0 <argp_parse@@Base+0x57c>
   185fc:	cmp	r0, r7
   18600:	ble	18918 <argp_parse@@Base+0x7c4>
   18604:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18608:	tst	r3, #4
   1860c:	bne	18b2c <argp_parse@@Base+0x9d8>
   18610:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18614:	ldr	sl, [r3, r7, lsl #2]
   18618:	str	sl, [fp, #-136]	; 0xffffff78
   1861c:	ldr	r8, [fp, #-112]	; 0xffffff90
   18620:	str	r7, [fp, #-84]	; 0xffffffac
   18624:	ldr	ip, [fp, #-108]	; 0xffffff94
   18628:	cmp	r8, ip
   1862c:	bcs	18910 <argp_parse@@Base+0x7bc>
   18630:	mov	lr, r7
   18634:	add	r4, r8, #36	; 0x24
   18638:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1863c:	mov	r0, #0
   18640:	add	r6, lr, #1
   18644:	sub	r2, fp, #96	; 0x60
   18648:	mov	r1, sl
   1864c:	sub	r5, r4, #36	; 0x24
   18650:	mov	r8, r4
   18654:	str	r6, [fp, #-84]	; 0xffffffac
   18658:	cmp	r3, r0
   1865c:	beq	188fc <argp_parse@@Base+0x7a8>
   18660:	ldr	lr, [r4, #-24]	; 0xffffffe8
   18664:	ldr	ip, [r4, #-4]
   18668:	str	ip, [fp, #-60]	; 0xffffffc4
   1866c:	ldr	ip, [r4, #-12]
   18670:	str	ip, [fp, #-68]	; 0xffffffbc
   18674:	ldr	ip, [r4, #-8]
   18678:	str	lr, [fp, #-76]	; 0xffffffb4
   1867c:	str	ip, [fp, #-64]	; 0xffffffc0
   18680:	blx	r3
   18684:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18688:	cmp	r0, #7
   1868c:	str	r3, [r4, #-4]
   18690:	beq	18884 <argp_parse@@Base+0x730>
   18694:	cmp	r0, #0
   18698:	bne	189cc <argp_parse@@Base+0x878>
   1869c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   186a0:	ldr	r3, [fp, #-84]	; 0xffffffac
   186a4:	cmp	r7, r3
   186a8:	bge	189e4 <argp_parse@@Base+0x890>
   186ac:	ldr	r1, [r4, #-24]	; 0xffffffe8
   186b0:	sub	ip, r3, r7
   186b4:	mov	r7, r3
   186b8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   186bc:	add	r3, r1, ip
   186c0:	str	r3, [r4, #-24]	; 0xffffffe8
   186c4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   186c8:	cmp	r3, #0
   186cc:	bne	185ec <argp_parse@@Base+0x498>
   186d0:	cmp	r2, #0
   186d4:	beq	185fc <argp_parse@@Base+0x4a8>
   186d8:	mvn	r2, #0
   186dc:	str	r7, [fp, #-148]	; 0xffffff6c
   186e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   186e4:	str	r2, [fp, #-140]	; 0xffffff74
   186e8:	ldr	r2, [fp, #-156]	; 0xffffff64
   186ec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   186f0:	ands	ip, r3, #64	; 0x40
   186f4:	ldr	r3, [fp, #-152]	; 0xffffff68
   186f8:	beq	189f8 <argp_parse@@Base+0x8a4>
   186fc:	mov	ip, #0
   18700:	sub	lr, fp, #148	; 0x94
   18704:	stm	sp, {ip, lr}
   18708:	bl	19228 <argp_parse@@Base+0x10d4>
   1870c:	ldr	r7, [fp, #-148]	; 0xffffff6c
   18710:	mov	r4, r0
   18714:	cmn	r4, #1
   18718:	str	r7, [fp, #-84]	; 0xffffffac
   1871c:	beq	18a1c <argp_parse@@Base+0x8c8>
   18720:	cmp	r4, #63	; 0x3f
   18724:	beq	1873c <argp_parse@@Base+0x5e8>
   18728:	cmp	r4, #1
   1872c:	bne	18cc0 <argp_parse@@Base+0xb6c>
   18730:	sub	r7, r7, #1
   18734:	ldr	sl, [fp, #-136]	; 0xffffff78
   18738:	b	1861c <argp_parse@@Base+0x4c8>
   1873c:	ldr	r3, [fp, #-140]	; 0xffffff74
   18740:	cmn	r3, #1
   18744:	beq	18bf8 <argp_parse@@Base+0xaa4>
   18748:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1874c:	sub	r7, fp, #96	; 0x60
   18750:	mov	r0, r7
   18754:	mov	r2, #260	; 0x104
   18758:	mov	r5, #7
   1875c:	bl	1797c <argp_state_help@@Base>
   18760:	ldr	r3, [fp, #-112]	; 0xffffff90
   18764:	ldr	ip, [fp, #-108]	; 0xffffff94
   18768:	cmp	r3, ip
   1876c:	mov	r4, r3
   18770:	bcs	18f5c <argp_parse@@Base+0xe08>
   18774:	mov	r6, #5
   18778:	movt	r6, #256	; 0x100
   1877c:	ldr	r3, [r4]
   18780:	mov	r1, #0
   18784:	sub	r2, fp, #96	; 0x60
   18788:	mov	r0, r6
   1878c:	cmp	r3, r1
   18790:	beq	187c4 <argp_parse@@Base+0x670>
   18794:	ldr	lr, [r4, #12]
   18798:	ldr	ip, [r4, #32]
   1879c:	str	ip, [fp, #-60]	; 0xffffffc4
   187a0:	ldr	ip, [r4, #24]
   187a4:	str	ip, [fp, #-68]	; 0xffffffbc
   187a8:	ldr	ip, [r4, #28]
   187ac:	str	lr, [fp, #-76]	; 0xffffffb4
   187b0:	str	ip, [fp, #-64]	; 0xffffffc0
   187b4:	blx	r3
   187b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   187bc:	str	r3, [r4, #32]
   187c0:	ldr	ip, [fp, #-108]	; 0xffffff94
   187c4:	add	r4, r4, #36	; 0x24
   187c8:	cmp	r4, ip
   187cc:	bcc	1877c <argp_parse@@Base+0x628>
   187d0:	ldr	r3, [fp, #-112]	; 0xffffff90
   187d4:	sub	r4, ip, #36	; 0x24
   187d8:	cmp	r4, r3
   187dc:	bcc	1883c <argp_parse@@Base+0x6e8>
   187e0:	mov	r7, #7
   187e4:	movt	r7, #256	; 0x100
   187e8:	ldr	r6, [r4]
   187ec:	mov	r1, #0
   187f0:	sub	r2, fp, #96	; 0x60
   187f4:	mov	r0, r7
   187f8:	cmp	r6, r1
   187fc:	beq	18830 <argp_parse@@Base+0x6dc>
   18800:	ldr	ip, [r4, #12]
   18804:	ldr	r3, [r4, #32]
   18808:	str	r3, [fp, #-60]	; 0xffffffc4
   1880c:	ldr	r3, [r4, #24]
   18810:	str	r3, [fp, #-68]	; 0xffffffbc
   18814:	ldr	r3, [r4, #28]
   18818:	str	ip, [fp, #-76]	; 0xffffffb4
   1881c:	str	r3, [fp, #-64]	; 0xffffffc0
   18820:	blx	r6
   18824:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18828:	str	r3, [r4, #32]
   1882c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18830:	sub	r4, r4, #36	; 0x24
   18834:	cmp	r4, r3
   18838:	bcs	187e8 <argp_parse@@Base+0x694>
   1883c:	cmp	r5, #7
   18840:	moveq	r5, #22
   18844:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18848:	bl	19138 <argp_parse@@Base+0xfe4>
   1884c:	mov	r0, r5
   18850:	sub	sp, fp, #32
   18854:	ldrd	r4, [sp]
   18858:	ldrd	r6, [sp, #8]
   1885c:	ldrd	r8, [sp, #16]
   18860:	ldrd	sl, [sp, #24]
   18864:	add	sp, sp, #32
   18868:	pop	{pc}		; (ldr pc, [sp], #4)
   1886c:	ldr	lr, [fp, #-236]	; 0xffffff14
   18870:	add	r3, sl, #1
   18874:	mov	r2, #45	; 0x2d
   18878:	str	r3, [fp, #-208]	; 0xffffff30
   1887c:	strb	r2, [r6, lr]
   18880:	b	183ec <argp_parse@@Base+0x298>
   18884:	ldr	lr, [fp, #-84]	; 0xffffffac
   18888:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1888c:	sub	lr, lr, #1
   18890:	cmp	r3, #0
   18894:	str	lr, [fp, #-84]	; 0xffffffac
   18898:	beq	18f98 <argp_parse@@Base+0xe44>
   1889c:	ldr	r6, [r5, #12]
   188a0:	sub	r2, fp, #96	; 0x60
   188a4:	mov	r1, #0
   188a8:	mov	r0, r9
   188ac:	ldr	ip, [r5, #24]
   188b0:	ldr	lr, [r5, #32]
   188b4:	str	ip, [fp, #-68]	; 0xffffffbc
   188b8:	ldr	ip, [r5, #28]
   188bc:	str	r6, [fp, #-76]	; 0xffffffb4
   188c0:	str	ip, [fp, #-64]	; 0xffffffc0
   188c4:	str	lr, [fp, #-60]	; 0xffffffc4
   188c8:	blx	r3
   188cc:	ldr	ip, [fp, #-108]	; 0xffffff94
   188d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   188d4:	cmp	ip, r4
   188d8:	movls	r2, #0
   188dc:	movhi	r2, #1
   188e0:	cmp	r0, #7
   188e4:	str	r3, [r5, #32]
   188e8:	movne	r2, #0
   188ec:	cmp	r2, #0
   188f0:	beq	18fa0 <argp_parse@@Base+0xe4c>
   188f4:	ldr	lr, [fp, #-84]	; 0xffffffac
   188f8:	b	18634 <argp_parse@@Base+0x4e0>
   188fc:	str	lr, [fp, #-84]	; 0xffffffac
   18900:	add	r3, r4, #36	; 0x24
   18904:	cmp	ip, r4
   18908:	mov	r4, r3
   1890c:	bhi	18638 <argp_parse@@Base+0x4e4>
   18910:	ldr	r0, [fp, #-92]	; 0xffffffa4
   18914:	ldr	r7, [fp, #-84]	; 0xffffffac
   18918:	cmp	r7, r0
   1891c:	bne	18b2c <argp_parse@@Base+0x9d8>
   18920:	ldr	r4, [fp, #-112]	; 0xffffff90
   18924:	ldr	ip, [fp, #-108]	; 0xffffff94
   18928:	mov	r3, r4
   1892c:	cmp	r4, ip
   18930:	bcs	18f6c <argp_parse@@Base+0xe18>
   18934:	mov	r6, #2
   18938:	movt	r6, #256	; 0x100
   1893c:	mov	r5, #0
   18940:	b	18988 <argp_parse@@Base+0x834>
   18944:	ldr	ip, [r4, #-4]
   18948:	str	ip, [fp, #-60]	; 0xffffffc4
   1894c:	ldr	ip, [r4, #-12]
   18950:	str	ip, [fp, #-68]	; 0xffffffbc
   18954:	ldr	ip, [r4, #-8]
   18958:	str	r3, [fp, #-76]	; 0xffffffb4
   1895c:	str	ip, [fp, #-64]	; 0xffffffc0
   18960:	blx	r5
   18964:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18968:	mov	r5, r0
   1896c:	str	r3, [r4, #-4]
   18970:	ldr	ip, [fp, #-108]	; 0xffffff94
   18974:	cmp	ip, r4
   18978:	bls	18e40 <argp_parse@@Base+0xcec>
   1897c:	cmp	r5, #7
   18980:	cmpne	r5, #0
   18984:	bne	18e08 <argp_parse@@Base+0xcb4>
   18988:	ldr	r3, [r4, #12]
   1898c:	sub	r2, fp, #96	; 0x60
   18990:	mov	r0, r6
   18994:	add	r4, r4, #36	; 0x24
   18998:	subs	r1, r3, #0
   1899c:	bne	18974 <argp_parse@@Base+0x820>
   189a0:	ldr	r5, [r4, #-36]	; 0xffffffdc
   189a4:	cmp	r5, #0
   189a8:	bne	18944 <argp_parse@@Base+0x7f0>
   189ac:	cmp	r4, ip
   189b0:	mov	r5, #7
   189b4:	bcc	18988 <argp_parse@@Base+0x834>
   189b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   189bc:	sub	r4, ip, #36	; 0x24
   189c0:	cmp	r4, r3
   189c4:	bcs	18e5c <argp_parse@@Base+0xd08>
   189c8:	b	18ee0 <argp_parse@@Base+0xd8c>
   189cc:	mov	r5, r0
   189d0:	cmp	r5, #7
   189d4:	bne	18760 <argp_parse@@Base+0x60c>
   189d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   189dc:	sub	r7, fp, #96	; 0x60
   189e0:	b	18750 <argp_parse@@Base+0x5fc>
   189e4:	mov	r1, #1
   189e8:	mov	r7, r3
   189ec:	mov	r2, r1
   189f0:	str	r1, [fp, #-100]	; 0xffffff9c
   189f4:	b	185e0 <argp_parse@@Base+0x48c>
   189f8:	str	ip, [sp]
   189fc:	sub	ip, fp, #148	; 0x94
   18a00:	str	ip, [sp, #4]
   18a04:	bl	191c0 <argp_parse@@Base+0x106c>
   18a08:	ldr	r7, [fp, #-148]	; 0xffffff6c
   18a0c:	mov	r4, r0
   18a10:	cmn	r4, #1
   18a14:	str	r7, [fp, #-84]	; 0xffffffac
   18a18:	bne	18720 <argp_parse@@Base+0x5cc>
   18a1c:	mov	r3, #0
   18a20:	cmp	r7, #1
   18a24:	str	r3, [fp, #-100]	; 0xffffff9c
   18a28:	ble	18b00 <argp_parse@@Base+0x9ac>
   18a2c:	sub	r3, r7, #-1073741823	; 0xc0000001
   18a30:	ldr	r1, [fp, #-232]	; 0xffffff18
   18a34:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18a38:	ldr	r0, [r2, r3, lsl #2]
   18a3c:	bl	110f4 <strcmp@plt>
   18a40:	cmp	r0, #0
   18a44:	bne	18b00 <argp_parse@@Base+0x9ac>
   18a48:	str	r7, [fp, #-72]	; 0xffffffb8
   18a4c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   18a50:	b	185fc <argp_parse@@Base+0x4a8>
   18a54:	ldr	r2, [fp, #-244]	; 0xffffff0c
   18a58:	movw	r3, #54824	; 0xd628
   18a5c:	movt	r3, #2
   18a60:	mov	r0, #1
   18a64:	tst	r5, #2
   18a68:	ldr	r1, [r3]
   18a6c:	movw	r3, #54828	; 0xd62c
   18a70:	movt	r3, #2
   18a74:	str	r0, [fp, #-100]	; 0xffffff9c
   18a78:	mov	r0, #0
   18a7c:	ldr	ip, [fp, #-232]	; 0xffffff18
   18a80:	str	r7, [fp, #-96]	; 0xffffffa0
   18a84:	str	r2, [fp, #-92]	; 0xffffffa4
   18a88:	ldr	r2, [r3]
   18a8c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18a90:	str	r1, [fp, #-52]	; 0xffffffcc
   18a94:	mov	r1, #0
   18a98:	str	r2, [fp, #-48]	; 0xffffffd0
   18a9c:	str	r3, [fp, #-108]	; 0xffffff94
   18aa0:	sub	r3, fp, #160	; 0xa0
   18aa4:	str	ip, [fp, #-88]	; 0xffffffa8
   18aa8:	str	r7, [fp, #-84]	; 0xffffffac
   18aac:	str	r5, [fp, #-80]	; 0xffffffb0
   18ab0:	strd	r0, [fp, #-76]	; 0xffffffb4
   18ab4:	strd	r0, [fp, #-68]	; 0xffffffbc
   18ab8:	strd	r0, [fp, #-60]	; 0xffffffc4
   18abc:	str	r3, [fp, #-44]	; 0xffffffd4
   18ac0:	mov	r3, ip
   18ac4:	bne	18584 <argp_parse@@Base+0x430>
   18ac8:	mov	r2, #1
   18acc:	ldr	r4, [fp, #-92]	; 0xffffffa4
   18ad0:	str	r2, [fp, #-144]	; 0xffffff70
   18ad4:	ldr	r2, [fp, #-232]	; 0xffffff18
   18ad8:	cmp	r2, r3
   18adc:	bne	185b0 <argp_parse@@Base+0x45c>
   18ae0:	ldr	r0, [r2]
   18ae4:	cmp	r0, #0
   18ae8:	beq	185b0 <argp_parse@@Base+0x45c>
   18aec:	bl	19080 <argp_parse@@Base+0xf2c>
   18af0:	str	r0, [fp, #-56]	; 0xffffffc8
   18af4:	b	185c0 <argp_parse@@Base+0x46c>
   18af8:	mov	r5, r0
   18afc:	b	1884c <argp_parse@@Base+0x6f8>
   18b00:	ldr	r0, [fp, #-92]	; 0xffffffa4
   18b04:	b	185fc <argp_parse@@Base+0x4a8>
   18b08:	cmp	r0, #7
   18b0c:	mov	r5, r0
   18b10:	str	r8, [fp, #-232]	; 0xffffff18
   18b14:	beq	18574 <argp_parse@@Base+0x420>
   18b18:	cmp	r0, #0
   18b1c:	bne	1884c <argp_parse@@Base+0x6f8>
   18b20:	ldr	r3, [fp, #-88]	; 0xffffffa8
   18b24:	ldr	r5, [fp, #-80]	; 0xffffffb0
   18b28:	b	1857c <argp_parse@@Base+0x428>
   18b2c:	ldr	r3, [fp, #4]
   18b30:	cmp	r3, #0
   18b34:	beq	18c74 <argp_parse@@Base+0xb20>
   18b38:	str	r7, [r3]
   18b3c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18b40:	ldr	ip, [fp, #-108]	; 0xffffff94
   18b44:	sub	r2, ip, #36	; 0x24
   18b48:	cmp	r3, r2
   18b4c:	movls	r6, #4
   18b50:	subls	r4, ip, #72	; 0x48
   18b54:	movtls	r6, #256	; 0x100
   18b58:	bhi	18d88 <argp_parse@@Base+0xc34>
   18b5c:	ldr	r5, [r4, #36]	; 0x24
   18b60:	mov	r1, #0
   18b64:	sub	r2, fp, #96	; 0x60
   18b68:	mov	r0, r6
   18b6c:	cmp	r5, r1
   18b70:	beq	18cac <argp_parse@@Base+0xb58>
   18b74:	ldr	ip, [r4, #48]	; 0x30
   18b78:	ldr	r3, [r4, #68]	; 0x44
   18b7c:	str	r3, [fp, #-60]	; 0xffffffc4
   18b80:	ldr	r3, [r4, #60]	; 0x3c
   18b84:	str	r3, [fp, #-68]	; 0xffffffbc
   18b88:	ldr	r3, [r4, #64]	; 0x40
   18b8c:	str	ip, [fp, #-76]	; 0xffffffb4
   18b90:	str	r3, [fp, #-64]	; 0xffffffc0
   18b94:	blx	r5
   18b98:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18b9c:	str	r3, [r4, #68]	; 0x44
   18ba0:	ldr	r3, [fp, #-112]	; 0xffffff90
   18ba4:	cmp	r3, r4
   18ba8:	sub	r4, r4, #36	; 0x24
   18bac:	bhi	18d68 <argp_parse@@Base+0xc14>
   18bb0:	cmp	r0, #7
   18bb4:	cmpne	r0, #0
   18bb8:	beq	18b5c <argp_parse@@Base+0xa08>
   18bbc:	ldr	ip, [fp, #-108]	; 0xffffff94
   18bc0:	mov	r5, r0
   18bc4:	sub	r4, ip, #36	; 0x24
   18bc8:	cmp	r4, r3
   18bcc:	bcs	187e0 <argp_parse@@Base+0x68c>
   18bd0:	b	18844 <argp_parse@@Base+0x6f0>
   18bd4:	ldr	r2, [fp, #-232]	; 0xffffff18
   18bd8:	ldr	r2, [r2]
   18bdc:	str	r2, [r3]
   18be0:	b	1819c <argp_parse@@Base+0x48>
   18be4:	ldr	r3, [fp, #-232]	; 0xffffff18
   18be8:	ldr	r0, [r3]
   18bec:	bl	19080 <argp_parse@@Base+0xf2c>
   18bf0:	str	r0, [r4]
   18bf4:	b	181b0 <argp_parse@@Base+0x5c>
   18bf8:	mov	r1, r4
   18bfc:	ldr	r0, [fp, #-156]	; 0xffffff64
   18c00:	bl	112e0 <strchr@plt>
   18c04:	cmp	r0, #0
   18c08:	beq	18c44 <argp_parse@@Base+0xaf0>
   18c0c:	ldr	r5, [fp, #-112]	; 0xffffff90
   18c10:	ldr	r2, [fp, #-108]	; 0xffffff94
   18c14:	cmp	r5, r2
   18c18:	bcs	18c44 <argp_parse@@Base+0xaf0>
   18c1c:	ldr	r3, [r5, #8]
   18c20:	cmp	r3, r0
   18c24:	bls	18c38 <argp_parse@@Base+0xae4>
   18c28:	b	18efc <argp_parse@@Base+0xda8>
   18c2c:	ldr	r3, [r5, #8]
   18c30:	cmp	r0, r3
   18c34:	bcc	18efc <argp_parse@@Base+0xda8>
   18c38:	add	r5, r5, #36	; 0x24
   18c3c:	cmp	r5, r2
   18c40:	bcc	18c2c <argp_parse@@Base+0xad8>
   18c44:	sub	r7, fp, #96	; 0x60
   18c48:	mov	r2, r4
   18c4c:	add	r4, r4, #1
   18c50:	ldr	r3, [pc, #888]	; 18fd0 <argp_parse@@Base+0xe7c>
   18c54:	movw	r1, #50768	; 0xc650
   18c58:	movt	r1, #1
   18c5c:	mov	r0, r7
   18c60:	bic	r4, r4, #2
   18c64:	bl	17a3c <argp_error@@Base>
   18c68:	cmp	r4, #0
   18c6c:	bne	18ca4 <argp_parse@@Base+0xb50>
   18c70:	b	18910 <argp_parse@@Base+0x7bc>
   18c74:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18c78:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18c7c:	tst	r3, #2
   18c80:	bne	189dc <argp_parse@@Base+0x888>
   18c84:	cmp	r1, #0
   18c88:	beq	189dc <argp_parse@@Base+0x888>
   18c8c:	mov	r0, r1
   18c90:	movw	r1, #50788	; 0xc664
   18c94:	movt	r1, #1
   18c98:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18c9c:	sub	r7, fp, #96	; 0x60
   18ca0:	bl	112ec <fprintf@plt>
   18ca4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18ca8:	b	18750 <argp_parse@@Base+0x5fc>
   18cac:	cmp	r4, r3
   18cb0:	sub	r4, r4, #36	; 0x24
   18cb4:	bcs	18b5c <argp_parse@@Base+0xa08>
   18cb8:	mov	r5, #7
   18cbc:	b	18d6c <argp_parse@@Base+0xc18>
   18cc0:	asrs	r8, r4, #24
   18cc4:	beq	18bf8 <argp_parse@@Base+0xaa4>
   18cc8:	add	r3, r8, r8, lsl #3
   18ccc:	ldr	r5, [fp, #-112]	; 0xffffff90
   18cd0:	ands	r2, r4, #8388608	; 0x800000
   18cd4:	movne	r2, #-16777216	; 0xff000000
   18cd8:	bic	r0, r4, #-16777216	; 0xff000000
   18cdc:	lsl	r3, r3, #2
   18ce0:	orr	r0, r0, r2
   18ce4:	sub	r3, r3, #36	; 0x24
   18ce8:	ldr	r6, [r5, r3]
   18cec:	add	r5, r5, r3
   18cf0:	cmp	r6, #0
   18cf4:	beq	18f64 <argp_parse@@Base+0xe10>
   18cf8:	add	r1, r5, #24
   18cfc:	ldr	lr, [r5, #12]
   18d00:	sub	r7, fp, #96	; 0x60
   18d04:	ldm	r1, {r1, r3, ip}
   18d08:	mov	r2, r7
   18d0c:	str	lr, [fp, #-76]	; 0xffffffb4
   18d10:	str	r1, [fp, #-68]	; 0xffffffbc
   18d14:	str	r3, [fp, #-64]	; 0xffffffc0
   18d18:	str	ip, [fp, #-60]	; 0xffffffc4
   18d1c:	ldr	r1, [fp, #-136]	; 0xffffff78
   18d20:	blx	r6
   18d24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18d28:	str	r3, [r5, #32]
   18d2c:	cmp	r0, #7
   18d30:	beq	18d90 <argp_parse@@Base+0xc3c>
   18d34:	cmp	r0, #0
   18d38:	bne	189cc <argp_parse@@Base+0x878>
   18d3c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18d40:	ldr	r0, [fp, #-92]	; 0xffffffa4
   18d44:	ldr	r7, [fp, #-84]	; 0xffffffac
   18d48:	b	185e0 <argp_parse@@Base+0x48c>
   18d4c:	movw	r2, #54924	; 0xd68c
   18d50:	movt	r2, #2
   18d54:	ldr	r2, [r2]
   18d58:	cmp	r2, #0
   18d5c:	addeq	r2, r3, #16
   18d60:	bne	18284 <argp_parse@@Base+0x130>
   18d64:	b	18290 <argp_parse@@Base+0x13c>
   18d68:	mov	r5, r0
   18d6c:	ldr	ip, [fp, #-108]	; 0xffffff94
   18d70:	cmp	r5, #7
   18d74:	sub	r4, ip, #36	; 0x24
   18d78:	bne	18bc8 <argp_parse@@Base+0xa74>
   18d7c:	cmp	r4, r3
   18d80:	movcs	r5, #0
   18d84:	bcs	187e0 <argp_parse@@Base+0x68c>
   18d88:	mov	r5, #0
   18d8c:	b	18844 <argp_parse@@Base+0x6f0>
   18d90:	cmp	r8, #0
   18d94:	beq	18c48 <argp_parse@@Base+0xaf4>
   18d98:	ldr	r3, [fp, #-152]	; 0xffffff68
   18d9c:	ldr	r2, [r3]
   18da0:	ldr	r1, [r3, #12]
   18da4:	cmp	r4, r1
   18da8:	bne	18dc4 <argp_parse@@Base+0xc70>
   18dac:	b	18df4 <argp_parse@@Base+0xca0>
   18db0:	add	r3, r3, #16
   18db4:	ldr	r2, [r3]
   18db8:	ldr	r1, [r3, #12]
   18dbc:	cmp	r4, r1
   18dc0:	beq	18df4 <argp_parse@@Base+0xca0>
   18dc4:	cmp	r2, #0
   18dc8:	bne	18db0 <argp_parse@@Base+0xc5c>
   18dcc:	movw	r2, #50760	; 0xc648
   18dd0:	movt	r2, #1
   18dd4:	movw	r1, #50776	; 0xc658
   18dd8:	movt	r1, #1
   18ddc:	ldr	r3, [pc, #492]	; 18fd0 <argp_parse@@Base+0xe7c>
   18de0:	mov	r0, r7
   18de4:	add	r4, r4, #1
   18de8:	bl	17a3c <argp_error@@Base>
   18dec:	bic	r4, r4, #2
   18df0:	b	18c68 <argp_parse@@Base+0xb14>
   18df4:	movw	r3, #50760	; 0xc648
   18df8:	movt	r3, #1
   18dfc:	cmp	r2, #0
   18e00:	moveq	r2, r3
   18e04:	b	18dd4 <argp_parse@@Base+0xc80>
   18e08:	ldr	r3, [fp, #-112]	; 0xffffff90
   18e0c:	sub	r2, ip, #36	; 0x24
   18e10:	cmp	r3, r2
   18e14:	bhi	18f88 <argp_parse@@Base+0xe34>
   18e18:	ldr	r2, [fp, #4]
   18e1c:	cmp	r2, #0
   18e20:	beq	18e30 <argp_parse@@Base+0xcdc>
   18e24:	ldr	r2, [fp, #-84]	; 0xffffffac
   18e28:	ldr	r1, [fp, #4]
   18e2c:	str	r2, [r1]
   18e30:	cmp	r5, #0
   18e34:	bne	189d0 <argp_parse@@Base+0x87c>
   18e38:	ldr	ip, [fp, #-108]	; 0xffffff94
   18e3c:	b	18b44 <argp_parse@@Base+0x9f0>
   18e40:	ldr	r3, [fp, #-112]	; 0xffffff90
   18e44:	sub	r4, ip, #36	; 0x24
   18e48:	cmp	r4, r3
   18e4c:	bcc	18f50 <argp_parse@@Base+0xdfc>
   18e50:	cmp	r5, #7
   18e54:	cmpne	r5, #0
   18e58:	bne	18e18 <argp_parse@@Base+0xcc4>
   18e5c:	mov	r6, #1
   18e60:	movt	r6, #256	; 0x100
   18e64:	sub	r4, r4, #36	; 0x24
   18e68:	ldr	r5, [r4, #36]	; 0x24
   18e6c:	mov	r1, #0
   18e70:	sub	r2, fp, #96	; 0x60
   18e74:	mov	r0, r6
   18e78:	cmp	r5, r1
   18e7c:	beq	18ed0 <argp_parse@@Base+0xd7c>
   18e80:	ldr	ip, [r4, #48]	; 0x30
   18e84:	ldr	r3, [r4, #68]	; 0x44
   18e88:	str	r3, [fp, #-60]	; 0xffffffc4
   18e8c:	ldr	r3, [r4, #60]	; 0x3c
   18e90:	str	r3, [fp, #-68]	; 0xffffffbc
   18e94:	ldr	r3, [r4, #64]	; 0x40
   18e98:	str	ip, [fp, #-76]	; 0xffffffb4
   18e9c:	str	r3, [fp, #-64]	; 0xffffffc0
   18ea0:	blx	r5
   18ea4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18ea8:	str	r3, [r4, #68]	; 0x44
   18eac:	ldr	r3, [fp, #-112]	; 0xffffff90
   18eb0:	cmp	r3, r4
   18eb4:	sub	r4, r4, #36	; 0x24
   18eb8:	bhi	18f4c <argp_parse@@Base+0xdf8>
   18ebc:	cmp	r0, #7
   18ec0:	cmpne	r0, #0
   18ec4:	beq	18e68 <argp_parse@@Base+0xd14>
   18ec8:	mov	r5, r0
   18ecc:	b	18e18 <argp_parse@@Base+0xcc4>
   18ed0:	cmp	r3, r4
   18ed4:	sub	r4, r4, #36	; 0x24
   18ed8:	bls	18e68 <argp_parse@@Base+0xd14>
   18edc:	ldr	ip, [fp, #-108]	; 0xffffff94
   18ee0:	ldr	r2, [fp, #4]
   18ee4:	cmp	r2, #0
   18ee8:	beq	18b44 <argp_parse@@Base+0x9f0>
   18eec:	ldr	r2, [fp, #-84]	; 0xffffffac
   18ef0:	ldr	r1, [fp, #4]
   18ef4:	str	r2, [r1]
   18ef8:	b	18b44 <argp_parse@@Base+0x9f0>
   18efc:	ldr	r3, [r5]
   18f00:	cmp	r3, #0
   18f04:	beq	18c44 <argp_parse@@Base+0xaf0>
   18f08:	ldr	r6, [r5, #12]
   18f0c:	sub	r7, fp, #96	; 0x60
   18f10:	mov	r0, r4
   18f14:	mov	r2, r7
   18f18:	mov	r8, #0
   18f1c:	ldr	ip, [r5, #24]
   18f20:	ldr	r1, [r5, #28]
   18f24:	ldr	lr, [r5, #32]
   18f28:	str	r6, [fp, #-76]	; 0xffffffb4
   18f2c:	str	ip, [fp, #-68]	; 0xffffffbc
   18f30:	str	r1, [fp, #-64]	; 0xffffffc0
   18f34:	ldr	r1, [fp, #-136]	; 0xffffff78
   18f38:	str	lr, [fp, #-60]	; 0xffffffc4
   18f3c:	blx	r3
   18f40:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18f44:	str	r3, [r5, #32]
   18f48:	b	18d2c <argp_parse@@Base+0xbd8>
   18f4c:	mov	r5, r0
   18f50:	cmp	r5, #7
   18f54:	beq	18edc <argp_parse@@Base+0xd88>
   18f58:	b	18e18 <argp_parse@@Base+0xcc4>
   18f5c:	sub	r4, ip, #36	; 0x24
   18f60:	b	187d8 <argp_parse@@Base+0x684>
   18f64:	sub	r7, fp, #96	; 0x60
   18f68:	b	18d98 <argp_parse@@Base+0xc44>
   18f6c:	sub	r4, ip, #36	; 0x24
   18f70:	cmp	r3, r4
   18f74:	bls	18e5c <argp_parse@@Base+0xd08>
   18f78:	ldr	r2, [fp, #4]
   18f7c:	cmp	r2, #0
   18f80:	bne	18eec <argp_parse@@Base+0xd98>
   18f84:	b	18d88 <argp_parse@@Base+0xc34>
   18f88:	ldr	r2, [fp, #4]
   18f8c:	cmp	r2, #0
   18f90:	bne	18e24 <argp_parse@@Base+0xcd0>
   18f94:	b	18768 <argp_parse@@Base+0x614>
   18f98:	ldr	ip, [fp, #-108]	; 0xffffff94
   18f9c:	b	18900 <argp_parse@@Base+0x7ac>
   18fa0:	cmp	r0, #0
   18fa4:	beq	18fbc <argp_parse@@Base+0xe68>
   18fa8:	cmp	r0, #7
   18fac:	mov	r5, r0
   18fb0:	ldrne	r3, [fp, #-112]	; 0xffffff90
   18fb4:	beq	18910 <argp_parse@@Base+0x7bc>
   18fb8:	b	18768 <argp_parse@@Base+0x614>
   18fbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18fc0:	mov	r0, r3
   18fc4:	str	r3, [fp, #-84]	; 0xffffffac
   18fc8:	b	186a4 <argp_parse@@Base+0x550>
   18fcc:	andeq	ip, r1, r0, lsr #10
   18fd0:	andeq	ip, r1, ip, lsr r5
   18fd4:	cmp	r1, #0
   18fd8:	beq	19018 <argp_parse@@Base+0xec4>
   18fdc:	ldr	r2, [r1, #52]	; 0x34
   18fe0:	ldr	r3, [r2, #48]	; 0x30
   18fe4:	ldr	r1, [r2, #52]	; 0x34
   18fe8:	cmp	r3, r1
   18fec:	bcs	19018 <argp_parse@@Base+0xec4>
   18ff0:	ldr	r2, [r3, #4]
   18ff4:	cmp	r0, r2
   18ff8:	bne	1900c <argp_parse@@Base+0xeb8>
   18ffc:	b	19020 <argp_parse@@Base+0xecc>
   19000:	ldr	r2, [r3, #4]
   19004:	cmp	r2, r0
   19008:	beq	19020 <argp_parse@@Base+0xecc>
   1900c:	add	r3, r3, #36	; 0x24
   19010:	cmp	r3, r1
   19014:	bcc	19000 <argp_parse@@Base+0xeac>
   19018:	mov	r0, #0
   1901c:	bx	lr
   19020:	ldr	r0, [r3, #24]
   19024:	bx	lr
   19028:	movw	r1, #54928	; 0xd690
   1902c:	movt	r1, #2
   19030:	push	{lr}		; (str lr, [sp, #-4]!)
   19034:	ldm	r1, {r1, ip}
   19038:	sub	sp, sp, #12
   1903c:	movw	r3, #51004	; 0xc73c
   19040:	movt	r3, #1
   19044:	movw	r2, #51020	; 0xc74c
   19048:	movt	r2, #1
   1904c:	str	ip, [sp]
   19050:	bl	19634 <argp_parse@@Base+0x14e0>
   19054:	add	sp, sp, #12
   19058:	pop	{pc}		; (ldr pc, [sp], #4)
   1905c:	movw	r2, #54924	; 0xd68c
   19060:	movt	r2, #2
   19064:	movw	ip, #36904	; 0x9028
   19068:	movt	ip, #1
   1906c:	movw	r3, #54928	; 0xd690
   19070:	movt	r3, #2
   19074:	str	ip, [r2]
   19078:	strd	r0, [r3]
   1907c:	bx	lr
   19080:	ldrb	r3, [r0]
   19084:	cmp	r3, #47	; 0x2f
   19088:	bne	19098 <argp_parse@@Base+0xf44>
   1908c:	ldrb	r3, [r0, #1]!
   19090:	cmp	r3, #47	; 0x2f
   19094:	beq	1908c <argp_parse@@Base+0xf38>
   19098:	cmp	r3, #0
   1909c:	beq	190cc <argp_parse@@Base+0xf78>
   190a0:	mov	r2, r0
   190a4:	mov	r1, #0
   190a8:	cmp	r3, #47	; 0x2f
   190ac:	moveq	r1, #1
   190b0:	beq	190c0 <argp_parse@@Base+0xf6c>
   190b4:	cmp	r1, #0
   190b8:	movne	r0, r2
   190bc:	movne	r1, #0
   190c0:	ldrb	r3, [r2, #1]!
   190c4:	cmp	r3, #0
   190c8:	bne	190a8 <argp_parse@@Base+0xf54>
   190cc:	bx	lr
   190d0:	str	r4, [sp, #-8]!
   190d4:	mov	r4, r0
   190d8:	str	lr, [sp, #4]
   190dc:	bl	112d4 <strlen@plt>
   190e0:	cmp	r0, #1
   190e4:	bls	19108 <argp_parse@@Base+0xfb4>
   190e8:	add	r2, r4, r0
   190ec:	mov	r3, r0
   190f0:	ldrb	r2, [r2, #-1]
   190f4:	cmp	r2, #47	; 0x2f
   190f8:	subeq	r3, r0, #2
   190fc:	rsbeq	r1, r4, #1
   19100:	addeq	r3, r4, r3
   19104:	beq	19114 <argp_parse@@Base+0xfc0>
   19108:	ldr	r4, [sp]
   1910c:	add	sp, sp, #4
   19110:	pop	{pc}		; (ldr pc, [sp], #4)
   19114:	cmp	r3, r4
   19118:	add	r0, r1, r3
   1911c:	beq	19108 <argp_parse@@Base+0xfb4>
   19120:	ldrb	r2, [r3], #-1
   19124:	cmp	r2, #47	; 0x2f
   19128:	beq	19114 <argp_parse@@Base+0xfc0>
   1912c:	ldr	r4, [sp]
   19130:	add	sp, sp, #4
   19134:	pop	{pc}		; (ldr pc, [sp], #4)
   19138:	strd	r4, [sp, #-12]!
   1913c:	mov	r5, r0
   19140:	str	lr, [sp, #8]
   19144:	sub	sp, sp, #12
   19148:	bl	112f8 <__errno_location@plt>
   1914c:	mov	r4, r0
   19150:	mov	r2, #0
   19154:	ldr	r3, [r4]
   19158:	mov	r0, r5
   1915c:	str	r2, [r4]
   19160:	str	r3, [sp]
   19164:	str	r3, [sp, #4]
   19168:	bl	11160 <free@plt>
   1916c:	ldr	r3, [r4]
   19170:	add	r2, sp, #8
   19174:	clz	r3, r3
   19178:	lsr	r3, r3, #5
   1917c:	add	r3, r2, r3, lsl #2
   19180:	ldr	r3, [r3, #-8]
   19184:	str	r3, [r4]
   19188:	add	sp, sp, #12
   1918c:	ldrd	r4, [sp]
   19190:	add	sp, sp, #8
   19194:	pop	{pc}		; (ldr pc, [sp], #4)
   19198:	push	{lr}		; (str lr, [sp, #-4]!)
   1919c:	sub	sp, sp, #20
   191a0:	mov	ip, #0
   191a4:	ldr	lr, [sp, #24]
   191a8:	str	lr, [sp]
   191ac:	str	ip, [sp, #4]
   191b0:	str	ip, [sp, #8]
   191b4:	bl	1b0f0 <argp_parse@@Base+0x2f9c>
   191b8:	add	sp, sp, #20
   191bc:	pop	{pc}		; (ldr pc, [sp], #4)
   191c0:	str	r4, [sp, #-8]!
   191c4:	mov	ip, #0
   191c8:	str	lr, [sp, #4]
   191cc:	sub	sp, sp, #16
   191d0:	ldr	r4, [sp, #24]
   191d4:	str	ip, [sp, #12]
   191d8:	ldr	lr, [sp, #28]
   191dc:	stm	sp, {r4, ip, lr}
   191e0:	bl	1ab58 <argp_parse@@Base+0x2a04>
   191e4:	add	sp, sp, #16
   191e8:	ldr	r4, [sp]
   191ec:	add	sp, sp, #4
   191f0:	pop	{pc}		; (ldr pc, [sp], #4)
   191f4:	str	r4, [sp, #-8]!
   191f8:	mov	r4, #1
   191fc:	str	lr, [sp, #4]
   19200:	sub	sp, sp, #16
   19204:	mov	lr, #0
   19208:	ldr	ip, [sp, #24]
   1920c:	str	ip, [sp]
   19210:	stmib	sp, {r4, lr}
   19214:	bl	1b0f0 <argp_parse@@Base+0x2f9c>
   19218:	add	sp, sp, #16
   1921c:	ldr	r4, [sp]
   19220:	add	sp, sp, #4
   19224:	pop	{pc}		; (ldr pc, [sp], #4)
   19228:	strd	r4, [sp, #-12]!
   1922c:	mov	r4, #0
   19230:	mov	r5, #1
   19234:	str	lr, [sp, #8]
   19238:	sub	sp, sp, #20
   1923c:	ldr	lr, [sp, #32]
   19240:	ldr	ip, [sp, #36]	; 0x24
   19244:	str	lr, [sp]
   19248:	str	r4, [sp, #12]
   1924c:	stmib	sp, {r5, ip}
   19250:	bl	1ab58 <argp_parse@@Base+0x2a04>
   19254:	add	sp, sp, #20
   19258:	ldrd	r4, [sp]
   1925c:	add	sp, sp, #8
   19260:	pop	{pc}		; (ldr pc, [sp], #4)
   19264:	strd	r4, [sp, #-16]!
   19268:	subs	r4, r0, #0
   1926c:	str	r6, [sp, #8]
   19270:	str	lr, [sp, #12]
   19274:	beq	1930c <argp_parse@@Base+0x11b8>
   19278:	mov	r1, #47	; 0x2f
   1927c:	bl	11388 <strrchr@plt>
   19280:	subs	r5, r0, #0
   19284:	beq	192e4 <argp_parse@@Base+0x1190>
   19288:	add	r6, r5, #1
   1928c:	sub	r3, r6, r4
   19290:	cmp	r3, #6
   19294:	ble	192e4 <argp_parse@@Base+0x1190>
   19298:	movw	r1, #51092	; 0xc794
   1929c:	movt	r1, #1
   192a0:	mov	r2, #7
   192a4:	sub	r0, r5, #6
   192a8:	bl	11418 <strncmp@plt>
   192ac:	cmp	r0, #0
   192b0:	bne	192e4 <argp_parse@@Base+0x1190>
   192b4:	movw	r1, #51100	; 0xc79c
   192b8:	movt	r1, #1
   192bc:	mov	r2, #3
   192c0:	mov	r0, r6
   192c4:	bl	11418 <strncmp@plt>
   192c8:	cmp	r0, #0
   192cc:	movne	r4, r6
   192d0:	bne	192e4 <argp_parse@@Base+0x1190>
   192d4:	add	r4, r5, #4
   192d8:	movw	r3, #54816	; 0xd620
   192dc:	movt	r3, #2
   192e0:	str	r4, [r3]
   192e4:	movw	r2, #54936	; 0xd698
   192e8:	movt	r2, #2
   192ec:	ldr	r6, [sp, #8]
   192f0:	movw	r3, #54820	; 0xd624
   192f4:	movt	r3, #2
   192f8:	str	r4, [r2]
   192fc:	str	r4, [r3]
   19300:	ldrd	r4, [sp]
   19304:	add	sp, sp, #12
   19308:	pop	{pc}		; (ldr pc, [sp], #4)
   1930c:	movw	r3, #54824	; 0xd628
   19310:	movt	r3, #2
   19314:	movw	r0, #51036	; 0xc75c
   19318:	movt	r0, #1
   1931c:	ldr	r3, [r3]
   19320:	mov	r2, #55	; 0x37
   19324:	mov	r1, #1
   19328:	bl	11220 <fwrite@plt>
   1932c:	bl	11424 <abort@plt>
   19330:	cmp	r1, #0
   19334:	strd	r4, [sp, #-16]!
   19338:	mov	r4, r0
   1933c:	str	r6, [sp, #8]
   19340:	str	lr, [sp, #12]
   19344:	sub	sp, sp, #32
   19348:	ldr	r5, [sp, #48]	; 0x30
   1934c:	ldr	r6, [sp, #52]	; 0x34
   19350:	beq	19454 <argp_parse@@Base+0x1300>
   19354:	mov	ip, r3
   19358:	mov	r3, r2
   1935c:	mov	r2, r1
   19360:	movw	r1, #51104	; 0xc7a0
   19364:	movt	r1, #1
   19368:	str	ip, [sp]
   1936c:	bl	112ec <fprintf@plt>
   19370:	movw	r3, #2022	; 0x7e6
   19374:	movw	r2, #51124	; 0xc7b4
   19378:	movt	r2, #1
   1937c:	movw	r1, #51892	; 0xcab4
   19380:	movt	r1, #1
   19384:	mov	r0, r4
   19388:	bl	112ec <fprintf@plt>
   1938c:	mov	r1, r4
   19390:	mov	r0, #10
   19394:	bl	113a0 <fputc@plt>
   19398:	movw	r2, #51128	; 0xc7b8
   1939c:	movt	r2, #1
   193a0:	movw	r1, #51164	; 0xc7dc
   193a4:	movt	r1, #1
   193a8:	mov	r0, r4
   193ac:	bl	112ec <fprintf@plt>
   193b0:	mov	r1, r4
   193b4:	mov	r0, #10
   193b8:	bl	113a0 <fputc@plt>
   193bc:	cmp	r6, #9
   193c0:	ldrls	pc, [pc, r6, lsl #2]
   193c4:	b	19620 <argp_parse@@Base+0x14cc>
   193c8:	andeq	r9, r1, r0, asr #8
   193cc:	andeq	r9, r1, r4, ror #8
   193d0:	andeq	r9, r1, ip, lsl #9
   193d4:			; <UNDEFINED> instruction: 0x000194b4
   193d8:	andeq	r9, r1, r4, ror #9
   193dc:	andeq	r9, r1, r0, lsr #10
   193e0:	andeq	r9, r1, r4, asr r5
   193e4:	muleq	r1, r0, r5
   193e8:	ldrdeq	r9, [r1], -r4
   193ec:	strdeq	r9, [r1], -r0
   193f0:	ldr	ip, [r5, #8]
   193f4:	movw	r1, #51604	; 0xc994
   193f8:	movt	r1, #1
   193fc:	mov	r0, r4
   19400:	ldr	r3, [r5, #12]
   19404:	ldr	r2, [r5, #32]
   19408:	str	ip, [sp]
   1940c:	ldr	ip, [r5, #16]
   19410:	str	r2, [sp, #24]
   19414:	ldr	r2, [r5, #28]
   19418:	str	r3, [sp, #4]
   1941c:	ldr	r3, [r5, #20]
   19420:	str	ip, [sp, #8]
   19424:	ldr	ip, [r5, #24]
   19428:	str	r2, [sp, #20]
   1942c:	ldr	r2, [r5]
   19430:	str	r3, [sp, #12]
   19434:	ldr	r3, [r5, #4]
   19438:	str	ip, [sp, #16]
   1943c:	bl	112ec <fprintf@plt>
   19440:	add	sp, sp, #32
   19444:	ldrd	r4, [sp]
   19448:	ldr	r6, [sp, #8]
   1944c:	add	sp, sp, #12
   19450:	pop	{pc}		; (ldr pc, [sp], #4)
   19454:	movw	r1, #51116	; 0xc7ac
   19458:	movt	r1, #1
   1945c:	bl	112ec <fprintf@plt>
   19460:	b	19370 <argp_parse@@Base+0x121c>
   19464:	ldr	r2, [r5]
   19468:	mov	r0, r4
   1946c:	movw	r1, #51336	; 0xc888
   19470:	movt	r1, #1
   19474:	add	sp, sp, #32
   19478:	ldrd	r4, [sp]
   1947c:	ldr	r6, [sp, #8]
   19480:	ldr	lr, [sp, #12]
   19484:	add	sp, sp, #16
   19488:	b	112ec <fprintf@plt>
   1948c:	ldrd	r2, [r5]
   19490:	mov	r0, r4
   19494:	movw	r1, #51352	; 0xc898
   19498:	movt	r1, #1
   1949c:	add	sp, sp, #32
   194a0:	ldrd	r4, [sp]
   194a4:	ldr	r6, [sp, #8]
   194a8:	ldr	lr, [sp, #12]
   194ac:	add	sp, sp, #16
   194b0:	b	112ec <fprintf@plt>
   194b4:	ldrd	r2, [r5]
   194b8:	mov	r0, r4
   194bc:	movw	r1, #51376	; 0xc8b0
   194c0:	movt	r1, #1
   194c4:	ldr	ip, [r5, #8]
   194c8:	str	ip, [sp, #48]	; 0x30
   194cc:	add	sp, sp, #32
   194d0:	ldrd	r4, [sp]
   194d4:	ldr	r6, [sp, #8]
   194d8:	ldr	lr, [sp, #12]
   194dc:	add	sp, sp, #16
   194e0:	b	112ec <fprintf@plt>
   194e4:	ldr	r2, [r5]
   194e8:	mov	r0, r4
   194ec:	movw	r1, #51404	; 0xc8cc
   194f0:	movt	r1, #1
   194f4:	ldr	r3, [r5, #8]
   194f8:	ldr	ip, [r5, #12]
   194fc:	str	r3, [sp, #48]	; 0x30
   19500:	ldr	r3, [r5, #4]
   19504:	str	ip, [sp, #52]	; 0x34
   19508:	add	sp, sp, #32
   1950c:	ldrd	r4, [sp]
   19510:	ldr	r6, [sp, #8]
   19514:	ldr	lr, [sp, #12]
   19518:	add	sp, sp, #16
   1951c:	b	112ec <fprintf@plt>
   19520:	ldr	r2, [r5, #8]
   19524:	mov	r0, r4
   19528:	movw	r1, #51436	; 0xc8ec
   1952c:	movt	r1, #1
   19530:	ldr	ip, [r5, #12]
   19534:	ldr	r3, [r5, #16]
   19538:	str	r2, [sp]
   1953c:	ldr	r2, [r5]
   19540:	str	r3, [sp, #8]
   19544:	ldr	r3, [r5, #4]
   19548:	str	ip, [sp, #4]
   1954c:	bl	112ec <fprintf@plt>
   19550:	b	19440 <argp_parse@@Base+0x12ec>
   19554:	ldr	ip, [r5, #8]
   19558:	mov	r0, r4
   1955c:	movw	r1, #51472	; 0xc910
   19560:	movt	r1, #1
   19564:	ldr	r3, [r5, #12]
   19568:	ldr	r2, [r5, #20]
   1956c:	str	ip, [sp]
   19570:	ldr	ip, [r5, #16]
   19574:	str	r2, [sp, #12]
   19578:	ldr	r2, [r5]
   1957c:	str	r3, [sp, #4]
   19580:	ldr	r3, [r5, #4]
   19584:	str	ip, [sp, #8]
   19588:	bl	112ec <fprintf@plt>
   1958c:	b	19440 <argp_parse@@Base+0x12ec>
   19590:	ldr	r3, [r5, #8]
   19594:	mov	r0, r4
   19598:	movw	r1, #51512	; 0xc938
   1959c:	movt	r1, #1
   195a0:	ldr	r2, [r5, #12]
   195a4:	ldr	ip, [r5, #24]
   195a8:	str	r3, [sp]
   195ac:	ldr	r3, [r5, #16]
   195b0:	str	ip, [sp, #16]
   195b4:	ldr	ip, [r5, #20]
   195b8:	str	r2, [sp, #4]
   195bc:	ldr	r2, [r5]
   195c0:	str	r3, [sp, #8]
   195c4:	ldr	r3, [r5, #4]
   195c8:	str	ip, [sp, #12]
   195cc:	bl	112ec <fprintf@plt>
   195d0:	b	19440 <argp_parse@@Base+0x12ec>
   195d4:	ldr	r2, [r5, #8]
   195d8:	mov	r0, r4
   195dc:	movw	r1, #51556	; 0xc964
   195e0:	movt	r1, #1
   195e4:	ldr	ip, [r5, #12]
   195e8:	ldr	r3, [r5, #28]
   195ec:	str	r2, [sp]
   195f0:	ldr	r2, [r5, #16]
   195f4:	str	r3, [sp, #20]
   195f8:	ldr	r3, [r5, #24]
   195fc:	str	ip, [sp, #4]
   19600:	ldr	ip, [r5, #20]
   19604:	str	r2, [sp, #8]
   19608:	ldr	r2, [r5]
   1960c:	str	r3, [sp, #16]
   19610:	ldr	r3, [r5, #4]
   19614:	str	ip, [sp, #12]
   19618:	bl	112ec <fprintf@plt>
   1961c:	b	19440 <argp_parse@@Base+0x12ec>
   19620:	movw	r1, #51656	; 0xc9c8
   19624:	movt	r1, #1
   19628:	ldr	ip, [r5, #8]
   1962c:	mov	r0, r4
   19630:	b	19400 <argp_parse@@Base+0x12ac>
   19634:	strd	r4, [sp, #-12]!
   19638:	str	lr, [sp, #8]
   1963c:	sub	sp, sp, #12
   19640:	ldr	r5, [sp, #24]
   19644:	ldr	ip, [r5]
   19648:	cmp	ip, #0
   1964c:	beq	19668 <argp_parse@@Base+0x1514>
   19650:	mov	lr, r5
   19654:	mov	ip, #0
   19658:	ldr	r4, [lr, #4]!
   1965c:	add	ip, ip, #1
   19660:	cmp	r4, #0
   19664:	bne	19658 <argp_parse@@Base+0x1504>
   19668:	stm	sp, {r5, ip}
   1966c:	bl	19330 <argp_parse@@Base+0x11dc>
   19670:	add	sp, sp, #12
   19674:	ldrd	r4, [sp]
   19678:	add	sp, sp, #8
   1967c:	pop	{pc}		; (ldr pc, [sp], #4)
   19680:	strd	r4, [sp, #-16]!
   19684:	mov	ip, #0
   19688:	str	r6, [sp, #8]
   1968c:	str	lr, [sp, #12]
   19690:	sub	sp, sp, #48	; 0x30
   19694:	ldr	r5, [sp, #64]	; 0x40
   19698:	add	r6, sp, #8
   1969c:	mov	r4, r6
   196a0:	ldr	lr, [r5], #4
   196a4:	cmp	lr, #0
   196a8:	str	lr, [r4], #4
   196ac:	beq	196bc <argp_parse@@Base+0x1568>
   196b0:	add	ip, ip, #1
   196b4:	cmp	ip, #10
   196b8:	bne	196a0 <argp_parse@@Base+0x154c>
   196bc:	stm	sp, {r6, ip}
   196c0:	bl	19330 <argp_parse@@Base+0x11dc>
   196c4:	add	sp, sp, #48	; 0x30
   196c8:	ldrd	r4, [sp]
   196cc:	ldr	r6, [sp, #8]
   196d0:	add	sp, sp, #12
   196d4:	pop	{pc}		; (ldr pc, [sp], #4)
   196d8:	push	{r3}		; (str r3, [sp, #-4]!)
   196dc:	mov	ip, #0
   196e0:	strd	r4, [sp, #-12]!
   196e4:	str	lr, [sp, #8]
   196e8:	sub	sp, sp, #56	; 0x38
   196ec:	add	r3, sp, #72	; 0x48
   196f0:	add	r5, sp, #16
   196f4:	mov	r4, r3
   196f8:	mov	lr, r5
   196fc:	str	r3, [sp, #12]
   19700:	ldr	r3, [r4], #4
   19704:	cmp	r3, #0
   19708:	str	r3, [lr], #4
   1970c:	beq	1971c <argp_parse@@Base+0x15c8>
   19710:	add	ip, ip, #1
   19714:	cmp	ip, #10
   19718:	bne	19700 <argp_parse@@Base+0x15ac>
   1971c:	ldr	r3, [sp, #68]	; 0x44
   19720:	stm	sp, {r5, ip}
   19724:	bl	19330 <argp_parse@@Base+0x11dc>
   19728:	add	sp, sp, #56	; 0x38
   1972c:	ldrd	r4, [sp]
   19730:	ldr	lr, [sp, #8]
   19734:	add	sp, sp, #12
   19738:	add	sp, sp, #4
   1973c:	bx	lr
   19740:	movw	r3, #54828	; 0xd62c
   19744:	movt	r3, #2
   19748:	str	r4, [sp, #-8]!
   1974c:	mov	r0, #10
   19750:	ldr	r1, [r3]
   19754:	str	lr, [sp, #4]
   19758:	bl	113a0 <fputc@plt>
   1975c:	movw	r1, #51716	; 0xca04
   19760:	movt	r1, #1
   19764:	movw	r0, #51740	; 0xca1c
   19768:	movt	r0, #1
   1976c:	bl	11118 <printf@plt>
   19770:	movw	r2, #51760	; 0xca30
   19774:	movt	r2, #1
   19778:	movw	r1, #51020	; 0xc74c
   1977c:	movt	r1, #1
   19780:	movw	r0, #51800	; 0xca58
   19784:	movt	r0, #1
   19788:	bl	11118 <printf@plt>
   1978c:	movw	r1, #51820	; 0xca6c
   19790:	movt	r1, #1
   19794:	ldr	r4, [sp]
   19798:	movw	r0, #51852	; 0xca8c
   1979c:	movt	r0, #1
   197a0:	ldr	lr, [sp, #4]
   197a4:	add	sp, sp, #8
   197a8:	b	11118 <printf@plt>
   197ac:	str	r4, [sp, #-8]!
   197b0:	str	lr, [sp, #4]
   197b4:	bl	19cc8 <argp_parse@@Base+0x1b74>
   197b8:	cmp	r0, #0
   197bc:	beq	197cc <argp_parse@@Base+0x1678>
   197c0:	ldr	r4, [sp]
   197c4:	add	sp, sp, #4
   197c8:	pop	{pc}		; (ldr pc, [sp], #4)
   197cc:	bl	19c24 <argp_parse@@Base+0x1ad0>
   197d0:	str	r4, [sp, #-8]!
   197d4:	str	lr, [sp, #4]
   197d8:	bl	19cc8 <argp_parse@@Base+0x1b74>
   197dc:	cmp	r0, #0
   197e0:	beq	197f0 <argp_parse@@Base+0x169c>
   197e4:	ldr	r4, [sp]
   197e8:	add	sp, sp, #4
   197ec:	pop	{pc}		; (ldr pc, [sp], #4)
   197f0:	bl	19c24 <argp_parse@@Base+0x1ad0>
   197f4:	str	r4, [sp, #-8]!
   197f8:	str	lr, [sp, #4]
   197fc:	bl	19cc8 <argp_parse@@Base+0x1b74>
   19800:	cmp	r0, #0
   19804:	beq	19814 <argp_parse@@Base+0x16c0>
   19808:	ldr	r4, [sp]
   1980c:	add	sp, sp, #4
   19810:	pop	{pc}		; (ldr pc, [sp], #4)
   19814:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19818:	strd	r4, [sp, #-16]!
   1981c:	mov	r5, r0
   19820:	mov	r4, r1
   19824:	str	r6, [sp, #8]
   19828:	str	lr, [sp, #12]
   1982c:	bl	19d04 <argp_parse@@Base+0x1bb0>
   19830:	cmp	r0, #0
   19834:	beq	19848 <argp_parse@@Base+0x16f4>
   19838:	ldrd	r4, [sp]
   1983c:	ldr	r6, [sp, #8]
   19840:	add	sp, sp, #12
   19844:	pop	{pc}		; (ldr pc, [sp], #4)
   19848:	adds	r4, r4, #0
   1984c:	movne	r4, #1
   19850:	cmp	r5, #0
   19854:	moveq	r4, #1
   19858:	cmp	r4, #0
   1985c:	beq	19838 <argp_parse@@Base+0x16e4>
   19860:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19864:	cmp	r1, #0
   19868:	orreq	r1, r1, #1
   1986c:	str	r4, [sp, #-8]!
   19870:	str	lr, [sp, #4]
   19874:	bl	19d04 <argp_parse@@Base+0x1bb0>
   19878:	cmp	r0, #0
   1987c:	beq	1988c <argp_parse@@Base+0x1738>
   19880:	ldr	r4, [sp]
   19884:	add	sp, sp, #4
   19888:	pop	{pc}		; (ldr pc, [sp], #4)
   1988c:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19890:	strd	r4, [sp, #-16]!
   19894:	mov	r4, r0
   19898:	mov	r5, r2
   1989c:	str	r6, [sp, #8]
   198a0:	mov	r6, r1
   198a4:	str	lr, [sp, #12]
   198a8:	bl	1b19c <argp_parse@@Base+0x3048>
   198ac:	cmp	r0, #0
   198b0:	beq	198c4 <argp_parse@@Base+0x1770>
   198b4:	ldrd	r4, [sp]
   198b8:	ldr	r6, [sp, #8]
   198bc:	add	sp, sp, #12
   198c0:	pop	{pc}		; (ldr pc, [sp], #4)
   198c4:	cmp	r4, #0
   198c8:	beq	198d8 <argp_parse@@Base+0x1784>
   198cc:	cmp	r6, #0
   198d0:	cmpne	r5, #0
   198d4:	beq	198b4 <argp_parse@@Base+0x1760>
   198d8:	bl	19c24 <argp_parse@@Base+0x1ad0>
   198dc:	b	19890 <argp_parse@@Base+0x173c>
   198e0:	cmp	r2, #0
   198e4:	cmpne	r1, #0
   198e8:	str	r4, [sp, #-8]!
   198ec:	moveq	r2, #1
   198f0:	str	lr, [sp, #4]
   198f4:	moveq	r1, r2
   198f8:	bl	1b19c <argp_parse@@Base+0x3048>
   198fc:	cmp	r0, #0
   19900:	beq	19910 <argp_parse@@Base+0x17bc>
   19904:	ldr	r4, [sp]
   19908:	add	sp, sp, #4
   1990c:	pop	{pc}		; (ldr pc, [sp], #4)
   19910:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19914:	mov	r2, r1
   19918:	mov	r1, r0
   1991c:	mov	r0, #0
   19920:	b	19890 <argp_parse@@Base+0x173c>
   19924:	mov	r2, r1
   19928:	mov	r1, r0
   1992c:	mov	r0, #0
   19930:	b	198e0 <argp_parse@@Base+0x178c>
   19934:	cmp	r0, #0
   19938:	strd	r4, [sp, #-16]!
   1993c:	mov	r5, r1
   19940:	ldr	r4, [r1]
   19944:	str	r6, [sp, #8]
   19948:	str	lr, [sp, #12]
   1994c:	beq	1997c <argp_parse@@Base+0x1828>
   19950:	lsr	r3, r4, #1
   19954:	add	r3, r3, #1
   19958:	adds	r4, r4, r3
   1995c:	bcs	19998 <argp_parse@@Base+0x1844>
   19960:	mov	r1, r4
   19964:	bl	19890 <argp_parse@@Base+0x173c>
   19968:	ldr	r6, [sp, #8]
   1996c:	str	r4, [r5]
   19970:	ldrd	r4, [sp]
   19974:	add	sp, sp, #12
   19978:	pop	{pc}		; (ldr pc, [sp], #4)
   1997c:	cmp	r4, #0
   19980:	bne	19960 <argp_parse@@Base+0x180c>
   19984:	mov	r4, #64	; 0x40
   19988:	udiv	r4, r4, r2
   1998c:	cmp	r2, #64	; 0x40
   19990:	addhi	r4, r4, #1
   19994:	b	19960 <argp_parse@@Base+0x180c>
   19998:	bl	19c24 <argp_parse@@Base+0x1ad0>
   1999c:	mov	r2, #1
   199a0:	b	19934 <argp_parse@@Base+0x17e0>
   199a4:	ldr	ip, [r1]
   199a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   199ac:	mov	r5, r1
   199b0:	strd	r6, [sp, #8]
   199b4:	str	lr, [sp, #28]
   199b8:	strd	r8, [sp, #16]
   199bc:	asr	lr, ip, #1
   199c0:	ldr	r8, [sp, #32]
   199c4:	str	sl, [sp, #24]
   199c8:	adds	r4, ip, lr
   199cc:	mvn	lr, r3
   199d0:	lsr	lr, lr, #31
   199d4:	mvnvs	r4, #-2147483648	; 0x80000000
   199d8:	cmp	r3, r4
   199dc:	movge	r1, #0
   199e0:	andlt	r1, lr, #1
   199e4:	cmp	r1, #0
   199e8:	movne	r4, r3
   199ec:	smull	r6, r7, r4, r8
   199f0:	cmp	r7, r6, asr #31
   199f4:	bne	19a7c <argp_parse@@Base+0x1928>
   199f8:	cmp	r6, #63	; 0x3f
   199fc:	mov	r1, r6
   19a00:	ble	19a64 <argp_parse@@Base+0x1910>
   19a04:	cmp	r0, #0
   19a08:	sub	r6, r4, ip
   19a0c:	streq	r0, [r5]
   19a10:	cmp	r6, r2
   19a14:	bge	19a44 <argp_parse@@Base+0x18f0>
   19a18:	adds	r4, ip, r2
   19a1c:	bvs	19a78 <argp_parse@@Base+0x1924>
   19a20:	cmp	r4, r3
   19a24:	movle	r3, #0
   19a28:	andgt	r3, lr, #1
   19a2c:	cmp	r3, #0
   19a30:	bne	19a78 <argp_parse@@Base+0x1924>
   19a34:	smull	r8, r9, r4, r8
   19a38:	cmp	r9, r8, asr #31
   19a3c:	mov	r1, r8
   19a40:	bne	19a78 <argp_parse@@Base+0x1924>
   19a44:	bl	19818 <argp_parse@@Base+0x16c4>
   19a48:	ldrd	r6, [sp, #8]
   19a4c:	ldrd	r8, [sp, #16]
   19a50:	ldr	sl, [sp, #24]
   19a54:	str	r4, [r5]
   19a58:	ldrd	r4, [sp]
   19a5c:	add	sp, sp, #28
   19a60:	pop	{pc}		; (ldr pc, [sp], #4)
   19a64:	mov	r6, #64	; 0x40
   19a68:	sdiv	r4, r6, r8
   19a6c:	mls	r1, r8, r4, r6
   19a70:	sub	r1, r6, r1
   19a74:	b	19a04 <argp_parse@@Base+0x18b0>
   19a78:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19a7c:	mvn	r6, #-2147483648	; 0x80000000
   19a80:	b	19a68 <argp_parse@@Base+0x1914>
   19a84:	mov	r1, #1
   19a88:	str	r4, [sp, #-8]!
   19a8c:	str	lr, [sp, #4]
   19a90:	bl	19c54 <argp_parse@@Base+0x1b00>
   19a94:	cmp	r0, #0
   19a98:	beq	19aa8 <argp_parse@@Base+0x1954>
   19a9c:	ldr	r4, [sp]
   19aa0:	add	sp, sp, #4
   19aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   19aa8:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19aac:	mov	r1, #1
   19ab0:	str	r4, [sp, #-8]!
   19ab4:	str	lr, [sp, #4]
   19ab8:	bl	19c54 <argp_parse@@Base+0x1b00>
   19abc:	cmp	r0, #0
   19ac0:	beq	19ad0 <argp_parse@@Base+0x197c>
   19ac4:	ldr	r4, [sp]
   19ac8:	add	sp, sp, #4
   19acc:	pop	{pc}		; (ldr pc, [sp], #4)
   19ad0:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19ad4:	str	r4, [sp, #-8]!
   19ad8:	str	lr, [sp, #4]
   19adc:	bl	19c54 <argp_parse@@Base+0x1b00>
   19ae0:	cmp	r0, #0
   19ae4:	beq	19af4 <argp_parse@@Base+0x19a0>
   19ae8:	ldr	r4, [sp]
   19aec:	add	sp, sp, #4
   19af0:	pop	{pc}		; (ldr pc, [sp], #4)
   19af4:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19af8:	str	r4, [sp, #-8]!
   19afc:	str	lr, [sp, #4]
   19b00:	bl	19c54 <argp_parse@@Base+0x1b00>
   19b04:	cmp	r0, #0
   19b08:	beq	19b18 <argp_parse@@Base+0x19c4>
   19b0c:	ldr	r4, [sp]
   19b10:	add	sp, sp, #4
   19b14:	pop	{pc}		; (ldr pc, [sp], #4)
   19b18:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19b1c:	strd	r4, [sp, #-16]!
   19b20:	mov	r4, r1
   19b24:	str	r6, [sp, #8]
   19b28:	mov	r6, r0
   19b2c:	mov	r0, r1
   19b30:	str	lr, [sp, #12]
   19b34:	bl	19cc8 <argp_parse@@Base+0x1b74>
   19b38:	subs	r5, r0, #0
   19b3c:	beq	19b60 <argp_parse@@Base+0x1a0c>
   19b40:	mov	r2, r4
   19b44:	mov	r1, r6
   19b48:	bl	11184 <memcpy@plt>
   19b4c:	mov	r0, r5
   19b50:	ldrd	r4, [sp]
   19b54:	ldr	r6, [sp, #8]
   19b58:	add	sp, sp, #12
   19b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b60:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19b64:	strd	r4, [sp, #-16]!
   19b68:	mov	r4, r1
   19b6c:	str	r6, [sp, #8]
   19b70:	mov	r6, r0
   19b74:	mov	r0, r1
   19b78:	str	lr, [sp, #12]
   19b7c:	bl	19cc8 <argp_parse@@Base+0x1b74>
   19b80:	subs	r5, r0, #0
   19b84:	beq	19ba8 <argp_parse@@Base+0x1a54>
   19b88:	mov	r2, r4
   19b8c:	mov	r1, r6
   19b90:	bl	11184 <memcpy@plt>
   19b94:	mov	r0, r5
   19b98:	ldrd	r4, [sp]
   19b9c:	ldr	r6, [sp, #8]
   19ba0:	add	sp, sp, #12
   19ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ba8:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19bac:	strd	r4, [sp, #-16]!
   19bb0:	mov	r4, r1
   19bb4:	str	r6, [sp, #8]
   19bb8:	mov	r6, r0
   19bbc:	add	r0, r1, #1
   19bc0:	str	lr, [sp, #12]
   19bc4:	bl	19cc8 <argp_parse@@Base+0x1b74>
   19bc8:	subs	r5, r0, #0
   19bcc:	beq	19bf8 <argp_parse@@Base+0x1aa4>
   19bd0:	mov	r3, #0
   19bd4:	mov	r1, r6
   19bd8:	mov	r2, r4
   19bdc:	strb	r3, [r5, r4]
   19be0:	bl	11184 <memcpy@plt>
   19be4:	mov	r0, r5
   19be8:	ldrd	r4, [sp]
   19bec:	ldr	r6, [sp, #8]
   19bf0:	add	sp, sp, #12
   19bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   19bf8:	bl	19c24 <argp_parse@@Base+0x1ad0>
   19bfc:	str	r4, [sp, #-8]!
   19c00:	mov	r4, r0
   19c04:	str	lr, [sp, #4]
   19c08:	bl	112d4 <strlen@plt>
   19c0c:	add	r1, r0, #1
   19c10:	mov	r0, r4
   19c14:	ldr	r4, [sp]
   19c18:	ldr	lr, [sp, #4]
   19c1c:	add	sp, sp, #8
   19c20:	b	19b1c <argp_parse@@Base+0x19c8>
   19c24:	movw	r3, #54796	; 0xd60c
   19c28:	movt	r3, #2
   19c2c:	str	r4, [sp, #-8]!
   19c30:	movw	r2, #46064	; 0xb3f0
   19c34:	movt	r2, #1
   19c38:	ldr	r0, [r3]
   19c3c:	mov	r1, #0
   19c40:	movw	r3, #51940	; 0xcae4
   19c44:	movt	r3, #1
   19c48:	str	lr, [sp, #4]
   19c4c:	bl	11238 <error@plt>
   19c50:	bl	11424 <abort@plt>
   19c54:	cmp	r1, #0
   19c58:	cmpne	r0, #0
   19c5c:	beq	19ca8 <argp_parse@@Base+0x1b54>
   19c60:	strd	r4, [sp, #-16]!
   19c64:	umull	r4, r5, r0, r1
   19c68:	str	r6, [sp, #8]
   19c6c:	str	lr, [sp, #12]
   19c70:	adds	r3, r5, #0
   19c74:	movne	r3, #1
   19c78:	cmp	r4, #0
   19c7c:	blt	19c88 <argp_parse@@Base+0x1b34>
   19c80:	cmp	r3, #0
   19c84:	beq	19cb4 <argp_parse@@Base+0x1b60>
   19c88:	bl	112f8 <__errno_location@plt>
   19c8c:	mov	r3, #12
   19c90:	ldrd	r4, [sp]
   19c94:	ldr	r6, [sp, #8]
   19c98:	add	sp, sp, #12
   19c9c:	str	r3, [r0]
   19ca0:	mov	r0, #0
   19ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ca8:	mov	r1, #1
   19cac:	mov	r0, r1
   19cb0:	b	110dc <calloc@plt>
   19cb4:	ldrd	r4, [sp]
   19cb8:	ldr	r6, [sp, #8]
   19cbc:	ldr	lr, [sp, #12]
   19cc0:	add	sp, sp, #16
   19cc4:	b	110dc <calloc@plt>
   19cc8:	cmp	r0, #0
   19ccc:	beq	19cd8 <argp_parse@@Base+0x1b84>
   19cd0:	blt	19ce0 <argp_parse@@Base+0x1b8c>
   19cd4:	b	1125c <malloc@plt>
   19cd8:	mov	r0, #1
   19cdc:	b	1125c <malloc@plt>
   19ce0:	str	r4, [sp, #-8]!
   19ce4:	str	lr, [sp, #4]
   19ce8:	bl	112f8 <__errno_location@plt>
   19cec:	mov	r3, #12
   19cf0:	ldr	r4, [sp]
   19cf4:	add	sp, sp, #4
   19cf8:	str	r3, [r0]
   19cfc:	mov	r0, #0
   19d00:	pop	{pc}		; (ldr pc, [sp], #4)
   19d04:	cmp	r0, #0
   19d08:	beq	19d30 <argp_parse@@Base+0x1bdc>
   19d0c:	cmp	r1, #0
   19d10:	str	r4, [sp, #-8]!
   19d14:	str	lr, [sp, #4]
   19d18:	beq	19d38 <argp_parse@@Base+0x1be4>
   19d1c:	blt	19d4c <argp_parse@@Base+0x1bf8>
   19d20:	ldr	r4, [sp]
   19d24:	ldr	lr, [sp, #4]
   19d28:	add	sp, sp, #8
   19d2c:	b	111fc <realloc@plt>
   19d30:	mov	r0, r1
   19d34:	b	19cc8 <argp_parse@@Base+0x1b74>
   19d38:	bl	19138 <argp_parse@@Base+0xfe4>
   19d3c:	ldr	r4, [sp]
   19d40:	add	sp, sp, #4
   19d44:	mov	r0, #0
   19d48:	pop	{pc}		; (ldr pc, [sp], #4)
   19d4c:	bl	112f8 <__errno_location@plt>
   19d50:	mov	r3, #12
   19d54:	str	r3, [r0]
   19d58:	b	19d3c <argp_parse@@Base+0x1be8>
   19d5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19d60:	mov	r5, r3
   19d64:	strd	r6, [sp, #8]
   19d68:	mov	r7, r1
   19d6c:	mov	r6, r2
   19d70:	str	r8, [sp, #16]
   19d74:	mov	r8, r0
   19d78:	mov	r0, #36	; 0x24
   19d7c:	str	lr, [sp, #20]
   19d80:	bl	19cc8 <argp_parse@@Base+0x1b74>
   19d84:	subs	r4, r0, #0
   19d88:	beq	19dcc <argp_parse@@Base+0x1c78>
   19d8c:	mov	r3, #0
   19d90:	mov	r0, #200	; 0xc8
   19d94:	str	r8, [r4]
   19d98:	str	r7, [r4, #4]
   19d9c:	str	r6, [r4, #8]
   19da0:	str	r5, [r4, #12]
   19da4:	str	r3, [r4, #16]
   19da8:	str	r3, [r4, #20]
   19dac:	bl	19cc8 <argp_parse@@Base+0x1b74>
   19db0:	cmp	r0, #0
   19db4:	mov	r3, r0
   19db8:	str	r0, [r4, #24]
   19dbc:	addne	r2, r0, #200	; 0xc8
   19dc0:	strne	r0, [r4, #28]
   19dc4:	strne	r2, [r4, #32]
   19dc8:	beq	19de4 <argp_parse@@Base+0x1c90>
   19dcc:	mov	r0, r4
   19dd0:	ldrd	r4, [sp]
   19dd4:	ldrd	r6, [sp, #8]
   19dd8:	ldr	r8, [sp, #16]
   19ddc:	add	sp, sp, #20
   19de0:	pop	{pc}		; (ldr pc, [sp], #4)
   19de4:	mov	r0, r4
   19de8:	mov	r4, r3
   19dec:	bl	19138 <argp_parse@@Base+0xfe4>
   19df0:	b	19dcc <argp_parse@@Base+0x1c78>
   19df4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19df8:	mov	r5, r0
   19dfc:	ldr	r3, [r0, #16]
   19e00:	ldr	r4, [r0, #24]
   19e04:	strd	r6, [sp, #8]
   19e08:	strd	r8, [sp, #16]
   19e0c:	ldr	r8, [r0, #28]
   19e10:	strd	sl, [sp, #24]
   19e14:	add	r4, r4, r3
   19e18:	str	lr, [sp, #32]
   19e1c:	sub	sp, sp, #12
   19e20:	cmp	r4, r8
   19e24:	bcs	19f38 <argp_parse@@Base+0x1de4>
   19e28:	ldr	r6, [r5, #20]
   19e2c:	cmp	r6, #0
   19e30:	bne	19e90 <argp_parse@@Base+0x1d3c>
   19e34:	ldr	r7, [r5, #4]
   19e38:	cmp	r7, #0
   19e3c:	beq	1a118 <argp_parse@@Base+0x1fc4>
   19e40:	ldr	r2, [r5, #32]
   19e44:	add	r3, r8, r7
   19e48:	cmp	r2, r3
   19e4c:	bls	1a204 <argp_parse@@Base+0x20b0>
   19e50:	add	r6, r4, r7
   19e54:	sub	r2, r8, r4
   19e58:	mov	r1, r4
   19e5c:	mov	r0, r6
   19e60:	bl	11148 <memmove@plt>
   19e64:	ldr	r3, [r5, #28]
   19e68:	mov	r0, r4
   19e6c:	mov	r2, r7
   19e70:	mov	r1, #32
   19e74:	mov	r4, r6
   19e78:	add	r3, r3, r7
   19e7c:	str	r3, [r5, #28]
   19e80:	bl	11328 <memset@plt>
   19e84:	ldr	r8, [r5, #28]
   19e88:	mov	r6, r7
   19e8c:	str	r7, [r5, #20]
   19e90:	sub	r9, r8, r4
   19e94:	mov	r1, #10
   19e98:	mov	r2, r9
   19e9c:	mov	r0, r4
   19ea0:	bl	1134c <memchr@plt>
   19ea4:	cmp	r6, #0
   19ea8:	mov	fp, r0
   19eac:	bge	19eb8 <argp_parse@@Base+0x1d64>
   19eb0:	mov	r6, #0
   19eb4:	str	r6, [r5, #20]
   19eb8:	cmp	fp, #0
   19ebc:	ldr	r3, [r5, #8]
   19ec0:	beq	19f60 <argp_parse@@Base+0x1e0c>
   19ec4:	sub	r2, fp, r4
   19ec8:	add	r2, r2, r6
   19ecc:	cmp	r2, r3
   19ed0:	blt	1a134 <argp_parse@@Base+0x1fe0>
   19ed4:	ldr	sl, [r5, #12]
   19ed8:	sub	r7, r3, #1
   19edc:	str	r3, [sp, #4]
   19ee0:	cmp	sl, #0
   19ee4:	bge	19f80 <argp_parse@@Base+0x1e2c>
   19ee8:	cmp	r8, fp
   19eec:	bls	1a2b8 <argp_parse@@Base+0x2164>
   19ef0:	sub	r0, r7, r6
   19ef4:	sub	r2, r8, fp
   19ef8:	add	r0, r4, r0
   19efc:	mov	r1, fp
   19f00:	bl	11148 <memmove@plt>
   19f04:	ldr	r2, [r5, #20]
   19f08:	mov	r3, #0
   19f0c:	str	r3, [r5, #20]
   19f10:	ldr	r3, [sp, #4]
   19f14:	ldr	r8, [r5, #28]
   19f18:	sub	r7, r7, r2
   19f1c:	add	r7, r4, r7
   19f20:	sub	fp, r7, fp
   19f24:	add	r4, r4, r3
   19f28:	sub	r8, r8, fp
   19f2c:	cmp	r4, r8
   19f30:	str	r8, [r5, #28]
   19f34:	bcc	19e28 <argp_parse@@Base+0x1cd4>
   19f38:	ldr	r3, [r5, #24]
   19f3c:	sub	r8, r8, r3
   19f40:	str	r8, [r5, #16]
   19f44:	add	sp, sp, #12
   19f48:	ldrd	r4, [sp]
   19f4c:	ldrd	r6, [sp, #8]
   19f50:	ldrd	r8, [sp, #16]
   19f54:	ldrd	sl, [sp, #24]
   19f58:	add	sp, sp, #32
   19f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f60:	add	r1, r6, r9
   19f64:	cmp	r1, r3
   19f68:	bcc	1a324 <argp_parse@@Base+0x21d0>
   19f6c:	ldr	sl, [r5, #12]
   19f70:	sub	r7, r3, #1
   19f74:	cmp	sl, #0
   19f78:	blt	1a2bc <argp_parse@@Base+0x2168>
   19f7c:	mov	fp, r8
   19f80:	add	r7, r7, #1
   19f84:	sub	r6, r7, r6
   19f88:	adds	r6, r4, r6
   19f8c:	bcs	1a178 <argp_parse@@Base+0x2024>
   19f90:	bl	112a4 <__ctype_b_loc@plt>
   19f94:	mov	r3, r6
   19f98:	ldr	ip, [r0]
   19f9c:	b	19fac <argp_parse@@Base+0x1e58>
   19fa0:	cmp	r4, r0
   19fa4:	mov	r3, r0
   19fa8:	bhi	1a17c <argp_parse@@Base+0x2028>
   19fac:	ldrb	r1, [r3]
   19fb0:	mov	r7, r3
   19fb4:	sub	r0, r3, #1
   19fb8:	lsl	r1, r1, #1
   19fbc:	ldrh	r1, [ip, r1]
   19fc0:	tst	r1, #1
   19fc4:	beq	19fa0 <argp_parse@@Base+0x1e4c>
   19fc8:	add	r0, r3, #1
   19fcc:	cmp	r4, r0
   19fd0:	bcs	1a18c <argp_parse@@Base+0x2038>
   19fd4:	cmp	r4, r3
   19fd8:	movhi	r6, r0
   19fdc:	movhi	r7, r6
   19fe0:	bls	19ffc <argp_parse@@Base+0x1ea8>
   19fe4:	b	1a010 <argp_parse@@Base+0x1ebc>
   19fe8:	ldrb	r1, [r6, #-1]
   19fec:	lsl	r1, r1, #1
   19ff0:	ldrh	r1, [ip, r1]
   19ff4:	tst	r1, #1
   19ff8:	beq	1a00c <argp_parse@@Base+0x1eb8>
   19ffc:	cmp	r4, r3
   1a000:	mov	r6, r3
   1a004:	sub	r3, r3, #1
   1a008:	bne	19fe8 <argp_parse@@Base+0x1e94>
   1a00c:	mov	r7, r0
   1a010:	add	r3, r9, #1
   1a014:	add	r3, r4, r3
   1a018:	cmp	r7, r3
   1a01c:	beq	1a148 <argp_parse@@Base+0x1ff4>
   1a020:	add	r1, r6, #1
   1a024:	sub	r3, r7, r1
   1a028:	cmp	r3, sl
   1a02c:	bge	1a160 <argp_parse@@Base+0x200c>
   1a030:	cmp	r7, r8
   1a034:	bcs	1a158 <argp_parse@@Base+0x2004>
   1a038:	ldr	r3, [r5, #32]
   1a03c:	add	sl, sl, #1
   1a040:	sub	r3, r3, r8
   1a044:	cmp	r3, sl
   1a048:	bgt	1a2d0 <argp_parse@@Base+0x217c>
   1a04c:	ldr	r3, [r5]
   1a050:	ldr	r0, [r5, #24]
   1a054:	cmp	r0, r6
   1a058:	bcs	1a06c <argp_parse@@Base+0x1f18>
   1a05c:	sub	r2, r6, r0
   1a060:	mov	r1, #1
   1a064:	bl	1119c <fwrite_unlocked@plt>
   1a068:	ldr	r3, [r5]
   1a06c:	ldr	r2, [r3, #20]
   1a070:	ldr	r1, [r3, #24]
   1a074:	cmp	r2, r1
   1a078:	addcc	r1, r2, #1
   1a07c:	strcc	r1, [r3, #20]
   1a080:	movcc	r3, #10
   1a084:	strbcc	r3, [r2]
   1a088:	bcs	1a314 <argp_parse@@Base+0x21c0>
   1a08c:	ldr	fp, [r5, #24]
   1a090:	sub	r4, r4, fp
   1a094:	sub	r3, r7, fp
   1a098:	add	r9, r9, r4
   1a09c:	mov	r8, r3
   1a0a0:	mov	r4, fp
   1a0a4:	ldr	r2, [r5, #12]
   1a0a8:	cmp	r2, r3
   1a0ac:	ble	1a0d0 <argp_parse@@Base+0x1f7c>
   1a0b0:	add	r3, r9, #1
   1a0b4:	add	r3, fp, r3
   1a0b8:	cmp	r7, r3
   1a0bc:	bne	1a1c0 <argp_parse@@Base+0x206c>
   1a0c0:	ldr	r3, [r5, #32]
   1a0c4:	sub	r3, r3, r7
   1a0c8:	cmp	r2, r3
   1a0cc:	bgt	1a1c0 <argp_parse@@Base+0x206c>
   1a0d0:	cmp	r2, #0
   1a0d4:	ble	1a0f4 <argp_parse@@Base+0x1fa0>
   1a0d8:	mov	r3, #0
   1a0dc:	mov	r1, #32
   1a0e0:	strb	r1, [r4], #1
   1a0e4:	add	r3, r3, #1
   1a0e8:	ldr	r2, [r5, #12]
   1a0ec:	cmp	r2, r3
   1a0f0:	bgt	1a0e0 <argp_parse@@Base+0x1f8c>
   1a0f4:	cmp	r4, r7
   1a0f8:	bcc	1a250 <argp_parse@@Base+0x20fc>
   1a0fc:	sub	r8, r9, r8
   1a100:	cmp	r2, #0
   1a104:	add	r8, r4, r8
   1a108:	mvneq	r2, #0
   1a10c:	str	r2, [r5, #20]
   1a110:	str	r8, [r5, #28]
   1a114:	b	19e20 <argp_parse@@Base+0x1ccc>
   1a118:	sub	r9, r8, r4
   1a11c:	mov	r1, #10
   1a120:	mov	r2, r9
   1a124:	mov	r0, r4
   1a128:	bl	1134c <memchr@plt>
   1a12c:	mov	fp, r0
   1a130:	b	19eb8 <argp_parse@@Base+0x1d64>
   1a134:	mov	r3, #0
   1a138:	add	r4, fp, #1
   1a13c:	ldr	r8, [r5, #28]
   1a140:	str	r3, [r5, #20]
   1a144:	b	19e20 <argp_parse@@Base+0x1ccc>
   1a148:	ldr	r3, [r5, #32]
   1a14c:	sub	r3, r3, r6
   1a150:	cmp	r3, sl
   1a154:	ble	1a030 <argp_parse@@Base+0x1edc>
   1a158:	add	r1, r6, #1
   1a15c:	sub	r3, r7, r1
   1a160:	mov	r2, #10
   1a164:	sub	r8, r7, r4
   1a168:	mov	fp, r4
   1a16c:	mov	r4, r1
   1a170:	strb	r2, [r6]
   1a174:	b	1a0a4 <argp_parse@@Base+0x1f50>
   1a178:	add	r7, r6, #1
   1a17c:	cmp	r4, r7
   1a180:	bcs	1a18c <argp_parse@@Base+0x2038>
   1a184:	mov	r6, r7
   1a188:	b	1a010 <argp_parse@@Base+0x1ebc>
   1a18c:	cmp	r6, fp
   1a190:	bcc	1a280 <argp_parse@@Base+0x212c>
   1a194:	cmp	r6, fp
   1a198:	beq	1a26c <argp_parse@@Base+0x2118>
   1a19c:	bl	112a4 <__ctype_b_loc@plt>
   1a1a0:	ldr	r1, [r0]
   1a1a4:	mov	r7, r6
   1a1a8:	ldrb	r3, [r7, #1]!
   1a1ac:	lsl	r3, r3, #1
   1a1b0:	ldrh	r3, [r1, r3]
   1a1b4:	tst	r3, #1
   1a1b8:	bne	1a1a8 <argp_parse@@Base+0x2054>
   1a1bc:	b	1a010 <argp_parse@@Base+0x1ebc>
   1a1c0:	cmp	r2, #0
   1a1c4:	movgt	r6, #0
   1a1c8:	movgt	sl, #32
   1a1cc:	ble	1a0f4 <argp_parse@@Base+0x1fa0>
   1a1d0:	ldr	r0, [r5]
   1a1d4:	ldr	r2, [r0, #20]
   1a1d8:	ldr	r1, [r0, #24]
   1a1dc:	add	ip, r2, #1
   1a1e0:	cmp	r2, r1
   1a1e4:	strcc	ip, [r0, #20]
   1a1e8:	strbcc	sl, [r2]
   1a1ec:	bcs	1a244 <argp_parse@@Base+0x20f0>
   1a1f0:	ldr	r2, [r5, #12]
   1a1f4:	add	r6, r6, #1
   1a1f8:	cmp	r2, r6
   1a1fc:	bgt	1a1d0 <argp_parse@@Base+0x207c>
   1a200:	b	1a0f4 <argp_parse@@Base+0x1fa0>
   1a204:	mov	r8, #32
   1a208:	b	1a218 <argp_parse@@Base+0x20c4>
   1a20c:	add	r6, r6, #1
   1a210:	cmp	r7, r6
   1a214:	beq	19e84 <argp_parse@@Base+0x1d30>
   1a218:	ldr	r0, [r5]
   1a21c:	ldr	r3, [r0, #20]
   1a220:	ldr	r2, [r0, #24]
   1a224:	add	r1, r3, #1
   1a228:	cmp	r3, r2
   1a22c:	strcc	r1, [r0, #20]
   1a230:	strbcc	r8, [r3]
   1a234:	bcc	1a20c <argp_parse@@Base+0x20b8>
   1a238:	mov	r1, #32
   1a23c:	bl	11364 <__overflow@plt>
   1a240:	b	1a20c <argp_parse@@Base+0x20b8>
   1a244:	mov	r1, #32
   1a248:	bl	11364 <__overflow@plt>
   1a24c:	b	1a1f0 <argp_parse@@Base+0x209c>
   1a250:	add	r2, fp, r9
   1a254:	mov	r1, r7
   1a258:	sub	r2, r2, r7
   1a25c:	mov	r0, r4
   1a260:	bl	11148 <memmove@plt>
   1a264:	ldr	r2, [r5, #12]
   1a268:	b	1a0fc <argp_parse@@Base+0x1fa8>
   1a26c:	mov	r3, #0
   1a270:	add	r4, r6, #1
   1a274:	ldr	r8, [r5, #28]
   1a278:	str	r3, [r5, #20]
   1a27c:	b	19e20 <argp_parse@@Base+0x1ccc>
   1a280:	add	r7, r6, #1
   1a284:	b	1a2a8 <argp_parse@@Base+0x2154>
   1a288:	bl	112a4 <__ctype_b_loc@plt>
   1a28c:	ldrb	r3, [r7]
   1a290:	add	r7, r7, #1
   1a294:	ldr	r1, [r0]
   1a298:	lsl	r3, r3, #1
   1a29c:	ldrh	r3, [r1, r3]
   1a2a0:	tst	r3, #1
   1a2a4:	bne	1a1a4 <argp_parse@@Base+0x2050>
   1a2a8:	cmp	fp, r7
   1a2ac:	mov	r6, r7
   1a2b0:	bne	1a288 <argp_parse@@Base+0x2134>
   1a2b4:	b	1a194 <argp_parse@@Base+0x2040>
   1a2b8:	add	r1, r9, r6
   1a2bc:	sub	r7, r7, r1
   1a2c0:	str	r1, [r5, #20]
   1a2c4:	add	r8, r8, r7
   1a2c8:	str	r8, [r5, #28]
   1a2cc:	b	19f38 <argp_parse@@Base+0x1de4>
   1a2d0:	sub	r8, r8, r7
   1a2d4:	mov	r1, r7
   1a2d8:	mov	r2, r8
   1a2dc:	add	r0, r6, sl
   1a2e0:	bl	11148 <memmove@plt>
   1a2e4:	ldr	r3, [r5, #12]
   1a2e8:	mov	r2, r6
   1a2ec:	mov	r1, #10
   1a2f0:	mov	fp, r4
   1a2f4:	strb	r1, [r2], #1
   1a2f8:	add	r7, r3, #1
   1a2fc:	add	r7, r6, r7
   1a300:	add	r9, r7, r8
   1a304:	sub	r8, r7, r4
   1a308:	sub	r9, r9, r4
   1a30c:	mov	r4, r2
   1a310:	b	1a0a4 <argp_parse@@Base+0x1f50>
   1a314:	mov	r0, r3
   1a318:	mov	r1, #10
   1a31c:	bl	11364 <__overflow@plt>
   1a320:	b	1a08c <argp_parse@@Base+0x1f38>
   1a324:	str	r1, [r5, #20]
   1a328:	ldr	r8, [r5, #28]
   1a32c:	b	19f38 <argp_parse@@Base+0x1de4>
   1a330:	str	r4, [sp, #-8]!
   1a334:	mov	r4, r0
   1a338:	str	lr, [sp, #4]
   1a33c:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1a340:	ldr	r0, [r4, #24]
   1a344:	ldr	r2, [r4, #28]
   1a348:	cmp	r2, r0
   1a34c:	bls	1a364 <argp_parse@@Base+0x2210>
   1a350:	sub	r2, r2, r0
   1a354:	mov	r1, #1
   1a358:	ldr	r3, [r4]
   1a35c:	bl	1119c <fwrite_unlocked@plt>
   1a360:	ldr	r0, [r4, #24]
   1a364:	bl	19138 <argp_parse@@Base+0xfe4>
   1a368:	mov	r0, r4
   1a36c:	ldr	r4, [sp]
   1a370:	ldr	lr, [sp, #4]
   1a374:	add	sp, sp, #8
   1a378:	b	19138 <argp_parse@@Base+0xfe4>
   1a37c:	strd	r4, [sp, #-16]!
   1a380:	mov	r4, r0
   1a384:	mov	r5, r1
   1a388:	str	r6, [sp, #8]
   1a38c:	str	lr, [sp, #12]
   1a390:	bl	19df4 <argp_parse@@Base+0x1ca0>
   1a394:	mov	r1, #1
   1a398:	ldr	r3, [r4]
   1a39c:	ldr	r2, [r4, #24]
   1a3a0:	ldr	ip, [r4, #28]
   1a3a4:	mov	r0, r2
   1a3a8:	sub	r2, ip, r2
   1a3ac:	bl	1119c <fwrite_unlocked@plt>
   1a3b0:	mov	ip, r0
   1a3b4:	ldr	r0, [r4, #24]
   1a3b8:	ldr	r3, [r4, #28]
   1a3bc:	sub	r2, r3, r0
   1a3c0:	cmp	ip, r2
   1a3c4:	bne	1a424 <argp_parse@@Base+0x22d0>
   1a3c8:	ldr	r1, [r4, #32]
   1a3cc:	mov	r3, #0
   1a3d0:	str	r3, [r4, #16]
   1a3d4:	str	r0, [r4, #28]
   1a3d8:	sub	r1, r1, r0
   1a3dc:	cmp	r1, r5
   1a3e0:	movcs	r3, #1
   1a3e4:	bcs	1a410 <argp_parse@@Base+0x22bc>
   1a3e8:	adds	r5, r1, r5
   1a3ec:	bcs	1a44c <argp_parse@@Base+0x22f8>
   1a3f0:	mov	r1, r5
   1a3f4:	bl	19d04 <argp_parse@@Base+0x1bb0>
   1a3f8:	cmp	r0, #0
   1a3fc:	beq	1a44c <argp_parse@@Base+0x22f8>
   1a400:	add	r1, r0, r5
   1a404:	mov	r3, #1
   1a408:	str	r0, [r4, #24]
   1a40c:	strd	r0, [r4, #28]
   1a410:	ldrd	r4, [sp]
   1a414:	mov	r0, r3
   1a418:	ldr	r6, [sp, #8]
   1a41c:	add	sp, sp, #12
   1a420:	pop	{pc}		; (ldr pc, [sp], #4)
   1a424:	ldr	lr, [r4, #16]
   1a428:	sub	r3, r3, ip
   1a42c:	add	r1, r0, ip
   1a430:	sub	r2, r3, r0
   1a434:	str	r3, [r4, #28]
   1a438:	sub	ip, lr, ip
   1a43c:	str	ip, [r4, #16]
   1a440:	bl	11148 <memmove@plt>
   1a444:	mov	r3, #0
   1a448:	b	1a410 <argp_parse@@Base+0x22bc>
   1a44c:	bl	112f8 <__errno_location@plt>
   1a450:	mov	r2, #12
   1a454:	mov	r3, #0
   1a458:	str	r2, [r0]
   1a45c:	b	1a410 <argp_parse@@Base+0x22bc>
   1a460:	ldr	ip, [r0, #28]
   1a464:	ldr	r3, [r0, #32]
   1a468:	sub	r3, r3, ip
   1a46c:	cmp	r3, r1
   1a470:	bcc	1a47c <argp_parse@@Base+0x2328>
   1a474:	mov	r0, #1
   1a478:	bx	lr
   1a47c:	b	1a37c <argp_parse@@Base+0x2228>
   1a480:	push	{r1, r2, r3}
   1a484:	mov	r1, #150	; 0x96
   1a488:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a48c:	mov	r5, r0
   1a490:	strd	r6, [sp, #8]
   1a494:	str	lr, [sp, #16]
   1a498:	sub	sp, sp, #8
   1a49c:	ldr	r7, [sp, #28]
   1a4a0:	add	r6, sp, #32
   1a4a4:	ldr	r0, [r5, #28]
   1a4a8:	ldr	r3, [r5, #32]
   1a4ac:	sub	r2, r3, r0
   1a4b0:	cmp	r1, r2
   1a4b4:	bhi	1a504 <argp_parse@@Base+0x23b0>
   1a4b8:	sub	r4, r3, r0
   1a4bc:	mov	r2, r7
   1a4c0:	str	r6, [sp, #4]
   1a4c4:	mov	r1, r4
   1a4c8:	mov	r3, r6
   1a4cc:	bl	113dc <vsnprintf@plt>
   1a4d0:	cmp	r0, r4
   1a4d4:	add	r1, r0, #1
   1a4d8:	bcs	1a4a4 <argp_parse@@Base+0x2350>
   1a4dc:	ldr	r3, [r5, #28]
   1a4e0:	add	r3, r3, r0
   1a4e4:	str	r3, [r5, #28]
   1a4e8:	add	sp, sp, #8
   1a4ec:	ldrd	r4, [sp]
   1a4f0:	ldrd	r6, [sp, #8]
   1a4f4:	ldr	lr, [sp, #16]
   1a4f8:	add	sp, sp, #20
   1a4fc:	add	sp, sp, #12
   1a500:	bx	lr
   1a504:	mov	r0, r5
   1a508:	bl	1a37c <argp_parse@@Base+0x2228>
   1a50c:	cmp	r0, #0
   1a510:	beq	1a520 <argp_parse@@Base+0x23cc>
   1a514:	ldr	r0, [r5, #28]
   1a518:	ldr	r3, [r5, #32]
   1a51c:	b	1a4b8 <argp_parse@@Base+0x2364>
   1a520:	mvn	r0, #0
   1a524:	b	1a4e8 <argp_parse@@Base+0x2394>
   1a528:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a52c:	ldr	r4, [r1, #32]
   1a530:	strd	r6, [sp, #8]
   1a534:	strd	r8, [sp, #16]
   1a538:	ldr	r7, [r1]
   1a53c:	str	sl, [sp, #24]
   1a540:	ldr	r8, [r1, #28]
   1a544:	add	r6, r0, r4, lsl #2
   1a548:	str	lr, [sp, #28]
   1a54c:	mov	r5, r7
   1a550:	mov	r3, r8
   1a554:	cmp	r5, r4
   1a558:	movle	r2, #0
   1a55c:	movgt	r2, #1
   1a560:	cmp	r3, r4
   1a564:	movge	r2, #0
   1a568:	cmp	r2, #0
   1a56c:	beq	1a5e0 <argp_parse@@Base+0x248c>
   1a570:	sub	r2, r5, r4
   1a574:	sub	lr, r4, r3
   1a578:	cmp	r2, lr
   1a57c:	ble	1a5b0 <argp_parse@@Base+0x245c>
   1a580:	sub	r5, r5, lr
   1a584:	add	lr, lr, r3
   1a588:	add	r2, r0, r3, lsl #2
   1a58c:	add	lr, r0, lr, lsl #2
   1a590:	add	ip, r0, r5, lsl #2
   1a594:	ldr	sl, [ip]
   1a598:	ldr	r9, [r2]
   1a59c:	str	sl, [r2], #4
   1a5a0:	cmp	lr, r2
   1a5a4:	str	r9, [ip], #4
   1a5a8:	bne	1a594 <argp_parse@@Base+0x2440>
   1a5ac:	b	1a554 <argp_parse@@Base+0x2400>
   1a5b0:	add	sl, r2, r3
   1a5b4:	add	r3, r0, r3, lsl #2
   1a5b8:	mov	r2, r6
   1a5bc:	add	r9, r0, sl, lsl #2
   1a5c0:	ldr	lr, [r2]
   1a5c4:	ldr	ip, [r3]
   1a5c8:	str	lr, [r3], #4
   1a5cc:	cmp	r3, r9
   1a5d0:	str	ip, [r2], #4
   1a5d4:	bne	1a5c0 <argp_parse@@Base+0x246c>
   1a5d8:	mov	r3, sl
   1a5dc:	b	1a554 <argp_parse@@Base+0x2400>
   1a5e0:	sub	r4, r7, r4
   1a5e4:	str	r7, [r1, #32]
   1a5e8:	add	r8, r4, r8
   1a5ec:	ldrd	r4, [sp]
   1a5f0:	str	r8, [r1, #28]
   1a5f4:	ldrd	r6, [sp, #8]
   1a5f8:	ldrd	r8, [sp, #16]
   1a5fc:	ldr	sl, [sp, #24]
   1a600:	add	sp, sp, #28
   1a604:	pop	{pc}		; (ldr pc, [sp], #4)
   1a608:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a60c:	strd	r6, [sp, #8]
   1a610:	strd	r8, [sp, #16]
   1a614:	strd	sl, [sp, #24]
   1a618:	str	lr, [sp, #32]
   1a61c:	sub	sp, sp, #52	; 0x34
   1a620:	str	r3, [sp, #12]
   1a624:	ldr	r3, [sp, #96]	; 0x60
   1a628:	str	r1, [sp, #28]
   1a62c:	str	r2, [sp, #32]
   1a630:	str	r0, [sp, #36]	; 0x24
   1a634:	ldr	r8, [r3, #20]
   1a638:	ldrb	r5, [r8]
   1a63c:	mov	r9, r8
   1a640:	cmp	r5, #61	; 0x3d
   1a644:	cmpne	r5, #0
   1a648:	movne	r5, #1
   1a64c:	moveq	r5, #0
   1a650:	beq	1a668 <argp_parse@@Base+0x2514>
   1a654:	ldrb	r3, [r9, #1]!
   1a658:	cmp	r3, #0
   1a65c:	cmpne	r3, #61	; 0x3d
   1a660:	bne	1a654 <argp_parse@@Base+0x2500>
   1a664:	sub	r5, r9, r8
   1a668:	ldr	r3, [sp, #12]
   1a66c:	ldr	r3, [r3]
   1a670:	cmp	r3, #0
   1a674:	str	r3, [sp, #16]
   1a678:	beq	1a840 <argp_parse@@Base+0x26ec>
   1a67c:	ldr	fp, [sp, #12]
   1a680:	mov	r6, #0
   1a684:	ldr	r4, [sp, #16]
   1a688:	str	fp, [sp, #24]
   1a68c:	b	1a694 <argp_parse@@Base+0x2540>
   1a690:	mov	r6, r7
   1a694:	mov	r2, r5
   1a698:	mov	r1, r8
   1a69c:	mov	r0, r4
   1a6a0:	add	r7, r6, #1
   1a6a4:	bl	11418 <strncmp@plt>
   1a6a8:	cmp	r0, #0
   1a6ac:	mov	sl, fp
   1a6b0:	mov	r0, r4
   1a6b4:	bne	1a6c4 <argp_parse@@Base+0x2570>
   1a6b8:	bl	112d4 <strlen@plt>
   1a6bc:	cmp	r0, r5
   1a6c0:	beq	1a778 <argp_parse@@Base+0x2624>
   1a6c4:	ldr	r4, [fp, #16]!
   1a6c8:	cmp	r4, #0
   1a6cc:	bne	1a690 <argp_parse@@Base+0x253c>
   1a6d0:	ldr	r0, [sp, #16]
   1a6d4:	mvn	r3, #0
   1a6d8:	mov	r1, r8
   1a6dc:	str	r7, [sp, #16]
   1a6e0:	mov	sl, r4
   1a6e4:	mov	r8, r4
   1a6e8:	ldr	fp, [sp, #24]
   1a6ec:	str	r4, [sp, #20]
   1a6f0:	ldr	r7, [sp, #96]	; 0x60
   1a6f4:	str	r3, [sp, #40]	; 0x28
   1a6f8:	str	r4, [sp, #44]	; 0x2c
   1a6fc:	mov	r2, r5
   1a700:	bl	11418 <strncmp@plt>
   1a704:	cmp	r0, #0
   1a708:	bne	1a748 <argp_parse@@Base+0x25f4>
   1a70c:	cmp	sl, #0
   1a710:	beq	1a834 <argp_parse@@Base+0x26e0>
   1a714:	ldr	r3, [sp, #92]	; 0x5c
   1a718:	cmp	r3, #0
   1a71c:	beq	1a7e8 <argp_parse@@Base+0x2694>
   1a720:	ldr	r3, [sp, #20]
   1a724:	cmp	r3, #0
   1a728:	bne	1a748 <argp_parse@@Base+0x25f4>
   1a72c:	ldr	r3, [sp, #100]	; 0x64
   1a730:	cmp	r3, #0
   1a734:	beq	1a8b8 <argp_parse@@Base+0x2764>
   1a738:	cmp	r4, #0
   1a73c:	beq	1a9e0 <argp_parse@@Base+0x288c>
   1a740:	mov	r3, #1
   1a744:	strb	r3, [r4, r8]
   1a748:	ldr	r0, [fp, #16]!
   1a74c:	add	r8, r8, #1
   1a750:	cmp	r0, #0
   1a754:	beq	1a760 <argp_parse@@Base+0x260c>
   1a758:	ldr	r1, [r7, #20]
   1a75c:	b	1a6fc <argp_parse@@Base+0x25a8>
   1a760:	ldr	r3, [sp, #20]
   1a764:	orrs	r3, r4, r3
   1a768:	bne	1a908 <argp_parse@@Base+0x27b4>
   1a76c:	cmp	sl, #0
   1a770:	ldrne	r6, [sp, #40]	; 0x28
   1a774:	beq	1a840 <argp_parse@@Base+0x26ec>
   1a778:	ldr	r3, [sp, #96]	; 0x60
   1a77c:	mov	r2, #0
   1a780:	ldr	r1, [sp, #96]	; 0x60
   1a784:	ldr	r0, [sl, #4]
   1a788:	ldr	r3, [r3]
   1a78c:	str	r2, [r1, #20]
   1a790:	add	r2, r3, #1
   1a794:	str	r2, [r1]
   1a798:	ldrb	r1, [r9]
   1a79c:	cmp	r1, #0
   1a7a0:	bne	1a81c <argp_parse@@Base+0x26c8>
   1a7a4:	cmp	r0, #1
   1a7a8:	beq	1a998 <argp_parse@@Base+0x2844>
   1a7ac:	ldr	r3, [sp, #88]	; 0x58
   1a7b0:	cmp	r3, #0
   1a7b4:	strne	r6, [r3]
   1a7b8:	ldr	r3, [sl, #8]
   1a7bc:	ldr	r0, [sl, #12]
   1a7c0:	cmp	r3, #0
   1a7c4:	strne	r0, [r3]
   1a7c8:	movne	r0, #0
   1a7cc:	add	sp, sp, #52	; 0x34
   1a7d0:	ldrd	r4, [sp]
   1a7d4:	ldrd	r6, [sp, #8]
   1a7d8:	ldrd	r8, [sp, #16]
   1a7dc:	ldrd	sl, [sp, #24]
   1a7e0:	add	sp, sp, #32
   1a7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7e8:	ldr	r1, [sl, #4]
   1a7ec:	ldr	r2, [fp, #4]
   1a7f0:	cmp	r1, r2
   1a7f4:	bne	1a720 <argp_parse@@Base+0x25cc>
   1a7f8:	ldr	r1, [sl, #8]
   1a7fc:	ldr	r2, [fp, #8]
   1a800:	cmp	r1, r2
   1a804:	bne	1a720 <argp_parse@@Base+0x25cc>
   1a808:	ldr	r1, [sl, #12]
   1a80c:	ldr	r2, [fp, #12]
   1a810:	cmp	r1, r2
   1a814:	bne	1a720 <argp_parse@@Base+0x25cc>
   1a818:	b	1a748 <argp_parse@@Base+0x25f4>
   1a81c:	cmp	r0, #0
   1a820:	beq	1a9c0 <argp_parse@@Base+0x286c>
   1a824:	ldr	r3, [sp, #96]	; 0x60
   1a828:	add	r9, r9, #1
   1a82c:	str	r9, [r3, #12]
   1a830:	b	1a7ac <argp_parse@@Base+0x2658>
   1a834:	mov	sl, fp
   1a838:	str	r8, [sp, #40]	; 0x28
   1a83c:	b	1a748 <argp_parse@@Base+0x25f4>
   1a840:	ldr	r3, [sp, #92]	; 0x5c
   1a844:	cmp	r3, #0
   1a848:	beq	1a884 <argp_parse@@Base+0x2730>
   1a84c:	ldr	r2, [sp, #28]
   1a850:	ldr	r3, [sp, #96]	; 0x60
   1a854:	ldr	r3, [r3]
   1a858:	ldr	r3, [r2, r3, lsl #2]
   1a85c:	ldrb	r3, [r3, #1]
   1a860:	cmp	r3, #45	; 0x2d
   1a864:	beq	1a884 <argp_parse@@Base+0x2730>
   1a868:	ldr	r0, [sp, #32]
   1a86c:	ldr	r3, [sp, #96]	; 0x60
   1a870:	ldr	r3, [r3, #20]
   1a874:	ldrb	r1, [r3]
   1a878:	bl	112e0 <strchr@plt>
   1a87c:	cmp	r0, #0
   1a880:	bne	1aa50 <argp_parse@@Base+0x28fc>
   1a884:	ldr	r3, [sp, #100]	; 0x64
   1a888:	cmp	r3, #0
   1a88c:	bne	1a8d4 <argp_parse@@Base+0x2780>
   1a890:	ldr	r3, [sp, #96]	; 0x60
   1a894:	mov	r2, #0
   1a898:	mov	r0, #63	; 0x3f
   1a89c:	ldr	r1, [sp, #96]	; 0x60
   1a8a0:	ldr	r3, [r3]
   1a8a4:	str	r2, [r1, #8]
   1a8a8:	str	r2, [r1, #20]
   1a8ac:	add	r3, r3, #1
   1a8b0:	str	r3, [r1]
   1a8b4:	b	1a7cc <argp_parse@@Base+0x2678>
   1a8b8:	mov	r3, #1
   1a8bc:	cmp	r4, #0
   1a8c0:	str	r3, [sp, #20]
   1a8c4:	beq	1a748 <argp_parse@@Base+0x25f4>
   1a8c8:	mov	r3, #1
   1a8cc:	strb	r3, [r4, r8]
   1a8d0:	b	1a748 <argp_parse@@Base+0x25f4>
   1a8d4:	ldr	r3, [sp, #96]	; 0x60
   1a8d8:	movw	r0, #54824	; 0xd628
   1a8dc:	movt	r0, #2
   1a8e0:	movw	r1, #52048	; 0xcb50
   1a8e4:	movt	r1, #1
   1a8e8:	ldr	r0, [r0]
   1a8ec:	ldr	ip, [r3, #20]
   1a8f0:	ldr	r3, [sp, #28]
   1a8f4:	ldr	r2, [r3]
   1a8f8:	str	ip, [sp]
   1a8fc:	ldr	r3, [sp, #104]	; 0x68
   1a900:	bl	112ec <fprintf@plt>
   1a904:	b	1a890 <argp_parse@@Base+0x273c>
   1a908:	ldr	r3, [sp, #100]	; 0x64
   1a90c:	cmp	r3, #0
   1a910:	beq	1a950 <argp_parse@@Base+0x27fc>
   1a914:	ldr	r3, [sp, #20]
   1a918:	movw	r5, #54824	; 0xd628
   1a91c:	movt	r5, #2
   1a920:	ldr	r0, [r5]
   1a924:	cmp	r3, #0
   1a928:	beq	1aa88 <argp_parse@@Base+0x2934>
   1a92c:	ldr	r2, [sp, #28]
   1a930:	movw	r1, #51960	; 0xcaf8
   1a934:	movt	r1, #1
   1a938:	ldr	r3, [sp, #96]	; 0x60
   1a93c:	ldr	r2, [r2]
   1a940:	ldr	ip, [r3, #20]
   1a944:	ldr	r3, [sp, #104]	; 0x68
   1a948:	str	ip, [sp]
   1a94c:	bl	112ec <fprintf@plt>
   1a950:	ldr	r3, [sp, #44]	; 0x2c
   1a954:	cmp	r3, #0
   1a958:	bne	1aa44 <argp_parse@@Base+0x28f0>
   1a95c:	ldr	r3, [sp, #96]	; 0x60
   1a960:	ldr	r4, [r3, #20]
   1a964:	mov	r0, r4
   1a968:	bl	112d4 <strlen@plt>
   1a96c:	ldr	r3, [sp, #96]	; 0x60
   1a970:	add	r4, r4, r0
   1a974:	mov	r2, #0
   1a978:	mov	r0, #63	; 0x3f
   1a97c:	ldr	r1, [sp, #96]	; 0x60
   1a980:	ldr	r3, [r3]
   1a984:	str	r2, [r1, #8]
   1a988:	str	r4, [r1, #20]
   1a98c:	add	r3, r3, #1
   1a990:	str	r3, [r1]
   1a994:	b	1a7cc <argp_parse@@Base+0x2678>
   1a998:	ldr	r1, [sp, #36]	; 0x24
   1a99c:	cmp	r2, r1
   1a9a0:	bge	1aa58 <argp_parse@@Base+0x2904>
   1a9a4:	ldr	r1, [sp, #28]
   1a9a8:	add	r3, r3, #2
   1a9ac:	ldr	r2, [r1, r2, lsl #2]
   1a9b0:	ldr	r1, [sp, #96]	; 0x60
   1a9b4:	str	r3, [r1]
   1a9b8:	str	r2, [r1, #12]
   1a9bc:	b	1a7ac <argp_parse@@Base+0x2658>
   1a9c0:	ldr	r3, [sp, #100]	; 0x64
   1a9c4:	cmp	r3, #0
   1a9c8:	bne	1aa14 <argp_parse@@Base+0x28c0>
   1a9cc:	ldr	r3, [sl, #12]
   1a9d0:	mov	r0, #63	; 0x3f
   1a9d4:	ldr	r2, [sp, #96]	; 0x60
   1a9d8:	str	r3, [r2, #8]
   1a9dc:	b	1a7cc <argp_parse@@Base+0x2678>
   1a9e0:	ldr	r0, [sp, #16]
   1a9e4:	bl	19cc8 <argp_parse@@Base+0x1b74>
   1a9e8:	subs	r4, r0, #0
   1a9ec:	beq	1ab4c <argp_parse@@Base+0x29f8>
   1a9f0:	ldr	r2, [sp, #16]
   1a9f4:	ldr	r1, [sp, #20]
   1a9f8:	bl	11328 <memset@plt>
   1a9fc:	mov	r3, #1
   1aa00:	mov	r2, #1
   1aa04:	str	r3, [sp, #44]	; 0x2c
   1aa08:	ldr	r3, [sp, #40]	; 0x28
   1aa0c:	strb	r2, [r4, r3]
   1aa10:	b	1a740 <argp_parse@@Base+0x25ec>
   1aa14:	ldr	ip, [sl]
   1aa18:	movw	r0, #54824	; 0xd628
   1aa1c:	movt	r0, #2
   1aa20:	movw	r1, #52080	; 0xcb70
   1aa24:	movt	r1, #1
   1aa28:	ldr	r3, [sp, #28]
   1aa2c:	ldr	r0, [r0]
   1aa30:	ldr	r2, [r3]
   1aa34:	str	ip, [sp]
   1aa38:	ldr	r3, [sp, #104]	; 0x68
   1aa3c:	bl	112ec <fprintf@plt>
   1aa40:	b	1a9cc <argp_parse@@Base+0x2878>
   1aa44:	mov	r0, r4
   1aa48:	bl	19138 <argp_parse@@Base+0xfe4>
   1aa4c:	b	1a95c <argp_parse@@Base+0x2808>
   1aa50:	mvn	r0, #0
   1aa54:	b	1a7cc <argp_parse@@Base+0x2678>
   1aa58:	ldr	r3, [sp, #100]	; 0x64
   1aa5c:	cmp	r3, #0
   1aa60:	bne	1ab1c <argp_parse@@Base+0x29c8>
   1aa64:	ldr	r3, [sl, #12]
   1aa68:	ldr	r2, [sp, #96]	; 0x60
   1aa6c:	str	r3, [r2, #8]
   1aa70:	ldr	r3, [sp, #32]
   1aa74:	ldrb	r3, [r3]
   1aa78:	cmp	r3, #58	; 0x3a
   1aa7c:	moveq	r0, #58	; 0x3a
   1aa80:	movne	r0, #63	; 0x3f
   1aa84:	b	1a7cc <argp_parse@@Base+0x2678>
   1aa88:	bl	113d0 <flockfile@plt>
   1aa8c:	ldr	r2, [sp, #28]
   1aa90:	movw	r1, #51992	; 0xcb18
   1aa94:	movt	r1, #1
   1aa98:	movw	r7, #52040	; 0xcb48
   1aa9c:	movt	r7, #1
   1aaa0:	ldr	r3, [sp, #96]	; 0x60
   1aaa4:	add	r6, r4, r6
   1aaa8:	sub	r8, r4, #1
   1aaac:	ldr	r2, [r2]
   1aab0:	ldr	r0, [r3, #20]
   1aab4:	ldr	r3, [sp, #104]	; 0x68
   1aab8:	str	r0, [sp]
   1aabc:	ldr	r0, [r5]
   1aac0:	bl	112ec <fprintf@plt>
   1aac4:	ldr	r0, [r5]
   1aac8:	ldr	sl, [sp, #12]
   1aacc:	ldr	r9, [sp, #20]
   1aad0:	b	1aae0 <argp_parse@@Base+0x298c>
   1aad4:	cmp	r6, r8
   1aad8:	add	r9, r9, #1
   1aadc:	beq	1ab04 <argp_parse@@Base+0x29b0>
   1aae0:	ldrb	r3, [r8, #1]!
   1aae4:	cmp	r3, #0
   1aae8:	beq	1aad4 <argp_parse@@Base+0x2980>
   1aaec:	mov	r1, r7
   1aaf0:	ldr	r3, [sl, r9, lsl #4]
   1aaf4:	ldr	r2, [sp, #104]	; 0x68
   1aaf8:	bl	112ec <fprintf@plt>
   1aafc:	ldr	r0, [r5]
   1ab00:	b	1aad4 <argp_parse@@Base+0x2980>
   1ab04:	mov	r1, r0
   1ab08:	mov	r0, #10
   1ab0c:	bl	113a0 <fputc@plt>
   1ab10:	ldr	r0, [r5]
   1ab14:	bl	11214 <funlockfile@plt>
   1ab18:	b	1a950 <argp_parse@@Base+0x27fc>
   1ab1c:	ldr	ip, [sl]
   1ab20:	movw	r0, #54824	; 0xd628
   1ab24:	movt	r0, #2
   1ab28:	movw	r1, #52128	; 0xcba0
   1ab2c:	movt	r1, #1
   1ab30:	ldr	r3, [sp, #28]
   1ab34:	ldr	r0, [r0]
   1ab38:	ldr	r2, [r3]
   1ab3c:	str	ip, [sp]
   1ab40:	ldr	r3, [sp, #104]	; 0x68
   1ab44:	bl	112ec <fprintf@plt>
   1ab48:	b	1aa64 <argp_parse@@Base+0x2910>
   1ab4c:	mov	r3, #1
   1ab50:	str	r3, [sp, #20]
   1ab54:	b	1a748 <argp_parse@@Base+0x25f4>
   1ab58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab5c:	subs	r5, r0, #0
   1ab60:	strd	r6, [sp, #8]
   1ab64:	strd	r8, [sp, #16]
   1ab68:	strd	sl, [sp, #24]
   1ab6c:	str	lr, [sp, #32]
   1ab70:	sub	sp, sp, #36	; 0x24
   1ab74:	ldr	r4, [sp, #80]	; 0x50
   1ab78:	ldr	r7, [r4, #4]
   1ab7c:	ble	1ad6c <argp_parse@@Base+0x2c18>
   1ab80:	mov	r6, r2
   1ab84:	mov	sl, r3
   1ab88:	ldr	r2, [r4]
   1ab8c:	mov	r3, #0
   1ab90:	mov	r9, r1
   1ab94:	str	r3, [r4, #12]
   1ab98:	cmp	r2, r3
   1ab9c:	beq	1ae14 <argp_parse@@Base+0x2cc0>
   1aba0:	ldr	r3, [r4, #16]
   1aba4:	cmp	r3, #0
   1aba8:	bne	1ad38 <argp_parse@@Base+0x2be4>
   1abac:	mov	r3, #0
   1abb0:	str	r3, [r4, #20]
   1abb4:	str	r2, [r4, #28]
   1abb8:	str	r2, [r4, #32]
   1abbc:	ldrb	r2, [r6]
   1abc0:	cmp	r2, #45	; 0x2d
   1abc4:	moveq	r2, #2
   1abc8:	addeq	r6, r6, #1
   1abcc:	streq	r2, [r4, #24]
   1abd0:	beq	1abf8 <argp_parse@@Base+0x2aa4>
   1abd4:	cmp	r2, #43	; 0x2b
   1abd8:	addeq	r6, r6, #1
   1abdc:	streq	r3, [r4, #24]
   1abe0:	beq	1abf8 <argp_parse@@Base+0x2aa4>
   1abe4:	ldr	r2, [sp, #84]	; 0x54
   1abe8:	cmp	r2, #0
   1abec:	beq	1af44 <argp_parse@@Base+0x2df0>
   1abf0:	mov	r2, #0
   1abf4:	str	r2, [r4, #24]
   1abf8:	mov	r2, #1
   1abfc:	str	r2, [r4, #16]
   1ac00:	ldrb	r2, [r6]
   1ac04:	cmp	r2, #58	; 0x3a
   1ac08:	moveq	r7, #0
   1ac0c:	cmp	r3, #0
   1ac10:	beq	1aca4 <argp_parse@@Base+0x2b50>
   1ac14:	ldrb	r2, [r3]
   1ac18:	cmp	r2, #0
   1ac1c:	beq	1aca4 <argp_parse@@Base+0x2b50>
   1ac20:	add	fp, r3, #1
   1ac24:	mov	r0, r6
   1ac28:	str	r3, [sp, #28]
   1ac2c:	str	fp, [r4, #20]
   1ac30:	ldrb	r8, [r3]
   1ac34:	mov	r1, r8
   1ac38:	str	r8, [sp, #24]
   1ac3c:	bl	112e0 <strchr@plt>
   1ac40:	ldrd	r2, [sp, #24]
   1ac44:	ldrb	r1, [r3, #1]
   1ac48:	cmp	r1, #0
   1ac4c:	bne	1ac5c <argp_parse@@Base+0x2b08>
   1ac50:	ldr	r1, [r4]
   1ac54:	add	r1, r1, #1
   1ac58:	str	r1, [r4]
   1ac5c:	sub	r1, r8, #58	; 0x3a
   1ac60:	cmp	r0, #0
   1ac64:	cmpne	r1, #1
   1ac68:	bls	1afc0 <argp_parse@@Base+0x2e6c>
   1ac6c:	ldrb	ip, [r0]
   1ac70:	ldrb	r1, [r0, #1]
   1ac74:	cmp	ip, #87	; 0x57
   1ac78:	beq	1aec4 <argp_parse@@Base+0x2d70>
   1ac7c:	cmp	r1, #58	; 0x3a
   1ac80:	beq	1af68 <argp_parse@@Base+0x2e14>
   1ac84:	mov	r0, r2
   1ac88:	add	sp, sp, #36	; 0x24
   1ac8c:	ldrd	r4, [sp]
   1ac90:	ldrd	r6, [sp, #8]
   1ac94:	ldrd	r8, [sp, #16]
   1ac98:	ldrd	sl, [sp, #24]
   1ac9c:	add	sp, sp, #32
   1aca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aca4:	ldr	r8, [r4]
   1aca8:	ldr	r3, [r4, #32]
   1acac:	cmp	r3, r8
   1acb0:	ldr	r3, [r4, #28]
   1acb4:	strgt	r8, [r4, #32]
   1acb8:	cmp	r8, r3
   1acbc:	ldr	r3, [r4, #24]
   1acc0:	strlt	r8, [r4, #28]
   1acc4:	cmp	r3, #1
   1acc8:	beq	1ad74 <argp_parse@@Base+0x2c20>
   1accc:	cmp	r5, r8
   1acd0:	beq	1ad54 <argp_parse@@Base+0x2c00>
   1acd4:	ldr	r3, [r9, r8, lsl #2]
   1acd8:	movw	fp, #50764	; 0xc64c
   1acdc:	movt	fp, #1
   1ace0:	mov	r1, fp
   1ace4:	mov	r0, r3
   1ace8:	str	r3, [sp, #24]
   1acec:	bl	110f4 <strcmp@plt>
   1acf0:	cmp	r0, #0
   1acf4:	ldr	r3, [sp, #24]
   1acf8:	bne	1ade8 <argp_parse@@Base+0x2c94>
   1acfc:	ldr	r3, [r4, #28]
   1ad00:	add	r8, r8, #1
   1ad04:	ldr	r2, [r4, #32]
   1ad08:	str	r8, [r4]
   1ad0c:	cmp	r3, r2
   1ad10:	beq	1afd4 <argp_parse@@Base+0x2e80>
   1ad14:	cmp	r8, r2
   1ad18:	beq	1ad2c <argp_parse@@Base+0x2bd8>
   1ad1c:	mov	r0, r9
   1ad20:	mov	r1, r4
   1ad24:	bl	1a528 <argp_parse@@Base+0x23d4>
   1ad28:	ldr	r3, [r4, #28]
   1ad2c:	str	r5, [r4]
   1ad30:	str	r5, [r4, #32]
   1ad34:	b	1ad5c <argp_parse@@Base+0x2c08>
   1ad38:	ldrb	r2, [r6]
   1ad3c:	ldr	r3, [r4, #20]
   1ad40:	sub	r1, r2, #43	; 0x2b
   1ad44:	tst	r1, #253	; 0xfd
   1ad48:	ldrbeq	r2, [r6, #1]
   1ad4c:	addeq	r6, r6, #1
   1ad50:	b	1ac04 <argp_parse@@Base+0x2ab0>
   1ad54:	ldr	r3, [r4, #28]
   1ad58:	ldr	r5, [r4, #32]
   1ad5c:	cmp	r5, r3
   1ad60:	mvnne	r2, #0
   1ad64:	strne	r3, [r4]
   1ad68:	bne	1ac84 <argp_parse@@Base+0x2b30>
   1ad6c:	mvn	r2, #0
   1ad70:	b	1ac84 <argp_parse@@Base+0x2b30>
   1ad74:	ldrd	r2, [r4, #28]
   1ad78:	cmp	r2, r3
   1ad7c:	beq	1afa8 <argp_parse@@Base+0x2e54>
   1ad80:	cmp	r8, r3
   1ad84:	beq	1ad98 <argp_parse@@Base+0x2c44>
   1ad88:	mov	r1, r4
   1ad8c:	mov	r0, r9
   1ad90:	bl	1a528 <argp_parse@@Base+0x23d4>
   1ad94:	ldr	r3, [r4]
   1ad98:	cmp	r5, r3
   1ad9c:	ble	1afb8 <argp_parse@@Base+0x2e64>
   1ada0:	add	r1, r9, r3, lsl #2
   1ada4:	b	1adb8 <argp_parse@@Base+0x2c64>
   1ada8:	add	r3, r3, #1
   1adac:	cmp	r3, r5
   1adb0:	str	r3, [r4]
   1adb4:	beq	1afb8 <argp_parse@@Base+0x2e64>
   1adb8:	ldr	r2, [r1], #4
   1adbc:	ldrb	r0, [r2]
   1adc0:	cmp	r0, #45	; 0x2d
   1adc4:	bne	1ada8 <argp_parse@@Base+0x2c54>
   1adc8:	ldrb	r2, [r2, #1]
   1adcc:	cmp	r2, #0
   1add0:	beq	1ada8 <argp_parse@@Base+0x2c54>
   1add4:	ldr	r8, [r4]
   1add8:	cmp	r5, r8
   1addc:	str	r3, [r4, #32]
   1ade0:	bne	1acd4 <argp_parse@@Base+0x2b80>
   1ade4:	b	1ad54 <argp_parse@@Base+0x2c00>
   1ade8:	ldrb	r2, [r3]
   1adec:	cmp	r2, #45	; 0x2d
   1adf0:	beq	1ae24 <argp_parse@@Base+0x2cd0>
   1adf4:	ldr	r2, [r4, #24]
   1adf8:	cmp	r2, #0
   1adfc:	beq	1ad6c <argp_parse@@Base+0x2c18>
   1ae00:	add	r8, r8, #1
   1ae04:	mov	r2, #1
   1ae08:	str	r8, [r4]
   1ae0c:	str	r3, [r4, #12]
   1ae10:	b	1ac84 <argp_parse@@Base+0x2b30>
   1ae14:	mov	r3, #1
   1ae18:	mov	r2, r3
   1ae1c:	str	r3, [r4]
   1ae20:	b	1abac <argp_parse@@Base+0x2a58>
   1ae24:	ldrb	r1, [r3, #1]
   1ae28:	cmp	r1, #0
   1ae2c:	beq	1adf4 <argp_parse@@Base+0x2ca0>
   1ae30:	cmp	sl, #0
   1ae34:	beq	1aebc <argp_parse@@Base+0x2d68>
   1ae38:	cmp	r1, #45	; 0x2d
   1ae3c:	beq	1b054 <argp_parse@@Base+0x2f00>
   1ae40:	ldr	r2, [sp, #76]	; 0x4c
   1ae44:	cmp	r2, #0
   1ae48:	beq	1aebc <argp_parse@@Base+0x2d68>
   1ae4c:	ldrb	r2, [r3, #2]
   1ae50:	cmp	r2, #0
   1ae54:	bne	1ae70 <argp_parse@@Base+0x2d1c>
   1ae58:	mov	r0, r6
   1ae5c:	str	r3, [sp, #24]
   1ae60:	bl	112e0 <strchr@plt>
   1ae64:	cmp	r0, #0
   1ae68:	ldr	r3, [sp, #24]
   1ae6c:	bne	1aebc <argp_parse@@Base+0x2d68>
   1ae70:	ldr	r2, [sp, #72]	; 0x48
   1ae74:	add	ip, r3, #1
   1ae78:	movw	r0, #52184	; 0xcbd8
   1ae7c:	movt	r0, #1
   1ae80:	mov	r3, sl
   1ae84:	ldr	r1, [sp, #76]	; 0x4c
   1ae88:	str	r2, [sp]
   1ae8c:	mov	r2, r6
   1ae90:	str	r0, [sp, #16]
   1ae94:	mov	r0, r5
   1ae98:	stmib	sp, {r1, r4, r7}
   1ae9c:	mov	r1, r9
   1aea0:	str	ip, [r4, #20]
   1aea4:	bl	1a608 <argp_parse@@Base+0x24b4>
   1aea8:	cmn	r0, #1
   1aeac:	mov	r2, r0
   1aeb0:	bne	1ac84 <argp_parse@@Base+0x2b30>
   1aeb4:	ldr	r3, [r4]
   1aeb8:	ldr	r3, [r9, r3, lsl #2]
   1aebc:	add	r3, r3, #1
   1aec0:	b	1ac20 <argp_parse@@Base+0x2acc>
   1aec4:	sub	ip, r1, #59	; 0x3b
   1aec8:	cmp	sl, #0
   1aecc:	clz	ip, ip
   1aed0:	lsr	ip, ip, #5
   1aed4:	moveq	ip, #0
   1aed8:	cmp	ip, #0
   1aedc:	beq	1ac7c <argp_parse@@Base+0x2b28>
   1aee0:	ldrb	r3, [r3, #1]
   1aee4:	cmp	r3, #0
   1aee8:	bne	1aefc <argp_parse@@Base+0x2da8>
   1aeec:	ldr	r3, [r4]
   1aef0:	cmp	r3, r5
   1aef4:	beq	1b088 <argp_parse@@Base+0x2f34>
   1aef8:	ldr	fp, [r9, r3, lsl #2]
   1aefc:	mov	lr, #0
   1af00:	movw	ip, #52260	; 0xcc24
   1af04:	movt	ip, #1
   1af08:	ldr	r3, [sp, #72]	; 0x48
   1af0c:	mov	r2, r6
   1af10:	mov	r1, r9
   1af14:	mov	r0, r5
   1af18:	str	r3, [sp]
   1af1c:	mov	r3, sl
   1af20:	str	r4, [sp, #8]
   1af24:	str	r7, [sp, #12]
   1af28:	str	ip, [sp, #16]
   1af2c:	str	fp, [r4, #20]
   1af30:	str	lr, [sp, #4]
   1af34:	str	lr, [r4, #12]
   1af38:	bl	1a608 <argp_parse@@Base+0x24b4>
   1af3c:	mov	r2, r0
   1af40:	b	1ac84 <argp_parse@@Base+0x2b30>
   1af44:	movw	r0, #52168	; 0xcbc8
   1af48:	movt	r0, #1
   1af4c:	bl	11244 <getenv@plt>
   1af50:	cmp	r0, #0
   1af54:	ldr	r3, [r4, #20]
   1af58:	bne	1abf0 <argp_parse@@Base+0x2a9c>
   1af5c:	mov	r2, #1
   1af60:	str	r2, [r4, #24]
   1af64:	b	1abf8 <argp_parse@@Base+0x2aa4>
   1af68:	ldrb	r1, [r0, #2]
   1af6c:	ldrb	r3, [r3, #1]
   1af70:	cmp	r1, #58	; 0x3a
   1af74:	beq	1b014 <argp_parse@@Base+0x2ec0>
   1af78:	cmp	r3, #0
   1af7c:	ldr	r3, [r4]
   1af80:	bne	1afe0 <argp_parse@@Base+0x2e8c>
   1af84:	cmp	r5, r3
   1af88:	beq	1b034 <argp_parse@@Base+0x2ee0>
   1af8c:	ldr	r1, [r9, r3, lsl #2]
   1af90:	add	r3, r3, #1
   1af94:	str	r3, [r4]
   1af98:	str	r1, [r4, #12]
   1af9c:	mov	r3, #0
   1afa0:	str	r3, [r4, #20]
   1afa4:	b	1ac84 <argp_parse@@Base+0x2b30>
   1afa8:	cmp	r8, r3
   1afac:	movne	r3, r8
   1afb0:	strne	r8, [r4, #28]
   1afb4:	b	1ad98 <argp_parse@@Base+0x2c44>
   1afb8:	mov	r8, r3
   1afbc:	b	1add8 <argp_parse@@Base+0x2c84>
   1afc0:	cmp	r7, #0
   1afc4:	bne	1aff0 <argp_parse@@Base+0x2e9c>
   1afc8:	mov	r2, #63	; 0x3f
   1afcc:	str	r8, [r4, #8]
   1afd0:	b	1ac84 <argp_parse@@Base+0x2b30>
   1afd4:	mov	r3, r8
   1afd8:	str	r8, [r4, #28]
   1afdc:	b	1ad2c <argp_parse@@Base+0x2bd8>
   1afe0:	add	r3, r3, #1
   1afe4:	str	r3, [r4]
   1afe8:	str	fp, [r4, #12]
   1afec:	b	1af9c <argp_parse@@Base+0x2e48>
   1aff0:	movw	r0, #54824	; 0xd628
   1aff4:	movt	r0, #2
   1aff8:	ldr	r2, [r9]
   1affc:	movw	r1, #52188	; 0xcbdc
   1b000:	movt	r1, #1
   1b004:	mov	r3, r8
   1b008:	ldr	r0, [r0]
   1b00c:	bl	112ec <fprintf@plt>
   1b010:	b	1afc8 <argp_parse@@Base+0x2e74>
   1b014:	cmp	r3, #0
   1b018:	streq	r3, [r4, #12]
   1b01c:	beq	1af9c <argp_parse@@Base+0x2e48>
   1b020:	ldr	r3, [r4]
   1b024:	str	fp, [r4, #12]
   1b028:	add	r3, r3, #1
   1b02c:	str	r3, [r4]
   1b030:	b	1af9c <argp_parse@@Base+0x2e48>
   1b034:	cmp	r7, #0
   1b038:	bne	1b0a8 <argp_parse@@Base+0x2f54>
   1b03c:	str	r8, [r4, #8]
   1b040:	ldrb	r3, [r6]
   1b044:	cmp	r3, #58	; 0x3a
   1b048:	moveq	r2, #58	; 0x3a
   1b04c:	movne	r2, #63	; 0x3f
   1b050:	b	1af9c <argp_parse@@Base+0x2e48>
   1b054:	ldr	r2, [sp, #72]	; 0x48
   1b058:	add	ip, r3, #2
   1b05c:	mov	r1, r9
   1b060:	mov	r3, sl
   1b064:	ldr	r0, [sp, #76]	; 0x4c
   1b068:	str	r2, [sp]
   1b06c:	mov	r2, r6
   1b070:	stmib	sp, {r0, r4, r7, fp}
   1b074:	mov	r0, r5
   1b078:	str	ip, [r4, #20]
   1b07c:	bl	1a608 <argp_parse@@Base+0x24b4>
   1b080:	mov	r2, r0
   1b084:	b	1ac84 <argp_parse@@Base+0x2b30>
   1b088:	cmp	r7, #0
   1b08c:	bne	1b0cc <argp_parse@@Base+0x2f78>
   1b090:	str	r8, [r4, #8]
   1b094:	ldrb	r3, [r6]
   1b098:	cmp	r3, #58	; 0x3a
   1b09c:	moveq	r2, #58	; 0x3a
   1b0a0:	movne	r2, #63	; 0x3f
   1b0a4:	b	1ac84 <argp_parse@@Base+0x2b30>
   1b0a8:	movw	r0, #54824	; 0xd628
   1b0ac:	movt	r0, #2
   1b0b0:	ldr	r2, [r9]
   1b0b4:	movw	r1, #52216	; 0xcbf8
   1b0b8:	movt	r1, #1
   1b0bc:	mov	r3, r8
   1b0c0:	ldr	r0, [r0]
   1b0c4:	bl	112ec <fprintf@plt>
   1b0c8:	b	1b03c <argp_parse@@Base+0x2ee8>
   1b0cc:	movw	r0, #54824	; 0xd628
   1b0d0:	movt	r0, #2
   1b0d4:	ldr	r2, [r9]
   1b0d8:	movw	r1, #52216	; 0xcbf8
   1b0dc:	movt	r1, #1
   1b0e0:	mov	r3, r8
   1b0e4:	ldr	r0, [r0]
   1b0e8:	bl	112ec <fprintf@plt>
   1b0ec:	b	1b090 <argp_parse@@Base+0x2f3c>
   1b0f0:	strd	r4, [sp, #-16]!
   1b0f4:	movw	r5, #54800	; 0xd610
   1b0f8:	movt	r5, #2
   1b0fc:	str	r6, [sp, #8]
   1b100:	movw	r4, #54940	; 0xd69c
   1b104:	movt	r4, #2
   1b108:	str	lr, [sp, #12]
   1b10c:	sub	sp, sp, #16
   1b110:	ldr	lr, [sp, #32]
   1b114:	ldr	ip, [r5]
   1b118:	ldr	r6, [sp, #36]	; 0x24
   1b11c:	str	lr, [sp]
   1b120:	ldr	lr, [sp, #40]	; 0x28
   1b124:	str	ip, [r4]
   1b128:	ldr	ip, [r5, #4]
   1b12c:	str	r6, [sp, #4]
   1b130:	str	r4, [sp, #8]
   1b134:	str	lr, [sp, #12]
   1b138:	str	ip, [r4, #4]
   1b13c:	bl	1ab58 <argp_parse@@Base+0x2a04>
   1b140:	ldr	ip, [r4]
   1b144:	movw	r3, #55012	; 0xd6e4
   1b148:	movt	r3, #2
   1b14c:	ldr	r1, [r4, #8]
   1b150:	ldr	r2, [r4, #12]
   1b154:	str	ip, [r5]
   1b158:	str	r1, [r5, #8]
   1b15c:	str	r2, [r3]
   1b160:	add	sp, sp, #16
   1b164:	ldrd	r4, [sp]
   1b168:	ldr	r6, [sp, #8]
   1b16c:	add	sp, sp, #12
   1b170:	pop	{pc}		; (ldr pc, [sp], #4)
   1b174:	mov	ip, #0
   1b178:	push	{lr}		; (str lr, [sp, #-4]!)
   1b17c:	mov	lr, #1
   1b180:	sub	sp, sp, #20
   1b184:	mov	r3, ip
   1b188:	str	ip, [sp]
   1b18c:	stmib	sp, {ip, lr}
   1b190:	bl	1b0f0 <argp_parse@@Base+0x2f9c>
   1b194:	add	sp, sp, #20
   1b198:	pop	{pc}		; (ldr pc, [sp], #4)
   1b19c:	umull	r2, r3, r1, r2
   1b1a0:	cmp	r3, #0
   1b1a4:	bne	1b1b0 <argp_parse@@Base+0x305c>
   1b1a8:	mov	r1, r2
   1b1ac:	b	19d04 <argp_parse@@Base+0x1bb0>
   1b1b0:	str	r4, [sp, #-8]!
   1b1b4:	str	lr, [sp, #4]
   1b1b8:	bl	112f8 <__errno_location@plt>
   1b1bc:	mov	r3, #12
   1b1c0:	ldr	r4, [sp]
   1b1c4:	add	sp, sp, #4
   1b1c8:	str	r3, [r0]
   1b1cc:	mov	r0, #0
   1b1d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b1d8:	mov	r7, r0
   1b1dc:	ldr	r6, [pc, #72]	; 1b22c <argp_parse@@Base+0x30d8>
   1b1e0:	ldr	r5, [pc, #72]	; 1b230 <argp_parse@@Base+0x30dc>
   1b1e4:	add	r6, pc, r6
   1b1e8:	add	r5, pc, r5
   1b1ec:	sub	r6, r6, r5
   1b1f0:	mov	r8, r1
   1b1f4:	mov	r9, r2
   1b1f8:	bl	110bc <calloc@plt-0x20>
   1b1fc:	asrs	r6, r6, #2
   1b200:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b204:	mov	r4, #0
   1b208:	add	r4, r4, #1
   1b20c:	ldr	r3, [r5], #4
   1b210:	mov	r2, r9
   1b214:	mov	r1, r8
   1b218:	mov	r0, r7
   1b21c:	blx	r3
   1b220:	cmp	r6, r4
   1b224:	bne	1b208 <argp_parse@@Base+0x30b4>
   1b228:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b22c:	andeq	r1, r1, r8, lsr #26
   1b230:	andeq	r1, r1, r0, lsr #26
   1b234:	bx	lr

Disassembly of section .fini:

0001b238 <.fini>:
   1b238:	push	{r3, lr}
   1b23c:	pop	{r3, pc}
