
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

000112bc <.init>:
   112bc:	push	{r3, lr}
   112c0:	bl	11684 <__assert_fail@plt+0x48>
   112c4:	pop	{r3, pc}

Disassembly of section .plt:

000112c8 <fdopen@plt-0x14>:
   112c8:	push	{lr}		; (str lr, [sp, #-4]!)
   112cc:	ldr	lr, [pc, #4]	; 112d8 <fdopen@plt-0x4>
   112d0:	add	lr, pc, lr
   112d4:	ldr	pc, [lr, #8]!
   112d8:	andeq	ip, r1, r8, lsr #26

000112dc <fdopen@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3368]!	; 0xd28

000112e8 <calloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3360]!	; 0xd20

000112f4 <fputs_unlocked@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3352]!	; 0xd18

00011300 <raise@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3344]!	; 0xd10

0001130c <gmtime_r@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3336]!	; 0xd08

00011318 <strcmp@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3328]!	; 0xd00

00011324 <strtol@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011330 <posix_fadvise64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3312]!	; 0xcf0

0001133c <mktime@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3304]!	; 0xce8

00011348 <fflush@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3296]!	; 0xce0

00011354 <wcwidth@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011360 <free@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3280]!	; 0xcd0

0001136c <clock_gettime@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3272]!	; 0xcc8

00011378 <_exit@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3264]!	; 0xcc0

00011384 <memcpy@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011390 <mbsinit@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3248]!	; 0xcb0

0001139c <getc_unlocked@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3240]!	; 0xca8

000113a8 <dcgettext@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3232]!	; 0xca0

000113b4 <realloc@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3224]!	; 0xc98

000113c0 <localtime_r@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3216]!	; 0xc90

000113cc <textdomain@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3208]!	; 0xc88

000113d8 <iswcntrl@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3200]!	; 0xc80

000113e4 <iswprint@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3192]!	; 0xc78

000113f0 <tzset@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3184]!	; 0xc70

000113fc <__fxstat64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3176]!	; 0xc68

00011408 <fwrite@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3168]!	; 0xc60

00011414 <lseek64@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3160]!	; 0xc58

00011420 <__ctype_get_mb_cur_max@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3152]!	; 0xc50

0001142c <__fpending@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3144]!	; 0xc48

00011438 <ferror_unlocked@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3136]!	; 0xc40

00011444 <mbrtowc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3128]!	; 0xc38

00011450 <error@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3120]!	; 0xc30

0001145c <getenv@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3112]!	; 0xc28

00011468 <malloc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3104]!	; 0xc20

00011474 <__libc_start_main@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3096]!	; 0xc18

00011480 <strftime@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3088]!	; 0xc10

0001148c <__freading@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3080]!	; 0xc08

00011498 <__ctype_tolower_loc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3072]!	; 0xc00

000114a4 <__ctype_toupper_loc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b0 <__gmon_start__@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3056]!	; 0xbf0

000114bc <getopt_long@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c8 <__ctype_b_loc@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d4 <exit@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e0 <bcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3024]!	; 0xbd0

000114ec <strlen@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f8 <strchr@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3008]!	; 0xbc0

00011504 <setenv@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011510 <ungetc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #2992]!	; 0xbb0

0001151c <__errno_location@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #2984]!	; 0xba8

00011528 <__sprintf_chk@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #2976]!	; 0xba0

00011534 <__cxa_atexit@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #2968]!	; 0xb98

00011540 <memset@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #2960]!	; 0xb90

0001154c <__printf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #2952]!	; 0xb88

00011558 <fileno@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #2944]!	; 0xb80

00011564 <strtoumax@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #2936]!	; 0xb78

00011570 <__fprintf_chk@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #2928]!	; 0xb70

0001157c <strtoimax@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #28, 20	; 0x1c000
   11584:	ldr	pc, [ip, #2920]!	; 0xb68

00011588 <fclose@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #28, 20	; 0x1c000
   11590:	ldr	pc, [ip, #2912]!	; 0xb60

00011594 <fseeko64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #28, 20	; 0x1c000
   1159c:	ldr	pc, [ip, #2904]!	; 0xb58

000115a0 <fcntl64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #28, 20	; 0x1c000
   115a8:	ldr	pc, [ip, #2896]!	; 0xb50

000115ac <setlocale@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #28, 20	; 0x1c000
   115b4:	ldr	pc, [ip, #2888]!	; 0xb48

000115b8 <strrchr@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #28, 20	; 0x1c000
   115c0:	ldr	pc, [ip, #2880]!	; 0xb40

000115c4 <nl_langinfo@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #28, 20	; 0x1c000
   115cc:	ldr	pc, [ip, #2872]!	; 0xb38

000115d0 <timegm@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #28, 20	; 0x1c000
   115d8:	ldr	pc, [ip, #2864]!	; 0xb30

000115dc <clearerr_unlocked@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #28, 20	; 0x1c000
   115e4:	ldr	pc, [ip, #2856]!	; 0xb28

000115e8 <fopen64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #28, 20	; 0x1c000
   115f0:	ldr	pc, [ip, #2848]!	; 0xb20

000115f4 <bindtextdomain@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #28, 20	; 0x1c000
   115fc:	ldr	pc, [ip, #2840]!	; 0xb18

00011600 <unsetenv@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #28, 20	; 0x1c000
   11608:	ldr	pc, [ip, #2832]!	; 0xb10

0001160c <strncmp@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #28, 20	; 0x1c000
   11614:	ldr	pc, [ip, #2824]!	; 0xb08

00011618 <abort@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #28, 20	; 0x1c000
   11620:	ldr	pc, [ip, #2816]!	; 0xb00

00011624 <close@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #28, 20	; 0x1c000
   1162c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011630 <putchar_unlocked@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #28, 20	; 0x1c000
   11638:	ldr	pc, [ip, #2800]!	; 0xaf0

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #28, 20	; 0x1c000
   11644:	ldr	pc, [ip, #2792]!	; 0xae8

Disassembly of section .text:

00011648 <.text>:
   11648:	mov	fp, #0
   1164c:	mov	lr, #0
   11650:	pop	{r1}		; (ldr r1, [sp], #4)
   11654:	mov	r2, sp
   11658:	push	{r2}		; (str r2, [sp, #-4]!)
   1165c:	push	{r0}		; (str r0, [sp, #-4]!)
   11660:	ldr	ip, [pc, #16]	; 11678 <__assert_fail@plt+0x3c>
   11664:	push	{ip}		; (str ip, [sp, #-4]!)
   11668:	ldr	r0, [pc, #12]	; 1167c <__assert_fail@plt+0x40>
   1166c:	ldr	r3, [pc, #12]	; 11680 <__assert_fail@plt+0x44>
   11670:	bl	11474 <__libc_start_main@plt>
   11674:	bl	11618 <abort@plt>
   11678:	ldrdeq	fp, [r1], -r4
   1167c:	andeq	r1, r1, r8, lsr r7
   11680:	andeq	fp, r1, r4, ror sp
   11684:	ldr	r3, [pc, #20]	; 116a0 <__assert_fail@plt+0x64>
   11688:	ldr	r2, [pc, #20]	; 116a4 <__assert_fail@plt+0x68>
   1168c:	add	r3, pc, r3
   11690:	ldr	r2, [r3, r2]
   11694:	cmp	r2, #0
   11698:	bxeq	lr
   1169c:	b	114b0 <__gmon_start__@plt>
   116a0:	andeq	ip, r1, ip, ror #18
   116a4:	andeq	r0, r0, r0, lsr r1
   116a8:	ldr	r0, [pc, #24]	; 116c8 <__assert_fail@plt+0x8c>
   116ac:	ldr	r3, [pc, #24]	; 116cc <__assert_fail@plt+0x90>
   116b0:	cmp	r3, r0
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0x94>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:	andeq	lr, r2, r0, asr #3
   116cc:	andeq	lr, r2, r0, asr #3
   116d0:	andeq	r0, r0, r0
   116d4:	ldr	r0, [pc, #36]	; 11700 <__assert_fail@plt+0xc4>
   116d8:	ldr	r1, [pc, #36]	; 11704 <__assert_fail@plt+0xc8>
   116dc:	sub	r1, r1, r0
   116e0:	asr	r1, r1, #2
   116e4:	add	r1, r1, r1, lsr #31
   116e8:	asrs	r1, r1, #1
   116ec:	bxeq	lr
   116f0:	ldr	r3, [pc, #16]	; 11708 <__assert_fail@plt+0xcc>
   116f4:	cmp	r3, #0
   116f8:	bxeq	lr
   116fc:	bx	r3
   11700:	andeq	lr, r2, r0, asr #3
   11704:	andeq	lr, r2, r0, asr #3
   11708:	andeq	r0, r0, r0
   1170c:	push	{r4, lr}
   11710:	ldr	r4, [pc, #24]	; 11730 <__assert_fail@plt+0xf4>
   11714:	ldrb	r3, [r4]
   11718:	cmp	r3, #0
   1171c:	popne	{r4, pc}
   11720:	bl	116a8 <__assert_fail@plt+0x6c>
   11724:	mov	r3, #1
   11728:	strb	r3, [r4]
   1172c:	pop	{r4, pc}
   11730:	andeq	lr, r2, r4, ror #3
   11734:	b	116d4 <__assert_fail@plt+0x98>
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	add	fp, sp, #28
   11740:	sub	sp, sp, #44	; 0x2c
   11744:	mov	r6, r1
   11748:	mov	r5, r0
   1174c:	mov	r4, #0
   11750:	str	r4, [fp, #-32]	; 0xffffffe0
   11754:	ldr	r0, [r1]
   11758:	bl	17788 <__assert_fail@plt+0x614c>
   1175c:	movw	r1, #53460	; 0xd0d4
   11760:	movt	r1, #1
   11764:	mov	r0, #6
   11768:	bl	115ac <setlocale@plt>
   1176c:	movw	r7, #48959	; 0xbf3f
   11770:	movt	r7, #1
   11774:	movw	r1, #48652	; 0xbe0c
   11778:	movt	r1, #1
   1177c:	mov	r0, r7
   11780:	bl	115f4 <bindtextdomain@plt>
   11784:	mov	r0, r7
   11788:	bl	113cc <textdomain@plt>
   1178c:	movw	r0, #22100	; 0x5654
   11790:	movt	r0, #1
   11794:	bl	1bdd8 <__assert_fail@plt+0xa79c>
   11798:	cmp	r5, #2
   1179c:	blt	117b0 <__assert_fail@plt+0x174>
   117a0:	sub	r0, r5, #1
   117a4:	mov	r1, #4
   117a8:	bl	19e9c <__assert_fail@plt+0x8860>
   117ac:	mov	r4, r0
   117b0:	mvn	r9, #0
   117b4:	str	r9, [sp, #36]	; 0x24
   117b8:	add	r0, sp, #36	; 0x24
   117bc:	str	r0, [sp]
   117c0:	movw	r2, #54024	; 0xd308
   117c4:	movt	r2, #1
   117c8:	movw	r3, #54080	; 0xd340
   117cc:	movt	r3, #1
   117d0:	mov	r0, r5
   117d4:	mov	r1, r6
   117d8:	bl	114bc <getopt_long@plt>
   117dc:	cmn	r0, #1
   117e0:	movw	r1, #57848	; 0xe1f8
   117e4:	movt	r1, #2
   117e8:	movw	r8, #57862	; 0xe206
   117ec:	movt	r8, #2
   117f0:	beq	121dc <__assert_fail@plt+0xba0>
   117f4:	mov	sl, r0
   117f8:	mov	r8, #0
   117fc:	mov	r0, #0
   11800:	str	r0, [sp, #28]
   11804:	mov	r7, #0
   11808:	mov	r0, #0
   1180c:	str	r0, [sp, #16]
   11810:	mov	r0, #0
   11814:	str	r0, [sp, #20]
   11818:	mov	r0, #0
   1181c:	str	r0, [sp, #24]
   11820:	b	11888 <__assert_fail@plt+0x24c>
   11824:	ldr	r0, [sp, #28]
   11828:	sub	r1, fp, #32
   1182c:	bl	19ebc <__assert_fail@plt+0x8880>
   11830:	mov	r1, r0
   11834:	strb	sl, [r1, r8]
   11838:	mov	r0, #0
   1183c:	str	r1, [sp, #28]
   11840:	strb	r0, [r1, r6]
   11844:	mov	r8, r6
   11848:	mov	r6, r5
   1184c:	mov	r5, r9
   11850:	mvn	r9, #0
   11854:	str	r9, [sp, #36]	; 0x24
   11858:	add	r0, sp, #36	; 0x24
   1185c:	str	r0, [sp]
   11860:	mov	r0, r5
   11864:	mov	r1, r6
   11868:	movw	r2, #54024	; 0xd308
   1186c:	movt	r2, #1
   11870:	movw	r3, #54080	; 0xd340
   11874:	movt	r3, #1
   11878:	bl	114bc <getopt_long@plt>
   1187c:	mov	sl, r0
   11880:	cmn	r0, #1
   11884:	beq	12198 <__assert_fail@plt+0xb5c>
   11888:	sub	r0, sl, #48	; 0x30
   1188c:	cmp	r0, #9
   11890:	bhi	118b4 <__assert_fail@plt+0x278>
   11894:	mov	r9, r5
   11898:	mov	r5, r6
   1189c:	add	r6, r8, #1
   118a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   118a4:	cmp	r6, r0
   118a8:	bcs	11824 <__assert_fail@plt+0x1e8>
   118ac:	ldr	r1, [sp, #28]
   118b0:	b	11834 <__assert_fail@plt+0x1f8>
   118b4:	add	r0, sl, #3
   118b8:	cmp	r0, #260	; 0x104
   118bc:	bhi	12464 <__assert_fail@plt+0xe28>
   118c0:	add	r1, pc, #0
   118c4:	ldr	pc, [r1, r0, lsl #2]
   118c8:	andeq	r2, r1, ip, ror #8
   118cc:	andeq	r2, r1, r0, asr #9
   118d0:	andeq	r2, r1, r4, ror #8
   118d4:	andeq	r2, r1, r4, ror #8
   118d8:	andeq	r2, r1, r4, asr #32
   118dc:	andeq	r2, r1, r4, ror #8
   118e0:	andeq	r2, r1, r4, ror #8
   118e4:	andeq	r2, r1, r4, ror #8
   118e8:	andeq	r2, r1, r4, ror #8
   118ec:	andeq	r2, r1, r4, ror #8
   118f0:	andeq	r2, r1, r4, ror #8
   118f4:	andeq	r2, r1, r4, ror #8
   118f8:	andeq	r2, r1, r4, ror #8
   118fc:	andeq	r2, r1, r4, ror #8
   11900:	andeq	r2, r1, r4, ror #8
   11904:	andeq	r2, r1, r4, ror #8
   11908:	andeq	r2, r1, r4, ror #8
   1190c:	andeq	r2, r1, r4, ror #8
   11910:	andeq	r2, r1, r4, ror #8
   11914:	andeq	r2, r1, r4, ror #8
   11918:	andeq	r2, r1, r4, ror #8
   1191c:	andeq	r2, r1, r4, ror #8
   11920:	andeq	r2, r1, r4, ror #8
   11924:	andeq	r2, r1, r4, ror #8
   11928:	andeq	r2, r1, r4, ror #8
   1192c:	andeq	r2, r1, r4, ror #8
   11930:	andeq	r2, r1, r4, ror #8
   11934:	andeq	r2, r1, r4, ror #8
   11938:	andeq	r2, r1, r4, ror #8
   1193c:	andeq	r2, r1, r4, ror #8
   11940:	andeq	r2, r1, r4, ror #8
   11944:	andeq	r2, r1, r4, ror #8
   11948:	andeq	r2, r1, r4, ror #8
   1194c:	andeq	r2, r1, r4, ror #8
   11950:	andeq	r2, r1, r4, ror #8
   11954:	andeq	r2, r1, r4, ror #8
   11958:	andeq	r2, r1, r4, ror #8
   1195c:	andeq	r2, r1, r4, ror #8
   11960:	andeq	r2, r1, r4, ror #8
   11964:	andeq	r2, r1, r4, ror #8
   11968:	andeq	r2, r1, r4, ror #8
   1196c:	andeq	r2, r1, r4, ror #8
   11970:	andeq	r2, r1, r4, ror #8
   11974:	andeq	r2, r1, r4, ror #8
   11978:	andeq	r2, r1, r4, ror #8
   1197c:	andeq	r2, r1, r4, ror #8
   11980:	andeq	r2, r1, r4, ror #8
   11984:	andeq	r2, r1, r4, ror #8
   11988:	andeq	r2, r1, r4, ror #8
   1198c:	andeq	r2, r1, r4, ror #8
   11990:	andeq	r2, r1, r4, ror #8
   11994:	andeq	r2, r1, r4, ror #8
   11998:	andeq	r2, r1, r4, ror #8
   1199c:	andeq	r2, r1, r4, ror #8
   119a0:	andeq	r2, r1, r4, ror #8
   119a4:	andeq	r2, r1, r4, ror #8
   119a8:	andeq	r2, r1, r4, ror #8
   119ac:	andeq	r2, r1, r4, ror #8
   119b0:	andeq	r2, r1, r4, ror #8
   119b4:	andeq	r2, r1, r4, ror #8
   119b8:	andeq	r2, r1, r4, ror #8
   119bc:	andeq	r2, r1, r4, ror #8
   119c0:	andeq	r2, r1, r4, ror #8
   119c4:	andeq	r2, r1, r4, ror #8
   119c8:	andeq	r2, r1, r4, ror #8
   119cc:	andeq	r2, r1, r4, ror #8
   119d0:	andeq	r2, r1, r4, ror #8
   119d4:	andeq	r2, r1, r4, ror #8
   119d8:	andeq	r2, r1, r4, ror #8
   119dc:	andeq	r2, r1, r4, ror #8
   119e0:	andeq	r2, r1, r4, ror #8
   119e4:	andeq	r1, r1, r8, lsr #31
   119e8:	andeq	r2, r1, r4, ror #8
   119ec:	ldrdeq	r1, [r1], -ip
   119f0:	andeq	r2, r1, r4, ror #8
   119f4:	andeq	r2, r1, r4, ror #8
   119f8:	andeq	r2, r1, r4, ror #8
   119fc:	andeq	r2, r1, r4, lsr #1
   11a00:	andeq	r2, r1, r4, ror #8
   11a04:	andeq	r2, r1, r4, ror #8
   11a08:	andeq	r2, r1, r4, ror #8
   11a0c:	andeq	r1, r1, r4, ror #29
   11a10:	andeq	r2, r1, r4, ror #8
   11a14:	andeq	r2, r1, r4, ror #8
   11a18:	andeq	r2, r1, r4, ror #8
   11a1c:	andeq	r2, r1, r4, ror #8
   11a20:	andeq	r1, r1, ip, lsl #29
   11a24:	andeq	r1, r1, r4, lsr pc
   11a28:	andeq	r2, r1, r4, ror #8
   11a2c:	andeq	r2, r1, r4, ror #8
   11a30:	andeq	r1, r1, r0, lsr #27
   11a34:	andeq	r2, r1, r4, ror #8
   11a38:	andeq	r2, r1, r4, ror #8
   11a3c:	andeq	r2, r1, r4, ror #8
   11a40:	andeq	r2, r1, r4, ror #8
   11a44:	andeq	r2, r1, r4, ror #8
   11a48:	andeq	r2, r1, r4, ror #8
   11a4c:	andeq	r2, r1, r4, ror #8
   11a50:	andeq	r2, r1, r4, ror #8
   11a54:	andeq	r2, r1, r4, ror #8
   11a58:	strheq	r2, [r1], -ip
   11a5c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11a60:	andeq	r1, r1, r0, lsl #29
   11a64:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11a68:	andeq	r2, r1, r8, lsl #2
   11a6c:	ldrdeq	r1, [r1], -ip
   11a70:	andeq	r2, r1, r4, ror #8
   11a74:	andeq	r1, r1, r8, asr pc
   11a78:	andeq	r2, r1, r0, asr #2
   11a7c:	andeq	r2, r1, r4, ror #8
   11a80:	andeq	r2, r1, r4, ror #8
   11a84:	andeq	r2, r1, r4
   11a88:	andeq	r1, r1, r4, lsl #27
   11a8c:	andeq	r1, r1, ip, lsr lr
   11a90:	andeq	r1, r1, r4, asr #31
   11a94:	andeq	r2, r1, r4, ror #8
   11a98:	andeq	r2, r1, r4, ror #8
   11a9c:	strdeq	r1, [r1], -r4
   11aa0:	andeq	r1, r1, r0, lsl #28
   11aa4:	andeq	r1, r1, r4, ror pc
   11aa8:	andeq	r2, r1, r4, ror #8
   11aac:	strheq	r2, [r1], -r0
   11ab0:	andeq	r1, r1, r4, lsl sp
   11ab4:	andeq	r2, r1, r4, ror #8
   11ab8:	andeq	r2, r1, r4, ror #8
   11abc:	andeq	r2, r1, r4, ror #8
   11ac0:	andeq	r2, r1, r4, ror #8
   11ac4:	andeq	r2, r1, r4, ror #8
   11ac8:	andeq	r2, r1, r4, ror #8
   11acc:	andeq	r2, r1, r4, ror #8
   11ad0:	andeq	r2, r1, r4, ror #8
   11ad4:	andeq	r2, r1, r4, ror #8
   11ad8:	andeq	r2, r1, r4, ror #8
   11adc:	andeq	r2, r1, r4, ror #8
   11ae0:	andeq	r2, r1, r4, ror #8
   11ae4:	andeq	r2, r1, r4, ror #8
   11ae8:	andeq	r2, r1, r4, ror #8
   11aec:	andeq	r2, r1, r4, ror #8
   11af0:	andeq	r2, r1, r4, ror #8
   11af4:	andeq	r2, r1, r4, ror #8
   11af8:	andeq	r2, r1, r4, ror #8
   11afc:	andeq	r2, r1, r4, ror #8
   11b00:	andeq	r2, r1, r4, ror #8
   11b04:	andeq	r2, r1, r4, ror #8
   11b08:	andeq	r2, r1, r4, ror #8
   11b0c:	andeq	r2, r1, r4, ror #8
   11b10:	andeq	r2, r1, r4, ror #8
   11b14:	andeq	r2, r1, r4, ror #8
   11b18:	andeq	r2, r1, r4, ror #8
   11b1c:	andeq	r2, r1, r4, ror #8
   11b20:	andeq	r2, r1, r4, ror #8
   11b24:	andeq	r2, r1, r4, ror #8
   11b28:	andeq	r2, r1, r4, ror #8
   11b2c:	andeq	r2, r1, r4, ror #8
   11b30:	andeq	r2, r1, r4, ror #8
   11b34:	andeq	r2, r1, r4, ror #8
   11b38:	andeq	r2, r1, r4, ror #8
   11b3c:	andeq	r2, r1, r4, ror #8
   11b40:	andeq	r2, r1, r4, ror #8
   11b44:	andeq	r2, r1, r4, ror #8
   11b48:	andeq	r2, r1, r4, ror #8
   11b4c:	andeq	r2, r1, r4, ror #8
   11b50:	andeq	r2, r1, r4, ror #8
   11b54:	andeq	r2, r1, r4, ror #8
   11b58:	andeq	r2, r1, r4, ror #8
   11b5c:	andeq	r2, r1, r4, ror #8
   11b60:	andeq	r2, r1, r4, ror #8
   11b64:	andeq	r2, r1, r4, ror #8
   11b68:	andeq	r2, r1, r4, ror #8
   11b6c:	andeq	r2, r1, r4, ror #8
   11b70:	andeq	r2, r1, r4, ror #8
   11b74:	andeq	r2, r1, r4, ror #8
   11b78:	andeq	r2, r1, r4, ror #8
   11b7c:	andeq	r2, r1, r4, ror #8
   11b80:	andeq	r2, r1, r4, ror #8
   11b84:	andeq	r2, r1, r4, ror #8
   11b88:	andeq	r2, r1, r4, ror #8
   11b8c:	andeq	r2, r1, r4, ror #8
   11b90:	andeq	r2, r1, r4, ror #8
   11b94:	andeq	r2, r1, r4, ror #8
   11b98:	andeq	r2, r1, r4, ror #8
   11b9c:	andeq	r2, r1, r4, ror #8
   11ba0:	andeq	r2, r1, r4, ror #8
   11ba4:	andeq	r2, r1, r4, ror #8
   11ba8:	andeq	r2, r1, r4, ror #8
   11bac:	andeq	r2, r1, r4, ror #8
   11bb0:	andeq	r2, r1, r4, ror #8
   11bb4:	andeq	r2, r1, r4, ror #8
   11bb8:	andeq	r2, r1, r4, ror #8
   11bbc:	andeq	r2, r1, r4, ror #8
   11bc0:	andeq	r2, r1, r4, ror #8
   11bc4:	andeq	r2, r1, r4, ror #8
   11bc8:	andeq	r2, r1, r4, ror #8
   11bcc:	andeq	r2, r1, r4, ror #8
   11bd0:	andeq	r2, r1, r4, ror #8
   11bd4:	andeq	r2, r1, r4, ror #8
   11bd8:	andeq	r2, r1, r4, ror #8
   11bdc:	andeq	r2, r1, r4, ror #8
   11be0:	andeq	r2, r1, r4, ror #8
   11be4:	andeq	r2, r1, r4, ror #8
   11be8:	andeq	r2, r1, r4, ror #8
   11bec:	andeq	r2, r1, r4, ror #8
   11bf0:	andeq	r2, r1, r4, ror #8
   11bf4:	andeq	r2, r1, r4, ror #8
   11bf8:	andeq	r2, r1, r4, ror #8
   11bfc:	andeq	r2, r1, r4, ror #8
   11c00:	andeq	r2, r1, r4, ror #8
   11c04:	andeq	r2, r1, r4, ror #8
   11c08:	andeq	r2, r1, r4, ror #8
   11c0c:	andeq	r2, r1, r4, ror #8
   11c10:	andeq	r2, r1, r4, ror #8
   11c14:	andeq	r2, r1, r4, ror #8
   11c18:	andeq	r2, r1, r4, ror #8
   11c1c:	andeq	r2, r1, r4, ror #8
   11c20:	andeq	r2, r1, r4, ror #8
   11c24:	andeq	r2, r1, r4, ror #8
   11c28:	andeq	r2, r1, r4, ror #8
   11c2c:	andeq	r2, r1, r4, ror #8
   11c30:	andeq	r2, r1, r4, ror #8
   11c34:	andeq	r2, r1, r4, ror #8
   11c38:	andeq	r2, r1, r4, ror #8
   11c3c:	andeq	r2, r1, r4, ror #8
   11c40:	andeq	r2, r1, r4, ror #8
   11c44:	andeq	r2, r1, r4, ror #8
   11c48:	andeq	r2, r1, r4, ror #8
   11c4c:	andeq	r2, r1, r4, ror #8
   11c50:	andeq	r2, r1, r4, ror #8
   11c54:	andeq	r2, r1, r4, ror #8
   11c58:	andeq	r2, r1, r4, ror #8
   11c5c:	andeq	r2, r1, r4, ror #8
   11c60:	andeq	r2, r1, r4, ror #8
   11c64:	andeq	r2, r1, r4, ror #8
   11c68:	andeq	r2, r1, r4, ror #8
   11c6c:	andeq	r2, r1, r4, ror #8
   11c70:	andeq	r2, r1, r4, ror #8
   11c74:	andeq	r2, r1, r4, ror #8
   11c78:	andeq	r2, r1, r4, ror #8
   11c7c:	andeq	r2, r1, r4, ror #8
   11c80:	andeq	r2, r1, r4, ror #8
   11c84:	andeq	r2, r1, r4, ror #8
   11c88:	andeq	r2, r1, r4, ror #8
   11c8c:	andeq	r2, r1, r4, ror #8
   11c90:	andeq	r2, r1, r4, ror #8
   11c94:	andeq	r2, r1, r4, ror #8
   11c98:	andeq	r2, r1, r4, ror #8
   11c9c:	andeq	r2, r1, r4, ror #8
   11ca0:	andeq	r2, r1, r4, ror #8
   11ca4:	andeq	r2, r1, r4, ror #8
   11ca8:	andeq	r2, r1, r4, ror #8
   11cac:	andeq	r2, r1, r4, ror #8
   11cb0:	andeq	r2, r1, r4, ror #8
   11cb4:	andeq	r2, r1, r4, ror #8
   11cb8:	andeq	r2, r1, r4, ror #8
   11cbc:	andeq	r2, r1, r4, ror #8
   11cc0:	andeq	r2, r1, r4, ror #8
   11cc4:	andeq	r2, r1, r4, ror #8
   11cc8:	andeq	r2, r1, r4, ror #8
   11ccc:	andeq	r2, r1, r4, ror #8
   11cd0:	andeq	r2, r1, r4, ror #8
   11cd4:	andeq	r1, r1, r8, ror #25
   11cd8:	ldrdeq	r2, [r1], -r8
   11cdc:	movw	r0, #57853	; 0xe1fd
   11ce0:	movt	r0, #2
   11ce4:	b	12174 <__assert_fail@plt+0xb38>
   11ce8:	movw	r0, #57824	; 0xe1e0
   11cec:	movt	r0, #2
   11cf0:	ldr	r0, [r0]
   11cf4:	bl	1268c <__assert_fail@plt+0x1050>
   11cf8:	ldr	r0, [sp, #28]
   11cfc:	bl	15934 <__assert_fail@plt+0x42f8>
   11d00:	mov	r1, #0
   11d04:	mov	r0, #0
   11d08:	str	r0, [sp, #28]
   11d0c:	str	r1, [fp, #-32]	; 0xffffffe0
   11d10:	b	1217c <__assert_fail@plt+0xb40>
   11d14:	movw	r0, #57824	; 0xe1e0
   11d18:	movt	r0, #2
   11d1c:	ldr	sl, [r0]
   11d20:	mov	r8, #0
   11d24:	movw	r1, #48862	; 0xbede
   11d28:	movt	r1, #1
   11d2c:	mov	r0, #0
   11d30:	mov	r2, #5
   11d34:	bl	113a8 <dcgettext@plt>
   11d38:	mov	r3, r0
   11d3c:	mov	r0, #1
   11d40:	str	r0, [sp, #24]
   11d44:	add	r2, sp, #32
   11d48:	mov	r0, sl
   11d4c:	mov	r1, #1
   11d50:	bl	12794 <__assert_fail@plt+0x1158>
   11d54:	movw	r0, #57883	; 0xe21b
   11d58:	movt	r0, #2
   11d5c:	ldrb	r0, [r0]
   11d60:	cmp	r0, #0
   11d64:	bne	11d78 <__assert_fail@plt+0x73c>
   11d68:	ldr	r0, [sp, #32]
   11d6c:	movw	r1, #57700	; 0xe164
   11d70:	movt	r1, #2
   11d74:	str	r0, [r1]
   11d78:	mov	r0, #1
   11d7c:	str	r0, [sp, #20]
   11d80:	b	11854 <__assert_fail@plt+0x218>
   11d84:	movw	r0, #57841	; 0xe1f1
   11d88:	movt	r0, #2
   11d8c:	mov	r1, #1
   11d90:	strb	r1, [r0]
   11d94:	movw	r0, #57862	; 0xe206
   11d98:	movt	r0, #2
   11d9c:	b	12178 <__assert_fail@plt+0xb3c>
   11da0:	movw	r0, #57883	; 0xe21b
   11da4:	movt	r0, #2
   11da8:	mov	r1, #1
   11dac:	strb	r1, [r0]
   11db0:	movw	r0, #57824	; 0xe1e0
   11db4:	movt	r0, #2
   11db8:	ldr	sl, [r0]
   11dbc:	mov	r0, #0
   11dc0:	str	r0, [sp, #20]
   11dc4:	movw	r1, #48907	; 0xbf0b
   11dc8:	movt	r1, #1
   11dcc:	mov	r0, #0
   11dd0:	mov	r2, #5
   11dd4:	bl	113a8 <dcgettext@plt>
   11dd8:	mov	r3, r0
   11ddc:	movw	r2, #57700	; 0xe164
   11de0:	movt	r2, #2
   11de4:	mov	r0, sl
   11de8:	mov	r1, #1
   11dec:	bl	12794 <__assert_fail@plt+0x1158>
   11df0:	b	1217c <__assert_fail@plt+0xb40>
   11df4:	movw	r0, #57872	; 0xe210
   11df8:	movt	r0, #2
   11dfc:	b	12174 <__assert_fail@plt+0xb38>
   11e00:	movw	r0, #57824	; 0xe1e0
   11e04:	movt	r0, #2
   11e08:	ldr	r0, [r0]
   11e0c:	mov	r8, #0
   11e10:	cmp	r0, #0
   11e14:	beq	12184 <__assert_fail@plt+0xb48>
   11e18:	mov	r1, #1
   11e1c:	str	r1, [sp, #24]
   11e20:	movw	r1, #57873	; 0xe211
   11e24:	movt	r1, #2
   11e28:	ldrb	r1, [r1]
   11e2c:	cmp	r1, #0
   11e30:	bne	1218c <__assert_fail@plt+0xb50>
   11e34:	bl	127dc <__assert_fail@plt+0x11a0>
   11e38:	b	1218c <__assert_fail@plt+0xb50>
   11e3c:	movw	r0, #57863	; 0xe207
   11e40:	movt	r0, #2
   11e44:	mov	r1, #1
   11e48:	strb	r1, [r0]
   11e4c:	movw	r0, #57824	; 0xe1e0
   11e50:	movt	r0, #2
   11e54:	ldr	r0, [r0]
   11e58:	mov	r8, #0
   11e5c:	cmp	r0, #0
   11e60:	beq	11854 <__assert_fail@plt+0x218>
   11e64:	movw	r2, #57684	; 0xe154
   11e68:	movt	r2, #2
   11e6c:	movw	r3, #57688	; 0xe158
   11e70:	movt	r3, #2
   11e74:	mov	r1, #110	; 0x6e
   11e78:	bl	126d8 <__assert_fail@plt+0x109c>
   11e7c:	b	11854 <__assert_fail@plt+0x218>
   11e80:	movw	r0, #57843	; 0xe1f3
   11e84:	movt	r0, #2
   11e88:	b	12174 <__assert_fail@plt+0xb38>
   11e8c:	movw	r0, #57876	; 0xe214
   11e90:	movt	r0, #2
   11e94:	mov	r1, #0
   11e98:	str	r1, [r0]
   11e9c:	movw	r0, #57696	; 0xe160
   11ea0:	movt	r0, #2
   11ea4:	movw	r1, #53460	; 0xd0d4
   11ea8:	movt	r1, #1
   11eac:	str	r1, [r0]
   11eb0:	movw	r0, #57873	; 0xe211
   11eb4:	movt	r0, #2
   11eb8:	mov	r1, #1
   11ebc:	strb	r1, [r0]
   11ec0:	movw	r0, #57824	; 0xe1e0
   11ec4:	movt	r0, #2
   11ec8:	ldr	r0, [r0]
   11ecc:	cmp	r0, #0
   11ed0:	beq	11ed8 <__assert_fail@plt+0x89c>
   11ed4:	bl	127dc <__assert_fail@plt+0x11a0>
   11ed8:	mov	r0, #0
   11edc:	str	r0, [sp, #16]
   11ee0:	b	1217c <__assert_fail@plt+0xb40>
   11ee4:	movw	r0, #57864	; 0xe208
   11ee8:	movt	r0, #2
   11eec:	mov	r1, #1
   11ef0:	strb	r1, [r0]
   11ef4:	movw	r0, #57824	; 0xe1e0
   11ef8:	movt	r0, #2
   11efc:	ldr	sl, [r0]
   11f00:	mov	r8, #0
   11f04:	movw	r1, #48789	; 0xbe95
   11f08:	movt	r1, #1
   11f0c:	mov	r0, #0
   11f10:	mov	r2, #5
   11f14:	bl	113a8 <dcgettext@plt>
   11f18:	mov	r3, r0
   11f1c:	movw	r2, #57692	; 0xe15c
   11f20:	movt	r2, #2
   11f24:	mov	r0, sl
   11f28:	mov	r1, #-2147483648	; 0x80000000
   11f2c:	bl	12794 <__assert_fail@plt+0x1158>
   11f30:	b	11854 <__assert_fail@plt+0x218>
   11f34:	movw	r0, #57881	; 0xe219
   11f38:	movt	r0, #2
   11f3c:	mov	r8, #0
   11f40:	strb	r8, [r0]
   11f44:	movw	r0, #57880	; 0xe218
   11f48:	movt	r0, #2
   11f4c:	mov	r1, #1
   11f50:	strb	r1, [r0]
   11f54:	b	11854 <__assert_fail@plt+0x218>
   11f58:	movw	r0, #57824	; 0xe1e0
   11f5c:	movt	r0, #2
   11f60:	ldr	r0, [r0]
   11f64:	movw	r1, #57856	; 0xe200
   11f68:	movt	r1, #2
   11f6c:	str	r0, [r1]
   11f70:	b	1217c <__assert_fail@plt+0xb40>
   11f74:	movw	r0, #57881	; 0xe219
   11f78:	movt	r0, #2
   11f7c:	mov	r1, #1
   11f80:	strb	r1, [r0]
   11f84:	movw	r0, #57880	; 0xe218
   11f88:	movt	r0, #2
   11f8c:	b	12178 <__assert_fail@plt+0xb3c>
   11f90:	movw	r0, #57844	; 0xe1f4
   11f94:	movt	r0, #2
   11f98:	b	12174 <__assert_fail@plt+0xb38>
   11f9c:	movw	r0, #57842	; 0xe1f2
   11fa0:	movt	r0, #2
   11fa4:	b	12174 <__assert_fail@plt+0xb38>
   11fa8:	movw	r0, #57824	; 0xe1e0
   11fac:	movt	r0, #2
   11fb0:	ldr	r0, [r0]
   11fb4:	movw	r1, #57848	; 0xe1f8
   11fb8:	movt	r1, #2
   11fbc:	str	r0, [r1]
   11fc0:	b	1217c <__assert_fail@plt+0xb40>
   11fc4:	movw	r0, #57824	; 0xe1e0
   11fc8:	movt	r0, #2
   11fcc:	ldr	sl, [r0]
   11fd0:	mov	r8, #0
   11fd4:	movw	r1, #48830	; 0xbebe
   11fd8:	movt	r1, #1
   11fdc:	mov	r0, #0
   11fe0:	mov	r2, #5
   11fe4:	bl	113a8 <dcgettext@plt>
   11fe8:	mov	r3, r0
   11fec:	movw	r2, #57868	; 0xe20c
   11ff0:	movt	r2, #2
   11ff4:	mov	r0, sl
   11ff8:	mov	r1, #0
   11ffc:	bl	12794 <__assert_fail@plt+0x1158>
   12000:	b	11854 <__assert_fail@plt+0x218>
   12004:	movw	r0, #57824	; 0xe1e0
   12008:	movt	r0, #2
   1200c:	ldr	sl, [r0]
   12010:	mov	r8, #0
   12014:	movw	r1, #48748	; 0xbe6c
   12018:	movt	r1, #1
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	bl	113a8 <dcgettext@plt>
   12028:	mov	r3, r0
   1202c:	movw	r2, #57680	; 0xe150
   12030:	movt	r2, #2
   12034:	mov	r0, sl
   12038:	mov	r1, #1
   1203c:	bl	12794 <__assert_fail@plt+0x1158>
   12040:	b	11854 <__assert_fail@plt+0x218>
   12044:	movw	r0, #57832	; 0xe1e8
   12048:	movt	r0, #2
   1204c:	ldrd	r0, [r0]
   12050:	orrs	r0, r0, r1
   12054:	bne	1208c <__assert_fail@plt+0xa50>
   12058:	movw	r0, #57824	; 0xe1e0
   1205c:	movt	r0, #2
   12060:	ldr	r0, [r0]
   12064:	ldrb	r1, [r0]
   12068:	cmp	r1, #43	; 0x2b
   1206c:	bne	1208c <__assert_fail@plt+0xa50>
   12070:	add	r2, r0, #1
   12074:	mvn	r0, #1
   12078:	mov	r1, #43	; 0x2b
   1207c:	bl	12564 <__assert_fail@plt+0xf28>
   12080:	mov	r8, #0
   12084:	cmp	r0, #0
   12088:	bne	11854 <__assert_fail@plt+0x218>
   1208c:	movw	r0, #57824	; 0xe1e0
   12090:	movt	r0, #2
   12094:	ldr	r0, [r0]
   12098:	str	r0, [r4, r7, lsl #2]
   1209c:	add	r7, r7, #1
   120a0:	b	1217c <__assert_fail@plt+0xb40>
   120a4:	movw	r0, #57861	; 0xe205
   120a8:	movt	r0, #2
   120ac:	b	12174 <__assert_fail@plt+0xb38>
   120b0:	movw	r0, #57882	; 0xe21a
   120b4:	movt	r0, #2
   120b8:	b	12174 <__assert_fail@plt+0xb38>
   120bc:	movw	r0, #57841	; 0xe1f1
   120c0:	movt	r0, #2
   120c4:	mov	r1, #1
   120c8:	strb	r1, [r0]
   120cc:	movw	r0, #57840	; 0xe1f0
   120d0:	movt	r0, #2
   120d4:	b	12178 <__assert_fail@plt+0xb3c>
   120d8:	movw	sl, #57824	; 0xe1e0
   120dc:	movt	sl, #2
   120e0:	ldr	r2, [sl]
   120e4:	cmp	r2, #0
   120e8:	beq	124c8 <__assert_fail@plt+0xe8c>
   120ec:	ldr	r0, [sp, #36]	; 0x24
   120f0:	mov	r8, #0
   120f4:	mov	r1, #0
   120f8:	bl	12564 <__assert_fail@plt+0xf28>
   120fc:	cmp	r0, #0
   12100:	bne	11854 <__assert_fail@plt+0x218>
   12104:	b	124d4 <__assert_fail@plt+0xe98>
   12108:	movw	r0, #57824	; 0xe1e0
   1210c:	movt	r0, #2
   12110:	ldr	r0, [r0]
   12114:	cmp	r0, #0
   12118:	beq	12134 <__assert_fail@plt+0xaf8>
   1211c:	movw	r2, #57664	; 0xe140
   12120:	movt	r2, #2
   12124:	movw	r3, #57668	; 0xe144
   12128:	movt	r3, #2
   1212c:	mov	r1, #101	; 0x65
   12130:	bl	126d8 <__assert_fail@plt+0x109c>
   12134:	movw	r0, #57852	; 0xe1fc
   12138:	movt	r0, #2
   1213c:	b	12174 <__assert_fail@plt+0xb38>
   12140:	movw	r0, #57824	; 0xe1e0
   12144:	movt	r0, #2
   12148:	ldr	r0, [r0]
   1214c:	cmp	r0, #0
   12150:	beq	1216c <__assert_fail@plt+0xb30>
   12154:	movw	r2, #57672	; 0xe148
   12158:	movt	r2, #2
   1215c:	movw	r3, #57676	; 0xe14c
   12160:	movt	r3, #2
   12164:	mov	r1, #105	; 0x69
   12168:	bl	126d8 <__assert_fail@plt+0x109c>
   1216c:	movw	r0, #57860	; 0xe204
   12170:	movt	r0, #2
   12174:	mov	r1, #1
   12178:	strb	r1, [r0]
   1217c:	mov	r8, #0
   12180:	b	11854 <__assert_fail@plt+0x218>
   12184:	mov	r0, #1
   12188:	str	r0, [sp, #24]
   1218c:	mov	r0, #1
   12190:	str	r0, [sp, #16]
   12194:	b	11854 <__assert_fail@plt+0x218>
   12198:	str	r6, [sp, #12]
   1219c:	ldr	r6, [sp, #28]
   121a0:	cmp	r6, #0
   121a4:	beq	121b8 <__assert_fail@plt+0xb7c>
   121a8:	mov	r0, r6
   121ac:	bl	1268c <__assert_fail@plt+0x1050>
   121b0:	mov	r0, r6
   121b4:	bl	15934 <__assert_fail@plt+0x42f8>
   121b8:	movw	r8, #57862	; 0xe206
   121bc:	movt	r8, #2
   121c0:	movw	r9, #57832	; 0xe1e8
   121c4:	movt	r9, #2
   121c8:	movw	r1, #57848	; 0xe1f8
   121cc:	movt	r1, #2
   121d0:	ldr	sl, [sp, #24]
   121d4:	ldr	r6, [sp, #12]
   121d8:	b	121fc <__assert_fail@plt+0xbc0>
   121dc:	mov	r7, #0
   121e0:	mov	r0, #0
   121e4:	str	r0, [sp, #16]
   121e8:	mov	r0, #0
   121ec:	str	r0, [sp, #20]
   121f0:	mov	sl, #0
   121f4:	movw	r9, #57832	; 0xe1e8
   121f8:	movt	r9, #2
   121fc:	ldr	r0, [r1]
   12200:	cmp	r0, #0
   12204:	bne	12258 <__assert_fail@plt+0xc1c>
   12208:	str	sl, [sp, #24]
   1220c:	mov	sl, r1
   12210:	movw	r0, #48997	; 0xbf65
   12214:	movt	r0, #1
   12218:	bl	1145c <getenv@plt>
   1221c:	cmp	r0, #0
   12220:	beq	12248 <__assert_fail@plt+0xc0c>
   12224:	mov	r0, #2
   12228:	bl	15a20 <__assert_fail@plt+0x43e4>
   1222c:	movw	r2, #49028	; 0xbf84
   12230:	movt	r2, #1
   12234:	movw	r1, #49013	; 0xbf75
   12238:	movt	r1, #1
   1223c:	cmp	r0, #0
   12240:	movne	r1, r2
   12244:	b	12250 <__assert_fail@plt+0xc14>
   12248:	movw	r1, #49028	; 0xbf84
   1224c:	movt	r1, #1
   12250:	str	r1, [sl]
   12254:	ldr	sl, [sp, #24]
   12258:	movw	r0, #49043	; 0xbf93
   1225c:	movt	r0, #1
   12260:	bl	1145c <getenv@plt>
   12264:	bl	19490 <__assert_fail@plt+0x7e54>
   12268:	movw	r1, #57884	; 0xe21c
   1226c:	movt	r1, #2
   12270:	str	r0, [r1]
   12274:	ldrd	r0, [r9]
   12278:	orrs	r0, r0, r1
   1227c:	moveq	r1, #0
   12280:	moveq	r0, #1
   12284:	strdeq	r0, [r9]
   12288:	ldrb	r8, [r8]
   1228c:	cmp	r8, #1
   12290:	bne	122bc <__assert_fail@plt+0xc80>
   12294:	movw	r0, #57888	; 0xe220
   12298:	movt	r0, #2
   1229c:	ldrb	r0, [r0]
   122a0:	cmp	r0, #1
   122a4:	beq	12508 <__assert_fail@plt+0xecc>
   122a8:	movw	r0, #57840	; 0xe1f0
   122ac:	movt	r0, #2
   122b0:	ldrb	r0, [r0]
   122b4:	cmp	r0, #1
   122b8:	beq	12514 <__assert_fail@plt+0xed8>
   122bc:	tst	sl, #1
   122c0:	beq	1239c <__assert_fail@plt+0xd60>
   122c4:	ldr	r0, [sp, #20]
   122c8:	tst	r0, #1
   122cc:	beq	12314 <__assert_fail@plt+0xcd8>
   122d0:	cmp	r8, #0
   122d4:	bne	122ec <__assert_fail@plt+0xcb0>
   122d8:	movw	r0, #57888	; 0xe220
   122dc:	movt	r0, #2
   122e0:	ldrb	r0, [r0]
   122e4:	cmp	r0, #1
   122e8:	bne	1238c <__assert_fail@plt+0xd50>
   122ec:	movw	r1, #57883	; 0xe21b
   122f0:	movt	r1, #2
   122f4:	mov	r0, #1
   122f8:	strb	r0, [r1]
   122fc:	ldr	r1, [sp, #16]
   12300:	tst	r1, #1
   12304:	movwne	r1, #57873	; 0xe211
   12308:	movtne	r1, #2
   1230c:	strbne	r0, [r1]
   12310:	b	1239c <__assert_fail@plt+0xd60>
   12314:	movw	r0, #57873	; 0xe211
   12318:	movt	r0, #2
   1231c:	ldrb	r1, [r0]
   12320:	cmp	r1, #0
   12324:	ldreq	r1, [sp, #16]
   12328:	eoreq	r1, r1, #1
   1232c:	tsteq	r1, #1
   12330:	bne	1239c <__assert_fail@plt+0xd60>
   12334:	cmp	r8, #0
   12338:	bne	12350 <__assert_fail@plt+0xd14>
   1233c:	movw	r1, #57888	; 0xe220
   12340:	movt	r1, #2
   12344:	ldrb	r1, [r1]
   12348:	cmp	r1, #1
   1234c:	bne	1239c <__assert_fail@plt+0xd60>
   12350:	movw	r1, #57883	; 0xe21b
   12354:	movt	r1, #2
   12358:	ldrb	r1, [r1]
   1235c:	cmp	r1, #0
   12360:	bne	12394 <__assert_fail@plt+0xd58>
   12364:	movw	r2, #57861	; 0xe205
   12368:	movt	r2, #2
   1236c:	mov	r1, #1
   12370:	strb	r1, [r2]
   12374:	movw	r2, #57876	; 0xe214
   12378:	movt	r2, #2
   1237c:	ldr	r2, [r2]
   12380:	cmp	r2, #1
   12384:	strbge	r1, [r0]
   12388:	b	1239c <__assert_fail@plt+0xd60>
   1238c:	movw	r0, #57861	; 0xe205
   12390:	movt	r0, #2
   12394:	mov	r1, #1
   12398:	strb	r1, [r0]
   1239c:	mov	r1, r6
   123a0:	movw	r9, #57800	; 0xe1c8
   123a4:	movt	r9, #2
   123a8:	ldr	r6, [r9]
   123ac:	cmp	r6, r5
   123b0:	bge	123dc <__assert_fail@plt+0xda0>
   123b4:	add	r0, r4, r7, lsl #2
   123b8:	add	r1, r1, r6, lsl #2
   123bc:	sub	r2, r5, r6
   123c0:	lsl	r2, r2, #2
   123c4:	bl	11384 <memcpy@plt>
   123c8:	add	r6, r6, #1
   123cc:	add	r7, r7, #1
   123d0:	cmp	r5, r6
   123d4:	bne	123c8 <__assert_fail@plt+0xd8c>
   123d8:	str	r5, [r9]
   123dc:	cmp	r7, #0
   123e0:	beq	12414 <__assert_fail@plt+0xdd8>
   123e4:	cmp	r8, #0
   123e8:	beq	123f8 <__assert_fail@plt+0xdbc>
   123ec:	mov	r0, r7
   123f0:	mov	r1, r4
   123f4:	b	1241c <__assert_fail@plt+0xde0>
   123f8:	mov	r0, #1
   123fc:	mov	r1, r4
   12400:	bl	12a70 <__assert_fail@plt+0x1434>
   12404:	add	r4, r4, #4
   12408:	subs	r7, r7, #1
   1240c:	bne	123f8 <__assert_fail@plt+0xdbc>
   12410:	b	12420 <__assert_fail@plt+0xde4>
   12414:	mov	r0, #0
   12418:	mov	r1, #0
   1241c:	bl	12a70 <__assert_fail@plt+0x1434>
   12420:	bl	12b18 <__assert_fail@plt+0x14dc>
   12424:	movw	r0, #57889	; 0xe221
   12428:	movt	r0, #2
   1242c:	ldrb	r0, [r0]
   12430:	cmp	r0, #1
   12434:	bne	12450 <__assert_fail@plt+0xe14>
   12438:	movw	r0, #57816	; 0xe1d8
   1243c:	movt	r0, #2
   12440:	ldr	r0, [r0]
   12444:	bl	1577c <__assert_fail@plt+0x4140>
   12448:	cmn	r0, #1
   1244c:	beq	12538 <__assert_fail@plt+0xefc>
   12450:	movw	r0, #57890	; 0xe222
   12454:	movt	r0, #2
   12458:	ldrb	r0, [r0]
   1245c:	sub	sp, fp, #28
   12460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12464:	mov	r0, #1
   12468:	bl	12810 <__assert_fail@plt+0x11d4>
   1246c:	movw	r0, #57720	; 0xe178
   12470:	movt	r0, #2
   12474:	ldr	r3, [r0]
   12478:	movw	r0, #57820	; 0xe1dc
   1247c:	movt	r0, #2
   12480:	ldr	r0, [r0]
   12484:	mov	r1, #0
   12488:	movw	r2, #48982	; 0xbf56
   1248c:	movt	r2, #1
   12490:	movw	r7, #48969	; 0xbf49
   12494:	movt	r7, #1
   12498:	str	r7, [sp]
   1249c:	str	r2, [sp, #4]
   124a0:	str	r1, [sp, #8]
   124a4:	movw	r1, #48952	; 0xbf38
   124a8:	movt	r1, #1
   124ac:	movw	r2, #48955	; 0xbf3b
   124b0:	movt	r2, #1
   124b4:	bl	19cf8 <__assert_fail@plt+0x86bc>
   124b8:	mov	r0, #0
   124bc:	bl	114d4 <exit@plt>
   124c0:	mov	r0, #0
   124c4:	bl	12810 <__assert_fail@plt+0x11d4>
   124c8:	movw	r1, #48676	; 0xbe24
   124cc:	movt	r1, #1
   124d0:	b	1251c <__assert_fail@plt+0xee0>
   124d4:	movw	r1, #48726	; 0xbe56
   124d8:	movt	r1, #1
   124dc:	mov	r0, #0
   124e0:	mov	r2, #5
   124e4:	bl	113a8 <dcgettext@plt>
   124e8:	mov	r4, r0
   124ec:	ldr	r0, [sl]
   124f0:	bl	18f7c <__assert_fail@plt+0x7940>
   124f4:	mov	r3, r0
   124f8:	mov	r0, #1
   124fc:	mov	r1, #0
   12500:	mov	r2, r4
   12504:	bl	11450 <error@plt>
   12508:	movw	r1, #49046	; 0xbf96
   1250c:	movt	r1, #1
   12510:	b	1251c <__assert_fail@plt+0xee0>
   12514:	movw	r1, #49105	; 0xbfd1
   12518:	movt	r1, #1
   1251c:	mov	r0, #0
   12520:	mov	r2, #5
   12524:	bl	113a8 <dcgettext@plt>
   12528:	mov	r2, r0
   1252c:	mov	r0, #1
   12530:	mov	r1, #0
   12534:	bl	11450 <error@plt>
   12538:	bl	1151c <__errno_location@plt>
   1253c:	ldr	r4, [r0]
   12540:	movw	r1, #49166	; 0xc00e
   12544:	movt	r1, #1
   12548:	mov	r0, #0
   1254c:	mov	r2, #5
   12550:	bl	113a8 <dcgettext@plt>
   12554:	mov	r2, r0
   12558:	mov	r0, #1
   1255c:	mov	r1, r4
   12560:	bl	11450 <error@plt>
   12564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12568:	add	fp, sp, #24
   1256c:	sub	sp, sp, #32
   12570:	mov	r7, r2
   12574:	mov	r8, r1
   12578:	mov	r5, r0
   1257c:	mvn	r0, #0
   12580:	str	r0, [sp, #12]
   12584:	str	r0, [sp, #8]
   12588:	movw	r4, #53460	; 0xd0d4
   1258c:	movt	r4, #1
   12590:	str	r4, [sp]
   12594:	add	r1, sp, #28
   12598:	add	r3, sp, #16
   1259c:	mov	r0, r2
   125a0:	mov	r2, #10
   125a4:	bl	1ae64 <__assert_fail@plt+0x9828>
   125a8:	mvn	r1, #2
   125ac:	tst	r0, r1
   125b0:	bne	12674 <__assert_fail@plt+0x1038>
   125b4:	mov	r6, #0
   125b8:	ldr	r0, [sp, #28]
   125bc:	cmp	r0, r7
   125c0:	ldrne	r1, [sp, #16]
   125c4:	ldrne	r2, [sp, #20]
   125c8:	orrsne	r1, r1, r2
   125cc:	bne	125dc <__assert_fail@plt+0xfa0>
   125d0:	mov	r0, r6
   125d4:	sub	sp, fp, #24
   125d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   125dc:	ldrb	r1, [r0]
   125e0:	cmp	r1, #58	; 0x3a
   125e4:	bne	12634 <__assert_fail@plt+0xff8>
   125e8:	str	r4, [sp]
   125ec:	add	r4, r0, #1
   125f0:	add	r1, sp, #28
   125f4:	add	r3, sp, #8
   125f8:	mov	r0, r4
   125fc:	mov	r2, #10
   12600:	bl	1ae64 <__assert_fail@plt+0x9828>
   12604:	cmp	r0, #0
   12608:	bne	12674 <__assert_fail@plt+0x1038>
   1260c:	ldr	r0, [sp, #28]
   12610:	cmp	r4, r0
   12614:	beq	125d0 <__assert_fail@plt+0xf94>
   12618:	ldr	r0, [sp, #16]
   1261c:	ldr	r1, [sp, #20]
   12620:	ldr	r2, [sp, #8]
   12624:	ldr	r3, [sp, #12]
   12628:	subs	r0, r2, r0
   1262c:	sbcs	r0, r3, r1
   12630:	bcc	125d0 <__assert_fail@plt+0xf94>
   12634:	ldr	r0, [sp, #28]
   12638:	ldrb	r0, [r0]
   1263c:	cmp	r0, #0
   12640:	bne	125d0 <__assert_fail@plt+0xf94>
   12644:	ldr	r0, [sp, #16]
   12648:	ldr	r1, [sp, #20]
   1264c:	movw	r2, #57832	; 0xe1e8
   12650:	movt	r2, #2
   12654:	strd	r0, [r2]
   12658:	ldr	r0, [sp, #8]
   1265c:	ldr	r1, [sp, #12]
   12660:	movw	r2, #57704	; 0xe168
   12664:	movt	r2, #2
   12668:	strd	r0, [r2]
   1266c:	mov	r6, #1
   12670:	b	125d0 <__assert_fail@plt+0xf94>
   12674:	str	r7, [sp]
   12678:	movw	r3, #54080	; 0xd340
   1267c:	movt	r3, #1
   12680:	mov	r1, r5
   12684:	mov	r2, r8
   12688:	bl	1ada0 <__assert_fail@plt+0x9764>
   1268c:	push	{r4, r5, fp, lr}
   12690:	add	fp, sp, #8
   12694:	mov	r4, r0
   12698:	movw	r1, #53333	; 0xd055
   1269c:	movt	r1, #1
   126a0:	mov	r0, #0
   126a4:	mov	r2, #5
   126a8:	bl	113a8 <dcgettext@plt>
   126ac:	mov	r3, r0
   126b0:	mov	r5, #1
   126b4:	movw	r2, #57712	; 0xe170
   126b8:	movt	r2, #2
   126bc:	mov	r0, r4
   126c0:	mov	r1, #1
   126c4:	bl	12794 <__assert_fail@plt+0x1158>
   126c8:	movw	r0, #57888	; 0xe220
   126cc:	movt	r0, #2
   126d0:	strb	r5, [r0]
   126d4:	pop	{r4, r5, fp, pc}
   126d8:	push	{r4, r5, r6, r7, fp, lr}
   126dc:	add	fp, sp, #16
   126e0:	sub	sp, sp, #8
   126e4:	mov	r6, r3
   126e8:	mov	r4, r1
   126ec:	mov	r5, r0
   126f0:	ldrb	r0, [r0]
   126f4:	sub	r1, r0, #48	; 0x30
   126f8:	cmp	r1, #10
   126fc:	strbcs	r0, [r2]
   12700:	ldrbcs	r0, [r5, #1]!
   12704:	cmp	r0, #0
   12708:	beq	12744 <__assert_fail@plt+0x1108>
   1270c:	movw	r0, #53460	; 0xd0d4
   12710:	movt	r0, #1
   12714:	str	r0, [sp]
   12718:	add	r3, sp, #4
   1271c:	mov	r0, r5
   12720:	mov	r1, #0
   12724:	mov	r2, #10
   12728:	bl	1a870 <__assert_fail@plt+0x9234>
   1272c:	cmp	r0, #0
   12730:	bne	1274c <__assert_fail@plt+0x1110>
   12734:	ldr	r0, [sp, #4]
   12738:	cmp	r0, #0
   1273c:	ble	1274c <__assert_fail@plt+0x1110>
   12740:	str	r0, [r6]
   12744:	sub	sp, fp, #16
   12748:	pop	{r4, r5, r6, r7, fp, pc}
   1274c:	bl	1151c <__errno_location@plt>
   12750:	ldr	r6, [r0]
   12754:	movw	r1, #53376	; 0xd080
   12758:	movt	r1, #1
   1275c:	mov	r0, #0
   12760:	mov	r2, #5
   12764:	bl	113a8 <dcgettext@plt>
   12768:	mov	r7, r0
   1276c:	mov	r0, r5
   12770:	bl	18f7c <__assert_fail@plt+0x7940>
   12774:	str	r0, [sp]
   12778:	mov	r0, #0
   1277c:	mov	r1, r6
   12780:	mov	r2, r7
   12784:	mov	r3, r4
   12788:	bl	11450 <error@plt>
   1278c:	mov	r0, #1
   12790:	bl	12810 <__assert_fail@plt+0x11d4>
   12794:	push	{r4, r5, fp, lr}
   12798:	add	fp, sp, #8
   1279c:	sub	sp, sp, #24
   127a0:	mov	r5, r2
   127a4:	mov	r2, #0
   127a8:	movw	ip, #53460	; 0xd0d4
   127ac:	movt	ip, #1
   127b0:	mvn	r4, #-2147483648	; 0x80000000
   127b4:	str	r4, [sp]
   127b8:	stmib	sp, {r2, ip}
   127bc:	str	r3, [sp, #12]
   127c0:	str	r2, [sp, #16]
   127c4:	asr	r3, r1, #31
   127c8:	mov	r2, r1
   127cc:	bl	1a2d0 <__assert_fail@plt+0x8c94>
   127d0:	str	r0, [r5]
   127d4:	sub	sp, fp, #8
   127d8:	pop	{r4, r5, fp, pc}
   127dc:	push	{r4, sl, fp, lr}
   127e0:	add	fp, sp, #8
   127e4:	mov	r4, r0
   127e8:	bl	114ec <strlen@plt>
   127ec:	cmn	r0, #1
   127f0:	movwgt	r1, #57696	; 0xe160
   127f4:	movtgt	r1, #2
   127f8:	strgt	r4, [r1]
   127fc:	movwgt	r1, #57876	; 0xe214
   12800:	movtgt	r1, #2
   12804:	strgt	r0, [r1]
   12808:	popgt	{r4, sl, fp, pc}
   1280c:	bl	12d6c <__assert_fail@plt+0x1730>
   12810:	push	{fp, lr}
   12814:	mov	fp, sp
   12818:	mov	r4, r0
   1281c:	cmp	r0, #0
   12820:	bne	12a2c <__assert_fail@plt+0x13f0>
   12824:	movw	r1, #49220	; 0xc044
   12828:	movt	r1, #1
   1282c:	mov	r0, #0
   12830:	mov	r2, #5
   12834:	bl	113a8 <dcgettext@plt>
   12838:	mov	r1, r0
   1283c:	movw	r0, #58024	; 0xe2a8
   12840:	movt	r0, #2
   12844:	ldr	r2, [r0]
   12848:	mov	r0, #1
   1284c:	bl	1154c <__printf_chk@plt>
   12850:	movw	r1, #49253	; 0xc065
   12854:	movt	r1, #1
   12858:	mov	r0, #0
   1285c:	mov	r2, #5
   12860:	bl	113a8 <dcgettext@plt>
   12864:	movw	r5, #57820	; 0xe1dc
   12868:	movt	r5, #2
   1286c:	ldr	r1, [r5]
   12870:	bl	112f4 <fputs_unlocked@plt>
   12874:	bl	12b84 <__assert_fail@plt+0x1548>
   12878:	bl	12bb4 <__assert_fail@plt+0x1578>
   1287c:	movw	r1, #49298	; 0xc092
   12880:	movt	r1, #1
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	bl	113a8 <dcgettext@plt>
   12890:	ldr	r1, [r5]
   12894:	bl	112f4 <fputs_unlocked@plt>
   12898:	movw	r1, #49632	; 0xc1e0
   1289c:	movt	r1, #1
   128a0:	mov	r0, #0
   128a4:	mov	r2, #5
   128a8:	bl	113a8 <dcgettext@plt>
   128ac:	ldr	r1, [r5]
   128b0:	bl	112f4 <fputs_unlocked@plt>
   128b4:	movw	r1, #49902	; 0xc2ee
   128b8:	movt	r1, #1
   128bc:	mov	r0, #0
   128c0:	mov	r2, #5
   128c4:	bl	113a8 <dcgettext@plt>
   128c8:	ldr	r1, [r5]
   128cc:	bl	112f4 <fputs_unlocked@plt>
   128d0:	movw	r1, #50302	; 0xc47e
   128d4:	movt	r1, #1
   128d8:	mov	r0, #0
   128dc:	mov	r2, #5
   128e0:	bl	113a8 <dcgettext@plt>
   128e4:	ldr	r1, [r5]
   128e8:	bl	112f4 <fputs_unlocked@plt>
   128ec:	movw	r1, #50729	; 0xc629
   128f0:	movt	r1, #1
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	bl	113a8 <dcgettext@plt>
   12900:	ldr	r1, [r5]
   12904:	bl	112f4 <fputs_unlocked@plt>
   12908:	movw	r1, #50949	; 0xc705
   1290c:	movt	r1, #1
   12910:	mov	r0, #0
   12914:	mov	r2, #5
   12918:	bl	113a8 <dcgettext@plt>
   1291c:	ldr	r1, [r5]
   12920:	bl	112f4 <fputs_unlocked@plt>
   12924:	movw	r1, #51093	; 0xc795
   12928:	movt	r1, #1
   1292c:	mov	r0, #0
   12930:	mov	r2, #5
   12934:	bl	113a8 <dcgettext@plt>
   12938:	ldr	r1, [r5]
   1293c:	bl	112f4 <fputs_unlocked@plt>
   12940:	movw	r1, #51439	; 0xc8ef
   12944:	movt	r1, #1
   12948:	mov	r0, #0
   1294c:	mov	r2, #5
   12950:	bl	113a8 <dcgettext@plt>
   12954:	ldr	r1, [r5]
   12958:	bl	112f4 <fputs_unlocked@plt>
   1295c:	movw	r1, #51692	; 0xc9ec
   12960:	movt	r1, #1
   12964:	mov	r0, #0
   12968:	mov	r2, #5
   1296c:	bl	113a8 <dcgettext@plt>
   12970:	ldr	r1, [r5]
   12974:	bl	112f4 <fputs_unlocked@plt>
   12978:	movw	r1, #52018	; 0xcb32
   1297c:	movt	r1, #1
   12980:	mov	r0, #0
   12984:	mov	r2, #5
   12988:	bl	113a8 <dcgettext@plt>
   1298c:	ldr	r1, [r5]
   12990:	bl	112f4 <fputs_unlocked@plt>
   12994:	movw	r1, #52254	; 0xcc1e
   12998:	movt	r1, #1
   1299c:	mov	r0, #0
   129a0:	mov	r2, #5
   129a4:	bl	113a8 <dcgettext@plt>
   129a8:	ldr	r1, [r5]
   129ac:	bl	112f4 <fputs_unlocked@plt>
   129b0:	movw	r1, #52358	; 0xcc86
   129b4:	movt	r1, #1
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	bl	113a8 <dcgettext@plt>
   129c4:	ldr	r1, [r5]
   129c8:	bl	112f4 <fputs_unlocked@plt>
   129cc:	movw	r1, #52759	; 0xce17
   129d0:	movt	r1, #1
   129d4:	mov	r0, #0
   129d8:	mov	r2, #5
   129dc:	bl	113a8 <dcgettext@plt>
   129e0:	ldr	r1, [r5]
   129e4:	bl	112f4 <fputs_unlocked@plt>
   129e8:	movw	r1, #52974	; 0xceee
   129ec:	movt	r1, #1
   129f0:	mov	r0, #0
   129f4:	mov	r2, #5
   129f8:	bl	113a8 <dcgettext@plt>
   129fc:	ldr	r1, [r5]
   12a00:	bl	112f4 <fputs_unlocked@plt>
   12a04:	movw	r1, #53019	; 0xcf1b
   12a08:	movt	r1, #1
   12a0c:	mov	r0, #0
   12a10:	mov	r2, #5
   12a14:	bl	113a8 <dcgettext@plt>
   12a18:	ldr	r1, [r5]
   12a1c:	bl	112f4 <fputs_unlocked@plt>
   12a20:	bl	12be4 <__assert_fail@plt+0x15a8>
   12a24:	mov	r0, r4
   12a28:	bl	114d4 <exit@plt>
   12a2c:	movw	r0, #57808	; 0xe1d0
   12a30:	movt	r0, #2
   12a34:	ldr	r5, [r0]
   12a38:	movw	r1, #49181	; 0xc01d
   12a3c:	movt	r1, #1
   12a40:	mov	r0, #0
   12a44:	mov	r2, #5
   12a48:	bl	113a8 <dcgettext@plt>
   12a4c:	mov	r2, r0
   12a50:	movw	r0, #58024	; 0xe2a8
   12a54:	movt	r0, #2
   12a58:	ldr	r3, [r0]
   12a5c:	mov	r0, r5
   12a60:	mov	r1, #1
   12a64:	bl	11570 <__fprintf_chk@plt>
   12a68:	mov	r0, r4
   12a6c:	bl	114d4 <exit@plt>
   12a70:	push	{r4, r5, fp, lr}
   12a74:	add	fp, sp, #8
   12a78:	mov	r4, r1
   12a7c:	mov	r5, r0
   12a80:	bl	12d98 <__assert_fail@plt+0x175c>
   12a84:	mov	r0, r5
   12a88:	mov	r1, r4
   12a8c:	bl	13154 <__assert_fail@plt+0x1b18>
   12a90:	cmp	r0, #0
   12a94:	beq	12b14 <__assert_fail@plt+0x14d8>
   12a98:	movw	r0, #57841	; 0xe1f1
   12a9c:	movt	r0, #2
   12aa0:	ldrb	r0, [r0]
   12aa4:	cmp	r0, #0
   12aa8:	bleq	13300 <__assert_fail@plt+0x1cc4>
   12aac:	movw	r4, #57832	; 0xe1e8
   12ab0:	movt	r4, #2
   12ab4:	ldrd	r0, [r4]
   12ab8:	subs	r2, r0, #2
   12abc:	sbcs	r2, r1, #0
   12ac0:	bcc	12ad8 <__assert_fail@plt+0x149c>
   12ac4:	bl	134d4 <__assert_fail@plt+0x1e98>
   12ac8:	cmp	r0, #0
   12acc:	popeq	{r4, r5, fp, pc}
   12ad0:	ldrd	r0, [r4]
   12ad4:	b	12ae0 <__assert_fail@plt+0x14a4>
   12ad8:	mov	r1, #0
   12adc:	mov	r0, #1
   12ae0:	movw	r2, #57896	; 0xe228
   12ae4:	movt	r2, #2
   12ae8:	strd	r0, [r2]
   12aec:	bl	136bc <__assert_fail@plt+0x2080>
   12af0:	movw	r0, #57716	; 0xe174
   12af4:	movt	r0, #2
   12af8:	ldr	r0, [r0]
   12afc:	movw	r1, #57904	; 0xe230
   12b00:	movt	r1, #2
   12b04:	str	r0, [r1]
   12b08:	bl	13908 <__assert_fail@plt+0x22cc>
   12b0c:	cmp	r0, #0
   12b10:	bne	12b08 <__assert_fail@plt+0x14cc>
   12b14:	pop	{r4, r5, fp, pc}
   12b18:	push	{fp, lr}
   12b1c:	mov	fp, sp
   12b20:	movw	r0, #57920	; 0xe240
   12b24:	movt	r0, #2
   12b28:	ldr	r0, [r0]
   12b2c:	bl	15934 <__assert_fail@plt+0x42f8>
   12b30:	movw	r0, #57924	; 0xe244
   12b34:	movt	r0, #2
   12b38:	ldr	r0, [r0]
   12b3c:	bl	15934 <__assert_fail@plt+0x42f8>
   12b40:	movw	r0, #57932	; 0xe24c
   12b44:	movt	r0, #2
   12b48:	ldr	r0, [r0]
   12b4c:	bl	15934 <__assert_fail@plt+0x42f8>
   12b50:	movw	r0, #57964	; 0xe26c
   12b54:	movt	r0, #2
   12b58:	ldr	r0, [r0]
   12b5c:	bl	15934 <__assert_fail@plt+0x42f8>
   12b60:	movw	r0, #57968	; 0xe270
   12b64:	movt	r0, #2
   12b68:	ldr	r0, [r0]
   12b6c:	bl	15934 <__assert_fail@plt+0x42f8>
   12b70:	movw	r0, #57972	; 0xe274
   12b74:	movt	r0, #2
   12b78:	ldr	r0, [r0]
   12b7c:	pop	{fp, lr}
   12b80:	b	15934 <__assert_fail@plt+0x42f8>
   12b84:	push	{fp, lr}
   12b88:	mov	fp, sp
   12b8c:	movw	r1, #53582	; 0xd14e
   12b90:	movt	r1, #1
   12b94:	mov	r0, #0
   12b98:	mov	r2, #5
   12b9c:	bl	113a8 <dcgettext@plt>
   12ba0:	movw	r1, #57820	; 0xe1dc
   12ba4:	movt	r1, #2
   12ba8:	ldr	r1, [r1]
   12bac:	pop	{fp, lr}
   12bb0:	b	112f4 <fputs_unlocked@plt>
   12bb4:	push	{fp, lr}
   12bb8:	mov	fp, sp
   12bbc:	movw	r1, #53638	; 0xd186
   12bc0:	movt	r1, #1
   12bc4:	mov	r0, #0
   12bc8:	mov	r2, #5
   12bcc:	bl	113a8 <dcgettext@plt>
   12bd0:	movw	r1, #57820	; 0xe1dc
   12bd4:	movt	r1, #2
   12bd8:	ldr	r1, [r1]
   12bdc:	pop	{fp, lr}
   12be0:	b	112f4 <fputs_unlocked@plt>
   12be4:	push	{r4, r5, r6, sl, fp, lr}
   12be8:	add	fp, sp, #16
   12bec:	sub	sp, sp, #56	; 0x38
   12bf0:	movw	r0, #54512	; 0xd4f0
   12bf4:	movt	r0, #1
   12bf8:	add	r1, r0, #32
   12bfc:	mov	r2, #48	; 0x30
   12c00:	vld1.64	{d16-d17}, [r1]
   12c04:	mov	r6, sp
   12c08:	add	r1, r6, #32
   12c0c:	add	r3, r0, #16
   12c10:	vld1.64	{d18-d19}, [r0], r2
   12c14:	vld1.64	{d20-d21}, [r3]
   12c18:	vldr	d22, [r0]
   12c1c:	vst1.64	{d16-d17}, [r1]
   12c20:	add	r0, r6, #16
   12c24:	vst1.64	{d20-d21}, [r0]
   12c28:	mov	r0, r6
   12c2c:	vst1.64	{d18-d19}, [r0], r2
   12c30:	vstr	d22, [r0]
   12c34:	ldr	r1, [sp]
   12c38:	cmp	r1, #0
   12c3c:	movw	r4, #48952	; 0xbf38
   12c40:	movt	r4, #1
   12c44:	beq	12c6c <__assert_fail@plt+0x1630>
   12c48:	mov	r6, sp
   12c4c:	movw	r5, #48952	; 0xbf38
   12c50:	movt	r5, #1
   12c54:	mov	r0, r5
   12c58:	bl	11318 <strcmp@plt>
   12c5c:	cmp	r0, #0
   12c60:	ldrne	r1, [r6, #8]!
   12c64:	cmpne	r1, #0
   12c68:	bne	12c54 <__assert_fail@plt+0x1618>
   12c6c:	ldr	r5, [r6, #4]
   12c70:	movw	r1, #53808	; 0xd230
   12c74:	movt	r1, #1
   12c78:	mov	r0, #0
   12c7c:	mov	r2, #5
   12c80:	bl	113a8 <dcgettext@plt>
   12c84:	mov	r1, r0
   12c88:	movw	r2, #48955	; 0xbf3b
   12c8c:	movt	r2, #1
   12c90:	movw	r3, #53831	; 0xd247
   12c94:	movt	r3, #1
   12c98:	mov	r0, #1
   12c9c:	bl	1154c <__printf_chk@plt>
   12ca0:	cmp	r5, #0
   12ca4:	moveq	r5, r4
   12ca8:	mov	r0, #5
   12cac:	mov	r1, #0
   12cb0:	bl	115ac <setlocale@plt>
   12cb4:	cmp	r0, #0
   12cb8:	beq	12cf8 <__assert_fail@plt+0x16bc>
   12cbc:	movw	r1, #53871	; 0xd26f
   12cc0:	movt	r1, #1
   12cc4:	mov	r2, #3
   12cc8:	bl	1160c <strncmp@plt>
   12ccc:	cmp	r0, #0
   12cd0:	beq	12cf8 <__assert_fail@plt+0x16bc>
   12cd4:	movw	r1, #53875	; 0xd273
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, #0
   12ce0:	mov	r2, #5
   12ce4:	bl	113a8 <dcgettext@plt>
   12ce8:	movw	r1, #57820	; 0xe1dc
   12cec:	movt	r1, #2
   12cf0:	ldr	r1, [r1]
   12cf4:	bl	112f4 <fputs_unlocked@plt>
   12cf8:	movw	r1, #53946	; 0xd2ba
   12cfc:	movt	r1, #1
   12d00:	mov	r0, #0
   12d04:	mov	r2, #5
   12d08:	bl	113a8 <dcgettext@plt>
   12d0c:	mov	r1, r0
   12d10:	movw	r2, #53831	; 0xd247
   12d14:	movt	r2, #1
   12d18:	mov	r0, #1
   12d1c:	mov	r3, r4
   12d20:	bl	1154c <__printf_chk@plt>
   12d24:	movw	r0, #53741	; 0xd1ed
   12d28:	movt	r0, #1
   12d2c:	movw	r6, #53460	; 0xd0d4
   12d30:	movt	r6, #1
   12d34:	cmp	r5, r4
   12d38:	moveq	r6, r0
   12d3c:	movw	r1, #53973	; 0xd2d5
   12d40:	movt	r1, #1
   12d44:	mov	r0, #0
   12d48:	mov	r2, #5
   12d4c:	bl	113a8 <dcgettext@plt>
   12d50:	mov	r1, r0
   12d54:	mov	r0, #1
   12d58:	mov	r2, r5
   12d5c:	mov	r3, r6
   12d60:	sub	sp, fp, #16
   12d64:	pop	{r4, r5, r6, sl, fp, lr}
   12d68:	b	1154c <__printf_chk@plt>
   12d6c:	push	{fp, lr}
   12d70:	mov	fp, sp
   12d74:	movw	r1, #53359	; 0xd06f
   12d78:	movt	r1, #1
   12d7c:	mov	r0, #0
   12d80:	mov	r2, #5
   12d84:	bl	113a8 <dcgettext@plt>
   12d88:	mov	r2, r0
   12d8c:	mov	r0, #1
   12d90:	mov	r1, #0
   12d94:	bl	11450 <error@plt>
   12d98:	push	{r4, r5, r6, sl, fp, lr}
   12d9c:	add	fp, sp, #16
   12da0:	movw	r1, #57680	; 0xe150
   12da4:	movt	r1, #2
   12da8:	ldr	r2, [r1]
   12dac:	sub	r3, r2, #10
   12db0:	movw	r1, #57908	; 0xe234
   12db4:	movt	r1, #2
   12db8:	str	r3, [r1]
   12dbc:	cmp	r3, #0
   12dc0:	ble	12ddc <__assert_fail@plt+0x17a0>
   12dc4:	movw	r3, #57880	; 0xe218
   12dc8:	movt	r3, #2
   12dcc:	ldrb	r3, [r3]
   12dd0:	cmp	r3, #1
   12dd4:	streq	r2, [r1]
   12dd8:	b	12dfc <__assert_fail@plt+0x17c0>
   12ddc:	movw	r3, #57881	; 0xe219
   12de0:	movt	r3, #2
   12de4:	mov	r5, #1
   12de8:	strb	r5, [r3]
   12dec:	movw	r3, #57880	; 0xe218
   12df0:	movt	r3, #2
   12df4:	strb	r5, [r3]
   12df8:	str	r2, [r1]
   12dfc:	movw	r2, #57844	; 0xe1f4
   12e00:	movt	r2, #2
   12e04:	ldrb	r2, [r2]
   12e08:	cmp	r2, #1
   12e0c:	bne	12e20 <__assert_fail@plt+0x17e4>
   12e10:	ldr	r2, [r1]
   12e14:	add	r2, r2, r2, lsr #31
   12e18:	asr	r2, r2, #1
   12e1c:	str	r2, [r1]
   12e20:	cmp	r0, #0
   12e24:	movw	r2, #57712	; 0xe170
   12e28:	movt	r2, #2
   12e2c:	beq	12e50 <__assert_fail@plt+0x1814>
   12e30:	movw	r1, #57862	; 0xe206
   12e34:	movt	r1, #2
   12e38:	ldrb	r3, [r1]
   12e3c:	mov	r1, #0
   12e40:	cmp	r3, #1
   12e44:	streq	r0, [r2]
   12e48:	moveq	r1, #1
   12e4c:	b	12e60 <__assert_fail@plt+0x1824>
   12e50:	movw	r0, #57862	; 0xe206
   12e54:	movt	r0, #2
   12e58:	mov	r1, #0
   12e5c:	strb	r1, [r0]
   12e60:	movw	r3, #57841	; 0xe1f1
   12e64:	movt	r3, #2
   12e68:	ldrb	r0, [r3]
   12e6c:	cmp	r0, #0
   12e70:	movweq	r0, #57842	; 0xe1f2
   12e74:	movteq	r0, #2
   12e78:	moveq	r5, #1
   12e7c:	strbeq	r5, [r0]
   12e80:	ldr	r0, [r2]
   12e84:	cmp	r0, #2
   12e88:	movw	r2, #57861	; 0xe205
   12e8c:	movt	r2, #2
   12e90:	movw	ip, #57876	; 0xe214
   12e94:	movt	ip, #2
   12e98:	blt	12f64 <__assert_fail@plt+0x1928>
   12e9c:	ldrb	r4, [r2]
   12ea0:	movw	r5, #57873	; 0xe211
   12ea4:	movt	r5, #2
   12ea8:	ldrb	r3, [r5]
   12eac:	cmp	r3, #0
   12eb0:	movw	lr, #57696	; 0xe160
   12eb4:	movt	lr, #2
   12eb8:	movw	r3, #57860	; 0xe204
   12ebc:	movt	r3, #2
   12ec0:	beq	12f10 <__assert_fail@plt+0x18d4>
   12ec4:	ldr	r5, [ip]
   12ec8:	cmp	r5, #1
   12ecc:	bne	12ef4 <__assert_fail@plt+0x18b8>
   12ed0:	eors	r4, r4, #1
   12ed4:	beq	12ef4 <__assert_fail@plt+0x18b8>
   12ed8:	ldr	r4, [lr]
   12edc:	ldrb	r4, [r4]
   12ee0:	cmp	r4, #9
   12ee4:	movweq	r4, #53461	; 0xd0d5
   12ee8:	movteq	r4, #1
   12eec:	streq	r4, [lr]
   12ef0:	ldr	r5, [ip]
   12ef4:	movw	r4, #57883	; 0xe21b
   12ef8:	movt	r4, #2
   12efc:	mov	r6, #1
   12f00:	strb	r6, [r4]
   12f04:	cmp	r5, #1
   12f08:	beq	12f44 <__assert_fail@plt+0x1908>
   12f0c:	b	12f54 <__assert_fail@plt+0x1918>
   12f10:	mov	r6, #1
   12f14:	str	r6, [ip]
   12f18:	strb	r6, [r5]
   12f1c:	movw	r5, #57883	; 0xe21b
   12f20:	movt	r5, #2
   12f24:	strb	r6, [r5]
   12f28:	movw	r5, #53459	; 0xd0d3
   12f2c:	movt	r5, #1
   12f30:	movw	r6, #53461	; 0xd0d5
   12f34:	movt	r6, #1
   12f38:	cmp	r4, #0
   12f3c:	movne	r6, r5
   12f40:	str	r6, [lr]
   12f44:	ldr	r6, [lr]
   12f48:	ldrb	r6, [r6]
   12f4c:	cmp	r6, #9
   12f50:	beq	12f64 <__assert_fail@plt+0x1928>
   12f54:	movw	r6, #57852	; 0xe1fc
   12f58:	movt	r6, #2
   12f5c:	mov	r5, #1
   12f60:	strb	r5, [r6]
   12f64:	mov	r6, #1
   12f68:	strb	r6, [r3]
   12f6c:	ldrb	r2, [r2]
   12f70:	cmp	r2, #1
   12f74:	movweq	r2, #57883	; 0xe21b
   12f78:	movteq	r2, #2
   12f7c:	moveq	r3, #0
   12f80:	strbeq	r3, [r2]
   12f84:	movw	r2, #57863	; 0xe207
   12f88:	movt	r2, #2
   12f8c:	ldrb	lr, [r2]
   12f90:	mov	r2, #0
   12f94:	cmp	lr, #1
   12f98:	bne	13004 <__assert_fail@plt+0x19c8>
   12f9c:	movw	r2, #57692	; 0xe15c
   12fa0:	movt	r2, #2
   12fa4:	ldr	r2, [r2]
   12fa8:	movw	r3, #57716	; 0xe174
   12fac:	movt	r3, #2
   12fb0:	str	r2, [r3]
   12fb4:	movw	r2, #57688	; 0xe158
   12fb8:	movt	r2, #2
   12fbc:	ldr	r2, [r2]
   12fc0:	movw	r3, #57684	; 0xe154
   12fc4:	movt	r3, #2
   12fc8:	ldrb	r3, [r3]
   12fcc:	cmp	r3, #9
   12fd0:	bne	12fe8 <__assert_fail@plt+0x19ac>
   12fd4:	asr	r3, r2, #31
   12fd8:	add	r2, r2, r3, lsr #29
   12fdc:	bic	r2, r2, #7
   12fe0:	add	r2, r2, #8
   12fe4:	b	12fec <__assert_fail@plt+0x19b0>
   12fe8:	add	r2, r2, #1
   12fec:	movw	r3, #57912	; 0xe238
   12ff0:	movt	r3, #2
   12ff4:	str	r2, [r3]
   12ff8:	cmp	r1, #0
   12ffc:	movne	r1, r2
   13000:	mov	r2, r1
   13004:	ldr	r1, [ip]
   13008:	cmn	r1, #1
   1300c:	ble	13038 <__assert_fail@plt+0x19fc>
   13010:	cmp	r1, #0
   13014:	beq	13090 <__assert_fail@plt+0x1a54>
   13018:	sub	r5, r0, #1
   1301c:	cmp	r0, #0
   13020:	ble	13064 <__assert_fail@plt+0x1a28>
   13024:	mvn	r3, #-2147483648	; 0x80000000
   13028:	udiv	r6, r3, r1
   1302c:	cmp	r6, r5
   13030:	bge	13090 <__assert_fail@plt+0x1a54>
   13034:	b	13098 <__assert_fail@plt+0x1a5c>
   13038:	cmp	r0, #0
   1303c:	ble	13080 <__assert_fail@plt+0x1a44>
   13040:	cmn	r1, #1
   13044:	beq	13090 <__assert_fail@plt+0x1a54>
   13048:	sub	r6, r0, #1
   1304c:	mov	r3, #-2147483648	; 0x80000000
   13050:	sdiv	r5, r3, r1
   13054:	mvn	r3, #-2147483648	; 0x80000000
   13058:	cmp	r5, r6
   1305c:	bge	13090 <__assert_fail@plt+0x1a54>
   13060:	b	13098 <__assert_fail@plt+0x1a5c>
   13064:	beq	13090 <__assert_fail@plt+0x1a54>
   13068:	mov	r3, #-2147483648	; 0x80000000
   1306c:	sdiv	r6, r3, r5
   13070:	mvn	r3, #-2147483648	; 0x80000000
   13074:	cmp	r6, r1
   13078:	bge	13090 <__assert_fail@plt+0x1a54>
   1307c:	b	13098 <__assert_fail@plt+0x1a5c>
   13080:	mvn	r3, #-2147483648	; 0x80000000
   13084:	sdiv	r6, r3, r1
   13088:	cmp	r0, r6
   1308c:	ble	13098 <__assert_fail@plt+0x1a5c>
   13090:	sub	r3, r0, #1
   13094:	mul	r3, r1, r3
   13098:	movw	r1, #57700	; 0xe164
   1309c:	movt	r1, #2
   130a0:	ldr	r1, [r1]
   130a4:	sub	r1, r1, r2
   130a8:	subs	r1, r1, r3
   130ac:	movvs	r1, #0
   130b0:	sdiv	r0, r1, r0
   130b4:	movw	r1, #57916	; 0xe23c
   130b8:	movt	r1, #2
   130bc:	str	r0, [r1]
   130c0:	cmp	r0, #0
   130c4:	ble	13130 <__assert_fail@plt+0x1af4>
   130c8:	cmp	lr, #0
   130cc:	beq	13100 <__assert_fail@plt+0x1ac4>
   130d0:	movw	r4, #57920	; 0xe240
   130d4:	movt	r4, #2
   130d8:	ldr	r0, [r4]
   130dc:	bl	15934 <__assert_fail@plt+0x42f8>
   130e0:	movw	r0, #57688	; 0xe158
   130e4:	movt	r0, #2
   130e8:	ldr	r0, [r0]
   130ec:	cmp	r0, #11
   130f0:	movls	r0, #11
   130f4:	add	r0, r0, #1
   130f8:	bl	19e00 <__assert_fail@plt+0x87c4>
   130fc:	str	r0, [r4]
   13100:	movw	r4, #57924	; 0xe244
   13104:	movt	r4, #2
   13108:	ldr	r0, [r4]
   1310c:	bl	15934 <__assert_fail@plt+0x42f8>
   13110:	movw	r0, #57668	; 0xe144
   13114:	movt	r0, #2
   13118:	ldr	r0, [r0]
   1311c:	cmp	r0, #8
   13120:	movle	r0, #8
   13124:	bl	19e00 <__assert_fail@plt+0x87c4>
   13128:	str	r0, [r4]
   1312c:	pop	{r4, r5, r6, sl, fp, pc}
   13130:	movw	r1, #53437	; 0xd0bd
   13134:	movt	r1, #1
   13138:	mov	r0, #0
   1313c:	mov	r2, #5
   13140:	bl	113a8 <dcgettext@plt>
   13144:	mov	r2, r0
   13148:	mov	r0, #1
   1314c:	mov	r1, #0
   13150:	bl	11450 <error@plt>
   13154:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13158:	add	fp, sp, #24
   1315c:	mov	r5, r1
   13160:	mov	r6, r0
   13164:	movw	r8, #57928	; 0xe248
   13168:	movt	r8, #2
   1316c:	mov	r0, #0
   13170:	str	r0, [r8]
   13174:	movw	r9, #57932	; 0xe24c
   13178:	movt	r9, #2
   1317c:	ldr	r0, [r9]
   13180:	bl	15934 <__assert_fail@plt+0x42f8>
   13184:	movw	r7, #57712	; 0xe170
   13188:	movt	r7, #2
   1318c:	ldr	r0, [r7]
   13190:	mov	r1, #40	; 0x28
   13194:	bl	19e9c <__assert_fail@plt+0x8860>
   13198:	mov	r4, r0
   1319c:	str	r0, [r9]
   131a0:	movw	r0, #57862	; 0xe206
   131a4:	movt	r0, #2
   131a8:	ldrb	r0, [r0]
   131ac:	cmp	r0, #1
   131b0:	beq	131f8 <__assert_fail@plt+0x1bbc>
   131b4:	cmp	r6, #1
   131b8:	blt	1324c <__assert_fail@plt+0x1c10>
   131bc:	ldr	r0, [r5]
   131c0:	mov	r1, r4
   131c4:	bl	13d0c <__assert_fail@plt+0x26d0>
   131c8:	mov	r1, r0
   131cc:	mov	r0, #0
   131d0:	cmp	r1, #0
   131d4:	beq	132f4 <__assert_fail@plt+0x1cb8>
   131d8:	ldr	r5, [r5]
   131dc:	ldr	r0, [r4]
   131e0:	bl	11558 <fileno@plt>
   131e4:	mov	r1, r0
   131e8:	mov	r0, r5
   131ec:	b	132a4 <__assert_fail@plt+0x1c68>
   131f0:	add	r5, r5, #4
   131f4:	add	r4, r4, #40	; 0x28
   131f8:	cmp	r6, #0
   131fc:	beq	1322c <__assert_fail@plt+0x1bf0>
   13200:	ldr	r0, [r5]
   13204:	mov	r1, r4
   13208:	bl	13d0c <__assert_fail@plt+0x26d0>
   1320c:	sub	r6, r6, #1
   13210:	cmp	r0, #0
   13214:	bne	131f0 <__assert_fail@plt+0x1bb4>
   13218:	ldr	r0, [r7]
   1321c:	sub	r0, r0, #1
   13220:	str	r0, [r7]
   13224:	sub	r4, r4, #40	; 0x28
   13228:	b	131f0 <__assert_fail@plt+0x1bb4>
   1322c:	ldr	r0, [r7]
   13230:	cmp	r0, #0
   13234:	beq	132f8 <__assert_fail@plt+0x1cbc>
   13238:	movw	r0, #53460	; 0xd0d4
   1323c:	movt	r0, #1
   13240:	mvn	r1, #0
   13244:	bl	13e30 <__assert_fail@plt+0x27f4>
   13248:	b	132e0 <__assert_fail@plt+0x1ca4>
   1324c:	mov	r5, #0
   13250:	movw	r1, #49166	; 0xc00e
   13254:	movt	r1, #1
   13258:	mov	r0, #0
   1325c:	mov	r2, #5
   13260:	bl	113a8 <dcgettext@plt>
   13264:	movw	r1, #57816	; 0xe1d8
   13268:	movt	r1, #2
   1326c:	ldr	r1, [r1]
   13270:	movw	r2, #57889	; 0xe221
   13274:	movt	r2, #2
   13278:	mov	r3, #1
   1327c:	strb	r3, [r2]
   13280:	strb	r5, [r4, #37]	; 0x25
   13284:	str	r1, [r4]
   13288:	stmib	r4, {r0, r5}
   1328c:	ldr	r0, [r8]
   13290:	add	r0, r0, #1
   13294:	str	r0, [r8]
   13298:	movw	r0, #53460	; 0xd0d4
   1329c:	movt	r0, #1
   132a0:	mvn	r1, #0
   132a4:	bl	13e30 <__assert_fail@plt+0x27f4>
   132a8:	mov	r0, #0
   132ac:	str	r0, [r4, #24]
   132b0:	ldr	r1, [r7]
   132b4:	subs	r1, r1, #1
   132b8:	beq	132e0 <__assert_fail@plt+0x1ca4>
   132bc:	ldm	r4, {r2, r3}
   132c0:	add	r7, r4, #40	; 0x28
   132c4:	strb	r0, [r7, #37]	; 0x25
   132c8:	stm	r7, {r2, r3}
   132cc:	str	r0, [r7, #8]
   132d0:	str	r0, [r7, #24]
   132d4:	subs	r1, r1, #1
   132d8:	add	r7, r7, #40	; 0x28
   132dc:	bne	132c4 <__assert_fail@plt+0x1c88>
   132e0:	ldr	r0, [r8]
   132e4:	movw	r1, #57936	; 0xe250
   132e8:	movt	r1, #2
   132ec:	str	r0, [r1]
   132f0:	mov	r0, #1
   132f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   132f8:	mov	r0, #0
   132fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13300:	push	{r4, r5, r6, r7, fp, lr}
   13304:	add	fp, sp, #16
   13308:	movw	r0, #57712	; 0xe170
   1330c:	movt	r0, #2
   13310:	ldr	r0, [r0]
   13314:	cmn	r0, #1
   13318:	movw	r1, #57908	; 0xe234
   1331c:	movt	r1, #2
   13320:	ble	1334c <__assert_fail@plt+0x1d10>
   13324:	cmp	r0, #0
   13328:	beq	1339c <__assert_fail@plt+0x1d60>
   1332c:	ldr	r2, [r1]
   13330:	cmn	r2, #1
   13334:	ble	13374 <__assert_fail@plt+0x1d38>
   13338:	mvn	r3, #-2147483648	; 0x80000000
   1333c:	udiv	r3, r3, r0
   13340:	cmp	r3, r2
   13344:	bge	1339c <__assert_fail@plt+0x1d60>
   13348:	b	133bc <__assert_fail@plt+0x1d80>
   1334c:	ldr	r2, [r1]
   13350:	cmn	r2, #1
   13354:	ble	1338c <__assert_fail@plt+0x1d50>
   13358:	cmn	r0, #1
   1335c:	beq	1339c <__assert_fail@plt+0x1d60>
   13360:	mov	r3, #-2147483648	; 0x80000000
   13364:	sdiv	r3, r3, r0
   13368:	cmp	r3, r2
   1336c:	bge	1339c <__assert_fail@plt+0x1d60>
   13370:	b	133bc <__assert_fail@plt+0x1d80>
   13374:	beq	1339c <__assert_fail@plt+0x1d60>
   13378:	mov	r3, #-2147483648	; 0x80000000
   1337c:	sdiv	r2, r3, r2
   13380:	cmp	r2, r0
   13384:	bge	1339c <__assert_fail@plt+0x1d60>
   13388:	b	133bc <__assert_fail@plt+0x1d80>
   1338c:	mvn	r3, #-2147483648	; 0x80000000
   13390:	sdiv	r3, r3, r0
   13394:	cmp	r2, r3
   13398:	blt	133bc <__assert_fail@plt+0x1d80>
   1339c:	ldr	r1, [r1]
   133a0:	mul	r4, r1, r0
   133a4:	adds	r5, r4, #1
   133a8:	movwvc	r0, #57916	; 0xe23c
   133ac:	movtvc	r0, #2
   133b0:	ldrvc	r0, [r0]
   133b4:	addsvc	r6, r0, #1
   133b8:	bvc	133c0 <__assert_fail@plt+0x1d84>
   133bc:	bl	12d6c <__assert_fail@plt+0x1730>
   133c0:	cmn	r6, #1
   133c4:	ble	133ec <__assert_fail@plt+0x1db0>
   133c8:	cmp	r6, #0
   133cc:	beq	13438 <__assert_fail@plt+0x1dfc>
   133d0:	cmn	r4, #1
   133d4:	ble	13410 <__assert_fail@plt+0x1dd4>
   133d8:	mvn	r0, #-2147483648	; 0x80000000
   133dc:	udiv	r0, r0, r6
   133e0:	cmp	r0, r4
   133e4:	bge	13438 <__assert_fail@plt+0x1dfc>
   133e8:	b	133bc <__assert_fail@plt+0x1d80>
   133ec:	cmn	r4, #1
   133f0:	ble	13428 <__assert_fail@plt+0x1dec>
   133f4:	cmn	r6, #1
   133f8:	beq	13438 <__assert_fail@plt+0x1dfc>
   133fc:	mov	r0, #-2147483648	; 0x80000000
   13400:	sdiv	r0, r0, r6
   13404:	cmp	r0, r4
   13408:	bge	13438 <__assert_fail@plt+0x1dfc>
   1340c:	b	133bc <__assert_fail@plt+0x1d80>
   13410:	beq	13438 <__assert_fail@plt+0x1dfc>
   13414:	mov	r0, #-2147483648	; 0x80000000
   13418:	sdiv	r0, r0, r4
   1341c:	cmp	r0, r6
   13420:	bge	13438 <__assert_fail@plt+0x1dfc>
   13424:	b	133bc <__assert_fail@plt+0x1d80>
   13428:	mvn	r0, #-2147483648	; 0x80000000
   1342c:	sdiv	r0, r0, r6
   13430:	cmp	r4, r0
   13434:	blt	133bc <__assert_fail@plt+0x1d80>
   13438:	movw	r7, #57964	; 0xe26c
   1343c:	movt	r7, #2
   13440:	ldr	r0, [r7]
   13444:	bl	15934 <__assert_fail@plt+0x42f8>
   13448:	mov	r0, r5
   1344c:	mov	r1, #4
   13450:	bl	19e9c <__assert_fail@plt+0x8860>
   13454:	str	r0, [r7]
   13458:	movw	r5, #57968	; 0xe270
   1345c:	movt	r5, #2
   13460:	ldr	r0, [r5]
   13464:	bl	15934 <__assert_fail@plt+0x42f8>
   13468:	mov	r0, r4
   1346c:	mov	r1, #4
   13470:	bl	19e9c <__assert_fail@plt+0x8860>
   13474:	str	r0, [r5]
   13478:	movw	r5, #57972	; 0xe274
   1347c:	movt	r5, #2
   13480:	ldr	r0, [r5]
   13484:	bl	15934 <__assert_fail@plt+0x42f8>
   13488:	mul	r4, r6, r4
   1348c:	movw	r6, #57873	; 0xe211
   13490:	movt	r6, #2
   13494:	ldrb	r0, [r6]
   13498:	mov	r7, #1
   1349c:	cmp	r0, #0
   134a0:	mov	r1, #1
   134a4:	movwne	r1, #2
   134a8:	mov	r0, r4
   134ac:	bl	19e9c <__assert_fail@plt+0x8860>
   134b0:	str	r0, [r5]
   134b4:	ldrb	r0, [r6]
   134b8:	cmp	r0, #0
   134bc:	movwne	r7, #2
   134c0:	mul	r0, r7, r4
   134c4:	movw	r1, #57976	; 0xe278
   134c8:	movt	r1, #2
   134cc:	str	r0, [r1]
   134d0:	pop	{r4, r5, r6, r7, fp, pc}
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	add	fp, sp, #28
   134dc:	sub	sp, sp, #28
   134e0:	str	r0, [sp, #20]
   134e4:	subs	r0, r0, #2
   134e8:	str	r1, [sp, #24]
   134ec:	sbcs	r0, r1, #0
   134f0:	bcc	1369c <__assert_fail@plt+0x2060>
   134f4:	movw	r8, #57908	; 0xe234
   134f8:	movt	r8, #2
   134fc:	movw	r9, #57712	; 0xe170
   13500:	movt	r9, #2
   13504:	mov	r4, #1
   13508:	mov	r5, #0
   1350c:	ldr	r0, [r8]
   13510:	cmp	r0, #2
   13514:	blt	13580 <__assert_fail@plt+0x1f44>
   13518:	mov	sl, #1
   1351c:	b	13530 <__assert_fail@plt+0x1ef4>
   13520:	ldr	r0, [r8]
   13524:	add	sl, sl, #1
   13528:	cmp	sl, r0
   1352c:	bge	13580 <__assert_fail@plt+0x1f44>
   13530:	ldr	r0, [r9]
   13534:	cmp	r0, #1
   13538:	blt	13520 <__assert_fail@plt+0x1ee4>
   1353c:	movw	r0, #57932	; 0xe24c
   13540:	movt	r0, #2
   13544:	ldr	r6, [r0]
   13548:	mov	r7, #0
   1354c:	b	13560 <__assert_fail@plt+0x1f24>
   13550:	add	r6, r6, #40	; 0x28
   13554:	ldr	r0, [r9]
   13558:	cmp	r7, r0
   1355c:	bge	13520 <__assert_fail@plt+0x1ee4>
   13560:	ldr	r0, [r6, #8]
   13564:	add	r7, r7, #1
   13568:	cmp	r0, #0
   1356c:	bne	13550 <__assert_fail@plt+0x1f14>
   13570:	mov	r0, r6
   13574:	mov	r1, r7
   13578:	bl	14000 <__assert_fail@plt+0x29c4>
   1357c:	b	13550 <__assert_fail@plt+0x1f14>
   13580:	mov	r0, #1
   13584:	movw	sl, #57980	; 0xe27c
   13588:	movt	sl, #2
   1358c:	strb	r0, [sl]
   13590:	ldr	r0, [r9]
   13594:	cmp	r0, #1
   13598:	blt	135e0 <__assert_fail@plt+0x1fa4>
   1359c:	movw	r0, #57932	; 0xe24c
   135a0:	movt	r0, #2
   135a4:	ldr	r6, [r0]
   135a8:	mov	r7, #0
   135ac:	b	135c0 <__assert_fail@plt+0x1f84>
   135b0:	add	r6, r6, #40	; 0x28
   135b4:	ldr	r0, [r9]
   135b8:	cmp	r7, r0
   135bc:	bge	135e0 <__assert_fail@plt+0x1fa4>
   135c0:	ldr	r0, [r6, #8]
   135c4:	add	r7, r7, #1
   135c8:	cmp	r0, #0
   135cc:	bne	135b0 <__assert_fail@plt+0x1f74>
   135d0:	mov	r0, r6
   135d4:	mov	r1, r7
   135d8:	bl	14000 <__assert_fail@plt+0x29c4>
   135dc:	b	135b0 <__assert_fail@plt+0x1f74>
   135e0:	movw	r1, #57841	; 0xe1f1
   135e4:	movt	r1, #2
   135e8:	ldrb	r1, [r1]
   135ec:	cmp	r1, #0
   135f0:	mov	r3, #2
   135f4:	bne	13628 <__assert_fail@plt+0x1fec>
   135f8:	cmp	r0, #1
   135fc:	blt	13628 <__assert_fail@plt+0x1fec>
   13600:	movw	r1, #57932	; 0xe24c
   13604:	movt	r1, #2
   13608:	ldr	r1, [r1]
   1360c:	add	r1, r1, #8
   13610:	ldr	r2, [r1]
   13614:	cmp	r2, #3
   13618:	strne	r3, [r1]
   1361c:	add	r1, r1, #40	; 0x28
   13620:	subs	r0, r0, #1
   13624:	bne	13610 <__assert_fail@plt+0x1fd4>
   13628:	bl	14194 <__assert_fail@plt+0x2b58>
   1362c:	mov	r0, #0
   13630:	strb	r0, [sl]
   13634:	movw	r0, #57936	; 0xe250
   13638:	movt	r0, #2
   1363c:	ldr	r0, [r0]
   13640:	cmp	r0, #0
   13644:	ble	13668 <__assert_fail@plt+0x202c>
   13648:	adds	r4, r4, #1
   1364c:	adc	r5, r5, #0
   13650:	ldr	r0, [sp, #20]
   13654:	subs	r0, r4, r0
   13658:	ldr	r0, [sp, #24]
   1365c:	sbcs	r0, r5, r0
   13660:	bcc	1350c <__assert_fail@plt+0x1ed0>
   13664:	b	1369c <__assert_fail@plt+0x2060>
   13668:	movw	r1, #53471	; 0xd0df
   1366c:	movt	r1, #1
   13670:	mov	r0, #0
   13674:	mov	r2, #5
   13678:	bl	113a8 <dcgettext@plt>
   1367c:	mov	r2, r0
   13680:	ldr	r0, [sp, #20]
   13684:	str	r0, [sp]
   13688:	ldr	r0, [sp, #24]
   1368c:	stmib	sp, {r0, r4, r5}
   13690:	mov	r0, #0
   13694:	mov	r1, #0
   13698:	bl	11450 <error@plt>
   1369c:	movw	r0, #57936	; 0xe250
   136a0:	movt	r0, #2
   136a4:	ldr	r1, [r0]
   136a8:	mov	r0, #0
   136ac:	cmp	r1, #0
   136b0:	movwgt	r0, #1
   136b4:	sub	sp, fp, #28
   136b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136c0:	add	fp, sp, #28
   136c4:	sub	sp, sp, #8
   136c8:	movw	r0, #57883	; 0xe21b
   136cc:	movt	r0, #2
   136d0:	ldrb	lr, [r0]
   136d4:	movw	r0, #57868	; 0xe20c
   136d8:	movt	r0, #2
   136dc:	ldr	r0, [r0]
   136e0:	mov	r3, #0
   136e4:	cmp	lr, #1
   136e8:	movw	r9, #57863	; 0xe207
   136ec:	movt	r9, #2
   136f0:	bne	13748 <__assert_fail@plt+0x210c>
   136f4:	movw	r1, #57862	; 0xe206
   136f8:	movt	r1, #2
   136fc:	ldrb	r1, [r1]
   13700:	cmp	r1, #1
   13704:	bne	13738 <__assert_fail@plt+0x20fc>
   13708:	ldrb	r1, [r9]
   1370c:	cmp	r1, #1
   13710:	bne	13738 <__assert_fail@plt+0x20fc>
   13714:	movw	r1, #57916	; 0xe23c
   13718:	movt	r1, #2
   1371c:	ldr	r1, [r1]
   13720:	add	r1, r1, r0
   13724:	movw	r2, #57912	; 0xe238
   13728:	movt	r2, #2
   1372c:	ldr	r2, [r2]
   13730:	add	r3, r1, r2
   13734:	b	13748 <__assert_fail@plt+0x210c>
   13738:	movw	r1, #57916	; 0xe23c
   1373c:	movt	r1, #2
   13740:	ldr	r1, [r1]
   13744:	add	r3, r1, r0
   13748:	movw	r1, #57876	; 0xe214
   1374c:	movt	r1, #2
   13750:	ldr	r7, [r1]
   13754:	add	r2, r7, r0
   13758:	movw	ip, #57841	; 0xe1f1
   1375c:	movt	ip, #2
   13760:	ldrb	r5, [ip]
   13764:	movw	r0, #57932	; 0xe24c
   13768:	movt	r0, #2
   1376c:	ldr	r1, [r0]
   13770:	movw	r4, #57712	; 0xe170
   13774:	movt	r4, #2
   13778:	ldr	r6, [r4]
   1377c:	mov	r0, #1
   13780:	cmp	r6, #2
   13784:	blt	1387c <__assert_fail@plt+0x2240>
   13788:	ldrb	r0, [ip]
   1378c:	ldr	r6, [r4]
   13790:	str	r6, [sp, #4]
   13794:	mov	r4, r0
   13798:	movw	r0, #57916	; 0xe23c
   1379c:	movt	r0, #2
   137a0:	ldr	r8, [r0]
   137a4:	ldrb	ip, [r9]
   137a8:	movw	r0, #57862	; 0xe206
   137ac:	movt	r0, #2
   137b0:	ldrb	r0, [r0]
   137b4:	eor	r0, r0, #1
   137b8:	str	r0, [sp]
   137bc:	mov	r0, #1
   137c0:	movw	r6, #18032	; 0x4670
   137c4:	movt	r6, #1
   137c8:	movw	sl, #17868	; 0x45cc
   137cc:	movt	sl, #1
   137d0:	b	13810 <__assert_fail@plt+0x21d4>
   137d4:	str	r2, [r1, #32]
   137d8:	and	r2, r5, #1
   137dc:	strb	r2, [r1, #36]	; 0x24
   137e0:	add	r5, r3, r7
   137e4:	cmp	lr, #0
   137e8:	mov	r2, lr
   137ec:	movne	r2, r5
   137f0:	mov	r3, lr
   137f4:	addne	r3, r8, r5
   137f8:	add	r0, r0, #1
   137fc:	add	r1, r1, #40	; 0x28
   13800:	ldr	r5, [sp, #4]
   13804:	cmp	r0, r5
   13808:	mov	r5, r4
   1380c:	bge	13870 <__assert_fail@plt+0x2234>
   13810:	ands	r5, r5, #1
   13814:	movw	r5, #17456	; 0x4430
   13818:	movt	r5, #1
   1381c:	movne	r5, r6
   13820:	movw	r9, #17360	; 0x43d0
   13824:	movt	r9, #1
   13828:	movne	r9, sl
   1382c:	str	r5, [r1, #12]
   13830:	str	r9, [r1, #16]
   13834:	mov	r5, #0
   13838:	cmp	ip, #0
   1383c:	beq	137d4 <__assert_fail@plt+0x2198>
   13840:	sub	r5, r0, #1
   13844:	clz	r5, r5
   13848:	lsr	r5, r5, #5
   1384c:	mov	r9, r4
   13850:	mov	r4, r7
   13854:	mov	r7, r6
   13858:	ldr	r6, [sp]
   1385c:	orr	r5, r5, r6
   13860:	mov	r6, r7
   13864:	mov	r7, r4
   13868:	mov	r4, r9
   1386c:	b	137d4 <__assert_fail@plt+0x2198>
   13870:	mov	r5, r4
   13874:	movw	r9, #57863	; 0xe207
   13878:	movt	r9, #2
   1387c:	cmp	r5, #0
   13880:	bne	138ac <__assert_fail@plt+0x2270>
   13884:	movw	r3, #57842	; 0xe1f2
   13888:	movt	r3, #2
   1388c:	ldrb	r3, [r3]
   13890:	cmp	r3, #0
   13894:	beq	138ac <__assert_fail@plt+0x2270>
   13898:	movw	r3, #17456	; 0x4430
   1389c:	movt	r3, #1
   138a0:	movw	r7, #17360	; 0x43d0
   138a4:	movt	r7, #1
   138a8:	b	138bc <__assert_fail@plt+0x2280>
   138ac:	movw	r3, #18032	; 0x4670
   138b0:	movt	r3, #1
   138b4:	movw	r7, #17868	; 0x45cc
   138b8:	movt	r7, #1
   138bc:	str	r3, [r1, #12]
   138c0:	str	r7, [r1, #16]
   138c4:	ldrb	r7, [r9]
   138c8:	mov	r3, #0
   138cc:	cmp	r7, #1
   138d0:	bne	138f8 <__assert_fail@plt+0x22bc>
   138d4:	sub	r0, r0, #1
   138d8:	clz	r0, r0
   138dc:	lsr	r0, r0, #5
   138e0:	movw	r3, #57862	; 0xe206
   138e4:	movt	r3, #2
   138e8:	ldrb	r3, [r3]
   138ec:	mvn	r3, r3
   138f0:	orr	r0, r0, r3
   138f4:	and	r3, r0, #1
   138f8:	str	r2, [r1, #32]
   138fc:	strb	r3, [r1, #36]	; 0x24
   13900:	sub	sp, fp, #28
   13904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1390c:	add	fp, sp, #28
   13910:	sub	sp, sp, #4
   13914:	bl	15198 <__assert_fail@plt+0x3b5c>
   13918:	bl	15288 <__assert_fail@plt+0x3c4c>
   1391c:	cmp	r0, #0
   13920:	beq	13cb4 <__assert_fail@plt+0x2678>
   13924:	movw	r0, #57880	; 0xe218
   13928:	movt	r0, #2
   1392c:	ldrb	r0, [r0]
   13930:	cmp	r0, #0
   13934:	movweq	r0, #57989	; 0xe285
   13938:	movteq	r0, #2
   1393c:	moveq	r1, #1
   13940:	strbeq	r1, [r0]
   13944:	movw	r0, #57988	; 0xe284
   13948:	movt	r0, #2
   1394c:	mov	r5, #0
   13950:	strb	r5, [r0]
   13954:	movw	r0, #57844	; 0xe1f4
   13958:	movt	r0, #2
   1395c:	ldrb	r0, [r0]
   13960:	movw	r1, #57908	; 0xe234
   13964:	movt	r1, #2
   13968:	ldr	r1, [r1]
   1396c:	lsl	r4, r1, r0
   13970:	cmp	r4, #1
   13974:	blt	13bf4 <__assert_fail@plt+0x25b8>
   13978:	mov	r8, #0
   1397c:	movw	sl, #58004	; 0xe294
   13980:	movt	sl, #2
   13984:	movw	r9, #58008	; 0xe298
   13988:	movt	r9, #2
   1398c:	movw	r6, #57873	; 0xe211
   13990:	movt	r6, #2
   13994:	mov	r5, #0
   13998:	b	139a4 <__assert_fail@plt+0x2368>
   1399c:	cmp	r4, #0
   139a0:	ble	13bf4 <__assert_fail@plt+0x25b8>
   139a4:	bl	15288 <__assert_fail@plt+0x3c4c>
   139a8:	cmp	r0, #0
   139ac:	beq	13c50 <__assert_fail@plt+0x2614>
   139b0:	movw	r0, #57996	; 0xe28c
   139b4:	movt	r0, #2
   139b8:	str	r8, [r0]
   139bc:	movw	r0, #58000	; 0xe290
   139c0:	movt	r0, #2
   139c4:	str	r8, [r0]
   139c8:	str	r8, [sl]
   139cc:	movw	r0, #57988	; 0xe284
   139d0:	movt	r0, #2
   139d4:	strb	r8, [r0]
   139d8:	movw	r0, #58014	; 0xe29e
   139dc:	movt	r0, #2
   139e0:	strb	r8, [r0]
   139e4:	movw	r0, #58015	; 0xe29f
   139e8:	movt	r0, #2
   139ec:	mov	r1, #1
   139f0:	strb	r1, [r0]
   139f4:	movw	r0, #57712	; 0xe170
   139f8:	movt	r0, #2
   139fc:	ldr	r0, [r0]
   13a00:	cmp	r0, #1
   13a04:	blt	13bac <__assert_fail@plt+0x2570>
   13a08:	str	r4, [sp]
   13a0c:	movw	r0, #57932	; 0xe24c
   13a10:	movt	r0, #2
   13a14:	ldr	r4, [r0]
   13a18:	mov	r7, #0
   13a1c:	b	13a3c <__assert_fail@plt+0x2400>
   13a20:	add	r7, r7, #1
   13a24:	add	r4, r4, #40	; 0x28
   13a28:	movw	r0, #57712	; 0xe170
   13a2c:	movt	r0, #2
   13a30:	ldr	r0, [r0]
   13a34:	cmp	r7, r0
   13a38:	bge	13b80 <__assert_fail@plt+0x2544>
   13a3c:	str	r8, [r9]
   13a40:	ldr	r0, [r4, #28]
   13a44:	cmp	r0, #0
   13a48:	bgt	13a58 <__assert_fail@plt+0x241c>
   13a4c:	ldr	r0, [r4, #8]
   13a50:	cmp	r0, #1
   13a54:	bne	13b20 <__assert_fail@plt+0x24e4>
   13a58:	movw	r0, #58012	; 0xe29c
   13a5c:	movt	r0, #2
   13a60:	strb	r8, [r0]
   13a64:	ldr	r0, [r4, #32]
   13a68:	movw	r1, #57992	; 0xe288
   13a6c:	movt	r1, #2
   13a70:	str	r0, [r1]
   13a74:	ldr	r1, [r4, #12]
   13a78:	mov	r0, r4
   13a7c:	blx	r1
   13a80:	cmp	r0, #0
   13a84:	moveq	r0, r4
   13a88:	bleq	15320 <__assert_fail@plt+0x3ce4>
   13a8c:	movw	r0, #57988	; 0xe284
   13a90:	movt	r0, #2
   13a94:	ldrb	r0, [r0]
   13a98:	ldr	r1, [r4, #28]
   13a9c:	sub	r2, r1, #1
   13aa0:	str	r2, [r4, #28]
   13aa4:	and	r2, r5, #1
   13aa8:	orrs	r5, r0, r2
   13aac:	movwne	r5, #1
   13ab0:	cmp	r1, #1
   13ab4:	bgt	13ac4 <__assert_fail@plt+0x2488>
   13ab8:	bl	15288 <__assert_fail@plt+0x3c4c>
   13abc:	cmp	r0, #0
   13ac0:	beq	13b80 <__assert_fail@plt+0x2544>
   13ac4:	movw	r0, #57862	; 0xe206
   13ac8:	movt	r0, #2
   13acc:	ldrb	r0, [r0]
   13ad0:	cmp	r0, #1
   13ad4:	bne	13b64 <__assert_fail@plt+0x2528>
   13ad8:	ldr	r0, [r4, #8]
   13adc:	cmp	r0, #0
   13ae0:	beq	13b64 <__assert_fail@plt+0x2528>
   13ae4:	movw	r1, #58015	; 0xe29f
   13ae8:	movt	r1, #2
   13aec:	ldrb	r1, [r1]
   13af0:	cmp	r1, #1
   13af4:	beq	13b48 <__assert_fail@plt+0x250c>
   13af8:	cmp	r0, #3
   13afc:	beq	13b5c <__assert_fail@plt+0x2520>
   13b00:	cmp	r0, #2
   13b04:	bne	13b64 <__assert_fail@plt+0x2528>
   13b08:	movw	r0, #58012	; 0xe29c
   13b0c:	movt	r0, #2
   13b10:	ldrb	r0, [r0]
   13b14:	cmp	r0, #1
   13b18:	beq	13b5c <__assert_fail@plt+0x2520>
   13b1c:	b	13b64 <__assert_fail@plt+0x2528>
   13b20:	movw	r0, #57862	; 0xe206
   13b24:	movt	r0, #2
   13b28:	ldrb	r0, [r0]
   13b2c:	cmp	r0, #1
   13b30:	bne	13b64 <__assert_fail@plt+0x2528>
   13b34:	movw	r0, #58015	; 0xe29f
   13b38:	movt	r0, #2
   13b3c:	ldrb	r0, [r0]
   13b40:	cmp	r0, #1
   13b44:	bne	13b5c <__assert_fail@plt+0x2520>
   13b48:	movw	r0, #58014	; 0xe29e
   13b4c:	movt	r0, #2
   13b50:	mov	r1, #1
   13b54:	strb	r1, [r0]
   13b58:	b	13b64 <__assert_fail@plt+0x2528>
   13b5c:	mov	r0, r4
   13b60:	bl	14f68 <__assert_fail@plt+0x392c>
   13b64:	ldrb	r0, [r6]
   13b68:	cmp	r0, #1
   13b6c:	bne	13a20 <__assert_fail@plt+0x23e4>
   13b70:	ldr	r0, [sl]
   13b74:	add	r0, r0, #1
   13b78:	str	r0, [sl]
   13b7c:	b	13a20 <__assert_fail@plt+0x23e4>
   13b80:	movw	r0, #57988	; 0xe284
   13b84:	movt	r0, #2
   13b88:	ldrb	r0, [r0]
   13b8c:	cmp	r0, #0
   13b90:	beq	13ba8 <__assert_fail@plt+0x256c>
   13b94:	mov	r0, #10
   13b98:	bl	11630 <putchar_unlocked@plt>
   13b9c:	ldr	r4, [sp]
   13ba0:	sub	r4, r4, #1
   13ba4:	b	13bac <__assert_fail@plt+0x2570>
   13ba8:	ldr	r4, [sp]
   13bac:	bl	15288 <__assert_fail@plt+0x3c4c>
   13bb0:	cmp	r0, #0
   13bb4:	bne	13bcc <__assert_fail@plt+0x2590>
   13bb8:	movw	r0, #57880	; 0xe218
   13bbc:	movt	r0, #2
   13bc0:	ldrb	r0, [r0]
   13bc4:	cmp	r0, #0
   13bc8:	bne	13bf4 <__assert_fail@plt+0x25b8>
   13bcc:	movw	r0, #57844	; 0xe1f4
   13bd0:	movt	r0, #2
   13bd4:	ldrb	r0, [r0]
   13bd8:	and	r0, r5, r0
   13bdc:	tst	r0, #1
   13be0:	beq	1399c <__assert_fail@plt+0x2360>
   13be4:	mov	r0, #10
   13be8:	bl	11630 <putchar_unlocked@plt>
   13bec:	sub	r4, r4, #1
   13bf0:	b	1399c <__assert_fail@plt+0x2360>
   13bf4:	cmp	r4, #0
   13bf8:	bne	13c50 <__assert_fail@plt+0x2614>
   13bfc:	movw	r0, #57712	; 0xe170
   13c00:	movt	r0, #2
   13c04:	ldr	r0, [r0]
   13c08:	cmp	r0, #1
   13c0c:	blt	13c50 <__assert_fail@plt+0x2614>
   13c10:	movw	r0, #57712	; 0xe170
   13c14:	movt	r0, #2
   13c18:	ldr	r0, [r0]
   13c1c:	movw	r1, #57932	; 0xe24c
   13c20:	movt	r1, #2
   13c24:	ldr	r1, [r1]
   13c28:	add	r1, r1, #37	; 0x25
   13c2c:	mov	r2, #0
   13c30:	mov	r3, #1
   13c34:	ldr	r7, [r1, #-29]	; 0xffffffe3
   13c38:	cmp	r7, #0
   13c3c:	strbeq	r3, [r1]
   13c40:	add	r2, r2, #1
   13c44:	add	r1, r1, #40	; 0x28
   13c48:	cmp	r2, r0
   13c4c:	blt	13c34 <__assert_fail@plt+0x25f8>
   13c50:	ands	r0, r5, #1
   13c54:	movw	r1, #57988	; 0xe284
   13c58:	movt	r1, #2
   13c5c:	strb	r0, [r1]
   13c60:	beq	13c78 <__assert_fail@plt+0x263c>
   13c64:	movw	r0, #57880	; 0xe218
   13c68:	movt	r0, #2
   13c6c:	ldrb	r0, [r0]
   13c70:	cmp	r0, #0
   13c74:	beq	13cc0 <__assert_fail@plt+0x2684>
   13c78:	movw	r0, #57881	; 0xe219
   13c7c:	movt	r0, #2
   13c80:	ldrb	r0, [r0]
   13c84:	cmp	r0, #1
   13c88:	bne	13cc8 <__assert_fail@plt+0x268c>
   13c8c:	movw	r4, #58013	; 0xe29d
   13c90:	movt	r4, #2
   13c94:	ldrb	r0, [r4]
   13c98:	cmp	r0, #1
   13c9c:	bne	13cc8 <__assert_fail@plt+0x268c>
   13ca0:	mov	r0, #12
   13ca4:	bl	11630 <putchar_unlocked@plt>
   13ca8:	mov	r0, #0
   13cac:	strb	r0, [r4]
   13cb0:	b	13cc8 <__assert_fail@plt+0x268c>
   13cb4:	mov	r0, #0
   13cb8:	sub	sp, fp, #28
   13cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cc0:	add	r0, r4, #5
   13cc4:	bl	153a4 <__assert_fail@plt+0x3d68>
   13cc8:	movw	r0, #57896	; 0xe228
   13ccc:	movt	r0, #2
   13cd0:	ldrd	r2, [r0]
   13cd4:	adds	r2, r2, #1
   13cd8:	adc	r3, r3, #0
   13cdc:	strd	r2, [r0]
   13ce0:	movw	r0, #57704	; 0xe168
   13ce4:	movt	r0, #2
   13ce8:	ldrd	r4, [r0]
   13cec:	mov	r0, #0
   13cf0:	subs	r1, r4, r2
   13cf4:	sbcs	r1, r5, r3
   13cf8:	bcc	13d04 <__assert_fail@plt+0x26c8>
   13cfc:	bl	14194 <__assert_fail@plt+0x2b58>
   13d00:	mov	r0, #1
   13d04:	sub	sp, fp, #28
   13d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d0c:	push	{r4, r5, r6, sl, fp, lr}
   13d10:	add	fp, sp, #16
   13d14:	mov	r5, r1
   13d18:	mov	r4, r0
   13d1c:	movw	r1, #55889	; 0xda51
   13d20:	movt	r1, #1
   13d24:	bl	11318 <strcmp@plt>
   13d28:	cmp	r0, #0
   13d2c:	beq	13d4c <__assert_fail@plt+0x2710>
   13d30:	str	r4, [r5, #4]
   13d34:	movw	r1, #48828	; 0xbebc
   13d38:	movt	r1, #1
   13d3c:	mov	r0, r4
   13d40:	bl	15884 <__assert_fail@plt+0x4248>
   13d44:	str	r0, [r5]
   13d48:	b	13d84 <__assert_fail@plt+0x2748>
   13d4c:	movw	r1, #49166	; 0xc00e
   13d50:	movt	r1, #1
   13d54:	mov	r0, #0
   13d58:	mov	r2, #5
   13d5c:	bl	113a8 <dcgettext@plt>
   13d60:	str	r0, [r5, #4]
   13d64:	movw	r0, #57816	; 0xe1d8
   13d68:	movt	r0, #2
   13d6c:	ldr	r0, [r0]
   13d70:	str	r0, [r5]
   13d74:	movw	r0, #57889	; 0xe221
   13d78:	movt	r0, #2
   13d7c:	mov	r1, #1
   13d80:	strb	r1, [r0]
   13d84:	ldr	r0, [r5]
   13d88:	cmp	r0, #0
   13d8c:	beq	13dc4 <__assert_fail@plt+0x2788>
   13d90:	mov	r1, #2
   13d94:	bl	15740 <__assert_fail@plt+0x4104>
   13d98:	mov	r0, #0
   13d9c:	strb	r0, [r5, #37]	; 0x25
   13da0:	str	r0, [r5, #8]
   13da4:	movw	r0, #57928	; 0xe248
   13da8:	movt	r0, #2
   13dac:	ldr	r1, [r0]
   13db0:	add	r1, r1, #1
   13db4:	str	r1, [r0]
   13db8:	mov	r5, #1
   13dbc:	mov	r0, r5
   13dc0:	pop	{r4, r5, r6, sl, fp, pc}
   13dc4:	movw	r0, #57890	; 0xe222
   13dc8:	movt	r0, #2
   13dcc:	mov	r1, #1
   13dd0:	strb	r1, [r0]
   13dd4:	movw	r0, #57872	; 0xe210
   13dd8:	movt	r0, #2
   13ddc:	ldrb	r0, [r0]
   13de0:	mov	r5, #0
   13de4:	cmp	r0, #0
   13de8:	beq	13df4 <__assert_fail@plt+0x27b8>
   13dec:	mov	r0, r5
   13df0:	pop	{r4, r5, r6, sl, fp, pc}
   13df4:	bl	1151c <__errno_location@plt>
   13df8:	ldr	r6, [r0]
   13dfc:	mov	r5, #0
   13e00:	mov	r0, #0
   13e04:	mov	r1, #3
   13e08:	mov	r2, r4
   13e0c:	bl	18e3c <__assert_fail@plt+0x7800>
   13e10:	mov	r3, r0
   13e14:	movw	r2, #54599	; 0xd547
   13e18:	movt	r2, #1
   13e1c:	mov	r0, #0
   13e20:	mov	r1, r6
   13e24:	bl	11450 <error@plt>
   13e28:	mov	r0, r5
   13e2c:	pop	{r4, r5, r6, sl, fp, pc}
   13e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e34:	add	fp, sp, #28
   13e38:	sub	sp, sp, #196	; 0xc4
   13e3c:	mov	r5, r1
   13e40:	mov	r4, r0
   13e44:	movw	r1, #55889	; 0xda51
   13e48:	movt	r1, #1
   13e4c:	bl	11318 <strcmp@plt>
   13e50:	cmp	r0, #0
   13e54:	mvneq	r5, #0
   13e58:	cmp	r5, #0
   13e5c:	bmi	13e74 <__assert_fail@plt+0x2838>
   13e60:	add	r1, sp, #88	; 0x58
   13e64:	mov	r0, r5
   13e68:	bl	1bdf0 <__assert_fail@plt+0xa7b4>
   13e6c:	cmp	r0, #0
   13e70:	beq	13e9c <__assert_fail@plt+0x2860>
   13e74:	movw	r6, #57944	; 0xe258
   13e78:	movt	r6, #2
   13e7c:	ldr	r0, [r6]
   13e80:	cmp	r0, #0
   13e84:	bne	13e94 <__assert_fail@plt+0x2858>
   13e88:	movw	r0, #57944	; 0xe258
   13e8c:	movt	r0, #2
   13e90:	bl	15a04 <__assert_fail@plt+0x43c8>
   13e94:	ldrd	r0, [r6]
   13e98:	b	13eb0 <__assert_fail@plt+0x2874>
   13e9c:	add	r0, sp, #32
   13ea0:	add	r1, sp, #88	; 0x58
   13ea4:	bl	19470 <__assert_fail@plt+0x7e34>
   13ea8:	ldr	r0, [sp, #32]
   13eac:	ldr	r1, [sp, #36]	; 0x24
   13eb0:	str	r1, [sp, #84]	; 0x54
   13eb4:	str	r0, [sp, #80]	; 0x50
   13eb8:	movw	sl, #57884	; 0xe21c
   13ebc:	movt	sl, #2
   13ec0:	ldr	r0, [sl]
   13ec4:	ldr	r9, [sp, #84]	; 0x54
   13ec8:	add	r1, sp, #80	; 0x50
   13ecc:	add	r2, sp, #32
   13ed0:	bl	19558 <__assert_fail@plt+0x7f1c>
   13ed4:	cmp	r0, #0
   13ed8:	beq	13f3c <__assert_fail@plt+0x2900>
   13edc:	movw	r0, #57848	; 0xe1f8
   13ee0:	movt	r0, #2
   13ee4:	ldr	r2, [r0]
   13ee8:	ldr	r0, [sl]
   13eec:	stm	sp, {r0, r9}
   13ef0:	add	r8, sp, #32
   13ef4:	mov	r0, #0
   13ef8:	mvn	r1, #0
   13efc:	mov	r3, r8
   13f00:	bl	15eb8 <__assert_fail@plt+0x487c>
   13f04:	add	r7, r0, #1
   13f08:	mov	r0, r7
   13f0c:	bl	19e00 <__assert_fail@plt+0x87c4>
   13f10:	mov	r6, r0
   13f14:	movw	r0, #57848	; 0xe1f8
   13f18:	movt	r0, #2
   13f1c:	ldr	r2, [r0]
   13f20:	ldr	r0, [sl]
   13f24:	stm	sp, {r0, r9}
   13f28:	mov	r0, r6
   13f2c:	mov	r1, r7
   13f30:	mov	r3, r8
   13f34:	bl	15eb8 <__assert_fail@plt+0x487c>
   13f38:	b	13f70 <__assert_fail@plt+0x2934>
   13f3c:	mov	r0, #33	; 0x21
   13f40:	bl	19e00 <__assert_fail@plt+0x87c4>
   13f44:	mov	r6, r0
   13f48:	ldr	r0, [sp, #80]	; 0x50
   13f4c:	add	r1, sp, #11
   13f50:	bl	13ff4 <__assert_fail@plt+0x29b8>
   13f54:	stm	sp, {r0, r9}
   13f58:	movw	r3, #53463	; 0xd0d7
   13f5c:	movt	r3, #1
   13f60:	mov	r0, r6
   13f64:	mov	r1, #1
   13f68:	mov	r2, #33	; 0x21
   13f6c:	bl	11528 <__sprintf_chk@plt>
   13f70:	movw	r7, #57952	; 0xe260
   13f74:	movt	r7, #2
   13f78:	ldr	r0, [r7]
   13f7c:	bl	15934 <__assert_fail@plt+0x42f8>
   13f80:	str	r6, [r7]
   13f84:	movw	r0, #53460	; 0xd0d4
   13f88:	movt	r0, #1
   13f8c:	cmp	r5, #0
   13f90:	movmi	r4, r0
   13f94:	movw	r0, #57856	; 0xe200
   13f98:	movt	r0, #2
   13f9c:	ldr	r0, [r0]
   13fa0:	cmp	r0, #0
   13fa4:	movne	r4, r0
   13fa8:	movw	r5, #57956	; 0xe264
   13fac:	movt	r5, #2
   13fb0:	str	r4, [r5]
   13fb4:	movw	r0, #57700	; 0xe164
   13fb8:	movt	r0, #2
   13fbc:	ldr	r4, [r0]
   13fc0:	mov	r0, r6
   13fc4:	mov	r1, #0
   13fc8:	bl	15b4c <__assert_fail@plt+0x4510>
   13fcc:	sub	r4, r4, r0
   13fd0:	ldr	r0, [r5]
   13fd4:	mov	r1, #0
   13fd8:	bl	15b4c <__assert_fail@plt+0x4510>
   13fdc:	sub	r0, r4, r0
   13fe0:	movw	r1, #57960	; 0xe268
   13fe4:	movt	r1, #2
   13fe8:	str	r0, [r1]
   13fec:	sub	sp, fp, #28
   13ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff4:	mov	r2, r1
   13ff8:	asr	r1, r0, #31
   13ffc:	b	15a8c <__assert_fail@plt+0x4450>
   14000:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14004:	add	fp, sp, #24
   14008:	mov	r8, r1
   1400c:	mov	r4, r0
   14010:	mov	r5, r0
   14014:	ldr	r6, [r5], #37	; 0x25
   14018:	mov	r0, r6
   1401c:	bl	1139c <getc_unlocked@plt>
   14020:	cmp	r0, #12
   14024:	bne	14064 <__assert_fail@plt+0x2a28>
   14028:	ldrb	r0, [r5]
   1402c:	cmp	r0, #0
   14030:	beq	14070 <__assert_fail@plt+0x2a34>
   14034:	mov	r0, r6
   14038:	bl	1139c <getc_unlocked@plt>
   1403c:	cmp	r0, #10
   14040:	bne	1404c <__assert_fail@plt+0x2a10>
   14044:	mov	r0, r6
   14048:	bl	1139c <getc_unlocked@plt>
   1404c:	mov	r9, #0
   14050:	mov	r5, r4
   14054:	strb	r9, [r5, #37]!	; 0x25
   14058:	cmp	r0, #12
   1405c:	beq	1407c <__assert_fail@plt+0x2a40>
   14060:	b	14084 <__assert_fail@plt+0x2a48>
   14064:	mov	r9, #0
   14068:	strb	r9, [r5]
   1406c:	b	14084 <__assert_fail@plt+0x2a48>
   14070:	mov	r0, #0
   14074:	mov	r5, r4
   14078:	strb	r0, [r5, #37]!	; 0x25
   1407c:	mov	r9, #1
   14080:	mov	r0, #12
   14084:	movw	r7, #57980	; 0xe27c
   14088:	movt	r7, #2
   1408c:	ldrb	r1, [r7]
   14090:	strb	r1, [r5]
   14094:	cmn	r0, #1
   14098:	beq	140bc <__assert_fail@plt+0x2a80>
   1409c:	cmp	r0, #10
   140a0:	beq	14148 <__assert_fail@plt+0x2b0c>
   140a4:	cmp	r0, #12
   140a8:	beq	140c8 <__assert_fail@plt+0x2a8c>
   140ac:	mov	r0, r6
   140b0:	bl	1139c <getc_unlocked@plt>
   140b4:	cmn	r0, #1
   140b8:	bne	1409c <__assert_fail@plt+0x2a60>
   140bc:	mov	r0, r4
   140c0:	bl	142ac <__assert_fail@plt+0x2c70>
   140c4:	b	14148 <__assert_fail@plt+0x2b0c>
   140c8:	ldrb	r0, [r7]
   140cc:	cmp	r0, #1
   140d0:	bne	14128 <__assert_fail@plt+0x2aec>
   140d4:	movw	r0, #57862	; 0xe206
   140d8:	movt	r0, #2
   140dc:	ldrb	r0, [r0]
   140e0:	cmp	r0, #0
   140e4:	beq	140f4 <__assert_fail@plt+0x2ab8>
   140e8:	mov	r0, #0
   140ec:	strb	r0, [r5]
   140f0:	b	14128 <__assert_fail@plt+0x2aec>
   140f4:	movw	r0, #57712	; 0xe170
   140f8:	movt	r0, #2
   140fc:	ldr	r0, [r0]
   14100:	cmp	r0, #0
   14104:	beq	14128 <__assert_fail@plt+0x2aec>
   14108:	movw	r1, #57932	; 0xe24c
   1410c:	movt	r1, #2
   14110:	ldr	r1, [r1]
   14114:	add	r1, r1, #37	; 0x25
   14118:	mov	r2, #0
   1411c:	strb	r2, [r1], #40	; 0x28
   14120:	subs	r0, r0, #1
   14124:	bne	1411c <__assert_fail@plt+0x2ae0>
   14128:	mov	r0, r6
   1412c:	bl	1139c <getc_unlocked@plt>
   14130:	cmp	r0, #10
   14134:	beq	14140 <__assert_fail@plt+0x2b04>
   14138:	mov	r1, r6
   1413c:	bl	11510 <ungetc@plt>
   14140:	mov	r0, r4
   14144:	bl	14224 <__assert_fail@plt+0x2be8>
   14148:	movw	r0, #57864	; 0xe208
   1414c:	movt	r0, #2
   14150:	ldrb	r0, [r0]
   14154:	cmp	r0, #0
   14158:	bne	14190 <__assert_fail@plt+0x2b54>
   1415c:	subs	r0, r8, #1
   14160:	movwne	r0, #1
   14164:	movw	r1, #57862	; 0xe206
   14168:	movt	r1, #2
   1416c:	ldrb	r1, [r1]
   14170:	and	r0, r0, r1
   14174:	orrs	r0, r9, r0
   14178:	bne	14190 <__assert_fail@plt+0x2b54>
   1417c:	movw	r0, #57716	; 0xe174
   14180:	movt	r0, #2
   14184:	ldr	r1, [r0]
   14188:	add	r1, r1, #1
   1418c:	str	r1, [r0]
   14190:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14194:	push	{fp, lr}
   14198:	mov	fp, sp
   1419c:	movw	r0, #57932	; 0xe24c
   141a0:	movt	r0, #2
   141a4:	ldr	ip, [r0]
   141a8:	movw	r0, #57712	; 0xe170
   141ac:	movt	r0, #2
   141b0:	ldr	r2, [r0]
   141b4:	cmp	r2, #0
   141b8:	movw	r1, #57936	; 0xe250
   141bc:	movt	r1, #2
   141c0:	beq	141fc <__assert_fail@plt+0x2bc0>
   141c4:	add	r3, ip, #8
   141c8:	mov	lr, #0
   141cc:	b	141dc <__assert_fail@plt+0x2ba0>
   141d0:	add	r3, r3, #40	; 0x28
   141d4:	subs	r2, r2, #1
   141d8:	beq	141fc <__assert_fail@plt+0x2bc0>
   141dc:	ldr	r0, [r3]
   141e0:	cmp	r0, #2
   141e4:	bne	141d0 <__assert_fail@plt+0x2b94>
   141e8:	str	lr, [r3]
   141ec:	ldr	r0, [r1]
   141f0:	add	r0, r0, #1
   141f4:	str	r0, [r1]
   141f8:	b	141d0 <__assert_fail@plt+0x2b94>
   141fc:	movw	r0, #57841	; 0xe1f1
   14200:	movt	r0, #2
   14204:	ldrb	r0, [r0]
   14208:	cmp	r0, #0
   1420c:	popne	{fp, pc}
   14210:	ldr	r0, [ip, #8]
   14214:	subs	r0, r0, #3
   14218:	movwne	r0, #1
   1421c:	str	r0, [r1]
   14220:	pop	{fp, pc}
   14224:	movw	r1, #57862	; 0xe206
   14228:	movt	r1, #2
   1422c:	ldrb	r1, [r1]
   14230:	cmp	r1, #0
   14234:	beq	14244 <__assert_fail@plt+0x2c08>
   14238:	mov	r1, #2
   1423c:	str	r1, [r0, #8]
   14240:	b	1428c <__assert_fail@plt+0x2c50>
   14244:	movw	r1, #57712	; 0xe170
   14248:	movt	r1, #2
   1424c:	ldr	r1, [r1]
   14250:	cmp	r1, #0
   14254:	beq	1428c <__assert_fail@plt+0x2c50>
   14258:	movw	r2, #57841	; 0xe1f1
   1425c:	movt	r2, #2
   14260:	ldrb	r3, [r2]
   14264:	mov	r2, #1
   14268:	cmp	r3, #0
   1426c:	movwne	r2, #2
   14270:	movw	r3, #57932	; 0xe24c
   14274:	movt	r3, #2
   14278:	ldr	r3, [r3]
   1427c:	add	r3, r3, #8
   14280:	str	r2, [r3], #40	; 0x28
   14284:	subs	r1, r1, #1
   14288:	bne	14280 <__assert_fail@plt+0x2c44>
   1428c:	mov	r1, #0
   14290:	str	r1, [r0, #28]
   14294:	movw	r0, #57936	; 0xe250
   14298:	movt	r0, #2
   1429c:	ldr	r1, [r0]
   142a0:	sub	r1, r1, #1
   142a4:	str	r1, [r0]
   142a8:	bx	lr
   142ac:	push	{r4, r5, r6, sl, fp, lr}
   142b0:	add	fp, sp, #16
   142b4:	mov	r4, r0
   142b8:	ldr	r0, [r0, #8]
   142bc:	cmp	r0, #3
   142c0:	popeq	{r4, r5, r6, sl, fp, pc}
   142c4:	bl	1151c <__errno_location@plt>
   142c8:	mov	r6, r0
   142cc:	ldr	r5, [r0]
   142d0:	ldr	r0, [r4]
   142d4:	bl	11438 <ferror_unlocked@plt>
   142d8:	cmp	r0, #0
   142dc:	moveq	r5, r0
   142e0:	ldr	r0, [r4]
   142e4:	bl	11558 <fileno@plt>
   142e8:	mov	r1, r0
   142ec:	ldr	r0, [r4]
   142f0:	cmp	r1, #0
   142f4:	beq	1439c <__assert_fail@plt+0x2d60>
   142f8:	bl	1577c <__assert_fail@plt+0x4140>
   142fc:	cmp	r5, #0
   14300:	bne	1430c <__assert_fail@plt+0x2cd0>
   14304:	cmp	r0, #0
   14308:	ldrne	r5, [r6]
   1430c:	cmp	r5, #0
   14310:	bne	143a8 <__assert_fail@plt+0x2d6c>
   14314:	movw	r0, #57862	; 0xe206
   14318:	movt	r0, #2
   1431c:	ldrb	r0, [r0]
   14320:	cmp	r0, #0
   14324:	beq	1433c <__assert_fail@plt+0x2d00>
   14328:	mov	r0, #0
   1432c:	str	r0, [r4, #28]
   14330:	mov	r0, #3
   14334:	str	r0, [r4, #8]
   14338:	b	14384 <__assert_fail@plt+0x2d48>
   1433c:	movw	r0, #57712	; 0xe170
   14340:	movt	r0, #2
   14344:	ldr	r0, [r0]
   14348:	cmp	r0, #0
   1434c:	beq	14384 <__assert_fail@plt+0x2d48>
   14350:	movw	r1, #57932	; 0xe24c
   14354:	movt	r1, #2
   14358:	ldr	r1, [r1]
   1435c:	add	r1, r1, #24
   14360:	mov	r2, #3
   14364:	mov	r3, #0
   14368:	str	r2, [r1, #-16]
   1436c:	ldr	r6, [r1]
   14370:	cmp	r6, #0
   14374:	streq	r3, [r1, #4]
   14378:	add	r1, r1, #40	; 0x28
   1437c:	subs	r0, r0, #1
   14380:	bne	14368 <__assert_fail@plt+0x2d2c>
   14384:	movw	r0, #57936	; 0xe250
   14388:	movt	r0, #2
   1438c:	ldr	r1, [r0]
   14390:	sub	r1, r1, #1
   14394:	str	r1, [r0]
   14398:	pop	{r4, r5, r6, sl, fp, pc}
   1439c:	bl	115dc <clearerr_unlocked@plt>
   143a0:	cmp	r5, #0
   143a4:	beq	14314 <__assert_fail@plt+0x2cd8>
   143a8:	ldr	r2, [r4, #4]
   143ac:	mov	r0, #0
   143b0:	mov	r1, #3
   143b4:	bl	18e3c <__assert_fail@plt+0x7800>
   143b8:	mov	r3, r0
   143bc:	movw	r2, #54599	; 0xd547
   143c0:	movt	r2, #1
   143c4:	mov	r0, #1
   143c8:	mov	r1, r5
   143cc:	bl	11450 <error@plt>
   143d0:	push	{r4, r5, r6, sl, fp, lr}
   143d4:	add	fp, sp, #16
   143d8:	mov	r4, r0
   143dc:	movw	r0, #57976	; 0xe278
   143e0:	movt	r0, #2
   143e4:	ldr	r0, [r0]
   143e8:	movw	r5, #57984	; 0xe280
   143ec:	movt	r5, #2
   143f0:	ldr	r1, [r5]
   143f4:	cmp	r1, r0
   143f8:	movw	r6, #57972	; 0xe274
   143fc:	movt	r6, #2
   14400:	bcc	14418 <__assert_fail@plt+0x2ddc>
   14404:	ldr	r0, [r6]
   14408:	movw	r1, #57976	; 0xe278
   1440c:	movt	r1, #2
   14410:	bl	19ebc <__assert_fail@plt+0x8880>
   14414:	str	r0, [r6]
   14418:	ldr	r0, [r5]
   1441c:	add	r1, r0, #1
   14420:	str	r1, [r5]
   14424:	ldr	r1, [r6]
   14428:	strb	r4, [r1, r0]
   1442c:	pop	{r4, r5, r6, sl, fp, pc}
   14430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14434:	add	fp, sp, #28
   14438:	sub	sp, sp, #4
   1443c:	mov	r4, r0
   14440:	ldr	r5, [r0, #20]
   14444:	add	r0, r5, #1
   14448:	str	r0, [r4, #20]
   1444c:	movw	r1, #57964	; 0xe26c
   14450:	movt	r1, #2
   14454:	ldr	r1, [r1]
   14458:	ldr	sl, [r1, r0, lsl #2]
   1445c:	ldr	r7, [r1, r5, lsl #2]
   14460:	movw	r9, #57988	; 0xe284
   14464:	movt	r9, #2
   14468:	mov	r0, #1
   1446c:	strb	r0, [r9]
   14470:	movw	r0, #57972	; 0xe274
   14474:	movt	r0, #2
   14478:	ldr	r8, [r0]
   1447c:	movw	r0, #57989	; 0xe285
   14480:	movt	r0, #2
   14484:	ldrb	r0, [r0]
   14488:	cmp	r0, #1
   1448c:	bleq	14a24 <__assert_fail@plt+0x33e8>
   14490:	ldr	r0, [r4, #8]
   14494:	cmp	r0, #1
   14498:	bne	144e8 <__assert_fail@plt+0x2eac>
   1449c:	movw	r0, #57932	; 0xe24c
   144a0:	movt	r0, #2
   144a4:	ldr	r0, [r0]
   144a8:	movw	r2, #57712	; 0xe170
   144ac:	movt	r2, #2
   144b0:	ldr	r1, [r2]
   144b4:	cmp	r1, #1
   144b8:	blt	144dc <__assert_fail@plt+0x2ea0>
   144bc:	add	r1, r0, #8
   144c0:	ldr	r2, [r2]
   144c4:	mov	r3, #0
   144c8:	mov	r6, #2
   144cc:	str	r6, [r1], #40	; 0x28
   144d0:	add	r3, r3, #1
   144d4:	cmp	r3, r2
   144d8:	blt	144cc <__assert_fail@plt+0x2e90>
   144dc:	ldr	r0, [r0, #28]
   144e0:	cmp	r0, #0
   144e4:	ble	145a8 <__assert_fail@plt+0x2f6c>
   144e8:	movw	r6, #57992	; 0xe288
   144ec:	movt	r6, #2
   144f0:	ldr	r0, [r6]
   144f4:	movw	r9, #57876	; 0xe214
   144f8:	movt	r9, #2
   144fc:	ldr	r1, [r9]
   14500:	cmp	r0, r1
   14504:	ble	14518 <__assert_fail@plt+0x2edc>
   14508:	sub	r0, r0, r1
   1450c:	bl	14b54 <__assert_fail@plt+0x3518>
   14510:	mov	r0, #0
   14514:	str	r0, [r6]
   14518:	movw	r0, #57873	; 0xe211
   1451c:	movt	r0, #2
   14520:	ldrb	r0, [r0]
   14524:	cmp	r0, #1
   14528:	bleq	14bb8 <__assert_fail@plt+0x357c>
   1452c:	cmp	r7, sl
   14530:	beq	1454c <__assert_fail@plt+0x2f10>
   14534:	add	r6, r8, r7
   14538:	sub	r7, sl, r7
   1453c:	ldrb	r0, [r6], #1
   14540:	bl	145cc <__assert_fail@plt+0x2f90>
   14544:	subs	r7, r7, #1
   14548:	bne	1453c <__assert_fail@plt+0x2f00>
   1454c:	movw	r0, #57996	; 0xe28c
   14550:	movt	r0, #2
   14554:	ldr	r0, [r0]
   14558:	cmp	r0, #0
   1455c:	bne	145c0 <__assert_fail@plt+0x2f84>
   14560:	movw	r0, #57968	; 0xe270
   14564:	movt	r0, #2
   14568:	ldr	r0, [r0]
   1456c:	ldr	r0, [r0, r5, lsl #2]
   14570:	ldr	r3, [r4, #32]
   14574:	add	r0, r0, r3
   14578:	movw	r1, #58000	; 0xe290
   1457c:	movt	r1, #2
   14580:	str	r0, [r1]
   14584:	ldr	r2, [r9]
   14588:	sub	r3, r3, r2
   1458c:	movw	r7, #57868	; 0xe20c
   14590:	movt	r7, #2
   14594:	ldr	r7, [r7]
   14598:	cmp	r3, r7
   1459c:	subeq	r0, r0, r2
   145a0:	streq	r0, [r1]
   145a4:	b	145c0 <__assert_fail@plt+0x2f84>
   145a8:	movw	r0, #57880	; 0xe218
   145ac:	movt	r0, #2
   145b0:	ldrb	r0, [r0]
   145b4:	cmp	r0, #1
   145b8:	moveq	r0, #0
   145bc:	strbeq	r0, [r9]
   145c0:	mov	r0, #1
   145c4:	sub	sp, fp, #28
   145c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145cc:	push	{r4, r5, fp, lr}
   145d0:	add	fp, sp, #8
   145d4:	mov	r4, r0
   145d8:	movw	r0, #57860	; 0xe204
   145dc:	movt	r0, #2
   145e0:	ldrb	r0, [r0]
   145e4:	cmp	r0, #1
   145e8:	bne	14664 <__assert_fail@plt+0x3028>
   145ec:	movw	r0, #57996	; 0xe28c
   145f0:	movt	r0, #2
   145f4:	ldr	r1, [r0]
   145f8:	cmp	r4, #32
   145fc:	bne	1460c <__assert_fail@plt+0x2fd0>
   14600:	add	r1, r1, #1
   14604:	str	r1, [r0]
   14608:	pop	{r4, r5, fp, pc}
   1460c:	cmp	r1, #1
   14610:	blge	14ca4 <__assert_fail@plt+0x3668>
   14614:	bl	114c8 <__ctype_b_loc@plt>
   14618:	ldr	r5, [r0]
   1461c:	mov	r0, r4
   14620:	bl	14d44 <__assert_fail@plt+0x3708>
   14624:	add	r0, r5, r4, lsl #1
   14628:	ldrb	r0, [r0, #1]
   1462c:	tst	r0, #64	; 0x40
   14630:	bne	14650 <__assert_fail@plt+0x3014>
   14634:	cmp	r4, #8
   14638:	bne	14664 <__assert_fail@plt+0x3028>
   1463c:	movw	r0, #58000	; 0xe290
   14640:	movt	r0, #2
   14644:	ldr	r1, [r0]
   14648:	sub	r1, r1, #1
   1464c:	b	14660 <__assert_fail@plt+0x3024>
   14650:	movw	r0, #58000	; 0xe290
   14654:	movt	r0, #2
   14658:	ldr	r1, [r0]
   1465c:	add	r1, r1, #1
   14660:	str	r1, [r0]
   14664:	mov	r0, r4
   14668:	pop	{r4, r5, fp, lr}
   1466c:	b	11630 <putchar_unlocked@plt>
   14670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14674:	add	fp, sp, #28
   14678:	sub	sp, sp, #4
   1467c:	mov	r4, r0
   14680:	ldr	r0, [r0]
   14684:	bl	1139c <getc_unlocked@plt>
   14688:	mov	r5, r0
   1468c:	movw	r8, #58008	; 0xe298
   14690:	movt	r8, #2
   14694:	ldr	r7, [r8]
   14698:	cmp	r0, #12
   1469c:	bne	146cc <__assert_fail@plt+0x3090>
   146a0:	ldrb	r0, [r4, #37]	; 0x25
   146a4:	cmp	r0, #0
   146a8:	beq	1492c <__assert_fail@plt+0x32f0>
   146ac:	ldr	r0, [r4]
   146b0:	bl	1139c <getc_unlocked@plt>
   146b4:	mov	r5, r0
   146b8:	cmp	r0, #10
   146bc:	bne	146cc <__assert_fail@plt+0x3090>
   146c0:	ldr	r0, [r4]
   146c4:	bl	1139c <getc_unlocked@plt>
   146c8:	mov	r5, r0
   146cc:	mov	r0, #0
   146d0:	strb	r0, [r4, #37]	; 0x25
   146d4:	cmn	r5, #1
   146d8:	beq	146fc <__assert_fail@plt+0x30c0>
   146dc:	cmp	r5, #10
   146e0:	beq	14708 <__assert_fail@plt+0x30cc>
   146e4:	cmp	r5, #12
   146e8:	beq	14934 <__assert_fail@plt+0x32f8>
   146ec:	uxtb	r0, r5
   146f0:	bl	14d48 <__assert_fail@plt+0x370c>
   146f4:	mov	r6, r0
   146f8:	b	14708 <__assert_fail@plt+0x30cc>
   146fc:	mov	r0, r4
   14700:	bl	142ac <__assert_fail@plt+0x2c70>
   14704:	b	149c4 <__assert_fail@plt+0x3388>
   14708:	movw	r0, #57883	; 0xe21b
   1470c:	movt	r0, #2
   14710:	ldrb	r0, [r0]
   14714:	cmp	r0, #1
   14718:	bne	14734 <__assert_fail@plt+0x30f8>
   1471c:	movw	r0, #57916	; 0xe23c
   14720:	movt	r0, #2
   14724:	ldr	r0, [r0]
   14728:	ldr	r1, [r8]
   1472c:	cmp	r1, r0
   14730:	bgt	14920 <__assert_fail@plt+0x32e4>
   14734:	ldr	r0, [r4, #16]
   14738:	movw	r1, #17360	; 0x43d0
   1473c:	movt	r1, #1
   14740:	cmp	r0, r1
   14744:	beq	14880 <__assert_fail@plt+0x3244>
   14748:	movw	r0, #57988	; 0xe284
   1474c:	movt	r0, #2
   14750:	mov	r1, #1
   14754:	strb	r1, [r0]
   14758:	movw	r0, #57989	; 0xe285
   1475c:	movt	r0, #2
   14760:	ldrb	r0, [r0]
   14764:	cmp	r0, #1
   14768:	bne	14780 <__assert_fail@plt+0x3144>
   1476c:	movw	r0, #57841	; 0xe1f1
   14770:	movt	r0, #2
   14774:	ldrb	r0, [r0]
   14778:	cmp	r0, #1
   1477c:	bleq	14a24 <__assert_fail@plt+0x33e8>
   14780:	movw	r0, #57862	; 0xe206
   14784:	movt	r0, #2
   14788:	ldrb	r0, [r0]
   1478c:	cmp	r0, #1
   14790:	movw	r7, #57992	; 0xe288
   14794:	movt	r7, #2
   14798:	bne	14844 <__assert_fail@plt+0x3208>
   1479c:	movw	r0, #58014	; 0xe29e
   147a0:	movt	r0, #2
   147a4:	ldrb	r0, [r0]
   147a8:	cmp	r0, #1
   147ac:	bne	14844 <__assert_fail@plt+0x3208>
   147b0:	movw	sl, #58004	; 0xe294
   147b4:	movt	sl, #2
   147b8:	ldr	r9, [sl]
   147bc:	mov	r0, #0
   147c0:	str	r0, [sl]
   147c4:	cmp	r9, #1
   147c8:	blt	147f8 <__assert_fail@plt+0x31bc>
   147cc:	movw	r0, #57932	; 0xe24c
   147d0:	movt	r0, #2
   147d4:	ldr	r7, [r0]
   147d8:	mov	r0, r7
   147dc:	bl	14f68 <__assert_fail@plt+0x392c>
   147e0:	ldr	r0, [sl]
   147e4:	add	r0, r0, #1
   147e8:	str	r0, [sl]
   147ec:	subs	r9, r9, #1
   147f0:	add	r7, r7, #40	; 0x28
   147f4:	bne	147d8 <__assert_fail@plt+0x319c>
   147f8:	ldr	r0, [r4, #32]
   147fc:	movw	r1, #58014	; 0xe29e
   14800:	movt	r1, #2
   14804:	mov	r2, #0
   14808:	strb	r2, [r1]
   1480c:	movw	r7, #57992	; 0xe288
   14810:	movt	r7, #2
   14814:	str	r0, [r7]
   14818:	movw	r0, #57916	; 0xe23c
   1481c:	movt	r0, #2
   14820:	ldr	r0, [r0]
   14824:	movw	r1, #57883	; 0xe21b
   14828:	movt	r1, #2
   1482c:	ldrb	r1, [r1]
   14830:	cmp	r1, #0
   14834:	moveq	r0, r1
   14838:	movw	r1, #57996	; 0xe28c
   1483c:	movt	r1, #2
   14840:	str	r0, [r1]
   14844:	ldr	r0, [r7]
   14848:	movw	r1, #57876	; 0xe214
   1484c:	movt	r1, #2
   14850:	ldr	r1, [r1]
   14854:	cmp	r0, r1
   14858:	ble	1486c <__assert_fail@plt+0x3230>
   1485c:	sub	r0, r0, r1
   14860:	bl	14b54 <__assert_fail@plt+0x3518>
   14864:	mov	r0, #0
   14868:	str	r0, [r7]
   1486c:	movw	r0, #57873	; 0xe211
   14870:	movt	r0, #2
   14874:	ldrb	r0, [r0]
   14878:	cmp	r0, #1
   1487c:	bleq	14bb8 <__assert_fail@plt+0x357c>
   14880:	ldrb	r0, [r4, #36]	; 0x24
   14884:	cmp	r0, #0
   14888:	movne	r0, r4
   1488c:	blne	14fd4 <__assert_fail@plt+0x3998>
   14890:	movw	r0, #58015	; 0xe29f
   14894:	movt	r0, #2
   14898:	mov	r1, #0
   1489c:	strb	r1, [r0]
   148a0:	mov	r9, #1
   148a4:	cmp	r5, #10
   148a8:	beq	149c8 <__assert_fail@plt+0x338c>
   148ac:	movw	r5, #57924	; 0xe244
   148b0:	movt	r5, #2
   148b4:	movw	sl, #57916	; 0xe23c
   148b8:	movt	sl, #2
   148bc:	ldr	r2, [r5]
   148c0:	mov	r0, r4
   148c4:	mov	r1, r6
   148c8:	bl	15164 <__assert_fail@plt+0x3b28>
   148cc:	ldr	r0, [r4]
   148d0:	bl	1139c <getc_unlocked@plt>
   148d4:	cmn	r0, #1
   148d8:	beq	149d4 <__assert_fail@plt+0x3398>
   148dc:	cmp	r0, #10
   148e0:	beq	149c8 <__assert_fail@plt+0x338c>
   148e4:	cmp	r0, #12
   148e8:	beq	149e0 <__assert_fail@plt+0x33a4>
   148ec:	ldr	r7, [r8]
   148f0:	uxtb	r0, r0
   148f4:	bl	14d48 <__assert_fail@plt+0x370c>
   148f8:	mov	r6, r0
   148fc:	movw	r0, #57883	; 0xe21b
   14900:	movt	r0, #2
   14904:	ldrb	r0, [r0]
   14908:	cmp	r0, #1
   1490c:	bne	148bc <__assert_fail@plt+0x3280>
   14910:	ldr	r0, [sl]
   14914:	ldr	r1, [r8]
   14918:	cmp	r1, r0
   1491c:	ble	148bc <__assert_fail@plt+0x3280>
   14920:	str	r7, [r8]
   14924:	mov	r9, #0
   14928:	b	149c8 <__assert_fail@plt+0x338c>
   1492c:	mov	r0, #0
   14930:	strb	r0, [r4, #37]	; 0x25
   14934:	ldr	r0, [r4]
   14938:	bl	1139c <getc_unlocked@plt>
   1493c:	cmp	r0, #10
   14940:	beq	1494c <__assert_fail@plt+0x3310>
   14944:	ldr	r1, [r4]
   14948:	bl	11510 <ungetc@plt>
   1494c:	movw	r0, #58012	; 0xe29c
   14950:	movt	r0, #2
   14954:	mov	r1, #1
   14958:	strb	r1, [r0]
   1495c:	movw	r0, #57989	; 0xe285
   14960:	movt	r0, #2
   14964:	ldrb	r0, [r0]
   14968:	cmp	r0, #1
   1496c:	bne	1499c <__assert_fail@plt+0x3360>
   14970:	movw	r0, #57841	; 0xe1f1
   14974:	movt	r0, #2
   14978:	ldrb	r0, [r0]
   1497c:	cmp	r0, #1
   14980:	bne	1499c <__assert_fail@plt+0x3360>
   14984:	movw	r0, #57988	; 0xe284
   14988:	movt	r0, #2
   1498c:	mov	r1, #1
   14990:	strb	r1, [r0]
   14994:	bl	14a24 <__assert_fail@plt+0x33e8>
   14998:	b	149bc <__assert_fail@plt+0x3380>
   1499c:	movw	r0, #57881	; 0xe219
   149a0:	movt	r0, #2
   149a4:	ldrb	r0, [r0]
   149a8:	cmp	r0, #1
   149ac:	movweq	r0, #58013	; 0xe29d
   149b0:	movteq	r0, #2
   149b4:	moveq	r1, #1
   149b8:	strbeq	r1, [r0]
   149bc:	mov	r0, r4
   149c0:	bl	14224 <__assert_fail@plt+0x2be8>
   149c4:	mov	r9, #1
   149c8:	mov	r0, r9
   149cc:	sub	sp, fp, #28
   149d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d4:	mov	r0, r4
   149d8:	bl	142ac <__assert_fail@plt+0x2c70>
   149dc:	b	149c8 <__assert_fail@plt+0x338c>
   149e0:	ldr	r0, [r4]
   149e4:	bl	1139c <getc_unlocked@plt>
   149e8:	cmp	r0, #10
   149ec:	beq	149f8 <__assert_fail@plt+0x33bc>
   149f0:	ldr	r1, [r4]
   149f4:	bl	11510 <ungetc@plt>
   149f8:	movw	r0, #57881	; 0xe219
   149fc:	movt	r0, #2
   14a00:	ldrb	r0, [r0]
   14a04:	cmp	r0, #1
   14a08:	movweq	r0, #58013	; 0xe29d
   14a0c:	movteq	r0, #2
   14a10:	moveq	r1, #1
   14a14:	strbeq	r1, [r0]
   14a18:	mov	r0, r4
   14a1c:	bl	14224 <__assert_fail@plt+0x2be8>
   14a20:	b	149c8 <__assert_fail@plt+0x338c>
   14a24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a28:	add	fp, sp, #24
   14a2c:	sub	sp, sp, #304	; 0x130
   14a30:	movw	r8, #58000	; 0xe290
   14a34:	movt	r8, #2
   14a38:	mov	r6, #0
   14a3c:	str	r6, [r8]
   14a40:	movw	r7, #57868	; 0xe20c
   14a44:	movt	r7, #2
   14a48:	ldr	r0, [r7]
   14a4c:	bl	14b54 <__assert_fail@plt+0x3518>
   14a50:	bl	14ca4 <__assert_fail@plt+0x3668>
   14a54:	movw	r4, #57896	; 0xe228
   14a58:	movt	r4, #2
   14a5c:	ldrd	r0, [r4]
   14a60:	orrs	r0, r0, r1
   14a64:	beq	14b30 <__assert_fail@plt+0x34f4>
   14a68:	movw	r1, #53542	; 0xd126
   14a6c:	movt	r1, #1
   14a70:	mov	r0, #0
   14a74:	mov	r2, #5
   14a78:	bl	113a8 <dcgettext@plt>
   14a7c:	mov	r3, r0
   14a80:	ldrd	r0, [r4]
   14a84:	stm	sp, {r0, r1}
   14a88:	add	r4, sp, #28
   14a8c:	mov	r0, r4
   14a90:	mov	r1, #1
   14a94:	mov	r2, #276	; 0x114
   14a98:	bl	11528 <__sprintf_chk@plt>
   14a9c:	movw	r0, #57960	; 0xe268
   14aa0:	movt	r0, #2
   14aa4:	ldr	r5, [r0]
   14aa8:	mov	r0, r4
   14aac:	mov	r1, #0
   14ab0:	bl	15b4c <__assert_fail@plt+0x4510>
   14ab4:	ldr	r2, [r7]
   14ab8:	movw	r1, #57952	; 0xe260
   14abc:	movt	r1, #2
   14ac0:	ldr	r1, [r1]
   14ac4:	movw	r3, #57956	; 0xe264
   14ac8:	movt	r3, #2
   14acc:	ldr	r3, [r3]
   14ad0:	sub	r0, r5, r0
   14ad4:	bic	r0, r0, r0, asr #31
   14ad8:	sub	r7, r0, r0, lsr #1
   14adc:	movw	r5, #53461	; 0xd0d5
   14ae0:	movt	r5, #1
   14ae4:	lsr	r0, r0, #1
   14ae8:	str	r1, [sp]
   14aec:	stmib	sp, {r0, r5}
   14af0:	str	r3, [sp, #12]
   14af4:	str	r7, [sp, #16]
   14af8:	str	r5, [sp, #20]
   14afc:	str	r4, [sp, #24]
   14b00:	movw	r1, #53552	; 0xd130
   14b04:	movt	r1, #1
   14b08:	movw	r3, #53460	; 0xd0d4
   14b0c:	movt	r3, #1
   14b10:	mov	r0, #1
   14b14:	bl	1154c <__printf_chk@plt>
   14b18:	movw	r0, #57989	; 0xe285
   14b1c:	movt	r0, #2
   14b20:	strb	r6, [r0]
   14b24:	str	r6, [r8]
   14b28:	sub	sp, fp, #24
   14b2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b30:	movw	r1, #53521	; 0xd111
   14b34:	movt	r1, #1
   14b38:	mov	r0, #0
   14b3c:	mov	r2, #5
   14b40:	bl	113a8 <dcgettext@plt>
   14b44:	mov	r2, r0
   14b48:	mov	r0, #1
   14b4c:	mov	r1, #0
   14b50:	bl	11450 <error@plt>
   14b54:	push	{r4, r5, r6, sl, fp, lr}
   14b58:	add	fp, sp, #16
   14b5c:	mov	r4, r0
   14b60:	movw	r5, #58000	; 0xe290
   14b64:	movt	r5, #2
   14b68:	ldr	r0, [r5]
   14b6c:	movw	r1, #57860	; 0xe204
   14b70:	movt	r1, #2
   14b74:	ldrb	r1, [r1]
   14b78:	cmp	r1, #0
   14b7c:	beq	14b94 <__assert_fail@plt+0x3558>
   14b80:	sub	r0, r4, r0
   14b84:	movw	r1, #57996	; 0xe28c
   14b88:	movt	r1, #2
   14b8c:	str	r0, [r1]
   14b90:	pop	{r4, r5, r6, sl, fp, pc}
   14b94:	cmp	r0, r4
   14b98:	bge	14bb0 <__assert_fail@plt+0x3574>
   14b9c:	sub	r6, r4, r0
   14ba0:	mov	r0, #32
   14ba4:	bl	11630 <putchar_unlocked@plt>
   14ba8:	subs	r6, r6, #1
   14bac:	bne	14ba0 <__assert_fail@plt+0x3564>
   14bb0:	str	r4, [r5]
   14bb4:	pop	{r4, r5, r6, sl, fp, pc}
   14bb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bbc:	add	fp, sp, #24
   14bc0:	movw	r8, #58004	; 0xe294
   14bc4:	movt	r8, #2
   14bc8:	ldr	r0, [r8]
   14bcc:	cmp	r0, #1
   14bd0:	blt	14c84 <__assert_fail@plt+0x3648>
   14bd4:	movw	r0, #57696	; 0xe160
   14bd8:	movt	r0, #2
   14bdc:	ldr	r5, [r0]
   14be0:	movw	r0, #57876	; 0xe214
   14be4:	movt	r0, #2
   14be8:	ldr	r4, [r0]
   14bec:	movw	r6, #57996	; 0xe28c
   14bf0:	movt	r6, #2
   14bf4:	movw	r7, #58000	; 0xe290
   14bf8:	movt	r7, #2
   14bfc:	subs	r0, r4, #1
   14c00:	bge	14c6c <__assert_fail@plt+0x3630>
   14c04:	b	14c34 <__assert_fail@plt+0x35f8>
   14c08:	mvn	r4, #0
   14c0c:	ldr	r0, [r6]
   14c10:	cmp	r0, #1
   14c14:	blge	14ca4 <__assert_fail@plt+0x3668>
   14c18:	ldr	r0, [r8]
   14c1c:	sub	r0, r0, #1
   14c20:	str	r0, [r8]
   14c24:	cmp	r0, #0
   14c28:	ble	14ca0 <__assert_fail@plt+0x3664>
   14c2c:	subs	r0, r4, #1
   14c30:	bge	14c6c <__assert_fail@plt+0x3630>
   14c34:	mov	r4, r0
   14c38:	b	14c0c <__assert_fail@plt+0x35d0>
   14c3c:	cmp	r0, #1
   14c40:	blge	14ca4 <__assert_fail@plt+0x3668>
   14c44:	ldrb	r0, [r5]
   14c48:	bl	11630 <putchar_unlocked@plt>
   14c4c:	ldr	r0, [r7]
   14c50:	mov	r1, r7
   14c54:	add	r0, r0, #1
   14c58:	str	r0, [r1]
   14c5c:	sub	r4, r4, #1
   14c60:	add	r5, r5, #1
   14c64:	cmp	r4, #0
   14c68:	ble	14c08 <__assert_fail@plt+0x35cc>
   14c6c:	ldr	r0, [r6]
   14c70:	ldrb	r1, [r5]
   14c74:	cmp	r1, #32
   14c78:	bne	14c3c <__assert_fail@plt+0x3600>
   14c7c:	mov	r1, r6
   14c80:	b	14c54 <__assert_fail@plt+0x3618>
   14c84:	movw	r0, #57996	; 0xe28c
   14c88:	movt	r0, #2
   14c8c:	ldr	r0, [r0]
   14c90:	cmp	r0, #1
   14c94:	blt	14ca0 <__assert_fail@plt+0x3664>
   14c98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c9c:	b	14ca4 <__assert_fail@plt+0x3668>
   14ca0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ca4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ca8:	add	fp, sp, #24
   14cac:	movw	r8, #58000	; 0xe290
   14cb0:	movt	r8, #2
   14cb4:	ldr	r0, [r8]
   14cb8:	movw	r9, #57996	; 0xe28c
   14cbc:	movt	r9, #2
   14cc0:	ldr	r1, [r9]
   14cc4:	add	r6, r1, r0
   14cc8:	cmp	r1, #2
   14ccc:	blt	14d18 <__assert_fail@plt+0x36dc>
   14cd0:	movw	r7, #57676	; 0xe14c
   14cd4:	movt	r7, #2
   14cd8:	movw	r4, #57672	; 0xe148
   14cdc:	movt	r4, #2
   14ce0:	ldr	r1, [r7]
   14ce4:	sdiv	r2, r0, r1
   14ce8:	mul	r2, r2, r1
   14cec:	sub	r2, r2, r0
   14cf0:	add	r1, r1, r2
   14cf4:	add	r5, r1, r0
   14cf8:	cmp	r6, r5
   14cfc:	blt	14d18 <__assert_fail@plt+0x36dc>
   14d00:	ldrb	r0, [r4]
   14d04:	bl	11630 <putchar_unlocked@plt>
   14d08:	sub	r0, r6, r5
   14d0c:	cmp	r0, #1
   14d10:	mov	r0, r5
   14d14:	bgt	14ce0 <__assert_fail@plt+0x36a4>
   14d18:	cmp	r0, r6
   14d1c:	bge	14d34 <__assert_fail@plt+0x36f8>
   14d20:	sub	r4, r6, r0
   14d24:	mov	r0, #32
   14d28:	bl	11630 <putchar_unlocked@plt>
   14d2c:	subs	r4, r4, #1
   14d30:	bne	14d24 <__assert_fail@plt+0x36e8>
   14d34:	mov	r0, #0
   14d38:	str	r0, [r9]
   14d3c:	str	r6, [r8]
   14d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d44:	bx	lr
   14d48:	push	{r4, r5, r6, r7, fp, lr}
   14d4c:	add	fp, sp, #16
   14d50:	sub	sp, sp, #8
   14d54:	mov	r5, r0
   14d58:	movw	r0, #57664	; 0xe140
   14d5c:	movt	r0, #2
   14d60:	ldrb	r1, [r0]
   14d64:	movw	r0, #57668	; 0xe144
   14d68:	movt	r0, #2
   14d6c:	ldr	r0, [r0]
   14d70:	cmp	r1, r5
   14d74:	movne	r0, #8
   14d78:	movw	r2, #57924	; 0xe244
   14d7c:	movt	r2, #2
   14d80:	ldr	r4, [r2]
   14d84:	cmp	r5, #9
   14d88:	movw	r6, #58008	; 0xe298
   14d8c:	movt	r6, #2
   14d90:	cmpne	r1, r5
   14d94:	bne	14ddc <__assert_fail@plt+0x37a0>
   14d98:	ldr	r1, [r6]
   14d9c:	sdiv	r2, r1, r0
   14da0:	mls	r1, r2, r0, r1
   14da4:	sub	r7, r0, r1
   14da8:	movw	r2, #57852	; 0xe1fc
   14dac:	movt	r2, #2
   14db0:	ldrb	r2, [r2]
   14db4:	cmp	r2, #1
   14db8:	bne	14e50 <__assert_fail@plt+0x3814>
   14dbc:	cmp	r7, #0
   14dc0:	beq	14ecc <__assert_fail@plt+0x3890>
   14dc4:	sub	r2, r0, r1
   14dc8:	mov	r0, r4
   14dcc:	mov	r1, #32
   14dd0:	bl	11540 <memset@plt>
   14dd4:	mov	r2, r7
   14dd8:	b	14e58 <__assert_fail@plt+0x381c>
   14ddc:	bl	114c8 <__ctype_b_loc@plt>
   14de0:	ldr	r0, [r0]
   14de4:	add	r0, r0, r5, lsl #1
   14de8:	ldrb	r0, [r0, #1]
   14dec:	tst	r0, #64	; 0x40
   14df0:	bne	14e7c <__assert_fail@plt+0x3840>
   14df4:	movw	r0, #57882	; 0xe21a
   14df8:	movt	r0, #2
   14dfc:	ldrb	r0, [r0]
   14e00:	cmp	r0, #1
   14e04:	bne	14e94 <__assert_fail@plt+0x3858>
   14e08:	mov	r0, #92	; 0x5c
   14e0c:	strb	r0, [r4], #1
   14e10:	str	r5, [sp]
   14e14:	add	r5, sp, #4
   14e18:	mov	r7, #4
   14e1c:	movw	r3, #53573	; 0xd145
   14e20:	movt	r3, #1
   14e24:	mov	r0, r5
   14e28:	mov	r1, #1
   14e2c:	mov	r2, #4
   14e30:	bl	11528 <__sprintf_chk@plt>
   14e34:	mov	r0, #0
   14e38:	ldrb	r1, [r5, r0]
   14e3c:	strb	r1, [r4, r0]
   14e40:	add	r0, r0, #1
   14e44:	cmp	r0, #3
   14e48:	bne	14e38 <__assert_fail@plt+0x37fc>
   14e4c:	b	14e84 <__assert_fail@plt+0x3848>
   14e50:	strb	r5, [r4]
   14e54:	mov	r2, #1
   14e58:	lsr	r3, r7, #31
   14e5c:	ldr	r1, [r6]
   14e60:	cmn	r7, #1
   14e64:	bgt	14edc <__assert_fail@plt+0x38a0>
   14e68:	mov	r5, #0
   14e6c:	cmp	r1, #0
   14e70:	mov	r0, #0
   14e74:	beq	14ef8 <__assert_fail@plt+0x38bc>
   14e78:	b	14edc <__assert_fail@plt+0x38a0>
   14e7c:	strb	r5, [r4]
   14e80:	mov	r7, #1
   14e84:	ldr	r1, [r6]
   14e88:	mov	r0, r7
   14e8c:	add	r5, r1, r7
   14e90:	b	14ef8 <__assert_fail@plt+0x38bc>
   14e94:	movw	r0, #57843	; 0xe1f3
   14e98:	movt	r0, #2
   14e9c:	ldrb	r0, [r0]
   14ea0:	cmp	r0, #1
   14ea4:	bne	14f0c <__assert_fail@plt+0x38d0>
   14ea8:	sxtb	r0, r5
   14eac:	cmp	r0, #0
   14eb0:	bmi	14f20 <__assert_fail@plt+0x38e4>
   14eb4:	mov	r0, #94	; 0x5e
   14eb8:	strb	r0, [r4]
   14ebc:	eor	r0, r5, #64	; 0x40
   14ec0:	strb	r0, [r4, #1]
   14ec4:	mov	r7, #2
   14ec8:	b	14e84 <__assert_fail@plt+0x3848>
   14ecc:	ldr	r1, [r6]
   14ed0:	mov	r3, #0
   14ed4:	mov	r2, #0
   14ed8:	mov	r7, #0
   14edc:	rsb	r0, r7, #0
   14ee0:	cmp	r1, r0
   14ee4:	bgt	14f04 <__assert_fail@plt+0x38c8>
   14ee8:	mov	r5, #0
   14eec:	cmp	r3, #0
   14ef0:	mov	r0, r2
   14ef4:	addeq	r5, r1, r7
   14ef8:	str	r5, [r6]
   14efc:	sub	sp, fp, #16
   14f00:	pop	{r4, r5, r6, r7, fp, pc}
   14f04:	mov	r0, r2
   14f08:	b	14e8c <__assert_fail@plt+0x3850>
   14f0c:	strb	r5, [r4]
   14f10:	mov	r7, #0
   14f14:	cmp	r5, #8
   14f18:	mvneq	r7, #0
   14f1c:	b	14e54 <__assert_fail@plt+0x3818>
   14f20:	mov	r0, #92	; 0x5c
   14f24:	strb	r0, [r4], #1
   14f28:	str	r5, [sp]
   14f2c:	add	r5, sp, #4
   14f30:	mov	r7, #4
   14f34:	movw	r3, #53573	; 0xd145
   14f38:	movt	r3, #1
   14f3c:	mov	r0, r5
   14f40:	mov	r1, #1
   14f44:	mov	r2, #4
   14f48:	bl	11528 <__sprintf_chk@plt>
   14f4c:	mov	r0, #0
   14f50:	ldrb	r1, [r5, r0]
   14f54:	strb	r1, [r4, r0]
   14f58:	add	r0, r0, #1
   14f5c:	cmp	r0, #3
   14f60:	bne	14f50 <__assert_fail@plt+0x3914>
   14f64:	b	14e84 <__assert_fail@plt+0x3848>
   14f68:	push	{r4, r5, fp, lr}
   14f6c:	add	fp, sp, #8
   14f70:	mov	r4, r0
   14f74:	ldr	r0, [r0, #32]
   14f78:	movw	r5, #57992	; 0xe288
   14f7c:	movt	r5, #2
   14f80:	str	r0, [r5]
   14f84:	movw	r1, #57876	; 0xe214
   14f88:	movt	r1, #2
   14f8c:	ldr	r1, [r1]
   14f90:	cmp	r0, r1
   14f94:	ble	14fa8 <__assert_fail@plt+0x396c>
   14f98:	sub	r0, r0, r1
   14f9c:	bl	14b54 <__assert_fail@plt+0x3518>
   14fa0:	mov	r0, #0
   14fa4:	str	r0, [r5]
   14fa8:	movw	r0, #57873	; 0xe211
   14fac:	movt	r0, #2
   14fb0:	ldrb	r0, [r0]
   14fb4:	cmp	r0, #1
   14fb8:	bleq	14bb8 <__assert_fail@plt+0x357c>
   14fbc:	ldrb	r0, [r4, #36]	; 0x24
   14fc0:	cmp	r0, #0
   14fc4:	popeq	{r4, r5, fp, pc}
   14fc8:	mov	r0, r4
   14fcc:	pop	{r4, r5, fp, lr}
   14fd0:	b	14fd4 <__assert_fail@plt+0x3998>
   14fd4:	push	{r4, r5, r6, r7, fp, lr}
   14fd8:	add	fp, sp, #16
   14fdc:	sub	sp, sp, #8
   14fe0:	mov	r4, r0
   14fe4:	movw	r6, #57920	; 0xe240
   14fe8:	movt	r6, #2
   14fec:	ldr	r0, [r6]
   14ff0:	movw	r5, #57688	; 0xe158
   14ff4:	movt	r5, #2
   14ff8:	ldr	r1, [r5]
   14ffc:	movw	r7, #57904	; 0xe230
   15000:	movt	r7, #2
   15004:	ldr	r2, [r7]
   15008:	stm	sp, {r1, r2}
   1500c:	movw	r3, #53578	; 0xd14a
   15010:	movt	r3, #1
   15014:	mov	r1, #1
   15018:	mvn	r2, #0
   1501c:	bl	11528 <__sprintf_chk@plt>
   15020:	ldr	r1, [r7]
   15024:	add	r1, r1, #1
   15028:	str	r1, [r7]
   1502c:	ldr	r7, [r5]
   15030:	cmp	r7, #1
   15034:	blt	15058 <__assert_fail@plt+0x3a1c>
   15038:	ldr	r1, [r6]
   1503c:	add	r6, r1, r0
   15040:	ldrb	r0, [r6, -r7]
   15044:	ldr	r1, [r4, #16]
   15048:	blx	r1
   1504c:	sub	r7, r7, #1
   15050:	cmp	r7, #0
   15054:	bgt	15040 <__assert_fail@plt+0x3a04>
   15058:	movw	r0, #57712	; 0xe170
   1505c:	movt	r0, #2
   15060:	ldr	r0, [r0]
   15064:	cmp	r0, #2
   15068:	blt	150b8 <__assert_fail@plt+0x3a7c>
   1506c:	movw	r0, #57684	; 0xe154
   15070:	movt	r0, #2
   15074:	ldrb	r0, [r0]
   15078:	cmp	r0, #9
   1507c:	bne	1510c <__assert_fail@plt+0x3ad0>
   15080:	ldr	r0, [r5]
   15084:	movw	r1, #57912	; 0xe238
   15088:	movt	r1, #2
   1508c:	ldr	r1, [r1]
   15090:	sub	r5, r1, r0
   15094:	cmp	r5, #1
   15098:	blt	15114 <__assert_fail@plt+0x3ad8>
   1509c:	ldr	r1, [r4, #16]
   150a0:	mov	r0, #32
   150a4:	blx	r1
   150a8:	sub	r5, r5, #1
   150ac:	cmp	r5, #0
   150b0:	bgt	1509c <__assert_fail@plt+0x3a60>
   150b4:	b	15114 <__assert_fail@plt+0x3ad8>
   150b8:	movw	r5, #57684	; 0xe154
   150bc:	movt	r5, #2
   150c0:	ldrb	r0, [r5]
   150c4:	ldr	r1, [r4, #16]
   150c8:	blx	r1
   150cc:	ldrb	r0, [r5]
   150d0:	cmp	r0, #9
   150d4:	bne	15114 <__assert_fail@plt+0x3ad8>
   150d8:	movw	r0, #58000	; 0xe290
   150dc:	movt	r0, #2
   150e0:	ldr	r1, [r0]
   150e4:	movw	r2, #57676	; 0xe14c
   150e8:	movt	r2, #2
   150ec:	ldr	r2, [r2]
   150f0:	add	r3, r2, r1
   150f4:	sdiv	r7, r1, r2
   150f8:	mul	r2, r7, r2
   150fc:	sub	r1, r2, r1
   15100:	add	r1, r3, r1
   15104:	str	r1, [r0]
   15108:	b	15114 <__assert_fail@plt+0x3ad8>
   1510c:	ldr	r1, [r4, #16]
   15110:	blx	r1
   15114:	movw	r0, #57883	; 0xe21b
   15118:	movt	r0, #2
   1511c:	ldrb	r0, [r0]
   15120:	cmp	r0, #1
   15124:	bne	1515c <__assert_fail@plt+0x3b20>
   15128:	movw	r0, #57862	; 0xe206
   1512c:	movt	r0, #2
   15130:	ldrb	r0, [r0]
   15134:	cmp	r0, #0
   15138:	bne	1515c <__assert_fail@plt+0x3b20>
   1513c:	movw	r0, #57912	; 0xe238
   15140:	movt	r0, #2
   15144:	ldr	r0, [r0]
   15148:	movw	r1, #58008	; 0xe298
   1514c:	movt	r1, #2
   15150:	ldr	r2, [r1]
   15154:	add	r0, r2, r0
   15158:	str	r0, [r1]
   1515c:	sub	sp, fp, #16
   15160:	pop	{r4, r5, r6, r7, fp, pc}
   15164:	push	{r4, r5, r6, sl, fp, lr}
   15168:	add	fp, sp, #16
   1516c:	cmp	r1, #0
   15170:	beq	15194 <__assert_fail@plt+0x3b58>
   15174:	mov	r4, r2
   15178:	mov	r5, r1
   1517c:	mov	r6, r0
   15180:	ldrb	r0, [r4], #1
   15184:	ldr	r1, [r6, #16]
   15188:	blx	r1
   1518c:	subs	r5, r5, #1
   15190:	bne	15180 <__assert_fail@plt+0x3b44>
   15194:	pop	{r4, r5, r6, sl, fp, pc}
   15198:	push	{fp, lr}
   1519c:	mov	fp, sp
   151a0:	movw	r0, #57841	; 0xe1f1
   151a4:	movt	r0, #2
   151a8:	ldrb	r0, [r0]
   151ac:	cmp	r0, #0
   151b0:	beq	15208 <__assert_fail@plt+0x3bcc>
   151b4:	movw	r0, #57712	; 0xe170
   151b8:	movt	r0, #2
   151bc:	ldr	r0, [r0]
   151c0:	cmp	r0, #0
   151c4:	popeq	{fp, pc}
   151c8:	movw	r1, #57908	; 0xe234
   151cc:	movt	r1, #2
   151d0:	ldr	r1, [r1]
   151d4:	movw	r2, #57932	; 0xe24c
   151d8:	movt	r2, #2
   151dc:	ldr	r2, [r2]
   151e0:	add	r2, r2, #28
   151e4:	ldr	r3, [r2, #-20]	; 0xffffffec
   151e8:	cmp	r3, #0
   151ec:	mov	r3, r1
   151f0:	movne	r3, #0
   151f4:	str	r3, [r2]
   151f8:	add	r2, r2, #40	; 0x28
   151fc:	subs	r0, r0, #1
   15200:	bne	151e4 <__assert_fail@plt+0x3ba8>
   15204:	pop	{fp, pc}
   15208:	bl	153ec <__assert_fail@plt+0x3db0>
   1520c:	movw	r0, #57932	; 0xe24c
   15210:	movt	r0, #2
   15214:	ldr	r0, [r0]
   15218:	movw	r1, #57712	; 0xe170
   1521c:	movt	r1, #2
   15220:	ldr	r1, [r1]
   15224:	subs	r1, r1, #1
   15228:	beq	15240 <__assert_fail@plt+0x3c04>
   1522c:	ldr	r2, [r0, #24]
   15230:	str	r2, [r0, #28]
   15234:	subs	r1, r1, #1
   15238:	add	r0, r0, #40	; 0x28
   1523c:	bne	1522c <__assert_fail@plt+0x3bf0>
   15240:	movw	r1, #57842	; 0xe1f2
   15244:	movt	r1, #2
   15248:	ldrb	r1, [r1]
   1524c:	cmp	r1, #1
   15250:	bne	15260 <__assert_fail@plt+0x3c24>
   15254:	ldr	r1, [r0, #24]
   15258:	str	r1, [r0, #28]
   1525c:	pop	{fp, pc}
   15260:	ldr	r1, [r0, #8]
   15264:	cmp	r1, #0
   15268:	movne	r1, #0
   1526c:	strne	r1, [r0, #28]
   15270:	popne	{fp, pc}
   15274:	movw	r1, #57908	; 0xe234
   15278:	movt	r1, #2
   1527c:	ldr	r1, [r1]
   15280:	str	r1, [r0, #28]
   15284:	pop	{fp, pc}
   15288:	push	{fp, lr}
   1528c:	mov	fp, sp
   15290:	movw	r0, #57712	; 0xe170
   15294:	movt	r0, #2
   15298:	ldr	r1, [r0]
   1529c:	cmp	r1, #0
   152a0:	beq	15318 <__assert_fail@plt+0x3cdc>
   152a4:	ldr	lr, [r0]
   152a8:	movw	r0, #57841	; 0xe1f1
   152ac:	movt	r0, #2
   152b0:	ldrb	ip, [r0]
   152b4:	movw	r0, #57932	; 0xe24c
   152b8:	movt	r0, #2
   152bc:	ldr	r0, [r0]
   152c0:	add	r3, r0, #28
   152c4:	mov	r0, #0
   152c8:	mov	r2, #0
   152cc:	b	152e4 <__assert_fail@plt+0x3ca8>
   152d0:	add	r0, r0, #1
   152d4:	add	r3, r3, #40	; 0x28
   152d8:	add	r2, r2, #1
   152dc:	cmp	r2, lr
   152e0:	bcs	15314 <__assert_fail@plt+0x3cd8>
   152e4:	ldr	r1, [r3, #-20]	; 0xffffffec
   152e8:	cmp	r1, #2
   152ec:	bcc	152d0 <__assert_fail@plt+0x3c94>
   152f0:	cmp	ip, #0
   152f4:	bne	152d4 <__assert_fail@plt+0x3c98>
   152f8:	ldr	r1, [r3, #-4]
   152fc:	cmp	r1, #1
   15300:	blt	152d4 <__assert_fail@plt+0x3c98>
   15304:	ldr	r1, [r3]
   15308:	cmp	r1, #1
   1530c:	addge	r0, r0, #1
   15310:	b	152d4 <__assert_fail@plt+0x3c98>
   15314:	pop	{fp, pc}
   15318:	mov	r0, #0
   1531c:	pop	{fp, pc}
   15320:	push	{r4, r5, fp, lr}
   15324:	add	fp, sp, #8
   15328:	mov	r4, r0
   1532c:	ldr	r5, [r0]
   15330:	mov	r0, r5
   15334:	bl	1139c <getc_unlocked@plt>
   15338:	cmn	r0, #1
   1533c:	beq	15394 <__assert_fail@plt+0x3d58>
   15340:	cmp	r0, #10
   15344:	beq	153a0 <__assert_fail@plt+0x3d64>
   15348:	cmp	r0, #12
   1534c:	bne	15330 <__assert_fail@plt+0x3cf4>
   15350:	mov	r0, r5
   15354:	bl	1139c <getc_unlocked@plt>
   15358:	cmp	r0, #10
   1535c:	beq	15368 <__assert_fail@plt+0x3d2c>
   15360:	mov	r1, r5
   15364:	bl	11510 <ungetc@plt>
   15368:	movw	r0, #57881	; 0xe219
   1536c:	movt	r0, #2
   15370:	ldrb	r0, [r0]
   15374:	cmp	r0, #1
   15378:	movweq	r0, #58013	; 0xe29d
   1537c:	movteq	r0, #2
   15380:	moveq	r1, #1
   15384:	strbeq	r1, [r0]
   15388:	mov	r0, r4
   1538c:	pop	{r4, r5, fp, lr}
   15390:	b	14224 <__assert_fail@plt+0x2be8>
   15394:	mov	r0, r4
   15398:	pop	{r4, r5, fp, lr}
   1539c:	b	142ac <__assert_fail@plt+0x2c70>
   153a0:	pop	{r4, r5, fp, pc}
   153a4:	push	{r4, sl, fp, lr}
   153a8:	add	fp, sp, #8
   153ac:	mov	r4, r0
   153b0:	movw	r0, #57853	; 0xe1fd
   153b4:	movt	r0, #2
   153b8:	ldrb	r0, [r0]
   153bc:	cmp	r0, #0
   153c0:	beq	153d0 <__assert_fail@plt+0x3d94>
   153c4:	mov	r0, #12
   153c8:	pop	{r4, sl, fp, lr}
   153cc:	b	11630 <putchar_unlocked@plt>
   153d0:	cmp	r4, #0
   153d4:	popeq	{r4, sl, fp, pc}
   153d8:	mov	r0, #10
   153dc:	bl	11630 <putchar_unlocked@plt>
   153e0:	subs	r4, r4, #1
   153e4:	bne	153d8 <__assert_fail@plt+0x3d9c>
   153e8:	pop	{r4, sl, fp, pc}
   153ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f0:	add	fp, sp, #28
   153f4:	sub	sp, sp, #4
   153f8:	movw	r0, #57984	; 0xe280
   153fc:	movt	r0, #2
   15400:	mov	r4, #0
   15404:	str	r4, [r0]
   15408:	movw	r0, #57712	; 0xe170
   1540c:	movt	r0, #2
   15410:	ldr	r0, [r0]
   15414:	movw	r1, #57842	; 0xe1f2
   15418:	movt	r1, #2
   1541c:	ldrb	r1, [r1]
   15420:	eor	r1, r1, #1
   15424:	sub	r0, r0, r1
   15428:	str	r0, [sp]
   1542c:	cmp	r0, #1
   15430:	mov	r0, #0
   15434:	blt	15590 <__assert_fail@plt+0x3f54>
   15438:	movw	r0, #57932	; 0xe24c
   1543c:	movt	r0, #2
   15440:	ldr	r5, [r0]
   15444:	add	r0, r5, #24
   15448:	mov	r1, #0
   1544c:	ldr	r2, [sp]
   15450:	str	r1, [r0], #40	; 0x28
   15454:	subs	r2, r2, #1
   15458:	bne	15450 <__assert_fail@plt+0x3e14>
   1545c:	mov	r4, #0
   15460:	ldr	r0, [sp]
   15464:	cmp	r0, #1
   15468:	blt	1558c <__assert_fail@plt+0x3f50>
   1546c:	movw	r7, #57936	; 0xe250
   15470:	movt	r7, #2
   15474:	ldr	r0, [r7]
   15478:	cmp	r0, #0
   1547c:	mov	r0, #0
   15480:	beq	15590 <__assert_fail@plt+0x3f54>
   15484:	mov	r8, #1
   15488:	movw	sl, #58008	; 0xe298
   1548c:	movt	sl, #2
   15490:	mov	r0, #0
   15494:	mov	r4, #0
   15498:	str	r4, [r5, #20]
   1549c:	movw	r1, #57908	; 0xe234
   154a0:	movt	r1, #2
   154a4:	ldr	r1, [r1]
   154a8:	cmp	r1, #0
   154ac:	ldrne	r2, [r7]
   154b0:	cmpne	r2, #0
   154b4:	bne	154dc <__assert_fail@plt+0x3ea0>
   154b8:	ldr	r1, [sp]
   154bc:	cmp	r8, r1
   154c0:	bge	15590 <__assert_fail@plt+0x3f54>
   154c4:	add	r5, r5, #40	; 0x28
   154c8:	add	r8, r8, #1
   154cc:	ldr	r1, [r7]
   154d0:	cmp	r1, #0
   154d4:	bne	15498 <__assert_fail@plt+0x3e5c>
   154d8:	b	15590 <__assert_fail@plt+0x3f54>
   154dc:	sub	r6, r1, #1
   154e0:	mov	r9, r0
   154e4:	ldr	r0, [r5, #8]
   154e8:	cmp	r0, #0
   154ec:	bne	1552c <__assert_fail@plt+0x3ef0>
   154f0:	mov	r0, #0
   154f4:	str	r0, [sl]
   154f8:	mov	r0, r5
   154fc:	bl	14670 <__assert_fail@plt+0x3034>
   15500:	cmp	r0, #0
   15504:	moveq	r0, r5
   15508:	bleq	15320 <__assert_fail@plt+0x3ce4>
   1550c:	movw	r0, #57984	; 0xe280
   15510:	movt	r0, #2
   15514:	ldr	r0, [r0]
   15518:	ldr	r1, [r5, #8]
   1551c:	cmp	r1, #0
   15520:	beq	15554 <__assert_fail@plt+0x3f18>
   15524:	cmp	r9, r0
   15528:	bne	15554 <__assert_fail@plt+0x3f18>
   1552c:	mov	r0, r9
   15530:	sub	r1, r6, #1
   15534:	cmp	r1, r6
   15538:	bcs	154b8 <__assert_fail@plt+0x3e7c>
   1553c:	ldr	r2, [r7]
   15540:	cmp	r2, #0
   15544:	mov	r6, r1
   15548:	mov	r9, r0
   1554c:	bne	154e4 <__assert_fail@plt+0x3ea8>
   15550:	b	154b8 <__assert_fail@plt+0x3e7c>
   15554:	ldr	r1, [r5, #24]
   15558:	add	r1, r1, #1
   1555c:	str	r1, [r5, #24]
   15560:	movw	r1, #57964	; 0xe26c
   15564:	movt	r1, #2
   15568:	ldr	r1, [r1]
   1556c:	str	r9, [r1, r4, lsl #2]
   15570:	movw	r1, #57968	; 0xe270
   15574:	movt	r1, #2
   15578:	ldr	r1, [r1]
   1557c:	ldr	r2, [sl]
   15580:	str	r2, [r1, r4, lsl #2]
   15584:	add	r4, r4, #1
   15588:	b	15530 <__assert_fail@plt+0x3ef4>
   1558c:	mov	r0, #0
   15590:	movw	r1, #57964	; 0xe26c
   15594:	movt	r1, #2
   15598:	ldr	r1, [r1]
   1559c:	str	r0, [r1, r4, lsl #2]
   155a0:	movw	r0, #57842	; 0xe1f2
   155a4:	movt	r0, #2
   155a8:	ldrb	r0, [r0]
   155ac:	cmp	r0, #1
   155b0:	bne	155c4 <__assert_fail@plt+0x3f88>
   155b4:	mov	r0, r4
   155b8:	sub	sp, fp, #28
   155bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c0:	b	155cc <__assert_fail@plt+0x3f90>
   155c4:	sub	sp, fp, #28
   155c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155cc:	push	{r4, sl, fp, lr}
   155d0:	add	fp, sp, #8
   155d4:	movw	r1, #57712	; 0xe170
   155d8:	movt	r1, #2
   155dc:	ldr	lr, [r1]
   155e0:	cmp	lr, #1
   155e4:	poplt	{r4, sl, fp, pc}
   155e8:	ldr	ip, [r1]
   155ec:	movw	r1, #57932	; 0xe24c
   155f0:	movt	r1, #2
   155f4:	ldr	r1, [r1]
   155f8:	add	r2, r1, #24
   155fc:	mov	r3, #0
   15600:	mov	r1, #0
   15604:	sdiv	r4, r0, lr
   15608:	mls	lr, r4, lr, r0
   1560c:	add	r3, r3, #1
   15610:	cmp	r3, lr
   15614:	addle	r4, r4, #1
   15618:	stmda	r2, {r1, r4}
   1561c:	add	r1, r4, r1
   15620:	add	r2, r2, #40	; 0x28
   15624:	cmp	r3, ip
   15628:	mov	lr, ip
   1562c:	blt	15604 <__assert_fail@plt+0x3fc8>
   15630:	pop	{r4, sl, fp, pc}
   15634:	movw	r1, #58016	; 0xe2a0
   15638:	movt	r1, #2
   1563c:	str	r0, [r1]
   15640:	bx	lr
   15644:	movw	r1, #58020	; 0xe2a4
   15648:	movt	r1, #2
   1564c:	strb	r0, [r1]
   15650:	bx	lr
   15654:	push	{r4, r5, r6, sl, fp, lr}
   15658:	add	fp, sp, #16
   1565c:	sub	sp, sp, #8
   15660:	movw	r0, #57820	; 0xe1dc
   15664:	movt	r0, #2
   15668:	ldr	r0, [r0]
   1566c:	bl	1b79c <__assert_fail@plt+0xa160>
   15670:	cmp	r0, #0
   15674:	beq	1569c <__assert_fail@plt+0x4060>
   15678:	movw	r0, #58020	; 0xe2a4
   1567c:	movt	r0, #2
   15680:	ldrb	r0, [r0]
   15684:	cmp	r0, #0
   15688:	beq	156bc <__assert_fail@plt+0x4080>
   1568c:	bl	1151c <__errno_location@plt>
   15690:	ldr	r0, [r0]
   15694:	cmp	r0, #32
   15698:	bne	156bc <__assert_fail@plt+0x4080>
   1569c:	movw	r0, #57808	; 0xe1d0
   156a0:	movt	r0, #2
   156a4:	ldr	r0, [r0]
   156a8:	bl	1b79c <__assert_fail@plt+0xa160>
   156ac:	cmp	r0, #0
   156b0:	subeq	sp, fp, #16
   156b4:	popeq	{r4, r5, r6, sl, fp, pc}
   156b8:	b	1572c <__assert_fail@plt+0x40f0>
   156bc:	movw	r1, #54583	; 0xd537
   156c0:	movt	r1, #1
   156c4:	mov	r0, #0
   156c8:	mov	r2, #5
   156cc:	bl	113a8 <dcgettext@plt>
   156d0:	mov	r4, r0
   156d4:	movw	r0, #58016	; 0xe2a0
   156d8:	movt	r0, #2
   156dc:	ldr	r6, [r0]
   156e0:	bl	1151c <__errno_location@plt>
   156e4:	ldr	r5, [r0]
   156e8:	cmp	r6, #0
   156ec:	bne	15708 <__assert_fail@plt+0x40cc>
   156f0:	movw	r2, #54599	; 0xd547
   156f4:	movt	r2, #1
   156f8:	mov	r0, #0
   156fc:	mov	r1, r5
   15700:	mov	r3, r4
   15704:	b	15728 <__assert_fail@plt+0x40ec>
   15708:	mov	r0, r6
   1570c:	bl	18e2c <__assert_fail@plt+0x77f0>
   15710:	mov	r3, r0
   15714:	str	r4, [sp]
   15718:	movw	r2, #54595	; 0xd543
   1571c:	movt	r2, #1
   15720:	mov	r0, #0
   15724:	mov	r1, r5
   15728:	bl	11450 <error@plt>
   1572c:	movw	r0, #57724	; 0xe17c
   15730:	movt	r0, #2
   15734:	ldr	r0, [r0]
   15738:	bl	11378 <_exit@plt>
   1573c:	b	11330 <posix_fadvise64@plt>
   15740:	cmp	r0, #0
   15744:	bxeq	lr
   15748:	push	{r4, sl, fp, lr}
   1574c:	add	fp, sp, #8
   15750:	sub	sp, sp, #16
   15754:	mov	r4, r1
   15758:	bl	11558 <fileno@plt>
   1575c:	mov	r1, #0
   15760:	str	r1, [sp]
   15764:	stmib	sp, {r1, r4}
   15768:	mov	r2, #0
   1576c:	mov	r3, #0
   15770:	bl	1573c <__assert_fail@plt+0x4100>
   15774:	sub	sp, fp, #8
   15778:	pop	{r4, sl, fp, pc}
   1577c:	push	{r4, r5, fp, lr}
   15780:	add	fp, sp, #8
   15784:	sub	sp, sp, #8
   15788:	mov	r4, r0
   1578c:	bl	11558 <fileno@plt>
   15790:	cmn	r0, #1
   15794:	ble	1580c <__assert_fail@plt+0x41d0>
   15798:	mov	r0, r4
   1579c:	bl	1148c <__freading@plt>
   157a0:	cmp	r0, #0
   157a4:	beq	157d0 <__assert_fail@plt+0x4194>
   157a8:	mov	r0, r4
   157ac:	bl	11558 <fileno@plt>
   157b0:	mov	r1, #1
   157b4:	str	r1, [sp]
   157b8:	mov	r2, #0
   157bc:	mov	r3, #0
   157c0:	bl	11414 <lseek64@plt>
   157c4:	and	r0, r0, r1
   157c8:	cmn	r0, #1
   157cc:	beq	1580c <__assert_fail@plt+0x41d0>
   157d0:	mov	r0, r4
   157d4:	bl	1581c <__assert_fail@plt+0x41e0>
   157d8:	cmp	r0, #0
   157dc:	beq	1580c <__assert_fail@plt+0x41d0>
   157e0:	bl	1151c <__errno_location@plt>
   157e4:	ldr	r5, [r0]
   157e8:	mov	r0, r4
   157ec:	bl	11588 <fclose@plt>
   157f0:	cmp	r5, #0
   157f4:	beq	15804 <__assert_fail@plt+0x41c8>
   157f8:	bl	1151c <__errno_location@plt>
   157fc:	str	r5, [r0]
   15800:	mvn	r0, #0
   15804:	sub	sp, fp, #8
   15808:	pop	{r4, r5, fp, pc}
   1580c:	mov	r0, r4
   15810:	sub	sp, fp, #8
   15814:	pop	{r4, r5, fp, lr}
   15818:	b	11588 <fclose@plt>
   1581c:	push	{r4, sl, fp, lr}
   15820:	add	fp, sp, #8
   15824:	mov	r4, r0
   15828:	cmp	r0, #0
   1582c:	beq	15844 <__assert_fail@plt+0x4208>
   15830:	mov	r0, r4
   15834:	bl	1148c <__freading@plt>
   15838:	cmp	r0, #0
   1583c:	movne	r0, r4
   15840:	blne	15850 <__assert_fail@plt+0x4214>
   15844:	mov	r0, r4
   15848:	pop	{r4, sl, fp, lr}
   1584c:	b	11348 <fflush@plt>
   15850:	push	{fp, lr}
   15854:	mov	fp, sp
   15858:	sub	sp, sp, #8
   1585c:	ldrb	r1, [r0, #1]
   15860:	tst	r1, #1
   15864:	beq	1587c <__assert_fail@plt+0x4240>
   15868:	mov	r1, #1
   1586c:	str	r1, [sp]
   15870:	mov	r2, #0
   15874:	mov	r3, #0
   15878:	bl	1595c <__assert_fail@plt+0x4320>
   1587c:	mov	sp, fp
   15880:	pop	{fp, pc}
   15884:	push	{r4, r5, r6, r7, fp, lr}
   15888:	add	fp, sp, #16
   1588c:	mov	r5, r1
   15890:	bl	115e8 <fopen64@plt>
   15894:	mov	r4, #0
   15898:	cmp	r0, #0
   1589c:	beq	15904 <__assert_fail@plt+0x42c8>
   158a0:	mov	r6, r0
   158a4:	bl	11558 <fileno@plt>
   158a8:	cmp	r0, #2
   158ac:	bhi	1590c <__assert_fail@plt+0x42d0>
   158b0:	bl	1992c <__assert_fail@plt+0x82f0>
   158b4:	cmn	r0, #1
   158b8:	ble	15914 <__assert_fail@plt+0x42d8>
   158bc:	mov	r7, r0
   158c0:	mov	r0, r6
   158c4:	bl	1577c <__assert_fail@plt+0x4140>
   158c8:	cmp	r0, #0
   158cc:	bne	158e8 <__assert_fail@plt+0x42ac>
   158d0:	mov	r0, r7
   158d4:	mov	r1, r5
   158d8:	bl	112dc <fdopen@plt>
   158dc:	mov	r4, r0
   158e0:	cmp	r0, #0
   158e4:	bne	15904 <__assert_fail@plt+0x42c8>
   158e8:	bl	1151c <__errno_location@plt>
   158ec:	mov	r4, r0
   158f0:	ldr	r5, [r0]
   158f4:	mov	r0, r7
   158f8:	bl	11624 <close@plt>
   158fc:	str	r5, [r4]
   15900:	mov	r4, #0
   15904:	mov	r0, r4
   15908:	pop	{r4, r5, r6, r7, fp, pc}
   1590c:	mov	r0, r6
   15910:	pop	{r4, r5, r6, r7, fp, pc}
   15914:	bl	1151c <__errno_location@plt>
   15918:	mov	r5, r0
   1591c:	ldr	r7, [r0]
   15920:	mov	r0, r6
   15924:	bl	1577c <__assert_fail@plt+0x4140>
   15928:	str	r7, [r5]
   1592c:	mov	r0, r4
   15930:	pop	{r4, r5, r6, r7, fp, pc}
   15934:	push	{r4, r5, r6, sl, fp, lr}
   15938:	add	fp, sp, #16
   1593c:	mov	r4, r0
   15940:	bl	1151c <__errno_location@plt>
   15944:	mov	r5, r0
   15948:	ldr	r6, [r0]
   1594c:	mov	r0, r4
   15950:	bl	11360 <free@plt>
   15954:	str	r6, [r5]
   15958:	pop	{r4, r5, r6, sl, fp, pc}
   1595c:	push	{r4, r5, r6, r7, fp, lr}
   15960:	add	fp, sp, #16
   15964:	sub	sp, sp, #8
   15968:	mov	r5, r3
   1596c:	mov	r6, r2
   15970:	mov	r4, r0
   15974:	ldr	r0, [r0, #4]
   15978:	ldr	r1, [r4, #8]
   1597c:	cmp	r1, r0
   15980:	bne	1599c <__assert_fail@plt+0x4360>
   15984:	ldrd	r0, [r4, #16]
   15988:	cmp	r1, r0
   1598c:	bne	1599c <__assert_fail@plt+0x4360>
   15990:	ldr	r0, [r4, #36]	; 0x24
   15994:	cmp	r0, #0
   15998:	beq	159b4 <__assert_fail@plt+0x4378>
   1599c:	mov	r0, r4
   159a0:	mov	r2, r6
   159a4:	mov	r3, r5
   159a8:	sub	sp, fp, #16
   159ac:	pop	{r4, r5, r6, r7, fp, lr}
   159b0:	b	11594 <fseeko64@plt>
   159b4:	ldr	r7, [fp, #8]
   159b8:	mov	r0, r4
   159bc:	bl	11558 <fileno@plt>
   159c0:	str	r7, [sp]
   159c4:	mov	r2, r6
   159c8:	mov	r3, r5
   159cc:	bl	11414 <lseek64@plt>
   159d0:	and	r2, r0, r1
   159d4:	cmn	r2, #1
   159d8:	beq	159f8 <__assert_fail@plt+0x43bc>
   159dc:	strd	r0, [r4, #80]	; 0x50
   159e0:	ldr	r0, [r4]
   159e4:	bic	r0, r0, #16
   159e8:	str	r0, [r4]
   159ec:	mov	r0, #0
   159f0:	sub	sp, fp, #16
   159f4:	pop	{r4, r5, r6, r7, fp, pc}
   159f8:	mvn	r0, #0
   159fc:	sub	sp, fp, #16
   15a00:	pop	{r4, r5, r6, r7, fp, pc}
   15a04:	mov	r1, r0
   15a08:	mov	r0, #0
   15a0c:	b	1136c <clock_gettime@plt>
   15a10:	push	{fp, lr}
   15a14:	mov	fp, sp
   15a18:	bl	15a04 <__assert_fail@plt+0x43c8>
   15a1c:	pop	{fp, pc}
   15a20:	push	{r4, sl, fp, lr}
   15a24:	add	fp, sp, #8
   15a28:	sub	sp, sp, #264	; 0x108
   15a2c:	add	r1, sp, #7
   15a30:	movw	r2, #257	; 0x101
   15a34:	bl	19394 <__assert_fail@plt+0x7d58>
   15a38:	mov	r4, #0
   15a3c:	cmp	r0, #0
   15a40:	bne	15a80 <__assert_fail@plt+0x4444>
   15a44:	add	r0, sp, #7
   15a48:	movw	r1, #54602	; 0xd54a
   15a4c:	movt	r1, #1
   15a50:	mov	r2, #2
   15a54:	bl	114e0 <bcmp@plt>
   15a58:	cmp	r0, #0
   15a5c:	beq	15a80 <__assert_fail@plt+0x4444>
   15a60:	add	r0, sp, #7
   15a64:	movw	r1, #54604	; 0xd54c
   15a68:	movt	r1, #1
   15a6c:	mov	r2, #6
   15a70:	bl	114e0 <bcmp@plt>
   15a74:	mov	r4, r0
   15a78:	cmp	r0, #0
   15a7c:	movwne	r4, #1
   15a80:	mov	r0, r4
   15a84:	sub	sp, fp, #8
   15a88:	pop	{r4, sl, fp, pc}
   15a8c:	push	{r4, r5, r6, sl, fp, lr}
   15a90:	add	fp, sp, #16
   15a94:	mov	r4, r1
   15a98:	mov	r5, r0
   15a9c:	mov	r0, #0
   15aa0:	strb	r0, [r2, #20]
   15aa4:	add	r6, r2, #19
   15aa8:	cmp	r1, #0
   15aac:	bmi	15afc <__assert_fail@plt+0x44c0>
   15ab0:	mov	r0, r5
   15ab4:	mov	r1, r4
   15ab8:	mov	r2, #10
   15abc:	mov	r3, #0
   15ac0:	bl	1bb2c <__assert_fail@plt+0xa4f0>
   15ac4:	add	r2, r0, r0, lsl #2
   15ac8:	sub	r2, r5, r2, lsl #1
   15acc:	add	r2, r2, #48	; 0x30
   15ad0:	strb	r2, [r6], #-1
   15ad4:	adds	r2, r5, #9
   15ad8:	adc	r3, r4, #0
   15adc:	rsbs	r2, r2, #18
   15ae0:	rscs	r2, r3, #0
   15ae4:	mov	r5, r0
   15ae8:	mov	r4, r1
   15aec:	bcc	15ab0 <__assert_fail@plt+0x4474>
   15af0:	add	r6, r6, #1
   15af4:	mov	r0, r6
   15af8:	pop	{r4, r5, r6, sl, fp, pc}
   15afc:	mov	r0, r5
   15b00:	mov	r1, r4
   15b04:	mov	r2, #10
   15b08:	mov	r3, #0
   15b0c:	bl	1bb2c <__assert_fail@plt+0xa4f0>
   15b10:	add	r2, r0, r0, lsl #2
   15b14:	rsb	r2, r5, r2, lsl #1
   15b18:	add	r2, r2, #48	; 0x30
   15b1c:	strb	r2, [r6], #-1
   15b20:	adds	r2, r5, #9
   15b24:	adc	r3, r4, #0
   15b28:	rsbs	r2, r2, #18
   15b2c:	rscs	r2, r3, #0
   15b30:	mov	r5, r0
   15b34:	mov	r4, r1
   15b38:	bcc	15afc <__assert_fail@plt+0x44c0>
   15b3c:	mov	r0, #45	; 0x2d
   15b40:	strb	r0, [r6]
   15b44:	mov	r0, r6
   15b48:	pop	{r4, r5, r6, sl, fp, pc}
   15b4c:	push	{r4, r5, fp, lr}
   15b50:	add	fp, sp, #8
   15b54:	mov	r4, r1
   15b58:	mov	r5, r0
   15b5c:	bl	114ec <strlen@plt>
   15b60:	mov	r1, r0
   15b64:	mov	r0, r5
   15b68:	mov	r2, r4
   15b6c:	pop	{r4, r5, fp, lr}
   15b70:	b	15b74 <__assert_fail@plt+0x4538>
   15b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b78:	add	fp, sp, #28
   15b7c:	sub	sp, sp, #20
   15b80:	mov	r5, r2
   15b84:	mov	r6, r1
   15b88:	mov	r4, r0
   15b8c:	add	r7, r0, r1
   15b90:	bl	11420 <__ctype_get_mb_cur_max@plt>
   15b94:	cmp	r0, #1
   15b98:	bls	15e40 <__assert_fail@plt+0x4804>
   15b9c:	cmp	r6, #1
   15ba0:	blt	15e98 <__assert_fail@plt+0x485c>
   15ba4:	and	r2, r5, #1
   15ba8:	and	sl, r5, #2
   15bac:	mov	r3, #0
   15bb0:	add	r8, sp, #4
   15bb4:	add	r9, sp, #8
   15bb8:	mov	r5, #0
   15bbc:	ldrb	r0, [r4]
   15bc0:	sub	r0, r0, #32
   15bc4:	cmp	r0, #94	; 0x5e
   15bc8:	bhi	15d64 <__assert_fail@plt+0x4728>
   15bcc:	add	r1, pc, #0
   15bd0:	ldr	pc, [r1, r0, lsl #2]
   15bd4:	andeq	r5, r1, r0, asr sp
   15bd8:	andeq	r5, r1, r0, asr sp
   15bdc:	andeq	r5, r1, r0, asr sp
   15be0:	andeq	r5, r1, r0, asr sp
   15be4:	andeq	r5, r1, r4, ror #26
   15be8:	andeq	r5, r1, r0, asr sp
   15bec:	andeq	r5, r1, r0, asr sp
   15bf0:	andeq	r5, r1, r0, asr sp
   15bf4:	andeq	r5, r1, r0, asr sp
   15bf8:	andeq	r5, r1, r0, asr sp
   15bfc:	andeq	r5, r1, r0, asr sp
   15c00:	andeq	r5, r1, r0, asr sp
   15c04:	andeq	r5, r1, r0, asr sp
   15c08:	andeq	r5, r1, r0, asr sp
   15c0c:	andeq	r5, r1, r0, asr sp
   15c10:	andeq	r5, r1, r0, asr sp
   15c14:	andeq	r5, r1, r0, asr sp
   15c18:	andeq	r5, r1, r0, asr sp
   15c1c:	andeq	r5, r1, r0, asr sp
   15c20:	andeq	r5, r1, r0, asr sp
   15c24:	andeq	r5, r1, r0, asr sp
   15c28:	andeq	r5, r1, r0, asr sp
   15c2c:	andeq	r5, r1, r0, asr sp
   15c30:	andeq	r5, r1, r0, asr sp
   15c34:	andeq	r5, r1, r0, asr sp
   15c38:	andeq	r5, r1, r0, asr sp
   15c3c:	andeq	r5, r1, r0, asr sp
   15c40:	andeq	r5, r1, r0, asr sp
   15c44:	andeq	r5, r1, r0, asr sp
   15c48:	andeq	r5, r1, r0, asr sp
   15c4c:	andeq	r5, r1, r0, asr sp
   15c50:	andeq	r5, r1, r0, asr sp
   15c54:	andeq	r5, r1, r4, ror #26
   15c58:	andeq	r5, r1, r0, asr sp
   15c5c:	andeq	r5, r1, r0, asr sp
   15c60:	andeq	r5, r1, r0, asr sp
   15c64:	andeq	r5, r1, r0, asr sp
   15c68:	andeq	r5, r1, r0, asr sp
   15c6c:	andeq	r5, r1, r0, asr sp
   15c70:	andeq	r5, r1, r0, asr sp
   15c74:	andeq	r5, r1, r0, asr sp
   15c78:	andeq	r5, r1, r0, asr sp
   15c7c:	andeq	r5, r1, r0, asr sp
   15c80:	andeq	r5, r1, r0, asr sp
   15c84:	andeq	r5, r1, r0, asr sp
   15c88:	andeq	r5, r1, r0, asr sp
   15c8c:	andeq	r5, r1, r0, asr sp
   15c90:	andeq	r5, r1, r0, asr sp
   15c94:	andeq	r5, r1, r0, asr sp
   15c98:	andeq	r5, r1, r0, asr sp
   15c9c:	andeq	r5, r1, r0, asr sp
   15ca0:	andeq	r5, r1, r0, asr sp
   15ca4:	andeq	r5, r1, r0, asr sp
   15ca8:	andeq	r5, r1, r0, asr sp
   15cac:	andeq	r5, r1, r0, asr sp
   15cb0:	andeq	r5, r1, r0, asr sp
   15cb4:	andeq	r5, r1, r0, asr sp
   15cb8:	andeq	r5, r1, r0, asr sp
   15cbc:	andeq	r5, r1, r0, asr sp
   15cc0:	andeq	r5, r1, r0, asr sp
   15cc4:	andeq	r5, r1, r0, asr sp
   15cc8:	andeq	r5, r1, r0, asr sp
   15ccc:	andeq	r5, r1, r0, asr sp
   15cd0:	andeq	r5, r1, r0, asr sp
   15cd4:	andeq	r5, r1, r4, ror #26
   15cd8:	andeq	r5, r1, r0, asr sp
   15cdc:	andeq	r5, r1, r0, asr sp
   15ce0:	andeq	r5, r1, r0, asr sp
   15ce4:	andeq	r5, r1, r0, asr sp
   15ce8:	andeq	r5, r1, r0, asr sp
   15cec:	andeq	r5, r1, r0, asr sp
   15cf0:	andeq	r5, r1, r0, asr sp
   15cf4:	andeq	r5, r1, r0, asr sp
   15cf8:	andeq	r5, r1, r0, asr sp
   15cfc:	andeq	r5, r1, r0, asr sp
   15d00:	andeq	r5, r1, r0, asr sp
   15d04:	andeq	r5, r1, r0, asr sp
   15d08:	andeq	r5, r1, r0, asr sp
   15d0c:	andeq	r5, r1, r0, asr sp
   15d10:	andeq	r5, r1, r0, asr sp
   15d14:	andeq	r5, r1, r0, asr sp
   15d18:	andeq	r5, r1, r0, asr sp
   15d1c:	andeq	r5, r1, r0, asr sp
   15d20:	andeq	r5, r1, r0, asr sp
   15d24:	andeq	r5, r1, r0, asr sp
   15d28:	andeq	r5, r1, r0, asr sp
   15d2c:	andeq	r5, r1, r0, asr sp
   15d30:	andeq	r5, r1, r0, asr sp
   15d34:	andeq	r5, r1, r0, asr sp
   15d38:	andeq	r5, r1, r0, asr sp
   15d3c:	andeq	r5, r1, r0, asr sp
   15d40:	andeq	r5, r1, r0, asr sp
   15d44:	andeq	r5, r1, r0, asr sp
   15d48:	andeq	r5, r1, r0, asr sp
   15d4c:	andeq	r5, r1, r0, asr sp
   15d50:	add	r5, r5, #1
   15d54:	add	r4, r4, #1
   15d58:	cmp	r4, r7
   15d5c:	bcc	15bbc <__assert_fail@plt+0x4580>
   15d60:	b	15eac <__assert_fail@plt+0x4870>
   15d64:	str	r2, [sp]
   15d68:	str	r3, [sp, #12]
   15d6c:	str	r3, [sp, #8]
   15d70:	b	15d9c <__assert_fail@plt+0x4760>
   15d74:	mvn	r1, #-2147483648	; 0x80000000
   15d78:	sub	r1, r1, r5
   15d7c:	cmp	r0, r1
   15d80:	bgt	15ea0 <__assert_fail@plt+0x4864>
   15d84:	add	r5, r0, r5
   15d88:	add	r4, r4, r6
   15d8c:	mov	r0, r9
   15d90:	bl	11390 <mbsinit@plt>
   15d94:	cmp	r0, #0
   15d98:	bne	15e34 <__assert_fail@plt+0x47f8>
   15d9c:	sub	r2, r7, r4
   15da0:	mov	r0, r8
   15da4:	mov	r1, r4
   15da8:	mov	r3, r9
   15dac:	bl	1ba8c <__assert_fail@plt+0xa450>
   15db0:	cmp	r0, #0
   15db4:	beq	15dd0 <__assert_fail@plt+0x4794>
   15db8:	mov	r6, r0
   15dbc:	cmn	r0, #2
   15dc0:	beq	15e0c <__assert_fail@plt+0x47d0>
   15dc4:	cmn	r6, #1
   15dc8:	bne	15dd4 <__assert_fail@plt+0x4798>
   15dcc:	b	15e20 <__assert_fail@plt+0x47e4>
   15dd0:	mov	r6, #1
   15dd4:	ldr	r0, [sp, #4]
   15dd8:	bl	11354 <wcwidth@plt>
   15ddc:	cmp	r0, #0
   15de0:	bpl	15d74 <__assert_fail@plt+0x4738>
   15de4:	cmp	sl, #0
   15de8:	bne	15ea8 <__assert_fail@plt+0x486c>
   15dec:	ldr	r0, [sp, #4]
   15df0:	bl	113d8 <iswcntrl@plt>
   15df4:	cmp	r0, #0
   15df8:	bne	15d88 <__assert_fail@plt+0x474c>
   15dfc:	cmn	r5, #-2147483647	; 0x80000001
   15e00:	beq	15ea0 <__assert_fail@plt+0x4864>
   15e04:	add	r5, r5, #1
   15e08:	b	15d88 <__assert_fail@plt+0x474c>
   15e0c:	ldr	r0, [sp]
   15e10:	cmp	r0, #0
   15e14:	mov	r4, r7
   15e18:	beq	15e30 <__assert_fail@plt+0x47f4>
   15e1c:	b	15ea8 <__assert_fail@plt+0x486c>
   15e20:	ldr	r0, [sp]
   15e24:	cmp	r0, #0
   15e28:	bne	15ea8 <__assert_fail@plt+0x486c>
   15e2c:	add	r4, r4, #1
   15e30:	add	r5, r5, #1
   15e34:	ldr	r2, [sp]
   15e38:	mov	r3, #0
   15e3c:	b	15d58 <__assert_fail@plt+0x471c>
   15e40:	cmp	r6, #1
   15e44:	blt	15e98 <__assert_fail@plt+0x485c>
   15e48:	and	r6, r5, #2
   15e4c:	bl	114c8 <__ctype_b_loc@plt>
   15e50:	ldr	r0, [r0]
   15e54:	mov	r5, #0
   15e58:	b	15e64 <__assert_fail@plt+0x4828>
   15e5c:	cmp	r4, r7
   15e60:	bcs	15eac <__assert_fail@plt+0x4870>
   15e64:	ldrb	r1, [r4], #1
   15e68:	add	r1, r0, r1, lsl #1
   15e6c:	ldrh	r1, [r1]
   15e70:	tst	r1, #16384	; 0x4000
   15e74:	bne	15e88 <__assert_fail@plt+0x484c>
   15e78:	cmp	r6, #0
   15e7c:	bne	15ea8 <__assert_fail@plt+0x486c>
   15e80:	tst	r1, #2
   15e84:	bne	15e5c <__assert_fail@plt+0x4820>
   15e88:	cmn	r5, #-2147483647	; 0x80000001
   15e8c:	beq	15ea0 <__assert_fail@plt+0x4864>
   15e90:	add	r5, r5, #1
   15e94:	b	15e5c <__assert_fail@plt+0x4820>
   15e98:	mov	r5, #0
   15e9c:	b	15eac <__assert_fail@plt+0x4870>
   15ea0:	mvn	r5, #-2147483648	; 0x80000000
   15ea4:	b	15eac <__assert_fail@plt+0x4870>
   15ea8:	mvn	r5, #0
   15eac:	mov	r0, r5
   15eb0:	sub	sp, fp, #28
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	push	{fp, lr}
   15ebc:	mov	fp, sp
   15ec0:	sub	sp, sp, #24
   15ec4:	mvn	ip, #0
   15ec8:	str	ip, [sp, #8]
   15ecc:	mov	ip, #0
   15ed0:	str	ip, [sp, #4]
   15ed4:	str	ip, [sp]
   15ed8:	ldr	ip, [fp, #12]
   15edc:	str	ip, [sp, #16]
   15ee0:	ldr	ip, [fp, #8]
   15ee4:	str	ip, [sp, #12]
   15ee8:	bl	15ef4 <__assert_fail@plt+0x48b8>
   15eec:	mov	sp, fp
   15ef0:	pop	{fp, pc}
   15ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef8:	add	fp, sp, #28
   15efc:	sub	sp, sp, #124	; 0x7c
   15f00:	sub	sp, sp, #1024	; 0x400
   15f04:	mov	r4, r3
   15f08:	mov	r7, r2
   15f0c:	str	r1, [sp, #88]	; 0x58
   15f10:	mov	r5, r0
   15f14:	bl	1151c <__errno_location@plt>
   15f18:	mov	r2, r4
   15f1c:	ldr	r1, [r2, #8]!
   15f20:	cmp	r1, #0
   15f24:	mov	r3, r1
   15f28:	movweq	r3, #12
   15f2c:	cmp	r1, #12
   15f30:	subgt	r3, r1, #12
   15f34:	ldr	r1, [r2, #32]
   15f38:	movw	r6, #53460	; 0xd0d4
   15f3c:	movt	r6, #1
   15f40:	cmp	r1, #0
   15f44:	movne	r6, r1
   15f48:	str	r0, [sp, #60]	; 0x3c
   15f4c:	ldr	r1, [r0]
   15f50:	ldrb	r0, [r7]
   15f54:	cmp	r0, #0
   15f58:	str	r1, [sp, #56]	; 0x38
   15f5c:	beq	1768c <__assert_fail@plt+0x6050>
   15f60:	str	r6, [sp, #44]	; 0x2c
   15f64:	str	r3, [sp, #32]
   15f68:	str	r2, [sp, #36]	; 0x24
   15f6c:	ldr	r6, [fp, #16]
   15f70:	sub	r1, fp, #48	; 0x30
   15f74:	add	r0, r1, #13
   15f78:	str	r0, [sp, #24]
   15f7c:	add	r0, sp, #96	; 0x60
   15f80:	add	r0, r0, #1
   15f84:	str	r0, [sp, #48]	; 0x30
   15f88:	sub	r0, fp, #53	; 0x35
   15f8c:	add	r2, r0, #3
   15f90:	str	r2, [sp, #52]	; 0x34
   15f94:	add	r0, r0, #2
   15f98:	str	r0, [sp, #68]	; 0x44
   15f9c:	add	r0, r1, #14
   15fa0:	str	r0, [sp, #64]	; 0x40
   15fa4:	str	r4, [sp, #76]	; 0x4c
   15fa8:	add	r0, r4, #12
   15fac:	str	r0, [sp, #28]
   15fb0:	mov	ip, #0
   15fb4:	mov	r8, #-2147483648	; 0x80000000
   15fb8:	movw	r3, #52428	; 0xcccc
   15fbc:	movt	r3, #3276	; 0xccc
   15fc0:	mov	lr, r5
   15fc4:	b	15fe0 <__assert_fail@plt+0x49a4>
   15fc8:	mov	lr, #0
   15fcc:	add	ip, r5, ip
   15fd0:	ldrb	r0, [r7, #1]!
   15fd4:	mvn	r6, #0
   15fd8:	cmp	r0, #0
   15fdc:	beq	17694 <__assert_fail@plt+0x6058>
   15fe0:	ldrb	r0, [r7]
   15fe4:	cmp	r0, #37	; 0x25
   15fe8:	bne	16088 <__assert_fail@plt+0x4a4c>
   15fec:	mov	r2, #0
   15ff0:	ldr	r0, [fp, #8]
   15ff4:	mov	r4, r0
   15ff8:	mov	sl, #0
   15ffc:	mov	r9, r7
   16000:	add	r9, r7, #1
   16004:	b	16018 <__assert_fail@plt+0x49dc>
   16008:	cmp	r5, #95	; 0x5f
   1600c:	bne	16074 <__assert_fail@plt+0x4a38>
   16010:	add	r9, r9, #1
   16014:	mov	sl, r5
   16018:	ldrb	r5, [r9]
   1601c:	sub	r0, r5, #35	; 0x23
   16020:	cmp	r0, #13
   16024:	bhi	16008 <__assert_fail@plt+0x49cc>
   16028:	add	r1, pc, #0
   1602c:	ldr	pc, [r1, r0, lsl #2]
   16030:	andeq	r6, r1, r8, rrx
   16034:	strdeq	r6, [r1], -r8
   16038:	strdeq	r6, [r1], -r8
   1603c:	strdeq	r6, [r1], -r8
   16040:	strdeq	r6, [r1], -r8
   16044:	strdeq	r6, [r1], -r8
   16048:	strdeq	r6, [r1], -r8
   1604c:	strdeq	r6, [r1], -r8
   16050:	andeq	r6, r1, r0, lsl r0
   16054:	strdeq	r6, [r1], -r8
   16058:	andeq	r6, r1, r0, lsl r0
   1605c:	strdeq	r6, [r1], -r8
   16060:	strdeq	r6, [r1], -r8
   16064:	andeq	r6, r1, r0, lsl r0
   16068:	mov	r2, #1
   1606c:	add	r9, r9, #1
   16070:	b	16018 <__assert_fail@plt+0x49dc>
   16074:	cmp	r5, #94	; 0x5e
   16078:	bne	160f8 <__assert_fail@plt+0x4abc>
   1607c:	mov	r4, #1
   16080:	add	r9, r9, #1
   16084:	b	16018 <__assert_fail@plt+0x49dc>
   16088:	bic	r0, r6, r6, asr #31
   1608c:	cmp	r0, #1
   16090:	mov	r5, r0
   16094:	movls	r5, #1
   16098:	ldr	r1, [sp, #88]	; 0x58
   1609c:	sub	r1, r1, ip
   160a0:	cmp	r5, r1
   160a4:	bcs	176b8 <__assert_fail@plt+0x607c>
   160a8:	cmp	lr, #0
   160ac:	beq	15fc8 <__assert_fail@plt+0x498c>
   160b0:	cmp	r0, #2
   160b4:	bcc	160ec <__assert_fail@plt+0x4ab0>
   160b8:	sub	r4, r0, #1
   160bc:	mov	r0, lr
   160c0:	mov	r1, #32
   160c4:	mov	r2, r4
   160c8:	mov	r8, ip
   160cc:	mov	r6, lr
   160d0:	bl	11540 <memset@plt>
   160d4:	mov	lr, r6
   160d8:	mov	ip, r8
   160dc:	add	lr, r6, r4
   160e0:	movw	r3, #52428	; 0xcccc
   160e4:	movt	r3, #3276	; 0xccc
   160e8:	mov	r8, #-2147483648	; 0x80000000
   160ec:	ldrb	r0, [r7]
   160f0:	strb	r0, [lr], #1
   160f4:	b	15fcc <__assert_fail@plt+0x4990>
   160f8:	sub	r0, r5, #48	; 0x30
   160fc:	cmp	r0, #9
   16100:	bhi	16168 <__assert_fail@plt+0x4b2c>
   16104:	mov	r6, #0
   16108:	cmn	r6, #1
   1610c:	bgt	16144 <__assert_fail@plt+0x4b08>
   16110:	b	16150 <__assert_fail@plt+0x4b14>
   16114:	ldrb	r0, [r9]
   16118:	add	r1, r6, r6, lsl #2
   1611c:	add	r0, r0, r1, lsl #1
   16120:	sub	r6, r0, #48	; 0x30
   16124:	cmp	r6, r1, lsl #1
   16128:	mvnvs	r6, #-2147483648	; 0x80000000
   1612c:	ldrb	r5, [r9, #1]!
   16130:	sub	r0, r5, #48	; 0x30
   16134:	cmp	r0, #10
   16138:	bcs	16168 <__assert_fail@plt+0x4b2c>
   1613c:	cmn	r6, #1
   16140:	ble	16150 <__assert_fail@plt+0x4b14>
   16144:	cmp	r6, r3
   16148:	ble	16114 <__assert_fail@plt+0x4ad8>
   1614c:	b	16160 <__assert_fail@plt+0x4b24>
   16150:	beq	16114 <__assert_fail@plt+0x4ad8>
   16154:	sdiv	r0, r8, r6
   16158:	cmp	r0, #10
   1615c:	bge	16114 <__assert_fail@plt+0x4ad8>
   16160:	mvn	r6, #-2147483648	; 0x80000000
   16164:	b	1612c <__assert_fail@plt+0x4af0>
   16168:	cmp	r5, #79	; 0x4f
   1616c:	cmpne	r5, #69	; 0x45
   16170:	bne	1617c <__assert_fail@plt+0x4b40>
   16174:	add	r9, r9, #1
   16178:	b	16180 <__assert_fail@plt+0x4b44>
   1617c:	mov	r5, #0
   16180:	str	r4, [sp, #92]	; 0x5c
   16184:	str	r7, [sp, #84]	; 0x54
   16188:	ldrb	r3, [r9]
   1618c:	cmp	r3, #122	; 0x7a
   16190:	bhi	16b6c <__assert_fail@plt+0x5530>
   16194:	mov	r7, r2
   16198:	mov	r8, #0
   1619c:	mvn	r2, #0
   161a0:	add	r0, pc, #16
   161a4:	movw	r1, #26215	; 0x6667
   161a8:	movt	r1, #26214	; 0x6666
   161ac:	movw	r4, #49037	; 0xbf8d
   161b0:	movt	r4, #1
   161b4:	ldr	pc, [r0, r3, lsl #2]
   161b8:	andeq	r6, r1, ip, lsl #9
   161bc:	andeq	r6, r1, ip, ror #22
   161c0:	andeq	r6, r1, ip, ror #22
   161c4:	andeq	r6, r1, ip, ror #22
   161c8:	andeq	r6, r1, ip, ror #22
   161cc:	andeq	r6, r1, ip, ror #22
   161d0:	andeq	r6, r1, ip, ror #22
   161d4:	andeq	r6, r1, ip, ror #22
   161d8:	andeq	r6, r1, ip, ror #22
   161dc:	andeq	r6, r1, ip, ror #22
   161e0:	andeq	r6, r1, ip, ror #22
   161e4:	andeq	r6, r1, ip, ror #22
   161e8:	andeq	r6, r1, ip, ror #22
   161ec:	andeq	r6, r1, ip, ror #22
   161f0:	andeq	r6, r1, ip, ror #22
   161f4:	andeq	r6, r1, ip, ror #22
   161f8:	andeq	r6, r1, ip, ror #22
   161fc:	andeq	r6, r1, ip, ror #22
   16200:	andeq	r6, r1, ip, ror #22
   16204:	andeq	r6, r1, ip, ror #22
   16208:	andeq	r6, r1, ip, ror #22
   1620c:	andeq	r6, r1, ip, ror #22
   16210:	andeq	r6, r1, ip, ror #22
   16214:	andeq	r6, r1, ip, ror #22
   16218:	andeq	r6, r1, ip, ror #22
   1621c:	andeq	r6, r1, ip, ror #22
   16220:	andeq	r6, r1, ip, ror #22
   16224:	andeq	r6, r1, ip, ror #22
   16228:	andeq	r6, r1, ip, ror #22
   1622c:	andeq	r6, r1, ip, ror #22
   16230:	andeq	r6, r1, ip, ror #22
   16234:	andeq	r6, r1, ip, ror #22
   16238:	andeq	r6, r1, ip, ror #22
   1623c:	andeq	r6, r1, ip, ror #22
   16240:	andeq	r6, r1, ip, ror #22
   16244:	andeq	r6, r1, ip, ror #22
   16248:	andeq	r6, r1, ip, ror #22
   1624c:	andeq	r6, r1, ip, ror r4
   16250:	andeq	r6, r1, ip, ror #22
   16254:	andeq	r6, r1, ip, ror #22
   16258:	andeq	r6, r1, ip, ror #22
   1625c:	andeq	r6, r1, ip, ror #22
   16260:	andeq	r6, r1, ip, ror #22
   16264:	andeq	r6, r1, ip, ror #22
   16268:	andeq	r6, r1, ip, ror #22
   1626c:	andeq	r6, r1, ip, ror #22
   16270:	andeq	r6, r1, ip, ror #22
   16274:	andeq	r6, r1, ip, ror #22
   16278:	andeq	r6, r1, ip, ror #22
   1627c:	andeq	r6, r1, ip, ror #22
   16280:	andeq	r6, r1, ip, ror #22
   16284:	andeq	r6, r1, ip, ror #22
   16288:	andeq	r6, r1, ip, ror #22
   1628c:	andeq	r6, r1, ip, ror #22
   16290:	andeq	r6, r1, ip, ror #22
   16294:	andeq	r6, r1, ip, ror #22
   16298:	andeq	r6, r1, ip, ror #22
   1629c:	andeq	r6, r1, ip, ror #22
   162a0:	muleq	r1, r4, r4
   162a4:	andeq	r6, r1, ip, ror #22
   162a8:	andeq	r6, r1, ip, ror #22
   162ac:	andeq	r6, r1, ip, ror #22
   162b0:	andeq	r6, r1, ip, ror #22
   162b4:	andeq	r6, r1, ip, ror #22
   162b8:	andeq	r6, r1, ip, ror #22
   162bc:	andeq	r6, r1, ip, lsr #9
   162c0:	andeq	r6, r1, ip, asr #9
   162c4:	andeq	r6, r1, ip, ror #9
   162c8:	andeq	r6, r1, r0, lsl #10
   162cc:	andeq	r6, r1, ip, ror #22
   162d0:	andeq	r6, r1, r4, lsl r5
   162d4:	andeq	r6, r1, r4, lsr #7
   162d8:	andeq	r6, r1, r0, asr #10
   162dc:	andeq	r6, r1, r4, asr r5
   162e0:	andeq	r6, r1, ip, ror #22
   162e4:	andeq	r6, r1, ip, ror #22
   162e8:	andeq	r6, r1, ip, ror #22
   162ec:	andeq	r6, r1, ip, ror #10
   162f0:	andeq	r6, r1, r0, lsl #11
   162f4:	andeq	r6, r1, ip, ror #22
   162f8:	strdeq	r6, [r1], -r4
   162fc:	andeq	r6, r1, ip, ror #22
   16300:	andeq	r6, r1, r0, lsr r6
   16304:	andeq	r6, r1, r4, lsl r6
   16308:	andeq	r6, r1, r8, lsr #12
   1630c:	ldrdeq	r6, [r1], -r8
   16310:	andeq	r6, r1, r4, lsr #7
   16314:	andeq	r6, r1, ip, lsl #14
   16318:	andeq	r6, r1, ip, ror #14
   1631c:	andeq	r6, r1, r0, lsl #15
   16320:			; <UNDEFINED> instruction: 0x000167b0
   16324:	andeq	r6, r1, ip, ror #22
   16328:	andeq	r6, r1, ip, ror #22
   1632c:	andeq	r6, r1, ip, ror #22
   16330:	andeq	r6, r1, ip, ror #22
   16334:	andeq	r6, r1, ip, ror #22
   16338:	andeq	r6, r1, ip, ror #22
   1633c:	andeq	r6, r1, r8, lsl r8
   16340:	andeq	r6, r1, r0, ror #8
   16344:	andeq	r6, r1, r8, lsr r8
   16348:	andeq	r6, r1, ip, asr #16
   1634c:	andeq	r6, r1, r0, ror #16
   16350:	andeq	r6, r1, ip, ror #22
   16354:	andeq	r6, r1, r4, lsr #7
   16358:	andeq	r6, r1, r0, ror #8
   1635c:	andeq	r6, r1, ip, ror #22
   16360:	andeq	r6, r1, r0, ror r8
   16364:	muleq	r1, r8, r8
   16368:	andeq	r6, r1, ip, lsr #17
   1636c:	andeq	r6, r1, r4, asr #17
   16370:	strdeq	r6, [r1], -r4
   16374:	andeq	r6, r1, ip, ror #22
   16378:	strdeq	r6, [r1], -r8
   1637c:	andeq	r6, r1, r4, asr r9
   16380:	andeq	r7, r1, r4, asr #32
   16384:	andeq	r6, r1, r0, lsl #19
   16388:	andeq	r6, r1, ip, asr #20
   1638c:	andeq	r6, r1, ip, lsr #21
   16390:	andeq	r6, r1, ip, ror #22
   16394:	andeq	r6, r1, r0, ror #21
   16398:	strdeq	r6, [r1], -r8
   1639c:	andeq	r6, r1, ip, lsl #22
   163a0:	andeq	r6, r1, ip, lsr #22
   163a4:	cmp	r5, #69	; 0x45
   163a8:	beq	16b6c <__assert_fail@plt+0x5530>
   163ac:	str	r3, [sp, #40]	; 0x28
   163b0:	str	lr, [sp, #72]	; 0x48
   163b4:	str	ip, [sp, #80]	; 0x50
   163b8:	ldr	r0, [sp, #76]	; 0x4c
   163bc:	ldr	r2, [r0, #20]
   163c0:	ldr	r1, [r0, #24]
   163c4:	ldr	r7, [r0, #28]
   163c8:	mvn	r0, #99	; 0x63
   163cc:	cmp	r2, #0
   163d0:	movwmi	r0, #300	; 0x12c
   163d4:	str	r2, [sp, #20]
   163d8:	add	r8, r0, r2
   163dc:	mov	r0, r7
   163e0:	str	r1, [sp, #84]	; 0x54
   163e4:	bl	17754 <__assert_fail@plt+0x6118>
   163e8:	cmn	r0, #1
   163ec:	ble	16c68 <__assert_fail@plt+0x562c>
   163f0:	mov	r4, r0
   163f4:	movw	r0, #365	; 0x16d
   163f8:	tst	r8, #3
   163fc:	bne	16440 <__assert_fail@plt+0x4e04>
   16400:	movw	r0, #34079	; 0x851f
   16404:	movt	r0, #20971	; 0x51eb
   16408:	smmul	r0, r8, r0
   1640c:	asr	r1, r0, #5
   16410:	add	r1, r1, r0, lsr #31
   16414:	mov	r2, #100	; 0x64
   16418:	mls	r1, r1, r2, r8
   1641c:	asr	r2, r0, #7
   16420:	add	r0, r2, r0, lsr #31
   16424:	mov	r2, #400	; 0x190
   16428:	mls	r2, r0, r2, r8
   1642c:	movw	r0, #365	; 0x16d
   16430:	cmp	r2, #0
   16434:	movweq	r0, #366	; 0x16e
   16438:	cmp	r1, #0
   1643c:	movwne	r0, #366	; 0x16e
   16440:	sub	r0, r7, r0
   16444:	ldr	r1, [sp, #84]	; 0x54
   16448:	bl	17754 <__assert_fail@plt+0x6118>
   1644c:	cmn	r0, #1
   16450:	movgt	r4, r0
   16454:	mvn	r0, r0
   16458:	lsr	r0, r0, #31
   1645c:	b	16ccc <__assert_fail@plt+0x5690>
   16460:	ldr	r0, [sp, #92]	; 0x5c
   16464:	orr	r0, r7, r0
   16468:	mov	r8, #0
   1646c:	cmp	r5, #69	; 0x45
   16470:	str	r0, [sp, #92]	; 0x5c
   16474:	bne	17044 <__assert_fail@plt+0x5a08>
   16478:	b	16b6c <__assert_fail@plt+0x5530>
   1647c:	sub	r0, r9, #1
   16480:	ldr	r1, [sp, #84]	; 0x54
   16484:	cmp	r0, r1
   16488:	beq	17290 <__assert_fail@plt+0x5c54>
   1648c:	sub	r9, r9, #1
   16490:	b	16b6c <__assert_fail@plt+0x5530>
   16494:	mov	r8, #1
   16498:	ldrb	r0, [r9, r8]
   1649c:	cmp	r0, #58	; 0x3a
   164a0:	bne	16b20 <__assert_fail@plt+0x54e4>
   164a4:	add	r8, r8, #1
   164a8:	b	16498 <__assert_fail@plt+0x4e5c>
   164ac:	cmp	r5, #0
   164b0:	bne	16b6c <__assert_fail@plt+0x5530>
   164b4:	ldr	r0, [sp, #92]	; 0x5c
   164b8:	orr	r0, r7, r0
   164bc:	str	r0, [sp, #92]	; 0x5c
   164c0:	mov	r8, #0
   164c4:	mov	r3, #65	; 0x41
   164c8:	b	17044 <__assert_fail@plt+0x5a08>
   164cc:	cmp	r5, #69	; 0x45
   164d0:	beq	16b6c <__assert_fail@plt+0x5530>
   164d4:	ldr	r0, [sp, #92]	; 0x5c
   164d8:	orr	r0, r7, r0
   164dc:	str	r0, [sp, #92]	; 0x5c
   164e0:	mov	r8, #0
   164e4:	mov	r3, #66	; 0x42
   164e8:	b	17044 <__assert_fail@plt+0x5a08>
   164ec:	cmp	r5, #69	; 0x45
   164f0:	bne	16d3c <__assert_fail@plt+0x5700>
   164f4:	mov	r8, #0
   164f8:	mov	r3, #67	; 0x43
   164fc:	b	17044 <__assert_fail@plt+0x5a08>
   16500:	cmp	r5, #0
   16504:	bne	16b6c <__assert_fail@plt+0x5530>
   16508:	movw	r4, #54610	; 0xd552
   1650c:	movt	r4, #1
   16510:	b	16630 <__assert_fail@plt+0x4ff4>
   16514:	cmp	r5, #0
   16518:	bne	16b6c <__assert_fail@plt+0x5530>
   1651c:	movw	r4, #54619	; 0xd55b
   16520:	movt	r4, #1
   16524:	cmp	sl, #0
   16528:	bne	17424 <__assert_fail@plt+0x5de8>
   1652c:	cmp	r6, #0
   16530:	bpl	17424 <__assert_fail@plt+0x5de8>
   16534:	mov	sl, #43	; 0x2b
   16538:	mov	r2, #4
   1653c:	b	16630 <__assert_fail@plt+0x4ff4>
   16540:	cmp	r5, #69	; 0x45
   16544:	beq	16b6c <__assert_fail@plt+0x5530>
   16548:	ldr	r0, [sp, #36]	; 0x24
   1654c:	ldr	r0, [r0]
   16550:	b	16f10 <__assert_fail@plt+0x58d4>
   16554:	cmp	r5, #69	; 0x45
   16558:	beq	16b6c <__assert_fail@plt+0x5530>
   1655c:	mov	r0, #2
   16560:	str	r0, [sp, #72]	; 0x48
   16564:	ldr	r0, [sp, #32]
   16568:	b	16f18 <__assert_fail@plt+0x58dc>
   1656c:	cmp	r5, #69	; 0x45
   16570:	beq	16b6c <__assert_fail@plt+0x5530>
   16574:	ldr	r0, [sp, #76]	; 0x4c
   16578:	ldr	r0, [r0, #4]
   1657c:	b	16f10 <__assert_fail@plt+0x58d4>
   16580:	cmp	r5, #69	; 0x45
   16584:	beq	16b6c <__assert_fail@plt+0x5530>
   16588:	mov	r2, r1
   1658c:	cmp	r6, #1
   16590:	movwlt	r6, #9
   16594:	mov	r4, #9
   16598:	mov	r0, #8
   1659c:	ldr	r1, [fp, #24]
   165a0:	sub	r7, fp, #48	; 0x30
   165a4:	mov	r5, r2
   165a8:	cmp	r6, r4
   165ac:	blt	165d4 <__assert_fail@plt+0x4f98>
   165b0:	cmp	r4, #2
   165b4:	blt	16d98 <__assert_fail@plt+0x575c>
   165b8:	smmul	r2, r1, r5
   165bc:	asr	r3, r2, #2
   165c0:	add	r2, r3, r2, lsr #31
   165c4:	add	r2, r2, r2, lsl #2
   165c8:	sub	r2, r1, r2, lsl #1
   165cc:	cmp	r2, #0
   165d0:	bne	16d98 <__assert_fail@plt+0x575c>
   165d4:	smmul	r1, r1, r5
   165d8:	asr	r2, r1, #2
   165dc:	add	r1, r2, r1, lsr #31
   165e0:	sub	r0, r0, #1
   165e4:	sub	r4, r4, #1
   165e8:	cmp	r6, r4
   165ec:	blt	165d4 <__assert_fail@plt+0x4f98>
   165f0:	b	165b0 <__assert_fail@plt+0x4f74>
   165f4:	mov	r8, #1
   165f8:	orr	r8, r7, r8
   165fc:	eor	r0, r7, #1
   16600:	ldr	r1, [sp, #92]	; 0x5c
   16604:	and	r1, r1, r0
   16608:	str	r1, [sp, #92]	; 0x5c
   1660c:	mov	r3, #112	; 0x70
   16610:	b	17044 <__assert_fail@plt+0x5a08>
   16614:	cmp	r5, #69	; 0x45
   16618:	beq	16b6c <__assert_fail@plt+0x5530>
   1661c:	ldr	r0, [sp, #76]	; 0x4c
   16620:	ldr	r0, [r0]
   16624:	b	16f10 <__assert_fail@plt+0x58d4>
   16628:	movw	r4, #54628	; 0xd564
   1662c:	movt	r4, #1
   16630:	str	lr, [sp, #72]	; 0x48
   16634:	ldr	r0, [sp, #92]	; 0x5c
   16638:	and	r5, r0, #1
   1663c:	stm	sp, {r5, sl}
   16640:	str	r2, [sp, #92]	; 0x5c
   16644:	str	r2, [sp, #8]
   16648:	ldr	r0, [fp, #20]
   1664c:	str	r0, [sp, #12]
   16650:	ldr	r0, [fp, #24]
   16654:	str	r0, [sp, #16]
   16658:	mov	r0, #0
   1665c:	mvn	r1, #0
   16660:	mov	r2, r4
   16664:	ldr	r3, [sp, #76]	; 0x4c
   16668:	str	ip, [sp, #80]	; 0x50
   1666c:	bl	15ef4 <__assert_fail@plt+0x48b8>
   16670:	ldr	ip, [sp, #80]	; 0x50
   16674:	mov	r8, r0
   16678:	subs	r0, sl, #45	; 0x2d
   1667c:	movne	r0, r6
   16680:	cmp	r6, #0
   16684:	movwmi	r0, #0
   16688:	cmp	r0, r8
   1668c:	mov	r7, r8
   16690:	movhi	r7, r0
   16694:	ldr	r1, [sp, #88]	; 0x58
   16698:	sub	r6, r1, ip
   1669c:	cmp	r7, r6
   166a0:	bcs	176b8 <__assert_fail@plt+0x607c>
   166a4:	str	r5, [sp, #84]	; 0x54
   166a8:	ldr	r5, [sp, #72]	; 0x48
   166ac:	cmp	r5, #0
   166b0:	beq	16c54 <__assert_fail@plt+0x5618>
   166b4:	cmp	r0, r8
   166b8:	bls	16c5c <__assert_fail@plt+0x5620>
   166bc:	sub	r2, r0, r8
   166c0:	cmp	sl, #48	; 0x30
   166c4:	cmpne	sl, #43	; 0x2b
   166c8:	bne	173b0 <__assert_fail@plt+0x5d74>
   166cc:	mov	r0, r5
   166d0:	mov	r1, #48	; 0x30
   166d4:	b	173b8 <__assert_fail@plt+0x5d7c>
   166d8:	cmp	r5, #69	; 0x45
   166dc:	beq	16b6c <__assert_fail@plt+0x5530>
   166e0:	ldr	r1, [sp, #76]	; 0x4c
   166e4:	ldr	r0, [r1, #24]
   166e8:	ldr	r1, [r1, #28]
   166ec:	sub	r0, r1, r0
   166f0:	add	r0, r0, #7
   166f4:	movw	r1, #9363	; 0x2493
   166f8:	movt	r1, #37449	; 0x9249
   166fc:	smmla	r0, r0, r1, r0
   16700:	asr	r1, r0, #2
   16704:	add	r0, r1, r0, lsr #31
   16708:	b	16f10 <__assert_fail@plt+0x58d4>
   1670c:	cmp	r5, #69	; 0x45
   16710:	beq	16b6c <__assert_fail@plt+0x5530>
   16714:	ldr	r1, [sp, #76]	; 0x4c
   16718:	ldr	r0, [r1, #24]
   1671c:	ldr	r1, [r1, #28]
   16720:	add	r0, r0, #6
   16724:	movw	r8, #9363	; 0x2493
   16728:	movt	r8, #37449	; 0x9249
   1672c:	mov	r2, r3
   16730:	smmla	r3, r0, r8, r0
   16734:	asr	r7, r3, #2
   16738:	add	r3, r7, r3, lsr #31
   1673c:	ldr	r4, [sp, #92]	; 0x5c
   16740:	rsb	r3, r3, r3, lsl #3
   16744:	sub	r0, r3, r0
   16748:	mov	r3, r2
   1674c:	add	r0, r1, r0
   16750:	add	r0, r0, #7
   16754:	smmla	r0, r0, r8, r0
   16758:	asr	r1, r0, #2
   1675c:	add	r0, r1, r0, lsr #31
   16760:	mov	r1, #2
   16764:	str	r1, [sp, #72]	; 0x48
   16768:	b	16f1c <__assert_fail@plt+0x58e0>
   1676c:	cmp	r5, #79	; 0x4f
   16770:	beq	16b6c <__assert_fail@plt+0x5530>
   16774:	mov	r8, #0
   16778:	mov	r3, #88	; 0x58
   1677c:	b	17044 <__assert_fail@plt+0x5a08>
   16780:	cmp	r5, #69	; 0x45
   16784:	beq	1739c <__assert_fail@plt+0x5d60>
   16788:	cmp	r5, #79	; 0x4f
   1678c:	beq	16b6c <__assert_fail@plt+0x5530>
   16790:	ldr	r0, [sp, #76]	; 0x4c
   16794:	ldr	r0, [r0, #20]
   16798:	movw	r2, #63636	; 0xf894
   1679c:	movt	r2, #65535	; 0xffff
   167a0:	mov	r1, #0
   167a4:	cmp	r0, r2
   167a8:	movwlt	r1, #1
   167ac:	b	16e88 <__assert_fail@plt+0x584c>
   167b0:	str	lr, [sp, #72]	; 0x48
   167b4:	subs	r8, sl, #45	; 0x2d
   167b8:	bicne	r8, r6, r6, asr #31
   167bc:	ldr	r0, [sp, #44]	; 0x2c
   167c0:	mov	r6, ip
   167c4:	bl	114ec <strlen@plt>
   167c8:	mov	r4, r0
   167cc:	cmp	r8, r0
   167d0:	mov	r5, r0
   167d4:	movhi	r5, r8
   167d8:	ldr	r0, [sp, #88]	; 0x58
   167dc:	sub	r0, r0, r6
   167e0:	cmp	r5, r0
   167e4:	bcs	176b8 <__assert_fail@plt+0x607c>
   167e8:	ldr	r0, [sp, #72]	; 0x48
   167ec:	cmp	r0, #0
   167f0:	beq	172f8 <__assert_fail@plt+0x5cbc>
   167f4:	cmp	r8, r4
   167f8:	bls	173a8 <__assert_fail@plt+0x5d6c>
   167fc:	sub	r8, r8, r4
   16800:	uxtb	r1, sl
   16804:	cmp	r1, #48	; 0x30
   16808:	cmpne	r1, #43	; 0x2b
   1680c:	bne	17508 <__assert_fail@plt+0x5ecc>
   16810:	mov	r1, #48	; 0x30
   16814:	b	1750c <__assert_fail@plt+0x5ed0>
   16818:	cmp	r5, #0
   1681c:	bne	16b6c <__assert_fail@plt+0x5530>
   16820:	ldr	r0, [sp, #92]	; 0x5c
   16824:	orr	r0, r7, r0
   16828:	str	r0, [sp, #92]	; 0x5c
   1682c:	mov	r8, #0
   16830:	mov	r3, #97	; 0x61
   16834:	b	17044 <__assert_fail@plt+0x5a08>
   16838:	cmp	r5, #79	; 0x4f
   1683c:	beq	16b6c <__assert_fail@plt+0x5530>
   16840:	mov	r8, #0
   16844:	mov	r3, #99	; 0x63
   16848:	b	17044 <__assert_fail@plt+0x5a08>
   1684c:	cmp	r5, #69	; 0x45
   16850:	beq	16b6c <__assert_fail@plt+0x5530>
   16854:	ldr	r0, [sp, #76]	; 0x4c
   16858:	ldr	r0, [r0, #12]
   1685c:	b	16f10 <__assert_fail@plt+0x58d4>
   16860:	cmp	r5, #69	; 0x45
   16864:	ldr	r0, [sp, #28]
   16868:	bne	168a4 <__assert_fail@plt+0x5268>
   1686c:	b	16b6c <__assert_fail@plt+0x5530>
   16870:	cmp	r5, #69	; 0x45
   16874:	beq	16b6c <__assert_fail@plt+0x5530>
   16878:	ldr	r0, [sp, #76]	; 0x4c
   1687c:	ldr	r0, [r0, #28]
   16880:	mov	r1, #0
   16884:	cmn	r0, #1
   16888:	movwlt	r1, #1
   1688c:	add	r0, r0, #1
   16890:	mov	r2, #3
   16894:	b	168e8 <__assert_fail@plt+0x52ac>
   16898:	cmp	r5, #69	; 0x45
   1689c:	ldr	r0, [sp, #36]	; 0x24
   168a0:	beq	16b6c <__assert_fail@plt+0x5530>
   168a4:	ldr	r0, [r0]
   168a8:	b	168b8 <__assert_fail@plt+0x527c>
   168ac:	cmp	r5, #69	; 0x45
   168b0:	ldr	r0, [sp, #32]
   168b4:	beq	16b6c <__assert_fail@plt+0x5530>
   168b8:	cmp	sl, #0
   168bc:	movweq	sl, #95	; 0x5f
   168c0:	b	16f10 <__assert_fail@plt+0x58d4>
   168c4:	cmp	r5, #69	; 0x45
   168c8:	beq	16b6c <__assert_fail@plt+0x5530>
   168cc:	ldr	r0, [sp, #76]	; 0x4c
   168d0:	ldr	r0, [r0, #16]
   168d4:	mov	r1, #0
   168d8:	cmn	r0, #1
   168dc:	movwlt	r1, #1
   168e0:	add	r0, r0, #1
   168e4:	mov	r2, #2
   168e8:	str	r2, [sp, #72]	; 0x48
   168ec:	ldr	r4, [sp, #92]	; 0x5c
   168f0:	b	16f20 <__assert_fail@plt+0x58e4>
   168f4:	subs	r0, sl, #45	; 0x2d
   168f8:	bicne	r0, r6, r6, asr #31
   168fc:	cmp	r0, #1
   16900:	mov	r5, r0
   16904:	movls	r5, #1
   16908:	ldr	r1, [sp, #88]	; 0x58
   1690c:	sub	r1, r1, ip
   16910:	cmp	r5, r1
   16914:	bcs	176b8 <__assert_fail@plt+0x607c>
   16918:	cmp	lr, #0
   1691c:	mov	r8, #-2147483648	; 0x80000000
   16920:	movw	r3, #52428	; 0xcccc
   16924:	movt	r3, #3276	; 0xccc
   16928:	beq	172f0 <__assert_fail@plt+0x5cb4>
   1692c:	cmp	r0, #2
   16930:	bcc	175a8 <__assert_fail@plt+0x5f6c>
   16934:	uxtb	r1, sl
   16938:	sub	r4, r0, #1
   1693c:	cmp	r1, #48	; 0x30
   16940:	cmpne	r1, #43	; 0x2b
   16944:	bne	17578 <__assert_fail@plt+0x5f3c>
   16948:	mov	r0, lr
   1694c:	mov	r1, #48	; 0x30
   16950:	b	17580 <__assert_fail@plt+0x5f44>
   16954:	ldr	r0, [sp, #76]	; 0x4c
   16958:	ldr	r0, [r0, #16]
   1695c:	mov	r1, #11
   16960:	mul	r0, r0, r1
   16964:	mov	r2, #1
   16968:	mov	r1, #1
   1696c:	str	r1, [sp, #72]	; 0x48
   16970:	add	r0, r2, r0, asr #5
   16974:	mov	r1, #0
   16978:	ldr	r4, [sp, #92]	; 0x5c
   1697c:	b	16f20 <__assert_fail@plt+0x58e4>
   16980:	mov	r5, r1
   16984:	str	lr, [sp, #72]	; 0x48
   16988:	str	ip, [sp, #80]	; 0x50
   1698c:	mov	r0, #28
   16990:	ldr	r2, [sp, #76]	; 0x4c
   16994:	mov	r3, r2
   16998:	vld1.32	{d16-d17}, [r3], r0
   1699c:	add	r2, r2, #16
   169a0:	vld1.32	{d18-d19}, [r2]
   169a4:	add	r1, sp, #96	; 0x60
   169a8:	add	r2, r1, #16
   169ac:	vld1.32	{d20-d21}, [r3]
   169b0:	vst1.64	{d18-d19}, [r2]
   169b4:	mov	r4, r1
   169b8:	vst1.64	{d16-d17}, [r4], r0
   169bc:	vst1.32	{d20-d21}, [r4]
   169c0:	mvn	r0, #0
   169c4:	str	r0, [r4]
   169c8:	ldr	r0, [fp, #20]
   169cc:	bl	197e8 <__assert_fail@plt+0x81ac>
   169d0:	ldr	r1, [r4]
   169d4:	cmp	r1, #0
   169d8:	bmi	176d4 <__assert_fail@plt+0x6098>
   169dc:	lsr	r1, r0, #31
   169e0:	ldr	r2, [sp, #24]
   169e4:	mov	r3, r0
   169e8:	mov	r4, r5
   169ec:	smmul	r7, r3, r4
   169f0:	asr	r5, r7, #2
   169f4:	add	r7, r5, r7, lsr #31
   169f8:	add	r5, r7, r7, lsl #2
   169fc:	sub	r5, r3, r5, lsl #1
   16a00:	cmp	r0, #0
   16a04:	rsbmi	r5, r5, #0
   16a08:	add	r5, r5, #48	; 0x30
   16a0c:	strb	r5, [r2], #-1
   16a10:	add	r3, r3, #9
   16a14:	cmp	r3, #18
   16a18:	mov	r3, r7
   16a1c:	bhi	169ec <__assert_fail@plt+0x53b0>
   16a20:	add	r8, r2, #1
   16a24:	cmp	r6, #0
   16a28:	movwmi	r6, #1
   16a2c:	cmp	sl, #0
   16a30:	movweq	sl, #48	; 0x30
   16a34:	mov	r3, #0
   16a38:	mov	r2, r6
   16a3c:	str	r9, [sp, #84]	; 0x54
   16a40:	ldr	ip, [sp, #80]	; 0x50
   16a44:	ldr	lr, [sp, #72]	; 0x48
   16a48:	b	16fc0 <__assert_fail@plt+0x5984>
   16a4c:	subs	r0, sl, #45	; 0x2d
   16a50:	bicne	r0, r6, r6, asr #31
   16a54:	cmp	r0, #1
   16a58:	mov	r5, r0
   16a5c:	movls	r5, #1
   16a60:	ldr	r1, [sp, #88]	; 0x58
   16a64:	sub	r1, r1, ip
   16a68:	cmp	r5, r1
   16a6c:	bcs	176b8 <__assert_fail@plt+0x607c>
   16a70:	cmp	lr, #0
   16a74:	mov	r8, #-2147483648	; 0x80000000
   16a78:	movw	r3, #52428	; 0xcccc
   16a7c:	movt	r3, #3276	; 0xccc
   16a80:	beq	172f0 <__assert_fail@plt+0x5cb4>
   16a84:	cmp	r0, #2
   16a88:	bcc	175e0 <__assert_fail@plt+0x5fa4>
   16a8c:	uxtb	r1, sl
   16a90:	sub	r4, r0, #1
   16a94:	cmp	r1, #48	; 0x30
   16a98:	cmpne	r1, #43	; 0x2b
   16a9c:	bne	175b0 <__assert_fail@plt+0x5f74>
   16aa0:	mov	r0, lr
   16aa4:	mov	r1, #48	; 0x30
   16aa8:	b	175b8 <__assert_fail@plt+0x5f7c>
   16aac:	ldr	r0, [sp, #76]	; 0x4c
   16ab0:	ldr	r0, [r0, #24]
   16ab4:	add	r0, r0, #6
   16ab8:	movw	r1, #9363	; 0x2493
   16abc:	movt	r1, #37449	; 0x9249
   16ac0:	smmla	r1, r0, r1, r0
   16ac4:	asr	r2, r1, #2
   16ac8:	add	r1, r2, r1, lsr #31
   16acc:	rsb	r1, r1, r1, lsl #3
   16ad0:	sub	r0, r0, r1
   16ad4:	add	r0, r0, #1
   16ad8:	mov	r1, #1
   16adc:	b	16f14 <__assert_fail@plt+0x58d8>
   16ae0:	cmp	r5, #69	; 0x45
   16ae4:	beq	16b6c <__assert_fail@plt+0x5530>
   16ae8:	ldr	r0, [sp, #76]	; 0x4c
   16aec:	ldr	r0, [r0, #24]
   16af0:	mov	r1, #1
   16af4:	b	16f14 <__assert_fail@plt+0x58d8>
   16af8:	cmp	r5, #79	; 0x4f
   16afc:	beq	16b6c <__assert_fail@plt+0x5530>
   16b00:	mov	r8, #0
   16b04:	mov	r3, #120	; 0x78
   16b08:	b	17044 <__assert_fail@plt+0x5a08>
   16b0c:	cmp	r5, #69	; 0x45
   16b10:	bne	16e20 <__assert_fail@plt+0x57e4>
   16b14:	mov	r8, #0
   16b18:	mov	r3, #121	; 0x79
   16b1c:	b	17044 <__assert_fail@plt+0x5a08>
   16b20:	cmp	r0, #122	; 0x7a
   16b24:	bne	16b6c <__assert_fail@plt+0x5530>
   16b28:	add	r9, r9, r8
   16b2c:	ldr	r1, [sp, #76]	; 0x4c
   16b30:	ldr	r0, [r1, #32]
   16b34:	cmp	r0, #0
   16b38:	bmi	16c4c <__assert_fail@plt+0x5610>
   16b3c:	ldr	r2, [r1, #36]	; 0x24
   16b40:	cmp	r2, #0
   16b44:	bmi	17310 <__assert_fail@plt+0x5cd4>
   16b48:	mov	r1, #0
   16b4c:	bne	17314 <__assert_fail@plt+0x5cd8>
   16b50:	ldr	r0, [sp, #44]	; 0x2c
   16b54:	ldrb	r0, [r0]
   16b58:	sub	r0, r0, #45	; 0x2d
   16b5c:	clz	r0, r0
   16b60:	lsr	r1, r0, #5
   16b64:	cmp	r8, #3
   16b68:	bls	1731c <__assert_fail@plt+0x5ce0>
   16b6c:	ldr	r2, [sp, #84]	; 0x54
   16b70:	subs	r0, sl, #45	; 0x2d
   16b74:	bicne	r0, r6, r6, asr #31
   16b78:	sub	r1, r9, r2
   16b7c:	add	r4, r1, #1
   16b80:	cmp	r0, r4
   16b84:	mov	r5, r4
   16b88:	movhi	r5, r0
   16b8c:	ldr	r1, [sp, #88]	; 0x58
   16b90:	sub	r1, r1, ip
   16b94:	cmp	r5, r1
   16b98:	bcs	176b8 <__assert_fail@plt+0x607c>
   16b9c:	cmp	lr, #0
   16ba0:	beq	16bd0 <__assert_fail@plt+0x5594>
   16ba4:	cmp	r0, r4
   16ba8:	bls	16bfc <__assert_fail@plt+0x55c0>
   16bac:	str	ip, [sp, #80]	; 0x50
   16bb0:	sub	r8, r0, r4
   16bb4:	uxtb	r0, sl
   16bb8:	cmp	r0, #48	; 0x30
   16bbc:	cmpne	r0, #43	; 0x2b
   16bc0:	bne	16bd8 <__assert_fail@plt+0x559c>
   16bc4:	mov	r0, lr
   16bc8:	mov	r1, #48	; 0x30
   16bcc:	b	16be0 <__assert_fail@plt+0x55a4>
   16bd0:	mov	lr, #0
   16bd4:	b	16c48 <__assert_fail@plt+0x560c>
   16bd8:	mov	r0, lr
   16bdc:	mov	r1, #32
   16be0:	mov	r2, r8
   16be4:	mov	r6, lr
   16be8:	bl	11540 <memset@plt>
   16bec:	add	r6, r6, r8
   16bf0:	ldr	ip, [sp, #80]	; 0x50
   16bf4:	mov	lr, r6
   16bf8:	ldr	r2, [sp, #84]	; 0x54
   16bfc:	ldr	r0, [sp, #92]	; 0x5c
   16c00:	tst	r0, #1
   16c04:	beq	16c24 <__assert_fail@plt+0x55e8>
   16c08:	mov	r0, lr
   16c0c:	mov	r1, r2
   16c10:	mov	r2, r4
   16c14:	mov	r6, ip
   16c18:	mov	r7, lr
   16c1c:	bl	17718 <__assert_fail@plt+0x60dc>
   16c20:	b	16c3c <__assert_fail@plt+0x5600>
   16c24:	mov	r0, lr
   16c28:	mov	r1, r2
   16c2c:	mov	r2, r4
   16c30:	mov	r6, ip
   16c34:	mov	r7, lr
   16c38:	bl	11384 <memcpy@plt>
   16c3c:	mov	lr, r7
   16c40:	mov	ip, r6
   16c44:	add	lr, r7, r4
   16c48:	add	ip, r5, ip
   16c4c:	mov	r7, r9
   16c50:	b	1720c <__assert_fail@plt+0x5bd0>
   16c54:	mov	lr, #0
   16c58:	b	1740c <__assert_fail@plt+0x5dd0>
   16c5c:	ldr	r3, [sp, #76]	; 0x4c
   16c60:	ldr	r0, [sp, #92]	; 0x5c
   16c64:	b	173d4 <__assert_fail@plt+0x5d98>
   16c68:	sub	r0, r8, #1
   16c6c:	movw	r1, #365	; 0x16d
   16c70:	tst	r0, #3
   16c74:	bne	16cb8 <__assert_fail@plt+0x567c>
   16c78:	movw	r1, #34079	; 0x851f
   16c7c:	movt	r1, #20971	; 0x51eb
   16c80:	smmul	r1, r0, r1
   16c84:	asr	r2, r1, #5
   16c88:	add	r2, r2, r1, lsr #31
   16c8c:	mov	r3, #100	; 0x64
   16c90:	mls	r2, r2, r3, r0
   16c94:	asr	r3, r1, #7
   16c98:	add	r1, r3, r1, lsr #31
   16c9c:	mov	r3, #400	; 0x190
   16ca0:	mls	r0, r1, r3, r0
   16ca4:	movw	r1, #365	; 0x16d
   16ca8:	cmp	r0, #0
   16cac:	movweq	r1, #366	; 0x16e
   16cb0:	cmp	r2, #0
   16cb4:	movwne	r1, #366	; 0x16e
   16cb8:	add	r0, r1, r7
   16cbc:	ldr	r1, [sp, #84]	; 0x54
   16cc0:	bl	17754 <__assert_fail@plt+0x6118>
   16cc4:	mov	r4, r0
   16cc8:	mvn	r0, #0
   16ccc:	ldr	ip, [sp, #80]	; 0x50
   16cd0:	ldr	lr, [sp, #72]	; 0x48
   16cd4:	ldr	r3, [sp, #40]	; 0x28
   16cd8:	cmp	r3, #71	; 0x47
   16cdc:	beq	16e68 <__assert_fail@plt+0x582c>
   16ce0:	cmp	r3, #103	; 0x67
   16ce4:	bne	16ef8 <__assert_fail@plt+0x58bc>
   16ce8:	movw	r1, #34079	; 0x851f
   16cec:	movt	r1, #20971	; 0x51eb
   16cf0:	ldr	r4, [sp, #20]
   16cf4:	smmul	r2, r4, r1
   16cf8:	asr	r3, r2, #5
   16cfc:	add	r2, r3, r2, lsr #31
   16d00:	mov	r3, #100	; 0x64
   16d04:	mls	r2, r2, r3, r4
   16d08:	add	r2, r0, r2
   16d0c:	smmul	r1, r2, r1
   16d10:	asr	r7, r1, #5
   16d14:	add	r1, r7, r1, lsr #31
   16d18:	mls	r2, r1, r3, r2
   16d1c:	mov	r1, #2
   16d20:	str	r1, [sp, #72]	; 0x48
   16d24:	mov	r1, #0
   16d28:	cmn	r2, #1
   16d2c:	ble	17438 <__assert_fail@plt+0x5dfc>
   16d30:	mov	r0, r2
   16d34:	ldr	r3, [sp, #40]	; 0x28
   16d38:	b	16e98 <__assert_fail@plt+0x585c>
   16d3c:	ldr	r0, [sp, #76]	; 0x4c
   16d40:	ldr	r2, [r0, #20]
   16d44:	mov	r4, r3
   16d48:	movw	r3, #63636	; 0xf894
   16d4c:	movt	r3, #65535	; 0xffff
   16d50:	mov	r1, #0
   16d54:	cmp	r2, r3
   16d58:	mov	r0, #0
   16d5c:	movwge	r0, #1
   16d60:	and	r0, r0, r2, lsr #31
   16d64:	mvn	r7, #98	; 0x62
   16d68:	smlabb	r0, r0, r7, r2
   16d6c:	movw	r7, #34079	; 0x851f
   16d70:	movt	r7, #20971	; 0x51eb
   16d74:	smmul	r0, r0, r7
   16d78:	asr	r7, r0, #5
   16d7c:	add	r0, r7, r0, lsr #31
   16d80:	add	r0, r0, #19
   16d84:	cmp	r2, r3
   16d88:	mov	r3, r4
   16d8c:	movwlt	r1, #1
   16d90:	mov	r2, #2
   16d94:	b	16e94 <__assert_fail@plt+0x5858>
   16d98:	cmp	r4, #1
   16d9c:	blt	16dd0 <__assert_fail@plt+0x5794>
   16da0:	smmul	r2, r1, r5
   16da4:	asr	r3, r2, #2
   16da8:	add	r2, r3, r2, lsr #31
   16dac:	add	r3, r2, r2, lsl #2
   16db0:	sub	r1, r1, r3, lsl #1
   16db4:	add	r1, r1, #48	; 0x30
   16db8:	strb	r1, [r7, r0]
   16dbc:	sub	r1, r0, #1
   16dc0:	cmp	r0, #0
   16dc4:	mov	r0, r1
   16dc8:	mov	r1, r2
   16dcc:	bgt	16da0 <__assert_fail@plt+0x5764>
   16dd0:	ldr	r0, [sp, #88]	; 0x58
   16dd4:	sub	r5, r0, ip
   16dd8:	cmp	sl, #0
   16ddc:	movweq	sl, #48	; 0x30
   16de0:	cmp	r4, r5
   16de4:	bcs	176b8 <__assert_fail@plt+0x607c>
   16de8:	mov	r8, #0
   16dec:	cmp	lr, #0
   16df0:	mov	r7, #0
   16df4:	beq	174bc <__assert_fail@plt+0x5e80>
   16df8:	str	ip, [sp, #80]	; 0x50
   16dfc:	ldr	r0, [sp, #92]	; 0x5c
   16e00:	sub	r1, fp, #48	; 0x30
   16e04:	tst	r0, #1
   16e08:	beq	174a4 <__assert_fail@plt+0x5e68>
   16e0c:	mov	r0, lr
   16e10:	mov	r2, r4
   16e14:	mov	r7, lr
   16e18:	bl	17718 <__assert_fail@plt+0x60dc>
   16e1c:	b	174b4 <__assert_fail@plt+0x5e78>
   16e20:	mov	r4, r3
   16e24:	ldr	r0, [sp, #76]	; 0x4c
   16e28:	ldr	r2, [r0, #20]
   16e2c:	movw	r0, #34079	; 0x851f
   16e30:	movt	r0, #20971	; 0x51eb
   16e34:	smmul	r0, r2, r0
   16e38:	asr	r1, r0, #5
   16e3c:	add	r0, r1, r0, lsr #31
   16e40:	mov	r1, #100	; 0x64
   16e44:	mls	r3, r0, r1, r2
   16e48:	mov	r0, #2
   16e4c:	str	r0, [sp, #72]	; 0x48
   16e50:	mov	r1, #0
   16e54:	cmn	r3, #1
   16e58:	ble	17458 <__assert_fail@plt+0x5e1c>
   16e5c:	mov	r0, r3
   16e60:	mov	r3, r4
   16e64:	b	16e98 <__assert_fail@plt+0x585c>
   16e68:	movw	r1, #63636	; 0xf894
   16e6c:	movt	r1, #65535	; 0xffff
   16e70:	sub	r2, r1, r0
   16e74:	mov	r1, #0
   16e78:	ldr	r4, [sp, #20]
   16e7c:	cmp	r4, r2
   16e80:	movwlt	r1, #1
   16e84:	add	r0, r4, r0
   16e88:	movw	r2, #1900	; 0x76c
   16e8c:	add	r0, r0, r2
   16e90:	mov	r2, #4
   16e94:	str	r2, [sp, #72]	; 0x48
   16e98:	cmp	sl, #0
   16e9c:	ldr	r2, [fp, #12]
   16ea0:	moveq	sl, r2
   16ea4:	mov	r2, #0
   16ea8:	cmp	sl, #43	; 0x2b
   16eac:	mov	r4, #0
   16eb0:	str	r4, [sp, #84]	; 0x54
   16eb4:	bne	16ef0 <__assert_fail@plt+0x58b4>
   16eb8:	str	r3, [sp, #40]	; 0x28
   16ebc:	mov	r3, #0
   16ec0:	ldr	r8, [sp, #72]	; 0x48
   16ec4:	cmp	r8, r6
   16ec8:	mov	r7, #0
   16ecc:	movwlt	r7, #1
   16ed0:	movw	r4, #9999	; 0x270f
   16ed4:	cmp	r8, #2
   16ed8:	movweq	r4, #99	; 0x63
   16edc:	cmp	r4, r0
   16ee0:	movwcc	r3, #1
   16ee4:	orr	r3, r7, r3
   16ee8:	str	r3, [sp, #84]	; 0x54
   16eec:	ldr	r3, [sp, #40]	; 0x28
   16ef0:	ldr	r4, [sp, #92]	; 0x5c
   16ef4:	b	16f34 <__assert_fail@plt+0x58f8>
   16ef8:	movw	r0, #9363	; 0x2493
   16efc:	movt	r0, #37449	; 0x9249
   16f00:	smmla	r0, r4, r0, r4
   16f04:	asr	r1, r0, #2
   16f08:	add	r0, r1, r0, lsr #31
   16f0c:	add	r0, r0, #1
   16f10:	mov	r1, #2
   16f14:	str	r1, [sp, #72]	; 0x48
   16f18:	ldr	r4, [sp, #92]	; 0x5c
   16f1c:	lsr	r1, r0, #31
   16f20:	cmp	r1, #0
   16f24:	movwne	r1, #1
   16f28:	mov	r2, #0
   16f2c:	mov	r7, #0
   16f30:	str	r7, [sp, #84]	; 0x54
   16f34:	cmp	r5, #79	; 0x4f
   16f38:	moveq	r8, #0
   16f3c:	cmpeq	r1, #0
   16f40:	beq	17040 <__assert_fail@plt+0x5a04>
   16f44:	str	r4, [sp, #92]	; 0x5c
   16f48:	cmp	r1, #0
   16f4c:	rsbne	r0, r0, #0
   16f50:	ldr	r8, [sp, #64]	; 0x40
   16f54:	tst	r2, #1
   16f58:	movne	r3, #58	; 0x3a
   16f5c:	strbne	r3, [r8, #-1]!
   16f60:	movw	r3, #52429	; 0xcccd
   16f64:	movt	r3, #52428	; 0xcccc
   16f68:	umull	r3, r7, r0, r3
   16f6c:	lsr	r3, r7, #3
   16f70:	add	r7, r3, r3, lsl #2
   16f74:	sub	r7, r0, r7, lsl #1
   16f78:	orr	r7, r7, #48	; 0x30
   16f7c:	strb	r7, [r8, #-1]!
   16f80:	asr	r2, r2, #1
   16f84:	cmp	r0, #9
   16f88:	mov	r0, r3
   16f8c:	bhi	16f54 <__assert_fail@plt+0x5918>
   16f90:	cmp	r2, #0
   16f94:	mov	r0, r3
   16f98:	bne	16f54 <__assert_fail@plt+0x5918>
   16f9c:	cmp	r6, #0
   16fa0:	ldr	r2, [sp, #72]	; 0x48
   16fa4:	movpl	r2, r6
   16fa8:	ldr	r3, [sp, #84]	; 0x54
   16fac:	cmp	r3, #0
   16fb0:	movwne	r3, #43	; 0x2b
   16fb4:	cmp	sl, #0
   16fb8:	movweq	sl, #48	; 0x30
   16fbc:	str	r9, [sp, #84]	; 0x54
   16fc0:	cmp	r1, #0
   16fc4:	movwne	r3, #45	; 0x2d
   16fc8:	cmp	r3, #0
   16fcc:	mov	r0, r2
   16fd0:	subne	r0, r0, #1
   16fd4:	ldr	r1, [sp, #64]	; 0x40
   16fd8:	sub	r4, r1, r8
   16fdc:	sub	r0, r0, r4
   16fe0:	cmp	r0, #1
   16fe4:	movwlt	r0, #0
   16fe8:	subs	r6, sl, #45	; 0x2d
   16fec:	movne	r6, r0
   16ff0:	cmp	r3, #0
   16ff4:	beq	17108 <__assert_fail@plt+0x5acc>
   16ff8:	cmp	sl, #95	; 0x5f
   16ffc:	bne	17110 <__assert_fail@plt+0x5ad4>
   17000:	cmp	lr, #0
   17004:	beq	17118 <__assert_fail@plt+0x5adc>
   17008:	mov	r0, lr
   1700c:	mov	r1, #32
   17010:	str	r2, [sp, #72]	; 0x48
   17014:	mov	r2, r6
   17018:	mov	r5, ip
   1701c:	mov	r7, lr
   17020:	mov	r9, r3
   17024:	bl	11540 <memset@plt>
   17028:	mov	r3, r9
   1702c:	ldr	r2, [sp, #72]	; 0x48
   17030:	mov	lr, r7
   17034:	mov	ip, r5
   17038:	add	lr, r7, r6
   1703c:	b	1711c <__assert_fail@plt+0x5ae0>
   17040:	str	r4, [sp, #92]	; 0x5c
   17044:	str	ip, [sp, #80]	; 0x50
   17048:	mov	r7, lr
   1704c:	movw	r0, #9504	; 0x2520
   17050:	strh	r0, [fp, #-53]	; 0xffffffcb
   17054:	cmp	r5, #0
   17058:	ldr	r0, [sp, #68]	; 0x44
   1705c:	strbne	r5, [fp, #-51]	; 0xffffffcd
   17060:	ldrne	r0, [sp, #52]	; 0x34
   17064:	mov	r1, #0
   17068:	strb	r1, [r0, #1]
   1706c:	strb	r3, [r0]
   17070:	add	r0, sp, #96	; 0x60
   17074:	sub	r2, fp, #53	; 0x35
   17078:	mov	r1, #1024	; 0x400
   1707c:	ldr	r3, [sp, #76]	; 0x4c
   17080:	bl	11480 <strftime@plt>
   17084:	cmp	r0, #0
   17088:	beq	170ec <__assert_fail@plt+0x5ab0>
   1708c:	subs	r1, sl, #45	; 0x2d
   17090:	movne	r1, r6
   17094:	cmp	r6, #0
   17098:	movwmi	r1, #0
   1709c:	sub	r4, r0, #1
   170a0:	cmp	r1, r4
   170a4:	mov	r5, r4
   170a8:	movhi	r5, r1
   170ac:	ldr	ip, [sp, #80]	; 0x50
   170b0:	ldr	r0, [sp, #88]	; 0x58
   170b4:	sub	r0, r0, ip
   170b8:	cmp	r5, r0
   170bc:	bcs	176b8 <__assert_fail@plt+0x607c>
   170c0:	cmp	r7, #0
   170c4:	beq	172fc <__assert_fail@plt+0x5cc0>
   170c8:	cmp	r1, r4
   170cc:	bls	17230 <__assert_fail@plt+0x5bf4>
   170d0:	sub	r6, r1, r4
   170d4:	cmp	sl, #48	; 0x30
   170d8:	cmpne	sl, #43	; 0x2b
   170dc:	bne	1721c <__assert_fail@plt+0x5be0>
   170e0:	mov	r0, r7
   170e4:	mov	r1, #48	; 0x30
   170e8:	b	17224 <__assert_fail@plt+0x5be8>
   170ec:	ldr	ip, [sp, #80]	; 0x50
   170f0:	mov	r8, #-2147483648	; 0x80000000
   170f4:	movw	r3, #52428	; 0xcccc
   170f8:	movt	r3, #3276	; 0xccc
   170fc:	mov	lr, r7
   17100:	mov	r7, r9
   17104:	b	15fd0 <__assert_fail@plt+0x4994>
   17108:	ldr	r7, [sp, #92]	; 0x5c
   1710c:	b	1714c <__assert_fail@plt+0x5b10>
   17110:	ldr	r7, [sp, #92]	; 0x5c
   17114:	b	17128 <__assert_fail@plt+0x5aec>
   17118:	mov	lr, #0
   1711c:	ldr	r7, [sp, #92]	; 0x5c
   17120:	sub	r2, r2, r6
   17124:	add	ip, r6, ip
   17128:	ldr	r0, [sp, #88]	; 0x58
   1712c:	sub	r0, r0, ip
   17130:	cmp	r0, #2
   17134:	bcc	176b8 <__assert_fail@plt+0x607c>
   17138:	cmp	lr, #0
   1713c:	strbne	r3, [lr], #1
   17140:	moveq	lr, #0
   17144:	sub	r2, r2, #1
   17148:	add	ip, ip, #1
   1714c:	subs	r0, sl, #45	; 0x2d
   17150:	bicne	r0, r2, r2, asr #31
   17154:	cmp	r0, r4
   17158:	mov	r5, r4
   1715c:	movhi	r5, r0
   17160:	ldr	r1, [sp, #88]	; 0x58
   17164:	sub	r1, r1, ip
   17168:	cmp	r5, r1
   1716c:	bcs	176b8 <__assert_fail@plt+0x607c>
   17170:	cmp	lr, #0
   17174:	beq	171a0 <__assert_fail@plt+0x5b64>
   17178:	cmp	r0, r4
   1717c:	bls	171cc <__assert_fail@plt+0x5b90>
   17180:	str	ip, [sp, #80]	; 0x50
   17184:	sub	r9, r0, r4
   17188:	cmp	sl, #48	; 0x30
   1718c:	cmpne	sl, #43	; 0x2b
   17190:	bne	171ac <__assert_fail@plt+0x5b70>
   17194:	mov	r0, lr
   17198:	mov	r1, #48	; 0x30
   1719c:	b	171b4 <__assert_fail@plt+0x5b78>
   171a0:	mov	lr, #0
   171a4:	ldr	r7, [sp, #84]	; 0x54
   171a8:	b	17208 <__assert_fail@plt+0x5bcc>
   171ac:	mov	r0, lr
   171b0:	mov	r1, #32
   171b4:	mov	r2, r9
   171b8:	mov	r6, lr
   171bc:	bl	11540 <memset@plt>
   171c0:	add	r6, r6, r9
   171c4:	ldr	ip, [sp, #80]	; 0x50
   171c8:	mov	lr, r6
   171cc:	mov	r0, lr
   171d0:	mov	r1, r8
   171d4:	mov	r2, r4
   171d8:	mov	r6, ip
   171dc:	tst	r7, #1
   171e0:	beq	171f0 <__assert_fail@plt+0x5bb4>
   171e4:	mov	r7, lr
   171e8:	bl	17718 <__assert_fail@plt+0x60dc>
   171ec:	b	171f8 <__assert_fail@plt+0x5bbc>
   171f0:	mov	r7, lr
   171f4:	bl	11384 <memcpy@plt>
   171f8:	mov	lr, r7
   171fc:	mov	ip, r6
   17200:	ldr	r7, [sp, #84]	; 0x54
   17204:	add	lr, lr, r4
   17208:	add	ip, r5, ip
   1720c:	mov	r8, #-2147483648	; 0x80000000
   17210:	movw	r3, #52428	; 0xcccc
   17214:	movt	r3, #3276	; 0xccc
   17218:	b	15fd0 <__assert_fail@plt+0x4994>
   1721c:	mov	r0, r7
   17220:	mov	r1, #32
   17224:	mov	r2, r6
   17228:	bl	11540 <memset@plt>
   1722c:	add	r7, r7, r6
   17230:	ldr	r1, [sp, #92]	; 0x5c
   17234:	mov	r0, r7
   17238:	tst	r8, #1
   1723c:	beq	17250 <__assert_fail@plt+0x5c14>
   17240:	ldr	r1, [sp, #48]	; 0x30
   17244:	mov	r2, r4
   17248:	bl	176dc <__assert_fail@plt+0x60a0>
   1724c:	b	17274 <__assert_fail@plt+0x5c38>
   17250:	tst	r1, #1
   17254:	beq	17268 <__assert_fail@plt+0x5c2c>
   17258:	ldr	r1, [sp, #48]	; 0x30
   1725c:	mov	r2, r4
   17260:	bl	17718 <__assert_fail@plt+0x60dc>
   17264:	b	17274 <__assert_fail@plt+0x5c38>
   17268:	ldr	r1, [sp, #48]	; 0x30
   1726c:	mov	r2, r4
   17270:	bl	11384 <memcpy@plt>
   17274:	add	r7, r7, r4
   17278:	ldr	ip, [sp, #80]	; 0x50
   1727c:	mov	r8, #-2147483648	; 0x80000000
   17280:	movw	r3, #52428	; 0xcccc
   17284:	movt	r3, #3276	; 0xccc
   17288:	mov	lr, r7
   1728c:	b	17678 <__assert_fail@plt+0x603c>
   17290:	subs	r0, sl, #45	; 0x2d
   17294:	bicne	r0, r6, r6, asr #31
   17298:	cmp	r0, #1
   1729c:	mov	r5, r0
   172a0:	movls	r5, #1
   172a4:	ldr	r1, [sp, #88]	; 0x58
   172a8:	sub	r1, r1, ip
   172ac:	cmp	r5, r1
   172b0:	bcs	176b8 <__assert_fail@plt+0x607c>
   172b4:	cmp	lr, #0
   172b8:	mov	r8, #-2147483648	; 0x80000000
   172bc:	movw	r3, #52428	; 0xcccc
   172c0:	movt	r3, #3276	; 0xccc
   172c4:	beq	172f0 <__assert_fail@plt+0x5cb4>
   172c8:	cmp	r0, #2
   172cc:	bcc	17670 <__assert_fail@plt+0x6034>
   172d0:	uxtb	r1, sl
   172d4:	sub	r4, r0, #1
   172d8:	cmp	r1, #48	; 0x30
   172dc:	cmpne	r1, #43	; 0x2b
   172e0:	bne	17640 <__assert_fail@plt+0x6004>
   172e4:	mov	r0, lr
   172e8:	mov	r1, #48	; 0x30
   172ec:	b	17648 <__assert_fail@plt+0x600c>
   172f0:	mov	lr, #0
   172f4:	b	17678 <__assert_fail@plt+0x603c>
   172f8:	mov	ip, r6
   172fc:	mov	lr, #0
   17300:	mov	r8, #-2147483648	; 0x80000000
   17304:	movw	r3, #52428	; 0xcccc
   17308:	movt	r3, #3276	; 0xccc
   1730c:	b	17678 <__assert_fail@plt+0x603c>
   17310:	mov	r1, #1
   17314:	cmp	r8, #3
   17318:	bhi	16b6c <__assert_fail@plt+0x5530>
   1731c:	str	r3, [sp, #40]	; 0x28
   17320:	movw	r0, #34953	; 0x8889
   17324:	movt	r0, #34952	; 0x8888
   17328:	smmla	r3, r2, r0, r2
   1732c:	asr	r7, r3, #5
   17330:	add	r7, r7, r3, lsr #31
   17334:	smmla	r0, r7, r0, r7
   17338:	asr	r3, r0, #5
   1733c:	add	r0, r3, r0, lsr #31
   17340:	rsb	r0, r0, r0, lsl #4
   17344:	sub	r3, r7, r0, lsl #2
   17348:	movw	r0, #46021	; 0xb3c5
   1734c:	movt	r0, #37282	; 0x91a2
   17350:	smmla	r0, r2, r0, r2
   17354:	asr	r4, r0, #11
   17358:	add	r0, r4, r0, lsr #31
   1735c:	rsb	r7, r7, r7, lsl #4
   17360:	sub	r2, r2, r7, lsl #2
   17364:	add	r7, pc, #0
   17368:	ldr	pc, [r7, r8, lsl #2]
   1736c:	andeq	r7, r1, ip, ror r3
   17370:	andeq	r7, r1, r8, lsl r6
   17374:	andeq	r7, r1, ip, ror r4
   17378:	andeq	r7, r1, r4, ror r4
   1737c:	mov	r2, #100	; 0x64
   17380:	mla	r0, r0, r2, r3
   17384:	mov	r2, #5
   17388:	str	r2, [sp, #72]	; 0x48
   1738c:	mov	r2, #1
   17390:	str	r2, [sp, #84]	; 0x54
   17394:	mov	r2, #0
   17398:	b	17634 <__assert_fail@plt+0x5ff8>
   1739c:	mov	r8, #0
   173a0:	mov	r3, #89	; 0x59
   173a4:	b	17044 <__assert_fail@plt+0x5a08>
   173a8:	ldr	r1, [sp, #44]	; 0x2c
   173ac:	b	17520 <__assert_fail@plt+0x5ee4>
   173b0:	mov	r0, r5
   173b4:	mov	r1, #32
   173b8:	mov	r5, r2
   173bc:	bl	11540 <memset@plt>
   173c0:	mov	r1, r5
   173c4:	ldr	r5, [sp, #72]	; 0x48
   173c8:	ldr	r3, [sp, #76]	; 0x4c
   173cc:	ldr	r0, [sp, #92]	; 0x5c
   173d0:	add	r5, r5, r1
   173d4:	ldr	r1, [sp, #84]	; 0x54
   173d8:	stm	sp, {r1, sl}
   173dc:	str	r0, [sp, #8]
   173e0:	ldr	r0, [fp, #20]
   173e4:	str	r0, [sp, #12]
   173e8:	ldr	r0, [fp, #24]
   173ec:	str	r0, [sp, #16]
   173f0:	mov	r0, r5
   173f4:	mov	r1, r6
   173f8:	mov	r2, r4
   173fc:	bl	15ef4 <__assert_fail@plt+0x48b8>
   17400:	mov	lr, r5
   17404:	add	lr, r5, r8
   17408:	ldr	ip, [sp, #80]	; 0x50
   1740c:	mov	r8, #-2147483648	; 0x80000000
   17410:	movw	r3, #52428	; 0xcccc
   17414:	movt	r3, #3276	; 0xccc
   17418:	add	ip, r7, ip
   1741c:	mov	r7, r9
   17420:	b	15fd0 <__assert_fail@plt+0x4994>
   17424:	cmp	r6, #6
   17428:	mov	r0, r6
   1742c:	movle	r0, #6
   17430:	sub	r2, r0, #6
   17434:	b	16630 <__assert_fail@plt+0x4ff4>
   17438:	movw	r3, #63636	; 0xf894
   1743c:	movt	r3, #65535	; 0xffff
   17440:	sub	r3, r3, r0
   17444:	add	r0, r2, #100	; 0x64
   17448:	cmp	r4, r3
   1744c:	rsblt	r0, r2, #0
   17450:	ldr	r3, [sp, #40]	; 0x28
   17454:	b	16e98 <__assert_fail@plt+0x585c>
   17458:	add	r0, r3, #100	; 0x64
   1745c:	movw	r7, #63636	; 0xf894
   17460:	movt	r7, #65535	; 0xffff
   17464:	cmp	r2, r7
   17468:	rsblt	r0, r3, #0
   1746c:	mov	r3, r4
   17470:	b	16e98 <__assert_fail@plt+0x585c>
   17474:	cmp	r2, #0
   17478:	beq	17610 <__assert_fail@plt+0x5fd4>
   1747c:	movw	r7, #10000	; 0x2710
   17480:	mla	r0, r0, r7, r2
   17484:	mov	r2, #100	; 0x64
   17488:	mla	r0, r3, r2, r0
   1748c:	mov	r2, #9
   17490:	str	r2, [sp, #72]	; 0x48
   17494:	mov	r2, #1
   17498:	str	r2, [sp, #84]	; 0x54
   1749c:	mov	r2, #20
   174a0:	b	17634 <__assert_fail@plt+0x5ff8>
   174a4:	mov	r0, lr
   174a8:	mov	r2, r4
   174ac:	mov	r7, lr
   174b0:	bl	11384 <memcpy@plt>
   174b4:	add	r7, r7, r4
   174b8:	ldr	ip, [sp, #80]	; 0x50
   174bc:	cmp	sl, #45	; 0x2d
   174c0:	subne	r0, r6, r4
   174c4:	bicne	r8, r0, r0, asr #31
   174c8:	sub	r0, r5, r4
   174cc:	cmp	r8, r0
   174d0:	bcs	176b8 <__assert_fail@plt+0x607c>
   174d4:	cmp	r7, #0
   174d8:	beq	17500 <__assert_fail@plt+0x5ec4>
   174dc:	cmp	r8, #0
   174e0:	beq	17500 <__assert_fail@plt+0x5ec4>
   174e4:	uxtb	r0, sl
   174e8:	cmp	r0, #48	; 0x30
   174ec:	cmpne	r0, #43	; 0x2b
   174f0:	bne	175e8 <__assert_fail@plt+0x5fac>
   174f4:	mov	r0, r7
   174f8:	mov	r1, #48	; 0x30
   174fc:	b	175f0 <__assert_fail@plt+0x5fb4>
   17500:	mov	lr, r7
   17504:	b	17604 <__assert_fail@plt+0x5fc8>
   17508:	mov	r1, #32
   1750c:	mov	r2, r8
   17510:	bl	11540 <memset@plt>
   17514:	ldr	r0, [sp, #72]	; 0x48
   17518:	ldr	r1, [sp, #44]	; 0x2c
   1751c:	add	r0, r0, r8
   17520:	ldr	r3, [sp, #92]	; 0x5c
   17524:	tst	r7, #1
   17528:	beq	1753c <__assert_fail@plt+0x5f00>
   1752c:	mov	r2, r4
   17530:	mov	r7, r0
   17534:	bl	176dc <__assert_fail@plt+0x60a0>
   17538:	b	17568 <__assert_fail@plt+0x5f2c>
   1753c:	eor	r2, r7, #1
   17540:	and	r2, r3, r2
   17544:	tst	r2, #1
   17548:	beq	1755c <__assert_fail@plt+0x5f20>
   1754c:	mov	r2, r4
   17550:	mov	r7, r0
   17554:	bl	17718 <__assert_fail@plt+0x60dc>
   17558:	b	17568 <__assert_fail@plt+0x5f2c>
   1755c:	mov	r2, r4
   17560:	mov	r7, r0
   17564:	bl	11384 <memcpy@plt>
   17568:	mov	lr, r7
   1756c:	mov	ip, r6
   17570:	add	lr, r7, r4
   17574:	b	17300 <__assert_fail@plt+0x5cc4>
   17578:	mov	r0, lr
   1757c:	mov	r1, #32
   17580:	mov	r2, r4
   17584:	mov	r6, ip
   17588:	mov	r7, lr
   1758c:	bl	11540 <memset@plt>
   17590:	mov	lr, r7
   17594:	mov	ip, r6
   17598:	add	lr, r7, r4
   1759c:	mov	r8, #-2147483648	; 0x80000000
   175a0:	movw	r3, #52428	; 0xcccc
   175a4:	movt	r3, #3276	; 0xccc
   175a8:	mov	r0, #10
   175ac:	b	17674 <__assert_fail@plt+0x6038>
   175b0:	mov	r0, lr
   175b4:	mov	r1, #32
   175b8:	mov	r2, r4
   175bc:	mov	r6, ip
   175c0:	mov	r7, lr
   175c4:	bl	11540 <memset@plt>
   175c8:	mov	lr, r7
   175cc:	mov	ip, r6
   175d0:	add	lr, r7, r4
   175d4:	mov	r8, #-2147483648	; 0x80000000
   175d8:	movw	r3, #52428	; 0xcccc
   175dc:	movt	r3, #3276	; 0xccc
   175e0:	mov	r0, #9
   175e4:	b	17674 <__assert_fail@plt+0x6038>
   175e8:	mov	r0, r7
   175ec:	mov	r1, #32
   175f0:	mov	r2, r8
   175f4:	mov	r5, ip
   175f8:	bl	11540 <memset@plt>
   175fc:	mov	ip, r5
   17600:	add	lr, r7, r8
   17604:	add	r0, r8, ip
   17608:	add	ip, r0, r4
   1760c:	b	16c4c <__assert_fail@plt+0x5610>
   17610:	cmp	r3, #0
   17614:	beq	17684 <__assert_fail@plt+0x6048>
   17618:	mov	r2, #100	; 0x64
   1761c:	mla	r0, r0, r2, r3
   17620:	mov	r2, #6
   17624:	str	r2, [sp, #72]	; 0x48
   17628:	mov	r2, #1
   1762c:	str	r2, [sp, #84]	; 0x54
   17630:	mov	r2, #4
   17634:	ldr	r4, [sp, #92]	; 0x5c
   17638:	ldr	r3, [sp, #40]	; 0x28
   1763c:	b	16f34 <__assert_fail@plt+0x58f8>
   17640:	mov	r0, lr
   17644:	mov	r1, #32
   17648:	mov	r2, r4
   1764c:	mov	r6, ip
   17650:	mov	r7, lr
   17654:	bl	11540 <memset@plt>
   17658:	mov	lr, r7
   1765c:	mov	ip, r6
   17660:	add	lr, r7, r4
   17664:	mov	r8, #-2147483648	; 0x80000000
   17668:	movw	r3, #52428	; 0xcccc
   1766c:	movt	r3, #3276	; 0xccc
   17670:	ldrb	r0, [r9]
   17674:	strb	r0, [lr], #1
   17678:	add	ip, r5, ip
   1767c:	mov	r7, r9
   17680:	b	15fd0 <__assert_fail@plt+0x4994>
   17684:	mov	r2, #3
   17688:	b	17388 <__assert_fail@plt+0x5d4c>
   1768c:	mov	ip, #0
   17690:	mov	lr, r5
   17694:	ldr	r0, [sp, #88]	; 0x58
   17698:	cmp	r0, #0
   1769c:	cmpne	lr, #0
   176a0:	movne	r0, #0
   176a4:	strbne	r0, [lr]
   176a8:	ldr	r0, [sp, #60]	; 0x3c
   176ac:	ldr	r1, [sp, #56]	; 0x38
   176b0:	str	r1, [r0]
   176b4:	b	176c8 <__assert_fail@plt+0x608c>
   176b8:	mov	r0, #34	; 0x22
   176bc:	ldr	r1, [sp, #60]	; 0x3c
   176c0:	str	r0, [r1]
   176c4:	mov	ip, #0
   176c8:	mov	r0, ip
   176cc:	sub	sp, fp, #28
   176d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d4:	mov	r0, #75	; 0x4b
   176d8:	b	176bc <__assert_fail@plt+0x6080>
   176dc:	push	{r4, r5, r6, sl, fp, lr}
   176e0:	add	fp, sp, #16
   176e4:	cmp	r2, #0
   176e8:	beq	17714 <__assert_fail@plt+0x60d8>
   176ec:	mov	r4, r2
   176f0:	sub	r5, r1, #1
   176f4:	sub	r6, r0, #1
   176f8:	bl	11498 <__ctype_tolower_loc@plt>
   176fc:	ldrb	r1, [r5, r4]
   17700:	ldr	r2, [r0]
   17704:	ldr	r1, [r2, r1, lsl #2]
   17708:	strb	r1, [r6, r4]
   1770c:	subs	r4, r4, #1
   17710:	bne	176fc <__assert_fail@plt+0x60c0>
   17714:	pop	{r4, r5, r6, sl, fp, pc}
   17718:	push	{r4, r5, r6, sl, fp, lr}
   1771c:	add	fp, sp, #16
   17720:	cmp	r2, #0
   17724:	beq	17750 <__assert_fail@plt+0x6114>
   17728:	mov	r4, r2
   1772c:	sub	r5, r1, #1
   17730:	sub	r6, r0, #1
   17734:	bl	114a4 <__ctype_toupper_loc@plt>
   17738:	ldrb	r1, [r5, r4]
   1773c:	ldr	r2, [r0]
   17740:	ldr	r1, [r2, r1, lsl #2]
   17744:	strb	r1, [r6, r4]
   17748:	subs	r4, r4, #1
   1774c:	bne	17738 <__assert_fail@plt+0x60fc>
   17750:	pop	{r4, r5, r6, sl, fp, pc}
   17754:	sub	r1, r0, r1
   17758:	movw	r2, #382	; 0x17e
   1775c:	add	r1, r1, r2
   17760:	movw	r2, #9363	; 0x2493
   17764:	movt	r2, #37449	; 0x9249
   17768:	smmla	r2, r1, r2, r1
   1776c:	asr	r3, r2, #2
   17770:	add	r2, r3, r2, lsr #31
   17774:	rsb	r2, r2, r2, lsl #3
   17778:	sub	r1, r2, r1
   1777c:	add	r0, r0, r1
   17780:	add	r0, r0, #3
   17784:	bx	lr
   17788:	push	{r4, r5, fp, lr}
   1778c:	add	fp, sp, #8
   17790:	cmp	r0, #0
   17794:	beq	17828 <__assert_fail@plt+0x61ec>
   17798:	mov	r4, r0
   1779c:	mov	r1, #47	; 0x2f
   177a0:	bl	115b8 <strrchr@plt>
   177a4:	cmp	r0, #0
   177a8:	mov	r5, r4
   177ac:	addne	r5, r0, #1
   177b0:	sub	r0, r5, r4
   177b4:	cmp	r0, #7
   177b8:	blt	1780c <__assert_fail@plt+0x61d0>
   177bc:	sub	r0, r5, #7
   177c0:	movw	r1, #54693	; 0xd5a5
   177c4:	movt	r1, #1
   177c8:	mov	r2, #7
   177cc:	bl	1160c <strncmp@plt>
   177d0:	cmp	r0, #0
   177d4:	bne	1780c <__assert_fail@plt+0x61d0>
   177d8:	movw	r1, #54701	; 0xd5ad
   177dc:	movt	r1, #1
   177e0:	mov	r0, r5
   177e4:	mov	r2, #3
   177e8:	bl	1160c <strncmp@plt>
   177ec:	cmp	r0, #0
   177f0:	beq	177fc <__assert_fail@plt+0x61c0>
   177f4:	mov	r4, r5
   177f8:	b	1780c <__assert_fail@plt+0x61d0>
   177fc:	add	r4, r5, #3
   17800:	movw	r0, #57792	; 0xe1c0
   17804:	movt	r0, #2
   17808:	str	r4, [r0]
   1780c:	movw	r0, #57796	; 0xe1c4
   17810:	movt	r0, #2
   17814:	str	r4, [r0]
   17818:	movw	r0, #58024	; 0xe2a8
   1781c:	movt	r0, #2
   17820:	str	r4, [r0]
   17824:	pop	{r4, r5, fp, pc}
   17828:	movw	r0, #57808	; 0xe1d0
   1782c:	movt	r0, #2
   17830:	ldr	r3, [r0]
   17834:	movw	r0, #54637	; 0xd56d
   17838:	movt	r0, #1
   1783c:	mov	r1, #55	; 0x37
   17840:	mov	r2, #1
   17844:	bl	11408 <fwrite@plt>
   17848:	bl	11618 <abort@plt>
   1784c:	push	{r4, r5, r6, sl, fp, lr}
   17850:	add	fp, sp, #16
   17854:	mov	r4, r0
   17858:	movw	r0, #58032	; 0xe2b0
   1785c:	movt	r0, #2
   17860:	cmp	r4, #0
   17864:	moveq	r4, r0
   17868:	bl	1151c <__errno_location@plt>
   1786c:	mov	r5, r0
   17870:	ldr	r6, [r0]
   17874:	mov	r0, r4
   17878:	mov	r1, #48	; 0x30
   1787c:	bl	1a0e8 <__assert_fail@plt+0x8aac>
   17880:	str	r6, [r5]
   17884:	pop	{r4, r5, r6, sl, fp, pc}
   17888:	movw	r1, #58032	; 0xe2b0
   1788c:	movt	r1, #2
   17890:	cmp	r0, #0
   17894:	movne	r1, r0
   17898:	ldr	r0, [r1]
   1789c:	bx	lr
   178a0:	movw	r2, #58032	; 0xe2b0
   178a4:	movt	r2, #2
   178a8:	cmp	r0, #0
   178ac:	movne	r2, r0
   178b0:	str	r1, [r2]
   178b4:	bx	lr
   178b8:	movw	r3, #58032	; 0xe2b0
   178bc:	movt	r3, #2
   178c0:	cmp	r0, #0
   178c4:	movne	r3, r0
   178c8:	ubfx	r0, r1, #5, #3
   178cc:	add	ip, r3, r0, lsl #2
   178d0:	ldr	r3, [ip, #8]
   178d4:	and	r1, r1, #31
   178d8:	mov	r0, #1
   178dc:	and	r0, r0, r3, lsr r1
   178e0:	and	r2, r2, #1
   178e4:	eor	r2, r0, r2
   178e8:	eor	r1, r3, r2, lsl r1
   178ec:	str	r1, [ip, #8]
   178f0:	bx	lr
   178f4:	movw	r2, #58032	; 0xe2b0
   178f8:	movt	r2, #2
   178fc:	cmp	r0, #0
   17900:	movne	r2, r0
   17904:	ldr	r0, [r2, #4]
   17908:	str	r1, [r2, #4]
   1790c:	bx	lr
   17910:	push	{fp, lr}
   17914:	mov	fp, sp
   17918:	movw	r3, #58032	; 0xe2b0
   1791c:	movt	r3, #2
   17920:	cmp	r0, #0
   17924:	movne	r3, r0
   17928:	mov	r0, #10
   1792c:	str	r0, [r3]
   17930:	cmp	r1, #0
   17934:	cmpne	r2, #0
   17938:	bne	17940 <__assert_fail@plt+0x6304>
   1793c:	bl	11618 <abort@plt>
   17940:	str	r1, [r3, #40]	; 0x28
   17944:	str	r2, [r3, #44]	; 0x2c
   17948:	pop	{fp, pc}
   1794c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17950:	add	fp, sp, #28
   17954:	sub	sp, sp, #20
   17958:	mov	r8, r3
   1795c:	mov	r9, r2
   17960:	mov	sl, r1
   17964:	mov	r7, r0
   17968:	ldr	r0, [fp, #8]
   1796c:	movw	r5, #58032	; 0xe2b0
   17970:	movt	r5, #2
   17974:	cmp	r0, #0
   17978:	movne	r5, r0
   1797c:	bl	1151c <__errno_location@plt>
   17980:	mov	r4, r0
   17984:	ldm	r5, {r0, r1}
   17988:	ldr	r2, [r5, #40]	; 0x28
   1798c:	ldr	r3, [r5, #44]	; 0x2c
   17990:	ldr	r6, [r4]
   17994:	add	r5, r5, #8
   17998:	stm	sp, {r0, r1, r5}
   1799c:	str	r2, [sp, #12]
   179a0:	str	r3, [sp, #16]
   179a4:	mov	r0, r7
   179a8:	mov	r1, sl
   179ac:	mov	r2, r9
   179b0:	mov	r3, r8
   179b4:	bl	179c4 <__assert_fail@plt+0x6388>
   179b8:	str	r6, [r4]
   179bc:	sub	sp, fp, #28
   179c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c8:	add	fp, sp, #28
   179cc:	sub	sp, sp, #156	; 0x9c
   179d0:	mov	r9, r3
   179d4:	mov	r7, r1
   179d8:	mov	r6, r0
   179dc:	str	r2, [fp, #-80]	; 0xffffffb0
   179e0:	add	r0, r2, #1
   179e4:	str	r0, [sp, #76]	; 0x4c
   179e8:	ldr	r0, [fp, #12]
   179ec:	and	r1, r0, #1
   179f0:	str	r1, [sp, #40]	; 0x28
   179f4:	and	r1, r0, #4
   179f8:	str	r1, [sp, #36]	; 0x24
   179fc:	ubfx	r4, r0, #1, #1
   17a00:	bl	11420 <__ctype_get_mb_cur_max@plt>
   17a04:	str	r0, [sp, #44]	; 0x2c
   17a08:	ldr	r0, [fp, #24]
   17a0c:	str	r0, [sp, #88]	; 0x58
   17a10:	ldr	r0, [fp, #20]
   17a14:	str	r0, [sp, #80]	; 0x50
   17a18:	ldr	r1, [fp, #8]
   17a1c:	mov	r0, #0
   17a20:	str	r0, [sp, #84]	; 0x54
   17a24:	mov	r0, #0
   17a28:	str	r0, [fp, #-84]	; 0xffffffac
   17a2c:	mov	r0, #0
   17a30:	str	r0, [fp, #-72]	; 0xffffffb8
   17a34:	mov	r0, #0
   17a38:	mov	r2, #0
   17a3c:	str	r2, [fp, #-56]	; 0xffffffc8
   17a40:	mov	r2, #0
   17a44:	str	r2, [sp, #64]	; 0x40
   17a48:	mov	r2, #1
   17a4c:	str	r2, [fp, #-48]	; 0xffffffd0
   17a50:	cmp	r1, #10
   17a54:	bhi	18980 <__assert_fail@plt+0x7344>
   17a58:	mov	sl, r7
   17a5c:	mov	r7, r1
   17a60:	add	r1, pc, #24
   17a64:	mov	r8, #0
   17a68:	mov	r2, #1
   17a6c:	mov	r3, #0
   17a70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17a74:	mov	lr, r9
   17a78:	mov	r5, r6
   17a7c:	ldr	pc, [r1, r7, lsl #2]
   17a80:	andeq	r7, r1, r4, asr fp
   17a84:	muleq	r1, r4, fp
   17a88:	andeq	r7, r1, r4, ror #22
   17a8c:	andeq	r7, r1, ip, asr #22
   17a90:	andeq	r7, r1, r8, lsl #23
   17a94:	andeq	r7, r1, r8, ror #23
   17a98:	andeq	r7, r1, r4, ror fp
   17a9c:	andeq	r7, r1, r4, asr #24
   17aa0:	andeq	r7, r1, ip, lsr #21
   17aa4:	andeq	r7, r1, ip, lsr #21
   17aa8:	ldrdeq	r7, [r1], -r8
   17aac:	movw	r0, #54783	; 0xd5ff
   17ab0:	movt	r0, #1
   17ab4:	mov	r1, r7
   17ab8:	bl	18f88 <__assert_fail@plt+0x794c>
   17abc:	str	r0, [sp, #80]	; 0x50
   17ac0:	movw	r0, #55916	; 0xda6c
   17ac4:	movt	r0, #1
   17ac8:	mov	r1, r7
   17acc:	bl	18f88 <__assert_fail@plt+0x794c>
   17ad0:	mov	r5, r6
   17ad4:	str	r0, [sp, #88]	; 0x58
   17ad8:	mov	r8, #0
   17adc:	tst	r4, #1
   17ae0:	str	r7, [fp, #-64]	; 0xffffffc0
   17ae4:	bne	17b1c <__assert_fail@plt+0x64e0>
   17ae8:	ldr	r0, [sp, #80]	; 0x50
   17aec:	ldrb	r0, [r0]
   17af0:	cmp	r0, #0
   17af4:	beq	17b1c <__assert_fail@plt+0x64e0>
   17af8:	ldr	r1, [sp, #80]	; 0x50
   17afc:	add	r1, r1, #1
   17b00:	mov	r8, #0
   17b04:	cmp	r8, sl
   17b08:	strbcc	r0, [r5, r8]
   17b0c:	ldrb	r0, [r1, r8]
   17b10:	add	r8, r8, #1
   17b14:	cmp	r0, #0
   17b18:	bne	17b04 <__assert_fail@plt+0x64c8>
   17b1c:	ldr	r7, [sp, #88]	; 0x58
   17b20:	mov	r0, r7
   17b24:	bl	114ec <strlen@plt>
   17b28:	mov	r5, r6
   17b2c:	str	r0, [fp, #-72]	; 0xffffffb8
   17b30:	str	r7, [fp, #-84]	; 0xffffffac
   17b34:	mov	r2, #1
   17b38:	mov	r3, r4
   17b3c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17b40:	mov	lr, r9
   17b44:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17b48:	b	17c44 <__assert_fail@plt+0x6608>
   17b4c:	mov	r0, #1
   17b50:	b	17b94 <__assert_fail@plt+0x6558>
   17b54:	mov	r7, #0
   17b58:	mov	r8, #0
   17b5c:	mov	r2, r0
   17b60:	b	17c40 <__assert_fail@plt+0x6604>
   17b64:	tst	r4, #1
   17b68:	bne	17b94 <__assert_fail@plt+0x6558>
   17b6c:	mov	r2, r0
   17b70:	b	17bbc <__assert_fail@plt+0x6580>
   17b74:	mov	r0, #1
   17b78:	str	r0, [fp, #-72]	; 0xffffffb8
   17b7c:	mov	r8, #0
   17b80:	mov	r7, #5
   17b84:	b	17c00 <__assert_fail@plt+0x65c4>
   17b88:	mov	r2, #1
   17b8c:	tst	r4, #1
   17b90:	beq	17bbc <__assert_fail@plt+0x6580>
   17b94:	mov	r1, #1
   17b98:	str	r1, [fp, #-72]	; 0xffffffb8
   17b9c:	mov	r8, #0
   17ba0:	mov	r7, #2
   17ba4:	movw	r1, #55916	; 0xda6c
   17ba8:	movt	r1, #1
   17bac:	str	r1, [fp, #-84]	; 0xffffffac
   17bb0:	mov	r2, r0
   17bb4:	mov	r3, #1
   17bb8:	b	17c44 <__assert_fail@plt+0x6608>
   17bbc:	mov	r8, #1
   17bc0:	mov	r7, #2
   17bc4:	cmp	sl, #0
   17bc8:	movne	r0, #39	; 0x27
   17bcc:	strbne	r0, [r5]
   17bd0:	movw	r0, #55916	; 0xda6c
   17bd4:	movt	r0, #1
   17bd8:	str	r0, [fp, #-84]	; 0xffffffac
   17bdc:	mov	r0, #1
   17be0:	str	r0, [fp, #-72]	; 0xffffffb8
   17be4:	b	17c40 <__assert_fail@plt+0x6604>
   17be8:	mov	r7, #5
   17bec:	tst	r4, #1
   17bf0:	beq	17c18 <__assert_fail@plt+0x65dc>
   17bf4:	mov	r0, #1
   17bf8:	str	r0, [fp, #-72]	; 0xffffffb8
   17bfc:	mov	r8, #0
   17c00:	movw	r0, #54781	; 0xd5fd
   17c04:	movt	r0, #1
   17c08:	str	r0, [fp, #-84]	; 0xffffffac
   17c0c:	mov	r2, #1
   17c10:	mov	r3, #1
   17c14:	b	17c44 <__assert_fail@plt+0x6608>
   17c18:	cmp	sl, #0
   17c1c:	movne	r0, #34	; 0x22
   17c20:	strbne	r0, [r5]
   17c24:	mov	r8, #1
   17c28:	movw	r0, #54781	; 0xd5fd
   17c2c:	movt	r0, #1
   17c30:	str	r0, [fp, #-84]	; 0xffffffac
   17c34:	mov	r0, #1
   17c38:	str	r0, [fp, #-72]	; 0xffffffb8
   17c3c:	mov	r2, #1
   17c40:	mov	r3, #0
   17c44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17c48:	cmp	r0, #0
   17c4c:	movwne	r0, #1
   17c50:	and	r1, r0, r3
   17c54:	and	r1, r2, r1
   17c58:	str	r1, [sp, #56]	; 0x38
   17c5c:	sub	r1, r7, #2
   17c60:	clz	r1, r1
   17c64:	lsr	r1, r1, #5
   17c68:	and	r1, r1, r3
   17c6c:	str	r1, [sp, #68]	; 0x44
   17c70:	str	r7, [fp, #-64]	; 0xffffffc0
   17c74:	subs	r1, r7, #2
   17c78:	movwne	r1, #1
   17c7c:	eor	r4, r3, #1
   17c80:	str	r4, [fp, #-88]	; 0xffffffa8
   17c84:	orr	r4, r1, r4
   17c88:	str	r4, [sp, #72]	; 0x48
   17c8c:	and	r1, r1, r2
   17c90:	and	r0, r0, r1
   17c94:	str	r0, [fp, #-60]	; 0xffffffc4
   17c98:	str	r3, [fp, #-76]	; 0xffffffb4
   17c9c:	orr	r0, r1, r3
   17ca0:	eor	r0, r0, #1
   17ca4:	ldr	r1, [fp, #16]
   17ca8:	clz	r1, r1
   17cac:	lsr	r1, r1, #5
   17cb0:	orr	r0, r1, r0
   17cb4:	str	r0, [fp, #-68]	; 0xffffffbc
   17cb8:	str	r2, [sp, #92]	; 0x5c
   17cbc:	eor	r0, r2, #1
   17cc0:	str	r0, [sp, #60]	; 0x3c
   17cc4:	mov	r7, #0
   17cc8:	cmn	lr, #1
   17ccc:	beq	17cdc <__assert_fail@plt+0x66a0>
   17cd0:	cmp	r7, lr
   17cd4:	bne	17ce8 <__assert_fail@plt+0x66ac>
   17cd8:	b	187f4 <__assert_fail@plt+0x71b8>
   17cdc:	ldrb	r0, [ip, r7]
   17ce0:	cmp	r0, #0
   17ce4:	beq	187f4 <__assert_fail@plt+0x71b8>
   17ce8:	mov	r9, #0
   17cec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17cf0:	cmp	r0, #0
   17cf4:	beq	17d28 <__assert_fail@plt+0x66ec>
   17cf8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17cfc:	add	r4, r7, r0
   17d00:	cmp	r0, #2
   17d04:	bcc	17d20 <__assert_fail@plt+0x66e4>
   17d08:	cmn	lr, #1
   17d0c:	bne	17d20 <__assert_fail@plt+0x66e4>
   17d10:	mov	r0, ip
   17d14:	bl	114ec <strlen@plt>
   17d18:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17d1c:	mov	lr, r0
   17d20:	cmp	r4, lr
   17d24:	bls	17d34 <__assert_fail@plt+0x66f8>
   17d28:	mov	r0, #0
   17d2c:	str	r0, [fp, #-52]	; 0xffffffcc
   17d30:	b	17d78 <__assert_fail@plt+0x673c>
   17d34:	mov	r4, lr
   17d38:	add	r0, ip, r7
   17d3c:	ldr	r1, [fp, #-84]	; 0xffffffac
   17d40:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17d44:	bl	114e0 <bcmp@plt>
   17d48:	cmp	r0, #0
   17d4c:	mov	r1, r0
   17d50:	movwne	r1, #1
   17d54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17d58:	orr	r1, r1, r2
   17d5c:	tst	r1, #1
   17d60:	beq	188c8 <__assert_fail@plt+0x728c>
   17d64:	clz	r0, r0
   17d68:	lsr	r0, r0, #5
   17d6c:	str	r0, [fp, #-52]	; 0xffffffcc
   17d70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17d74:	mov	lr, r4
   17d78:	ldrb	r4, [ip, r7]
   17d7c:	cmp	r4, #126	; 0x7e
   17d80:	bhi	182b0 <__assert_fail@plt+0x6c74>
   17d84:	mov	r6, #1
   17d88:	mov	r2, #110	; 0x6e
   17d8c:	mov	r0, #97	; 0x61
   17d90:	add	r3, pc, #4
   17d94:	mov	r1, #0
   17d98:	ldr	pc, [r3, r4, lsl #2]
   17d9c:	andeq	r8, r1, r0, lsl r1
   17da0:			; <UNDEFINED> instruction: 0x000182b0
   17da4:			; <UNDEFINED> instruction: 0x000182b0
   17da8:			; <UNDEFINED> instruction: 0x000182b0
   17dac:			; <UNDEFINED> instruction: 0x000182b0
   17db0:			; <UNDEFINED> instruction: 0x000182b0
   17db4:			; <UNDEFINED> instruction: 0x000182b0
   17db8:	andeq	r8, r1, r4, lsl #7
   17dbc:	strdeq	r8, [r1], -r0
   17dc0:	andeq	r8, r1, r8, ror #1
   17dc4:	strdeq	r8, [r1], -ip
   17dc8:	andeq	r8, r1, r8, lsl r2
   17dcc:	andeq	r8, r1, r0, ror #1
   17dd0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17dd4:			; <UNDEFINED> instruction: 0x000182b0
   17dd8:			; <UNDEFINED> instruction: 0x000182b0
   17ddc:			; <UNDEFINED> instruction: 0x000182b0
   17de0:			; <UNDEFINED> instruction: 0x000182b0
   17de4:			; <UNDEFINED> instruction: 0x000182b0
   17de8:			; <UNDEFINED> instruction: 0x000182b0
   17dec:			; <UNDEFINED> instruction: 0x000182b0
   17df0:			; <UNDEFINED> instruction: 0x000182b0
   17df4:			; <UNDEFINED> instruction: 0x000182b0
   17df8:			; <UNDEFINED> instruction: 0x000182b0
   17dfc:			; <UNDEFINED> instruction: 0x000182b0
   17e00:			; <UNDEFINED> instruction: 0x000182b0
   17e04:			; <UNDEFINED> instruction: 0x000182b0
   17e08:			; <UNDEFINED> instruction: 0x000182b0
   17e0c:			; <UNDEFINED> instruction: 0x000182b0
   17e10:			; <UNDEFINED> instruction: 0x000182b0
   17e14:			; <UNDEFINED> instruction: 0x000182b0
   17e18:			; <UNDEFINED> instruction: 0x000182b0
   17e1c:	muleq	r1, r4, r0
   17e20:	muleq	r1, r8, r0
   17e24:	muleq	r1, r8, r0
   17e28:	andeq	r8, r1, r0, lsl #1
   17e2c:	muleq	r1, r8, r0
   17e30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e34:	muleq	r1, r8, r0
   17e38:	andeq	r8, r1, r0, lsr #4
   17e3c:	muleq	r1, r8, r0
   17e40:	muleq	r1, r8, r0
   17e44:	muleq	r1, r8, r0
   17e48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e88:	muleq	r1, r8, r0
   17e8c:	muleq	r1, r8, r0
   17e90:	muleq	r1, r8, r0
   17e94:	muleq	r1, r8, r0
   17e98:	andeq	r8, r1, r8, ror #3
   17e9c:			; <UNDEFINED> instruction: 0x000182b0
   17ea0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ea4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ea8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17eac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17eb0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17eb4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17eb8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ebc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ec0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ec4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ec8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ecc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ed0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ed4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ed8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17edc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ee0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ee4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ee8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17eec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ef0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ef4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ef8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17efc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f00:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f04:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f08:	muleq	r1, r8, r0
   17f0c:	andeq	r8, r1, r0, asr #1
   17f10:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f14:	muleq	r1, r8, r0
   17f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f1c:	muleq	r1, r8, r0
   17f20:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f24:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f2c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f34:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f54:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f58:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f5c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f68:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17f88:	andeq	r8, r1, r4, asr r0
   17f8c:	muleq	r1, r8, r0
   17f90:	andeq	r8, r1, r4, asr r0
   17f94:	andeq	r8, r1, r0, lsl #1
   17f98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17f9c:	tst	r0, #1
   17fa0:	bne	17fcc <__assert_fail@plt+0x6990>
   17fa4:	ubfx	r0, r4, #5, #3
   17fa8:	ldr	r1, [fp, #16]
   17fac:	ldr	r0, [r1, r0, lsl #2]
   17fb0:	and	r1, r4, #31
   17fb4:	mov	r2, #1
   17fb8:	tst	r0, r2, lsl r1
   17fbc:	beq	17fcc <__assert_fail@plt+0x6990>
   17fc0:	mov	r0, r4
   17fc4:	mov	r1, r6
   17fc8:	b	17fe0 <__assert_fail@plt+0x69a4>
   17fcc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17fd0:	cmp	r0, #0
   17fd4:	mov	r0, r4
   17fd8:	mov	r1, r6
   17fdc:	beq	18318 <__assert_fail@plt+0x6cdc>
   17fe0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17fe4:	tst	r2, #1
   17fe8:	bne	188dc <__assert_fail@plt+0x72a0>
   17fec:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17ff0:	subs	r2, r2, #2
   17ff4:	movwne	r2, #1
   17ff8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ffc:	orr	r2, r2, r3
   18000:	tst	r2, #1
   18004:	bne	18040 <__assert_fail@plt+0x6a04>
   18008:	cmp	r8, sl
   1800c:	movcc	r2, #39	; 0x27
   18010:	strbcc	r2, [r5, r8]
   18014:	add	r2, r8, #1
   18018:	cmp	r2, sl
   1801c:	movcc	r3, #36	; 0x24
   18020:	strbcc	r3, [r5, r2]
   18024:	add	r2, r8, #2
   18028:	cmp	r2, sl
   1802c:	movcc	r3, #39	; 0x27
   18030:	strbcc	r3, [r5, r2]
   18034:	add	r8, r8, #3
   18038:	mov	r2, #1
   1803c:	str	r2, [fp, #-56]	; 0xffffffc8
   18040:	cmp	r8, sl
   18044:	movcc	r2, #92	; 0x5c
   18048:	strbcc	r2, [r5, r8]
   1804c:	add	r8, r8, #1
   18050:	b	1835c <__assert_fail@plt+0x6d20>
   18054:	cmp	lr, #1
   18058:	beq	18080 <__assert_fail@plt+0x6a44>
   1805c:	mov	r6, #0
   18060:	cmn	lr, #1
   18064:	bne	1808c <__assert_fail@plt+0x6a50>
   18068:	ldrb	r0, [ip, #1]
   1806c:	cmp	r0, #0
   18070:	beq	18080 <__assert_fail@plt+0x6a44>
   18074:	mvn	lr, #0
   18078:	mov	r9, #0
   1807c:	b	17f98 <__assert_fail@plt+0x695c>
   18080:	mov	r6, #0
   18084:	cmp	r7, #0
   18088:	beq	18094 <__assert_fail@plt+0x6a58>
   1808c:	mov	r9, #0
   18090:	b	17f98 <__assert_fail@plt+0x695c>
   18094:	mov	r1, #1
   18098:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1809c:	cmp	r0, #2
   180a0:	bne	180b8 <__assert_fail@plt+0x6a7c>
   180a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   180a8:	tst	r0, #1
   180ac:	mov	r6, r1
   180b0:	beq	17f98 <__assert_fail@plt+0x695c>
   180b4:	b	188dc <__assert_fail@plt+0x72a0>
   180b8:	mov	r6, r1
   180bc:	b	17f98 <__assert_fail@plt+0x695c>
   180c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   180c4:	cmp	r0, #2
   180c8:	bne	182fc <__assert_fail@plt+0x6cc0>
   180cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   180d0:	tst	r0, #1
   180d4:	bne	188dc <__assert_fail@plt+0x72a0>
   180d8:	mov	r9, #0
   180dc:	b	18310 <__assert_fail@plt+0x6cd4>
   180e0:	mov	r0, #102	; 0x66
   180e4:	b	18384 <__assert_fail@plt+0x6d48>
   180e8:	mov	r2, #116	; 0x74
   180ec:	b	180fc <__assert_fail@plt+0x6ac0>
   180f0:	mov	r0, #98	; 0x62
   180f4:	b	18384 <__assert_fail@plt+0x6d48>
   180f8:	mov	r2, #114	; 0x72
   180fc:	ldr	r0, [sp, #72]	; 0x48
   18100:	tst	r0, #1
   18104:	mov	r0, r2
   18108:	bne	18384 <__assert_fail@plt+0x6d48>
   1810c:	b	188dc <__assert_fail@plt+0x72a0>
   18110:	ldr	r0, [sp, #92]	; 0x5c
   18114:	tst	r0, #1
   18118:	beq	183a0 <__assert_fail@plt+0x6d64>
   1811c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18120:	tst	r0, #1
   18124:	bne	188dc <__assert_fail@plt+0x72a0>
   18128:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1812c:	subs	r0, r0, #2
   18130:	movwne	r0, #1
   18134:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18138:	orr	r0, r0, r1
   1813c:	tst	r0, #1
   18140:	bne	1817c <__assert_fail@plt+0x6b40>
   18144:	cmp	r8, sl
   18148:	movcc	r0, #39	; 0x27
   1814c:	strbcc	r0, [r5, r8]
   18150:	add	r0, r8, #1
   18154:	cmp	r0, sl
   18158:	movcc	r1, #36	; 0x24
   1815c:	strbcc	r1, [r5, r0]
   18160:	add	r0, r8, #2
   18164:	cmp	r0, sl
   18168:	movcc	r1, #39	; 0x27
   1816c:	strbcc	r1, [r5, r0]
   18170:	add	r8, r8, #3
   18174:	mov	r0, #1
   18178:	str	r0, [fp, #-56]	; 0xffffffc8
   1817c:	cmp	r8, sl
   18180:	movcc	r0, #92	; 0x5c
   18184:	strbcc	r0, [r5, r8]
   18188:	add	r0, r8, #1
   1818c:	mov	r6, #0
   18190:	mov	r9, #1
   18194:	mov	r4, #48	; 0x30
   18198:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1819c:	cmp	r1, #2
   181a0:	beq	18564 <__assert_fail@plt+0x6f28>
   181a4:	add	r1, r7, #1
   181a8:	cmp	r1, lr
   181ac:	bcs	18564 <__assert_fail@plt+0x6f28>
   181b0:	ldrb	r1, [ip, r1]
   181b4:	sub	r1, r1, #48	; 0x30
   181b8:	uxtb	r1, r1
   181bc:	cmp	r1, #9
   181c0:	bhi	18564 <__assert_fail@plt+0x6f28>
   181c4:	cmp	r0, sl
   181c8:	movcc	r1, #48	; 0x30
   181cc:	strbcc	r1, [r5, r0]
   181d0:	add	r0, r8, #2
   181d4:	cmp	r0, sl
   181d8:	movcc	r1, #48	; 0x30
   181dc:	strbcc	r1, [r5, r0]
   181e0:	add	r8, r8, #3
   181e4:	b	17f98 <__assert_fail@plt+0x695c>
   181e8:	mov	r9, #0
   181ec:	mov	r4, #63	; 0x3f
   181f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   181f4:	cmp	r0, #5
   181f8:	beq	1856c <__assert_fail@plt+0x6f30>
   181fc:	cmp	r0, #2
   18200:	bne	18614 <__assert_fail@plt+0x6fd8>
   18204:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18208:	tst	r0, #1
   1820c:	mov	r6, #0
   18210:	beq	17f98 <__assert_fail@plt+0x695c>
   18214:	b	188dc <__assert_fail@plt+0x72a0>
   18218:	mov	r0, #118	; 0x76
   1821c:	b	18384 <__assert_fail@plt+0x6d48>
   18220:	mov	r4, #39	; 0x27
   18224:	mov	r0, #1
   18228:	str	r0, [sp, #64]	; 0x40
   1822c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18230:	cmp	r0, #2
   18234:	bne	183bc <__assert_fail@plt+0x6d80>
   18238:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1823c:	tst	r0, #1
   18240:	bne	188dc <__assert_fail@plt+0x72a0>
   18244:	ldr	r2, [sp, #84]	; 0x54
   18248:	cmp	r2, #0
   1824c:	mov	r0, r2
   18250:	movwne	r0, #1
   18254:	clz	r1, sl
   18258:	lsr	r1, r1, #5
   1825c:	orrs	r0, r0, r1
   18260:	moveq	r2, sl
   18264:	str	r2, [sp, #84]	; 0x54
   18268:	moveq	sl, r0
   1826c:	cmp	r8, sl
   18270:	movcc	r0, #39	; 0x27
   18274:	strbcc	r0, [r5, r8]
   18278:	add	r0, r8, #1
   1827c:	cmp	r0, sl
   18280:	movcc	r1, #92	; 0x5c
   18284:	strbcc	r1, [r5, r0]
   18288:	add	r0, r8, #2
   1828c:	cmp	r0, sl
   18290:	movcc	r1, #39	; 0x27
   18294:	strbcc	r1, [r5, r0]
   18298:	add	r8, r8, #3
   1829c:	mov	r0, #0
   182a0:	str	r0, [fp, #-56]	; 0xffffffc8
   182a4:	mov	r9, #0
   182a8:	mov	r6, #1
   182ac:	b	17f98 <__assert_fail@plt+0x695c>
   182b0:	ldr	r0, [sp, #44]	; 0x2c
   182b4:	cmp	r0, #1
   182b8:	bne	183c4 <__assert_fail@plt+0x6d88>
   182bc:	str	lr, [sp, #32]
   182c0:	bl	114c8 <__ctype_b_loc@plt>
   182c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   182c8:	ldr	r0, [r0]
   182cc:	add	r0, r0, r4, lsl #1
   182d0:	ldrb	r0, [r0, #1]
   182d4:	ubfx	r6, r0, #6, #1
   182d8:	mov	r2, #1
   182dc:	ldr	r0, [sp, #60]	; 0x3c
   182e0:	orr	r1, r6, r0
   182e4:	cmp	r2, #1
   182e8:	bhi	1861c <__assert_fail@plt+0x6fe0>
   182ec:	tst	r1, #1
   182f0:	beq	1861c <__assert_fail@plt+0x6fe0>
   182f4:	ldr	lr, [sp, #32]
   182f8:	b	17f98 <__assert_fail@plt+0x695c>
   182fc:	mov	r9, #0
   18300:	mov	r0, #92	; 0x5c
   18304:	ldr	r1, [sp, #56]	; 0x38
   18308:	cmp	r1, #0
   1830c:	beq	18384 <__assert_fail@plt+0x6d48>
   18310:	mov	r4, #92	; 0x5c
   18314:	mov	r6, #0
   18318:	cmp	r9, #0
   1831c:	bne	18354 <__assert_fail@plt+0x6d18>
   18320:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18324:	tst	r0, #1
   18328:	beq	18354 <__assert_fail@plt+0x6d18>
   1832c:	cmp	r8, sl
   18330:	movcc	r0, #39	; 0x27
   18334:	strbcc	r0, [r5, r8]
   18338:	add	r0, r8, #1
   1833c:	cmp	r0, sl
   18340:	movcc	r1, #39	; 0x27
   18344:	strbcc	r1, [r5, r0]
   18348:	add	r8, r8, #2
   1834c:	mov	r0, #0
   18350:	str	r0, [fp, #-56]	; 0xffffffc8
   18354:	mov	r1, r6
   18358:	mov	r0, r4
   1835c:	cmp	r8, sl
   18360:	strbcc	r0, [r5, r8]
   18364:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18368:	and	r0, r0, r1
   1836c:	str	r0, [fp, #-48]	; 0xffffffd0
   18370:	add	r8, r8, #1
   18374:	add	r7, r7, #1
   18378:	cmn	lr, #1
   1837c:	bne	17cd0 <__assert_fail@plt+0x6694>
   18380:	b	17cdc <__assert_fail@plt+0x66a0>
   18384:	mov	r9, #0
   18388:	ldr	r1, [sp, #92]	; 0x5c
   1838c:	tst	r1, #1
   18390:	mov	r6, #0
   18394:	mov	r1, #0
   18398:	beq	17f98 <__assert_fail@plt+0x695c>
   1839c:	b	17fe0 <__assert_fail@plt+0x69a4>
   183a0:	mov	r4, #0
   183a4:	ldr	r0, [sp, #40]	; 0x28
   183a8:	cmp	r0, #0
   183ac:	mov	r9, #0
   183b0:	mov	r6, #0
   183b4:	beq	17f98 <__assert_fail@plt+0x695c>
   183b8:	b	18374 <__assert_fail@plt+0x6d38>
   183bc:	mov	r6, #1
   183c0:	b	17f98 <__assert_fail@plt+0x695c>
   183c4:	mov	r0, #0
   183c8:	str	r0, [fp, #-36]	; 0xffffffdc
   183cc:	str	r0, [fp, #-40]	; 0xffffffd8
   183d0:	cmn	lr, #1
   183d4:	bne	183e8 <__assert_fail@plt+0x6dac>
   183d8:	mov	r0, ip
   183dc:	bl	114ec <strlen@plt>
   183e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   183e4:	mov	lr, r0
   183e8:	ldr	r0, [sp, #76]	; 0x4c
   183ec:	add	r0, r0, r7
   183f0:	str	r0, [sp, #24]
   183f4:	mov	r6, #1
   183f8:	mov	r2, #0
   183fc:	sub	r0, fp, #40	; 0x28
   18400:	mov	r3, r0
   18404:	str	r5, [sp, #28]
   18408:	str	lr, [sp, #32]
   1840c:	b	18450 <__assert_fail@plt+0x6e14>
   18410:	ldr	r5, [sp, #52]	; 0x34
   18414:	add	r5, r0, r5
   18418:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1841c:	bl	113e4 <iswprint@plt>
   18420:	cmp	r0, #0
   18424:	movwne	r0, #1
   18428:	and	r6, r6, r0
   1842c:	sub	r0, fp, #40	; 0x28
   18430:	bl	11390 <mbsinit@plt>
   18434:	sub	r3, fp, #40	; 0x28
   18438:	mov	r2, r5
   1843c:	ldr	lr, [sp, #32]
   18440:	cmp	r0, #0
   18444:	ldr	r5, [sp, #28]
   18448:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1844c:	bne	182dc <__assert_fail@plt+0x6ca0>
   18450:	str	r2, [sp, #52]	; 0x34
   18454:	add	r0, r2, r7
   18458:	add	r1, ip, r0
   1845c:	str	r0, [sp, #48]	; 0x30
   18460:	sub	r2, lr, r0
   18464:	sub	r0, fp, #44	; 0x2c
   18468:	bl	1ba8c <__assert_fail@plt+0xa450>
   1846c:	cmp	r0, #0
   18470:	beq	187e8 <__assert_fail@plt+0x71ac>
   18474:	cmn	r0, #1
   18478:	beq	187a4 <__assert_fail@plt+0x7168>
   1847c:	cmn	r0, #2
   18480:	ldr	lr, [sp, #32]
   18484:	beq	187ac <__assert_fail@plt+0x7170>
   18488:	cmp	r0, #2
   1848c:	mov	r1, #0
   18490:	movwcc	r1, #1
   18494:	ldr	r2, [sp, #68]	; 0x44
   18498:	eor	r2, r2, #1
   1849c:	orrs	r1, r2, r1
   184a0:	bne	18410 <__assert_fail@plt+0x6dd4>
   184a4:	ldr	r1, [sp, #52]	; 0x34
   184a8:	ldr	r2, [sp, #24]
   184ac:	add	r1, r2, r1
   184b0:	sub	r2, r0, #1
   184b4:	b	184c4 <__assert_fail@plt+0x6e88>
   184b8:	add	r1, r1, #1
   184bc:	subs	r2, r2, #1
   184c0:	beq	18410 <__assert_fail@plt+0x6dd4>
   184c4:	ldrb	r3, [r1]
   184c8:	sub	r3, r3, #91	; 0x5b
   184cc:	cmp	r3, #33	; 0x21
   184d0:	bhi	184b8 <__assert_fail@plt+0x6e7c>
   184d4:	add	r5, pc, #0
   184d8:	ldr	pc, [r5, r3, lsl #2]
   184dc:	ldrdeq	r8, [r1], -r4
   184e0:	ldrdeq	r8, [r1], -r4
   184e4:			; <UNDEFINED> instruction: 0x000184b8
   184e8:	ldrdeq	r8, [r1], -r4
   184ec:			; <UNDEFINED> instruction: 0x000184b8
   184f0:	ldrdeq	r8, [r1], -r4
   184f4:			; <UNDEFINED> instruction: 0x000184b8
   184f8:			; <UNDEFINED> instruction: 0x000184b8
   184fc:			; <UNDEFINED> instruction: 0x000184b8
   18500:			; <UNDEFINED> instruction: 0x000184b8
   18504:			; <UNDEFINED> instruction: 0x000184b8
   18508:			; <UNDEFINED> instruction: 0x000184b8
   1850c:			; <UNDEFINED> instruction: 0x000184b8
   18510:			; <UNDEFINED> instruction: 0x000184b8
   18514:			; <UNDEFINED> instruction: 0x000184b8
   18518:			; <UNDEFINED> instruction: 0x000184b8
   1851c:			; <UNDEFINED> instruction: 0x000184b8
   18520:			; <UNDEFINED> instruction: 0x000184b8
   18524:			; <UNDEFINED> instruction: 0x000184b8
   18528:			; <UNDEFINED> instruction: 0x000184b8
   1852c:			; <UNDEFINED> instruction: 0x000184b8
   18530:			; <UNDEFINED> instruction: 0x000184b8
   18534:			; <UNDEFINED> instruction: 0x000184b8
   18538:			; <UNDEFINED> instruction: 0x000184b8
   1853c:			; <UNDEFINED> instruction: 0x000184b8
   18540:			; <UNDEFINED> instruction: 0x000184b8
   18544:			; <UNDEFINED> instruction: 0x000184b8
   18548:			; <UNDEFINED> instruction: 0x000184b8
   1854c:			; <UNDEFINED> instruction: 0x000184b8
   18550:			; <UNDEFINED> instruction: 0x000184b8
   18554:			; <UNDEFINED> instruction: 0x000184b8
   18558:			; <UNDEFINED> instruction: 0x000184b8
   1855c:			; <UNDEFINED> instruction: 0x000184b8
   18560:	ldrdeq	r8, [r1], -r4
   18564:	mov	r8, r0
   18568:	b	17f98 <__assert_fail@plt+0x695c>
   1856c:	ldr	r0, [sp, #36]	; 0x24
   18570:	cmp	r0, #0
   18574:	beq	18614 <__assert_fail@plt+0x6fd8>
   18578:	add	r0, r7, #2
   1857c:	cmp	r0, lr
   18580:	bcs	18614 <__assert_fail@plt+0x6fd8>
   18584:	add	r1, r7, ip
   18588:	ldrb	r1, [r1, #1]
   1858c:	cmp	r1, #63	; 0x3f
   18590:	bne	18614 <__assert_fail@plt+0x6fd8>
   18594:	ldrb	r1, [ip, r0]
   18598:	sub	r2, r1, #33	; 0x21
   1859c:	cmp	r2, #29
   185a0:	bhi	18614 <__assert_fail@plt+0x6fd8>
   185a4:	mov	r3, #1
   185a8:	movw	r6, #20929	; 0x51c1
   185ac:	movt	r6, #14336	; 0x3800
   185b0:	tst	r6, r3, lsl r2
   185b4:	beq	18614 <__assert_fail@plt+0x6fd8>
   185b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   185bc:	tst	r2, #1
   185c0:	bne	188dc <__assert_fail@plt+0x72a0>
   185c4:	cmp	r8, sl
   185c8:	movcc	r2, #63	; 0x3f
   185cc:	strbcc	r2, [r5, r8]
   185d0:	add	r2, r8, #1
   185d4:	cmp	r2, sl
   185d8:	movcc	r3, #34	; 0x22
   185dc:	strbcc	r3, [r5, r2]
   185e0:	add	r2, r8, #2
   185e4:	cmp	r2, sl
   185e8:	movcc	r3, #34	; 0x22
   185ec:	strbcc	r3, [r5, r2]
   185f0:	add	r2, r8, #3
   185f4:	cmp	r2, sl
   185f8:	movcc	r3, #63	; 0x3f
   185fc:	strbcc	r3, [r5, r2]
   18600:	add	r8, r8, #4
   18604:	mov	r7, r0
   18608:	mov	r4, r1
   1860c:	mov	r6, #0
   18610:	b	17f98 <__assert_fail@plt+0x695c>
   18614:	mov	r6, #0
   18618:	b	17f98 <__assert_fail@plt+0x695c>
   1861c:	add	r0, r2, r7
   18620:	str	r0, [sp, #52]	; 0x34
   18624:	mov	r2, #0
   18628:	ldr	lr, [sp, #32]
   1862c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18630:	str	r1, [sp, #48]	; 0x30
   18634:	tst	r1, #1
   18638:	bne	18714 <__assert_fail@plt+0x70d8>
   1863c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18640:	tst	r1, #1
   18644:	bne	188dc <__assert_fail@plt+0x72a0>
   18648:	mov	r3, r0
   1864c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18650:	subs	r1, r0, #2
   18654:	movwne	r1, #1
   18658:	orr	r1, r1, r3
   1865c:	tst	r1, #1
   18660:	bne	18698 <__assert_fail@plt+0x705c>
   18664:	cmp	r8, sl
   18668:	movcc	r0, #39	; 0x27
   1866c:	strbcc	r0, [r5, r8]
   18670:	add	r2, r8, #1
   18674:	cmp	r2, sl
   18678:	movcc	r0, #36	; 0x24
   1867c:	strbcc	r0, [r5, r2]
   18680:	add	r2, r8, #2
   18684:	cmp	r2, sl
   18688:	movcc	r0, #39	; 0x27
   1868c:	strbcc	r0, [r5, r2]
   18690:	add	r8, r8, #3
   18694:	mov	r3, #1
   18698:	cmp	r8, sl
   1869c:	movcc	r1, #92	; 0x5c
   186a0:	strbcc	r1, [r5, r8]
   186a4:	add	r2, r8, #1
   186a8:	cmp	r2, sl
   186ac:	bcs	186c0 <__assert_fail@plt+0x7084>
   186b0:	uxtb	r1, r4
   186b4:	mov	r0, #48	; 0x30
   186b8:	orr	r1, r0, r1, lsr #6
   186bc:	strb	r1, [r5, r2]
   186c0:	add	r2, r8, #2
   186c4:	cmp	r2, sl
   186c8:	lsrcc	r1, r4, #3
   186cc:	movcc	r0, #6
   186d0:	bficc	r1, r0, #3, #29
   186d4:	strbcc	r1, [r5, r2]
   186d8:	mov	r0, #6
   186dc:	bfi	r4, r0, #3, #29
   186e0:	add	r8, r8, #3
   186e4:	mov	r2, #1
   186e8:	mov	r0, r3
   186ec:	b	18738 <__assert_fail@plt+0x70fc>
   186f0:	cmp	r8, sl
   186f4:	strbcc	r4, [r5, r8]
   186f8:	ldr	r1, [sp, #76]	; 0x4c
   186fc:	ldrb	r4, [r1, r7]
   18700:	add	r8, r8, #1
   18704:	mov	r7, r3
   18708:	ldr	r1, [sp, #48]	; 0x30
   1870c:	tst	r1, #1
   18710:	beq	1863c <__assert_fail@plt+0x7000>
   18714:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18718:	tst	r1, #1
   1871c:	beq	18730 <__assert_fail@plt+0x70f4>
   18720:	cmp	r8, sl
   18724:	movcc	r1, #92	; 0x5c
   18728:	strbcc	r1, [r5, r8]
   1872c:	add	r8, r8, #1
   18730:	mov	r1, #0
   18734:	str	r1, [fp, #-52]	; 0xffffffcc
   18738:	and	r9, r2, #1
   1873c:	add	r3, r7, #1
   18740:	ldr	r1, [sp, #52]	; 0x34
   18744:	cmp	r1, r3
   18748:	bls	1878c <__assert_fail@plt+0x7150>
   1874c:	cmp	r9, #0
   18750:	movwne	r9, #1
   18754:	mvn	r1, r0
   18758:	orr	r1, r1, r9
   1875c:	tst	r1, #1
   18760:	bne	186f0 <__assert_fail@plt+0x70b4>
   18764:	cmp	r8, sl
   18768:	movcc	r1, #39	; 0x27
   1876c:	strbcc	r1, [r5, r8]
   18770:	add	r1, r8, #1
   18774:	cmp	r1, sl
   18778:	movcc	r0, #39	; 0x27
   1877c:	strbcc	r0, [r5, r1]
   18780:	add	r8, r8, #2
   18784:	mov	r0, #0
   18788:	b	186f0 <__assert_fail@plt+0x70b4>
   1878c:	str	r0, [fp, #-56]	; 0xffffffc8
   18790:	cmp	r9, #0
   18794:	movwne	r9, #1
   18798:	cmp	r9, #0
   1879c:	beq	18320 <__assert_fail@plt+0x6ce4>
   187a0:	b	18354 <__assert_fail@plt+0x6d18>
   187a4:	mov	r6, #0
   187a8:	b	187e8 <__assert_fail@plt+0x71ac>
   187ac:	mov	r6, #0
   187b0:	ldr	r0, [sp, #48]	; 0x30
   187b4:	cmp	r0, lr
   187b8:	bcs	187e8 <__assert_fail@plt+0x71ac>
   187bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   187c0:	add	r0, ip, r7
   187c4:	ldr	r2, [sp, #52]	; 0x34
   187c8:	ldrb	r1, [r0, r2]
   187cc:	cmp	r1, #0
   187d0:	beq	182dc <__assert_fail@plt+0x6ca0>
   187d4:	add	r2, r2, #1
   187d8:	add	r1, r7, r2
   187dc:	cmp	r1, lr
   187e0:	bcc	187c8 <__assert_fail@plt+0x718c>
   187e4:	b	182dc <__assert_fail@plt+0x6ca0>
   187e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   187ec:	ldr	r2, [sp, #52]	; 0x34
   187f0:	b	182dc <__assert_fail@plt+0x6ca0>
   187f4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   187f8:	eor	r0, r1, #2
   187fc:	orr	r0, r0, r8
   18800:	clz	r0, r0
   18804:	lsr	r0, r0, #5
   18808:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1880c:	tst	r3, r0
   18810:	bne	188dc <__assert_fail@plt+0x72a0>
   18814:	mov	r6, r5
   18818:	subs	r0, r1, #2
   1881c:	movwne	r0, #1
   18820:	orr	r0, r3, r0
   18824:	tst	r0, #1
   18828:	ldr	r2, [sp, #92]	; 0x5c
   1882c:	ldreq	r0, [sp, #64]	; 0x40
   18830:	eoreq	r0, r0, #1
   18834:	tsteq	r0, #1
   18838:	bne	18878 <__assert_fail@plt+0x723c>
   1883c:	mov	r9, lr
   18840:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18844:	tst	r0, #1
   18848:	bne	18944 <__assert_fail@plt+0x7308>
   1884c:	ldr	r0, [sp, #84]	; 0x54
   18850:	cmp	r0, #0
   18854:	beq	18878 <__assert_fail@plt+0x723c>
   18858:	mov	r0, #0
   1885c:	str	r0, [fp, #-48]	; 0xffffffd0
   18860:	mov	r1, #2
   18864:	cmp	sl, #0
   18868:	mov	r0, r2
   1886c:	mov	r4, r3
   18870:	ldr	r7, [sp, #84]	; 0x54
   18874:	beq	17a50 <__assert_fail@plt+0x6414>
   18878:	ldr	r1, [fp, #-84]	; 0xffffffac
   1887c:	clz	r0, r1
   18880:	lsr	r0, r0, #5
   18884:	orr	r0, r0, r3
   18888:	tst	r0, #1
   1888c:	bne	188b8 <__assert_fail@plt+0x727c>
   18890:	ldrb	r0, [r1]
   18894:	cmp	r0, #0
   18898:	beq	188b8 <__assert_fail@plt+0x727c>
   1889c:	add	r1, r1, #1
   188a0:	cmp	r8, sl
   188a4:	strbcc	r0, [r6, r8]
   188a8:	add	r8, r8, #1
   188ac:	ldrb	r0, [r1], #1
   188b0:	cmp	r0, #0
   188b4:	bne	188a0 <__assert_fail@plt+0x7264>
   188b8:	cmp	r8, sl
   188bc:	movcc	r0, #0
   188c0:	strbcc	r0, [r6, r8]
   188c4:	b	18938 <__assert_fail@plt+0x72fc>
   188c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   188cc:	mov	lr, r4
   188d0:	b	188dc <__assert_fail@plt+0x72a0>
   188d4:	ldr	r5, [sp, #28]
   188d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   188dc:	mov	r0, #0
   188e0:	ldr	r1, [fp, #12]
   188e4:	bic	r1, r1, #2
   188e8:	mov	r2, #2
   188ec:	ldr	r3, [sp, #92]	; 0x5c
   188f0:	tst	r3, #1
   188f4:	movwne	r2, #4
   188f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   188fc:	cmp	r3, #2
   18900:	movne	r2, r3
   18904:	str	r2, [sp]
   18908:	str	r1, [sp, #4]
   1890c:	str	r0, [sp, #8]
   18910:	ldr	r0, [sp, #80]	; 0x50
   18914:	str	r0, [sp, #12]
   18918:	ldr	r0, [sp, #88]	; 0x58
   1891c:	str	r0, [sp, #16]
   18920:	mov	r0, r5
   18924:	mov	r1, sl
   18928:	mov	r2, ip
   1892c:	mov	r3, lr
   18930:	bl	179c4 <__assert_fail@plt+0x6388>
   18934:	mov	r8, r0
   18938:	mov	r0, r8
   1893c:	sub	sp, fp, #28
   18940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18944:	mov	r0, #5
   18948:	str	r0, [sp]
   1894c:	ldr	r0, [fp, #12]
   18950:	str	r0, [sp, #4]
   18954:	ldr	r0, [fp, #16]
   18958:	str	r0, [sp, #8]
   1895c:	ldr	r0, [sp, #80]	; 0x50
   18960:	str	r0, [sp, #12]
   18964:	ldr	r0, [sp, #88]	; 0x58
   18968:	str	r0, [sp, #16]
   1896c:	mov	r0, r6
   18970:	ldr	r1, [sp, #84]	; 0x54
   18974:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18978:	mov	r3, r9
   1897c:	b	18930 <__assert_fail@plt+0x72f4>
   18980:	bl	11618 <abort@plt>
   18984:	mov	r3, r2
   18988:	mov	r2, #0
   1898c:	b	18990 <__assert_fail@plt+0x7354>
   18990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18994:	add	fp, sp, #28
   18998:	sub	sp, sp, #36	; 0x24
   1899c:	mov	r4, r2
   189a0:	str	r2, [sp, #24]
   189a4:	mov	r5, r1
   189a8:	mov	r6, r0
   189ac:	str	r0, [sp, #20]
   189b0:	movw	r8, #58032	; 0xe2b0
   189b4:	movt	r8, #2
   189b8:	cmp	r3, #0
   189bc:	movne	r8, r3
   189c0:	bl	1151c <__errno_location@plt>
   189c4:	str	r0, [sp, #28]
   189c8:	ldm	r8, {r3, r9}
   189cc:	ldr	r1, [r8, #40]	; 0x28
   189d0:	ldr	r2, [r8, #44]	; 0x2c
   189d4:	ldr	r7, [r0]
   189d8:	str	r7, [sp, #32]
   189dc:	add	sl, r8, #8
   189e0:	cmp	r4, #0
   189e4:	orreq	r9, r9, #1
   189e8:	stm	sp, {r3, r9, sl}
   189ec:	str	r1, [sp, #12]
   189f0:	str	r2, [sp, #16]
   189f4:	mov	r0, #0
   189f8:	mov	r1, #0
   189fc:	mov	r2, r6
   18a00:	mov	r3, r5
   18a04:	mov	r7, r5
   18a08:	bl	179c4 <__assert_fail@plt+0x6388>
   18a0c:	mov	r5, r0
   18a10:	add	r4, r0, #1
   18a14:	mov	r0, r4
   18a18:	bl	19e3c <__assert_fail@plt+0x8800>
   18a1c:	mov	r6, r0
   18a20:	ldr	r0, [r8]
   18a24:	ldr	r1, [r8, #40]	; 0x28
   18a28:	ldr	r2, [r8, #44]	; 0x2c
   18a2c:	stm	sp, {r0, r9, sl}
   18a30:	str	r1, [sp, #12]
   18a34:	str	r2, [sp, #16]
   18a38:	mov	r0, r6
   18a3c:	mov	r1, r4
   18a40:	ldr	r2, [sp, #20]
   18a44:	mov	r3, r7
   18a48:	bl	179c4 <__assert_fail@plt+0x6388>
   18a4c:	ldr	r0, [sp, #24]
   18a50:	ldr	r1, [sp, #32]
   18a54:	ldr	r2, [sp, #28]
   18a58:	str	r1, [r2]
   18a5c:	cmp	r0, #0
   18a60:	strne	r5, [r0]
   18a64:	mov	r0, r6
   18a68:	sub	sp, fp, #28
   18a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18a74:	add	fp, sp, #24
   18a78:	movw	r8, #57728	; 0xe180
   18a7c:	movt	r8, #2
   18a80:	ldr	r4, [r8]
   18a84:	movw	r5, #57732	; 0xe184
   18a88:	movt	r5, #2
   18a8c:	ldr	r0, [r5]
   18a90:	cmp	r0, #2
   18a94:	blt	18ac0 <__assert_fail@plt+0x7484>
   18a98:	add	r7, r4, #12
   18a9c:	mov	r6, #0
   18aa0:	ldr	r0, [r7, r6, lsl #3]
   18aa4:	bl	15934 <__assert_fail@plt+0x42f8>
   18aa8:	add	r0, r6, #1
   18aac:	ldr	r1, [r5]
   18ab0:	add	r2, r6, #2
   18ab4:	cmp	r2, r1
   18ab8:	mov	r6, r0
   18abc:	blt	18aa0 <__assert_fail@plt+0x7464>
   18ac0:	ldr	r0, [r4, #4]
   18ac4:	movw	r9, #58080	; 0xe2e0
   18ac8:	movt	r9, #2
   18acc:	cmp	r0, r9
   18ad0:	movw	r7, #57736	; 0xe188
   18ad4:	movt	r7, #2
   18ad8:	beq	18ae8 <__assert_fail@plt+0x74ac>
   18adc:	bl	15934 <__assert_fail@plt+0x42f8>
   18ae0:	mov	r0, #256	; 0x100
   18ae4:	stm	r7, {r0, r9}
   18ae8:	cmp	r4, r7
   18aec:	beq	18afc <__assert_fail@plt+0x74c0>
   18af0:	mov	r0, r4
   18af4:	bl	15934 <__assert_fail@plt+0x42f8>
   18af8:	str	r7, [r8]
   18afc:	mov	r0, #1
   18b00:	str	r0, [r5]
   18b04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18b08:	movw	r3, #58032	; 0xe2b0
   18b0c:	movt	r3, #2
   18b10:	mvn	r2, #0
   18b14:	b	18b18 <__assert_fail@plt+0x74dc>
   18b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b1c:	add	fp, sp, #28
   18b20:	sub	sp, sp, #44	; 0x2c
   18b24:	mov	r7, r3
   18b28:	str	r2, [sp, #36]	; 0x24
   18b2c:	str	r1, [sp, #32]
   18b30:	mov	r5, r0
   18b34:	bl	1151c <__errno_location@plt>
   18b38:	cmp	r5, #0
   18b3c:	bmi	18cac <__assert_fail@plt+0x7670>
   18b40:	cmn	r5, #-2147483647	; 0x80000001
   18b44:	beq	18cac <__assert_fail@plt+0x7670>
   18b48:	movw	r4, #57728	; 0xe180
   18b4c:	movt	r4, #2
   18b50:	ldr	r6, [r4]
   18b54:	str	r0, [sp, #28]
   18b58:	ldr	r0, [r0]
   18b5c:	str	r0, [sp, #24]
   18b60:	movw	r8, #57732	; 0xe184
   18b64:	movt	r8, #2
   18b68:	ldr	r1, [r8]
   18b6c:	cmp	r1, r5
   18b70:	ble	18b7c <__assert_fail@plt+0x7540>
   18b74:	mov	sl, r6
   18b78:	b	18be8 <__assert_fail@plt+0x75ac>
   18b7c:	str	r1, [fp, #-32]	; 0xffffffe0
   18b80:	mov	r0, #8
   18b84:	str	r0, [sp]
   18b88:	movw	r9, #57736	; 0xe188
   18b8c:	movt	r9, #2
   18b90:	subs	r0, r6, r9
   18b94:	movne	r0, r6
   18b98:	sub	r1, r5, r1
   18b9c:	add	r2, r1, #1
   18ba0:	sub	r1, fp, #32
   18ba4:	mvn	r3, #-2147483648	; 0x80000000
   18ba8:	bl	19f18 <__assert_fail@plt+0x88dc>
   18bac:	mov	sl, r0
   18bb0:	str	r0, [r4]
   18bb4:	cmp	r6, r9
   18bb8:	bne	18bc4 <__assert_fail@plt+0x7588>
   18bbc:	ldrd	r0, [r9]
   18bc0:	stm	sl, {r0, r1}
   18bc4:	ldr	r1, [r8]
   18bc8:	add	r0, sl, r1, lsl #3
   18bcc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18bd0:	sub	r1, r2, r1
   18bd4:	lsl	r2, r1, #3
   18bd8:	mov	r1, #0
   18bdc:	bl	11540 <memset@plt>
   18be0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18be4:	str	r0, [r8]
   18be8:	mov	r9, sl
   18bec:	ldr	r6, [r9, r5, lsl #3]!
   18bf0:	ldr	r4, [r9, #4]!
   18bf4:	ldm	r7, {r0, r1}
   18bf8:	ldr	r2, [r7, #40]	; 0x28
   18bfc:	ldr	r3, [r7, #44]	; 0x2c
   18c00:	orr	r8, r1, #1
   18c04:	add	r1, r7, #8
   18c08:	stm	sp, {r0, r8}
   18c0c:	str	r1, [sp, #20]
   18c10:	add	r0, sp, #8
   18c14:	stm	r0, {r1, r2, r3}
   18c18:	mov	r0, r4
   18c1c:	mov	r1, r6
   18c20:	ldr	r2, [sp, #32]
   18c24:	ldr	r3, [sp, #36]	; 0x24
   18c28:	bl	179c4 <__assert_fail@plt+0x6388>
   18c2c:	cmp	r6, r0
   18c30:	bhi	18c94 <__assert_fail@plt+0x7658>
   18c34:	add	r6, r0, #1
   18c38:	str	r6, [sl, r5, lsl #3]
   18c3c:	movw	r0, #58080	; 0xe2e0
   18c40:	movt	r0, #2
   18c44:	cmp	r4, r0
   18c48:	beq	18c54 <__assert_fail@plt+0x7618>
   18c4c:	mov	r0, r4
   18c50:	bl	15934 <__assert_fail@plt+0x42f8>
   18c54:	mov	r0, r6
   18c58:	bl	19e3c <__assert_fail@plt+0x8800>
   18c5c:	mov	r4, r0
   18c60:	str	r0, [r9]
   18c64:	ldr	r0, [r7]
   18c68:	ldr	r1, [r7, #40]	; 0x28
   18c6c:	ldr	r2, [r7, #44]	; 0x2c
   18c70:	stm	sp, {r0, r8}
   18c74:	ldr	r0, [sp, #20]
   18c78:	add	r3, sp, #8
   18c7c:	stm	r3, {r0, r1, r2}
   18c80:	mov	r0, r4
   18c84:	mov	r1, r6
   18c88:	ldr	r2, [sp, #32]
   18c8c:	ldr	r3, [sp, #36]	; 0x24
   18c90:	bl	179c4 <__assert_fail@plt+0x6388>
   18c94:	ldr	r0, [sp, #28]
   18c98:	ldr	r1, [sp, #24]
   18c9c:	str	r1, [r0]
   18ca0:	mov	r0, r4
   18ca4:	sub	sp, fp, #28
   18ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cac:	bl	11618 <abort@plt>
   18cb0:	movw	r3, #58032	; 0xe2b0
   18cb4:	movt	r3, #2
   18cb8:	b	18b18 <__assert_fail@plt+0x74dc>
   18cbc:	mov	r1, r0
   18cc0:	mov	r0, #0
   18cc4:	b	18b08 <__assert_fail@plt+0x74cc>
   18cc8:	mov	r2, r1
   18ccc:	mov	r1, r0
   18cd0:	mov	r0, #0
   18cd4:	b	18cb0 <__assert_fail@plt+0x7674>
   18cd8:	push	{r4, r5, r6, sl, fp, lr}
   18cdc:	add	fp, sp, #16
   18ce0:	sub	sp, sp, #48	; 0x30
   18ce4:	mov	r4, r2
   18ce8:	mov	r5, r0
   18cec:	mov	r6, sp
   18cf0:	mov	r0, r6
   18cf4:	bl	18d14 <__assert_fail@plt+0x76d8>
   18cf8:	mov	r0, r5
   18cfc:	mov	r1, r4
   18d00:	mvn	r2, #0
   18d04:	mov	r3, r6
   18d08:	bl	18b18 <__assert_fail@plt+0x74dc>
   18d0c:	sub	sp, fp, #16
   18d10:	pop	{r4, r5, r6, sl, fp, pc}
   18d14:	push	{fp, lr}
   18d18:	mov	fp, sp
   18d1c:	vmov.i32	q8, #0	; 0x00000000
   18d20:	mov	r2, #32
   18d24:	mov	r3, r0
   18d28:	vst1.32	{d16-d17}, [r3], r2
   18d2c:	vst1.32	{d16-d17}, [r3]
   18d30:	add	r2, r0, #16
   18d34:	vst1.32	{d16-d17}, [r2]
   18d38:	cmp	r1, #10
   18d3c:	strne	r1, [r0]
   18d40:	popne	{fp, pc}
   18d44:	bl	11618 <abort@plt>
   18d48:	push	{r4, r5, r6, r7, fp, lr}
   18d4c:	add	fp, sp, #16
   18d50:	sub	sp, sp, #48	; 0x30
   18d54:	mov	r4, r3
   18d58:	mov	r5, r2
   18d5c:	mov	r6, r0
   18d60:	mov	r7, sp
   18d64:	mov	r0, r7
   18d68:	bl	18d14 <__assert_fail@plt+0x76d8>
   18d6c:	mov	r0, r6
   18d70:	mov	r1, r5
   18d74:	mov	r2, r4
   18d78:	mov	r3, r7
   18d7c:	bl	18b18 <__assert_fail@plt+0x74dc>
   18d80:	sub	sp, fp, #16
   18d84:	pop	{r4, r5, r6, r7, fp, pc}
   18d88:	mov	r2, r1
   18d8c:	mov	r1, r0
   18d90:	mov	r0, #0
   18d94:	b	18cd8 <__assert_fail@plt+0x769c>
   18d98:	mov	r3, r2
   18d9c:	mov	r2, r1
   18da0:	mov	r1, r0
   18da4:	mov	r0, #0
   18da8:	b	18d48 <__assert_fail@plt+0x770c>
   18dac:	push	{r4, r5, r6, sl, fp, lr}
   18db0:	add	fp, sp, #16
   18db4:	sub	sp, sp, #48	; 0x30
   18db8:	mov	r4, r1
   18dbc:	mov	r5, r0
   18dc0:	movw	r0, #58032	; 0xe2b0
   18dc4:	movt	r0, #2
   18dc8:	add	r1, r0, #16
   18dcc:	mov	r3, #32
   18dd0:	vld1.64	{d16-d17}, [r0], r3
   18dd4:	vld1.64	{d18-d19}, [r1]
   18dd8:	mov	r6, sp
   18ddc:	add	r1, r6, #16
   18de0:	vld1.64	{d20-d21}, [r0]
   18de4:	vst1.64	{d18-d19}, [r1]
   18de8:	mov	r0, r6
   18dec:	vst1.64	{d16-d17}, [r0], r3
   18df0:	vst1.64	{d20-d21}, [r0]
   18df4:	mov	r0, r6
   18df8:	mov	r1, r2
   18dfc:	mov	r2, #1
   18e00:	bl	178b8 <__assert_fail@plt+0x627c>
   18e04:	mov	r0, #0
   18e08:	mov	r1, r5
   18e0c:	mov	r2, r4
   18e10:	mov	r3, r6
   18e14:	bl	18b18 <__assert_fail@plt+0x74dc>
   18e18:	sub	sp, fp, #16
   18e1c:	pop	{r4, r5, r6, sl, fp, pc}
   18e20:	mov	r2, r1
   18e24:	mvn	r1, #0
   18e28:	b	18dac <__assert_fail@plt+0x7770>
   18e2c:	mov	r1, #58	; 0x3a
   18e30:	b	18e20 <__assert_fail@plt+0x77e4>
   18e34:	mov	r2, #58	; 0x3a
   18e38:	b	18dac <__assert_fail@plt+0x7770>
   18e3c:	push	{r4, r5, r6, sl, fp, lr}
   18e40:	add	fp, sp, #16
   18e44:	sub	sp, sp, #48	; 0x30
   18e48:	mov	r4, r2
   18e4c:	mov	r5, r0
   18e50:	mov	r6, sp
   18e54:	mov	r0, r6
   18e58:	bl	18d14 <__assert_fail@plt+0x76d8>
   18e5c:	mov	r0, r6
   18e60:	mov	r1, #58	; 0x3a
   18e64:	mov	r2, #1
   18e68:	bl	178b8 <__assert_fail@plt+0x627c>
   18e6c:	mov	r0, r5
   18e70:	mov	r1, r4
   18e74:	mvn	r2, #0
   18e78:	mov	r3, r6
   18e7c:	bl	18b18 <__assert_fail@plt+0x74dc>
   18e80:	sub	sp, fp, #16
   18e84:	pop	{r4, r5, r6, sl, fp, pc}
   18e88:	push	{fp, lr}
   18e8c:	mov	fp, sp
   18e90:	sub	sp, sp, #8
   18e94:	mvn	ip, #0
   18e98:	str	ip, [sp]
   18e9c:	bl	18ea8 <__assert_fail@plt+0x786c>
   18ea0:	mov	sp, fp
   18ea4:	pop	{fp, pc}
   18ea8:	push	{r4, r5, r6, r7, fp, lr}
   18eac:	add	fp, sp, #16
   18eb0:	sub	sp, sp, #48	; 0x30
   18eb4:	mov	r7, r3
   18eb8:	mov	r5, r0
   18ebc:	movw	r0, #58032	; 0xe2b0
   18ec0:	movt	r0, #2
   18ec4:	add	r3, r0, #16
   18ec8:	mov	r4, #32
   18ecc:	vld1.64	{d16-d17}, [r0], r4
   18ed0:	vld1.64	{d18-d19}, [r3]
   18ed4:	mov	r6, sp
   18ed8:	add	r3, r6, #16
   18edc:	vld1.64	{d20-d21}, [r0]
   18ee0:	vst1.64	{d18-d19}, [r3]
   18ee4:	mov	r0, r6
   18ee8:	vst1.64	{d16-d17}, [r0], r4
   18eec:	vst1.64	{d20-d21}, [r0]
   18ef0:	mov	r0, r6
   18ef4:	bl	17910 <__assert_fail@plt+0x62d4>
   18ef8:	ldr	r2, [fp, #8]
   18efc:	mov	r0, r5
   18f00:	mov	r1, r7
   18f04:	mov	r3, r6
   18f08:	bl	18b18 <__assert_fail@plt+0x74dc>
   18f0c:	sub	sp, fp, #16
   18f10:	pop	{r4, r5, r6, r7, fp, pc}
   18f14:	mov	r3, r2
   18f18:	mov	r2, r1
   18f1c:	mov	r1, r0
   18f20:	mov	r0, #0
   18f24:	b	18e88 <__assert_fail@plt+0x784c>
   18f28:	push	{fp, lr}
   18f2c:	mov	fp, sp
   18f30:	sub	sp, sp, #8
   18f34:	mov	ip, r2
   18f38:	mov	r2, r1
   18f3c:	mov	r1, r0
   18f40:	str	r3, [sp]
   18f44:	mov	r0, #0
   18f48:	mov	r3, ip
   18f4c:	bl	18ea8 <__assert_fail@plt+0x786c>
   18f50:	mov	sp, fp
   18f54:	pop	{fp, pc}
   18f58:	movw	r3, #57744	; 0xe190
   18f5c:	movt	r3, #2
   18f60:	b	18b18 <__assert_fail@plt+0x74dc>
   18f64:	mov	r2, r1
   18f68:	mov	r1, r0
   18f6c:	mov	r0, #0
   18f70:	b	18f58 <__assert_fail@plt+0x791c>
   18f74:	mvn	r2, #0
   18f78:	b	18f58 <__assert_fail@plt+0x791c>
   18f7c:	mov	r1, r0
   18f80:	mov	r0, #0
   18f84:	b	18f74 <__assert_fail@plt+0x7938>
   18f88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f8c:	add	fp, sp, #24
   18f90:	sub	sp, sp, #16
   18f94:	mov	r4, r1
   18f98:	mov	r5, r0
   18f9c:	mov	r7, #0
   18fa0:	mov	r0, #0
   18fa4:	mov	r1, r5
   18fa8:	mov	r2, #5
   18fac:	bl	113a8 <dcgettext@plt>
   18fb0:	cmp	r0, r5
   18fb4:	beq	18fc0 <__assert_fail@plt+0x7984>
   18fb8:	sub	sp, fp, #24
   18fbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18fc0:	bl	1ba54 <__assert_fail@plt+0xa418>
   18fc4:	mov	r6, r0
   18fc8:	mov	r8, #56	; 0x38
   18fcc:	mov	r0, #45	; 0x2d
   18fd0:	stm	sp, {r0, r8}
   18fd4:	str	r7, [sp, #8]
   18fd8:	str	r7, [sp, #12]
   18fdc:	mov	r0, r6
   18fe0:	mov	r1, #85	; 0x55
   18fe4:	mov	r2, #84	; 0x54
   18fe8:	mov	r3, #70	; 0x46
   18fec:	bl	19084 <__assert_fail@plt+0x7a48>
   18ff0:	cmp	r0, #0
   18ff4:	beq	19010 <__assert_fail@plt+0x79d4>
   18ff8:	ldrb	r1, [r5]
   18ffc:	movw	r2, #54785	; 0xd601
   19000:	movt	r2, #1
   19004:	movw	r0, #54789	; 0xd605
   19008:	movt	r0, #1
   1900c:	b	19054 <__assert_fail@plt+0x7a18>
   19010:	mov	r0, #48	; 0x30
   19014:	mov	r1, #51	; 0x33
   19018:	str	r8, [sp]
   1901c:	stmib	sp, {r0, r1}
   19020:	str	r0, [sp, #12]
   19024:	mov	r0, r6
   19028:	mov	r1, #71	; 0x47
   1902c:	mov	r2, #66	; 0x42
   19030:	mov	r3, #49	; 0x31
   19034:	bl	19084 <__assert_fail@plt+0x7a48>
   19038:	cmp	r0, #0
   1903c:	beq	19064 <__assert_fail@plt+0x7a28>
   19040:	ldrb	r1, [r5]
   19044:	movw	r2, #54793	; 0xd609
   19048:	movt	r2, #1
   1904c:	movw	r0, #54797	; 0xd60d
   19050:	movt	r0, #1
   19054:	cmp	r1, #96	; 0x60
   19058:	moveq	r0, r2
   1905c:	sub	sp, fp, #24
   19060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19064:	movw	r1, #54781	; 0xd5fd
   19068:	movt	r1, #1
   1906c:	movw	r0, #55916	; 0xda6c
   19070:	movt	r0, #1
   19074:	cmp	r4, #9
   19078:	moveq	r0, r1
   1907c:	sub	sp, fp, #24
   19080:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19084:	push	{r4, r5, r6, r7, fp, lr}
   19088:	add	fp, sp, #16
   1908c:	sub	sp, sp, #16
   19090:	mov	r4, r3
   19094:	mov	r5, r2
   19098:	mov	r7, r1
   1909c:	mov	r6, r0
   190a0:	mov	r0, r1
   190a4:	bl	1b72c <__assert_fail@plt+0xa0f0>
   190a8:	ldrb	r1, [r6]
   190ac:	cmp	r0, #0
   190b0:	andne	r1, r1, #223	; 0xdf
   190b4:	mov	r0, #0
   190b8:	cmp	r1, r7
   190bc:	bne	190f4 <__assert_fail@plt+0x7ab8>
   190c0:	cmp	r7, #0
   190c4:	beq	190fc <__assert_fail@plt+0x7ac0>
   190c8:	ldr	r0, [fp, #20]
   190cc:	ldr	r1, [fp, #16]
   190d0:	ldr	r2, [fp, #12]
   190d4:	ldr	r3, [fp, #8]
   190d8:	str	r2, [sp]
   190dc:	str	r1, [sp, #4]
   190e0:	str	r0, [sp, #8]
   190e4:	mov	r0, r6
   190e8:	mov	r1, r5
   190ec:	mov	r2, r4
   190f0:	bl	19108 <__assert_fail@plt+0x7acc>
   190f4:	sub	sp, fp, #16
   190f8:	pop	{r4, r5, r6, r7, fp, pc}
   190fc:	mov	r0, #1
   19100:	sub	sp, fp, #16
   19104:	pop	{r4, r5, r6, r7, fp, pc}
   19108:	push	{r4, r5, r6, r7, fp, lr}
   1910c:	add	fp, sp, #16
   19110:	sub	sp, sp, #8
   19114:	mov	r4, r3
   19118:	mov	r5, r2
   1911c:	mov	r7, r1
   19120:	mov	r6, r0
   19124:	mov	r0, r1
   19128:	bl	1b72c <__assert_fail@plt+0xa0f0>
   1912c:	ldrb	r1, [r6, #1]
   19130:	cmp	r0, #0
   19134:	andne	r1, r1, #223	; 0xdf
   19138:	mov	r0, #0
   1913c:	cmp	r1, r7
   19140:	bne	19170 <__assert_fail@plt+0x7b34>
   19144:	cmp	r7, #0
   19148:	beq	19178 <__assert_fail@plt+0x7b3c>
   1914c:	ldr	r0, [fp, #16]
   19150:	ldr	r1, [fp, #12]
   19154:	ldr	r3, [fp, #8]
   19158:	str	r1, [sp]
   1915c:	str	r0, [sp, #4]
   19160:	mov	r0, r6
   19164:	mov	r1, r5
   19168:	mov	r2, r4
   1916c:	bl	19184 <__assert_fail@plt+0x7b48>
   19170:	sub	sp, fp, #16
   19174:	pop	{r4, r5, r6, r7, fp, pc}
   19178:	mov	r0, #1
   1917c:	sub	sp, fp, #16
   19180:	pop	{r4, r5, r6, r7, fp, pc}
   19184:	push	{r4, r5, r6, r7, fp, lr}
   19188:	add	fp, sp, #16
   1918c:	sub	sp, sp, #8
   19190:	mov	r4, r3
   19194:	mov	r5, r2
   19198:	mov	r7, r1
   1919c:	mov	r6, r0
   191a0:	mov	r0, r1
   191a4:	bl	1b72c <__assert_fail@plt+0xa0f0>
   191a8:	ldrb	r1, [r6, #2]
   191ac:	cmp	r0, #0
   191b0:	andne	r1, r1, #223	; 0xdf
   191b4:	mov	r0, #0
   191b8:	cmp	r1, r7
   191bc:	bne	191e4 <__assert_fail@plt+0x7ba8>
   191c0:	cmp	r7, #0
   191c4:	beq	191ec <__assert_fail@plt+0x7bb0>
   191c8:	ldr	r0, [fp, #12]
   191cc:	ldr	r3, [fp, #8]
   191d0:	str	r0, [sp]
   191d4:	mov	r0, r6
   191d8:	mov	r1, r5
   191dc:	mov	r2, r4
   191e0:	bl	191f8 <__assert_fail@plt+0x7bbc>
   191e4:	sub	sp, fp, #16
   191e8:	pop	{r4, r5, r6, r7, fp, pc}
   191ec:	mov	r0, #1
   191f0:	sub	sp, fp, #16
   191f4:	pop	{r4, r5, r6, r7, fp, pc}
   191f8:	push	{r4, r5, r6, r7, fp, lr}
   191fc:	add	fp, sp, #16
   19200:	mov	r4, r3
   19204:	mov	r5, r2
   19208:	mov	r7, r1
   1920c:	mov	r6, r0
   19210:	mov	r0, r1
   19214:	bl	1b72c <__assert_fail@plt+0xa0f0>
   19218:	ldrb	r1, [r6, #3]
   1921c:	ldr	r3, [fp, #8]
   19220:	cmp	r0, #0
   19224:	andne	r1, r1, #223	; 0xdf
   19228:	mov	r0, #0
   1922c:	cmp	r1, r7
   19230:	bne	19254 <__assert_fail@plt+0x7c18>
   19234:	cmp	r7, #0
   19238:	beq	19250 <__assert_fail@plt+0x7c14>
   1923c:	mov	r0, r6
   19240:	mov	r1, r5
   19244:	mov	r2, r4
   19248:	pop	{r4, r5, r6, r7, fp, lr}
   1924c:	b	19258 <__assert_fail@plt+0x7c1c>
   19250:	mov	r0, #1
   19254:	pop	{r4, r5, r6, r7, fp, pc}
   19258:	push	{r4, r5, r6, r7, fp, lr}
   1925c:	add	fp, sp, #16
   19260:	mov	r4, r3
   19264:	mov	r5, r2
   19268:	mov	r7, r1
   1926c:	mov	r6, r0
   19270:	mov	r0, r1
   19274:	bl	1b72c <__assert_fail@plt+0xa0f0>
   19278:	ldrb	r1, [r6, #4]
   1927c:	cmp	r0, #0
   19280:	andne	r1, r1, #223	; 0xdf
   19284:	mov	r0, #0
   19288:	cmp	r1, r7
   1928c:	bne	192b0 <__assert_fail@plt+0x7c74>
   19290:	cmp	r7, #0
   19294:	beq	192ac <__assert_fail@plt+0x7c70>
   19298:	mov	r0, r6
   1929c:	mov	r1, r5
   192a0:	mov	r2, r4
   192a4:	pop	{r4, r5, r6, r7, fp, lr}
   192a8:	b	192b4 <__assert_fail@plt+0x7c78>
   192ac:	mov	r0, #1
   192b0:	pop	{r4, r5, r6, r7, fp, pc}
   192b4:	push	{r4, r5, r6, sl, fp, lr}
   192b8:	add	fp, sp, #16
   192bc:	mov	r4, r2
   192c0:	mov	r6, r1
   192c4:	mov	r5, r0
   192c8:	mov	r0, r1
   192cc:	bl	1b72c <__assert_fail@plt+0xa0f0>
   192d0:	ldrb	r1, [r5, #5]
   192d4:	cmp	r0, #0
   192d8:	andne	r1, r1, #223	; 0xdf
   192dc:	mov	r0, #0
   192e0:	cmp	r1, r6
   192e4:	bne	19304 <__assert_fail@plt+0x7cc8>
   192e8:	cmp	r6, #0
   192ec:	beq	19300 <__assert_fail@plt+0x7cc4>
   192f0:	mov	r0, r5
   192f4:	mov	r1, r4
   192f8:	pop	{r4, r5, r6, sl, fp, lr}
   192fc:	b	19308 <__assert_fail@plt+0x7ccc>
   19300:	mov	r0, #1
   19304:	pop	{r4, r5, r6, sl, fp, pc}
   19308:	push	{r4, r5, fp, lr}
   1930c:	add	fp, sp, #8
   19310:	mov	r5, r1
   19314:	mov	r4, r0
   19318:	mov	r0, r1
   1931c:	bl	1b72c <__assert_fail@plt+0xa0f0>
   19320:	ldrb	r1, [r4, #6]
   19324:	cmp	r0, #0
   19328:	andne	r1, r1, #223	; 0xdf
   1932c:	mov	r0, #0
   19330:	cmp	r1, r5
   19334:	popne	{r4, r5, fp, pc}
   19338:	cmp	r5, #0
   1933c:	beq	1934c <__assert_fail@plt+0x7d10>
   19340:	mov	r0, r4
   19344:	pop	{r4, r5, fp, lr}
   19348:	b	19354 <__assert_fail@plt+0x7d18>
   1934c:	mov	r0, #1
   19350:	pop	{r4, r5, fp, pc}
   19354:	push	{r4, sl, fp, lr}
   19358:	add	fp, sp, #8
   1935c:	mov	r4, r0
   19360:	mov	r0, #0
   19364:	bl	1b72c <__assert_fail@plt+0xa0f0>
   19368:	ldrb	r1, [r4, #7]
   1936c:	cmp	r0, #0
   19370:	beq	19384 <__assert_fail@plt+0x7d48>
   19374:	tst	r1, #223	; 0xdf
   19378:	bne	1938c <__assert_fail@plt+0x7d50>
   1937c:	mov	r0, #1
   19380:	pop	{r4, sl, fp, pc}
   19384:	cmp	r1, #0
   19388:	beq	1937c <__assert_fail@plt+0x7d40>
   1938c:	mov	r0, #0
   19390:	pop	{r4, sl, fp, pc}
   19394:	b	19398 <__assert_fail@plt+0x7d5c>
   19398:	push	{r4, r5, r6, r7, fp, lr}
   1939c:	add	fp, sp, #16
   193a0:	mov	r6, r2
   193a4:	mov	r4, r1
   193a8:	bl	19430 <__assert_fail@plt+0x7df4>
   193ac:	cmp	r0, #0
   193b0:	beq	193e0 <__assert_fail@plt+0x7da4>
   193b4:	mov	r7, r0
   193b8:	bl	114ec <strlen@plt>
   193bc:	cmp	r0, r6
   193c0:	bcs	193fc <__assert_fail@plt+0x7dc0>
   193c4:	add	r2, r0, #1
   193c8:	mov	r0, r4
   193cc:	mov	r1, r7
   193d0:	bl	11384 <memcpy@plt>
   193d4:	mov	r5, #0
   193d8:	mov	r0, r5
   193dc:	pop	{r4, r5, r6, r7, fp, pc}
   193e0:	mov	r5, #22
   193e4:	cmp	r6, #0
   193e8:	beq	19424 <__assert_fail@plt+0x7de8>
   193ec:	mov	r0, #0
   193f0:	strb	r0, [r4]
   193f4:	mov	r0, r5
   193f8:	pop	{r4, r5, r6, r7, fp, pc}
   193fc:	mov	r5, #34	; 0x22
   19400:	cmp	r6, #0
   19404:	beq	19424 <__assert_fail@plt+0x7de8>
   19408:	sub	r6, r6, #1
   1940c:	mov	r0, r4
   19410:	mov	r1, r7
   19414:	mov	r2, r6
   19418:	bl	11384 <memcpy@plt>
   1941c:	mov	r0, #0
   19420:	strb	r0, [r4, r6]
   19424:	mov	r0, r5
   19428:	pop	{r4, r5, r6, r7, fp, pc}
   1942c:	b	19430 <__assert_fail@plt+0x7df4>
   19430:	mov	r1, #0
   19434:	b	115ac <setlocale@plt>
   19438:	ldr	r0, [r0, #76]	; 0x4c
   1943c:	bx	lr
   19440:	ldr	r0, [r0, #92]	; 0x5c
   19444:	bx	lr
   19448:	ldr	r0, [r0, #84]	; 0x54
   1944c:	bx	lr
   19450:	mov	r0, #0
   19454:	bx	lr
   19458:	ldrd	r2, [r1, #72]	; 0x48
   1945c:	stm	r0, {r2, r3}
   19460:	bx	lr
   19464:	ldrd	r2, [r1, #88]	; 0x58
   19468:	stm	r0, {r2, r3}
   1946c:	bx	lr
   19470:	ldrd	r2, [r1, #80]	; 0x50
   19474:	stm	r0, {r2, r3}
   19478:	bx	lr
   1947c:	mvn	r1, #0
   19480:	str	r1, [r0]
   19484:	str	r1, [r0, #4]
   19488:	bx	lr
   1948c:	bx	lr
   19490:	push	{r4, r5, r6, sl, fp, lr}
   19494:	add	fp, sp, #16
   19498:	mov	r4, r0
   1949c:	cmp	r0, #0
   194a0:	beq	194c4 <__assert_fail@plt+0x7e88>
   194a4:	mov	r0, r4
   194a8:	bl	114ec <strlen@plt>
   194ac:	add	r5, r0, #1
   194b0:	cmp	r5, #58	; 0x3a
   194b4:	bls	194c8 <__assert_fail@plt+0x7e8c>
   194b8:	add	r0, r0, #10
   194bc:	bic	r0, r0, #3
   194c0:	b	194cc <__assert_fail@plt+0x7e90>
   194c4:	mov	r5, #0
   194c8:	mov	r0, #64	; 0x40
   194cc:	bl	1b3f4 <__assert_fail@plt+0x9db8>
   194d0:	mov	r6, r0
   194d4:	cmp	r0, #0
   194d8:	beq	19508 <__assert_fail@plt+0x7ecc>
   194dc:	mov	r1, #0
   194e0:	str	r1, [r6]
   194e4:	cmp	r4, #0
   194e8:	mov	r0, r4
   194ec:	movwne	r0, #1
   194f0:	strb	r0, [r6, #4]
   194f4:	mov	r0, r6
   194f8:	strb	r1, [r0, #5]!
   194fc:	movne	r1, r4
   19500:	movne	r2, r5
   19504:	blne	19510 <__assert_fail@plt+0x7ed4>
   19508:	mov	r0, r6
   1950c:	pop	{r4, r5, r6, sl, fp, pc}
   19510:	push	{r4, r5, fp, lr}
   19514:	add	fp, sp, #8
   19518:	mov	r4, r2
   1951c:	mov	r5, r0
   19520:	bl	11384 <memcpy@plt>
   19524:	mov	r0, #0
   19528:	strb	r0, [r5, r4]
   1952c:	pop	{r4, r5, fp, pc}
   19530:	push	{r4, sl, fp, lr}
   19534:	add	fp, sp, #8
   19538:	cmp	r0, #2
   1953c:	popcc	{r4, sl, fp, pc}
   19540:	ldr	r4, [r0]
   19544:	bl	15934 <__assert_fail@plt+0x42f8>
   19548:	cmp	r4, #0
   1954c:	mov	r0, r4
   19550:	bne	19540 <__assert_fail@plt+0x7f04>
   19554:	pop	{r4, sl, fp, pc}
   19558:	push	{r4, r5, r6, r7, fp, lr}
   1955c:	add	fp, sp, #16
   19560:	mov	r4, r2
   19564:	mov	r7, r1
   19568:	cmp	r0, #0
   1956c:	beq	195ac <__assert_fail@plt+0x7f70>
   19570:	mov	r6, r0
   19574:	bl	195e4 <__assert_fail@plt+0x7fa8>
   19578:	cmp	r0, #0
   1957c:	beq	195bc <__assert_fail@plt+0x7f80>
   19580:	mov	r5, r0
   19584:	mov	r0, r7
   19588:	mov	r1, r4
   1958c:	bl	113c0 <localtime_r@plt>
   19590:	cmp	r0, #0
   19594:	beq	195c4 <__assert_fail@plt+0x7f88>
   19598:	mov	r0, r6
   1959c:	mov	r1, r4
   195a0:	bl	1967c <__assert_fail@plt+0x8040>
   195a4:	eor	r6, r0, #1
   195a8:	b	195c8 <__assert_fail@plt+0x7f8c>
   195ac:	mov	r0, r7
   195b0:	mov	r1, r4
   195b4:	pop	{r4, r5, r6, r7, fp, lr}
   195b8:	b	1130c <gmtime_r@plt>
   195bc:	mov	r0, #0
   195c0:	pop	{r4, r5, r6, r7, fp, pc}
   195c4:	mov	r6, #1
   195c8:	mov	r0, r5
   195cc:	bl	19794 <__assert_fail@plt+0x8158>
   195d0:	cmp	r0, #0
   195d4:	movne	r0, r4
   195d8:	cmp	r6, #0
   195dc:	movwne	r0, #0
   195e0:	pop	{r4, r5, r6, r7, fp, pc}
   195e4:	push	{r4, r5, r6, r7, fp, lr}
   195e8:	add	fp, sp, #16
   195ec:	mov	r4, r0
   195f0:	bl	198c0 <__assert_fail@plt+0x8284>
   195f4:	mov	r5, r0
   195f8:	ldrb	r0, [r4, #4]
   195fc:	cmp	r5, #0
   19600:	beq	19618 <__assert_fail@plt+0x7fdc>
   19604:	cmp	r0, #0
   19608:	beq	19620 <__assert_fail@plt+0x7fe4>
   1960c:	add	r0, r4, #5
   19610:	mov	r1, r5
   19614:	bl	11318 <strcmp@plt>
   19618:	cmp	r0, #0
   1961c:	beq	19650 <__assert_fail@plt+0x8014>
   19620:	mov	r0, r5
   19624:	bl	19490 <__assert_fail@plt+0x7e54>
   19628:	mov	r5, #0
   1962c:	cmp	r0, #0
   19630:	beq	19674 <__assert_fail@plt+0x8038>
   19634:	mov	r6, r0
   19638:	mov	r0, r4
   1963c:	bl	198cc <__assert_fail@plt+0x8290>
   19640:	cmp	r0, #0
   19644:	beq	1965c <__assert_fail@plt+0x8020>
   19648:	mov	r0, r6
   1964c:	pop	{r4, r5, r6, r7, fp, pc}
   19650:	mov	r5, #1
   19654:	mov	r0, r5
   19658:	pop	{r4, r5, r6, r7, fp, pc}
   1965c:	bl	1151c <__errno_location@plt>
   19660:	mov	r4, r0
   19664:	ldr	r7, [r0]
   19668:	mov	r0, r6
   1966c:	bl	19530 <__assert_fail@plt+0x7ef4>
   19670:	str	r7, [r4]
   19674:	mov	r0, r5
   19678:	pop	{r4, r5, r6, r7, fp, pc}
   1967c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19680:	add	fp, sp, #24
   19684:	ldr	r7, [r1, #40]	; 0x28
   19688:	mov	r8, #1
   1968c:	cmp	r7, #0
   19690:	beq	19730 <__assert_fail@plt+0x80f4>
   19694:	mov	r5, r1
   19698:	mov	r6, r0
   1969c:	cmp	r7, r1
   196a0:	bcc	196b0 <__assert_fail@plt+0x8074>
   196a4:	add	r0, r5, #44	; 0x2c
   196a8:	cmp	r7, r0
   196ac:	bcc	19730 <__assert_fail@plt+0x80f4>
   196b0:	ldrb	r0, [r7]
   196b4:	cmp	r0, #0
   196b8:	beq	19724 <__assert_fail@plt+0x80e8>
   196bc:	add	r4, r6, #5
   196c0:	mov	r0, r4
   196c4:	mov	r1, r7
   196c8:	bl	11318 <strcmp@plt>
   196cc:	cmp	r0, #0
   196d0:	beq	1972c <__assert_fail@plt+0x80f0>
   196d4:	ldrb	r0, [r4]
   196d8:	cmp	r0, #0
   196dc:	bne	196f8 <__assert_fail@plt+0x80bc>
   196e0:	add	r0, r6, #5
   196e4:	cmp	r4, r0
   196e8:	bne	19738 <__assert_fail@plt+0x80fc>
   196ec:	ldrb	r0, [r6, #4]
   196f0:	cmp	r0, #0
   196f4:	beq	19738 <__assert_fail@plt+0x80fc>
   196f8:	mov	r0, r4
   196fc:	bl	114ec <strlen@plt>
   19700:	add	r4, r0, r4
   19704:	ldrb	r0, [r4, #1]!
   19708:	cmp	r0, #0
   1970c:	bne	196c0 <__assert_fail@plt+0x8084>
   19710:	ldr	r0, [r6]
   19714:	cmp	r0, #0
   19718:	addne	r4, r0, #5
   1971c:	movne	r6, r0
   19720:	b	196c0 <__assert_fail@plt+0x8084>
   19724:	movw	r4, #53460	; 0xd0d4
   19728:	movt	r4, #1
   1972c:	str	r4, [r5, #40]	; 0x28
   19730:	mov	r0, r8
   19734:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19738:	sub	r0, r6, r4
   1973c:	add	r9, r0, #64	; 0x40
   19740:	mov	r0, r7
   19744:	bl	114ec <strlen@plt>
   19748:	add	r2, r0, #1
   1974c:	cmp	r2, r9
   19750:	bge	19764 <__assert_fail@plt+0x8128>
   19754:	mov	r0, r4
   19758:	mov	r1, r7
   1975c:	bl	19510 <__assert_fail@plt+0x7ed4>
   19760:	b	1972c <__assert_fail@plt+0x80f0>
   19764:	mov	r0, r7
   19768:	bl	19490 <__assert_fail@plt+0x7e54>
   1976c:	str	r0, [r6]
   19770:	cmp	r0, #0
   19774:	beq	19788 <__assert_fail@plt+0x814c>
   19778:	mov	r1, #0
   1977c:	strb	r1, [r0, #4]
   19780:	add	r4, r0, #5
   19784:	b	1972c <__assert_fail@plt+0x80f0>
   19788:	mov	r8, #0
   1978c:	mov	r0, r8
   19790:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19794:	push	{r4, r5, r6, r7, fp, lr}
   19798:	add	fp, sp, #16
   1979c:	cmp	r0, #1
   197a0:	beq	197dc <__assert_fail@plt+0x81a0>
   197a4:	mov	r4, r0
   197a8:	bl	1151c <__errno_location@plt>
   197ac:	mov	r6, r0
   197b0:	ldr	r7, [r0]
   197b4:	mov	r0, r4
   197b8:	bl	198cc <__assert_fail@plt+0x8290>
   197bc:	mov	r5, r0
   197c0:	cmp	r0, #0
   197c4:	ldreq	r7, [r6]
   197c8:	mov	r0, r4
   197cc:	bl	19530 <__assert_fail@plt+0x7ef4>
   197d0:	str	r7, [r6]
   197d4:	mov	r0, r5
   197d8:	pop	{r4, r5, r6, r7, fp, pc}
   197dc:	mov	r5, #1
   197e0:	mov	r0, r5
   197e4:	pop	{r4, r5, r6, r7, fp, pc}
   197e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   197ec:	add	fp, sp, #24
   197f0:	sub	sp, sp, #48	; 0x30
   197f4:	mov	r4, r1
   197f8:	cmp	r0, #0
   197fc:	beq	19898 <__assert_fail@plt+0x825c>
   19800:	mov	r6, r0
   19804:	bl	195e4 <__assert_fail@plt+0x7fa8>
   19808:	cmp	r0, #0
   1980c:	beq	198b0 <__assert_fail@plt+0x8274>
   19810:	mov	r7, r0
   19814:	ldm	r4, {r0, r1, r2, r3, r5, ip}
   19818:	stm	sp, {r0, r1, r2, r3, r5}
   1981c:	mvn	r0, #0
   19820:	str	r0, [sp, #28]
   19824:	str	ip, [sp, #20]
   19828:	ldr	r0, [r4, #32]
   1982c:	str	r0, [sp, #32]
   19830:	mov	r0, sp
   19834:	bl	1133c <mktime@plt>
   19838:	mov	r5, r0
   1983c:	ldr	r0, [sp, #28]
   19840:	cmn	r0, #1
   19844:	ble	198a8 <__assert_fail@plt+0x826c>
   19848:	mov	r8, sp
   1984c:	mov	r0, r6
   19850:	mov	r1, r8
   19854:	bl	1967c <__assert_fail@plt+0x8040>
   19858:	mov	r6, r0
   1985c:	mov	r0, r7
   19860:	bl	19794 <__assert_fail@plt+0x8158>
   19864:	cmp	r6, #0
   19868:	cmpne	r0, #0
   1986c:	beq	198b0 <__assert_fail@plt+0x8274>
   19870:	mov	r0, #28
   19874:	add	r1, r8, #16
   19878:	vld1.32	{d16-d17}, [r8], r0
   1987c:	vld1.64	{d18-d19}, [r1]
   19880:	add	r1, r4, #16
   19884:	vld1.32	{d20-d21}, [r8]
   19888:	vst1.32	{d18-d19}, [r1]
   1988c:	vst1.32	{d16-d17}, [r4], r0
   19890:	vst1.32	{d20-d21}, [r4]
   19894:	b	198b4 <__assert_fail@plt+0x8278>
   19898:	mov	r0, r4
   1989c:	sub	sp, fp, #24
   198a0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   198a4:	b	115d0 <timegm@plt>
   198a8:	mov	r0, r7
   198ac:	bl	19794 <__assert_fail@plt+0x8158>
   198b0:	mvn	r5, #0
   198b4:	mov	r0, r5
   198b8:	sub	sp, fp, #24
   198bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   198c0:	movw	r0, #49043	; 0xbf93
   198c4:	movt	r0, #1
   198c8:	b	1145c <getenv@plt>
   198cc:	push	{fp, lr}
   198d0:	mov	fp, sp
   198d4:	ldrb	r1, [r0, #4]
   198d8:	cmp	r1, #0
   198dc:	addne	r1, r0, #5
   198e0:	mov	r0, r1
   198e4:	bl	19904 <__assert_fail@plt+0x82c8>
   198e8:	mov	r1, r0
   198ec:	mov	r0, #0
   198f0:	cmp	r1, #0
   198f4:	popne	{fp, pc}
   198f8:	bl	113f0 <tzset@plt>
   198fc:	mov	r0, #1
   19900:	pop	{fp, pc}
   19904:	cmp	r0, #0
   19908:	beq	19920 <__assert_fail@plt+0x82e4>
   1990c:	mov	r1, r0
   19910:	movw	r0, #49043	; 0xbf93
   19914:	movt	r0, #1
   19918:	mov	r2, #1
   1991c:	b	11504 <setenv@plt>
   19920:	movw	r0, #49043	; 0xbf93
   19924:	movt	r0, #1
   19928:	b	11600 <unsetenv@plt>
   1992c:	mov	r1, #0
   19930:	mov	r2, #3
   19934:	b	1b820 <__assert_fail@plt+0xa1e4>
   19938:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1993c:	add	fp, sp, #24
   19940:	sub	sp, sp, #32
   19944:	mov	r4, r2
   19948:	mov	r8, r0
   1994c:	ldr	r6, [fp, #12]
   19950:	ldr	r7, [fp, #8]
   19954:	cmp	r1, #0
   19958:	beq	19980 <__assert_fail@plt+0x8344>
   1995c:	mov	r5, r1
   19960:	str	r4, [sp]
   19964:	str	r3, [sp, #4]
   19968:	movw	r2, #54884	; 0xd664
   1996c:	movt	r2, #1
   19970:	mov	r0, r8
   19974:	mov	r1, #1
   19978:	mov	r3, r5
   1997c:	b	19998 <__assert_fail@plt+0x835c>
   19980:	str	r3, [sp]
   19984:	movw	r2, #54896	; 0xd670
   19988:	movt	r2, #1
   1998c:	mov	r0, r8
   19990:	mov	r1, #1
   19994:	mov	r3, r4
   19998:	bl	11570 <__fprintf_chk@plt>
   1999c:	movw	r1, #54903	; 0xd677
   199a0:	movt	r1, #1
   199a4:	mov	r0, #0
   199a8:	mov	r2, #5
   199ac:	bl	113a8 <dcgettext@plt>
   199b0:	mov	r3, r0
   199b4:	movw	r0, #2022	; 0x7e6
   199b8:	str	r0, [sp]
   199bc:	movw	r2, #55621	; 0xd945
   199c0:	movt	r2, #1
   199c4:	mov	r0, r8
   199c8:	mov	r1, #1
   199cc:	bl	11570 <__fprintf_chk@plt>
   199d0:	movw	r4, #53571	; 0xd143
   199d4:	movt	r4, #1
   199d8:	mov	r0, r4
   199dc:	mov	r1, r8
   199e0:	bl	112f4 <fputs_unlocked@plt>
   199e4:	movw	r1, #54907	; 0xd67b
   199e8:	movt	r1, #1
   199ec:	mov	r0, #0
   199f0:	mov	r2, #5
   199f4:	bl	113a8 <dcgettext@plt>
   199f8:	mov	r2, r0
   199fc:	movw	r3, #55078	; 0xd726
   19a00:	movt	r3, #1
   19a04:	mov	r0, r8
   19a08:	mov	r1, #1
   19a0c:	bl	11570 <__fprintf_chk@plt>
   19a10:	mov	r0, r4
   19a14:	mov	r1, r8
   19a18:	bl	112f4 <fputs_unlocked@plt>
   19a1c:	cmp	r6, #9
   19a20:	bhi	19a5c <__assert_fail@plt+0x8420>
   19a24:	add	r0, pc, #0
   19a28:	ldr	pc, [r0, r6, lsl #2]
   19a2c:	andeq	r9, r1, r4, asr sl
   19a30:	andeq	r9, r1, r8, ror #20
   19a34:	muleq	r1, r8, sl
   19a38:	andeq	r9, r1, r0, asr #21
   19a3c:	andeq	r9, r1, r8, ror #21
   19a40:	andeq	r9, r1, r0, lsl fp
   19a44:	andeq	r9, r1, r8, lsr fp
   19a48:	andeq	r9, r1, r0, ror fp
   19a4c:	andeq	r9, r1, r0, lsl ip
   19a50:			; <UNDEFINED> instruction: 0x00019bb8
   19a54:	sub	sp, fp, #24
   19a58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a5c:	movw	r1, #55431	; 0xd887
   19a60:	movt	r1, #1
   19a64:	b	19bc0 <__assert_fail@plt+0x8584>
   19a68:	movw	r1, #55112	; 0xd748
   19a6c:	movt	r1, #1
   19a70:	mov	r0, #0
   19a74:	mov	r2, #5
   19a78:	bl	113a8 <dcgettext@plt>
   19a7c:	mov	r2, r0
   19a80:	ldr	r3, [r7]
   19a84:	mov	r0, r8
   19a88:	mov	r1, #1
   19a8c:	sub	sp, fp, #24
   19a90:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a94:	b	11570 <__fprintf_chk@plt>
   19a98:	movw	r1, #55128	; 0xd758
   19a9c:	movt	r1, #1
   19aa0:	mov	r0, #0
   19aa4:	mov	r2, #5
   19aa8:	bl	113a8 <dcgettext@plt>
   19aac:	mov	r2, r0
   19ab0:	ldr	r3, [r7]
   19ab4:	ldr	r0, [r7, #4]
   19ab8:	str	r0, [sp]
   19abc:	b	19bac <__assert_fail@plt+0x8570>
   19ac0:	movw	r1, #55151	; 0xd76f
   19ac4:	movt	r1, #1
   19ac8:	mov	r0, #0
   19acc:	mov	r2, #5
   19ad0:	bl	113a8 <dcgettext@plt>
   19ad4:	mov	r2, r0
   19ad8:	ldr	r3, [r7]
   19adc:	ldmib	r7, {r0, r1}
   19ae0:	stm	sp, {r0, r1}
   19ae4:	b	19bac <__assert_fail@plt+0x8570>
   19ae8:	movw	r1, #55179	; 0xd78b
   19aec:	movt	r1, #1
   19af0:	mov	r0, #0
   19af4:	mov	r2, #5
   19af8:	bl	113a8 <dcgettext@plt>
   19afc:	mov	r2, r0
   19b00:	ldr	r3, [r7]
   19b04:	ldmib	r7, {r0, r1, r7}
   19b08:	stm	sp, {r0, r1, r7}
   19b0c:	b	19bac <__assert_fail@plt+0x8570>
   19b10:	movw	r1, #55211	; 0xd7ab
   19b14:	movt	r1, #1
   19b18:	mov	r0, #0
   19b1c:	mov	r2, #5
   19b20:	bl	113a8 <dcgettext@plt>
   19b24:	mov	r2, r0
   19b28:	ldr	r3, [r7]
   19b2c:	ldmib	r7, {r0, r1, r6, r7}
   19b30:	stm	sp, {r0, r1, r6, r7}
   19b34:	b	19bac <__assert_fail@plt+0x8570>
   19b38:	movw	r1, #55247	; 0xd7cf
   19b3c:	movt	r1, #1
   19b40:	mov	r0, #0
   19b44:	mov	r2, #5
   19b48:	bl	113a8 <dcgettext@plt>
   19b4c:	mov	r2, r0
   19b50:	ldr	r3, [r7]
   19b54:	ldmib	r7, {r0, r1, r6}
   19b58:	ldr	r5, [r7, #16]
   19b5c:	ldr	r7, [r7, #20]
   19b60:	stm	sp, {r0, r1, r6}
   19b64:	str	r5, [sp, #12]
   19b68:	str	r7, [sp, #16]
   19b6c:	b	19bac <__assert_fail@plt+0x8570>
   19b70:	movw	r1, #55287	; 0xd7f7
   19b74:	movt	r1, #1
   19b78:	mov	r0, #0
   19b7c:	mov	r2, #5
   19b80:	bl	113a8 <dcgettext@plt>
   19b84:	mov	r2, r0
   19b88:	ldr	r3, [r7]
   19b8c:	ldmib	r7, {r0, r1, r6}
   19b90:	ldr	r5, [r7, #16]
   19b94:	ldr	r4, [r7, #20]
   19b98:	ldr	r7, [r7, #24]
   19b9c:	stm	sp, {r0, r1, r6}
   19ba0:	str	r5, [sp, #12]
   19ba4:	str	r4, [sp, #16]
   19ba8:	str	r7, [sp, #20]
   19bac:	mov	r0, r8
   19bb0:	mov	r1, #1
   19bb4:	b	19c60 <__assert_fail@plt+0x8624>
   19bb8:	movw	r1, #55379	; 0xd853
   19bbc:	movt	r1, #1
   19bc0:	mov	r0, #0
   19bc4:	mov	r2, #5
   19bc8:	bl	113a8 <dcgettext@plt>
   19bcc:	mov	ip, r0
   19bd0:	ldr	r3, [r7]
   19bd4:	ldr	r0, [r7, #4]
   19bd8:	ldr	r1, [r7, #8]
   19bdc:	ldr	r6, [r7, #12]
   19be0:	ldr	r5, [r7, #16]
   19be4:	ldr	r4, [r7, #20]
   19be8:	ldr	r2, [r7, #24]
   19bec:	ldr	lr, [r7, #28]
   19bf0:	ldr	r7, [r7, #32]
   19bf4:	stm	sp, {r0, r1, r6}
   19bf8:	str	r5, [sp, #12]
   19bfc:	str	r4, [sp, #16]
   19c00:	str	r2, [sp, #20]
   19c04:	str	lr, [sp, #24]
   19c08:	str	r7, [sp, #28]
   19c0c:	b	19c54 <__assert_fail@plt+0x8618>
   19c10:	movw	r1, #55331	; 0xd823
   19c14:	movt	r1, #1
   19c18:	mov	r0, #0
   19c1c:	mov	r2, #5
   19c20:	bl	113a8 <dcgettext@plt>
   19c24:	mov	ip, r0
   19c28:	ldr	r3, [r7]
   19c2c:	ldmib	r7, {r0, r1, r6}
   19c30:	ldr	r5, [r7, #16]
   19c34:	ldr	r4, [r7, #20]
   19c38:	ldr	r2, [r7, #24]
   19c3c:	ldr	r7, [r7, #28]
   19c40:	stm	sp, {r0, r1, r6}
   19c44:	str	r5, [sp, #12]
   19c48:	str	r4, [sp, #16]
   19c4c:	str	r2, [sp, #20]
   19c50:	str	r7, [sp, #24]
   19c54:	mov	r0, r8
   19c58:	mov	r1, #1
   19c5c:	mov	r2, ip
   19c60:	bl	11570 <__fprintf_chk@plt>
   19c64:	sub	sp, fp, #24
   19c68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c6c:	push	{r4, sl, fp, lr}
   19c70:	add	fp, sp, #8
   19c74:	sub	sp, sp, #8
   19c78:	mov	lr, #0
   19c7c:	ldr	ip, [fp, #8]
   19c80:	ldr	r4, [ip, lr, lsl #2]
   19c84:	add	lr, lr, #1
   19c88:	cmp	r4, #0
   19c8c:	bne	19c80 <__assert_fail@plt+0x8644>
   19c90:	sub	r4, lr, #1
   19c94:	str	ip, [sp]
   19c98:	str	r4, [sp, #4]
   19c9c:	bl	19938 <__assert_fail@plt+0x82fc>
   19ca0:	sub	sp, fp, #8
   19ca4:	pop	{r4, sl, fp, pc}
   19ca8:	push	{r4, r5, fp, lr}
   19cac:	add	fp, sp, #8
   19cb0:	sub	sp, sp, #48	; 0x30
   19cb4:	mov	ip, #0
   19cb8:	ldr	r4, [fp, #8]
   19cbc:	add	lr, sp, #8
   19cc0:	ldr	r5, [r4]
   19cc4:	str	r5, [lr, ip, lsl #2]
   19cc8:	cmp	r5, #0
   19ccc:	beq	19ce4 <__assert_fail@plt+0x86a8>
   19cd0:	add	ip, ip, #1
   19cd4:	add	r4, r4, #4
   19cd8:	cmp	ip, #10
   19cdc:	bne	19cc0 <__assert_fail@plt+0x8684>
   19ce0:	mov	ip, #10
   19ce4:	str	lr, [sp]
   19ce8:	str	ip, [sp, #4]
   19cec:	bl	19938 <__assert_fail@plt+0x82fc>
   19cf0:	sub	sp, fp, #8
   19cf4:	pop	{r4, r5, fp, pc}
   19cf8:	push	{fp, lr}
   19cfc:	mov	fp, sp
   19d00:	sub	sp, sp, #8
   19d04:	add	ip, fp, #8
   19d08:	str	ip, [sp, #4]
   19d0c:	str	ip, [sp]
   19d10:	bl	19ca8 <__assert_fail@plt+0x866c>
   19d14:	mov	sp, fp
   19d18:	pop	{fp, pc}
   19d1c:	push	{fp, lr}
   19d20:	mov	fp, sp
   19d24:	movw	r0, #57820	; 0xe1dc
   19d28:	movt	r0, #2
   19d2c:	ldr	r1, [r0]
   19d30:	movw	r0, #53571	; 0xd143
   19d34:	movt	r0, #1
   19d38:	bl	112f4 <fputs_unlocked@plt>
   19d3c:	movw	r1, #55491	; 0xd8c3
   19d40:	movt	r1, #1
   19d44:	mov	r0, #0
   19d48:	mov	r2, #5
   19d4c:	bl	113a8 <dcgettext@plt>
   19d50:	mov	r1, r0
   19d54:	movw	r2, #55511	; 0xd8d7
   19d58:	movt	r2, #1
   19d5c:	mov	r0, #1
   19d60:	bl	1154c <__printf_chk@plt>
   19d64:	movw	r1, #55533	; 0xd8ed
   19d68:	movt	r1, #1
   19d6c:	mov	r0, #0
   19d70:	mov	r2, #5
   19d74:	bl	113a8 <dcgettext@plt>
   19d78:	mov	r1, r0
   19d7c:	movw	r2, #48955	; 0xbf3b
   19d80:	movt	r2, #1
   19d84:	movw	r3, #53831	; 0xd247
   19d88:	movt	r3, #1
   19d8c:	mov	r0, #1
   19d90:	bl	1154c <__printf_chk@plt>
   19d94:	movw	r1, #55553	; 0xd901
   19d98:	movt	r1, #1
   19d9c:	mov	r0, #0
   19da0:	mov	r2, #5
   19da4:	bl	113a8 <dcgettext@plt>
   19da8:	mov	r1, r0
   19dac:	movw	r2, #55592	; 0xd928
   19db0:	movt	r2, #1
   19db4:	mov	r0, #1
   19db8:	pop	{fp, lr}
   19dbc:	b	1154c <__printf_chk@plt>
   19dc0:	b	19dc4 <__assert_fail@plt+0x8788>
   19dc4:	push	{r4, r5, r6, sl, fp, lr}
   19dc8:	add	fp, sp, #16
   19dcc:	mov	r4, r2
   19dd0:	mov	r5, r1
   19dd4:	mov	r6, r0
   19dd8:	bl	1baf0 <__assert_fail@plt+0xa4b4>
   19ddc:	cmp	r0, #0
   19de0:	popne	{r4, r5, r6, sl, fp, pc}
   19de4:	cmp	r6, #0
   19de8:	beq	19dfc <__assert_fail@plt+0x87c0>
   19dec:	cmp	r5, #0
   19df0:	cmpne	r4, #0
   19df4:	bne	19dfc <__assert_fail@plt+0x87c0>
   19df8:	pop	{r4, r5, r6, sl, fp, pc}
   19dfc:	bl	1a188 <__assert_fail@plt+0x8b4c>
   19e00:	push	{fp, lr}
   19e04:	mov	fp, sp
   19e08:	bl	1b3f4 <__assert_fail@plt+0x9db8>
   19e0c:	pop	{fp, lr}
   19e10:	b	19e14 <__assert_fail@plt+0x87d8>
   19e14:	cmp	r0, #0
   19e18:	bxne	lr
   19e1c:	push	{fp, lr}
   19e20:	mov	fp, sp
   19e24:	bl	1a188 <__assert_fail@plt+0x8b4c>
   19e28:	push	{fp, lr}
   19e2c:	mov	fp, sp
   19e30:	bl	1ba20 <__assert_fail@plt+0xa3e4>
   19e34:	pop	{fp, lr}
   19e38:	b	19e14 <__assert_fail@plt+0x87d8>
   19e3c:	b	19e00 <__assert_fail@plt+0x87c4>
   19e40:	push	{r4, r5, fp, lr}
   19e44:	add	fp, sp, #8
   19e48:	mov	r4, r1
   19e4c:	mov	r5, r0
   19e50:	bl	1b424 <__assert_fail@plt+0x9de8>
   19e54:	cmp	r0, #0
   19e58:	popne	{r4, r5, fp, pc}
   19e5c:	cmp	r5, #0
   19e60:	beq	19e70 <__assert_fail@plt+0x8834>
   19e64:	cmp	r4, #0
   19e68:	bne	19e70 <__assert_fail@plt+0x8834>
   19e6c:	pop	{r4, r5, fp, pc}
   19e70:	bl	1a188 <__assert_fail@plt+0x8b4c>
   19e74:	push	{fp, lr}
   19e78:	mov	fp, sp
   19e7c:	bl	1ba24 <__assert_fail@plt+0xa3e8>
   19e80:	pop	{fp, lr}
   19e84:	b	19e14 <__assert_fail@plt+0x87d8>
   19e88:	push	{fp, lr}
   19e8c:	mov	fp, sp
   19e90:	bl	1ba34 <__assert_fail@plt+0xa3f8>
   19e94:	pop	{fp, lr}
   19e98:	b	19e14 <__assert_fail@plt+0x87d8>
   19e9c:	mov	r2, r1
   19ea0:	mov	r1, r0
   19ea4:	mov	r0, #0
   19ea8:	b	19dc4 <__assert_fail@plt+0x8788>
   19eac:	mov	r2, r1
   19eb0:	mov	r1, r0
   19eb4:	mov	r0, #0
   19eb8:	b	19e88 <__assert_fail@plt+0x884c>
   19ebc:	mov	r2, #1
   19ec0:	b	19ec4 <__assert_fail@plt+0x8888>
   19ec4:	push	{r4, r5, fp, lr}
   19ec8:	add	fp, sp, #8
   19ecc:	mov	r4, r1
   19ed0:	ldr	r5, [r1]
   19ed4:	cmp	r0, #0
   19ed8:	beq	19ef0 <__assert_fail@plt+0x88b4>
   19edc:	mov	r1, #1
   19ee0:	add	r1, r1, r5, lsr #1
   19ee4:	adds	r5, r5, r1
   19ee8:	bcc	19f08 <__assert_fail@plt+0x88cc>
   19eec:	bl	1a188 <__assert_fail@plt+0x8b4c>
   19ef0:	cmp	r5, #0
   19ef4:	bne	19f08 <__assert_fail@plt+0x88cc>
   19ef8:	mov	r1, #64	; 0x40
   19efc:	udiv	r5, r1, r2
   19f00:	cmp	r2, #64	; 0x40
   19f04:	addhi	r5, r5, #1
   19f08:	mov	r1, r5
   19f0c:	bl	19dc4 <__assert_fail@plt+0x8788>
   19f10:	str	r5, [r4]
   19f14:	pop	{r4, r5, fp, pc}
   19f18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19f1c:	add	fp, sp, #24
   19f20:	mov	r8, r1
   19f24:	ldr	r6, [r1]
   19f28:	add	r1, r6, r6, asr #1
   19f2c:	cmp	r1, r6
   19f30:	mvnvs	r1, #-2147483648	; 0x80000000
   19f34:	cmp	r1, r3
   19f38:	mov	r5, r1
   19f3c:	movgt	r5, r3
   19f40:	cmn	r3, #1
   19f44:	movle	r5, r1
   19f48:	ldr	r4, [fp, #8]
   19f4c:	cmn	r4, #1
   19f50:	ble	19f78 <__assert_fail@plt+0x893c>
   19f54:	cmp	r4, #0
   19f58:	beq	19fcc <__assert_fail@plt+0x8990>
   19f5c:	cmn	r5, #1
   19f60:	ble	19fa0 <__assert_fail@plt+0x8964>
   19f64:	mvn	r7, #-2147483648	; 0x80000000
   19f68:	udiv	r1, r7, r4
   19f6c:	cmp	r1, r5
   19f70:	bge	19fcc <__assert_fail@plt+0x8990>
   19f74:	b	19fdc <__assert_fail@plt+0x89a0>
   19f78:	cmn	r5, #1
   19f7c:	ble	19fbc <__assert_fail@plt+0x8980>
   19f80:	cmn	r4, #1
   19f84:	beq	19fcc <__assert_fail@plt+0x8990>
   19f88:	mov	r1, #-2147483648	; 0x80000000
   19f8c:	sdiv	r1, r1, r4
   19f90:	mvn	r7, #-2147483648	; 0x80000000
   19f94:	cmp	r1, r5
   19f98:	bge	19fcc <__assert_fail@plt+0x8990>
   19f9c:	b	19fdc <__assert_fail@plt+0x89a0>
   19fa0:	beq	19fcc <__assert_fail@plt+0x8990>
   19fa4:	mov	r1, #-2147483648	; 0x80000000
   19fa8:	sdiv	r1, r1, r5
   19fac:	mvn	r7, #-2147483648	; 0x80000000
   19fb0:	cmp	r1, r4
   19fb4:	bge	19fcc <__assert_fail@plt+0x8990>
   19fb8:	b	19fdc <__assert_fail@plt+0x89a0>
   19fbc:	mvn	r7, #-2147483648	; 0x80000000
   19fc0:	sdiv	r1, r7, r4
   19fc4:	cmp	r5, r1
   19fc8:	blt	19fdc <__assert_fail@plt+0x89a0>
   19fcc:	mul	r1, r5, r4
   19fd0:	mov	r7, #64	; 0x40
   19fd4:	cmp	r1, #63	; 0x3f
   19fd8:	bgt	19fe4 <__assert_fail@plt+0x89a8>
   19fdc:	sdiv	r5, r7, r4
   19fe0:	mul	r1, r5, r4
   19fe4:	cmp	r0, #0
   19fe8:	moveq	r7, #0
   19fec:	streq	r7, [r8]
   19ff0:	sub	r7, r5, r6
   19ff4:	cmp	r7, r2
   19ff8:	bge	1a0a4 <__assert_fail@plt+0x8a68>
   19ffc:	add	r5, r6, r2
   1a000:	mov	r1, #0
   1a004:	cmp	r5, r3
   1a008:	mov	r2, #0
   1a00c:	movwgt	r2, #1
   1a010:	cmn	r3, #1
   1a014:	movwgt	r1, #1
   1a018:	cmp	r5, r6
   1a01c:	bvs	1a08c <__assert_fail@plt+0x8a50>
   1a020:	ands	r1, r1, r2
   1a024:	bne	1a08c <__assert_fail@plt+0x8a50>
   1a028:	cmn	r4, #1
   1a02c:	ble	1a054 <__assert_fail@plt+0x8a18>
   1a030:	cmp	r4, #0
   1a034:	beq	1a0a0 <__assert_fail@plt+0x8a64>
   1a038:	cmn	r5, #1
   1a03c:	ble	1a078 <__assert_fail@plt+0x8a3c>
   1a040:	mvn	r1, #-2147483648	; 0x80000000
   1a044:	udiv	r1, r1, r4
   1a048:	cmp	r1, r5
   1a04c:	bge	1a0a0 <__assert_fail@plt+0x8a64>
   1a050:	b	1a08c <__assert_fail@plt+0x8a50>
   1a054:	cmn	r5, #1
   1a058:	ble	1a090 <__assert_fail@plt+0x8a54>
   1a05c:	cmn	r4, #1
   1a060:	beq	1a0a0 <__assert_fail@plt+0x8a64>
   1a064:	mov	r1, #-2147483648	; 0x80000000
   1a068:	sdiv	r1, r1, r4
   1a06c:	cmp	r1, r5
   1a070:	bge	1a0a0 <__assert_fail@plt+0x8a64>
   1a074:	b	1a08c <__assert_fail@plt+0x8a50>
   1a078:	beq	1a0a0 <__assert_fail@plt+0x8a64>
   1a07c:	mov	r1, #-2147483648	; 0x80000000
   1a080:	sdiv	r1, r1, r5
   1a084:	cmp	r1, r4
   1a088:	bge	1a0a0 <__assert_fail@plt+0x8a64>
   1a08c:	bl	1a188 <__assert_fail@plt+0x8b4c>
   1a090:	mvn	r1, #-2147483648	; 0x80000000
   1a094:	sdiv	r1, r1, r4
   1a098:	cmp	r5, r1
   1a09c:	blt	1a08c <__assert_fail@plt+0x8a50>
   1a0a0:	mul	r1, r5, r4
   1a0a4:	bl	19e40 <__assert_fail@plt+0x8804>
   1a0a8:	str	r5, [r8]
   1a0ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0b0:	mov	r1, #1
   1a0b4:	b	1a0b8 <__assert_fail@plt+0x8a7c>
   1a0b8:	push	{fp, lr}
   1a0bc:	mov	fp, sp
   1a0c0:	bl	1b3a0 <__assert_fail@plt+0x9d64>
   1a0c4:	pop	{fp, lr}
   1a0c8:	b	19e14 <__assert_fail@plt+0x87d8>
   1a0cc:	mov	r1, #1
   1a0d0:	b	1a0d4 <__assert_fail@plt+0x8a98>
   1a0d4:	push	{fp, lr}
   1a0d8:	mov	fp, sp
   1a0dc:	bl	1ba30 <__assert_fail@plt+0xa3f4>
   1a0e0:	pop	{fp, lr}
   1a0e4:	b	19e14 <__assert_fail@plt+0x87d8>
   1a0e8:	push	{r4, r5, fp, lr}
   1a0ec:	add	fp, sp, #8
   1a0f0:	mov	r4, r1
   1a0f4:	mov	r5, r0
   1a0f8:	mov	r0, r1
   1a0fc:	bl	19e00 <__assert_fail@plt+0x87c4>
   1a100:	mov	r1, r5
   1a104:	mov	r2, r4
   1a108:	pop	{r4, r5, fp, lr}
   1a10c:	b	11384 <memcpy@plt>
   1a110:	push	{r4, r5, fp, lr}
   1a114:	add	fp, sp, #8
   1a118:	mov	r4, r1
   1a11c:	mov	r5, r0
   1a120:	mov	r0, r1
   1a124:	bl	19e28 <__assert_fail@plt+0x87ec>
   1a128:	mov	r1, r5
   1a12c:	mov	r2, r4
   1a130:	pop	{r4, r5, fp, lr}
   1a134:	b	11384 <memcpy@plt>
   1a138:	push	{r4, r5, fp, lr}
   1a13c:	add	fp, sp, #8
   1a140:	mov	r4, r1
   1a144:	mov	r5, r0
   1a148:	add	r0, r1, #1
   1a14c:	bl	19e28 <__assert_fail@plt+0x87ec>
   1a150:	mov	r1, #0
   1a154:	strb	r1, [r0, r4]
   1a158:	mov	r1, r5
   1a15c:	mov	r2, r4
   1a160:	pop	{r4, r5, fp, lr}
   1a164:	b	11384 <memcpy@plt>
   1a168:	push	{r4, sl, fp, lr}
   1a16c:	add	fp, sp, #8
   1a170:	mov	r4, r0
   1a174:	bl	114ec <strlen@plt>
   1a178:	add	r1, r0, #1
   1a17c:	mov	r0, r4
   1a180:	pop	{r4, sl, fp, lr}
   1a184:	b	1a0e8 <__assert_fail@plt+0x8aac>
   1a188:	push	{fp, lr}
   1a18c:	mov	fp, sp
   1a190:	movw	r0, #57724	; 0xe17c
   1a194:	movt	r0, #2
   1a198:	ldr	r4, [r0]
   1a19c:	movw	r1, #55668	; 0xd974
   1a1a0:	movt	r1, #1
   1a1a4:	mov	r0, #0
   1a1a8:	mov	r2, #5
   1a1ac:	bl	113a8 <dcgettext@plt>
   1a1b0:	mov	r3, r0
   1a1b4:	movw	r2, #54599	; 0xd547
   1a1b8:	movt	r2, #1
   1a1bc:	mov	r0, r4
   1a1c0:	mov	r1, #0
   1a1c4:	bl	11450 <error@plt>
   1a1c8:	bl	11618 <abort@plt>
   1a1cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a1d0:	add	fp, sp, #24
   1a1d4:	sub	sp, sp, #16
   1a1d8:	mov	r5, r3
   1a1dc:	mov	r6, r2
   1a1e0:	mov	r2, r1
   1a1e4:	mov	r8, r0
   1a1e8:	ldr	r0, [fp, #16]
   1a1ec:	str	r0, [sp]
   1a1f0:	add	r3, sp, #8
   1a1f4:	mov	r0, r8
   1a1f8:	mov	r1, #0
   1a1fc:	bl	1a2d8 <__assert_fail@plt+0x8c9c>
   1a200:	cmp	r0, #0
   1a204:	bne	1a2b4 <__assert_fail@plt+0x8c78>
   1a208:	ldr	r7, [sp, #8]
   1a20c:	ldr	r4, [sp, #12]
   1a210:	subs	r0, r7, r6
   1a214:	sbcs	r0, r4, r5
   1a218:	blt	1a23c <__assert_fail@plt+0x8c00>
   1a21c:	ldr	r0, [fp, #12]
   1a220:	ldr	r1, [fp, #8]
   1a224:	subs	r1, r1, r7
   1a228:	sbcs	r0, r0, r4
   1a22c:	ldrge	r0, [sp, #8]
   1a230:	ldrge	r1, [sp, #12]
   1a234:	subge	sp, fp, #24
   1a238:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a23c:	subs	r0, r7, #1073741824	; 0x40000000
   1a240:	sbcs	r0, r4, #0
   1a244:	blt	1a254 <__assert_fail@plt+0x8c18>
   1a248:	bl	1151c <__errno_location@plt>
   1a24c:	mov	r1, #75	; 0x4b
   1a250:	b	1a270 <__assert_fail@plt+0x8c34>
   1a254:	bl	1151c <__errno_location@plt>
   1a258:	mvn	r1, #0
   1a25c:	mvn	r2, #1073741824	; 0x40000000
   1a260:	subs	r2, r2, r7
   1a264:	sbcs	r1, r1, r4
   1a268:	movlt	r1, #34	; 0x22
   1a26c:	movge	r1, #75	; 0x4b
   1a270:	str	r1, [r0]
   1a274:	ldr	r5, [fp, #24]
   1a278:	ldr	r6, [fp, #20]
   1a27c:	bl	1151c <__errno_location@plt>
   1a280:	ldr	r4, [r0]
   1a284:	mov	r0, r8
   1a288:	bl	18f7c <__assert_fail@plt+0x7940>
   1a28c:	str	r0, [sp]
   1a290:	subs	r1, r4, #22
   1a294:	movne	r1, r4
   1a298:	cmp	r5, #0
   1a29c:	movweq	r5, #1
   1a2a0:	movw	r2, #54595	; 0xd543
   1a2a4:	movt	r2, #1
   1a2a8:	mov	r0, r5
   1a2ac:	mov	r3, r6
   1a2b0:	bl	11450 <error@plt>
   1a2b4:	cmp	r0, #1
   1a2b8:	beq	1a248 <__assert_fail@plt+0x8c0c>
   1a2bc:	cmp	r0, #3
   1a2c0:	bne	1a274 <__assert_fail@plt+0x8c38>
   1a2c4:	bl	1151c <__errno_location@plt>
   1a2c8:	mov	r1, #0
   1a2cc:	b	1a270 <__assert_fail@plt+0x8c34>
   1a2d0:	mov	r1, #10
   1a2d4:	b	1a1cc <__assert_fail@plt+0x8b90>
   1a2d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2dc:	add	fp, sp, #28
   1a2e0:	sub	sp, sp, #20
   1a2e4:	cmp	r2, #37	; 0x25
   1a2e8:	bcs	1a700 <__assert_fail@plt+0x90c4>
   1a2ec:	mov	r9, r3
   1a2f0:	mov	r7, r2
   1a2f4:	mov	r6, r1
   1a2f8:	mov	r4, r0
   1a2fc:	ldr	sl, [fp, #8]
   1a300:	bl	1151c <__errno_location@plt>
   1a304:	mov	r5, r0
   1a308:	mov	r0, #0
   1a30c:	str	r0, [r5]
   1a310:	add	r8, sp, #16
   1a314:	cmp	r6, #0
   1a318:	movne	r8, r6
   1a31c:	mov	r0, r4
   1a320:	mov	r1, r8
   1a324:	mov	r2, r7
   1a328:	bl	1157c <strtoimax@plt>
   1a32c:	str	r1, [sp, #12]
   1a330:	str	r0, [sp, #8]
   1a334:	ldr	r7, [r8]
   1a338:	cmp	r7, r4
   1a33c:	beq	1a368 <__assert_fail@plt+0x8d2c>
   1a340:	ldr	r0, [r5]
   1a344:	cmp	r0, #0
   1a348:	beq	1a3a4 <__assert_fail@plt+0x8d68>
   1a34c:	mov	r5, #4
   1a350:	cmp	r0, #34	; 0x22
   1a354:	bne	1a6f4 <__assert_fail@plt+0x90b8>
   1a358:	mov	r5, #1
   1a35c:	cmp	sl, #0
   1a360:	bne	1a3b0 <__assert_fail@plt+0x8d74>
   1a364:	b	1a6e8 <__assert_fail@plt+0x90ac>
   1a368:	mov	r5, #4
   1a36c:	cmp	sl, #0
   1a370:	beq	1a6f4 <__assert_fail@plt+0x90b8>
   1a374:	ldrb	r1, [r7]
   1a378:	cmp	r1, #0
   1a37c:	beq	1a6f4 <__assert_fail@plt+0x90b8>
   1a380:	mov	r0, sl
   1a384:	bl	114f8 <strchr@plt>
   1a388:	cmp	r0, #0
   1a38c:	beq	1a6f4 <__assert_fail@plt+0x90b8>
   1a390:	mov	r5, #0
   1a394:	str	r5, [sp, #12]
   1a398:	mov	r0, #1
   1a39c:	str	r0, [sp, #8]
   1a3a0:	b	1a3b0 <__assert_fail@plt+0x8d74>
   1a3a4:	mov	r5, r0
   1a3a8:	cmp	sl, #0
   1a3ac:	beq	1a6e8 <__assert_fail@plt+0x90ac>
   1a3b0:	ldrb	r4, [r7]
   1a3b4:	cmp	r4, #0
   1a3b8:	beq	1a6e8 <__assert_fail@plt+0x90ac>
   1a3bc:	mov	r0, sl
   1a3c0:	mov	r1, r4
   1a3c4:	bl	114f8 <strchr@plt>
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a604 <__assert_fail@plt+0x8fc8>
   1a3d0:	sub	r0, r4, #69	; 0x45
   1a3d4:	mov	r1, #1
   1a3d8:	str	r1, [sp, #4]
   1a3dc:	mov	r6, #1024	; 0x400
   1a3e0:	cmp	r0, #47	; 0x2f
   1a3e4:	bhi	1a500 <__assert_fail@plt+0x8ec4>
   1a3e8:	add	r1, pc, #0
   1a3ec:	ldr	pc, [r1, r0, lsl #2]
   1a3f0:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3f4:	andeq	sl, r1, r0, lsl #10
   1a3f8:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3fc:	andeq	sl, r1, r0, lsl #10
   1a400:	andeq	sl, r1, r0, lsl #10
   1a404:	andeq	sl, r1, r0, lsl #10
   1a408:			; <UNDEFINED> instruction: 0x0001a4b0
   1a40c:	andeq	sl, r1, r0, lsl #10
   1a410:			; <UNDEFINED> instruction: 0x0001a4b0
   1a414:	andeq	sl, r1, r0, lsl #10
   1a418:	andeq	sl, r1, r0, lsl #10
   1a41c:			; <UNDEFINED> instruction: 0x0001a4b0
   1a420:	andeq	sl, r1, r0, lsl #10
   1a424:	andeq	sl, r1, r0, lsl #10
   1a428:	andeq	sl, r1, r0, lsl #10
   1a42c:			; <UNDEFINED> instruction: 0x0001a4b0
   1a430:	andeq	sl, r1, r0, lsl #10
   1a434:	andeq	sl, r1, r0, lsl #10
   1a438:	andeq	sl, r1, r0, lsl #10
   1a43c:	andeq	sl, r1, r0, lsl #10
   1a440:			; <UNDEFINED> instruction: 0x0001a4b0
   1a444:			; <UNDEFINED> instruction: 0x0001a4b0
   1a448:	andeq	sl, r1, r0, lsl #10
   1a44c:	andeq	sl, r1, r0, lsl #10
   1a450:	andeq	sl, r1, r0, lsl #10
   1a454:	andeq	sl, r1, r0, lsl #10
   1a458:	andeq	sl, r1, r0, lsl #10
   1a45c:	andeq	sl, r1, r0, lsl #10
   1a460:	andeq	sl, r1, r0, lsl #10
   1a464:	andeq	sl, r1, r0, lsl #10
   1a468:	andeq	sl, r1, r0, lsl #10
   1a46c:	andeq	sl, r1, r0, lsl #10
   1a470:	andeq	sl, r1, r0, lsl #10
   1a474:	andeq	sl, r1, r0, lsl #10
   1a478:			; <UNDEFINED> instruction: 0x0001a4b0
   1a47c:	andeq	sl, r1, r0, lsl #10
   1a480:	andeq	sl, r1, r0, lsl #10
   1a484:	andeq	sl, r1, r0, lsl #10
   1a488:			; <UNDEFINED> instruction: 0x0001a4b0
   1a48c:	andeq	sl, r1, r0, lsl #10
   1a490:			; <UNDEFINED> instruction: 0x0001a4b0
   1a494:	andeq	sl, r1, r0, lsl #10
   1a498:	andeq	sl, r1, r0, lsl #10
   1a49c:	andeq	sl, r1, r0, lsl #10
   1a4a0:	andeq	sl, r1, r0, lsl #10
   1a4a4:	andeq	sl, r1, r0, lsl #10
   1a4a8:	andeq	sl, r1, r0, lsl #10
   1a4ac:			; <UNDEFINED> instruction: 0x0001a4b0
   1a4b0:	mov	r0, sl
   1a4b4:	mov	r1, #48	; 0x30
   1a4b8:	bl	114f8 <strchr@plt>
   1a4bc:	cmp	r0, #0
   1a4c0:	beq	1a500 <__assert_fail@plt+0x8ec4>
   1a4c4:	ldrb	r0, [r7, #1]
   1a4c8:	cmp	r0, #66	; 0x42
   1a4cc:	cmpne	r0, #68	; 0x44
   1a4d0:	bne	1a4e4 <__assert_fail@plt+0x8ea8>
   1a4d4:	mov	r0, #2
   1a4d8:	str	r0, [sp, #4]
   1a4dc:	mov	r6, #1000	; 0x3e8
   1a4e0:	b	1a500 <__assert_fail@plt+0x8ec4>
   1a4e4:	cmp	r0, #105	; 0x69
   1a4e8:	bne	1a500 <__assert_fail@plt+0x8ec4>
   1a4ec:	ldrb	r0, [r7, #2]
   1a4f0:	mov	r1, #1
   1a4f4:	cmp	r0, #66	; 0x42
   1a4f8:	movweq	r1, #3
   1a4fc:	str	r1, [sp, #4]
   1a500:	sub	r1, r4, #66	; 0x42
   1a504:	cmp	r1, #53	; 0x35
   1a508:	bhi	1a604 <__assert_fail@plt+0x8fc8>
   1a50c:	mov	r0, #0
   1a510:	add	r2, pc, #0
   1a514:	ldr	pc, [r2, r1, lsl #2]
   1a518:	andeq	sl, r1, r8, ror #12
   1a51c:	andeq	sl, r1, r4, lsl #12
   1a520:	andeq	sl, r1, r4, lsl #12
   1a524:	andeq	sl, r1, r4, ror r6
   1a528:	andeq	sl, r1, r4, lsl #12
   1a52c:	strdeq	sl, [r1], -r0
   1a530:	andeq	sl, r1, r4, lsl #12
   1a534:	andeq	sl, r1, r4, lsl #12
   1a538:	andeq	sl, r1, r4, lsl #12
   1a53c:	andeq	sl, r1, r8, lsl r6
   1a540:	andeq	sl, r1, r4, lsl #12
   1a544:	andeq	sl, r1, ip, lsr #12
   1a548:	andeq	sl, r1, r4, lsl #12
   1a54c:	andeq	sl, r1, r4, lsl #12
   1a550:	andeq	sl, r1, r8, lsl #13
   1a554:	andeq	sl, r1, r4, lsl #12
   1a558:	andeq	sl, r1, r4, lsl #12
   1a55c:	andeq	sl, r1, r4, lsl #12
   1a560:	andeq	sl, r1, r0, asr #12
   1a564:	andeq	sl, r1, r4, lsl #12
   1a568:	andeq	sl, r1, r4, lsl #12
   1a56c:	andeq	sl, r1, r4, lsl #12
   1a570:	andeq	sl, r1, r4, lsl #12
   1a574:	muleq	r1, ip, r6
   1a578:	andeq	sl, r1, r4, asr r6
   1a57c:	andeq	sl, r1, r4, lsl #12
   1a580:	andeq	sl, r1, r4, lsl #12
   1a584:	andeq	sl, r1, r4, lsl #12
   1a588:	andeq	sl, r1, r4, lsl #12
   1a58c:	andeq	sl, r1, r4, lsl #12
   1a590:	andeq	sl, r1, r4, lsl #12
   1a594:	andeq	sl, r1, r4, lsl #12
   1a598:			; <UNDEFINED> instruction: 0x0001a6b0
   1a59c:	andeq	sl, r1, r8, asr #13
   1a5a0:	andeq	sl, r1, r4, lsl #12
   1a5a4:	andeq	sl, r1, r4, lsl #12
   1a5a8:	andeq	sl, r1, r4, lsl #12
   1a5ac:	strdeq	sl, [r1], -r0
   1a5b0:	andeq	sl, r1, r4, lsl #12
   1a5b4:	andeq	sl, r1, r4, lsl #12
   1a5b8:	andeq	sl, r1, r4, lsl #12
   1a5bc:	andeq	sl, r1, r8, lsl r6
   1a5c0:	andeq	sl, r1, r4, lsl #12
   1a5c4:	andeq	sl, r1, ip, lsr #12
   1a5c8:	andeq	sl, r1, r4, lsl #12
   1a5cc:	andeq	sl, r1, r4, lsl #12
   1a5d0:	andeq	sl, r1, r4, lsl #12
   1a5d4:	andeq	sl, r1, r4, lsl #12
   1a5d8:	andeq	sl, r1, r4, lsl #12
   1a5dc:	andeq	sl, r1, r4, lsl #12
   1a5e0:	andeq	sl, r1, r0, asr #12
   1a5e4:	andeq	sl, r1, r4, lsl #12
   1a5e8:	andeq	sl, r1, r4, lsl #12
   1a5ec:			; <UNDEFINED> instruction: 0x0001a6bc
   1a5f0:	add	r0, sp, #8
   1a5f4:	mov	r1, r6
   1a5f8:	mov	r2, #3
   1a5fc:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a600:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a604:	ldr	r0, [sp, #8]
   1a608:	ldr	r1, [sp, #12]
   1a60c:	strd	r0, [r9]
   1a610:	orr	r5, r5, #2
   1a614:	b	1a6f4 <__assert_fail@plt+0x90b8>
   1a618:	add	r0, sp, #8
   1a61c:	mov	r1, r6
   1a620:	mov	r2, #1
   1a624:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a628:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a62c:	add	r0, sp, #8
   1a630:	mov	r1, r6
   1a634:	mov	r2, #2
   1a638:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a63c:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a640:	add	r0, sp, #8
   1a644:	mov	r1, r6
   1a648:	mov	r2, #4
   1a64c:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a650:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a654:	add	r0, sp, #8
   1a658:	mov	r1, r6
   1a65c:	mov	r2, #7
   1a660:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a664:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a668:	add	r0, sp, #8
   1a66c:	mov	r1, #1024	; 0x400
   1a670:	b	1a6c4 <__assert_fail@plt+0x9088>
   1a674:	add	r0, sp, #8
   1a678:	mov	r1, r6
   1a67c:	mov	r2, #6
   1a680:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a684:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a688:	add	r0, sp, #8
   1a68c:	mov	r1, r6
   1a690:	mov	r2, #5
   1a694:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a698:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a69c:	add	r0, sp, #8
   1a6a0:	mov	r1, r6
   1a6a4:	mov	r2, #8
   1a6a8:	bl	1a824 <__assert_fail@plt+0x91e8>
   1a6ac:	b	1a6c8 <__assert_fail@plt+0x908c>
   1a6b0:	add	r0, sp, #8
   1a6b4:	mov	r1, #512	; 0x200
   1a6b8:	b	1a6c4 <__assert_fail@plt+0x9088>
   1a6bc:	add	r0, sp, #8
   1a6c0:	mov	r1, #2
   1a6c4:	bl	1a720 <__assert_fail@plt+0x90e4>
   1a6c8:	ldr	r1, [r8]
   1a6cc:	ldr	r3, [sp, #4]
   1a6d0:	add	r2, r1, r3
   1a6d4:	str	r2, [r8]
   1a6d8:	ldrb	r1, [r1, r3]
   1a6dc:	orr	r5, r0, r5
   1a6e0:	cmp	r1, #0
   1a6e4:	orrne	r5, r5, #2
   1a6e8:	ldr	r0, [sp, #8]
   1a6ec:	ldr	r1, [sp, #12]
   1a6f0:	strd	r0, [r9]
   1a6f4:	mov	r0, r5
   1a6f8:	sub	sp, fp, #28
   1a6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a700:	movw	r0, #55685	; 0xd985
   1a704:	movt	r0, #1
   1a708:	movw	r1, #55723	; 0xd9ab
   1a70c:	movt	r1, #1
   1a710:	movw	r3, #55739	; 0xd9bb
   1a714:	movt	r3, #1
   1a718:	mov	r2, #85	; 0x55
   1a71c:	bl	1163c <__assert_fail@plt>
   1a720:	push	{r4, r5, r6, r7, fp, lr}
   1a724:	add	fp, sp, #16
   1a728:	mov	r5, r1
   1a72c:	mov	r4, r0
   1a730:	cmn	r1, #1
   1a734:	ble	1a75c <__assert_fail@plt+0x9120>
   1a738:	cmp	r5, #0
   1a73c:	beq	1a7c0 <__assert_fail@plt+0x9184>
   1a740:	ldrd	r6, [r4]
   1a744:	cmn	r7, #1
   1a748:	ble	1a794 <__assert_fail@plt+0x9158>
   1a74c:	asr	r3, r5, #31
   1a750:	mvn	r0, #0
   1a754:	mvn	r1, #-2147483648	; 0x80000000
   1a758:	b	1a77c <__assert_fail@plt+0x9140>
   1a75c:	ldrd	r6, [r4]
   1a760:	cmn	r7, #1
   1a764:	ble	1a7dc <__assert_fail@plt+0x91a0>
   1a768:	cmn	r5, #1
   1a76c:	beq	1a7c0 <__assert_fail@plt+0x9184>
   1a770:	asr	r3, r5, #31
   1a774:	mov	r0, #0
   1a778:	mov	r1, #-2147483648	; 0x80000000
   1a77c:	mov	r2, r5
   1a780:	bl	1bb2c <__assert_fail@plt+0xa4f0>
   1a784:	subs	r0, r0, r6
   1a788:	sbcs	r0, r1, r7
   1a78c:	bge	1a7c0 <__assert_fail@plt+0x9184>
   1a790:	b	1a7fc <__assert_fail@plt+0x91c0>
   1a794:	and	r0, r6, r7
   1a798:	cmn	r0, #1
   1a79c:	beq	1a7c0 <__assert_fail@plt+0x9184>
   1a7a0:	mov	r0, #0
   1a7a4:	mov	r1, #-2147483648	; 0x80000000
   1a7a8:	mov	r2, r6
   1a7ac:	mov	r3, r7
   1a7b0:	bl	1bb2c <__assert_fail@plt+0xa4f0>
   1a7b4:	subs	r0, r0, r5
   1a7b8:	sbcs	r0, r1, r5, asr #31
   1a7bc:	blt	1a7fc <__assert_fail@plt+0x91c0>
   1a7c0:	ldrd	r0, [r4]
   1a7c4:	umull	r2, r3, r0, r5
   1a7c8:	asr	r7, r5, #31
   1a7cc:	mla	r0, r0, r7, r3
   1a7d0:	mla	r1, r1, r5, r0
   1a7d4:	mov	r0, #0
   1a7d8:	b	1a818 <__assert_fail@plt+0x91dc>
   1a7dc:	asr	r3, r5, #31
   1a7e0:	mvn	r0, #0
   1a7e4:	mvn	r1, #-2147483648	; 0x80000000
   1a7e8:	mov	r2, r5
   1a7ec:	bl	1bb2c <__assert_fail@plt+0xa4f0>
   1a7f0:	subs	r0, r6, r0
   1a7f4:	sbcs	r0, r7, r1
   1a7f8:	bge	1a7c0 <__assert_fail@plt+0x9184>
   1a7fc:	ldr	r0, [r4, #4]
   1a800:	mvn	r1, #-2147483648	; 0x80000000
   1a804:	cmp	r0, #0
   1a808:	movmi	r1, #-2147483648	; 0x80000000
   1a80c:	mvn	r2, #0
   1a810:	movwmi	r2, #0
   1a814:	mov	r0, #1
   1a818:	str	r2, [r4]
   1a81c:	str	r1, [r4, #4]
   1a820:	pop	{r4, r5, r6, r7, fp, pc}
   1a824:	push	{r4, r5, r6, r7, fp, lr}
   1a828:	add	fp, sp, #16
   1a82c:	cmp	r2, #0
   1a830:	beq	1a864 <__assert_fail@plt+0x9228>
   1a834:	mov	r4, r2
   1a838:	mov	r5, r1
   1a83c:	mov	r7, r0
   1a840:	mov	r6, #0
   1a844:	mov	r0, r7
   1a848:	mov	r1, r5
   1a84c:	bl	1a720 <__assert_fail@plt+0x90e4>
   1a850:	orr	r6, r0, r6
   1a854:	subs	r4, r4, #1
   1a858:	bne	1a844 <__assert_fail@plt+0x9208>
   1a85c:	mov	r0, r6
   1a860:	pop	{r4, r5, r6, r7, fp, pc}
   1a864:	mov	r6, #0
   1a868:	mov	r0, r6
   1a86c:	pop	{r4, r5, r6, r7, fp, pc}
   1a870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a874:	add	fp, sp, #28
   1a878:	sub	sp, sp, #12
   1a87c:	cmp	r2, #37	; 0x25
   1a880:	bcs	1ac88 <__assert_fail@plt+0x964c>
   1a884:	mov	r9, r3
   1a888:	mov	r5, r2
   1a88c:	mov	r6, r1
   1a890:	mov	r4, r0
   1a894:	ldr	sl, [fp, #8]
   1a898:	bl	1151c <__errno_location@plt>
   1a89c:	mov	r7, r0
   1a8a0:	mov	r0, #0
   1a8a4:	str	r0, [r7]
   1a8a8:	add	r8, sp, #8
   1a8ac:	cmp	r6, #0
   1a8b0:	movne	r8, r6
   1a8b4:	mov	r0, r4
   1a8b8:	mov	r1, r8
   1a8bc:	mov	r2, r5
   1a8c0:	bl	11324 <strtol@plt>
   1a8c4:	str	r0, [sp, #4]
   1a8c8:	ldr	r6, [r8]
   1a8cc:	cmp	r6, r4
   1a8d0:	beq	1a8fc <__assert_fail@plt+0x92c0>
   1a8d4:	ldr	r0, [r7]
   1a8d8:	cmp	r0, #0
   1a8dc:	beq	1a934 <__assert_fail@plt+0x92f8>
   1a8e0:	mov	r5, #4
   1a8e4:	cmp	r0, #34	; 0x22
   1a8e8:	bne	1ac7c <__assert_fail@plt+0x9640>
   1a8ec:	mov	r5, #1
   1a8f0:	cmp	sl, #0
   1a8f4:	bne	1a940 <__assert_fail@plt+0x9304>
   1a8f8:	b	1ac74 <__assert_fail@plt+0x9638>
   1a8fc:	mov	r5, #4
   1a900:	cmp	sl, #0
   1a904:	beq	1ac7c <__assert_fail@plt+0x9640>
   1a908:	ldrb	r1, [r6]
   1a90c:	cmp	r1, #0
   1a910:	beq	1ac7c <__assert_fail@plt+0x9640>
   1a914:	mov	r0, sl
   1a918:	bl	114f8 <strchr@plt>
   1a91c:	cmp	r0, #0
   1a920:	beq	1ac7c <__assert_fail@plt+0x9640>
   1a924:	mov	r0, #1
   1a928:	str	r0, [sp, #4]
   1a92c:	mov	r5, #0
   1a930:	b	1a940 <__assert_fail@plt+0x9304>
   1a934:	mov	r5, r0
   1a938:	cmp	sl, #0
   1a93c:	beq	1ac74 <__assert_fail@plt+0x9638>
   1a940:	ldrb	r4, [r6]
   1a944:	cmp	r4, #0
   1a948:	beq	1ac74 <__assert_fail@plt+0x9638>
   1a94c:	mov	r0, sl
   1a950:	mov	r1, r4
   1a954:	bl	114f8 <strchr@plt>
   1a958:	cmp	r0, #0
   1a95c:	beq	1ab94 <__assert_fail@plt+0x9558>
   1a960:	sub	r0, r4, #69	; 0x45
   1a964:	mov	r1, #1
   1a968:	str	r1, [sp]
   1a96c:	mov	r7, #1024	; 0x400
   1a970:	cmp	r0, #47	; 0x2f
   1a974:	bhi	1aa90 <__assert_fail@plt+0x9454>
   1a978:	add	r1, pc, #0
   1a97c:	ldr	pc, [r1, r0, lsl #2]
   1a980:	andeq	sl, r1, r0, asr #20
   1a984:	muleq	r1, r0, sl
   1a988:	andeq	sl, r1, r0, asr #20
   1a98c:	muleq	r1, r0, sl
   1a990:	muleq	r1, r0, sl
   1a994:	muleq	r1, r0, sl
   1a998:	andeq	sl, r1, r0, asr #20
   1a99c:	muleq	r1, r0, sl
   1a9a0:	andeq	sl, r1, r0, asr #20
   1a9a4:	muleq	r1, r0, sl
   1a9a8:	muleq	r1, r0, sl
   1a9ac:	andeq	sl, r1, r0, asr #20
   1a9b0:	muleq	r1, r0, sl
   1a9b4:	muleq	r1, r0, sl
   1a9b8:	muleq	r1, r0, sl
   1a9bc:	andeq	sl, r1, r0, asr #20
   1a9c0:	muleq	r1, r0, sl
   1a9c4:	muleq	r1, r0, sl
   1a9c8:	muleq	r1, r0, sl
   1a9cc:	muleq	r1, r0, sl
   1a9d0:	andeq	sl, r1, r0, asr #20
   1a9d4:	andeq	sl, r1, r0, asr #20
   1a9d8:	muleq	r1, r0, sl
   1a9dc:	muleq	r1, r0, sl
   1a9e0:	muleq	r1, r0, sl
   1a9e4:	muleq	r1, r0, sl
   1a9e8:	muleq	r1, r0, sl
   1a9ec:	muleq	r1, r0, sl
   1a9f0:	muleq	r1, r0, sl
   1a9f4:	muleq	r1, r0, sl
   1a9f8:	muleq	r1, r0, sl
   1a9fc:	muleq	r1, r0, sl
   1aa00:	muleq	r1, r0, sl
   1aa04:	muleq	r1, r0, sl
   1aa08:	andeq	sl, r1, r0, asr #20
   1aa0c:	muleq	r1, r0, sl
   1aa10:	muleq	r1, r0, sl
   1aa14:	muleq	r1, r0, sl
   1aa18:	andeq	sl, r1, r0, asr #20
   1aa1c:	muleq	r1, r0, sl
   1aa20:	andeq	sl, r1, r0, asr #20
   1aa24:	muleq	r1, r0, sl
   1aa28:	muleq	r1, r0, sl
   1aa2c:	muleq	r1, r0, sl
   1aa30:	muleq	r1, r0, sl
   1aa34:	muleq	r1, r0, sl
   1aa38:	muleq	r1, r0, sl
   1aa3c:	andeq	sl, r1, r0, asr #20
   1aa40:	mov	r0, sl
   1aa44:	mov	r1, #48	; 0x30
   1aa48:	bl	114f8 <strchr@plt>
   1aa4c:	cmp	r0, #0
   1aa50:	beq	1aa90 <__assert_fail@plt+0x9454>
   1aa54:	ldrb	r0, [r6, #1]
   1aa58:	cmp	r0, #66	; 0x42
   1aa5c:	cmpne	r0, #68	; 0x44
   1aa60:	bne	1aa74 <__assert_fail@plt+0x9438>
   1aa64:	mov	r0, #2
   1aa68:	str	r0, [sp]
   1aa6c:	mov	r7, #1000	; 0x3e8
   1aa70:	b	1aa90 <__assert_fail@plt+0x9454>
   1aa74:	cmp	r0, #105	; 0x69
   1aa78:	bne	1aa90 <__assert_fail@plt+0x9454>
   1aa7c:	ldrb	r0, [r6, #2]
   1aa80:	mov	r1, #1
   1aa84:	cmp	r0, #66	; 0x42
   1aa88:	movweq	r1, #3
   1aa8c:	str	r1, [sp]
   1aa90:	sub	r1, r4, #66	; 0x42
   1aa94:	cmp	r1, #53	; 0x35
   1aa98:	bhi	1ab94 <__assert_fail@plt+0x9558>
   1aa9c:	mov	r0, #0
   1aaa0:	add	r2, pc, #0
   1aaa4:	ldr	pc, [r2, r1, lsl #2]
   1aaa8:	strdeq	sl, [r1], -r4
   1aaac:	muleq	r1, r4, fp
   1aab0:	muleq	r1, r4, fp
   1aab4:	andeq	sl, r1, r0, lsl #24
   1aab8:	muleq	r1, r4, fp
   1aabc:	andeq	sl, r1, r0, lsl #23
   1aac0:	muleq	r1, r4, fp
   1aac4:	muleq	r1, r4, fp
   1aac8:	muleq	r1, r4, fp
   1aacc:	andeq	sl, r1, r4, lsr #23
   1aad0:	muleq	r1, r4, fp
   1aad4:			; <UNDEFINED> instruction: 0x0001abb8
   1aad8:	muleq	r1, r4, fp
   1aadc:	muleq	r1, r4, fp
   1aae0:	andeq	sl, r1, r4, lsl ip
   1aae4:	muleq	r1, r4, fp
   1aae8:	muleq	r1, r4, fp
   1aaec:	muleq	r1, r4, fp
   1aaf0:	andeq	sl, r1, ip, asr #23
   1aaf4:	muleq	r1, r4, fp
   1aaf8:	muleq	r1, r4, fp
   1aafc:	muleq	r1, r4, fp
   1ab00:	muleq	r1, r4, fp
   1ab04:	andeq	sl, r1, r8, lsr #24
   1ab08:	andeq	sl, r1, r0, ror #23
   1ab0c:	muleq	r1, r4, fp
   1ab10:	muleq	r1, r4, fp
   1ab14:	muleq	r1, r4, fp
   1ab18:	muleq	r1, r4, fp
   1ab1c:	muleq	r1, r4, fp
   1ab20:	muleq	r1, r4, fp
   1ab24:	muleq	r1, r4, fp
   1ab28:	andeq	sl, r1, ip, lsr ip
   1ab2c:	andeq	sl, r1, r4, asr ip
   1ab30:	muleq	r1, r4, fp
   1ab34:	muleq	r1, r4, fp
   1ab38:	muleq	r1, r4, fp
   1ab3c:	andeq	sl, r1, r0, lsl #23
   1ab40:	muleq	r1, r4, fp
   1ab44:	muleq	r1, r4, fp
   1ab48:	muleq	r1, r4, fp
   1ab4c:	andeq	sl, r1, r4, lsr #23
   1ab50:	muleq	r1, r4, fp
   1ab54:			; <UNDEFINED> instruction: 0x0001abb8
   1ab58:	muleq	r1, r4, fp
   1ab5c:	muleq	r1, r4, fp
   1ab60:	muleq	r1, r4, fp
   1ab64:	muleq	r1, r4, fp
   1ab68:	muleq	r1, r4, fp
   1ab6c:	muleq	r1, r4, fp
   1ab70:	andeq	sl, r1, ip, asr #23
   1ab74:	muleq	r1, r4, fp
   1ab78:	muleq	r1, r4, fp
   1ab7c:	andeq	sl, r1, r8, asr #24
   1ab80:	add	r0, sp, #4
   1ab84:	mov	r1, r7
   1ab88:	mov	r2, #3
   1ab8c:	bl	1ad54 <__assert_fail@plt+0x9718>
   1ab90:	b	1ac54 <__assert_fail@plt+0x9618>
   1ab94:	ldr	r0, [sp, #4]
   1ab98:	str	r0, [r9]
   1ab9c:	orr	r5, r5, #2
   1aba0:	b	1ac7c <__assert_fail@plt+0x9640>
   1aba4:	add	r0, sp, #4
   1aba8:	mov	r1, r7
   1abac:	mov	r2, #1
   1abb0:	bl	1ad54 <__assert_fail@plt+0x9718>
   1abb4:	b	1ac54 <__assert_fail@plt+0x9618>
   1abb8:	add	r0, sp, #4
   1abbc:	mov	r1, r7
   1abc0:	mov	r2, #2
   1abc4:	bl	1ad54 <__assert_fail@plt+0x9718>
   1abc8:	b	1ac54 <__assert_fail@plt+0x9618>
   1abcc:	add	r0, sp, #4
   1abd0:	mov	r1, r7
   1abd4:	mov	r2, #4
   1abd8:	bl	1ad54 <__assert_fail@plt+0x9718>
   1abdc:	b	1ac54 <__assert_fail@plt+0x9618>
   1abe0:	add	r0, sp, #4
   1abe4:	mov	r1, r7
   1abe8:	mov	r2, #7
   1abec:	bl	1ad54 <__assert_fail@plt+0x9718>
   1abf0:	b	1ac54 <__assert_fail@plt+0x9618>
   1abf4:	add	r0, sp, #4
   1abf8:	mov	r1, #1024	; 0x400
   1abfc:	b	1ac50 <__assert_fail@plt+0x9614>
   1ac00:	add	r0, sp, #4
   1ac04:	mov	r1, r7
   1ac08:	mov	r2, #6
   1ac0c:	bl	1ad54 <__assert_fail@plt+0x9718>
   1ac10:	b	1ac54 <__assert_fail@plt+0x9618>
   1ac14:	add	r0, sp, #4
   1ac18:	mov	r1, r7
   1ac1c:	mov	r2, #5
   1ac20:	bl	1ad54 <__assert_fail@plt+0x9718>
   1ac24:	b	1ac54 <__assert_fail@plt+0x9618>
   1ac28:	add	r0, sp, #4
   1ac2c:	mov	r1, r7
   1ac30:	mov	r2, #8
   1ac34:	bl	1ad54 <__assert_fail@plt+0x9718>
   1ac38:	b	1ac54 <__assert_fail@plt+0x9618>
   1ac3c:	add	r0, sp, #4
   1ac40:	mov	r1, #512	; 0x200
   1ac44:	b	1ac50 <__assert_fail@plt+0x9614>
   1ac48:	add	r0, sp, #4
   1ac4c:	mov	r1, #2
   1ac50:	bl	1aca8 <__assert_fail@plt+0x966c>
   1ac54:	ldr	r1, [r8]
   1ac58:	ldr	r3, [sp]
   1ac5c:	add	r2, r1, r3
   1ac60:	str	r2, [r8]
   1ac64:	ldrb	r1, [r1, r3]
   1ac68:	orr	r5, r0, r5
   1ac6c:	cmp	r1, #0
   1ac70:	orrne	r5, r5, #2
   1ac74:	ldr	r0, [sp, #4]
   1ac78:	str	r0, [r9]
   1ac7c:	mov	r0, r5
   1ac80:	sub	sp, fp, #28
   1ac84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac88:	movw	r0, #55685	; 0xd985
   1ac8c:	movt	r0, #1
   1ac90:	movw	r1, #55725	; 0xd9ad
   1ac94:	movt	r1, #1
   1ac98:	movw	r3, #55817	; 0xda09
   1ac9c:	movt	r3, #1
   1aca0:	mov	r2, #85	; 0x55
   1aca4:	bl	1163c <__assert_fail@plt>
   1aca8:	cmn	r1, #1
   1acac:	ble	1acd8 <__assert_fail@plt+0x969c>
   1acb0:	cmp	r1, #0
   1acb4:	beq	1ad14 <__assert_fail@plt+0x96d8>
   1acb8:	ldr	r2, [r0]
   1acbc:	cmn	r2, #1
   1acc0:	ble	1ad00 <__assert_fail@plt+0x96c4>
   1acc4:	mvn	r3, #-2147483648	; 0x80000000
   1acc8:	udiv	r3, r3, r1
   1accc:	cmp	r3, r2
   1acd0:	bge	1ad14 <__assert_fail@plt+0x96d8>
   1acd4:	b	1ad34 <__assert_fail@plt+0x96f8>
   1acd8:	ldr	r2, [r0]
   1acdc:	cmn	r2, #1
   1ace0:	ble	1ad24 <__assert_fail@plt+0x96e8>
   1ace4:	cmn	r1, #1
   1ace8:	beq	1ad14 <__assert_fail@plt+0x96d8>
   1acec:	mov	r3, #-2147483648	; 0x80000000
   1acf0:	sdiv	r3, r3, r1
   1acf4:	cmp	r3, r2
   1acf8:	bge	1ad14 <__assert_fail@plt+0x96d8>
   1acfc:	b	1ad34 <__assert_fail@plt+0x96f8>
   1ad00:	beq	1ad14 <__assert_fail@plt+0x96d8>
   1ad04:	mov	r3, #-2147483648	; 0x80000000
   1ad08:	sdiv	r2, r3, r2
   1ad0c:	cmp	r2, r1
   1ad10:	blt	1ad34 <__assert_fail@plt+0x96f8>
   1ad14:	ldr	r2, [r0]
   1ad18:	mul	r2, r2, r1
   1ad1c:	mov	r1, #0
   1ad20:	b	1ad48 <__assert_fail@plt+0x970c>
   1ad24:	mvn	r3, #-2147483648	; 0x80000000
   1ad28:	sdiv	r3, r3, r1
   1ad2c:	cmp	r2, r3
   1ad30:	bge	1ad14 <__assert_fail@plt+0x96d8>
   1ad34:	ldr	r1, [r0]
   1ad38:	mvn	r2, #-2147483648	; 0x80000000
   1ad3c:	cmp	r1, #0
   1ad40:	movmi	r2, #-2147483648	; 0x80000000
   1ad44:	mov	r1, #1
   1ad48:	str	r2, [r0]
   1ad4c:	mov	r0, r1
   1ad50:	bx	lr
   1ad54:	push	{r4, r5, r6, r7, fp, lr}
   1ad58:	add	fp, sp, #16
   1ad5c:	cmp	r2, #0
   1ad60:	beq	1ad94 <__assert_fail@plt+0x9758>
   1ad64:	mov	r4, r2
   1ad68:	mov	r5, r1
   1ad6c:	mov	r7, r0
   1ad70:	mov	r6, #0
   1ad74:	mov	r0, r7
   1ad78:	mov	r1, r5
   1ad7c:	bl	1aca8 <__assert_fail@plt+0x966c>
   1ad80:	orr	r6, r0, r6
   1ad84:	subs	r4, r4, #1
   1ad88:	bne	1ad74 <__assert_fail@plt+0x9738>
   1ad8c:	mov	r0, r6
   1ad90:	pop	{r4, r5, r6, r7, fp, pc}
   1ad94:	mov	r6, #0
   1ad98:	mov	r0, r6
   1ad9c:	pop	{r4, r5, r6, r7, fp, pc}
   1ada0:	push	{fp, lr}
   1ada4:	mov	fp, sp
   1ada8:	sub	sp, sp, #8
   1adac:	movw	ip, #57724	; 0xe17c
   1adb0:	movt	ip, #2
   1adb4:	ldr	ip, [ip]
   1adb8:	str	ip, [sp, #4]
   1adbc:	ldr	ip, [fp, #8]
   1adc0:	str	ip, [sp]
   1adc4:	bl	1adcc <__assert_fail@plt+0x9790>
   1adc8:	bl	11618 <abort@plt>
   1adcc:	push	{r4, r5, r6, r7, fp, lr}
   1add0:	add	fp, sp, #16
   1add4:	sub	sp, sp, #16
   1add8:	sub	r0, r0, #1
   1addc:	cmp	r0, #4
   1ade0:	bcs	1ae60 <__assert_fail@plt+0x9824>
   1ade4:	mov	r5, r1
   1ade8:	ldr	r4, [fp, #12]
   1adec:	ldr	r6, [fp, #8]
   1adf0:	movw	r1, #55984	; 0xdab0
   1adf4:	movt	r1, #1
   1adf8:	ldr	r1, [r1, r0, lsl #2]
   1adfc:	cmn	r5, #1
   1ae00:	ble	1ae14 <__assert_fail@plt+0x97d8>
   1ae04:	ldr	r7, [r3, r5, lsl #4]
   1ae08:	movw	r5, #55888	; 0xda50
   1ae0c:	movt	r5, #1
   1ae10:	b	1ae30 <__assert_fail@plt+0x97f4>
   1ae14:	mov	r0, #0
   1ae18:	strb	r0, [sp, #15]
   1ae1c:	strb	r2, [sp, #14]
   1ae20:	movw	r0, #55888	; 0xda50
   1ae24:	movt	r0, #1
   1ae28:	sub	r5, r0, r5
   1ae2c:	add	r7, sp, #14
   1ae30:	mov	r0, #0
   1ae34:	mov	r2, #5
   1ae38:	bl	113a8 <dcgettext@plt>
   1ae3c:	mov	r2, r0
   1ae40:	str	r7, [sp]
   1ae44:	str	r6, [sp, #4]
   1ae48:	mov	r0, r4
   1ae4c:	mov	r1, #0
   1ae50:	mov	r3, r5
   1ae54:	bl	11450 <error@plt>
   1ae58:	sub	sp, fp, #16
   1ae5c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae60:	bl	11618 <abort@plt>
   1ae64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae68:	add	fp, sp, #28
   1ae6c:	sub	sp, sp, #20
   1ae70:	cmp	r2, #37	; 0x25
   1ae74:	bcs	1b2a8 <__assert_fail@plt+0x9c6c>
   1ae78:	mov	r5, r2
   1ae7c:	mov	r6, r1
   1ae80:	mov	r4, r0
   1ae84:	str	r3, [sp, #4]
   1ae88:	ldr	sl, [fp, #8]
   1ae8c:	bl	1151c <__errno_location@plt>
   1ae90:	mov	r7, r0
   1ae94:	mov	r0, #0
   1ae98:	str	r0, [r7]
   1ae9c:	bl	114c8 <__ctype_b_loc@plt>
   1aea0:	ldr	r1, [r0]
   1aea4:	mov	r2, r4
   1aea8:	ldrb	r0, [r2], #1
   1aeac:	add	r3, r1, r0, lsl #1
   1aeb0:	ldrb	r3, [r3, #1]
   1aeb4:	tst	r3, #32
   1aeb8:	bne	1aea8 <__assert_fail@plt+0x986c>
   1aebc:	add	r9, sp, #16
   1aec0:	cmp	r6, #0
   1aec4:	movne	r9, r6
   1aec8:	mov	r8, #4
   1aecc:	cmp	r0, #45	; 0x2d
   1aed0:	beq	1b29c <__assert_fail@plt+0x9c60>
   1aed4:	mov	r0, r4
   1aed8:	mov	r1, r9
   1aedc:	mov	r2, r5
   1aee0:	bl	11564 <strtoumax@plt>
   1aee4:	str	r1, [sp, #12]
   1aee8:	str	r0, [sp, #8]
   1aeec:	ldr	r6, [r9]
   1aef0:	cmp	r6, r4
   1aef4:	beq	1af1c <__assert_fail@plt+0x98e0>
   1aef8:	ldr	r0, [r7]
   1aefc:	cmp	r0, #0
   1af00:	beq	1af54 <__assert_fail@plt+0x9918>
   1af04:	cmp	r0, #34	; 0x22
   1af08:	bne	1b29c <__assert_fail@plt+0x9c60>
   1af0c:	mov	r8, #1
   1af10:	cmp	sl, #0
   1af14:	bne	1af60 <__assert_fail@plt+0x9924>
   1af18:	b	1b28c <__assert_fail@plt+0x9c50>
   1af1c:	cmp	sl, #0
   1af20:	beq	1b29c <__assert_fail@plt+0x9c60>
   1af24:	ldrb	r1, [r6]
   1af28:	cmp	r1, #0
   1af2c:	beq	1b29c <__assert_fail@plt+0x9c60>
   1af30:	mov	r0, sl
   1af34:	bl	114f8 <strchr@plt>
   1af38:	cmp	r0, #0
   1af3c:	beq	1b29c <__assert_fail@plt+0x9c60>
   1af40:	mov	r8, #0
   1af44:	str	r8, [sp, #12]
   1af48:	mov	r0, #1
   1af4c:	str	r0, [sp, #8]
   1af50:	b	1af60 <__assert_fail@plt+0x9924>
   1af54:	mov	r8, r0
   1af58:	cmp	sl, #0
   1af5c:	beq	1b28c <__assert_fail@plt+0x9c50>
   1af60:	ldrb	r4, [r6]
   1af64:	cmp	r4, #0
   1af68:	beq	1b28c <__assert_fail@plt+0x9c50>
   1af6c:	mov	r0, sl
   1af70:	mov	r1, r4
   1af74:	bl	114f8 <strchr@plt>
   1af78:	cmp	r0, #0
   1af7c:	beq	1b1a8 <__assert_fail@plt+0x9b6c>
   1af80:	sub	r0, r4, #69	; 0x45
   1af84:	mov	r7, #1
   1af88:	mov	r5, #1024	; 0x400
   1af8c:	cmp	r0, #47	; 0x2f
   1af90:	bhi	1b0a4 <__assert_fail@plt+0x9a68>
   1af94:	add	r1, pc, #0
   1af98:	ldr	pc, [r1, r0, lsl #2]
   1af9c:	andeq	fp, r1, ip, asr r0
   1afa0:	andeq	fp, r1, r4, lsr #1
   1afa4:	andeq	fp, r1, ip, asr r0
   1afa8:	andeq	fp, r1, r4, lsr #1
   1afac:	andeq	fp, r1, r4, lsr #1
   1afb0:	andeq	fp, r1, r4, lsr #1
   1afb4:	andeq	fp, r1, ip, asr r0
   1afb8:	andeq	fp, r1, r4, lsr #1
   1afbc:	andeq	fp, r1, ip, asr r0
   1afc0:	andeq	fp, r1, r4, lsr #1
   1afc4:	andeq	fp, r1, r4, lsr #1
   1afc8:	andeq	fp, r1, ip, asr r0
   1afcc:	andeq	fp, r1, r4, lsr #1
   1afd0:	andeq	fp, r1, r4, lsr #1
   1afd4:	andeq	fp, r1, r4, lsr #1
   1afd8:	andeq	fp, r1, ip, asr r0
   1afdc:	andeq	fp, r1, r4, lsr #1
   1afe0:	andeq	fp, r1, r4, lsr #1
   1afe4:	andeq	fp, r1, r4, lsr #1
   1afe8:	andeq	fp, r1, r4, lsr #1
   1afec:	andeq	fp, r1, ip, asr r0
   1aff0:	andeq	fp, r1, ip, asr r0
   1aff4:	andeq	fp, r1, r4, lsr #1
   1aff8:	andeq	fp, r1, r4, lsr #1
   1affc:	andeq	fp, r1, r4, lsr #1
   1b000:	andeq	fp, r1, r4, lsr #1
   1b004:	andeq	fp, r1, r4, lsr #1
   1b008:	andeq	fp, r1, r4, lsr #1
   1b00c:	andeq	fp, r1, r4, lsr #1
   1b010:	andeq	fp, r1, r4, lsr #1
   1b014:	andeq	fp, r1, r4, lsr #1
   1b018:	andeq	fp, r1, r4, lsr #1
   1b01c:	andeq	fp, r1, r4, lsr #1
   1b020:	andeq	fp, r1, r4, lsr #1
   1b024:	andeq	fp, r1, ip, asr r0
   1b028:	andeq	fp, r1, r4, lsr #1
   1b02c:	andeq	fp, r1, r4, lsr #1
   1b030:	andeq	fp, r1, r4, lsr #1
   1b034:	andeq	fp, r1, ip, asr r0
   1b038:	andeq	fp, r1, r4, lsr #1
   1b03c:	andeq	fp, r1, ip, asr r0
   1b040:	andeq	fp, r1, r4, lsr #1
   1b044:	andeq	fp, r1, r4, lsr #1
   1b048:	andeq	fp, r1, r4, lsr #1
   1b04c:	andeq	fp, r1, r4, lsr #1
   1b050:	andeq	fp, r1, r4, lsr #1
   1b054:	andeq	fp, r1, r4, lsr #1
   1b058:	andeq	fp, r1, ip, asr r0
   1b05c:	mov	r0, sl
   1b060:	mov	r1, #48	; 0x30
   1b064:	bl	114f8 <strchr@plt>
   1b068:	cmp	r0, #0
   1b06c:	beq	1b0a4 <__assert_fail@plt+0x9a68>
   1b070:	ldrb	r0, [r6, #1]
   1b074:	cmp	r0, #66	; 0x42
   1b078:	cmpne	r0, #68	; 0x44
   1b07c:	bne	1b08c <__assert_fail@plt+0x9a50>
   1b080:	mov	r7, #2
   1b084:	mov	r5, #1000	; 0x3e8
   1b088:	b	1b0a4 <__assert_fail@plt+0x9a68>
   1b08c:	cmp	r0, #105	; 0x69
   1b090:	bne	1b0a4 <__assert_fail@plt+0x9a68>
   1b094:	ldrb	r0, [r6, #2]
   1b098:	mov	r7, #1
   1b09c:	cmp	r0, #66	; 0x42
   1b0a0:	movweq	r7, #3
   1b0a4:	sub	r1, r4, #66	; 0x42
   1b0a8:	cmp	r1, #53	; 0x35
   1b0ac:	bhi	1b1a8 <__assert_fail@plt+0x9b6c>
   1b0b0:	mov	r0, #0
   1b0b4:	add	r2, pc, #0
   1b0b8:	ldr	pc, [r2, r1, lsl #2]
   1b0bc:	andeq	fp, r1, r0, lsl r2
   1b0c0:	andeq	fp, r1, r8, lsr #3
   1b0c4:	andeq	fp, r1, r8, lsr #3
   1b0c8:	andeq	fp, r1, ip, lsl r2
   1b0cc:	andeq	fp, r1, r8, lsr #3
   1b0d0:	muleq	r1, r4, r1
   1b0d4:	andeq	fp, r1, r8, lsr #3
   1b0d8:	andeq	fp, r1, r8, lsr #3
   1b0dc:	andeq	fp, r1, r8, lsr #3
   1b0e0:	andeq	fp, r1, r0, asr #3
   1b0e4:	andeq	fp, r1, r8, lsr #3
   1b0e8:	ldrdeq	fp, [r1], -r4
   1b0ec:	andeq	fp, r1, r8, lsr #3
   1b0f0:	andeq	fp, r1, r8, lsr #3
   1b0f4:	andeq	fp, r1, r0, lsr r2
   1b0f8:	andeq	fp, r1, r8, lsr #3
   1b0fc:	andeq	fp, r1, r8, lsr #3
   1b100:	andeq	fp, r1, r8, lsr #3
   1b104:	andeq	fp, r1, r8, ror #3
   1b108:	andeq	fp, r1, r8, lsr #3
   1b10c:	andeq	fp, r1, r8, lsr #3
   1b110:	andeq	fp, r1, r8, lsr #3
   1b114:	andeq	fp, r1, r8, lsr #3
   1b118:	andeq	fp, r1, r4, asr #4
   1b11c:	strdeq	fp, [r1], -ip
   1b120:	andeq	fp, r1, r8, lsr #3
   1b124:	andeq	fp, r1, r8, lsr #3
   1b128:	andeq	fp, r1, r8, lsr #3
   1b12c:	andeq	fp, r1, r8, lsr #3
   1b130:	andeq	fp, r1, r8, lsr #3
   1b134:	andeq	fp, r1, r8, lsr #3
   1b138:	andeq	fp, r1, r8, lsr #3
   1b13c:	andeq	fp, r1, r8, asr r2
   1b140:	andeq	fp, r1, r0, ror r2
   1b144:	andeq	fp, r1, r8, lsr #3
   1b148:	andeq	fp, r1, r8, lsr #3
   1b14c:	andeq	fp, r1, r8, lsr #3
   1b150:	muleq	r1, r4, r1
   1b154:	andeq	fp, r1, r8, lsr #3
   1b158:	andeq	fp, r1, r8, lsr #3
   1b15c:	andeq	fp, r1, r8, lsr #3
   1b160:	andeq	fp, r1, r0, asr #3
   1b164:	andeq	fp, r1, r8, lsr #3
   1b168:	ldrdeq	fp, [r1], -r4
   1b16c:	andeq	fp, r1, r8, lsr #3
   1b170:	andeq	fp, r1, r8, lsr #3
   1b174:	andeq	fp, r1, r8, lsr #3
   1b178:	andeq	fp, r1, r8, lsr #3
   1b17c:	andeq	fp, r1, r8, lsr #3
   1b180:	andeq	fp, r1, r8, lsr #3
   1b184:	andeq	fp, r1, r8, ror #3
   1b188:	andeq	fp, r1, r8, lsr #3
   1b18c:	andeq	fp, r1, r8, lsr #3
   1b190:	andeq	fp, r1, r4, ror #4
   1b194:	add	r0, sp, #8
   1b198:	mov	r1, r5
   1b19c:	mov	r2, #3
   1b1a0:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b1a4:	b	1b270 <__assert_fail@plt+0x9c34>
   1b1a8:	ldr	r0, [sp, #8]
   1b1ac:	ldr	r1, [sp, #12]
   1b1b0:	ldr	r2, [sp, #4]
   1b1b4:	strd	r0, [r2]
   1b1b8:	orr	r8, r8, #2
   1b1bc:	b	1b29c <__assert_fail@plt+0x9c60>
   1b1c0:	add	r0, sp, #8
   1b1c4:	mov	r1, r5
   1b1c8:	mov	r2, #1
   1b1cc:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b1d0:	b	1b270 <__assert_fail@plt+0x9c34>
   1b1d4:	add	r0, sp, #8
   1b1d8:	mov	r1, r5
   1b1dc:	mov	r2, #2
   1b1e0:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b1e4:	b	1b270 <__assert_fail@plt+0x9c34>
   1b1e8:	add	r0, sp, #8
   1b1ec:	mov	r1, r5
   1b1f0:	mov	r2, #4
   1b1f4:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b1f8:	b	1b270 <__assert_fail@plt+0x9c34>
   1b1fc:	add	r0, sp, #8
   1b200:	mov	r1, r5
   1b204:	mov	r2, #7
   1b208:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b20c:	b	1b270 <__assert_fail@plt+0x9c34>
   1b210:	add	r0, sp, #8
   1b214:	mov	r1, #1024	; 0x400
   1b218:	b	1b26c <__assert_fail@plt+0x9c30>
   1b21c:	add	r0, sp, #8
   1b220:	mov	r1, r5
   1b224:	mov	r2, #6
   1b228:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b22c:	b	1b270 <__assert_fail@plt+0x9c34>
   1b230:	add	r0, sp, #8
   1b234:	mov	r1, r5
   1b238:	mov	r2, #5
   1b23c:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b240:	b	1b270 <__assert_fail@plt+0x9c34>
   1b244:	add	r0, sp, #8
   1b248:	mov	r1, r5
   1b24c:	mov	r2, #8
   1b250:	bl	1b354 <__assert_fail@plt+0x9d18>
   1b254:	b	1b270 <__assert_fail@plt+0x9c34>
   1b258:	add	r0, sp, #8
   1b25c:	mov	r1, #512	; 0x200
   1b260:	b	1b26c <__assert_fail@plt+0x9c30>
   1b264:	add	r0, sp, #8
   1b268:	mov	r1, #2
   1b26c:	bl	1b2c8 <__assert_fail@plt+0x9c8c>
   1b270:	ldr	r1, [r9]
   1b274:	add	r2, r1, r7
   1b278:	str	r2, [r9]
   1b27c:	ldrb	r1, [r1, r7]
   1b280:	orr	r8, r0, r8
   1b284:	cmp	r1, #0
   1b288:	orrne	r8, r8, #2
   1b28c:	ldr	r0, [sp, #8]
   1b290:	ldr	r1, [sp, #12]
   1b294:	ldr	r2, [sp, #4]
   1b298:	strd	r0, [r2]
   1b29c:	mov	r0, r8
   1b2a0:	sub	sp, fp, #28
   1b2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2a8:	movw	r0, #55685	; 0xd985
   1b2ac:	movt	r0, #1
   1b2b0:	movw	r1, #55723	; 0xd9ab
   1b2b4:	movt	r1, #1
   1b2b8:	movw	r3, #56000	; 0xdac0
   1b2bc:	movt	r3, #1
   1b2c0:	mov	r2, #85	; 0x55
   1b2c4:	bl	1163c <__assert_fail@plt>
   1b2c8:	push	{r4, r5, r6, r7, fp, lr}
   1b2cc:	add	fp, sp, #16
   1b2d0:	mov	r5, r1
   1b2d4:	mov	r4, r0
   1b2d8:	cmn	r1, #1
   1b2dc:	ble	1b314 <__assert_fail@plt+0x9cd8>
   1b2e0:	cmp	r5, #0
   1b2e4:	beq	1b334 <__assert_fail@plt+0x9cf8>
   1b2e8:	asr	r3, r5, #31
   1b2ec:	mvn	r6, #0
   1b2f0:	mvn	r0, #0
   1b2f4:	mvn	r1, #0
   1b2f8:	mov	r2, r5
   1b2fc:	bl	1bc00 <__assert_fail@plt+0xa5c4>
   1b300:	ldrd	r2, [r4]
   1b304:	subs	r0, r0, r2
   1b308:	sbcs	r0, r1, r3
   1b30c:	bcc	1b324 <__assert_fail@plt+0x9ce8>
   1b310:	b	1b334 <__assert_fail@plt+0x9cf8>
   1b314:	ldrd	r0, [r4]
   1b318:	orrs	r0, r0, r1
   1b31c:	beq	1b334 <__assert_fail@plt+0x9cf8>
   1b320:	mvn	r6, #0
   1b324:	mov	r0, #1
   1b328:	mvn	r7, #0
   1b32c:	strd	r6, [r4]
   1b330:	pop	{r4, r5, r6, r7, fp, pc}
   1b334:	ldrd	r0, [r4]
   1b338:	umull	r6, r2, r0, r5
   1b33c:	asr	r3, r5, #31
   1b340:	mla	r0, r0, r3, r2
   1b344:	mla	r7, r1, r5, r0
   1b348:	mov	r0, #0
   1b34c:	strd	r6, [r4]
   1b350:	pop	{r4, r5, r6, r7, fp, pc}
   1b354:	push	{r4, r5, r6, r7, fp, lr}
   1b358:	add	fp, sp, #16
   1b35c:	cmp	r2, #0
   1b360:	beq	1b394 <__assert_fail@plt+0x9d58>
   1b364:	mov	r4, r2
   1b368:	mov	r5, r1
   1b36c:	mov	r7, r0
   1b370:	mov	r6, #0
   1b374:	mov	r0, r7
   1b378:	mov	r1, r5
   1b37c:	bl	1b2c8 <__assert_fail@plt+0x9c8c>
   1b380:	orr	r6, r0, r6
   1b384:	subs	r4, r4, #1
   1b388:	bne	1b374 <__assert_fail@plt+0x9d38>
   1b38c:	mov	r0, r6
   1b390:	pop	{r4, r5, r6, r7, fp, pc}
   1b394:	mov	r6, #0
   1b398:	mov	r0, r6
   1b39c:	pop	{r4, r5, r6, r7, fp, pc}
   1b3a0:	clz	r2, r1
   1b3a4:	lsr	r2, r2, #5
   1b3a8:	clz	r3, r0
   1b3ac:	lsr	r3, r3, #5
   1b3b0:	orrs	r2, r3, r2
   1b3b4:	movwne	r1, #1
   1b3b8:	movwne	r0, #1
   1b3bc:	cmp	r1, #0
   1b3c0:	beq	1b3f0 <__assert_fail@plt+0x9db4>
   1b3c4:	mvn	r2, #-2147483648	; 0x80000000
   1b3c8:	udiv	r2, r2, r1
   1b3cc:	cmp	r2, r0
   1b3d0:	bcs	1b3f0 <__assert_fail@plt+0x9db4>
   1b3d4:	push	{fp, lr}
   1b3d8:	mov	fp, sp
   1b3dc:	bl	1151c <__errno_location@plt>
   1b3e0:	mov	r1, #12
   1b3e4:	str	r1, [r0]
   1b3e8:	mov	r0, #0
   1b3ec:	pop	{fp, pc}
   1b3f0:	b	112e8 <calloc@plt>
   1b3f4:	cmp	r0, #0
   1b3f8:	movweq	r0, #1
   1b3fc:	cmn	r0, #1
   1b400:	ble	1b408 <__assert_fail@plt+0x9dcc>
   1b404:	b	11468 <malloc@plt>
   1b408:	push	{fp, lr}
   1b40c:	mov	fp, sp
   1b410:	bl	1151c <__errno_location@plt>
   1b414:	mov	r1, #12
   1b418:	str	r1, [r0]
   1b41c:	mov	r0, #0
   1b420:	pop	{fp, pc}
   1b424:	push	{fp, lr}
   1b428:	mov	fp, sp
   1b42c:	cmp	r0, #0
   1b430:	beq	1b44c <__assert_fail@plt+0x9e10>
   1b434:	cmp	r1, #0
   1b438:	beq	1b458 <__assert_fail@plt+0x9e1c>
   1b43c:	cmn	r1, #1
   1b440:	ble	1b464 <__assert_fail@plt+0x9e28>
   1b444:	pop	{fp, lr}
   1b448:	b	113b4 <realloc@plt>
   1b44c:	mov	r0, r1
   1b450:	pop	{fp, lr}
   1b454:	b	1b3f4 <__assert_fail@plt+0x9db8>
   1b458:	bl	15934 <__assert_fail@plt+0x42f8>
   1b45c:	mov	r0, #0
   1b460:	pop	{fp, pc}
   1b464:	bl	1151c <__errno_location@plt>
   1b468:	mov	r1, #12
   1b46c:	str	r1, [r0]
   1b470:	mov	r0, #0
   1b474:	pop	{fp, pc}
   1b478:	mov	r1, r0
   1b47c:	sub	r2, r0, #65	; 0x41
   1b480:	mov	r0, #1
   1b484:	cmp	r2, #26
   1b488:	subcs	r2, r1, #97	; 0x61
   1b48c:	cmpcs	r2, #26
   1b490:	bcs	1b498 <__assert_fail@plt+0x9e5c>
   1b494:	bx	lr
   1b498:	sub	r1, r1, #48	; 0x30
   1b49c:	cmp	r1, #10
   1b4a0:	movcs	r0, #0
   1b4a4:	bx	lr
   1b4a8:	mov	r1, r0
   1b4ac:	sub	r2, r0, #65	; 0x41
   1b4b0:	mov	r0, #1
   1b4b4:	cmp	r2, #26
   1b4b8:	subcs	r1, r1, #97	; 0x61
   1b4bc:	cmpcs	r1, #26
   1b4c0:	movcs	r0, #0
   1b4c4:	bx	lr
   1b4c8:	mov	r1, #0
   1b4cc:	cmp	r0, #128	; 0x80
   1b4d0:	movwcc	r1, #1
   1b4d4:	mov	r0, r1
   1b4d8:	bx	lr
   1b4dc:	sub	r1, r0, #9
   1b4e0:	clz	r1, r1
   1b4e4:	lsr	r1, r1, #5
   1b4e8:	sub	r0, r0, #32
   1b4ec:	clz	r0, r0
   1b4f0:	lsr	r0, r0, #5
   1b4f4:	orr	r0, r0, r1
   1b4f8:	bx	lr
   1b4fc:	mov	r1, r0
   1b500:	mov	r0, #1
   1b504:	cmp	r1, #32
   1b508:	bxcc	lr
   1b50c:	cmp	r1, #127	; 0x7f
   1b510:	movne	r0, #0
   1b514:	bx	lr
   1b518:	sub	r1, r0, #48	; 0x30
   1b51c:	mov	r0, #0
   1b520:	cmp	r1, #10
   1b524:	movwcc	r0, #1
   1b528:	bx	lr
   1b52c:	sub	r1, r0, #33	; 0x21
   1b530:	mov	r0, #0
   1b534:	cmp	r1, #94	; 0x5e
   1b538:	movwcc	r0, #1
   1b53c:	bx	lr
   1b540:	sub	r1, r0, #97	; 0x61
   1b544:	mov	r0, #0
   1b548:	cmp	r1, #26
   1b54c:	movwcc	r0, #1
   1b550:	bx	lr
   1b554:	sub	r1, r0, #32
   1b558:	mov	r0, #0
   1b55c:	cmp	r1, #95	; 0x5f
   1b560:	movwcc	r0, #1
   1b564:	bx	lr
   1b568:	sub	r1, r0, #33	; 0x21
   1b56c:	cmp	r1, #93	; 0x5d
   1b570:	bhi	1b6fc <__assert_fail@plt+0xa0c0>
   1b574:	mov	r0, #1
   1b578:	add	r2, pc, #0
   1b57c:	ldr	pc, [r2, r1, lsl #2]
   1b580:	strdeq	fp, [r1], -r8
   1b584:	strdeq	fp, [r1], -r8
   1b588:	strdeq	fp, [r1], -r8
   1b58c:	strdeq	fp, [r1], -r8
   1b590:	strdeq	fp, [r1], -r8
   1b594:	strdeq	fp, [r1], -r8
   1b598:	strdeq	fp, [r1], -r8
   1b59c:	strdeq	fp, [r1], -r8
   1b5a0:	strdeq	fp, [r1], -r8
   1b5a4:	strdeq	fp, [r1], -r8
   1b5a8:	strdeq	fp, [r1], -r8
   1b5ac:	strdeq	fp, [r1], -r8
   1b5b0:	strdeq	fp, [r1], -r8
   1b5b4:	strdeq	fp, [r1], -r8
   1b5b8:	strdeq	fp, [r1], -r8
   1b5bc:	strdeq	fp, [r1], -ip
   1b5c0:	strdeq	fp, [r1], -ip
   1b5c4:	strdeq	fp, [r1], -ip
   1b5c8:	strdeq	fp, [r1], -ip
   1b5cc:	strdeq	fp, [r1], -ip
   1b5d0:	strdeq	fp, [r1], -ip
   1b5d4:	strdeq	fp, [r1], -ip
   1b5d8:	strdeq	fp, [r1], -ip
   1b5dc:	strdeq	fp, [r1], -ip
   1b5e0:	strdeq	fp, [r1], -ip
   1b5e4:	strdeq	fp, [r1], -r8
   1b5e8:	strdeq	fp, [r1], -r8
   1b5ec:	strdeq	fp, [r1], -r8
   1b5f0:	strdeq	fp, [r1], -r8
   1b5f4:	strdeq	fp, [r1], -r8
   1b5f8:	strdeq	fp, [r1], -r8
   1b5fc:	strdeq	fp, [r1], -r8
   1b600:	strdeq	fp, [r1], -ip
   1b604:	strdeq	fp, [r1], -ip
   1b608:	strdeq	fp, [r1], -ip
   1b60c:	strdeq	fp, [r1], -ip
   1b610:	strdeq	fp, [r1], -ip
   1b614:	strdeq	fp, [r1], -ip
   1b618:	strdeq	fp, [r1], -ip
   1b61c:	strdeq	fp, [r1], -ip
   1b620:	strdeq	fp, [r1], -ip
   1b624:	strdeq	fp, [r1], -ip
   1b628:	strdeq	fp, [r1], -ip
   1b62c:	strdeq	fp, [r1], -ip
   1b630:	strdeq	fp, [r1], -ip
   1b634:	strdeq	fp, [r1], -ip
   1b638:	strdeq	fp, [r1], -ip
   1b63c:	strdeq	fp, [r1], -ip
   1b640:	strdeq	fp, [r1], -ip
   1b644:	strdeq	fp, [r1], -ip
   1b648:	strdeq	fp, [r1], -ip
   1b64c:	strdeq	fp, [r1], -ip
   1b650:	strdeq	fp, [r1], -ip
   1b654:	strdeq	fp, [r1], -ip
   1b658:	strdeq	fp, [r1], -ip
   1b65c:	strdeq	fp, [r1], -ip
   1b660:	strdeq	fp, [r1], -ip
   1b664:	strdeq	fp, [r1], -ip
   1b668:	strdeq	fp, [r1], -r8
   1b66c:	strdeq	fp, [r1], -r8
   1b670:	strdeq	fp, [r1], -r8
   1b674:	strdeq	fp, [r1], -r8
   1b678:	strdeq	fp, [r1], -r8
   1b67c:	strdeq	fp, [r1], -r8
   1b680:	strdeq	fp, [r1], -ip
   1b684:	strdeq	fp, [r1], -ip
   1b688:	strdeq	fp, [r1], -ip
   1b68c:	strdeq	fp, [r1], -ip
   1b690:	strdeq	fp, [r1], -ip
   1b694:	strdeq	fp, [r1], -ip
   1b698:	strdeq	fp, [r1], -ip
   1b69c:	strdeq	fp, [r1], -ip
   1b6a0:	strdeq	fp, [r1], -ip
   1b6a4:	strdeq	fp, [r1], -ip
   1b6a8:	strdeq	fp, [r1], -ip
   1b6ac:	strdeq	fp, [r1], -ip
   1b6b0:	strdeq	fp, [r1], -ip
   1b6b4:	strdeq	fp, [r1], -ip
   1b6b8:	strdeq	fp, [r1], -ip
   1b6bc:	strdeq	fp, [r1], -ip
   1b6c0:	strdeq	fp, [r1], -ip
   1b6c4:	strdeq	fp, [r1], -ip
   1b6c8:	strdeq	fp, [r1], -ip
   1b6cc:	strdeq	fp, [r1], -ip
   1b6d0:	strdeq	fp, [r1], -ip
   1b6d4:	strdeq	fp, [r1], -ip
   1b6d8:	strdeq	fp, [r1], -ip
   1b6dc:	strdeq	fp, [r1], -ip
   1b6e0:	strdeq	fp, [r1], -ip
   1b6e4:	strdeq	fp, [r1], -ip
   1b6e8:	strdeq	fp, [r1], -r8
   1b6ec:	strdeq	fp, [r1], -r8
   1b6f0:	strdeq	fp, [r1], -r8
   1b6f4:	strdeq	fp, [r1], -r8
   1b6f8:	bx	lr
   1b6fc:	mov	r0, #0
   1b700:	bx	lr
   1b704:	sub	r0, r0, #9
   1b708:	cmp	r0, #23
   1b70c:	movhi	r0, #0
   1b710:	bxhi	lr
   1b714:	bic	r0, r0, #-16777216	; 0xff000000
   1b718:	movw	r1, #31
   1b71c:	movt	r1, #128	; 0x80
   1b720:	mov	r2, #1
   1b724:	and	r0, r2, r1, lsr r0
   1b728:	bx	lr
   1b72c:	sub	r1, r0, #65	; 0x41
   1b730:	mov	r0, #0
   1b734:	cmp	r1, #26
   1b738:	movwcc	r0, #1
   1b73c:	bx	lr
   1b740:	mov	r1, r0
   1b744:	sub	r2, r0, #48	; 0x30
   1b748:	mov	r0, #1
   1b74c:	cmp	r2, #22
   1b750:	bhi	1b768 <__assert_fail@plt+0xa12c>
   1b754:	mov	ip, #1
   1b758:	movw	r3, #1023	; 0x3ff
   1b75c:	movt	r3, #126	; 0x7e
   1b760:	tst	r3, ip, lsl r2
   1b764:	bxne	lr
   1b768:	sub	r1, r1, #97	; 0x61
   1b76c:	cmp	r1, #6
   1b770:	movcs	r0, #0
   1b774:	bxcs	lr
   1b778:	bx	lr
   1b77c:	sub	r1, r0, #65	; 0x41
   1b780:	cmp	r1, #26
   1b784:	addcc	r0, r0, #32
   1b788:	bx	lr
   1b78c:	sub	r1, r0, #97	; 0x61
   1b790:	cmp	r1, #26
   1b794:	subcc	r0, r0, #32
   1b798:	bx	lr
   1b79c:	push	{r4, r5, r6, sl, fp, lr}
   1b7a0:	add	fp, sp, #16
   1b7a4:	mov	r4, r0
   1b7a8:	bl	1142c <__fpending@plt>
   1b7ac:	mov	r5, r0
   1b7b0:	mov	r0, r4
   1b7b4:	bl	11438 <ferror_unlocked@plt>
   1b7b8:	mov	r6, r0
   1b7bc:	mov	r0, r4
   1b7c0:	bl	1577c <__assert_fail@plt+0x4140>
   1b7c4:	cmp	r6, #0
   1b7c8:	beq	1b7ec <__assert_fail@plt+0xa1b0>
   1b7cc:	mvn	r4, #0
   1b7d0:	cmp	r0, #0
   1b7d4:	bne	1b818 <__assert_fail@plt+0xa1dc>
   1b7d8:	bl	1151c <__errno_location@plt>
   1b7dc:	mov	r1, #0
   1b7e0:	str	r1, [r0]
   1b7e4:	mov	r0, r4
   1b7e8:	pop	{r4, r5, r6, sl, fp, pc}
   1b7ec:	cmp	r0, #0
   1b7f0:	mov	r4, r0
   1b7f4:	mvnne	r4, #0
   1b7f8:	cmp	r5, #0
   1b7fc:	bne	1b818 <__assert_fail@plt+0xa1dc>
   1b800:	cmp	r0, #0
   1b804:	beq	1b818 <__assert_fail@plt+0xa1dc>
   1b808:	bl	1151c <__errno_location@plt>
   1b80c:	ldr	r0, [r0]
   1b810:	subs	r4, r0, #9
   1b814:	mvnne	r4, #0
   1b818:	mov	r0, r4
   1b81c:	pop	{r4, r5, r6, sl, fp, pc}
   1b820:	sub	sp, sp, #8
   1b824:	push	{fp, lr}
   1b828:	mov	fp, sp
   1b82c:	sub	sp, sp, #8
   1b830:	str	r2, [fp, #8]
   1b834:	str	r3, [fp, #12]
   1b838:	add	r2, fp, #8
   1b83c:	str	r2, [sp, #4]
   1b840:	cmp	r1, #11
   1b844:	bhi	1b884 <__assert_fail@plt+0xa248>
   1b848:	mov	r2, #1
   1b84c:	movw	r3, #1300	; 0x514
   1b850:	tst	r3, r2, lsl r1
   1b854:	bne	1b8d4 <__assert_fail@plt+0xa298>
   1b858:	movw	r3, #2570	; 0xa0a
   1b85c:	tst	r3, r2, lsl r1
   1b860:	bne	1b8ac <__assert_fail@plt+0xa270>
   1b864:	cmp	r1, #0
   1b868:	bne	1b884 <__assert_fail@plt+0xa248>
   1b86c:	ldr	r1, [sp, #4]
   1b870:	add	r2, r1, #4
   1b874:	str	r2, [sp, #4]
   1b878:	ldr	r1, [r1]
   1b87c:	bl	1b8f8 <__assert_fail@plt+0xa2bc>
   1b880:	b	1b8e8 <__assert_fail@plt+0xa2ac>
   1b884:	sub	r2, r1, #1024	; 0x400
   1b888:	cmp	r2, #10
   1b88c:	bhi	1b8d4 <__assert_fail@plt+0xa298>
   1b890:	mov	ip, #1
   1b894:	movw	r3, #645	; 0x285
   1b898:	tst	r3, ip, lsl r2
   1b89c:	bne	1b8d4 <__assert_fail@plt+0xa298>
   1b8a0:	movw	r3, #1282	; 0x502
   1b8a4:	tst	r3, ip, lsl r2
   1b8a8:	beq	1b8b4 <__assert_fail@plt+0xa278>
   1b8ac:	bl	115a0 <fcntl64@plt>
   1b8b0:	b	1b8e8 <__assert_fail@plt+0xa2ac>
   1b8b4:	cmp	r2, #6
   1b8b8:	bne	1b8d4 <__assert_fail@plt+0xa298>
   1b8bc:	ldr	r1, [sp, #4]
   1b8c0:	add	r2, r1, #4
   1b8c4:	str	r2, [sp, #4]
   1b8c8:	ldr	r1, [r1]
   1b8cc:	bl	1b904 <__assert_fail@plt+0xa2c8>
   1b8d0:	b	1b8e8 <__assert_fail@plt+0xa2ac>
   1b8d4:	ldr	r2, [sp, #4]
   1b8d8:	add	r3, r2, #4
   1b8dc:	str	r3, [sp, #4]
   1b8e0:	ldr	r2, [r2]
   1b8e4:	bl	115a0 <fcntl64@plt>
   1b8e8:	mov	sp, fp
   1b8ec:	pop	{fp, lr}
   1b8f0:	add	sp, sp, #8
   1b8f4:	bx	lr
   1b8f8:	mov	r2, r1
   1b8fc:	mov	r1, #0
   1b900:	b	115a0 <fcntl64@plt>
   1b904:	push	{r4, r5, r6, r7, fp, lr}
   1b908:	add	fp, sp, #16
   1b90c:	mov	r5, r1
   1b910:	mov	r6, r0
   1b914:	movw	r7, #58336	; 0xe3e0
   1b918:	movt	r7, #2
   1b91c:	ldr	r0, [r7]
   1b920:	cmp	r0, #0
   1b924:	bmi	1b988 <__assert_fail@plt+0xa34c>
   1b928:	mov	r0, r6
   1b92c:	movw	r1, #1030	; 0x406
   1b930:	mov	r2, r5
   1b934:	bl	115a0 <fcntl64@plt>
   1b938:	mov	r4, r0
   1b93c:	cmn	r0, #1
   1b940:	bgt	1b974 <__assert_fail@plt+0xa338>
   1b944:	bl	1151c <__errno_location@plt>
   1b948:	ldr	r0, [r0]
   1b94c:	cmp	r0, #22
   1b950:	bne	1b974 <__assert_fail@plt+0xa338>
   1b954:	mov	r0, r6
   1b958:	mov	r1, r5
   1b95c:	bl	1b8f8 <__assert_fail@plt+0xa2bc>
   1b960:	mov	r4, r0
   1b964:	cmp	r0, #0
   1b968:	bmi	1b9d8 <__assert_fail@plt+0xa39c>
   1b96c:	mvn	r0, #0
   1b970:	b	1b978 <__assert_fail@plt+0xa33c>
   1b974:	mov	r0, #1
   1b978:	str	r0, [r7]
   1b97c:	cmp	r4, #0
   1b980:	bpl	1b9a0 <__assert_fail@plt+0xa364>
   1b984:	b	1b9d8 <__assert_fail@plt+0xa39c>
   1b988:	mov	r0, r6
   1b98c:	mov	r1, r5
   1b990:	bl	1b8f8 <__assert_fail@plt+0xa2bc>
   1b994:	mov	r4, r0
   1b998:	cmp	r4, #0
   1b99c:	bmi	1b9d8 <__assert_fail@plt+0xa39c>
   1b9a0:	ldr	r0, [r7]
   1b9a4:	cmn	r0, #1
   1b9a8:	bne	1b9d8 <__assert_fail@plt+0xa39c>
   1b9ac:	mov	r0, r4
   1b9b0:	mov	r1, #1
   1b9b4:	bl	115a0 <fcntl64@plt>
   1b9b8:	cmp	r0, #0
   1b9bc:	bmi	1b9e0 <__assert_fail@plt+0xa3a4>
   1b9c0:	orr	r2, r0, #1
   1b9c4:	mov	r0, r4
   1b9c8:	mov	r1, #2
   1b9cc:	bl	115a0 <fcntl64@plt>
   1b9d0:	cmn	r0, #1
   1b9d4:	beq	1b9e0 <__assert_fail@plt+0xa3a4>
   1b9d8:	mov	r0, r4
   1b9dc:	pop	{r4, r5, r6, r7, fp, pc}
   1b9e0:	bl	1151c <__errno_location@plt>
   1b9e4:	mov	r5, r0
   1b9e8:	ldr	r6, [r0]
   1b9ec:	mov	r0, r4
   1b9f0:	bl	11624 <close@plt>
   1b9f4:	str	r6, [r5]
   1b9f8:	mvn	r4, #0
   1b9fc:	mov	r0, r4
   1ba00:	pop	{r4, r5, r6, r7, fp, pc}
   1ba04:	push	{fp, lr}
   1ba08:	mov	fp, sp
   1ba0c:	bl	1151c <__errno_location@plt>
   1ba10:	mov	r1, #12
   1ba14:	str	r1, [r0]
   1ba18:	mov	r0, #0
   1ba1c:	pop	{fp, pc}
   1ba20:	b	1b3f4 <__assert_fail@plt+0x9db8>
   1ba24:	cmp	r1, #0
   1ba28:	orreq	r1, r1, #1
   1ba2c:	b	1b424 <__assert_fail@plt+0x9de8>
   1ba30:	b	1b3a0 <__assert_fail@plt+0x9d64>
   1ba34:	clz	r3, r2
   1ba38:	lsr	ip, r3, #5
   1ba3c:	clz	r3, r1
   1ba40:	lsr	r3, r3, #5
   1ba44:	orrs	r3, r3, ip
   1ba48:	movwne	r1, #1
   1ba4c:	movwne	r2, #1
   1ba50:	b	1baf0 <__assert_fail@plt+0xa4b4>
   1ba54:	push	{fp, lr}
   1ba58:	mov	fp, sp
   1ba5c:	mov	r0, #14
   1ba60:	bl	115c4 <nl_langinfo@plt>
   1ba64:	movw	r1, #53460	; 0xd0d4
   1ba68:	movt	r1, #1
   1ba6c:	cmp	r0, #0
   1ba70:	movne	r1, r0
   1ba74:	ldrb	r2, [r1]
   1ba78:	movw	r0, #56079	; 0xdb0f
   1ba7c:	movt	r0, #1
   1ba80:	cmp	r2, #0
   1ba84:	movne	r0, r1
   1ba88:	pop	{fp, pc}
   1ba8c:	push	{r4, r5, r6, r7, fp, lr}
   1ba90:	add	fp, sp, #16
   1ba94:	sub	sp, sp, #8
   1ba98:	mov	r7, r2
   1ba9c:	mov	r4, r1
   1baa0:	add	r5, sp, #4
   1baa4:	cmp	r0, #0
   1baa8:	movne	r5, r0
   1baac:	mov	r0, r5
   1bab0:	bl	11444 <mbrtowc@plt>
   1bab4:	mov	r6, r0
   1bab8:	cmp	r7, #0
   1babc:	beq	1bae4 <__assert_fail@plt+0xa4a8>
   1bac0:	cmn	r6, #2
   1bac4:	bcc	1bae4 <__assert_fail@plt+0xa4a8>
   1bac8:	mov	r0, #0
   1bacc:	bl	15a20 <__assert_fail@plt+0x43e4>
   1bad0:	cmp	r0, #0
   1bad4:	bne	1bae4 <__assert_fail@plt+0xa4a8>
   1bad8:	ldrb	r0, [r4]
   1badc:	str	r0, [r5]
   1bae0:	mov	r6, #1
   1bae4:	mov	r0, r6
   1bae8:	sub	sp, fp, #16
   1baec:	pop	{r4, r5, r6, r7, fp, pc}
   1baf0:	cmp	r2, #0
   1baf4:	beq	1bb24 <__assert_fail@plt+0xa4e8>
   1baf8:	mvn	r3, #0
   1bafc:	udiv	r3, r3, r2
   1bb00:	cmp	r3, r1
   1bb04:	bcs	1bb24 <__assert_fail@plt+0xa4e8>
   1bb08:	push	{fp, lr}
   1bb0c:	mov	fp, sp
   1bb10:	bl	1151c <__errno_location@plt>
   1bb14:	mov	r1, #12
   1bb18:	str	r1, [r0]
   1bb1c:	mov	r0, #0
   1bb20:	pop	{fp, pc}
   1bb24:	mul	r1, r2, r1
   1bb28:	b	1b424 <__assert_fail@plt+0x9de8>
   1bb2c:	cmp	r3, #0
   1bb30:	cmpeq	r2, #0
   1bb34:	bne	1bb58 <__assert_fail@plt+0xa51c>
   1bb38:	cmp	r1, #0
   1bb3c:	movlt	r1, #-2147483648	; 0x80000000
   1bb40:	movlt	r0, #0
   1bb44:	blt	1bb54 <__assert_fail@plt+0xa518>
   1bb48:	cmpeq	r0, #0
   1bb4c:	mvnne	r1, #-2147483648	; 0x80000000
   1bb50:	mvnne	r0, #0
   1bb54:	b	1bc3c <__assert_fail@plt+0xa600>
   1bb58:	sub	sp, sp, #8
   1bb5c:	push	{sp, lr}
   1bb60:	cmp	r1, #0
   1bb64:	blt	1bb84 <__assert_fail@plt+0xa548>
   1bb68:	cmp	r3, #0
   1bb6c:	blt	1bbb8 <__assert_fail@plt+0xa57c>
   1bb70:	bl	1bc4c <__assert_fail@plt+0xa610>
   1bb74:	ldr	lr, [sp, #4]
   1bb78:	add	sp, sp, #8
   1bb7c:	pop	{r2, r3}
   1bb80:	bx	lr
   1bb84:	rsbs	r0, r0, #0
   1bb88:	sbc	r1, r1, r1, lsl #1
   1bb8c:	cmp	r3, #0
   1bb90:	blt	1bbdc <__assert_fail@plt+0xa5a0>
   1bb94:	bl	1bc4c <__assert_fail@plt+0xa610>
   1bb98:	ldr	lr, [sp, #4]
   1bb9c:	add	sp, sp, #8
   1bba0:	pop	{r2, r3}
   1bba4:	rsbs	r0, r0, #0
   1bba8:	sbc	r1, r1, r1, lsl #1
   1bbac:	rsbs	r2, r2, #0
   1bbb0:	sbc	r3, r3, r3, lsl #1
   1bbb4:	bx	lr
   1bbb8:	rsbs	r2, r2, #0
   1bbbc:	sbc	r3, r3, r3, lsl #1
   1bbc0:	bl	1bc4c <__assert_fail@plt+0xa610>
   1bbc4:	ldr	lr, [sp, #4]
   1bbc8:	add	sp, sp, #8
   1bbcc:	pop	{r2, r3}
   1bbd0:	rsbs	r0, r0, #0
   1bbd4:	sbc	r1, r1, r1, lsl #1
   1bbd8:	bx	lr
   1bbdc:	rsbs	r2, r2, #0
   1bbe0:	sbc	r3, r3, r3, lsl #1
   1bbe4:	bl	1bc4c <__assert_fail@plt+0xa610>
   1bbe8:	ldr	lr, [sp, #4]
   1bbec:	add	sp, sp, #8
   1bbf0:	pop	{r2, r3}
   1bbf4:	rsbs	r2, r2, #0
   1bbf8:	sbc	r3, r3, r3, lsl #1
   1bbfc:	bx	lr
   1bc00:	cmp	r3, #0
   1bc04:	cmpeq	r2, #0
   1bc08:	bne	1bc20 <__assert_fail@plt+0xa5e4>
   1bc0c:	cmp	r1, #0
   1bc10:	cmpeq	r0, #0
   1bc14:	mvnne	r1, #0
   1bc18:	mvnne	r0, #0
   1bc1c:	b	1bc3c <__assert_fail@plt+0xa600>
   1bc20:	sub	sp, sp, #8
   1bc24:	push	{sp, lr}
   1bc28:	bl	1bc4c <__assert_fail@plt+0xa610>
   1bc2c:	ldr	lr, [sp, #4]
   1bc30:	add	sp, sp, #8
   1bc34:	pop	{r2, r3}
   1bc38:	bx	lr
   1bc3c:	push	{r1, lr}
   1bc40:	mov	r0, #8
   1bc44:	bl	11300 <raise@plt>
   1bc48:	pop	{r1, pc}
   1bc4c:	cmp	r1, r3
   1bc50:	cmpeq	r0, r2
   1bc54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc58:	mov	r4, r0
   1bc5c:	movcc	r0, #0
   1bc60:	mov	r5, r1
   1bc64:	ldr	lr, [sp, #36]	; 0x24
   1bc68:	movcc	r1, r0
   1bc6c:	bcc	1bd68 <__assert_fail@plt+0xa72c>
   1bc70:	cmp	r3, #0
   1bc74:	clzeq	ip, r2
   1bc78:	clzne	ip, r3
   1bc7c:	addeq	ip, ip, #32
   1bc80:	cmp	r5, #0
   1bc84:	clzeq	r1, r4
   1bc88:	addeq	r1, r1, #32
   1bc8c:	clzne	r1, r5
   1bc90:	sub	ip, ip, r1
   1bc94:	sub	sl, ip, #32
   1bc98:	lsl	r9, r3, ip
   1bc9c:	rsb	fp, ip, #32
   1bca0:	orr	r9, r9, r2, lsl sl
   1bca4:	orr	r9, r9, r2, lsr fp
   1bca8:	lsl	r8, r2, ip
   1bcac:	cmp	r5, r9
   1bcb0:	cmpeq	r4, r8
   1bcb4:	movcc	r0, #0
   1bcb8:	movcc	r1, r0
   1bcbc:	bcc	1bcd8 <__assert_fail@plt+0xa69c>
   1bcc0:	mov	r0, #1
   1bcc4:	subs	r4, r4, r8
   1bcc8:	lsl	r1, r0, sl
   1bccc:	orr	r1, r1, r0, lsr fp
   1bcd0:	lsl	r0, r0, ip
   1bcd4:	sbc	r5, r5, r9
   1bcd8:	cmp	ip, #0
   1bcdc:	beq	1bd68 <__assert_fail@plt+0xa72c>
   1bce0:	lsr	r6, r8, #1
   1bce4:	orr	r6, r6, r9, lsl #31
   1bce8:	lsr	r7, r9, #1
   1bcec:	mov	r2, ip
   1bcf0:	b	1bd14 <__assert_fail@plt+0xa6d8>
   1bcf4:	subs	r3, r4, r6
   1bcf8:	sbc	r8, r5, r7
   1bcfc:	adds	r3, r3, r3
   1bd00:	adc	r8, r8, r8
   1bd04:	adds	r4, r3, #1
   1bd08:	adc	r5, r8, #0
   1bd0c:	subs	r2, r2, #1
   1bd10:	beq	1bd30 <__assert_fail@plt+0xa6f4>
   1bd14:	cmp	r5, r7
   1bd18:	cmpeq	r4, r6
   1bd1c:	bcs	1bcf4 <__assert_fail@plt+0xa6b8>
   1bd20:	adds	r4, r4, r4
   1bd24:	adc	r5, r5, r5
   1bd28:	subs	r2, r2, #1
   1bd2c:	bne	1bd14 <__assert_fail@plt+0xa6d8>
   1bd30:	lsr	r3, r4, ip
   1bd34:	orr	r3, r3, r5, lsl fp
   1bd38:	lsr	r2, r5, ip
   1bd3c:	orr	r3, r3, r5, lsr sl
   1bd40:	adds	r0, r0, r4
   1bd44:	mov	r4, r3
   1bd48:	lsl	r3, r2, ip
   1bd4c:	orr	r3, r3, r4, lsl sl
   1bd50:	lsl	ip, r4, ip
   1bd54:	orr	r3, r3, r4, lsr fp
   1bd58:	adc	r1, r1, r5
   1bd5c:	subs	r0, r0, ip
   1bd60:	mov	r5, r2
   1bd64:	sbc	r1, r1, r3
   1bd68:	cmp	lr, #0
   1bd6c:	strdne	r4, [lr]
   1bd70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bd78:	mov	r7, r0
   1bd7c:	ldr	r6, [pc, #72]	; 1bdcc <__assert_fail@plt+0xa790>
   1bd80:	ldr	r5, [pc, #72]	; 1bdd0 <__assert_fail@plt+0xa794>
   1bd84:	add	r6, pc, r6
   1bd88:	add	r5, pc, r5
   1bd8c:	sub	r6, r6, r5
   1bd90:	mov	r8, r1
   1bd94:	mov	r9, r2
   1bd98:	bl	112bc <fdopen@plt-0x20>
   1bd9c:	asrs	r6, r6, #2
   1bda0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bda4:	mov	r4, #0
   1bda8:	add	r4, r4, #1
   1bdac:	ldr	r3, [r5], #4
   1bdb0:	mov	r2, r9
   1bdb4:	mov	r1, r8
   1bdb8:	mov	r0, r7
   1bdbc:	blx	r3
   1bdc0:	cmp	r6, r4
   1bdc4:	bne	1bda8 <__assert_fail@plt+0xa76c>
   1bdc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bdcc:	andeq	r2, r1, r0, lsl #3
   1bdd0:	andeq	r2, r1, r8, ror r1
   1bdd4:	bx	lr
   1bdd8:	ldr	r3, [pc, #12]	; 1bdec <__assert_fail@plt+0xa7b0>
   1bddc:	mov	r1, #0
   1bde0:	add	r3, pc, r3
   1bde4:	ldr	r2, [r3]
   1bde8:	b	11534 <__cxa_atexit@plt>
   1bdec:	andeq	r2, r1, r4, asr r3
   1bdf0:	mov	r2, r1
   1bdf4:	mov	r1, r0
   1bdf8:	mov	r0, #3
   1bdfc:	b	113fc <__fxstat64@plt>

Disassembly of section .fini:

0001be00 <.fini>:
   1be00:	push	{r3, lr}
   1be04:	pop	{r3, pc}
