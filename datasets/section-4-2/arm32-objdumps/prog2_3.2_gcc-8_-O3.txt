
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

0001066c <.init>:
   1066c:	push	{r3, lr}
   10670:	bl	10a6c <_start@@Base+0x3c>
   10674:	pop	{r3, pc}

Disassembly of section .plt:

00010678 <printf@plt-0x14>:
   10678:	push	{lr}		; (str lr, [sp, #-4]!)
   1067c:	ldr	lr, [pc, #4]	; 10688 <printf@plt-0x4>
   10680:	add	lr, pc, lr
   10684:	ldr	pc, [lr, #8]!
   10688:	andeq	r1, r1, r8, ror r9

0001068c <printf@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #69632	; 0x11000
   10694:	ldr	pc, [ip, #2424]!	; 0x978

00010698 <puts@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #69632	; 0x11000
   106a0:	ldr	pc, [ip, #2416]!	; 0x970

000106a4 <__libc_start_main@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #69632	; 0x11000
   106ac:	ldr	pc, [ip, #2408]!	; 0x968

000106b0 <__gmon_start__@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2400]!	; 0x960

000106bc <strlen@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2392]!	; 0x958

000106c8 <abort@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2384]!	; 0x950

Disassembly of section .text:

000106d4 <main@@Base>:
   106d4:	movw	r3, #4492	; 0x118c
   106d8:	movt	r3, #1
   106dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   106e0:	ldrd	r4, [r3, #8]
   106e4:	movw	r0, #4516	; 0x11a4
   106e8:	movt	r0, #1
   106ec:	strd	sl, [sp, #24]
   106f0:	ldrd	sl, [r3]
   106f4:	strd	r6, [sp, #8]
   106f8:	ldrd	r2, [r3, #16]
   106fc:	strd	r8, [sp, #16]
   10700:	str	lr, [sp, #32]
   10704:	sub	sp, sp, #76	; 0x4c
   10708:	add	r8, sp, #48	; 0x30
   1070c:	add	r6, sp, #72	; 0x48
   10710:	strd	sl, [sp, #24]
   10714:	mov	r7, r8
   10718:	strd	r4, [sp, #32]
   1071c:	strd	r2, [sp, #40]	; 0x28
   10720:	strd	sl, [sp, #48]	; 0x30
   10724:	strd	r4, [r8, #8]
   10728:	movw	r5, #4540	; 0x11bc
   1072c:	movt	r5, #1
   10730:	strd	r2, [r8, #16]
   10734:	mov	r4, r8
   10738:	bl	10698 <puts@plt>
   1073c:	movw	r0, #4532	; 0x11b4
   10740:	movt	r0, #1
   10744:	bl	1068c <printf@plt>
   10748:	ldr	r1, [r4], #4
   1074c:	mov	r0, r5
   10750:	bl	1068c <printf@plt>
   10754:	cmp	r4, r6
   10758:	bne	10748 <main@@Base+0x74>
   1075c:	movw	r0, #4656	; 0x1230
   10760:	movt	r0, #1
   10764:	bl	10698 <puts@plt>
   10768:	mov	r0, r8
   1076c:	movw	r3, #2848	; 0xb20
   10770:	movt	r3, #1
   10774:	mov	r2, #4
   10778:	mov	r1, #6
   1077c:	movw	r5, #4540	; 0x11bc
   10780:	movt	r5, #1
   10784:	mov	r4, r8
   10788:	bl	10c60 <sort@@Base>
   1078c:	movw	r0, #4544	; 0x11c0
   10790:	movt	r0, #1
   10794:	bl	1068c <printf@plt>
   10798:	ldr	r1, [r4], #4
   1079c:	mov	r0, r5
   107a0:	bl	1068c <printf@plt>
   107a4:	cmp	r4, r6
   107a8:	bne	10798 <main@@Base+0xc4>
   107ac:	movw	r0, #4656	; 0x1230
   107b0:	movt	r0, #1
   107b4:	bl	10698 <puts@plt>
   107b8:	ldrd	r4, [sp, #24]
   107bc:	movw	r0, #4552	; 0x11c8
   107c0:	movt	r0, #1
   107c4:	ldrd	r2, [sp, #32]
   107c8:	ldrd	sl, [sp, #40]	; 0x28
   107cc:	strd	r4, [sp, #48]	; 0x30
   107d0:	strd	r2, [r8, #8]
   107d4:	strd	sl, [r8, #16]
   107d8:	bl	10698 <puts@plt>
   107dc:	ldr	r3, [sp, #48]	; 0x30
   107e0:	mov	r1, #4
   107e4:	str	r1, [sp, #12]
   107e8:	cmp	r3, r1
   107ec:	beq	10a0c <main@@Base+0x338>
   107f0:	ldr	r3, [sp, #54]	; 0x36
   107f4:	cmp	r3, r1
   107f8:	beq	109e4 <main@@Base+0x310>
   107fc:	ldr	r3, [sp, #60]	; 0x3c
   10800:	cmp	r3, r1
   10804:	beq	10a14 <main@@Base+0x340>
   10808:	ldr	r3, [sp, #66]	; 0x42
   1080c:	cmp	r3, r1
   10810:	beq	109fc <main@@Base+0x328>
   10814:	ldr	r2, [sp, #72]	; 0x48
   10818:	cmp	r2, r1
   1081c:	beq	109e8 <main@@Base+0x314>
   10820:	ldr	r3, [sp, #78]	; 0x4e
   10824:	cmp	r3, r1
   10828:	beq	10a04 <main@@Base+0x330>
   1082c:	movw	r0, #4564	; 0x11d4
   10830:	movt	r0, #1
   10834:	bl	1068c <printf@plt>
   10838:	ldrd	sl, [sp, #24]
   1083c:	movw	r9, #2848	; 0xb20
   10840:	movt	r9, #1
   10844:	mov	r3, r9
   10848:	mov	r2, #4
   1084c:	ldrd	r4, [sp, #40]	; 0x28
   10850:	mov	r1, #6
   10854:	mov	r0, r8
   10858:	strd	sl, [sp, #48]	; 0x30
   1085c:	ldrd	sl, [sp, #32]
   10860:	strd	sl, [r8, #8]
   10864:	strd	r4, [r8, #16]
   10868:	bl	10c60 <sort@@Base>
   1086c:	movw	r0, #4600	; 0x11f8
   10870:	movt	r0, #1
   10874:	bl	10698 <puts@plt>
   10878:	mov	r3, #4
   1087c:	mov	r2, #6
   10880:	str	r9, [sp]
   10884:	mov	r1, r8
   10888:	add	r0, sp, #12
   1088c:	bl	10eb8 <binary_search@@Base>
   10890:	cmp	r0, #0
   10894:	beq	10a1c <main@@Base+0x348>
   10898:	sub	r2, r0, r8
   1089c:	movw	r0, #4612	; 0x1204
   108a0:	movt	r0, #1
   108a4:	asr	r2, r2, #2
   108a8:	ldr	r1, [sp, #12]
   108ac:	bl	1068c <printf@plt>
   108b0:	ldrd	r2, [sp, #24]
   108b4:	movw	r0, #4660	; 0x1234
   108b8:	movt	r0, #1
   108bc:	movw	r9, #4540	; 0x11bc
   108c0:	movt	r9, #1
   108c4:	ldrd	r4, [sp, #32]
   108c8:	ldrd	sl, [sp, #40]	; 0x28
   108cc:	strd	r2, [sp, #48]	; 0x30
   108d0:	strd	r4, [r8, #8]
   108d4:	mov	r4, r8
   108d8:	strd	sl, [r8, #16]
   108dc:	bl	10698 <puts@plt>
   108e0:	movw	r0, #4532	; 0x11b4
   108e4:	movt	r0, #1
   108e8:	bl	1068c <printf@plt>
   108ec:	ldr	r1, [r4], #4
   108f0:	mov	r0, r9
   108f4:	bl	1068c <printf@plt>
   108f8:	cmp	r4, r6
   108fc:	bne	108ec <main@@Base+0x218>
   10900:	movw	r0, #4656	; 0x1230
   10904:	movt	r0, #1
   10908:	bl	10698 <puts@plt>
   1090c:	mov	r0, r8
   10910:	movw	r3, #2848	; 0xb20
   10914:	movt	r3, #1
   10918:	mov	r2, #4
   1091c:	mov	r1, #6
   10920:	movw	r4, #4540	; 0x11bc
   10924:	movt	r4, #1
   10928:	bl	10f60 <insertion_sort@@Base>
   1092c:	movw	r0, #4544	; 0x11c0
   10930:	movt	r0, #1
   10934:	bl	1068c <printf@plt>
   10938:	ldr	r1, [r7], #4
   1093c:	mov	r0, r4
   10940:	bl	1068c <printf@plt>
   10944:	cmp	r7, r6
   10948:	bne	10938 <main@@Base+0x264>
   1094c:	movw	r0, #4656	; 0x1230
   10950:	movt	r0, #1
   10954:	bl	10698 <puts@plt>
   10958:	movw	r0, #4672	; 0x1240
   1095c:	movt	r0, #1
   10960:	bl	10698 <puts@plt>
   10964:	movw	r3, #4684	; 0x124c
   10968:	movt	r3, #1
   1096c:	ldrb	r2, [r3, #4]
   10970:	movw	r0, #4532	; 0x11b4
   10974:	movt	r0, #1
   10978:	ldr	r3, [r3]
   1097c:	str	r3, [sp, #16]
   10980:	strb	r2, [sp, #20]
   10984:	bl	1068c <printf@plt>
   10988:	add	r0, sp, #16
   1098c:	bl	10698 <puts@plt>
   10990:	add	r0, sp, #16
   10994:	bl	106bc <strlen@plt>
   10998:	mov	r1, r0
   1099c:	mov	r2, #1
   109a0:	add	r0, sp, #16
   109a4:	movw	r3, #2884	; 0xb44
   109a8:	movt	r3, #1
   109ac:	bl	10c60 <sort@@Base>
   109b0:	movw	r0, #4544	; 0x11c0
   109b4:	movt	r0, #1
   109b8:	bl	1068c <printf@plt>
   109bc:	add	r0, sp, #16
   109c0:	bl	10698 <puts@plt>
   109c4:	mov	r0, #0
   109c8:	add	sp, sp, #76	; 0x4c
   109cc:	ldrd	r4, [sp]
   109d0:	ldrd	r6, [sp, #8]
   109d4:	ldrd	r8, [sp, #16]
   109d8:	ldrd	sl, [sp, #24]
   109dc:	add	sp, sp, #32
   109e0:	pop	{pc}		; (ldr pc, [sp], #4)
   109e4:	mov	r2, #1
   109e8:	movw	r0, #4612	; 0x1204
   109ec:	movt	r0, #1
   109f0:	mov	r1, #4
   109f4:	bl	1068c <printf@plt>
   109f8:	b	10838 <main@@Base+0x164>
   109fc:	mov	r2, #3
   10a00:	b	109e8 <main@@Base+0x314>
   10a04:	mov	r2, #5
   10a08:	b	109e8 <main@@Base+0x314>
   10a0c:	mov	r2, #0
   10a10:	b	109e8 <main@@Base+0x314>
   10a14:	mov	r2, #2
   10a18:	b	109e8 <main@@Base+0x314>
   10a1c:	movw	r0, #4564	; 0x11d4
   10a20:	movt	r0, #1
   10a24:	ldr	r1, [sp, #12]
   10a28:	bl	1068c <printf@plt>
   10a2c:	b	108b0 <main@@Base+0x1dc>

00010a30 <_start@@Base>:
   10a30:	mov	fp, #0
   10a34:	mov	lr, #0
   10a38:	pop	{r1}		; (ldr r1, [sp], #4)
   10a3c:	mov	r2, sp
   10a40:	push	{r2}		; (str r2, [sp, #-4]!)
   10a44:	push	{r0}		; (str r0, [sp, #-4]!)
   10a48:	ldr	ip, [pc, #16]	; 10a60 <_start@@Base+0x30>
   10a4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10a50:	ldr	r0, [pc, #12]	; 10a64 <_start@@Base+0x34>
   10a54:	ldr	r3, [pc, #12]	; 10a68 <_start@@Base+0x38>
   10a58:	bl	106a4 <__libc_start_main@plt>
   10a5c:	bl	106c8 <abort@plt>
   10a60:	andeq	r1, r1, ip, ror r1
   10a64:	ldrdeq	r0, [r1], -r4
   10a68:	andeq	r1, r1, ip, lsl r1
   10a6c:	ldr	r3, [pc, #20]	; 10a88 <_start@@Base+0x58>
   10a70:	ldr	r2, [pc, #20]	; 10a8c <_start@@Base+0x5c>
   10a74:	add	r3, pc, r3
   10a78:	ldr	r2, [r3, r2]
   10a7c:	cmp	r2, #0
   10a80:	bxeq	lr
   10a84:	b	106b0 <__gmon_start__@plt>
   10a88:	andeq	r1, r1, r4, lsl #11
   10a8c:	andeq	r0, r0, r4, lsr #32
   10a90:	ldr	r0, [pc, #24]	; 10ab0 <_start@@Base+0x80>
   10a94:	ldr	r3, [pc, #24]	; 10ab4 <_start@@Base+0x84>
   10a98:	cmp	r3, r0
   10a9c:	bxeq	lr
   10aa0:	ldr	r3, [pc, #16]	; 10ab8 <_start@@Base+0x88>
   10aa4:	cmp	r3, #0
   10aa8:	bxeq	lr
   10aac:	bx	r3
   10ab0:	andeq	r2, r2, r0, lsr r0
   10ab4:	andeq	r2, r2, r0, lsr r0
   10ab8:	andeq	r0, r0, r0
   10abc:	ldr	r0, [pc, #36]	; 10ae8 <_start@@Base+0xb8>
   10ac0:	ldr	r1, [pc, #36]	; 10aec <_start@@Base+0xbc>
   10ac4:	sub	r1, r1, r0
   10ac8:	asr	r1, r1, #2
   10acc:	add	r1, r1, r1, lsr #31
   10ad0:	asrs	r1, r1, #1
   10ad4:	bxeq	lr
   10ad8:	ldr	r3, [pc, #16]	; 10af0 <_start@@Base+0xc0>
   10adc:	cmp	r3, #0
   10ae0:	bxeq	lr
   10ae4:	bx	r3
   10ae8:	andeq	r2, r2, r0, lsr r0
   10aec:	andeq	r2, r2, r0, lsr r0
   10af0:	andeq	r0, r0, r0
   10af4:	push	{r4, lr}
   10af8:	ldr	r4, [pc, #24]	; 10b18 <_start@@Base+0xe8>
   10afc:	ldrb	r3, [r4]
   10b00:	cmp	r3, #0
   10b04:	popne	{r4, pc}
   10b08:	bl	10a90 <_start@@Base+0x60>
   10b0c:	mov	r3, #1
   10b10:	strb	r3, [r4]
   10b14:	pop	{r4, pc}
   10b18:	andeq	r2, r2, r0, lsr r0
   10b1c:	b	10abc <_start@@Base+0x8c>

00010b20 <comp_int_asc@@Base>:
   10b20:	ldr	r2, [r0]
   10b24:	ldr	r3, [r1]
   10b28:	cmp	r2, r3
   10b2c:	blt	10b3c <comp_int_asc@@Base+0x1c>
   10b30:	movgt	r0, #1
   10b34:	movle	r0, #0
   10b38:	bx	lr
   10b3c:	mvn	r0, #0
   10b40:	bx	lr

00010b44 <comp_char_desc@@Base>:
   10b44:	ldrb	r2, [r0]
   10b48:	ldrb	r3, [r1]
   10b4c:	cmp	r2, r3
   10b50:	bcc	10b60 <comp_char_desc@@Base+0x1c>
   10b54:	mvnhi	r0, #0
   10b58:	movls	r0, #0
   10b5c:	bx	lr
   10b60:	mov	r0, #1
   10b64:	bx	lr

00010b68 <get_elem@@Base>:
   10b68:	mla	r0, r2, r1, r0
   10b6c:	bx	lr

00010b70 <swap@@Base>:
   10b70:	cmp	r2, #0
   10b74:	bxle	lr
   10b78:	add	r3, r0, #4
   10b7c:	add	ip, r1, #4
   10b80:	cmp	r0, ip
   10b84:	cmpcc	r1, r3
   10b88:	sub	ip, r2, #1
   10b8c:	movcs	r3, #1
   10b90:	movcc	r3, #0
   10b94:	cmp	ip, #4
   10b98:	movls	r3, #0
   10b9c:	andhi	r3, r3, #1
   10ba0:	cmp	r3, #0
   10ba4:	beq	10c38 <swap@@Base+0xc8>
   10ba8:	strd	r4, [sp, #-12]!
   10bac:	bic	r5, r2, #3
   10bb0:	mov	r3, r0
   10bb4:	add	r5, r5, r0
   10bb8:	mov	ip, r1
   10bbc:	str	lr, [sp, #8]
   10bc0:	ldr	r4, [ip]
   10bc4:	ldr	lr, [r3]
   10bc8:	str	r4, [r3], #4
   10bcc:	cmp	r3, r5
   10bd0:	str	lr, [ip], #4
   10bd4:	bne	10bc0 <swap@@Base+0x50>
   10bd8:	bic	r3, r2, #3
   10bdc:	cmp	r2, r3
   10be0:	beq	10c2c <swap@@Base+0xbc>
   10be4:	ldrb	lr, [r0, r3]
   10be8:	add	ip, r3, #1
   10bec:	cmp	r2, ip
   10bf0:	ldrb	r4, [r1, r3]
   10bf4:	strb	r4, [r0, r3]
   10bf8:	strb	lr, [r1, r3]
   10bfc:	ble	10c2c <swap@@Base+0xbc>
   10c00:	add	r3, r3, #2
   10c04:	ldrb	lr, [r0, ip]
   10c08:	cmp	r2, r3
   10c0c:	ldrb	r2, [r1, ip]
   10c10:	strb	r2, [r0, ip]
   10c14:	strb	lr, [r1, ip]
   10c18:	ble	10c2c <swap@@Base+0xbc>
   10c1c:	ldrb	r2, [r0, r3]
   10c20:	ldrb	ip, [r1, r3]
   10c24:	strb	ip, [r0, r3]
   10c28:	strb	r2, [r1, r3]
   10c2c:	ldrd	r4, [sp]
   10c30:	add	sp, sp, #8
   10c34:	pop	{pc}		; (ldr pc, [sp], #4)
   10c38:	sub	r0, r0, #1
   10c3c:	sub	r1, r1, #1
   10c40:	add	r2, r0, r2
   10c44:	ldrb	r3, [r0, #1]!
   10c48:	ldrb	ip, [r1, #1]!
   10c4c:	cmp	r0, r2
   10c50:	strb	ip, [r0]
   10c54:	strb	r3, [r1]
   10c58:	bne	10c44 <swap@@Base+0xd4>
   10c5c:	bx	lr

00010c60 <sort@@Base>:
   10c60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10c64:	strd	r6, [sp, #8]
   10c68:	subs	r6, r1, #0
   10c6c:	strd	r8, [sp, #16]
   10c70:	strd	sl, [sp, #24]
   10c74:	str	lr, [sp, #32]
   10c78:	sub	sp, sp, #28
   10c7c:	ble	10e1c <sort@@Base+0x1bc>
   10c80:	cmp	r2, #0
   10c84:	mov	r8, r3
   10c88:	movgt	r3, r2
   10c8c:	movle	r3, #1
   10c90:	mov	r5, r2
   10c94:	bic	r2, r3, #3
   10c98:	str	r3, [sp, #4]
   10c9c:	add	r3, r2, #1
   10ca0:	mov	r7, r0
   10ca4:	mov	r9, #0
   10ca8:	str	r2, [sp, #8]
   10cac:	str	r2, [sp, #12]
   10cb0:	str	r3, [sp, #16]
   10cb4:	add	r3, r2, #2
   10cb8:	str	r3, [sp, #20]
   10cbc:	add	r9, r9, #1
   10cc0:	cmp	r6, r9
   10cc4:	ble	10dd8 <sort@@Base+0x178>
   10cc8:	add	r3, r7, r5
   10ccc:	mov	fp, r7
   10cd0:	mov	r4, r3
   10cd4:	mov	sl, r9
   10cd8:	str	r3, [sp]
   10cdc:	mov	r1, fp
   10ce0:	mov	r0, r4
   10ce4:	blx	r8
   10ce8:	cmp	r0, #0
   10cec:	add	sl, sl, #1
   10cf0:	movlt	fp, r4
   10cf4:	cmp	r6, sl
   10cf8:	add	r4, r4, r5
   10cfc:	bne	10cdc <sort@@Base+0x7c>
   10d00:	cmp	r5, #0
   10d04:	ldrle	r7, [sp]
   10d08:	ble	10cbc <sort@@Base+0x5c>
   10d0c:	add	r2, fp, #4
   10d10:	add	r1, r7, #4
   10d14:	cmp	r1, fp
   10d18:	cmphi	r2, r7
   10d1c:	movls	r2, #1
   10d20:	movhi	r2, #0
   10d24:	cmp	r5, #5
   10d28:	movle	r2, #0
   10d2c:	andgt	r2, r2, #1
   10d30:	cmp	r2, #0
   10d34:	beq	10de8 <sort@@Base+0x188>
   10d38:	ldr	r3, [sp, #12]
   10d3c:	mov	r2, fp
   10d40:	mov	r0, r7
   10d44:	mov	r1, r7
   10d48:	add	r4, fp, r3
   10d4c:	ldr	ip, [r1], #4
   10d50:	ldr	r3, [r2]
   10d54:	str	ip, [r2], #4
   10d58:	cmp	r2, r4
   10d5c:	str	r3, [r0], #4
   10d60:	bne	10d4c <sort@@Base+0xec>
   10d64:	ldrd	r2, [sp, #4]
   10d68:	cmp	r2, r3
   10d6c:	beq	10db8 <sort@@Base+0x158>
   10d70:	ldr	r0, [sp, #16]
   10d74:	ldrb	r2, [fp, r3]
   10d78:	ldrb	r1, [r7, r3]
   10d7c:	cmp	r5, r0
   10d80:	strb	r1, [fp, r3]
   10d84:	strb	r2, [r7, r3]
   10d88:	ble	10db8 <sort@@Base+0x158>
   10d8c:	ldr	r3, [sp, #20]
   10d90:	ldrb	r2, [fp, r0]
   10d94:	ldrb	r1, [r7, r0]
   10d98:	cmp	r5, r3
   10d9c:	strb	r1, [fp, r0]
   10da0:	strb	r2, [r7, r0]
   10da4:	ble	10db8 <sort@@Base+0x158>
   10da8:	ldrb	r2, [fp, r3]
   10dac:	ldrb	r1, [r7, r3]
   10db0:	strb	r1, [fp, r3]
   10db4:	strb	r2, [r7, r3]
   10db8:	cmp	r6, r9
   10dbc:	ble	10e1c <sort@@Base+0x1bc>
   10dc0:	add	r3, r7, r5
   10dc4:	add	r9, r9, #1
   10dc8:	cmp	r6, r9
   10dcc:	mov	r7, r3
   10dd0:	str	r3, [sp]
   10dd4:	bgt	10cc8 <sort@@Base+0x68>
   10dd8:	cmp	r5, #0
   10ddc:	ble	10e1c <sort@@Base+0x1bc>
   10de0:	mov	fp, r7
   10de4:	b	10d0c <sort@@Base+0xac>
   10de8:	sub	r2, fp, #1
   10dec:	sub	r0, r7, #1
   10df0:	ldrb	r1, [r2, #1]
   10df4:	add	r3, r2, #2
   10df8:	add	r2, r2, #1
   10dfc:	sub	r3, r3, fp
   10e00:	ldrb	ip, [r0, #1]!
   10e04:	cmp	r5, r3
   10e08:	strb	ip, [r2]
   10e0c:	strb	r1, [r0]
   10e10:	bgt	10df0 <sort@@Base+0x190>
   10e14:	cmp	r6, r9
   10e18:	bgt	10dc0 <sort@@Base+0x160>
   10e1c:	add	sp, sp, #28
   10e20:	ldrd	r4, [sp]
   10e24:	ldrd	r6, [sp, #8]
   10e28:	ldrd	r8, [sp, #16]
   10e2c:	ldrd	sl, [sp, #24]
   10e30:	add	sp, sp, #32
   10e34:	pop	{pc}		; (ldr pc, [sp], #4)

00010e38 <linear_search@@Base>:
   10e38:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10e3c:	strd	r6, [sp, #8]
   10e40:	subs	r6, r2, #0
   10e44:	strd	r8, [sp, #16]
   10e48:	str	sl, [sp, #24]
   10e4c:	str	lr, [sp, #28]
   10e50:	ldr	r8, [sp, #32]
   10e54:	ble	10e9c <linear_search@@Base+0x64>
   10e58:	mov	r9, r3
   10e5c:	mov	sl, r1
   10e60:	mov	r7, r0
   10e64:	mov	r4, r1
   10e68:	mov	r5, #0
   10e6c:	b	10e7c <linear_search@@Base+0x44>
   10e70:	add	r5, r5, #1
   10e74:	cmp	r6, r5
   10e78:	beq	10e9c <linear_search@@Base+0x64>
   10e7c:	mov	r0, r4
   10e80:	mov	r1, r7
   10e84:	blx	r8
   10e88:	cmp	r0, #0
   10e8c:	add	r4, r4, r6
   10e90:	bne	10e70 <linear_search@@Base+0x38>
   10e94:	mla	r0, r5, r9, sl
   10e98:	b	10ea0 <linear_search@@Base+0x68>
   10e9c:	mov	r0, #0
   10ea0:	ldrd	r4, [sp]
   10ea4:	ldrd	r6, [sp, #8]
   10ea8:	ldrd	r8, [sp, #16]
   10eac:	ldr	sl, [sp, #24]
   10eb0:	add	sp, sp, #28
   10eb4:	pop	{pc}		; (ldr pc, [sp], #4)

00010eb8 <binary_search@@Base>:
   10eb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10ebc:	strd	r6, [sp, #8]
   10ec0:	subs	r6, r2, #1
   10ec4:	strd	r8, [sp, #16]
   10ec8:	strd	sl, [sp, #24]
   10ecc:	str	lr, [sp, #32]
   10ed0:	sub	sp, sp, #4
   10ed4:	ldr	r8, [sp, #40]	; 0x28
   10ed8:	bmi	10f2c <binary_search@@Base+0x74>
   10edc:	mov	sl, r3
   10ee0:	mov	r9, r1
   10ee4:	mov	r7, r0
   10ee8:	mov	r5, #0
   10eec:	add	r4, r5, r6
   10ef0:	mov	r0, r7
   10ef4:	asr	r4, r4, #1
   10ef8:	mla	fp, sl, r4, r9
   10efc:	mov	r1, fp
   10f00:	blx	r8
   10f04:	cmp	r0, #0
   10f08:	mov	r1, fp
   10f0c:	mov	r0, r7
   10f10:	bne	10f30 <binary_search@@Base+0x78>
   10f14:	blx	r8
   10f18:	cmn	r0, #1
   10f1c:	beq	10f50 <binary_search@@Base+0x98>
   10f20:	add	r5, r4, #1
   10f24:	cmp	r5, r6
   10f28:	ble	10eec <binary_search@@Base+0x34>
   10f2c:	mov	fp, #0
   10f30:	mov	r0, fp
   10f34:	add	sp, sp, #4
   10f38:	ldrd	r4, [sp]
   10f3c:	ldrd	r6, [sp, #8]
   10f40:	ldrd	r8, [sp, #16]
   10f44:	ldrd	sl, [sp, #24]
   10f48:	add	sp, sp, #32
   10f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f50:	sub	r6, r4, #1
   10f54:	cmp	r6, r5
   10f58:	bge	10eec <binary_search@@Base+0x34>
   10f5c:	b	10f2c <binary_search@@Base+0x74>

00010f60 <insertion_sort@@Base>:
   10f60:	cmp	r1, #1
   10f64:	bxle	lr
   10f68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f6c:	mov	r4, r0
   10f70:	strd	r6, [sp, #8]
   10f74:	mov	r6, r2
   10f78:	mov	r7, r0
   10f7c:	strd	r8, [sp, #16]
   10f80:	strd	sl, [sp, #24]
   10f84:	bic	sl, r2, #3
   10f88:	str	lr, [sp, #32]
   10f8c:	sub	sp, sp, #36	; 0x24
   10f90:	mov	r8, sl
   10f94:	add	r9, sl, #1
   10f98:	mov	fp, sl
   10f9c:	str	r3, [sp, #8]
   10fa0:	add	r3, sl, #2
   10fa4:	str	r3, [sp, #16]
   10fa8:	mov	r3, #1
   10fac:	str	r1, [sp, #28]
   10fb0:	str	r3, [sp, #20]
   10fb4:	sub	r3, r2, #1
   10fb8:	str	r3, [sp, #4]
   10fbc:	rsb	r3, r0, #4
   10fc0:	str	r3, [sp, #12]
   10fc4:	ldr	sl, [sp, #20]
   10fc8:	add	r3, r4, r6
   10fcc:	mov	r5, r3
   10fd0:	str	r3, [sp, #24]
   10fd4:	mov	r1, r4
   10fd8:	mov	r0, r5
   10fdc:	ldr	r3, [sp, #8]
   10fe0:	blx	r3
   10fe4:	cmn	r0, #1
   10fe8:	sub	sl, sl, #1
   10fec:	sub	ip, r5, r7
   10ff0:	bne	110bc <insertion_sort@@Base+0x15c>
   10ff4:	cmp	r6, #0
   10ff8:	ble	110ac <insertion_sort@@Base+0x14c>
   10ffc:	ldr	r2, [sp, #12]
   11000:	sub	r1, r4, r7
   11004:	add	r3, r2, r5
   11008:	add	r0, r2, r4
   1100c:	ldr	r2, [sp, #4]
   11010:	cmp	ip, r0
   11014:	cmplt	r1, r3
   11018:	movge	r3, #1
   1101c:	movlt	r3, #0
   11020:	cmp	r2, #4
   11024:	movls	r3, #0
   11028:	andhi	r3, r3, #1
   1102c:	cmp	r3, #0
   11030:	beq	110f4 <insertion_sort@@Base+0x194>
   11034:	mov	r3, #0
   11038:	ldr	r2, [r3, r5]
   1103c:	ldr	r1, [r3, r4]
   11040:	str	r1, [r3, r5]
   11044:	str	r2, [r3, r4]
   11048:	add	r3, r3, #4
   1104c:	cmp	r3, r8
   11050:	bne	11038 <insertion_sort@@Base+0xd8>
   11054:	cmp	fp, r6
   11058:	beq	110ac <insertion_sort@@Base+0x14c>
   1105c:	add	r3, fp, ip
   11060:	ldrb	r1, [r4, fp]
   11064:	cmp	r6, r9
   11068:	ldrb	r0, [r7, r3]
   1106c:	strb	r1, [r7, r3]
   11070:	strb	r0, [r4, fp]
   11074:	ble	110ac <insertion_sort@@Base+0x14c>
   11078:	add	r3, r9, ip
   1107c:	ldr	r2, [sp, #16]
   11080:	ldrb	r1, [r4, r9]
   11084:	ldrb	r0, [r7, r3]
   11088:	cmp	r6, r2
   1108c:	strb	r1, [r7, r3]
   11090:	strb	r0, [r4, r9]
   11094:	ble	110ac <insertion_sort@@Base+0x14c>
   11098:	add	ip, r2, ip
   1109c:	ldrb	r1, [r4, r2]
   110a0:	ldrb	r3, [r7, ip]
   110a4:	strb	r1, [r7, ip]
   110a8:	strb	r3, [r4, r2]
   110ac:	cmp	sl, #0
   110b0:	sub	r5, r5, r6
   110b4:	sub	r4, r4, r6
   110b8:	bne	10fd4 <insertion_sort@@Base+0x74>
   110bc:	ldr	r3, [sp, #20]
   110c0:	ldr	r4, [sp, #24]
   110c4:	ldr	r2, [sp, #28]
   110c8:	add	r3, r3, #1
   110cc:	str	r3, [sp, #20]
   110d0:	cmp	r2, r3
   110d4:	bne	10fc4 <insertion_sort@@Base+0x64>
   110d8:	add	sp, sp, #36	; 0x24
   110dc:	ldrd	r4, [sp]
   110e0:	ldrd	r6, [sp, #8]
   110e4:	ldrd	r8, [sp, #16]
   110e8:	ldrd	sl, [sp, #24]
   110ec:	add	sp, sp, #32
   110f0:	pop	{pc}		; (ldr pc, [sp], #4)
   110f4:	sub	r1, r5, #1
   110f8:	sub	r3, r4, #1
   110fc:	add	lr, r2, r4
   11100:	ldrb	r0, [r3, #1]!
   11104:	ldrb	r2, [r1, #1]!
   11108:	cmp	r3, lr
   1110c:	strb	r0, [r1]
   11110:	strb	r2, [r3]
   11114:	bne	11100 <insertion_sort@@Base+0x1a0>
   11118:	b	110ac <insertion_sort@@Base+0x14c>

0001111c <__libc_csu_init@@Base>:
   1111c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11120:	mov	r7, r0
   11124:	ldr	r6, [pc, #72]	; 11174 <__libc_csu_init@@Base+0x58>
   11128:	ldr	r5, [pc, #72]	; 11178 <__libc_csu_init@@Base+0x5c>
   1112c:	add	r6, pc, r6
   11130:	add	r5, pc, r5
   11134:	sub	r6, r6, r5
   11138:	mov	r8, r1
   1113c:	mov	r9, r2
   11140:	bl	1066c <printf@plt-0x20>
   11144:	asrs	r6, r6, #2
   11148:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1114c:	mov	r4, #0
   11150:	add	r4, r4, #1
   11154:	ldr	r3, [r5], #4
   11158:	mov	r2, r9
   1115c:	mov	r1, r8
   11160:	mov	r0, r7
   11164:	blx	r3
   11168:	cmp	r6, r4
   1116c:	bne	11150 <__libc_csu_init@@Base+0x34>
   11170:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11174:	andeq	r0, r1, r0, ror #27
   11178:	ldrdeq	r0, [r1], -r8

0001117c <__libc_csu_fini@@Base>:
   1117c:	bx	lr

Disassembly of section .fini:

00011180 <.fini>:
   11180:	push	{r3, lr}
   11184:	pop	{r3, pc}
