
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012394 <.init>:
   12394:	push	{r3, lr}
   12398:	bl	124e4 <_start@@Base+0x3c>
   1239c:	pop	{r3, pc}

Disassembly of section .plt:

000123a0 <strcmp@plt-0x14>:
   123a0:	push	{lr}		; (str lr, [sp, #-4]!)
   123a4:	ldr	lr, [pc, #4]	; 123b0 <strcmp@plt-0x4>
   123a8:	add	lr, pc, lr
   123ac:	ldr	pc, [lr, #8]!
   123b0:	andeq	r6, r1, r0, asr ip

000123b4 <strcmp@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #90112	; 0x16000
   123bc:	ldr	pc, [ip, #3152]!	; 0xc50

000123c0 <printf@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #90112	; 0x16000
   123c8:	ldr	pc, [ip, #3144]!	; 0xc48

000123cc <fopen@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #90112	; 0x16000
   123d4:	ldr	pc, [ip, #3136]!	; 0xc40

000123d8 <free@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #90112	; 0x16000
   123e0:	ldr	pc, [ip, #3128]!	; 0xc38

000123e4 <memcpy@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #90112	; 0x16000
   123ec:	ldr	pc, [ip, #3120]!	; 0xc30

000123f0 <fwrite_unlocked@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #90112	; 0x16000
   123f8:	ldr	pc, [ip, #3112]!	; 0xc28

000123fc <realloc@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #90112	; 0x16000
   12404:	ldr	pc, [ip, #3104]!	; 0xc20

00012408 <gettimeofday@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #90112	; 0x16000
   12410:	ldr	pc, [ip, #3096]!	; 0xc18

00012414 <puts@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #90112	; 0x16000
   1241c:	ldr	pc, [ip, #3088]!	; 0xc10

00012420 <malloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #90112	; 0x16000
   12428:	ldr	pc, [ip, #3080]!	; 0xc08

0001242c <__libc_start_main@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #90112	; 0x16000
   12434:	ldr	pc, [ip, #3072]!	; 0xc00

00012438 <__gmon_start__@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #90112	; 0x16000
   12440:	ldr	pc, [ip, #3064]!	; 0xbf8

00012444 <bcmp@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #90112	; 0x16000
   1244c:	ldr	pc, [ip, #3056]!	; 0xbf0

00012450 <strlen@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #90112	; 0x16000
   12458:	ldr	pc, [ip, #3048]!	; 0xbe8

0001245c <posix_memalign@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #90112	; 0x16000
   12464:	ldr	pc, [ip, #3040]!	; 0xbe0

00012468 <memset@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #90112	; 0x16000
   12470:	ldr	pc, [ip, #3032]!	; 0xbd8

00012474 <memchr@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #90112	; 0x16000
   1247c:	ldr	pc, [ip, #3024]!	; 0xbd0

00012480 <fclose@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #90112	; 0x16000
   12488:	ldr	pc, [ip, #3016]!	; 0xbc8

0001248c <abort@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #90112	; 0x16000
   12494:	ldr	pc, [ip, #3008]!	; 0xbc0

00012498 <__assert_fail@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #90112	; 0x16000
   124a0:	ldr	pc, [ip, #3000]!	; 0xbb8

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1242c <__libc_start_main@plt>
   124d4:	bl	1248c <abort@plt>
   124d8:	andeq	r7, r1, r0, asr #32
   124dc:	muleq	r1, r8, r5
   124e0:	andeq	r6, r1, r0, ror #31
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12438 <__gmon_start__@plt>
   12500:	andeq	r6, r1, ip, lsl #22
   12504:	andeq	r0, r0, ip, asr r0
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	r9, r2, r8, rrx
   1252c:	andeq	r9, r2, r8, rrx
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	r9, r2, r8, rrx
   12564:	andeq	r9, r2, r8, rrx
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	r9, r2, r8, rrx
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #4
   125a4:	vpush	{d8-d10}
   125a8:	sub	sp, sp, #264	; 0x108
   125ac:	add	r4, sp, #24
   125b0:	mov	r0, r4
   125b4:	bl	12f04 <flatcc_builder_init@@Base>
   125b8:	mov	r0, r4
   125bc:	bl	12a90 <main@@Base+0x4f8>
   125c0:	sub	r1, fp, #64	; 0x40
   125c4:	mov	r0, r4
   125c8:	bl	16864 <flatcc_builder_finalize_buffer@@Base>
   125cc:	movw	r1, #28774	; 0x7066
   125d0:	mov	r7, r0
   125d4:	movw	r0, #28752	; 0x7050
   125d8:	movt	r0, #1
   125dc:	movt	r1, #1
   125e0:	bl	123cc <fopen@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	12904 <main@@Base+0x36c>
   125ec:	ldr	r6, [fp, #-64]	; 0xffffffc0
   125f0:	mov	r5, r0
   125f4:	mov	r0, r7
   125f8:	mov	r1, #1
   125fc:	mov	r4, #1
   12600:	mov	r3, r5
   12604:	mov	r2, r6
   12608:	bl	123f0 <fwrite_unlocked@plt>
   1260c:	mov	r8, r0
   12610:	mov	r0, r5
   12614:	bl	12480 <fclose@plt>
   12618:	cmp	r6, r8
   1261c:	bne	1295c <main@@Base+0x3c4>
   12620:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12624:	movw	r0, #28777	; 0x7069
   12628:	movt	r0, #1
   1262c:	bl	123c0 <printf@plt>
   12630:	movw	r0, #30026	; 0x754a
   12634:	movt	r0, #1
   12638:	bl	12414 <puts@plt>
   1263c:	add	r0, r7, #8
   12640:	str	r0, [sp, #4]
   12644:	bl	12cd0 <main@@Base+0x738>
   12648:	movw	sl, #29079	; 0x7197
   1264c:	movw	r6, #36976	; 0x9070
   12650:	vmov.f64	d8, d0
   12654:	mov	r0, #0
   12658:	str	r7, [sp]
   1265c:	movt	sl, #1
   12660:	movt	r6, #2
   12664:	add	r4, sp, #24
   12668:	str	r0, [sp, #8]
   1266c:	mov	r0, r4
   12670:	bl	12a90 <main@@Base+0x4f8>
   12674:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12678:	mov	r0, r4
   1267c:	mov	r1, r7
   12680:	bl	16818 <flatcc_builder_copy_buffer@@Base>
   12684:	cmp	r7, #0
   12688:	beq	12a4c <main@@Base+0x4b4>
   1268c:	ldr	r0, [r7, #4]
   12690:	movw	r1, #20301	; 0x4f4d
   12694:	movt	r1, #21326	; 0x534e
   12698:	cmp	r0, r1
   1269c:	bne	12a4c <main@@Base+0x4b4>
   126a0:	ldr	r8, [r7]
   126a4:	mov	r5, r7
   126a8:	ldr	r0, [r5, r8]!
   126ac:	mov	r4, r5
   126b0:	ldrh	r9, [r4, -r0]!
   126b4:	cmp	r9, #11
   126b8:	bls	129f0 <main@@Base+0x458>
   126bc:	ldrh	r0, [r4, #10]
   126c0:	cmp	r0, #0
   126c4:	beq	129f0 <main@@Base+0x458>
   126c8:	mov	r1, r5
   126cc:	ldr	r0, [r1, r0]!
   126d0:	add	r0, r1, r0
   126d4:	movw	r1, #28795	; 0x707b
   126d8:	movt	r1, #1
   126dc:	add	r0, r0, #4
   126e0:	bl	123b4 <strcmp@plt>
   126e4:	cmp	r0, #0
   126e8:	bne	12a58 <main@@Base+0x4c0>
   126ec:	cmp	r9, #28
   126f0:	bcc	12a38 <main@@Base+0x4a0>
   126f4:	ldrh	r0, [r4, #26]
   126f8:	cmp	r0, #0
   126fc:	beq	12a38 <main@@Base+0x4a0>
   12700:	ldr	r1, [r5, r0]!
   12704:	ldr	r2, [r5, r1]!
   12708:	cmp	r2, #1000	; 0x3e8
   1270c:	bne	12a38 <main@@Base+0x4a0>
   12710:	add	r1, r1, r8
   12714:	add	r2, r5, #4
   12718:	add	r0, r1, r0
   1271c:	ldr	r1, [sp, #4]
   12720:	str	r2, [sp, #12]
   12724:	add	r7, r1, r0
   12728:	mov	r0, #0
   1272c:	ldr	r4, [sp, #12]
   12730:	str	r0, [sp, #16]
   12734:	ldr	lr, [r4, r0, lsl #2]!
   12738:	ldr	r1, [r4, lr]!
   1273c:	mov	r0, r4
   12740:	ldrh	r2, [r0, -r1]!
   12744:	cmp	r2, #12
   12748:	bcc	129f0 <main@@Base+0x458>
   1274c:	ldrh	r1, [r0, #10]
   12750:	cmp	r1, #0
   12754:	beq	129f0 <main@@Base+0x458>
   12758:	mov	r3, r4
   1275c:	mov	r5, #0
   12760:	cmp	r2, #16
   12764:	ldr	ip, [r3, r1]!
   12768:	add	r3, r3, ip
   1276c:	add	r3, r3, #4
   12770:	bcc	12788 <main@@Base+0x1f0>
   12774:	ldrh	r2, [r0, #14]
   12778:	cmp	r2, #0
   1277c:	ldrne	r0, [r4, r2]!
   12780:	addne	r0, r4, r0
   12784:	addne	r5, r0, #4
   12788:	ldr	r0, [r3, #-4]
   1278c:	cmp	r0, #700	; 0x2bc
   12790:	bne	12a24 <main@@Base+0x48c>
   12794:	cmp	r5, #0
   12798:	beq	12a10 <main@@Base+0x478>
   1279c:	ldr	r0, [r5, #-4]
   127a0:	movw	r2, #34464	; 0x86a0
   127a4:	movt	r2, #1
   127a8:	cmp	r0, r2
   127ac:	bne	12a10 <main@@Base+0x478>
   127b0:	add	r0, ip, lr
   127b4:	mov	r4, r3
   127b8:	mov	r9, #0
   127bc:	str	r7, [sp, #20]
   127c0:	add	r0, r0, r1
   127c4:	add	r8, r7, r0
   127c8:	mov	r0, r8
   127cc:	mov	r1, sl
   127d0:	mov	r2, #7
   127d4:	bl	12444 <bcmp@plt>
   127d8:	cmp	r0, #0
   127dc:	bne	12994 <main@@Base+0x3fc>
   127e0:	add	r9, r9, #1
   127e4:	add	r8, r8, #7
   127e8:	cmp	r9, #100	; 0x64
   127ec:	bne	127c8 <main@@Base+0x230>
   127f0:	ldr	r7, [sp, #20]
   127f4:	mov	r4, #100	; 0x64
   127f8:	mov	r0, r5
   127fc:	mov	r1, r6
   12800:	mov	r2, #1000	; 0x3e8
   12804:	bl	12444 <bcmp@plt>
   12808:	cmp	r0, #0
   1280c:	bne	129d0 <main@@Base+0x438>
   12810:	add	r5, r5, #1000	; 0x3e8
   12814:	subs	r4, r4, #1
   12818:	bne	127f8 <main@@Base+0x260>
   1281c:	ldr	r0, [sp, #16]
   12820:	add	r7, r7, #4
   12824:	add	r0, r0, #1
   12828:	cmp	r0, #1000	; 0x3e8
   1282c:	bne	1272c <main@@Base+0x194>
   12830:	ldr	r0, [sp, #8]
   12834:	ldr	r7, [sp]
   12838:	add	r0, r0, #1
   1283c:	cmp	r0, #10
   12840:	bne	12664 <main@@Base+0xcc>
   12844:	bl	12cd0 <main@@Base+0x738>
   12848:	movw	r0, #29783	; 0x7457
   1284c:	movw	r1, #28915	; 0x70f3
   12850:	ldr	r4, [fp, #-64]	; 0xffffffc0
   12854:	vmov.f64	d9, d0
   12858:	movt	r0, #1
   1285c:	movt	r1, #1
   12860:	bl	123c0 <printf@plt>
   12864:	vsub.f64	d9, d9, d8
   12868:	movw	r0, #29798	; 0x7466
   1286c:	movt	r0, #1
   12870:	vmov	r2, r3, d9
   12874:	bl	123c0 <printf@plt>
   12878:	movw	r0, #29822	; 0x747e
   1287c:	mov	r1, #10
   12880:	movt	r0, #1
   12884:	bl	123c0 <printf@plt>
   12888:	movw	r0, #29838	; 0x748e
   1288c:	mov	r1, r4
   12890:	movt	r0, #1
   12894:	bl	123c0 <printf@plt>
   12898:	vmov	s0, r4
   1289c:	vmov.f64	d10, #36	; 0x41200000  10.0
   128a0:	vldr	d8, [pc, #464]	; 12a78 <main@@Base+0x4e0>
   128a4:	movw	r0, #29857	; 0x74a1
   128a8:	movt	r0, #1
   128ac:	vcvt.f64.u32	d16, s0
   128b0:	vmul.f64	d16, d16, d10
   128b4:	vdiv.f64	d16, d16, d8
   128b8:	vdiv.f64	d16, d16, d9
   128bc:	vmov	r2, r3, d16
   128c0:	bl	123c0 <printf@plt>
   128c4:	vdiv.f64	d16, d10, d9
   128c8:	movw	r0, #29881	; 0x74b9
   128cc:	movt	r0, #1
   128d0:	vmov	r2, r3, d16
   128d4:	bl	123c0 <printf@plt>
   128d8:	vldr	d17, [pc, #416]	; 12a80 <main@@Base+0x4e8>
   128dc:	vldr	d18, [pc, #420]	; 12a88 <main@@Base+0x4f0>
   128e0:	vmul.f64	d16, d9, d17
   128e4:	vdiv.f64	d16, d16, d10
   128e8:	vcmpe.f64	d16, d18
   128ec:	vmrs	APSR_nzcv, fpscr
   128f0:	bpl	1290c <main@@Base+0x374>
   128f4:	movw	r0, #29914	; 0x74da
   128f8:	vmov	r2, r3, d16
   128fc:	movt	r0, #1
   12900:	b	12954 <main@@Base+0x3bc>
   12904:	mvn	r4, #0
   12908:	b	1295c <main@@Base+0x3c4>
   1290c:	vcmpe.f64	d16, d8
   12910:	vmrs	APSR_nzcv, fpscr
   12914:	bpl	12928 <main@@Base+0x390>
   12918:	vdiv.f64	d16, d16, d18
   1291c:	movw	r0, #29938	; 0x74f2
   12920:	movt	r0, #1
   12924:	b	12950 <main@@Base+0x3b8>
   12928:	vcmpe.f64	d16, d17
   1292c:	vmrs	APSR_nzcv, fpscr
   12930:	bpl	12944 <main@@Base+0x3ac>
   12934:	vdiv.f64	d16, d16, d8
   12938:	movw	r0, #29962	; 0x750a
   1293c:	movt	r0, #1
   12940:	b	12950 <main@@Base+0x3b8>
   12944:	vdiv.f64	d16, d16, d17
   12948:	movw	r0, #29986	; 0x7522
   1294c:	movt	r0, #1
   12950:	vmov	r2, r3, d16
   12954:	bl	123c0 <printf@plt>
   12958:	mov	r4, #0
   1295c:	add	r0, sp, #24
   12960:	bl	130a4 <flatcc_builder_clear@@Base>
   12964:	mov	r0, r7
   12968:	bl	123d8 <free@plt>
   1296c:	cmp	r4, #0
   12970:	beq	12980 <main@@Base+0x3e8>
   12974:	movw	r0, #30009	; 0x7539
   12978:	movt	r0, #1
   1297c:	bl	12414 <puts@plt>
   12980:	mov	r0, r4
   12984:	sub	sp, fp, #56	; 0x38
   12988:	vpop	{d8-d10}
   1298c:	add	sp, sp, #4
   12990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12994:	movw	r0, #29738	; 0x742a
   12998:	mov	r1, r9
   1299c:	mov	r2, r4
   129a0:	movt	r0, #1
   129a4:	bl	123c0 <printf@plt>
   129a8:	ldr	r0, [sp]
   129ac:	sub	r1, r8, r0
   129b0:	movw	r0, #29770	; 0x744a
   129b4:	movt	r0, #1
   129b8:	bl	123c0 <printf@plt>
   129bc:	movw	r0, #35096	; 0x8918
   129c0:	movw	r1, #28817	; 0x7091
   129c4:	movw	r3, #29673	; 0x73e9
   129c8:	mov	r2, #85	; 0x55
   129cc:	b	129e0 <main@@Base+0x448>
   129d0:	movw	r0, #35096	; 0x8918
   129d4:	movw	r1, #28817	; 0x7091
   129d8:	movw	r3, #29673	; 0x73e9
   129dc:	mov	r2, #91	; 0x5b
   129e0:	movt	r0, #1
   129e4:	movt	r1, #1
   129e8:	movt	r3, #1
   129ec:	bl	12498 <__assert_fail@plt>
   129f0:	movw	r0, #29640	; 0x73c8
   129f4:	movt	r0, #1
   129f8:	movw	r1, #29464	; 0x7318
   129fc:	movw	r3, #29559	; 0x7377
   12a00:	movw	r2, #699	; 0x2bb
   12a04:	movt	r1, #1
   12a08:	movt	r3, #1
   12a0c:	bl	12498 <__assert_fail@plt>
   12a10:	movw	r0, #35096	; 0x8918
   12a14:	movw	r1, #28817	; 0x7091
   12a18:	movw	r3, #29673	; 0x73e9
   12a1c:	mov	r2, #78	; 0x4e
   12a20:	b	129e0 <main@@Base+0x448>
   12a24:	movw	r0, #35096	; 0x8918
   12a28:	movw	r1, #28817	; 0x7091
   12a2c:	movw	r3, #29673	; 0x73e9
   12a30:	mov	r2, #74	; 0x4a
   12a34:	b	129e0 <main@@Base+0x448>
   12a38:	movw	r0, #28808	; 0x7088
   12a3c:	movw	r1, #28817	; 0x7091
   12a40:	movw	r3, #28892	; 0x70dc
   12a44:	mov	r2, #143	; 0x8f
   12a48:	b	12a68 <main@@Base+0x4d0>
   12a4c:	movw	r0, #29426	; 0x72f2
   12a50:	movt	r0, #1
   12a54:	b	129f8 <main@@Base+0x460>
   12a58:	movw	r0, #28808	; 0x7088
   12a5c:	movw	r1, #28817	; 0x7091
   12a60:	movw	r3, #28892	; 0x70dc
   12a64:	mov	r2, #139	; 0x8b
   12a68:	movt	r0, #1
   12a6c:	movt	r1, #1
   12a70:	movt	r3, #1
   12a74:	bl	12498 <__assert_fail@plt>
   12a78:	andeq	r0, r0, r0
   12a7c:	smlawbmi	lr, r0, r4, r8
   12a80:	andeq	r0, r0, r0
   12a84:	bicmi	ip, sp, r5, ror #26
   12a88:	andeq	r0, r0, r0
   12a8c:	addmi	r4, pc, r0
   12a90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a94:	add	fp, sp, #24
   12a98:	mov	r4, r0
   12a9c:	bl	13098 <flatcc_builder_reset@@Base>
   12aa0:	movw	r1, #29003	; 0x714b
   12aa4:	mov	r0, r4
   12aa8:	mov	r2, #0
   12aac:	mov	r3, #0
   12ab0:	movt	r1, #1
   12ab4:	bl	138d0 <flatcc_builder_start_buffer@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	12acc <main@@Base+0x534>
   12ac0:	mov	r0, r4
   12ac4:	mov	r1, #36	; 0x24
   12ac8:	bl	1492c <flatcc_builder_start_table@@Base>
   12acc:	movw	r1, #28795	; 0x707b
   12ad0:	mov	r0, r4
   12ad4:	movt	r1, #1
   12ad8:	bl	164f0 <flatcc_builder_create_string_str@@Base>
   12adc:	cmp	r0, #0
   12ae0:	beq	12afc <main@@Base+0x564>
   12ae4:	mov	r5, r0
   12ae8:	mov	r0, r4
   12aec:	mov	r1, #3
   12af0:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   12af4:	cmp	r0, #0
   12af8:	strne	r5, [r0]
   12afc:	mov	r0, r4
   12b00:	bl	145ec <flatcc_builder_start_offset_vector@@Base>
   12b04:	movw	r5, #29079	; 0x7197
   12b08:	movw	r6, #36976	; 0x9070
   12b0c:	movw	r8, #30044	; 0x755c
   12b10:	mov	r9, #0
   12b14:	movt	r5, #1
   12b18:	movt	r6, #2
   12b1c:	movt	r8, #1
   12b20:	mov	r0, r4
   12b24:	mov	r1, #36	; 0x24
   12b28:	bl	1492c <flatcc_builder_start_table@@Base>
   12b2c:	mov	r0, r4
   12b30:	bl	14790 <flatcc_builder_start_string@@Base>
   12b34:	mov	r7, #100	; 0x64
   12b38:	mov	r0, r4
   12b3c:	mov	r1, r5
   12b40:	mov	r2, #7
   12b44:	bl	14270 <flatcc_builder_append_string@@Base>
   12b48:	subs	r7, r7, #1
   12b4c:	bne	12b38 <main@@Base+0x5a0>
   12b50:	mov	r0, r4
   12b54:	bl	16558 <flatcc_builder_end_string@@Base>
   12b58:	cmp	r0, #0
   12b5c:	beq	12b78 <main@@Base+0x5e0>
   12b60:	mov	r7, r0
   12b64:	mov	r0, r4
   12b68:	mov	r1, #3
   12b6c:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   12b70:	cmp	r0, #0
   12b74:	strne	r7, [r0]
   12b78:	mov	r0, r4
   12b7c:	mov	r1, #1
   12b80:	mov	r2, #1
   12b84:	mvn	r3, #0
   12b88:	bl	14560 <flatcc_builder_start_vector@@Base>
   12b8c:	mov	r7, #100	; 0x64
   12b90:	mov	r0, r4
   12b94:	mov	r1, r6
   12b98:	mov	r2, #1000	; 0x3e8
   12b9c:	bl	13ed8 <flatcc_builder_append_vector@@Base>
   12ba0:	subs	r7, r7, #1
   12ba4:	bne	12b90 <main@@Base+0x5f8>
   12ba8:	mov	r0, r4
   12bac:	bl	1558c <flatcc_builder_end_vector@@Base>
   12bb0:	cmp	r0, #0
   12bb4:	beq	12bd0 <main@@Base+0x638>
   12bb8:	mov	r7, r0
   12bbc:	mov	r0, r4
   12bc0:	mov	r1, #5
   12bc4:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   12bc8:	cmp	r0, #0
   12bcc:	strne	r7, [r0]
   12bd0:	mov	r0, r4
   12bd4:	mov	r1, r8
   12bd8:	mov	r2, #1
   12bdc:	bl	1520c <flatcc_builder_check_required@@Base>
   12be0:	cmp	r0, #0
   12be4:	beq	12c6c <main@@Base+0x6d4>
   12be8:	mov	r0, r4
   12bec:	bl	1528c <flatcc_builder_end_table@@Base>
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c8c <main@@Base+0x6f4>
   12bf8:	mov	r1, r0
   12bfc:	mov	r0, r4
   12c00:	bl	14048 <flatcc_builder_offset_vector_push@@Base>
   12c04:	add	r9, r9, #1
   12c08:	cmp	r9, #1000	; 0x3e8
   12c0c:	bne	12b20 <main@@Base+0x588>
   12c10:	mov	r0, r4
   12c14:	bl	146b8 <flatcc_builder_end_offset_vector@@Base>
   12c18:	cmp	r0, #0
   12c1c:	beq	12cac <main@@Base+0x714>
   12c20:	mov	r5, r0
   12c24:	mov	r0, r4
   12c28:	mov	r1, #11
   12c2c:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   12c30:	movw	r1, #30044	; 0x755c
   12c34:	cmp	r0, #0
   12c38:	mov	r2, #1
   12c3c:	movt	r1, #1
   12c40:	strne	r5, [r0]
   12c44:	mov	r0, r4
   12c48:	bl	1520c <flatcc_builder_check_required@@Base>
   12c4c:	cmp	r0, #0
   12c50:	beq	12c6c <main@@Base+0x6d4>
   12c54:	mov	r0, r4
   12c58:	bl	1528c <flatcc_builder_end_table@@Base>
   12c5c:	mov	r1, r0
   12c60:	mov	r0, r4
   12c64:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c68:	b	13ac0 <flatcc_builder_end_buffer@@Base>
   12c6c:	movw	r0, #29087	; 0x719f
   12c70:	movw	r1, #29249	; 0x7241
   12c74:	movw	r3, #29345	; 0x72a1
   12c78:	mov	r2, #235	; 0xeb
   12c7c:	movt	r0, #1
   12c80:	movt	r1, #1
   12c84:	movt	r3, #1
   12c88:	bl	12498 <__assert_fail@plt>
   12c8c:	movw	r0, #29008	; 0x7150
   12c90:	movw	r1, #28817	; 0x7091
   12c94:	movw	r3, #29010	; 0x7152
   12c98:	mov	r2, #42	; 0x2a
   12c9c:	movt	r0, #1
   12ca0:	movt	r1, #1
   12ca4:	movt	r3, #1
   12ca8:	bl	12498 <__assert_fail@plt>
   12cac:	movw	r0, #28956	; 0x711c
   12cb0:	movw	r1, #28817	; 0x7091
   12cb4:	movw	r3, #28959	; 0x711f
   12cb8:	mov	r2, #56	; 0x38
   12cbc:	movt	r0, #1
   12cc0:	movt	r1, #1
   12cc4:	movt	r3, #1
   12cc8:	bl	12498 <__assert_fail@plt>
   12ccc:	nop	{0}
   12cd0:	push	{fp, lr}
   12cd4:	mov	fp, sp
   12cd8:	sub	sp, sp, #8
   12cdc:	mov	r0, sp
   12ce0:	mov	r1, #0
   12ce4:	bl	12408 <gettimeofday@plt>
   12ce8:	movw	r2, #37976	; 0x9458
   12cec:	movt	r2, #2
   12cf0:	ldr	r0, [r2]
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d08 <main@@Base+0x770>
   12cfc:	ldr	r1, [r2, #4]
   12d00:	ldr	r2, [sp]
   12d04:	b	12d14 <main@@Base+0x77c>
   12d08:	ldm	sp, {r0, r1}
   12d0c:	strd	r0, [r2]
   12d10:	mov	r2, r0
   12d14:	sub	r0, r2, r0
   12d18:	ldr	r2, [sp, #4]
   12d1c:	vldr	d16, [pc, #36]	; 12d48 <main@@Base+0x7b0>
   12d20:	vmov	s2, r0
   12d24:	sub	r1, r2, r1
   12d28:	vmov	s0, r1
   12d2c:	vcvt.f64.s32	d17, s0
   12d30:	vcvt.f64.s32	d18, s2
   12d34:	vdiv.f64	d16, d17, d16
   12d38:	vadd.f64	d0, d16, d18
   12d3c:	mov	sp, fp
   12d40:	pop	{fp, pc}
   12d44:	nop	{0}
   12d48:	andeq	r0, r0, r0
   12d4c:	smlawbmi	lr, r0, r4, r8

00012d50 <flatcc_builder_default_alloc@@Base>:
   12d50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d54:	add	fp, sp, #24
   12d58:	mov	r4, r1
   12d5c:	cmp	r2, #0
   12d60:	beq	12da8 <flatcc_builder_default_alloc@@Base+0x58>
   12d64:	ldr	r0, [fp, #8]
   12d68:	mov	r8, r3
   12d6c:	sub	r1, r0, #1
   12d70:	cmp	r1, #6
   12d74:	bhi	12dd0 <flatcc_builder_default_alloc@@Base+0x80>
   12d78:	add	r3, pc, #4
   12d7c:	mov	r0, #256	; 0x100
   12d80:	ldr	pc, [r3, r1, lsl #2]
   12d84:	andeq	r2, r1, r4, ror #27
   12d88:	ldrdeq	r2, [r1], -r0
   12d8c:	ldrdeq	r2, [r1], -r0
   12d90:	andeq	r2, r1, r0, lsr #27
   12d94:	ldrdeq	r2, [r1], -r8
   12d98:	ldrdeq	r2, [r1], -r0
   12d9c:	andeq	r2, r1, r0, ror #27
   12da0:	mov	r0, #288	; 0x120
   12da4:	b	12de4 <flatcc_builder_default_alloc@@Base+0x94>
   12da8:	ldr	r0, [r4]
   12dac:	cmp	r0, #0
   12db0:	beq	12dc8 <flatcc_builder_default_alloc@@Base+0x78>
   12db4:	bl	123d8 <free@plt>
   12db8:	mov	r6, #0
   12dbc:	str	r6, [r4]
   12dc0:	str	r6, [r4, #4]
   12dc4:	b	12e54 <flatcc_builder_default_alloc@@Base+0x104>
   12dc8:	mov	r6, #0
   12dcc:	b	12e54 <flatcc_builder_default_alloc@@Base+0x104>
   12dd0:	mov	r0, #32
   12dd4:	b	12de4 <flatcc_builder_default_alloc@@Base+0x94>
   12dd8:	mov	r0, r2
   12ddc:	b	12de4 <flatcc_builder_default_alloc@@Base+0x94>
   12de0:	mov	r0, #64	; 0x40
   12de4:	mov	r7, r0
   12de8:	lsl	r0, r0, #1
   12dec:	cmp	r7, r2
   12df0:	bcc	12de4 <flatcc_builder_default_alloc@@Base+0x94>
   12df4:	ldr	r0, [r4, #4]
   12df8:	mov	r6, #0
   12dfc:	cmp	r0, r2
   12e00:	lsrcs	r0, r0, #1
   12e04:	cmpcs	r0, r7
   12e08:	bcs	12e54 <flatcc_builder_default_alloc@@Base+0x104>
   12e0c:	ldr	r0, [r4]
   12e10:	mov	r1, r7
   12e14:	bl	123fc <realloc@plt>
   12e18:	cmp	r0, #0
   12e1c:	beq	12e50 <flatcc_builder_default_alloc@@Base+0x100>
   12e20:	mov	r5, r0
   12e24:	cmp	r8, #0
   12e28:	beq	12e48 <flatcc_builder_default_alloc@@Base+0xf8>
   12e2c:	ldr	r1, [r4, #4]
   12e30:	cmp	r7, r1
   12e34:	bls	12e48 <flatcc_builder_default_alloc@@Base+0xf8>
   12e38:	add	r0, r5, r1
   12e3c:	sub	r2, r7, r1
   12e40:	mov	r1, #0
   12e44:	bl	12468 <memset@plt>
   12e48:	stm	r4, {r5, r7}
   12e4c:	b	12e54 <flatcc_builder_default_alloc@@Base+0x104>
   12e50:	mvn	r6, #0
   12e54:	mov	r0, r6
   12e58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012e5c <flatcc_builder_flush_vtable_cache@@Base>:
   12e5c:	push	{r4, r5, fp, lr}
   12e60:	add	fp, sp, #8
   12e64:	mov	r4, r0
   12e68:	ldr	r0, [r0, #116]	; 0x74
   12e6c:	cmp	r0, #0
   12e70:	popeq	{r4, r5, fp, pc}
   12e74:	ldr	r0, [r4, #92]	; 0x5c
   12e78:	ldr	r2, [r4, #96]	; 0x60
   12e7c:	mov	r1, #0
   12e80:	mov	r5, #0
   12e84:	bl	12468 <memset@plt>
   12e88:	mov	r0, #16
   12e8c:	str	r5, [r4, #120]	; 0x78
   12e90:	str	r0, [r4, #124]	; 0x7c
   12e94:	pop	{r4, r5, fp, pc}

00012e98 <flatcc_builder_custom_init@@Base>:
   12e98:	push	{r4, r5, r6, r7, fp, lr}
   12e9c:	add	fp, sp, #16
   12ea0:	mov	r6, r2
   12ea4:	mov	r7, r1
   12ea8:	mov	r1, #0
   12eac:	mov	r2, #232	; 0xe8
   12eb0:	mov	r5, r3
   12eb4:	mov	r4, r0
   12eb8:	bl	12468 <memset@plt>
   12ebc:	ldr	r0, [fp, #8]
   12ec0:	cmp	r7, #0
   12ec4:	bne	12edc <flatcc_builder_custom_init@@Base+0x44>
   12ec8:	movw	r7, #27652	; 0x6c04
   12ecc:	mov	r1, #1
   12ed0:	add	r6, r4, #188	; 0xbc
   12ed4:	movt	r7, #1
   12ed8:	str	r1, [r4, #184]	; 0xb8
   12edc:	movw	r1, #11600	; 0x2d50
   12ee0:	cmp	r5, #0
   12ee4:	str	r6, [r4, #36]	; 0x24
   12ee8:	str	r0, [r4, #40]	; 0x28
   12eec:	mov	r0, #0
   12ef0:	str	r7, [r4, #44]	; 0x2c
   12ef4:	movt	r1, #1
   12ef8:	movne	r1, r5
   12efc:	str	r1, [r4, #48]	; 0x30
   12f00:	pop	{r4, r5, r6, r7, fp, pc}

00012f04 <flatcc_builder_init@@Base>:
   12f04:	push	{r4, r5, fp, lr}
   12f08:	add	fp, sp, #8
   12f0c:	mov	r1, #0
   12f10:	mov	r2, #232	; 0xe8
   12f14:	mov	r4, r0
   12f18:	mov	r5, #0
   12f1c:	bl	12468 <memset@plt>
   12f20:	mov	r0, #1
   12f24:	movw	r1, #27652	; 0x6c04
   12f28:	add	r2, r4, #188	; 0xbc
   12f2c:	str	r0, [r4, #184]	; 0xb8
   12f30:	movw	r0, #11600	; 0x2d50
   12f34:	movt	r1, #1
   12f38:	str	r2, [r4, #36]	; 0x24
   12f3c:	str	r5, [r4, #40]	; 0x28
   12f40:	movt	r0, #1
   12f44:	str	r1, [r4, #44]	; 0x2c
   12f48:	str	r0, [r4, #48]	; 0x30
   12f4c:	mov	r0, #0
   12f50:	pop	{r4, r5, fp, pc}

00012f54 <flatcc_builder_custom_reset@@Base>:
   12f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f58:	add	fp, sp, #28
   12f5c:	sub	sp, sp, #4
   12f60:	mov	r9, r2
   12f64:	mov	r8, r1
   12f68:	mov	sl, r0
   12f6c:	add	r7, r0, #52	; 0x34
   12f70:	mov	r5, #0
   12f74:	add	r6, sl, r5, lsl #3
   12f78:	ldr	r0, [r6, #52]	; 0x34
   12f7c:	cmp	r0, #0
   12f80:	beq	12fc8 <flatcc_builder_custom_reset@@Base+0x74>
   12f84:	cmp	r9, #0
   12f88:	cmpne	r5, #5
   12f8c:	beq	12fb8 <flatcc_builder_custom_reset@@Base+0x64>
   12f90:	ldr	r0, [sl, #40]	; 0x28
   12f94:	ldr	r4, [sl, #48]	; 0x30
   12f98:	mov	r1, r7
   12f9c:	mov	r2, #1
   12fa0:	mov	r3, #1
   12fa4:	str	r5, [sp]
   12fa8:	blx	r4
   12fac:	cmp	r0, #0
   12fb0:	bne	13068 <flatcc_builder_custom_reset@@Base+0x114>
   12fb4:	ldr	r0, [r6, #52]	; 0x34
   12fb8:	ldr	r2, [r6, #56]	; 0x38
   12fbc:	mov	r1, #0
   12fc0:	bl	12468 <memset@plt>
   12fc4:	b	12fd4 <flatcc_builder_custom_reset@@Base+0x80>
   12fc8:	ldr	r0, [r6, #56]	; 0x38
   12fcc:	cmp	r0, #0
   12fd0:	bne	13078 <flatcc_builder_custom_reset@@Base+0x124>
   12fd4:	add	r5, r5, #1
   12fd8:	add	r7, r7, #8
   12fdc:	cmp	r5, #8
   12fe0:	bne	12f74 <flatcc_builder_custom_reset@@Base+0x20>
   12fe4:	mov	r0, #0
   12fe8:	vmov.i32	q8, #0	; 0x00000000
   12fec:	mov	r5, #0
   12ff0:	str	r0, [sl, #120]	; 0x78
   12ff4:	ldr	r1, [sl, #124]	; 0x7c
   12ff8:	cmp	r1, #0
   12ffc:	movne	r1, #16
   13000:	strne	r1, [sl, #124]	; 0x7c
   13004:	add	r1, sl, #148	; 0x94
   13008:	str	r0, [sl, #136]	; 0x88
   1300c:	str	r0, [sl, #140]	; 0x8c
   13010:	strh	r0, [sl, #128]	; 0x80
   13014:	str	r0, [sl, #32]
   13018:	cmp	r8, #0
   1301c:	vst1.32	{d16-d17}, [r1]
   13020:	ldr	r2, [sl, #60]	; 0x3c
   13024:	ldr	r1, [sl, #52]	; 0x34
   13028:	ldr	r3, [sl, #76]	; 0x4c
   1302c:	str	r2, [sl, #16]
   13030:	str	r0, [sl, #20]
   13034:	str	r0, [sl, #24]
   13038:	movne	r0, #0
   1303c:	str	r3, [sl]
   13040:	str	r1, [sl, #4]
   13044:	strne	r0, [sl, #172]	; 0xac
   13048:	strne	r0, [sl, #176]	; 0xb0
   1304c:	strne	r0, [sl, #180]	; 0xb4
   13050:	ldr	r0, [sl, #184]	; 0xb8
   13054:	cmp	r0, #0
   13058:	beq	1306c <flatcc_builder_custom_reset@@Base+0x118>
   1305c:	add	r0, sl, #188	; 0xbc
   13060:	bl	16ad4 <flatcc_emitter_reset@@Base>
   13064:	b	1306c <flatcc_builder_custom_reset@@Base+0x118>
   13068:	mvn	r5, #0
   1306c:	mov	r0, r5
   13070:	sub	sp, fp, #28
   13074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13078:	movw	r0, #30560	; 0x7760
   1307c:	movw	r1, #30578	; 0x7772
   13080:	movw	r3, #30648	; 0x77b8
   13084:	movw	r2, #434	; 0x1b2
   13088:	movt	r0, #1
   1308c:	movt	r1, #1
   13090:	movt	r3, #1
   13094:	bl	12498 <__assert_fail@plt>

00013098 <flatcc_builder_reset@@Base>:
   13098:	mov	r1, #0
   1309c:	mov	r2, #0
   130a0:	b	12f54 <flatcc_builder_custom_reset@@Base>

000130a4 <flatcc_builder_clear@@Base>:
   130a4:	push	{r4, r5, r6, r7, fp, lr}
   130a8:	add	fp, sp, #16
   130ac:	sub	sp, sp, #8
   130b0:	mov	r7, r0
   130b4:	add	r5, r0, #52	; 0x34
   130b8:	mov	r6, #0
   130bc:	ldr	r0, [r7, #40]	; 0x28
   130c0:	ldr	r4, [r7, #48]	; 0x30
   130c4:	mov	r1, r5
   130c8:	mov	r2, #0
   130cc:	mov	r3, #0
   130d0:	str	r6, [sp]
   130d4:	blx	r4
   130d8:	add	r6, r6, #1
   130dc:	add	r5, r5, #8
   130e0:	cmp	r6, #8
   130e4:	bne	130bc <flatcc_builder_clear@@Base+0x18>
   130e8:	ldr	r0, [r7, #184]	; 0xb8
   130ec:	cmp	r0, #0
   130f0:	beq	130fc <flatcc_builder_clear@@Base+0x58>
   130f4:	add	r0, r7, #188	; 0xbc
   130f8:	bl	16ba0 <flatcc_emitter_clear@@Base>
   130fc:	mov	r0, r7
   13100:	mov	r1, #0
   13104:	mov	r2, #232	; 0xe8
   13108:	sub	sp, fp, #16
   1310c:	pop	{r4, r5, r6, r7, fp, lr}
   13110:	b	12468 <memset@plt>

00013114 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13114:	push	{r4, r5, r6, r7, fp, lr}
   13118:	add	fp, sp, #16
   1311c:	sub	sp, sp, #8
   13120:	mov	r4, r0
   13124:	ldr	r0, [r0, #112]	; 0x70
   13128:	add	r1, r1, #7
   1312c:	ldr	r7, [r4, #228]	; 0xe4
   13130:	bic	r5, r1, #3
   13134:	add	r6, r4, #108	; 0x6c
   13138:	add	r2, r7, r5
   1313c:	cmp	r2, r0
   13140:	bls	13168 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13144:	ldr	r0, [r4, #40]	; 0x28
   13148:	ldr	ip, [r4, #48]	; 0x30
   1314c:	mov	r1, #7
   13150:	mov	r3, #0
   13154:	str	r1, [sp]
   13158:	mov	r1, r6
   1315c:	blx	ip
   13160:	cmp	r0, #0
   13164:	bne	131b4 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13168:	ldr	r0, [r6]
   1316c:	adds	r6, r0, r7
   13170:	beq	131a4 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13174:	mov	r0, r6
   13178:	mov	r1, #0
   1317c:	mov	r2, r5
   13180:	bl	12468 <memset@plt>
   13184:	ldr	r0, [r4, #224]	; 0xe0
   13188:	str	r0, [r6], #4
   1318c:	ldr	r0, [r4, #228]	; 0xe4
   13190:	add	r1, r0, #4
   13194:	add	r0, r0, r5
   13198:	str	r1, [r4, #224]	; 0xe0
   1319c:	str	r0, [r4, #228]	; 0xe4
   131a0:	b	131a8 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   131a4:	mov	r6, #0
   131a8:	mov	r0, r6
   131ac:	sub	sp, fp, #16
   131b0:	pop	{r4, r5, r6, r7, fp, pc}
   131b4:	movw	r0, #35096	; 0x8918
   131b8:	movw	r1, #30578	; 0x7772
   131bc:	movw	r3, #34642	; 0x8752
   131c0:	mov	r2, #308	; 0x134
   131c4:	movt	r0, #1
   131c8:	movt	r1, #1
   131cc:	movt	r3, #1
   131d0:	bl	12498 <__assert_fail@plt>

000131d4 <flatcc_builder_enter_user_frame@@Base>:
   131d4:	push	{r4, r5, r6, r7, fp, lr}
   131d8:	add	fp, sp, #16
   131dc:	sub	sp, sp, #8
   131e0:	mov	r4, r0
   131e4:	ldr	r0, [r0, #112]	; 0x70
   131e8:	add	r1, r1, #7
   131ec:	ldr	r7, [r4, #228]	; 0xe4
   131f0:	bic	r5, r1, #3
   131f4:	add	r6, r4, #108	; 0x6c
   131f8:	add	r2, r7, r5
   131fc:	cmp	r2, r0
   13200:	bls	13228 <flatcc_builder_enter_user_frame@@Base+0x54>
   13204:	ldr	r0, [r4, #40]	; 0x28
   13208:	ldr	ip, [r4, #48]	; 0x30
   1320c:	mov	r1, #7
   13210:	mov	r3, #0
   13214:	str	r1, [sp]
   13218:	mov	r1, r6
   1321c:	blx	ip
   13220:	cmp	r0, #0
   13224:	bne	13270 <flatcc_builder_enter_user_frame@@Base+0x9c>
   13228:	ldr	r0, [r6]
   1322c:	adds	r6, r0, r7
   13230:	beq	13264 <flatcc_builder_enter_user_frame@@Base+0x90>
   13234:	mov	r0, r6
   13238:	mov	r1, #0
   1323c:	mov	r2, r5
   13240:	bl	12468 <memset@plt>
   13244:	ldr	r0, [r4, #224]	; 0xe0
   13248:	str	r0, [r6]
   1324c:	ldr	r1, [r4, #228]	; 0xe4
   13250:	add	r0, r1, #4
   13254:	add	r1, r1, r5
   13258:	str	r0, [r4, #224]	; 0xe0
   1325c:	str	r1, [r4, #228]	; 0xe4
   13260:	b	13268 <flatcc_builder_enter_user_frame@@Base+0x94>
   13264:	mov	r0, #0
   13268:	sub	sp, fp, #16
   1326c:	pop	{r4, r5, r6, r7, fp, pc}
   13270:	movw	r0, #35096	; 0x8918
   13274:	movw	r1, #30578	; 0x7772
   13278:	movw	r3, #34642	; 0x8752
   1327c:	mov	r2, #308	; 0x134
   13280:	movt	r0, #1
   13284:	movt	r1, #1
   13288:	movt	r3, #1
   1328c:	bl	12498 <__assert_fail@plt>

00013290 <flatcc_builder_exit_user_frame@@Base>:
   13290:	push	{fp, lr}
   13294:	mov	fp, sp
   13298:	ldr	r1, [r0, #224]	; 0xe0
   1329c:	cmp	r1, #0
   132a0:	subne	r2, r1, #4
   132a4:	strne	r2, [r0, #228]	; 0xe4
   132a8:	ldrne	r2, [r0, #108]	; 0x6c
   132ac:	addne	r1, r2, r1
   132b0:	ldrne	r1, [r1, #-4]
   132b4:	strne	r1, [r0, #224]	; 0xe0
   132b8:	movne	r0, r1
   132bc:	popne	{fp, pc}
   132c0:	movw	r0, #30710	; 0x77f6
   132c4:	movw	r1, #30578	; 0x7772
   132c8:	movw	r3, #30735	; 0x780f
   132cc:	movw	r2, #542	; 0x21e
   132d0:	movt	r0, #1
   132d4:	movt	r1, #1
   132d8:	movt	r3, #1
   132dc:	bl	12498 <__assert_fail@plt>

000132e0 <flatcc_builder_exit_user_frame_at@@Base>:
   132e0:	push	{fp, lr}
   132e4:	mov	fp, sp
   132e8:	ldr	r2, [r0, #224]	; 0xe0
   132ec:	cmp	r2, r1
   132f0:	bcc	13300 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   132f4:	str	r1, [r0, #224]	; 0xe0
   132f8:	pop	{fp, lr}
   132fc:	b	13290 <flatcc_builder_exit_user_frame@@Base>
   13300:	movw	r0, #30793	; 0x7849
   13304:	movw	r1, #30578	; 0x7772
   13308:	movw	r3, #30824	; 0x7868
   1330c:	movw	r2, #551	; 0x227
   13310:	movt	r0, #1
   13314:	movt	r1, #1
   13318:	movt	r3, #1
   1331c:	bl	12498 <__assert_fail@plt>

00013320 <flatcc_builder_get_current_user_frame@@Base>:
   13320:	ldr	r0, [r0, #224]	; 0xe0
   13324:	bx	lr

00013328 <flatcc_builder_get_user_frame_ptr@@Base>:
   13328:	ldr	r0, [r0, #108]	; 0x6c
   1332c:	add	r0, r0, r1
   13330:	bx	lr

00013334 <flatcc_builder_embed_buffer@@Base>:
   13334:	push	{r4, r5, r6, r7, fp, lr}
   13338:	add	fp, sp, #16
   1333c:	sub	sp, sp, #88	; 0x58
   13340:	mov	r4, r0
   13344:	ldr	r0, [fp, #8]
   13348:	mov	r5, r3
   1334c:	mov	r7, r2
   13350:	mov	r2, r1
   13354:	sub	r1, fp, #18
   13358:	strh	r0, [fp, #-18]	; 0xffffffee
   1335c:	mov	r0, r4
   13360:	ldr	r3, [r4, #152]	; 0x98
   13364:	cmp	r3, #0
   13368:	movwne	r3, #1
   1336c:	bl	13498 <flatcc_builder_embed_buffer@@Base+0x164>
   13370:	ldr	r1, [fp, #12]
   13374:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13378:	ldr	r0, [r4, #136]	; 0x88
   1337c:	mov	r2, #0
   13380:	str	r2, [sp, #12]
   13384:	str	r2, [sp, #8]
   13388:	and	r1, r1, #2
   1338c:	sub	r3, r3, #1
   13390:	add	r1, r5, r1, lsl #1
   13394:	sub	r1, r0, r1
   13398:	and	r3, r1, r3
   1339c:	add	r1, r3, r5
   133a0:	str	r1, [fp, #-24]	; 0xffffffe8
   133a4:	ldr	r1, [r4, #152]	; 0x98
   133a8:	cmp	r1, #0
   133ac:	mov	r1, #0
   133b0:	beq	133d0 <flatcc_builder_embed_buffer@@Base+0x9c>
   133b4:	mov	r1, #4
   133b8:	sub	r2, fp, #24
   133bc:	str	r1, [sp, #20]
   133c0:	str	r2, [sp, #16]
   133c4:	mov	r2, #1
   133c8:	str	r1, [sp, #8]
   133cc:	str	r2, [sp, #12]
   133d0:	cmp	r5, #0
   133d4:	beq	133f8 <flatcc_builder_embed_buffer@@Base+0xc4>
   133d8:	add	r6, sp, #8
   133dc:	add	r1, r1, r5
   133e0:	add	r6, r6, r2, lsl #3
   133e4:	add	r2, r2, #1
   133e8:	str	r1, [sp, #8]
   133ec:	str	r7, [r6, #8]
   133f0:	str	r5, [r6, #12]
   133f4:	str	r2, [sp, #12]
   133f8:	cmp	r3, #0
   133fc:	beq	13428 <flatcc_builder_embed_buffer@@Base+0xf4>
   13400:	add	r7, sp, #8
   13404:	movw	r6, #30048	; 0x7560
   13408:	add	r1, r1, r3
   1340c:	add	r7, r7, r2, lsl #3
   13410:	movt	r6, #1
   13414:	add	r2, r2, #1
   13418:	str	r1, [sp, #8]
   1341c:	str	r6, [r7, #8]
   13420:	str	r3, [r7, #12]
   13424:	str	r2, [sp, #12]
   13428:	cmp	r1, #0
   1342c:	ble	13484 <flatcc_builder_embed_buffer@@Base+0x150>
   13430:	sub	r5, r0, r1
   13434:	ldr	r0, [r4, #36]	; 0x24
   13438:	ldr	r7, [r4, #44]	; 0x2c
   1343c:	str	r1, [sp]
   13440:	add	r1, sp, #8
   13444:	add	r1, r1, #8
   13448:	mov	r3, r5
   1344c:	blx	r7
   13450:	cmp	r0, #0
   13454:	streq	r5, [r4, #136]	; 0x88
   13458:	moveq	r0, r5
   1345c:	subeq	sp, fp, #16
   13460:	popeq	{r4, r5, r6, r7, fp, pc}
   13464:	movw	r0, #35096	; 0x8918
   13468:	movw	r1, #30578	; 0x7772
   1346c:	movw	r3, #34775	; 0x87d7
   13470:	movw	r2, #651	; 0x28b
   13474:	movt	r0, #1
   13478:	movt	r1, #1
   1347c:	movt	r3, #1
   13480:	bl	12498 <__assert_fail@plt>
   13484:	movw	r0, #35096	; 0x8918
   13488:	movw	r1, #30578	; 0x7772
   1348c:	movw	r3, #34775	; 0x87d7
   13490:	movw	r2, #647	; 0x287
   13494:	b	13474 <flatcc_builder_embed_buffer@@Base+0x140>
   13498:	push	{r4, sl, fp, lr}
   1349c:	add	fp, sp, #8
   134a0:	sub	sp, sp, #80	; 0x50
   134a4:	cmp	r2, #0
   134a8:	bne	134b8 <flatcc_builder_embed_buffer@@Base+0x184>
   134ac:	ldrh	r2, [r0, #132]	; 0x84
   134b0:	cmp	r2, #0
   134b4:	movweq	r2, #1
   134b8:	ldrh	r4, [r1]
   134bc:	cmp	r4, #4
   134c0:	movwcc	r4, #4
   134c4:	cmpcs	r4, r2
   134c8:	bcs	134d8 <flatcc_builder_embed_buffer@@Base+0x1a4>
   134cc:	cmp	r4, r2
   134d0:	movcc	r4, r2
   134d4:	strh	r4, [r1]
   134d8:	cmp	r3, #0
   134dc:	bne	13550 <flatcc_builder_embed_buffer@@Base+0x21c>
   134e0:	ldr	r4, [r0, #140]	; 0x8c
   134e4:	sub	r1, r2, #1
   134e8:	ands	r1, r4, r1
   134ec:	beq	13550 <flatcc_builder_embed_buffer@@Base+0x21c>
   134f0:	movw	r2, #30048	; 0x7560
   134f4:	str	r1, [sp, #20]
   134f8:	cmn	r1, #1
   134fc:	movt	r2, #1
   13500:	str	r2, [sp, #16]
   13504:	mov	r2, #1
   13508:	str	r1, [sp, #8]
   1350c:	str	r2, [sp, #12]
   13510:	add	r2, r1, r4
   13514:	str	r2, [r0, #140]	; 0x8c
   13518:	ble	13558 <flatcc_builder_embed_buffer@@Base+0x224>
   1351c:	ldr	r2, [r0, #36]	; 0x24
   13520:	ldr	ip, [r0, #44]	; 0x2c
   13524:	add	r0, sp, #8
   13528:	str	r1, [sp]
   1352c:	mov	r3, r4
   13530:	add	r1, r0, #8
   13534:	mov	r0, r2
   13538:	mov	r2, #1
   1353c:	blx	ip
   13540:	cmp	r0, #0
   13544:	bne	1356c <flatcc_builder_embed_buffer@@Base+0x238>
   13548:	cmn	r4, #1
   1354c:	beq	1358c <flatcc_builder_embed_buffer@@Base+0x258>
   13550:	sub	sp, fp, #8
   13554:	pop	{r4, sl, fp, pc}
   13558:	movw	r0, #35096	; 0x8918
   1355c:	movw	r1, #30578	; 0x7772
   13560:	movw	r3, #34963	; 0x8893
   13564:	movw	r2, #673	; 0x2a1
   13568:	b	1357c <flatcc_builder_embed_buffer@@Base+0x248>
   1356c:	movw	r0, #35096	; 0x8918
   13570:	movw	r1, #30578	; 0x7772
   13574:	movw	r3, #34963	; 0x8893
   13578:	movw	r2, #677	; 0x2a5
   1357c:	movt	r0, #1
   13580:	movt	r1, #1
   13584:	movt	r3, #1
   13588:	bl	12498 <__assert_fail@plt>
   1358c:	movw	r0, #35096	; 0x8918
   13590:	movw	r1, #30578	; 0x7772
   13594:	movw	r3, #34709	; 0x8795
   13598:	movw	r2, #702	; 0x2be
   1359c:	movt	r0, #1
   135a0:	movt	r1, #1
   135a4:	movt	r3, #1
   135a8:	bl	12498 <__assert_fail@plt>

000135ac <flatcc_builder_create_buffer@@Base>:
   135ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b0:	add	fp, sp, #28
   135b4:	sub	sp, sp, #100	; 0x64
   135b8:	ldr	sl, [fp, #12]
   135bc:	mov	r4, r0
   135c0:	ldr	r0, [fp, #8]
   135c4:	mov	r7, r1
   135c8:	mov	r5, #0
   135cc:	mov	r6, r3
   135d0:	sub	r1, fp, #30
   135d4:	str	r5, [sp, #12]
   135d8:	and	r9, sl, #1
   135dc:	strh	r0, [fp, #-30]	; 0xffffffe2
   135e0:	mov	r0, r4
   135e4:	mov	r3, r9
   135e8:	bl	13498 <flatcc_builder_embed_buffer@@Base+0x164>
   135ec:	ldrh	r0, [r4, #128]	; 0x80
   135f0:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   135f4:	str	r6, [sp, #8]
   135f8:	cmp	r0, r1
   135fc:	strhcc	r1, [r4, #128]	; 0x80
   13600:	cmp	r7, #0
   13604:	beq	13620 <flatcc_builder_create_buffer@@Base+0x74>
   13608:	ldr	r5, [r7]
   1360c:	cmp	r5, #0
   13610:	str	r5, [sp, #12]
   13614:	movwne	r5, #1
   13618:	lsl	r7, r5, #2
   1361c:	b	13624 <flatcc_builder_create_buffer@@Base+0x78>
   13620:	mov	r7, #0
   13624:	ldr	r0, [r4, #136]	; 0x88
   13628:	and	r2, sl, #2
   1362c:	mov	r3, #0
   13630:	sub	r6, r1, #1
   13634:	ands	ip, sl, #3
   13638:	mov	sl, #4
   1363c:	mov	r1, #4
   13640:	str	r3, [sp, #20]
   13644:	str	r3, [sp, #16]
   13648:	sub	r2, r0, r2, lsl #1
   1364c:	sub	r2, r2, r7
   13650:	sub	r2, r2, #4
   13654:	beq	13678 <flatcc_builder_create_buffer@@Base+0xcc>
   13658:	mov	r1, #4
   1365c:	sub	r3, fp, #40	; 0x28
   13660:	str	r1, [sp, #28]
   13664:	str	r3, [sp, #24]
   13668:	str	r1, [sp, #16]
   1366c:	mov	r3, #1
   13670:	mov	r1, #8
   13674:	str	r3, [sp, #20]
   13678:	add	lr, sp, #16
   1367c:	and	r6, r2, r6
   13680:	sub	r8, fp, #36	; 0x24
   13684:	str	r1, [sp, #16]
   13688:	cmp	r5, #0
   1368c:	add	r2, lr, r3, lsl #3
   13690:	str	r8, [r2, #8]
   13694:	str	sl, [r2, #12]
   13698:	add	r2, r3, #1
   1369c:	str	r2, [sp, #20]
   136a0:	beq	136c4 <flatcc_builder_create_buffer@@Base+0x118>
   136a4:	add	r2, lr, r2, lsl #3
   136a8:	add	r1, r1, r7
   136ac:	add	r5, sp, #12
   136b0:	str	r1, [sp, #16]
   136b4:	str	r5, [r2, #8]
   136b8:	str	r7, [r2, #12]
   136bc:	orr	r2, r3, #2
   136c0:	str	r2, [sp, #20]
   136c4:	cmp	r6, #0
   136c8:	beq	136f0 <flatcc_builder_create_buffer@@Base+0x144>
   136cc:	movw	r5, #30048	; 0x7560
   136d0:	add	r3, lr, r2, lsl #3
   136d4:	add	r1, r1, r6
   136d8:	add	r2, r2, #1
   136dc:	movt	r5, #1
   136e0:	str	r1, [sp, #16]
   136e4:	str	r5, [r3, #8]
   136e8:	str	r6, [r3, #12]
   136ec:	str	r2, [sp, #20]
   136f0:	sub	r7, r0, r1
   136f4:	cmp	ip, #0
   136f8:	mov	r6, #144	; 0x90
   136fc:	ldr	r3, [sp, #8]
   13700:	mov	r0, r7
   13704:	addne	r0, r0, #4
   13708:	cmp	r9, #0
   1370c:	movweq	r6, #140	; 0x8c
   13710:	cmp	r1, #0
   13714:	ldr	r6, [r4, r6]
   13718:	sub	r3, r3, r0
   1371c:	str	r3, [fp, #-36]	; 0xffffffdc
   13720:	sub	r0, r6, r0
   13724:	str	r0, [fp, #-40]	; 0xffffffd8
   13728:	ble	13780 <flatcc_builder_create_buffer@@Base+0x1d4>
   1372c:	ldr	r0, [r4, #36]	; 0x24
   13730:	ldr	r6, [r4, #44]	; 0x2c
   13734:	str	r1, [sp]
   13738:	add	r1, lr, #8
   1373c:	mov	r3, r7
   13740:	blx	r6
   13744:	cmp	r0, #0
   13748:	bne	13794 <flatcc_builder_create_buffer@@Base+0x1e8>
   1374c:	cmp	r7, #0
   13750:	str	r7, [r4, #136]	; 0x88
   13754:	movne	r0, r7
   13758:	subne	sp, fp, #28
   1375c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13760:	movw	r0, #35096	; 0x8918
   13764:	movw	r1, #30578	; 0x7772
   13768:	movw	r3, #30893	; 0x78ad
   1376c:	mov	r2, #772	; 0x304
   13770:	movt	r0, #1
   13774:	movt	r1, #1
   13778:	movt	r3, #1
   1377c:	bl	12498 <__assert_fail@plt>
   13780:	movw	r0, #35096	; 0x8918
   13784:	movw	r1, #30578	; 0x7772
   13788:	movw	r3, #34775	; 0x87d7
   1378c:	movw	r2, #647	; 0x287
   13790:	b	137a4 <flatcc_builder_create_buffer@@Base+0x1f8>
   13794:	movw	r0, #35096	; 0x8918
   13798:	movw	r1, #30578	; 0x7772
   1379c:	movw	r3, #34775	; 0x87d7
   137a0:	movw	r2, #651	; 0x28b
   137a4:	movt	r0, #1
   137a8:	movt	r1, #1
   137ac:	movt	r3, #1
   137b0:	bl	12498 <__assert_fail@plt>

000137b4 <flatcc_builder_create_struct@@Base>:
   137b4:	push	{r4, r5, r6, sl, fp, lr}
   137b8:	add	fp, sp, #16
   137bc:	sub	sp, sp, #80	; 0x50
   137c0:	cmp	r3, #0
   137c4:	beq	1389c <flatcc_builder_create_struct@@Base+0xe8>
   137c8:	mov	r5, r0
   137cc:	ldrh	r0, [r0, #128]	; 0x80
   137d0:	mov	r4, #0
   137d4:	cmp	r0, r3
   137d8:	strhcc	r3, [r5, #128]	; 0x80
   137dc:	sub	r3, r3, #1
   137e0:	cmp	r2, #0
   137e4:	ldr	r0, [r5, #136]	; 0x88
   137e8:	str	r4, [sp, #12]
   137ec:	str	r4, [sp, #8]
   137f0:	movne	r4, #1
   137f4:	strne	r2, [sp, #20]
   137f8:	strne	r1, [sp, #16]
   137fc:	strne	r2, [sp, #8]
   13800:	strne	r4, [sp, #12]
   13804:	sub	r6, r0, r2
   13808:	and	r3, r6, r3
   1380c:	cmp	r3, #0
   13810:	beq	1383c <flatcc_builder_create_struct@@Base+0x88>
   13814:	add	r1, sp, #8
   13818:	movw	r6, #30048	; 0x7560
   1381c:	add	r2, r3, r2
   13820:	add	r1, r1, r4, lsl #3
   13824:	movt	r6, #1
   13828:	add	r4, r4, #1
   1382c:	str	r2, [sp, #8]
   13830:	str	r6, [r1, #8]
   13834:	str	r3, [r1, #12]
   13838:	str	r4, [sp, #12]
   1383c:	cmp	r2, #0
   13840:	ble	138bc <flatcc_builder_create_struct@@Base+0x108>
   13844:	sub	r6, r0, r2
   13848:	ldr	r0, [r5, #36]	; 0x24
   1384c:	ldr	ip, [r5, #44]	; 0x2c
   13850:	add	r1, sp, #8
   13854:	str	r2, [sp]
   13858:	mov	r2, r4
   1385c:	add	r1, r1, #8
   13860:	mov	r3, r6
   13864:	blx	ip
   13868:	cmp	r0, #0
   1386c:	streq	r6, [r5, #136]	; 0x88
   13870:	moveq	r0, r6
   13874:	subeq	sp, fp, #16
   13878:	popeq	{r4, r5, r6, sl, fp, pc}
   1387c:	movw	r0, #35096	; 0x8918
   13880:	movw	r1, #30578	; 0x7772
   13884:	movw	r3, #34775	; 0x87d7
   13888:	movw	r2, #651	; 0x28b
   1388c:	movt	r0, #1
   13890:	movt	r1, #1
   13894:	movt	r3, #1
   13898:	bl	12498 <__assert_fail@plt>
   1389c:	movw	r0, #31024	; 0x7930
   138a0:	movw	r1, #30578	; 0x7772
   138a4:	movw	r3, #31035	; 0x793b
   138a8:	movw	r2, #783	; 0x30f
   138ac:	movt	r0, #1
   138b0:	movt	r1, #1
   138b4:	movt	r3, #1
   138b8:	bl	12498 <__assert_fail@plt>
   138bc:	movw	r0, #35096	; 0x8918
   138c0:	movw	r1, #30578	; 0x7772
   138c4:	movw	r3, #34775	; 0x87d7
   138c8:	movw	r2, #647	; 0x287
   138cc:	b	1388c <flatcc_builder_create_struct@@Base+0xd8>

000138d0 <flatcc_builder_start_buffer@@Base>:
   138d0:	push	{r4, r5, r6, r7, fp, lr}
   138d4:	add	fp, sp, #16
   138d8:	mov	r5, r1
   138dc:	ldrh	r1, [r0, #128]	; 0x80
   138e0:	mov	r6, r3
   138e4:	mov	r7, r2
   138e8:	mov	r4, r0
   138ec:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   138f0:	mov	r1, r0
   138f4:	mvn	r0, #0
   138f8:	cmp	r1, #0
   138fc:	popne	{r4, r5, r6, r7, fp, pc}
   13900:	mov	r0, #1
   13904:	cmp	r5, #0
   13908:	strh	r0, [r4, #128]	; 0x80
   1390c:	ldrh	r1, [r4, #132]	; 0x84
   13910:	ldr	r2, [r4, #32]
   13914:	strh	r1, [r2, #34]	; 0x22
   13918:	strh	r7, [r4, #132]	; 0x84
   1391c:	ldrh	r1, [r4, #164]	; 0xa4
   13920:	ldr	r2, [r4, #32]
   13924:	strh	r1, [r2, #32]
   13928:	strh	r6, [r4, #164]	; 0xa4
   1392c:	ldr	r1, [r4, #32]
   13930:	ldr	r2, [r4, #144]	; 0x90
   13934:	str	r2, [r1, #20]
   13938:	ldr	r1, [r4, #32]
   1393c:	ldr	r2, [r4, #152]	; 0x98
   13940:	str	r2, [r1, #28]
   13944:	ldr	r3, [r4, #148]	; 0x94
   13948:	ldr	r1, [r4, #32]
   1394c:	ldr	r2, [r4, #136]	; 0x88
   13950:	ldr	r7, [r4, #168]	; 0xa8
   13954:	add	r6, r3, #1
   13958:	str	r2, [r4, #144]	; 0x90
   1395c:	str	r6, [r4, #148]	; 0x94
   13960:	str	r3, [r4, #152]	; 0x98
   13964:	str	r7, [r1, #16]
   13968:	movw	r1, #30048	; 0x7560
   1396c:	movt	r1, #1
   13970:	movne	r1, r5
   13974:	ldr	r1, [r1]
   13978:	str	r1, [r4, #168]	; 0xa8
   1397c:	ldr	r1, [r4, #32]
   13980:	strh	r0, [r1, #14]
   13984:	mov	r0, #0
   13988:	pop	{r4, r5, r6, r7, fp, pc}
   1398c:	push	{r4, r5, r6, r7, fp, lr}
   13990:	add	fp, sp, #16
   13994:	sub	sp, sp, #8
   13998:	mov	r5, r1
   1399c:	ldr	r1, [r0, #156]	; 0x9c
   139a0:	ldr	r2, [r0, #160]	; 0xa0
   139a4:	mov	r4, r0
   139a8:	add	r0, r1, #1
   139ac:	cmp	r1, r2
   139b0:	str	r0, [r4, #156]	; 0x9c
   139b4:	bge	139c8 <flatcc_builder_start_buffer@@Base+0xf8>
   139b8:	ldr	r0, [r4, #32]
   139bc:	add	r0, r0, #36	; 0x24
   139c0:	str	r0, [r4, #32]
   139c4:	b	13a5c <flatcc_builder_start_buffer@@Base+0x18c>
   139c8:	ldr	r2, [r4, #176]	; 0xb0
   139cc:	mvn	r6, #0
   139d0:	cmp	r2, #1
   139d4:	cmpge	r1, r2
   139d8:	bge	13a94 <flatcc_builder_start_buffer@@Base+0x1c4>
   139dc:	add	r7, r0, r0, lsl #3
   139e0:	ldr	r0, [r4, #88]	; 0x58
   139e4:	lsl	r2, r7, #2
   139e8:	cmp	r2, r0
   139ec:	bls	13a14 <flatcc_builder_start_buffer@@Base+0x144>
   139f0:	ldr	r0, [r4, #40]	; 0x28
   139f4:	ldr	ip, [r4, #48]	; 0x30
   139f8:	mov	r3, #4
   139fc:	add	r1, r4, #84	; 0x54
   13a00:	str	r3, [sp]
   13a04:	mov	r3, #0
   13a08:	blx	ip
   13a0c:	cmp	r0, #0
   13a10:	bne	13aa0 <flatcc_builder_start_buffer@@Base+0x1d0>
   13a14:	ldr	r1, [r4, #84]	; 0x54
   13a18:	mvn	r0, #35	; 0x23
   13a1c:	add	r0, r0, r7, lsl #2
   13a20:	adds	r0, r0, r1
   13a24:	str	r0, [r4, #32]
   13a28:	beq	13a94 <flatcc_builder_start_buffer@@Base+0x1c4>
   13a2c:	ldr	r1, [r4, #88]	; 0x58
   13a30:	movw	r3, #36409	; 0x8e39
   13a34:	ldr	r2, [r4, #176]	; 0xb0
   13a38:	movt	r3, #14563	; 0x38e3
   13a3c:	umull	r1, r3, r1, r3
   13a40:	cmp	r2, r3, lsr #3
   13a44:	lsr	r1, r3, #3
   13a48:	mov	r3, r1
   13a4c:	movlt	r3, r2
   13a50:	cmp	r2, #0
   13a54:	movle	r3, r1
   13a58:	str	r3, [r4, #160]	; 0xa0
   13a5c:	ldr	r1, [r4, #20]
   13a60:	mvn	r3, #3
   13a64:	mov	r6, #0
   13a68:	str	r1, [r0, #8]
   13a6c:	ldrh	r2, [r4, #130]	; 0x82
   13a70:	strh	r2, [r0, #12]
   13a74:	strh	r5, [r4, #130]	; 0x82
   13a78:	ldr	r2, [r4, #28]
   13a7c:	stm	r0, {r2, r3}
   13a80:	add	r0, r1, r2
   13a84:	str	r6, [r4, #20]
   13a88:	add	r0, r0, #7
   13a8c:	bic	r0, r0, #7
   13a90:	str	r0, [r4, #28]
   13a94:	mov	r0, r6
   13a98:	sub	sp, fp, #16
   13a9c:	pop	{r4, r5, r6, r7, fp, pc}
   13aa0:	movw	r0, #35096	; 0x8918
   13aa4:	movw	r1, #30578	; 0x7772
   13aa8:	movw	r3, #34642	; 0x8752
   13aac:	mov	r2, #308	; 0x134
   13ab0:	movt	r0, #1
   13ab4:	movt	r1, #1
   13ab8:	movt	r3, #1
   13abc:	bl	12498 <__assert_fail@plt>

00013ac0 <flatcc_builder_end_buffer@@Base>:
   13ac0:	push	{r4, r5, r6, sl, fp, lr}
   13ac4:	add	fp, sp, #16
   13ac8:	sub	sp, sp, #8
   13acc:	mov	r4, r0
   13ad0:	ldr	r0, [r0, #32]
   13ad4:	ldrh	r0, [r0, #14]
   13ad8:	cmp	r0, #1
   13adc:	bne	13bd0 <flatcc_builder_end_buffer@@Base+0x110>
   13ae0:	mov	r3, r1
   13ae4:	ldr	r1, [r4, #152]	; 0x98
   13ae8:	ldrh	r0, [r4, #164]	; 0xa4
   13aec:	ldrh	r2, [r4, #132]	; 0x84
   13af0:	cmp	r1, #0
   13af4:	ldrh	r1, [r4, #128]	; 0x80
   13af8:	and	r0, r0, #2
   13afc:	orrne	r0, r0, #1
   13b00:	cmp	r1, r2
   13b04:	movcc	r1, r2
   13b08:	strhcc	r2, [r4, #128]	; 0x80
   13b0c:	str	r0, [sp, #4]
   13b10:	mov	r0, r4
   13b14:	str	r1, [sp]
   13b18:	add	r1, r4, #168	; 0xa8
   13b1c:	bl	135ac <flatcc_builder_create_buffer@@Base>
   13b20:	mov	r6, r0
   13b24:	cmp	r0, #0
   13b28:	beq	13bc4 <flatcc_builder_end_buffer@@Base+0x104>
   13b2c:	ldr	r1, [r4, #32]
   13b30:	ldr	r0, [r4, #16]
   13b34:	ldr	r2, [r4, #20]
   13b38:	ldr	r3, [r1, #20]
   13b3c:	str	r3, [r4, #144]	; 0x90
   13b40:	ldr	r3, [r1, #28]
   13b44:	str	r3, [r4, #152]	; 0x98
   13b48:	ldr	r3, [r1, #16]
   13b4c:	str	r3, [r4, #168]	; 0xa8
   13b50:	ldrh	r1, [r1, #32]
   13b54:	strh	r1, [r4, #164]	; 0xa4
   13b58:	mov	r1, #0
   13b5c:	bl	12468 <memset@plt>
   13b60:	ldr	r0, [r4, #32]
   13b64:	ldr	r1, [r4, #60]	; 0x3c
   13b68:	ldr	r2, [r4, #64]	; 0x40
   13b6c:	ldr	r3, [r0, #8]
   13b70:	str	r3, [r4, #20]
   13b74:	ldr	r3, [r0]
   13b78:	str	r3, [r4, #28]
   13b7c:	add	r1, r1, r3
   13b80:	ldr	r5, [r0, #4]
   13b84:	str	r1, [r4, #16]
   13b88:	sub	r1, r2, r3
   13b8c:	cmp	r1, r5
   13b90:	movhi	r1, r5
   13b94:	str	r1, [r4, #24]
   13b98:	ldrh	r1, [r4, #130]	; 0x82
   13b9c:	ldrh	r2, [r4, #128]	; 0x80
   13ba0:	cmp	r2, r1
   13ba4:	strhcc	r1, [r4, #128]	; 0x80
   13ba8:	ldrh	r1, [r0, #12]
   13bac:	sub	r0, r0, #36	; 0x24
   13bb0:	str	r0, [r4, #32]
   13bb4:	strh	r1, [r4, #130]	; 0x82
   13bb8:	ldr	r0, [r4, #156]	; 0x9c
   13bbc:	sub	r0, r0, #1
   13bc0:	str	r0, [r4, #156]	; 0x9c
   13bc4:	mov	r0, r6
   13bc8:	sub	sp, fp, #16
   13bcc:	pop	{r4, r5, r6, sl, fp, pc}
   13bd0:	movw	r0, #31137	; 0x79a1
   13bd4:	movw	r1, #30578	; 0x7772
   13bd8:	movw	r3, #31181	; 0x79cd
   13bdc:	movw	r2, #838	; 0x346
   13be0:	movt	r0, #1
   13be4:	movt	r1, #1
   13be8:	movt	r3, #1
   13bec:	bl	12498 <__assert_fail@plt>

00013bf0 <flatcc_builder_start_struct@@Base>:
   13bf0:	push	{r4, r5, r6, r7, fp, lr}
   13bf4:	add	fp, sp, #16
   13bf8:	mov	r6, r1
   13bfc:	mov	r1, r2
   13c00:	mov	r4, r0
   13c04:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   13c08:	mov	r5, #0
   13c0c:	cmp	r0, #0
   13c10:	bne	13c80 <flatcc_builder_start_struct@@Base+0x90>
   13c14:	ldr	r1, [r4, #32]
   13c18:	mov	r0, #2
   13c1c:	strh	r0, [r1, #14]
   13c20:	ldr	r2, [r4, #28]
   13c24:	ldr	r0, [r4, #60]	; 0x3c
   13c28:	ldr	r3, [r4, #64]	; 0x40
   13c2c:	add	r0, r0, r2
   13c30:	sub	r2, r3, r2
   13c34:	mvn	r3, #3
   13c38:	cmn	r2, #4
   13c3c:	str	r0, [r4, #16]
   13c40:	movcs	r2, r3
   13c44:	str	r2, [r4, #24]
   13c48:	str	r3, [r1, #4]
   13c4c:	ldr	r7, [r4, #20]
   13c50:	add	r1, r7, r6
   13c54:	cmp	r1, r2
   13c58:	str	r1, [r4, #20]
   13c5c:	bcc	13c7c <flatcc_builder_start_struct@@Base+0x8c>
   13c60:	add	r1, r1, #1
   13c64:	mov	r0, r4
   13c68:	mvn	r2, #3
   13c6c:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   13c70:	cmp	r0, #0
   13c74:	bne	13c80 <flatcc_builder_start_struct@@Base+0x90>
   13c78:	ldr	r0, [r4, #16]
   13c7c:	add	r5, r0, r7
   13c80:	mov	r0, r5
   13c84:	pop	{r4, r5, r6, r7, fp, pc}

00013c88 <flatcc_builder_struct_edit@@Base>:
   13c88:	ldr	r0, [r0, #16]
   13c8c:	bx	lr

00013c90 <flatcc_builder_end_struct@@Base>:
   13c90:	push	{r4, r5, fp, lr}
   13c94:	add	fp, sp, #8
   13c98:	mov	r4, r0
   13c9c:	ldr	r0, [r0, #32]
   13ca0:	ldrh	r0, [r0, #14]
   13ca4:	cmp	r0, #2
   13ca8:	bne	13d48 <flatcc_builder_end_struct@@Base+0xb8>
   13cac:	ldrh	r3, [r4, #130]	; 0x82
   13cb0:	ldr	r1, [r4, #16]
   13cb4:	ldr	r2, [r4, #20]
   13cb8:	mov	r0, r4
   13cbc:	bl	137b4 <flatcc_builder_create_struct@@Base>
   13cc0:	mov	r5, r0
   13cc4:	cmp	r0, #0
   13cc8:	beq	13d40 <flatcc_builder_end_struct@@Base+0xb0>
   13ccc:	ldr	r0, [r4, #16]
   13cd0:	ldr	r2, [r4, #20]
   13cd4:	mov	r1, #0
   13cd8:	bl	12468 <memset@plt>
   13cdc:	ldr	r0, [r4, #32]
   13ce0:	ldr	r1, [r4, #60]	; 0x3c
   13ce4:	ldr	ip, [r4, #64]	; 0x40
   13ce8:	ldr	r3, [r0, #8]
   13cec:	str	r3, [r4, #20]
   13cf0:	ldr	r3, [r0]
   13cf4:	str	r3, [r4, #28]
   13cf8:	add	r1, r1, r3
   13cfc:	ldr	r2, [r0, #4]
   13d00:	str	r1, [r4, #16]
   13d04:	sub	r1, ip, r3
   13d08:	cmp	r1, r2
   13d0c:	movhi	r1, r2
   13d10:	str	r1, [r4, #24]
   13d14:	ldrh	r1, [r4, #130]	; 0x82
   13d18:	ldrh	r2, [r4, #128]	; 0x80
   13d1c:	cmp	r2, r1
   13d20:	strhcc	r1, [r4, #128]	; 0x80
   13d24:	ldrh	r1, [r0, #12]
   13d28:	sub	r0, r0, #36	; 0x24
   13d2c:	str	r0, [r4, #32]
   13d30:	strh	r1, [r4, #130]	; 0x82
   13d34:	ldr	r0, [r4, #156]	; 0x9c
   13d38:	sub	r0, r0, #1
   13d3c:	str	r0, [r4, #156]	; 0x9c
   13d40:	mov	r0, r5
   13d44:	pop	{r4, r5, fp, pc}
   13d48:	movw	r0, #31270	; 0x7a26
   13d4c:	movw	r1, #30578	; 0x7772
   13d50:	movw	r3, #31314	; 0x7a52
   13d54:	mov	r2, #872	; 0x368
   13d58:	movt	r0, #1
   13d5c:	movt	r1, #1
   13d60:	movt	r3, #1
   13d64:	bl	12498 <__assert_fail@plt>

00013d68 <flatcc_builder_extend_vector@@Base>:
   13d68:	push	{r4, r5, fp, lr}
   13d6c:	add	fp, sp, #8
   13d70:	mov	r4, r0
   13d74:	ldr	r0, [r0, #32]
   13d78:	ldr	r2, [r0, #20]
   13d7c:	adds	r2, r2, r1
   13d80:	bcs	13de0 <flatcc_builder_extend_vector@@Base+0x78>
   13d84:	ldr	r3, [r0, #24]
   13d88:	cmp	r2, r3
   13d8c:	bhi	13de0 <flatcc_builder_extend_vector@@Base+0x78>
   13d90:	str	r2, [r0, #20]
   13d94:	ldr	r0, [r4, #32]
   13d98:	ldr	r5, [r4, #20]
   13d9c:	ldr	r2, [r4, #24]
   13da0:	ldr	r0, [r0, #16]
   13da4:	mla	r0, r0, r1, r5
   13da8:	cmp	r0, r2
   13dac:	str	r0, [r4, #20]
   13db0:	bcc	13dd4 <flatcc_builder_extend_vector@@Base+0x6c>
   13db4:	add	r1, r0, #1
   13db8:	mov	r0, r4
   13dbc:	mvn	r2, #3
   13dc0:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   13dc4:	mov	r1, r0
   13dc8:	mov	r0, #0
   13dcc:	cmp	r1, #0
   13dd0:	popne	{r4, r5, fp, pc}
   13dd4:	ldr	r0, [r4, #16]
   13dd8:	add	r0, r0, r5
   13ddc:	pop	{r4, r5, fp, pc}
   13de0:	movw	r0, #34849	; 0x8821
   13de4:	movw	r1, #30578	; 0x7772
   13de8:	movw	r3, #34876	; 0x883c
   13dec:	mov	r2, #892	; 0x37c
   13df0:	movt	r0, #1
   13df4:	movt	r1, #1
   13df8:	movt	r3, #1
   13dfc:	bl	12498 <__assert_fail@plt>

00013e00 <flatcc_builder_vector_push@@Base>:
   13e00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e04:	add	fp, sp, #24
   13e08:	mov	r5, r0
   13e0c:	ldr	r0, [r0, #32]
   13e10:	mov	r8, r1
   13e14:	ldrh	r1, [r0, #14]
   13e18:	cmp	r1, #4
   13e1c:	bne	13ea0 <flatcc_builder_vector_push@@Base+0xa0>
   13e20:	ldr	r1, [r0, #20]
   13e24:	ldr	r2, [r0, #24]
   13e28:	cmp	r1, r2
   13e2c:	bhi	13eb8 <flatcc_builder_vector_push@@Base+0xb8>
   13e30:	add	r1, r1, #1
   13e34:	str	r1, [r0, #20]
   13e38:	ldr	r0, [r5, #32]
   13e3c:	ldr	r4, [r5, #20]
   13e40:	ldr	r1, [r5, #24]
   13e44:	ldr	r6, [r0, #16]
   13e48:	add	r0, r4, r6
   13e4c:	cmp	r0, r1
   13e50:	str	r0, [r5, #20]
   13e54:	bcc	13e74 <flatcc_builder_vector_push@@Base+0x74>
   13e58:	add	r1, r0, #1
   13e5c:	mov	r0, r5
   13e60:	mvn	r2, #3
   13e64:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   13e68:	mov	r7, #0
   13e6c:	cmp	r0, #0
   13e70:	bne	13e98 <flatcc_builder_vector_push@@Base+0x98>
   13e74:	ldr	r0, [r5, #16]
   13e78:	adds	r7, r0, r4
   13e7c:	beq	13e94 <flatcc_builder_vector_push@@Base+0x94>
   13e80:	mov	r0, r7
   13e84:	mov	r1, r8
   13e88:	mov	r2, r6
   13e8c:	bl	123e4 <memcpy@plt>
   13e90:	b	13e98 <flatcc_builder_vector_push@@Base+0x98>
   13e94:	mov	r7, #0
   13e98:	mov	r0, r7
   13e9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ea0:	movw	r0, #31381	; 0x7a95
   13ea4:	movw	r1, #30578	; 0x7772
   13ea8:	movw	r3, #31425	; 0x7ac1
   13eac:	movw	r2, #907	; 0x38b
   13eb0:	movt	r0, #1
   13eb4:	b	13ecc <flatcc_builder_vector_push@@Base+0xcc>
   13eb8:	movw	r0, #31492	; 0x7b04
   13ebc:	movw	r1, #30578	; 0x7772
   13ec0:	movw	r3, #31425	; 0x7ac1
   13ec4:	mov	r2, #908	; 0x38c
   13ec8:	movt	r0, #1
   13ecc:	movt	r1, #1
   13ed0:	movt	r3, #1
   13ed4:	bl	12498 <__assert_fail@plt>

00013ed8 <flatcc_builder_append_vector@@Base>:
   13ed8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13edc:	add	fp, sp, #24
   13ee0:	mov	r6, r0
   13ee4:	ldr	r0, [r0, #32]
   13ee8:	mov	r8, r1
   13eec:	ldrh	r1, [r0, #14]
   13ef0:	cmp	r1, #4
   13ef4:	bne	13fa0 <flatcc_builder_append_vector@@Base+0xc8>
   13ef8:	ldr	r1, [r0, #20]
   13efc:	mov	r9, r2
   13f00:	adds	r1, r1, r2
   13f04:	bcs	13f80 <flatcc_builder_append_vector@@Base+0xa8>
   13f08:	ldr	r2, [r0, #24]
   13f0c:	cmp	r1, r2
   13f10:	bhi	13f80 <flatcc_builder_append_vector@@Base+0xa8>
   13f14:	str	r1, [r0, #20]
   13f18:	ldr	r0, [r6, #32]
   13f1c:	ldr	r4, [r6, #20]
   13f20:	ldr	r1, [r6, #24]
   13f24:	ldr	r5, [r0, #16]
   13f28:	mla	r0, r5, r9, r4
   13f2c:	cmp	r0, r1
   13f30:	str	r0, [r6, #20]
   13f34:	bcc	13f54 <flatcc_builder_append_vector@@Base+0x7c>
   13f38:	add	r1, r0, #1
   13f3c:	mov	r0, r6
   13f40:	mvn	r2, #3
   13f44:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   13f48:	mov	r7, #0
   13f4c:	cmp	r0, #0
   13f50:	bne	13f78 <flatcc_builder_append_vector@@Base+0xa0>
   13f54:	ldr	r0, [r6, #16]
   13f58:	adds	r7, r0, r4
   13f5c:	beq	13f74 <flatcc_builder_append_vector@@Base+0x9c>
   13f60:	mul	r2, r5, r9
   13f64:	mov	r0, r7
   13f68:	mov	r1, r8
   13f6c:	bl	123e4 <memcpy@plt>
   13f70:	b	13f78 <flatcc_builder_append_vector@@Base+0xa0>
   13f74:	mov	r7, #0
   13f78:	mov	r0, r7
   13f7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f80:	movw	r0, #34849	; 0x8821
   13f84:	movw	r1, #30578	; 0x7772
   13f88:	movw	r3, #34876	; 0x883c
   13f8c:	mov	r2, #892	; 0x37c
   13f90:	movt	r0, #1
   13f94:	movt	r1, #1
   13f98:	movt	r3, #1
   13f9c:	bl	12498 <__assert_fail@plt>
   13fa0:	movw	r0, #31381	; 0x7a95
   13fa4:	movw	r1, #30578	; 0x7772
   13fa8:	movw	r3, #31553	; 0x7b41
   13fac:	movw	r2, #915	; 0x393
   13fb0:	movt	r0, #1
   13fb4:	movt	r1, #1
   13fb8:	movt	r3, #1
   13fbc:	bl	12498 <__assert_fail@plt>

00013fc0 <flatcc_builder_extend_offset_vector@@Base>:
   13fc0:	push	{r4, r5, fp, lr}
   13fc4:	add	fp, sp, #8
   13fc8:	mov	r4, r0
   13fcc:	ldr	r0, [r0, #32]
   13fd0:	ldr	r2, [r0, #20]
   13fd4:	adds	r2, r2, r1
   13fd8:	cmpcc	r2, #1073741824	; 0x40000000
   13fdc:	bcc	14000 <flatcc_builder_extend_offset_vector@@Base+0x40>
   13fe0:	movw	r0, #34849	; 0x8821
   13fe4:	movw	r1, #30578	; 0x7772
   13fe8:	movw	r3, #34876	; 0x883c
   13fec:	mov	r2, #892	; 0x37c
   13ff0:	movt	r0, #1
   13ff4:	movt	r1, #1
   13ff8:	movt	r3, #1
   13ffc:	bl	12498 <__assert_fail@plt>
   14000:	str	r2, [r0, #20]
   14004:	ldr	r5, [r4, #20]
   14008:	ldr	r2, [r4, #24]
   1400c:	add	r0, r5, r1, lsl #2
   14010:	cmp	r0, r2
   14014:	str	r0, [r4, #20]
   14018:	bcc	1403c <flatcc_builder_extend_offset_vector@@Base+0x7c>
   1401c:	add	r1, r0, #1
   14020:	mov	r0, r4
   14024:	mvn	r2, #3
   14028:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   1402c:	mov	r1, r0
   14030:	mov	r0, #0
   14034:	cmp	r1, #0
   14038:	popne	{r4, r5, fp, pc}
   1403c:	ldr	r0, [r4, #16]
   14040:	add	r0, r0, r5
   14044:	pop	{r4, r5, fp, pc}

00014048 <flatcc_builder_offset_vector_push@@Base>:
   14048:	push	{r4, r5, r6, r7, fp, lr}
   1404c:	add	fp, sp, #16
   14050:	mov	r6, r0
   14054:	ldr	r0, [r0, #32]
   14058:	mov	r4, r1
   1405c:	ldrh	r1, [r0, #14]
   14060:	cmp	r1, #5
   14064:	bne	140c8 <flatcc_builder_offset_vector_push@@Base+0x80>
   14068:	ldr	r1, [r0, #20]
   1406c:	mov	r5, #0
   14070:	cmn	r1, #-1073741823	; 0xc0000001
   14074:	beq	140c0 <flatcc_builder_offset_vector_push@@Base+0x78>
   14078:	add	r1, r1, #1
   1407c:	str	r1, [r0, #20]
   14080:	ldr	r7, [r6, #20]
   14084:	ldr	r0, [r6, #24]
   14088:	add	r1, r7, #4
   1408c:	cmp	r1, r0
   14090:	str	r1, [r6, #20]
   14094:	bcc	140b0 <flatcc_builder_offset_vector_push@@Base+0x68>
   14098:	add	r1, r7, #5
   1409c:	mov	r0, r6
   140a0:	mvn	r2, #3
   140a4:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   140a8:	cmp	r0, #0
   140ac:	bne	140c0 <flatcc_builder_offset_vector_push@@Base+0x78>
   140b0:	ldr	r0, [r6, #16]
   140b4:	adds	r0, r0, r7
   140b8:	movne	r5, r0
   140bc:	strne	r4, [r0]
   140c0:	mov	r0, r5
   140c4:	pop	{r4, r5, r6, r7, fp, pc}
   140c8:	movw	r0, #31630	; 0x7b8e
   140cc:	movw	r1, #30578	; 0x7772
   140d0:	movw	r3, #31681	; 0x7bc1
   140d4:	movw	r2, #934	; 0x3a6
   140d8:	movt	r0, #1
   140dc:	movt	r1, #1
   140e0:	movt	r3, #1
   140e4:	bl	12498 <__assert_fail@plt>

000140e8 <flatcc_builder_append_offset_vector@@Base>:
   140e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140ec:	add	fp, sp, #24
   140f0:	mov	r6, r0
   140f4:	ldr	r0, [r0, #32]
   140f8:	mov	r8, r1
   140fc:	ldrh	r1, [r0, #14]
   14100:	cmp	r1, #5
   14104:	bne	141a0 <flatcc_builder_append_offset_vector@@Base+0xb8>
   14108:	ldr	r1, [r0, #20]
   1410c:	mov	r5, r2
   14110:	adds	r1, r1, r2
   14114:	cmpcc	r1, #1073741824	; 0x40000000
   14118:	bcc	1413c <flatcc_builder_append_offset_vector@@Base+0x54>
   1411c:	movw	r0, #34849	; 0x8821
   14120:	movw	r1, #30578	; 0x7772
   14124:	movw	r3, #34876	; 0x883c
   14128:	mov	r2, #892	; 0x37c
   1412c:	movt	r0, #1
   14130:	movt	r1, #1
   14134:	movt	r3, #1
   14138:	bl	12498 <__assert_fail@plt>
   1413c:	str	r1, [r0, #20]
   14140:	ldr	r4, [r6, #20]
   14144:	ldr	r1, [r6, #24]
   14148:	add	r0, r4, r5, lsl #2
   1414c:	cmp	r0, r1
   14150:	str	r0, [r6, #20]
   14154:	bcc	14174 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14158:	add	r1, r0, #1
   1415c:	mov	r0, r6
   14160:	mvn	r2, #3
   14164:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   14168:	mov	r7, #0
   1416c:	cmp	r0, #0
   14170:	bne	14198 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14174:	ldr	r0, [r6, #16]
   14178:	adds	r7, r0, r4
   1417c:	beq	14194 <flatcc_builder_append_offset_vector@@Base+0xac>
   14180:	lsl	r2, r5, #2
   14184:	mov	r0, r7
   14188:	mov	r1, r8
   1418c:	bl	123e4 <memcpy@plt>
   14190:	b	14198 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14194:	mov	r7, #0
   14198:	mov	r0, r7
   1419c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141a0:	movw	r0, #31630	; 0x7b8e
   141a4:	movw	r1, #30578	; 0x7772
   141a8:	movw	r3, #31779	; 0x7c23
   141ac:	mov	r2, #948	; 0x3b4
   141b0:	movt	r0, #1
   141b4:	movt	r1, #1
   141b8:	movt	r3, #1
   141bc:	bl	12498 <__assert_fail@plt>

000141c0 <flatcc_builder_extend_string@@Base>:
   141c0:	push	{r4, r5, fp, lr}
   141c4:	add	fp, sp, #8
   141c8:	mov	r4, r0
   141cc:	ldr	r0, [r0, #32]
   141d0:	ldrh	r2, [r0, #14]
   141d4:	cmp	r2, #6
   141d8:	bne	14230 <flatcc_builder_extend_string@@Base+0x70>
   141dc:	ldr	r2, [r0, #20]
   141e0:	adds	r2, r2, r1
   141e4:	bcs	14250 <flatcc_builder_extend_string@@Base+0x90>
   141e8:	str	r2, [r0, #20]
   141ec:	ldr	r5, [r4, #20]
   141f0:	ldr	r2, [r4, #24]
   141f4:	add	r0, r5, r1
   141f8:	cmp	r0, r2
   141fc:	str	r0, [r4, #20]
   14200:	bcc	14224 <flatcc_builder_extend_string@@Base+0x64>
   14204:	add	r1, r0, #1
   14208:	mov	r0, r4
   1420c:	mvn	r2, #3
   14210:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   14214:	mov	r1, r0
   14218:	mov	r0, #0
   1421c:	cmp	r1, #0
   14220:	popne	{r4, r5, fp, pc}
   14224:	ldr	r0, [r4, #16]
   14228:	add	r0, r0, r5
   1422c:	pop	{r4, r5, fp, pc}
   14230:	movw	r0, #31895	; 0x7c97
   14234:	movw	r1, #30578	; 0x7772
   14238:	movw	r3, #31939	; 0x7cc3
   1423c:	movw	r2, #957	; 0x3bd
   14240:	movt	r0, #1
   14244:	movt	r1, #1
   14248:	movt	r3, #1
   1424c:	bl	12498 <__assert_fail@plt>
   14250:	movw	r0, #34849	; 0x8821
   14254:	movw	r1, #30578	; 0x7772
   14258:	movw	r3, #34876	; 0x883c
   1425c:	mov	r2, #892	; 0x37c
   14260:	movt	r0, #1
   14264:	movt	r1, #1
   14268:	movt	r3, #1
   1426c:	bl	12498 <__assert_fail@plt>

00014270 <flatcc_builder_append_string@@Base>:
   14270:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14274:	add	fp, sp, #24
   14278:	mov	r6, r0
   1427c:	ldr	r0, [r0, #32]
   14280:	mov	r8, r1
   14284:	ldrh	r1, [r0, #14]
   14288:	cmp	r1, #6
   1428c:	bne	14304 <flatcc_builder_append_string@@Base+0x94>
   14290:	ldr	r1, [r0, #20]
   14294:	mov	r4, r2
   14298:	adds	r1, r1, r2
   1429c:	bcs	14324 <flatcc_builder_append_string@@Base+0xb4>
   142a0:	str	r1, [r0, #20]
   142a4:	ldr	r5, [r6, #20]
   142a8:	ldr	r1, [r6, #24]
   142ac:	add	r0, r5, r4
   142b0:	cmp	r0, r1
   142b4:	str	r0, [r6, #20]
   142b8:	bcc	142d8 <flatcc_builder_append_string@@Base+0x68>
   142bc:	add	r1, r0, #1
   142c0:	mov	r0, r6
   142c4:	mvn	r2, #3
   142c8:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   142cc:	mov	r7, #0
   142d0:	cmp	r0, #0
   142d4:	bne	142fc <flatcc_builder_append_string@@Base+0x8c>
   142d8:	ldr	r0, [r6, #16]
   142dc:	adds	r7, r0, r5
   142e0:	beq	142f8 <flatcc_builder_append_string@@Base+0x88>
   142e4:	mov	r0, r7
   142e8:	mov	r1, r8
   142ec:	mov	r2, r4
   142f0:	bl	123e4 <memcpy@plt>
   142f4:	b	142fc <flatcc_builder_append_string@@Base+0x8c>
   142f8:	mov	r7, #0
   142fc:	mov	r0, r7
   14300:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14304:	movw	r0, #31895	; 0x7c97
   14308:	movw	r1, #30578	; 0x7772
   1430c:	movw	r3, #32002	; 0x7d02
   14310:	movw	r2, #966	; 0x3c6
   14314:	movt	r0, #1
   14318:	movt	r1, #1
   1431c:	movt	r3, #1
   14320:	bl	12498 <__assert_fail@plt>
   14324:	movw	r0, #34849	; 0x8821
   14328:	movw	r1, #30578	; 0x7772
   1432c:	movw	r3, #34876	; 0x883c
   14330:	mov	r2, #892	; 0x37c
   14334:	movt	r0, #1
   14338:	movt	r1, #1
   1433c:	movt	r3, #1
   14340:	bl	12498 <__assert_fail@plt>

00014344 <flatcc_builder_append_string_str@@Base>:
   14344:	push	{r4, r5, fp, lr}
   14348:	add	fp, sp, #8
   1434c:	mov	r5, r0
   14350:	mov	r0, r1
   14354:	mov	r4, r1
   14358:	bl	12450 <strlen@plt>
   1435c:	mov	r2, r0
   14360:	mov	r0, r5
   14364:	mov	r1, r4
   14368:	pop	{r4, r5, fp, lr}
   1436c:	b	14270 <flatcc_builder_append_string@@Base>

00014370 <flatcc_builder_append_string_strn@@Base>:
   14370:	push	{r4, r5, r6, sl, fp, lr}
   14374:	add	fp, sp, #16
   14378:	mov	r6, r0
   1437c:	mov	r5, r1
   14380:	mov	r0, r1
   14384:	mov	r1, #0
   14388:	mov	r4, r2
   1438c:	bl	12474 <memchr@plt>
   14390:	cmp	r0, #0
   14394:	mov	r1, r5
   14398:	subne	r4, r0, r5
   1439c:	mov	r0, r6
   143a0:	mov	r2, r4
   143a4:	pop	{r4, r5, r6, sl, fp, lr}
   143a8:	b	14270 <flatcc_builder_append_string@@Base>

000143ac <flatcc_builder_truncate_vector@@Base>:
   143ac:	push	{fp, lr}
   143b0:	mov	fp, sp
   143b4:	ldr	r2, [r0, #32]
   143b8:	ldrh	r3, [r2, #14]
   143bc:	cmp	r3, #4
   143c0:	bne	14408 <flatcc_builder_truncate_vector@@Base+0x5c>
   143c4:	ldr	r3, [r2, #20]
   143c8:	cmp	r3, r1
   143cc:	bcc	14420 <flatcc_builder_truncate_vector@@Base+0x74>
   143d0:	sub	r3, r3, r1
   143d4:	str	r3, [r2, #20]
   143d8:	ldr	r2, [r0, #32]
   143dc:	ldr	r3, [r0, #20]
   143e0:	ldr	ip, [r0, #16]
   143e4:	ldr	r2, [r2, #16]
   143e8:	mls	r3, r2, r1, r3
   143ec:	mul	r2, r2, r1
   143f0:	mov	r1, #0
   143f4:	str	r3, [r0, #20]
   143f8:	add	r0, ip, r3
   143fc:	bl	12468 <memset@plt>
   14400:	mov	r0, #0
   14404:	pop	{fp, pc}
   14408:	movw	r0, #31381	; 0x7a95
   1440c:	movw	r1, #30578	; 0x7772
   14410:	movw	r3, #32079	; 0x7d4f
   14414:	movw	r2, #985	; 0x3d9
   14418:	movt	r0, #1
   1441c:	b	14434 <flatcc_builder_truncate_vector@@Base+0x88>
   14420:	movw	r0, #32142	; 0x7d8e
   14424:	movw	r1, #30578	; 0x7772
   14428:	movw	r3, #32079	; 0x7d4f
   1442c:	movw	r2, #986	; 0x3da
   14430:	movt	r0, #1
   14434:	movt	r1, #1
   14438:	movt	r3, #1
   1443c:	bl	12498 <__assert_fail@plt>

00014440 <flatcc_builder_truncate_offset_vector@@Base>:
   14440:	push	{fp, lr}
   14444:	mov	fp, sp
   14448:	ldr	r2, [r0, #32]
   1444c:	ldrh	r3, [r2, #14]
   14450:	cmp	r3, #5
   14454:	bne	1449c <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14458:	ldr	r3, [r2, #20]
   1445c:	cmp	r3, r1
   14460:	bcc	144b4 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   14464:	sub	r3, r3, r1
   14468:	str	r3, [r2, #20]
   1446c:	ldr	r2, [r0, #32]
   14470:	ldr	r3, [r0, #20]
   14474:	ldr	ip, [r0, #16]
   14478:	ldr	r2, [r2, #16]
   1447c:	mls	r3, r2, r1, r3
   14480:	mul	r2, r2, r1
   14484:	mov	r1, #0
   14488:	str	r3, [r0, #20]
   1448c:	add	r0, ip, r3
   14490:	bl	12468 <memset@plt>
   14494:	mov	r0, #0
   14498:	pop	{fp, pc}
   1449c:	movw	r0, #31630	; 0x7b8e
   144a0:	movw	r1, #30578	; 0x7772
   144a4:	movw	r3, #32178	; 0x7db2
   144a8:	movw	r2, #994	; 0x3e2
   144ac:	movt	r0, #1
   144b0:	b	144c8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   144b4:	movw	r0, #32248	; 0x7df8
   144b8:	movw	r1, #30578	; 0x7772
   144bc:	movw	r3, #32178	; 0x7db2
   144c0:	movw	r2, #995	; 0x3e3
   144c4:	movt	r0, #1
   144c8:	movt	r1, #1
   144cc:	movt	r3, #1
   144d0:	bl	12498 <__assert_fail@plt>

000144d4 <flatcc_builder_truncate_string@@Base>:
   144d4:	push	{fp, lr}
   144d8:	mov	fp, sp
   144dc:	mov	r2, r1
   144e0:	ldr	r1, [r0, #32]
   144e4:	ldrh	r3, [r1, #14]
   144e8:	cmp	r3, #6
   144ec:	bne	14528 <flatcc_builder_truncate_string@@Base+0x54>
   144f0:	ldr	r3, [r1, #20]
   144f4:	cmp	r3, r2
   144f8:	bcc	14540 <flatcc_builder_truncate_string@@Base+0x6c>
   144fc:	sub	r3, r3, r2
   14500:	str	r3, [r1, #20]
   14504:	ldr	r3, [r0, #20]
   14508:	ldr	r1, [r0, #16]
   1450c:	sub	r3, r3, r2
   14510:	str	r3, [r0, #20]
   14514:	add	r0, r1, r3
   14518:	mov	r1, #0
   1451c:	bl	12468 <memset@plt>
   14520:	mov	r0, #0
   14524:	pop	{fp, pc}
   14528:	movw	r0, #31895	; 0x7c97
   1452c:	movw	r1, #30578	; 0x7772
   14530:	movw	r3, #32307	; 0x7e33
   14534:	movw	r2, #1003	; 0x3eb
   14538:	movt	r0, #1
   1453c:	b	14554 <flatcc_builder_truncate_string@@Base+0x80>
   14540:	movw	r0, #32370	; 0x7e72
   14544:	movw	r1, #30578	; 0x7772
   14548:	movw	r3, #32307	; 0x7e33
   1454c:	mov	r2, #1004	; 0x3ec
   14550:	movt	r0, #1
   14554:	movt	r1, #1
   14558:	movt	r3, #1
   1455c:	bl	12498 <__assert_fail@plt>

00014560 <flatcc_builder_start_vector@@Base>:
   14560:	push	{r4, r5, r6, r7, fp, lr}
   14564:	add	fp, sp, #16
   14568:	mov	r7, #4
   1456c:	cmp	r2, #4
   14570:	mov	r6, r1
   14574:	mov	r5, r3
   14578:	mov	r4, r0
   1457c:	movls	r2, r7
   14580:	mov	r1, r2
   14584:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   14588:	mov	r1, r0
   1458c:	mvn	r0, #0
   14590:	cmp	r1, #0
   14594:	popne	{r4, r5, r6, r7, fp, pc}
   14598:	ldr	r0, [r4, #32]
   1459c:	str	r6, [r0, #16]
   145a0:	mov	r0, #0
   145a4:	ldr	r1, [r4, #32]
   145a8:	str	r0, [r1, #20]
   145ac:	ldr	r1, [r4, #32]
   145b0:	str	r5, [r1, #24]
   145b4:	ldr	r1, [r4, #32]
   145b8:	strh	r7, [r1, #14]
   145bc:	ldr	r2, [r4, #28]
   145c0:	ldr	r3, [r4, #60]	; 0x3c
   145c4:	ldr	r7, [r4, #64]	; 0x40
   145c8:	add	r3, r3, r2
   145cc:	sub	r2, r7, r2
   145d0:	str	r3, [r4, #16]
   145d4:	mvn	r3, #3
   145d8:	cmn	r2, #4
   145dc:	movcs	r2, r3
   145e0:	str	r2, [r4, #24]
   145e4:	str	r3, [r1, #4]
   145e8:	pop	{r4, r5, r6, r7, fp, pc}

000145ec <flatcc_builder_start_offset_vector@@Base>:
   145ec:	push	{r4, r5, fp, lr}
   145f0:	add	fp, sp, #8
   145f4:	mov	r1, #4
   145f8:	mov	r4, r0
   145fc:	mov	r5, #4
   14600:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   14604:	mov	r1, r0
   14608:	mvn	r0, #0
   1460c:	cmp	r1, #0
   14610:	popne	{r4, r5, fp, pc}
   14614:	ldr	r0, [r4, #32]
   14618:	mov	r2, #5
   1461c:	str	r5, [r0, #16]
   14620:	mov	r0, #0
   14624:	ldr	r1, [r4, #32]
   14628:	str	r0, [r1, #20]
   1462c:	ldr	r1, [r4, #32]
   14630:	strh	r2, [r1, #14]
   14634:	ldr	r2, [r4, #28]
   14638:	ldr	r3, [r4, #60]	; 0x3c
   1463c:	ldr	r5, [r4, #64]	; 0x40
   14640:	add	r3, r3, r2
   14644:	sub	r2, r5, r2
   14648:	str	r3, [r4, #16]
   1464c:	mvn	r3, #3
   14650:	cmn	r2, #4
   14654:	movcs	r2, r3
   14658:	str	r2, [r4, #24]
   1465c:	str	r3, [r1, #4]
   14660:	pop	{r4, r5, fp, pc}

00014664 <flatcc_builder_create_offset_vector@@Base>:
   14664:	push	{r4, r5, r6, sl, fp, lr}
   14668:	add	fp, sp, #16
   1466c:	mov	r6, r2
   14670:	mov	r5, r1
   14674:	mov	r4, r0
   14678:	bl	145ec <flatcc_builder_start_offset_vector@@Base>
   1467c:	cmp	r0, #0
   14680:	beq	1468c <flatcc_builder_create_offset_vector@@Base+0x28>
   14684:	mov	r0, #0
   14688:	pop	{r4, r5, r6, sl, fp, pc}
   1468c:	mov	r0, r4
   14690:	mov	r1, r6
   14694:	bl	13fc0 <flatcc_builder_extend_offset_vector@@Base>
   14698:	cmp	r0, #0
   1469c:	beq	14684 <flatcc_builder_create_offset_vector@@Base+0x20>
   146a0:	lsl	r2, r6, #2
   146a4:	mov	r1, r5
   146a8:	bl	123e4 <memcpy@plt>
   146ac:	mov	r0, r4
   146b0:	pop	{r4, r5, r6, sl, fp, lr}
   146b4:	b	146b8 <flatcc_builder_end_offset_vector@@Base>

000146b8 <flatcc_builder_end_offset_vector@@Base>:
   146b8:	push	{r4, r5, fp, lr}
   146bc:	add	fp, sp, #8
   146c0:	mov	r4, r0
   146c4:	ldr	r0, [r0, #32]
   146c8:	ldrh	r1, [r0, #14]
   146cc:	cmp	r1, #5
   146d0:	bne	14770 <flatcc_builder_end_offset_vector@@Base+0xb8>
   146d4:	ldr	r2, [r0, #20]
   146d8:	ldr	r1, [r4, #16]
   146dc:	mov	r0, r4
   146e0:	mov	r3, #0
   146e4:	bl	15698 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   146e8:	mov	r5, r0
   146ec:	cmp	r0, #0
   146f0:	beq	14768 <flatcc_builder_end_offset_vector@@Base+0xb0>
   146f4:	ldr	r0, [r4, #16]
   146f8:	ldr	r2, [r4, #20]
   146fc:	mov	r1, #0
   14700:	bl	12468 <memset@plt>
   14704:	ldr	r0, [r4, #32]
   14708:	ldr	r1, [r4, #60]	; 0x3c
   1470c:	ldr	ip, [r4, #64]	; 0x40
   14710:	ldr	r3, [r0, #8]
   14714:	str	r3, [r4, #20]
   14718:	ldr	r3, [r0]
   1471c:	str	r3, [r4, #28]
   14720:	add	r1, r1, r3
   14724:	ldr	r2, [r0, #4]
   14728:	str	r1, [r4, #16]
   1472c:	sub	r1, ip, r3
   14730:	cmp	r1, r2
   14734:	movhi	r1, r2
   14738:	str	r1, [r4, #24]
   1473c:	ldrh	r1, [r4, #130]	; 0x82
   14740:	ldrh	r2, [r4, #128]	; 0x80
   14744:	cmp	r2, r1
   14748:	strhcc	r1, [r4, #128]	; 0x80
   1474c:	ldrh	r1, [r0, #12]
   14750:	sub	r0, r0, #36	; 0x24
   14754:	str	r0, [r4, #32]
   14758:	strh	r1, [r4, #130]	; 0x82
   1475c:	ldr	r0, [r4, #156]	; 0x9c
   14760:	sub	r0, r0, #1
   14764:	str	r0, [r4, #156]	; 0x9c
   14768:	mov	r0, r5
   1476c:	pop	{r4, r5, fp, pc}
   14770:	movw	r0, #31630	; 0x7b8e
   14774:	movw	r1, #30578	; 0x7772
   14778:	movw	r3, #33213	; 0x81bd
   1477c:	movw	r2, #1480	; 0x5c8
   14780:	movt	r0, #1
   14784:	movt	r1, #1
   14788:	movt	r3, #1
   1478c:	bl	12498 <__assert_fail@plt>

00014790 <flatcc_builder_start_string@@Base>:
   14790:	push	{r4, r5, fp, lr}
   14794:	add	fp, sp, #8
   14798:	mov	r1, #1
   1479c:	mov	r4, r0
   147a0:	mov	r5, #1
   147a4:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   147a8:	mov	r1, r0
   147ac:	mvn	r0, #0
   147b0:	cmp	r1, #0
   147b4:	popne	{r4, r5, fp, pc}
   147b8:	ldr	r0, [r4, #32]
   147bc:	mov	r2, #6
   147c0:	str	r5, [r0, #16]
   147c4:	mov	r0, #0
   147c8:	ldr	r1, [r4, #32]
   147cc:	str	r0, [r1, #20]
   147d0:	ldr	r1, [r4, #32]
   147d4:	strh	r2, [r1, #14]
   147d8:	ldr	r2, [r4, #28]
   147dc:	ldr	r3, [r4, #60]	; 0x3c
   147e0:	ldr	r5, [r4, #64]	; 0x40
   147e4:	add	r3, r3, r2
   147e8:	sub	r2, r5, r2
   147ec:	str	r3, [r4, #16]
   147f0:	mvn	r3, #3
   147f4:	cmn	r2, #4
   147f8:	movcs	r2, r3
   147fc:	str	r2, [r4, #24]
   14800:	str	r3, [r1, #4]
   14804:	pop	{r4, r5, fp, pc}

00014808 <flatcc_builder_reserve_table@@Base>:
   14808:	push	{r4, r5, r6, sl, fp, lr}
   1480c:	add	fp, sp, #16
   14810:	sub	sp, sp, #8
   14814:	cmn	r1, #1
   14818:	ble	148ec <flatcc_builder_reserve_table@@Base+0xe4>
   1481c:	mov	r4, r0
   14820:	ldr	r0, [r0, #32]
   14824:	mov	r5, r1
   14828:	ldr	r1, [r4, #56]	; 0x38
   1482c:	ldrh	r2, [r0, #28]
   14830:	ldr	r0, [r0, #16]
   14834:	add	r6, r0, r2, lsl #1
   14838:	add	r0, r6, r5, lsl #1
   1483c:	add	r2, r0, #4
   14840:	cmp	r2, r1
   14844:	bls	1486c <flatcc_builder_reserve_table@@Base+0x64>
   14848:	ldr	r0, [r4, #40]	; 0x28
   1484c:	ldr	ip, [r4, #48]	; 0x30
   14850:	mov	r3, #0
   14854:	add	r1, r4, #52	; 0x34
   14858:	str	r3, [sp]
   1485c:	mov	r3, #1
   14860:	blx	ip
   14864:	cmp	r0, #0
   14868:	bne	1490c <flatcc_builder_reserve_table@@Base+0x104>
   1486c:	ldr	r0, [r4, #52]	; 0x34
   14870:	adds	r0, r0, r6
   14874:	str	r0, [r4, #4]
   14878:	beq	148e0 <flatcc_builder_reserve_table@@Base+0xd8>
   1487c:	add	r0, r0, #4
   14880:	lsl	r1, r5, #1
   14884:	str	r0, [r4, #4]
   14888:	ldr	r0, [r4, #32]
   1488c:	ldr	r3, [r4, #80]	; 0x50
   14890:	ldr	r5, [r0, #20]
   14894:	orr	r0, r1, #1
   14898:	add	r2, r5, r0
   1489c:	cmp	r2, r3
   148a0:	bls	148c8 <flatcc_builder_reserve_table@@Base+0xc0>
   148a4:	ldr	r0, [r4, #40]	; 0x28
   148a8:	ldr	r6, [r4, #48]	; 0x30
   148ac:	mov	r3, #3
   148b0:	add	r1, r4, #76	; 0x4c
   148b4:	str	r3, [sp]
   148b8:	mov	r3, #0
   148bc:	blx	r6
   148c0:	cmp	r0, #0
   148c4:	bne	1490c <flatcc_builder_reserve_table@@Base+0x104>
   148c8:	ldr	r0, [r4, #76]	; 0x4c
   148cc:	adds	r0, r0, r5
   148d0:	str	r0, [r4]
   148d4:	mov	r0, #0
   148d8:	mvneq	r0, #0
   148dc:	b	148e4 <flatcc_builder_reserve_table@@Base+0xdc>
   148e0:	mvn	r0, #0
   148e4:	sub	sp, fp, #16
   148e8:	pop	{r4, r5, r6, sl, fp, pc}
   148ec:	movw	r0, #32469	; 0x7ed5
   148f0:	movw	r1, #30578	; 0x7772
   148f4:	movw	r3, #32404	; 0x7e94
   148f8:	movw	r2, #1065	; 0x429
   148fc:	movt	r0, #1
   14900:	movt	r1, #1
   14904:	movt	r3, #1
   14908:	bl	12498 <__assert_fail@plt>
   1490c:	movw	r0, #35096	; 0x8918
   14910:	movw	r1, #30578	; 0x7772
   14914:	movw	r3, #34642	; 0x8752
   14918:	mov	r2, #308	; 0x134
   1491c:	movt	r0, #1
   14920:	movt	r1, #1
   14924:	movt	r3, #1
   14928:	bl	12498 <__assert_fail@plt>

0001492c <flatcc_builder_start_table@@Base>:
   1492c:	push	{r4, r5, r6, r7, fp, lr}
   14930:	add	fp, sp, #16
   14934:	sub	sp, sp, #8
   14938:	mov	r6, r1
   1493c:	mov	r1, #4
   14940:	mov	r4, r0
   14944:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   14948:	mvn	r5, #0
   1494c:	cmp	r0, #0
   14950:	beq	14960 <flatcc_builder_start_table@@Base+0x34>
   14954:	mov	r0, r5
   14958:	sub	sp, fp, #16
   1495c:	pop	{r4, r5, r6, r7, fp, pc}
   14960:	mov	r1, r4
   14964:	ldr	r2, [r4, #4]
   14968:	ldr	r3, [r4, #32]
   1496c:	ldr	r0, [r1, #52]!	; 0x34
   14970:	sub	r0, r2, r0
   14974:	str	r0, [r3, #16]
   14978:	ldr	r0, [r4]
   1497c:	ldr	r3, [r4, #76]	; 0x4c
   14980:	ldr	r2, [r4, #32]
   14984:	sub	r0, r0, r3
   14988:	mov	r3, #0
   1498c:	str	r0, [r2, #20]
   14990:	ldr	r0, [r4, #12]
   14994:	ldr	r2, [r4, #32]
   14998:	str	r0, [r2, #24]
   1499c:	ldr	r0, [r4, #32]
   149a0:	ldrh	r2, [r4, #8]
   149a4:	strh	r2, [r0, #28]
   149a8:	movw	r0, #15186	; 0x3b52
   149ac:	strh	r3, [r4, #8]
   149b0:	mov	r2, #3
   149b4:	movt	r0, #12137	; 0x2f69
   149b8:	str	r0, [r4, #12]
   149bc:	ldr	r0, [r4, #32]
   149c0:	strh	r2, [r0, #14]
   149c4:	ldrh	r2, [r0, #28]
   149c8:	ldr	r0, [r0, #16]
   149cc:	add	r7, r0, r2, lsl #1
   149d0:	add	r0, r7, r6, lsl #1
   149d4:	add	r2, r0, #4
   149d8:	ldr	r0, [r4, #56]	; 0x38
   149dc:	cmp	r2, r0
   149e0:	bls	14a00 <flatcc_builder_start_table@@Base+0xd4>
   149e4:	ldr	r0, [r4, #40]	; 0x28
   149e8:	ldr	ip, [r4, #48]	; 0x30
   149ec:	str	r3, [sp]
   149f0:	mov	r3, #1
   149f4:	blx	ip
   149f8:	cmp	r0, #0
   149fc:	bne	14aa4 <flatcc_builder_start_table@@Base+0x178>
   14a00:	ldr	r0, [r4, #52]	; 0x34
   14a04:	adds	r0, r0, r7
   14a08:	str	r0, [r4, #4]
   14a0c:	beq	14954 <flatcc_builder_start_table@@Base+0x28>
   14a10:	add	r0, r0, #4
   14a14:	lsl	r1, r6, #1
   14a18:	str	r0, [r4, #4]
   14a1c:	ldr	r0, [r4, #32]
   14a20:	ldr	r3, [r4, #80]	; 0x50
   14a24:	ldr	r6, [r0, #20]
   14a28:	orr	r0, r1, #1
   14a2c:	add	r2, r6, r0
   14a30:	cmp	r2, r3
   14a34:	bls	14a5c <flatcc_builder_start_table@@Base+0x130>
   14a38:	ldr	r0, [r4, #40]	; 0x28
   14a3c:	ldr	r7, [r4, #48]	; 0x30
   14a40:	mov	r3, #3
   14a44:	add	r1, r4, #76	; 0x4c
   14a48:	str	r3, [sp]
   14a4c:	mov	r3, #0
   14a50:	blx	r7
   14a54:	cmp	r0, #0
   14a58:	bne	14aa4 <flatcc_builder_start_table@@Base+0x178>
   14a5c:	ldr	r0, [r4, #76]	; 0x4c
   14a60:	adds	r0, r0, r6
   14a64:	str	r0, [r4]
   14a68:	beq	14954 <flatcc_builder_start_table@@Base+0x28>
   14a6c:	ldr	r0, [r4, #28]
   14a70:	ldr	r2, [r4, #60]	; 0x3c
   14a74:	ldr	r3, [r4, #64]	; 0x40
   14a78:	ldr	r1, [r4, #32]
   14a7c:	mov	r5, #0
   14a80:	add	r2, r2, r0
   14a84:	sub	r0, r3, r0
   14a88:	str	r2, [r4, #16]
   14a8c:	movw	r2, #65532	; 0xfffc
   14a90:	cmp	r0, r2
   14a94:	movcs	r0, r2
   14a98:	str	r0, [r4, #24]
   14a9c:	str	r2, [r1, #4]
   14aa0:	b	14954 <flatcc_builder_start_table@@Base+0x28>
   14aa4:	movw	r0, #35096	; 0x8918
   14aa8:	movw	r1, #30578	; 0x7772
   14aac:	movw	r3, #34642	; 0x8752
   14ab0:	mov	r2, #308	; 0x134
   14ab4:	movt	r0, #1
   14ab8:	movt	r1, #1
   14abc:	movt	r3, #1
   14ac0:	bl	12498 <__assert_fail@plt>

00014ac4 <flatcc_builder_create_vtable@@Base>:
   14ac4:	push	{r4, r5, fp, lr}
   14ac8:	add	fp, sp, #8
   14acc:	sub	sp, sp, #80	; 0x50
   14ad0:	mov	r3, r2
   14ad4:	mov	r2, #0
   14ad8:	mov	r4, r0
   14adc:	cmp	r3, #0
   14ae0:	str	r2, [sp, #12]
   14ae4:	str	r2, [sp, #8]
   14ae8:	movne	r2, #1
   14aec:	strne	r3, [sp, #20]
   14af0:	strne	r1, [sp, #16]
   14af4:	strne	r3, [sp, #8]
   14af8:	strne	r2, [sp, #12]
   14afc:	ldr	r0, [r4, #152]	; 0x98
   14b00:	cmp	r0, #0
   14b04:	bne	14b14 <flatcc_builder_create_vtable@@Base+0x50>
   14b08:	ldr	r0, [r4, #180]	; 0xb4
   14b0c:	cmp	r0, #0
   14b10:	beq	14b68 <flatcc_builder_create_vtable@@Base+0xa4>
   14b14:	cmp	r3, #0
   14b18:	beq	14bac <flatcc_builder_create_vtable@@Base+0xe8>
   14b1c:	ldr	r0, [r4, #136]	; 0x88
   14b20:	ldr	ip, [r4, #44]	; 0x2c
   14b24:	add	r1, sp, #8
   14b28:	add	r1, r1, #8
   14b2c:	sub	r5, r0, r3
   14b30:	ldr	r0, [r4, #36]	; 0x24
   14b34:	str	r3, [sp]
   14b38:	mov	r3, r5
   14b3c:	blx	ip
   14b40:	cmp	r0, #0
   14b44:	bne	14bc0 <flatcc_builder_create_vtable@@Base+0xfc>
   14b48:	cmp	r5, #0
   14b4c:	str	r5, [r4, #136]	; 0x88
   14b50:	beq	14b60 <flatcc_builder_create_vtable@@Base+0x9c>
   14b54:	add	r1, r5, #1
   14b58:	mov	r0, r1
   14b5c:	b	14ba4 <flatcc_builder_create_vtable@@Base+0xe0>
   14b60:	mov	r0, #0
   14b64:	b	14ba4 <flatcc_builder_create_vtable@@Base+0xe0>
   14b68:	ldr	r5, [r4, #140]	; 0x8c
   14b6c:	ldr	r0, [r4, #36]	; 0x24
   14b70:	ldr	ip, [r4, #44]	; 0x2c
   14b74:	add	r1, r5, r3
   14b78:	str	r1, [r4, #140]	; 0x8c
   14b7c:	add	r1, sp, #8
   14b80:	str	r3, [sp]
   14b84:	mov	r3, r5
   14b88:	add	r1, r1, #8
   14b8c:	blx	ip
   14b90:	cmp	r0, #0
   14b94:	bne	14be0 <flatcc_builder_create_vtable@@Base+0x11c>
   14b98:	adds	r1, r5, #1
   14b9c:	mov	r0, #0
   14ba0:	movcc	r0, r1
   14ba4:	sub	sp, fp, #8
   14ba8:	pop	{r4, r5, fp, pc}
   14bac:	movw	r0, #35096	; 0x8918
   14bb0:	movw	r1, #30578	; 0x7772
   14bb4:	movw	r3, #34775	; 0x87d7
   14bb8:	movw	r2, #647	; 0x287
   14bbc:	b	14bd0 <flatcc_builder_create_vtable@@Base+0x10c>
   14bc0:	movw	r0, #35096	; 0x8918
   14bc4:	movw	r1, #30578	; 0x7772
   14bc8:	movw	r3, #34775	; 0x87d7
   14bcc:	movw	r2, #651	; 0x28b
   14bd0:	movt	r0, #1
   14bd4:	movt	r1, #1
   14bd8:	movt	r3, #1
   14bdc:	bl	12498 <__assert_fail@plt>
   14be0:	movw	r0, #35096	; 0x8918
   14be4:	movw	r1, #30578	; 0x7772
   14be8:	movw	r3, #34963	; 0x8893
   14bec:	movw	r2, #677	; 0x2a5
   14bf0:	movt	r0, #1
   14bf4:	movt	r1, #1
   14bf8:	movt	r3, #1
   14bfc:	bl	12498 <__assert_fail@plt>

00014c00 <flatcc_builder_create_cached_vtable@@Base>:
   14c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c04:	add	fp, sp, #28
   14c08:	sub	sp, sp, #20
   14c0c:	mov	sl, r0
   14c10:	ldr	r0, [r0, #116]	; 0x74
   14c14:	mov	r8, r3
   14c18:	mov	r5, r2
   14c1c:	str	r1, [sp, #16]
   14c20:	cmp	r0, #0
   14c24:	beq	14cc8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14c28:	ldr	r1, [sl, #92]	; 0x5c
   14c2c:	rsb	r0, r0, #32
   14c30:	lsr	r0, r8, r0
   14c34:	add	r6, r1, r0, lsl #2
   14c38:	cmp	r6, #0
   14c3c:	beq	14d8c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   14c40:	ldr	r7, [r6]
   14c44:	str	r6, [sp, #12]
   14c48:	cmp	r7, #0
   14c4c:	beq	14d94 <flatcc_builder_create_cached_vtable@@Base+0x194>
   14c50:	ldr	r4, [sl, #68]	; 0x44
   14c54:	ldr	r8, [sl, #100]	; 0x64
   14c58:	mov	r0, #0
   14c5c:	str	r0, [sp, #8]
   14c60:	add	r9, r8, r7
   14c64:	mov	r1, r4
   14c68:	ldr	r0, [r9, #8]
   14c6c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14c70:	cmp	r0, r5
   14c74:	bne	14c8c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   14c78:	ldr	r0, [sp, #16]
   14c7c:	mov	r2, r5
   14c80:	bl	12444 <bcmp@plt>
   14c84:	cmp	r0, #0
   14c88:	beq	14ca0 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   14c8c:	ldr	r7, [r9, #12]!
   14c90:	mov	r6, r9
   14c94:	cmp	r7, #0
   14c98:	bne	14c60 <flatcc_builder_create_cached_vtable@@Base+0x60>
   14c9c:	b	14d84 <flatcc_builder_create_cached_vtable@@Base+0x184>
   14ca0:	ldr	r0, [sl, #152]	; 0x98
   14ca4:	ldr	r1, [r9, #4]
   14ca8:	cmp	r1, r0
   14cac:	beq	14ef8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   14cb0:	mov	r6, r9
   14cb4:	mov	r0, r9
   14cb8:	ldr	r7, [r6, #12]!
   14cbc:	cmp	r7, #0
   14cc0:	bne	14c5c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14cc4:	b	14d98 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14cc8:	ldr	r0, [sl, #124]	; 0x7c
   14ccc:	cmp	r0, #0
   14cd0:	bne	14f44 <flatcc_builder_create_cached_vtable@@Base+0x344>
   14cd4:	ldr	r0, [sl, #104]	; 0x68
   14cd8:	add	r7, sl, #100	; 0x64
   14cdc:	cmp	r0, #15
   14ce0:	bhi	14d0c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   14ce4:	ldr	r0, [sl, #40]	; 0x28
   14ce8:	ldr	r6, [sl, #48]	; 0x30
   14cec:	mov	r1, #6
   14cf0:	mov	r2, #16
   14cf4:	mov	r3, #0
   14cf8:	str	r1, [sp]
   14cfc:	mov	r1, r7
   14d00:	blx	r6
   14d04:	cmp	r0, #0
   14d08:	bne	14f24 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14d0c:	ldr	r0, [r7]
   14d10:	mov	r7, #0
   14d14:	cmp	r0, #0
   14d18:	beq	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14d1c:	mov	r0, #16
   14d20:	mov	r2, #5
   14d24:	add	r1, sl, #92	; 0x5c
   14d28:	mov	r3, #1
   14d2c:	mov	r4, #256	; 0x100
   14d30:	str	r0, [sl, #124]	; 0x7c
   14d34:	ldr	r0, [sl, #40]	; 0x28
   14d38:	ldr	r6, [sl, #48]	; 0x30
   14d3c:	str	r2, [sp]
   14d40:	mov	r2, #256	; 0x100
   14d44:	blx	r6
   14d48:	cmp	r0, #0
   14d4c:	bne	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14d50:	ldr	r0, [sl, #96]	; 0x60
   14d54:	mov	r1, r4
   14d58:	lsl	r4, r4, #1
   14d5c:	cmp	r0, r1, lsl #1
   14d60:	bcs	14d54 <flatcc_builder_create_cached_vtable@@Base+0x154>
   14d64:	lsr	r1, r1, #2
   14d68:	mvn	r0, #0
   14d6c:	mov	r2, #1
   14d70:	add	r0, r0, #1
   14d74:	cmp	r1, r2, lsl r0
   14d78:	bhi	14d70 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14d7c:	str	r0, [sl, #116]	; 0x74
   14d80:	b	14c28 <flatcc_builder_create_cached_vtable@@Base+0x28>
   14d84:	ldr	r9, [sp, #8]
   14d88:	b	14d98 <flatcc_builder_create_cached_vtable@@Base+0x198>
   14d8c:	mov	r7, #0
   14d90:	b	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14d94:	mov	r9, #0
   14d98:	ldr	r4, [sl, #124]	; 0x7c
   14d9c:	ldr	r0, [sl, #104]	; 0x68
   14da0:	add	r7, sl, #100	; 0x64
   14da4:	add	r2, r4, #16
   14da8:	cmp	r2, r0
   14dac:	bls	14dd4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14db0:	ldr	r0, [sl, #40]	; 0x28
   14db4:	ldr	r6, [sl, #48]	; 0x30
   14db8:	mov	r1, #6
   14dbc:	mov	r3, #0
   14dc0:	str	r1, [sp]
   14dc4:	mov	r1, r7
   14dc8:	blx	r6
   14dcc:	cmp	r0, #0
   14dd0:	bne	14f24 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14dd4:	ldr	r0, [r7]
   14dd8:	mov	r7, #0
   14ddc:	adds	r4, r0, r4
   14de0:	beq	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14de4:	ldr	r0, [sl, #124]	; 0x7c
   14de8:	ldr	r1, [sl, #152]	; 0x98
   14dec:	add	r2, r0, #16
   14df0:	str	r2, [sl, #124]	; 0x7c
   14df4:	ldr	r2, [sp, #12]
   14df8:	str	r1, [r4, #4]
   14dfc:	ldr	r1, [r2]
   14e00:	str	r1, [r4, #12]
   14e04:	ldr	r1, [sp, #16]
   14e08:	str	r0, [r2]
   14e0c:	mov	r0, sl
   14e10:	mov	r2, r5
   14e14:	bl	14ac4 <flatcc_builder_create_vtable@@Base>
   14e18:	cmp	r0, #0
   14e1c:	str	r0, [r4]
   14e20:	beq	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14e24:	cmp	r9, #0
   14e28:	beq	14e44 <flatcc_builder_create_cached_vtable@@Base+0x244>
   14e2c:	ldr	r0, [r9, #8]
   14e30:	str	r0, [r4, #8]
   14e34:	ldr	r7, [r4]
   14e38:	mov	r0, r7
   14e3c:	sub	sp, fp, #28
   14e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e44:	ldr	r6, [sl, #120]	; 0x78
   14e48:	ldr	r0, [sl, #172]	; 0xac
   14e4c:	add	r2, r6, r5
   14e50:	cmp	r0, #0
   14e54:	beq	14e90 <flatcc_builder_create_cached_vtable@@Base+0x290>
   14e58:	cmp	r0, r2
   14e5c:	bcs	14e90 <flatcc_builder_create_cached_vtable@@Base+0x290>
   14e60:	ldr	r0, [sl, #116]	; 0x74
   14e64:	cmp	r0, #0
   14e68:	beq	14e34 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14e6c:	ldr	r0, [sl, #92]	; 0x5c
   14e70:	ldr	r2, [sl, #96]	; 0x60
   14e74:	mov	r1, #0
   14e78:	mov	r5, #0
   14e7c:	bl	12468 <memset@plt>
   14e80:	mov	r0, #16
   14e84:	str	r5, [sl, #120]	; 0x78
   14e88:	str	r0, [sl, #124]	; 0x7c
   14e8c:	b	14e34 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14e90:	ldr	r0, [sl, #72]	; 0x48
   14e94:	add	r7, sl, #68	; 0x44
   14e98:	cmp	r2, r0
   14e9c:	bls	14ec4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   14ea0:	ldr	r0, [sl, #40]	; 0x28
   14ea4:	ldr	ip, [sl, #48]	; 0x30
   14ea8:	mov	r1, #2
   14eac:	mov	r3, #0
   14eb0:	str	r1, [sp]
   14eb4:	mov	r1, r7
   14eb8:	blx	ip
   14ebc:	cmp	r0, #0
   14ec0:	bne	14f24 <flatcc_builder_create_cached_vtable@@Base+0x324>
   14ec4:	ldr	r0, [r7]
   14ec8:	adds	r0, r0, r6
   14ecc:	beq	14ef0 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   14ed0:	ldr	r1, [sl, #120]	; 0x78
   14ed4:	mov	r2, r5
   14ed8:	str	r1, [r4, #8]
   14edc:	add	r1, r1, r5
   14ee0:	str	r1, [sl, #120]	; 0x78
   14ee4:	ldr	r1, [sp, #16]
   14ee8:	bl	123e4 <memcpy@plt>
   14eec:	b	14e34 <flatcc_builder_create_cached_vtable@@Base+0x234>
   14ef0:	mvn	r7, #0
   14ef4:	b	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14ef8:	ldr	r0, [sp, #12]
   14efc:	cmp	r6, r0
   14f00:	beq	14f1c <flatcc_builder_create_cached_vtable@@Base+0x31c>
   14f04:	mov	r1, r0
   14f08:	ldr	r0, [r9, #12]
   14f0c:	str	r0, [r6]
   14f10:	ldr	r0, [r1]
   14f14:	str	r0, [r9, #12]
   14f18:	str	r7, [r1]
   14f1c:	ldr	r7, [r9]
   14f20:	b	14e38 <flatcc_builder_create_cached_vtable@@Base+0x238>
   14f24:	movw	r0, #35096	; 0x8918
   14f28:	movw	r1, #30578	; 0x7772
   14f2c:	movw	r3, #34642	; 0x8752
   14f30:	mov	r2, #308	; 0x134
   14f34:	movt	r0, #1
   14f38:	movt	r1, #1
   14f3c:	movt	r3, #1
   14f40:	bl	12498 <__assert_fail@plt>
   14f44:	movw	r0, #35036	; 0x88dc
   14f48:	movw	r1, #30578	; 0x7772
   14f4c:	movw	r3, #35051	; 0x88eb
   14f50:	movw	r2, #342	; 0x156
   14f54:	movt	r0, #1
   14f58:	movt	r1, #1
   14f5c:	movt	r3, #1
   14f60:	bl	12498 <__assert_fail@plt>

00014f64 <flatcc_builder_create_table@@Base>:
   14f64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f68:	add	fp, sp, #24
   14f6c:	sub	sp, sp, #80	; 0x50
   14f70:	ldr	r5, [fp, #12]
   14f74:	cmn	r5, #1
   14f78:	ble	150c4 <flatcc_builder_create_table@@Base+0x160>
   14f7c:	ldr	ip, [fp, #16]
   14f80:	tst	ip, #1
   14f84:	beq	150dc <flatcc_builder_create_table@@Base+0x178>
   14f88:	mov	r8, r0
   14f8c:	ldrh	r0, [r0, #128]	; 0x80
   14f90:	cmp	r3, #4
   14f94:	movls	r3, #4
   14f98:	cmp	r0, r3
   14f9c:	strhcc	r3, [r8, #128]	; 0x80
   14fa0:	cmp	r5, #1
   14fa4:	ldr	r0, [r8, #136]	; 0x88
   14fa8:	sub	r4, r0, r2
   14fac:	sub	r0, r3, #1
   14fb0:	and	r0, r4, r0
   14fb4:	sub	r4, r4, #4
   14fb8:	add	r3, ip, r0
   14fbc:	sub	r3, r4, r3
   14fc0:	add	r3, r3, #1
   14fc4:	str	r3, [fp, #-28]	; 0xffffffe4
   14fc8:	blt	14ff8 <flatcc_builder_create_table@@Base+0x94>
   14fcc:	ldr	r3, [fp, #8]
   14fd0:	sub	ip, r4, r0
   14fd4:	mvn	r4, #3
   14fd8:	sub	r4, r4, ip
   14fdc:	ldrh	r6, [r3], #2
   14fe0:	subs	r5, r5, #1
   14fe4:	ldr	r7, [r6, r1]
   14fe8:	add	r7, r4, r7
   14fec:	sub	r7, r7, r6
   14ff0:	str	r7, [r6, r1]
   14ff4:	bne	14fdc <flatcc_builder_create_table@@Base+0x78>
   14ff8:	mov	r4, #4
   14ffc:	sub	r3, fp, #28
   15000:	cmp	r2, #0
   15004:	str	r4, [sp, #16]
   15008:	str	r3, [sp, #12]
   1500c:	mov	r3, #1
   15010:	str	r4, [sp, #4]
   15014:	addne	r4, r2, #4
   15018:	str	r3, [sp, #8]
   1501c:	movne	r3, #2
   15020:	strne	r2, [sp, #24]
   15024:	strne	r1, [sp, #20]
   15028:	strne	r3, [sp, #8]
   1502c:	strne	r4, [sp, #4]
   15030:	cmp	r0, #0
   15034:	beq	15060 <flatcc_builder_create_table@@Base+0xfc>
   15038:	add	r1, sp, #4
   1503c:	movw	r2, #30048	; 0x7560
   15040:	add	r4, r4, r0
   15044:	add	r1, r1, r3, lsl #3
   15048:	movt	r2, #1
   1504c:	add	r3, r3, #1
   15050:	str	r4, [sp, #4]
   15054:	str	r2, [r1, #8]
   15058:	str	r0, [r1, #12]
   1505c:	str	r3, [sp, #8]
   15060:	cmp	r4, #0
   15064:	ble	150fc <flatcc_builder_create_table@@Base+0x198>
   15068:	ldr	r0, [r8, #136]	; 0x88
   1506c:	ldr	r7, [r8, #44]	; 0x2c
   15070:	add	r1, sp, #4
   15074:	mov	r2, r3
   15078:	add	r1, r1, #8
   1507c:	sub	r5, r0, r4
   15080:	ldr	r0, [r8, #36]	; 0x24
   15084:	str	r4, [sp]
   15088:	mov	r3, r5
   1508c:	blx	r7
   15090:	cmp	r0, #0
   15094:	streq	r5, [r8, #136]	; 0x88
   15098:	moveq	r0, r5
   1509c:	subeq	sp, fp, #24
   150a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   150a4:	movw	r0, #35096	; 0x8918
   150a8:	movw	r1, #30578	; 0x7772
   150ac:	movw	r3, #34775	; 0x87d7
   150b0:	movw	r2, #651	; 0x28b
   150b4:	movt	r0, #1
   150b8:	movt	r1, #1
   150bc:	movt	r3, #1
   150c0:	bl	12498 <__assert_fail@plt>
   150c4:	movw	r0, #32462	; 0x7ece
   150c8:	movw	r1, #30578	; 0x7772
   150cc:	movw	r3, #32480	; 0x7ee0
   150d0:	movw	r2, #1237	; 0x4d5
   150d4:	movt	r0, #1
   150d8:	b	150f0 <flatcc_builder_create_table@@Base+0x18c>
   150dc:	movw	r0, #32636	; 0x7f7c
   150e0:	movw	r1, #30578	; 0x7772
   150e4:	movw	r3, #32480	; 0x7ee0
   150e8:	movw	r2, #1243	; 0x4db
   150ec:	movt	r0, #1
   150f0:	movt	r1, #1
   150f4:	movt	r3, #1
   150f8:	bl	12498 <__assert_fail@plt>
   150fc:	movw	r0, #35096	; 0x8918
   15100:	movw	r1, #30578	; 0x7772
   15104:	movw	r3, #34775	; 0x87d7
   15108:	movw	r2, #647	; 0x287
   1510c:	b	150b4 <flatcc_builder_create_table@@Base+0x150>

00015110 <flatcc_builder_check_required_field@@Base>:
   15110:	push	{fp, lr}
   15114:	mov	fp, sp
   15118:	ldr	r2, [r0, #32]
   1511c:	ldrh	r2, [r2, #14]
   15120:	cmp	r2, #3
   15124:	bne	15154 <flatcc_builder_check_required_field@@Base+0x44>
   15128:	ldrh	r3, [r0, #8]
   1512c:	mov	r2, #0
   15130:	cmp	r3, r1
   15134:	bls	1514c <flatcc_builder_check_required_field@@Base+0x3c>
   15138:	ldr	r0, [r0, #4]
   1513c:	add	r0, r0, r1, lsl #1
   15140:	ldrh	r2, [r0]
   15144:	cmp	r2, #0
   15148:	movwne	r2, #1
   1514c:	mov	r0, r2
   15150:	pop	{fp, pc}
   15154:	movw	r0, #32647	; 0x7f87
   15158:	movw	r1, #30578	; 0x7772
   1515c:	movw	r3, #32690	; 0x7fb2
   15160:	movw	r2, #1272	; 0x4f8
   15164:	movt	r0, #1
   15168:	movt	r1, #1
   1516c:	movt	r3, #1
   15170:	bl	12498 <__assert_fail@plt>

00015174 <flatcc_builder_check_union_field@@Base>:
   15174:	push	{fp, lr}
   15178:	mov	fp, sp
   1517c:	mov	r2, r0
   15180:	ldr	r0, [r0, #32]
   15184:	ldrh	r0, [r0, #14]
   15188:	cmp	r0, #3
   1518c:	bne	151ec <flatcc_builder_check_union_field@@Base+0x78>
   15190:	mov	r0, #0
   15194:	cmp	r1, #0
   15198:	beq	151d8 <flatcc_builder_check_union_field@@Base+0x64>
   1519c:	ldrh	r3, [r2, #8]
   151a0:	cmp	r3, r1
   151a4:	popls	{fp, pc}
   151a8:	ldr	r0, [r2, #4]
   151ac:	add	r0, r0, r1, lsl #1
   151b0:	ldrh	r1, [r0, #-2]
   151b4:	cmp	r1, #0
   151b8:	beq	151dc <flatcc_builder_check_union_field@@Base+0x68>
   151bc:	ldr	r2, [r2, #16]
   151c0:	ldrh	r0, [r0]
   151c4:	ldrb	r1, [r2, r1]
   151c8:	cmp	r1, #0
   151cc:	beq	151e0 <flatcc_builder_check_union_field@@Base+0x6c>
   151d0:	cmp	r0, #0
   151d4:	movwne	r0, #1
   151d8:	pop	{fp, pc}
   151dc:	ldrh	r0, [r0]
   151e0:	clz	r0, r0
   151e4:	lsr	r0, r0, #5
   151e8:	pop	{fp, pc}
   151ec:	movw	r0, #32647	; 0x7f87
   151f0:	movw	r1, #30578	; 0x7772
   151f4:	movw	r3, #32773	; 0x8005
   151f8:	movw	r2, #1279	; 0x4ff
   151fc:	movt	r0, #1
   15200:	movt	r1, #1
   15204:	movt	r3, #1
   15208:	bl	12498 <__assert_fail@plt>

0001520c <flatcc_builder_check_required@@Base>:
   1520c:	push	{fp, lr}
   15210:	mov	fp, sp
   15214:	mov	r3, r0
   15218:	ldr	r0, [r0, #32]
   1521c:	ldrh	r0, [r0, #14]
   15220:	cmp	r0, #3
   15224:	bne	1526c <flatcc_builder_check_required@@Base+0x60>
   15228:	ldrh	ip, [r3, #8]
   1522c:	mov	r0, #0
   15230:	cmp	ip, r2
   15234:	poplt	{fp, pc}
   15238:	cmp	r2, #1
   1523c:	blt	15264 <flatcc_builder_check_required@@Base+0x58>
   15240:	ldr	ip, [r3, #4]
   15244:	ldrh	r3, [r1]
   15248:	add	r3, ip, r3, lsl #1
   1524c:	ldrh	r3, [r3]
   15250:	cmp	r3, #0
   15254:	beq	15268 <flatcc_builder_check_required@@Base+0x5c>
   15258:	add	r1, r1, #2
   1525c:	subs	r2, r2, #1
   15260:	bne	15244 <flatcc_builder_check_required@@Base+0x38>
   15264:	mov	r0, #1
   15268:	pop	{fp, pc}
   1526c:	movw	r0, #32647	; 0x7f87
   15270:	movw	r1, #30578	; 0x7772
   15274:	movw	r3, #32853	; 0x8055
   15278:	movw	r2, #1297	; 0x511
   1527c:	movt	r0, #1
   15280:	movt	r1, #1
   15284:	movt	r3, #1
   15288:	bl	12498 <__assert_fail@plt>

0001528c <flatcc_builder_end_table@@Base>:
   1528c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15290:	add	fp, sp, #24
   15294:	sub	sp, sp, #16
   15298:	mov	r4, r0
   1529c:	ldr	r0, [r0, #32]
   152a0:	ldrh	r0, [r0, #14]
   152a4:	cmp	r0, #3
   152a8:	bne	15424 <flatcc_builder_end_table@@Base+0x198>
   152ac:	ldrh	r0, [r4, #8]
   152b0:	ldr	r5, [r4, #4]
   152b4:	mov	r1, #4
   152b8:	movw	r2, #31153	; 0x79b1
   152bc:	movt	r2, #40503	; 0x9e37
   152c0:	add	r0, r1, r0, lsl #1
   152c4:	strh	r0, [r5, #-4]!
   152c8:	ldrh	r1, [r4, #20]
   152cc:	uxth	r6, r0
   152d0:	add	r1, r1, #4
   152d4:	strh	r1, [r5, #2]
   152d8:	uxth	r1, r1
   152dc:	ldr	r0, [r4, #12]
   152e0:	eor	r0, r0, r6
   152e4:	mul	r0, r0, r2
   152e8:	eor	r0, r0, r1
   152ec:	mov	r1, r5
   152f0:	mul	r3, r0, r2
   152f4:	mov	r0, r4
   152f8:	mov	r2, r6
   152fc:	str	r3, [r4, #12]
   15300:	bl	14c00 <flatcc_builder_create_cached_vtable@@Base>
   15304:	cmp	r0, #0
   15308:	beq	15414 <flatcc_builder_end_table@@Base+0x188>
   1530c:	mov	r7, r0
   15310:	mov	r0, r5
   15314:	mov	r1, #0
   15318:	mov	r2, r6
   1531c:	mov	r8, #0
   15320:	bl	12468 <memset@plt>
   15324:	ldr	r5, [r4, #32]
   15328:	ldr	r0, [r4, #76]	; 0x4c
   1532c:	ldr	r6, [r4]
   15330:	ldrh	r3, [r4, #130]	; 0x82
   15334:	ldr	r1, [r4, #16]
   15338:	ldr	r2, [r4, #20]
   1533c:	ldr	r5, [r5, #20]
   15340:	add	r0, r0, r5
   15344:	sub	r6, r6, r0
   15348:	asr	r6, r6, #1
   1534c:	stm	sp, {r0, r6, r7}
   15350:	mov	r0, r4
   15354:	bl	14f64 <flatcc_builder_create_table@@Base>
   15358:	cmp	r0, #0
   1535c:	beq	15418 <flatcc_builder_end_table@@Base+0x18c>
   15360:	ldr	r1, [r4, #32]
   15364:	mov	r5, r0
   15368:	ldr	r0, [r4, #16]
   1536c:	ldr	r2, [r4, #20]
   15370:	ldr	r3, [r4, #52]	; 0x34
   15374:	ldr	r7, [r1, #24]
   15378:	str	r7, [r4, #12]
   1537c:	ldrh	r7, [r1, #28]
   15380:	strh	r7, [r4, #8]
   15384:	ldr	r7, [r1, #16]
   15388:	add	r3, r3, r7
   1538c:	str	r3, [r4, #4]
   15390:	ldr	r3, [r4, #76]	; 0x4c
   15394:	ldr	r1, [r1, #20]
   15398:	add	r1, r3, r1
   1539c:	str	r1, [r4]
   153a0:	mov	r1, #0
   153a4:	bl	12468 <memset@plt>
   153a8:	ldr	r0, [r4, #32]
   153ac:	ldr	r1, [r4, #60]	; 0x3c
   153b0:	ldr	r2, [r4, #64]	; 0x40
   153b4:	mov	r8, r5
   153b8:	ldr	r3, [r0, #8]
   153bc:	str	r3, [r4, #20]
   153c0:	ldr	r3, [r0]
   153c4:	str	r3, [r4, #28]
   153c8:	add	r1, r1, r3
   153cc:	ldr	r7, [r0, #4]
   153d0:	str	r1, [r4, #16]
   153d4:	sub	r1, r2, r3
   153d8:	cmp	r1, r7
   153dc:	movhi	r1, r7
   153e0:	str	r1, [r4, #24]
   153e4:	ldrh	r1, [r4, #130]	; 0x82
   153e8:	ldrh	r2, [r4, #128]	; 0x80
   153ec:	cmp	r2, r1
   153f0:	strhcc	r1, [r4, #128]	; 0x80
   153f4:	ldrh	r1, [r0, #12]
   153f8:	sub	r0, r0, #36	; 0x24
   153fc:	str	r0, [r4, #32]
   15400:	strh	r1, [r4, #130]	; 0x82
   15404:	ldr	r0, [r4, #156]	; 0x9c
   15408:	sub	r0, r0, #1
   1540c:	str	r0, [r4, #156]	; 0x9c
   15410:	b	15418 <flatcc_builder_end_table@@Base+0x18c>
   15414:	mov	r8, #0
   15418:	mov	r0, r8
   1541c:	sub	sp, fp, #24
   15420:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15424:	movw	r0, #32647	; 0x7f87
   15428:	movw	r1, #30578	; 0x7772
   1542c:	movw	r3, #32943	; 0x80af
   15430:	movw	r2, #1317	; 0x525
   15434:	movt	r0, #1
   15438:	movt	r1, #1
   1543c:	movt	r3, #1
   15440:	bl	12498 <__assert_fail@plt>

00015444 <flatcc_builder_create_vector@@Base>:
   15444:	push	{r4, r5, r6, r7, fp, lr}
   15448:	add	fp, sp, #16
   1544c:	sub	sp, sp, #80	; 0x50
   15450:	mov	r7, r0
   15454:	ldr	r0, [fp, #12]
   15458:	cmp	r2, r0
   1545c:	bhi	15558 <flatcc_builder_create_vector@@Base+0x114>
   15460:	ldr	r0, [fp, #8]
   15464:	mov	r4, r2
   15468:	ldrh	r2, [r7, #128]	; 0x80
   1546c:	mov	r5, #4
   15470:	cmp	r0, #4
   15474:	movls	r0, r5
   15478:	cmp	r2, r0
   1547c:	sub	r2, fp, #20
   15480:	strhcc	r0, [r7, #128]	; 0x80
   15484:	str	r4, [fp, #-20]	; 0xffffffec
   15488:	sub	r0, r0, #1
   1548c:	ldr	ip, [r7, #136]	; 0x88
   15490:	str	r5, [sp, #16]
   15494:	str	r2, [sp, #12]
   15498:	mov	r2, #1
   1549c:	str	r5, [sp, #4]
   154a0:	str	r2, [sp, #8]
   154a4:	mls	r6, r3, r4, ip
   154a8:	mul	r3, r3, r4
   154ac:	cmp	r3, #0
   154b0:	and	r0, r6, r0
   154b4:	movne	r2, #2
   154b8:	addne	r5, r3, #4
   154bc:	strne	r3, [sp, #24]
   154c0:	strne	r1, [sp, #20]
   154c4:	strne	r2, [sp, #8]
   154c8:	strne	r5, [sp, #4]
   154cc:	cmp	r0, #0
   154d0:	beq	154fc <flatcc_builder_create_vector@@Base+0xb8>
   154d4:	add	r1, sp, #4
   154d8:	movw	r3, #30048	; 0x7560
   154dc:	add	r5, r5, r0
   154e0:	add	r1, r1, r2, lsl #3
   154e4:	movt	r3, #1
   154e8:	add	r2, r2, #1
   154ec:	str	r5, [sp, #4]
   154f0:	str	r3, [r1, #8]
   154f4:	str	r0, [r1, #12]
   154f8:	str	r2, [sp, #8]
   154fc:	cmp	r5, #0
   15500:	ble	15578 <flatcc_builder_create_vector@@Base+0x134>
   15504:	ldr	r0, [r7, #36]	; 0x24
   15508:	ldr	r6, [r7, #44]	; 0x2c
   1550c:	add	r1, sp, #4
   15510:	sub	r4, ip, r5
   15514:	str	r5, [sp]
   15518:	add	r1, r1, #8
   1551c:	mov	r3, r4
   15520:	blx	r6
   15524:	cmp	r0, #0
   15528:	streq	r4, [r7, #136]	; 0x88
   1552c:	moveq	r0, r4
   15530:	subeq	sp, fp, #16
   15534:	popeq	{r4, r5, r6, r7, fp, pc}
   15538:	movw	r0, #35096	; 0x8918
   1553c:	movw	r1, #30578	; 0x7772
   15540:	movw	r3, #34775	; 0x87d7
   15544:	movw	r2, #651	; 0x28b
   15548:	movt	r0, #1
   1554c:	movt	r1, #1
   15550:	movt	r3, #1
   15554:	bl	12498 <__assert_fail@plt>
   15558:	movw	r0, #33009	; 0x80f1
   1555c:	movw	r1, #30578	; 0x7772
   15560:	movw	r3, #33028	; 0x8104
   15564:	movw	r2, #1365	; 0x555
   15568:	movt	r0, #1
   1556c:	movt	r1, #1
   15570:	movt	r3, #1
   15574:	bl	12498 <__assert_fail@plt>
   15578:	movw	r0, #35096	; 0x8918
   1557c:	movw	r1, #30578	; 0x7772
   15580:	movw	r3, #34775	; 0x87d7
   15584:	movw	r2, #647	; 0x287
   15588:	b	15548 <flatcc_builder_create_vector@@Base+0x104>

0001558c <flatcc_builder_end_vector@@Base>:
   1558c:	push	{r4, r5, fp, lr}
   15590:	add	fp, sp, #8
   15594:	sub	sp, sp, #8
   15598:	mov	r4, r0
   1559c:	ldr	r0, [r0, #32]
   155a0:	ldrh	r1, [r0, #14]
   155a4:	cmp	r1, #4
   155a8:	bne	1565c <flatcc_builder_end_vector@@Base+0xd0>
   155ac:	ldr	r3, [r0, #16]
   155b0:	ldr	r2, [r0, #20]
   155b4:	ldr	r0, [r0, #24]
   155b8:	ldr	r1, [r4, #16]
   155bc:	ldrh	r5, [r4, #130]	; 0x82
   155c0:	str	r0, [sp, #4]
   155c4:	mov	r0, r4
   155c8:	str	r5, [sp]
   155cc:	bl	15444 <flatcc_builder_create_vector@@Base>
   155d0:	mov	r5, r0
   155d4:	cmp	r0, #0
   155d8:	beq	15650 <flatcc_builder_end_vector@@Base+0xc4>
   155dc:	ldr	r0, [r4, #16]
   155e0:	ldr	r2, [r4, #20]
   155e4:	mov	r1, #0
   155e8:	bl	12468 <memset@plt>
   155ec:	ldr	r0, [r4, #32]
   155f0:	ldr	r1, [r4, #60]	; 0x3c
   155f4:	ldr	ip, [r4, #64]	; 0x40
   155f8:	ldr	r3, [r0, #8]
   155fc:	str	r3, [r4, #20]
   15600:	ldr	r3, [r0]
   15604:	str	r3, [r4, #28]
   15608:	add	r1, r1, r3
   1560c:	ldr	r2, [r0, #4]
   15610:	str	r1, [r4, #16]
   15614:	sub	r1, ip, r3
   15618:	cmp	r1, r2
   1561c:	movhi	r1, r2
   15620:	str	r1, [r4, #24]
   15624:	ldrh	r1, [r4, #130]	; 0x82
   15628:	ldrh	r2, [r4, #128]	; 0x80
   1562c:	cmp	r2, r1
   15630:	strhcc	r1, [r4, #128]	; 0x80
   15634:	ldrh	r1, [r0, #12]
   15638:	sub	r0, r0, #36	; 0x24
   1563c:	str	r0, [r4, #32]
   15640:	strh	r1, [r4, #130]	; 0x82
   15644:	ldr	r0, [r4, #156]	; 0x9c
   15648:	sub	r0, r0, #1
   1564c:	str	r0, [r4, #156]	; 0x9c
   15650:	mov	r0, r5
   15654:	sub	sp, fp, #8
   15658:	pop	{r4, r5, fp, pc}
   1565c:	movw	r0, #31381	; 0x7a95
   15660:	movw	r1, #30578	; 0x7772
   15664:	movw	r3, #33146	; 0x817a
   15668:	movw	r2, #1400	; 0x578
   1566c:	movt	r0, #1
   15670:	movt	r1, #1
   15674:	movt	r3, #1
   15678:	bl	12498 <__assert_fail@plt>

0001567c <flatcc_builder_vector_count@@Base>:
   1567c:	ldr	r0, [r0, #32]
   15680:	ldr	r0, [r0, #20]
   15684:	bx	lr

00015688 <flatcc_builder_vector_edit@@Base>:
   15688:	ldr	r0, [r0, #16]
   1568c:	bx	lr

00015690 <flatcc_builder_create_offset_vector_direct@@Base>:
   15690:	mov	r3, #0
   15694:	b	15698 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15698:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1569c:	add	fp, sp, #24
   156a0:	sub	sp, sp, #80	; 0x50
   156a4:	mov	r6, #0
   156a8:	cmn	r2, #-1073741823	; 0xc0000001
   156ac:	bhi	157e8 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   156b0:	mov	r8, r0
   156b4:	ldrh	r0, [r0, #128]	; 0x80
   156b8:	mov	r5, #4
   156bc:	sub	r7, fp, #28
   156c0:	mov	r4, #1
   156c4:	cmp	r0, #3
   156c8:	movls	r0, #4
   156cc:	strhls	r0, [r8, #128]	; 0x80
   156d0:	str	r2, [fp, #-28]	; 0xffffffe4
   156d4:	ldr	ip, [r8, #136]	; 0x88
   156d8:	str	r5, [sp, #16]
   156dc:	str	r7, [sp, #12]
   156e0:	mov	r7, #0
   156e4:	str	r5, [sp, #4]
   156e8:	str	r4, [sp, #8]
   156ec:	cmp	r7, r2, lsl #2
   156f0:	and	r6, ip, #3
   156f4:	beq	15714 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   156f8:	lsl	r7, r2, #2
   156fc:	mov	r4, #2
   15700:	add	r5, r7, #4
   15704:	str	r7, [sp, #24]
   15708:	str	r1, [sp, #20]
   1570c:	str	r4, [sp, #8]
   15710:	str	r5, [sp, #4]
   15714:	cmp	r6, #0
   15718:	beq	15744 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   1571c:	add	r7, sp, #4
   15720:	movw	r0, #30048	; 0x7560
   15724:	add	r5, r5, r6
   15728:	add	r7, r7, r4, lsl #3
   1572c:	movt	r0, #1
   15730:	add	r4, r4, #1
   15734:	str	r5, [sp, #4]
   15738:	str	r0, [r7, #8]
   1573c:	str	r6, [r7, #12]
   15740:	str	r4, [sp, #8]
   15744:	cmp	r2, #0
   15748:	beq	157b0 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   1574c:	sub	r0, r5, ip
   15750:	mov	r6, r3
   15754:	sub	r0, r0, #4
   15758:	ldr	r7, [r1]
   1575c:	cmp	r7, #0
   15760:	beq	15784 <flatcc_builder_create_offset_vector_direct@@Base+0xf4>
   15764:	add	r7, r0, r7
   15768:	cmp	r3, #0
   1576c:	str	r7, [r1]
   15770:	beq	15798 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15774:	ldrb	r7, [r6]
   15778:	cmp	r7, #0
   1577c:	bne	15798 <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15780:	b	157f4 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15784:	cmp	r3, #0
   15788:	beq	15824 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   1578c:	ldrb	r7, [r6]
   15790:	cmp	r7, #0
   15794:	bne	1580c <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   15798:	sub	r0, r0, #4
   1579c:	add	r1, r1, #4
   157a0:	add	r6, r6, #1
   157a4:	subs	r2, r2, #1
   157a8:	bne	15758 <flatcc_builder_create_offset_vector_direct@@Base+0xc8>
   157ac:	ldr	ip, [r8, #136]	; 0x88
   157b0:	cmp	r5, #0
   157b4:	ble	15844 <flatcc_builder_create_offset_vector_direct@@Base+0x1b4>
   157b8:	ldr	r0, [r8, #36]	; 0x24
   157bc:	ldr	r7, [r8, #44]	; 0x2c
   157c0:	add	r1, sp, #4
   157c4:	sub	r6, ip, r5
   157c8:	mov	r2, r4
   157cc:	str	r5, [sp]
   157d0:	add	r1, r1, #8
   157d4:	mov	r3, r6
   157d8:	blx	r7
   157dc:	cmp	r0, #0
   157e0:	bne	15858 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   157e4:	str	r6, [r8, #136]	; 0x88
   157e8:	mov	r0, r6
   157ec:	sub	sp, fp, #24
   157f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157f4:	movw	r0, #35084	; 0x890c
   157f8:	movw	r1, #30578	; 0x7772
   157fc:	movw	r3, #35098	; 0x891a
   15800:	movw	r2, #1457	; 0x5b1
   15804:	movt	r0, #1
   15808:	b	15838 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   1580c:	movw	r0, #35229	; 0x899d
   15810:	movw	r1, #30578	; 0x7772
   15814:	movw	r3, #35098	; 0x891a
   15818:	movw	r2, #1461	; 0x5b5
   1581c:	movt	r0, #1
   15820:	b	15838 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   15824:	movw	r0, #35096	; 0x8918
   15828:	movw	r1, #30578	; 0x7772
   1582c:	movw	r3, #35098	; 0x891a
   15830:	movw	r2, #1463	; 0x5b7
   15834:	movt	r0, #1
   15838:	movt	r1, #1
   1583c:	movt	r3, #1
   15840:	bl	12498 <__assert_fail@plt>
   15844:	movw	r0, #35096	; 0x8918
   15848:	movw	r1, #30578	; 0x7772
   1584c:	movw	r3, #34775	; 0x87d7
   15850:	movw	r2, #647	; 0x287
   15854:	b	15868 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   15858:	movw	r0, #35096	; 0x8918
   1585c:	movw	r1, #30578	; 0x7772
   15860:	movw	r3, #34775	; 0x87d7
   15864:	movw	r2, #651	; 0x28b
   15868:	movt	r0, #1
   1586c:	movt	r1, #1
   15870:	movt	r3, #1
   15874:	bl	12498 <__assert_fail@plt>

00015878 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15878:	push	{r4, r5, fp, lr}
   1587c:	add	fp, sp, #8
   15880:	mov	r4, r0
   15884:	ldr	r0, [r0, #32]
   15888:	mov	r3, r1
   1588c:	ldrh	r1, [r0, #14]
   15890:	cmp	r1, #5
   15894:	bne	15930 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15898:	ldr	r2, [r0, #20]
   1589c:	ldr	r1, [r4, #16]
   158a0:	mov	r0, r4
   158a4:	bl	15698 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   158a8:	mov	r5, r0
   158ac:	cmp	r0, #0
   158b0:	beq	15928 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   158b4:	ldr	r0, [r4, #16]
   158b8:	ldr	r2, [r4, #20]
   158bc:	mov	r1, #0
   158c0:	bl	12468 <memset@plt>
   158c4:	ldr	r0, [r4, #32]
   158c8:	ldr	r1, [r4, #60]	; 0x3c
   158cc:	ldr	ip, [r4, #64]	; 0x40
   158d0:	ldr	r3, [r0, #8]
   158d4:	str	r3, [r4, #20]
   158d8:	ldr	r3, [r0]
   158dc:	str	r3, [r4, #28]
   158e0:	add	r1, r1, r3
   158e4:	ldr	r2, [r0, #4]
   158e8:	str	r1, [r4, #16]
   158ec:	sub	r1, ip, r3
   158f0:	cmp	r1, r2
   158f4:	movhi	r1, r2
   158f8:	str	r1, [r4, #24]
   158fc:	ldrh	r1, [r4, #130]	; 0x82
   15900:	ldrh	r2, [r4, #128]	; 0x80
   15904:	cmp	r2, r1
   15908:	strhcc	r1, [r4, #128]	; 0x80
   1590c:	ldrh	r1, [r0, #12]
   15910:	sub	r0, r0, #36	; 0x24
   15914:	str	r0, [r4, #32]
   15918:	strh	r1, [r4, #130]	; 0x82
   1591c:	ldr	r0, [r4, #156]	; 0x9c
   15920:	sub	r0, r0, #1
   15924:	str	r0, [r4, #156]	; 0x9c
   15928:	mov	r0, r5
   1592c:	pop	{r4, r5, fp, pc}
   15930:	movw	r0, #31630	; 0x7b8e
   15934:	movw	r1, #30578	; 0x7772
   15938:	movw	r3, #33287	; 0x8207
   1593c:	movw	r2, #1493	; 0x5d5
   15940:	movt	r0, #1
   15944:	movt	r1, #1
   15948:	movt	r3, #1
   1594c:	bl	12498 <__assert_fail@plt>

00015950 <flatcc_builder_offset_vector_edit@@Base>:
   15950:	ldr	r0, [r0, #16]
   15954:	bx	lr

00015958 <flatcc_builder_offset_vector_count@@Base>:
   15958:	ldr	r0, [r0, #32]
   1595c:	ldr	r0, [r0, #20]
   15960:	bx	lr

00015964 <flatcc_builder_table_add_union@@Base>:
   15964:	push	{r4, r5, r6, r7, fp, lr}
   15968:	add	fp, sp, #16
   1596c:	mov	r5, r0
   15970:	ldr	r0, [r0, #32]
   15974:	ldrh	r0, [r0, #14]
   15978:	cmp	r0, #3
   1597c:	bne	15a04 <flatcc_builder_table_add_union@@Base+0xa0>
   15980:	mov	r7, r3
   15984:	mov	r4, r2
   15988:	mov	r6, r1
   1598c:	cmp	r3, #0
   15990:	beq	159a0 <flatcc_builder_table_add_union@@Base+0x3c>
   15994:	uxtb	r0, r4
   15998:	cmp	r0, #0
   1599c:	beq	15a1c <flatcc_builder_table_add_union@@Base+0xb8>
   159a0:	cmp	r7, #0
   159a4:	beq	159c0 <flatcc_builder_table_add_union@@Base+0x5c>
   159a8:	mov	r0, r5
   159ac:	mov	r1, r6
   159b0:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   159b4:	cmp	r0, #0
   159b8:	beq	15a34 <flatcc_builder_table_add_union@@Base+0xd0>
   159bc:	str	r7, [r0]
   159c0:	sub	r1, r6, #1
   159c4:	mov	r0, r5
   159c8:	mov	r2, #1
   159cc:	mov	r3, #1
   159d0:	bl	15b78 <flatcc_builder_table_add@@Base>
   159d4:	cmp	r0, #0
   159d8:	strbne	r4, [r0]
   159dc:	movne	r0, #0
   159e0:	popne	{r4, r5, r6, r7, fp, pc}
   159e4:	movw	r0, #33533	; 0x82fd
   159e8:	movw	r1, #30578	; 0x7772
   159ec:	movw	r3, #33401	; 0x8279
   159f0:	movw	r2, #1526	; 0x5f6
   159f4:	movt	r0, #1
   159f8:	movt	r1, #1
   159fc:	movt	r3, #1
   15a00:	bl	12498 <__assert_fail@plt>
   15a04:	movw	r0, #32647	; 0x7f87
   15a08:	movw	r1, #30578	; 0x7772
   15a0c:	movw	r3, #33401	; 0x8279
   15a10:	movw	r2, #1518	; 0x5ee
   15a14:	movt	r0, #1
   15a18:	b	159f8 <flatcc_builder_table_add_union@@Base+0x94>
   15a1c:	movw	r0, #33489	; 0x82d1
   15a20:	movw	r1, #30578	; 0x7772
   15a24:	movw	r3, #33401	; 0x8279
   15a28:	movw	r2, #1519	; 0x5ef
   15a2c:	movt	r0, #1
   15a30:	b	159f8 <flatcc_builder_table_add_union@@Base+0x94>
   15a34:	movw	r0, #33523	; 0x82f3
   15a38:	movw	r1, #30578	; 0x7772
   15a3c:	movw	r3, #33401	; 0x8279
   15a40:	movw	r2, #1522	; 0x5f2
   15a44:	movt	r0, #1
   15a48:	b	159f8 <flatcc_builder_table_add_union@@Base+0x94>

00015a4c <flatcc_builder_table_add_offset@@Base>:
   15a4c:	push	{r4, r5, r6, r7, fp, lr}
   15a50:	add	fp, sp, #16
   15a54:	mov	r4, r0
   15a58:	ldr	r0, [r0, #32]
   15a5c:	ldrh	r0, [r0, #14]
   15a60:	cmp	r0, #3
   15a64:	bne	15b28 <flatcc_builder_table_add_offset@@Base+0xdc>
   15a68:	movw	r0, #32765	; 0x7ffd
   15a6c:	mov	r5, r1
   15a70:	cmp	r1, r0
   15a74:	bcs	15b40 <flatcc_builder_table_add_offset@@Base+0xf4>
   15a78:	ldr	r0, [r4, #4]
   15a7c:	add	r1, r0, r5, lsl #1
   15a80:	ldrh	r1, [r1]
   15a84:	cmp	r1, #0
   15a88:	bne	15b58 <flatcc_builder_table_add_offset@@Base+0x10c>
   15a8c:	ldr	r2, [r4, #20]
   15a90:	ldr	r1, [r4, #12]
   15a94:	ldr	r3, [r4, #24]
   15a98:	add	r2, r2, #3
   15a9c:	eor	r1, r1, r5
   15aa0:	bic	r7, r2, #3
   15aa4:	movw	r2, #31153	; 0x79b1
   15aa8:	movt	r2, #40503	; 0x9e37
   15aac:	add	r6, r7, #4
   15ab0:	cmp	r6, r3
   15ab4:	str	r6, [r4, #20]
   15ab8:	mul	r1, r1, r2
   15abc:	eor	r1, r1, #4
   15ac0:	mul	r1, r1, r2
   15ac4:	str	r1, [r4, #12]
   15ac8:	bls	15af0 <flatcc_builder_table_add_offset@@Base+0xa4>
   15acc:	mov	r0, r4
   15ad0:	mov	r1, r6
   15ad4:	movw	r2, #65532	; 0xfffc
   15ad8:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   15adc:	mov	r1, r0
   15ae0:	mov	r0, #0
   15ae4:	cmp	r1, #0
   15ae8:	popne	{r4, r5, r6, r7, fp, pc}
   15aec:	ldr	r0, [r4, #4]
   15af0:	uxth	r1, r5
   15af4:	add	r0, r0, r1, lsl #1
   15af8:	strh	r6, [r0]
   15afc:	ldrh	r0, [r4, #8]
   15b00:	cmp	r0, r1
   15b04:	addls	r0, r5, #1
   15b08:	strhls	r0, [r4, #8]
   15b0c:	ldr	r0, [r4]
   15b10:	add	r1, r0, #2
   15b14:	str	r1, [r4]
   15b18:	strh	r7, [r0]
   15b1c:	ldr	r0, [r4, #16]
   15b20:	add	r0, r0, r7
   15b24:	pop	{r4, r5, r6, r7, fp, pc}
   15b28:	movw	r0, #32647	; 0x7f87
   15b2c:	movw	r1, #30578	; 0x7772
   15b30:	movw	r3, #34427	; 0x867b
   15b34:	movw	r2, #1811	; 0x713
   15b38:	movt	r0, #1
   15b3c:	b	15b6c <flatcc_builder_table_add_offset@@Base+0x120>
   15b40:	movw	r0, #34299	; 0x85fb
   15b44:	movw	r1, #30578	; 0x7772
   15b48:	movw	r3, #34427	; 0x867b
   15b4c:	movw	r2, #1812	; 0x714
   15b50:	movt	r0, #1
   15b54:	b	15b6c <flatcc_builder_table_add_offset@@Base+0x120>
   15b58:	movw	r0, #35096	; 0x8918
   15b5c:	movw	r1, #30578	; 0x7772
   15b60:	movw	r3, #34427	; 0x867b
   15b64:	movw	r2, #1819	; 0x71b
   15b68:	movt	r0, #1
   15b6c:	movt	r1, #1
   15b70:	movt	r3, #1
   15b74:	bl	12498 <__assert_fail@plt>

00015b78 <flatcc_builder_table_add@@Base>:
   15b78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b7c:	add	fp, sp, #24
   15b80:	mov	r4, r0
   15b84:	ldr	r0, [r0, #32]
   15b88:	ldrh	r0, [r0, #14]
   15b8c:	cmp	r0, #3
   15b90:	bne	15c60 <flatcc_builder_table_add@@Base+0xe8>
   15b94:	movw	r0, #32765	; 0x7ffd
   15b98:	mov	r8, r1
   15b9c:	cmp	r1, r0
   15ba0:	bcs	15c78 <flatcc_builder_table_add@@Base+0x100>
   15ba4:	ldrh	r0, [r4, #130]	; 0x82
   15ba8:	cmp	r0, r3
   15bac:	strhcc	r3, [r4, #130]	; 0x82
   15bb0:	ldr	r0, [r4, #4]
   15bb4:	add	r1, r0, r8, lsl #1
   15bb8:	ldrh	r1, [r1]
   15bbc:	cmp	r1, #0
   15bc0:	bne	15c90 <flatcc_builder_table_add@@Base+0x118>
   15bc4:	ldr	r1, [r4, #12]
   15bc8:	movw	r7, #31153	; 0x79b1
   15bcc:	ldr	r6, [r4, #20]
   15bd0:	ldr	r5, [r4, #24]
   15bd4:	movt	r7, #40503	; 0x9e37
   15bd8:	eor	r1, r1, r8
   15bdc:	mul	r1, r1, r7
   15be0:	eor	r1, r1, r2
   15be4:	mul	r1, r1, r7
   15be8:	str	r1, [r4, #12]
   15bec:	add	r1, r3, r6
   15bf0:	rsb	r3, r3, #0
   15bf4:	sub	r1, r1, #1
   15bf8:	and	r6, r1, r3
   15bfc:	add	r1, r6, r2
   15c00:	cmp	r1, r5
   15c04:	str	r1, [r4, #20]
   15c08:	bcc	15c34 <flatcc_builder_table_add@@Base+0xbc>
   15c0c:	add	r1, r1, #1
   15c10:	mov	r0, r4
   15c14:	movw	r2, #65532	; 0xfffc
   15c18:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   15c1c:	mov	r1, r0
   15c20:	mov	r0, #0
   15c24:	cmp	r1, #0
   15c28:	beq	15c30 <flatcc_builder_table_add@@Base+0xb8>
   15c2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c30:	ldr	r0, [r4, #4]
   15c34:	uxth	r1, r8
   15c38:	add	r2, r6, #4
   15c3c:	add	r0, r0, r1, lsl #1
   15c40:	strh	r2, [r0]
   15c44:	ldrh	r0, [r4, #8]
   15c48:	cmp	r0, r1
   15c4c:	addls	r0, r8, #1
   15c50:	strhls	r0, [r4, #8]
   15c54:	ldr	r0, [r4, #16]
   15c58:	add	r0, r0, r6
   15c5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c60:	movw	r0, #32647	; 0x7f87
   15c64:	movw	r1, #30578	; 0x7772
   15c68:	movw	r3, #34225	; 0x85b1
   15c6c:	movw	r2, #1773	; 0x6ed
   15c70:	movt	r0, #1
   15c74:	b	15ca4 <flatcc_builder_table_add@@Base+0x12c>
   15c78:	movw	r0, #34299	; 0x85fb
   15c7c:	movw	r1, #30578	; 0x7772
   15c80:	movw	r3, #34225	; 0x85b1
   15c84:	movw	r2, #1774	; 0x6ee
   15c88:	movt	r0, #1
   15c8c:	b	15ca4 <flatcc_builder_table_add@@Base+0x12c>
   15c90:	movw	r0, #35096	; 0x8918
   15c94:	movw	r1, #30578	; 0x7772
   15c98:	movw	r3, #34225	; 0x85b1
   15c9c:	movw	r2, #1784	; 0x6f8
   15ca0:	movt	r0, #1
   15ca4:	movt	r1, #1
   15ca8:	movt	r3, #1
   15cac:	bl	12498 <__assert_fail@plt>

00015cb0 <flatcc_builder_table_add_union_vector@@Base>:
   15cb0:	push	{r4, r5, r6, r7, fp, lr}
   15cb4:	add	fp, sp, #16
   15cb8:	mov	r6, r0
   15cbc:	ldr	r0, [r0, #32]
   15cc0:	ldrh	r0, [r0, #14]
   15cc4:	cmp	r0, #3
   15cc8:	bne	15d34 <flatcc_builder_table_add_union_vector@@Base+0x84>
   15ccc:	mov	r5, r1
   15cd0:	clz	r1, r3
   15cd4:	cmp	r2, #0
   15cd8:	mov	r0, r2
   15cdc:	mov	r4, r3
   15ce0:	mov	r7, r2
   15ce4:	movwne	r0, #1
   15ce8:	lsr	r1, r1, #5
   15cec:	teq	r1, r0
   15cf0:	beq	15d4c <flatcc_builder_table_add_union_vector@@Base+0x9c>
   15cf4:	cmp	r7, #0
   15cf8:	beq	15d2c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   15cfc:	sub	r1, r5, #1
   15d00:	mov	r0, r6
   15d04:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   15d08:	cmp	r0, #0
   15d0c:	beq	15d64 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   15d10:	str	r7, [r0]
   15d14:	mov	r0, r6
   15d18:	mov	r1, r5
   15d1c:	bl	15a4c <flatcc_builder_table_add_offset@@Base>
   15d20:	cmp	r0, #0
   15d24:	beq	15d78 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   15d28:	str	r4, [r0]
   15d2c:	mov	r0, #0
   15d30:	pop	{r4, r5, r6, r7, fp, pc}
   15d34:	movw	r0, #32647	; 0x7f87
   15d38:	movw	r1, #30578	; 0x7772
   15d3c:	movw	r3, #33545	; 0x8309
   15d40:	mov	r2, #1536	; 0x600
   15d44:	movt	r0, #1
   15d48:	b	15d8c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15d4c:	movw	r0, #33644	; 0x836c
   15d50:	movw	r1, #30578	; 0x7772
   15d54:	movw	r3, #33545	; 0x8309
   15d58:	movw	r2, #1537	; 0x601
   15d5c:	movt	r0, #1
   15d60:	b	15d8c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15d64:	movw	r0, #33523	; 0x82f3
   15d68:	movw	r1, #30578	; 0x7772
   15d6c:	movw	r3, #33545	; 0x8309
   15d70:	movw	r2, #1540	; 0x604
   15d74:	b	15d88 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   15d78:	movw	r0, #33523	; 0x82f3
   15d7c:	movw	r1, #30578	; 0x7772
   15d80:	movw	r3, #33545	; 0x8309
   15d84:	movw	r2, #1544	; 0x608
   15d88:	movt	r0, #1
   15d8c:	movt	r1, #1
   15d90:	movt	r3, #1
   15d94:	bl	12498 <__assert_fail@plt>

00015d98 <flatcc_builder_create_union_vector@@Base>:
   15d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d9c:	add	fp, sp, #28
   15da0:	sub	sp, sp, #20
   15da4:	mov	sl, r0
   15da8:	mov	r0, #0
   15dac:	mov	r9, r3
   15db0:	mov	r7, r2
   15db4:	mov	r4, r1
   15db8:	str	r0, [sl]
   15dbc:	str	r0, [sl, #4]
   15dc0:	mov	r0, r1
   15dc4:	bl	145ec <flatcc_builder_start_offset_vector@@Base>
   15dc8:	cmp	r0, #0
   15dcc:	beq	15dd8 <flatcc_builder_create_union_vector@@Base+0x40>
   15dd0:	sub	sp, fp, #28
   15dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dd8:	mov	r0, r4
   15ddc:	mov	r1, r9
   15de0:	bl	13fc0 <flatcc_builder_extend_offset_vector@@Base>
   15de4:	cmp	r0, #0
   15de8:	beq	15dd0 <flatcc_builder_create_union_vector@@Base+0x38>
   15dec:	ldr	r8, [r4, #20]
   15df0:	ldr	r1, [r4, #24]
   15df4:	add	r0, r8, r9
   15df8:	cmp	r0, r1
   15dfc:	str	r0, [r4, #20]
   15e00:	bcc	15e1c <flatcc_builder_create_union_vector@@Base+0x84>
   15e04:	add	r1, r0, #1
   15e08:	mov	r0, r4
   15e0c:	mvn	r2, #3
   15e10:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   15e14:	cmp	r0, #0
   15e18:	bne	15dd0 <flatcc_builder_create_union_vector@@Base+0x38>
   15e1c:	ldr	r3, [r4, #16]
   15e20:	adds	r2, r3, r8
   15e24:	beq	15dd0 <flatcc_builder_create_union_vector@@Base+0x38>
   15e28:	cmp	r9, #0
   15e2c:	beq	15e5c <flatcc_builder_create_union_vector@@Base+0xc4>
   15e30:	add	r0, r7, #4
   15e34:	mov	r1, r2
   15e38:	mov	r7, r3
   15e3c:	mov	r6, r9
   15e40:	ldrb	r5, [r0, #-4]
   15e44:	subs	r6, r6, #1
   15e48:	strb	r5, [r1], #1
   15e4c:	ldr	r5, [r0]
   15e50:	add	r0, r0, #8
   15e54:	str	r5, [r7], #4
   15e58:	bne	15e40 <flatcc_builder_create_union_vector@@Base+0xa8>
   15e5c:	add	r0, sp, #8
   15e60:	mov	r1, r4
   15e64:	str	r9, [sp]
   15e68:	bl	15ef0 <flatcc_builder_create_union_vector_direct@@Base>
   15e6c:	ldr	r0, [sp, #8]
   15e70:	ldr	r1, [sp, #12]
   15e74:	stm	sl, {r0, r1}
   15e78:	mov	r1, #0
   15e7c:	ldr	r0, [r4, #16]
   15e80:	ldr	r2, [r4, #20]
   15e84:	bl	12468 <memset@plt>
   15e88:	ldr	r0, [r4, #32]
   15e8c:	ldr	r1, [r4, #60]	; 0x3c
   15e90:	ldr	r2, [r4, #64]	; 0x40
   15e94:	ldr	r3, [r0, #8]
   15e98:	str	r3, [r4, #20]
   15e9c:	ldr	r3, [r0]
   15ea0:	str	r3, [r4, #28]
   15ea4:	add	r1, r1, r3
   15ea8:	ldr	r7, [r0, #4]
   15eac:	str	r1, [r4, #16]
   15eb0:	sub	r1, r2, r3
   15eb4:	cmp	r1, r7
   15eb8:	movhi	r1, r7
   15ebc:	str	r1, [r4, #24]
   15ec0:	ldrh	r1, [r4, #130]	; 0x82
   15ec4:	ldrh	r2, [r4, #128]	; 0x80
   15ec8:	cmp	r2, r1
   15ecc:	strhcc	r1, [r4, #128]	; 0x80
   15ed0:	ldrh	r1, [r0, #12]
   15ed4:	sub	r0, r0, #36	; 0x24
   15ed8:	str	r0, [r4, #32]
   15edc:	strh	r1, [r4, #130]	; 0x82
   15ee0:	ldr	r0, [r4, #156]	; 0x9c
   15ee4:	sub	r0, r0, #1
   15ee8:	str	r0, [r4, #156]	; 0x9c
   15eec:	b	15dd0 <flatcc_builder_create_union_vector@@Base+0x38>

00015ef0 <flatcc_builder_create_union_vector_direct@@Base>:
   15ef0:	push	{r4, r5, r6, r7, fp, lr}
   15ef4:	add	fp, sp, #16
   15ef8:	sub	sp, sp, #8
   15efc:	ldr	r7, [fp, #8]
   15f00:	mov	r5, r2
   15f04:	mov	r4, r0
   15f08:	mov	r0, #0
   15f0c:	mov	r6, r1
   15f10:	str	r0, [r4]
   15f14:	str	r0, [r4, #4]
   15f18:	mov	r0, r1
   15f1c:	mov	r1, r3
   15f20:	mov	r3, r5
   15f24:	mov	r2, r7
   15f28:	bl	15698 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15f2c:	cmp	r0, #0
   15f30:	str	r0, [r4, #4]
   15f34:	beq	15f60 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   15f38:	mvn	r0, #0
   15f3c:	mov	r1, #1
   15f40:	mov	r2, r7
   15f44:	mov	r3, #1
   15f48:	str	r1, [sp]
   15f4c:	str	r0, [sp, #4]
   15f50:	mov	r0, r6
   15f54:	mov	r1, r5
   15f58:	bl	15444 <flatcc_builder_create_vector@@Base>
   15f5c:	str	r0, [r4]
   15f60:	sub	sp, fp, #16
   15f64:	pop	{r4, r5, r6, r7, fp, pc}

00015f68 <flatcc_builder_start_union_vector@@Base>:
   15f68:	push	{r4, sl, fp, lr}
   15f6c:	add	fp, sp, #8
   15f70:	mov	r1, #4
   15f74:	mov	r4, r0
   15f78:	bl	1398c <flatcc_builder_start_buffer@@Base+0xbc>
   15f7c:	mov	r1, r0
   15f80:	mvn	r0, #0
   15f84:	cmp	r1, #0
   15f88:	popne	{r4, sl, fp, pc}
   15f8c:	ldr	r0, [r4, #32]
   15f90:	mov	r1, #8
   15f94:	mov	r2, #7
   15f98:	str	r1, [r0, #16]
   15f9c:	mov	r0, #0
   15fa0:	ldr	r1, [r4, #32]
   15fa4:	str	r0, [r1, #20]
   15fa8:	ldr	r1, [r4, #32]
   15fac:	strh	r2, [r1, #14]
   15fb0:	ldr	r2, [r4, #28]
   15fb4:	ldr	r3, [r4, #60]	; 0x3c
   15fb8:	ldr	ip, [r4, #64]	; 0x40
   15fbc:	add	r3, r3, r2
   15fc0:	sub	r2, ip, r2
   15fc4:	str	r3, [r4, #16]
   15fc8:	mvn	r3, #3
   15fcc:	cmn	r2, #4
   15fd0:	movcs	r2, r3
   15fd4:	str	r2, [r4, #24]
   15fd8:	str	r3, [r1, #4]
   15fdc:	pop	{r4, sl, fp, pc}

00015fe0 <flatcc_builder_end_union_vector@@Base>:
   15fe0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15fe4:	add	fp, sp, #24
   15fe8:	sub	sp, sp, #16
   15fec:	mov	r8, r0
   15ff0:	mov	r0, #0
   15ff4:	mov	r4, r1
   15ff8:	str	r0, [r8]
   15ffc:	str	r0, [r8, #4]
   16000:	ldr	r0, [r1, #32]
   16004:	ldrh	r1, [r0, #14]
   16008:	cmp	r1, #7
   1600c:	bne	16124 <flatcc_builder_end_union_vector@@Base+0x144>
   16010:	ldr	r9, [r0, #20]
   16014:	ldr	r7, [r4, #20]
   16018:	ldr	r1, [r4, #24]
   1601c:	add	r0, r9, r9, lsl #2
   16020:	add	r0, r7, r0
   16024:	cmp	r0, r1
   16028:	str	r0, [r4, #20]
   1602c:	bcc	16048 <flatcc_builder_end_union_vector@@Base+0x68>
   16030:	add	r1, r0, #1
   16034:	mov	r0, r4
   16038:	mvn	r2, #3
   1603c:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   16040:	cmp	r0, #0
   16044:	bne	1611c <flatcc_builder_end_union_vector@@Base+0x13c>
   16048:	ldr	r0, [r4, #16]
   1604c:	adds	r3, r0, r7
   16050:	beq	1611c <flatcc_builder_end_union_vector@@Base+0x13c>
   16054:	add	r2, r3, r9, lsl #2
   16058:	cmp	r9, #0
   1605c:	beq	1608c <flatcc_builder_end_union_vector@@Base+0xac>
   16060:	add	r0, r0, #4
   16064:	mov	r1, r2
   16068:	mov	r7, r3
   1606c:	mov	r6, r9
   16070:	ldrb	r5, [r0, #-4]
   16074:	subs	r6, r6, #1
   16078:	strb	r5, [r1], #1
   1607c:	ldr	r5, [r0]
   16080:	add	r0, r0, #8
   16084:	str	r5, [r7], #4
   16088:	bne	16070 <flatcc_builder_end_union_vector@@Base+0x90>
   1608c:	add	r0, sp, #8
   16090:	mov	r1, r4
   16094:	str	r9, [sp]
   16098:	bl	15ef0 <flatcc_builder_create_union_vector_direct@@Base>
   1609c:	ldr	r0, [sp, #8]
   160a0:	ldr	r1, [sp, #12]
   160a4:	stm	r8, {r0, r1}
   160a8:	mov	r1, #0
   160ac:	ldr	r0, [r4, #16]
   160b0:	ldr	r2, [r4, #20]
   160b4:	bl	12468 <memset@plt>
   160b8:	ldr	r0, [r4, #32]
   160bc:	ldr	r1, [r4, #60]	; 0x3c
   160c0:	ldr	r2, [r4, #64]	; 0x40
   160c4:	ldr	r3, [r0, #8]
   160c8:	str	r3, [r4, #20]
   160cc:	ldr	r3, [r0]
   160d0:	str	r3, [r4, #28]
   160d4:	add	r1, r1, r3
   160d8:	ldr	r7, [r0, #4]
   160dc:	str	r1, [r4, #16]
   160e0:	sub	r1, r2, r3
   160e4:	cmp	r1, r7
   160e8:	movhi	r1, r7
   160ec:	str	r1, [r4, #24]
   160f0:	ldrh	r1, [r4, #130]	; 0x82
   160f4:	ldrh	r2, [r4, #128]	; 0x80
   160f8:	cmp	r2, r1
   160fc:	strhcc	r1, [r4, #128]	; 0x80
   16100:	ldrh	r1, [r0, #12]
   16104:	sub	r0, r0, #36	; 0x24
   16108:	str	r0, [r4, #32]
   1610c:	strh	r1, [r4, #130]	; 0x82
   16110:	ldr	r0, [r4, #156]	; 0x9c
   16114:	sub	r0, r0, #1
   16118:	str	r0, [r4, #156]	; 0x9c
   1611c:	sub	sp, fp, #24
   16120:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16124:	movw	r0, #33684	; 0x8394
   16128:	movw	r1, #30578	; 0x7772
   1612c:	movw	r3, #33734	; 0x83c6
   16130:	movw	r2, #1617	; 0x651
   16134:	movt	r0, #1
   16138:	movt	r1, #1
   1613c:	movt	r3, #1
   16140:	bl	12498 <__assert_fail@plt>

00016144 <flatcc_builder_union_vector_count@@Base>:
   16144:	ldr	r0, [r0, #32]
   16148:	ldr	r0, [r0, #20]
   1614c:	bx	lr

00016150 <flatcc_builder_union_vector_edit@@Base>:
   16150:	ldr	r0, [r0, #16]
   16154:	bx	lr

00016158 <flatcc_builder_extend_union_vector@@Base>:
   16158:	push	{r4, r5, fp, lr}
   1615c:	add	fp, sp, #8
   16160:	mov	r4, r0
   16164:	ldr	r0, [r0, #32]
   16168:	ldr	r2, [r0, #20]
   1616c:	adds	r2, r2, r1
   16170:	cmpcc	r2, #536870912	; 0x20000000
   16174:	bcc	16198 <flatcc_builder_extend_union_vector@@Base+0x40>
   16178:	movw	r0, #34849	; 0x8821
   1617c:	movw	r1, #30578	; 0x7772
   16180:	movw	r3, #34876	; 0x883c
   16184:	mov	r2, #892	; 0x37c
   16188:	movt	r0, #1
   1618c:	movt	r1, #1
   16190:	movt	r3, #1
   16194:	bl	12498 <__assert_fail@plt>
   16198:	str	r2, [r0, #20]
   1619c:	ldr	r5, [r4, #20]
   161a0:	ldr	r2, [r4, #24]
   161a4:	add	r0, r5, r1, lsl #3
   161a8:	cmp	r0, r2
   161ac:	str	r0, [r4, #20]
   161b0:	bcc	161d4 <flatcc_builder_extend_union_vector@@Base+0x7c>
   161b4:	add	r1, r0, #1
   161b8:	mov	r0, r4
   161bc:	mvn	r2, #3
   161c0:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   161c4:	mov	r1, r0
   161c8:	mov	r0, #0
   161cc:	cmp	r1, #0
   161d0:	popne	{r4, r5, fp, pc}
   161d4:	ldr	r0, [r4, #16]
   161d8:	add	r0, r0, r5
   161dc:	pop	{r4, r5, fp, pc}

000161e0 <flatcc_builder_truncate_union_vector@@Base>:
   161e0:	push	{fp, lr}
   161e4:	mov	fp, sp
   161e8:	ldr	r2, [r0, #32]
   161ec:	ldrh	r3, [r2, #14]
   161f0:	cmp	r3, #7
   161f4:	bne	1623c <flatcc_builder_truncate_union_vector@@Base+0x5c>
   161f8:	ldr	r3, [r2, #20]
   161fc:	cmp	r3, r1
   16200:	bcc	16254 <flatcc_builder_truncate_union_vector@@Base+0x74>
   16204:	sub	r3, r3, r1
   16208:	str	r3, [r2, #20]
   1620c:	ldr	r2, [r0, #32]
   16210:	ldr	r3, [r0, #20]
   16214:	ldr	ip, [r0, #16]
   16218:	ldr	r2, [r2, #16]
   1621c:	mls	r3, r2, r1, r3
   16220:	mul	r2, r2, r1
   16224:	mov	r1, #0
   16228:	str	r3, [r0, #20]
   1622c:	add	r0, ip, r3
   16230:	bl	12468 <memset@plt>
   16234:	mov	r0, #0
   16238:	pop	{fp, pc}
   1623c:	movw	r0, #33684	; 0x8394
   16240:	movw	r1, #30578	; 0x7772
   16244:	movw	r3, #33817	; 0x8419
   16248:	movw	r2, #1665	; 0x681
   1624c:	movt	r0, #1
   16250:	b	16268 <flatcc_builder_truncate_union_vector@@Base+0x88>
   16254:	movw	r0, #32248	; 0x7df8
   16258:	movw	r1, #30578	; 0x7772
   1625c:	movw	r3, #33817	; 0x8419
   16260:	movw	r2, #1666	; 0x682
   16264:	movt	r0, #1
   16268:	movt	r1, #1
   1626c:	movt	r3, #1
   16270:	bl	12498 <__assert_fail@plt>

00016274 <flatcc_builder_union_vector_push@@Base>:
   16274:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16278:	add	fp, sp, #24
   1627c:	mov	r7, r0
   16280:	ldr	r0, [r0, #32]
   16284:	mov	r5, r1
   16288:	ldrh	r1, [r0, #14]
   1628c:	cmp	r1, #7
   16290:	bne	162f8 <flatcc_builder_union_vector_push@@Base+0x84>
   16294:	ldr	r1, [r0, #20]
   16298:	mov	r6, #0
   1629c:	cmn	r1, #-536870911	; 0xe0000001
   162a0:	beq	162f0 <flatcc_builder_union_vector_push@@Base+0x7c>
   162a4:	add	r1, r1, #1
   162a8:	mov	r8, r2
   162ac:	str	r1, [r0, #20]
   162b0:	ldr	r4, [r7, #20]
   162b4:	ldr	r0, [r7, #24]
   162b8:	add	r1, r4, #8
   162bc:	cmp	r1, r0
   162c0:	str	r1, [r7, #20]
   162c4:	bcc	162e0 <flatcc_builder_union_vector_push@@Base+0x6c>
   162c8:	add	r1, r4, #9
   162cc:	mov	r0, r7
   162d0:	mvn	r2, #3
   162d4:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   162d8:	cmp	r0, #0
   162dc:	bne	162f0 <flatcc_builder_union_vector_push@@Base+0x7c>
   162e0:	ldr	r0, [r7, #16]
   162e4:	adds	r0, r0, r4
   162e8:	movne	r6, r0
   162ec:	stmne	r0, {r5, r8}
   162f0:	mov	r0, r6
   162f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162f8:	movw	r0, #33684	; 0x8394
   162fc:	movw	r1, #30578	; 0x7772
   16300:	movw	r3, #33886	; 0x845e
   16304:	movw	r2, #1677	; 0x68d
   16308:	movt	r0, #1
   1630c:	movt	r1, #1
   16310:	movt	r3, #1
   16314:	bl	12498 <__assert_fail@plt>

00016318 <flatcc_builder_append_union_vector@@Base>:
   16318:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1631c:	add	fp, sp, #24
   16320:	mov	r6, r0
   16324:	ldr	r0, [r0, #32]
   16328:	mov	r8, r1
   1632c:	ldrh	r1, [r0, #14]
   16330:	cmp	r1, #7
   16334:	bne	163d0 <flatcc_builder_append_union_vector@@Base+0xb8>
   16338:	ldr	r1, [r0, #20]
   1633c:	mov	r5, r2
   16340:	adds	r1, r1, r2
   16344:	cmpcc	r1, #536870912	; 0x20000000
   16348:	bcc	1636c <flatcc_builder_append_union_vector@@Base+0x54>
   1634c:	movw	r0, #34849	; 0x8821
   16350:	movw	r1, #30578	; 0x7772
   16354:	movw	r3, #34876	; 0x883c
   16358:	mov	r2, #892	; 0x37c
   1635c:	movt	r0, #1
   16360:	movt	r1, #1
   16364:	movt	r3, #1
   16368:	bl	12498 <__assert_fail@plt>
   1636c:	str	r1, [r0, #20]
   16370:	ldr	r4, [r6, #20]
   16374:	ldr	r1, [r6, #24]
   16378:	add	r0, r4, r5, lsl #3
   1637c:	cmp	r0, r1
   16380:	str	r0, [r6, #20]
   16384:	bcc	163a4 <flatcc_builder_append_union_vector@@Base+0x8c>
   16388:	add	r1, r0, #1
   1638c:	mov	r0, r6
   16390:	mvn	r2, #3
   16394:	bl	16a00 <flatcc_builder_get_emit_context@@Base+0x8>
   16398:	mov	r7, #0
   1639c:	cmp	r0, #0
   163a0:	bne	163c8 <flatcc_builder_append_union_vector@@Base+0xb0>
   163a4:	ldr	r0, [r6, #16]
   163a8:	adds	r7, r0, r4
   163ac:	beq	163c4 <flatcc_builder_append_union_vector@@Base+0xac>
   163b0:	lsl	r2, r5, #3
   163b4:	mov	r0, r7
   163b8:	mov	r1, r8
   163bc:	bl	123e4 <memcpy@plt>
   163c0:	b	163c8 <flatcc_builder_append_union_vector@@Base+0xb0>
   163c4:	mov	r7, #0
   163c8:	mov	r0, r7
   163cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   163d0:	movw	r0, #33684	; 0x8394
   163d4:	movw	r1, #30578	; 0x7772
   163d8:	movw	r3, #33995	; 0x84cb
   163dc:	movw	r2, #1692	; 0x69c
   163e0:	movt	r0, #1
   163e4:	movt	r1, #1
   163e8:	movt	r3, #1
   163ec:	bl	12498 <__assert_fail@plt>

000163f0 <flatcc_builder_create_string@@Base>:
   163f0:	push	{r4, r5, r6, sl, fp, lr}
   163f4:	add	fp, sp, #16
   163f8:	sub	sp, sp, #80	; 0x50
   163fc:	str	r2, [fp, #-20]	; 0xffffffec
   16400:	mvn	r5, r2
   16404:	mov	r6, r0
   16408:	sub	r3, fp, #20
   1640c:	cmp	r2, #0
   16410:	add	lr, sp, #4
   16414:	ldr	ip, [r0, #136]	; 0x88
   16418:	mov	r0, #4
   1641c:	str	r0, [sp, #16]
   16420:	str	r3, [sp, #12]
   16424:	mov	r3, #1
   16428:	str	r0, [sp, #4]
   1642c:	addne	r0, r2, #4
   16430:	str	r3, [sp, #8]
   16434:	strne	r2, [sp, #24]
   16438:	movw	r2, #30048	; 0x7560
   1643c:	movne	r3, #2
   16440:	strne	r1, [sp, #20]
   16444:	strne	r3, [sp, #8]
   16448:	strne	r0, [sp, #4]
   1644c:	movt	r2, #1
   16450:	add	r5, ip, r5
   16454:	and	r5, r5, #3
   16458:	add	r5, r5, #1
   1645c:	add	r1, r0, r5
   16460:	add	r0, lr, r3, lsl #3
   16464:	str	r1, [sp, #4]
   16468:	cmp	r1, #0
   1646c:	str	r2, [r0, #8]
   16470:	add	r2, r3, #1
   16474:	str	r5, [r0, #12]
   16478:	str	r2, [sp, #8]
   1647c:	ble	164d0 <flatcc_builder_create_string@@Base+0xe0>
   16480:	ldr	r0, [r6, #36]	; 0x24
   16484:	ldr	r4, [r6, #44]	; 0x2c
   16488:	sub	r5, ip, r1
   1648c:	str	r1, [sp]
   16490:	add	r1, lr, #8
   16494:	mov	r3, r5
   16498:	blx	r4
   1649c:	cmp	r0, #0
   164a0:	streq	r5, [r6, #136]	; 0x88
   164a4:	moveq	r0, r5
   164a8:	subeq	sp, fp, #16
   164ac:	popeq	{r4, r5, r6, sl, fp, pc}
   164b0:	movw	r0, #35096	; 0x8918
   164b4:	movw	r1, #30578	; 0x7772
   164b8:	movw	r3, #34775	; 0x87d7
   164bc:	movw	r2, #651	; 0x28b
   164c0:	movt	r0, #1
   164c4:	movt	r1, #1
   164c8:	movt	r3, #1
   164cc:	bl	12498 <__assert_fail@plt>
   164d0:	movw	r0, #35096	; 0x8918
   164d4:	movw	r1, #30578	; 0x7772
   164d8:	movw	r3, #34775	; 0x87d7
   164dc:	movw	r2, #647	; 0x287
   164e0:	movt	r0, #1
   164e4:	movt	r1, #1
   164e8:	movt	r3, #1
   164ec:	bl	12498 <__assert_fail@plt>

000164f0 <flatcc_builder_create_string_str@@Base>:
   164f0:	push	{r4, r5, fp, lr}
   164f4:	add	fp, sp, #8
   164f8:	mov	r5, r0
   164fc:	mov	r0, r1
   16500:	mov	r4, r1
   16504:	bl	12450 <strlen@plt>
   16508:	mov	r2, r0
   1650c:	mov	r0, r5
   16510:	mov	r1, r4
   16514:	pop	{r4, r5, fp, lr}
   16518:	b	163f0 <flatcc_builder_create_string@@Base>

0001651c <flatcc_builder_create_string_strn@@Base>:
   1651c:	push	{r4, r5, r6, sl, fp, lr}
   16520:	add	fp, sp, #16
   16524:	mov	r6, r0
   16528:	mov	r5, r1
   1652c:	mov	r0, r1
   16530:	mov	r1, #0
   16534:	mov	r4, r2
   16538:	bl	12474 <memchr@plt>
   1653c:	cmp	r0, #0
   16540:	mov	r1, r5
   16544:	subne	r4, r0, r5
   16548:	mov	r0, r6
   1654c:	mov	r2, r4
   16550:	pop	{r4, r5, r6, sl, fp, lr}
   16554:	b	163f0 <flatcc_builder_create_string@@Base>

00016558 <flatcc_builder_end_string@@Base>:
   16558:	push	{r4, r5, fp, lr}
   1655c:	add	fp, sp, #8
   16560:	mov	r4, r0
   16564:	ldr	r0, [r0, #32]
   16568:	ldrh	r1, [r0, #14]
   1656c:	cmp	r1, #6
   16570:	bne	16618 <flatcc_builder_end_string@@Base+0xc0>
   16574:	ldr	r2, [r0, #20]
   16578:	ldr	r0, [r4, #20]
   1657c:	cmp	r2, r0
   16580:	bne	16630 <flatcc_builder_end_string@@Base+0xd8>
   16584:	ldr	r1, [r4, #16]
   16588:	mov	r0, r4
   1658c:	bl	163f0 <flatcc_builder_create_string@@Base>
   16590:	mov	r5, r0
   16594:	cmp	r0, #0
   16598:	beq	16610 <flatcc_builder_end_string@@Base+0xb8>
   1659c:	ldr	r0, [r4, #16]
   165a0:	ldr	r2, [r4, #20]
   165a4:	mov	r1, #0
   165a8:	bl	12468 <memset@plt>
   165ac:	ldr	r0, [r4, #32]
   165b0:	ldr	r1, [r4, #60]	; 0x3c
   165b4:	ldr	ip, [r4, #64]	; 0x40
   165b8:	ldr	r3, [r0, #8]
   165bc:	str	r3, [r4, #20]
   165c0:	ldr	r3, [r0]
   165c4:	str	r3, [r4, #28]
   165c8:	add	r1, r1, r3
   165cc:	ldr	r2, [r0, #4]
   165d0:	str	r1, [r4, #16]
   165d4:	sub	r1, ip, r3
   165d8:	cmp	r1, r2
   165dc:	movhi	r1, r2
   165e0:	str	r1, [r4, #24]
   165e4:	ldrh	r1, [r4, #130]	; 0x82
   165e8:	ldrh	r2, [r4, #128]	; 0x80
   165ec:	cmp	r2, r1
   165f0:	strhcc	r1, [r4, #128]	; 0x80
   165f4:	ldrh	r1, [r0, #12]
   165f8:	sub	r0, r0, #36	; 0x24
   165fc:	str	r0, [r4, #32]
   16600:	strh	r1, [r4, #130]	; 0x82
   16604:	ldr	r0, [r4, #156]	; 0x9c
   16608:	sub	r0, r0, #1
   1660c:	str	r0, [r4, #156]	; 0x9c
   16610:	mov	r0, r5
   16614:	pop	{r4, r5, fp, pc}
   16618:	movw	r0, #31895	; 0x7c97
   1661c:	movw	r1, #30578	; 0x7772
   16620:	movw	r3, #34122	; 0x854a
   16624:	movw	r2, #1732	; 0x6c4
   16628:	movt	r0, #1
   1662c:	b	16644 <flatcc_builder_end_string@@Base+0xec>
   16630:	movw	r0, #34189	; 0x858d
   16634:	movw	r1, #30578	; 0x7772
   16638:	movw	r3, #34122	; 0x854a
   1663c:	movw	r2, #1733	; 0x6c5
   16640:	movt	r0, #1
   16644:	movt	r1, #1
   16648:	movt	r3, #1
   1664c:	bl	12498 <__assert_fail@plt>

00016650 <flatcc_builder_string_edit@@Base>:
   16650:	ldr	r0, [r0, #16]
   16654:	bx	lr

00016658 <flatcc_builder_string_len@@Base>:
   16658:	ldr	r0, [r0, #32]
   1665c:	ldr	r0, [r0, #20]
   16660:	bx	lr

00016664 <flatcc_builder_table_edit@@Base>:
   16664:	push	{fp, lr}
   16668:	mov	fp, sp
   1666c:	ldr	r2, [r0, #32]
   16670:	ldrh	r2, [r2, #14]
   16674:	cmp	r2, #3
   16678:	ldreq	r2, [r0, #16]
   1667c:	ldreq	r0, [r0, #20]
   16680:	addeq	r0, r2, r0
   16684:	subeq	r0, r0, r1
   16688:	popeq	{fp, pc}
   1668c:	movw	r0, #32647	; 0x7f87
   16690:	movw	r1, #30578	; 0x7772
   16694:	movw	r3, #34367	; 0x863f
   16698:	movw	r2, #1794	; 0x702
   1669c:	movt	r0, #1
   166a0:	movt	r1, #1
   166a4:	movt	r3, #1
   166a8:	bl	12498 <__assert_fail@plt>

000166ac <flatcc_builder_table_add_copy@@Base>:
   166ac:	push	{r4, r5, r6, sl, fp, lr}
   166b0:	add	fp, sp, #16
   166b4:	mov	r4, r3
   166b8:	ldr	r3, [fp, #8]
   166bc:	mov	r5, r2
   166c0:	mov	r2, r4
   166c4:	bl	15b78 <flatcc_builder_table_add@@Base>
   166c8:	mov	r6, r0
   166cc:	cmp	r0, #0
   166d0:	beq	166e4 <flatcc_builder_table_add_copy@@Base+0x38>
   166d4:	mov	r0, r6
   166d8:	mov	r1, r5
   166dc:	mov	r2, r4
   166e0:	bl	123e4 <memcpy@plt>
   166e4:	mov	r0, r6
   166e8:	pop	{r4, r5, r6, sl, fp, pc}

000166ec <flatcc_builder_push_buffer_alignment@@Base>:
   166ec:	ldrh	r1, [r0, #128]	; 0x80
   166f0:	mov	r2, #4
   166f4:	strh	r2, [r0, #128]	; 0x80
   166f8:	mov	r0, r1
   166fc:	bx	lr

00016700 <flatcc_builder_pop_buffer_alignment@@Base>:
   16700:	ldrh	r2, [r0, #128]	; 0x80
   16704:	cmp	r2, r1
   16708:	strhcc	r1, [r0, #128]	; 0x80
   1670c:	bx	lr

00016710 <flatcc_builder_get_buffer_alignment@@Base>:
   16710:	ldrh	r0, [r0, #128]	; 0x80
   16714:	bx	lr

00016718 <flatcc_builder_set_vtable_clustering@@Base>:
   16718:	clz	r1, r1
   1671c:	lsr	r1, r1, #5
   16720:	str	r1, [r0, #180]	; 0xb4
   16724:	bx	lr

00016728 <flatcc_builder_set_block_align@@Base>:
   16728:	strh	r1, [r0, #132]	; 0x84
   1672c:	bx	lr

00016730 <flatcc_builder_get_level@@Base>:
   16730:	ldr	r0, [r0, #156]	; 0x9c
   16734:	bx	lr

00016738 <flatcc_builder_set_max_level@@Base>:
   16738:	str	r1, [r0, #176]	; 0xb0
   1673c:	ldr	r2, [r0, #160]	; 0xa0
   16740:	cmp	r2, r1
   16744:	strlt	r1, [r0, #160]	; 0xa0
   16748:	bx	lr

0001674c <flatcc_builder_get_buffer_size@@Base>:
   1674c:	ldr	r1, [r0, #136]	; 0x88
   16750:	ldr	r0, [r0, #140]	; 0x8c
   16754:	sub	r0, r0, r1
   16758:	bx	lr

0001675c <flatcc_builder_get_buffer_start@@Base>:
   1675c:	ldr	r0, [r0, #136]	; 0x88
   16760:	bx	lr

00016764 <flatcc_builder_get_buffer_end@@Base>:
   16764:	ldr	r0, [r0, #140]	; 0x8c
   16768:	bx	lr

0001676c <flatcc_builder_set_vtable_cache_limit@@Base>:
   1676c:	str	r1, [r0, #172]	; 0xac
   16770:	bx	lr

00016774 <flatcc_builder_set_identifier@@Base>:
   16774:	movw	r2, #30048	; 0x7560
   16778:	cmp	r1, #0
   1677c:	movt	r2, #1
   16780:	movne	r2, r1
   16784:	ldr	r1, [r2]
   16788:	str	r1, [r0, #168]	; 0xa8
   1678c:	bx	lr

00016790 <flatcc_builder_get_type@@Base>:
   16790:	ldr	r0, [r0, #32]
   16794:	cmp	r0, #0
   16798:	ldrhne	r0, [r0, #14]
   1679c:	moveq	r0, #0
   167a0:	bx	lr

000167a4 <flatcc_builder_get_type_at@@Base>:
   167a4:	mov	r2, r0
   167a8:	mov	r0, #0
   167ac:	cmp	r1, #1
   167b0:	blt	167d4 <flatcc_builder_get_type_at@@Base+0x30>
   167b4:	ldr	r3, [r2, #156]	; 0x9c
   167b8:	cmp	r3, r1
   167bc:	bxlt	lr
   167c0:	sub	r0, r1, r3
   167c4:	ldr	r1, [r2, #32]
   167c8:	add	r0, r0, r0, lsl #3
   167cc:	add	r0, r1, r0, lsl #2
   167d0:	ldrh	r0, [r0, #14]
   167d4:	bx	lr

000167d8 <flatcc_builder_get_direct_buffer@@Base>:
   167d8:	ldr	r2, [r0, #184]	; 0xb8
   167dc:	cmp	r2, #0
   167e0:	beq	167f4 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   167e4:	ldr	r2, [r0, #188]	; 0xbc
   167e8:	ldr	r3, [r0, #192]	; 0xc0
   167ec:	cmp	r2, r3
   167f0:	beq	16804 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   167f4:	mov	r0, #0
   167f8:	cmp	r1, #0
   167fc:	strne	r0, [r1]
   16800:	bx	lr
   16804:	cmp	r1, #0
   16808:	ldrne	r2, [r0, #212]	; 0xd4
   1680c:	strne	r2, [r1]
   16810:	ldr	r0, [r0, #196]	; 0xc4
   16814:	bx	lr

00016818 <flatcc_builder_copy_buffer@@Base>:
   16818:	push	{fp, lr}
   1681c:	mov	fp, sp
   16820:	ldr	r3, [r0, #184]	; 0xb8
   16824:	cmp	r3, #0
   16828:	beq	1685c <flatcc_builder_copy_buffer@@Base+0x44>
   1682c:	add	r0, r0, #188	; 0xbc
   16830:	bl	16f24 <flatcc_emitter_copy_buffer@@Base>
   16834:	cmp	r0, #0
   16838:	popne	{fp, pc}
   1683c:	movw	r0, #28949	; 0x7115
   16840:	movw	r1, #30578	; 0x7772
   16844:	movw	r3, #34506	; 0x86ca
   16848:	movw	r2, #1926	; 0x786
   1684c:	movt	r0, #1
   16850:	movt	r1, #1
   16854:	movt	r3, #1
   16858:	bl	12498 <__assert_fail@plt>
   1685c:	mov	r0, #0
   16860:	pop	{fp, pc}

00016864 <flatcc_builder_finalize_buffer@@Base>:
   16864:	push	{r4, r5, r6, sl, fp, lr}
   16868:	add	fp, sp, #16
   1686c:	mov	r4, r0
   16870:	ldr	r0, [r0, #136]	; 0x88
   16874:	cmp	r1, #0
   16878:	ldr	r2, [r4, #140]	; 0x8c
   1687c:	sub	r5, r2, r0
   16880:	mov	r0, r5
   16884:	strne	r5, [r1]
   16888:	bl	12420 <malloc@plt>
   1688c:	cmp	r0, #0
   16890:	beq	168d4 <flatcc_builder_finalize_buffer@@Base+0x70>
   16894:	mov	r6, r0
   16898:	mov	r0, r4
   1689c:	mov	r2, r5
   168a0:	mov	r1, r6
   168a4:	bl	16818 <flatcc_builder_copy_buffer@@Base>
   168a8:	cmp	r0, #0
   168ac:	movne	r0, r6
   168b0:	popne	{r4, r5, r6, sl, fp, pc}
   168b4:	movw	r0, #35096	; 0x8918
   168b8:	movw	r1, #30578	; 0x7772
   168bc:	movw	r3, #34575	; 0x870f
   168c0:	movw	r2, #1948	; 0x79c
   168c4:	movt	r0, #1
   168c8:	movt	r1, #1
   168cc:	movt	r3, #1
   168d0:	bl	12498 <__assert_fail@plt>
   168d4:	movw	r0, #35096	; 0x8918
   168d8:	movw	r1, #30578	; 0x7772
   168dc:	movw	r3, #34575	; 0x870f
   168e0:	movw	r2, #1944	; 0x798
   168e4:	movt	r0, #1
   168e8:	movt	r1, #1
   168ec:	movt	r3, #1
   168f0:	bl	12498 <__assert_fail@plt>

000168f4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   168f4:	push	{r4, r5, r6, r7, fp, lr}
   168f8:	add	fp, sp, #16
   168fc:	sub	sp, sp, #8
   16900:	mov	r5, r0
   16904:	mov	r4, r1
   16908:	ldr	r0, [r0, #136]	; 0x88
   1690c:	ldr	r1, [r5, #140]	; 0x8c
   16910:	cmp	r4, #0
   16914:	sub	r0, r1, r0
   16918:	mov	r1, #0
   1691c:	strne	r0, [r4]
   16920:	ldrh	r2, [r5, #128]	; 0x80
   16924:	str	r1, [sp, #4]
   16928:	add	r0, r0, r2
   1692c:	cmp	r2, #4
   16930:	mov	r1, r2
   16934:	rsb	r2, r2, #0
   16938:	sub	r0, r0, #1
   1693c:	movls	r1, #4
   16940:	and	r7, r0, r2
   16944:	add	r0, sp, #4
   16948:	mov	r2, r7
   1694c:	bl	1245c <posix_memalign@plt>
   16950:	ldr	r6, [sp, #4]
   16954:	cmp	r0, #0
   16958:	cmpne	r6, #0
   1695c:	bne	16980 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   16960:	cmp	r6, #0
   16964:	beq	16988 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   16968:	mov	r0, r5
   1696c:	mov	r1, r6
   16970:	mov	r2, r7
   16974:	bl	16818 <flatcc_builder_copy_buffer@@Base>
   16978:	cmp	r0, #0
   1697c:	bne	16994 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   16980:	mov	r0, r6
   16984:	bl	123d8 <free@plt>
   16988:	mov	r6, #0
   1698c:	cmp	r4, #0
   16990:	strne	r6, [r4]
   16994:	mov	r0, r6
   16998:	sub	sp, fp, #16
   1699c:	pop	{r4, r5, r6, r7, fp, pc}

000169a0 <flatcc_builder_aligned_alloc@@Base>:
   169a0:	push	{fp, lr}
   169a4:	mov	fp, sp
   169a8:	sub	sp, sp, #8
   169ac:	mov	r2, r1
   169b0:	mov	r1, r0
   169b4:	mov	r0, #0
   169b8:	cmp	r1, #4
   169bc:	str	r0, [sp, #4]
   169c0:	add	r0, sp, #4
   169c4:	movls	r1, #4
   169c8:	bl	1245c <posix_memalign@plt>
   169cc:	mov	r1, r0
   169d0:	ldr	r0, [sp, #4]
   169d4:	cmp	r1, #0
   169d8:	cmpne	r0, #0
   169dc:	beq	169ec <flatcc_builder_aligned_alloc@@Base+0x4c>
   169e0:	bl	123d8 <free@plt>
   169e4:	mov	r0, #0
   169e8:	str	r0, [sp, #4]
   169ec:	mov	sp, fp
   169f0:	pop	{fp, pc}

000169f4 <flatcc_builder_aligned_free@@Base>:
   169f4:	b	123d8 <free@plt>

000169f8 <flatcc_builder_get_emit_context@@Base>:
   169f8:	ldr	r0, [r0, #36]	; 0x24
   169fc:	bx	lr
   16a00:	push	{r4, r5, r6, sl, fp, lr}
   16a04:	add	fp, sp, #16
   16a08:	sub	sp, sp, #8
   16a0c:	mov	r6, r2
   16a10:	ldr	r2, [r0, #28]
   16a14:	mov	r5, r0
   16a18:	ldr	r0, [r0, #40]	; 0x28
   16a1c:	mov	r3, #1
   16a20:	ldr	r4, [r5, #48]	; 0x30
   16a24:	str	r3, [sp]
   16a28:	mov	r3, #1
   16a2c:	add	r2, r2, r1
   16a30:	add	r1, r5, #60	; 0x3c
   16a34:	blx	r4
   16a38:	mov	r1, r0
   16a3c:	mvn	r0, #0
   16a40:	cmp	r1, #0
   16a44:	bne	16a78 <flatcc_builder_get_emit_context@@Base+0x80>
   16a48:	ldr	r0, [r5, #28]
   16a4c:	ldr	r2, [r5, #60]	; 0x3c
   16a50:	ldr	r3, [r5, #64]	; 0x40
   16a54:	ldr	r1, [r5, #32]
   16a58:	add	r2, r2, r0
   16a5c:	sub	r0, r3, r0
   16a60:	cmp	r0, r6
   16a64:	str	r2, [r5, #16]
   16a68:	movhi	r0, r6
   16a6c:	str	r0, [r5, #24]
   16a70:	mov	r0, #0
   16a74:	str	r6, [r1, #4]
   16a78:	sub	sp, fp, #16
   16a7c:	pop	{r4, r5, r6, sl, fp, pc}

00016a80 <flatcc_emitter_recycle_page@@Base>:
   16a80:	ldr	r3, [r0]
   16a84:	mov	r2, r0
   16a88:	mvn	r0, #0
   16a8c:	cmp	r3, r1
   16a90:	beq	16ad0 <flatcc_emitter_recycle_page@@Base+0x50>
   16a94:	ldr	r2, [r2, #4]
   16a98:	cmp	r2, r1
   16a9c:	bxeq	lr
   16aa0:	ldr	r0, [r1, #2944]	; 0xb80
   16aa4:	ldr	r2, [r1, #2948]	; 0xb84
   16aa8:	str	r2, [r0, #2948]	; 0xb84
   16aac:	ldr	r2, [r1, #2948]	; 0xb84
   16ab0:	str	r0, [r2, #2944]	; 0xb80
   16ab4:	ldr	r0, [r3, #2948]	; 0xb84
   16ab8:	str	r3, [r1, #2944]	; 0xb80
   16abc:	str	r0, [r1, #2948]	; 0xb84
   16ac0:	str	r1, [r0, #2944]	; 0xb80
   16ac4:	ldr	r0, [r1, #2944]	; 0xb80
   16ac8:	str	r1, [r0, #2948]	; 0xb84
   16acc:	mov	r0, #0
   16ad0:	bx	lr

00016ad4 <flatcc_emitter_reset@@Base>:
   16ad4:	push	{r4, sl, fp, lr}
   16ad8:	add	fp, sp, #8
   16adc:	ldr	r1, [r0]
   16ae0:	cmp	r1, #0
   16ae4:	beq	16b9c <flatcc_emitter_reset@@Base+0xc8>
   16ae8:	mov	r4, r0
   16aec:	add	r2, r1, #1472	; 0x5c0
   16af0:	mov	r0, #1472	; 0x5c0
   16af4:	mov	r3, #0
   16af8:	stmib	r4, {r1, r2}
   16afc:	str	r0, [r4, #12]
   16b00:	str	r2, [r4, #16]
   16b04:	str	r0, [r4, #20]
   16b08:	movw	r0, #64064	; 0xfa40
   16b0c:	movt	r0, #65535	; 0xffff
   16b10:	str	r0, [r1, #2952]	; 0xb88
   16b14:	ldr	r2, [r4, #32]
   16b18:	ldr	r0, [r4, #24]
   16b1c:	cmp	r2, #0
   16b20:	moveq	r2, r0
   16b24:	streq	r0, [r4, #32]
   16b28:	str	r3, [r4, #24]
   16b2c:	add	r2, r2, r2, lsl #1
   16b30:	lsr	r2, r2, #2
   16b34:	add	r0, r2, r0, lsr #2
   16b38:	str	r0, [r4, #32]
   16b3c:	ldr	r2, [r4, #28]
   16b40:	cmp	r2, r0, lsl #1
   16b44:	bls	16b9c <flatcc_emitter_reset@@Base+0xc8>
   16b48:	mov	r2, r1
   16b4c:	ldr	r0, [r2, #2944]!	; 0xb80
   16b50:	cmp	r0, r1
   16b54:	popeq	{r4, sl, fp, pc}
   16b58:	ldr	r3, [r0, #2944]	; 0xb80
   16b5c:	str	r3, [r2]
   16b60:	ldr	r2, [r0, #2944]	; 0xb80
   16b64:	str	r1, [r2, #2948]	; 0xb84
   16b68:	bl	123d8 <free@plt>
   16b6c:	ldr	r0, [r4, #28]
   16b70:	ldr	r1, [r4, #32]
   16b74:	sub	r0, r0, #2944	; 0xb80
   16b78:	cmp	r0, r1, lsl #1
   16b7c:	str	r0, [r4, #28]
   16b80:	bls	16b9c <flatcc_emitter_reset@@Base+0xc8>
   16b84:	ldr	r1, [r4, #4]
   16b88:	ldr	r3, [r4]
   16b8c:	mov	r2, r1
   16b90:	ldr	r0, [r2, #2944]!	; 0xb80
   16b94:	cmp	r0, r3
   16b98:	bne	16b58 <flatcc_emitter_reset@@Base+0x84>
   16b9c:	pop	{r4, sl, fp, pc}

00016ba0 <flatcc_emitter_clear@@Base>:
   16ba0:	push	{r4, r5, r6, sl, fp, lr}
   16ba4:	add	fp, sp, #16
   16ba8:	ldr	r5, [r0]
   16bac:	cmp	r5, #0
   16bb0:	beq	16c00 <flatcc_emitter_clear@@Base+0x60>
   16bb4:	mov	r4, r0
   16bb8:	ldr	r0, [r5, #2948]	; 0xb84
   16bbc:	mov	r6, #0
   16bc0:	str	r6, [r0, #2944]	; 0xb80
   16bc4:	ldr	r0, [r5, #2944]	; 0xb80
   16bc8:	cmp	r0, #0
   16bcc:	beq	16be0 <flatcc_emitter_clear@@Base+0x40>
   16bd0:	mov	r5, r0
   16bd4:	ldr	r0, [r0, #2948]	; 0xb84
   16bd8:	bl	123d8 <free@plt>
   16bdc:	b	16bc4 <flatcc_emitter_clear@@Base+0x24>
   16be0:	mov	r0, r5
   16be4:	bl	123d8 <free@plt>
   16be8:	vmov.i32	q8, #0	; 0x00000000
   16bec:	add	r0, r4, #16
   16bf0:	vst1.32	{d16-d17}, [r0]
   16bf4:	mov	r0, #32
   16bf8:	vst1.32	{d16-d17}, [r4], r0
   16bfc:	str	r6, [r4]
   16c00:	pop	{r4, r5, r6, sl, fp, pc}

00016c04 <flatcc_emitter@@Base>:
   16c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c08:	add	fp, sp, #28
   16c0c:	sub	sp, sp, #4
   16c10:	mov	r6, r0
   16c14:	mov	r7, r1
   16c18:	ldr	r0, [r0, #24]
   16c1c:	ldr	r1, [fp, #8]
   16c20:	mov	r4, r2
   16c24:	cmn	r3, #1
   16c28:	mov	r9, r6
   16c2c:	add	r0, r0, r1
   16c30:	str	r0, [r6, #24]
   16c34:	ble	16d70 <flatcc_emitter@@Base+0x16c>
   16c38:	ldr	r0, [r9, #20]!
   16c3c:	cmp	r0, r1
   16c40:	bcs	16ec0 <flatcc_emitter@@Base+0x2bc>
   16c44:	mov	r8, #0
   16c48:	cmp	r4, #0
   16c4c:	beq	16f18 <flatcc_emitter@@Base+0x314>
   16c50:	movw	sl, #64064	; 0xfa40
   16c54:	movt	sl, #65535	; 0xffff
   16c58:	ldr	r8, [r7, #4]
   16c5c:	cmp	r8, #0
   16c60:	beq	16d5c <flatcc_emitter@@Base+0x158>
   16c64:	ldr	r9, [r7]
   16c68:	cmp	r8, r0
   16c6c:	mov	r5, r8
   16c70:	bls	16d28 <flatcc_emitter@@Base+0x124>
   16c74:	mov	r5, r0
   16c78:	cmp	r5, #0
   16c7c:	bne	16d28 <flatcc_emitter@@Base+0x124>
   16c80:	ldr	r5, [r6, #4]
   16c84:	cmp	r5, #0
   16c88:	beq	16c9c <flatcc_emitter@@Base+0x98>
   16c8c:	ldr	r0, [r5, #2944]	; 0xb80
   16c90:	ldr	r1, [r6]
   16c94:	cmp	r0, r1
   16c98:	bne	16cd4 <flatcc_emitter@@Base+0xd0>
   16c9c:	movw	r0, #2956	; 0xb8c
   16ca0:	bl	12420 <malloc@plt>
   16ca4:	cmp	r0, #0
   16ca8:	beq	16ed0 <flatcc_emitter@@Base+0x2cc>
   16cac:	ldr	r1, [r6, #28]
   16cb0:	cmp	r5, #0
   16cb4:	add	r1, r1, #2944	; 0xb80
   16cb8:	str	r1, [r6, #28]
   16cbc:	beq	16cf8 <flatcc_emitter@@Base+0xf4>
   16cc0:	ldr	r1, [r6]
   16cc4:	str	r1, [r0, #2944]	; 0xb80
   16cc8:	str	r5, [r0, #2948]	; 0xb84
   16ccc:	str	r0, [r1, #2948]	; 0xb84
   16cd0:	str	r0, [r5, #2944]	; 0xb80
   16cd4:	mov	r5, #2944	; 0xb80
   16cd8:	str	r0, [r6, #4]
   16cdc:	str	r0, [r6, #16]
   16ce0:	str	r5, [r6, #20]
   16ce4:	ldr	r1, [r0, #2948]	; 0xb84
   16ce8:	ldr	r1, [r1, #2952]	; 0xb88
   16cec:	add	r1, r1, #2944	; 0xb80
   16cf0:	str	r1, [r0, #2952]	; 0xb88
   16cf4:	b	16d1c <flatcc_emitter@@Base+0x118>
   16cf8:	mov	r5, #1472	; 0x5c0
   16cfc:	add	r1, r0, #1472	; 0x5c0
   16d00:	str	r0, [r6]
   16d04:	stmib	r6, {r0, r1, r5}
   16d08:	str	r1, [r6, #16]
   16d0c:	str	r5, [r6, #20]
   16d10:	str	r0, [r0, #2944]	; 0xb80
   16d14:	str	r0, [r0, #2948]	; 0xb84
   16d18:	str	sl, [r0, #2952]	; 0xb88
   16d1c:	cmp	r8, r5
   16d20:	bhi	16c78 <flatcc_emitter@@Base+0x74>
   16d24:	mov	r5, r8
   16d28:	ldr	r0, [r6, #16]
   16d2c:	mov	r1, r9
   16d30:	mov	r2, r5
   16d34:	bl	123e4 <memcpy@plt>
   16d38:	ldr	r0, [r6, #16]
   16d3c:	ldr	r1, [r6, #20]
   16d40:	add	r9, r9, r5
   16d44:	subs	r8, r8, r5
   16d48:	add	r2, r0, r5
   16d4c:	sub	r0, r1, r5
   16d50:	str	r2, [r6, #16]
   16d54:	str	r0, [r6, #20]
   16d58:	bne	16c68 <flatcc_emitter@@Base+0x64>
   16d5c:	subs	r4, r4, #1
   16d60:	add	r7, r7, #8
   16d64:	bne	16c58 <flatcc_emitter@@Base+0x54>
   16d68:	mov	r8, #0
   16d6c:	b	16f18 <flatcc_emitter@@Base+0x314>
   16d70:	ldr	r0, [r9, #12]!
   16d74:	cmp	r0, r1
   16d78:	bcs	16ed8 <flatcc_emitter@@Base+0x2d4>
   16d7c:	mov	r8, #0
   16d80:	cmp	r4, #0
   16d84:	beq	16f18 <flatcc_emitter@@Base+0x314>
   16d88:	add	r0, r7, r4, lsl #3
   16d8c:	ldr	sl, [r0, #-4]
   16d90:	sub	r1, r0, #8
   16d94:	str	r1, [sp]
   16d98:	cmp	sl, #0
   16d9c:	beq	16eb0 <flatcc_emitter@@Base+0x2ac>
   16da0:	ldr	r0, [sp]
   16da4:	ldr	r0, [r0]
   16da8:	add	r7, r0, sl
   16dac:	ldr	r1, [r9]
   16db0:	cmp	sl, r1
   16db4:	bls	16e80 <flatcc_emitter@@Base+0x27c>
   16db8:	cmp	r1, #0
   16dbc:	mov	r5, r1
   16dc0:	bne	16e84 <flatcc_emitter@@Base+0x280>
   16dc4:	ldr	r5, [r6]
   16dc8:	cmp	r5, #0
   16dcc:	beq	16df0 <flatcc_emitter@@Base+0x1ec>
   16dd0:	ldr	r0, [r5, #2948]	; 0xb84
   16dd4:	ldr	r1, [r6, #4]
   16dd8:	cmp	r0, r1
   16ddc:	beq	16df0 <flatcc_emitter@@Base+0x1ec>
   16de0:	ldr	r1, [r5, #2952]	; 0xb88
   16de4:	sub	r1, r1, #2944	; 0xb80
   16de8:	str	r1, [r0, #2952]	; 0xb88
   16dec:	b	16e28 <flatcc_emitter@@Base+0x224>
   16df0:	movw	r0, #2956	; 0xb8c
   16df4:	bl	12420 <malloc@plt>
   16df8:	cmp	r0, #0
   16dfc:	beq	16ed0 <flatcc_emitter@@Base+0x2cc>
   16e00:	ldr	r1, [r6, #28]
   16e04:	cmp	r5, #0
   16e08:	add	r1, r1, #2944	; 0xb80
   16e0c:	str	r1, [r6, #28]
   16e10:	beq	16e4c <flatcc_emitter@@Base+0x248>
   16e14:	ldr	r1, [r6, #4]
   16e18:	str	r5, [r0, #2944]	; 0xb80
   16e1c:	str	r1, [r0, #2948]	; 0xb84
   16e20:	str	r0, [r5, #2948]	; 0xb84
   16e24:	str	r0, [r1, #2944]	; 0xb80
   16e28:	mov	r1, #2944	; 0xb80
   16e2c:	add	r2, r0, #2944	; 0xb80
   16e30:	str	r0, [r6]
   16e34:	str	r2, [r6, #8]
   16e38:	str	r1, [r6, #12]
   16e3c:	ldr	r2, [r0, #2944]	; 0xb80
   16e40:	ldr	r2, [r2, #2952]	; 0xb88
   16e44:	sub	r2, r2, #2944	; 0xb80
   16e48:	b	16e78 <flatcc_emitter@@Base+0x274>
   16e4c:	add	r2, r0, #1472	; 0x5c0
   16e50:	mov	r1, #1472	; 0x5c0
   16e54:	str	r0, [r6]
   16e58:	stmib	r6, {r0, r2}
   16e5c:	str	r1, [r6, #12]
   16e60:	str	r2, [r6, #16]
   16e64:	movw	r2, #64064	; 0xfa40
   16e68:	str	r1, [r6, #20]
   16e6c:	str	r0, [r0, #2944]	; 0xb80
   16e70:	str	r0, [r0, #2948]	; 0xb84
   16e74:	movt	r2, #65535	; 0xffff
   16e78:	str	r2, [r0, #2952]	; 0xb88
   16e7c:	b	16db0 <flatcc_emitter@@Base+0x1ac>
   16e80:	mov	r5, sl
   16e84:	sub	r0, r1, r5
   16e88:	sub	r7, r7, r5
   16e8c:	mov	r2, r5
   16e90:	str	r0, [r6, #12]
   16e94:	mov	r1, r7
   16e98:	ldr	r0, [r6, #8]
   16e9c:	sub	r0, r0, r5
   16ea0:	str	r0, [r6, #8]
   16ea4:	bl	123e4 <memcpy@plt>
   16ea8:	subs	sl, sl, r5
   16eac:	bne	16dac <flatcc_emitter@@Base+0x1a8>
   16eb0:	ldr	r0, [sp]
   16eb4:	subs	r4, r4, #1
   16eb8:	bne	16d8c <flatcc_emitter@@Base+0x188>
   16ebc:	b	16f18 <flatcc_emitter@@Base+0x314>
   16ec0:	ldr	r5, [r6, #16]
   16ec4:	add	r2, r5, r1
   16ec8:	str	r2, [r6, #16]
   16ecc:	b	16ee4 <flatcc_emitter@@Base+0x2e0>
   16ed0:	mvn	r8, #0
   16ed4:	b	16f18 <flatcc_emitter@@Base+0x314>
   16ed8:	ldr	r2, [r6, #8]
   16edc:	sub	r5, r2, r1
   16ee0:	str	r5, [r6, #8]
   16ee4:	sub	r0, r0, r1
   16ee8:	mov	r8, #0
   16eec:	cmp	r4, #0
   16ef0:	str	r0, [r9]
   16ef4:	beq	16f18 <flatcc_emitter@@Base+0x314>
   16ef8:	ldm	r7, {r1, r2}
   16efc:	mov	r0, r5
   16f00:	bl	123e4 <memcpy@plt>
   16f04:	ldr	r0, [r7, #4]
   16f08:	add	r7, r7, #8
   16f0c:	subs	r4, r4, #1
   16f10:	add	r5, r5, r0
   16f14:	bne	16ef8 <flatcc_emitter@@Base+0x2f4>
   16f18:	mov	r0, r8
   16f1c:	sub	sp, fp, #28
   16f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016f24 <flatcc_emitter_copy_buffer@@Base>:
   16f24:	push	{r4, r5, r6, sl, fp, lr}
   16f28:	add	fp, sp, #16
   16f2c:	mov	r3, r2
   16f30:	ldr	r2, [r0, #24]
   16f34:	mov	r5, #0
   16f38:	cmp	r2, r3
   16f3c:	bhi	16fd8 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16f40:	mov	r4, r0
   16f44:	ldr	r0, [r0]
   16f48:	cmp	r0, #0
   16f4c:	beq	16fd8 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16f50:	mov	r6, r1
   16f54:	ldr	r1, [r4, #4]
   16f58:	cmp	r0, r1
   16f5c:	beq	16fc8 <flatcc_emitter_copy_buffer@@Base+0xa4>
   16f60:	ldr	r0, [r4, #12]
   16f64:	ldr	r1, [r4, #8]
   16f68:	rsb	r5, r0, #2944	; 0xb80
   16f6c:	mov	r0, r6
   16f70:	mov	r2, r5
   16f74:	bl	123e4 <memcpy@plt>
   16f78:	ldm	r4, {r0, r1}
   16f7c:	add	r5, r6, r5
   16f80:	ldr	r6, [r0, #2944]	; 0xb80
   16f84:	cmp	r6, r1
   16f88:	beq	16fb0 <flatcc_emitter_copy_buffer@@Base+0x8c>
   16f8c:	mov	r0, r5
   16f90:	mov	r1, r6
   16f94:	mov	r2, #2944	; 0xb80
   16f98:	bl	123e4 <memcpy@plt>
   16f9c:	ldr	r6, [r6, #2944]	; 0xb80
   16fa0:	ldr	r0, [r4, #4]
   16fa4:	add	r5, r5, #2944	; 0xb80
   16fa8:	cmp	r6, r0
   16fac:	bne	16f8c <flatcc_emitter_copy_buffer@@Base+0x68>
   16fb0:	ldr	r0, [r4, #20]
   16fb4:	mov	r1, r6
   16fb8:	rsb	r2, r0, #2944	; 0xb80
   16fbc:	mov	r0, r5
   16fc0:	bl	123e4 <memcpy@plt>
   16fc4:	b	16fd8 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16fc8:	ldr	r1, [r4, #8]
   16fcc:	mov	r0, r6
   16fd0:	bl	123e4 <memcpy@plt>
   16fd4:	mov	r5, r6
   16fd8:	mov	r0, r5
   16fdc:	pop	{r4, r5, r6, sl, fp, pc}

00016fe0 <__libc_csu_init@@Base>:
   16fe0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fe4:	mov	r7, r0
   16fe8:	ldr	r6, [pc, #72]	; 17038 <__libc_csu_init@@Base+0x58>
   16fec:	ldr	r5, [pc, #72]	; 1703c <__libc_csu_init@@Base+0x5c>
   16ff0:	add	r6, pc, r6
   16ff4:	add	r5, pc, r5
   16ff8:	sub	r6, r6, r5
   16ffc:	mov	r8, r1
   17000:	mov	r9, r2
   17004:	bl	12394 <strcmp@plt-0x20>
   17008:	asrs	r6, r6, #2
   1700c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17010:	mov	r4, #0
   17014:	add	r4, r4, #1
   17018:	ldr	r3, [r5], #4
   1701c:	mov	r2, r9
   17020:	mov	r1, r8
   17024:	mov	r0, r7
   17028:	blx	r3
   1702c:	cmp	r6, r4
   17030:	bne	17014 <__libc_csu_init@@Base+0x34>
   17034:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17038:	andeq	r1, r1, r4, lsl pc
   1703c:	andeq	r1, r1, ip, lsl #30

00017040 <__libc_csu_fini@@Base>:
   17040:	bx	lr

Disassembly of section .fini:

00017044 <.fini>:
   17044:	push	{r3, lr}
   17048:	pop	{r3, pc}
