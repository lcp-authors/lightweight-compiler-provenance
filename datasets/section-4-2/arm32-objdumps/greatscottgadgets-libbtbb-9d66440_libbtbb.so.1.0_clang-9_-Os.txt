
../repos/greatscottgadgets-libbtbb-9d66440/lib/src/libbtbb.so.1.0:     file format elf32-littlearm


Disassembly of section .init:

00004534 <.init>:
    4534:	push	{r3, lr}
    4538:	bl	4900 <__assert_fail@plt+0x10>
    453c:	pop	{r3, pc}

Disassembly of section .plt:

00004540 <calloc@plt-0x14>:
    4540:	push	{lr}		; (str lr, [sp, #-4]!)
    4544:	ldr	lr, [pc, #4]	; 4550 <calloc@plt-0x4>
    4548:	add	lr, pc, lr
    454c:	ldr	pc, [lr, #8]!
    4550:			; <UNDEFINED> instruction: 0x00020ab0

00004554 <calloc@plt>:
    4554:	add	ip, pc, #0, 12
    4558:	add	ip, ip, #32, 20	; 0x20000
    455c:	ldr	pc, [ip, #2736]!	; 0xab0

00004560 <raise@plt>:
    4560:	add	ip, pc, #0, 12
    4564:	add	ip, ip, #32, 20	; 0x20000
    4568:	ldr	pc, [ip, #2728]!	; 0xaa8

0000456c <gen_hop_pattern@plt>:
    456c:	add	ip, pc, #0, 12
    4570:	add	ip, ip, #32, 20	; 0x20000
    4574:	ldr	pc, [ip, #2720]!	; 0xaa0

00004578 <__cxa_finalize@plt>:
    4578:	add	ip, pc, #0, 12
    457c:	add	ip, ip, #32, 20	; 0x20000
    4580:	ldr	pc, [ip, #2712]!	; 0xa98

00004584 <btbb_get_payload_packed@plt>:
    4584:	add	ip, pc, #0, 12
    4588:	add	ip, ip, #32, 20	; 0x20000
    458c:	ldr	pc, [ip, #2704]!	; 0xa90

00004590 <printf@plt>:
    4590:	add	ip, pc, #0, 12
    4594:	add	ip, ip, #32, 20	; 0x20000
    4598:	ldr	pc, [ip, #2696]!	; 0xa88

0000459c <fopen@plt>:
    459c:	add	ip, pc, #0, 12
    45a0:	add	ip, ip, #32, 20	; 0x20000
    45a4:	ldr	pc, [ip, #2688]!	; 0xa80

000045a8 <lell_packet_is_data@plt>:
    45a8:	add	ip, pc, #0, 12
    45ac:	add	ip, ip, #32, 20	; 0x20000
    45b0:	ldr	pc, [ip, #2680]!	; 0xa78

000045b4 <fflush@plt>:
    45b4:	add	ip, pc, #0, 12
    45b8:	add	ip, ip, #32, 20	; 0x20000
    45bc:	ldr	pc, [ip, #2672]!	; 0xa70

000045c0 <btbb_packet_set_flag@plt>:
    45c0:	add	ip, pc, #0, 12
    45c4:	add	ip, ip, #32, 20	; 0x20000
    45c8:	ldr	pc, [ip, #2664]!	; 0xa68

000045cc <pcapng_append_interface_option@plt>:
    45cc:	add	ip, pc, #0, 12
    45d0:	add	ip, ip, #32, 20	; 0x20000
    45d4:	ldr	pc, [ip, #2656]!	; 0xa60

000045d8 <free@plt>:
    45d8:	add	ip, pc, #0, 12
    45dc:	add	ip, ip, #32, 20	; 0x20000
    45e0:	ldr	pc, [ip, #2648]!	; 0xa58

000045e4 <btbb_packet_get_modulation@plt>:
    45e4:	add	ip, pc, #0, 12
    45e8:	add	ip, ip, #32, 20	; 0x20000
    45ec:	ldr	pc, [ip, #2640]!	; 0xa50

000045f0 <btbb_packet_get_ac_errors@plt>:
    45f0:	add	ip, pc, #0, 12
    45f4:	add	ip, ip, #32, 20	; 0x20000
    45f8:	ldr	pc, [ip, #2632]!	; 0xa48

000045fc <memcpy@plt>:
    45fc:	add	ip, pc, #0, 12
    4600:	add	ip, ip, #32, 20	; 0x20000
    4604:	ldr	pc, [ip, #2624]!	; 0xa40

00004608 <btbb_uap_from_header@plt>:
    4608:	add	ip, pc, #0, 12
    460c:	add	ip, ip, #32, 20	; 0x20000
    4610:	ldr	pc, [ip, #2616]!	; 0xa38

00004614 <fhs@plt>:
    4614:	add	ip, pc, #0, 12
    4618:	add	ip, ip, #32, 20	; 0x20000
    461c:	ldr	pc, [ip, #2608]!	; 0xa30

00004620 <EV4@plt>:
    4620:	add	ip, pc, #0, 12
    4624:	add	ip, ip, #32, 20	; 0x20000
    4628:	ldr	pc, [ip, #2600]!	; 0xa28

0000462c <lell_pcap_close@plt>:
    462c:	add	ip, pc, #0, 12
    4630:	add	ip, ip, #32, 20	; 0x20000
    4634:	ldr	pc, [ip, #2592]!	; 0xa20

00004638 <btbb_pcap_open@plt>:
    4638:	add	ip, pc, #0, 12
    463c:	add	ip, ip, #32, 20	; 0x20000
    4640:	ldr	pc, [ip, #2584]!	; 0xa18

00004644 <btbb_header_present@plt>:
    4644:	add	ip, pc, #0, 12
    4648:	add	ip, ip, #32, 20	; 0x20000
    464c:	ldr	pc, [ip, #2576]!	; 0xa10

00004650 <pcapng_create@plt>:
    4650:	add	ip, pc, #0, 12
    4654:	add	ip, ip, #32, 20	; 0x20000
    4658:	ldr	pc, [ip, #2568]!	; 0xa08

0000465c <DM@plt>:
    465c:	add	ip, pc, #0, 12
    4660:	add	ip, ip, #32, 20	; 0x20000
    4664:	ldr	pc, [ip, #2560]!	; 0xa00

00004668 <HV@plt>:
    4668:	add	ip, pc, #0, 12
    466c:	add	ip, ip, #32, 20	; 0x20000
    4670:	ldr	pc, [ip, #2552]!	; 0x9f8

00004674 <perror@plt>:
    4674:	add	ip, pc, #0, 12
    4678:	add	ip, ip, #32, 20	; 0x20000
    467c:	ldr	pc, [ip, #2544]!	; 0x9f0

00004680 <perm_table_init@plt>:
    4680:	add	ip, pc, #0, 12
    4684:	add	ip, ip, #32, 20	; 0x20000
    4688:	ldr	pc, [ip, #2536]!	; 0x9e8

0000468c <btbb_packet_set_uap@plt>:
    468c:	add	ip, pc, #0, 12
    4690:	add	ip, ip, #32, 20	; 0x20000
    4694:	ldr	pc, [ip, #2528]!	; 0x9e0

00004698 <fwrite@plt>:
    4698:	add	ip, pc, #0, 12
    469c:	add	ip, ip, #32, 20	; 0x20000
    46a0:	ldr	pc, [ip, #2520]!	; 0x9d8

000046a4 <btbb_pcap_close@plt>:
    46a4:	add	ip, pc, #0, 12
    46a8:	add	ip, ip, #32, 20	; 0x20000
    46ac:	ldr	pc, [ip, #2512]!	; 0x9d0

000046b0 <crc_check@plt>:
    46b0:	add	ip, pc, #0, 12
    46b4:	add	ip, ip, #32, 20	; 0x20000
    46b8:	ldr	pc, [ip, #2504]!	; 0x9c8

000046bc <btbb_decode@plt>:
    46bc:	add	ip, pc, #0, 12
    46c0:	add	ip, ip, #32, 20	; 0x20000
    46c4:	ldr	pc, [ip, #2496]!	; 0x9c0

000046c8 <btbb_winnow@plt>:
    46c8:	add	ip, pc, #0, 12
    46cc:	add	ip, ip, #32, 20	; 0x20000
    46d0:	ldr	pc, [ip, #2488]!	; 0x9b8

000046d4 <get_hop_pattern@plt>:
    46d4:	add	ip, pc, #0, 12
    46d8:	add	ip, ip, #32, 20	; 0x20000
    46dc:	ldr	pc, [ip, #2480]!	; 0x9b0

000046e0 <puts@plt>:
    46e0:	add	ip, pc, #0, 12
    46e4:	add	ip, ip, #32, 20	; 0x20000
    46e8:	ldr	pc, [ip, #2472]!	; 0x9a8

000046ec <malloc@plt>:
    46ec:	add	ip, pc, #0, 12
    46f0:	add	ip, ip, #32, 20	; 0x20000
    46f4:	ldr	pc, [ip, #2464]!	; 0x9a0

000046f8 <try_hop@plt>:
    46f8:	add	ip, pc, #0, 12
    46fc:	add	ip, ip, #32, 20	; 0x20000
    4700:	ldr	pc, [ip, #2456]!	; 0x998

00004704 <btbb_packet_new@plt>:
    4704:	add	ip, pc, #0, 12
    4708:	add	ip, ip, #32, 20	; 0x20000
    470c:	ldr	pc, [ip, #2448]!	; 0x990

00004710 <btbb_pcap_dump@plt>:
    4710:	add	ip, pc, #0, 12
    4714:	add	ip, ip, #32, 20	; 0x20000
    4718:	ldr	pc, [ip, #2440]!	; 0x988

0000471c <__gmon_start__@plt>:
    471c:	add	ip, pc, #0, 12
    4720:	add	ip, ip, #32, 20	; 0x20000
    4724:	ldr	pc, [ip, #2432]!	; 0x980

00004728 <open@plt>:
    4728:	add	ip, pc, #0, 12
    472c:	add	ip, ip, #32, 20	; 0x20000
    4730:	ldr	pc, [ip, #2424]!	; 0x978

00004734 <__ctype_b_loc@plt>:
    4734:	add	ip, pc, #0, 12
    4738:	add	ip, ip, #32, 20	; 0x20000
    473c:	ldr	pc, [ip, #2416]!	; 0x970

00004740 <exit@plt>:
    4740:	add	ip, pc, #0, 12
    4744:	add	ip, ip, #32, 20	; 0x20000
    4748:	ldr	pc, [ip, #2408]!	; 0x968

0000474c <btbb_packet_get_payload_length@plt>:
    474c:	add	ip, pc, #0, 12
    4750:	add	ip, ip, #32, 20	; 0x20000
    4754:	ldr	pc, [ip, #2400]!	; 0x960

00004758 <bcmp@plt>:
    4758:	add	ip, pc, #0, 12
    475c:	add	ip, ip, #32, 20	; 0x20000
    4760:	ldr	pc, [ip, #2392]!	; 0x958

00004764 <strlen@plt>:
    4764:	add	ip, pc, #0, 12
    4768:	add	ip, ip, #32, 20	; 0x20000
    476c:	ldr	pc, [ip, #2384]!	; 0x950

00004770 <btbb_decode_header@plt>:
    4770:	add	ip, pc, #0, 12
    4774:	add	ip, ip, #32, 20	; 0x20000
    4778:	ldr	pc, [ip, #2376]!	; 0x948

0000477c <mmap@plt>:
    477c:	add	ip, pc, #0, 12
    4780:	add	ip, ip, #32, 20	; 0x20000
    4784:	ldr	pc, [ip, #2368]!	; 0x940

00004788 <btbb_packet_get_header_packed@plt>:
    4788:	add	ip, pc, #0, 12
    478c:	add	ip, ip, #32, 20	; 0x20000
    4790:	ldr	pc, [ip, #2360]!	; 0x938

00004794 <lell_get_channel_k@plt>:
    4794:	add	ip, pc, #0, 12
    4798:	add	ip, ip, #32, 20	; 0x20000
    479c:	ldr	pc, [ip, #2352]!	; 0x930

000047a0 <fprintf@plt>:
    47a0:	add	ip, pc, #0, 12
    47a4:	add	ip, ip, #32, 20	; 0x20000
    47a8:	ldr	pc, [ip, #2344]!	; 0x928

000047ac <getpagesize@plt>:
    47ac:	add	ip, pc, #0, 12
    47b0:	add	ip, ip, #32, 20	; 0x20000
    47b4:	ldr	pc, [ip, #2336]!	; 0x920

000047b8 <pcapng_append_packet@plt>:
    47b8:	add	ip, pc, #0, 12
    47bc:	add	ip, ip, #32, 20	; 0x20000
    47c0:	ldr	pc, [ip, #2328]!	; 0x918

000047c4 <btbb_packet_get_transport@plt>:
    47c4:	add	ip, pc, #0, 12
    47c8:	add	ip, ip, #32, 20	; 0x20000
    47cc:	ldr	pc, [ip, #2320]!	; 0x910

000047d0 <find_known_lap@plt>:
    47d0:	add	ip, pc, #0, 12
    47d4:	add	ip, ip, #32, 20	; 0x20000
    47d8:	ldr	pc, [ip, #2312]!	; 0x908

000047dc <address_precalc@plt>:
    47dc:	add	ip, pc, #0, 12
    47e0:	add	ip, ip, #32, 20	; 0x20000
    47e4:	ldr	pc, [ip, #2304]!	; 0x900

000047e8 <memset@plt>:
    47e8:	add	ip, pc, #0, 12
    47ec:	add	ip, ip, #32, 20	; 0x20000
    47f0:	ldr	pc, [ip, #2296]!	; 0x8f8

000047f4 <putchar@plt>:
    47f4:	add	ip, pc, #0, 12
    47f8:	add	ip, ip, #32, 20	; 0x20000
    47fc:	ldr	pc, [ip, #2288]!	; 0x8f0

00004800 <strncpy@plt>:
    4800:	add	ip, pc, #0, 12
    4804:	add	ip, ip, #32, 20	; 0x20000
    4808:	ldr	pc, [ip, #2280]!	; 0x8e8

0000480c <EV3@plt>:
    480c:	add	ip, pc, #0, 12
    4810:	add	ip, ip, #32, 20	; 0x20000
    4814:	ldr	pc, [ip, #2272]!	; 0x8e0

00004818 <btbb_packet_get_lap@plt>:
    4818:	add	ip, pc, #0, 12
    481c:	add	ip, ip, #32, 20	; 0x20000
    4820:	ldr	pc, [ip, #2264]!	; 0x8d8

00004824 <bt_compidtostr@plt>:
    4824:	add	ip, pc, #0, 12
    4828:	add	ip, ip, #32, 20	; 0x20000
    482c:	ldr	pc, [ip, #2256]!	; 0x8d0

00004830 <write@plt>:
    4830:	add	ip, pc, #0, 12
    4834:	add	ip, ip, #32, 20	; 0x20000
    4838:	ldr	pc, [ip, #2248]!	; 0x8c8

0000483c <get_piconet@plt>:
    483c:	add	ip, pc, #0, 12
    4840:	add	ip, ip, #32, 20	; 0x20000
    4844:	ldr	pc, [ip, #2240]!	; 0x8c0

00004848 <perm5@plt>:
    4848:	add	ip, pc, #0, 12
    484c:	add	ip, ip, #32, 20	; 0x20000
    4850:	ldr	pc, [ip, #2232]!	; 0x8b8

00004854 <fclose@plt>:
    4854:	add	ip, pc, #0, 12
    4858:	add	ip, ip, #32, 20	; 0x20000
    485c:	ldr	pc, [ip, #2224]!	; 0x8b0

00004860 <EV5@plt>:
    4860:	add	ip, pc, #0, 12
    4864:	add	ip, ip, #32, 20	; 0x20000
    4868:	ldr	pc, [ip, #2216]!	; 0x8a8

0000486c <munmap@plt>:
    486c:	add	ip, pc, #0, 12
    4870:	add	ip, ip, #32, 20	; 0x20000
    4874:	ldr	pc, [ip, #2208]!	; 0x8a0

00004878 <DH@plt>:
    4878:	add	ip, pc, #0, 12
    487c:	add	ip, ip, #32, 20	; 0x20000
    4880:	ldr	pc, [ip, #2200]!	; 0x898

00004884 <btbb_packet_get_channel@plt>:
    4884:	add	ip, pc, #0, 12
    4888:	add	ip, ip, #32, 20	; 0x20000
    488c:	ldr	pc, [ip, #2192]!	; 0x890

00004890 <precalc@plt>:
    4890:	add	ip, pc, #0, 12
    4894:	add	ip, ip, #32, 20	; 0x20000
    4898:	ldr	pc, [ip, #2184]!	; 0x888

0000489c <btbb_decode_payload@plt>:
    489c:	add	ip, pc, #0, 12
    48a0:	add	ip, ip, #32, 20	; 0x20000
    48a4:	ldr	pc, [ip, #2176]!	; 0x880

000048a8 <promiscuous_packet_search@plt>:
    48a8:	add	ip, pc, #0, 12
    48ac:	add	ip, ip, #32, 20	; 0x20000
    48b0:	ldr	pc, [ip, #2168]!	; 0x878

000048b4 <pcapng_close@plt>:
    48b4:	add	ip, pc, #0, 12
    48b8:	add	ip, ip, #32, 20	; 0x20000
    48bc:	ldr	pc, [ip, #2160]!	; 0x870

000048c0 <btbb_print_packet@plt>:
    48c0:	add	ip, pc, #0, 12
    48c4:	add	ip, ip, #32, 20	; 0x20000
    48c8:	ldr	pc, [ip, #2152]!	; 0x868

000048cc <try_clock@plt>:
    48cc:	add	ip, pc, #0, 12
    48d0:	add	ip, ip, #32, 20	; 0x20000
    48d4:	ldr	pc, [ip, #2144]!	; 0x860

000048d8 <btbb_init_hop_reversal@plt>:
    48d8:	add	ip, pc, #0, 12
    48dc:	add	ip, ip, #32, 20	; 0x20000
    48e0:	ldr	pc, [ip, #2136]!	; 0x858

000048e4 <close@plt>:
    48e4:	add	ip, pc, #0, 12
    48e8:	add	ip, ip, #32, 20	; 0x20000
    48ec:	ldr	pc, [ip, #2128]!	; 0x850

000048f0 <__assert_fail@plt>:
    48f0:	add	ip, pc, #0, 12
    48f4:	add	ip, ip, #32, 20	; 0x20000
    48f8:	ldr	pc, [ip, #2120]!	; 0x848

Disassembly of section .text:

00004900 <btbb_gen_syncword@@Base-0x128>:
    4900:	ldr	r3, [pc, #20]	; 491c <__assert_fail@plt+0x2c>
    4904:	ldr	r2, [pc, #20]	; 4920 <__assert_fail@plt+0x30>
    4908:	add	r3, pc, r3
    490c:	ldr	r2, [r3, r2]
    4910:	cmp	r2, #0
    4914:	bxeq	lr
    4918:	b	471c <__gmon_start__@plt>
    491c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
    4920:	andeq	r0, r0, r8, asr r1
    4924:	ldr	r0, [pc, #44]	; 4958 <__assert_fail@plt+0x68>
    4928:	ldr	r3, [pc, #44]	; 495c <__assert_fail@plt+0x6c>
    492c:	add	r0, pc, r0
    4930:	add	r3, pc, r3
    4934:	cmp	r3, r0
    4938:	ldr	r3, [pc, #32]	; 4960 <__assert_fail@plt+0x70>
    493c:	add	r3, pc, r3
    4940:	bxeq	lr
    4944:	ldr	r2, [pc, #24]	; 4964 <__assert_fail@plt+0x74>
    4948:	ldr	r3, [r3, r2]
    494c:	cmp	r3, #0
    4950:	bxeq	lr
    4954:	bx	r3
    4958:	andeq	r0, r2, r8, lsr r8
    495c:	andeq	r0, r2, r4, lsr r8
    4960:			; <UNDEFINED> instruction: 0x000206bc
    4964:	andeq	r0, r0, r8, asr #2
    4968:	ldr	r0, [pc, #56]	; 49a8 <__assert_fail@plt+0xb8>
    496c:	ldr	r3, [pc, #56]	; 49ac <__assert_fail@plt+0xbc>
    4970:	add	r0, pc, r0
    4974:	add	r3, pc, r3
    4978:	sub	r1, r3, r0
    497c:	ldr	r3, [pc, #44]	; 49b0 <__assert_fail@plt+0xc0>
    4980:	asr	r1, r1, #2
    4984:	add	r3, pc, r3
    4988:	add	r1, r1, r1, lsr #31
    498c:	asrs	r1, r1, #1
    4990:	bxeq	lr
    4994:	ldr	r2, [pc, #24]	; 49b4 <__assert_fail@plt+0xc4>
    4998:	ldr	r3, [r3, r2]
    499c:	cmp	r3, #0
    49a0:	bxeq	lr
    49a4:	bx	r3
    49a8:	strdeq	r0, [r2], -r4
    49ac:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
    49b0:	andeq	r0, r2, r4, ror r6
    49b4:	andeq	r0, r0, r0, ror #2
    49b8:	ldr	r3, [pc, #76]	; 4a0c <__assert_fail@plt+0x11c>
    49bc:	ldr	r2, [pc, #76]	; 4a10 <__assert_fail@plt+0x120>
    49c0:	add	r3, pc, r3
    49c4:	add	r2, pc, r2
    49c8:	ldrb	r3, [r3]
    49cc:	cmp	r3, #0
    49d0:	bxne	lr
    49d4:	ldr	r3, [pc, #56]	; 4a14 <__assert_fail@plt+0x124>
    49d8:	push	{r4, lr}
    49dc:	ldr	r3, [r2, r3]
    49e0:	cmp	r3, #0
    49e4:	beq	49f4 <__assert_fail@plt+0x104>
    49e8:	ldr	r3, [pc, #40]	; 4a18 <__assert_fail@plt+0x128>
    49ec:	ldr	r0, [pc, r3]
    49f0:	bl	4578 <__cxa_finalize@plt>
    49f4:	bl	4924 <__assert_fail@plt+0x34>
    49f8:	ldr	r3, [pc, #28]	; 4a1c <__assert_fail@plt+0x12c>
    49fc:	mov	r2, #1
    4a00:	add	r3, pc, r3
    4a04:	strb	r2, [r3]
    4a08:	pop	{r4, pc}
    4a0c:	andeq	r0, r2, r4, lsr #15
    4a10:	andeq	r0, r2, r4, lsr r6
    4a14:	andeq	r0, r0, r4, asr #2
    4a18:	andeq	r0, r2, r0, ror r7
    4a1c:	andeq	r0, r2, r4, ror #14
    4a20:	b	4968 <__assert_fail@plt+0x78>
    4a24:	andeq	r0, r0, r0

00004a28 <btbb_gen_syncword@@Base>:
    4a28:	push	{r4, r5, fp, lr}
    4a2c:	add	fp, sp, #8
    4a30:	ldr	r2, [pc, #60]	; 4a74 <btbb_gen_syncword@@Base+0x4c>
    4a34:	movw	ip, #3710	; 0xe7e
    4a38:	mov	r1, #-1342177278	; 0xb0000002
    4a3c:	mov	r3, #0
    4a40:	mov	lr, #8388608	; 0x800000
    4a44:	movt	ip, #51074	; 0xc782
    4a48:	add	r2, pc, r2
    4a4c:	tst	r0, lr, lsr r3
    4a50:	add	r3, r3, #1
    4a54:	ldrdne	r4, [r2]
    4a58:	add	r2, r2, #8
    4a5c:	eorne	r1, r5, r1
    4a60:	eorne	ip, r4, ip
    4a64:	cmp	r3, #24
    4a68:	bne	4a4c <btbb_gen_syncword@@Base+0x24>
    4a6c:	mov	r0, ip
    4a70:	pop	{r4, r5, fp, pc}
    4a74:	andeq	r6, r0, r8, ror #28

00004a78 <btbb_get_release@@Base>:
    4a78:	ldr	r0, [pc, #4]	; 4a84 <btbb_get_release@@Base+0xc>
    4a7c:	add	r0, pc, r0
    4a80:	bx	lr
    4a84:	andeq	r9, r0, ip, lsr r4

00004a88 <btbb_get_version@@Base>:
    4a88:	ldr	r0, [pc, #4]	; 4a94 <btbb_get_version@@Base+0xc>
    4a8c:	add	r0, pc, r0
    4a90:	bx	lr
    4a94:	andeq	r9, r0, r7, lsr r4

00004a98 <btbb_init@@Base>:
    4a98:	push	{r4, r5, r6, sl, fp, lr}
    4a9c:	add	fp, sp, #16
    4aa0:	cmp	r0, #6
    4aa4:	bcs	4af8 <btbb_init@@Base+0x60>
    4aa8:	mov	r5, r0
    4aac:	mov	r4, #0
    4ab0:	cmp	r0, #0
    4ab4:	beq	4af0 <btbb_init@@Base+0x58>
    4ab8:	ldr	r0, [pc, #108]	; 4b2c <btbb_init@@Base+0x94>
    4abc:	ldr	r0, [pc, r0]
    4ac0:	cmp	r0, #0
    4ac4:	bne	4af0 <btbb_init@@Base+0x58>
    4ac8:	mov	r4, #0
    4acc:	mov	r6, #0
    4ad0:	add	r6, r6, #1
    4ad4:	mov	r0, #0
    4ad8:	mov	r1, #0
    4adc:	mov	r2, #0
    4ae0:	mov	r3, r6
    4ae4:	bl	7014 <clock_from_fhs@@Base+0x24>
    4ae8:	cmp	r5, r6
    4aec:	bne	4ad0 <btbb_init@@Base+0x38>
    4af0:	mov	r0, r4
    4af4:	pop	{r4, r5, r6, sl, fp, pc}
    4af8:	ldr	r0, [pc, #32]	; 4b20 <btbb_init@@Base+0x88>
    4afc:	ldr	r0, [pc, r0]
    4b00:	ldr	r0, [r0]
    4b04:	ldr	r1, [pc, #24]	; 4b24 <btbb_init@@Base+0x8c>
    4b08:	ldr	r2, [pc, #24]	; 4b28 <btbb_init@@Base+0x90>
    4b0c:	add	r1, pc, r1
    4b10:	add	r2, pc, r2
    4b14:	bl	47a0 <fprintf@plt>
    4b18:	mvn	r4, #0
    4b1c:	b	4af0 <btbb_init@@Base+0x58>
    4b20:	andeq	r0, r2, r8, asr #12
    4b24:			; <UNDEFINED> instruction: 0x000093bb
    4b28:	ldrdeq	r9, [r0], -r7
    4b2c:	andeq	r0, r2, ip, lsr #13

00004b30 <btbb_packet_new@@Base>:
    4b30:	push	{r4, r5, fp, lr}
    4b34:	add	fp, sp, #8
    4b38:	mov	r0, #1
    4b3c:	mov	r1, #5952	; 0x1740
    4b40:	mov	r5, #1
    4b44:	bl	4554 <calloc@plt>
    4b48:	mov	r4, r0
    4b4c:	cmp	r0, #0
    4b50:	beq	4b60 <btbb_packet_new@@Base+0x30>
    4b54:	str	r5, [r4]
    4b58:	mov	r0, r4
    4b5c:	pop	{r4, r5, fp, pc}
    4b60:	ldr	r0, [pc, #28]	; 4b84 <btbb_packet_new@@Base+0x54>
    4b64:	mov	r1, #25
    4b68:	mov	r2, #1
    4b6c:	ldr	r0, [pc, r0]
    4b70:	ldr	r3, [r0]
    4b74:	ldr	r0, [pc, #12]	; 4b88 <btbb_packet_new@@Base+0x58>
    4b78:	add	r0, pc, r0
    4b7c:	bl	4698 <fwrite@plt>
    4b80:	b	4b58 <btbb_packet_new@@Base+0x28>
    4b84:	ldrdeq	r0, [r2], -r8
    4b88:	andeq	r9, r0, r9, ror r3

00004b8c <btbb_packet_ref@@Base>:
    4b8c:	ldr	r1, [r0]
    4b90:	add	r1, r1, #1
    4b94:	str	r1, [r0]
    4b98:	bx	lr

00004b9c <btbb_packet_unref@@Base>:
    4b9c:	ldr	r1, [r0]
    4ba0:	subs	r1, r1, #1
    4ba4:	str	r1, [r0]
    4ba8:	bxne	lr
    4bac:	b	45d8 <free@plt>

00004bb0 <btbb_packet_get_lap@@Base>:
    4bb0:	ldr	r0, [r0, #12]
    4bb4:	bx	lr

00004bb8 <btbb_packet_set_uap@@Base>:
    4bb8:	strb	r1, [r0, #9]
    4bbc:	ldr	r1, [r0, #4]
    4bc0:	orr	r1, r1, #4
    4bc4:	str	r1, [r0, #4]
    4bc8:	bx	lr

00004bcc <btbb_packet_set_flag@@Base>:
    4bcc:	push	{fp, lr}
    4bd0:	mov	fp, sp
    4bd4:	ldr	lr, [r0, #4]
    4bd8:	mov	ip, #1
    4bdc:	cmp	r2, #0
    4be0:	orr	r3, lr, ip, lsl r1
    4be4:	biceq	r3, lr, ip, lsl r1
    4be8:	str	r3, [r0, #4]
    4bec:	pop	{fp, pc}

00004bf0 <btbb_packet_get_uap@@Base>:
    4bf0:	ldrb	r0, [r0, #9]
    4bf4:	bx	lr

00004bf8 <btbb_packet_get_nap@@Base>:
    4bf8:	ldrh	r0, [r0, #10]
    4bfc:	bx	lr

00004c00 <btbb_packet_get_clkn@@Base>:
    4c00:	ldr	r0, [r0, #2816]	; 0xb00
    4c04:	bx	lr

00004c08 <btbb_packet_get_channel@@Base>:
    4c08:	ldrb	r0, [r0, #8]
    4c0c:	bx	lr

00004c10 <btbb_packet_set_modulation@@Base>:
    4c10:	strb	r1, [r0, #16]
    4c14:	bx	lr

00004c18 <btbb_packet_get_modulation@@Base>:
    4c18:	ldrb	r0, [r0, #16]
    4c1c:	bx	lr

00004c20 <btbb_packet_set_transport@@Base>:
    4c20:	strb	r1, [r0, #17]
    4c24:	bx	lr

00004c28 <btbb_packet_get_transport@@Base>:
    4c28:	ldrb	r0, [r0, #17]
    4c2c:	bx	lr

00004c30 <btbb_packet_get_ac_errors@@Base>:
    4c30:	ldrb	r0, [r0, #2820]	; 0xb04
    4c34:	bx	lr

00004c38 <promiscuous_packet_search@@Base>:
    4c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c3c:	add	fp, sp, #28
    4c40:	sub	sp, sp, #4
    4c44:	vpush	{d8-d11}
    4c48:	sub	sp, sp, #40	; 0x28
    4c4c:	mov	r5, r1
    4c50:	add	r1, r0, #57	; 0x39
    4c54:	mov	r6, #0
    4c58:	mov	r7, #0
    4c5c:	str	r3, [sp, #24]
    4c60:	ldrb	r3, [r1, r7]
    4c64:	orr	r6, r6, r3, lsl r7
    4c68:	add	r7, r7, #1
    4c6c:	cmp	r7, #6
    4c70:	bne	4c60 <promiscuous_packet_search@@Base+0x28>
    4c74:	cmp	r5, #1
    4c78:	blt	4fe8 <promiscuous_packet_search@@Base+0x3b0>
    4c7c:	str	r2, [sp, #4]
    4c80:	vldr	d8, [pc, #912]	; 5018 <promiscuous_packet_search@@Base+0x3e0>
    4c84:	vmov.i64	q5, #0x00000000000000ff
    4c88:	vmov.i32	d9, #2	; 0x00000002
    4c8c:	lsl	r8, r6, #1
    4c90:	mov	r4, #0
    4c94:	add	sl, sp, #28
    4c98:	mov	r7, r0
    4c9c:	ldr	r2, [pc, #892]	; 5020 <promiscuous_packet_search@@Base+0x3e8>
    4ca0:	str	r0, [sp, #12]
    4ca4:	str	r5, [sp, #16]
    4ca8:	add	r2, pc, r2
    4cac:	add	r1, r0, r4
    4cb0:	ldrb	r1, [r1, #63]	; 0x3f
    4cb4:	lsl	r3, r1, #6
    4cb8:	uxtb	r1, r8
    4cbc:	orr	r8, r3, r1, lsr #1
    4cc0:	uxtb	r1, r8
    4cc4:	ldrb	r1, [r2, r1]
    4cc8:	cmp	r1, #1
    4ccc:	bhi	4f3c <promiscuous_packet_search@@Base+0x304>
    4cd0:	vmov.i32	q8, #0	; 0x00000000
    4cd4:	vorr	d18, d8, d8
    4cd8:	mov	r0, #0
    4cdc:	add	r1, r7, r0
    4ce0:	vmovl.u32	q11, d18
    4ce4:	vadd.i32	d18, d18, d9
    4ce8:	add	r0, r0, #2
    4cec:	ldrh	r1, [r1]
    4cf0:	cmp	r0, #64	; 0x40
    4cf4:	strh	r1, [sp, #28]
    4cf8:	vld1.16	{d19[0]}, [sl :16]
    4cfc:	vmovl.u8	q10, d19
    4d00:	vmovl.u16	q10, d20
    4d04:	vmovl.u32	q10, d20
    4d08:	vand	q10, q10, q5
    4d0c:	vshl.u64	q10, q10, q11
    4d10:	vorr	q8, q10, q8
    4d14:	bne	4cdc <promiscuous_packet_search@@Base+0xa4>
    4d18:	vorr	d18, d17, d17
    4d1c:	ldr	r0, [fp, #8]
    4d20:	mov	ip, #0
    4d24:	mvn	lr, #7
    4d28:	vorr	q8, q8, q9
    4d2c:	strb	ip, [r0]
    4d30:	movw	r0, #36246	; 0x8d96
    4d34:	ldr	r3, [pc, #744]	; 5024 <promiscuous_packet_search@@Base+0x3ec>
    4d38:	movt	r0, #33668	; 0x8384
    4d3c:	ldr	r6, [pc, #740]	; 5028 <promiscuous_packet_search@@Base+0x3f0>
    4d40:	vmov.32	r1, d16[1]
    4d44:	add	r3, pc, r3
    4d48:	add	r6, pc, r6
    4d4c:	and	r2, lr, r1, lsr #22
    4d50:	bic	r1, r1, #-33554432	; 0xfe000000
    4d54:	ldr	r2, [r3, r2]!
    4d58:	ldr	r3, [r3, #4]
    4d5c:	orr	r9, r3, r1
    4d60:	eor	r1, r9, r0
    4d64:	ubfx	r5, r1, #8, #8
    4d68:	ldr	r0, [pc, #700]	; 502c <promiscuous_packet_search@@Base+0x3f4>
    4d6c:	uxtb	r3, r1
    4d70:	ldr	r3, [r6, r3, lsl #3]!
    4d74:	add	r0, pc, r0
    4d78:	ldr	r5, [r0, r5, lsl #3]!
    4d7c:	ldr	r0, [r0, #4]
    4d80:	eor	r3, r5, r3
    4d84:	vmov.32	r5, d16[0]
    4d88:	orr	r2, r2, r5
    4d8c:	eor	r2, r2, r3
    4d90:	ubfx	r3, r1, #16, #8
    4d94:	ldr	r5, [pc, #660]	; 5030 <promiscuous_packet_search@@Base+0x3f8>
    4d98:	and	r1, lr, r1, lsr #21
    4d9c:	add	r5, pc, r5
    4da0:	ldr	r3, [r5, r3, lsl #3]!
    4da4:	eor	r2, r2, r3
    4da8:	ldr	r3, [pc, #644]	; 5034 <promiscuous_packet_search@@Base+0x3fc>
    4dac:	str	r9, [sp, #8]
    4db0:	add	r3, pc, r3
    4db4:	ldr	r1, [r3, r1]!
    4db8:	eor	r1, r2, r1
    4dbc:	movw	r2, #21756	; 0x54fc
    4dc0:	movt	r2, #48076	; 0xbbcc
    4dc4:	eor	r1, r1, r2
    4dc8:	ldr	r2, [r6, #4]
    4dcc:	eor	r0, r0, r2
    4dd0:	ldr	r2, [r5, #4]
    4dd4:	eor	r0, r0, r2
    4dd8:	ldr	r2, [r3, #4]
    4ddc:	eor	r2, r0, r2
    4de0:	orrs	r0, r1, r2
    4de4:	lsr	r0, r9, #2
    4de8:	str	r0, [sp, #20]
    4dec:	beq	4f1c <promiscuous_packet_search@@Base+0x2e4>
    4df0:	str	r1, [sp, #32]
    4df4:	str	r2, [sp, #36]	; 0x24
    4df8:	ldr	r5, [sp, #16]
    4dfc:	ldr	r0, [pc, #568]	; 503c <promiscuous_packet_search@@Base+0x404>
    4e00:	ldr	r0, [pc, r0]
    4e04:	cmp	r0, #0
    4e08:	beq	4f00 <promiscuous_packet_search@@Base+0x2c8>
    4e0c:	movw	r3, #31161	; 0x79b9
    4e10:	movw	r6, #48887	; 0xbef7
    4e14:	movt	r3, #40503	; 0x9e37
    4e18:	movt	r6, #65261	; 0xfeed
    4e1c:	add	r2, r2, r3
    4e20:	movw	r3, #47810	; 0xbac2
    4e24:	movt	r3, #40777	; 0x9f49
    4e28:	sub	r1, r1, r2
    4e2c:	add	r1, r1, r3
    4e30:	movw	r3, #63341	; 0xf76d
    4e34:	movt	r3, #7
    4e38:	eor	r1, r1, r3
    4e3c:	movw	r3, #16649	; 0x4109
    4e40:	movt	r3, #274	; 0x112
    4e44:	sub	r2, r2, r1
    4e48:	add	r2, r2, r3
    4e4c:	eor	r2, r2, r1, lsl #8
    4e50:	add	r3, r1, r2
    4e54:	sub	r1, r1, r2
    4e58:	sub	r3, r6, r3
    4e5c:	eor	r3, r3, r2, lsr #13
    4e60:	sub	r1, r1, r3
    4e64:	sub	r2, r2, r3
    4e68:	eor	r1, r1, r3, lsr #12
    4e6c:	sub	r2, r2, r1
    4e70:	sub	r3, r3, r1
    4e74:	eor	r2, r2, r1, lsl #16
    4e78:	sub	r3, r3, r2
    4e7c:	sub	r1, r1, r2
    4e80:	eor	r3, r3, r2, lsr #5
    4e84:	sub	r1, r1, r3
    4e88:	sub	r2, r2, r3
    4e8c:	eor	r1, r1, r3, lsr #3
    4e90:	sub	r2, r2, r1
    4e94:	eor	r2, r2, r1, lsl #10
    4e98:	sub	r1, r3, r1
    4e9c:	sub	r1, r1, r2
    4ea0:	eor	r2, r1, r2, lsr #15
    4ea4:	ldr	r1, [r0, #16]
    4ea8:	ldm	r1, {r0, r3}
    4eac:	sub	r3, r3, #1
    4eb0:	and	r2, r3, r2
    4eb4:	add	r2, r2, r2, lsl #1
    4eb8:	ldr	r0, [r0, r2, lsl #2]
    4ebc:	cmp	r0, #0
    4ec0:	beq	4f00 <promiscuous_packet_search@@Base+0x2c8>
    4ec4:	ldr	r1, [r1, #20]
    4ec8:	rsb	r9, r1, #0
    4ecc:	add	r6, r0, r9
    4ed0:	ldr	r0, [r6, #40]	; 0x28
    4ed4:	cmp	r0, #8
    4ed8:	bne	4ef4 <promiscuous_packet_search@@Base+0x2bc>
    4edc:	ldr	r0, [r6, #36]	; 0x24
    4ee0:	add	r1, sp, #32
    4ee4:	mov	r2, #8
    4ee8:	bl	4758 <bcmp@plt>
    4eec:	cmp	r0, #0
    4ef0:	beq	4f50 <promiscuous_packet_search@@Base+0x318>
    4ef4:	ldr	r0, [r6, #32]
    4ef8:	cmp	r0, #0
    4efc:	bne	4ecc <promiscuous_packet_search@@Base+0x294>
    4f00:	ldr	r0, [fp, #8]
    4f04:	mov	ip, #255	; 0xff
    4f08:	strb	ip, [r0]
    4f0c:	ldr	r0, [sp, #12]
    4f10:	ldr	r2, [pc, #296]	; 5040 <promiscuous_packet_search@@Base+0x408>
    4f14:	add	r2, pc, r2
    4f18:	b	4f2c <promiscuous_packet_search@@Base+0x2f4>
    4f1c:	ldr	r2, [pc, #276]	; 5038 <promiscuous_packet_search@@Base+0x400>
    4f20:	ldr	r5, [sp, #16]
    4f24:	ldr	r0, [sp, #12]
    4f28:	add	r2, pc, r2
    4f2c:	ldr	r1, [sp, #24]
    4f30:	uxtb	r3, ip
    4f34:	cmp	r3, r1
    4f38:	ble	4ff0 <promiscuous_packet_search@@Base+0x3b8>
    4f3c:	add	r4, r4, #1
    4f40:	add	r7, r7, #1
    4f44:	cmp	r4, r5
    4f48:	bne	4cac <promiscuous_packet_search@@Base+0x74>
    4f4c:	b	4fe8 <promiscuous_packet_search@@Base+0x3b0>
    4f50:	ldrd	r0, [r6, #8]
    4f54:	movw	r2, #21845	; 0x5555
    4f58:	movw	r3, #13107	; 0x3333
    4f5c:	movt	r2, #21845	; 0x5555
    4f60:	movt	r3, #13107	; 0x3333
    4f64:	mov	ip, r2
    4f68:	mov	r6, r3
    4f6c:	and	r2, r2, r1, lsr #1
    4f70:	sub	r2, r1, r2
    4f74:	and	r3, r3, r2, lsr #2
    4f78:	and	r2, r2, r6
    4f7c:	add	r2, r2, r3
    4f80:	movw	r3, #3855	; 0xf0f
    4f84:	movt	r3, #3855	; 0xf0f
    4f88:	add	r2, r2, r2, lsr #4
    4f8c:	mov	lr, r3
    4f90:	and	r2, r2, r3
    4f94:	movw	r3, #257	; 0x101
    4f98:	movt	r3, #257	; 0x101
    4f9c:	mov	r9, r3
    4fa0:	mul	r2, r2, r3
    4fa4:	and	r3, ip, r0, lsr #1
    4fa8:	sub	r0, r0, r3
    4fac:	and	r3, r6, r0, lsr #2
    4fb0:	and	r0, r0, r6
    4fb4:	add	r0, r0, r3
    4fb8:	add	r0, r0, r0, lsr #4
    4fbc:	and	r0, r0, lr
    4fc0:	mul	r0, r0, r9
    4fc4:	lsr	r0, r0, #24
    4fc8:	add	ip, r0, r2, lsr #24
    4fcc:	ldr	r0, [fp, #8]
    4fd0:	strb	ip, [r0]
    4fd4:	ldr	r0, [sp, #8]
    4fd8:	eor	r0, r1, r0
    4fdc:	lsr	r0, r0, #2
    4fe0:	str	r0, [sp, #20]
    4fe4:	b	4f0c <promiscuous_packet_search@@Base+0x2d4>
    4fe8:	mvn	r4, #0
    4fec:	b	5000 <promiscuous_packet_search@@Base+0x3c8>
    4ff0:	ldr	r0, [sp, #20]
    4ff4:	ldr	r1, [sp, #4]
    4ff8:	bic	r0, r0, #-16777216	; 0xff000000
    4ffc:	str	r0, [r1]
    5000:	mov	r0, r4
    5004:	sub	sp, fp, #64	; 0x40
    5008:	vpop	{d8-d11}
    500c:	add	sp, sp, #4
    5010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5014:	nop	{0}
    5018:	andeq	r0, r0, r0
    501c:	andeq	r0, r0, r1
    5020:	andeq	r6, r0, r8, asr #25
    5024:	andeq	r6, r0, ip, lsr #25
    5028:	andeq	r7, r0, r8, lsr #1
    502c:	andeq	r7, r0, ip, ror r8
    5030:	andeq	r8, r0, r4, asr r0
    5034:	andeq	r8, r0, r0, asr #16
    5038:	andeq	r6, r0, r8, asr #20
    503c:	andeq	r0, r2, r8, ror #6
    5040:	andeq	r6, r0, ip, asr sl
    5044:	nop	{0}

00005048 <find_known_lap@@Base>:
    5048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    504c:	add	fp, sp, #28
    5050:	sub	sp, sp, #12
    5054:	str	r3, [sp]
    5058:	str	r1, [sp, #4]
    505c:	movw	lr, #3710	; 0xe7e
    5060:	mov	ip, #-1342177278	; 0xb0000002
    5064:	mov	r4, #0
    5068:	mov	r6, #8388608	; 0x800000
    506c:	ldr	r5, [pc, #348]	; 51d0 <find_known_lap@@Base+0x188>
    5070:	movt	lr, #51074	; 0xc782
    5074:	add	r5, pc, r5
    5078:	tst	r2, r6, lsr r4
    507c:	beq	5090 <find_known_lap@@Base+0x48>
    5080:	ldr	r8, [r5]
    5084:	ldr	r7, [r5, #4]
    5088:	eor	ip, r7, ip
    508c:	eor	lr, r8, lr
    5090:	add	r4, r4, #1
    5094:	add	r5, r5, #8
    5098:	cmp	r4, #24
    509c:	bne	5078 <find_known_lap@@Base+0x30>
    50a0:	ldr	r1, [sp, #4]
    50a4:	mvn	r5, #0
    50a8:	cmp	r1, #1
    50ac:	blt	51b8 <find_known_lap@@Base+0x170>
    50b0:	vldr	d16, [pc, #272]	; 51c8 <find_known_lap@@Base+0x180>
    50b4:	movw	r2, #13107	; 0x3333
    50b8:	movw	sl, #3855	; 0xf0f
    50bc:	movw	r7, #257	; 0x101
    50c0:	vmov.i64	q9, #0x00000000000000ff
    50c4:	vmov.i32	d17, #2	; 0x00000002
    50c8:	mov	r5, #0
    50cc:	add	r6, sp, #8
    50d0:	movt	r2, #13107	; 0x3333
    50d4:	movt	sl, #3855	; 0xf0f
    50d8:	movt	r7, #257	; 0x101
    50dc:	vmov.i32	q10, #0	; 0x00000000
    50e0:	vorr	d22, d16, d16
    50e4:	mov	r8, #0
    50e8:	add	r9, r0, r8
    50ec:	vmovl.u32	q13, d22
    50f0:	vadd.i32	d22, d22, d17
    50f4:	add	r8, r8, #2
    50f8:	ldrh	r4, [r9]
    50fc:	cmp	r8, #64	; 0x40
    5100:	strh	r4, [sp, #8]
    5104:	vld1.16	{d23[0]}, [r6 :16]
    5108:	vmovl.u8	q12, d23
    510c:	vmovl.u16	q12, d24
    5110:	vmovl.u32	q12, d24
    5114:	vand	q12, q12, q9
    5118:	vshl.u64	q12, q12, q13
    511c:	vorr	q10, q12, q10
    5120:	bne	50e8 <find_known_lap@@Base+0xa0>
    5124:	vorr	d22, d21, d21
    5128:	movw	r1, #21845	; 0x5555
    512c:	movt	r1, #21845	; 0x5555
    5130:	vorr	q10, q10, q11
    5134:	vmov.32	r4, d20[1]
    5138:	eor	r4, r4, ip
    513c:	and	r3, r1, r4, lsr #1
    5140:	sub	r3, r4, r3
    5144:	and	r4, r2, r3, lsr #2
    5148:	and	r3, r3, r2
    514c:	add	r3, r3, r4
    5150:	vmov.32	r4, d20[0]
    5154:	add	r3, r3, r3, lsr #4
    5158:	and	r3, r3, sl
    515c:	mul	r3, r3, r7
    5160:	eor	r4, r4, lr
    5164:	and	r1, r1, r4, lsr #1
    5168:	sub	r1, r4, r1
    516c:	and	r4, r2, r1, lsr #2
    5170:	and	r1, r1, r2
    5174:	add	r1, r1, r4
    5178:	add	r1, r1, r1, lsr #4
    517c:	and	r1, r1, sl
    5180:	mul	r1, r1, r7
    5184:	lsr	r1, r1, #24
    5188:	add	r1, r1, r3, lsr #24
    518c:	ldr	r3, [fp, #8]
    5190:	strb	r1, [r3]
    5194:	ldr	r3, [sp]
    5198:	cmp	r1, r3
    519c:	ble	51b8 <find_known_lap@@Base+0x170>
    51a0:	ldr	r1, [sp, #4]
    51a4:	add	r5, r5, #1
    51a8:	add	r0, r0, #1
    51ac:	cmp	r5, r1
    51b0:	bne	50dc <find_known_lap@@Base+0x94>
    51b4:	mvn	r5, #0
    51b8:	mov	r0, r5
    51bc:	sub	sp, fp, #28
    51c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51c4:	nop	{0}
    51c8:	andeq	r0, r0, r0
    51cc:	andeq	r0, r0, r1
    51d0:	andeq	r6, r0, ip, lsr r8

000051d4 <btbb_find_ac@@Base>:
    51d4:	push	{r4, r5, fp, lr}
    51d8:	add	fp, sp, #8
    51dc:	sub	sp, sp, #16
    51e0:	cmn	r2, #1
    51e4:	str	r2, [sp, #12]
    51e8:	beq	51fc <btbb_find_ac@@Base+0x28>
    51ec:	add	r5, sp, #11
    51f0:	str	r5, [sp]
    51f4:	bl	47d0 <find_known_lap@plt>
    51f8:	b	520c <btbb_find_ac@@Base+0x38>
    51fc:	add	r2, sp, #11
    5200:	str	r2, [sp]
    5204:	add	r2, sp, #12
    5208:	bl	48a8 <promiscuous_packet_search@plt>
    520c:	mov	r4, r0
    5210:	cmp	r0, #0
    5214:	bmi	5248 <btbb_find_ac@@Base+0x74>
    5218:	ldr	r5, [fp, #8]
    521c:	ldr	r0, [r5]
    5220:	cmp	r0, #0
    5224:	bne	5230 <btbb_find_ac@@Base+0x5c>
    5228:	bl	4704 <btbb_packet_new@plt>
    522c:	str	r0, [r5]
    5230:	ldr	r1, [sp, #12]
    5234:	ldrb	r2, [sp, #11]
    5238:	mov	r3, #1
    523c:	str	r3, [r0, #4]
    5240:	strb	r2, [r0, #2820]	; 0xb04
    5244:	str	r1, [r0, #12]
    5248:	mov	r0, r4
    524c:	sub	sp, fp, #8
    5250:	pop	{r4, r5, fp, pc}

00005254 <btbb_packet_set_data@@Base>:
    5254:	push	{r4, r5, fp, lr}
    5258:	add	fp, sp, #8
    525c:	ldr	lr, [fp, #8]
    5260:	movw	ip, #3125	; 0xc35
    5264:	cmp	r2, ip
    5268:	movlt	ip, r2
    526c:	cmp	r2, #1
    5270:	blt	5294 <btbb_packet_set_data@@Base+0x40>
    5274:	movw	r2, #2824	; 0xb08
    5278:	mov	r4, #0
    527c:	add	r2, r0, r2
    5280:	ldrb	r5, [r1, r4]
    5284:	strb	r5, [r2, r4]
    5288:	add	r4, r4, #1
    528c:	cmp	r4, ip
    5290:	blt	5280 <btbb_packet_set_data@@Base+0x2c>
    5294:	movw	r1, #2822	; 0xb06
    5298:	strh	ip, [r0, r1]
    529c:	lsr	r1, lr, #1
    52a0:	strb	r3, [r0, #8]
    52a4:	str	r1, [r0, #2816]	; 0xb00
    52a8:	pop	{r4, r5, fp, pc}

000052ac <btbb_packet_get_flag@@Base>:
    52ac:	ldr	r0, [r0, #4]
    52b0:	mov	r2, #1
    52b4:	and	r0, r0, r2, lsl r1
    52b8:	cmp	r0, #0
    52bc:	movwne	r0, #1
    52c0:	bx	lr

000052c4 <btbb_get_symbols@@Base>:
    52c4:	movw	r1, #2824	; 0xb08
    52c8:	add	r0, r0, r1
    52cc:	bx	lr

000052d0 <btbb_packet_get_payload_length@@Base>:
    52d0:	ldr	r0, [r0, #64]	; 0x40
    52d4:	bx	lr

000052d8 <btbb_get_payload@@Base>:
    52d8:	add	r0, r0, #68	; 0x44
    52dc:	bx	lr

000052e0 <btbb_get_payload_packed@@Base>:
    52e0:	ldr	ip, [r0, #64]	; 0x40
    52e4:	cmp	ip, #1
    52e8:	blt	5330 <btbb_get_payload_packed@@Base+0x50>
    52ec:	vldr	d16, [pc, #68]	; 5338 <btbb_get_payload_packed@@Base+0x58>
    52f0:	add	r3, r0, #68	; 0x44
    52f4:	mov	r2, #0
    52f8:	vld1.8	{d17}, [r3]!
    52fc:	add	ip, r1, r2
    5300:	add	r2, r2, #1
    5304:	vshl.u8	d17, d17, d16
    5308:	vext.8	d18, d17, d16, #4
    530c:	vorr	d17, d18, d17
    5310:	vext.8	d18, d17, d16, #2
    5314:	vorr	d17, d17, d18
    5318:	vdup.8	d18, d17[1]
    531c:	vorr	d17, d17, d18
    5320:	vst1.8	{d17[0]}, [ip]
    5324:	ldr	ip, [r0, #64]	; 0x40
    5328:	cmp	r2, ip
    532c:	blt	52f8 <btbb_get_payload_packed@@Base+0x18>
    5330:	mov	r0, ip
    5334:	bx	lr
    5338:	movweq	r0, #8448	; 0x2100
    533c:	streq	r0, [r6, -r4, lsl #10]

00005340 <btbb_packet_get_type@@Base>:
    5340:	ldrb	r0, [r0, #18]
    5344:	bx	lr

00005348 <btbb_packet_get_lt_addr@@Base>:
    5348:	ldrb	r0, [r0, #19]
    534c:	bx	lr

00005350 <btbb_packet_get_header_flags@@Base>:
    5350:	ldrb	r0, [r0, #20]
    5354:	bx	lr

00005358 <btbb_packet_get_hec@@Base>:
    5358:	ldrb	r0, [r0, #21]
    535c:	bx	lr

00005360 <btbb_packet_get_header_packed@@Base>:
    5360:	add	r1, r0, #22
    5364:	mov	r0, #0
    5368:	mov	r2, #0
    536c:	ldrb	r3, [r1, r2]
    5370:	orr	r0, r0, r3, lsl r2
    5374:	add	r2, r2, #1
    5378:	cmp	r2, #18
    537c:	bne	536c <btbb_packet_get_header_packed@@Base+0xc>
    5380:	bx	lr

00005384 <crc_check@@Base>:
    5384:	push	{r4, sl, fp, lr}
    5388:	add	fp, sp, #8
    538c:	mov	r4, r1
    5390:	mov	r1, r0
    5394:	ldrb	r0, [r4, #18]
    5398:	sub	r2, r0, #2
    539c:	mov	r0, #1
    53a0:	cmp	r2, #13
    53a4:	bhi	547c <crc_check@@Base+0xf8>
    53a8:	add	r3, pc, #4
    53ac:	ldr	r2, [r3, r2, lsl #2]
    53b0:	add	pc, r3, r2
    53b4:	andeq	r0, r0, r8, asr r0
    53b8:	andeq	r0, r0, r8, lsr r0
    53bc:	andeq	r0, r0, r8, asr #32
    53c0:	andeq	r0, r0, r8, rrx
    53c4:	andeq	r0, r0, r8, asr #1
    53c8:	andeq	r0, r0, r8, ror r0
    53cc:	andeq	r0, r0, r8, lsr r0
    53d0:	andeq	r0, r0, r8, asr #1
    53d4:	andeq	r0, r0, r8, lsr r0
    53d8:	andeq	r0, r0, r8, asr #32
    53dc:	andeq	r0, r0, r8, lsl #1
    53e0:	muleq	r0, r8, r0
    53e4:	andeq	r0, r0, r8, lsr r0
    53e8:	andeq	r0, r0, r8, asr #32
    53ec:	mov	r0, r1
    53f0:	mov	r1, r4
    53f4:	bl	465c <DM@plt>
    53f8:	b	5458 <crc_check@@Base+0xd4>
    53fc:	mov	r0, r1
    5400:	mov	r1, r4
    5404:	bl	4878 <DH@plt>
    5408:	b	5458 <crc_check@@Base+0xd4>
    540c:	mov	r0, r1
    5410:	mov	r1, r4
    5414:	bl	4614 <fhs@plt>
    5418:	b	5458 <crc_check@@Base+0xd4>
    541c:	mov	r0, r1
    5420:	mov	r1, r4
    5424:	bl	4668 <HV@plt>
    5428:	b	5458 <crc_check@@Base+0xd4>
    542c:	mov	r0, r1
    5430:	mov	r1, r4
    5434:	bl	480c <EV3@plt>
    5438:	b	5458 <crc_check@@Base+0xd4>
    543c:	mov	r0, r1
    5440:	mov	r1, r4
    5444:	bl	4620 <EV4@plt>
    5448:	b	5458 <crc_check@@Base+0xd4>
    544c:	mov	r0, r1
    5450:	mov	r1, r4
    5454:	bl	4860 <EV5@plt>
    5458:	cmp	r0, #0
    545c:	beq	5484 <crc_check@@Base+0x100>
    5460:	cmp	r0, #2
    5464:	blt	547c <crc_check@@Base+0xf8>
    5468:	ldrb	r2, [r4, #18]
    546c:	mov	r1, #1
    5470:	cmp	r2, #7
    5474:	cmpne	r2, #13
    5478:	beq	54a8 <crc_check@@Base+0x124>
    547c:	mov	r1, r0
    5480:	b	54a8 <crc_check@@Base+0x124>
    5484:	ldrb	r2, [r4, #18]
    5488:	mov	r1, #1
    548c:	cmp	r2, #5
    5490:	bhi	54a8 <crc_check@@Base+0x124>
    5494:	mov	r3, #1
    5498:	mov	r4, #44	; 0x2c
    549c:	mov	r0, #0
    54a0:	tst	r4, r3, lsl r2
    54a4:	movne	r1, r0
    54a8:	mov	r0, r1
    54ac:	pop	{r4, sl, fp, pc}

000054b0 <fhs@@Base>:
    54b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54b4:	add	fp, sp, #28
    54b8:	sub	sp, sp, #20
    54bc:	mov	r7, r0
    54c0:	mov	r0, #20
    54c4:	mov	sl, r1
    54c8:	str	r0, [r1, #64]	; 0x40
    54cc:	movw	r0, #2822	; 0xb06
    54d0:	ldrh	r0, [r1, r0]
    54d4:	lsr	r1, r0, #1
    54d8:	mov	r0, #1
    54dc:	cmp	r1, #181	; 0xb5
    54e0:	bcc	5654 <fhs@@Base+0x1a4>
    54e4:	movw	r0, #2946	; 0xb82
    54e8:	mov	r1, #160	; 0xa0
    54ec:	add	r0, sl, r0
    54f0:	bl	5f1c <HV@@Base+0x238>
    54f4:	mov	r1, r0
    54f8:	mov	r0, #0
    54fc:	cmp	r1, #0
    5500:	str	r1, [sp, #12]
    5504:	beq	5654 <fhs@@Base+0x1a4>
    5508:	ldr	r0, [sl, #64]	; 0x40
    550c:	movw	r8, #1033	; 0x409
    5510:	movt	r8, #33026	; 0x8102
    5514:	str	r0, [sp, #16]
    5518:	cmp	r0, #1
    551c:	ldr	r9, [pc, #312]	; 565c <fhs@@Base+0x1ac>
    5520:	add	r9, pc, r9
    5524:	blt	558c <fhs@@Base+0xdc>
    5528:	ldr	r1, [pc, #304]	; 5660 <fhs@@Base+0x1b0>
    552c:	and	r0, r7, #63	; 0x3f
    5530:	ldr	r2, [sl, #4]
    5534:	ldr	r3, [sp, #12]
    5538:	add	r1, pc, r1
    553c:	and	r2, r2, #1
    5540:	ldrb	r0, [r1, r0]
    5544:	add	r1, sl, #68	; 0x44
    5548:	add	r7, r0, #18
    554c:	ldr	r0, [sp, #16]
    5550:	lsl	r0, r0, #3
    5554:	smmla	r5, r7, r8, r7
    5558:	cmp	r2, #0
    555c:	asr	r4, r5, #6
    5560:	add	r5, r4, r5, lsr #31
    5564:	rsb	r5, r5, r5, lsl #7
    5568:	sub	r7, r7, r5
    556c:	ldrb	r5, [r3]
    5570:	add	r3, r3, #1
    5574:	ldrbne	r4, [r9, r7]
    5578:	add	r7, r7, #1
    557c:	eorne	r5, r4, r5
    5580:	subs	r0, r0, #1
    5584:	strb	r5, [r1], #1
    5588:	bne	5554 <fhs@@Base+0xa4>
    558c:	mov	r0, sl
    5590:	bl	6120 <HV@@Base+0x43c>
    5594:	cmp	r0, #0
    5598:	bne	5648 <fhs@@Base+0x198>
    559c:	ldr	r0, [sp, #16]
    55a0:	mov	r7, #32
    55a4:	lsl	r0, r0, #3
    55a8:	str	r0, [sp, #8]
    55ac:	add	r0, sl, #68	; 0x44
    55b0:	str	r0, [sp, #4]
    55b4:	ldr	r0, [sp, #16]
    55b8:	cmp	r0, #1
    55bc:	blt	561c <fhs@@Base+0x16c>
    55c0:	ldr	r0, [pc, #156]	; 5664 <fhs@@Base+0x1b4>
    55c4:	ldr	r1, [sp, #12]
    55c8:	ldr	r2, [sp, #8]
    55cc:	ldr	r3, [sp, #4]
    55d0:	add	r0, pc, r0
    55d4:	ldrb	r0, [r0, r7]
    55d8:	add	r5, r0, #18
    55dc:	ldr	r0, [sl, #4]
    55e0:	and	r0, r0, #1
    55e4:	smmla	r4, r5, r8, r5
    55e8:	cmp	r0, #0
    55ec:	asr	r6, r4, #6
    55f0:	add	r6, r6, r4, lsr #31
    55f4:	ldrb	r4, [r1]
    55f8:	add	r1, r1, #1
    55fc:	rsb	r6, r6, r6, lsl #7
    5600:	sub	r5, r5, r6
    5604:	ldrbne	r6, [r9, r5]
    5608:	add	r5, r5, #1
    560c:	eorne	r4, r6, r4
    5610:	subs	r2, r2, #1
    5614:	strb	r4, [r3], #1
    5618:	bne	55e4 <fhs@@Base+0x134>
    561c:	mov	r0, sl
    5620:	bl	6120 <HV@@Base+0x43c>
    5624:	cmp	r0, #0
    5628:	bne	5648 <fhs@@Base+0x198>
    562c:	add	r7, r7, #1
    5630:	cmp	r7, #64	; 0x40
    5634:	bne	55b4 <fhs@@Base+0x104>
    5638:	ldr	r0, [sp, #12]
    563c:	bl	45d8 <free@plt>
    5640:	mov	r0, #0
    5644:	b	5654 <fhs@@Base+0x1a4>
    5648:	ldr	r0, [sp, #12]
    564c:	bl	45d8 <free@plt>
    5650:	mov	r0, #1000	; 0x3e8
    5654:	sub	sp, fp, #28
    5658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    565c:	andeq	r8, r0, r4, ror #17
    5660:	andeq	r8, r0, r6, asr #20
    5664:	andeq	r8, r0, lr, lsr #19

00005668 <DM@@Base>:
    5668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    566c:	add	fp, sp, #28
    5670:	sub	sp, sp, #12
    5674:	mov	r8, r0
    5678:	movw	r0, #2946	; 0xb82
    567c:	mov	r4, r1
    5680:	add	sl, r1, r0
    5684:	movw	r0, #2822	; 0xb06
    5688:	ldrh	r0, [r1, r0]
    568c:	ldrb	r1, [r1, #18]
    5690:	sub	r7, r0, #122	; 0x7a
    5694:	cmp	r1, #9
    5698:	bgt	56c4 <DM@@Base+0x5c>
    569c:	mov	r2, #1
    56a0:	cmp	r1, #3
    56a4:	beq	56dc <DM@@Base+0x74>
    56a8:	cmp	r1, #8
    56ac:	bne	57d0 <DM@@Base+0x168>
    56b0:	movw	r1, #3026	; 0xbd2
    56b4:	sub	r7, r0, #202	; 0xca
    56b8:	mov	r9, #12
    56bc:	add	sl, r4, r1
    56c0:	b	56ec <DM@@Base+0x84>
    56c4:	cmp	r1, #10
    56c8:	beq	56e4 <DM@@Base+0x7c>
    56cc:	cmp	r1, #14
    56d0:	bne	57d0 <DM@@Base+0x168>
    56d4:	mov	r9, #228	; 0xe4
    56d8:	b	56e8 <DM@@Base+0x80>
    56dc:	mov	r9, #20
    56e0:	b	56ec <DM@@Base+0x84>
    56e4:	mov	r9, #125	; 0x7d
    56e8:	mov	r2, #2
    56ec:	mov	r5, #1
    56f0:	mov	r0, sl
    56f4:	mov	r1, r8
    56f8:	mov	r3, r7
    56fc:	str	r4, [sp, #4]
    5700:	str	r5, [sp]
    5704:	bl	62b8 <HV@@Base+0x5d4>
    5708:	cmp	r0, #0
    570c:	beq	57d0 <DM@@Base+0x168>
    5710:	ldr	r6, [r4, #64]	; 0x40
    5714:	cmp	r6, r9
    5718:	bgt	57d4 <DM@@Base+0x16c>
    571c:	cmp	r7, r6, lsl #3
    5720:	blt	57d4 <DM@@Base+0x16c>
    5724:	lsl	r7, r6, #3
    5728:	mov	r0, sl
    572c:	mov	r1, r7
    5730:	bl	5f1c <HV@@Base+0x238>
    5734:	cmp	r0, #0
    5738:	mov	r5, #0
    573c:	beq	57d4 <DM@@Base+0x16c>
    5740:	cmp	r6, #1
    5744:	blt	57b4 <DM@@Base+0x14c>
    5748:	ldr	r2, [pc, #144]	; 57e0 <DM@@Base+0x178>
    574c:	and	r1, r8, #63	; 0x3f
    5750:	movw	lr, #1033	; 0x409
    5754:	mov	r5, r0
    5758:	movt	lr, #33026	; 0x8102
    575c:	add	r2, pc, r2
    5760:	ldrb	r1, [r2, r1]
    5764:	ldr	r2, [r4, #4]
    5768:	ldr	ip, [pc, #116]	; 57e4 <DM@@Base+0x17c>
    576c:	add	r6, r1, #18
    5770:	add	r1, r4, #68	; 0x44
    5774:	and	r8, r2, #1
    5778:	add	ip, pc, ip
    577c:	smmla	r3, r6, lr, r6
    5780:	cmp	r8, #0
    5784:	asr	r2, r3, #6
    5788:	add	r2, r2, r3, lsr #31
    578c:	ldrb	r3, [r5]
    5790:	add	r5, r5, #1
    5794:	rsb	r2, r2, r2, lsl #7
    5798:	sub	r6, r6, r2
    579c:	ldrbne	r2, [ip, r6]
    57a0:	add	r6, r6, #1
    57a4:	eorne	r3, r2, r3
    57a8:	subs	r7, r7, #1
    57ac:	strb	r3, [r1], #1
    57b0:	bne	577c <DM@@Base+0x114>
    57b4:	bl	45d8 <free@plt>
    57b8:	mov	r0, r4
    57bc:	bl	6120 <HV@@Base+0x43c>
    57c0:	cmp	r0, #0
    57c4:	mov	r5, #10
    57c8:	movweq	r5, #2
    57cc:	b	57d4 <DM@@Base+0x16c>
    57d0:	mov	r5, #0
    57d4:	mov	r0, r5
    57d8:	sub	sp, fp, #28
    57dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57e0:	andeq	r8, r0, r2, lsr #16
    57e4:	andeq	r8, r0, ip, lsl #13

000057e8 <DH@@Base>:
    57e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    57ec:	add	fp, sp, #24
    57f0:	sub	sp, sp, #8
    57f4:	mov	r8, r0
    57f8:	mov	r5, r1
    57fc:	movw	r0, #2822	; 0xb06
    5800:	mov	r6, #0
    5804:	ldrh	r1, [r1, r0]
    5808:	ldrb	r0, [r5, #18]
    580c:	cmp	r0, #10
    5810:	bgt	5830 <DH@@Base+0x48>
    5814:	mov	r2, #1
    5818:	mov	r4, #30
    581c:	cmp	r0, #4
    5820:	beq	5854 <DH@@Base+0x6c>
    5824:	cmp	r0, #9
    5828:	beq	5854 <DH@@Base+0x6c>
    582c:	b	5930 <DH@@Base+0x148>
    5830:	cmp	r0, #15
    5834:	beq	584c <DH@@Base+0x64>
    5838:	cmp	r0, #11
    583c:	bne	5930 <DH@@Base+0x148>
    5840:	mov	r2, #2
    5844:	mov	r4, #187	; 0xbb
    5848:	b	5854 <DH@@Base+0x6c>
    584c:	mov	r2, #2
    5850:	movw	r4, #343	; 0x157
    5854:	movw	r0, #2946	; 0xb82
    5858:	sub	r7, r1, #122	; 0x7a
    585c:	mov	r6, #0
    5860:	mov	r1, r8
    5864:	str	r5, [sp, #4]
    5868:	add	r0, r5, r0
    586c:	mov	r3, r7
    5870:	str	r6, [sp]
    5874:	bl	62b8 <HV@@Base+0x5d4>
    5878:	cmp	r0, #0
    587c:	beq	5930 <DH@@Base+0x148>
    5880:	ldr	r0, [r5, #64]	; 0x40
    5884:	mov	r6, #1
    5888:	cmp	r0, r4
    588c:	bgt	5930 <DH@@Base+0x148>
    5890:	cmp	r7, r0, lsl #3
    5894:	blt	5930 <DH@@Base+0x148>
    5898:	cmp	r0, #1
    589c:	blt	590c <DH@@Base+0x124>
    58a0:	ldr	r2, [pc, #148]	; 593c <DH@@Base+0x154>
    58a4:	and	r1, r8, #63	; 0x3f
    58a8:	lsl	r0, r0, #3
    58ac:	mov	r4, r5
    58b0:	add	r2, pc, r2
    58b4:	ldrb	r1, [r2, r1]
    58b8:	movw	r2, #1033	; 0x409
    58bc:	movt	r2, #33026	; 0x8102
    58c0:	add	r7, r1, #18
    58c4:	ldr	r1, [r5, #4]
    58c8:	ldr	ip, [pc, #112]	; 5940 <DH@@Base+0x158>
    58cc:	and	r1, r1, #1
    58d0:	add	ip, pc, ip
    58d4:	smmla	r6, r7, r2, r7
    58d8:	cmp	r1, #0
    58dc:	asr	r3, r6, #6
    58e0:	add	r3, r3, r6, lsr #31
    58e4:	ldrb	r6, [r4, #2946]	; 0xb82
    58e8:	rsb	r3, r3, r3, lsl #7
    58ec:	sub	r7, r7, r3
    58f0:	ldrbne	r3, [ip, r7]
    58f4:	add	r7, r7, #1
    58f8:	eorne	r6, r3, r6
    58fc:	subs	r0, r0, #1
    5900:	strb	r6, [r4, #68]	; 0x44
    5904:	add	r4, r4, #1
    5908:	bne	58d4 <DH@@Base+0xec>
    590c:	ldrb	r0, [r5, #18]
    5910:	mov	r6, #2
    5914:	cmp	r0, #9
    5918:	beq	5930 <DH@@Base+0x148>
    591c:	mov	r0, r5
    5920:	bl	6120 <HV@@Base+0x43c>
    5924:	cmp	r0, #0
    5928:	mov	r6, #10
    592c:	movweq	r6, #2
    5930:	mov	r0, r6
    5934:	sub	sp, fp, #24
    5938:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    593c:	andeq	r8, r0, lr, asr #13
    5940:	andeq	r8, r0, r4, lsr r5

00005944 <EV3@@Base>:
    5944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5948:	add	fp, sp, #28
    594c:	sub	sp, sp, #4
    5950:	mov	r4, r1
    5954:	mov	r1, #0
    5958:	movw	r2, #2822	; 0xb06
    595c:	movw	r6, #1033	; 0x409
    5960:	and	sl, r0, #63	; 0x3f
    5964:	str	r1, [r4, #64]	; 0x40
    5968:	movt	r6, #33026	; 0x8102
    596c:	add	ip, r4, #68	; 0x44
    5970:	ldrh	r2, [r4, r2]
    5974:	ldr	lr, [pc, #220]	; 5a58 <EV3@@Base+0x114>
    5978:	ldr	r7, [pc, #220]	; 5a5c <EV3@@Base+0x118>
    597c:	sub	r9, r2, #122	; 0x7a
    5980:	add	lr, pc, lr
    5984:	add	r7, pc, r7
    5988:	str	r9, [sp]
    598c:	add	r0, r1, #1
    5990:	lsl	r0, r0, #3
    5994:	cmp	r0, r9
    5998:	bgt	5a44 <EV3@@Base+0x100>
    599c:	lsl	r2, r1, #3
    59a0:	add	r0, ip, r1, lsl #3
    59a4:	ldrb	r1, [lr, sl]
    59a8:	add	r1, r2, r1
    59ac:	add	r2, r1, #18
    59b0:	mov	r1, #0
    59b4:	smmla	r3, r2, r6, r2
    59b8:	asr	r5, r3, #6
    59bc:	add	r3, r5, r3, lsr #31
    59c0:	ldrb	r5, [r4, #4]
    59c4:	sub	r3, r3, r3, lsl #7
    59c8:	add	r2, r2, r3
    59cc:	add	r3, r4, r1
    59d0:	tst	r5, #1
    59d4:	ldrbne	r5, [r7, r2]
    59d8:	ldrb	r3, [r3, #2946]	; 0xb82
    59dc:	add	r2, r2, #1
    59e0:	eorne	r3, r5, r3
    59e4:	strb	r3, [r0, r1]
    59e8:	add	r1, r1, #1
    59ec:	cmp	r1, #8
    59f0:	bne	59b4 <EV3@@Base+0x70>
    59f4:	ldr	r8, [r4, #64]	; 0x40
    59f8:	cmp	r8, #3
    59fc:	blt	5a2c <EV3@@Base+0xe8>
    5a00:	mov	r0, r4
    5a04:	mov	r9, sl
    5a08:	mov	r5, ip
    5a0c:	mov	sl, lr
    5a10:	bl	6120 <HV@@Base+0x43c>
    5a14:	mov	lr, sl
    5a18:	mov	sl, r9
    5a1c:	ldr	r9, [sp]
    5a20:	mov	ip, r5
    5a24:	cmp	r0, #0
    5a28:	bne	5a4c <EV3@@Base+0x108>
    5a2c:	add	r1, r8, #1
    5a30:	cmp	r1, #32
    5a34:	str	r1, [r4, #64]	; 0x40
    5a38:	blt	598c <EV3@@Base+0x48>
    5a3c:	mov	r0, #2
    5a40:	b	5a50 <EV3@@Base+0x10c>
    5a44:	mov	r0, #1
    5a48:	b	5a50 <EV3@@Base+0x10c>
    5a4c:	mov	r0, #10
    5a50:	sub	sp, fp, #28
    5a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a58:	strdeq	r8, [r0], -lr
    5a5c:	andeq	r8, r0, r0, lsl #9

00005a60 <EV4@@Base>:
    5a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a64:	add	fp, sp, #28
    5a68:	sub	sp, sp, #20
    5a6c:	mov	r5, r1
    5a70:	mov	r1, #1
    5a74:	and	r0, r0, #63	; 0x3f
    5a78:	movw	sl, #1033	; 0x409
    5a7c:	mov	r9, #0
    5a80:	mov	r4, #0
    5a84:	str	r1, [r5, #64]	; 0x40
    5a88:	movw	r1, #2946	; 0xb82
    5a8c:	str	r0, [sp, #4]
    5a90:	movt	sl, #33026	; 0x8102
    5a94:	add	r1, r5, r1
    5a98:	str	r1, [sp, #8]
    5a9c:	movw	r1, #2822	; 0xb06
    5aa0:	ldrh	r1, [r5, r1]
    5aa4:	sub	r1, r1, #122	; 0x7a
    5aa8:	str	r1, [sp, #12]
    5aac:	ldr	r8, [pc, #268]	; 5bc0 <EV4@@Base+0x160>
    5ab0:	add	r8, pc, r8
    5ab4:	ldr	r0, [sp, #12]
    5ab8:	add	r6, r4, #15
    5abc:	cmp	r6, r0
    5ac0:	bgt	5ba8 <EV4@@Base+0x148>
    5ac4:	ldr	r0, [sp, #8]
    5ac8:	mov	r1, #10
    5acc:	add	r0, r0, r4
    5ad0:	bl	5f1c <HV@@Base+0x238>
    5ad4:	cmp	r0, #0
    5ad8:	beq	5bb0 <EV4@@Base+0x150>
    5adc:	str	r6, [sp, #16]
    5ae0:	ldr	r2, [sp, #4]
    5ae4:	add	r1, r5, r9
    5ae8:	ldr	r3, [pc, #212]	; 5bc4 <EV4@@Base+0x164>
    5aec:	add	r3, pc, r3
    5af0:	ldrb	r2, [r3, r2]
    5af4:	mov	r3, #0
    5af8:	add	r2, r9, r2
    5afc:	add	r7, r2, #18
    5b00:	ldr	r2, [r5, #4]
    5b04:	and	r2, r2, #1
    5b08:	smmla	r4, r7, sl, r7
    5b0c:	cmp	r2, #0
    5b10:	asr	r6, r4, #6
    5b14:	add	r6, r6, r4, lsr #31
    5b18:	ldrb	r4, [r0, -r3]
    5b1c:	rsb	r6, r6, r6, lsl #7
    5b20:	sub	r7, r7, r6
    5b24:	ldrbne	r6, [r8, r7]
    5b28:	add	r7, r7, #1
    5b2c:	eorne	r4, r6, r4
    5b30:	sub	r6, r1, r3
    5b34:	sub	r3, r3, #1
    5b38:	cmn	r3, #10
    5b3c:	strb	r4, [r6, #68]	; 0x44
    5b40:	bne	5b08 <EV4@@Base+0xa8>
    5b44:	bl	45d8 <free@plt>
    5b48:	ldr	r0, [r5, #64]	; 0x40
    5b4c:	cmp	r9, r0, lsl #3
    5b50:	blt	5b80 <EV4@@Base+0x120>
    5b54:	add	r4, r0, #1
    5b58:	lsl	r7, r0, #3
    5b5c:	mov	r0, r5
    5b60:	bl	6120 <HV@@Base+0x43c>
    5b64:	cmp	r0, #0
    5b68:	bne	5b9c <EV4@@Base+0x13c>
    5b6c:	add	r7, r7, #8
    5b70:	str	r4, [r5, #64]	; 0x40
    5b74:	add	r4, r4, #1
    5b78:	cmp	r7, r9
    5b7c:	ble	5b5c <EV4@@Base+0xfc>
    5b80:	ldr	r4, [sp, #16]
    5b84:	movw	r0, #1470	; 0x5be
    5b88:	add	r9, r9, #10
    5b8c:	cmp	r4, r0
    5b90:	bcc	5ab4 <EV4@@Base+0x54>
    5b94:	mov	r0, #2
    5b98:	b	5ba0 <EV4@@Base+0x140>
    5b9c:	mov	r0, #10
    5ba0:	sub	sp, fp, #28
    5ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ba8:	mov	r0, #1
    5bac:	b	5ba0 <EV4@@Base+0x140>
    5bb0:	cmp	r4, #44	; 0x2c
    5bb4:	mov	r0, #0
    5bb8:	movwhi	r0, #1
    5bbc:	b	5ba0 <EV4@@Base+0x140>
    5bc0:	andeq	r8, r0, r4, asr r3
    5bc4:	muleq	r0, r2, r4

00005bc8 <EV5@@Base>:
    5bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bcc:	add	fp, sp, #28
    5bd0:	sub	sp, sp, #4
    5bd4:	mov	r4, r1
    5bd8:	mov	r1, #0
    5bdc:	movw	r2, #2822	; 0xb06
    5be0:	movw	r6, #1033	; 0x409
    5be4:	and	sl, r0, #63	; 0x3f
    5be8:	str	r1, [r4, #64]	; 0x40
    5bec:	movt	r6, #33026	; 0x8102
    5bf0:	add	ip, r4, #68	; 0x44
    5bf4:	ldrh	r2, [r4, r2]
    5bf8:	ldr	lr, [pc, #220]	; 5cdc <EV5@@Base+0x114>
    5bfc:	ldr	r7, [pc, #220]	; 5ce0 <EV5@@Base+0x118>
    5c00:	sub	r9, r2, #122	; 0x7a
    5c04:	add	lr, pc, lr
    5c08:	add	r7, pc, r7
    5c0c:	str	r9, [sp]
    5c10:	add	r0, r1, #1
    5c14:	lsl	r0, r0, #3
    5c18:	cmp	r0, r9
    5c1c:	bgt	5cc8 <EV5@@Base+0x100>
    5c20:	lsl	r2, r1, #3
    5c24:	add	r0, ip, r1, lsl #3
    5c28:	ldrb	r1, [lr, sl]
    5c2c:	add	r1, r2, r1
    5c30:	add	r2, r1, #18
    5c34:	mov	r1, #0
    5c38:	smmla	r3, r2, r6, r2
    5c3c:	asr	r5, r3, #6
    5c40:	add	r3, r5, r3, lsr #31
    5c44:	ldrb	r5, [r4, #4]
    5c48:	sub	r3, r3, r3, lsl #7
    5c4c:	add	r2, r2, r3
    5c50:	add	r3, r4, r1
    5c54:	tst	r5, #1
    5c58:	ldrbne	r5, [r7, r2]
    5c5c:	ldrb	r3, [r3, #2946]	; 0xb82
    5c60:	add	r2, r2, #1
    5c64:	eorne	r3, r5, r3
    5c68:	strb	r3, [r0, r1]
    5c6c:	add	r1, r1, #1
    5c70:	cmp	r1, #8
    5c74:	bne	5c38 <EV5@@Base+0x70>
    5c78:	ldr	r8, [r4, #64]	; 0x40
    5c7c:	cmp	r8, #3
    5c80:	blt	5cb0 <EV5@@Base+0xe8>
    5c84:	mov	r0, r4
    5c88:	mov	r9, sl
    5c8c:	mov	r5, ip
    5c90:	mov	sl, lr
    5c94:	bl	6120 <HV@@Base+0x43c>
    5c98:	mov	lr, sl
    5c9c:	mov	sl, r9
    5ca0:	ldr	r9, [sp]
    5ca4:	mov	ip, r5
    5ca8:	cmp	r0, #0
    5cac:	bne	5cd0 <EV5@@Base+0x108>
    5cb0:	add	r1, r8, #1
    5cb4:	cmp	r1, #182	; 0xb6
    5cb8:	str	r1, [r4, #64]	; 0x40
    5cbc:	blt	5c10 <EV5@@Base+0x48>
    5cc0:	mov	r0, #2
    5cc4:	b	5cd4 <EV5@@Base+0x10c>
    5cc8:	mov	r0, #1
    5ccc:	b	5cd4 <EV5@@Base+0x10c>
    5cd0:	mov	r0, #10
    5cd4:	sub	sp, fp, #28
    5cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cdc:	andeq	r8, r0, sl, ror r3
    5ce0:	strdeq	r8, [r0], -ip

00005ce4 <HV@@Base>:
    5ce4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5ce8:	add	fp, sp, #24
    5cec:	sub	sp, sp, #80	; 0x50
    5cf0:	mov	r6, r0
    5cf4:	mov	r0, #0
    5cf8:	mov	r5, r1
    5cfc:	str	r0, [r1, #40]	; 0x28
    5d00:	movw	r1, #2822	; 0xb06
    5d04:	ldrh	r1, [r5, r1]
    5d08:	lsr	r1, r1, #1
    5d0c:	cmp	r1, #180	; 0xb4
    5d10:	bhi	5d28 <HV@@Base+0x44>
    5d14:	str	r0, [r5, #64]	; 0x40
    5d18:	mov	r8, #1
    5d1c:	mov	r0, r8
    5d20:	sub	sp, fp, #24
    5d24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5d28:	ldrb	r1, [r5, #18]
    5d2c:	mov	r8, #2
    5d30:	cmp	r1, #7
    5d34:	beq	5de8 <HV@@Base+0x104>
    5d38:	movw	r0, #2946	; 0xb82
    5d3c:	cmp	r1, #6
    5d40:	add	r0, r5, r0
    5d44:	beq	5e68 <HV@@Base+0x184>
    5d48:	cmp	r1, #5
    5d4c:	bne	5d1c <HV@@Base+0x38>
    5d50:	mov	r7, sp
    5d54:	mov	r2, #80	; 0x50
    5d58:	mov	r1, r7
    5d5c:	bl	65f4 <HV@@Base+0x910>
    5d60:	cmp	r0, #0
    5d64:	beq	5efc <HV@@Base+0x218>
    5d68:	mov	r0, #10
    5d6c:	movw	r3, #1033	; 0x409
    5d70:	str	r0, [r5, #64]	; 0x40
    5d74:	movt	r3, #33026	; 0x8102
    5d78:	ldr	r1, [r5, #4]
    5d7c:	orr	r0, r1, #128	; 0x80
    5d80:	and	r1, r1, #1
    5d84:	str	r0, [r5, #4]
    5d88:	and	r0, r6, #63	; 0x3f
    5d8c:	ldr	r2, [pc, #368]	; 5f04 <HV@@Base+0x220>
    5d90:	ldr	ip, [pc, #368]	; 5f08 <HV@@Base+0x224>
    5d94:	add	r2, pc, r2
    5d98:	add	ip, pc, ip
    5d9c:	ldrb	r0, [r2, r0]
    5da0:	mov	r2, #0
    5da4:	add	r4, r0, #18
    5da8:	add	r0, r5, #68	; 0x44
    5dac:	smmla	r5, r4, r3, r4
    5db0:	cmp	r1, #0
    5db4:	asr	r6, r5, #6
    5db8:	add	r6, r6, r5, lsr #31
    5dbc:	rsb	r6, r6, r6, lsl #7
    5dc0:	sub	r5, r4, r6
    5dc4:	ldrb	r4, [r7, r2]
    5dc8:	ldrbne	r6, [ip, r5]
    5dcc:	eorne	r4, r6, r4
    5dd0:	strb	r4, [r0, r2]
    5dd4:	add	r2, r2, #1
    5dd8:	add	r4, r5, #1
    5ddc:	cmp	r2, #80	; 0x50
    5de0:	bne	5dac <HV@@Base+0xc8>
    5de4:	b	5d1c <HV@@Base+0x38>
    5de8:	mov	r0, #30
    5dec:	str	r0, [r5, #64]	; 0x40
    5df0:	ldr	r0, [r5, #4]
    5df4:	orr	r1, r0, #128	; 0x80
    5df8:	and	r0, r0, #1
    5dfc:	str	r1, [r5, #4]
    5e00:	and	r1, r6, #63	; 0x3f
    5e04:	ldr	r2, [pc, #264]	; 5f14 <HV@@Base+0x230>
    5e08:	ldr	ip, [pc, #264]	; 5f18 <HV@@Base+0x234>
    5e0c:	add	r2, pc, r2
    5e10:	add	ip, pc, ip
    5e14:	ldrb	r1, [r2, r1]
    5e18:	movw	r2, #1033	; 0x409
    5e1c:	movt	r2, #33026	; 0x8102
    5e20:	add	r7, r1, #18
    5e24:	mov	r1, #0
    5e28:	smmla	r6, r7, r2, r7
    5e2c:	cmp	r0, #0
    5e30:	asr	r4, r6, #6
    5e34:	add	r6, r4, r6, lsr #31
    5e38:	rsb	r6, r6, r6, lsl #7
    5e3c:	sub	r7, r7, r6
    5e40:	add	r6, r5, r1
    5e44:	add	r1, r1, #1
    5e48:	ldrbne	r3, [ip, r7]
    5e4c:	ldrb	r4, [r6, #2946]	; 0xb82
    5e50:	add	r7, r7, #1
    5e54:	eorne	r4, r3, r4
    5e58:	cmp	r1, #240	; 0xf0
    5e5c:	strb	r4, [r6, #68]	; 0x44
    5e60:	bne	5e28 <HV@@Base+0x144>
    5e64:	b	5d1c <HV@@Base+0x38>
    5e68:	mov	r1, #160	; 0xa0
    5e6c:	bl	5f1c <HV@@Base+0x238>
    5e70:	cmp	r0, #0
    5e74:	beq	5efc <HV@@Base+0x218>
    5e78:	mov	r1, #20
    5e7c:	movw	r7, #1033	; 0x409
    5e80:	str	r1, [r5, #64]	; 0x40
    5e84:	movt	r7, #33026	; 0x8102
    5e88:	ldr	r2, [r5, #4]
    5e8c:	orr	r1, r2, #128	; 0x80
    5e90:	and	r2, r2, #1
    5e94:	str	r1, [r5, #4]
    5e98:	and	r1, r6, #63	; 0x3f
    5e9c:	ldr	r3, [pc, #104]	; 5f0c <HV@@Base+0x228>
    5ea0:	ldr	ip, [pc, #104]	; 5f10 <HV@@Base+0x22c>
    5ea4:	add	r3, pc, r3
    5ea8:	add	ip, pc, ip
    5eac:	ldrb	r1, [r3, r1]
    5eb0:	mov	r3, #0
    5eb4:	add	r4, r1, #18
    5eb8:	add	r1, r5, #68	; 0x44
    5ebc:	smmla	r5, r4, r7, r4
    5ec0:	cmp	r2, #0
    5ec4:	asr	r6, r5, #6
    5ec8:	add	r6, r6, r5, lsr #31
    5ecc:	rsb	r6, r6, r6, lsl #7
    5ed0:	sub	r5, r4, r6
    5ed4:	ldrb	r4, [r0, r3]
    5ed8:	ldrbne	r6, [ip, r5]
    5edc:	eorne	r4, r6, r4
    5ee0:	strb	r4, [r1, r3]
    5ee4:	add	r3, r3, #1
    5ee8:	add	r4, r5, #1
    5eec:	cmp	r3, #160	; 0xa0
    5ef0:	bne	5ebc <HV@@Base+0x1d8>
    5ef4:	bl	45d8 <free@plt>
    5ef8:	b	5d1c <HV@@Base+0x38>
    5efc:	mov	r8, #0
    5f00:	b	5d1c <HV@@Base+0x38>
    5f04:	andeq	r8, r0, sl, ror #3
    5f08:	andeq	r8, r0, ip, rrx
    5f0c:	ldrdeq	r8, [r0], -sl
    5f10:	andeq	r7, r0, ip, asr pc
    5f14:	andeq	r8, r0, r2, ror r1
    5f18:	strdeq	r7, [r0], -r4
    5f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f20:	add	fp, sp, #28
    5f24:	sub	sp, sp, #4
    5f28:	mov	r8, r0
    5f2c:	movw	r0, #26215	; 0x6667
    5f30:	mov	r9, r1
    5f34:	movt	r0, #26214	; 0x6666
    5f38:	smmul	r0, r1, r0
    5f3c:	lsr	r1, r0, #2
    5f40:	add	r0, r1, r0, lsr #31
    5f44:	add	r0, r0, r0, lsl #2
    5f48:	sub	r0, r9, r0, lsl #1
    5f4c:	uxtb	r0, r0
    5f50:	sub	r1, r9, r0
    5f54:	cmp	r0, #0
    5f58:	addne	r9, r1, #10
    5f5c:	mov	r0, r9
    5f60:	bl	46ec <malloc@plt>
    5f64:	cmp	r9, #1
    5f68:	blt	6114 <HV@@Base+0x430>
    5f6c:	mov	sl, #0
    5f70:	mov	r3, #1
    5f74:	mov	r5, r8
    5f78:	mov	r2, #0
    5f7c:	rsb	r1, sl, sl, lsl #4
    5f80:	add	r7, sl, sl, lsl #2
    5f84:	mov	r6, #0
    5f88:	add	r1, r8, r1
    5f8c:	add	r7, r0, r7, lsl #1
    5f90:	vld1.8	{d16}, [r1]
    5f94:	ldrh	r1, [r1, #8]
    5f98:	strh	r1, [r7, #8]
    5f9c:	mov	r1, #0
    5fa0:	vst1.8	{d16}, [r7]
    5fa4:	ldrb	r7, [r5, r1]
    5fa8:	orr	r6, r6, r7, lsl r1
    5fac:	add	r1, r1, #1
    5fb0:	cmp	r1, #10
    5fb4:	bne	5fa4 <HV@@Base+0x2c0>
    5fb8:	mov	r7, #0
    5fbc:	mov	r1, #0
    5fc0:	add	r4, r5, r1
    5fc4:	ldrb	r4, [r4, #10]
    5fc8:	orr	r7, r7, r4, lsl r1
    5fcc:	add	r1, r1, #1
    5fd0:	cmp	r1, #5
    5fd4:	bne	5fc0 <HV@@Base+0x2dc>
    5fd8:	ldr	r1, [pc, #316]	; 611c <HV@@Base+0x438>
    5fdc:	uxth	r4, r6
    5fe0:	mov	r6, #0
    5fe4:	mov	ip, #0
    5fe8:	add	r1, pc, r1
    5fec:	tst	r4, r3, lsl ip
    5ff0:	add	ip, ip, #1
    5ff4:	ldrhne	lr, [r1]
    5ff8:	add	r1, r1, #2
    5ffc:	eorne	r6, lr, r6
    6000:	cmp	ip, #10
    6004:	bne	5fec <HV@@Base+0x308>
    6008:	uxth	r1, r6
    600c:	eor	r1, r7, r1, lsr #10
    6010:	sub	r7, r1, #1
    6014:	and	r7, r1, r7
    6018:	tst	r7, #255	; 0xff
    601c:	beq	60f4 <HV@@Base+0x410>
    6020:	mvn	r7, #6
    6024:	uxtab	r1, r7, r1
    6028:	cmp	r1, #24
    602c:	bhi	610c <HV@@Base+0x428>
    6030:	add	r6, pc, #8
    6034:	mov	r7, r2
    6038:	ldr	r1, [r6, r1, lsl #2]
    603c:	add	pc, r6, r1
    6040:	andeq	r0, r0, r4, rrx
    6044:	andeq	r0, r0, ip, asr #1
    6048:	andeq	r0, r0, ip, asr #1
    604c:	andeq	r0, r0, ip, asr #1
    6050:	andeq	r0, r0, r8, lsr #1
    6054:	andeq	r0, r0, ip, asr #1
    6058:	andeq	r0, r0, ip, rrx
    605c:	andeq	r0, r0, r4, ror r0
    6060:	andeq	r0, r0, ip, asr #1
    6064:	andeq	r0, r0, ip, asr #1
    6068:	andeq	r0, r0, ip, asr #1
    606c:	andeq	r0, r0, ip, asr #1
    6070:	andeq	r0, r0, ip, ror r0
    6074:	andeq	r0, r0, ip, asr #1
    6078:	andeq	r0, r0, r4, lsl #1
    607c:	andeq	r0, r0, ip, lsl #1
    6080:	andeq	r0, r0, ip, asr #1
    6084:	andeq	r0, r0, ip, asr #1
    6088:	andeq	r0, r0, ip, asr #1
    608c:	muleq	r0, r4, r0
    6090:	andeq	r0, r0, ip, asr #1
    6094:	muleq	r0, ip, r0
    6098:	andeq	r0, r0, ip, asr #1
    609c:	andeq	r0, r0, ip, asr #1
    60a0:	andeq	r0, r0, r4, lsr #1
    60a4:	add	r7, r2, #2
    60a8:	b	60e8 <HV@@Base+0x404>
    60ac:	add	r7, r2, #6
    60b0:	b	60e8 <HV@@Base+0x404>
    60b4:	add	r7, r2, #3
    60b8:	b	60e8 <HV@@Base+0x404>
    60bc:	add	r7, r2, #5
    60c0:	b	60e8 <HV@@Base+0x404>
    60c4:	add	r7, r2, #9
    60c8:	b	60e8 <HV@@Base+0x404>
    60cc:	orr	r7, r2, #1
    60d0:	b	60e8 <HV@@Base+0x404>
    60d4:	add	r7, r2, #7
    60d8:	b	60e8 <HV@@Base+0x404>
    60dc:	add	r7, r2, #4
    60e0:	b	60e8 <HV@@Base+0x404>
    60e4:	add	r7, r2, #8
    60e8:	ldrb	r1, [r0, r7]
    60ec:	eor	r1, r1, #1
    60f0:	strb	r1, [r0, r7]
    60f4:	add	r2, r2, #10
    60f8:	add	r5, r5, #15
    60fc:	add	sl, sl, #1
    6100:	cmp	r2, r9
    6104:	blt	5f7c <HV@@Base+0x298>
    6108:	b	6114 <HV@@Base+0x430>
    610c:	bl	45d8 <free@plt>
    6110:	mov	r0, #0
    6114:	sub	sp, fp, #28
    6118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    611c:	andeq	r7, r0, r8, lsl #28
    6120:	push	{r4, sl, fp, lr}
    6124:	add	fp, sp, #8
    6128:	sub	sp, sp, #8
    612c:	ldrb	r1, [r0, #9]
    6130:	mov	r2, #2
    6134:	lsl	r3, r1, #7
    6138:	and	r2, r2, r1, lsr #5
    613c:	orr	r3, r3, r1, lsr #7
    6140:	orr	r2, r3, r2
    6144:	mov	r3, #4
    6148:	and	r3, r3, r1, lsr #3
    614c:	orr	r2, r2, r3
    6150:	mov	r3, #8
    6154:	and	r3, r3, r1, lsr #1
    6158:	orr	r2, r2, r3
    615c:	and	r3, r1, #8
    6160:	orr	r2, r2, r3, lsl #1
    6164:	and	r3, r1, #4
    6168:	and	r1, r1, #2
    616c:	orr	r2, r2, r3, lsl #3
    6170:	mvn	r3, #15
    6174:	orr	r1, r2, r1, lsl #5
    6178:	ldr	r2, [r0, #64]	; 0x40
    617c:	lsl	lr, r1, #8
    6180:	add	ip, r3, r2, lsl #3
    6184:	cmp	ip, #1
    6188:	blt	61c8 <HV@@Base+0x4e4>
    618c:	mov	r2, #0
    6190:	mov	r3, #0
    6194:	add	r2, r0, r2
    6198:	uxth	r1, lr
    619c:	add	r3, r3, #1
    61a0:	ldrb	r2, [r2, #68]	; 0x44
    61a4:	eor	r2, lr, r2
    61a8:	lsl	r4, r2, #15
    61ac:	and	r2, r2, #1
    61b0:	orr	r1, r4, r1, lsr #1
    61b4:	eor	r1, r1, r2, lsl #10
    61b8:	eor	lr, r1, r2, lsl #3
    61bc:	uxth	r2, r3
    61c0:	cmp	ip, r2
    61c4:	bgt	6194 <HV@@Base+0x4b0>
    61c8:	add	r0, r0, ip
    61cc:	add	r0, r0, #68	; 0x44
    61d0:	vld1.8	{d16}, [r0]!
    61d4:	ldr	r1, [r0]
    61d8:	ldr	r0, [r0, #4]
    61dc:	str	r0, [sp, #4]
    61e0:	str	r1, [sp]
    61e4:	mov	r0, sp
    61e8:	vmovl.u8	q9, d16
    61ec:	vld1.8	{d17}, [r0 :64]
    61f0:	add	r0, pc, #128	; 0x80
    61f4:	add	r1, pc, #140	; 0x8c
    61f8:	add	r2, pc, #152	; 0x98
    61fc:	add	r3, pc, #164	; 0xa4
    6200:	vld1.64	{d22-d23}, [r1]
    6204:	vld1.64	{d20-d21}, [r3]
    6208:	vld1.64	{d24-d25}, [r0]
    620c:	vld1.64	{d28-d29}, [r2]
    6210:	uxth	r1, lr
    6214:	vmovl.u16	q13, d19
    6218:	vmovl.u16	q9, d18
    621c:	vmovl.u8	q8, d17
    6220:	vshl.u32	q10, q13, q10
    6224:	vshl.u32	q9, q9, q12
    6228:	vmovl.u16	q15, d17
    622c:	vmovl.u16	q8, d16
    6230:	vshl.u32	q8, q8, q14
    6234:	vshl.u32	q11, q15, q11
    6238:	vorr	q10, q10, q11
    623c:	vorr	q8, q9, q8
    6240:	vmovn.i32	d19, q10
    6244:	vmovn.i32	d18, q8
    6248:	vorr	d16, d19, d19
    624c:	vorr	q8, q8, q9
    6250:	vext.8	q9, q8, q8, #4
    6254:	vorr	q8, q8, q9
    6258:	vdup.16	q9, d16[1]
    625c:	vorr	q8, q8, q9
    6260:	vmov.u16	r0, d16[0]
    6264:	sub	r0, r1, r0
    6268:	clz	r0, r0
    626c:	lsr	r0, r0, #5
    6270:	sub	sp, fp, #8
    6274:	pop	{r4, sl, fp, pc}
    6278:	andeq	r0, r0, r0
    627c:	andeq	r0, r0, r1
    6280:	andeq	r0, r0, r2
    6284:	andeq	r0, r0, r3
    6288:	andeq	r0, r0, ip
    628c:	andeq	r0, r0, sp
    6290:	andeq	r0, r0, lr
    6294:	andeq	r0, r0, pc
    6298:	andeq	r0, r0, r8
    629c:	andeq	r0, r0, r9
    62a0:	andeq	r0, r0, sl
    62a4:	andeq	r0, r0, fp
    62a8:	andeq	r0, r0, r4
    62ac:	andeq	r0, r0, r5
    62b0:	andeq	r0, r0, r6
    62b4:	andeq	r0, r0, r7
    62b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    62bc:	add	fp, sp, #24
    62c0:	sub	sp, sp, #8
    62c4:	mov	r6, r1
    62c8:	ldr	r8, [fp, #12]
    62cc:	ldr	r1, [fp, #8]
    62d0:	mov	r9, r2
    62d4:	mov	r5, #0
    62d8:	cmp	r2, #2
    62dc:	bne	637c <HV@@Base+0x698>
    62e0:	cmp	r3, #16
    62e4:	blt	65bc <HV@@Base+0x8d8>
    62e8:	cmp	r1, #0
    62ec:	beq	6418 <HV@@Base+0x734>
    62f0:	cmp	r3, #30
    62f4:	blt	65bc <HV@@Base+0x8d8>
    62f8:	mov	r1, #16
    62fc:	bl	5f1c <HV@@Base+0x238>
    6300:	cmp	r0, #0
    6304:	beq	65bc <HV@@Base+0x8d8>
    6308:	ldr	r2, [pc, #704]	; 65d0 <HV@@Base+0x8ec>
    630c:	and	r1, r6, #63	; 0x3f
    6310:	movw	r6, #1033	; 0x409
    6314:	mov	r3, #0
    6318:	movt	r6, #33026	; 0x8102
    631c:	add	r2, pc, r2
    6320:	ldrb	r1, [r2, r1]
    6324:	ldr	r2, [r8, #4]
    6328:	ldr	ip, [pc, #676]	; 65d4 <HV@@Base+0x8f0>
    632c:	add	r7, r1, #18
    6330:	add	r1, r8, #44	; 0x2c
    6334:	and	r2, r2, #1
    6338:	add	ip, pc, ip
    633c:	smmla	r4, r7, r6, r7
    6340:	cmp	r2, #0
    6344:	asr	r5, r4, #6
    6348:	add	r5, r5, r4, lsr #31
    634c:	ldrb	r4, [r0, r3]
    6350:	rsb	r5, r5, r5, lsl #7
    6354:	sub	r7, r7, r5
    6358:	ldrbne	r5, [ip, r7]
    635c:	add	r7, r7, #1
    6360:	eorne	r4, r5, r4
    6364:	strb	r4, [r1, r3]
    6368:	add	r3, r3, #1
    636c:	cmp	r3, #16
    6370:	bne	633c <HV@@Base+0x658>
    6374:	bl	45d8 <free@plt>
    6378:	b	6484 <HV@@Base+0x7a0>
    637c:	cmp	r3, #8
    6380:	blt	65bc <HV@@Base+0x8d8>
    6384:	cmp	r1, #0
    6388:	beq	64b0 <HV@@Base+0x7cc>
    638c:	cmp	r3, #15
    6390:	blt	65bc <HV@@Base+0x8d8>
    6394:	mov	r1, #8
    6398:	bl	5f1c <HV@@Base+0x238>
    639c:	cmp	r0, #0
    63a0:	beq	65bc <HV@@Base+0x8d8>
    63a4:	ldr	r2, [pc, #564]	; 65e0 <HV@@Base+0x8fc>
    63a8:	and	r1, r6, #63	; 0x3f
    63ac:	movw	r6, #1033	; 0x409
    63b0:	mov	r3, #0
    63b4:	movt	r6, #33026	; 0x8102
    63b8:	add	r2, pc, r2
    63bc:	ldrb	r1, [r2, r1]
    63c0:	ldr	r2, [r8, #4]
    63c4:	ldr	ip, [pc, #536]	; 65e4 <HV@@Base+0x900>
    63c8:	add	r7, r1, #18
    63cc:	add	r1, r8, #44	; 0x2c
    63d0:	and	r2, r2, #1
    63d4:	add	ip, pc, ip
    63d8:	smmla	r4, r7, r6, r7
    63dc:	cmp	r2, #0
    63e0:	asr	r5, r4, #6
    63e4:	add	r5, r5, r4, lsr #31
    63e8:	ldrb	r4, [r0, r3]
    63ec:	rsb	r5, r5, r5, lsl #7
    63f0:	sub	r7, r7, r5
    63f4:	ldrbne	r5, [ip, r7]
    63f8:	add	r7, r7, #1
    63fc:	eorne	r4, r5, r4
    6400:	strb	r4, [r1, r3]
    6404:	add	r3, r3, #1
    6408:	cmp	r3, #8
    640c:	bne	63d8 <HV@@Base+0x6f4>
    6410:	bl	45d8 <free@plt>
    6414:	b	651c <HV@@Base+0x838>
    6418:	ldr	r2, [pc, #440]	; 65d8 <HV@@Base+0x8f4>
    641c:	and	r1, r6, #63	; 0x3f
    6420:	movw	r6, #1033	; 0x409
    6424:	mov	r3, #0
    6428:	movt	r6, #33026	; 0x8102
    642c:	add	r2, pc, r2
    6430:	ldrb	r1, [r2, r1]
    6434:	ldr	r2, [r8, #4]
    6438:	ldr	ip, [pc, #412]	; 65dc <HV@@Base+0x8f8>
    643c:	add	r7, r1, #18
    6440:	add	r1, r8, #44	; 0x2c
    6444:	and	r2, r2, #1
    6448:	add	ip, pc, ip
    644c:	smmla	r4, r7, r6, r7
    6450:	cmp	r2, #0
    6454:	asr	r5, r4, #6
    6458:	add	r5, r5, r4, lsr #31
    645c:	ldrb	r4, [r0, r3]
    6460:	rsb	r5, r5, r5, lsl #7
    6464:	sub	r7, r7, r5
    6468:	ldrbne	r5, [ip, r7]
    646c:	add	r7, r7, #1
    6470:	eorne	r4, r5, r4
    6474:	strb	r4, [r1, r3]
    6478:	add	r3, r3, #1
    647c:	cmp	r3, #16
    6480:	bne	644c <HV@@Base+0x768>
    6484:	add	r1, r8, #47	; 0x2f
    6488:	mov	r0, #0
    648c:	mov	r2, #0
    6490:	ldrb	r3, [r1, r2]
    6494:	orr	r0, r0, r3, lsl r2
    6498:	add	r2, r2, #1
    649c:	cmp	r2, #10
    64a0:	bne	6490 <HV@@Base+0x7ac>
    64a4:	mov	r1, #4
    64a8:	uxtah	r0, r1, r0
    64ac:	b	6544 <HV@@Base+0x860>
    64b0:	ldr	r2, [pc, #304]	; 65e8 <HV@@Base+0x904>
    64b4:	and	r1, r6, #63	; 0x3f
    64b8:	movw	r6, #1033	; 0x409
    64bc:	mov	r3, #0
    64c0:	movt	r6, #33026	; 0x8102
    64c4:	add	r2, pc, r2
    64c8:	ldrb	r1, [r2, r1]
    64cc:	ldr	r2, [r8, #4]
    64d0:	ldr	ip, [pc, #276]	; 65ec <HV@@Base+0x908>
    64d4:	add	r7, r1, #18
    64d8:	add	r1, r8, #44	; 0x2c
    64dc:	and	r2, r2, #1
    64e0:	add	ip, pc, ip
    64e4:	smmla	r4, r7, r6, r7
    64e8:	cmp	r2, #0
    64ec:	asr	r5, r4, #6
    64f0:	add	r5, r5, r4, lsr #31
    64f4:	ldrb	r4, [r0, r3]
    64f8:	rsb	r5, r5, r5, lsl #7
    64fc:	sub	r7, r7, r5
    6500:	ldrbne	r5, [ip, r7]
    6504:	add	r7, r7, #1
    6508:	eorne	r4, r5, r4
    650c:	strb	r4, [r1, r3]
    6510:	add	r3, r3, #1
    6514:	cmp	r3, #8
    6518:	bne	64e4 <HV@@Base+0x800>
    651c:	add	r1, r8, #47	; 0x2f
    6520:	mov	r0, #0
    6524:	mov	r2, #0
    6528:	ldrb	r3, [r1, r2]
    652c:	orr	r0, r0, r3, lsl r2
    6530:	add	r2, r2, #1
    6534:	cmp	r2, #5
    6538:	bne	6528 <HV@@Base+0x844>
    653c:	mov	r1, #3
    6540:	uxtab	r0, r1, r0
    6544:	str	r0, [r8, #64]	; 0x40
    6548:	ldrb	r1, [r8, #18]
    654c:	sub	r2, r1, #3
    6550:	mov	r1, #0
    6554:	uxtb	r3, r2
    6558:	cmp	r3, #12
    655c:	bhi	6570 <HV@@Base+0x88c>
    6560:	sxtb	r1, r2
    6564:	ldr	r2, [pc, #132]	; 65f0 <HV@@Base+0x90c>
    6568:	add	r2, pc, r2
    656c:	ldr	r1, [r2, r1, lsl #2]
    6570:	ldrh	r2, [r8, #44]	; 0x2c
    6574:	vldr	d18, [pc, #76]	; 65c8 <HV@@Base+0x8e4>
    6578:	cmp	r0, r1
    657c:	mov	r5, #1
    6580:	movlt	r1, r0
    6584:	strh	r2, [sp, #4]
    6588:	add	r2, sp, #4
    658c:	vld1.16	{d16[0]}, [r2 :16]
    6590:	str	r9, [r8, #40]	; 0x28
    6594:	str	r1, [r8, #64]	; 0x40
    6598:	ldrb	r0, [r8, #46]	; 0x2e
    659c:	strb	r0, [r8, #61]	; 0x3d
    65a0:	vmovl.u8	q8, d16
    65a4:	vmovl.u16	q8, d16
    65a8:	vshl.u32	d16, d16, d18
    65ac:	vdup.32	d17, d16[1]
    65b0:	vorr	d16, d17, d16
    65b4:	vmov.32	r0, d16[0]
    65b8:	strb	r0, [r8, #60]	; 0x3c
    65bc:	mov	r0, r5
    65c0:	sub	sp, fp, #24
    65c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    65c8:	andeq	r0, r0, r0
    65cc:	andeq	r0, r0, r1
    65d0:	andeq	r7, r0, r2, ror #24
    65d4:	andeq	r7, r0, ip, asr #21
    65d8:	andeq	r7, r0, r2, asr fp
    65dc:			; <UNDEFINED> instruction: 0x000079bc
    65e0:	andeq	r7, r0, r6, asr #23
    65e4:	andeq	r7, r0, r0, lsr sl
    65e8:			; <UNDEFINED> instruction: 0x00007aba
    65ec:	andeq	r7, r0, r4, lsr #18
    65f0:	andeq	r7, r0, ip, lsl r9
    65f4:	push	{r4, r5, r6, r7, fp, lr}
    65f8:	add	fp, sp, #16
    65fc:	mov	ip, r0
    6600:	mov	r0, #0
    6604:	cmp	r2, #1
    6608:	mov	lr, #0
    660c:	blt	666c <HV@@Base+0x988>
    6610:	add	r3, ip, #1
    6614:	mov	lr, #0
    6618:	mov	ip, r2
    661c:	ldrb	r4, [r3, #-1]
    6620:	ldrb	r6, [r3, #1]
    6624:	ldrb	r5, [r3]
    6628:	subs	ip, ip, #1
    662c:	orr	r7, r6, r4
    6630:	and	r4, r6, r4
    6634:	and	r5, r7, r5
    6638:	orr	r4, r5, r4
    663c:	strb	r4, [r1], #1
    6640:	ldrb	r4, [r3, #-1]
    6644:	ldrb	r5, [r3]
    6648:	ldrb	r6, [r3, #1]
    664c:	add	r3, r3, #3
    6650:	eor	r7, r5, r4
    6654:	eor	r5, r6, r5
    6658:	eor	r4, r6, r4
    665c:	orr	r5, r5, r7
    6660:	orr	r4, r5, r4
    6664:	uxtab	lr, lr, r4
    6668:	bne	661c <HV@@Base+0x938>
    666c:	asr	r1, r2, #31
    6670:	add	r1, r2, r1, lsr #30
    6674:	cmp	lr, r1, asr #2
    6678:	movwlt	r0, #1
    667c:	pop	{r4, r5, r6, r7, fp, pc}

00006680 <try_clock@@Base>:
    6680:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6684:	add	fp, sp, #24
    6688:	sub	sp, sp, #40	; 0x28
    668c:	mov	r6, r0
    6690:	movw	r0, #2892	; 0xb4c
    6694:	add	r5, sp, #22
    6698:	mov	r9, r1
    669c:	mov	r2, #18
    66a0:	add	r0, r1, r0
    66a4:	mov	r1, r5
    66a8:	bl	65f4 <HV@@Base+0x910>
    66ac:	cmp	r0, #0
    66b0:	beq	67ac <try_clock@@Base+0x12c>
    66b4:	ldr	r2, [pc, #268]	; 67c8 <try_clock@@Base+0x148>
    66b8:	and	r1, r6, #63	; 0x3f
    66bc:	movw	r3, #1033	; 0x409
    66c0:	add	r0, sp, #4
    66c4:	movt	r3, #33026	; 0x8102
    66c8:	add	r8, r0, #3
    66cc:	add	r2, pc, r2
    66d0:	ldrb	r7, [r2, r1]
    66d4:	ldr	r1, [r9, #4]
    66d8:	ldr	ip, [pc, #236]	; 67cc <try_clock@@Base+0x14c>
    66dc:	mov	r2, #0
    66e0:	and	r1, r1, #1
    66e4:	add	ip, pc, ip
    66e8:	smmla	r4, r7, r3, r7
    66ec:	cmp	r1, #0
    66f0:	asr	r6, r4, #6
    66f4:	add	r6, r6, r4, lsr #31
    66f8:	ldrb	r4, [r5, r2]
    66fc:	rsb	r6, r6, r6, lsl #7
    6700:	sub	r7, r7, r6
    6704:	ldrbne	r6, [ip, r7]
    6708:	add	r7, r7, #1
    670c:	eorne	r4, r6, r4
    6710:	strb	r4, [r0, r2]
    6714:	add	r2, r2, #1
    6718:	cmp	r2, #18
    671c:	bne	66e8 <try_clock@@Base+0x68>
    6720:	mov	r2, #0
    6724:	mov	r1, #0
    6728:	ldrb	r3, [r0, r1]
    672c:	orr	r2, r2, r3, lsl r1
    6730:	add	r1, r1, #1
    6734:	cmp	r1, #10
    6738:	bne	6728 <try_clock@@Base+0xa8>
    673c:	add	r0, r8, #7
    6740:	vldr	d16, [pc, #112]	; 67b8 <try_clock@@Base+0x138>
    6744:	vld1.8	{d17}, [r0]
    6748:	uxth	r0, r2
    674c:	vshl.u8	d16, d17, d16
    6750:	vext.8	d17, d16, d16, #4
    6754:	vorr	d16, d17, d16
    6758:	vext.8	d17, d16, d16, #2
    675c:	vorr	d16, d16, d17
    6760:	vdup.8	d17, d16[1]
    6764:	vorr	d16, d16, d17
    6768:	vmov.u8	r1, d16[0]
    676c:	bl	67d0 <try_clock@@Base+0x150>
    6770:	strb	r0, [r9, #9]
    6774:	vldr	d17, [pc, #68]	; 67c0 <try_clock@@Base+0x140>
    6778:	ldr	r1, [r8]
    677c:	str	r1, [sp]
    6780:	mov	r1, sp
    6784:	vld1.32	{d16[0]}, [r1 :32]
    6788:	vmovl.u8	q9, d16
    678c:	vshl.u16	d16, d18, d17
    6790:	vext.8	d17, d16, d16, #4
    6794:	vorr	d16, d17, d16
    6798:	vdup.16	d17, d16[1]
    679c:	vorr	d16, d16, d17
    67a0:	vmov.u16	r1, d16[0]
    67a4:	strb	r1, [r9, #18]
    67a8:	b	67b0 <try_clock@@Base+0x130>
    67ac:	mov	r0, #0
    67b0:	sub	sp, fp, #24
    67b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    67b8:	movweq	r0, #8448	; 0x2100
    67bc:	streq	r0, [r6, -r4, lsl #10]
    67c0:	andeq	r0, r1, r0
    67c4:	andeq	r0, r3, r2
    67c8:			; <UNDEFINED> instruction: 0x000078b2
    67cc:	andeq	r7, r0, r0, lsr #14
    67d0:	push	{fp, lr}
    67d4:	mov	fp, sp
    67d8:	mov	r2, #9
    67dc:	mov	ip, #1
    67e0:	sxtb	r3, r1
    67e4:	and	lr, ip, r0, lsr r2
    67e8:	sub	r2, r2, #1
    67ec:	cmn	r3, #1
    67f0:	eorle	r1, r1, #101	; 0x65
    67f4:	cmn	r2, #1
    67f8:	uxtb	r1, r1
    67fc:	eor	r3, lr, r1, lsr #7
    6800:	orr	r1, r3, r1, lsl #1
    6804:	bne	67e0 <try_clock@@Base+0x160>
    6808:	uxtb	r0, r1
    680c:	mov	r2, #2
    6810:	lsl	r3, r1, #7
    6814:	and	r2, r2, r0, lsr #5
    6818:	orr	r3, r3, r0, lsr #7
    681c:	orr	r2, r3, r2
    6820:	mov	r3, #4
    6824:	and	r3, r3, r0, lsr #3
    6828:	orr	r2, r2, r3
    682c:	mov	r3, #8
    6830:	and	r0, r3, r0, lsr #1
    6834:	orr	r0, r2, r0
    6838:	and	r2, r1, #8
    683c:	orr	r0, r0, r2, lsl #1
    6840:	and	r2, r1, #4
    6844:	and	r1, r1, #2
    6848:	orr	r0, r0, r2, lsl #3
    684c:	orr	r0, r0, r1, lsl #5
    6850:	uxtb	r0, r0
    6854:	pop	{fp, pc}

00006858 <btbb_decode_header@@Base>:
    6858:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    685c:	add	fp, sp, #24
    6860:	sub	sp, sp, #24
    6864:	mov	r9, r0
    6868:	ldrb	r0, [r0, #4]
    686c:	mov	r6, #0
    6870:	tst	r0, #16
    6874:	beq	69ec <btbb_decode_header@@Base+0x194>
    6878:	movw	r0, #2892	; 0xb4c
    687c:	add	r5, sp, #6
    6880:	mov	r2, #18
    6884:	add	r0, r9, r0
    6888:	mov	r1, r5
    688c:	bl	65f4 <HV@@Base+0x910>
    6890:	cmp	r0, #0
    6894:	beq	69ec <btbb_decode_header@@Base+0x194>
    6898:	ldr	r0, [r9, #2816]	; 0xb00
    689c:	ldr	r1, [pc, #356]	; 6a08 <btbb_decode_header@@Base+0x1b0>
    68a0:	movw	r2, #1033	; 0x409
    68a4:	add	r8, r9, #25
    68a8:	add	r7, r9, #22
    68ac:	movt	r2, #33026	; 0x8102
    68b0:	and	r0, r0, #63	; 0x3f
    68b4:	add	r1, pc, r1
    68b8:	ldrb	r6, [r1, r0]
    68bc:	ldr	r0, [r9, #4]
    68c0:	ldr	ip, [pc, #324]	; 6a0c <btbb_decode_header@@Base+0x1b4>
    68c4:	mov	r1, #0
    68c8:	and	r0, r0, #1
    68cc:	add	ip, pc, ip
    68d0:	smmla	r4, r6, r2, r6
    68d4:	cmp	r0, #0
    68d8:	asr	r3, r4, #6
    68dc:	add	r3, r3, r4, lsr #31
    68e0:	ldrb	r4, [r5, r1]
    68e4:	rsb	r3, r3, r3, lsl #7
    68e8:	sub	r6, r6, r3
    68ec:	ldrbne	r3, [ip, r6]
    68f0:	add	r6, r6, #1
    68f4:	eorne	r4, r3, r4
    68f8:	strb	r4, [r7, r1]
    68fc:	add	r1, r1, #1
    6900:	cmp	r1, #18
    6904:	bne	68d0 <btbb_decode_header@@Base+0x78>
    6908:	mov	r0, #0
    690c:	mov	r1, #0
    6910:	ldrb	r2, [r7, r1]
    6914:	orr	r0, r0, r2, lsl r1
    6918:	add	r1, r1, #1
    691c:	cmp	r1, #10
    6920:	bne	6910 <btbb_decode_header@@Base+0xb8>
    6924:	add	r1, r8, #7
    6928:	vldr	d16, [pc, #200]	; 69f8 <btbb_decode_header@@Base+0x1a0>
    692c:	uxth	r0, r0
    6930:	vld1.8	{d17}, [r1]
    6934:	vshl.u8	d16, d17, d16
    6938:	vext.8	d17, d16, d16, #4
    693c:	vorr	d16, d17, d16
    6940:	vext.8	d17, d16, d16, #2
    6944:	vorr	d16, d16, d17
    6948:	vdup.8	d17, d16[1]
    694c:	vorr	d16, d16, d17
    6950:	vmov.u8	r5, d16[0]
    6954:	mov	r1, r5
    6958:	bl	67d0 <try_clock@@Base+0x150>
    695c:	ldrb	r1, [r9, #9]
    6960:	mov	r6, #0
    6964:	cmp	r0, r1
    6968:	bne	69ec <btbb_decode_header@@Base+0x194>
    696c:	mov	r0, #0
    6970:	mov	r1, #0
    6974:	ldrb	r2, [r7, r1]
    6978:	orr	r0, r0, r2, lsl r1
    697c:	add	r1, r1, #1
    6980:	cmp	r1, #3
    6984:	bne	6974 <btbb_decode_header@@Base+0x11c>
    6988:	strb	r0, [r9, #19]
    698c:	vldr	d17, [pc, #108]	; 6a00 <btbb_decode_header@@Base+0x1a8>
    6990:	add	r1, r9, #29
    6994:	mov	r2, #0
    6998:	ldr	r0, [r8]
    699c:	str	r0, [sp]
    69a0:	mov	r0, sp
    69a4:	vld1.32	{d16[0]}, [r0 :32]
    69a8:	vmovl.u8	q9, d16
    69ac:	vshl.u16	d16, d18, d17
    69b0:	vext.8	d17, d16, d16, #4
    69b4:	vorr	d16, d17, d16
    69b8:	vdup.16	d17, d16[1]
    69bc:	vorr	d16, d16, d17
    69c0:	vmov.u16	r0, d16[0]
    69c4:	strb	r0, [r9, #18]
    69c8:	mov	r0, #0
    69cc:	ldrb	r3, [r1, r2]
    69d0:	orr	r0, r0, r3, lsl r2
    69d4:	add	r2, r2, #1
    69d8:	cmp	r2, #3
    69dc:	bne	69cc <btbb_decode_header@@Base+0x174>
    69e0:	mov	r6, #1
    69e4:	strb	r5, [r9, #21]
    69e8:	strb	r0, [r9, #20]
    69ec:	mov	r0, r6
    69f0:	sub	sp, fp, #24
    69f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    69f8:	movweq	r0, #8448	; 0x2100
    69fc:	streq	r0, [r6, -r4, lsl #10]
    6a00:	andeq	r0, r1, r0
    6a04:	andeq	r0, r3, r2
    6a08:	andeq	r7, r0, sl, asr #13
    6a0c:	andeq	r7, r0, r8, lsr r5

00006a10 <btbb_decode_payload@@Base>:
    6a10:	push	{r4, sl, fp, lr}
    6a14:	add	fp, sp, #8
    6a18:	mov	r4, r0
    6a1c:	mov	r0, #0
    6a20:	str	r0, [r4, #40]	; 0x28
    6a24:	ldrb	r1, [r4, #18]
    6a28:	cmp	r1, #15
    6a2c:	bhi	6afc <btbb_decode_payload@@Base+0xec>
    6a30:	add	r0, pc, #4
    6a34:	ldr	r1, [r0, r1, lsl #2]
    6a38:	add	pc, r0, r1
    6a3c:	andeq	r0, r0, r0, rrx
    6a40:	andeq	r0, r0, r0, rrx
    6a44:	andeq	r0, r0, r0, ror r0
    6a48:	andeq	r0, r0, r0, asr #32
    6a4c:	andeq	r0, r0, r0, asr r0
    6a50:	muleq	r0, r4, r0
    6a54:	muleq	r0, r4, r0
    6a58:	andeq	r0, r0, r0, lsl #1
    6a5c:	andeq	r0, r0, r0, asr #32
    6a60:	andeq	r0, r0, r0, asr r0
    6a64:	andeq	r0, r0, r0, asr #32
    6a68:	andeq	r0, r0, r0, asr r0
    6a6c:	strheq	r0, [r0], -r4
    6a70:	andeq	r0, r0, r4, lsr #1
    6a74:	andeq	r0, r0, r0, asr #32
    6a78:	andeq	r0, r0, r0, asr r0
    6a7c:	ldr	r0, [r4, #2816]	; 0xb00
    6a80:	mov	r1, r4
    6a84:	bl	465c <DM@plt>
    6a88:	b	6afc <btbb_decode_payload@@Base+0xec>
    6a8c:	ldr	r0, [r4, #2816]	; 0xb00
    6a90:	mov	r1, r4
    6a94:	bl	4878 <DH@plt>
    6a98:	b	6afc <btbb_decode_payload@@Base+0xec>
    6a9c:	mov	r0, #0
    6aa0:	str	r0, [r4, #64]	; 0x40
    6aa4:	mov	r0, #1
    6aa8:	b	6afc <btbb_decode_payload@@Base+0xec>
    6aac:	ldr	r0, [r4, #2816]	; 0xb00
    6ab0:	mov	r1, r4
    6ab4:	bl	4614 <fhs@plt>
    6ab8:	b	6afc <btbb_decode_payload@@Base+0xec>
    6abc:	ldr	r0, [r4, #2816]	; 0xb00
    6ac0:	mov	r1, r4
    6ac4:	bl	480c <EV3@plt>
    6ac8:	cmp	r0, #1
    6acc:	bgt	6afc <btbb_decode_payload@@Base+0xec>
    6ad0:	ldr	r0, [r4, #2816]	; 0xb00
    6ad4:	mov	r1, r4
    6ad8:	bl	4668 <HV@plt>
    6adc:	b	6afc <btbb_decode_payload@@Base+0xec>
    6ae0:	ldr	r0, [r4, #2816]	; 0xb00
    6ae4:	mov	r1, r4
    6ae8:	bl	4860 <EV5@plt>
    6aec:	b	6afc <btbb_decode_payload@@Base+0xec>
    6af0:	ldr	r0, [r4, #2816]	; 0xb00
    6af4:	mov	r1, r4
    6af8:	bl	4620 <EV4@plt>
    6afc:	ldr	r1, [r4, #4]
    6b00:	orr	r1, r1, #128	; 0x80
    6b04:	str	r1, [r4, #4]
    6b08:	pop	{r4, sl, fp, pc}

00006b0c <btbb_decode@@Base>:
    6b0c:	push	{r4, r5, fp, lr}
    6b10:	add	fp, sp, #8
    6b14:	mov	r4, r0
    6b18:	ldr	r0, [r0, #4]
    6b1c:	bic	r0, r0, #128	; 0x80
    6b20:	str	r0, [r4, #4]
    6b24:	mov	r0, r4
    6b28:	bl	4770 <btbb_decode_header@plt>
    6b2c:	cmp	r0, #0
    6b30:	beq	6b6c <btbb_decode@@Base+0x60>
    6b34:	mov	r0, r4
    6b38:	bl	489c <btbb_decode_payload@plt>
    6b3c:	mov	r5, r0
    6b40:	cmp	r0, #1
    6b44:	blt	6b70 <btbb_decode@@Base+0x64>
    6b48:	ldr	r0, [r4, #2816]	; 0xb00
    6b4c:	mov	r2, r5
    6b50:	and	r1, r0, #63	; 0x3f
    6b54:	ldr	r0, [pc, #28]	; 6b78 <btbb_decode@@Base+0x6c>
    6b58:	add	r0, pc, r0
    6b5c:	bl	4590 <printf@plt>
    6b60:	mov	r0, r4
    6b64:	bl	48c0 <btbb_print_packet@plt>
    6b68:	b	6b70 <btbb_decode@@Base+0x64>
    6b6c:	mov	r5, #0
    6b70:	mov	r0, r5
    6b74:	pop	{r4, r5, fp, pc}
    6b78:			; <UNDEFINED> instruction: 0x000073b3
    6b7c:	nop	{0}

00006b80 <btbb_print_packet@@Base>:
    6b80:	push	{r4, r5, r6, r7, fp, lr}
    6b84:	add	fp, sp, #16
    6b88:	vpush	{d8}
    6b8c:	mov	r4, r0
    6b90:	ldrb	r0, [r0, #4]
    6b94:	tst	r0, #128	; 0x80
    6b98:	beq	6c88 <btbb_print_packet@@Base+0x108>
    6b9c:	ldrb	r0, [r4, #18]
    6ba0:	ldr	r1, [pc, #240]	; 6c98 <btbb_print_packet@@Base+0x118>
    6ba4:	add	r1, pc, r1
    6ba8:	ldr	r1, [r1, r0, lsl #2]
    6bac:	ldr	r0, [pc, #232]	; 6c9c <btbb_print_packet@@Base+0x11c>
    6bb0:	add	r0, pc, r0
    6bb4:	bl	4590 <printf@plt>
    6bb8:	ldr	r0, [r4, #40]	; 0x28
    6bbc:	cmp	r0, #1
    6bc0:	blt	6c04 <btbb_print_packet@@Base+0x84>
    6bc4:	ldrb	r1, [r4, #19]
    6bc8:	ldr	r0, [pc, #208]	; 6ca0 <btbb_print_packet@@Base+0x120>
    6bcc:	add	r0, pc, r0
    6bd0:	bl	4590 <printf@plt>
    6bd4:	ldrb	r1, [r4, #60]	; 0x3c
    6bd8:	ldr	r0, [pc, #196]	; 6ca4 <btbb_print_packet@@Base+0x124>
    6bdc:	add	r0, pc, r0
    6be0:	bl	4590 <printf@plt>
    6be4:	ldrb	r1, [r4, #61]	; 0x3d
    6be8:	ldr	r0, [pc, #184]	; 6ca8 <btbb_print_packet@@Base+0x128>
    6bec:	add	r0, pc, r0
    6bf0:	bl	4590 <printf@plt>
    6bf4:	ldr	r1, [r4, #64]	; 0x40
    6bf8:	ldr	r0, [pc, #172]	; 6cac <btbb_print_packet@@Base+0x12c>
    6bfc:	add	r0, pc, r0
    6c00:	bl	4590 <printf@plt>
    6c04:	ldr	r0, [r4, #64]	; 0x40
    6c08:	cmp	r0, #0
    6c0c:	beq	6c88 <btbb_print_packet@@Base+0x108>
    6c10:	ldr	r0, [pc, #152]	; 6cb0 <btbb_print_packet@@Base+0x130>
    6c14:	add	r0, pc, r0
    6c18:	bl	4590 <printf@plt>
    6c1c:	ldr	r0, [r4, #64]	; 0x40
    6c20:	cmp	r0, #1
    6c24:	blt	6c78 <btbb_print_packet@@Base+0xf8>
    6c28:	ldr	r5, [pc, #132]	; 6cb4 <btbb_print_packet@@Base+0x134>
    6c2c:	vldr	d8, [pc, #92]	; 6c90 <btbb_print_packet@@Base+0x110>
    6c30:	add	r6, r4, #68	; 0x44
    6c34:	mov	r7, #0
    6c38:	add	r5, pc, r5
    6c3c:	vld1.8	{d16}, [r6]!
    6c40:	mov	r0, r5
    6c44:	vshl.u8	d16, d16, d8
    6c48:	vext.8	d17, d16, d16, #4
    6c4c:	vorr	d16, d17, d16
    6c50:	vext.8	d17, d16, d16, #2
    6c54:	vorr	d16, d16, d17
    6c58:	vdup.8	d17, d16[1]
    6c5c:	vorr	d16, d16, d17
    6c60:	vmov.u8	r1, d16[0]
    6c64:	bl	4590 <printf@plt>
    6c68:	ldr	r0, [r4, #64]	; 0x40
    6c6c:	add	r7, r7, #1
    6c70:	cmp	r7, r0
    6c74:	blt	6c3c <btbb_print_packet@@Base+0xbc>
    6c78:	mov	r0, #10
    6c7c:	vpop	{d8}
    6c80:	pop	{r4, r5, r6, r7, fp, lr}
    6c84:	b	47f4 <putchar@plt>
    6c88:	vpop	{d8}
    6c8c:	pop	{r4, r5, r6, r7, fp, pc}
    6c90:	movweq	r0, #8448	; 0x2100
    6c94:	streq	r0, [r6, -r4, lsl #10]
    6c98:	andeq	sp, r1, r8, lsr #4
    6c9c:	andeq	r7, r0, r5, lsl #7
    6ca0:	andeq	r7, r0, r5, ror r3
    6ca4:	andeq	r7, r0, r4, ror r3
    6ca8:	andeq	r7, r0, r0, ror r3
    6cac:	andeq	r7, r0, ip, ror #6
    6cb0:	andeq	r7, r0, r6, lsr #19
    6cb4:	andeq	r7, r0, fp, lsl #24

00006cb8 <tun_format@@Base>:
    6cb8:	push	{r4, r5, r6, sl, fp, lr}
    6cbc:	add	fp, sp, #16
    6cc0:	ldr	r5, [r0, #64]	; 0x40
    6cc4:	mov	r6, r0
    6cc8:	add	r0, r5, #9
    6ccc:	bl	46ec <malloc@plt>
    6cd0:	ldr	r1, [r6, #2816]	; 0xb00
    6cd4:	mov	r3, #0
    6cd8:	str	r1, [r0]
    6cdc:	ldrb	r1, [r6, #8]
    6ce0:	strb	r1, [r0, #4]
    6ce4:	ldr	r1, [r6, #4]
    6ce8:	and	r2, r1, #2
    6cec:	ubfx	r1, r1, #5, #1
    6cf0:	orr	r1, r1, r2
    6cf4:	add	r2, r6, #22
    6cf8:	strb	r1, [r0, #5]
    6cfc:	mov	r1, #0
    6d00:	ldrb	r4, [r2, r3]
    6d04:	orr	r1, r1, r4, lsl r3
    6d08:	add	r3, r3, #1
    6d0c:	cmp	r3, #7
    6d10:	bne	6d00 <tun_format@@Base+0x48>
    6d14:	strb	r1, [r0, #6]
    6d18:	add	r2, r6, #29
    6d1c:	mov	r1, #0
    6d20:	mov	r3, #0
    6d24:	ldrb	r4, [r2, r3]
    6d28:	orr	r1, r1, r4, lsl r3
    6d2c:	add	r3, r3, #1
    6d30:	cmp	r3, #3
    6d34:	bne	6d24 <tun_format@@Base+0x6c>
    6d38:	strb	r1, [r0, #7]
    6d3c:	add	r1, r6, #32
    6d40:	vldr	d16, [pc, #104]	; 6db0 <tun_format@@Base+0xf8>
    6d44:	cmp	r5, #1
    6d48:	vld1.8	{d17}, [r1]
    6d4c:	add	r1, r0, #8
    6d50:	vshl.u8	d17, d17, d16
    6d54:	vext.8	d18, d17, d16, #4
    6d58:	vorr	d17, d18, d17
    6d5c:	vext.8	d18, d17, d16, #2
    6d60:	vorr	d17, d17, d18
    6d64:	vdup.8	d18, d17[1]
    6d68:	vorr	d17, d17, d18
    6d6c:	vst1.8	{d17[0]}, [r1]
    6d70:	blt	6da8 <tun_format@@Base+0xf0>
    6d74:	add	r1, r6, #68	; 0x44
    6d78:	add	r2, r0, #9
    6d7c:	vld1.8	{d17}, [r1]!
    6d80:	subs	r5, r5, #1
    6d84:	vshl.u8	d17, d17, d16
    6d88:	vext.8	d18, d17, d16, #4
    6d8c:	vorr	d17, d18, d17
    6d90:	vext.8	d18, d17, d16, #2
    6d94:	vorr	d17, d17, d18
    6d98:	vdup.8	d18, d17[1]
    6d9c:	vorr	d17, d17, d18
    6da0:	vst1.8	{d17[0]}, [r2]!
    6da4:	bne	6d7c <tun_format@@Base+0xc4>
    6da8:	pop	{r4, r5, r6, sl, fp, pc}
    6dac:	nop	{0}
    6db0:	movweq	r0, #8448	; 0x2100
    6db4:	streq	r0, [r6, -r4, lsl #10]

00006db8 <btbb_header_present@@Base>:
    6db8:	push	{r4, sl, fp, lr}
    6dbc:	add	fp, sp, #8
    6dc0:	movw	r1, #2822	; 0xb06
    6dc4:	ldrh	r2, [r0, r1]
    6dc8:	mov	r1, #0
    6dcc:	cmp	r2, #122	; 0x7a
    6dd0:	bcc	6e50 <btbb_header_present@@Base+0x98>
    6dd4:	ldrb	r1, [r0, #2887]	; 0xb47
    6dd8:	ldrb	ip, [r0, #2888]	; 0xb48
    6ddc:	ldrb	lr, [r0, #2889]	; 0xb49
    6de0:	ldrb	r2, [r0, #2890]	; 0xb4a
    6de4:	clz	r3, r1
    6de8:	lsr	r3, r3, #5
    6dec:	eor	r4, r2, r3
    6df0:	eor	r3, ip, r3
    6df4:	eor	r2, lr, r1
    6df8:	uxtab	r2, r3, r2
    6dfc:	ldrb	r3, [r0, #2891]	; 0xb4b
    6e00:	add	r2, r2, r4
    6e04:	eor	r1, r3, r1
    6e08:	uxtab	r2, r2, r1
    6e0c:	mov	r1, #0
    6e10:	add	r3, r0, r1
    6e14:	add	r1, r1, #3
    6e18:	ldrb	ip, [r3, #2892]	; 0xb4c
    6e1c:	ldrb	r4, [r3, #2893]	; 0xb4d
    6e20:	ldrb	r3, [r3, #2894]	; 0xb4e
    6e24:	cmp	r1, #54	; 0x36
    6e28:	eor	lr, r4, ip
    6e2c:	eor	r4, r3, r4
    6e30:	eor	r3, r3, ip
    6e34:	orr	r4, r4, lr
    6e38:	orr	r3, r4, r3
    6e3c:	uxtab	r2, r2, r3
    6e40:	bcc	6e10 <btbb_header_present@@Base+0x58>
    6e44:	cmp	r2, #5
    6e48:	mov	r1, #0
    6e4c:	movwlt	r1, #1
    6e50:	mov	r0, r1
    6e54:	pop	{r4, sl, fp, pc}

00006e58 <lap_from_fhs@@Base>:
    6e58:	sub	sp, sp, #4
    6e5c:	add	r1, pc, #92	; 0x5c
    6e60:	vmov.i32	q8, #0	; 0x00000000
    6e64:	vmov.i32	q10, #4	; 0x00000004
    6e68:	add	r0, r0, #102	; 0x66
    6e6c:	mov	r2, sp
    6e70:	vld1.64	{d18-d19}, [r1]
    6e74:	mov	r1, #0
    6e78:	ldr	r3, [r0, r1]
    6e7c:	add	r1, r1, #4
    6e80:	cmp	r1, #24
    6e84:	str	r3, [sp]
    6e88:	vld1.32	{d22[0]}, [r2 :32]
    6e8c:	vmovl.u8	q11, d22
    6e90:	vmovl.u16	q11, d22
    6e94:	vshl.u32	q11, q11, q9
    6e98:	vadd.i32	q9, q9, q10
    6e9c:	vorr	q8, q11, q8
    6ea0:	bne	6e78 <lap_from_fhs@@Base+0x20>
    6ea4:	vext.8	q9, q8, q8, #8
    6ea8:	vorr	q8, q8, q9
    6eac:	vdup.32	q9, d16[1]
    6eb0:	vorr	q8, q8, q9
    6eb4:	vmov.32	r0, d16[0]
    6eb8:	add	sp, sp, #4
    6ebc:	bx	lr
    6ec0:	andeq	r0, r0, r0
    6ec4:	andeq	r0, r0, r1
    6ec8:	andeq	r0, r0, r2
    6ecc:	andeq	r0, r0, r3

00006ed0 <uap_from_fhs@@Base>:
    6ed0:	add	r0, r0, #132	; 0x84
    6ed4:	vldr	d16, [pc, #36]	; 6f00 <uap_from_fhs@@Base+0x30>
    6ed8:	vld1.8	{d17}, [r0]
    6edc:	vshl.u8	d16, d17, d16
    6ee0:	vext.8	d17, d16, d16, #4
    6ee4:	vorr	d16, d17, d16
    6ee8:	vext.8	d17, d16, d16, #2
    6eec:	vorr	d16, d16, d17
    6ef0:	vdup.8	d17, d16[1]
    6ef4:	vorr	d16, d16, d17
    6ef8:	vmov.u8	r0, d16[0]
    6efc:	bx	lr
    6f00:	movweq	r0, #8448	; 0x2100
    6f04:	streq	r0, [r6, -r4, lsl #10]

00006f08 <nap_from_fhs@@Base>:
    6f08:	sub	sp, sp, #16
    6f0c:	ldr	r1, [r0, #140]	; 0x8c
    6f10:	ldr	r2, [r0, #144]	; 0x90
    6f14:	ldr	r3, [r0, #148]	; 0x94
    6f18:	ldr	r0, [r0, #152]	; 0x98
    6f1c:	str	r3, [sp]
    6f20:	stmib	sp, {r0, r1, r2}
    6f24:	add	r0, sp, #8
    6f28:	mov	r1, sp
    6f2c:	vld1.8	{d16}, [r1 :64]
    6f30:	vld1.8	{d17}, [r0 :64]
    6f34:	add	r0, pc, #116	; 0x74
    6f38:	add	r1, pc, #128	; 0x80
    6f3c:	add	r2, pc, #140	; 0x8c
    6f40:	add	r3, pc, #152	; 0x98
    6f44:	vld1.64	{d20-d21}, [r3]
    6f48:	vld1.64	{d22-d23}, [r1]
    6f4c:	vld1.64	{d24-d25}, [r0]
    6f50:	vld1.64	{d28-d29}, [r2]
    6f54:	vmovl.u8	q9, d16
    6f58:	vmovl.u8	q8, d17
    6f5c:	vmovl.u16	q13, d19
    6f60:	vmovl.u16	q15, d17
    6f64:	vmovl.u16	q9, d18
    6f68:	vmovl.u16	q8, d16
    6f6c:	vshl.u32	q10, q13, q10
    6f70:	vshl.u32	q11, q15, q11
    6f74:	vshl.u32	q9, q9, q12
    6f78:	vshl.u32	q8, q8, q14
    6f7c:	vorr	q10, q11, q10
    6f80:	vorr	q8, q8, q9
    6f84:	vmovn.i32	d19, q10
    6f88:	vmovn.i32	d18, q8
    6f8c:	vorr	d16, d19, d19
    6f90:	vorr	q8, q8, q9
    6f94:	vext.8	q9, q8, q8, #4
    6f98:	vorr	q8, q8, q9
    6f9c:	vdup.16	q9, d16[1]
    6fa0:	vorr	q8, q8, q9
    6fa4:	vmov.u16	r0, d16[0]
    6fa8:	add	sp, sp, #16
    6fac:	bx	lr
    6fb0:	andeq	r0, r0, r8
    6fb4:	andeq	r0, r0, r9
    6fb8:	andeq	r0, r0, sl
    6fbc:	andeq	r0, r0, fp
    6fc0:	andeq	r0, r0, r4
    6fc4:	andeq	r0, r0, r5
    6fc8:	andeq	r0, r0, r6
    6fcc:	andeq	r0, r0, r7
    6fd0:	andeq	r0, r0, r0
    6fd4:	andeq	r0, r0, r1
    6fd8:	andeq	r0, r0, r2
    6fdc:	andeq	r0, r0, r3
    6fe0:	andeq	r0, r0, ip
    6fe4:	andeq	r0, r0, sp
    6fe8:	andeq	r0, r0, lr
    6fec:	andeq	r0, r0, pc

00006ff0 <clock_from_fhs@@Base>:
    6ff0:	add	r1, r0, #183	; 0xb7
    6ff4:	mov	r0, #0
    6ff8:	mov	r2, #0
    6ffc:	ldrb	r3, [r1, r2]
    7000:	orr	r0, r0, r3, lsl r2
    7004:	add	r2, r2, #1
    7008:	cmp	r2, #26
    700c:	bne	6ffc <clock_from_fhs@@Base+0xc>
    7010:	bx	lr
    7014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7018:	add	fp, sp, #28
    701c:	sub	sp, sp, #4
    7020:	vpush	{d8-d9}
    7024:	sub	sp, sp, #24
    7028:	cmp	r2, #57	; 0x39
    702c:	str	r1, [sp, #12]
    7030:	bgt	74a4 <clock_from_fhs@@Base+0x4b4>
    7034:	vmov.i32	q4, #0	; 0x00000000
    7038:	sub	r3, r3, #1
    703c:	mov	sl, r2
    7040:	mov	r5, r0
    7044:	mov	r9, #0
    7048:	stmib	sp, {r0, r3}
    704c:	mov	r2, #1
    7050:	subs	r1, sl, #32
    7054:	lsl	r0, r2, sl
    7058:	movwpl	r0, #0
    705c:	orr	r6, r0, r5
    7060:	rsb	r0, sl, #32
    7064:	lsr	r0, r2, r0
    7068:	lslpl	r0, r2, r1
    706c:	ldr	r1, [sp, #12]
    7070:	cmp	r3, #0
    7074:	orr	r7, r0, r1
    7078:	beq	7090 <clock_from_fhs@@Base+0xa0>
    707c:	add	r2, sl, #1
    7080:	mov	r0, r6
    7084:	mov	r1, r7
    7088:	bl	7014 <clock_from_fhs@@Base+0x24>
    708c:	b	7494 <clock_from_fhs@@Base+0x4a4>
    7090:	mov	r0, #48	; 0x30
    7094:	bl	46ec <malloc@plt>
    7098:	mov	r5, r0
    709c:	mov	r0, #8
    70a0:	str	r0, [r5, #40]	; 0x28
    70a4:	movw	r0, #29288	; 0x7268
    70a8:	str	r9, [r5, #24]
    70ac:	str	r7, [r5, #12]
    70b0:	str	r6, [r5, #8]
    70b4:	add	r4, r5, #16
    70b8:	movt	r0, #52347	; 0xcc7b
    70bc:	eor	r0, r7, r0
    70c0:	ubfx	r1, r0, #8, #8
    70c4:	ldr	r2, [pc, #1008]	; 74bc <clock_from_fhs@@Base+0x4cc>
    70c8:	ldr	r7, [pc, #1008]	; 74c0 <clock_from_fhs@@Base+0x4d0>
    70cc:	uxtb	r3, r0
    70d0:	add	r7, pc, r7
    70d4:	add	r2, pc, r2
    70d8:	ldr	r3, [r7, r3, lsl #3]!
    70dc:	ldr	r1, [r2, r1, lsl #3]!
    70e0:	eor	r3, r6, r3
    70e4:	eor	r1, r3, r1
    70e8:	ubfx	r3, r0, #16, #8
    70ec:	ldr	r6, [pc, #976]	; 74c4 <clock_from_fhs@@Base+0x4d4>
    70f0:	add	r6, pc, r6
    70f4:	ldr	r3, [r6, r3, lsl #3]!
    70f8:	eor	r1, r1, r3
    70fc:	mvn	r3, #7
    7100:	and	r0, r3, r0, lsr #21
    7104:	ldr	r3, [pc, #956]	; 74c8 <clock_from_fhs@@Base+0x4d8>
    7108:	add	r3, pc, r3
    710c:	ldr	r0, [r3, r0]!
    7110:	eor	r0, r1, r0
    7114:	movw	r1, #19995	; 0x4e1b
    7118:	movt	r1, #65377	; 0xff61
    711c:	eor	r0, r0, r1
    7120:	ldr	r1, [r7, #4]
    7124:	str	r0, [r5]
    7128:	ldr	r0, [r2, #4]
    712c:	eor	r0, r1, r0
    7130:	ldr	r1, [r6, #4]
    7134:	eor	r0, r0, r1
    7138:	ldr	r1, [r3, #4]
    713c:	eor	r0, r0, r1
    7140:	str	r0, [r5, #4]
    7144:	str	r5, [r5, #36]	; 0x24
    7148:	ldr	r0, [pc, #892]	; 74cc <clock_from_fhs@@Base+0x4dc>
    714c:	ldr	r0, [pc, r0]
    7150:	cmp	r0, #0
    7154:	beq	7178 <clock_from_fhs@@Base+0x188>
    7158:	ldr	r6, [r0, #16]
    715c:	ldr	r1, [r6, #16]
    7160:	str	r5, [r1, #8]
    7164:	ldr	r2, [r6, #20]
    7168:	sub	r1, r1, r2
    716c:	str	r1, [r5, #20]
    7170:	str	r4, [r6, #16]
    7174:	b	71fc <clock_from_fhs@@Base+0x20c>
    7178:	ldr	r0, [pc, #848]	; 74d0 <clock_from_fhs@@Base+0x4e0>
    717c:	str	r9, [r5, #20]
    7180:	add	r0, pc, r0
    7184:	str	r5, [r0]
    7188:	mov	r0, #44	; 0x2c
    718c:	bl	46ec <malloc@plt>
    7190:	cmp	r0, #0
    7194:	str	r0, [r5, #16]
    7198:	beq	74b4 <clock_from_fhs@@Base+0x4c4>
    719c:	mov	r6, r0
    71a0:	add	r0, r0, #12
    71a4:	vst1.32	{d8-d9}, [r0]
    71a8:	mov	r0, #32
    71ac:	str	r0, [r6, #4]
    71b0:	mov	r0, #5
    71b4:	str	r0, [r6, #8]
    71b8:	add	r0, r6, #28
    71bc:	vst1.32	{d8-d9}, [r0]
    71c0:	mov	r0, #16
    71c4:	str	r4, [r6, #16]
    71c8:	str	r0, [r6, #20]
    71cc:	mov	r0, #384	; 0x180
    71d0:	bl	46ec <malloc@plt>
    71d4:	cmp	r0, #0
    71d8:	str	r0, [r6]
    71dc:	beq	74b4 <clock_from_fhs@@Base+0x4c4>
    71e0:	mov	r1, #0
    71e4:	mov	r2, #384	; 0x180
    71e8:	bl	47e8 <memset@plt>
    71ec:	movw	r0, #8161	; 0x1fe1
    71f0:	movt	r0, #40977	; 0xa011
    71f4:	str	r0, [r6, #40]	; 0x28
    71f8:	mov	r0, r5
    71fc:	ldr	r1, [r6, #12]
    7200:	movw	r2, #31161	; 0x79b9
    7204:	movt	r2, #40503	; 0x9e37
    7208:	add	r1, r1, #1
    720c:	str	r1, [r6, #12]
    7210:	ldr	r1, [r5, #4]
    7214:	ldrb	r6, [r5, #3]
    7218:	ldrb	r7, [r5, #2]
    721c:	ldrb	r3, [r5, #1]
    7220:	ldr	r8, [r0, #16]
    7224:	add	r1, r1, r2
    7228:	ldrb	r2, [r5]
    722c:	str	r8, [r5, #16]
    7230:	rsb	r6, r1, r6, lsl #24
    7234:	add	r7, r6, r7, lsl #16
    7238:	add	r3, r7, r3, lsl #8
    723c:	movw	r7, #48887	; 0xbef7
    7240:	movt	r7, #65261	; 0xfeed
    7244:	add	r2, r3, r2
    7248:	movw	r3, #47810	; 0xbac2
    724c:	movt	r3, #40777	; 0x9f49
    7250:	add	r2, r2, r3
    7254:	movw	r3, #63341	; 0xf76d
    7258:	movt	r3, #7
    725c:	eor	r2, r2, r3
    7260:	movw	r3, #16649	; 0x4109
    7264:	movt	r3, #274	; 0x112
    7268:	sub	r1, r1, r2
    726c:	add	r1, r1, r3
    7270:	eor	r1, r1, r2, lsl #8
    7274:	add	r3, r2, r1
    7278:	sub	r2, r2, r1
    727c:	sub	r3, r7, r3
    7280:	eor	r3, r3, r1, lsr #13
    7284:	sub	r2, r2, r3
    7288:	sub	r1, r1, r3
    728c:	eor	r2, r2, r3, lsr #12
    7290:	sub	r1, r1, r2
    7294:	sub	r3, r3, r2
    7298:	eor	r1, r1, r2, lsl #16
    729c:	sub	r3, r3, r1
    72a0:	sub	r2, r2, r1
    72a4:	eor	r3, r3, r1, lsr #5
    72a8:	sub	r2, r2, r3
    72ac:	sub	r1, r1, r3
    72b0:	eor	r2, r2, r3, lsr #3
    72b4:	sub	r1, r1, r2
    72b8:	eor	r1, r1, r2, lsl #10
    72bc:	sub	r2, r3, r2
    72c0:	sub	r2, r2, r1
    72c4:	eor	r1, r2, r1, lsr #15
    72c8:	str	r1, [r5, #44]	; 0x2c
    72cc:	ldr	r2, [r0, #16]
    72d0:	ldm	r2, {r0, r2}
    72d4:	sub	r2, r2, #1
    72d8:	and	r1, r1, r2
    72dc:	add	r2, r1, r1, lsl #1
    72e0:	mov	r3, r0
    72e4:	add	r0, r0, r2, lsl #2
    72e8:	ldr	r7, [r3, r2, lsl #2]!
    72ec:	mov	r2, #10
    72f0:	ldr	r1, [r3, #4]
    72f4:	cmp	r7, #0
    72f8:	add	r1, r1, #1
    72fc:	str	r1, [r3, #4]
    7300:	str	r9, [r5, #28]
    7304:	str	r7, [r5, #32]
    7308:	strne	r4, [r7, #12]
    730c:	str	r4, [r3]
    7310:	ldr	r5, [sp, #4]
    7314:	ldr	r0, [r0, #8]
    7318:	add	r0, r0, r0, lsl #2
    731c:	add	r0, r2, r0, lsl #1
    7320:	cmp	r1, r0
    7324:	bcc	7494 <clock_from_fhs@@Base+0x4a4>
    7328:	ldr	r0, [r8, #36]	; 0x24
    732c:	cmp	r0, #1
    7330:	beq	7494 <clock_from_fhs@@Base+0x4a4>
    7334:	ldr	r0, [r8, #4]
    7338:	str	r4, [sp]
    733c:	add	r0, r0, r0, lsl #1
    7340:	lsl	r0, r0, #3
    7344:	bl	46ec <malloc@plt>
    7348:	cmp	r0, #0
    734c:	beq	74b4 <clock_from_fhs@@Base+0x4c4>
    7350:	mov	r5, r0
    7354:	ldr	r0, [r8, #4]
    7358:	mov	r1, #0
    735c:	add	r0, r0, r0, lsl #1
    7360:	lsl	r2, r0, #3
    7364:	mov	r0, r5
    7368:	bl	47e8 <memset@plt>
    736c:	str	r9, [r8, #28]
    7370:	mvn	r2, #0
    7374:	mov	r7, #1
    7378:	ldr	r0, [r8]
    737c:	ldr	r6, [r8, #4]
    7380:	ldr	r1, [r8, #12]
    7384:	str	r0, [sp, #20]
    7388:	ldr	r0, [r8, #8]
    738c:	add	r2, r2, r6, lsl #1
    7390:	str	r6, [sp, #16]
    7394:	tst	r2, r1
    7398:	add	r0, r0, #1
    739c:	lsr	r3, r1, r0
    73a0:	addne	r3, r7, r1, lsr r0
    73a4:	cmp	r6, #0
    73a8:	str	r3, [r8, #24]
    73ac:	beq	7438 <clock_from_fhs@@Base+0x448>
    73b0:	mov	r7, #0
    73b4:	mov	lr, #0
    73b8:	ldr	r1, [sp, #20]
    73bc:	add	r0, lr, lr, lsl #1
    73c0:	ldr	r4, [r1, r0, lsl #2]
    73c4:	cmp	r4, #0
    73c8:	beq	7428 <clock_from_fhs@@Base+0x438>
    73cc:	ldr	r0, [r4, #28]
    73d0:	ldr	r6, [r4, #16]
    73d4:	and	r0, r0, r2
    73d8:	add	r0, r0, r0, lsl #1
    73dc:	add	r1, r5, r0, lsl #2
    73e0:	ldr	r0, [r1, #4]
    73e4:	add	ip, r0, #1
    73e8:	cmp	ip, r3
    73ec:	str	ip, [r1, #4]
    73f0:	bls	7404 <clock_from_fhs@@Base+0x414>
    73f4:	udiv	r0, ip, r3
    73f8:	add	r7, r7, #1
    73fc:	str	r7, [r8, #28]
    7400:	str	r0, [r1, #8]
    7404:	str	r9, [r4, #12]
    7408:	ldr	r0, [r1]
    740c:	cmp	r0, #0
    7410:	str	r0, [r4, #16]
    7414:	strne	r4, [r0, #12]
    7418:	str	r4, [r1]
    741c:	cmp	r6, #0
    7420:	mov	r4, r6
    7424:	bne	73cc <clock_from_fhs@@Base+0x3dc>
    7428:	ldr	r0, [sp, #16]
    742c:	add	lr, lr, #1
    7430:	cmp	lr, r0
    7434:	bne	73b8 <clock_from_fhs@@Base+0x3c8>
    7438:	ldr	r0, [sp, #20]
    743c:	bl	45d8 <free@plt>
    7440:	ldr	r0, [sp]
    7444:	ldr	r0, [r0]
    7448:	str	r5, [r0]
    744c:	ldr	r7, [r0, #28]
    7450:	ldmib	r0, {r1, r2, r3}
    7454:	lsl	r1, r1, #1
    7458:	cmp	r7, r3, lsr #1
    745c:	str	r1, [r0, #4]
    7460:	add	r1, r2, #1
    7464:	str	r1, [r0, #8]
    7468:	bls	748c <clock_from_fhs@@Base+0x49c>
    746c:	ldr	r1, [r0, #32]
    7470:	ldr	r5, [sp, #4]
    7474:	add	r1, r1, #1
    7478:	cmp	r1, #2
    747c:	str	r1, [r0, #32]
    7480:	movcs	r1, #1
    7484:	strcs	r1, [r0, #36]	; 0x24
    7488:	b	7494 <clock_from_fhs@@Base+0x4a4>
    748c:	ldr	r5, [sp, #4]
    7490:	str	r9, [r0, #32]
    7494:	ldr	r3, [sp, #8]
    7498:	add	sl, sl, #1
    749c:	cmp	sl, #58	; 0x3a
    74a0:	bne	704c <clock_from_fhs@@Base+0x5c>
    74a4:	sub	sp, fp, #48	; 0x30
    74a8:	vpop	{d8-d9}
    74ac:	add	sp, sp, #4
    74b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74b4:	mvn	r0, #0
    74b8:	bl	4740 <exit@plt>
    74bc:	andeq	r5, r0, ip, lsl r5
    74c0:	andeq	r4, r0, r0, lsr #26
    74c4:	andeq	r5, r0, r0, lsl #26
    74c8:	andeq	r6, r0, r8, ror #9
    74cc:	andeq	lr, r1, ip, lsl r0
    74d0:	andeq	sp, r1, r8, ror #31

000074d4 <count_bits@@Base>:
    74d4:	mov	r1, #0
    74d8:	cmp	r0, #0
    74dc:	beq	74f4 <count_bits@@Base+0x20>
    74e0:	sub	r2, r0, #1
    74e4:	add	r1, r1, #1
    74e8:	and	r0, r2, r0
    74ec:	tst	r0, #255	; 0xff
    74f0:	bne	74e0 <count_bits@@Base+0xc>
    74f4:	mov	r0, r1
    74f8:	bx	lr

000074fc <btbb_piconet_new@@Base>:
    74fc:	push	{r4, sl, fp, lr}
    7500:	add	fp, sp, #8
    7504:	mov	r0, #1
    7508:	movw	r1, #5660	; 0x161c
    750c:	mov	r4, #1
    7510:	bl	4554 <calloc@plt>
    7514:	str	r4, [r0]
    7518:	pop	{r4, sl, fp, pc}

0000751c <btbb_piconet_ref@@Base>:
    751c:	ldr	r1, [r0]
    7520:	add	r1, r1, #1
    7524:	str	r1, [r0]
    7528:	bx	lr

0000752c <btbb_piconet_unref@@Base>:
    752c:	ldr	r1, [r0]
    7530:	subs	r1, r1, #1
    7534:	str	r1, [r0]
    7538:	bxne	lr
    753c:	b	45d8 <free@plt>

00007540 <btbb_init_survey@@Base>:
    7540:	ldr	r0, [pc, #16]	; 7558 <btbb_init_survey@@Base+0x18>
    7544:	mov	r1, #1
    7548:	add	r0, pc, r0
    754c:	strb	r1, [r0]
    7550:	mov	r0, #0
    7554:	bx	lr
    7558:	andeq	sp, r1, r8, lsr #24

0000755c <btbb_init_piconet@@Base>:
    755c:	str	r1, [r0, #24]
    7560:	ldr	r1, [r0, #4]
    7564:	orr	r1, r1, #8
    7568:	str	r1, [r0, #4]
    756c:	bx	lr

00007570 <btbb_piconet_set_flag@@Base>:
    7570:	push	{fp, lr}
    7574:	mov	fp, sp
    7578:	ldr	lr, [r0, #4]
    757c:	mov	ip, #1
    7580:	cmp	r2, #0
    7584:	orr	r3, lr, ip, lsl r1
    7588:	biceq	r3, lr, ip, lsl r1
    758c:	str	r3, [r0, #4]
    7590:	pop	{fp, pc}

00007594 <btbb_piconet_get_flag@@Base>:
    7594:	ldr	r0, [r0, #4]
    7598:	mov	r2, #1
    759c:	and	r0, r0, r2, lsl r1
    75a0:	cmp	r0, #0
    75a4:	movwne	r0, #1
    75a8:	bx	lr

000075ac <btbb_piconet_set_uap@@Base>:
    75ac:	strb	r1, [r0, #28]
    75b0:	ldr	r1, [r0, #4]
    75b4:	orr	r1, r1, #4
    75b8:	str	r1, [r0, #4]
    75bc:	bx	lr

000075c0 <btbb_piconet_get_uap@@Base>:
    75c0:	ldrb	r0, [r0, #28]
    75c4:	bx	lr

000075c8 <btbb_piconet_get_lap@@Base>:
    75c8:	ldr	r0, [r0, #24]
    75cc:	bx	lr

000075d0 <btbb_piconet_get_nap@@Base>:
    75d0:	ldrh	r0, [r0, #30]
    75d4:	bx	lr

000075d8 <btbb_piconet_get_bdaddr@@Base>:
    75d8:	ldrb	r1, [r0, #28]
    75dc:	ldr	r2, [r0, #24]
    75e0:	orr	r2, r2, r1, lsl #24
    75e4:	ldrh	r1, [r0, #30]
    75e8:	mov	r0, r2
    75ec:	bx	lr

000075f0 <btbb_piconet_get_clk_offset@@Base>:
    75f0:	movw	r1, #5648	; 0x1610
    75f4:	ldr	r0, [r0, r1]
    75f8:	bx	lr

000075fc <btbb_piconet_set_clk_offset@@Base>:
    75fc:	movw	r2, #5648	; 0x1610
    7600:	str	r1, [r0, r2]
    7604:	bx	lr

00007608 <btbb_piconet_set_afh_map@@Base>:
    7608:	push	{fp, lr}
    760c:	mov	fp, sp
    7610:	mov	ip, #0
    7614:	strb	ip, [r0, #22]
    7618:	ldrb	r3, [r1, ip]
    761c:	add	r2, r0, ip
    7620:	mov	lr, #0
    7624:	cmp	r3, #0
    7628:	strb	r3, [r2, #12]
    762c:	beq	7648 <btbb_piconet_set_afh_map@@Base+0x40>
    7630:	mov	lr, #0
    7634:	sub	r2, r3, #1
    7638:	add	lr, lr, #1
    763c:	and	r3, r2, r3
    7640:	tst	r3, #255	; 0xff
    7644:	bne	7634 <btbb_piconet_set_afh_map@@Base+0x2c>
    7648:	ldrb	r2, [r0, #22]
    764c:	add	ip, ip, #1
    7650:	cmp	ip, #10
    7654:	add	r2, r2, lr
    7658:	strb	r2, [r0, #22]
    765c:	bne	7618 <btbb_piconet_set_afh_map@@Base+0x10>
    7660:	ldrb	r1, [r0, #4]
    7664:	tst	r1, #4
    7668:	popeq	{fp, pc}
    766c:	pop	{fp, lr}
    7670:	b	7674 <get_hop_pattern@@Base>

00007674 <get_hop_pattern@@Base>:
    7674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7678:	add	fp, sp, #28
    767c:	sub	sp, sp, #20
    7680:	mov	r5, r0
    7684:	ldrb	r0, [r0, #28]
    7688:	movw	r7, #16653	; 0x410d
    768c:	ldr	r1, [r5, #24]
    7690:	ldr	r2, [r5, #4]
    7694:	movt	r7, #274	; 0x112
    7698:	orr	r6, r1, r0, lsl #24
    769c:	ldrb	r0, [r5, #22]
    76a0:	str	r6, [sp, #8]
    76a4:	ubfx	r2, r2, #11, #1
    76a8:	orr	r8, r0, r2, lsl #7
    76ac:	str	r8, [sp, #12]
    76b0:	ldr	r0, [pc, #1160]	; 7b40 <get_hop_pattern@@Base+0x4cc>
    76b4:	ldr	r0, [pc, r0]
    76b8:	cmp	r0, #0
    76bc:	beq	77bc <get_hop_pattern@@Base+0x148>
    76c0:	and	r2, r6, #-16777216	; 0xff000000
    76c4:	and	r3, r1, #16711680	; 0xff0000
    76c8:	ldr	r9, [r0, #12]
    76cc:	add	r2, r2, r7
    76d0:	add	r2, r2, r3
    76d4:	and	r3, r1, #65280	; 0xff00
    76d8:	add	r2, r2, r3
    76dc:	movw	r3, #48883	; 0xbef3
    76e0:	uxtab	r1, r2, r1
    76e4:	movw	r2, #63341	; 0xf76d
    76e8:	movt	r3, #65261	; 0xfeed
    76ec:	movt	r2, #7
    76f0:	eor	r1, r1, r2
    76f4:	movw	r2, #47814	; 0xbac6
    76f8:	movt	r2, #40777	; 0x9f49
    76fc:	sub	r3, r3, r1
    7700:	sub	r2, r2, r1
    7704:	eor	r2, r2, r1, lsl #8
    7708:	sub	r3, r3, r2
    770c:	sub	r1, r1, r2
    7710:	eor	r3, r3, r2, lsr #13
    7714:	sub	r1, r1, r3
    7718:	sub	r2, r2, r3
    771c:	eor	r1, r1, r3, lsr #12
    7720:	sub	r2, r2, r1
    7724:	sub	r3, r3, r1
    7728:	eor	r2, r2, r1, lsl #16
    772c:	sub	r3, r3, r2
    7730:	sub	r1, r1, r2
    7734:	eor	r3, r3, r2, lsr #5
    7738:	sub	r1, r1, r3
    773c:	sub	r2, r2, r3
    7740:	eor	r1, r1, r3, lsr #3
    7744:	sub	r2, r2, r1
    7748:	eor	r2, r2, r1, lsl #10
    774c:	sub	r1, r3, r1
    7750:	sub	r1, r1, r2
    7754:	eor	r1, r1, r2, lsr #15
    7758:	ldm	r9, {r0, r2}
    775c:	sub	r2, r2, #1
    7760:	and	r1, r1, r2
    7764:	add	r1, r1, r1, lsl #1
    7768:	ldr	r0, [r0, r1, lsl #2]
    776c:	cmp	r0, #0
    7770:	beq	77bc <get_hop_pattern@@Base+0x148>
    7774:	ldr	r1, [r9, #20]
    7778:	add	r4, sp, #8
    777c:	sub	sl, r0, r1
    7780:	ldr	r0, [sl, #36]	; 0x24
    7784:	cmp	r0, #4
    7788:	bne	77a4 <get_hop_pattern@@Base+0x130>
    778c:	ldr	r0, [sl, #32]
    7790:	mov	r1, r4
    7794:	mov	r2, #4
    7798:	bl	4758 <bcmp@plt>
    779c:	cmp	r0, #0
    77a0:	beq	7b10 <get_hop_pattern@@Base+0x49c>
    77a4:	ldr	r0, [sl, #28]
    77a8:	cmp	r0, #0
    77ac:	beq	77bc <get_hop_pattern@@Base+0x148>
    77b0:	ldr	r1, [r9, #20]
    77b4:	sub	sl, r0, r1
    77b8:	b	7780 <get_hop_pattern@@Base+0x10c>
    77bc:	mov	r0, r5
    77c0:	bl	456c <gen_hop_pattern@plt>
    77c4:	mov	r0, #48	; 0x30
    77c8:	bl	46ec <malloc@plt>
    77cc:	mov	r4, r0
    77d0:	ldr	r0, [r5, #372]	; 0x174
    77d4:	mov	r1, #0
    77d8:	mov	r2, #4
    77dc:	str	r1, [r4, #20]
    77e0:	stm	r4, {r6, r8}
    77e4:	add	r8, r4, #12
    77e8:	str	r0, [r4, #8]
    77ec:	str	r4, [r4, #32]
    77f0:	str	r2, [r4, #36]	; 0x24
    77f4:	ldr	r0, [pc, #840]	; 7b44 <get_hop_pattern@@Base+0x4d0>
    77f8:	ldr	r0, [pc, r0]
    77fc:	cmp	r0, #0
    7800:	beq	7824 <get_hop_pattern@@Base+0x1b0>
    7804:	ldr	r5, [r0, #12]
    7808:	ldr	r1, [r5, #16]
    780c:	str	r4, [r1, #8]
    7810:	ldr	r2, [r5, #20]
    7814:	sub	r1, r1, r2
    7818:	str	r1, [r4, #16]
    781c:	str	r8, [r5, #16]
    7820:	b	78ac <get_hop_pattern@@Base+0x238>
    7824:	ldr	r0, [pc, #796]	; 7b48 <get_hop_pattern@@Base+0x4d4>
    7828:	str	r1, [r4, #16]
    782c:	add	r0, pc, r0
    7830:	str	r4, [r0]
    7834:	mov	r0, #44	; 0x2c
    7838:	bl	46ec <malloc@plt>
    783c:	cmp	r0, #0
    7840:	str	r0, [r4, #12]
    7844:	beq	7b38 <get_hop_pattern@@Base+0x4c4>
    7848:	vmov.i32	q8, #0	; 0x00000000
    784c:	mov	r5, r0
    7850:	add	r0, r0, #12
    7854:	mov	r1, #32
    7858:	vst1.32	{d16-d17}, [r0]
    785c:	mov	r0, #5
    7860:	str	r1, [r5, #4]
    7864:	str	r0, [r5, #8]
    7868:	add	r0, r5, #28
    786c:	vst1.32	{d16-d17}, [r0]
    7870:	mov	r0, #12
    7874:	str	r8, [r5, #16]
    7878:	str	r0, [r5, #20]
    787c:	mov	r0, #384	; 0x180
    7880:	bl	46ec <malloc@plt>
    7884:	cmp	r0, #0
    7888:	str	r0, [r5]
    788c:	beq	7b38 <get_hop_pattern@@Base+0x4c4>
    7890:	mov	r1, #0
    7894:	mov	r2, #384	; 0x180
    7898:	bl	47e8 <memset@plt>
    789c:	movw	r0, #8161	; 0x1fe1
    78a0:	movt	r0, #40977	; 0xa011
    78a4:	str	r0, [r5, #40]	; 0x28
    78a8:	mov	r0, r4
    78ac:	ldr	r1, [r5, #12]
    78b0:	add	r1, r1, #1
    78b4:	str	r1, [r5, #12]
    78b8:	ldr	r5, [r0, #12]
    78bc:	str	r5, [r4, #12]
    78c0:	ldrb	r6, [r4, #3]
    78c4:	ldrb	r3, [r4, #2]
    78c8:	ldrb	r2, [r4, #1]
    78cc:	ldrb	r1, [r4]
    78d0:	add	r7, r7, r6, lsl #24
    78d4:	mov	r6, #0
    78d8:	add	r3, r7, r3, lsl #16
    78dc:	add	r2, r3, r2, lsl #8
    78e0:	movw	r3, #48883	; 0xbef3
    78e4:	movt	r3, #65261	; 0xfeed
    78e8:	add	r1, r2, r1
    78ec:	movw	r2, #63341	; 0xf76d
    78f0:	movt	r2, #7
    78f4:	eor	r1, r1, r2
    78f8:	movw	r2, #47814	; 0xbac6
    78fc:	movt	r2, #40777	; 0x9f49
    7900:	sub	r3, r3, r1
    7904:	sub	r2, r2, r1
    7908:	eor	r2, r2, r1, lsl #8
    790c:	sub	r3, r3, r2
    7910:	sub	r1, r1, r2
    7914:	eor	r3, r3, r2, lsr #13
    7918:	sub	r1, r1, r3
    791c:	sub	r2, r2, r3
    7920:	eor	r1, r1, r3, lsr #12
    7924:	sub	r2, r2, r1
    7928:	sub	r3, r3, r1
    792c:	eor	r2, r2, r1, lsl #16
    7930:	sub	r3, r3, r2
    7934:	sub	r1, r1, r2
    7938:	eor	r3, r3, r2, lsr #5
    793c:	sub	r1, r1, r3
    7940:	sub	r2, r2, r3
    7944:	eor	r1, r1, r3, lsr #3
    7948:	sub	r2, r2, r1
    794c:	eor	r2, r2, r1, lsl #10
    7950:	sub	r1, r3, r1
    7954:	sub	r1, r1, r2
    7958:	eor	r1, r1, r2, lsr #15
    795c:	str	r1, [r4, #40]	; 0x28
    7960:	ldr	r2, [r0, #12]
    7964:	ldm	r2, {r0, r2}
    7968:	sub	r2, r2, #1
    796c:	and	r1, r1, r2
    7970:	add	r2, r1, r1, lsl #1
    7974:	mov	r3, r0
    7978:	add	r0, r0, r2, lsl #2
    797c:	ldr	r7, [r3, r2, lsl #2]!
    7980:	mov	r2, #10
    7984:	ldr	r1, [r3, #4]
    7988:	cmp	r7, #0
    798c:	add	r1, r1, #1
    7990:	str	r1, [r3, #4]
    7994:	str	r6, [r4, #24]
    7998:	str	r7, [r4, #28]
    799c:	strne	r8, [r7, #12]
    79a0:	str	r8, [r3]
    79a4:	ldr	r0, [r0, #8]
    79a8:	add	r0, r0, r0, lsl #2
    79ac:	add	r0, r2, r0, lsl #1
    79b0:	cmp	r1, r0
    79b4:	bcc	7b30 <get_hop_pattern@@Base+0x4bc>
    79b8:	ldr	r0, [r5, #36]	; 0x24
    79bc:	cmp	r0, #1
    79c0:	beq	7b30 <get_hop_pattern@@Base+0x4bc>
    79c4:	ldr	r0, [r5, #4]
    79c8:	str	r8, [sp]
    79cc:	add	r0, r0, r0, lsl #1
    79d0:	lsl	r0, r0, #3
    79d4:	bl	46ec <malloc@plt>
    79d8:	cmp	r0, #0
    79dc:	beq	7b38 <get_hop_pattern@@Base+0x4c4>
    79e0:	mov	r9, r0
    79e4:	ldr	r0, [r5, #4]
    79e8:	mov	r1, #0
    79ec:	mov	sl, #0
    79f0:	add	r0, r0, r0, lsl #1
    79f4:	lsl	r2, r0, #3
    79f8:	mov	r0, r9
    79fc:	bl	47e8 <memset@plt>
    7a00:	str	sl, [r5, #28]
    7a04:	mvn	r2, #0
    7a08:	mov	r6, #1
    7a0c:	ldr	r0, [r5]
    7a10:	str	r0, [sp, #4]
    7a14:	ldmib	r5, {r0, r1, r7}
    7a18:	add	r1, r1, #1
    7a1c:	lsr	r3, r7, r1
    7a20:	add	r2, r2, r0, lsl #1
    7a24:	tst	r2, r7
    7a28:	addne	r3, r6, r7, lsr r1
    7a2c:	cmp	r0, #0
    7a30:	str	r3, [r5, #24]
    7a34:	beq	7ac0 <get_hop_pattern@@Base+0x44c>
    7a38:	mov	ip, r5
    7a3c:	mov	r6, #0
    7a40:	mov	lr, #0
    7a44:	ldr	r4, [sp, #4]
    7a48:	add	r1, lr, lr, lsl #1
    7a4c:	ldr	r5, [r4, r1, lsl #2]
    7a50:	cmp	r5, #0
    7a54:	beq	7ab4 <get_hop_pattern@@Base+0x440>
    7a58:	ldr	r1, [r5, #28]
    7a5c:	ldr	r7, [r5, #16]
    7a60:	and	r1, r1, r2
    7a64:	add	r1, r1, r1, lsl #1
    7a68:	add	r1, r9, r1, lsl #2
    7a6c:	ldr	r4, [r1, #4]
    7a70:	add	r8, r4, #1
    7a74:	cmp	r8, r3
    7a78:	str	r8, [r1, #4]
    7a7c:	bls	7a90 <get_hop_pattern@@Base+0x41c>
    7a80:	udiv	r4, r8, r3
    7a84:	add	r6, r6, #1
    7a88:	str	r6, [ip, #28]
    7a8c:	str	r4, [r1, #8]
    7a90:	str	sl, [r5, #12]
    7a94:	ldr	r4, [r1]
    7a98:	cmp	r4, #0
    7a9c:	str	r4, [r5, #16]
    7aa0:	strne	r5, [r4, #12]
    7aa4:	str	r5, [r1]
    7aa8:	cmp	r7, #0
    7aac:	mov	r5, r7
    7ab0:	bne	7a58 <get_hop_pattern@@Base+0x3e4>
    7ab4:	add	lr, lr, #1
    7ab8:	cmp	lr, r0
    7abc:	bne	7a44 <get_hop_pattern@@Base+0x3d0>
    7ac0:	ldr	r0, [sp, #4]
    7ac4:	bl	45d8 <free@plt>
    7ac8:	ldr	r0, [sp]
    7acc:	ldr	r0, [r0]
    7ad0:	str	r9, [r0]
    7ad4:	ldr	r7, [r0, #28]
    7ad8:	ldmib	r0, {r1, r2, r3}
    7adc:	lsl	r1, r1, #1
    7ae0:	cmp	r7, r3, lsr #1
    7ae4:	str	r1, [r0, #4]
    7ae8:	add	r1, r2, #1
    7aec:	str	r1, [r0, #8]
    7af0:	bls	7b28 <get_hop_pattern@@Base+0x4b4>
    7af4:	ldr	r1, [r0, #32]
    7af8:	add	r1, r1, #1
    7afc:	cmp	r1, #2
    7b00:	str	r1, [r0, #32]
    7b04:	movcs	r1, #1
    7b08:	strcs	r1, [r0, #36]	; 0x24
    7b0c:	b	7b30 <get_hop_pattern@@Base+0x4bc>
    7b10:	ldr	r0, [pc, #52]	; 7b4c <get_hop_pattern@@Base+0x4d8>
    7b14:	add	r0, pc, r0
    7b18:	bl	46e0 <puts@plt>
    7b1c:	ldr	r0, [sl, #8]
    7b20:	str	r0, [r5, #372]	; 0x174
    7b24:	b	7b30 <get_hop_pattern@@Base+0x4bc>
    7b28:	mov	r1, #0
    7b2c:	str	r1, [r0, #32]
    7b30:	sub	sp, fp, #28
    7b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b38:	mvn	r0, #0
    7b3c:	bl	4740 <exit@plt>
    7b40:	andeq	sp, r1, r0, asr #21
    7b44:	andeq	sp, r1, ip, ror r9
    7b48:	andeq	sp, r1, r8, asr #18
    7b4c:	andeq	r6, r0, pc, lsl #13

00007b50 <btbb_piconet_get_afh_map@@Base>:
    7b50:	add	r0, r0, #12
    7b54:	bx	lr

00007b58 <btbb_piconet_set_channel_seen@@Base>:
    7b58:	push	{fp, lr}
    7b5c:	mov	fp, sp
    7b60:	add	r2, r0, r1, lsr #3
    7b64:	and	lr, r1, #7
    7b68:	mov	ip, #1
    7b6c:	mov	r1, #0
    7b70:	ldrb	r3, [r2, #12]!
    7b74:	tst	r3, ip, lsl lr
    7b78:	bne	7b98 <btbb_piconet_set_channel_seen@@Base+0x40>
    7b7c:	lsl	r1, ip, lr
    7b80:	orr	r1, r3, r1
    7b84:	strb	r1, [r2]
    7b88:	ldrb	r1, [r0, #22]
    7b8c:	add	r1, r1, #1
    7b90:	strb	r1, [r0, #22]
    7b94:	mov	r1, #1
    7b98:	mov	r0, r1
    7b9c:	pop	{fp, pc}

00007ba0 <btbb_piconet_clear_channel_seen@@Base>:
    7ba0:	push	{fp, lr}
    7ba4:	mov	fp, sp
    7ba8:	mov	lr, r0
    7bac:	and	ip, r1, #7
    7bb0:	mov	r0, #1
    7bb4:	add	r1, lr, r1, lsr #3
    7bb8:	ldrb	r3, [r1, #12]!
    7bbc:	tst	r3, r0, lsl ip
    7bc0:	beq	7be0 <btbb_piconet_clear_channel_seen@@Base+0x40>
    7bc4:	lsl	r2, r0, ip
    7bc8:	bic	r2, r3, r2
    7bcc:	strb	r2, [r1]
    7bd0:	ldrb	r1, [lr, #22]
    7bd4:	sub	r1, r1, #1
    7bd8:	strb	r1, [lr, #22]
    7bdc:	pop	{fp, pc}
    7be0:	mov	r0, #0
    7be4:	pop	{fp, pc}

00007be8 <btbb_piconet_get_channel_seen@@Base>:
    7be8:	mov	r2, r0
    7bec:	mov	r0, #1
    7bf0:	cmp	r1, #78	; 0x4e
    7bf4:	bxhi	lr
    7bf8:	add	r0, r2, r1, lsr #3
    7bfc:	and	r1, r1, #7
    7c00:	mov	r2, #1
    7c04:	ldrb	r0, [r0, #12]
    7c08:	and	r0, r0, r2, lsl r1
    7c0c:	cmp	r0, #0
    7c10:	movwne	r0, #1
    7c14:	bx	lr

00007c18 <precalc@@Base>:
    7c18:	push	{r4, r5, r6, sl, fp, lr}
    7c1c:	add	fp, sp, #16
    7c20:	movw	lr, #29865	; 0x74a9
    7c24:	mov	r1, #0
    7c28:	mov	r3, #79	; 0x4f
    7c2c:	mov	ip, #1
    7c30:	mov	r2, #0
    7c34:	movt	lr, #53092	; 0xcf64
    7c38:	lsl	r4, r1, #1
    7c3c:	uxtb	r4, r4
    7c40:	umull	r5, r6, r4, lr
    7c44:	lsr	r5, r6, #6
    7c48:	mls	r4, r5, r3, r4
    7c4c:	ldrb	r5, [r0, #5]
    7c50:	tst	r5, #8
    7c54:	bne	7c60 <precalc@@Base+0x48>
    7c58:	mov	r5, r1
    7c5c:	b	7c80 <precalc@@Base+0x68>
    7c60:	add	r5, r0, r4, lsr #3
    7c64:	and	r6, r4, #7
    7c68:	ldrb	r5, [r5, #12]
    7c6c:	tst	r5, ip, lsl r6
    7c70:	beq	7c88 <precalc@@Base+0x70>
    7c74:	add	r6, r2, #1
    7c78:	mov	r5, r2
    7c7c:	mov	r2, r6
    7c80:	add	r5, r0, r5, lsl #2
    7c84:	str	r4, [r5, #56]	; 0x38
    7c88:	add	r1, r1, #1
    7c8c:	cmp	r1, #79	; 0x4f
    7c90:	bne	7c38 <precalc@@Base+0x20>
    7c94:	pop	{r4, r5, r6, sl, fp, pc}

00007c98 <address_precalc@@Base>:
    7c98:	push	{r4, r5, fp, lr}
    7c9c:	add	fp, sp, #8
    7ca0:	ubfx	r2, r0, #10, #9
    7ca4:	mov	ip, #8
    7ca8:	mov	lr, #16
    7cac:	and	r4, r0, #1
    7cb0:	str	r2, [r1, #52]	; 0x34
    7cb4:	ubfx	r2, r0, #19, #4
    7cb8:	and	r3, lr, r0, asr #4
    7cbc:	str	r2, [r1, #36]	; 0x24
    7cc0:	ubfx	r2, r0, #23, #5
    7cc4:	str	r2, [r1, #44]	; 0x2c
    7cc8:	and	r2, ip, r0, asr #3
    7ccc:	orr	r2, r2, r4
    7cd0:	orr	r2, r2, r3
    7cd4:	mov	r3, #4
    7cd8:	and	r4, r3, r0, asr #2
    7cdc:	and	r3, r3, r0, asr #3
    7ce0:	orr	r2, r2, r4
    7ce4:	mov	r4, #2
    7ce8:	and	r5, r4, r0, asr #1
    7cec:	orr	r2, r2, r5
    7cf0:	mov	r5, #64	; 0x40
    7cf4:	str	r2, [r1, #48]	; 0x30
    7cf8:	mov	r2, #32
    7cfc:	and	r5, r5, r0, lsr #7
    7d00:	and	r2, r2, r0, lsr #6
    7d04:	orr	r2, r5, r2
    7d08:	and	r5, lr, r0, lsr #5
    7d0c:	orr	r2, r2, r5
    7d10:	and	r5, ip, r0, asr #4
    7d14:	orr	r2, r2, r5
    7d18:	orr	r2, r2, r3
    7d1c:	and	r3, r4, r0, asr #2
    7d20:	orr	r2, r2, r3
    7d24:	mov	r3, #1
    7d28:	and	r0, r3, r0, asr #1
    7d2c:	orr	r0, r2, r0
    7d30:	str	r0, [r1, #40]	; 0x28
    7d34:	pop	{r4, r5, fp, pc}

00007d38 <perm5@@Base>:
    7d38:	push	{r4, r5, r6, sl, fp, lr}
    7d3c:	add	fp, sp, #16
    7d40:	sub	sp, sp, #76	; 0x4c
    7d44:	mov	r3, #0
    7d48:	mov	ip, #1
    7d4c:	mov	lr, sp
    7d50:	and	r4, ip, r2, lsr r3
    7d54:	str	r4, [lr, r3, lsl #2]
    7d58:	add	r3, r3, #1
    7d5c:	cmp	r3, #9
    7d60:	bne	7d50 <perm5@@Base+0x18>
    7d64:	add	r2, lr, #36	; 0x24
    7d68:	mov	r3, #0
    7d6c:	mov	ip, #1
    7d70:	and	r4, ip, r1, lsr r3
    7d74:	str	r4, [r2, r3, lsl #2]
    7d78:	add	r3, r3, #1
    7d7c:	cmp	r3, #5
    7d80:	bne	7d70 <perm5@@Base+0x38>
    7d84:	mov	r2, #0
    7d88:	mov	r3, #1
    7d8c:	sub	r1, fp, #36	; 0x24
    7d90:	and	r4, r3, r0, lsr r2
    7d94:	str	r4, [r1, r2, lsl #2]
    7d98:	add	r2, r2, #1
    7d9c:	cmp	r2, #5
    7da0:	bne	7d90 <perm5@@Base+0x58>
    7da4:	ldr	ip, [pc, #96]	; 7e0c <perm5@@Base+0xd4>
    7da8:	ldr	r2, [pc, #96]	; 7e10 <perm5@@Base+0xd8>
    7dac:	mov	r0, #13
    7db0:	add	ip, pc, ip
    7db4:	add	r2, pc, r2
    7db8:	ldr	r3, [lr, r0, lsl #2]
    7dbc:	cmp	r3, #0
    7dc0:	beq	7ddc <perm5@@Base+0xa4>
    7dc4:	ldr	r3, [ip, r0, lsl #2]
    7dc8:	ldr	r5, [r2, r0, lsl #2]
    7dcc:	ldr	r4, [r1, r3, lsl #2]
    7dd0:	ldr	r6, [r1, r5, lsl #2]
    7dd4:	str	r6, [r1, r3, lsl #2]
    7dd8:	str	r4, [r1, r5, lsl #2]
    7ddc:	sub	r0, r0, #1
    7de0:	cmn	r0, #1
    7de4:	bne	7db8 <perm5@@Base+0x80>
    7de8:	mov	r0, #0
    7dec:	mov	r2, #0
    7df0:	ldr	r3, [r1, r2, lsl #2]
    7df4:	add	r0, r0, r3, lsl r2
    7df8:	add	r2, r2, #1
    7dfc:	cmp	r2, #5
    7e00:	bne	7df0 <perm5@@Base+0xb8>
    7e04:	sub	sp, fp, #16
    7e08:	pop	{r4, r5, r6, sl, fp, pc}
    7e0c:	muleq	r0, r0, r2
    7e10:	andeq	r6, r0, r4, asr #5

00007e14 <perm_table_init@@Base>:
    7e14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7e18:	add	fp, sp, #24
    7e1c:	ldr	r8, [pc, #84]	; 7e78 <perm_table_init@@Base+0x64>
    7e20:	mov	r4, #0
    7e24:	ldr	r8, [pc, r8]
    7e28:	mov	r7, r8
    7e2c:	mov	r5, #0
    7e30:	mov	r6, #0
    7e34:	mov	r0, r4
    7e38:	mov	r1, r5
    7e3c:	mov	r2, r6
    7e40:	bl	4848 <perm5@plt>
    7e44:	strb	r0, [r7, r6]
    7e48:	add	r6, r6, #1
    7e4c:	cmp	r6, #512	; 0x200
    7e50:	bne	7e34 <perm_table_init@@Base+0x20>
    7e54:	add	r5, r5, #1
    7e58:	add	r7, r7, #512	; 0x200
    7e5c:	cmp	r5, #32
    7e60:	bne	7e30 <perm_table_init@@Base+0x1c>
    7e64:	add	r4, r4, #1
    7e68:	add	r8, r8, #16384	; 0x4000
    7e6c:	cmp	r4, #32
    7e70:	bne	7e28 <perm_table_init@@Base+0x14>
    7e74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    7e78:	andeq	sp, r1, r4, lsr #6

00007e7c <fast_perm@@Base>:
    7e7c:	push	{r4, r5, r6, r7, fp, lr}
    7e80:	add	fp, sp, #16
    7e84:	ldr	r7, [pc, #60]	; 7ec8 <fast_perm@@Base+0x4c>
    7e88:	mov	r6, r0
    7e8c:	mov	r4, r2
    7e90:	mov	r5, r1
    7e94:	ldr	r7, [pc, r7]
    7e98:	ldr	r0, [r7]
    7e9c:	cmp	r0, #0
    7ea0:	bne	7eb0 <fast_perm@@Base+0x34>
    7ea4:	bl	4680 <perm_table_init@plt>
    7ea8:	mov	r0, #1
    7eac:	str	r0, [r7]
    7eb0:	ldr	r0, [pc, #20]	; 7ecc <fast_perm@@Base+0x50>
    7eb4:	ldr	r0, [pc, r0]
    7eb8:	add	r0, r0, r6, lsl #14
    7ebc:	add	r0, r0, r5, lsl #9
    7ec0:	ldrb	r0, [r0, r4]
    7ec4:	pop	{r4, r5, r6, r7, fp, pc}
    7ec8:			; <UNDEFINED> instruction: 0x0001d2b8
    7ecc:	muleq	r1, r4, r2

00007ed0 <gen_hop_pattern@@Base>:
    7ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ed4:	add	fp, sp, #28
    7ed8:	sub	sp, sp, #36	; 0x24
    7edc:	mov	r4, r0
    7ee0:	ldr	r0, [pc, #624]	; 8158 <gen_hop_pattern@@Base+0x288>
    7ee4:	add	r0, pc, r0
    7ee8:	bl	46e0 <puts@plt>
    7eec:	mov	r0, #134217728	; 0x8000000
    7ef0:	bl	46ec <malloc@plt>
    7ef4:	str	r0, [r4, #372]	; 0x174
    7ef8:	mov	r0, r4
    7efc:	bl	4890 <precalc@plt>
    7f00:	ldrb	r0, [r4, #28]
    7f04:	ldr	r1, [r4, #24]
    7f08:	orr	r0, r1, r0, lsl #24
    7f0c:	mov	r1, r4
    7f10:	bic	r0, r0, #-268435456	; 0xf0000000
    7f14:	bl	47dc <address_precalc@plt>
    7f18:	ldr	r3, [pc, #572]	; 815c <gen_hop_pattern@@Base+0x28c>
    7f1c:	mov	r1, #0
    7f20:	mov	r5, #0
    7f24:	mov	r6, #0
    7f28:	mov	r0, #0
    7f2c:	ldr	r3, [pc, r3]
    7f30:	str	r1, [sp, #28]
    7f34:	mov	r1, #0
    7f38:	str	r1, [sp, #32]
    7f3c:	mov	r1, #0
    7f40:	str	r0, [sp, #4]
    7f44:	ldr	r0, [r4, #44]	; 0x2c
    7f48:	str	r1, [sp, #8]
    7f4c:	eor	r0, r0, r1
    7f50:	mov	r1, #0
    7f54:	str	r0, [sp, #24]
    7f58:	ldr	r0, [r4, #48]	; 0x30
    7f5c:	str	r1, [sp, #12]
    7f60:	eor	r7, r0, r1
    7f64:	mov	r1, #0
    7f68:	eor	r9, r7, #31
    7f6c:	ldr	r0, [r4, #52]	; 0x34
    7f70:	mov	sl, #0
    7f74:	str	r6, [sp, #20]
    7f78:	str	r1, [sp, #16]
    7f7c:	eor	r8, r0, r1
    7f80:	ldr	r0, [sp, #24]
    7f84:	add	r0, r0, sl
    7f88:	asr	r1, r0, #31
    7f8c:	add	r1, r0, r1, lsr #27
    7f90:	bic	r1, r1, #31
    7f94:	sub	r0, r0, r1
    7f98:	ldr	r1, [r4, #36]	; 0x24
    7f9c:	eor	r6, r0, r1
    7fa0:	ldr	r0, [r3]
    7fa4:	cmp	r0, #0
    7fa8:	bne	7fc0 <gen_hop_pattern@@Base+0xf0>
    7fac:	bl	4680 <perm_table_init@plt>
    7fb0:	ldr	r3, [pc, #424]	; 8160 <gen_hop_pattern@@Base+0x290>
    7fb4:	mov	r0, #1
    7fb8:	ldr	r3, [pc, r3]
    7fbc:	str	r0, [r3]
    7fc0:	ldr	r0, [pc, #412]	; 8164 <gen_hop_pattern@@Base+0x294>
    7fc4:	ldr	r0, [pc, r0]
    7fc8:	ldr	r1, [r4, #40]	; 0x28
    7fcc:	add	r6, r0, r6, lsl #14
    7fd0:	add	r0, r6, r7, lsl #9
    7fd4:	ldrb	r0, [r0, r8]
    7fd8:	add	r0, r1, r0
    7fdc:	ldrb	r1, [r4, #5]
    7fe0:	tst	r1, #8
    7fe4:	bne	800c <gen_hop_pattern@@Base+0x13c>
    7fe8:	ldr	r1, [sp, #32]
    7fec:	add	r0, r0, r1
    7ff0:	movw	r1, #29865	; 0x74a9
    7ff4:	movt	r1, #53092	; 0xcf64
    7ff8:	umull	r1, r2, r0, r1
    7ffc:	lsr	r1, r2, #6
    8000:	mov	r2, #79	; 0x4f
    8004:	mls	r0, r1, r2, r0
    8008:	b	8020 <gen_hop_pattern@@Base+0x150>
    800c:	ldr	r1, [sp, #28]
    8010:	add	r0, r0, r1
    8014:	ldrb	r1, [r4, #22]
    8018:	udiv	r2, r0, r1
    801c:	mls	r0, r2, r1, r0
    8020:	add	r0, r4, r0, lsl #2
    8024:	ldr	r1, [r4, #372]	; 0x174
    8028:	ldr	r0, [r0, #56]	; 0x38
    802c:	strb	r0, [r1, r5]
    8030:	ldr	r0, [r3]
    8034:	cmp	r0, #0
    8038:	bne	8050 <gen_hop_pattern@@Base+0x180>
    803c:	bl	4680 <perm_table_init@plt>
    8040:	ldr	r3, [pc, #288]	; 8168 <gen_hop_pattern@@Base+0x298>
    8044:	mov	r0, #1
    8048:	ldr	r3, [pc, r3]
    804c:	str	r0, [r3]
    8050:	add	r0, r6, r9, lsl #9
    8054:	ldr	r1, [r4, #40]	; 0x28
    8058:	ldrb	r0, [r0, r8]
    805c:	add	r0, r0, r1
    8060:	ldrb	r1, [r4, #5]
    8064:	add	r0, r0, #32
    8068:	tst	r1, #8
    806c:	bne	8094 <gen_hop_pattern@@Base+0x1c4>
    8070:	ldr	r1, [sp, #32]
    8074:	add	r0, r0, r1
    8078:	movw	r1, #29865	; 0x74a9
    807c:	movt	r1, #53092	; 0xcf64
    8080:	umull	r1, r2, r0, r1
    8084:	lsr	r1, r2, #6
    8088:	mov	r2, #79	; 0x4f
    808c:	mls	r0, r1, r2, r0
    8090:	b	80a8 <gen_hop_pattern@@Base+0x1d8>
    8094:	ldr	r1, [sp, #28]
    8098:	add	r0, r0, r1
    809c:	ldrb	r1, [r4, #22]
    80a0:	udiv	r2, r0, r1
    80a4:	mls	r0, r2, r1, r0
    80a8:	add	r0, r4, r0, lsl #2
    80ac:	ldr	r1, [r4, #372]	; 0x174
    80b0:	add	sl, sl, #1
    80b4:	cmp	sl, #32
    80b8:	ldr	r0, [r0, #56]	; 0x38
    80bc:	add	r1, r1, r5
    80c0:	add	r5, r5, #2
    80c4:	strb	r0, [r1, #1]
    80c8:	bne	7f80 <gen_hop_pattern@@Base+0xb0>
    80cc:	ldr	r6, [sp, #20]
    80d0:	movw	r0, #29865	; 0x74a9
    80d4:	movt	r0, #53092	; 0xcf64
    80d8:	add	r6, r6, #16
    80dc:	umull	r0, r1, r6, r0
    80e0:	lsr	r0, r1, #6
    80e4:	mov	r1, #79	; 0x4f
    80e8:	mls	r0, r0, r1, r6
    80ec:	ldrb	r1, [r4, #22]
    80f0:	str	r0, [sp, #32]
    80f4:	uxtb	r0, r0
    80f8:	udiv	r2, r0, r1
    80fc:	mls	r0, r2, r1, r0
    8100:	str	r0, [sp, #28]
    8104:	ldr	r1, [sp, #16]
    8108:	add	r1, r1, #1
    810c:	cmp	r1, #512	; 0x200
    8110:	bne	7f6c <gen_hop_pattern@@Base+0x9c>
    8114:	ldr	r1, [sp, #12]
    8118:	add	r1, r1, #1
    811c:	cmp	r1, #32
    8120:	bne	7f58 <gen_hop_pattern@@Base+0x88>
    8124:	ldr	r1, [sp, #8]
    8128:	add	r1, r1, #1
    812c:	cmp	r1, #32
    8130:	bne	7f44 <gen_hop_pattern@@Base+0x74>
    8134:	ldr	r0, [sp, #4]
    8138:	add	r0, r0, #1
    813c:	cmp	r0, #4
    8140:	bne	7f3c <gen_hop_pattern@@Base+0x6c>
    8144:	ldr	r0, [pc, #32]	; 816c <gen_hop_pattern@@Base+0x29c>
    8148:	add	r0, pc, r0
    814c:	sub	sp, fp, #28
    8150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8154:	b	46e0 <puts@plt>
    8158:	andeq	r6, r0, r1, ror #5
    815c:	andeq	sp, r1, r0, lsr #4
    8160:	muleq	r1, r4, r1
    8164:	andeq	sp, r1, r4, lsl #3
    8168:	andeq	sp, r1, r4, lsl #2
    816c:	andeq	r6, r0, r5, lsr #1

00008170 <single_hop@@Base>:
    8170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8174:	add	fp, sp, #28
    8178:	sub	sp, sp, #4
    817c:	mov	r4, r1
    8180:	mov	r5, r0
    8184:	ldr	r0, [r1, #36]	; 0x24
    8188:	ldr	r1, [r1, #44]	; 0x2c
    818c:	movw	ip, #65520	; 0xfff0
    8190:	ldr	r2, [r4, #48]	; 0x30
    8194:	ldr	r3, [r4, #52]	; 0x34
    8198:	ubfx	r6, r5, #1, #1
    819c:	ldr	r8, [pc, #168]	; 824c <single_hop@@Base+0xdc>
    81a0:	movt	ip, #511	; 0x1ff
    81a4:	rsb	r7, r6, r6, lsl #5
    81a8:	eor	r1, r1, r5, lsr #21
    81ac:	ldr	r8, [pc, r8]
    81b0:	eor	r2, r2, r5, lsr #16
    81b4:	add	r1, r1, r5, lsr #2
    81b8:	and	r2, r2, #31
    81bc:	and	r1, r1, #31
    81c0:	eor	r9, r2, r7
    81c4:	eor	r7, r3, r5, lsr #7
    81c8:	eor	sl, r1, r0
    81cc:	ldr	r0, [r8]
    81d0:	bfc	r7, #9, #23
    81d4:	cmp	r0, #0
    81d8:	bne	81f0 <single_hop@@Base+0x80>
    81dc:	bl	4680 <perm_table_init@plt>
    81e0:	movw	ip, #65520	; 0xfff0
    81e4:	mov	r0, #1
    81e8:	movt	ip, #511	; 0x1ff
    81ec:	str	r0, [r8]
    81f0:	ldr	r2, [pc, #88]	; 8250 <single_hop@@Base+0xe0>
    81f4:	and	r1, ip, r5, lsr #3
    81f8:	lsl	r0, r6, #5
    81fc:	ldr	r2, [pc, r2]
    8200:	add	r2, r2, sl, lsl #14
    8204:	add	r2, r2, r9, lsl #9
    8208:	ldrb	r3, [r2, r7]
    820c:	ldrb	r7, [r4, #5]
    8210:	mov	r2, #79	; 0x4f
    8214:	tst	r7, #8
    8218:	add	r0, r0, r3
    821c:	ldrbne	r2, [r4, #22]
    8220:	udiv	r7, r1, r2
    8224:	mls	r1, r7, r2, r1
    8228:	add	r0, r0, r1
    822c:	ldr	r1, [r4, #40]	; 0x28
    8230:	add	r0, r0, r1
    8234:	udiv	r1, r0, r2
    8238:	mls	r0, r1, r2, r0
    823c:	add	r0, r4, r0, lsl #2
    8240:	ldrb	r0, [r0, #56]	; 0x38
    8244:	sub	sp, fp, #28
    8248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    824c:	andeq	ip, r1, r0, lsr #31
    8250:	andeq	ip, r1, ip, asr #30

00008254 <hop@@Base>:
    8254:	ldr	r1, [r1, #372]	; 0x174
    8258:	ldrb	r0, [r1, r0]
    825c:	bx	lr

00008260 <btbb_init_hop_reversal@@Base>:
    8260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    8264:	add	fp, sp, #24
    8268:	mov	r8, r0
    826c:	mov	r0, r1
    8270:	mov	r9, r1
    8274:	bl	46d4 <get_hop_pattern@plt>
    8278:	movw	r0, #15728	; 0x3d70
    827c:	cmp	r8, #0
    8280:	movt	r0, #10
    8284:	movweq	r0, #15760	; 0x3d90
    8288:	movteq	r0, #3
    828c:	bl	46ec <malloc@plt>
    8290:	movw	r1, #4648	; 0x1228
    8294:	mov	r7, r9
    8298:	movw	ip, #34079	; 0x851f
    829c:	mov	lr, #25
    82a0:	ldrb	r2, [r7, r1]!
    82a4:	movw	r1, #60920	; 0xedf8
    82a8:	movt	ip, #20971	; 0x51eb
    82ac:	movt	r1, #65535	; 0xffff
    82b0:	str	r0, [r7, r1]
    82b4:	movw	r1, #61260	; 0xef4c
    82b8:	movt	r1, #65535	; 0xffff
    82bc:	ldr	r3, [r7, r1]
    82c0:	ldr	r1, [r7, #1000]	; 0x3e8
    82c4:	ldr	r7, [r7, #1004]	; 0x3ec
    82c8:	add	r1, r7, r1
    82cc:	and	r5, r1, #63	; 0x3f
    82d0:	mov	r1, #0
    82d4:	ldr	r7, [r9, #8]
    82d8:	ldrb	r6, [r3, r5]
    82dc:	cmp	r7, #0
    82e0:	beq	82f8 <btbb_init_hop_reversal@@Base+0x98>
    82e4:	add	r6, r6, #24
    82e8:	umull	r7, r4, r6, ip
    82ec:	lsr	r4, r4, #3
    82f0:	mls	r4, r4, lr, r6
    82f4:	add	r6, r4, #26
    82f8:	uxtb	r4, r6
    82fc:	cmp	r4, r2
    8300:	streq	r5, [r0, r1, lsl #2]
    8304:	add	r5, r5, #64	; 0x40
    8308:	addeq	r1, r1, #1
    830c:	cmp	r5, #134217728	; 0x8000000
    8310:	bcc	82d4 <btbb_init_hop_reversal@@Base+0x74>
    8314:	mov	r0, #0
    8318:	movw	r3, #56799	; 0xdddf
    831c:	cmp	r8, #0
    8320:	str	r0, [r9, #388]	; 0x184
    8324:	str	r1, [r9, #376]	; 0x178
    8328:	movt	r3, #65535	; 0xffff
    832c:	mov	r0, #8704	; 0x2200
    8330:	movweq	r0, #512	; 0x200
    8334:	ldr	r2, [r9, #4]
    8338:	and	r2, r2, r3
    833c:	orr	r0, r2, r0
    8340:	str	r0, [r9, #4]
    8344:	ldr	r0, [pc, #12]	; 8358 <btbb_init_hop_reversal@@Base+0xf8>
    8348:	add	r0, pc, r0
    834c:	bl	4590 <printf@plt>
    8350:	ldr	r0, [r9, #376]	; 0x178
    8354:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    8358:	andeq	r5, r0, r8, ror #26

0000835c <try_hop@@Base>:
    835c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    8360:	add	fp, sp, #24
    8364:	ldrb	r8, [r1, #28]
    8368:	mov	r4, r1
    836c:	mov	r5, r0
    8370:	bl	46bc <btbb_decode@plt>
    8374:	ldr	r6, [r4, #4]
    8378:	movw	r0, #5648	; 0x1610
    837c:	add	r7, r4, r0
    8380:	tst	r6, #512	; 0x200
    8384:	bne	83c8 <try_hop@@Base+0x6c>
    8388:	mov	r0, r5
    838c:	mov	r1, r4
    8390:	bl	4608 <btbb_uap_from_header@plt>
    8394:	tst	r6, #16
    8398:	bne	8414 <try_hop@@Base+0xb8>
    839c:	cmp	r0, #0
    83a0:	beq	843c <try_hop@@Base+0xe0>
    83a4:	ldrb	r0, [r4, #28]
    83a8:	cmp	r8, r0
    83ac:	bne	8454 <try_hop@@Base+0xf8>
    83b0:	mov	r0, #0
    83b4:	mov	r1, r4
    83b8:	bl	48d8 <btbb_init_hop_reversal@plt>
    83bc:	mov	r0, r4
    83c0:	bl	46c8 <btbb_winnow@plt>
    83c4:	b	843c <try_hop@@Base+0xe0>
    83c8:	ldr	r0, [r4, #380]	; 0x17c
    83cc:	ldr	r1, [r7, #4]
    83d0:	ldr	r2, [r5, #2816]	; 0xb00
    83d4:	add	r0, r4, r0, lsl #2
    83d8:	sub	r1, r2, r1
    83dc:	movw	r2, #4648	; 0x1228
    83e0:	str	r1, [r0, #648]	; 0x288
    83e4:	ldr	r0, [r4, #380]	; 0x17c
    83e8:	ldrb	r1, [r5, #8]
    83ec:	add	r0, r4, r0
    83f0:	strb	r1, [r0, r2]
    83f4:	ldr	r0, [r4, #380]	; 0x17c
    83f8:	ldr	r1, [r4, #384]	; 0x180
    83fc:	add	r0, r0, #1
    8400:	add	r1, r1, #1
    8404:	str	r0, [r4, #380]	; 0x17c
    8408:	mov	r0, r4
    840c:	str	r1, [r4, #384]	; 0x180
    8410:	bl	46c8 <btbb_winnow@plt>
    8414:	ldrb	r0, [r4, #4]
    8418:	tst	r0, #32
    841c:	beq	843c <try_hop@@Base+0xe0>
    8420:	ldr	r0, [pc, #60]	; 8464 <try_hop@@Base+0x108>
    8424:	add	r0, pc, r0
    8428:	bl	46e0 <puts@plt>
    842c:	ldr	r1, [r7]
    8430:	ldr	r0, [pc, #48]	; 8468 <try_hop@@Base+0x10c>
    8434:	add	r0, pc, r0
    8438:	bl	4590 <printf@plt>
    843c:	ldr	r0, [r4, #4]
    8440:	tst	r0, #4
    8444:	orreq	r0, r0, #4
    8448:	strbeq	r8, [r4, #28]
    844c:	streq	r0, [r4, #4]
    8450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8454:	ldr	r0, [pc, #16]	; 846c <try_hop@@Base+0x110>
    8458:	add	r0, pc, r0
    845c:	bl	46e0 <puts@plt>
    8460:	b	843c <try_hop@@Base+0xe0>
    8464:	strdeq	r5, [r0], -ip
    8468:	muleq	r0, fp, ip
    846c:			; <UNDEFINED> instruction: 0x00005db2

00008470 <btbb_winnow@@Base>:
    8470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8474:	add	fp, sp, #28
    8478:	sub	sp, sp, #4
    847c:	mov	sl, r0
    8480:	ldr	r0, [r0, #376]	; 0x178
    8484:	ldr	r2, [sl, #380]	; 0x17c
    8488:	ldr	r1, [sl, #388]	; 0x184
    848c:	cmp	r1, r2
    8490:	bge	85dc <btbb_winnow@@Base+0x16c>
    8494:	cmp	r0, #1
    8498:	blt	85c4 <btbb_winnow@@Base+0x154>
    849c:	movw	r2, #5648	; 0x1610
    84a0:	mov	r9, #25
    84a4:	add	r2, sl, r2
    84a8:	str	r2, [sp]
    84ac:	add	r2, sl, r1
    84b0:	add	r1, sl, r1, lsl #2
    84b4:	movw	r3, #4648	; 0x1228
    84b8:	ldr	r5, [sl, #372]	; 0x174
    84bc:	mov	r6, #0
    84c0:	mov	r7, #0
    84c4:	ldrb	lr, [r2, r3]
    84c8:	ldr	r3, [sl, #32]
    84cc:	ldr	ip, [r1, #648]	; 0x288
    84d0:	ldr	r1, [r3, r7, lsl #2]
    84d4:	ldr	r2, [sl, #8]
    84d8:	add	r4, r1, ip
    84dc:	cmp	r2, #0
    84e0:	bic	r4, r4, #-134217728	; 0xf8000000
    84e4:	ldrb	r4, [r5, r4]
    84e8:	beq	8508 <btbb_winnow@@Base+0x98>
    84ec:	add	r2, r4, #24
    84f0:	movw	r4, #34079	; 0x851f
    84f4:	movt	r4, #20971	; 0x51eb
    84f8:	umull	r4, r8, r2, r4
    84fc:	lsr	r4, r8, #3
    8500:	mls	r2, r4, r9, r2
    8504:	add	r4, r2, #26
    8508:	uxtb	r2, r4
    850c:	cmp	r2, lr
    8510:	bne	8520 <btbb_winnow@@Base+0xb0>
    8514:	str	r1, [r3, r6, lsl #2]
    8518:	add	r6, r6, #1
    851c:	ldr	r0, [sl, #376]	; 0x178
    8520:	add	r7, r7, #1
    8524:	cmp	r7, r0
    8528:	blt	84d0 <btbb_winnow@@Base+0x60>
    852c:	cmp	r6, #0
    8530:	str	r6, [sl, #376]	; 0x178
    8534:	beq	85cc <btbb_winnow@@Base+0x15c>
    8538:	cmp	r6, #1
    853c:	beq	85ec <btbb_winnow@@Base+0x17c>
    8540:	cmp	r6, #2
    8544:	blt	85e0 <btbb_winnow@@Base+0x170>
    8548:	ldr	r0, [sl, #380]	; 0x17c
    854c:	cmp	r0, #1
    8550:	blt	85a4 <btbb_winnow@@Base+0x134>
    8554:	ldr	r1, [sl, #388]	; 0x184
    8558:	movw	r3, #4648	; 0x1228
    855c:	sub	r1, r1, #1
    8560:	add	r2, sl, r1
    8564:	ldrb	r2, [r2, r3]
    8568:	cmp	lr, r2
    856c:	bne	85a4 <btbb_winnow@@Base+0x134>
    8570:	add	r1, sl, r1, lsl #2
    8574:	ldr	r1, [r1, #648]	; 0x288
    8578:	add	r1, r1, #1
    857c:	cmp	ip, r1
    8580:	ldreq	r1, [sl, #4]
    8584:	andseq	r2, r1, #4096	; 0x1000
    8588:	bne	85a4 <btbb_winnow@@Base+0x134>
    858c:	orr	r0, r1, #4096	; 0x1000
    8590:	str	r0, [sl, #4]
    8594:	ldr	r0, [pc, #144]	; 862c <btbb_winnow@@Base+0x1bc>
    8598:	add	r0, pc, r0
    859c:	bl	46e0 <puts@plt>
    85a0:	ldr	r0, [sl, #380]	; 0x17c
    85a4:	ldr	r1, [sl, #388]	; 0x184
    85a8:	add	r1, r1, #1
    85ac:	cmp	r1, r0
    85b0:	str	r1, [sl, #388]	; 0x184
    85b4:	bge	85e0 <btbb_winnow@@Base+0x170>
    85b8:	ldr	r0, [sl, #376]	; 0x178
    85bc:	cmp	r0, #0
    85c0:	bgt	84ac <btbb_winnow@@Base+0x3c>
    85c4:	mov	r0, #0
    85c8:	str	r0, [sl, #376]	; 0x178
    85cc:	mov	r0, sl
    85d0:	bl	88e0 <btbb_uap_from_header@@Base+0x2b0>
    85d4:	mov	r6, #0
    85d8:	b	85e0 <btbb_winnow@@Base+0x170>
    85dc:	mov	r6, r0
    85e0:	mov	r0, r6
    85e4:	sub	sp, fp, #28
    85e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85ec:	ldr	r2, [sp]
    85f0:	ldr	r1, [r3]
    85f4:	ldr	r0, [r2, #4]
    85f8:	sub	r0, r1, r0
    85fc:	lsl	r0, r0, #1
    8600:	str	r0, [r2]
    8604:	ldr	r1, [r3]
    8608:	ldr	r0, [pc, #24]	; 8628 <btbb_winnow@@Base+0x1b8>
    860c:	add	r0, pc, r0
    8610:	bl	4590 <printf@plt>
    8614:	ldr	r0, [sl, #4]
    8618:	mov	r6, #1
    861c:	orr	r0, r0, #32
    8620:	str	r0, [sl, #4]
    8624:	b	85e0 <btbb_winnow@@Base+0x170>
    8628:	andeq	r5, r0, fp, ror fp
    862c:	muleq	r0, r4, ip

00008630 <btbb_uap_from_header@@Base>:
    8630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8634:	add	fp, sp, #28
    8638:	sub	sp, sp, #12
    863c:	mov	r5, r0
    8640:	movw	r0, #5648	; 0x1610
    8644:	mov	r4, r1
    8648:	mov	r2, #1
    864c:	add	r0, r1, r0
    8650:	ldr	r9, [r5, #2816]	; 0xb00
    8654:	str	r0, [sp, #8]
    8658:	ldrb	r0, [r1, #5]
    865c:	tst	r0, #4
    8660:	ldreq	r0, [sp, #8]
    8664:	streq	r9, [r0, #4]
    8668:	ldrb	r0, [r5, #8]
    866c:	and	r1, r0, #7
    8670:	add	r0, r4, r0, lsr #3
    8674:	ldrb	r3, [r0, #12]!
    8678:	tst	r3, r2, lsl r1
    867c:	bne	8698 <btbb_uap_from_header@@Base+0x68>
    8680:	lsl	r1, r2, r1
    8684:	orr	r1, r3, r1
    8688:	strb	r1, [r0]
    868c:	ldrb	r0, [r4, #22]
    8690:	add	r0, r0, #1
    8694:	strb	r0, [r4, #22]
    8698:	ldr	r0, [r4, #380]	; 0x17c
    869c:	cmp	r0, #1000	; 0x3e8
    86a0:	bge	8814 <btbb_uap_from_header@@Base+0x1e4>
    86a4:	ldr	r1, [sp, #8]
    86a8:	add	r0, r4, r0, lsl #2
    86ac:	movw	r2, #4648	; 0x1228
    86b0:	mov	sl, #0
    86b4:	ldr	r1, [r1, #4]
    86b8:	sub	r1, r9, r1
    86bc:	str	r1, [r0, #648]	; 0x288
    86c0:	ldr	r0, [r4, #380]	; 0x17c
    86c4:	ldrb	r1, [r5, #8]
    86c8:	add	r0, r4, r0
    86cc:	strb	r1, [r0, r2]
    86d0:	ldr	r0, [r4, #380]	; 0x17c
    86d4:	ldr	r1, [r4, #384]	; 0x180
    86d8:	add	r0, r0, #1
    86dc:	add	r1, r1, #1
    86e0:	str	r0, [r4, #380]	; 0x17c
    86e4:	mov	r0, #0
    86e8:	str	r1, [r4, #384]	; 0x180
    86ec:	str	r0, [sp, #4]
    86f0:	mov	r0, #0
    86f4:	str	r0, [sp]
    86f8:	add	r8, r4, sl, lsl #2
    86fc:	ldr	r0, [r8, #392]	; 0x188
    8700:	cmn	r0, #1
    8704:	bgt	8714 <btbb_uap_from_header@@Base+0xe4>
    8708:	ldr	r2, [r4, #4]
    870c:	tst	r2, #1024	; 0x400
    8710:	bne	87b0 <btbb_uap_from_header@@Base+0x180>
    8714:	ldr	r1, [sp, #8]
    8718:	add	r0, r9, sl
    871c:	ldr	r1, [r1, #4]
    8720:	sub	r0, r0, r1
    8724:	mov	r1, r5
    8728:	and	r7, r0, #63	; 0x3f
    872c:	mov	r0, r7
    8730:	bl	48cc <try_clock@plt>
    8734:	ldr	r2, [r4, #4]
    8738:	mov	r6, r0
    873c:	tst	r2, #1024	; 0x400
    8740:	beq	8754 <btbb_uap_from_header@@Base+0x124>
    8744:	ldr	r1, [r8, #392]	; 0x188
    8748:	mvn	r0, #0
    874c:	cmp	r1, r6
    8750:	bne	8764 <btbb_uap_from_header@@Base+0x134>
    8754:	mov	r0, r7
    8758:	mov	r1, r5
    875c:	bl	46b0 <crc_check@plt>
    8760:	ldr	r2, [r4, #4]
    8764:	ands	r3, r2, #4
    8768:	beq	8778 <btbb_uap_from_header@@Base+0x148>
    876c:	ldrb	r1, [r4, #28]
    8770:	cmp	r6, r1
    8774:	bne	8790 <btbb_uap_from_header@@Base+0x160>
    8778:	sub	r1, r0, #1
    877c:	cmp	r1, #2
    8780:	bcc	879c <btbb_uap_from_header@@Base+0x16c>
    8784:	add	r0, r0, #1
    8788:	cmp	r0, #1
    878c:	bhi	8830 <btbb_uap_from_header@@Base+0x200>
    8790:	mvn	r0, #0
    8794:	str	r0, [r8, #392]	; 0x188
    8798:	b	87b0 <btbb_uap_from_header@@Base+0x180>
    879c:	ldr	r0, [sp, #4]
    87a0:	str	r6, [r8, #392]	; 0x188
    87a4:	str	sl, [sp]
    87a8:	add	r0, r0, #1
    87ac:	str	r0, [sp, #4]
    87b0:	add	sl, sl, #1
    87b4:	cmp	sl, #64	; 0x40
    87b8:	bne	86f8 <btbb_uap_from_header@@Base+0xc8>
    87bc:	orr	r0, r2, #1024	; 0x400
    87c0:	mov	r5, #0
    87c4:	str	r0, [r4, #4]
    87c8:	ldr	r0, [sp, #4]
    87cc:	cmp	r0, #0
    87d0:	beq	8860 <btbb_uap_from_header@@Base+0x230>
    87d4:	cmp	r0, #1
    87d8:	bne	88c0 <btbb_uap_from_header@@Base+0x290>
    87dc:	ldr	r3, [sp, #8]
    87e0:	ldr	r5, [sp]
    87e4:	tst	r2, #4
    87e8:	ldr	r0, [r3, #4]
    87ec:	sub	r0, r5, r0
    87f0:	and	r1, r0, #63	; 0x3f
    87f4:	str	r1, [r3]
    87f8:	bne	888c <btbb_uap_from_header@@Base+0x25c>
    87fc:	add	r0, r4, r5, lsl #2
    8800:	ldr	r2, [r4, #384]	; 0x180
    8804:	ldr	r1, [r0, #392]	; 0x188
    8808:	ldr	r0, [pc, #196]	; 88d4 <btbb_uap_from_header@@Base+0x2a4>
    880c:	add	r0, pc, r0
    8810:	b	8898 <btbb_uap_from_header@@Base+0x268>
    8814:	ldr	r0, [pc, #192]	; 88dc <btbb_uap_from_header@@Base+0x2ac>
    8818:	add	r0, pc, r0
    881c:	bl	46e0 <puts@plt>
    8820:	mov	r0, r4
    8824:	bl	88e0 <btbb_uap_from_header@@Base+0x2b0>
    8828:	mov	r5, #0
    882c:	b	88c0 <btbb_uap_from_header@@Base+0x290>
    8830:	ldr	r2, [sp, #8]
    8834:	cmp	r3, #0
    8838:	ldr	r0, [r2, #4]
    883c:	sub	r0, sl, r0
    8840:	and	r1, r0, #63	; 0x3f
    8844:	str	r1, [r2]
    8848:	bne	886c <btbb_uap_from_header@@Base+0x23c>
    884c:	ldr	r2, [r4, #384]	; 0x180
    8850:	ldr	r0, [pc, #116]	; 88cc <btbb_uap_from_header@@Base+0x29c>
    8854:	mov	r1, r6
    8858:	add	r0, pc, r0
    885c:	b	8878 <btbb_uap_from_header@@Base+0x248>
    8860:	mov	r0, r4
    8864:	bl	88e0 <btbb_uap_from_header@@Base+0x2b0>
    8868:	b	88c0 <btbb_uap_from_header@@Base+0x290>
    886c:	ldr	r2, [r4, #384]	; 0x180
    8870:	ldr	r0, [pc, #88]	; 88d0 <btbb_uap_from_header@@Base+0x2a0>
    8874:	add	r0, pc, r0
    8878:	bl	4590 <printf@plt>
    887c:	mov	r0, #0
    8880:	strb	r6, [r4, #28]
    8884:	str	r0, [r4, #384]	; 0x180
    8888:	b	88b0 <btbb_uap_from_header@@Base+0x280>
    888c:	ldr	r2, [r4, #384]	; 0x180
    8890:	ldr	r0, [pc, #64]	; 88d8 <btbb_uap_from_header@@Base+0x2a8>
    8894:	add	r0, pc, r0
    8898:	bl	4590 <printf@plt>
    889c:	add	r0, r4, r5, lsl #2
    88a0:	mov	r1, #0
    88a4:	ldr	r0, [r0, #392]	; 0x188
    88a8:	str	r1, [r4, #384]	; 0x180
    88ac:	strb	r0, [r4, #28]
    88b0:	ldr	r0, [r4, #4]
    88b4:	mov	r5, #1
    88b8:	orr	r0, r0, #20
    88bc:	str	r0, [r4, #4]
    88c0:	mov	r0, r5
    88c4:	sub	sp, fp, #28
    88c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88cc:	andeq	r5, r0, fp, lsl #17
    88d0:	andeq	r5, r0, r6, lsr #17
    88d4:	andeq	r5, r0, r4, ror #17
    88d8:	muleq	r0, r3, r8
    88dc:	andeq	r5, r0, r6, lsr sl
    88e0:	push	{r4, sl, fp, lr}
    88e4:	add	fp, sp, #8
    88e8:	mov	r4, r0
    88ec:	ldr	r0, [r0, #4]
    88f0:	tst	r0, #512	; 0x200
    88f4:	beq	890c <btbb_uap_from_header@@Base+0x2dc>
    88f8:	ldr	r0, [r4, #32]
    88fc:	bl	45d8 <free@plt>
    8900:	mov	r0, #0
    8904:	str	r0, [r4, #372]	; 0x174
    8908:	ldr	r0, [r4, #4]
    890c:	mov	r1, #0
    8910:	str	r1, [r4, #380]	; 0x17c
    8914:	movw	r1, #61899	; 0xf1cb
    8918:	movt	r1, #65535	; 0xffff
    891c:	and	r1, r0, r1
    8920:	lsr	r0, r0, #12
    8924:	bfi	r1, r0, #11, #1
    8928:	str	r1, [r4, #4]
    892c:	pop	{r4, sl, fp, pc}

00008930 <btbb_print_afh_map@@Base>:
    8930:	push	{r4, r5, r6, r7, fp, lr}
    8934:	add	fp, sp, #16
    8938:	sub	sp, sp, #32
    893c:	ldrb	ip, [r0, #15]
    8940:	ldrb	r1, [r0, #12]
    8944:	ldrb	r2, [r0, #13]
    8948:	ldrb	r3, [r0, #14]
    894c:	ldrb	lr, [r0, #16]
    8950:	ldrb	r4, [r0, #17]
    8954:	ldrb	r5, [r0, #18]
    8958:	ldrb	r6, [r0, #19]
    895c:	ldrb	r7, [r0, #20]
    8960:	ldrb	r0, [r0, #21]
    8964:	stm	sp, {ip, lr}
    8968:	add	ip, sp, #8
    896c:	stm	ip, {r4, r5, r6, r7}
    8970:	str	r0, [sp, #24]
    8974:	ldr	r0, [pc, #12]	; 8988 <btbb_print_afh_map@@Base+0x58>
    8978:	add	r0, pc, r0
    897c:	bl	4590 <printf@plt>
    8980:	sub	sp, fp, #16
    8984:	pop	{r4, r5, r6, r7, fp, pc}
    8988:	ldrdeq	r5, [r0], -sl

0000898c <get_piconet@@Base>:
    898c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8990:	add	fp, sp, #28
    8994:	sub	sp, sp, #20
    8998:	str	r0, [sp, #16]
    899c:	movw	r8, #63341	; 0xf76d
    89a0:	movw	sl, #48883	; 0xbef3
    89a4:	mov	r6, r0
    89a8:	ldr	r9, [pc, #1176]	; 8e48 <get_piconet@@Base+0x4bc>
    89ac:	movt	r8, #7
    89b0:	movt	sl, #65261	; 0xfeed
    89b4:	ldr	r9, [pc, r9]
    89b8:	cmp	r9, #0
    89bc:	beq	8ab4 <get_piconet@@Base+0x128>
    89c0:	movw	r1, #16653	; 0x410d
    89c4:	and	r0, r6, #-16777216	; 0xff000000
    89c8:	ldr	r5, [r9, #8]
    89cc:	movt	r1, #274	; 0x112
    89d0:	add	r0, r0, r1
    89d4:	and	r1, r6, #16711680	; 0xff0000
    89d8:	add	r0, r0, r1
    89dc:	and	r1, r6, #65280	; 0xff00
    89e0:	add	r0, r0, r1
    89e4:	movw	r1, #47814	; 0xbac6
    89e8:	uxtab	r0, r0, r6
    89ec:	movt	r1, #40777	; 0x9f49
    89f0:	eor	r0, r0, r8
    89f4:	sub	r1, r1, r0
    89f8:	sub	r2, sl, r0
    89fc:	eor	r1, r1, r0, lsl #8
    8a00:	sub	r2, r2, r1
    8a04:	sub	r0, r0, r1
    8a08:	eor	r2, r2, r1, lsr #13
    8a0c:	sub	r0, r0, r2
    8a10:	sub	r1, r1, r2
    8a14:	eor	r0, r0, r2, lsr #12
    8a18:	sub	r1, r1, r0
    8a1c:	sub	r2, r2, r0
    8a20:	eor	r1, r1, r0, lsl #16
    8a24:	sub	r2, r2, r1
    8a28:	sub	r0, r0, r1
    8a2c:	eor	r2, r2, r1, lsr #5
    8a30:	sub	r0, r0, r2
    8a34:	sub	r1, r1, r2
    8a38:	eor	r0, r0, r2, lsr #3
    8a3c:	sub	r1, r1, r0
    8a40:	eor	r1, r1, r0, lsl #10
    8a44:	sub	r0, r2, r0
    8a48:	sub	r0, r0, r1
    8a4c:	eor	r0, r0, r1, lsr #15
    8a50:	ldm	r5, {r1, r2}
    8a54:	sub	r2, r2, #1
    8a58:	and	r0, r0, r2
    8a5c:	add	r0, r0, r0, lsl #1
    8a60:	ldr	r0, [r1, r0, lsl #2]
    8a64:	cmp	r0, #0
    8a68:	beq	8ab4 <get_piconet@@Base+0x128>
    8a6c:	ldr	r1, [r5, #20]
    8a70:	add	r4, sp, #16
    8a74:	sub	r7, r0, r1
    8a78:	ldr	r0, [r7, #32]
    8a7c:	cmp	r0, #4
    8a80:	bne	8a9c <get_piconet@@Base+0x110>
    8a84:	ldr	r0, [r7, #28]
    8a88:	mov	r1, r4
    8a8c:	mov	r2, #4
    8a90:	bl	4758 <bcmp@plt>
    8a94:	cmp	r0, #0
    8a98:	beq	8e20 <get_piconet@@Base+0x494>
    8a9c:	ldr	r0, [r7, #24]
    8aa0:	cmp	r0, #0
    8aa4:	beq	8ab4 <get_piconet@@Base+0x128>
    8aa8:	ldr	r1, [r5, #20]
    8aac:	sub	r7, r0, r1
    8ab0:	b	8a78 <get_piconet@@Base+0xec>
    8ab4:	mov	r0, #1
    8ab8:	movw	r1, #5660	; 0x161c
    8abc:	mov	r7, r8
    8ac0:	mov	r5, #1
    8ac4:	bl	4554 <calloc@plt>
    8ac8:	mov	r4, r0
    8acc:	str	r6, [r0, #24]
    8ad0:	mov	r0, #8
    8ad4:	str	r5, [r4]
    8ad8:	str	r0, [r4, #4]
    8adc:	mov	r0, #40	; 0x28
    8ae0:	bl	46ec <malloc@plt>
    8ae4:	mov	r5, r0
    8ae8:	mov	r0, #0
    8aec:	mov	r1, #4
    8af0:	cmp	r9, #0
    8af4:	add	r8, r5, #8
    8af8:	str	r0, [r5, #16]
    8afc:	str	r6, [r5]
    8b00:	str	r4, [r5, #4]
    8b04:	str	r5, [r5, #28]
    8b08:	str	r1, [r5, #32]
    8b0c:	beq	8b30 <get_piconet@@Base+0x1a4>
    8b10:	ldr	r6, [r9, #8]
    8b14:	ldr	r0, [r6, #16]
    8b18:	str	r5, [r0, #8]
    8b1c:	ldr	r1, [r6, #20]
    8b20:	sub	r0, r0, r1
    8b24:	str	r0, [r5, #12]
    8b28:	str	r8, [r6, #16]
    8b2c:	b	8bb8 <get_piconet@@Base+0x22c>
    8b30:	ldr	r1, [pc, #788]	; 8e4c <get_piconet@@Base+0x4c0>
    8b34:	str	r0, [r5, #12]
    8b38:	mov	r0, #44	; 0x2c
    8b3c:	add	r1, pc, r1
    8b40:	str	r5, [r1]
    8b44:	bl	46ec <malloc@plt>
    8b48:	cmp	r0, #0
    8b4c:	str	r0, [r5, #8]
    8b50:	beq	8e40 <get_piconet@@Base+0x4b4>
    8b54:	vmov.i32	q8, #0	; 0x00000000
    8b58:	mov	r6, r0
    8b5c:	add	r0, r0, #12
    8b60:	mov	r1, #32
    8b64:	vst1.32	{d16-d17}, [r0]
    8b68:	mov	r0, #5
    8b6c:	str	r1, [r6, #4]
    8b70:	str	r0, [r6, #8]
    8b74:	add	r0, r6, #28
    8b78:	vst1.32	{d16-d17}, [r0]
    8b7c:	mov	r0, #8
    8b80:	str	r8, [r6, #16]
    8b84:	str	r0, [r6, #20]
    8b88:	mov	r0, #384	; 0x180
    8b8c:	bl	46ec <malloc@plt>
    8b90:	cmp	r0, #0
    8b94:	str	r0, [r6]
    8b98:	beq	8e40 <get_piconet@@Base+0x4b4>
    8b9c:	mov	r1, #0
    8ba0:	mov	r2, #384	; 0x180
    8ba4:	bl	47e8 <memset@plt>
    8ba8:	movw	r0, #8161	; 0x1fe1
    8bac:	mov	r9, r5
    8bb0:	movt	r0, #40977	; 0xa011
    8bb4:	str	r0, [r6, #40]	; 0x28
    8bb8:	ldr	r0, [r6, #12]
    8bbc:	add	r0, r0, #1
    8bc0:	str	r0, [r6, #12]
    8bc4:	movw	r6, #16653	; 0x410d
    8bc8:	ldr	ip, [r9, #8]
    8bcc:	movt	r6, #274	; 0x112
    8bd0:	str	ip, [r5, #8]
    8bd4:	ldrb	r3, [r5, #3]
    8bd8:	ldrb	r2, [r5, #2]
    8bdc:	ldrb	r1, [r5, #1]
    8be0:	ldrb	r0, [r5]
    8be4:	add	r3, r6, r3, lsl #24
    8be8:	mov	r6, #0
    8bec:	add	r2, r3, r2, lsl #16
    8bf0:	add	r1, r2, r1, lsl #8
    8bf4:	add	r0, r1, r0
    8bf8:	movw	r1, #47814	; 0xbac6
    8bfc:	movt	r1, #40777	; 0x9f49
    8c00:	eor	r0, r0, r7
    8c04:	sub	r2, sl, r0
    8c08:	sub	r1, r1, r0
    8c0c:	eor	r1, r1, r0, lsl #8
    8c10:	sub	r2, r2, r1
    8c14:	sub	r0, r0, r1
    8c18:	eor	r2, r2, r1, lsr #13
    8c1c:	sub	r0, r0, r2
    8c20:	sub	r1, r1, r2
    8c24:	eor	r0, r0, r2, lsr #12
    8c28:	sub	r1, r1, r0
    8c2c:	sub	r2, r2, r0
    8c30:	eor	r1, r1, r0, lsl #16
    8c34:	sub	r2, r2, r1
    8c38:	sub	r0, r0, r1
    8c3c:	eor	r2, r2, r1, lsr #5
    8c40:	sub	r0, r0, r2
    8c44:	sub	r1, r1, r2
    8c48:	eor	r0, r0, r2, lsr #3
    8c4c:	sub	r1, r1, r0
    8c50:	eor	r1, r1, r0, lsl #10
    8c54:	sub	r0, r2, r0
    8c58:	sub	r0, r0, r1
    8c5c:	eor	r1, r0, r1, lsr #15
    8c60:	str	r1, [r5, #36]	; 0x24
    8c64:	ldr	r2, [r9, #8]
    8c68:	ldm	r2, {r0, r2}
    8c6c:	sub	r2, r2, #1
    8c70:	and	r1, r1, r2
    8c74:	add	r2, r1, r1, lsl #1
    8c78:	mov	r3, r0
    8c7c:	add	r0, r0, r2, lsl #2
    8c80:	ldr	r7, [r3, r2, lsl #2]!
    8c84:	mov	r2, #10
    8c88:	ldr	r1, [r3, #4]
    8c8c:	cmp	r7, #0
    8c90:	add	r1, r1, #1
    8c94:	str	r1, [r3, #4]
    8c98:	str	r6, [r5, #20]
    8c9c:	str	r7, [r5, #24]
    8ca0:	strne	r8, [r7, #12]
    8ca4:	str	r8, [r3]
    8ca8:	ldr	r0, [r0, #8]
    8cac:	add	r0, r0, r0, lsl #2
    8cb0:	add	r0, r2, r0, lsl #1
    8cb4:	cmp	r1, r0
    8cb8:	bcc	8e34 <get_piconet@@Base+0x4a8>
    8cbc:	ldr	r0, [ip, #36]	; 0x24
    8cc0:	cmp	r0, #1
    8cc4:	beq	8e34 <get_piconet@@Base+0x4a8>
    8cc8:	ldr	r0, [ip, #4]
    8ccc:	str	r4, [sp, #8]
    8cd0:	str	r8, [sp, #4]
    8cd4:	mov	r4, ip
    8cd8:	add	r0, r0, r0, lsl #1
    8cdc:	lsl	r0, r0, #3
    8ce0:	bl	46ec <malloc@plt>
    8ce4:	cmp	r0, #0
    8ce8:	beq	8e40 <get_piconet@@Base+0x4b4>
    8cec:	mov	sl, r0
    8cf0:	ldr	r0, [r4, #4]
    8cf4:	mov	r1, #0
    8cf8:	mov	r9, #0
    8cfc:	add	r0, r0, r0, lsl #1
    8d00:	lsl	r2, r0, #3
    8d04:	mov	r0, sl
    8d08:	bl	47e8 <memset@plt>
    8d0c:	str	r9, [r4, #28]
    8d10:	mvn	r2, #0
    8d14:	mov	r6, #1
    8d18:	ldr	r0, [r4]
    8d1c:	str	r0, [sp, #12]
    8d20:	ldmib	r4, {r0, r1, r7}
    8d24:	add	r1, r1, #1
    8d28:	lsr	r3, r7, r1
    8d2c:	add	r2, r2, r0, lsl #1
    8d30:	tst	r2, r7
    8d34:	addne	r3, r6, r7, lsr r1
    8d38:	cmp	r0, #0
    8d3c:	str	r3, [r4, #24]
    8d40:	beq	8dcc <get_piconet@@Base+0x440>
    8d44:	mov	ip, r4
    8d48:	mov	r4, #0
    8d4c:	mov	lr, #0
    8d50:	ldr	r5, [sp, #12]
    8d54:	add	r1, lr, lr, lsl #1
    8d58:	ldr	r6, [r5, r1, lsl #2]
    8d5c:	cmp	r6, #0
    8d60:	beq	8dc0 <get_piconet@@Base+0x434>
    8d64:	ldr	r1, [r6, #28]
    8d68:	ldr	r7, [r6, #16]
    8d6c:	and	r1, r1, r2
    8d70:	add	r1, r1, r1, lsl #1
    8d74:	add	r1, sl, r1, lsl #2
    8d78:	ldr	r5, [r1, #4]
    8d7c:	add	r8, r5, #1
    8d80:	cmp	r8, r3
    8d84:	str	r8, [r1, #4]
    8d88:	bls	8d9c <get_piconet@@Base+0x410>
    8d8c:	udiv	r5, r8, r3
    8d90:	add	r4, r4, #1
    8d94:	str	r4, [ip, #28]
    8d98:	str	r5, [r1, #8]
    8d9c:	str	r9, [r6, #12]
    8da0:	ldr	r5, [r1]
    8da4:	cmp	r5, #0
    8da8:	str	r5, [r6, #16]
    8dac:	strne	r6, [r5, #12]
    8db0:	str	r6, [r1]
    8db4:	cmp	r7, #0
    8db8:	mov	r6, r7
    8dbc:	bne	8d64 <get_piconet@@Base+0x3d8>
    8dc0:	add	lr, lr, #1
    8dc4:	cmp	lr, r0
    8dc8:	bne	8d50 <get_piconet@@Base+0x3c4>
    8dcc:	ldr	r0, [sp, #12]
    8dd0:	bl	45d8 <free@plt>
    8dd4:	ldr	r0, [sp, #4]
    8dd8:	ldr	r0, [r0]
    8ddc:	str	sl, [r0]
    8de0:	ldr	r7, [r0, #28]
    8de4:	ldmib	r0, {r1, r2, r3}
    8de8:	lsl	r1, r1, #1
    8dec:	cmp	r7, r3, lsr #1
    8df0:	str	r1, [r0, #4]
    8df4:	add	r1, r2, #1
    8df8:	str	r1, [r0, #8]
    8dfc:	bls	8e28 <get_piconet@@Base+0x49c>
    8e00:	ldr	r1, [r0, #32]
    8e04:	ldr	r4, [sp, #8]
    8e08:	add	r1, r1, #1
    8e0c:	cmp	r1, #2
    8e10:	str	r1, [r0, #32]
    8e14:	movcs	r1, #1
    8e18:	strcs	r1, [r0, #36]	; 0x24
    8e1c:	b	8e34 <get_piconet@@Base+0x4a8>
    8e20:	ldr	r4, [r7, #4]
    8e24:	b	8e34 <get_piconet@@Base+0x4a8>
    8e28:	ldr	r4, [sp, #8]
    8e2c:	mov	r1, #0
    8e30:	str	r1, [r0, #32]
    8e34:	mov	r0, r4
    8e38:	sub	sp, fp, #28
    8e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e40:	mvn	r0, #0
    8e44:	bl	4740 <exit@plt>
    8e48:	andeq	ip, r1, r4, asr #15
    8e4c:	andeq	ip, r1, ip, lsr r6

00008e50 <btbb_next_survey_result@@Base>:
    8e50:	push	{r4, sl, fp, lr}
    8e54:	add	fp, sp, #8
    8e58:	ldr	r0, [pc, #48]	; 8e90 <btbb_next_survey_result@@Base+0x40>
    8e5c:	ldr	r0, [pc, r0]
    8e60:	cmp	r0, #0
    8e64:	beq	8e84 <btbb_next_survey_result@@Base+0x34>
    8e68:	ldr	r4, [r0, #4]
    8e6c:	ldr	r1, [r0, #16]
    8e70:	ldr	r2, [pc, #28]	; 8e94 <btbb_next_survey_result@@Base+0x44>
    8e74:	add	r2, pc, r2
    8e78:	str	r1, [r2]
    8e7c:	bl	45d8 <free@plt>
    8e80:	b	8e88 <btbb_next_survey_result@@Base+0x38>
    8e84:	mov	r4, #0
    8e88:	mov	r0, r4
    8e8c:	pop	{r4, sl, fp, pc}
    8e90:	andeq	ip, r1, ip, lsl r3
    8e94:	andeq	ip, r1, r4, lsl #6

00008e98 <btbb_process_packet@@Base>:
    8e98:	push	{r4, r5, r6, sl, fp, lr}
    8e9c:	add	fp, sp, #16
    8ea0:	mov	r5, r0
    8ea4:	ldr	r0, [pc, #376]	; 9024 <btbb_process_packet@@Base+0x18c>
    8ea8:	add	r0, pc, r0
    8eac:	ldrb	r0, [r0]
    8eb0:	cmp	r0, #1
    8eb4:	bne	8f2c <btbb_process_packet@@Base+0x94>
    8eb8:	mov	r0, r5
    8ebc:	bl	4818 <btbb_packet_get_lap@plt>
    8ec0:	bl	483c <get_piconet@plt>
    8ec4:	mov	r6, r0
    8ec8:	ldrb	r0, [r5, #8]
    8ecc:	mov	r2, #1
    8ed0:	and	r1, r0, #7
    8ed4:	add	r0, r6, r0, lsr #3
    8ed8:	ldrb	r3, [r0, #12]!
    8edc:	tst	r3, r2, lsl r1
    8ee0:	bne	8efc <btbb_process_packet@@Base+0x64>
    8ee4:	lsl	r1, r2, r1
    8ee8:	orr	r1, r3, r1
    8eec:	strb	r1, [r0]
    8ef0:	ldrb	r0, [r6, #22]
    8ef4:	add	r0, r0, #1
    8ef8:	strb	r0, [r6, #22]
    8efc:	mov	r0, r5
    8f00:	bl	4644 <btbb_header_present@plt>
    8f04:	mov	r4, #0
    8f08:	cmp	r0, #0
    8f0c:	beq	901c <btbb_process_packet@@Base+0x184>
    8f10:	ldrb	r0, [r6, #4]
    8f14:	tst	r0, #4
    8f18:	bne	901c <btbb_process_packet@@Base+0x184>
    8f1c:	mov	r0, r5
    8f20:	mov	r1, r6
    8f24:	bl	4608 <btbb_uap_from_header@plt>
    8f28:	b	901c <btbb_process_packet@@Base+0x184>
    8f2c:	mov	r6, r1
    8f30:	mov	r4, #0
    8f34:	cmp	r1, #0
    8f38:	beq	901c <btbb_process_packet@@Base+0x184>
    8f3c:	ldrb	r0, [r5, #8]
    8f40:	mov	r2, #1
    8f44:	and	r1, r0, #7
    8f48:	add	r0, r6, r0, lsr #3
    8f4c:	ldrb	r3, [r0, #12]!
    8f50:	tst	r3, r2, lsl r1
    8f54:	bne	8f70 <btbb_process_packet@@Base+0xd8>
    8f58:	lsl	r1, r2, r1
    8f5c:	orr	r1, r3, r1
    8f60:	strb	r1, [r0]
    8f64:	ldrb	r0, [r6, #22]
    8f68:	add	r0, r0, #1
    8f6c:	strb	r0, [r6, #22]
    8f70:	ldrb	r0, [r6, #4]
    8f74:	tst	r0, #8
    8f78:	beq	901c <btbb_process_packet@@Base+0x184>
    8f7c:	mov	r0, r5
    8f80:	bl	4644 <btbb_header_present@plt>
    8f84:	cmp	r0, #0
    8f88:	beq	901c <btbb_process_packet@@Base+0x184>
    8f8c:	ldrb	r0, [r6, #5]
    8f90:	ldrb	r1, [r6, #28]
    8f94:	tst	r0, #64	; 0x40
    8f98:	bne	8fcc <btbb_process_packet@@Base+0x134>
    8f9c:	cmp	r1, #0
    8fa0:	beq	8f1c <btbb_process_packet@@Base+0x84>
    8fa4:	mov	r0, r5
    8fa8:	mov	r1, r6
    8fac:	bl	46f8 <try_hop@plt>
    8fb0:	ldr	r0, [r6, #4]
    8fb4:	and	r1, r0, #48	; 0x30
    8fb8:	cmp	r1, #48	; 0x30
    8fbc:	orreq	r0, r0, #16384	; 0x4000
    8fc0:	mvneq	r4, #0
    8fc4:	streq	r0, [r6, #4]
    8fc8:	b	901c <btbb_process_packet@@Base+0x184>
    8fcc:	mov	r0, r5
    8fd0:	bl	468c <btbb_packet_set_uap@plt>
    8fd4:	mov	r0, r5
    8fd8:	mov	r1, #4
    8fdc:	mov	r2, #1
    8fe0:	bl	45c0 <btbb_packet_set_flag@plt>
    8fe4:	mov	r0, r5
    8fe8:	mov	r1, #5
    8fec:	mov	r2, #1
    8ff0:	bl	45c0 <btbb_packet_set_flag@plt>
    8ff4:	mov	r0, r5
    8ff8:	bl	46bc <btbb_decode@plt>
    8ffc:	cmp	r0, #0
    9000:	beq	9010 <btbb_process_packet@@Base+0x178>
    9004:	mov	r0, r5
    9008:	bl	48c0 <btbb_print_packet@plt>
    900c:	b	901c <btbb_process_packet@@Base+0x184>
    9010:	ldr	r0, [pc, #16]	; 9028 <btbb_process_packet@@Base+0x190>
    9014:	add	r0, pc, r0
    9018:	bl	46e0 <puts@plt>
    901c:	mov	r0, r4
    9020:	pop	{r4, r5, r6, sl, fp, pc}
    9024:	andeq	ip, r1, r8, asr #5
    9028:	andeq	r5, r0, r0, ror #4

0000902c <lell_packet_new@@Base>:
    902c:	push	{r4, sl, fp, lr}
    9030:	add	fp, sp, #8
    9034:	mov	r0, #1
    9038:	mov	r1, #104	; 0x68
    903c:	mov	r4, #1
    9040:	bl	4554 <calloc@plt>
    9044:	str	r4, [r0, #96]	; 0x60
    9048:	pop	{r4, sl, fp, pc}

0000904c <lell_packet_ref@@Base>:
    904c:	ldr	r1, [r0, #96]	; 0x60
    9050:	add	r1, r1, #1
    9054:	str	r1, [r0, #96]	; 0x60
    9058:	bx	lr

0000905c <lell_packet_unref@@Base>:
    905c:	ldr	r1, [r0, #96]	; 0x60
    9060:	subs	r1, r1, #1
    9064:	str	r1, [r0, #96]	; 0x60
    9068:	bxne	lr
    906c:	b	45d8 <free@plt>

00009070 <lell_allocate_and_decode@@Base>:
    9070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9074:	add	fp, sp, #28
    9078:	sub	sp, sp, #4
    907c:	mov	r5, r1
    9080:	mov	r6, r0
    9084:	mov	r0, #1
    9088:	mov	r1, #104	; 0x68
    908c:	mov	r7, r3
    9090:	mov	r4, r2
    9094:	mov	r9, #1
    9098:	bl	4554 <calloc@plt>
    909c:	mov	r1, r6
    90a0:	mov	r2, #64	; 0x40
    90a4:	str	r9, [r0, #96]	; 0x60
    90a8:	mov	r8, r0
    90ac:	str	r0, [r7]
    90b0:	bl	45fc <memcpy@plt>
    90b4:	movw	r0, #2402	; 0x962
    90b8:	mov	r1, #37	; 0x25
    90bc:	cmp	r5, r0
    90c0:	beq	9118 <lell_allocate_and_decode@@Base+0xa8>
    90c4:	movw	r1, #2425	; 0x979
    90c8:	cmp	r5, r1
    90cc:	bhi	90e4 <lell_allocate_and_decode@@Base+0x74>
    90d0:	movw	r1, #2404	; 0x964
    90d4:	sub	r1, r5, r1
    90d8:	add	r1, r1, r1, lsr #31
    90dc:	asr	r1, r1, #1
    90e0:	b	9118 <lell_allocate_and_decode@@Base+0xa8>
    90e4:	movw	r2, #2426	; 0x97a
    90e8:	mov	r1, #38	; 0x26
    90ec:	cmp	r5, r2
    90f0:	beq	9118 <lell_allocate_and_decode@@Base+0xa8>
    90f4:	lsr	r2, r5, #4
    90f8:	mov	r1, #39	; 0x27
    90fc:	cmp	r2, #154	; 0x9a
    9100:	bhi	9118 <lell_allocate_and_decode@@Base+0xa8>
    9104:	movw	r1, #2428	; 0x97c
    9108:	mov	r2, #11
    910c:	sub	r1, r5, r1
    9110:	add	r1, r1, r1, lsr #31
    9114:	add	r1, r2, r1, lsr #1
    9118:	sub	r0, r5, r0
    911c:	str	r4, [r8, #76]	; 0x4c
    9120:	strb	r1, [r8, #68]	; 0x44
    9124:	movw	ip, #48854	; 0xbed6
    9128:	uxtb	r1, r1
    912c:	add	r0, r0, r0, lsr #31
    9130:	movt	ip, #36489	; 0x8e89
    9134:	cmp	r1, #36	; 0x24
    9138:	lsr	r0, r0, #1
    913c:	strb	r0, [r8, #69]	; 0x45
    9140:	ldrb	r7, [r8]
    9144:	ldrb	r5, [r8, #1]
    9148:	ldrb	r2, [r8, #2]
    914c:	ldrb	r3, [r8, #3]
    9150:	orr	r0, r7, r5, lsl #8
    9154:	orr	r0, r0, r2, lsl #16
    9158:	orr	r0, r0, r3, lsl #24
    915c:	str	r0, [r8, #64]	; 0x40
    9160:	ldrb	r6, [r8, #5]
    9164:	bls	91d4 <lell_allocate_and_decode@@Base+0x164>
    9168:	and	r1, r6, #63	; 0x3f
    916c:	str	r1, [r8, #72]	; 0x48
    9170:	subs	r1, r0, ip
    9174:	clz	r1, r1
    9178:	lsr	r1, r1, #5
    917c:	strb	r1, [r8, #100]	; 0x64
    9180:	ldrb	r1, [r8, #4]
    9184:	lsr	r2, r1, #7
    9188:	str	r2, [r8, #88]	; 0x58
    918c:	ubfx	r2, r1, #6, #1
    9190:	and	r1, r1, #15
    9194:	str	r2, [r8, #84]	; 0x54
    9198:	strb	r1, [r8, #80]	; 0x50
    919c:	mov	r1, #0
    91a0:	beq	9548 <lell_allocate_and_decode@@Base+0x4d8>
    91a4:	eors	r0, r0, ip
    91a8:	beq	91cc <lell_allocate_and_decode@@Base+0x15c>
    91ac:	mov	r1, #0
    91b0:	mov	r2, r1
    91b4:	sub	r1, r0, #1
    91b8:	ands	r0, r1, r0
    91bc:	add	r1, r2, #1
    91c0:	bne	91b0 <lell_allocate_and_decode@@Base+0x140>
    91c4:	tst	r2, #255	; 0xff
    91c8:	beq	9544 <lell_allocate_and_decode@@Base+0x4d4>
    91cc:	mov	r1, #32
    91d0:	b	9548 <lell_allocate_and_decode@@Base+0x4d8>
    91d4:	and	r1, r6, #31
    91d8:	tst	r7, #1
    91dc:	str	r1, [r8, #72]	; 0x48
    91e0:	ldr	lr, [pc, #876]	; 9554 <lell_allocate_and_decode@@Base+0x4e4>
    91e4:	ldr	r4, [pc, #876]	; 9558 <lell_allocate_and_decode@@Base+0x4e8>
    91e8:	add	r4, pc, r4
    91ec:	add	lr, pc, lr
    91f0:	mov	r6, r4
    91f4:	moveq	r6, lr
    91f8:	tst	r7, #128	; 0x80
    91fc:	mov	r1, r4
    9200:	moveq	r1, lr
    9204:	ldrb	r6, [r6, r7]
    9208:	tst	r5, #128	; 0x80
    920c:	ldrb	r1, [r1, r5]
    9210:	eor	r5, r7, r5
    9214:	add	r1, r1, r6
    9218:	mov	r6, r4
    921c:	moveq	r6, lr
    9220:	tst	r2, #128	; 0x80
    9224:	ldrb	r6, [r6, r2]
    9228:	eor	r2, r7, r2
    922c:	eor	r7, r7, r3
    9230:	moveq	r4, lr
    9234:	orr	r2, r5, r2
    9238:	mov	r5, #0
    923c:	orr	r2, r2, r7
    9240:	clz	r2, r2
    9244:	lsr	lr, r2, #5
    9248:	ldr	r2, [pc, #780]	; 955c <lell_allocate_and_decode@@Base+0x4ec>
    924c:	add	r1, r1, r6
    9250:	ldrb	r6, [r4, r3]
    9254:	add	r2, pc, r2
    9258:	add	r1, r1, r6
    925c:	ldrb	r3, [r2, r3, lsr #2]
    9260:	subs	r6, r1, #24
    9264:	mov	r1, #0
    9268:	movls	r6, r1
    926c:	eors	r7, r0, ip
    9270:	beq	9298 <lell_allocate_and_decode@@Base+0x228>
    9274:	mov	r2, #0
    9278:	mov	r5, r2
    927c:	sub	r2, r7, #1
    9280:	ands	r7, r2, r7
    9284:	add	r2, r5, #1
    9288:	bne	9278 <lell_allocate_and_decode@@Base+0x208>
    928c:	uxtb	r2, r5
    9290:	clz	r2, r2
    9294:	lsr	r5, r2, #5
    9298:	cmp	r0, ip
    929c:	mov	r2, #1
    92a0:	movw	r7, #4095	; 0xfff
    92a4:	movw	ip, #3063	; 0xbf7
    92a8:	movweq	r2, #2
    92ac:	add	r2, r2, lr
    92b0:	movw	lr, #3325	; 0xcfd
    92b4:	sub	r2, r2, r3
    92b8:	add	r2, r2, r6
    92bc:	movw	r6, #2035	; 0x7f3
    92c0:	add	r3, r2, r5
    92c4:	and	sl, r7, r0, lsr r1
    92c8:	cmp	sl, r6
    92cc:	ble	9304 <lell_allocate_and_decode@@Base+0x294>
    92d0:	cmp	sl, ip
    92d4:	ble	932c <lell_allocate_and_decode@@Base+0x2bc>
    92d8:	cmp	sl, #3712	; 0xe80
    92dc:	bge	9388 <lell_allocate_and_decode@@Base+0x318>
    92e0:	cmp	sl, lr
    92e4:	bgt	943c <lell_allocate_and_decode@@Base+0x3cc>
    92e8:	movw	r4, #3064	; 0xbf8
    92ec:	sub	r5, sl, r4
    92f0:	cmp	r5, #16
    92f4:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    92f8:	cmp	sl, #3200	; 0xc80
    92fc:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    9300:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    9304:	cmp	sl, #640	; 0x280
    9308:	bge	9360 <lell_allocate_and_decode@@Base+0x2f0>
    930c:	cmp	sl, #253	; 0xfd
    9310:	bgt	9410 <lell_allocate_and_decode@@Base+0x3a0>
    9314:	cmp	sl, #32
    9318:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    931c:	sub	r5, sl, #127	; 0x7f
    9320:	cmp	r5, #2
    9324:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    9328:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    932c:	cmp	sl, #2432	; 0x980
    9330:	bge	93b4 <lell_allocate_and_decode@@Base+0x344>
    9334:	movw	r2, #2036	; 0x7f4
    9338:	sub	r5, sl, r2
    933c:	cmp	r5, #28
    9340:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    9344:	movw	r4, #2302	; 0x8fe
    9348:	sub	r5, sl, r4
    934c:	cmp	r5, #4
    9350:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    9354:	cmp	sl, #2176	; 0x880
    9358:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    935c:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    9360:	cmp	sl, #1152	; 0x480
    9364:	bge	93e0 <lell_allocate_and_decode@@Base+0x370>
    9368:	cmp	sl, #1016	; 0x3f8
    936c:	blt	948c <lell_allocate_and_decode@@Base+0x41c>
    9370:	sub	r5, sl, #1016	; 0x3f8
    9374:	cmp	r5, #15
    9378:	bhi	950c <lell_allocate_and_decode@@Base+0x49c>
    937c:	cmp	r5, #9
    9380:	bne	9508 <lell_allocate_and_decode@@Base+0x498>
    9384:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    9388:	cmp	sl, #4064	; 0xfe0
    938c:	blt	94b0 <lell_allocate_and_decode@@Base+0x440>
    9390:	sub	r5, sl, #4064	; 0xfe0
    9394:	cmp	r5, #31
    9398:	bhi	950c <lell_allocate_and_decode@@Base+0x49c>
    939c:	movw	r2, #1
    93a0:	mov	r4, #1
    93a4:	movt	r2, #65535	; 0xffff
    93a8:	tst	r2, r4, lsl r5
    93ac:	addne	r3, r3, #1
    93b0:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    93b4:	cmp	sl, #2688	; 0xa80
    93b8:	bge	9468 <lell_allocate_and_decode@@Base+0x3f8>
    93bc:	movw	r4, #2556	; 0x9fc
    93c0:	sub	r5, sl, r4
    93c4:	cmp	r5, #7
    93c8:	bhi	93d4 <lell_allocate_and_decode@@Base+0x364>
    93cc:	cmp	r5, #4
    93d0:	bne	9508 <lell_allocate_and_decode@@Base+0x498>
    93d4:	cmp	sl, #2432	; 0x980
    93d8:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    93dc:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    93e0:	movw	r4, #1531	; 0x5fb
    93e4:	cmp	sl, r4
    93e8:	ble	94d4 <lell_allocate_and_decode@@Base+0x464>
    93ec:	cmp	sl, #1664	; 0x680
    93f0:	bge	94f8 <lell_allocate_and_decode@@Base+0x488>
    93f4:	movw	r4, #1532	; 0x5fc
    93f8:	sub	r5, sl, r4
    93fc:	cmp	r5, #7
    9400:	bhi	950c <lell_allocate_and_decode@@Base+0x49c>
    9404:	cmp	r5, #4
    9408:	bne	9508 <lell_allocate_and_decode@@Base+0x498>
    940c:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    9410:	sub	r9, sl, #508	; 0x1fc
    9414:	cmp	r9, #7
    9418:	bhi	9424 <lell_allocate_and_decode@@Base+0x3b4>
    941c:	cmp	r9, #4
    9420:	bne	9508 <lell_allocate_and_decode@@Base+0x498>
    9424:	sub	r5, sl, #254	; 0xfe
    9428:	cmp	r5, #4
    942c:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    9430:	cmp	sl, #384	; 0x180
    9434:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    9438:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    943c:	movw	r4, #3580	; 0xdfc
    9440:	sub	r5, sl, r4
    9444:	cmp	r5, #8
    9448:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    944c:	movw	r4, #3326	; 0xcfe
    9450:	sub	r5, sl, r4
    9454:	cmp	r5, #4
    9458:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    945c:	cmp	sl, #3456	; 0xd80
    9460:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    9464:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    9468:	movw	r4, #2814	; 0xafe
    946c:	sub	r5, sl, r4
    9470:	cmp	r5, #4
    9474:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    9478:	cmp	sl, #2688	; 0xa80
    947c:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    9480:	cmp	sl, #2944	; 0xb80
    9484:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    9488:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    948c:	movw	r4, #766	; 0x2fe
    9490:	sub	r5, sl, r4
    9494:	cmp	r5, #4
    9498:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    949c:	cmp	sl, #640	; 0x280
    94a0:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    94a4:	cmp	sl, #896	; 0x380
    94a8:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    94ac:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    94b0:	movw	r4, #3838	; 0xefe
    94b4:	sub	r5, sl, r4
    94b8:	cmp	r5, #4
    94bc:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    94c0:	cmp	sl, #3712	; 0xe80
    94c4:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    94c8:	cmp	sl, #3968	; 0xf80
    94cc:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    94d0:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    94d4:	movw	r4, #1278	; 0x4fe
    94d8:	sub	r5, sl, r4
    94dc:	cmp	r5, #4
    94e0:	bcc	9508 <lell_allocate_and_decode@@Base+0x498>
    94e4:	cmp	sl, #1152	; 0x480
    94e8:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    94ec:	cmp	sl, #1408	; 0x580
    94f0:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    94f4:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    94f8:	movw	r4, #1790	; 0x6fe
    94fc:	sub	r5, sl, r4
    9500:	cmp	r5, #4
    9504:	bcs	951c <lell_allocate_and_decode@@Base+0x4ac>
    9508:	add	r3, r3, #1
    950c:	add	r1, r1, #4
    9510:	cmp	r1, #21
    9514:	bcc	92c4 <lell_allocate_and_decode@@Base+0x254>
    9518:	b	9530 <lell_allocate_and_decode@@Base+0x4c0>
    951c:	cmp	sl, #1664	; 0x680
    9520:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    9524:	cmp	sl, #1920	; 0x780
    9528:	beq	9508 <lell_allocate_and_decode@@Base+0x498>
    952c:	b	950c <lell_allocate_and_decode@@Base+0x49c>
    9530:	clz	r0, r3
    9534:	str	r3, [r8, #92]	; 0x5c
    9538:	lsr	r0, r0, #5
    953c:	strb	r0, [r8, #100]	; 0x64
    9540:	b	954c <lell_allocate_and_decode@@Base+0x4dc>
    9544:	mov	r1, #1
    9548:	str	r1, [r8, #92]	; 0x5c
    954c:	sub	sp, fp, #28
    9550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9554:	andeq	r5, r0, sp, asr #18
    9558:	andeq	r5, r0, r6, ror #7
    955c:	andeq	r5, r0, r5, ror #19

00009560 <lell_packet_is_data@@Base>:
    9560:	ldrb	r1, [r0, #68]	; 0x44
    9564:	mov	r0, #0
    9568:	cmp	r1, #37	; 0x25
    956c:	movwcc	r0, #1
    9570:	bx	lr

00009574 <lell_get_access_address@@Base>:
    9574:	ldr	r0, [r0, #64]	; 0x40
    9578:	bx	lr

0000957c <lell_get_access_address_offenses@@Base>:
    957c:	ldr	r0, [r0, #92]	; 0x5c
    9580:	bx	lr

00009584 <lell_get_channel_index@@Base>:
    9584:	ldrb	r0, [r0, #68]	; 0x44
    9588:	bx	lr

0000958c <lell_get_channel_k@@Base>:
    958c:	ldrb	r0, [r0, #69]	; 0x45
    9590:	bx	lr

00009594 <lell_get_adv_type_str@@Base>:
    9594:	ldrb	r2, [r0, #68]	; 0x44
    9598:	mov	r1, r0
    959c:	mov	r0, #0
    95a0:	cmp	r2, #37	; 0x25
    95a4:	bxcc	lr
    95a8:	ldrb	r0, [r1, #80]	; 0x50
    95ac:	cmp	r0, #6
    95b0:	bhi	95c4 <lell_get_adv_type_str@@Base+0x30>
    95b4:	ldr	r1, [pc, #24]	; 95d4 <lell_get_adv_type_str@@Base+0x40>
    95b8:	add	r1, pc, r1
    95bc:	ldr	r0, [r1, r0, lsl #2]
    95c0:	bx	lr
    95c4:	ldr	r0, [pc, #4]	; 95d0 <lell_get_adv_type_str@@Base+0x3c>
    95c8:	add	r0, pc, r0
    95cc:	bx	lr
    95d0:	andeq	r4, r0, r4, asr #25
    95d4:	andeq	sl, r1, r4, asr r8

000095d8 <lell_print@@Base>:
    95d8:	push	{r4, r5, r6, r7, fp, lr}
    95dc:	add	fp, sp, #16
    95e0:	mov	r4, r0
    95e4:	ldrb	r0, [r0, #68]	; 0x44
    95e8:	cmp	r0, #36	; 0x24
    95ec:	bls	965c <lell_print@@Base+0x84>
    95f0:	ldrb	r0, [r4, #100]	; 0x64
    95f4:	ldr	r1, [pc, #1260]	; 9ae8 <lell_print@@Base+0x510>
    95f8:	ldr	r2, [pc, #1260]	; 9aec <lell_print@@Base+0x514>
    95fc:	ldr	r3, [r4, #72]	; 0x48
    9600:	add	r1, pc, r1
    9604:	tst	r0, #1
    9608:	add	r2, pc, r2
    960c:	moveq	r2, r1
    9610:	ldr	r1, [r4, #64]	; 0x40
    9614:	ldr	r0, [pc, #1236]	; 9af0 <lell_print@@Base+0x518>
    9618:	add	r0, pc, r0
    961c:	bl	4590 <printf@plt>
    9620:	ldrb	r1, [r4, #68]	; 0x44
    9624:	ldr	r0, [pc, #1224]	; 9af4 <lell_print@@Base+0x51c>
    9628:	add	r0, pc, r0
    962c:	bl	4590 <printf@plt>
    9630:	ldrb	r0, [r4, #68]	; 0x44
    9634:	mov	r1, #0
    9638:	cmp	r0, #37	; 0x25
    963c:	bcc	9718 <lell_print@@Base+0x140>
    9640:	ldrb	r0, [r4, #80]	; 0x50
    9644:	cmp	r0, #6
    9648:	bhi	9710 <lell_print@@Base+0x138>
    964c:	ldr	r1, [pc, #1192]	; 9afc <lell_print@@Base+0x524>
    9650:	add	r1, pc, r1
    9654:	ldr	r1, [r1, r0, lsl #2]
    9658:	b	9718 <lell_print@@Base+0x140>
    965c:	ldrb	r0, [r4, #100]	; 0x64
    9660:	ldr	r1, [pc, #1116]	; 9ac4 <lell_print@@Base+0x4ec>
    9664:	ldr	r2, [pc, #1116]	; 9ac8 <lell_print@@Base+0x4f0>
    9668:	ldrb	r5, [r4, #4]
    966c:	ldr	r3, [r4, #72]	; 0x48
    9670:	add	r1, pc, r1
    9674:	tst	r0, #1
    9678:	add	r2, pc, r2
    967c:	moveq	r2, r1
    9680:	ldr	r1, [r4, #64]	; 0x40
    9684:	ldr	r0, [pc, #1088]	; 9acc <lell_print@@Base+0x4f4>
    9688:	add	r0, pc, r0
    968c:	bl	4590 <printf@plt>
    9690:	ldrb	r1, [r4, #68]	; 0x44
    9694:	ldr	r0, [pc, #1076]	; 9ad0 <lell_print@@Base+0x4f8>
    9698:	add	r0, pc, r0
    969c:	bl	4590 <printf@plt>
    96a0:	ldr	r0, [pc, #1068]	; 9ad4 <lell_print@@Base+0x4fc>
    96a4:	and	r5, r5, #3
    96a8:	mov	r1, r5
    96ac:	add	r0, pc, r0
    96b0:	ldr	r2, [r0, r5, lsl #2]
    96b4:	ldr	r0, [pc, #1052]	; 9ad8 <lell_print@@Base+0x500>
    96b8:	add	r0, pc, r0
    96bc:	bl	4590 <printf@plt>
    96c0:	ldrb	r0, [r4, #4]
    96c4:	ubfx	r1, r0, #2, #1
    96c8:	ubfx	r2, r0, #3, #1
    96cc:	ubfx	r3, r0, #4, #1
    96d0:	ldr	r0, [pc, #1028]	; 9adc <lell_print@@Base+0x504>
    96d4:	add	r0, pc, r0
    96d8:	bl	4590 <printf@plt>
    96dc:	cmp	r5, #3
    96e0:	bne	989c <lell_print@@Base+0x2c4>
    96e4:	ldrb	r1, [r4, #6]
    96e8:	ldr	r2, [pc, #1008]	; 9ae0 <lell_print@@Base+0x508>
    96ec:	cmp	r1, #20
    96f0:	mov	r0, r1
    96f4:	add	r2, pc, r2
    96f8:	movcs	r0, #20
    96fc:	ldr	r2, [r2, r0, lsl #2]
    9700:	ldr	r0, [pc, #988]	; 9ae4 <lell_print@@Base+0x50c>
    9704:	add	r0, pc, r0
    9708:	bl	4590 <printf@plt>
    970c:	b	989c <lell_print@@Base+0x2c4>
    9710:	ldr	r1, [pc, #992]	; 9af8 <lell_print@@Base+0x520>
    9714:	add	r1, pc, r1
    9718:	ldr	r0, [pc, #992]	; 9b00 <lell_print@@Base+0x528>
    971c:	add	r0, pc, r0
    9720:	bl	4590 <printf@plt>
    9724:	ldrb	r0, [r4, #80]	; 0x50
    9728:	cmp	r0, #6
    972c:	bhi	989c <lell_print@@Base+0x2c4>
    9730:	add	r1, pc, #4
    9734:	ldr	r0, [r1, r0, lsl #2]
    9738:	add	pc, r1, r0
    973c:	andeq	r0, r0, ip, lsl r0
    9740:	andeq	r0, r0, ip, lsl #1
    9744:	andeq	r0, r0, ip, lsl r0
    9748:	strheq	r0, [r0], -r4
    974c:	andeq	r0, r0, r8, ror #1
    9750:	andeq	r0, r0, r0, lsl #4
    9754:	andeq	r0, r0, ip, lsl r0
    9758:	ldr	r3, [r4, #84]	; 0x54
    975c:	ldr	r0, [pc, #928]	; 9b04 <lell_print@@Base+0x52c>
    9760:	mov	r1, r4
    9764:	mov	r2, #6
    9768:	add	r0, pc, r0
    976c:	bl	9b84 <lell_print@@Base+0x5ac>
    9770:	ldr	r0, [r4, #72]	; 0x48
    9774:	cmp	r0, #7
    9778:	blt	989c <lell_print@@Base+0x2c4>
    977c:	ldr	r0, [pc, #900]	; 9b08 <lell_print@@Base+0x530>
    9780:	add	r0, pc, r0
    9784:	bl	4590 <printf@plt>
    9788:	ldr	r0, [r4, #72]	; 0x48
    978c:	cmp	r0, #7
    9790:	blt	9884 <lell_print@@Base+0x2ac>
    9794:	ldr	r5, [pc, #880]	; 9b0c <lell_print@@Base+0x534>
    9798:	add	r6, r4, #12
    979c:	mov	r7, #0
    97a0:	add	r5, pc, r5
    97a4:	ldrb	r1, [r6, r7]
    97a8:	mov	r0, r5
    97ac:	bl	4590 <printf@plt>
    97b0:	ldr	r0, [r4, #72]	; 0x48
    97b4:	add	r7, r7, #1
    97b8:	sub	r0, r0, #6
    97bc:	cmp	r7, r0
    97c0:	blt	97a4 <lell_print@@Base+0x1cc>
    97c4:	b	9884 <lell_print@@Base+0x2ac>
    97c8:	ldr	r3, [r4, #84]	; 0x54
    97cc:	ldr	r0, [pc, #828]	; 9b10 <lell_print@@Base+0x538>
    97d0:	mov	r1, r4
    97d4:	mov	r2, #6
    97d8:	add	r0, pc, r0
    97dc:	bl	9b84 <lell_print@@Base+0x5ac>
    97e0:	ldr	r3, [r4, #88]	; 0x58
    97e4:	ldr	r0, [pc, #808]	; 9b14 <lell_print@@Base+0x53c>
    97e8:	add	r0, pc, r0
    97ec:	b	9814 <lell_print@@Base+0x23c>
    97f0:	ldr	r3, [r4, #84]	; 0x54
    97f4:	ldr	r0, [pc, #796]	; 9b18 <lell_print@@Base+0x540>
    97f8:	mov	r1, r4
    97fc:	mov	r2, #6
    9800:	add	r0, pc, r0
    9804:	bl	9b84 <lell_print@@Base+0x5ac>
    9808:	ldr	r3, [r4, #88]	; 0x58
    980c:	ldr	r0, [pc, #776]	; 9b1c <lell_print@@Base+0x544>
    9810:	add	r0, pc, r0
    9814:	mov	r1, r4
    9818:	mov	r2, #12
    981c:	bl	9b84 <lell_print@@Base+0x5ac>
    9820:	b	989c <lell_print@@Base+0x2c4>
    9824:	ldr	r3, [r4, #84]	; 0x54
    9828:	ldr	r0, [pc, #752]	; 9b20 <lell_print@@Base+0x548>
    982c:	mov	r1, r4
    9830:	mov	r2, #6
    9834:	add	r0, pc, r0
    9838:	bl	9b84 <lell_print@@Base+0x5ac>
    983c:	ldr	r0, [pc, #736]	; 9b24 <lell_print@@Base+0x54c>
    9840:	add	r0, pc, r0
    9844:	bl	4590 <printf@plt>
    9848:	ldr	r0, [r4, #72]	; 0x48
    984c:	cmp	r0, #7
    9850:	blt	9884 <lell_print@@Base+0x2ac>
    9854:	ldr	r5, [pc, #716]	; 9b28 <lell_print@@Base+0x550>
    9858:	add	r6, r4, #12
    985c:	mov	r7, #0
    9860:	add	r5, pc, r5
    9864:	ldrb	r1, [r6, r7]
    9868:	mov	r0, r5
    986c:	bl	4590 <printf@plt>
    9870:	ldr	r0, [r4, #72]	; 0x48
    9874:	add	r7, r7, #1
    9878:	sub	r0, r0, #6
    987c:	cmp	r7, r0
    9880:	blt	9864 <lell_print@@Base+0x28c>
    9884:	mov	r0, #10
    9888:	bl	47f4 <putchar@plt>
    988c:	ldr	r1, [r4, #72]	; 0x48
    9890:	add	r0, r4, #12
    9894:	sub	r1, r1, #6
    9898:	bl	9c0c <lell_print@@Base+0x634>
    989c:	mov	r0, #10
    98a0:	bl	47f4 <putchar@plt>
    98a4:	ldr	r0, [pc, #712]	; 9b74 <lell_print@@Base+0x59c>
    98a8:	add	r0, pc, r0
    98ac:	bl	4590 <printf@plt>
    98b0:	ldr	r0, [r4, #72]	; 0x48
    98b4:	cmp	r0, #1
    98b8:	blt	98ec <lell_print@@Base+0x314>
    98bc:	ldr	r5, [pc, #692]	; 9b78 <lell_print@@Base+0x5a0>
    98c0:	mov	r6, #6
    98c4:	add	r5, pc, r5
    98c8:	ldrb	r1, [r4, r6]
    98cc:	mov	r0, r5
    98d0:	bl	4590 <printf@plt>
    98d4:	ldr	r1, [r4, #72]	; 0x48
    98d8:	add	r0, r6, #1
    98dc:	add	r1, r1, #5
    98e0:	cmp	r6, r1
    98e4:	mov	r6, r0
    98e8:	blt	98c8 <lell_print@@Base+0x2f0>
    98ec:	mov	r0, #10
    98f0:	bl	47f4 <putchar@plt>
    98f4:	ldr	r0, [pc, #640]	; 9b7c <lell_print@@Base+0x5a4>
    98f8:	add	r0, pc, r0
    98fc:	bl	4590 <printf@plt>
    9900:	ldr	r5, [pc, #632]	; 9b80 <lell_print@@Base+0x5a8>
    9904:	add	r6, r4, #6
    9908:	mov	r7, #0
    990c:	add	r5, pc, r5
    9910:	ldr	r0, [r4, #72]	; 0x48
    9914:	add	r0, r6, r0
    9918:	ldrb	r1, [r0, -r7]
    991c:	mov	r0, r5
    9920:	bl	4590 <printf@plt>
    9924:	sub	r7, r7, #1
    9928:	cmn	r7, #3
    992c:	bne	9910 <lell_print@@Base+0x338>
    9930:	mov	r0, #10
    9934:	pop	{r4, r5, r6, r7, fp, lr}
    9938:	b	47f4 <putchar@plt>
    993c:	ldr	r3, [r4, #84]	; 0x54
    9940:	ldr	r0, [pc, #484]	; 9b2c <lell_print@@Base+0x554>
    9944:	mov	r1, r4
    9948:	mov	r2, #6
    994c:	add	r0, pc, r0
    9950:	bl	9b84 <lell_print@@Base+0x5ac>
    9954:	ldr	r3, [r4, #88]	; 0x58
    9958:	ldr	r0, [pc, #464]	; 9b30 <lell_print@@Base+0x558>
    995c:	mov	r1, r4
    9960:	mov	r2, #12
    9964:	add	r0, pc, r0
    9968:	bl	9b84 <lell_print@@Base+0x5ac>
    996c:	ldr	r2, [r4, #18]
    9970:	ldr	r0, [pc, #444]	; 9b34 <lell_print@@Base+0x55c>
    9974:	ldr	r1, [pc, #444]	; 9b38 <lell_print@@Base+0x560>
    9978:	add	r0, pc, r0
    997c:	add	r1, pc, r1
    9980:	bl	4590 <printf@plt>
    9984:	ldrb	r1, [r4, #23]
    9988:	ldrb	r2, [r4, #24]
    998c:	ldrb	r0, [r4, #22]
    9990:	lsl	r1, r1, #8
    9994:	orr	r1, r1, r2, lsl #16
    9998:	orr	r2, r1, r0
    999c:	ldr	r0, [pc, #408]	; 9b3c <lell_print@@Base+0x564>
    99a0:	ldr	r1, [pc, #408]	; 9b40 <lell_print@@Base+0x568>
    99a4:	add	r0, pc, r0
    99a8:	add	r1, pc, r1
    99ac:	bl	4590 <printf@plt>
    99b0:	ldrb	r2, [r4, #25]
    99b4:	ldr	r0, [pc, #392]	; 9b44 <lell_print@@Base+0x56c>
    99b8:	ldr	r1, [pc, #392]	; 9b48 <lell_print@@Base+0x570>
    99bc:	add	r0, pc, r0
    99c0:	add	r1, pc, r1
    99c4:	mov	r3, r2
    99c8:	bl	4590 <printf@plt>
    99cc:	ldrb	r0, [r4, #26]
    99d0:	ldrb	r1, [r4, #27]
    99d4:	ldr	r5, [pc, #368]	; 9b4c <lell_print@@Base+0x574>
    99d8:	orr	r2, r0, r1, lsl #8
    99dc:	ldr	r1, [pc, #364]	; 9b50 <lell_print@@Base+0x578>
    99e0:	add	r5, pc, r5
    99e4:	mov	r0, r5
    99e8:	mov	r3, r2
    99ec:	add	r1, pc, r1
    99f0:	bl	4590 <printf@plt>
    99f4:	ldrb	r0, [r4, #28]
    99f8:	ldrb	r1, [r4, #29]
    99fc:	orr	r2, r0, r1, lsl #8
    9a00:	ldr	r1, [pc, #332]	; 9b54 <lell_print@@Base+0x57c>
    9a04:	mov	r0, r5
    9a08:	mov	r3, r2
    9a0c:	add	r1, pc, r1
    9a10:	bl	4590 <printf@plt>
    9a14:	ldrb	r0, [r4, #30]
    9a18:	ldrb	r1, [r4, #31]
    9a1c:	orr	r2, r0, r1, lsl #8
    9a20:	ldr	r1, [pc, #304]	; 9b58 <lell_print@@Base+0x580>
    9a24:	mov	r0, r5
    9a28:	mov	r3, r2
    9a2c:	add	r1, pc, r1
    9a30:	bl	4590 <printf@plt>
    9a34:	ldrb	r0, [r4, #32]
    9a38:	ldrb	r1, [r4, #33]	; 0x21
    9a3c:	orr	r2, r0, r1, lsl #8
    9a40:	ldr	r1, [pc, #276]	; 9b5c <lell_print@@Base+0x584>
    9a44:	mov	r0, r5
    9a48:	mov	r3, r2
    9a4c:	add	r1, pc, r1
    9a50:	bl	4590 <printf@plt>
    9a54:	ldr	r0, [pc, #260]	; 9b60 <lell_print@@Base+0x588>
    9a58:	add	r0, pc, r0
    9a5c:	bl	4590 <printf@plt>
    9a60:	ldr	r5, [pc, #252]	; 9b64 <lell_print@@Base+0x58c>
    9a64:	add	r6, r4, #34	; 0x22
    9a68:	mov	r7, #0
    9a6c:	add	r5, pc, r5
    9a70:	ldrb	r1, [r6, -r7]
    9a74:	mov	r0, r5
    9a78:	bl	4590 <printf@plt>
    9a7c:	sub	r7, r7, #1
    9a80:	cmn	r7, #5
    9a84:	bne	9a70 <lell_print@@Base+0x498>
    9a88:	mov	r0, #10
    9a8c:	bl	47f4 <putchar@plt>
    9a90:	ldrb	r0, [r4, #39]	; 0x27
    9a94:	and	r1, r0, #31
    9a98:	ldr	r0, [pc, #200]	; 9b68 <lell_print@@Base+0x590>
    9a9c:	add	r0, pc, r0
    9aa0:	bl	4590 <printf@plt>
    9aa4:	ldrb	r0, [r4, #39]	; 0x27
    9aa8:	lsr	r1, r0, #5
    9aac:	ldr	r0, [pc, #184]	; 9b6c <lell_print@@Base+0x594>
    9ab0:	add	r0, pc, r0
    9ab4:	ldr	r2, [r0, r1, lsl #2]
    9ab8:	ldr	r0, [pc, #176]	; 9b70 <lell_print@@Base+0x598>
    9abc:	add	r0, pc, r0
    9ac0:	b	9708 <lell_print@@Base+0x130>
    9ac4:	andeq	r4, r0, r1, lsr #25
    9ac8:	muleq	r0, fp, ip
    9acc:	andeq	r4, r0, r8, ror #24
    9ad0:	andeq	r4, r0, r1, lsl #25
    9ad4:	andeq	sl, r1, ip, ror r7
    9ad8:	andeq	r4, r0, r8, ror ip
    9adc:	andeq	r4, r0, pc, ror #24
    9ae0:	andeq	sl, r1, r4, asr #14
    9ae4:	andeq	r4, r0, r5, asr #27
    9ae8:	andeq	r4, r0, r1, lsl sp
    9aec:	andeq	r4, r0, fp, lsl #26
    9af0:	andeq	r4, r0, r6, asr #29
    9af4:	strdeq	r4, [r0], -r1
    9af8:	andeq	r4, r0, r8, ror fp
    9afc:			; <UNDEFINED> instruction: 0x0001a7bc
    9b00:	andeq	r4, r0, r9, ror #27
    9b04:	andeq	r4, r0, ip, lsr #27
    9b08:	muleq	r0, ip, sp
    9b0c:	andeq	r5, r0, r3, lsr #1
    9b10:	andeq	r4, r0, ip, lsr sp
    9b14:	andeq	r4, r0, r1, asr #26
    9b18:	andeq	r4, r0, r1, lsr sp
    9b1c:	andeq	r4, r0, r4, lsl #26
    9b20:	andeq	r4, r0, r0, ror #25
    9b24:	strdeq	r4, [r0], -r9
    9b28:	andeq	r4, r0, r3, ror #31
    9b2c:	ldrdeq	r4, [r0], -sp
    9b30:			; <UNDEFINED> instruction: 0x00004bb0
    9b34:	ldrdeq	r4, [r0], -r6
    9b38:	andeq	r4, r0, lr, asr #23
    9b3c:			; <UNDEFINED> instruction: 0x00004fb6
    9b40:	andeq	r4, r0, sl, lsr #23
    9b44:	andeq	r4, r0, sl, lsr #31
    9b48:	muleq	r0, ip, fp
    9b4c:	muleq	r0, r7, pc	; <UNPREDICTABLE>
    9b50:	andeq	r4, r0, sl, ror fp
    9b54:	andeq	r4, r0, r6, ror #22
    9b58:	andeq	r4, r0, r1, asr fp
    9b5c:	andeq	r4, r0, fp, lsr fp
    9b60:	andeq	r4, r0, r9, lsr fp
    9b64:	ldrdeq	r4, [r0], -r7
    9b68:	strdeq	r4, [r0], -lr
    9b6c:	ldrdeq	sl, [r1], -ip
    9b70:	andeq	r4, r0, fp, ror #21
    9b74:	andeq	r4, r0, r0, lsl sp
    9b78:	andeq	r4, r0, pc, ror pc
    9b7c:	andeq	r4, r0, fp, asr #25
    9b80:	andeq	r4, r0, r7, lsr pc
    9b84:	push	{r4, r5, r6, r7, fp, lr}
    9b88:	add	fp, sp, #16
    9b8c:	add	r6, r1, r2
    9b90:	mov	r4, r3
    9b94:	mov	r3, r0
    9b98:	ldrb	r2, [r6, #5]
    9b9c:	ldr	r0, [pc, #84]	; 9bf8 <lell_print@@Base+0x620>
    9ba0:	mov	r1, r3
    9ba4:	add	r0, pc, r0
    9ba8:	bl	4590 <printf@plt>
    9bac:	ldr	r5, [pc, #72]	; 9bfc <lell_print@@Base+0x624>
    9bb0:	mov	r7, #4
    9bb4:	add	r5, pc, r5
    9bb8:	ldrb	r1, [r6, r7]
    9bbc:	mov	r0, r5
    9bc0:	bl	4590 <printf@plt>
    9bc4:	sub	r7, r7, #1
    9bc8:	cmn	r7, #1
    9bcc:	bne	9bb8 <lell_print@@Base+0x5e0>
    9bd0:	ldr	r0, [pc, #40]	; 9c00 <lell_print@@Base+0x628>
    9bd4:	ldr	r1, [pc, #40]	; 9c04 <lell_print@@Base+0x62c>
    9bd8:	cmp	r4, #0
    9bdc:	add	r0, pc, r0
    9be0:	add	r1, pc, r1
    9be4:	moveq	r1, r0
    9be8:	ldr	r0, [pc, #24]	; 9c08 <lell_print@@Base+0x630>
    9bec:	add	r0, pc, r0
    9bf0:	pop	{r4, r5, r6, r7, fp, lr}
    9bf4:	b	4590 <printf@plt>
    9bf8:	andeq	r4, r0, ip, ror fp
    9bfc:	andeq	r4, r0, r7, ror fp
    9c00:	andeq	r4, r0, r3, ror #22
    9c04:	andeq	r4, r0, r8, asr fp
    9c08:	andeq	r4, r0, r5, asr #22
    9c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c10:	add	fp, sp, #28
    9c14:	sub	sp, sp, #4
    9c18:	vpush	{d8}
    9c1c:	sub	sp, sp, #64	; 0x40
    9c20:	cmp	r1, #1
    9c24:	blt	a23c <lell_print@@Base+0xc64>
    9c28:	mov	sl, r0
    9c2c:	add	r0, r0, #2
    9c30:	vmov.f64	d8, #116	; 0x3fa00000  1.250
    9c34:	mov	r3, r1
    9c38:	str	r0, [sp, #8]
    9c3c:	add	r0, sp, #48	; 0x30
    9c40:	add	r2, r0, #10
    9c44:	add	r6, r0, #8
    9c48:	add	r9, r0, #6
    9c4c:	add	r0, r0, #4
    9c50:	str	r0, [sp, #24]
    9c54:	add	r0, sl, #4
    9c58:	str	r0, [sp, #4]
    9c5c:	mov	r0, #0
    9c60:	ldr	r7, [pc, #1568]	; a288 <lell_print@@Base+0xcb0>
    9c64:	str	sl, [sp, #36]	; 0x24
    9c68:	str	r1, [sp, #40]	; 0x28
    9c6c:	str	r2, [sp, #32]
    9c70:	str	r6, [sp, #28]
    9c74:	add	r7, pc, r7
    9c78:	ldrb	r8, [sl, r0]
    9c7c:	add	r1, r0, #1
    9c80:	mov	r4, r0
    9c84:	add	r0, r1, r8
    9c88:	cmp	r0, r3
    9c8c:	bgt	a24c <lell_print@@Base+0xc74>
    9c90:	cmp	r8, #0
    9c94:	beq	a26c <lell_print@@Base+0xc94>
    9c98:	str	r0, [sp, #44]	; 0x2c
    9c9c:	ldrb	r6, [sl, r1]
    9ca0:	ldr	r0, [pc, #1508]	; a28c <lell_print@@Base+0xcb4>
    9ca4:	mov	r1, r6
    9ca8:	add	r0, pc, r0
    9cac:	bl	4590 <printf@plt>
    9cb0:	sub	r0, r6, #1
    9cb4:	cmp	r0, #21
    9cb8:	bhi	9dc4 <lell_print@@Base+0x7ec>
    9cbc:	add	r2, pc, #20
    9cc0:	ldr	r3, [r2, r0, lsl #2]
    9cc4:	ldr	r0, [pc, #1484]	; a298 <lell_print@@Base+0xcc0>
    9cc8:	ldr	r1, [pc, #1484]	; a29c <lell_print@@Base+0xcc4>
    9ccc:	add	r0, pc, r0
    9cd0:	add	r1, pc, r1
    9cd4:	add	pc, r2, r3
    9cd8:	andeq	r0, r0, r8, asr r0
    9cdc:	ldrdeq	r0, [r0], -r4
    9ce0:	andeq	r0, r0, ip, asr #3
    9ce4:	andeq	r0, r0, r4, lsl #3
    9ce8:	andeq	r0, r0, r4, lsl #3
    9cec:	andeq	r0, r0, r8, lsr #4
    9cf0:	andeq	r0, r0, r0, lsr #4
    9cf4:	andeq	r0, r0, r4, lsl #3
    9cf8:	andeq	r0, r0, r8, asr #4
    9cfc:	andeq	r0, r0, r4, lsr #5
    9d00:	andeq	r0, r0, r4, lsl #3
    9d04:	andeq	r0, r0, r4, lsl #3
    9d08:	andeq	r0, r0, r4, lsl #3
    9d0c:	andeq	r0, r0, r4, lsl #3
    9d10:	andeq	r0, r0, r4, lsl #3
    9d14:	andeq	r0, r0, r4, lsl #3
    9d18:	andeq	r0, r0, r4, lsl #3
    9d1c:	ldrdeq	r0, [r0], -ip
    9d20:	andeq	r0, r0, r4, lsl #3
    9d24:	andeq	r0, r0, r4, lsl #3
    9d28:	andeq	r0, r0, r4, lsl #3
    9d2c:	andeq	r0, r0, r8, asr r3
    9d30:	ldr	r0, [pc, #1384]	; a2a0 <lell_print@@Base+0xcc8>
    9d34:	add	r0, pc, r0
    9d38:	bl	46e0 <puts@plt>
    9d3c:	ldr	r0, [pc, #1376]	; a2a4 <lell_print@@Base+0xccc>
    9d40:	add	r0, pc, r0
    9d44:	bl	4590 <printf@plt>
    9d48:	ldr	r8, [pc, #1368]	; a2a8 <lell_print@@Base+0xcd0>
    9d4c:	add	r6, r4, #2
    9d50:	mov	r4, #7
    9d54:	mov	r5, #1
    9d58:	add	r8, pc, r8
    9d5c:	ldrb	r0, [sl, r6]
    9d60:	and	r1, r0, r5, lsl r4
    9d64:	mov	r0, r8
    9d68:	cmp	r1, #0
    9d6c:	movwne	r1, #1
    9d70:	bl	4590 <printf@plt>
    9d74:	sub	r4, r4, #1
    9d78:	cmn	r4, #1
    9d7c:	bne	9d5c <lell_print@@Base+0x784>
    9d80:	mov	r0, #10
    9d84:	bl	47f4 <putchar@plt>
    9d88:	mov	r4, #0
    9d8c:	ldrb	r0, [sl, r6]
    9d90:	tst	r0, r5, lsl r4
    9d94:	beq	9db4 <lell_print@@Base+0x7dc>
    9d98:	ldr	r0, [pc, #1292]	; a2ac <lell_print@@Base+0xcd4>
    9d9c:	add	r0, pc, r0
    9da0:	bl	4590 <printf@plt>
    9da4:	ldr	r0, [pc, #1284]	; a2b0 <lell_print@@Base+0xcd8>
    9da8:	add	r0, pc, r0
    9dac:	ldr	r0, [r0, r4, lsl #2]
    9db0:	bl	46e0 <puts@plt>
    9db4:	add	r4, r4, #1
    9db8:	cmp	r4, #8
    9dbc:	bne	9d8c <lell_print@@Base+0x7b4>
    9dc0:	b	a0b4 <lell_print@@Base+0xadc>
    9dc4:	cmp	r6, #255	; 0xff
    9dc8:	bne	9e5c <lell_print@@Base+0x884>
    9dcc:	ldr	r0, [pc, #1340]	; a310 <lell_print@@Base+0xd38>
    9dd0:	mov	r6, r4
    9dd4:	add	r0, pc, r0
    9dd8:	bl	46e0 <puts@plt>
    9ddc:	ldr	r4, [pc, #1328]	; a314 <lell_print@@Base+0xd3c>
    9de0:	add	r4, pc, r4
    9de4:	mov	r0, r4
    9de8:	bl	4590 <printf@plt>
    9dec:	sub	r1, r8, #1
    9df0:	cmp	r1, #2
    9df4:	blt	a21c <lell_print@@Base+0xc44>
    9df8:	add	r0, r6, sl
    9dfc:	ldrh	r0, [r0, #2]
    9e00:	bl	4824 <bt_compidtostr@plt>
    9e04:	mov	r1, r0
    9e08:	ldr	r0, [pc, #1288]	; a318 <lell_print@@Base+0xd40>
    9e0c:	add	r0, pc, r0
    9e10:	bl	4590 <printf@plt>
    9e14:	mov	r0, r4
    9e18:	bl	4590 <printf@plt>
    9e1c:	ldr	r0, [pc, #1272]	; a31c <lell_print@@Base+0xd44>
    9e20:	add	r0, pc, r0
    9e24:	bl	4590 <printf@plt>
    9e28:	ldr	r5, [pc, #1264]	; a320 <lell_print@@Base+0xd48>
    9e2c:	cmp	r8, #4
    9e30:	add	r5, pc, r5
    9e34:	bcc	a0b4 <lell_print@@Base+0xadc>
    9e38:	ldr	r0, [sp, #4]
    9e3c:	add	r4, r0, r6
    9e40:	sub	r6, r8, #3
    9e44:	ldrb	r1, [r4], #1
    9e48:	mov	r0, r5
    9e4c:	bl	4590 <printf@plt>
    9e50:	subs	r6, r6, #1
    9e54:	bne	9e44 <lell_print@@Base+0x86c>
    9e58:	b	a0b4 <lell_print@@Base+0xadc>
    9e5c:	mov	r0, #10
    9e60:	bl	47f4 <putchar@plt>
    9e64:	ldr	r0, [pc, #1060]	; a290 <lell_print@@Base+0xcb8>
    9e68:	add	r0, pc, r0
    9e6c:	bl	4590 <printf@plt>
    9e70:	ldr	r5, [pc, #1052]	; a294 <lell_print@@Base+0xcbc>
    9e74:	cmp	r8, #2
    9e78:	add	r5, pc, r5
    9e7c:	bcc	a0b4 <lell_print@@Base+0xadc>
    9e80:	ldr	r0, [sp, #8]
    9e84:	sub	r6, r8, #1
    9e88:	add	r4, r0, r4
    9e8c:	ldrb	r1, [r4], #1
    9e90:	mov	r0, r5
    9e94:	bl	4590 <printf@plt>
    9e98:	subs	r6, r6, #1
    9e9c:	bne	9e8c <lell_print@@Base+0x8b4>
    9ea0:	b	a0b4 <lell_print@@Base+0xadc>
    9ea4:	ldr	r0, [pc, #1032]	; a2b4 <lell_print@@Base+0xcdc>
    9ea8:	add	r0, pc, r0
    9eac:	bl	46e0 <puts@plt>
    9eb0:	sub	r6, r8, #1
    9eb4:	ldr	r8, [pc, #1020]	; a2b8 <lell_print@@Base+0xce0>
    9eb8:	tst	r6, #1
    9ebc:	add	r8, pc, r8
    9ec0:	bne	a228 <lell_print@@Base+0xc50>
    9ec4:	cmp	r6, #1
    9ec8:	blt	a228 <lell_print@@Base+0xc50>
    9ecc:	ldr	r0, [sp, #8]
    9ed0:	mov	r5, #0
    9ed4:	add	r4, r0, r4
    9ed8:	add	r0, r4, r5
    9edc:	ldrh	r1, [r0]
    9ee0:	mov	r0, r8
    9ee4:	bl	4590 <printf@plt>
    9ee8:	add	r5, r5, #2
    9eec:	cmp	r5, r6
    9ef0:	blt	9ed8 <lell_print@@Base+0x900>
    9ef4:	b	a228 <lell_print@@Base+0xc50>
    9ef8:	ldr	r1, [pc, #956]	; a2bc <lell_print@@Base+0xce4>
    9efc:	add	r1, pc, r1
    9f00:	mov	r0, r1
    9f04:	bl	46e0 <puts@plt>
    9f08:	sub	r1, r8, #1
    9f0c:	tst	r1, #15
    9f10:	beq	a0c0 <lell_print@@Base+0xae8>
    9f14:	ldr	r0, [pc, #940]	; a2c8 <lell_print@@Base+0xcf0>
    9f18:	add	r0, pc, r0
    9f1c:	b	a224 <lell_print@@Base+0xc4c>
    9f20:	ldr	r0, [pc, #932]	; a2cc <lell_print@@Base+0xcf4>
    9f24:	add	r0, pc, r0
    9f28:	bl	46e0 <puts@plt>
    9f2c:	ldr	r0, [pc, #924]	; a2d0 <lell_print@@Base+0xcf8>
    9f30:	add	r0, pc, r0
    9f34:	bl	4590 <printf@plt>
    9f38:	cmp	r8, #2
    9f3c:	bcc	a0b4 <lell_print@@Base+0xadc>
    9f40:	ldr	r0, [sp, #8]
    9f44:	sub	r8, r8, #1
    9f48:	add	r6, r0, r4
    9f4c:	bl	4734 <__ctype_b_loc@plt>
    9f50:	mov	r4, r0
    9f54:	ldrb	r0, [r6], #1
    9f58:	ldr	r1, [r4]
    9f5c:	add	r1, r1, r0, lsl #1
    9f60:	ldrh	r1, [r1]
    9f64:	tst	r1, #16384	; 0x4000
    9f68:	movweq	r0, #46	; 0x2e
    9f6c:	bl	47f4 <putchar@plt>
    9f70:	subs	r8, r8, #1
    9f74:	bne	9f54 <lell_print@@Base+0x97c>
    9f78:	b	a0b4 <lell_print@@Base+0xadc>
    9f7c:	ldr	r0, [pc, #848]	; a2d4 <lell_print@@Base+0xcfc>
    9f80:	add	r0, pc, r0
    9f84:	bl	46e0 <puts@plt>
    9f88:	ldr	r0, [pc, #840]	; a2d8 <lell_print@@Base+0xd00>
    9f8c:	add	r0, pc, r0
    9f90:	bl	4590 <printf@plt>
    9f94:	sub	r1, r8, #1
    9f98:	cmp	r1, #1
    9f9c:	bne	a1f4 <lell_print@@Base+0xc1c>
    9fa0:	add	r0, r4, sl
    9fa4:	ldrb	r1, [r0, #2]
    9fa8:	ldr	r0, [pc, #812]	; a2dc <lell_print@@Base+0xd04>
    9fac:	add	r0, pc, r0
    9fb0:	b	a224 <lell_print@@Base+0xc4c>
    9fb4:	ldr	r0, [pc, #808]	; a2e4 <lell_print@@Base+0xd0c>
    9fb8:	add	r0, pc, r0
    9fbc:	bl	46e0 <puts@plt>
    9fc0:	ldr	r0, [pc, #800]	; a2e8 <lell_print@@Base+0xd10>
    9fc4:	add	r0, pc, r0
    9fc8:	bl	4590 <printf@plt>
    9fcc:	sub	r1, r8, #1
    9fd0:	cmp	r1, #4
    9fd4:	bne	a200 <lell_print@@Base+0xc28>
    9fd8:	add	r4, r4, sl
    9fdc:	ldrb	r0, [r4, #2]
    9fe0:	ldrb	r1, [r4, #3]
    9fe4:	orr	r0, r0, r1, lsl #8
    9fe8:	vmov	s0, r0
    9fec:	vcvt.f64.s32	d16, s0
    9ff0:	ldr	r0, [pc, #756]	; a2ec <lell_print@@Base+0xd14>
    9ff4:	add	r0, pc, r0
    9ff8:	vmul.f64	d16, d16, d8
    9ffc:	vmov	r2, r3, d16
    a000:	bl	4590 <printf@plt>
    a004:	ldrb	r0, [r4, #4]
    a008:	ldrb	r1, [r4, #5]
    a00c:	orr	r0, r0, r1, lsl #8
    a010:	vmov	s0, r0
    a014:	vcvt.f64.s32	d16, s0
    a018:	ldr	r0, [pc, #720]	; a2f0 <lell_print@@Base+0xd18>
    a01c:	add	r0, pc, r0
    a020:	vmul.f64	d16, d16, d8
    a024:	vmov	r2, r3, d16
    a028:	bl	4590 <printf@plt>
    a02c:	b	a228 <lell_print@@Base+0xc50>
    a030:	ldr	r0, [pc, #704]	; a2f8 <lell_print@@Base+0xd20>
    a034:	add	r0, pc, r0
    a038:	bl	46e0 <puts@plt>
    a03c:	ldr	r0, [pc, #696]	; a2fc <lell_print@@Base+0xd24>
    a040:	add	r0, pc, r0
    a044:	bl	4590 <printf@plt>
    a048:	sub	r6, r8, #1
    a04c:	cmp	r6, #2
    a050:	blt	a20c <lell_print@@Base+0xc34>
    a054:	add	r0, r4, sl
    a058:	ldrb	r1, [r0, #2]
    a05c:	ldrb	r0, [r0, #3]
    a060:	orr	r1, r1, r0, lsl #8
    a064:	ldr	r0, [pc, #660]	; a300 <lell_print@@Base+0xd28>
    a068:	add	r0, pc, r0
    a06c:	bl	4590 <printf@plt>
    a070:	ldr	r5, [pc, #652]	; a304 <lell_print@@Base+0xd2c>
    a074:	cmp	r6, #2
    a078:	add	r5, pc, r5
    a07c:	beq	a0b4 <lell_print@@Base+0xadc>
    a080:	ldr	r0, [pc, #640]	; a308 <lell_print@@Base+0xd30>
    a084:	add	r0, pc, r0
    a088:	bl	4590 <printf@plt>
    a08c:	cmp	r8, #4
    a090:	bcc	a0b4 <lell_print@@Base+0xadc>
    a094:	ldr	r0, [sp, #4]
    a098:	sub	r6, r8, #3
    a09c:	add	r4, r0, r4
    a0a0:	ldrb	r1, [r4], #1
    a0a4:	mov	r0, r5
    a0a8:	bl	4590 <printf@plt>
    a0ac:	subs	r6, r6, #1
    a0b0:	bne	a0a0 <lell_print@@Base+0xac8>
    a0b4:	mov	r0, #10
    a0b8:	bl	47f4 <putchar@plt>
    a0bc:	b	a228 <lell_print@@Base+0xc50>
    a0c0:	ldr	r0, [pc, #504]	; a2c0 <lell_print@@Base+0xce8>
    a0c4:	cmp	r1, #1
    a0c8:	add	r3, sp, #48	; 0x30
    a0cc:	add	r0, pc, r0
    a0d0:	blt	a228 <lell_print@@Base+0xc50>
    a0d4:	add	r4, r4, #2
    a0d8:	mov	r8, #0
    a0dc:	str	r9, [sp, #20]
    a0e0:	str	r1, [sp, #16]
    a0e4:	str	r4, [sp, #12]
    a0e8:	add	r2, r4, r8
    a0ec:	and	r5, r8, #15
    a0f0:	ldrb	r6, [sl, r2]
    a0f4:	eor	r2, r5, #15
    a0f8:	cmp	r5, #15
    a0fc:	strb	r6, [r3, r2]
    a100:	bne	a1e4 <lell_print@@Base+0xc0c>
    a104:	mov	r6, r3
    a108:	bl	4590 <printf@plt>
    a10c:	mov	r4, #0
    a110:	ldrb	r1, [r6, r4]
    a114:	mov	r0, r7
    a118:	bl	4590 <printf@plt>
    a11c:	add	r4, r4, #1
    a120:	cmp	r4, #4
    a124:	bne	a110 <lell_print@@Base+0xb38>
    a128:	mov	r0, #45	; 0x2d
    a12c:	bl	47f4 <putchar@plt>
    a130:	ldr	r5, [sp, #24]
    a134:	mov	r4, #0
    a138:	ldrb	r1, [r5, r4]
    a13c:	mov	r0, r7
    a140:	bl	4590 <printf@plt>
    a144:	add	r4, r4, #1
    a148:	cmp	r4, #2
    a14c:	bne	a138 <lell_print@@Base+0xb60>
    a150:	mov	r0, #45	; 0x2d
    a154:	bl	47f4 <putchar@plt>
    a158:	ldr	r6, [sp, #32]
    a15c:	mov	r4, #0
    a160:	ldrb	r1, [r9, r4]
    a164:	mov	r0, r7
    a168:	bl	4590 <printf@plt>
    a16c:	add	r4, r4, #1
    a170:	cmp	r4, #2
    a174:	bne	a160 <lell_print@@Base+0xb88>
    a178:	mov	r0, #45	; 0x2d
    a17c:	bl	47f4 <putchar@plt>
    a180:	ldr	r9, [sp, #28]
    a184:	mov	r4, #0
    a188:	ldrb	r1, [r9, r4]
    a18c:	mov	r0, r7
    a190:	bl	4590 <printf@plt>
    a194:	add	r4, r4, #1
    a198:	cmp	r4, #2
    a19c:	bne	a188 <lell_print@@Base+0xbb0>
    a1a0:	mov	r0, #45	; 0x2d
    a1a4:	bl	47f4 <putchar@plt>
    a1a8:	mov	r4, #0
    a1ac:	ldrb	r1, [r6, r4]
    a1b0:	mov	r0, r7
    a1b4:	bl	4590 <printf@plt>
    a1b8:	add	r4, r4, #1
    a1bc:	cmp	r4, #6
    a1c0:	bne	a1ac <lell_print@@Base+0xbd4>
    a1c4:	mov	r0, #10
    a1c8:	bl	47f4 <putchar@plt>
    a1cc:	ldr	r9, [sp, #20]
    a1d0:	ldr	r0, [pc, #236]	; a2c4 <lell_print@@Base+0xcec>
    a1d4:	ldr	r1, [sp, #16]
    a1d8:	ldr	r4, [sp, #12]
    a1dc:	add	r3, sp, #48	; 0x30
    a1e0:	add	r0, pc, r0
    a1e4:	add	r8, r8, #1
    a1e8:	cmp	r8, r1
    a1ec:	bne	a0e8 <lell_print@@Base+0xb10>
    a1f0:	b	a228 <lell_print@@Base+0xc50>
    a1f4:	ldr	r0, [pc, #228]	; a2e0 <lell_print@@Base+0xd08>
    a1f8:	add	r0, pc, r0
    a1fc:	b	a224 <lell_print@@Base+0xc4c>
    a200:	ldr	r0, [pc, #236]	; a2f4 <lell_print@@Base+0xd1c>
    a204:	add	r0, pc, r0
    a208:	b	a224 <lell_print@@Base+0xc4c>
    a20c:	ldr	r0, [pc, #248]	; a30c <lell_print@@Base+0xd34>
    a210:	mov	r1, r6
    a214:	add	r0, pc, r0
    a218:	b	a224 <lell_print@@Base+0xc4c>
    a21c:	ldr	r0, [pc, #256]	; a324 <lell_print@@Base+0xd4c>
    a220:	add	r0, pc, r0
    a224:	bl	4590 <printf@plt>
    a228:	ldr	r3, [sp, #40]	; 0x28
    a22c:	ldr	r0, [sp, #44]	; 0x2c
    a230:	ldr	sl, [sp, #36]	; 0x24
    a234:	cmp	r0, r3
    a238:	blt	9c78 <lell_print@@Base+0x6a0>
    a23c:	sub	sp, fp, #40	; 0x28
    a240:	vpop	{d8}
    a244:	add	sp, sp, #4
    a248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a24c:	ldr	r0, [pc, #212]	; a328 <lell_print@@Base+0xd50>
    a250:	mov	r2, r8
    a254:	add	r0, pc, r0
    a258:	sub	sp, fp, #40	; 0x28
    a25c:	vpop	{d8}
    a260:	add	sp, sp, #4
    a264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a268:	b	4590 <printf@plt>
    a26c:	ldr	r0, [pc, #184]	; a32c <lell_print@@Base+0xd54>
    a270:	add	r0, pc, r0
    a274:	sub	sp, fp, #40	; 0x28
    a278:	vpop	{d8}
    a27c:	add	sp, sp, #4
    a280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a284:	b	46e0 <puts@plt>
    a288:	ldrdeq	r4, [r0], -r0
    a28c:	ldrdeq	r4, [r0], -r8
    a290:	andeq	r4, r0, r1, lsr r9
    a294:	andeq	r4, r0, fp, asr #19
    a298:	andeq	r4, r0, pc, lsl lr
    a29c:	ldrdeq	r4, [r0], -r9
    a2a0:	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    a2a4:	andeq	r4, r0, r9, asr sl
    a2a8:	andeq	r4, r0, sl, lsr sl
    a2ac:	strdeq	r4, [r0], -r9
    a2b0:	andeq	sl, r1, r4, lsl #2
    a2b4:	andeq	r4, r0, sl, lsr #24
    a2b8:	andeq	r4, r0, r9, ror #17
    a2bc:	muleq	r0, r4, fp
    a2c0:	andeq	r4, r0, sp, asr #13
    a2c4:			; <UNDEFINED> instruction: 0x000045b9
    a2c8:	muleq	r0, lr, r8
    a2cc:	andeq	r4, r0, r5, asr fp
    a2d0:	andeq	r4, r0, r9, ror #16
    a2d4:	andeq	r4, r0, r7, ror #21
    a2d8:	andeq	r4, r0, sp, lsl #16
    a2dc:	andeq	r4, r0, r6, lsr r8
    a2e0:	strdeq	r4, [r0], -r2
    a2e4:	andeq	r4, r0, ip, lsl #21
    a2e8:	ldrdeq	r4, [r0], -r5
    a2ec:	andeq	r4, r0, r6, lsl r8
    a2f0:	strdeq	r4, [r0], -r7
    a2f4:	andeq	r4, r0, sl, lsl r6
    a2f8:	andeq	r4, r0, r0, lsl #20
    a2fc:	andeq	r4, r0, r9, asr r7
    a300:	ldrdeq	r4, [r0], -r6
    a304:	andeq	r4, r0, fp, asr #15
    a308:	andeq	r4, r0, r5, asr #15
    a30c:	andeq	r4, r0, r3, asr #12
    a310:	andeq	r4, r0, r2, asr #24
    a314:			; <UNDEFINED> instruction: 0x000049b9
    a318:	andeq	r4, r0, lr, ror #20
    a31c:	andeq	r4, r0, r4, lsr #14
    a320:	andeq	r4, r0, r3, lsl sl
    a324:	andeq	r4, r0, r7, lsr r6
    a328:	strdeq	r4, [r0], -r2
    a32c:	andeq	r4, r0, ip, lsr #17

0000a330 <bt_compidtostr@@Base>:
    a330:	add	r0, r0, #1
    a334:	movw	r2, #1038	; 0x40e
    a338:	uxth	r1, r0
    a33c:	cmp	r1, r2
    a340:	bhi	a358 <bt_compidtostr@@Base+0x28>
    a344:	ldr	r1, [pc, #24]	; a364 <bt_compidtostr@@Base+0x34>
    a348:	sxth	r0, r0
    a34c:	add	r1, pc, r1
    a350:	ldr	r0, [r1, r0, lsl #2]
    a354:	bx	lr
    a358:	ldr	r0, [pc, #8]	; a368 <bt_compidtostr@@Base+0x38>
    a35c:	add	r0, pc, r0
    a360:	bx	lr
    a364:	andeq	r9, r1, r0, lsl #23
    a368:	andeq	r9, r0, r8, asr #14

0000a36c <btbb_pcap_open@@Base>:
    a36c:	push	{r4, sl, fp, lr}
    a370:	add	fp, sp, #8
    a374:	sub	sp, sp, #24
    a378:	str	r1, [sp, #20]
    a37c:	mov	r1, #0
    a380:	str	r2, [sp, #16]
    a384:	str	r1, [sp, #12]
    a388:	str	r1, [sp, #8]
    a38c:	movw	r1, #2
    a390:	movt	r1, #4
    a394:	str	r1, [sp, #4]
    a398:	movw	r1, #15437	; 0x3c4d
    a39c:	movt	r1, #41394	; 0xa1b2
    a3a0:	str	r1, [sp]
    a3a4:	ldr	r1, [pc, #48]	; a3dc <btbb_pcap_open@@Base+0x70>
    a3a8:	add	r1, pc, r1
    a3ac:	bl	459c <fopen@plt>
    a3b0:	mov	r4, r0
    a3b4:	cmp	r0, #0
    a3b8:	beq	a3d0 <btbb_pcap_open@@Base+0x64>
    a3bc:	mov	r0, sp
    a3c0:	mov	r1, #24
    a3c4:	mov	r2, #1
    a3c8:	mov	r3, r4
    a3cc:	bl	4698 <fwrite@plt>
    a3d0:	mov	r0, r4
    a3d4:	sub	sp, fp, #8
    a3d8:	pop	{r4, sl, fp, pc}
    a3dc:	andeq	r9, r0, r9, lsl #14

0000a3e0 <btbb_pcap_create_file@@Base>:
    a3e0:	push	{r4, r5, r6, r7, fp, lr}
    a3e4:	add	fp, sp, #16
    a3e8:	mov	r7, r0
    a3ec:	mov	r0, #4
    a3f0:	mov	r6, r1
    a3f4:	bl	46ec <malloc@plt>
    a3f8:	mov	r4, r0
    a3fc:	cmp	r0, #0
    a400:	beq	a430 <btbb_pcap_create_file@@Base+0x50>
    a404:	mov	r5, #0
    a408:	mov	r0, r7
    a40c:	mov	r1, #255	; 0xff
    a410:	mov	r2, #400	; 0x190
    a414:	str	r5, [r4]
    a418:	bl	4638 <btbb_pcap_open@plt>
    a41c:	cmp	r0, #0
    a420:	str	r0, [r4]
    a424:	beq	a444 <btbb_pcap_create_file@@Base+0x64>
    a428:	str	r4, [r6]
    a42c:	b	a43c <btbb_pcap_create_file@@Base+0x5c>
    a430:	mvn	r5, #2
    a434:	mov	r0, r4
    a438:	bl	46a4 <btbb_pcap_close@plt>
    a43c:	mov	r0, r5
    a440:	pop	{r4, r5, r6, r7, fp, pc}
    a444:	ldr	r0, [pc, #12]	; a458 <btbb_pcap_create_file@@Base+0x78>
    a448:	add	r0, pc, r0
    a44c:	bl	4674 <perror@plt>
    a450:	mvn	r5, #1
    a454:	b	a434 <btbb_pcap_create_file@@Base+0x54>
    a458:	andeq	r9, r0, fp, ror #12

0000a45c <btbb_pcap_close@@Base>:
    a45c:	cmp	r0, #0
    a460:	mvneq	r0, #0
    a464:	bxeq	lr
    a468:	push	{r4, sl, fp, lr}
    a46c:	add	fp, sp, #8
    a470:	mov	r4, r0
    a474:	ldr	r0, [r0]
    a478:	cmp	r0, #0
    a47c:	beq	a484 <btbb_pcap_close@@Base+0x28>
    a480:	bl	4854 <fclose@plt>
    a484:	mov	r0, r4
    a488:	bl	45d8 <free@plt>
    a48c:	mov	r0, #0
    a490:	pop	{r4, sl, fp, pc}

0000a494 <btbb_pcap_dump@@Base>:
    a494:	push	{r4, r5, r6, sl, fp, lr}
    a498:	add	fp, sp, #16
    a49c:	mov	r6, r0
    a4a0:	mov	r4, r2
    a4a4:	mov	r5, r1
    a4a8:	mov	r0, r1
    a4ac:	mov	r1, #16
    a4b0:	mov	r2, #1
    a4b4:	mov	r3, r6
    a4b8:	bl	4698 <fwrite@plt>
    a4bc:	ldr	r1, [r5, #8]
    a4c0:	mov	r0, r4
    a4c4:	mov	r2, #1
    a4c8:	mov	r3, r6
    a4cc:	bl	4698 <fwrite@plt>
    a4d0:	mov	r0, r6
    a4d4:	pop	{r4, r5, r6, sl, fp, lr}
    a4d8:	b	45b4 <fflush@plt>

0000a4dc <btbb_pcap_append_packet@@Base>:
    a4dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4e0:	add	fp, sp, #28
    a4e4:	sub	sp, sp, #468	; 0x1d4
    a4e8:	mvn	r6, #0
    a4ec:	cmp	r0, #0
    a4f0:	beq	a67c <btbb_pcap_append_packet@@Base+0x1a0>
    a4f4:	mov	r8, r0
    a4f8:	ldr	r0, [r0]
    a4fc:	cmp	r0, #0
    a500:	beq	a67c <btbb_pcap_append_packet@@Base+0x1a0>
    a504:	ldr	r6, [fp, #24]
    a508:	ldr	r5, [fp, #16]
    a50c:	str	r2, [fp, #-484]	; 0xfffffe1c
    a510:	str	r3, [fp, #-480]	; 0xfffffe20
    a514:	mov	r0, r6
    a518:	bl	474c <btbb_packet_get_payload_length@plt>
    a51c:	mov	r7, r0
    a520:	add	r0, r0, #7
    a524:	str	sp, [fp, #-476]	; 0xfffffe24
    a528:	bic	r0, r0, #7
    a52c:	sub	r1, sp, r0
    a530:	mov	sp, r1
    a534:	mov	r0, r6
    a538:	str	r1, [fp, #-496]	; 0xfffffe10
    a53c:	bl	4584 <btbb_get_payload_packed@plt>
    a540:	mov	r0, r6
    a544:	bl	4884 <btbb_packet_get_channel@plt>
    a548:	str	r0, [fp, #-488]	; 0xfffffe18
    a54c:	mov	r0, r6
    a550:	bl	45f0 <btbb_packet_get_ac_errors@plt>
    a554:	str	r0, [fp, #-492]	; 0xfffffe14
    a558:	mov	r0, r6
    a55c:	bl	47c4 <btbb_packet_get_transport@plt>
    a560:	mov	r4, r0
    a564:	mov	r0, r6
    a568:	bl	45e4 <btbb_packet_get_modulation@plt>
    a56c:	mov	sl, r0
    a570:	mov	r0, r6
    a574:	bl	4818 <btbb_packet_get_lap@plt>
    a578:	mov	r9, r0
    a57c:	mov	r0, r6
    a580:	bl	4788 <btbb_packet_get_header_packed@plt>
    a584:	ldr	r6, [fp, #20]
    a588:	str	r0, [fp, #-440]	; 0xfffffe48
    a58c:	bic	r0, r5, #-16777216	; 0xff000000
    a590:	ldr	r2, [fp, #8]
    a594:	ldr	r3, [fp, #12]
    a598:	mvn	r1, #0
    a59c:	orr	r0, r0, r6, lsl #24
    a5a0:	cmp	r3, r2
    a5a4:	str	r0, [fp, #-444]	; 0xfffffe44
    a5a8:	orr	r0, sl, r4, lsl #4
    a5ac:	str	r9, [fp, #-448]	; 0xfffffe40
    a5b0:	sub	r9, fp, #436	; 0x1b4
    a5b4:	ldr	r4, [fp, #-484]	; 0xfffffe1c
    a5b8:	movw	sl, #51712	; 0xca00
    a5bc:	movt	sl, #15258	; 0x3b9a
    a5c0:	strb	r0, [fp, #-452]	; 0xfffffe3c
    a5c4:	mov	r0, #3
    a5c8:	movwlt	r0, #7
    a5cc:	subs	r1, r5, r1
    a5d0:	movwne	r1, #1
    a5d4:	orr	r0, r0, r1, lsl #4
    a5d8:	subs	r1, r6, #255	; 0xff
    a5dc:	mov	r6, #0
    a5e0:	movwne	r1, #1
    a5e4:	cmp	r7, #400	; 0x190
    a5e8:	orr	r5, r0, r1, lsl #7
    a5ec:	ldr	r0, [fp, #-492]	; 0xfffffe14
    a5f0:	ldr	r1, [fp, #-480]	; 0xfffffe20
    a5f4:	movcs	r7, #400	; 0x190
    a5f8:	strh	r5, [r9]
    a5fc:	strb	r0, [fp, #-453]	; 0xfffffe3b
    a600:	ldr	r0, [fp, #-488]	; 0xfffffe18
    a604:	strh	r6, [r9, #-14]
    a608:	strb	r6, [fp, #-451]	; 0xfffffe3d
    a60c:	strb	r3, [fp, #-454]	; 0xfffffe3a
    a610:	strb	r2, [fp, #-455]	; 0xfffffe39
    a614:	mov	r2, sl
    a618:	mov	r3, #0
    a61c:	strb	r0, [fp, #-456]	; 0xfffffe38
    a620:	add	r0, r7, #22
    a624:	str	r0, [fp, #-460]	; 0xfffffe34
    a628:	str	r0, [fp, #-464]	; 0xfffffe30
    a62c:	mov	r0, r4
    a630:	bl	b73c <lell_pcapng_close@@Base+0xac>
    a634:	mls	r1, r0, sl, r4
    a638:	cmp	r7, #0
    a63c:	str	r1, [fp, #-468]	; 0xfffffe2c
    a640:	str	r0, [fp, #-472]	; 0xfffffe28
    a644:	sub	r0, fp, #472	; 0x1d8
    a648:	add	r4, r0, #16
    a64c:	beq	a664 <btbb_pcap_append_packet@@Base+0x188>
    a650:	ldr	r1, [fp, #-496]	; 0xfffffe10
    a654:	add	r0, r0, #38	; 0x26
    a658:	mov	r2, r7
    a65c:	bl	45fc <memcpy@plt>
    a660:	orr	r5, r5, #32
    a664:	strh	r5, [r9]
    a668:	sub	r1, fp, #472	; 0x1d8
    a66c:	mov	r2, r4
    a670:	ldr	r0, [r8]
    a674:	bl	4710 <btbb_pcap_dump@plt>
    a678:	ldr	sp, [fp, #-476]	; 0xfffffe24
    a67c:	mov	r0, r6
    a680:	sub	sp, fp, #28
    a684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a688 <lell_pcap_create_file@@Base>:
    a688:	mov	r2, r1
    a68c:	mov	r1, #256	; 0x100
    a690:	b	a694 <lell_pcap_create_file@@Base+0xc>
    a694:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a698:	add	fp, sp, #24
    a69c:	mov	r6, r0
    a6a0:	mov	r0, #12
    a6a4:	mov	r8, r2
    a6a8:	mov	r7, r1
    a6ac:	bl	46ec <malloc@plt>
    a6b0:	mov	r5, r0
    a6b4:	cmp	r0, #0
    a6b8:	beq	a6f4 <lell_pcap_create_file@@Base+0x6c>
    a6bc:	mov	r4, #0
    a6c0:	mov	r0, r6
    a6c4:	mov	r1, r7
    a6c8:	mov	r2, #400	; 0x190
    a6cc:	str	r4, [r5]
    a6d0:	str	r4, [r5, #4]
    a6d4:	str	r4, [r5, #8]
    a6d8:	bl	4638 <btbb_pcap_open@plt>
    a6dc:	cmp	r0, #0
    a6e0:	str	r0, [r5]
    a6e4:	beq	a6fc <lell_pcap_create_file@@Base+0x74>
    a6e8:	str	r7, [r5, #4]
    a6ec:	str	r5, [r8]
    a6f0:	b	a708 <lell_pcap_create_file@@Base+0x80>
    a6f4:	mvn	r4, #2
    a6f8:	b	a700 <lell_pcap_create_file@@Base+0x78>
    a6fc:	mvn	r4, #1
    a700:	mov	r0, r5
    a704:	bl	462c <lell_pcap_close@plt>
    a708:	mov	r0, r4
    a70c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000a710 <lell_pcap_ppi_create_file@@Base>:
    a710:	push	{r4, r5, fp, lr}
    a714:	add	fp, sp, #8
    a718:	mov	r4, r1
    a71c:	mov	r1, #192	; 0xc0
    a720:	mov	r5, r2
    a724:	bl	a694 <lell_pcap_create_file@@Base+0xc>
    a728:	cmp	r0, #0
    a72c:	popne	{r4, r5, fp, pc}
    a730:	ldr	r1, [r5]
    a734:	strb	r4, [r1, #8]
    a738:	pop	{r4, r5, fp, pc}

0000a73c <lell_pcap_append_packet@@Base>:
    a73c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a740:	add	fp, sp, #28
    a744:	sub	sp, sp, #300	; 0x12c
    a748:	mvn	r5, #0
    a74c:	cmp	r0, #0
    a750:	beq	a848 <lell_pcap_append_packet@@Base+0x10c>
    a754:	mov	r4, r0
    a758:	ldr	r0, [r0]
    a75c:	cmp	r0, #0
    a760:	beq	a848 <lell_pcap_append_packet@@Base+0x10c>
    a764:	ldr	r0, [r4, #4]
    a768:	cmp	r0, #256	; 0x100
    a76c:	bne	a848 <lell_pcap_append_packet@@Base+0x10c>
    a770:	ldr	r5, [fp, #20]
    a774:	ldr	sl, [fp, #16]
    a778:	mov	r6, r3
    a77c:	mov	r7, r2
    a780:	mov	r0, r5
    a784:	bl	45a8 <lell_packet_is_data@plt>
    a788:	mov	r9, r0
    a78c:	ldrb	r0, [r5, #69]	; 0x45
    a790:	ldr	r8, [r5, #72]	; 0x48
    a794:	mov	r1, r6
    a798:	mov	r3, #0
    a79c:	str	r0, [sp, #8]
    a7a0:	ldr	r0, [r5, #92]	; 0x5c
    a7a4:	str	sl, [sp, #32]
    a7a8:	movw	sl, #51712	; 0xca00
    a7ac:	mov	r5, #0
    a7b0:	movt	sl, #15258	; 0x3b9a
    a7b4:	mov	r2, sl
    a7b8:	str	r0, [sp, #4]
    a7bc:	mov	r0, r7
    a7c0:	bl	b73c <lell_pcapng_close@@Base+0xac>
    a7c4:	mls	r1, r0, sl, r7
    a7c8:	ldr	r2, [fp, #8]
    a7cc:	add	r6, sp, #12
    a7d0:	str	r1, [sp, #16]
    a7d4:	ldr	r1, [fp, #12]
    a7d8:	strb	r1, [sp, #30]
    a7dc:	cmp	r1, r2
    a7e0:	clz	r1, r9
    a7e4:	str	r0, [sp, #12]
    a7e8:	mov	r0, #35	; 0x23
    a7ec:	strb	r2, [sp, #29]
    a7f0:	add	r2, r8, #9
    a7f4:	movwlt	r0, #39	; 0x27
    a7f8:	lsr	r1, r1, #5
    a7fc:	cmp	r2, #255	; 0xff
    a800:	orr	r0, r0, r1, lsl #4
    a804:	ldr	r1, [fp, #20]
    a808:	movcs	r2, #255	; 0xff
    a80c:	strh	r0, [sp, #36]	; 0x24
    a810:	ldr	r0, [sp, #4]
    a814:	strb	r0, [sp, #31]
    a818:	ldr	r0, [sp, #8]
    a81c:	strb	r0, [sp, #28]
    a820:	add	r0, r8, #19
    a824:	str	r0, [sp, #20]
    a828:	add	r0, r2, #10
    a82c:	str	r0, [sp, #24]
    a830:	add	r0, r6, #26
    a834:	bl	45fc <memcpy@plt>
    a838:	ldr	r0, [r4]
    a83c:	add	r2, r6, #16
    a840:	mov	r1, r6
    a844:	bl	4710 <btbb_pcap_dump@plt>
    a848:	mov	r0, r5
    a84c:	sub	sp, fp, #28
    a850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a854 <lell_pcap_append_ppi_packet@@Base>:
    a854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a858:	add	fp, sp, #28
    a85c:	sub	sp, sp, #300	; 0x12c
    a860:	mvn	r4, #0
    a864:	cmp	r0, #0
    a868:	beq	a968 <lell_pcap_append_ppi_packet@@Base+0x114>
    a86c:	mov	r5, r0
    a870:	ldr	r0, [r0]
    a874:	cmp	r0, #0
    a878:	beq	a968 <lell_pcap_append_ppi_packet@@Base+0x114>
    a87c:	ldr	r0, [r5, #4]
    a880:	cmp	r0, #192	; 0xc0
    a884:	bne	a968 <lell_pcap_append_ppi_packet@@Base+0x114>
    a888:	movw	r9, #51712	; 0xca00
    a88c:	ldr	r8, [fp, #28]
    a890:	ldr	sl, [fp, #8]
    a894:	mov	r1, r3
    a898:	mov	r7, r2
    a89c:	mov	r0, r2
    a8a0:	mov	r3, #0
    a8a4:	mov	r4, #0
    a8a8:	movt	r9, #15258	; 0x3b9a
    a8ac:	mov	r2, r9
    a8b0:	bl	b73c <lell_pcapng_close@@Base+0xac>
    a8b4:	mov	r6, r0
    a8b8:	mov	r0, r8
    a8bc:	bl	4794 <lell_get_channel_k@plt>
    a8c0:	mls	r2, r6, r9, r7
    a8c4:	ldr	r1, [r8, #72]	; 0x48
    a8c8:	str	r6, [sp]
    a8cc:	movw	r3, #2402	; 0x962
    a8d0:	mov	r6, sp
    a8d4:	add	r0, r3, r0, lsl #1
    a8d8:	str	r2, [sp, #4]
    a8dc:	mov	r2, #147	; 0x93
    a8e0:	str	r2, [sp, #20]
    a8e4:	movw	r2, #30006	; 0x7536
    a8e8:	movt	r2, #12
    a8ec:	str	r2, [sp, #24]
    a8f0:	mov	r2, #1572864	; 0x180000
    a8f4:	str	r2, [sp, #16]
    a8f8:	add	r2, r1, #33	; 0x21
    a8fc:	str	r2, [sp, #12]
    a900:	add	r2, r1, #9
    a904:	cmp	r2, #255	; 0xff
    a908:	movcs	r2, #255	; 0xff
    a90c:	add	r1, r2, #24
    a910:	str	r1, [sp, #8]
    a914:	ldrb	r1, [r5, #8]
    a918:	strb	sl, [sp, #31]
    a91c:	strh	r0, [sp, #29]
    a920:	strb	r1, [sp, #28]
    a924:	ldr	r1, [fp, #24]
    a928:	ldr	r0, [r8, #76]	; 0x4c
    a92c:	strb	r1, [sp, #39]	; 0x27
    a930:	ldr	r1, [fp, #20]
    a934:	strb	r1, [sp, #38]	; 0x26
    a938:	ldr	r1, [fp, #12]
    a93c:	strb	r1, [sp, #37]	; 0x25
    a940:	ldr	r1, [fp, #16]
    a944:	strb	r1, [sp, #36]	; 0x24
    a948:	str	r0, [sp, #32]
    a94c:	add	r0, r6, #40	; 0x28
    a950:	mov	r1, r8
    a954:	bl	45fc <memcpy@plt>
    a958:	ldr	r0, [r5]
    a95c:	add	r2, r6, #16
    a960:	mov	r1, r6
    a964:	bl	4710 <btbb_pcap_dump@plt>
    a968:	mov	r0, r4
    a96c:	sub	sp, fp, #28
    a970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a974 <lell_pcap_close@@Base>:
    a974:	cmp	r0, #0
    a978:	mvneq	r0, #0
    a97c:	bxeq	lr
    a980:	push	{r4, sl, fp, lr}
    a984:	add	fp, sp, #8
    a988:	mov	r4, r0
    a98c:	ldr	r0, [r0]
    a990:	cmp	r0, #0
    a994:	beq	a99c <lell_pcap_close@@Base+0x28>
    a998:	bl	4854 <fclose@plt>
    a99c:	mov	r0, r4
    a9a0:	bl	45d8 <free@plt>
    a9a4:	mov	r0, #0
    a9a8:	pop	{r4, sl, fp, pc}

0000a9ac <pcapng_create@@Base>:
    a9ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9b0:	add	fp, sp, #28
    a9b4:	sub	sp, sp, #4
    a9b8:	vpush	{d8-d9}
    a9bc:	sub	sp, sp, #40	; 0x28
    a9c0:	mov	r7, r3
    a9c4:	mov	r8, r2
    a9c8:	mov	r5, r1
    a9cc:	mov	r4, r0
    a9d0:	vmov.i32	q4, #0	; 0x00000000
    a9d4:	add	r6, r0, #4
    a9d8:	bl	47ac <getpagesize@plt>
    a9dc:	mov	sl, r0
    a9e0:	mov	r0, #0
    a9e4:	mov	r1, #194	; 0xc2
    a9e8:	mov	r2, #432	; 0x1b0
    a9ec:	vst1.32	{d8-d9}, [r6]
    a9f0:	str	r0, [r4, #20]
    a9f4:	str	r0, [r4, #24]
    a9f8:	mov	r0, r5
    a9fc:	bl	4728 <open@plt>
    aa00:	mov	r9, #6
    aa04:	cmn	r0, #1
    aa08:	str	r0, [r4]
    aa0c:	beq	ade8 <pcapng_create@@Base+0x43c>
    aa10:	ldr	r1, [pc, #1004]	; ae04 <pcapng_create@@Base+0x458>
    aa14:	add	r1, pc, r1
    aa18:	vld1.64	{d16-d17}, [r1]!
    aa1c:	vldr	d18, [r1]
    aa20:	add	r1, sp, #16
    aa24:	mov	r2, r1
    aa28:	vst1.64	{d16-d17}, [r2]!
    aa2c:	vstr	d18, [r2]
    aa30:	mov	r2, #24
    aa34:	str	r2, [r4, #8]
    aa38:	mov	r2, #24
    aa3c:	bl	4830 <write@plt>
    aa40:	cmn	r0, #1
    aa44:	mov	r5, r0
    aa48:	cmpne	r8, #0
    aa4c:	bne	aa64 <pcapng_create@@Base+0xb8>
    aa50:	ldr	r0, [r4, #8]
    aa54:	cmn	r5, #1
    aa58:	str	r0, [r4, #12]
    aa5c:	bne	ab24 <pcapng_create@@Base+0x178>
    aa60:	b	ade8 <pcapng_create@@Base+0x43c>
    aa64:	ldrh	r0, [r8]
    aa68:	str	r7, [sp, #8]
    aa6c:	str	sl, [sp, #12]
    aa70:	cmp	r0, #0
    aa74:	beq	ab10 <pcapng_create@@Base+0x164>
    aa78:	ldr	r7, [pc, #904]	; ae08 <pcapng_create@@Base+0x45c>
    aa7c:	add	r7, pc, r7
    aa80:	ldrh	sl, [r8, #2]
    aa84:	cmp	sl, #0
    aa88:	beq	ab10 <pcapng_create@@Base+0x164>
    aa8c:	ldr	r0, [r4]
    aa90:	add	r2, sl, #4
    aa94:	mov	r1, r8
    aa98:	bl	4830 <write@plt>
    aa9c:	movw	r1, #65532	; 0xfffc
    aaa0:	mov	r5, r0
    aaa4:	add	r0, sl, #3
    aaa8:	movt	r1, #1
    aaac:	and	r9, r0, r1
    aab0:	subs	r0, r9, sl
    aab4:	cmnne	r5, #1
    aab8:	beq	aae8 <pcapng_create@@Base+0x13c>
    aabc:	sub	r0, sl, r9
    aac0:	add	r6, r0, #1
    aac4:	ldr	r0, [r4]
    aac8:	mov	r1, r7
    aacc:	mov	r2, #1
    aad0:	bl	4830 <write@plt>
    aad4:	cmp	r6, #0
    aad8:	mov	r5, r0
    aadc:	addne	r6, r6, #1
    aae0:	cmnne	r5, #1
    aae4:	bne	aac4 <pcapng_create@@Base+0x118>
    aae8:	ldr	r1, [r4, #8]
    aaec:	add	r0, r9, #4
    aaf0:	cmn	r5, #1
    aaf4:	add	r1, r1, r0
    aaf8:	str	r1, [r4, #8]
    aafc:	beq	add4 <pcapng_create@@Base+0x428>
    ab00:	add	r8, r8, r0
    ab04:	ldrh	r0, [r8]
    ab08:	cmp	r0, #0
    ab0c:	bne	aa80 <pcapng_create@@Base+0xd4>
    ab10:	ldr	r0, [r4, #8]
    ab14:	ldr	sl, [sp, #12]
    ab18:	ldr	r7, [sp, #8]
    ab1c:	mov	r9, #6
    ab20:	str	r0, [r4, #12]
    ab24:	add	r1, r7, sl
    ab28:	add	r1, r1, r0
    ab2c:	add	r1, r1, #3
    ab30:	udiv	r1, r1, sl
    ab34:	mul	r1, r1, sl
    ab38:	subs	r7, r1, r0
    ab3c:	str	r1, [r4, #8]
    ab40:	cmnne	r5, #1
    ab44:	beq	ab74 <pcapng_create@@Base+0x1c8>
    ab48:	ldr	r6, [pc, #700]	; ae0c <pcapng_create@@Base+0x460>
    ab4c:	add	r6, pc, r6
    ab50:	ldr	r0, [r4]
    ab54:	mov	r1, r6
    ab58:	mov	r2, #1
    ab5c:	bl	4830 <write@plt>
    ab60:	mov	r5, r0
    ab64:	subs	r7, r7, #1
    ab68:	cmnne	r5, #1
    ab6c:	bne	ab50 <pcapng_create@@Base+0x1a4>
    ab70:	ldr	r1, [r4, #8]
    ab74:	ldr	r0, [r4]
    ab78:	mov	r2, #0
    ab7c:	mov	r3, #1
    ab80:	stm	sp, {r0, r2}
    ab84:	mov	r0, #0
    ab88:	mov	r2, #3
    ab8c:	bl	477c <mmap@plt>
    ab90:	cmn	r5, #1
    ab94:	str	r0, [r4, #4]
    ab98:	beq	ade8 <pcapng_create@@Base+0x43c>
    ab9c:	cmn	r0, #1
    aba0:	beq	ac08 <pcapng_create@@Base+0x25c>
    aba4:	ldr	r0, [fp, #12]
    aba8:	ldr	r1, [fp, #8]
    abac:	mov	r2, #16
    abb0:	str	r0, [sp, #28]
    abb4:	mov	r0, #0
    abb8:	strh	r0, [sp, #26]
    abbc:	strh	r1, [sp, #24]
    abc0:	str	r0, [sp, #20]
    abc4:	mov	r0, #1
    abc8:	add	r1, sp, #16
    abcc:	str	r0, [sp, #16]
    abd0:	mov	r0, #16
    abd4:	str	r0, [r4, #20]
    abd8:	ldr	r0, [r4]
    abdc:	bl	4830 <write@plt>
    abe0:	cmn	r0, #1
    abe4:	mov	r5, r0
    abe8:	ldrne	r6, [fp, #16]
    abec:	cmpne	r6, #0
    abf0:	bne	ac10 <pcapng_create@@Base+0x264>
    abf4:	ldr	r0, [r4, #20]
    abf8:	cmn	r5, #1
    abfc:	str	r0, [r4, #24]
    ac00:	bne	acc8 <pcapng_create@@Base+0x31c>
    ac04:	b	ade8 <pcapng_create@@Base+0x43c>
    ac08:	mov	r9, #7
    ac0c:	b	ade8 <pcapng_create@@Base+0x43c>
    ac10:	ldrh	r0, [r6]
    ac14:	str	sl, [sp, #12]
    ac18:	cmp	r0, #0
    ac1c:	beq	acb8 <pcapng_create@@Base+0x30c>
    ac20:	ldr	sl, [pc, #488]	; ae10 <pcapng_create@@Base+0x464>
    ac24:	movw	r8, #65532	; 0xfffc
    ac28:	movt	r8, #1
    ac2c:	add	sl, pc, sl
    ac30:	ldrh	r7, [r6, #2]
    ac34:	cmp	r7, #0
    ac38:	beq	acb8 <pcapng_create@@Base+0x30c>
    ac3c:	ldr	r0, [r4]
    ac40:	add	r2, r7, #4
    ac44:	mov	r1, r6
    ac48:	bl	4830 <write@plt>
    ac4c:	mov	r5, r0
    ac50:	add	r0, r7, #3
    ac54:	and	r9, r0, r8
    ac58:	subs	r0, r9, r7
    ac5c:	cmnne	r5, #1
    ac60:	beq	ac90 <pcapng_create@@Base+0x2e4>
    ac64:	sub	r0, r7, r9
    ac68:	add	r7, r0, #1
    ac6c:	ldr	r0, [r4]
    ac70:	mov	r1, sl
    ac74:	mov	r2, #1
    ac78:	bl	4830 <write@plt>
    ac7c:	cmp	r7, #0
    ac80:	mov	r5, r0
    ac84:	addne	r7, r7, #1
    ac88:	cmnne	r5, #1
    ac8c:	bne	ac6c <pcapng_create@@Base+0x2c0>
    ac90:	ldr	r1, [r4, #20]
    ac94:	add	r0, r9, #4
    ac98:	cmn	r5, #1
    ac9c:	add	r1, r1, r0
    aca0:	str	r1, [r4, #20]
    aca4:	beq	addc <pcapng_create@@Base+0x430>
    aca8:	add	r6, r6, r0
    acac:	ldrh	r0, [r6]
    acb0:	cmp	r0, #0
    acb4:	bne	ac30 <pcapng_create@@Base+0x284>
    acb8:	ldr	r0, [r4, #20]
    acbc:	ldr	sl, [sp, #12]
    acc0:	mov	r9, #6
    acc4:	str	r0, [r4, #24]
    acc8:	ldr	r1, [fp, #20]
    accc:	add	r1, r1, sl
    acd0:	add	r1, r1, r0
    acd4:	add	r1, r1, #3
    acd8:	udiv	r1, r1, sl
    acdc:	mul	r1, r1, sl
    ace0:	subs	r7, r1, r0
    ace4:	str	r1, [r4, #20]
    ace8:	beq	ad18 <pcapng_create@@Base+0x36c>
    acec:	ldr	r6, [pc, #288]	; ae14 <pcapng_create@@Base+0x468>
    acf0:	add	r6, pc, r6
    acf4:	ldr	r0, [r4]
    acf8:	mov	r1, r6
    acfc:	mov	r2, #1
    ad00:	bl	4830 <write@plt>
    ad04:	mov	r5, r0
    ad08:	subs	r7, r7, #1
    ad0c:	cmnne	r5, #1
    ad10:	bne	acf4 <pcapng_create@@Base+0x348>
    ad14:	ldr	r1, [r4, #20]
    ad18:	ldr	r0, [r4]
    ad1c:	ldr	r2, [r4, #8]
    ad20:	mov	r3, #1
    ad24:	stm	sp, {r0, r2}
    ad28:	mov	r0, #0
    ad2c:	mov	r2, #3
    ad30:	bl	477c <mmap@plt>
    ad34:	cmn	r5, #1
    ad38:	str	r0, [r4, #16]
    ad3c:	beq	ade8 <pcapng_create@@Base+0x43c>
    ad40:	cmn	r0, #1
    ad44:	mov	r9, #7
    ad48:	beq	ade8 <pcapng_create@@Base+0x43c>
    ad4c:	ldmib	r4, {r0, r1, r2}
    ad50:	ldr	r3, [pc, #192]	; ae18 <pcapng_create@@Base+0x46c>
    ad54:	sub	r1, r1, r2
    ad58:	mov	r9, #0
    ad5c:	sub	r1, r1, #12
    ad60:	add	r3, pc, r3
    ad64:	strh	r1, [r3, #2]
    ad68:	ldr	r1, [pc, #172]	; ae1c <pcapng_create@@Base+0x470>
    ad6c:	ldr	r1, [pc, r1]
    ad70:	str	r1, [r0, r2]
    ad74:	ldmib	r4, {r0, r1}
    ad78:	bic	r2, r1, #3
    ad7c:	str	r1, [r0, #4]
    ad80:	add	r0, r2, r0
    ad84:	add	r2, r4, #16
    ad88:	str	r1, [r0, #-4]
    ad8c:	ldm	r2, {r0, r1, r2}
    ad90:	sub	r1, r1, r2
    ad94:	sub	r1, r1, #12
    ad98:	strh	r1, [r3, #2]
    ad9c:	ldr	r1, [pc, #124]	; ae20 <pcapng_create@@Base+0x474>
    ada0:	ldr	r1, [pc, r1]
    ada4:	str	r1, [r0, r2]
    ada8:	ldr	r1, [r4, #20]
    adac:	ldr	r0, [r4, #16]
    adb0:	bic	r2, r1, #3
    adb4:	str	r1, [r0, #4]
    adb8:	add	r0, r2, r0
    adbc:	str	r1, [r0, #-4]
    adc0:	ldr	r0, [r4, #4]
    adc4:	ldr	r1, [r4, #20]
    adc8:	str	r9, [r0, #20]
    adcc:	str	r1, [r0, #16]
    add0:	b	adf0 <pcapng_create@@Base+0x444>
    add4:	str	r1, [r4, #12]
    add8:	b	ade4 <pcapng_create@@Base+0x438>
    addc:	ldr	r0, [r4, #20]
    ade0:	str	r0, [r4, #24]
    ade4:	mov	r9, #6
    ade8:	mov	r0, r4
    adec:	bl	48b4 <pcapng_close@plt>
    adf0:	mov	r0, r9
    adf4:	sub	sp, fp, #48	; 0x30
    adf8:	vpop	{d8-d9}
    adfc:	add	sp, sp, #4
    ae00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae04:	andeq	r9, r0, ip, lsr #1
    ae08:	andeq	r9, r0, ip, asr r0
    ae0c:	andeq	r8, r0, ip, lsl #31
    ae10:	andeq	r8, r0, ip, lsr #29
    ae14:	andeq	r8, r0, r8, ror #27
    ae18:	andeq	sl, r1, r0, lsl #8
    ae1c:	strdeq	sl, [r1], -r4
    ae20:	andeq	sl, r1, r0, asr #7

0000ae24 <pcapng_close@@Base>:
    ae24:	push	{r4, sl, fp, lr}
    ae28:	add	fp, sp, #8
    ae2c:	mov	r4, r0
    ae30:	ldr	r0, [r0, #16]
    ae34:	add	r1, r0, #1
    ae38:	cmp	r1, #2
    ae3c:	bcc	ae48 <pcapng_close@@Base+0x24>
    ae40:	ldr	r1, [r4, #20]
    ae44:	bl	486c <munmap@plt>
    ae48:	ldr	r0, [r4, #4]
    ae4c:	add	r1, r0, #1
    ae50:	cmp	r1, #2
    ae54:	bcc	ae60 <pcapng_close@@Base+0x3c>
    ae58:	ldr	r1, [r4, #8]
    ae5c:	bl	486c <munmap@plt>
    ae60:	ldr	r0, [r4]
    ae64:	cmn	r0, #1
    ae68:	beq	ae70 <pcapng_close@@Base+0x4c>
    ae6c:	bl	48e4 <close@plt>
    ae70:	mov	r0, #0
    ae74:	pop	{r4, sl, fp, pc}

0000ae78 <pcapng_append_section_option@@Base>:
    ae78:	push	{r4, r5, fp, lr}
    ae7c:	add	fp, sp, #8
    ae80:	mov	r4, r0
    ae84:	mov	r0, #1
    ae88:	cmp	r4, #0
    ae8c:	beq	aec0 <pcapng_append_section_option@@Base+0x48>
    ae90:	ldr	r2, [r4]
    ae94:	cmn	r2, #1
    ae98:	beq	aec0 <pcapng_append_section_option@@Base+0x48>
    ae9c:	ldr	r2, [r4, #4]
    aea0:	mov	r0, #5
    aea4:	add	r3, r2, #1
    aea8:	cmp	r3, #2
    aeac:	popcc	{r4, r5, fp, pc}
    aeb0:	cmp	r1, #0
    aeb4:	ldrne	r3, [r4, #12]
    aeb8:	cmpne	r3, #0
    aebc:	bne	aec4 <pcapng_append_section_option@@Base+0x4c>
    aec0:	pop	{r4, r5, fp, pc}
    aec4:	ldrh	r5, [r1, #2]
    aec8:	add	r0, r2, r3
    aecc:	add	r2, r5, #4
    aed0:	bl	45fc <memcpy@plt>
    aed4:	add	r3, r5, #7
    aed8:	ldmib	r4, {r0, r1, r2}
    aedc:	bic	r3, r3, #3
    aee0:	add	r2, r3, r2
    aee4:	str	r2, [r4, #12]
    aee8:	sub	r1, r1, r2
    aeec:	ldr	r3, [pc, #28]	; af10 <pcapng_append_section_option@@Base+0x98>
    aef0:	sub	r1, r1, #12
    aef4:	add	r3, pc, r3
    aef8:	strh	r1, [r3, #2]
    aefc:	ldr	r1, [pc, #16]	; af14 <pcapng_append_section_option@@Base+0x9c>
    af00:	ldr	r1, [pc, r1]
    af04:	str	r1, [r0, r2]
    af08:	mov	r0, #0
    af0c:	pop	{r4, r5, fp, pc}
    af10:	andeq	sl, r1, ip, ror #4
    af14:	andeq	sl, r1, r0, ror #4

0000af18 <pcapng_append_interface_option@@Base>:
    af18:	push	{r4, r5, fp, lr}
    af1c:	add	fp, sp, #8
    af20:	mov	r4, r0
    af24:	mov	r0, #1
    af28:	cmp	r4, #0
    af2c:	beq	af60 <pcapng_append_interface_option@@Base+0x48>
    af30:	ldr	r2, [r4]
    af34:	cmn	r2, #1
    af38:	beq	af60 <pcapng_append_interface_option@@Base+0x48>
    af3c:	ldr	r2, [r4, #16]
    af40:	mov	r0, #5
    af44:	add	r3, r2, #1
    af48:	cmp	r3, #2
    af4c:	popcc	{r4, r5, fp, pc}
    af50:	cmp	r1, #0
    af54:	ldrne	r3, [r4, #24]
    af58:	cmpne	r3, #0
    af5c:	bne	af64 <pcapng_append_interface_option@@Base+0x4c>
    af60:	pop	{r4, r5, fp, pc}
    af64:	ldrh	r5, [r1, #2]
    af68:	add	r0, r2, r3
    af6c:	add	r2, r5, #4
    af70:	bl	45fc <memcpy@plt>
    af74:	add	r3, r5, #7
    af78:	add	r2, r4, #16
    af7c:	bic	r3, r3, #3
    af80:	ldm	r2, {r0, r1, r2}
    af84:	add	r2, r3, r2
    af88:	str	r2, [r4, #24]
    af8c:	sub	r1, r1, r2
    af90:	ldr	r3, [pc, #28]	; afb4 <pcapng_append_interface_option@@Base+0x9c>
    af94:	sub	r1, r1, #12
    af98:	add	r3, pc, r3
    af9c:	strh	r1, [r3, #2]
    afa0:	ldr	r1, [pc, #16]	; afb8 <pcapng_append_interface_option@@Base+0xa0>
    afa4:	ldr	r1, [pc, r1]
    afa8:	str	r1, [r0, r2]
    afac:	mov	r0, #0
    afb0:	pop	{r4, r5, fp, pc}
    afb4:	andeq	sl, r1, r8, asr #3
    afb8:			; <UNDEFINED> instruction: 0x0001a1bc

0000afbc <pcapng_append_packet@@Base>:
    afbc:	push	{r4, r5, fp, lr}
    afc0:	add	fp, sp, #8
    afc4:	mov	r4, r0
    afc8:	mov	r0, #1
    afcc:	cmp	r4, #0
    afd0:	beq	b01c <pcapng_append_packet@@Base+0x60>
    afd4:	ldr	r2, [r4]
    afd8:	cmn	r2, #1
    afdc:	beq	b01c <pcapng_append_packet@@Base+0x60>
    afe0:	ldr	r5, [r1, #4]
    afe4:	mov	r0, r2
    afe8:	mov	r2, r5
    afec:	bl	4830 <write@plt>
    aff0:	mov	r1, r0
    aff4:	mov	r0, #0
    aff8:	cmn	r1, #1
    affc:	beq	b01c <pcapng_append_packet@@Base+0x60>
    b000:	ldr	r1, [r4, #4]
    b004:	ldr	r2, [r1, #16]
    b008:	ldr	r3, [r1, #20]
    b00c:	adds	r2, r2, r5
    b010:	str	r2, [r1, #16]
    b014:	adc	r2, r3, #0
    b018:	str	r2, [r1, #20]
    b01c:	pop	{r4, r5, fp, pc}

0000b020 <btbb_pcapng_create_file@@Base>:
    b020:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b024:	add	fp, sp, #24
    b028:	sub	sp, sp, #280	; 0x118
    b02c:	mov	r6, r0
    b030:	mov	r0, #28
    b034:	mov	r8, r2
    b038:	mov	r5, r1
    b03c:	bl	46ec <malloc@plt>
    b040:	cmp	r0, #0
    b044:	beq	b104 <btbb_pcapng_create_file@@Base+0xe4>
    b048:	add	r9, sp, #16
    b04c:	mov	r4, r0
    b050:	mov	r1, #0
    b054:	movw	r2, #258	; 0x102
    b058:	mov	r7, #0
    b05c:	orr	r0, r9, #2
    b060:	bl	47e8 <memset@plt>
    b064:	mov	r0, #3
    b068:	cmp	r5, #0
    b06c:	strh	r0, [sp, #16]
    b070:	beq	b098 <btbb_pcapng_create_file@@Base+0x78>
    b074:	add	r0, r9, #4
    b078:	mov	r1, r5
    b07c:	mov	r2, #256	; 0x100
    b080:	bl	4800 <strncpy@plt>
    b084:	mov	r1, #0
    b088:	strb	r1, [sp, #275]	; 0x113
    b08c:	bl	4764 <strlen@plt>
    b090:	mov	r7, r9
    b094:	strh	r0, [sp, #18]
    b098:	bl	47ac <getpagesize@plt>
    b09c:	mov	r3, r0
    b0a0:	mov	r1, #255	; 0xff
    b0a4:	mov	r0, #400	; 0x190
    b0a8:	str	r1, [sp]
    b0ac:	stmib	sp, {r0, r7}
    b0b0:	str	r3, [sp, #12]
    b0b4:	mov	r0, r4
    b0b8:	mov	r1, r6
    b0bc:	ldr	r2, [pc, #88]	; b11c <btbb_pcapng_create_file@@Base+0xfc>
    b0c0:	ldr	r2, [pc, r2]
    b0c4:	bl	4650 <pcapng_create@plt>
    b0c8:	mov	r5, r0
    b0cc:	cmp	r0, #0
    b0d0:	bne	b0f4 <btbb_pcapng_create_file@@Base+0xd4>
    b0d4:	mov	r0, r4
    b0d8:	mov	r1, r7
    b0dc:	bl	b6b8 <lell_pcapng_close@@Base+0x28>
    b0e0:	cmp	r0, #0
    b0e4:	beq	b10c <btbb_pcapng_create_file@@Base+0xec>
    b0e8:	mov	r5, r0
    b0ec:	mov	r0, r4
    b0f0:	bl	48b4 <pcapng_close@plt>
    b0f4:	mov	r0, r4
    b0f8:	bl	45d8 <free@plt>
    b0fc:	rsb	r0, r5, #0
    b100:	b	b114 <btbb_pcapng_create_file@@Base+0xf4>
    b104:	mvn	r0, #4
    b108:	b	b114 <btbb_pcapng_create_file@@Base+0xf4>
    b10c:	str	r4, [r8]
    b110:	mov	r0, #0
    b114:	sub	sp, fp, #24
    b118:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b11c:	muleq	r1, r4, r0

0000b120 <btbb_pcapng_append_packet@@Base>:
    b120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b124:	add	fp, sp, #28
    b128:	sub	sp, sp, #484	; 0x1e4
    b12c:	ldr	r8, [fp, #24]
    b130:	str	r0, [fp, #-488]	; 0xfffffe18
    b134:	sub	r4, fp, #436	; 0x1b4
    b138:	str	r3, [fp, #-492]	; 0xfffffe14
    b13c:	str	r2, [fp, #-496]	; 0xfffffe10
    b140:	mov	r0, r8
    b144:	bl	474c <btbb_packet_get_payload_length@plt>
    b148:	mov	r5, r0
    b14c:	add	r0, r0, #7
    b150:	bic	r0, r0, #7
    b154:	sub	r1, sp, r0
    b158:	mov	sp, r1
    b15c:	mov	r0, r8
    b160:	str	r1, [fp, #-508]	; 0xfffffe04
    b164:	bl	4584 <btbb_get_payload_packed@plt>
    b168:	mov	r0, r8
    b16c:	bl	4884 <btbb_packet_get_channel@plt>
    b170:	str	r0, [fp, #-500]	; 0xfffffe0c
    b174:	mov	r0, r8
    b178:	bl	45f0 <btbb_packet_get_ac_errors@plt>
    b17c:	str	r0, [fp, #-504]	; 0xfffffe08
    b180:	mov	r0, r8
    b184:	bl	47c4 <btbb_packet_get_transport@plt>
    b188:	mov	r9, r0
    b18c:	mov	r0, r8
    b190:	bl	45e4 <btbb_packet_get_modulation@plt>
    b194:	mov	sl, r0
    b198:	mov	r0, r8
    b19c:	bl	4818 <btbb_packet_get_lap@plt>
    b1a0:	mov	r7, r0
    b1a4:	mov	r0, r8
    b1a8:	bl	4788 <btbb_packet_get_header_packed@plt>
    b1ac:	str	r0, [fp, #-440]	; 0xfffffe48
    b1b0:	ldr	r0, [fp, #16]
    b1b4:	ldr	r2, [fp, #20]
    b1b8:	ldr	r3, [fp, #12]
    b1bc:	mvn	r6, #0
    b1c0:	mov	r8, #0
    b1c4:	bic	r1, r0, #-16777216	; 0xff000000
    b1c8:	orr	r1, r1, r2, lsl #24
    b1cc:	str	r1, [fp, #-444]	; 0xfffffe44
    b1d0:	ldr	r1, [fp, #8]
    b1d4:	str	r7, [fp, #-448]	; 0xfffffe40
    b1d8:	mov	r7, #3
    b1dc:	cmp	r3, r1
    b1e0:	movwlt	r7, #7
    b1e4:	subs	r0, r0, r6
    b1e8:	movwne	r0, #1
    b1ec:	subs	r2, r2, #255	; 0xff
    b1f0:	orr	r0, r7, r0, lsl #4
    b1f4:	movwne	r2, #1
    b1f8:	cmp	r5, #400	; 0x190
    b1fc:	movge	r5, #400	; 0x190
    b200:	orr	r7, r0, r2, lsl #7
    b204:	orr	r0, sl, r9, lsl #4
    b208:	mov	r9, r4
    b20c:	cmp	r5, #0
    b210:	strh	r7, [r4]
    b214:	strb	r0, [fp, #-452]	; 0xfffffe3c
    b218:	ldr	r0, [fp, #-504]	; 0xfffffe08
    b21c:	strh	r8, [r4, #-14]
    b220:	strb	r8, [fp, #-451]	; 0xfffffe3d
    b224:	add	r4, r5, #61	; 0x3d
    b228:	bic	r6, r4, #3
    b22c:	strb	r0, [fp, #-453]	; 0xfffffe3b
    b230:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    b234:	strb	r3, [fp, #-454]	; 0xfffffe3a
    b238:	strb	r1, [fp, #-455]	; 0xfffffe39
    b23c:	strb	r0, [fp, #-456]	; 0xfffffe38
    b240:	add	r0, r5, #22
    b244:	str	r0, [fp, #-460]	; 0xfffffe34
    b248:	str	r0, [fp, #-464]	; 0xfffffe30
    b24c:	ldr	r0, [fp, #-496]	; 0xfffffe10
    b250:	str	r0, [fp, #-468]	; 0xfffffe2c
    b254:	ldr	r0, [fp, #-492]	; 0xfffffe14
    b258:	str	r0, [fp, #-472]	; 0xfffffe28
    b25c:	mov	r0, #6
    b260:	str	r8, [fp, #-476]	; 0xfffffe24
    b264:	str	r6, [fp, #-480]	; 0xfffffe20
    b268:	str	r0, [fp, #-484]	; 0xfffffe1c
    b26c:	beq	b290 <btbb_pcapng_append_packet@@Base+0x170>
    b270:	cmp	r5, #400	; 0x190
    b274:	bhi	b2bc <btbb_pcapng_append_packet@@Base+0x19c>
    b278:	ldr	r1, [fp, #-508]	; 0xfffffe04
    b27c:	sub	r0, fp, #484	; 0x1e4
    b280:	mov	r2, r5
    b284:	add	r0, r0, #50	; 0x32
    b288:	bl	45fc <memcpy@plt>
    b28c:	orr	r7, r7, #32
    b290:	lsr	r0, r4, #2
    b294:	sub	r1, fp, #484	; 0x1e4
    b298:	strh	r7, [r9]
    b29c:	add	r0, r1, r0, lsl #2
    b2a0:	str	r8, [r0, #-8]
    b2a4:	str	r6, [r0, #-4]
    b2a8:	ldr	r0, [fp, #-488]	; 0xfffffe18
    b2ac:	bl	47b8 <pcapng_append_packet@plt>
    b2b0:	rsb	r0, r0, #0
    b2b4:	sub	sp, fp, #28
    b2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2bc:	ldr	r0, [pc, #24]	; b2dc <btbb_pcapng_append_packet@@Base+0x1bc>
    b2c0:	ldr	r1, [pc, #24]	; b2e0 <btbb_pcapng_append_packet@@Base+0x1c0>
    b2c4:	ldr	r3, [pc, #24]	; b2e4 <btbb_pcapng_append_packet@@Base+0x1c4>
    b2c8:	mov	r2, #221	; 0xdd
    b2cc:	add	r0, pc, r0
    b2d0:	add	r1, pc, r1
    b2d4:	add	r3, pc, r3
    b2d8:	bl	48f0 <__assert_fail@plt>
    b2dc:	andeq	r8, r0, r5, lsr #16
    b2e0:	andeq	r8, r0, r6, asr r8
    b2e4:	muleq	r0, pc, r8	; <UNPREDICTABLE>

0000b2e8 <btbb_pcapng_record_bdaddr@@Base>:
    b2e8:	push	{fp, lr}
    b2ec:	mov	fp, sp
    b2f0:	sub	sp, sp, #16
    b2f4:	movw	r1, #54080	; 0xd340
    b2f8:	strb	r3, [sp, #12]
    b2fc:	strb	r2, [sp, #8]
    b300:	movt	r1, #12
    b304:	str	r1, [sp, #4]
    b308:	lsr	r1, r3, #8
    b30c:	strb	r1, [sp, #13]
    b310:	lsr	r1, r2, #24
    b314:	strb	r1, [sp, #11]
    b318:	lsr	r1, r2, #16
    b31c:	strb	r1, [sp, #10]
    b320:	lsr	r1, r2, #8
    b324:	strb	r1, [sp, #9]
    b328:	ldr	r1, [fp, #12]
    b32c:	strb	r1, [sp, #15]
    b330:	ldr	r1, [fp, #8]
    b334:	strb	r1, [sp, #14]
    b338:	add	r1, sp, #4
    b33c:	bl	45cc <pcapng_append_interface_option@plt>
    b340:	rsb	r0, r0, #0
    b344:	mov	sp, fp
    b348:	pop	{fp, pc}

0000b34c <btbb_pcapng_record_btclock@@Base>:
    b34c:	push	{fp, lr}
    b350:	mov	fp, sp
    b354:	sub	sp, sp, #24
    b358:	movw	r1, #54081	; 0xd341
    b35c:	str	r2, [sp, #12]
    b360:	movt	r1, #24
    b364:	str	r1, [sp]
    b368:	ldr	r1, [fp, #12]
    b36c:	str	r1, [sp, #8]
    b370:	ldr	r1, [fp, #8]
    b374:	str	r1, [sp, #4]
    b378:	ldr	r1, [fp, #20]
    b37c:	str	r1, [sp, #20]
    b380:	ldr	r1, [fp, #16]
    b384:	str	r1, [sp, #16]
    b388:	mov	r1, sp
    b38c:	bl	45cc <pcapng_append_interface_option@plt>
    b390:	rsb	r0, r0, #0
    b394:	mov	sp, fp
    b398:	pop	{fp, pc}

0000b39c <btbb_pcapng_close@@Base>:
    b39c:	push	{r4, sl, fp, lr}
    b3a0:	add	fp, sp, #8
    b3a4:	mov	r4, r0
    b3a8:	bl	48b4 <pcapng_close@plt>
    b3ac:	cmp	r4, #0
    b3b0:	beq	b3bc <btbb_pcapng_close@@Base+0x20>
    b3b4:	mov	r0, r4
    b3b8:	bl	45d8 <free@plt>
    b3bc:	mvn	r0, #0
    b3c0:	pop	{r4, sl, fp, pc}

0000b3c4 <lell_pcapng_create_file@@Base>:
    b3c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b3c8:	add	fp, sp, #24
    b3cc:	sub	sp, sp, #280	; 0x118
    b3d0:	mov	r6, r0
    b3d4:	mov	r0, #28
    b3d8:	mov	r8, r2
    b3dc:	mov	r5, r1
    b3e0:	bl	46ec <malloc@plt>
    b3e4:	cmp	r0, #0
    b3e8:	beq	b4a8 <lell_pcapng_create_file@@Base+0xe4>
    b3ec:	add	r9, sp, #16
    b3f0:	mov	r4, r0
    b3f4:	mov	r1, #0
    b3f8:	movw	r2, #258	; 0x102
    b3fc:	mov	r7, #0
    b400:	orr	r0, r9, #2
    b404:	bl	47e8 <memset@plt>
    b408:	mov	r0, #3
    b40c:	cmp	r5, #0
    b410:	strh	r0, [sp, #16]
    b414:	beq	b43c <lell_pcapng_create_file@@Base+0x78>
    b418:	add	r0, r9, #4
    b41c:	mov	r1, r5
    b420:	mov	r2, #256	; 0x100
    b424:	bl	4800 <strncpy@plt>
    b428:	mov	r1, #0
    b42c:	strb	r1, [sp, #275]	; 0x113
    b430:	bl	4764 <strlen@plt>
    b434:	mov	r7, r9
    b438:	strh	r0, [sp, #18]
    b43c:	bl	47ac <getpagesize@plt>
    b440:	mov	r3, r0
    b444:	mov	r1, #256	; 0x100
    b448:	mov	r0, #64	; 0x40
    b44c:	str	r1, [sp]
    b450:	stmib	sp, {r0, r7}
    b454:	str	r3, [sp, #12]
    b458:	mov	r0, r4
    b45c:	mov	r1, r6
    b460:	ldr	r2, [pc, #88]	; b4c0 <lell_pcapng_create_file@@Base+0xfc>
    b464:	ldr	r2, [pc, r2]
    b468:	bl	4650 <pcapng_create@plt>
    b46c:	mov	r5, r0
    b470:	cmp	r0, #0
    b474:	bne	b498 <lell_pcapng_create_file@@Base+0xd4>
    b478:	mov	r0, r4
    b47c:	mov	r1, r7
    b480:	bl	b6b8 <lell_pcapng_close@@Base+0x28>
    b484:	cmp	r0, #0
    b488:	beq	b4b0 <lell_pcapng_create_file@@Base+0xec>
    b48c:	mov	r5, r0
    b490:	mov	r0, r4
    b494:	bl	48b4 <pcapng_close@plt>
    b498:	mov	r0, r4
    b49c:	bl	45d8 <free@plt>
    b4a0:	rsb	r0, r5, #0
    b4a4:	b	b4b8 <lell_pcapng_create_file@@Base+0xf4>
    b4a8:	mvn	r0, #4
    b4ac:	b	b4b8 <lell_pcapng_create_file@@Base+0xf4>
    b4b0:	str	r4, [r8]
    b4b4:	mov	r0, #0
    b4b8:	sub	sp, fp, #24
    b4bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b4c0:	strdeq	r9, [r1], -r0

0000b4c4 <lell_pcapng_append_packet@@Base>:
    b4c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4c8:	add	fp, sp, #28
    b4cc:	sub	sp, sp, #372	; 0x174
    b4d0:	ldr	r5, [fp, #20]
    b4d4:	mov	r8, r0
    b4d8:	mov	r4, r3
    b4dc:	mov	r9, r2
    b4e0:	mov	r0, r5
    b4e4:	bl	45a8 <lell_packet_is_data@plt>
    b4e8:	ldr	r1, [r5, #72]	; 0x48
    b4ec:	add	r2, r1, #9
    b4f0:	cmp	r2, #256	; 0x100
    b4f4:	bcs	b618 <lell_pcapng_append_packet@@Base+0x154>
    b4f8:	ldr	ip, [fp, #16]
    b4fc:	ldr	lr, [fp, #12]
    b500:	ldr	sl, [fp, #8]
    b504:	add	r3, r1, #19
    b508:	add	r1, r1, #58	; 0x3a
    b50c:	clz	r0, r0
    b510:	ldrb	r7, [r5, #69]	; 0x45
    b514:	str	r9, [sp, #4]
    b518:	str	r4, [sp, #8]
    b51c:	bic	r6, r1, #3
    b520:	lsr	r1, r1, #2
    b524:	lsr	r0, r0, #5
    b528:	str	r1, [sp, #12]
    b52c:	ldr	r1, [r5, #92]	; 0x5c
    b530:	str	ip, [sp, #48]	; 0x30
    b534:	strb	lr, [sp, #46]	; 0x2e
    b538:	strb	sl, [sp, #45]	; 0x2d
    b53c:	str	r3, [sp, #40]	; 0x28
    b540:	str	r3, [sp, #36]	; 0x24
    b544:	str	r9, [sp, #32]
    b548:	mov	r9, #0
    b54c:	mov	r3, #6
    b550:	cmp	lr, sl
    b554:	str	r4, [sp, #28]
    b558:	add	r4, sp, #16
    b55c:	str	r9, [sp, #24]
    b560:	str	r6, [sp, #20]
    b564:	str	r3, [sp, #16]
    b568:	mov	r3, #35	; 0x23
    b56c:	movwlt	r3, #39	; 0x27
    b570:	orr	r0, r3, r0, lsl #4
    b574:	strh	r0, [sp, #52]	; 0x34
    b578:	strb	r1, [sp, #47]	; 0x2f
    b57c:	add	r0, r4, #38	; 0x26
    b580:	mov	r1, r5
    b584:	strb	r7, [sp, #44]	; 0x2c
    b588:	bl	45fc <memcpy@plt>
    b58c:	ldr	r0, [sp, #12]
    b590:	mov	r1, r4
    b594:	add	r0, r4, r0, lsl #2
    b598:	str	r9, [r0, #-8]
    b59c:	str	r6, [r0, #-4]
    b5a0:	mov	r0, r8
    b5a4:	bl	47b8 <pcapng_append_packet@plt>
    b5a8:	rsb	r4, r0, #0
    b5ac:	cmp	r0, #0
    b5b0:	bne	b60c <lell_pcapng_append_packet@@Base+0x148>
    b5b4:	mov	r0, r5
    b5b8:	bl	45a8 <lell_packet_is_data@plt>
    b5bc:	cmp	r0, #0
    b5c0:	bne	b60c <lell_pcapng_append_packet@@Base+0x148>
    b5c4:	ldrb	r0, [r5, #80]	; 0x50
    b5c8:	cmp	r0, #5
    b5cc:	bne	b60c <lell_pcapng_append_packet@@Base+0x148>
    b5d0:	ldr	r0, [sp, #4]
    b5d4:	sub	r6, fp, #80	; 0x50
    b5d8:	mov	r1, r5
    b5dc:	mov	r2, #34	; 0x22
    b5e0:	str	r0, [fp, #-76]	; 0xffffffb4
    b5e4:	movw	r0, #54144	; 0xd380
    b5e8:	movt	r0, #46	; 0x2e
    b5ec:	str	r0, [fp, #-80]	; 0xffffffb0
    b5f0:	ldr	r0, [sp, #8]
    b5f4:	str	r0, [fp, #-72]	; 0xffffffb8
    b5f8:	add	r0, r6, #12
    b5fc:	bl	45fc <memcpy@plt>
    b600:	mov	r0, r8
    b604:	mov	r1, r6
    b608:	bl	45cc <pcapng_append_interface_option@plt>
    b60c:	mov	r0, r4
    b610:	sub	sp, fp, #28
    b614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b618:	ldr	r0, [pc, #24]	; b638 <lell_pcapng_append_packet@@Base+0x174>
    b61c:	ldr	r1, [pc, #24]	; b63c <lell_pcapng_append_packet@@Base+0x178>
    b620:	ldr	r3, [pc, #24]	; b640 <lell_pcapng_append_packet@@Base+0x17c>
    b624:	movw	r2, #441	; 0x1b9
    b628:	add	r0, pc, r0
    b62c:	add	r1, pc, r1
    b630:	add	r3, pc, r3
    b634:	bl	48f0 <__assert_fail@plt>
    b638:	andeq	r8, r0, r7, lsl #13
    b63c:	strdeq	r8, [r0], -sl
    b640:	muleq	r0, r8, r6

0000b644 <lell_pcapng_record_connect_req@@Base>:
    b644:	push	{r4, r5, fp, lr}
    b648:	add	fp, sp, #8
    b64c:	sub	sp, sp, #48	; 0x30
    b650:	mov	r4, r0
    b654:	movw	r0, #54144	; 0xd380
    b658:	ldr	r1, [fp, #8]
    b65c:	mov	r5, sp
    b660:	stmib	sp, {r2, r3}
    b664:	mov	r2, #34	; 0x22
    b668:	movt	r0, #46	; 0x2e
    b66c:	str	r0, [sp]
    b670:	add	r0, r5, #12
    b674:	bl	45fc <memcpy@plt>
    b678:	mov	r0, r4
    b67c:	mov	r1, r5
    b680:	bl	45cc <pcapng_append_interface_option@plt>
    b684:	rsb	r0, r0, #0
    b688:	sub	sp, fp, #8
    b68c:	pop	{r4, r5, fp, pc}

0000b690 <lell_pcapng_close@@Base>:
    b690:	push	{r4, sl, fp, lr}
    b694:	add	fp, sp, #8
    b698:	mov	r4, r0
    b69c:	bl	48b4 <pcapng_close@plt>
    b6a0:	cmp	r4, #0
    b6a4:	beq	b6b0 <lell_pcapng_close@@Base+0x20>
    b6a8:	mov	r0, r4
    b6ac:	bl	45d8 <free@plt>
    b6b0:	mvn	r0, #0
    b6b4:	pop	{r4, sl, fp, pc}
    b6b8:	push	{fp, lr}
    b6bc:	mov	fp, sp
    b6c0:	sub	sp, sp, #8
    b6c4:	cmp	r1, #0
    b6c8:	beq	b700 <lell_pcapng_close@@Base+0x70>
    b6cc:	ldrh	r2, [r1]
    b6d0:	b	b6f0 <lell_pcapng_close@@Base+0x60>
    b6d4:	uxth	r2, r2
    b6d8:	cmp	r2, #9
    b6dc:	beq	b72c <lell_pcapng_close@@Base+0x9c>
    b6e0:	add	r2, r3, #3
    b6e4:	bic	r2, r2, #3
    b6e8:	add	r1, r2, r1
    b6ec:	ldrh	r2, [r1, #4]!
    b6f0:	cmp	r2, #0
    b6f4:	ldrhne	r3, [r1, #2]
    b6f8:	cmpne	r3, #0
    b6fc:	bne	b6d4 <lell_pcapng_close@@Base+0x44>
    b700:	ldr	r1, [pc, #44]	; b734 <lell_pcapng_close@@Base+0xa4>
    b704:	ldr	r1, [pc, r1]
    b708:	str	r1, [sp]
    b70c:	ldr	r1, [pc, #36]	; b738 <lell_pcapng_close@@Base+0xa8>
    b710:	add	r1, pc, r1
    b714:	ldrb	r1, [r1, #4]
    b718:	strb	r1, [sp, #4]
    b71c:	mov	r1, sp
    b720:	bl	45cc <pcapng_append_interface_option@plt>
    b724:	mov	sp, fp
    b728:	pop	{fp, pc}
    b72c:	mov	r0, #0
    b730:	b	b724 <lell_pcapng_close@@Base+0x94>
    b734:	andeq	r8, r0, r8, ror #7
    b738:	ldrdeq	r8, [r0], -ip
    b73c:	cmp	r3, #0
    b740:	cmpeq	r2, #0
    b744:	bne	b75c <lell_pcapng_close@@Base+0xcc>
    b748:	cmp	r1, #0
    b74c:	cmpeq	r0, #0
    b750:	mvnne	r1, #0
    b754:	mvnne	r0, #0
    b758:	b	b778 <lell_pcapng_close@@Base+0xe8>
    b75c:	sub	sp, sp, #8
    b760:	push	{sp, lr}
    b764:	bl	b788 <lell_pcapng_close@@Base+0xf8>
    b768:	ldr	lr, [sp, #4]
    b76c:	add	sp, sp, #8
    b770:	pop	{r2, r3}
    b774:	bx	lr
    b778:	push	{r1, lr}
    b77c:	mov	r0, #8
    b780:	bl	4560 <raise@plt>
    b784:	pop	{r1, pc}
    b788:	cmp	r1, r3
    b78c:	cmpeq	r0, r2
    b790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b794:	mov	r4, r0
    b798:	movcc	r0, #0
    b79c:	mov	r5, r1
    b7a0:	ldr	lr, [sp, #36]	; 0x24
    b7a4:	movcc	r1, r0
    b7a8:	bcc	b8a4 <lell_pcapng_close@@Base+0x214>
    b7ac:	cmp	r3, #0
    b7b0:	clzeq	ip, r2
    b7b4:	clzne	ip, r3
    b7b8:	addeq	ip, ip, #32
    b7bc:	cmp	r5, #0
    b7c0:	clzeq	r1, r4
    b7c4:	addeq	r1, r1, #32
    b7c8:	clzne	r1, r5
    b7cc:	sub	ip, ip, r1
    b7d0:	sub	sl, ip, #32
    b7d4:	lsl	r9, r3, ip
    b7d8:	rsb	fp, ip, #32
    b7dc:	orr	r9, r9, r2, lsl sl
    b7e0:	orr	r9, r9, r2, lsr fp
    b7e4:	lsl	r8, r2, ip
    b7e8:	cmp	r5, r9
    b7ec:	cmpeq	r4, r8
    b7f0:	movcc	r0, #0
    b7f4:	movcc	r1, r0
    b7f8:	bcc	b814 <lell_pcapng_close@@Base+0x184>
    b7fc:	mov	r0, #1
    b800:	subs	r4, r4, r8
    b804:	lsl	r1, r0, sl
    b808:	orr	r1, r1, r0, lsr fp
    b80c:	lsl	r0, r0, ip
    b810:	sbc	r5, r5, r9
    b814:	cmp	ip, #0
    b818:	beq	b8a4 <lell_pcapng_close@@Base+0x214>
    b81c:	lsr	r6, r8, #1
    b820:	orr	r6, r6, r9, lsl #31
    b824:	lsr	r7, r9, #1
    b828:	mov	r2, ip
    b82c:	b	b850 <lell_pcapng_close@@Base+0x1c0>
    b830:	subs	r3, r4, r6
    b834:	sbc	r8, r5, r7
    b838:	adds	r3, r3, r3
    b83c:	adc	r8, r8, r8
    b840:	adds	r4, r3, #1
    b844:	adc	r5, r8, #0
    b848:	subs	r2, r2, #1
    b84c:	beq	b86c <lell_pcapng_close@@Base+0x1dc>
    b850:	cmp	r5, r7
    b854:	cmpeq	r4, r6
    b858:	bcs	b830 <lell_pcapng_close@@Base+0x1a0>
    b85c:	adds	r4, r4, r4
    b860:	adc	r5, r5, r5
    b864:	subs	r2, r2, #1
    b868:	bne	b850 <lell_pcapng_close@@Base+0x1c0>
    b86c:	lsr	r3, r4, ip
    b870:	orr	r3, r3, r5, lsl fp
    b874:	lsr	r2, r5, ip
    b878:	orr	r3, r3, r5, lsr sl
    b87c:	adds	r0, r0, r4
    b880:	mov	r4, r3
    b884:	lsl	r3, r2, ip
    b888:	orr	r3, r3, r4, lsl sl
    b88c:	lsl	ip, r4, ip
    b890:	orr	r3, r3, r4, lsr fp
    b894:	adc	r1, r1, r5
    b898:	subs	r0, r0, ip
    b89c:	mov	r5, r2
    b8a0:	sbc	r1, r1, r3
    b8a4:	cmp	lr, #0
    b8a8:	strdne	r4, [lr]
    b8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .fini:

0000b8b0 <.fini>:
    b8b0:	push	{r3, lr}
    b8b4:	pop	{r3, pc}
