
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e1c <.init>:
   10e1c:	push	{r3, lr}
   10e20:	bl	11100 <__assert_fail@plt+0x48>
   10e24:	pop	{r3, pc}

Disassembly of section .plt:

00010e28 <calloc@plt-0x14>:
   10e28:	push	{lr}		; (str lr, [sp, #-4]!)
   10e2c:	ldr	lr, [pc, #4]	; 10e38 <calloc@plt-0x4>
   10e30:	add	lr, pc, lr
   10e34:	ldr	pc, [lr, #8]!
   10e38:	andeq	r8, r1, r8, asr #3

00010e3c <calloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #456]!	; 0x1c8

00010e48 <fputs_unlocked@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #448]!	; 0x1c0

00010e54 <raise@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #440]!	; 0x1b8

00010e60 <strcmp@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #432]!	; 0x1b0

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #424]!	; 0x1a8

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #416]!	; 0x1a0

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #408]!	; 0x198

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #400]!	; 0x190

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #392]!	; 0x188

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #384]!	; 0x180

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #376]!	; 0x178

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #368]!	; 0x170

00010ecc <memcmp@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #360]!	; 0x168

00010ed8 <dcgettext@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #352]!	; 0x160

00010ee4 <realloc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #344]!	; 0x158

00010ef0 <textdomain@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #336]!	; 0x150

00010efc <rawmemchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #328]!	; 0x148

00010f08 <iswprint@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #320]!	; 0x140

00010f14 <__fxstat64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #312]!	; 0x138

00010f20 <fwrite@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #304]!	; 0x130

00010f2c <lseek64@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #296]!	; 0x128

00010f38 <__ctype_get_mb_cur_max@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #288]!	; 0x120

00010f44 <__fpending@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #280]!	; 0x118

00010f50 <mbrtowc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #272]!	; 0x110

00010f5c <error@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #264]!	; 0x108

00010f68 <open64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #256]!	; 0x100

00010f74 <malloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #248]!	; 0xf8

00010f80 <__libc_start_main@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #240]!	; 0xf0

00010f8c <__freading@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #232]!	; 0xe8

00010f98 <__gmon_start__@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #224]!	; 0xe0

00010fa4 <getopt_long@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #216]!	; 0xd8

00010fb0 <__ctype_b_loc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #208]!	; 0xd0

00010fbc <exit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #200]!	; 0xc8

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #192]!	; 0xc0

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #184]!	; 0xb8

00010fe0 <memrchr@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #176]!	; 0xb0

00010fec <__errno_location@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #168]!	; 0xa8

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #160]!	; 0xa0

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #152]!	; 0x98

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #144]!	; 0x90

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #136]!	; 0x88

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #128]!	; 0x80

00011034 <memchr@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #120]!	; 0x78

00011040 <fclose@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #112]!	; 0x70

0001104c <fseeko64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #104]!	; 0x68

00011058 <setlocale@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #96]!	; 0x60

00011064 <strrchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #88]!	; 0x58

00011070 <nl_langinfo@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #80]!	; 0x50

0001107c <clearerr_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #72]!	; 0x48

00011088 <bindtextdomain@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #64]!	; 0x40

00011094 <strncmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #56]!	; 0x38

000110a0 <abort@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #48]!	; 0x30

000110ac <close@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #40]!	; 0x28

000110b8 <__assert_fail@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110c4 <.text>:
   110c4:	mov	fp, #0
   110c8:	mov	lr, #0
   110cc:	pop	{r1}		; (ldr r1, [sp], #4)
   110d0:	mov	r2, sp
   110d4:	push	{r2}		; (str r2, [sp, #-4]!)
   110d8:	push	{r0}		; (str r0, [sp, #-4]!)
   110dc:	ldr	ip, [pc, #16]	; 110f4 <__assert_fail@plt+0x3c>
   110e0:	push	{ip}		; (str ip, [sp, #-4]!)
   110e4:	ldr	r0, [pc, #12]	; 110f8 <__assert_fail@plt+0x40>
   110e8:	ldr	r3, [pc, #12]	; 110fc <__assert_fail@plt+0x44>
   110ec:	bl	10f80 <__libc_start_main@plt>
   110f0:	bl	110a0 <abort@plt>
   110f4:			; <UNDEFINED> instruction: 0x00017bb0
   110f8:			; <UNDEFINED> instruction: 0x000114b0
   110fc:	andeq	r7, r1, r0, asr fp
   11100:	ldr	r3, [pc, #20]	; 1111c <__assert_fail@plt+0x64>
   11104:	ldr	r2, [pc, #20]	; 11120 <__assert_fail@plt+0x68>
   11108:	add	r3, pc, r3
   1110c:	ldr	r2, [r3, r2]
   11110:	cmp	r2, #0
   11114:	bxeq	lr
   11118:	b	10f98 <__gmon_start__@plt>
   1111c:	strdeq	r7, [r1], -r0
   11120:	andeq	r0, r0, r4, ror #1
   11124:	ldr	r0, [pc, #24]	; 11144 <__assert_fail@plt+0x8c>
   11128:	ldr	r3, [pc, #24]	; 11148 <__assert_fail@plt+0x90>
   1112c:	cmp	r3, r0
   11130:	bxeq	lr
   11134:	ldr	r3, [pc, #16]	; 1114c <__assert_fail@plt+0x94>
   11138:	cmp	r3, #0
   1113c:	bxeq	lr
   11140:	bx	r3
   11144:	andeq	r9, r2, r8, lsr r1
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r0, r0, r0
   11150:	ldr	r0, [pc, #36]	; 1117c <__assert_fail@plt+0xc4>
   11154:	ldr	r1, [pc, #36]	; 11180 <__assert_fail@plt+0xc8>
   11158:	sub	r1, r1, r0
   1115c:	asr	r1, r1, #2
   11160:	add	r1, r1, r1, lsr #31
   11164:	asrs	r1, r1, #1
   11168:	bxeq	lr
   1116c:	ldr	r3, [pc, #16]	; 11184 <__assert_fail@plt+0xcc>
   11170:	cmp	r3, #0
   11174:	bxeq	lr
   11178:	bx	r3
   1117c:	andeq	r9, r2, r8, lsr r1
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r0, r0, r0
   11188:	push	{r4, lr}
   1118c:	ldr	r4, [pc, #24]	; 111ac <__assert_fail@plt+0xf4>
   11190:	ldrb	r3, [r4]
   11194:	cmp	r3, #0
   11198:	popne	{r4, pc}
   1119c:	bl	11124 <__assert_fail@plt+0x6c>
   111a0:	mov	r3, #1
   111a4:	strb	r3, [r4]
   111a8:	pop	{r4, pc}
   111ac:	andeq	r9, r2, r4, asr r1
   111b0:	b	11150 <__assert_fail@plt+0x98>
   111b4:	push	{fp, lr}
   111b8:	mov	fp, sp
   111bc:	sub	sp, sp, #56	; 0x38
   111c0:	mov	r4, r0
   111c4:	cmp	r0, #0
   111c8:	bne	1146c <__assert_fail@plt+0x3b4>
   111cc:	movw	r1, #31747	; 0x7c03
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10ed8 <dcgettext@plt>
   111e0:	mov	r1, r0
   111e4:	movw	r0, #37220	; 0x9164
   111e8:	movt	r0, #2
   111ec:	ldr	r2, [r0]
   111f0:	mov	r0, #1
   111f4:	bl	11010 <__printf_chk@plt>
   111f8:	movw	r1, #31780	; 0x7c24
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10ed8 <dcgettext@plt>
   1120c:	mov	r1, r0
   11210:	mov	r0, #1
   11214:	mov	r2, #10
   11218:	bl	11010 <__printf_chk@plt>
   1121c:	movw	r1, #32968	; 0x80c8
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10ed8 <dcgettext@plt>
   11230:	movw	r7, #37196	; 0x914c
   11234:	movt	r7, #2
   11238:	ldr	r1, [r7]
   1123c:	bl	10e48 <fputs_unlocked@plt>
   11240:	movw	r1, #33024	; 0x8100
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ed8 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e48 <fputs_unlocked@plt>
   1125c:	movw	r1, #31913	; 0x7ca9
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ed8 <dcgettext@plt>
   11270:	mov	r1, r0
   11274:	mov	r0, #1
   11278:	mov	r2, #10
   1127c:	bl	11010 <__printf_chk@plt>
   11280:	movw	r1, #32311	; 0x7e37
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ed8 <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10e48 <fputs_unlocked@plt>
   1129c:	movw	r1, #32443	; 0x7ebb
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10ed8 <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10e48 <fputs_unlocked@plt>
   112b8:	movw	r1, #32506	; 0x7efa
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10ed8 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10e48 <fputs_unlocked@plt>
   112d4:	movw	r1, #32551	; 0x7f27
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10ed8 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10e48 <fputs_unlocked@plt>
   112f0:	movw	r1, #32605	; 0x7f5d
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10ed8 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10e48 <fputs_unlocked@plt>
   1130c:	movw	r0, #33960	; 0x84a8
   11310:	mov	r2, #48	; 0x30
   11314:	mov	r6, sp
   11318:	movw	r5, #32817	; 0x8031
   1131c:	movt	r0, #1
   11320:	movt	r5, #1
   11324:	add	r1, r0, #32
   11328:	add	r3, r0, #16
   1132c:	vld1.64	{d18-d19}, [r0], r2
   11330:	vld1.64	{d16-d17}, [r1]
   11334:	vld1.64	{d20-d21}, [r3]
   11338:	add	r1, r6, #32
   1133c:	vldr	d22, [r0]
   11340:	add	r0, r6, #16
   11344:	vst1.64	{d16-d17}, [r1]
   11348:	movw	r1, #33099	; 0x814b
   1134c:	vst1.64	{d20-d21}, [r0]
   11350:	mov	r0, r6
   11354:	vst1.64	{d18-d19}, [r0], r2
   11358:	movt	r1, #1
   1135c:	vstr	d22, [r0]
   11360:	mov	r0, r5
   11364:	bl	10e60 <strcmp@plt>
   11368:	cmp	r0, #0
   1136c:	ldrne	r1, [r6, #8]!
   11370:	cmpne	r1, #0
   11374:	bne	11360 <__assert_fail@plt+0x2a8>
   11378:	ldr	r6, [r6, #4]
   1137c:	movw	r1, #33194	; 0x81aa
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ed8 <dcgettext@plt>
   11390:	movw	r2, #32894	; 0x807e
   11394:	movw	r3, #33217	; 0x81c1
   11398:	mov	r1, r0
   1139c:	mov	r0, #1
   113a0:	movt	r2, #1
   113a4:	movt	r3, #1
   113a8:	bl	11010 <__printf_chk@plt>
   113ac:	cmp	r6, #0
   113b0:	mov	r0, #5
   113b4:	mov	r1, #0
   113b8:	moveq	r6, r5
   113bc:	bl	11058 <setlocale@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	113fc <__assert_fail@plt+0x344>
   113c8:	movw	r1, #33257	; 0x81e9
   113cc:	mov	r2, #3
   113d0:	movt	r1, #1
   113d4:	bl	11094 <strncmp@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	113fc <__assert_fail@plt+0x344>
   113e0:	movw	r1, #33261	; 0x81ed
   113e4:	mov	r0, #0
   113e8:	mov	r2, #5
   113ec:	movt	r1, #1
   113f0:	bl	10ed8 <dcgettext@plt>
   113f4:	ldr	r1, [r7]
   113f8:	bl	10e48 <fputs_unlocked@plt>
   113fc:	movw	r1, #33332	; 0x8234
   11400:	mov	r0, #0
   11404:	mov	r2, #5
   11408:	movt	r1, #1
   1140c:	bl	10ed8 <dcgettext@plt>
   11410:	movw	r2, #33217	; 0x81c1
   11414:	mov	r1, r0
   11418:	mov	r0, #1
   1141c:	mov	r3, r5
   11420:	movt	r2, #1
   11424:	bl	11010 <__printf_chk@plt>
   11428:	movw	r1, #33359	; 0x824f
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	movt	r1, #1
   11438:	bl	10ed8 <dcgettext@plt>
   1143c:	movw	r3, #33409	; 0x8281
   11440:	mov	r1, r0
   11444:	movw	r0, #33127	; 0x8167
   11448:	cmp	r6, r5
   1144c:	mov	r2, r6
   11450:	movt	r0, #1
   11454:	movt	r3, #1
   11458:	moveq	r3, r0
   1145c:	mov	r0, #1
   11460:	bl	11010 <__printf_chk@plt>
   11464:	mov	r0, r4
   11468:	bl	10fbc <exit@plt>
   1146c:	movw	r0, #37192	; 0x9148
   11470:	movw	r1, #31708	; 0x7bdc
   11474:	mov	r2, #5
   11478:	movt	r0, #2
   1147c:	movt	r1, #1
   11480:	ldr	r5, [r0]
   11484:	mov	r0, #0
   11488:	bl	10ed8 <dcgettext@plt>
   1148c:	mov	r2, r0
   11490:	movw	r0, #37220	; 0x9164
   11494:	mov	r1, #1
   11498:	movt	r0, #2
   1149c:	ldr	r3, [r0]
   114a0:	mov	r0, r5
   114a4:	bl	11028 <__fprintf_chk@plt>
   114a8:	mov	r0, r4
   114ac:	bl	10fbc <exit@plt>
   114b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114b4:	add	fp, sp, #28
   114b8:	sub	sp, sp, #260	; 0x104
   114bc:	sub	sp, sp, #16384	; 0x4000
   114c0:	mov	r4, r0
   114c4:	ldr	r0, [r1]
   114c8:	mov	r5, r1
   114cc:	bl	13a1c <__assert_fail@plt+0x2964>
   114d0:	movw	r1, #33409	; 0x8281
   114d4:	mov	r0, #6
   114d8:	movt	r1, #1
   114dc:	bl	11058 <setlocale@plt>
   114e0:	movw	r6, #32898	; 0x8082
   114e4:	movw	r1, #32822	; 0x8036
   114e8:	movt	r6, #1
   114ec:	movt	r1, #1
   114f0:	mov	r0, r6
   114f4:	bl	11088 <bindtextdomain@plt>
   114f8:	mov	r0, r6
   114fc:	bl	10ef0 <textdomain@plt>
   11500:	movw	r0, #14200	; 0x3778
   11504:	movt	r0, #1
   11508:	bl	17bb4 <__assert_fail@plt+0x6afc>
   1150c:	movw	sl, #37205	; 0x9155
   11510:	mov	r9, #0
   11514:	mov	r0, #1
   11518:	cmp	r4, #2
   1151c:	movt	sl, #2
   11520:	strh	r9, [sl]
   11524:	strb	r0, [sl, #2]
   11528:	mov	r0, #10
   1152c:	str	r0, [sp, #116]	; 0x74
   11530:	blt	11588 <__assert_fail@plt+0x4d0>
   11534:	mov	r6, r5
   11538:	ldr	r1, [r6, #4]!
   1153c:	ldrb	r0, [r1]
   11540:	cmp	r0, #45	; 0x2d
   11544:	bne	11588 <__assert_fail@plt+0x4d0>
   11548:	ldrb	r0, [r1, #1]!
   1154c:	sub	r0, r0, #48	; 0x30
   11550:	cmp	r0, #9
   11554:	bhi	11588 <__assert_fail@plt+0x4d0>
   11558:	mov	r0, r1
   1155c:	str	r1, [sp, #120]	; 0x78
   11560:	ldrb	r3, [r0, #1]!
   11564:	sub	r1, r3, #48	; 0x30
   11568:	cmp	r1, #10
   1156c:	bcc	11560 <__assert_fail@plt+0x4a8>
   11570:	mov	r2, #0
   11574:	mov	r1, #1
   11578:	mov	r7, r0
   1157c:	str	r2, [sp, #124]	; 0x7c
   11580:	mov	r2, #0
   11584:	b	13388 <__assert_fail@plt+0x22d0>
   11588:	mov	r0, #0
   1158c:	mov	r6, r5
   11590:	mov	r1, #0
   11594:	str	r0, [sp, #124]	; 0x7c
   11598:	mov	r0, #1
   1159c:	str	r0, [sp, #68]	; 0x44
   115a0:	movw	r8, #32876	; 0x806c
   115a4:	movw	r7, #33800	; 0x8408
   115a8:	mov	r0, #0
   115ac:	movt	r8, #1
   115b0:	movt	r7, #1
   115b4:	str	r0, [sp, #76]	; 0x4c
   115b8:	b	115d0 <__assert_fail@plt+0x518>
   115bc:	ldr	r1, [sp, #96]	; 0x60
   115c0:	str	r0, [sp, #124]	; 0x7c
   115c4:	b	115d0 <__assert_fail@plt+0x518>
   115c8:	mov	r0, #1
   115cc:	b	115bc <__assert_fail@plt+0x504>
   115d0:	str	r1, [sp, #96]	; 0x60
   115d4:	b	115dc <__assert_fail@plt+0x524>
   115d8:	strb	r9, [sl, #2]
   115dc:	mov	r0, r4
   115e0:	mov	r1, r6
   115e4:	mov	r2, r8
   115e8:	mov	r3, r7
   115ec:	str	r9, [sp]
   115f0:	bl	10fa4 <getopt_long@plt>
   115f4:	mov	r5, r0
   115f8:	cmp	r0, #98	; 0x62
   115fc:	ble	11744 <__assert_fail@plt+0x68c>
   11600:	sub	r0, r5, #99	; 0x63
   11604:	cmp	r0, #23
   11608:	bhi	11674 <__assert_fail@plt+0x5bc>
   1160c:	add	r1, pc, #0
   11610:	ldr	pc, [r1, r0, lsl #2]
   11614:	muleq	r1, r0, r6
   11618:	andeq	r3, r1, ip, lsr #11
   1161c:	andeq	r3, r1, ip, lsr #11
   11620:	andeq	r3, r1, ip, lsr #11
   11624:	andeq	r3, r1, ip, lsr #11
   11628:	andeq	r3, r1, ip, lsr #11
   1162c:	andeq	r3, r1, ip, lsr #11
   11630:	andeq	r3, r1, ip, lsr #11
   11634:	andeq	r3, r1, ip, lsr #11
   11638:	andeq	r3, r1, ip, lsr #11
   1163c:	andeq	r3, r1, ip, lsr #11
   11640:	andeq	r1, r1, r8, asr #13
   11644:	andeq	r3, r1, ip, lsr #11
   11648:	andeq	r3, r1, ip, lsr #11
   1164c:	andeq	r1, r1, r8, lsl #13
   11650:	andeq	r3, r1, ip, lsr #11
   11654:	andeq	r3, r1, ip, lsr #11
   11658:	andeq	r3, r1, ip, lsr #11
   1165c:	andeq	r3, r1, ip, lsr #11
   11660:	andeq	r1, r1, r8, asr #11
   11664:	andeq	r3, r1, ip, lsr #11
   11668:	andeq	r3, r1, ip, lsr #11
   1166c:	andeq	r3, r1, ip, lsr #11
   11670:	ldrdeq	r1, [r1], -r8
   11674:	cmp	r5, #256	; 0x100
   11678:	bne	135ac <__assert_fail@plt+0x24f4>
   1167c:	mov	r0, #1
   11680:	strb	r0, [sl, #3]
   11684:	b	115dc <__assert_fail@plt+0x524>
   11688:	mov	r0, #2
   1168c:	b	115bc <__assert_fail@plt+0x504>
   11690:	movw	r1, #37200	; 0x9150
   11694:	movt	r1, #2
   11698:	ldr	r5, [r1]
   1169c:	ldrb	r0, [r5]
   116a0:	subs	r0, r0, #45	; 0x2d
   116a4:	clz	r0, r0
   116a8:	addeq	r5, r5, #1
   116ac:	lsr	r0, r0, #5
   116b0:	streq	r5, [r1]
   116b4:	movw	r1, #32944	; 0x80b0
   116b8:	str	r0, [sp, #76]	; 0x4c
   116bc:	mov	r0, #0
   116c0:	movt	r1, #1
   116c4:	b	116fc <__assert_fail@plt+0x644>
   116c8:	movw	r1, #37200	; 0x9150
   116cc:	movt	r1, #2
   116d0:	ldr	r5, [r1]
   116d4:	ldrb	r0, [r5]
   116d8:	subs	r0, r0, #45	; 0x2d
   116dc:	clz	r0, r0
   116e0:	addeq	r5, r5, #1
   116e4:	lsr	r0, r0, #5
   116e8:	streq	r5, [r1]
   116ec:	movw	r1, #33423	; 0x828f
   116f0:	str	r0, [sp, #76]	; 0x4c
   116f4:	mov	r0, #1
   116f8:	movt	r1, #1
   116fc:	str	r0, [sp, #68]	; 0x44
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	bl	10ed8 <dcgettext@plt>
   1170c:	mvn	r1, #0
   11710:	str	r0, [sp, #12]
   11714:	mov	r0, r5
   11718:	mov	r2, #0
   1171c:	mov	r3, #0
   11720:	str	r9, [sp, #16]
   11724:	str	r1, [sp]
   11728:	str	r1, [sp, #4]
   1172c:	movw	r1, #33410	; 0x8282
   11730:	movt	r1, #1
   11734:	str	r1, [sp, #8]
   11738:	bl	1676c <__assert_fail@plt+0x56b4>
   1173c:	str	r0, [sp, #116]	; 0x74
   11740:	b	115d0 <__assert_fail@plt+0x518>
   11744:	ldr	r1, [sp, #96]	; 0x60
   11748:	cmn	r5, #1
   1174c:	bne	13530 <__assert_fail@plt+0x2478>
   11750:	ldr	r0, [sp, #124]	; 0x7c
   11754:	mov	r7, sl
   11758:	cmp	r0, #1
   1175c:	beq	11784 <__assert_fail@plt+0x6cc>
   11760:	cmp	r0, #0
   11764:	bne	1178c <__assert_fail@plt+0x6d4>
   11768:	movw	r0, #37184	; 0x9140
   1176c:	sub	r1, r4, #1
   11770:	movt	r0, #2
   11774:	ldr	r0, [r0]
   11778:	cmp	r0, r1
   1177c:	ldr	r1, [sp, #96]	; 0x60
   11780:	bge	1178c <__assert_fail@plt+0x6d4>
   11784:	mov	r0, #1
   11788:	strb	r0, [r7, #1]
   1178c:	ldr	r2, [sp, #76]	; 0x4c
   11790:	cmp	r1, #0
   11794:	mov	r0, #0
   11798:	mov	r5, #0
   1179c:	movwlt	r0, #1
   117a0:	and	r0, r0, r2
   117a4:	cmp	r0, #1
   117a8:	bne	117bc <__assert_fail@plt+0x704>
   117ac:	ldr	r0, [sp, #68]	; 0x44
   117b0:	eor	r0, r0, #1
   117b4:	tst	r0, #1
   117b8:	bne	13658 <__assert_fail@plt+0x25a0>
   117bc:	movw	r0, #37184	; 0x9140
   117c0:	movw	r2, #33792	; 0x8400
   117c4:	movt	r0, #2
   117c8:	movt	r2, #1
   117cc:	ldr	r0, [r0]
   117d0:	cmp	r0, r4
   117d4:	addlt	r2, r6, r0, lsl #2
   117d8:	ldr	r9, [r2]
   117dc:	str	r2, [sp, #84]	; 0x54
   117e0:	cmp	r9, #0
   117e4:	beq	1334c <__assert_fail@plt+0x2294>
   117e8:	ldr	r6, [sp, #116]	; 0x74
   117ec:	movw	r8, #37196	; 0x914c
   117f0:	movt	r8, #2
   117f4:	adds	r0, r6, #8192	; 0x2000
   117f8:	adc	r0, r1, #0
   117fc:	mov	r1, #1
   11800:	str	r0, [sp, #32]
   11804:	mov	r0, r6
   11808:	bfc	r0, #13, #19
   1180c:	str	r0, [sp, #24]
   11810:	rsb	r0, r0, #8192	; 0x2000
   11814:	str	r0, [sp, #28]
   11818:	add	r0, r0, r6
   1181c:	add	r1, r1, r0, lsr #13
   11820:	lsr	r0, r0, #13
   11824:	str	r0, [sp, #56]	; 0x38
   11828:	add	r0, sp, #128	; 0x80
   1182c:	cmp	r1, #16
   11830:	mov	r2, r1
   11834:	str	r1, [sp, #72]	; 0x48
   11838:	add	r0, r0, #48	; 0x30
   1183c:	movcs	r2, #16
   11840:	str	r0, [sp, #36]	; 0x24
   11844:	add	r0, r6, #8192	; 0x2000
   11848:	str	r2, [sp, #44]	; 0x2c
   1184c:	mov	r2, #0
   11850:	str	r0, [sp, #64]	; 0x40
   11854:	lsr	r0, r1, #1
   11858:	mov	r1, #1
   1185c:	str	r0, [sp, #40]	; 0x28
   11860:	b	12f9c <__assert_fail@plt+0x1ee4>
   11864:	orrs	r0, r6, r7
   11868:	mov	r4, #1
   1186c:	beq	118dc <__assert_fail@plt+0x824>
   11870:	mov	r4, #8192	; 0x2000
   11874:	subs	r0, r6, r4
   11878:	sbcs	r0, r7, #0
   1187c:	movcc	r4, r6
   11880:	mov	r0, r5
   11884:	mov	r2, r4
   11888:	bl	159b0 <__assert_fail@plt+0x48f8>
   1188c:	cmp	r0, #0
   11890:	beq	119b0 <__assert_fail@plt+0x8f8>
   11894:	mov	r5, r0
   11898:	cmn	r0, #1
   1189c:	beq	119d0 <__assert_fail@plt+0x918>
   118a0:	ldr	r3, [r8]
   118a4:	add	r0, sp, #235	; 0xeb
   118a8:	mov	r1, #1
   118ac:	mov	r2, r5
   118b0:	bl	10ec0 <fwrite_unlocked@plt>
   118b4:	subs	r6, r6, r5
   118b8:	sbc	r7, r7, #0
   118bc:	cmp	r0, r5
   118c0:	bcc	134e4 <__assert_fail@plt+0x242c>
   118c4:	ldr	r5, [sp, #124]	; 0x7c
   118c8:	orrs	r0, r6, r7
   118cc:	add	r1, sp, #235	; 0xeb
   118d0:	bne	11874 <__assert_fail@plt+0x7bc>
   118d4:	ldr	r6, [sp, #116]	; 0x74
   118d8:	mov	r4, #1
   118dc:	ldr	r0, [sp, #100]	; 0x64
   118e0:	mov	r7, sl
   118e4:	cmp	r0, #0
   118e8:	bne	13098 <__assert_fail@plt+0x1fe0>
   118ec:	b	13328 <__assert_fail@plt+0x2270>
   118f0:	ldrb	r1, [r7, #3]
   118f4:	mov	r0, #1
   118f8:	mvn	r2, #0
   118fc:	cmp	r1, #0
   11900:	mvn	r1, #0
   11904:	str	r1, [sp, #52]	; 0x34
   11908:	bne	11a40 <__assert_fail@plt+0x988>
   1190c:	ldr	r0, [sp, #144]	; 0x90
   11910:	and	r0, r0, #53248	; 0xd000
   11914:	orr	r0, r0, #8192	; 0x2000
   11918:	cmp	r0, #40960	; 0xa000
   1191c:	bne	11a30 <__assert_fail@plt+0x978>
   11920:	mov	r0, #1
   11924:	mov	r2, #0
   11928:	mov	r3, #0
   1192c:	str	r0, [sp]
   11930:	mov	r0, r5
   11934:	bl	10f2c <lseek64@plt>
   11938:	cmn	r1, #1
   1193c:	str	r0, [sp, #52]	; 0x34
   11940:	ble	122fc <__assert_fail@plt+0x1244>
   11944:	ldrb	r0, [r7, #3]
   11948:	mov	r2, r1
   1194c:	b	11a40 <__assert_fail@plt+0x988>
   11950:	bl	10fec <__errno_location@plt>
   11954:	ldr	r4, [r0]
   11958:	movw	r1, #33675	; 0x838b
   1195c:	mov	r0, #0
   11960:	mov	r2, #5
   11964:	movt	r1, #1
   11968:	bl	10ed8 <dcgettext@plt>
   1196c:	mov	r6, r5
   11970:	mov	r5, r0
   11974:	mov	r0, #4
   11978:	mov	r1, r9
   1197c:	bl	15470 <__assert_fail@plt+0x43b8>
   11980:	mov	r3, r0
   11984:	mov	r1, r4
   11988:	mov	r2, r5
   1198c:	mov	r0, #0
   11990:	mov	r4, #0
   11994:	mov	r5, r6
   11998:	bl	10f5c <error@plt>
   1199c:	ldr	r6, [sp, #116]	; 0x74
   119a0:	ldr	r0, [sp, #100]	; 0x64
   119a4:	cmp	r0, #0
   119a8:	bne	13098 <__assert_fail@plt+0x1fe0>
   119ac:	b	13328 <__assert_fail@plt+0x2270>
   119b0:	ldr	r6, [sp, #116]	; 0x74
   119b4:	ldr	r5, [sp, #124]	; 0x7c
   119b8:	mov	r4, #1
   119bc:	ldr	r0, [sp, #100]	; 0x64
   119c0:	mov	r7, sl
   119c4:	cmp	r0, #0
   119c8:	bne	13098 <__assert_fail@plt+0x1fe0>
   119cc:	b	13328 <__assert_fail@plt+0x2270>
   119d0:	bl	10fec <__errno_location@plt>
   119d4:	ldr	r4, [r0]
   119d8:	movw	r1, #33675	; 0x838b
   119dc:	mov	r0, #0
   119e0:	mov	r2, #5
   119e4:	movt	r1, #1
   119e8:	bl	10ed8 <dcgettext@plt>
   119ec:	mov	r5, r0
   119f0:	mov	r0, #4
   119f4:	mov	r1, r9
   119f8:	bl	15470 <__assert_fail@plt+0x43b8>
   119fc:	mov	r3, r0
   11a00:	mov	r1, r4
   11a04:	mov	r0, #0
   11a08:	mov	r2, r5
   11a0c:	mov	r4, #0
   11a10:	bl	10f5c <error@plt>
   11a14:	ldr	r6, [sp, #116]	; 0x74
   11a18:	ldr	r5, [sp, #124]	; 0x7c
   11a1c:	ldr	r0, [sp, #100]	; 0x64
   11a20:	mov	r7, sl
   11a24:	cmp	r0, #0
   11a28:	bne	13098 <__assert_fail@plt+0x1fe0>
   11a2c:	b	13328 <__assert_fail@plt+0x2270>
   11a30:	mvn	r1, #0
   11a34:	mov	r0, #0
   11a38:	mvn	r2, #0
   11a3c:	str	r1, [sp, #52]	; 0x34
   11a40:	cmp	r2, #0
   11a44:	mov	r1, #0
   11a48:	str	r2, [sp, #48]	; 0x30
   11a4c:	movwlt	r1, #1
   11a50:	orr	r3, r0, r1
   11a54:	ldr	r0, [sp, #36]	; 0x24
   11a58:	ldm	r0, {r0, r5}
   11a5c:	ldr	r7, [sp, #68]	; 0x44
   11a60:	ldr	r2, [sp, #184]	; 0xb8
   11a64:	tst	r7, #1
   11a68:	beq	11c78 <__assert_fail@plt+0xbc0>
   11a6c:	cmp	r3, #0
   11a70:	bne	11d98 <__assert_fail@plt+0xce0>
   11a74:	cmp	r2, #536870913	; 0x20000001
   11a78:	mov	r3, #0
   11a7c:	mov	r7, #0
   11a80:	movwcc	r3, #1
   11a84:	cmp	r2, #0
   11a88:	movwgt	r7, #1
   11a8c:	ands	r3, r7, r3
   11a90:	mov	r7, #512	; 0x200
   11a94:	asrne	r3, r2, #31
   11a98:	moveq	r2, r7
   11a9c:	subs	r2, r2, r0
   11aa0:	sbcs	r2, r3, r5
   11aa4:	bge	11d98 <__assert_fail@plt+0xce0>
   11aa8:	ldr	r3, [sp, #52]	; 0x34
   11aac:	ldr	r1, [sp, #48]	; 0x30
   11ab0:	movw	r7, #37205	; 0x9155
   11ab4:	mov	r4, #1
   11ab8:	movt	r7, #2
   11abc:	subs	r2, r3, r0
   11ac0:	sbcs	r2, r1, r5
   11ac4:	bge	13088 <__assert_fail@plt+0x1fd0>
   11ac8:	mov	r2, #0
   11acc:	str	r2, [sp]
   11ad0:	subs	r2, r0, r3
   11ad4:	sbc	r3, r5, r1
   11ad8:	asr	r3, r3, #31
   11adc:	add	r3, r2, r3, lsr #19
   11ae0:	bfc	r3, #0, #13
   11ae4:	subs	r4, r2, r3
   11ae8:	movweq	r4, #8192	; 0x2000
   11aec:	subs	r8, r0, r4
   11af0:	sbc	sl, r5, #0
   11af4:	ldr	r5, [sp, #124]	; 0x7c
   11af8:	mov	r2, r8
   11afc:	mov	r3, sl
   11b00:	mov	r0, r5
   11b04:	bl	10f2c <lseek64@plt>
   11b08:	cmn	r1, #1
   11b0c:	ble	12a90 <__assert_fail@plt+0x19d8>
   11b10:	sub	lr, fp, #8192	; 0x2000
   11b14:	mov	r0, r5
   11b18:	mov	r2, r4
   11b1c:	sub	r1, lr, #32
   11b20:	bl	159b0 <__assert_fail@plt+0x48f8>
   11b24:	cmn	r0, #1
   11b28:	beq	120b8 <__assert_fail@plt+0x1000>
   11b2c:	ldr	r1, [sp, #96]	; 0x60
   11b30:	mov	r5, r0
   11b34:	mov	r4, r6
   11b38:	orrs	r0, r6, r1
   11b3c:	mov	r7, r1
   11b40:	beq	11b90 <__assert_fail@plt+0xad8>
   11b44:	cmp	r5, #0
   11b48:	mov	r4, r6
   11b4c:	mov	r7, r1
   11b50:	beq	11b90 <__assert_fail@plt+0xad8>
   11b54:	movw	r2, #37205	; 0x9155
   11b58:	subs	r4, r6, #1
   11b5c:	sub	lr, fp, #8192	; 0x2000
   11b60:	movt	r2, #2
   11b64:	sbc	r7, r1, #0
   11b68:	sub	r1, lr, #32
   11b6c:	ldrb	r2, [r2, #2]
   11b70:	add	r1, r1, r5
   11b74:	ldrb	r1, [r1, #-1]
   11b78:	cmp	r2, #0
   11b7c:	movwne	r2, #10
   11b80:	cmp	r2, r1
   11b84:	ldr	r1, [sp, #96]	; 0x60
   11b88:	moveq	r4, r6
   11b8c:	moveq	r7, r1
   11b90:	cmp	r0, #0
   11b94:	beq	1201c <__assert_fail@plt+0xf64>
   11b98:	movw	r0, #37205	; 0x9155
   11b9c:	str	sl, [sp, #112]	; 0x70
   11ba0:	movt	r0, #2
   11ba4:	ldrb	r6, [r0, #2]
   11ba8:	cmp	r6, #0
   11bac:	movwne	r6, #10
   11bb0:	sub	lr, fp, #8192	; 0x2000
   11bb4:	cmp	r5, #0
   11bb8:	sub	sl, lr, #32
   11bbc:	beq	11bf8 <__assert_fail@plt+0xb40>
   11bc0:	mov	r0, sl
   11bc4:	mov	r1, r6
   11bc8:	mov	r2, r5
   11bcc:	bl	10fe0 <memrchr@plt>
   11bd0:	cmp	r0, #0
   11bd4:	beq	11bf8 <__assert_fail@plt+0xb40>
   11bd8:	sub	r5, r0, sl
   11bdc:	subs	r0, r4, #1
   11be0:	sbc	r1, r7, #0
   11be4:	orrs	r2, r4, r7
   11be8:	mov	r4, r0
   11bec:	mov	r7, r1
   11bf0:	bne	11bb0 <__assert_fail@plt+0xaf8>
   11bf4:	b	12ba0 <__assert_fail@plt+0x1ae8>
   11bf8:	ldr	r0, [sp, #52]	; 0x34
   11bfc:	ldr	r1, [sp, #48]	; 0x30
   11c00:	ldr	sl, [sp, #112]	; 0x70
   11c04:	eor	r0, r8, r0
   11c08:	eor	r1, sl, r1
   11c0c:	orrs	r0, r0, r1
   11c10:	mov	r0, #1
   11c14:	str	r0, [sp, #80]	; 0x50
   11c18:	beq	12f6c <__assert_fail@plt+0x1eb4>
   11c1c:	ldr	r5, [sp, #124]	; 0x7c
   11c20:	subs	r8, r8, #8192	; 0x2000
   11c24:	mov	r0, #0
   11c28:	sbc	sl, sl, #0
   11c2c:	str	r0, [sp]
   11c30:	mov	r2, r8
   11c34:	mov	r3, sl
   11c38:	mov	r0, r5
   11c3c:	bl	10f2c <lseek64@plt>
   11c40:	ldr	r6, [sp, #116]	; 0x74
   11c44:	cmp	r1, #0
   11c48:	blt	12f04 <__assert_fail@plt+0x1e4c>
   11c4c:	sub	lr, fp, #8192	; 0x2000
   11c50:	mov	r0, r5
   11c54:	mov	r2, #8192	; 0x2000
   11c58:	sub	r1, lr, #32
   11c5c:	bl	159b0 <__assert_fail@plt+0x48f8>
   11c60:	cmn	r0, #1
   11c64:	beq	120b8 <__assert_fail@plt+0x1000>
   11c68:	mov	r5, r0
   11c6c:	cmp	r0, #0
   11c70:	bne	11b98 <__assert_fail@plt+0xae0>
   11c74:	b	12f70 <__assert_fail@plt+0x1eb8>
   11c78:	cmp	r3, #0
   11c7c:	add	r1, sp, #235	; 0xeb
   11c80:	bne	11e80 <__assert_fail@plt+0xdc8>
   11c84:	cmp	r2, #536870913	; 0x20000001
   11c88:	mov	r3, #0
   11c8c:	mov	r7, #0
   11c90:	movwcc	r3, #1
   11c94:	cmp	r2, #0
   11c98:	movwgt	r7, #1
   11c9c:	ands	r3, r7, r3
   11ca0:	mov	r7, #512	; 0x200
   11ca4:	asrne	r3, r2, #31
   11ca8:	moveq	r2, r7
   11cac:	subs	r2, r2, r0
   11cb0:	sbcs	r2, r3, r5
   11cb4:	bge	11e80 <__assert_fail@plt+0xdc8>
   11cb8:	ldr	r2, [sp, #52]	; 0x34
   11cbc:	mov	r7, #0
   11cc0:	mov	r4, #1
   11cc4:	subs	r2, r0, r2
   11cc8:	ldr	r0, [sp, #48]	; 0x30
   11ccc:	sbc	r0, r5, r0
   11cd0:	rsbs	r3, r2, #0
   11cd4:	rscs	r3, r0, #0
   11cd8:	movwlt	r7, #1
   11cdc:	ldr	r3, [sp, #96]	; 0x60
   11ce0:	cmp	r7, #0
   11ce4:	moveq	r0, r7
   11ce8:	movne	r7, r2
   11cec:	subs	r2, r6, r7
   11cf0:	sbcs	r2, r3, r0
   11cf4:	bcs	1282c <__assert_fail@plt+0x1774>
   11cf8:	subs	r5, r7, r6
   11cfc:	movw	r7, #37205	; 0x9155
   11d00:	sbc	r6, r0, r3
   11d04:	movt	r7, #2
   11d08:	orrs	r0, r5, r6
   11d0c:	beq	11d7c <__assert_fail@plt+0xcc4>
   11d10:	subs	r0, r5, #8192	; 0x2000
   11d14:	mov	r2, #8192	; 0x2000
   11d18:	sbcs	r0, r6, #0
   11d1c:	ldr	r0, [sp, #124]	; 0x7c
   11d20:	movcc	r2, r5
   11d24:	bl	159b0 <__assert_fail@plt+0x48f8>
   11d28:	cmn	r0, #1
   11d2c:	beq	12b70 <__assert_fail@plt+0x1ab8>
   11d30:	subs	r5, r5, r0
   11d34:	mov	r4, r0
   11d38:	sbc	r6, r6, #0
   11d3c:	cmp	r0, #0
   11d40:	bne	11d4c <__assert_fail@plt+0xc94>
   11d44:	orrs	r0, r5, r6
   11d48:	bne	12b78 <__assert_fail@plt+0x1ac0>
   11d4c:	cmp	r4, #0
   11d50:	beq	11d70 <__assert_fail@plt+0xcb8>
   11d54:	ldr	r3, [r8]
   11d58:	add	r0, sp, #235	; 0xeb
   11d5c:	mov	r1, #1
   11d60:	mov	r2, r4
   11d64:	bl	10ec0 <fwrite_unlocked@plt>
   11d68:	cmp	r0, r4
   11d6c:	bcc	134e4 <__assert_fail@plt+0x242c>
   11d70:	orrs	r0, r5, r6
   11d74:	add	r1, sp, #235	; 0xeb
   11d78:	bne	11d10 <__assert_fail@plt+0xc58>
   11d7c:	ldr	r6, [sp, #116]	; 0x74
   11d80:	mov	r4, #1
   11d84:	ldr	r0, [sp, #100]	; 0x64
   11d88:	ldr	r5, [sp, #124]	; 0x7c
   11d8c:	cmp	r0, #0
   11d90:	bne	13098 <__assert_fail@plt+0x1fe0>
   11d94:	b	13328 <__assert_fail@plt+0x2270>
   11d98:	movw	r0, #8208	; 0x2010
   11d9c:	str	r9, [sp, #120]	; 0x78
   11da0:	bl	160d4 <__assert_fail@plt+0x501c>
   11da4:	mov	r2, #0
   11da8:	movw	r1, #8200	; 0x2008
   11dac:	movw	r9, #8204	; 0x200c
   11db0:	str	r0, [sp, #88]	; 0x58
   11db4:	str	r2, [r0, r1]
   11db8:	movw	r1, #8196	; 0x2004
   11dbc:	str	r2, [r0, r1]
   11dc0:	str	r2, [r0, r9]
   11dc4:	ldr	r0, [sp, #96]	; 0x60
   11dc8:	orr	r4, r6, r0
   11dcc:	movw	r0, #8208	; 0x2010
   11dd0:	bl	160d4 <__assert_fail@plt+0x501c>
   11dd4:	cmp	r4, #0
   11dd8:	ldr	sl, [sp, #52]	; 0x34
   11ddc:	ldr	r4, [sp, #48]	; 0x30
   11de0:	ldr	r5, [sp, #124]	; 0x7c
   11de4:	mov	r7, r0
   11de8:	beq	11e38 <__assert_fail@plt+0xd80>
   11dec:	mov	r0, r5
   11df0:	mov	r1, r7
   11df4:	mov	r2, #8192	; 0x2000
   11df8:	bl	159b0 <__assert_fail@plt+0x48f8>
   11dfc:	mov	r6, r0
   11e00:	add	r0, r0, #1
   11e04:	mov	r4, #0
   11e08:	cmp	r0, #2
   11e0c:	bcs	123e4 <__assert_fail@plt+0x132c>
   11e10:	ldr	r0, [sp, #88]	; 0x58
   11e14:	ldr	sl, [sp, #52]	; 0x34
   11e18:	str	r0, [sp, #60]	; 0x3c
   11e1c:	ldr	r0, [sp, #48]	; 0x30
   11e20:	str	r0, [sp, #112]	; 0x70
   11e24:	mov	r0, r7
   11e28:	bl	13864 <__assert_fail@plt+0x27ac>
   11e2c:	cmn	r6, #1
   11e30:	bne	125ec <__assert_fail@plt+0x1534>
   11e34:	b	12398 <__assert_fail@plt+0x12e0>
   11e38:	mov	r0, r5
   11e3c:	mov	r1, r7
   11e40:	mov	r2, #8192	; 0x2000
   11e44:	bl	159b0 <__assert_fail@plt+0x48f8>
   11e48:	mov	r6, r0
   11e4c:	add	r0, r0, #1
   11e50:	cmp	r0, #2
   11e54:	bcc	12378 <__assert_fail@plt+0x12c0>
   11e58:	ldr	r3, [r8]
   11e5c:	mov	r0, r7
   11e60:	mov	r1, #1
   11e64:	mov	r2, r6
   11e68:	bl	10ec0 <fwrite_unlocked@plt>
   11e6c:	adds	sl, sl, r6
   11e70:	adc	r4, r4, #0
   11e74:	cmp	r0, r6
   11e78:	bcs	11e38 <__assert_fail@plt+0xd80>
   11e7c:	b	134e4 <__assert_fail@plt+0x242c>
   11e80:	ldr	r0, [sp, #32]
   11e84:	cmp	r0, #0
   11e88:	bne	13618 <__assert_fail@plt+0x2560>
   11e8c:	cmp	r6, #1048576	; 0x100000
   11e90:	str	r9, [sp, #120]	; 0x78
   11e94:	bhi	12100 <__assert_fail@plt+0x1048>
   11e98:	ldr	r4, [sp, #64]	; 0x40
   11e9c:	mov	r0, #2
   11ea0:	mov	r1, r4
   11ea4:	bl	161a4 <__assert_fail@plt+0x50ec>
   11ea8:	sub	lr, fp, #8192	; 0x2000
   11eac:	mov	r8, r0
   11eb0:	add	r0, r0, r4
   11eb4:	mov	r9, #0
   11eb8:	mov	r7, #1
   11ebc:	sub	r1, lr, #32
   11ec0:	mov	sl, r8
   11ec4:	str	r8, [r1]
   11ec8:	str	r0, [r1, #4]
   11ecc:	ldr	r0, [sp, #52]	; 0x34
   11ed0:	str	r0, [sp, #92]	; 0x5c
   11ed4:	ldr	r0, [sp, #48]	; 0x30
   11ed8:	str	r0, [sp, #112]	; 0x70
   11edc:	b	11ef8 <__assert_fail@plt+0xe40>
   11ee0:	eor	r9, r9, #1
   11ee4:	sub	lr, fp, #8192	; 0x2000
   11ee8:	mov	r7, #0
   11eec:	and	r0, r9, #1
   11ef0:	sub	r1, lr, #32
   11ef4:	ldr	sl, [r1, r0, lsl #2]
   11ef8:	ldr	r4, [sp, #64]	; 0x40
   11efc:	ldr	r0, [sp, #124]	; 0x7c
   11f00:	mov	r1, sl
   11f04:	mov	r2, r4
   11f08:	bl	1388c <__assert_fail@plt+0x27d4>
   11f0c:	mov	r5, r0
   11f10:	cmp	r0, r4
   11f14:	mov	r0, #0
   11f18:	mov	r6, #0
   11f1c:	bcs	11f50 <__assert_fail@plt+0xe98>
   11f20:	bl	10fec <__errno_location@plt>
   11f24:	ldr	r4, [r0]
   11f28:	cmp	r4, #0
   11f2c:	bne	127c4 <__assert_fail@plt+0x170c>
   11f30:	ldr	r1, [sp, #116]	; 0x74
   11f34:	mov	r6, #1
   11f38:	mov	r0, #0
   11f3c:	cmp	r5, r1
   11f40:	bhi	11f50 <__assert_fail@plt+0xe98>
   11f44:	sub	r0, r1, r5
   11f48:	tst	r7, #1
   11f4c:	movwne	r0, #0
   11f50:	tst	r7, #1
   11f54:	bne	11fb8 <__assert_fail@plt+0xf00>
   11f58:	ldr	r1, [sp, #116]	; 0x74
   11f5c:	sub	r4, r1, r0
   11f60:	ldr	r0, [sp, #92]	; 0x5c
   11f64:	adds	r0, r0, r4
   11f68:	str	r0, [sp, #92]	; 0x5c
   11f6c:	ldr	r0, [sp, #112]	; 0x70
   11f70:	adc	r0, r0, #0
   11f74:	cmp	r4, #0
   11f78:	str	r0, [sp, #112]	; 0x70
   11f7c:	beq	11fb8 <__assert_fail@plt+0xf00>
   11f80:	mov	r0, #1
   11f84:	sub	lr, fp, #8192	; 0x2000
   11f88:	mov	r2, r4
   11f8c:	bic	r0, r0, r9
   11f90:	sub	r1, lr, #32
   11f94:	ldr	r0, [r1, r0, lsl #2]
   11f98:	movw	r1, #37196	; 0x914c
   11f9c:	movt	r1, #2
   11fa0:	ldr	r3, [r1]
   11fa4:	mov	r1, #1
   11fa8:	add	r0, r0, #8192	; 0x2000
   11fac:	bl	10ec0 <fwrite_unlocked@plt>
   11fb0:	cmp	r0, r4
   11fb4:	bcc	1358c <__assert_fail@plt+0x24d4>
   11fb8:	ldr	r0, [sp, #116]	; 0x74
   11fbc:	cmp	r5, r0
   11fc0:	bls	1200c <__assert_fail@plt+0xf54>
   11fc4:	sub	r4, r5, r0
   11fc8:	ldr	r0, [sp, #92]	; 0x5c
   11fcc:	adds	r0, r0, r4
   11fd0:	str	r0, [sp, #92]	; 0x5c
   11fd4:	ldr	r0, [sp, #112]	; 0x70
   11fd8:	adc	r0, r0, #0
   11fdc:	cmp	r4, #0
   11fe0:	str	r0, [sp, #112]	; 0x70
   11fe4:	beq	1200c <__assert_fail@plt+0xf54>
   11fe8:	movw	r0, #37196	; 0x914c
   11fec:	mov	r1, #1
   11ff0:	mov	r2, r4
   11ff4:	movt	r0, #2
   11ff8:	ldr	r3, [r0]
   11ffc:	mov	r0, sl
   12000:	bl	10ec0 <fwrite_unlocked@plt>
   12004:	cmp	r0, r4
   12008:	bcc	1358c <__assert_fail@plt+0x24d4>
   1200c:	cmp	r6, #0
   12010:	beq	11ee0 <__assert_fail@plt+0xe28>
   12014:	mov	r4, #1
   12018:	b	12800 <__assert_fail@plt+0x1748>
   1201c:	cmp	r5, #0
   12020:	beq	12044 <__assert_fail@plt+0xf8c>
   12024:	subs	r0, r4, #1
   12028:	sub	r5, r5, #1
   1202c:	sbc	r1, r7, #0
   12030:	orrs	r2, r4, r7
   12034:	mov	r4, r0
   12038:	mov	r7, r1
   1203c:	bne	1201c <__assert_fail@plt+0xf64>
   12040:	b	12ba4 <__assert_fail@plt+0x1aec>
   12044:	ldr	r0, [sp, #52]	; 0x34
   12048:	ldr	r1, [sp, #48]	; 0x30
   1204c:	eor	r0, r8, r0
   12050:	eor	r1, sl, r1
   12054:	orrs	r0, r0, r1
   12058:	mov	r0, #1
   1205c:	str	r0, [sp, #80]	; 0x50
   12060:	beq	12f70 <__assert_fail@plt+0x1eb8>
   12064:	ldr	r5, [sp, #124]	; 0x7c
   12068:	subs	r8, r8, #8192	; 0x2000
   1206c:	mov	r0, #0
   12070:	sbc	sl, sl, #0
   12074:	str	r0, [sp]
   12078:	mov	r2, r8
   1207c:	mov	r3, sl
   12080:	mov	r0, r5
   12084:	bl	10f2c <lseek64@plt>
   12088:	cmn	r1, #1
   1208c:	ble	12f04 <__assert_fail@plt+0x1e4c>
   12090:	sub	lr, fp, #8192	; 0x2000
   12094:	mov	r0, r5
   12098:	mov	r2, #8192	; 0x2000
   1209c:	sub	r1, lr, #32
   120a0:	bl	159b0 <__assert_fail@plt+0x48f8>
   120a4:	cmp	r0, #0
   120a8:	beq	12f70 <__assert_fail@plt+0x1eb8>
   120ac:	mov	r5, r0
   120b0:	cmn	r0, #1
   120b4:	bne	1201c <__assert_fail@plt+0xf64>
   120b8:	bl	10fec <__errno_location@plt>
   120bc:	ldr	r4, [r0]
   120c0:	movw	r1, #33675	; 0x838b
   120c4:	mov	r0, #0
   120c8:	mov	r2, #5
   120cc:	str	r0, [sp, #80]	; 0x50
   120d0:	mov	r0, #0
   120d4:	movt	r1, #1
   120d8:	bl	10ed8 <dcgettext@plt>
   120dc:	mov	r5, r0
   120e0:	mov	r0, #4
   120e4:	mov	r1, r9
   120e8:	bl	15470 <__assert_fail@plt+0x43b8>
   120ec:	mov	r3, r0
   120f0:	mov	r0, #0
   120f4:	mov	r1, r4
   120f8:	mov	r2, r5
   120fc:	b	12af8 <__assert_fail@plt+0x1a40>
   12100:	ldr	r0, [sp, #52]	; 0x34
   12104:	ldr	r4, [sp, #48]	; 0x30
   12108:	mov	r2, #0
   1210c:	mov	r5, #1
   12110:	mov	r9, #0
   12114:	mov	r8, #0
   12118:	str	r0, [sp, #92]	; 0x5c
   1211c:	mov	r0, #0
   12120:	str	r0, [sp, #60]	; 0x3c
   12124:	mov	r0, #0
   12128:	str	r0, [sp, #88]	; 0x58
   1212c:	mov	sl, r9
   12130:	mov	r9, r5
   12134:	str	r4, [sp, #112]	; 0x70
   12138:	cmp	r2, sl
   1213c:	bne	121a0 <__assert_fail@plt+0x10e8>
   12140:	ldr	r4, [sp, #44]	; 0x2c
   12144:	ldr	r1, [sp, #88]	; 0x58
   12148:	cmp	r2, #0
   1214c:	beq	12160 <__assert_fail@plt+0x10a8>
   12150:	ldr	r0, [sp, #40]	; 0x28
   12154:	ldr	r4, [sp, #72]	; 0x48
   12158:	cmp	r2, r0
   1215c:	lslls	r4, r2, #1
   12160:	mov	r0, r1
   12164:	mov	r1, r4
   12168:	mov	r2, #4
   1216c:	bl	16098 <__assert_fail@plt+0x4fe0>
   12170:	mov	r5, r0
   12174:	mov	r2, r4
   12178:	tst	r8, #1
   1217c:	str	r2, [sp, #80]	; 0x50
   12180:	bne	121b0 <__assert_fail@plt+0x10f8>
   12184:	mov	r0, #8192	; 0x2000
   12188:	bl	160d4 <__assert_fail@plt+0x501c>
   1218c:	mov	r1, r0
   12190:	str	r0, [r5, sl, lsl #2]
   12194:	add	r0, sl, #1
   12198:	str	r0, [sp, #60]	; 0x3c
   1219c:	b	121b4 <__assert_fail@plt+0x10fc>
   121a0:	ldr	r5, [sp, #88]	; 0x58
   121a4:	tst	r8, #1
   121a8:	str	r2, [sp, #80]	; 0x50
   121ac:	beq	12184 <__assert_fail@plt+0x10cc>
   121b0:	ldr	r1, [r5, sl, lsl #2]
   121b4:	ldr	r0, [sp, #124]	; 0x7c
   121b8:	mov	r2, #8192	; 0x2000
   121bc:	bl	1388c <__assert_fail@plt+0x27d4>
   121c0:	mov	r7, #0
   121c4:	mov	r6, r0
   121c8:	str	r5, [sp, #88]	; 0x58
   121cc:	cmp	r7, r0, lsr #13
   121d0:	bne	121e8 <__assert_fail@plt+0x1130>
   121d4:	bl	10fec <__errno_location@plt>
   121d8:	ldr	r4, [r0]
   121dc:	mov	r7, #1
   121e0:	cmp	r4, #0
   121e4:	bne	12764 <__assert_fail@plt+0x16ac>
   121e8:	ldr	r0, [sp, #56]	; 0x38
   121ec:	sub	r0, sl, r0
   121f0:	clz	r0, r0
   121f4:	lsr	r0, r0, #5
   121f8:	orr	r8, r8, r0
   121fc:	tst	r8, #1
   12200:	beq	12248 <__assert_fail@plt+0x1190>
   12204:	ldr	r0, [sp, #92]	; 0x5c
   12208:	ldr	r4, [sp, #112]	; 0x70
   1220c:	adds	r0, r0, r6
   12210:	adc	r4, r4, #0
   12214:	cmp	r6, #0
   12218:	str	r0, [sp, #92]	; 0x5c
   1221c:	beq	1224c <__assert_fail@plt+0x1194>
   12220:	movw	r1, #37196	; 0x914c
   12224:	ldr	r0, [r5, r9, lsl #2]
   12228:	mov	r2, r6
   1222c:	movt	r1, #2
   12230:	ldr	r3, [r1]
   12234:	mov	r1, #1
   12238:	bl	10ec0 <fwrite_unlocked@plt>
   1223c:	cmp	r0, r6
   12240:	bcs	1224c <__assert_fail@plt+0x1194>
   12244:	b	1358c <__assert_fail@plt+0x24d4>
   12248:	ldr	r4, [sp, #112]	; 0x70
   1224c:	ldr	r2, [sp, #72]	; 0x48
   12250:	add	r0, r9, #1
   12254:	cmp	r7, #0
   12258:	udiv	r1, r0, r2
   1225c:	mls	r5, r1, r2, r0
   12260:	ldr	r2, [sp, #80]	; 0x50
   12264:	beq	1212c <__assert_fail@plt+0x1074>
   12268:	ldr	r0, [sp, #28]
   1226c:	cmp	r0, #0
   12270:	beq	12848 <__assert_fail@plt+0x1790>
   12274:	tst	r8, #1
   12278:	beq	1287c <__assert_fail@plt+0x17c4>
   1227c:	mov	r0, #1
   12280:	ldr	r1, [sp, #28]
   12284:	movw	sl, #37205	; 0x9155
   12288:	movw	r8, #37196	; 0x914c
   1228c:	str	r0, [sp, #80]	; 0x50
   12290:	ldr	r0, [sp, #92]	; 0x5c
   12294:	movt	sl, #2
   12298:	movt	r8, #2
   1229c:	mov	r7, sl
   122a0:	adds	r0, r0, r1
   122a4:	str	r0, [sp, #92]	; 0x5c
   122a8:	ldr	r0, [sp, #88]	; 0x58
   122ac:	adc	r4, r4, #0
   122b0:	str	r4, [sp, #112]	; 0x70
   122b4:	rsb	r4, r6, #8192	; 0x2000
   122b8:	cmp	r1, r4
   122bc:	ldr	r0, [r0, r9, lsl #2]
   122c0:	add	r0, r0, r6
   122c4:	bcs	12b00 <__assert_fail@plt+0x1a48>
   122c8:	ldr	r3, [r8]
   122cc:	mov	r6, r1
   122d0:	mov	r1, #1
   122d4:	str	r1, [sp, #80]	; 0x50
   122d8:	mov	r1, #1
   122dc:	mov	r2, r6
   122e0:	bl	10ec0 <fwrite_unlocked@plt>
   122e4:	cmp	r0, r6
   122e8:	ldr	r6, [sp, #116]	; 0x74
   122ec:	ldr	sl, [sp, #124]	; 0x7c
   122f0:	ldr	r9, [sp, #92]	; 0x5c
   122f4:	bcs	12d4c <__assert_fail@plt+0x1c94>
   122f8:	b	134e4 <__assert_fail@plt+0x242c>
   122fc:	bl	10fec <__errno_location@plt>
   12300:	ldr	r4, [r0]
   12304:	movw	r1, #33637	; 0x8365
   12308:	mov	r0, #0
   1230c:	mov	r2, #5
   12310:	movt	r1, #1
   12314:	bl	10ed8 <dcgettext@plt>
   12318:	mov	r5, r0
   1231c:	mov	r0, #0
   12320:	mov	r1, #3
   12324:	mov	r2, r9
   12328:	bl	156ec <__assert_fail@plt+0x4634>
   1232c:	sub	lr, fp, #8192	; 0x2000
   12330:	mov	r6, r0
   12334:	mov	r0, #0
   12338:	mov	r1, #0
   1233c:	sub	r2, lr, #53	; 0x35
   12340:	bl	13900 <__assert_fail@plt+0x2848>
   12344:	mov	r3, r6
   12348:	ldr	r6, [sp, #116]	; 0x74
   1234c:	str	r0, [sp]
   12350:	mov	r1, r4
   12354:	mov	r0, #0
   12358:	mov	r2, r5
   1235c:	mov	r4, #0
   12360:	bl	10f5c <error@plt>
   12364:	ldr	r0, [sp, #100]	; 0x64
   12368:	ldr	r5, [sp, #124]	; 0x7c
   1236c:	cmp	r0, #0
   12370:	bne	13098 <__assert_fail@plt+0x1fe0>
   12374:	b	13328 <__assert_fail@plt+0x2270>
   12378:	ldr	r0, [sp, #88]	; 0x58
   1237c:	str	r4, [sp, #112]	; 0x70
   12380:	mov	r4, #0
   12384:	str	r0, [sp, #60]	; 0x3c
   12388:	mov	r0, r7
   1238c:	bl	13864 <__assert_fail@plt+0x27ac>
   12390:	cmn	r6, #1
   12394:	bne	125ec <__assert_fail@plt+0x1534>
   12398:	bl	10fec <__errno_location@plt>
   1239c:	ldr	r5, [r0]
   123a0:	movw	r1, #33675	; 0x838b
   123a4:	mov	r0, #0
   123a8:	mov	r2, #5
   123ac:	str	r0, [sp, #80]	; 0x50
   123b0:	mov	r0, #0
   123b4:	movt	r1, #1
   123b8:	bl	10ed8 <dcgettext@plt>
   123bc:	ldr	r1, [sp, #120]	; 0x78
   123c0:	mov	r6, r0
   123c4:	mov	r0, #4
   123c8:	bl	15470 <__assert_fail@plt+0x43b8>
   123cc:	mov	r3, r0
   123d0:	mov	r0, #0
   123d4:	mov	r1, r5
   123d8:	mov	r2, r6
   123dc:	bl	10f5c <error@plt>
   123e0:	b	12a68 <__assert_fail@plt+0x19b0>
   123e4:	ldr	r0, [sp, #88]	; 0x58
   123e8:	ldr	sl, [sp, #52]	; 0x34
   123ec:	str	r0, [sp, #60]	; 0x3c
   123f0:	ldr	r0, [sp, #48]	; 0x30
   123f4:	str	r0, [sp, #112]	; 0x70
   123f8:	mov	r0, #0
   123fc:	movw	r1, #8196	; 0x2004
   12400:	str	sl, [sp, #92]	; 0x5c
   12404:	mov	r8, r7
   12408:	mov	r2, r7
   1240c:	str	r0, [r7, r9]
   12410:	mov	r9, r7
   12414:	str	r6, [r9, r1]!
   12418:	movw	r1, #8200	; 0x2008
   1241c:	str	r0, [r7, r1]!
   12420:	movw	r0, #37205	; 0x9155
   12424:	str	r2, [sp, #80]	; 0x50
   12428:	movt	r0, #2
   1242c:	mov	r1, r0
   12430:	ldrb	r0, [r0, #2]
   12434:	cmp	r0, #0
   12438:	movwne	r0, #10
   1243c:	strb	r0, [r8, r6]
   12440:	mov	r0, r2
   12444:	ldrb	r5, [r1, #2]
   12448:	cmp	r5, #0
   1244c:	movwne	r5, #10
   12450:	mov	r1, r5
   12454:	bl	10efc <rawmemchr@plt>
   12458:	ldr	sl, [r7]
   1245c:	add	r6, r8, r6
   12460:	cmp	r0, r6
   12464:	bcs	12484 <__assert_fail@plt+0x13cc>
   12468:	add	sl, sl, #1
   1246c:	add	r0, r0, #1
   12470:	mov	r1, r5
   12474:	str	sl, [r7]
   12478:	bl	10efc <rawmemchr@plt>
   1247c:	cmp	r0, r6
   12480:	bcc	12468 <__assert_fail@plt+0x13b0>
   12484:	ldr	r5, [sp, #88]	; 0x58
   12488:	add	r6, sl, r4
   1248c:	movw	r0, #8196	; 0x2004
   12490:	ldr	r2, [r9]
   12494:	mov	r3, #0
   12498:	mov	r4, r5
   1249c:	ldr	r0, [r4, r0]!
   124a0:	add	r1, r0, r2
   124a4:	cmp	r3, r1, lsr #13
   124a8:	bne	124fc <__assert_fail@plt+0x1444>
   124ac:	ldr	r8, [sp, #80]	; 0x50
   124b0:	add	r0, r5, r0
   124b4:	mov	r1, r8
   124b8:	bl	10e9c <memcpy@plt>
   124bc:	ldr	r0, [r9]
   124c0:	ldr	r1, [r4]
   124c4:	ldr	sl, [sp, #92]	; 0x5c
   124c8:	movw	r9, #8204	; 0x200c
   124cc:	add	r0, r1, r0
   124d0:	movw	r1, #8200	; 0x2008
   124d4:	str	r0, [r4]
   124d8:	mov	r0, r5
   124dc:	ldr	r5, [sp, #124]	; 0x7c
   124e0:	mov	r4, r6
   124e4:	ldr	r2, [r7]
   124e8:	ldr	r1, [r0, r1]!
   124ec:	mov	r7, r8
   124f0:	add	r1, r1, r2
   124f4:	str	r1, [r0]
   124f8:	b	125bc <__assert_fail@plt+0x1504>
   124fc:	ldr	r1, [sp, #60]	; 0x3c
   12500:	movw	r9, #8204	; 0x200c
   12504:	movw	r0, #8200	; 0x2008
   12508:	ldr	sl, [sp, #92]	; 0x5c
   1250c:	str	r8, [r5, r9]
   12510:	mov	r7, r1
   12514:	ldr	r0, [r7, r0]!
   12518:	sub	r4, r6, r0
   1251c:	ldr	r0, [sp, #116]	; 0x74
   12520:	subs	r0, r0, r4
   12524:	ldr	r0, [sp, #96]	; 0x60
   12528:	sbcs	r0, r0, #0
   1252c:	bcs	125a4 <__assert_fail@plt+0x14ec>
   12530:	movw	r0, #8196	; 0x2004
   12534:	ldr	r5, [r1, r0]
   12538:	ldr	r0, [sp, #112]	; 0x70
   1253c:	adds	sl, sl, r5
   12540:	str	sl, [sp, #92]	; 0x5c
   12544:	ldr	sl, [sp, #124]	; 0x7c
   12548:	adc	r0, r0, #0
   1254c:	cmp	r5, #0
   12550:	str	r0, [sp, #112]	; 0x70
   12554:	beq	12588 <__assert_fail@plt+0x14d0>
   12558:	movw	r0, #37196	; 0x914c
   1255c:	mov	r2, r5
   12560:	movt	r0, #2
   12564:	ldr	r3, [r0]
   12568:	mov	r0, r1
   1256c:	mov	r1, #1
   12570:	bl	10ec0 <fwrite_unlocked@plt>
   12574:	cmp	r0, r5
   12578:	bcc	1358c <__assert_fail@plt+0x24d4>
   1257c:	ldr	r0, [r7]
   12580:	ldr	r1, [sp, #60]	; 0x3c
   12584:	sub	r4, r6, r0
   12588:	ldr	r0, [r1, r9]
   1258c:	mov	r5, sl
   12590:	ldr	sl, [sp, #92]	; 0x5c
   12594:	mov	r7, r1
   12598:	str	r8, [sp, #88]	; 0x58
   1259c:	str	r0, [sp, #60]	; 0x3c
   125a0:	b	125bc <__assert_fail@plt+0x1504>
   125a4:	movw	r0, #8208	; 0x2010
   125a8:	bl	160d4 <__assert_fail@plt+0x501c>
   125ac:	ldr	r5, [sp, #124]	; 0x7c
   125b0:	mov	r7, r0
   125b4:	mov	r4, r6
   125b8:	str	r8, [sp, #88]	; 0x58
   125bc:	mov	r0, r5
   125c0:	mov	r1, r7
   125c4:	mov	r2, #8192	; 0x2000
   125c8:	bl	159b0 <__assert_fail@plt+0x48f8>
   125cc:	mov	r6, r0
   125d0:	add	r0, r0, #1
   125d4:	cmp	r0, #1
   125d8:	bhi	123f8 <__assert_fail@plt+0x1340>
   125dc:	mov	r0, r7
   125e0:	bl	13864 <__assert_fail@plt+0x27ac>
   125e4:	cmn	r6, #1
   125e8:	beq	12398 <__assert_fail@plt+0x12e0>
   125ec:	ldr	r2, [sp, #88]	; 0x58
   125f0:	movw	r0, #8196	; 0x2004
   125f4:	movw	r8, #37196	; 0x914c
   125f8:	movw	r1, #37205	; 0x9155
   125fc:	movt	r8, #2
   12600:	movt	r1, #2
   12604:	ldr	r0, [r2, r0]
   12608:	cmp	r0, #0
   1260c:	beq	12648 <__assert_fail@plt+0x1590>
   12610:	ldrb	r1, [r1, #2]
   12614:	add	r0, r2, r0
   12618:	ldr	r6, [sp, #116]	; 0x74
   1261c:	ldrb	r0, [r0, #-1]
   12620:	cmp	r1, #0
   12624:	movwne	r1, #10
   12628:	cmp	r1, r0
   1262c:	beq	1264c <__assert_fail@plt+0x1594>
   12630:	movw	r0, #8200	; 0x2008
   12634:	add	r4, r4, #1
   12638:	ldr	r0, [r2, r0]!
   1263c:	add	r0, r0, #1
   12640:	str	r0, [r2]
   12644:	b	1264c <__assert_fail@plt+0x1594>
   12648:	ldr	r6, [sp, #116]	; 0x74
   1264c:	ldr	r7, [sp, #60]	; 0x3c
   12650:	movw	r0, #8200	; 0x2008
   12654:	mov	r5, r7
   12658:	ldr	r0, [r5, r0]!
   1265c:	sub	r1, r4, r0
   12660:	subs	r1, r6, r1
   12664:	ldr	r1, [sp, #96]	; 0x60
   12668:	sbcs	r1, r1, #0
   1266c:	bcs	126e8 <__assert_fail@plt+0x1630>
   12670:	movw	r1, #8196	; 0x2004
   12674:	ldr	r6, [r7, r1]
   12678:	ldr	r1, [sp, #112]	; 0x70
   1267c:	adds	sl, sl, r6
   12680:	adc	r1, r1, #0
   12684:	cmp	r6, #0
   12688:	str	r1, [sp, #112]	; 0x70
   1268c:	beq	126b0 <__assert_fail@plt+0x15f8>
   12690:	ldr	r3, [r8]
   12694:	mov	r0, r7
   12698:	mov	r1, #1
   1269c:	mov	r2, r6
   126a0:	bl	10ec0 <fwrite_unlocked@plt>
   126a4:	cmp	r0, r6
   126a8:	bcc	134e4 <__assert_fail@plt+0x242c>
   126ac:	ldr	r0, [r5]
   126b0:	movw	r1, #8204	; 0x200c
   126b4:	ldr	r6, [sp, #116]	; 0x74
   126b8:	sub	r4, r4, r0
   126bc:	ldr	r7, [r7, r1]
   126c0:	movw	r1, #8200	; 0x2008
   126c4:	mov	r5, r7
   126c8:	ldr	r1, [r5, r1]!
   126cc:	sub	r0, r4, r1
   126d0:	subs	r0, r6, r0
   126d4:	ldr	r0, [sp, #96]	; 0x60
   126d8:	sbcs	r0, r0, #0
   126dc:	mov	r0, r1
   126e0:	bcc	12670 <__assert_fail@plt+0x15b8>
   126e4:	b	126ec <__assert_fail@plt+0x1634>
   126e8:	mov	r1, r0
   126ec:	mov	r0, #1
   126f0:	str	r0, [sp, #80]	; 0x50
   126f4:	subs	r0, r6, r4
   126f8:	ldr	r0, [sp, #96]	; 0x60
   126fc:	sbcs	r0, r0, #0
   12700:	bcs	12a74 <__assert_fail@plt+0x19bc>
   12704:	subs	r0, r4, r6
   12708:	beq	12874 <__assert_fail@plt+0x17bc>
   1270c:	movw	r0, #8196	; 0x2004
   12710:	sub	r4, r6, r4
   12714:	add	r6, r1, #1
   12718:	ldr	r0, [r7, r0]
   1271c:	add	r8, r7, r0
   12720:	movw	r0, #37205	; 0x9155
   12724:	movt	r0, #2
   12728:	ldrb	r9, [r0, #2]
   1272c:	mov	r0, r7
   12730:	cmp	r9, #0
   12734:	movwne	r9, #10
   12738:	sub	r2, r8, r0
   1273c:	mov	r1, r9
   12740:	bl	11034 <memchr@plt>
   12744:	cmp	r0, #0
   12748:	beq	12908 <__assert_fail@plt+0x1850>
   1274c:	str	r6, [r5]
   12750:	adds	r4, r4, #1
   12754:	add	r6, r6, #1
   12758:	add	r0, r0, #1
   1275c:	bne	12738 <__assert_fail@plt+0x1680>
   12760:	b	1290c <__assert_fail@plt+0x1854>
   12764:	movw	r1, #33675	; 0x838b
   12768:	mov	r0, #0
   1276c:	mov	r2, #5
   12770:	str	r0, [sp, #80]	; 0x50
   12774:	mov	r0, #0
   12778:	movt	r1, #1
   1277c:	bl	10ed8 <dcgettext@plt>
   12780:	ldr	r1, [sp, #120]	; 0x78
   12784:	mov	r6, r0
   12788:	mov	r0, #4
   1278c:	bl	15470 <__assert_fail@plt+0x43b8>
   12790:	mov	r3, r0
   12794:	mov	r0, #0
   12798:	mov	r1, r4
   1279c:	mov	r2, r6
   127a0:	bl	10f5c <error@plt>
   127a4:	movw	sl, #37205	; 0x9155
   127a8:	ldr	r6, [sp, #116]	; 0x74
   127ac:	movw	r8, #37196	; 0x914c
   127b0:	movt	sl, #2
   127b4:	movt	r8, #2
   127b8:	mov	r7, sl
   127bc:	ldr	sl, [sp, #124]	; 0x7c
   127c0:	b	12d48 <__assert_fail@plt+0x1c90>
   127c4:	movw	r1, #33675	; 0x838b
   127c8:	mov	r0, #0
   127cc:	mov	r2, #5
   127d0:	movt	r1, #1
   127d4:	bl	10ed8 <dcgettext@plt>
   127d8:	ldr	r1, [sp, #120]	; 0x78
   127dc:	mov	r5, r0
   127e0:	mov	r0, #4
   127e4:	bl	15470 <__assert_fail@plt+0x43b8>
   127e8:	mov	r3, r0
   127ec:	mov	r1, r4
   127f0:	mov	r0, #0
   127f4:	mov	r2, r5
   127f8:	mov	r4, #0
   127fc:	bl	10f5c <error@plt>
   12800:	mov	r0, r8
   12804:	bl	13864 <__assert_fail@plt+0x27ac>
   12808:	movw	sl, #37205	; 0x9155
   1280c:	ldr	r6, [sp, #116]	; 0x74
   12810:	ldr	r9, [sp, #92]	; 0x5c
   12814:	movw	r8, #37196	; 0x914c
   12818:	movt	sl, #2
   1281c:	movt	r8, #2
   12820:	mov	r7, sl
   12824:	ldr	sl, [sp, #124]	; 0x7c
   12828:	b	12d80 <__assert_fail@plt+0x1cc8>
   1282c:	movw	r7, #37205	; 0x9155
   12830:	movt	r7, #2
   12834:	ldr	r0, [sp, #100]	; 0x64
   12838:	ldr	r5, [sp, #124]	; 0x7c
   1283c:	cmp	r0, #0
   12840:	bne	13098 <__assert_fail@plt+0x1fe0>
   12844:	b	13328 <__assert_fail@plt+0x2270>
   12848:	movw	sl, #37205	; 0x9155
   1284c:	ldr	r6, [sp, #116]	; 0x74
   12850:	movw	r8, #37196	; 0x914c
   12854:	mov	r0, #1
   12858:	str	r4, [sp, #112]	; 0x70
   1285c:	movt	sl, #2
   12860:	str	r0, [sp, #80]	; 0x50
   12864:	movt	r8, #2
   12868:	mov	r7, sl
   1286c:	ldr	sl, [sp, #124]	; 0x7c
   12870:	b	12d48 <__assert_fail@plt+0x1c90>
   12874:	mov	r0, r7
   12878:	b	1290c <__assert_fail@plt+0x1854>
   1287c:	mov	r0, #1
   12880:	movw	sl, #37205	; 0x9155
   12884:	movw	r8, #37196	; 0x914c
   12888:	str	r4, [sp, #112]	; 0x70
   1288c:	str	r0, [sp, #80]	; 0x50
   12890:	ldr	r0, [sp, #56]	; 0x38
   12894:	movt	sl, #2
   12898:	movt	r8, #2
   1289c:	mov	r7, sl
   128a0:	cmp	r9, r0
   128a4:	bne	12b64 <__assert_fail@plt+0x1aac>
   128a8:	ldr	r0, [sp, #24]
   128ac:	ldr	sl, [sp, #124]	; 0x7c
   128b0:	sub	r4, r6, r0
   128b4:	ldr	r0, [sp, #92]	; 0x5c
   128b8:	adds	r0, r0, r4
   128bc:	str	r0, [sp, #92]	; 0x5c
   128c0:	ldr	r0, [sp, #112]	; 0x70
   128c4:	adc	r0, r0, #0
   128c8:	cmp	r4, #0
   128cc:	str	r0, [sp, #112]	; 0x70
   128d0:	beq	12d44 <__assert_fail@plt+0x1c8c>
   128d4:	ldr	r0, [sp, #88]	; 0x58
   128d8:	ldr	r3, [r8]
   128dc:	mov	r1, #1
   128e0:	mov	r2, r4
   128e4:	str	r1, [sp, #80]	; 0x50
   128e8:	mov	r1, #1
   128ec:	ldr	r0, [r0, r5, lsl #2]
   128f0:	bl	10ec0 <fwrite_unlocked@plt>
   128f4:	ldr	r6, [sp, #116]	; 0x74
   128f8:	cmp	r0, r4
   128fc:	ldr	r9, [sp, #92]	; 0x5c
   12900:	bcs	12d4c <__assert_fail@plt+0x1c94>
   12904:	b	134e4 <__assert_fail@plt+0x242c>
   12908:	mov	r0, #0
   1290c:	sub	r6, r0, r7
   12910:	ldr	r0, [sp, #112]	; 0x70
   12914:	adds	sl, sl, r6
   12918:	adc	r0, r0, r6, asr #31
   1291c:	cmp	r6, #0
   12920:	str	r0, [sp, #112]	; 0x70
   12924:	beq	12a68 <__assert_fail@plt+0x19b0>
   12928:	movw	r8, #37196	; 0x914c
   1292c:	mov	r0, #1
   12930:	mov	r1, #1
   12934:	mov	r2, r6
   12938:	movt	r8, #2
   1293c:	str	r0, [sp, #80]	; 0x50
   12940:	mov	r0, r7
   12944:	ldr	r3, [r8]
   12948:	bl	10ec0 <fwrite_unlocked@plt>
   1294c:	cmp	r0, r6
   12950:	ldr	r6, [sp, #116]	; 0x74
   12954:	movw	r7, #37205	; 0x9155
   12958:	movt	r7, #2
   1295c:	bcc	134e4 <__assert_fail@plt+0x242c>
   12960:	ldr	r0, [sp, #60]	; 0x3c
   12964:	movw	r5, #8204	; 0x200c
   12968:	cmp	r0, #0
   1296c:	beq	12984 <__assert_fail@plt+0x18cc>
   12970:	ldr	r4, [r0, r5]
   12974:	bl	13864 <__assert_fail@plt+0x27ac>
   12978:	cmp	r4, #0
   1297c:	mov	r0, r4
   12980:	bne	12970 <__assert_fail@plt+0x18b8>
   12984:	ldr	r0, [sp, #52]	; 0x34
   12988:	mvn	r1, #0
   1298c:	ldr	r9, [sp, #120]	; 0x78
   12990:	subs	r0, r1, r0
   12994:	ldr	r0, [sp, #48]	; 0x30
   12998:	sbcs	r0, r1, r0
   1299c:	bge	12a50 <__assert_fail@plt+0x1998>
   129a0:	mov	r0, #0
   129a4:	ldr	r4, [sp, #112]	; 0x70
   129a8:	mov	r2, sl
   129ac:	str	r0, [sp]
   129b0:	ldr	r0, [sp, #124]	; 0x7c
   129b4:	mov	r3, r4
   129b8:	bl	10f2c <lseek64@plt>
   129bc:	mov	r5, r1
   129c0:	cmn	r1, #1
   129c4:	bgt	12a48 <__assert_fail@plt+0x1990>
   129c8:	bl	10fec <__errno_location@plt>
   129cc:	ldr	r8, [r0]
   129d0:	movw	r1, #33608	; 0x8348
   129d4:	mov	r0, #0
   129d8:	mov	r2, #5
   129dc:	movt	r1, #1
   129e0:	bl	10ed8 <dcgettext@plt>
   129e4:	mov	r7, r4
   129e8:	mov	r4, sl
   129ec:	mov	sl, r0
   129f0:	mov	r0, #0
   129f4:	mov	r1, #3
   129f8:	mov	r2, r9
   129fc:	bl	156ec <__assert_fail@plt+0x4634>
   12a00:	sub	lr, fp, #8192	; 0x2000
   12a04:	mov	r6, r0
   12a08:	mov	r0, r4
   12a0c:	mov	r1, r7
   12a10:	sub	r2, lr, #53	; 0x35
   12a14:	bl	13900 <__assert_fail@plt+0x2848>
   12a18:	mov	r3, r6
   12a1c:	ldr	r6, [sp, #116]	; 0x74
   12a20:	mov	r2, sl
   12a24:	movw	sl, #37205	; 0x9155
   12a28:	str	r0, [sp]
   12a2c:	mov	r1, r8
   12a30:	movw	r8, #37196	; 0x914c
   12a34:	mov	r0, #0
   12a38:	movt	sl, #2
   12a3c:	movt	r8, #2
   12a40:	mov	r7, sl
   12a44:	bl	10f5c <error@plt>
   12a48:	ldr	r4, [sp, #80]	; 0x50
   12a4c:	b	12e44 <__assert_fail@plt+0x1d8c>
   12a50:	ldr	r4, [sp, #80]	; 0x50
   12a54:	ldr	r0, [sp, #100]	; 0x64
   12a58:	ldr	r5, [sp, #124]	; 0x7c
   12a5c:	cmp	r0, #0
   12a60:	bne	13098 <__assert_fail@plt+0x1fe0>
   12a64:	b	13328 <__assert_fail@plt+0x2270>
   12a68:	ldr	r6, [sp, #116]	; 0x74
   12a6c:	movw	r8, #37196	; 0x914c
   12a70:	movt	r8, #2
   12a74:	movw	r7, #37205	; 0x9155
   12a78:	movt	r7, #2
   12a7c:	ldr	r0, [sp, #60]	; 0x3c
   12a80:	movw	r5, #8204	; 0x200c
   12a84:	cmp	r0, #0
   12a88:	bne	12970 <__assert_fail@plt+0x18b8>
   12a8c:	b	12984 <__assert_fail@plt+0x18cc>
   12a90:	bl	10fec <__errno_location@plt>
   12a94:	ldr	r4, [r0]
   12a98:	movw	r1, #33608	; 0x8348
   12a9c:	mov	r0, #0
   12aa0:	mov	r2, #5
   12aa4:	str	r0, [sp, #80]	; 0x50
   12aa8:	mov	r0, #0
   12aac:	movt	r1, #1
   12ab0:	bl	10ed8 <dcgettext@plt>
   12ab4:	mov	r6, r0
   12ab8:	mov	r0, #0
   12abc:	mov	r1, #3
   12ac0:	mov	r2, r9
   12ac4:	bl	156ec <__assert_fail@plt+0x4634>
   12ac8:	sub	lr, fp, #8192	; 0x2000
   12acc:	mov	r5, r0
   12ad0:	mov	r0, r8
   12ad4:	mov	r1, sl
   12ad8:	sub	r2, lr, #53	; 0x35
   12adc:	bl	13900 <__assert_fail@plt+0x2848>
   12ae0:	mov	r2, r6
   12ae4:	ldr	r6, [sp, #116]	; 0x74
   12ae8:	str	r0, [sp]
   12aec:	mov	r0, #0
   12af0:	mov	r1, r4
   12af4:	mov	r3, r5
   12af8:	bl	10f5c <error@plt>
   12afc:	b	12f70 <__assert_fail@plt+0x1eb8>
   12b00:	ldr	r6, [sp, #116]	; 0x74
   12b04:	ldr	sl, [sp, #124]	; 0x7c
   12b08:	cmp	r4, #0
   12b0c:	beq	12b28 <__assert_fail@plt+0x1a70>
   12b10:	ldr	r3, [r8]
   12b14:	mov	r1, #1
   12b18:	mov	r2, r4
   12b1c:	bl	10ec0 <fwrite_unlocked@plt>
   12b20:	cmp	r0, r4
   12b24:	bcc	134e4 <__assert_fail@plt+0x242c>
   12b28:	ldr	r0, [sp, #28]
   12b2c:	subs	r4, r0, r4
   12b30:	beq	12d48 <__assert_fail@plt+0x1c90>
   12b34:	ldr	r0, [sp, #88]	; 0x58
   12b38:	ldr	r3, [r8]
   12b3c:	mov	r1, #1
   12b40:	mov	r2, r4
   12b44:	str	r1, [sp, #80]	; 0x50
   12b48:	mov	r1, #1
   12b4c:	ldr	r0, [r0, r5, lsl #2]
   12b50:	bl	10ec0 <fwrite_unlocked@plt>
   12b54:	cmp	r0, r4
   12b58:	ldr	r9, [sp, #92]	; 0x5c
   12b5c:	bcs	12d4c <__assert_fail@plt+0x1c94>
   12b60:	b	134e4 <__assert_fail@plt+0x242c>
   12b64:	ldr	r6, [sp, #116]	; 0x74
   12b68:	ldr	sl, [sp, #124]	; 0x7c
   12b6c:	b	12d48 <__assert_fail@plt+0x1c90>
   12b70:	mov	r0, #1
   12b74:	b	12b7c <__assert_fail@plt+0x1ac4>
   12b78:	mov	r0, #2
   12b7c:	mov	r1, r9
   12b80:	bl	136c0 <__assert_fail@plt+0x2608>
   12b84:	ldr	r6, [sp, #116]	; 0x74
   12b88:	mov	r4, #0
   12b8c:	ldr	r0, [sp, #100]	; 0x64
   12b90:	ldr	r5, [sp, #124]	; 0x7c
   12b94:	cmp	r0, #0
   12b98:	bne	13098 <__assert_fail@plt+0x1fe0>
   12b9c:	b	13328 <__assert_fail@plt+0x2270>
   12ba0:	ldr	sl, [sp, #112]	; 0x70
   12ba4:	ldr	r7, [sp, #52]	; 0x34
   12ba8:	ldr	r6, [sp, #48]	; 0x30
   12bac:	subs	r0, r7, r8
   12bb0:	sbcs	r0, r6, sl
   12bb4:	bge	12c58 <__assert_fail@plt+0x1ba0>
   12bb8:	mov	r0, #0
   12bbc:	mov	r2, r7
   12bc0:	mov	r3, r6
   12bc4:	str	r0, [sp]
   12bc8:	ldr	r0, [sp, #124]	; 0x7c
   12bcc:	bl	10f2c <lseek64@plt>
   12bd0:	cmn	r1, #1
   12bd4:	ble	12e80 <__assert_fail@plt+0x1dc8>
   12bd8:	subs	r4, r8, r7
   12bdc:	sbc	r7, sl, r6
   12be0:	orrs	r0, r4, r7
   12be4:	add	r1, sp, #235	; 0xeb
   12be8:	beq	12c58 <__assert_fail@plt+0x1ba0>
   12bec:	subs	r0, r4, #8192	; 0x2000
   12bf0:	mov	r2, #8192	; 0x2000
   12bf4:	sbcs	r0, r7, #0
   12bf8:	ldr	r0, [sp, #124]	; 0x7c
   12bfc:	movcc	r2, r4
   12c00:	bl	159b0 <__assert_fail@plt+0x48f8>
   12c04:	cmn	r0, #1
   12c08:	beq	12ee8 <__assert_fail@plt+0x1e30>
   12c0c:	subs	r4, r4, r0
   12c10:	mov	r6, r0
   12c14:	sbc	r7, r7, #0
   12c18:	cmp	r0, #0
   12c1c:	bne	12c28 <__assert_fail@plt+0x1b70>
   12c20:	orrs	r0, r4, r7
   12c24:	bne	12ef0 <__assert_fail@plt+0x1e38>
   12c28:	cmp	r6, #0
   12c2c:	beq	12be0 <__assert_fail@plt+0x1b28>
   12c30:	movw	r0, #37196	; 0x914c
   12c34:	mov	r1, #1
   12c38:	mov	r2, r6
   12c3c:	movt	r0, #2
   12c40:	ldr	r3, [r0]
   12c44:	add	r0, sp, #235	; 0xeb
   12c48:	bl	10ec0 <fwrite_unlocked@plt>
   12c4c:	cmp	r0, r6
   12c50:	bcs	12be0 <__assert_fail@plt+0x1b28>
   12c54:	b	1358c <__assert_fail@plt+0x24d4>
   12c58:	adds	r6, r5, #1
   12c5c:	beq	12c88 <__assert_fail@plt+0x1bd0>
   12c60:	movw	r0, #37196	; 0x914c
   12c64:	sub	lr, fp, #8192	; 0x2000
   12c68:	mov	r1, #1
   12c6c:	mov	r2, r6
   12c70:	movt	r0, #2
   12c74:	ldr	r3, [r0]
   12c78:	sub	r0, lr, #32
   12c7c:	bl	10ec0 <fwrite_unlocked@plt>
   12c80:	cmp	r0, r6
   12c84:	bcc	1358c <__assert_fail@plt+0x24d4>
   12c88:	mov	r0, #0
   12c8c:	str	r0, [sp]
   12c90:	adds	r0, r8, r5
   12c94:	adc	r1, sl, #0
   12c98:	adds	r6, r0, #1
   12c9c:	ldr	r0, [sp, #124]	; 0x7c
   12ca0:	adc	r7, r1, #0
   12ca4:	mov	r2, r6
   12ca8:	mov	r3, r7
   12cac:	bl	10f2c <lseek64@plt>
   12cb0:	mov	r4, r0
   12cb4:	mov	r5, r1
   12cb8:	cmn	r1, #1
   12cbc:	bgt	12d24 <__assert_fail@plt+0x1c6c>
   12cc0:	bl	10fec <__errno_location@plt>
   12cc4:	ldr	r0, [r0]
   12cc8:	movw	r1, #33608	; 0x8348
   12ccc:	mov	r2, #5
   12cd0:	movt	r1, #1
   12cd4:	str	r0, [sp, #112]	; 0x70
   12cd8:	mov	r0, #0
   12cdc:	bl	10ed8 <dcgettext@plt>
   12ce0:	mov	sl, r0
   12ce4:	mov	r0, #0
   12ce8:	mov	r1, #3
   12cec:	mov	r2, r9
   12cf0:	bl	156ec <__assert_fail@plt+0x4634>
   12cf4:	sub	lr, fp, #8192	; 0x2000
   12cf8:	mov	r8, r0
   12cfc:	mov	r0, r6
   12d00:	mov	r1, r7
   12d04:	sub	r2, lr, #53	; 0x35
   12d08:	bl	13900 <__assert_fail@plt+0x2848>
   12d0c:	ldr	r1, [sp, #112]	; 0x70
   12d10:	str	r0, [sp]
   12d14:	mov	r0, #0
   12d18:	mov	r2, sl
   12d1c:	mov	r3, r8
   12d20:	bl	10f5c <error@plt>
   12d24:	mvn	r1, #0
   12d28:	subs	r0, r1, r4
   12d2c:	sbcs	r0, r1, r5
   12d30:	mov	r0, #0
   12d34:	movwlt	r0, #1
   12d38:	ldr	r6, [sp, #116]	; 0x74
   12d3c:	str	r0, [sp, #80]	; 0x50
   12d40:	b	12f70 <__assert_fail@plt+0x1eb8>
   12d44:	ldr	r6, [sp, #116]	; 0x74
   12d48:	ldr	r9, [sp, #92]	; 0x5c
   12d4c:	ldr	r0, [sp, #60]	; 0x3c
   12d50:	cmp	r0, #0
   12d54:	beq	12d74 <__assert_fail@plt+0x1cbc>
   12d58:	ldr	r4, [sp, #88]	; 0x58
   12d5c:	mov	r5, r0
   12d60:	ldr	r0, [r4], #4
   12d64:	bl	13864 <__assert_fail@plt+0x27ac>
   12d68:	mov	r0, r5
   12d6c:	subs	r0, r5, #1
   12d70:	bne	12d5c <__assert_fail@plt+0x1ca4>
   12d74:	ldr	r0, [sp, #88]	; 0x58
   12d78:	bl	13864 <__assert_fail@plt+0x27ac>
   12d7c:	ldr	r4, [sp, #80]	; 0x50
   12d80:	ldr	r0, [sp, #52]	; 0x34
   12d84:	mvn	r1, #0
   12d88:	subs	r0, r1, r0
   12d8c:	ldr	r0, [sp, #48]	; 0x30
   12d90:	sbcs	r0, r1, r0
   12d94:	bge	12e68 <__assert_fail@plt+0x1db0>
   12d98:	mov	r0, #0
   12d9c:	mov	r2, r9
   12da0:	str	r0, [sp]
   12da4:	mov	r0, sl
   12da8:	ldr	sl, [sp, #112]	; 0x70
   12dac:	mov	r3, sl
   12db0:	bl	10f2c <lseek64@plt>
   12db4:	mov	r0, r9
   12db8:	ldr	r9, [sp, #120]	; 0x78
   12dbc:	mov	r5, r1
   12dc0:	cmn	r1, #1
   12dc4:	bgt	12e44 <__assert_fail@plt+0x1d8c>
   12dc8:	mov	r7, r0
   12dcc:	bl	10fec <__errno_location@plt>
   12dd0:	ldr	r0, [r0]
   12dd4:	movw	r1, #33608	; 0x8348
   12dd8:	mov	r2, #5
   12ddc:	movt	r1, #1
   12de0:	str	r0, [sp, #92]	; 0x5c
   12de4:	mov	r0, #0
   12de8:	bl	10ed8 <dcgettext@plt>
   12dec:	mov	r6, r0
   12df0:	mov	r0, #0
   12df4:	mov	r1, #3
   12df8:	mov	r2, r9
   12dfc:	bl	156ec <__assert_fail@plt+0x4634>
   12e00:	sub	lr, fp, #8192	; 0x2000
   12e04:	str	r4, [sp, #80]	; 0x50
   12e08:	mov	r4, r0
   12e0c:	mov	r0, r7
   12e10:	mov	r1, sl
   12e14:	sub	r2, lr, #53	; 0x35
   12e18:	bl	13900 <__assert_fail@plt+0x2848>
   12e1c:	ldr	r1, [sp, #92]	; 0x5c
   12e20:	mov	r2, r6
   12e24:	mov	r3, r4
   12e28:	ldr	r6, [sp, #116]	; 0x74
   12e2c:	ldr	r4, [sp, #80]	; 0x50
   12e30:	movw	r7, #37205	; 0x9155
   12e34:	str	r0, [sp]
   12e38:	mov	r0, #0
   12e3c:	movt	r7, #2
   12e40:	bl	10f5c <error@plt>
   12e44:	cmn	r5, #1
   12e48:	mov	r0, #0
   12e4c:	movwgt	r0, #1
   12e50:	and	r4, r4, r0
   12e54:	ldr	r0, [sp, #100]	; 0x64
   12e58:	ldr	r5, [sp, #124]	; 0x7c
   12e5c:	cmp	r0, #0
   12e60:	bne	13098 <__assert_fail@plt+0x1fe0>
   12e64:	b	13328 <__assert_fail@plt+0x2270>
   12e68:	ldr	r9, [sp, #120]	; 0x78
   12e6c:	ldr	r0, [sp, #100]	; 0x64
   12e70:	ldr	r5, [sp, #124]	; 0x7c
   12e74:	cmp	r0, #0
   12e78:	bne	13098 <__assert_fail@plt+0x1fe0>
   12e7c:	b	13328 <__assert_fail@plt+0x2270>
   12e80:	bl	10fec <__errno_location@plt>
   12e84:	ldr	r4, [r0]
   12e88:	movw	r1, #33608	; 0x8348
   12e8c:	mov	r0, #0
   12e90:	mov	r2, #5
   12e94:	str	r0, [sp, #80]	; 0x50
   12e98:	mov	r0, #0
   12e9c:	movt	r1, #1
   12ea0:	bl	10ed8 <dcgettext@plt>
   12ea4:	mov	r5, r0
   12ea8:	mov	r0, #0
   12eac:	mov	r1, #3
   12eb0:	mov	r2, r9
   12eb4:	bl	156ec <__assert_fail@plt+0x4634>
   12eb8:	sub	lr, fp, #8192	; 0x2000
   12ebc:	mov	r1, r6
   12ec0:	mov	r6, r0
   12ec4:	mov	r0, r7
   12ec8:	sub	r2, lr, #53	; 0x35
   12ecc:	bl	13900 <__assert_fail@plt+0x2848>
   12ed0:	str	r0, [sp]
   12ed4:	mov	r0, #0
   12ed8:	mov	r1, r4
   12edc:	mov	r2, r5
   12ee0:	mov	r3, r6
   12ee4:	b	12f68 <__assert_fail@plt+0x1eb0>
   12ee8:	mov	r0, #1
   12eec:	b	12ef4 <__assert_fail@plt+0x1e3c>
   12ef0:	mov	r0, #2
   12ef4:	mov	r1, r9
   12ef8:	bl	136c0 <__assert_fail@plt+0x2608>
   12efc:	mov	r0, #0
   12f00:	b	12d38 <__assert_fail@plt+0x1c80>
   12f04:	bl	10fec <__errno_location@plt>
   12f08:	ldr	r4, [r0]
   12f0c:	movw	r1, #33608	; 0x8348
   12f10:	mov	r0, #0
   12f14:	mov	r2, #5
   12f18:	str	r0, [sp, #80]	; 0x50
   12f1c:	mov	r0, #0
   12f20:	movt	r1, #1
   12f24:	bl	10ed8 <dcgettext@plt>
   12f28:	mov	r6, r0
   12f2c:	mov	r0, #0
   12f30:	mov	r1, #3
   12f34:	mov	r2, r9
   12f38:	bl	156ec <__assert_fail@plt+0x4634>
   12f3c:	sub	lr, fp, #8192	; 0x2000
   12f40:	mov	r5, r0
   12f44:	mov	r0, r8
   12f48:	mov	r1, sl
   12f4c:	sub	r2, lr, #53	; 0x35
   12f50:	bl	13900 <__assert_fail@plt+0x2848>
   12f54:	str	r0, [sp]
   12f58:	mov	r0, #0
   12f5c:	mov	r1, r4
   12f60:	mov	r2, r6
   12f64:	mov	r3, r5
   12f68:	bl	10f5c <error@plt>
   12f6c:	ldr	r6, [sp, #116]	; 0x74
   12f70:	ldr	r4, [sp, #80]	; 0x50
   12f74:	movw	sl, #37205	; 0x9155
   12f78:	movw	r8, #37196	; 0x914c
   12f7c:	movt	sl, #2
   12f80:	movt	r8, #2
   12f84:	mov	r7, sl
   12f88:	ldr	r0, [sp, #100]	; 0x64
   12f8c:	ldr	r5, [sp, #124]	; 0x7c
   12f90:	cmp	r0, #0
   12f94:	bne	13098 <__assert_fail@plt+0x1fe0>
   12f98:	b	13328 <__assert_fail@plt+0x2270>
   12f9c:	str	r1, [sp, #108]	; 0x6c
   12fa0:	movw	r1, #34109	; 0x853d
   12fa4:	mov	r0, r9
   12fa8:	str	r2, [sp, #104]	; 0x68
   12fac:	movt	r1, #1
   12fb0:	bl	10e60 <strcmp@plt>
   12fb4:	cmp	r0, #0
   12fb8:	str	r0, [sp, #100]	; 0x64
   12fbc:	beq	132b0 <__assert_fail@plt+0x21f8>
   12fc0:	mov	r0, r9
   12fc4:	mov	r1, #0
   12fc8:	bl	10f68 <open64@plt>
   12fcc:	cmn	r0, #1
   12fd0:	ble	132e4 <__assert_fail@plt+0x222c>
   12fd4:	mov	r5, r0
   12fd8:	ldrb	r0, [r7, #1]
   12fdc:	cmp	r0, #1
   12fe0:	bne	1301c <__assert_fail@plt+0x1f64>
   12fe4:	ldrb	r0, [r7, #4]
   12fe8:	movw	r2, #33409	; 0x8281
   12fec:	movw	r1, #33594	; 0x833a
   12ff0:	mov	r3, r9
   12ff4:	movt	r2, #1
   12ff8:	movt	r1, #1
   12ffc:	cmp	r0, #0
   13000:	movw	r0, #33408	; 0x8280
   13004:	movt	r0, #1
   13008:	movne	r2, r0
   1300c:	mov	r0, #1
   13010:	bl	11010 <__printf_chk@plt>
   13014:	mov	r0, #1
   13018:	strb	r0, [r7, #4]
   1301c:	ldr	r0, [sp, #76]	; 0x4c
   13020:	str	r5, [sp, #124]	; 0x7c
   13024:	tst	r0, #1
   13028:	beq	130c0 <__assert_fail@plt+0x2008>
   1302c:	mov	r0, #3
   13030:	mov	r1, r5
   13034:	add	r2, sp, #128	; 0x80
   13038:	bl	10f14 <__fxstat64@plt>
   1303c:	cmp	r0, #0
   13040:	beq	118f0 <__assert_fail@plt+0x838>
   13044:	bl	10fec <__errno_location@plt>
   13048:	ldr	r4, [r0]
   1304c:	movw	r1, #33578	; 0x832a
   13050:	mov	r0, #0
   13054:	mov	r2, #5
   13058:	movt	r1, #1
   1305c:	bl	10ed8 <dcgettext@plt>
   13060:	mov	r5, r0
   13064:	mov	r0, #4
   13068:	mov	r1, r9
   1306c:	bl	15470 <__assert_fail@plt+0x43b8>
   13070:	mov	r3, r0
   13074:	mov	r1, r4
   13078:	mov	r0, #0
   1307c:	mov	r2, r5
   13080:	mov	r4, #0
   13084:	bl	10f5c <error@plt>
   13088:	ldr	r0, [sp, #100]	; 0x64
   1308c:	ldr	r5, [sp, #124]	; 0x7c
   13090:	cmp	r0, #0
   13094:	beq	13328 <__assert_fail@plt+0x2270>
   13098:	mov	r0, r5
   1309c:	bl	110ac <close@plt>
   130a0:	cmp	r0, #0
   130a4:	beq	13328 <__assert_fail@plt+0x2270>
   130a8:	bl	10fec <__errno_location@plt>
   130ac:	ldr	r4, [r0]
   130b0:	movw	r1, #33559	; 0x8317
   130b4:	mov	r0, #0
   130b8:	movt	r1, #1
   130bc:	b	132f8 <__assert_fail@plt+0x2240>
   130c0:	ldr	r0, [sp, #68]	; 0x44
   130c4:	mov	sl, r7
   130c8:	ldr	r7, [sp, #96]	; 0x60
   130cc:	add	r1, sp, #235	; 0xeb
   130d0:	tst	r0, #1
   130d4:	beq	11864 <__assert_fail@plt+0x7ac>
   130d8:	orrs	r0, r6, r7
   130dc:	mov	r4, #1
   130e0:	beq	118dc <__assert_fail@plt+0x824>
   130e4:	mov	r4, r7
   130e8:	mov	r7, sl
   130ec:	str	r9, [sp, #120]	; 0x78
   130f0:	mov	r0, r5
   130f4:	mov	r2, #8192	; 0x2000
   130f8:	bl	159b0 <__assert_fail@plt+0x48f8>
   130fc:	cmn	r0, #1
   13100:	beq	11950 <__assert_fail@plt+0x898>
   13104:	cmp	r0, #0
   13108:	beq	13298 <__assert_fail@plt+0x21e0>
   1310c:	ldrb	r1, [r7, #2]
   13110:	mov	sl, r7
   13114:	mov	r2, #0
   13118:	add	r5, sp, #235	; 0xeb
   1311c:	cmp	r1, #0
   13120:	movwne	r1, #10
   13124:	mov	r7, r2
   13128:	ldrb	r2, [r5, r2]
   1312c:	cmp	r1, r2
   13130:	bne	13144 <__assert_fail@plt+0x208c>
   13134:	subs	r6, r6, #1
   13138:	sbc	r4, r4, #0
   1313c:	orrs	r2, r6, r4
   13140:	beq	13154 <__assert_fail@plt+0x209c>
   13144:	add	r2, r7, #1
   13148:	cmp	r0, r2
   1314c:	bhi	13124 <__assert_fail@plt+0x206c>
   13150:	b	1325c <__assert_fail@plt+0x21a4>
   13154:	sub	r0, r0, #1
   13158:	mov	r6, #0
   1315c:	mov	r1, #1
   13160:	sub	r0, r0, r7
   13164:	str	r1, [sp]
   13168:	rsbs	r9, r0, #0
   1316c:	ldr	r0, [sp, #124]	; 0x7c
   13170:	sbc	r8, r6, #0
   13174:	mov	r2, r9
   13178:	mov	r3, r8
   1317c:	bl	10f2c <lseek64@plt>
   13180:	add	r5, sp, #235	; 0xeb
   13184:	cmn	r1, #1
   13188:	mov	r4, #0
   1318c:	bgt	1325c <__assert_fail@plt+0x21a4>
   13190:	ldr	r1, [sp, #124]	; 0x7c
   13194:	sub	lr, fp, #8192	; 0x2000
   13198:	mov	r0, #3
   1319c:	sub	r4, lr, #32
   131a0:	mov	r2, r4
   131a4:	bl	10f14 <__fxstat64@plt>
   131a8:	cmp	r0, #0
   131ac:	bne	131c0 <__assert_fail@plt+0x2108>
   131b0:	ldr	r0, [r4, #16]
   131b4:	and	r0, r0, #61440	; 0xf000
   131b8:	cmp	r0, #32768	; 0x8000
   131bc:	bne	13250 <__assert_fail@plt+0x2198>
   131c0:	mov	r0, #1
   131c4:	mov	r2, r9
   131c8:	mov	r3, r8
   131cc:	str	r0, [sp]
   131d0:	ldr	r0, [sp, #124]	; 0x7c
   131d4:	bl	10f2c <lseek64@plt>
   131d8:	cmn	r1, #1
   131dc:	bgt	13250 <__assert_fail@plt+0x2198>
   131e0:	bl	10fec <__errno_location@plt>
   131e4:	mov	r4, r8
   131e8:	ldr	r8, [r0]
   131ec:	movw	r1, #33637	; 0x8365
   131f0:	mov	r0, #0
   131f4:	mov	r2, #5
   131f8:	movt	r1, #1
   131fc:	bl	10ed8 <dcgettext@plt>
   13200:	ldr	r2, [sp, #120]	; 0x78
   13204:	mov	r5, r9
   13208:	mov	r9, r0
   1320c:	mov	r0, #0
   13210:	mov	r1, #3
   13214:	bl	156ec <__assert_fail@plt+0x4634>
   13218:	sub	lr, fp, #8192	; 0x2000
   1321c:	mov	r6, r0
   13220:	mov	r0, r5
   13224:	mov	r1, r4
   13228:	sub	r2, lr, #53	; 0x35
   1322c:	bl	13900 <__assert_fail@plt+0x2848>
   13230:	movw	sl, #37205	; 0x9155
   13234:	str	r0, [sp]
   13238:	mov	r0, #0
   1323c:	mov	r1, r8
   13240:	mov	r2, r9
   13244:	mov	r3, r6
   13248:	movt	sl, #2
   1324c:	bl	10f5c <error@plt>
   13250:	mov	r6, #0
   13254:	mov	r4, #0
   13258:	add	r5, sp, #235	; 0xeb
   1325c:	movw	r8, #37196	; 0x914c
   13260:	add	r2, r7, #1
   13264:	mov	r0, r5
   13268:	mov	r1, #1
   1326c:	movt	r8, #2
   13270:	ldr	r3, [r8]
   13274:	bl	10ec0 <fwrite_unlocked@plt>
   13278:	cmp	r0, r7
   1327c:	bls	134e4 <__assert_fail@plt+0x242c>
   13280:	ldr	r9, [sp, #120]	; 0x78
   13284:	ldr	r5, [sp, #124]	; 0x7c
   13288:	orrs	r0, r6, r4
   1328c:	add	r1, sp, #235	; 0xeb
   13290:	mov	r7, sl
   13294:	bne	130f0 <__assert_fail@plt+0x2038>
   13298:	ldr	r6, [sp, #116]	; 0x74
   1329c:	ldr	r0, [sp, #100]	; 0x64
   132a0:	mov	r4, #1
   132a4:	cmp	r0, #0
   132a8:	bne	13098 <__assert_fail@plt+0x1fe0>
   132ac:	b	13328 <__assert_fail@plt+0x2270>
   132b0:	movw	r1, #33517	; 0x82ed
   132b4:	mov	r0, #1
   132b8:	mov	r2, #5
   132bc:	mov	r5, #0
   132c0:	strb	r0, [r7]
   132c4:	mov	r0, #0
   132c8:	movt	r1, #1
   132cc:	bl	10ed8 <dcgettext@plt>
   132d0:	mov	r9, r0
   132d4:	ldrb	r0, [r7, #1]
   132d8:	cmp	r0, #1
   132dc:	beq	12fe4 <__assert_fail@plt+0x1f2c>
   132e0:	b	1301c <__assert_fail@plt+0x1f64>
   132e4:	bl	10fec <__errno_location@plt>
   132e8:	ldr	r4, [r0]
   132ec:	movw	r1, #33532	; 0x82fc
   132f0:	mov	r0, #0
   132f4:	movt	r1, #1
   132f8:	mov	r2, #5
   132fc:	bl	10ed8 <dcgettext@plt>
   13300:	mov	r5, r0
   13304:	mov	r0, #4
   13308:	mov	r1, r9
   1330c:	bl	15470 <__assert_fail@plt+0x43b8>
   13310:	mov	r3, r0
   13314:	mov	r1, r4
   13318:	mov	r0, #0
   1331c:	mov	r2, r5
   13320:	mov	r4, #0
   13324:	bl	10f5c <error@plt>
   13328:	ldr	r2, [sp, #104]	; 0x68
   1332c:	ldr	r0, [sp, #84]	; 0x54
   13330:	ldr	r1, [sp, #108]	; 0x6c
   13334:	add	r2, r2, #1
   13338:	and	r1, r1, r4
   1333c:	ldr	r9, [r0, r2, lsl #2]
   13340:	cmp	r9, #0
   13344:	bne	12f9c <__assert_fail@plt+0x1ee4>
   13348:	eor	r5, r1, #1
   1334c:	ldrb	r0, [r7]
   13350:	cmp	r0, #1
   13354:	bne	13368 <__assert_fail@plt+0x22b0>
   13358:	mov	r0, #0
   1335c:	bl	110ac <close@plt>
   13360:	cmn	r0, #1
   13364:	ble	136a8 <__assert_fail@plt+0x25f0>
   13368:	mov	r0, r5
   1336c:	sub	sp, fp, #28
   13370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13374:	ldrb	r3, [r7, #1]!
   13378:	b	13388 <__assert_fail@plt+0x22d0>
   1337c:	mov	r1, #0
   13380:	mov	r2, r3
   13384:	b	13374 <__assert_fail@plt+0x22bc>
   13388:	mov	ip, r1
   1338c:	mvn	r1, #97	; 0x61
   13390:	mov	lr, r2
   13394:	uxtab	r8, r1, r3
   13398:	cmp	r8, #24
   1339c:	bhi	13450 <__assert_fail@plt+0x2398>
   133a0:	add	sl, pc, #8
   133a4:	mov	r1, #0
   133a8:	mov	r2, #0
   133ac:	ldr	pc, [sl, r8, lsl #2]
   133b0:	andeq	r3, r1, ip, ror r3
   133b4:	andeq	r3, r1, r4, ror r3
   133b8:	andeq	r3, r1, r8, ror #11
   133bc:	andeq	r3, r1, r8, ror #11
   133c0:	andeq	r3, r1, r8, ror #11
   133c4:	andeq	r3, r1, r8, ror #11
   133c8:	andeq	r3, r1, r8, ror #11
   133cc:	andeq	r3, r1, r8, ror #11
   133d0:	andeq	r3, r1, r8, ror #11
   133d4:	andeq	r3, r1, ip, ror r3
   133d8:	andeq	r3, r1, r4, lsl r4
   133dc:	andeq	r3, r1, ip, ror r3
   133e0:	andeq	r3, r1, r8, ror #11
   133e4:	andeq	r3, r1, r8, ror #11
   133e8:	andeq	r3, r1, r8, ror #11
   133ec:	andeq	r3, r1, r0, lsr r4
   133f0:	andeq	r3, r1, r8, ror #11
   133f4:	andeq	r3, r1, r8, ror #11
   133f8:	andeq	r3, r1, r8, ror #11
   133fc:	andeq	r3, r1, r8, ror #11
   13400:	andeq	r3, r1, r8, lsr r4
   13404:	andeq	r3, r1, r8, ror #11
   13408:	andeq	r3, r1, r8, ror #11
   1340c:	andeq	r3, r1, r8, ror #11
   13410:	andeq	r3, r1, ip, lsl r4
   13414:	mov	r1, #1
   13418:	b	13444 <__assert_fail@plt+0x238c>
   1341c:	movw	r1, #37205	; 0x9155
   13420:	mov	r2, #0
   13424:	movt	r1, #2
   13428:	strb	r2, [r1, #2]
   1342c:	b	13440 <__assert_fail@plt+0x2388>
   13430:	mov	r1, #2
   13434:	b	1343c <__assert_fail@plt+0x2384>
   13438:	mov	r1, #1
   1343c:	str	r1, [sp, #124]	; 0x7c
   13440:	mov	r1, ip
   13444:	ldrb	r3, [r7, #1]!
   13448:	mov	r2, lr
   1344c:	b	13388 <__assert_fail@plt+0x22d0>
   13450:	uxtb	r1, r3
   13454:	cmp	r1, #0
   13458:	bne	135e8 <__assert_fail@plt+0x2530>
   1345c:	tst	lr, #255	; 0xff
   13460:	strb	lr, [r0]
   13464:	mov	r2, #5
   13468:	mov	r7, #0
   1346c:	movne	r1, #0
   13470:	strbne	r1, [r0, #1]
   13474:	ands	r0, ip, #1
   13478:	movw	r1, #32944	; 0x80b0
   1347c:	str	r0, [sp, #68]	; 0x44
   13480:	movw	r0, #33423	; 0x828f
   13484:	movt	r1, #1
   13488:	movt	r0, #1
   1348c:	movne	r1, r0
   13490:	mov	r0, #0
   13494:	bl	10ed8 <dcgettext@plt>
   13498:	str	r0, [sp, #12]
   1349c:	ldr	r0, [sp, #120]	; 0x78
   134a0:	movw	r1, #33410	; 0x8282
   134a4:	mvn	r2, #0
   134a8:	mov	r3, #0
   134ac:	str	r7, [sp, #16]
   134b0:	movt	r1, #1
   134b4:	str	r2, [sp]
   134b8:	str	r2, [sp, #4]
   134bc:	mov	r2, #0
   134c0:	str	r1, [sp, #8]
   134c4:	bl	1676c <__assert_fail@plt+0x56b4>
   134c8:	str	r0, [sp, #116]	; 0x74
   134cc:	ldr	r0, [r5]
   134d0:	movw	sl, #37205	; 0x9155
   134d4:	sub	r4, r4, #1
   134d8:	movt	sl, #2
   134dc:	str	r0, [r5, #4]
   134e0:	b	115a0 <__assert_fail@plt+0x4e8>
   134e4:	ldr	r0, [r8]
   134e8:	bl	1107c <clearerr_unlocked@plt>
   134ec:	bl	10fec <__errno_location@plt>
   134f0:	ldr	r4, [r0]
   134f4:	movw	r1, #33692	; 0x839c
   134f8:	mov	r0, #0
   134fc:	mov	r2, #5
   13500:	movt	r1, #1
   13504:	bl	10ed8 <dcgettext@plt>
   13508:	movw	r1, #33709	; 0x83ad
   1350c:	mov	r5, r0
   13510:	mov	r0, #4
   13514:	movt	r1, #1
   13518:	bl	15470 <__assert_fail@plt+0x43b8>
   1351c:	mov	r3, r0
   13520:	mov	r0, #1
   13524:	mov	r1, r4
   13528:	mov	r2, r5
   1352c:	bl	10f5c <error@plt>
   13530:	cmn	r5, #3
   13534:	bne	1359c <__assert_fail@plt+0x24e4>
   13538:	movw	r0, #37104	; 0x90f0
   1353c:	movw	r2, #32924	; 0x809c
   13540:	mov	r1, #0
   13544:	movw	r7, #32908	; 0x808c
   13548:	movt	r0, #2
   1354c:	movt	r2, #1
   13550:	str	r1, [sp, #8]
   13554:	movw	r1, #32817	; 0x8031
   13558:	movt	r7, #1
   1355c:	ldr	r3, [r0]
   13560:	movw	r0, #37196	; 0x914c
   13564:	str	r2, [sp, #4]
   13568:	movw	r2, #32894	; 0x807e
   1356c:	movt	r1, #1
   13570:	str	r7, [sp]
   13574:	movt	r0, #2
   13578:	movt	r2, #1
   1357c:	ldr	r0, [r0]
   13580:	bl	15ea0 <__assert_fail@plt+0x4de8>
   13584:	mov	r0, #0
   13588:	bl	10fbc <exit@plt>
   1358c:	movw	r0, #37196	; 0x914c
   13590:	movt	r0, #2
   13594:	ldr	r0, [r0]
   13598:	b	134e8 <__assert_fail@plt+0x2430>
   1359c:	cmn	r5, #2
   135a0:	bne	135ac <__assert_fail@plt+0x24f4>
   135a4:	mov	r0, #0
   135a8:	bl	111b4 <__assert_fail@plt+0xfc>
   135ac:	sub	r0, r5, #48	; 0x30
   135b0:	cmp	r0, #9
   135b4:	bhi	135e0 <__assert_fail@plt+0x2528>
   135b8:	movw	r1, #32846	; 0x804e
   135bc:	mov	r0, #0
   135c0:	mov	r2, #5
   135c4:	movt	r1, #1
   135c8:	bl	10ed8 <dcgettext@plt>
   135cc:	mov	r2, r0
   135d0:	mov	r0, #0
   135d4:	mov	r1, #0
   135d8:	mov	r3, r5
   135dc:	bl	10f5c <error@plt>
   135e0:	mov	r0, #1
   135e4:	bl	111b4 <__assert_fail@plt+0xfc>
   135e8:	movw	r1, #32846	; 0x804e
   135ec:	mov	r0, #0
   135f0:	mov	r2, #5
   135f4:	movt	r1, #1
   135f8:	bl	10ed8 <dcgettext@plt>
   135fc:	ldrb	r3, [r7]
   13600:	mov	r2, r0
   13604:	mov	r0, #0
   13608:	mov	r1, #0
   1360c:	bl	10f5c <error@plt>
   13610:	mov	r0, #1
   13614:	bl	111b4 <__assert_fail@plt+0xfc>
   13618:	movw	r1, #33754	; 0x83da
   1361c:	mov	r0, #0
   13620:	mov	r2, #5
   13624:	movt	r1, #1
   13628:	bl	10ed8 <dcgettext@plt>
   1362c:	ldr	r1, [sp, #96]	; 0x60
   13630:	sub	lr, fp, #8192	; 0x2000
   13634:	mov	r4, r0
   13638:	mov	r0, r6
   1363c:	sub	r2, lr, #32
   13640:	bl	139c0 <__assert_fail@plt+0x2908>
   13644:	mov	r3, r0
   13648:	mov	r0, #1
   1364c:	mov	r1, #0
   13650:	mov	r2, r4
   13654:	bl	10f5c <error@plt>
   13658:	mov	r5, r1
   1365c:	movw	r1, #32944	; 0x80b0
   13660:	mov	r0, #0
   13664:	mov	r2, #5
   13668:	movt	r1, #1
   1366c:	bl	10ed8 <dcgettext@plt>
   13670:	mov	r4, r0
   13674:	ldr	r0, [sp, #116]	; 0x74
   13678:	sub	lr, fp, #8192	; 0x2000
   1367c:	mov	r1, r5
   13680:	sub	r2, lr, #32
   13684:	bl	139c0 <__assert_fail@plt+0x2908>
   13688:	bl	15998 <__assert_fail@plt+0x48e0>
   1368c:	movw	r2, #32937	; 0x80a9
   13690:	str	r0, [sp]
   13694:	mov	r0, #1
   13698:	mov	r1, #75	; 0x4b
   1369c:	mov	r3, r4
   136a0:	movt	r2, #1
   136a4:	bl	10f5c <error@plt>
   136a8:	bl	10fec <__errno_location@plt>
   136ac:	ldr	r1, [r0]
   136b0:	movw	r2, #34109	; 0x853d
   136b4:	mov	r0, #1
   136b8:	movt	r2, #1
   136bc:	bl	10f5c <error@plt>
   136c0:	push	{r4, r5, r6, sl, fp, lr}
   136c4:	add	fp, sp, #16
   136c8:	mov	r4, r1
   136cc:	cmp	r0, #2
   136d0:	beq	1370c <__assert_fail@plt+0x2654>
   136d4:	cmp	r0, #1
   136d8:	bne	13754 <__assert_fail@plt+0x269c>
   136dc:	bl	10fec <__errno_location@plt>
   136e0:	ldr	r5, [r0]
   136e4:	movw	r1, #33675	; 0x838b
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	movt	r1, #1
   136f4:	bl	10ed8 <dcgettext@plt>
   136f8:	mov	r6, r0
   136fc:	mov	r0, #4
   13700:	mov	r1, r4
   13704:	bl	15470 <__assert_fail@plt+0x43b8>
   13708:	b	1373c <__assert_fail@plt+0x2684>
   1370c:	bl	10fec <__errno_location@plt>
   13710:	ldr	r5, [r0]
   13714:	movw	r1, #33725	; 0x83bd
   13718:	mov	r0, #0
   1371c:	mov	r2, #5
   13720:	movt	r1, #1
   13724:	bl	10ed8 <dcgettext@plt>
   13728:	mov	r6, r0
   1372c:	mov	r0, #0
   13730:	mov	r1, #3
   13734:	mov	r2, r4
   13738:	bl	156ec <__assert_fail@plt+0x4634>
   1373c:	mov	r3, r0
   13740:	mov	r0, #0
   13744:	mov	r1, r5
   13748:	mov	r2, r6
   1374c:	pop	{r4, r5, r6, sl, fp, lr}
   13750:	b	10f5c <error@plt>
   13754:	bl	110a0 <abort@plt>
   13758:	movw	r1, #37212	; 0x915c
   1375c:	movt	r1, #2
   13760:	str	r0, [r1, #4]
   13764:	bx	lr
   13768:	movw	r1, #37212	; 0x915c
   1376c:	movt	r1, #2
   13770:	strb	r0, [r1]
   13774:	bx	lr
   13778:	push	{r4, r5, r6, sl, fp, lr}
   1377c:	add	fp, sp, #16
   13780:	sub	sp, sp, #8
   13784:	movw	r0, #37196	; 0x914c
   13788:	movt	r0, #2
   1378c:	ldr	r0, [r0]
   13790:	bl	17500 <__assert_fail@plt+0x6448>
   13794:	cmp	r0, #0
   13798:	beq	137c0 <__assert_fail@plt+0x2708>
   1379c:	movw	r5, #37212	; 0x915c
   137a0:	movt	r5, #2
   137a4:	ldrb	r0, [r5]
   137a8:	cmp	r0, #0
   137ac:	beq	137ec <__assert_fail@plt+0x2734>
   137b0:	bl	10fec <__errno_location@plt>
   137b4:	ldr	r0, [r0]
   137b8:	cmp	r0, #32
   137bc:	bne	137ec <__assert_fail@plt+0x2734>
   137c0:	movw	r0, #37192	; 0x9148
   137c4:	movt	r0, #2
   137c8:	ldr	r0, [r0]
   137cc:	bl	17500 <__assert_fail@plt+0x6448>
   137d0:	cmp	r0, #0
   137d4:	subeq	sp, fp, #16
   137d8:	popeq	{r4, r5, r6, sl, fp, pc}
   137dc:	movw	r0, #37108	; 0x90f4
   137e0:	movt	r0, #2
   137e4:	ldr	r0, [r0]
   137e8:	bl	10e90 <_exit@plt>
   137ec:	movw	r1, #34031	; 0x84ef
   137f0:	mov	r0, #0
   137f4:	mov	r2, #5
   137f8:	movt	r1, #1
   137fc:	bl	10ed8 <dcgettext@plt>
   13800:	ldr	r6, [r5, #4]
   13804:	mov	r4, r0
   13808:	bl	10fec <__errno_location@plt>
   1380c:	ldr	r5, [r0]
   13810:	cmp	r6, #0
   13814:	bne	13830 <__assert_fail@plt+0x2778>
   13818:	movw	r2, #32941	; 0x80ad
   1381c:	mov	r0, #0
   13820:	mov	r1, r5
   13824:	mov	r3, r4
   13828:	movt	r2, #1
   1382c:	b	13850 <__assert_fail@plt+0x2798>
   13830:	mov	r0, r6
   13834:	bl	15610 <__assert_fail@plt+0x4558>
   13838:	movw	r2, #32937	; 0x80a9
   1383c:	mov	r3, r0
   13840:	str	r4, [sp]
   13844:	mov	r0, #0
   13848:	mov	r1, r5
   1384c:	movt	r2, #1
   13850:	bl	10f5c <error@plt>
   13854:	movw	r0, #37108	; 0x90f4
   13858:	movt	r0, #2
   1385c:	ldr	r0, [r0]
   13860:	bl	10e90 <_exit@plt>
   13864:	push	{r4, r5, r6, sl, fp, lr}
   13868:	add	fp, sp, #16
   1386c:	mov	r4, r0
   13870:	bl	10fec <__errno_location@plt>
   13874:	ldr	r6, [r0]
   13878:	mov	r5, r0
   1387c:	mov	r0, r4
   13880:	bl	10e84 <free@plt>
   13884:	str	r6, [r5]
   13888:	pop	{r4, r5, r6, sl, fp, pc}
   1388c:	push	{r4, r5, r6, r7, fp, lr}
   13890:	add	fp, sp, #16
   13894:	cmp	r2, #0
   13898:	moveq	r4, #0
   1389c:	moveq	r0, r4
   138a0:	popeq	{r4, r5, r6, r7, fp, pc}
   138a4:	mov	r5, r2
   138a8:	mov	r6, r1
   138ac:	mov	r7, r0
   138b0:	mov	r4, #0
   138b4:	mov	r0, r7
   138b8:	mov	r1, r6
   138bc:	mov	r2, r5
   138c0:	bl	159b0 <__assert_fail@plt+0x48f8>
   138c4:	cmn	r0, #1
   138c8:	beq	138e4 <__assert_fail@plt+0x282c>
   138cc:	cmp	r0, #0
   138d0:	beq	138ec <__assert_fail@plt+0x2834>
   138d4:	subs	r5, r5, r0
   138d8:	add	r6, r6, r0
   138dc:	add	r4, r0, r4
   138e0:	bne	138b4 <__assert_fail@plt+0x27fc>
   138e4:	mov	r0, r4
   138e8:	pop	{r4, r5, r6, r7, fp, pc}
   138ec:	bl	10fec <__errno_location@plt>
   138f0:	mov	r1, #0
   138f4:	str	r1, [r0]
   138f8:	mov	r0, r4
   138fc:	pop	{r4, r5, r6, r7, fp, pc}
   13900:	push	{r4, r5, r6, sl, fp, lr}
   13904:	add	fp, sp, #16
   13908:	mov	r5, r0
   1390c:	mov	r0, #0
   13910:	mov	r4, r1
   13914:	add	r6, r2, #19
   13918:	cmp	r1, #0
   1391c:	strb	r0, [r2, #20]
   13920:	blt	13970 <__assert_fail@plt+0x28b8>
   13924:	mov	r0, r5
   13928:	mov	r1, r4
   1392c:	mov	r2, #10
   13930:	mov	r3, #0
   13934:	bl	17908 <__assert_fail@plt+0x6850>
   13938:	add	r2, r0, r0, lsl #2
   1393c:	sub	r2, r5, r2, lsl #1
   13940:	add	r2, r2, #48	; 0x30
   13944:	strb	r2, [r6], #-1
   13948:	adds	r2, r5, #9
   1394c:	mov	r5, r0
   13950:	adc	r3, r4, #0
   13954:	rsbs	r2, r2, #18
   13958:	mov	r4, r1
   1395c:	rscs	r2, r3, #0
   13960:	bcc	13924 <__assert_fail@plt+0x286c>
   13964:	add	r6, r6, #1
   13968:	mov	r0, r6
   1396c:	pop	{r4, r5, r6, sl, fp, pc}
   13970:	mov	r0, r5
   13974:	mov	r1, r4
   13978:	mov	r2, #10
   1397c:	mov	r3, #0
   13980:	bl	17908 <__assert_fail@plt+0x6850>
   13984:	add	r2, r0, r0, lsl #2
   13988:	rsb	r2, r5, r2, lsl #1
   1398c:	add	r2, r2, #48	; 0x30
   13990:	strb	r2, [r6], #-1
   13994:	adds	r2, r5, #9
   13998:	mov	r5, r0
   1399c:	adc	r3, r4, #0
   139a0:	rsbs	r2, r2, #18
   139a4:	mov	r4, r1
   139a8:	rscs	r2, r3, #0
   139ac:	bcc	13970 <__assert_fail@plt+0x28b8>
   139b0:	mov	r0, #45	; 0x2d
   139b4:	strb	r0, [r6]
   139b8:	mov	r0, r6
   139bc:	pop	{r4, r5, r6, sl, fp, pc}
   139c0:	push	{r4, r5, r6, sl, fp, lr}
   139c4:	add	fp, sp, #16
   139c8:	mov	r5, r0
   139cc:	mov	r0, #0
   139d0:	mov	r4, r1
   139d4:	add	r6, r2, #19
   139d8:	strb	r0, [r2, #20]
   139dc:	mov	r0, r5
   139e0:	mov	r1, r4
   139e4:	mov	r2, #10
   139e8:	mov	r3, #0
   139ec:	bl	179dc <__assert_fail@plt+0x6924>
   139f0:	add	r2, r0, r0, lsl #2
   139f4:	sub	r2, r5, r2, lsl #1
   139f8:	orr	r2, r2, #48	; 0x30
   139fc:	strb	r2, [r6], #-1
   13a00:	rsbs	r2, r5, #9
   13a04:	mov	r5, r0
   13a08:	rscs	r2, r4, #0
   13a0c:	mov	r4, r1
   13a10:	bcc	139dc <__assert_fail@plt+0x2924>
   13a14:	add	r0, r6, #1
   13a18:	pop	{r4, r5, r6, sl, fp, pc}
   13a1c:	push	{r4, r5, fp, lr}
   13a20:	add	fp, sp, #8
   13a24:	cmp	r0, #0
   13a28:	beq	13abc <__assert_fail@plt+0x2a04>
   13a2c:	mov	r1, #47	; 0x2f
   13a30:	mov	r4, r0
   13a34:	bl	11064 <strrchr@plt>
   13a38:	cmp	r0, #0
   13a3c:	mov	r5, r4
   13a40:	addne	r5, r0, #1
   13a44:	sub	r0, r5, r4
   13a48:	cmp	r0, #7
   13a4c:	blt	13aa0 <__assert_fail@plt+0x29e8>
   13a50:	movw	r1, #34099	; 0x8533
   13a54:	sub	r0, r5, #7
   13a58:	mov	r2, #7
   13a5c:	movt	r1, #1
   13a60:	bl	11094 <strncmp@plt>
   13a64:	cmp	r0, #0
   13a68:	bne	13aa0 <__assert_fail@plt+0x29e8>
   13a6c:	movw	r1, #34107	; 0x853b
   13a70:	mov	r0, r5
   13a74:	mov	r2, #3
   13a78:	movt	r1, #1
   13a7c:	bl	11094 <strncmp@plt>
   13a80:	cmp	r0, #0
   13a84:	beq	13a90 <__assert_fail@plt+0x29d8>
   13a88:	mov	r4, r5
   13a8c:	b	13aa0 <__assert_fail@plt+0x29e8>
   13a90:	movw	r0, #37176	; 0x9138
   13a94:	add	r4, r5, #3
   13a98:	movt	r0, #2
   13a9c:	str	r4, [r0]
   13aa0:	movw	r0, #37180	; 0x913c
   13aa4:	movt	r0, #2
   13aa8:	str	r4, [r0]
   13aac:	movw	r0, #37220	; 0x9164
   13ab0:	movt	r0, #2
   13ab4:	str	r4, [r0]
   13ab8:	pop	{r4, r5, fp, pc}
   13abc:	movw	r0, #37192	; 0x9148
   13ac0:	mov	r1, #55	; 0x37
   13ac4:	mov	r2, #1
   13ac8:	movt	r0, #2
   13acc:	ldr	r3, [r0]
   13ad0:	movw	r0, #34043	; 0x84fb
   13ad4:	movt	r0, #1
   13ad8:	bl	10f20 <fwrite@plt>
   13adc:	bl	110a0 <abort@plt>
   13ae0:	push	{r4, r5, r6, sl, fp, lr}
   13ae4:	add	fp, sp, #16
   13ae8:	mov	r4, r0
   13aec:	movw	r0, #37224	; 0x9168
   13af0:	movt	r0, #2
   13af4:	cmp	r4, #0
   13af8:	moveq	r4, r0
   13afc:	bl	10fec <__errno_location@plt>
   13b00:	ldr	r6, [r0]
   13b04:	mov	r5, r0
   13b08:	mov	r0, r4
   13b0c:	mov	r1, #48	; 0x30
   13b10:	bl	16534 <__assert_fail@plt+0x547c>
   13b14:	str	r6, [r5]
   13b18:	pop	{r4, r5, r6, sl, fp, pc}
   13b1c:	movw	r1, #37224	; 0x9168
   13b20:	cmp	r0, #0
   13b24:	movt	r1, #2
   13b28:	movne	r1, r0
   13b2c:	ldr	r0, [r1]
   13b30:	bx	lr
   13b34:	movw	r2, #37224	; 0x9168
   13b38:	cmp	r0, #0
   13b3c:	movt	r2, #2
   13b40:	movne	r2, r0
   13b44:	str	r1, [r2]
   13b48:	bx	lr
   13b4c:	movw	r3, #37224	; 0x9168
   13b50:	cmp	r0, #0
   13b54:	movt	r3, #2
   13b58:	movne	r3, r0
   13b5c:	ubfx	r0, r1, #5, #3
   13b60:	and	r1, r1, #31
   13b64:	add	r0, r3, r0, lsl #2
   13b68:	ldr	r3, [r0, #8]
   13b6c:	eor	r2, r2, r3, lsr r1
   13b70:	and	r2, r2, #1
   13b74:	eor	r2, r3, r2, lsl r1
   13b78:	str	r2, [r0, #8]
   13b7c:	mov	r0, #1
   13b80:	and	r0, r0, r3, lsr r1
   13b84:	bx	lr
   13b88:	movw	r2, #37224	; 0x9168
   13b8c:	cmp	r0, #0
   13b90:	movt	r2, #2
   13b94:	movne	r2, r0
   13b98:	ldr	r0, [r2, #4]
   13b9c:	str	r1, [r2, #4]
   13ba0:	bx	lr
   13ba4:	movw	r3, #37224	; 0x9168
   13ba8:	cmp	r0, #0
   13bac:	movt	r3, #2
   13bb0:	movne	r3, r0
   13bb4:	cmp	r1, #0
   13bb8:	mov	r0, #10
   13bbc:	cmpne	r2, #0
   13bc0:	str	r0, [r3]
   13bc4:	bne	13bd4 <__assert_fail@plt+0x2b1c>
   13bc8:	push	{fp, lr}
   13bcc:	mov	fp, sp
   13bd0:	bl	110a0 <abort@plt>
   13bd4:	str	r1, [r3, #40]	; 0x28
   13bd8:	str	r2, [r3, #44]	; 0x2c
   13bdc:	bx	lr
   13be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be4:	add	fp, sp, #28
   13be8:	sub	sp, sp, #20
   13bec:	mov	r7, r0
   13bf0:	ldr	r0, [fp, #8]
   13bf4:	movw	r5, #37224	; 0x9168
   13bf8:	mov	r8, r3
   13bfc:	mov	r9, r2
   13c00:	mov	sl, r1
   13c04:	movt	r5, #2
   13c08:	cmp	r0, #0
   13c0c:	movne	r5, r0
   13c10:	bl	10fec <__errno_location@plt>
   13c14:	mov	r4, r0
   13c18:	ldm	r5, {r0, r1}
   13c1c:	ldr	r2, [r5, #40]	; 0x28
   13c20:	ldr	r3, [r5, #44]	; 0x2c
   13c24:	add	r5, r5, #8
   13c28:	ldr	r6, [r4]
   13c2c:	stm	sp, {r0, r1, r5}
   13c30:	str	r2, [sp, #12]
   13c34:	str	r3, [sp, #16]
   13c38:	mov	r0, r7
   13c3c:	mov	r1, sl
   13c40:	mov	r2, r9
   13c44:	mov	r3, r8
   13c48:	bl	13c58 <__assert_fail@plt+0x2ba0>
   13c4c:	str	r6, [r4]
   13c50:	sub	sp, fp, #28
   13c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c5c:	add	fp, sp, #28
   13c60:	sub	sp, sp, #156	; 0x9c
   13c64:	str	r0, [sp, #76]	; 0x4c
   13c68:	ldr	r0, [fp, #12]
   13c6c:	mov	r6, r1
   13c70:	str	r3, [sp, #84]	; 0x54
   13c74:	str	r2, [fp, #-84]	; 0xffffffac
   13c78:	and	r1, r0, #4
   13c7c:	str	r1, [sp, #24]
   13c80:	and	r1, r0, #1
   13c84:	str	r1, [sp, #28]
   13c88:	ubfx	r8, r0, #1, #1
   13c8c:	bl	10f38 <__ctype_get_mb_cur_max@plt>
   13c90:	str	r0, [sp, #32]
   13c94:	ldr	r0, [fp, #24]
   13c98:	ldr	r7, [fp, #8]
   13c9c:	mov	r1, #0
   13ca0:	mov	r2, #0
   13ca4:	mov	r4, #1
   13ca8:	str	r1, [sp, #52]	; 0x34
   13cac:	str	r0, [sp, #72]	; 0x48
   13cb0:	ldr	r0, [fp, #20]
   13cb4:	str	r0, [sp, #68]	; 0x44
   13cb8:	mov	r0, #0
   13cbc:	str	r0, [sp, #48]	; 0x30
   13cc0:	mov	r0, #0
   13cc4:	str	r0, [sp, #92]	; 0x5c
   13cc8:	mov	r0, #0
   13ccc:	str	r0, [fp, #-76]	; 0xffffffb4
   13cd0:	mov	r0, #0
   13cd4:	cmp	r7, #10
   13cd8:	bhi	14fc0 <__assert_fail@plt+0x3f08>
   13cdc:	add	r1, pc, #28
   13ce0:	mov	sl, r6
   13ce4:	ldr	r6, [sp, #76]	; 0x4c
   13ce8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cec:	ldr	lr, [sp, #84]	; 0x54
   13cf0:	mov	r9, #0
   13cf4:	mov	r3, #1
   13cf8:	mov	r5, #0
   13cfc:	ldr	pc, [r1, r7, lsl #2]
   13d00:	ldrdeq	r3, [r1], -r0
   13d04:	andeq	r3, r1, ip, lsl #28
   13d08:	andeq	r3, r1, r0, ror #27
   13d0c:	andeq	r3, r1, r8, asr #27
   13d10:	andeq	r3, r1, r0, lsl #28
   13d14:	andeq	r3, r1, r4, lsr lr
   13d18:	strdeq	r3, [r1], -r0
   13d1c:	andeq	r4, r1, r0, asr #32
   13d20:	andeq	r3, r1, ip, lsr #26
   13d24:	andeq	r3, r1, ip, lsr #26
   13d28:	ldrdeq	r3, [r1], -r4
   13d2c:	mov	r9, r4
   13d30:	movw	r4, #34189	; 0x858d
   13d34:	mov	r5, r8
   13d38:	mov	r8, r2
   13d3c:	mov	r0, #0
   13d40:	mov	r2, #5
   13d44:	movt	r4, #1
   13d48:	mov	r1, r4
   13d4c:	bl	10ed8 <dcgettext@plt>
   13d50:	cmp	r0, r4
   13d54:	str	r0, [sp, #68]	; 0x44
   13d58:	bne	13ee8 <__assert_fail@plt+0x2e30>
   13d5c:	bl	1772c <__assert_fail@plt+0x6674>
   13d60:	ldrb	r1, [r0]
   13d64:	and	r1, r1, #223	; 0xdf
   13d68:	cmp	r1, #71	; 0x47
   13d6c:	beq	13eb4 <__assert_fail@plt+0x2dfc>
   13d70:	cmp	r1, #85	; 0x55
   13d74:	bne	13ecc <__assert_fail@plt+0x2e14>
   13d78:	ldrb	r1, [r0, #1]
   13d7c:	and	r1, r1, #223	; 0xdf
   13d80:	cmp	r1, #84	; 0x54
   13d84:	bne	13ecc <__assert_fail@plt+0x2e14>
   13d88:	ldrb	r1, [r0, #2]
   13d8c:	and	r1, r1, #223	; 0xdf
   13d90:	cmp	r1, #70	; 0x46
   13d94:	bne	13ecc <__assert_fail@plt+0x2e14>
   13d98:	ldrb	r1, [r0, #3]
   13d9c:	cmp	r1, #45	; 0x2d
   13da0:	ldrbeq	r1, [r0, #4]
   13da4:	cmpeq	r1, #56	; 0x38
   13da8:	bne	13ecc <__assert_fail@plt+0x2e14>
   13dac:	ldrb	r0, [r0, #5]
   13db0:	cmp	r0, #0
   13db4:	movw	r0, #34193	; 0x8591
   13db8:	movt	r0, #1
   13dbc:	str	r0, [sp, #68]	; 0x44
   13dc0:	bne	13ecc <__assert_fail@plt+0x2e14>
   13dc4:	b	13ee8 <__assert_fail@plt+0x2e30>
   13dc8:	mov	r0, #1
   13dcc:	b	13e0c <__assert_fail@plt+0x2d54>
   13dd0:	mov	r7, #0
   13dd4:	mov	r9, #0
   13dd8:	mov	r3, r0
   13ddc:	b	13eac <__assert_fail@plt+0x2df4>
   13de0:	tst	r8, #1
   13de4:	bne	13e0c <__assert_fail@plt+0x2d54>
   13de8:	mov	r3, r0
   13dec:	b	13e64 <__assert_fail@plt+0x2dac>
   13df0:	mov	r0, #1
   13df4:	mov	r9, #0
   13df8:	mov	r7, #5
   13dfc:	b	13e48 <__assert_fail@plt+0x2d90>
   13e00:	mov	r3, #1
   13e04:	tst	r8, #1
   13e08:	beq	13e64 <__assert_fail@plt+0x2dac>
   13e0c:	mov	r1, #1
   13e10:	mov	r9, #0
   13e14:	mov	r7, #2
   13e18:	mov	r3, r0
   13e1c:	mov	r5, #1
   13e20:	str	r1, [fp, #-76]	; 0xffffffb4
   13e24:	movw	r1, #34191	; 0x858f
   13e28:	movt	r1, #1
   13e2c:	str	r1, [sp, #92]	; 0x5c
   13e30:	b	14040 <__assert_fail@plt+0x2f88>
   13e34:	mov	r7, #5
   13e38:	tst	r8, #1
   13e3c:	beq	13e84 <__assert_fail@plt+0x2dcc>
   13e40:	mov	r0, #1
   13e44:	mov	r9, #0
   13e48:	str	r0, [fp, #-76]	; 0xffffffb4
   13e4c:	movw	r0, #34187	; 0x858b
   13e50:	mov	r3, #1
   13e54:	mov	r5, #1
   13e58:	movt	r0, #1
   13e5c:	str	r0, [sp, #92]	; 0x5c
   13e60:	b	14040 <__assert_fail@plt+0x2f88>
   13e64:	cmp	sl, #0
   13e68:	mov	r9, #1
   13e6c:	mov	r7, #2
   13e70:	movne	r0, #39	; 0x27
   13e74:	strbne	r0, [r6]
   13e78:	movw	r0, #34191	; 0x858f
   13e7c:	movt	r0, #1
   13e80:	b	13ea0 <__assert_fail@plt+0x2de8>
   13e84:	cmp	sl, #0
   13e88:	mov	r9, #1
   13e8c:	mov	r3, #1
   13e90:	movne	r0, #34	; 0x22
   13e94:	strbne	r0, [r6]
   13e98:	movw	r0, #34187	; 0x858b
   13e9c:	movt	r0, #1
   13ea0:	str	r0, [sp, #92]	; 0x5c
   13ea4:	mov	r0, #1
   13ea8:	str	r0, [fp, #-76]	; 0xffffffb4
   13eac:	mov	r5, #0
   13eb0:	b	14040 <__assert_fail@plt+0x2f88>
   13eb4:	ldrb	r1, [r0, #1]
   13eb8:	and	r1, r1, #223	; 0xdf
   13ebc:	cmp	r1, #66	; 0x42
   13ec0:	ldrbeq	r1, [r0, #2]
   13ec4:	cmpeq	r1, #49	; 0x31
   13ec8:	beq	14de8 <__assert_fail@plt+0x3d30>
   13ecc:	movw	r0, #34191	; 0x858f
   13ed0:	movw	r1, #34187	; 0x858b
   13ed4:	cmp	r7, #9
   13ed8:	movt	r0, #1
   13edc:	movt	r1, #1
   13ee0:	moveq	r0, r1
   13ee4:	str	r0, [sp, #68]	; 0x44
   13ee8:	movw	r4, #34191	; 0x858f
   13eec:	mov	r0, #0
   13ef0:	mov	r2, #5
   13ef4:	movt	r4, #1
   13ef8:	mov	r1, r4
   13efc:	bl	10ed8 <dcgettext@plt>
   13f00:	cmp	r0, r4
   13f04:	str	r0, [sp, #72]	; 0x48
   13f08:	beq	13f18 <__assert_fail@plt+0x2e60>
   13f0c:	mov	r4, r9
   13f10:	mov	r2, r8
   13f14:	b	13fd0 <__assert_fail@plt+0x2f18>
   13f18:	bl	1772c <__assert_fail@plt+0x6674>
   13f1c:	ldrb	r1, [r0]
   13f20:	mov	r4, r9
   13f24:	and	r1, r1, #223	; 0xdf
   13f28:	cmp	r1, #71	; 0x47
   13f2c:	beq	13f88 <__assert_fail@plt+0x2ed0>
   13f30:	cmp	r1, #85	; 0x55
   13f34:	mov	r2, r8
   13f38:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   13f3c:	ldrb	r1, [r0, #1]
   13f40:	and	r1, r1, #223	; 0xdf
   13f44:	cmp	r1, #84	; 0x54
   13f48:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   13f4c:	ldrb	r1, [r0, #2]
   13f50:	and	r1, r1, #223	; 0xdf
   13f54:	cmp	r1, #70	; 0x46
   13f58:	ldrbeq	r1, [r0, #3]
   13f5c:	cmpeq	r1, #45	; 0x2d
   13f60:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   13f64:	ldrb	r1, [r0, #4]
   13f68:	cmp	r1, #56	; 0x38
   13f6c:	ldrbeq	r0, [r0, #5]
   13f70:	cmpeq	r0, #0
   13f74:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   13f78:	movw	r0, #34197	; 0x8595
   13f7c:	movt	r0, #1
   13f80:	str	r0, [sp, #72]	; 0x48
   13f84:	b	13fd0 <__assert_fail@plt+0x2f18>
   13f88:	ldrb	r1, [r0, #1]
   13f8c:	mov	r2, r8
   13f90:	and	r1, r1, #223	; 0xdf
   13f94:	cmp	r1, #66	; 0x42
   13f98:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   13f9c:	ldrb	r1, [r0, #2]
   13fa0:	cmp	r1, #49	; 0x31
   13fa4:	ldrbeq	r1, [r0, #3]
   13fa8:	cmpeq	r1, #56	; 0x38
   13fac:	beq	14e2c <__assert_fail@plt+0x3d74>
   13fb0:	movw	r0, #34191	; 0x858f
   13fb4:	cmp	r7, #9
   13fb8:	movt	r0, #1
   13fbc:	mov	r1, r0
   13fc0:	movw	r0, #34187	; 0x858b
   13fc4:	movt	r0, #1
   13fc8:	moveq	r1, r0
   13fcc:	str	r1, [sp, #72]	; 0x48
   13fd0:	mov	r8, r5
   13fd4:	mov	r9, #0
   13fd8:	tst	r8, #1
   13fdc:	mov	r5, r8
   13fe0:	str	r2, [fp, #-48]	; 0xffffffd0
   13fe4:	bne	1401c <__assert_fail@plt+0x2f64>
   13fe8:	ldr	r0, [sp, #68]	; 0x44
   13fec:	ldrb	r0, [r0]
   13ff0:	cmp	r0, #0
   13ff4:	beq	1401c <__assert_fail@plt+0x2f64>
   13ff8:	ldr	r1, [sp, #68]	; 0x44
   13ffc:	mov	r9, #0
   14000:	add	r1, r1, #1
   14004:	cmp	r9, sl
   14008:	strbcc	r0, [r6, r9]
   1400c:	ldrb	r0, [r1, r9]
   14010:	add	r9, r9, #1
   14014:	cmp	r0, #0
   14018:	bne	14004 <__assert_fail@plt+0x2f4c>
   1401c:	ldr	r8, [sp, #72]	; 0x48
   14020:	mov	r0, r8
   14024:	bl	10fc8 <strlen@plt>
   14028:	ldr	ip, [fp, #-84]	; 0xffffffac
   1402c:	ldr	lr, [sp, #84]	; 0x54
   14030:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14034:	str	r0, [fp, #-76]	; 0xffffffb4
   14038:	str	r8, [sp, #92]	; 0x5c
   1403c:	mov	r3, #1
   14040:	ldr	r0, [fp, #16]
   14044:	str	r7, [fp, #-64]	; 0xffffffc0
   14048:	str	r5, [fp, #-72]	; 0xffffffb8
   1404c:	str	r3, [sp, #80]	; 0x50
   14050:	cmp	r0, #0
   14054:	movwne	r0, #1
   14058:	and	r0, r0, r5
   1405c:	str	r0, [fp, #-88]	; 0xffffffa8
   14060:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14064:	cmp	r0, #0
   14068:	movwne	r0, #1
   1406c:	subs	r7, r7, #2
   14070:	and	r1, r0, r5
   14074:	str	r7, [fp, #-80]	; 0xffffffb0
   14078:	and	r1, r3, r1
   1407c:	str	r1, [sp, #40]	; 0x28
   14080:	clz	r1, r7
   14084:	lsr	r1, r1, #5
   14088:	and	r1, r1, r5
   1408c:	eor	r5, r5, #1
   14090:	str	r1, [sp, #36]	; 0x24
   14094:	mov	r1, r7
   14098:	str	r5, [sp, #88]	; 0x58
   1409c:	mov	r7, #0
   140a0:	movwne	r1, #1
   140a4:	orr	r5, r1, r5
   140a8:	and	r1, r1, r3
   140ac:	and	r0, r0, r1
   140b0:	str	r5, [sp, #60]	; 0x3c
   140b4:	str	r1, [fp, #-68]	; 0xffffffbc
   140b8:	str	r0, [fp, #-60]	; 0xffffffc4
   140bc:	eor	r0, r3, #1
   140c0:	str	r0, [sp, #44]	; 0x2c
   140c4:	cmn	lr, #1
   140c8:	beq	140d8 <__assert_fail@plt+0x3020>
   140cc:	cmp	r7, lr
   140d0:	bne	140e4 <__assert_fail@plt+0x302c>
   140d4:	b	14d5c <__assert_fail@plt+0x3ca4>
   140d8:	ldrb	r0, [ip, r7]
   140dc:	cmp	r0, #0
   140e0:	beq	14d64 <__assert_fail@plt+0x3cac>
   140e4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   140e8:	mov	r8, #0
   140ec:	str	r4, [fp, #-52]	; 0xffffffcc
   140f0:	str	r2, [fp, #-48]	; 0xffffffd0
   140f4:	cmp	r0, #0
   140f8:	beq	1412c <__assert_fail@plt+0x3074>
   140fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14100:	add	r4, r7, r0
   14104:	cmp	r0, #2
   14108:	bcc	14124 <__assert_fail@plt+0x306c>
   1410c:	cmn	lr, #1
   14110:	bne	14124 <__assert_fail@plt+0x306c>
   14114:	mov	r0, ip
   14118:	bl	10fc8 <strlen@plt>
   1411c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14120:	mov	lr, r0
   14124:	cmp	r4, lr
   14128:	bls	14144 <__assert_fail@plt+0x308c>
   1412c:	mov	r0, #0
   14130:	str	r0, [fp, #-56]	; 0xffffffc8
   14134:	ldrb	r5, [ip, r7]
   14138:	cmp	r5, #126	; 0x7e
   1413c:	bls	14194 <__assert_fail@plt+0x30dc>
   14140:	b	1459c <__assert_fail@plt+0x34e4>
   14144:	ldr	r1, [sp, #92]	; 0x5c
   14148:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1414c:	add	r0, ip, r7
   14150:	mov	r4, lr
   14154:	bl	10ecc <memcmp@plt>
   14158:	ldr	r2, [sp, #88]	; 0x58
   1415c:	cmp	r0, #0
   14160:	mov	r1, r0
   14164:	movwne	r1, #1
   14168:	orr	r1, r1, r2
   1416c:	tst	r1, #1
   14170:	beq	14e70 <__assert_fail@plt+0x3db8>
   14174:	ldr	ip, [fp, #-84]	; 0xffffffac
   14178:	clz	r0, r0
   1417c:	mov	lr, r4
   14180:	lsr	r0, r0, #5
   14184:	str	r0, [fp, #-56]	; 0xffffffc8
   14188:	ldrb	r5, [ip, r7]
   1418c:	cmp	r5, #126	; 0x7e
   14190:	bhi	1459c <__assert_fail@plt+0x34e4>
   14194:	add	r3, pc, #16
   14198:	mov	r4, #1
   1419c:	mov	r2, #110	; 0x6e
   141a0:	mov	r0, #97	; 0x61
   141a4:	mov	r1, #0
   141a8:	ldr	pc, [r3, r5, lsl #2]
   141ac:	andeq	r4, r1, ip, ror r4
   141b0:	muleq	r1, ip, r5
   141b4:	muleq	r1, ip, r5
   141b8:	muleq	r1, ip, r5
   141bc:	muleq	r1, ip, r5
   141c0:	muleq	r1, ip, r5
   141c4:	muleq	r1, ip, r5
   141c8:	andeq	r4, r1, r8, ror r6
   141cc:	andeq	r4, r1, ip, asr r4
   141d0:	andeq	r4, r1, r4, asr #8
   141d4:	andeq	r4, r1, r8, ror #8
   141d8:	strdeq	r4, [r1], -r8
   141dc:	andeq	r4, r1, ip, lsr r4
   141e0:	andeq	r4, r1, r4, ror #8
   141e4:	muleq	r1, ip, r5
   141e8:	muleq	r1, ip, r5
   141ec:	muleq	r1, ip, r5
   141f0:	muleq	r1, ip, r5
   141f4:	muleq	r1, ip, r5
   141f8:	muleq	r1, ip, r5
   141fc:	muleq	r1, ip, r5
   14200:	muleq	r1, ip, r5
   14204:	muleq	r1, ip, r5
   14208:	muleq	r1, ip, r5
   1420c:	muleq	r1, ip, r5
   14210:	muleq	r1, ip, r5
   14214:	muleq	r1, ip, r5
   14218:	muleq	r1, ip, r5
   1421c:	muleq	r1, ip, r5
   14220:	muleq	r1, ip, r5
   14224:	muleq	r1, ip, r5
   14228:	muleq	r1, ip, r5
   1422c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14230:	strdeq	r4, [r1], -r8
   14234:	strdeq	r4, [r1], -r8
   14238:	andeq	r4, r1, r8, asr #7
   1423c:	strdeq	r4, [r1], -r8
   14240:	andeq	r4, r1, r8, lsr #7
   14244:	strdeq	r4, [r1], -r8
   14248:	andeq	r4, r1, r0, lsl #10
   1424c:	strdeq	r4, [r1], -r8
   14250:	strdeq	r4, [r1], -r8
   14254:	strdeq	r4, [r1], -r8
   14258:	andeq	r4, r1, r8, lsr #7
   1425c:	andeq	r4, r1, r8, lsr #7
   14260:	andeq	r4, r1, r8, lsr #7
   14264:	andeq	r4, r1, r8, lsr #7
   14268:	andeq	r4, r1, r8, lsr #7
   1426c:	andeq	r4, r1, r8, lsr #7
   14270:	andeq	r4, r1, r8, lsr #7
   14274:	andeq	r4, r1, r8, lsr #7
   14278:	andeq	r4, r1, r8, lsr #7
   1427c:	andeq	r4, r1, r8, lsr #7
   14280:	andeq	r4, r1, r8, lsr #7
   14284:	andeq	r4, r1, r8, lsr #7
   14288:	andeq	r4, r1, r8, lsr #7
   1428c:	andeq	r4, r1, r8, lsr #7
   14290:	andeq	r4, r1, r8, lsr #7
   14294:	andeq	r4, r1, r8, lsr #7
   14298:	strdeq	r4, [r1], -r8
   1429c:	strdeq	r4, [r1], -r8
   142a0:	strdeq	r4, [r1], -r8
   142a4:	strdeq	r4, [r1], -r8
   142a8:			; <UNDEFINED> instruction: 0x000144bc
   142ac:	muleq	r1, ip, r5
   142b0:	andeq	r4, r1, r8, lsr #7
   142b4:	andeq	r4, r1, r8, lsr #7
   142b8:	andeq	r4, r1, r8, lsr #7
   142bc:	andeq	r4, r1, r8, lsr #7
   142c0:	andeq	r4, r1, r8, lsr #7
   142c4:	andeq	r4, r1, r8, lsr #7
   142c8:	andeq	r4, r1, r8, lsr #7
   142cc:	andeq	r4, r1, r8, lsr #7
   142d0:	andeq	r4, r1, r8, lsr #7
   142d4:	andeq	r4, r1, r8, lsr #7
   142d8:	andeq	r4, r1, r8, lsr #7
   142dc:	andeq	r4, r1, r8, lsr #7
   142e0:	andeq	r4, r1, r8, lsr #7
   142e4:	andeq	r4, r1, r8, lsr #7
   142e8:	andeq	r4, r1, r8, lsr #7
   142ec:	andeq	r4, r1, r8, lsr #7
   142f0:	andeq	r4, r1, r8, lsr #7
   142f4:	andeq	r4, r1, r8, lsr #7
   142f8:	andeq	r4, r1, r8, lsr #7
   142fc:	andeq	r4, r1, r8, lsr #7
   14300:	andeq	r4, r1, r8, lsr #7
   14304:	andeq	r4, r1, r8, lsr #7
   14308:	andeq	r4, r1, r8, lsr #7
   1430c:	andeq	r4, r1, r8, lsr #7
   14310:	andeq	r4, r1, r8, lsr #7
   14314:	andeq	r4, r1, r8, lsr #7
   14318:	strdeq	r4, [r1], -r8
   1431c:	andeq	r4, r1, r8, lsl #8
   14320:	andeq	r4, r1, r8, lsr #7
   14324:	strdeq	r4, [r1], -r8
   14328:	andeq	r4, r1, r8, lsr #7
   1432c:	strdeq	r4, [r1], -r8
   14330:	andeq	r4, r1, r8, lsr #7
   14334:	andeq	r4, r1, r8, lsr #7
   14338:	andeq	r4, r1, r8, lsr #7
   1433c:	andeq	r4, r1, r8, lsr #7
   14340:	andeq	r4, r1, r8, lsr #7
   14344:	andeq	r4, r1, r8, lsr #7
   14348:	andeq	r4, r1, r8, lsr #7
   1434c:	andeq	r4, r1, r8, lsr #7
   14350:	andeq	r4, r1, r8, lsr #7
   14354:	andeq	r4, r1, r8, lsr #7
   14358:	andeq	r4, r1, r8, lsr #7
   1435c:	andeq	r4, r1, r8, lsr #7
   14360:	andeq	r4, r1, r8, lsr #7
   14364:	andeq	r4, r1, r8, lsr #7
   14368:	andeq	r4, r1, r8, lsr #7
   1436c:	andeq	r4, r1, r8, lsr #7
   14370:	andeq	r4, r1, r8, lsr #7
   14374:	andeq	r4, r1, r8, lsr #7
   14378:	andeq	r4, r1, r8, lsr #7
   1437c:	andeq	r4, r1, r8, lsr #7
   14380:	andeq	r4, r1, r8, lsr #7
   14384:	andeq	r4, r1, r8, lsr #7
   14388:	andeq	r4, r1, r8, lsr #7
   1438c:	andeq	r4, r1, r8, lsr #7
   14390:	andeq	r4, r1, r8, lsr #7
   14394:	andeq	r4, r1, r8, lsr #7
   14398:	andeq	r4, r1, r8, ror #7
   1439c:	strdeq	r4, [r1], -r8
   143a0:	andeq	r4, r1, r8, ror #7
   143a4:	andeq	r4, r1, r8, asr #7
   143a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   143ac:	cmp	r0, #0
   143b0:	beq	1468c <__assert_fail@plt+0x35d4>
   143b4:	ldr	r0, [fp, #16]
   143b8:	cmp	r0, #0
   143bc:	mov	r0, r5
   143c0:	bne	1469c <__assert_fail@plt+0x35e4>
   143c4:	b	146bc <__assert_fail@plt+0x3604>
   143c8:	mov	r4, #0
   143cc:	cmp	r7, #0
   143d0:	beq	145f4 <__assert_fail@plt+0x353c>
   143d4:	mov	r8, #0
   143d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   143dc:	cmp	r0, #0
   143e0:	bne	143b4 <__assert_fail@plt+0x32fc>
   143e4:	b	1468c <__assert_fail@plt+0x35d4>
   143e8:	mov	r4, #0
   143ec:	cmn	lr, #1
   143f0:	beq	145cc <__assert_fail@plt+0x3514>
   143f4:	cmp	r7, #0
   143f8:	bne	143d4 <__assert_fail@plt+0x331c>
   143fc:	cmp	lr, #1
   14400:	beq	145f4 <__assert_fail@plt+0x353c>
   14404:	b	143d4 <__assert_fail@plt+0x331c>
   14408:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1440c:	cmp	r0, #2
   14410:	bne	14624 <__assert_fail@plt+0x356c>
   14414:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14418:	tst	r0, #1
   1441c:	bne	14e84 <__assert_fail@plt+0x3dcc>
   14420:	mov	r8, #0
   14424:	mov	r0, #92	; 0x5c
   14428:	mov	r4, #0
   1442c:	cmp	r8, #0
   14430:	beq	14644 <__assert_fail@plt+0x358c>
   14434:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14438:	b	14738 <__assert_fail@plt+0x3680>
   1443c:	mov	r0, #102	; 0x66
   14440:	b	14678 <__assert_fail@plt+0x35c0>
   14444:	mov	r2, #116	; 0x74
   14448:	ldr	r0, [sp, #60]	; 0x3c
   1444c:	tst	r0, #1
   14450:	mov	r0, r2
   14454:	bne	14678 <__assert_fail@plt+0x35c0>
   14458:	b	14e84 <__assert_fail@plt+0x3dcc>
   1445c:	mov	r0, #98	; 0x62
   14460:	b	14678 <__assert_fail@plt+0x35c0>
   14464:	mov	r2, #114	; 0x72
   14468:	ldr	r0, [sp, #60]	; 0x3c
   1446c:	tst	r0, #1
   14470:	mov	r0, r2
   14474:	bne	14678 <__assert_fail@plt+0x35c0>
   14478:	b	14e84 <__assert_fail@plt+0x3dcc>
   1447c:	ldr	r0, [sp, #80]	; 0x50
   14480:	tst	r0, #1
   14484:	beq	14760 <__assert_fail@plt+0x36a8>
   14488:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1448c:	tst	r0, #1
   14490:	bne	14fac <__assert_fail@plt+0x3ef4>
   14494:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14498:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1449c:	cmp	r0, #2
   144a0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   144a4:	movwne	r0, #1
   144a8:	orr	r0, r0, r2
   144ac:	tst	r0, #1
   144b0:	beq	14a58 <__assert_fail@plt+0x39a0>
   144b4:	mov	r0, r9
   144b8:	b	14a8c <__assert_fail@plt+0x39d4>
   144bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   144c0:	mov	r8, #0
   144c4:	mov	r5, #63	; 0x3f
   144c8:	cmp	r0, #5
   144cc:	beq	14914 <__assert_fail@plt+0x385c>
   144d0:	cmp	r0, #2
   144d4:	bne	149c4 <__assert_fail@plt+0x390c>
   144d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   144dc:	tst	r0, #1
   144e0:	bne	14e84 <__assert_fail@plt+0x3dcc>
   144e4:	mov	r4, #0
   144e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144ec:	cmp	r0, #0
   144f0:	bne	143b4 <__assert_fail@plt+0x32fc>
   144f4:	b	1468c <__assert_fail@plt+0x35d4>
   144f8:	mov	r0, #118	; 0x76
   144fc:	b	14678 <__assert_fail@plt+0x35c0>
   14500:	mov	r0, #1
   14504:	mov	r5, #39	; 0x27
   14508:	str	r0, [sp, #52]	; 0x34
   1450c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14510:	cmp	r0, #2
   14514:	bne	14588 <__assert_fail@plt+0x34d0>
   14518:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1451c:	tst	r0, #1
   14520:	bne	14e84 <__assert_fail@plt+0x3dcc>
   14524:	ldr	r2, [sp, #48]	; 0x30
   14528:	clz	r1, sl
   1452c:	mov	r8, #0
   14530:	lsr	r1, r1, #5
   14534:	cmp	r2, #0
   14538:	mov	r0, r2
   1453c:	movwne	r0, #1
   14540:	orrs	r0, r0, r1
   14544:	moveq	r2, sl
   14548:	moveq	sl, r0
   1454c:	cmp	r9, sl
   14550:	str	r2, [sp, #48]	; 0x30
   14554:	movcc	r0, #39	; 0x27
   14558:	strbcc	r0, [r6, r9]
   1455c:	add	r0, r9, #1
   14560:	cmp	r0, sl
   14564:	movcc	r1, #92	; 0x5c
   14568:	strbcc	r1, [r6, r0]
   1456c:	add	r0, r9, #2
   14570:	add	r9, r9, #3
   14574:	cmp	r0, sl
   14578:	movcc	r1, #39	; 0x27
   1457c:	strbcc	r1, [r6, r0]
   14580:	mov	r0, #0
   14584:	str	r0, [fp, #-48]	; 0xffffffd0
   14588:	mov	r4, #1
   1458c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14590:	cmp	r0, #0
   14594:	bne	143b4 <__assert_fail@plt+0x32fc>
   14598:	b	1468c <__assert_fail@plt+0x35d4>
   1459c:	ldr	r0, [sp, #32]
   145a0:	cmp	r0, #1
   145a4:	bne	14790 <__assert_fail@plt+0x36d8>
   145a8:	str	lr, [sp, #84]	; 0x54
   145ac:	bl	10fb0 <__ctype_b_loc@plt>
   145b0:	ldr	r0, [r0]
   145b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   145b8:	mov	r1, #1
   145bc:	add	r0, r0, r5, lsl #1
   145c0:	ldrb	r0, [r0, #1]
   145c4:	ubfx	r4, r0, #6, #1
   145c8:	b	14b88 <__assert_fail@plt+0x3ad0>
   145cc:	cmp	r7, #0
   145d0:	ldrbeq	r0, [ip, #1]
   145d4:	cmpeq	r0, #0
   145d8:	beq	145f4 <__assert_fail@plt+0x353c>
   145dc:	mvn	lr, #0
   145e0:	mov	r8, #0
   145e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   145e8:	cmp	r0, #0
   145ec:	bne	143b4 <__assert_fail@plt+0x32fc>
   145f0:	b	1468c <__assert_fail@plt+0x35d4>
   145f4:	mov	r1, #1
   145f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145fc:	cmp	r0, #2
   14600:	bne	14610 <__assert_fail@plt+0x3558>
   14604:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14608:	tst	r0, #1
   1460c:	bne	14e84 <__assert_fail@plt+0x3dcc>
   14610:	mov	r4, r1
   14614:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14618:	cmp	r0, #0
   1461c:	bne	143b4 <__assert_fail@plt+0x32fc>
   14620:	b	1468c <__assert_fail@plt+0x35d4>
   14624:	ldr	r1, [sp, #40]	; 0x28
   14628:	mov	r8, #0
   1462c:	mov	r0, #92	; 0x5c
   14630:	cmp	r1, #0
   14634:	beq	14678 <__assert_fail@plt+0x35c0>
   14638:	mov	r4, #0
   1463c:	cmp	r8, #0
   14640:	bne	14434 <__assert_fail@plt+0x337c>
   14644:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14648:	tst	r2, #1
   1464c:	beq	14738 <__assert_fail@plt+0x3680>
   14650:	cmp	r9, sl
   14654:	movcc	r1, #39	; 0x27
   14658:	strbcc	r1, [r6, r9]
   1465c:	add	r1, r9, #1
   14660:	add	r9, r9, #2
   14664:	cmp	r1, sl
   14668:	movcc	r2, #39	; 0x27
   1466c:	strbcc	r2, [r6, r1]
   14670:	mov	r2, #0
   14674:	b	14738 <__assert_fail@plt+0x3680>
   14678:	ldr	r1, [sp, #80]	; 0x50
   1467c:	mov	r4, #0
   14680:	mov	r8, #0
   14684:	tst	r1, #1
   14688:	bne	146c8 <__assert_fail@plt+0x3610>
   1468c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14690:	cmp	r0, #0
   14694:	mov	r0, r5
   14698:	beq	146bc <__assert_fail@plt+0x3604>
   1469c:	ldr	r1, [fp, #16]
   146a0:	ubfx	r0, r5, #5, #3
   146a4:	mov	r2, #1
   146a8:	ldr	r0, [r1, r0, lsl #2]
   146ac:	and	r1, r5, #31
   146b0:	tst	r0, r2, lsl r1
   146b4:	mov	r0, r5
   146b8:	bne	146c8 <__assert_fail@plt+0x3610>
   146bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   146c0:	cmp	r1, #0
   146c4:	beq	14b20 <__assert_fail@plt+0x3a68>
   146c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   146cc:	tst	r1, #1
   146d0:	bne	14e64 <__assert_fail@plt+0x3dac>
   146d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   146d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   146dc:	cmp	r1, #2
   146e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   146e4:	movwne	r1, #1
   146e8:	orr	r1, r1, r2
   146ec:	tst	r1, #1
   146f0:	bne	14728 <__assert_fail@plt+0x3670>
   146f4:	cmp	r9, sl
   146f8:	movcc	r1, #39	; 0x27
   146fc:	strbcc	r1, [r6, r9]
   14700:	add	r1, r9, #1
   14704:	cmp	r1, sl
   14708:	movcc	r2, #36	; 0x24
   1470c:	strbcc	r2, [r6, r1]
   14710:	add	r1, r9, #2
   14714:	add	r9, r9, #3
   14718:	cmp	r1, sl
   1471c:	movcc	r2, #39	; 0x27
   14720:	strbcc	r2, [r6, r1]
   14724:	mov	r2, #1
   14728:	cmp	r9, sl
   1472c:	movcc	r1, #92	; 0x5c
   14730:	strbcc	r1, [r6, r9]
   14734:	add	r9, r9, #1
   14738:	cmp	r9, sl
   1473c:	add	r7, r7, #1
   14740:	strbcc	r0, [r6, r9]
   14744:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14748:	add	r9, r9, #1
   1474c:	and	r0, r0, r4
   14750:	mov	r4, r0
   14754:	cmn	lr, #1
   14758:	bne	140cc <__assert_fail@plt+0x3014>
   1475c:	b	140d8 <__assert_fail@plt+0x3020>
   14760:	ldr	r0, [sp, #28]
   14764:	mov	r4, #0
   14768:	mov	r8, #0
   1476c:	mov	r5, #0
   14770:	cmp	r0, #0
   14774:	beq	1468c <__assert_fail@plt+0x35d4>
   14778:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1477c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14780:	add	r7, r7, #1
   14784:	cmn	lr, #1
   14788:	bne	140cc <__assert_fail@plt+0x3014>
   1478c:	b	140d8 <__assert_fail@plt+0x3020>
   14790:	mov	r0, #0
   14794:	cmn	lr, #1
   14798:	str	r0, [fp, #-36]	; 0xffffffdc
   1479c:	str	r0, [fp, #-40]	; 0xffffffd8
   147a0:	bne	147b4 <__assert_fail@plt+0x36fc>
   147a4:	mov	r0, ip
   147a8:	bl	10fc8 <strlen@plt>
   147ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   147b0:	mov	lr, r0
   147b4:	ldr	r0, [sp, #36]	; 0x24
   147b8:	str	sl, [sp, #56]	; 0x38
   147bc:	str	lr, [sp, #84]	; 0x54
   147c0:	cmp	r0, #0
   147c4:	beq	149dc <__assert_fail@plt+0x3924>
   147c8:	add	r0, ip, r7
   147cc:	mov	r4, #1
   147d0:	mov	r6, #0
   147d4:	sub	sl, fp, #40	; 0x28
   147d8:	str	r0, [sp, #20]
   147dc:	str	r6, [sp, #64]	; 0x40
   147e0:	add	r6, r6, r7
   147e4:	sub	r0, fp, #44	; 0x2c
   147e8:	mov	r3, sl
   147ec:	add	r1, ip, r6
   147f0:	sub	r2, lr, r6
   147f4:	bl	17764 <__assert_fail@plt+0x66ac>
   147f8:	cmn	r0, #2
   147fc:	beq	14b38 <__assert_fail@plt+0x3a80>
   14800:	ldr	sl, [sp, #56]	; 0x38
   14804:	cmn	r0, #1
   14808:	beq	14b2c <__assert_fail@plt+0x3a74>
   1480c:	cmp	r0, #0
   14810:	beq	14b30 <__assert_fail@plt+0x3a78>
   14814:	cmp	r0, #2
   14818:	bcc	148d8 <__assert_fail@plt+0x3820>
   1481c:	ldr	r1, [sp, #64]	; 0x40
   14820:	ldr	r2, [sp, #20]
   14824:	add	r1, r2, r1
   14828:	mov	r2, #1
   1482c:	ldrb	r3, [r1, r2]
   14830:	sub	r3, r3, #91	; 0x5b
   14834:	cmp	r3, #33	; 0x21
   14838:	bhi	148cc <__assert_fail@plt+0x3814>
   1483c:	add	r6, pc, #0
   14840:	ldr	pc, [r6, r3, lsl #2]
   14844:	muleq	r1, r0, lr
   14848:	muleq	r1, r0, lr
   1484c:	andeq	r4, r1, ip, asr #17
   14850:	muleq	r1, r0, lr
   14854:	andeq	r4, r1, ip, asr #17
   14858:	muleq	r1, r0, lr
   1485c:	andeq	r4, r1, ip, asr #17
   14860:	andeq	r4, r1, ip, asr #17
   14864:	andeq	r4, r1, ip, asr #17
   14868:	andeq	r4, r1, ip, asr #17
   1486c:	andeq	r4, r1, ip, asr #17
   14870:	andeq	r4, r1, ip, asr #17
   14874:	andeq	r4, r1, ip, asr #17
   14878:	andeq	r4, r1, ip, asr #17
   1487c:	andeq	r4, r1, ip, asr #17
   14880:	andeq	r4, r1, ip, asr #17
   14884:	andeq	r4, r1, ip, asr #17
   14888:	andeq	r4, r1, ip, asr #17
   1488c:	andeq	r4, r1, ip, asr #17
   14890:	andeq	r4, r1, ip, asr #17
   14894:	andeq	r4, r1, ip, asr #17
   14898:	andeq	r4, r1, ip, asr #17
   1489c:	andeq	r4, r1, ip, asr #17
   148a0:	andeq	r4, r1, ip, asr #17
   148a4:	andeq	r4, r1, ip, asr #17
   148a8:	andeq	r4, r1, ip, asr #17
   148ac:	andeq	r4, r1, ip, asr #17
   148b0:	andeq	r4, r1, ip, asr #17
   148b4:	andeq	r4, r1, ip, asr #17
   148b8:	andeq	r4, r1, ip, asr #17
   148bc:	andeq	r4, r1, ip, asr #17
   148c0:	andeq	r4, r1, ip, asr #17
   148c4:	andeq	r4, r1, ip, asr #17
   148c8:	muleq	r1, r0, lr
   148cc:	add	r2, r2, #1
   148d0:	cmp	r2, r0
   148d4:	bcc	1482c <__assert_fail@plt+0x3774>
   148d8:	ldr	r6, [sp, #64]	; 0x40
   148dc:	add	r6, r0, r6
   148e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   148e4:	bl	10f08 <iswprint@plt>
   148e8:	cmp	r0, #0
   148ec:	sub	sl, fp, #40	; 0x28
   148f0:	movwne	r0, #1
   148f4:	and	r4, r4, r0
   148f8:	mov	r0, sl
   148fc:	bl	10eb4 <mbsinit@plt>
   14900:	ldr	ip, [fp, #-84]	; 0xffffffac
   14904:	ldr	lr, [sp, #84]	; 0x54
   14908:	cmp	r0, #0
   1490c:	beq	147dc <__assert_fail@plt+0x3724>
   14910:	b	14b7c <__assert_fail@plt+0x3ac4>
   14914:	ldr	r0, [sp, #24]
   14918:	cmp	r0, #0
   1491c:	beq	149c4 <__assert_fail@plt+0x390c>
   14920:	add	r0, r7, #2
   14924:	cmp	r0, lr
   14928:	bcs	149c4 <__assert_fail@plt+0x390c>
   1492c:	add	r1, ip, r7
   14930:	ldrb	r1, [r1, #1]
   14934:	cmp	r1, #63	; 0x3f
   14938:	bne	149c4 <__assert_fail@plt+0x390c>
   1493c:	ldrb	r5, [ip, r0]
   14940:	sub	r1, r5, #33	; 0x21
   14944:	cmp	r1, #29
   14948:	bhi	149c4 <__assert_fail@plt+0x390c>
   1494c:	movw	r3, #20929	; 0x51c1
   14950:	mov	r2, #1
   14954:	movt	r3, #14336	; 0x3800
   14958:	tst	r3, r2, lsl r1
   1495c:	beq	149c4 <__assert_fail@plt+0x390c>
   14960:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14964:	tst	r1, #1
   14968:	bne	14fb4 <__assert_fail@plt+0x3efc>
   1496c:	cmp	r9, sl
   14970:	mov	r7, r0
   14974:	mov	r4, #0
   14978:	movcc	r1, #63	; 0x3f
   1497c:	strbcc	r1, [r6, r9]
   14980:	add	r1, r9, #1
   14984:	cmp	r1, sl
   14988:	movcc	r2, #34	; 0x22
   1498c:	strbcc	r2, [r6, r1]
   14990:	add	r1, r9, #2
   14994:	cmp	r1, sl
   14998:	movcc	r2, #34	; 0x22
   1499c:	strbcc	r2, [r6, r1]
   149a0:	add	r1, r9, #3
   149a4:	add	r9, r9, #4
   149a8:	cmp	r1, sl
   149ac:	movcc	r2, #63	; 0x3f
   149b0:	strbcc	r2, [r6, r1]
   149b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   149b8:	cmp	r0, #0
   149bc:	bne	143b4 <__assert_fail@plt+0x32fc>
   149c0:	b	1468c <__assert_fail@plt+0x35d4>
   149c4:	mov	r5, #63	; 0x3f
   149c8:	mov	r4, #0
   149cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   149d0:	cmp	r0, #0
   149d4:	bne	143b4 <__assert_fail@plt+0x32fc>
   149d8:	b	1468c <__assert_fail@plt+0x35d4>
   149dc:	mov	r4, #1
   149e0:	mov	r6, #0
   149e4:	sub	sl, fp, #40	; 0x28
   149e8:	str	r6, [sp, #64]	; 0x40
   149ec:	add	r6, r6, r7
   149f0:	sub	r0, fp, #44	; 0x2c
   149f4:	mov	r3, sl
   149f8:	add	r1, ip, r6
   149fc:	sub	r2, lr, r6
   14a00:	bl	17764 <__assert_fail@plt+0x66ac>
   14a04:	cmn	r0, #2
   14a08:	beq	14b38 <__assert_fail@plt+0x3a80>
   14a0c:	cmn	r0, #1
   14a10:	beq	14b2c <__assert_fail@plt+0x3a74>
   14a14:	ldr	r6, [sp, #64]	; 0x40
   14a18:	cmp	r0, #0
   14a1c:	beq	14b78 <__assert_fail@plt+0x3ac0>
   14a20:	add	r6, r0, r6
   14a24:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14a28:	bl	10f08 <iswprint@plt>
   14a2c:	cmp	r0, #0
   14a30:	sub	sl, fp, #40	; 0x28
   14a34:	movwne	r0, #1
   14a38:	and	r4, r4, r0
   14a3c:	mov	r0, sl
   14a40:	bl	10eb4 <mbsinit@plt>
   14a44:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a48:	ldr	lr, [sp, #84]	; 0x54
   14a4c:	cmp	r0, #0
   14a50:	beq	149e8 <__assert_fail@plt+0x3930>
   14a54:	b	14b7c <__assert_fail@plt+0x3ac4>
   14a58:	cmp	r9, sl
   14a5c:	mov	r2, #1
   14a60:	movcc	r0, #39	; 0x27
   14a64:	strbcc	r0, [r6, r9]
   14a68:	add	r0, r9, #1
   14a6c:	cmp	r0, sl
   14a70:	movcc	r1, #36	; 0x24
   14a74:	strbcc	r1, [r6, r0]
   14a78:	add	r0, r9, #2
   14a7c:	cmp	r0, sl
   14a80:	movcc	r1, #39	; 0x27
   14a84:	strbcc	r1, [r6, r0]
   14a88:	add	r0, r9, #3
   14a8c:	cmp	r0, sl
   14a90:	add	r9, r0, #1
   14a94:	str	r2, [fp, #-48]	; 0xffffffd0
   14a98:	movcc	r1, #92	; 0x5c
   14a9c:	strbcc	r1, [r6, r0]
   14aa0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14aa4:	cmp	r1, #2
   14aa8:	beq	14b08 <__assert_fail@plt+0x3a50>
   14aac:	add	r1, r7, #1
   14ab0:	mov	r4, #0
   14ab4:	mov	r8, #1
   14ab8:	mov	r5, #48	; 0x30
   14abc:	cmp	r1, lr
   14ac0:	bcs	143a8 <__assert_fail@plt+0x32f0>
   14ac4:	ldrb	r1, [ip, r1]
   14ac8:	sub	r1, r1, #48	; 0x30
   14acc:	uxtb	r1, r1
   14ad0:	cmp	r1, #9
   14ad4:	bhi	143a8 <__assert_fail@plt+0x32f0>
   14ad8:	cmp	r9, sl
   14adc:	movcc	r1, #48	; 0x30
   14ae0:	strbcc	r1, [r6, r9]
   14ae4:	add	r1, r0, #2
   14ae8:	add	r9, r0, #3
   14aec:	cmp	r1, sl
   14af0:	movcc	r2, #48	; 0x30
   14af4:	strbcc	r2, [r6, r1]
   14af8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14afc:	cmp	r0, #0
   14b00:	bne	143b4 <__assert_fail@plt+0x32fc>
   14b04:	b	1468c <__assert_fail@plt+0x35d4>
   14b08:	mov	r0, #48	; 0x30
   14b0c:	mov	r8, #1
   14b10:	mov	r4, #0
   14b14:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14b18:	cmp	r1, #0
   14b1c:	bne	146c8 <__assert_fail@plt+0x3610>
   14b20:	cmp	r8, #0
   14b24:	beq	14644 <__assert_fail@plt+0x358c>
   14b28:	b	14434 <__assert_fail@plt+0x337c>
   14b2c:	mov	r4, #0
   14b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b34:	b	14b70 <__assert_fail@plt+0x3ab8>
   14b38:	ldr	r1, [sp, #84]	; 0x54
   14b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b40:	mov	r4, #0
   14b44:	cmp	r6, r1
   14b48:	bcs	14b70 <__assert_fail@plt+0x3ab8>
   14b4c:	ldrb	r0, [ip, r6]
   14b50:	cmp	r0, #0
   14b54:	beq	14b70 <__assert_fail@plt+0x3ab8>
   14b58:	ldr	r0, [sp, #64]	; 0x40
   14b5c:	add	r0, r0, #1
   14b60:	add	r6, r0, r7
   14b64:	str	r0, [sp, #64]	; 0x40
   14b68:	cmp	r6, r1
   14b6c:	bcc	14b4c <__assert_fail@plt+0x3a94>
   14b70:	ldr	r6, [sp, #64]	; 0x40
   14b74:	b	14b7c <__assert_fail@plt+0x3ac4>
   14b78:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b7c:	mov	r1, r6
   14b80:	ldr	r6, [sp, #76]	; 0x4c
   14b84:	ldr	sl, [sp, #56]	; 0x38
   14b88:	ldr	r0, [sp, #44]	; 0x2c
   14b8c:	cmp	r1, #1
   14b90:	orr	r2, r4, r0
   14b94:	mov	r0, r1
   14b98:	bhi	14bb8 <__assert_fail@plt+0x3b00>
   14b9c:	tst	r2, #1
   14ba0:	beq	14bb8 <__assert_fail@plt+0x3b00>
   14ba4:	ldr	lr, [sp, #84]	; 0x54
   14ba8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14bac:	cmp	r0, #0
   14bb0:	bne	143b4 <__assert_fail@plt+0x32fc>
   14bb4:	b	1468c <__assert_fail@plt+0x35d4>
   14bb8:	str	r2, [sp, #64]	; 0x40
   14bbc:	add	r0, r0, r7
   14bc0:	add	r1, r7, #1
   14bc4:	ldr	lr, [sp, #84]	; 0x54
   14bc8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14bcc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14bd0:	mov	r3, #0
   14bd4:	str	r0, [sp, #56]	; 0x38
   14bd8:	ldr	r0, [sp, #64]	; 0x40
   14bdc:	tst	r0, #1
   14be0:	bne	14cc8 <__assert_fail@plt+0x3c10>
   14be4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14be8:	tst	r0, #1
   14bec:	bne	14e68 <__assert_fail@plt+0x3db0>
   14bf0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14bf4:	cmp	r7, #2
   14bf8:	movwne	r3, #1
   14bfc:	orr	r3, r3, r2
   14c00:	tst	r3, #1
   14c04:	bne	14c3c <__assert_fail@plt+0x3b84>
   14c08:	cmp	r9, sl
   14c0c:	add	r3, r9, #1
   14c10:	movcc	r2, #39	; 0x27
   14c14:	strbcc	r2, [r6, r9]
   14c18:	cmp	r3, sl
   14c1c:	movcc	r2, #36	; 0x24
   14c20:	strbcc	r2, [r6, r3]
   14c24:	add	r3, r9, #2
   14c28:	add	r9, r9, #3
   14c2c:	cmp	r3, sl
   14c30:	movcc	r2, #39	; 0x27
   14c34:	strbcc	r2, [r6, r3]
   14c38:	mov	r2, #1
   14c3c:	cmp	r9, sl
   14c40:	mov	r0, r2
   14c44:	movcc	r3, #92	; 0x5c
   14c48:	strbcc	r3, [r6, r9]
   14c4c:	add	r3, r9, #1
   14c50:	cmp	r3, sl
   14c54:	andcc	r7, r5, #192	; 0xc0
   14c58:	movcc	r2, #48	; 0x30
   14c5c:	orrcc	r7, r2, r7, lsr #6
   14c60:	strbcc	r7, [r6, r3]
   14c64:	add	r3, r9, #2
   14c68:	add	r9, r9, #3
   14c6c:	cmp	r3, sl
   14c70:	lsrcc	r7, r5, #3
   14c74:	movcc	r2, #6
   14c78:	bficc	r7, r2, #3, #29
   14c7c:	mov	r2, #6
   14c80:	strbcc	r7, [r6, r3]
   14c84:	bfi	r5, r2, #3, #29
   14c88:	mov	r3, #1
   14c8c:	mov	r2, r0
   14c90:	ldr	r0, [sp, #56]	; 0x38
   14c94:	and	r8, r3, #1
   14c98:	cmp	r0, r1
   14c9c:	bhi	14cfc <__assert_fail@plt+0x3c44>
   14ca0:	b	14d3c <__assert_fail@plt+0x3c84>
   14ca4:	cmp	r9, sl
   14ca8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14cac:	strbcc	r5, [r6, r9]
   14cb0:	add	r9, r9, #1
   14cb4:	ldrb	r5, [ip, r1]
   14cb8:	add	r1, r1, #1
   14cbc:	ldr	r0, [sp, #64]	; 0x40
   14cc0:	tst	r0, #1
   14cc4:	beq	14be4 <__assert_fail@plt+0x3b2c>
   14cc8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14ccc:	tst	r7, #1
   14cd0:	beq	14ce4 <__assert_fail@plt+0x3c2c>
   14cd4:	cmp	r9, sl
   14cd8:	movcc	r7, #92	; 0x5c
   14cdc:	strbcc	r7, [r6, r9]
   14ce0:	add	r9, r9, #1
   14ce4:	mov	r7, #0
   14ce8:	str	r7, [fp, #-56]	; 0xffffffc8
   14cec:	ldr	r0, [sp, #56]	; 0x38
   14cf0:	and	r8, r3, #1
   14cf4:	cmp	r0, r1
   14cf8:	bls	14d3c <__assert_fail@plt+0x3c84>
   14cfc:	cmp	r8, #0
   14d00:	mvn	r7, r2
   14d04:	movwne	r8, #1
   14d08:	orr	r7, r7, r8
   14d0c:	tst	r7, #1
   14d10:	bne	14ca4 <__assert_fail@plt+0x3bec>
   14d14:	cmp	r9, sl
   14d18:	movcc	r7, #39	; 0x27
   14d1c:	strbcc	r7, [r6, r9]
   14d20:	add	r7, r9, #1
   14d24:	add	r9, r9, #2
   14d28:	cmp	r7, sl
   14d2c:	movcc	r2, #39	; 0x27
   14d30:	strbcc	r2, [r6, r7]
   14d34:	mov	r2, #0
   14d38:	b	14ca4 <__assert_fail@plt+0x3bec>
   14d3c:	cmp	r8, #0
   14d40:	sub	r7, r1, #1
   14d44:	mov	r0, r5
   14d48:	str	r2, [fp, #-48]	; 0xffffffd0
   14d4c:	movwne	r8, #1
   14d50:	cmp	r8, #0
   14d54:	beq	14644 <__assert_fail@plt+0x358c>
   14d58:	b	14434 <__assert_fail@plt+0x337c>
   14d5c:	mov	lr, r7
   14d60:	b	14d68 <__assert_fail@plt+0x3cb0>
   14d64:	mvn	lr, #0
   14d68:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14d6c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14d70:	eor	r0, r7, #2
   14d74:	orr	r0, r0, r9
   14d78:	clz	r0, r0
   14d7c:	lsr	r0, r0, #5
   14d80:	tst	r1, r0
   14d84:	bne	14e84 <__assert_fail@plt+0x3dcc>
   14d88:	mov	r0, r1
   14d8c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14d90:	cmp	r7, #2
   14d94:	movwne	r1, #1
   14d98:	orr	r0, r0, r1
   14d9c:	tst	r0, #1
   14da0:	ldreq	r0, [sp, #52]	; 0x34
   14da4:	streq	lr, [sp, #84]	; 0x54
   14da8:	eoreq	r0, r0, #1
   14dac:	tsteq	r0, #1
   14db0:	bne	14f48 <__assert_fail@plt+0x3e90>
   14db4:	tst	r4, #1
   14db8:	bne	14f04 <__assert_fail@plt+0x3e4c>
   14dbc:	ldr	r6, [sp, #48]	; 0x30
   14dc0:	mov	r8, #0
   14dc4:	cmp	r6, #0
   14dc8:	beq	14f40 <__assert_fail@plt+0x3e88>
   14dcc:	ldr	r0, [sp, #80]	; 0x50
   14dd0:	mov	r1, #0
   14dd4:	cmp	sl, #0
   14dd8:	mov	r4, #0
   14ddc:	str	r1, [fp, #-72]	; 0xffffffb8
   14de0:	beq	13cd4 <__assert_fail@plt+0x2c1c>
   14de4:	b	14f48 <__assert_fail@plt+0x3e90>
   14de8:	ldrb	r1, [r0, #3]
   14dec:	cmp	r1, #56	; 0x38
   14df0:	ldrbeq	r1, [r0, #4]
   14df4:	cmpeq	r1, #48	; 0x30
   14df8:	bne	13ecc <__assert_fail@plt+0x2e14>
   14dfc:	ldrb	r1, [r0, #5]
   14e00:	cmp	r1, #51	; 0x33
   14e04:	ldrbeq	r1, [r0, #6]
   14e08:	cmpeq	r1, #48	; 0x30
   14e0c:	bne	13ecc <__assert_fail@plt+0x2e14>
   14e10:	ldrb	r0, [r0, #7]
   14e14:	cmp	r0, #0
   14e18:	movw	r0, #34201	; 0x8599
   14e1c:	movt	r0, #1
   14e20:	str	r0, [sp, #68]	; 0x44
   14e24:	bne	13ecc <__assert_fail@plt+0x2e14>
   14e28:	b	13ee8 <__assert_fail@plt+0x2e30>
   14e2c:	ldrb	r1, [r0, #4]
   14e30:	cmp	r1, #48	; 0x30
   14e34:	ldrbeq	r1, [r0, #5]
   14e38:	cmpeq	r1, #51	; 0x33
   14e3c:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   14e40:	ldrb	r1, [r0, #6]
   14e44:	cmp	r1, #48	; 0x30
   14e48:	ldrbeq	r0, [r0, #7]
   14e4c:	cmpeq	r0, #0
   14e50:	bne	13fb0 <__assert_fail@plt+0x2ef8>
   14e54:	movw	r0, #34205	; 0x859d
   14e58:	movt	r0, #1
   14e5c:	str	r0, [sp, #72]	; 0x48
   14e60:	b	13fd0 <__assert_fail@plt+0x2f18>
   14e64:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14e68:	ldr	r2, [sp, #80]	; 0x50
   14e6c:	b	14ea4 <__assert_fail@plt+0x3dec>
   14e70:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e74:	mov	r2, #1
   14e78:	mov	lr, r4
   14e7c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14e80:	b	14ea4 <__assert_fail@plt+0x3dec>
   14e84:	ldr	r2, [sp, #80]	; 0x50
   14e88:	mov	r7, #2
   14e8c:	b	14ea4 <__assert_fail@plt+0x3dec>
   14e90:	ldr	r6, [sp, #76]	; 0x4c
   14e94:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e98:	ldr	lr, [sp, #84]	; 0x54
   14e9c:	ldr	r2, [sp, #80]	; 0x50
   14ea0:	mov	r7, #2
   14ea4:	mov	r0, #0
   14ea8:	ldr	r1, [fp, #12]
   14eac:	tst	r2, #1
   14eb0:	mov	r2, r7
   14eb4:	mov	r3, lr
   14eb8:	str	r0, [sp, #8]
   14ebc:	ldr	r0, [sp, #68]	; 0x44
   14ec0:	movwne	r2, #4
   14ec4:	cmp	r7, #2
   14ec8:	movne	r2, r7
   14ecc:	str	r2, [sp]
   14ed0:	mov	r2, ip
   14ed4:	bic	r1, r1, #2
   14ed8:	str	r0, [sp, #12]
   14edc:	ldr	r0, [sp, #72]	; 0x48
   14ee0:	str	r1, [sp, #4]
   14ee4:	mov	r1, sl
   14ee8:	str	r0, [sp, #16]
   14eec:	mov	r0, r6
   14ef0:	bl	13c58 <__assert_fail@plt+0x2ba0>
   14ef4:	mov	r9, r0
   14ef8:	mov	r0, r9
   14efc:	sub	sp, fp, #28
   14f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f04:	mov	r0, #5
   14f08:	ldr	r1, [sp, #48]	; 0x30
   14f0c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14f10:	ldr	r3, [sp, #84]	; 0x54
   14f14:	str	r0, [sp]
   14f18:	ldr	r0, [fp, #12]
   14f1c:	str	r0, [sp, #4]
   14f20:	ldr	r0, [fp, #16]
   14f24:	str	r0, [sp, #8]
   14f28:	ldr	r0, [sp, #68]	; 0x44
   14f2c:	str	r0, [sp, #12]
   14f30:	ldr	r0, [sp, #72]	; 0x48
   14f34:	str	r0, [sp, #16]
   14f38:	ldr	r0, [sp, #76]	; 0x4c
   14f3c:	b	14ef0 <__assert_fail@plt+0x3e38>
   14f40:	mov	r0, #0
   14f44:	str	r0, [fp, #-72]	; 0xffffffb8
   14f48:	ldr	r1, [sp, #92]	; 0x5c
   14f4c:	cmp	r1, #0
   14f50:	beq	14f90 <__assert_fail@plt+0x3ed8>
   14f54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14f58:	ldr	r2, [sp, #76]	; 0x4c
   14f5c:	tst	r0, #1
   14f60:	bne	14f94 <__assert_fail@plt+0x3edc>
   14f64:	ldrb	r0, [r1]
   14f68:	cmp	r0, #0
   14f6c:	beq	14f94 <__assert_fail@plt+0x3edc>
   14f70:	add	r1, r1, #1
   14f74:	cmp	r9, sl
   14f78:	strbcc	r0, [r2, r9]
   14f7c:	add	r9, r9, #1
   14f80:	ldrb	r0, [r1], #1
   14f84:	cmp	r0, #0
   14f88:	bne	14f74 <__assert_fail@plt+0x3ebc>
   14f8c:	b	14f94 <__assert_fail@plt+0x3edc>
   14f90:	ldr	r2, [sp, #76]	; 0x4c
   14f94:	cmp	r9, sl
   14f98:	movcc	r0, #0
   14f9c:	strbcc	r0, [r2, r9]
   14fa0:	mov	r0, r9
   14fa4:	sub	sp, fp, #28
   14fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fac:	mov	r2, #1
   14fb0:	b	14e7c <__assert_fail@plt+0x3dc4>
   14fb4:	ldr	r2, [sp, #80]	; 0x50
   14fb8:	mov	r7, #5
   14fbc:	b	14ea4 <__assert_fail@plt+0x3dec>
   14fc0:	bl	110a0 <abort@plt>
   14fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fc8:	add	fp, sp, #28
   14fcc:	sub	sp, sp, #28
   14fd0:	movw	r5, #37224	; 0x9168
   14fd4:	cmp	r2, #0
   14fd8:	mov	r4, r1
   14fdc:	mov	r7, r0
   14fe0:	str	r0, [sp, #20]
   14fe4:	movt	r5, #2
   14fe8:	movne	r5, r2
   14fec:	bl	10fec <__errno_location@plt>
   14ff0:	mov	sl, r0
   14ff4:	ldm	r5, {r0, r1}
   14ff8:	ldr	r2, [r5, #40]	; 0x28
   14ffc:	ldr	r3, [r5, #44]	; 0x2c
   15000:	add	r9, r5, #8
   15004:	ldr	r6, [sl]
   15008:	orr	r8, r1, #1
   1500c:	mov	r1, #0
   15010:	str	r6, [sp, #24]
   15014:	stm	sp, {r0, r8, r9}
   15018:	str	r2, [sp, #12]
   1501c:	str	r3, [sp, #16]
   15020:	mov	r0, #0
   15024:	mov	r2, r7
   15028:	mov	r3, r4
   1502c:	mov	r6, r4
   15030:	bl	13c58 <__assert_fail@plt+0x2ba0>
   15034:	add	r7, r0, #1
   15038:	mov	r0, r7
   1503c:	bl	16104 <__assert_fail@plt+0x504c>
   15040:	mov	r4, r0
   15044:	ldr	r0, [r5]
   15048:	ldr	r2, [r5, #44]	; 0x2c
   1504c:	ldr	r1, [r5, #40]	; 0x28
   15050:	mov	r3, r6
   15054:	stm	sp, {r0, r8, r9}
   15058:	str	r2, [sp, #16]
   1505c:	str	r1, [sp, #12]
   15060:	mov	r0, r4
   15064:	mov	r1, r7
   15068:	ldr	r2, [sp, #20]
   1506c:	bl	13c58 <__assert_fail@plt+0x2ba0>
   15070:	ldr	r0, [sp, #24]
   15074:	str	r0, [sl]
   15078:	mov	r0, r4
   1507c:	sub	sp, fp, #28
   15080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15088:	add	fp, sp, #28
   1508c:	sub	sp, sp, #36	; 0x24
   15090:	movw	r8, #37224	; 0x9168
   15094:	cmp	r3, #0
   15098:	mov	r4, r2
   1509c:	str	r2, [sp, #24]
   150a0:	mov	r5, r1
   150a4:	mov	r6, r0
   150a8:	str	r0, [sp, #20]
   150ac:	movt	r8, #2
   150b0:	movne	r8, r3
   150b4:	bl	10fec <__errno_location@plt>
   150b8:	str	r0, [sp, #28]
   150bc:	cmp	r4, #0
   150c0:	add	sl, r8, #8
   150c4:	ldm	r8, {r3, r9}
   150c8:	ldr	r7, [r0]
   150cc:	ldr	r1, [r8, #40]	; 0x28
   150d0:	ldr	r2, [r8, #44]	; 0x2c
   150d4:	mov	r0, #0
   150d8:	orreq	r9, r9, #1
   150dc:	str	r7, [sp, #32]
   150e0:	mov	r7, r5
   150e4:	stm	sp, {r3, r9, sl}
   150e8:	str	r1, [sp, #12]
   150ec:	str	r2, [sp, #16]
   150f0:	mov	r1, #0
   150f4:	mov	r2, r6
   150f8:	mov	r3, r5
   150fc:	bl	13c58 <__assert_fail@plt+0x2ba0>
   15100:	add	r4, r0, #1
   15104:	mov	r5, r0
   15108:	mov	r0, r4
   1510c:	bl	16104 <__assert_fail@plt+0x504c>
   15110:	mov	r6, r0
   15114:	ldr	r0, [r8]
   15118:	ldr	r2, [r8, #44]	; 0x2c
   1511c:	ldr	r1, [r8, #40]	; 0x28
   15120:	mov	r3, r7
   15124:	stm	sp, {r0, r9, sl}
   15128:	str	r2, [sp, #16]
   1512c:	str	r1, [sp, #12]
   15130:	mov	r0, r6
   15134:	mov	r1, r4
   15138:	ldr	r2, [sp, #20]
   1513c:	bl	13c58 <__assert_fail@plt+0x2ba0>
   15140:	ldr	r0, [sp, #24]
   15144:	ldr	r1, [sp, #32]
   15148:	ldr	r2, [sp, #28]
   1514c:	cmp	r0, #0
   15150:	str	r1, [r2]
   15154:	strne	r5, [r0]
   15158:	mov	r0, r6
   1515c:	sub	sp, fp, #28
   15160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15164:	push	{r4, r5, r6, r7, fp, lr}
   15168:	add	fp, sp, #16
   1516c:	movw	r4, #37160	; 0x9128
   15170:	movt	r4, #2
   15174:	ldrd	r6, [r4]
   15178:	cmp	r7, #2
   1517c:	blt	151a8 <__assert_fail@plt+0x40f0>
   15180:	add	r5, r6, #12
   15184:	mov	r7, #0
   15188:	ldr	r0, [r5, r7, lsl #3]
   1518c:	bl	13864 <__assert_fail@plt+0x27ac>
   15190:	ldr	r1, [r4, #4]
   15194:	add	r2, r7, #2
   15198:	add	r0, r7, #1
   1519c:	mov	r7, r0
   151a0:	cmp	r2, r1
   151a4:	blt	15188 <__assert_fail@plt+0x40d0>
   151a8:	ldr	r0, [r6, #4]
   151ac:	movw	r5, #37272	; 0x9198
   151b0:	movt	r5, #2
   151b4:	cmp	r0, r5
   151b8:	beq	151cc <__assert_fail@plt+0x4114>
   151bc:	bl	13864 <__assert_fail@plt+0x27ac>
   151c0:	mov	r0, #256	; 0x100
   151c4:	str	r0, [r4, #8]
   151c8:	str	r5, [r4, #12]
   151cc:	add	r5, r4, #8
   151d0:	cmp	r6, r5
   151d4:	beq	151e4 <__assert_fail@plt+0x412c>
   151d8:	mov	r0, r6
   151dc:	bl	13864 <__assert_fail@plt+0x27ac>
   151e0:	str	r5, [r4]
   151e4:	mov	r0, #1
   151e8:	str	r0, [r4, #4]
   151ec:	pop	{r4, r5, r6, r7, fp, pc}
   151f0:	movw	r3, #37224	; 0x9168
   151f4:	mvn	r2, #0
   151f8:	movt	r3, #2
   151fc:	b	15200 <__assert_fail@plt+0x4148>
   15200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15204:	add	fp, sp, #28
   15208:	sub	sp, sp, #44	; 0x2c
   1520c:	mov	r7, r3
   15210:	str	r2, [sp, #36]	; 0x24
   15214:	str	r1, [sp, #32]
   15218:	mov	r5, r0
   1521c:	bl	10fec <__errno_location@plt>
   15220:	cmp	r5, #0
   15224:	blt	15388 <__assert_fail@plt+0x42d0>
   15228:	cmn	r5, #-2147483647	; 0x80000001
   1522c:	beq	15388 <__assert_fail@plt+0x42d0>
   15230:	movw	r8, #37160	; 0x9128
   15234:	mov	r4, r0
   15238:	movt	r8, #2
   1523c:	ldr	r6, [r8]
   15240:	ldr	r1, [r8, #4]
   15244:	ldr	r0, [r0]
   15248:	str	r4, [sp, #28]
   1524c:	cmp	r1, r5
   15250:	str	r0, [sp, #24]
   15254:	ble	15260 <__assert_fail@plt+0x41a8>
   15258:	mov	sl, r6
   1525c:	b	152c4 <__assert_fail@plt+0x420c>
   15260:	mov	r0, #8
   15264:	add	r9, r8, #8
   15268:	add	r2, r5, #1
   1526c:	str	r1, [fp, #-32]	; 0xffffffe0
   15270:	mvn	r3, #-2147483648	; 0x80000000
   15274:	str	r0, [sp]
   15278:	subs	r0, r6, r9
   1527c:	sub	r2, r2, r1
   15280:	sub	r1, fp, #32
   15284:	movne	r0, r6
   15288:	bl	16304 <__assert_fail@plt+0x524c>
   1528c:	str	r0, [r8]
   15290:	cmp	r6, r9
   15294:	mov	sl, r0
   15298:	ldrdeq	r0, [r8, #8]
   1529c:	stmeq	sl, {r0, r1}
   152a0:	ldr	r1, [r8, #4]
   152a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   152a8:	add	r0, sl, r1, lsl #3
   152ac:	sub	r1, r2, r1
   152b0:	lsl	r2, r1, #3
   152b4:	mov	r1, #0
   152b8:	bl	11004 <memset@plt>
   152bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   152c0:	str	r0, [r8, #4]
   152c4:	mov	r9, sl
   152c8:	ldr	r6, [r9, r5, lsl #3]!
   152cc:	ldr	r4, [r9, #4]!
   152d0:	ldm	r7, {r0, r1}
   152d4:	ldr	r2, [r7, #40]	; 0x28
   152d8:	ldr	r3, [r7, #44]	; 0x2c
   152dc:	orr	r8, r1, #1
   152e0:	add	r1, r7, #8
   152e4:	stm	sp, {r0, r8}
   152e8:	add	r0, sp, #8
   152ec:	str	r1, [sp, #20]
   152f0:	stm	r0, {r1, r2, r3}
   152f4:	mov	r0, r4
   152f8:	mov	r1, r6
   152fc:	ldr	r2, [sp, #32]
   15300:	ldr	r3, [sp, #36]	; 0x24
   15304:	bl	13c58 <__assert_fail@plt+0x2ba0>
   15308:	cmp	r6, r0
   1530c:	bhi	15370 <__assert_fail@plt+0x42b8>
   15310:	add	r6, r0, #1
   15314:	movw	r0, #37272	; 0x9198
   15318:	movt	r0, #2
   1531c:	str	r6, [sl, r5, lsl #3]
   15320:	cmp	r4, r0
   15324:	beq	15330 <__assert_fail@plt+0x4278>
   15328:	mov	r0, r4
   1532c:	bl	13864 <__assert_fail@plt+0x27ac>
   15330:	mov	r0, r6
   15334:	bl	16104 <__assert_fail@plt+0x504c>
   15338:	str	r0, [r9]
   1533c:	mov	r4, r0
   15340:	add	r3, sp, #8
   15344:	ldr	r0, [r7]
   15348:	ldr	r1, [r7, #40]	; 0x28
   1534c:	ldr	r2, [r7, #44]	; 0x2c
   15350:	stm	sp, {r0, r8}
   15354:	ldr	r0, [sp, #20]
   15358:	stm	r3, {r0, r1, r2}
   1535c:	mov	r0, r4
   15360:	mov	r1, r6
   15364:	ldr	r2, [sp, #32]
   15368:	ldr	r3, [sp, #36]	; 0x24
   1536c:	bl	13c58 <__assert_fail@plt+0x2ba0>
   15370:	ldr	r1, [sp, #24]
   15374:	ldr	r0, [sp, #28]
   15378:	str	r1, [r0]
   1537c:	mov	r0, r4
   15380:	sub	sp, fp, #28
   15384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15388:	bl	110a0 <abort@plt>
   1538c:	movw	r3, #37224	; 0x9168
   15390:	movt	r3, #2
   15394:	b	15200 <__assert_fail@plt+0x4148>
   15398:	movw	r3, #37224	; 0x9168
   1539c:	mov	r1, r0
   153a0:	mov	r0, #0
   153a4:	mvn	r2, #0
   153a8:	movt	r3, #2
   153ac:	b	15200 <__assert_fail@plt+0x4148>
   153b0:	movw	r3, #37224	; 0x9168
   153b4:	mov	r2, r1
   153b8:	mov	r1, r0
   153bc:	mov	r0, #0
   153c0:	movt	r3, #2
   153c4:	b	15200 <__assert_fail@plt+0x4148>
   153c8:	push	{fp, lr}
   153cc:	mov	fp, sp
   153d0:	sub	sp, sp, #48	; 0x30
   153d4:	vmov.i32	q8, #0	; 0x00000000
   153d8:	mov	ip, #32
   153dc:	mov	r3, sp
   153e0:	mov	lr, r2
   153e4:	cmp	r1, #10
   153e8:	add	r2, r3, #16
   153ec:	vst1.64	{d16-d17}, [r3], ip
   153f0:	vst1.64	{d16-d17}, [r3]
   153f4:	vst1.64	{d16-d17}, [r2]
   153f8:	beq	15418 <__assert_fail@plt+0x4360>
   153fc:	str	r1, [sp]
   15400:	mov	r3, sp
   15404:	mov	r1, lr
   15408:	mvn	r2, #0
   1540c:	bl	15200 <__assert_fail@plt+0x4148>
   15410:	mov	sp, fp
   15414:	pop	{fp, pc}
   15418:	bl	110a0 <abort@plt>
   1541c:	push	{r4, sl, fp, lr}
   15420:	add	fp, sp, #8
   15424:	sub	sp, sp, #48	; 0x30
   15428:	mov	ip, r3
   1542c:	mov	r3, sp
   15430:	vmov.i32	q8, #0	; 0x00000000
   15434:	mov	lr, #32
   15438:	cmp	r1, #10
   1543c:	add	r4, r3, #16
   15440:	vst1.64	{d16-d17}, [r3], lr
   15444:	vst1.64	{d16-d17}, [r3]
   15448:	vst1.64	{d16-d17}, [r4]
   1544c:	beq	1546c <__assert_fail@plt+0x43b4>
   15450:	str	r1, [sp]
   15454:	mov	r1, r2
   15458:	mov	r3, sp
   1545c:	mov	r2, ip
   15460:	bl	15200 <__assert_fail@plt+0x4148>
   15464:	sub	sp, fp, #8
   15468:	pop	{r4, sl, fp, pc}
   1546c:	bl	110a0 <abort@plt>
   15470:	push	{fp, lr}
   15474:	mov	fp, sp
   15478:	sub	sp, sp, #48	; 0x30
   1547c:	mov	r3, sp
   15480:	vmov.i32	q8, #0	; 0x00000000
   15484:	mov	ip, #32
   15488:	cmp	r0, #10
   1548c:	add	r2, r3, #16
   15490:	vst1.64	{d16-d17}, [r3], ip
   15494:	vst1.64	{d16-d17}, [r3]
   15498:	vst1.64	{d16-d17}, [r2]
   1549c:	beq	154bc <__assert_fail@plt+0x4404>
   154a0:	str	r0, [sp]
   154a4:	mov	r3, sp
   154a8:	mov	r0, #0
   154ac:	mvn	r2, #0
   154b0:	bl	15200 <__assert_fail@plt+0x4148>
   154b4:	mov	sp, fp
   154b8:	pop	{fp, pc}
   154bc:	bl	110a0 <abort@plt>
   154c0:	push	{fp, lr}
   154c4:	mov	fp, sp
   154c8:	sub	sp, sp, #48	; 0x30
   154cc:	mov	r3, sp
   154d0:	vmov.i32	q8, #0	; 0x00000000
   154d4:	mov	ip, #32
   154d8:	cmp	r0, #10
   154dc:	add	lr, r3, #16
   154e0:	vst1.64	{d16-d17}, [r3], ip
   154e4:	vst1.64	{d16-d17}, [r3]
   154e8:	vst1.64	{d16-d17}, [lr]
   154ec:	beq	15508 <__assert_fail@plt+0x4450>
   154f0:	str	r0, [sp]
   154f4:	mov	r3, sp
   154f8:	mov	r0, #0
   154fc:	bl	15200 <__assert_fail@plt+0x4148>
   15500:	mov	sp, fp
   15504:	pop	{fp, pc}
   15508:	bl	110a0 <abort@plt>
   1550c:	push	{r4, sl, fp, lr}
   15510:	add	fp, sp, #8
   15514:	sub	sp, sp, #48	; 0x30
   15518:	mov	lr, r0
   1551c:	movw	r0, #37224	; 0x9168
   15520:	mov	r3, #32
   15524:	mov	ip, r1
   15528:	mov	r4, #1
   1552c:	movt	r0, #2
   15530:	add	r1, r0, #16
   15534:	vld1.64	{d16-d17}, [r0], r3
   15538:	mov	r3, sp
   1553c:	vld1.64	{d18-d19}, [r1]
   15540:	add	r1, r3, #16
   15544:	vld1.64	{d20-d21}, [r0]
   15548:	add	r0, r3, #32
   1554c:	vst1.64	{d18-d19}, [r1]
   15550:	mov	r1, r3
   15554:	vst1.64	{d20-d21}, [r0]
   15558:	mov	r0, #28
   1555c:	and	r0, r0, r2, lsr #3
   15560:	and	r2, r2, #31
   15564:	vst1.64	{d16-d17}, [r1], r0
   15568:	ldr	r0, [r1, #8]
   1556c:	bic	r4, r4, r0, lsr r2
   15570:	eor	r0, r0, r4, lsl r2
   15574:	mov	r2, ip
   15578:	str	r0, [r1, #8]
   1557c:	mov	r0, #0
   15580:	mov	r1, lr
   15584:	bl	15200 <__assert_fail@plt+0x4148>
   15588:	sub	sp, fp, #8
   1558c:	pop	{r4, sl, fp, pc}
   15590:	push	{fp, lr}
   15594:	mov	fp, sp
   15598:	sub	sp, sp, #48	; 0x30
   1559c:	mov	ip, r0
   155a0:	movw	r0, #37224	; 0x9168
   155a4:	mov	r3, #32
   155a8:	movt	r0, #2
   155ac:	add	r2, r0, #16
   155b0:	vld1.64	{d16-d17}, [r0], r3
   155b4:	mov	r3, sp
   155b8:	vld1.64	{d18-d19}, [r2]
   155bc:	add	r2, r3, #16
   155c0:	vld1.64	{d20-d21}, [r0]
   155c4:	add	r0, r3, #32
   155c8:	vst1.64	{d18-d19}, [r2]
   155cc:	mov	r2, r3
   155d0:	vst1.64	{d20-d21}, [r0]
   155d4:	mov	r0, #28
   155d8:	and	r0, r0, r1, lsr #3
   155dc:	and	r1, r1, #31
   155e0:	vst1.64	{d16-d17}, [r2], r0
   155e4:	mov	r0, #1
   155e8:	ldr	lr, [r2, #8]
   155ec:	bic	r0, r0, lr, lsr r1
   155f0:	eor	r0, lr, r0, lsl r1
   155f4:	mov	r1, ip
   155f8:	str	r0, [r2, #8]
   155fc:	mov	r0, #0
   15600:	mvn	r2, #0
   15604:	bl	15200 <__assert_fail@plt+0x4148>
   15608:	mov	sp, fp
   1560c:	pop	{fp, pc}
   15610:	push	{fp, lr}
   15614:	mov	fp, sp
   15618:	sub	sp, sp, #48	; 0x30
   1561c:	movw	r2, #37224	; 0x9168
   15620:	mov	r3, #32
   15624:	mov	r1, r0
   15628:	movt	r2, #2
   1562c:	add	r0, r2, #16
   15630:	vld1.64	{d16-d17}, [r2], r3
   15634:	mov	r3, sp
   15638:	vld1.64	{d18-d19}, [r0]
   1563c:	add	r0, r3, #16
   15640:	vld1.64	{d20-d21}, [r2]
   15644:	mov	r2, r3
   15648:	vst1.64	{d18-d19}, [r0]
   1564c:	add	r0, r3, #32
   15650:	vst1.64	{d20-d21}, [r0]
   15654:	mov	r0, #12
   15658:	vst1.64	{d16-d17}, [r2], r0
   1565c:	ldr	r0, [r2]
   15660:	orr	r0, r0, #67108864	; 0x4000000
   15664:	str	r0, [r2]
   15668:	mov	r0, #0
   1566c:	mvn	r2, #0
   15670:	bl	15200 <__assert_fail@plt+0x4148>
   15674:	mov	sp, fp
   15678:	pop	{fp, pc}
   1567c:	push	{fp, lr}
   15680:	mov	fp, sp
   15684:	sub	sp, sp, #48	; 0x30
   15688:	mov	ip, r1
   1568c:	mov	r1, r0
   15690:	movw	r0, #37224	; 0x9168
   15694:	mov	r3, #32
   15698:	movt	r0, #2
   1569c:	add	r2, r0, #16
   156a0:	vld1.64	{d16-d17}, [r0], r3
   156a4:	mov	r3, sp
   156a8:	vld1.64	{d18-d19}, [r2]
   156ac:	add	r2, r3, #16
   156b0:	vld1.64	{d20-d21}, [r0]
   156b4:	add	r0, r3, #32
   156b8:	vst1.64	{d18-d19}, [r2]
   156bc:	mov	r2, r3
   156c0:	vst1.64	{d20-d21}, [r0]
   156c4:	mov	r0, #12
   156c8:	vst1.64	{d16-d17}, [r2], r0
   156cc:	ldr	r0, [r2]
   156d0:	orr	r0, r0, #67108864	; 0x4000000
   156d4:	str	r0, [r2]
   156d8:	mov	r0, #0
   156dc:	mov	r2, ip
   156e0:	bl	15200 <__assert_fail@plt+0x4148>
   156e4:	mov	sp, fp
   156e8:	pop	{fp, pc}
   156ec:	push	{r4, sl, fp, lr}
   156f0:	add	fp, sp, #8
   156f4:	sub	sp, sp, #96	; 0x60
   156f8:	mov	ip, r2
   156fc:	mov	r2, sp
   15700:	vmov.i32	q8, #0	; 0x00000000
   15704:	mov	r4, #28
   15708:	cmp	r1, #10
   1570c:	mov	r3, r2
   15710:	add	lr, r2, #16
   15714:	vst1.64	{d16-d17}, [r3], r4
   15718:	vst1.64	{d16-d17}, [lr]
   1571c:	vst1.32	{d16-d17}, [r3]
   15720:	beq	15770 <__assert_fail@plt+0x46b8>
   15724:	vld1.64	{d16-d17}, [r2], r4
   15728:	vld1.64	{d18-d19}, [lr]
   1572c:	add	r3, sp, #48	; 0x30
   15730:	add	r4, r3, #4
   15734:	vld1.32	{d20-d21}, [r2]
   15738:	add	r2, r3, #20
   1573c:	vst1.32	{d16-d17}, [r4]
   15740:	vst1.32	{d18-d19}, [r2]
   15744:	add	r2, r3, #32
   15748:	vst1.32	{d20-d21}, [r2]
   1574c:	str	r1, [sp, #48]	; 0x30
   15750:	mvn	r2, #0
   15754:	ldr	r1, [sp, #60]	; 0x3c
   15758:	orr	r1, r1, #67108864	; 0x4000000
   1575c:	str	r1, [sp, #60]	; 0x3c
   15760:	mov	r1, ip
   15764:	bl	15200 <__assert_fail@plt+0x4148>
   15768:	sub	sp, fp, #8
   1576c:	pop	{r4, sl, fp, pc}
   15770:	bl	110a0 <abort@plt>
   15774:	push	{r4, r5, fp, lr}
   15778:	add	fp, sp, #8
   1577c:	sub	sp, sp, #48	; 0x30
   15780:	mov	ip, r3
   15784:	movw	r3, #37224	; 0x9168
   15788:	mov	lr, #32
   1578c:	cmp	r1, #0
   15790:	mov	r5, sp
   15794:	movt	r3, #2
   15798:	cmpne	r2, #0
   1579c:	add	r4, r3, #16
   157a0:	vld1.64	{d16-d17}, [r3], lr
   157a4:	vld1.64	{d18-d19}, [r4]
   157a8:	add	r4, r5, #16
   157ac:	vld1.64	{d20-d21}, [r3]
   157b0:	vst1.64	{d16-d17}, [r5], lr
   157b4:	mov	r3, #10
   157b8:	vst1.64	{d18-d19}, [r4]
   157bc:	vst1.64	{d20-d21}, [r5]
   157c0:	str	r3, [sp]
   157c4:	bne	157cc <__assert_fail@plt+0x4714>
   157c8:	bl	110a0 <abort@plt>
   157cc:	str	r2, [sp, #44]	; 0x2c
   157d0:	str	r1, [sp, #40]	; 0x28
   157d4:	mov	r3, sp
   157d8:	mov	r1, ip
   157dc:	mvn	r2, #0
   157e0:	bl	15200 <__assert_fail@plt+0x4148>
   157e4:	sub	sp, fp, #8
   157e8:	pop	{r4, r5, fp, pc}
   157ec:	push	{r4, r5, fp, lr}
   157f0:	add	fp, sp, #8
   157f4:	sub	sp, sp, #48	; 0x30
   157f8:	mov	lr, r3
   157fc:	movw	r3, #37224	; 0x9168
   15800:	mov	ip, #32
   15804:	cmp	r1, #0
   15808:	mov	r5, sp
   1580c:	movt	r3, #2
   15810:	cmpne	r2, #0
   15814:	add	r4, r3, #16
   15818:	vld1.64	{d16-d17}, [r3], ip
   1581c:	vld1.64	{d18-d19}, [r4]
   15820:	add	r4, r5, #16
   15824:	vld1.64	{d20-d21}, [r3]
   15828:	vst1.64	{d16-d17}, [r5], ip
   1582c:	mov	r3, #10
   15830:	vst1.64	{d18-d19}, [r4]
   15834:	vst1.64	{d20-d21}, [r5]
   15838:	str	r3, [sp]
   1583c:	bne	15844 <__assert_fail@plt+0x478c>
   15840:	bl	110a0 <abort@plt>
   15844:	ldr	ip, [fp, #8]
   15848:	str	r2, [sp, #44]	; 0x2c
   1584c:	str	r1, [sp, #40]	; 0x28
   15850:	mov	r3, sp
   15854:	mov	r1, lr
   15858:	mov	r2, ip
   1585c:	bl	15200 <__assert_fail@plt+0x4148>
   15860:	sub	sp, fp, #8
   15864:	pop	{r4, r5, fp, pc}
   15868:	push	{r4, sl, fp, lr}
   1586c:	add	fp, sp, #8
   15870:	sub	sp, sp, #48	; 0x30
   15874:	mov	ip, r2
   15878:	movw	r2, #37224	; 0x9168
   1587c:	mov	lr, #32
   15880:	cmp	r0, #0
   15884:	mov	r4, sp
   15888:	movt	r2, #2
   1588c:	cmpne	r1, #0
   15890:	add	r3, r2, #16
   15894:	vld1.64	{d16-d17}, [r2], lr
   15898:	vld1.64	{d18-d19}, [r3]
   1589c:	add	r3, r4, #16
   158a0:	vld1.64	{d20-d21}, [r2]
   158a4:	vst1.64	{d16-d17}, [r4], lr
   158a8:	mov	r2, #10
   158ac:	vst1.64	{d18-d19}, [r3]
   158b0:	vst1.64	{d20-d21}, [r4]
   158b4:	str	r2, [sp]
   158b8:	bne	158c0 <__assert_fail@plt+0x4808>
   158bc:	bl	110a0 <abort@plt>
   158c0:	str	r1, [sp, #44]	; 0x2c
   158c4:	str	r0, [sp, #40]	; 0x28
   158c8:	mov	r3, sp
   158cc:	mov	r0, #0
   158d0:	mov	r1, ip
   158d4:	mvn	r2, #0
   158d8:	bl	15200 <__assert_fail@plt+0x4148>
   158dc:	sub	sp, fp, #8
   158e0:	pop	{r4, sl, fp, pc}
   158e4:	push	{r4, r5, fp, lr}
   158e8:	add	fp, sp, #8
   158ec:	sub	sp, sp, #48	; 0x30
   158f0:	mov	lr, r2
   158f4:	movw	r2, #37224	; 0x9168
   158f8:	mov	ip, r3
   158fc:	mov	r3, #32
   15900:	cmp	r0, #0
   15904:	mov	r5, sp
   15908:	movt	r2, #2
   1590c:	cmpne	r1, #0
   15910:	add	r4, r2, #16
   15914:	vld1.64	{d16-d17}, [r2], r3
   15918:	vld1.64	{d18-d19}, [r4]
   1591c:	add	r4, r5, #16
   15920:	vld1.64	{d20-d21}, [r2]
   15924:	vst1.64	{d16-d17}, [r5], r3
   15928:	mov	r2, #10
   1592c:	vst1.64	{d18-d19}, [r4]
   15930:	vst1.64	{d20-d21}, [r5]
   15934:	str	r2, [sp]
   15938:	bne	15940 <__assert_fail@plt+0x4888>
   1593c:	bl	110a0 <abort@plt>
   15940:	str	r1, [sp, #44]	; 0x2c
   15944:	str	r0, [sp, #40]	; 0x28
   15948:	mov	r3, sp
   1594c:	mov	r0, #0
   15950:	mov	r1, lr
   15954:	mov	r2, ip
   15958:	bl	15200 <__assert_fail@plt+0x4148>
   1595c:	sub	sp, fp, #8
   15960:	pop	{r4, r5, fp, pc}
   15964:	movw	r3, #37112	; 0x90f8
   15968:	movt	r3, #2
   1596c:	b	15200 <__assert_fail@plt+0x4148>
   15970:	movw	r3, #37112	; 0x90f8
   15974:	mov	r2, r1
   15978:	mov	r1, r0
   1597c:	mov	r0, #0
   15980:	movt	r3, #2
   15984:	b	15200 <__assert_fail@plt+0x4148>
   15988:	movw	r3, #37112	; 0x90f8
   1598c:	mvn	r2, #0
   15990:	movt	r3, #2
   15994:	b	15200 <__assert_fail@plt+0x4148>
   15998:	movw	r3, #37112	; 0x90f8
   1599c:	mov	r1, r0
   159a0:	mov	r0, #0
   159a4:	mvn	r2, #0
   159a8:	movt	r3, #2
   159ac:	b	15200 <__assert_fail@plt+0x4148>
   159b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159b4:	add	fp, sp, #24
   159b8:	movw	r8, #0
   159bc:	mov	r6, r2
   159c0:	mov	r4, r1
   159c4:	mov	r5, r0
   159c8:	movt	r8, #32752	; 0x7ff0
   159cc:	mov	r0, r5
   159d0:	mov	r1, r4
   159d4:	mov	r2, r6
   159d8:	bl	10e6c <read@plt>
   159dc:	mov	r7, r0
   159e0:	cmn	r0, #1
   159e4:	bgt	15a0c <__assert_fail@plt+0x4954>
   159e8:	bl	10fec <__errno_location@plt>
   159ec:	ldr	r0, [r0]
   159f0:	cmp	r0, #4
   159f4:	beq	159cc <__assert_fail@plt+0x4914>
   159f8:	cmp	r6, r8
   159fc:	bls	15a0c <__assert_fail@plt+0x4954>
   15a00:	cmp	r0, #22
   15a04:	mov	r6, r8
   15a08:	beq	159cc <__assert_fail@plt+0x4914>
   15a0c:	mov	r0, r7
   15a10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a18:	add	fp, sp, #24
   15a1c:	sub	sp, sp, #32
   15a20:	ldr	r6, [fp, #12]
   15a24:	ldr	r7, [fp, #8]
   15a28:	mov	r4, r2
   15a2c:	mov	r8, r0
   15a30:	cmp	r1, #0
   15a34:	beq	15a5c <__assert_fail@plt+0x49a4>
   15a38:	movw	r2, #34292	; 0x85f4
   15a3c:	mov	r5, r1
   15a40:	str	r3, [sp, #4]
   15a44:	str	r4, [sp]
   15a48:	mov	r0, r8
   15a4c:	mov	r1, #1
   15a50:	movt	r2, #1
   15a54:	mov	r3, r5
   15a58:	b	15a74 <__assert_fail@plt+0x49bc>
   15a5c:	movw	r2, #34304	; 0x8600
   15a60:	str	r3, [sp]
   15a64:	mov	r0, r8
   15a68:	mov	r1, #1
   15a6c:	mov	r3, r4
   15a70:	movt	r2, #1
   15a74:	bl	11028 <__fprintf_chk@plt>
   15a78:	movw	r1, #34311	; 0x8607
   15a7c:	mov	r0, #0
   15a80:	mov	r2, #5
   15a84:	movt	r1, #1
   15a88:	bl	10ed8 <dcgettext@plt>
   15a8c:	movw	r2, #35029	; 0x88d5
   15a90:	mov	r3, r0
   15a94:	movw	r0, #2022	; 0x7e6
   15a98:	mov	r1, #1
   15a9c:	str	r0, [sp]
   15aa0:	movt	r2, #1
   15aa4:	mov	r0, r8
   15aa8:	bl	11028 <__fprintf_chk@plt>
   15aac:	movw	r4, #33408	; 0x8280
   15ab0:	mov	r1, r8
   15ab4:	movt	r4, #1
   15ab8:	mov	r0, r4
   15abc:	bl	10e48 <fputs_unlocked@plt>
   15ac0:	movw	r1, #34315	; 0x860b
   15ac4:	mov	r0, #0
   15ac8:	mov	r2, #5
   15acc:	movt	r1, #1
   15ad0:	bl	10ed8 <dcgettext@plt>
   15ad4:	movw	r3, #34486	; 0x86b6
   15ad8:	mov	r2, r0
   15adc:	mov	r0, r8
   15ae0:	mov	r1, #1
   15ae4:	movt	r3, #1
   15ae8:	bl	11028 <__fprintf_chk@plt>
   15aec:	mov	r0, r4
   15af0:	mov	r1, r8
   15af4:	bl	10e48 <fputs_unlocked@plt>
   15af8:	cmp	r6, #9
   15afc:	bhi	15b38 <__assert_fail@plt+0x4a80>
   15b00:	add	r0, pc, #0
   15b04:	ldr	pc, [r0, r6, lsl #2]
   15b08:	andeq	r5, r1, r0, lsr fp
   15b0c:	andeq	r5, r1, r4, asr #22
   15b10:	andeq	r5, r1, r4, ror fp
   15b14:	muleq	r1, ip, fp
   15b18:	andeq	r5, r1, r4, asr #23
   15b1c:	andeq	r5, r1, ip, ror #23
   15b20:	andeq	r5, r1, r4, lsl ip
   15b24:	andeq	r5, r1, ip, asr #24
   15b28:	strdeq	r5, [r1], -r4
   15b2c:	muleq	r1, ip, ip
   15b30:	sub	sp, fp, #24
   15b34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b38:	movw	r1, #34839	; 0x8817
   15b3c:	movt	r1, #1
   15b40:	b	15ca4 <__assert_fail@plt+0x4bec>
   15b44:	movw	r1, #34520	; 0x86d8
   15b48:	mov	r0, #0
   15b4c:	mov	r2, #5
   15b50:	movt	r1, #1
   15b54:	bl	10ed8 <dcgettext@plt>
   15b58:	ldr	r3, [r7]
   15b5c:	mov	r2, r0
   15b60:	mov	r0, r8
   15b64:	mov	r1, #1
   15b68:	sub	sp, fp, #24
   15b6c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b70:	b	11028 <__fprintf_chk@plt>
   15b74:	movw	r1, #34536	; 0x86e8
   15b78:	mov	r0, #0
   15b7c:	mov	r2, #5
   15b80:	movt	r1, #1
   15b84:	bl	10ed8 <dcgettext@plt>
   15b88:	mov	r2, r0
   15b8c:	ldr	r3, [r7]
   15b90:	ldr	r0, [r7, #4]
   15b94:	str	r0, [sp]
   15b98:	b	15c88 <__assert_fail@plt+0x4bd0>
   15b9c:	movw	r1, #34559	; 0x86ff
   15ba0:	mov	r0, #0
   15ba4:	mov	r2, #5
   15ba8:	movt	r1, #1
   15bac:	bl	10ed8 <dcgettext@plt>
   15bb0:	ldr	r3, [r7]
   15bb4:	mov	r2, r0
   15bb8:	ldmib	r7, {r0, r1}
   15bbc:	stm	sp, {r0, r1}
   15bc0:	b	15c88 <__assert_fail@plt+0x4bd0>
   15bc4:	movw	r1, #34587	; 0x871b
   15bc8:	mov	r0, #0
   15bcc:	mov	r2, #5
   15bd0:	movt	r1, #1
   15bd4:	bl	10ed8 <dcgettext@plt>
   15bd8:	ldr	r3, [r7]
   15bdc:	mov	r2, r0
   15be0:	ldmib	r7, {r0, r1, r7}
   15be4:	stm	sp, {r0, r1, r7}
   15be8:	b	15c88 <__assert_fail@plt+0x4bd0>
   15bec:	movw	r1, #34619	; 0x873b
   15bf0:	mov	r0, #0
   15bf4:	mov	r2, #5
   15bf8:	movt	r1, #1
   15bfc:	bl	10ed8 <dcgettext@plt>
   15c00:	ldr	r3, [r7]
   15c04:	mov	r2, r0
   15c08:	ldmib	r7, {r0, r1, r6, r7}
   15c0c:	stm	sp, {r0, r1, r6, r7}
   15c10:	b	15c88 <__assert_fail@plt+0x4bd0>
   15c14:	movw	r1, #34655	; 0x875f
   15c18:	mov	r0, #0
   15c1c:	mov	r2, #5
   15c20:	movt	r1, #1
   15c24:	bl	10ed8 <dcgettext@plt>
   15c28:	ldr	r3, [r7]
   15c2c:	mov	r2, r0
   15c30:	ldmib	r7, {r0, r1, r6}
   15c34:	ldr	r5, [r7, #16]
   15c38:	ldr	r7, [r7, #20]
   15c3c:	stm	sp, {r0, r1, r6}
   15c40:	str	r5, [sp, #12]
   15c44:	str	r7, [sp, #16]
   15c48:	b	15c88 <__assert_fail@plt+0x4bd0>
   15c4c:	movw	r1, #34695	; 0x8787
   15c50:	mov	r0, #0
   15c54:	mov	r2, #5
   15c58:	movt	r1, #1
   15c5c:	bl	10ed8 <dcgettext@plt>
   15c60:	ldr	r3, [r7]
   15c64:	mov	r2, r0
   15c68:	ldmib	r7, {r0, r1, r6}
   15c6c:	ldr	r5, [r7, #16]
   15c70:	ldr	r4, [r7, #20]
   15c74:	ldr	r7, [r7, #24]
   15c78:	stm	sp, {r0, r1, r6}
   15c7c:	str	r5, [sp, #12]
   15c80:	str	r4, [sp, #16]
   15c84:	str	r7, [sp, #20]
   15c88:	mov	r0, r8
   15c8c:	mov	r1, #1
   15c90:	bl	11028 <__fprintf_chk@plt>
   15c94:	sub	sp, fp, #24
   15c98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c9c:	movw	r1, #34787	; 0x87e3
   15ca0:	movt	r1, #1
   15ca4:	mov	r0, #0
   15ca8:	mov	r2, #5
   15cac:	bl	10ed8 <dcgettext@plt>
   15cb0:	mov	ip, r0
   15cb4:	ldr	r3, [r7]
   15cb8:	ldr	r0, [r7, #4]
   15cbc:	ldr	r1, [r7, #8]
   15cc0:	ldr	r6, [r7, #12]
   15cc4:	ldr	r5, [r7, #16]
   15cc8:	ldr	r4, [r7, #20]
   15ccc:	ldr	r2, [r7, #24]
   15cd0:	ldr	lr, [r7, #28]
   15cd4:	ldr	r7, [r7, #32]
   15cd8:	stm	sp, {r0, r1, r6}
   15cdc:	str	r5, [sp, #12]
   15ce0:	str	r4, [sp, #16]
   15ce4:	str	r2, [sp, #20]
   15ce8:	str	lr, [sp, #24]
   15cec:	str	r7, [sp, #28]
   15cf0:	b	15d38 <__assert_fail@plt+0x4c80>
   15cf4:	movw	r1, #34739	; 0x87b3
   15cf8:	mov	r0, #0
   15cfc:	mov	r2, #5
   15d00:	movt	r1, #1
   15d04:	bl	10ed8 <dcgettext@plt>
   15d08:	mov	ip, r0
   15d0c:	ldr	r3, [r7]
   15d10:	ldmib	r7, {r0, r1, r6}
   15d14:	ldr	r5, [r7, #16]
   15d18:	ldr	r4, [r7, #20]
   15d1c:	ldr	r2, [r7, #24]
   15d20:	ldr	r7, [r7, #28]
   15d24:	stm	sp, {r0, r1, r6}
   15d28:	str	r5, [sp, #12]
   15d2c:	str	r4, [sp, #16]
   15d30:	str	r2, [sp, #20]
   15d34:	str	r7, [sp, #24]
   15d38:	mov	r0, r8
   15d3c:	mov	r1, #1
   15d40:	mov	r2, ip
   15d44:	bl	11028 <__fprintf_chk@plt>
   15d48:	sub	sp, fp, #24
   15d4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d50:	push	{r4, sl, fp, lr}
   15d54:	add	fp, sp, #8
   15d58:	sub	sp, sp, #8
   15d5c:	ldr	ip, [fp, #8]
   15d60:	mov	lr, #0
   15d64:	ldr	r4, [ip, lr, lsl #2]
   15d68:	add	lr, lr, #1
   15d6c:	cmp	r4, #0
   15d70:	bne	15d64 <__assert_fail@plt+0x4cac>
   15d74:	sub	r4, lr, #1
   15d78:	str	ip, [sp]
   15d7c:	str	r4, [sp, #4]
   15d80:	bl	15a14 <__assert_fail@plt+0x495c>
   15d84:	sub	sp, fp, #8
   15d88:	pop	{r4, sl, fp, pc}
   15d8c:	push	{fp, lr}
   15d90:	mov	fp, sp
   15d94:	sub	sp, sp, #48	; 0x30
   15d98:	ldr	ip, [fp, #8]
   15d9c:	ldr	lr, [ip]
   15da0:	cmp	lr, #0
   15da4:	str	lr, [sp, #8]
   15da8:	beq	15e44 <__assert_fail@plt+0x4d8c>
   15dac:	ldr	lr, [ip, #4]
   15db0:	cmp	lr, #0
   15db4:	str	lr, [sp, #12]
   15db8:	beq	15e4c <__assert_fail@plt+0x4d94>
   15dbc:	ldr	lr, [ip, #8]
   15dc0:	cmp	lr, #0
   15dc4:	str	lr, [sp, #16]
   15dc8:	beq	15e54 <__assert_fail@plt+0x4d9c>
   15dcc:	ldr	lr, [ip, #12]
   15dd0:	cmp	lr, #0
   15dd4:	str	lr, [sp, #20]
   15dd8:	beq	15e5c <__assert_fail@plt+0x4da4>
   15ddc:	ldr	lr, [ip, #16]
   15de0:	cmp	lr, #0
   15de4:	str	lr, [sp, #24]
   15de8:	beq	15e64 <__assert_fail@plt+0x4dac>
   15dec:	ldr	lr, [ip, #20]
   15df0:	cmp	lr, #0
   15df4:	str	lr, [sp, #28]
   15df8:	beq	15e6c <__assert_fail@plt+0x4db4>
   15dfc:	ldr	lr, [ip, #24]
   15e00:	cmp	lr, #0
   15e04:	str	lr, [sp, #32]
   15e08:	beq	15e74 <__assert_fail@plt+0x4dbc>
   15e0c:	ldr	lr, [ip, #28]
   15e10:	cmp	lr, #0
   15e14:	str	lr, [sp, #36]	; 0x24
   15e18:	beq	15e7c <__assert_fail@plt+0x4dc4>
   15e1c:	ldr	lr, [ip, #32]
   15e20:	cmp	lr, #0
   15e24:	str	lr, [sp, #40]	; 0x28
   15e28:	beq	15e84 <__assert_fail@plt+0x4dcc>
   15e2c:	ldr	lr, [ip, #36]	; 0x24
   15e30:	mov	ip, #10
   15e34:	cmp	lr, #0
   15e38:	str	lr, [sp, #44]	; 0x2c
   15e3c:	movweq	ip, #9
   15e40:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e44:	mov	ip, #0
   15e48:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e4c:	mov	ip, #1
   15e50:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e54:	mov	ip, #2
   15e58:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e5c:	mov	ip, #3
   15e60:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e64:	mov	ip, #4
   15e68:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e6c:	mov	ip, #5
   15e70:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e74:	mov	ip, #6
   15e78:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e7c:	mov	ip, #7
   15e80:	b	15e88 <__assert_fail@plt+0x4dd0>
   15e84:	mov	ip, #8
   15e88:	add	lr, sp, #8
   15e8c:	str	ip, [sp, #4]
   15e90:	str	lr, [sp]
   15e94:	bl	15a14 <__assert_fail@plt+0x495c>
   15e98:	mov	sp, fp
   15e9c:	pop	{fp, pc}
   15ea0:	push	{fp, lr}
   15ea4:	mov	fp, sp
   15ea8:	sub	sp, sp, #56	; 0x38
   15eac:	add	ip, fp, #8
   15eb0:	str	ip, [sp, #12]
   15eb4:	ldr	lr, [fp, #8]
   15eb8:	cmp	lr, #0
   15ebc:	str	lr, [sp, #16]
   15ec0:	beq	15f5c <__assert_fail@plt+0x4ea4>
   15ec4:	ldr	lr, [ip, #4]
   15ec8:	cmp	lr, #0
   15ecc:	str	lr, [sp, #20]
   15ed0:	beq	15f64 <__assert_fail@plt+0x4eac>
   15ed4:	ldr	lr, [ip, #8]
   15ed8:	cmp	lr, #0
   15edc:	str	lr, [sp, #24]
   15ee0:	beq	15f6c <__assert_fail@plt+0x4eb4>
   15ee4:	ldr	lr, [ip, #12]
   15ee8:	cmp	lr, #0
   15eec:	str	lr, [sp, #28]
   15ef0:	beq	15f74 <__assert_fail@plt+0x4ebc>
   15ef4:	ldr	lr, [ip, #16]
   15ef8:	cmp	lr, #0
   15efc:	str	lr, [sp, #32]
   15f00:	beq	15f7c <__assert_fail@plt+0x4ec4>
   15f04:	ldr	lr, [ip, #20]
   15f08:	cmp	lr, #0
   15f0c:	str	lr, [sp, #36]	; 0x24
   15f10:	beq	15f84 <__assert_fail@plt+0x4ecc>
   15f14:	ldr	lr, [ip, #24]
   15f18:	cmp	lr, #0
   15f1c:	str	lr, [sp, #40]	; 0x28
   15f20:	beq	15f8c <__assert_fail@plt+0x4ed4>
   15f24:	ldr	lr, [ip, #28]
   15f28:	cmp	lr, #0
   15f2c:	str	lr, [sp, #44]	; 0x2c
   15f30:	beq	15f94 <__assert_fail@plt+0x4edc>
   15f34:	ldr	lr, [ip, #32]
   15f38:	cmp	lr, #0
   15f3c:	str	lr, [sp, #48]	; 0x30
   15f40:	beq	15f9c <__assert_fail@plt+0x4ee4>
   15f44:	ldr	lr, [ip, #36]	; 0x24
   15f48:	mov	ip, #10
   15f4c:	cmp	lr, #0
   15f50:	str	lr, [sp, #52]	; 0x34
   15f54:	movweq	ip, #9
   15f58:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f5c:	mov	ip, #0
   15f60:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f64:	mov	ip, #1
   15f68:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f6c:	mov	ip, #2
   15f70:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f74:	mov	ip, #3
   15f78:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f7c:	mov	ip, #4
   15f80:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f84:	mov	ip, #5
   15f88:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f8c:	mov	ip, #6
   15f90:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f94:	mov	ip, #7
   15f98:	b	15fa0 <__assert_fail@plt+0x4ee8>
   15f9c:	mov	ip, #8
   15fa0:	add	lr, sp, #16
   15fa4:	str	ip, [sp, #4]
   15fa8:	str	lr, [sp]
   15fac:	bl	15a14 <__assert_fail@plt+0x495c>
   15fb0:	mov	sp, fp
   15fb4:	pop	{fp, pc}
   15fb8:	push	{fp, lr}
   15fbc:	mov	fp, sp
   15fc0:	movw	r0, #37196	; 0x914c
   15fc4:	movt	r0, #2
   15fc8:	ldr	r1, [r0]
   15fcc:	movw	r0, #33408	; 0x8280
   15fd0:	movt	r0, #1
   15fd4:	bl	10e48 <fputs_unlocked@plt>
   15fd8:	movw	r1, #34899	; 0x8853
   15fdc:	mov	r0, #0
   15fe0:	mov	r2, #5
   15fe4:	movt	r1, #1
   15fe8:	bl	10ed8 <dcgettext@plt>
   15fec:	movw	r2, #34919	; 0x8867
   15ff0:	mov	r1, r0
   15ff4:	mov	r0, #1
   15ff8:	movt	r2, #1
   15ffc:	bl	11010 <__printf_chk@plt>
   16000:	movw	r1, #34941	; 0x887d
   16004:	mov	r0, #0
   16008:	mov	r2, #5
   1600c:	movt	r1, #1
   16010:	bl	10ed8 <dcgettext@plt>
   16014:	movw	r2, #32894	; 0x807e
   16018:	movw	r3, #33217	; 0x81c1
   1601c:	mov	r1, r0
   16020:	mov	r0, #1
   16024:	movt	r2, #1
   16028:	movt	r3, #1
   1602c:	bl	11010 <__printf_chk@plt>
   16030:	movw	r1, #34961	; 0x8891
   16034:	mov	r0, #0
   16038:	mov	r2, #5
   1603c:	movt	r1, #1
   16040:	bl	10ed8 <dcgettext@plt>
   16044:	movw	r2, #35000	; 0x88b8
   16048:	mov	r1, r0
   1604c:	mov	r0, #1
   16050:	movt	r2, #1
   16054:	pop	{fp, lr}
   16058:	b	11010 <__printf_chk@plt>
   1605c:	push	{r4, r5, r6, sl, fp, lr}
   16060:	add	fp, sp, #16
   16064:	mov	r4, r2
   16068:	mov	r5, r1
   1606c:	mov	r6, r0
   16070:	bl	177c4 <__assert_fail@plt+0x670c>
   16074:	cmp	r0, #0
   16078:	popne	{r4, r5, r6, sl, fp, pc}
   1607c:	cmp	r6, #0
   16080:	beq	16094 <__assert_fail@plt+0x4fdc>
   16084:	cmp	r5, #0
   16088:	cmpne	r4, #0
   1608c:	bne	16094 <__assert_fail@plt+0x4fdc>
   16090:	pop	{r4, r5, r6, sl, fp, pc}
   16094:	bl	16634 <__assert_fail@plt+0x557c>
   16098:	push	{r4, r5, r6, sl, fp, lr}
   1609c:	add	fp, sp, #16
   160a0:	mov	r4, r2
   160a4:	mov	r5, r1
   160a8:	mov	r6, r0
   160ac:	bl	177c4 <__assert_fail@plt+0x670c>
   160b0:	cmp	r0, #0
   160b4:	popne	{r4, r5, r6, sl, fp, pc}
   160b8:	cmp	r6, #0
   160bc:	beq	160d0 <__assert_fail@plt+0x5018>
   160c0:	cmp	r5, #0
   160c4:	cmpne	r4, #0
   160c8:	bne	160d0 <__assert_fail@plt+0x5018>
   160cc:	pop	{r4, r5, r6, sl, fp, pc}
   160d0:	bl	16634 <__assert_fail@plt+0x557c>
   160d4:	push	{fp, lr}
   160d8:	mov	fp, sp
   160dc:	bl	1747c <__assert_fail@plt+0x63c4>
   160e0:	cmp	r0, #0
   160e4:	popne	{fp, pc}
   160e8:	bl	16634 <__assert_fail@plt+0x557c>
   160ec:	push	{fp, lr}
   160f0:	mov	fp, sp
   160f4:	bl	1747c <__assert_fail@plt+0x63c4>
   160f8:	cmp	r0, #0
   160fc:	popne	{fp, pc}
   16100:	bl	16634 <__assert_fail@plt+0x557c>
   16104:	push	{fp, lr}
   16108:	mov	fp, sp
   1610c:	bl	1747c <__assert_fail@plt+0x63c4>
   16110:	cmp	r0, #0
   16114:	popne	{fp, pc}
   16118:	bl	16634 <__assert_fail@plt+0x557c>
   1611c:	push	{r4, r5, fp, lr}
   16120:	add	fp, sp, #8
   16124:	mov	r4, r1
   16128:	mov	r5, r0
   1612c:	bl	174ac <__assert_fail@plt+0x63f4>
   16130:	cmp	r0, #0
   16134:	popne	{r4, r5, fp, pc}
   16138:	cmp	r5, #0
   1613c:	beq	1614c <__assert_fail@plt+0x5094>
   16140:	cmp	r4, #0
   16144:	bne	1614c <__assert_fail@plt+0x5094>
   16148:	pop	{r4, r5, fp, pc}
   1614c:	bl	16634 <__assert_fail@plt+0x557c>
   16150:	push	{fp, lr}
   16154:	mov	fp, sp
   16158:	cmp	r1, #0
   1615c:	orreq	r1, r1, #1
   16160:	bl	174ac <__assert_fail@plt+0x63f4>
   16164:	cmp	r0, #0
   16168:	popne	{fp, pc}
   1616c:	bl	16634 <__assert_fail@plt+0x557c>
   16170:	push	{fp, lr}
   16174:	mov	fp, sp
   16178:	clz	r3, r2
   1617c:	lsr	ip, r3, #5
   16180:	clz	r3, r1
   16184:	lsr	r3, r3, #5
   16188:	orrs	r3, r3, ip
   1618c:	movwne	r1, #1
   16190:	movwne	r2, #1
   16194:	bl	177c4 <__assert_fail@plt+0x670c>
   16198:	cmp	r0, #0
   1619c:	popne	{fp, pc}
   161a0:	bl	16634 <__assert_fail@plt+0x557c>
   161a4:	push	{fp, lr}
   161a8:	mov	fp, sp
   161ac:	mov	r2, r1
   161b0:	mov	r1, r0
   161b4:	mov	r0, #0
   161b8:	bl	177c4 <__assert_fail@plt+0x670c>
   161bc:	cmp	r0, #0
   161c0:	popne	{fp, pc}
   161c4:	bl	16634 <__assert_fail@plt+0x557c>
   161c8:	push	{fp, lr}
   161cc:	mov	fp, sp
   161d0:	mov	r2, r1
   161d4:	mov	r1, r0
   161d8:	clz	r0, r2
   161dc:	clz	r3, r1
   161e0:	lsr	r0, r0, #5
   161e4:	lsr	r3, r3, #5
   161e8:	orrs	r0, r3, r0
   161ec:	movwne	r1, #1
   161f0:	movwne	r2, #1
   161f4:	mov	r0, #0
   161f8:	bl	177c4 <__assert_fail@plt+0x670c>
   161fc:	cmp	r0, #0
   16200:	popne	{fp, pc}
   16204:	bl	16634 <__assert_fail@plt+0x557c>
   16208:	push	{r4, r5, r6, sl, fp, lr}
   1620c:	add	fp, sp, #16
   16210:	ldr	r5, [r1]
   16214:	mov	r4, r1
   16218:	mov	r6, r0
   1621c:	cmp	r0, #0
   16220:	beq	16238 <__assert_fail@plt+0x5180>
   16224:	mov	r0, #1
   16228:	add	r0, r0, r5, lsr #1
   1622c:	adds	r5, r5, r0
   16230:	bcc	16240 <__assert_fail@plt+0x5188>
   16234:	b	1627c <__assert_fail@plt+0x51c4>
   16238:	cmp	r5, #0
   1623c:	movweq	r5, #64	; 0x40
   16240:	mov	r0, r6
   16244:	mov	r1, r5
   16248:	mov	r2, #1
   1624c:	bl	177c4 <__assert_fail@plt+0x670c>
   16250:	cmp	r5, #0
   16254:	mov	r1, r5
   16258:	movwne	r1, #1
   1625c:	cmp	r0, #0
   16260:	bne	16274 <__assert_fail@plt+0x51bc>
   16264:	clz	r2, r6
   16268:	lsr	r2, r2, #5
   1626c:	orrs	r1, r2, r1
   16270:	bne	1627c <__assert_fail@plt+0x51c4>
   16274:	str	r5, [r4]
   16278:	pop	{r4, r5, r6, sl, fp, pc}
   1627c:	bl	16634 <__assert_fail@plt+0x557c>
   16280:	push	{r4, r5, r6, r7, fp, lr}
   16284:	add	fp, sp, #16
   16288:	ldr	r5, [r1]
   1628c:	mov	r6, r2
   16290:	mov	r4, r1
   16294:	mov	r7, r0
   16298:	cmp	r0, #0
   1629c:	beq	162b4 <__assert_fail@plt+0x51fc>
   162a0:	mov	r0, #1
   162a4:	add	r0, r0, r5, lsr #1
   162a8:	adds	r5, r5, r0
   162ac:	bcc	162cc <__assert_fail@plt+0x5214>
   162b0:	b	16300 <__assert_fail@plt+0x5248>
   162b4:	cmp	r5, #0
   162b8:	bne	162cc <__assert_fail@plt+0x5214>
   162bc:	mov	r0, #64	; 0x40
   162c0:	cmp	r6, #64	; 0x40
   162c4:	udiv	r5, r0, r6
   162c8:	addhi	r5, r5, #1
   162cc:	mov	r0, r7
   162d0:	mov	r1, r5
   162d4:	mov	r2, r6
   162d8:	bl	177c4 <__assert_fail@plt+0x670c>
   162dc:	cmp	r0, #0
   162e0:	bne	162f8 <__assert_fail@plt+0x5240>
   162e4:	cmp	r7, #0
   162e8:	beq	16300 <__assert_fail@plt+0x5248>
   162ec:	cmp	r6, #0
   162f0:	cmpne	r5, #0
   162f4:	bne	16300 <__assert_fail@plt+0x5248>
   162f8:	str	r5, [r4]
   162fc:	pop	{r4, r5, r6, r7, fp, pc}
   16300:	bl	16634 <__assert_fail@plt+0x557c>
   16304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16308:	add	fp, sp, #24
   1630c:	mov	r8, r1
   16310:	ldr	r1, [r1]
   16314:	mov	r5, r0
   16318:	add	r0, r1, r1, asr #1
   1631c:	cmp	r0, r1
   16320:	mvnvs	r0, #-2147483648	; 0x80000000
   16324:	cmp	r0, r3
   16328:	mov	r7, r0
   1632c:	movgt	r7, r3
   16330:	cmn	r3, #1
   16334:	movle	r7, r0
   16338:	ldr	r0, [fp, #8]
   1633c:	cmn	r0, #1
   16340:	ble	16368 <__assert_fail@plt+0x52b0>
   16344:	cmp	r0, #0
   16348:	beq	163bc <__assert_fail@plt+0x5304>
   1634c:	cmn	r7, #1
   16350:	ble	16390 <__assert_fail@plt+0x52d8>
   16354:	mvn	r4, #-2147483648	; 0x80000000
   16358:	udiv	r6, r4, r0
   1635c:	cmp	r6, r7
   16360:	bge	163bc <__assert_fail@plt+0x5304>
   16364:	b	163cc <__assert_fail@plt+0x5314>
   16368:	cmn	r7, #1
   1636c:	ble	163ac <__assert_fail@plt+0x52f4>
   16370:	cmn	r0, #1
   16374:	beq	163bc <__assert_fail@plt+0x5304>
   16378:	mov	r6, #-2147483648	; 0x80000000
   1637c:	mvn	r4, #-2147483648	; 0x80000000
   16380:	sdiv	r6, r6, r0
   16384:	cmp	r6, r7
   16388:	bge	163bc <__assert_fail@plt+0x5304>
   1638c:	b	163cc <__assert_fail@plt+0x5314>
   16390:	beq	163bc <__assert_fail@plt+0x5304>
   16394:	mov	r6, #-2147483648	; 0x80000000
   16398:	mvn	r4, #-2147483648	; 0x80000000
   1639c:	sdiv	r6, r6, r7
   163a0:	cmp	r6, r0
   163a4:	bge	163bc <__assert_fail@plt+0x5304>
   163a8:	b	163cc <__assert_fail@plt+0x5314>
   163ac:	mvn	r4, #-2147483648	; 0x80000000
   163b0:	sdiv	r6, r4, r0
   163b4:	cmp	r7, r6
   163b8:	blt	163cc <__assert_fail@plt+0x5314>
   163bc:	mul	r6, r7, r0
   163c0:	mov	r4, #64	; 0x40
   163c4:	cmp	r6, #63	; 0x3f
   163c8:	bgt	163d4 <__assert_fail@plt+0x531c>
   163cc:	sdiv	r7, r4, r0
   163d0:	mul	r6, r7, r0
   163d4:	cmp	r5, #0
   163d8:	moveq	r4, #0
   163dc:	streq	r4, [r8]
   163e0:	sub	r4, r7, r1
   163e4:	cmp	r4, r2
   163e8:	bge	16494 <__assert_fail@plt+0x53dc>
   163ec:	add	r7, r1, r2
   163f0:	mov	r6, #0
   163f4:	mov	r2, #0
   163f8:	cmp	r7, r3
   163fc:	movwgt	r6, #1
   16400:	cmn	r3, #1
   16404:	movwgt	r2, #1
   16408:	cmp	r7, r1
   1640c:	bvs	164c8 <__assert_fail@plt+0x5410>
   16410:	ands	r1, r2, r6
   16414:	bne	164c8 <__assert_fail@plt+0x5410>
   16418:	cmn	r0, #1
   1641c:	ble	16444 <__assert_fail@plt+0x538c>
   16420:	cmp	r0, #0
   16424:	beq	16490 <__assert_fail@plt+0x53d8>
   16428:	cmn	r7, #1
   1642c:	ble	16468 <__assert_fail@plt+0x53b0>
   16430:	mvn	r1, #-2147483648	; 0x80000000
   16434:	udiv	r1, r1, r0
   16438:	cmp	r1, r7
   1643c:	bge	16490 <__assert_fail@plt+0x53d8>
   16440:	b	164c8 <__assert_fail@plt+0x5410>
   16444:	cmn	r7, #1
   16448:	ble	16480 <__assert_fail@plt+0x53c8>
   1644c:	cmn	r0, #1
   16450:	beq	16490 <__assert_fail@plt+0x53d8>
   16454:	mov	r1, #-2147483648	; 0x80000000
   16458:	sdiv	r1, r1, r0
   1645c:	cmp	r1, r7
   16460:	bge	16490 <__assert_fail@plt+0x53d8>
   16464:	b	164c8 <__assert_fail@plt+0x5410>
   16468:	beq	16490 <__assert_fail@plt+0x53d8>
   1646c:	mov	r1, #-2147483648	; 0x80000000
   16470:	sdiv	r1, r1, r7
   16474:	cmp	r1, r0
   16478:	bge	16490 <__assert_fail@plt+0x53d8>
   1647c:	b	164c8 <__assert_fail@plt+0x5410>
   16480:	mvn	r1, #-2147483648	; 0x80000000
   16484:	sdiv	r1, r1, r0
   16488:	cmp	r7, r1
   1648c:	blt	164c8 <__assert_fail@plt+0x5410>
   16490:	mul	r6, r7, r0
   16494:	mov	r0, r5
   16498:	mov	r1, r6
   1649c:	bl	174ac <__assert_fail@plt+0x63f4>
   164a0:	cmp	r6, #0
   164a4:	movwne	r6, #1
   164a8:	cmp	r0, #0
   164ac:	bne	164c0 <__assert_fail@plt+0x5408>
   164b0:	clz	r1, r5
   164b4:	lsr	r1, r1, #5
   164b8:	orrs	r1, r1, r6
   164bc:	bne	164c8 <__assert_fail@plt+0x5410>
   164c0:	str	r7, [r8]
   164c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164c8:	bl	16634 <__assert_fail@plt+0x557c>
   164cc:	push	{fp, lr}
   164d0:	mov	fp, sp
   164d4:	mov	r1, #1
   164d8:	bl	17428 <__assert_fail@plt+0x6370>
   164dc:	cmp	r0, #0
   164e0:	popne	{fp, pc}
   164e4:	bl	16634 <__assert_fail@plt+0x557c>
   164e8:	push	{fp, lr}
   164ec:	mov	fp, sp
   164f0:	bl	17428 <__assert_fail@plt+0x6370>
   164f4:	cmp	r0, #0
   164f8:	popne	{fp, pc}
   164fc:	bl	16634 <__assert_fail@plt+0x557c>
   16500:	push	{fp, lr}
   16504:	mov	fp, sp
   16508:	mov	r1, #1
   1650c:	bl	17428 <__assert_fail@plt+0x6370>
   16510:	cmp	r0, #0
   16514:	popne	{fp, pc}
   16518:	bl	16634 <__assert_fail@plt+0x557c>
   1651c:	push	{fp, lr}
   16520:	mov	fp, sp
   16524:	bl	17428 <__assert_fail@plt+0x6370>
   16528:	cmp	r0, #0
   1652c:	popne	{fp, pc}
   16530:	bl	16634 <__assert_fail@plt+0x557c>
   16534:	push	{r4, r5, r6, sl, fp, lr}
   16538:	add	fp, sp, #16
   1653c:	mov	r5, r0
   16540:	mov	r0, r1
   16544:	mov	r4, r1
   16548:	bl	1747c <__assert_fail@plt+0x63c4>
   1654c:	cmp	r0, #0
   16550:	beq	1656c <__assert_fail@plt+0x54b4>
   16554:	mov	r1, r5
   16558:	mov	r2, r4
   1655c:	mov	r6, r0
   16560:	bl	10e9c <memcpy@plt>
   16564:	mov	r0, r6
   16568:	pop	{r4, r5, r6, sl, fp, pc}
   1656c:	bl	16634 <__assert_fail@plt+0x557c>
   16570:	push	{r4, r5, r6, sl, fp, lr}
   16574:	add	fp, sp, #16
   16578:	mov	r5, r0
   1657c:	mov	r0, r1
   16580:	mov	r4, r1
   16584:	bl	1747c <__assert_fail@plt+0x63c4>
   16588:	cmp	r0, #0
   1658c:	beq	165a8 <__assert_fail@plt+0x54f0>
   16590:	mov	r1, r5
   16594:	mov	r2, r4
   16598:	mov	r6, r0
   1659c:	bl	10e9c <memcpy@plt>
   165a0:	mov	r0, r6
   165a4:	pop	{r4, r5, r6, sl, fp, pc}
   165a8:	bl	16634 <__assert_fail@plt+0x557c>
   165ac:	push	{r4, r5, r6, sl, fp, lr}
   165b0:	add	fp, sp, #16
   165b4:	mov	r5, r0
   165b8:	add	r0, r1, #1
   165bc:	mov	r4, r1
   165c0:	bl	1747c <__assert_fail@plt+0x63c4>
   165c4:	cmp	r0, #0
   165c8:	beq	165f0 <__assert_fail@plt+0x5538>
   165cc:	mov	r6, r0
   165d0:	mov	r0, #0
   165d4:	mov	r1, r5
   165d8:	mov	r2, r4
   165dc:	strb	r0, [r6, r4]
   165e0:	mov	r0, r6
   165e4:	bl	10e9c <memcpy@plt>
   165e8:	mov	r0, r6
   165ec:	pop	{r4, r5, r6, sl, fp, pc}
   165f0:	bl	16634 <__assert_fail@plt+0x557c>
   165f4:	push	{r4, r5, r6, sl, fp, lr}
   165f8:	add	fp, sp, #16
   165fc:	mov	r4, r0
   16600:	bl	10fc8 <strlen@plt>
   16604:	add	r5, r0, #1
   16608:	mov	r0, r5
   1660c:	bl	1747c <__assert_fail@plt+0x63c4>
   16610:	cmp	r0, #0
   16614:	beq	16630 <__assert_fail@plt+0x5578>
   16618:	mov	r1, r4
   1661c:	mov	r2, r5
   16620:	mov	r6, r0
   16624:	bl	10e9c <memcpy@plt>
   16628:	mov	r0, r6
   1662c:	pop	{r4, r5, r6, sl, fp, pc}
   16630:	bl	16634 <__assert_fail@plt+0x557c>
   16634:	push	{fp, lr}
   16638:	mov	fp, sp
   1663c:	movw	r0, #37108	; 0x90f4
   16640:	movw	r1, #35076	; 0x8904
   16644:	mov	r2, #5
   16648:	movt	r0, #2
   1664c:	movt	r1, #1
   16650:	ldr	r4, [r0]
   16654:	mov	r0, #0
   16658:	bl	10ed8 <dcgettext@plt>
   1665c:	movw	r2, #32941	; 0x80ad
   16660:	mov	r3, r0
   16664:	mov	r0, r4
   16668:	mov	r1, #0
   1666c:	movt	r2, #1
   16670:	bl	10f5c <error@plt>
   16674:	bl	110a0 <abort@plt>
   16678:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1667c:	add	fp, sp, #24
   16680:	sub	sp, sp, #16
   16684:	mov	r8, r0
   16688:	ldr	r0, [fp, #16]
   1668c:	mov	r5, r3
   16690:	mov	r6, r2
   16694:	mov	r2, r1
   16698:	add	r3, sp, #8
   1669c:	mov	r1, #0
   166a0:	str	r0, [sp]
   166a4:	mov	r0, r8
   166a8:	bl	16774 <__assert_fail@plt+0x56bc>
   166ac:	cmp	r0, #0
   166b0:	bne	1673c <__assert_fail@plt+0x5684>
   166b4:	ldr	r4, [sp, #8]
   166b8:	ldr	r7, [sp, #12]
   166bc:	subs	r0, r4, r6
   166c0:	sbcs	r0, r7, r5
   166c4:	bcc	166e8 <__assert_fail@plt+0x5630>
   166c8:	ldr	r1, [fp, #8]
   166cc:	ldr	r0, [fp, #12]
   166d0:	subs	r1, r1, r4
   166d4:	sbcs	r0, r0, r7
   166d8:	movcs	r0, r4
   166dc:	movcs	r1, r7
   166e0:	subcs	sp, fp, #24
   166e4:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   166e8:	bl	10fec <__errno_location@plt>
   166ec:	subs	r1, r4, #1073741824	; 0x40000000
   166f0:	sbcs	r1, r7, #0
   166f4:	movcc	r1, #34	; 0x22
   166f8:	movcs	r1, #75	; 0x4b
   166fc:	str	r1, [r0]
   16700:	ldr	r6, [r0]
   16704:	ldr	r4, [fp, #24]
   16708:	ldr	r5, [fp, #20]
   1670c:	mov	r0, r8
   16710:	bl	15998 <__assert_fail@plt+0x48e0>
   16714:	subs	r1, r6, #22
   16718:	movw	r2, #32937	; 0x80a9
   1671c:	str	r0, [sp]
   16720:	mov	r3, r5
   16724:	movne	r1, r6
   16728:	cmp	r4, #0
   1672c:	movt	r2, #1
   16730:	movweq	r4, #1
   16734:	mov	r0, r4
   16738:	bl	10f5c <error@plt>
   1673c:	cmp	r0, #1
   16740:	beq	16758 <__assert_fail@plt+0x56a0>
   16744:	cmp	r0, #3
   16748:	bne	16764 <__assert_fail@plt+0x56ac>
   1674c:	bl	10fec <__errno_location@plt>
   16750:	mov	r1, #0
   16754:	b	166fc <__assert_fail@plt+0x5644>
   16758:	bl	10fec <__errno_location@plt>
   1675c:	mov	r1, #75	; 0x4b
   16760:	b	166fc <__assert_fail@plt+0x5644>
   16764:	bl	10fec <__errno_location@plt>
   16768:	b	16700 <__assert_fail@plt+0x5648>
   1676c:	mov	r1, #10
   16770:	b	16678 <__assert_fail@plt+0x55c0>
   16774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16778:	add	fp, sp, #28
   1677c:	sub	sp, sp, #44	; 0x2c
   16780:	cmp	r2, #37	; 0x25
   16784:	bcs	17408 <__assert_fail@plt+0x6350>
   16788:	ldr	sl, [fp, #8]
   1678c:	mov	r6, r2
   16790:	mov	r7, r1
   16794:	mov	r4, r0
   16798:	str	r3, [sp, #36]	; 0x24
   1679c:	bl	10fec <__errno_location@plt>
   167a0:	mov	r5, r0
   167a4:	mov	r0, #0
   167a8:	str	r0, [r5]
   167ac:	bl	10fb0 <__ctype_b_loc@plt>
   167b0:	ldr	r1, [r0]
   167b4:	mov	r2, r4
   167b8:	ldrb	r0, [r2], #1
   167bc:	add	r3, r1, r0, lsl #1
   167c0:	ldrb	r3, [r3, #1]
   167c4:	tst	r3, #32
   167c8:	bne	167b8 <__assert_fail@plt+0x5700>
   167cc:	sub	r9, fp, #32
   167d0:	cmp	r7, #0
   167d4:	mov	r8, #4
   167d8:	movne	r9, r7
   167dc:	cmp	r0, #45	; 0x2d
   167e0:	beq	16ba0 <__assert_fail@plt+0x5ae8>
   167e4:	mov	r0, r4
   167e8:	mov	r1, r9
   167ec:	mov	r2, r6
   167f0:	mov	r3, #0
   167f4:	bl	10ea8 <__strtoull_internal@plt>
   167f8:	mov	r7, r1
   167fc:	ldr	r1, [r9]
   16800:	cmp	r1, r4
   16804:	beq	1683c <__assert_fail@plt+0x5784>
   16808:	mov	r6, r0
   1680c:	ldr	r0, [r5]
   16810:	cmp	r0, #0
   16814:	beq	16b58 <__assert_fail@plt+0x5aa0>
   16818:	cmp	r0, #34	; 0x22
   1681c:	bne	16ba0 <__assert_fail@plt+0x5ae8>
   16820:	mov	r8, #1
   16824:	cmp	sl, #0
   16828:	beq	173f4 <__assert_fail@plt+0x633c>
   1682c:	ldrb	r4, [r1]
   16830:	cmp	r4, #0
   16834:	bne	16880 <__assert_fail@plt+0x57c8>
   16838:	b	173f4 <__assert_fail@plt+0x633c>
   1683c:	cmp	sl, #0
   16840:	beq	16ba0 <__assert_fail@plt+0x5ae8>
   16844:	mov	r5, r1
   16848:	ldrb	r1, [r4]
   1684c:	cmp	r1, #0
   16850:	beq	16ba0 <__assert_fail@plt+0x5ae8>
   16854:	mov	r0, sl
   16858:	bl	10fd4 <strchr@plt>
   1685c:	cmp	r0, #0
   16860:	beq	16ba0 <__assert_fail@plt+0x5ae8>
   16864:	mov	r1, r5
   16868:	mov	r8, #0
   1686c:	mov	r6, #1
   16870:	mov	r7, #0
   16874:	ldrb	r4, [r1]
   16878:	cmp	r4, #0
   1687c:	beq	173f4 <__assert_fail@plt+0x633c>
   16880:	str	r1, [sp, #32]
   16884:	mov	r0, sl
   16888:	mov	r1, r4
   1688c:	bl	10fd4 <strchr@plt>
   16890:	cmp	r0, #0
   16894:	beq	16b94 <__assert_fail@plt+0x5adc>
   16898:	sub	r0, r4, #69	; 0x45
   1689c:	mov	r1, #1
   168a0:	mov	r3, #0
   168a4:	mov	r5, #1024	; 0x400
   168a8:	cmp	r0, #47	; 0x2f
   168ac:	str	r1, [sp, #28]
   168b0:	bhi	169b4 <__assert_fail@plt+0x58fc>
   168b4:	add	r1, pc, #0
   168b8:	ldr	pc, [r1, r0, lsl #2]
   168bc:	andeq	r6, r1, ip, ror r9
   168c0:			; <UNDEFINED> instruction: 0x000169b4
   168c4:	andeq	r6, r1, ip, ror r9
   168c8:			; <UNDEFINED> instruction: 0x000169b4
   168cc:			; <UNDEFINED> instruction: 0x000169b4
   168d0:			; <UNDEFINED> instruction: 0x000169b4
   168d4:	andeq	r6, r1, ip, ror r9
   168d8:			; <UNDEFINED> instruction: 0x000169b4
   168dc:	andeq	r6, r1, ip, ror r9
   168e0:			; <UNDEFINED> instruction: 0x000169b4
   168e4:			; <UNDEFINED> instruction: 0x000169b4
   168e8:	andeq	r6, r1, ip, ror r9
   168ec:			; <UNDEFINED> instruction: 0x000169b4
   168f0:			; <UNDEFINED> instruction: 0x000169b4
   168f4:			; <UNDEFINED> instruction: 0x000169b4
   168f8:	andeq	r6, r1, ip, ror r9
   168fc:			; <UNDEFINED> instruction: 0x000169b4
   16900:			; <UNDEFINED> instruction: 0x000169b4
   16904:			; <UNDEFINED> instruction: 0x000169b4
   16908:			; <UNDEFINED> instruction: 0x000169b4
   1690c:	andeq	r6, r1, ip, ror r9
   16910:	andeq	r6, r1, ip, ror r9
   16914:			; <UNDEFINED> instruction: 0x000169b4
   16918:			; <UNDEFINED> instruction: 0x000169b4
   1691c:			; <UNDEFINED> instruction: 0x000169b4
   16920:			; <UNDEFINED> instruction: 0x000169b4
   16924:			; <UNDEFINED> instruction: 0x000169b4
   16928:			; <UNDEFINED> instruction: 0x000169b4
   1692c:			; <UNDEFINED> instruction: 0x000169b4
   16930:			; <UNDEFINED> instruction: 0x000169b4
   16934:			; <UNDEFINED> instruction: 0x000169b4
   16938:			; <UNDEFINED> instruction: 0x000169b4
   1693c:			; <UNDEFINED> instruction: 0x000169b4
   16940:			; <UNDEFINED> instruction: 0x000169b4
   16944:	andeq	r6, r1, ip, ror r9
   16948:			; <UNDEFINED> instruction: 0x000169b4
   1694c:			; <UNDEFINED> instruction: 0x000169b4
   16950:			; <UNDEFINED> instruction: 0x000169b4
   16954:	andeq	r6, r1, ip, ror r9
   16958:			; <UNDEFINED> instruction: 0x000169b4
   1695c:	andeq	r6, r1, ip, ror r9
   16960:			; <UNDEFINED> instruction: 0x000169b4
   16964:			; <UNDEFINED> instruction: 0x000169b4
   16968:			; <UNDEFINED> instruction: 0x000169b4
   1696c:			; <UNDEFINED> instruction: 0x000169b4
   16970:			; <UNDEFINED> instruction: 0x000169b4
   16974:			; <UNDEFINED> instruction: 0x000169b4
   16978:	andeq	r6, r1, ip, ror r9
   1697c:	mov	r0, sl
   16980:	mov	r1, #48	; 0x30
   16984:	bl	10fd4 <strchr@plt>
   16988:	cmp	r0, #0
   1698c:	beq	169b0 <__assert_fail@plt+0x58f8>
   16990:	ldr	r1, [sp, #32]
   16994:	ldrb	r0, [r1, #1]
   16998:	cmp	r0, #66	; 0x42
   1699c:	cmpne	r0, #68	; 0x44
   169a0:	bne	16b68 <__assert_fail@plt+0x5ab0>
   169a4:	mov	r5, #1000	; 0x3e8
   169a8:	mov	r0, #2
   169ac:	str	r0, [sp, #28]
   169b0:	mov	r3, #0
   169b4:	sub	r0, r4, #66	; 0x42
   169b8:	cmp	r0, #53	; 0x35
   169bc:	bhi	16b94 <__assert_fail@plt+0x5adc>
   169c0:	add	r1, pc, #0
   169c4:	ldr	pc, [r1, r0, lsl #2]
   169c8:	andeq	r6, r1, r4, lsl #30
   169cc:	muleq	r1, r4, fp
   169d0:	muleq	r1, r4, fp
   169d4:	andeq	r6, r1, ip, lsr #30
   169d8:	muleq	r1, r4, fp
   169dc:	andeq	r6, r1, r0, lsr #21
   169e0:	muleq	r1, r4, fp
   169e4:	muleq	r1, r4, fp
   169e8:	muleq	r1, r4, fp
   169ec:	andeq	r6, r1, ip, lsr #23
   169f0:	muleq	r1, r4, fp
   169f4:	strdeq	r6, [r1], -r4
   169f8:	muleq	r1, r4, fp
   169fc:	muleq	r1, r4, fp
   16a00:	andeq	r7, r1, r0, lsl #1
   16a04:	muleq	r1, r4, fp
   16a08:	muleq	r1, r4, fp
   16a0c:	muleq	r1, r4, fp
   16a10:	andeq	r6, r1, r0, lsl #25
   16a14:	muleq	r1, r4, fp
   16a18:	muleq	r1, r4, fp
   16a1c:	muleq	r1, r4, fp
   16a20:	muleq	r1, r4, fp
   16a24:	andeq	r7, r1, r8, lsr #3
   16a28:	andeq	r6, r1, r8, ror #26
   16a2c:	muleq	r1, r4, fp
   16a30:	muleq	r1, r4, fp
   16a34:	muleq	r1, r4, fp
   16a38:	muleq	r1, r4, fp
   16a3c:	muleq	r1, r4, fp
   16a40:	muleq	r1, r4, fp
   16a44:	muleq	r1, r4, fp
   16a48:	andeq	r7, r1, ip, ror r3
   16a4c:	ldrdeq	r7, [r1], -r4
   16a50:	muleq	r1, r4, fp
   16a54:	muleq	r1, r4, fp
   16a58:	muleq	r1, r4, fp
   16a5c:	andeq	r6, r1, r0, lsr #21
   16a60:	muleq	r1, r4, fp
   16a64:	muleq	r1, r4, fp
   16a68:	muleq	r1, r4, fp
   16a6c:	andeq	r6, r1, ip, lsr #23
   16a70:	muleq	r1, r4, fp
   16a74:	strdeq	r6, [r1], -r4
   16a78:	muleq	r1, r4, fp
   16a7c:	muleq	r1, r4, fp
   16a80:	muleq	r1, r4, fp
   16a84:	muleq	r1, r4, fp
   16a88:	muleq	r1, r4, fp
   16a8c:	muleq	r1, r4, fp
   16a90:	andeq	r6, r1, r0, lsl #25
   16a94:	muleq	r1, r4, fp
   16a98:	muleq	r1, r4, fp
   16a9c:			; <UNDEFINED> instruction: 0x000173b0
   16aa0:	mvn	r0, #0
   16aa4:	mvn	r1, #0
   16aa8:	mov	r2, r5
   16aac:	mov	sl, r3
   16ab0:	bl	179dc <__assert_fail@plt+0x6924>
   16ab4:	subs	r3, r0, r6
   16ab8:	mov	lr, #0
   16abc:	umull	r4, r2, r6, r5
   16ac0:	str	r1, [sp, #20]
   16ac4:	sbcs	r3, r1, r7
   16ac8:	mla	ip, r6, sl, r2
   16acc:	mov	r2, r1
   16ad0:	movwcc	lr, #1
   16ad4:	mla	r7, r7, r5, ip
   16ad8:	mov	r2, #0
   16adc:	cmp	lr, #0
   16ae0:	mvnne	r4, #0
   16ae4:	mvnne	r7, #0
   16ae8:	subs	r6, r0, r4
   16aec:	sbcs	r6, r1, r7
   16af0:	movwcc	r2, #1
   16af4:	umull	r3, r6, r4, r5
   16af8:	cmp	r2, #0
   16afc:	str	r6, [sp, #16]
   16b00:	mvnne	r3, #0
   16b04:	cmp	r2, #0
   16b08:	umull	r6, ip, r3, r5
   16b0c:	mla	r1, r3, sl, ip
   16b10:	ldr	ip, [sp, #16]
   16b14:	str	r1, [sp, #12]
   16b18:	mla	r4, r4, sl, ip
   16b1c:	mla	r4, r7, r5, r4
   16b20:	ldr	r7, [sp, #12]
   16b24:	mvnne	r4, #0
   16b28:	subs	r0, r0, r3
   16b2c:	ldr	r0, [sp, #20]
   16b30:	mla	r7, r4, r5, r7
   16b34:	sbcs	r0, r0, r4
   16b38:	mov	r0, #0
   16b3c:	movwcc	r0, #1
   16b40:	cmp	r0, #0
   16b44:	mov	r1, r0
   16b48:	orr	r0, lr, r2
   16b4c:	mvnne	r7, #0
   16b50:	mvnne	r6, #0
   16b54:	b	171a0 <__assert_fail@plt+0x60e8>
   16b58:	mov	r8, r0
   16b5c:	cmp	sl, #0
   16b60:	bne	1682c <__assert_fail@plt+0x5774>
   16b64:	b	173f4 <__assert_fail@plt+0x633c>
   16b68:	cmp	r0, #105	; 0x69
   16b6c:	mov	r3, #0
   16b70:	bne	169b4 <__assert_fail@plt+0x58fc>
   16b74:	ldrb	r0, [r1, #2]
   16b78:	mov	r1, #1
   16b7c:	cmp	r0, #66	; 0x42
   16b80:	movweq	r1, #3
   16b84:	str	r1, [sp, #28]
   16b88:	sub	r0, r4, #66	; 0x42
   16b8c:	cmp	r0, #53	; 0x35
   16b90:	bls	169c0 <__assert_fail@plt+0x5908>
   16b94:	ldr	r0, [sp, #36]	; 0x24
   16b98:	orr	r8, r8, #2
   16b9c:	strd	r6, [r0]
   16ba0:	mov	r0, r8
   16ba4:	sub	sp, fp, #28
   16ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bac:	mvn	r0, #0
   16bb0:	mvn	r1, #0
   16bb4:	mov	r2, r5
   16bb8:	mov	r4, r3
   16bbc:	bl	179dc <__assert_fail@plt+0x6924>
   16bc0:	subs	r0, r0, r6
   16bc4:	mov	r2, #0
   16bc8:	sbcs	r0, r1, r7
   16bcc:	movwcc	r2, #1
   16bd0:	umull	r0, r1, r6, r5
   16bd4:	mla	r1, r6, r4, r1
   16bd8:	cmp	r2, #0
   16bdc:	mov	r3, r2
   16be0:	mla	r7, r7, r5, r1
   16be4:	mvnne	r0, #0
   16be8:	mvnne	r7, #0
   16bec:	mov	r6, r0
   16bf0:	b	173d4 <__assert_fail@plt+0x631c>
   16bf4:	mvn	r0, #0
   16bf8:	mvn	r1, #0
   16bfc:	mov	r2, r5
   16c00:	str	r3, [sp, #24]
   16c04:	bl	179dc <__assert_fail@plt+0x6924>
   16c08:	subs	r3, r0, r6
   16c0c:	mov	ip, r0
   16c10:	umull	r4, r0, r6, r5
   16c14:	mov	sl, #0
   16c18:	sbcs	r3, r1, r7
   16c1c:	str	r0, [sp, #20]
   16c20:	ldr	r0, [sp, #24]
   16c24:	mov	r3, #0
   16c28:	movwcc	r3, #1
   16c2c:	cmp	r3, #0
   16c30:	mvnne	r4, #0
   16c34:	cmp	r3, #0
   16c38:	umull	lr, r2, r4, r5
   16c3c:	mla	r2, r4, r0, r2
   16c40:	str	r2, [sp, #16]
   16c44:	ldr	r2, [sp, #20]
   16c48:	mla	r6, r6, r0, r2
   16c4c:	ldr	r0, [sp, #16]
   16c50:	mla	r6, r7, r5, r6
   16c54:	mvnne	r6, #0
   16c58:	mla	r7, r6, r5, r0
   16c5c:	subs	r0, ip, r4
   16c60:	sbcs	r0, r1, r6
   16c64:	movwcc	sl, #1
   16c68:	cmp	sl, #0
   16c6c:	orr	r3, r3, sl
   16c70:	mvnne	lr, #0
   16c74:	mvnne	r7, #0
   16c78:	mov	r6, lr
   16c7c:	b	173d4 <__assert_fail@plt+0x631c>
   16c80:	mvn	r0, #0
   16c84:	mvn	r1, #0
   16c88:	mov	r2, r5
   16c8c:	mov	sl, r3
   16c90:	bl	179dc <__assert_fail@plt+0x6924>
   16c94:	subs	r3, r0, r6
   16c98:	mov	ip, r1
   16c9c:	umull	r2, lr, r6, r5
   16ca0:	str	r0, [sp, #20]
   16ca4:	sbcs	r3, r1, r7
   16ca8:	mov	r1, #0
   16cac:	mla	r6, r6, sl, lr
   16cb0:	mov	lr, #0
   16cb4:	str	ip, [sp, #16]
   16cb8:	movwcc	r1, #1
   16cbc:	mla	r7, r7, r5, r6
   16cc0:	cmp	r1, #0
   16cc4:	mvnne	r2, #0
   16cc8:	cmp	r1, #0
   16ccc:	umull	r3, r4, r2, r5
   16cd0:	mvnne	r7, #0
   16cd4:	mla	r4, r2, sl, r4
   16cd8:	subs	r2, r0, r2
   16cdc:	sbcs	r2, ip, r7
   16ce0:	mla	r4, r7, r5, r4
   16ce4:	movwcc	lr, #1
   16ce8:	mov	r2, #0
   16cec:	cmp	lr, #0
   16cf0:	mvnne	r3, #0
   16cf4:	mvnne	r4, #0
   16cf8:	subs	r7, r0, r3
   16cfc:	mov	r0, r5
   16d00:	sbcs	r7, ip, r4
   16d04:	movwcc	r2, #1
   16d08:	umull	r5, r7, r3, r5
   16d0c:	cmp	r2, #0
   16d10:	mla	r3, r3, sl, r7
   16d14:	mvnne	r5, #0
   16d18:	mla	r3, r4, r0, r3
   16d1c:	cmp	r2, #0
   16d20:	umull	r6, ip, r5, r0
   16d24:	mvnne	r3, #0
   16d28:	mla	ip, r5, sl, ip
   16d2c:	mla	r7, r3, r0, ip
   16d30:	ldr	r0, [sp, #20]
   16d34:	subs	r0, r0, r5
   16d38:	ldr	r0, [sp, #16]
   16d3c:	sbcs	r0, r0, r3
   16d40:	mov	r0, #0
   16d44:	movwcc	r0, #1
   16d48:	cmp	r0, #0
   16d4c:	mov	r3, r0
   16d50:	orr	r0, r1, lr
   16d54:	orr	r0, r0, r2
   16d58:	mvnne	r7, #0
   16d5c:	mvnne	r6, #0
   16d60:	orr	r3, r0, r3
   16d64:	b	173d4 <__assert_fail@plt+0x631c>
   16d68:	mvn	r0, #0
   16d6c:	mvn	r1, #0
   16d70:	mov	r2, r5
   16d74:	mov	r4, r3
   16d78:	str	r3, [sp, #24]
   16d7c:	bl	179dc <__assert_fail@plt+0x6924>
   16d80:	umull	r3, r2, r6, r5
   16d84:	mla	r2, r6, r4, r2
   16d88:	subs	r6, r0, r6
   16d8c:	sbcs	r6, r1, r7
   16d90:	mla	r2, r7, r5, r2
   16d94:	mov	r7, #0
   16d98:	mov	r6, #0
   16d9c:	movwcc	r6, #1
   16da0:	cmp	r6, #0
   16da4:	str	r6, [sp, #20]
   16da8:	mvnne	r3, #0
   16dac:	mvnne	r2, #0
   16db0:	subs	r4, r0, r3
   16db4:	umull	r6, ip, r3, r5
   16db8:	sbcs	r4, r1, r2
   16dbc:	ldr	r4, [sp, #24]
   16dc0:	movwcc	r7, #1
   16dc4:	cmp	r7, #0
   16dc8:	mov	lr, r7
   16dcc:	str	r7, [sp, #16]
   16dd0:	mvnne	r6, #0
   16dd4:	cmp	lr, #0
   16dd8:	mov	lr, #0
   16ddc:	umull	sl, r7, r6, r5
   16de0:	mla	r3, r3, r4, ip
   16de4:	mla	r7, r6, r4, r7
   16de8:	mov	r4, r0
   16dec:	mla	r2, r2, r5, r3
   16df0:	mvnne	r2, #0
   16df4:	subs	r3, r0, r6
   16df8:	mov	r0, #0
   16dfc:	mla	r7, r2, r5, r7
   16e00:	sbcs	r2, r1, r2
   16e04:	mov	r3, r4
   16e08:	movwcc	r0, #1
   16e0c:	str	r3, [sp, #4]
   16e10:	cmp	r0, #0
   16e14:	str	r0, [sp, #12]
   16e18:	mov	r0, r1
   16e1c:	mvnne	sl, #0
   16e20:	mvnne	r7, #0
   16e24:	str	r0, [sp, #8]
   16e28:	subs	r2, r4, sl
   16e2c:	ldr	r4, [sp, #24]
   16e30:	sbcs	r2, r1, r7
   16e34:	movwcc	lr, #1
   16e38:	umull	r6, r2, sl, r5
   16e3c:	cmp	lr, #0
   16e40:	mvnne	r6, #0
   16e44:	mla	r2, sl, r4, r2
   16e48:	cmp	lr, #0
   16e4c:	umull	r1, ip, r6, r5
   16e50:	mla	r2, r7, r5, r2
   16e54:	mla	ip, r6, r4, ip
   16e58:	mvnne	r2, #0
   16e5c:	subs	r6, r3, r6
   16e60:	mla	r7, r2, r5, ip
   16e64:	sbcs	r2, r0, r2
   16e68:	mov	ip, #0
   16e6c:	movwcc	ip, #1
   16e70:	mov	r2, #0
   16e74:	cmp	ip, #0
   16e78:	mvnne	r1, #0
   16e7c:	mvnne	r7, #0
   16e80:	subs	r6, r3, r1
   16e84:	ldr	r3, [sp, #24]
   16e88:	sbcs	r6, r0, r7
   16e8c:	umull	r0, sl, r1, r5
   16e90:	movwcc	r2, #1
   16e94:	cmp	r2, #0
   16e98:	mvnne	r0, #0
   16e9c:	mla	r1, r1, r3, sl
   16ea0:	cmp	r2, #0
   16ea4:	umull	r6, r4, r0, r5
   16ea8:	mla	r1, r7, r5, r1
   16eac:	mla	r4, r0, r3, r4
   16eb0:	ldr	r3, [sp, #4]
   16eb4:	mvnne	r1, #0
   16eb8:	mla	r7, r1, r5, r4
   16ebc:	ldr	r5, [sp, #16]
   16ec0:	subs	r0, r3, r0
   16ec4:	ldr	r0, [sp, #8]
   16ec8:	sbcs	r0, r0, r1
   16ecc:	mov	r0, #0
   16ed0:	movwcc	r0, #1
   16ed4:	cmp	r0, #0
   16ed8:	mov	r1, r0
   16edc:	ldr	r0, [sp, #20]
   16ee0:	mvnne	r7, #0
   16ee4:	mvnne	r6, #0
   16ee8:	orr	r0, r0, r5
   16eec:	ldr	r5, [sp, #12]
   16ef0:	orr	r0, r0, r5
   16ef4:	orr	r0, r0, lr
   16ef8:	orr	r0, r0, ip
   16efc:	orr	r0, r0, r2
   16f00:	b	17370 <__assert_fail@plt+0x62b8>
   16f04:	mov	r1, #0
   16f08:	lsl	r2, r7, #10
   16f0c:	lsl	r0, r6, #10
   16f10:	lsr	r3, r7, #22
   16f14:	cmp	r1, r7, lsr #22
   16f18:	orr	r2, r2, r6, lsr #22
   16f1c:	mvnne	r0, #0
   16f20:	movwne	r3, #1
   16f24:	cmp	r1, r7, lsr #22
   16f28:	b	173a0 <__assert_fail@plt+0x62e8>
   16f2c:	mvn	r0, #0
   16f30:	mvn	r1, #0
   16f34:	mov	r2, r5
   16f38:	mov	sl, r3
   16f3c:	bl	179dc <__assert_fail@plt+0x6924>
   16f40:	subs	r2, r0, r6
   16f44:	mov	ip, r0
   16f48:	mov	r0, #0
   16f4c:	sbcs	r2, r1, r7
   16f50:	movwcc	r0, #1
   16f54:	umull	r4, r2, r6, r5
   16f58:	cmp	r0, #0
   16f5c:	mla	r2, r6, sl, r2
   16f60:	str	r0, [sp, #20]
   16f64:	mvnne	r4, #0
   16f68:	cmp	r0, #0
   16f6c:	mla	r2, r7, r5, r2
   16f70:	mov	r0, #0
   16f74:	umull	lr, r3, r4, r5
   16f78:	mvnne	r2, #0
   16f7c:	mla	r3, r4, sl, r3
   16f80:	mla	r6, r2, r5, r3
   16f84:	subs	r3, ip, r4
   16f88:	sbcs	r2, r1, r2
   16f8c:	mov	r3, r1
   16f90:	movwcc	r0, #1
   16f94:	str	r3, [sp, #8]
   16f98:	cmp	r0, #0
   16f9c:	str	r0, [sp, #16]
   16fa0:	mov	r0, ip
   16fa4:	mvnne	lr, #0
   16fa8:	mvnne	r6, #0
   16fac:	str	r0, [sp, #12]
   16fb0:	subs	r2, ip, lr
   16fb4:	umull	r7, r4, lr, r5
   16fb8:	sbcs	r2, r1, r6
   16fbc:	mla	r4, lr, sl, r4
   16fc0:	mov	r2, #0
   16fc4:	mla	r6, r6, r5, r4
   16fc8:	mov	r4, #0
   16fcc:	movwcc	r2, #1
   16fd0:	cmp	r2, #0
   16fd4:	mvnne	r7, #0
   16fd8:	cmp	r2, #0
   16fdc:	umull	r1, ip, r7, r5
   16fe0:	mvnne	r6, #0
   16fe4:	mla	ip, r7, sl, ip
   16fe8:	subs	r7, r0, r7
   16fec:	mla	lr, r6, r5, ip
   16ff0:	sbcs	r7, r3, r6
   16ff4:	mov	ip, #0
   16ff8:	movwcc	ip, #1
   16ffc:	cmp	ip, #0
   17000:	mvnne	r1, #0
   17004:	mvnne	lr, #0
   17008:	subs	r7, r0, r1
   1700c:	sbcs	r7, r3, lr
   17010:	movwcc	r4, #1
   17014:	umull	r0, r7, r1, r5
   17018:	cmp	r4, #0
   1701c:	mla	r1, r1, sl, r7
   17020:	mvnne	r0, #0
   17024:	mla	r1, lr, r5, r1
   17028:	cmp	r4, #0
   1702c:	umull	r6, r3, r0, r5
   17030:	mvnne	r1, #0
   17034:	mla	r3, r0, sl, r3
   17038:	mla	r7, r1, r5, r3
   1703c:	ldr	r3, [sp, #12]
   17040:	subs	r0, r3, r0
   17044:	ldr	r3, [sp, #16]
   17048:	ldr	r0, [sp, #8]
   1704c:	sbcs	r0, r0, r1
   17050:	mov	r0, #0
   17054:	movwcc	r0, #1
   17058:	cmp	r0, #0
   1705c:	mov	r1, r0
   17060:	ldr	r0, [sp, #20]
   17064:	mvnne	r7, #0
   17068:	mvnne	r6, #0
   1706c:	orr	r0, r0, r3
   17070:	orr	r0, r0, r2
   17074:	orr	r0, r0, ip
   17078:	orr	r0, r0, r4
   1707c:	b	171a0 <__assert_fail@plt+0x60e8>
   17080:	mvn	r0, #0
   17084:	mvn	r1, #0
   17088:	mov	r2, r5
   1708c:	mov	sl, r3
   17090:	bl	179dc <__assert_fail@plt+0x6924>
   17094:	umull	r3, r2, r6, r5
   17098:	mov	lr, r1
   1709c:	mov	r1, r0
   170a0:	mla	r2, r6, sl, r2
   170a4:	subs	r6, r0, r6
   170a8:	mov	r0, #0
   170ac:	sbcs	r6, lr, r7
   170b0:	mla	r2, r7, r5, r2
   170b4:	movwcc	r0, #1
   170b8:	cmp	r0, #0
   170bc:	str	r0, [sp, #20]
   170c0:	mov	r0, r1
   170c4:	mvnne	r3, #0
   170c8:	mvnne	r2, #0
   170cc:	str	r0, [sp, #16]
   170d0:	subs	r4, r1, r3
   170d4:	umull	r7, ip, r3, r5
   170d8:	sbcs	r4, lr, r2
   170dc:	mla	r3, r3, sl, ip
   170e0:	mov	ip, #0
   170e4:	mov	r4, #0
   170e8:	mla	r2, r2, r5, r3
   170ec:	movwcc	r4, #1
   170f0:	cmp	r4, #0
   170f4:	mvnne	r7, #0
   170f8:	cmp	r4, #0
   170fc:	umull	r1, r6, r7, r5
   17100:	mvnne	r2, #0
   17104:	mla	r6, r7, sl, r6
   17108:	mla	r3, r2, r5, r6
   1710c:	subs	r6, r0, r7
   17110:	sbcs	r2, lr, r2
   17114:	movwcc	ip, #1
   17118:	mov	r2, #0
   1711c:	cmp	ip, #0
   17120:	mvnne	r1, #0
   17124:	mvnne	r3, #0
   17128:	subs	r6, r0, r1
   1712c:	sbcs	r6, lr, r3
   17130:	movwcc	r2, #1
   17134:	umull	r0, r6, r1, r5
   17138:	cmp	r2, #0
   1713c:	str	r6, [sp, #12]
   17140:	mvnne	r0, #0
   17144:	cmp	r2, #0
   17148:	umull	r6, r7, r0, r5
   1714c:	mla	r7, r0, sl, r7
   17150:	str	r7, [sp, #8]
   17154:	ldr	r7, [sp, #12]
   17158:	mla	r1, r1, sl, r7
   1715c:	mla	r1, r3, r5, r1
   17160:	ldr	r3, [sp, #8]
   17164:	mvnne	r1, #0
   17168:	mla	r7, r1, r5, r3
   1716c:	ldr	r3, [sp, #16]
   17170:	subs	r0, r3, r0
   17174:	sbcs	r0, lr, r1
   17178:	mov	r0, #0
   1717c:	movwcc	r0, #1
   17180:	cmp	r0, #0
   17184:	mov	r1, r0
   17188:	ldr	r0, [sp, #20]
   1718c:	mvnne	r7, #0
   17190:	mvnne	r6, #0
   17194:	orr	r0, r0, r4
   17198:	orr	r0, r0, ip
   1719c:	orr	r0, r0, r2
   171a0:	orr	r3, r0, r1
   171a4:	b	173d4 <__assert_fail@plt+0x631c>
   171a8:	mvn	r0, #0
   171ac:	mvn	r1, #0
   171b0:	mov	r2, r5
   171b4:	mov	sl, r3
   171b8:	bl	179dc <__assert_fail@plt+0x6924>
   171bc:	mov	ip, r1
   171c0:	subs	r1, r0, r6
   171c4:	umull	r3, lr, r6, r5
   171c8:	mov	r2, r5
   171cc:	sbcs	r1, ip, r7
   171d0:	mla	r6, r6, sl, lr
   171d4:	str	ip, [sp, #4]
   171d8:	mov	r1, #0
   171dc:	mla	r7, r7, r2, r6
   171e0:	movwcc	r1, #1
   171e4:	cmp	r1, #0
   171e8:	str	r1, [sp, #20]
   171ec:	mvnne	r3, #0
   171f0:	cmp	r1, #0
   171f4:	mov	r1, r0
   171f8:	umull	r4, r5, r3, r5
   171fc:	mvnne	r7, #0
   17200:	mov	lr, r1
   17204:	mla	r5, r3, sl, r5
   17208:	subs	r3, r0, r3
   1720c:	sbcs	r0, ip, r7
   17210:	mla	r5, r7, r2, r5
   17214:	mov	r0, #0
   17218:	movwcc	r0, #1
   1721c:	cmp	r0, #0
   17220:	str	r0, [sp, #16]
   17224:	mvnne	r4, #0
   17228:	mvnne	r5, #0
   1722c:	subs	r0, r1, r4
   17230:	mov	r1, #0
   17234:	sbcs	r0, ip, r5
   17238:	movwcc	r1, #1
   1723c:	umull	r3, r0, r4, r2
   17240:	cmp	r1, #0
   17244:	mla	r0, r4, sl, r0
   17248:	mov	r4, lr
   1724c:	str	r1, [sp, #12]
   17250:	mvnne	r3, #0
   17254:	mla	r0, r5, r2, r0
   17258:	cmp	r1, #0
   1725c:	str	r4, [sp]
   17260:	umull	r7, r6, r3, r2
   17264:	mvnne	r0, #0
   17268:	mla	r6, r3, sl, r6
   1726c:	subs	r3, lr, r3
   17270:	mla	r5, r0, r2, r6
   17274:	sbcs	r0, ip, r0
   17278:	mov	r3, #0
   1727c:	mov	r0, #0
   17280:	movwcc	r0, #1
   17284:	cmp	r0, #0
   17288:	str	r0, [sp, #8]
   1728c:	mvnne	r7, #0
   17290:	mvnne	r5, #0
   17294:	subs	r0, lr, r7
   17298:	sbcs	r0, ip, r5
   1729c:	movwcc	r3, #1
   172a0:	umull	r6, r0, r7, r2
   172a4:	cmp	r3, #0
   172a8:	mla	r7, r7, sl, r0
   172ac:	mov	r0, ip
   172b0:	mvnne	r6, #0
   172b4:	mla	r7, r5, r2, r7
   172b8:	cmp	r3, #0
   172bc:	mov	r5, #0
   172c0:	umull	r1, lr, r6, r2
   172c4:	mvnne	r7, #0
   172c8:	mla	lr, r6, sl, lr
   172cc:	subs	r6, r4, r6
   172d0:	mla	lr, r7, r2, lr
   172d4:	sbcs	r7, ip, r7
   172d8:	mov	ip, #0
   172dc:	movwcc	ip, #1
   172e0:	cmp	ip, #0
   172e4:	mvnne	r1, #0
   172e8:	mvnne	lr, #0
   172ec:	subs	r7, r4, r1
   172f0:	sbcs	r7, r0, lr
   172f4:	movwcc	r5, #1
   172f8:	umull	r0, r7, r1, r2
   172fc:	cmp	r5, #0
   17300:	mla	r1, r1, sl, r7
   17304:	mvnne	r0, #0
   17308:	mla	r1, lr, r2, r1
   1730c:	cmp	r5, #0
   17310:	umull	r6, r4, r0, r2
   17314:	mvnne	r1, #0
   17318:	mla	r4, r0, sl, r4
   1731c:	mla	r7, r1, r2, r4
   17320:	ldr	r2, [sp]
   17324:	subs	r0, r2, r0
   17328:	ldr	r2, [sp, #16]
   1732c:	ldr	r0, [sp, #4]
   17330:	sbcs	r0, r0, r1
   17334:	mov	r0, #0
   17338:	movwcc	r0, #1
   1733c:	cmp	r0, #0
   17340:	mov	r1, r0
   17344:	ldr	r0, [sp, #20]
   17348:	mvnne	r7, #0
   1734c:	mvnne	r6, #0
   17350:	orr	r0, r0, r2
   17354:	ldr	r2, [sp, #12]
   17358:	orr	r0, r0, r2
   1735c:	ldr	r2, [sp, #8]
   17360:	orr	r0, r0, r2
   17364:	orr	r0, r0, r3
   17368:	orr	r0, r0, ip
   1736c:	orr	r0, r0, r5
   17370:	orr	r0, r0, r1
   17374:	and	r3, r0, #1
   17378:	b	173d4 <__assert_fail@plt+0x631c>
   1737c:	mov	r1, #0
   17380:	lsl	r2, r7, #9
   17384:	lsl	r0, r6, #9
   17388:	lsr	r3, r7, #23
   1738c:	cmp	r1, r7, lsr #23
   17390:	orr	r2, r2, r6, lsr #23
   17394:	mvnne	r0, #0
   17398:	movwne	r3, #1
   1739c:	cmp	r1, r7, lsr #23
   173a0:	mvnne	r2, #0
   173a4:	mov	r6, r0
   173a8:	mov	r7, r2
   173ac:	b	173d4 <__assert_fail@plt+0x631c>
   173b0:	lsl	r1, r7, #1
   173b4:	lsl	r0, r6, #1
   173b8:	cmp	r7, #0
   173bc:	lsr	r3, r7, #31
   173c0:	orr	r1, r1, r6, lsr #31
   173c4:	mvnlt	r0, #0
   173c8:	mvnlt	r1, #0
   173cc:	mov	r6, r0
   173d0:	mov	r7, r1
   173d4:	ldr	r1, [sp, #32]
   173d8:	ldr	r2, [sp, #28]
   173dc:	orr	r8, r3, r8
   173e0:	add	r0, r1, r2
   173e4:	str	r0, [r9]
   173e8:	ldrb	r0, [r1, r2]
   173ec:	cmp	r0, #0
   173f0:	orrne	r8, r8, #2
   173f4:	ldr	r0, [sp, #36]	; 0x24
   173f8:	strd	r6, [r0]
   173fc:	mov	r0, r8
   17400:	sub	sp, fp, #28
   17404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17408:	movw	r0, #35093	; 0x8915
   1740c:	movw	r1, #35131	; 0x893b
   17410:	movw	r3, #35147	; 0x894b
   17414:	mov	r2, #85	; 0x55
   17418:	movt	r0, #1
   1741c:	movt	r1, #1
   17420:	movt	r3, #1
   17424:	bl	110b8 <__assert_fail@plt>
   17428:	clz	r2, r1
   1742c:	clz	r3, r0
   17430:	lsr	r2, r2, #5
   17434:	lsr	r3, r3, #5
   17438:	orrs	r2, r3, r2
   1743c:	movwne	r1, #1
   17440:	movwne	r0, #1
   17444:	cmp	r1, #0
   17448:	beq	17478 <__assert_fail@plt+0x63c0>
   1744c:	mvn	r2, #-2147483648	; 0x80000000
   17450:	udiv	r2, r2, r1
   17454:	cmp	r2, r0
   17458:	bcs	17478 <__assert_fail@plt+0x63c0>
   1745c:	push	{fp, lr}
   17460:	mov	fp, sp
   17464:	bl	10fec <__errno_location@plt>
   17468:	mov	r1, #12
   1746c:	str	r1, [r0]
   17470:	mov	r0, #0
   17474:	pop	{fp, pc}
   17478:	b	10e3c <calloc@plt>
   1747c:	cmp	r0, #0
   17480:	movweq	r0, #1
   17484:	cmn	r0, #1
   17488:	ble	17490 <__assert_fail@plt+0x63d8>
   1748c:	b	10f74 <malloc@plt>
   17490:	push	{fp, lr}
   17494:	mov	fp, sp
   17498:	bl	10fec <__errno_location@plt>
   1749c:	mov	r1, #12
   174a0:	str	r1, [r0]
   174a4:	mov	r0, #0
   174a8:	pop	{fp, pc}
   174ac:	push	{fp, lr}
   174b0:	mov	fp, sp
   174b4:	cmp	r0, #0
   174b8:	beq	174d4 <__assert_fail@plt+0x641c>
   174bc:	cmp	r1, #0
   174c0:	beq	174e0 <__assert_fail@plt+0x6428>
   174c4:	cmn	r1, #1
   174c8:	ble	174ec <__assert_fail@plt+0x6434>
   174cc:	pop	{fp, lr}
   174d0:	b	10ee4 <realloc@plt>
   174d4:	mov	r0, r1
   174d8:	pop	{fp, lr}
   174dc:	b	1747c <__assert_fail@plt+0x63c4>
   174e0:	bl	13864 <__assert_fail@plt+0x27ac>
   174e4:	mov	r0, #0
   174e8:	pop	{fp, pc}
   174ec:	bl	10fec <__errno_location@plt>
   174f0:	mov	r1, #12
   174f4:	str	r1, [r0]
   174f8:	mov	r0, #0
   174fc:	pop	{fp, pc}
   17500:	push	{r4, r5, r6, sl, fp, lr}
   17504:	add	fp, sp, #16
   17508:	mov	r4, r0
   1750c:	bl	10f44 <__fpending@plt>
   17510:	ldr	r6, [r4]
   17514:	mov	r5, r0
   17518:	mov	r0, r4
   1751c:	bl	17584 <__assert_fail@plt+0x64cc>
   17520:	tst	r6, #32
   17524:	bne	1755c <__assert_fail@plt+0x64a4>
   17528:	cmp	r0, #0
   1752c:	mov	r4, r0
   17530:	mvnne	r4, #0
   17534:	cmp	r5, #0
   17538:	bne	17568 <__assert_fail@plt+0x64b0>
   1753c:	cmp	r0, #0
   17540:	beq	17568 <__assert_fail@plt+0x64b0>
   17544:	bl	10fec <__errno_location@plt>
   17548:	ldr	r0, [r0]
   1754c:	subs	r4, r0, #9
   17550:	mvnne	r4, #0
   17554:	mov	r0, r4
   17558:	pop	{r4, r5, r6, sl, fp, pc}
   1755c:	mvn	r4, #0
   17560:	cmp	r0, #0
   17564:	beq	17570 <__assert_fail@plt+0x64b8>
   17568:	mov	r0, r4
   1756c:	pop	{r4, r5, r6, sl, fp, pc}
   17570:	bl	10fec <__errno_location@plt>
   17574:	mov	r1, #0
   17578:	str	r1, [r0]
   1757c:	mov	r0, r4
   17580:	pop	{r4, r5, r6, sl, fp, pc}
   17584:	push	{r4, r5, r6, sl, fp, lr}
   17588:	add	fp, sp, #16
   1758c:	sub	sp, sp, #8
   17590:	mov	r4, r0
   17594:	bl	1101c <fileno@plt>
   17598:	cmn	r0, #1
   1759c:	ble	17610 <__assert_fail@plt+0x6558>
   175a0:	mov	r0, r4
   175a4:	bl	10f8c <__freading@plt>
   175a8:	cmp	r0, #0
   175ac:	beq	175d8 <__assert_fail@plt+0x6520>
   175b0:	mov	r0, r4
   175b4:	bl	1101c <fileno@plt>
   175b8:	mov	r1, #1
   175bc:	mov	r2, #0
   175c0:	mov	r3, #0
   175c4:	str	r1, [sp]
   175c8:	bl	10f2c <lseek64@plt>
   175cc:	and	r0, r0, r1
   175d0:	cmn	r0, #1
   175d4:	beq	17610 <__assert_fail@plt+0x6558>
   175d8:	mov	r0, r4
   175dc:	bl	17620 <__assert_fail@plt+0x6568>
   175e0:	cmp	r0, #0
   175e4:	beq	17610 <__assert_fail@plt+0x6558>
   175e8:	bl	10fec <__errno_location@plt>
   175ec:	ldr	r6, [r0]
   175f0:	mov	r5, r0
   175f4:	mov	r0, r4
   175f8:	bl	11040 <fclose@plt>
   175fc:	cmp	r6, #0
   17600:	strne	r6, [r5]
   17604:	mvnne	r0, #0
   17608:	sub	sp, fp, #16
   1760c:	pop	{r4, r5, r6, sl, fp, pc}
   17610:	mov	r0, r4
   17614:	sub	sp, fp, #16
   17618:	pop	{r4, r5, r6, sl, fp, lr}
   1761c:	b	11040 <fclose@plt>
   17620:	push	{r4, sl, fp, lr}
   17624:	add	fp, sp, #8
   17628:	sub	sp, sp, #8
   1762c:	mov	r4, r0
   17630:	cmp	r0, #0
   17634:	beq	17650 <__assert_fail@plt+0x6598>
   17638:	mov	r0, r4
   1763c:	bl	10f8c <__freading@plt>
   17640:	cmp	r0, #0
   17644:	ldrbne	r0, [r4, #1]
   17648:	tstne	r0, #1
   1764c:	bne	17660 <__assert_fail@plt+0x65a8>
   17650:	mov	r0, r4
   17654:	sub	sp, fp, #8
   17658:	pop	{r4, sl, fp, lr}
   1765c:	b	10e78 <fflush@plt>
   17660:	mov	r0, #1
   17664:	mov	r2, #0
   17668:	mov	r3, #0
   1766c:	str	r0, [sp]
   17670:	mov	r0, r4
   17674:	bl	17688 <__assert_fail@plt+0x65d0>
   17678:	mov	r0, r4
   1767c:	sub	sp, fp, #8
   17680:	pop	{r4, sl, fp, lr}
   17684:	b	10e78 <fflush@plt>
   17688:	push	{r4, r5, r6, r7, fp, lr}
   1768c:	add	fp, sp, #16
   17690:	sub	sp, sp, #8
   17694:	mov	r4, r0
   17698:	ldr	r0, [r0, #4]
   1769c:	mov	r5, r3
   176a0:	mov	r6, r2
   176a4:	ldr	r1, [r4, #8]
   176a8:	cmp	r1, r0
   176ac:	bne	176c8 <__assert_fail@plt+0x6610>
   176b0:	ldrd	r0, [r4, #16]
   176b4:	cmp	r1, r0
   176b8:	bne	176c8 <__assert_fail@plt+0x6610>
   176bc:	ldr	r0, [r4, #36]	; 0x24
   176c0:	cmp	r0, #0
   176c4:	beq	176e0 <__assert_fail@plt+0x6628>
   176c8:	mov	r0, r4
   176cc:	mov	r2, r6
   176d0:	mov	r3, r5
   176d4:	sub	sp, fp, #16
   176d8:	pop	{r4, r5, r6, r7, fp, lr}
   176dc:	b	1104c <fseeko64@plt>
   176e0:	ldr	r7, [fp, #8]
   176e4:	mov	r0, r4
   176e8:	bl	1101c <fileno@plt>
   176ec:	mov	r2, r6
   176f0:	mov	r3, r5
   176f4:	str	r7, [sp]
   176f8:	bl	10f2c <lseek64@plt>
   176fc:	and	r2, r0, r1
   17700:	cmn	r2, #1
   17704:	mvneq	r0, #0
   17708:	subeq	sp, fp, #16
   1770c:	popeq	{r4, r5, r6, r7, fp, pc}
   17710:	strd	r0, [r4, #80]	; 0x50
   17714:	ldr	r0, [r4]
   17718:	bic	r0, r0, #16
   1771c:	str	r0, [r4]
   17720:	mov	r0, #0
   17724:	sub	sp, fp, #16
   17728:	pop	{r4, r5, r6, r7, fp, pc}
   1772c:	push	{fp, lr}
   17730:	mov	fp, sp
   17734:	mov	r0, #14
   17738:	bl	11070 <nl_langinfo@plt>
   1773c:	movw	r1, #33409	; 0x8281
   17740:	cmp	r0, #0
   17744:	movt	r1, #1
   17748:	movne	r1, r0
   1774c:	movw	r0, #35226	; 0x899a
   17750:	ldrb	r2, [r1]
   17754:	movt	r0, #1
   17758:	cmp	r2, #0
   1775c:	movne	r0, r1
   17760:	pop	{fp, pc}
   17764:	push	{r4, r5, r6, r7, fp, lr}
   17768:	add	fp, sp, #16
   1776c:	sub	sp, sp, #8
   17770:	add	r5, sp, #4
   17774:	cmp	r0, #0
   17778:	mov	r7, r2
   1777c:	mov	r4, r1
   17780:	movne	r5, r0
   17784:	mov	r0, r5
   17788:	bl	10f50 <mbrtowc@plt>
   1778c:	mov	r6, r0
   17790:	cmp	r7, #0
   17794:	beq	177b8 <__assert_fail@plt+0x6700>
   17798:	cmn	r6, #2
   1779c:	bcc	177b8 <__assert_fail@plt+0x6700>
   177a0:	mov	r0, #0
   177a4:	bl	17800 <__assert_fail@plt+0x6748>
   177a8:	cmp	r0, #0
   177ac:	ldrbeq	r0, [r4]
   177b0:	moveq	r6, #1
   177b4:	streq	r0, [r5]
   177b8:	mov	r0, r6
   177bc:	sub	sp, fp, #16
   177c0:	pop	{r4, r5, r6, r7, fp, pc}
   177c4:	cmp	r2, #0
   177c8:	beq	177f8 <__assert_fail@plt+0x6740>
   177cc:	mvn	r3, #0
   177d0:	udiv	r3, r3, r2
   177d4:	cmp	r3, r1
   177d8:	bcs	177f8 <__assert_fail@plt+0x6740>
   177dc:	push	{fp, lr}
   177e0:	mov	fp, sp
   177e4:	bl	10fec <__errno_location@plt>
   177e8:	mov	r1, #12
   177ec:	str	r1, [r0]
   177f0:	mov	r0, #0
   177f4:	pop	{fp, pc}
   177f8:	mul	r1, r2, r1
   177fc:	b	174ac <__assert_fail@plt+0x63f4>
   17800:	push	{r4, sl, fp, lr}
   17804:	add	fp, sp, #8
   17808:	sub	sp, sp, #264	; 0x108
   1780c:	add	r1, sp, #7
   17810:	movw	r2, #257	; 0x101
   17814:	bl	17864 <__assert_fail@plt+0x67ac>
   17818:	mov	r4, #0
   1781c:	cmp	r0, #0
   17820:	bne	17858 <__assert_fail@plt+0x67a0>
   17824:	movw	r1, #35232	; 0x89a0
   17828:	add	r0, sp, #7
   1782c:	movt	r1, #1
   17830:	bl	10e60 <strcmp@plt>
   17834:	cmp	r0, #0
   17838:	beq	17858 <__assert_fail@plt+0x67a0>
   1783c:	movw	r1, #35234	; 0x89a2
   17840:	add	r0, sp, #7
   17844:	movt	r1, #1
   17848:	bl	10e60 <strcmp@plt>
   1784c:	mov	r4, r0
   17850:	cmp	r0, #0
   17854:	movwne	r4, #1
   17858:	mov	r0, r4
   1785c:	sub	sp, fp, #8
   17860:	pop	{r4, sl, fp, pc}
   17864:	push	{r4, r5, r6, r7, fp, lr}
   17868:	add	fp, sp, #16
   1786c:	mov	r4, r1
   17870:	mov	r1, #0
   17874:	mov	r6, r2
   17878:	bl	11058 <setlocale@plt>
   1787c:	cmp	r0, #0
   17880:	beq	178b0 <__assert_fail@plt+0x67f8>
   17884:	mov	r7, r0
   17888:	bl	10fc8 <strlen@plt>
   1788c:	cmp	r0, r6
   17890:	bcs	178d0 <__assert_fail@plt+0x6818>
   17894:	add	r2, r0, #1
   17898:	mov	r0, r4
   1789c:	mov	r1, r7
   178a0:	bl	10e9c <memcpy@plt>
   178a4:	mov	r5, #0
   178a8:	mov	r0, r5
   178ac:	pop	{r4, r5, r6, r7, fp, pc}
   178b0:	cmp	r6, #0
   178b4:	mov	r5, #22
   178b8:	movne	r0, #0
   178bc:	strbne	r0, [r4]
   178c0:	movne	r0, r5
   178c4:	popne	{r4, r5, r6, r7, fp, pc}
   178c8:	mov	r0, r5
   178cc:	pop	{r4, r5, r6, r7, fp, pc}
   178d0:	mov	r5, #34	; 0x22
   178d4:	cmp	r6, #0
   178d8:	beq	178f8 <__assert_fail@plt+0x6840>
   178dc:	sub	r6, r6, #1
   178e0:	mov	r0, r4
   178e4:	mov	r1, r7
   178e8:	mov	r2, r6
   178ec:	bl	10e9c <memcpy@plt>
   178f0:	mov	r0, #0
   178f4:	strb	r0, [r4, r6]
   178f8:	mov	r0, r5
   178fc:	pop	{r4, r5, r6, r7, fp, pc}
   17900:	mov	r1, #0
   17904:	b	11058 <setlocale@plt>
   17908:	cmp	r3, #0
   1790c:	cmpeq	r2, #0
   17910:	bne	17934 <__assert_fail@plt+0x687c>
   17914:	cmp	r1, #0
   17918:	movlt	r1, #-2147483648	; 0x80000000
   1791c:	movlt	r0, #0
   17920:	blt	17930 <__assert_fail@plt+0x6878>
   17924:	cmpeq	r0, #0
   17928:	mvnne	r1, #-2147483648	; 0x80000000
   1792c:	mvnne	r0, #0
   17930:	b	17a18 <__assert_fail@plt+0x6960>
   17934:	sub	sp, sp, #8
   17938:	push	{sp, lr}
   1793c:	cmp	r1, #0
   17940:	blt	17960 <__assert_fail@plt+0x68a8>
   17944:	cmp	r3, #0
   17948:	blt	17994 <__assert_fail@plt+0x68dc>
   1794c:	bl	17a28 <__assert_fail@plt+0x6970>
   17950:	ldr	lr, [sp, #4]
   17954:	add	sp, sp, #8
   17958:	pop	{r2, r3}
   1795c:	bx	lr
   17960:	rsbs	r0, r0, #0
   17964:	sbc	r1, r1, r1, lsl #1
   17968:	cmp	r3, #0
   1796c:	blt	179b8 <__assert_fail@plt+0x6900>
   17970:	bl	17a28 <__assert_fail@plt+0x6970>
   17974:	ldr	lr, [sp, #4]
   17978:	add	sp, sp, #8
   1797c:	pop	{r2, r3}
   17980:	rsbs	r0, r0, #0
   17984:	sbc	r1, r1, r1, lsl #1
   17988:	rsbs	r2, r2, #0
   1798c:	sbc	r3, r3, r3, lsl #1
   17990:	bx	lr
   17994:	rsbs	r2, r2, #0
   17998:	sbc	r3, r3, r3, lsl #1
   1799c:	bl	17a28 <__assert_fail@plt+0x6970>
   179a0:	ldr	lr, [sp, #4]
   179a4:	add	sp, sp, #8
   179a8:	pop	{r2, r3}
   179ac:	rsbs	r0, r0, #0
   179b0:	sbc	r1, r1, r1, lsl #1
   179b4:	bx	lr
   179b8:	rsbs	r2, r2, #0
   179bc:	sbc	r3, r3, r3, lsl #1
   179c0:	bl	17a28 <__assert_fail@plt+0x6970>
   179c4:	ldr	lr, [sp, #4]
   179c8:	add	sp, sp, #8
   179cc:	pop	{r2, r3}
   179d0:	rsbs	r2, r2, #0
   179d4:	sbc	r3, r3, r3, lsl #1
   179d8:	bx	lr
   179dc:	cmp	r3, #0
   179e0:	cmpeq	r2, #0
   179e4:	bne	179fc <__assert_fail@plt+0x6944>
   179e8:	cmp	r1, #0
   179ec:	cmpeq	r0, #0
   179f0:	mvnne	r1, #0
   179f4:	mvnne	r0, #0
   179f8:	b	17a18 <__assert_fail@plt+0x6960>
   179fc:	sub	sp, sp, #8
   17a00:	push	{sp, lr}
   17a04:	bl	17a28 <__assert_fail@plt+0x6970>
   17a08:	ldr	lr, [sp, #4]
   17a0c:	add	sp, sp, #8
   17a10:	pop	{r2, r3}
   17a14:	bx	lr
   17a18:	push	{r1, lr}
   17a1c:	mov	r0, #8
   17a20:	bl	10e54 <raise@plt>
   17a24:	pop	{r1, pc}
   17a28:	cmp	r1, r3
   17a2c:	cmpeq	r0, r2
   17a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a34:	mov	r4, r0
   17a38:	movcc	r0, #0
   17a3c:	mov	r5, r1
   17a40:	ldr	lr, [sp, #36]	; 0x24
   17a44:	movcc	r1, r0
   17a48:	bcc	17b44 <__assert_fail@plt+0x6a8c>
   17a4c:	cmp	r3, #0
   17a50:	clzeq	ip, r2
   17a54:	clzne	ip, r3
   17a58:	addeq	ip, ip, #32
   17a5c:	cmp	r5, #0
   17a60:	clzeq	r1, r4
   17a64:	addeq	r1, r1, #32
   17a68:	clzne	r1, r5
   17a6c:	sub	ip, ip, r1
   17a70:	sub	sl, ip, #32
   17a74:	lsl	r9, r3, ip
   17a78:	rsb	fp, ip, #32
   17a7c:	orr	r9, r9, r2, lsl sl
   17a80:	orr	r9, r9, r2, lsr fp
   17a84:	lsl	r8, r2, ip
   17a88:	cmp	r5, r9
   17a8c:	cmpeq	r4, r8
   17a90:	movcc	r0, #0
   17a94:	movcc	r1, r0
   17a98:	bcc	17ab4 <__assert_fail@plt+0x69fc>
   17a9c:	mov	r0, #1
   17aa0:	subs	r4, r4, r8
   17aa4:	lsl	r1, r0, sl
   17aa8:	orr	r1, r1, r0, lsr fp
   17aac:	lsl	r0, r0, ip
   17ab0:	sbc	r5, r5, r9
   17ab4:	cmp	ip, #0
   17ab8:	beq	17b44 <__assert_fail@plt+0x6a8c>
   17abc:	lsr	r6, r8, #1
   17ac0:	orr	r6, r6, r9, lsl #31
   17ac4:	lsr	r7, r9, #1
   17ac8:	mov	r2, ip
   17acc:	b	17af0 <__assert_fail@plt+0x6a38>
   17ad0:	subs	r3, r4, r6
   17ad4:	sbc	r8, r5, r7
   17ad8:	adds	r3, r3, r3
   17adc:	adc	r8, r8, r8
   17ae0:	adds	r4, r3, #1
   17ae4:	adc	r5, r8, #0
   17ae8:	subs	r2, r2, #1
   17aec:	beq	17b0c <__assert_fail@plt+0x6a54>
   17af0:	cmp	r5, r7
   17af4:	cmpeq	r4, r6
   17af8:	bcs	17ad0 <__assert_fail@plt+0x6a18>
   17afc:	adds	r4, r4, r4
   17b00:	adc	r5, r5, r5
   17b04:	subs	r2, r2, #1
   17b08:	bne	17af0 <__assert_fail@plt+0x6a38>
   17b0c:	lsr	r3, r4, ip
   17b10:	orr	r3, r3, r5, lsl fp
   17b14:	lsr	r2, r5, ip
   17b18:	orr	r3, r3, r5, lsr sl
   17b1c:	adds	r0, r0, r4
   17b20:	mov	r4, r3
   17b24:	lsl	r3, r2, ip
   17b28:	orr	r3, r3, r4, lsl sl
   17b2c:	lsl	ip, r4, ip
   17b30:	orr	r3, r3, r4, lsr fp
   17b34:	adc	r1, r1, r5
   17b38:	subs	r0, r0, ip
   17b3c:	mov	r5, r2
   17b40:	sbc	r1, r1, r3
   17b44:	cmp	lr, #0
   17b48:	strdne	r4, [lr]
   17b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b54:	mov	r7, r0
   17b58:	ldr	r6, [pc, #72]	; 17ba8 <__assert_fail@plt+0x6af0>
   17b5c:	ldr	r5, [pc, #72]	; 17bac <__assert_fail@plt+0x6af4>
   17b60:	add	r6, pc, r6
   17b64:	add	r5, pc, r5
   17b68:	sub	r6, r6, r5
   17b6c:	mov	r8, r1
   17b70:	mov	r9, r2
   17b74:	bl	10e1c <calloc@plt-0x20>
   17b78:	asrs	r6, r6, #2
   17b7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b80:	mov	r4, #0
   17b84:	add	r4, r4, #1
   17b88:	ldr	r3, [r5], #4
   17b8c:	mov	r2, r9
   17b90:	mov	r1, r8
   17b94:	mov	r0, r7
   17b98:	blx	r3
   17b9c:	cmp	r6, r4
   17ba0:	bne	17b84 <__assert_fail@plt+0x6acc>
   17ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ba8:	andeq	r1, r1, r4, lsr #7
   17bac:	muleq	r1, ip, r3
   17bb0:	bx	lr
   17bb4:	ldr	r3, [pc, #12]	; 17bc8 <__assert_fail@plt+0x6b10>
   17bb8:	mov	r1, #0
   17bbc:	add	r3, pc, r3
   17bc0:	ldr	r2, [r3]
   17bc4:	b	10ff8 <__cxa_atexit@plt>
   17bc8:	andeq	r1, r1, r8, lsr #10

Disassembly of section .fini:

00017bcc <.fini>:
   17bcc:	push	{r3, lr}
   17bd0:	pop	{r3, pc}
