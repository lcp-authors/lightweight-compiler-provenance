
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

000111a4 <.init>:
   111a4:	push	{r3, lr}
   111a8:	bl	11534 <__assert_fail@plt+0x4c>
   111ac:	pop	{r3, pc}

Disassembly of section .plt:

000111b0 <fstatfs64@plt-0x14>:
   111b0:	push	{lr}		; (str lr, [sp, #-4]!)
   111b4:	ldr	lr, [pc, #4]	; 111c0 <fstatfs64@plt-0x4>
   111b8:	add	lr, pc, lr
   111bc:	ldr	pc, [lr, #8]!
   111c0:	andeq	fp, r1, r0, asr #28

000111c4 <fstatfs64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #110592	; 0x1b000
   111cc:	ldr	pc, [ip, #3648]!	; 0xe40

000111d0 <calloc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #110592	; 0x1b000
   111d8:	ldr	pc, [ip, #3640]!	; 0xe38

000111dc <fputs_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #110592	; 0x1b000
   111e4:	ldr	pc, [ip, #3632]!	; 0xe30

000111e8 <raise@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #110592	; 0x1b000
   111f0:	ldr	pc, [ip, #3624]!	; 0xe28

000111f4 <__getdelim@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #110592	; 0x1b000
   111fc:	ldr	pc, [ip, #3616]!	; 0xe20

00011200 <strcmp@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #110592	; 0x1b000
   11208:	ldr	pc, [ip, #3608]!	; 0xe18

0001120c <fflush@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #110592	; 0x1b000
   11214:	ldr	pc, [ip, #3600]!	; 0xe10

00011218 <unlinkat@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #110592	; 0x1b000
   11220:	ldr	pc, [ip, #3592]!	; 0xe08

00011224 <memmove@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #110592	; 0x1b000
   1122c:	ldr	pc, [ip, #3584]!	; 0xe00

00011230 <free@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #110592	; 0x1b000
   11238:	ldr	pc, [ip, #3576]!	; 0xdf8

0001123c <faccessat@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #110592	; 0x1b000
   11244:	ldr	pc, [ip, #3568]!	; 0xdf0

00011248 <_exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #110592	; 0x1b000
   11250:	ldr	pc, [ip, #3560]!	; 0xde8

00011254 <memcpy@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #110592	; 0x1b000
   1125c:	ldr	pc, [ip, #3552]!	; 0xde0

00011260 <mbsinit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #110592	; 0x1b000
   11268:	ldr	pc, [ip, #3544]!	; 0xdd8

0001126c <memcmp@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #110592	; 0x1b000
   11274:	ldr	pc, [ip, #3536]!	; 0xdd0

00011278 <dcgettext@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #110592	; 0x1b000
   11280:	ldr	pc, [ip, #3528]!	; 0xdc8

00011284 <realloc@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #110592	; 0x1b000
   1128c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011290 <textdomain@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #110592	; 0x1b000
   11298:	ldr	pc, [ip, #3512]!	; 0xdb8

0001129c <geteuid@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #110592	; 0x1b000
   112a4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112a8 <__fxstatat64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #110592	; 0x1b000
   112b0:	ldr	pc, [ip, #3496]!	; 0xda8

000112b4 <iswprint@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #110592	; 0x1b000
   112bc:	ldr	pc, [ip, #3488]!	; 0xda0

000112c0 <__fxstat64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #110592	; 0x1b000
   112c8:	ldr	pc, [ip, #3480]!	; 0xd98

000112cc <fwrite@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #110592	; 0x1b000
   112d4:	ldr	pc, [ip, #3472]!	; 0xd90

000112d8 <lseek64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #110592	; 0x1b000
   112e0:	ldr	pc, [ip, #3464]!	; 0xd88

000112e4 <__ctype_get_mb_cur_max@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #110592	; 0x1b000
   112ec:	ldr	pc, [ip, #3456]!	; 0xd80

000112f0 <__fpending@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #110592	; 0x1b000
   112f8:	ldr	pc, [ip, #3448]!	; 0xd78

000112fc <mbrtowc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #110592	; 0x1b000
   11304:	ldr	pc, [ip, #3440]!	; 0xd70

00011308 <error@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #110592	; 0x1b000
   11310:	ldr	pc, [ip, #3432]!	; 0xd68

00011314 <open64@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #110592	; 0x1b000
   1131c:	ldr	pc, [ip, #3424]!	; 0xd60

00011320 <malloc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #110592	; 0x1b000
   11328:	ldr	pc, [ip, #3416]!	; 0xd58

0001132c <__libc_start_main@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #110592	; 0x1b000
   11334:	ldr	pc, [ip, #3408]!	; 0xd50

00011338 <__freading@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #110592	; 0x1b000
   11340:	ldr	pc, [ip, #3400]!	; 0xd48

00011344 <__gmon_start__@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #110592	; 0x1b000
   1134c:	ldr	pc, [ip, #3392]!	; 0xd40

00011350 <getopt_long@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #110592	; 0x1b000
   11358:	ldr	pc, [ip, #3384]!	; 0xd38

0001135c <__ctype_b_loc@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #110592	; 0x1b000
   11364:	ldr	pc, [ip, #3376]!	; 0xd30

00011368 <exit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #110592	; 0x1b000
   11370:	ldr	pc, [ip, #3368]!	; 0xd28

00011374 <strlen@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #110592	; 0x1b000
   1137c:	ldr	pc, [ip, #3360]!	; 0xd20

00011380 <openat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #110592	; 0x1b000
   11388:	ldr	pc, [ip, #3352]!	; 0xd18

0001138c <__errno_location@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #110592	; 0x1b000
   11394:	ldr	pc, [ip, #3344]!	; 0xd10

00011398 <__cxa_atexit@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #110592	; 0x1b000
   113a0:	ldr	pc, [ip, #3336]!	; 0xd08

000113a4 <memset@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #110592	; 0x1b000
   113ac:	ldr	pc, [ip, #3328]!	; 0xd00

000113b0 <__printf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #110592	; 0x1b000
   113b8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113bc <fileno@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #110592	; 0x1b000
   113c4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113c8 <__fprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #110592	; 0x1b000
   113d0:	ldr	pc, [ip, #3304]!	; 0xce8

000113d4 <fclose@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #110592	; 0x1b000
   113dc:	ldr	pc, [ip, #3296]!	; 0xce0

000113e0 <fseeko64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #110592	; 0x1b000
   113e8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113ec <fcntl64@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #110592	; 0x1b000
   113f4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113f8 <rpmatch@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #110592	; 0x1b000
   11400:	ldr	pc, [ip, #3272]!	; 0xcc8

00011404 <__overflow@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #110592	; 0x1b000
   1140c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011410 <setlocale@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #110592	; 0x1b000
   11418:	ldr	pc, [ip, #3256]!	; 0xcb8

0001141c <strrchr@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #110592	; 0x1b000
   11424:	ldr	pc, [ip, #3248]!	; 0xcb0

00011428 <nl_langinfo@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #110592	; 0x1b000
   11430:	ldr	pc, [ip, #3240]!	; 0xca8

00011434 <readdir64@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #110592	; 0x1b000
   1143c:	ldr	pc, [ip, #3232]!	; 0xca0

00011440 <fdopendir@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #110592	; 0x1b000
   11448:	ldr	pc, [ip, #3224]!	; 0xc98

0001144c <dirfd@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #110592	; 0x1b000
   11454:	ldr	pc, [ip, #3216]!	; 0xc90

00011458 <fchdir@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #110592	; 0x1b000
   11460:	ldr	pc, [ip, #3208]!	; 0xc88

00011464 <qsort@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #110592	; 0x1b000
   1146c:	ldr	pc, [ip, #3200]!	; 0xc80

00011470 <bindtextdomain@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #110592	; 0x1b000
   11478:	ldr	pc, [ip, #3192]!	; 0xc78

0001147c <__xstat64@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #110592	; 0x1b000
   11484:	ldr	pc, [ip, #3184]!	; 0xc70

00011488 <isatty@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #3176]!	; 0xc68

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #3168]!	; 0xc60

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #3160]!	; 0xc58

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #3152]!	; 0xc50

000114b8 <__lxstat64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #3144]!	; 0xc48

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #3136]!	; 0xc40

000114d0 <closedir@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #3128]!	; 0xc38

000114dc <__mempcpy_chk@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #3120]!	; 0xc30

000114e8 <__assert_fail@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #3112]!	; 0xc28

Disassembly of section .text:

000114f8 <.text>:
   114f8:	mov	fp, #0
   114fc:	mov	lr, #0
   11500:	pop	{r1}		; (ldr r1, [sp], #4)
   11504:	mov	r2, sp
   11508:	push	{r2}		; (str r2, [sp, #-4]!)
   1150c:	push	{r0}		; (str r0, [sp, #-4]!)
   11510:	ldr	ip, [pc, #16]	; 11528 <__assert_fail@plt+0x40>
   11514:	push	{ip}		; (str ip, [sp, #-4]!)
   11518:	ldr	r0, [pc, #12]	; 1152c <__assert_fail@plt+0x44>
   1151c:	ldr	r3, [pc, #12]	; 11530 <__assert_fail@plt+0x48>
   11520:	bl	1132c <__libc_start_main@plt>
   11524:	bl	114a0 <abort@plt>
   11528:	andeq	sl, r1, r8, lsr #30
   1152c:	strdeq	r1, [r1], -ip
   11530:	andeq	sl, r1, r8, asr #29
   11534:	ldr	r3, [pc, #20]	; 11550 <__assert_fail@plt+0x68>
   11538:	ldr	r2, [pc, #20]	; 11554 <__assert_fail@plt+0x6c>
   1153c:	add	r3, pc, r3
   11540:	ldr	r2, [r3, r2]
   11544:	cmp	r2, #0
   11548:	bxeq	lr
   1154c:	b	11344 <__gmon_start__@plt>
   11550:			; <UNDEFINED> instruction: 0x0001babc
   11554:	andeq	r0, r0, ip, lsl r1
   11558:	ldr	r0, [pc, #24]	; 11578 <__assert_fail@plt+0x90>
   1155c:	ldr	r3, [pc, #24]	; 1157c <__assert_fail@plt+0x94>
   11560:	cmp	r3, r0
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0x98>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	sp, r2, r8, ror r1
   1157c:	andeq	sp, r2, r8, ror r1
   11580:	andeq	r0, r0, r0
   11584:	ldr	r0, [pc, #36]	; 115b0 <__assert_fail@plt+0xc8>
   11588:	ldr	r1, [pc, #36]	; 115b4 <__assert_fail@plt+0xcc>
   1158c:	sub	r1, r1, r0
   11590:	asr	r1, r1, #2
   11594:	add	r1, r1, r1, lsr #31
   11598:	asrs	r1, r1, #1
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0xd0>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	sp, r2, r8, ror r1
   115b4:	andeq	sp, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	push	{r4, lr}
   115c0:	ldr	r4, [pc, #24]	; 115e0 <__assert_fail@plt+0xf8>
   115c4:	ldrb	r3, [r4]
   115c8:	cmp	r3, #0
   115cc:	popne	{r4, pc}
   115d0:	bl	11558 <__assert_fail@plt+0x70>
   115d4:	mov	r3, #1
   115d8:	strb	r3, [r4]
   115dc:	pop	{r4, pc}
   115e0:	muleq	r2, ip, r1
   115e4:	b	11584 <__assert_fail@plt+0x9c>
   115e8:	push	{fp, lr}
   115ec:	mov	fp, sp
   115f0:	sub	sp, sp, #56	; 0x38
   115f4:	mov	r4, r0
   115f8:	cmp	r0, #0
   115fc:	bne	118b8 <__assert_fail@plt+0x3d0>
   11600:	movw	r1, #44923	; 0xaf7b
   11604:	mov	r0, #0
   11608:	mov	r2, #5
   1160c:	movt	r1, #1
   11610:	bl	11278 <dcgettext@plt>
   11614:	movw	r5, #53692	; 0xd1bc
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	movt	r5, #2
   11624:	ldr	r2, [r5]
   11628:	bl	113b0 <__printf_chk@plt>
   1162c:	movw	r1, #44956	; 0xaf9c
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11278 <dcgettext@plt>
   11640:	movw	r7, #53652	; 0xd194
   11644:	movt	r7, #2
   11648:	ldr	r1, [r7]
   1164c:	bl	111dc <fputs_unlocked@plt>
   11650:	movw	r1, #45116	; 0xb03c
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #1
   11660:	bl	11278 <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111dc <fputs_unlocked@plt>
   1166c:	movw	r1, #45492	; 0xb1b4
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #1
   1167c:	bl	11278 <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111dc <fputs_unlocked@plt>
   11688:	movw	r1, #45716	; 0xb294
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #1
   11698:	bl	11278 <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111dc <fputs_unlocked@plt>
   116a4:	movw	r1, #45970	; 0xb392
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #1
   116b4:	bl	11278 <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111dc <fputs_unlocked@plt>
   116c0:	movw	r1, #46145	; 0xb441
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #1
   116d0:	bl	11278 <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111dc <fputs_unlocked@plt>
   116dc:	movw	r1, #46190	; 0xb46e
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #1
   116ec:	bl	11278 <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111dc <fputs_unlocked@plt>
   116f8:	movw	r1, #46244	; 0xb4a4
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	11278 <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111dc <fputs_unlocked@plt>
   11714:	movw	r1, #46399	; 0xb53f
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	11278 <dcgettext@plt>
   11728:	ldr	r2, [r5]
   1172c:	mov	r1, r0
   11730:	mov	r0, #1
   11734:	mov	r3, r2
   11738:	bl	113b0 <__printf_chk@plt>
   1173c:	movw	r1, #46521	; 0xb5b9
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	11278 <dcgettext@plt>
   11750:	ldr	r1, [r7]
   11754:	bl	111dc <fputs_unlocked@plt>
   11758:	movw	r0, #47928	; 0xbb38
   1175c:	mov	r2, #48	; 0x30
   11760:	mov	r6, sp
   11764:	movw	r5, #46750	; 0xb69e
   11768:	movt	r0, #1
   1176c:	movt	r5, #1
   11770:	add	r1, r0, #32
   11774:	add	r3, r0, #16
   11778:	vld1.64	{d18-d19}, [r0], r2
   1177c:	vld1.64	{d16-d17}, [r1]
   11780:	vld1.64	{d20-d21}, [r3]
   11784:	add	r1, r6, #32
   11788:	vldr	d22, [r0]
   1178c:	add	r0, r6, #16
   11790:	vst1.64	{d16-d17}, [r1]
   11794:	movw	r1, #47226	; 0xb87a
   11798:	vst1.64	{d20-d21}, [r0]
   1179c:	mov	r0, r6
   117a0:	vst1.64	{d18-d19}, [r0], r2
   117a4:	movt	r1, #1
   117a8:	vstr	d22, [r0]
   117ac:	mov	r0, r5
   117b0:	bl	11200 <strcmp@plt>
   117b4:	cmp	r0, #0
   117b8:	ldrne	r1, [r6, #8]!
   117bc:	cmpne	r1, #0
   117c0:	bne	117ac <__assert_fail@plt+0x2c4>
   117c4:	ldr	r6, [r6, #4]
   117c8:	movw	r1, #47321	; 0xb8d9
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11278 <dcgettext@plt>
   117dc:	movw	r2, #46917	; 0xb745
   117e0:	movw	r3, #47344	; 0xb8f0
   117e4:	mov	r1, r0
   117e8:	mov	r0, #1
   117ec:	movt	r2, #1
   117f0:	movt	r3, #1
   117f4:	bl	113b0 <__printf_chk@plt>
   117f8:	cmp	r6, #0
   117fc:	mov	r0, #5
   11800:	mov	r1, #0
   11804:	moveq	r6, r5
   11808:	bl	11410 <setlocale@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11848 <__assert_fail@plt+0x360>
   11814:	movw	r1, #47384	; 0xb918
   11818:	mov	r2, #3
   1181c:	movt	r1, #1
   11820:	bl	11494 <strncmp@plt>
   11824:	cmp	r0, #0
   11828:	beq	11848 <__assert_fail@plt+0x360>
   1182c:	movw	r1, #47388	; 0xb91c
   11830:	mov	r0, #0
   11834:	mov	r2, #5
   11838:	movt	r1, #1
   1183c:	bl	11278 <dcgettext@plt>
   11840:	ldr	r1, [r7]
   11844:	bl	111dc <fputs_unlocked@plt>
   11848:	movw	r1, #47459	; 0xb963
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	11278 <dcgettext@plt>
   1185c:	movw	r2, #47344	; 0xb8f0
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	mov	r3, r5
   1186c:	movt	r2, #1
   11870:	bl	113b0 <__printf_chk@plt>
   11874:	movw	r1, #47486	; 0xb97e
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	11278 <dcgettext@plt>
   11888:	movw	r3, #47536	; 0xb9b0
   1188c:	mov	r1, r0
   11890:	movw	r0, #47254	; 0xb896
   11894:	cmp	r6, r5
   11898:	mov	r2, r6
   1189c:	movt	r0, #1
   118a0:	movt	r3, #1
   118a4:	moveq	r3, r0
   118a8:	mov	r0, #1
   118ac:	bl	113b0 <__printf_chk@plt>
   118b0:	mov	r0, r4
   118b4:	bl	11368 <exit@plt>
   118b8:	movw	r0, #53640	; 0xd188
   118bc:	movw	r1, #44884	; 0xaf54
   118c0:	mov	r2, #5
   118c4:	movt	r0, #2
   118c8:	movt	r1, #1
   118cc:	ldr	r5, [r0]
   118d0:	mov	r0, #0
   118d4:	bl	11278 <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	movw	r0, #53692	; 0xd1bc
   118e0:	mov	r1, #1
   118e4:	movt	r0, #2
   118e8:	ldr	r3, [r0]
   118ec:	mov	r0, r5
   118f0:	bl	113c8 <__fprintf_chk@plt>
   118f4:	mov	r0, r4
   118f8:	bl	11368 <exit@plt>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #52	; 0x34
   11908:	mov	r5, r0
   1190c:	ldr	r0, [r1]
   11910:	mov	r4, r1
   11914:	bl	1787c <__assert_fail@plt+0x6394>
   11918:	movw	r1, #47536	; 0xb9b0
   1191c:	mov	r0, #6
   11920:	movt	r1, #1
   11924:	bl	11410 <setlocale@plt>
   11928:	movw	r6, #46921	; 0xb749
   1192c:	movw	r1, #46753	; 0xb6a1
   11930:	movt	r6, #1
   11934:	movt	r1, #1
   11938:	mov	r0, r6
   1193c:	bl	11470 <bindtextdomain@plt>
   11940:	mov	r0, r6
   11944:	bl	11290 <textdomain@plt>
   11948:	movw	r0, #13856	; 0x3620
   1194c:	movt	r0, #1
   11950:	bl	1af2c <__assert_fail@plt+0x9a44>
   11954:	mov	r8, #0
   11958:	mov	r0, #4
   1195c:	strb	r8, [sp, #32]
   11960:	str	r0, [sp, #36]	; 0x24
   11964:	mov	r0, #0
   11968:	strb	r8, [sp, #42]	; 0x2a
   1196c:	strh	r8, [sp, #40]	; 0x28
   11970:	str	r8, [sp, #44]	; 0x2c
   11974:	strb	r8, [sp, #48]	; 0x30
   11978:	bl	11488 <isatty@plt>
   1197c:	cmp	r0, #0
   11980:	strh	r8, [sp, #50]	; 0x32
   11984:	movw	r6, #46777	; 0xb6b9
   11988:	movw	r3, #47680	; 0xba40
   1198c:	mov	sl, #0
   11990:	movwne	r0, #1
   11994:	movt	r6, #1
   11998:	movt	r3, #1
   1199c:	strb	r0, [sp, #49]	; 0x31
   119a0:	mov	r0, #0
   119a4:	str	r0, [sp, #24]
   119a8:	mov	r0, #0
   119ac:	str	r0, [sp, #28]
   119b0:	mov	r0, #1
   119b4:	str	r0, [sp, #20]
   119b8:	b	119c8 <__assert_fail@plt+0x4e0>
   119bc:	str	r0, [sp, #36]	; 0x24
   119c0:	mov	r0, #0
   119c4:	str	r0, [sp, #28]
   119c8:	mov	r0, r5
   119cc:	mov	r1, r4
   119d0:	mov	r2, r6
   119d4:	str	r8, [sp]
   119d8:	mov	r9, r3
   119dc:	bl	11350 <getopt_long@plt>
   119e0:	cmp	r0, #72	; 0x48
   119e4:	ble	11c78 <__assert_fail@plt+0x790>
   119e8:	sub	r1, r0, #73	; 0x49
   119ec:	mov	r7, r6
   119f0:	cmp	r1, #45	; 0x2d
   119f4:	bhi	11ad4 <__assert_fail@plt+0x5ec>
   119f8:	add	r0, pc, #8
   119fc:	mov	r6, r7
   11a00:	mov	r3, r9
   11a04:	ldr	pc, [r0, r1, lsl #2]
   11a08:	muleq	r1, r4, fp
   11a0c:	andeq	r1, r1, r4, ror #29
   11a10:	andeq	r1, r1, r4, ror #29
   11a14:	andeq	r1, r1, r4, ror #29
   11a18:	andeq	r1, r1, r4, ror #29
   11a1c:	andeq	r1, r1, r4, ror #29
   11a20:	andeq	r1, r1, r4, ror #29
   11a24:	andeq	r1, r1, r4, ror #29
   11a28:	andeq	r1, r1, r4, ror #29
   11a2c:	andeq	r1, r1, r0, asr #21
   11a30:	andeq	r1, r1, r4, ror #29
   11a34:	andeq	r1, r1, r4, ror #29
   11a38:	andeq	r1, r1, r4, ror #29
   11a3c:	andeq	r1, r1, r4, ror #29
   11a40:	andeq	r1, r1, r4, ror #29
   11a44:	andeq	r1, r1, r4, ror #29
   11a48:	andeq	r1, r1, r4, ror #29
   11a4c:	andeq	r1, r1, r4, ror #29
   11a50:	andeq	r1, r1, r4, ror #29
   11a54:	andeq	r1, r1, r4, ror #29
   11a58:	andeq	r1, r1, r4, ror #29
   11a5c:	andeq	r1, r1, r4, ror #29
   11a60:	andeq	r1, r1, r4, ror #29
   11a64:	andeq	r1, r1, r4, ror #29
   11a68:	andeq	r1, r1, r4, ror #29
   11a6c:	andeq	r1, r1, r4, ror #29
   11a70:	andeq	r1, r1, r4, ror #29
   11a74:	andeq	r1, r1, ip, asr #23
   11a78:	andeq	r1, r1, r4, ror #29
   11a7c:			; <UNDEFINED> instruction: 0x00011bbc
   11a80:	andeq	r1, r1, r4, ror #29
   11a84:	andeq	r1, r1, r4, ror #29
   11a88:	andeq	r1, r1, r4, lsl #23
   11a8c:	andeq	r1, r1, r4, ror #29
   11a90:	andeq	r1, r1, r4, ror #29
   11a94:	andeq	r1, r1, r4, ror #29
   11a98:	andeq	r1, r1, r4, ror #29
   11a9c:	andeq	r1, r1, r4, ror #29
   11aa0:	andeq	r1, r1, r4, ror #29
   11aa4:	andeq	r1, r1, r4, ror #29
   11aa8:	andeq	r1, r1, r4, ror #29
   11aac:	andeq	r1, r1, r0, asr #21
   11ab0:	andeq	r1, r1, r4, ror #29
   11ab4:	andeq	r1, r1, r4, ror #29
   11ab8:	andeq	r1, r1, r4, ror #29
   11abc:	ldrdeq	r1, [r1], -r8
   11ac0:	mov	r1, #1
   11ac4:	mov	r0, #1
   11ac8:	str	r0, [sp, #24]
   11acc:	strb	r1, [sp, #41]	; 0x29
   11ad0:	b	119c8 <__assert_fail@plt+0x4e0>
   11ad4:	sub	r0, r0, #256	; 0x100
   11ad8:	cmp	r0, #4
   11adc:	bhi	11ee4 <__assert_fail@plt+0x9fc>
   11ae0:	add	r1, pc, #8
   11ae4:	mov	r6, r7
   11ae8:	mov	r3, r9
   11aec:	ldr	pc, [r1, r0, lsl #2]
   11af0:	andeq	r1, r1, r4, lsl #22
   11af4:	andeq	r1, r1, ip, ror #24
   11af8:	andeq	r1, r1, r4, ror #23
   11afc:	andeq	r1, r1, r0, lsr #24
   11b00:			; <UNDEFINED> instruction: 0x00011bb0
   11b04:	movw	r0, #53656	; 0xd198
   11b08:	movt	r0, #2
   11b0c:	ldr	r1, [r0]
   11b10:	cmp	r1, #0
   11b14:	beq	11b84 <__assert_fail@plt+0x69c>
   11b18:	movw	r0, #53548	; 0xd12c
   11b1c:	mov	r2, #4
   11b20:	movw	r3, #47872	; 0xbb00
   11b24:	movt	r0, #2
   11b28:	str	r2, [sp]
   11b2c:	movw	r2, #47896	; 0xbb18
   11b30:	movt	r3, #1
   11b34:	ldr	r0, [r0]
   11b38:	movt	r2, #1
   11b3c:	str	r0, [sp, #4]
   11b40:	mov	r0, #1
   11b44:	str	r0, [sp, #8]
   11b48:	movw	r0, #46785	; 0xb6c1
   11b4c:	movt	r0, #1
   11b50:	bl	133c4 <__assert_fail@plt+0x1edc>
   11b54:	movw	r1, #47872	; 0xbb00
   11b58:	mov	r3, r9
   11b5c:	mov	r6, r7
   11b60:	movt	r1, #1
   11b64:	ldr	r0, [r1, r0, lsl #2]
   11b68:	cmp	r0, #2
   11b6c:	beq	11b84 <__assert_fail@plt+0x69c>
   11b70:	cmp	r0, #1
   11b74:	beq	11b94 <__assert_fail@plt+0x6ac>
   11b78:	cmp	r0, #0
   11b7c:	bne	119c8 <__assert_fail@plt+0x4e0>
   11b80:	b	11bc4 <__assert_fail@plt+0x6dc>
   11b84:	mov	sl, #0
   11b88:	mov	r0, #3
   11b8c:	strb	sl, [sp, #32]
   11b90:	b	119bc <__assert_fail@plt+0x4d4>
   11b94:	mov	sl, #0
   11b98:	mov	r0, #4
   11b9c:	strb	sl, [sp, #32]
   11ba0:	str	r0, [sp, #36]	; 0x24
   11ba4:	mov	r0, #1
   11ba8:	str	r0, [sp, #28]
   11bac:	b	119c8 <__assert_fail@plt+0x4e0>
   11bb0:	mov	r0, #1
   11bb4:	strb	r0, [sp, #49]	; 0x31
   11bb8:	b	119c8 <__assert_fail@plt+0x4e0>
   11bbc:	mov	sl, #1
   11bc0:	strb	sl, [sp, #32]
   11bc4:	mov	r0, #5
   11bc8:	b	119bc <__assert_fail@plt+0x4d4>
   11bcc:	mov	r0, #1
   11bd0:	strb	r0, [sp, #42]	; 0x2a
   11bd4:	b	119c8 <__assert_fail@plt+0x4e0>
   11bd8:	mov	r0, #1
   11bdc:	strb	r0, [sp, #50]	; 0x32
   11be0:	b	119c8 <__assert_fail@plt+0x4e0>
   11be4:	movw	r0, #53632	; 0xd180
   11be8:	movw	r1, #46799	; 0xb6cf
   11bec:	movt	r0, #2
   11bf0:	movt	r1, #1
   11bf4:	ldr	r0, [r0]
   11bf8:	add	r0, r4, r0, lsl #2
   11bfc:	ldr	r0, [r0, #-4]
   11c00:	bl	11200 <strcmp@plt>
   11c04:	mov	r1, #0
   11c08:	mov	r3, r9
   11c0c:	mov	r6, r7
   11c10:	cmp	r0, #0
   11c14:	str	r1, [sp, #20]
   11c18:	beq	119c8 <__assert_fail@plt+0x4e0>
   11c1c:	b	11e80 <__assert_fail@plt+0x998>
   11c20:	movw	r0, #53656	; 0xd198
   11c24:	mov	r1, #1
   11c28:	movt	r0, #2
   11c2c:	str	r1, [sp, #20]
   11c30:	ldr	r0, [r0]
   11c34:	cmp	r0, #0
   11c38:	beq	119c8 <__assert_fail@plt+0x4e0>
   11c3c:	movw	r1, #46871	; 0xb717
   11c40:	movt	r1, #1
   11c44:	bl	11200 <strcmp@plt>
   11c48:	cmp	r0, #0
   11c4c:	bne	11ea4 <__assert_fail@plt+0x9bc>
   11c50:	mov	r1, #1
   11c54:	mov	r0, #1
   11c58:	mov	r6, r7
   11c5c:	mov	r3, r9
   11c60:	str	r0, [sp, #20]
   11c64:	strb	r1, [sp, #48]	; 0x30
   11c68:	b	119c8 <__assert_fail@plt+0x4e0>
   11c6c:	mov	r0, #1
   11c70:	strb	r0, [sp, #40]	; 0x28
   11c74:	b	119c8 <__assert_fail@plt+0x4e0>
   11c78:	cmn	r0, #1
   11c7c:	bne	11e04 <__assert_fail@plt+0x91c>
   11c80:	movw	r8, #53632	; 0xd180
   11c84:	movt	r8, #2
   11c88:	ldr	r6, [r8]
   11c8c:	cmp	r6, r5
   11c90:	bge	11d48 <__assert_fail@plt+0x860>
   11c94:	ldr	r7, [sp, #24]
   11c98:	tst	r7, #255	; 0xff
   11c9c:	beq	11ccc <__assert_fail@plt+0x7e4>
   11ca0:	ldr	r0, [sp, #20]
   11ca4:	eor	r0, r0, #1
   11ca8:	tst	r0, #1
   11cac:	bne	11ccc <__assert_fail@plt+0x7e4>
   11cb0:	movw	r0, #53664	; 0xd1a0
   11cb4:	movt	r0, #2
   11cb8:	bl	19810 <__assert_fail@plt+0x8328>
   11cbc:	cmp	r0, #0
   11cc0:	str	r0, [sp, #44]	; 0x2c
   11cc4:	beq	11f18 <__assert_fail@plt+0xa30>
   11cc8:	ldr	r6, [r8]
   11ccc:	ldr	r0, [sp, #28]
   11cd0:	tst	r0, #1
   11cd4:	beq	11dd4 <__assert_fail@plt+0x8ec>
   11cd8:	sub	r5, r5, r6
   11cdc:	cmp	r5, #3
   11ce0:	bhi	11cec <__assert_fail@plt+0x804>
   11ce4:	tst	r7, #255	; 0xff
   11ce8:	beq	11dd4 <__assert_fail@plt+0x8ec>
   11cec:	movw	r0, #53640	; 0xd188
   11cf0:	cmn	r5, #1
   11cf4:	mov	r3, r5
   11cf8:	movt	r0, #2
   11cfc:	ldr	r9, [r0]
   11d00:	bgt	11d24 <__assert_fail@plt+0x83c>
   11d04:	movw	r8, #16960	; 0x4240
   11d08:	asr	r1, r5, #31
   11d0c:	mov	r0, r5
   11d10:	mov	r3, #0
   11d14:	movt	r8, #15
   11d18:	mov	r2, r8
   11d1c:	bl	1ad54 <__assert_fail@plt+0x986c>
   11d20:	add	r3, r2, r8
   11d24:	mov	r0, #5
   11d28:	tst	r7, #255	; 0xff
   11d2c:	beq	11d80 <__assert_fail@plt+0x898>
   11d30:	movw	r1, #47038	; 0xb7be
   11d34:	movw	r2, #47077	; 0xb7e5
   11d38:	str	r0, [sp]
   11d3c:	movt	r1, #1
   11d40:	movt	r2, #1
   11d44:	b	11d94 <__assert_fail@plt+0x8ac>
   11d48:	mov	r5, #0
   11d4c:	tst	sl, #255	; 0xff
   11d50:	bne	11df8 <__assert_fail@plt+0x910>
   11d54:	movw	r1, #46991	; 0xb78f
   11d58:	mov	r0, #0
   11d5c:	mov	r2, #5
   11d60:	movt	r1, #1
   11d64:	bl	11278 <dcgettext@plt>
   11d68:	mov	r2, r0
   11d6c:	mov	r0, #0
   11d70:	mov	r1, #0
   11d74:	bl	11308 <error@plt>
   11d78:	mov	r0, #1
   11d7c:	bl	115e8 <__assert_fail@plt+0x100>
   11d80:	movw	r1, #47117	; 0xb80d
   11d84:	movw	r2, #47144	; 0xb828
   11d88:	str	r0, [sp]
   11d8c:	movt	r1, #1
   11d90:	movt	r2, #1
   11d94:	mov	r0, #0
   11d98:	bl	114c4 <dcngettext@plt>
   11d9c:	mov	r2, r0
   11da0:	movw	r0, #53692	; 0xd1bc
   11da4:	mov	r1, #1
   11da8:	str	r5, [sp]
   11dac:	movt	r0, #2
   11db0:	ldr	r3, [r0]
   11db4:	asr	r0, r5, #31
   11db8:	str	r0, [sp, #4]
   11dbc:	mov	r0, r9
   11dc0:	bl	113c8 <__fprintf_chk@plt>
   11dc4:	mov	r5, #0
   11dc8:	bl	1a5dc <__assert_fail@plt+0x90f4>
   11dcc:	cmp	r0, #0
   11dd0:	beq	11df8 <__assert_fail@plt+0x910>
   11dd4:	add	r0, r4, r6, lsl #2
   11dd8:	add	r1, sp, #32
   11ddc:	bl	12034 <__assert_fail@plt+0xb4c>
   11de0:	sub	r1, r0, #2
   11de4:	cmp	r1, #3
   11de8:	bcs	11ef8 <__assert_fail@plt+0xa10>
   11dec:	sub	r0, r0, #4
   11df0:	clz	r0, r0
   11df4:	lsr	r5, r0, #5
   11df8:	mov	r0, r5
   11dfc:	sub	sp, fp, #28
   11e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e04:	cmn	r0, #3
   11e08:	bne	11e70 <__assert_fail@plt+0x988>
   11e0c:	movw	r0, #53544	; 0xd128
   11e10:	movw	r2, #46978	; 0xb782
   11e14:	movw	r7, #46958	; 0xb76e
   11e18:	movw	r6, #46942	; 0xb75e
   11e1c:	movw	r5, #46931	; 0xb753
   11e20:	mov	r1, #0
   11e24:	movt	r0, #2
   11e28:	movt	r2, #1
   11e2c:	movt	r7, #1
   11e30:	movt	r6, #1
   11e34:	movt	r5, #1
   11e38:	ldr	r3, [r0]
   11e3c:	movw	r0, #53652	; 0xd194
   11e40:	movt	r0, #2
   11e44:	ldr	r0, [r0]
   11e48:	stm	sp, {r5, r6, r7}
   11e4c:	str	r2, [sp, #12]
   11e50:	movw	r2, #46917	; 0xb745
   11e54:	str	r1, [sp, #16]
   11e58:	movw	r1, #46750	; 0xb69e
   11e5c:	movt	r1, #1
   11e60:	movt	r2, #1
   11e64:	bl	19d38 <__assert_fail@plt+0x8850>
   11e68:	mov	r0, #0
   11e6c:	bl	11368 <exit@plt>
   11e70:	cmn	r0, #2
   11e74:	bne	11ee4 <__assert_fail@plt+0x9fc>
   11e78:	mov	r0, #0
   11e7c:	bl	115e8 <__assert_fail@plt+0x100>
   11e80:	movw	r1, #46818	; 0xb6e2
   11e84:	mov	r0, #0
   11e88:	mov	r2, #5
   11e8c:	movt	r1, #1
   11e90:	bl	11278 <dcgettext@plt>
   11e94:	mov	r2, r0
   11e98:	mov	r0, #1
   11e9c:	mov	r1, #0
   11ea0:	bl	11308 <error@plt>
   11ea4:	movw	r1, #46875	; 0xb71b
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	movt	r1, #1
   11eb4:	bl	11278 <dcgettext@plt>
   11eb8:	mov	r4, r0
   11ebc:	movw	r0, #53656	; 0xd198
   11ec0:	movt	r0, #2
   11ec4:	ldr	r1, [r0]
   11ec8:	mov	r0, #4
   11ecc:	bl	192d0 <__assert_fail@plt+0x7de8>
   11ed0:	mov	r3, r0
   11ed4:	mov	r0, #1
   11ed8:	mov	r1, #0
   11edc:	mov	r2, r4
   11ee0:	bl	11308 <error@plt>
   11ee4:	mov	r0, r5
   11ee8:	mov	r1, r4
   11eec:	bl	11f5c <__assert_fail@plt+0xa74>
   11ef0:	mov	r0, #1
   11ef4:	bl	115e8 <__assert_fail@plt+0x100>
   11ef8:	movw	r0, #47172	; 0xb844
   11efc:	movw	r1, #47194	; 0xb85a
   11f00:	movw	r3, #47203	; 0xb863
   11f04:	movw	r2, #371	; 0x173
   11f08:	movt	r0, #1
   11f0c:	movt	r1, #1
   11f10:	movt	r3, #1
   11f14:	bl	114e8 <__assert_fail@plt>
   11f18:	bl	1138c <__errno_location@plt>
   11f1c:	ldr	r4, [r0]
   11f20:	movw	r1, #47007	; 0xb79f
   11f24:	mov	r0, #0
   11f28:	mov	r2, #5
   11f2c:	movt	r1, #1
   11f30:	bl	11278 <dcgettext@plt>
   11f34:	movw	r1, #50313	; 0xc489
   11f38:	mov	r5, r0
   11f3c:	mov	r0, #4
   11f40:	movt	r1, #1
   11f44:	bl	192d0 <__assert_fail@plt+0x7de8>
   11f48:	mov	r3, r0
   11f4c:	mov	r0, #1
   11f50:	mov	r1, r4
   11f54:	mov	r2, r5
   11f58:	bl	11308 <error@plt>
   11f5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f60:	add	fp, sp, #24
   11f64:	sub	sp, sp, #112	; 0x70
   11f68:	cmp	r0, #2
   11f6c:	blt	11fc0 <__assert_fail@plt+0xad8>
   11f70:	mov	r4, r1
   11f74:	mov	r6, r0
   11f78:	mov	r7, #1
   11f7c:	add	r8, sp, #8
   11f80:	ldr	r5, [r4, r7, lsl #2]
   11f84:	ldrb	r0, [r5]
   11f88:	cmp	r0, #45	; 0x2d
   11f8c:	bne	11fb4 <__assert_fail@plt+0xacc>
   11f90:	ldrb	r0, [r5, #1]
   11f94:	cmp	r0, #0
   11f98:	beq	11fb4 <__assert_fail@plt+0xacc>
   11f9c:	mov	r0, #3
   11fa0:	mov	r1, r5
   11fa4:	mov	r2, r8
   11fa8:	bl	114b8 <__lxstat64@plt>
   11fac:	cmp	r0, #0
   11fb0:	beq	11fc8 <__assert_fail@plt+0xae0>
   11fb4:	add	r7, r7, #1
   11fb8:	cmp	r7, r6
   11fbc:	blt	11f80 <__assert_fail@plt+0xa98>
   11fc0:	sub	sp, fp, #24
   11fc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11fc8:	movw	r0, #53640	; 0xd188
   11fcc:	movw	r1, #47636	; 0xba14
   11fd0:	mov	r2, #5
   11fd4:	movt	r0, #2
   11fd8:	movt	r1, #1
   11fdc:	ldr	r8, [r0]
   11fe0:	mov	r0, #0
   11fe4:	bl	11278 <dcgettext@plt>
   11fe8:	ldr	r4, [r4]
   11fec:	mov	r7, r0
   11ff0:	mov	r0, #1
   11ff4:	mov	r1, #3
   11ff8:	mov	r2, r5
   11ffc:	bl	19228 <__assert_fail@plt+0x7d40>
   12000:	mov	r6, r0
   12004:	mov	r0, #4
   12008:	mov	r1, r5
   1200c:	bl	192d0 <__assert_fail@plt+0x7de8>
   12010:	str	r0, [sp, #4]
   12014:	mov	r0, r8
   12018:	mov	r1, #1
   1201c:	mov	r2, r7
   12020:	mov	r3, r4
   12024:	str	r6, [sp]
   12028:	bl	113c8 <__fprintf_chk@plt>
   1202c:	sub	sp, fp, #24
   12030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12038:	add	fp, sp, #28
   1203c:	sub	sp, sp, #124	; 0x7c
   12040:	mov	sl, r1
   12044:	ldr	r1, [r0]
   12048:	cmp	r1, #0
   1204c:	beq	12758 <__assert_fail@plt+0x1270>
   12050:	ldrb	r2, [sl, #8]
   12054:	mov	r1, #600	; 0x258
   12058:	mov	r9, #0
   1205c:	cmp	r2, #0
   12060:	mov	r2, #0
   12064:	movweq	r1, #536	; 0x218
   12068:	bl	1a560 <__assert_fail@plt+0x9078>
   1206c:	mov	r4, r0
   12070:	bl	14640 <__assert_fail@plt+0x3158>
   12074:	cmp	r0, #0
   12078:	beq	12768 <__assert_fail@plt+0x1280>
   1207c:	mov	r8, r0
   12080:	add	r0, r4, #16
   12084:	mov	r7, #2
   12088:	str	r0, [sp, #12]
   1208c:	b	1256c <__assert_fail@plt+0x1084>
   12090:	ldrb	r0, [sl, #8]
   12094:	cmp	r0, #0
   12098:	beq	125b8 <__assert_fail@plt+0x10d0>
   1209c:	ldr	r0, [r8, #48]	; 0x30
   120a0:	cmp	r0, #1
   120a4:	blt	125b8 <__assert_fail@plt+0x10d0>
   120a8:	ldr	r0, [sp, #12]
   120ac:	ldm	r0, {r0, r3}
   120b0:	ldr	r2, [r8, #64]	; 0x40
   120b4:	ldr	r5, [r8, #68]	; 0x44
   120b8:	eor	r3, r5, r3
   120bc:	eor	r0, r2, r0
   120c0:	orrs	r0, r0, r3
   120c4:	beq	125b8 <__assert_fail@plt+0x10d0>
   120c8:	ldr	r0, [r8, #4]
   120cc:	mov	r2, #1
   120d0:	ldr	r1, [r0, #48]	; 0x30
   120d4:	cmp	r1, #0
   120d8:	blt	120fc <__assert_fail@plt+0xc14>
   120dc:	ldr	r1, [r0, #16]
   120e0:	cmp	r1, #0
   120e4:	bne	120fc <__assert_fail@plt+0xc14>
   120e8:	str	r2, [r0, #16]
   120ec:	ldr	r0, [r0, #4]
   120f0:	ldr	r1, [r0, #48]	; 0x30
   120f4:	cmn	r1, #1
   120f8:	bgt	120dc <__assert_fail@plt+0xbf4>
   120fc:	movw	r1, #48361	; 0xbce9
   12100:	mov	r0, #0
   12104:	mov	r2, #5
   12108:	movt	r1, #1
   1210c:	bl	11278 <dcgettext@plt>
   12110:	ldr	r1, [r8, #28]
   12114:	mov	r5, r0
   12118:	mov	r0, #4
   1211c:	mov	r6, #4
   12120:	bl	192d0 <__assert_fail@plt+0x7de8>
   12124:	mov	r3, r0
   12128:	mov	r0, #0
   1212c:	mov	r1, #0
   12130:	mov	r2, r5
   12134:	bl	11308 <error@plt>
   12138:	b	1273c <__assert_fail@plt+0x1254>
   1213c:	ldrb	r0, [sl, #10]
   12140:	cmp	r0, #0
   12144:	beq	12428 <__assert_fail@plt+0xf40>
   12148:	ldr	r1, [r8, #24]
   1214c:	ldr	r0, [r4, #32]
   12150:	bl	12860 <__assert_fail@plt+0x1378>
   12154:	cmp	r0, #0
   12158:	bne	12638 <__assert_fail@plt+0x1150>
   1215c:	ldrb	r0, [sl, #10]
   12160:	mov	r6, #39	; 0x27
   12164:	cmp	r0, #0
   12168:	movweq	r6, #21
   1216c:	b	1242c <__assert_fail@plt+0xf44>
   12170:	ldr	r6, [r8, #24]
   12174:	mov	r0, r6
   12178:	bl	13578 <__assert_fail@plt+0x2090>
   1217c:	ldrb	r1, [r0]
   12180:	cmp	r1, #46	; 0x2e
   12184:	bne	12228 <__assert_fail@plt+0xd40>
   12188:	ldrb	r1, [r0, #1]
   1218c:	cmp	r1, #46	; 0x2e
   12190:	mov	r1, #1
   12194:	movweq	r1, #2
   12198:	ldrb	r0, [r0, r1]
   1219c:	cmp	r0, #47	; 0x2f
   121a0:	cmpne	r0, #0
   121a4:	bne	12228 <__assert_fail@plt+0xd40>
   121a8:	movw	r1, #48124	; 0xbbfc
   121ac:	mov	r0, #0
   121b0:	mov	r2, #5
   121b4:	movt	r1, #1
   121b8:	bl	11278 <dcgettext@plt>
   121bc:	movw	r2, #48176	; 0xbc30
   121c0:	mov	r9, r0
   121c4:	mov	r0, #0
   121c8:	mov	r1, #4
   121cc:	mov	r6, #4
   121d0:	movt	r2, #1
   121d4:	bl	19228 <__assert_fail@plt+0x7d40>
   121d8:	movw	r2, #48175	; 0xbc2f
   121dc:	mov	r7, r0
   121e0:	mov	r0, #1
   121e4:	mov	r1, #4
   121e8:	movt	r2, #1
   121ec:	bl	19228 <__assert_fail@plt+0x7d40>
   121f0:	ldr	r2, [r8, #28]
   121f4:	mov	r5, r0
   121f8:	mov	r0, #2
   121fc:	mov	r1, #4
   12200:	bl	19228 <__assert_fail@plt+0x7d40>
   12204:	str	r0, [sp, #4]
   12208:	mov	r2, r9
   1220c:	mov	r0, #0
   12210:	mov	r1, #0
   12214:	mov	r3, r7
   12218:	str	r5, [sp]
   1221c:	mov	r9, #0
   12220:	bl	11308 <error@plt>
   12224:	b	12724 <__assert_fail@plt+0x123c>
   12228:	ldr	r0, [sl, #12]
   1222c:	cmp	r0, #0
   12230:	beq	1238c <__assert_fail@plt+0xea4>
   12234:	ldrd	r2, [r0]
   12238:	ldr	r1, [r8, #160]	; 0xa0
   1223c:	ldr	r5, [r8, #164]	; 0xa4
   12240:	eor	r3, r5, r3
   12244:	eor	r1, r1, r2
   12248:	orrs	r1, r1, r3
   1224c:	bne	1238c <__assert_fail@plt+0xea4>
   12250:	ldrd	r0, [r0, #8]
   12254:	ldrd	r2, [r8, #64]	; 0x40
   12258:	eor	r1, r3, r1
   1225c:	eor	r0, r2, r0
   12260:	orrs	r0, r0, r1
   12264:	bne	1238c <__assert_fail@plt+0xea4>
   12268:	ldr	r0, [r8, #28]
   1226c:	movw	r7, #50313	; 0xc489
   12270:	movt	r7, #1
   12274:	mov	r1, r7
   12278:	bl	11200 <strcmp@plt>
   1227c:	cmp	r0, #0
   12280:	beq	1250c <__assert_fail@plt+0x1024>
   12284:	movw	r1, #48223	; 0xbc5f
   12288:	mov	r0, #0
   1228c:	mov	r2, #5
   12290:	movt	r1, #1
   12294:	bl	11278 <dcgettext@plt>
   12298:	ldr	r2, [r8, #28]
   1229c:	mov	r5, r0
   122a0:	mov	r0, #0
   122a4:	mov	r1, #4
   122a8:	bl	19228 <__assert_fail@plt+0x7d40>
   122ac:	mov	r6, r0
   122b0:	mov	r0, #1
   122b4:	mov	r1, #4
   122b8:	mov	r2, r7
   122bc:	bl	19228 <__assert_fail@plt+0x7d40>
   122c0:	str	r0, [sp]
   122c4:	mov	r0, #0
   122c8:	mov	r1, #0
   122cc:	mov	r2, r5
   122d0:	mov	r3, r6
   122d4:	b	12540 <__assert_fail@plt+0x1058>
   122d8:	mov	r0, r4
   122dc:	mov	r1, r8
   122e0:	mov	r2, sl
   122e4:	mov	r3, #1
   122e8:	bl	12e94 <__assert_fail@plt+0x19ac>
   122ec:	mov	r9, r0
   122f0:	cmp	r0, #2
   122f4:	bne	12328 <__assert_fail@plt+0xe40>
   122f8:	mov	r0, r4
   122fc:	mov	r1, r8
   12300:	mov	r2, #4
   12304:	bl	15ed4 <__assert_fail@plt+0x49ec>
   12308:	mov	r0, r4
   1230c:	bl	14640 <__assert_fail@plt+0x3158>
   12310:	mov	r6, #2
   12314:	mov	r9, #0
   12318:	sub	r0, r6, #2
   1231c:	cmp	r0, #2
   12320:	bcc	12614 <__assert_fail@plt+0x112c>
   12324:	b	12698 <__assert_fail@plt+0x11b0>
   12328:	ldr	r0, [r8, #4]
   1232c:	mov	r2, #1
   12330:	ldr	r1, [r0, #48]	; 0x30
   12334:	cmp	r1, #0
   12338:	blt	1235c <__assert_fail@plt+0xe74>
   1233c:	ldr	r1, [r0, #16]
   12340:	cmp	r1, #0
   12344:	bne	1235c <__assert_fail@plt+0xe74>
   12348:	str	r2, [r0, #16]
   1234c:	ldr	r0, [r0, #4]
   12350:	ldr	r1, [r0, #48]	; 0x30
   12354:	cmn	r1, #1
   12358:	bgt	1233c <__assert_fail@plt+0xe54>
   1235c:	mov	r0, r4
   12360:	mov	r1, r8
   12364:	mov	r2, #4
   12368:	bl	15ed4 <__assert_fail@plt+0x49ec>
   1236c:	mov	r0, r4
   12370:	bl	14640 <__assert_fail@plt+0x3158>
   12374:	mov	r6, r9
   12378:	mov	r9, #0
   1237c:	sub	r0, r6, #2
   12380:	cmp	r0, #2
   12384:	bcc	12614 <__assert_fail@plt+0x112c>
   12388:	b	12698 <__assert_fail@plt+0x11b0>
   1238c:	ldrb	r0, [sl, #16]
   12390:	cmp	r0, #0
   12394:	beq	12644 <__assert_fail@plt+0x115c>
   12398:	movw	r1, #48175	; 0xbc2f
   1239c:	mov	r0, r6
   123a0:	mov	r2, #0
   123a4:	movt	r1, #1
   123a8:	bl	13998 <__assert_fail@plt+0x24b0>
   123ac:	mov	r6, r0
   123b0:	mov	r0, #3
   123b4:	add	r2, sp, #16
   123b8:	mov	r1, r6
   123bc:	bl	114b8 <__lxstat64@plt>
   123c0:	cmp	r0, #0
   123c4:	beq	1249c <__assert_fail@plt+0xfb4>
   123c8:	movw	r1, #48330	; 0xbcca
   123cc:	mov	r0, #0
   123d0:	mov	r2, #5
   123d4:	movt	r1, #1
   123d8:	bl	11278 <dcgettext@plt>
   123dc:	mov	r5, r0
   123e0:	mov	r0, #0
   123e4:	mov	r1, #4
   123e8:	mov	r2, r6
   123ec:	bl	19228 <__assert_fail@plt+0x7d40>
   123f0:	ldr	r2, [r8, #24]
   123f4:	mov	r7, r0
   123f8:	mov	r0, #1
   123fc:	mov	r1, #4
   12400:	bl	19228 <__assert_fail@plt+0x7d40>
   12404:	str	r0, [sp]
   12408:	mov	r0, #0
   1240c:	mov	r1, #0
   12410:	mov	r2, r5
   12414:	mov	r3, r7
   12418:	bl	11308 <error@plt>
   1241c:	mov	r0, r6
   12420:	bl	13acc <__assert_fail@plt+0x25e4>
   12424:	b	12720 <__assert_fail@plt+0x1238>
   12428:	mov	r6, #21
   1242c:	movw	r1, #48107	; 0xbbeb
   12430:	mov	r0, #0
   12434:	mov	r2, #5
   12438:	movt	r1, #1
   1243c:	bl	11278 <dcgettext@plt>
   12440:	ldr	r1, [r8, #28]
   12444:	mov	r5, r0
   12448:	mov	r0, #4
   1244c:	bl	192d0 <__assert_fail@plt+0x7de8>
   12450:	mov	r3, r0
   12454:	mov	r0, #0
   12458:	mov	r1, r6
   1245c:	mov	r2, r5
   12460:	bl	11308 <error@plt>
   12464:	ldr	r0, [r8, #4]
   12468:	mov	r2, #1
   1246c:	ldr	r1, [r0, #48]	; 0x30
   12470:	cmp	r1, #0
   12474:	blt	12720 <__assert_fail@plt+0x1238>
   12478:	ldr	r1, [r0, #16]
   1247c:	cmp	r1, #0
   12480:	bne	12720 <__assert_fail@plt+0x1238>
   12484:	str	r2, [r0, #16]
   12488:	ldr	r0, [r0, #4]
   1248c:	ldr	r1, [r0, #48]	; 0x30
   12490:	cmn	r1, #1
   12494:	bgt	12478 <__assert_fail@plt+0xf90>
   12498:	b	12720 <__assert_fail@plt+0x1238>
   1249c:	mov	r0, r6
   124a0:	bl	13acc <__assert_fail@plt+0x25e4>
   124a4:	ldr	r0, [sp, #12]
   124a8:	ldr	r2, [sp, #16]
   124ac:	ldr	r3, [sp, #20]
   124b0:	ldrd	r0, [r0]
   124b4:	eor	r1, r1, r3
   124b8:	eor	r0, r0, r2
   124bc:	orrs	r0, r0, r1
   124c0:	beq	12644 <__assert_fail@plt+0x115c>
   124c4:	movw	r1, #48361	; 0xbce9
   124c8:	mov	r0, #0
   124cc:	mov	r2, #5
   124d0:	movt	r1, #1
   124d4:	bl	11278 <dcgettext@plt>
   124d8:	ldr	r1, [r8, #28]
   124dc:	mov	r5, r0
   124e0:	mov	r0, #4
   124e4:	bl	192d0 <__assert_fail@plt+0x7de8>
   124e8:	mov	r3, r0
   124ec:	mov	r0, #0
   124f0:	mov	r1, #0
   124f4:	mov	r2, r5
   124f8:	bl	11308 <error@plt>
   124fc:	movw	r1, #48407	; 0xbd17
   12500:	mov	r0, #0
   12504:	movt	r1, #1
   12508:	b	12550 <__assert_fail@plt+0x1068>
   1250c:	movw	r1, #48178	; 0xbc32
   12510:	mov	r0, #0
   12514:	mov	r2, #5
   12518:	movt	r1, #1
   1251c:	bl	11278 <dcgettext@plt>
   12520:	ldr	r1, [r8, #28]
   12524:	mov	r5, r0
   12528:	mov	r0, #4
   1252c:	bl	192d0 <__assert_fail@plt+0x7de8>
   12530:	mov	r3, r0
   12534:	mov	r0, #0
   12538:	mov	r1, #0
   1253c:	mov	r2, r5
   12540:	bl	11308 <error@plt>
   12544:	movw	r1, #48281	; 0xbc99
   12548:	mov	r0, #0
   1254c:	movt	r1, #1
   12550:	mov	r2, #5
   12554:	bl	11278 <dcgettext@plt>
   12558:	mov	r2, r0
   1255c:	mov	r0, #0
   12560:	mov	r1, #0
   12564:	bl	11308 <error@plt>
   12568:	b	12720 <__assert_fail@plt+0x1238>
   1256c:	ldrh	r1, [r8, #56]	; 0x38
   12570:	sub	r0, r1, #1
   12574:	cmp	r0, #12
   12578:	bhi	127f0 <__assert_fail@plt+0x1308>
   1257c:	add	r2, pc, #0
   12580:	ldr	pc, [r2, r0, lsl #2]
   12584:	andeq	r2, r1, ip, lsr #12
   12588:	andeq	r2, r1, r4, ror #13
   1258c:			; <UNDEFINED> instruction: 0x000125b8
   12590:			; <UNDEFINED> instruction: 0x000125b8
   12594:	strdeq	r2, [r1], -r0
   12598:	muleq	r1, r0, r0
   1259c:	andeq	r2, r1, r4, lsr #13
   125a0:			; <UNDEFINED> instruction: 0x000125b8
   125a4:	strdeq	r2, [r1], -r0
   125a8:			; <UNDEFINED> instruction: 0x000125b8
   125ac:			; <UNDEFINED> instruction: 0x000125b8
   125b0:			; <UNDEFINED> instruction: 0x000125b8
   125b4:			; <UNDEFINED> instruction: 0x000125b8
   125b8:	orr	r1, r1, #2
   125bc:	ldr	r0, [r4, #32]
   125c0:	mov	r2, #3
   125c4:	mov	r3, sl
   125c8:	sub	r1, r1, #6
   125cc:	stm	sp, {r2, r9}
   125d0:	clz	r1, r1
   125d4:	lsr	r5, r1, #5
   125d8:	mov	r1, r8
   125dc:	mov	r2, r5
   125e0:	bl	12928 <__assert_fail@plt+0x1440>
   125e4:	mov	r6, r0
   125e8:	cmp	r0, #2
   125ec:	bne	12608 <__assert_fail@plt+0x1120>
   125f0:	mov	r0, r4
   125f4:	mov	r1, r8
   125f8:	mov	r2, sl
   125fc:	mov	r3, r5
   12600:	bl	12e94 <__assert_fail@plt+0x19ac>
   12604:	mov	r6, r0
   12608:	sub	r0, r6, #2
   1260c:	cmp	r0, #2
   12610:	bcs	12698 <__assert_fail@plt+0x11b0>
   12614:	cmp	r7, #2
   12618:	bne	12740 <__assert_fail@plt+0x1258>
   1261c:	cmp	r6, #3
   12620:	mov	r6, #3
   12624:	moveq	r7, r6
   12628:	b	12740 <__assert_fail@plt+0x1258>
   1262c:	ldrb	r0, [sl, #9]
   12630:	cmp	r0, #0
   12634:	beq	1213c <__assert_fail@plt+0xc54>
   12638:	ldr	r0, [r8, #48]	; 0x30
   1263c:	cmp	r0, #0
   12640:	beq	12170 <__assert_fail@plt+0xc88>
   12644:	ldr	r0, [r4, #32]
   12648:	mov	r1, #2
   1264c:	mov	r2, #1
   12650:	mov	r3, sl
   12654:	str	r1, [sp]
   12658:	add	r1, sp, #16
   1265c:	str	r1, [sp, #4]
   12660:	mov	r1, r8
   12664:	bl	12928 <__assert_fail@plt+0x1440>
   12668:	cmp	r0, #2
   1266c:	mov	r9, r0
   12670:	ldreq	r0, [sp, #16]
   12674:	cmpeq	r0, #4
   12678:	beq	122d8 <__assert_fail@plt+0xdf0>
   1267c:	mov	r6, #2
   12680:	cmp	r9, #2
   12684:	bne	12328 <__assert_fail@plt+0xe40>
   12688:	mov	r9, #0
   1268c:	sub	r0, r6, #2
   12690:	cmp	r0, #2
   12694:	bcc	12614 <__assert_fail@plt+0x112c>
   12698:	cmp	r6, #4
   1269c:	beq	1273c <__assert_fail@plt+0x1254>
   126a0:	b	12840 <__assert_fail@plt+0x1358>
   126a4:	ldr	r5, [r8, #32]
   126a8:	movw	r1, #48630	; 0xbdf6
   126ac:	mov	r0, #0
   126b0:	mov	r2, #5
   126b4:	movt	r1, #1
   126b8:	bl	11278 <dcgettext@plt>
   126bc:	ldr	r2, [r8, #28]
   126c0:	mov	r6, r0
   126c4:	mov	r0, #0
   126c8:	mov	r1, #3
   126cc:	bl	1954c <__assert_fail@plt+0x8064>
   126d0:	mov	r3, r0
   126d4:	mov	r0, #0
   126d8:	mov	r1, r5
   126dc:	mov	r2, r6
   126e0:	b	1271c <__assert_fail@plt+0x1234>
   126e4:	movw	r1, #48444	; 0xbd3c
   126e8:	mov	r0, #0
   126ec:	mov	r2, #5
   126f0:	movt	r1, #1
   126f4:	bl	11278 <dcgettext@plt>
   126f8:	ldr	r2, [r8, #28]
   126fc:	mov	r5, r0
   12700:	mov	r0, #0
   12704:	mov	r1, #3
   12708:	bl	1954c <__assert_fail@plt+0x8064>
   1270c:	mov	r3, r0
   12710:	mov	r0, #0
   12714:	mov	r1, #0
   12718:	mov	r2, r5
   1271c:	bl	11308 <error@plt>
   12720:	mov	r6, #4
   12724:	mov	r0, r4
   12728:	mov	r1, r8
   1272c:	mov	r2, #4
   12730:	bl	15ed4 <__assert_fail@plt+0x49ec>
   12734:	mov	r0, r4
   12738:	bl	14640 <__assert_fail@plt+0x3158>
   1273c:	mov	r7, r6
   12740:	mov	r0, r4
   12744:	bl	14640 <__assert_fail@plt+0x3158>
   12748:	mov	r8, r0
   1274c:	cmp	r0, #0
   12750:	bne	1256c <__assert_fail@plt+0x1084>
   12754:	b	1276c <__assert_fail@plt+0x1284>
   12758:	mov	r7, #2
   1275c:	mov	r0, r7
   12760:	sub	sp, fp, #28
   12764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12768:	mov	r7, #2
   1276c:	bl	1138c <__errno_location@plt>
   12770:	ldr	r6, [r0]
   12774:	mov	r5, r0
   12778:	cmp	r6, #0
   1277c:	beq	127a8 <__assert_fail@plt+0x12c0>
   12780:	movw	r1, #47984	; 0xbb70
   12784:	mov	r0, #0
   12788:	mov	r2, #5
   1278c:	movt	r1, #1
   12790:	bl	11278 <dcgettext@plt>
   12794:	mov	r2, r0
   12798:	mov	r0, #0
   1279c:	mov	r1, r6
   127a0:	bl	11308 <error@plt>
   127a4:	mov	r7, #4
   127a8:	mov	r0, r4
   127ac:	bl	14498 <__assert_fail@plt+0x2fb0>
   127b0:	cmp	r0, #0
   127b4:	beq	127e4 <__assert_fail@plt+0x12fc>
   127b8:	ldr	r4, [r5]
   127bc:	movw	r1, #48090	; 0xbbda
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #1
   127cc:	bl	11278 <dcgettext@plt>
   127d0:	mov	r2, r0
   127d4:	mov	r0, #0
   127d8:	mov	r1, r4
   127dc:	bl	11308 <error@plt>
   127e0:	mov	r7, #4
   127e4:	mov	r0, r7
   127e8:	sub	sp, fp, #28
   127ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127f0:	movw	r1, #48651	; 0xbe0b
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	movt	r1, #1
   12800:	bl	11278 <dcgettext@plt>
   12804:	ldr	r2, [r8, #28]
   12808:	ldrh	r5, [r8, #56]	; 0x38
   1280c:	mov	r4, r0
   12810:	mov	r0, #0
   12814:	mov	r1, #3
   12818:	bl	1954c <__assert_fail@plt+0x8064>
   1281c:	movw	r1, #48707	; 0xbe43
   12820:	mov	r2, r4
   12824:	mov	r3, r5
   12828:	movt	r1, #1
   1282c:	stm	sp, {r0, r1}
   12830:	mov	r0, #0
   12834:	mov	r1, #0
   12838:	bl	11308 <error@plt>
   1283c:	bl	114a0 <abort@plt>
   12840:	movw	r0, #48000	; 0xbb80
   12844:	movw	r1, #48017	; 0xbb91
   12848:	movw	r3, #48030	; 0xbb9e
   1284c:	movw	r2, #610	; 0x262
   12850:	movt	r0, #1
   12854:	movt	r1, #1
   12858:	movt	r3, #1
   1285c:	bl	114e8 <__assert_fail@plt>
   12860:	push	{r4, r5, r6, r7, fp, lr}
   12864:	add	fp, sp, #16
   12868:	mov	r2, #51456	; 0xc900
   1286c:	bl	11380 <openat64@plt>
   12870:	cmp	r0, #0
   12874:	blt	12920 <__assert_fail@plt+0x1438>
   12878:	mov	r5, r0
   1287c:	bl	11440 <fdopendir@plt>
   12880:	cmp	r0, #0
   12884:	beq	12918 <__assert_fail@plt+0x1430>
   12888:	mov	r4, r0
   1288c:	bl	1138c <__errno_location@plt>
   12890:	mov	r5, r0
   12894:	mov	r0, #0
   12898:	str	r0, [r5]
   1289c:	mov	r0, r4
   128a0:	bl	11434 <readdir64@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128f4 <__assert_fail@plt+0x140c>
   128ac:	mov	r6, r0
   128b0:	ldrb	r0, [r6, #19]
   128b4:	cmp	r0, #46	; 0x2e
   128b8:	bne	128f8 <__assert_fail@plt+0x1410>
   128bc:	ldrb	r0, [r6, #20]
   128c0:	cmp	r0, #46	; 0x2e
   128c4:	mov	r0, #1
   128c8:	movweq	r0, #2
   128cc:	add	r0, r6, r0
   128d0:	ldrb	r0, [r0, #19]
   128d4:	cmp	r0, #47	; 0x2f
   128d8:	cmpne	r0, #0
   128dc:	bne	128f8 <__assert_fail@plt+0x1410>
   128e0:	mov	r0, r4
   128e4:	bl	11434 <readdir64@plt>
   128e8:	mov	r6, r0
   128ec:	cmp	r0, #0
   128f0:	bne	128b0 <__assert_fail@plt+0x13c8>
   128f4:	mov	r6, #0
   128f8:	ldr	r7, [r5]
   128fc:	mov	r0, r4
   12900:	bl	114d0 <closedir@plt>
   12904:	orr	r0, r6, r7
   12908:	str	r7, [r5]
   1290c:	clz	r0, r0
   12910:	lsr	r0, r0, #5
   12914:	pop	{r4, r5, r6, r7, fp, pc}
   12918:	mov	r0, r5
   1291c:	bl	114ac <close@plt>
   12920:	mov	r0, #0
   12924:	pop	{r4, r5, r6, r7, fp, pc}
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	add	fp, sp, #28
   12930:	sub	sp, sp, #132	; 0x84
   12934:	ldr	r6, [fp, #12]
   12938:	mov	r5, r2
   1293c:	mov	r2, r0
   12940:	ldr	r9, [r1, #24]
   12944:	ldr	r0, [r1, #28]
   12948:	mov	r4, r1
   1294c:	mov	r7, r3
   12950:	mvn	r1, #0
   12954:	str	r2, [sp, #16]
   12958:	cmp	r6, #0
   1295c:	str	r0, [sp, #20]
   12960:	beq	129a4 <__assert_fail@plt+0x14bc>
   12964:	mov	r0, #2
   12968:	str	r0, [r6]
   1296c:	str	r1, [sp, #76]	; 0x4c
   12970:	str	r1, [sp, #72]	; 0x48
   12974:	mov	r0, r2
   12978:	mov	r1, r9
   1297c:	bl	12860 <__assert_fail@plt+0x1378>
   12980:	mov	r8, r0
   12984:	mov	r0, #3
   12988:	mov	sl, r5
   1298c:	cmp	r8, #0
   12990:	movwne	r0, #4
   12994:	cmp	r5, #0
   12998:	str	r0, [r6]
   1299c:	add	r0, sp, #24
   129a0:	b	129bc <__assert_fail@plt+0x14d4>
   129a4:	add	r0, sp, #24
   129a8:	cmp	r5, #0
   129ac:	mov	sl, r5
   129b0:	str	r1, [sp, #72]	; 0x48
   129b4:	str	r1, [sp, #76]	; 0x4c
   129b8:	mov	r8, #0
   129bc:	movwne	sl, #4
   129c0:	add	r6, r0, #48	; 0x30
   129c4:	ldr	r0, [r4, #16]
   129c8:	mov	r4, #3
   129cc:	cmp	r0, #0
   129d0:	beq	129e0 <__assert_fail@plt+0x14f8>
   129d4:	mov	r0, r4
   129d8:	sub	sp, fp, #28
   129dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e0:	ldr	r1, [r7, #4]
   129e4:	cmp	r1, #5
   129e8:	beq	12ac8 <__assert_fail@plt+0x15e0>
   129ec:	ldrb	r0, [r7]
   129f0:	mov	ip, #0
   129f4:	cmp	r0, #0
   129f8:	beq	12a8c <__assert_fail@plt+0x15a4>
   129fc:	mov	r2, #0
   12a00:	cmp	r1, #3
   12a04:	bne	12ac8 <__assert_fail@plt+0x15e0>
   12a08:	cmp	ip, #0
   12a0c:	blt	12c48 <__assert_fail@plt+0x1760>
   12a10:	cmp	r5, #0
   12a14:	bne	12c48 <__assert_fail@plt+0x1760>
   12a18:	ldrd	r0, [r6]
   12a1c:	str	r6, [sp, #12]
   12a20:	mvn	r6, #0
   12a24:	eor	r2, r1, r6
   12a28:	eor	r3, r0, r6
   12a2c:	orrs	r2, r3, r2
   12a30:	bne	12b54 <__assert_fail@plt+0x166c>
   12a34:	ldr	r1, [sp, #16]
   12a38:	mov	r0, #256	; 0x100
   12a3c:	add	r3, sp, #24
   12a40:	mov	r2, r9
   12a44:	str	ip, [sp, #8]
   12a48:	str	r0, [sp]
   12a4c:	mov	r0, #3
   12a50:	bl	112a8 <__fxstatat64@plt>
   12a54:	cmp	r0, #0
   12a58:	beq	12b44 <__assert_fail@plt+0x165c>
   12a5c:	ldr	r2, [sp, #12]
   12a60:	mvn	r1, #0
   12a64:	subs	r0, r1, #1
   12a68:	sbc	r1, r1, #0
   12a6c:	strd	r0, [r2]
   12a70:	bl	1138c <__errno_location@plt>
   12a74:	ldr	r2, [r0]
   12a78:	asr	r1, r2, #31
   12a7c:	str	r2, [sp, #120]	; 0x78
   12a80:	str	r1, [sp, #124]	; 0x7c
   12a84:	str	r2, [r0]
   12a88:	b	12d1c <__assert_fail@plt+0x1834>
   12a8c:	cmp	r1, #3
   12a90:	beq	12aa4 <__assert_fail@plt+0x15bc>
   12a94:	ldrb	r0, [r7, #17]
   12a98:	mov	r2, #0
   12a9c:	cmp	r0, #0
   12aa0:	beq	12ac0 <__assert_fail@plt+0x15d8>
   12aa4:	bl	19ef4 <__assert_fail@plt+0x8a0c>
   12aa8:	cmp	r0, #0
   12aac:	beq	12ad8 <__assert_fail@plt+0x15f0>
   12ab0:	bl	1138c <__errno_location@plt>
   12ab4:	ldr	r1, [r7, #4]
   12ab8:	ldr	r2, [r0]
   12abc:	mov	ip, #0
   12ac0:	cmp	r1, #3
   12ac4:	beq	12a08 <__assert_fail@plt+0x1520>
   12ac8:	mov	r4, #2
   12acc:	mov	r0, r4
   12ad0:	sub	sp, fp, #28
   12ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad8:	ldrd	r0, [r6]
   12adc:	str	r6, [sp, #12]
   12ae0:	mvn	r6, #0
   12ae4:	eor	r2, r1, r6
   12ae8:	eor	r3, r0, r6
   12aec:	orrs	r2, r3, r2
   12af0:	bne	12bc8 <__assert_fail@plt+0x16e0>
   12af4:	ldr	r1, [sp, #16]
   12af8:	mov	r0, #256	; 0x100
   12afc:	add	r3, sp, #24
   12b00:	mov	r2, r9
   12b04:	str	r0, [sp]
   12b08:	mov	r0, #3
   12b0c:	bl	112a8 <__fxstatat64@plt>
   12b10:	cmp	r0, #0
   12b14:	beq	12bbc <__assert_fail@plt+0x16d4>
   12b18:	ldr	r2, [sp, #12]
   12b1c:	mvn	r1, #0
   12b20:	subs	r0, r1, #1
   12b24:	sbc	r1, r1, #0
   12b28:	strd	r0, [r2]
   12b2c:	bl	1138c <__errno_location@plt>
   12b30:	ldr	r6, [r0]
   12b34:	asr	r1, r6, #31
   12b38:	str	r6, [sp, #120]	; 0x78
   12b3c:	str	r1, [sp, #124]	; 0x7c
   12b40:	b	12c30 <__assert_fail@plt+0x1748>
   12b44:	ldr	r0, [sp, #12]
   12b48:	ldr	ip, [sp, #8]
   12b4c:	mvn	r6, #0
   12b50:	ldrd	r0, [r0]
   12b54:	subs	r0, r6, r0
   12b58:	sbcs	r0, r6, r1
   12b5c:	bge	12b90 <__assert_fail@plt+0x16a8>
   12b60:	ldr	r0, [sp, #40]	; 0x28
   12b64:	and	r0, r0, #61440	; 0xf000
   12b68:	cmp	r0, #16384	; 0x4000
   12b6c:	beq	12ba4 <__assert_fail@plt+0x16bc>
   12b70:	ldr	r6, [sp, #12]
   12b74:	cmp	r0, #40960	; 0xa000
   12b78:	bne	12c50 <__assert_fail@plt+0x1768>
   12b7c:	ldr	r0, [r7, #4]
   12b80:	mov	sl, #10
   12b84:	cmp	r0, #3
   12b88:	beq	12c7c <__assert_fail@plt+0x1794>
   12b8c:	b	12ac8 <__assert_fail@plt+0x15e0>
   12b90:	ldr	r4, [sp, #120]	; 0x78
   12b94:	bl	1138c <__errno_location@plt>
   12b98:	mov	r2, r4
   12b9c:	str	r4, [r0]
   12ba0:	b	12d1c <__assert_fail@plt+0x1834>
   12ba4:	ldr	r6, [sp, #12]
   12ba8:	mov	sl, #4
   12bac:	ldrb	r0, [r7, #9]
   12bb0:	cmp	r0, #0
   12bb4:	bne	12c7c <__assert_fail@plt+0x1794>
   12bb8:	b	12c64 <__assert_fail@plt+0x177c>
   12bbc:	ldr	r0, [sp, #12]
   12bc0:	mvn	r6, #0
   12bc4:	ldrd	r0, [r0]
   12bc8:	subs	r0, r6, r0
   12bcc:	sbcs	r0, r6, r1
   12bd0:	bge	12c28 <__assert_fail@plt+0x1740>
   12bd4:	ldr	r0, [sp, #40]	; 0x28
   12bd8:	ldr	r6, [sp, #12]
   12bdc:	and	r0, r0, #61440	; 0xf000
   12be0:	cmp	r0, #40960	; 0xa000
   12be4:	beq	12ab0 <__assert_fail@plt+0x15c8>
   12be8:	ldr	r0, [sp, #16]
   12bec:	mov	r1, r9
   12bf0:	mov	r2, #2
   12bf4:	mov	r3, #512	; 0x200
   12bf8:	bl	1123c <faccessat@plt>
   12bfc:	cmp	r0, #0
   12c00:	beq	12ab0 <__assert_fail@plt+0x15c8>
   12c04:	bl	1138c <__errno_location@plt>
   12c08:	ldr	r1, [r0]
   12c0c:	ldr	r2, [r0]
   12c10:	mvn	ip, #0
   12c14:	cmp	r1, #13
   12c18:	movweq	ip, #1
   12c1c:	cmp	ip, #0
   12c20:	bge	12a10 <__assert_fail@plt+0x1528>
   12c24:	b	12c48 <__assert_fail@plt+0x1760>
   12c28:	ldr	r6, [sp, #120]	; 0x78
   12c2c:	bl	1138c <__errno_location@plt>
   12c30:	str	r6, [r0]
   12c34:	ldr	r6, [sp, #12]
   12c38:	mvn	ip, #0
   12c3c:	ldr	r2, [r0]
   12c40:	cmp	ip, #0
   12c44:	bge	12a10 <__assert_fail@plt+0x1528>
   12c48:	cmp	ip, #0
   12c4c:	blt	12d1c <__assert_fail@plt+0x1834>
   12c50:	cmp	r5, #0
   12c54:	beq	12c7c <__assert_fail@plt+0x1794>
   12c58:	ldrb	r0, [r7, #9]
   12c5c:	cmp	r0, #0
   12c60:	bne	12c7c <__assert_fail@plt+0x1794>
   12c64:	ldrb	r0, [r7, #10]
   12c68:	mov	r2, #21
   12c6c:	cmp	r0, #0
   12c70:	beq	12d1c <__assert_fail@plt+0x1834>
   12c74:	eors	r0, r8, #1
   12c78:	bne	12d1c <__assert_fail@plt+0x1834>
   12c7c:	ldr	r1, [sp, #20]
   12c80:	mov	r7, r6
   12c84:	ldr	r6, [fp, #8]
   12c88:	mov	r0, #4
   12c8c:	str	ip, [sp, #8]
   12c90:	bl	192d0 <__assert_fail@plt+0x7de8>
   12c94:	mov	r5, r0
   12c98:	eor	r0, sl, #4
   12c9c:	eor	r1, r6, #2
   12ca0:	orrs	r0, r1, r0
   12ca4:	movwne	r0, #1
   12ca8:	orrs	r0, r8, r0
   12cac:	beq	12d68 <__assert_fail@plt+0x1880>
   12cb0:	ldrd	r0, [r7]
   12cb4:	mov	r6, r7
   12cb8:	mvn	r7, #0
   12cbc:	mov	sl, r5
   12cc0:	eor	r2, r1, r7
   12cc4:	eor	r3, r0, r7
   12cc8:	orrs	r2, r3, r2
   12ccc:	bne	12dc4 <__assert_fail@plt+0x18dc>
   12cd0:	ldr	r1, [sp, #16]
   12cd4:	mov	r0, #256	; 0x100
   12cd8:	add	r3, sp, #24
   12cdc:	mov	r2, r9
   12ce0:	str	r0, [sp]
   12ce4:	mov	r0, #3
   12ce8:	bl	112a8 <__fxstatat64@plt>
   12cec:	cmp	r0, #0
   12cf0:	beq	12dbc <__assert_fail@plt+0x18d4>
   12cf4:	mvn	r1, #0
   12cf8:	subs	r0, r1, #1
   12cfc:	sbc	r1, r1, #0
   12d00:	strd	r0, [r6]
   12d04:	bl	1138c <__errno_location@plt>
   12d08:	ldr	r4, [r0]
   12d0c:	asr	r1, r4, #31
   12d10:	str	r4, [sp, #120]	; 0x78
   12d14:	str	r1, [sp, #124]	; 0x7c
   12d18:	b	12e54 <__assert_fail@plt+0x196c>
   12d1c:	ldr	r1, [sp, #20]
   12d20:	mov	r0, #4
   12d24:	mov	r4, #4
   12d28:	mov	r6, r2
   12d2c:	bl	192d0 <__assert_fail@plt+0x7de8>
   12d30:	movw	r1, #48107	; 0xbbeb
   12d34:	mov	r5, r0
   12d38:	mov	r0, #0
   12d3c:	mov	r2, #5
   12d40:	movt	r1, #1
   12d44:	bl	11278 <dcgettext@plt>
   12d48:	mov	r2, r0
   12d4c:	mov	r0, #0
   12d50:	mov	r1, r6
   12d54:	mov	r3, r5
   12d58:	bl	11308 <error@plt>
   12d5c:	mov	r0, r4
   12d60:	sub	sp, fp, #28
   12d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d68:	ldr	r2, [sp, #8]
   12d6c:	movw	r0, #48777	; 0xbe89
   12d70:	movw	r1, #48729	; 0xbe59
   12d74:	movt	r0, #1
   12d78:	movt	r1, #1
   12d7c:	cmp	r2, #0
   12d80:	mov	r2, #5
   12d84:	moveq	r1, r0
   12d88:	movw	r0, #53640	; 0xd188
   12d8c:	movt	r0, #2
   12d90:	ldr	r6, [r0]
   12d94:	mov	r0, #0
   12d98:	bl	11278 <dcgettext@plt>
   12d9c:	mov	r2, r0
   12da0:	movw	r0, #53692	; 0xd1bc
   12da4:	str	r5, [sp]
   12da8:	mov	r1, #1
   12dac:	movt	r0, #2
   12db0:	ldr	r3, [r0]
   12db4:	mov	r0, r6
   12db8:	b	12e30 <__assert_fail@plt+0x1948>
   12dbc:	ldrd	r0, [r6]
   12dc0:	mvn	r7, #0
   12dc4:	ldr	r5, [sp, #8]
   12dc8:	subs	r0, r7, r0
   12dcc:	sbcs	r0, r7, r1
   12dd0:	bge	12e4c <__assert_fail@plt+0x1964>
   12dd4:	movw	r0, #48844	; 0xbecc
   12dd8:	movw	r1, #48809	; 0xbea9
   12ddc:	cmp	r5, #0
   12de0:	mov	r2, #5
   12de4:	movt	r0, #1
   12de8:	movt	r1, #1
   12dec:	moveq	r1, r0
   12df0:	movw	r0, #53640	; 0xd188
   12df4:	movt	r0, #2
   12df8:	ldr	r8, [r0]
   12dfc:	mov	r0, #0
   12e00:	bl	11278 <dcgettext@plt>
   12e04:	mov	r7, r0
   12e08:	movw	r0, #53692	; 0xd1bc
   12e0c:	movt	r0, #2
   12e10:	ldr	r6, [r0]
   12e14:	add	r0, sp, #24
   12e18:	bl	138a0 <__assert_fail@plt+0x23b8>
   12e1c:	stm	sp, {r0, sl}
   12e20:	mov	r0, r8
   12e24:	mov	r1, #1
   12e28:	mov	r2, r7
   12e2c:	mov	r3, r6
   12e30:	bl	113c8 <__fprintf_chk@plt>
   12e34:	bl	1a5dc <__assert_fail@plt+0x90f4>
   12e38:	cmp	r0, #0
   12e3c:	movne	r4, #2
   12e40:	mov	r0, r4
   12e44:	sub	sp, fp, #28
   12e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e4c:	ldr	r4, [sp, #120]	; 0x78
   12e50:	bl	1138c <__errno_location@plt>
   12e54:	movw	r1, #48107	; 0xbbeb
   12e58:	str	r4, [r0]
   12e5c:	mov	r0, #0
   12e60:	mov	r2, #5
   12e64:	mov	r5, sl
   12e68:	movt	r1, #1
   12e6c:	bl	11278 <dcgettext@plt>
   12e70:	mov	r2, r0
   12e74:	mov	r0, #0
   12e78:	mov	r1, r4
   12e7c:	mov	r3, sl
   12e80:	bl	11308 <error@plt>
   12e84:	mov	r4, #4
   12e88:	mov	r0, r4
   12e8c:	sub	sp, fp, #28
   12e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e98:	add	fp, sp, #24
   12e9c:	sub	sp, sp, #112	; 0x70
   12ea0:	mov	r4, r1
   12ea4:	mov	r7, r0
   12ea8:	ldr	r1, [r1, #24]
   12eac:	ldr	r0, [r0, #32]
   12eb0:	mov	r5, r2
   12eb4:	cmp	r3, #0
   12eb8:	mov	r2, r3
   12ebc:	mov	r6, r3
   12ec0:	movwne	r2, #512	; 0x200
   12ec4:	bl	11218 <unlinkat@plt>
   12ec8:	cmp	r0, #0
   12ecc:	beq	1300c <__assert_fail@plt+0x1b24>
   12ed0:	bl	1138c <__errno_location@plt>
   12ed4:	ldr	r6, [r0]
   12ed8:	mov	r8, r0
   12edc:	cmp	r6, #30
   12ee0:	bne	12f20 <__assert_fail@plt+0x1a38>
   12ee4:	ldr	r2, [r4, #24]
   12ee8:	ldr	r1, [r7, #32]
   12eec:	mov	r0, #256	; 0x100
   12ef0:	add	r3, sp, #8
   12ef4:	str	r0, [sp]
   12ef8:	mov	r0, #3
   12efc:	bl	112a8 <__fxstatat64@plt>
   12f00:	cmp	r0, #0
   12f04:	beq	12f14 <__assert_fail@plt+0x1a2c>
   12f08:	ldr	r0, [r8]
   12f0c:	cmp	r0, #2
   12f10:	beq	12f1c <__assert_fail@plt+0x1a34>
   12f14:	mov	r0, #30
   12f18:	str	r0, [r8]
   12f1c:	ldr	r6, [r8]
   12f20:	ldrb	r0, [r5]
   12f24:	cmp	r0, #0
   12f28:	beq	12f54 <__assert_fail@plt+0x1a6c>
   12f2c:	mov	r5, #2
   12f30:	cmp	r6, #22
   12f34:	bhi	12f4c <__assert_fail@plt+0x1a64>
   12f38:	movw	r1, #4
   12f3c:	mov	r0, #1
   12f40:	movt	r1, #80	; 0x50
   12f44:	tst	r1, r0, lsl r6
   12f48:	bne	13060 <__assert_fail@plt+0x1b78>
   12f4c:	cmp	r6, #84	; 0x54
   12f50:	beq	13060 <__assert_fail@plt+0x1b78>
   12f54:	ldrh	r0, [r4, #56]	; 0x38
   12f58:	cmp	r0, #4
   12f5c:	bne	12f98 <__assert_fail@plt+0x1ab0>
   12f60:	sub	r0, r6, #17
   12f64:	cmp	r0, #22
   12f68:	bhi	12f98 <__assert_fail@plt+0x1ab0>
   12f6c:	movw	r2, #25
   12f70:	mov	r1, #1
   12f74:	movt	r2, #64	; 0x40
   12f78:	tst	r2, r1, lsl r0
   12f7c:	beq	12f98 <__assert_fail@plt+0x1ab0>
   12f80:	ldr	r0, [r4, #32]
   12f84:	cmp	r0, #13
   12f88:	cmpne	r0, #1
   12f8c:	bne	12f98 <__assert_fail@plt+0x1ab0>
   12f90:	mov	r6, r0
   12f94:	str	r0, [r8]
   12f98:	movw	r1, #48107	; 0xbbeb
   12f9c:	mov	r0, #0
   12fa0:	mov	r2, #5
   12fa4:	movt	r1, #1
   12fa8:	bl	11278 <dcgettext@plt>
   12fac:	ldr	r1, [r4, #28]
   12fb0:	mov	r7, r0
   12fb4:	mov	r0, #4
   12fb8:	mov	r5, #4
   12fbc:	bl	192d0 <__assert_fail@plt+0x7de8>
   12fc0:	mov	r3, r0
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, r6
   12fcc:	mov	r2, r7
   12fd0:	bl	11308 <error@plt>
   12fd4:	ldr	r0, [r4, #4]
   12fd8:	ldr	r1, [r0, #48]	; 0x30
   12fdc:	cmp	r1, #0
   12fe0:	blt	13060 <__assert_fail@plt+0x1b78>
   12fe4:	mov	r1, #1
   12fe8:	ldr	r2, [r0, #16]
   12fec:	cmp	r2, #0
   12ff0:	bne	13060 <__assert_fail@plt+0x1b78>
   12ff4:	str	r1, [r0, #16]
   12ff8:	ldr	r0, [r0, #4]
   12ffc:	ldr	r2, [r0, #48]	; 0x30
   13000:	cmn	r2, #1
   13004:	bgt	12fe8 <__assert_fail@plt+0x1b00>
   13008:	b	13060 <__assert_fail@plt+0x1b78>
   1300c:	ldrb	r0, [r5, #18]
   13010:	mov	r5, #2
   13014:	cmp	r0, #0
   13018:	beq	13060 <__assert_fail@plt+0x1b78>
   1301c:	movw	r0, #48863	; 0xbedf
   13020:	movw	r1, #48885	; 0xbef5
   13024:	cmp	r6, #0
   13028:	mov	r2, #5
   1302c:	movt	r0, #1
   13030:	movt	r1, #1
   13034:	movne	r1, r0
   13038:	mov	r0, #0
   1303c:	bl	11278 <dcgettext@plt>
   13040:	ldr	r1, [r4, #28]
   13044:	mov	r6, r0
   13048:	mov	r0, #4
   1304c:	bl	192d0 <__assert_fail@plt+0x7de8>
   13050:	mov	r2, r0
   13054:	mov	r0, #1
   13058:	mov	r1, r6
   1305c:	bl	113b0 <__printf_chk@plt>
   13060:	mov	r0, r5
   13064:	sub	sp, fp, #24
   13068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1306c:	mov	r0, #1
   13070:	b	115e8 <__assert_fail@plt+0x100>
   13074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13078:	add	fp, sp, #28
   1307c:	sub	sp, sp, #12
   13080:	mov	r4, r3
   13084:	mov	r9, r2
   13088:	mov	r7, r1
   1308c:	mov	r8, r0
   13090:	bl	11374 <strlen@plt>
   13094:	ldr	r6, [r7]
   13098:	cmp	r6, #0
   1309c:	beq	13148 <__assert_fail@plt+0x1c60>
   130a0:	mov	r5, r0
   130a4:	cmp	r9, #0
   130a8:	beq	13158 <__assert_fail@plt+0x1c70>
   130ac:	add	r0, r7, #4
   130b0:	mvn	sl, #0
   130b4:	mov	r7, #0
   130b8:	str	r9, [sp]
   130bc:	str	r0, [sp, #8]
   130c0:	mov	r0, #0
   130c4:	str	r0, [sp, #4]
   130c8:	mov	r0, r9
   130cc:	mov	r0, r6
   130d0:	mov	r1, r8
   130d4:	mov	r2, r5
   130d8:	bl	11494 <strncmp@plt>
   130dc:	cmp	r0, #0
   130e0:	bne	1312c <__assert_fail@plt+0x1c44>
   130e4:	mov	r0, r6
   130e8:	bl	11374 <strlen@plt>
   130ec:	cmp	r0, r5
   130f0:	beq	1314c <__assert_fail@plt+0x1c64>
   130f4:	cmn	sl, #1
   130f8:	beq	13128 <__assert_fail@plt+0x1c40>
   130fc:	ldr	r0, [sp]
   13100:	mov	r1, r9
   13104:	mov	r2, r4
   13108:	mla	r0, sl, r4, r0
   1310c:	bl	1126c <memcmp@plt>
   13110:	ldr	r1, [sp, #4]
   13114:	cmp	r0, #0
   13118:	movwne	r0, #1
   1311c:	orr	r1, r1, r0
   13120:	str	r1, [sp, #4]
   13124:	b	1312c <__assert_fail@plt+0x1c44>
   13128:	mov	sl, r7
   1312c:	ldr	r0, [sp, #8]
   13130:	add	r9, r9, r4
   13134:	ldr	r6, [r0, r7, lsl #2]
   13138:	add	r7, r7, #1
   1313c:	cmp	r6, #0
   13140:	bne	130cc <__assert_fail@plt+0x1be4>
   13144:	b	131c0 <__assert_fail@plt+0x1cd8>
   13148:	mvn	r7, #0
   1314c:	mov	r0, r7
   13150:	sub	sp, fp, #28
   13154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13158:	add	r4, r7, #4
   1315c:	mov	r0, #0
   13160:	mvn	sl, #0
   13164:	mov	r7, #0
   13168:	str	r0, [sp, #4]
   1316c:	mov	r0, r6
   13170:	mov	r1, r8
   13174:	mov	r2, r5
   13178:	bl	11494 <strncmp@plt>
   1317c:	cmp	r0, #0
   13180:	bne	131b0 <__assert_fail@plt+0x1cc8>
   13184:	mov	r0, r6
   13188:	bl	11374 <strlen@plt>
   1318c:	cmp	r0, r5
   13190:	beq	1314c <__assert_fail@plt+0x1c64>
   13194:	ldr	r1, [sp, #4]
   13198:	cmn	sl, #1
   1319c:	add	r0, sl, #1
   131a0:	movwne	r0, #1
   131a4:	moveq	sl, r7
   131a8:	orr	r1, r1, r0
   131ac:	str	r1, [sp, #4]
   131b0:	ldr	r6, [r4, r7, lsl #2]
   131b4:	add	r7, r7, #1
   131b8:	cmp	r6, #0
   131bc:	bne	1316c <__assert_fail@plt+0x1c84>
   131c0:	ldr	r0, [sp, #4]
   131c4:	tst	r0, #1
   131c8:	mvnne	sl, #1
   131cc:	mov	r0, sl
   131d0:	sub	sp, fp, #28
   131d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d8:	push	{r4, r5, r6, r7, fp, lr}
   131dc:	add	fp, sp, #16
   131e0:	mov	r5, r0
   131e4:	ldr	r0, [r1]
   131e8:	mvn	r4, #0
   131ec:	cmp	r0, #0
   131f0:	beq	13220 <__assert_fail@plt+0x1d38>
   131f4:	add	r7, r1, #4
   131f8:	mov	r6, #0
   131fc:	mov	r1, r5
   13200:	bl	11200 <strcmp@plt>
   13204:	cmp	r0, #0
   13208:	moveq	r0, r6
   1320c:	popeq	{r4, r5, r6, r7, fp, pc}
   13210:	ldr	r0, [r7, r6, lsl #2]
   13214:	add	r6, r6, #1
   13218:	cmp	r0, #0
   1321c:	bne	131fc <__assert_fail@plt+0x1d14>
   13220:	mov	r0, r4
   13224:	pop	{r4, r5, r6, r7, fp, pc}
   13228:	push	{r4, r5, r6, sl, fp, lr}
   1322c:	add	fp, sp, #16
   13230:	sub	sp, sp, #8
   13234:	mov	r4, r1
   13238:	movw	r1, #48939	; 0xbf2b
   1323c:	mov	r5, r0
   13240:	movw	r0, #48912	; 0xbf10
   13244:	cmn	r2, #1
   13248:	mov	r2, #5
   1324c:	movt	r0, #1
   13250:	movt	r1, #1
   13254:	moveq	r1, r0
   13258:	mov	r0, #0
   1325c:	bl	11278 <dcgettext@plt>
   13260:	mov	r6, r0
   13264:	mov	r0, #0
   13268:	mov	r1, #8
   1326c:	mov	r2, r4
   13270:	bl	19228 <__assert_fail@plt+0x7d40>
   13274:	mov	r4, r0
   13278:	mov	r0, #1
   1327c:	mov	r1, r5
   13280:	bl	197e8 <__assert_fail@plt+0x8300>
   13284:	str	r0, [sp]
   13288:	mov	r0, #0
   1328c:	mov	r1, #0
   13290:	mov	r2, r6
   13294:	mov	r3, r4
   13298:	bl	11308 <error@plt>
   1329c:	sub	sp, fp, #16
   132a0:	pop	{r4, r5, r6, sl, fp, pc}
   132a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a8:	add	fp, sp, #28
   132ac:	sub	sp, sp, #4
   132b0:	mov	r5, r1
   132b4:	movw	r1, #48968	; 0xbf48
   132b8:	mov	sl, r2
   132bc:	mov	r7, r0
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	mov	r8, #0
   132cc:	movt	r1, #1
   132d0:	bl	11278 <dcgettext@plt>
   132d4:	movw	r4, #53640	; 0xd188
   132d8:	movt	r4, #2
   132dc:	ldr	r1, [r4]
   132e0:	bl	111dc <fputs_unlocked@plt>
   132e4:	ldr	r6, [r7]
   132e8:	cmp	r6, #0
   132ec:	beq	1338c <__assert_fail@plt+0x1ea4>
   132f0:	add	r9, r7, #4
   132f4:	mov	r7, #0
   132f8:	str	sl, [sp]
   132fc:	cmp	r8, #0
   13300:	beq	1331c <__assert_fail@plt+0x1e34>
   13304:	mov	r0, r7
   13308:	mov	r1, r5
   1330c:	mov	r2, sl
   13310:	bl	1126c <memcmp@plt>
   13314:	cmp	r0, #0
   13318:	beq	13348 <__assert_fail@plt+0x1e60>
   1331c:	ldr	r7, [r4]
   13320:	mov	r0, r6
   13324:	bl	197f8 <__assert_fail@plt+0x8310>
   13328:	movw	r2, #48989	; 0xbf5d
   1332c:	mov	r3, r0
   13330:	mov	r0, r7
   13334:	mov	r1, #1
   13338:	movt	r2, #1
   1333c:	bl	113c8 <__fprintf_chk@plt>
   13340:	mov	r7, r5
   13344:	b	13378 <__assert_fail@plt+0x1e90>
   13348:	mov	sl, r9
   1334c:	ldr	r9, [r4]
   13350:	mov	r0, r6
   13354:	bl	197f8 <__assert_fail@plt+0x8310>
   13358:	mov	r3, r0
   1335c:	mov	r0, r9
   13360:	mov	r9, sl
   13364:	ldr	sl, [sp]
   13368:	movw	r2, #48997	; 0xbf65
   1336c:	mov	r1, #1
   13370:	movt	r2, #1
   13374:	bl	113c8 <__fprintf_chk@plt>
   13378:	ldr	r6, [r9, -r8, lsl #2]
   1337c:	add	r5, r5, sl
   13380:	sub	r8, r8, #1
   13384:	cmp	r6, #0
   13388:	bne	132fc <__assert_fail@plt+0x1e14>
   1338c:	ldr	r0, [r4]
   13390:	ldr	r1, [r0, #20]
   13394:	ldr	r2, [r0, #24]
   13398:	cmp	r1, r2
   1339c:	addcc	r2, r1, #1
   133a0:	strcc	r2, [r0, #20]
   133a4:	movcc	r0, #10
   133a8:	strbcc	r0, [r1]
   133ac:	subcc	sp, fp, #28
   133b0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b4:	mov	r1, #10
   133b8:	sub	sp, fp, #28
   133bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c0:	b	11404 <__overflow@plt>
   133c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133c8:	add	fp, sp, #28
   133cc:	sub	sp, sp, #12
   133d0:	mov	sl, r0
   133d4:	ldr	r0, [fp, #16]
   133d8:	ldr	r9, [fp, #8]
   133dc:	mov	r5, r3
   133e0:	mov	r8, r2
   133e4:	mov	r6, r1
   133e8:	cmp	r0, #0
   133ec:	beq	1341c <__assert_fail@plt+0x1f34>
   133f0:	mov	r0, r6
   133f4:	mov	r1, r8
   133f8:	mov	r2, r5
   133fc:	mov	r3, r9
   13400:	bl	13074 <__assert_fail@plt+0x1b8c>
   13404:	mov	r4, r0
   13408:	cmn	r4, #1
   1340c:	ble	1346c <__assert_fail@plt+0x1f84>
   13410:	mov	r0, r4
   13414:	sub	sp, fp, #28
   13418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1341c:	ldr	r0, [r8]
   13420:	movw	r7, #48912	; 0xbf10
   13424:	str	r5, [sp, #8]
   13428:	movt	r7, #1
   1342c:	cmp	r0, #0
   13430:	beq	13484 <__assert_fail@plt+0x1f9c>
   13434:	add	r5, r8, #4
   13438:	mov	r4, #0
   1343c:	mov	r1, r6
   13440:	bl	11200 <strcmp@plt>
   13444:	cmp	r0, #0
   13448:	beq	13460 <__assert_fail@plt+0x1f78>
   1344c:	ldr	r0, [r5, r4, lsl #2]
   13450:	add	r4, r4, #1
   13454:	cmp	r0, #0
   13458:	bne	1343c <__assert_fail@plt+0x1f54>
   1345c:	b	13484 <__assert_fail@plt+0x1f9c>
   13460:	ldr	r5, [sp, #8]
   13464:	cmn	r4, #1
   13468:	bgt	13410 <__assert_fail@plt+0x1f28>
   1346c:	movw	r0, #48912	; 0xbf10
   13470:	movw	r7, #48939	; 0xbf2b
   13474:	str	r5, [sp, #8]
   13478:	movt	r0, #1
   1347c:	movt	r7, #1
   13480:	moveq	r7, r0
   13484:	ldr	r5, [fp, #12]
   13488:	mov	r0, #0
   1348c:	mov	r1, r7
   13490:	mov	r2, #5
   13494:	bl	11278 <dcgettext@plt>
   13498:	mov	r4, r0
   1349c:	mov	r0, #0
   134a0:	mov	r1, #8
   134a4:	mov	r2, r6
   134a8:	bl	19228 <__assert_fail@plt+0x7d40>
   134ac:	mov	r6, r0
   134b0:	mov	r0, #1
   134b4:	mov	r1, sl
   134b8:	bl	197e8 <__assert_fail@plt+0x8300>
   134bc:	str	r0, [sp]
   134c0:	mov	r0, #0
   134c4:	mov	r1, #0
   134c8:	mov	r2, r4
   134cc:	mov	r3, r6
   134d0:	bl	11308 <error@plt>
   134d4:	ldr	r1, [sp, #8]
   134d8:	mov	r0, r8
   134dc:	mov	r2, r9
   134e0:	bl	132a4 <__assert_fail@plt+0x1dbc>
   134e4:	blx	r5
   134e8:	mvn	r4, #0
   134ec:	mov	r0, r4
   134f0:	sub	sp, fp, #28
   134f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134fc:	add	fp, sp, #24
   13500:	ldr	r6, [r1]
   13504:	cmp	r6, #0
   13508:	beq	1356c <__assert_fail@plt+0x2084>
   1350c:	mov	r8, r1
   13510:	mov	r7, r2
   13514:	mov	r1, r2
   13518:	mov	r2, r3
   1351c:	mov	r4, r3
   13520:	mov	r9, r0
   13524:	bl	1126c <memcmp@plt>
   13528:	cmp	r0, #0
   1352c:	beq	13564 <__assert_fail@plt+0x207c>
   13530:	add	r7, r7, r4
   13534:	add	r5, r8, #4
   13538:	ldr	r6, [r5]
   1353c:	cmp	r6, #0
   13540:	beq	1356c <__assert_fail@plt+0x2084>
   13544:	mov	r0, r9
   13548:	mov	r1, r7
   1354c:	mov	r2, r4
   13550:	bl	1126c <memcmp@plt>
   13554:	add	r7, r7, r4
   13558:	add	r5, r5, #4
   1355c:	cmp	r0, #0
   13560:	bne	13538 <__assert_fail@plt+0x2050>
   13564:	mov	r0, r6
   13568:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1356c:	mov	r6, #0
   13570:	mov	r0, r6
   13574:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13578:	sub	r0, r0, #1
   1357c:	ldrb	r3, [r0, #1]!
   13580:	cmp	r3, #47	; 0x2f
   13584:	beq	1357c <__assert_fail@plt+0x2094>
   13588:	mov	r2, #0
   1358c:	mov	r1, r0
   13590:	uxtb	r3, r3
   13594:	cmp	r3, #47	; 0x2f
   13598:	beq	135c0 <__assert_fail@plt+0x20d8>
   1359c:	cmp	r3, #0
   135a0:	bxeq	lr
   135a4:	tst	r2, #1
   135a8:	mov	r2, #0
   135ac:	movne	r0, r1
   135b0:	ldrb	r3, [r1, #1]!
   135b4:	uxtb	r3, r3
   135b8:	cmp	r3, #47	; 0x2f
   135bc:	bne	1359c <__assert_fail@plt+0x20b4>
   135c0:	ldrb	r3, [r1, #1]!
   135c4:	mov	r2, #1
   135c8:	uxtb	r3, r3
   135cc:	cmp	r3, #47	; 0x2f
   135d0:	bne	1359c <__assert_fail@plt+0x20b4>
   135d4:	b	135c0 <__assert_fail@plt+0x20d8>
   135d8:	push	{r4, sl, fp, lr}
   135dc:	add	fp, sp, #8
   135e0:	mov	r4, r0
   135e4:	bl	11374 <strlen@plt>
   135e8:	mov	r1, r0
   135ec:	sub	r2, r4, #1
   135f0:	mov	r0, r1
   135f4:	cmp	r1, #2
   135f8:	popcc	{r4, sl, fp, pc}
   135fc:	ldrb	r3, [r2, r0]
   13600:	sub	r1, r0, #1
   13604:	cmp	r3, #47	; 0x2f
   13608:	beq	135f0 <__assert_fail@plt+0x2108>
   1360c:	pop	{r4, sl, fp, pc}
   13610:	movw	r1, #53680	; 0xd1b0
   13614:	movt	r1, #2
   13618:	str	r0, [r1]
   1361c:	bx	lr
   13620:	push	{r4, r5, r6, sl, fp, lr}
   13624:	add	fp, sp, #16
   13628:	sub	sp, sp, #8
   1362c:	movw	r6, #53648	; 0xd190
   13630:	movt	r6, #2
   13634:	ldr	r5, [r6]
   13638:	mov	r0, r5
   1363c:	bl	13a90 <__assert_fail@plt+0x25a8>
   13640:	cmp	r0, #0
   13644:	beq	13684 <__assert_fail@plt+0x219c>
   13648:	mov	r0, #1
   1364c:	mov	r2, #0
   13650:	mov	r3, #0
   13654:	mov	r4, #0
   13658:	str	r0, [sp]
   1365c:	mov	r0, r5
   13660:	bl	13af4 <__assert_fail@plt+0x260c>
   13664:	cmp	r0, #0
   13668:	bne	13688 <__assert_fail@plt+0x21a0>
   1366c:	ldr	r0, [r6]
   13670:	bl	13838 <__assert_fail@plt+0x2350>
   13674:	mov	r4, r0
   13678:	cmp	r0, #0
   1367c:	movwne	r4, #1
   13680:	b	13688 <__assert_fail@plt+0x21a0>
   13684:	mov	r4, #0
   13688:	ldr	r0, [r6]
   1368c:	bl	1a730 <__assert_fail@plt+0x9248>
   13690:	cmp	r4, #0
   13694:	cmpeq	r0, #0
   13698:	bne	136a8 <__assert_fail@plt+0x21c0>
   1369c:	sub	sp, fp, #16
   136a0:	pop	{r4, r5, r6, sl, fp, lr}
   136a4:	b	1374c <__assert_fail@plt+0x2264>
   136a8:	movw	r1, #49002	; 0xbf6a
   136ac:	mov	r0, #0
   136b0:	mov	r2, #5
   136b4:	movt	r1, #1
   136b8:	bl	11278 <dcgettext@plt>
   136bc:	mov	r4, r0
   136c0:	movw	r0, #53680	; 0xd1b0
   136c4:	movt	r0, #2
   136c8:	ldr	r6, [r0]
   136cc:	bl	1138c <__errno_location@plt>
   136d0:	ldr	r5, [r0]
   136d4:	cmp	r6, #0
   136d8:	bne	136f4 <__assert_fail@plt+0x220c>
   136dc:	movw	r2, #48999	; 0xbf67
   136e0:	mov	r0, #0
   136e4:	mov	r1, r5
   136e8:	mov	r3, r4
   136ec:	movt	r2, #1
   136f0:	b	13714 <__assert_fail@plt+0x222c>
   136f4:	mov	r0, r6
   136f8:	bl	19470 <__assert_fail@plt+0x7f88>
   136fc:	movw	r2, #49021	; 0xbf7d
   13700:	mov	r3, r0
   13704:	str	r4, [sp]
   13708:	mov	r0, #0
   1370c:	mov	r1, r5
   13710:	movt	r2, #1
   13714:	bl	11308 <error@plt>
   13718:	bl	1374c <__assert_fail@plt+0x2264>
   1371c:	movw	r0, #53552	; 0xd130
   13720:	movt	r0, #2
   13724:	ldr	r0, [r0]
   13728:	bl	11248 <_exit@plt>
   1372c:	movw	r1, #53684	; 0xd1b4
   13730:	movt	r1, #2
   13734:	str	r0, [r1, #4]
   13738:	bx	lr
   1373c:	movw	r1, #53684	; 0xd1b4
   13740:	movt	r1, #2
   13744:	strb	r0, [r1]
   13748:	bx	lr
   1374c:	push	{r4, r5, r6, sl, fp, lr}
   13750:	add	fp, sp, #16
   13754:	sub	sp, sp, #8
   13758:	movw	r0, #53652	; 0xd194
   1375c:	movt	r0, #2
   13760:	ldr	r0, [r0]
   13764:	bl	1a730 <__assert_fail@plt+0x9248>
   13768:	cmp	r0, #0
   1376c:	beq	13794 <__assert_fail@plt+0x22ac>
   13770:	movw	r5, #53684	; 0xd1b4
   13774:	movt	r5, #2
   13778:	ldrb	r0, [r5]
   1377c:	cmp	r0, #0
   13780:	beq	137c0 <__assert_fail@plt+0x22d8>
   13784:	bl	1138c <__errno_location@plt>
   13788:	ldr	r0, [r0]
   1378c:	cmp	r0, #32
   13790:	bne	137c0 <__assert_fail@plt+0x22d8>
   13794:	movw	r0, #53640	; 0xd188
   13798:	movt	r0, #2
   1379c:	ldr	r0, [r0]
   137a0:	bl	1a730 <__assert_fail@plt+0x9248>
   137a4:	cmp	r0, #0
   137a8:	subeq	sp, fp, #16
   137ac:	popeq	{r4, r5, r6, sl, fp, pc}
   137b0:	movw	r0, #53552	; 0xd130
   137b4:	movt	r0, #2
   137b8:	ldr	r0, [r0]
   137bc:	bl	11248 <_exit@plt>
   137c0:	movw	r1, #49028	; 0xbf84
   137c4:	mov	r0, #0
   137c8:	mov	r2, #5
   137cc:	movt	r1, #1
   137d0:	bl	11278 <dcgettext@plt>
   137d4:	ldr	r6, [r5, #4]
   137d8:	mov	r4, r0
   137dc:	bl	1138c <__errno_location@plt>
   137e0:	ldr	r5, [r0]
   137e4:	cmp	r6, #0
   137e8:	bne	13804 <__assert_fail@plt+0x231c>
   137ec:	movw	r2, #48999	; 0xbf67
   137f0:	mov	r0, #0
   137f4:	mov	r1, r5
   137f8:	mov	r3, r4
   137fc:	movt	r2, #1
   13800:	b	13824 <__assert_fail@plt+0x233c>
   13804:	mov	r0, r6
   13808:	bl	19470 <__assert_fail@plt+0x7f88>
   1380c:	movw	r2, #49021	; 0xbf7d
   13810:	mov	r3, r0
   13814:	str	r4, [sp]
   13818:	mov	r0, #0
   1381c:	mov	r1, r5
   13820:	movt	r2, #1
   13824:	bl	11308 <error@plt>
   13828:	movw	r0, #53552	; 0xd130
   1382c:	movt	r0, #2
   13830:	ldr	r0, [r0]
   13834:	bl	11248 <_exit@plt>
   13838:	push	{r4, sl, fp, lr}
   1383c:	add	fp, sp, #8
   13840:	sub	sp, sp, #8
   13844:	mov	r4, r0
   13848:	cmp	r0, #0
   1384c:	beq	13868 <__assert_fail@plt+0x2380>
   13850:	mov	r0, r4
   13854:	bl	11338 <__freading@plt>
   13858:	cmp	r0, #0
   1385c:	ldrbne	r0, [r4, #1]
   13860:	tstne	r0, #1
   13864:	bne	13878 <__assert_fail@plt+0x2390>
   13868:	mov	r0, r4
   1386c:	sub	sp, fp, #8
   13870:	pop	{r4, sl, fp, lr}
   13874:	b	1120c <fflush@plt>
   13878:	mov	r0, #1
   1387c:	mov	r2, #0
   13880:	mov	r3, #0
   13884:	str	r0, [sp]
   13888:	mov	r0, r4
   1388c:	bl	13af4 <__assert_fail@plt+0x260c>
   13890:	mov	r0, r4
   13894:	sub	sp, fp, #8
   13898:	pop	{r4, sl, fp, lr}
   1389c:	b	1120c <fflush@plt>
   138a0:	ldr	r1, [r0, #16]
   138a4:	and	r1, r1, #61440	; 0xf000
   138a8:	sub	r1, r1, #4096	; 0x1000
   138ac:	lsr	r2, r1, #12
   138b0:	cmp	r2, #11
   138b4:	bhi	13920 <__assert_fail@plt+0x2438>
   138b8:	movw	r1, #49072	; 0xbfb0
   138bc:	add	r3, pc, #4
   138c0:	movt	r1, #1
   138c4:	ldr	pc, [r3, r2, lsl #2]
   138c8:	strdeq	r3, [r1], -r8
   138cc:	andeq	r3, r1, ip, lsl #18
   138d0:	andeq	r3, r1, r0, lsr #18
   138d4:	andeq	r3, r1, r0, lsl #18
   138d8:	andeq	r3, r1, r0, lsr #18
   138dc:	andeq	r3, r1, r4, lsr r9
   138e0:	andeq	r3, r1, r0, lsr #18
   138e4:	andeq	r3, r1, r0, ror r9
   138e8:	andeq	r3, r1, r0, lsr #18
   138ec:	andeq	r3, r1, r8, asr #18
   138f0:	andeq	r3, r1, r0, lsr #18
   138f4:	andeq	r3, r1, ip, asr r9
   138f8:	movw	r1, #49138	; 0xbff2
   138fc:	movt	r1, #1
   13900:	mov	r0, #0
   13904:	mov	r2, #5
   13908:	b	11278 <dcgettext@plt>
   1390c:	movw	r1, #49115	; 0xbfdb
   13910:	movt	r1, #1
   13914:	mov	r0, #0
   13918:	mov	r2, #5
   1391c:	b	11278 <dcgettext@plt>
   13920:	movw	r1, #49150	; 0xbffe
   13924:	movt	r1, #1
   13928:	mov	r0, #0
   1392c:	mov	r2, #5
   13930:	b	11278 <dcgettext@plt>
   13934:	movw	r1, #49096	; 0xbfc8
   13938:	movt	r1, #1
   1393c:	mov	r0, #0
   13940:	mov	r2, #5
   13944:	b	11278 <dcgettext@plt>
   13948:	movw	r1, #49082	; 0xbfba
   1394c:	movt	r1, #1
   13950:	mov	r0, #0
   13954:	mov	r2, #5
   13958:	b	11278 <dcgettext@plt>
   1395c:	movw	r1, #49143	; 0xbff7
   13960:	movt	r1, #1
   13964:	mov	r0, #0
   13968:	mov	r2, #5
   1396c:	b	11278 <dcgettext@plt>
   13970:	ldrd	r0, [r0, #48]	; 0x30
   13974:	orrs	r0, r0, r1
   13978:	movw	r1, #49059	; 0xbfa3
   1397c:	movw	r0, #49040	; 0xbf90
   13980:	movt	r1, #1
   13984:	movt	r0, #1
   13988:	moveq	r1, r0
   1398c:	mov	r0, #0
   13990:	mov	r2, #5
   13994:	b	11278 <dcgettext@plt>
   13998:	push	{fp, lr}
   1399c:	mov	fp, sp
   139a0:	bl	139b0 <__assert_fail@plt+0x24c8>
   139a4:	cmp	r0, #0
   139a8:	popne	{fp, pc}
   139ac:	bl	1a51c <__assert_fail@plt+0x9034>
   139b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139b4:	add	fp, sp, #28
   139b8:	push	{r2}		; (str r2, [sp, #-4]!)
   139bc:	mov	sl, r1
   139c0:	mov	r7, r0
   139c4:	bl	13578 <__assert_fail@plt+0x2090>
   139c8:	sub	r4, r0, r7
   139cc:	bl	135d8 <__assert_fail@plt+0x20f0>
   139d0:	mov	r6, r0
   139d4:	add	r5, r4, r0
   139d8:	mov	r0, sl
   139dc:	bl	11374 <strlen@plt>
   139e0:	mov	r9, r0
   139e4:	cmp	r6, #0
   139e8:	beq	13a10 <__assert_fail@plt+0x2528>
   139ec:	add	r0, r7, r5
   139f0:	mov	r4, #0
   139f4:	ldrb	r0, [r0, #-1]
   139f8:	cmp	r0, #47	; 0x2f
   139fc:	beq	13a20 <__assert_fail@plt+0x2538>
   13a00:	ldrb	r0, [sl]
   13a04:	subs	r4, r0, #47	; 0x2f
   13a08:	movwne	r4, #47	; 0x2f
   13a0c:	b	13a20 <__assert_fail@plt+0x2538>
   13a10:	ldrb	r0, [sl]
   13a14:	mov	r4, #0
   13a18:	cmp	r0, #47	; 0x2f
   13a1c:	movweq	r4, #46	; 0x2e
   13a20:	uxtb	r8, r4
   13a24:	add	r0, r9, r5
   13a28:	cmp	r8, #0
   13a2c:	movwne	r8, #1
   13a30:	add	r0, r0, r8
   13a34:	add	r0, r0, #1
   13a38:	bl	1a6ac <__assert_fail@plt+0x91c4>
   13a3c:	mov	r6, r0
   13a40:	cmp	r0, #0
   13a44:	beq	13a84 <__assert_fail@plt+0x259c>
   13a48:	mov	r0, r6
   13a4c:	mov	r1, r7
   13a50:	mov	r2, r5
   13a54:	mvn	r3, #0
   13a58:	bl	114dc <__mempcpy_chk@plt>
   13a5c:	ldr	r1, [sp]
   13a60:	strb	r4, [r0], r8
   13a64:	mov	r2, r9
   13a68:	mvn	r3, #0
   13a6c:	cmp	r1, #0
   13a70:	strne	r0, [r1]
   13a74:	mov	r1, sl
   13a78:	bl	114dc <__mempcpy_chk@plt>
   13a7c:	mov	r1, #0
   13a80:	strb	r1, [r0]
   13a84:	mov	r0, r6
   13a88:	sub	sp, fp, #28
   13a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a90:	ldrd	r2, [r0, #16]
   13a94:	mov	r1, #0
   13a98:	cmp	r3, r2
   13a9c:	bhi	13ac4 <__assert_fail@plt+0x25dc>
   13aa0:	ldmib	r0, {r1, r2}
   13aa4:	ldrb	r3, [r0, #1]
   13aa8:	sub	r1, r2, r1
   13aac:	mov	r2, #0
   13ab0:	tst	r3, #1
   13ab4:	ldrne	r2, [r0, #36]	; 0x24
   13ab8:	ldrne	r0, [r0, #44]	; 0x2c
   13abc:	subne	r2, r0, r2
   13ac0:	add	r1, r1, r2
   13ac4:	mov	r0, r1
   13ac8:	bx	lr
   13acc:	push	{r4, r5, r6, sl, fp, lr}
   13ad0:	add	fp, sp, #16
   13ad4:	mov	r4, r0
   13ad8:	bl	1138c <__errno_location@plt>
   13adc:	ldr	r6, [r0]
   13ae0:	mov	r5, r0
   13ae4:	mov	r0, r4
   13ae8:	bl	11230 <free@plt>
   13aec:	str	r6, [r5]
   13af0:	pop	{r4, r5, r6, sl, fp, pc}
   13af4:	push	{r4, r5, r6, r7, fp, lr}
   13af8:	add	fp, sp, #16
   13afc:	sub	sp, sp, #8
   13b00:	mov	r4, r0
   13b04:	ldr	r0, [r0, #4]
   13b08:	mov	r5, r3
   13b0c:	mov	r6, r2
   13b10:	ldr	r1, [r4, #8]
   13b14:	cmp	r1, r0
   13b18:	bne	13b34 <__assert_fail@plt+0x264c>
   13b1c:	ldrd	r0, [r4, #16]
   13b20:	cmp	r1, r0
   13b24:	bne	13b34 <__assert_fail@plt+0x264c>
   13b28:	ldr	r0, [r4, #36]	; 0x24
   13b2c:	cmp	r0, #0
   13b30:	beq	13b4c <__assert_fail@plt+0x2664>
   13b34:	mov	r0, r4
   13b38:	mov	r2, r6
   13b3c:	mov	r3, r5
   13b40:	sub	sp, fp, #16
   13b44:	pop	{r4, r5, r6, r7, fp, lr}
   13b48:	b	113e0 <fseeko64@plt>
   13b4c:	ldr	r7, [fp, #8]
   13b50:	mov	r0, r4
   13b54:	bl	113bc <fileno@plt>
   13b58:	mov	r2, r6
   13b5c:	mov	r3, r5
   13b60:	str	r7, [sp]
   13b64:	bl	112d8 <lseek64@plt>
   13b68:	and	r2, r0, r1
   13b6c:	cmn	r2, #1
   13b70:	mvneq	r0, #0
   13b74:	subeq	sp, fp, #16
   13b78:	popeq	{r4, r5, r6, r7, fp, pc}
   13b7c:	strd	r0, [r4, #80]	; 0x50
   13b80:	ldr	r0, [r4]
   13b84:	bic	r0, r0, #16
   13b88:	str	r0, [r4]
   13b8c:	mov	r0, #0
   13b90:	sub	sp, fp, #16
   13b94:	pop	{r4, r5, r6, r7, fp, pc}
   13b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b9c:	add	fp, sp, #28
   13ba0:	sub	sp, sp, #28
   13ba4:	cmp	r1, #4096	; 0x1000
   13ba8:	bcs	13bc4 <__assert_fail@plt+0x26dc>
   13bac:	mov	sl, r0
   13bb0:	and	r0, r1, #516	; 0x204
   13bb4:	mov	r6, r1
   13bb8:	cmp	r0, #516	; 0x204
   13bbc:	tstne	r6, #18
   13bc0:	bne	13be0 <__assert_fail@plt+0x26f8>
   13bc4:	bl	1138c <__errno_location@plt>
   13bc8:	mov	r1, #22
   13bcc:	mov	r4, #0
   13bd0:	str	r1, [r0]
   13bd4:	mov	r0, r4
   13bd8:	sub	sp, fp, #28
   13bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be0:	mov	r0, #1
   13be4:	mov	r1, #96	; 0x60
   13be8:	mov	r5, r2
   13bec:	bl	1a658 <__assert_fail@plt+0x9170>
   13bf0:	cmp	r0, #0
   13bf4:	beq	141b0 <__assert_fail@plt+0x2cc8>
   13bf8:	mov	r4, r0
   13bfc:	mvn	r0, #99	; 0x63
   13c00:	tst	r6, #2
   13c04:	mov	r1, r6
   13c08:	str	r0, [r4, #32]
   13c0c:	bic	r0, r6, #516	; 0x204
   13c10:	str	r5, [r4, #44]	; 0x2c
   13c14:	str	r4, [sp, #24]
   13c18:	orrne	r1, r0, #4
   13c1c:	str	r1, [r4, #48]	; 0x30
   13c20:	ldr	r0, [sl]
   13c24:	cmp	r0, #0
   13c28:	beq	13c8c <__assert_fail@plt+0x27a4>
   13c2c:	add	r7, sl, #4
   13c30:	mov	r4, #0
   13c34:	bl	11374 <strlen@plt>
   13c38:	cmp	r0, r4
   13c3c:	movhi	r4, r0
   13c40:	ldr	r0, [r7], #4
   13c44:	cmp	r0, #0
   13c48:	bne	13c34 <__assert_fail@plt+0x274c>
   13c4c:	add	r0, r4, #1
   13c50:	ldr	r4, [sp, #24]
   13c54:	cmp	r0, #4096	; 0x1000
   13c58:	movls	r0, #4096	; 0x1000
   13c5c:	ldr	r1, [r4, #36]	; 0x24
   13c60:	add	r0, r0, #256	; 0x100
   13c64:	adds	r1, r0, r1
   13c68:	bcc	13ca0 <__assert_fail@plt+0x27b8>
   13c6c:	ldr	r0, [r4, #24]
   13c70:	bl	13acc <__assert_fail@plt+0x25e4>
   13c74:	mov	r0, #0
   13c78:	str	r0, [r4, #24]
   13c7c:	bl	1138c <__errno_location@plt>
   13c80:	mov	r1, #36	; 0x24
   13c84:	str	r1, [r0]
   13c88:	b	141a8 <__assert_fail@plt+0x2cc0>
   13c8c:	mov	r0, #4096	; 0x1000
   13c90:	ldr	r1, [r4, #36]	; 0x24
   13c94:	add	r0, r0, #256	; 0x100
   13c98:	adds	r1, r0, r1
   13c9c:	bcs	13c6c <__assert_fail@plt+0x2784>
   13ca0:	str	r1, [r4, #36]	; 0x24
   13ca4:	ldr	r0, [r4, #24]
   13ca8:	bl	1a6dc <__assert_fail@plt+0x91f4>
   13cac:	cmp	r0, #0
   13cb0:	beq	13d14 <__assert_fail@plt+0x282c>
   13cb4:	str	r0, [r4, #24]
   13cb8:	ldr	r0, [sl]
   13cbc:	cmp	r0, #0
   13cc0:	beq	13d28 <__assert_fail@plt+0x2840>
   13cc4:	mov	r0, #176	; 0xb0
   13cc8:	bl	1a6ac <__assert_fail@plt+0x91c4>
   13ccc:	cmp	r0, #0
   13cd0:	beq	141a0 <__assert_fail@plt+0x2cb8>
   13cd4:	ldr	r1, [r4, #24]
   13cd8:	mov	r7, r0
   13cdc:	mov	r0, #0
   13ce0:	mov	r2, #196608	; 0x30000
   13ce4:	strb	r0, [r7, #168]	; 0xa8
   13ce8:	str	r2, [r7, #58]	; 0x3a
   13cec:	mvn	r2, #0
   13cf0:	str	r0, [r7, #12]
   13cf4:	str	r0, [r7, #16]
   13cf8:	str	r0, [r7, #20]
   13cfc:	str	r4, [r7, #44]	; 0x2c
   13d00:	str	r2, [r7, #48]	; 0x30
   13d04:	str	r0, [r7, #52]	; 0x34
   13d08:	str	r1, [r7, #28]
   13d0c:	str	r0, [r7, #32]
   13d10:	b	13d2c <__assert_fail@plt+0x2844>
   13d14:	ldr	r0, [r4, #24]
   13d18:	bl	13acc <__assert_fail@plt+0x25e4>
   13d1c:	mov	r0, #0
   13d20:	str	r0, [r4, #24]
   13d24:	b	141a8 <__assert_fail@plt+0x2cc0>
   13d28:	mov	r7, #0
   13d2c:	cmp	r5, #0
   13d30:	ldrbne	r0, [r4, #49]	; 0x31
   13d34:	ubfxne	r0, r0, #2, #1
   13d38:	ldr	r4, [sl]
   13d3c:	moveq	r0, #1
   13d40:	str	r0, [sp, #12]
   13d44:	cmp	r4, #0
   13d48:	beq	13eb0 <__assert_fail@plt+0x29c8>
   13d4c:	tst	r6, #2048	; 0x800
   13d50:	str	r7, [sp, #20]
   13d54:	str	r5, [sp, #16]
   13d58:	bne	13ed4 <__assert_fail@plt+0x29ec>
   13d5c:	mov	r0, #0
   13d60:	mov	r8, #0
   13d64:	mov	r5, #0
   13d68:	str	r0, [sp, #8]
   13d6c:	mov	r0, r4
   13d70:	bl	11374 <strlen@plt>
   13d74:	mov	r9, r0
   13d78:	cmp	r0, #3
   13d7c:	bcc	13dac <__assert_fail@plt+0x28c4>
   13d80:	add	r0, r4, r9
   13d84:	ldrb	r0, [r0, #-1]
   13d88:	cmp	r0, #47	; 0x2f
   13d8c:	bne	13dac <__assert_fail@plt+0x28c4>
   13d90:	sub	r0, r4, #2
   13d94:	ldrb	r1, [r0, r9]
   13d98:	cmp	r1, #47	; 0x2f
   13d9c:	bne	13dac <__assert_fail@plt+0x28c4>
   13da0:	sub	r9, r9, #1
   13da4:	cmp	r9, #1
   13da8:	bhi	13d94 <__assert_fail@plt+0x28ac>
   13dac:	add	r0, r9, #176	; 0xb0
   13db0:	bic	r0, r0, #7
   13db4:	bl	1a6ac <__assert_fail@plt+0x91c4>
   13db8:	cmp	r0, #0
   13dbc:	beq	14014 <__assert_fail@plt+0x2b2c>
   13dc0:	add	r6, r0, #168	; 0xa8
   13dc4:	mov	r7, r0
   13dc8:	mov	r1, r4
   13dcc:	mov	r2, r9
   13dd0:	mov	r0, r6
   13dd4:	bl	11254 <memcpy@plt>
   13dd8:	ldr	r0, [sp, #24]
   13ddc:	mov	r4, #0
   13de0:	mov	r1, #196608	; 0x30000
   13de4:	cmp	r8, #0
   13de8:	strb	r4, [r6, r9]
   13dec:	str	r1, [r7, #58]	; 0x3a
   13df0:	add	r1, r7, #44	; 0x2c
   13df4:	ldr	r2, [r0, #24]
   13df8:	stm	r1, {r0, r4, r9}
   13dfc:	ldr	r1, [sp, #20]
   13e00:	str	r1, [r7, #4]
   13e04:	str	r4, [r7, #12]
   13e08:	str	r4, [r7, #16]
   13e0c:	str	r4, [r7, #20]
   13e10:	str	r6, [r7, #24]
   13e14:	str	r2, [r7, #28]
   13e18:	ldr	r2, [sp, #12]
   13e1c:	mov	r1, r8
   13e20:	str	r4, [r7, #32]
   13e24:	movwne	r1, #1
   13e28:	tst	r2, r1
   13e2c:	beq	13e5c <__assert_fail@plt+0x2974>
   13e30:	mov	r0, #2
   13e34:	str	r0, [r7, #112]	; 0x70
   13e38:	mov	r0, #11
   13e3c:	str	r4, [r7, #116]	; 0x74
   13e40:	strh	r0, [r7, #56]	; 0x38
   13e44:	ldr	r0, [sp, #16]
   13e48:	cmp	r0, #0
   13e4c:	beq	13e78 <__assert_fail@plt+0x2990>
   13e50:	str	r8, [r7, #8]
   13e54:	mov	r8, r7
   13e58:	b	13e90 <__assert_fail@plt+0x29a8>
   13e5c:	mov	r1, r7
   13e60:	mov	r2, #0
   13e64:	bl	141fc <__assert_fail@plt+0x2d14>
   13e68:	strh	r0, [r7, #56]	; 0x38
   13e6c:	ldr	r0, [sp, #16]
   13e70:	cmp	r0, #0
   13e74:	bne	13e50 <__assert_fail@plt+0x2968>
   13e78:	cmp	r8, #0
   13e7c:	str	r4, [r7, #8]
   13e80:	beq	13ea4 <__assert_fail@plt+0x29bc>
   13e84:	ldr	r0, [sp, #8]
   13e88:	str	r7, [sp, #8]
   13e8c:	str	r7, [r0, #8]
   13e90:	ldr	r4, [sl, #4]!
   13e94:	add	r5, r5, #1
   13e98:	cmp	r4, #0
   13e9c:	bne	13d6c <__assert_fail@plt+0x2884>
   13ea0:	b	14024 <__assert_fail@plt+0x2b3c>
   13ea4:	mov	r0, r7
   13ea8:	str	r7, [sp, #8]
   13eac:	b	13e54 <__assert_fail@plt+0x296c>
   13eb0:	ldr	r4, [sp, #24]
   13eb4:	mov	r8, #0
   13eb8:	mov	r0, #176	; 0xb0
   13ebc:	bl	1a6ac <__assert_fail@plt+0x91c4>
   13ec0:	cmp	r0, #0
   13ec4:	bne	14080 <__assert_fail@plt+0x2b98>
   13ec8:	mov	r0, #0
   13ecc:	str	r0, [r4]
   13ed0:	b	14164 <__assert_fail@plt+0x2c7c>
   13ed4:	add	r0, sl, #4
   13ed8:	mov	r9, #0
   13edc:	mov	r8, #0
   13ee0:	mov	r5, #0
   13ee4:	str	r0, [sp, #8]
   13ee8:	ldr	r0, [sp, #12]
   13eec:	eor	r0, r0, #1
   13ef0:	str	r0, [sp, #12]
   13ef4:	mov	r0, #0
   13ef8:	str	r0, [sp, #4]
   13efc:	mov	r0, r4
   13f00:	mov	sl, r5
   13f04:	bl	11374 <strlen@plt>
   13f08:	mov	r7, r0
   13f0c:	add	r0, r0, #176	; 0xb0
   13f10:	bic	r0, r0, #7
   13f14:	bl	1a6ac <__assert_fail@plt+0x91c4>
   13f18:	cmp	r0, #0
   13f1c:	beq	14014 <__assert_fail@plt+0x2b2c>
   13f20:	add	r6, r0, #168	; 0xa8
   13f24:	mov	r5, r0
   13f28:	mov	r1, r4
   13f2c:	mov	r2, r7
   13f30:	mov	r0, r6
   13f34:	bl	11254 <memcpy@plt>
   13f38:	ldr	r0, [sp, #24]
   13f3c:	mov	r1, #196608	; 0x30000
   13f40:	strb	r9, [r6, r7]
   13f44:	str	r1, [r5, #58]	; 0x3a
   13f48:	ldr	r1, [sp, #20]
   13f4c:	ldr	r2, [r0, #24]
   13f50:	str	r0, [r5, #44]	; 0x2c
   13f54:	str	r9, [r5, #48]	; 0x30
   13f58:	str	r7, [r5, #52]	; 0x34
   13f5c:	str	r1, [r5, #4]
   13f60:	str	r9, [r5, #12]
   13f64:	str	r9, [r5, #16]
   13f68:	str	r9, [r5, #20]
   13f6c:	str	r6, [r5, #24]
   13f70:	clz	r1, r8
   13f74:	lsr	r1, r1, #5
   13f78:	str	r2, [r5, #28]
   13f7c:	ldr	r2, [sp, #12]
   13f80:	str	r9, [r5, #32]
   13f84:	orrs	r1, r2, r1
   13f88:	bne	13fb8 <__assert_fail@plt+0x2ad0>
   13f8c:	mov	r0, #2
   13f90:	str	r0, [r5, #112]	; 0x70
   13f94:	str	r9, [r5, #116]	; 0x74
   13f98:	mov	r0, #11
   13f9c:	strh	r0, [r5, #56]	; 0x38
   13fa0:	ldr	r0, [sp, #16]
   13fa4:	cmp	r0, #0
   13fa8:	beq	13fd4 <__assert_fail@plt+0x2aec>
   13fac:	str	r8, [r5, #8]
   13fb0:	mov	r8, r5
   13fb4:	b	13fec <__assert_fail@plt+0x2b04>
   13fb8:	mov	r1, r5
   13fbc:	mov	r2, #0
   13fc0:	bl	141fc <__assert_fail@plt+0x2d14>
   13fc4:	strh	r0, [r5, #56]	; 0x38
   13fc8:	ldr	r0, [sp, #16]
   13fcc:	cmp	r0, #0
   13fd0:	bne	13fac <__assert_fail@plt+0x2ac4>
   13fd4:	cmp	r8, #0
   13fd8:	str	r9, [r5, #8]
   13fdc:	beq	14008 <__assert_fail@plt+0x2b20>
   13fe0:	ldr	r0, [sp, #4]
   13fe4:	str	r5, [sp, #4]
   13fe8:	str	r5, [r0, #8]
   13fec:	ldr	r0, [sp, #8]
   13ff0:	mov	r5, sl
   13ff4:	add	r5, sl, #1
   13ff8:	ldr	r4, [r0, sl, lsl #2]
   13ffc:	cmp	r4, #0
   14000:	bne	13efc <__assert_fail@plt+0x2a14>
   14004:	b	14024 <__assert_fail@plt+0x2b3c>
   14008:	mov	r0, r5
   1400c:	str	r5, [sp, #4]
   14010:	b	13fb0 <__assert_fail@plt+0x2ac8>
   14014:	ldr	r7, [sp, #20]
   14018:	cmp	r8, #0
   1401c:	bne	1416c <__assert_fail@plt+0x2c84>
   14020:	b	14194 <__assert_fail@plt+0x2cac>
   14024:	ldr	r0, [sp, #16]
   14028:	cmp	r0, #0
   1402c:	beq	14068 <__assert_fail@plt+0x2b80>
   14030:	ldr	r7, [sp, #20]
   14034:	ldr	r4, [sp, #24]
   14038:	cmp	r5, #2
   1403c:	bcc	14070 <__assert_fail@plt+0x2b88>
   14040:	mov	r0, r4
   14044:	mov	r1, r8
   14048:	mov	r2, r5
   1404c:	bl	14394 <__assert_fail@plt+0x2eac>
   14050:	mov	r8, r0
   14054:	mov	r0, #176	; 0xb0
   14058:	bl	1a6ac <__assert_fail@plt+0x91c4>
   1405c:	cmp	r0, #0
   14060:	bne	14080 <__assert_fail@plt+0x2b98>
   14064:	b	13ec8 <__assert_fail@plt+0x29e0>
   14068:	ldr	r7, [sp, #20]
   1406c:	ldr	r4, [sp, #24]
   14070:	mov	r0, #176	; 0xb0
   14074:	bl	1a6ac <__assert_fail@plt+0x91c4>
   14078:	cmp	r0, #0
   1407c:	beq	13ec8 <__assert_fail@plt+0x29e0>
   14080:	ldr	r2, [r4, #24]
   14084:	mov	r1, #0
   14088:	mov	r3, #196608	; 0x30000
   1408c:	str	r0, [r4]
   14090:	str	r1, [r0, #52]	; 0x34
   14094:	strb	r1, [r0, #168]	; 0xa8
   14098:	str	r4, [r0, #44]	; 0x2c
   1409c:	str	r3, [r0, #58]	; 0x3a
   140a0:	str	r2, [r0, #28]
   140a4:	mov	r2, #9
   140a8:	str	r1, [r0, #32]
   140ac:	strh	r2, [r0, #56]	; 0x38
   140b0:	str	r8, [r0, #8]
   140b4:	str	r1, [r0, #12]
   140b8:	str	r1, [r0, #16]
   140bc:	str	r1, [r0, #20]
   140c0:	mov	r1, #1
   140c4:	str	r1, [r0, #48]	; 0x30
   140c8:	ldrh	r0, [r4, #48]	; 0x30
   140cc:	movw	r1, #258	; 0x102
   140d0:	tst	r0, r1
   140d4:	beq	14110 <__assert_fail@plt+0x2c28>
   140d8:	movw	r0, #15052	; 0x3acc
   140dc:	movw	r2, #24860	; 0x611c
   140e0:	movw	r3, #24892	; 0x613c
   140e4:	mov	r1, #0
   140e8:	movt	r0, #1
   140ec:	movt	r2, #1
   140f0:	movt	r3, #1
   140f4:	str	r0, [sp]
   140f8:	mov	r0, #31
   140fc:	bl	167d8 <__assert_fail@plt+0x52f0>
   14100:	cmp	r0, #0
   14104:	str	r0, [r4, #56]	; 0x38
   14108:	bne	14128 <__assert_fail@plt+0x2c40>
   1410c:	b	14164 <__assert_fail@plt+0x2c7c>
   14110:	mov	r0, #32
   14114:	bl	1a6ac <__assert_fail@plt+0x91c4>
   14118:	cmp	r0, #0
   1411c:	str	r0, [r4, #56]	; 0x38
   14120:	beq	14164 <__assert_fail@plt+0x2c7c>
   14124:	bl	1a7b4 <__assert_fail@plt+0x92cc>
   14128:	ldr	r4, [sp, #24]
   1412c:	ldr	r0, [r4, #48]	; 0x30
   14130:	tst	r0, #516	; 0x204
   14134:	bne	141e4 <__assert_fail@plt+0x2cfc>
   14138:	mov	r1, #32768	; 0x8000
   1413c:	tst	r0, #512	; 0x200
   14140:	and	r1, r1, r0, lsl #11
   14144:	orr	r1, r1, #18688	; 0x4900
   14148:	orr	r2, r1, #524288	; 0x80000
   1414c:	bne	141c0 <__assert_fail@plt+0x2cd8>
   14150:	movw	r0, #48176	; 0xbc30
   14154:	mov	r1, r2
   14158:	movt	r0, #1
   1415c:	bl	1ab24 <__assert_fail@plt+0x963c>
   14160:	b	141d0 <__assert_fail@plt+0x2ce8>
   14164:	cmp	r8, #0
   14168:	beq	14194 <__assert_fail@plt+0x2cac>
   1416c:	ldrd	r4, [r8, #8]
   14170:	cmp	r5, #0
   14174:	beq	14180 <__assert_fail@plt+0x2c98>
   14178:	mov	r0, r5
   1417c:	bl	114d0 <closedir@plt>
   14180:	mov	r0, r8
   14184:	bl	13acc <__assert_fail@plt+0x25e4>
   14188:	cmp	r4, #0
   1418c:	mov	r8, r4
   14190:	bne	1416c <__assert_fail@plt+0x2c84>
   14194:	mov	r0, r7
   14198:	bl	13acc <__assert_fail@plt+0x25e4>
   1419c:	ldr	r4, [sp, #24]
   141a0:	ldr	r0, [r4, #24]
   141a4:	bl	13acc <__assert_fail@plt+0x25e4>
   141a8:	mov	r0, r4
   141ac:	bl	13acc <__assert_fail@plt+0x25e4>
   141b0:	mov	r4, #0
   141b4:	mov	r0, r4
   141b8:	sub	sp, fp, #28
   141bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c0:	ldr	r0, [r4, #32]
   141c4:	movw	r1, #48176	; 0xbc30
   141c8:	movt	r1, #1
   141cc:	bl	177dc <__assert_fail@plt+0x62f4>
   141d0:	str	r0, [r4, #28]
   141d4:	cmn	r0, #1
   141d8:	ldrle	r0, [r4, #48]	; 0x30
   141dc:	orrle	r0, r0, #4
   141e0:	strle	r0, [r4, #48]	; 0x30
   141e4:	add	r0, r4, #60	; 0x3c
   141e8:	mvn	r1, #0
   141ec:	bl	1770c <__assert_fail@plt+0x6224>
   141f0:	mov	r0, r4
   141f4:	sub	sp, fp, #28
   141f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141fc:	push	{r4, r5, r6, sl, fp, lr}
   14200:	add	fp, sp, #16
   14204:	sub	sp, sp, #8
   14208:	mov	r4, r1
   1420c:	ldr	r1, [r0, #48]	; 0x30
   14210:	ldr	r3, [r4, #48]	; 0x30
   14214:	add	r5, r4, #64	; 0x40
   14218:	cmp	r3, #0
   1421c:	andeq	r3, r1, #1
   14220:	orreq	r2, r3, r2
   14224:	cmp	r2, #0
   14228:	andseq	r1, r1, #2
   1422c:	beq	14288 <__assert_fail@plt+0x2da0>
   14230:	ldr	r1, [r4, #24]
   14234:	mov	r0, #3
   14238:	mov	r2, r5
   1423c:	bl	1147c <__xstat64@plt>
   14240:	cmp	r0, #0
   14244:	beq	14308 <__assert_fail@plt+0x2e20>
   14248:	bl	1138c <__errno_location@plt>
   1424c:	mov	r6, r0
   14250:	ldr	r0, [r0]
   14254:	cmp	r0, #2
   14258:	bne	142b8 <__assert_fail@plt+0x2dd0>
   1425c:	ldr	r1, [r4, #24]
   14260:	mov	r0, #3
   14264:	mov	r2, r5
   14268:	bl	114b8 <__lxstat64@plt>
   1426c:	cmp	r0, #0
   14270:	bne	142b4 <__assert_fail@plt+0x2dcc>
   14274:	mov	r0, #0
   14278:	str	r0, [r6]
   1427c:	mov	r0, #13
   14280:	sub	sp, fp, #16
   14284:	pop	{r4, r5, r6, sl, fp, pc}
   14288:	ldr	r1, [r0, #32]
   1428c:	ldr	r2, [r4, #24]
   14290:	mov	r0, #256	; 0x100
   14294:	mov	r3, r5
   14298:	str	r0, [sp]
   1429c:	mov	r0, #3
   142a0:	bl	112a8 <__fxstatat64@plt>
   142a4:	cmp	r0, #0
   142a8:	beq	14308 <__assert_fail@plt+0x2e20>
   142ac:	bl	1138c <__errno_location@plt>
   142b0:	mov	r6, r0
   142b4:	ldr	r0, [r6]
   142b8:	vmov.i32	q8, #0	; 0x00000000
   142bc:	add	r1, r5, #80	; 0x50
   142c0:	str	r0, [r4, #32]
   142c4:	mov	r0, #0
   142c8:	vst1.64	{d16-d17}, [r1]
   142cc:	add	r1, r5, #64	; 0x40
   142d0:	str	r0, [r5, #96]	; 0x60
   142d4:	vst1.64	{d16-d17}, [r1]
   142d8:	add	r1, r5, #48	; 0x30
   142dc:	vst1.64	{d16-d17}, [r1]
   142e0:	add	r1, r5, #32
   142e4:	vst1.64	{d16-d17}, [r1]
   142e8:	add	r1, r5, #16
   142ec:	vst1.64	{d16-d17}, [r1]
   142f0:	mov	r1, #100	; 0x64
   142f4:	vst1.64	{d16-d17}, [r5], r1
   142f8:	str	r0, [r5]
   142fc:	mov	r0, #10
   14300:	sub	sp, fp, #16
   14304:	pop	{r4, r5, r6, sl, fp, pc}
   14308:	ldr	r0, [r4, #80]	; 0x50
   1430c:	and	r0, r0, #61440	; 0xf000
   14310:	cmp	r0, #40960	; 0xa000
   14314:	beq	14370 <__assert_fail@plt+0x2e88>
   14318:	cmp	r0, #32768	; 0x8000
   1431c:	moveq	r0, #8
   14320:	subeq	sp, fp, #16
   14324:	popeq	{r4, r5, r6, sl, fp, pc}
   14328:	cmp	r0, #16384	; 0x4000
   1432c:	bne	14364 <__assert_fail@plt+0x2e7c>
   14330:	ldrb	r1, [r4, #168]	; 0xa8
   14334:	mov	r0, #1
   14338:	cmp	r1, #46	; 0x2e
   1433c:	bne	1435c <__assert_fail@plt+0x2e74>
   14340:	ldrb	r1, [r4, #169]	; 0xa9
   14344:	cmp	r1, #0
   14348:	beq	1437c <__assert_fail@plt+0x2e94>
   1434c:	cmp	r1, #46	; 0x2e
   14350:	ldrbeq	r1, [r4, #170]	; 0xaa
   14354:	cmpeq	r1, #0
   14358:	beq	1437c <__assert_fail@plt+0x2e94>
   1435c:	sub	sp, fp, #16
   14360:	pop	{r4, r5, r6, sl, fp, pc}
   14364:	mov	r0, #3
   14368:	sub	sp, fp, #16
   1436c:	pop	{r4, r5, r6, sl, fp, pc}
   14370:	mov	r0, #12
   14374:	sub	sp, fp, #16
   14378:	pop	{r4, r5, r6, sl, fp, pc}
   1437c:	ldr	r1, [r4, #48]	; 0x30
   14380:	mov	r0, #5
   14384:	cmp	r1, #0
   14388:	movweq	r0, #1
   1438c:	sub	sp, fp, #16
   14390:	pop	{r4, r5, r6, sl, fp, pc}
   14394:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14398:	add	fp, sp, #24
   1439c:	ldrd	r8, [r0, #40]	; 0x28
   143a0:	mov	r5, r2
   143a4:	mov	r4, r1
   143a8:	mov	r6, r0
   143ac:	cmp	r8, r2
   143b0:	bcs	143f0 <__assert_fail@plt+0x2f08>
   143b4:	add	r1, r5, #40	; 0x28
   143b8:	cmn	r1, #-1073741823	; 0xc0000001
   143bc:	str	r1, [r6, #40]	; 0x28
   143c0:	bhi	1447c <__assert_fail@plt+0x2f94>
   143c4:	add	r7, r6, #8
   143c8:	lsl	r1, r1, #2
   143cc:	ldr	r0, [r7]
   143d0:	bl	1a6dc <__assert_fail@plt+0x91f4>
   143d4:	cmp	r0, #0
   143d8:	beq	1447c <__assert_fail@plt+0x2f94>
   143dc:	mov	r6, r7
   143e0:	str	r0, [r7]
   143e4:	cmp	r4, #0
   143e8:	bne	143fc <__assert_fail@plt+0x2f14>
   143ec:	b	14410 <__assert_fail@plt+0x2f28>
   143f0:	ldr	r0, [r6, #8]!
   143f4:	cmp	r4, #0
   143f8:	beq	14410 <__assert_fail@plt+0x2f28>
   143fc:	str	r4, [r0], #4
   14400:	ldr	r4, [r4, #8]
   14404:	cmp	r4, #0
   14408:	bne	143fc <__assert_fail@plt+0x2f14>
   1440c:	ldr	r0, [r6]
   14410:	mov	r1, r5
   14414:	mov	r2, #4
   14418:	mov	r3, r9
   1441c:	bl	11464 <qsort@plt>
   14420:	ldr	r7, [r6]
   14424:	subs	r0, r5, #1
   14428:	ldr	r4, [r7]
   1442c:	mov	r1, r4
   14430:	beq	1446c <__assert_fail@plt+0x2f84>
   14434:	mov	r1, r7
   14438:	cmp	r5, #2
   1443c:	ldr	r2, [r1, #4]!
   14440:	str	r2, [r4, #8]
   14444:	beq	14468 <__assert_fail@plt+0x2f80>
   14448:	rsb	r3, r5, #2
   1444c:	mov	r2, r1
   14450:	ldr	r6, [r2, #4]!
   14454:	ldr	r1, [r1]
   14458:	adds	r3, r3, #1
   1445c:	str	r6, [r1, #8]
   14460:	mov	r1, r2
   14464:	bne	14450 <__assert_fail@plt+0x2f68>
   14468:	ldr	r1, [r7, r0, lsl #2]
   1446c:	mov	r0, #0
   14470:	str	r0, [r1, #8]
   14474:	mov	r0, r4
   14478:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1447c:	ldr	r0, [r6, #8]
   14480:	bl	13acc <__assert_fail@plt+0x25e4>
   14484:	mov	r0, #0
   14488:	str	r0, [r6, #40]	; 0x28
   1448c:	str	r0, [r6, #8]
   14490:	mov	r0, r4
   14494:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14498:	push	{r4, r5, r6, r7, fp, lr}
   1449c:	add	fp, sp, #16
   144a0:	mov	r4, r0
   144a4:	ldr	r0, [r0]
   144a8:	cmp	r0, #0
   144ac:	beq	144ec <__assert_fail@plt+0x3004>
   144b0:	ldr	r1, [r0, #48]	; 0x30
   144b4:	cmp	r1, #0
   144b8:	blt	144e0 <__assert_fail@plt+0x2ff8>
   144bc:	ldr	r5, [r0, #8]
   144c0:	cmp	r5, #0
   144c4:	ldreq	r5, [r0, #4]
   144c8:	bl	13acc <__assert_fail@plt+0x25e4>
   144cc:	ldr	r0, [r5, #48]	; 0x30
   144d0:	cmn	r0, #1
   144d4:	mov	r0, r5
   144d8:	bgt	144bc <__assert_fail@plt+0x2fd4>
   144dc:	b	144e4 <__assert_fail@plt+0x2ffc>
   144e0:	mov	r5, r0
   144e4:	mov	r0, r5
   144e8:	bl	13acc <__assert_fail@plt+0x25e4>
   144ec:	ldr	r5, [r4, #4]
   144f0:	cmp	r5, #0
   144f4:	beq	14520 <__assert_fail@plt+0x3038>
   144f8:	ldrd	r6, [r5, #8]
   144fc:	cmp	r7, #0
   14500:	beq	1450c <__assert_fail@plt+0x3024>
   14504:	mov	r0, r7
   14508:	bl	114d0 <closedir@plt>
   1450c:	mov	r0, r5
   14510:	bl	13acc <__assert_fail@plt+0x25e4>
   14514:	cmp	r6, #0
   14518:	mov	r5, r6
   1451c:	bne	144f8 <__assert_fail@plt+0x3010>
   14520:	ldr	r0, [r4, #8]
   14524:	bl	13acc <__assert_fail@plt+0x25e4>
   14528:	ldr	r0, [r4, #24]
   1452c:	bl	13acc <__assert_fail@plt+0x25e4>
   14530:	ldr	r0, [r4, #48]	; 0x30
   14534:	tst	r0, #512	; 0x200
   14538:	bne	14574 <__assert_fail@plt+0x308c>
   1453c:	mov	r6, #0
   14540:	tst	r0, #4
   14544:	bne	14598 <__assert_fail@plt+0x30b0>
   14548:	ldr	r0, [r4, #28]
   1454c:	bl	11458 <fchdir@plt>
   14550:	cmp	r0, #0
   14554:	beq	14628 <__assert_fail@plt+0x3140>
   14558:	bl	1138c <__errno_location@plt>
   1455c:	ldr	r6, [r0]
   14560:	ldr	r0, [r4, #28]
   14564:	bl	114ac <close@plt>
   14568:	cmp	r6, #0
   1456c:	beq	14588 <__assert_fail@plt+0x30a0>
   14570:	b	14598 <__assert_fail@plt+0x30b0>
   14574:	ldr	r0, [r4, #32]
   14578:	mov	r6, #0
   1457c:	cmp	r0, #0
   14580:	blt	14598 <__assert_fail@plt+0x30b0>
   14584:	bl	114ac <close@plt>
   14588:	cmp	r0, #0
   1458c:	beq	14598 <__assert_fail@plt+0x30b0>
   14590:	bl	1138c <__errno_location@plt>
   14594:	ldr	r6, [r0]
   14598:	add	r5, r4, #60	; 0x3c
   1459c:	b	145a4 <__assert_fail@plt+0x30bc>
   145a0:	bl	114ac <close@plt>
   145a4:	mov	r0, r5
   145a8:	bl	17730 <__assert_fail@plt+0x6248>
   145ac:	cmp	r0, #0
   145b0:	bne	145c8 <__assert_fail@plt+0x30e0>
   145b4:	mov	r0, r5
   145b8:	bl	17784 <__assert_fail@plt+0x629c>
   145bc:	cmp	r0, #0
   145c0:	bge	145a0 <__assert_fail@plt+0x30b8>
   145c4:	b	145a4 <__assert_fail@plt+0x30bc>
   145c8:	ldr	r0, [r4, #52]	; 0x34
   145cc:	cmp	r0, #0
   145d0:	beq	145d8 <__assert_fail@plt+0x30f0>
   145d4:	bl	16af4 <__assert_fail@plt+0x560c>
   145d8:	ldrh	r0, [r4, #48]	; 0x30
   145dc:	movw	r1, #258	; 0x102
   145e0:	tst	r0, r1
   145e4:	beq	145fc <__assert_fail@plt+0x3114>
   145e8:	ldr	r0, [r4, #56]	; 0x38
   145ec:	cmp	r0, #0
   145f0:	beq	14604 <__assert_fail@plt+0x311c>
   145f4:	bl	16af4 <__assert_fail@plt+0x560c>
   145f8:	b	14604 <__assert_fail@plt+0x311c>
   145fc:	ldr	r0, [r4, #56]	; 0x38
   14600:	bl	13acc <__assert_fail@plt+0x25e4>
   14604:	mov	r0, r4
   14608:	bl	13acc <__assert_fail@plt+0x25e4>
   1460c:	cmp	r6, #0
   14610:	moveq	r0, #0
   14614:	popeq	{r4, r5, r6, r7, fp, pc}
   14618:	bl	1138c <__errno_location@plt>
   1461c:	str	r6, [r0]
   14620:	mvn	r0, #0
   14624:	pop	{r4, r5, r6, r7, fp, pc}
   14628:	mov	r6, #0
   1462c:	ldr	r0, [r4, #28]
   14630:	bl	114ac <close@plt>
   14634:	cmp	r6, #0
   14638:	beq	14588 <__assert_fail@plt+0x30a0>
   1463c:	b	14598 <__assert_fail@plt+0x30b0>
   14640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14644:	add	fp, sp, #28
   14648:	sub	sp, sp, #4
   1464c:	ldr	r6, [r0]
   14650:	mov	sl, #0
   14654:	cmp	r6, #0
   14658:	beq	14ee0 <__assert_fail@plt+0x39f8>
   1465c:	mov	r4, r0
   14660:	ldr	r0, [r0, #48]	; 0x30
   14664:	tst	r0, #8192	; 0x2000
   14668:	bne	14ee0 <__assert_fail@plt+0x39f8>
   1466c:	ldrh	r1, [r6, #60]	; 0x3c
   14670:	mov	r2, #3
   14674:	strh	r2, [r6, #60]	; 0x3c
   14678:	cmp	r1, #1
   1467c:	beq	146fc <__assert_fail@plt+0x3214>
   14680:	mov	r5, r6
   14684:	cmp	r1, #2
   14688:	bne	14720 <__assert_fail@plt+0x3238>
   1468c:	ldrh	r2, [r5, #56]!	; 0x38
   14690:	movw	r3, #65534	; 0xfffe
   14694:	and	r3, r2, r3
   14698:	cmp	r3, #12
   1469c:	bne	14724 <__assert_fail@plt+0x323c>
   146a0:	mov	r0, r4
   146a4:	mov	r1, r6
   146a8:	mov	r2, #1
   146ac:	bl	141fc <__assert_fail@plt+0x2d14>
   146b0:	strh	r0, [r6, #56]	; 0x38
   146b4:	cmp	r0, #1
   146b8:	ldreq	r0, [r4, #48]	; 0x30
   146bc:	tsteq	r0, #4
   146c0:	bne	149d8 <__assert_fail@plt+0x34f0>
   146c4:	mov	r1, #32768	; 0x8000
   146c8:	tst	r0, #512	; 0x200
   146cc:	and	r1, r1, r0, lsl #11
   146d0:	orr	r1, r1, #18688	; 0x4900
   146d4:	orr	r2, r1, #524288	; 0x80000
   146d8:	bne	14bec <__assert_fail@plt+0x3704>
   146dc:	movw	r0, #48176	; 0xbc30
   146e0:	mov	r1, r2
   146e4:	movt	r0, #1
   146e8:	bl	1ab24 <__assert_fail@plt+0x963c>
   146ec:	cmn	r0, #1
   146f0:	str	r0, [r6, #36]	; 0x24
   146f4:	bgt	14c08 <__assert_fail@plt+0x3720>
   146f8:	b	14c4c <__assert_fail@plt+0x3764>
   146fc:	mov	r0, r4
   14700:	mov	r1, r6
   14704:	mov	r2, #0
   14708:	bl	141fc <__assert_fail@plt+0x2d14>
   1470c:	strh	r0, [r6, #56]	; 0x38
   14710:	mov	sl, r6
   14714:	mov	r0, sl
   14718:	sub	sp, fp, #28
   1471c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14720:	ldrh	r2, [r5, #56]!	; 0x38
   14724:	cmp	r2, #1
   14728:	bne	147a8 <__assert_fail@plt+0x32c0>
   1472c:	cmp	r1, #4
   14730:	bne	14818 <__assert_fail@plt+0x3330>
   14734:	ldrb	r0, [r6, #58]	; 0x3a
   14738:	tst	r0, #2
   1473c:	beq	14748 <__assert_fail@plt+0x3260>
   14740:	ldr	r0, [r6, #36]	; 0x24
   14744:	bl	114ac <close@plt>
   14748:	ldr	r5, [r4, #4]
   1474c:	cmp	r5, #0
   14750:	beq	14784 <__assert_fail@plt+0x329c>
   14754:	ldrd	r8, [r5, #8]
   14758:	cmp	r9, #0
   1475c:	beq	14768 <__assert_fail@plt+0x3280>
   14760:	mov	r0, r9
   14764:	bl	114d0 <closedir@plt>
   14768:	mov	r0, r5
   1476c:	bl	13acc <__assert_fail@plt+0x25e4>
   14770:	cmp	r8, #0
   14774:	mov	r5, r8
   14778:	bne	14754 <__assert_fail@plt+0x326c>
   1477c:	mov	r0, #0
   14780:	str	r0, [r4, #4]
   14784:	mov	r0, #6
   14788:	strh	r0, [r6, #56]	; 0x38
   1478c:	mov	r0, r4
   14790:	mov	r1, r6
   14794:	bl	14ef0 <__assert_fail@plt+0x3a08>
   14798:	mov	sl, r6
   1479c:	mov	r0, sl
   147a0:	sub	sp, fp, #28
   147a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a8:	mov	r7, r6
   147ac:	ldr	r6, [r7, #8]
   147b0:	cmp	r6, #0
   147b4:	beq	148a8 <__assert_fail@plt+0x33c0>
   147b8:	mov	r0, r7
   147bc:	str	r6, [r4]
   147c0:	bl	13acc <__assert_fail@plt+0x25e4>
   147c4:	ldr	r0, [r6, #48]	; 0x30
   147c8:	cmp	r0, #0
   147cc:	beq	148f0 <__assert_fail@plt+0x3408>
   147d0:	ldrh	r0, [r6, #60]	; 0x3c
   147d4:	mov	r7, r6
   147d8:	cmp	r0, #4
   147dc:	beq	147ac <__assert_fail@plt+0x32c4>
   147e0:	cmp	r0, #2
   147e4:	bne	1499c <__assert_fail@plt+0x34b4>
   147e8:	mov	r0, r4
   147ec:	mov	r1, r6
   147f0:	mov	r2, #1
   147f4:	bl	141fc <__assert_fail@plt+0x2d14>
   147f8:	strh	r0, [r6, #56]	; 0x38
   147fc:	cmp	r0, #1
   14800:	ldreq	r0, [r4, #48]	; 0x30
   14804:	tsteq	r0, #4
   14808:	beq	14dec <__assert_fail@plt+0x3904>
   1480c:	mov	r0, #3
   14810:	strh	r0, [r6, #60]	; 0x3c
   14814:	b	1499c <__assert_fail@plt+0x34b4>
   14818:	tst	r0, #64	; 0x40
   1481c:	beq	14838 <__assert_fail@plt+0x3350>
   14820:	ldrd	r2, [r4, #16]
   14824:	ldrd	r8, [r6, #64]	; 0x40
   14828:	eor	r1, r9, r3
   1482c:	eor	r2, r8, r2
   14830:	orrs	r1, r2, r1
   14834:	bne	14734 <__assert_fail@plt+0x324c>
   14838:	ldr	r7, [r4, #4]
   1483c:	cmp	r7, #0
   14840:	beq	14978 <__assert_fail@plt+0x3490>
   14844:	tst	r0, #4096	; 0x1000
   14848:	bne	14940 <__assert_fail@plt+0x3458>
   1484c:	ldr	r3, [r6, #24]
   14850:	mov	r0, r4
   14854:	mov	r1, r6
   14858:	mvn	r2, #0
   1485c:	bl	14fc0 <__assert_fail@plt+0x3ad8>
   14860:	cmp	r0, #0
   14864:	beq	14990 <__assert_fail@plt+0x34a8>
   14868:	bl	1138c <__errno_location@plt>
   1486c:	ldr	r0, [r0]
   14870:	str	r0, [r6, #32]
   14874:	ldrh	r0, [r6, #58]	; 0x3a
   14878:	orr	r0, r0, #1
   1487c:	strh	r0, [r6, #58]	; 0x3a
   14880:	ldr	r0, [r4, #4]
   14884:	cmp	r0, #0
   14888:	beq	14990 <__assert_fail@plt+0x34a8>
   1488c:	ldmib	r0, {r1, r2}
   14890:	ldr	r1, [r1, #24]
   14894:	cmp	r2, #0
   14898:	str	r1, [r0, #24]
   1489c:	mov	r0, r2
   148a0:	bne	1488c <__assert_fail@plt+0x33a4>
   148a4:	b	14990 <__assert_fail@plt+0x34a8>
   148a8:	ldr	r0, [r7, #4]
   148ac:	ldr	r1, [r0, #12]
   148b0:	cmp	r1, #0
   148b4:	beq	14918 <__assert_fail@plt+0x3430>
   148b8:	str	r0, [r4]
   148bc:	mov	r2, #0
   148c0:	ldr	r1, [r4, #24]
   148c4:	ldr	r0, [r0, #40]	; 0x28
   148c8:	strb	r2, [r1, r0]
   148cc:	mov	r0, r4
   148d0:	mov	r1, #3
   148d4:	bl	15268 <__assert_fail@plt+0x3d80>
   148d8:	cmp	r0, #0
   148dc:	beq	14b60 <__assert_fail@plt+0x3678>
   148e0:	mov	r6, r0
   148e4:	mov	r0, r7
   148e8:	bl	13acc <__assert_fail@plt+0x25e4>
   148ec:	b	1499c <__assert_fail@plt+0x34b4>
   148f0:	mov	r0, r4
   148f4:	bl	15e44 <__assert_fail@plt+0x495c>
   148f8:	ldr	r1, [r4, #48]	; 0x30
   148fc:	cmp	r0, #0
   14900:	beq	14920 <__assert_fail@plt+0x3438>
   14904:	orr	r0, r1, #8192	; 0x2000
   14908:	str	r0, [r4, #48]	; 0x30
   1490c:	mov	r0, sl
   14910:	sub	sp, fp, #28
   14914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14918:	mov	sl, r0
   1491c:	b	14b74 <__assert_fail@plt+0x368c>
   14920:	movw	r0, #258	; 0x102
   14924:	tst	r1, r0
   14928:	beq	14c74 <__assert_fail@plt+0x378c>
   1492c:	ldr	r0, [r4, #56]	; 0x38
   14930:	cmp	r0, #0
   14934:	beq	14c7c <__assert_fail@plt+0x3794>
   14938:	bl	16af4 <__assert_fail@plt+0x560c>
   1493c:	b	14c7c <__assert_fail@plt+0x3794>
   14940:	bic	r0, r0, #4096	; 0x1000
   14944:	str	r0, [r4, #48]	; 0x30
   14948:	ldrd	r8, [r7, #8]
   1494c:	cmp	r9, #0
   14950:	beq	1495c <__assert_fail@plt+0x3474>
   14954:	mov	r0, r9
   14958:	bl	114d0 <closedir@plt>
   1495c:	mov	r0, r7
   14960:	bl	13acc <__assert_fail@plt+0x25e4>
   14964:	cmp	r8, #0
   14968:	mov	r7, r8
   1496c:	bne	14948 <__assert_fail@plt+0x3460>
   14970:	mov	r0, #0
   14974:	str	r0, [r4, #4]
   14978:	mov	r0, r4
   1497c:	mov	r1, #3
   14980:	bl	15268 <__assert_fail@plt+0x3d80>
   14984:	cmp	r0, #0
   14988:	str	r0, [r4, #4]
   1498c:	beq	14b28 <__assert_fail@plt+0x3640>
   14990:	ldr	r6, [r4, #4]
   14994:	mov	r0, #0
   14998:	str	r0, [r4, #4]
   1499c:	ldr	r0, [r6, #4]
   149a0:	ldr	r1, [r0, #28]
   149a4:	ldr	r0, [r0, #40]	; 0x28
   149a8:	sub	r2, r0, #1
   149ac:	ldrb	r1, [r1, r2]
   149b0:	cmp	r1, #47	; 0x2f
   149b4:	ldr	r1, [r4, #24]
   149b8:	moveq	r0, r2
   149bc:	mov	r2, #47	; 0x2f
   149c0:	strb	r2, [r1, r0]!
   149c4:	ldr	r2, [r6, #52]	; 0x34
   149c8:	add	r0, r1, #1
   149cc:	add	r1, r6, #168	; 0xa8
   149d0:	add	r2, r2, #1
   149d4:	bl	11224 <memmove@plt>
   149d8:	str	r6, [r4]
   149dc:	ldrh	r0, [r6, #56]	; 0x38
   149e0:	cmp	r0, #11
   149e4:	bne	14a18 <__assert_fail@plt+0x3530>
   149e8:	ldrd	r0, [r6, #112]	; 0x70
   149ec:	eor	r2, r0, #1
   149f0:	orrs	r2, r2, r1
   149f4:	beq	14ac0 <__assert_fail@plt+0x35d8>
   149f8:	eor	r0, r0, #2
   149fc:	orrs	r0, r0, r1
   14a00:	bne	14eec <__assert_fail@plt+0x3a04>
   14a04:	mov	r0, r4
   14a08:	mov	r1, r6
   14a0c:	mov	r2, #0
   14a10:	bl	141fc <__assert_fail@plt+0x2d14>
   14a14:	strh	r0, [r6, #56]	; 0x38
   14a18:	cmp	r0, #1
   14a1c:	bne	14ab0 <__assert_fail@plt+0x35c8>
   14a20:	ldr	r0, [r6, #48]	; 0x30
   14a24:	cmp	r0, #0
   14a28:	ldrdeq	r0, [r6, #64]	; 0x40
   14a2c:	strdeq	r0, [r4, #16]
   14a30:	movw	r1, #258	; 0x102
   14a34:	ldrh	r0, [r4, #48]	; 0x30
   14a38:	tst	r0, r1
   14a3c:	beq	14ad0 <__assert_fail@plt+0x35e8>
   14a40:	mov	r0, #24
   14a44:	bl	1a6ac <__assert_fail@plt+0x91c4>
   14a48:	cmp	r0, #0
   14a4c:	beq	14b00 <__assert_fail@plt+0x3618>
   14a50:	mov	r7, r0
   14a54:	ldrd	r0, [r6, #64]	; 0x40
   14a58:	add	r2, r7, #8
   14a5c:	stm	r7, {r0, r1}
   14a60:	ldrd	r0, [r6, #160]	; 0xa0
   14a64:	stm	r2, {r0, r1, r6}
   14a68:	mov	r1, r7
   14a6c:	ldr	r0, [r4, #56]	; 0x38
   14a70:	bl	17410 <__assert_fail@plt+0x5f28>
   14a74:	cmp	r0, r7
   14a78:	beq	14b50 <__assert_fail@plt+0x3668>
   14a7c:	mov	r4, r0
   14a80:	mov	r0, r7
   14a84:	bl	13acc <__assert_fail@plt+0x25e4>
   14a88:	cmp	r4, #0
   14a8c:	beq	14b00 <__assert_fail@plt+0x3618>
   14a90:	ldr	r0, [r4, #16]
   14a94:	mov	r1, #2
   14a98:	mov	sl, r6
   14a9c:	strh	r1, [r6, #56]	; 0x38
   14aa0:	str	r0, [r6]
   14aa4:	mov	r0, sl
   14aa8:	sub	sp, fp, #28
   14aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab0:	mov	sl, r6
   14ab4:	mov	r0, sl
   14ab8:	sub	sp, fp, #28
   14abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac0:	mov	sl, r6
   14ac4:	mov	r0, sl
   14ac8:	sub	sp, fp, #28
   14acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad0:	ldr	r0, [r4, #56]	; 0x38
   14ad4:	add	r1, r6, #64	; 0x40
   14ad8:	bl	1a7d0 <__assert_fail@plt+0x92e8>
   14adc:	cmp	r0, #0
   14ae0:	beq	14b18 <__assert_fail@plt+0x3630>
   14ae4:	mov	r0, #2
   14ae8:	mov	sl, r6
   14aec:	strh	r0, [r6, #56]	; 0x38
   14af0:	str	r6, [r6]
   14af4:	mov	r0, sl
   14af8:	sub	sp, fp, #28
   14afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b00:	bl	1138c <__errno_location@plt>
   14b04:	mov	r1, #12
   14b08:	str	r1, [r0]
   14b0c:	mov	r0, sl
   14b10:	sub	sp, fp, #28
   14b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b18:	mov	sl, r6
   14b1c:	mov	r0, sl
   14b20:	sub	sp, fp, #28
   14b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b28:	ldrb	r0, [r4, #49]	; 0x31
   14b2c:	tst	r0, #32
   14b30:	bne	14ee0 <__assert_fail@plt+0x39f8>
   14b34:	ldr	r0, [r6, #32]
   14b38:	cmp	r0, #0
   14b3c:	ldrhne	r0, [r5]
   14b40:	cmpne	r0, #4
   14b44:	movne	r0, #7
   14b48:	strhne	r0, [r5]
   14b4c:	b	1478c <__assert_fail@plt+0x32a4>
   14b50:	mov	sl, r6
   14b54:	mov	r0, sl
   14b58:	sub	sp, fp, #28
   14b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b60:	ldrb	r0, [r4, #49]	; 0x31
   14b64:	mov	sl, #0
   14b68:	tst	r0, #32
   14b6c:	bne	14ee0 <__assert_fail@plt+0x39f8>
   14b70:	ldr	sl, [r7, #4]
   14b74:	mov	r0, r7
   14b78:	str	sl, [r4]
   14b7c:	bl	13acc <__assert_fail@plt+0x25e4>
   14b80:	ldr	r0, [sl, #48]	; 0x30
   14b84:	cmn	r0, #1
   14b88:	beq	14c28 <__assert_fail@plt+0x3740>
   14b8c:	ldrh	r0, [sl, #56]	; 0x38
   14b90:	cmp	r0, #11
   14b94:	beq	14eec <__assert_fail@plt+0x3a04>
   14b98:	ldr	r0, [sl, #40]	; 0x28
   14b9c:	ldr	r1, [r4, #24]
   14ba0:	mov	r2, #0
   14ba4:	strb	r2, [r1, r0]
   14ba8:	ldr	r0, [sl, #48]	; 0x30
   14bac:	cmp	r0, #0
   14bb0:	beq	14d6c <__assert_fail@plt+0x3884>
   14bb4:	ldrh	r0, [sl, #58]	; 0x3a
   14bb8:	tst	r0, #2
   14bbc:	bne	14da4 <__assert_fail@plt+0x38bc>
   14bc0:	tst	r0, #1
   14bc4:	bne	14ea4 <__assert_fail@plt+0x39bc>
   14bc8:	ldr	r1, [sl, #4]
   14bcc:	movw	r3, #48175	; 0xbc2f
   14bd0:	mov	r0, r4
   14bd4:	mvn	r2, #0
   14bd8:	movt	r3, #1
   14bdc:	bl	14fc0 <__assert_fail@plt+0x3ad8>
   14be0:	cmp	r0, #0
   14be4:	bne	14d7c <__assert_fail@plt+0x3894>
   14be8:	b	14ea4 <__assert_fail@plt+0x39bc>
   14bec:	ldr	r0, [r4, #32]
   14bf0:	movw	r1, #48176	; 0xbc30
   14bf4:	movt	r1, #1
   14bf8:	bl	177dc <__assert_fail@plt+0x62f4>
   14bfc:	cmn	r0, #1
   14c00:	str	r0, [r6, #36]	; 0x24
   14c04:	ble	14c4c <__assert_fail@plt+0x3764>
   14c08:	ldrh	r0, [r6, #58]	; 0x3a
   14c0c:	orr	r0, r0, #2
   14c10:	strh	r0, [r6, #58]	; 0x3a
   14c14:	str	r6, [r4]
   14c18:	ldrh	r0, [r6, #56]	; 0x38
   14c1c:	cmp	r0, #11
   14c20:	beq	149e8 <__assert_fail@plt+0x3500>
   14c24:	b	14a18 <__assert_fail@plt+0x3530>
   14c28:	mov	r0, sl
   14c2c:	bl	13acc <__assert_fail@plt+0x25e4>
   14c30:	bl	1138c <__errno_location@plt>
   14c34:	mov	sl, #0
   14c38:	str	sl, [r0]
   14c3c:	str	sl, [r4]
   14c40:	mov	r0, sl
   14c44:	sub	sp, fp, #28
   14c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c4c:	bl	1138c <__errno_location@plt>
   14c50:	ldr	r0, [r0]
   14c54:	mov	r1, #7
   14c58:	strh	r1, [r6, #56]	; 0x38
   14c5c:	str	r0, [r6, #32]
   14c60:	str	r6, [r4]
   14c64:	ldrh	r0, [r6, #56]	; 0x38
   14c68:	cmp	r0, #11
   14c6c:	beq	149e8 <__assert_fail@plt+0x3500>
   14c70:	b	14a18 <__assert_fail@plt+0x3530>
   14c74:	ldr	r0, [r4, #56]	; 0x38
   14c78:	bl	13acc <__assert_fail@plt+0x25e4>
   14c7c:	ldr	r1, [r6, #52]	; 0x34
   14c80:	add	r7, r6, #168	; 0xa8
   14c84:	str	r1, [r6, #40]	; 0x28
   14c88:	add	r2, r1, #1
   14c8c:	mov	r1, r7
   14c90:	ldr	r0, [r4, #24]
   14c94:	bl	11224 <memmove@plt>
   14c98:	mov	r0, r7
   14c9c:	mov	r1, #47	; 0x2f
   14ca0:	bl	1141c <strrchr@plt>
   14ca4:	cmp	r0, #0
   14ca8:	beq	14ce4 <__assert_fail@plt+0x37fc>
   14cac:	cmp	r0, r7
   14cb0:	bne	14cc0 <__assert_fail@plt+0x37d8>
   14cb4:	ldrb	r1, [r6, #169]	; 0xa9
   14cb8:	cmp	r1, #0
   14cbc:	beq	14ce4 <__assert_fail@plt+0x37fc>
   14cc0:	add	r8, r0, #1
   14cc4:	mov	r0, r8
   14cc8:	bl	11374 <strlen@plt>
   14ccc:	mov	r9, r0
   14cd0:	add	r2, r0, #1
   14cd4:	mov	r0, r7
   14cd8:	mov	r1, r8
   14cdc:	bl	11224 <memmove@plt>
   14ce0:	str	r9, [r6, #52]	; 0x34
   14ce4:	ldr	r0, [r4, #24]
   14ce8:	movw	r1, #258	; 0x102
   14cec:	str	r0, [r6, #24]
   14cf0:	str	r0, [r6, #28]
   14cf4:	ldrh	r0, [r4, #48]	; 0x30
   14cf8:	tst	r0, r1
   14cfc:	beq	14d40 <__assert_fail@plt+0x3858>
   14d00:	movw	r0, #15052	; 0x3acc
   14d04:	movw	r2, #24860	; 0x611c
   14d08:	movw	r3, #24892	; 0x613c
   14d0c:	mov	r1, #0
   14d10:	movt	r0, #1
   14d14:	movt	r2, #1
   14d18:	movt	r3, #1
   14d1c:	str	r0, [sp]
   14d20:	mov	r0, #31
   14d24:	bl	167d8 <__assert_fail@plt+0x52f0>
   14d28:	str	r0, [r4, #56]	; 0x38
   14d2c:	str	r6, [r4]
   14d30:	ldrh	r0, [r6, #56]	; 0x38
   14d34:	cmp	r0, #11
   14d38:	beq	149e8 <__assert_fail@plt+0x3500>
   14d3c:	b	14a18 <__assert_fail@plt+0x3530>
   14d40:	mov	r0, #32
   14d44:	bl	1a6ac <__assert_fail@plt+0x91c4>
   14d48:	cmp	r0, #0
   14d4c:	str	r0, [r4, #56]	; 0x38
   14d50:	beq	149d8 <__assert_fail@plt+0x34f0>
   14d54:	bl	1a7b4 <__assert_fail@plt+0x92cc>
   14d58:	str	r6, [r4]
   14d5c:	ldrh	r0, [r6, #56]	; 0x38
   14d60:	cmp	r0, #11
   14d64:	beq	149e8 <__assert_fail@plt+0x3500>
   14d68:	b	14a18 <__assert_fail@plt+0x3530>
   14d6c:	mov	r0, r4
   14d70:	bl	15e44 <__assert_fail@plt+0x495c>
   14d74:	cmp	r0, #0
   14d78:	beq	14ea4 <__assert_fail@plt+0x39bc>
   14d7c:	bl	1138c <__errno_location@plt>
   14d80:	ldr	r0, [r0]
   14d84:	str	r0, [sl, #32]
   14d88:	ldr	r0, [r4, #48]	; 0x30
   14d8c:	orr	r0, r0, #8192	; 0x2000
   14d90:	str	r0, [r4, #48]	; 0x30
   14d94:	ldrh	r0, [sl, #56]	; 0x38
   14d98:	cmp	r0, #2
   14d9c:	bne	14eb0 <__assert_fail@plt+0x39c8>
   14da0:	b	14ed4 <__assert_fail@plt+0x39ec>
   14da4:	ldr	r0, [r4, #48]	; 0x30
   14da8:	tst	r0, #4
   14dac:	bne	14e24 <__assert_fail@plt+0x393c>
   14db0:	mov	r5, sl
   14db4:	tst	r0, #512	; 0x200
   14db8:	ldr	r6, [r5, #36]!	; 0x24
   14dbc:	bne	14e70 <__assert_fail@plt+0x3988>
   14dc0:	mov	r0, r6
   14dc4:	bl	11458 <fchdir@plt>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14e9c <__assert_fail@plt+0x39b4>
   14dd0:	bl	1138c <__errno_location@plt>
   14dd4:	ldr	r0, [r0]
   14dd8:	str	r0, [sl, #32]
   14ddc:	ldr	r0, [r4, #48]	; 0x30
   14de0:	orr	r0, r0, #8192	; 0x2000
   14de4:	str	r0, [r4, #48]	; 0x30
   14de8:	b	14e9c <__assert_fail@plt+0x39b4>
   14dec:	mov	r1, #32768	; 0x8000
   14df0:	tst	r0, #512	; 0x200
   14df4:	and	r1, r1, r0, lsl #11
   14df8:	orr	r1, r1, #18688	; 0x4900
   14dfc:	orr	r2, r1, #524288	; 0x80000
   14e00:	bne	14e2c <__assert_fail@plt+0x3944>
   14e04:	movw	r0, #48176	; 0xbc30
   14e08:	mov	r1, r2
   14e0c:	movt	r0, #1
   14e10:	bl	1ab24 <__assert_fail@plt+0x963c>
   14e14:	cmn	r0, #1
   14e18:	str	r0, [r6, #36]	; 0x24
   14e1c:	bgt	14e48 <__assert_fail@plt+0x3960>
   14e20:	b	14e58 <__assert_fail@plt+0x3970>
   14e24:	add	r5, sl, #36	; 0x24
   14e28:	b	14e9c <__assert_fail@plt+0x39b4>
   14e2c:	ldr	r0, [r4, #32]
   14e30:	movw	r1, #48176	; 0xbc30
   14e34:	movt	r1, #1
   14e38:	bl	177dc <__assert_fail@plt+0x62f4>
   14e3c:	cmn	r0, #1
   14e40:	str	r0, [r6, #36]	; 0x24
   14e44:	ble	14e58 <__assert_fail@plt+0x3970>
   14e48:	ldrh	r0, [r6, #58]	; 0x3a
   14e4c:	orr	r0, r0, #2
   14e50:	strh	r0, [r6, #58]	; 0x3a
   14e54:	b	1480c <__assert_fail@plt+0x3324>
   14e58:	bl	1138c <__errno_location@plt>
   14e5c:	ldr	r0, [r0]
   14e60:	mov	r1, #7
   14e64:	strh	r1, [r6, #56]	; 0x38
   14e68:	str	r0, [r6, #32]
   14e6c:	b	1480c <__assert_fail@plt+0x3324>
   14e70:	ldr	r1, [r4, #32]
   14e74:	cmp	r1, r6
   14e78:	bne	14e84 <__assert_fail@plt+0x399c>
   14e7c:	cmn	r1, #100	; 0x64
   14e80:	bne	14eec <__assert_fail@plt+0x3a04>
   14e84:	add	r0, r4, #60	; 0x3c
   14e88:	bl	17738 <__assert_fail@plt+0x6250>
   14e8c:	cmp	r0, #0
   14e90:	blt	14e98 <__assert_fail@plt+0x39b0>
   14e94:	bl	114ac <close@plt>
   14e98:	str	r6, [r4, #32]
   14e9c:	ldr	r0, [r5]
   14ea0:	bl	114ac <close@plt>
   14ea4:	ldrh	r0, [sl, #56]	; 0x38
   14ea8:	cmp	r0, #2
   14eac:	beq	14ed4 <__assert_fail@plt+0x39ec>
   14eb0:	ldr	r0, [sl, #32]
   14eb4:	mov	r1, #7
   14eb8:	cmp	r0, #0
   14ebc:	movweq	r1, #6
   14ec0:	strh	r1, [sl, #56]	; 0x38
   14ec4:	bne	14ed4 <__assert_fail@plt+0x39ec>
   14ec8:	mov	r0, r4
   14ecc:	mov	r1, sl
   14ed0:	bl	14ef0 <__assert_fail@plt+0x3a08>
   14ed4:	ldrb	r0, [r4, #49]	; 0x31
   14ed8:	tst	r0, #32
   14edc:	movne	sl, #0
   14ee0:	mov	r0, sl
   14ee4:	sub	sp, fp, #28
   14ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eec:	bl	114a0 <abort@plt>
   14ef0:	push	{r4, r5, r6, r7, fp, lr}
   14ef4:	add	fp, sp, #16
   14ef8:	sub	sp, sp, #24
   14efc:	ldrh	r2, [r0, #48]	; 0x30
   14f00:	movw	r3, #258	; 0x102
   14f04:	add	lr, r1, #64	; 0x40
   14f08:	tst	r2, r3
   14f0c:	beq	14f44 <__assert_fail@plt+0x3a5c>
   14f10:	ldrd	r2, [lr]
   14f14:	stm	sp, {r2, r3}
   14f18:	ldrd	r2, [r1, #160]	; 0xa0
   14f1c:	mov	r1, sp
   14f20:	str	r3, [sp, #12]
   14f24:	str	r2, [sp, #8]
   14f28:	ldr	r0, [r0, #56]	; 0x38
   14f2c:	bl	17458 <__assert_fail@plt+0x5f70>
   14f30:	cmp	r0, #0
   14f34:	beq	14fbc <__assert_fail@plt+0x3ad4>
   14f38:	bl	13acc <__assert_fail@plt+0x25e4>
   14f3c:	sub	sp, fp, #16
   14f40:	pop	{r4, r5, r6, r7, fp, pc}
   14f44:	ldr	r2, [r1, #4]
   14f48:	cmp	r2, #0
   14f4c:	beq	14fb4 <__assert_fail@plt+0x3acc>
   14f50:	ldr	r3, [r2, #48]	; 0x30
   14f54:	cmp	r3, #0
   14f58:	blt	14fb4 <__assert_fail@plt+0x3acc>
   14f5c:	ldr	ip, [r0, #56]	; 0x38
   14f60:	ldrd	r4, [ip, #16]
   14f64:	orrs	r3, r4, r5
   14f68:	beq	14fbc <__assert_fail@plt+0x3ad4>
   14f6c:	ldrd	r4, [r1, #160]	; 0xa0
   14f70:	ldrd	r6, [ip]
   14f74:	eor	r1, r7, r5
   14f78:	eor	r3, r6, r4
   14f7c:	orrs	r1, r3, r1
   14f80:	bne	14fb4 <__assert_fail@plt+0x3acc>
   14f84:	ldr	r1, [ip, #8]!
   14f88:	ldrd	r4, [lr]
   14f8c:	ldr	r3, [ip, #4]
   14f90:	eor	r1, r1, r4
   14f94:	eor	r3, r3, r5
   14f98:	orrs	r1, r1, r3
   14f9c:	bne	14fb4 <__assert_fail@plt+0x3acc>
   14fa0:	ldrd	r4, [r2, #64]	; 0x40
   14fa4:	strd	r4, [ip]
   14fa8:	ldr	r0, [r0, #56]	; 0x38
   14fac:	ldrd	r2, [r2, #160]	; 0xa0
   14fb0:	strd	r2, [r0]
   14fb4:	sub	sp, fp, #16
   14fb8:	pop	{r4, r5, r6, r7, fp, pc}
   14fbc:	bl	114a0 <abort@plt>
   14fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fc4:	add	fp, sp, #28
   14fc8:	sub	sp, sp, #108	; 0x6c
   14fcc:	mov	r7, r3
   14fd0:	mov	r4, r2
   14fd4:	mov	r8, r1
   14fd8:	mov	sl, r0
   14fdc:	cmp	r3, #0
   14fe0:	beq	1506c <__assert_fail@plt+0x3b84>
   14fe4:	movw	r1, #48175	; 0xbc2f
   14fe8:	mov	r0, r7
   14fec:	movt	r1, #1
   14ff0:	bl	11200 <strcmp@plt>
   14ff4:	mov	r6, r0
   14ff8:	cmp	r0, #0
   14ffc:	movwne	r6, #1
   15000:	ldr	r0, [sl, #48]	; 0x30
   15004:	tst	r0, #4
   15008:	bne	1507c <__assert_fail@plt+0x3b94>
   1500c:	cmn	r4, #1
   15010:	mov	r1, #0
   15014:	mov	r9, #0
   15018:	movwgt	r1, #1
   1501c:	orrs	r1, r1, r6
   15020:	bne	150a4 <__assert_fail@plt+0x3bbc>
   15024:	ands	r0, r0, #512	; 0x200
   15028:	beq	150a4 <__assert_fail@plt+0x3bbc>
   1502c:	add	r4, sl, #60	; 0x3c
   15030:	mov	r0, r4
   15034:	bl	17730 <__assert_fail@plt+0x6248>
   15038:	cmp	r0, #0
   1503c:	bne	150ac <__assert_fail@plt+0x3bc4>
   15040:	mov	r0, r4
   15044:	bl	17784 <__assert_fail@plt+0x629c>
   15048:	cmn	r0, #1
   1504c:	ble	150ac <__assert_fail@plt+0x3bc4>
   15050:	mov	r4, r0
   15054:	mov	r9, #0
   15058:	mov	r7, #0
   1505c:	ldr	r5, [sl, #48]	; 0x30
   15060:	tst	r5, #2
   15064:	beq	150f0 <__assert_fail@plt+0x3c08>
   15068:	b	15138 <__assert_fail@plt+0x3c50>
   1506c:	mov	r6, #1
   15070:	ldr	r0, [sl, #48]	; 0x30
   15074:	tst	r0, #4
   15078:	beq	1500c <__assert_fail@plt+0x3b24>
   1507c:	mov	r5, #0
   15080:	cmp	r4, #0
   15084:	blt	1512c <__assert_fail@plt+0x3c44>
   15088:	ands	r0, r0, #512	; 0x200
   1508c:	beq	1512c <__assert_fail@plt+0x3c44>
   15090:	mov	r0, r4
   15094:	bl	114ac <close@plt>
   15098:	mov	r0, r5
   1509c:	sub	sp, fp, #28
   150a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a4:	cmn	r4, #1
   150a8:	bgt	150e4 <__assert_fail@plt+0x3bfc>
   150ac:	ldr	r0, [sl, #48]	; 0x30
   150b0:	mov	r1, #32768	; 0x8000
   150b4:	and	r1, r1, r0, lsl #11
   150b8:	tst	r0, #512	; 0x200
   150bc:	orr	r1, r1, #18688	; 0x4900
   150c0:	orr	r2, r1, #524288	; 0x80000
   150c4:	bne	15160 <__assert_fail@plt+0x3c78>
   150c8:	mov	r0, r7
   150cc:	mov	r1, r2
   150d0:	bl	1ab24 <__assert_fail@plt+0x963c>
   150d4:	mov	r4, r0
   150d8:	mov	r9, #1
   150dc:	cmp	r0, #0
   150e0:	blt	1517c <__assert_fail@plt+0x3c94>
   150e4:	ldr	r5, [sl, #48]	; 0x30
   150e8:	tst	r5, #2
   150ec:	bne	15138 <__assert_fail@plt+0x3c50>
   150f0:	cmp	r7, #0
   150f4:	beq	15110 <__assert_fail@plt+0x3c28>
   150f8:	movw	r1, #48175	; 0xbc2f
   150fc:	mov	r0, r7
   15100:	movt	r1, #1
   15104:	bl	11200 <strcmp@plt>
   15108:	cmp	r0, #0
   1510c:	beq	15138 <__assert_fail@plt+0x3c50>
   15110:	tst	r5, #512	; 0x200
   15114:	bne	151cc <__assert_fail@plt+0x3ce4>
   15118:	mov	r0, r4
   1511c:	bl	11458 <fchdir@plt>
   15120:	mov	r5, r0
   15124:	cmp	r9, #0
   15128:	bne	15214 <__assert_fail@plt+0x3d2c>
   1512c:	mov	r0, r5
   15130:	sub	sp, fp, #28
   15134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15138:	mov	r2, sp
   1513c:	mov	r0, #3
   15140:	mov	r1, r4
   15144:	bl	112c0 <__fxstat64@plt>
   15148:	cmp	r0, #0
   1514c:	beq	1518c <__assert_fail@plt+0x3ca4>
   15150:	mvn	r5, #0
   15154:	cmp	r9, #0
   15158:	beq	1512c <__assert_fail@plt+0x3c44>
   1515c:	b	15214 <__assert_fail@plt+0x3d2c>
   15160:	ldr	r0, [sl, #32]
   15164:	mov	r1, r7
   15168:	bl	177dc <__assert_fail@plt+0x62f4>
   1516c:	mov	r4, r0
   15170:	mov	r9, #1
   15174:	cmp	r0, #0
   15178:	bge	150e4 <__assert_fail@plt+0x3bfc>
   1517c:	mvn	r5, #0
   15180:	mov	r0, r5
   15184:	sub	sp, fp, #28
   15188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1518c:	ldrd	r0, [r8, #64]	; 0x40
   15190:	ldm	sp, {r2, r3}
   15194:	eor	r1, r1, r3
   15198:	eor	r0, r0, r2
   1519c:	orrs	r0, r0, r1
   151a0:	bne	151fc <__assert_fail@plt+0x3d14>
   151a4:	ldrd	r0, [r8, #160]	; 0xa0
   151a8:	ldr	r2, [sp, #96]	; 0x60
   151ac:	ldr	r3, [sp, #100]	; 0x64
   151b0:	eor	r1, r1, r3
   151b4:	eor	r0, r0, r2
   151b8:	orrs	r0, r0, r1
   151bc:	bne	151fc <__assert_fail@plt+0x3d14>
   151c0:	ldr	r5, [sl, #48]	; 0x30
   151c4:	tst	r5, #512	; 0x200
   151c8:	beq	15118 <__assert_fail@plt+0x3c30>
   151cc:	ldr	r1, [sl, #32]
   151d0:	cmp	r1, r4
   151d4:	bne	151e0 <__assert_fail@plt+0x3cf8>
   151d8:	cmn	r1, #100	; 0x64
   151dc:	bne	15264 <__assert_fail@plt+0x3d7c>
   151e0:	cmp	r6, #0
   151e4:	beq	15238 <__assert_fail@plt+0x3d50>
   151e8:	add	r0, sl, #60	; 0x3c
   151ec:	bl	17738 <__assert_fail@plt+0x6250>
   151f0:	cmp	r0, #0
   151f4:	bge	1524c <__assert_fail@plt+0x3d64>
   151f8:	b	15250 <__assert_fail@plt+0x3d68>
   151fc:	bl	1138c <__errno_location@plt>
   15200:	mov	r1, #2
   15204:	str	r1, [r0]
   15208:	mvn	r5, #0
   1520c:	cmp	r9, #0
   15210:	beq	1512c <__assert_fail@plt+0x3c44>
   15214:	bl	1138c <__errno_location@plt>
   15218:	ldr	r7, [r0]
   1521c:	mov	r6, r0
   15220:	mov	r0, r4
   15224:	bl	114ac <close@plt>
   15228:	str	r7, [r6]
   1522c:	mov	r0, r5
   15230:	sub	sp, fp, #28
   15234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15238:	tst	r5, #4
   1523c:	bne	15250 <__assert_fail@plt+0x3d68>
   15240:	cmp	r1, #0
   15244:	blt	15250 <__assert_fail@plt+0x3d68>
   15248:	mov	r0, r1
   1524c:	bl	114ac <close@plt>
   15250:	str	r4, [sl, #32]
   15254:	mov	r5, #0
   15258:	mov	r0, r5
   1525c:	sub	sp, fp, #28
   15260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15264:	bl	114a0 <abort@plt>
   15268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1526c:	add	fp, sp, #28
   15270:	sub	sp, sp, #76	; 0x4c
   15274:	ldr	r8, [r0]
   15278:	mov	r9, r1
   1527c:	mov	r5, r0
   15280:	str	r0, [sp, #52]	; 0x34
   15284:	ldr	r4, [r8, #12]
   15288:	cmp	r4, #0
   1528c:	beq	152d8 <__assert_fail@plt+0x3df0>
   15290:	mov	r0, r4
   15294:	bl	1144c <dirfd@plt>
   15298:	cmn	r0, #1
   1529c:	str	r0, [fp, #-32]	; 0xffffffe0
   152a0:	ble	15310 <__assert_fail@plt+0x3e28>
   152a4:	mov	r1, r5
   152a8:	mvn	r2, #0
   152ac:	str	r4, [sp, #12]
   152b0:	str	r9, [sp, #4]
   152b4:	mov	ip, #0
   152b8:	ldr	r0, [r1, #44]!	; 0x2c
   152bc:	cmp	r0, #0
   152c0:	str	r1, [fp, #-48]	; 0xffffffd0
   152c4:	add	sl, r1, #4
   152c8:	movweq	r2, #34464	; 0x86a0
   152cc:	movteq	r2, #1
   152d0:	str	r2, [sp, #28]
   152d4:	b	155a0 <__assert_fail@plt+0x40b8>
   152d8:	mov	sl, r5
   152dc:	mvn	r0, #99	; 0x63
   152e0:	mov	r2, #0
   152e4:	ldr	r3, [sl, #48]!	; 0x30
   152e8:	and	r1, r3, #516	; 0x204
   152ec:	cmp	r1, #512	; 0x200
   152f0:	ldr	r1, [r8, #24]
   152f4:	ldreq	r0, [r5, #32]
   152f8:	tst	r3, #16
   152fc:	beq	15338 <__assert_fail@plt+0x3e50>
   15300:	tst	r3, #1
   15304:	bne	1532c <__assert_fail@plt+0x3e44>
   15308:	mov	r2, #32768	; 0x8000
   1530c:	b	15338 <__assert_fail@plt+0x3e50>
   15310:	ldr	r0, [r8, #12]
   15314:	bl	114d0 <closedir@plt>
   15318:	mov	r6, #0
   1531c:	str	r6, [r8, #12]
   15320:	cmp	r9, #3
   15324:	beq	15384 <__assert_fail@plt+0x3e9c>
   15328:	b	15c54 <__assert_fail@plt+0x476c>
   1532c:	ldr	r3, [r8, #48]	; 0x30
   15330:	cmp	r3, #0
   15334:	movne	r2, #32768	; 0x8000
   15338:	sub	r3, fp, #32
   1533c:	bl	17820 <__assert_fail@plt+0x6338>
   15340:	cmp	r0, #0
   15344:	str	r0, [r8, #12]
   15348:	beq	15378 <__assert_fail@plt+0x3e90>
   1534c:	ldrh	r0, [r8, #56]	; 0x38
   15350:	cmp	r0, #11
   15354:	bne	153a4 <__assert_fail@plt+0x3ebc>
   15358:	mov	r0, r5
   1535c:	mov	r1, r8
   15360:	mov	r2, #0
   15364:	bl	141fc <__assert_fail@plt+0x2d14>
   15368:	mov	r7, r8
   1536c:	strh	r0, [r8, #56]	; 0x38
   15370:	mov	r6, r5
   15374:	b	15478 <__assert_fail@plt+0x3f90>
   15378:	mov	r6, #0
   1537c:	cmp	r9, #3
   15380:	bne	15c54 <__assert_fail@plt+0x476c>
   15384:	mov	r0, #4
   15388:	strh	r0, [r8, #56]	; 0x38
   1538c:	bl	1138c <__errno_location@plt>
   15390:	ldr	r0, [r0]
   15394:	str	r0, [r8, #32]
   15398:	mov	r0, r6
   1539c:	sub	sp, fp, #28
   153a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153a4:	ldrb	r0, [sl, #1]
   153a8:	mov	r7, r8
   153ac:	mov	r6, r5
   153b0:	tst	r0, #1
   153b4:	beq	15478 <__assert_fail@plt+0x3f90>
   153b8:	mov	r0, r6
   153bc:	mov	r1, r7
   153c0:	mov	r5, r7
   153c4:	bl	14ef0 <__assert_fail@plt+0x3a08>
   153c8:	mov	r0, r6
   153cc:	mov	r1, r7
   153d0:	mov	r2, #0
   153d4:	bl	141fc <__assert_fail@plt+0x2d14>
   153d8:	ldrh	r0, [r6, #48]	; 0x30
   153dc:	movw	r1, #258	; 0x102
   153e0:	tst	r0, r1
   153e4:	beq	15458 <__assert_fail@plt+0x3f70>
   153e8:	mov	r0, #24
   153ec:	bl	1a6ac <__assert_fail@plt+0x91c4>
   153f0:	cmp	r0, #0
   153f4:	beq	15e10 <__assert_fail@plt+0x4928>
   153f8:	mov	r5, r0
   153fc:	ldrd	r0, [r7, #64]	; 0x40
   15400:	add	r2, r5, #8
   15404:	stm	r5, {r0, r1}
   15408:	ldrd	r0, [r7, #160]	; 0xa0
   1540c:	stm	r2, {r0, r1, r7}
   15410:	mov	r1, r5
   15414:	ldr	r6, [sp, #52]	; 0x34
   15418:	ldr	r0, [r6, #56]	; 0x38
   1541c:	bl	17410 <__assert_fail@plt+0x5f28>
   15420:	cmp	r0, r5
   15424:	beq	15478 <__assert_fail@plt+0x3f90>
   15428:	mov	r8, r0
   1542c:	mov	r0, r5
   15430:	bl	13acc <__assert_fail@plt+0x25e4>
   15434:	cmp	r8, #0
   15438:	beq	15e10 <__assert_fail@plt+0x4928>
   1543c:	ldr	r0, [r8, #16]
   15440:	ldr	r6, [sp, #52]	; 0x34
   15444:	mov	r1, #2
   15448:	mov	r2, r7
   1544c:	strh	r1, [r7, #56]	; 0x38
   15450:	str	r0, [r7]
   15454:	b	15478 <__assert_fail@plt+0x3f90>
   15458:	ldr	r0, [r6, #56]	; 0x38
   1545c:	add	r1, r5, #64	; 0x40
   15460:	bl	1a7d0 <__assert_fail@plt+0x92e8>
   15464:	cmp	r0, #0
   15468:	movne	r0, #2
   1546c:	movne	r1, r7
   15470:	strhne	r0, [r7, #56]	; 0x38
   15474:	strne	r7, [r7]
   15478:	mov	r1, r6
   1547c:	mov	r5, r6
   15480:	mov	r8, r7
   15484:	str	r9, [sp, #4]
   15488:	str	r4, [sp, #12]
   1548c:	ldr	r0, [r1, #44]!	; 0x2c
   15490:	str	r1, [fp, #-48]	; 0xffffffd0
   15494:	mvn	r1, #0
   15498:	cmp	r0, #0
   1549c:	movweq	r1, #34464	; 0x86a0
   154a0:	movteq	r1, #1
   154a4:	cmp	r9, #2
   154a8:	str	r1, [sp, #28]
   154ac:	bne	154c8 <__assert_fail@plt+0x3fe0>
   154b0:	mov	ip, #1
   154b4:	cmp	r9, #3
   154b8:	bne	155a0 <__assert_fail@plt+0x40b8>
   154bc:	sub	r0, r9, #3
   154c0:	mov	r5, #0
   154c4:	b	154e8 <__assert_fail@plt+0x4000>
   154c8:	ldr	r0, [sl]
   154cc:	and	r0, r0, #56	; 0x38
   154d0:	cmp	r0, #24
   154d4:	ldreq	r0, [r8, #84]	; 0x54
   154d8:	cmpeq	r0, #2
   154dc:	beq	15dd0 <__assert_fail@plt+0x48e8>
   154e0:	sub	r0, r9, #3
   154e4:	mov	r5, #1
   154e8:	clz	r0, r0
   154ec:	lsr	r6, r0, #5
   154f0:	ldrb	r0, [sl, #1]
   154f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   154f8:	tst	r0, #2
   154fc:	beq	15518 <__assert_fail@plt+0x4030>
   15500:	mov	r0, r2
   15504:	movw	r1, #1030	; 0x406
   15508:	mov	r2, #3
   1550c:	bl	1a944 <__assert_fail@plt+0x945c>
   15510:	mov	r2, r0
   15514:	str	r0, [fp, #-32]	; 0xffffffe0
   15518:	cmp	r2, #0
   1551c:	blt	15538 <__assert_fail@plt+0x4050>
   15520:	ldr	r0, [sp, #52]	; 0x34
   15524:	mov	r1, r8
   15528:	mov	r3, #0
   1552c:	bl	14fc0 <__assert_fail@plt+0x3ad8>
   15530:	cmp	r0, #0
   15534:	beq	15598 <__assert_fail@plt+0x40b0>
   15538:	and	r0, r6, r5
   1553c:	cmp	r0, #1
   15540:	bne	15550 <__assert_fail@plt+0x4068>
   15544:	bl	1138c <__errno_location@plt>
   15548:	ldr	r0, [r0]
   1554c:	str	r0, [r8, #32]
   15550:	ldrh	r0, [r8, #58]	; 0x3a
   15554:	orr	r0, r0, #1
   15558:	strh	r0, [r8, #58]	; 0x3a
   1555c:	ldr	r0, [r8, #12]
   15560:	bl	114d0 <closedir@plt>
   15564:	mov	r4, #0
   15568:	ldr	r5, [sp, #52]	; 0x34
   1556c:	str	r4, [r8, #12]
   15570:	ldr	r0, [sl]
   15574:	tst	r0, #512	; 0x200
   15578:	beq	1558c <__assert_fail@plt+0x40a4>
   1557c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15580:	cmp	r0, #0
   15584:	blt	1558c <__assert_fail@plt+0x40a4>
   15588:	bl	114ac <close@plt>
   1558c:	mov	ip, #1
   15590:	str	r4, [r8, #12]
   15594:	b	155a0 <__assert_fail@plt+0x40b8>
   15598:	ldr	r5, [sp, #52]	; 0x34
   1559c:	mov	ip, #0
   155a0:	ldr	r0, [r8, #40]	; 0x28
   155a4:	ldr	r1, [r8, #28]
   155a8:	mov	r7, #0
   155ac:	sub	r2, r0, #1
   155b0:	ldrb	r1, [r1, r2]
   155b4:	cmp	r1, #47	; 0x2f
   155b8:	ldrb	r1, [sl]
   155bc:	moveq	r0, r2
   155c0:	tst	r1, #4
   155c4:	mov	r1, #0
   155c8:	str	r1, [sp, #40]	; 0x28
   155cc:	beq	155e4 <__assert_fail@plt+0x40fc>
   155d0:	ldr	r1, [r5, #24]
   155d4:	mov	r2, #47	; 0x2f
   155d8:	strb	r2, [r1, r0]!
   155dc:	add	r1, r1, #1
   155e0:	str	r1, [sp, #40]	; 0x28
   155e4:	ldr	r6, [r8, #12]
   155e8:	add	r1, r0, #1
   155ec:	str	r1, [fp, #-44]	; 0xffffffd4
   155f0:	cmp	r6, #0
   155f4:	beq	15994 <__assert_fail@plt+0x44ac>
   155f8:	ldr	r0, [r8, #48]	; 0x30
   155fc:	str	ip, [sp]
   15600:	add	r0, r0, #1
   15604:	str	r0, [sp, #20]
   15608:	ldr	r0, [r5, #36]	; 0x24
   1560c:	mov	r5, #0
   15610:	sub	r0, r0, r1
   15614:	str	r0, [sp, #44]	; 0x2c
   15618:	bl	1138c <__errno_location@plt>
   1561c:	str	r0, [sp, #36]	; 0x24
   15620:	mov	r0, #0
   15624:	mov	r7, #0
   15628:	mov	r4, #0
   1562c:	str	r8, [sp, #24]
   15630:	str	sl, [sp, #32]
   15634:	str	r0, [sp, #48]	; 0x30
   15638:	mov	r0, #0
   1563c:	str	r0, [sp, #8]
   15640:	mov	r0, #0
   15644:	str	r0, [sp, #16]
   15648:	ldr	r0, [sp, #36]	; 0x24
   1564c:	str	r7, [fp, #-36]	; 0xffffffdc
   15650:	str	r5, [r0]
   15654:	mov	r0, r6
   15658:	bl	11434 <readdir64@plt>
   1565c:	cmp	r0, #0
   15660:	beq	15af8 <__assert_fail@plt+0x4610>
   15664:	mov	r9, r0
   15668:	ldrb	r0, [sl]
   1566c:	str	r4, [fp, #-40]	; 0xffffffd8
   15670:	mov	r1, sl
   15674:	add	r4, r9, #19
   15678:	tst	r0, #32
   1567c:	ldrbeq	r0, [r4]
   15680:	cmpeq	r0, #46	; 0x2e
   15684:	beq	15780 <__assert_fail@plt+0x4298>
   15688:	mov	r0, r4
   1568c:	bl	11374 <strlen@plt>
   15690:	mov	r5, r0
   15694:	add	r0, r0, #176	; 0xb0
   15698:	bic	r0, r0, #7
   1569c:	bl	1a6ac <__assert_fail@plt+0x91c4>
   156a0:	mov	r6, r0
   156a4:	cmp	r0, #0
   156a8:	beq	15cb4 <__assert_fail@plt+0x47cc>
   156ac:	add	sl, r6, #168	; 0xa8
   156b0:	mov	r1, r4
   156b4:	mov	r2, r5
   156b8:	mov	r0, sl
   156bc:	bl	11254 <memcpy@plt>
   156c0:	ldr	r2, [sp, #52]	; 0x34
   156c4:	mov	r0, #0
   156c8:	mov	r1, #196608	; 0x30000
   156cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156d0:	strb	r0, [sl, r5]
   156d4:	str	r5, [r6, #52]	; 0x34
   156d8:	str	r2, [r6, #44]	; 0x2c
   156dc:	add	r7, r5, r3
   156e0:	ldr	r4, [r2, #24]
   156e4:	str	r1, [r6, #58]	; 0x3a
   156e8:	str	r0, [r6, #12]
   156ec:	str	r0, [r6, #16]
   156f0:	str	r0, [r6, #20]
   156f4:	str	r4, [r6, #28]
   156f8:	str	r0, [r6, #32]
   156fc:	ldr	r0, [sp, #44]	; 0x2c
   15700:	cmp	r5, r0
   15704:	bcs	1571c <__assert_fail@plt+0x4234>
   15708:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1570c:	mov	r5, r2
   15710:	cmp	r7, r3
   15714:	bcs	157d4 <__assert_fail@plt+0x42ec>
   15718:	b	15b58 <__assert_fail@plt+0x4670>
   1571c:	ldr	r1, [r2, #36]	; 0x24
   15720:	movw	r0, #257	; 0x101
   15724:	mov	r5, r2
   15728:	add	r0, r7, r0
   1572c:	adds	r1, r0, r1
   15730:	bcs	15c60 <__assert_fail@plt+0x4778>
   15734:	mov	r0, r4
   15738:	str	r1, [r5, #36]	; 0x24
   1573c:	bl	1a6dc <__assert_fail@plt+0x91f4>
   15740:	cmp	r0, #0
   15744:	beq	15ca0 <__assert_fail@plt+0x47b8>
   15748:	cmp	r0, r4
   1574c:	str	r0, [r5, #24]
   15750:	beq	157b8 <__assert_fail@plt+0x42d0>
   15754:	ldr	r1, [sp, #32]
   15758:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1575c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   15760:	ldrb	r1, [r1]
   15764:	tst	r1, #4
   15768:	ldr	r1, [sp, #40]	; 0x28
   1576c:	addne	r1, r0, r3
   15770:	mov	r0, #1
   15774:	str	r1, [sp, #40]	; 0x28
   15778:	str	r0, [sp, #16]
   1577c:	b	157c0 <__assert_fail@plt+0x42d8>
   15780:	ldrb	r0, [r9, #20]
   15784:	cmp	r0, #0
   15788:	beq	1579c <__assert_fail@plt+0x42b4>
   1578c:	cmp	r0, #46	; 0x2e
   15790:	ldrbeq	r0, [r9, #21]
   15794:	cmpeq	r0, #0
   15798:	bne	15688 <__assert_fail@plt+0x41a0>
   1579c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   157a0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   157a4:	mov	r5, #0
   157a8:	ldr	r6, [r8, #12]
   157ac:	cmp	r6, #0
   157b0:	bne	15648 <__assert_fail@plt+0x4160>
   157b4:	b	15978 <__assert_fail@plt+0x4490>
   157b8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   157bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157c0:	ldr	r0, [r5, #36]	; 0x24
   157c4:	sub	r0, r0, r3
   157c8:	str	r0, [sp, #44]	; 0x2c
   157cc:	cmp	r7, r3
   157d0:	bcc	15b58 <__assert_fail@plt+0x4670>
   157d4:	ldr	r0, [sp, #20]
   157d8:	str	r0, [r6, #48]	; 0x30
   157dc:	ldr	r0, [r5]
   157e0:	str	r7, [r6, #40]	; 0x28
   157e4:	str	r0, [r6, #4]
   157e8:	ldrd	r0, [r9]
   157ec:	strd	r0, [r6, #160]	; 0xa0
   157f0:	ldrb	r0, [r5, #48]	; 0x30
   157f4:	tst	r0, #4
   157f8:	bne	15804 <__assert_fail@plt+0x431c>
   157fc:	str	sl, [r6, #24]
   15800:	b	15820 <__assert_fail@plt+0x4338>
   15804:	ldr	r0, [r6, #28]
   15808:	ldr	r1, [r6, #52]	; 0x34
   1580c:	str	r0, [r6, #24]
   15810:	ldr	r0, [sp, #40]	; 0x28
   15814:	add	r2, r1, #1
   15818:	mov	r1, sl
   1581c:	bl	11224 <memmove@plt>
   15820:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15824:	ldr	sl, [sp, #32]
   15828:	ldr	r8, [sp, #24]
   1582c:	ldr	r0, [r0]
   15830:	ldr	r2, [sl]
   15834:	cmp	r0, #0
   15838:	beq	15864 <__assert_fail@plt+0x437c>
   1583c:	ands	r0, r2, #1024	; 0x400
   15840:	bne	15864 <__assert_fail@plt+0x437c>
   15844:	mov	r0, r5
   15848:	mov	r1, r6
   1584c:	mov	r2, #0
   15850:	bl	141fc <__assert_fail@plt+0x2d14>
   15854:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15858:	mov	r5, #0
   1585c:	strh	r0, [r6, #56]	; 0x38
   15860:	b	158dc <__assert_fail@plt+0x43f4>
   15864:	ldrb	r3, [r9, #18]
   15868:	mov	r0, #0
   1586c:	tst	r2, #8
   15870:	mov	r1, #0
   15874:	beq	15898 <__assert_fail@plt+0x43b0>
   15878:	orr	r1, r3, #4
   1587c:	cmp	r1, #4
   15880:	mov	r1, #0
   15884:	beq	15898 <__assert_fail@plt+0x43b0>
   15888:	eor	r1, r3, #10
   1588c:	and	r2, r2, #16
   15890:	orrs	r1, r2, r1
   15894:	movwne	r1, #1
   15898:	mov	r2, #11
   1589c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   158a0:	mov	r5, #0
   158a4:	strh	r2, [r6, #56]	; 0x38
   158a8:	sub	r2, r3, #1
   158ac:	uxtb	r3, r2
   158b0:	cmp	r3, #11
   158b4:	sxtbls	r0, r2
   158b8:	movwls	r2, #49168	; 0xc010
   158bc:	movtls	r2, #1
   158c0:	ldrls	r0, [r2, r0, lsl #2]
   158c4:	cmp	r1, #0
   158c8:	str	r0, [r6, #80]	; 0x50
   158cc:	mov	r0, #2
   158d0:	movwne	r0, #1
   158d4:	str	r0, [r6, #112]	; 0x70
   158d8:	str	r5, [r6, #116]	; 0x74
   158dc:	cmp	r7, #0
   158e0:	str	r5, [r6, #8]
   158e4:	ldrne	r0, [sp, #48]	; 0x30
   158e8:	moveq	r7, r6
   158ec:	strne	r6, [r0, #8]
   158f0:	movw	r0, #10000	; 0x2710
   158f4:	cmp	r4, r0
   158f8:	bne	1594c <__assert_fail@plt+0x4464>
   158fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15900:	ldr	r0, [r0]
   15904:	cmp	r0, #0
   15908:	bne	1594c <__assert_fail@plt+0x4464>
   1590c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15910:	mov	r0, r8
   15914:	bl	161bc <__assert_fail@plt+0x4cd4>
   15918:	mov	r1, #0
   1591c:	str	r1, [sp, #8]
   15920:	movw	r1, #19778	; 0x4d42
   15924:	movt	r1, #65363	; 0xff53
   15928:	cmp	r0, r1
   1592c:	movwne	r1, #26985	; 0x6969
   15930:	cmpne	r0, r1
   15934:	beq	1594c <__assert_fail@plt+0x4464>
   15938:	movw	r1, #6548	; 0x1994
   1593c:	movt	r1, #258	; 0x102
   15940:	cmp	r0, r1
   15944:	movne	r0, #1
   15948:	strne	r0, [sp, #8]
   1594c:	ldr	r0, [sp, #28]
   15950:	add	r4, r4, #1
   15954:	cmp	r0, r4
   15958:	mov	r0, #0
   1595c:	movwls	r0, #15
   15960:	cmp	r0, #0
   15964:	bne	15bd8 <__assert_fail@plt+0x46f0>
   15968:	str	r6, [sp, #48]	; 0x30
   1596c:	ldr	r6, [r8, #12]
   15970:	cmp	r6, #0
   15974:	bne	15648 <__assert_fail@plt+0x4160>
   15978:	ldr	r0, [sp, #16]
   1597c:	ldr	ip, [sp]
   15980:	ldr	r6, [sp, #8]
   15984:	ldr	r5, [sp, #52]	; 0x34
   15988:	tst	r0, #1
   1598c:	beq	1599c <__assert_fail@plt+0x44b4>
   15990:	b	15d44 <__assert_fail@plt+0x485c>
   15994:	mov	r4, #0
   15998:	mov	r6, #0
   1599c:	ldrb	r0, [sl]
   159a0:	tst	r0, #4
   159a4:	beq	159d0 <__assert_fail@plt+0x44e8>
   159a8:	ldr	r2, [sp, #40]	; 0x28
   159ac:	ldr	r0, [r5, #36]	; 0x24
   159b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   159b4:	cmp	r3, r0
   159b8:	sub	r1, r2, #1
   159bc:	mov	r0, #0
   159c0:	moveq	r2, r1
   159c4:	cmp	r4, #0
   159c8:	moveq	r2, r1
   159cc:	strb	r0, [r2]
   159d0:	ldr	r0, [sp, #12]
   159d4:	cmp	r0, #0
   159d8:	movwne	r0, #1
   159dc:	orrs	r0, r0, ip
   159e0:	beq	15a44 <__assert_fail@plt+0x455c>
   159e4:	cmp	r4, #0
   159e8:	bne	15a84 <__assert_fail@plt+0x459c>
   159ec:	ldr	r0, [sp, #4]
   159f0:	cmp	r0, #3
   159f4:	bne	15a0c <__assert_fail@plt+0x4524>
   159f8:	ldrh	r0, [r8, #56]	; 0x38
   159fc:	cmp	r0, #4
   15a00:	cmpne	r0, #7
   15a04:	movne	r0, #6
   15a08:	strhne	r0, [r8, #56]	; 0x38
   15a0c:	mov	r6, #0
   15a10:	cmp	r7, #0
   15a14:	beq	15c54 <__assert_fail@plt+0x476c>
   15a18:	ldrd	r4, [r7, #8]
   15a1c:	cmp	r5, #0
   15a20:	beq	15a2c <__assert_fail@plt+0x4544>
   15a24:	mov	r0, r5
   15a28:	bl	114d0 <closedir@plt>
   15a2c:	mov	r0, r7
   15a30:	bl	13acc <__assert_fail@plt+0x25e4>
   15a34:	cmp	r4, #0
   15a38:	mov	r7, r4
   15a3c:	bne	15a18 <__assert_fail@plt+0x4530>
   15a40:	b	15c54 <__assert_fail@plt+0x476c>
   15a44:	ldr	r0, [sp, #4]
   15a48:	cmp	r0, #1
   15a4c:	cmpne	r4, #0
   15a50:	bne	15a84 <__assert_fail@plt+0x459c>
   15a54:	ldr	r0, [r8, #48]	; 0x30
   15a58:	cmp	r0, #0
   15a5c:	beq	15bfc <__assert_fail@plt+0x4714>
   15a60:	ldr	r1, [r8, #4]
   15a64:	movw	r3, #48175	; 0xbc2f
   15a68:	mov	r0, r5
   15a6c:	mvn	r2, #0
   15a70:	movt	r3, #1
   15a74:	bl	14fc0 <__assert_fail@plt+0x3ad8>
   15a78:	cmp	r0, #0
   15a7c:	bne	15c0c <__assert_fail@plt+0x4724>
   15a80:	b	159e4 <__assert_fail@plt+0x44fc>
   15a84:	tst	r6, #1
   15a88:	beq	15ac0 <__assert_fail@plt+0x45d8>
   15a8c:	movw	r0, #24964	; 0x6184
   15a90:	mov	r1, r7
   15a94:	mov	r2, r4
   15a98:	movt	r0, #1
   15a9c:	str	r0, [r5, #44]	; 0x2c
   15aa0:	mov	r0, r5
   15aa4:	bl	14394 <__assert_fail@plt+0x2eac>
   15aa8:	mov	r6, r0
   15aac:	mov	r0, #0
   15ab0:	str	r0, [r5, #44]	; 0x2c
   15ab4:	mov	r0, r6
   15ab8:	sub	sp, fp, #28
   15abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac0:	cmp	r4, #2
   15ac4:	bcc	15c80 <__assert_fail@plt+0x4798>
   15ac8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15acc:	ldr	r0, [r0]
   15ad0:	cmp	r0, #0
   15ad4:	beq	15c90 <__assert_fail@plt+0x47a8>
   15ad8:	mov	r0, r5
   15adc:	mov	r1, r7
   15ae0:	mov	r2, r4
   15ae4:	bl	14394 <__assert_fail@plt+0x2eac>
   15ae8:	mov	r6, r0
   15aec:	mov	r0, r6
   15af0:	sub	sp, fp, #28
   15af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15af8:	ldr	r0, [sp, #36]	; 0x24
   15afc:	ldr	r0, [r0]
   15b00:	cmp	r0, #0
   15b04:	beq	15b20 <__assert_fail@plt+0x4638>
   15b08:	str	r0, [r8, #32]
   15b0c:	ldr	r0, [sp, #12]
   15b10:	orrs	r0, r0, r4
   15b14:	mov	r0, #4
   15b18:	movwne	r0, #7
   15b1c:	strh	r0, [r8, #56]	; 0x38
   15b20:	ldr	r0, [r8, #12]
   15b24:	ldr	r6, [sp, #8]
   15b28:	ldr	r7, [fp, #-36]	; 0xffffffdc
   15b2c:	ldr	r5, [sp, #52]	; 0x34
   15b30:	cmp	r0, #0
   15b34:	beq	15d34 <__assert_fail@plt+0x484c>
   15b38:	bl	114d0 <closedir@plt>
   15b3c:	mov	r0, #0
   15b40:	ldr	ip, [sp]
   15b44:	str	r0, [r8, #12]
   15b48:	ldr	r0, [sp, #16]
   15b4c:	tst	r0, #1
   15b50:	beq	1599c <__assert_fail@plt+0x44b4>
   15b54:	b	15d44 <__assert_fail@plt+0x485c>
   15b58:	mov	r0, r6
   15b5c:	bl	13acc <__assert_fail@plt+0x25e4>
   15b60:	ldr	r6, [fp, #-36]	; 0xffffffdc
   15b64:	ldr	r7, [sp, #24]
   15b68:	cmp	r6, #0
   15b6c:	beq	15b98 <__assert_fail@plt+0x46b0>
   15b70:	ldrd	r4, [r6, #8]
   15b74:	cmp	r5, #0
   15b78:	beq	15b84 <__assert_fail@plt+0x469c>
   15b7c:	mov	r0, r5
   15b80:	bl	114d0 <closedir@plt>
   15b84:	mov	r0, r6
   15b88:	bl	13acc <__assert_fail@plt+0x25e4>
   15b8c:	cmp	r4, #0
   15b90:	mov	r6, r4
   15b94:	bne	15b70 <__assert_fail@plt+0x4688>
   15b98:	ldr	r0, [r7, #12]
   15b9c:	bl	114d0 <closedir@plt>
   15ba0:	ldr	r1, [sp, #32]
   15ba4:	mov	r6, #0
   15ba8:	mov	r0, #7
   15bac:	str	r6, [r7, #12]
   15bb0:	strh	r0, [r7, #56]	; 0x38
   15bb4:	ldr	r0, [r1]
   15bb8:	orr	r0, r0, #8192	; 0x2000
   15bbc:	str	r0, [r1]
   15bc0:	ldr	r1, [sp, #36]	; 0x24
   15bc4:	mov	r0, #36	; 0x24
   15bc8:	str	r0, [r1]
   15bcc:	mov	r0, r6
   15bd0:	sub	sp, fp, #28
   15bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd8:	ldr	ip, [sp]
   15bdc:	cmp	r0, #15
   15be0:	bne	15e1c <__assert_fail@plt+0x4934>
   15be4:	ldr	r6, [sp, #8]
   15be8:	ldr	r5, [sp, #52]	; 0x34
   15bec:	ldr	r0, [sp, #16]
   15bf0:	tst	r0, #1
   15bf4:	beq	1599c <__assert_fail@plt+0x44b4>
   15bf8:	b	15d44 <__assert_fail@plt+0x485c>
   15bfc:	mov	r0, r5
   15c00:	bl	15e44 <__assert_fail@plt+0x495c>
   15c04:	cmp	r0, #0
   15c08:	beq	159e4 <__assert_fail@plt+0x44fc>
   15c0c:	mov	r0, #7
   15c10:	mov	r6, #0
   15c14:	cmp	r7, #0
   15c18:	strh	r0, [r8, #56]	; 0x38
   15c1c:	ldr	r0, [sl]
   15c20:	orr	r0, r0, #8192	; 0x2000
   15c24:	str	r0, [sl]
   15c28:	beq	15c54 <__assert_fail@plt+0x476c>
   15c2c:	ldrd	r4, [r7, #8]
   15c30:	cmp	r5, #0
   15c34:	beq	15c40 <__assert_fail@plt+0x4758>
   15c38:	mov	r0, r5
   15c3c:	bl	114d0 <closedir@plt>
   15c40:	mov	r0, r7
   15c44:	bl	13acc <__assert_fail@plt+0x25e4>
   15c48:	cmp	r4, #0
   15c4c:	mov	r7, r4
   15c50:	bne	15c2c <__assert_fail@plt+0x4744>
   15c54:	mov	r0, r6
   15c58:	sub	sp, fp, #28
   15c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c60:	mov	r0, r4
   15c64:	bl	13acc <__assert_fail@plt+0x25e4>
   15c68:	ldr	r1, [sp, #36]	; 0x24
   15c6c:	mov	r0, #0
   15c70:	str	r0, [r5, #24]
   15c74:	mov	r0, #36	; 0x24
   15c78:	str	r0, [r1]
   15c7c:	b	15cb0 <__assert_fail@plt+0x47c8>
   15c80:	mov	r6, r7
   15c84:	mov	r0, r6
   15c88:	sub	sp, fp, #28
   15c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c90:	mov	r6, r7
   15c94:	mov	r0, r6
   15c98:	sub	sp, fp, #28
   15c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca0:	ldr	r0, [r5, #24]
   15ca4:	bl	13acc <__assert_fail@plt+0x25e4>
   15ca8:	mov	r0, #0
   15cac:	str	r0, [r5, #24]
   15cb0:	ldr	r8, [sp, #24]
   15cb4:	ldr	r0, [sp, #36]	; 0x24
   15cb8:	ldr	r4, [r0]
   15cbc:	mov	r0, r6
   15cc0:	bl	13acc <__assert_fail@plt+0x25e4>
   15cc4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   15cc8:	cmp	r5, #0
   15ccc:	beq	15cf8 <__assert_fail@plt+0x4810>
   15cd0:	ldrd	r6, [r5, #8]
   15cd4:	cmp	r7, #0
   15cd8:	beq	15ce4 <__assert_fail@plt+0x47fc>
   15cdc:	mov	r0, r7
   15ce0:	bl	114d0 <closedir@plt>
   15ce4:	mov	r0, r5
   15ce8:	bl	13acc <__assert_fail@plt+0x25e4>
   15cec:	cmp	r6, #0
   15cf0:	mov	r5, r6
   15cf4:	bne	15cd0 <__assert_fail@plt+0x47e8>
   15cf8:	ldr	r0, [r8, #12]
   15cfc:	bl	114d0 <closedir@plt>
   15d00:	ldr	r1, [sp, #32]
   15d04:	mov	r6, #0
   15d08:	mov	r0, #7
   15d0c:	str	r6, [r8, #12]
   15d10:	strh	r0, [r8, #56]	; 0x38
   15d14:	ldr	r0, [r1]
   15d18:	orr	r0, r0, #8192	; 0x2000
   15d1c:	str	r0, [r1]
   15d20:	ldr	r0, [sp, #36]	; 0x24
   15d24:	str	r4, [r0]
   15d28:	mov	r0, r6
   15d2c:	sub	sp, fp, #28
   15d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d34:	ldr	ip, [sp]
   15d38:	ldr	r0, [sp, #16]
   15d3c:	tst	r0, #1
   15d40:	beq	1599c <__assert_fail@plt+0x44b4>
   15d44:	ldr	r1, [r5, #4]
   15d48:	ldr	r0, [r5, #24]
   15d4c:	cmp	r1, #0
   15d50:	beq	15d80 <__assert_fail@plt+0x4898>
   15d54:	ldr	r2, [r1, #24]
   15d58:	add	r3, r1, #168	; 0xa8
   15d5c:	cmp	r2, r3
   15d60:	ldrne	r3, [r1, #28]
   15d64:	subne	r2, r2, r3
   15d68:	addne	r2, r0, r2
   15d6c:	strne	r2, [r1, #24]
   15d70:	str	r0, [r1, #28]
   15d74:	ldr	r1, [r1, #8]
   15d78:	cmp	r1, #0
   15d7c:	bne	15d54 <__assert_fail@plt+0x486c>
   15d80:	ldr	r1, [r7, #48]	; 0x30
   15d84:	cmp	r1, #0
   15d88:	blt	1599c <__assert_fail@plt+0x44b4>
   15d8c:	mov	r1, r7
   15d90:	ldr	r2, [r1, #24]
   15d94:	add	r3, r1, #168	; 0xa8
   15d98:	cmp	r2, r3
   15d9c:	ldrne	r3, [r1, #28]
   15da0:	subne	r2, r2, r3
   15da4:	addne	r2, r0, r2
   15da8:	strne	r2, [r1, #24]
   15dac:	str	r0, [r1, #28]
   15db0:	ldr	r2, [r1, #8]
   15db4:	cmp	r2, #0
   15db8:	ldreq	r2, [r1, #4]
   15dbc:	ldr	r1, [r2, #48]	; 0x30
   15dc0:	cmn	r1, #1
   15dc4:	mov	r1, r2
   15dc8:	bgt	15d90 <__assert_fail@plt+0x48a8>
   15dcc:	b	1599c <__assert_fail@plt+0x44b4>
   15dd0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15dd4:	mov	r0, r8
   15dd8:	bl	161bc <__assert_fail@plt+0x4cd4>
   15ddc:	movw	r1, #26984	; 0x6968
   15de0:	cmp	r0, r1
   15de4:	ble	15e2c <__assert_fail@plt+0x4944>
   15de8:	movw	r1, #26985	; 0x6969
   15dec:	cmp	r0, r1
   15df0:	movwne	r1, #16719	; 0x414f
   15df4:	movtne	r1, #21318	; 0x5346
   15df8:	cmpne	r0, r1
   15dfc:	beq	154e0 <__assert_fail@plt+0x3ff8>
   15e00:	movw	r1, #40864	; 0x9fa0
   15e04:	cmp	r0, r1
   15e08:	beq	154e0 <__assert_fail@plt+0x3ff8>
   15e0c:	b	154b0 <__assert_fail@plt+0x3fc8>
   15e10:	bl	1138c <__errno_location@plt>
   15e14:	mov	r1, #12
   15e18:	str	r1, [r0]
   15e1c:	mov	r6, #0
   15e20:	mov	r0, r6
   15e24:	sub	sp, fp, #28
   15e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e2c:	movw	r1, #19778	; 0x4d42
   15e30:	movt	r1, #65363	; 0xff53
   15e34:	cmp	r0, r1
   15e38:	cmpne	r0, #0
   15e3c:	beq	154e0 <__assert_fail@plt+0x3ff8>
   15e40:	b	154b0 <__assert_fail@plt+0x3fc8>
   15e44:	push	{r4, r5, fp, lr}
   15e48:	add	fp, sp, #8
   15e4c:	mov	r5, r0
   15e50:	ldr	r0, [r0, #48]	; 0x30
   15e54:	mov	r4, #0
   15e58:	tst	r0, #4
   15e5c:	bne	15ea0 <__assert_fail@plt+0x49b8>
   15e60:	tst	r0, #512	; 0x200
   15e64:	bne	15e80 <__assert_fail@plt+0x4998>
   15e68:	ldr	r0, [r5, #28]
   15e6c:	bl	11458 <fchdir@plt>
   15e70:	mov	r4, r0
   15e74:	cmp	r0, #0
   15e78:	movwne	r4, #1
   15e7c:	b	15ea0 <__assert_fail@plt+0x49b8>
   15e80:	ldr	r1, [r5, #32]
   15e84:	add	r0, r5, #60	; 0x3c
   15e88:	bl	17738 <__assert_fail@plt+0x6250>
   15e8c:	cmp	r0, #0
   15e90:	blt	15e98 <__assert_fail@plt+0x49b0>
   15e94:	bl	114ac <close@plt>
   15e98:	mvn	r0, #99	; 0x63
   15e9c:	str	r0, [r5, #32]
   15ea0:	add	r5, r5, #60	; 0x3c
   15ea4:	b	15eac <__assert_fail@plt+0x49c4>
   15ea8:	bl	114ac <close@plt>
   15eac:	mov	r0, r5
   15eb0:	bl	17730 <__assert_fail@plt+0x6248>
   15eb4:	cmp	r0, #0
   15eb8:	movne	r0, r4
   15ebc:	popne	{r4, r5, fp, pc}
   15ec0:	mov	r0, r5
   15ec4:	bl	17784 <__assert_fail@plt+0x629c>
   15ec8:	cmp	r0, #0
   15ecc:	bge	15ea8 <__assert_fail@plt+0x49c0>
   15ed0:	b	15eac <__assert_fail@plt+0x49c4>
   15ed4:	cmp	r2, #5
   15ed8:	movcc	r0, #0
   15edc:	strhcc	r2, [r1, #60]	; 0x3c
   15ee0:	bxcc	lr
   15ee4:	push	{fp, lr}
   15ee8:	mov	fp, sp
   15eec:	bl	1138c <__errno_location@plt>
   15ef0:	mov	r1, #22
   15ef4:	str	r1, [r0]
   15ef8:	mov	r0, #1
   15efc:	pop	{fp, pc}
   15f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f04:	add	fp, sp, #28
   15f08:	sub	sp, sp, #4
   15f0c:	mov	r9, r0
   15f10:	orr	r0, r1, #4096	; 0x1000
   15f14:	cmp	r0, #4096	; 0x1000
   15f18:	bne	15f60 <__assert_fail@plt+0x4a78>
   15f1c:	ldr	r8, [r9]
   15f20:	mov	r7, r1
   15f24:	bl	1138c <__errno_location@plt>
   15f28:	mov	r5, #0
   15f2c:	mov	sl, r0
   15f30:	str	r5, [r0]
   15f34:	ldrb	r0, [r9, #49]	; 0x31
   15f38:	tst	r0, #32
   15f3c:	bne	15f54 <__assert_fail@plt+0x4a6c>
   15f40:	ldrh	r0, [r8, #56]	; 0x38
   15f44:	cmp	r0, #1
   15f48:	beq	15f7c <__assert_fail@plt+0x4a94>
   15f4c:	cmp	r0, #9
   15f50:	ldreq	r5, [r8, #8]
   15f54:	mov	r0, r5
   15f58:	sub	sp, fp, #28
   15f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f60:	bl	1138c <__errno_location@plt>
   15f64:	mov	r1, #22
   15f68:	mov	r5, #0
   15f6c:	str	r1, [r0]
   15f70:	mov	r0, r5
   15f74:	sub	sp, fp, #28
   15f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f7c:	ldr	r6, [r9, #4]
   15f80:	cmp	r6, #0
   15f84:	beq	15fb4 <__assert_fail@plt+0x4acc>
   15f88:	ldr	r4, [r6, #8]
   15f8c:	ldr	r1, [r6, #12]
   15f90:	cmp	r1, #0
   15f94:	beq	15fa0 <__assert_fail@plt+0x4ab8>
   15f98:	mov	r0, r1
   15f9c:	bl	114d0 <closedir@plt>
   15fa0:	mov	r0, r6
   15fa4:	bl	13acc <__assert_fail@plt+0x25e4>
   15fa8:	cmp	r4, #0
   15fac:	mov	r6, r4
   15fb0:	bne	15f88 <__assert_fail@plt+0x4aa0>
   15fb4:	cmp	r7, #4096	; 0x1000
   15fb8:	mov	r4, #1
   15fbc:	ldreq	r0, [r9, #48]	; 0x30
   15fc0:	moveq	r4, #2
   15fc4:	orreq	r0, r0, #4096	; 0x1000
   15fc8:	streq	r0, [r9, #48]	; 0x30
   15fcc:	ldr	r0, [r8, #48]	; 0x30
   15fd0:	cmp	r0, #0
   15fd4:	bne	1602c <__assert_fail@plt+0x4b44>
   15fd8:	ldr	r0, [r8, #24]
   15fdc:	ldrb	r0, [r0]
   15fe0:	cmp	r0, #47	; 0x2f
   15fe4:	beq	1602c <__assert_fail@plt+0x4b44>
   15fe8:	ldr	r0, [r9, #48]	; 0x30
   15fec:	tst	r0, #4
   15ff0:	bne	1602c <__assert_fail@plt+0x4b44>
   15ff4:	mov	r1, #32768	; 0x8000
   15ff8:	tst	r0, #512	; 0x200
   15ffc:	and	r1, r1, r0, lsl #11
   16000:	orr	r1, r1, #18688	; 0x4900
   16004:	orr	r2, r1, #524288	; 0x80000
   16008:	bne	1604c <__assert_fail@plt+0x4b64>
   1600c:	movw	r0, #48176	; 0xbc30
   16010:	mov	r1, r2
   16014:	movt	r0, #1
   16018:	bl	1ab24 <__assert_fail@plt+0x963c>
   1601c:	mov	r8, r0
   16020:	cmn	r0, #1
   16024:	bgt	16068 <__assert_fail@plt+0x4b80>
   16028:	b	160b0 <__assert_fail@plt+0x4bc8>
   1602c:	mov	r0, r9
   16030:	mov	r1, r4
   16034:	bl	15268 <__assert_fail@plt+0x3d80>
   16038:	mov	r5, r0
   1603c:	str	r0, [r9, #4]
   16040:	mov	r0, r5
   16044:	sub	sp, fp, #28
   16048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1604c:	ldr	r0, [r9, #32]
   16050:	movw	r1, #48176	; 0xbc30
   16054:	movt	r1, #1
   16058:	bl	177dc <__assert_fail@plt+0x62f4>
   1605c:	mov	r8, r0
   16060:	cmn	r0, #1
   16064:	ble	160b0 <__assert_fail@plt+0x4bc8>
   16068:	mov	r0, r9
   1606c:	mov	r1, r4
   16070:	bl	15268 <__assert_fail@plt+0x3d80>
   16074:	str	r0, [r9, #4]
   16078:	ldrb	r0, [r9, #49]	; 0x31
   1607c:	tst	r0, #2
   16080:	bne	160c4 <__assert_fail@plt+0x4bdc>
   16084:	mov	r0, r8
   16088:	bl	11458 <fchdir@plt>
   1608c:	cmp	r0, #0
   16090:	beq	16100 <__assert_fail@plt+0x4c18>
   16094:	ldr	r4, [sl]
   16098:	mov	r0, r8
   1609c:	bl	114ac <close@plt>
   160a0:	str	r4, [sl]
   160a4:	mov	r0, r5
   160a8:	sub	sp, fp, #28
   160ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b0:	mov	r5, #0
   160b4:	str	r5, [r9, #4]
   160b8:	mov	r0, r5
   160bc:	sub	sp, fp, #28
   160c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160c4:	ldr	r1, [r9, #32]
   160c8:	cmp	r1, r8
   160cc:	bne	160d8 <__assert_fail@plt+0x4bf0>
   160d0:	cmn	r1, #100	; 0x64
   160d4:	bne	16118 <__assert_fail@plt+0x4c30>
   160d8:	add	r0, r9, #60	; 0x3c
   160dc:	bl	17738 <__assert_fail@plt+0x6250>
   160e0:	cmp	r0, #0
   160e4:	blt	160ec <__assert_fail@plt+0x4c04>
   160e8:	bl	114ac <close@plt>
   160ec:	str	r8, [r9, #32]
   160f0:	ldr	r5, [r9, #4]
   160f4:	mov	r0, r5
   160f8:	sub	sp, fp, #28
   160fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16100:	mov	r0, r8
   16104:	bl	114ac <close@plt>
   16108:	ldr	r5, [r9, #4]
   1610c:	mov	r0, r5
   16110:	sub	sp, fp, #28
   16114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16118:	bl	114a0 <abort@plt>
   1611c:	push	{fp, lr}
   16120:	mov	fp, sp
   16124:	mov	r2, r1
   16128:	ldrd	r0, [r0, #8]
   1612c:	mov	r3, #0
   16130:	bl	1ad54 <__assert_fail@plt+0x986c>
   16134:	mov	r0, r2
   16138:	pop	{fp, pc}
   1613c:	push	{r4, r5, fp, lr}
   16140:	add	fp, sp, #8
   16144:	ldrd	r2, [r1, #8]
   16148:	ldrd	r4, [r0, #8]
   1614c:	eor	r3, r5, r3
   16150:	eor	r2, r4, r2
   16154:	orrs	r2, r2, r3
   16158:	mov	r2, #0
   1615c:	bne	1617c <__assert_fail@plt+0x4c94>
   16160:	ldrd	r2, [r1]
   16164:	ldrd	r0, [r0]
   16168:	eor	r1, r1, r3
   1616c:	eor	r0, r0, r2
   16170:	orr	r0, r0, r1
   16174:	clz	r0, r0
   16178:	lsr	r2, r0, #5
   1617c:	mov	r0, r2
   16180:	pop	{r4, r5, fp, pc}
   16184:	push	{r4, r5, fp, lr}
   16188:	add	fp, sp, #8
   1618c:	ldr	r0, [r0]
   16190:	ldrd	r2, [r0, #160]	; 0xa0
   16194:	ldr	r0, [r1]
   16198:	ldrd	r4, [r0, #160]	; 0xa0
   1619c:	mov	r0, #0
   161a0:	subs	r1, r4, r2
   161a4:	sbcs	r1, r5, r3
   161a8:	movwcc	r0, #1
   161ac:	subs	r1, r2, r4
   161b0:	sbcs	r1, r3, r5
   161b4:	subcc	r0, r0, #1
   161b8:	pop	{r4, r5, fp, pc}
   161bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   161c0:	add	fp, sp, #24
   161c4:	sub	sp, sp, #96	; 0x60
   161c8:	ldr	r7, [r0, #44]	; 0x2c
   161cc:	mov	r4, r0
   161d0:	mov	r5, #0
   161d4:	ldrb	r0, [r7, #49]	; 0x31
   161d8:	tst	r0, #2
   161dc:	beq	1628c <__assert_fail@plt+0x4da4>
   161e0:	ldr	r6, [r7, #52]	; 0x34
   161e4:	mov	r9, r1
   161e8:	cmp	r6, #0
   161ec:	bne	1622c <__assert_fail@plt+0x4d44>
   161f0:	movw	r0, #15052	; 0x3acc
   161f4:	movw	r2, #25336	; 0x62f8
   161f8:	movw	r3, #25368	; 0x6318
   161fc:	mov	r1, #0
   16200:	mov	r8, #0
   16204:	movt	r0, #1
   16208:	movt	r2, #1
   1620c:	movt	r3, #1
   16210:	str	r0, [sp]
   16214:	mov	r0, #13
   16218:	bl	167d8 <__assert_fail@plt+0x52f0>
   1621c:	mov	r6, r0
   16220:	cmp	r0, #0
   16224:	str	r0, [r7, #52]	; 0x34
   16228:	beq	1626c <__assert_fail@plt+0x4d84>
   1622c:	ldrd	r0, [r4, #64]	; 0x40
   16230:	str	r1, [sp, #12]
   16234:	str	r0, [sp, #8]
   16238:	add	r1, sp, #8
   1623c:	mov	r0, r6
   16240:	bl	16510 <__assert_fail@plt+0x5028>
   16244:	cmp	r0, #0
   16248:	beq	1625c <__assert_fail@plt+0x4d74>
   1624c:	ldr	r5, [r0, #8]
   16250:	mov	r0, r5
   16254:	sub	sp, fp, #24
   16258:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1625c:	mov	r8, #1
   16260:	cmp	r9, #0
   16264:	bge	16278 <__assert_fail@plt+0x4d90>
   16268:	b	1628c <__assert_fail@plt+0x4da4>
   1626c:	mov	r6, #0
   16270:	cmp	r9, #0
   16274:	blt	1628c <__assert_fail@plt+0x4da4>
   16278:	add	r1, sp, #8
   1627c:	mov	r0, r9
   16280:	bl	111c4 <fstatfs64@plt>
   16284:	cmp	r0, #0
   16288:	beq	16298 <__assert_fail@plt+0x4db0>
   1628c:	mov	r0, r5
   16290:	sub	sp, fp, #24
   16294:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16298:	cmp	r8, #0
   1629c:	beq	162e8 <__assert_fail@plt+0x4e00>
   162a0:	mov	r0, #16
   162a4:	bl	1a6ac <__assert_fail@plt+0x91c4>
   162a8:	cmp	r0, #0
   162ac:	beq	162e8 <__assert_fail@plt+0x4e00>
   162b0:	mov	r5, r0
   162b4:	ldrd	r0, [r4, #64]	; 0x40
   162b8:	ldr	r2, [sp, #8]
   162bc:	stm	r5, {r0, r1, r2}
   162c0:	mov	r0, r6
   162c4:	mov	r1, r5
   162c8:	bl	17410 <__assert_fail@plt+0x5f28>
   162cc:	cmp	r0, #0
   162d0:	beq	162e0 <__assert_fail@plt+0x4df8>
   162d4:	cmp	r0, r5
   162d8:	beq	162e8 <__assert_fail@plt+0x4e00>
   162dc:	bl	114a0 <abort@plt>
   162e0:	mov	r0, r5
   162e4:	bl	13acc <__assert_fail@plt+0x25e4>
   162e8:	ldr	r5, [sp, #8]
   162ec:	mov	r0, r5
   162f0:	sub	sp, fp, #24
   162f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   162f8:	push	{fp, lr}
   162fc:	mov	fp, sp
   16300:	mov	r2, r1
   16304:	ldrd	r0, [r0]
   16308:	mov	r3, #0
   1630c:	bl	1ad54 <__assert_fail@plt+0x986c>
   16310:	mov	r0, r2
   16314:	pop	{fp, pc}
   16318:	ldrd	r2, [r1]
   1631c:	ldrd	r0, [r0]
   16320:	eor	r1, r1, r3
   16324:	eor	r0, r0, r2
   16328:	orr	r0, r0, r1
   1632c:	clz	r0, r0
   16330:	lsr	r0, r0, #5
   16334:	bx	lr
   16338:	ldr	r0, [r0, #8]
   1633c:	bx	lr
   16340:	ldr	r0, [r0, #12]
   16344:	bx	lr
   16348:	ldr	r0, [r0, #16]
   1634c:	bx	lr
   16350:	ldm	r0, {r2, ip}
   16354:	mov	r0, #0
   16358:	cmp	r2, ip
   1635c:	bxcs	lr
   16360:	mov	r0, #0
   16364:	ldr	r1, [r2]
   16368:	cmp	r1, #0
   1636c:	beq	16390 <__assert_fail@plt+0x4ea8>
   16370:	mov	r3, #0
   16374:	mov	r1, r2
   16378:	ldr	r1, [r1, #4]
   1637c:	add	r3, r3, #1
   16380:	cmp	r1, #0
   16384:	bne	16378 <__assert_fail@plt+0x4e90>
   16388:	cmp	r3, r0
   1638c:	movhi	r0, r3
   16390:	add	r2, r2, #8
   16394:	cmp	r2, ip
   16398:	bcc	16364 <__assert_fail@plt+0x4e7c>
   1639c:	bx	lr
   163a0:	push	{fp, lr}
   163a4:	mov	fp, sp
   163a8:	ldm	r0, {r3, ip}
   163ac:	mov	lr, #0
   163b0:	mov	r1, #0
   163b4:	cmp	r3, ip
   163b8:	bcs	163f4 <__assert_fail@plt+0x4f0c>
   163bc:	mov	r1, #0
   163c0:	mov	lr, #0
   163c4:	ldr	r2, [r3]
   163c8:	cmp	r2, #0
   163cc:	beq	163e8 <__assert_fail@plt+0x4f00>
   163d0:	mov	r2, r3
   163d4:	ldr	r2, [r2, #4]
   163d8:	add	r1, r1, #1
   163dc:	cmp	r2, #0
   163e0:	bne	163d4 <__assert_fail@plt+0x4eec>
   163e4:	add	lr, lr, #1
   163e8:	add	r3, r3, #8
   163ec:	cmp	r3, ip
   163f0:	bcc	163c4 <__assert_fail@plt+0x4edc>
   163f4:	ldr	r2, [r0, #12]
   163f8:	cmp	lr, r2
   163fc:	bne	16414 <__assert_fail@plt+0x4f2c>
   16400:	ldr	r2, [r0, #16]
   16404:	mov	r0, #1
   16408:	cmp	r1, r2
   1640c:	movne	r0, #0
   16410:	pop	{fp, pc}
   16414:	mov	r0, #0
   16418:	pop	{fp, pc}
   1641c:	nop	{0}
   16420:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16424:	add	fp, sp, #24
   16428:	sub	sp, sp, #8
   1642c:	ldr	r6, [r0]
   16430:	ldmib	r0, {r2, r7, r8}
   16434:	ldr	r3, [r0, #16]
   16438:	mov	r4, r1
   1643c:	mov	r5, #0
   16440:	cmp	r6, r2
   16444:	bcs	16484 <__assert_fail@plt+0x4f9c>
   16448:	mov	r5, #0
   1644c:	ldr	r0, [r6]
   16450:	cmp	r0, #0
   16454:	beq	16478 <__assert_fail@plt+0x4f90>
   16458:	mov	r0, #0
   1645c:	mov	r1, r6
   16460:	ldr	r1, [r1, #4]
   16464:	add	r0, r0, #1
   16468:	cmp	r1, #0
   1646c:	bne	16460 <__assert_fail@plt+0x4f78>
   16470:	cmp	r0, r5
   16474:	movhi	r5, r0
   16478:	add	r6, r6, #8
   1647c:	cmp	r6, r2
   16480:	bcc	1644c <__assert_fail@plt+0x4f64>
   16484:	movw	r2, #49216	; 0xc040
   16488:	mov	r0, r4
   1648c:	mov	r1, #1
   16490:	movt	r2, #1
   16494:	bl	113c8 <__fprintf_chk@plt>
   16498:	movw	r2, #49240	; 0xc058
   1649c:	mov	r0, r4
   164a0:	mov	r1, #1
   164a4:	mov	r3, r7
   164a8:	movt	r2, #1
   164ac:	bl	113c8 <__fprintf_chk@plt>
   164b0:	vldr	d16, [pc, #80]	; 16508 <__assert_fail@plt+0x5020>
   164b4:	vmov	s0, r8
   164b8:	movw	r2, #49264	; 0xc070
   164bc:	mov	r0, r4
   164c0:	mov	r1, #1
   164c4:	mov	r3, r8
   164c8:	vcvt.f64.u32	d17, s0
   164cc:	vmov	s0, r7
   164d0:	movt	r2, #1
   164d4:	vcvt.f64.u32	d18, s0
   164d8:	vmul.f64	d16, d17, d16
   164dc:	vdiv.f64	d16, d16, d18
   164e0:	vstr	d16, [sp]
   164e4:	bl	113c8 <__fprintf_chk@plt>
   164e8:	movw	r2, #49297	; 0xc091
   164ec:	mov	r0, r4
   164f0:	mov	r1, #1
   164f4:	mov	r3, r5
   164f8:	movt	r2, #1
   164fc:	sub	sp, fp, #24
   16500:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16504:	b	113c8 <__fprintf_chk@plt>
   16508:	andeq	r0, r0, r0
   1650c:	subsmi	r0, r9, r0
   16510:	push	{r4, r5, r6, r7, fp, lr}
   16514:	add	fp, sp, #16
   16518:	mov	r4, r1
   1651c:	ldr	r1, [r0, #8]
   16520:	ldr	r2, [r0, #24]
   16524:	mov	r5, r0
   16528:	mov	r0, r4
   1652c:	blx	r2
   16530:	ldr	r1, [r5, #8]
   16534:	cmp	r0, r1
   16538:	bcs	165a4 <__assert_fail@plt+0x50bc>
   1653c:	ldr	r7, [r5]
   16540:	mov	r6, #0
   16544:	ldr	r1, [r7, r0, lsl #3]!
   16548:	cmp	r1, #0
   1654c:	cmpne	r7, #0
   16550:	bne	16560 <__assert_fail@plt+0x5078>
   16554:	mov	r0, r6
   16558:	pop	{r4, r5, r6, r7, fp, pc}
   1655c:	ldr	r1, [r7]
   16560:	cmp	r1, r4
   16564:	beq	1658c <__assert_fail@plt+0x50a4>
   16568:	ldr	r2, [r5, #28]
   1656c:	mov	r0, r4
   16570:	blx	r2
   16574:	cmp	r0, #0
   16578:	bne	16598 <__assert_fail@plt+0x50b0>
   1657c:	ldr	r7, [r7, #4]
   16580:	cmp	r7, #0
   16584:	bne	1655c <__assert_fail@plt+0x5074>
   16588:	b	16554 <__assert_fail@plt+0x506c>
   1658c:	mov	r6, r4
   16590:	mov	r0, r6
   16594:	pop	{r4, r5, r6, r7, fp, pc}
   16598:	ldr	r6, [r7]
   1659c:	mov	r0, r6
   165a0:	pop	{r4, r5, r6, r7, fp, pc}
   165a4:	bl	114a0 <abort@plt>
   165a8:	ldr	r1, [r0, #16]
   165ac:	cmp	r1, #0
   165b0:	moveq	r0, #0
   165b4:	bxeq	lr
   165b8:	ldm	r0, {r1, r2}
   165bc:	cmp	r1, r2
   165c0:	bcs	165d8 <__assert_fail@plt+0x50f0>
   165c4:	ldr	r0, [r1], #8
   165c8:	cmp	r0, #0
   165cc:	bxne	lr
   165d0:	cmp	r1, r2
   165d4:	bcc	165c4 <__assert_fail@plt+0x50dc>
   165d8:	push	{fp, lr}
   165dc:	mov	fp, sp
   165e0:	bl	114a0 <abort@plt>
   165e4:	push	{r4, r5, fp, lr}
   165e8:	add	fp, sp, #8
   165ec:	mov	r5, r1
   165f0:	ldr	r1, [r0, #8]
   165f4:	ldr	r2, [r0, #24]
   165f8:	mov	r4, r0
   165fc:	mov	r0, r5
   16600:	blx	r2
   16604:	ldr	r1, [r4, #8]
   16608:	cmp	r0, r1
   1660c:	bcs	16668 <__assert_fail@plt+0x5180>
   16610:	ldr	r1, [r4]
   16614:	add	r2, r1, r0, lsl #3
   16618:	ldr	r3, [r2]
   1661c:	ldr	r2, [r2, #4]
   16620:	cmp	r3, r5
   16624:	beq	16634 <__assert_fail@plt+0x514c>
   16628:	cmp	r2, #0
   1662c:	bne	16618 <__assert_fail@plt+0x5130>
   16630:	b	16640 <__assert_fail@plt+0x5158>
   16634:	cmp	r2, #0
   16638:	ldrne	r0, [r2]
   1663c:	popne	{r4, r5, fp, pc}
   16640:	ldr	r2, [r4, #4]
   16644:	add	r0, r1, r0, lsl #3
   16648:	add	r1, r0, #8
   1664c:	cmp	r1, r2
   16650:	movcs	r0, #0
   16654:	popcs	{r4, r5, fp, pc}
   16658:	ldr	r0, [r1], #8
   1665c:	cmp	r0, #0
   16660:	popne	{r4, r5, fp, pc}
   16664:	b	1664c <__assert_fail@plt+0x5164>
   16668:	bl	114a0 <abort@plt>
   1666c:	push	{r4, r5, fp, lr}
   16670:	add	fp, sp, #8
   16674:	ldm	r0, {r5, lr}
   16678:	mov	ip, r0
   1667c:	mov	r0, #0
   16680:	cmp	r5, lr
   16684:	bcs	166e0 <__assert_fail@plt+0x51f8>
   16688:	mov	r0, #0
   1668c:	ldr	r3, [r5]
   16690:	cmp	r3, #0
   16694:	cmpne	r5, #0
   16698:	bne	166ac <__assert_fail@plt+0x51c4>
   1669c:	add	r5, r5, #8
   166a0:	cmp	r5, lr
   166a4:	bcc	1668c <__assert_fail@plt+0x51a4>
   166a8:	b	166e0 <__assert_fail@plt+0x51f8>
   166ac:	mov	r3, r5
   166b0:	cmp	r0, r2
   166b4:	popcs	{r4, r5, fp, pc}
   166b8:	ldr	r4, [r3]
   166bc:	str	r4, [r1, r0, lsl #2]
   166c0:	add	r0, r0, #1
   166c4:	ldr	r3, [r3, #4]
   166c8:	cmp	r3, #0
   166cc:	bne	166b0 <__assert_fail@plt+0x51c8>
   166d0:	ldr	lr, [ip, #4]
   166d4:	add	r5, r5, #8
   166d8:	cmp	r5, lr
   166dc:	bcc	1668c <__assert_fail@plt+0x51a4>
   166e0:	pop	{r4, r5, fp, pc}
   166e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   166e8:	add	fp, sp, #24
   166ec:	mov	r5, r1
   166f0:	ldr	r4, [r0]
   166f4:	ldr	r1, [r0, #4]
   166f8:	mov	r6, #0
   166fc:	cmp	r4, r1
   16700:	bcs	1677c <__assert_fail@plt+0x5294>
   16704:	mov	r9, r2
   16708:	mov	r8, r0
   1670c:	mov	r6, #0
   16710:	ldr	r0, [r4]
   16714:	cmp	r0, #0
   16718:	cmpne	r4, #0
   1671c:	bne	16730 <__assert_fail@plt+0x5248>
   16720:	add	r4, r4, #8
   16724:	cmp	r4, r1
   16728:	bcc	16710 <__assert_fail@plt+0x5228>
   1672c:	b	1677c <__assert_fail@plt+0x5294>
   16730:	mov	r1, r9
   16734:	blx	r5
   16738:	cmp	r0, #0
   1673c:	beq	1677c <__assert_fail@plt+0x5294>
   16740:	mov	r7, r4
   16744:	ldr	r7, [r7, #4]
   16748:	add	r6, r6, #1
   1674c:	cmp	r7, #0
   16750:	beq	1676c <__assert_fail@plt+0x5284>
   16754:	ldr	r0, [r7]
   16758:	mov	r1, r9
   1675c:	blx	r5
   16760:	cmp	r0, #0
   16764:	bne	16744 <__assert_fail@plt+0x525c>
   16768:	b	1677c <__assert_fail@plt+0x5294>
   1676c:	ldr	r1, [r8, #4]
   16770:	add	r4, r4, #8
   16774:	cmp	r4, r1
   16778:	bcc	16710 <__assert_fail@plt+0x5228>
   1677c:	mov	r0, r6
   16780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16784:	ldrb	r2, [r0]
   16788:	cmp	r2, #0
   1678c:	moveq	r0, #0
   16790:	bxeq	lr
   16794:	add	r3, r0, #1
   16798:	mov	r0, #0
   1679c:	rsb	r0, r0, r0, lsl #5
   167a0:	uxtab	r0, r0, r2
   167a4:	udiv	r2, r0, r1
   167a8:	mls	r0, r2, r1, r0
   167ac:	ldrb	r2, [r3], #1
   167b0:	cmp	r2, #0
   167b4:	bne	1679c <__assert_fail@plt+0x52b4>
   167b8:	bx	lr
   167bc:	movw	r1, #49328	; 0xc0b0
   167c0:	movt	r1, #1
   167c4:	vld1.32	{d16-d17}, [r1]!
   167c8:	ldr	r1, [r1]
   167cc:	vst1.32	{d16-d17}, [r0]!
   167d0:	str	r1, [r0]
   167d4:	bx	lr
   167d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   167dc:	add	fp, sp, #24
   167e0:	movw	r9, #27172	; 0x6a24
   167e4:	movw	r5, #27152	; 0x6a10
   167e8:	cmp	r3, #0
   167ec:	mov	r6, r0
   167f0:	mov	r0, #40	; 0x28
   167f4:	mov	r7, r1
   167f8:	movt	r9, #1
   167fc:	movt	r5, #1
   16800:	movne	r9, r3
   16804:	cmp	r2, #0
   16808:	movne	r5, r2
   1680c:	bl	1a6ac <__assert_fail@plt+0x91c4>
   16810:	mov	r8, #0
   16814:	cmp	r0, #0
   16818:	beq	169f8 <__assert_fail@plt+0x5510>
   1681c:	mov	r4, r0
   16820:	cmp	r7, #0
   16824:	beq	168d4 <__assert_fail@plt+0x53ec>
   16828:	movw	r0, #49328	; 0xc0b0
   1682c:	str	r7, [r4, #20]
   16830:	movt	r0, #1
   16834:	cmp	r7, r0
   16838:	beq	168e0 <__assert_fail@plt+0x53f8>
   1683c:	vldr	s2, [pc, #444]	; 16a00 <__assert_fail@plt+0x5518>
   16840:	vldr	s0, [r7, #8]
   16844:	vcmpe.f32	s0, s2
   16848:	vmrs	APSR_nzcv, fpscr
   1684c:	ble	168b8 <__assert_fail@plt+0x53d0>
   16850:	vldr	s4, [pc, #428]	; 16a04 <__assert_fail@plt+0x551c>
   16854:	vcmpe.f32	s0, s4
   16858:	vmrs	APSR_nzcv, fpscr
   1685c:	bpl	168b8 <__assert_fail@plt+0x53d0>
   16860:	vldr	s4, [pc, #416]	; 16a08 <__assert_fail@plt+0x5520>
   16864:	vldr	s6, [r7, #12]
   16868:	vcmpe.f32	s6, s4
   1686c:	vmrs	APSR_nzcv, fpscr
   16870:	ble	168b8 <__assert_fail@plt+0x53d0>
   16874:	vldr	s4, [r7]
   16878:	vcmpe.f32	s4, #0.0
   1687c:	vmrs	APSR_nzcv, fpscr
   16880:	blt	168b8 <__assert_fail@plt+0x53d0>
   16884:	vadd.f32	s2, s4, s2
   16888:	vcmpe.f32	s2, s0
   1688c:	vmrs	APSR_nzcv, fpscr
   16890:	bpl	168b8 <__assert_fail@plt+0x53d0>
   16894:	vldr	s0, [r7, #4]
   16898:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1689c:	vcmpe.f32	s0, s4
   168a0:	vmrs	APSR_nzcv, fpscr
   168a4:	bhi	168b8 <__assert_fail@plt+0x53d0>
   168a8:	vcmpe.f32	s2, s0
   168ac:	mov	r0, r7
   168b0:	vmrs	APSR_nzcv, fpscr
   168b4:	bmi	168e0 <__assert_fail@plt+0x53f8>
   168b8:	movw	r0, #49328	; 0xc0b0
   168bc:	movt	r0, #1
   168c0:	str	r0, [r4, #20]
   168c4:	mov	r0, r4
   168c8:	bl	13acc <__assert_fail@plt+0x25e4>
   168cc:	mov	r0, r8
   168d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   168d4:	movw	r0, #49328	; 0xc0b0
   168d8:	movt	r0, #1
   168dc:	str	r0, [r4, #20]
   168e0:	ldrb	r1, [r0, #16]
   168e4:	cmp	r1, #0
   168e8:	bne	16914 <__assert_fail@plt+0x542c>
   168ec:	vldr	s0, [r0, #8]
   168f0:	vldr	s4, [pc, #276]	; 16a0c <__assert_fail@plt+0x5524>
   168f4:	vmov	s2, r6
   168f8:	vcvt.f32.u32	s2, s2
   168fc:	vdiv.f32	s2, s2, s0
   16900:	vcmpe.f32	s2, s4
   16904:	vcvt.u32.f32	s0, s2
   16908:	vmrs	APSR_nzcv, fpscr
   1690c:	bge	16994 <__assert_fail@plt+0x54ac>
   16910:	vmov	r6, s0
   16914:	cmp	r6, #10
   16918:	movls	r6, #10
   1691c:	orr	r0, r6, #1
   16920:	cmn	r0, #1
   16924:	beq	16994 <__assert_fail@plt+0x54ac>
   16928:	ldr	r6, [fp, #8]
   1692c:	mov	r1, #3
   16930:	cmp	r0, #10
   16934:	bcc	1696c <__assert_fail@plt+0x5484>
   16938:	mov	r1, #3
   1693c:	mov	r3, #9
   16940:	mov	r2, #12
   16944:	udiv	r7, r0, r1
   16948:	mls	r7, r7, r1, r0
   1694c:	cmp	r7, #0
   16950:	beq	1696c <__assert_fail@plt+0x5484>
   16954:	add	r3, r3, r2
   16958:	add	r2, r2, #8
   1695c:	add	r1, r1, #2
   16960:	add	r3, r3, #4
   16964:	cmp	r3, r0
   16968:	bcc	16944 <__assert_fail@plt+0x545c>
   1696c:	udiv	r2, r0, r1
   16970:	mls	r1, r2, r1, r0
   16974:	cmp	r1, #0
   16978:	bne	1698c <__assert_fail@plt+0x54a4>
   1697c:	add	r0, r0, #2
   16980:	cmn	r0, #1
   16984:	bne	1692c <__assert_fail@plt+0x5444>
   16988:	b	16994 <__assert_fail@plt+0x54ac>
   1698c:	cmp	r0, #536870912	; 0x20000000
   16990:	bcc	169ac <__assert_fail@plt+0x54c4>
   16994:	mov	r0, #0
   16998:	str	r0, [r4, #8]
   1699c:	mov	r0, r4
   169a0:	bl	13acc <__assert_fail@plt+0x25e4>
   169a4:	mov	r0, r8
   169a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169ac:	cmp	r0, #0
   169b0:	str	r0, [r4, #8]
   169b4:	beq	1699c <__assert_fail@plt+0x54b4>
   169b8:	mov	r1, #8
   169bc:	bl	1a658 <__assert_fail@plt+0x9170>
   169c0:	cmp	r0, #0
   169c4:	str	r0, [r4]
   169c8:	beq	1699c <__assert_fail@plt+0x54b4>
   169cc:	mov	r1, #0
   169d0:	mov	r8, r4
   169d4:	str	r1, [r4, #12]
   169d8:	str	r1, [r4, #16]
   169dc:	str	r5, [r4, #24]
   169e0:	str	r9, [r4, #28]
   169e4:	str	r6, [r4, #32]
   169e8:	str	r1, [r4, #36]	; 0x24
   169ec:	ldr	r1, [r4, #8]
   169f0:	add	r0, r0, r1, lsl #3
   169f4:	str	r0, [r4, #4]
   169f8:	mov	r0, r8
   169fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a00:	stclcc	12, cr12, [ip, #820]	; 0x334
   16a04:	svccc	0x00666666
   16a08:	svccc	0x008ccccd
   16a0c:	svcmi	0x00800000
   16a10:	ror	r2, r0, #3
   16a14:	udiv	r2, r2, r1
   16a18:	mul	r1, r2, r1
   16a1c:	rsb	r0, r1, r0, ror #3
   16a20:	bx	lr
   16a24:	sub	r0, r0, r1
   16a28:	clz	r0, r0
   16a2c:	lsr	r0, r0, #5
   16a30:	bx	lr
   16a34:	push	{r4, r5, r6, r7, fp, lr}
   16a38:	add	fp, sp, #16
   16a3c:	mov	r4, r0
   16a40:	ldr	r5, [r0]
   16a44:	ldr	r0, [r0, #4]
   16a48:	cmp	r5, r0
   16a4c:	bcs	16ae4 <__assert_fail@plt+0x55fc>
   16a50:	mov	r6, #0
   16a54:	ldr	r1, [r5]
   16a58:	cmp	r1, #0
   16a5c:	beq	16ad8 <__assert_fail@plt+0x55f0>
   16a60:	ldr	r1, [r4, #32]
   16a64:	ldr	r7, [r5, #4]
   16a68:	cmp	r1, #0
   16a6c:	mov	r0, r1
   16a70:	movwne	r0, #1
   16a74:	cmp	r7, #0
   16a78:	beq	16abc <__assert_fail@plt+0x55d4>
   16a7c:	tst	r0, #1
   16a80:	beq	16a90 <__assert_fail@plt+0x55a8>
   16a84:	ldr	r0, [r7]
   16a88:	blx	r1
   16a8c:	ldr	r1, [r4, #32]
   16a90:	str	r6, [r7]
   16a94:	cmp	r1, #0
   16a98:	ldr	r0, [r4, #36]	; 0x24
   16a9c:	ldr	r2, [r7, #4]
   16aa0:	str	r0, [r7, #4]
   16aa4:	mov	r0, r1
   16aa8:	str	r7, [r4, #36]	; 0x24
   16aac:	mov	r7, r2
   16ab0:	movwne	r0, #1
   16ab4:	cmp	r2, #0
   16ab8:	bne	16a7c <__assert_fail@plt+0x5594>
   16abc:	cmp	r0, #0
   16ac0:	beq	16acc <__assert_fail@plt+0x55e4>
   16ac4:	ldr	r0, [r5]
   16ac8:	blx	r1
   16acc:	str	r6, [r5]
   16ad0:	str	r6, [r5, #4]
   16ad4:	ldr	r0, [r4, #4]
   16ad8:	add	r5, r5, #8
   16adc:	cmp	r5, r0
   16ae0:	bcc	16a54 <__assert_fail@plt+0x556c>
   16ae4:	mov	r0, #0
   16ae8:	str	r0, [r4, #12]
   16aec:	str	r0, [r4, #16]
   16af0:	pop	{r4, r5, r6, r7, fp, pc}
   16af4:	push	{r4, r5, r6, sl, fp, lr}
   16af8:	add	fp, sp, #16
   16afc:	mov	r4, r0
   16b00:	ldr	r0, [r0, #32]
   16b04:	cmp	r0, #0
   16b08:	ldrne	r0, [r4, #16]
   16b0c:	cmpne	r0, #0
   16b10:	beq	16b78 <__assert_fail@plt+0x5690>
   16b14:	ldr	r5, [r4]
   16b18:	ldr	r1, [r4, #4]
   16b1c:	cmp	r5, r1
   16b20:	bcc	16b34 <__assert_fail@plt+0x564c>
   16b24:	b	16b78 <__assert_fail@plt+0x5690>
   16b28:	add	r5, r5, #8
   16b2c:	cmp	r5, r1
   16b30:	bcs	16b78 <__assert_fail@plt+0x5690>
   16b34:	ldr	r0, [r5]
   16b38:	cmp	r0, #0
   16b3c:	cmpne	r5, #0
   16b40:	beq	16b28 <__assert_fail@plt+0x5640>
   16b44:	ldr	r1, [r4, #32]
   16b48:	blx	r1
   16b4c:	ldr	r6, [r5, #4]
   16b50:	cmp	r6, #0
   16b54:	beq	16b70 <__assert_fail@plt+0x5688>
   16b58:	ldr	r1, [r4, #32]
   16b5c:	ldr	r0, [r6]
   16b60:	blx	r1
   16b64:	ldr	r6, [r6, #4]
   16b68:	cmp	r6, #0
   16b6c:	bne	16b58 <__assert_fail@plt+0x5670>
   16b70:	ldr	r1, [r4, #4]
   16b74:	b	16b28 <__assert_fail@plt+0x5640>
   16b78:	ldr	r5, [r4]
   16b7c:	ldr	r1, [r4, #4]
   16b80:	cmp	r5, r1
   16b84:	bcc	16b98 <__assert_fail@plt+0x56b0>
   16b88:	b	16bc0 <__assert_fail@plt+0x56d8>
   16b8c:	add	r5, r5, #8
   16b90:	cmp	r5, r1
   16b94:	bcs	16bc0 <__assert_fail@plt+0x56d8>
   16b98:	ldr	r0, [r5, #4]
   16b9c:	cmp	r0, #0
   16ba0:	beq	16b8c <__assert_fail@plt+0x56a4>
   16ba4:	ldr	r6, [r0, #4]
   16ba8:	bl	13acc <__assert_fail@plt+0x25e4>
   16bac:	cmp	r6, #0
   16bb0:	mov	r0, r6
   16bb4:	bne	16ba4 <__assert_fail@plt+0x56bc>
   16bb8:	ldr	r1, [r4, #4]
   16bbc:	b	16b8c <__assert_fail@plt+0x56a4>
   16bc0:	ldr	r0, [r4, #36]	; 0x24
   16bc4:	cmp	r0, #0
   16bc8:	beq	16be0 <__assert_fail@plt+0x56f8>
   16bcc:	ldr	r5, [r0, #4]
   16bd0:	bl	13acc <__assert_fail@plt+0x25e4>
   16bd4:	cmp	r5, #0
   16bd8:	mov	r0, r5
   16bdc:	bne	16bcc <__assert_fail@plt+0x56e4>
   16be0:	ldr	r0, [r4]
   16be4:	bl	13acc <__assert_fail@plt+0x25e4>
   16be8:	mov	r0, r4
   16bec:	pop	{r4, r5, r6, sl, fp, lr}
   16bf0:	b	13acc <__assert_fail@plt+0x25e4>
   16bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf8:	add	fp, sp, #28
   16bfc:	sub	sp, sp, #44	; 0x2c
   16c00:	mov	r7, r0
   16c04:	mov	r4, r0
   16c08:	ldr	r0, [r7, #20]!
   16c0c:	ldrb	r2, [r0, #16]
   16c10:	cmp	r2, #0
   16c14:	bne	16c44 <__assert_fail@plt+0x575c>
   16c18:	vldr	s0, [r0, #8]
   16c1c:	vldr	s4, [pc, #576]	; 16e64 <__assert_fail@plt+0x597c>
   16c20:	vmov	s2, r1
   16c24:	mov	r5, #0
   16c28:	vcvt.f32.u32	s2, s2
   16c2c:	vdiv.f32	s2, s2, s0
   16c30:	vcmpe.f32	s2, s4
   16c34:	vcvt.u32.f32	s0, s2
   16c38:	vmrs	APSR_nzcv, fpscr
   16c3c:	bge	16d68 <__assert_fail@plt+0x5880>
   16c40:	vmov	r1, s0
   16c44:	cmp	r1, #10
   16c48:	mov	r5, #0
   16c4c:	movls	r1, #10
   16c50:	orr	r6, r1, #1
   16c54:	cmn	r6, #1
   16c58:	bne	16c6c <__assert_fail@plt+0x5784>
   16c5c:	b	16d68 <__assert_fail@plt+0x5880>
   16c60:	add	r6, r6, #2
   16c64:	cmn	r6, #1
   16c68:	beq	16d68 <__assert_fail@plt+0x5880>
   16c6c:	mov	r0, #3
   16c70:	cmp	r6, #10
   16c74:	bcc	16cac <__assert_fail@plt+0x57c4>
   16c78:	mov	r0, #3
   16c7c:	mov	r2, #9
   16c80:	mov	r1, #12
   16c84:	udiv	r3, r6, r0
   16c88:	mls	r3, r3, r0, r6
   16c8c:	cmp	r3, #0
   16c90:	beq	16cac <__assert_fail@plt+0x57c4>
   16c94:	add	r2, r2, r1
   16c98:	add	r1, r1, #8
   16c9c:	add	r0, r0, #2
   16ca0:	add	r2, r2, #4
   16ca4:	cmp	r2, r6
   16ca8:	bcc	16c84 <__assert_fail@plt+0x579c>
   16cac:	udiv	r1, r6, r0
   16cb0:	mls	r0, r1, r0, r6
   16cb4:	cmp	r0, #0
   16cb8:	beq	16c60 <__assert_fail@plt+0x5778>
   16cbc:	sub	r0, r6, #1
   16cc0:	cmn	r0, #-536870910	; 0xe0000002
   16cc4:	bhi	16d68 <__assert_fail@plt+0x5880>
   16cc8:	ldr	r0, [r4, #8]
   16ccc:	cmp	r6, r0
   16cd0:	bne	16ce4 <__assert_fail@plt+0x57fc>
   16cd4:	mov	r5, #1
   16cd8:	mov	r0, r5
   16cdc:	sub	sp, fp, #28
   16ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ce4:	mov	r0, r6
   16ce8:	mov	r1, #8
   16cec:	bl	1a658 <__assert_fail@plt+0x9170>
   16cf0:	cmp	r0, #0
   16cf4:	str	r0, [sp, #4]
   16cf8:	beq	16d68 <__assert_fail@plt+0x5880>
   16cfc:	mov	r1, #0
   16d00:	add	r0, r0, r6, lsl #3
   16d04:	str	r6, [sp, #12]
   16d08:	add	r5, sp, #4
   16d0c:	mov	sl, r4
   16d10:	mov	r2, #0
   16d14:	str	r1, [sp, #16]
   16d18:	str	r1, [sp, #20]
   16d1c:	str	r0, [sp, #8]
   16d20:	add	r0, r5, #20
   16d24:	mov	r1, r4
   16d28:	vld1.32	{d16-d17}, [r7]
   16d2c:	vst1.32	{d16-d17}, [r0]
   16d30:	ldr	r0, [sl, #36]!	; 0x24
   16d34:	str	r0, [sp, #40]	; 0x28
   16d38:	mov	r0, r5
   16d3c:	bl	16e68 <__assert_fail@plt+0x5980>
   16d40:	cmp	r0, #0
   16d44:	beq	16d74 <__assert_fail@plt+0x588c>
   16d48:	ldr	r0, [r4]
   16d4c:	bl	13acc <__assert_fail@plt+0x25e4>
   16d50:	mov	r0, #36	; 0x24
   16d54:	vld1.32	{d16-d17}, [r5], r0
   16d58:	vst1.32	{d16-d17}, [r4], r0
   16d5c:	ldr	r0, [r5]
   16d60:	mov	r5, #1
   16d64:	str	r0, [r4]
   16d68:	mov	r0, r5
   16d6c:	sub	sp, fp, #28
   16d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d74:	ldr	r0, [sp, #40]	; 0x28
   16d78:	str	r0, [sl]
   16d7c:	ldr	r0, [sp, #8]
   16d80:	ldr	r8, [sp, #4]
   16d84:	cmp	r8, r0
   16d88:	str	r0, [sp]
   16d8c:	bcs	16e30 <__assert_fail@plt+0x5948>
   16d90:	mov	r9, #0
   16d94:	ldr	r0, [r8]
   16d98:	cmp	r0, #0
   16d9c:	beq	16e20 <__assert_fail@plt+0x5938>
   16da0:	ldr	r6, [r8, #4]
   16da4:	cmp	r6, #0
   16da8:	beq	16e1c <__assert_fail@plt+0x5934>
   16dac:	ldr	r1, [r4, #8]
   16db0:	ldr	r5, [r6]
   16db4:	ldr	r2, [r4, #24]
   16db8:	mov	r0, r5
   16dbc:	blx	r2
   16dc0:	ldr	r1, [r4, #8]
   16dc4:	cmp	r0, r1
   16dc8:	bcs	16e60 <__assert_fail@plt+0x5978>
   16dcc:	ldr	r3, [r4]
   16dd0:	ldr	r2, [r6, #4]
   16dd4:	ldr	r7, [r3, r0, lsl #3]
   16dd8:	cmp	r7, #0
   16ddc:	beq	16dec <__assert_fail@plt+0x5904>
   16de0:	add	r0, r3, r0, lsl #3
   16de4:	add	r0, r0, #4
   16de8:	b	16e04 <__assert_fail@plt+0x591c>
   16dec:	str	r5, [r3, r0, lsl #3]
   16df0:	ldr	r0, [r4, #12]
   16df4:	add	r0, r0, #1
   16df8:	str	r0, [r4, #12]
   16dfc:	mov	r0, sl
   16e00:	str	r9, [r6]
   16e04:	ldr	r3, [r0]
   16e08:	cmp	r2, #0
   16e0c:	str	r3, [r6, #4]
   16e10:	str	r6, [r0]
   16e14:	mov	r6, r2
   16e18:	bne	16db0 <__assert_fail@plt+0x58c8>
   16e1c:	str	r9, [r8, #4]
   16e20:	ldr	r0, [sp]
   16e24:	add	r8, r8, #8
   16e28:	cmp	r8, r0
   16e2c:	bcc	16d94 <__assert_fail@plt+0x58ac>
   16e30:	add	r1, sp, #4
   16e34:	mov	r0, r4
   16e38:	mov	r2, #0
   16e3c:	mov	r5, #0
   16e40:	bl	16e68 <__assert_fail@plt+0x5980>
   16e44:	cmp	r0, #0
   16e48:	beq	16e60 <__assert_fail@plt+0x5978>
   16e4c:	ldr	r0, [sp, #4]
   16e50:	bl	13acc <__assert_fail@plt+0x25e4>
   16e54:	mov	r0, r5
   16e58:	sub	sp, fp, #28
   16e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e60:	bl	114a0 <abort@plt>
   16e64:	svcmi	0x00800000
   16e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e6c:	add	fp, sp, #28
   16e70:	sub	sp, sp, #4
   16e74:	ldr	r8, [r1]
   16e78:	ldr	r3, [r1, #4]
   16e7c:	mov	r6, r0
   16e80:	mov	r0, #1
   16e84:	str	r1, [sp]
   16e88:	cmp	r8, r3
   16e8c:	bcs	1708c <__assert_fail@plt+0x5ba4>
   16e90:	add	r9, r6, #36	; 0x24
   16e94:	cmp	r2, #0
   16e98:	beq	16f44 <__assert_fail@plt+0x5a5c>
   16e9c:	mov	sl, #0
   16ea0:	ldr	r1, [r8]
   16ea4:	cmp	r1, #0
   16ea8:	beq	16f34 <__assert_fail@plt+0x5a4c>
   16eac:	ldr	r7, [r8, #4]
   16eb0:	cmp	r7, #0
   16eb4:	beq	16f30 <__assert_fail@plt+0x5a48>
   16eb8:	ldr	r1, [r6, #8]
   16ebc:	ldr	r4, [r7]
   16ec0:	ldr	r2, [r6, #24]
   16ec4:	mov	r0, r4
   16ec8:	blx	r2
   16ecc:	ldr	r1, [r6, #8]
   16ed0:	cmp	r0, r1
   16ed4:	bcs	170a0 <__assert_fail@plt+0x5bb8>
   16ed8:	ldr	r3, [r6]
   16edc:	ldr	r2, [r7, #4]
   16ee0:	ldr	r5, [r3, r0, lsl #3]
   16ee4:	cmp	r5, #0
   16ee8:	beq	16ef8 <__assert_fail@plt+0x5a10>
   16eec:	add	r0, r3, r0, lsl #3
   16ef0:	add	r0, r0, #4
   16ef4:	b	16f10 <__assert_fail@plt+0x5a28>
   16ef8:	str	r4, [r3, r0, lsl #3]
   16efc:	ldr	r0, [r6, #12]
   16f00:	add	r0, r0, #1
   16f04:	str	r0, [r6, #12]
   16f08:	mov	r0, r9
   16f0c:	str	sl, [r7]
   16f10:	ldr	r3, [r0]
   16f14:	cmp	r2, #0
   16f18:	str	r3, [r7, #4]
   16f1c:	str	r7, [r0]
   16f20:	mov	r7, r2
   16f24:	bne	16ebc <__assert_fail@plt+0x59d4>
   16f28:	ldr	r0, [sp]
   16f2c:	ldr	r3, [r0, #4]
   16f30:	str	sl, [r8, #4]
   16f34:	add	r8, r8, #8
   16f38:	cmp	r8, r3
   16f3c:	bcc	16ea0 <__assert_fail@plt+0x59b8>
   16f40:	b	17088 <__assert_fail@plt+0x5ba0>
   16f44:	mov	r5, #0
   16f48:	ldr	sl, [r8]
   16f4c:	cmp	sl, #0
   16f50:	beq	1707c <__assert_fail@plt+0x5b94>
   16f54:	ldr	r7, [r8, #4]
   16f58:	ldr	r1, [r6, #8]
   16f5c:	cmp	r7, #0
   16f60:	beq	16fdc <__assert_fail@plt+0x5af4>
   16f64:	mov	sl, #0
   16f68:	ldr	r4, [r7]
   16f6c:	ldr	r2, [r6, #24]
   16f70:	mov	r0, r4
   16f74:	blx	r2
   16f78:	ldr	r1, [r6, #8]
   16f7c:	cmp	r0, r1
   16f80:	bcs	170a0 <__assert_fail@plt+0x5bb8>
   16f84:	ldr	r3, [r6]
   16f88:	ldr	r2, [r7, #4]
   16f8c:	ldr	r5, [r3, r0, lsl #3]
   16f90:	cmp	r5, #0
   16f94:	beq	16fa4 <__assert_fail@plt+0x5abc>
   16f98:	add	r0, r3, r0, lsl #3
   16f9c:	add	r0, r0, #4
   16fa0:	b	16fbc <__assert_fail@plt+0x5ad4>
   16fa4:	str	r4, [r3, r0, lsl #3]
   16fa8:	ldr	r0, [r6, #12]
   16fac:	add	r0, r0, #1
   16fb0:	str	r0, [r6, #12]
   16fb4:	mov	r0, r9
   16fb8:	str	sl, [r7]
   16fbc:	ldr	r3, [r0]
   16fc0:	cmp	r2, #0
   16fc4:	str	r3, [r7, #4]
   16fc8:	str	r7, [r0]
   16fcc:	mov	r7, r2
   16fd0:	bne	16f68 <__assert_fail@plt+0x5a80>
   16fd4:	ldr	sl, [r8]
   16fd8:	mov	r5, #0
   16fdc:	str	r5, [r8, #4]
   16fe0:	mov	r0, sl
   16fe4:	ldr	r2, [r6, #24]
   16fe8:	blx	r2
   16fec:	mov	r4, r0
   16ff0:	ldr	r0, [r6, #8]
   16ff4:	cmp	r4, r0
   16ff8:	bcs	170a0 <__assert_fail@plt+0x5bb8>
   16ffc:	ldr	r7, [r6]
   17000:	ldr	r0, [r7, r4, lsl #3]
   17004:	cmp	r0, #0
   17008:	beq	17028 <__assert_fail@plt+0x5b40>
   1700c:	ldr	r0, [r9]
   17010:	cmp	r0, #0
   17014:	beq	1703c <__assert_fail@plt+0x5b54>
   17018:	mov	r1, r0
   1701c:	ldr	r2, [r1, #4]!
   17020:	str	r2, [r9]
   17024:	b	17050 <__assert_fail@plt+0x5b68>
   17028:	str	sl, [r7, r4, lsl #3]
   1702c:	ldr	r0, [r6, #12]
   17030:	add	r0, r0, #1
   17034:	str	r0, [r6, #12]
   17038:	b	17064 <__assert_fail@plt+0x5b7c>
   1703c:	mov	r0, #8
   17040:	bl	1a6ac <__assert_fail@plt+0x91c4>
   17044:	cmp	r0, #0
   17048:	beq	17094 <__assert_fail@plt+0x5bac>
   1704c:	add	r1, r0, #4
   17050:	str	sl, [r0]
   17054:	add	r2, r7, r4, lsl #3
   17058:	ldr	r3, [r2, #4]
   1705c:	str	r3, [r1]
   17060:	str	r0, [r2, #4]
   17064:	ldr	r0, [sp]
   17068:	str	r5, [r8]
   1706c:	ldr	r1, [r0, #12]
   17070:	ldr	r3, [r0, #4]
   17074:	sub	r1, r1, #1
   17078:	str	r1, [r0, #12]
   1707c:	add	r8, r8, #8
   17080:	cmp	r8, r3
   17084:	bcc	16f48 <__assert_fail@plt+0x5a60>
   17088:	mov	r0, #1
   1708c:	sub	sp, fp, #28
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	mov	r0, #0
   17098:	sub	sp, fp, #28
   1709c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a0:	bl	114a0 <abort@plt>
   170a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170a8:	add	fp, sp, #28
   170ac:	sub	sp, sp, #4
   170b0:	cmp	r1, #0
   170b4:	beq	173f8 <__assert_fail@plt+0x5f10>
   170b8:	mov	r8, r2
   170bc:	mov	sl, r1
   170c0:	ldr	r1, [r0, #8]
   170c4:	ldr	r2, [r0, #24]
   170c8:	mov	r4, r0
   170cc:	mov	r0, sl
   170d0:	blx	r2
   170d4:	mov	r7, r0
   170d8:	ldr	r0, [r4, #8]
   170dc:	cmp	r7, r0
   170e0:	bcs	173f8 <__assert_fail@plt+0x5f10>
   170e4:	ldr	r5, [r4]
   170e8:	mov	r9, r5
   170ec:	ldr	r1, [r9, r7, lsl #3]!
   170f0:	cmp	r1, #0
   170f4:	beq	17188 <__assert_fail@plt+0x5ca0>
   170f8:	cmp	r1, sl
   170fc:	beq	17128 <__assert_fail@plt+0x5c40>
   17100:	ldr	r2, [r4, #28]
   17104:	mov	r0, sl
   17108:	blx	r2
   1710c:	cmp	r0, #0
   17110:	mov	r6, r9
   17114:	beq	17144 <__assert_fail@plt+0x5c5c>
   17118:	ldr	r0, [r6]
   1711c:	cmp	r0, #0
   17120:	bne	1712c <__assert_fail@plt+0x5c44>
   17124:	b	17188 <__assert_fail@plt+0x5ca0>
   17128:	mov	r0, sl
   1712c:	cmp	r8, #0
   17130:	mov	r7, #0
   17134:	strne	r0, [r8]
   17138:	mov	r0, r7
   1713c:	sub	sp, fp, #28
   17140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17144:	add	r6, r5, r7, lsl #3
   17148:	ldr	r0, [r6, #4]!
   1714c:	cmp	r0, #0
   17150:	beq	17188 <__assert_fail@plt+0x5ca0>
   17154:	ldr	r1, [r0]
   17158:	cmp	r1, sl
   1715c:	beq	1717c <__assert_fail@plt+0x5c94>
   17160:	ldr	r2, [r4, #28]
   17164:	mov	r0, sl
   17168:	blx	r2
   1716c:	ldr	r6, [r6]
   17170:	cmp	r0, #0
   17174:	beq	17148 <__assert_fail@plt+0x5c60>
   17178:	b	17118 <__assert_fail@plt+0x5c30>
   1717c:	mov	r0, sl
   17180:	cmp	r0, #0
   17184:	bne	1712c <__assert_fail@plt+0x5c44>
   17188:	vldr	s0, [r4, #8]
   1718c:	vldr	s2, [r4, #12]
   17190:	ldr	r0, [r4, #20]
   17194:	vcvt.f32.u32	s0, s0
   17198:	vcvt.f32.u32	s4, s2
   1719c:	vldr	s2, [r0, #8]
   171a0:	vmul.f32	s6, s2, s0
   171a4:	vcmpe.f32	s6, s4
   171a8:	vmrs	APSR_nzcv, fpscr
   171ac:	bpl	17310 <__assert_fail@plt+0x5e28>
   171b0:	movw	r1, #49328	; 0xc0b0
   171b4:	movt	r1, #1
   171b8:	cmp	r0, r1
   171bc:	beq	17258 <__assert_fail@plt+0x5d70>
   171c0:	vldr	s6, [pc, #564]	; 173fc <__assert_fail@plt+0x5f14>
   171c4:	vcmpe.f32	s2, s6
   171c8:	vmrs	APSR_nzcv, fpscr
   171cc:	ble	17234 <__assert_fail@plt+0x5d4c>
   171d0:	vldr	s8, [pc, #552]	; 17400 <__assert_fail@plt+0x5f18>
   171d4:	vcmpe.f32	s2, s8
   171d8:	vmrs	APSR_nzcv, fpscr
   171dc:	bpl	17234 <__assert_fail@plt+0x5d4c>
   171e0:	vldr	s8, [pc, #540]	; 17404 <__assert_fail@plt+0x5f1c>
   171e4:	vldr	s10, [r0, #12]
   171e8:	vcmpe.f32	s10, s8
   171ec:	vmrs	APSR_nzcv, fpscr
   171f0:	ble	17234 <__assert_fail@plt+0x5d4c>
   171f4:	vldr	s8, [r0]
   171f8:	vcmpe.f32	s8, #0.0
   171fc:	vmrs	APSR_nzcv, fpscr
   17200:	blt	17234 <__assert_fail@plt+0x5d4c>
   17204:	vadd.f32	s6, s8, s6
   17208:	vcmpe.f32	s6, s2
   1720c:	vmrs	APSR_nzcv, fpscr
   17210:	bpl	17234 <__assert_fail@plt+0x5d4c>
   17214:	vldr	s8, [r0, #4]
   17218:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1721c:	vcmpe.f32	s8, s10
   17220:	vmrs	APSR_nzcv, fpscr
   17224:	bhi	17234 <__assert_fail@plt+0x5d4c>
   17228:	vcmpe.f32	s6, s8
   1722c:	vmrs	APSR_nzcv, fpscr
   17230:	bmi	17244 <__assert_fail@plt+0x5d5c>
   17234:	vldr	s2, [pc, #460]	; 17408 <__assert_fail@plt+0x5f20>
   17238:	movw	r0, #49328	; 0xc0b0
   1723c:	movt	r0, #1
   17240:	str	r0, [r4, #20]
   17244:	vmul.f32	s6, s2, s0
   17248:	vcmpe.f32	s6, s4
   1724c:	vmrs	APSR_nzcv, fpscr
   17250:	bmi	1726c <__assert_fail@plt+0x5d84>
   17254:	b	17310 <__assert_fail@plt+0x5e28>
   17258:	mov	r0, r1
   1725c:	vmul.f32	s6, s2, s0
   17260:	vcmpe.f32	s6, s4
   17264:	vmrs	APSR_nzcv, fpscr
   17268:	bpl	17310 <__assert_fail@plt+0x5e28>
   1726c:	vldr	s4, [r0, #12]
   17270:	ldrb	r0, [r0, #16]
   17274:	mvn	r7, #0
   17278:	vmul.f32	s0, s4, s0
   1727c:	vldr	s4, [pc, #392]	; 1740c <__assert_fail@plt+0x5f24>
   17280:	cmp	r0, #0
   17284:	vmul.f32	s2, s2, s0
   17288:	vseleq.f32	s0, s2, s0
   1728c:	vcmpe.f32	s0, s4
   17290:	vmrs	APSR_nzcv, fpscr
   17294:	bge	1738c <__assert_fail@plt+0x5ea4>
   17298:	vcvt.u32.f32	s0, s0
   1729c:	mov	r0, r4
   172a0:	vmov	r1, s0
   172a4:	bl	16bf4 <__assert_fail@plt+0x570c>
   172a8:	cmp	r0, #0
   172ac:	beq	1738c <__assert_fail@plt+0x5ea4>
   172b0:	ldr	r1, [r4, #8]
   172b4:	ldr	r2, [r4, #24]
   172b8:	mov	r0, sl
   172bc:	blx	r2
   172c0:	mov	r7, r0
   172c4:	ldr	r0, [r4, #8]
   172c8:	cmp	r7, r0
   172cc:	bcs	173f8 <__assert_fail@plt+0x5f10>
   172d0:	ldr	r5, [r4]
   172d4:	mov	r9, r5
   172d8:	ldr	r1, [r9, r7, lsl #3]!
   172dc:	cmp	r1, #0
   172e0:	beq	17338 <__assert_fail@plt+0x5e50>
   172e4:	cmp	r1, sl
   172e8:	mov	r0, sl
   172ec:	beq	17308 <__assert_fail@plt+0x5e20>
   172f0:	ldr	r2, [r4, #28]
   172f4:	mov	r0, sl
   172f8:	blx	r2
   172fc:	cmp	r0, #0
   17300:	beq	173a8 <__assert_fail@plt+0x5ec0>
   17304:	ldr	r0, [r9]
   17308:	cmp	r0, #0
   1730c:	bne	173f8 <__assert_fail@plt+0x5f10>
   17310:	ldr	r0, [r9]
   17314:	cmp	r0, #0
   17318:	beq	17338 <__assert_fail@plt+0x5e50>
   1731c:	ldr	r0, [r4, #36]	; 0x24
   17320:	cmp	r0, #0
   17324:	beq	17358 <__assert_fail@plt+0x5e70>
   17328:	mov	r1, r0
   1732c:	ldr	r2, [r1, #4]!
   17330:	str	r2, [r4, #36]	; 0x24
   17334:	b	1736c <__assert_fail@plt+0x5e84>
   17338:	str	sl, [r9]
   1733c:	ldr	r0, [r4, #12]
   17340:	ldr	r1, [r4, #16]
   17344:	add	r0, r0, #1
   17348:	add	r1, r1, #1
   1734c:	str	r0, [r4, #12]
   17350:	str	r1, [r4, #16]
   17354:	b	17388 <__assert_fail@plt+0x5ea0>
   17358:	mov	r0, #8
   1735c:	bl	1a6ac <__assert_fail@plt+0x91c4>
   17360:	cmp	r0, #0
   17364:	beq	17398 <__assert_fail@plt+0x5eb0>
   17368:	add	r1, r0, #4
   1736c:	str	sl, [r0]
   17370:	ldr	r2, [r9, #4]
   17374:	str	r2, [r1]
   17378:	str	r0, [r9, #4]
   1737c:	ldr	r0, [r4, #16]
   17380:	add	r0, r0, #1
   17384:	str	r0, [r4, #16]
   17388:	mov	r7, #1
   1738c:	mov	r0, r7
   17390:	sub	sp, fp, #28
   17394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17398:	mvn	r7, #0
   1739c:	mov	r0, r7
   173a0:	sub	sp, fp, #28
   173a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173a8:	add	r6, r5, r7, lsl #3
   173ac:	ldr	r0, [r6, #4]!
   173b0:	cmp	r0, #0
   173b4:	beq	17310 <__assert_fail@plt+0x5e28>
   173b8:	ldr	r1, [r0]
   173bc:	cmp	r1, sl
   173c0:	beq	173ec <__assert_fail@plt+0x5f04>
   173c4:	ldr	r2, [r4, #28]
   173c8:	mov	r0, sl
   173cc:	blx	r2
   173d0:	ldr	r6, [r6]
   173d4:	cmp	r0, #0
   173d8:	beq	173ac <__assert_fail@plt+0x5ec4>
   173dc:	ldr	r0, [r6]
   173e0:	cmp	r0, #0
   173e4:	beq	17310 <__assert_fail@plt+0x5e28>
   173e8:	b	173f8 <__assert_fail@plt+0x5f10>
   173ec:	mov	r0, sl
   173f0:	cmp	r0, #0
   173f4:	beq	17310 <__assert_fail@plt+0x5e28>
   173f8:	bl	114a0 <abort@plt>
   173fc:	stclcc	12, cr12, [ip, #820]	; 0x334
   17400:	svccc	0x00666666
   17404:	svccc	0x008ccccd
   17408:	svccc	0x004ccccd
   1740c:	svcmi	0x00800000
   17410:	push	{r4, sl, fp, lr}
   17414:	add	fp, sp, #8
   17418:	sub	sp, sp, #8
   1741c:	add	r2, sp, #4
   17420:	mov	r4, r1
   17424:	bl	170a4 <__assert_fail@plt+0x5bbc>
   17428:	cmn	r0, #1
   1742c:	beq	17448 <__assert_fail@plt+0x5f60>
   17430:	ldr	r1, [sp, #4]
   17434:	cmp	r0, #0
   17438:	moveq	r4, r1
   1743c:	mov	r0, r4
   17440:	sub	sp, fp, #8
   17444:	pop	{r4, sl, fp, pc}
   17448:	mov	r4, #0
   1744c:	mov	r0, r4
   17450:	sub	sp, fp, #8
   17454:	pop	{r4, sl, fp, pc}
   17458:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1745c:	add	fp, sp, #24
   17460:	mov	r9, r1
   17464:	ldr	r1, [r0, #8]
   17468:	ldr	r2, [r0, #24]
   1746c:	mov	r5, r0
   17470:	mov	r0, r9
   17474:	blx	r2
   17478:	mov	r7, r0
   1747c:	ldr	r0, [r5, #8]
   17480:	cmp	r7, r0
   17484:	bcs	176f4 <__assert_fail@plt+0x620c>
   17488:	ldr	r6, [r5]
   1748c:	mov	r8, #0
   17490:	mov	r4, r6
   17494:	ldr	r1, [r4, r7, lsl #3]!
   17498:	cmp	r1, #0
   1749c:	beq	17550 <__assert_fail@plt+0x6068>
   174a0:	cmp	r1, r9
   174a4:	beq	174c0 <__assert_fail@plt+0x5fd8>
   174a8:	ldr	r2, [r5, #28]
   174ac:	mov	r0, r9
   174b0:	blx	r2
   174b4:	cmp	r0, #0
   174b8:	beq	174f8 <__assert_fail@plt+0x6010>
   174bc:	ldr	r9, [r4]
   174c0:	add	r0, r6, r7, lsl #3
   174c4:	ldr	r0, [r0, #4]
   174c8:	cmp	r0, #0
   174cc:	beq	17540 <__assert_fail@plt+0x6058>
   174d0:	ldm	r0, {r1, r2}
   174d4:	stm	r4, {r1, r2}
   174d8:	mov	r1, #0
   174dc:	str	r1, [r0]
   174e0:	ldr	r1, [r5, #36]	; 0x24
   174e4:	str	r1, [r0, #4]
   174e8:	str	r0, [r5, #36]	; 0x24
   174ec:	cmp	r9, #0
   174f0:	bne	17588 <__assert_fail@plt+0x60a0>
   174f4:	b	17550 <__assert_fail@plt+0x6068>
   174f8:	add	r7, r6, r7, lsl #3
   174fc:	ldr	r0, [r7, #4]!
   17500:	cmp	r0, #0
   17504:	beq	17550 <__assert_fail@plt+0x6068>
   17508:	ldr	r1, [r0]
   1750c:	cmp	r1, r9
   17510:	beq	17558 <__assert_fail@plt+0x6070>
   17514:	ldr	r2, [r5, #28]
   17518:	mov	r0, r9
   1751c:	blx	r2
   17520:	ldr	r1, [r7]
   17524:	cmp	r0, #0
   17528:	bne	17560 <__assert_fail@plt+0x6078>
   1752c:	ldr	r0, [r1, #4]!
   17530:	cmp	r0, #0
   17534:	mov	r7, r1
   17538:	bne	17508 <__assert_fail@plt+0x6020>
   1753c:	b	17550 <__assert_fail@plt+0x6068>
   17540:	mov	r0, #0
   17544:	str	r0, [r4]
   17548:	cmp	r9, #0
   1754c:	bne	17588 <__assert_fail@plt+0x60a0>
   17550:	mov	r0, r8
   17554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17558:	mov	r1, r0
   1755c:	b	17564 <__assert_fail@plt+0x607c>
   17560:	ldr	r9, [r1]
   17564:	ldr	r0, [r1, #4]
   17568:	str	r0, [r7]
   1756c:	mov	r0, #0
   17570:	str	r0, [r1]
   17574:	ldr	r0, [r5, #36]	; 0x24
   17578:	str	r0, [r1, #4]
   1757c:	str	r1, [r5, #36]	; 0x24
   17580:	cmp	r9, #0
   17584:	beq	17550 <__assert_fail@plt+0x6068>
   17588:	ldr	r0, [r5, #16]
   1758c:	sub	r0, r0, #1
   17590:	str	r0, [r5, #16]
   17594:	ldr	r0, [r4]
   17598:	cmp	r0, #0
   1759c:	bne	176b4 <__assert_fail@plt+0x61cc>
   175a0:	ldr	r0, [r5, #12]
   175a4:	vldr	s0, [r5, #8]
   175a8:	sub	r1, r0, #1
   175ac:	str	r1, [r5, #12]
   175b0:	vmov	s2, r1
   175b4:	ldr	r0, [r5, #20]
   175b8:	vcvt.f32.u32	s0, s0
   175bc:	vcvt.f32.u32	s2, s2
   175c0:	vldr	s4, [r0]
   175c4:	vmul.f32	s6, s4, s0
   175c8:	vcmpe.f32	s6, s2
   175cc:	vmrs	APSR_nzcv, fpscr
   175d0:	ble	176b4 <__assert_fail@plt+0x61cc>
   175d4:	movw	r1, #49328	; 0xc0b0
   175d8:	movt	r1, #1
   175dc:	cmp	r0, r1
   175e0:	beq	17648 <__assert_fail@plt+0x6160>
   175e4:	vldr	s8, [pc, #268]	; 176f8 <__assert_fail@plt+0x6210>
   175e8:	vldr	s6, [r0, #8]
   175ec:	vcmpe.f32	s6, s8
   175f0:	vmrs	APSR_nzcv, fpscr
   175f4:	ble	17624 <__assert_fail@plt+0x613c>
   175f8:	vldr	s10, [pc, #252]	; 176fc <__assert_fail@plt+0x6214>
   175fc:	vcmpe.f32	s6, s10
   17600:	vmrs	APSR_nzcv, fpscr
   17604:	bpl	17624 <__assert_fail@plt+0x613c>
   17608:	vcmpe.f32	s4, #0.0
   1760c:	vmrs	APSR_nzcv, fpscr
   17610:	vldrge	s10, [r0, #12]
   17614:	vldrge	s12, [pc, #228]	; 17700 <__assert_fail@plt+0x6218>
   17618:	vcmpege.f32	s10, s12
   1761c:	vmrsge	APSR_nzcv, fpscr
   17620:	bgt	176c0 <__assert_fail@plt+0x61d8>
   17624:	vldr	s4, [pc, #216]	; 17704 <__assert_fail@plt+0x621c>
   17628:	movw	r0, #49328	; 0xc0b0
   1762c:	movt	r0, #1
   17630:	str	r0, [r5, #20]
   17634:	vmul.f32	s4, s4, s0
   17638:	vcmpe.f32	s4, s2
   1763c:	vmrs	APSR_nzcv, fpscr
   17640:	bgt	1765c <__assert_fail@plt+0x6174>
   17644:	b	176b4 <__assert_fail@plt+0x61cc>
   17648:	mov	r0, r1
   1764c:	vmul.f32	s4, s4, s0
   17650:	vcmpe.f32	s4, s2
   17654:	vmrs	APSR_nzcv, fpscr
   17658:	ble	176b4 <__assert_fail@plt+0x61cc>
   1765c:	ldrb	r1, [r0, #16]
   17660:	vldr	s2, [r0, #4]
   17664:	cmp	r1, #0
   17668:	vmul.f32	s0, s2, s0
   1766c:	vldreq	s2, [r0, #8]
   17670:	mov	r0, r5
   17674:	vmuleq.f32	s0, s0, s2
   17678:	vcvt.u32.f32	s0, s0
   1767c:	vmov	r1, s0
   17680:	bl	16bf4 <__assert_fail@plt+0x570c>
   17684:	cmp	r0, #0
   17688:	bne	176b4 <__assert_fail@plt+0x61cc>
   1768c:	ldr	r0, [r5, #36]	; 0x24
   17690:	cmp	r0, #0
   17694:	beq	176ac <__assert_fail@plt+0x61c4>
   17698:	ldr	r4, [r0, #4]
   1769c:	bl	13acc <__assert_fail@plt+0x25e4>
   176a0:	cmp	r4, #0
   176a4:	mov	r0, r4
   176a8:	bne	17698 <__assert_fail@plt+0x61b0>
   176ac:	mov	r0, #0
   176b0:	str	r0, [r5, #36]	; 0x24
   176b4:	mov	r8, r9
   176b8:	mov	r0, r8
   176bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   176c0:	vadd.f32	s8, s4, s8
   176c4:	vcmpe.f32	s8, s6
   176c8:	vmrs	APSR_nzcv, fpscr
   176cc:	bpl	17624 <__assert_fail@plt+0x613c>
   176d0:	vldr	s6, [r0, #4]
   176d4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   176d8:	vcmpe.f32	s6, s10
   176dc:	vmrs	APSR_nzcv, fpscr
   176e0:	bhi	17624 <__assert_fail@plt+0x613c>
   176e4:	vcmpe.f32	s8, s6
   176e8:	vmrs	APSR_nzcv, fpscr
   176ec:	bmi	1764c <__assert_fail@plt+0x6164>
   176f0:	b	17624 <__assert_fail@plt+0x613c>
   176f4:	bl	114a0 <abort@plt>
   176f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   176fc:	svccc	0x00666666
   17700:	svccc	0x008ccccd
   17704:	andeq	r0, r0, r0
   17708:	b	17458 <__assert_fail@plt+0x5f70>
   1770c:	mov	r3, #1
   17710:	mov	r2, #0
   17714:	vdup.32	q8, r1
   17718:	strb	r3, [r0, #28]
   1771c:	str	r2, [r0, #20]
   17720:	str	r2, [r0, #24]
   17724:	vst1.32	{d16-d17}, [r0]!
   17728:	str	r1, [r0]
   1772c:	bx	lr
   17730:	ldrb	r0, [r0, #28]
   17734:	bx	lr
   17738:	push	{fp, lr}
   1773c:	mov	fp, sp
   17740:	ldrb	r3, [r0, #28]
   17744:	ldr	r2, [r0, #20]
   17748:	eor	lr, r3, #1
   1774c:	add	r2, r2, lr
   17750:	and	r3, r2, #3
   17754:	ldr	ip, [r0, r3, lsl #2]
   17758:	str	r1, [r0, r3, lsl #2]
   1775c:	str	r3, [r0, #20]
   17760:	ldr	r1, [r0, #24]
   17764:	cmp	r3, r1
   17768:	addeq	r1, r2, lr
   1776c:	andeq	r1, r1, #3
   17770:	streq	r1, [r0, #24]
   17774:	mov	r1, #0
   17778:	strb	r1, [r0, #28]
   1777c:	mov	r0, ip
   17780:	pop	{fp, pc}
   17784:	ldrb	r1, [r0, #28]
   17788:	cmp	r1, #0
   1778c:	bne	177d0 <__assert_fail@plt+0x62e8>
   17790:	ldr	r3, [r0, #20]
   17794:	ldr	r2, [r0, #16]
   17798:	ldr	r1, [r0, r3, lsl #2]
   1779c:	str	r2, [r0, r3, lsl #2]
   177a0:	ldr	r2, [r0, #20]
   177a4:	ldr	r3, [r0, #24]
   177a8:	cmp	r2, r3
   177ac:	moveq	r2, #1
   177b0:	strbeq	r2, [r0, #28]
   177b4:	moveq	r0, r1
   177b8:	bxeq	lr
   177bc:	sub	r2, r2, #1
   177c0:	and	r2, r2, #3
   177c4:	str	r2, [r0, #20]
   177c8:	mov	r0, r1
   177cc:	bx	lr
   177d0:	push	{fp, lr}
   177d4:	mov	fp, sp
   177d8:	bl	114a0 <abort@plt>
   177dc:	sub	sp, sp, #4
   177e0:	push	{fp, lr}
   177e4:	mov	fp, sp
   177e8:	sub	sp, sp, #4
   177ec:	str	r3, [fp, #8]
   177f0:	mov	r3, #0
   177f4:	tst	r2, #64	; 0x40
   177f8:	addne	r3, fp, #8
   177fc:	addne	r3, r3, #4
   17800:	strne	r3, [sp]
   17804:	ldrne	r3, [fp, #8]
   17808:	bl	11380 <openat64@plt>
   1780c:	bl	19868 <__assert_fail@plt+0x8380>
   17810:	mov	sp, fp
   17814:	pop	{fp, lr}
   17818:	add	sp, sp, #4
   1781c:	bx	lr
   17820:	push	{r4, r5, r6, sl, fp, lr}
   17824:	add	fp, sp, #16
   17828:	orr	r2, r2, #18688	; 0x4900
   1782c:	mov	r4, r3
   17830:	orr	r2, r2, #524288	; 0x80000
   17834:	bl	177dc <__assert_fail@plt+0x62f4>
   17838:	mov	r5, r0
   1783c:	mov	r0, #0
   17840:	cmp	r5, #0
   17844:	poplt	{r4, r5, r6, sl, fp, pc}
   17848:	mov	r0, r5
   1784c:	bl	11440 <fdopendir@plt>
   17850:	cmp	r0, #0
   17854:	strne	r5, [r4]
   17858:	popne	{r4, r5, r6, sl, fp, pc}
   1785c:	bl	1138c <__errno_location@plt>
   17860:	ldr	r6, [r0]
   17864:	mov	r4, r0
   17868:	mov	r0, r5
   1786c:	bl	114ac <close@plt>
   17870:	mov	r0, #0
   17874:	str	r6, [r4]
   17878:	pop	{r4, r5, r6, sl, fp, pc}
   1787c:	push	{r4, r5, fp, lr}
   17880:	add	fp, sp, #8
   17884:	cmp	r0, #0
   17888:	beq	1791c <__assert_fail@plt+0x6434>
   1788c:	mov	r1, #47	; 0x2f
   17890:	mov	r4, r0
   17894:	bl	1141c <strrchr@plt>
   17898:	cmp	r0, #0
   1789c:	mov	r5, r4
   178a0:	addne	r5, r0, #1
   178a4:	sub	r0, r5, r4
   178a8:	cmp	r0, #7
   178ac:	blt	17900 <__assert_fail@plt+0x6418>
   178b0:	movw	r1, #49404	; 0xc0fc
   178b4:	sub	r0, r5, #7
   178b8:	mov	r2, #7
   178bc:	movt	r1, #1
   178c0:	bl	11494 <strncmp@plt>
   178c4:	cmp	r0, #0
   178c8:	bne	17900 <__assert_fail@plt+0x6418>
   178cc:	movw	r1, #49412	; 0xc104
   178d0:	mov	r0, r5
   178d4:	mov	r2, #3
   178d8:	movt	r1, #1
   178dc:	bl	11494 <strncmp@plt>
   178e0:	cmp	r0, #0
   178e4:	beq	178f0 <__assert_fail@plt+0x6408>
   178e8:	mov	r4, r5
   178ec:	b	17900 <__assert_fail@plt+0x6418>
   178f0:	movw	r0, #53624	; 0xd178
   178f4:	add	r4, r5, #3
   178f8:	movt	r0, #2
   178fc:	str	r4, [r0]
   17900:	movw	r0, #53628	; 0xd17c
   17904:	movt	r0, #2
   17908:	str	r4, [r0]
   1790c:	movw	r0, #53692	; 0xd1bc
   17910:	movt	r0, #2
   17914:	str	r4, [r0]
   17918:	pop	{r4, r5, fp, pc}
   1791c:	movw	r0, #53640	; 0xd188
   17920:	mov	r1, #55	; 0x37
   17924:	mov	r2, #1
   17928:	movt	r0, #2
   1792c:	ldr	r3, [r0]
   17930:	movw	r0, #49348	; 0xc0c4
   17934:	movt	r0, #1
   17938:	bl	112cc <fwrite@plt>
   1793c:	bl	114a0 <abort@plt>
   17940:	push	{r4, r5, r6, sl, fp, lr}
   17944:	add	fp, sp, #16
   17948:	mov	r4, r0
   1794c:	movw	r0, #53696	; 0xd1c0
   17950:	movt	r0, #2
   17954:	cmp	r4, #0
   17958:	moveq	r4, r0
   1795c:	bl	1138c <__errno_location@plt>
   17960:	ldr	r6, [r0]
   17964:	mov	r5, r0
   17968:	mov	r0, r4
   1796c:	mov	r1, #48	; 0x30
   17970:	bl	1a41c <__assert_fail@plt+0x8f34>
   17974:	str	r6, [r5]
   17978:	pop	{r4, r5, r6, sl, fp, pc}
   1797c:	movw	r1, #53696	; 0xd1c0
   17980:	cmp	r0, #0
   17984:	movt	r1, #2
   17988:	movne	r1, r0
   1798c:	ldr	r0, [r1]
   17990:	bx	lr
   17994:	movw	r2, #53696	; 0xd1c0
   17998:	cmp	r0, #0
   1799c:	movt	r2, #2
   179a0:	movne	r2, r0
   179a4:	str	r1, [r2]
   179a8:	bx	lr
   179ac:	movw	r3, #53696	; 0xd1c0
   179b0:	cmp	r0, #0
   179b4:	movt	r3, #2
   179b8:	movne	r3, r0
   179bc:	ubfx	r0, r1, #5, #3
   179c0:	and	r1, r1, #31
   179c4:	add	r0, r3, r0, lsl #2
   179c8:	ldr	r3, [r0, #8]
   179cc:	eor	r2, r2, r3, lsr r1
   179d0:	and	r2, r2, #1
   179d4:	eor	r2, r3, r2, lsl r1
   179d8:	str	r2, [r0, #8]
   179dc:	mov	r0, #1
   179e0:	and	r0, r0, r3, lsr r1
   179e4:	bx	lr
   179e8:	movw	r2, #53696	; 0xd1c0
   179ec:	cmp	r0, #0
   179f0:	movt	r2, #2
   179f4:	movne	r2, r0
   179f8:	ldr	r0, [r2, #4]
   179fc:	str	r1, [r2, #4]
   17a00:	bx	lr
   17a04:	movw	r3, #53696	; 0xd1c0
   17a08:	cmp	r0, #0
   17a0c:	movt	r3, #2
   17a10:	movne	r3, r0
   17a14:	cmp	r1, #0
   17a18:	mov	r0, #10
   17a1c:	cmpne	r2, #0
   17a20:	str	r0, [r3]
   17a24:	bne	17a34 <__assert_fail@plt+0x654c>
   17a28:	push	{fp, lr}
   17a2c:	mov	fp, sp
   17a30:	bl	114a0 <abort@plt>
   17a34:	str	r1, [r3, #40]	; 0x28
   17a38:	str	r2, [r3, #44]	; 0x2c
   17a3c:	bx	lr
   17a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a44:	add	fp, sp, #28
   17a48:	sub	sp, sp, #20
   17a4c:	mov	r7, r0
   17a50:	ldr	r0, [fp, #8]
   17a54:	movw	r5, #53696	; 0xd1c0
   17a58:	mov	r8, r3
   17a5c:	mov	r9, r2
   17a60:	mov	sl, r1
   17a64:	movt	r5, #2
   17a68:	cmp	r0, #0
   17a6c:	movne	r5, r0
   17a70:	bl	1138c <__errno_location@plt>
   17a74:	mov	r4, r0
   17a78:	ldm	r5, {r0, r1}
   17a7c:	ldr	r2, [r5, #40]	; 0x28
   17a80:	ldr	r3, [r5, #44]	; 0x2c
   17a84:	add	r5, r5, #8
   17a88:	ldr	r6, [r4]
   17a8c:	stm	sp, {r0, r1, r5}
   17a90:	str	r2, [sp, #12]
   17a94:	str	r3, [sp, #16]
   17a98:	mov	r0, r7
   17a9c:	mov	r1, sl
   17aa0:	mov	r2, r9
   17aa4:	mov	r3, r8
   17aa8:	bl	17ab8 <__assert_fail@plt+0x65d0>
   17aac:	str	r6, [r4]
   17ab0:	sub	sp, fp, #28
   17ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17abc:	add	fp, sp, #28
   17ac0:	sub	sp, sp, #156	; 0x9c
   17ac4:	str	r0, [sp, #76]	; 0x4c
   17ac8:	ldr	r0, [fp, #12]
   17acc:	mov	r6, r1
   17ad0:	str	r3, [sp, #84]	; 0x54
   17ad4:	str	r2, [fp, #-84]	; 0xffffffac
   17ad8:	and	r1, r0, #4
   17adc:	str	r1, [sp, #24]
   17ae0:	and	r1, r0, #1
   17ae4:	str	r1, [sp, #28]
   17ae8:	ubfx	r8, r0, #1, #1
   17aec:	bl	112e4 <__ctype_get_mb_cur_max@plt>
   17af0:	str	r0, [sp, #32]
   17af4:	ldr	r0, [fp, #24]
   17af8:	ldr	r7, [fp, #8]
   17afc:	mov	r1, #0
   17b00:	mov	r2, #0
   17b04:	mov	r4, #1
   17b08:	str	r1, [sp, #52]	; 0x34
   17b0c:	str	r0, [sp, #72]	; 0x48
   17b10:	ldr	r0, [fp, #20]
   17b14:	str	r0, [sp, #68]	; 0x44
   17b18:	mov	r0, #0
   17b1c:	str	r0, [sp, #48]	; 0x30
   17b20:	mov	r0, #0
   17b24:	str	r0, [sp, #92]	; 0x5c
   17b28:	mov	r0, #0
   17b2c:	str	r0, [fp, #-76]	; 0xffffffb4
   17b30:	mov	r0, #0
   17b34:	cmp	r7, #10
   17b38:	bhi	18e20 <__assert_fail@plt+0x7938>
   17b3c:	add	r1, pc, #28
   17b40:	mov	sl, r6
   17b44:	ldr	r6, [sp, #76]	; 0x4c
   17b48:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b4c:	ldr	lr, [sp, #84]	; 0x54
   17b50:	mov	r9, #0
   17b54:	mov	r3, #1
   17b58:	mov	r5, #0
   17b5c:	ldr	pc, [r1, r7, lsl #2]
   17b60:	andeq	r7, r1, r0, lsr ip
   17b64:	andeq	r7, r1, ip, ror #24
   17b68:	andeq	r7, r1, r0, asr #24
   17b6c:	andeq	r7, r1, r8, lsr #24
   17b70:	andeq	r7, r1, r0, ror #24
   17b74:	muleq	r1, r4, ip
   17b78:	andeq	r7, r1, r0, asr ip
   17b7c:	andeq	r7, r1, r0, lsr #29
   17b80:	andeq	r7, r1, ip, lsl #23
   17b84:	andeq	r7, r1, ip, lsl #23
   17b88:	andeq	r7, r1, r4, lsr lr
   17b8c:	mov	r9, r4
   17b90:	movw	r4, #49494	; 0xc156
   17b94:	mov	r5, r8
   17b98:	mov	r8, r2
   17b9c:	mov	r0, #0
   17ba0:	mov	r2, #5
   17ba4:	movt	r4, #1
   17ba8:	mov	r1, r4
   17bac:	bl	11278 <dcgettext@plt>
   17bb0:	cmp	r0, r4
   17bb4:	str	r0, [sp, #68]	; 0x44
   17bb8:	bne	17d48 <__assert_fail@plt+0x6860>
   17bbc:	bl	1ab6c <__assert_fail@plt+0x9684>
   17bc0:	ldrb	r1, [r0]
   17bc4:	and	r1, r1, #223	; 0xdf
   17bc8:	cmp	r1, #71	; 0x47
   17bcc:	beq	17d14 <__assert_fail@plt+0x682c>
   17bd0:	cmp	r1, #85	; 0x55
   17bd4:	bne	17d2c <__assert_fail@plt+0x6844>
   17bd8:	ldrb	r1, [r0, #1]
   17bdc:	and	r1, r1, #223	; 0xdf
   17be0:	cmp	r1, #84	; 0x54
   17be4:	bne	17d2c <__assert_fail@plt+0x6844>
   17be8:	ldrb	r1, [r0, #2]
   17bec:	and	r1, r1, #223	; 0xdf
   17bf0:	cmp	r1, #70	; 0x46
   17bf4:	bne	17d2c <__assert_fail@plt+0x6844>
   17bf8:	ldrb	r1, [r0, #3]
   17bfc:	cmp	r1, #45	; 0x2d
   17c00:	ldrbeq	r1, [r0, #4]
   17c04:	cmpeq	r1, #56	; 0x38
   17c08:	bne	17d2c <__assert_fail@plt+0x6844>
   17c0c:	ldrb	r0, [r0, #5]
   17c10:	cmp	r0, #0
   17c14:	movw	r0, #49498	; 0xc15a
   17c18:	movt	r0, #1
   17c1c:	str	r0, [sp, #68]	; 0x44
   17c20:	bne	17d2c <__assert_fail@plt+0x6844>
   17c24:	b	17d48 <__assert_fail@plt+0x6860>
   17c28:	mov	r0, #1
   17c2c:	b	17c6c <__assert_fail@plt+0x6784>
   17c30:	mov	r7, #0
   17c34:	mov	r9, #0
   17c38:	mov	r3, r0
   17c3c:	b	17d0c <__assert_fail@plt+0x6824>
   17c40:	tst	r8, #1
   17c44:	bne	17c6c <__assert_fail@plt+0x6784>
   17c48:	mov	r3, r0
   17c4c:	b	17cc4 <__assert_fail@plt+0x67dc>
   17c50:	mov	r0, #1
   17c54:	mov	r9, #0
   17c58:	mov	r7, #5
   17c5c:	b	17ca8 <__assert_fail@plt+0x67c0>
   17c60:	mov	r3, #1
   17c64:	tst	r8, #1
   17c68:	beq	17cc4 <__assert_fail@plt+0x67dc>
   17c6c:	mov	r1, #1
   17c70:	mov	r9, #0
   17c74:	mov	r7, #2
   17c78:	mov	r3, r0
   17c7c:	mov	r5, #1
   17c80:	str	r1, [fp, #-76]	; 0xffffffb4
   17c84:	movw	r1, #49496	; 0xc158
   17c88:	movt	r1, #1
   17c8c:	str	r1, [sp, #92]	; 0x5c
   17c90:	b	17ea0 <__assert_fail@plt+0x69b8>
   17c94:	mov	r7, #5
   17c98:	tst	r8, #1
   17c9c:	beq	17ce4 <__assert_fail@plt+0x67fc>
   17ca0:	mov	r0, #1
   17ca4:	mov	r9, #0
   17ca8:	str	r0, [fp, #-76]	; 0xffffffb4
   17cac:	movw	r0, #49492	; 0xc154
   17cb0:	mov	r3, #1
   17cb4:	mov	r5, #1
   17cb8:	movt	r0, #1
   17cbc:	str	r0, [sp, #92]	; 0x5c
   17cc0:	b	17ea0 <__assert_fail@plt+0x69b8>
   17cc4:	cmp	sl, #0
   17cc8:	mov	r9, #1
   17ccc:	mov	r7, #2
   17cd0:	movne	r0, #39	; 0x27
   17cd4:	strbne	r0, [r6]
   17cd8:	movw	r0, #49496	; 0xc158
   17cdc:	movt	r0, #1
   17ce0:	b	17d00 <__assert_fail@plt+0x6818>
   17ce4:	cmp	sl, #0
   17ce8:	mov	r9, #1
   17cec:	mov	r3, #1
   17cf0:	movne	r0, #34	; 0x22
   17cf4:	strbne	r0, [r6]
   17cf8:	movw	r0, #49492	; 0xc154
   17cfc:	movt	r0, #1
   17d00:	str	r0, [sp, #92]	; 0x5c
   17d04:	mov	r0, #1
   17d08:	str	r0, [fp, #-76]	; 0xffffffb4
   17d0c:	mov	r5, #0
   17d10:	b	17ea0 <__assert_fail@plt+0x69b8>
   17d14:	ldrb	r1, [r0, #1]
   17d18:	and	r1, r1, #223	; 0xdf
   17d1c:	cmp	r1, #66	; 0x42
   17d20:	ldrbeq	r1, [r0, #2]
   17d24:	cmpeq	r1, #49	; 0x31
   17d28:	beq	18c48 <__assert_fail@plt+0x7760>
   17d2c:	movw	r0, #49496	; 0xc158
   17d30:	movw	r1, #49492	; 0xc154
   17d34:	cmp	r7, #9
   17d38:	movt	r0, #1
   17d3c:	movt	r1, #1
   17d40:	moveq	r0, r1
   17d44:	str	r0, [sp, #68]	; 0x44
   17d48:	movw	r4, #49496	; 0xc158
   17d4c:	mov	r0, #0
   17d50:	mov	r2, #5
   17d54:	movt	r4, #1
   17d58:	mov	r1, r4
   17d5c:	bl	11278 <dcgettext@plt>
   17d60:	cmp	r0, r4
   17d64:	str	r0, [sp, #72]	; 0x48
   17d68:	beq	17d78 <__assert_fail@plt+0x6890>
   17d6c:	mov	r4, r9
   17d70:	mov	r2, r8
   17d74:	b	17e30 <__assert_fail@plt+0x6948>
   17d78:	bl	1ab6c <__assert_fail@plt+0x9684>
   17d7c:	ldrb	r1, [r0]
   17d80:	mov	r4, r9
   17d84:	and	r1, r1, #223	; 0xdf
   17d88:	cmp	r1, #71	; 0x47
   17d8c:	beq	17de8 <__assert_fail@plt+0x6900>
   17d90:	cmp	r1, #85	; 0x55
   17d94:	mov	r2, r8
   17d98:	bne	17e10 <__assert_fail@plt+0x6928>
   17d9c:	ldrb	r1, [r0, #1]
   17da0:	and	r1, r1, #223	; 0xdf
   17da4:	cmp	r1, #84	; 0x54
   17da8:	bne	17e10 <__assert_fail@plt+0x6928>
   17dac:	ldrb	r1, [r0, #2]
   17db0:	and	r1, r1, #223	; 0xdf
   17db4:	cmp	r1, #70	; 0x46
   17db8:	ldrbeq	r1, [r0, #3]
   17dbc:	cmpeq	r1, #45	; 0x2d
   17dc0:	bne	17e10 <__assert_fail@plt+0x6928>
   17dc4:	ldrb	r1, [r0, #4]
   17dc8:	cmp	r1, #56	; 0x38
   17dcc:	ldrbeq	r0, [r0, #5]
   17dd0:	cmpeq	r0, #0
   17dd4:	bne	17e10 <__assert_fail@plt+0x6928>
   17dd8:	movw	r0, #49502	; 0xc15e
   17ddc:	movt	r0, #1
   17de0:	str	r0, [sp, #72]	; 0x48
   17de4:	b	17e30 <__assert_fail@plt+0x6948>
   17de8:	ldrb	r1, [r0, #1]
   17dec:	mov	r2, r8
   17df0:	and	r1, r1, #223	; 0xdf
   17df4:	cmp	r1, #66	; 0x42
   17df8:	bne	17e10 <__assert_fail@plt+0x6928>
   17dfc:	ldrb	r1, [r0, #2]
   17e00:	cmp	r1, #49	; 0x31
   17e04:	ldrbeq	r1, [r0, #3]
   17e08:	cmpeq	r1, #56	; 0x38
   17e0c:	beq	18c8c <__assert_fail@plt+0x77a4>
   17e10:	movw	r0, #49496	; 0xc158
   17e14:	cmp	r7, #9
   17e18:	movt	r0, #1
   17e1c:	mov	r1, r0
   17e20:	movw	r0, #49492	; 0xc154
   17e24:	movt	r0, #1
   17e28:	moveq	r1, r0
   17e2c:	str	r1, [sp, #72]	; 0x48
   17e30:	mov	r8, r5
   17e34:	mov	r9, #0
   17e38:	tst	r8, #1
   17e3c:	mov	r5, r8
   17e40:	str	r2, [fp, #-48]	; 0xffffffd0
   17e44:	bne	17e7c <__assert_fail@plt+0x6994>
   17e48:	ldr	r0, [sp, #68]	; 0x44
   17e4c:	ldrb	r0, [r0]
   17e50:	cmp	r0, #0
   17e54:	beq	17e7c <__assert_fail@plt+0x6994>
   17e58:	ldr	r1, [sp, #68]	; 0x44
   17e5c:	mov	r9, #0
   17e60:	add	r1, r1, #1
   17e64:	cmp	r9, sl
   17e68:	strbcc	r0, [r6, r9]
   17e6c:	ldrb	r0, [r1, r9]
   17e70:	add	r9, r9, #1
   17e74:	cmp	r0, #0
   17e78:	bne	17e64 <__assert_fail@plt+0x697c>
   17e7c:	ldr	r8, [sp, #72]	; 0x48
   17e80:	mov	r0, r8
   17e84:	bl	11374 <strlen@plt>
   17e88:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e8c:	ldr	lr, [sp, #84]	; 0x54
   17e90:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17e94:	str	r0, [fp, #-76]	; 0xffffffb4
   17e98:	str	r8, [sp, #92]	; 0x5c
   17e9c:	mov	r3, #1
   17ea0:	ldr	r0, [fp, #16]
   17ea4:	str	r7, [fp, #-64]	; 0xffffffc0
   17ea8:	str	r5, [fp, #-72]	; 0xffffffb8
   17eac:	str	r3, [sp, #80]	; 0x50
   17eb0:	cmp	r0, #0
   17eb4:	movwne	r0, #1
   17eb8:	and	r0, r0, r5
   17ebc:	str	r0, [fp, #-88]	; 0xffffffa8
   17ec0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17ec4:	cmp	r0, #0
   17ec8:	movwne	r0, #1
   17ecc:	subs	r7, r7, #2
   17ed0:	and	r1, r0, r5
   17ed4:	str	r7, [fp, #-80]	; 0xffffffb0
   17ed8:	and	r1, r3, r1
   17edc:	str	r1, [sp, #40]	; 0x28
   17ee0:	clz	r1, r7
   17ee4:	lsr	r1, r1, #5
   17ee8:	and	r1, r1, r5
   17eec:	eor	r5, r5, #1
   17ef0:	str	r1, [sp, #36]	; 0x24
   17ef4:	mov	r1, r7
   17ef8:	str	r5, [sp, #88]	; 0x58
   17efc:	mov	r7, #0
   17f00:	movwne	r1, #1
   17f04:	orr	r5, r1, r5
   17f08:	and	r1, r1, r3
   17f0c:	and	r0, r0, r1
   17f10:	str	r5, [sp, #60]	; 0x3c
   17f14:	str	r1, [fp, #-68]	; 0xffffffbc
   17f18:	str	r0, [fp, #-60]	; 0xffffffc4
   17f1c:	eor	r0, r3, #1
   17f20:	str	r0, [sp, #44]	; 0x2c
   17f24:	cmn	lr, #1
   17f28:	beq	17f38 <__assert_fail@plt+0x6a50>
   17f2c:	cmp	r7, lr
   17f30:	bne	17f44 <__assert_fail@plt+0x6a5c>
   17f34:	b	18bbc <__assert_fail@plt+0x76d4>
   17f38:	ldrb	r0, [ip, r7]
   17f3c:	cmp	r0, #0
   17f40:	beq	18bc4 <__assert_fail@plt+0x76dc>
   17f44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17f48:	mov	r8, #0
   17f4c:	str	r4, [fp, #-52]	; 0xffffffcc
   17f50:	str	r2, [fp, #-48]	; 0xffffffd0
   17f54:	cmp	r0, #0
   17f58:	beq	17f8c <__assert_fail@plt+0x6aa4>
   17f5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17f60:	add	r4, r7, r0
   17f64:	cmp	r0, #2
   17f68:	bcc	17f84 <__assert_fail@plt+0x6a9c>
   17f6c:	cmn	lr, #1
   17f70:	bne	17f84 <__assert_fail@plt+0x6a9c>
   17f74:	mov	r0, ip
   17f78:	bl	11374 <strlen@plt>
   17f7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f80:	mov	lr, r0
   17f84:	cmp	r4, lr
   17f88:	bls	17fa4 <__assert_fail@plt+0x6abc>
   17f8c:	mov	r0, #0
   17f90:	str	r0, [fp, #-56]	; 0xffffffc8
   17f94:	ldrb	r5, [ip, r7]
   17f98:	cmp	r5, #126	; 0x7e
   17f9c:	bls	17ff4 <__assert_fail@plt+0x6b0c>
   17fa0:	b	183fc <__assert_fail@plt+0x6f14>
   17fa4:	ldr	r1, [sp, #92]	; 0x5c
   17fa8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17fac:	add	r0, ip, r7
   17fb0:	mov	r4, lr
   17fb4:	bl	1126c <memcmp@plt>
   17fb8:	ldr	r2, [sp, #88]	; 0x58
   17fbc:	cmp	r0, #0
   17fc0:	mov	r1, r0
   17fc4:	movwne	r1, #1
   17fc8:	orr	r1, r1, r2
   17fcc:	tst	r1, #1
   17fd0:	beq	18cd0 <__assert_fail@plt+0x77e8>
   17fd4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17fd8:	clz	r0, r0
   17fdc:	mov	lr, r4
   17fe0:	lsr	r0, r0, #5
   17fe4:	str	r0, [fp, #-56]	; 0xffffffc8
   17fe8:	ldrb	r5, [ip, r7]
   17fec:	cmp	r5, #126	; 0x7e
   17ff0:	bhi	183fc <__assert_fail@plt+0x6f14>
   17ff4:	add	r3, pc, #16
   17ff8:	mov	r4, #1
   17ffc:	mov	r2, #110	; 0x6e
   18000:	mov	r0, #97	; 0x61
   18004:	mov	r1, #0
   18008:	ldr	pc, [r3, r5, lsl #2]
   1800c:	ldrdeq	r8, [r1], -ip
   18010:	strdeq	r8, [r1], -ip
   18014:	strdeq	r8, [r1], -ip
   18018:	strdeq	r8, [r1], -ip
   1801c:	strdeq	r8, [r1], -ip
   18020:	strdeq	r8, [r1], -ip
   18024:	strdeq	r8, [r1], -ip
   18028:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1802c:			; <UNDEFINED> instruction: 0x000182bc
   18030:	andeq	r8, r1, r4, lsr #5
   18034:	andeq	r8, r1, r8, asr #5
   18038:	andeq	r8, r1, r8, asr r3
   1803c:	muleq	r1, ip, r2
   18040:	andeq	r8, r1, r4, asr #5
   18044:	strdeq	r8, [r1], -ip
   18048:	strdeq	r8, [r1], -ip
   1804c:	strdeq	r8, [r1], -ip
   18050:	strdeq	r8, [r1], -ip
   18054:	strdeq	r8, [r1], -ip
   18058:	strdeq	r8, [r1], -ip
   1805c:	strdeq	r8, [r1], -ip
   18060:	strdeq	r8, [r1], -ip
   18064:	strdeq	r8, [r1], -ip
   18068:	strdeq	r8, [r1], -ip
   1806c:	strdeq	r8, [r1], -ip
   18070:	strdeq	r8, [r1], -ip
   18074:	strdeq	r8, [r1], -ip
   18078:	strdeq	r8, [r1], -ip
   1807c:	strdeq	r8, [r1], -ip
   18080:	strdeq	r8, [r1], -ip
   18084:	strdeq	r8, [r1], -ip
   18088:	strdeq	r8, [r1], -ip
   1808c:	andeq	r8, r1, r4, asr r4
   18090:	andeq	r8, r1, r8, asr r4
   18094:	andeq	r8, r1, r8, asr r4
   18098:	andeq	r8, r1, r8, lsr #4
   1809c:	andeq	r8, r1, r8, asr r4
   180a0:	andeq	r8, r1, r8, lsl #4
   180a4:	andeq	r8, r1, r8, asr r4
   180a8:	andeq	r8, r1, r0, ror #6
   180ac:	andeq	r8, r1, r8, asr r4
   180b0:	andeq	r8, r1, r8, asr r4
   180b4:	andeq	r8, r1, r8, asr r4
   180b8:	andeq	r8, r1, r8, lsl #4
   180bc:	andeq	r8, r1, r8, lsl #4
   180c0:	andeq	r8, r1, r8, lsl #4
   180c4:	andeq	r8, r1, r8, lsl #4
   180c8:	andeq	r8, r1, r8, lsl #4
   180cc:	andeq	r8, r1, r8, lsl #4
   180d0:	andeq	r8, r1, r8, lsl #4
   180d4:	andeq	r8, r1, r8, lsl #4
   180d8:	andeq	r8, r1, r8, lsl #4
   180dc:	andeq	r8, r1, r8, lsl #4
   180e0:	andeq	r8, r1, r8, lsl #4
   180e4:	andeq	r8, r1, r8, lsl #4
   180e8:	andeq	r8, r1, r8, lsl #4
   180ec:	andeq	r8, r1, r8, lsl #4
   180f0:	andeq	r8, r1, r8, lsl #4
   180f4:	andeq	r8, r1, r8, lsl #4
   180f8:	andeq	r8, r1, r8, asr r4
   180fc:	andeq	r8, r1, r8, asr r4
   18100:	andeq	r8, r1, r8, asr r4
   18104:	andeq	r8, r1, r8, asr r4
   18108:	andeq	r8, r1, ip, lsl r3
   1810c:	strdeq	r8, [r1], -ip
   18110:	andeq	r8, r1, r8, lsl #4
   18114:	andeq	r8, r1, r8, lsl #4
   18118:	andeq	r8, r1, r8, lsl #4
   1811c:	andeq	r8, r1, r8, lsl #4
   18120:	andeq	r8, r1, r8, lsl #4
   18124:	andeq	r8, r1, r8, lsl #4
   18128:	andeq	r8, r1, r8, lsl #4
   1812c:	andeq	r8, r1, r8, lsl #4
   18130:	andeq	r8, r1, r8, lsl #4
   18134:	andeq	r8, r1, r8, lsl #4
   18138:	andeq	r8, r1, r8, lsl #4
   1813c:	andeq	r8, r1, r8, lsl #4
   18140:	andeq	r8, r1, r8, lsl #4
   18144:	andeq	r8, r1, r8, lsl #4
   18148:	andeq	r8, r1, r8, lsl #4
   1814c:	andeq	r8, r1, r8, lsl #4
   18150:	andeq	r8, r1, r8, lsl #4
   18154:	andeq	r8, r1, r8, lsl #4
   18158:	andeq	r8, r1, r8, lsl #4
   1815c:	andeq	r8, r1, r8, lsl #4
   18160:	andeq	r8, r1, r8, lsl #4
   18164:	andeq	r8, r1, r8, lsl #4
   18168:	andeq	r8, r1, r8, lsl #4
   1816c:	andeq	r8, r1, r8, lsl #4
   18170:	andeq	r8, r1, r8, lsl #4
   18174:	andeq	r8, r1, r8, lsl #4
   18178:	andeq	r8, r1, r8, asr r4
   1817c:	andeq	r8, r1, r8, ror #4
   18180:	andeq	r8, r1, r8, lsl #4
   18184:	andeq	r8, r1, r8, asr r4
   18188:	andeq	r8, r1, r8, lsl #4
   1818c:	andeq	r8, r1, r8, asr r4
   18190:	andeq	r8, r1, r8, lsl #4
   18194:	andeq	r8, r1, r8, lsl #4
   18198:	andeq	r8, r1, r8, lsl #4
   1819c:	andeq	r8, r1, r8, lsl #4
   181a0:	andeq	r8, r1, r8, lsl #4
   181a4:	andeq	r8, r1, r8, lsl #4
   181a8:	andeq	r8, r1, r8, lsl #4
   181ac:	andeq	r8, r1, r8, lsl #4
   181b0:	andeq	r8, r1, r8, lsl #4
   181b4:	andeq	r8, r1, r8, lsl #4
   181b8:	andeq	r8, r1, r8, lsl #4
   181bc:	andeq	r8, r1, r8, lsl #4
   181c0:	andeq	r8, r1, r8, lsl #4
   181c4:	andeq	r8, r1, r8, lsl #4
   181c8:	andeq	r8, r1, r8, lsl #4
   181cc:	andeq	r8, r1, r8, lsl #4
   181d0:	andeq	r8, r1, r8, lsl #4
   181d4:	andeq	r8, r1, r8, lsl #4
   181d8:	andeq	r8, r1, r8, lsl #4
   181dc:	andeq	r8, r1, r8, lsl #4
   181e0:	andeq	r8, r1, r8, lsl #4
   181e4:	andeq	r8, r1, r8, lsl #4
   181e8:	andeq	r8, r1, r8, lsl #4
   181ec:	andeq	r8, r1, r8, lsl #4
   181f0:	andeq	r8, r1, r8, lsl #4
   181f4:	andeq	r8, r1, r8, lsl #4
   181f8:	andeq	r8, r1, r8, asr #4
   181fc:	andeq	r8, r1, r8, asr r4
   18200:	andeq	r8, r1, r8, asr #4
   18204:	andeq	r8, r1, r8, lsr #4
   18208:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1820c:	cmp	r0, #0
   18210:	beq	184ec <__assert_fail@plt+0x7004>
   18214:	ldr	r0, [fp, #16]
   18218:	cmp	r0, #0
   1821c:	mov	r0, r5
   18220:	bne	184fc <__assert_fail@plt+0x7014>
   18224:	b	1851c <__assert_fail@plt+0x7034>
   18228:	mov	r4, #0
   1822c:	cmp	r7, #0
   18230:	beq	18454 <__assert_fail@plt+0x6f6c>
   18234:	mov	r8, #0
   18238:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1823c:	cmp	r0, #0
   18240:	bne	18214 <__assert_fail@plt+0x6d2c>
   18244:	b	184ec <__assert_fail@plt+0x7004>
   18248:	mov	r4, #0
   1824c:	cmn	lr, #1
   18250:	beq	1842c <__assert_fail@plt+0x6f44>
   18254:	cmp	r7, #0
   18258:	bne	18234 <__assert_fail@plt+0x6d4c>
   1825c:	cmp	lr, #1
   18260:	beq	18454 <__assert_fail@plt+0x6f6c>
   18264:	b	18234 <__assert_fail@plt+0x6d4c>
   18268:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1826c:	cmp	r0, #2
   18270:	bne	18484 <__assert_fail@plt+0x6f9c>
   18274:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18278:	tst	r0, #1
   1827c:	bne	18ce4 <__assert_fail@plt+0x77fc>
   18280:	mov	r8, #0
   18284:	mov	r0, #92	; 0x5c
   18288:	mov	r4, #0
   1828c:	cmp	r8, #0
   18290:	beq	184a4 <__assert_fail@plt+0x6fbc>
   18294:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18298:	b	18598 <__assert_fail@plt+0x70b0>
   1829c:	mov	r0, #102	; 0x66
   182a0:	b	184d8 <__assert_fail@plt+0x6ff0>
   182a4:	mov	r2, #116	; 0x74
   182a8:	ldr	r0, [sp, #60]	; 0x3c
   182ac:	tst	r0, #1
   182b0:	mov	r0, r2
   182b4:	bne	184d8 <__assert_fail@plt+0x6ff0>
   182b8:	b	18ce4 <__assert_fail@plt+0x77fc>
   182bc:	mov	r0, #98	; 0x62
   182c0:	b	184d8 <__assert_fail@plt+0x6ff0>
   182c4:	mov	r2, #114	; 0x72
   182c8:	ldr	r0, [sp, #60]	; 0x3c
   182cc:	tst	r0, #1
   182d0:	mov	r0, r2
   182d4:	bne	184d8 <__assert_fail@plt+0x6ff0>
   182d8:	b	18ce4 <__assert_fail@plt+0x77fc>
   182dc:	ldr	r0, [sp, #80]	; 0x50
   182e0:	tst	r0, #1
   182e4:	beq	185c0 <__assert_fail@plt+0x70d8>
   182e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   182ec:	tst	r0, #1
   182f0:	bne	18e0c <__assert_fail@plt+0x7924>
   182f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   182fc:	cmp	r0, #2
   18300:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18304:	movwne	r0, #1
   18308:	orr	r0, r0, r2
   1830c:	tst	r0, #1
   18310:	beq	188b8 <__assert_fail@plt+0x73d0>
   18314:	mov	r0, r9
   18318:	b	188ec <__assert_fail@plt+0x7404>
   1831c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18320:	mov	r8, #0
   18324:	mov	r5, #63	; 0x3f
   18328:	cmp	r0, #5
   1832c:	beq	18774 <__assert_fail@plt+0x728c>
   18330:	cmp	r0, #2
   18334:	bne	18824 <__assert_fail@plt+0x733c>
   18338:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1833c:	tst	r0, #1
   18340:	bne	18ce4 <__assert_fail@plt+0x77fc>
   18344:	mov	r4, #0
   18348:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1834c:	cmp	r0, #0
   18350:	bne	18214 <__assert_fail@plt+0x6d2c>
   18354:	b	184ec <__assert_fail@plt+0x7004>
   18358:	mov	r0, #118	; 0x76
   1835c:	b	184d8 <__assert_fail@plt+0x6ff0>
   18360:	mov	r0, #1
   18364:	mov	r5, #39	; 0x27
   18368:	str	r0, [sp, #52]	; 0x34
   1836c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18370:	cmp	r0, #2
   18374:	bne	183e8 <__assert_fail@plt+0x6f00>
   18378:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1837c:	tst	r0, #1
   18380:	bne	18ce4 <__assert_fail@plt+0x77fc>
   18384:	ldr	r2, [sp, #48]	; 0x30
   18388:	clz	r1, sl
   1838c:	mov	r8, #0
   18390:	lsr	r1, r1, #5
   18394:	cmp	r2, #0
   18398:	mov	r0, r2
   1839c:	movwne	r0, #1
   183a0:	orrs	r0, r0, r1
   183a4:	moveq	r2, sl
   183a8:	moveq	sl, r0
   183ac:	cmp	r9, sl
   183b0:	str	r2, [sp, #48]	; 0x30
   183b4:	movcc	r0, #39	; 0x27
   183b8:	strbcc	r0, [r6, r9]
   183bc:	add	r0, r9, #1
   183c0:	cmp	r0, sl
   183c4:	movcc	r1, #92	; 0x5c
   183c8:	strbcc	r1, [r6, r0]
   183cc:	add	r0, r9, #2
   183d0:	add	r9, r9, #3
   183d4:	cmp	r0, sl
   183d8:	movcc	r1, #39	; 0x27
   183dc:	strbcc	r1, [r6, r0]
   183e0:	mov	r0, #0
   183e4:	str	r0, [fp, #-48]	; 0xffffffd0
   183e8:	mov	r4, #1
   183ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   183f0:	cmp	r0, #0
   183f4:	bne	18214 <__assert_fail@plt+0x6d2c>
   183f8:	b	184ec <__assert_fail@plt+0x7004>
   183fc:	ldr	r0, [sp, #32]
   18400:	cmp	r0, #1
   18404:	bne	185f0 <__assert_fail@plt+0x7108>
   18408:	str	lr, [sp, #84]	; 0x54
   1840c:	bl	1135c <__ctype_b_loc@plt>
   18410:	ldr	r0, [r0]
   18414:	ldr	ip, [fp, #-84]	; 0xffffffac
   18418:	mov	r1, #1
   1841c:	add	r0, r0, r5, lsl #1
   18420:	ldrb	r0, [r0, #1]
   18424:	ubfx	r4, r0, #6, #1
   18428:	b	189e8 <__assert_fail@plt+0x7500>
   1842c:	cmp	r7, #0
   18430:	ldrbeq	r0, [ip, #1]
   18434:	cmpeq	r0, #0
   18438:	beq	18454 <__assert_fail@plt+0x6f6c>
   1843c:	mvn	lr, #0
   18440:	mov	r8, #0
   18444:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18448:	cmp	r0, #0
   1844c:	bne	18214 <__assert_fail@plt+0x6d2c>
   18450:	b	184ec <__assert_fail@plt+0x7004>
   18454:	mov	r1, #1
   18458:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1845c:	cmp	r0, #2
   18460:	bne	18470 <__assert_fail@plt+0x6f88>
   18464:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18468:	tst	r0, #1
   1846c:	bne	18ce4 <__assert_fail@plt+0x77fc>
   18470:	mov	r4, r1
   18474:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18478:	cmp	r0, #0
   1847c:	bne	18214 <__assert_fail@plt+0x6d2c>
   18480:	b	184ec <__assert_fail@plt+0x7004>
   18484:	ldr	r1, [sp, #40]	; 0x28
   18488:	mov	r8, #0
   1848c:	mov	r0, #92	; 0x5c
   18490:	cmp	r1, #0
   18494:	beq	184d8 <__assert_fail@plt+0x6ff0>
   18498:	mov	r4, #0
   1849c:	cmp	r8, #0
   184a0:	bne	18294 <__assert_fail@plt+0x6dac>
   184a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   184a8:	tst	r2, #1
   184ac:	beq	18598 <__assert_fail@plt+0x70b0>
   184b0:	cmp	r9, sl
   184b4:	movcc	r1, #39	; 0x27
   184b8:	strbcc	r1, [r6, r9]
   184bc:	add	r1, r9, #1
   184c0:	add	r9, r9, #2
   184c4:	cmp	r1, sl
   184c8:	movcc	r2, #39	; 0x27
   184cc:	strbcc	r2, [r6, r1]
   184d0:	mov	r2, #0
   184d4:	b	18598 <__assert_fail@plt+0x70b0>
   184d8:	ldr	r1, [sp, #80]	; 0x50
   184dc:	mov	r4, #0
   184e0:	mov	r8, #0
   184e4:	tst	r1, #1
   184e8:	bne	18528 <__assert_fail@plt+0x7040>
   184ec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   184f0:	cmp	r0, #0
   184f4:	mov	r0, r5
   184f8:	beq	1851c <__assert_fail@plt+0x7034>
   184fc:	ldr	r1, [fp, #16]
   18500:	ubfx	r0, r5, #5, #3
   18504:	mov	r2, #1
   18508:	ldr	r0, [r1, r0, lsl #2]
   1850c:	and	r1, r5, #31
   18510:	tst	r0, r2, lsl r1
   18514:	mov	r0, r5
   18518:	bne	18528 <__assert_fail@plt+0x7040>
   1851c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18520:	cmp	r1, #0
   18524:	beq	18980 <__assert_fail@plt+0x7498>
   18528:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1852c:	tst	r1, #1
   18530:	bne	18cc4 <__assert_fail@plt+0x77dc>
   18534:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18538:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1853c:	cmp	r1, #2
   18540:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18544:	movwne	r1, #1
   18548:	orr	r1, r1, r2
   1854c:	tst	r1, #1
   18550:	bne	18588 <__assert_fail@plt+0x70a0>
   18554:	cmp	r9, sl
   18558:	movcc	r1, #39	; 0x27
   1855c:	strbcc	r1, [r6, r9]
   18560:	add	r1, r9, #1
   18564:	cmp	r1, sl
   18568:	movcc	r2, #36	; 0x24
   1856c:	strbcc	r2, [r6, r1]
   18570:	add	r1, r9, #2
   18574:	add	r9, r9, #3
   18578:	cmp	r1, sl
   1857c:	movcc	r2, #39	; 0x27
   18580:	strbcc	r2, [r6, r1]
   18584:	mov	r2, #1
   18588:	cmp	r9, sl
   1858c:	movcc	r1, #92	; 0x5c
   18590:	strbcc	r1, [r6, r9]
   18594:	add	r9, r9, #1
   18598:	cmp	r9, sl
   1859c:	add	r7, r7, #1
   185a0:	strbcc	r0, [r6, r9]
   185a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   185a8:	add	r9, r9, #1
   185ac:	and	r0, r0, r4
   185b0:	mov	r4, r0
   185b4:	cmn	lr, #1
   185b8:	bne	17f2c <__assert_fail@plt+0x6a44>
   185bc:	b	17f38 <__assert_fail@plt+0x6a50>
   185c0:	ldr	r0, [sp, #28]
   185c4:	mov	r4, #0
   185c8:	mov	r8, #0
   185cc:	mov	r5, #0
   185d0:	cmp	r0, #0
   185d4:	beq	184ec <__assert_fail@plt+0x7004>
   185d8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   185dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   185e0:	add	r7, r7, #1
   185e4:	cmn	lr, #1
   185e8:	bne	17f2c <__assert_fail@plt+0x6a44>
   185ec:	b	17f38 <__assert_fail@plt+0x6a50>
   185f0:	mov	r0, #0
   185f4:	cmn	lr, #1
   185f8:	str	r0, [fp, #-36]	; 0xffffffdc
   185fc:	str	r0, [fp, #-40]	; 0xffffffd8
   18600:	bne	18614 <__assert_fail@plt+0x712c>
   18604:	mov	r0, ip
   18608:	bl	11374 <strlen@plt>
   1860c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18610:	mov	lr, r0
   18614:	ldr	r0, [sp, #36]	; 0x24
   18618:	str	sl, [sp, #56]	; 0x38
   1861c:	str	lr, [sp, #84]	; 0x54
   18620:	cmp	r0, #0
   18624:	beq	1883c <__assert_fail@plt+0x7354>
   18628:	add	r0, ip, r7
   1862c:	mov	r4, #1
   18630:	mov	r6, #0
   18634:	sub	sl, fp, #40	; 0x28
   18638:	str	r0, [sp, #20]
   1863c:	str	r6, [sp, #64]	; 0x40
   18640:	add	r6, r6, r7
   18644:	sub	r0, fp, #44	; 0x2c
   18648:	mov	r3, sl
   1864c:	add	r1, ip, r6
   18650:	sub	r2, lr, r6
   18654:	bl	1aba4 <__assert_fail@plt+0x96bc>
   18658:	cmn	r0, #2
   1865c:	beq	18998 <__assert_fail@plt+0x74b0>
   18660:	ldr	sl, [sp, #56]	; 0x38
   18664:	cmn	r0, #1
   18668:	beq	1898c <__assert_fail@plt+0x74a4>
   1866c:	cmp	r0, #0
   18670:	beq	18990 <__assert_fail@plt+0x74a8>
   18674:	cmp	r0, #2
   18678:	bcc	18738 <__assert_fail@plt+0x7250>
   1867c:	ldr	r1, [sp, #64]	; 0x40
   18680:	ldr	r2, [sp, #20]
   18684:	add	r1, r2, r1
   18688:	mov	r2, #1
   1868c:	ldrb	r3, [r1, r2]
   18690:	sub	r3, r3, #91	; 0x5b
   18694:	cmp	r3, #33	; 0x21
   18698:	bhi	1872c <__assert_fail@plt+0x7244>
   1869c:	add	r6, pc, #0
   186a0:	ldr	pc, [r6, r3, lsl #2]
   186a4:	strdeq	r8, [r1], -r0
   186a8:	strdeq	r8, [r1], -r0
   186ac:	andeq	r8, r1, ip, lsr #14
   186b0:	strdeq	r8, [r1], -r0
   186b4:	andeq	r8, r1, ip, lsr #14
   186b8:	strdeq	r8, [r1], -r0
   186bc:	andeq	r8, r1, ip, lsr #14
   186c0:	andeq	r8, r1, ip, lsr #14
   186c4:	andeq	r8, r1, ip, lsr #14
   186c8:	andeq	r8, r1, ip, lsr #14
   186cc:	andeq	r8, r1, ip, lsr #14
   186d0:	andeq	r8, r1, ip, lsr #14
   186d4:	andeq	r8, r1, ip, lsr #14
   186d8:	andeq	r8, r1, ip, lsr #14
   186dc:	andeq	r8, r1, ip, lsr #14
   186e0:	andeq	r8, r1, ip, lsr #14
   186e4:	andeq	r8, r1, ip, lsr #14
   186e8:	andeq	r8, r1, ip, lsr #14
   186ec:	andeq	r8, r1, ip, lsr #14
   186f0:	andeq	r8, r1, ip, lsr #14
   186f4:	andeq	r8, r1, ip, lsr #14
   186f8:	andeq	r8, r1, ip, lsr #14
   186fc:	andeq	r8, r1, ip, lsr #14
   18700:	andeq	r8, r1, ip, lsr #14
   18704:	andeq	r8, r1, ip, lsr #14
   18708:	andeq	r8, r1, ip, lsr #14
   1870c:	andeq	r8, r1, ip, lsr #14
   18710:	andeq	r8, r1, ip, lsr #14
   18714:	andeq	r8, r1, ip, lsr #14
   18718:	andeq	r8, r1, ip, lsr #14
   1871c:	andeq	r8, r1, ip, lsr #14
   18720:	andeq	r8, r1, ip, lsr #14
   18724:	andeq	r8, r1, ip, lsr #14
   18728:	strdeq	r8, [r1], -r0
   1872c:	add	r2, r2, #1
   18730:	cmp	r2, r0
   18734:	bcc	1868c <__assert_fail@plt+0x71a4>
   18738:	ldr	r6, [sp, #64]	; 0x40
   1873c:	add	r6, r0, r6
   18740:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18744:	bl	112b4 <iswprint@plt>
   18748:	cmp	r0, #0
   1874c:	sub	sl, fp, #40	; 0x28
   18750:	movwne	r0, #1
   18754:	and	r4, r4, r0
   18758:	mov	r0, sl
   1875c:	bl	11260 <mbsinit@plt>
   18760:	ldr	ip, [fp, #-84]	; 0xffffffac
   18764:	ldr	lr, [sp, #84]	; 0x54
   18768:	cmp	r0, #0
   1876c:	beq	1863c <__assert_fail@plt+0x7154>
   18770:	b	189dc <__assert_fail@plt+0x74f4>
   18774:	ldr	r0, [sp, #24]
   18778:	cmp	r0, #0
   1877c:	beq	18824 <__assert_fail@plt+0x733c>
   18780:	add	r0, r7, #2
   18784:	cmp	r0, lr
   18788:	bcs	18824 <__assert_fail@plt+0x733c>
   1878c:	add	r1, ip, r7
   18790:	ldrb	r1, [r1, #1]
   18794:	cmp	r1, #63	; 0x3f
   18798:	bne	18824 <__assert_fail@plt+0x733c>
   1879c:	ldrb	r5, [ip, r0]
   187a0:	sub	r1, r5, #33	; 0x21
   187a4:	cmp	r1, #29
   187a8:	bhi	18824 <__assert_fail@plt+0x733c>
   187ac:	movw	r3, #20929	; 0x51c1
   187b0:	mov	r2, #1
   187b4:	movt	r3, #14336	; 0x3800
   187b8:	tst	r3, r2, lsl r1
   187bc:	beq	18824 <__assert_fail@plt+0x733c>
   187c0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   187c4:	tst	r1, #1
   187c8:	bne	18e14 <__assert_fail@plt+0x792c>
   187cc:	cmp	r9, sl
   187d0:	mov	r7, r0
   187d4:	mov	r4, #0
   187d8:	movcc	r1, #63	; 0x3f
   187dc:	strbcc	r1, [r6, r9]
   187e0:	add	r1, r9, #1
   187e4:	cmp	r1, sl
   187e8:	movcc	r2, #34	; 0x22
   187ec:	strbcc	r2, [r6, r1]
   187f0:	add	r1, r9, #2
   187f4:	cmp	r1, sl
   187f8:	movcc	r2, #34	; 0x22
   187fc:	strbcc	r2, [r6, r1]
   18800:	add	r1, r9, #3
   18804:	add	r9, r9, #4
   18808:	cmp	r1, sl
   1880c:	movcc	r2, #63	; 0x3f
   18810:	strbcc	r2, [r6, r1]
   18814:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18818:	cmp	r0, #0
   1881c:	bne	18214 <__assert_fail@plt+0x6d2c>
   18820:	b	184ec <__assert_fail@plt+0x7004>
   18824:	mov	r5, #63	; 0x3f
   18828:	mov	r4, #0
   1882c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18830:	cmp	r0, #0
   18834:	bne	18214 <__assert_fail@plt+0x6d2c>
   18838:	b	184ec <__assert_fail@plt+0x7004>
   1883c:	mov	r4, #1
   18840:	mov	r6, #0
   18844:	sub	sl, fp, #40	; 0x28
   18848:	str	r6, [sp, #64]	; 0x40
   1884c:	add	r6, r6, r7
   18850:	sub	r0, fp, #44	; 0x2c
   18854:	mov	r3, sl
   18858:	add	r1, ip, r6
   1885c:	sub	r2, lr, r6
   18860:	bl	1aba4 <__assert_fail@plt+0x96bc>
   18864:	cmn	r0, #2
   18868:	beq	18998 <__assert_fail@plt+0x74b0>
   1886c:	cmn	r0, #1
   18870:	beq	1898c <__assert_fail@plt+0x74a4>
   18874:	ldr	r6, [sp, #64]	; 0x40
   18878:	cmp	r0, #0
   1887c:	beq	189d8 <__assert_fail@plt+0x74f0>
   18880:	add	r6, r0, r6
   18884:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18888:	bl	112b4 <iswprint@plt>
   1888c:	cmp	r0, #0
   18890:	sub	sl, fp, #40	; 0x28
   18894:	movwne	r0, #1
   18898:	and	r4, r4, r0
   1889c:	mov	r0, sl
   188a0:	bl	11260 <mbsinit@plt>
   188a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   188a8:	ldr	lr, [sp, #84]	; 0x54
   188ac:	cmp	r0, #0
   188b0:	beq	18848 <__assert_fail@plt+0x7360>
   188b4:	b	189dc <__assert_fail@plt+0x74f4>
   188b8:	cmp	r9, sl
   188bc:	mov	r2, #1
   188c0:	movcc	r0, #39	; 0x27
   188c4:	strbcc	r0, [r6, r9]
   188c8:	add	r0, r9, #1
   188cc:	cmp	r0, sl
   188d0:	movcc	r1, #36	; 0x24
   188d4:	strbcc	r1, [r6, r0]
   188d8:	add	r0, r9, #2
   188dc:	cmp	r0, sl
   188e0:	movcc	r1, #39	; 0x27
   188e4:	strbcc	r1, [r6, r0]
   188e8:	add	r0, r9, #3
   188ec:	cmp	r0, sl
   188f0:	add	r9, r0, #1
   188f4:	str	r2, [fp, #-48]	; 0xffffffd0
   188f8:	movcc	r1, #92	; 0x5c
   188fc:	strbcc	r1, [r6, r0]
   18900:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18904:	cmp	r1, #2
   18908:	beq	18968 <__assert_fail@plt+0x7480>
   1890c:	add	r1, r7, #1
   18910:	mov	r4, #0
   18914:	mov	r8, #1
   18918:	mov	r5, #48	; 0x30
   1891c:	cmp	r1, lr
   18920:	bcs	18208 <__assert_fail@plt+0x6d20>
   18924:	ldrb	r1, [ip, r1]
   18928:	sub	r1, r1, #48	; 0x30
   1892c:	uxtb	r1, r1
   18930:	cmp	r1, #9
   18934:	bhi	18208 <__assert_fail@plt+0x6d20>
   18938:	cmp	r9, sl
   1893c:	movcc	r1, #48	; 0x30
   18940:	strbcc	r1, [r6, r9]
   18944:	add	r1, r0, #2
   18948:	add	r9, r0, #3
   1894c:	cmp	r1, sl
   18950:	movcc	r2, #48	; 0x30
   18954:	strbcc	r2, [r6, r1]
   18958:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1895c:	cmp	r0, #0
   18960:	bne	18214 <__assert_fail@plt+0x6d2c>
   18964:	b	184ec <__assert_fail@plt+0x7004>
   18968:	mov	r0, #48	; 0x30
   1896c:	mov	r8, #1
   18970:	mov	r4, #0
   18974:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18978:	cmp	r1, #0
   1897c:	bne	18528 <__assert_fail@plt+0x7040>
   18980:	cmp	r8, #0
   18984:	beq	184a4 <__assert_fail@plt+0x6fbc>
   18988:	b	18294 <__assert_fail@plt+0x6dac>
   1898c:	mov	r4, #0
   18990:	ldr	ip, [fp, #-84]	; 0xffffffac
   18994:	b	189d0 <__assert_fail@plt+0x74e8>
   18998:	ldr	r1, [sp, #84]	; 0x54
   1899c:	ldr	ip, [fp, #-84]	; 0xffffffac
   189a0:	mov	r4, #0
   189a4:	cmp	r6, r1
   189a8:	bcs	189d0 <__assert_fail@plt+0x74e8>
   189ac:	ldrb	r0, [ip, r6]
   189b0:	cmp	r0, #0
   189b4:	beq	189d0 <__assert_fail@plt+0x74e8>
   189b8:	ldr	r0, [sp, #64]	; 0x40
   189bc:	add	r0, r0, #1
   189c0:	add	r6, r0, r7
   189c4:	str	r0, [sp, #64]	; 0x40
   189c8:	cmp	r6, r1
   189cc:	bcc	189ac <__assert_fail@plt+0x74c4>
   189d0:	ldr	r6, [sp, #64]	; 0x40
   189d4:	b	189dc <__assert_fail@plt+0x74f4>
   189d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   189dc:	mov	r1, r6
   189e0:	ldr	r6, [sp, #76]	; 0x4c
   189e4:	ldr	sl, [sp, #56]	; 0x38
   189e8:	ldr	r0, [sp, #44]	; 0x2c
   189ec:	cmp	r1, #1
   189f0:	orr	r2, r4, r0
   189f4:	mov	r0, r1
   189f8:	bhi	18a18 <__assert_fail@plt+0x7530>
   189fc:	tst	r2, #1
   18a00:	beq	18a18 <__assert_fail@plt+0x7530>
   18a04:	ldr	lr, [sp, #84]	; 0x54
   18a08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18a0c:	cmp	r0, #0
   18a10:	bne	18214 <__assert_fail@plt+0x6d2c>
   18a14:	b	184ec <__assert_fail@plt+0x7004>
   18a18:	str	r2, [sp, #64]	; 0x40
   18a1c:	add	r0, r0, r7
   18a20:	add	r1, r7, #1
   18a24:	ldr	lr, [sp, #84]	; 0x54
   18a28:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18a2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18a30:	mov	r3, #0
   18a34:	str	r0, [sp, #56]	; 0x38
   18a38:	ldr	r0, [sp, #64]	; 0x40
   18a3c:	tst	r0, #1
   18a40:	bne	18b28 <__assert_fail@plt+0x7640>
   18a44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18a48:	tst	r0, #1
   18a4c:	bne	18cc8 <__assert_fail@plt+0x77e0>
   18a50:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18a54:	cmp	r7, #2
   18a58:	movwne	r3, #1
   18a5c:	orr	r3, r3, r2
   18a60:	tst	r3, #1
   18a64:	bne	18a9c <__assert_fail@plt+0x75b4>
   18a68:	cmp	r9, sl
   18a6c:	add	r3, r9, #1
   18a70:	movcc	r2, #39	; 0x27
   18a74:	strbcc	r2, [r6, r9]
   18a78:	cmp	r3, sl
   18a7c:	movcc	r2, #36	; 0x24
   18a80:	strbcc	r2, [r6, r3]
   18a84:	add	r3, r9, #2
   18a88:	add	r9, r9, #3
   18a8c:	cmp	r3, sl
   18a90:	movcc	r2, #39	; 0x27
   18a94:	strbcc	r2, [r6, r3]
   18a98:	mov	r2, #1
   18a9c:	cmp	r9, sl
   18aa0:	mov	r0, r2
   18aa4:	movcc	r3, #92	; 0x5c
   18aa8:	strbcc	r3, [r6, r9]
   18aac:	add	r3, r9, #1
   18ab0:	cmp	r3, sl
   18ab4:	andcc	r7, r5, #192	; 0xc0
   18ab8:	movcc	r2, #48	; 0x30
   18abc:	orrcc	r7, r2, r7, lsr #6
   18ac0:	strbcc	r7, [r6, r3]
   18ac4:	add	r3, r9, #2
   18ac8:	add	r9, r9, #3
   18acc:	cmp	r3, sl
   18ad0:	lsrcc	r7, r5, #3
   18ad4:	movcc	r2, #6
   18ad8:	bficc	r7, r2, #3, #29
   18adc:	mov	r2, #6
   18ae0:	strbcc	r7, [r6, r3]
   18ae4:	bfi	r5, r2, #3, #29
   18ae8:	mov	r3, #1
   18aec:	mov	r2, r0
   18af0:	ldr	r0, [sp, #56]	; 0x38
   18af4:	and	r8, r3, #1
   18af8:	cmp	r0, r1
   18afc:	bhi	18b5c <__assert_fail@plt+0x7674>
   18b00:	b	18b9c <__assert_fail@plt+0x76b4>
   18b04:	cmp	r9, sl
   18b08:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18b0c:	strbcc	r5, [r6, r9]
   18b10:	add	r9, r9, #1
   18b14:	ldrb	r5, [ip, r1]
   18b18:	add	r1, r1, #1
   18b1c:	ldr	r0, [sp, #64]	; 0x40
   18b20:	tst	r0, #1
   18b24:	beq	18a44 <__assert_fail@plt+0x755c>
   18b28:	ldr	r7, [fp, #-56]	; 0xffffffc8
   18b2c:	tst	r7, #1
   18b30:	beq	18b44 <__assert_fail@plt+0x765c>
   18b34:	cmp	r9, sl
   18b38:	movcc	r7, #92	; 0x5c
   18b3c:	strbcc	r7, [r6, r9]
   18b40:	add	r9, r9, #1
   18b44:	mov	r7, #0
   18b48:	str	r7, [fp, #-56]	; 0xffffffc8
   18b4c:	ldr	r0, [sp, #56]	; 0x38
   18b50:	and	r8, r3, #1
   18b54:	cmp	r0, r1
   18b58:	bls	18b9c <__assert_fail@plt+0x76b4>
   18b5c:	cmp	r8, #0
   18b60:	mvn	r7, r2
   18b64:	movwne	r8, #1
   18b68:	orr	r7, r7, r8
   18b6c:	tst	r7, #1
   18b70:	bne	18b04 <__assert_fail@plt+0x761c>
   18b74:	cmp	r9, sl
   18b78:	movcc	r7, #39	; 0x27
   18b7c:	strbcc	r7, [r6, r9]
   18b80:	add	r7, r9, #1
   18b84:	add	r9, r9, #2
   18b88:	cmp	r7, sl
   18b8c:	movcc	r2, #39	; 0x27
   18b90:	strbcc	r2, [r6, r7]
   18b94:	mov	r2, #0
   18b98:	b	18b04 <__assert_fail@plt+0x761c>
   18b9c:	cmp	r8, #0
   18ba0:	sub	r7, r1, #1
   18ba4:	mov	r0, r5
   18ba8:	str	r2, [fp, #-48]	; 0xffffffd0
   18bac:	movwne	r8, #1
   18bb0:	cmp	r8, #0
   18bb4:	beq	184a4 <__assert_fail@plt+0x6fbc>
   18bb8:	b	18294 <__assert_fail@plt+0x6dac>
   18bbc:	mov	lr, r7
   18bc0:	b	18bc8 <__assert_fail@plt+0x76e0>
   18bc4:	mvn	lr, #0
   18bc8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18bcc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18bd0:	eor	r0, r7, #2
   18bd4:	orr	r0, r0, r9
   18bd8:	clz	r0, r0
   18bdc:	lsr	r0, r0, #5
   18be0:	tst	r1, r0
   18be4:	bne	18ce4 <__assert_fail@plt+0x77fc>
   18be8:	mov	r0, r1
   18bec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18bf0:	cmp	r7, #2
   18bf4:	movwne	r1, #1
   18bf8:	orr	r0, r0, r1
   18bfc:	tst	r0, #1
   18c00:	ldreq	r0, [sp, #52]	; 0x34
   18c04:	streq	lr, [sp, #84]	; 0x54
   18c08:	eoreq	r0, r0, #1
   18c0c:	tsteq	r0, #1
   18c10:	bne	18da8 <__assert_fail@plt+0x78c0>
   18c14:	tst	r4, #1
   18c18:	bne	18d64 <__assert_fail@plt+0x787c>
   18c1c:	ldr	r6, [sp, #48]	; 0x30
   18c20:	mov	r8, #0
   18c24:	cmp	r6, #0
   18c28:	beq	18da0 <__assert_fail@plt+0x78b8>
   18c2c:	ldr	r0, [sp, #80]	; 0x50
   18c30:	mov	r1, #0
   18c34:	cmp	sl, #0
   18c38:	mov	r4, #0
   18c3c:	str	r1, [fp, #-72]	; 0xffffffb8
   18c40:	beq	17b34 <__assert_fail@plt+0x664c>
   18c44:	b	18da8 <__assert_fail@plt+0x78c0>
   18c48:	ldrb	r1, [r0, #3]
   18c4c:	cmp	r1, #56	; 0x38
   18c50:	ldrbeq	r1, [r0, #4]
   18c54:	cmpeq	r1, #48	; 0x30
   18c58:	bne	17d2c <__assert_fail@plt+0x6844>
   18c5c:	ldrb	r1, [r0, #5]
   18c60:	cmp	r1, #51	; 0x33
   18c64:	ldrbeq	r1, [r0, #6]
   18c68:	cmpeq	r1, #48	; 0x30
   18c6c:	bne	17d2c <__assert_fail@plt+0x6844>
   18c70:	ldrb	r0, [r0, #7]
   18c74:	cmp	r0, #0
   18c78:	movw	r0, #49506	; 0xc162
   18c7c:	movt	r0, #1
   18c80:	str	r0, [sp, #68]	; 0x44
   18c84:	bne	17d2c <__assert_fail@plt+0x6844>
   18c88:	b	17d48 <__assert_fail@plt+0x6860>
   18c8c:	ldrb	r1, [r0, #4]
   18c90:	cmp	r1, #48	; 0x30
   18c94:	ldrbeq	r1, [r0, #5]
   18c98:	cmpeq	r1, #51	; 0x33
   18c9c:	bne	17e10 <__assert_fail@plt+0x6928>
   18ca0:	ldrb	r1, [r0, #6]
   18ca4:	cmp	r1, #48	; 0x30
   18ca8:	ldrbeq	r0, [r0, #7]
   18cac:	cmpeq	r0, #0
   18cb0:	bne	17e10 <__assert_fail@plt+0x6928>
   18cb4:	movw	r0, #49510	; 0xc166
   18cb8:	movt	r0, #1
   18cbc:	str	r0, [sp, #72]	; 0x48
   18cc0:	b	17e30 <__assert_fail@plt+0x6948>
   18cc4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18cc8:	ldr	r2, [sp, #80]	; 0x50
   18ccc:	b	18d04 <__assert_fail@plt+0x781c>
   18cd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   18cd4:	mov	r2, #1
   18cd8:	mov	lr, r4
   18cdc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18ce0:	b	18d04 <__assert_fail@plt+0x781c>
   18ce4:	ldr	r2, [sp, #80]	; 0x50
   18ce8:	mov	r7, #2
   18cec:	b	18d04 <__assert_fail@plt+0x781c>
   18cf0:	ldr	r6, [sp, #76]	; 0x4c
   18cf4:	ldr	ip, [fp, #-84]	; 0xffffffac
   18cf8:	ldr	lr, [sp, #84]	; 0x54
   18cfc:	ldr	r2, [sp, #80]	; 0x50
   18d00:	mov	r7, #2
   18d04:	mov	r0, #0
   18d08:	ldr	r1, [fp, #12]
   18d0c:	tst	r2, #1
   18d10:	mov	r2, r7
   18d14:	mov	r3, lr
   18d18:	str	r0, [sp, #8]
   18d1c:	ldr	r0, [sp, #68]	; 0x44
   18d20:	movwne	r2, #4
   18d24:	cmp	r7, #2
   18d28:	movne	r2, r7
   18d2c:	str	r2, [sp]
   18d30:	mov	r2, ip
   18d34:	bic	r1, r1, #2
   18d38:	str	r0, [sp, #12]
   18d3c:	ldr	r0, [sp, #72]	; 0x48
   18d40:	str	r1, [sp, #4]
   18d44:	mov	r1, sl
   18d48:	str	r0, [sp, #16]
   18d4c:	mov	r0, r6
   18d50:	bl	17ab8 <__assert_fail@plt+0x65d0>
   18d54:	mov	r9, r0
   18d58:	mov	r0, r9
   18d5c:	sub	sp, fp, #28
   18d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d64:	mov	r0, #5
   18d68:	ldr	r1, [sp, #48]	; 0x30
   18d6c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18d70:	ldr	r3, [sp, #84]	; 0x54
   18d74:	str	r0, [sp]
   18d78:	ldr	r0, [fp, #12]
   18d7c:	str	r0, [sp, #4]
   18d80:	ldr	r0, [fp, #16]
   18d84:	str	r0, [sp, #8]
   18d88:	ldr	r0, [sp, #68]	; 0x44
   18d8c:	str	r0, [sp, #12]
   18d90:	ldr	r0, [sp, #72]	; 0x48
   18d94:	str	r0, [sp, #16]
   18d98:	ldr	r0, [sp, #76]	; 0x4c
   18d9c:	b	18d50 <__assert_fail@plt+0x7868>
   18da0:	mov	r0, #0
   18da4:	str	r0, [fp, #-72]	; 0xffffffb8
   18da8:	ldr	r1, [sp, #92]	; 0x5c
   18dac:	cmp	r1, #0
   18db0:	beq	18df0 <__assert_fail@plt+0x7908>
   18db4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18db8:	ldr	r2, [sp, #76]	; 0x4c
   18dbc:	tst	r0, #1
   18dc0:	bne	18df4 <__assert_fail@plt+0x790c>
   18dc4:	ldrb	r0, [r1]
   18dc8:	cmp	r0, #0
   18dcc:	beq	18df4 <__assert_fail@plt+0x790c>
   18dd0:	add	r1, r1, #1
   18dd4:	cmp	r9, sl
   18dd8:	strbcc	r0, [r2, r9]
   18ddc:	add	r9, r9, #1
   18de0:	ldrb	r0, [r1], #1
   18de4:	cmp	r0, #0
   18de8:	bne	18dd4 <__assert_fail@plt+0x78ec>
   18dec:	b	18df4 <__assert_fail@plt+0x790c>
   18df0:	ldr	r2, [sp, #76]	; 0x4c
   18df4:	cmp	r9, sl
   18df8:	movcc	r0, #0
   18dfc:	strbcc	r0, [r2, r9]
   18e00:	mov	r0, r9
   18e04:	sub	sp, fp, #28
   18e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e0c:	mov	r2, #1
   18e10:	b	18cdc <__assert_fail@plt+0x77f4>
   18e14:	ldr	r2, [sp, #80]	; 0x50
   18e18:	mov	r7, #5
   18e1c:	b	18d04 <__assert_fail@plt+0x781c>
   18e20:	bl	114a0 <abort@plt>
   18e24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e28:	add	fp, sp, #28
   18e2c:	sub	sp, sp, #28
   18e30:	movw	r5, #53696	; 0xd1c0
   18e34:	cmp	r2, #0
   18e38:	mov	r4, r1
   18e3c:	mov	r7, r0
   18e40:	str	r0, [sp, #20]
   18e44:	movt	r5, #2
   18e48:	movne	r5, r2
   18e4c:	bl	1138c <__errno_location@plt>
   18e50:	mov	sl, r0
   18e54:	ldm	r5, {r0, r1}
   18e58:	ldr	r2, [r5, #40]	; 0x28
   18e5c:	ldr	r3, [r5, #44]	; 0x2c
   18e60:	add	r9, r5, #8
   18e64:	ldr	r6, [sl]
   18e68:	orr	r8, r1, #1
   18e6c:	mov	r1, #0
   18e70:	str	r6, [sp, #24]
   18e74:	stm	sp, {r0, r8, r9}
   18e78:	str	r2, [sp, #12]
   18e7c:	str	r3, [sp, #16]
   18e80:	mov	r0, #0
   18e84:	mov	r2, r7
   18e88:	mov	r3, r4
   18e8c:	mov	r6, r4
   18e90:	bl	17ab8 <__assert_fail@plt+0x65d0>
   18e94:	add	r7, r0, #1
   18e98:	mov	r0, r7
   18e9c:	bl	19fec <__assert_fail@plt+0x8b04>
   18ea0:	mov	r4, r0
   18ea4:	ldr	r0, [r5]
   18ea8:	ldr	r2, [r5, #44]	; 0x2c
   18eac:	ldr	r1, [r5, #40]	; 0x28
   18eb0:	mov	r3, r6
   18eb4:	stm	sp, {r0, r8, r9}
   18eb8:	str	r2, [sp, #16]
   18ebc:	str	r1, [sp, #12]
   18ec0:	mov	r0, r4
   18ec4:	mov	r1, r7
   18ec8:	ldr	r2, [sp, #20]
   18ecc:	bl	17ab8 <__assert_fail@plt+0x65d0>
   18ed0:	ldr	r0, [sp, #24]
   18ed4:	str	r0, [sl]
   18ed8:	mov	r0, r4
   18edc:	sub	sp, fp, #28
   18ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ee8:	add	fp, sp, #28
   18eec:	sub	sp, sp, #36	; 0x24
   18ef0:	movw	r8, #53696	; 0xd1c0
   18ef4:	cmp	r3, #0
   18ef8:	mov	r4, r2
   18efc:	str	r2, [sp, #24]
   18f00:	mov	r5, r1
   18f04:	mov	r6, r0
   18f08:	str	r0, [sp, #20]
   18f0c:	movt	r8, #2
   18f10:	movne	r8, r3
   18f14:	bl	1138c <__errno_location@plt>
   18f18:	str	r0, [sp, #28]
   18f1c:	cmp	r4, #0
   18f20:	add	sl, r8, #8
   18f24:	ldm	r8, {r3, r9}
   18f28:	ldr	r7, [r0]
   18f2c:	ldr	r1, [r8, #40]	; 0x28
   18f30:	ldr	r2, [r8, #44]	; 0x2c
   18f34:	mov	r0, #0
   18f38:	orreq	r9, r9, #1
   18f3c:	str	r7, [sp, #32]
   18f40:	mov	r7, r5
   18f44:	stm	sp, {r3, r9, sl}
   18f48:	str	r1, [sp, #12]
   18f4c:	str	r2, [sp, #16]
   18f50:	mov	r1, #0
   18f54:	mov	r2, r6
   18f58:	mov	r3, r5
   18f5c:	bl	17ab8 <__assert_fail@plt+0x65d0>
   18f60:	add	r4, r0, #1
   18f64:	mov	r5, r0
   18f68:	mov	r0, r4
   18f6c:	bl	19fec <__assert_fail@plt+0x8b04>
   18f70:	mov	r6, r0
   18f74:	ldr	r0, [r8]
   18f78:	ldr	r2, [r8, #44]	; 0x2c
   18f7c:	ldr	r1, [r8, #40]	; 0x28
   18f80:	mov	r3, r7
   18f84:	stm	sp, {r0, r9, sl}
   18f88:	str	r2, [sp, #16]
   18f8c:	str	r1, [sp, #12]
   18f90:	mov	r0, r6
   18f94:	mov	r1, r4
   18f98:	ldr	r2, [sp, #20]
   18f9c:	bl	17ab8 <__assert_fail@plt+0x65d0>
   18fa0:	ldr	r0, [sp, #24]
   18fa4:	ldr	r1, [sp, #32]
   18fa8:	ldr	r2, [sp, #28]
   18fac:	cmp	r0, #0
   18fb0:	str	r1, [r2]
   18fb4:	strne	r5, [r0]
   18fb8:	mov	r0, r6
   18fbc:	sub	sp, fp, #28
   18fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fc4:	push	{r4, r5, r6, r7, fp, lr}
   18fc8:	add	fp, sp, #16
   18fcc:	movw	r4, #53608	; 0xd168
   18fd0:	movt	r4, #2
   18fd4:	ldrd	r6, [r4]
   18fd8:	cmp	r7, #2
   18fdc:	blt	19008 <__assert_fail@plt+0x7b20>
   18fe0:	add	r5, r6, #12
   18fe4:	mov	r7, #0
   18fe8:	ldr	r0, [r5, r7, lsl #3]
   18fec:	bl	13acc <__assert_fail@plt+0x25e4>
   18ff0:	ldr	r1, [r4, #4]
   18ff4:	add	r2, r7, #2
   18ff8:	add	r0, r7, #1
   18ffc:	mov	r7, r0
   19000:	cmp	r2, r1
   19004:	blt	18fe8 <__assert_fail@plt+0x7b00>
   19008:	ldr	r0, [r6, #4]
   1900c:	movw	r5, #53744	; 0xd1f0
   19010:	movt	r5, #2
   19014:	cmp	r0, r5
   19018:	beq	1902c <__assert_fail@plt+0x7b44>
   1901c:	bl	13acc <__assert_fail@plt+0x25e4>
   19020:	mov	r0, #256	; 0x100
   19024:	str	r0, [r4, #8]
   19028:	str	r5, [r4, #12]
   1902c:	add	r5, r4, #8
   19030:	cmp	r6, r5
   19034:	beq	19044 <__assert_fail@plt+0x7b5c>
   19038:	mov	r0, r6
   1903c:	bl	13acc <__assert_fail@plt+0x25e4>
   19040:	str	r5, [r4]
   19044:	mov	r0, #1
   19048:	str	r0, [r4, #4]
   1904c:	pop	{r4, r5, r6, r7, fp, pc}
   19050:	movw	r3, #53696	; 0xd1c0
   19054:	mvn	r2, #0
   19058:	movt	r3, #2
   1905c:	b	19060 <__assert_fail@plt+0x7b78>
   19060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19064:	add	fp, sp, #28
   19068:	sub	sp, sp, #44	; 0x2c
   1906c:	mov	r7, r3
   19070:	str	r2, [sp, #36]	; 0x24
   19074:	str	r1, [sp, #32]
   19078:	mov	r5, r0
   1907c:	bl	1138c <__errno_location@plt>
   19080:	cmp	r5, #0
   19084:	blt	191e8 <__assert_fail@plt+0x7d00>
   19088:	cmn	r5, #-2147483647	; 0x80000001
   1908c:	beq	191e8 <__assert_fail@plt+0x7d00>
   19090:	movw	r8, #53608	; 0xd168
   19094:	mov	r4, r0
   19098:	movt	r8, #2
   1909c:	ldr	r6, [r8]
   190a0:	ldr	r1, [r8, #4]
   190a4:	ldr	r0, [r0]
   190a8:	str	r4, [sp, #28]
   190ac:	cmp	r1, r5
   190b0:	str	r0, [sp, #24]
   190b4:	ble	190c0 <__assert_fail@plt+0x7bd8>
   190b8:	mov	sl, r6
   190bc:	b	19124 <__assert_fail@plt+0x7c3c>
   190c0:	mov	r0, #8
   190c4:	add	r9, r8, #8
   190c8:	add	r2, r5, #1
   190cc:	str	r1, [fp, #-32]	; 0xffffffe0
   190d0:	mvn	r3, #-2147483648	; 0x80000000
   190d4:	str	r0, [sp]
   190d8:	subs	r0, r6, r9
   190dc:	sub	r2, r2, r1
   190e0:	sub	r1, fp, #32
   190e4:	movne	r0, r6
   190e8:	bl	1a1ec <__assert_fail@plt+0x8d04>
   190ec:	str	r0, [r8]
   190f0:	cmp	r6, r9
   190f4:	mov	sl, r0
   190f8:	ldrdeq	r0, [r8, #8]
   190fc:	stmeq	sl, {r0, r1}
   19100:	ldr	r1, [r8, #4]
   19104:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19108:	add	r0, sl, r1, lsl #3
   1910c:	sub	r1, r2, r1
   19110:	lsl	r2, r1, #3
   19114:	mov	r1, #0
   19118:	bl	113a4 <memset@plt>
   1911c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19120:	str	r0, [r8, #4]
   19124:	mov	r9, sl
   19128:	ldr	r6, [r9, r5, lsl #3]!
   1912c:	ldr	r4, [r9, #4]!
   19130:	ldm	r7, {r0, r1}
   19134:	ldr	r2, [r7, #40]	; 0x28
   19138:	ldr	r3, [r7, #44]	; 0x2c
   1913c:	orr	r8, r1, #1
   19140:	add	r1, r7, #8
   19144:	stm	sp, {r0, r8}
   19148:	add	r0, sp, #8
   1914c:	str	r1, [sp, #20]
   19150:	stm	r0, {r1, r2, r3}
   19154:	mov	r0, r4
   19158:	mov	r1, r6
   1915c:	ldr	r2, [sp, #32]
   19160:	ldr	r3, [sp, #36]	; 0x24
   19164:	bl	17ab8 <__assert_fail@plt+0x65d0>
   19168:	cmp	r6, r0
   1916c:	bhi	191d0 <__assert_fail@plt+0x7ce8>
   19170:	add	r6, r0, #1
   19174:	movw	r0, #53744	; 0xd1f0
   19178:	movt	r0, #2
   1917c:	str	r6, [sl, r5, lsl #3]
   19180:	cmp	r4, r0
   19184:	beq	19190 <__assert_fail@plt+0x7ca8>
   19188:	mov	r0, r4
   1918c:	bl	13acc <__assert_fail@plt+0x25e4>
   19190:	mov	r0, r6
   19194:	bl	19fec <__assert_fail@plt+0x8b04>
   19198:	str	r0, [r9]
   1919c:	mov	r4, r0
   191a0:	add	r3, sp, #8
   191a4:	ldr	r0, [r7]
   191a8:	ldr	r1, [r7, #40]	; 0x28
   191ac:	ldr	r2, [r7, #44]	; 0x2c
   191b0:	stm	sp, {r0, r8}
   191b4:	ldr	r0, [sp, #20]
   191b8:	stm	r3, {r0, r1, r2}
   191bc:	mov	r0, r4
   191c0:	mov	r1, r6
   191c4:	ldr	r2, [sp, #32]
   191c8:	ldr	r3, [sp, #36]	; 0x24
   191cc:	bl	17ab8 <__assert_fail@plt+0x65d0>
   191d0:	ldr	r1, [sp, #24]
   191d4:	ldr	r0, [sp, #28]
   191d8:	str	r1, [r0]
   191dc:	mov	r0, r4
   191e0:	sub	sp, fp, #28
   191e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191e8:	bl	114a0 <abort@plt>
   191ec:	movw	r3, #53696	; 0xd1c0
   191f0:	movt	r3, #2
   191f4:	b	19060 <__assert_fail@plt+0x7b78>
   191f8:	movw	r3, #53696	; 0xd1c0
   191fc:	mov	r1, r0
   19200:	mov	r0, #0
   19204:	mvn	r2, #0
   19208:	movt	r3, #2
   1920c:	b	19060 <__assert_fail@plt+0x7b78>
   19210:	movw	r3, #53696	; 0xd1c0
   19214:	mov	r2, r1
   19218:	mov	r1, r0
   1921c:	mov	r0, #0
   19220:	movt	r3, #2
   19224:	b	19060 <__assert_fail@plt+0x7b78>
   19228:	push	{fp, lr}
   1922c:	mov	fp, sp
   19230:	sub	sp, sp, #48	; 0x30
   19234:	vmov.i32	q8, #0	; 0x00000000
   19238:	mov	ip, #32
   1923c:	mov	r3, sp
   19240:	mov	lr, r2
   19244:	cmp	r1, #10
   19248:	add	r2, r3, #16
   1924c:	vst1.64	{d16-d17}, [r3], ip
   19250:	vst1.64	{d16-d17}, [r3]
   19254:	vst1.64	{d16-d17}, [r2]
   19258:	beq	19278 <__assert_fail@plt+0x7d90>
   1925c:	str	r1, [sp]
   19260:	mov	r3, sp
   19264:	mov	r1, lr
   19268:	mvn	r2, #0
   1926c:	bl	19060 <__assert_fail@plt+0x7b78>
   19270:	mov	sp, fp
   19274:	pop	{fp, pc}
   19278:	bl	114a0 <abort@plt>
   1927c:	push	{r4, sl, fp, lr}
   19280:	add	fp, sp, #8
   19284:	sub	sp, sp, #48	; 0x30
   19288:	mov	ip, r3
   1928c:	mov	r3, sp
   19290:	vmov.i32	q8, #0	; 0x00000000
   19294:	mov	lr, #32
   19298:	cmp	r1, #10
   1929c:	add	r4, r3, #16
   192a0:	vst1.64	{d16-d17}, [r3], lr
   192a4:	vst1.64	{d16-d17}, [r3]
   192a8:	vst1.64	{d16-d17}, [r4]
   192ac:	beq	192cc <__assert_fail@plt+0x7de4>
   192b0:	str	r1, [sp]
   192b4:	mov	r1, r2
   192b8:	mov	r3, sp
   192bc:	mov	r2, ip
   192c0:	bl	19060 <__assert_fail@plt+0x7b78>
   192c4:	sub	sp, fp, #8
   192c8:	pop	{r4, sl, fp, pc}
   192cc:	bl	114a0 <abort@plt>
   192d0:	push	{fp, lr}
   192d4:	mov	fp, sp
   192d8:	sub	sp, sp, #48	; 0x30
   192dc:	mov	r3, sp
   192e0:	vmov.i32	q8, #0	; 0x00000000
   192e4:	mov	ip, #32
   192e8:	cmp	r0, #10
   192ec:	add	r2, r3, #16
   192f0:	vst1.64	{d16-d17}, [r3], ip
   192f4:	vst1.64	{d16-d17}, [r3]
   192f8:	vst1.64	{d16-d17}, [r2]
   192fc:	beq	1931c <__assert_fail@plt+0x7e34>
   19300:	str	r0, [sp]
   19304:	mov	r3, sp
   19308:	mov	r0, #0
   1930c:	mvn	r2, #0
   19310:	bl	19060 <__assert_fail@plt+0x7b78>
   19314:	mov	sp, fp
   19318:	pop	{fp, pc}
   1931c:	bl	114a0 <abort@plt>
   19320:	push	{fp, lr}
   19324:	mov	fp, sp
   19328:	sub	sp, sp, #48	; 0x30
   1932c:	mov	r3, sp
   19330:	vmov.i32	q8, #0	; 0x00000000
   19334:	mov	ip, #32
   19338:	cmp	r0, #10
   1933c:	add	lr, r3, #16
   19340:	vst1.64	{d16-d17}, [r3], ip
   19344:	vst1.64	{d16-d17}, [r3]
   19348:	vst1.64	{d16-d17}, [lr]
   1934c:	beq	19368 <__assert_fail@plt+0x7e80>
   19350:	str	r0, [sp]
   19354:	mov	r3, sp
   19358:	mov	r0, #0
   1935c:	bl	19060 <__assert_fail@plt+0x7b78>
   19360:	mov	sp, fp
   19364:	pop	{fp, pc}
   19368:	bl	114a0 <abort@plt>
   1936c:	push	{r4, sl, fp, lr}
   19370:	add	fp, sp, #8
   19374:	sub	sp, sp, #48	; 0x30
   19378:	mov	lr, r0
   1937c:	movw	r0, #53696	; 0xd1c0
   19380:	mov	r3, #32
   19384:	mov	ip, r1
   19388:	mov	r4, #1
   1938c:	movt	r0, #2
   19390:	add	r1, r0, #16
   19394:	vld1.64	{d16-d17}, [r0], r3
   19398:	mov	r3, sp
   1939c:	vld1.64	{d18-d19}, [r1]
   193a0:	add	r1, r3, #16
   193a4:	vld1.64	{d20-d21}, [r0]
   193a8:	add	r0, r3, #32
   193ac:	vst1.64	{d18-d19}, [r1]
   193b0:	mov	r1, r3
   193b4:	vst1.64	{d20-d21}, [r0]
   193b8:	mov	r0, #28
   193bc:	and	r0, r0, r2, lsr #3
   193c0:	and	r2, r2, #31
   193c4:	vst1.64	{d16-d17}, [r1], r0
   193c8:	ldr	r0, [r1, #8]
   193cc:	bic	r4, r4, r0, lsr r2
   193d0:	eor	r0, r0, r4, lsl r2
   193d4:	mov	r2, ip
   193d8:	str	r0, [r1, #8]
   193dc:	mov	r0, #0
   193e0:	mov	r1, lr
   193e4:	bl	19060 <__assert_fail@plt+0x7b78>
   193e8:	sub	sp, fp, #8
   193ec:	pop	{r4, sl, fp, pc}
   193f0:	push	{fp, lr}
   193f4:	mov	fp, sp
   193f8:	sub	sp, sp, #48	; 0x30
   193fc:	mov	ip, r0
   19400:	movw	r0, #53696	; 0xd1c0
   19404:	mov	r3, #32
   19408:	movt	r0, #2
   1940c:	add	r2, r0, #16
   19410:	vld1.64	{d16-d17}, [r0], r3
   19414:	mov	r3, sp
   19418:	vld1.64	{d18-d19}, [r2]
   1941c:	add	r2, r3, #16
   19420:	vld1.64	{d20-d21}, [r0]
   19424:	add	r0, r3, #32
   19428:	vst1.64	{d18-d19}, [r2]
   1942c:	mov	r2, r3
   19430:	vst1.64	{d20-d21}, [r0]
   19434:	mov	r0, #28
   19438:	and	r0, r0, r1, lsr #3
   1943c:	and	r1, r1, #31
   19440:	vst1.64	{d16-d17}, [r2], r0
   19444:	mov	r0, #1
   19448:	ldr	lr, [r2, #8]
   1944c:	bic	r0, r0, lr, lsr r1
   19450:	eor	r0, lr, r0, lsl r1
   19454:	mov	r1, ip
   19458:	str	r0, [r2, #8]
   1945c:	mov	r0, #0
   19460:	mvn	r2, #0
   19464:	bl	19060 <__assert_fail@plt+0x7b78>
   19468:	mov	sp, fp
   1946c:	pop	{fp, pc}
   19470:	push	{fp, lr}
   19474:	mov	fp, sp
   19478:	sub	sp, sp, #48	; 0x30
   1947c:	movw	r2, #53696	; 0xd1c0
   19480:	mov	r3, #32
   19484:	mov	r1, r0
   19488:	movt	r2, #2
   1948c:	add	r0, r2, #16
   19490:	vld1.64	{d16-d17}, [r2], r3
   19494:	mov	r3, sp
   19498:	vld1.64	{d18-d19}, [r0]
   1949c:	add	r0, r3, #16
   194a0:	vld1.64	{d20-d21}, [r2]
   194a4:	mov	r2, r3
   194a8:	vst1.64	{d18-d19}, [r0]
   194ac:	add	r0, r3, #32
   194b0:	vst1.64	{d20-d21}, [r0]
   194b4:	mov	r0, #12
   194b8:	vst1.64	{d16-d17}, [r2], r0
   194bc:	ldr	r0, [r2]
   194c0:	orr	r0, r0, #67108864	; 0x4000000
   194c4:	str	r0, [r2]
   194c8:	mov	r0, #0
   194cc:	mvn	r2, #0
   194d0:	bl	19060 <__assert_fail@plt+0x7b78>
   194d4:	mov	sp, fp
   194d8:	pop	{fp, pc}
   194dc:	push	{fp, lr}
   194e0:	mov	fp, sp
   194e4:	sub	sp, sp, #48	; 0x30
   194e8:	mov	ip, r1
   194ec:	mov	r1, r0
   194f0:	movw	r0, #53696	; 0xd1c0
   194f4:	mov	r3, #32
   194f8:	movt	r0, #2
   194fc:	add	r2, r0, #16
   19500:	vld1.64	{d16-d17}, [r0], r3
   19504:	mov	r3, sp
   19508:	vld1.64	{d18-d19}, [r2]
   1950c:	add	r2, r3, #16
   19510:	vld1.64	{d20-d21}, [r0]
   19514:	add	r0, r3, #32
   19518:	vst1.64	{d18-d19}, [r2]
   1951c:	mov	r2, r3
   19520:	vst1.64	{d20-d21}, [r0]
   19524:	mov	r0, #12
   19528:	vst1.64	{d16-d17}, [r2], r0
   1952c:	ldr	r0, [r2]
   19530:	orr	r0, r0, #67108864	; 0x4000000
   19534:	str	r0, [r2]
   19538:	mov	r0, #0
   1953c:	mov	r2, ip
   19540:	bl	19060 <__assert_fail@plt+0x7b78>
   19544:	mov	sp, fp
   19548:	pop	{fp, pc}
   1954c:	push	{r4, sl, fp, lr}
   19550:	add	fp, sp, #8
   19554:	sub	sp, sp, #96	; 0x60
   19558:	mov	ip, r2
   1955c:	mov	r2, sp
   19560:	vmov.i32	q8, #0	; 0x00000000
   19564:	mov	r4, #28
   19568:	cmp	r1, #10
   1956c:	mov	r3, r2
   19570:	add	lr, r2, #16
   19574:	vst1.64	{d16-d17}, [r3], r4
   19578:	vst1.64	{d16-d17}, [lr]
   1957c:	vst1.32	{d16-d17}, [r3]
   19580:	beq	195d0 <__assert_fail@plt+0x80e8>
   19584:	vld1.64	{d16-d17}, [r2], r4
   19588:	vld1.64	{d18-d19}, [lr]
   1958c:	add	r3, sp, #48	; 0x30
   19590:	add	r4, r3, #4
   19594:	vld1.32	{d20-d21}, [r2]
   19598:	add	r2, r3, #20
   1959c:	vst1.32	{d16-d17}, [r4]
   195a0:	vst1.32	{d18-d19}, [r2]
   195a4:	add	r2, r3, #32
   195a8:	vst1.32	{d20-d21}, [r2]
   195ac:	str	r1, [sp, #48]	; 0x30
   195b0:	mvn	r2, #0
   195b4:	ldr	r1, [sp, #60]	; 0x3c
   195b8:	orr	r1, r1, #67108864	; 0x4000000
   195bc:	str	r1, [sp, #60]	; 0x3c
   195c0:	mov	r1, ip
   195c4:	bl	19060 <__assert_fail@plt+0x7b78>
   195c8:	sub	sp, fp, #8
   195cc:	pop	{r4, sl, fp, pc}
   195d0:	bl	114a0 <abort@plt>
   195d4:	push	{r4, r5, fp, lr}
   195d8:	add	fp, sp, #8
   195dc:	sub	sp, sp, #48	; 0x30
   195e0:	mov	ip, r3
   195e4:	movw	r3, #53696	; 0xd1c0
   195e8:	mov	lr, #32
   195ec:	cmp	r1, #0
   195f0:	mov	r5, sp
   195f4:	movt	r3, #2
   195f8:	cmpne	r2, #0
   195fc:	add	r4, r3, #16
   19600:	vld1.64	{d16-d17}, [r3], lr
   19604:	vld1.64	{d18-d19}, [r4]
   19608:	add	r4, r5, #16
   1960c:	vld1.64	{d20-d21}, [r3]
   19610:	vst1.64	{d16-d17}, [r5], lr
   19614:	mov	r3, #10
   19618:	vst1.64	{d18-d19}, [r4]
   1961c:	vst1.64	{d20-d21}, [r5]
   19620:	str	r3, [sp]
   19624:	bne	1962c <__assert_fail@plt+0x8144>
   19628:	bl	114a0 <abort@plt>
   1962c:	str	r2, [sp, #44]	; 0x2c
   19630:	str	r1, [sp, #40]	; 0x28
   19634:	mov	r3, sp
   19638:	mov	r1, ip
   1963c:	mvn	r2, #0
   19640:	bl	19060 <__assert_fail@plt+0x7b78>
   19644:	sub	sp, fp, #8
   19648:	pop	{r4, r5, fp, pc}
   1964c:	push	{r4, r5, fp, lr}
   19650:	add	fp, sp, #8
   19654:	sub	sp, sp, #48	; 0x30
   19658:	mov	lr, r3
   1965c:	movw	r3, #53696	; 0xd1c0
   19660:	mov	ip, #32
   19664:	cmp	r1, #0
   19668:	mov	r5, sp
   1966c:	movt	r3, #2
   19670:	cmpne	r2, #0
   19674:	add	r4, r3, #16
   19678:	vld1.64	{d16-d17}, [r3], ip
   1967c:	vld1.64	{d18-d19}, [r4]
   19680:	add	r4, r5, #16
   19684:	vld1.64	{d20-d21}, [r3]
   19688:	vst1.64	{d16-d17}, [r5], ip
   1968c:	mov	r3, #10
   19690:	vst1.64	{d18-d19}, [r4]
   19694:	vst1.64	{d20-d21}, [r5]
   19698:	str	r3, [sp]
   1969c:	bne	196a4 <__assert_fail@plt+0x81bc>
   196a0:	bl	114a0 <abort@plt>
   196a4:	ldr	ip, [fp, #8]
   196a8:	str	r2, [sp, #44]	; 0x2c
   196ac:	str	r1, [sp, #40]	; 0x28
   196b0:	mov	r3, sp
   196b4:	mov	r1, lr
   196b8:	mov	r2, ip
   196bc:	bl	19060 <__assert_fail@plt+0x7b78>
   196c0:	sub	sp, fp, #8
   196c4:	pop	{r4, r5, fp, pc}
   196c8:	push	{r4, sl, fp, lr}
   196cc:	add	fp, sp, #8
   196d0:	sub	sp, sp, #48	; 0x30
   196d4:	mov	ip, r2
   196d8:	movw	r2, #53696	; 0xd1c0
   196dc:	mov	lr, #32
   196e0:	cmp	r0, #0
   196e4:	mov	r4, sp
   196e8:	movt	r2, #2
   196ec:	cmpne	r1, #0
   196f0:	add	r3, r2, #16
   196f4:	vld1.64	{d16-d17}, [r2], lr
   196f8:	vld1.64	{d18-d19}, [r3]
   196fc:	add	r3, r4, #16
   19700:	vld1.64	{d20-d21}, [r2]
   19704:	vst1.64	{d16-d17}, [r4], lr
   19708:	mov	r2, #10
   1970c:	vst1.64	{d18-d19}, [r3]
   19710:	vst1.64	{d20-d21}, [r4]
   19714:	str	r2, [sp]
   19718:	bne	19720 <__assert_fail@plt+0x8238>
   1971c:	bl	114a0 <abort@plt>
   19720:	str	r1, [sp, #44]	; 0x2c
   19724:	str	r0, [sp, #40]	; 0x28
   19728:	mov	r3, sp
   1972c:	mov	r0, #0
   19730:	mov	r1, ip
   19734:	mvn	r2, #0
   19738:	bl	19060 <__assert_fail@plt+0x7b78>
   1973c:	sub	sp, fp, #8
   19740:	pop	{r4, sl, fp, pc}
   19744:	push	{r4, r5, fp, lr}
   19748:	add	fp, sp, #8
   1974c:	sub	sp, sp, #48	; 0x30
   19750:	mov	lr, r2
   19754:	movw	r2, #53696	; 0xd1c0
   19758:	mov	ip, r3
   1975c:	mov	r3, #32
   19760:	cmp	r0, #0
   19764:	mov	r5, sp
   19768:	movt	r2, #2
   1976c:	cmpne	r1, #0
   19770:	add	r4, r2, #16
   19774:	vld1.64	{d16-d17}, [r2], r3
   19778:	vld1.64	{d18-d19}, [r4]
   1977c:	add	r4, r5, #16
   19780:	vld1.64	{d20-d21}, [r2]
   19784:	vst1.64	{d16-d17}, [r5], r3
   19788:	mov	r2, #10
   1978c:	vst1.64	{d18-d19}, [r4]
   19790:	vst1.64	{d20-d21}, [r5]
   19794:	str	r2, [sp]
   19798:	bne	197a0 <__assert_fail@plt+0x82b8>
   1979c:	bl	114a0 <abort@plt>
   197a0:	str	r1, [sp, #44]	; 0x2c
   197a4:	str	r0, [sp, #40]	; 0x28
   197a8:	mov	r3, sp
   197ac:	mov	r0, #0
   197b0:	mov	r1, lr
   197b4:	mov	r2, ip
   197b8:	bl	19060 <__assert_fail@plt+0x7b78>
   197bc:	sub	sp, fp, #8
   197c0:	pop	{r4, r5, fp, pc}
   197c4:	movw	r3, #53560	; 0xd138
   197c8:	movt	r3, #2
   197cc:	b	19060 <__assert_fail@plt+0x7b78>
   197d0:	movw	r3, #53560	; 0xd138
   197d4:	mov	r2, r1
   197d8:	mov	r1, r0
   197dc:	mov	r0, #0
   197e0:	movt	r3, #2
   197e4:	b	19060 <__assert_fail@plt+0x7b78>
   197e8:	movw	r3, #53560	; 0xd138
   197ec:	mvn	r2, #0
   197f0:	movt	r3, #2
   197f4:	b	19060 <__assert_fail@plt+0x7b78>
   197f8:	movw	r3, #53560	; 0xd138
   197fc:	mov	r1, r0
   19800:	mov	r0, #0
   19804:	mvn	r2, #0
   19808:	movt	r3, #2
   1980c:	b	19060 <__assert_fail@plt+0x7b78>
   19810:	push	{r4, sl, fp, lr}
   19814:	add	fp, sp, #8
   19818:	sub	sp, sp, #104	; 0x68
   1981c:	movw	r1, #50313	; 0xc489
   19820:	mov	r4, r0
   19824:	mov	r2, sp
   19828:	mov	r0, #3
   1982c:	movt	r1, #1
   19830:	bl	114b8 <__lxstat64@plt>
   19834:	mov	r1, r0
   19838:	mov	r0, #0
   1983c:	cmp	r1, #0
   19840:	beq	1984c <__assert_fail@plt+0x8364>
   19844:	sub	sp, fp, #8
   19848:	pop	{r4, sl, fp, pc}
   1984c:	ldr	r0, [sp, #96]	; 0x60
   19850:	ldr	r1, [sp, #100]	; 0x64
   19854:	ldm	sp, {r2, r3}
   19858:	stm	r4, {r0, r1, r2, r3}
   1985c:	mov	r0, r4
   19860:	sub	sp, fp, #8
   19864:	pop	{r4, sl, fp, pc}
   19868:	push	{r4, r5, r6, r7, fp, lr}
   1986c:	add	fp, sp, #16
   19870:	mov	r4, r0
   19874:	cmp	r0, #2
   19878:	movhi	r0, r4
   1987c:	pophi	{r4, r5, r6, r7, fp, pc}
   19880:	mov	r0, r4
   19884:	bl	1ac40 <__assert_fail@plt+0x9758>
   19888:	mov	r5, r0
   1988c:	bl	1138c <__errno_location@plt>
   19890:	ldr	r7, [r0]
   19894:	mov	r6, r0
   19898:	mov	r0, r4
   1989c:	bl	114ac <close@plt>
   198a0:	mov	r0, r5
   198a4:	str	r7, [r6]
   198a8:	pop	{r4, r5, r6, r7, fp, pc}
   198ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   198b0:	add	fp, sp, #24
   198b4:	sub	sp, sp, #32
   198b8:	ldr	r6, [fp, #12]
   198bc:	ldr	r7, [fp, #8]
   198c0:	mov	r4, r2
   198c4:	mov	r8, r0
   198c8:	cmp	r1, #0
   198cc:	beq	198f4 <__assert_fail@plt+0x840c>
   198d0:	movw	r2, #49600	; 0xc1c0
   198d4:	mov	r5, r1
   198d8:	str	r3, [sp, #4]
   198dc:	str	r4, [sp]
   198e0:	mov	r0, r8
   198e4:	mov	r1, #1
   198e8:	movt	r2, #1
   198ec:	mov	r3, r5
   198f0:	b	1990c <__assert_fail@plt+0x8424>
   198f4:	movw	r2, #49612	; 0xc1cc
   198f8:	str	r3, [sp]
   198fc:	mov	r0, r8
   19900:	mov	r1, #1
   19904:	mov	r3, r4
   19908:	movt	r2, #1
   1990c:	bl	113c8 <__fprintf_chk@plt>
   19910:	movw	r1, #49619	; 0xc1d3
   19914:	mov	r0, #0
   19918:	mov	r2, #5
   1991c:	movt	r1, #1
   19920:	bl	11278 <dcgettext@plt>
   19924:	movw	r2, #50315	; 0xc48b
   19928:	mov	r3, r0
   1992c:	movw	r0, #2022	; 0x7e6
   19930:	mov	r1, #1
   19934:	str	r0, [sp]
   19938:	movt	r2, #1
   1993c:	mov	r0, r8
   19940:	bl	113c8 <__fprintf_chk@plt>
   19944:	movw	r4, #47535	; 0xb9af
   19948:	mov	r1, r8
   1994c:	movt	r4, #1
   19950:	mov	r0, r4
   19954:	bl	111dc <fputs_unlocked@plt>
   19958:	movw	r1, #49623	; 0xc1d7
   1995c:	mov	r0, #0
   19960:	mov	r2, #5
   19964:	movt	r1, #1
   19968:	bl	11278 <dcgettext@plt>
   1996c:	movw	r3, #49794	; 0xc282
   19970:	mov	r2, r0
   19974:	mov	r0, r8
   19978:	mov	r1, #1
   1997c:	movt	r3, #1
   19980:	bl	113c8 <__fprintf_chk@plt>
   19984:	mov	r0, r4
   19988:	mov	r1, r8
   1998c:	bl	111dc <fputs_unlocked@plt>
   19990:	cmp	r6, #9
   19994:	bhi	199d0 <__assert_fail@plt+0x84e8>
   19998:	add	r0, pc, #0
   1999c:	ldr	pc, [r0, r6, lsl #2]
   199a0:	andeq	r9, r1, r8, asr #19
   199a4:	ldrdeq	r9, [r1], -ip
   199a8:	andeq	r9, r1, ip, lsl #20
   199ac:	andeq	r9, r1, r4, lsr sl
   199b0:	andeq	r9, r1, ip, asr sl
   199b4:	andeq	r9, r1, r4, lsl #21
   199b8:	andeq	r9, r1, ip, lsr #21
   199bc:	andeq	r9, r1, r4, ror #21
   199c0:	andeq	r9, r1, ip, lsl #23
   199c4:	andeq	r9, r1, r4, lsr fp
   199c8:	sub	sp, fp, #24
   199cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   199d0:	movw	r1, #50147	; 0xc3e3
   199d4:	movt	r1, #1
   199d8:	b	19b3c <__assert_fail@plt+0x8654>
   199dc:	movw	r1, #49828	; 0xc2a4
   199e0:	mov	r0, #0
   199e4:	mov	r2, #5
   199e8:	movt	r1, #1
   199ec:	bl	11278 <dcgettext@plt>
   199f0:	ldr	r3, [r7]
   199f4:	mov	r2, r0
   199f8:	mov	r0, r8
   199fc:	mov	r1, #1
   19a00:	sub	sp, fp, #24
   19a04:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a08:	b	113c8 <__fprintf_chk@plt>
   19a0c:	movw	r1, #49844	; 0xc2b4
   19a10:	mov	r0, #0
   19a14:	mov	r2, #5
   19a18:	movt	r1, #1
   19a1c:	bl	11278 <dcgettext@plt>
   19a20:	mov	r2, r0
   19a24:	ldr	r3, [r7]
   19a28:	ldr	r0, [r7, #4]
   19a2c:	str	r0, [sp]
   19a30:	b	19b20 <__assert_fail@plt+0x8638>
   19a34:	movw	r1, #49867	; 0xc2cb
   19a38:	mov	r0, #0
   19a3c:	mov	r2, #5
   19a40:	movt	r1, #1
   19a44:	bl	11278 <dcgettext@plt>
   19a48:	ldr	r3, [r7]
   19a4c:	mov	r2, r0
   19a50:	ldmib	r7, {r0, r1}
   19a54:	stm	sp, {r0, r1}
   19a58:	b	19b20 <__assert_fail@plt+0x8638>
   19a5c:	movw	r1, #49895	; 0xc2e7
   19a60:	mov	r0, #0
   19a64:	mov	r2, #5
   19a68:	movt	r1, #1
   19a6c:	bl	11278 <dcgettext@plt>
   19a70:	ldr	r3, [r7]
   19a74:	mov	r2, r0
   19a78:	ldmib	r7, {r0, r1, r7}
   19a7c:	stm	sp, {r0, r1, r7}
   19a80:	b	19b20 <__assert_fail@plt+0x8638>
   19a84:	movw	r1, #49927	; 0xc307
   19a88:	mov	r0, #0
   19a8c:	mov	r2, #5
   19a90:	movt	r1, #1
   19a94:	bl	11278 <dcgettext@plt>
   19a98:	ldr	r3, [r7]
   19a9c:	mov	r2, r0
   19aa0:	ldmib	r7, {r0, r1, r6, r7}
   19aa4:	stm	sp, {r0, r1, r6, r7}
   19aa8:	b	19b20 <__assert_fail@plt+0x8638>
   19aac:	movw	r1, #49963	; 0xc32b
   19ab0:	mov	r0, #0
   19ab4:	mov	r2, #5
   19ab8:	movt	r1, #1
   19abc:	bl	11278 <dcgettext@plt>
   19ac0:	ldr	r3, [r7]
   19ac4:	mov	r2, r0
   19ac8:	ldmib	r7, {r0, r1, r6}
   19acc:	ldr	r5, [r7, #16]
   19ad0:	ldr	r7, [r7, #20]
   19ad4:	stm	sp, {r0, r1, r6}
   19ad8:	str	r5, [sp, #12]
   19adc:	str	r7, [sp, #16]
   19ae0:	b	19b20 <__assert_fail@plt+0x8638>
   19ae4:	movw	r1, #50003	; 0xc353
   19ae8:	mov	r0, #0
   19aec:	mov	r2, #5
   19af0:	movt	r1, #1
   19af4:	bl	11278 <dcgettext@plt>
   19af8:	ldr	r3, [r7]
   19afc:	mov	r2, r0
   19b00:	ldmib	r7, {r0, r1, r6}
   19b04:	ldr	r5, [r7, #16]
   19b08:	ldr	r4, [r7, #20]
   19b0c:	ldr	r7, [r7, #24]
   19b10:	stm	sp, {r0, r1, r6}
   19b14:	str	r5, [sp, #12]
   19b18:	str	r4, [sp, #16]
   19b1c:	str	r7, [sp, #20]
   19b20:	mov	r0, r8
   19b24:	mov	r1, #1
   19b28:	bl	113c8 <__fprintf_chk@plt>
   19b2c:	sub	sp, fp, #24
   19b30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19b34:	movw	r1, #50095	; 0xc3af
   19b38:	movt	r1, #1
   19b3c:	mov	r0, #0
   19b40:	mov	r2, #5
   19b44:	bl	11278 <dcgettext@plt>
   19b48:	mov	ip, r0
   19b4c:	ldr	r3, [r7]
   19b50:	ldr	r0, [r7, #4]
   19b54:	ldr	r1, [r7, #8]
   19b58:	ldr	r6, [r7, #12]
   19b5c:	ldr	r5, [r7, #16]
   19b60:	ldr	r4, [r7, #20]
   19b64:	ldr	r2, [r7, #24]
   19b68:	ldr	lr, [r7, #28]
   19b6c:	ldr	r7, [r7, #32]
   19b70:	stm	sp, {r0, r1, r6}
   19b74:	str	r5, [sp, #12]
   19b78:	str	r4, [sp, #16]
   19b7c:	str	r2, [sp, #20]
   19b80:	str	lr, [sp, #24]
   19b84:	str	r7, [sp, #28]
   19b88:	b	19bd0 <__assert_fail@plt+0x86e8>
   19b8c:	movw	r1, #50047	; 0xc37f
   19b90:	mov	r0, #0
   19b94:	mov	r2, #5
   19b98:	movt	r1, #1
   19b9c:	bl	11278 <dcgettext@plt>
   19ba0:	mov	ip, r0
   19ba4:	ldr	r3, [r7]
   19ba8:	ldmib	r7, {r0, r1, r6}
   19bac:	ldr	r5, [r7, #16]
   19bb0:	ldr	r4, [r7, #20]
   19bb4:	ldr	r2, [r7, #24]
   19bb8:	ldr	r7, [r7, #28]
   19bbc:	stm	sp, {r0, r1, r6}
   19bc0:	str	r5, [sp, #12]
   19bc4:	str	r4, [sp, #16]
   19bc8:	str	r2, [sp, #20]
   19bcc:	str	r7, [sp, #24]
   19bd0:	mov	r0, r8
   19bd4:	mov	r1, #1
   19bd8:	mov	r2, ip
   19bdc:	bl	113c8 <__fprintf_chk@plt>
   19be0:	sub	sp, fp, #24
   19be4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19be8:	push	{r4, sl, fp, lr}
   19bec:	add	fp, sp, #8
   19bf0:	sub	sp, sp, #8
   19bf4:	ldr	ip, [fp, #8]
   19bf8:	mov	lr, #0
   19bfc:	ldr	r4, [ip, lr, lsl #2]
   19c00:	add	lr, lr, #1
   19c04:	cmp	r4, #0
   19c08:	bne	19bfc <__assert_fail@plt+0x8714>
   19c0c:	sub	r4, lr, #1
   19c10:	str	ip, [sp]
   19c14:	str	r4, [sp, #4]
   19c18:	bl	198ac <__assert_fail@plt+0x83c4>
   19c1c:	sub	sp, fp, #8
   19c20:	pop	{r4, sl, fp, pc}
   19c24:	push	{fp, lr}
   19c28:	mov	fp, sp
   19c2c:	sub	sp, sp, #48	; 0x30
   19c30:	ldr	ip, [fp, #8]
   19c34:	ldr	lr, [ip]
   19c38:	cmp	lr, #0
   19c3c:	str	lr, [sp, #8]
   19c40:	beq	19cdc <__assert_fail@plt+0x87f4>
   19c44:	ldr	lr, [ip, #4]
   19c48:	cmp	lr, #0
   19c4c:	str	lr, [sp, #12]
   19c50:	beq	19ce4 <__assert_fail@plt+0x87fc>
   19c54:	ldr	lr, [ip, #8]
   19c58:	cmp	lr, #0
   19c5c:	str	lr, [sp, #16]
   19c60:	beq	19cec <__assert_fail@plt+0x8804>
   19c64:	ldr	lr, [ip, #12]
   19c68:	cmp	lr, #0
   19c6c:	str	lr, [sp, #20]
   19c70:	beq	19cf4 <__assert_fail@plt+0x880c>
   19c74:	ldr	lr, [ip, #16]
   19c78:	cmp	lr, #0
   19c7c:	str	lr, [sp, #24]
   19c80:	beq	19cfc <__assert_fail@plt+0x8814>
   19c84:	ldr	lr, [ip, #20]
   19c88:	cmp	lr, #0
   19c8c:	str	lr, [sp, #28]
   19c90:	beq	19d04 <__assert_fail@plt+0x881c>
   19c94:	ldr	lr, [ip, #24]
   19c98:	cmp	lr, #0
   19c9c:	str	lr, [sp, #32]
   19ca0:	beq	19d0c <__assert_fail@plt+0x8824>
   19ca4:	ldr	lr, [ip, #28]
   19ca8:	cmp	lr, #0
   19cac:	str	lr, [sp, #36]	; 0x24
   19cb0:	beq	19d14 <__assert_fail@plt+0x882c>
   19cb4:	ldr	lr, [ip, #32]
   19cb8:	cmp	lr, #0
   19cbc:	str	lr, [sp, #40]	; 0x28
   19cc0:	beq	19d1c <__assert_fail@plt+0x8834>
   19cc4:	ldr	lr, [ip, #36]	; 0x24
   19cc8:	mov	ip, #10
   19ccc:	cmp	lr, #0
   19cd0:	str	lr, [sp, #44]	; 0x2c
   19cd4:	movweq	ip, #9
   19cd8:	b	19d20 <__assert_fail@plt+0x8838>
   19cdc:	mov	ip, #0
   19ce0:	b	19d20 <__assert_fail@plt+0x8838>
   19ce4:	mov	ip, #1
   19ce8:	b	19d20 <__assert_fail@plt+0x8838>
   19cec:	mov	ip, #2
   19cf0:	b	19d20 <__assert_fail@plt+0x8838>
   19cf4:	mov	ip, #3
   19cf8:	b	19d20 <__assert_fail@plt+0x8838>
   19cfc:	mov	ip, #4
   19d00:	b	19d20 <__assert_fail@plt+0x8838>
   19d04:	mov	ip, #5
   19d08:	b	19d20 <__assert_fail@plt+0x8838>
   19d0c:	mov	ip, #6
   19d10:	b	19d20 <__assert_fail@plt+0x8838>
   19d14:	mov	ip, #7
   19d18:	b	19d20 <__assert_fail@plt+0x8838>
   19d1c:	mov	ip, #8
   19d20:	add	lr, sp, #8
   19d24:	str	ip, [sp, #4]
   19d28:	str	lr, [sp]
   19d2c:	bl	198ac <__assert_fail@plt+0x83c4>
   19d30:	mov	sp, fp
   19d34:	pop	{fp, pc}
   19d38:	push	{fp, lr}
   19d3c:	mov	fp, sp
   19d40:	sub	sp, sp, #56	; 0x38
   19d44:	add	ip, fp, #8
   19d48:	str	ip, [sp, #12]
   19d4c:	ldr	lr, [fp, #8]
   19d50:	cmp	lr, #0
   19d54:	str	lr, [sp, #16]
   19d58:	beq	19df4 <__assert_fail@plt+0x890c>
   19d5c:	ldr	lr, [ip, #4]
   19d60:	cmp	lr, #0
   19d64:	str	lr, [sp, #20]
   19d68:	beq	19dfc <__assert_fail@plt+0x8914>
   19d6c:	ldr	lr, [ip, #8]
   19d70:	cmp	lr, #0
   19d74:	str	lr, [sp, #24]
   19d78:	beq	19e04 <__assert_fail@plt+0x891c>
   19d7c:	ldr	lr, [ip, #12]
   19d80:	cmp	lr, #0
   19d84:	str	lr, [sp, #28]
   19d88:	beq	19e0c <__assert_fail@plt+0x8924>
   19d8c:	ldr	lr, [ip, #16]
   19d90:	cmp	lr, #0
   19d94:	str	lr, [sp, #32]
   19d98:	beq	19e14 <__assert_fail@plt+0x892c>
   19d9c:	ldr	lr, [ip, #20]
   19da0:	cmp	lr, #0
   19da4:	str	lr, [sp, #36]	; 0x24
   19da8:	beq	19e1c <__assert_fail@plt+0x8934>
   19dac:	ldr	lr, [ip, #24]
   19db0:	cmp	lr, #0
   19db4:	str	lr, [sp, #40]	; 0x28
   19db8:	beq	19e24 <__assert_fail@plt+0x893c>
   19dbc:	ldr	lr, [ip, #28]
   19dc0:	cmp	lr, #0
   19dc4:	str	lr, [sp, #44]	; 0x2c
   19dc8:	beq	19e2c <__assert_fail@plt+0x8944>
   19dcc:	ldr	lr, [ip, #32]
   19dd0:	cmp	lr, #0
   19dd4:	str	lr, [sp, #48]	; 0x30
   19dd8:	beq	19e34 <__assert_fail@plt+0x894c>
   19ddc:	ldr	lr, [ip, #36]	; 0x24
   19de0:	mov	ip, #10
   19de4:	cmp	lr, #0
   19de8:	str	lr, [sp, #52]	; 0x34
   19dec:	movweq	ip, #9
   19df0:	b	19e38 <__assert_fail@plt+0x8950>
   19df4:	mov	ip, #0
   19df8:	b	19e38 <__assert_fail@plt+0x8950>
   19dfc:	mov	ip, #1
   19e00:	b	19e38 <__assert_fail@plt+0x8950>
   19e04:	mov	ip, #2
   19e08:	b	19e38 <__assert_fail@plt+0x8950>
   19e0c:	mov	ip, #3
   19e10:	b	19e38 <__assert_fail@plt+0x8950>
   19e14:	mov	ip, #4
   19e18:	b	19e38 <__assert_fail@plt+0x8950>
   19e1c:	mov	ip, #5
   19e20:	b	19e38 <__assert_fail@plt+0x8950>
   19e24:	mov	ip, #6
   19e28:	b	19e38 <__assert_fail@plt+0x8950>
   19e2c:	mov	ip, #7
   19e30:	b	19e38 <__assert_fail@plt+0x8950>
   19e34:	mov	ip, #8
   19e38:	add	lr, sp, #16
   19e3c:	str	ip, [sp, #4]
   19e40:	str	lr, [sp]
   19e44:	bl	198ac <__assert_fail@plt+0x83c4>
   19e48:	mov	sp, fp
   19e4c:	pop	{fp, pc}
   19e50:	push	{fp, lr}
   19e54:	mov	fp, sp
   19e58:	movw	r0, #53652	; 0xd194
   19e5c:	movt	r0, #2
   19e60:	ldr	r1, [r0]
   19e64:	movw	r0, #47535	; 0xb9af
   19e68:	movt	r0, #1
   19e6c:	bl	111dc <fputs_unlocked@plt>
   19e70:	movw	r1, #50207	; 0xc41f
   19e74:	mov	r0, #0
   19e78:	mov	r2, #5
   19e7c:	movt	r1, #1
   19e80:	bl	11278 <dcgettext@plt>
   19e84:	movw	r2, #48707	; 0xbe43
   19e88:	mov	r1, r0
   19e8c:	mov	r0, #1
   19e90:	movt	r2, #1
   19e94:	bl	113b0 <__printf_chk@plt>
   19e98:	movw	r1, #50227	; 0xc433
   19e9c:	mov	r0, #0
   19ea0:	mov	r2, #5
   19ea4:	movt	r1, #1
   19ea8:	bl	11278 <dcgettext@plt>
   19eac:	movw	r2, #46917	; 0xb745
   19eb0:	movw	r3, #47344	; 0xb8f0
   19eb4:	mov	r1, r0
   19eb8:	mov	r0, #1
   19ebc:	movt	r2, #1
   19ec0:	movt	r3, #1
   19ec4:	bl	113b0 <__printf_chk@plt>
   19ec8:	movw	r1, #50247	; 0xc447
   19ecc:	mov	r0, #0
   19ed0:	mov	r2, #5
   19ed4:	movt	r1, #1
   19ed8:	bl	11278 <dcgettext@plt>
   19edc:	movw	r2, #50286	; 0xc46e
   19ee0:	mov	r1, r0
   19ee4:	mov	r0, #1
   19ee8:	movt	r2, #1
   19eec:	pop	{fp, lr}
   19ef0:	b	113b0 <__printf_chk@plt>
   19ef4:	push	{r4, sl, fp, lr}
   19ef8:	add	fp, sp, #8
   19efc:	movw	r4, #54000	; 0xd2f0
   19f00:	movt	r4, #2
   19f04:	ldrb	r0, [r4]
   19f08:	cmp	r0, #1
   19f0c:	bne	19f20 <__assert_fail@plt+0x8a38>
   19f10:	ldrb	r0, [r4, #1]
   19f14:	cmp	r0, #0
   19f18:	movwne	r0, #1
   19f1c:	pop	{r4, sl, fp, pc}
   19f20:	bl	1129c <geteuid@plt>
   19f24:	clz	r0, r0
   19f28:	mov	r1, #1
   19f2c:	lsr	r0, r0, #5
   19f30:	strb	r1, [r4]
   19f34:	strb	r0, [r4, #1]
   19f38:	cmp	r0, #0
   19f3c:	movwne	r0, #1
   19f40:	pop	{r4, sl, fp, pc}
   19f44:	push	{r4, r5, r6, sl, fp, lr}
   19f48:	add	fp, sp, #16
   19f4c:	mov	r4, r2
   19f50:	mov	r5, r1
   19f54:	mov	r6, r0
   19f58:	bl	1ac04 <__assert_fail@plt+0x971c>
   19f5c:	cmp	r0, #0
   19f60:	popne	{r4, r5, r6, sl, fp, pc}
   19f64:	cmp	r6, #0
   19f68:	beq	19f7c <__assert_fail@plt+0x8a94>
   19f6c:	cmp	r5, #0
   19f70:	cmpne	r4, #0
   19f74:	bne	19f7c <__assert_fail@plt+0x8a94>
   19f78:	pop	{r4, r5, r6, sl, fp, pc}
   19f7c:	bl	1a51c <__assert_fail@plt+0x9034>
   19f80:	push	{r4, r5, r6, sl, fp, lr}
   19f84:	add	fp, sp, #16
   19f88:	mov	r4, r2
   19f8c:	mov	r5, r1
   19f90:	mov	r6, r0
   19f94:	bl	1ac04 <__assert_fail@plt+0x971c>
   19f98:	cmp	r0, #0
   19f9c:	popne	{r4, r5, r6, sl, fp, pc}
   19fa0:	cmp	r6, #0
   19fa4:	beq	19fb8 <__assert_fail@plt+0x8ad0>
   19fa8:	cmp	r5, #0
   19fac:	cmpne	r4, #0
   19fb0:	bne	19fb8 <__assert_fail@plt+0x8ad0>
   19fb4:	pop	{r4, r5, r6, sl, fp, pc}
   19fb8:	bl	1a51c <__assert_fail@plt+0x9034>
   19fbc:	push	{fp, lr}
   19fc0:	mov	fp, sp
   19fc4:	bl	1a6ac <__assert_fail@plt+0x91c4>
   19fc8:	cmp	r0, #0
   19fcc:	popne	{fp, pc}
   19fd0:	bl	1a51c <__assert_fail@plt+0x9034>
   19fd4:	push	{fp, lr}
   19fd8:	mov	fp, sp
   19fdc:	bl	1a6ac <__assert_fail@plt+0x91c4>
   19fe0:	cmp	r0, #0
   19fe4:	popne	{fp, pc}
   19fe8:	bl	1a51c <__assert_fail@plt+0x9034>
   19fec:	push	{fp, lr}
   19ff0:	mov	fp, sp
   19ff4:	bl	1a6ac <__assert_fail@plt+0x91c4>
   19ff8:	cmp	r0, #0
   19ffc:	popne	{fp, pc}
   1a000:	bl	1a51c <__assert_fail@plt+0x9034>
   1a004:	push	{r4, r5, fp, lr}
   1a008:	add	fp, sp, #8
   1a00c:	mov	r4, r1
   1a010:	mov	r5, r0
   1a014:	bl	1a6dc <__assert_fail@plt+0x91f4>
   1a018:	cmp	r0, #0
   1a01c:	popne	{r4, r5, fp, pc}
   1a020:	cmp	r5, #0
   1a024:	beq	1a034 <__assert_fail@plt+0x8b4c>
   1a028:	cmp	r4, #0
   1a02c:	bne	1a034 <__assert_fail@plt+0x8b4c>
   1a030:	pop	{r4, r5, fp, pc}
   1a034:	bl	1a51c <__assert_fail@plt+0x9034>
   1a038:	push	{fp, lr}
   1a03c:	mov	fp, sp
   1a040:	cmp	r1, #0
   1a044:	orreq	r1, r1, #1
   1a048:	bl	1a6dc <__assert_fail@plt+0x91f4>
   1a04c:	cmp	r0, #0
   1a050:	popne	{fp, pc}
   1a054:	bl	1a51c <__assert_fail@plt+0x9034>
   1a058:	push	{fp, lr}
   1a05c:	mov	fp, sp
   1a060:	clz	r3, r2
   1a064:	lsr	ip, r3, #5
   1a068:	clz	r3, r1
   1a06c:	lsr	r3, r3, #5
   1a070:	orrs	r3, r3, ip
   1a074:	movwne	r1, #1
   1a078:	movwne	r2, #1
   1a07c:	bl	1ac04 <__assert_fail@plt+0x971c>
   1a080:	cmp	r0, #0
   1a084:	popne	{fp, pc}
   1a088:	bl	1a51c <__assert_fail@plt+0x9034>
   1a08c:	push	{fp, lr}
   1a090:	mov	fp, sp
   1a094:	mov	r2, r1
   1a098:	mov	r1, r0
   1a09c:	mov	r0, #0
   1a0a0:	bl	1ac04 <__assert_fail@plt+0x971c>
   1a0a4:	cmp	r0, #0
   1a0a8:	popne	{fp, pc}
   1a0ac:	bl	1a51c <__assert_fail@plt+0x9034>
   1a0b0:	push	{fp, lr}
   1a0b4:	mov	fp, sp
   1a0b8:	mov	r2, r1
   1a0bc:	mov	r1, r0
   1a0c0:	clz	r0, r2
   1a0c4:	clz	r3, r1
   1a0c8:	lsr	r0, r0, #5
   1a0cc:	lsr	r3, r3, #5
   1a0d0:	orrs	r0, r3, r0
   1a0d4:	movwne	r1, #1
   1a0d8:	movwne	r2, #1
   1a0dc:	mov	r0, #0
   1a0e0:	bl	1ac04 <__assert_fail@plt+0x971c>
   1a0e4:	cmp	r0, #0
   1a0e8:	popne	{fp, pc}
   1a0ec:	bl	1a51c <__assert_fail@plt+0x9034>
   1a0f0:	push	{r4, r5, r6, sl, fp, lr}
   1a0f4:	add	fp, sp, #16
   1a0f8:	ldr	r5, [r1]
   1a0fc:	mov	r4, r1
   1a100:	mov	r6, r0
   1a104:	cmp	r0, #0
   1a108:	beq	1a120 <__assert_fail@plt+0x8c38>
   1a10c:	mov	r0, #1
   1a110:	add	r0, r0, r5, lsr #1
   1a114:	adds	r5, r5, r0
   1a118:	bcc	1a128 <__assert_fail@plt+0x8c40>
   1a11c:	b	1a164 <__assert_fail@plt+0x8c7c>
   1a120:	cmp	r5, #0
   1a124:	movweq	r5, #64	; 0x40
   1a128:	mov	r0, r6
   1a12c:	mov	r1, r5
   1a130:	mov	r2, #1
   1a134:	bl	1ac04 <__assert_fail@plt+0x971c>
   1a138:	cmp	r5, #0
   1a13c:	mov	r1, r5
   1a140:	movwne	r1, #1
   1a144:	cmp	r0, #0
   1a148:	bne	1a15c <__assert_fail@plt+0x8c74>
   1a14c:	clz	r2, r6
   1a150:	lsr	r2, r2, #5
   1a154:	orrs	r1, r2, r1
   1a158:	bne	1a164 <__assert_fail@plt+0x8c7c>
   1a15c:	str	r5, [r4]
   1a160:	pop	{r4, r5, r6, sl, fp, pc}
   1a164:	bl	1a51c <__assert_fail@plt+0x9034>
   1a168:	push	{r4, r5, r6, r7, fp, lr}
   1a16c:	add	fp, sp, #16
   1a170:	ldr	r5, [r1]
   1a174:	mov	r6, r2
   1a178:	mov	r4, r1
   1a17c:	mov	r7, r0
   1a180:	cmp	r0, #0
   1a184:	beq	1a19c <__assert_fail@plt+0x8cb4>
   1a188:	mov	r0, #1
   1a18c:	add	r0, r0, r5, lsr #1
   1a190:	adds	r5, r5, r0
   1a194:	bcc	1a1b4 <__assert_fail@plt+0x8ccc>
   1a198:	b	1a1e8 <__assert_fail@plt+0x8d00>
   1a19c:	cmp	r5, #0
   1a1a0:	bne	1a1b4 <__assert_fail@plt+0x8ccc>
   1a1a4:	mov	r0, #64	; 0x40
   1a1a8:	cmp	r6, #64	; 0x40
   1a1ac:	udiv	r5, r0, r6
   1a1b0:	addhi	r5, r5, #1
   1a1b4:	mov	r0, r7
   1a1b8:	mov	r1, r5
   1a1bc:	mov	r2, r6
   1a1c0:	bl	1ac04 <__assert_fail@plt+0x971c>
   1a1c4:	cmp	r0, #0
   1a1c8:	bne	1a1e0 <__assert_fail@plt+0x8cf8>
   1a1cc:	cmp	r7, #0
   1a1d0:	beq	1a1e8 <__assert_fail@plt+0x8d00>
   1a1d4:	cmp	r6, #0
   1a1d8:	cmpne	r5, #0
   1a1dc:	bne	1a1e8 <__assert_fail@plt+0x8d00>
   1a1e0:	str	r5, [r4]
   1a1e4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1e8:	bl	1a51c <__assert_fail@plt+0x9034>
   1a1ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a1f0:	add	fp, sp, #24
   1a1f4:	mov	r8, r1
   1a1f8:	ldr	r1, [r1]
   1a1fc:	mov	r5, r0
   1a200:	add	r0, r1, r1, asr #1
   1a204:	cmp	r0, r1
   1a208:	mvnvs	r0, #-2147483648	; 0x80000000
   1a20c:	cmp	r0, r3
   1a210:	mov	r7, r0
   1a214:	movgt	r7, r3
   1a218:	cmn	r3, #1
   1a21c:	movle	r7, r0
   1a220:	ldr	r0, [fp, #8]
   1a224:	cmn	r0, #1
   1a228:	ble	1a250 <__assert_fail@plt+0x8d68>
   1a22c:	cmp	r0, #0
   1a230:	beq	1a2a4 <__assert_fail@plt+0x8dbc>
   1a234:	cmn	r7, #1
   1a238:	ble	1a278 <__assert_fail@plt+0x8d90>
   1a23c:	mvn	r4, #-2147483648	; 0x80000000
   1a240:	udiv	r6, r4, r0
   1a244:	cmp	r6, r7
   1a248:	bge	1a2a4 <__assert_fail@plt+0x8dbc>
   1a24c:	b	1a2b4 <__assert_fail@plt+0x8dcc>
   1a250:	cmn	r7, #1
   1a254:	ble	1a294 <__assert_fail@plt+0x8dac>
   1a258:	cmn	r0, #1
   1a25c:	beq	1a2a4 <__assert_fail@plt+0x8dbc>
   1a260:	mov	r6, #-2147483648	; 0x80000000
   1a264:	mvn	r4, #-2147483648	; 0x80000000
   1a268:	sdiv	r6, r6, r0
   1a26c:	cmp	r6, r7
   1a270:	bge	1a2a4 <__assert_fail@plt+0x8dbc>
   1a274:	b	1a2b4 <__assert_fail@plt+0x8dcc>
   1a278:	beq	1a2a4 <__assert_fail@plt+0x8dbc>
   1a27c:	mov	r6, #-2147483648	; 0x80000000
   1a280:	mvn	r4, #-2147483648	; 0x80000000
   1a284:	sdiv	r6, r6, r7
   1a288:	cmp	r6, r0
   1a28c:	bge	1a2a4 <__assert_fail@plt+0x8dbc>
   1a290:	b	1a2b4 <__assert_fail@plt+0x8dcc>
   1a294:	mvn	r4, #-2147483648	; 0x80000000
   1a298:	sdiv	r6, r4, r0
   1a29c:	cmp	r7, r6
   1a2a0:	blt	1a2b4 <__assert_fail@plt+0x8dcc>
   1a2a4:	mul	r6, r7, r0
   1a2a8:	mov	r4, #64	; 0x40
   1a2ac:	cmp	r6, #63	; 0x3f
   1a2b0:	bgt	1a2bc <__assert_fail@plt+0x8dd4>
   1a2b4:	sdiv	r7, r4, r0
   1a2b8:	mul	r6, r7, r0
   1a2bc:	cmp	r5, #0
   1a2c0:	moveq	r4, #0
   1a2c4:	streq	r4, [r8]
   1a2c8:	sub	r4, r7, r1
   1a2cc:	cmp	r4, r2
   1a2d0:	bge	1a37c <__assert_fail@plt+0x8e94>
   1a2d4:	add	r7, r1, r2
   1a2d8:	mov	r6, #0
   1a2dc:	mov	r2, #0
   1a2e0:	cmp	r7, r3
   1a2e4:	movwgt	r6, #1
   1a2e8:	cmn	r3, #1
   1a2ec:	movwgt	r2, #1
   1a2f0:	cmp	r7, r1
   1a2f4:	bvs	1a3b0 <__assert_fail@plt+0x8ec8>
   1a2f8:	ands	r1, r2, r6
   1a2fc:	bne	1a3b0 <__assert_fail@plt+0x8ec8>
   1a300:	cmn	r0, #1
   1a304:	ble	1a32c <__assert_fail@plt+0x8e44>
   1a308:	cmp	r0, #0
   1a30c:	beq	1a378 <__assert_fail@plt+0x8e90>
   1a310:	cmn	r7, #1
   1a314:	ble	1a350 <__assert_fail@plt+0x8e68>
   1a318:	mvn	r1, #-2147483648	; 0x80000000
   1a31c:	udiv	r1, r1, r0
   1a320:	cmp	r1, r7
   1a324:	bge	1a378 <__assert_fail@plt+0x8e90>
   1a328:	b	1a3b0 <__assert_fail@plt+0x8ec8>
   1a32c:	cmn	r7, #1
   1a330:	ble	1a368 <__assert_fail@plt+0x8e80>
   1a334:	cmn	r0, #1
   1a338:	beq	1a378 <__assert_fail@plt+0x8e90>
   1a33c:	mov	r1, #-2147483648	; 0x80000000
   1a340:	sdiv	r1, r1, r0
   1a344:	cmp	r1, r7
   1a348:	bge	1a378 <__assert_fail@plt+0x8e90>
   1a34c:	b	1a3b0 <__assert_fail@plt+0x8ec8>
   1a350:	beq	1a378 <__assert_fail@plt+0x8e90>
   1a354:	mov	r1, #-2147483648	; 0x80000000
   1a358:	sdiv	r1, r1, r7
   1a35c:	cmp	r1, r0
   1a360:	bge	1a378 <__assert_fail@plt+0x8e90>
   1a364:	b	1a3b0 <__assert_fail@plt+0x8ec8>
   1a368:	mvn	r1, #-2147483648	; 0x80000000
   1a36c:	sdiv	r1, r1, r0
   1a370:	cmp	r7, r1
   1a374:	blt	1a3b0 <__assert_fail@plt+0x8ec8>
   1a378:	mul	r6, r7, r0
   1a37c:	mov	r0, r5
   1a380:	mov	r1, r6
   1a384:	bl	1a6dc <__assert_fail@plt+0x91f4>
   1a388:	cmp	r6, #0
   1a38c:	movwne	r6, #1
   1a390:	cmp	r0, #0
   1a394:	bne	1a3a8 <__assert_fail@plt+0x8ec0>
   1a398:	clz	r1, r5
   1a39c:	lsr	r1, r1, #5
   1a3a0:	orrs	r1, r1, r6
   1a3a4:	bne	1a3b0 <__assert_fail@plt+0x8ec8>
   1a3a8:	str	r7, [r8]
   1a3ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a3b0:	bl	1a51c <__assert_fail@plt+0x9034>
   1a3b4:	push	{fp, lr}
   1a3b8:	mov	fp, sp
   1a3bc:	mov	r1, #1
   1a3c0:	bl	1a658 <__assert_fail@plt+0x9170>
   1a3c4:	cmp	r0, #0
   1a3c8:	popne	{fp, pc}
   1a3cc:	bl	1a51c <__assert_fail@plt+0x9034>
   1a3d0:	push	{fp, lr}
   1a3d4:	mov	fp, sp
   1a3d8:	bl	1a658 <__assert_fail@plt+0x9170>
   1a3dc:	cmp	r0, #0
   1a3e0:	popne	{fp, pc}
   1a3e4:	bl	1a51c <__assert_fail@plt+0x9034>
   1a3e8:	push	{fp, lr}
   1a3ec:	mov	fp, sp
   1a3f0:	mov	r1, #1
   1a3f4:	bl	1a658 <__assert_fail@plt+0x9170>
   1a3f8:	cmp	r0, #0
   1a3fc:	popne	{fp, pc}
   1a400:	bl	1a51c <__assert_fail@plt+0x9034>
   1a404:	push	{fp, lr}
   1a408:	mov	fp, sp
   1a40c:	bl	1a658 <__assert_fail@plt+0x9170>
   1a410:	cmp	r0, #0
   1a414:	popne	{fp, pc}
   1a418:	bl	1a51c <__assert_fail@plt+0x9034>
   1a41c:	push	{r4, r5, r6, sl, fp, lr}
   1a420:	add	fp, sp, #16
   1a424:	mov	r5, r0
   1a428:	mov	r0, r1
   1a42c:	mov	r4, r1
   1a430:	bl	1a6ac <__assert_fail@plt+0x91c4>
   1a434:	cmp	r0, #0
   1a438:	beq	1a454 <__assert_fail@plt+0x8f6c>
   1a43c:	mov	r1, r5
   1a440:	mov	r2, r4
   1a444:	mov	r6, r0
   1a448:	bl	11254 <memcpy@plt>
   1a44c:	mov	r0, r6
   1a450:	pop	{r4, r5, r6, sl, fp, pc}
   1a454:	bl	1a51c <__assert_fail@plt+0x9034>
   1a458:	push	{r4, r5, r6, sl, fp, lr}
   1a45c:	add	fp, sp, #16
   1a460:	mov	r5, r0
   1a464:	mov	r0, r1
   1a468:	mov	r4, r1
   1a46c:	bl	1a6ac <__assert_fail@plt+0x91c4>
   1a470:	cmp	r0, #0
   1a474:	beq	1a490 <__assert_fail@plt+0x8fa8>
   1a478:	mov	r1, r5
   1a47c:	mov	r2, r4
   1a480:	mov	r6, r0
   1a484:	bl	11254 <memcpy@plt>
   1a488:	mov	r0, r6
   1a48c:	pop	{r4, r5, r6, sl, fp, pc}
   1a490:	bl	1a51c <__assert_fail@plt+0x9034>
   1a494:	push	{r4, r5, r6, sl, fp, lr}
   1a498:	add	fp, sp, #16
   1a49c:	mov	r5, r0
   1a4a0:	add	r0, r1, #1
   1a4a4:	mov	r4, r1
   1a4a8:	bl	1a6ac <__assert_fail@plt+0x91c4>
   1a4ac:	cmp	r0, #0
   1a4b0:	beq	1a4d8 <__assert_fail@plt+0x8ff0>
   1a4b4:	mov	r6, r0
   1a4b8:	mov	r0, #0
   1a4bc:	mov	r1, r5
   1a4c0:	mov	r2, r4
   1a4c4:	strb	r0, [r6, r4]
   1a4c8:	mov	r0, r6
   1a4cc:	bl	11254 <memcpy@plt>
   1a4d0:	mov	r0, r6
   1a4d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a4d8:	bl	1a51c <__assert_fail@plt+0x9034>
   1a4dc:	push	{r4, r5, r6, sl, fp, lr}
   1a4e0:	add	fp, sp, #16
   1a4e4:	mov	r4, r0
   1a4e8:	bl	11374 <strlen@plt>
   1a4ec:	add	r5, r0, #1
   1a4f0:	mov	r0, r5
   1a4f4:	bl	1a6ac <__assert_fail@plt+0x91c4>
   1a4f8:	cmp	r0, #0
   1a4fc:	beq	1a518 <__assert_fail@plt+0x9030>
   1a500:	mov	r1, r4
   1a504:	mov	r2, r5
   1a508:	mov	r6, r0
   1a50c:	bl	11254 <memcpy@plt>
   1a510:	mov	r0, r6
   1a514:	pop	{r4, r5, r6, sl, fp, pc}
   1a518:	bl	1a51c <__assert_fail@plt+0x9034>
   1a51c:	push	{fp, lr}
   1a520:	mov	fp, sp
   1a524:	movw	r0, #53552	; 0xd130
   1a528:	movw	r1, #50362	; 0xc4ba
   1a52c:	mov	r2, #5
   1a530:	movt	r0, #2
   1a534:	movt	r1, #1
   1a538:	ldr	r4, [r0]
   1a53c:	mov	r0, #0
   1a540:	bl	11278 <dcgettext@plt>
   1a544:	movw	r2, #48999	; 0xbf67
   1a548:	mov	r3, r0
   1a54c:	mov	r0, r4
   1a550:	mov	r1, #0
   1a554:	movt	r2, #1
   1a558:	bl	11308 <error@plt>
   1a55c:	bl	114a0 <abort@plt>
   1a560:	push	{fp, lr}
   1a564:	mov	fp, sp
   1a568:	orr	r1, r1, #512	; 0x200
   1a56c:	bl	13b98 <__assert_fail@plt+0x26b0>
   1a570:	cmp	r0, #0
   1a574:	popne	{fp, pc}
   1a578:	bl	1138c <__errno_location@plt>
   1a57c:	ldr	r0, [r0]
   1a580:	cmp	r0, #22
   1a584:	bne	1a5a8 <__assert_fail@plt+0x90c0>
   1a588:	movw	r0, #50379	; 0xc4cb
   1a58c:	movw	r1, #50395	; 0xc4db
   1a590:	movw	r3, #50406	; 0xc4e6
   1a594:	mov	r2, #41	; 0x29
   1a598:	movt	r0, #1
   1a59c:	movt	r1, #1
   1a5a0:	movt	r3, #1
   1a5a4:	bl	114e8 <__assert_fail@plt>
   1a5a8:	bl	1a51c <__assert_fail@plt+0x9034>
   1a5ac:	ldr	r0, [r0, #48]	; 0x30
   1a5b0:	and	r0, r0, #17
   1a5b4:	cmp	r0, #16
   1a5b8:	moveq	r0, #1
   1a5bc:	bxeq	lr
   1a5c0:	cmp	r0, #17
   1a5c4:	movne	r0, #0
   1a5c8:	bxne	lr
   1a5cc:	ldr	r0, [r1, #48]	; 0x30
   1a5d0:	cmp	r0, #0
   1a5d4:	movwne	r0, #1
   1a5d8:	bx	lr
   1a5dc:	push	{r4, sl, fp, lr}
   1a5e0:	add	fp, sp, #8
   1a5e4:	sub	sp, sp, #8
   1a5e8:	movw	r0, #53648	; 0xd190
   1a5ec:	mov	r4, #0
   1a5f0:	mov	r1, sp
   1a5f4:	mov	r2, #10
   1a5f8:	movt	r0, #2
   1a5fc:	str	r4, [sp, #4]
   1a600:	str	r4, [sp]
   1a604:	ldr	r3, [r0]
   1a608:	add	r0, sp, #4
   1a60c:	bl	111f4 <__getdelim@plt>
   1a610:	cmp	r0, #1
   1a614:	blt	1a644 <__assert_fail@plt+0x915c>
   1a618:	sub	r1, r0, #1
   1a61c:	ldr	r0, [sp, #4]
   1a620:	ldrb	r2, [r0, r1]
   1a624:	cmp	r2, #10
   1a628:	moveq	r2, #0
   1a62c:	strbeq	r2, [r0, r1]
   1a630:	ldreq	r0, [sp, #4]
   1a634:	bl	113f8 <rpmatch@plt>
   1a638:	mov	r4, #0
   1a63c:	cmp	r0, #0
   1a640:	movwgt	r4, #1
   1a644:	ldr	r0, [sp, #4]
   1a648:	bl	13acc <__assert_fail@plt+0x25e4>
   1a64c:	mov	r0, r4
   1a650:	sub	sp, fp, #8
   1a654:	pop	{r4, sl, fp, pc}
   1a658:	clz	r2, r1
   1a65c:	clz	r3, r0
   1a660:	lsr	r2, r2, #5
   1a664:	lsr	r3, r3, #5
   1a668:	orrs	r2, r3, r2
   1a66c:	movwne	r1, #1
   1a670:	movwne	r0, #1
   1a674:	cmp	r1, #0
   1a678:	beq	1a6a8 <__assert_fail@plt+0x91c0>
   1a67c:	mvn	r2, #-2147483648	; 0x80000000
   1a680:	udiv	r2, r2, r1
   1a684:	cmp	r2, r0
   1a688:	bcs	1a6a8 <__assert_fail@plt+0x91c0>
   1a68c:	push	{fp, lr}
   1a690:	mov	fp, sp
   1a694:	bl	1138c <__errno_location@plt>
   1a698:	mov	r1, #12
   1a69c:	str	r1, [r0]
   1a6a0:	mov	r0, #0
   1a6a4:	pop	{fp, pc}
   1a6a8:	b	111d0 <calloc@plt>
   1a6ac:	cmp	r0, #0
   1a6b0:	movweq	r0, #1
   1a6b4:	cmn	r0, #1
   1a6b8:	ble	1a6c0 <__assert_fail@plt+0x91d8>
   1a6bc:	b	11320 <malloc@plt>
   1a6c0:	push	{fp, lr}
   1a6c4:	mov	fp, sp
   1a6c8:	bl	1138c <__errno_location@plt>
   1a6cc:	mov	r1, #12
   1a6d0:	str	r1, [r0]
   1a6d4:	mov	r0, #0
   1a6d8:	pop	{fp, pc}
   1a6dc:	push	{fp, lr}
   1a6e0:	mov	fp, sp
   1a6e4:	cmp	r0, #0
   1a6e8:	beq	1a704 <__assert_fail@plt+0x921c>
   1a6ec:	cmp	r1, #0
   1a6f0:	beq	1a710 <__assert_fail@plt+0x9228>
   1a6f4:	cmn	r1, #1
   1a6f8:	ble	1a71c <__assert_fail@plt+0x9234>
   1a6fc:	pop	{fp, lr}
   1a700:	b	11284 <realloc@plt>
   1a704:	mov	r0, r1
   1a708:	pop	{fp, lr}
   1a70c:	b	1a6ac <__assert_fail@plt+0x91c4>
   1a710:	bl	13acc <__assert_fail@plt+0x25e4>
   1a714:	mov	r0, #0
   1a718:	pop	{fp, pc}
   1a71c:	bl	1138c <__errno_location@plt>
   1a720:	mov	r1, #12
   1a724:	str	r1, [r0]
   1a728:	mov	r0, #0
   1a72c:	pop	{fp, pc}
   1a730:	push	{r4, r5, r6, sl, fp, lr}
   1a734:	add	fp, sp, #16
   1a738:	mov	r4, r0
   1a73c:	bl	112f0 <__fpending@plt>
   1a740:	ldr	r6, [r4]
   1a744:	mov	r5, r0
   1a748:	mov	r0, r4
   1a74c:	bl	1a8a8 <__assert_fail@plt+0x93c0>
   1a750:	tst	r6, #32
   1a754:	bne	1a78c <__assert_fail@plt+0x92a4>
   1a758:	cmp	r0, #0
   1a75c:	mov	r4, r0
   1a760:	mvnne	r4, #0
   1a764:	cmp	r5, #0
   1a768:	bne	1a798 <__assert_fail@plt+0x92b0>
   1a76c:	cmp	r0, #0
   1a770:	beq	1a798 <__assert_fail@plt+0x92b0>
   1a774:	bl	1138c <__errno_location@plt>
   1a778:	ldr	r0, [r0]
   1a77c:	subs	r4, r0, #9
   1a780:	mvnne	r4, #0
   1a784:	mov	r0, r4
   1a788:	pop	{r4, r5, r6, sl, fp, pc}
   1a78c:	mvn	r4, #0
   1a790:	cmp	r0, #0
   1a794:	beq	1a7a0 <__assert_fail@plt+0x92b8>
   1a798:	mov	r0, r4
   1a79c:	pop	{r4, r5, r6, sl, fp, pc}
   1a7a0:	bl	1138c <__errno_location@plt>
   1a7a4:	mov	r1, #0
   1a7a8:	str	r1, [r0]
   1a7ac:	mov	r0, r4
   1a7b0:	pop	{r4, r5, r6, sl, fp, pc}
   1a7b4:	movw	r2, #62998	; 0xf616
   1a7b8:	mov	r1, #0
   1a7bc:	movt	r2, #149	; 0x95
   1a7c0:	str	r1, [r0, #16]
   1a7c4:	str	r1, [r0, #20]
   1a7c8:	str	r2, [r0, #24]
   1a7cc:	bx	lr
   1a7d0:	push	{r4, r5, r6, r7, fp, lr}
   1a7d4:	add	fp, sp, #16
   1a7d8:	ldr	r2, [r0, #24]
   1a7dc:	movw	r3, #62998	; 0xf616
   1a7e0:	movt	r3, #149	; 0x95
   1a7e4:	cmp	r2, r3
   1a7e8:	bne	1a888 <__assert_fail@plt+0x93a0>
   1a7ec:	mov	r3, r0
   1a7f0:	ldr	r2, [r3, #16]!
   1a7f4:	ldr	lr, [r3, #4]
   1a7f8:	orrs	r5, r2, lr
   1a7fc:	beq	1a834 <__assert_fail@plt+0x934c>
   1a800:	ldrd	r4, [r0]
   1a804:	ldrd	r6, [r1, #96]	; 0x60
   1a808:	eor	r7, r7, r5
   1a80c:	eor	r6, r6, r4
   1a810:	orrs	r7, r6, r7
   1a814:	bne	1a834 <__assert_fail@plt+0x934c>
   1a818:	ldrd	r4, [r0, #8]
   1a81c:	ldrd	r6, [r1]
   1a820:	mov	ip, #1
   1a824:	eor	r7, r7, r5
   1a828:	eor	r6, r6, r4
   1a82c:	orrs	r7, r6, r7
   1a830:	beq	1a854 <__assert_fail@plt+0x936c>
   1a834:	adds	r4, r2, #1
   1a838:	mov	ip, #0
   1a83c:	adc	r5, lr, #0
   1a840:	and	r2, r4, r2
   1a844:	strd	r4, [r3]
   1a848:	and	r3, r5, lr
   1a84c:	orrs	r2, r2, r3
   1a850:	beq	1a85c <__assert_fail@plt+0x9374>
   1a854:	mov	r0, ip
   1a858:	pop	{r4, r5, r6, r7, fp, pc}
   1a85c:	orrs	r2, r4, r5
   1a860:	moveq	ip, #1
   1a864:	moveq	r0, ip
   1a868:	popeq	{r4, r5, r6, r7, fp, pc}
   1a86c:	ldrd	r2, [r1]
   1a870:	str	r3, [r0, #12]
   1a874:	str	r2, [r0, #8]
   1a878:	ldrd	r2, [r1, #96]	; 0x60
   1a87c:	stm	r0, {r2, r3}
   1a880:	mov	r0, ip
   1a884:	pop	{r4, r5, r6, r7, fp, pc}
   1a888:	movw	r0, #50484	; 0xc534
   1a88c:	movw	r1, #50508	; 0xc54c
   1a890:	movw	r3, #50526	; 0xc55e
   1a894:	mov	r2, #60	; 0x3c
   1a898:	movt	r0, #1
   1a89c:	movt	r1, #1
   1a8a0:	movt	r3, #1
   1a8a4:	bl	114e8 <__assert_fail@plt>
   1a8a8:	push	{r4, r5, r6, sl, fp, lr}
   1a8ac:	add	fp, sp, #16
   1a8b0:	sub	sp, sp, #8
   1a8b4:	mov	r4, r0
   1a8b8:	bl	113bc <fileno@plt>
   1a8bc:	cmn	r0, #1
   1a8c0:	ble	1a934 <__assert_fail@plt+0x944c>
   1a8c4:	mov	r0, r4
   1a8c8:	bl	11338 <__freading@plt>
   1a8cc:	cmp	r0, #0
   1a8d0:	beq	1a8fc <__assert_fail@plt+0x9414>
   1a8d4:	mov	r0, r4
   1a8d8:	bl	113bc <fileno@plt>
   1a8dc:	mov	r1, #1
   1a8e0:	mov	r2, #0
   1a8e4:	mov	r3, #0
   1a8e8:	str	r1, [sp]
   1a8ec:	bl	112d8 <lseek64@plt>
   1a8f0:	and	r0, r0, r1
   1a8f4:	cmn	r0, #1
   1a8f8:	beq	1a934 <__assert_fail@plt+0x944c>
   1a8fc:	mov	r0, r4
   1a900:	bl	13838 <__assert_fail@plt+0x2350>
   1a904:	cmp	r0, #0
   1a908:	beq	1a934 <__assert_fail@plt+0x944c>
   1a90c:	bl	1138c <__errno_location@plt>
   1a910:	ldr	r6, [r0]
   1a914:	mov	r5, r0
   1a918:	mov	r0, r4
   1a91c:	bl	113d4 <fclose@plt>
   1a920:	cmp	r6, #0
   1a924:	strne	r6, [r5]
   1a928:	mvnne	r0, #0
   1a92c:	sub	sp, fp, #16
   1a930:	pop	{r4, r5, r6, sl, fp, pc}
   1a934:	mov	r0, r4
   1a938:	sub	sp, fp, #16
   1a93c:	pop	{r4, r5, r6, sl, fp, lr}
   1a940:	b	113d4 <fclose@plt>
   1a944:	sub	sp, sp, #8
   1a948:	push	{r4, r5, r6, r7, fp, lr}
   1a94c:	add	fp, sp, #16
   1a950:	sub	sp, sp, #8
   1a954:	mov	r5, r0
   1a958:	add	r0, fp, #8
   1a95c:	cmp	r1, #11
   1a960:	str	r3, [fp, #12]
   1a964:	str	r2, [fp, #8]
   1a968:	str	r0, [sp, #4]
   1a96c:	bhi	1a9a8 <__assert_fail@plt+0x94c0>
   1a970:	mov	r0, #1
   1a974:	movw	r2, #1300	; 0x514
   1a978:	tst	r2, r0, lsl r1
   1a97c:	bne	1aa68 <__assert_fail@plt+0x9580>
   1a980:	movw	r2, #2570	; 0xa0a
   1a984:	tst	r2, r0, lsl r1
   1a988:	bne	1a9d0 <__assert_fail@plt+0x94e8>
   1a98c:	cmp	r1, #0
   1a990:	bne	1a9a8 <__assert_fail@plt+0x94c0>
   1a994:	ldr	r0, [sp, #4]
   1a998:	add	r1, r0, #4
   1a99c:	str	r1, [sp, #4]
   1a9a0:	mov	r1, #0
   1a9a4:	b	1aa74 <__assert_fail@plt+0x958c>
   1a9a8:	sub	r0, r1, #1024	; 0x400
   1a9ac:	cmp	r0, #10
   1a9b0:	bhi	1aa68 <__assert_fail@plt+0x9580>
   1a9b4:	mov	r2, #1
   1a9b8:	movw	r3, #645	; 0x285
   1a9bc:	tst	r3, r2, lsl r0
   1a9c0:	bne	1aa68 <__assert_fail@plt+0x9580>
   1a9c4:	movw	r3, #1282	; 0x502
   1a9c8:	tst	r3, r2, lsl r0
   1a9cc:	beq	1a9dc <__assert_fail@plt+0x94f4>
   1a9d0:	mov	r0, r5
   1a9d4:	bl	113ec <fcntl64@plt>
   1a9d8:	b	1aa80 <__assert_fail@plt+0x9598>
   1a9dc:	cmp	r0, #6
   1a9e0:	bne	1aa68 <__assert_fail@plt+0x9580>
   1a9e4:	ldr	r0, [sp, #4]
   1a9e8:	movw	r7, #54004	; 0xd2f4
   1a9ec:	movt	r7, #2
   1a9f0:	add	r1, r0, #4
   1a9f4:	str	r1, [sp, #4]
   1a9f8:	ldr	r6, [r0]
   1a9fc:	ldr	r0, [r7]
   1aa00:	cmp	r0, #0
   1aa04:	blt	1aaa4 <__assert_fail@plt+0x95bc>
   1aa08:	mov	r0, r5
   1aa0c:	movw	r1, #1030	; 0x406
   1aa10:	mov	r2, r6
   1aa14:	bl	113ec <fcntl64@plt>
   1aa18:	mov	r4, r0
   1aa1c:	cmn	r0, #1
   1aa20:	bgt	1aa98 <__assert_fail@plt+0x95b0>
   1aa24:	bl	1138c <__errno_location@plt>
   1aa28:	ldr	r0, [r0]
   1aa2c:	cmp	r0, #22
   1aa30:	bne	1aa98 <__assert_fail@plt+0x95b0>
   1aa34:	mov	r0, r5
   1aa38:	mov	r1, #0
   1aa3c:	mov	r2, r6
   1aa40:	bl	113ec <fcntl64@plt>
   1aa44:	mov	r4, r0
   1aa48:	cmp	r0, #0
   1aa4c:	blt	1aa84 <__assert_fail@plt+0x959c>
   1aa50:	mvn	r0, #0
   1aa54:	str	r0, [r7]
   1aa58:	mov	r0, #1
   1aa5c:	cmp	r0, #0
   1aa60:	bne	1aad0 <__assert_fail@plt+0x95e8>
   1aa64:	b	1aa84 <__assert_fail@plt+0x959c>
   1aa68:	ldr	r0, [sp, #4]
   1aa6c:	add	r2, r0, #4
   1aa70:	str	r2, [sp, #4]
   1aa74:	ldr	r2, [r0]
   1aa78:	mov	r0, r5
   1aa7c:	bl	113ec <fcntl64@plt>
   1aa80:	mov	r4, r0
   1aa84:	mov	r0, r4
   1aa88:	sub	sp, fp, #16
   1aa8c:	pop	{r4, r5, r6, r7, fp, lr}
   1aa90:	add	sp, sp, #8
   1aa94:	bx	lr
   1aa98:	mov	r0, #1
   1aa9c:	str	r0, [r7]
   1aaa0:	b	1aa84 <__assert_fail@plt+0x959c>
   1aaa4:	mov	r0, r5
   1aaa8:	mov	r1, #0
   1aaac:	mov	r2, r6
   1aab0:	bl	113ec <fcntl64@plt>
   1aab4:	mov	r4, r0
   1aab8:	ldr	r0, [r7]
   1aabc:	add	r0, r0, #1
   1aac0:	clz	r0, r0
   1aac4:	lsr	r0, r0, #5
   1aac8:	cmp	r0, #0
   1aacc:	beq	1aa84 <__assert_fail@plt+0x959c>
   1aad0:	cmp	r4, #0
   1aad4:	blt	1aa84 <__assert_fail@plt+0x959c>
   1aad8:	mov	r0, r4
   1aadc:	mov	r1, #1
   1aae0:	bl	113ec <fcntl64@plt>
   1aae4:	cmp	r0, #0
   1aae8:	blt	1ab04 <__assert_fail@plt+0x961c>
   1aaec:	orr	r2, r0, #1
   1aaf0:	mov	r0, r4
   1aaf4:	mov	r1, #2
   1aaf8:	bl	113ec <fcntl64@plt>
   1aafc:	cmn	r0, #1
   1ab00:	bne	1aa84 <__assert_fail@plt+0x959c>
   1ab04:	bl	1138c <__errno_location@plt>
   1ab08:	ldr	r6, [r0]
   1ab0c:	mov	r5, r0
   1ab10:	mov	r0, r4
   1ab14:	bl	114ac <close@plt>
   1ab18:	str	r6, [r5]
   1ab1c:	mvn	r4, #0
   1ab20:	b	1aa84 <__assert_fail@plt+0x959c>
   1ab24:	sub	sp, sp, #8
   1ab28:	push	{fp, lr}
   1ab2c:	mov	fp, sp
   1ab30:	sub	sp, sp, #8
   1ab34:	str	r2, [fp, #8]
   1ab38:	mov	r2, #0
   1ab3c:	tst	r1, #64	; 0x40
   1ab40:	str	r3, [fp, #12]
   1ab44:	addne	r2, fp, #8
   1ab48:	orrne	r2, r2, #4
   1ab4c:	strne	r2, [sp, #4]
   1ab50:	ldrne	r2, [fp, #8]
   1ab54:	bl	11314 <open64@plt>
   1ab58:	bl	19868 <__assert_fail@plt+0x8380>
   1ab5c:	mov	sp, fp
   1ab60:	pop	{fp, lr}
   1ab64:	add	sp, sp, #8
   1ab68:	bx	lr
   1ab6c:	push	{fp, lr}
   1ab70:	mov	fp, sp
   1ab74:	mov	r0, #14
   1ab78:	bl	11428 <nl_langinfo@plt>
   1ab7c:	movw	r1, #47536	; 0xb9b0
   1ab80:	cmp	r0, #0
   1ab84:	movt	r1, #1
   1ab88:	movne	r1, r0
   1ab8c:	movw	r0, #50593	; 0xc5a1
   1ab90:	ldrb	r2, [r1]
   1ab94:	movt	r0, #1
   1ab98:	cmp	r2, #0
   1ab9c:	movne	r0, r1
   1aba0:	pop	{fp, pc}
   1aba4:	push	{r4, r5, r6, r7, fp, lr}
   1aba8:	add	fp, sp, #16
   1abac:	sub	sp, sp, #8
   1abb0:	add	r5, sp, #4
   1abb4:	cmp	r0, #0
   1abb8:	mov	r7, r2
   1abbc:	mov	r4, r1
   1abc0:	movne	r5, r0
   1abc4:	mov	r0, r5
   1abc8:	bl	112fc <mbrtowc@plt>
   1abcc:	mov	r6, r0
   1abd0:	cmp	r7, #0
   1abd4:	beq	1abf8 <__assert_fail@plt+0x9710>
   1abd8:	cmn	r6, #2
   1abdc:	bcc	1abf8 <__assert_fail@plt+0x9710>
   1abe0:	mov	r0, #0
   1abe4:	bl	1ac4c <__assert_fail@plt+0x9764>
   1abe8:	cmp	r0, #0
   1abec:	ldrbeq	r0, [r4]
   1abf0:	moveq	r6, #1
   1abf4:	streq	r0, [r5]
   1abf8:	mov	r0, r6
   1abfc:	sub	sp, fp, #16
   1ac00:	pop	{r4, r5, r6, r7, fp, pc}
   1ac04:	cmp	r2, #0
   1ac08:	beq	1ac38 <__assert_fail@plt+0x9750>
   1ac0c:	mvn	r3, #0
   1ac10:	udiv	r3, r3, r2
   1ac14:	cmp	r3, r1
   1ac18:	bcs	1ac38 <__assert_fail@plt+0x9750>
   1ac1c:	push	{fp, lr}
   1ac20:	mov	fp, sp
   1ac24:	bl	1138c <__errno_location@plt>
   1ac28:	mov	r1, #12
   1ac2c:	str	r1, [r0]
   1ac30:	mov	r0, #0
   1ac34:	pop	{fp, pc}
   1ac38:	mul	r1, r2, r1
   1ac3c:	b	1a6dc <__assert_fail@plt+0x91f4>
   1ac40:	mov	r1, #0
   1ac44:	mov	r2, #3
   1ac48:	b	1a944 <__assert_fail@plt+0x945c>
   1ac4c:	push	{r4, sl, fp, lr}
   1ac50:	add	fp, sp, #8
   1ac54:	sub	sp, sp, #264	; 0x108
   1ac58:	add	r1, sp, #7
   1ac5c:	movw	r2, #257	; 0x101
   1ac60:	bl	1acb0 <__assert_fail@plt+0x97c8>
   1ac64:	mov	r4, #0
   1ac68:	cmp	r0, #0
   1ac6c:	bne	1aca4 <__assert_fail@plt+0x97bc>
   1ac70:	movw	r1, #50599	; 0xc5a7
   1ac74:	add	r0, sp, #7
   1ac78:	movt	r1, #1
   1ac7c:	bl	11200 <strcmp@plt>
   1ac80:	cmp	r0, #0
   1ac84:	beq	1aca4 <__assert_fail@plt+0x97bc>
   1ac88:	movw	r1, #50601	; 0xc5a9
   1ac8c:	add	r0, sp, #7
   1ac90:	movt	r1, #1
   1ac94:	bl	11200 <strcmp@plt>
   1ac98:	mov	r4, r0
   1ac9c:	cmp	r0, #0
   1aca0:	movwne	r4, #1
   1aca4:	mov	r0, r4
   1aca8:	sub	sp, fp, #8
   1acac:	pop	{r4, sl, fp, pc}
   1acb0:	push	{r4, r5, r6, r7, fp, lr}
   1acb4:	add	fp, sp, #16
   1acb8:	mov	r4, r1
   1acbc:	mov	r1, #0
   1acc0:	mov	r6, r2
   1acc4:	bl	11410 <setlocale@plt>
   1acc8:	cmp	r0, #0
   1accc:	beq	1acfc <__assert_fail@plt+0x9814>
   1acd0:	mov	r7, r0
   1acd4:	bl	11374 <strlen@plt>
   1acd8:	cmp	r0, r6
   1acdc:	bcs	1ad1c <__assert_fail@plt+0x9834>
   1ace0:	add	r2, r0, #1
   1ace4:	mov	r0, r4
   1ace8:	mov	r1, r7
   1acec:	bl	11254 <memcpy@plt>
   1acf0:	mov	r5, #0
   1acf4:	mov	r0, r5
   1acf8:	pop	{r4, r5, r6, r7, fp, pc}
   1acfc:	cmp	r6, #0
   1ad00:	mov	r5, #22
   1ad04:	movne	r0, #0
   1ad08:	strbne	r0, [r4]
   1ad0c:	movne	r0, r5
   1ad10:	popne	{r4, r5, r6, r7, fp, pc}
   1ad14:	mov	r0, r5
   1ad18:	pop	{r4, r5, r6, r7, fp, pc}
   1ad1c:	mov	r5, #34	; 0x22
   1ad20:	cmp	r6, #0
   1ad24:	beq	1ad44 <__assert_fail@plt+0x985c>
   1ad28:	sub	r6, r6, #1
   1ad2c:	mov	r0, r4
   1ad30:	mov	r1, r7
   1ad34:	mov	r2, r6
   1ad38:	bl	11254 <memcpy@plt>
   1ad3c:	mov	r0, #0
   1ad40:	strb	r0, [r4, r6]
   1ad44:	mov	r0, r5
   1ad48:	pop	{r4, r5, r6, r7, fp, pc}
   1ad4c:	mov	r1, #0
   1ad50:	b	11410 <setlocale@plt>
   1ad54:	cmp	r3, #0
   1ad58:	cmpeq	r2, #0
   1ad5c:	bne	1ad74 <__assert_fail@plt+0x988c>
   1ad60:	cmp	r1, #0
   1ad64:	cmpeq	r0, #0
   1ad68:	mvnne	r1, #0
   1ad6c:	mvnne	r0, #0
   1ad70:	b	1ad90 <__assert_fail@plt+0x98a8>
   1ad74:	sub	sp, sp, #8
   1ad78:	push	{sp, lr}
   1ad7c:	bl	1ada0 <__assert_fail@plt+0x98b8>
   1ad80:	ldr	lr, [sp, #4]
   1ad84:	add	sp, sp, #8
   1ad88:	pop	{r2, r3}
   1ad8c:	bx	lr
   1ad90:	push	{r1, lr}
   1ad94:	mov	r0, #8
   1ad98:	bl	111e8 <raise@plt>
   1ad9c:	pop	{r1, pc}
   1ada0:	cmp	r1, r3
   1ada4:	cmpeq	r0, r2
   1ada8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adac:	mov	r4, r0
   1adb0:	movcc	r0, #0
   1adb4:	mov	r5, r1
   1adb8:	ldr	lr, [sp, #36]	; 0x24
   1adbc:	movcc	r1, r0
   1adc0:	bcc	1aebc <__assert_fail@plt+0x99d4>
   1adc4:	cmp	r3, #0
   1adc8:	clzeq	ip, r2
   1adcc:	clzne	ip, r3
   1add0:	addeq	ip, ip, #32
   1add4:	cmp	r5, #0
   1add8:	clzeq	r1, r4
   1addc:	addeq	r1, r1, #32
   1ade0:	clzne	r1, r5
   1ade4:	sub	ip, ip, r1
   1ade8:	sub	sl, ip, #32
   1adec:	lsl	r9, r3, ip
   1adf0:	rsb	fp, ip, #32
   1adf4:	orr	r9, r9, r2, lsl sl
   1adf8:	orr	r9, r9, r2, lsr fp
   1adfc:	lsl	r8, r2, ip
   1ae00:	cmp	r5, r9
   1ae04:	cmpeq	r4, r8
   1ae08:	movcc	r0, #0
   1ae0c:	movcc	r1, r0
   1ae10:	bcc	1ae2c <__assert_fail@plt+0x9944>
   1ae14:	mov	r0, #1
   1ae18:	subs	r4, r4, r8
   1ae1c:	lsl	r1, r0, sl
   1ae20:	orr	r1, r1, r0, lsr fp
   1ae24:	lsl	r0, r0, ip
   1ae28:	sbc	r5, r5, r9
   1ae2c:	cmp	ip, #0
   1ae30:	beq	1aebc <__assert_fail@plt+0x99d4>
   1ae34:	lsr	r6, r8, #1
   1ae38:	orr	r6, r6, r9, lsl #31
   1ae3c:	lsr	r7, r9, #1
   1ae40:	mov	r2, ip
   1ae44:	b	1ae68 <__assert_fail@plt+0x9980>
   1ae48:	subs	r3, r4, r6
   1ae4c:	sbc	r8, r5, r7
   1ae50:	adds	r3, r3, r3
   1ae54:	adc	r8, r8, r8
   1ae58:	adds	r4, r3, #1
   1ae5c:	adc	r5, r8, #0
   1ae60:	subs	r2, r2, #1
   1ae64:	beq	1ae84 <__assert_fail@plt+0x999c>
   1ae68:	cmp	r5, r7
   1ae6c:	cmpeq	r4, r6
   1ae70:	bcs	1ae48 <__assert_fail@plt+0x9960>
   1ae74:	adds	r4, r4, r4
   1ae78:	adc	r5, r5, r5
   1ae7c:	subs	r2, r2, #1
   1ae80:	bne	1ae68 <__assert_fail@plt+0x9980>
   1ae84:	lsr	r3, r4, ip
   1ae88:	orr	r3, r3, r5, lsl fp
   1ae8c:	lsr	r2, r5, ip
   1ae90:	orr	r3, r3, r5, lsr sl
   1ae94:	adds	r0, r0, r4
   1ae98:	mov	r4, r3
   1ae9c:	lsl	r3, r2, ip
   1aea0:	orr	r3, r3, r4, lsl sl
   1aea4:	lsl	ip, r4, ip
   1aea8:	orr	r3, r3, r4, lsr fp
   1aeac:	adc	r1, r1, r5
   1aeb0:	subs	r0, r0, ip
   1aeb4:	mov	r5, r2
   1aeb8:	sbc	r1, r1, r3
   1aebc:	cmp	lr, #0
   1aec0:	strdne	r4, [lr]
   1aec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aec8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aecc:	mov	r7, r0
   1aed0:	ldr	r6, [pc, #72]	; 1af20 <__assert_fail@plt+0x9a38>
   1aed4:	ldr	r5, [pc, #72]	; 1af24 <__assert_fail@plt+0x9a3c>
   1aed8:	add	r6, pc, r6
   1aedc:	add	r5, pc, r5
   1aee0:	sub	r6, r6, r5
   1aee4:	mov	r8, r1
   1aee8:	mov	r9, r2
   1aeec:	bl	111a4 <fstatfs64@plt-0x20>
   1aef0:	asrs	r6, r6, #2
   1aef4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aef8:	mov	r4, #0
   1aefc:	add	r4, r4, #1
   1af00:	ldr	r3, [r5], #4
   1af04:	mov	r2, r9
   1af08:	mov	r1, r8
   1af0c:	mov	r0, r7
   1af10:	blx	r3
   1af14:	cmp	r6, r4
   1af18:	bne	1aefc <__assert_fail@plt+0x9a14>
   1af1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af20:	andeq	r2, r1, ip, lsr #32
   1af24:	andeq	r2, r1, r4, lsr #32
   1af28:	bx	lr
   1af2c:	ldr	r3, [pc, #12]	; 1af40 <__assert_fail@plt+0x9a58>
   1af30:	mov	r1, #0
   1af34:	add	r3, pc, r3
   1af38:	ldr	r2, [r3]
   1af3c:	b	11398 <__cxa_atexit@plt>
   1af40:	andeq	r2, r1, r8, ror #3

Disassembly of section .fini:

0001af44 <.fini>:
   1af44:	push	{r3, lr}
   1af48:	pop	{r3, pc}
