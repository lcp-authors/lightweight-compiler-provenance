
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000e58 <.init>:
 e58:	push	{r3, lr}
 e5c:	bl	1050 <o_strchr@plt+0x10>
 e60:	pop	{r3, pc}

Disassembly of section .plt:

00000e64 <strstr@plt-0x14>:
     e64:	push	{lr}		; (str lr, [sp, #-4]!)
     e68:	ldr	lr, [pc, #4]	; e74 <strstr@plt-0x4>
     e6c:	add	lr, pc, lr
     e70:	ldr	pc, [lr, #8]!
     e74:	andeq	r2, r1, ip, lsl #3

00000e78 <strstr@plt>:
     e78:	add	ip, pc, #0, 12
     e7c:	add	ip, ip, #73728	; 0x12000
     e80:	ldr	pc, [ip, #396]!	; 0x18c

00000e84 <pointer_list_get_at@plt>:
     e84:	add	ip, pc, #0, 12
     e88:	add	ip, ip, #73728	; 0x12000
     e8c:	ldr	pc, [ip, #388]!	; 0x184

00000e90 <o_strncasecmp@plt>:
     e90:	add	ip, pc, #0, 12
     e94:	add	ip, ip, #73728	; 0x12000
     e98:	ldr	pc, [ip, #380]!	; 0x17c

00000e9c <strcasestr@plt>:
     e9c:	add	ip, pc, #0, 12
     ea0:	add	ip, ip, #73728	; 0x12000
     ea4:	ldr	pc, [ip, #372]!	; 0x174

00000ea8 <strcmp@plt>:
     ea8:	add	ip, pc, #0, 12
     eac:	add	ip, ip, #73728	; 0x12000
     eb0:	ldr	pc, [ip, #364]!	; 0x16c

00000eb4 <__cxa_finalize@plt>:
     eb4:	add	ip, pc, #0, 12
     eb8:	add	ip, ip, #73728	; 0x12000
     ebc:	ldr	pc, [ip, #356]!	; 0x164

00000ec0 <o_strndup@plt>:
     ec0:	add	ip, pc, #0, 12
     ec4:	add	ip, ip, #73728	; 0x12000
     ec8:	ldr	pc, [ip, #348]!	; 0x15c

00000ecc <trunc@plt>:
     ecc:	add	ip, pc, #0, 12
     ed0:	add	ip, ip, #73728	; 0x12000
     ed4:	ldr	pc, [ip, #340]!	; 0x154

00000ed8 <o_free@plt>:
     ed8:	add	ip, pc, #0, 12
     edc:	add	ip, ip, #73728	; 0x12000
     ee0:	ldr	pc, [ip, #332]!	; 0x14c

00000ee4 <pointer_list_remove_at@plt>:
     ee4:	add	ip, pc, #0, 12
     ee8:	add	ip, ip, #73728	; 0x12000
     eec:	ldr	pc, [ip, #324]!	; 0x144

00000ef0 <memcpy@plt>:
     ef0:	add	ip, pc, #0, 12
     ef4:	add	ip, ip, #73728	; 0x12000
     ef8:	ldr	pc, [ip, #316]!	; 0x13c

00000efc <o_strdup@plt>:
     efc:	add	ip, pc, #0, 12
     f00:	add	ip, ip, #73728	; 0x12000
     f04:	ldr	pc, [ip, #308]!	; 0x134

00000f08 <o_base64_encode@plt>:
     f08:	add	ip, pc, #0, 12
     f0c:	add	ip, ip, #73728	; 0x12000
     f10:	ldr	pc, [ip, #300]!	; 0x12c

00000f14 <strcasecmp@plt>:
     f14:	add	ip, pc, #0, 12
     f18:	add	ip, ip, #73728	; 0x12000
     f1c:	ldr	pc, [ip, #292]!	; 0x124

00000f20 <o_strcmp@plt>:
     f20:	add	ip, pc, #0, 12
     f24:	add	ip, ip, #73728	; 0x12000
     f28:	ldr	pc, [ip, #284]!	; 0x11c

00000f2c <trimwhitespace@plt>:
     f2c:	add	ip, pc, #0, 12
     f30:	add	ip, ip, #73728	; 0x12000
     f34:	ldr	pc, [ip, #276]!	; 0x114

00000f38 <strcpy@plt>:
     f38:	add	ip, pc, #0, 12
     f3c:	add	ip, ip, #73728	; 0x12000
     f40:	ldr	pc, [ip, #268]!	; 0x10c

00000f44 <o_strlen@plt>:
     f44:	add	ip, pc, #0, 12
     f48:	add	ip, ip, #73728	; 0x12000
     f4c:	ldr	pc, [ip, #260]!	; 0x104

00000f50 <o_strcasecmp@plt>:
     f50:	add	ip, pc, #0, 12
     f54:	add	ip, ip, #73728	; 0x12000
     f58:	ldr	pc, [ip, #252]!	; 0xfc

00000f5c <o_realloc@plt>:
     f5c:	add	ip, pc, #0, 12
     f60:	add	ip, ip, #73728	; 0x12000
     f64:	ldr	pc, [ip, #244]!	; 0xf4

00000f68 <str_replace@plt>:
     f68:	add	ip, pc, #0, 12
     f6c:	add	ip, ip, #73728	; 0x12000
     f70:	ldr	pc, [ip, #236]!	; 0xec

00000f74 <__gmon_start__@plt>:
     f74:	add	ip, pc, #0, 12
     f78:	add	ip, ip, #73728	; 0x12000
     f7c:	ldr	pc, [ip, #228]!	; 0xe4

00000f80 <__ctype_b_loc@plt>:
     f80:	add	ip, pc, #0, 12
     f84:	add	ip, ip, #73728	; 0x12000
     f88:	ldr	pc, [ip, #220]!	; 0xdc

00000f8c <strlen@plt>:
     f8c:	add	ip, pc, #0, 12
     f90:	add	ip, ip, #73728	; 0x12000
     f94:	ldr	pc, [ip, #212]!	; 0xd4

00000f98 <strchr@plt>:
     f98:	add	ip, pc, #0, 12
     f9c:	add	ip, ip, #73728	; 0x12000
     fa0:	ldr	pc, [ip, #204]!	; 0xcc

00000fa4 <strncasecmp@plt>:
     fa4:	add	ip, pc, #0, 12
     fa8:	add	ip, ip, #73728	; 0x12000
     fac:	ldr	pc, [ip, #196]!	; 0xc4

00000fb0 <snprintf@plt>:
     fb0:	add	ip, pc, #0, 12
     fb4:	add	ip, ip, #73728	; 0x12000
     fb8:	ldr	pc, [ip, #188]!	; 0xbc

00000fbc <o_malloc@plt>:
     fbc:	add	ip, pc, #0, 12
     fc0:	add	ip, ip, #73728	; 0x12000
     fc4:	ldr	pc, [ip, #180]!	; 0xb4

00000fc8 <memset@plt>:
     fc8:	add	ip, pc, #0, 12
     fcc:	add	ip, ip, #73728	; 0x12000
     fd0:	ldr	pc, [ip, #172]!	; 0xac

00000fd4 <strncpy@plt>:
     fd4:	add	ip, pc, #0, 12
     fd8:	add	ip, ip, #73728	; 0x12000
     fdc:	ldr	pc, [ip, #164]!	; 0xa4

00000fe0 <pointer_list_size@plt>:
     fe0:	add	ip, pc, #0, 12
     fe4:	add	ip, ip, #73728	; 0x12000
     fe8:	ldr	pc, [ip, #156]!	; 0x9c

00000fec <msprintf@plt>:
     fec:	add	ip, pc, #0, 12
     ff0:	add	ip, ip, #73728	; 0x12000
     ff4:	ldr	pc, [ip, #148]!	; 0x94

00000ff8 <o_base64url_2_base64@plt>:
     ff8:	add	ip, pc, #0, 12
     ffc:	add	ip, ip, #73728	; 0x12000
    1000:	ldr	pc, [ip, #140]!	; 0x8c

00001004 <strrchr@plt>:
    1004:	add	ip, pc, #0, 12
    1008:	add	ip, ip, #73728	; 0x12000
    100c:	ldr	pc, [ip, #132]!	; 0x84

00001010 <o_base64_decode@plt>:
    1010:	add	ip, pc, #0, 12
    1014:	add	ip, ip, #73728	; 0x12000
    1018:	ldr	pc, [ip, #124]!	; 0x7c

0000101c <vsnprintf@plt>:
    101c:	add	ip, pc, #0, 12
    1020:	add	ip, ip, #73728	; 0x12000
    1024:	ldr	pc, [ip, #116]!	; 0x74

00001028 <o_strncmp@plt>:
    1028:	add	ip, pc, #0, 12
    102c:	add	ip, ip, #73728	; 0x12000
    1030:	ldr	pc, [ip, #108]!	; 0x6c

00001034 <strncmp@plt>:
    1034:	add	ip, pc, #0, 12
    1038:	add	ip, ip, #73728	; 0x12000
    103c:	ldr	pc, [ip, #100]!	; 0x64

00001040 <o_strchr@plt>:
    1040:	add	ip, pc, #0, 12
    1044:	add	ip, ip, #73728	; 0x12000
    1048:	ldr	pc, [ip, #92]!	; 0x5c

Disassembly of section .text:

00001050 <o_base64_encode@@Base-0x360>:
    1050:	ldr	r3, [pc, #20]	; 106c <o_strchr@plt+0x2c>
    1054:	ldr	r2, [pc, #20]	; 1070 <o_strchr@plt+0x30>
    1058:	add	r3, pc, r3
    105c:	ldr	r2, [r3, r2]
    1060:	cmp	r2, #0
    1064:	bxeq	lr
    1068:	b	f74 <__gmon_start__@plt>
    106c:	andeq	r1, r1, r0, lsr #31
    1070:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1074:	ldr	r3, [pc, #52]	; 10b0 <o_strchr@plt+0x70>
    1078:	ldr	r0, [pc, #52]	; 10b4 <o_strchr@plt+0x74>
    107c:	add	r3, pc, r3
    1080:	add	r0, pc, r0
    1084:	add	r3, r3, #3
    1088:	sub	r3, r3, r0
    108c:	cmp	r3, #6
    1090:	ldr	r3, [pc, #32]	; 10b8 <o_strchr@plt+0x78>
    1094:	add	r3, pc, r3
    1098:	bxls	lr
    109c:	ldr	r2, [pc, #24]	; 10bc <o_strchr@plt+0x7c>
    10a0:	ldr	r3, [r3, r2]
    10a4:	cmp	r3, #0
    10a8:	bxeq	lr
    10ac:	bx	r3
    10b0:	andeq	r2, r1, r8, asr #32
    10b4:	andeq	r2, r1, r4, asr #32
    10b8:	andeq	r1, r1, r4, ror #30
    10bc:	andeq	r0, r0, ip, lsr #1
    10c0:	ldr	r1, [pc, #56]	; 1100 <o_strchr@plt+0xc0>
    10c4:	ldr	r0, [pc, #56]	; 1104 <o_strchr@plt+0xc4>
    10c8:	add	r1, pc, r1
    10cc:	add	r0, pc, r0
    10d0:	sub	r1, r1, r0
    10d4:	ldr	r3, [pc, #44]	; 1108 <o_strchr@plt+0xc8>
    10d8:	asr	r1, r1, #2
    10dc:	add	r3, pc, r3
    10e0:	add	r1, r1, r1, lsr #31
    10e4:	asrs	r1, r1, #1
    10e8:	bxeq	lr
    10ec:	ldr	r2, [pc, #24]	; 110c <o_strchr@plt+0xcc>
    10f0:	ldr	r3, [r3, r2]
    10f4:	cmp	r3, #0
    10f8:	bxeq	lr
    10fc:	bx	r3
    1100:	strdeq	r1, [r1], -ip
    1104:	strdeq	r1, [r1], -r8
    1108:	andeq	r1, r1, ip, lsl pc
    110c:	strheq	r0, [r0], -r8
    1110:	ldr	r3, [pc, #76]	; 1164 <o_strchr@plt+0x124>
    1114:	ldr	r2, [pc, #76]	; 1168 <o_strchr@plt+0x128>
    1118:	add	r3, pc, r3
    111c:	add	r2, pc, r2
    1120:	ldrb	r3, [r3]
    1124:	cmp	r3, #0
    1128:	bxne	lr
    112c:	ldr	r3, [pc, #56]	; 116c <o_strchr@plt+0x12c>
    1130:	push	{r4, lr}
    1134:	ldr	r3, [r2, r3]
    1138:	cmp	r3, #0
    113c:	beq	114c <o_strchr@plt+0x10c>
    1140:	ldr	r3, [pc, #40]	; 1170 <o_strchr@plt+0x130>
    1144:	ldr	r0, [pc, r3]
    1148:	bl	eb4 <__cxa_finalize@plt>
    114c:	bl	1074 <o_strchr@plt+0x34>
    1150:	ldr	r3, [pc, #28]	; 1174 <o_strchr@plt+0x134>
    1154:	mov	r2, #1
    1158:	add	r3, pc, r3
    115c:	strb	r2, [r3]
    1160:	pop	{r4, pc}
    1164:	andeq	r1, r1, ip, lsr #31
    1168:	ldrdeq	r1, [r1], -ip
    116c:	andeq	r0, r0, r8, lsr #1
    1170:	andeq	r1, r1, r0, ror pc
    1174:	andeq	r1, r1, ip, ror #30
    1178:	ldr	r0, [pc, #56]	; 11b8 <o_strchr@plt+0x178>
    117c:	ldr	r3, [pc, #56]	; 11bc <o_strchr@plt+0x17c>
    1180:	add	r0, pc, r0
    1184:	ldr	r2, [r0]
    1188:	add	r3, pc, r3
    118c:	cmp	r2, #0
    1190:	bne	1198 <o_strchr@plt+0x158>
    1194:	b	10c0 <o_strchr@plt+0x80>
    1198:	ldr	r2, [pc, #32]	; 11c0 <o_strchr@plt+0x180>
    119c:	ldr	r3, [r3, r2]
    11a0:	cmp	r3, #0
    11a4:	beq	1194 <o_strchr@plt+0x154>
    11a8:	push	{r4, lr}
    11ac:	blx	r3
    11b0:	pop	{r4, lr}
    11b4:	b	10c0 <o_strchr@plt+0x80>
    11b8:	andeq	r1, r1, r4, lsl #27
    11bc:	andeq	r1, r1, r0, ror lr
    11c0:	strheq	r0, [r0], -r4
    11c4:	andeq	r0, r0, r0
    11c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11cc:	sub	sp, sp, #268	; 0x10c
    11d0:	mov	r4, r0
    11d4:	mov	r5, r1
    11d8:	mov	r6, r2
    11dc:	mov	r1, #128	; 0x80
    11e0:	mov	r2, #256	; 0x100
    11e4:	add	r0, sp, #8
    11e8:	mov	r7, r3
    11ec:	bl	fc8 <memset@plt>
    11f0:	ldr	r1, [pc, #432]	; 13a8 <o_strchr@plt+0x368>
    11f4:	mov	r2, #65	; 0x41
    11f8:	add	r1, pc, r1
    11fc:	mov	r3, #0
    1200:	b	1208 <o_strchr@plt+0x1c8>
    1204:	ldrb	r2, [r1, #1]!
    1208:	add	r0, sp, #264	; 0x108
    120c:	add	r2, r0, r2
    1210:	strb	r3, [r2, #-256]	; 0xffffff00
    1214:	add	r3, r3, #1
    1218:	cmp	r3, #64	; 0x40
    121c:	bne	1204 <o_strchr@plt+0x1c4>
    1220:	cmp	r5, #0
    1224:	mov	r8, #0
    1228:	addne	r2, r4, r5
    122c:	strb	r8, [sp, #69]	; 0x45
    1230:	movne	r5, r4
    1234:	beq	136c <o_strchr@plt+0x32c>
    1238:	ldrb	r3, [r5], #1
    123c:	add	r1, sp, #264	; 0x108
    1240:	add	r3, r1, r3
    1244:	ldrb	r3, [r3, #-256]	; 0xffffff00
    1248:	cmp	r3, #128	; 0x80
    124c:	addne	r8, r8, #1
    1250:	cmp	r5, r2
    1254:	bne	1238 <o_strchr@plt+0x1f8>
    1258:	cmp	r8, #0
    125c:	beq	136c <o_strchr@plt+0x32c>
    1260:	ands	r8, r8, #3
    1264:	bne	136c <o_strchr@plt+0x32c>
    1268:	ldr	r9, [pc, #316]	; 13ac <o_strchr@plt+0x36c>
    126c:	mov	fp, r8
    1270:	add	r9, pc, r9
    1274:	mov	sl, r8
    1278:	str	r8, [r7]
    127c:	b	128c <o_strchr@plt+0x24c>
    1280:	add	r4, r4, #1
    1284:	cmp	r4, r5
    1288:	beq	1338 <o_strchr@plt+0x2f8>
    128c:	ldrb	r1, [r4]
    1290:	mov	r0, r9
    1294:	bl	1040 <o_strchr@plt>
    1298:	ldrb	r3, [r4]
    129c:	cmp	r0, #0
    12a0:	beq	137c <o_strchr@plt+0x33c>
    12a4:	add	r2, sp, #264	; 0x108
    12a8:	add	r2, r2, r3
    12ac:	ldrb	r2, [r2, #-256]	; 0xffffff00
    12b0:	cmp	r2, #128	; 0x80
    12b4:	beq	1280 <o_strchr@plt+0x240>
    12b8:	cmp	r3, #61	; 0x3d
    12bc:	add	r3, sp, #264	; 0x108
    12c0:	add	r3, r3, fp
    12c4:	add	fp, fp, #1
    12c8:	addeq	sl, sl, #1
    12cc:	cmp	fp, #4
    12d0:	strb	r2, [r3, #-260]	; 0xfffffefc
    12d4:	bne	1280 <o_strchr@plt+0x240>
    12d8:	cmp	r6, #0
    12dc:	beq	1314 <o_strchr@plt+0x2d4>
    12e0:	ldrb	r0, [sp, #5]
    12e4:	ldrb	r3, [sp, #6]
    12e8:	ldrb	ip, [sp, #4]
    12ec:	ldrb	r2, [sp, #7]
    12f0:	lsr	r1, r0, #4
    12f4:	add	r6, r6, #3
    12f8:	orr	r2, r2, r3, lsl #6
    12fc:	lsr	r3, r3, #2
    1300:	orr	r1, r1, ip, lsl #2
    1304:	orr	r3, r3, r0, lsl #4
    1308:	strb	r1, [r6, #-3]
    130c:	strb	r3, [r6, #-2]
    1310:	strb	r2, [r6, #-1]
    1314:	ldr	r3, [r7]
    1318:	cmp	sl, #0
    131c:	add	r2, r3, #3
    1320:	str	r2, [r7]
    1324:	bne	1348 <o_strchr@plt+0x308>
    1328:	add	r4, r4, #1
    132c:	cmp	r4, r5
    1330:	mov	fp, r8
    1334:	bne	128c <o_strchr@plt+0x24c>
    1338:	mov	sl, #1
    133c:	mov	r0, sl
    1340:	add	sp, sp, #268	; 0x10c
    1344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1348:	cmp	sl, #1
    134c:	addeq	r3, r3, #2
    1350:	streq	r3, [r7]
    1354:	beq	1370 <o_strchr@plt+0x330>
    1358:	cmp	sl, #2
    135c:	addeq	r3, r3, #1
    1360:	streq	r3, [r7]
    1364:	moveq	sl, #1
    1368:	beq	1370 <o_strchr@plt+0x330>
    136c:	mov	sl, #0
    1370:	mov	r0, sl
    1374:	add	sp, sp, #268	; 0x10c
    1378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    137c:	cmp	r3, #61	; 0x3d
    1380:	cmpne	r3, #32
    1384:	movne	r2, #1
    1388:	moveq	r2, #0
    138c:	sub	r1, r3, #9
    1390:	cmp	r1, #1
    1394:	movls	r2, #0
    1398:	andhi	r2, r2, #1
    139c:	cmp	r2, #0
    13a0:	beq	12a4 <o_strchr@plt+0x264>
    13a4:	b	136c <o_strchr@plt+0x32c>
    13a8:	andeq	r1, r0, r8, asr #15
    13ac:	andeq	r1, r0, r0, asr r7

000013b0 <o_base64_encode@@Base>:
    13b0:	push	{r4, r5, lr}
    13b4:	lsl	ip, r1, #2
    13b8:	ldr	r4, [pc, #500]	; 15b4 <o_base64_encode@@Base+0x204>
    13bc:	ldr	lr, [pc, #500]	; 15b8 <o_base64_encode@@Base+0x208>
    13c0:	cmp	r3, #0
    13c4:	cmpne	r0, #0
    13c8:	umull	r4, ip, r4, ip
    13cc:	lsr	ip, ip, #1
    13d0:	add	r4, ip, #4
    13d4:	add	ip, ip, #5
    13d8:	umull	lr, r4, lr, r4
    13dc:	moveq	lr, #1
    13e0:	movne	lr, #0
    13e4:	add	ip, ip, r4, lsr #4
    13e8:	cmp	r1, ip
    13ec:	movls	ip, lr
    13f0:	orrhi	ip, lr, #1
    13f4:	cmp	ip, #0
    13f8:	bne	1558 <o_base64_encode@@Base+0x1a8>
    13fc:	cmp	r1, #2
    1400:	str	ip, [r3]
    1404:	add	r4, r0, r1
    1408:	bls	15ac <o_base64_encode@@Base+0x1fc>
    140c:	ldr	lr, [pc, #424]	; 15bc <o_base64_encode@@Base+0x20c>
    1410:	add	ip, r0, #3
    1414:	add	lr, pc, lr
    1418:	cmp	r2, #0
    141c:	sub	r1, r4, ip
    1420:	beq	147c <o_base64_encode@@Base+0xcc>
    1424:	ldrb	r0, [ip, #-3]
    1428:	add	r2, r2, #4
    142c:	ldrb	r0, [lr, r0, lsr #2]
    1430:	strb	r0, [r2, #-4]
    1434:	ldrb	r0, [ip, #-3]
    1438:	ldrb	r5, [ip, #-2]
    143c:	lsl	r0, r0, #4
    1440:	and	r0, r0, #48	; 0x30
    1444:	orr	r0, r0, r5, lsr #4
    1448:	ldrb	r0, [lr, r0]
    144c:	strb	r0, [r2, #-3]
    1450:	ldrb	r0, [ip, #-2]
    1454:	ldrb	r5, [ip, #-1]
    1458:	lsl	r0, r0, #2
    145c:	and	r0, r0, #60	; 0x3c
    1460:	orr	r0, r0, r5, lsr #6
    1464:	ldrb	r0, [lr, r0]
    1468:	strb	r0, [r2, #-2]
    146c:	ldrb	r0, [ip, #-1]
    1470:	and	r0, r0, #63	; 0x3f
    1474:	ldrb	r0, [lr, r0]
    1478:	strb	r0, [r2, #-1]
    147c:	ldr	r0, [r3]
    1480:	cmp	r1, #2
    1484:	add	r0, r0, #4
    1488:	str	r0, [r3]
    148c:	mov	r5, ip
    1490:	mov	r0, ip
    1494:	add	ip, ip, #3
    1498:	bgt	1418 <o_base64_encode@@Base+0x68>
    149c:	cmp	r5, r4
    14a0:	beq	1540 <o_base64_encode@@Base+0x190>
    14a4:	cmp	r2, #0
    14a8:	beq	1590 <o_base64_encode@@Base+0x1e0>
    14ac:	ldrb	r4, [r0]
    14b0:	ldr	lr, [pc, #264]	; 15c0 <o_base64_encode@@Base+0x210>
    14b4:	cmp	r1, #1
    14b8:	add	lr, pc, lr
    14bc:	add	ip, r2, #1
    14c0:	ldrb	r1, [lr, r4, lsr #2]
    14c4:	strb	r1, [r2]
    14c8:	ldr	r1, [r3]
    14cc:	add	r1, r1, #1
    14d0:	str	r1, [r3]
    14d4:	beq	1560 <o_base64_encode@@Base+0x1b0>
    14d8:	cmp	ip, #0
    14dc:	beq	1518 <o_base64_encode@@Base+0x168>
    14e0:	ldrb	r1, [r0]
    14e4:	ldrb	r4, [r0, #1]
    14e8:	add	ip, r2, #3
    14ec:	lsl	r1, r1, #4
    14f0:	and	r1, r1, #48	; 0x30
    14f4:	orr	r1, r1, r4, lsr #4
    14f8:	ldrb	r1, [lr, r1]
    14fc:	strb	r1, [r2, #1]
    1500:	ldrb	r1, [r0, #1]
    1504:	lsl	r1, r1, #2
    1508:	and	r1, r1, #60	; 0x3c
    150c:	ldrb	r1, [lr, r1]
    1510:	strb	r1, [r2, #2]
    1514:	ldr	r1, [r3]
    1518:	cmp	ip, #0
    151c:	add	r1, r1, #2
    1520:	movne	r2, #61	; 0x3d
    1524:	str	r1, [r3]
    1528:	strbne	r2, [ip]
    152c:	ldr	r1, [r3]
    1530:	addne	r2, ip, #1
    1534:	moveq	r2, ip
    1538:	add	r1, r1, #1
    153c:	str	r1, [r3]
    1540:	cmp	r2, #0
    1544:	beq	15a4 <o_base64_encode@@Base+0x1f4>
    1548:	mov	r3, #0
    154c:	strb	r3, [r2]
    1550:	mov	r0, #1
    1554:	pop	{r4, r5, pc}
    1558:	mov	r0, #0
    155c:	pop	{r4, r5, pc}
    1560:	cmp	ip, #0
    1564:	beq	1518 <o_base64_encode@@Base+0x168>
    1568:	ldrb	r1, [r0]
    156c:	mov	r0, #61	; 0x3d
    1570:	strb	r0, [r2, #2]
    1574:	add	ip, r2, #3
    1578:	lsl	r1, r1, #4
    157c:	and	r1, r1, #48	; 0x30
    1580:	ldrb	r1, [lr, r1]
    1584:	strb	r1, [r2, #1]
    1588:	ldr	r1, [r3]
    158c:	b	1518 <o_base64_encode@@Base+0x168>
    1590:	ldr	r0, [r3]
    1594:	mov	ip, r2
    1598:	add	r1, r0, #1
    159c:	str	r1, [r3]
    15a0:	b	1518 <o_base64_encode@@Base+0x168>
    15a4:	mov	r0, #1
    15a8:	pop	{r4, r5, pc}
    15ac:	mov	r5, r0
    15b0:	b	149c <o_base64_encode@@Base+0xec>
    15b4:	bge	feaac068 <pointer_list_remove_pointer_free@@Base+0xfeaa9714>
    15b8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
    15bc:	andeq	r1, r0, ip, lsr #11
    15c0:	andeq	r1, r0, r8, lsl #10

000015c4 <o_base64_decode@@Base>:
    15c4:	cmp	r3, #0
    15c8:	cmpne	r1, #0
    15cc:	moveq	ip, #1
    15d0:	movne	ip, #0
    15d4:	cmp	r0, #0
    15d8:	orreq	ip, ip, #1
    15dc:	cmp	ip, #0
    15e0:	bne	15e8 <o_base64_decode@@Base+0x24>
    15e4:	b	11c8 <o_strchr@plt+0x188>
    15e8:	mov	r0, #0
    15ec:	bx	lr

000015f0 <o_base64url_encode@@Base>:
    15f0:	push	{r4, r5, r6, lr}
    15f4:	subs	r4, r2, #0
    15f8:	vpush	{d8}
    15fc:	mov	r5, r3
    1600:	beq	1688 <o_base64url_encode@@Base+0x98>
    1604:	bl	f08 <o_base64_encode@plt>
    1608:	cmp	r0, #0
    160c:	beq	1694 <o_base64url_encode@@Base+0xa4>
    1610:	ldr	ip, [r5]
    1614:	cmp	ip, #1
    1618:	bls	16e4 <o_base64url_encode@@Base+0xf4>
    161c:	sub	r3, ip, #2
    1620:	ldrb	r2, [r4, r3]
    1624:	cmp	r2, #61	; 0x3d
    1628:	beq	1718 <o_base64url_encode@@Base+0x128>
    162c:	sub	r3, ip, #1
    1630:	add	r2, r4, r3
    1634:	ldrb	r3, [r4, r3]
    1638:	cmp	r3, #61	; 0x3d
    163c:	beq	16fc <o_base64url_encode@@Base+0x10c>
    1640:	mov	r3, r4
    1644:	mov	r2, #0
    1648:	mov	r4, #95	; 0x5f
    164c:	mov	lr, #45	; 0x2d
    1650:	b	1670 <o_base64url_encode@@Base+0x80>
    1654:	cmp	r1, #47	; 0x2f
    1658:	strbeq	r4, [r3]
    165c:	ldreq	ip, [r5]
    1660:	add	r2, r2, #1
    1664:	cmp	ip, r2
    1668:	add	r3, r3, #1
    166c:	bls	1698 <o_base64url_encode@@Base+0xa8>
    1670:	ldrb	r1, [r3]
    1674:	cmp	r1, #43	; 0x2b
    1678:	bne	1654 <o_base64url_encode@@Base+0x64>
    167c:	strb	lr, [r3]
    1680:	ldr	ip, [r5]
    1684:	b	1660 <o_base64url_encode@@Base+0x70>
    1688:	cmp	r1, #0
    168c:	cmpne	r3, #0
    1690:	bne	16a0 <o_base64url_encode@@Base+0xb0>
    1694:	mov	r0, #0
    1698:	vpop	{d8}
    169c:	pop	{r4, r5, r6, pc}
    16a0:	vmov	s15, r1
    16a4:	vldr	d5, [pc, #148]	; 1740 <o_base64url_encode@@Base+0x150>
    16a8:	vldr	d6, [pc, #152]	; 1748 <o_base64url_encode@@Base+0x158>
    16ac:	vcvt.f64.u32	d7, s15
    16b0:	vmul.f64	d7, d7, d5
    16b4:	vdiv.f64	d8, d7, d6
    16b8:	vmov.f64	d0, d8
    16bc:	bl	ecc <trunc@plt>
    16c0:	mov	r0, #1
    16c4:	vcmp.f64	d8, d0
    16c8:	vmrs	APSR_nzcv, fpscr
    16cc:	vldrne	d8, [pc, #124]	; 1750 <o_base64url_encode@@Base+0x160>
    16d0:	vaddne.f64	d8, d0, d8
    16d4:	vcvt.u32.f64	s16, d8
    16d8:	vstr	s16, [r5]
    16dc:	vpop	{d8}
    16e0:	pop	{r4, r5, r6, pc}
    16e4:	cmp	ip, #0
    16e8:	beq	1698 <o_base64url_encode@@Base+0xa8>
    16ec:	ldrb	r3, [r4]
    16f0:	mov	r2, r4
    16f4:	cmp	r3, #61	; 0x3d
    16f8:	bne	1640 <o_base64url_encode@@Base+0x50>
    16fc:	mov	r3, #0
    1700:	strb	r3, [r2]
    1704:	ldr	ip, [r5]
    1708:	sub	r3, ip, #1
    170c:	mov	ip, r3
    1710:	str	r3, [r5]
    1714:	b	1730 <o_base64url_encode@@Base+0x140>
    1718:	mov	r2, #0
    171c:	strb	r2, [r4, r3]
    1720:	ldr	ip, [r5]
    1724:	sub	r3, ip, #2
    1728:	mov	ip, r3
    172c:	str	r3, [r5]
    1730:	cmp	r3, #0
    1734:	bne	1640 <o_base64url_encode@@Base+0x50>
    1738:	b	1698 <o_base64url_encode@@Base+0xa8>
    173c:	nop			; (mov r0, r0)
    1740:	andeq	r0, r0, r0
    1744:	andsmi	r0, r0, r0
    1748:	andeq	r0, r0, r0
    174c:	andmi	r0, r8, r0
    1750:	andeq	r0, r0, r0
    1754:	svccc	0x00f00000	; IMB

00001758 <o_base64url_2_base64@@Base>:
    1758:	cmp	r0, #0
    175c:	bxeq	lr
    1760:	push	{r4, r5, r6, lr}
    1764:	mov	r4, r1
    1768:	mov	r5, r2
    176c:	mov	r6, r3
    1770:	mov	r1, r0
    1774:	mov	r2, r4
    1778:	mov	r0, r5
    177c:	bl	ef0 <memcpy@plt>
    1780:	cmp	r4, #0
    1784:	str	r4, [r6]
    1788:	movne	r0, r5
    178c:	addne	lr, r5, r4
    1790:	movne	r2, #47	; 0x2f
    1794:	movne	r3, #43	; 0x2b
    1798:	beq	17d4 <o_base64url_2_base64@@Base+0x7c>
    179c:	ldrb	ip, [r0]
    17a0:	cmp	ip, #45	; 0x2d
    17a4:	strbeq	r3, [r0]
    17a8:	beq	17b4 <o_base64url_2_base64@@Base+0x5c>
    17ac:	cmp	ip, #95	; 0x5f
    17b0:	strbeq	r2, [r0]
    17b4:	add	r0, r0, #1
    17b8:	cmp	r0, lr
    17bc:	bne	179c <o_base64url_2_base64@@Base+0x44>
    17c0:	and	r3, r4, #3
    17c4:	cmp	r3, #2
    17c8:	beq	17f8 <o_base64url_2_base64@@Base+0xa0>
    17cc:	cmp	r3, #3
    17d0:	beq	17dc <o_base64url_2_base64@@Base+0x84>
    17d4:	mov	r0, #1
    17d8:	pop	{r4, r5, r6, pc}
    17dc:	mov	r3, #61	; 0x3d
    17e0:	strb	r3, [r5, r4]
    17e4:	ldr	r3, [r6]
    17e8:	mov	r0, #1
    17ec:	add	r3, r3, r0
    17f0:	str	r3, [r6]
    17f4:	pop	{r4, r5, r6, pc}
    17f8:	mov	r3, #61	; 0x3d
    17fc:	strb	r3, [r5, r4]
    1800:	strb	r3, [r0, #1]
    1804:	ldr	r3, [r6]
    1808:	mov	r0, #1
    180c:	add	r3, r3, #2
    1810:	str	r3, [r6]
    1814:	pop	{r4, r5, r6, pc}

00001818 <o_base64url_decode@@Base>:
    1818:	push	{r4, r5, r6, r7, r8, lr}
    181c:	subs	r5, r0, #0
    1820:	sub	sp, sp, #8
    1824:	beq	1878 <o_base64url_decode@@Base+0x60>
    1828:	add	r0, r1, #3
    182c:	mov	r7, r3
    1830:	mov	r6, r2
    1834:	mov	r4, r1
    1838:	bl	fbc <o_malloc@plt>
    183c:	subs	r8, r0, #0
    1840:	beq	1878 <o_base64url_decode@@Base+0x60>
    1844:	mov	r1, r4
    1848:	mov	r0, r5
    184c:	add	r3, sp, #4
    1850:	mov	r2, r8
    1854:	bl	ff8 <o_base64url_2_base64@plt>
    1858:	cmp	r0, #0
    185c:	moveq	r4, #1
    1860:	bne	1888 <o_base64url_decode@@Base+0x70>
    1864:	mov	r0, r8
    1868:	bl	ed8 <o_free@plt>
    186c:	mov	r0, r4
    1870:	add	sp, sp, #8
    1874:	pop	{r4, r5, r6, r7, r8, pc}
    1878:	mov	r4, #0
    187c:	mov	r0, r4
    1880:	add	sp, sp, #8
    1884:	pop	{r4, r5, r6, r7, r8, pc}
    1888:	mov	r3, r7
    188c:	mov	r2, r6
    1890:	ldr	r1, [sp, #4]
    1894:	mov	r0, r8
    1898:	bl	1010 <o_base64_decode@plt>
    189c:	mov	r4, r0
    18a0:	b	1864 <o_base64url_decode@@Base+0x4c>

000018a4 <o_base64_2_base64url@@Base>:
    18a4:	cmp	r0, #0
    18a8:	bxeq	lr
    18ac:	push	{r4, r5, r6, lr}
    18b0:	mov	r4, r1
    18b4:	mov	r5, r2
    18b8:	mov	r6, r3
    18bc:	mov	r1, r0
    18c0:	mov	r2, r4
    18c4:	mov	r0, r5
    18c8:	bl	ef0 <memcpy@plt>
    18cc:	cmp	r4, #0
    18d0:	str	r4, [r6]
    18d4:	beq	1910 <o_base64_2_base64url@@Base+0x6c>
    18d8:	add	r1, r5, r4
    18dc:	mov	r2, r5
    18e0:	mov	ip, #95	; 0x5f
    18e4:	mov	r3, #45	; 0x2d
    18e8:	ldrb	r0, [r2]
    18ec:	cmp	r0, #43	; 0x2b
    18f0:	strbeq	r3, [r2]
    18f4:	beq	1900 <o_base64_2_base64url@@Base+0x5c>
    18f8:	cmp	r0, #47	; 0x2f
    18fc:	strbeq	ip, [r2]
    1900:	add	r2, r2, #1
    1904:	cmp	r1, r2
    1908:	bne	18e8 <o_base64_2_base64url@@Base+0x44>
    190c:	ldr	r4, [r6]
    1910:	sub	r1, r4, #1
    1914:	add	r2, r5, r1
    1918:	ldrb	r3, [r5, r1]
    191c:	cmp	r3, #61	; 0x3d
    1920:	bne	1938 <o_base64_2_base64url@@Base+0x94>
    1924:	sub	r3, r2, r5
    1928:	str	r3, [r6]
    192c:	ldrb	r3, [r2, #-1]!
    1930:	cmp	r3, #61	; 0x3d
    1934:	beq	1924 <o_base64_2_base64url@@Base+0x80>
    1938:	mov	r0, #1
    193c:	pop	{r4, r5, r6, pc}

00001940 <o_malloc@@Base>:
    1940:	cmp	r0, #0
    1944:	bxeq	lr
    1948:	ldr	r3, [pc, #8]	; 1958 <o_malloc@@Base+0x18>
    194c:	add	r3, pc, r3
    1950:	ldr	r3, [r3]
    1954:	bx	r3
    1958:	andeq	r1, r1, ip, ror #14

0000195c <o_realloc@@Base>:
    195c:	subs	r3, r1, #0
    1960:	beq	1974 <o_realloc@@Base+0x18>
    1964:	ldr	r3, [pc, #16]	; 197c <o_realloc@@Base+0x20>
    1968:	add	r3, pc, r3
    196c:	ldr	r3, [r3, #4]
    1970:	bx	r3
    1974:	mov	r0, r3
    1978:	bx	lr
    197c:	andeq	r1, r1, r0, asr r7

00001980 <o_free@@Base>:
    1980:	cmp	r0, #0
    1984:	bxeq	lr
    1988:	ldr	r3, [pc, #8]	; 1998 <o_free@@Base+0x18>
    198c:	add	r3, pc, r3
    1990:	ldr	r3, [r3, #8]
    1994:	bx	r3
    1998:	andeq	r1, r1, ip, lsr #14

0000199c <o_set_alloc_funcs@@Base>:
    199c:	ldr	r3, [pc, #8]	; 19ac <o_set_alloc_funcs@@Base+0x10>
    19a0:	add	r3, pc, r3
    19a4:	stm	r3, {r0, r1, r2}
    19a8:	bx	lr
    19ac:	andeq	r1, r1, r8, lsl r7

000019b0 <o_get_alloc_funcs@@Base>:
    19b0:	cmp	r0, #0
    19b4:	ldrne	r3, [pc, #52]	; 19f0 <o_get_alloc_funcs@@Base+0x40>
    19b8:	addne	r3, pc, r3
    19bc:	ldrne	r3, [r3]
    19c0:	strne	r3, [r0]
    19c4:	cmp	r1, #0
    19c8:	ldrne	r3, [pc, #36]	; 19f4 <o_get_alloc_funcs@@Base+0x44>
    19cc:	addne	r3, pc, r3
    19d0:	ldrne	r3, [r3, #4]
    19d4:	strne	r3, [r1]
    19d8:	cmp	r2, #0
    19dc:	ldrne	r3, [pc, #20]	; 19f8 <o_get_alloc_funcs@@Base+0x48>
    19e0:	addne	r3, pc, r3
    19e4:	ldrne	r3, [r3, #8]
    19e8:	strne	r3, [r2]
    19ec:	bx	lr
    19f0:	andeq	r1, r1, r0, lsl #14
    19f4:	andeq	r1, r1, ip, ror #13
    19f8:	ldrdeq	r1, [r1], -r8

000019fc <msprintf@@Base>:
    19fc:	push	{r0, r1, r2, r3}
    1a00:	push	{r4, r5, r6, lr}
    1a04:	sub	sp, sp, #8
    1a08:	ldr	r4, [sp, #24]
    1a0c:	cmp	r4, #0
    1a10:	beq	1a6c <msprintf@@Base+0x70>
    1a14:	add	ip, sp, #28
    1a18:	mov	r1, #0
    1a1c:	mov	r3, ip
    1a20:	mov	r0, r1
    1a24:	mov	r2, r4
    1a28:	str	ip, [sp]
    1a2c:	str	ip, [sp, #4]
    1a30:	bl	101c <vsnprintf@plt>
    1a34:	add	r5, r0, #1
    1a38:	mov	r0, r5
    1a3c:	bl	fbc <o_malloc@plt>
    1a40:	subs	r6, r0, #0
    1a44:	beq	1a58 <msprintf@@Base+0x5c>
    1a48:	mov	r2, r4
    1a4c:	mov	r1, r5
    1a50:	ldr	r3, [sp, #4]
    1a54:	bl	101c <vsnprintf@plt>
    1a58:	mov	r0, r6
    1a5c:	add	sp, sp, #8
    1a60:	pop	{r4, r5, r6, lr}
    1a64:	add	sp, sp, #16
    1a68:	bx	lr
    1a6c:	mov	r6, r4
    1a70:	b	1a58 <msprintf@@Base+0x5c>

00001a74 <mstrcatf@@Base>:
    1a74:	push	{r1, r2, r3}
    1a78:	push	{r4, r5, r6, r7, lr}
    1a7c:	sub	sp, sp, #8
    1a80:	ldr	r5, [sp, #28]
    1a84:	cmp	r5, #0
    1a88:	beq	1b5c <mstrcatf@@Base+0xe8>
    1a8c:	cmp	r0, #0
    1a90:	mov	r4, r0
    1a94:	add	ip, sp, #32
    1a98:	beq	1b1c <mstrcatf@@Base+0xa8>
    1a9c:	mov	r1, #0
    1aa0:	mov	r3, ip
    1aa4:	mov	r0, r1
    1aa8:	mov	r2, r5
    1aac:	str	ip, [sp]
    1ab0:	str	ip, [sp, #4]
    1ab4:	bl	101c <vsnprintf@plt>
    1ab8:	add	r7, r0, #1
    1abc:	mov	r0, r7
    1ac0:	bl	fbc <o_malloc@plt>
    1ac4:	subs	r6, r0, #0
    1ac8:	moveq	r7, r6
    1acc:	beq	1b08 <mstrcatf@@Base+0x94>
    1ad0:	mov	r1, r7
    1ad4:	ldr	r3, [sp, #4]
    1ad8:	mov	r2, r5
    1adc:	bl	101c <vsnprintf@plt>
    1ae0:	ldr	r0, [pc, #124]	; 1b64 <mstrcatf@@Base+0xf0>
    1ae4:	mov	r2, r6
    1ae8:	mov	r1, r4
    1aec:	add	r0, pc, r0
    1af0:	bl	fec <msprintf@plt>
    1af4:	mov	r7, r0
    1af8:	mov	r0, r6
    1afc:	bl	ed8 <o_free@plt>
    1b00:	mov	r0, r4
    1b04:	bl	ed8 <o_free@plt>
    1b08:	mov	r0, r7
    1b0c:	add	sp, sp, #8
    1b10:	pop	{r4, r5, r6, r7, lr}
    1b14:	add	sp, sp, #12
    1b18:	bx	lr
    1b1c:	mov	r1, r0
    1b20:	mov	r3, ip
    1b24:	mov	r2, r5
    1b28:	str	ip, [sp]
    1b2c:	str	ip, [sp, #4]
    1b30:	bl	101c <vsnprintf@plt>
    1b34:	add	r4, r0, #1
    1b38:	mov	r0, r4
    1b3c:	bl	fbc <o_malloc@plt>
    1b40:	subs	r7, r0, #0
    1b44:	beq	1b08 <mstrcatf@@Base+0x94>
    1b48:	mov	r2, r5
    1b4c:	mov	r1, r4
    1b50:	ldr	r3, [sp, #4]
    1b54:	bl	101c <vsnprintf@plt>
    1b58:	b	1b08 <mstrcatf@@Base+0x94>
    1b5c:	mov	r7, r5
    1b60:	b	1b08 <mstrcatf@@Base+0x94>
    1b64:	andeq	r0, r0, r8, lsl pc

00001b68 <o_strndup@@Base>:
    1b68:	push	{r4, r5, r6, lr}
    1b6c:	subs	r5, r0, #0
    1b70:	beq	1ba4 <o_strndup@@Base+0x3c>
    1b74:	add	r0, r1, #1
    1b78:	mov	r4, r1
    1b7c:	bl	fbc <o_malloc@plt>
    1b80:	subs	r6, r0, #0
    1b84:	beq	1b9c <o_strndup@@Base+0x34>
    1b88:	mov	r1, r5
    1b8c:	mov	r2, r4
    1b90:	bl	ef0 <memcpy@plt>
    1b94:	mov	r3, #0
    1b98:	strb	r3, [r6, r4]
    1b9c:	mov	r0, r6
    1ba0:	pop	{r4, r5, r6, pc}
    1ba4:	mov	r6, r5
    1ba8:	b	1b9c <o_strndup@@Base+0x34>

00001bac <o_strdup@@Base>:
    1bac:	subs	r3, r0, #0
    1bb0:	bxeq	lr
    1bb4:	push	{r4, lr}
    1bb8:	mov	r4, r3
    1bbc:	bl	f8c <strlen@plt>
    1bc0:	mov	r1, r0
    1bc4:	mov	r0, r4
    1bc8:	pop	{r4, lr}
    1bcc:	b	ec0 <o_strndup@plt>

00001bd0 <str_replace@@Base>:
    1bd0:	cmp	r2, #0
    1bd4:	cmpne	r1, #0
    1bd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    1bdc:	moveq	r7, #1
    1be0:	movne	r7, #0
    1be4:	cmp	r0, #0
    1be8:	orreq	r7, r7, #1
    1bec:	cmp	r7, #0
    1bf0:	sub	sp, sp, #8
    1bf4:	bne	1ce4 <str_replace@@Base+0x114>
    1bf8:	mov	r4, r1
    1bfc:	mov	r5, r0
    1c00:	mov	r6, r2
    1c04:	bl	e78 <strstr@plt>
    1c08:	cmp	r0, #0
    1c0c:	beq	1cd4 <str_replace@@Base+0x104>
    1c10:	sub	r8, r0, r5
    1c14:	add	sl, r8, #1
    1c18:	mov	r0, sl
    1c1c:	bl	fbc <o_malloc@plt>
    1c20:	subs	r9, r0, #0
    1c24:	beq	1ce4 <str_replace@@Base+0x114>
    1c28:	mov	r2, r8
    1c2c:	mov	r1, r5
    1c30:	bl	ef0 <memcpy@plt>
    1c34:	strb	r7, [r9, r8]
    1c38:	mov	r0, r9
    1c3c:	bl	f8c <strlen@plt>
    1c40:	mov	r8, r0
    1c44:	mov	r0, r4
    1c48:	bl	f8c <strlen@plt>
    1c4c:	mov	r1, r4
    1c50:	mov	r2, r6
    1c54:	add	r0, r8, r0
    1c58:	add	r0, r5, r0
    1c5c:	bl	f68 <str_replace@plt>
    1c60:	subs	r5, r0, #0
    1c64:	beq	1d08 <str_replace@@Base+0x138>
    1c68:	mov	r0, r6
    1c6c:	bl	f8c <strlen@plt>
    1c70:	mov	r4, r0
    1c74:	mov	r0, r5
    1c78:	bl	f8c <strlen@plt>
    1c7c:	add	r4, r4, r0
    1c80:	add	r4, r4, sl
    1c84:	mov	r0, r4
    1c88:	bl	fbc <o_malloc@plt>
    1c8c:	subs	r8, r0, #0
    1c90:	beq	1d18 <str_replace@@Base+0x148>
    1c94:	ldr	r2, [pc, #144]	; 1d2c <str_replace@@Base+0x15c>
    1c98:	str	r5, [sp, #4]
    1c9c:	str	r6, [sp]
    1ca0:	mov	r1, r4
    1ca4:	mov	r3, r9
    1ca8:	add	r2, pc, r2
    1cac:	bl	fb0 <snprintf@plt>
    1cb0:	cmp	r0, #0
    1cb4:	mov	r0, r9
    1cb8:	blt	1cec <str_replace@@Base+0x11c>
    1cbc:	bl	ed8 <o_free@plt>
    1cc0:	mov	r0, r5
    1cc4:	bl	ed8 <o_free@plt>
    1cc8:	mov	r0, r8
    1ccc:	add	sp, sp, #8
    1cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1cd4:	mov	r0, r5
    1cd8:	add	sp, sp, #8
    1cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    1ce0:	b	efc <o_strdup@plt>
    1ce4:	mov	r8, #0
    1ce8:	b	1cc8 <str_replace@@Base+0xf8>
    1cec:	bl	ed8 <o_free@plt>
    1cf0:	mov	r0, r5
    1cf4:	bl	ed8 <o_free@plt>
    1cf8:	mov	r0, r8
    1cfc:	bl	ed8 <o_free@plt>
    1d00:	mov	r8, r7
    1d04:	b	1cc8 <str_replace@@Base+0xf8>
    1d08:	mov	r0, r9
    1d0c:	bl	ed8 <o_free@plt>
    1d10:	mov	r8, r5
    1d14:	b	1cc8 <str_replace@@Base+0xf8>
    1d18:	mov	r0, r9
    1d1c:	bl	ed8 <o_free@plt>
    1d20:	mov	r0, r5
    1d24:	bl	ed8 <o_free@plt>
    1d28:	b	1cc8 <str_replace@@Base+0xf8>
    1d2c:	andeq	r0, r0, r4, ror #26

00001d30 <o_strcmp@@Base>:
    1d30:	cmp	r0, #0
    1d34:	cmpeq	r1, #0
    1d38:	clz	r3, r1
    1d3c:	lsr	r3, r3, #5
    1d40:	beq	1d64 <o_strcmp@@Base+0x34>
    1d44:	cmp	r0, #0
    1d48:	moveq	r3, #0
    1d4c:	andne	r3, r3, #1
    1d50:	cmp	r3, #0
    1d54:	bne	1d74 <o_strcmp@@Base+0x44>
    1d58:	cmp	r0, #0
    1d5c:	beq	1d6c <o_strcmp@@Base+0x3c>
    1d60:	b	ea8 <strcmp@plt>
    1d64:	mov	r0, #0
    1d68:	bx	lr
    1d6c:	mov	r0, #1
    1d70:	bx	lr
    1d74:	mvn	r0, #0
    1d78:	bx	lr

00001d7c <o_strncmp@@Base>:
    1d7c:	clz	r3, r1
    1d80:	lsr	r3, r3, #5
    1d84:	cmp	r0, #0
    1d88:	movne	ip, #0
    1d8c:	andeq	ip, r3, #1
    1d90:	cmp	r2, #0
    1d94:	orreq	ip, ip, #1
    1d98:	cmp	ip, #0
    1d9c:	bne	1dc0 <o_strncmp@@Base+0x44>
    1da0:	cmp	r0, #0
    1da4:	moveq	r3, #0
    1da8:	andne	r3, r3, #1
    1dac:	cmp	r3, #0
    1db0:	bne	1dc8 <o_strncmp@@Base+0x4c>
    1db4:	cmp	r0, #0
    1db8:	beq	1dd0 <o_strncmp@@Base+0x54>
    1dbc:	b	1034 <strncmp@plt>
    1dc0:	mov	r0, #0
    1dc4:	bx	lr
    1dc8:	mvn	r0, #0
    1dcc:	bx	lr
    1dd0:	mov	r0, #1
    1dd4:	bx	lr

00001dd8 <o_strcpy@@Base>:
    1dd8:	cmp	r1, #0
    1ddc:	cmpne	r0, #0
    1de0:	beq	1de8 <o_strcpy@@Base+0x10>
    1de4:	b	f38 <strcpy@plt>
    1de8:	mov	r0, #0
    1dec:	bx	lr

00001df0 <o_strncpy@@Base>:
    1df0:	cmp	r1, #0
    1df4:	cmpne	r0, #0
    1df8:	beq	1e00 <o_strncpy@@Base+0x10>
    1dfc:	b	fd4 <strncpy@plt>
    1e00:	mov	r0, #0
    1e04:	bx	lr

00001e08 <o_strcasecmp@@Base>:
    1e08:	clz	r2, r0
    1e0c:	clz	r3, r1
    1e10:	lsr	r2, r2, #5
    1e14:	lsr	r3, r3, #5
    1e18:	tst	r2, r3
    1e1c:	bne	1e60 <o_strcasecmp@@Base+0x58>
    1e20:	cmp	r0, #0
    1e24:	moveq	r3, #0
    1e28:	andne	r3, r3, #1
    1e2c:	cmp	r3, #0
    1e30:	bne	1e68 <o_strcasecmp@@Base+0x60>
    1e34:	cmp	r1, #0
    1e38:	moveq	r2, #0
    1e3c:	andne	r2, r2, #1
    1e40:	cmp	r2, #0
    1e44:	push	{lr}		; (str lr, [sp, #-4]!)
    1e48:	mov	lr, r1
    1e4c:	bne	1e58 <o_strcasecmp@@Base+0x50>
    1e50:	pop	{lr}		; (ldr lr, [sp], #4)
    1e54:	b	f14 <strcasecmp@plt>
    1e58:	mov	r0, #1
    1e5c:	pop	{pc}		; (ldr pc, [sp], #4)
    1e60:	mov	r0, #0
    1e64:	bx	lr
    1e68:	mvn	r0, #0
    1e6c:	bx	lr

00001e70 <o_strncasecmp@@Base>:
    1e70:	clz	ip, r0
    1e74:	clz	r3, r1
    1e78:	lsr	ip, ip, #5
    1e7c:	lsr	r3, r3, #5
    1e80:	push	{r4, lr}
    1e84:	and	lr, ip, r3
    1e88:	cmp	r2, #0
    1e8c:	orreq	lr, lr, #1
    1e90:	cmp	lr, #0
    1e94:	bne	1ed0 <o_strncasecmp@@Base+0x60>
    1e98:	cmp	r0, #0
    1e9c:	moveq	r3, #0
    1ea0:	andne	r3, r3, #1
    1ea4:	cmp	r3, #0
    1ea8:	mov	lr, r0
    1eac:	bne	1ee0 <o_strncasecmp@@Base+0x70>
    1eb0:	cmp	r1, #0
    1eb4:	moveq	ip, #0
    1eb8:	andne	ip, ip, #1
    1ebc:	cmp	ip, #0
    1ec0:	mov	r4, r1
    1ec4:	bne	1ed8 <o_strncasecmp@@Base+0x68>
    1ec8:	pop	{r4, lr}
    1ecc:	b	fa4 <strncasecmp@plt>
    1ed0:	mov	r0, #0
    1ed4:	pop	{r4, pc}
    1ed8:	mov	r0, #1
    1edc:	pop	{r4, pc}
    1ee0:	mvn	r0, #0
    1ee4:	pop	{r4, pc}

00001ee8 <o_strstr@@Base>:
    1ee8:	cmp	r1, #0
    1eec:	cmpne	r0, #0
    1ef0:	beq	1ef8 <o_strstr@@Base+0x10>
    1ef4:	b	e78 <strstr@plt>
    1ef8:	mov	r0, #0
    1efc:	bx	lr

00001f00 <o_strchr@@Base>:
    1f00:	cmp	r0, #0
    1f04:	bxeq	lr
    1f08:	b	f98 <strchr@plt>

00001f0c <o_strrchr@@Base>:
    1f0c:	cmp	r0, #0
    1f10:	bxeq	lr
    1f14:	b	1004 <strrchr@plt>

00001f18 <o_strnstr@@Base>:
    1f18:	cmp	r1, #0
    1f1c:	cmpne	r0, #0
    1f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	moveq	r5, #1
    1f28:	movne	r5, #0
    1f2c:	beq	1fa0 <o_strnstr@@Base+0x88>
    1f30:	mov	r6, r0
    1f34:	mov	r0, r1
    1f38:	mov	r8, r1
    1f3c:	mov	r7, r2
    1f40:	bl	f8c <strlen@plt>
    1f44:	subs	r9, r0, #0
    1f48:	beq	1fa8 <o_strnstr@@Base+0x90>
    1f4c:	subs	r7, r7, r9
    1f50:	bmi	1f98 <o_strnstr@@Base+0x80>
    1f54:	ldrb	sl, [r8]
    1f58:	mov	r4, r6
    1f5c:	b	1f6c <o_strnstr@@Base+0x54>
    1f60:	sub	r3, r4, r6
    1f64:	cmp	r3, r7
    1f68:	bgt	1fa0 <o_strnstr@@Base+0x88>
    1f6c:	mov	r5, r4
    1f70:	add	r4, r4, #1
    1f74:	ldrb	r3, [r5]
    1f78:	cmp	r3, sl
    1f7c:	bne	1f60 <o_strnstr@@Base+0x48>
    1f80:	mov	r2, r9
    1f84:	mov	r1, r8
    1f88:	mov	r0, r5
    1f8c:	bl	1034 <strncmp@plt>
    1f90:	cmp	r0, #0
    1f94:	bne	1f60 <o_strnstr@@Base+0x48>
    1f98:	mov	r0, r5
    1f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1fa0:	mov	r0, #0
    1fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1fa8:	mov	r0, r6
    1fac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00001fb0 <o_strcasestr@@Base>:
    1fb0:	cmp	r1, #0
    1fb4:	cmpne	r0, #0
    1fb8:	beq	1fc0 <o_strcasestr@@Base+0x10>
    1fbc:	b	e9c <strcasestr@plt>
    1fc0:	mov	r0, #0
    1fc4:	bx	lr

00001fc8 <o_strlen@@Base>:
    1fc8:	cmp	r0, #0
    1fcc:	bxeq	lr
    1fd0:	b	f8c <strlen@plt>

00001fd4 <o_strnchr@@Base>:
    1fd4:	push	{r4, r5, r6, r7, r8, lr}
    1fd8:	subs	r6, r0, #0
    1fdc:	beq	202c <o_strnchr@@Base+0x58>
    1fe0:	cmp	r1, #0
    1fe4:	beq	202c <o_strnchr@@Base+0x58>
    1fe8:	mov	r8, r2
    1fec:	mov	r7, r1
    1ff0:	mov	r5, r6
    1ff4:	mov	r4, #0
    1ff8:	b	2010 <o_strnchr@@Base+0x3c>
    1ffc:	ldrb	ip, [r3]
    2000:	cmp	ip, r8
    2004:	beq	2030 <o_strnchr@@Base+0x5c>
    2008:	cmp	r7, r4
    200c:	beq	202c <o_strnchr@@Base+0x58>
    2010:	mov	r0, r6
    2014:	bl	f44 <o_strlen@plt>
    2018:	mov	r3, r5
    201c:	add	r5, r5, #1
    2020:	cmp	r0, r4
    2024:	add	r4, r4, #1
    2028:	bhi	1ffc <o_strnchr@@Base+0x28>
    202c:	mov	r3, #0
    2030:	mov	r0, r3
    2034:	pop	{r4, r5, r6, r7, r8, pc}

00002038 <o_strrnchr@@Base>:
    2038:	cmp	r0, #0
    203c:	cmpne	r1, #0
    2040:	beq	20ac <o_strrnchr@@Base+0x74>
    2044:	push	{r4, r5, r6, r7, r8, lr}
    2048:	mov	r6, r0
    204c:	mov	r7, r1
    2050:	mov	r8, r2
    2054:	bl	f44 <o_strlen@plt>
    2058:	subs	r4, r0, #1
    205c:	bmi	20a0 <o_strrnchr@@Base+0x68>
    2060:	add	r5, r6, r4
    2064:	b	207c <o_strrnchr@@Base+0x44>
    2068:	ldrb	r2, [r3]
    206c:	cmp	r2, r8
    2070:	beq	20a4 <o_strrnchr@@Base+0x6c>
    2074:	cmn	r4, #1
    2078:	beq	20a0 <o_strrnchr@@Base+0x68>
    207c:	mov	r0, r6
    2080:	bl	f44 <o_strlen@plt>
    2084:	mov	r3, r5
    2088:	sub	r5, r5, #1
    208c:	sub	r0, r0, #1
    2090:	sub	r0, r0, r4
    2094:	cmp	r7, r0
    2098:	sub	r4, r4, #1
    209c:	bhi	2068 <o_strrnchr@@Base+0x30>
    20a0:	mov	r3, #0
    20a4:	mov	r0, r3
    20a8:	pop	{r4, r5, r6, r7, r8, pc}
    20ac:	mov	r3, #0
    20b0:	mov	r0, r3
    20b4:	bx	lr

000020b8 <split_string@@Base>:
    20b8:	cmp	r0, #0
    20bc:	cmpne	r1, #0
    20c0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20c4:	movne	r6, #1
    20c8:	moveq	r6, #0
    20cc:	beq	21bc <split_string@@Base+0x104>
    20d0:	cmp	r2, #0
    20d4:	mov	r5, r2
    20d8:	mov	r4, r0
    20dc:	mov	sl, r1
    20e0:	beq	21c4 <split_string@@Base+0x10c>
    20e4:	mov	r3, #0
    20e8:	str	r3, [r2]
    20ec:	bl	e78 <strstr@plt>
    20f0:	subs	r8, r0, #0
    20f4:	beq	21d8 <split_string@@Base+0x120>
    20f8:	mov	r7, #0
    20fc:	mov	fp, r7
    2100:	mov	r6, #2
    2104:	b	210c <split_string@@Base+0x54>
    2108:	mov	r6, r1
    210c:	cmp	r5, #0
    2110:	lsl	r1, r6, #2
    2114:	beq	214c <split_string@@Base+0x94>
    2118:	ldr	r0, [r5]
    211c:	bl	f5c <o_realloc@plt>
    2120:	sub	r1, r8, r4
    2124:	mov	r9, r0
    2128:	cmp	r9, #0
    212c:	mov	r0, r4
    2130:	str	r9, [r5]
    2134:	beq	214c <split_string@@Base+0x94>
    2138:	bl	ec0 <o_strndup@plt>
    213c:	ldr	r3, [r5]
    2140:	add	r3, r3, r7
    2144:	str	r0, [r9, r7]
    2148:	str	fp, [r3, #4]
    214c:	mov	r0, sl
    2150:	bl	f8c <strlen@plt>
    2154:	mov	r1, sl
    2158:	add	r7, r7, #4
    215c:	add	r4, r8, r0
    2160:	mov	r0, r4
    2164:	bl	e78 <strstr@plt>
    2168:	add	r1, r6, #1
    216c:	subs	r8, r0, #0
    2170:	bne	2108 <split_string@@Base+0x50>
    2174:	cmp	r5, #0
    2178:	beq	21bc <split_string@@Base+0x104>
    217c:	lsl	r7, r1, #2
    2180:	mov	r1, r7
    2184:	ldr	r0, [r5]
    2188:	bl	f5c <o_realloc@plt>
    218c:	cmp	r0, #0
    2190:	mov	r8, r0
    2194:	str	r0, [r5]
    2198:	beq	21bc <split_string@@Base+0x104>
    219c:	mov	r0, r4
    21a0:	bl	efc <o_strdup@plt>
    21a4:	ldr	r1, [r5]
    21a8:	sub	r2, r7, #8
    21ac:	add	r1, r1, r7
    21b0:	mov	r3, #0
    21b4:	str	r0, [r8, r2]
    21b8:	str	r3, [r1, #-4]
    21bc:	mov	r0, r6
    21c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21c4:	bl	e78 <strstr@plt>
    21c8:	subs	r8, r0, #0
    21cc:	bne	20f8 <split_string@@Base+0x40>
    21d0:	mov	r6, #1
    21d4:	b	21bc <split_string@@Base+0x104>
    21d8:	mov	r6, #1
    21dc:	mov	r1, #2
    21e0:	b	217c <split_string@@Base+0xc4>

000021e4 <free_string_array@@Base>:
    21e4:	push	{r4, r5, r6, lr}
    21e8:	subs	r6, r0, #0
    21ec:	popeq	{r4, r5, r6, pc}
    21f0:	ldr	r0, [r6]
    21f4:	cmp	r0, #0
    21f8:	movne	r4, r6
    21fc:	movne	r5, #0
    2200:	beq	2218 <free_string_array@@Base+0x34>
    2204:	bl	ed8 <o_free@plt>
    2208:	str	r5, [r4]
    220c:	ldr	r0, [r4, #4]!
    2210:	cmp	r0, #0
    2214:	bne	2204 <free_string_array@@Base+0x20>
    2218:	mov	r0, r6
    221c:	pop	{r4, r5, r6, lr}
    2220:	b	ed8 <o_free@plt>

00002224 <string_array_size@@Base>:
    2224:	cmp	r0, #0
    2228:	bxeq	lr
    222c:	ldr	r3, [r0]
    2230:	cmp	r3, #0
    2234:	beq	2254 <string_array_size@@Base+0x30>
    2238:	mov	r3, r0
    223c:	mov	r0, #0
    2240:	ldr	r2, [r3, #4]!
    2244:	add	r0, r0, #1
    2248:	cmp	r2, #0
    224c:	bne	2240 <string_array_size@@Base+0x1c>
    2250:	bx	lr
    2254:	mov	r0, r3
    2258:	bx	lr

0000225c <string_array_join@@Base>:
    225c:	cmp	r0, #0
    2260:	cmpne	r1, #0
    2264:	push	{r4, r5, r6, r7, r8, lr}
    2268:	movne	r4, #1
    226c:	moveq	r4, #0
    2270:	beq	22e8 <string_array_join@@Base+0x8c>
    2274:	ldr	ip, [r0]
    2278:	cmp	ip, #0
    227c:	beq	22f0 <string_array_join@@Base+0x94>
    2280:	ldr	r8, [pc, #112]	; 22f8 <string_array_join@@Base+0x9c>
    2284:	mov	r7, r1
    2288:	add	r8, pc, r8
    228c:	mov	r5, r0
    2290:	mov	r4, #0
    2294:	b	22b8 <string_array_join@@Base+0x5c>
    2298:	bl	fec <msprintf@plt>
    229c:	mov	r6, r0
    22a0:	mov	r0, r4
    22a4:	bl	ed8 <o_free@plt>
    22a8:	ldr	ip, [r5, #4]!
    22ac:	mov	r4, r6
    22b0:	cmp	ip, #0
    22b4:	beq	22e8 <string_array_join@@Base+0x8c>
    22b8:	cmp	r4, #0
    22bc:	mov	r3, ip
    22c0:	mov	r1, r4
    22c4:	mov	r2, r7
    22c8:	mov	r0, r8
    22cc:	bne	2298 <string_array_join@@Base+0x3c>
    22d0:	mov	r0, ip
    22d4:	bl	efc <o_strdup@plt>
    22d8:	ldr	ip, [r5, #4]!
    22dc:	cmp	ip, #0
    22e0:	mov	r4, r0
    22e4:	bne	22b8 <string_array_join@@Base+0x5c>
    22e8:	mov	r0, r4
    22ec:	pop	{r4, r5, r6, r7, r8, pc}
    22f0:	mov	r4, ip
    22f4:	b	22e8 <string_array_join@@Base+0x8c>
    22f8:	andeq	r0, r0, r4, lsl #15

000022fc <trimwhitespace@@Base>:
    22fc:	push	{r4, r5, r6, lr}
    2300:	subs	r5, r0, #0
    2304:	beq	239c <trimwhitespace@@Base+0xa0>
    2308:	ldrb	r4, [r5]
    230c:	cmp	r4, #0
    2310:	beq	239c <trimwhitespace@@Base+0xa0>
    2314:	bl	f80 <__ctype_b_loc@plt>
    2318:	mov	r6, r0
    231c:	ldr	r2, [r0]
    2320:	b	2328 <trimwhitespace@@Base+0x2c>
    2324:	ldrb	r4, [r5, #1]!
    2328:	lsl	r4, r4, #1
    232c:	ldrh	r3, [r2, r4]
    2330:	tst	r3, #8192	; 0x2000
    2334:	bne	2324 <trimwhitespace@@Base+0x28>
    2338:	mov	r0, r5
    233c:	bl	f44 <o_strlen@plt>
    2340:	sub	r0, r0, #1
    2344:	add	r1, r5, r0
    2348:	cmp	r5, r1
    234c:	bcs	2394 <trimwhitespace@@Base+0x98>
    2350:	ldrb	r3, [r5, r0]
    2354:	ldr	r0, [r6]
    2358:	lsl	r3, r3, #1
    235c:	ldrh	r3, [r0, r3]
    2360:	tst	r3, #8192	; 0x2000
    2364:	beq	2394 <trimwhitespace@@Base+0x98>
    2368:	sub	r3, r1, #1
    236c:	b	2388 <trimwhitespace@@Base+0x8c>
    2370:	ldrb	r2, [r3]
    2374:	sub	r3, r3, #1
    2378:	lsl	r2, r2, #1
    237c:	ldrh	r2, [r0, r2]
    2380:	tst	r2, #8192	; 0x2000
    2384:	beq	2394 <trimwhitespace@@Base+0x98>
    2388:	cmp	r5, r3
    238c:	mov	r1, r3
    2390:	bne	2370 <trimwhitespace@@Base+0x74>
    2394:	mov	r3, #0
    2398:	strb	r3, [r1, #1]
    239c:	mov	r0, r5
    23a0:	pop	{r4, r5, r6, pc}

000023a4 <trimcharacter@@Base>:
    23a4:	push	{r4, r5, r6, lr}
    23a8:	subs	r4, r0, #0
    23ac:	beq	2424 <trimcharacter@@Base+0x80>
    23b0:	ldrb	r2, [r4]
    23b4:	cmp	r2, #0
    23b8:	beq	2424 <trimcharacter@@Base+0x80>
    23bc:	cmp	r2, r1
    23c0:	bne	23d0 <trimcharacter@@Base+0x2c>
    23c4:	ldrb	r3, [r4, #1]!
    23c8:	cmp	r3, r2
    23cc:	beq	23c4 <trimcharacter@@Base+0x20>
    23d0:	mov	r0, r4
    23d4:	mov	r5, r1
    23d8:	bl	f44 <o_strlen@plt>
    23dc:	sub	r0, r0, #1
    23e0:	add	r2, r4, r0
    23e4:	cmp	r2, r4
    23e8:	bls	241c <trimcharacter@@Base+0x78>
    23ec:	ldrb	r3, [r4, r0]
    23f0:	cmp	r3, r5
    23f4:	bne	241c <trimcharacter@@Base+0x78>
    23f8:	sub	r3, r2, #1
    23fc:	b	2410 <trimcharacter@@Base+0x6c>
    2400:	ldrb	r0, [r3]
    2404:	sub	r3, r3, #1
    2408:	cmp	r0, r5
    240c:	bne	241c <trimcharacter@@Base+0x78>
    2410:	cmp	r3, r4
    2414:	mov	r2, r3
    2418:	bne	2400 <trimcharacter@@Base+0x5c>
    241c:	mov	r3, #0
    2420:	strb	r3, [r2, #1]
    2424:	mov	r0, r4
    2428:	pop	{r4, r5, r6, pc}

0000242c <string_array_has_value@@Base>:
    242c:	cmp	r0, #0
    2430:	cmpne	r1, #0
    2434:	beq	2480 <string_array_has_value@@Base+0x54>
    2438:	push	{r4, r5, r6, lr}
    243c:	mov	r4, r0
    2440:	ldr	r0, [r0]
    2444:	cmp	r0, #0
    2448:	beq	2478 <string_array_has_value@@Base+0x4c>
    244c:	mov	r5, r1
    2450:	b	2460 <string_array_has_value@@Base+0x34>
    2454:	ldr	r0, [r4, #4]!
    2458:	cmp	r0, #0
    245c:	beq	2478 <string_array_has_value@@Base+0x4c>
    2460:	mov	r1, r5
    2464:	bl	f20 <o_strcmp@plt>
    2468:	cmp	r0, #0
    246c:	bne	2454 <string_array_has_value@@Base+0x28>
    2470:	mov	r0, #1
    2474:	pop	{r4, r5, r6, pc}
    2478:	mov	r0, #0
    247c:	pop	{r4, r5, r6, pc}
    2480:	mov	r0, #0
    2484:	bx	lr

00002488 <string_array_has_value_case@@Base>:
    2488:	cmp	r0, #0
    248c:	cmpne	r1, #0
    2490:	beq	24dc <string_array_has_value_case@@Base+0x54>
    2494:	push	{r4, r5, r6, lr}
    2498:	mov	r4, r0
    249c:	ldr	r0, [r0]
    24a0:	cmp	r0, #0
    24a4:	beq	24d4 <string_array_has_value_case@@Base+0x4c>
    24a8:	mov	r5, r1
    24ac:	b	24bc <string_array_has_value_case@@Base+0x34>
    24b0:	ldr	r0, [r4, #4]!
    24b4:	cmp	r0, #0
    24b8:	beq	24d4 <string_array_has_value_case@@Base+0x4c>
    24bc:	mov	r1, r5
    24c0:	bl	f50 <o_strcasecmp@plt>
    24c4:	cmp	r0, #0
    24c8:	bne	24b0 <string_array_has_value_case@@Base+0x28>
    24cc:	mov	r0, #1
    24d0:	pop	{r4, r5, r6, pc}
    24d4:	mov	r0, #0
    24d8:	pop	{r4, r5, r6, pc}
    24dc:	mov	r0, #0
    24e0:	bx	lr

000024e4 <string_array_has_value_n@@Base>:
    24e4:	cmp	r0, #0
    24e8:	cmpne	r1, #0
    24ec:	beq	2540 <string_array_has_value_n@@Base+0x5c>
    24f0:	push	{r4, r5, r6, lr}
    24f4:	mov	r4, r0
    24f8:	ldr	r0, [r0]
    24fc:	cmp	r0, #0
    2500:	beq	2538 <string_array_has_value_n@@Base+0x54>
    2504:	mov	r6, r1
    2508:	mov	r5, r2
    250c:	b	251c <string_array_has_value_n@@Base+0x38>
    2510:	ldr	r0, [r4, #4]!
    2514:	cmp	r0, #0
    2518:	beq	2538 <string_array_has_value_n@@Base+0x54>
    251c:	mov	r2, r5
    2520:	mov	r1, r6
    2524:	bl	1028 <o_strncmp@plt>
    2528:	cmp	r0, #0
    252c:	bne	2510 <string_array_has_value_n@@Base+0x2c>
    2530:	mov	r0, #1
    2534:	pop	{r4, r5, r6, pc}
    2538:	mov	r0, #0
    253c:	pop	{r4, r5, r6, pc}
    2540:	mov	r0, #0
    2544:	bx	lr

00002548 <string_array_has_value_ncase@@Base>:
    2548:	cmp	r0, #0
    254c:	cmpne	r1, #0
    2550:	beq	25a4 <string_array_has_value_ncase@@Base+0x5c>
    2554:	push	{r4, r5, r6, lr}
    2558:	mov	r4, r0
    255c:	ldr	r0, [r0]
    2560:	cmp	r0, #0
    2564:	beq	259c <string_array_has_value_ncase@@Base+0x54>
    2568:	mov	r6, r1
    256c:	mov	r5, r2
    2570:	b	2580 <string_array_has_value_ncase@@Base+0x38>
    2574:	ldr	r0, [r4, #4]!
    2578:	cmp	r0, #0
    257c:	beq	259c <string_array_has_value_ncase@@Base+0x54>
    2580:	mov	r2, r5
    2584:	mov	r1, r6
    2588:	bl	e90 <o_strncasecmp@plt>
    258c:	cmp	r0, #0
    2590:	bne	2574 <string_array_has_value_ncase@@Base+0x2c>
    2594:	mov	r0, #1
    2598:	pop	{r4, r5, r6, pc}
    259c:	mov	r0, #0
    25a0:	pop	{r4, r5, r6, pc}
    25a4:	mov	r0, #0
    25a8:	bx	lr

000025ac <string_array_has_trimmed_value@@Base>:
    25ac:	cmp	r0, #0
    25b0:	cmpne	r1, #0
    25b4:	push	{r4, r5, r6, r7, r8, lr}
    25b8:	movne	r4, #1
    25bc:	moveq	r4, #0
    25c0:	bne	25cc <string_array_has_trimmed_value@@Base+0x20>
    25c4:	mov	r0, r4
    25c8:	pop	{r4, r5, r6, r7, r8, pc}
    25cc:	mov	r5, r0
    25d0:	mov	r0, r1
    25d4:	bl	efc <o_strdup@plt>
    25d8:	subs	r8, r0, #0
    25dc:	beq	2630 <string_array_has_trimmed_value@@Base+0x84>
    25e0:	bl	f2c <trimwhitespace@plt>
    25e4:	mov	r7, r0
    25e8:	ldr	r0, [r5]
    25ec:	cmp	r0, #0
    25f0:	bne	2624 <string_array_has_trimmed_value@@Base+0x78>
    25f4:	b	2630 <string_array_has_trimmed_value@@Base+0x84>
    25f8:	bl	f2c <trimwhitespace@plt>
    25fc:	mov	r1, r7
    2600:	bl	f20 <o_strcmp@plt>
    2604:	mov	r4, r0
    2608:	mov	r0, r6
    260c:	bl	ed8 <o_free@plt>
    2610:	ldr	r0, [r5, #4]!
    2614:	cmp	r0, #0
    2618:	beq	2644 <string_array_has_trimmed_value@@Base+0x98>
    261c:	cmp	r4, #0
    2620:	beq	2650 <string_array_has_trimmed_value@@Base+0xa4>
    2624:	bl	efc <o_strdup@plt>
    2628:	subs	r6, r0, #0
    262c:	bne	25f8 <string_array_has_trimmed_value@@Base+0x4c>
    2630:	mov	r4, #0
    2634:	mov	r0, r8
    2638:	bl	ed8 <o_free@plt>
    263c:	mov	r0, r4
    2640:	pop	{r4, r5, r6, r7, r8, pc}
    2644:	clz	r4, r4
    2648:	lsr	r4, r4, #5
    264c:	b	2634 <string_array_has_trimmed_value@@Base+0x88>
    2650:	mov	r4, #1
    2654:	b	2634 <string_array_has_trimmed_value@@Base+0x88>

00002658 <pointer_list_init@@Base>:
    2658:	cmp	r0, #0
    265c:	movne	r3, #0
    2660:	strne	r3, [r0]
    2664:	strne	r3, [r0, #4]
    2668:	bx	lr

0000266c <pointer_list_size@@Base>:
    266c:	cmp	r0, #0
    2670:	ldrne	r0, [r0]
    2674:	bx	lr

00002678 <pointer_list_append@@Base>:
    2678:	push	{r4, r5, r6, lr}
    267c:	subs	r4, r0, #0
    2680:	beq	26c4 <pointer_list_append@@Base+0x4c>
    2684:	ldr	r3, [r4]
    2688:	mov	r6, r1
    268c:	add	r3, r3, #1
    2690:	ldr	r0, [r4, #4]
    2694:	lsl	r1, r3, #2
    2698:	bl	f5c <o_realloc@plt>
    269c:	cmp	r0, #0
    26a0:	mov	r5, r0
    26a4:	str	r0, [r4, #4]
    26a8:	beq	26cc <pointer_list_append@@Base+0x54>
    26ac:	ldr	r3, [r4]
    26b0:	mov	r0, #1
    26b4:	add	r2, r3, r0
    26b8:	str	r6, [r5, r3, lsl #2]
    26bc:	str	r2, [r4]
    26c0:	pop	{r4, r5, r6, pc}
    26c4:	mov	r0, r4
    26c8:	pop	{r4, r5, r6, pc}
    26cc:	bl	ed8 <o_free@plt>
    26d0:	str	r5, [r4, #4]
    26d4:	mov	r0, r5
    26d8:	pop	{r4, r5, r6, pc}

000026dc <pointer_list_get_at@@Base>:
    26dc:	cmp	r0, #0
    26e0:	bxeq	lr
    26e4:	ldr	r3, [r0]
    26e8:	cmp	r3, r1
    26ec:	ldrhi	r3, [r0, #4]
    26f0:	ldrhi	r0, [r3, r1, lsl #2]
    26f4:	movls	r0, #0
    26f8:	bx	lr

000026fc <pointer_list_remove_at@@Base>:
    26fc:	push	{r4, r5, r6, lr}
    2700:	subs	r4, r0, #0
    2704:	beq	2774 <pointer_list_remove_at@@Base+0x78>
    2708:	ldr	r5, [r4]
    270c:	cmp	r5, r1
    2710:	bls	2774 <pointer_list_remove_at@@Base+0x78>
    2714:	sub	lr, r5, #1
    2718:	cmp	r1, lr
    271c:	lslcc	r3, r1, #2
    2720:	bcs	2744 <pointer_list_remove_at@@Base+0x48>
    2724:	ldr	r0, [r4, #4]
    2728:	add	r2, r3, #4
    272c:	add	r1, r1, #1
    2730:	ldr	ip, [r0, r2]
    2734:	cmp	r1, lr
    2738:	str	ip, [r0, r3]
    273c:	mov	r3, r2
    2740:	bne	2724 <pointer_list_remove_at@@Base+0x28>
    2744:	cmp	r5, #1
    2748:	bls	277c <pointer_list_remove_at@@Base+0x80>
    274c:	sub	r1, r5, #-1073741823	; 0xc0000001
    2750:	ldr	r0, [r4, #4]
    2754:	lsl	r1, r1, #2
    2758:	bl	f5c <o_realloc@plt>
    275c:	str	r0, [r4, #4]
    2760:	ldr	r3, [r4]
    2764:	mov	r0, #1
    2768:	sub	r3, r3, #1
    276c:	str	r3, [r4]
    2770:	pop	{r4, r5, r6, pc}
    2774:	mov	r0, #0
    2778:	pop	{r4, r5, r6, pc}
    277c:	ldr	r0, [r4, #4]
    2780:	bl	ed8 <o_free@plt>
    2784:	mov	r3, #0
    2788:	str	r3, [r4, #4]
    278c:	b	2760 <pointer_list_remove_at@@Base+0x64>

00002790 <pointer_list_clean@@Base>:
    2790:	push	{r4, r5, r6, lr}
    2794:	subs	r5, r0, #0
    2798:	popeq	{r4, r5, r6, pc}
    279c:	bl	fe0 <pointer_list_size@plt>
    27a0:	subs	r4, r0, #0
    27a4:	popeq	{r4, r5, r6, pc}
    27a8:	sub	r4, r4, #1
    27ac:	mov	r1, r4
    27b0:	mov	r0, r5
    27b4:	bl	ee4 <pointer_list_remove_at@plt>
    27b8:	cmp	r4, #0
    27bc:	bne	27a8 <pointer_list_clean@@Base+0x18>
    27c0:	pop	{r4, r5, r6, pc}

000027c4 <pointer_list_clean_free@@Base>:
    27c4:	push	{r4, r5, r6, lr}
    27c8:	subs	r5, r0, #0
    27cc:	popeq	{r4, r5, r6, pc}
    27d0:	mov	r6, r1
    27d4:	bl	fe0 <pointer_list_size@plt>
    27d8:	subs	r4, r0, #0
    27dc:	popeq	{r4, r5, r6, pc}
    27e0:	sub	r4, r4, #1
    27e4:	mov	r1, r4
    27e8:	mov	r0, r5
    27ec:	bl	e84 <pointer_list_get_at@plt>
    27f0:	blx	r6
    27f4:	mov	r1, r4
    27f8:	mov	r0, r5
    27fc:	bl	ee4 <pointer_list_remove_at@plt>
    2800:	cmp	r4, #0
    2804:	bne	27e0 <pointer_list_clean_free@@Base+0x1c>
    2808:	pop	{r4, r5, r6, pc}

0000280c <pointer_list_remove_at_free@@Base>:
    280c:	subs	r3, r0, #0
    2810:	beq	2850 <pointer_list_remove_at_free@@Base+0x44>
    2814:	push	{r4, r5, r6, lr}
    2818:	mov	r5, r1
    281c:	ldr	lr, [r3]
    2820:	cmp	lr, r1
    2824:	bhi	2830 <pointer_list_remove_at_free@@Base+0x24>
    2828:	mov	r0, #0
    282c:	pop	{r4, r5, r6, pc}
    2830:	mov	r4, r3
    2834:	mov	r6, r2
    2838:	bl	e84 <pointer_list_get_at@plt>
    283c:	blx	r6
    2840:	mov	r1, r5
    2844:	mov	r0, r4
    2848:	pop	{r4, r5, r6, lr}
    284c:	b	ee4 <pointer_list_remove_at@plt>
    2850:	mov	r0, r3
    2854:	bx	lr

00002858 <pointer_list_insert_at@@Base>:
    2858:	push	{r4, r5, r6, lr}
    285c:	subs	r4, r0, #0
    2860:	beq	2870 <pointer_list_insert_at@@Base+0x18>
    2864:	ldr	r3, [r4]
    2868:	cmp	r3, r2
    286c:	bcs	2878 <pointer_list_insert_at@@Base+0x20>
    2870:	mov	r0, #0
    2874:	pop	{r4, r5, r6, pc}
    2878:	mov	r6, r1
    287c:	add	r1, r3, #1
    2880:	ldr	r0, [r4, #4]
    2884:	lsl	r1, r1, #2
    2888:	mov	r5, r2
    288c:	bl	f5c <o_realloc@plt>
    2890:	cmp	r0, #0
    2894:	str	r0, [r4, #4]
    2898:	beq	2870 <pointer_list_insert_at@@Base+0x18>
    289c:	ldr	r1, [r4]
    28a0:	cmp	r5, r1
    28a4:	bcs	28ec <pointer_list_insert_at@@Base+0x94>
    28a8:	lsl	r3, r1, #2
    28ac:	mov	ip, r1
    28b0:	b	28b8 <pointer_list_insert_at@@Base+0x60>
    28b4:	ldr	r0, [r4, #4]
    28b8:	add	r2, r0, r3
    28bc:	sub	ip, ip, #1
    28c0:	ldr	r2, [r2, #-4]
    28c4:	cmp	r5, ip
    28c8:	str	r2, [r0, r3]
    28cc:	sub	r3, r3, #4
    28d0:	bne	28b4 <pointer_list_insert_at@@Base+0x5c>
    28d4:	ldr	r3, [r4, #4]
    28d8:	mov	r0, #1
    28dc:	add	r1, r1, r0
    28e0:	str	r6, [r3, r5, lsl #2]
    28e4:	str	r1, [r4]
    28e8:	pop	{r4, r5, r6, pc}
    28ec:	mov	r3, r0
    28f0:	b	28d8 <pointer_list_insert_at@@Base+0x80>

000028f4 <pointer_list_remove_pointer@@Base>:
    28f4:	cmp	r0, #0
    28f8:	bxeq	lr
    28fc:	push	{lr}		; (str lr, [sp, #-4]!)
    2900:	ldr	lr, [r0]
    2904:	cmp	lr, #0
    2908:	beq	293c <pointer_list_remove_pointer@@Base+0x48>
    290c:	ldr	r2, [r0, #4]
    2910:	ldr	r3, [r2]
    2914:	cmp	r1, r3
    2918:	movne	r3, #0
    291c:	bne	2930 <pointer_list_remove_pointer@@Base+0x3c>
    2920:	b	2944 <pointer_list_remove_pointer@@Base+0x50>
    2924:	ldr	ip, [r2, #4]!
    2928:	cmp	ip, r1
    292c:	beq	2948 <pointer_list_remove_pointer@@Base+0x54>
    2930:	add	r3, r3, #1
    2934:	cmp	r3, lr
    2938:	bne	2924 <pointer_list_remove_pointer@@Base+0x30>
    293c:	mov	r0, #0
    2940:	pop	{pc}		; (ldr pc, [sp], #4)
    2944:	mov	r3, #0
    2948:	mov	r1, r3
    294c:	pop	{lr}		; (ldr lr, [sp], #4)
    2950:	b	ee4 <pointer_list_remove_at@plt>

00002954 <pointer_list_remove_pointer_free@@Base>:
    2954:	push	{r4, r5, r6, lr}
    2958:	subs	r5, r0, #0
    295c:	beq	299c <pointer_list_remove_pointer_free@@Base+0x48>
    2960:	ldr	lr, [r5]
    2964:	cmp	lr, #0
    2968:	beq	299c <pointer_list_remove_pointer_free@@Base+0x48>
    296c:	ldr	r3, [r5, #4]
    2970:	ldr	r0, [r3]
    2974:	cmp	r1, r0
    2978:	movne	r4, #0
    297c:	bne	2990 <pointer_list_remove_pointer_free@@Base+0x3c>
    2980:	b	29a4 <pointer_list_remove_pointer_free@@Base+0x50>
    2984:	ldr	ip, [r3, #4]!
    2988:	cmp	ip, r1
    298c:	beq	29a8 <pointer_list_remove_pointer_free@@Base+0x54>
    2990:	add	r4, r4, #1
    2994:	cmp	r4, lr
    2998:	bne	2984 <pointer_list_remove_pointer_free@@Base+0x30>
    299c:	mov	r0, #0
    29a0:	pop	{r4, r5, r6, pc}
    29a4:	mov	r4, #0
    29a8:	mov	r0, r1
    29ac:	blx	r2
    29b0:	mov	r1, r4
    29b4:	mov	r0, r5
    29b8:	pop	{r4, r5, r6, lr}
    29bc:	b	ee4 <pointer_list_remove_at@plt>

Disassembly of section .fini:

000029c0 <.fini>:
    29c0:	push	{r3, lr}
    29c4:	pop	{r3, pc}
