
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	1145c <__assert_fail@plt+0x48>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	ip, r1, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <pause@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <read@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <nanosleep@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <fwrite_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <fputc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <rawmemchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <poll@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <__fxstat64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__poll_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <open64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <__freading@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <inotify_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <memrchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <inotify_add_watch@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__cxa_atexit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <strtod@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <memchr@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fclose@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <fseeko64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <strtod_l@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <fcntl64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <__overflow@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <newlocale@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <bindtextdomain@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <__xstat64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <isatty@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <inotify_rm_watch@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3368]!	; 0xd28

00011408 <__lxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3360]!	; 0xd20

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00011420 <.text>:
   11420:	mov	fp, #0
   11424:	mov	lr, #0
   11428:	pop	{r1}		; (ldr r1, [sp], #4)
   1142c:	mov	r2, sp
   11430:	push	{r2}		; (str r2, [sp, #-4]!)
   11434:	push	{r0}		; (str r0, [sp, #-4]!)
   11438:	ldr	ip, [pc, #16]	; 11450 <__assert_fail@plt+0x3c>
   1143c:	push	{ip}		; (str ip, [sp, #-4]!)
   11440:	ldr	r0, [pc, #12]	; 11454 <__assert_fail@plt+0x40>
   11444:	ldr	r3, [pc, #12]	; 11458 <__assert_fail@plt+0x44>
   11448:	bl	1124c <__libc_start_main@plt>
   1144c:	bl	113f0 <abort@plt>
   11450:	andeq	ip, r1, r4, asr #3
   11454:	andeq	r3, r1, r8, ror r6
   11458:	andeq	ip, r1, r4, ror #2
   1145c:	ldr	r3, [pc, #20]	; 11478 <__assert_fail@plt+0x64>
   11460:	ldr	r2, [pc, #20]	; 1147c <__assert_fail@plt+0x68>
   11464:	add	r3, pc, r3
   11468:	ldr	r2, [r3, r2]
   1146c:	cmp	r2, #0
   11470:	bxeq	lr
   11474:	b	11264 <__gmon_start__@plt>
   11478:	muleq	r1, r4, fp
   1147c:	andeq	r0, r0, r8, lsr r1
   11480:	ldr	r0, [pc, #24]	; 114a0 <__assert_fail@plt+0x8c>
   11484:	ldr	r3, [pc, #24]	; 114a4 <__assert_fail@plt+0x90>
   11488:	cmp	r3, r0
   1148c:	bxeq	lr
   11490:	ldr	r3, [pc, #16]	; 114a8 <__assert_fail@plt+0x94>
   11494:	cmp	r3, #0
   11498:	bxeq	lr
   1149c:	bx	r3
   114a0:	andeq	lr, r2, ip, lsr #3
   114a4:	andeq	lr, r2, ip, lsr #3
   114a8:	andeq	r0, r0, r0
   114ac:	ldr	r0, [pc, #36]	; 114d8 <__assert_fail@plt+0xc4>
   114b0:	ldr	r1, [pc, #36]	; 114dc <__assert_fail@plt+0xc8>
   114b4:	sub	r1, r1, r0
   114b8:	asr	r1, r1, #2
   114bc:	add	r1, r1, r1, lsr #31
   114c0:	asrs	r1, r1, #1
   114c4:	bxeq	lr
   114c8:	ldr	r3, [pc, #16]	; 114e0 <__assert_fail@plt+0xcc>
   114cc:	cmp	r3, #0
   114d0:	bxeq	lr
   114d4:	bx	r3
   114d8:	andeq	lr, r2, ip, lsr #3
   114dc:	andeq	lr, r2, ip, lsr #3
   114e0:	andeq	r0, r0, r0
   114e4:	push	{r4, lr}
   114e8:	ldr	r4, [pc, #24]	; 11508 <__assert_fail@plt+0xf4>
   114ec:	ldrb	r3, [r4]
   114f0:	cmp	r3, #0
   114f4:	popne	{r4, pc}
   114f8:	bl	11480 <__assert_fail@plt+0x6c>
   114fc:	mov	r3, #1
   11500:	strb	r3, [r4]
   11504:	pop	{r4, pc}
   11508:	andeq	lr, r2, ip, asr #3
   1150c:	b	114ac <__assert_fail@plt+0x98>
   11510:	ldr	r3, [r0, #60]	; 0x3c
   11514:	udiv	r0, r3, r1
   11518:	mls	r0, r0, r1, r3
   1151c:	bx	lr
   11520:	ldr	r0, [r0, #60]	; 0x3c
   11524:	ldr	r3, [r1, #60]	; 0x3c
   11528:	cmp	r0, r3
   1152c:	movne	r0, #0
   11530:	moveq	r0, #1
   11534:	bx	lr
   11538:	str	r4, [sp, #-8]!
   1153c:	str	lr, [sp, #4]
   11540:	movw	r3, #57672	; 0xe148
   11544:	movt	r3, #2
   11548:	ldrb	ip, [r3]
   1154c:	movw	r2, #52884	; 0xce94
   11550:	movt	r2, #1
   11554:	movw	r1, #49996	; 0xc34c
   11558:	movt	r1, #1
   1155c:	mov	r3, r0
   11560:	cmp	ip, #0
   11564:	moveq	r2, r1
   11568:	movw	r1, #49984	; 0xc340
   1156c:	movt	r1, #1
   11570:	mov	r0, #1
   11574:	bl	11300 <__printf_chk@plt>
   11578:	movw	r3, #57672	; 0xe148
   1157c:	movt	r3, #2
   11580:	mov	r2, #0
   11584:	strb	r2, [r3]
   11588:	ldr	r4, [sp]
   1158c:	add	sp, sp, #4
   11590:	pop	{pc}		; (ldr pc, [sp], #4)
   11594:	str	r4, [sp, #-8]!
   11598:	str	lr, [sp, #4]
   1159c:	ldr	r4, [r0]
   115a0:	movw	r1, #50000	; 0xc350
   115a4:	movt	r1, #1
   115a8:	mov	r0, r4
   115ac:	bl	110cc <strcmp@plt>
   115b0:	cmp	r0, #0
   115b4:	beq	115c8 <__assert_fail@plt+0x1b4>
   115b8:	mov	r0, r4
   115bc:	ldr	r4, [sp]
   115c0:	add	sp, sp, #4
   115c4:	pop	{pc}		; (ldr pc, [sp], #4)
   115c8:	mov	r2, #5
   115cc:	movw	r1, #50004	; 0xc354
   115d0:	movt	r1, #1
   115d4:	bl	11174 <dcgettext@plt>
   115d8:	mov	r4, r0
   115dc:	b	115b8 <__assert_fail@plt+0x1a4>
   115e0:	add	r3, r0, #1
   115e4:	cmp	r3, #1
   115e8:	bxls	lr
   115ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   115f0:	strd	r6, [sp, #8]
   115f4:	str	lr, [sp, #16]
   115f8:	sub	sp, sp, #12
   115fc:	mov	r5, r1
   11600:	mov	r4, r0
   11604:	bl	113fc <close@plt>
   11608:	cmp	r0, #0
   1160c:	bne	11624 <__assert_fail@plt+0x210>
   11610:	add	sp, sp, #12
   11614:	ldrd	r4, [sp]
   11618:	ldrd	r6, [sp, #8]
   1161c:	add	sp, sp, #16
   11620:	pop	{pc}		; (ldr pc, [sp], #4)
   11624:	bl	112dc <__errno_location@plt>
   11628:	ldr	r6, [r0]
   1162c:	mov	r2, #5
   11630:	movw	r1, #50020	; 0xc364
   11634:	movt	r1, #1
   11638:	mov	r0, #0
   1163c:	bl	11174 <dcgettext@plt>
   11640:	mov	r7, r0
   11644:	mov	r1, r5
   11648:	mov	r0, #4
   1164c:	bl	1a050 <__assert_fail@plt+0x8c3c>
   11650:	str	r4, [sp]
   11654:	mov	r3, r0
   11658:	mov	r2, r7
   1165c:	mov	r1, r6
   11660:	mov	r0, #0
   11664:	bl	1121c <error@plt>
   11668:	b	11610 <__assert_fail@plt+0x1fc>
   1166c:	strd	r4, [sp, #-16]!
   11670:	str	r6, [sp, #8]
   11674:	str	lr, [sp, #12]
   11678:	subs	r4, r1, #0
   1167c:	beq	116a0 <__assert_fail@plt+0x28c>
   11680:	movw	r3, #57796	; 0xe1c4
   11684:	movt	r3, #2
   11688:	ldr	r3, [r3]
   1168c:	mov	r2, r4
   11690:	mov	r1, #1
   11694:	bl	11150 <fwrite_unlocked@plt>
   11698:	cmp	r4, r0
   1169c:	bhi	116b0 <__assert_fail@plt+0x29c>
   116a0:	ldrd	r4, [sp]
   116a4:	ldr	r6, [sp, #8]
   116a8:	add	sp, sp, #12
   116ac:	pop	{pc}		; (ldr pc, [sp], #4)
   116b0:	movw	r3, #57796	; 0xe1c4
   116b4:	movt	r3, #2
   116b8:	ldr	r0, [r3]
   116bc:	bl	113a8 <clearerr_unlocked@plt>
   116c0:	bl	112dc <__errno_location@plt>
   116c4:	ldr	r4, [r0]
   116c8:	mov	r2, #5
   116cc:	movw	r1, #50040	; 0xc378
   116d0:	movt	r1, #1
   116d4:	mov	r0, #0
   116d8:	bl	11174 <dcgettext@plt>
   116dc:	mov	r5, r0
   116e0:	movw	r1, #50060	; 0xc38c
   116e4:	movt	r1, #1
   116e8:	mov	r0, #4
   116ec:	bl	1a050 <__assert_fail@plt+0x8c3c>
   116f0:	mov	r3, r0
   116f4:	mov	r2, r5
   116f8:	mov	r1, r4
   116fc:	mov	r0, #1
   11700:	bl	1121c <error@plt>
   11704:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11708:	strd	r6, [sp, #8]
   1170c:	strd	r8, [sp, #16]
   11710:	strd	sl, [sp, #24]
   11714:	str	lr, [sp, #32]
   11718:	sub	sp, sp, #8192	; 0x2000
   1171c:	sub	sp, sp, #12
   11720:	str	r0, [sp, #4]
   11724:	str	r1, [sp]
   11728:	mov	r4, r2
   1172c:	mov	r5, r3
   11730:	add	r3, sp, #8192	; 0x2000
   11734:	add	r3, r3, #48	; 0x30
   11738:	ldr	r8, [r3]
   1173c:	orrs	r3, r4, r5
   11740:	moveq	r0, #0
   11744:	beq	117cc <__assert_fail@plt+0x3b8>
   11748:	movw	r9, #57808	; 0xe1d0
   1174c:	movt	r9, #2
   11750:	mov	r2, #8192	; 0x2000
   11754:	add	r1, sp, #8
   11758:	ldr	r0, [sp]
   1175c:	bl	1a360 <__assert_fail@plt+0x8f4c>
   11760:	cmp	r0, #0
   11764:	beq	11844 <__assert_fail@plt+0x430>
   11768:	cmn	r0, #1
   1176c:	beq	117ec <__assert_fail@plt+0x3d8>
   11770:	add	r3, sp, #8
   11774:	add	r6, r3, r0
   11778:	ldrd	r2, [r8]
   1177c:	adds	sl, r2, r0
   11780:	adc	fp, r3, #0
   11784:	mov	r2, sl
   11788:	mov	r3, fp
   1178c:	strd	r2, [r8]
   11790:	ldrb	r7, [r9]
   11794:	add	r0, sp, #8
   11798:	sub	r2, r6, r0
   1179c:	mov	r1, r7
   117a0:	bl	11330 <memchr@plt>
   117a4:	cmp	r0, #0
   117a8:	beq	11750 <__assert_fail@plt+0x33c>
   117ac:	add	r0, r0, #1
   117b0:	subs	r4, r4, #1
   117b4:	sbc	r5, r5, #0
   117b8:	orrs	r3, r4, r5
   117bc:	bne	11798 <__assert_fail@plt+0x384>
   117c0:	cmp	r6, r0
   117c4:	movls	r0, #0
   117c8:	bhi	11834 <__assert_fail@plt+0x420>
   117cc:	add	sp, sp, #8192	; 0x2000
   117d0:	add	sp, sp, #12
   117d4:	ldrd	r4, [sp]
   117d8:	ldrd	r6, [sp, #8]
   117dc:	ldrd	r8, [sp, #16]
   117e0:	ldrd	sl, [sp, #24]
   117e4:	add	sp, sp, #32
   117e8:	pop	{pc}		; (ldr pc, [sp], #4)
   117ec:	bl	112dc <__errno_location@plt>
   117f0:	ldr	r4, [r0]
   117f4:	mov	r2, #5
   117f8:	movw	r1, #50076	; 0xc39c
   117fc:	movt	r1, #1
   11800:	mov	r0, #0
   11804:	bl	11174 <dcgettext@plt>
   11808:	mov	r5, r0
   1180c:	ldr	r1, [sp, #4]
   11810:	mov	r0, #4
   11814:	bl	1a050 <__assert_fail@plt+0x8c3c>
   11818:	mov	r3, r0
   1181c:	mov	r2, r5
   11820:	mov	r1, r4
   11824:	mov	r0, #0
   11828:	bl	1121c <error@plt>
   1182c:	mov	r0, #1
   11830:	b	117cc <__assert_fail@plt+0x3b8>
   11834:	sub	r1, r6, r0
   11838:	bl	1166c <__assert_fail@plt+0x258>
   1183c:	mov	r0, #0
   11840:	b	117cc <__assert_fail@plt+0x3b8>
   11844:	mvn	r0, #0
   11848:	b	117cc <__assert_fail@plt+0x3b8>
   1184c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11850:	strd	r6, [sp, #8]
   11854:	strd	r8, [sp, #16]
   11858:	strd	sl, [sp, #24]
   1185c:	str	lr, [sp, #32]
   11860:	sub	sp, sp, #8192	; 0x2000
   11864:	sub	sp, sp, #12
   11868:	mov	fp, r0
   1186c:	str	r1, [sp, #4]
   11870:	str	r2, [sp]
   11874:	add	r3, sp, #8192	; 0x2000
   11878:	add	r3, r3, #48	; 0x30
   1187c:	ldrd	r8, [r3]
   11880:	mov	r6, r8
   11884:	mov	r7, r9
   11888:	mov	r5, #0
   1188c:	mov	sl, r5
   11890:	b	11914 <__assert_fail@plt+0x500>
   11894:	bl	112dc <__errno_location@plt>
   11898:	ldr	r4, [r0]
   1189c:	cmp	r4, #11
   118a0:	bne	118cc <__assert_fail@plt+0x4b8>
   118a4:	mov	r0, r5
   118a8:	mov	r1, sl
   118ac:	add	sp, sp, #8192	; 0x2000
   118b0:	add	sp, sp, #12
   118b4:	ldrd	r4, [sp]
   118b8:	ldrd	r6, [sp, #8]
   118bc:	ldrd	r8, [sp, #16]
   118c0:	ldrd	sl, [sp, #24]
   118c4:	add	sp, sp, #32
   118c8:	pop	{pc}		; (ldr pc, [sp], #4)
   118cc:	mov	r2, #5
   118d0:	movw	r1, #50076	; 0xc39c
   118d4:	movt	r1, #1
   118d8:	mov	r0, #0
   118dc:	bl	11174 <dcgettext@plt>
   118e0:	mov	r5, r0
   118e4:	ldr	r1, [sp, #4]
   118e8:	mov	r0, #4
   118ec:	bl	1a050 <__assert_fail@plt+0x8c3c>
   118f0:	mov	r3, r0
   118f4:	mov	r2, r5
   118f8:	mov	r1, r4
   118fc:	mov	r0, #1
   11900:	bl	1121c <error@plt>
   11904:	ldr	r0, [sp, #4]
   11908:	bl	11538 <__assert_fail@plt+0x124>
   1190c:	b	1194c <__assert_fail@plt+0x538>
   11910:	mov	fp, #0
   11914:	mov	r2, r6
   11918:	cmp	r7, #0
   1191c:	cmpeq	r6, #8192	; 0x2000
   11920:	movhi	r2, #8192	; 0x2000
   11924:	add	r1, sp, #8
   11928:	ldr	r0, [sp]
   1192c:	bl	1a360 <__assert_fail@plt+0x8f4c>
   11930:	mov	r4, r0
   11934:	cmn	r0, #1
   11938:	beq	11894 <__assert_fail@plt+0x480>
   1193c:	cmp	r0, #0
   11940:	beq	118a4 <__assert_fail@plt+0x490>
   11944:	cmp	fp, #0
   11948:	bne	11904 <__assert_fail@plt+0x4f0>
   1194c:	mov	r1, r4
   11950:	add	r0, sp, #8
   11954:	bl	1166c <__assert_fail@plt+0x258>
   11958:	mov	r3, #0
   1195c:	adds	r5, r5, r4
   11960:	adc	sl, sl, r3
   11964:	mvn	r0, #0
   11968:	mvn	r1, #0
   1196c:	cmp	r9, r1
   11970:	cmpeq	r8, r0
   11974:	beq	11910 <__assert_fail@plt+0x4fc>
   11978:	subs	r6, r6, r4
   1197c:	sbc	r7, r7, r3
   11980:	orrs	r3, r6, r7
   11984:	moveq	r3, #1
   11988:	movne	r3, #0
   1198c:	mvn	r0, #1
   11990:	mvn	r1, #0
   11994:	cmp	r9, r1
   11998:	cmpeq	r8, r0
   1199c:	moveq	r3, #1
   119a0:	cmp	r3, #0
   119a4:	beq	11910 <__assert_fail@plt+0x4fc>
   119a8:	b	118a4 <__assert_fail@plt+0x490>
   119ac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   119b0:	strd	r6, [sp, #8]
   119b4:	strd	r8, [sp, #16]
   119b8:	str	lr, [sp, #24]
   119bc:	sub	sp, sp, #8192	; 0x2000
   119c0:	sub	sp, sp, #4
   119c4:	mov	r4, r2
   119c8:	mov	r5, r3
   119cc:	add	r3, sp, #8192	; 0x2000
   119d0:	add	r3, r3, #32
   119d4:	ldr	r6, [r3]
   119d8:	orrs	r3, r4, r5
   119dc:	beq	11aa8 <__assert_fail@plt+0x694>
   119e0:	mov	r9, r0
   119e4:	mov	r7, r1
   119e8:	mov	r8, #8192	; 0x2000
   119ec:	mov	r2, r8
   119f0:	mov	r1, sp
   119f4:	mov	r0, r7
   119f8:	bl	1a360 <__assert_fail@plt+0x8f4c>
   119fc:	cmp	r0, #0
   11a00:	beq	11ab0 <__assert_fail@plt+0x69c>
   11a04:	cmn	r0, #1
   11a08:	beq	11a4c <__assert_fail@plt+0x638>
   11a0c:	mov	r3, #0
   11a10:	ldr	ip, [r6]
   11a14:	ldr	lr, [r6, #4]
   11a18:	adds	ip, ip, r0
   11a1c:	adc	lr, lr, r3
   11a20:	str	ip, [r6]
   11a24:	str	lr, [r6, #4]
   11a28:	cmp	r3, r5
   11a2c:	cmpeq	r0, r4
   11a30:	bhi	11a94 <__assert_fail@plt+0x680>
   11a34:	subs	r4, r4, r0
   11a38:	sbc	r5, r5, r3
   11a3c:	orrs	r3, r4, r5
   11a40:	bne	119ec <__assert_fail@plt+0x5d8>
   11a44:	mov	r0, #0
   11a48:	b	11ab4 <__assert_fail@plt+0x6a0>
   11a4c:	bl	112dc <__errno_location@plt>
   11a50:	ldr	r4, [r0]
   11a54:	mov	r2, #5
   11a58:	movw	r1, #50076	; 0xc39c
   11a5c:	movt	r1, #1
   11a60:	mov	r0, #0
   11a64:	bl	11174 <dcgettext@plt>
   11a68:	mov	r5, r0
   11a6c:	mov	r1, r9
   11a70:	mov	r0, #4
   11a74:	bl	1a050 <__assert_fail@plt+0x8c3c>
   11a78:	mov	r3, r0
   11a7c:	mov	r2, r5
   11a80:	mov	r1, r4
   11a84:	mov	r0, #0
   11a88:	bl	1121c <error@plt>
   11a8c:	mov	r0, #1
   11a90:	b	11ab4 <__assert_fail@plt+0x6a0>
   11a94:	sub	r1, r0, r4
   11a98:	add	r0, sp, r4
   11a9c:	bl	1166c <__assert_fail@plt+0x258>
   11aa0:	mov	r0, #0
   11aa4:	b	11ab4 <__assert_fail@plt+0x6a0>
   11aa8:	mov	r0, #0
   11aac:	b	11ab4 <__assert_fail@plt+0x6a0>
   11ab0:	mvn	r0, #0
   11ab4:	add	sp, sp, #8192	; 0x2000
   11ab8:	add	sp, sp, #4
   11abc:	ldrd	r4, [sp]
   11ac0:	ldrd	r6, [sp, #8]
   11ac4:	ldrd	r8, [sp, #16]
   11ac8:	add	sp, sp, #24
   11acc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ad0:	strd	r4, [sp, #-20]!	; 0xffffffec
   11ad4:	strd	r6, [sp, #8]
   11ad8:	str	lr, [sp, #16]
   11adc:	sub	sp, sp, #36	; 0x24
   11ae0:	mov	r6, r2
   11ae4:	mov	r7, r3
   11ae8:	ldr	r4, [sp, #56]	; 0x38
   11aec:	str	r4, [sp]
   11af0:	bl	111ec <lseek64@plt>
   11af4:	cmp	r0, #0
   11af8:	sbcs	r3, r1, #0
   11afc:	blt	11b14 <__assert_fail@plt+0x700>
   11b00:	add	sp, sp, #36	; 0x24
   11b04:	ldrd	r4, [sp]
   11b08:	ldrd	r6, [sp, #8]
   11b0c:	add	sp, sp, #16
   11b10:	pop	{pc}		; (ldr pc, [sp], #4)
   11b14:	add	r2, sp, #8
   11b18:	mov	r0, r6
   11b1c:	mov	r1, r7
   11b20:	bl	17edc <__assert_fail@plt+0x6ac8>
   11b24:	mov	r5, r0
   11b28:	cmp	r4, #1
   11b2c:	beq	11b90 <__assert_fail@plt+0x77c>
   11b30:	cmp	r4, #2
   11b34:	beq	11bdc <__assert_fail@plt+0x7c8>
   11b38:	cmp	r4, #0
   11b3c:	bne	11c28 <__assert_fail@plt+0x814>
   11b40:	bl	112dc <__errno_location@plt>
   11b44:	ldr	r4, [r0]
   11b48:	mov	r2, #5
   11b4c:	movw	r1, #50096	; 0xc3b0
   11b50:	movt	r1, #1
   11b54:	mov	r0, #0
   11b58:	bl	11174 <dcgettext@plt>
   11b5c:	mov	r6, r0
   11b60:	ldr	r2, [sp, #60]	; 0x3c
   11b64:	mov	r1, #3
   11b68:	mov	r0, #0
   11b6c:	bl	1a174 <__assert_fail@plt+0x8d60>
   11b70:	str	r5, [sp]
   11b74:	mov	r3, r0
   11b78:	mov	r2, r6
   11b7c:	mov	r1, r4
   11b80:	mov	r0, #0
   11b84:	bl	1121c <error@plt>
   11b88:	mov	r0, #1
   11b8c:	bl	11294 <exit@plt>
   11b90:	bl	112dc <__errno_location@plt>
   11b94:	ldr	r4, [r0]
   11b98:	mov	r2, #5
   11b9c:	movw	r1, #50128	; 0xc3d0
   11ba0:	movt	r1, #1
   11ba4:	mov	r0, #0
   11ba8:	bl	11174 <dcgettext@plt>
   11bac:	mov	r6, r0
   11bb0:	ldr	r2, [sp, #60]	; 0x3c
   11bb4:	mov	r1, #3
   11bb8:	mov	r0, #0
   11bbc:	bl	1a174 <__assert_fail@plt+0x8d60>
   11bc0:	str	r5, [sp]
   11bc4:	mov	r3, r0
   11bc8:	mov	r2, r6
   11bcc:	mov	r1, r4
   11bd0:	mov	r0, #0
   11bd4:	bl	1121c <error@plt>
   11bd8:	b	11b88 <__assert_fail@plt+0x774>
   11bdc:	bl	112dc <__errno_location@plt>
   11be0:	ldr	r4, [r0]
   11be4:	mov	r2, #5
   11be8:	movw	r1, #50168	; 0xc3f8
   11bec:	movt	r1, #1
   11bf0:	mov	r0, #0
   11bf4:	bl	11174 <dcgettext@plt>
   11bf8:	mov	r6, r0
   11bfc:	ldr	r2, [sp, #60]	; 0x3c
   11c00:	mov	r1, #3
   11c04:	mov	r0, #0
   11c08:	bl	1a174 <__assert_fail@plt+0x8d60>
   11c0c:	str	r5, [sp]
   11c10:	mov	r3, r0
   11c14:	mov	r2, r6
   11c18:	mov	r1, r4
   11c1c:	mov	r0, #0
   11c20:	bl	1121c <error@plt>
   11c24:	b	11b88 <__assert_fail@plt+0x774>
   11c28:	bl	113f0 <abort@plt>
   11c2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11c30:	strd	r6, [sp, #8]
   11c34:	strd	r8, [sp, #16]
   11c38:	strd	sl, [sp, #24]
   11c3c:	str	lr, [sp, #32]
   11c40:	sub	sp, sp, #8192	; 0x2000
   11c44:	sub	sp, sp, #28
   11c48:	str	r0, [sp, #12]
   11c4c:	str	r1, [sp, #16]
   11c50:	mov	r4, r2
   11c54:	mov	r5, r3
   11c58:	add	r3, sp, #8256	; 0x2040
   11c5c:	add	r3, r3, #16
   11c60:	ldr	r9, [r3]
   11c64:	orrs	r3, r4, r5
   11c68:	moveq	r0, #1
   11c6c:	beq	11ee4 <__assert_fail@plt+0xad0>
   11c70:	mov	lr, r0
   11c74:	mov	r7, r1
   11c78:	add	r3, sp, #8256	; 0x2040
   11c7c:	add	r3, r3, #8
   11c80:	add	r2, sp, #8256	; 0x2040
   11c84:	ldr	r3, [r3]
   11c88:	ldr	r2, [r2]
   11c8c:	subs	r0, r3, r2
   11c90:	add	r3, sp, #8256	; 0x2040
   11c94:	add	r3, r3, #12
   11c98:	add	r2, sp, #8256	; 0x2040
   11c9c:	add	r2, r2, #4
   11ca0:	ldr	r3, [r3]
   11ca4:	ldr	r2, [r2]
   11ca8:	sbc	r1, r3, r2
   11cac:	asr	r1, r1, #31
   11cb0:	eor	r3, r0, r1
   11cb4:	subs	r3, r3, r1
   11cb8:	ubfx	r3, r3, #0, #13
   11cbc:	eor	r6, r3, r1
   11cc0:	cmp	r6, r1
   11cc4:	subne	r6, r6, r1
   11cc8:	moveq	r6, #8192	; 0x2000
   11ccc:	add	r3, sp, #8256	; 0x2040
   11cd0:	add	r3, r3, #8
   11cd4:	ldrd	sl, [r3]
   11cd8:	subs	sl, sl, r6
   11cdc:	sbc	fp, fp, #0
   11ce0:	str	lr, [sp, #4]
   11ce4:	mov	r3, #0
   11ce8:	str	r3, [sp]
   11cec:	mov	r2, sl
   11cf0:	mov	r3, fp
   11cf4:	mov	r0, r7
   11cf8:	bl	11ad0 <__assert_fail@plt+0x6bc>
   11cfc:	mov	r2, r6
   11d00:	add	r1, sp, #24
   11d04:	mov	r0, r7
   11d08:	bl	1a360 <__assert_fail@plt+0x8f4c>
   11d0c:	mov	r8, r0
   11d10:	cmn	r0, #1
   11d14:	beq	11d68 <__assert_fail@plt+0x954>
   11d18:	adds	r2, sl, r0
   11d1c:	adc	r3, fp, #0
   11d20:	strd	r2, [r9]
   11d24:	cmp	r0, #0
   11d28:	beq	11d54 <__assert_fail@plt+0x940>
   11d2c:	add	r3, sp, #24
   11d30:	add	r2, r3, r0
   11d34:	movw	r3, #57808	; 0xe1d0
   11d38:	movt	r3, #2
   11d3c:	ldrb	r2, [r2, #-1]
   11d40:	ldrb	r3, [r3]
   11d44:	cmp	r2, r3
   11d48:	beq	11d54 <__assert_fail@plt+0x940>
   11d4c:	subs	r4, r4, #1
   11d50:	sbc	r5, r5, #0
   11d54:	movw	r7, #57808	; 0xe1d0
   11d58:	movt	r7, #2
   11d5c:	add	r6, sp, #24
   11d60:	str	r7, [sp, #20]
   11d64:	b	11e60 <__assert_fail@plt+0xa4c>
   11d68:	bl	112dc <__errno_location@plt>
   11d6c:	ldr	r4, [r0]
   11d70:	mov	r2, #5
   11d74:	movw	r1, #50076	; 0xc39c
   11d78:	movt	r1, #1
   11d7c:	mov	r0, #0
   11d80:	bl	11174 <dcgettext@plt>
   11d84:	mov	r5, r0
   11d88:	ldr	r1, [sp, #12]
   11d8c:	mov	r0, #4
   11d90:	bl	1a050 <__assert_fail@plt+0x8c3c>
   11d94:	mov	r3, r0
   11d98:	mov	r2, r5
   11d9c:	mov	r1, r4
   11da0:	mov	r0, #0
   11da4:	bl	1121c <error@plt>
   11da8:	mov	r0, #0
   11dac:	b	11ee4 <__assert_fail@plt+0xad0>
   11db0:	mov	r4, r1
   11db4:	mov	r5, r3
   11db8:	mov	r1, r7
   11dbc:	mov	r0, r6
   11dc0:	bl	112c4 <memrchr@plt>
   11dc4:	cmp	r0, #0
   11dc8:	beq	11df0 <__assert_fail@plt+0x9dc>
   11dcc:	sub	r2, r0, r6
   11dd0:	subs	r1, r4, #1
   11dd4:	sbc	r3, r5, #0
   11dd8:	orrs	ip, r4, r5
   11ddc:	beq	11e78 <__assert_fail@plt+0xa64>
   11de0:	cmp	r2, #0
   11de4:	bne	11db0 <__assert_fail@plt+0x99c>
   11de8:	mov	r4, r1
   11dec:	mov	r5, r3
   11df0:	add	r3, sp, #8256	; 0x2040
   11df4:	ldrd	r2, [r3]
   11df8:	cmp	fp, r3
   11dfc:	cmpeq	sl, r2
   11e00:	beq	11f04 <__assert_fail@plt+0xaf0>
   11e04:	subs	sl, sl, #8192	; 0x2000
   11e08:	sbc	fp, fp, #0
   11e0c:	ldr	r3, [sp, #12]
   11e10:	str	r3, [sp, #4]
   11e14:	mov	r3, #0
   11e18:	str	r3, [sp]
   11e1c:	mov	r2, sl
   11e20:	mov	r3, fp
   11e24:	ldr	r7, [sp, #16]
   11e28:	mov	r0, r7
   11e2c:	bl	11ad0 <__assert_fail@plt+0x6bc>
   11e30:	mov	r2, #8192	; 0x2000
   11e34:	mov	r1, r6
   11e38:	mov	r0, r7
   11e3c:	bl	1a360 <__assert_fail@plt+0x8f4c>
   11e40:	mov	r8, r0
   11e44:	cmn	r0, #1
   11e48:	beq	11f74 <__assert_fail@plt+0xb60>
   11e4c:	adds	r2, sl, r0
   11e50:	adc	r3, fp, #0
   11e54:	strd	r2, [r9]
   11e58:	cmp	r0, #0
   11e5c:	beq	11fbc <__assert_fail@plt+0xba8>
   11e60:	cmp	r8, #0
   11e64:	beq	11df0 <__assert_fail@plt+0x9dc>
   11e68:	ldr	r3, [sp, #20]
   11e6c:	ldrb	r7, [r3]
   11e70:	mov	r2, r8
   11e74:	b	11db8 <__assert_fail@plt+0x9a4>
   11e78:	sub	r1, r8, #1
   11e7c:	sub	r1, r1, r2
   11e80:	add	r0, r0, #1
   11e84:	bl	1166c <__assert_fail@plt+0x258>
   11e88:	adds	r0, sl, r8
   11e8c:	adc	r1, fp, #0
   11e90:	add	r3, sp, #8256	; 0x2040
   11e94:	add	r3, r3, #8
   11e98:	ldr	r3, [r3]
   11e9c:	subs	r2, r3, r0
   11ea0:	add	r3, sp, #8256	; 0x2040
   11ea4:	add	r3, r3, #12
   11ea8:	ldr	r3, [r3]
   11eac:	sbc	r3, r3, r1
   11eb0:	str	r2, [sp]
   11eb4:	str	r3, [sp, #4]
   11eb8:	ldr	r2, [sp, #16]
   11ebc:	ldr	r1, [sp, #12]
   11ec0:	mov	r0, #0
   11ec4:	bl	1184c <__assert_fail@plt+0x438>
   11ec8:	ldr	r3, [r9]
   11ecc:	ldr	r2, [r9, #4]
   11ed0:	adds	r0, r3, r0
   11ed4:	adc	r1, r2, r1
   11ed8:	str	r0, [r9]
   11edc:	str	r1, [r9, #4]
   11ee0:	mov	r0, #1
   11ee4:	add	sp, sp, #8192	; 0x2000
   11ee8:	add	sp, sp, #28
   11eec:	ldrd	r4, [sp]
   11ef0:	ldrd	r6, [sp, #8]
   11ef4:	ldrd	r8, [sp, #16]
   11ef8:	ldrd	sl, [sp, #24]
   11efc:	add	sp, sp, #32
   11f00:	pop	{pc}		; (ldr pc, [sp], #4)
   11f04:	ldr	r5, [sp, #12]
   11f08:	str	r5, [sp, #4]
   11f0c:	mov	r4, #0
   11f10:	str	r4, [sp]
   11f14:	add	r3, sp, #8256	; 0x2040
   11f18:	ldrd	r2, [r3]
   11f1c:	ldr	r6, [sp, #16]
   11f20:	mov	r0, r6
   11f24:	bl	11ad0 <__assert_fail@plt+0x6bc>
   11f28:	add	r3, sp, #8256	; 0x2040
   11f2c:	add	r3, r3, #8
   11f30:	ldrd	r0, [r3]
   11f34:	strd	r0, [sp]
   11f38:	mov	r2, r6
   11f3c:	mov	r1, r5
   11f40:	mov	r0, r4
   11f44:	bl	1184c <__assert_fail@plt+0x438>
   11f48:	add	r3, sp, #8256	; 0x2040
   11f4c:	ldr	r3, [r3]
   11f50:	adds	r0, r3, r0
   11f54:	add	r3, sp, #8256	; 0x2040
   11f58:	add	r3, r3, #4
   11f5c:	ldr	r3, [r3]
   11f60:	adc	r1, r3, r1
   11f64:	str	r0, [r9]
   11f68:	str	r1, [r9, #4]
   11f6c:	mov	r0, #1
   11f70:	b	11ee4 <__assert_fail@plt+0xad0>
   11f74:	bl	112dc <__errno_location@plt>
   11f78:	ldr	r4, [r0]
   11f7c:	mov	r2, #5
   11f80:	movw	r1, #50076	; 0xc39c
   11f84:	movt	r1, #1
   11f88:	mov	r0, #0
   11f8c:	bl	11174 <dcgettext@plt>
   11f90:	mov	r5, r0
   11f94:	ldr	r1, [sp, #12]
   11f98:	mov	r0, #4
   11f9c:	bl	1a050 <__assert_fail@plt+0x8c3c>
   11fa0:	mov	r3, r0
   11fa4:	mov	r2, r5
   11fa8:	mov	r1, r4
   11fac:	mov	r0, #0
   11fb0:	bl	1121c <error@plt>
   11fb4:	mov	r0, #0
   11fb8:	b	11ee4 <__assert_fail@plt+0xad0>
   11fbc:	mov	r0, #1
   11fc0:	b	11ee4 <__assert_fail@plt+0xad0>
   11fc4:	strd	r4, [sp, #-16]!
   11fc8:	str	r6, [sp, #8]
   11fcc:	str	lr, [sp, #12]
   11fd0:	sub	sp, sp, #88	; 0x58
   11fd4:	mov	r5, r1
   11fd8:	mov	r1, sp
   11fdc:	bl	1109c <fstatfs64@plt>
   11fe0:	cmp	r0, #0
   11fe4:	beq	1203c <__assert_fail@plt+0xc28>
   11fe8:	bl	112dc <__errno_location@plt>
   11fec:	ldr	r4, [r0]
   11ff0:	cmp	r4, #38	; 0x26
   11ff4:	moveq	r0, #1
   11ff8:	beq	121e4 <__assert_fail@plt+0xdd0>
   11ffc:	mov	r2, #5
   12000:	movw	r1, #50212	; 0xc424
   12004:	movt	r1, #1
   12008:	mov	r0, #0
   1200c:	bl	11174 <dcgettext@plt>
   12010:	mov	r6, r0
   12014:	mov	r1, r5
   12018:	mov	r0, #4
   1201c:	bl	1a050 <__assert_fail@plt+0x8c3c>
   12020:	mov	r3, r0
   12024:	mov	r2, r6
   12028:	mov	r1, r4
   1202c:	mov	r0, #0
   12030:	bl	1121c <error@plt>
   12034:	mov	r0, #1
   12038:	b	121e4 <__assert_fail@plt+0xdd0>
   1203c:	ldr	r0, [sp]
   12040:	movw	r3, #15685	; 0x3d45
   12044:	movt	r3, #10445	; 0x28cd
   12048:	cmp	r0, r3
   1204c:	beq	12810 <__assert_fail@plt+0x13fc>
   12050:	movw	r3, #15685	; 0x3d45
   12054:	movt	r3, #10445	; 0x28cd
   12058:	cmp	r0, r3
   1205c:	bls	12114 <__assert_fail@plt+0xd00>
   12060:	movw	r3, #25974	; 0x6576
   12064:	movt	r3, #25188	; 0x6264
   12068:	cmp	r0, r3
   1206c:	beq	12918 <__assert_fail@plt+0x1504>
   12070:	movw	r3, #25974	; 0x6576
   12074:	movt	r3, #25188	; 0x6264
   12078:	cmp	r0, r3
   1207c:	bls	12474 <__assert_fail@plt+0x1060>
   12080:	movw	r3, #24931	; 0x6163
   12084:	movt	r3, #29810	; 0x7472
   12088:	cmp	r0, r3
   1208c:	beq	129a0 <__assert_fail@plt+0x158c>
   12090:	movw	r3, #24931	; 0x6163
   12094:	movt	r3, #29810	; 0x7472
   12098:	cmp	r0, r3
   1209c:	bls	12684 <__assert_fail@plt+0x1270>
   120a0:	movw	r3, #33128	; 0x8168
   120a4:	movt	r3, #51582	; 0xc97e
   120a8:	cmp	r0, r3
   120ac:	beq	129e8 <__assert_fail@plt+0x15d4>
   120b0:	movw	r3, #33128	; 0x8168
   120b4:	movt	r3, #51582	; 0xc97e
   120b8:	cmp	r0, r3
   120bc:	bls	12784 <__assert_fail@plt+0x1370>
   120c0:	movw	r3, #57826	; 0xe1e2
   120c4:	movt	r3, #57589	; 0xe0f5
   120c8:	cmp	r0, r3
   120cc:	beq	12a08 <__assert_fail@plt+0x15f4>
   120d0:	movw	r3, #57826	; 0xe1e2
   120d4:	movt	r3, #57589	; 0xe0f5
   120d8:	cmp	r0, r3
   120dc:	bls	127ec <__assert_fail@plt+0x13d8>
   120e0:	movw	r3, #65420	; 0xff8c
   120e4:	movt	r3, #63868	; 0xf97c
   120e8:	cmp	r0, r3
   120ec:	beq	12a18 <__assert_fail@plt+0x1604>
   120f0:	movw	r3, #59465	; 0xe849
   120f4:	movt	r3, #63893	; 0xf995
   120f8:	cmp	r0, r3
   120fc:	beq	12a20 <__assert_fail@plt+0x160c>
   12100:	movw	r3, #8208	; 0x2010
   12104:	movt	r3, #62197	; 0xf2f5
   12108:	subs	r0, r0, r3
   1210c:	movne	r0, #1
   12110:	b	121e4 <__assert_fail@plt+0xdd0>
   12114:	movw	r3, #40866	; 0x9fa2
   12118:	cmp	r0, r3
   1211c:	bhi	1228c <__assert_fail@plt+0xe78>
   12120:	movw	r3, #40864	; 0x9fa0
   12124:	cmp	r0, r3
   12128:	bcs	12818 <__assert_fail@plt+0x1404>
   1212c:	movw	r3, #13364	; 0x3434
   12130:	cmp	r0, r3
   12134:	beq	12820 <__assert_fail@plt+0x140c>
   12138:	bls	12184 <__assert_fail@plt+0xd70>
   1213c:	movw	r3, #18520	; 0x4858
   12140:	cmp	r0, r3
   12144:	beq	12860 <__assert_fail@plt+0x144c>
   12148:	bls	1222c <__assert_fail@plt+0xe18>
   1214c:	movw	r3, #24053	; 0x5df5
   12150:	cmp	r0, r3
   12154:	beq	12880 <__assert_fail@plt+0x146c>
   12158:	bls	12270 <__assert_fail@plt+0xe5c>
   1215c:	movw	r3, #29366	; 0x72b6
   12160:	cmp	r0, r3
   12164:	beq	12890 <__assert_fail@plt+0x147c>
   12168:	movw	r3, #38496	; 0x9660
   1216c:	cmp	r0, r3
   12170:	beq	12898 <__assert_fail@plt+0x1484>
   12174:	movw	r3, #29301	; 0x7275
   12178:	subs	r0, r0, r3
   1217c:	movne	r0, #1
   12180:	b	121e4 <__assert_fail@plt+0xdd0>
   12184:	movw	r3, #4989	; 0x137d
   12188:	cmp	r0, r3
   1218c:	beq	12828 <__assert_fail@plt+0x1414>
   12190:	bls	121c0 <__assert_fail@plt+0xdac>
   12194:	movw	r3, #7377	; 0x1cd1
   12198:	cmp	r0, r3
   1219c:	beq	12848 <__assert_fail@plt+0x1434>
   121a0:	bhi	12210 <__assert_fail@plt+0xdfc>
   121a4:	movw	r3, #4991	; 0x137f
   121a8:	cmp	r0, r3
   121ac:	beq	12850 <__assert_fail@plt+0x143c>
   121b0:	movw	r3, #5007	; 0x138f
   121b4:	subs	r0, r0, r3
   121b8:	movne	r0, #1
   121bc:	b	121e4 <__assert_fail@plt+0xdd0>
   121c0:	movw	r3, #391	; 0x187
   121c4:	cmp	r0, r3
   121c8:	beq	12830 <__assert_fail@plt+0x141c>
   121cc:	cmp	r0, #392	; 0x188
   121d0:	bcs	121f8 <__assert_fail@plt+0xde4>
   121d4:	cmp	r0, #47	; 0x2f
   121d8:	beq	12838 <__assert_fail@plt+0x1424>
   121dc:	subs	r0, r0, #51	; 0x33
   121e0:	movne	r0, #1
   121e4:	add	sp, sp, #88	; 0x58
   121e8:	ldrd	r4, [sp]
   121ec:	ldr	r6, [sp, #8]
   121f0:	add	sp, sp, #12
   121f4:	pop	{pc}		; (ldr pc, [sp], #4)
   121f8:	cmp	r0, #1984	; 0x7c0
   121fc:	beq	12840 <__assert_fail@plt+0x142c>
   12200:	movw	r3, #4979	; 0x1373
   12204:	subs	r0, r0, r3
   12208:	movne	r0, #1
   1220c:	b	121e4 <__assert_fail@plt+0xdd0>
   12210:	movw	r3, #9320	; 0x2468
   12214:	cmp	r0, r3
   12218:	beq	12858 <__assert_fail@plt+0x1444>
   1221c:	movw	r3, #9336	; 0x2478
   12220:	subs	r0, r0, r3
   12224:	movne	r0, #1
   12228:	b	121e4 <__assert_fail@plt+0xdd0>
   1222c:	movw	r3, #16390	; 0x4006
   12230:	cmp	r0, r3
   12234:	beq	12868 <__assert_fail@plt+0x1454>
   12238:	bhi	12254 <__assert_fail@plt+0xe40>
   1223c:	cmp	r0, #16384	; 0x4000
   12240:	beq	12870 <__assert_fail@plt+0x145c>
   12244:	movw	r3, #16388	; 0x4004
   12248:	subs	r0, r0, r3
   1224c:	movne	r0, #1
   12250:	b	121e4 <__assert_fail@plt+0xdd0>
   12254:	movw	r3, #16964	; 0x4244
   12258:	cmp	r0, r3
   1225c:	beq	12878 <__assert_fail@plt+0x1464>
   12260:	movw	r3, #18475	; 0x482b
   12264:	subs	r0, r0, r3
   12268:	movne	r0, #1
   1226c:	b	121e4 <__assert_fail@plt+0xdd0>
   12270:	movw	r3, #19780	; 0x4d44
   12274:	cmp	r0, r3
   12278:	beq	12888 <__assert_fail@plt+0x1474>
   1227c:	movw	r3, #19802	; 0x4d5a
   12280:	subs	r0, r0, r3
   12284:	movne	r0, #1
   12288:	b	121e4 <__assert_fail@plt+0xdd0>
   1228c:	movw	r3, #53613	; 0xd16d
   12290:	movt	r3, #303	; 0x12f
   12294:	cmp	r0, r3
   12298:	beq	128a0 <__assert_fail@plt+0x148c>
   1229c:	movw	r3, #53613	; 0xd16d
   122a0:	movt	r3, #303	; 0x12f
   122a4:	cmp	r0, r3
   122a8:	bls	12320 <__assert_fail@plt+0xf0c>
   122ac:	movw	r3, #30804	; 0x7854
   122b0:	movt	r3, #4400	; 0x1130
   122b4:	cmp	r0, r3
   122b8:	beq	128e0 <__assert_fail@plt+0x14cc>
   122bc:	movw	r3, #30804	; 0x7854
   122c0:	movt	r3, #4400	; 0x1130
   122c4:	cmp	r0, r3
   122c8:	bls	123f0 <__assert_fail@plt+0xfdc>
   122cc:	movw	r3, #514	; 0x202
   122d0:	movt	r3, #6528	; 0x1980
   122d4:	cmp	r0, r3
   122d8:	beq	128f8 <__assert_fail@plt+0x14e4>
   122dc:	movw	r3, #514	; 0x202
   122e0:	movt	r3, #6528	; 0x1980
   122e4:	cmp	r0, r3
   122e8:	bls	12450 <__assert_fail@plt+0x103c>
   122ec:	movw	r3, #47792	; 0xbab0
   122f0:	movt	r3, #8209	; 0x2011
   122f4:	cmp	r0, r3
   122f8:	beq	12908 <__assert_fail@plt+0x14f4>
   122fc:	movw	r3, #6405	; 0x1905
   12300:	movt	r3, #9221	; 0x2405
   12304:	cmp	r0, r3
   12308:	beq	12910 <__assert_fail@plt+0x14fc>
   1230c:	movw	r3, #64206	; 0xface
   12310:	movt	r3, #7085	; 0x1bad
   12314:	subs	r0, r0, r3
   12318:	movne	r0, #1
   1231c:	b	121e4 <__assert_fail@plt+0xdd0>
   12320:	movw	r3, #6484	; 0x1954
   12324:	movt	r3, #1
   12328:	cmp	r0, r3
   1232c:	beq	128a8 <__assert_fail@plt+0x1494>
   12330:	movw	r3, #6484	; 0x1954
   12334:	movt	r3, #1
   12338:	cmp	r0, r3
   1233c:	bls	12384 <__assert_fail@plt+0xf70>
   12340:	movw	r3, #65518	; 0xffee
   12344:	movt	r3, #192	; 0xc0
   12348:	cmp	r0, r3
   1234c:	beq	128c8 <__assert_fail@plt+0x14b4>
   12350:	movw	r3, #65518	; 0xffee
   12354:	movt	r3, #192	; 0xc0
   12358:	cmp	r0, r3
   1235c:	bhi	123cc <__assert_fail@plt+0xfb8>
   12360:	movw	r3, #57579	; 0xe0eb
   12364:	movt	r3, #39	; 0x27
   12368:	cmp	r0, r3
   1236c:	beq	128d0 <__assert_fail@plt+0x14bc>
   12370:	movw	r3, #19027	; 0x4a53
   12374:	movt	r3, #65	; 0x41
   12378:	subs	r0, r0, r3
   1237c:	movne	r0, #1
   12380:	b	121e4 <__assert_fail@plt+0xdd0>
   12384:	movw	r3, #61265	; 0xef51
   12388:	cmp	r0, r3
   1238c:	beq	128b0 <__assert_fail@plt+0x149c>
   12390:	bhi	123b0 <__assert_fail@plt+0xf9c>
   12394:	movw	r3, #44533	; 0xadf5
   12398:	cmp	r0, r3
   1239c:	beq	128b8 <__assert_fail@plt+0x14a4>
   123a0:	movw	r3, #44543	; 0xadff
   123a4:	subs	r0, r0, r3
   123a8:	movne	r0, #1
   123ac:	b	121e4 <__assert_fail@plt+0xdd0>
   123b0:	movw	r3, #61267	; 0xef53
   123b4:	cmp	r0, r3
   123b8:	beq	128c0 <__assert_fail@plt+0x14ac>
   123bc:	movw	r3, #61791	; 0xf15f
   123c0:	subs	r0, r0, r3
   123c4:	movne	r0, #1
   123c8:	b	121e4 <__assert_fail@plt+0xdd0>
   123cc:	movw	r3, #6548	; 0x1994
   123d0:	movt	r3, #258	; 0x102
   123d4:	cmp	r0, r3
   123d8:	beq	128d8 <__assert_fail@plt+0x14c4>
   123dc:	movw	r3, #6551	; 0x1997
   123e0:	movt	r3, #258	; 0x102
   123e4:	subs	r0, r0, r3
   123e8:	movne	r0, #1
   123ec:	b	121e4 <__assert_fail@plt+0xdd0>
   123f0:	movw	r3, #22561	; 0x5821
   123f4:	movt	r3, #1893	; 0x765
   123f8:	cmp	r0, r3
   123fc:	beq	128e8 <__assert_fail@plt+0x14d4>
   12400:	movw	r3, #22561	; 0x5821
   12404:	movt	r3, #1893	; 0x765
   12408:	cmp	r0, r3
   1240c:	bls	12434 <__assert_fail@plt+0x1020>
   12410:	movw	r3, #6452	; 0x1934
   12414:	movt	r3, #2308	; 0x904
   12418:	cmp	r0, r3
   1241c:	beq	128f0 <__assert_fail@plt+0x14dc>
   12420:	movw	r3, #7658	; 0x1dea
   12424:	movt	r3, #2989	; 0xbad
   12428:	subs	r0, r0, r3
   1242c:	movne	r0, #1
   12430:	b	121e4 <__assert_fail@plt+0xdd0>
   12434:	movw	r3, #2124	; 0x84c
   12438:	movt	r3, #65232	; 0xfed0
   1243c:	add	r3, r0, r3
   12440:	cmp	r3, #3
   12444:	movls	r0, #0
   12448:	movhi	r0, #1
   1244c:	b	121e4 <__assert_fail@plt+0xdd0>
   12450:	movw	r3, #4966	; 0x1366
   12454:	movt	r3, #4966	; 0x1366
   12458:	cmp	r0, r3
   1245c:	beq	12900 <__assert_fail@plt+0x14ec>
   12460:	movw	r3, #13126	; 0x3346
   12464:	movt	r3, #5377	; 0x1501
   12468:	subs	r0, r0, r3
   1246c:	movne	r0, #1
   12470:	b	121e4 <__assert_fail@plt+0xdd0>
   12474:	movw	r3, #17229	; 0x434d
   12478:	movt	r3, #21317	; 0x5345
   1247c:	cmp	r0, r3
   12480:	beq	12920 <__assert_fail@plt+0x150c>
   12484:	movw	r3, #17229	; 0x434d
   12488:	movt	r3, #21317	; 0x5345
   1248c:	cmp	r0, r3
   12490:	bls	12508 <__assert_fail@plt+0x10f4>
   12494:	movw	r3, #18003	; 0x4653
   12498:	movt	r3, #22106	; 0x565a
   1249c:	cmp	r0, r3
   124a0:	beq	12960 <__assert_fail@plt+0x154c>
   124a4:	movw	r3, #18003	; 0x4653
   124a8:	movt	r3, #22106	; 0x565a
   124ac:	cmp	r0, r3
   124b0:	bls	125f8 <__assert_fail@plt+0x11e4>
   124b4:	movw	r3, #27120	; 0x69f0
   124b8:	movt	r3, #23100	; 0x5a3c
   124bc:	cmp	r0, r3
   124c0:	beq	12980 <__assert_fail@plt+0x156c>
   124c4:	movw	r3, #27120	; 0x69f0
   124c8:	movt	r3, #23100	; 0x5a3c
   124cc:	cmp	r0, r3
   124d0:	bls	12660 <__assert_fail@plt+0x124c>
   124d4:	movw	r3, #11765	; 0x2df5
   124d8:	movt	r3, #24010	; 0x5dca
   124dc:	cmp	r0, r3
   124e0:	beq	12990 <__assert_fail@plt+0x157c>
   124e4:	movw	r3, #26476	; 0x676c
   124e8:	movt	r3, #24933	; 0x6165
   124ec:	cmp	r0, r3
   124f0:	beq	12998 <__assert_fail@plt+0x1584>
   124f4:	movw	r3, #18003	; 0x4653
   124f8:	movt	r3, #23119	; 0x5a4f
   124fc:	subs	r0, r0, r3
   12500:	movne	r0, #1
   12504:	b	121e4 <__assert_fail@plt+0xdd0>
   12508:	movw	r3, #23891	; 0x5d53
   1250c:	movt	r3, #17217	; 0x4341
   12510:	cmp	r0, r3
   12514:	beq	12928 <__assert_fail@plt+0x1514>
   12518:	movw	r3, #23891	; 0x5d53
   1251c:	movt	r3, #17217	; 0x4341
   12520:	cmp	r0, r3
   12524:	bls	1256c <__assert_fail@plt+0x1158>
   12528:	movw	r3, #17485	; 0x444d
   1252c:	movt	r3, #17741	; 0x454d
   12530:	cmp	r0, r3
   12534:	beq	12948 <__assert_fail@plt+0x1534>
   12538:	movw	r3, #17485	; 0x444d
   1253c:	movt	r3, #17741	; 0x454d
   12540:	cmp	r0, r3
   12544:	bhi	125d4 <__assert_fail@plt+0x11c0>
   12548:	movw	r3, #16706	; 0x4142
   1254c:	movt	r3, #17485	; 0x444d
   12550:	cmp	r0, r3
   12554:	beq	12950 <__assert_fail@plt+0x153c>
   12558:	movw	r3, #52520	; 0xcd28
   1255c:	movt	r3, #17725	; 0x453d
   12560:	subs	r0, r0, r3
   12564:	movne	r0, #1
   12568:	b	121e4 <__assert_fail@plt+0xdd0>
   1256c:	movw	r3, #17994	; 0x464a
   12570:	movt	r3, #12627	; 0x3153
   12574:	cmp	r0, r3
   12578:	beq	12930 <__assert_fail@plt+0x151c>
   1257c:	movw	r3, #17994	; 0x464a
   12580:	movt	r3, #12627	; 0x3153
   12584:	cmp	r0, r3
   12588:	bhi	125b0 <__assert_fail@plt+0x119c>
   1258c:	movw	r3, #7658	; 0x1dea
   12590:	movt	r3, #11181	; 0x2bad
   12594:	cmp	r0, r3
   12598:	beq	12938 <__assert_fail@plt+0x1524>
   1259c:	movw	r3, #12225	; 0x2fc1
   125a0:	bfi	r3, r3, #16, #16
   125a4:	subs	r0, r0, r3
   125a8:	movne	r0, #1
   125ac:	b	121e4 <__assert_fail@plt+0xdd0>
   125b0:	movw	r3, #21297	; 0x5331
   125b4:	movt	r3, #16966	; 0x4246
   125b8:	cmp	r0, r3
   125bc:	beq	12940 <__assert_fail@plt+0x152c>
   125c0:	movw	r3, #20045	; 0x4e4d
   125c4:	movt	r3, #16969	; 0x4249
   125c8:	subs	r0, r0, r3
   125cc:	movne	r0, #1
   125d0:	b	121e4 <__assert_fail@plt+0xdd0>
   125d4:	movw	r3, #18003	; 0x4653
   125d8:	movt	r3, #17752	; 0x4558
   125dc:	cmp	r0, r3
   125e0:	beq	12958 <__assert_fail@plt+0x1544>
   125e4:	movw	r3, #18803	; 0x4973
   125e8:	movt	r3, #21093	; 0x5265
   125ec:	subs	r0, r0, r3
   125f0:	movne	r0, #1
   125f4:	b	121e4 <__assert_fail@plt+0xdd0>
   125f8:	movw	r3, #21582	; 0x544e
   125fc:	movt	r3, #21318	; 0x5346
   12600:	cmp	r0, r3
   12604:	beq	12968 <__assert_fail@plt+0x1554>
   12608:	movw	r3, #21582	; 0x544e
   1260c:	movt	r3, #21318	; 0x5346
   12610:	cmp	r0, r3
   12614:	bhi	1263c <__assert_fail@plt+0x1228>
   12618:	movw	r3, #12621	; 0x314d
   1261c:	movt	r3, #21318	; 0x5346
   12620:	cmp	r0, r3
   12624:	beq	12970 <__assert_fail@plt+0x155c>
   12628:	movw	r3, #18502	; 0x4846
   1262c:	movt	r3, #21318	; 0x5346
   12630:	subs	r0, r0, r3
   12634:	movne	r0, #1
   12638:	b	121e4 <__assert_fail@plt+0xdd0>
   1263c:	movw	r3, #17227	; 0x434b
   12640:	movt	r3, #21327	; 0x534f
   12644:	cmp	r0, r3
   12648:	beq	12978 <__assert_fail@plt+0x1564>
   1264c:	mov	r3, #256	; 0x100
   12650:	movt	r3, #21529	; 0x5419
   12654:	subs	r0, r0, r3
   12658:	movne	r0, #1
   1265c:	b	121e4 <__assert_fail@plt+0xdd0>
   12660:	movw	r3, #22569	; 0x5829
   12664:	movt	r3, #22569	; 0x5829
   12668:	cmp	r0, r3
   1266c:	beq	12988 <__assert_fail@plt+0x1574>
   12670:	movw	r3, #21314	; 0x5342
   12674:	movt	r3, #22598	; 0x5846
   12678:	subs	r0, r0, r3
   1267c:	movne	r0, #1
   12680:	b	121e4 <__assert_fail@plt+0xdd0>
   12684:	movw	r3, #26985	; 0x6969
   12688:	movt	r3, #26457	; 0x6759
   1268c:	cmp	r0, r3
   12690:	beq	129a8 <__assert_fail@plt+0x1594>
   12694:	movw	r3, #26985	; 0x6969
   12698:	movt	r3, #26457	; 0x6759
   1269c:	cmp	r0, r3
   126a0:	bls	126f8 <__assert_fail@plt+0x12e4>
   126a4:	movw	r3, #26227	; 0x6673
   126a8:	movt	r3, #28275	; 0x6e73
   126ac:	cmp	r0, r3
   126b0:	beq	129c8 <__assert_fail@plt+0x15b4>
   126b4:	movw	r3, #26227	; 0x6673
   126b8:	movt	r3, #28275	; 0x6e73
   126bc:	cmp	r0, r3
   126c0:	bls	12760 <__assert_fail@plt+0x134c>
   126c4:	movw	r3, #29544	; 0x7368
   126c8:	movt	r3, #29553	; 0x7371
   126cc:	cmp	r0, r3
   126d0:	beq	129d8 <__assert_fail@plt+0x15c4>
   126d4:	movw	r3, #29305	; 0x7279
   126d8:	movt	r3, #29554	; 0x7372
   126dc:	cmp	r0, r3
   126e0:	beq	129e0 <__assert_fail@plt+0x15cc>
   126e4:	movw	r3, #26227	; 0x6673
   126e8:	movt	r3, #29539	; 0x7363
   126ec:	subs	r0, r0, r3
   126f0:	movne	r0, #1
   126f4:	b	121e4 <__assert_fail@plt+0xdd0>
   126f8:	movw	r3, #29296	; 0x7270
   126fc:	movt	r3, #25447	; 0x6367
   12700:	cmp	r0, r3
   12704:	beq	129b0 <__assert_fail@plt+0x159c>
   12708:	movw	r3, #29296	; 0x7270
   1270c:	movt	r3, #25447	; 0x6367
   12710:	cmp	r0, r3
   12714:	bhi	1273c <__assert_fail@plt+0x1328>
   12718:	movw	r3, #25968	; 0x6570
   1271c:	movt	r3, #25189	; 0x6265
   12720:	cmp	r0, r3
   12724:	beq	129b8 <__assert_fail@plt+0x15a4>
   12728:	movw	r3, #25970	; 0x6572
   1272c:	movt	r3, #25189	; 0x6265
   12730:	subs	r0, r0, r3
   12734:	movne	r0, #1
   12738:	b	121e4 <__assert_fail@plt+0xdd0>
   1273c:	movw	r3, #26400	; 0x6720
   12740:	movt	r3, #25698	; 0x6462
   12744:	cmp	r0, r3
   12748:	beq	129c0 <__assert_fail@plt+0x15ac>
   1274c:	movw	r3, #24952	; 0x6178
   12750:	movt	r3, #25700	; 0x6464
   12754:	subs	r0, r0, r3
   12758:	movne	r0, #1
   1275c:	b	121e4 <__assert_fail@plt+0xdd0>
   12760:	movw	r3, #4386	; 0x1122
   12764:	movt	r3, #26649	; 0x6819
   12768:	cmp	r0, r3
   1276c:	beq	129d0 <__assert_fail@plt+0x15bc>
   12770:	movw	r3, #28528	; 0x6f70
   12774:	movt	r3, #27759	; 0x6c6f
   12778:	subs	r0, r0, r3
   1277c:	movne	r0, #1
   12780:	b	121e4 <__assert_fail@plt+0xdd0>
   12784:	movw	r3, #22774	; 0x58f6
   12788:	movt	r3, #38276	; 0x9584
   1278c:	cmp	r0, r3
   12790:	beq	129f0 <__assert_fail@plt+0x15dc>
   12794:	movw	r3, #22774	; 0x58f6
   12798:	movt	r3, #38276	; 0x9584
   1279c:	cmp	r0, r3
   127a0:	bhi	127c8 <__assert_fail@plt+0x13b4>
   127a4:	movw	r3, #22774	; 0x58f6
   127a8:	movt	r3, #34180	; 0x8584
   127ac:	cmp	r0, r3
   127b0:	beq	129f8 <__assert_fail@plt+0x15e4>
   127b4:	movw	r3, #26686	; 0x683e
   127b8:	movt	r3, #37155	; 0x9123
   127bc:	subs	r0, r0, r3
   127c0:	movne	r0, #1
   127c4:	b	121e4 <__assert_fail@plt+0xdd0>
   127c8:	movw	r3, #6516	; 0x1974
   127cc:	movt	r3, #43962	; 0xabba
   127d0:	cmp	r0, r3
   127d4:	beq	12a00 <__assert_fail@plt+0x15ec>
   127d8:	movw	r3, #5520	; 0x1590
   127dc:	movt	r3, #51031	; 0xc757
   127e0:	subs	r0, r0, r3
   127e4:	movne	r0, #1
   127e8:	b	121e4 <__assert_fail@plt+0xdd0>
   127ec:	movw	r3, #18961	; 0x4a11
   127f0:	movt	r3, #51966	; 0xcafe
   127f4:	cmp	r0, r3
   127f8:	beq	12a10 <__assert_fail@plt+0x15fc>
   127fc:	movw	r3, #33252	; 0x81e4
   12800:	movt	r3, #56926	; 0xde5e
   12804:	subs	r0, r0, r3
   12808:	movne	r0, #1
   1280c:	b	121e4 <__assert_fail@plt+0xdd0>
   12810:	mov	r0, #0
   12814:	b	121e4 <__assert_fail@plt+0xdd0>
   12818:	mov	r0, #0
   1281c:	b	121e4 <__assert_fail@plt+0xdd0>
   12820:	mov	r0, #0
   12824:	b	121e4 <__assert_fail@plt+0xdd0>
   12828:	mov	r0, #0
   1282c:	b	121e4 <__assert_fail@plt+0xdd0>
   12830:	mov	r0, #0
   12834:	b	121e4 <__assert_fail@plt+0xdd0>
   12838:	mov	r0, #0
   1283c:	b	121e4 <__assert_fail@plt+0xdd0>
   12840:	mov	r0, #0
   12844:	b	121e4 <__assert_fail@plt+0xdd0>
   12848:	mov	r0, #0
   1284c:	b	121e4 <__assert_fail@plt+0xdd0>
   12850:	mov	r0, #0
   12854:	b	121e4 <__assert_fail@plt+0xdd0>
   12858:	mov	r0, #0
   1285c:	b	121e4 <__assert_fail@plt+0xdd0>
   12860:	mov	r0, #0
   12864:	b	121e4 <__assert_fail@plt+0xdd0>
   12868:	mov	r0, #0
   1286c:	b	121e4 <__assert_fail@plt+0xdd0>
   12870:	mov	r0, #0
   12874:	b	121e4 <__assert_fail@plt+0xdd0>
   12878:	mov	r0, #0
   1287c:	b	121e4 <__assert_fail@plt+0xdd0>
   12880:	mov	r0, #0
   12884:	b	121e4 <__assert_fail@plt+0xdd0>
   12888:	mov	r0, #0
   1288c:	b	121e4 <__assert_fail@plt+0xdd0>
   12890:	mov	r0, #0
   12894:	b	121e4 <__assert_fail@plt+0xdd0>
   12898:	mov	r0, #0
   1289c:	b	121e4 <__assert_fail@plt+0xdd0>
   128a0:	mov	r0, #0
   128a4:	b	121e4 <__assert_fail@plt+0xdd0>
   128a8:	mov	r0, #0
   128ac:	b	121e4 <__assert_fail@plt+0xdd0>
   128b0:	mov	r0, #0
   128b4:	b	121e4 <__assert_fail@plt+0xdd0>
   128b8:	mov	r0, #0
   128bc:	b	121e4 <__assert_fail@plt+0xdd0>
   128c0:	mov	r0, #0
   128c4:	b	121e4 <__assert_fail@plt+0xdd0>
   128c8:	mov	r0, #0
   128cc:	b	121e4 <__assert_fail@plt+0xdd0>
   128d0:	mov	r0, #0
   128d4:	b	121e4 <__assert_fail@plt+0xdd0>
   128d8:	mov	r0, #0
   128dc:	b	121e4 <__assert_fail@plt+0xdd0>
   128e0:	mov	r0, #0
   128e4:	b	121e4 <__assert_fail@plt+0xdd0>
   128e8:	mov	r0, #0
   128ec:	b	121e4 <__assert_fail@plt+0xdd0>
   128f0:	mov	r0, #0
   128f4:	b	121e4 <__assert_fail@plt+0xdd0>
   128f8:	mov	r0, #0
   128fc:	b	121e4 <__assert_fail@plt+0xdd0>
   12900:	mov	r0, #0
   12904:	b	121e4 <__assert_fail@plt+0xdd0>
   12908:	mov	r0, #0
   1290c:	b	121e4 <__assert_fail@plt+0xdd0>
   12910:	mov	r0, #0
   12914:	b	121e4 <__assert_fail@plt+0xdd0>
   12918:	mov	r0, #0
   1291c:	b	121e4 <__assert_fail@plt+0xdd0>
   12920:	mov	r0, #0
   12924:	b	121e4 <__assert_fail@plt+0xdd0>
   12928:	mov	r0, #0
   1292c:	b	121e4 <__assert_fail@plt+0xdd0>
   12930:	mov	r0, #0
   12934:	b	121e4 <__assert_fail@plt+0xdd0>
   12938:	mov	r0, #0
   1293c:	b	121e4 <__assert_fail@plt+0xdd0>
   12940:	mov	r0, #0
   12944:	b	121e4 <__assert_fail@plt+0xdd0>
   12948:	mov	r0, #0
   1294c:	b	121e4 <__assert_fail@plt+0xdd0>
   12950:	mov	r0, #0
   12954:	b	121e4 <__assert_fail@plt+0xdd0>
   12958:	mov	r0, #0
   1295c:	b	121e4 <__assert_fail@plt+0xdd0>
   12960:	mov	r0, #0
   12964:	b	121e4 <__assert_fail@plt+0xdd0>
   12968:	mov	r0, #0
   1296c:	b	121e4 <__assert_fail@plt+0xdd0>
   12970:	mov	r0, #0
   12974:	b	121e4 <__assert_fail@plt+0xdd0>
   12978:	mov	r0, #0
   1297c:	b	121e4 <__assert_fail@plt+0xdd0>
   12980:	mov	r0, #0
   12984:	b	121e4 <__assert_fail@plt+0xdd0>
   12988:	mov	r0, #0
   1298c:	b	121e4 <__assert_fail@plt+0xdd0>
   12990:	mov	r0, #0
   12994:	b	121e4 <__assert_fail@plt+0xdd0>
   12998:	mov	r0, #0
   1299c:	b	121e4 <__assert_fail@plt+0xdd0>
   129a0:	mov	r0, #0
   129a4:	b	121e4 <__assert_fail@plt+0xdd0>
   129a8:	mov	r0, #0
   129ac:	b	121e4 <__assert_fail@plt+0xdd0>
   129b0:	mov	r0, #0
   129b4:	b	121e4 <__assert_fail@plt+0xdd0>
   129b8:	mov	r0, #0
   129bc:	b	121e4 <__assert_fail@plt+0xdd0>
   129c0:	mov	r0, #0
   129c4:	b	121e4 <__assert_fail@plt+0xdd0>
   129c8:	mov	r0, #0
   129cc:	b	121e4 <__assert_fail@plt+0xdd0>
   129d0:	mov	r0, #0
   129d4:	b	121e4 <__assert_fail@plt+0xdd0>
   129d8:	mov	r0, #0
   129dc:	b	121e4 <__assert_fail@plt+0xdd0>
   129e0:	mov	r0, #0
   129e4:	b	121e4 <__assert_fail@plt+0xdd0>
   129e8:	mov	r0, #0
   129ec:	b	121e4 <__assert_fail@plt+0xdd0>
   129f0:	mov	r0, #0
   129f4:	b	121e4 <__assert_fail@plt+0xdd0>
   129f8:	mov	r0, #0
   129fc:	b	121e4 <__assert_fail@plt+0xdd0>
   12a00:	mov	r0, #0
   12a04:	b	121e4 <__assert_fail@plt+0xdd0>
   12a08:	mov	r0, #0
   12a0c:	b	121e4 <__assert_fail@plt+0xdd0>
   12a10:	mov	r0, #0
   12a14:	b	121e4 <__assert_fail@plt+0xdd0>
   12a18:	mov	r0, #0
   12a1c:	b	121e4 <__assert_fail@plt+0xdd0>
   12a20:	mov	r0, #0
   12a24:	b	121e4 <__assert_fail@plt+0xdd0>
   12a28:	ldr	r3, [r0, #48]	; 0x30
   12a2c:	cmn	r3, #1
   12a30:	bxeq	lr
   12a34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12a38:	strd	r6, [sp, #8]
   12a3c:	str	r8, [sp, #16]
   12a40:	str	lr, [sp, #20]
   12a44:	sub	sp, sp, #112	; 0x70
   12a48:	mov	r5, r1
   12a4c:	mov	r4, r0
   12a50:	bl	11594 <__assert_fail@plt+0x180>
   12a54:	mov	r7, r0
   12a58:	add	r2, sp, #8
   12a5c:	ldr	r1, [r4, #48]	; 0x30
   12a60:	mov	r0, #3
   12a64:	bl	111c8 <__fxstat64@plt>
   12a68:	subs	r6, r0, #0
   12a6c:	bne	12af4 <__assert_fail@plt+0x16e0>
   12a70:	ldr	r3, [r4, #40]	; 0x28
   12a74:	and	r3, r3, #61440	; 0xf000
   12a78:	cmp	r3, #32768	; 0x8000
   12a7c:	beq	12b18 <__assert_fail@plt+0x1704>
   12a80:	movw	r3, #57808	; 0xe1d0
   12a84:	movt	r3, #2
   12a88:	ldrb	r3, [r3, #1]
   12a8c:	cmp	r3, #0
   12a90:	beq	12aa0 <__assert_fail@plt+0x168c>
   12a94:	ldr	r6, [r5]
   12a98:	subs	r6, r6, r4
   12a9c:	movne	r6, #1
   12aa0:	mvn	r2, #0
   12aa4:	mvn	r3, #0
   12aa8:	strd	r2, [sp]
   12aac:	ldr	r2, [r4, #48]	; 0x30
   12ab0:	mov	r1, r7
   12ab4:	and	r0, r6, #1
   12ab8:	bl	1184c <__assert_fail@plt+0x438>
   12abc:	ldr	r3, [r4, #8]
   12ac0:	ldr	r2, [r4, #12]
   12ac4:	adds	r3, r3, r0
   12ac8:	adc	r2, r2, r1
   12acc:	str	r3, [r4, #8]
   12ad0:	str	r2, [r4, #12]
   12ad4:	orrs	r3, r0, r1
   12ad8:	bne	12bf0 <__assert_fail@plt+0x17dc>
   12adc:	add	sp, sp, #112	; 0x70
   12ae0:	ldrd	r4, [sp]
   12ae4:	ldrd	r6, [sp, #8]
   12ae8:	ldr	r8, [sp, #16]
   12aec:	add	sp, sp, #20
   12af0:	pop	{pc}		; (ldr pc, [sp], #4)
   12af4:	bl	112dc <__errno_location@plt>
   12af8:	ldr	r3, [r0]
   12afc:	str	r3, [r4, #52]	; 0x34
   12b00:	mov	r1, r7
   12b04:	ldr	r0, [r4, #48]	; 0x30
   12b08:	bl	115e0 <__assert_fail@plt+0x1cc>
   12b0c:	mvn	r3, #0
   12b10:	str	r3, [r4, #48]	; 0x30
   12b14:	b	12adc <__assert_fail@plt+0x16c8>
   12b18:	ldrd	r0, [sp, #56]	; 0x38
   12b1c:	ldrd	r2, [r4, #8]
   12b20:	cmp	r0, r2
   12b24:	sbcs	ip, r1, r3
   12b28:	blt	12b88 <__assert_fail@plt+0x1774>
   12b2c:	cmp	r1, r3
   12b30:	cmpeq	r0, r2
   12b34:	bne	12a80 <__assert_fail@plt+0x166c>
   12b38:	ldr	r3, [r4, #16]
   12b3c:	ldr	r1, [r4, #20]
   12b40:	ldr	r2, [sp, #88]	; 0x58
   12b44:	cmp	r2, r3
   12b48:	movlt	r3, #1
   12b4c:	movge	r3, #0
   12b50:	movgt	r2, #1
   12b54:	movle	r2, #0
   12b58:	sub	r2, r3, r2
   12b5c:	ldr	r3, [sp, #92]	; 0x5c
   12b60:	cmp	r3, r1
   12b64:	movlt	r3, #1
   12b68:	movge	r3, #0
   12b6c:	movgt	r1, #1
   12b70:	movle	r1, #0
   12b74:	sub	r3, r3, r1
   12b78:	add	r3, r3, r2, lsl #1
   12b7c:	cmp	r3, #0
   12b80:	bne	12a80 <__assert_fail@plt+0x166c>
   12b84:	b	12adc <__assert_fail@plt+0x16c8>
   12b88:	mov	r2, #5
   12b8c:	movw	r1, #50268	; 0xc45c
   12b90:	movt	r1, #1
   12b94:	mov	r0, #0
   12b98:	bl	11174 <dcgettext@plt>
   12b9c:	mov	r8, r0
   12ba0:	mov	r2, r7
   12ba4:	mov	r1, #3
   12ba8:	mov	r0, #0
   12bac:	bl	1a174 <__assert_fail@plt+0x8d60>
   12bb0:	mov	r3, r0
   12bb4:	mov	r2, r8
   12bb8:	mov	r1, #0
   12bbc:	mov	r0, r1
   12bc0:	bl	1121c <error@plt>
   12bc4:	str	r7, [sp, #4]
   12bc8:	mov	r3, #0
   12bcc:	str	r3, [sp]
   12bd0:	mov	r2, #0
   12bd4:	mov	r3, #0
   12bd8:	ldr	r0, [r4, #48]	; 0x30
   12bdc:	bl	11ad0 <__assert_fail@plt+0x6bc>
   12be0:	mov	r2, #0
   12be4:	mov	r3, #0
   12be8:	strd	r2, [r4, #8]
   12bec:	b	12a80 <__assert_fail@plt+0x166c>
   12bf0:	str	r4, [r5]
   12bf4:	movw	r3, #57796	; 0xe1c4
   12bf8:	movt	r3, #2
   12bfc:	ldr	r0, [r3]
   12c00:	bl	111a4 <fflush_unlocked@plt>
   12c04:	cmp	r0, #0
   12c08:	beq	12adc <__assert_fail@plt+0x16c8>
   12c0c:	bl	112dc <__errno_location@plt>
   12c10:	ldr	r4, [r0]
   12c14:	mov	r2, #5
   12c18:	movw	r1, #50288	; 0xc470
   12c1c:	movt	r1, #1
   12c20:	mov	r0, #0
   12c24:	bl	11174 <dcgettext@plt>
   12c28:	mov	r2, r0
   12c2c:	mov	r1, r4
   12c30:	mov	r0, #1
   12c34:	bl	1121c <error@plt>
   12c38:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c3c:	strd	r6, [sp, #8]
   12c40:	strd	r8, [sp, #16]
   12c44:	str	sl, [sp, #24]
   12c48:	str	lr, [sp, #28]
   12c4c:	sub	sp, sp, #112	; 0x70
   12c50:	mov	r4, r0
   12c54:	mov	r7, r1
   12c58:	ldr	r5, [r0]
   12c5c:	movw	r1, #50000	; 0xc350
   12c60:	movt	r1, #1
   12c64:	mov	r0, r5
   12c68:	bl	110cc <strcmp@plt>
   12c6c:	ldrb	r9, [r4, #46]	; 0x2e
   12c70:	ldr	r8, [r4, #52]	; 0x34
   12c74:	subs	r6, r0, #0
   12c78:	moveq	r5, r6
   12c7c:	beq	12c98 <__assert_fail@plt+0x1884>
   12c80:	cmp	r7, #0
   12c84:	movne	r1, #0
   12c88:	moveq	r1, #2048	; 0x800
   12c8c:	mov	r0, r5
   12c90:	bl	16d3c <__assert_fail@plt+0x5928>
   12c94:	mov	r5, r0
   12c98:	ldr	r2, [r4, #48]	; 0x30
   12c9c:	ldr	r3, [r4, #52]	; 0x34
   12ca0:	cmn	r2, #1
   12ca4:	movne	r2, #0
   12ca8:	moveq	r2, #1
   12cac:	clz	r3, r3
   12cb0:	lsr	r3, r3, #5
   12cb4:	cmp	r2, r3
   12cb8:	beq	12d60 <__assert_fail@plt+0x194c>
   12cbc:	movw	r3, #57808	; 0xe1d0
   12cc0:	movt	r3, #2
   12cc4:	ldrb	sl, [r3, #2]
   12cc8:	adds	r2, r5, #1
   12ccc:	movne	r2, #1
   12cd0:	eor	r1, sl, #1
   12cd4:	orr	r2, r2, r1
   12cd8:	strb	r2, [r4, #46]	; 0x2e
   12cdc:	ldrb	r3, [r3, #3]
   12ce0:	cmp	r3, #0
   12ce4:	beq	12d80 <__assert_fail@plt+0x196c>
   12ce8:	cmn	r5, #1
   12cec:	bne	12df8 <__assert_fail@plt+0x19e4>
   12cf0:	bl	112dc <__errno_location@plt>
   12cf4:	ldr	r6, [r0]
   12cf8:	str	r6, [r4, #52]	; 0x34
   12cfc:	ldrb	r3, [r4, #46]	; 0x2e
   12d00:	cmp	r3, #0
   12d04:	bne	12f48 <__assert_fail@plt+0x1b34>
   12d08:	cmp	r9, #0
   12d0c:	bne	12f04 <__assert_fail@plt+0x1af0>
   12d10:	mov	r0, r4
   12d14:	bl	11594 <__assert_fail@plt+0x180>
   12d18:	mov	r1, r0
   12d1c:	mov	r0, r5
   12d20:	bl	115e0 <__assert_fail@plt+0x1cc>
   12d24:	ldr	r5, [r4, #48]	; 0x30
   12d28:	mov	r0, r4
   12d2c:	bl	11594 <__assert_fail@plt+0x180>
   12d30:	mov	r1, r0
   12d34:	mov	r0, r5
   12d38:	bl	115e0 <__assert_fail@plt+0x1cc>
   12d3c:	mvn	r3, #0
   12d40:	str	r3, [r4, #48]	; 0x30
   12d44:	add	sp, sp, #112	; 0x70
   12d48:	ldrd	r4, [sp]
   12d4c:	ldrd	r6, [sp, #8]
   12d50:	ldrd	r8, [sp, #16]
   12d54:	ldr	sl, [sp, #24]
   12d58:	add	sp, sp, #28
   12d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d60:	movw	r3, #49644	; 0xc1ec
   12d64:	movt	r3, #1
   12d68:	movw	r2, #994	; 0x3e2
   12d6c:	movw	r1, #50300	; 0xc47c
   12d70:	movt	r1, #1
   12d74:	movw	r0, #50312	; 0xc488
   12d78:	movt	r0, #1
   12d7c:	bl	11414 <__assert_fail@plt>
   12d80:	add	r2, sp, #8
   12d84:	ldr	r1, [r4]
   12d88:	mov	r0, #3
   12d8c:	bl	11408 <__lxstat64@plt>
   12d90:	cmp	r0, #0
   12d94:	bne	12ce8 <__assert_fail@plt+0x18d4>
   12d98:	ldr	r3, [sp, #24]
   12d9c:	and	r3, r3, #61440	; 0xf000
   12da0:	cmp	r3, #40960	; 0xa000
   12da4:	bne	12ce8 <__assert_fail@plt+0x18d4>
   12da8:	mvn	r3, #0
   12dac:	str	r3, [r4, #52]	; 0x34
   12db0:	mov	r3, #1
   12db4:	strb	r3, [r4, #44]	; 0x2c
   12db8:	mov	r2, #5
   12dbc:	movw	r1, #50332	; 0xc49c
   12dc0:	movt	r1, #1
   12dc4:	bl	11174 <dcgettext@plt>
   12dc8:	mov	r6, r0
   12dcc:	mov	r0, r4
   12dd0:	bl	11594 <__assert_fail@plt+0x180>
   12dd4:	mov	r1, r0
   12dd8:	mov	r0, #4
   12ddc:	bl	1a050 <__assert_fail@plt+0x8c3c>
   12de0:	mov	r3, r0
   12de4:	mov	r2, r6
   12de8:	mov	r1, #0
   12dec:	mov	r0, r1
   12df0:	bl	1121c <error@plt>
   12df4:	b	12d10 <__assert_fail@plt+0x18fc>
   12df8:	add	r2, sp, #8
   12dfc:	mov	r1, r5
   12e00:	mov	r0, #3
   12e04:	bl	111c8 <__fxstat64@plt>
   12e08:	cmp	r0, #0
   12e0c:	blt	12cf0 <__assert_fail@plt+0x18dc>
   12e10:	ldr	r2, [sp, #24]
   12e14:	and	r3, r2, #61440	; 0xf000
   12e18:	sub	r3, r3, #4096	; 0x1000
   12e1c:	bic	r3, r3, #4096	; 0x1000
   12e20:	and	r2, r2, #45056	; 0xb000
   12e24:	cmp	r2, #32768	; 0x8000
   12e28:	cmpne	r3, #0
   12e2c:	bne	12f84 <__assert_fail@plt+0x1b70>
   12e30:	mov	r0, r4
   12e34:	bl	11594 <__assert_fail@plt+0x180>
   12e38:	mov	r1, r0
   12e3c:	mov	r0, r5
   12e40:	bl	11fc4 <__assert_fail@plt+0xbb0>
   12e44:	strb	r0, [r4, #45]	; 0x2d
   12e48:	cmp	r0, #0
   12e4c:	beq	12e64 <__assert_fail@plt+0x1a50>
   12e50:	movw	r3, #57808	; 0xe1d0
   12e54:	movt	r3, #2
   12e58:	ldrb	r3, [r3, #3]
   12e5c:	cmp	r3, #0
   12e60:	beq	13040 <__assert_fail@plt+0x1c2c>
   12e64:	mov	r3, #0
   12e68:	str	r3, [r4, #52]	; 0x34
   12e6c:	bics	r3, r8, #2
   12e70:	bne	13098 <__assert_fail@plt+0x1c84>
   12e74:	ldr	r3, [r4, #48]	; 0x30
   12e78:	cmn	r3, #1
   12e7c:	beq	1317c <__assert_fail@plt+0x1d68>
   12e80:	ldrd	r0, [r4, #32]
   12e84:	ldrd	r2, [sp, #104]	; 0x68
   12e88:	cmp	r1, r3
   12e8c:	cmpeq	r0, r2
   12e90:	bne	12ea8 <__assert_fail@plt+0x1a94>
   12e94:	ldrd	r0, [r4, #24]
   12e98:	ldrd	r2, [sp, #8]
   12e9c:	cmp	r1, r3
   12ea0:	cmpeq	r0, r2
   12ea4:	beq	131c0 <__assert_fail@plt+0x1dac>
   12ea8:	mov	r2, #5
   12eac:	movw	r1, #50624	; 0xc5c0
   12eb0:	movt	r1, #1
   12eb4:	mov	r0, #0
   12eb8:	bl	11174 <dcgettext@plt>
   12ebc:	mov	r8, r0
   12ec0:	mov	r0, r4
   12ec4:	bl	11594 <__assert_fail@plt+0x180>
   12ec8:	mov	r1, r0
   12ecc:	mov	r0, #4
   12ed0:	bl	1a050 <__assert_fail@plt+0x8c3c>
   12ed4:	mov	r3, r0
   12ed8:	mov	r2, r8
   12edc:	mov	r1, #0
   12ee0:	mov	r0, r1
   12ee4:	bl	1121c <error@plt>
   12ee8:	ldr	r8, [r4, #48]	; 0x30
   12eec:	mov	r0, r4
   12ef0:	bl	11594 <__assert_fail@plt+0x180>
   12ef4:	mov	r1, r0
   12ef8:	mov	r0, r8
   12efc:	bl	115e0 <__assert_fail@plt+0x1cc>
   12f00:	b	130e4 <__assert_fail@plt+0x1cd0>
   12f04:	mov	r2, #5
   12f08:	movw	r1, #50388	; 0xc4d4
   12f0c:	movt	r1, #1
   12f10:	mov	r0, #0
   12f14:	bl	11174 <dcgettext@plt>
   12f18:	mov	r7, r0
   12f1c:	mov	r0, r4
   12f20:	bl	11594 <__assert_fail@plt+0x180>
   12f24:	mov	r1, r0
   12f28:	mov	r0, #4
   12f2c:	bl	1a050 <__assert_fail@plt+0x8c3c>
   12f30:	mov	r3, r0
   12f34:	mov	r2, r7
   12f38:	mov	r1, r6
   12f3c:	mov	r0, #0
   12f40:	bl	1121c <error@plt>
   12f44:	b	12d10 <__assert_fail@plt+0x18fc>
   12f48:	cmp	r6, r8
   12f4c:	beq	12d10 <__assert_fail@plt+0x18fc>
   12f50:	mov	r0, r4
   12f54:	bl	11594 <__assert_fail@plt+0x180>
   12f58:	mov	r2, r0
   12f5c:	mov	r1, #3
   12f60:	mov	r0, #0
   12f64:	bl	1a174 <__assert_fail@plt+0x8d60>
   12f68:	mov	r3, r0
   12f6c:	movw	r2, #53620	; 0xd174
   12f70:	movt	r2, #1
   12f74:	mov	r1, r6
   12f78:	mov	r0, #0
   12f7c:	bl	1121c <error@plt>
   12f80:	b	12d10 <__assert_fail@plt+0x18fc>
   12f84:	mvn	r3, #0
   12f88:	str	r3, [r4, #52]	; 0x34
   12f8c:	mov	r3, #0
   12f90:	strb	r3, [r4, #46]	; 0x2e
   12f94:	cmp	sl, r3
   12f98:	moveq	r3, #1
   12f9c:	beq	12fb4 <__assert_fail@plt+0x1ba0>
   12fa0:	movw	r3, #57672	; 0xe148
   12fa4:	movt	r3, #2
   12fa8:	ldr	r3, [r3, #4]
   12fac:	subs	r3, r3, #1
   12fb0:	movne	r3, #1
   12fb4:	strb	r3, [r4, #44]	; 0x2c
   12fb8:	adds	r8, r8, #1
   12fbc:	movne	r8, #1
   12fc0:	orrs	r3, r9, r8
   12fc4:	beq	12d10 <__assert_fail@plt+0x18fc>
   12fc8:	mov	r2, #5
   12fcc:	movw	r1, #50416	; 0xc4f0
   12fd0:	movt	r1, #1
   12fd4:	mov	r0, #0
   12fd8:	bl	11174 <dcgettext@plt>
   12fdc:	mov	r6, r0
   12fe0:	mov	r0, r4
   12fe4:	bl	11594 <__assert_fail@plt+0x180>
   12fe8:	mov	r1, r0
   12fec:	mov	r0, #4
   12ff0:	bl	1a050 <__assert_fail@plt+0x8c3c>
   12ff4:	mov	r7, r0
   12ff8:	ldrb	r3, [r4, #44]	; 0x2c
   12ffc:	cmp	r3, #0
   13000:	movweq	r0, #52884	; 0xce94
   13004:	movteq	r0, #1
   13008:	bne	13028 <__assert_fail@plt+0x1c14>
   1300c:	str	r0, [sp]
   13010:	mov	r3, r7
   13014:	mov	r2, r6
   13018:	mov	r1, #0
   1301c:	mov	r0, r1
   13020:	bl	1121c <error@plt>
   13024:	b	12d10 <__assert_fail@plt+0x18fc>
   13028:	mov	r2, #5
   1302c:	movw	r1, #50464	; 0xc520
   13030:	movt	r1, #1
   13034:	mov	r0, #0
   13038:	bl	11174 <dcgettext@plt>
   1303c:	b	1300c <__assert_fail@plt+0x1bf8>
   13040:	mvn	r3, #0
   13044:	str	r3, [r4, #52]	; 0x34
   13048:	mov	r2, #5
   1304c:	movw	r1, #50492	; 0xc53c
   13050:	movt	r1, #1
   13054:	mov	r0, #0
   13058:	bl	11174 <dcgettext@plt>
   1305c:	mov	r6, r0
   13060:	mov	r0, r4
   13064:	bl	11594 <__assert_fail@plt+0x180>
   13068:	mov	r1, r0
   1306c:	mov	r0, #4
   13070:	bl	1a050 <__assert_fail@plt+0x8c3c>
   13074:	mov	r3, r0
   13078:	mov	r2, r6
   1307c:	mov	r1, #0
   13080:	mov	r0, r1
   13084:	bl	1121c <error@plt>
   13088:	mov	r3, #1
   1308c:	strb	r3, [r4, #44]	; 0x2c
   13090:	strb	r3, [r4, #45]	; 0x2d
   13094:	b	12d10 <__assert_fail@plt+0x18fc>
   13098:	ldr	r3, [r4, #48]	; 0x30
   1309c:	cmn	r3, #1
   130a0:	bne	1315c <__assert_fail@plt+0x1d48>
   130a4:	mov	r2, #5
   130a8:	movw	r1, #50556	; 0xc57c
   130ac:	movt	r1, #1
   130b0:	mov	r0, #0
   130b4:	bl	11174 <dcgettext@plt>
   130b8:	mov	r8, r0
   130bc:	mov	r0, r4
   130c0:	bl	11594 <__assert_fail@plt+0x180>
   130c4:	mov	r1, r0
   130c8:	mov	r0, #4
   130cc:	bl	1a050 <__assert_fail@plt+0x8c3c>
   130d0:	mov	r3, r0
   130d4:	mov	r2, r8
   130d8:	mov	r1, #0
   130dc:	mov	r0, r1
   130e0:	bl	1121c <error@plt>
   130e4:	cmp	r6, #0
   130e8:	movne	r1, r7
   130ec:	mvneq	r1, #0
   130f0:	str	r5, [r4, #48]	; 0x30
   130f4:	mov	r6, #0
   130f8:	mov	r7, #0
   130fc:	strd	r6, [r4, #8]
   13100:	ldr	r3, [sp, #88]	; 0x58
   13104:	str	r3, [r4, #16]
   13108:	ldr	r3, [sp, #92]	; 0x5c
   1310c:	str	r3, [r4, #20]
   13110:	ldrd	r2, [sp, #8]
   13114:	strd	r2, [r4, #24]
   13118:	ldrd	r2, [sp, #104]	; 0x68
   1311c:	strd	r2, [r4, #32]
   13120:	ldr	r3, [sp, #24]
   13124:	str	r3, [r4, #40]	; 0x28
   13128:	str	r1, [r4, #56]	; 0x38
   1312c:	strd	r6, [r4, #72]	; 0x48
   13130:	mov	r8, #0
   13134:	strb	r8, [r4, #44]	; 0x2c
   13138:	mov	r0, r4
   1313c:	bl	11594 <__assert_fail@plt+0x180>
   13140:	str	r0, [sp, #4]
   13144:	str	r8, [sp]
   13148:	mov	r2, r6
   1314c:	mov	r3, r7
   13150:	mov	r0, r5
   13154:	bl	11ad0 <__assert_fail@plt+0x6bc>
   13158:	b	12d44 <__assert_fail@plt+0x1930>
   1315c:	movw	r3, #49644	; 0xc1ec
   13160:	movt	r3, #1
   13164:	movw	r2, #1071	; 0x42f
   13168:	movw	r1, #50300	; 0xc47c
   1316c:	movt	r1, #1
   13170:	movw	r0, #50544	; 0xc570
   13174:	movt	r0, #1
   13178:	bl	11414 <__assert_fail@plt>
   1317c:	mov	r2, #5
   13180:	movw	r1, #50584	; 0xc598
   13184:	movt	r1, #1
   13188:	mov	r0, #0
   1318c:	bl	11174 <dcgettext@plt>
   13190:	mov	r8, r0
   13194:	mov	r0, r4
   13198:	bl	11594 <__assert_fail@plt+0x180>
   1319c:	mov	r1, r0
   131a0:	mov	r0, #4
   131a4:	bl	1a050 <__assert_fail@plt+0x8c3c>
   131a8:	mov	r3, r0
   131ac:	mov	r2, r8
   131b0:	mov	r1, #0
   131b4:	mov	r0, r1
   131b8:	bl	1121c <error@plt>
   131bc:	b	130e4 <__assert_fail@plt+0x1cd0>
   131c0:	mov	r0, r4
   131c4:	bl	11594 <__assert_fail@plt+0x180>
   131c8:	mov	r1, r0
   131cc:	mov	r0, r5
   131d0:	bl	115e0 <__assert_fail@plt+0x1cc>
   131d4:	b	12d44 <__assert_fail@plt+0x1930>
   131d8:	push	{lr}		; (str lr, [sp, #-4]!)
   131dc:	sub	sp, sp, #60	; 0x3c
   131e0:	subs	r5, r0, #0
   131e4:	beq	1322c <__assert_fail@plt+0x1e18>
   131e8:	movw	r3, #57792	; 0xe1c0
   131ec:	movt	r3, #2
   131f0:	ldr	r4, [r3]
   131f4:	mov	r2, #5
   131f8:	movw	r1, #50676	; 0xc5f4
   131fc:	movt	r1, #1
   13200:	mov	r0, #0
   13204:	bl	11174 <dcgettext@plt>
   13208:	movw	r3, #57836	; 0xe1ec
   1320c:	movt	r3, #2
   13210:	ldr	r3, [r3]
   13214:	mov	r2, r0
   13218:	mov	r1, #1
   1321c:	mov	r0, r4
   13220:	bl	11324 <__fprintf_chk@plt>
   13224:	mov	r0, r5
   13228:	bl	11294 <exit@plt>
   1322c:	mov	r2, #5
   13230:	movw	r1, #50716	; 0xc61c
   13234:	movt	r1, #1
   13238:	mov	r0, #0
   1323c:	bl	11174 <dcgettext@plt>
   13240:	movw	r3, #57836	; 0xe1ec
   13244:	movt	r3, #2
   13248:	ldr	r2, [r3]
   1324c:	mov	r1, r0
   13250:	mov	r0, #1
   13254:	bl	11300 <__printf_chk@plt>
   13258:	mov	r2, #5
   1325c:	movw	r1, #50752	; 0xc640
   13260:	movt	r1, #1
   13264:	mov	r0, #0
   13268:	bl	11174 <dcgettext@plt>
   1326c:	mov	r2, #10
   13270:	mov	r1, r0
   13274:	mov	r0, #1
   13278:	bl	11300 <__printf_chk@plt>
   1327c:	mov	r2, #5
   13280:	movw	r1, #50884	; 0xc6c4
   13284:	movt	r1, #1
   13288:	mov	r0, #0
   1328c:	bl	11174 <dcgettext@plt>
   13290:	movw	r4, #57796	; 0xe1c4
   13294:	movt	r4, #2
   13298:	ldr	r1, [r4]
   1329c:	bl	110b4 <fputs_unlocked@plt>
   132a0:	mov	r2, #5
   132a4:	movw	r1, #50940	; 0xc6fc
   132a8:	movt	r1, #1
   132ac:	mov	r0, #0
   132b0:	bl	11174 <dcgettext@plt>
   132b4:	ldr	r1, [r4]
   132b8:	bl	110b4 <fputs_unlocked@plt>
   132bc:	mov	r2, #5
   132c0:	movw	r1, #51016	; 0xc748
   132c4:	movt	r1, #1
   132c8:	mov	r0, #0
   132cc:	bl	11174 <dcgettext@plt>
   132d0:	ldr	r1, [r4]
   132d4:	bl	110b4 <fputs_unlocked@plt>
   132d8:	mov	r2, #5
   132dc:	movw	r1, #51164	; 0xc7dc
   132e0:	movt	r1, #1
   132e4:	mov	r0, #0
   132e8:	bl	11174 <dcgettext@plt>
   132ec:	ldr	r1, [r4]
   132f0:	bl	110b4 <fputs_unlocked@plt>
   132f4:	mov	r2, #5
   132f8:	movw	r1, #51400	; 0xc8c8
   132fc:	movt	r1, #1
   13300:	mov	r0, #0
   13304:	bl	11174 <dcgettext@plt>
   13308:	mov	r3, #5
   1330c:	mov	r2, #10
   13310:	mov	r1, r0
   13314:	mov	r0, #1
   13318:	bl	11300 <__printf_chk@plt>
   1331c:	mov	r2, #5
   13320:	movw	r1, #51956	; 0xcaf4
   13324:	movt	r1, #1
   13328:	mov	r0, #0
   1332c:	bl	11174 <dcgettext@plt>
   13330:	ldr	r1, [r4]
   13334:	bl	110b4 <fputs_unlocked@plt>
   13338:	mov	r2, #5
   1333c:	movw	r1, #52172	; 0xcbcc
   13340:	movt	r1, #1
   13344:	mov	r0, #0
   13348:	bl	11174 <dcgettext@plt>
   1334c:	ldr	r1, [r4]
   13350:	bl	110b4 <fputs_unlocked@plt>
   13354:	mov	r2, #5
   13358:	movw	r1, #52504	; 0xcd18
   1335c:	movt	r1, #1
   13360:	mov	r0, #0
   13364:	bl	11174 <dcgettext@plt>
   13368:	ldr	r1, [r4]
   1336c:	bl	110b4 <fputs_unlocked@plt>
   13370:	mov	r2, #5
   13374:	movw	r1, #52568	; 0xcd58
   13378:	movt	r1, #1
   1337c:	mov	r0, #0
   13380:	bl	11174 <dcgettext@plt>
   13384:	ldr	r1, [r4]
   13388:	bl	110b4 <fputs_unlocked@plt>
   1338c:	mov	r2, #5
   13390:	movw	r1, #52616	; 0xcd88
   13394:	movt	r1, #1
   13398:	mov	r0, #0
   1339c:	bl	11174 <dcgettext@plt>
   133a0:	ldr	r1, [r4]
   133a4:	bl	110b4 <fputs_unlocked@plt>
   133a8:	mov	r2, #5
   133ac:	movw	r1, #52672	; 0xcdc0
   133b0:	movt	r1, #1
   133b4:	mov	r0, #0
   133b8:	bl	11174 <dcgettext@plt>
   133bc:	ldr	r1, [r4]
   133c0:	bl	110b4 <fputs_unlocked@plt>
   133c4:	mov	r2, #5
   133c8:	movw	r1, #52888	; 0xce98
   133cc:	movt	r1, #1
   133d0:	mov	r0, #0
   133d4:	bl	11174 <dcgettext@plt>
   133d8:	ldr	r1, [r4]
   133dc:	bl	110b4 <fputs_unlocked@plt>
   133e0:	movw	r3, #49644	; 0xc1ec
   133e4:	movt	r3, #1
   133e8:	add	r0, r3, #8
   133ec:	ldr	r1, [r3, #8]
   133f0:	ldr	r3, [r3, #12]
   133f4:	str	r1, [sp]
   133f8:	str	r3, [sp, #4]
   133fc:	ldrd	r2, [r0, #8]
   13400:	strd	r2, [sp, #8]
   13404:	ldrd	r2, [r0, #16]
   13408:	strd	r2, [sp, #16]
   1340c:	ldrd	r2, [r0, #24]
   13410:	strd	r2, [sp, #24]
   13414:	ldrd	r2, [r0, #32]
   13418:	strd	r2, [sp, #32]
   1341c:	ldrd	r2, [r0, #40]	; 0x28
   13420:	strd	r2, [sp, #40]	; 0x28
   13424:	ldrd	r2, [r0, #48]	; 0x30
   13428:	strd	r2, [sp, #48]	; 0x30
   1342c:	cmp	r1, #0
   13430:	moveq	r4, sp
   13434:	beq	13460 <__assert_fail@plt+0x204c>
   13438:	mov	r4, sp
   1343c:	movw	r6, #50668	; 0xc5ec
   13440:	movt	r6, #1
   13444:	mov	r0, r6
   13448:	bl	110cc <strcmp@plt>
   1344c:	cmp	r0, #0
   13450:	beq	13460 <__assert_fail@plt+0x204c>
   13454:	ldr	r1, [r4, #8]!
   13458:	cmp	r1, #0
   1345c:	bne	13444 <__assert_fail@plt+0x2030>
   13460:	ldr	r4, [r4, #4]
   13464:	cmp	r4, #0
   13468:	beq	135c4 <__assert_fail@plt+0x21b0>
   1346c:	mov	r2, #5
   13470:	movw	r1, #53328	; 0xd050
   13474:	movt	r1, #1
   13478:	mov	r0, #0
   1347c:	bl	11174 <dcgettext@plt>
   13480:	movw	r3, #53352	; 0xd068
   13484:	movt	r3, #1
   13488:	movw	r2, #53392	; 0xd090
   1348c:	movt	r2, #1
   13490:	mov	r1, r0
   13494:	mov	r0, #1
   13498:	bl	11300 <__printf_chk@plt>
   1349c:	mov	r1, #0
   134a0:	mov	r0, #5
   134a4:	bl	11378 <setlocale@plt>
   134a8:	cmp	r0, #0
   134ac:	beq	134c8 <__assert_fail@plt+0x20b4>
   134b0:	mov	r2, #3
   134b4:	movw	r1, #53408	; 0xd0a0
   134b8:	movt	r1, #1
   134bc:	bl	113e4 <strncmp@plt>
   134c0:	cmp	r0, #0
   134c4:	bne	13544 <__assert_fail@plt+0x2130>
   134c8:	mov	r2, #5
   134cc:	movw	r1, #53484	; 0xd0ec
   134d0:	movt	r1, #1
   134d4:	mov	r0, #0
   134d8:	bl	11174 <dcgettext@plt>
   134dc:	movw	r6, #50668	; 0xc5ec
   134e0:	movt	r6, #1
   134e4:	mov	r3, r6
   134e8:	movw	r2, #53352	; 0xd068
   134ec:	movt	r2, #1
   134f0:	mov	r1, r0
   134f4:	mov	r0, #1
   134f8:	bl	11300 <__printf_chk@plt>
   134fc:	mov	r2, #5
   13500:	movw	r1, #53512	; 0xd108
   13504:	movt	r1, #1
   13508:	mov	r0, #0
   1350c:	bl	11174 <dcgettext@plt>
   13510:	mov	r1, r0
   13514:	movw	r2, #54704	; 0xd5b0
   13518:	movt	r2, #1
   1351c:	movw	r3, #52884	; 0xce94
   13520:	movt	r3, #1
   13524:	cmp	r4, r6
   13528:	moveq	r3, r2
   1352c:	mov	r2, r4
   13530:	mov	r0, #1
   13534:	bl	11300 <__printf_chk@plt>
   13538:	b	13224 <__assert_fail@plt+0x1e10>
   1353c:	movw	r4, #50668	; 0xc5ec
   13540:	movt	r4, #1
   13544:	mov	r2, #5
   13548:	movw	r1, #53412	; 0xd0a4
   1354c:	movt	r1, #1
   13550:	mov	r0, #0
   13554:	bl	11174 <dcgettext@plt>
   13558:	movw	r3, #57796	; 0xe1c4
   1355c:	movt	r3, #2
   13560:	ldr	r1, [r3]
   13564:	bl	110b4 <fputs_unlocked@plt>
   13568:	b	134c8 <__assert_fail@plt+0x20b4>
   1356c:	mov	r2, #5
   13570:	movw	r1, #53484	; 0xd0ec
   13574:	movt	r1, #1
   13578:	mov	r0, #0
   1357c:	bl	11174 <dcgettext@plt>
   13580:	movw	r4, #50668	; 0xc5ec
   13584:	movt	r4, #1
   13588:	mov	r3, r4
   1358c:	movw	r2, #53352	; 0xd068
   13590:	movt	r2, #1
   13594:	mov	r1, r0
   13598:	mov	r0, #1
   1359c:	bl	11300 <__printf_chk@plt>
   135a0:	mov	r2, #5
   135a4:	movw	r1, #53512	; 0xd108
   135a8:	movt	r1, #1
   135ac:	mov	r0, #0
   135b0:	bl	11174 <dcgettext@plt>
   135b4:	mov	r1, r0
   135b8:	movw	r3, #54704	; 0xd5b0
   135bc:	movt	r3, #1
   135c0:	b	1352c <__assert_fail@plt+0x2118>
   135c4:	mov	r2, #5
   135c8:	movw	r1, #53328	; 0xd050
   135cc:	movt	r1, #1
   135d0:	mov	r0, #0
   135d4:	bl	11174 <dcgettext@plt>
   135d8:	movw	r3, #53352	; 0xd068
   135dc:	movt	r3, #1
   135e0:	movw	r2, #53392	; 0xd090
   135e4:	movt	r2, #1
   135e8:	mov	r1, r0
   135ec:	mov	r0, #1
   135f0:	bl	11300 <__printf_chk@plt>
   135f4:	mov	r1, #0
   135f8:	mov	r0, #5
   135fc:	bl	11378 <setlocale@plt>
   13600:	cmp	r0, #0
   13604:	beq	1356c <__assert_fail@plt+0x2158>
   13608:	mov	r2, #3
   1360c:	movw	r1, #53408	; 0xd0a0
   13610:	movt	r1, #1
   13614:	bl	113e4 <strncmp@plt>
   13618:	cmp	r0, #0
   1361c:	bne	1353c <__assert_fail@plt+0x2128>
   13620:	mov	r2, #5
   13624:	movw	r1, #53484	; 0xd0ec
   13628:	movt	r1, #1
   1362c:	mov	r0, #0
   13630:	bl	11174 <dcgettext@plt>
   13634:	movw	r4, #50668	; 0xc5ec
   13638:	movt	r4, #1
   1363c:	mov	r3, r4
   13640:	movw	r2, #53352	; 0xd068
   13644:	movt	r2, #1
   13648:	mov	r1, r0
   1364c:	mov	r0, #1
   13650:	bl	11300 <__printf_chk@plt>
   13654:	mov	r2, #5
   13658:	movw	r1, #53512	; 0xd108
   1365c:	movt	r1, #1
   13660:	mov	r0, #0
   13664:	bl	11174 <dcgettext@plt>
   13668:	mov	r1, r0
   1366c:	movw	r3, #54704	; 0xd5b0
   13670:	movt	r3, #1
   13674:	b	1352c <__assert_fail@plt+0x2118>
   13678:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1367c:	strd	r6, [sp, #8]
   13680:	strd	r8, [sp, #16]
   13684:	strd	sl, [sp, #24]
   13688:	str	lr, [sp, #32]
   1368c:	vpush	{d8-d10}
   13690:	sub	sp, sp, #356	; 0x164
   13694:	mov	r4, r0
   13698:	mov	r5, r1
   1369c:	mov	r2, #10
   136a0:	mov	r3, #0
   136a4:	add	r1, sp, #344	; 0x158
   136a8:	strd	r2, [r1]
   136ac:	ldr	r0, [r5]
   136b0:	bl	18044 <__assert_fail@plt+0x6c30>
   136b4:	movw	r1, #52884	; 0xce94
   136b8:	movt	r1, #1
   136bc:	mov	r0, #6
   136c0:	bl	11378 <setlocale@plt>
   136c4:	movw	r6, #53396	; 0xd094
   136c8:	movt	r6, #1
   136cc:	movw	r1, #53568	; 0xd140
   136d0:	movt	r1, #1
   136d4:	mov	r0, r6
   136d8:	bl	113b4 <bindtextdomain@plt>
   136dc:	mov	r0, r6
   136e0:	bl	1118c <textdomain@plt>
   136e4:	movw	r0, #26832	; 0x68d0
   136e8:	movt	r0, #1
   136ec:	bl	1c1c8 <__assert_fail@plt+0xadb4>
   136f0:	movw	r3, #57808	; 0xe1d0
   136f4:	movt	r3, #2
   136f8:	mov	r2, #0
   136fc:	strb	r2, [r3, #4]
   13700:	mov	r1, #1
   13704:	strb	r1, [r3, #5]
   13708:	strb	r2, [r3, #1]
   1370c:	strb	r2, [r3, #6]
   13710:	strb	r2, [r3, #7]
   13714:	mov	r2, #10
   13718:	strb	r2, [r3]
   1371c:	cmp	r4, #2
   13720:	beq	13750 <__assert_fail@plt+0x233c>
   13724:	cmp	r4, #3
   13728:	beq	137ac <__assert_fail@plt+0x2398>
   1372c:	sub	r3, r4, #3
   13730:	cmp	r3, #1
   13734:	bhi	13924 <__assert_fail@plt+0x2510>
   13738:	movw	r1, #53592	; 0xd158
   1373c:	movt	r1, #1
   13740:	ldr	r0, [r5, #8]
   13744:	bl	110cc <strcmp@plt>
   13748:	cmp	r0, #0
   1374c:	bne	13954 <__assert_fail@plt+0x2540>
   13750:	bl	17fd4 <__assert_fail@plt+0x6bc0>
   13754:	ldr	r2, [r5, #4]
   13758:	mov	ip, r2
   1375c:	ldrb	r3, [ip], #1
   13760:	cmp	r3, #43	; 0x2b
   13764:	beq	137cc <__assert_fail@plt+0x23b8>
   13768:	cmp	r3, #45	; 0x2d
   1376c:	movne	r3, #0
   13770:	bne	13928 <__assert_fail@plt+0x2514>
   13774:	movw	r3, #3503	; 0xdaf
   13778:	movt	r3, #3
   1377c:	cmp	r0, r3
   13780:	ble	13838 <__assert_fail@plt+0x2424>
   13784:	ldrb	r3, [r2, #1]
   13788:	cmp	r3, #99	; 0x63
   1378c:	movne	r3, #0
   13790:	moveq	r3, #1
   13794:	ldrb	r3, [ip, r3]
   13798:	cmp	r3, #0
   1379c:	movne	r8, #0
   137a0:	bne	137e4 <__assert_fail@plt+0x23d0>
   137a4:	mov	r3, #0
   137a8:	b	13928 <__assert_fail@plt+0x2514>
   137ac:	ldr	r3, [r5, #8]
   137b0:	ldrb	r2, [r3]
   137b4:	cmp	r2, #45	; 0x2d
   137b8:	bne	13750 <__assert_fail@plt+0x233c>
   137bc:	ldrb	r3, [r3, #1]
   137c0:	cmp	r3, #0
   137c4:	bne	13738 <__assert_fail@plt+0x2324>
   137c8:	b	13750 <__assert_fail@plt+0x233c>
   137cc:	sub	r0, r0, #199680	; 0x30c00
   137d0:	sub	r0, r0, #432	; 0x1b0
   137d4:	cmp	r0, #696	; 0x2b8
   137d8:	movls	r3, #0
   137dc:	bls	13928 <__assert_fail@plt+0x2514>
   137e0:	mov	r8, #1
   137e4:	ldrb	r3, [r2, #1]
   137e8:	sub	r2, r3, #48	; 0x30
   137ec:	cmp	r2, #9
   137f0:	bhi	13840 <__assert_fail@plt+0x242c>
   137f4:	mov	r2, ip
   137f8:	ldrb	r3, [r2, #1]!
   137fc:	sub	r1, r3, #48	; 0x30
   13800:	cmp	r1, #9
   13804:	bls	137f8 <__assert_fail@plt+0x23e4>
   13808:	cmp	r3, #99	; 0x63
   1380c:	beq	13848 <__assert_fail@plt+0x2434>
   13810:	cmp	r3, #108	; 0x6c
   13814:	beq	13854 <__assert_fail@plt+0x2440>
   13818:	cmp	r3, #98	; 0x62
   1381c:	moveq	r6, #0
   13820:	moveq	r1, #5120	; 0x1400
   13824:	beq	1385c <__assert_fail@plt+0x2448>
   13828:	mov	r3, r2
   1382c:	mov	r6, #1
   13830:	mov	r1, #10
   13834:	b	13860 <__assert_fail@plt+0x244c>
   13838:	mov	r8, #0
   1383c:	b	137e4 <__assert_fail@plt+0x23d0>
   13840:	mov	r2, ip
   13844:	b	13808 <__assert_fail@plt+0x23f4>
   13848:	mov	r6, #0
   1384c:	mov	r1, #10
   13850:	b	1385c <__assert_fail@plt+0x2448>
   13854:	mov	r6, #1
   13858:	mov	r1, #10
   1385c:	add	r3, r2, #1
   13860:	ldrb	r0, [r3]
   13864:	cmp	r0, #102	; 0x66
   13868:	addeq	r3, r3, #1
   1386c:	moveq	r7, #1
   13870:	movne	r7, #0
   13874:	ldrb	r3, [r3]
   13878:	cmp	r3, #0
   1387c:	bne	1395c <__assert_fail@plt+0x2548>
   13880:	cmp	ip, r2
   13884:	beq	138cc <__assert_fail@plt+0x24b8>
   13888:	movw	r3, #53596	; 0xd15c
   1388c:	movt	r3, #1
   13890:	str	r3, [sp]
   13894:	add	r3, sp, #344	; 0x158
   13898:	mov	r2, #10
   1389c:	mov	r1, #0
   138a0:	mov	r0, ip
   138a4:	bl	1b2c8 <__assert_fail@plt+0x9eb4>
   138a8:	bics	r3, r0, #2
   138ac:	bne	138e0 <__assert_fail@plt+0x24cc>
   138b0:	movw	r3, #57808	; 0xe1d0
   138b4:	movt	r3, #2
   138b8:	strb	r8, [r3, #6]
   138bc:	strb	r6, [r3, #5]
   138c0:	strb	r7, [r3, #7]
   138c4:	mov	r3, #1
   138c8:	b	13928 <__assert_fail@plt+0x2514>
   138cc:	mov	r2, r1
   138d0:	asr	r3, r1, #31
   138d4:	add	r1, sp, #344	; 0x158
   138d8:	strd	r2, [r1]
   138dc:	b	138b0 <__assert_fail@plt+0x249c>
   138e0:	bl	112dc <__errno_location@plt>
   138e4:	ldr	r4, [r0]
   138e8:	mov	r2, #5
   138ec:	movw	r1, #53600	; 0xd160
   138f0:	movt	r1, #1
   138f4:	mov	r0, #0
   138f8:	bl	11174 <dcgettext@plt>
   138fc:	mov	r6, r0
   13900:	ldr	r0, [r5, #4]
   13904:	bl	1a340 <__assert_fail@plt+0x8f2c>
   13908:	str	r0, [sp]
   1390c:	mov	r3, r6
   13910:	movw	r2, #53616	; 0xd170
   13914:	movt	r2, #1
   13918:	mov	r1, r4
   1391c:	mov	r0, #1
   13920:	bl	1121c <error@plt>
   13924:	mov	r3, #0
   13928:	sub	r4, r4, r3
   1392c:	add	r5, r5, r3, lsl #2
   13930:	vldr	d8, [pc, #1008]	; 13d28 <__assert_fail@plt+0x2914>
   13934:	mov	r9, #0
   13938:	movw	r8, #49644	; 0xc1ec
   1393c:	movt	r8, #1
   13940:	movw	r6, #53904	; 0xd290
   13944:	movt	r6, #1
   13948:	movw	r7, #57808	; 0xe1d0
   1394c:	movt	r7, #2
   13950:	b	13d44 <__assert_fail@plt+0x2930>
   13954:	mov	r3, #0
   13958:	b	13928 <__assert_fail@plt+0x2514>
   1395c:	mov	r3, #0
   13960:	b	13928 <__assert_fail@plt+0x2514>
   13964:	cmp	r0, #57	; 0x39
   13968:	ble	13a2c <__assert_fail@plt+0x2618>
   1396c:	cmp	r0, #99	; 0x63
   13970:	beq	13988 <__assert_fail@plt+0x2574>
   13974:	ble	13abc <__assert_fail@plt+0x26a8>
   13978:	cmp	r0, #102	; 0x66
   1397c:	beq	13ba0 <__assert_fail@plt+0x278c>
   13980:	cmp	r0, #110	; 0x6e
   13984:	bne	13d1c <__assert_fail@plt+0x2908>
   13988:	cmp	r0, #110	; 0x6e
   1398c:	movne	r3, #0
   13990:	moveq	r3, #1
   13994:	strb	r3, [r7, #5]
   13998:	movw	r3, #57800	; 0xe1c8
   1399c:	movt	r3, #2
   139a0:	ldr	r3, [r3]
   139a4:	ldrb	r2, [r3]
   139a8:	cmp	r2, #43	; 0x2b
   139ac:	moveq	r3, #1
   139b0:	strbeq	r3, [r7, #6]
   139b4:	beq	139c0 <__assert_fail@plt+0x25ac>
   139b8:	cmp	r2, #45	; 0x2d
   139bc:	beq	13b8c <__assert_fail@plt+0x2778>
   139c0:	movw	r3, #57800	; 0xe1c8
   139c4:	movt	r3, #2
   139c8:	ldr	sl, [r3]
   139cc:	cmp	r0, #110	; 0x6e
   139d0:	mov	r2, #5
   139d4:	movweq	r1, #53624	; 0xd178
   139d8:	movteq	r1, #1
   139dc:	movwne	r1, #53648	; 0xd190
   139e0:	movtne	r1, #1
   139e4:	mov	r0, #0
   139e8:	bl	11174 <dcgettext@plt>
   139ec:	mov	r3, #0
   139f0:	str	r3, [sp, #16]
   139f4:	str	r0, [sp, #12]
   139f8:	movw	r3, #53672	; 0xd1a8
   139fc:	movt	r3, #1
   13a00:	str	r3, [sp, #8]
   13a04:	mvn	r2, #0
   13a08:	mvn	r3, #0
   13a0c:	strd	r2, [sp]
   13a10:	mov	r2, #0
   13a14:	mov	r3, #0
   13a18:	mov	r0, sl
   13a1c:	bl	1b004 <__assert_fail@plt+0x9bf0>
   13a20:	add	r3, sp, #344	; 0x158
   13a24:	strd	r0, [r3]
   13a28:	b	13d44 <__assert_fail@plt+0x2930>
   13a2c:	mov	fp, r0
   13a30:	cmp	r0, #48	; 0x30
   13a34:	bge	13cf4 <__assert_fail@plt+0x28e0>
   13a38:	cmn	r0, #3
   13a3c:	bne	13aac <__assert_fail@plt+0x2698>
   13a40:	movw	r3, #57696	; 0xe160
   13a44:	movt	r3, #2
   13a48:	movw	r0, #57796	; 0xe1c4
   13a4c:	movt	r0, #2
   13a50:	mov	r4, #0
   13a54:	str	r4, [sp, #16]
   13a58:	movw	r2, #53800	; 0xd228
   13a5c:	movt	r2, #1
   13a60:	str	r2, [sp, #12]
   13a64:	movw	r2, #53816	; 0xd238
   13a68:	movt	r2, #1
   13a6c:	str	r2, [sp, #8]
   13a70:	movw	r2, #53836	; 0xd24c
   13a74:	movt	r2, #1
   13a78:	str	r2, [sp, #4]
   13a7c:	movw	r2, #53852	; 0xd25c
   13a80:	movt	r2, #1
   13a84:	str	r2, [sp]
   13a88:	ldr	r3, [r3]
   13a8c:	movw	r2, #53392	; 0xd090
   13a90:	movt	r2, #1
   13a94:	movw	r1, #50668	; 0xc5ec
   13a98:	movt	r1, #1
   13a9c:	ldr	r0, [r0]
   13aa0:	bl	1a930 <__assert_fail@plt+0x951c>
   13aa4:	mov	r0, r4
   13aa8:	bl	11294 <exit@plt>
   13aac:	cmn	r0, #2
   13ab0:	bne	13d1c <__assert_fail@plt+0x2908>
   13ab4:	mov	r0, #0
   13ab8:	bl	131d8 <__assert_fail@plt+0x1dc4>
   13abc:	cmp	r0, #70	; 0x46
   13ac0:	bne	13d1c <__assert_fail@plt+0x2908>
   13ac4:	mov	r3, #1
   13ac8:	strb	r3, [r7, #7]
   13acc:	movw	r2, #57672	; 0xe148
   13ad0:	movt	r2, #2
   13ad4:	str	r3, [r2, #4]
   13ad8:	strb	r3, [r7, #2]
   13adc:	b	13d44 <__assert_fail@plt+0x2930>
   13ae0:	cmp	r0, #115	; 0x73
   13ae4:	bne	13d1c <__assert_fail@plt+0x2908>
   13ae8:	movw	r0, #57800	; 0xe1c8
   13aec:	movt	r0, #2
   13af0:	movw	r3, #26652	; 0x681c
   13af4:	movt	r3, #1
   13af8:	add	r2, sp, #240	; 0xf0
   13afc:	mov	r1, #0
   13b00:	ldr	r0, [r0]
   13b04:	bl	1b0e0 <__assert_fail@plt+0x9ccc>
   13b08:	cmp	r0, #0
   13b0c:	beq	13b20 <__assert_fail@plt+0x270c>
   13b10:	vldr	d8, [sp, #240]	; 0xf0
   13b14:	vcmpe.f64	d8, #0.0
   13b18:	vmrs	APSR_nzcv, fpscr
   13b1c:	bge	13d44 <__assert_fail@plt+0x2930>
   13b20:	mov	r2, #5
   13b24:	movw	r1, #53768	; 0xd208
   13b28:	movt	r1, #1
   13b2c:	mov	r0, #0
   13b30:	bl	11174 <dcgettext@plt>
   13b34:	mov	r4, r0
   13b38:	movw	r3, #57800	; 0xe1c8
   13b3c:	movt	r3, #2
   13b40:	ldr	r0, [r3]
   13b44:	bl	1a340 <__assert_fail@plt+0x8f2c>
   13b48:	mov	r3, r0
   13b4c:	mov	r2, r4
   13b50:	mov	r1, #0
   13b54:	mov	r0, #1
   13b58:	bl	1121c <error@plt>
   13b5c:	movw	r3, #259	; 0x103
   13b60:	cmp	r0, r3
   13b64:	beq	13cdc <__assert_fail@plt+0x28c8>
   13b68:	blt	13c80 <__assert_fail@plt+0x286c>
   13b6c:	cmp	r0, #260	; 0x104
   13b70:	beq	13ba0 <__assert_fail@plt+0x278c>
   13b74:	movw	r3, #261	; 0x105
   13b78:	cmp	r0, r3
   13b7c:	bne	13d1c <__assert_fail@plt+0x2908>
   13b80:	mov	r3, #1
   13b84:	strb	r3, [r7, #3]
   13b88:	b	13d44 <__assert_fail@plt+0x2930>
   13b8c:	movw	r2, #57800	; 0xe1c8
   13b90:	movt	r2, #2
   13b94:	add	r3, r3, #1
   13b98:	str	r3, [r2]
   13b9c:	b	139c0 <__assert_fail@plt+0x25ac>
   13ba0:	mov	r3, #1
   13ba4:	strb	r3, [r7, #7]
   13ba8:	movw	r3, #57800	; 0xe1c8
   13bac:	movt	r3, #2
   13bb0:	ldr	r1, [r3]
   13bb4:	cmp	r1, #0
   13bb8:	beq	13c08 <__assert_fail@plt+0x27f4>
   13bbc:	mov	r3, #1
   13bc0:	str	r3, [sp, #8]
   13bc4:	movw	r3, #57700	; 0xe164
   13bc8:	movt	r3, #2
   13bcc:	ldr	r3, [r3]
   13bd0:	str	r3, [sp, #4]
   13bd4:	mov	r3, #4
   13bd8:	str	r3, [sp]
   13bdc:	add	r3, r8, #64	; 0x40
   13be0:	add	r2, r8, #72	; 0x48
   13be4:	movw	r0, #53688	; 0xd1b8
   13be8:	movt	r0, #1
   13bec:	bl	16650 <__assert_fail@plt+0x523c>
   13bf0:	movw	r3, #57672	; 0xe148
   13bf4:	movt	r3, #2
   13bf8:	add	r0, r8, r0, lsl #2
   13bfc:	ldr	r2, [r0, #64]	; 0x40
   13c00:	str	r2, [r3, #4]
   13c04:	b	13d44 <__assert_fail@plt+0x2930>
   13c08:	movw	r3, #57672	; 0xe148
   13c0c:	movt	r3, #2
   13c10:	mov	r2, #2
   13c14:	str	r2, [r3, #4]
   13c18:	b	13d44 <__assert_fail@plt+0x2930>
   13c1c:	movw	r3, #57800	; 0xe1c8
   13c20:	movt	r3, #2
   13c24:	ldr	sl, [r3]
   13c28:	mov	r2, #5
   13c2c:	movw	r1, #53700	; 0xd1c4
   13c30:	movt	r1, #1
   13c34:	mov	r0, #0
   13c38:	bl	11174 <dcgettext@plt>
   13c3c:	mov	r3, #0
   13c40:	str	r3, [sp, #16]
   13c44:	str	r0, [sp, #12]
   13c48:	movw	r3, #52884	; 0xce94
   13c4c:	movt	r3, #1
   13c50:	str	r3, [sp, #8]
   13c54:	mvn	r2, #0
   13c58:	mvn	r3, #0
   13c5c:	strd	r2, [sp]
   13c60:	mov	r2, #0
   13c64:	mov	r3, #0
   13c68:	mov	r0, sl
   13c6c:	bl	1b004 <__assert_fail@plt+0x9bf0>
   13c70:	movw	r3, #57672	; 0xe148
   13c74:	movt	r3, #2
   13c78:	strd	r0, [r3, #16]
   13c7c:	b	13d44 <__assert_fail@plt+0x2930>
   13c80:	movw	r3, #57800	; 0xe1c8
   13c84:	movt	r3, #2
   13c88:	ldr	sl, [r3]
   13c8c:	mov	r2, #5
   13c90:	movw	r1, #53756	; 0xd1fc
   13c94:	movt	r1, #1
   13c98:	mov	r0, #0
   13c9c:	bl	11174 <dcgettext@plt>
   13ca0:	mov	r3, #0
   13ca4:	str	r3, [sp, #16]
   13ca8:	str	r0, [sp, #12]
   13cac:	movw	r3, #52884	; 0xce94
   13cb0:	movt	r3, #1
   13cb4:	str	r3, [sp, #8]
   13cb8:	mvn	r2, #-2147483648	; 0x80000000
   13cbc:	mov	r3, #0
   13cc0:	strd	r2, [sp]
   13cc4:	mov	r2, #0
   13cc8:	mov	r3, #0
   13ccc:	mov	r0, sl
   13cd0:	bl	1b004 <__assert_fail@plt+0x9bf0>
   13cd4:	str	r0, [r7, #8]
   13cd8:	b	13d44 <__assert_fail@plt+0x2930>
   13cdc:	mov	r3, #1
   13ce0:	strb	r3, [r7, #12]
   13ce4:	b	13d44 <__assert_fail@plt+0x2930>
   13ce8:	mov	r3, #0
   13cec:	strb	r3, [r7]
   13cf0:	b	13d44 <__assert_fail@plt+0x2930>
   13cf4:	mov	r2, #5
   13cf8:	movw	r1, #53864	; 0xd268
   13cfc:	movt	r1, #1
   13d00:	mov	r0, #0
   13d04:	bl	11174 <dcgettext@plt>
   13d08:	mov	r3, fp
   13d0c:	mov	r2, r0
   13d10:	mov	r1, #0
   13d14:	mov	r0, #1
   13d18:	bl	1121c <error@plt>
   13d1c:	mov	r0, #1
   13d20:	bl	131d8 <__assert_fail@plt+0x1dc4>
   13d24:	nop	{0}
   13d28:	andeq	r0, r0, r0
   13d2c:	svccc	0x00f00000	; IMB
   13d30:	andeq	ip, r1, r0, asr #4
   13d34:	andeq	lr, r2, r0, asr r1
   13d38:	mov	r9, #2
   13d3c:	b	13d44 <__assert_fail@plt+0x2930>
   13d40:	mov	r9, #1
   13d44:	mov	r3, #0
   13d48:	str	r3, [sp]
   13d4c:	ldr	r3, [pc, #-36]	; 13d30 <__assert_fail@plt+0x291c>
   13d50:	mov	r2, r6
   13d54:	mov	r1, r5
   13d58:	mov	r0, r4
   13d5c:	bl	11270 <getopt_long@plt>
   13d60:	cmn	r0, #1
   13d64:	beq	13dac <__assert_fail@plt+0x2998>
   13d68:	cmp	r0, #113	; 0x71
   13d6c:	beq	13d38 <__assert_fail@plt+0x2924>
   13d70:	ble	13964 <__assert_fail@plt+0x2550>
   13d74:	movw	r3, #257	; 0x101
   13d78:	cmp	r0, r3
   13d7c:	beq	13c1c <__assert_fail@plt+0x2808>
   13d80:	bgt	13b5c <__assert_fail@plt+0x2748>
   13d84:	cmp	r0, #118	; 0x76
   13d88:	beq	13d40 <__assert_fail@plt+0x292c>
   13d8c:	ble	13ae0 <__assert_fail@plt+0x26cc>
   13d90:	cmp	r0, #122	; 0x7a
   13d94:	beq	13ce8 <__assert_fail@plt+0x28d4>
   13d98:	cmp	r0, #256	; 0x100
   13d9c:	bne	13d1c <__assert_fail@plt+0x2908>
   13da0:	mov	r3, #1
   13da4:	strb	r3, [r7, #2]
   13da8:	b	13d44 <__assert_fail@plt+0x2930>
   13dac:	mov	fp, r0
   13db0:	movw	r3, #57808	; 0xe1d0
   13db4:	movt	r3, #2
   13db8:	ldrb	r3, [r3, #2]
   13dbc:	cmp	r3, #0
   13dc0:	beq	13e38 <__assert_fail@plt+0x2a24>
   13dc4:	movw	r3, #57808	; 0xe1d0
   13dc8:	movt	r3, #2
   13dcc:	ldrb	r3, [r3, #7]
   13dd0:	cmp	r3, #0
   13dd4:	beq	13e04 <__assert_fail@plt+0x29f0>
   13dd8:	movw	r3, #57672	; 0xe148
   13ddc:	movt	r3, #2
   13de0:	ldr	r3, [r3, #4]
   13de4:	cmp	r3, #2
   13de8:	beq	13eb8 <__assert_fail@plt+0x2aa4>
   13dec:	movw	r3, #57808	; 0xe1d0
   13df0:	movt	r3, #2
   13df4:	ldr	r0, [r3, #8]
   13df8:	cmp	r0, #0
   13dfc:	bne	13e60 <__assert_fail@plt+0x2a4c>
   13e00:	b	13f04 <__assert_fail@plt+0x2af0>
   13e04:	movw	r3, #57808	; 0xe1d0
   13e08:	movt	r3, #2
   13e0c:	mov	r6, #0
   13e10:	strb	r6, [r3, #2]
   13e14:	mov	r2, #5
   13e18:	movw	r1, #53928	; 0xd2a8
   13e1c:	movt	r1, #1
   13e20:	mov	r0, r6
   13e24:	bl	11174 <dcgettext@plt>
   13e28:	mov	r2, r0
   13e2c:	mov	r1, r6
   13e30:	mov	r0, r6
   13e34:	bl	1121c <error@plt>
   13e38:	movw	r3, #57808	; 0xe1d0
   13e3c:	movt	r3, #2
   13e40:	ldr	r0, [r3, #8]
   13e44:	cmp	r0, #0
   13e48:	beq	13f04 <__assert_fail@plt+0x2af0>
   13e4c:	movw	r3, #57808	; 0xe1d0
   13e50:	movt	r3, #2
   13e54:	ldrb	r3, [r3, #7]
   13e58:	cmp	r3, #0
   13e5c:	beq	13ee0 <__assert_fail@plt+0x2acc>
   13e60:	mov	r1, #0
   13e64:	bl	1127c <kill@plt>
   13e68:	cmp	r0, #0
   13e6c:	beq	13f04 <__assert_fail@plt+0x2af0>
   13e70:	bl	112dc <__errno_location@plt>
   13e74:	ldr	r3, [r0]
   13e78:	cmp	r3, #38	; 0x26
   13e7c:	bne	13f04 <__assert_fail@plt+0x2af0>
   13e80:	mov	r2, #5
   13e84:	movw	r1, #54112	; 0xd360
   13e88:	movt	r1, #1
   13e8c:	mov	r0, #0
   13e90:	bl	11174 <dcgettext@plt>
   13e94:	mov	r2, r0
   13e98:	mov	r1, #0
   13e9c:	mov	r0, r1
   13ea0:	bl	1121c <error@plt>
   13ea4:	movw	r3, #57808	; 0xe1d0
   13ea8:	movt	r3, #2
   13eac:	mov	r2, #0
   13eb0:	str	r2, [r3, #8]
   13eb4:	b	13f04 <__assert_fail@plt+0x2af0>
   13eb8:	mov	r2, #5
   13ebc:	movw	r1, #53992	; 0xd2e8
   13ec0:	movt	r1, #1
   13ec4:	mov	r0, #0
   13ec8:	bl	11174 <dcgettext@plt>
   13ecc:	mov	r2, r0
   13ed0:	mov	r1, #0
   13ed4:	mov	r0, r1
   13ed8:	bl	1121c <error@plt>
   13edc:	b	13e38 <__assert_fail@plt+0x2a24>
   13ee0:	mov	r2, #5
   13ee4:	movw	r1, #54048	; 0xd320
   13ee8:	movt	r1, #1
   13eec:	mov	r0, #0
   13ef0:	bl	11174 <dcgettext@plt>
   13ef4:	mov	r2, r0
   13ef8:	mov	r1, #0
   13efc:	mov	r0, r1
   13f00:	bl	1121c <error@plt>
   13f04:	movw	r3, #57808	; 0xe1d0
   13f08:	movt	r3, #2
   13f0c:	ldrb	r3, [r3, #6]
   13f10:	cmp	r3, #0
   13f14:	beq	13f38 <__assert_fail@plt+0x2b24>
   13f18:	add	r3, sp, #344	; 0x158
   13f1c:	ldrd	r0, [r3]
   13f20:	orrs	r3, r0, r1
   13f24:	beq	13f38 <__assert_fail@plt+0x2b24>
   13f28:	subs	r2, r0, #1
   13f2c:	sbc	r3, r1, #0
   13f30:	str	r2, [sp, #344]	; 0x158
   13f34:	str	r3, [sp, #348]	; 0x15c
   13f38:	movw	r3, #57784	; 0xe1b8
   13f3c:	movt	r3, #2
   13f40:	ldr	r3, [r3]
   13f44:	cmp	r3, r4
   13f48:	sublt	sl, r4, r3
   13f4c:	addlt	r5, r5, r3, lsl #2
   13f50:	ldrge	r5, [pc, #-548]	; 13d34 <__assert_fail@plt+0x2920>
   13f54:	movge	sl, #1
   13f58:	mov	r4, r5
   13f5c:	add	r7, r5, sl, lsl #2
   13f60:	mov	r6, #0
   13f64:	movw	r8, #50000	; 0xc350
   13f68:	movt	r8, #1
   13f6c:	mov	r1, r8
   13f70:	ldr	r0, [r5], #4
   13f74:	bl	110cc <strcmp@plt>
   13f78:	cmp	r0, #0
   13f7c:	moveq	r6, #1
   13f80:	cmp	r7, r5
   13f84:	bne	13f6c <__assert_fail@plt+0x2b58>
   13f88:	cmp	r6, #0
   13f8c:	beq	14074 <__assert_fail@plt+0x2c60>
   13f90:	movw	r3, #57672	; 0xe148
   13f94:	movt	r3, #2
   13f98:	ldr	r2, [r3, #4]
   13f9c:	cmp	r2, #1
   13fa0:	beq	14010 <__assert_fail@plt+0x2bfc>
   13fa4:	movw	r3, #57808	; 0xe1d0
   13fa8:	movt	r3, #2
   13fac:	ldrb	r3, [r3, #7]
   13fb0:	tst	r6, r3
   13fb4:	beq	14074 <__assert_fail@plt+0x2c60>
   13fb8:	movw	r3, #57808	; 0xe1d0
   13fbc:	movt	r3, #2
   13fc0:	ldr	r3, [r3, #8]
   13fc4:	cmp	r3, #0
   13fc8:	bne	13fd8 <__assert_fail@plt+0x2bc4>
   13fcc:	cmp	r2, #2
   13fd0:	cmpeq	sl, #1
   13fd4:	beq	1404c <__assert_fail@plt+0x2c38>
   13fd8:	mov	r0, #0
   13fdc:	bl	113cc <isatty@plt>
   13fe0:	cmp	r0, #0
   13fe4:	beq	14074 <__assert_fail@plt+0x2c60>
   13fe8:	mov	r2, #5
   13fec:	movw	r1, #54192	; 0xd3b0
   13ff0:	movt	r1, #1
   13ff4:	mov	r0, #0
   13ff8:	bl	11174 <dcgettext@plt>
   13ffc:	mov	r2, r0
   14000:	mov	r1, #0
   14004:	mov	r0, r1
   14008:	bl	1121c <error@plt>
   1400c:	b	14074 <__assert_fail@plt+0x2c60>
   14010:	mov	r2, #5
   14014:	movw	r1, #54164	; 0xd394
   14018:	movt	r1, #1
   1401c:	mov	r0, #0
   14020:	bl	11174 <dcgettext@plt>
   14024:	mov	r4, r0
   14028:	movw	r1, #50000	; 0xc350
   1402c:	movt	r1, #1
   14030:	mov	r0, #4
   14034:	bl	1a050 <__assert_fail@plt+0x8c3c>
   14038:	mov	r3, r0
   1403c:	mov	r2, r4
   14040:	mov	r1, #0
   14044:	mov	r0, #1
   14048:	bl	1121c <error@plt>
   1404c:	add	r2, sp, #240	; 0xf0
   14050:	mov	r1, #0
   14054:	mov	r0, #3
   14058:	bl	111c8 <__fxstat64@plt>
   1405c:	cmp	r0, #0
   14060:	bne	13fd8 <__assert_fail@plt+0x2bc4>
   14064:	ldr	r3, [sp, #256]	; 0x100
   14068:	and	r3, r3, #61440	; 0xf000
   1406c:	cmp	r3, #32768	; 0x8000
   14070:	beq	13fd8 <__assert_fail@plt+0x2bc4>
   14074:	add	r3, sp, #344	; 0x158
   14078:	ldrd	r2, [r3]
   1407c:	orrs	r3, r2, r3
   14080:	bne	140ac <__assert_fail@plt+0x2c98>
   14084:	movw	r3, #57808	; 0xe1d0
   14088:	movt	r3, #2
   1408c:	ldrb	r3, [r3, #7]
   14090:	cmp	r3, #0
   14094:	bne	140ac <__assert_fail@plt+0x2c98>
   14098:	movw	r3, #57808	; 0xe1d0
   1409c:	movt	r3, #2
   140a0:	ldrb	r3, [r3, #6]
   140a4:	cmp	r3, #0
   140a8:	beq	162d4 <__assert_fail@plt+0x4ec0>
   140ac:	mov	r1, #80	; 0x50
   140b0:	mov	r0, sl
   140b4:	bl	1ab88 <__assert_fail@plt+0x9774>
   140b8:	mov	r3, r0
   140bc:	str	r0, [sp, #80]	; 0x50
   140c0:	str	r0, [sp, #76]	; 0x4c
   140c4:	ldr	r2, [r4], #4
   140c8:	str	r2, [r3], #80	; 0x50
   140cc:	cmp	r7, r4
   140d0:	bne	140c4 <__assert_fail@plt+0x2cb0>
   140d4:	cmp	r9, #1
   140d8:	beq	140fc <__assert_fail@plt+0x2ce8>
   140dc:	cmp	sl, #1
   140e0:	movls	r3, #0
   140e4:	movhi	r3, #1
   140e8:	cmp	r9, #0
   140ec:	moveq	r9, r3
   140f0:	movne	r9, #0
   140f4:	cmp	r9, #0
   140f8:	beq	1410c <__assert_fail@plt+0x2cf8>
   140fc:	movw	r3, #57808	; 0xe1d0
   14100:	movt	r3, #2
   14104:	mov	r2, #1
   14108:	strb	r2, [r3, #1]
   1410c:	mov	r3, #80	; 0x50
   14110:	mul	r3, r3, sl
   14114:	str	r3, [sp, #124]	; 0x7c
   14118:	ldr	r8, [sp, #80]	; 0x50
   1411c:	add	r3, r8, r3
   14120:	str	r3, [sp, #68]	; 0x44
   14124:	mov	r3, #1
   14128:	str	r3, [sp, #48]	; 0x30
   1412c:	movw	r3, #50000	; 0xc350
   14130:	movt	r3, #1
   14134:	str	r3, [sp, #72]	; 0x48
   14138:	movw	r9, #57808	; 0xe1d0
   1413c:	movt	r9, #2
   14140:	mvn	r3, #0
   14144:	str	r3, [sp, #104]	; 0x68
   14148:	str	r3, [sp, #108]	; 0x6c
   1414c:	str	sl, [sp, #120]	; 0x78
   14150:	str	fp, [sp, #100]	; 0x64
   14154:	mov	fp, r8
   14158:	mov	r7, r9
   1415c:	b	14234 <__assert_fail@plt+0x2e20>
   14160:	mov	r1, #0
   14164:	mov	r0, r4
   14168:	bl	16d3c <__assert_fail@plt+0x5928>
   1416c:	str	r0, [sp, #28]
   14170:	ldrb	r4, [r7, #2]
   14174:	eor	r4, r4, #1
   14178:	cmn	r0, #1
   1417c:	moveq	r3, r4
   14180:	orrne	r3, r4, #1
   14184:	strb	r3, [fp, #46]	; 0x2e
   14188:	bne	14270 <__assert_fail@plt+0x2e5c>
   1418c:	ldrb	r3, [r7, #7]
   14190:	cmp	r3, #0
   14194:	beq	141c4 <__assert_fail@plt+0x2db0>
   14198:	mvn	r3, #0
   1419c:	ldr	r5, [sp, #44]	; 0x2c
   141a0:	str	r3, [r5, #48]	; 0x30
   141a4:	bl	112dc <__errno_location@plt>
   141a8:	ldr	r3, [r0]
   141ac:	str	r3, [r5, #52]	; 0x34
   141b0:	strb	r4, [r5, #44]	; 0x2c
   141b4:	mov	r2, #0
   141b8:	mov	r3, #0
   141bc:	strd	r2, [r5, #32]
   141c0:	strd	r2, [r5, #24]
   141c4:	bl	112dc <__errno_location@plt>
   141c8:	ldr	r4, [r0]
   141cc:	mov	r2, #5
   141d0:	movw	r1, #54256	; 0xd3f0
   141d4:	movt	r1, #1
   141d8:	mov	r0, #0
   141dc:	bl	11174 <dcgettext@plt>
   141e0:	mov	r5, r0
   141e4:	ldr	r0, [sp, #44]	; 0x2c
   141e8:	bl	11594 <__assert_fail@plt+0x180>
   141ec:	mov	r1, r0
   141f0:	mov	r0, #4
   141f4:	bl	1a050 <__assert_fail@plt+0x8c3c>
   141f8:	mov	r3, r0
   141fc:	mov	r2, r5
   14200:	mov	r1, r4
   14204:	mov	r0, #0
   14208:	bl	1121c <error@plt>
   1420c:	mov	r3, #0
   14210:	str	r3, [sp, #40]	; 0x28
   14214:	ldr	r3, [sp, #40]	; 0x28
   14218:	ldr	r2, [sp, #48]	; 0x30
   1421c:	and	r3, r3, r2
   14220:	str	r3, [sp, #48]	; 0x30
   14224:	add	fp, fp, #80	; 0x50
   14228:	ldr	r3, [sp, #68]	; 0x44
   1422c:	cmp	fp, r3
   14230:	beq	14e10 <__assert_fail@plt+0x39fc>
   14234:	str	fp, [sp, #44]	; 0x2c
   14238:	add	r3, sp, #344	; 0x158
   1423c:	ldrd	r2, [r3]
   14240:	strd	r2, [sp, #32]
   14244:	ldr	r4, [fp]
   14248:	ldr	r1, [sp, #72]	; 0x48
   1424c:	mov	r0, r4
   14250:	bl	110cc <strcmp@plt>
   14254:	subs	r2, r0, #0
   14258:	str	r2, [sp, #60]	; 0x3c
   1425c:	bne	14160 <__assert_fail@plt+0x2d4c>
   14260:	mov	r3, #1
   14264:	strb	r3, [r7, #4]
   14268:	strb	r3, [fp, #46]	; 0x2e
   1426c:	str	r2, [sp, #28]
   14270:	ldrb	r3, [r7, #1]
   14274:	cmp	r3, #0
   14278:	bne	14320 <__assert_fail@plt+0x2f0c>
   1427c:	ldr	r0, [sp, #44]	; 0x2c
   14280:	bl	11594 <__assert_fail@plt+0x180>
   14284:	str	r0, [sp, #64]	; 0x40
   14288:	mov	r2, #0
   1428c:	mov	r3, #0
   14290:	strd	r2, [sp, #136]	; 0x88
   14294:	ldrb	r3, [r7, #5]
   14298:	str	r3, [sp, #40]	; 0x28
   1429c:	cmp	r3, #0
   142a0:	beq	14790 <__assert_fail@plt+0x337c>
   142a4:	add	r2, sp, #240	; 0xf0
   142a8:	ldr	r1, [sp, #28]
   142ac:	mov	r0, #3
   142b0:	bl	111c8 <__fxstat64@plt>
   142b4:	cmp	r0, #0
   142b8:	bne	14330 <__assert_fail@plt+0x2f1c>
   142bc:	ldrb	r3, [r7, #6]
   142c0:	str	r3, [sp, #84]	; 0x54
   142c4:	cmp	r3, #0
   142c8:	bne	1437c <__assert_fail@plt+0x2f68>
   142cc:	ldrb	r3, [r7, #12]
   142d0:	cmp	r3, #0
   142d4:	bne	142e8 <__assert_fail@plt+0x2ed4>
   142d8:	ldr	r3, [sp, #256]	; 0x100
   142dc:	and	r3, r3, #61440	; 0xf000
   142e0:	cmp	r3, #32768	; 0x8000
   142e4:	beq	143e8 <__assert_fail@plt+0x2fd4>
   142e8:	movw	r0, #8204	; 0x200c
   142ec:	bl	1aa08 <__assert_fail@plt+0x95f4>
   142f0:	mov	sl, r0
   142f4:	str	r0, [sp, #52]	; 0x34
   142f8:	add	r3, r0, #8192	; 0x2000
   142fc:	mov	r9, #0
   14300:	str	r9, [r3, #4]
   14304:	str	r9, [r3]
   14308:	str	r9, [r3, #8]
   1430c:	movw	r0, #8204	; 0x200c
   14310:	bl	1aa08 <__assert_fail@plt+0x95f4>
   14314:	mov	r5, r0
   14318:	str	fp, [sp, #96]	; 0x60
   1431c:	b	144d8 <__assert_fail@plt+0x30c4>
   14320:	ldr	r0, [sp, #44]	; 0x2c
   14324:	bl	11594 <__assert_fail@plt+0x180>
   14328:	bl	11538 <__assert_fail@plt+0x124>
   1432c:	b	1427c <__assert_fail@plt+0x2e68>
   14330:	bl	112dc <__errno_location@plt>
   14334:	ldr	r4, [r0]
   14338:	mov	r2, #5
   1433c:	movw	r1, #54284	; 0xd40c
   14340:	movt	r1, #1
   14344:	mov	r0, #0
   14348:	bl	11174 <dcgettext@plt>
   1434c:	mov	r5, r0
   14350:	ldr	r1, [sp, #64]	; 0x40
   14354:	mov	r0, #4
   14358:	bl	1a050 <__assert_fail@plt+0x8c3c>
   1435c:	mov	r3, r0
   14360:	mov	r2, r5
   14364:	mov	r1, r4
   14368:	mov	r0, #0
   1436c:	bl	1121c <error@plt>
   14370:	mov	r3, #0
   14374:	str	r3, [sp, #40]	; 0x28
   14378:	b	16178 <__assert_fail@plt+0x4d64>
   1437c:	add	r3, sp, #136	; 0x88
   14380:	str	r3, [sp]
   14384:	ldrd	r2, [sp, #32]
   14388:	ldr	r1, [sp, #28]
   1438c:	ldr	r0, [sp, #64]	; 0x40
   14390:	bl	11704 <__assert_fail@plt+0x2f0>
   14394:	cmp	r0, #0
   14398:	lsrne	r3, r0, #31
   1439c:	strne	r3, [sp, #40]	; 0x28
   143a0:	bne	16178 <__assert_fail@plt+0x4d64>
   143a4:	ldr	r3, [sp, #104]	; 0x68
   143a8:	str	r3, [sp]
   143ac:	ldr	r3, [sp, #108]	; 0x6c
   143b0:	str	r3, [sp, #4]
   143b4:	ldr	r2, [sp, #28]
   143b8:	ldr	r1, [sp, #64]	; 0x40
   143bc:	mov	r0, #0
   143c0:	bl	1184c <__assert_fail@plt+0x438>
   143c4:	ldr	r3, [sp, #136]	; 0x88
   143c8:	adds	r3, r3, r0
   143cc:	ldr	r2, [sp, #140]	; 0x8c
   143d0:	adc	r2, r2, r1
   143d4:	str	r3, [sp, #136]	; 0x88
   143d8:	str	r2, [sp, #140]	; 0x8c
   143dc:	ldr	r3, [sp, #84]	; 0x54
   143e0:	str	r3, [sp, #40]	; 0x28
   143e4:	b	16178 <__assert_fail@plt+0x4d64>
   143e8:	mov	r3, #1
   143ec:	str	r3, [sp]
   143f0:	mov	r2, #0
   143f4:	mov	r3, #0
   143f8:	ldr	r6, [sp, #28]
   143fc:	mov	r0, r6
   14400:	bl	111ec <lseek64@plt>
   14404:	mov	r4, r0
   14408:	mov	r5, r1
   1440c:	mvn	r2, #0
   14410:	mvn	r3, #0
   14414:	cmp	r1, r3
   14418:	cmpeq	r0, r2
   1441c:	beq	142e8 <__assert_fail@plt+0x2ed4>
   14420:	mov	r3, #2
   14424:	str	r3, [sp]
   14428:	mov	r2, #0
   1442c:	mov	r3, #0
   14430:	mov	r0, r6
   14434:	bl	111ec <lseek64@plt>
   14438:	cmp	r4, r0
   1443c:	sbcs	r3, r5, r1
   14440:	bge	16094 <__assert_fail@plt+0x4c80>
   14444:	strd	r0, [sp, #136]	; 0x88
   14448:	orrs	r3, r0, r1
   1444c:	beq	16178 <__assert_fail@plt+0x4d64>
   14450:	add	r3, sp, #136	; 0x88
   14454:	str	r3, [sp, #16]
   14458:	strd	r0, [sp, #8]
   1445c:	strd	r4, [sp]
   14460:	ldrd	r2, [sp, #32]
   14464:	ldr	r1, [sp, #28]
   14468:	ldr	r0, [sp, #64]	; 0x40
   1446c:	bl	11c2c <__assert_fail@plt+0x818>
   14470:	str	r0, [sp, #40]	; 0x28
   14474:	b	16178 <__assert_fail@plt+0x4d64>
   14478:	add	r3, r5, #8192	; 0x2000
   1447c:	ldr	r4, [r3, #4]
   14480:	add	r4, r9, r4
   14484:	add	r3, sl, #8192	; 0x2000
   14488:	ldr	r0, [r3]
   1448c:	add	r3, r6, r0
   14490:	cmp	r3, #8192	; 0x2000
   14494:	bcc	14558 <__assert_fail@plt+0x3144>
   14498:	add	sl, sl, #8192	; 0x2000
   1449c:	str	r5, [sl, #8]
   144a0:	ldr	ip, [sp, #52]	; 0x34
   144a4:	add	r3, ip, #8192	; 0x2000
   144a8:	ldr	r9, [r3, #4]
   144ac:	sub	r9, r4, r9
   144b0:	mov	r3, #0
   144b4:	ldrd	r0, [sp, #32]
   144b8:	cmp	r1, r3
   144bc:	cmpeq	r0, r9
   144c0:	bcs	14598 <__assert_fail@plt+0x3184>
   144c4:	add	r3, ip, #8192	; 0x2000
   144c8:	mov	sl, r5
   144cc:	mov	r5, ip
   144d0:	ldr	r3, [r3, #8]
   144d4:	str	r3, [sp, #52]	; 0x34
   144d8:	str	r5, [sp, #56]	; 0x38
   144dc:	mov	r2, #8192	; 0x2000
   144e0:	mov	r1, r5
   144e4:	ldr	r0, [sp, #28]
   144e8:	bl	1a360 <__assert_fail@plt+0x8f4c>
   144ec:	mov	r6, r0
   144f0:	sub	r3, r0, #1
   144f4:	cmn	r3, #3
   144f8:	bhi	145b0 <__assert_fail@plt+0x319c>
   144fc:	add	ip, r5, #8192	; 0x2000
   14500:	str	r0, [ip]
   14504:	ldrd	r2, [sp, #136]	; 0x88
   14508:	adds	r0, r2, r0
   1450c:	adc	r1, r3, #0
   14510:	strd	r0, [sp, #136]	; 0x88
   14514:	mov	r3, #0
   14518:	str	r3, [ip, #4]
   1451c:	str	r3, [ip, #8]
   14520:	add	fp, r5, r6
   14524:	ldrb	r8, [r7]
   14528:	mov	r0, r5
   1452c:	mov	r4, ip
   14530:	sub	r2, fp, r0
   14534:	mov	r1, r8
   14538:	bl	11330 <memchr@plt>
   1453c:	cmp	r0, #0
   14540:	beq	14478 <__assert_fail@plt+0x3064>
   14544:	add	r0, r0, #1
   14548:	ldr	r3, [r4, #4]
   1454c:	add	r3, r3, #1
   14550:	str	r3, [r4, #4]
   14554:	b	14530 <__assert_fail@plt+0x311c>
   14558:	mov	r2, r6
   1455c:	ldr	r1, [sp, #56]	; 0x38
   14560:	add	r0, sl, r0
   14564:	bl	1112c <memcpy@plt>
   14568:	add	r3, sl, #8192	; 0x2000
   1456c:	add	r1, r5, #8192	; 0x2000
   14570:	ldr	r2, [r3]
   14574:	ldr	r0, [r1]
   14578:	add	r2, r2, r0
   1457c:	str	r2, [r3]
   14580:	ldr	r2, [r3, #4]
   14584:	ldr	r1, [r1, #4]
   14588:	add	r2, r2, r1
   1458c:	str	r2, [r3, #4]
   14590:	mov	r9, r4
   14594:	b	144d8 <__assert_fail@plt+0x30c4>
   14598:	movw	r0, #8204	; 0x200c
   1459c:	bl	1aa08 <__assert_fail@plt+0x95f4>
   145a0:	mov	r9, r4
   145a4:	mov	sl, r5
   145a8:	mov	r5, r0
   145ac:	b	144d8 <__assert_fail@plt+0x30c4>
   145b0:	ldr	fp, [sp, #96]	; 0x60
   145b4:	mov	r0, r5
   145b8:	bl	16d78 <__assert_fail@plt+0x5964>
   145bc:	cmn	r6, #1
   145c0:	beq	14630 <__assert_fail@plt+0x321c>
   145c4:	add	r3, sl, #8192	; 0x2000
   145c8:	ldr	r3, [r3]
   145cc:	ldrd	r0, [sp, #32]
   145d0:	mov	r2, r0
   145d4:	orrs	r2, r2, r1
   145d8:	moveq	r2, #1
   145dc:	movne	r2, #0
   145e0:	cmp	r3, #0
   145e4:	moveq	r2, #1
   145e8:	str	r2, [sp, #84]	; 0x54
   145ec:	cmp	r2, #0
   145f0:	beq	14674 <__assert_fail@plt+0x3260>
   145f4:	ldr	r3, [sp, #52]	; 0x34
   145f8:	cmp	r3, #0
   145fc:	ldreq	r3, [sp, #84]	; 0x54
   14600:	streq	r3, [sp, #40]	; 0x28
   14604:	beq	16178 <__assert_fail@plt+0x4d64>
   14608:	ldr	r0, [sp, #52]	; 0x34
   1460c:	add	r3, r0, #8192	; 0x2000
   14610:	ldr	r4, [r3, #8]
   14614:	bl	16d78 <__assert_fail@plt+0x5964>
   14618:	mov	r0, r4
   1461c:	cmp	r4, #0
   14620:	bne	1460c <__assert_fail@plt+0x31f8>
   14624:	ldr	r3, [sp, #84]	; 0x54
   14628:	str	r3, [sp, #40]	; 0x28
   1462c:	b	16178 <__assert_fail@plt+0x4d64>
   14630:	bl	112dc <__errno_location@plt>
   14634:	ldr	r4, [r0]
   14638:	mov	r2, #5
   1463c:	movw	r1, #50076	; 0xc39c
   14640:	movt	r1, #1
   14644:	mov	r0, #0
   14648:	bl	11174 <dcgettext@plt>
   1464c:	mov	r5, r0
   14650:	ldr	r1, [sp, #64]	; 0x40
   14654:	mov	r0, #4
   14658:	bl	1a050 <__assert_fail@plt+0x8c3c>
   1465c:	mov	r3, r0
   14660:	mov	r2, r5
   14664:	mov	r1, r4
   14668:	mov	r0, #0
   1466c:	bl	1121c <error@plt>
   14670:	b	145f4 <__assert_fail@plt+0x31e0>
   14674:	ldrb	r6, [r7]
   14678:	add	r3, sl, r3
   1467c:	ldrb	r3, [r3, #-1]
   14680:	cmp	r3, r6
   14684:	beq	1469c <__assert_fail@plt+0x3288>
   14688:	add	sl, sl, #8192	; 0x2000
   1468c:	ldr	r3, [sl, #4]
   14690:	add	r3, r3, #1
   14694:	str	r3, [sl, #4]
   14698:	add	r9, r9, #1
   1469c:	ldr	ip, [sp, #52]	; 0x34
   146a0:	add	r3, ip, #8192	; 0x2000
   146a4:	ldr	r2, [r3, #4]
   146a8:	sub	r2, r9, r2
   146ac:	mov	r1, #0
   146b0:	ldrd	r4, [sp, #32]
   146b4:	cmp	r5, r1
   146b8:	cmpeq	r4, r2
   146bc:	bcs	14740 <__assert_fail@plt+0x332c>
   146c0:	mov	r4, ip
   146c4:	ldrd	r8, [sp, #32]
   146c8:	b	146d0 <__assert_fail@plt+0x32bc>
   146cc:	mov	r2, r3
   146d0:	add	r4, r4, #8192	; 0x2000
   146d4:	ldr	r4, [r4, #8]
   146d8:	add	r3, r4, #8192	; 0x2000
   146dc:	ldr	r3, [r3, #4]
   146e0:	sub	r3, r2, r3
   146e4:	mov	r1, #0
   146e8:	cmp	r9, r1
   146ec:	cmpeq	r8, r3
   146f0:	bcc	146cc <__assert_fail@plt+0x32b8>
   146f4:	mov	r9, r2
   146f8:	mov	ip, r4
   146fc:	add	r3, r4, #8192	; 0x2000
   14700:	ldr	r5, [r3]
   14704:	add	r5, r4, r5
   14708:	mov	r3, #0
   1470c:	ldrd	r0, [sp, #32]
   14710:	cmp	r1, r3
   14714:	cmpeq	r0, r9
   14718:	bcs	1474c <__assert_fail@plt+0x3338>
   1471c:	sub	r9, r9, r0
   14720:	mov	r0, r4
   14724:	cmp	r9, #0
   14728:	beq	14748 <__assert_fail@plt+0x3334>
   1472c:	mov	r1, r6
   14730:	bl	11198 <rawmemchr@plt>
   14734:	add	r0, r0, #1
   14738:	sub	r9, r9, #1
   1473c:	b	14724 <__assert_fail@plt+0x3310>
   14740:	ldr	r4, [sp, #52]	; 0x34
   14744:	b	146f8 <__assert_fail@plt+0x32e4>
   14748:	mov	ip, r0
   1474c:	sub	r1, r5, ip
   14750:	mov	r0, ip
   14754:	bl	1166c <__assert_fail@plt+0x258>
   14758:	add	r4, r4, #8192	; 0x2000
   1475c:	ldr	r0, [r4, #8]
   14760:	cmp	r0, #0
   14764:	beq	14780 <__assert_fail@plt+0x336c>
   14768:	add	r4, r0, #8192	; 0x2000
   1476c:	ldr	r1, [r4]
   14770:	bl	1166c <__assert_fail@plt+0x258>
   14774:	ldr	r0, [r4, #8]
   14778:	cmp	r0, #0
   1477c:	bne	14768 <__assert_fail@plt+0x3354>
   14780:	ldr	r3, [sp, #40]	; 0x28
   14784:	str	r3, [sp, #84]	; 0x54
   14788:	ldr	r0, [sp, #52]	; 0x34
   1478c:	b	1460c <__assert_fail@plt+0x31f8>
   14790:	add	r2, sp, #240	; 0xf0
   14794:	ldr	r1, [sp, #28]
   14798:	mov	r0, #3
   1479c:	bl	111c8 <__fxstat64@plt>
   147a0:	cmp	r0, #0
   147a4:	bne	14844 <__assert_fail@plt+0x3430>
   147a8:	ldrb	r3, [r7, #6]
   147ac:	str	r3, [sp, #40]	; 0x28
   147b0:	cmp	r3, #0
   147b4:	beq	148f0 <__assert_fail@plt+0x34dc>
   147b8:	ldrb	r3, [r7, #12]
   147bc:	cmp	r3, #0
   147c0:	bne	148b8 <__assert_fail@plt+0x34a4>
   147c4:	ldrd	r2, [sp, #32]
   147c8:	mov	r4, r2
   147cc:	mov	r5, r3
   147d0:	cmp	r2, #0
   147d4:	sbcs	r3, r3, #0
   147d8:	blt	148b8 <__assert_fail@plt+0x34a4>
   147dc:	ldr	r3, [sp, #256]	; 0x100
   147e0:	and	r3, r3, #61440	; 0xf000
   147e4:	cmp	r3, #32768	; 0x8000
   147e8:	beq	14888 <__assert_fail@plt+0x3474>
   147ec:	mov	r3, #1
   147f0:	str	r3, [sp]
   147f4:	mov	r2, r4
   147f8:	mov	r3, r5
   147fc:	ldr	r0, [sp, #28]
   14800:	bl	111ec <lseek64@plt>
   14804:	mvn	r2, #0
   14808:	mvn	r3, #0
   1480c:	cmp	r1, r3
   14810:	cmpeq	r0, r2
   14814:	beq	148b8 <__assert_fail@plt+0x34a4>
   14818:	ldr	r3, [sp, #136]	; 0x88
   1481c:	ldrd	r0, [sp, #32]
   14820:	adds	r3, r3, r0
   14824:	ldr	r2, [sp, #140]	; 0x8c
   14828:	adc	r2, r2, r1
   1482c:	str	r3, [sp, #136]	; 0x88
   14830:	str	r2, [sp, #140]	; 0x8c
   14834:	mvn	r2, #0
   14838:	mvn	r3, #0
   1483c:	strd	r2, [sp, #32]
   14840:	b	16140 <__assert_fail@plt+0x4d2c>
   14844:	bl	112dc <__errno_location@plt>
   14848:	ldr	r4, [r0]
   1484c:	mov	r2, #5
   14850:	movw	r1, #54284	; 0xd40c
   14854:	movt	r1, #1
   14858:	mov	r0, #0
   1485c:	bl	11174 <dcgettext@plt>
   14860:	mov	r5, r0
   14864:	ldr	r1, [sp, #64]	; 0x40
   14868:	mov	r0, #4
   1486c:	bl	1a050 <__assert_fail@plt+0x8c3c>
   14870:	mov	r3, r0
   14874:	mov	r2, r5
   14878:	mov	r1, r4
   1487c:	mov	r0, #0
   14880:	bl	1121c <error@plt>
   14884:	b	16178 <__assert_fail@plt+0x4d64>
   14888:	ldr	r3, [sp, #64]	; 0x40
   1488c:	str	r3, [sp, #4]
   14890:	mov	r3, #1
   14894:	str	r3, [sp]
   14898:	mov	r2, r4
   1489c:	mov	r3, r5
   148a0:	ldr	r0, [sp, #28]
   148a4:	bl	11ad0 <__assert_fail@plt+0x6bc>
   148a8:	cmp	r0, #0
   148ac:	sbcs	r3, r1, #0
   148b0:	bge	14818 <__assert_fail@plt+0x3404>
   148b4:	b	147ec <__assert_fail@plt+0x33d8>
   148b8:	add	r3, sp, #136	; 0x88
   148bc:	str	r3, [sp]
   148c0:	ldrd	r2, [sp, #32]
   148c4:	ldr	r1, [sp, #28]
   148c8:	ldr	r0, [sp, #64]	; 0x40
   148cc:	bl	119ac <__assert_fail@plt+0x598>
   148d0:	cmp	r0, #0
   148d4:	lsrne	r3, r0, #31
   148d8:	strne	r3, [sp, #40]	; 0x28
   148dc:	bne	16178 <__assert_fail@plt+0x4d64>
   148e0:	mvn	r2, #0
   148e4:	mvn	r3, #0
   148e8:	strd	r2, [sp, #32]
   148ec:	b	16140 <__assert_fail@plt+0x4d2c>
   148f0:	ldrb	r3, [r7, #12]
   148f4:	cmp	r3, #0
   148f8:	bne	160b8 <__assert_fail@plt+0x4ca4>
   148fc:	ldrd	r2, [sp, #32]
   14900:	cmp	r2, #0
   14904:	sbcs	r3, r3, #0
   14908:	blt	160b8 <__assert_fail@plt+0x4ca4>
   1490c:	ldr	r3, [sp, #256]	; 0x100
   14910:	and	r3, r3, #53248	; 0xd000
   14914:	cmp	r3, #32768	; 0x8000
   14918:	bne	14944 <__assert_fail@plt+0x3530>
   1491c:	add	r3, sp, #288	; 0x120
   14920:	ldrd	r2, [r3]
   14924:	strd	r2, [sp, #88]	; 0x58
   14928:	mvn	r4, #0
   1492c:	mvn	r5, #0
   14930:	ldr	r2, [sp, #296]	; 0x128
   14934:	sub	r3, r2, #1
   14938:	cmp	r3, #536870912	; 0x20000000
   1493c:	movcs	r2, #512	; 0x200
   14940:	b	160e0 <__assert_fail@plt+0x4ccc>
   14944:	mov	r3, #2
   14948:	str	r3, [sp]
   1494c:	ldrd	r8, [sp, #32]
   14950:	rsbs	r2, r8, #0
   14954:	rsc	r3, r9, #0
   14958:	ldr	r0, [sp, #28]
   1495c:	bl	111ec <lseek64@plt>
   14960:	mov	r4, r0
   14964:	mov	r5, r1
   14968:	mvn	r2, #0
   1496c:	mvn	r3, #0
   14970:	cmp	r1, r3
   14974:	cmpeq	r0, r2
   14978:	beq	160b8 <__assert_fail@plt+0x4ca4>
   1497c:	adds	r3, r0, r8
   14980:	str	r3, [sp, #88]	; 0x58
   14984:	adc	r3, r1, r9
   14988:	str	r3, [sp, #92]	; 0x5c
   1498c:	b	14930 <__assert_fail@plt+0x351c>
   14990:	movw	r0, #8200	; 0x2008
   14994:	bl	1aa08 <__assert_fail@plt+0x95f4>
   14998:	mov	r9, r0
   1499c:	add	r3, r0, #8192	; 0x2000
   149a0:	mov	r6, #0
   149a4:	str	r6, [r3]
   149a8:	str	r6, [r3, #4]
   149ac:	movw	r0, #8200	; 0x2008
   149b0:	bl	1aa08 <__assert_fail@plt+0x95f4>
   149b4:	mov	r4, r0
   149b8:	mov	r8, r9
   149bc:	str	fp, [sp, #52]	; 0x34
   149c0:	b	149fc <__assert_fail@plt+0x35e8>
   149c4:	mov	r2, r0
   149c8:	mov	r1, r4
   149cc:	add	r0, r8, r3
   149d0:	bl	1112c <memcpy@plt>
   149d4:	add	r2, r8, #8192	; 0x2000
   149d8:	add	r1, r4, #8192	; 0x2000
   149dc:	ldr	r3, [r2]
   149e0:	ldr	r1, [r1]
   149e4:	add	r3, r3, r1
   149e8:	str	r3, [r2]
   149ec:	mov	r0, r4
   149f0:	mov	r4, r8
   149f4:	mov	r8, r4
   149f8:	mov	r4, r0
   149fc:	mov	r2, #8192	; 0x2000
   14a00:	mov	r1, r4
   14a04:	ldr	r0, [sp, #28]
   14a08:	bl	1a360 <__assert_fail@plt+0x8f4c>
   14a0c:	sub	r3, r0, #1
   14a10:	cmn	r3, #3
   14a14:	bhi	14a98 <__assert_fail@plt+0x3684>
   14a18:	ldrd	r2, [sp, #136]	; 0x88
   14a1c:	adds	sl, r2, r0
   14a20:	adc	fp, r3, #0
   14a24:	strd	sl, [sp, #136]	; 0x88
   14a28:	add	r3, r4, #8192	; 0x2000
   14a2c:	str	r0, [r3]
   14a30:	mov	r2, #0
   14a34:	str	r2, [r3, #4]
   14a38:	add	r6, r6, r0
   14a3c:	add	r3, r8, #8192	; 0x2000
   14a40:	ldr	r3, [r3]
   14a44:	add	r2, r0, r3
   14a48:	cmp	r2, #8192	; 0x2000
   14a4c:	bcc	149c4 <__assert_fail@plt+0x35b0>
   14a50:	add	r8, r8, #8192	; 0x2000
   14a54:	str	r4, [r8, #4]
   14a58:	add	r3, r9, #8192	; 0x2000
   14a5c:	ldr	r3, [r3]
   14a60:	sub	r3, r6, r3
   14a64:	mov	r1, #0
   14a68:	ldrd	sl, [sp, #32]
   14a6c:	cmp	fp, r1
   14a70:	cmpeq	sl, r3
   14a74:	bcs	14a8c <__assert_fail@plt+0x3678>
   14a78:	add	r2, r9, #8192	; 0x2000
   14a7c:	mov	r6, r3
   14a80:	mov	r0, r9
   14a84:	ldr	r9, [r2, #4]
   14a88:	b	149f4 <__assert_fail@plt+0x35e0>
   14a8c:	movw	r0, #8200	; 0x2008
   14a90:	bl	1aa08 <__assert_fail@plt+0x95f4>
   14a94:	b	149f4 <__assert_fail@plt+0x35e0>
   14a98:	ldr	fp, [sp, #52]	; 0x34
   14a9c:	mov	r5, r0
   14aa0:	mov	r0, r4
   14aa4:	bl	16d78 <__assert_fail@plt+0x5964>
   14aa8:	cmn	r5, #1
   14aac:	movne	r4, r9
   14ab0:	movne	ip, r9
   14ab4:	ldrdne	r8, [sp, #32]
   14ab8:	beq	14ae8 <__assert_fail@plt+0x36d4>
   14abc:	add	r3, r4, #8192	; 0x2000
   14ac0:	ldr	r2, [r3]
   14ac4:	sub	r3, r6, r2
   14ac8:	mov	r1, #0
   14acc:	cmp	r9, r1
   14ad0:	cmpeq	r8, r3
   14ad4:	bcs	14b30 <__assert_fail@plt+0x371c>
   14ad8:	add	r4, r4, #8192	; 0x2000
   14adc:	ldr	r4, [r4, #4]
   14ae0:	mov	r6, r3
   14ae4:	b	14abc <__assert_fail@plt+0x36a8>
   14ae8:	bl	112dc <__errno_location@plt>
   14aec:	ldr	r4, [r0]
   14af0:	mov	r2, #5
   14af4:	movw	r1, #50076	; 0xc39c
   14af8:	movt	r1, #1
   14afc:	mov	r0, #0
   14b00:	bl	11174 <dcgettext@plt>
   14b04:	mov	r5, r0
   14b08:	ldr	r1, [sp, #64]	; 0x40
   14b0c:	mov	r0, #4
   14b10:	bl	1a050 <__assert_fail@plt+0x8c3c>
   14b14:	mov	r3, r0
   14b18:	mov	r2, r5
   14b1c:	mov	r1, r4
   14b20:	mov	r0, #0
   14b24:	bl	1121c <error@plt>
   14b28:	mov	r0, r9
   14b2c:	b	14ba8 <__assert_fail@plt+0x3794>
   14b30:	mov	r9, ip
   14b34:	mov	ip, r2
   14b38:	mov	r0, r6
   14b3c:	mov	r1, #0
   14b40:	ldrd	r2, [sp, #32]
   14b44:	cmp	r3, r1
   14b48:	cmpeq	r2, r6
   14b4c:	movcc	r3, r2
   14b50:	subcc	r0, r6, r3
   14b54:	movcs	r0, #0
   14b58:	sub	r1, ip, r0
   14b5c:	add	r0, r4, r0
   14b60:	bl	1166c <__assert_fail@plt+0x258>
   14b64:	add	r4, r4, #8192	; 0x2000
   14b68:	ldr	r0, [r4, #4]
   14b6c:	b	14b80 <__assert_fail@plt+0x376c>
   14b70:	add	r4, r0, #8192	; 0x2000
   14b74:	ldr	r1, [r4]
   14b78:	bl	1166c <__assert_fail@plt+0x258>
   14b7c:	ldr	r0, [r4, #4]
   14b80:	cmp	r0, #0
   14b84:	bne	14b70 <__assert_fail@plt+0x375c>
   14b88:	mov	r3, #1
   14b8c:	str	r3, [sp, #40]	; 0x28
   14b90:	mov	r0, r9
   14b94:	b	14ba8 <__assert_fail@plt+0x3794>
   14b98:	add	r3, r0, #8192	; 0x2000
   14b9c:	ldr	r4, [r3, #4]
   14ba0:	bl	16d78 <__assert_fail@plt+0x5964>
   14ba4:	mov	r0, r4
   14ba8:	cmp	r0, #0
   14bac:	bne	14b98 <__assert_fail@plt+0x3784>
   14bb0:	b	16178 <__assert_fail@plt+0x4d64>
   14bb4:	ldr	r3, [sp, #64]	; 0x40
   14bb8:	str	r3, [sp, #4]
   14bbc:	mov	r3, #1
   14bc0:	str	r3, [sp]
   14bc4:	mov	r2, #0
   14bc8:	mov	r3, #0
   14bcc:	ldr	r0, [sp, #28]
   14bd0:	bl	11ad0 <__assert_fail@plt+0x6bc>
   14bd4:	mov	r4, r0
   14bd8:	mov	r5, r1
   14bdc:	b	16108 <__assert_fail@plt+0x4cf4>
   14be0:	ldrd	r0, [sp, #88]	; 0x58
   14be4:	subs	r4, r0, r2
   14be8:	sbc	r5, r1, r3
   14bec:	ldr	r3, [sp, #64]	; 0x40
   14bf0:	str	r3, [sp, #4]
   14bf4:	mov	r3, #0
   14bf8:	str	r3, [sp]
   14bfc:	mov	r2, r4
   14c00:	mov	r3, r5
   14c04:	ldr	r0, [sp, #28]
   14c08:	bl	11ad0 <__assert_fail@plt+0x6bc>
   14c0c:	b	1613c <__assert_fail@plt+0x4d28>
   14c10:	ldr	r3, [sp, #40]	; 0x28
   14c14:	sub	r3, r3, #1
   14c18:	ldr	r2, [sp, #44]	; 0x2c
   14c1c:	str	r3, [r2, #52]	; 0x34
   14c20:	add	r2, sp, #240	; 0xf0
   14c24:	ldr	r1, [sp, #28]
   14c28:	mov	r0, #3
   14c2c:	bl	111c8 <__fxstat64@plt>
   14c30:	cmp	r0, #0
   14c34:	blt	14c9c <__assert_fail@plt+0x3888>
   14c38:	ldr	r1, [sp, #256]	; 0x100
   14c3c:	and	r3, r1, #61440	; 0xf000
   14c40:	sub	r3, r3, #4096	; 0x1000
   14c44:	bic	r3, r3, #4096	; 0x1000
   14c48:	and	r2, r1, #45056	; 0xb000
   14c4c:	cmp	r2, #32768	; 0x8000
   14c50:	cmpne	r3, #0
   14c54:	bne	14cf0 <__assert_fail@plt+0x38dc>
   14c58:	ldr	r3, [sp, #40]	; 0x28
   14c5c:	cmp	r3, #0
   14c60:	bne	14d8c <__assert_fail@plt+0x3978>
   14c64:	ldrb	r3, [r7, #2]
   14c68:	eor	r3, r3, #1
   14c6c:	ldr	r4, [sp, #44]	; 0x2c
   14c70:	strb	r3, [r4, #44]	; 0x2c
   14c74:	mov	r0, r4
   14c78:	bl	11594 <__assert_fail@plt+0x180>
   14c7c:	mov	r1, r0
   14c80:	ldr	r0, [sp, #28]
   14c84:	bl	115e0 <__assert_fail@plt+0x1cc>
   14c88:	mvn	r3, #0
   14c8c:	str	r3, [r4, #48]	; 0x30
   14c90:	mov	r3, #0
   14c94:	str	r3, [sp, #40]	; 0x28
   14c98:	b	14214 <__assert_fail@plt+0x2e00>
   14c9c:	bl	112dc <__errno_location@plt>
   14ca0:	ldr	r4, [r0]
   14ca4:	ldr	r6, [sp, #44]	; 0x2c
   14ca8:	str	r4, [r6, #52]	; 0x34
   14cac:	mov	r2, #5
   14cb0:	movw	r1, #50076	; 0xc39c
   14cb4:	movt	r1, #1
   14cb8:	mov	r0, #0
   14cbc:	bl	11174 <dcgettext@plt>
   14cc0:	mov	r5, r0
   14cc4:	mov	r0, r6
   14cc8:	bl	11594 <__assert_fail@plt+0x180>
   14ccc:	mov	r1, r0
   14cd0:	mov	r0, #4
   14cd4:	bl	1a050 <__assert_fail@plt+0x8c3c>
   14cd8:	mov	r3, r0
   14cdc:	mov	r2, r5
   14ce0:	mov	r1, r4
   14ce4:	mov	r0, #0
   14ce8:	bl	1121c <error@plt>
   14cec:	b	14c64 <__assert_fail@plt+0x3850>
   14cf0:	mvn	r3, #0
   14cf4:	ldr	r6, [sp, #44]	; 0x2c
   14cf8:	str	r3, [r6, #52]	; 0x34
   14cfc:	mov	r4, #0
   14d00:	strb	r4, [r6, #46]	; 0x2e
   14d04:	ldrb	r3, [r7, #2]
   14d08:	eor	r3, r3, #1
   14d0c:	strb	r3, [r6, #44]	; 0x2c
   14d10:	mov	r2, #5
   14d14:	movw	r1, #54300	; 0xd41c
   14d18:	movt	r1, #1
   14d1c:	mov	r0, r4
   14d20:	bl	11174 <dcgettext@plt>
   14d24:	mov	r5, r0
   14d28:	mov	r0, r6
   14d2c:	bl	11594 <__assert_fail@plt+0x180>
   14d30:	mov	r2, r0
   14d34:	mov	r1, #3
   14d38:	mov	r0, r4
   14d3c:	bl	1a174 <__assert_fail@plt+0x8d60>
   14d40:	mov	r4, r0
   14d44:	ldrb	r3, [r6, #44]	; 0x2c
   14d48:	cmp	r3, #0
   14d4c:	movweq	r0, #52884	; 0xce94
   14d50:	movteq	r0, #1
   14d54:	bne	14d74 <__assert_fail@plt+0x3960>
   14d58:	str	r0, [sp]
   14d5c:	mov	r3, r4
   14d60:	mov	r2, r5
   14d64:	mov	r1, #0
   14d68:	mov	r0, r1
   14d6c:	bl	1121c <error@plt>
   14d70:	b	14c64 <__assert_fail@plt+0x3850>
   14d74:	mov	r2, #5
   14d78:	movw	r1, #50464	; 0xc520
   14d7c:	movt	r1, #1
   14d80:	mov	r0, #0
   14d84:	bl	11174 <dcgettext@plt>
   14d88:	b	14d58 <__assert_fail@plt+0x3944>
   14d8c:	ldr	r3, [sp, #60]	; 0x3c
   14d90:	cmp	r3, #0
   14d94:	ldr	r3, [sp, #100]	; 0x64
   14d98:	moveq	r0, r3
   14d9c:	movne	r0, #1
   14da0:	ldr	r4, [sp, #44]	; 0x2c
   14da4:	ldr	r5, [sp, #28]
   14da8:	str	r5, [r4, #48]	; 0x30
   14dac:	ldrd	r2, [sp, #136]	; 0x88
   14db0:	strd	r2, [r4, #8]
   14db4:	ldr	r3, [sp, #320]	; 0x140
   14db8:	str	r3, [r4, #16]
   14dbc:	ldr	r3, [sp, #324]	; 0x144
   14dc0:	str	r3, [r4, #20]
   14dc4:	ldrd	r2, [sp, #240]	; 0xf0
   14dc8:	strd	r2, [r4, #24]
   14dcc:	add	r3, sp, #336	; 0x150
   14dd0:	ldrd	r2, [r3]
   14dd4:	strd	r2, [r4, #32]
   14dd8:	str	r1, [r4, #40]	; 0x28
   14ddc:	str	r0, [r4, #56]	; 0x38
   14de0:	mov	r2, #0
   14de4:	mov	r3, #0
   14de8:	strd	r2, [r4, #72]	; 0x48
   14dec:	mov	r3, #0
   14df0:	strb	r3, [r4, #44]	; 0x2c
   14df4:	mov	r0, r4
   14df8:	bl	11594 <__assert_fail@plt+0x180>
   14dfc:	mov	r1, r0
   14e00:	mov	r0, r5
   14e04:	bl	11fc4 <__assert_fail@plt+0xbb0>
   14e08:	strb	r0, [r4, #45]	; 0x2d
   14e0c:	b	14214 <__assert_fail@plt+0x2e00>
   14e10:	ldr	sl, [sp, #120]	; 0x78
   14e14:	ldr	fp, [sp, #100]	; 0x64
   14e18:	movw	r3, #57808	; 0xe1d0
   14e1c:	movt	r3, #2
   14e20:	ldrb	r3, [r3, #7]
   14e24:	str	r3, [sp, #56]	; 0x38
   14e28:	cmp	r3, #0
   14e2c:	bne	14e60 <__assert_fail@plt+0x3a4c>
   14e30:	movw	r3, #57808	; 0xe1d0
   14e34:	movt	r3, #2
   14e38:	ldrb	r3, [r3, #4]
   14e3c:	cmp	r3, #0
   14e40:	beq	14e54 <__assert_fail@plt+0x3a40>
   14e44:	mov	r0, #0
   14e48:	bl	113fc <close@plt>
   14e4c:	cmp	r0, #0
   14e50:	blt	15e60 <__assert_fail@plt+0x4a4c>
   14e54:	ldr	r3, [sp, #48]	; 0x30
   14e58:	eor	r0, r3, #1
   14e5c:	bl	11294 <exit@plt>
   14e60:	ldr	r4, [sp, #80]	; 0x50
   14e64:	mov	r7, #0
   14e68:	movw	r6, #50000	; 0xc350
   14e6c:	movt	r6, #1
   14e70:	mvn	r9, #0
   14e74:	mov	r8, #1
   14e78:	str	sl, [sp, #28]
   14e7c:	mov	sl, r6
   14e80:	ldr	r6, [sp, #68]	; 0x44
   14e84:	b	15e8c <__assert_fail@plt+0x4a78>
   14e88:	ldr	sl, [sp, #28]
   14e8c:	cmp	r7, #0
   14e90:	beq	14e30 <__assert_fail@plt+0x3a1c>
   14e94:	add	r2, sp, #136	; 0x88
   14e98:	mov	r1, #1
   14e9c:	mov	r0, #3
   14ea0:	bl	111c8 <__fxstat64@plt>
   14ea4:	cmp	r0, #0
   14ea8:	blt	14eec <__assert_fail@plt+0x3ad8>
   14eac:	movw	r2, #57808	; 0xe1d0
   14eb0:	movt	r2, #2
   14eb4:	ldr	r3, [sp, #152]	; 0x98
   14eb8:	and	r3, r3, #61440	; 0xf000
   14ebc:	cmp	r3, #4096	; 0x1000
   14ec0:	movne	r3, #0
   14ec4:	moveq	r3, #1
   14ec8:	strb	r3, [r2, #13]
   14ecc:	ldrb	r3, [r2, #3]
   14ed0:	cmp	r3, #0
   14ed4:	bne	152c8 <__assert_fail@plt+0x3eb4>
   14ed8:	ldr	r4, [sp, #80]	; 0x50
   14edc:	mov	r9, #0
   14ee0:	movw	r6, #50000	; 0xc350
   14ee4:	movt	r6, #1
   14ee8:	b	14f2c <__assert_fail@plt+0x3b18>
   14eec:	bl	112dc <__errno_location@plt>
   14ef0:	ldr	r4, [r0]
   14ef4:	mov	r2, #5
   14ef8:	movw	r1, #50060	; 0xc38c
   14efc:	movt	r1, #1
   14f00:	mov	r0, #0
   14f04:	bl	11174 <dcgettext@plt>
   14f08:	mov	r2, r0
   14f0c:	mov	r1, r4
   14f10:	mov	r0, #1
   14f14:	bl	1121c <error@plt>
   14f18:	add	r5, r9, #1
   14f1c:	add	r4, r4, #80	; 0x50
   14f20:	cmp	sl, r5
   14f24:	beq	14f50 <__assert_fail@plt+0x3b3c>
   14f28:	mov	r9, r5
   14f2c:	ldrb	r3, [r4, #44]	; 0x2c
   14f30:	cmp	r3, #0
   14f34:	bne	14f18 <__assert_fail@plt+0x3b04>
   14f38:	mov	r1, r6
   14f3c:	ldr	r0, [r4]
   14f40:	bl	110cc <strcmp@plt>
   14f44:	cmp	r0, #0
   14f48:	bne	14f18 <__assert_fail@plt+0x3b04>
   14f4c:	b	152c8 <__assert_fail@plt+0x3eb4>
   14f50:	ldr	r3, [sp, #80]	; 0x50
   14f54:	mov	r2, #0
   14f58:	b	14f70 <__assert_fail@plt+0x3b5c>
   14f5c:	add	r1, r2, #1
   14f60:	add	r3, r3, #80	; 0x50
   14f64:	cmp	r2, r9
   14f68:	beq	14f8c <__assert_fail@plt+0x3b78>
   14f6c:	mov	r2, r1
   14f70:	ldr	r1, [r3, #48]	; 0x30
   14f74:	cmp	r1, #0
   14f78:	blt	14f5c <__assert_fail@plt+0x3b48>
   14f7c:	ldrb	r1, [r3, #45]	; 0x2d
   14f80:	cmp	r1, #0
   14f84:	beq	14f5c <__assert_fail@plt+0x3b48>
   14f88:	b	152c8 <__assert_fail@plt+0x3eb4>
   14f8c:	ldr	r3, [sp, #80]	; 0x50
   14f90:	mov	r2, #0
   14f94:	b	14fac <__assert_fail@plt+0x3b98>
   14f98:	add	r1, r2, #1
   14f9c:	add	r3, r3, #80	; 0x50
   14fa0:	cmp	r2, r9
   14fa4:	beq	152c8 <__assert_fail@plt+0x3eb4>
   14fa8:	mov	r2, r1
   14fac:	ldr	r1, [r3, #48]	; 0x30
   14fb0:	cmp	r1, #0
   14fb4:	blt	14f98 <__assert_fail@plt+0x3b84>
   14fb8:	ldrb	r1, [r3, #45]	; 0x2d
   14fbc:	cmp	r1, #0
   14fc0:	bne	14f98 <__assert_fail@plt+0x3b84>
   14fc4:	str	r1, [sp, #32]
   14fc8:	mov	r4, #0
   14fcc:	mov	r6, #80	; 0x50
   14fd0:	mov	r7, #3
   14fd4:	b	14fe8 <__assert_fail@plt+0x3bd4>
   14fd8:	add	r3, r4, #1
   14fdc:	cmp	r4, r9
   14fe0:	beq	16088 <__assert_fail@plt+0x4c74>
   14fe4:	mov	r4, r3
   14fe8:	mul	r3, r6, r4
   14fec:	add	r2, sp, #240	; 0xf0
   14ff0:	ldr	r1, [sp, #80]	; 0x50
   14ff4:	ldr	r1, [r1, r3]
   14ff8:	mov	r0, r7
   14ffc:	bl	11408 <__lxstat64@plt>
   15000:	cmp	r0, #0
   15004:	bne	14fd8 <__assert_fail@plt+0x3bc4>
   15008:	ldr	r3, [sp, #256]	; 0x100
   1500c:	and	r3, r3, #61440	; 0xf000
   15010:	cmp	r3, #40960	; 0xa000
   15014:	bne	14fd8 <__assert_fail@plt+0x3bc4>
   15018:	b	152c8 <__assert_fail@plt+0x3eb4>
   1501c:	add	r2, r1, #1
   15020:	add	r3, r3, #80	; 0x50
   15024:	cmp	r1, r9
   15028:	beq	15fb4 <__assert_fail@plt+0x4ba0>
   1502c:	mov	r1, r2
   15030:	ldr	r2, [r3, #48]	; 0x30
   15034:	cmp	r2, #0
   15038:	blt	1501c <__assert_fail@plt+0x3c08>
   1503c:	ldr	r2, [r3, #40]	; 0x28
   15040:	and	r2, r2, #61440	; 0xf000
   15044:	cmp	r2, #32768	; 0x8000
   15048:	cmpne	r2, #4096	; 0x1000
   1504c:	beq	1501c <__assert_fail@plt+0x3c08>
   15050:	b	152c8 <__assert_fail@plt+0x3eb4>
   15054:	bl	112dc <__errno_location@plt>
   15058:	ldr	r4, [r0]
   1505c:	mov	r2, #5
   15060:	movw	r1, #50288	; 0xc470
   15064:	movt	r1, #1
   15068:	mov	r0, #0
   1506c:	bl	11174 <dcgettext@plt>
   15070:	mov	r2, r0
   15074:	mov	r1, r4
   15078:	mov	r0, #1
   1507c:	bl	1121c <error@plt>
   15080:	bl	1ae9c <__assert_fail@plt+0x9a88>
   15084:	ldr	sl, [sp, #60]	; 0x3c
   15088:	bl	112dc <__errno_location@plt>
   1508c:	ldr	r5, [r0]
   15090:	cmp	r5, #28
   15094:	beq	150d4 <__assert_fail@plt+0x3cc0>
   15098:	mov	r2, #5
   1509c:	movw	r1, #54348	; 0xd44c
   150a0:	movt	r1, #1
   150a4:	mov	r0, #0
   150a8:	bl	11174 <dcgettext@plt>
   150ac:	mov	r6, r0
   150b0:	ldr	r1, [r8]
   150b4:	mov	r0, #4
   150b8:	bl	1a050 <__assert_fail@plt+0x8c3c>
   150bc:	mov	r3, r0
   150c0:	mov	r2, r6
   150c4:	mov	r1, r5
   150c8:	mov	r0, #0
   150cc:	bl	1121c <error@plt>
   150d0:	b	15280 <__assert_fail@plt+0x3e6c>
   150d4:	mov	r2, #5
   150d8:	movw	r1, #54384	; 0xd470
   150dc:	movt	r1, #1
   150e0:	mov	r0, #0
   150e4:	bl	11174 <dcgettext@plt>
   150e8:	mov	r2, r0
   150ec:	mov	r1, #0
   150f0:	mov	r0, r1
   150f4:	bl	1121c <error@plt>
   150f8:	b	15280 <__assert_fail@plt+0x3e6c>
   150fc:	ldr	r3, [r4, #52]	; 0x34
   15100:	cmp	r5, r3
   15104:	beq	1515c <__assert_fail@plt+0x3d48>
   15108:	mov	r2, #5
   1510c:	ldr	r1, [sp, #68]	; 0x44
   15110:	mov	r0, #0
   15114:	bl	11174 <dcgettext@plt>
   15118:	mov	sl, r0
   1511c:	ldr	r1, [r4]
   15120:	mov	r0, #4
   15124:	bl	1a050 <__assert_fail@plt+0x8c3c>
   15128:	mov	r3, r0
   1512c:	mov	r2, sl
   15130:	mov	r1, r5
   15134:	mov	r0, #0
   15138:	bl	1121c <error@plt>
   1513c:	b	1515c <__assert_fail@plt+0x3d48>
   15140:	mov	r1, r4
   15144:	ldr	r0, [sp, #40]	; 0x28
   15148:	bl	17d68 <__assert_fail@plt+0x6954>
   1514c:	cmp	r0, #0
   15150:	beq	15324 <__assert_fail@plt+0x3f10>
   15154:	ldr	r3, [sp, #56]	; 0x38
   15158:	str	r3, [sp, #32]
   1515c:	add	r3, r6, #1
   15160:	add	r8, r8, #80	; 0x50
   15164:	cmp	r9, r6
   15168:	beq	15f4c <__assert_fail@plt+0x4b38>
   1516c:	mov	r6, r3
   15170:	mov	r4, r8
   15174:	ldrb	r3, [r8, #44]	; 0x2c
   15178:	cmp	r3, #0
   1517c:	bne	1515c <__assert_fail@plt+0x3d48>
   15180:	ldr	r5, [r8]
   15184:	mov	r0, r5
   15188:	bl	112a0 <strlen@plt>
   1518c:	ldr	r3, [sp, #52]	; 0x34
   15190:	cmp	r3, r0
   15194:	movcc	r3, r0
   15198:	str	r3, [sp, #52]	; 0x34
   1519c:	mvn	r3, #0
   151a0:	str	r3, [r8, #60]	; 0x3c
   151a4:	ldr	r3, [r7, #4]
   151a8:	cmp	r3, #1
   151ac:	bne	15210 <__assert_fail@plt+0x3dfc>
   151b0:	mov	r0, r5
   151b4:	bl	169e0 <__assert_fail@plt+0x55cc>
   151b8:	mov	sl, r0
   151bc:	ldrb	r3, [r5, r0]
   151c0:	str	r3, [sp, #64]	; 0x40
   151c4:	mov	r0, r5
   151c8:	bl	16758 <__assert_fail@plt+0x5344>
   151cc:	sub	r0, r0, r5
   151d0:	str	r0, [r8, #68]	; 0x44
   151d4:	mov	r3, #0
   151d8:	strb	r3, [r5, sl]
   151dc:	cmp	sl, r3
   151e0:	ldrne	r1, [r8]
   151e4:	ldreq	r1, [sp, #88]	; 0x58
   151e8:	movw	r2, #1924	; 0x784
   151ec:	ldr	r0, [sp, #28]
   151f0:	bl	112d0 <inotify_add_watch@plt>
   151f4:	str	r0, [r8, #64]	; 0x40
   151f8:	ldr	r3, [r8]
   151fc:	ldr	r2, [sp, #64]	; 0x40
   15200:	strb	r2, [r3, sl]
   15204:	ldr	r3, [r8, #64]	; 0x40
   15208:	cmp	r3, #0
   1520c:	blt	15084 <__assert_fail@plt+0x3c70>
   15210:	ldr	r2, [sp, #84]	; 0x54
   15214:	ldr	r1, [r4]
   15218:	ldr	r0, [sp, #28]
   1521c:	bl	112d0 <inotify_add_watch@plt>
   15220:	str	r0, [r4, #60]	; 0x3c
   15224:	cmp	r0, #0
   15228:	bge	15140 <__assert_fail@plt+0x3d2c>
   1522c:	ldr	r3, [r4, #48]	; 0x30
   15230:	ldr	r2, [sp, #44]	; 0x2c
   15234:	ldr	r1, [sp, #56]	; 0x38
   15238:	cmn	r3, #1
   1523c:	movne	r2, r1
   15240:	str	r2, [sp, #44]	; 0x2c
   15244:	bl	112dc <__errno_location@plt>
   15248:	ldr	r5, [r0]
   1524c:	bic	r3, r5, #16
   15250:	cmp	r3, #12
   15254:	bne	150fc <__assert_fail@plt+0x3ce8>
   15258:	ldr	sl, [sp, #60]	; 0x3c
   1525c:	mov	r2, #5
   15260:	movw	r1, #54384	; 0xd470
   15264:	movt	r1, #1
   15268:	mov	r0, #0
   1526c:	bl	11174 <dcgettext@plt>
   15270:	mov	r2, r0
   15274:	mov	r1, #0
   15278:	mov	r0, r1
   1527c:	bl	1121c <error@plt>
   15280:	ldr	r0, [sp, #40]	; 0x28
   15284:	bl	17980 <__assert_fail@plt+0x656c>
   15288:	ldr	r0, [sp, #28]
   1528c:	bl	113fc <close@plt>
   15290:	bl	112dc <__errno_location@plt>
   15294:	mov	r3, #0
   15298:	str	r3, [r0]
   1529c:	bl	112dc <__errno_location@plt>
   152a0:	ldr	r4, [r0]
   152a4:	mov	r2, #5
   152a8:	movw	r1, #54584	; 0xd538
   152ac:	movt	r1, #1
   152b0:	mov	r0, #0
   152b4:	bl	11174 <dcgettext@plt>
   152b8:	mov	r2, r0
   152bc:	mov	r1, r4
   152c0:	mov	r0, #0
   152c4:	bl	1121c <error@plt>
   152c8:	movw	r3, #57808	; 0xe1d0
   152cc:	movt	r3, #2
   152d0:	mov	r2, #1
   152d4:	strb	r2, [r3, #3]
   152d8:	ldr	fp, [r3, #8]
   152dc:	cmp	fp, #0
   152e0:	movne	fp, #0
   152e4:	bne	15300 <__assert_fail@plt+0x3eec>
   152e8:	movw	r3, #57672	; 0xe148
   152ec:	movt	r3, #2
   152f0:	ldr	r3, [r3, #4]
   152f4:	cmp	r3, #2
   152f8:	cmpeq	sl, r2
   152fc:	beq	15958 <__assert_fail@plt+0x4544>
   15300:	and	r3, fp, #1
   15304:	str	r3, [sp, #40]	; 0x28
   15308:	sub	r3, sl, #1
   1530c:	str	r3, [sp, #32]
   15310:	mov	r3, #0
   15314:	str	r3, [sp, #44]	; 0x2c
   15318:	str	r3, [sp, #60]	; 0x3c
   1531c:	str	r3, [sp, #64]	; 0x40
   15320:	b	15e50 <__assert_fail@plt+0x4a3c>
   15324:	bl	1ae9c <__assert_fail@plt+0x9a88>
   15328:	mov	r0, #1
   1532c:	bl	11294 <exit@plt>
   15330:	mov	r1, #0
   15334:	mov	r0, r4
   15338:	bl	12c38 <__assert_fail@plt+0x1824>
   1533c:	add	r1, sp, #132	; 0x84
   15340:	mov	r0, r5
   15344:	bl	12a28 <__assert_fail@plt+0x1614>
   15348:	add	r3, r6, #1
   1534c:	add	r4, r4, #80	; 0x50
   15350:	cmp	r9, r6
   15354:	beq	15414 <__assert_fail@plt+0x4000>
   15358:	mov	r6, r3
   1535c:	mov	r5, r4
   15360:	ldrb	r3, [r4, #44]	; 0x2c
   15364:	cmp	r3, #0
   15368:	bne	15348 <__assert_fail@plt+0x3f34>
   1536c:	ldr	r3, [r7, #4]
   15370:	cmp	r3, #1
   15374:	beq	15330 <__assert_fail@plt+0x3f1c>
   15378:	ldr	r3, [r4, #48]	; 0x30
   1537c:	cmn	r3, #1
   15380:	beq	1533c <__assert_fail@plt+0x3f28>
   15384:	add	r2, sp, #240	; 0xf0
   15388:	ldr	r1, [r4]
   1538c:	mov	r0, #3
   15390:	bl	113c0 <__xstat64@plt>
   15394:	cmp	r0, #0
   15398:	bne	1533c <__assert_fail@plt+0x3f28>
   1539c:	ldrd	r0, [r4, #24]
   153a0:	ldrd	r2, [sp, #240]	; 0xf0
   153a4:	cmp	r1, r3
   153a8:	cmpeq	r0, r2
   153ac:	bne	153c8 <__assert_fail@plt+0x3fb4>
   153b0:	ldrd	r0, [r4, #32]
   153b4:	add	r3, sp, #336	; 0x150
   153b8:	ldrd	r2, [r3]
   153bc:	cmp	r1, r3
   153c0:	cmpeq	r0, r2
   153c4:	beq	1533c <__assert_fail@plt+0x3f28>
   153c8:	bl	112dc <__errno_location@plt>
   153cc:	ldr	r4, [r0]
   153d0:	mov	r2, #5
   153d4:	movw	r1, #54428	; 0xd49c
   153d8:	movt	r1, #1
   153dc:	mov	r0, #0
   153e0:	bl	11174 <dcgettext@plt>
   153e4:	mov	r6, r0
   153e8:	mov	r0, r5
   153ec:	bl	11594 <__assert_fail@plt+0x180>
   153f0:	mov	r1, r0
   153f4:	mov	r0, #4
   153f8:	bl	1a050 <__assert_fail@plt+0x8c3c>
   153fc:	mov	r3, r0
   15400:	mov	r2, r6
   15404:	mov	r1, r4
   15408:	mov	r0, #0
   1540c:	bl	1121c <error@plt>
   15410:	b	15280 <__assert_fail@plt+0x3e6c>
   15414:	ldr	r3, [sp, #52]	; 0x34
   15418:	add	r3, r3, #17
   1541c:	str	r3, [sp, #60]	; 0x3c
   15420:	mov	r0, r3
   15424:	bl	1aa08 <__assert_fail@plt+0x95f4>
   15428:	str	r0, [sp, #44]	; 0x2c
   1542c:	mov	r3, #0
   15430:	str	r3, [sp, #52]	; 0x34
   15434:	str	r3, [sp, #32]
   15438:	mov	r3, #3
   1543c:	str	r3, [sp, #64]	; 0x40
   15440:	movw	r7, #57672	; 0xe148
   15444:	movt	r7, #2
   15448:	movw	r8, #57808	; 0xe1d0
   1544c:	movt	r8, #2
   15450:	vldr	d10, [pc, #976]	; 15828 <__assert_fail@plt+0x4414>
   15454:	vldr	d9, [pc, #980]	; 15830 <__assert_fail@plt+0x441c>
   15458:	str	sl, [sp, #96]	; 0x60
   1545c:	b	15898 <__assert_fail@plt+0x4484>
   15460:	ldrb	r3, [r8, #2]
   15464:	cmp	r3, #0
   15468:	bne	158a4 <__assert_fail@plt+0x4490>
   1546c:	ldr	r0, [sp, #40]	; 0x28
   15470:	bl	172bc <__assert_fail@plt+0x5ea8>
   15474:	cmp	r0, #0
   15478:	bne	158a4 <__assert_fail@plt+0x4490>
   1547c:	mov	r2, #5
   15480:	movw	r1, #54444	; 0xd4ac
   15484:	movt	r1, #1
   15488:	bl	11174 <dcgettext@plt>
   1548c:	mov	r2, r0
   15490:	mov	r1, #0
   15494:	mov	r0, #1
   15498:	bl	1121c <error@plt>
   1549c:	ldr	r4, [sp, #28]
   154a0:	ldr	r5, [sp, #88]	; 0x58
   154a4:	b	154ec <__assert_fail@plt+0x40d8>
   154a8:	mov	r0, #0
   154ac:	bl	11294 <exit@plt>
   154b0:	mov	r2, fp
   154b4:	str	r4, [sp, #240]	; 0xf0
   154b8:	mov	r3, #1
   154bc:	strh	r3, [sp, #244]	; 0xf4
   154c0:	str	r3, [sp, #248]	; 0xf8
   154c4:	mov	r3, #0
   154c8:	strh	r3, [sp, #254]	; 0xfe
   154cc:	strh	r3, [sp, #252]	; 0xfc
   154d0:	ldrb	r1, [r8, #13]
   154d4:	mov	r3, #16
   154d8:	add	r1, r1, #1
   154dc:	add	r0, sp, #240	; 0xf0
   154e0:	bl	111d4 <__poll_chk@plt>
   154e4:	cmp	r0, #0
   154e8:	bne	15574 <__assert_fail@plt+0x4160>
   154ec:	ldr	r0, [r8, #8]
   154f0:	cmp	r0, #0
   154f4:	beq	154b0 <__assert_fail@plt+0x409c>
   154f8:	cmp	r5, #0
   154fc:	bne	154a8 <__assert_fail@plt+0x4094>
   15500:	mov	r1, #0
   15504:	bl	1127c <kill@plt>
   15508:	cmp	r0, #0
   1550c:	beq	15528 <__assert_fail@plt+0x4114>
   15510:	bl	112dc <__errno_location@plt>
   15514:	ldr	r3, [r0]
   15518:	cmp	r3, #1
   1551c:	ldrne	r2, [sp, #72]	; 0x48
   15520:	ldrne	r5, [sp, #104]	; 0x68
   15524:	bne	154b4 <__assert_fail@plt+0x40a0>
   15528:	vcmpe.f64	d8, #0.0
   1552c:	vmrs	APSR_nzcv, fpscr
   15530:	bls	1556c <__assert_fail@plt+0x4158>
   15534:	vcmpe.f64	d8, d10
   15538:	vmrs	APSR_nzcv, fpscr
   1553c:	movpl	r2, fp
   15540:	bpl	154b4 <__assert_fail@plt+0x40a0>
   15544:	vmul.f64	d6, d8, d9
   15548:	vcvt.s32.f64	s15, d6
   1554c:	vcvt.f64.s32	d5, s15
   15550:	vcmpe.f64	d6, d5
   15554:	vmrs	APSR_nzcv, fpscr
   15558:	movgt	r2, #1
   1555c:	movle	r2, #0
   15560:	vmov	r3, s15
   15564:	add	r2, r3, r2
   15568:	b	154b4 <__assert_fail@plt+0x40a0>
   1556c:	ldr	r2, [sp, #72]	; 0x48
   15570:	b	154b4 <__assert_fail@plt+0x40a0>
   15574:	str	r5, [sp, #88]	; 0x58
   15578:	blt	155f0 <__assert_fail@plt+0x41dc>
   1557c:	ldrsh	r3, [sp, #254]	; 0xfe
   15580:	cmp	r3, #0
   15584:	bne	1561c <__assert_fail@plt+0x4208>
   15588:	ldr	r2, [sp, #60]	; 0x3c
   1558c:	ldr	r1, [sp, #44]	; 0x2c
   15590:	ldr	r0, [sp, #28]
   15594:	bl	1a360 <__assert_fail@plt+0x8f4c>
   15598:	subs	r3, r0, #0
   1559c:	str	r3, [sp, #52]	; 0x34
   155a0:	beq	15f08 <__assert_fail@plt+0x4af4>
   155a4:	cmn	r3, #1
   155a8:	movne	r3, #0
   155ac:	strne	r3, [sp, #32]
   155b0:	bne	158b4 <__assert_fail@plt+0x44a0>
   155b4:	bl	112dc <__errno_location@plt>
   155b8:	ldr	r3, [r0]
   155bc:	cmp	r3, #22
   155c0:	beq	15f08 <__assert_fail@plt+0x4af4>
   155c4:	bl	112dc <__errno_location@plt>
   155c8:	ldr	r4, [r0]
   155cc:	mov	r2, #5
   155d0:	movw	r1, #54508	; 0xd4ec
   155d4:	movt	r1, #1
   155d8:	mov	r0, #0
   155dc:	bl	11174 <dcgettext@plt>
   155e0:	mov	r2, r0
   155e4:	mov	r1, r4
   155e8:	mov	r0, #1
   155ec:	bl	1121c <error@plt>
   155f0:	bl	112dc <__errno_location@plt>
   155f4:	ldr	r4, [r0]
   155f8:	mov	r2, #5
   155fc:	movw	r1, #54464	; 0xd4c0
   15600:	movt	r1, #1
   15604:	mov	r0, #0
   15608:	bl	11174 <dcgettext@plt>
   1560c:	mov	r2, r0
   15610:	mov	r1, r4
   15614:	mov	r0, #1
   15618:	bl	1121c <error@plt>
   1561c:	mov	r0, #13
   15620:	bl	110c0 <raise@plt>
   15624:	mov	r0, #1
   15628:	bl	11294 <exit@plt>
   1562c:	ldr	ip, [r6]
   15630:	mov	r3, #0
   15634:	ldr	r2, [sp, #80]	; 0x50
   15638:	add	r0, r2, #64	; 0x40
   1563c:	mov	r1, #80	; 0x50
   15640:	b	15648 <__assert_fail@plt+0x4234>
   15644:	mov	r3, r2
   15648:	mul	r2, r1, r3
   1564c:	ldr	r2, [r0, r2]
   15650:	cmp	ip, r2
   15654:	beq	15668 <__assert_fail@plt+0x4254>
   15658:	add	r2, r3, #1
   1565c:	cmp	r9, r3
   15660:	bne	15644 <__assert_fail@plt+0x4230>
   15664:	b	158f4 <__assert_fail@plt+0x44e0>
   15668:	ldr	sl, [sp, #96]	; 0x60
   1566c:	mov	r2, #5
   15670:	movw	r1, #54536	; 0xd508
   15674:	movt	r1, #1
   15678:	mov	r0, #0
   1567c:	bl	11174 <dcgettext@plt>
   15680:	mov	r2, r0
   15684:	mov	r1, #0
   15688:	mov	r0, r1
   1568c:	bl	1121c <error@plt>
   15690:	b	15280 <__assert_fail@plt+0x3e6c>
   15694:	mov	r3, r6
   15698:	ldr	sl, [r3], #16
   1569c:	str	r3, [sp, #68]	; 0x44
   156a0:	ldr	r4, [sp, #76]	; 0x4c
   156a4:	mov	r5, #0
   156a8:	b	156c0 <__assert_fail@plt+0x42ac>
   156ac:	add	r3, r5, #1
   156b0:	add	r4, r4, #80	; 0x50
   156b4:	cmp	r9, r5
   156b8:	beq	15898 <__assert_fail@plt+0x4484>
   156bc:	mov	r5, r3
   156c0:	ldr	r3, [r4, #64]	; 0x40
   156c4:	cmp	r3, sl
   156c8:	bne	156ac <__assert_fail@plt+0x4298>
   156cc:	ldr	r1, [r4]
   156d0:	ldr	r3, [r4, #68]	; 0x44
   156d4:	add	r1, r1, r3
   156d8:	ldr	r0, [sp, #68]	; 0x44
   156dc:	bl	110cc <strcmp@plt>
   156e0:	cmp	r0, #0
   156e4:	bne	156ac <__assert_fail@plt+0x4298>
   156e8:	mov	sl, #80	; 0x50
   156ec:	mul	sl, sl, r5
   156f0:	ldr	r3, [sp, #80]	; 0x50
   156f4:	add	r4, r3, sl
   156f8:	ldr	r3, [sp, #100]	; 0x64
   156fc:	tst	r3, #512	; 0x200
   15700:	beq	15720 <__assert_fail@plt+0x430c>
   15704:	ldr	r3, [r7, #4]
   15708:	cmp	r3, #1
   1570c:	bne	1590c <__assert_fail@plt+0x44f8>
   15710:	mov	r1, #0
   15714:	mov	r0, r4
   15718:	bl	12c38 <__assert_fail@plt+0x1824>
   1571c:	b	1590c <__assert_fail@plt+0x44f8>
   15720:	ldr	r2, [sp, #84]	; 0x54
   15724:	ldr	r3, [sp, #80]	; 0x50
   15728:	ldr	r1, [r3, sl]
   1572c:	ldr	r0, [sp, #28]
   15730:	bl	112d0 <inotify_add_watch@plt>
   15734:	subs	r5, r0, #0
   15738:	bge	15790 <__assert_fail@plt+0x437c>
   1573c:	bl	112dc <__errno_location@plt>
   15740:	ldr	r3, [r0]
   15744:	str	r3, [sp, #68]	; 0x44
   15748:	bic	r3, r3, #16
   1574c:	cmp	r3, #12
   15750:	beq	15838 <__assert_fail@plt+0x4424>
   15754:	mov	r2, #5
   15758:	movw	r1, #54412	; 0xd48c
   1575c:	movt	r1, #1
   15760:	mov	r0, #0
   15764:	bl	11174 <dcgettext@plt>
   15768:	str	r0, [sp, #100]	; 0x64
   1576c:	ldr	r3, [sp, #80]	; 0x50
   15770:	ldr	r1, [r3, sl]
   15774:	mov	r0, #4
   15778:	bl	1a050 <__assert_fail@plt+0x8c3c>
   1577c:	mov	r3, r0
   15780:	ldr	r2, [sp, #100]	; 0x64
   15784:	ldr	r1, [sp, #68]	; 0x44
   15788:	mov	r0, #0
   1578c:	bl	1121c <error@plt>
   15790:	ldr	r1, [r4, #60]	; 0x3c
   15794:	subs	r3, r5, r1
   15798:	movne	r3, #1
   1579c:	orrs	r3, r3, r1, lsr #31
   157a0:	beq	162c4 <__assert_fail@plt+0x4eb0>
   157a4:	cmp	r1, #0
   157a8:	bge	15864 <__assert_fail@plt+0x4450>
   157ac:	str	r5, [r4, #60]	; 0x3c
   157b0:	cmn	r5, #1
   157b4:	beq	15898 <__assert_fail@plt+0x4484>
   157b8:	mov	r1, r4
   157bc:	ldr	r0, [sp, #40]	; 0x28
   157c0:	bl	17da8 <__assert_fail@plt+0x6994>
   157c4:	mov	r5, r0
   157c8:	cmp	r0, #0
   157cc:	cmpne	r4, r0
   157d0:	beq	15800 <__assert_fail@plt+0x43ec>
   157d4:	ldr	r3, [r7, #4]
   157d8:	cmp	r3, #1
   157dc:	beq	1587c <__assert_fail@plt+0x4468>
   157e0:	mvn	r3, #0
   157e4:	str	r3, [r5, #60]	; 0x3c
   157e8:	ldr	sl, [r5, #48]	; 0x30
   157ec:	mov	r0, r5
   157f0:	bl	11594 <__assert_fail@plt+0x180>
   157f4:	mov	r1, r0
   157f8:	mov	r0, sl
   157fc:	bl	115e0 <__assert_fail@plt+0x1cc>
   15800:	mov	r1, r4
   15804:	ldr	r0, [sp, #40]	; 0x28
   15808:	bl	17d68 <__assert_fail@plt+0x6954>
   1580c:	cmp	r0, #0
   15810:	beq	15888 <__assert_fail@plt+0x4474>
   15814:	ldr	r3, [r7, #4]
   15818:	cmp	r3, #1
   1581c:	bne	15914 <__assert_fail@plt+0x4500>
   15820:	b	15710 <__assert_fail@plt+0x42fc>
   15824:	nop	{0}
   15828:	andeq	r0, r0, r0
   1582c:	cmpmi	r0, sp, asr #4
   15830:	andeq	r0, r0, r0
   15834:	addmi	r4, pc, r0
   15838:	ldr	sl, [sp, #96]	; 0x60
   1583c:	mov	r2, #5
   15840:	movw	r1, #54384	; 0xd470
   15844:	movt	r1, #1
   15848:	mov	r0, #0
   1584c:	bl	11174 <dcgettext@plt>
   15850:	mov	r2, r0
   15854:	mov	r1, #0
   15858:	mov	r0, r1
   1585c:	bl	1121c <error@plt>
   15860:	b	15280 <__assert_fail@plt+0x3e6c>
   15864:	ldr	r0, [sp, #28]
   15868:	bl	113d8 <inotify_rm_watch@plt>
   1586c:	mov	r1, r4
   15870:	ldr	r0, [sp, #40]	; 0x28
   15874:	bl	17da8 <__assert_fail@plt+0x6994>
   15878:	b	157ac <__assert_fail@plt+0x4398>
   1587c:	mov	r1, #0
   15880:	bl	12c38 <__assert_fail@plt+0x1824>
   15884:	b	157e0 <__assert_fail@plt+0x43cc>
   15888:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1588c:	mov	r1, #0
   15890:	mov	r0, r4
   15894:	bl	12c38 <__assert_fail@plt+0x1824>
   15898:	ldr	r3, [r7, #4]
   1589c:	cmp	r3, #1
   158a0:	beq	15460 <__assert_fail@plt+0x404c>
   158a4:	ldr	r3, [sp, #32]
   158a8:	ldr	r2, [sp, #52]	; 0x34
   158ac:	cmp	r3, r2
   158b0:	bcs	1549c <__assert_fail@plt+0x4088>
   158b4:	ldr	r3, [sp, #44]	; 0x2c
   158b8:	ldr	r2, [sp, #32]
   158bc:	add	r6, r3, r2
   158c0:	ldr	r3, [r6, #12]
   158c4:	add	r2, r2, #16
   158c8:	add	r2, r3, r2
   158cc:	str	r2, [sp, #32]
   158d0:	ldr	r2, [r6, #4]
   158d4:	str	r2, [sp, #100]	; 0x64
   158d8:	ubfx	r2, r2, #10, #1
   158dc:	cmp	r3, #0
   158e0:	movne	r2, #0
   158e4:	cmp	r2, #0
   158e8:	bne	1562c <__assert_fail@plt+0x4218>
   158ec:	cmp	r3, #0
   158f0:	bne	15694 <__assert_fail@plt+0x4280>
   158f4:	ldr	r3, [r6]
   158f8:	str	r3, [sp, #300]	; 0x12c
   158fc:	add	r1, sp, #240	; 0xf0
   15900:	ldr	r0, [sp, #40]	; 0x28
   15904:	bl	174c0 <__assert_fail@plt+0x60ac>
   15908:	mov	r4, r0
   1590c:	cmp	r4, #0
   15910:	beq	15898 <__assert_fail@plt+0x4484>
   15914:	ldr	r3, [r6, #4]
   15918:	movw	r2, #3588	; 0xe04
   1591c:	tst	r3, r2
   15920:	beq	15948 <__assert_fail@plt+0x4534>
   15924:	tst	r3, #1024	; 0x400
   15928:	beq	1588c <__assert_fail@plt+0x4478>
   1592c:	ldr	r1, [r4, #60]	; 0x3c
   15930:	ldr	r0, [sp, #28]
   15934:	bl	113d8 <inotify_rm_watch@plt>
   15938:	mov	r1, r4
   1593c:	ldr	r0, [sp, #40]	; 0x28
   15940:	bl	17da8 <__assert_fail@plt+0x6994>
   15944:	b	1588c <__assert_fail@plt+0x4478>
   15948:	add	r1, sp, #132	; 0x84
   1594c:	mov	r0, r4
   15950:	bl	12a28 <__assert_fail@plt+0x1614>
   15954:	b	15898 <__assert_fail@plt+0x4484>
   15958:	ldr	r2, [sp, #80]	; 0x50
   1595c:	ldr	r3, [r2, #48]	; 0x30
   15960:	cmn	r3, #1
   15964:	beq	15300 <__assert_fail@plt+0x3eec>
   15968:	ldr	r3, [r2, #40]	; 0x28
   1596c:	and	r3, r3, #61440	; 0xf000
   15970:	subs	fp, r3, #32768	; 0x8000
   15974:	movne	fp, #1
   15978:	b	15300 <__assert_fail@plt+0x3eec>
   1597c:	ldr	r1, [sp, #40]	; 0x28
   15980:	mov	r0, r6
   15984:	bl	12c38 <__assert_fail@plt+0x1824>
   15988:	b	159f8 <__assert_fail@plt+0x45e4>
   1598c:	ldr	r3, [r4, #40]	; 0x28
   15990:	and	r3, r3, #61440	; 0xf000
   15994:	cmp	r3, #32768	; 0x8000
   15998:	bne	15a88 <__assert_fail@plt+0x4674>
   1599c:	bl	112dc <__errno_location@plt>
   159a0:	ldr	r3, [r0]
   159a4:	cmp	r3, #1
   159a8:	bne	15a88 <__assert_fail@plt+0x4674>
   159ac:	ldr	r3, [r4, #56]	; 0x38
   159b0:	cmp	r3, #0
   159b4:	mvnne	r3, #1
   159b8:	mvnne	r2, #0
   159bc:	beq	15acc <__assert_fail@plt+0x46b8>
   159c0:	str	r3, [sp]
   159c4:	str	r2, [sp, #4]
   159c8:	mov	r2, r5
   159cc:	ldr	r1, [sp, #28]
   159d0:	mov	r0, #0
   159d4:	bl	1184c <__assert_fail@plt+0x438>
   159d8:	orrs	r3, r0, r1
   159dc:	orrne	r9, r9, #1
   159e0:	ldr	r3, [r4, #8]
   159e4:	ldr	r2, [r4, #12]
   159e8:	adds	r3, r3, r0
   159ec:	adc	r2, r2, r1
   159f0:	str	r3, [r4, #8]
   159f4:	str	r2, [r4, #12]
   159f8:	add	r3, r8, #1
   159fc:	add	r6, r6, #80	; 0x50
   15a00:	cmp	sl, r3
   15a04:	beq	15d50 <__assert_fail@plt+0x493c>
   15a08:	mov	r8, r3
   15a0c:	mov	r4, r6
   15a10:	ldrb	r3, [r6, #44]	; 0x2c
   15a14:	cmp	r3, #0
   15a18:	bne	159f8 <__assert_fail@plt+0x45e4>
   15a1c:	ldr	r5, [r6, #48]	; 0x30
   15a20:	cmp	r5, #0
   15a24:	blt	1597c <__assert_fail@plt+0x4568>
   15a28:	mov	r0, r6
   15a2c:	bl	11594 <__assert_fail@plt+0x180>
   15a30:	str	r0, [sp, #28]
   15a34:	ldr	r7, [r6, #40]	; 0x28
   15a38:	ldr	r3, [r6, #56]	; 0x38
   15a3c:	cmp	fp, r3
   15a40:	beq	159ac <__assert_fail@plt+0x4598>
   15a44:	mov	r1, #3
   15a48:	mov	r0, r5
   15a4c:	bl	16ad0 <__assert_fail@plt+0x56bc>
   15a50:	ldr	r3, [sp, #40]	; 0x28
   15a54:	cmp	r3, #0
   15a58:	bne	15ef8 <__assert_fail@plt+0x4ae4>
   15a5c:	cmp	r0, #0
   15a60:	blt	1598c <__assert_fail@plt+0x4578>
   15a64:	orr	r2, r0, #2048	; 0x800
   15a68:	cmp	r0, r2
   15a6c:	beq	15f00 <__assert_fail@plt+0x4aec>
   15a70:	mov	r1, #4
   15a74:	mov	r0, r5
   15a78:	bl	16ad0 <__assert_fail@plt+0x56bc>
   15a7c:	cmn	r0, #1
   15a80:	bne	15f00 <__assert_fail@plt+0x4aec>
   15a84:	b	1598c <__assert_fail@plt+0x4578>
   15a88:	bl	112dc <__errno_location@plt>
   15a8c:	ldr	r4, [r0]
   15a90:	mov	r2, #5
   15a94:	movw	r1, #54632	; 0xd568
   15a98:	movt	r1, #1
   15a9c:	mov	r0, #0
   15aa0:	bl	11174 <dcgettext@plt>
   15aa4:	mov	r5, r0
   15aa8:	ldr	r2, [sp, #28]
   15aac:	mov	r1, #3
   15ab0:	mov	r0, #0
   15ab4:	bl	1a174 <__assert_fail@plt+0x8d60>
   15ab8:	mov	r3, r0
   15abc:	mov	r2, r5
   15ac0:	mov	r1, r4
   15ac4:	mov	r0, #1
   15ac8:	bl	1121c <error@plt>
   15acc:	add	r2, sp, #240	; 0xf0
   15ad0:	mov	r1, r5
   15ad4:	mov	r0, #3
   15ad8:	bl	111c8 <__fxstat64@plt>
   15adc:	cmp	r0, #0
   15ae0:	bne	15b90 <__assert_fail@plt+0x477c>
   15ae4:	ldr	ip, [sp, #256]	; 0x100
   15ae8:	ldr	r3, [r4, #40]	; 0x28
   15aec:	cmp	r3, ip
   15af0:	beq	15bd8 <__assert_fail@plt+0x47c4>
   15af4:	ldr	r3, [sp, #320]	; 0x140
   15af8:	str	r3, [r4, #16]
   15afc:	ldr	r3, [sp, #324]	; 0x144
   15b00:	str	r3, [r4, #20]
   15b04:	str	ip, [r4, #40]	; 0x28
   15b08:	mov	r3, #0
   15b0c:	str	r3, [r4, #72]	; 0x48
   15b10:	str	r3, [r4, #76]	; 0x4c
   15b14:	and	r7, r7, #61440	; 0xf000
   15b18:	cmp	r7, #32768	; 0x8000
   15b1c:	beq	15cb0 <__assert_fail@plt+0x489c>
   15b20:	ldr	r3, [sp, #32]
   15b24:	cmp	r8, r3
   15b28:	beq	15b44 <__assert_fail@plt+0x4730>
   15b2c:	movw	r3, #57808	; 0xe1d0
   15b30:	movt	r3, #2
   15b34:	ldrb	r3, [r3, #1]
   15b38:	cmp	r3, #0
   15b3c:	streq	r8, [sp, #32]
   15b40:	bne	15d34 <__assert_fail@plt+0x4920>
   15b44:	ldr	r3, [r4, #56]	; 0x38
   15b48:	cmp	r3, #0
   15b4c:	bne	15d44 <__assert_fail@plt+0x4930>
   15b50:	cmp	r7, #32768	; 0x8000
   15b54:	mvnne	r3, #0
   15b58:	movne	r2, r3
   15b5c:	bne	159c0 <__assert_fail@plt+0x45ac>
   15b60:	ldrb	r3, [r4, #45]	; 0x2d
   15b64:	cmp	r3, #0
   15b68:	mvneq	r3, #0
   15b6c:	moveq	r2, r3
   15b70:	beq	159c0 <__assert_fail@plt+0x45ac>
   15b74:	ldr	r3, [sp, #288]	; 0x120
   15b78:	ldr	r1, [r4, #8]
   15b7c:	ldr	r0, [r4, #12]
   15b80:	subs	r3, r3, r1
   15b84:	ldr	r2, [sp, #292]	; 0x124
   15b88:	sbc	r2, r2, r0
   15b8c:	b	159c0 <__assert_fail@plt+0x45ac>
   15b90:	mvn	r3, #0
   15b94:	str	r3, [r4, #48]	; 0x30
   15b98:	bl	112dc <__errno_location@plt>
   15b9c:	ldr	r7, [r0]
   15ba0:	str	r7, [r4, #52]	; 0x34
   15ba4:	ldr	r2, [sp, #28]
   15ba8:	mov	r1, #3
   15bac:	mov	r0, #0
   15bb0:	bl	1a174 <__assert_fail@plt+0x8d60>
   15bb4:	mov	r3, r0
   15bb8:	movw	r2, #53620	; 0xd174
   15bbc:	movt	r2, #1
   15bc0:	mov	r1, r7
   15bc4:	mov	r0, #0
   15bc8:	bl	1121c <error@plt>
   15bcc:	mov	r0, r5
   15bd0:	bl	113fc <close@plt>
   15bd4:	b	159f8 <__assert_fail@plt+0x45e4>
   15bd8:	and	r3, ip, #61440	; 0xf000
   15bdc:	cmp	r3, #32768	; 0x8000
   15be0:	beq	15c94 <__assert_fail@plt+0x4880>
   15be4:	ldr	r3, [r4, #16]
   15be8:	ldr	r1, [r4, #20]
   15bec:	ldr	r2, [sp, #320]	; 0x140
   15bf0:	cmp	r2, r3
   15bf4:	movlt	r2, #1
   15bf8:	movge	r2, #0
   15bfc:	movgt	r3, #1
   15c00:	movle	r3, #0
   15c04:	sub	r2, r2, r3
   15c08:	ldr	r3, [sp, #324]	; 0x144
   15c0c:	cmp	r3, r1
   15c10:	movlt	r3, #1
   15c14:	movge	r3, #0
   15c18:	movgt	r1, #1
   15c1c:	movle	r1, #0
   15c20:	sub	r3, r3, r1
   15c24:	add	r3, r3, r2, lsl #1
   15c28:	cmp	r3, #0
   15c2c:	bne	15af4 <__assert_fail@plt+0x46e0>
   15c30:	ldrd	r2, [r4, #72]	; 0x48
   15c34:	adds	r0, r2, #1
   15c38:	adc	r1, r3, #0
   15c3c:	str	r0, [r4, #72]	; 0x48
   15c40:	str	r1, [r4, #76]	; 0x4c
   15c44:	movw	r1, #57672	; 0xe148
   15c48:	movt	r1, #2
   15c4c:	ldrd	r0, [r1, #16]
   15c50:	cmp	r3, r1
   15c54:	cmpeq	r2, r0
   15c58:	bcc	159f8 <__assert_fail@plt+0x45e4>
   15c5c:	movw	r3, #57672	; 0xe148
   15c60:	movt	r3, #2
   15c64:	ldr	r3, [r3, #4]
   15c68:	cmp	r3, #1
   15c6c:	bne	159f8 <__assert_fail@plt+0x45e4>
   15c70:	ldr	r1, [r4, #56]	; 0x38
   15c74:	adds	r1, r1, #0
   15c78:	movne	r1, #1
   15c7c:	mov	r0, r4
   15c80:	bl	12c38 <__assert_fail@plt+0x1824>
   15c84:	mov	r3, #0
   15c88:	str	r3, [r4, #72]	; 0x48
   15c8c:	str	r3, [r4, #76]	; 0x4c
   15c90:	b	159f8 <__assert_fail@plt+0x45e4>
   15c94:	ldrd	r0, [r4, #8]
   15c98:	add	r3, sp, #288	; 0x120
   15c9c:	ldrd	r2, [r3]
   15ca0:	cmp	r1, r3
   15ca4:	cmpeq	r0, r2
   15ca8:	bne	15af4 <__assert_fail@plt+0x46e0>
   15cac:	b	15be4 <__assert_fail@plt+0x47d0>
   15cb0:	ldrd	r2, [r4, #8]
   15cb4:	add	r1, sp, #288	; 0x120
   15cb8:	ldrd	r0, [r1]
   15cbc:	cmp	r0, r2
   15cc0:	sbcs	r3, r1, r3
   15cc4:	bge	15b20 <__assert_fail@plt+0x470c>
   15cc8:	mov	r2, #5
   15ccc:	movw	r1, #50268	; 0xc45c
   15cd0:	movt	r1, #1
   15cd4:	mov	r0, #0
   15cd8:	bl	11174 <dcgettext@plt>
   15cdc:	str	r0, [sp, #52]	; 0x34
   15ce0:	ldr	r2, [sp, #28]
   15ce4:	mov	r1, #3
   15ce8:	mov	r0, #0
   15cec:	bl	1a174 <__assert_fail@plt+0x8d60>
   15cf0:	mov	r3, r0
   15cf4:	ldr	r2, [sp, #52]	; 0x34
   15cf8:	mov	r1, #0
   15cfc:	mov	r0, r1
   15d00:	bl	1121c <error@plt>
   15d04:	ldr	r3, [sp, #28]
   15d08:	str	r3, [sp, #4]
   15d0c:	mov	r3, #0
   15d10:	str	r3, [sp]
   15d14:	ldr	r2, [sp, #60]	; 0x3c
   15d18:	ldr	r3, [sp, #64]	; 0x40
   15d1c:	mov	r0, r5
   15d20:	bl	11ad0 <__assert_fail@plt+0x6bc>
   15d24:	mov	r3, #0
   15d28:	str	r3, [r4, #8]
   15d2c:	str	r3, [r4, #12]
   15d30:	b	15b20 <__assert_fail@plt+0x470c>
   15d34:	ldr	r0, [sp, #28]
   15d38:	bl	11538 <__assert_fail@plt+0x124>
   15d3c:	str	r8, [sp, #32]
   15d40:	b	15b44 <__assert_fail@plt+0x4730>
   15d44:	mvn	r3, #1
   15d48:	mvn	r2, #0
   15d4c:	b	159c0 <__assert_fail@plt+0x45ac>
   15d50:	movw	r3, #57808	; 0xe1d0
   15d54:	movt	r3, #2
   15d58:	ldrb	r0, [r3, #2]
   15d5c:	cmp	r0, #0
   15d60:	beq	161f0 <__assert_fail@plt+0x4ddc>
   15d64:	movw	r3, #57672	; 0xe148
   15d68:	movt	r3, #2
   15d6c:	ldr	r3, [r3, #4]
   15d70:	cmp	r3, #1
   15d74:	beq	1623c <__assert_fail@plt+0x4e28>
   15d78:	ldr	r2, [sp, #80]	; 0x50
   15d7c:	ldr	r3, [r2, #48]	; 0x30
   15d80:	cmp	r3, #0
   15d84:	bge	1623c <__assert_fail@plt+0x4e28>
   15d88:	ldrb	r3, [r2, #44]	; 0x2c
   15d8c:	eor	r3, r3, #1
   15d90:	tst	r0, r3
   15d94:	bne	1623c <__assert_fail@plt+0x4e28>
   15d98:	ldr	r3, [sp, #76]	; 0x4c
   15d9c:	mov	r1, #0
   15da0:	b	16208 <__assert_fail@plt+0x4df4>
   15da4:	movw	r3, #57796	; 0xe1c4
   15da8:	movt	r3, #2
   15dac:	ldr	r0, [r3]
   15db0:	bl	111a4 <fflush_unlocked@plt>
   15db4:	cmp	r0, #0
   15db8:	beq	1624c <__assert_fail@plt+0x4e38>
   15dbc:	bl	112dc <__errno_location@plt>
   15dc0:	ldr	r4, [r0]
   15dc4:	mov	r2, #5
   15dc8:	movw	r1, #50288	; 0xc470
   15dcc:	movt	r1, #1
   15dd0:	mov	r0, #0
   15dd4:	bl	11174 <dcgettext@plt>
   15dd8:	mov	r2, r0
   15ddc:	mov	r1, r4
   15de0:	mov	r0, #1
   15de4:	bl	1121c <error@plt>
   15de8:	mov	r1, #1
   15dec:	str	r1, [sp, #240]	; 0xf0
   15df0:	mov	r3, #8
   15df4:	strh	r3, [sp, #244]	; 0xf4
   15df8:	mov	r2, #0
   15dfc:	add	r0, sp, #240	; 0xf0
   15e00:	bl	111bc <poll@plt>
   15e04:	cmp	r0, #0
   15e08:	blt	16260 <__assert_fail@plt+0x4e4c>
   15e0c:	ldrh	r3, [sp, #246]	; 0xf6
   15e10:	tst	r3, #8
   15e14:	beq	16260 <__assert_fail@plt+0x4e4c>
   15e18:	mov	r0, #13
   15e1c:	bl	110c0 <raise@plt>
   15e20:	mov	r0, #1
   15e24:	bl	11294 <exit@plt>
   15e28:	mov	r1, #0
   15e2c:	bl	1127c <kill@plt>
   15e30:	cmp	r0, #0
   15e34:	beq	16288 <__assert_fail@plt+0x4e74>
   15e38:	bl	112dc <__errno_location@plt>
   15e3c:	ldr	r3, [r0]
   15e40:	cmp	r3, #1
   15e44:	ldrne	r3, [sp, #56]	; 0x38
   15e48:	strne	r3, [sp, #44]	; 0x2c
   15e4c:	beq	16288 <__assert_fail@plt+0x4e74>
   15e50:	ldr	r6, [sp, #76]	; 0x4c
   15e54:	mov	r9, #0
   15e58:	mov	r8, r9
   15e5c:	b	15a0c <__assert_fail@plt+0x45f8>
   15e60:	bl	112dc <__errno_location@plt>
   15e64:	movw	r2, #50000	; 0xc350
   15e68:	movt	r2, #1
   15e6c:	ldr	r1, [r0]
   15e70:	mov	r0, #1
   15e74:	bl	1121c <error@plt>
   15e78:	str	r9, [r4, #48]	; 0x30
   15e7c:	strb	r8, [r4, #44]	; 0x2c
   15e80:	add	r4, r4, #80	; 0x50
   15e84:	cmp	r6, r4
   15e88:	beq	14e88 <__assert_fail@plt+0x3a74>
   15e8c:	mov	r1, sl
   15e90:	ldr	r0, [r4]
   15e94:	bl	110cc <strcmp@plt>
   15e98:	cmp	r0, #0
   15e9c:	bne	15ec8 <__assert_fail@plt+0x4ab4>
   15ea0:	ldrb	r3, [r4, #44]	; 0x2c
   15ea4:	cmp	r3, #0
   15ea8:	bne	15ec8 <__assert_fail@plt+0x4ab4>
   15eac:	ldr	r3, [r4, #48]	; 0x30
   15eb0:	cmp	r3, #0
   15eb4:	blt	15ec8 <__assert_fail@plt+0x4ab4>
   15eb8:	ldr	r3, [r4, #40]	; 0x28
   15ebc:	and	r3, r3, #61440	; 0xf000
   15ec0:	cmp	r3, #4096	; 0x1000
   15ec4:	beq	15e78 <__assert_fail@plt+0x4a64>
   15ec8:	add	r7, r7, #1
   15ecc:	b	15e80 <__assert_fail@plt+0x4a6c>
   15ed0:	mov	r2, #5
   15ed4:	movw	r1, #54444	; 0xd4ac
   15ed8:	movt	r1, #1
   15edc:	mov	r0, #0
   15ee0:	bl	11174 <dcgettext@plt>
   15ee4:	mov	r2, r0
   15ee8:	mov	r1, #0
   15eec:	mov	r0, r1
   15ef0:	bl	1121c <error@plt>
   15ef4:	b	14e30 <__assert_fail@plt+0x3a1c>
   15ef8:	cmp	r0, #0
   15efc:	blt	1598c <__assert_fail@plt+0x4578>
   15f00:	str	fp, [r4, #56]	; 0x38
   15f04:	b	159ac <__assert_fail@plt+0x4598>
   15f08:	ldr	r3, [sp, #64]	; 0x40
   15f0c:	cmp	r3, #0
   15f10:	beq	155c4 <__assert_fail@plt+0x41b0>
   15f14:	ldr	r3, [sp, #64]	; 0x40
   15f18:	sub	r3, r3, #1
   15f1c:	str	r3, [sp, #64]	; 0x40
   15f20:	ldr	r3, [sp, #60]	; 0x3c
   15f24:	lsl	r3, r3, #1
   15f28:	str	r3, [sp, #60]	; 0x3c
   15f2c:	mov	r1, r3
   15f30:	ldr	r0, [sp, #44]	; 0x2c
   15f34:	bl	1aa68 <__assert_fail@plt+0x9654>
   15f38:	str	r0, [sp, #44]	; 0x2c
   15f3c:	mov	r3, #0
   15f40:	str	r3, [sp, #52]	; 0x34
   15f44:	str	r3, [sp, #32]
   15f48:	b	15898 <__assert_fail@plt+0x4484>
   15f4c:	ldr	sl, [sp, #60]	; 0x3c
   15f50:	movw	r3, #57672	; 0xe148
   15f54:	movt	r3, #2
   15f58:	ldr	r3, [r3, #4]
   15f5c:	ldr	r2, [sp, #44]	; 0x2c
   15f60:	cmp	r3, #2
   15f64:	movne	r2, #0
   15f68:	andeq	r2, r2, #1
   15f6c:	str	r2, [sp, #88]	; 0x58
   15f70:	cmp	r2, #0
   15f74:	bne	15280 <__assert_fail@plt+0x3e6c>
   15f78:	ldr	r2, [sp, #32]
   15f7c:	cmp	r3, #2
   15f80:	orrne	r2, r2, #1
   15f84:	str	r2, [sp, #104]	; 0x68
   15f88:	cmp	r2, #0
   15f8c:	beq	15328 <__assert_fail@plt+0x3f14>
   15f90:	ldr	r3, [sp, #124]	; 0x7c
   15f94:	sub	r3, r3, #80	; 0x50
   15f98:	ldr	r4, [sp, #80]	; 0x50
   15f9c:	add	r3, r4, r3
   15fa0:	str	r3, [sp, #132]	; 0x84
   15fa4:	mov	r6, #0
   15fa8:	movw	r7, #57672	; 0xe148
   15fac:	movt	r7, #2
   15fb0:	b	1535c <__assert_fail@plt+0x3f48>
   15fb4:	ldr	r3, [sp, #48]	; 0x30
   15fb8:	cmp	r3, #0
   15fbc:	bne	15fd4 <__assert_fail@plt+0x4bc0>
   15fc0:	movw	r3, #57672	; 0xe148
   15fc4:	movt	r3, #2
   15fc8:	ldr	r3, [r3, #4]
   15fcc:	cmp	r3, #2
   15fd0:	beq	152c8 <__assert_fail@plt+0x3eb4>
   15fd4:	bl	112ac <inotify_init@plt>
   15fd8:	subs	r3, r0, #0
   15fdc:	str	r3, [sp, #28]
   15fe0:	blt	1529c <__assert_fail@plt+0x3e88>
   15fe4:	movw	r3, #57796	; 0xe1c4
   15fe8:	movt	r3, #2
   15fec:	ldr	r0, [r3]
   15ff0:	bl	111a4 <fflush_unlocked@plt>
   15ff4:	subs	r3, r0, #0
   15ff8:	str	r3, [sp, #72]	; 0x48
   15ffc:	bne	15054 <__assert_fail@plt+0x3c40>
   16000:	mov	r1, #0
   16004:	str	r1, [sp]
   16008:	movw	r3, #5408	; 0x1520
   1600c:	movt	r3, #1
   16010:	movw	r2, #5392	; 0x1510
   16014:	movt	r2, #1
   16018:	mov	r0, r5
   1601c:	bl	177b4 <__assert_fail@plt+0x63a0>
   16020:	subs	r3, r0, #0
   16024:	str	r3, [sp, #40]	; 0x28
   16028:	beq	15080 <__assert_fail@plt+0x3c6c>
   1602c:	movw	r3, #57672	; 0xe148
   16030:	movt	r3, #2
   16034:	ldr	r3, [r3, #4]
   16038:	cmp	r3, #1
   1603c:	movw	r3, #3078	; 0xc06
   16040:	movne	r3, #2
   16044:	str	r3, [sp, #84]	; 0x54
   16048:	ldr	r8, [sp, #80]	; 0x50
   1604c:	ldr	r3, [sp, #32]
   16050:	str	r3, [sp, #44]	; 0x2c
   16054:	mov	r3, #0
   16058:	str	r3, [sp, #52]	; 0x34
   1605c:	mov	r6, r3
   16060:	movw	r7, #57672	; 0xe148
   16064:	movt	r7, #2
   16068:	movw	r3, #54412	; 0xd48c
   1606c:	movt	r3, #1
   16070:	str	r3, [sp, #68]	; 0x44
   16074:	movw	r3, #53564	; 0xd13c
   16078:	movt	r3, #1
   1607c:	str	r3, [sp, #88]	; 0x58
   16080:	str	sl, [sp, #60]	; 0x3c
   16084:	b	15170 <__assert_fail@plt+0x3d5c>
   16088:	ldr	r3, [sp, #80]	; 0x50
   1608c:	mov	r1, #0
   16090:	b	15030 <__assert_fail@plt+0x3c1c>
   16094:	ldr	r3, [sp, #64]	; 0x40
   16098:	str	r3, [sp, #4]
   1609c:	mov	r3, #0
   160a0:	str	r3, [sp]
   160a4:	mov	r2, r4
   160a8:	mov	r3, r5
   160ac:	ldr	r0, [sp, #28]
   160b0:	bl	11ad0 <__assert_fail@plt+0x6bc>
   160b4:	b	142e8 <__assert_fail@plt+0x2ed4>
   160b8:	ldr	r2, [sp, #296]	; 0x128
   160bc:	sub	r3, r2, #1
   160c0:	cmn	r3, #-536870911	; 0xe0000001
   160c4:	bhi	14990 <__assert_fail@plt+0x357c>
   160c8:	mvn	r4, #0
   160cc:	mvn	r5, #0
   160d0:	ldr	r3, [sp, #104]	; 0x68
   160d4:	str	r3, [sp, #88]	; 0x58
   160d8:	ldr	r3, [sp, #108]	; 0x6c
   160dc:	str	r3, [sp, #92]	; 0x5c
   160e0:	asr	r3, r2, #31
   160e4:	ldrd	r0, [sp, #88]	; 0x58
   160e8:	cmp	r2, r0
   160ec:	sbcs	r3, r3, r1
   160f0:	bge	14990 <__assert_fail@plt+0x357c>
   160f4:	mvn	r2, #0
   160f8:	mvn	r3, #0
   160fc:	cmp	r5, r3
   16100:	cmpeq	r4, r2
   16104:	beq	14bb4 <__assert_fail@plt+0x37a0>
   16108:	ldrd	r2, [sp, #88]	; 0x58
   1610c:	cmp	r4, r2
   16110:	sbcs	r1, r5, r3
   16114:	bge	1613c <__assert_fail@plt+0x4d28>
   16118:	subs	r1, r2, r4
   1611c:	str	r1, [sp, #112]	; 0x70
   16120:	sbc	r3, r3, r5
   16124:	str	r3, [sp, #116]	; 0x74
   16128:	ldrd	r2, [sp, #32]
   1612c:	ldrd	r0, [sp, #112]	; 0x70
   16130:	cmp	r3, r1
   16134:	cmpeq	r2, r0
   16138:	bcc	14be0 <__assert_fail@plt+0x37cc>
   1613c:	strd	r4, [sp, #136]	; 0x88
   16140:	ldrd	r2, [sp, #32]
   16144:	strd	r2, [sp]
   16148:	ldr	r2, [sp, #28]
   1614c:	ldr	r1, [sp, #64]	; 0x40
   16150:	mov	r0, #0
   16154:	bl	1184c <__assert_fail@plt+0x438>
   16158:	ldr	r3, [sp, #136]	; 0x88
   1615c:	adds	r0, r3, r0
   16160:	ldr	r3, [sp, #140]	; 0x8c
   16164:	adc	r1, r3, r1
   16168:	str	r0, [sp, #136]	; 0x88
   1616c:	str	r1, [sp, #140]	; 0x8c
   16170:	mov	r3, #1
   16174:	str	r3, [sp, #40]	; 0x28
   16178:	ldrb	r4, [r7, #7]
   1617c:	cmp	r4, #0
   16180:	bne	14c10 <__assert_fail@plt+0x37fc>
   16184:	ldr	r3, [sp, #60]	; 0x3c
   16188:	cmp	r3, #0
   1618c:	beq	14214 <__assert_fail@plt+0x2e00>
   16190:	ldr	r0, [sp, #28]
   16194:	bl	113fc <close@plt>
   16198:	cmp	r0, #0
   1619c:	beq	14214 <__assert_fail@plt+0x2e00>
   161a0:	bl	112dc <__errno_location@plt>
   161a4:	ldr	r5, [r0]
   161a8:	mov	r2, #5
   161ac:	movw	r1, #50076	; 0xc39c
   161b0:	movt	r1, #1
   161b4:	mov	r0, #0
   161b8:	bl	11174 <dcgettext@plt>
   161bc:	mov	r6, r0
   161c0:	ldr	r0, [sp, #44]	; 0x2c
   161c4:	bl	11594 <__assert_fail@plt+0x180>
   161c8:	mov	r1, r0
   161cc:	mov	r0, #4
   161d0:	bl	1a050 <__assert_fail@plt+0x8c3c>
   161d4:	mov	r3, r0
   161d8:	mov	r2, r6
   161dc:	mov	r1, r5
   161e0:	mov	r0, #0
   161e4:	bl	1121c <error@plt>
   161e8:	str	r4, [sp, #40]	; 0x28
   161ec:	b	14214 <__assert_fail@plt+0x2e00>
   161f0:	ldr	r3, [sp, #80]	; 0x50
   161f4:	ldr	r3, [r3, #48]	; 0x30
   161f8:	cmp	r3, #0
   161fc:	bge	1623c <__assert_fail@plt+0x4e28>
   16200:	ldr	r3, [sp, #76]	; 0x4c
   16204:	mov	r1, #0
   16208:	add	r2, r1, #1
   1620c:	cmp	r8, r1
   16210:	beq	15ed0 <__assert_fail@plt+0x4abc>
   16214:	mov	ip, r3
   16218:	ldr	r1, [r3, #128]	; 0x80
   1621c:	cmp	r1, #0
   16220:	bge	1623c <__assert_fail@plt+0x4e28>
   16224:	add	r3, r3, #80	; 0x50
   16228:	mov	r1, r2
   1622c:	ldrb	r2, [ip, #124]	; 0x7c
   16230:	eor	r2, r2, #1
   16234:	tst	r0, r2
   16238:	beq	16208 <__assert_fail@plt+0x4df4>
   1623c:	eor	r3, r9, #1
   16240:	ldr	r2, [sp, #40]	; 0x28
   16244:	orrs	r3, r3, r2
   16248:	bne	15da4 <__assert_fail@plt+0x4990>
   1624c:	movw	r3, #57808	; 0xe1d0
   16250:	movt	r3, #2
   16254:	ldrb	r3, [r3, #13]
   16258:	cmp	r3, #0
   1625c:	bne	15de8 <__assert_fail@plt+0x49d4>
   16260:	cmp	r9, #0
   16264:	bne	15e50 <__assert_fail@plt+0x4a3c>
   16268:	ldr	r3, [sp, #44]	; 0x2c
   1626c:	cmp	r3, #0
   16270:	bne	14e30 <__assert_fail@plt+0x3a1c>
   16274:	movw	r3, #57808	; 0xe1d0
   16278:	movt	r3, #2
   1627c:	ldr	r0, [r3, #8]
   16280:	cmp	r0, #0
   16284:	bne	15e28 <__assert_fail@plt+0x4a14>
   16288:	vmov.f64	d0, d8
   1628c:	bl	1b048 <__assert_fail@plt+0x9c34>
   16290:	cmp	r0, #0
   16294:	beq	15e50 <__assert_fail@plt+0x4a3c>
   16298:	bl	112dc <__errno_location@plt>
   1629c:	ldr	r4, [r0]
   162a0:	mov	r2, #5
   162a4:	movw	r1, #54668	; 0xd58c
   162a8:	movt	r1, #1
   162ac:	mov	r0, #0
   162b0:	bl	11174 <dcgettext@plt>
   162b4:	mov	r2, r0
   162b8:	mov	r1, r4
   162bc:	mov	r0, #1
   162c0:	bl	1121c <error@plt>
   162c4:	ldr	r3, [r7, #4]
   162c8:	cmp	r3, #1
   162cc:	bne	15914 <__assert_fail@plt+0x4500>
   162d0:	b	15710 <__assert_fail@plt+0x42fc>
   162d4:	mov	r0, #0
   162d8:	add	sp, sp, #356	; 0x164
   162dc:	vpop	{d8-d10}
   162e0:	ldrd	r4, [sp]
   162e4:	ldrd	r6, [sp, #8]
   162e8:	ldrd	r8, [sp, #16]
   162ec:	ldrd	sl, [sp, #24]
   162f0:	add	sp, sp, #32
   162f4:	pop	{pc}		; (ldr pc, [sp], #4)
   162f8:	str	r4, [sp, #-8]!
   162fc:	str	lr, [sp, #4]
   16300:	mov	r0, #1
   16304:	bl	131d8 <__assert_fail@plt+0x1dc4>
   16308:	ldr	r4, [sp]
   1630c:	add	sp, sp, #4
   16310:	pop	{pc}		; (ldr pc, [sp], #4)
   16314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16318:	strd	r6, [sp, #8]
   1631c:	strd	r8, [sp, #16]
   16320:	strd	sl, [sp, #24]
   16324:	str	lr, [sp, #32]
   16328:	sub	sp, sp, #12
   1632c:	str	r0, [sp]
   16330:	mov	r5, r1
   16334:	mov	r6, r2
   16338:	str	r2, [sp, #4]
   1633c:	mov	r9, r3
   16340:	bl	112a0 <strlen@plt>
   16344:	ldr	r4, [r5]
   16348:	cmp	r4, #0
   1634c:	beq	16408 <__assert_fail@plt+0x4ff4>
   16350:	mov	r8, r0
   16354:	mov	fp, #0
   16358:	mvn	sl, #0
   1635c:	mov	r7, fp
   16360:	b	16380 <__assert_fail@plt+0x4f6c>
   16364:	mov	sl, r7
   16368:	b	163e8 <__assert_fail@plt+0x4fd4>
   1636c:	add	r7, r7, #1
   16370:	ldr	r4, [r5, #4]!
   16374:	add	r6, r6, r9
   16378:	cmp	r4, #0
   1637c:	beq	163e0 <__assert_fail@plt+0x4fcc>
   16380:	mov	r2, r8
   16384:	ldr	r1, [sp]
   16388:	mov	r0, r4
   1638c:	bl	113e4 <strncmp@plt>
   16390:	cmp	r0, #0
   16394:	bne	1636c <__assert_fail@plt+0x4f58>
   16398:	mov	r0, r4
   1639c:	bl	112a0 <strlen@plt>
   163a0:	cmp	r0, r8
   163a4:	beq	16364 <__assert_fail@plt+0x4f50>
   163a8:	cmn	sl, #1
   163ac:	moveq	sl, r7
   163b0:	beq	1636c <__assert_fail@plt+0x4f58>
   163b4:	ldr	r3, [sp, #4]
   163b8:	cmp	r3, #0
   163bc:	moveq	fp, #1
   163c0:	beq	1636c <__assert_fail@plt+0x4f58>
   163c4:	mov	r2, r9
   163c8:	mov	r1, r6
   163cc:	mla	r0, r9, sl, r3
   163d0:	bl	1115c <memcmp@plt>
   163d4:	cmp	r0, #0
   163d8:	movne	fp, #1
   163dc:	b	1636c <__assert_fail@plt+0x4f58>
   163e0:	cmp	fp, #0
   163e4:	mvnne	sl, #1
   163e8:	mov	r0, sl
   163ec:	add	sp, sp, #12
   163f0:	ldrd	r4, [sp]
   163f4:	ldrd	r6, [sp, #8]
   163f8:	ldrd	r8, [sp, #16]
   163fc:	ldrd	sl, [sp, #24]
   16400:	add	sp, sp, #32
   16404:	pop	{pc}		; (ldr pc, [sp], #4)
   16408:	mvn	sl, #0
   1640c:	b	163e8 <__assert_fail@plt+0x4fd4>
   16410:	strd	r4, [sp, #-16]!
   16414:	str	r6, [sp, #8]
   16418:	str	lr, [sp, #12]
   1641c:	mov	r6, r0
   16420:	ldr	r0, [r1]
   16424:	cmp	r0, #0
   16428:	beq	16470 <__assert_fail@plt+0x505c>
   1642c:	mov	r4, r1
   16430:	mov	r5, #0
   16434:	mov	r1, r6
   16438:	bl	110cc <strcmp@plt>
   1643c:	cmp	r0, #0
   16440:	beq	1645c <__assert_fail@plt+0x5048>
   16444:	add	r5, r5, #1
   16448:	ldr	r0, [r4, #4]!
   1644c:	cmp	r0, #0
   16450:	bne	16434 <__assert_fail@plt+0x5020>
   16454:	mvn	r0, #0
   16458:	b	16460 <__assert_fail@plt+0x504c>
   1645c:	mov	r0, r5
   16460:	ldrd	r4, [sp]
   16464:	ldr	r6, [sp, #8]
   16468:	add	sp, sp, #12
   1646c:	pop	{pc}		; (ldr pc, [sp], #4)
   16470:	mvn	r0, #0
   16474:	b	16460 <__assert_fail@plt+0x504c>
   16478:	strd	r4, [sp, #-16]!
   1647c:	str	r6, [sp, #8]
   16480:	str	lr, [sp, #12]
   16484:	sub	sp, sp, #8
   16488:	mov	r6, r0
   1648c:	mov	r5, r1
   16490:	cmn	r2, #1
   16494:	mov	r2, #5
   16498:	movweq	r1, #55000	; 0xd6d8
   1649c:	movteq	r1, #1
   164a0:	movwne	r1, #55028	; 0xd6f4
   164a4:	movtne	r1, #1
   164a8:	mov	r0, #0
   164ac:	bl	11174 <dcgettext@plt>
   164b0:	mov	r4, r0
   164b4:	mov	r2, r5
   164b8:	mov	r1, #8
   164bc:	mov	r0, #0
   164c0:	bl	19fc4 <__assert_fail@plt+0x8bb0>
   164c4:	mov	r5, r0
   164c8:	mov	r1, r6
   164cc:	mov	r0, #1
   164d0:	bl	1a324 <__assert_fail@plt+0x8f10>
   164d4:	str	r0, [sp]
   164d8:	mov	r3, r5
   164dc:	mov	r2, r4
   164e0:	mov	r1, #0
   164e4:	mov	r0, r1
   164e8:	bl	1121c <error@plt>
   164ec:	add	sp, sp, #8
   164f0:	ldrd	r4, [sp]
   164f4:	ldr	r6, [sp, #8]
   164f8:	add	sp, sp, #12
   164fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16500:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16504:	strd	r6, [sp, #8]
   16508:	strd	r8, [sp, #16]
   1650c:	strd	sl, [sp, #24]
   16510:	str	lr, [sp, #32]
   16514:	sub	sp, sp, #12
   16518:	mov	r7, r0
   1651c:	mov	r4, r1
   16520:	mov	r8, r2
   16524:	mov	r2, #5
   16528:	movw	r1, #55060	; 0xd714
   1652c:	movt	r1, #1
   16530:	mov	r0, #0
   16534:	bl	11174 <dcgettext@plt>
   16538:	movw	r3, #57792	; 0xe1c0
   1653c:	movt	r3, #2
   16540:	ldr	r1, [r3]
   16544:	bl	110b4 <fputs_unlocked@plt>
   16548:	ldr	r5, [r7]
   1654c:	cmp	r5, #0
   16550:	beq	165fc <__assert_fail@plt+0x51e8>
   16554:	mov	r3, #0
   16558:	str	r3, [sp]
   1655c:	mov	r6, r3
   16560:	movw	sl, #57792	; 0xe1c0
   16564:	movt	sl, #2
   16568:	movw	fp, #55084	; 0xd72c
   1656c:	movt	fp, #1
   16570:	movw	r3, #55092	; 0xd734
   16574:	movt	r3, #1
   16578:	str	r3, [sp, #4]
   1657c:	b	165b8 <__assert_fail@plt+0x51a4>
   16580:	ldr	r9, [sl]
   16584:	mov	r0, r5
   16588:	bl	1a340 <__assert_fail@plt+0x8f2c>
   1658c:	mov	r3, r0
   16590:	mov	r2, fp
   16594:	mov	r1, #1
   16598:	mov	r0, r9
   1659c:	bl	11324 <__fprintf_chk@plt>
   165a0:	str	r4, [sp]
   165a4:	add	r6, r6, #1
   165a8:	ldr	r5, [r7, #4]!
   165ac:	add	r4, r4, r8
   165b0:	cmp	r5, #0
   165b4:	beq	165fc <__assert_fail@plt+0x51e8>
   165b8:	cmp	r6, #0
   165bc:	beq	16580 <__assert_fail@plt+0x516c>
   165c0:	mov	r2, r8
   165c4:	mov	r1, r4
   165c8:	ldr	r0, [sp]
   165cc:	bl	1115c <memcmp@plt>
   165d0:	cmp	r0, #0
   165d4:	bne	16580 <__assert_fail@plt+0x516c>
   165d8:	ldr	r9, [sl]
   165dc:	mov	r0, r5
   165e0:	bl	1a340 <__assert_fail@plt+0x8f2c>
   165e4:	mov	r3, r0
   165e8:	ldr	r2, [sp, #4]
   165ec:	mov	r1, #1
   165f0:	mov	r0, r9
   165f4:	bl	11324 <__fprintf_chk@plt>
   165f8:	b	165a4 <__assert_fail@plt+0x5190>
   165fc:	movw	r3, #57792	; 0xe1c0
   16600:	movt	r3, #2
   16604:	ldr	r0, [r3]
   16608:	ldr	r3, [r0, #20]
   1660c:	ldr	r2, [r0, #24]
   16610:	cmp	r3, r2
   16614:	addcc	r2, r3, #1
   16618:	strcc	r2, [r0, #20]
   1661c:	movcc	r2, #10
   16620:	strbcc	r2, [r3]
   16624:	bcs	16644 <__assert_fail@plt+0x5230>
   16628:	add	sp, sp, #12
   1662c:	ldrd	r4, [sp]
   16630:	ldrd	r6, [sp, #8]
   16634:	ldrd	r8, [sp, #16]
   16638:	ldrd	sl, [sp, #24]
   1663c:	add	sp, sp, #32
   16640:	pop	{pc}		; (ldr pc, [sp], #4)
   16644:	mov	r1, #10
   16648:	bl	1136c <__overflow@plt>
   1664c:	b	16628 <__assert_fail@plt+0x5214>
   16650:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16654:	strd	r6, [sp, #8]
   16658:	str	r8, [sp, #16]
   1665c:	str	lr, [sp, #20]
   16660:	mov	r7, r0
   16664:	mov	r5, r1
   16668:	mov	r4, r2
   1666c:	mov	r6, r3
   16670:	ldrb	r3, [sp, #32]
   16674:	cmp	r3, #0
   16678:	beq	166ac <__assert_fail@plt+0x5298>
   1667c:	ldr	r3, [sp, #24]
   16680:	mov	r2, r6
   16684:	mov	r1, r4
   16688:	mov	r0, r5
   1668c:	bl	16314 <__assert_fail@plt+0x4f00>
   16690:	cmp	r0, #0
   16694:	blt	166bc <__assert_fail@plt+0x52a8>
   16698:	ldrd	r4, [sp]
   1669c:	ldrd	r6, [sp, #8]
   166a0:	ldr	r8, [sp, #16]
   166a4:	add	sp, sp, #20
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	mov	r1, r2
   166b0:	mov	r0, r5
   166b4:	bl	16410 <__assert_fail@plt+0x4ffc>
   166b8:	b	16690 <__assert_fail@plt+0x527c>
   166bc:	mov	r2, r0
   166c0:	mov	r1, r5
   166c4:	mov	r0, r7
   166c8:	bl	16478 <__assert_fail@plt+0x5064>
   166cc:	ldr	r2, [sp, #24]
   166d0:	mov	r1, r6
   166d4:	mov	r0, r4
   166d8:	bl	16500 <__assert_fail@plt+0x50ec>
   166dc:	ldr	r3, [sp, #28]
   166e0:	blx	r3
   166e4:	mvn	r0, #0
   166e8:	b	16698 <__assert_fail@plt+0x5284>
   166ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   166f0:	strd	r6, [sp, #8]
   166f4:	str	r8, [sp, #16]
   166f8:	str	lr, [sp, #20]
   166fc:	ldr	r7, [r1]
   16700:	cmp	r7, #0
   16704:	beq	16740 <__assert_fail@plt+0x532c>
   16708:	mov	r6, r3
   1670c:	mov	r8, r0
   16710:	mov	r4, r2
   16714:	mov	r5, r1
   16718:	mov	r2, r6
   1671c:	mov	r1, r4
   16720:	mov	r0, r8
   16724:	bl	1115c <memcmp@plt>
   16728:	cmp	r0, #0
   1672c:	beq	16740 <__assert_fail@plt+0x532c>
   16730:	ldr	r7, [r5, #4]!
   16734:	add	r4, r4, r6
   16738:	cmp	r7, #0
   1673c:	bne	16718 <__assert_fail@plt+0x5304>
   16740:	mov	r0, r7
   16744:	ldrd	r4, [sp]
   16748:	ldrd	r6, [sp, #8]
   1674c:	ldr	r8, [sp, #16]
   16750:	add	sp, sp, #20
   16754:	pop	{pc}		; (ldr pc, [sp], #4)
   16758:	ldrb	r3, [r0]
   1675c:	cmp	r3, #47	; 0x2f
   16760:	bne	16770 <__assert_fail@plt+0x535c>
   16764:	ldrb	r3, [r0, #1]!
   16768:	cmp	r3, #47	; 0x2f
   1676c:	beq	16764 <__assert_fail@plt+0x5350>
   16770:	ldrb	r2, [r0]
   16774:	cmp	r2, #0
   16778:	bxeq	lr
   1677c:	push	{lr}		; (str lr, [sp, #-4]!)
   16780:	mov	r1, r0
   16784:	mov	r3, #0
   16788:	mov	lr, #1
   1678c:	mov	ip, r3
   16790:	b	167ac <__assert_fail@plt+0x5398>
   16794:	cmp	r3, #0
   16798:	movne	r0, r1
   1679c:	movne	r3, ip
   167a0:	ldrb	r2, [r1, #1]!
   167a4:	cmp	r2, #0
   167a8:	beq	167bc <__assert_fail@plt+0x53a8>
   167ac:	cmp	r2, #47	; 0x2f
   167b0:	moveq	r3, lr
   167b4:	bne	16794 <__assert_fail@plt+0x5380>
   167b8:	b	167a0 <__assert_fail@plt+0x538c>
   167bc:	pop	{pc}		; (ldr pc, [sp], #4)
   167c0:	str	r4, [sp, #-8]!
   167c4:	str	lr, [sp, #4]
   167c8:	mov	r4, r0
   167cc:	bl	112a0 <strlen@plt>
   167d0:	cmp	r0, #1
   167d4:	bls	167f4 <__assert_fail@plt+0x53e0>
   167d8:	add	r3, r4, r0
   167dc:	ldrb	r3, [r3, #-1]
   167e0:	cmp	r3, #47	; 0x2f
   167e4:	subeq	r0, r0, #2
   167e8:	addeq	r3, r4, r0
   167ec:	rsbeq	r1, r4, #1
   167f0:	beq	16800 <__assert_fail@plt+0x53ec>
   167f4:	ldr	r4, [sp]
   167f8:	add	sp, sp, #4
   167fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16800:	add	r0, r1, r3
   16804:	cmp	r3, r4
   16808:	beq	167f4 <__assert_fail@plt+0x53e0>
   1680c:	ldrb	r2, [r3], #-1
   16810:	cmp	r2, #47	; 0x2f
   16814:	bne	167f4 <__assert_fail@plt+0x53e0>
   16818:	b	16800 <__assert_fail@plt+0x53ec>
   1681c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16820:	strd	r6, [sp, #8]
   16824:	str	lr, [sp, #16]
   16828:	vpush	{d8}
   1682c:	sub	sp, sp, #12
   16830:	mov	r5, r0
   16834:	mov	r4, r1
   16838:	add	r1, sp, #4
   1683c:	bl	1130c <strtod@plt>
   16840:	vmov.f64	d8, d0
   16844:	ldr	r3, [sp, #4]
   16848:	ldrb	r3, [r3]
   1684c:	cmp	r3, #0
   16850:	bne	1687c <__assert_fail@plt+0x5468>
   16854:	cmp	r4, #0
   16858:	ldrne	r3, [sp, #4]
   1685c:	strne	r3, [r4]
   16860:	vmov.f64	d0, d8
   16864:	add	sp, sp, #12
   16868:	vpop	{d8}
   1686c:	ldrd	r4, [sp]
   16870:	ldrd	r6, [sp, #8]
   16874:	add	sp, sp, #16
   16878:	pop	{pc}		; (ldr pc, [sp], #4)
   1687c:	bl	112dc <__errno_location@plt>
   16880:	mov	r6, r0
   16884:	ldr	r7, [r0]
   16888:	mov	r1, sp
   1688c:	mov	r0, r5
   16890:	bl	1b928 <__assert_fail@plt+0xa514>
   16894:	ldr	r3, [sp]
   16898:	ldr	r2, [sp, #4]
   1689c:	cmp	r2, r3
   168a0:	strcc	r3, [sp, #4]
   168a4:	vmovcc.f64	d8, d0
   168a8:	strcs	r7, [r6]
   168ac:	b	16854 <__assert_fail@plt+0x5440>
   168b0:	movw	r3, #57824	; 0xe1e0
   168b4:	movt	r3, #2
   168b8:	str	r0, [r3]
   168bc:	bx	lr
   168c0:	movw	r3, #57824	; 0xe1e0
   168c4:	movt	r3, #2
   168c8:	strb	r0, [r3, #4]
   168cc:	bx	lr
   168d0:	strd	r4, [sp, #-16]!
   168d4:	str	r6, [sp, #8]
   168d8:	str	lr, [sp, #12]
   168dc:	sub	sp, sp, #8
   168e0:	movw	r3, #57796	; 0xe1c4
   168e4:	movt	r3, #2
   168e8:	ldr	r0, [r3]
   168ec:	bl	1b9c8 <__assert_fail@plt+0xa5b4>
   168f0:	cmp	r0, #0
   168f4:	beq	1691c <__assert_fail@plt+0x5508>
   168f8:	movw	r3, #57824	; 0xe1e0
   168fc:	movt	r3, #2
   16900:	ldrb	r3, [r3, #4]
   16904:	cmp	r3, #0
   16908:	beq	16948 <__assert_fail@plt+0x5534>
   1690c:	bl	112dc <__errno_location@plt>
   16910:	ldr	r3, [r0]
   16914:	cmp	r3, #32
   16918:	bne	16948 <__assert_fail@plt+0x5534>
   1691c:	movw	r3, #57792	; 0xe1c0
   16920:	movt	r3, #2
   16924:	ldr	r0, [r3]
   16928:	bl	1b9c8 <__assert_fail@plt+0xa5b4>
   1692c:	cmp	r0, #0
   16930:	bne	169d0 <__assert_fail@plt+0x55bc>
   16934:	add	sp, sp, #8
   16938:	ldrd	r4, [sp]
   1693c:	ldr	r6, [sp, #8]
   16940:	add	sp, sp, #12
   16944:	pop	{pc}		; (ldr pc, [sp], #4)
   16948:	mov	r2, #5
   1694c:	movw	r1, #50288	; 0xc470
   16950:	movt	r1, #1
   16954:	mov	r0, #0
   16958:	bl	11174 <dcgettext@plt>
   1695c:	mov	r4, r0
   16960:	movw	r3, #57824	; 0xe1e0
   16964:	movt	r3, #2
   16968:	ldr	r5, [r3]
   1696c:	cmp	r5, #0
   16970:	beq	169b0 <__assert_fail@plt+0x559c>
   16974:	bl	112dc <__errno_location@plt>
   16978:	ldr	r6, [r0]
   1697c:	mov	r0, r5
   16980:	bl	1a13c <__assert_fail@plt+0x8d28>
   16984:	str	r4, [sp]
   16988:	mov	r3, r0
   1698c:	movw	r2, #53616	; 0xd170
   16990:	movt	r2, #1
   16994:	mov	r1, r6
   16998:	mov	r0, #0
   1699c:	bl	1121c <error@plt>
   169a0:	movw	r3, #57704	; 0xe168
   169a4:	movt	r3, #2
   169a8:	ldr	r0, [r3]
   169ac:	bl	11120 <_exit@plt>
   169b0:	bl	112dc <__errno_location@plt>
   169b4:	mov	r3, r4
   169b8:	movw	r2, #53620	; 0xd174
   169bc:	movt	r2, #1
   169c0:	ldr	r1, [r0]
   169c4:	mov	r0, #0
   169c8:	bl	1121c <error@plt>
   169cc:	b	169a0 <__assert_fail@plt+0x558c>
   169d0:	movw	r3, #57704	; 0xe168
   169d4:	movt	r3, #2
   169d8:	ldr	r0, [r3]
   169dc:	bl	11120 <_exit@plt>
   169e0:	strd	r4, [sp, #-16]!
   169e4:	str	r6, [sp, #8]
   169e8:	str	lr, [sp, #12]
   169ec:	mov	r4, r0
   169f0:	ldrb	ip, [r0]
   169f4:	cmp	ip, #47	; 0x2f
   169f8:	movne	r5, #0
   169fc:	moveq	r5, #1
   16a00:	bl	16758 <__assert_fail@plt+0x5344>
   16a04:	sub	r0, r0, r4
   16a08:	cmp	r0, r5
   16a0c:	bls	16a4c <__assert_fail@plt+0x5638>
   16a10:	add	r3, r4, r0
   16a14:	ldrb	r3, [r3, #-1]
   16a18:	cmp	r3, #47	; 0x2f
   16a1c:	bne	16a4c <__assert_fail@plt+0x5638>
   16a20:	sub	r0, r0, #2
   16a24:	add	r3, r4, r0
   16a28:	sub	ip, r4, #1
   16a2c:	add	ip, ip, r5
   16a30:	rsb	r2, r4, #1
   16a34:	add	r0, r2, r3
   16a38:	cmp	r3, ip
   16a3c:	beq	16a4c <__assert_fail@plt+0x5638>
   16a40:	ldrb	r1, [r3], #-1
   16a44:	cmp	r1, #47	; 0x2f
   16a48:	beq	16a34 <__assert_fail@plt+0x5620>
   16a4c:	ldrd	r4, [sp]
   16a50:	ldr	r6, [sp, #8]
   16a54:	add	sp, sp, #12
   16a58:	pop	{pc}		; (ldr pc, [sp], #4)
   16a5c:	strd	r4, [sp, #-16]!
   16a60:	str	r6, [sp, #8]
   16a64:	str	lr, [sp, #12]
   16a68:	mov	r6, r0
   16a6c:	bl	169e0 <__assert_fail@plt+0x55cc>
   16a70:	mov	r4, r0
   16a74:	add	r3, r0, #1
   16a78:	cmp	r0, #0
   16a7c:	movne	r0, r3
   16a80:	addeq	r0, r3, #1
   16a84:	bl	1b88c <__assert_fail@plt+0xa478>
   16a88:	subs	r5, r0, #0
   16a8c:	beq	16abc <__assert_fail@plt+0x56a8>
   16a90:	mov	r2, r4
   16a94:	mov	r1, r6
   16a98:	mov	r0, r5
   16a9c:	bl	1112c <memcpy@plt>
   16aa0:	cmp	r4, #0
   16aa4:	bne	16ab4 <__assert_fail@plt+0x56a0>
   16aa8:	mov	r3, #46	; 0x2e
   16aac:	strb	r3, [r5]
   16ab0:	mov	r4, #1
   16ab4:	mov	r3, #0
   16ab8:	strb	r3, [r5, r4]
   16abc:	mov	r0, r5
   16ac0:	ldrd	r4, [sp]
   16ac4:	ldr	r6, [sp, #8]
   16ac8:	add	sp, sp, #12
   16acc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad0:	push	{r1, r2, r3}
   16ad4:	strd	r4, [sp, #-16]!
   16ad8:	str	r6, [sp, #8]
   16adc:	str	lr, [sp, #12]
   16ae0:	sub	sp, sp, #12
   16ae4:	mov	r5, r0
   16ae8:	ldr	r1, [sp, #28]
   16aec:	add	r3, sp, #32
   16af0:	str	r3, [sp, #4]
   16af4:	cmp	r1, #0
   16af8:	beq	16b40 <__assert_fail@plt+0x572c>
   16afc:	movw	r3, #1030	; 0x406
   16b00:	cmp	r1, r3
   16b04:	beq	16b7c <__assert_fail@plt+0x5768>
   16b08:	cmp	r1, #11
   16b0c:	beq	16d2c <__assert_fail@plt+0x5918>
   16b10:	bgt	16cb8 <__assert_fail@plt+0x58a4>
   16b14:	cmp	r1, #3
   16b18:	beq	16d2c <__assert_fail@plt+0x5918>
   16b1c:	ble	16c78 <__assert_fail@plt+0x5864>
   16b20:	cmp	r1, #8
   16b24:	beq	16c98 <__assert_fail@plt+0x5884>
   16b28:	ble	16c90 <__assert_fail@plt+0x587c>
   16b2c:	cmp	r1, #9
   16b30:	beq	16d2c <__assert_fail@plt+0x5918>
   16b34:	cmp	r1, #10
   16b38:	bne	16cf0 <__assert_fail@plt+0x58dc>
   16b3c:	b	16c98 <__assert_fail@plt+0x5884>
   16b40:	ldr	r3, [sp, #4]
   16b44:	add	r2, r3, #4
   16b48:	str	r2, [sp, #4]
   16b4c:	ldr	r2, [r3]
   16b50:	mov	r1, #0
   16b54:	bl	11360 <fcntl64@plt>
   16b58:	mov	r4, r0
   16b5c:	mov	r0, r4
   16b60:	add	sp, sp, #12
   16b64:	ldrd	r4, [sp]
   16b68:	ldr	r6, [sp, #8]
   16b6c:	ldr	lr, [sp, #12]
   16b70:	add	sp, sp, #16
   16b74:	add	sp, sp, #12
   16b78:	bx	lr
   16b7c:	ldr	r3, [sp, #4]
   16b80:	add	r2, r3, #4
   16b84:	str	r2, [sp, #4]
   16b88:	ldr	r6, [r3]
   16b8c:	movw	r3, #57832	; 0xe1e8
   16b90:	movt	r3, #2
   16b94:	ldr	r3, [r3]
   16b98:	cmp	r3, #0
   16b9c:	blt	16c04 <__assert_fail@plt+0x57f0>
   16ba0:	mov	r2, r6
   16ba4:	movw	r1, #1030	; 0x406
   16ba8:	bl	11360 <fcntl64@plt>
   16bac:	subs	r4, r0, #0
   16bb0:	blt	16bc8 <__assert_fail@plt+0x57b4>
   16bb4:	movw	r3, #57832	; 0xe1e8
   16bb8:	movt	r3, #2
   16bbc:	mov	r2, #1
   16bc0:	str	r2, [r3]
   16bc4:	b	16b5c <__assert_fail@plt+0x5748>
   16bc8:	bl	112dc <__errno_location@plt>
   16bcc:	ldr	r3, [r0]
   16bd0:	cmp	r3, #22
   16bd4:	bne	16bb4 <__assert_fail@plt+0x57a0>
   16bd8:	mov	r2, r6
   16bdc:	mov	r1, #0
   16be0:	mov	r0, r5
   16be4:	bl	11360 <fcntl64@plt>
   16be8:	subs	r4, r0, #0
   16bec:	blt	16b5c <__assert_fail@plt+0x5748>
   16bf0:	movw	r3, #57832	; 0xe1e8
   16bf4:	movt	r3, #2
   16bf8:	mvn	r2, #0
   16bfc:	str	r2, [r3]
   16c00:	b	16c2c <__assert_fail@plt+0x5818>
   16c04:	mov	r2, r6
   16c08:	mov	r1, #0
   16c0c:	bl	11360 <fcntl64@plt>
   16c10:	subs	r4, r0, #0
   16c14:	blt	16b5c <__assert_fail@plt+0x5748>
   16c18:	movw	r3, #57832	; 0xe1e8
   16c1c:	movt	r3, #2
   16c20:	ldr	r3, [r3]
   16c24:	cmn	r3, #1
   16c28:	bne	16b5c <__assert_fail@plt+0x5748>
   16c2c:	mov	r1, #1
   16c30:	mov	r0, r4
   16c34:	bl	11360 <fcntl64@plt>
   16c38:	subs	r2, r0, #0
   16c3c:	blt	16c58 <__assert_fail@plt+0x5844>
   16c40:	orr	r2, r2, #1
   16c44:	mov	r1, #2
   16c48:	mov	r0, r4
   16c4c:	bl	11360 <fcntl64@plt>
   16c50:	cmn	r0, #1
   16c54:	bne	16b5c <__assert_fail@plt+0x5748>
   16c58:	bl	112dc <__errno_location@plt>
   16c5c:	mov	r5, r0
   16c60:	ldr	r6, [r0]
   16c64:	mov	r0, r4
   16c68:	bl	113fc <close@plt>
   16c6c:	str	r6, [r5]
   16c70:	mvn	r4, #0
   16c74:	b	16b5c <__assert_fail@plt+0x5748>
   16c78:	cmp	r1, #1
   16c7c:	beq	16d2c <__assert_fail@plt+0x5918>
   16c80:	bgt	16c98 <__assert_fail@plt+0x5884>
   16c84:	cmp	r1, #0
   16c88:	bne	16cf0 <__assert_fail@plt+0x58dc>
   16c8c:	b	16c98 <__assert_fail@plt+0x5884>
   16c90:	cmp	r1, #4
   16c94:	bne	16cf0 <__assert_fail@plt+0x58dc>
   16c98:	ldr	r3, [sp, #4]
   16c9c:	add	r2, r3, #4
   16ca0:	str	r2, [sp, #4]
   16ca4:	ldr	r2, [r3]
   16ca8:	mov	r0, r5
   16cac:	bl	11360 <fcntl64@plt>
   16cb0:	mov	r4, r0
   16cb4:	b	16b5c <__assert_fail@plt+0x5748>
   16cb8:	movw	r3, #1031	; 0x407
   16cbc:	cmp	r1, r3
   16cc0:	bgt	16d10 <__assert_fail@plt+0x58fc>
   16cc4:	movw	r3, #1030	; 0x406
   16cc8:	cmp	r1, r3
   16ccc:	bge	16c98 <__assert_fail@plt+0x5884>
   16cd0:	movw	r3, #1025	; 0x401
   16cd4:	cmp	r1, r3
   16cd8:	beq	16d2c <__assert_fail@plt+0x5918>
   16cdc:	movw	r3, #1026	; 0x402
   16ce0:	cmp	r1, r3
   16ce4:	beq	16c98 <__assert_fail@plt+0x5884>
   16ce8:	cmp	r1, #1024	; 0x400
   16cec:	beq	16c98 <__assert_fail@plt+0x5884>
   16cf0:	ldr	r3, [sp, #4]
   16cf4:	add	r2, r3, #4
   16cf8:	str	r2, [sp, #4]
   16cfc:	ldr	r2, [r3]
   16d00:	mov	r0, r5
   16d04:	bl	11360 <fcntl64@plt>
   16d08:	mov	r4, r0
   16d0c:	b	16b5c <__assert_fail@plt+0x5748>
   16d10:	movw	r3, #1033	; 0x409
   16d14:	cmp	r1, r3
   16d18:	beq	16c98 <__assert_fail@plt+0x5884>
   16d1c:	blt	16d2c <__assert_fail@plt+0x5918>
   16d20:	movw	r3, #1034	; 0x40a
   16d24:	cmp	r1, r3
   16d28:	bne	16cf0 <__assert_fail@plt+0x58dc>
   16d2c:	mov	r0, r5
   16d30:	bl	11360 <fcntl64@plt>
   16d34:	mov	r4, r0
   16d38:	b	16b5c <__assert_fail@plt+0x5748>
   16d3c:	push	{r1, r2, r3}
   16d40:	push	{lr}		; (str lr, [sp, #-4]!)
   16d44:	sub	sp, sp, #8
   16d48:	ldr	r1, [sp, #12]
   16d4c:	tst	r1, #64	; 0x40
   16d50:	addne	r3, sp, #20
   16d54:	strne	r3, [sp, #4]
   16d58:	ldrne	r2, [sp, #16]
   16d5c:	moveq	r2, #0
   16d60:	bl	11228 <open64@plt>
   16d64:	bl	1a3f8 <__assert_fail@plt+0x8fe4>
   16d68:	add	sp, sp, #8
   16d6c:	pop	{lr}		; (ldr lr, [sp], #4)
   16d70:	add	sp, sp, #12
   16d74:	bx	lr
   16d78:	strd	r4, [sp, #-12]!
   16d7c:	str	lr, [sp, #8]
   16d80:	sub	sp, sp, #12
   16d84:	mov	r5, r0
   16d88:	bl	112dc <__errno_location@plt>
   16d8c:	mov	r4, r0
   16d90:	ldr	r3, [r0]
   16d94:	str	r3, [sp]
   16d98:	str	r3, [sp, #4]
   16d9c:	mov	r3, #0
   16da0:	str	r3, [r0]
   16da4:	mov	r0, r5
   16da8:	bl	11108 <free@plt>
   16dac:	ldr	r3, [r4]
   16db0:	clz	r3, r3
   16db4:	lsr	r3, r3, #5
   16db8:	add	r2, sp, #8
   16dbc:	add	r3, r2, r3, lsl #2
   16dc0:	ldr	r3, [r3, #-8]
   16dc4:	str	r3, [r4]
   16dc8:	add	sp, sp, #12
   16dcc:	ldrd	r4, [sp]
   16dd0:	add	sp, sp, #8
   16dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd8:	ror	r0, r0, #3
   16ddc:	udiv	r3, r0, r1
   16de0:	mls	r0, r3, r1, r0
   16de4:	bx	lr
   16de8:	cmp	r1, r0
   16dec:	movne	r0, #0
   16df0:	moveq	r0, #1
   16df4:	bx	lr
   16df8:	ldr	r2, [r0, #20]
   16dfc:	movw	r3, #55100	; 0xd73c
   16e00:	movt	r3, #1
   16e04:	cmp	r2, r3
   16e08:	beq	16ea4 <__assert_fail@plt+0x5a90>
   16e0c:	vldr	s15, [r2, #8]
   16e10:	vldr	s14, [pc, #148]	; 16eac <__assert_fail@plt+0x5a98>
   16e14:	vcmpe.f32	s15, s14
   16e18:	vmrs	APSR_nzcv, fpscr
   16e1c:	ble	16e7c <__assert_fail@plt+0x5a68>
   16e20:	vldr	s14, [pc, #136]	; 16eb0 <__assert_fail@plt+0x5a9c>
   16e24:	vcmpe.f32	s15, s14
   16e28:	vmrs	APSR_nzcv, fpscr
   16e2c:	bpl	16e7c <__assert_fail@plt+0x5a68>
   16e30:	vldr	s13, [r2, #12]
   16e34:	vldr	s14, [pc, #120]	; 16eb4 <__assert_fail@plt+0x5aa0>
   16e38:	vcmpe.f32	s13, s14
   16e3c:	vmrs	APSR_nzcv, fpscr
   16e40:	ble	16e7c <__assert_fail@plt+0x5a68>
   16e44:	vldr	s14, [r2]
   16e48:	vcmpe.f32	s14, #0.0
   16e4c:	vmrs	APSR_nzcv, fpscr
   16e50:	blt	16e7c <__assert_fail@plt+0x5a68>
   16e54:	vldr	s13, [pc, #80]	; 16eac <__assert_fail@plt+0x5a98>
   16e58:	vadd.f32	s14, s14, s13
   16e5c:	vldr	s13, [r2, #4]
   16e60:	vcmpe.f32	s14, s13
   16e64:	vmrs	APSR_nzcv, fpscr
   16e68:	bpl	16e7c <__assert_fail@plt+0x5a68>
   16e6c:	vldr	s12, [pc, #68]	; 16eb8 <__assert_fail@plt+0x5aa4>
   16e70:	vcmpe.f32	s13, s12
   16e74:	vmrs	APSR_nzcv, fpscr
   16e78:	bls	16e90 <__assert_fail@plt+0x5a7c>
   16e7c:	movw	r3, #55100	; 0xd73c
   16e80:	movt	r3, #1
   16e84:	str	r3, [r0, #20]
   16e88:	mov	r0, #0
   16e8c:	bx	lr
   16e90:	vcmpe.f32	s15, s14
   16e94:	vmrs	APSR_nzcv, fpscr
   16e98:	ble	16e7c <__assert_fail@plt+0x5a68>
   16e9c:	mov	r0, #1
   16ea0:	bx	lr
   16ea4:	mov	r0, #1
   16ea8:	bx	lr
   16eac:	stclcc	12, cr12, [ip, #820]	; 0x334
   16eb0:	svccc	0x00666666
   16eb4:	svccc	0x008ccccd
   16eb8:	svccc	0x00800000
   16ebc:	ldrb	r3, [r1, #16]
   16ec0:	cmp	r3, #0
   16ec4:	bne	16ef0 <__assert_fail@plt+0x5adc>
   16ec8:	vmov	s15, r0
   16ecc:	vcvt.f32.u32	s15, s15
   16ed0:	vldr	s13, [r1, #8]
   16ed4:	vdiv.f32	s14, s15, s13
   16ed8:	vldr	s15, [pc, #224]	; 16fc0 <__assert_fail@plt+0x5bac>
   16edc:	vcmpe.f32	s14, s15
   16ee0:	vmrs	APSR_nzcv, fpscr
   16ee4:	bge	16fb0 <__assert_fail@plt+0x5b9c>
   16ee8:	vcvt.u32.f32	s15, s14
   16eec:	vmov	r0, s15
   16ef0:	cmp	r0, #10
   16ef4:	movcc	r0, #10
   16ef8:	orr	r0, r0, #1
   16efc:	cmn	r0, #1
   16f00:	beq	16f14 <__assert_fail@plt+0x5b00>
   16f04:	push	{lr}		; (str lr, [sp, #-4]!)
   16f08:	movw	lr, #43691	; 0xaaab
   16f0c:	movt	lr, #43690	; 0xaaaa
   16f10:	b	16f3c <__assert_fail@plt+0x5b28>
   16f14:	mov	r0, #0
   16f18:	bx	lr
   16f1c:	mov	r3, #3
   16f20:	udiv	r2, r0, r3
   16f24:	mls	r3, r3, r2, r0
   16f28:	cmp	r3, #0
   16f2c:	bne	16f8c <__assert_fail@plt+0x5b78>
   16f30:	add	r0, r0, #2
   16f34:	cmn	r0, #1
   16f38:	beq	16fb8 <__assert_fail@plt+0x5ba4>
   16f3c:	cmp	r0, #9
   16f40:	bls	16f1c <__assert_fail@plt+0x5b08>
   16f44:	umull	r2, r3, lr, r0
   16f48:	lsr	r3, r3, #1
   16f4c:	add	r3, r3, r3, lsl #1
   16f50:	cmp	r0, r3
   16f54:	beq	16f30 <__assert_fail@plt+0x5b1c>
   16f58:	mov	r1, #16
   16f5c:	mov	r2, #9
   16f60:	mov	r3, #3
   16f64:	add	r2, r2, r1
   16f68:	add	r3, r3, #2
   16f6c:	cmp	r2, r0
   16f70:	bcs	16f20 <__assert_fail@plt+0x5b0c>
   16f74:	add	r1, r1, #8
   16f78:	udiv	ip, r0, r3
   16f7c:	mls	ip, r3, ip, r0
   16f80:	cmp	ip, #0
   16f84:	bne	16f64 <__assert_fail@plt+0x5b50>
   16f88:	b	16f30 <__assert_fail@plt+0x5b1c>
   16f8c:	lsl	r2, r0, #2
   16f90:	lsr	r3, r0, #30
   16f94:	adds	r3, r3, #0
   16f98:	movne	r3, #1
   16f9c:	cmp	r2, #0
   16fa0:	movlt	r3, #1
   16fa4:	cmp	r3, #0
   16fa8:	movne	r0, #0
   16fac:	pop	{pc}		; (ldr pc, [sp], #4)
   16fb0:	mov	r0, #0
   16fb4:	bx	lr
   16fb8:	mov	r0, #0
   16fbc:	b	16fac <__assert_fail@plt+0x5b98>
   16fc0:	svcmi	0x00800000
   16fc4:	str	r4, [sp, #-8]!
   16fc8:	str	lr, [sp, #4]
   16fcc:	mov	r4, r0
   16fd0:	mov	r0, r1
   16fd4:	ldr	r3, [r4, #24]
   16fd8:	ldr	r1, [r4, #8]
   16fdc:	blx	r3
   16fe0:	ldr	r3, [r4, #8]
   16fe4:	cmp	r3, r0
   16fe8:	bls	17000 <__assert_fail@plt+0x5bec>
   16fec:	ldr	r3, [r4]
   16ff0:	add	r0, r3, r0, lsl #3
   16ff4:	ldr	r4, [sp]
   16ff8:	add	sp, sp, #4
   16ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   17000:	bl	113f0 <abort@plt>
   17004:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17008:	strd	r6, [sp, #8]
   1700c:	strd	r8, [sp, #16]
   17010:	strd	sl, [sp, #24]
   17014:	str	lr, [sp, #32]
   17018:	sub	sp, sp, #4
   1701c:	ldr	r7, [r1]
   17020:	ldr	r3, [r1, #4]
   17024:	cmp	r7, r3
   17028:	bcs	17180 <__assert_fail@plt+0x5d6c>
   1702c:	mov	fp, r2
   17030:	mov	r9, r1
   17034:	mov	r6, r0
   17038:	add	r7, r7, #8
   1703c:	mov	sl, #0
   17040:	b	17114 <__assert_fail@plt+0x5d00>
   17044:	str	r5, [r0]
   17048:	ldr	r2, [r6, #12]
   1704c:	add	r2, r2, #1
   17050:	str	r2, [r6, #12]
   17054:	str	sl, [r4]
   17058:	ldr	r2, [r6, #36]	; 0x24
   1705c:	str	r2, [r4, #4]
   17060:	str	r4, [r6, #36]	; 0x24
   17064:	mov	r4, r3
   17068:	cmp	r3, #0
   1706c:	beq	170a0 <__assert_fail@plt+0x5c8c>
   17070:	ldr	r5, [r4]
   17074:	mov	r1, r5
   17078:	mov	r0, r6
   1707c:	bl	16fc4 <__assert_fail@plt+0x5bb0>
   17080:	ldr	r3, [r4, #4]
   17084:	ldr	r2, [r0]
   17088:	cmp	r2, #0
   1708c:	beq	17044 <__assert_fail@plt+0x5c30>
   17090:	ldr	r2, [r0, #4]
   17094:	str	r2, [r4, #4]
   17098:	str	r4, [r0, #4]
   1709c:	b	17064 <__assert_fail@plt+0x5c50>
   170a0:	ldr	r4, [r8, #-8]
   170a4:	str	sl, [r8, #-4]
   170a8:	cmp	fp, #0
   170ac:	bne	17100 <__assert_fail@plt+0x5cec>
   170b0:	mov	r1, r4
   170b4:	mov	r0, r6
   170b8:	bl	16fc4 <__assert_fail@plt+0x5bb0>
   170bc:	mov	r5, r0
   170c0:	ldr	r3, [r0]
   170c4:	cmp	r3, #0
   170c8:	beq	1714c <__assert_fail@plt+0x5d38>
   170cc:	ldr	r0, [r6, #36]	; 0x24
   170d0:	cmp	r0, #0
   170d4:	beq	17134 <__assert_fail@plt+0x5d20>
   170d8:	ldr	r3, [r0, #4]
   170dc:	str	r3, [r6, #36]	; 0x24
   170e0:	str	r4, [r0]
   170e4:	ldr	r3, [r5, #4]
   170e8:	str	r3, [r0, #4]
   170ec:	str	r0, [r5, #4]
   170f0:	str	sl, [r8, #-8]
   170f4:	ldr	r3, [r9, #12]
   170f8:	sub	r3, r3, #1
   170fc:	str	r3, [r9, #12]
   17100:	add	r2, r7, #8
   17104:	ldr	r3, [r9, #4]
   17108:	cmp	r3, r7
   1710c:	bls	17160 <__assert_fail@plt+0x5d4c>
   17110:	mov	r7, r2
   17114:	mov	r8, r7
   17118:	ldr	r3, [r7, #-8]
   1711c:	cmp	r3, #0
   17120:	beq	17100 <__assert_fail@plt+0x5cec>
   17124:	ldr	r4, [r7, #-4]
   17128:	cmp	r4, #0
   1712c:	bne	17070 <__assert_fail@plt+0x5c5c>
   17130:	b	170a0 <__assert_fail@plt+0x5c8c>
   17134:	mov	r0, #8
   17138:	bl	1b88c <__assert_fail@plt+0xa478>
   1713c:	cmp	r0, #0
   17140:	bne	170e0 <__assert_fail@plt+0x5ccc>
   17144:	mov	r0, fp
   17148:	b	17164 <__assert_fail@plt+0x5d50>
   1714c:	str	r4, [r0]
   17150:	ldr	r3, [r6, #12]
   17154:	add	r3, r3, #1
   17158:	str	r3, [r6, #12]
   1715c:	b	170f0 <__assert_fail@plt+0x5cdc>
   17160:	mov	r0, #1
   17164:	add	sp, sp, #4
   17168:	ldrd	r4, [sp]
   1716c:	ldrd	r6, [sp, #8]
   17170:	ldrd	r8, [sp, #16]
   17174:	ldrd	sl, [sp, #24]
   17178:	add	sp, sp, #32
   1717c:	pop	{pc}		; (ldr pc, [sp], #4)
   17180:	mov	r0, #1
   17184:	b	17164 <__assert_fail@plt+0x5d50>
   17188:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1718c:	strd	r6, [sp, #8]
   17190:	str	r8, [sp, #16]
   17194:	str	lr, [sp, #20]
   17198:	mov	r6, r0
   1719c:	mov	r5, r1
   171a0:	mov	r7, r2
   171a4:	mov	r8, r3
   171a8:	bl	16fc4 <__assert_fail@plt+0x5bb0>
   171ac:	mov	r4, r0
   171b0:	str	r0, [r7]
   171b4:	ldr	r0, [r0]
   171b8:	cmp	r0, #0
   171bc:	beq	17238 <__assert_fail@plt+0x5e24>
   171c0:	cmp	r0, r5
   171c4:	beq	1724c <__assert_fail@plt+0x5e38>
   171c8:	ldr	r3, [r6, #28]
   171cc:	mov	r1, r0
   171d0:	mov	r0, r5
   171d4:	blx	r3
   171d8:	cmp	r0, #0
   171dc:	bne	1724c <__assert_fail@plt+0x5e38>
   171e0:	ldr	r0, [r4, #4]
   171e4:	cmp	r0, #0
   171e8:	beq	17238 <__assert_fail@plt+0x5e24>
   171ec:	ldr	r1, [r0]
   171f0:	cmp	r5, r1
   171f4:	beq	17228 <__assert_fail@plt+0x5e14>
   171f8:	ldr	r3, [r6, #28]
   171fc:	mov	r0, r5
   17200:	blx	r3
   17204:	cmp	r0, #0
   17208:	bne	17228 <__assert_fail@plt+0x5e14>
   1720c:	ldr	r4, [r4, #4]
   17210:	ldr	r0, [r4, #4]
   17214:	cmp	r0, #0
   17218:	beq	17238 <__assert_fail@plt+0x5e24>
   1721c:	ldr	r1, [r0]
   17220:	cmp	r1, r5
   17224:	bne	171f8 <__assert_fail@plt+0x5de4>
   17228:	ldr	r3, [r4, #4]
   1722c:	ldr	r0, [r3]
   17230:	cmp	r8, #0
   17234:	bne	1728c <__assert_fail@plt+0x5e78>
   17238:	ldrd	r4, [sp]
   1723c:	ldrd	r6, [sp, #8]
   17240:	ldr	r8, [sp, #16]
   17244:	add	sp, sp, #20
   17248:	pop	{pc}		; (ldr pc, [sp], #4)
   1724c:	ldr	r0, [r4]
   17250:	cmp	r8, #0
   17254:	beq	17238 <__assert_fail@plt+0x5e24>
   17258:	ldr	r1, [r4, #4]
   1725c:	cmp	r1, #0
   17260:	moveq	r3, #0
   17264:	streq	r3, [r4]
   17268:	beq	17238 <__assert_fail@plt+0x5e24>
   1726c:	ldrd	r2, [r1]
   17270:	strd	r2, [r4]
   17274:	mov	r3, #0
   17278:	str	r3, [r1]
   1727c:	ldr	r3, [r6, #36]	; 0x24
   17280:	str	r3, [r1, #4]
   17284:	str	r1, [r6, #36]	; 0x24
   17288:	b	17238 <__assert_fail@plt+0x5e24>
   1728c:	ldr	r2, [r3, #4]
   17290:	str	r2, [r4, #4]
   17294:	mov	r2, #0
   17298:	str	r2, [r3]
   1729c:	ldr	r2, [r6, #36]	; 0x24
   172a0:	str	r2, [r3, #4]
   172a4:	str	r3, [r6, #36]	; 0x24
   172a8:	b	17238 <__assert_fail@plt+0x5e24>
   172ac:	ldr	r0, [r0, #8]
   172b0:	bx	lr
   172b4:	ldr	r0, [r0, #12]
   172b8:	bx	lr
   172bc:	ldr	r0, [r0, #16]
   172c0:	bx	lr
   172c4:	ldr	r2, [r0]
   172c8:	ldr	r3, [r0, #4]
   172cc:	cmp	r2, r3
   172d0:	bcs	17340 <__assert_fail@plt+0x5f2c>
   172d4:	add	r1, r2, #8
   172d8:	sub	ip, r3, #1
   172dc:	sub	ip, ip, r2
   172e0:	bic	ip, ip, #7
   172e4:	add	r2, r2, #16
   172e8:	add	ip, ip, r2
   172ec:	mov	r0, #0
   172f0:	b	1730c <__assert_fail@plt+0x5ef8>
   172f4:	mov	r2, #1
   172f8:	cmp	r0, r2
   172fc:	movcc	r0, r2
   17300:	add	r1, r1, #8
   17304:	cmp	r1, ip
   17308:	beq	1733c <__assert_fail@plt+0x5f28>
   1730c:	ldr	r3, [r1, #-8]
   17310:	cmp	r3, #0
   17314:	beq	17300 <__assert_fail@plt+0x5eec>
   17318:	ldr	r3, [r1, #-4]
   1731c:	cmp	r3, #0
   17320:	beq	172f4 <__assert_fail@plt+0x5ee0>
   17324:	mov	r2, #1
   17328:	add	r2, r2, #1
   1732c:	ldr	r3, [r3, #4]
   17330:	cmp	r3, #0
   17334:	bne	17328 <__assert_fail@plt+0x5f14>
   17338:	b	172f8 <__assert_fail@plt+0x5ee4>
   1733c:	bx	lr
   17340:	mov	r0, #0
   17344:	bx	lr
   17348:	push	{lr}		; (str lr, [sp, #-4]!)
   1734c:	ldr	r2, [r0]
   17350:	ldr	r3, [r0, #4]
   17354:	cmp	r2, r3
   17358:	bcs	173c0 <__assert_fail@plt+0x5fac>
   1735c:	add	r1, r2, #8
   17360:	sub	ip, r3, #1
   17364:	sub	ip, ip, r2
   17368:	bic	ip, ip, #7
   1736c:	add	r2, r2, #16
   17370:	add	ip, ip, r2
   17374:	mov	r2, #0
   17378:	mov	lr, r2
   1737c:	b	1738c <__assert_fail@plt+0x5f78>
   17380:	add	r1, r1, #8
   17384:	cmp	r1, ip
   17388:	beq	173c8 <__assert_fail@plt+0x5fb4>
   1738c:	ldr	r3, [r1, #-8]
   17390:	cmp	r3, #0
   17394:	beq	17380 <__assert_fail@plt+0x5f6c>
   17398:	add	lr, lr, #1
   1739c:	add	r2, r2, #1
   173a0:	ldr	r3, [r1, #-4]
   173a4:	cmp	r3, #0
   173a8:	beq	17380 <__assert_fail@plt+0x5f6c>
   173ac:	add	r2, r2, #1
   173b0:	ldr	r3, [r3, #4]
   173b4:	cmp	r3, #0
   173b8:	bne	173ac <__assert_fail@plt+0x5f98>
   173bc:	b	17380 <__assert_fail@plt+0x5f6c>
   173c0:	mov	r2, #0
   173c4:	mov	lr, r2
   173c8:	ldr	r3, [r0, #12]
   173cc:	cmp	r3, lr
   173d0:	movne	r0, #0
   173d4:	beq	173dc <__assert_fail@plt+0x5fc8>
   173d8:	pop	{pc}		; (ldr pc, [sp], #4)
   173dc:	ldr	r0, [r0, #16]
   173e0:	cmp	r0, r2
   173e4:	movne	r0, #0
   173e8:	moveq	r0, #1
   173ec:	b	173d8 <__assert_fail@plt+0x5fc4>
   173f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   173f4:	strd	r6, [sp, #8]
   173f8:	str	r8, [sp, #16]
   173fc:	str	lr, [sp, #20]
   17400:	sub	sp, sp, #8
   17404:	mov	r6, r0
   17408:	mov	r4, r1
   1740c:	ldr	r5, [r0, #8]
   17410:	ldr	r7, [r0, #12]
   17414:	bl	172c4 <__assert_fail@plt+0x5eb0>
   17418:	mov	r8, r0
   1741c:	ldr	r3, [r6, #16]
   17420:	movw	r2, #55120	; 0xd750
   17424:	movt	r2, #1
   17428:	mov	r1, #1
   1742c:	mov	r0, r4
   17430:	bl	11324 <__fprintf_chk@plt>
   17434:	mov	r3, r5
   17438:	movw	r2, #55144	; 0xd768
   1743c:	movt	r2, #1
   17440:	mov	r1, #1
   17444:	mov	r0, r4
   17448:	bl	11324 <__fprintf_chk@plt>
   1744c:	vmov	s15, r7
   17450:	vcvt.f64.u32	d6, s15
   17454:	vldr	d7, [pc, #92]	; 174b8 <__assert_fail@plt+0x60a4>
   17458:	vmul.f64	d6, d6, d7
   1745c:	vmov	s15, r5
   17460:	vcvt.f64.u32	d7, s15
   17464:	vdiv.f64	d5, d6, d7
   17468:	vstr	d5, [sp]
   1746c:	mov	r3, r7
   17470:	movw	r2, #55168	; 0xd780
   17474:	movt	r2, #1
   17478:	mov	r1, #1
   1747c:	mov	r0, r4
   17480:	bl	11324 <__fprintf_chk@plt>
   17484:	mov	r3, r8
   17488:	movw	r2, #55204	; 0xd7a4
   1748c:	movt	r2, #1
   17490:	mov	r1, #1
   17494:	mov	r0, r4
   17498:	bl	11324 <__fprintf_chk@plt>
   1749c:	add	sp, sp, #8
   174a0:	ldrd	r4, [sp]
   174a4:	ldrd	r6, [sp, #8]
   174a8:	ldr	r8, [sp, #16]
   174ac:	add	sp, sp, #20
   174b0:	pop	{pc}		; (ldr pc, [sp], #4)
   174b4:	nop	{0}
   174b8:	andeq	r0, r0, r0
   174bc:	subsmi	r0, r9, r0
   174c0:	strd	r4, [sp, #-16]!
   174c4:	str	r6, [sp, #8]
   174c8:	str	lr, [sp, #12]
   174cc:	mov	r6, r0
   174d0:	mov	r5, r1
   174d4:	bl	16fc4 <__assert_fail@plt+0x5bb0>
   174d8:	ldr	r1, [r0]
   174dc:	cmp	r1, #0
   174e0:	beq	17534 <__assert_fail@plt+0x6120>
   174e4:	mov	r4, r0
   174e8:	cmp	r1, r5
   174ec:	beq	1751c <__assert_fail@plt+0x6108>
   174f0:	ldr	r3, [r6, #28]
   174f4:	mov	r0, r5
   174f8:	blx	r3
   174fc:	cmp	r0, #0
   17500:	bne	1751c <__assert_fail@plt+0x6108>
   17504:	ldr	r4, [r4, #4]
   17508:	cmp	r4, #0
   1750c:	beq	17520 <__assert_fail@plt+0x610c>
   17510:	ldr	r1, [r4]
   17514:	cmp	r1, r5
   17518:	bne	174f0 <__assert_fail@plt+0x60dc>
   1751c:	ldr	r4, [r4]
   17520:	mov	r0, r4
   17524:	ldrd	r4, [sp]
   17528:	ldr	r6, [sp, #8]
   1752c:	add	sp, sp, #12
   17530:	pop	{pc}		; (ldr pc, [sp], #4)
   17534:	mov	r4, r1
   17538:	b	17520 <__assert_fail@plt+0x610c>
   1753c:	ldr	r3, [r0, #16]
   17540:	cmp	r3, #0
   17544:	beq	1759c <__assert_fail@plt+0x6188>
   17548:	ldr	r2, [r0]
   1754c:	ldr	r1, [r0, #4]
   17550:	cmp	r2, r1
   17554:	bcs	17590 <__assert_fail@plt+0x617c>
   17558:	ldr	r0, [r2]
   1755c:	cmp	r0, #0
   17560:	bxne	lr
   17564:	mov	r3, r2
   17568:	sub	r1, r1, #1
   1756c:	sub	r1, r1, r2
   17570:	bic	r1, r1, #7
   17574:	add	r2, r2, r1
   17578:	cmp	r3, r2
   1757c:	beq	17590 <__assert_fail@plt+0x617c>
   17580:	ldr	r0, [r3, #8]!
   17584:	cmp	r0, #0
   17588:	beq	17578 <__assert_fail@plt+0x6164>
   1758c:	bx	lr
   17590:	str	r4, [sp, #-8]!
   17594:	str	lr, [sp, #4]
   17598:	bl	113f0 <abort@plt>
   1759c:	mov	r0, #0
   175a0:	bx	lr
   175a4:	strd	r4, [sp, #-16]!
   175a8:	str	r6, [sp, #8]
   175ac:	str	lr, [sp, #12]
   175b0:	mov	r5, r0
   175b4:	mov	r4, r1
   175b8:	bl	16fc4 <__assert_fail@plt+0x5bb0>
   175bc:	mov	r2, r0
   175c0:	mov	r3, r0
   175c4:	b	175d4 <__assert_fail@plt+0x61c0>
   175c8:	ldr	r3, [r3, #4]
   175cc:	cmp	r3, #0
   175d0:	beq	175f0 <__assert_fail@plt+0x61dc>
   175d4:	ldr	r1, [r3]
   175d8:	cmp	r1, r4
   175dc:	bne	175c8 <__assert_fail@plt+0x61b4>
   175e0:	ldr	r3, [r3, #4]
   175e4:	cmp	r3, #0
   175e8:	ldrne	r0, [r3]
   175ec:	bne	17614 <__assert_fail@plt+0x6200>
   175f0:	ldr	r3, [r5, #4]
   175f4:	add	r2, r2, #8
   175f8:	cmp	r3, r2
   175fc:	bls	17610 <__assert_fail@plt+0x61fc>
   17600:	ldr	r0, [r2]
   17604:	cmp	r0, #0
   17608:	beq	175f4 <__assert_fail@plt+0x61e0>
   1760c:	b	17614 <__assert_fail@plt+0x6200>
   17610:	mov	r0, #0
   17614:	ldrd	r4, [sp]
   17618:	ldr	r6, [sp, #8]
   1761c:	add	sp, sp, #12
   17620:	pop	{pc}		; (ldr pc, [sp], #4)
   17624:	strd	r4, [sp, #-12]!
   17628:	str	lr, [sp, #8]
   1762c:	ldr	r4, [r0]
   17630:	ldr	r3, [r0, #4]
   17634:	cmp	r4, r3
   17638:	bcs	176a0 <__assert_fail@plt+0x628c>
   1763c:	mov	r5, r0
   17640:	mov	r0, #0
   17644:	b	17658 <__assert_fail@plt+0x6244>
   17648:	add	r4, r4, #8
   1764c:	ldr	r3, [r5, #4]
   17650:	cmp	r3, r4
   17654:	bls	17694 <__assert_fail@plt+0x6280>
   17658:	ldr	r3, [r4]
   1765c:	cmp	r3, #0
   17660:	beq	17648 <__assert_fail@plt+0x6234>
   17664:	cmp	r2, r0
   17668:	bls	17694 <__assert_fail@plt+0x6280>
   1766c:	add	ip, r1, r0, lsl #2
   17670:	mov	r3, r4
   17674:	add	r0, r0, #1
   17678:	ldr	lr, [r3]
   1767c:	str	lr, [ip], #4
   17680:	ldr	r3, [r3, #4]
   17684:	cmp	r3, #0
   17688:	beq	17648 <__assert_fail@plt+0x6234>
   1768c:	cmp	r2, r0
   17690:	bne	17674 <__assert_fail@plt+0x6260>
   17694:	ldrd	r4, [sp]
   17698:	add	sp, sp, #8
   1769c:	pop	{pc}		; (ldr pc, [sp], #4)
   176a0:	mov	r0, #0
   176a4:	b	17694 <__assert_fail@plt+0x6280>
   176a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   176ac:	strd	r6, [sp, #8]
   176b0:	strd	r8, [sp, #16]
   176b4:	str	sl, [sp, #24]
   176b8:	str	lr, [sp, #28]
   176bc:	ldr	r8, [r0]
   176c0:	ldr	r3, [r0, #4]
   176c4:	cmp	r8, r3
   176c8:	bcs	17728 <__assert_fail@plt+0x6314>
   176cc:	mov	r7, r2
   176d0:	mov	r6, r1
   176d4:	mov	r9, r0
   176d8:	mov	r5, #0
   176dc:	b	176f0 <__assert_fail@plt+0x62dc>
   176e0:	add	r8, r8, #8
   176e4:	ldr	r3, [r9, #4]
   176e8:	cmp	r3, r8
   176ec:	bls	1772c <__assert_fail@plt+0x6318>
   176f0:	ldr	r3, [r8]
   176f4:	cmp	r3, #0
   176f8:	beq	176e0 <__assert_fail@plt+0x62cc>
   176fc:	mov	r4, r8
   17700:	mov	r1, r7
   17704:	ldr	r0, [r4]
   17708:	blx	r6
   1770c:	cmp	r0, #0
   17710:	beq	1772c <__assert_fail@plt+0x6318>
   17714:	add	r5, r5, #1
   17718:	ldr	r4, [r4, #4]
   1771c:	cmp	r4, #0
   17720:	bne	17700 <__assert_fail@plt+0x62ec>
   17724:	b	176e0 <__assert_fail@plt+0x62cc>
   17728:	mov	r5, #0
   1772c:	mov	r0, r5
   17730:	ldrd	r4, [sp]
   17734:	ldrd	r6, [sp, #8]
   17738:	ldrd	r8, [sp, #16]
   1773c:	ldr	sl, [sp, #24]
   17740:	add	sp, sp, #28
   17744:	pop	{pc}		; (ldr pc, [sp], #4)
   17748:	ldrb	r2, [r0]
   1774c:	cmp	r2, #0
   17750:	beq	1777c <__assert_fail@plt+0x6368>
   17754:	mov	r3, #0
   17758:	rsb	r3, r3, r3, lsl #5
   1775c:	add	r3, r3, r2
   17760:	udiv	r2, r3, r1
   17764:	mls	r3, r1, r2, r3
   17768:	ldrb	r2, [r0, #1]!
   1776c:	cmp	r2, #0
   17770:	bne	17758 <__assert_fail@plt+0x6344>
   17774:	mov	r0, r3
   17778:	bx	lr
   1777c:	mov	r3, #0
   17780:	b	17774 <__assert_fail@plt+0x6360>
   17784:	strd	r4, [sp, #-8]!
   17788:	movw	r3, #55100	; 0xd73c
   1778c:	movt	r3, #1
   17790:	ldrd	r4, [r3]
   17794:	strd	r4, [r0]
   17798:	ldrd	r4, [r3, #8]
   1779c:	strd	r4, [r0, #8]
   177a0:	ldr	r3, [r3, #16]
   177a4:	str	r3, [r0, #16]
   177a8:	ldrd	r4, [sp]
   177ac:	add	sp, sp, #8
   177b0:	bx	lr
   177b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   177b8:	strd	r6, [sp, #8]
   177bc:	str	r8, [sp, #16]
   177c0:	str	lr, [sp, #20]
   177c4:	mov	r8, r0
   177c8:	mov	r5, r1
   177cc:	subs	r7, r2, #0
   177d0:	movw	r2, #28120	; 0x6dd8
   177d4:	movt	r2, #1
   177d8:	cmp	r7, #0
   177dc:	moveq	r7, r2
   177e0:	subs	r6, r3, #0
   177e4:	movw	r3, #28136	; 0x6de8
   177e8:	movt	r3, #1
   177ec:	cmp	r6, #0
   177f0:	moveq	r6, r3
   177f4:	mov	r0, #40	; 0x28
   177f8:	bl	1b88c <__assert_fail@plt+0xa478>
   177fc:	subs	r4, r0, #0
   17800:	beq	17880 <__assert_fail@plt+0x646c>
   17804:	movw	r3, #55100	; 0xd73c
   17808:	movt	r3, #1
   1780c:	cmp	r5, #0
   17810:	moveq	r5, r3
   17814:	str	r5, [r4, #20]
   17818:	mov	r0, r4
   1781c:	bl	16df8 <__assert_fail@plt+0x59e4>
   17820:	cmp	r0, #0
   17824:	beq	17898 <__assert_fail@plt+0x6484>
   17828:	mov	r1, r5
   1782c:	mov	r0, r8
   17830:	bl	16ebc <__assert_fail@plt+0x5aa8>
   17834:	str	r0, [r4, #8]
   17838:	cmp	r0, #0
   1783c:	beq	17898 <__assert_fail@plt+0x6484>
   17840:	mov	r1, #8
   17844:	bl	1b818 <__assert_fail@plt+0xa404>
   17848:	str	r0, [r4]
   1784c:	cmp	r0, #0
   17850:	beq	17898 <__assert_fail@plt+0x6484>
   17854:	ldr	r3, [r4, #8]
   17858:	add	r0, r0, r3, lsl #3
   1785c:	str	r0, [r4, #4]
   17860:	mov	r3, #0
   17864:	str	r3, [r4, #12]
   17868:	str	r3, [r4, #16]
   1786c:	str	r7, [r4, #24]
   17870:	str	r6, [r4, #28]
   17874:	ldr	r2, [sp, #24]
   17878:	str	r2, [r4, #32]
   1787c:	str	r3, [r4, #36]	; 0x24
   17880:	mov	r0, r4
   17884:	ldrd	r4, [sp]
   17888:	ldrd	r6, [sp, #8]
   1788c:	ldr	r8, [sp, #16]
   17890:	add	sp, sp, #20
   17894:	pop	{pc}		; (ldr pc, [sp], #4)
   17898:	mov	r0, r4
   1789c:	bl	16d78 <__assert_fail@plt+0x5964>
   178a0:	mov	r4, #0
   178a4:	b	17880 <__assert_fail@plt+0x646c>
   178a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   178ac:	strd	r6, [sp, #8]
   178b0:	str	r8, [sp, #16]
   178b4:	str	lr, [sp, #20]
   178b8:	mov	r5, r0
   178bc:	ldr	r6, [r0]
   178c0:	ldr	r3, [r0, #4]
   178c4:	cmp	r6, r3
   178c8:	bcs	17960 <__assert_fail@plt+0x654c>
   178cc:	add	r6, r6, #8
   178d0:	mov	r7, #0
   178d4:	b	17940 <__assert_fail@plt+0x652c>
   178d8:	str	r7, [r4]
   178dc:	ldr	r3, [r4, #4]
   178e0:	ldr	r2, [r5, #36]	; 0x24
   178e4:	str	r2, [r4, #4]
   178e8:	str	r4, [r5, #36]	; 0x24
   178ec:	mov	r4, r3
   178f0:	cmp	r3, #0
   178f4:	beq	17910 <__assert_fail@plt+0x64fc>
   178f8:	ldr	r3, [r5, #32]
   178fc:	cmp	r3, #0
   17900:	beq	178d8 <__assert_fail@plt+0x64c4>
   17904:	ldr	r0, [r4]
   17908:	blx	r3
   1790c:	b	178d8 <__assert_fail@plt+0x64c4>
   17910:	ldr	r3, [r5, #32]
   17914:	cmp	r3, #0
   17918:	beq	17924 <__assert_fail@plt+0x6510>
   1791c:	ldr	r0, [r8, #-8]
   17920:	blx	r3
   17924:	str	r7, [r8, #-8]
   17928:	str	r7, [r8, #-4]
   1792c:	add	r2, r6, #8
   17930:	ldr	r3, [r5, #4]
   17934:	cmp	r3, r6
   17938:	bls	17960 <__assert_fail@plt+0x654c>
   1793c:	mov	r6, r2
   17940:	mov	r8, r6
   17944:	ldr	r3, [r6, #-8]
   17948:	cmp	r3, #0
   1794c:	beq	1792c <__assert_fail@plt+0x6518>
   17950:	ldr	r4, [r6, #-4]
   17954:	cmp	r4, #0
   17958:	bne	178f8 <__assert_fail@plt+0x64e4>
   1795c:	b	17910 <__assert_fail@plt+0x64fc>
   17960:	mov	r3, #0
   17964:	str	r3, [r5, #12]
   17968:	str	r3, [r5, #16]
   1796c:	ldrd	r4, [sp]
   17970:	ldrd	r6, [sp, #8]
   17974:	ldr	r8, [sp, #16]
   17978:	add	sp, sp, #20
   1797c:	pop	{pc}		; (ldr pc, [sp], #4)
   17980:	strd	r4, [sp, #-16]!
   17984:	str	r6, [sp, #8]
   17988:	str	lr, [sp, #12]
   1798c:	mov	r6, r0
   17990:	ldr	r3, [r0, #32]
   17994:	cmp	r3, #0
   17998:	beq	179f8 <__assert_fail@plt+0x65e4>
   1799c:	ldr	r3, [r0, #16]
   179a0:	cmp	r3, #0
   179a4:	beq	179f8 <__assert_fail@plt+0x65e4>
   179a8:	ldr	r5, [r0]
   179ac:	ldr	r3, [r0, #4]
   179b0:	cmp	r5, r3
   179b4:	bcc	179cc <__assert_fail@plt+0x65b8>
   179b8:	b	17a08 <__assert_fail@plt+0x65f4>
   179bc:	add	r5, r5, #8
   179c0:	ldr	r3, [r6, #4]
   179c4:	cmp	r3, r5
   179c8:	bls	179f8 <__assert_fail@plt+0x65e4>
   179cc:	ldr	r3, [r5]
   179d0:	cmp	r3, #0
   179d4:	beq	179bc <__assert_fail@plt+0x65a8>
   179d8:	mov	r4, r5
   179dc:	ldr	r3, [r6, #32]
   179e0:	ldr	r0, [r4]
   179e4:	blx	r3
   179e8:	ldr	r4, [r4, #4]
   179ec:	cmp	r4, #0
   179f0:	bne	179dc <__assert_fail@plt+0x65c8>
   179f4:	b	179bc <__assert_fail@plt+0x65a8>
   179f8:	ldr	r5, [r6]
   179fc:	ldr	r3, [r6, #4]
   17a00:	cmp	r5, r3
   17a04:	bcc	17a58 <__assert_fail@plt+0x6644>
   17a08:	ldr	r0, [r6, #36]	; 0x24
   17a0c:	cmp	r0, #0
   17a10:	beq	17a28 <__assert_fail@plt+0x6614>
   17a14:	ldr	r4, [r0, #4]
   17a18:	bl	16d78 <__assert_fail@plt+0x5964>
   17a1c:	mov	r0, r4
   17a20:	cmp	r4, #0
   17a24:	bne	17a14 <__assert_fail@plt+0x6600>
   17a28:	ldr	r0, [r6]
   17a2c:	bl	16d78 <__assert_fail@plt+0x5964>
   17a30:	mov	r0, r6
   17a34:	bl	16d78 <__assert_fail@plt+0x5964>
   17a38:	ldrd	r4, [sp]
   17a3c:	ldr	r6, [sp, #8]
   17a40:	add	sp, sp, #12
   17a44:	pop	{pc}		; (ldr pc, [sp], #4)
   17a48:	add	r5, r5, #8
   17a4c:	ldr	r3, [r6, #4]
   17a50:	cmp	r3, r5
   17a54:	bls	17a08 <__assert_fail@plt+0x65f4>
   17a58:	ldr	r0, [r5, #4]
   17a5c:	cmp	r0, #0
   17a60:	beq	17a48 <__assert_fail@plt+0x6634>
   17a64:	ldr	r4, [r0, #4]
   17a68:	bl	16d78 <__assert_fail@plt+0x5964>
   17a6c:	mov	r0, r4
   17a70:	cmp	r4, #0
   17a74:	bne	17a64 <__assert_fail@plt+0x6650>
   17a78:	b	17a48 <__assert_fail@plt+0x6634>
   17a7c:	strd	r4, [sp, #-12]!
   17a80:	str	lr, [sp, #8]
   17a84:	sub	sp, sp, #44	; 0x2c
   17a88:	mov	r4, r0
   17a8c:	mov	r0, r1
   17a90:	ldr	r1, [r4, #20]
   17a94:	bl	16ebc <__assert_fail@plt+0x5aa8>
   17a98:	subs	r5, r0, #0
   17a9c:	beq	17b94 <__assert_fail@plt+0x6780>
   17aa0:	ldr	r3, [r4, #8]
   17aa4:	cmp	r3, r5
   17aa8:	beq	17bac <__assert_fail@plt+0x6798>
   17aac:	mov	r1, #8
   17ab0:	mov	r0, r5
   17ab4:	bl	1b818 <__assert_fail@plt+0xa404>
   17ab8:	str	r0, [sp]
   17abc:	cmp	r0, #0
   17ac0:	beq	17bb4 <__assert_fail@plt+0x67a0>
   17ac4:	str	r5, [sp, #8]
   17ac8:	add	r0, r0, r5, lsl #3
   17acc:	str	r0, [sp, #4]
   17ad0:	mov	r2, #0
   17ad4:	str	r2, [sp, #12]
   17ad8:	str	r2, [sp, #16]
   17adc:	ldr	r3, [r4, #20]
   17ae0:	str	r3, [sp, #20]
   17ae4:	ldr	r3, [r4, #24]
   17ae8:	str	r3, [sp, #24]
   17aec:	ldr	r3, [r4, #28]
   17af0:	str	r3, [sp, #28]
   17af4:	ldr	r3, [r4, #32]
   17af8:	str	r3, [sp, #32]
   17afc:	ldr	r3, [r4, #36]	; 0x24
   17b00:	str	r3, [sp, #36]	; 0x24
   17b04:	mov	r1, r4
   17b08:	mov	r0, sp
   17b0c:	bl	17004 <__assert_fail@plt+0x5bf0>
   17b10:	subs	r5, r0, #0
   17b14:	bne	17b5c <__assert_fail@plt+0x6748>
   17b18:	ldr	r3, [sp, #36]	; 0x24
   17b1c:	str	r3, [r4, #36]	; 0x24
   17b20:	mov	r2, #1
   17b24:	mov	r1, sp
   17b28:	mov	r0, r4
   17b2c:	bl	17004 <__assert_fail@plt+0x5bf0>
   17b30:	cmp	r0, #0
   17b34:	beq	17b90 <__assert_fail@plt+0x677c>
   17b38:	mov	r2, #0
   17b3c:	mov	r1, sp
   17b40:	mov	r0, r4
   17b44:	bl	17004 <__assert_fail@plt+0x5bf0>
   17b48:	cmp	r0, #0
   17b4c:	beq	17b90 <__assert_fail@plt+0x677c>
   17b50:	ldr	r0, [sp]
   17b54:	bl	16d78 <__assert_fail@plt+0x5964>
   17b58:	b	17b98 <__assert_fail@plt+0x6784>
   17b5c:	ldr	r0, [r4]
   17b60:	bl	16d78 <__assert_fail@plt+0x5964>
   17b64:	ldr	r3, [sp]
   17b68:	str	r3, [r4]
   17b6c:	ldr	r3, [sp, #4]
   17b70:	str	r3, [r4, #4]
   17b74:	ldr	r3, [sp, #8]
   17b78:	str	r3, [r4, #8]
   17b7c:	ldr	r3, [sp, #12]
   17b80:	str	r3, [r4, #12]
   17b84:	ldr	r3, [sp, #36]	; 0x24
   17b88:	str	r3, [r4, #36]	; 0x24
   17b8c:	b	17b98 <__assert_fail@plt+0x6784>
   17b90:	bl	113f0 <abort@plt>
   17b94:	mov	r5, #0
   17b98:	mov	r0, r5
   17b9c:	add	sp, sp, #44	; 0x2c
   17ba0:	ldrd	r4, [sp]
   17ba4:	add	sp, sp, #8
   17ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bac:	mov	r5, #1
   17bb0:	b	17b98 <__assert_fail@plt+0x6784>
   17bb4:	mov	r5, #0
   17bb8:	b	17b98 <__assert_fail@plt+0x6784>
   17bbc:	strd	r4, [sp, #-16]!
   17bc0:	str	r6, [sp, #8]
   17bc4:	str	lr, [sp, #12]
   17bc8:	sub	sp, sp, #8
   17bcc:	subs	r5, r1, #0
   17bd0:	beq	17c1c <__assert_fail@plt+0x6808>
   17bd4:	mov	r4, r0
   17bd8:	mov	r6, r2
   17bdc:	mov	r3, #0
   17be0:	add	r2, sp, #4
   17be4:	mov	r1, r5
   17be8:	bl	17188 <__assert_fail@plt+0x5d74>
   17bec:	cmp	r0, #0
   17bf0:	beq	17c20 <__assert_fail@plt+0x680c>
   17bf4:	cmp	r6, #0
   17bf8:	moveq	r0, #0
   17bfc:	beq	17c08 <__assert_fail@plt+0x67f4>
   17c00:	str	r0, [r6]
   17c04:	mov	r0, #0
   17c08:	add	sp, sp, #8
   17c0c:	ldrd	r4, [sp]
   17c10:	ldr	r6, [sp, #8]
   17c14:	add	sp, sp, #12
   17c18:	pop	{pc}		; (ldr pc, [sp], #4)
   17c1c:	bl	113f0 <abort@plt>
   17c20:	vldr	s15, [r4, #12]
   17c24:	vcvt.f32.u32	s14, s15
   17c28:	ldr	r3, [r4, #20]
   17c2c:	vldr	s15, [r4, #8]
   17c30:	vcvt.f32.u32	s15, s15
   17c34:	vldr	s13, [r3, #8]
   17c38:	vmul.f32	s15, s15, s13
   17c3c:	vcmpe.f32	s14, s15
   17c40:	vmrs	APSR_nzcv, fpscr
   17c44:	bgt	17c94 <__assert_fail@plt+0x6880>
   17c48:	ldr	r3, [sp, #4]
   17c4c:	ldr	r2, [r3]
   17c50:	cmp	r2, #0
   17c54:	beq	17d40 <__assert_fail@plt+0x692c>
   17c58:	ldr	r0, [r4, #36]	; 0x24
   17c5c:	cmp	r0, #0
   17c60:	beq	17d28 <__assert_fail@plt+0x6914>
   17c64:	ldr	r3, [r0, #4]
   17c68:	str	r3, [r4, #36]	; 0x24
   17c6c:	str	r5, [r0]
   17c70:	ldr	r3, [sp, #4]
   17c74:	ldr	r2, [r3, #4]
   17c78:	str	r2, [r0, #4]
   17c7c:	str	r0, [r3, #4]
   17c80:	ldr	r3, [r4, #16]
   17c84:	add	r3, r3, #1
   17c88:	str	r3, [r4, #16]
   17c8c:	mov	r0, #1
   17c90:	b	17c08 <__assert_fail@plt+0x67f4>
   17c94:	mov	r0, r4
   17c98:	bl	16df8 <__assert_fail@plt+0x59e4>
   17c9c:	ldr	r3, [r4, #20]
   17ca0:	vldr	s13, [r3, #8]
   17ca4:	vldr	s15, [r4, #8]
   17ca8:	vcvt.f32.u32	s15, s15
   17cac:	vldr	s14, [r4, #12]
   17cb0:	vcvt.f32.u32	s14, s14
   17cb4:	vmul.f32	s12, s13, s15
   17cb8:	vcmpe.f32	s14, s12
   17cbc:	vmrs	APSR_nzcv, fpscr
   17cc0:	ble	17c48 <__assert_fail@plt+0x6834>
   17cc4:	ldrb	r2, [r3, #16]
   17cc8:	cmp	r2, #0
   17ccc:	vldr	s14, [r3, #12]
   17cd0:	vmul.f32	s15, s15, s14
   17cd4:	vmuleq.f32	s15, s15, s13
   17cd8:	vldr	s14, [pc, #132]	; 17d64 <__assert_fail@plt+0x6950>
   17cdc:	vcmpe.f32	s15, s14
   17ce0:	vmrs	APSR_nzcv, fpscr
   17ce4:	mvnge	r0, #0
   17ce8:	bge	17c08 <__assert_fail@plt+0x67f4>
   17cec:	vcvt.u32.f32	s15, s15
   17cf0:	vmov	r1, s15
   17cf4:	mov	r0, r4
   17cf8:	bl	17a7c <__assert_fail@plt+0x6668>
   17cfc:	cmp	r0, #0
   17d00:	mvneq	r0, #0
   17d04:	beq	17c08 <__assert_fail@plt+0x67f4>
   17d08:	mov	r3, #0
   17d0c:	add	r2, sp, #4
   17d10:	mov	r1, r5
   17d14:	mov	r0, r4
   17d18:	bl	17188 <__assert_fail@plt+0x5d74>
   17d1c:	cmp	r0, #0
   17d20:	beq	17c48 <__assert_fail@plt+0x6834>
   17d24:	bl	113f0 <abort@plt>
   17d28:	mov	r0, #8
   17d2c:	bl	1b88c <__assert_fail@plt+0xa478>
   17d30:	cmp	r0, #0
   17d34:	mvneq	r0, #0
   17d38:	beq	17c08 <__assert_fail@plt+0x67f4>
   17d3c:	b	17c6c <__assert_fail@plt+0x6858>
   17d40:	str	r5, [r3]
   17d44:	ldr	r3, [r4, #16]
   17d48:	add	r3, r3, #1
   17d4c:	str	r3, [r4, #16]
   17d50:	ldr	r3, [r4, #12]
   17d54:	add	r3, r3, #1
   17d58:	str	r3, [r4, #12]
   17d5c:	mov	r0, #1
   17d60:	b	17c08 <__assert_fail@plt+0x67f4>
   17d64:	svcmi	0x00800000
   17d68:	str	r4, [sp, #-8]!
   17d6c:	str	lr, [sp, #4]
   17d70:	sub	sp, sp, #8
   17d74:	mov	r4, r1
   17d78:	add	r2, sp, #4
   17d7c:	bl	17bbc <__assert_fail@plt+0x67a8>
   17d80:	cmn	r0, #1
   17d84:	moveq	r0, #0
   17d88:	beq	17d98 <__assert_fail@plt+0x6984>
   17d8c:	cmp	r0, #0
   17d90:	ldreq	r0, [sp, #4]
   17d94:	movne	r0, r4
   17d98:	add	sp, sp, #8
   17d9c:	ldr	r4, [sp]
   17da0:	add	sp, sp, #4
   17da4:	pop	{pc}		; (ldr pc, [sp], #4)
   17da8:	strd	r4, [sp, #-16]!
   17dac:	str	r6, [sp, #8]
   17db0:	str	lr, [sp, #12]
   17db4:	sub	sp, sp, #8
   17db8:	mov	r4, r0
   17dbc:	mov	r3, #1
   17dc0:	add	r2, sp, #4
   17dc4:	bl	17188 <__assert_fail@plt+0x5d74>
   17dc8:	subs	r5, r0, #0
   17dcc:	beq	17dec <__assert_fail@plt+0x69d8>
   17dd0:	ldr	r3, [r4, #16]
   17dd4:	sub	r3, r3, #1
   17dd8:	str	r3, [r4, #16]
   17ddc:	ldr	r3, [sp, #4]
   17de0:	ldr	r3, [r3]
   17de4:	cmp	r3, #0
   17de8:	beq	17e04 <__assert_fail@plt+0x69f0>
   17dec:	mov	r0, r5
   17df0:	add	sp, sp, #8
   17df4:	ldrd	r4, [sp]
   17df8:	ldr	r6, [sp, #8]
   17dfc:	add	sp, sp, #12
   17e00:	pop	{pc}		; (ldr pc, [sp], #4)
   17e04:	ldr	r3, [r4, #12]
   17e08:	sub	r3, r3, #1
   17e0c:	str	r3, [r4, #12]
   17e10:	vmov	s15, r3
   17e14:	vcvt.f32.u32	s15, s15
   17e18:	ldr	r3, [r4, #20]
   17e1c:	vldr	s14, [r4, #8]
   17e20:	vcvt.f32.u32	s14, s14
   17e24:	vldr	s13, [r3]
   17e28:	vmul.f32	s14, s14, s13
   17e2c:	vcmpe.f32	s15, s14
   17e30:	vmrs	APSR_nzcv, fpscr
   17e34:	bpl	17dec <__assert_fail@plt+0x69d8>
   17e38:	mov	r0, r4
   17e3c:	bl	16df8 <__assert_fail@plt+0x59e4>
   17e40:	ldr	r3, [r4, #20]
   17e44:	vldr	s15, [r4, #8]
   17e48:	vcvt.f32.u32	s15, s15
   17e4c:	vldr	s14, [r4, #12]
   17e50:	vcvt.f32.u32	s13, s14
   17e54:	vldr	s14, [r3]
   17e58:	vmul.f32	s14, s15, s14
   17e5c:	vcmpe.f32	s13, s14
   17e60:	vmrs	APSR_nzcv, fpscr
   17e64:	bpl	17dec <__assert_fail@plt+0x69d8>
   17e68:	ldrb	r2, [r3, #16]
   17e6c:	cmp	r2, #0
   17e70:	vldr	s14, [r3, #4]
   17e74:	vmuleq.f32	s15, s15, s14
   17e78:	vldreq	s14, [r3, #8]
   17e7c:	vmul.f32	s15, s15, s14
   17e80:	vcvt.u32.f32	s15, s15
   17e84:	vmov	r1, s15
   17e88:	mov	r0, r4
   17e8c:	bl	17a7c <__assert_fail@plt+0x6668>
   17e90:	cmp	r0, #0
   17e94:	bne	17dec <__assert_fail@plt+0x69d8>
   17e98:	ldr	r0, [r4, #36]	; 0x24
   17e9c:	cmp	r0, #0
   17ea0:	beq	17eb8 <__assert_fail@plt+0x6aa4>
   17ea4:	ldr	r6, [r0, #4]
   17ea8:	bl	16d78 <__assert_fail@plt+0x5964>
   17eac:	mov	r0, r6
   17eb0:	cmp	r6, #0
   17eb4:	bne	17ea4 <__assert_fail@plt+0x6a90>
   17eb8:	mov	r3, #0
   17ebc:	str	r3, [r4, #36]	; 0x24
   17ec0:	b	17dec <__assert_fail@plt+0x69d8>
   17ec4:	str	r4, [sp, #-8]!
   17ec8:	str	lr, [sp, #4]
   17ecc:	bl	17da8 <__assert_fail@plt+0x6994>
   17ed0:	ldr	r4, [sp]
   17ed4:	add	sp, sp, #4
   17ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   17edc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17ee0:	strd	r6, [sp, #8]
   17ee4:	strd	r8, [sp, #16]
   17ee8:	str	sl, [sp, #24]
   17eec:	str	lr, [sp, #28]
   17ef0:	mov	r4, r0
   17ef4:	mov	r5, r1
   17ef8:	add	r6, r2, #20
   17efc:	mov	r3, #0
   17f00:	strb	r3, [r2, #20]
   17f04:	cmp	r0, #0
   17f08:	sbcs	r3, r1, #0
   17f0c:	movge	r8, #10
   17f10:	movge	r9, #0
   17f14:	movlt	r8, #10
   17f18:	movlt	r9, #0
   17f1c:	blt	17f80 <__assert_fail@plt+0x6b6c>
   17f20:	mov	r2, r8
   17f24:	mov	r3, r9
   17f28:	mov	r0, r4
   17f2c:	mov	r1, r5
   17f30:	bl	1bf58 <__assert_fail@plt+0xab44>
   17f34:	add	r2, r2, #48	; 0x30
   17f38:	strb	r2, [r6, #-1]!
   17f3c:	mov	r2, r8
   17f40:	mov	r3, r9
   17f44:	mov	r0, r4
   17f48:	mov	r1, r5
   17f4c:	bl	1bf58 <__assert_fail@plt+0xab44>
   17f50:	mov	r4, r0
   17f54:	mov	r5, r1
   17f58:	orrs	r3, r4, r5
   17f5c:	bne	17f20 <__assert_fail@plt+0x6b0c>
   17f60:	mov	r0, r6
   17f64:	ldrd	r4, [sp]
   17f68:	ldrd	r6, [sp, #8]
   17f6c:	ldrd	r8, [sp, #16]
   17f70:	ldr	sl, [sp, #24]
   17f74:	add	sp, sp, #28
   17f78:	pop	{pc}		; (ldr pc, [sp], #4)
   17f7c:	mov	r6, r7
   17f80:	sub	r7, r6, #1
   17f84:	mov	r2, r8
   17f88:	mov	r3, r9
   17f8c:	mov	r0, r4
   17f90:	mov	r1, r5
   17f94:	bl	1bf58 <__assert_fail@plt+0xab44>
   17f98:	rsb	r2, r2, #48	; 0x30
   17f9c:	strb	r2, [r6, #-1]
   17fa0:	mov	r2, r8
   17fa4:	mov	r3, r9
   17fa8:	mov	r0, r4
   17fac:	mov	r1, r5
   17fb0:	bl	1bf58 <__assert_fail@plt+0xab44>
   17fb4:	mov	r4, r0
   17fb8:	mov	r5, r1
   17fbc:	orrs	r3, r4, r5
   17fc0:	bne	17f7c <__assert_fail@plt+0x6b68>
   17fc4:	sub	r6, r6, #2
   17fc8:	mov	r3, #45	; 0x2d
   17fcc:	strb	r3, [r7, #-1]
   17fd0:	b	17f60 <__assert_fail@plt+0x6b4c>
   17fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   17fd8:	sub	sp, sp, #12
   17fdc:	movw	r0, #55228	; 0xd7bc
   17fe0:	movt	r0, #1
   17fe4:	bl	11234 <getenv@plt>
   17fe8:	cmp	r0, #0
   17fec:	beq	18038 <__assert_fail@plt+0x6c24>
   17ff0:	ldrb	r3, [r0]
   17ff4:	cmp	r3, #0
   17ff8:	movweq	r3, #4201	; 0x1069
   17ffc:	movteq	r3, #3
   18000:	bne	18010 <__assert_fail@plt+0x6bfc>
   18004:	mov	r0, r3
   18008:	add	sp, sp, #12
   1800c:	pop	{pc}		; (ldr pc, [sp], #4)
   18010:	mov	r2, #10
   18014:	add	r1, sp, #4
   18018:	bl	110d8 <strtol@plt>
   1801c:	ldr	r3, [sp, #4]
   18020:	ldrb	r2, [r3]
   18024:	cmp	r2, #0
   18028:	movw	r3, #4201	; 0x1069
   1802c:	movt	r3, #3
   18030:	moveq	r3, r0
   18034:	b	18004 <__assert_fail@plt+0x6bf0>
   18038:	movw	r3, #4201	; 0x1069
   1803c:	movt	r3, #3
   18040:	b	18004 <__assert_fail@plt+0x6bf0>
   18044:	strd	r4, [sp, #-16]!
   18048:	str	r6, [sp, #8]
   1804c:	str	lr, [sp, #12]
   18050:	subs	r4, r0, #0
   18054:	beq	180f0 <__assert_fail@plt+0x6cdc>
   18058:	mov	r1, #47	; 0x2f
   1805c:	mov	r0, r4
   18060:	bl	11384 <strrchr@plt>
   18064:	subs	r5, r0, #0
   18068:	beq	180c8 <__assert_fail@plt+0x6cb4>
   1806c:	add	r6, r5, #1
   18070:	sub	r3, r6, r4
   18074:	cmp	r3, #6
   18078:	ble	180c8 <__assert_fail@plt+0x6cb4>
   1807c:	mov	r2, #7
   18080:	movw	r1, #55300	; 0xd804
   18084:	movt	r1, #1
   18088:	sub	r0, r5, #6
   1808c:	bl	113e4 <strncmp@plt>
   18090:	cmp	r0, #0
   18094:	bne	180c8 <__assert_fail@plt+0x6cb4>
   18098:	mov	r2, #3
   1809c:	movw	r1, #55308	; 0xd80c
   180a0:	movt	r1, #1
   180a4:	mov	r0, r6
   180a8:	bl	113e4 <strncmp@plt>
   180ac:	cmp	r0, #0
   180b0:	movne	r4, r6
   180b4:	bne	180c8 <__assert_fail@plt+0x6cb4>
   180b8:	add	r4, r5, #4
   180bc:	movw	r3, #57776	; 0xe1b0
   180c0:	movt	r3, #2
   180c4:	str	r4, [r3]
   180c8:	movw	r3, #57836	; 0xe1ec
   180cc:	movt	r3, #2
   180d0:	str	r4, [r3]
   180d4:	movw	r3, #57780	; 0xe1b4
   180d8:	movt	r3, #2
   180dc:	str	r4, [r3]
   180e0:	ldrd	r4, [sp]
   180e4:	ldr	r6, [sp, #8]
   180e8:	add	sp, sp, #12
   180ec:	pop	{pc}		; (ldr pc, [sp], #4)
   180f0:	movw	r3, #57792	; 0xe1c0
   180f4:	movt	r3, #2
   180f8:	ldr	r3, [r3]
   180fc:	mov	r2, #55	; 0x37
   18100:	mov	r1, #1
   18104:	movw	r0, #55244	; 0xd7cc
   18108:	movt	r0, #1
   1810c:	bl	111e0 <fwrite@plt>
   18110:	bl	113f0 <abort@plt>
   18114:	mov	r2, #0
   18118:	mov	r3, #0
   1811c:	strd	r2, [r0]
   18120:	strd	r2, [r0, #8]
   18124:	strd	r2, [r0, #16]
   18128:	strd	r2, [r0, #24]
   1812c:	strd	r2, [r0, #32]
   18130:	strd	r2, [r0, #40]	; 0x28
   18134:	cmp	r1, #10
   18138:	beq	18144 <__assert_fail@plt+0x6d30>
   1813c:	str	r1, [r0]
   18140:	bx	lr
   18144:	str	r4, [sp, #-8]!
   18148:	str	lr, [sp, #4]
   1814c:	bl	113f0 <abort@plt>
   18150:	strd	r4, [sp, #-16]!
   18154:	str	r6, [sp, #8]
   18158:	str	lr, [sp, #12]
   1815c:	mov	r5, r0
   18160:	mov	r6, r1
   18164:	mov	r2, #5
   18168:	mov	r1, r0
   1816c:	mov	r0, #0
   18170:	bl	11174 <dcgettext@plt>
   18174:	mov	r4, r0
   18178:	cmp	r5, r0
   1817c:	beq	18194 <__assert_fail@plt+0x6d80>
   18180:	mov	r0, r4
   18184:	ldrd	r4, [sp]
   18188:	ldr	r6, [sp, #8]
   1818c:	add	sp, sp, #12
   18190:	pop	{pc}		; (ldr pc, [sp], #4)
   18194:	bl	1bd2c <__assert_fail@plt+0xa918>
   18198:	ldrb	r3, [r0]
   1819c:	bic	r3, r3, #32
   181a0:	cmp	r3, #85	; 0x55
   181a4:	bne	18228 <__assert_fail@plt+0x6e14>
   181a8:	ldrb	r3, [r0, #1]
   181ac:	bic	r3, r3, #32
   181b0:	cmp	r3, #84	; 0x54
   181b4:	bne	181ec <__assert_fail@plt+0x6dd8>
   181b8:	ldrb	r3, [r0, #2]
   181bc:	bic	r3, r3, #32
   181c0:	cmp	r3, #70	; 0x46
   181c4:	bne	181ec <__assert_fail@plt+0x6dd8>
   181c8:	ldrb	r3, [r0, #3]
   181cc:	cmp	r3, #45	; 0x2d
   181d0:	bne	181ec <__assert_fail@plt+0x6dd8>
   181d4:	ldrb	r3, [r0, #4]
   181d8:	cmp	r3, #56	; 0x38
   181dc:	bne	181ec <__assert_fail@plt+0x6dd8>
   181e0:	ldrb	r3, [r0, #5]
   181e4:	cmp	r3, #0
   181e8:	beq	18208 <__assert_fail@plt+0x6df4>
   181ec:	movw	r4, #55396	; 0xd864
   181f0:	movt	r4, #1
   181f4:	movw	r3, #55416	; 0xd878
   181f8:	movt	r3, #1
   181fc:	cmp	r6, #9
   18200:	movne	r4, r3
   18204:	b	18180 <__assert_fail@plt+0x6d6c>
   18208:	ldrb	r2, [r4]
   1820c:	movw	r4, #55412	; 0xd874
   18210:	movt	r4, #1
   18214:	movw	r3, #55400	; 0xd868
   18218:	movt	r3, #1
   1821c:	cmp	r2, #96	; 0x60
   18220:	movne	r4, r3
   18224:	b	18180 <__assert_fail@plt+0x6d6c>
   18228:	cmp	r3, #71	; 0x47
   1822c:	bne	181ec <__assert_fail@plt+0x6dd8>
   18230:	ldrb	r3, [r0, #1]
   18234:	bic	r3, r3, #32
   18238:	cmp	r3, #66	; 0x42
   1823c:	bne	181ec <__assert_fail@plt+0x6dd8>
   18240:	ldrb	r3, [r0, #2]
   18244:	cmp	r3, #49	; 0x31
   18248:	bne	181ec <__assert_fail@plt+0x6dd8>
   1824c:	ldrb	r3, [r0, #3]
   18250:	cmp	r3, #56	; 0x38
   18254:	bne	181ec <__assert_fail@plt+0x6dd8>
   18258:	ldrb	r3, [r0, #4]
   1825c:	cmp	r3, #48	; 0x30
   18260:	bne	181ec <__assert_fail@plt+0x6dd8>
   18264:	ldrb	r3, [r0, #5]
   18268:	cmp	r3, #51	; 0x33
   1826c:	bne	181ec <__assert_fail@plt+0x6dd8>
   18270:	ldrb	r3, [r0, #6]
   18274:	cmp	r3, #48	; 0x30
   18278:	bne	181ec <__assert_fail@plt+0x6dd8>
   1827c:	ldrb	r3, [r0, #7]
   18280:	cmp	r3, #0
   18284:	bne	181ec <__assert_fail@plt+0x6dd8>
   18288:	ldrb	r2, [r4]
   1828c:	movw	r4, #55408	; 0xd870
   18290:	movt	r4, #1
   18294:	movw	r3, #55404	; 0xd86c
   18298:	movt	r3, #1
   1829c:	cmp	r2, #96	; 0x60
   182a0:	movne	r4, r3
   182a4:	b	18180 <__assert_fail@plt+0x6d6c>
   182a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   182ac:	strd	r6, [sp, #8]
   182b0:	strd	r8, [sp, #16]
   182b4:	strd	sl, [sp, #24]
   182b8:	str	lr, [sp, #32]
   182bc:	sub	sp, sp, #116	; 0x74
   182c0:	str	r0, [sp, #64]	; 0x40
   182c4:	mov	r8, r1
   182c8:	str	r2, [sp, #48]	; 0x30
   182cc:	str	r3, [sp, #24]
   182d0:	ldr	r7, [sp, #152]	; 0x98
   182d4:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   182d8:	str	r0, [sp, #76]	; 0x4c
   182dc:	ldr	r3, [sp, #156]	; 0x9c
   182e0:	ubfx	r3, r3, #1, #1
   182e4:	str	r3, [sp, #32]
   182e8:	mov	r3, #1
   182ec:	str	r3, [sp, #40]	; 0x28
   182f0:	mov	r3, #0
   182f4:	str	r3, [sp, #68]	; 0x44
   182f8:	str	r3, [sp, #36]	; 0x24
   182fc:	str	r3, [sp, #28]
   18300:	str	r3, [sp, #52]	; 0x34
   18304:	str	r3, [sp, #60]	; 0x3c
   18308:	str	r3, [sp, #72]	; 0x48
   1830c:	movw	r3, #55420	; 0xd87c
   18310:	movt	r3, #1
   18314:	str	r3, [sp, #80]	; 0x50
   18318:	mov	r9, r8
   1831c:	mov	sl, r7
   18320:	cmp	sl, #10
   18324:	ldrls	pc, [pc, sl, lsl #2]
   18328:	b	184ec <__assert_fail@plt+0x70d8>
   1832c:	andeq	r8, r1, ip, lsl #7
   18330:	andeq	r8, r1, r0, ror #6
   18334:	andeq	r8, r1, r4, asr #9
   18338:	andeq	r8, r1, r8, asr r3
   1833c:	andeq	r8, r1, r8, ror r4
   18340:	muleq	r1, ip, r3
   18344:	andeq	r9, r1, r8, ror #14
   18348:	strdeq	r8, [r1], -r0
   1834c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18350:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18354:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18358:	mov	r3, #1
   1835c:	str	r3, [sp, #28]
   18360:	mov	r3, #1
   18364:	str	r3, [sp, #32]
   18368:	str	r3, [sp, #52]	; 0x34
   1836c:	movw	r3, #55416	; 0xd878
   18370:	movt	r3, #1
   18374:	str	r3, [sp, #60]	; 0x3c
   18378:	mov	fp, #0
   1837c:	mov	sl, #2
   18380:	mov	r6, #0
   18384:	ldr	r8, [sp, #64]	; 0x40
   18388:	b	18c00 <__assert_fail@plt+0x77ec>
   1838c:	mov	fp, sl
   18390:	mov	r3, #0
   18394:	str	r3, [sp, #32]
   18398:	b	18380 <__assert_fail@plt+0x6f6c>
   1839c:	ldr	r3, [sp, #32]
   183a0:	cmp	r3, #0
   183a4:	bne	18504 <__assert_fail@plt+0x70f0>
   183a8:	cmp	r9, #0
   183ac:	beq	18528 <__assert_fail@plt+0x7114>
   183b0:	mov	r3, #34	; 0x22
   183b4:	ldr	r2, [sp, #64]	; 0x40
   183b8:	strb	r3, [r2]
   183bc:	mov	fp, #1
   183c0:	str	fp, [sp, #28]
   183c4:	str	fp, [sp, #52]	; 0x34
   183c8:	movw	r3, #55396	; 0xd864
   183cc:	movt	r3, #1
   183d0:	str	r3, [sp, #60]	; 0x3c
   183d4:	b	18380 <__assert_fail@plt+0x6f6c>
   183d8:	cmp	sl, #10
   183dc:	bne	18410 <__assert_fail@plt+0x6ffc>
   183e0:	ldr	r3, [sp, #32]
   183e4:	cmp	r3, #0
   183e8:	movne	fp, #0
   183ec:	beq	18438 <__assert_fail@plt+0x7024>
   183f0:	ldr	r0, [sp, #168]	; 0xa8
   183f4:	bl	112a0 <strlen@plt>
   183f8:	str	r0, [sp, #52]	; 0x34
   183fc:	ldr	r3, [sp, #168]	; 0xa8
   18400:	str	r3, [sp, #60]	; 0x3c
   18404:	mov	r3, #1
   18408:	str	r3, [sp, #28]
   1840c:	b	18380 <__assert_fail@plt+0x6f6c>
   18410:	mov	r1, sl
   18414:	ldr	r0, [sp, #80]	; 0x50
   18418:	bl	18150 <__assert_fail@plt+0x6d3c>
   1841c:	str	r0, [sp, #164]	; 0xa4
   18420:	mov	r1, sl
   18424:	movw	r0, #55416	; 0xd878
   18428:	movt	r0, #1
   1842c:	bl	18150 <__assert_fail@plt+0x6d3c>
   18430:	str	r0, [sp, #168]	; 0xa8
   18434:	b	183e0 <__assert_fail@plt+0x6fcc>
   18438:	ldr	r3, [sp, #164]	; 0xa4
   1843c:	ldrb	r3, [r3]
   18440:	cmp	r3, #0
   18444:	beq	18470 <__assert_fail@plt+0x705c>
   18448:	ldr	r2, [sp, #164]	; 0xa4
   1844c:	mov	fp, #0
   18450:	ldr	r1, [sp, #64]	; 0x40
   18454:	cmp	r9, fp
   18458:	strbhi	r3, [r1, fp]
   1845c:	add	fp, fp, #1
   18460:	ldrb	r3, [r2, #1]!
   18464:	cmp	r3, #0
   18468:	bne	18454 <__assert_fail@plt+0x7040>
   1846c:	b	183f0 <__assert_fail@plt+0x6fdc>
   18470:	mov	fp, #0
   18474:	b	183f0 <__assert_fail@plt+0x6fdc>
   18478:	ldr	r3, [sp, #32]
   1847c:	cmp	r3, #0
   18480:	bne	18360 <__assert_fail@plt+0x6f4c>
   18484:	mov	r3, #1
   18488:	str	r3, [sp, #28]
   1848c:	cmp	r9, #0
   18490:	beq	18544 <__assert_fail@plt+0x7130>
   18494:	mov	r3, #39	; 0x27
   18498:	ldr	r2, [sp, #64]	; 0x40
   1849c:	strb	r3, [r2]
   184a0:	mov	r3, #0
   184a4:	str	r3, [sp, #32]
   184a8:	mov	fp, #1
   184ac:	str	fp, [sp, #52]	; 0x34
   184b0:	movw	r3, #55416	; 0xd878
   184b4:	movt	r3, #1
   184b8:	str	r3, [sp, #60]	; 0x3c
   184bc:	mov	sl, #2
   184c0:	b	18380 <__assert_fail@plt+0x6f6c>
   184c4:	ldr	r3, [sp, #32]
   184c8:	cmp	r3, #0
   184cc:	beq	1848c <__assert_fail@plt+0x7078>
   184d0:	mov	r3, #1
   184d4:	str	r3, [sp, #52]	; 0x34
   184d8:	movw	r3, #55416	; 0xd878
   184dc:	movt	r3, #1
   184e0:	str	r3, [sp, #60]	; 0x3c
   184e4:	mov	fp, #0
   184e8:	b	18380 <__assert_fail@plt+0x6f6c>
   184ec:	bl	113f0 <abort@plt>
   184f0:	mov	fp, #0
   184f4:	str	fp, [sp, #32]
   184f8:	mov	r3, #1
   184fc:	str	r3, [sp, #28]
   18500:	b	18380 <__assert_fail@plt+0x6f6c>
   18504:	ldr	r3, [sp, #32]
   18508:	str	r3, [sp, #28]
   1850c:	mov	r3, #1
   18510:	str	r3, [sp, #52]	; 0x34
   18514:	movw	r3, #55396	; 0xd864
   18518:	movt	r3, #1
   1851c:	str	r3, [sp, #60]	; 0x3c
   18520:	mov	fp, #0
   18524:	b	18380 <__assert_fail@plt+0x6f6c>
   18528:	mov	fp, #1
   1852c:	str	fp, [sp, #28]
   18530:	str	fp, [sp, #52]	; 0x34
   18534:	movw	r3, #55396	; 0xd864
   18538:	movt	r3, #1
   1853c:	str	r3, [sp, #60]	; 0x3c
   18540:	b	18380 <__assert_fail@plt+0x6f6c>
   18544:	mov	r3, #0
   18548:	str	r3, [sp, #32]
   1854c:	mov	fp, #1
   18550:	str	fp, [sp, #52]	; 0x34
   18554:	movw	r3, #55416	; 0xd878
   18558:	movt	r3, #1
   1855c:	str	r3, [sp, #60]	; 0x3c
   18560:	mov	sl, #2
   18564:	b	18380 <__assert_fail@plt+0x6f6c>
   18568:	mov	r3, r2
   1856c:	add	r4, r6, r2
   18570:	ldr	r2, [sp, #24]
   18574:	cmp	r3, #1
   18578:	movls	r3, #0
   1857c:	movhi	r3, #1
   18580:	cmn	r2, #1
   18584:	movne	r3, #0
   18588:	cmp	r3, #0
   1858c:	beq	1859c <__assert_fail@plt+0x7188>
   18590:	ldr	r0, [sp, #48]	; 0x30
   18594:	bl	112a0 <strlen@plt>
   18598:	str	r0, [sp, #24]
   1859c:	ldr	r3, [sp, #24]
   185a0:	cmp	r4, r3
   185a4:	bhi	19790 <__assert_fail@plt+0x837c>
   185a8:	ldr	r3, [sp, #48]	; 0x30
   185ac:	add	r4, r3, r6
   185b0:	ldr	r2, [sp, #52]	; 0x34
   185b4:	ldr	r1, [sp, #60]	; 0x3c
   185b8:	mov	r0, r4
   185bc:	bl	1115c <memcmp@plt>
   185c0:	cmp	r0, #0
   185c4:	bne	19790 <__assert_fail@plt+0x837c>
   185c8:	ldr	r3, [sp, #32]
   185cc:	cmp	r3, #0
   185d0:	bne	187e0 <__assert_fail@plt+0x73cc>
   185d4:	ldrb	r4, [r4]
   185d8:	cmp	r4, #126	; 0x7e
   185dc:	ldrls	pc, [pc, r4, lsl #2]
   185e0:	b	19094 <__assert_fail@plt+0x7c80>
   185e4:	andeq	r8, r1, r4, lsr #16
   185e8:	muleq	r1, r4, r0
   185ec:	muleq	r1, r4, r0
   185f0:	muleq	r1, r4, r0
   185f4:	muleq	r1, r4, r0
   185f8:	muleq	r1, r4, r0
   185fc:	muleq	r1, r4, r0
   18600:	andeq	r8, r1, ip, lsr pc
   18604:	andeq	r8, r1, r0, asr #21
   18608:	andeq	r8, r1, r4, ror #28
   1860c:	andeq	r8, r1, r0, lsl pc
   18610:	andeq	r8, r1, r8, ror lr
   18614:	ldrdeq	r8, [r1], -r4
   18618:	andeq	r8, r1, r8, ror #21
   1861c:	muleq	r1, r4, r0
   18620:	muleq	r1, r4, r0
   18624:	muleq	r1, r4, r0
   18628:	muleq	r1, r4, r0
   1862c:	muleq	r1, r4, r0
   18630:	muleq	r1, r4, r0
   18634:	muleq	r1, r4, r0
   18638:	muleq	r1, r4, r0
   1863c:	muleq	r1, r4, r0
   18640:	muleq	r1, r4, r0
   18644:	muleq	r1, r4, r0
   18648:	muleq	r1, r4, r0
   1864c:	muleq	r1, r4, r0
   18650:	muleq	r1, r4, r0
   18654:	muleq	r1, r4, r0
   18658:	muleq	r1, r4, r0
   1865c:	muleq	r1, r4, r0
   18660:	muleq	r1, r4, r0
   18664:			; <UNDEFINED> instruction: 0x00018fb0
   18668:	ldrdeq	r8, [r1], -r4
   1866c:	ldrdeq	r8, [r1], -r4
   18670:	andeq	r8, r1, ip, ror #30
   18674:	ldrdeq	r8, [r1], -r4
   18678:	strdeq	r9, [r1], -r4
   1867c:	ldrdeq	r8, [r1], -r4
   18680:	strdeq	r8, [r1], -r4
   18684:	ldrdeq	r8, [r1], -r4
   18688:	ldrdeq	r8, [r1], -r4
   1868c:	ldrdeq	r8, [r1], -r4
   18690:	strdeq	r9, [r1], -r4
   18694:	strdeq	r9, [r1], -r4
   18698:	strdeq	r9, [r1], -r4
   1869c:	strdeq	r9, [r1], -r4
   186a0:	strdeq	r9, [r1], -r4
   186a4:	strdeq	r9, [r1], -r4
   186a8:	strdeq	r9, [r1], -r4
   186ac:	strdeq	r9, [r1], -r4
   186b0:	strdeq	r9, [r1], -r4
   186b4:	strdeq	r9, [r1], -r4
   186b8:	strdeq	r9, [r1], -r4
   186bc:	strdeq	r9, [r1], -r4
   186c0:	strdeq	r9, [r1], -r4
   186c4:	strdeq	r9, [r1], -r4
   186c8:	strdeq	r9, [r1], -r4
   186cc:	strdeq	r9, [r1], -r4
   186d0:	ldrdeq	r8, [r1], -r4
   186d4:	ldrdeq	r8, [r1], -r4
   186d8:	ldrdeq	r8, [r1], -r4
   186dc:	ldrdeq	r8, [r1], -r4
   186e0:	andeq	r8, r1, r4, asr r9
   186e4:	muleq	r1, r4, r0
   186e8:	strdeq	r9, [r1], -r4
   186ec:	strdeq	r9, [r1], -r4
   186f0:	strdeq	r9, [r1], -r4
   186f4:	strdeq	r9, [r1], -r4
   186f8:	strdeq	r9, [r1], -r4
   186fc:	strdeq	r9, [r1], -r4
   18700:	strdeq	r9, [r1], -r4
   18704:	strdeq	r9, [r1], -r4
   18708:	strdeq	r9, [r1], -r4
   1870c:	strdeq	r9, [r1], -r4
   18710:	strdeq	r9, [r1], -r4
   18714:	strdeq	r9, [r1], -r4
   18718:	strdeq	r9, [r1], -r4
   1871c:	strdeq	r9, [r1], -r4
   18720:	strdeq	r9, [r1], -r4
   18724:	strdeq	r9, [r1], -r4
   18728:	strdeq	r9, [r1], -r4
   1872c:	strdeq	r9, [r1], -r4
   18730:	strdeq	r9, [r1], -r4
   18734:	strdeq	r9, [r1], -r4
   18738:	strdeq	r9, [r1], -r4
   1873c:	strdeq	r9, [r1], -r4
   18740:	strdeq	r9, [r1], -r4
   18744:	strdeq	r9, [r1], -r4
   18748:	strdeq	r9, [r1], -r4
   1874c:	strdeq	r9, [r1], -r4
   18750:	ldrdeq	r8, [r1], -r4
   18754:	andeq	r8, r1, ip, lsl #29
   18758:	strdeq	r9, [r1], -r4
   1875c:	ldrdeq	r8, [r1], -r4
   18760:	strdeq	r9, [r1], -r4
   18764:	ldrdeq	r8, [r1], -r4
   18768:	strdeq	r9, [r1], -r4
   1876c:	strdeq	r9, [r1], -r4
   18770:	strdeq	r9, [r1], -r4
   18774:	strdeq	r9, [r1], -r4
   18778:	strdeq	r9, [r1], -r4
   1877c:	strdeq	r9, [r1], -r4
   18780:	strdeq	r9, [r1], -r4
   18784:	strdeq	r9, [r1], -r4
   18788:	strdeq	r9, [r1], -r4
   1878c:	strdeq	r9, [r1], -r4
   18790:	strdeq	r9, [r1], -r4
   18794:	strdeq	r9, [r1], -r4
   18798:	strdeq	r9, [r1], -r4
   1879c:	strdeq	r9, [r1], -r4
   187a0:	strdeq	r9, [r1], -r4
   187a4:	strdeq	r9, [r1], -r4
   187a8:	strdeq	r9, [r1], -r4
   187ac:	strdeq	r9, [r1], -r4
   187b0:	strdeq	r9, [r1], -r4
   187b4:	strdeq	r9, [r1], -r4
   187b8:	strdeq	r9, [r1], -r4
   187bc:	strdeq	r9, [r1], -r4
   187c0:	strdeq	r9, [r1], -r4
   187c4:	strdeq	r9, [r1], -r4
   187c8:	strdeq	r9, [r1], -r4
   187cc:	strdeq	r9, [r1], -r4
   187d0:	andeq	r8, r1, ip, asr #30
   187d4:	ldrdeq	r8, [r1], -r4
   187d8:	andeq	r8, r1, ip, asr #30
   187dc:	andeq	r8, r1, ip, ror #30
   187e0:	mov	r8, r9
   187e4:	mov	r7, sl
   187e8:	b	196e8 <__assert_fail@plt+0x82d4>
   187ec:	ldr	r3, [sp, #28]
   187f0:	cmp	r3, #0
   187f4:	bne	18814 <__assert_fail@plt+0x7400>
   187f8:	ldr	r3, [sp, #156]	; 0x9c
   187fc:	tst	r3, #1
   18800:	bne	18bfc <__assert_fail@plt+0x77e8>
   18804:	ldr	r3, [sp, #28]
   18808:	str	r3, [sp, #44]	; 0x2c
   1880c:	mov	r5, r3
   18810:	b	18b1c <__assert_fail@plt+0x7708>
   18814:	ldr	r3, [sp, #32]
   18818:	cmp	r3, #0
   1881c:	bne	19698 <__assert_fail@plt+0x8284>
   18820:	str	r3, [sp, #44]	; 0x2c
   18824:	ldr	r3, [sp, #36]	; 0x24
   18828:	eor	r3, r3, #1
   1882c:	cmp	sl, #2
   18830:	movne	r3, #0
   18834:	andeq	r3, r3, #1
   18838:	cmp	r3, #0
   1883c:	beq	18894 <__assert_fail@plt+0x7480>
   18840:	cmp	r9, fp
   18844:	movhi	r2, #39	; 0x27
   18848:	strbhi	r2, [r8, fp]
   1884c:	add	r2, fp, #1
   18850:	cmp	r9, r2
   18854:	movhi	r1, #36	; 0x24
   18858:	strbhi	r1, [r8, r2]
   1885c:	add	r2, fp, #2
   18860:	cmp	r9, r2
   18864:	movhi	r1, #39	; 0x27
   18868:	strbhi	r1, [r8, r2]
   1886c:	add	r2, fp, #3
   18870:	cmp	r9, r2
   18874:	bls	19754 <__assert_fail@plt+0x8340>
   18878:	mov	r1, #92	; 0x5c
   1887c:	strb	r1, [r8, r2]
   18880:	add	fp, fp, #4
   18884:	str	r3, [sp, #36]	; 0x24
   18888:	mov	r5, #0
   1888c:	mov	r4, #48	; 0x30
   18890:	b	18b68 <__assert_fail@plt+0x7754>
   18894:	cmp	r9, fp
   18898:	bhi	188c0 <__assert_fail@plt+0x74ac>
   1889c:	add	r1, fp, #1
   188a0:	ldr	r2, [sp, #56]	; 0x38
   188a4:	cmp	r2, #0
   188a8:	bne	188e8 <__assert_fail@plt+0x74d4>
   188ac:	mov	r3, r5
   188b0:	ldr	r5, [sp, #56]	; 0x38
   188b4:	mov	fp, r1
   188b8:	mov	r4, #48	; 0x30
   188bc:	b	18b1c <__assert_fail@plt+0x7708>
   188c0:	mov	r2, #92	; 0x5c
   188c4:	strb	r2, [r8, fp]
   188c8:	add	r1, fp, #1
   188cc:	ldr	r2, [sp, #56]	; 0x38
   188d0:	cmp	r2, #0
   188d4:	moveq	r3, r5
   188d8:	moveq	r5, r2
   188dc:	moveq	fp, r1
   188e0:	moveq	r4, #48	; 0x30
   188e4:	beq	18b68 <__assert_fail@plt+0x7754>
   188e8:	add	r2, r6, #1
   188ec:	ldr	r0, [sp, #24]
   188f0:	cmp	r2, r0
   188f4:	bcs	18910 <__assert_fail@plt+0x74fc>
   188f8:	ldr	r0, [sp, #48]	; 0x30
   188fc:	ldrb	r2, [r0, r2]
   18900:	sub	r2, r2, #48	; 0x30
   18904:	uxtb	r2, r2
   18908:	cmp	r2, #9
   1890c:	bls	18928 <__assert_fail@plt+0x7514>
   18910:	mov	r2, r3
   18914:	mov	r3, r5
   18918:	mov	r5, r2
   1891c:	mov	fp, r1
   18920:	mov	r4, #48	; 0x30
   18924:	b	18b40 <__assert_fail@plt+0x772c>
   18928:	cmp	r9, r1
   1892c:	movhi	r2, #48	; 0x30
   18930:	strbhi	r2, [r8, r1]
   18934:	add	r2, fp, #2
   18938:	cmp	r9, r2
   1893c:	movhi	r1, #48	; 0x30
   18940:	strbhi	r1, [r8, r2]
   18944:	add	r1, fp, #3
   18948:	b	18910 <__assert_fail@plt+0x74fc>
   1894c:	mov	r3, #0
   18950:	str	r3, [sp, #44]	; 0x2c
   18954:	cmp	sl, #2
   18958:	beq	18974 <__assert_fail@plt+0x7560>
   1895c:	cmp	sl, #5
   18960:	beq	1898c <__assert_fail@plt+0x7578>
   18964:	mov	r5, #0
   18968:	mov	r3, r5
   1896c:	mov	r4, #63	; 0x3f
   18970:	b	18b1c <__assert_fail@plt+0x7708>
   18974:	ldr	r3, [sp, #32]
   18978:	cmp	r3, #0
   1897c:	bne	196a4 <__assert_fail@plt+0x8290>
   18980:	mov	r5, r3
   18984:	mov	r4, #63	; 0x3f
   18988:	b	19084 <__assert_fail@plt+0x7c70>
   1898c:	ldr	r3, [sp, #156]	; 0x9c
   18990:	tst	r3, #4
   18994:	beq	194bc <__assert_fail@plt+0x80a8>
   18998:	add	r2, r6, #2
   1899c:	ldr	r3, [sp, #24]
   189a0:	cmp	r2, r3
   189a4:	bcs	194cc <__assert_fail@plt+0x80b8>
   189a8:	ldr	r3, [sp, #48]	; 0x30
   189ac:	add	r3, r3, r6
   189b0:	ldrb	r4, [r3, #1]
   189b4:	cmp	r4, #63	; 0x3f
   189b8:	movne	r5, #0
   189bc:	movne	r3, r5
   189c0:	movne	r4, #63	; 0x3f
   189c4:	bne	18b1c <__assert_fail@plt+0x7708>
   189c8:	ldr	r3, [sp, #48]	; 0x30
   189cc:	ldrb	r1, [r3, r2]
   189d0:	sub	r3, r1, #33	; 0x21
   189d4:	cmp	r3, #29
   189d8:	ldrls	pc, [pc, r3, lsl #2]
   189dc:	b	194dc <__assert_fail@plt+0x80c8>
   189e0:	andeq	r8, r1, r8, asr sl
   189e4:	ldrdeq	r9, [r1], -ip
   189e8:	ldrdeq	r9, [r1], -ip
   189ec:	ldrdeq	r9, [r1], -ip
   189f0:	ldrdeq	r9, [r1], -ip
   189f4:	ldrdeq	r9, [r1], -ip
   189f8:	andeq	r8, r1, r8, asr sl
   189fc:	andeq	r8, r1, r8, asr sl
   18a00:	andeq	r8, r1, r8, asr sl
   18a04:	ldrdeq	r9, [r1], -ip
   18a08:	ldrdeq	r9, [r1], -ip
   18a0c:	ldrdeq	r9, [r1], -ip
   18a10:	andeq	r8, r1, r8, asr sl
   18a14:	ldrdeq	r9, [r1], -ip
   18a18:	andeq	r8, r1, r8, asr sl
   18a1c:	ldrdeq	r9, [r1], -ip
   18a20:	ldrdeq	r9, [r1], -ip
   18a24:	ldrdeq	r9, [r1], -ip
   18a28:	ldrdeq	r9, [r1], -ip
   18a2c:	ldrdeq	r9, [r1], -ip
   18a30:	ldrdeq	r9, [r1], -ip
   18a34:	ldrdeq	r9, [r1], -ip
   18a38:	ldrdeq	r9, [r1], -ip
   18a3c:	ldrdeq	r9, [r1], -ip
   18a40:	ldrdeq	r9, [r1], -ip
   18a44:	ldrdeq	r9, [r1], -ip
   18a48:	ldrdeq	r9, [r1], -ip
   18a4c:	andeq	r8, r1, r8, asr sl
   18a50:	andeq	r8, r1, r8, asr sl
   18a54:	andeq	r8, r1, r8, asr sl
   18a58:	ldr	r3, [sp, #32]
   18a5c:	cmp	r3, #0
   18a60:	bne	19748 <__assert_fail@plt+0x8334>
   18a64:	cmp	r9, fp
   18a68:	movhi	r3, #63	; 0x3f
   18a6c:	strbhi	r3, [r8, fp]
   18a70:	add	r3, fp, #1
   18a74:	cmp	r9, r3
   18a78:	movhi	r0, #34	; 0x22
   18a7c:	strbhi	r0, [r8, r3]
   18a80:	add	r3, fp, #2
   18a84:	cmp	r9, r3
   18a88:	movhi	r0, #34	; 0x22
   18a8c:	strbhi	r0, [r8, r3]
   18a90:	add	r3, fp, #3
   18a94:	cmp	r9, r3
   18a98:	movhi	r0, #63	; 0x3f
   18a9c:	strbhi	r0, [r8, r3]
   18aa0:	add	fp, fp, #4
   18aa4:	ldr	r3, [sp, #32]
   18aa8:	mov	r5, r3
   18aac:	mov	r4, r1
   18ab0:	mov	r6, r2
   18ab4:	b	18b1c <__assert_fail@plt+0x7708>
   18ab8:	mov	r3, #0
   18abc:	str	r3, [sp, #44]	; 0x2c
   18ac0:	mov	r4, #8
   18ac4:	mov	r3, #98	; 0x62
   18ac8:	b	18b08 <__assert_fail@plt+0x76f4>
   18acc:	mov	r3, #0
   18ad0:	str	r3, [sp, #44]	; 0x2c
   18ad4:	mov	r4, #12
   18ad8:	mov	r3, #102	; 0x66
   18adc:	b	18b08 <__assert_fail@plt+0x76f4>
   18ae0:	mov	r3, #0
   18ae4:	str	r3, [sp, #44]	; 0x2c
   18ae8:	mov	r4, #13
   18aec:	mov	r3, #114	; 0x72
   18af0:	ldr	r2, [sp, #32]
   18af4:	cmp	sl, #2
   18af8:	movne	r2, #0
   18afc:	andeq	r2, r2, #1
   18b00:	cmp	r2, #0
   18b04:	bne	18f28 <__assert_fail@plt+0x7b14>
   18b08:	ldr	r2, [sp, #28]
   18b0c:	cmp	r2, #0
   18b10:	bne	19510 <__assert_fail@plt+0x80fc>
   18b14:	mov	r5, r2
   18b18:	mov	r3, r2
   18b1c:	ldr	r2, [sp, #28]
   18b20:	eor	r2, r2, #1
   18b24:	cmp	sl, #2
   18b28:	orreq	r2, r2, #1
   18b2c:	eor	r2, r2, #1
   18b30:	ldr	r1, [sp, #32]
   18b34:	orr	r2, r1, r2
   18b38:	tst	r2, #255	; 0xff
   18b3c:	beq	18b68 <__assert_fail@plt+0x7754>
   18b40:	ldr	r2, [sp, #160]	; 0xa0
   18b44:	cmp	r2, #0
   18b48:	beq	18b68 <__assert_fail@plt+0x7754>
   18b4c:	ubfx	r1, r4, #5, #8
   18b50:	and	r2, r4, #31
   18b54:	ldr	r0, [sp, #160]	; 0xa0
   18b58:	ldr	r1, [r0, r1, lsl #2]
   18b5c:	lsr	r2, r1, r2
   18b60:	tst	r2, #1
   18b64:	bne	18b74 <__assert_fail@plt+0x7760>
   18b68:	ldr	r2, [sp, #44]	; 0x2c
   18b6c:	cmp	r2, #0
   18b70:	beq	18ec8 <__assert_fail@plt+0x7ab4>
   18b74:	ldr	r3, [sp, #32]
   18b78:	cmp	r3, #0
   18b7c:	bne	196c8 <__assert_fail@plt+0x82b4>
   18b80:	ldr	r3, [sp, #36]	; 0x24
   18b84:	eor	r3, r3, #1
   18b88:	cmp	sl, #2
   18b8c:	movne	r3, #0
   18b90:	andeq	r3, r3, #1
   18b94:	cmp	r3, #0
   18b98:	beq	18bd0 <__assert_fail@plt+0x77bc>
   18b9c:	cmp	r9, fp
   18ba0:	movhi	r2, #39	; 0x27
   18ba4:	strbhi	r2, [r8, fp]
   18ba8:	add	r2, fp, #1
   18bac:	cmp	r9, r2
   18bb0:	movhi	r1, #36	; 0x24
   18bb4:	strbhi	r1, [r8, r2]
   18bb8:	add	r2, fp, #2
   18bbc:	cmp	r9, r2
   18bc0:	movhi	r1, #39	; 0x27
   18bc4:	strbhi	r1, [r8, r2]
   18bc8:	add	fp, fp, #3
   18bcc:	str	r3, [sp, #36]	; 0x24
   18bd0:	cmp	r9, fp
   18bd4:	movhi	r3, #92	; 0x5c
   18bd8:	strbhi	r3, [r8, fp]
   18bdc:	add	fp, fp, #1
   18be0:	cmp	fp, r9
   18be4:	strbcc	r4, [r8, fp]
   18be8:	add	fp, fp, #1
   18bec:	cmp	r5, #0
   18bf0:	ldr	r3, [sp, #40]	; 0x28
   18bf4:	moveq	r3, r5
   18bf8:	str	r3, [sp, #40]	; 0x28
   18bfc:	add	r6, r6, #1
   18c00:	ldr	r3, [sp, #24]
   18c04:	cmn	r3, #1
   18c08:	beq	19538 <__assert_fail@plt+0x8124>
   18c0c:	ldr	r3, [sp, #24]
   18c10:	subs	r5, r3, r6
   18c14:	movne	r5, #1
   18c18:	cmp	r5, #0
   18c1c:	beq	1954c <__assert_fail@plt+0x8138>
   18c20:	ldr	r3, [sp, #28]
   18c24:	cmp	sl, #2
   18c28:	moveq	r3, #0
   18c2c:	andne	r3, r3, #1
   18c30:	str	r3, [sp, #56]	; 0x38
   18c34:	ldr	r2, [sp, #52]	; 0x34
   18c38:	adds	r7, r2, #0
   18c3c:	movne	r7, #1
   18c40:	ands	r3, r3, r7
   18c44:	str	r3, [sp, #44]	; 0x2c
   18c48:	bne	18568 <__assert_fail@plt+0x7154>
   18c4c:	ldr	r3, [sp, #48]	; 0x30
   18c50:	ldrb	r4, [r3, r6]
   18c54:	cmp	r4, #126	; 0x7e
   18c58:	ldrls	pc, [pc, r4, lsl #2]
   18c5c:	b	19094 <__assert_fail@plt+0x7c80>
   18c60:	andeq	r8, r1, ip, ror #15
   18c64:	muleq	r1, r4, r0
   18c68:	muleq	r1, r4, r0
   18c6c:	muleq	r1, r4, r0
   18c70:	muleq	r1, r4, r0
   18c74:	muleq	r1, r4, r0
   18c78:	muleq	r1, r4, r0
   18c7c:	andeq	r8, r1, r4, lsr pc
   18c80:	andeq	r8, r1, r0, asr #21
   18c84:	andeq	r8, r1, r4, ror #28
   18c88:	andeq	r8, r1, r8, lsl #30
   18c8c:	andeq	r8, r1, r8, ror lr
   18c90:	ldrdeq	r8, [r1], -r4
   18c94:	andeq	r8, r1, r8, ror #21
   18c98:	muleq	r1, r4, r0
   18c9c:	muleq	r1, r4, r0
   18ca0:	muleq	r1, r4, r0
   18ca4:	muleq	r1, r4, r0
   18ca8:	muleq	r1, r4, r0
   18cac:	muleq	r1, r4, r0
   18cb0:	muleq	r1, r4, r0
   18cb4:	muleq	r1, r4, r0
   18cb8:	muleq	r1, r4, r0
   18cbc:	muleq	r1, r4, r0
   18cc0:	muleq	r1, r4, r0
   18cc4:	muleq	r1, r4, r0
   18cc8:	muleq	r1, r4, r0
   18ccc:	muleq	r1, r4, r0
   18cd0:	muleq	r1, r4, r0
   18cd4:	muleq	r1, r4, r0
   18cd8:	muleq	r1, r4, r0
   18cdc:	muleq	r1, r4, r0
   18ce0:			; <UNDEFINED> instruction: 0x00018fb0
   18ce4:	andeq	r8, r1, ip, lsr #31
   18ce8:	andeq	r8, r1, ip, lsr #31
   18cec:	andeq	r8, r1, ip, ror #30
   18cf0:	andeq	r8, r1, ip, lsr #31
   18cf4:			; <UNDEFINED> instruction: 0x000194b4
   18cf8:	andeq	r8, r1, ip, lsr #31
   18cfc:	strdeq	r8, [r1], -r4
   18d00:	andeq	r8, r1, ip, lsr #31
   18d04:	andeq	r8, r1, ip, lsr #31
   18d08:	andeq	r8, r1, ip, lsr #31
   18d0c:			; <UNDEFINED> instruction: 0x000194b4
   18d10:			; <UNDEFINED> instruction: 0x000194b4
   18d14:			; <UNDEFINED> instruction: 0x000194b4
   18d18:			; <UNDEFINED> instruction: 0x000194b4
   18d1c:			; <UNDEFINED> instruction: 0x000194b4
   18d20:			; <UNDEFINED> instruction: 0x000194b4
   18d24:			; <UNDEFINED> instruction: 0x000194b4
   18d28:			; <UNDEFINED> instruction: 0x000194b4
   18d2c:			; <UNDEFINED> instruction: 0x000194b4
   18d30:			; <UNDEFINED> instruction: 0x000194b4
   18d34:			; <UNDEFINED> instruction: 0x000194b4
   18d38:			; <UNDEFINED> instruction: 0x000194b4
   18d3c:			; <UNDEFINED> instruction: 0x000194b4
   18d40:			; <UNDEFINED> instruction: 0x000194b4
   18d44:			; <UNDEFINED> instruction: 0x000194b4
   18d48:			; <UNDEFINED> instruction: 0x000194b4
   18d4c:	andeq	r8, r1, ip, lsr #31
   18d50:	andeq	r8, r1, ip, lsr #31
   18d54:	andeq	r8, r1, ip, lsr #31
   18d58:	andeq	r8, r1, ip, lsr #31
   18d5c:	andeq	r8, r1, r4, asr r9
   18d60:	muleq	r1, r4, r0
   18d64:			; <UNDEFINED> instruction: 0x000194b4
   18d68:			; <UNDEFINED> instruction: 0x000194b4
   18d6c:			; <UNDEFINED> instruction: 0x000194b4
   18d70:			; <UNDEFINED> instruction: 0x000194b4
   18d74:			; <UNDEFINED> instruction: 0x000194b4
   18d78:			; <UNDEFINED> instruction: 0x000194b4
   18d7c:			; <UNDEFINED> instruction: 0x000194b4
   18d80:			; <UNDEFINED> instruction: 0x000194b4
   18d84:			; <UNDEFINED> instruction: 0x000194b4
   18d88:			; <UNDEFINED> instruction: 0x000194b4
   18d8c:			; <UNDEFINED> instruction: 0x000194b4
   18d90:			; <UNDEFINED> instruction: 0x000194b4
   18d94:			; <UNDEFINED> instruction: 0x000194b4
   18d98:			; <UNDEFINED> instruction: 0x000194b4
   18d9c:			; <UNDEFINED> instruction: 0x000194b4
   18da0:			; <UNDEFINED> instruction: 0x000194b4
   18da4:			; <UNDEFINED> instruction: 0x000194b4
   18da8:			; <UNDEFINED> instruction: 0x000194b4
   18dac:			; <UNDEFINED> instruction: 0x000194b4
   18db0:			; <UNDEFINED> instruction: 0x000194b4
   18db4:			; <UNDEFINED> instruction: 0x000194b4
   18db8:			; <UNDEFINED> instruction: 0x000194b4
   18dbc:			; <UNDEFINED> instruction: 0x000194b4
   18dc0:			; <UNDEFINED> instruction: 0x000194b4
   18dc4:			; <UNDEFINED> instruction: 0x000194b4
   18dc8:			; <UNDEFINED> instruction: 0x000194b4
   18dcc:	andeq	r8, r1, ip, lsr #31
   18dd0:	andeq	r8, r1, ip, lsl #29
   18dd4:			; <UNDEFINED> instruction: 0x000194b4
   18dd8:	andeq	r8, r1, ip, lsr #31
   18ddc:			; <UNDEFINED> instruction: 0x000194b4
   18de0:	andeq	r8, r1, ip, lsr #31
   18de4:			; <UNDEFINED> instruction: 0x000194b4
   18de8:			; <UNDEFINED> instruction: 0x000194b4
   18dec:			; <UNDEFINED> instruction: 0x000194b4
   18df0:			; <UNDEFINED> instruction: 0x000194b4
   18df4:			; <UNDEFINED> instruction: 0x000194b4
   18df8:			; <UNDEFINED> instruction: 0x000194b4
   18dfc:			; <UNDEFINED> instruction: 0x000194b4
   18e00:			; <UNDEFINED> instruction: 0x000194b4
   18e04:			; <UNDEFINED> instruction: 0x000194b4
   18e08:			; <UNDEFINED> instruction: 0x000194b4
   18e0c:			; <UNDEFINED> instruction: 0x000194b4
   18e10:			; <UNDEFINED> instruction: 0x000194b4
   18e14:			; <UNDEFINED> instruction: 0x000194b4
   18e18:			; <UNDEFINED> instruction: 0x000194b4
   18e1c:			; <UNDEFINED> instruction: 0x000194b4
   18e20:			; <UNDEFINED> instruction: 0x000194b4
   18e24:			; <UNDEFINED> instruction: 0x000194b4
   18e28:			; <UNDEFINED> instruction: 0x000194b4
   18e2c:			; <UNDEFINED> instruction: 0x000194b4
   18e30:			; <UNDEFINED> instruction: 0x000194b4
   18e34:			; <UNDEFINED> instruction: 0x000194b4
   18e38:			; <UNDEFINED> instruction: 0x000194b4
   18e3c:			; <UNDEFINED> instruction: 0x000194b4
   18e40:			; <UNDEFINED> instruction: 0x000194b4
   18e44:			; <UNDEFINED> instruction: 0x000194b4
   18e48:			; <UNDEFINED> instruction: 0x000194b4
   18e4c:	andeq	r8, r1, ip, asr #30
   18e50:	andeq	r8, r1, ip, lsr #31
   18e54:	andeq	r8, r1, ip, asr #30
   18e58:	andeq	r8, r1, ip, ror #30
   18e5c:	mov	r3, #0
   18e60:	str	r3, [sp, #44]	; 0x2c
   18e64:	mov	r4, #9
   18e68:	mov	r3, #116	; 0x74
   18e6c:	b	18af0 <__assert_fail@plt+0x76dc>
   18e70:	mov	r3, #0
   18e74:	str	r3, [sp, #44]	; 0x2c
   18e78:	mov	r4, #11
   18e7c:	mov	r3, #118	; 0x76
   18e80:	b	18b08 <__assert_fail@plt+0x76f4>
   18e84:	mov	r3, #0
   18e88:	str	r3, [sp, #44]	; 0x2c
   18e8c:	cmp	sl, #2
   18e90:	beq	18eb4 <__assert_fail@plt+0x7aa0>
   18e94:	ldr	r3, [sp, #28]
   18e98:	ldr	r2, [sp, #32]
   18e9c:	and	r3, r3, r2
   18ea0:	tst	r7, r3
   18ea4:	bne	19528 <__assert_fail@plt+0x8114>
   18ea8:	mov	r4, #92	; 0x5c
   18eac:	mov	r3, r4
   18eb0:	b	18b08 <__assert_fail@plt+0x76f4>
   18eb4:	ldr	r3, [sp, #32]
   18eb8:	cmp	r3, #0
   18ebc:	bne	196b0 <__assert_fail@plt+0x829c>
   18ec0:	mov	r5, r3
   18ec4:	mov	r4, #92	; 0x5c
   18ec8:	eor	r3, r3, #1
   18ecc:	ldr	r2, [sp, #36]	; 0x24
   18ed0:	and	r3, r3, r2
   18ed4:	tst	r3, #255	; 0xff
   18ed8:	beq	18be0 <__assert_fail@plt+0x77cc>
   18edc:	cmp	r9, fp
   18ee0:	movhi	r3, #39	; 0x27
   18ee4:	strbhi	r3, [r8, fp]
   18ee8:	add	r3, fp, #1
   18eec:	cmp	r9, r3
   18ef0:	movhi	r2, #39	; 0x27
   18ef4:	strbhi	r2, [r8, r3]
   18ef8:	add	fp, fp, #2
   18efc:	mov	r3, #0
   18f00:	str	r3, [sp, #36]	; 0x24
   18f04:	b	18be0 <__assert_fail@plt+0x77cc>
   18f08:	mov	r3, #110	; 0x6e
   18f0c:	b	18af0 <__assert_fail@plt+0x76dc>
   18f10:	mov	r3, #110	; 0x6e
   18f14:	b	18af0 <__assert_fail@plt+0x76dc>
   18f18:	mov	r3, #0
   18f1c:	str	r3, [sp, #44]	; 0x2c
   18f20:	mov	r3, #110	; 0x6e
   18f24:	b	18af0 <__assert_fail@plt+0x76dc>
   18f28:	mov	r8, r9
   18f2c:	mov	r7, #2
   18f30:	b	196d0 <__assert_fail@plt+0x82bc>
   18f34:	mov	r3, #97	; 0x61
   18f38:	b	18b08 <__assert_fail@plt+0x76f4>
   18f3c:	mov	r3, #97	; 0x61
   18f40:	b	18b08 <__assert_fail@plt+0x76f4>
   18f44:	mov	r3, #0
   18f48:	str	r3, [sp, #44]	; 0x2c
   18f4c:	ldr	r3, [sp, #24]
   18f50:	cmn	r3, #1
   18f54:	beq	18f80 <__assert_fail@plt+0x7b6c>
   18f58:	ldr	r3, [sp, #24]
   18f5c:	subs	r3, r3, #1
   18f60:	movne	r3, #1
   18f64:	cmp	r3, #0
   18f68:	bne	194e8 <__assert_fail@plt+0x80d4>
   18f6c:	cmp	r6, #0
   18f70:	beq	18fb0 <__assert_fail@plt+0x7b9c>
   18f74:	mov	r5, #0
   18f78:	mov	r3, r5
   18f7c:	b	18b1c <__assert_fail@plt+0x7708>
   18f80:	ldr	r3, [sp, #48]	; 0x30
   18f84:	ldrb	r3, [r3, #1]
   18f88:	adds	r3, r3, #0
   18f8c:	movne	r3, #1
   18f90:	b	18f64 <__assert_fail@plt+0x7b50>
   18f94:	mov	r3, #0
   18f98:	str	r3, [sp, #44]	; 0x2c
   18f9c:	b	18f6c <__assert_fail@plt+0x7b58>
   18fa0:	mov	r3, #0
   18fa4:	str	r3, [sp, #44]	; 0x2c
   18fa8:	b	18fb0 <__assert_fail@plt+0x7b9c>
   18fac:	ldr	r5, [sp, #44]	; 0x2c
   18fb0:	ldr	r3, [sp, #32]
   18fb4:	cmp	sl, #2
   18fb8:	movne	r3, #0
   18fbc:	andeq	r3, r3, #1
   18fc0:	cmp	r3, #0
   18fc4:	beq	18b1c <__assert_fail@plt+0x7708>
   18fc8:	mov	r8, r9
   18fcc:	mov	r7, #2
   18fd0:	b	196d0 <__assert_fail@plt+0x82bc>
   18fd4:	ldr	r5, [sp, #32]
   18fd8:	b	18fb0 <__assert_fail@plt+0x7b9c>
   18fdc:	mov	r3, #0
   18fe0:	str	r3, [sp, #44]	; 0x2c
   18fe4:	mov	r5, r3
   18fe8:	b	18fb0 <__assert_fail@plt+0x7b9c>
   18fec:	mov	r3, #0
   18ff0:	str	r3, [sp, #44]	; 0x2c
   18ff4:	cmp	sl, #2
   18ff8:	strne	r5, [sp, #68]	; 0x44
   18ffc:	movne	r3, #0
   19000:	movne	r4, #39	; 0x27
   19004:	bne	18b1c <__assert_fail@plt+0x7708>
   19008:	ldr	r3, [sp, #32]
   1900c:	cmp	r3, #0
   19010:	bne	196bc <__assert_fail@plt+0x82a8>
   19014:	ldr	r3, [sp, #72]	; 0x48
   19018:	clz	r3, r3
   1901c:	lsr	r3, r3, #5
   19020:	cmp	r9, #0
   19024:	moveq	r3, #0
   19028:	cmp	r3, #0
   1902c:	movne	r3, #0
   19030:	bne	19058 <__assert_fail@plt+0x7c44>
   19034:	cmp	r9, fp
   19038:	movhi	r3, #39	; 0x27
   1903c:	strbhi	r3, [r8, fp]
   19040:	add	r3, fp, #1
   19044:	cmp	r9, r3
   19048:	movhi	r2, #92	; 0x5c
   1904c:	strbhi	r2, [r8, r3]
   19050:	mov	r3, r9
   19054:	ldr	r9, [sp, #72]	; 0x48
   19058:	add	r2, fp, #2
   1905c:	cmp	r2, r3
   19060:	movcc	r1, #39	; 0x27
   19064:	strbcc	r1, [r8, r2]
   19068:	add	fp, fp, #3
   1906c:	str	r5, [sp, #68]	; 0x44
   19070:	ldr	r2, [sp, #32]
   19074:	str	r2, [sp, #36]	; 0x24
   19078:	str	r9, [sp, #72]	; 0x48
   1907c:	mov	r9, r3
   19080:	mov	r4, #39	; 0x27
   19084:	mov	r3, #0
   19088:	b	18b68 <__assert_fail@plt+0x7754>
   1908c:	mov	r3, #0
   19090:	str	r3, [sp, #44]	; 0x2c
   19094:	ldr	r7, [sp, #76]	; 0x4c
   19098:	cmp	r7, #1
   1909c:	bne	190d4 <__assert_fail@plt+0x7cc0>
   190a0:	bl	11288 <__ctype_b_loc@plt>
   190a4:	ldr	r2, [r0]
   190a8:	lsl	r3, r4, #1
   190ac:	ldrh	r5, [r2, r3]
   190b0:	ubfx	r5, r5, #14, #1
   190b4:	mov	ip, r7
   190b8:	eor	r3, r5, #1
   190bc:	ldr	r2, [sp, #28]
   190c0:	and	r3, r3, r2
   190c4:	ands	r3, r3, #255	; 0xff
   190c8:	beq	18b1c <__assert_fail@plt+0x7708>
   190cc:	mov	r5, #0
   190d0:	b	19330 <__assert_fail@plt+0x7f1c>
   190d4:	mov	r2, #0
   190d8:	mov	r3, #0
   190dc:	strd	r2, [sp, #104]	; 0x68
   190e0:	ldr	r3, [sp, #24]
   190e4:	cmn	r3, #1
   190e8:	beq	1910c <__assert_fail@plt+0x7cf8>
   190ec:	mov	r3, #0
   190f0:	str	r4, [sp, #88]	; 0x58
   190f4:	str	fp, [sp, #92]	; 0x5c
   190f8:	str	r8, [sp, #56]	; 0x38
   190fc:	mov	r8, r3
   19100:	str	r9, [sp, #84]	; 0x54
   19104:	ldr	r9, [sp, #48]	; 0x30
   19108:	b	19258 <__assert_fail@plt+0x7e44>
   1910c:	ldr	r0, [sp, #48]	; 0x30
   19110:	bl	112a0 <strlen@plt>
   19114:	str	r0, [sp, #24]
   19118:	b	190ec <__assert_fail@plt+0x7cd8>
   1911c:	mov	r1, fp
   19120:	ldr	r4, [sp, #88]	; 0x58
   19124:	mov	r2, r8
   19128:	mov	ip, r8
   1912c:	ldr	fp, [sp, #92]	; 0x5c
   19130:	ldr	r8, [sp, #56]	; 0x38
   19134:	ldr	r9, [sp, #84]	; 0x54
   19138:	ldr	r0, [sp, #24]
   1913c:	cmp	r7, r0
   19140:	bcs	192f8 <__assert_fail@plt+0x7ee4>
   19144:	ldrb	r3, [r1]
   19148:	cmp	r3, #0
   1914c:	beq	19300 <__assert_fail@plt+0x7eec>
   19150:	mov	r3, r1
   19154:	add	r2, r2, #1
   19158:	add	r1, r6, r2
   1915c:	cmp	r0, r1
   19160:	bls	19308 <__assert_fail@plt+0x7ef4>
   19164:	ldrb	r1, [r3, #1]!
   19168:	cmp	r1, #0
   1916c:	bne	19154 <__assert_fail@plt+0x7d40>
   19170:	mov	ip, r2
   19174:	mov	r5, #0
   19178:	b	19328 <__assert_fail@plt+0x7f14>
   1917c:	ldr	r3, [sp, #56]	; 0x38
   19180:	str	r3, [sp, #64]	; 0x40
   19184:	ldr	r8, [sp, #84]	; 0x54
   19188:	mov	r7, #2
   1918c:	b	196d0 <__assert_fail@plt+0x82bc>
   19190:	cmp	r2, r7
   19194:	beq	19234 <__assert_fail@plt+0x7e20>
   19198:	ldrb	r3, [r2], #1
   1919c:	sub	r3, r3, #91	; 0x5b
   191a0:	cmp	r3, #33	; 0x21
   191a4:	ldrls	pc, [pc, r3, lsl #2]
   191a8:	b	19190 <__assert_fail@plt+0x7d7c>
   191ac:	andeq	r9, r1, ip, ror r1
   191b0:	andeq	r9, r1, ip, ror r1
   191b4:	muleq	r1, r0, r1
   191b8:	andeq	r9, r1, ip, ror r1
   191bc:	muleq	r1, r0, r1
   191c0:	andeq	r9, r1, ip, ror r1
   191c4:	muleq	r1, r0, r1
   191c8:	muleq	r1, r0, r1
   191cc:	muleq	r1, r0, r1
   191d0:	muleq	r1, r0, r1
   191d4:	muleq	r1, r0, r1
   191d8:	muleq	r1, r0, r1
   191dc:	muleq	r1, r0, r1
   191e0:	muleq	r1, r0, r1
   191e4:	muleq	r1, r0, r1
   191e8:	muleq	r1, r0, r1
   191ec:	muleq	r1, r0, r1
   191f0:	muleq	r1, r0, r1
   191f4:	muleq	r1, r0, r1
   191f8:	muleq	r1, r0, r1
   191fc:	muleq	r1, r0, r1
   19200:	muleq	r1, r0, r1
   19204:	muleq	r1, r0, r1
   19208:	muleq	r1, r0, r1
   1920c:	muleq	r1, r0, r1
   19210:	muleq	r1, r0, r1
   19214:	muleq	r1, r0, r1
   19218:	muleq	r1, r0, r1
   1921c:	muleq	r1, r0, r1
   19220:	muleq	r1, r0, r1
   19224:	muleq	r1, r0, r1
   19228:	muleq	r1, r0, r1
   1922c:	muleq	r1, r0, r1
   19230:	andeq	r9, r1, ip, ror r1
   19234:	ldr	r0, [sp, #100]	; 0x64
   19238:	bl	111b0 <iswprint@plt>
   1923c:	cmp	r0, #0
   19240:	moveq	r5, #0
   19244:	add	r8, r8, r4
   19248:	add	r0, sp, #104	; 0x68
   1924c:	bl	11144 <mbsinit@plt>
   19250:	cmp	r0, #0
   19254:	bne	192c4 <__assert_fail@plt+0x7eb0>
   19258:	add	r7, r6, r8
   1925c:	add	fp, r9, r7
   19260:	add	r3, sp, #104	; 0x68
   19264:	ldr	r2, [sp, #24]
   19268:	sub	r2, r2, r7
   1926c:	mov	r1, fp
   19270:	add	r0, sp, #100	; 0x64
   19274:	bl	1bd70 <__assert_fail@plt+0xa95c>
   19278:	subs	r4, r0, #0
   1927c:	beq	19314 <__assert_fail@plt+0x7f00>
   19280:	cmn	r4, #1
   19284:	beq	192dc <__assert_fail@plt+0x7ec8>
   19288:	cmn	r4, #2
   1928c:	beq	1911c <__assert_fail@plt+0x7d08>
   19290:	ldr	r3, [sp, #32]
   19294:	cmp	sl, #2
   19298:	movne	r3, #0
   1929c:	andeq	r3, r3, #1
   192a0:	cmp	r3, #0
   192a4:	beq	19234 <__assert_fail@plt+0x7e20>
   192a8:	cmp	r4, #1
   192ac:	bls	19234 <__assert_fail@plt+0x7e20>
   192b0:	add	r2, r7, #1
   192b4:	add	r2, r9, r2
   192b8:	add	r3, r9, r4
   192bc:	add	r7, r3, r7
   192c0:	b	19198 <__assert_fail@plt+0x7d84>
   192c4:	ldr	r4, [sp, #88]	; 0x58
   192c8:	mov	ip, r8
   192cc:	ldr	fp, [sp, #92]	; 0x5c
   192d0:	ldr	r8, [sp, #56]	; 0x38
   192d4:	ldr	r9, [sp, #84]	; 0x54
   192d8:	b	19328 <__assert_fail@plt+0x7f14>
   192dc:	ldr	r4, [sp, #88]	; 0x58
   192e0:	mov	ip, r8
   192e4:	ldr	fp, [sp, #92]	; 0x5c
   192e8:	ldr	r8, [sp, #56]	; 0x38
   192ec:	ldr	r9, [sp, #84]	; 0x54
   192f0:	mov	r5, #0
   192f4:	b	19328 <__assert_fail@plt+0x7f14>
   192f8:	mov	r5, #0
   192fc:	b	19328 <__assert_fail@plt+0x7f14>
   19300:	mov	r5, #0
   19304:	b	19328 <__assert_fail@plt+0x7f14>
   19308:	mov	ip, r2
   1930c:	mov	r5, #0
   19310:	b	19328 <__assert_fail@plt+0x7f14>
   19314:	ldr	r4, [sp, #88]	; 0x58
   19318:	mov	ip, r8
   1931c:	ldr	fp, [sp, #92]	; 0x5c
   19320:	ldr	r8, [sp, #56]	; 0x38
   19324:	ldr	r9, [sp, #84]	; 0x54
   19328:	cmp	ip, #1
   1932c:	bls	190b8 <__assert_fail@plt+0x7ca4>
   19330:	add	lr, r6, ip
   19334:	ldr	r3, [sp, #48]	; 0x30
   19338:	add	r1, r3, r6
   1933c:	mov	r3, #0
   19340:	eor	r0, r5, #1
   19344:	ldr	r2, [sp, #28]
   19348:	and	r0, r0, r2
   1934c:	uxtb	r0, r0
   19350:	str	r0, [sp, #56]	; 0x38
   19354:	mov	r7, #92	; 0x5c
   19358:	ldr	ip, [sp, #36]	; 0x24
   1935c:	str	r5, [sp, #84]	; 0x54
   19360:	ldr	r2, [sp, #44]	; 0x2c
   19364:	b	193d4 <__assert_fail@plt+0x7fc0>
   19368:	cmp	r2, #0
   1936c:	beq	1937c <__assert_fail@plt+0x7f68>
   19370:	cmp	r9, fp
   19374:	strbhi	r7, [r8, fp]
   19378:	add	fp, fp, #1
   1937c:	add	r5, r6, #1
   19380:	cmp	r5, lr
   19384:	bcs	19490 <__assert_fail@plt+0x807c>
   19388:	eor	r2, r3, #1
   1938c:	and	r2, r2, ip
   19390:	ands	r2, r2, #255	; 0xff
   19394:	beq	194ac <__assert_fail@plt+0x8098>
   19398:	cmp	r9, fp
   1939c:	movhi	r2, #39	; 0x27
   193a0:	strbhi	r2, [r8, fp]
   193a4:	add	r2, fp, #1
   193a8:	cmp	r9, r2
   193ac:	movhi	ip, #39	; 0x27
   193b0:	strbhi	ip, [r8, r2]
   193b4:	add	fp, fp, #2
   193b8:	ldr	ip, [sp, #56]	; 0x38
   193bc:	mov	r2, ip
   193c0:	mov	r6, r5
   193c4:	cmp	r9, fp
   193c8:	strbhi	r4, [r8, fp]
   193cc:	add	fp, fp, #1
   193d0:	ldrb	r4, [r1, #1]!
   193d4:	cmp	r0, #0
   193d8:	beq	19368 <__assert_fail@plt+0x7f54>
   193dc:	ldr	r3, [sp, #32]
   193e0:	cmp	r3, #0
   193e4:	bne	19678 <__assert_fail@plt+0x8264>
   193e8:	eor	r3, ip, #1
   193ec:	cmp	sl, #2
   193f0:	movne	r3, #0
   193f4:	andeq	r3, r3, #1
   193f8:	cmp	r3, #0
   193fc:	beq	19434 <__assert_fail@plt+0x8020>
   19400:	cmp	r9, fp
   19404:	movhi	ip, #39	; 0x27
   19408:	strbhi	ip, [r8, fp]
   1940c:	add	ip, fp, #1
   19410:	cmp	r9, ip
   19414:	movhi	r5, #36	; 0x24
   19418:	strbhi	r5, [r8, ip]
   1941c:	add	ip, fp, #2
   19420:	cmp	r9, ip
   19424:	movhi	r5, #39	; 0x27
   19428:	strbhi	r5, [r8, ip]
   1942c:	add	fp, fp, #3
   19430:	mov	ip, r3
   19434:	cmp	r9, fp
   19438:	strbhi	r7, [r8, fp]
   1943c:	add	r3, fp, #1
   19440:	cmp	r9, r3
   19444:	bls	19454 <__assert_fail@plt+0x8040>
   19448:	lsr	r5, r4, #6
   1944c:	add	r5, r5, #48	; 0x30
   19450:	strb	r5, [r8, r3]
   19454:	add	r3, fp, #2
   19458:	cmp	r9, r3
   1945c:	bls	1946c <__assert_fail@plt+0x8058>
   19460:	ubfx	r5, r4, #3, #3
   19464:	add	r5, r5, #48	; 0x30
   19468:	strb	r5, [r8, r3]
   1946c:	add	fp, fp, #3
   19470:	and	r4, r4, #7
   19474:	add	r4, r4, #48	; 0x30
   19478:	add	r5, r6, #1
   1947c:	cmp	r5, lr
   19480:	bcs	1949c <__assert_fail@plt+0x8088>
   19484:	ldr	r3, [sp, #56]	; 0x38
   19488:	mov	r6, r5
   1948c:	b	193c4 <__assert_fail@plt+0x7fb0>
   19490:	str	ip, [sp, #36]	; 0x24
   19494:	ldr	r5, [sp, #84]	; 0x54
   19498:	b	18ec8 <__assert_fail@plt+0x7ab4>
   1949c:	str	ip, [sp, #36]	; 0x24
   194a0:	ldr	r5, [sp, #84]	; 0x54
   194a4:	mov	r3, r0
   194a8:	b	18ec8 <__assert_fail@plt+0x7ab4>
   194ac:	mov	r6, r5
   194b0:	b	193c4 <__assert_fail@plt+0x7fb0>
   194b4:	ldr	r3, [sp, #44]	; 0x2c
   194b8:	b	18b1c <__assert_fail@plt+0x7708>
   194bc:	mov	r5, #0
   194c0:	mov	r3, r5
   194c4:	mov	r4, #63	; 0x3f
   194c8:	b	18b1c <__assert_fail@plt+0x7708>
   194cc:	mov	r5, #0
   194d0:	mov	r3, r5
   194d4:	mov	r4, #63	; 0x3f
   194d8:	b	18b1c <__assert_fail@plt+0x7708>
   194dc:	mov	r5, #0
   194e0:	mov	r3, r5
   194e4:	b	18b1c <__assert_fail@plt+0x7708>
   194e8:	mov	r5, #0
   194ec:	mov	r3, r5
   194f0:	b	18b1c <__assert_fail@plt+0x7708>
   194f4:	ldr	r5, [sp, #44]	; 0x2c
   194f8:	ldr	r3, [sp, #32]
   194fc:	b	18b1c <__assert_fail@plt+0x7708>
   19500:	ldr	r5, [sp, #44]	; 0x2c
   19504:	mov	r3, #0
   19508:	str	r3, [sp, #44]	; 0x2c
   1950c:	b	18b1c <__assert_fail@plt+0x7708>
   19510:	mov	r4, r3
   19514:	mov	r5, #0
   19518:	b	18b74 <__assert_fail@plt+0x7760>
   1951c:	mov	r5, #0
   19520:	mov	r4, #97	; 0x61
   19524:	b	18b74 <__assert_fail@plt+0x7760>
   19528:	mov	r5, #0
   1952c:	mov	r3, r5
   19530:	mov	r4, #92	; 0x5c
   19534:	b	18ec8 <__assert_fail@plt+0x7ab4>
   19538:	ldr	r3, [sp, #48]	; 0x30
   1953c:	ldrb	r5, [r3, r6]
   19540:	adds	r5, r5, #0
   19544:	movne	r5, #1
   19548:	b	18c18 <__assert_fail@plt+0x7804>
   1954c:	cmp	sl, #2
   19550:	movne	r3, #0
   19554:	moveq	r3, #1
   19558:	ldr	r1, [sp, #32]
   1955c:	cmp	fp, #0
   19560:	andeq	r2, r3, r1
   19564:	movne	r2, #0
   19568:	cmp	r2, #0
   1956c:	bne	1968c <__assert_fail@plt+0x8278>
   19570:	eor	r2, r1, #1
   19574:	uxtb	r2, r2
   19578:	and	r3, r3, r2
   1957c:	ldr	r1, [sp, #68]	; 0x44
   19580:	ands	r3, r1, r3
   19584:	beq	19618 <__assert_fail@plt+0x8204>
   19588:	ldr	r2, [sp, #40]	; 0x28
   1958c:	cmp	r2, #0
   19590:	bne	195c8 <__assert_fail@plt+0x81b4>
   19594:	ldr	r2, [sp, #72]	; 0x48
   19598:	adds	r2, r2, #0
   1959c:	movne	r2, #1
   195a0:	cmp	r9, #0
   195a4:	movne	r2, #0
   195a8:	str	r2, [sp, #68]	; 0x44
   195ac:	mov	sl, #2
   195b0:	ldr	r1, [sp, #40]	; 0x28
   195b4:	str	r1, [sp, #32]
   195b8:	cmp	r2, #0
   195bc:	beq	1960c <__assert_fail@plt+0x81f8>
   195c0:	ldr	r9, [sp, #72]	; 0x48
   195c4:	b	18320 <__assert_fail@plt+0x6f0c>
   195c8:	ldr	r3, [sp, #168]	; 0xa8
   195cc:	str	r3, [sp, #16]
   195d0:	ldr	r3, [sp, #164]	; 0xa4
   195d4:	str	r3, [sp, #12]
   195d8:	ldr	r3, [sp, #160]	; 0xa0
   195dc:	str	r3, [sp, #8]
   195e0:	ldr	r3, [sp, #156]	; 0x9c
   195e4:	str	r3, [sp, #4]
   195e8:	mov	r3, #5
   195ec:	str	r3, [sp]
   195f0:	ldr	r3, [sp, #24]
   195f4:	ldr	r2, [sp, #48]	; 0x30
   195f8:	ldr	r1, [sp, #72]	; 0x48
   195fc:	ldr	r0, [sp, #64]	; 0x40
   19600:	bl	182a8 <__assert_fail@plt+0x6e94>
   19604:	mov	fp, r0
   19608:	b	19728 <__assert_fail@plt+0x8314>
   1960c:	mov	r8, r9
   19610:	mov	r2, r3
   19614:	b	1961c <__assert_fail@plt+0x8208>
   19618:	mov	r8, r9
   1961c:	ldr	r3, [sp, #60]	; 0x3c
   19620:	cmp	r3, #0
   19624:	moveq	r2, #0
   19628:	andne	r2, r2, #1
   1962c:	cmp	r2, #0
   19630:	beq	19660 <__assert_fail@plt+0x824c>
   19634:	mov	r2, r3
   19638:	ldrb	r3, [r3]
   1963c:	cmp	r3, #0
   19640:	beq	19660 <__assert_fail@plt+0x824c>
   19644:	ldr	r1, [sp, #64]	; 0x40
   19648:	cmp	r8, fp
   1964c:	strbhi	r3, [r1, fp]
   19650:	add	fp, fp, #1
   19654:	ldrb	r3, [r2, #1]!
   19658:	cmp	r3, #0
   1965c:	bne	19648 <__assert_fail@plt+0x8234>
   19660:	cmp	r8, fp
   19664:	bls	19728 <__assert_fail@plt+0x8314>
   19668:	mov	r3, #0
   1966c:	ldr	r2, [sp, #64]	; 0x40
   19670:	strb	r3, [r2, fp]
   19674:	b	19728 <__assert_fail@plt+0x8314>
   19678:	mov	r8, r9
   1967c:	mov	r7, sl
   19680:	ldr	r3, [sp, #32]
   19684:	str	r3, [sp, #28]
   19688:	b	196d0 <__assert_fail@plt+0x82bc>
   1968c:	mov	r8, r9
   19690:	mov	r7, #2
   19694:	b	196d0 <__assert_fail@plt+0x82bc>
   19698:	mov	r8, r9
   1969c:	mov	r7, sl
   196a0:	b	196d0 <__assert_fail@plt+0x82bc>
   196a4:	mov	r8, r9
   196a8:	mov	r7, sl
   196ac:	b	196d0 <__assert_fail@plt+0x82bc>
   196b0:	mov	r8, r9
   196b4:	mov	r7, sl
   196b8:	b	196d0 <__assert_fail@plt+0x82bc>
   196bc:	mov	r8, r9
   196c0:	mov	r7, sl
   196c4:	b	196d0 <__assert_fail@plt+0x82bc>
   196c8:	mov	r8, r9
   196cc:	mov	r7, sl
   196d0:	ldr	r3, [sp, #28]
   196d4:	cmp	r7, #2
   196d8:	movne	r3, #0
   196dc:	andeq	r3, r3, #1
   196e0:	cmp	r3, #0
   196e4:	movne	r7, #4
   196e8:	ldr	r3, [sp, #168]	; 0xa8
   196ec:	str	r3, [sp, #16]
   196f0:	ldr	r3, [sp, #164]	; 0xa4
   196f4:	str	r3, [sp, #12]
   196f8:	mov	r3, #0
   196fc:	str	r3, [sp, #8]
   19700:	ldr	r3, [sp, #156]	; 0x9c
   19704:	bic	r3, r3, #2
   19708:	str	r3, [sp, #4]
   1970c:	str	r7, [sp]
   19710:	ldr	r3, [sp, #24]
   19714:	ldr	r2, [sp, #48]	; 0x30
   19718:	mov	r1, r8
   1971c:	ldr	r0, [sp, #64]	; 0x40
   19720:	bl	182a8 <__assert_fail@plt+0x6e94>
   19724:	mov	fp, r0
   19728:	mov	r0, fp
   1972c:	add	sp, sp, #116	; 0x74
   19730:	ldrd	r4, [sp]
   19734:	ldrd	r6, [sp, #8]
   19738:	ldrd	r8, [sp, #16]
   1973c:	ldrd	sl, [sp, #24]
   19740:	add	sp, sp, #32
   19744:	pop	{pc}		; (ldr pc, [sp], #4)
   19748:	mov	r8, r9
   1974c:	mov	r7, sl
   19750:	b	196e8 <__assert_fail@plt+0x82d4>
   19754:	add	fp, fp, #4
   19758:	str	r3, [sp, #36]	; 0x24
   1975c:	mov	r5, #0
   19760:	mov	r4, #48	; 0x30
   19764:	b	18b1c <__assert_fail@plt+0x7708>
   19768:	mov	r3, #1
   1976c:	str	r3, [sp, #32]
   19770:	str	r3, [sp, #28]
   19774:	str	r3, [sp, #52]	; 0x34
   19778:	movw	r3, #55396	; 0xd864
   1977c:	movt	r3, #1
   19780:	str	r3, [sp, #60]	; 0x3c
   19784:	mov	fp, #0
   19788:	mov	sl, #5
   1978c:	b	18380 <__assert_fail@plt+0x6f6c>
   19790:	ldr	r3, [sp, #48]	; 0x30
   19794:	ldrb	r4, [r3, r6]
   19798:	cmp	r4, #126	; 0x7e
   1979c:	ldrls	pc, [pc, r4, lsl #2]
   197a0:	b	1908c <__assert_fail@plt+0x7c78>
   197a4:	andeq	r8, r1, r4, lsl r8
   197a8:	andeq	r9, r1, ip, lsl #1
   197ac:	andeq	r9, r1, ip, lsl #1
   197b0:	andeq	r9, r1, ip, lsl #1
   197b4:	andeq	r9, r1, ip, lsl #1
   197b8:	andeq	r9, r1, ip, lsl #1
   197bc:	andeq	r9, r1, ip, lsl #1
   197c0:	andeq	r9, r1, ip, lsl r5
   197c4:			; <UNDEFINED> instruction: 0x00018ab8
   197c8:	andeq	r8, r1, ip, asr lr
   197cc:	andeq	r8, r1, r8, lsl pc
   197d0:	andeq	r8, r1, r0, ror lr
   197d4:	andeq	r8, r1, ip, asr #21
   197d8:	andeq	r8, r1, r0, ror #21
   197dc:	andeq	r9, r1, ip, lsl #1
   197e0:	andeq	r9, r1, ip, lsl #1
   197e4:	andeq	r9, r1, ip, lsl #1
   197e8:	andeq	r9, r1, ip, lsl #1
   197ec:	andeq	r9, r1, ip, lsl #1
   197f0:	andeq	r9, r1, ip, lsl #1
   197f4:	andeq	r9, r1, ip, lsl #1
   197f8:	andeq	r9, r1, ip, lsl #1
   197fc:	andeq	r9, r1, ip, lsl #1
   19800:	andeq	r9, r1, ip, lsl #1
   19804:	andeq	r9, r1, ip, lsl #1
   19808:	andeq	r9, r1, ip, lsl #1
   1980c:	andeq	r9, r1, ip, lsl #1
   19810:	andeq	r9, r1, ip, lsl #1
   19814:	andeq	r9, r1, ip, lsl #1
   19818:	andeq	r9, r1, ip, lsl #1
   1981c:	andeq	r9, r1, ip, lsl #1
   19820:	andeq	r9, r1, ip, lsl #1
   19824:	andeq	r8, r1, r0, lsr #31
   19828:	ldrdeq	r8, [r1], -ip
   1982c:	ldrdeq	r8, [r1], -ip
   19830:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   19834:	ldrdeq	r8, [r1], -ip
   19838:	andeq	r9, r1, r0, lsl #10
   1983c:	ldrdeq	r8, [r1], -ip
   19840:	andeq	r8, r1, ip, ror #31
   19844:	ldrdeq	r8, [r1], -ip
   19848:	ldrdeq	r8, [r1], -ip
   1984c:	ldrdeq	r8, [r1], -ip
   19850:	andeq	r9, r1, r0, lsl #10
   19854:	andeq	r9, r1, r0, lsl #10
   19858:	andeq	r9, r1, r0, lsl #10
   1985c:	andeq	r9, r1, r0, lsl #10
   19860:	andeq	r9, r1, r0, lsl #10
   19864:	andeq	r9, r1, r0, lsl #10
   19868:	andeq	r9, r1, r0, lsl #10
   1986c:	andeq	r9, r1, r0, lsl #10
   19870:	andeq	r9, r1, r0, lsl #10
   19874:	andeq	r9, r1, r0, lsl #10
   19878:	andeq	r9, r1, r0, lsl #10
   1987c:	andeq	r9, r1, r0, lsl #10
   19880:	andeq	r9, r1, r0, lsl #10
   19884:	andeq	r9, r1, r0, lsl #10
   19888:	andeq	r9, r1, r0, lsl #10
   1988c:	andeq	r9, r1, r0, lsl #10
   19890:	ldrdeq	r8, [r1], -ip
   19894:	ldrdeq	r8, [r1], -ip
   19898:	ldrdeq	r8, [r1], -ip
   1989c:	ldrdeq	r8, [r1], -ip
   198a0:	andeq	r8, r1, ip, asr #18
   198a4:	andeq	r9, r1, ip, lsl #1
   198a8:	andeq	r9, r1, r0, lsl #10
   198ac:	andeq	r9, r1, r0, lsl #10
   198b0:	andeq	r9, r1, r0, lsl #10
   198b4:	andeq	r9, r1, r0, lsl #10
   198b8:	andeq	r9, r1, r0, lsl #10
   198bc:	andeq	r9, r1, r0, lsl #10
   198c0:	andeq	r9, r1, r0, lsl #10
   198c4:	andeq	r9, r1, r0, lsl #10
   198c8:	andeq	r9, r1, r0, lsl #10
   198cc:	andeq	r9, r1, r0, lsl #10
   198d0:	andeq	r9, r1, r0, lsl #10
   198d4:	andeq	r9, r1, r0, lsl #10
   198d8:	andeq	r9, r1, r0, lsl #10
   198dc:	andeq	r9, r1, r0, lsl #10
   198e0:	andeq	r9, r1, r0, lsl #10
   198e4:	andeq	r9, r1, r0, lsl #10
   198e8:	andeq	r9, r1, r0, lsl #10
   198ec:	andeq	r9, r1, r0, lsl #10
   198f0:	andeq	r9, r1, r0, lsl #10
   198f4:	andeq	r9, r1, r0, lsl #10
   198f8:	andeq	r9, r1, r0, lsl #10
   198fc:	andeq	r9, r1, r0, lsl #10
   19900:	andeq	r9, r1, r0, lsl #10
   19904:	andeq	r9, r1, r0, lsl #10
   19908:	andeq	r9, r1, r0, lsl #10
   1990c:	andeq	r9, r1, r0, lsl #10
   19910:	ldrdeq	r8, [r1], -ip
   19914:	andeq	r8, r1, r4, lsl #29
   19918:	andeq	r9, r1, r0, lsl #10
   1991c:	ldrdeq	r8, [r1], -ip
   19920:	andeq	r9, r1, r0, lsl #10
   19924:	ldrdeq	r8, [r1], -ip
   19928:	andeq	r9, r1, r0, lsl #10
   1992c:	andeq	r9, r1, r0, lsl #10
   19930:	andeq	r9, r1, r0, lsl #10
   19934:	andeq	r9, r1, r0, lsl #10
   19938:	andeq	r9, r1, r0, lsl #10
   1993c:	andeq	r9, r1, r0, lsl #10
   19940:	andeq	r9, r1, r0, lsl #10
   19944:	andeq	r9, r1, r0, lsl #10
   19948:	andeq	r9, r1, r0, lsl #10
   1994c:	andeq	r9, r1, r0, lsl #10
   19950:	andeq	r9, r1, r0, lsl #10
   19954:	andeq	r9, r1, r0, lsl #10
   19958:	andeq	r9, r1, r0, lsl #10
   1995c:	andeq	r9, r1, r0, lsl #10
   19960:	andeq	r9, r1, r0, lsl #10
   19964:	andeq	r9, r1, r0, lsl #10
   19968:	andeq	r9, r1, r0, lsl #10
   1996c:	andeq	r9, r1, r0, lsl #10
   19970:	andeq	r9, r1, r0, lsl #10
   19974:	andeq	r9, r1, r0, lsl #10
   19978:	andeq	r9, r1, r0, lsl #10
   1997c:	andeq	r9, r1, r0, lsl #10
   19980:	andeq	r9, r1, r0, lsl #10
   19984:	andeq	r9, r1, r0, lsl #10
   19988:	andeq	r9, r1, r0, lsl #10
   1998c:	andeq	r9, r1, r0, lsl #10
   19990:	andeq	r8, r1, r4, asr #30
   19994:	ldrdeq	r8, [r1], -ip
   19998:	andeq	r8, r1, r4, asr #30
   1999c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   199a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199a4:	strd	r6, [sp, #8]
   199a8:	strd	r8, [sp, #16]
   199ac:	strd	sl, [sp, #24]
   199b0:	str	lr, [sp, #32]
   199b4:	sub	sp, sp, #52	; 0x34
   199b8:	mov	r5, r0
   199bc:	str	r1, [sp, #24]
   199c0:	str	r2, [sp, #28]
   199c4:	mov	r4, r3
   199c8:	bl	112dc <__errno_location@plt>
   199cc:	str	r0, [sp, #32]
   199d0:	ldr	r3, [r0]
   199d4:	str	r3, [sp, #36]	; 0x24
   199d8:	movw	r3, #57708	; 0xe16c
   199dc:	movt	r3, #2
   199e0:	ldr	r6, [r3]
   199e4:	cmn	r5, #-2147483647	; 0x80000001
   199e8:	movne	r3, #0
   199ec:	moveq	r3, #1
   199f0:	orrs	r3, r3, r5, lsr #31
   199f4:	bne	19b58 <__assert_fail@plt+0x8744>
   199f8:	movw	r3, #57708	; 0xe16c
   199fc:	movt	r3, #2
   19a00:	ldr	r2, [r3, #4]
   19a04:	cmp	r2, r5
   19a08:	bgt	19a78 <__assert_fail@plt+0x8664>
   19a0c:	str	r2, [sp, #44]	; 0x2c
   19a10:	add	r3, r3, #8
   19a14:	cmp	r6, r3
   19a18:	beq	19b5c <__assert_fail@plt+0x8748>
   19a1c:	sub	r2, r5, r2
   19a20:	mov	r3, #8
   19a24:	str	r3, [sp]
   19a28:	mvn	r3, #-2147483648	; 0x80000000
   19a2c:	add	r2, r2, #1
   19a30:	add	r1, sp, #44	; 0x2c
   19a34:	mov	r0, r6
   19a38:	bl	1ac54 <__assert_fail@plt+0x9840>
   19a3c:	mov	r6, r0
   19a40:	movw	r3, #57708	; 0xe16c
   19a44:	movt	r3, #2
   19a48:	str	r0, [r3]
   19a4c:	movw	r7, #57708	; 0xe16c
   19a50:	movt	r7, #2
   19a54:	ldr	r0, [r7, #4]
   19a58:	ldr	r2, [sp, #44]	; 0x2c
   19a5c:	sub	r2, r2, r0
   19a60:	lsl	r2, r2, #3
   19a64:	mov	r1, #0
   19a68:	add	r0, r6, r0, lsl #3
   19a6c:	bl	112f4 <memset@plt>
   19a70:	ldr	r3, [sp, #44]	; 0x2c
   19a74:	str	r3, [r7, #4]
   19a78:	add	fp, r6, r5, lsl #3
   19a7c:	ldr	r8, [r6, r5, lsl #3]
   19a80:	ldr	r7, [fp, #4]
   19a84:	ldr	r3, [r4, #4]
   19a88:	orr	r9, r3, #1
   19a8c:	add	sl, r4, #8
   19a90:	ldr	r3, [r4, #44]	; 0x2c
   19a94:	str	r3, [sp, #16]
   19a98:	ldr	r3, [r4, #40]	; 0x28
   19a9c:	str	r3, [sp, #12]
   19aa0:	str	sl, [sp, #8]
   19aa4:	str	r9, [sp, #4]
   19aa8:	ldr	r3, [r4]
   19aac:	str	r3, [sp]
   19ab0:	ldr	r3, [sp, #28]
   19ab4:	ldr	r2, [sp, #24]
   19ab8:	mov	r1, r8
   19abc:	mov	r0, r7
   19ac0:	bl	182a8 <__assert_fail@plt+0x6e94>
   19ac4:	cmp	r8, r0
   19ac8:	bhi	19b2c <__assert_fail@plt+0x8718>
   19acc:	add	r8, r0, #1
   19ad0:	str	r8, [r6, r5, lsl #3]
   19ad4:	movw	r3, #57840	; 0xe1f0
   19ad8:	movt	r3, #2
   19adc:	cmp	r7, r3
   19ae0:	beq	19aec <__assert_fail@plt+0x86d8>
   19ae4:	mov	r0, r7
   19ae8:	bl	16d78 <__assert_fail@plt+0x5964>
   19aec:	mov	r0, r8
   19af0:	bl	1aa50 <__assert_fail@plt+0x963c>
   19af4:	mov	r7, r0
   19af8:	str	r0, [fp, #4]
   19afc:	ldr	r3, [r4, #44]	; 0x2c
   19b00:	str	r3, [sp, #16]
   19b04:	ldr	r3, [r4, #40]	; 0x28
   19b08:	str	r3, [sp, #12]
   19b0c:	str	sl, [sp, #8]
   19b10:	str	r9, [sp, #4]
   19b14:	ldr	r3, [r4]
   19b18:	str	r3, [sp]
   19b1c:	ldr	r3, [sp, #28]
   19b20:	ldr	r2, [sp, #24]
   19b24:	mov	r1, r8
   19b28:	bl	182a8 <__assert_fail@plt+0x6e94>
   19b2c:	ldr	r3, [sp, #32]
   19b30:	ldr	r2, [sp, #36]	; 0x24
   19b34:	str	r2, [r3]
   19b38:	mov	r0, r7
   19b3c:	add	sp, sp, #52	; 0x34
   19b40:	ldrd	r4, [sp]
   19b44:	ldrd	r6, [sp, #8]
   19b48:	ldrd	r8, [sp, #16]
   19b4c:	ldrd	sl, [sp, #24]
   19b50:	add	sp, sp, #32
   19b54:	pop	{pc}		; (ldr pc, [sp], #4)
   19b58:	bl	113f0 <abort@plt>
   19b5c:	sub	r2, r5, r2
   19b60:	mov	r3, #8
   19b64:	str	r3, [sp]
   19b68:	mvn	r3, #-2147483648	; 0x80000000
   19b6c:	add	r2, r2, #1
   19b70:	add	r1, sp, #44	; 0x2c
   19b74:	mov	r0, #0
   19b78:	bl	1ac54 <__assert_fail@plt+0x9840>
   19b7c:	mov	r6, r0
   19b80:	movw	r3, #57708	; 0xe16c
   19b84:	movt	r3, #2
   19b88:	str	r0, [r3]
   19b8c:	ldrd	r2, [r3, #8]
   19b90:	strd	r2, [r0]
   19b94:	b	19a4c <__assert_fail@plt+0x8638>
   19b98:	strd	r4, [sp, #-16]!
   19b9c:	str	r6, [sp, #8]
   19ba0:	str	lr, [sp, #12]
   19ba4:	mov	r4, r0
   19ba8:	bl	112dc <__errno_location@plt>
   19bac:	mov	r5, r0
   19bb0:	ldr	r6, [r0]
   19bb4:	cmp	r4, #0
   19bb8:	ldr	r3, [pc, #32]	; 19be0 <__assert_fail@plt+0x87cc>
   19bbc:	moveq	r4, r3
   19bc0:	mov	r1, #48	; 0x30
   19bc4:	mov	r0, r4
   19bc8:	bl	1adc4 <__assert_fail@plt+0x99b0>
   19bcc:	str	r6, [r5]
   19bd0:	ldrd	r4, [sp]
   19bd4:	ldr	r6, [sp, #8]
   19bd8:	add	sp, sp, #12
   19bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   19be0:	strdeq	lr, [r2], -r0
   19be4:	subs	r3, r0, #0
   19be8:	ldr	r2, [pc, #8]	; 19bf8 <__assert_fail@plt+0x87e4>
   19bec:	moveq	r3, r2
   19bf0:	ldr	r0, [r3]
   19bf4:	bx	lr
   19bf8:	strdeq	lr, [r2], -r0
   19bfc:	subs	r3, r0, #0
   19c00:	ldr	r2, [pc, #8]	; 19c10 <__assert_fail@plt+0x87fc>
   19c04:	moveq	r3, r2
   19c08:	str	r1, [r3]
   19c0c:	bx	lr
   19c10:	strdeq	lr, [r2], -r0
   19c14:	push	{lr}		; (str lr, [sp, #-4]!)
   19c18:	subs	r3, r0, #0
   19c1c:	ldr	r0, [pc, #44]	; 19c50 <__assert_fail@plt+0x883c>
   19c20:	moveq	r3, r0
   19c24:	add	r3, r3, #8
   19c28:	lsr	lr, r1, #5
   19c2c:	and	r1, r1, #31
   19c30:	ldr	ip, [r3, lr, lsl #2]
   19c34:	lsr	r0, ip, r1
   19c38:	eor	r2, r2, r0
   19c3c:	and	r2, r2, #1
   19c40:	eor	r1, ip, r2, lsl r1
   19c44:	str	r1, [r3, lr, lsl #2]
   19c48:	and	r0, r0, #1
   19c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c50:	strdeq	lr, [r2], -r0
   19c54:	subs	r3, r0, #0
   19c58:	ldr	r2, [pc, #12]	; 19c6c <__assert_fail@plt+0x8858>
   19c5c:	moveq	r3, r2
   19c60:	ldr	r0, [r3, #4]
   19c64:	str	r1, [r3, #4]
   19c68:	bx	lr
   19c6c:	strdeq	lr, [r2], -r0
   19c70:	subs	r3, r0, #0
   19c74:	ldr	r0, [pc, #44]	; 19ca8 <__assert_fail@plt+0x8894>
   19c78:	moveq	r3, r0
   19c7c:	mov	r0, #10
   19c80:	str	r0, [r3]
   19c84:	cmp	r2, #0
   19c88:	cmpne	r1, #0
   19c8c:	beq	19c9c <__assert_fail@plt+0x8888>
   19c90:	str	r1, [r3, #40]	; 0x28
   19c94:	str	r2, [r3, #44]	; 0x2c
   19c98:	bx	lr
   19c9c:	str	r4, [sp, #-8]!
   19ca0:	str	lr, [sp, #4]
   19ca4:	bl	113f0 <abort@plt>
   19ca8:	strdeq	lr, [r2], -r0
   19cac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19cb0:	strd	r6, [sp, #8]
   19cb4:	strd	r8, [sp, #16]
   19cb8:	str	sl, [sp, #24]
   19cbc:	str	lr, [sp, #28]
   19cc0:	sub	sp, sp, #24
   19cc4:	mov	r7, r0
   19cc8:	mov	r8, r1
   19ccc:	mov	r9, r2
   19cd0:	mov	sl, r3
   19cd4:	ldr	r4, [sp, #56]	; 0x38
   19cd8:	cmp	r4, #0
   19cdc:	ldr	r3, [pc, #104]	; 19d4c <__assert_fail@plt+0x8938>
   19ce0:	moveq	r4, r3
   19ce4:	bl	112dc <__errno_location@plt>
   19ce8:	mov	r5, r0
   19cec:	ldr	r6, [r0]
   19cf0:	ldr	r3, [r4, #44]	; 0x2c
   19cf4:	str	r3, [sp, #16]
   19cf8:	ldr	r3, [r4, #40]	; 0x28
   19cfc:	str	r3, [sp, #12]
   19d00:	add	r3, r4, #8
   19d04:	str	r3, [sp, #8]
   19d08:	ldr	r3, [r4, #4]
   19d0c:	str	r3, [sp, #4]
   19d10:	ldr	r3, [r4]
   19d14:	str	r3, [sp]
   19d18:	mov	r3, sl
   19d1c:	mov	r2, r9
   19d20:	mov	r1, r8
   19d24:	mov	r0, r7
   19d28:	bl	182a8 <__assert_fail@plt+0x6e94>
   19d2c:	str	r6, [r5]
   19d30:	add	sp, sp, #24
   19d34:	ldrd	r4, [sp]
   19d38:	ldrd	r6, [sp, #8]
   19d3c:	ldrd	r8, [sp, #16]
   19d40:	ldr	sl, [sp, #24]
   19d44:	add	sp, sp, #28
   19d48:	pop	{pc}		; (ldr pc, [sp], #4)
   19d4c:	strdeq	lr, [r2], -r0
   19d50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d54:	strd	r6, [sp, #8]
   19d58:	strd	r8, [sp, #16]
   19d5c:	strd	sl, [sp, #24]
   19d60:	str	lr, [sp, #32]
   19d64:	sub	sp, sp, #44	; 0x2c
   19d68:	mov	r8, r0
   19d6c:	mov	sl, r1
   19d70:	mov	r6, r2
   19d74:	subs	r4, r3, #0
   19d78:	ldr	r3, [pc, #200]	; 19e48 <__assert_fail@plt+0x8a34>
   19d7c:	moveq	r4, r3
   19d80:	bl	112dc <__errno_location@plt>
   19d84:	mov	r7, r0
   19d88:	ldr	fp, [r0]
   19d8c:	ldr	r5, [r4, #4]
   19d90:	cmp	r6, #0
   19d94:	orreq	r5, r5, #1
   19d98:	add	r9, r4, #8
   19d9c:	ldr	r3, [r4, #44]	; 0x2c
   19da0:	str	r3, [sp, #16]
   19da4:	ldr	r3, [r4, #40]	; 0x28
   19da8:	str	r3, [sp, #12]
   19dac:	str	r9, [sp, #8]
   19db0:	str	r5, [sp, #4]
   19db4:	ldr	r3, [r4]
   19db8:	str	r3, [sp]
   19dbc:	str	sl, [sp, #36]	; 0x24
   19dc0:	mov	r3, sl
   19dc4:	str	r8, [sp, #32]
   19dc8:	mov	r2, r8
   19dcc:	mov	r1, #0
   19dd0:	mov	r0, r1
   19dd4:	bl	182a8 <__assert_fail@plt+0x6e94>
   19dd8:	mov	sl, r0
   19ddc:	add	r8, r0, #1
   19de0:	mov	r0, r8
   19de4:	bl	1aa50 <__assert_fail@plt+0x963c>
   19de8:	str	r0, [sp, #28]
   19dec:	ldr	r3, [r4, #44]	; 0x2c
   19df0:	str	r3, [sp, #16]
   19df4:	ldr	r3, [r4, #40]	; 0x28
   19df8:	str	r3, [sp, #12]
   19dfc:	str	r9, [sp, #8]
   19e00:	str	r5, [sp, #4]
   19e04:	ldr	r3, [r4]
   19e08:	str	r3, [sp]
   19e0c:	ldr	r3, [sp, #36]	; 0x24
   19e10:	ldr	r2, [sp, #32]
   19e14:	mov	r1, r8
   19e18:	bl	182a8 <__assert_fail@plt+0x6e94>
   19e1c:	str	fp, [r7]
   19e20:	cmp	r6, #0
   19e24:	strne	sl, [r6]
   19e28:	ldr	r0, [sp, #28]
   19e2c:	add	sp, sp, #44	; 0x2c
   19e30:	ldrd	r4, [sp]
   19e34:	ldrd	r6, [sp, #8]
   19e38:	ldrd	r8, [sp, #16]
   19e3c:	ldrd	sl, [sp, #24]
   19e40:	add	sp, sp, #32
   19e44:	pop	{pc}		; (ldr pc, [sp], #4)
   19e48:	strdeq	lr, [r2], -r0
   19e4c:	str	r4, [sp, #-8]!
   19e50:	str	lr, [sp, #4]
   19e54:	mov	r3, r2
   19e58:	mov	r2, #0
   19e5c:	bl	19d50 <__assert_fail@plt+0x893c>
   19e60:	ldr	r4, [sp]
   19e64:	add	sp, sp, #4
   19e68:	pop	{pc}		; (ldr pc, [sp], #4)
   19e6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19e70:	strd	r6, [sp, #8]
   19e74:	str	r8, [sp, #16]
   19e78:	str	lr, [sp, #20]
   19e7c:	movw	r3, #57708	; 0xe16c
   19e80:	movt	r3, #2
   19e84:	ldr	r7, [r3]
   19e88:	ldr	r3, [r3, #4]
   19e8c:	cmp	r3, #1
   19e90:	ble	19ebc <__assert_fail@plt+0x8aa8>
   19e94:	mov	r4, #1
   19e98:	add	r6, r7, #4
   19e9c:	movw	r5, #57708	; 0xe16c
   19ea0:	movt	r5, #2
   19ea4:	ldr	r0, [r6, r4, lsl #3]
   19ea8:	bl	16d78 <__assert_fail@plt+0x5964>
   19eac:	add	r4, r4, #1
   19eb0:	ldr	r3, [r5, #4]
   19eb4:	cmp	r3, r4
   19eb8:	bgt	19ea4 <__assert_fail@plt+0x8a90>
   19ebc:	ldr	r0, [r7, #4]
   19ec0:	movw	r3, #57840	; 0xe1f0
   19ec4:	movt	r3, #2
   19ec8:	cmp	r0, r3
   19ecc:	beq	19ef0 <__assert_fail@plt+0x8adc>
   19ed0:	bl	16d78 <__assert_fail@plt+0x5964>
   19ed4:	movw	r3, #57708	; 0xe16c
   19ed8:	movt	r3, #2
   19edc:	mov	r2, #256	; 0x100
   19ee0:	str	r2, [r3, #8]
   19ee4:	movw	r2, #57840	; 0xe1f0
   19ee8:	movt	r2, #2
   19eec:	str	r2, [r3, #12]
   19ef0:	ldr	r3, [pc, #64]	; 19f38 <__assert_fail@plt+0x8b24>
   19ef4:	cmp	r7, r3
   19ef8:	beq	19f14 <__assert_fail@plt+0x8b00>
   19efc:	mov	r0, r7
   19f00:	bl	16d78 <__assert_fail@plt+0x5964>
   19f04:	movw	r3, #57708	; 0xe16c
   19f08:	movt	r3, #2
   19f0c:	add	r2, r3, #8
   19f10:	str	r2, [r3]
   19f14:	movw	r3, #57708	; 0xe16c
   19f18:	movt	r3, #2
   19f1c:	mov	r2, #1
   19f20:	str	r2, [r3, #4]
   19f24:	ldrd	r4, [sp]
   19f28:	ldrd	r6, [sp, #8]
   19f2c:	ldr	r8, [sp, #16]
   19f30:	add	sp, sp, #20
   19f34:	pop	{pc}		; (ldr pc, [sp], #4)
   19f38:	andeq	lr, r2, r4, ror r1
   19f3c:	str	r4, [sp, #-8]!
   19f40:	str	lr, [sp, #4]
   19f44:	ldr	r3, [pc, #16]	; 19f5c <__assert_fail@plt+0x8b48>
   19f48:	mvn	r2, #0
   19f4c:	bl	199a0 <__assert_fail@plt+0x858c>
   19f50:	ldr	r4, [sp]
   19f54:	add	sp, sp, #4
   19f58:	pop	{pc}		; (ldr pc, [sp], #4)
   19f5c:	strdeq	lr, [r2], -r0
   19f60:	str	r4, [sp, #-8]!
   19f64:	str	lr, [sp, #4]
   19f68:	ldr	r3, [pc, #12]	; 19f7c <__assert_fail@plt+0x8b68>
   19f6c:	bl	199a0 <__assert_fail@plt+0x858c>
   19f70:	ldr	r4, [sp]
   19f74:	add	sp, sp, #4
   19f78:	pop	{pc}		; (ldr pc, [sp], #4)
   19f7c:	strdeq	lr, [r2], -r0
   19f80:	str	r4, [sp, #-8]!
   19f84:	str	lr, [sp, #4]
   19f88:	mov	r1, r0
   19f8c:	mov	r0, #0
   19f90:	bl	19f3c <__assert_fail@plt+0x8b28>
   19f94:	ldr	r4, [sp]
   19f98:	add	sp, sp, #4
   19f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   19fa0:	str	r4, [sp, #-8]!
   19fa4:	str	lr, [sp, #4]
   19fa8:	mov	r2, r1
   19fac:	mov	r1, r0
   19fb0:	mov	r0, #0
   19fb4:	bl	19f60 <__assert_fail@plt+0x8b4c>
   19fb8:	ldr	r4, [sp]
   19fbc:	add	sp, sp, #4
   19fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fc4:	strd	r4, [sp, #-12]!
   19fc8:	str	lr, [sp, #8]
   19fcc:	sub	sp, sp, #52	; 0x34
   19fd0:	mov	r4, r0
   19fd4:	mov	r5, r2
   19fd8:	mov	r0, sp
   19fdc:	bl	18114 <__assert_fail@plt+0x6d00>
   19fe0:	mov	r3, sp
   19fe4:	mvn	r2, #0
   19fe8:	mov	r1, r5
   19fec:	mov	r0, r4
   19ff0:	bl	199a0 <__assert_fail@plt+0x858c>
   19ff4:	add	sp, sp, #52	; 0x34
   19ff8:	ldrd	r4, [sp]
   19ffc:	add	sp, sp, #8
   1a000:	pop	{pc}		; (ldr pc, [sp], #4)
   1a004:	strd	r4, [sp, #-16]!
   1a008:	str	r6, [sp, #8]
   1a00c:	str	lr, [sp, #12]
   1a010:	sub	sp, sp, #48	; 0x30
   1a014:	mov	r4, r0
   1a018:	mov	r5, r2
   1a01c:	mov	r6, r3
   1a020:	mov	r0, sp
   1a024:	bl	18114 <__assert_fail@plt+0x6d00>
   1a028:	mov	r3, sp
   1a02c:	mov	r2, r6
   1a030:	mov	r1, r5
   1a034:	mov	r0, r4
   1a038:	bl	199a0 <__assert_fail@plt+0x858c>
   1a03c:	add	sp, sp, #48	; 0x30
   1a040:	ldrd	r4, [sp]
   1a044:	ldr	r6, [sp, #8]
   1a048:	add	sp, sp, #12
   1a04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a050:	str	r4, [sp, #-8]!
   1a054:	str	lr, [sp, #4]
   1a058:	mov	r2, r1
   1a05c:	mov	r1, r0
   1a060:	mov	r0, #0
   1a064:	bl	19fc4 <__assert_fail@plt+0x8bb0>
   1a068:	ldr	r4, [sp]
   1a06c:	add	sp, sp, #4
   1a070:	pop	{pc}		; (ldr pc, [sp], #4)
   1a074:	str	r4, [sp, #-8]!
   1a078:	str	lr, [sp, #4]
   1a07c:	mov	r3, r2
   1a080:	mov	r2, r1
   1a084:	mov	r1, r0
   1a088:	mov	r0, #0
   1a08c:	bl	1a004 <__assert_fail@plt+0x8bf0>
   1a090:	ldr	r4, [sp]
   1a094:	add	sp, sp, #4
   1a098:	pop	{pc}		; (ldr pc, [sp], #4)
   1a09c:	strd	r4, [sp, #-12]!
   1a0a0:	str	lr, [sp, #8]
   1a0a4:	sub	sp, sp, #52	; 0x34
   1a0a8:	mov	r4, r0
   1a0ac:	mov	r5, r1
   1a0b0:	mov	r1, r2
   1a0b4:	ldr	r0, [pc, #92]	; 1a118 <__assert_fail@plt+0x8d04>
   1a0b8:	ldrd	r2, [r0]
   1a0bc:	strd	r2, [sp]
   1a0c0:	ldrd	r2, [r0, #8]
   1a0c4:	strd	r2, [sp, #8]
   1a0c8:	ldrd	r2, [r0, #16]
   1a0cc:	strd	r2, [sp, #16]
   1a0d0:	ldrd	r2, [r0, #24]
   1a0d4:	strd	r2, [sp, #24]
   1a0d8:	ldrd	r2, [r0, #32]
   1a0dc:	strd	r2, [sp, #32]
   1a0e0:	ldrd	r2, [r0, #40]	; 0x28
   1a0e4:	strd	r2, [sp, #40]	; 0x28
   1a0e8:	mov	r2, #1
   1a0ec:	mov	r0, sp
   1a0f0:	bl	19c14 <__assert_fail@plt+0x8800>
   1a0f4:	mov	r3, sp
   1a0f8:	mov	r2, r5
   1a0fc:	mov	r1, r4
   1a100:	mov	r0, #0
   1a104:	bl	199a0 <__assert_fail@plt+0x858c>
   1a108:	add	sp, sp, #52	; 0x34
   1a10c:	ldrd	r4, [sp]
   1a110:	add	sp, sp, #8
   1a114:	pop	{pc}		; (ldr pc, [sp], #4)
   1a118:	strdeq	lr, [r2], -r0
   1a11c:	str	r4, [sp, #-8]!
   1a120:	str	lr, [sp, #4]
   1a124:	mov	r2, r1
   1a128:	mvn	r1, #0
   1a12c:	bl	1a09c <__assert_fail@plt+0x8c88>
   1a130:	ldr	r4, [sp]
   1a134:	add	sp, sp, #4
   1a138:	pop	{pc}		; (ldr pc, [sp], #4)
   1a13c:	str	r4, [sp, #-8]!
   1a140:	str	lr, [sp, #4]
   1a144:	mov	r1, #58	; 0x3a
   1a148:	bl	1a11c <__assert_fail@plt+0x8d08>
   1a14c:	ldr	r4, [sp]
   1a150:	add	sp, sp, #4
   1a154:	pop	{pc}		; (ldr pc, [sp], #4)
   1a158:	str	r4, [sp, #-8]!
   1a15c:	str	lr, [sp, #4]
   1a160:	mov	r2, #58	; 0x3a
   1a164:	bl	1a09c <__assert_fail@plt+0x8c88>
   1a168:	ldr	r4, [sp]
   1a16c:	add	sp, sp, #4
   1a170:	pop	{pc}		; (ldr pc, [sp], #4)
   1a174:	strd	r4, [sp, #-12]!
   1a178:	str	lr, [sp, #8]
   1a17c:	sub	sp, sp, #100	; 0x64
   1a180:	mov	r4, r0
   1a184:	mov	r5, r2
   1a188:	mov	r0, sp
   1a18c:	bl	18114 <__assert_fail@plt+0x6d00>
   1a190:	ldrd	r2, [sp]
   1a194:	strd	r2, [sp, #48]	; 0x30
   1a198:	ldrd	r2, [sp, #8]
   1a19c:	strd	r2, [sp, #56]	; 0x38
   1a1a0:	ldrd	r2, [sp, #16]
   1a1a4:	strd	r2, [sp, #64]	; 0x40
   1a1a8:	ldrd	r2, [sp, #24]
   1a1ac:	strd	r2, [sp, #72]	; 0x48
   1a1b0:	ldrd	r2, [sp, #32]
   1a1b4:	strd	r2, [sp, #80]	; 0x50
   1a1b8:	ldrd	r2, [sp, #40]	; 0x28
   1a1bc:	strd	r2, [sp, #88]	; 0x58
   1a1c0:	mov	r2, #1
   1a1c4:	mov	r1, #58	; 0x3a
   1a1c8:	add	r0, sp, #48	; 0x30
   1a1cc:	bl	19c14 <__assert_fail@plt+0x8800>
   1a1d0:	add	r3, sp, #48	; 0x30
   1a1d4:	mvn	r2, #0
   1a1d8:	mov	r1, r5
   1a1dc:	mov	r0, r4
   1a1e0:	bl	199a0 <__assert_fail@plt+0x858c>
   1a1e4:	add	sp, sp, #100	; 0x64
   1a1e8:	ldrd	r4, [sp]
   1a1ec:	add	sp, sp, #8
   1a1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a1f8:	strd	r6, [sp, #8]
   1a1fc:	str	lr, [sp, #16]
   1a200:	sub	sp, sp, #52	; 0x34
   1a204:	mov	r4, r0
   1a208:	mov	r5, r3
   1a20c:	ldr	r3, [pc, #92]	; 1a270 <__assert_fail@plt+0x8e5c>
   1a210:	ldrd	r6, [r3]
   1a214:	strd	r6, [sp]
   1a218:	ldrd	r6, [r3, #8]
   1a21c:	strd	r6, [sp, #8]
   1a220:	ldrd	r6, [r3, #16]
   1a224:	strd	r6, [sp, #16]
   1a228:	ldrd	r6, [r3, #24]
   1a22c:	strd	r6, [sp, #24]
   1a230:	ldrd	r6, [r3, #32]
   1a234:	strd	r6, [sp, #32]
   1a238:	ldrd	r6, [r3, #40]	; 0x28
   1a23c:	strd	r6, [sp, #40]	; 0x28
   1a240:	mov	r0, sp
   1a244:	bl	19c70 <__assert_fail@plt+0x885c>
   1a248:	mov	r3, sp
   1a24c:	ldr	r2, [sp, #72]	; 0x48
   1a250:	mov	r1, r5
   1a254:	mov	r0, r4
   1a258:	bl	199a0 <__assert_fail@plt+0x858c>
   1a25c:	add	sp, sp, #52	; 0x34
   1a260:	ldrd	r4, [sp]
   1a264:	ldrd	r6, [sp, #8]
   1a268:	add	sp, sp, #16
   1a26c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a270:	strdeq	lr, [r2], -r0
   1a274:	push	{lr}		; (str lr, [sp, #-4]!)
   1a278:	sub	sp, sp, #12
   1a27c:	mvn	ip, #0
   1a280:	str	ip, [sp]
   1a284:	bl	1a1f4 <__assert_fail@plt+0x8de0>
   1a288:	add	sp, sp, #12
   1a28c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a290:	str	r4, [sp, #-8]!
   1a294:	str	lr, [sp, #4]
   1a298:	mov	r3, r2
   1a29c:	mov	r2, r1
   1a2a0:	mov	r1, r0
   1a2a4:	mov	r0, #0
   1a2a8:	bl	1a274 <__assert_fail@plt+0x8e60>
   1a2ac:	ldr	r4, [sp]
   1a2b0:	add	sp, sp, #4
   1a2b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a2bc:	sub	sp, sp, #12
   1a2c0:	str	r3, [sp]
   1a2c4:	mov	r3, r2
   1a2c8:	mov	r2, r1
   1a2cc:	mov	r1, r0
   1a2d0:	mov	r0, #0
   1a2d4:	bl	1a1f4 <__assert_fail@plt+0x8de0>
   1a2d8:	add	sp, sp, #12
   1a2dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e0:	str	r4, [sp, #-8]!
   1a2e4:	str	lr, [sp, #4]
   1a2e8:	ldr	r3, [pc, #12]	; 1a2fc <__assert_fail@plt+0x8ee8>
   1a2ec:	bl	199a0 <__assert_fail@plt+0x858c>
   1a2f0:	ldr	r4, [sp]
   1a2f4:	add	sp, sp, #4
   1a2f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2fc:	andeq	lr, r2, ip, ror r1
   1a300:	str	r4, [sp, #-8]!
   1a304:	str	lr, [sp, #4]
   1a308:	mov	r2, r1
   1a30c:	mov	r1, r0
   1a310:	mov	r0, #0
   1a314:	bl	1a2e0 <__assert_fail@plt+0x8ecc>
   1a318:	ldr	r4, [sp]
   1a31c:	add	sp, sp, #4
   1a320:	pop	{pc}		; (ldr pc, [sp], #4)
   1a324:	str	r4, [sp, #-8]!
   1a328:	str	lr, [sp, #4]
   1a32c:	mvn	r2, #0
   1a330:	bl	1a2e0 <__assert_fail@plt+0x8ecc>
   1a334:	ldr	r4, [sp]
   1a338:	add	sp, sp, #4
   1a33c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a340:	str	r4, [sp, #-8]!
   1a344:	str	lr, [sp, #4]
   1a348:	mov	r1, r0
   1a34c:	mov	r0, #0
   1a350:	bl	1a324 <__assert_fail@plt+0x8f10>
   1a354:	ldr	r4, [sp]
   1a358:	add	sp, sp, #4
   1a35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a360:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a364:	strd	r6, [sp, #8]
   1a368:	strd	r8, [sp, #16]
   1a36c:	str	sl, [sp, #24]
   1a370:	str	lr, [sp, #28]
   1a374:	mov	r8, r0
   1a378:	mov	r7, r1
   1a37c:	mov	r9, r2
   1a380:	mov	r5, #0
   1a384:	movt	r5, #32752	; 0x7ff0
   1a388:	b	1a390 <__assert_fail@plt+0x8f7c>
   1a38c:	mov	r9, r5
   1a390:	mov	r2, r9
   1a394:	mov	r1, r7
   1a398:	mov	r0, r8
   1a39c:	bl	110f0 <read@plt>
   1a3a0:	subs	r6, r0, #0
   1a3a4:	bge	1a3f0 <__assert_fail@plt+0x8fdc>
   1a3a8:	bl	112dc <__errno_location@plt>
   1a3ac:	ldr	r3, [r0]
   1a3b0:	cmp	r3, #4
   1a3b4:	beq	1a390 <__assert_fail@plt+0x8f7c>
   1a3b8:	cmp	r9, r5
   1a3bc:	movls	r4, #0
   1a3c0:	movhi	r4, #1
   1a3c4:	cmp	r3, #22
   1a3c8:	movne	r4, #0
   1a3cc:	cmp	r4, #0
   1a3d0:	bne	1a38c <__assert_fail@plt+0x8f78>
   1a3d4:	mov	r0, r6
   1a3d8:	ldrd	r4, [sp]
   1a3dc:	ldrd	r6, [sp, #8]
   1a3e0:	ldrd	r8, [sp, #16]
   1a3e4:	ldr	sl, [sp, #24]
   1a3e8:	add	sp, sp, #28
   1a3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3f0:	mov	r0, r6
   1a3f4:	b	1a3d8 <__assert_fail@plt+0x8fc4>
   1a3f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a3fc:	strd	r6, [sp, #8]
   1a400:	str	r8, [sp, #16]
   1a404:	str	lr, [sp, #20]
   1a408:	mov	r4, r0
   1a40c:	cmp	r0, #2
   1a410:	bls	1a42c <__assert_fail@plt+0x9018>
   1a414:	mov	r0, r4
   1a418:	ldrd	r4, [sp]
   1a41c:	ldrd	r6, [sp, #8]
   1a420:	ldr	r8, [sp, #16]
   1a424:	add	sp, sp, #20
   1a428:	pop	{pc}		; (ldr pc, [sp], #4)
   1a42c:	bl	1be1c <__assert_fail@plt+0xaa08>
   1a430:	mov	r6, r0
   1a434:	bl	112dc <__errno_location@plt>
   1a438:	mov	r5, r0
   1a43c:	ldr	r7, [r0]
   1a440:	mov	r0, r4
   1a444:	bl	113fc <close@plt>
   1a448:	str	r7, [r5]
   1a44c:	mov	r4, r6
   1a450:	b	1a414 <__assert_fail@plt+0x9000>
   1a454:	strd	r4, [sp, #-16]!
   1a458:	str	r6, [sp, #8]
   1a45c:	str	lr, [sp, #12]
   1a460:	sub	sp, sp, #32
   1a464:	mov	r4, r0
   1a468:	ldr	r5, [sp, #48]	; 0x30
   1a46c:	ldr	r6, [sp, #52]	; 0x34
   1a470:	cmp	r1, #0
   1a474:	beq	1a540 <__assert_fail@plt+0x912c>
   1a478:	str	r3, [sp, #4]
   1a47c:	str	r2, [sp]
   1a480:	mov	r3, r1
   1a484:	movw	r2, #55524	; 0xd8e4
   1a488:	movt	r2, #1
   1a48c:	mov	r1, #1
   1a490:	bl	11324 <__fprintf_chk@plt>
   1a494:	mov	r2, #5
   1a498:	movw	r1, #55544	; 0xd8f8
   1a49c:	movt	r1, #1
   1a4a0:	mov	r0, #0
   1a4a4:	bl	11174 <dcgettext@plt>
   1a4a8:	movw	r3, #2022	; 0x7e6
   1a4ac:	str	r3, [sp]
   1a4b0:	mov	r3, r0
   1a4b4:	movw	r2, #56272	; 0xdbd0
   1a4b8:	movt	r2, #1
   1a4bc:	mov	r1, #1
   1a4c0:	mov	r0, r4
   1a4c4:	bl	11324 <__fprintf_chk@plt>
   1a4c8:	mov	r1, r4
   1a4cc:	mov	r0, #10
   1a4d0:	bl	11168 <fputc_unlocked@plt>
   1a4d4:	mov	r2, #5
   1a4d8:	movw	r1, #55548	; 0xd8fc
   1a4dc:	movt	r1, #1
   1a4e0:	mov	r0, #0
   1a4e4:	bl	11174 <dcgettext@plt>
   1a4e8:	movw	r3, #55720	; 0xd9a8
   1a4ec:	movt	r3, #1
   1a4f0:	mov	r2, r0
   1a4f4:	mov	r1, #1
   1a4f8:	mov	r0, r4
   1a4fc:	bl	11324 <__fprintf_chk@plt>
   1a500:	mov	r1, r4
   1a504:	mov	r0, #10
   1a508:	bl	11168 <fputc_unlocked@plt>
   1a50c:	cmp	r6, #9
   1a510:	ldrls	pc, [pc, r6, lsl #2]
   1a514:	b	1a818 <__assert_fail@plt+0x9404>
   1a518:	andeq	sl, r1, r4, lsl #11
   1a51c:	andeq	sl, r1, ip, asr r5
   1a520:	muleq	r1, r8, r5
   1a524:	andeq	sl, r1, ip, asr #11
   1a528:	andeq	sl, r1, r8, lsl #12
   1a52c:	andeq	sl, r1, ip, asr #12
   1a530:	muleq	r1, r8, r6
   1a534:	andeq	sl, r1, ip, ror #13
   1a538:	andeq	sl, r1, r8, asr #14
   1a53c:	andeq	sl, r1, ip, lsr #15
   1a540:	str	r3, [sp]
   1a544:	mov	r3, r2
   1a548:	movw	r2, #55536	; 0xd8f0
   1a54c:	movt	r2, #1
   1a550:	mov	r1, #1
   1a554:	bl	11324 <__fprintf_chk@plt>
   1a558:	b	1a494 <__assert_fail@plt+0x9080>
   1a55c:	mov	r2, #5
   1a560:	movw	r1, #55756	; 0xd9cc
   1a564:	movt	r1, #1
   1a568:	mov	r0, #0
   1a56c:	bl	11174 <dcgettext@plt>
   1a570:	ldr	r3, [r5]
   1a574:	mov	r2, r0
   1a578:	mov	r1, #1
   1a57c:	mov	r0, r4
   1a580:	bl	11324 <__fprintf_chk@plt>
   1a584:	add	sp, sp, #32
   1a588:	ldrd	r4, [sp]
   1a58c:	ldr	r6, [sp, #8]
   1a590:	add	sp, sp, #12
   1a594:	pop	{pc}		; (ldr pc, [sp], #4)
   1a598:	mov	r2, #5
   1a59c:	movw	r1, #55772	; 0xd9dc
   1a5a0:	movt	r1, #1
   1a5a4:	mov	r0, #0
   1a5a8:	bl	11174 <dcgettext@plt>
   1a5ac:	ldr	r3, [r5, #4]
   1a5b0:	str	r3, [sp]
   1a5b4:	ldr	r3, [r5]
   1a5b8:	mov	r2, r0
   1a5bc:	mov	r1, #1
   1a5c0:	mov	r0, r4
   1a5c4:	bl	11324 <__fprintf_chk@plt>
   1a5c8:	b	1a584 <__assert_fail@plt+0x9170>
   1a5cc:	mov	r2, #5
   1a5d0:	movw	r1, #55796	; 0xd9f4
   1a5d4:	movt	r1, #1
   1a5d8:	mov	r0, #0
   1a5dc:	bl	11174 <dcgettext@plt>
   1a5e0:	ldr	r3, [r5, #8]
   1a5e4:	str	r3, [sp, #4]
   1a5e8:	ldr	r3, [r5, #4]
   1a5ec:	str	r3, [sp]
   1a5f0:	ldr	r3, [r5]
   1a5f4:	mov	r2, r0
   1a5f8:	mov	r1, #1
   1a5fc:	mov	r0, r4
   1a600:	bl	11324 <__fprintf_chk@plt>
   1a604:	b	1a584 <__assert_fail@plt+0x9170>
   1a608:	mov	r2, #5
   1a60c:	movw	r1, #55824	; 0xda10
   1a610:	movt	r1, #1
   1a614:	mov	r0, #0
   1a618:	bl	11174 <dcgettext@plt>
   1a61c:	ldr	r3, [r5, #12]
   1a620:	str	r3, [sp, #8]
   1a624:	ldr	r3, [r5, #8]
   1a628:	str	r3, [sp, #4]
   1a62c:	ldr	r3, [r5, #4]
   1a630:	str	r3, [sp]
   1a634:	ldr	r3, [r5]
   1a638:	mov	r2, r0
   1a63c:	mov	r1, #1
   1a640:	mov	r0, r4
   1a644:	bl	11324 <__fprintf_chk@plt>
   1a648:	b	1a584 <__assert_fail@plt+0x9170>
   1a64c:	mov	r2, #5
   1a650:	movw	r1, #55856	; 0xda30
   1a654:	movt	r1, #1
   1a658:	mov	r0, #0
   1a65c:	bl	11174 <dcgettext@plt>
   1a660:	ldr	r3, [r5, #16]
   1a664:	str	r3, [sp, #12]
   1a668:	ldr	r3, [r5, #12]
   1a66c:	str	r3, [sp, #8]
   1a670:	ldr	r3, [r5, #8]
   1a674:	str	r3, [sp, #4]
   1a678:	ldr	r3, [r5, #4]
   1a67c:	str	r3, [sp]
   1a680:	ldr	r3, [r5]
   1a684:	mov	r2, r0
   1a688:	mov	r1, #1
   1a68c:	mov	r0, r4
   1a690:	bl	11324 <__fprintf_chk@plt>
   1a694:	b	1a584 <__assert_fail@plt+0x9170>
   1a698:	mov	r2, #5
   1a69c:	movw	r1, #55892	; 0xda54
   1a6a0:	movt	r1, #1
   1a6a4:	mov	r0, #0
   1a6a8:	bl	11174 <dcgettext@plt>
   1a6ac:	ldr	r3, [r5, #20]
   1a6b0:	str	r3, [sp, #16]
   1a6b4:	ldr	r3, [r5, #16]
   1a6b8:	str	r3, [sp, #12]
   1a6bc:	ldr	r3, [r5, #12]
   1a6c0:	str	r3, [sp, #8]
   1a6c4:	ldr	r3, [r5, #8]
   1a6c8:	str	r3, [sp, #4]
   1a6cc:	ldr	r3, [r5, #4]
   1a6d0:	str	r3, [sp]
   1a6d4:	ldr	r3, [r5]
   1a6d8:	mov	r2, r0
   1a6dc:	mov	r1, #1
   1a6e0:	mov	r0, r4
   1a6e4:	bl	11324 <__fprintf_chk@plt>
   1a6e8:	b	1a584 <__assert_fail@plt+0x9170>
   1a6ec:	mov	r2, #5
   1a6f0:	movw	r1, #55932	; 0xda7c
   1a6f4:	movt	r1, #1
   1a6f8:	mov	r0, #0
   1a6fc:	bl	11174 <dcgettext@plt>
   1a700:	ldr	r3, [r5, #24]
   1a704:	str	r3, [sp, #20]
   1a708:	ldr	r3, [r5, #20]
   1a70c:	str	r3, [sp, #16]
   1a710:	ldr	r3, [r5, #16]
   1a714:	str	r3, [sp, #12]
   1a718:	ldr	r3, [r5, #12]
   1a71c:	str	r3, [sp, #8]
   1a720:	ldr	r3, [r5, #8]
   1a724:	str	r3, [sp, #4]
   1a728:	ldr	r3, [r5, #4]
   1a72c:	str	r3, [sp]
   1a730:	ldr	r3, [r5]
   1a734:	mov	r2, r0
   1a738:	mov	r1, #1
   1a73c:	mov	r0, r4
   1a740:	bl	11324 <__fprintf_chk@plt>
   1a744:	b	1a584 <__assert_fail@plt+0x9170>
   1a748:	mov	r2, #5
   1a74c:	movw	r1, #55976	; 0xdaa8
   1a750:	movt	r1, #1
   1a754:	mov	r0, #0
   1a758:	bl	11174 <dcgettext@plt>
   1a75c:	ldr	r3, [r5, #28]
   1a760:	str	r3, [sp, #24]
   1a764:	ldr	r3, [r5, #24]
   1a768:	str	r3, [sp, #20]
   1a76c:	ldr	r3, [r5, #20]
   1a770:	str	r3, [sp, #16]
   1a774:	ldr	r3, [r5, #16]
   1a778:	str	r3, [sp, #12]
   1a77c:	ldr	r3, [r5, #12]
   1a780:	str	r3, [sp, #8]
   1a784:	ldr	r3, [r5, #8]
   1a788:	str	r3, [sp, #4]
   1a78c:	ldr	r3, [r5, #4]
   1a790:	str	r3, [sp]
   1a794:	ldr	r3, [r5]
   1a798:	mov	r2, r0
   1a79c:	mov	r1, #1
   1a7a0:	mov	r0, r4
   1a7a4:	bl	11324 <__fprintf_chk@plt>
   1a7a8:	b	1a584 <__assert_fail@plt+0x9170>
   1a7ac:	mov	r2, #5
   1a7b0:	movw	r1, #56024	; 0xdad8
   1a7b4:	movt	r1, #1
   1a7b8:	mov	r0, #0
   1a7bc:	bl	11174 <dcgettext@plt>
   1a7c0:	ldr	r3, [r5, #32]
   1a7c4:	str	r3, [sp, #28]
   1a7c8:	ldr	r3, [r5, #28]
   1a7cc:	str	r3, [sp, #24]
   1a7d0:	ldr	r3, [r5, #24]
   1a7d4:	str	r3, [sp, #20]
   1a7d8:	ldr	r3, [r5, #20]
   1a7dc:	str	r3, [sp, #16]
   1a7e0:	ldr	r3, [r5, #16]
   1a7e4:	str	r3, [sp, #12]
   1a7e8:	ldr	r3, [r5, #12]
   1a7ec:	str	r3, [sp, #8]
   1a7f0:	ldr	r3, [r5, #8]
   1a7f4:	str	r3, [sp, #4]
   1a7f8:	ldr	r3, [r5, #4]
   1a7fc:	str	r3, [sp]
   1a800:	ldr	r3, [r5]
   1a804:	mov	r2, r0
   1a808:	mov	r1, #1
   1a80c:	mov	r0, r4
   1a810:	bl	11324 <__fprintf_chk@plt>
   1a814:	b	1a584 <__assert_fail@plt+0x9170>
   1a818:	mov	r2, #5
   1a81c:	movw	r1, #56076	; 0xdb0c
   1a820:	movt	r1, #1
   1a824:	mov	r0, #0
   1a828:	bl	11174 <dcgettext@plt>
   1a82c:	ldr	r3, [r5, #32]
   1a830:	str	r3, [sp, #28]
   1a834:	ldr	r3, [r5, #28]
   1a838:	str	r3, [sp, #24]
   1a83c:	ldr	r3, [r5, #24]
   1a840:	str	r3, [sp, #20]
   1a844:	ldr	r3, [r5, #20]
   1a848:	str	r3, [sp, #16]
   1a84c:	ldr	r3, [r5, #16]
   1a850:	str	r3, [sp, #12]
   1a854:	ldr	r3, [r5, #12]
   1a858:	str	r3, [sp, #8]
   1a85c:	ldr	r3, [r5, #8]
   1a860:	str	r3, [sp, #4]
   1a864:	ldr	r3, [r5, #4]
   1a868:	str	r3, [sp]
   1a86c:	ldr	r3, [r5]
   1a870:	mov	r2, r0
   1a874:	mov	r1, #1
   1a878:	mov	r0, r4
   1a87c:	bl	11324 <__fprintf_chk@plt>
   1a880:	b	1a584 <__assert_fail@plt+0x9170>
   1a884:	strd	r4, [sp, #-12]!
   1a888:	str	lr, [sp, #8]
   1a88c:	sub	sp, sp, #12
   1a890:	ldr	r5, [sp, #24]
   1a894:	ldr	ip, [r5]
   1a898:	cmp	ip, #0
   1a89c:	beq	1a8d4 <__assert_fail@plt+0x94c0>
   1a8a0:	mov	lr, r5
   1a8a4:	mov	ip, #0
   1a8a8:	add	ip, ip, #1
   1a8ac:	ldr	r4, [lr, #4]!
   1a8b0:	cmp	r4, #0
   1a8b4:	bne	1a8a8 <__assert_fail@plt+0x9494>
   1a8b8:	str	ip, [sp, #4]
   1a8bc:	str	r5, [sp]
   1a8c0:	bl	1a454 <__assert_fail@plt+0x9040>
   1a8c4:	add	sp, sp, #12
   1a8c8:	ldrd	r4, [sp]
   1a8cc:	add	sp, sp, #8
   1a8d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8d4:	mov	ip, #0
   1a8d8:	b	1a8b8 <__assert_fail@plt+0x94a4>
   1a8dc:	strd	r4, [sp, #-12]!
   1a8e0:	str	lr, [sp, #8]
   1a8e4:	sub	sp, sp, #52	; 0x34
   1a8e8:	ldr	r5, [sp, #64]	; 0x40
   1a8ec:	add	r4, sp, #8
   1a8f0:	mov	ip, #0
   1a8f4:	ldr	lr, [r5], #4
   1a8f8:	str	lr, [r4], #4
   1a8fc:	cmp	lr, #0
   1a900:	beq	1a910 <__assert_fail@plt+0x94fc>
   1a904:	add	ip, ip, #1
   1a908:	cmp	ip, #10
   1a90c:	bne	1a8f4 <__assert_fail@plt+0x94e0>
   1a910:	str	ip, [sp, #4]
   1a914:	add	ip, sp, #8
   1a918:	str	ip, [sp]
   1a91c:	bl	1a454 <__assert_fail@plt+0x9040>
   1a920:	add	sp, sp, #52	; 0x34
   1a924:	ldrd	r4, [sp]
   1a928:	add	sp, sp, #8
   1a92c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a930:	push	{r3}		; (str r3, [sp, #-4]!)
   1a934:	push	{lr}		; (str lr, [sp, #-4]!)
   1a938:	sub	sp, sp, #16
   1a93c:	add	r3, sp, #24
   1a940:	str	r3, [sp, #12]
   1a944:	str	r3, [sp]
   1a948:	ldr	r3, [sp, #20]
   1a94c:	bl	1a8dc <__assert_fail@plt+0x94c8>
   1a950:	add	sp, sp, #16
   1a954:	pop	{lr}		; (ldr lr, [sp], #4)
   1a958:	add	sp, sp, #4
   1a95c:	bx	lr
   1a960:	str	r4, [sp, #-8]!
   1a964:	str	lr, [sp, #4]
   1a968:	movw	r3, #57796	; 0xe1c4
   1a96c:	movt	r3, #2
   1a970:	ldr	r1, [r3]
   1a974:	mov	r0, #10
   1a978:	bl	11168 <fputc_unlocked@plt>
   1a97c:	mov	r2, #5
   1a980:	movw	r1, #56136	; 0xdb48
   1a984:	movt	r1, #1
   1a988:	mov	r0, #0
   1a98c:	bl	11174 <dcgettext@plt>
   1a990:	movw	r2, #56156	; 0xdb5c
   1a994:	movt	r2, #1
   1a998:	mov	r1, r0
   1a99c:	mov	r0, #1
   1a9a0:	bl	11300 <__printf_chk@plt>
   1a9a4:	mov	r2, #5
   1a9a8:	movw	r1, #56180	; 0xdb74
   1a9ac:	movt	r1, #1
   1a9b0:	mov	r0, #0
   1a9b4:	bl	11174 <dcgettext@plt>
   1a9b8:	movw	r3, #53352	; 0xd068
   1a9bc:	movt	r3, #1
   1a9c0:	movw	r2, #53392	; 0xd090
   1a9c4:	movt	r2, #1
   1a9c8:	mov	r1, r0
   1a9cc:	mov	r0, #1
   1a9d0:	bl	11300 <__printf_chk@plt>
   1a9d4:	mov	r2, #5
   1a9d8:	movw	r1, #56200	; 0xdb88
   1a9dc:	movt	r1, #1
   1a9e0:	mov	r0, #0
   1a9e4:	bl	11174 <dcgettext@plt>
   1a9e8:	movw	r2, #56240	; 0xdbb0
   1a9ec:	movt	r2, #1
   1a9f0:	mov	r1, r0
   1a9f4:	mov	r0, #1
   1a9f8:	bl	11300 <__printf_chk@plt>
   1a9fc:	ldr	r4, [sp]
   1aa00:	add	sp, sp, #4
   1aa04:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa08:	str	r4, [sp, #-8]!
   1aa0c:	str	lr, [sp, #4]
   1aa10:	bl	1b88c <__assert_fail@plt+0xa478>
   1aa14:	cmp	r0, #0
   1aa18:	beq	1aa28 <__assert_fail@plt+0x9614>
   1aa1c:	ldr	r4, [sp]
   1aa20:	add	sp, sp, #4
   1aa24:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa28:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1aa2c:	str	r4, [sp, #-8]!
   1aa30:	str	lr, [sp, #4]
   1aa34:	bl	1b88c <__assert_fail@plt+0xa478>
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa4c <__assert_fail@plt+0x9638>
   1aa40:	ldr	r4, [sp]
   1aa44:	add	sp, sp, #4
   1aa48:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa4c:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1aa50:	str	r4, [sp, #-8]!
   1aa54:	str	lr, [sp, #4]
   1aa58:	bl	1aa08 <__assert_fail@plt+0x95f4>
   1aa5c:	ldr	r4, [sp]
   1aa60:	add	sp, sp, #4
   1aa64:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa68:	strd	r4, [sp, #-16]!
   1aa6c:	str	r6, [sp, #8]
   1aa70:	str	lr, [sp, #12]
   1aa74:	mov	r5, r0
   1aa78:	mov	r4, r1
   1aa7c:	bl	1b8c8 <__assert_fail@plt+0xa4b4>
   1aa80:	cmp	r0, #0
   1aa84:	beq	1aa98 <__assert_fail@plt+0x9684>
   1aa88:	ldrd	r4, [sp]
   1aa8c:	ldr	r6, [sp, #8]
   1aa90:	add	sp, sp, #12
   1aa94:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa98:	adds	r4, r4, #0
   1aa9c:	movne	r4, #1
   1aaa0:	cmp	r5, #0
   1aaa4:	moveq	r4, #1
   1aaa8:	cmp	r4, #0
   1aaac:	beq	1aa88 <__assert_fail@plt+0x9674>
   1aab0:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1aab4:	str	r4, [sp, #-8]!
   1aab8:	str	lr, [sp, #4]
   1aabc:	cmp	r1, #0
   1aac0:	orreq	r1, r1, #1
   1aac4:	bl	1b8c8 <__assert_fail@plt+0xa4b4>
   1aac8:	cmp	r0, #0
   1aacc:	beq	1aadc <__assert_fail@plt+0x96c8>
   1aad0:	ldr	r4, [sp]
   1aad4:	add	sp, sp, #4
   1aad8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aadc:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1aae0:	strd	r4, [sp, #-16]!
   1aae4:	str	r6, [sp, #8]
   1aae8:	str	lr, [sp, #12]
   1aaec:	mov	r4, r0
   1aaf0:	mov	r6, r1
   1aaf4:	mov	r5, r2
   1aaf8:	bl	1bde0 <__assert_fail@plt+0xa9cc>
   1aafc:	cmp	r0, #0
   1ab00:	beq	1ab14 <__assert_fail@plt+0x9700>
   1ab04:	ldrd	r4, [sp]
   1ab08:	ldr	r6, [sp, #8]
   1ab0c:	add	sp, sp, #12
   1ab10:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab14:	cmp	r4, #0
   1ab18:	beq	1ab28 <__assert_fail@plt+0x9714>
   1ab1c:	cmp	r6, #0
   1ab20:	cmpne	r5, #0
   1ab24:	beq	1ab04 <__assert_fail@plt+0x96f0>
   1ab28:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1ab2c:	str	r4, [sp, #-8]!
   1ab30:	str	lr, [sp, #4]
   1ab34:	bl	1aae0 <__assert_fail@plt+0x96cc>
   1ab38:	ldr	r4, [sp]
   1ab3c:	add	sp, sp, #4
   1ab40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab44:	str	r4, [sp, #-8]!
   1ab48:	str	lr, [sp, #4]
   1ab4c:	mov	ip, r1
   1ab50:	mov	r3, r2
   1ab54:	cmp	r2, #0
   1ab58:	cmpne	r1, #0
   1ab5c:	moveq	r3, #1
   1ab60:	moveq	ip, r3
   1ab64:	mov	r2, r3
   1ab68:	mov	r1, ip
   1ab6c:	bl	1bde0 <__assert_fail@plt+0xa9cc>
   1ab70:	cmp	r0, #0
   1ab74:	beq	1ab84 <__assert_fail@plt+0x9770>
   1ab78:	ldr	r4, [sp]
   1ab7c:	add	sp, sp, #4
   1ab80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab84:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1ab88:	str	r4, [sp, #-8]!
   1ab8c:	str	lr, [sp, #4]
   1ab90:	mov	r2, r1
   1ab94:	mov	r1, r0
   1ab98:	mov	r0, #0
   1ab9c:	bl	1aae0 <__assert_fail@plt+0x96cc>
   1aba0:	ldr	r4, [sp]
   1aba4:	add	sp, sp, #4
   1aba8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abac:	str	r4, [sp, #-8]!
   1abb0:	str	lr, [sp, #4]
   1abb4:	mov	r2, r1
   1abb8:	mov	r1, r0
   1abbc:	mov	r0, #0
   1abc0:	bl	1ab44 <__assert_fail@plt+0x9730>
   1abc4:	ldr	r4, [sp]
   1abc8:	add	sp, sp, #4
   1abcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1abd0:	strd	r4, [sp, #-16]!
   1abd4:	str	r6, [sp, #8]
   1abd8:	str	lr, [sp, #12]
   1abdc:	mov	r5, r1
   1abe0:	ldr	r4, [r1]
   1abe4:	cmp	r0, #0
   1abe8:	beq	1ac18 <__assert_fail@plt+0x9804>
   1abec:	lsr	r3, r4, #1
   1abf0:	add	r3, r3, #1
   1abf4:	adds	r4, r4, r3
   1abf8:	bcs	1ac34 <__assert_fail@plt+0x9820>
   1abfc:	mov	r1, r4
   1ac00:	bl	1aae0 <__assert_fail@plt+0x96cc>
   1ac04:	str	r4, [r5]
   1ac08:	ldrd	r4, [sp]
   1ac0c:	ldr	r6, [sp, #8]
   1ac10:	add	sp, sp, #12
   1ac14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac18:	cmp	r4, #0
   1ac1c:	bne	1abfc <__assert_fail@plt+0x97e8>
   1ac20:	mov	r4, #64	; 0x40
   1ac24:	udiv	r4, r4, r2
   1ac28:	cmp	r2, #64	; 0x40
   1ac2c:	addhi	r4, r4, #1
   1ac30:	b	1abfc <__assert_fail@plt+0x97e8>
   1ac34:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1ac38:	str	r4, [sp, #-8]!
   1ac3c:	str	lr, [sp, #4]
   1ac40:	mov	r2, #1
   1ac44:	bl	1abd0 <__assert_fail@plt+0x97bc>
   1ac48:	ldr	r4, [sp]
   1ac4c:	add	sp, sp, #4
   1ac50:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ac58:	strd	r6, [sp, #8]
   1ac5c:	str	r8, [sp, #16]
   1ac60:	str	lr, [sp, #20]
   1ac64:	mov	r5, r1
   1ac68:	ldr	lr, [sp, #24]
   1ac6c:	ldr	ip, [r1]
   1ac70:	asr	r4, ip, #1
   1ac74:	adds	r4, ip, r4
   1ac78:	movvs	r1, #1
   1ac7c:	movvc	r1, #0
   1ac80:	cmp	r1, #0
   1ac84:	mvnne	r4, #-2147483648	; 0x80000000
   1ac88:	mvn	r8, r3
   1ac8c:	lsr	r8, r8, #31
   1ac90:	cmp	r3, r4
   1ac94:	movge	r1, #0
   1ac98:	andlt	r1, r8, #1
   1ac9c:	cmp	r1, #0
   1aca0:	movne	r4, r3
   1aca4:	smull	r6, r7, r4, lr
   1aca8:	asr	r1, r6, #31
   1acac:	cmp	r1, r7
   1acb0:	bne	1acc8 <__assert_fail@plt+0x98b4>
   1acb4:	mov	r1, r6
   1acb8:	cmp	r6, #63	; 0x3f
   1acbc:	movle	r1, #64	; 0x40
   1acc0:	ble	1accc <__assert_fail@plt+0x98b8>
   1acc4:	b	1acd8 <__assert_fail@plt+0x98c4>
   1acc8:	mvn	r1, #-2147483648	; 0x80000000
   1accc:	sdiv	r4, r1, lr
   1acd0:	mls	r6, lr, r4, r1
   1acd4:	sub	r1, r1, r6
   1acd8:	cmp	r0, #0
   1acdc:	moveq	r6, #0
   1ace0:	streq	r6, [r5]
   1ace4:	sub	r6, r4, ip
   1ace8:	cmp	r6, r2
   1acec:	bge	1ad24 <__assert_fail@plt+0x9910>
   1acf0:	adds	r2, ip, r2
   1acf4:	mov	r4, r2
   1acf8:	bvs	1ad40 <__assert_fail@plt+0x992c>
   1acfc:	cmp	r2, r3
   1ad00:	movle	r3, #0
   1ad04:	andgt	r3, r8, #1
   1ad08:	cmp	r3, #0
   1ad0c:	bne	1ad40 <__assert_fail@plt+0x992c>
   1ad10:	smull	r2, r3, r2, lr
   1ad14:	asr	ip, r2, #31
   1ad18:	mov	r1, r2
   1ad1c:	cmp	ip, r3
   1ad20:	bne	1ad40 <__assert_fail@plt+0x992c>
   1ad24:	bl	1aa68 <__assert_fail@plt+0x9654>
   1ad28:	str	r4, [r5]
   1ad2c:	ldrd	r4, [sp]
   1ad30:	ldrd	r6, [sp, #8]
   1ad34:	ldr	r8, [sp, #16]
   1ad38:	add	sp, sp, #20
   1ad3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad40:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1ad44:	str	r4, [sp, #-8]!
   1ad48:	str	lr, [sp, #4]
   1ad4c:	bl	1b818 <__assert_fail@plt+0xa404>
   1ad50:	cmp	r0, #0
   1ad54:	beq	1ad64 <__assert_fail@plt+0x9950>
   1ad58:	ldr	r4, [sp]
   1ad5c:	add	sp, sp, #4
   1ad60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad64:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1ad68:	str	r4, [sp, #-8]!
   1ad6c:	str	lr, [sp, #4]
   1ad70:	mov	r1, #1
   1ad74:	bl	1ad44 <__assert_fail@plt+0x9930>
   1ad78:	ldr	r4, [sp]
   1ad7c:	add	sp, sp, #4
   1ad80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad84:	str	r4, [sp, #-8]!
   1ad88:	str	lr, [sp, #4]
   1ad8c:	bl	1b818 <__assert_fail@plt+0xa404>
   1ad90:	cmp	r0, #0
   1ad94:	beq	1ada4 <__assert_fail@plt+0x9990>
   1ad98:	ldr	r4, [sp]
   1ad9c:	add	sp, sp, #4
   1ada0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ada4:	bl	1ae9c <__assert_fail@plt+0x9a88>
   1ada8:	str	r4, [sp, #-8]!
   1adac:	str	lr, [sp, #4]
   1adb0:	mov	r1, #1
   1adb4:	bl	1ad84 <__assert_fail@plt+0x9970>
   1adb8:	ldr	r4, [sp]
   1adbc:	add	sp, sp, #4
   1adc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adc4:	strd	r4, [sp, #-16]!
   1adc8:	str	r6, [sp, #8]
   1adcc:	str	lr, [sp, #12]
   1add0:	mov	r5, r0
   1add4:	mov	r4, r1
   1add8:	mov	r0, r1
   1addc:	bl	1aa08 <__assert_fail@plt+0x95f4>
   1ade0:	mov	r2, r4
   1ade4:	mov	r1, r5
   1ade8:	bl	1112c <memcpy@plt>
   1adec:	ldrd	r4, [sp]
   1adf0:	ldr	r6, [sp, #8]
   1adf4:	add	sp, sp, #12
   1adf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adfc:	strd	r4, [sp, #-16]!
   1ae00:	str	r6, [sp, #8]
   1ae04:	str	lr, [sp, #12]
   1ae08:	mov	r5, r0
   1ae0c:	mov	r4, r1
   1ae10:	mov	r0, r1
   1ae14:	bl	1aa2c <__assert_fail@plt+0x9618>
   1ae18:	mov	r2, r4
   1ae1c:	mov	r1, r5
   1ae20:	bl	1112c <memcpy@plt>
   1ae24:	ldrd	r4, [sp]
   1ae28:	ldr	r6, [sp, #8]
   1ae2c:	add	sp, sp, #12
   1ae30:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae34:	strd	r4, [sp, #-16]!
   1ae38:	str	r6, [sp, #8]
   1ae3c:	str	lr, [sp, #12]
   1ae40:	mov	r5, r0
   1ae44:	mov	r4, r1
   1ae48:	add	r0, r1, #1
   1ae4c:	bl	1aa2c <__assert_fail@plt+0x9618>
   1ae50:	mov	r2, #0
   1ae54:	strb	r2, [r0, r4]
   1ae58:	mov	r2, r4
   1ae5c:	mov	r1, r5
   1ae60:	bl	1112c <memcpy@plt>
   1ae64:	ldrd	r4, [sp]
   1ae68:	ldr	r6, [sp, #8]
   1ae6c:	add	sp, sp, #12
   1ae70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae74:	str	r4, [sp, #-8]!
   1ae78:	str	lr, [sp, #4]
   1ae7c:	mov	r4, r0
   1ae80:	bl	112a0 <strlen@plt>
   1ae84:	add	r1, r0, #1
   1ae88:	mov	r0, r4
   1ae8c:	bl	1adc4 <__assert_fail@plt+0x99b0>
   1ae90:	ldr	r4, [sp]
   1ae94:	add	sp, sp, #4
   1ae98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae9c:	str	r4, [sp, #-8]!
   1aea0:	str	lr, [sp, #4]
   1aea4:	movw	r3, #57704	; 0xe168
   1aea8:	movt	r3, #2
   1aeac:	ldr	r4, [r3]
   1aeb0:	mov	r2, #5
   1aeb4:	movw	r1, #56320	; 0xdc00
   1aeb8:	movt	r1, #1
   1aebc:	mov	r0, #0
   1aec0:	bl	11174 <dcgettext@plt>
   1aec4:	mov	r3, r0
   1aec8:	movw	r2, #53620	; 0xd174
   1aecc:	movt	r2, #1
   1aed0:	mov	r1, #0
   1aed4:	mov	r0, r4
   1aed8:	bl	1121c <error@plt>
   1aedc:	bl	113f0 <abort@plt>
   1aee0:	strd	r4, [sp, #-16]!
   1aee4:	str	r6, [sp, #8]
   1aee8:	str	lr, [sp, #12]
   1aeec:	sub	sp, sp, #16
   1aef0:	mov	r6, r0
   1aef4:	mov	r4, r2
   1aef8:	mov	r5, r3
   1aefc:	ldr	r3, [sp, #40]	; 0x28
   1af00:	str	r3, [sp]
   1af04:	add	r3, sp, #8
   1af08:	mov	r2, r1
   1af0c:	mov	r1, #0
   1af10:	bl	1b2c8 <__assert_fail@plt+0x9eb4>
   1af14:	cmp	r0, #0
   1af18:	bne	1af90 <__assert_fail@plt+0x9b7c>
   1af1c:	ldrd	r0, [sp, #8]
   1af20:	ldrd	r2, [sp, #32]
   1af24:	cmp	r1, r3
   1af28:	cmpeq	r0, r2
   1af2c:	movhi	r3, #1
   1af30:	movls	r3, #0
   1af34:	cmp	r1, r5
   1af38:	cmpeq	r0, r4
   1af3c:	orrcc	r3, r3, #1
   1af40:	cmp	r3, #0
   1af44:	bne	1af5c <__assert_fail@plt+0x9b48>
   1af48:	add	sp, sp, #16
   1af4c:	ldrd	r4, [sp]
   1af50:	ldr	r6, [sp, #8]
   1af54:	add	sp, sp, #12
   1af58:	pop	{pc}		; (ldr pc, [sp], #4)
   1af5c:	mvn	r2, #-1073741824	; 0xc0000000
   1af60:	mov	r3, #0
   1af64:	cmp	r1, r3
   1af68:	cmpeq	r0, r2
   1af6c:	bls	1af80 <__assert_fail@plt+0x9b6c>
   1af70:	bl	112dc <__errno_location@plt>
   1af74:	mov	r3, #75	; 0x4b
   1af78:	str	r3, [r0]
   1af7c:	b	1afa0 <__assert_fail@plt+0x9b8c>
   1af80:	bl	112dc <__errno_location@plt>
   1af84:	mov	r3, #34	; 0x22
   1af88:	str	r3, [r0]
   1af8c:	b	1afa0 <__assert_fail@plt+0x9b8c>
   1af90:	cmp	r0, #1
   1af94:	beq	1afe4 <__assert_fail@plt+0x9bd0>
   1af98:	cmp	r0, #3
   1af9c:	beq	1aff4 <__assert_fail@plt+0x9be0>
   1afa0:	ldr	r3, [sp, #48]	; 0x30
   1afa4:	cmp	r3, #0
   1afa8:	moveq	r3, #1
   1afac:	str	r3, [sp, #48]	; 0x30
   1afb0:	bl	112dc <__errno_location@plt>
   1afb4:	ldr	r4, [r0]
   1afb8:	cmp	r4, #22
   1afbc:	moveq	r4, #0
   1afc0:	mov	r0, r6
   1afc4:	bl	1a340 <__assert_fail@plt+0x8f2c>
   1afc8:	str	r0, [sp]
   1afcc:	ldr	r3, [sp, #44]	; 0x2c
   1afd0:	movw	r2, #53616	; 0xd170
   1afd4:	movt	r2, #1
   1afd8:	mov	r1, r4
   1afdc:	ldr	r0, [sp, #48]	; 0x30
   1afe0:	bl	1121c <error@plt>
   1afe4:	bl	112dc <__errno_location@plt>
   1afe8:	mov	r3, #75	; 0x4b
   1afec:	str	r3, [r0]
   1aff0:	b	1afa0 <__assert_fail@plt+0x9b8c>
   1aff4:	bl	112dc <__errno_location@plt>
   1aff8:	mov	r3, #0
   1affc:	str	r3, [r0]
   1b000:	b	1afa0 <__assert_fail@plt+0x9b8c>
   1b004:	strd	r4, [sp, #-12]!
   1b008:	str	lr, [sp, #8]
   1b00c:	sub	sp, sp, #28
   1b010:	ldr	r1, [sp, #56]	; 0x38
   1b014:	str	r1, [sp, #16]
   1b018:	ldr	r1, [sp, #52]	; 0x34
   1b01c:	str	r1, [sp, #12]
   1b020:	ldr	r1, [sp, #48]	; 0x30
   1b024:	str	r1, [sp, #8]
   1b028:	ldrd	r4, [sp, #40]	; 0x28
   1b02c:	strd	r4, [sp]
   1b030:	mov	r1, #10
   1b034:	bl	1aee0 <__assert_fail@plt+0x9acc>
   1b038:	add	sp, sp, #28
   1b03c:	ldrd	r4, [sp]
   1b040:	add	sp, sp, #8
   1b044:	pop	{pc}		; (ldr pc, [sp], #4)
   1b048:	strd	r4, [sp, #-12]!
   1b04c:	str	lr, [sp, #8]
   1b050:	vpush	{d8}
   1b054:	sub	sp, sp, #12
   1b058:	vmov.f64	d8, d0
   1b05c:	vldr	d7, [pc, #116]	; 1b0d8 <__assert_fail@plt+0x9cc4>
   1b060:	vcmpe.f64	d0, d7
   1b064:	vmrs	APSR_nzcv, fpscr
   1b068:	blt	1b080 <__assert_fail@plt+0x9c6c>
   1b06c:	bl	110e4 <pause@plt>
   1b070:	bl	112dc <__errno_location@plt>
   1b074:	ldr	r3, [r0]
   1b078:	cmp	r3, #4
   1b07c:	beq	1b06c <__assert_fail@plt+0x9c58>
   1b080:	vmov.f64	d0, d8
   1b084:	mov	r0, sp
   1b088:	bl	1ba58 <__assert_fail@plt+0xa644>
   1b08c:	bl	112dc <__errno_location@plt>
   1b090:	mov	r4, r0
   1b094:	mov	r5, #0
   1b098:	str	r5, [r4]
   1b09c:	mov	r1, sp
   1b0a0:	mov	r0, sp
   1b0a4:	bl	11114 <nanosleep@plt>
   1b0a8:	cmp	r0, #0
   1b0ac:	beq	1b0c0 <__assert_fail@plt+0x9cac>
   1b0b0:	ldr	r3, [r4]
   1b0b4:	bics	r3, r3, #4
   1b0b8:	beq	1b098 <__assert_fail@plt+0x9c84>
   1b0bc:	mvn	r0, #0
   1b0c0:	add	sp, sp, #12
   1b0c4:	vpop	{d8}
   1b0c8:	ldrd	r4, [sp]
   1b0cc:	add	sp, sp, #8
   1b0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0d4:	nop	{0}
   1b0d8:	andeq	r0, r0, r0
   1b0dc:	mvnmi	r0, r0
   1b0e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b0e4:	strd	r6, [sp, #8]
   1b0e8:	str	r8, [sp, #16]
   1b0ec:	str	lr, [sp, #20]
   1b0f0:	sub	sp, sp, #8
   1b0f4:	mov	r4, r0
   1b0f8:	mov	r5, r1
   1b0fc:	mov	r7, r2
   1b100:	mov	r8, r3
   1b104:	bl	112dc <__errno_location@plt>
   1b108:	mov	r6, r0
   1b10c:	mov	r3, #0
   1b110:	str	r3, [r0]
   1b114:	add	r1, sp, #4
   1b118:	mov	r0, r4
   1b11c:	blx	r8
   1b120:	ldr	r3, [sp, #4]
   1b124:	cmp	r3, r4
   1b128:	beq	1b178 <__assert_fail@plt+0x9d64>
   1b12c:	cmp	r5, #0
   1b130:	beq	1b154 <__assert_fail@plt+0x9d40>
   1b134:	vcmp.f64	d0, #0.0
   1b138:	vmrs	APSR_nzcv, fpscr
   1b13c:	moveq	r0, #1
   1b140:	beq	1b184 <__assert_fail@plt+0x9d70>
   1b144:	ldr	r0, [r6]
   1b148:	subs	r0, r0, #34	; 0x22
   1b14c:	movne	r0, #1
   1b150:	b	1b17c <__assert_fail@plt+0x9d68>
   1b154:	ldrb	r2, [r3]
   1b158:	cmp	r2, #0
   1b15c:	movne	r0, #0
   1b160:	bne	1b188 <__assert_fail@plt+0x9d74>
   1b164:	vcmp.f64	d0, #0.0
   1b168:	vmrs	APSR_nzcv, fpscr
   1b16c:	bne	1b144 <__assert_fail@plt+0x9d30>
   1b170:	mov	r0, #1
   1b174:	b	1b188 <__assert_fail@plt+0x9d74>
   1b178:	mov	r0, #0
   1b17c:	cmp	r5, #0
   1b180:	beq	1b188 <__assert_fail@plt+0x9d74>
   1b184:	str	r3, [r5]
   1b188:	vstr	d0, [r7]
   1b18c:	add	sp, sp, #8
   1b190:	ldrd	r4, [sp]
   1b194:	ldrd	r6, [sp, #8]
   1b198:	ldr	r8, [sp, #16]
   1b19c:	add	sp, sp, #20
   1b1a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b1a8:	strd	r6, [sp, #8]
   1b1ac:	strd	r8, [sp, #16]
   1b1b0:	strd	sl, [sp, #24]
   1b1b4:	str	lr, [sp, #32]
   1b1b8:	sub	sp, sp, #12
   1b1bc:	str	r0, [sp, #4]
   1b1c0:	cmp	r2, #0
   1b1c4:	beq	1b2c0 <__assert_fail@plt+0x9eac>
   1b1c8:	sub	ip, r2, #1
   1b1cc:	ldrd	r2, [r0]
   1b1d0:	mov	r0, #0
   1b1d4:	mov	r8, r1
   1b1d8:	asr	r9, r1, #31
   1b1dc:	str	r1, [sp]
   1b1e0:	b	1b230 <__assert_fail@plt+0x9e1c>
   1b1e4:	orrs	r4, r2, r3
   1b1e8:	movne	lr, #1
   1b1ec:	b	1b240 <__assert_fail@plt+0x9e2c>
   1b1f0:	mov	sl, r3
   1b1f4:	ldr	fp, [sp]
   1b1f8:	umull	r6, r7, r1, r2
   1b1fc:	mov	r4, r7
   1b200:	mov	r5, #0
   1b204:	umlal	r4, r5, sl, fp
   1b208:	cmp	r5, #0
   1b20c:	bne	1b274 <__assert_fail@plt+0x9e60>
   1b210:	cmp	lr, #0
   1b214:	bne	1b28c <__assert_fail@plt+0x9e78>
   1b218:	mov	r2, r6
   1b21c:	mov	r3, r4
   1b220:	orr	r0, r0, lr
   1b224:	sub	ip, ip, #1
   1b228:	cmn	ip, #1
   1b22c:	beq	1b29c <__assert_fail@plt+0x9e88>
   1b230:	mov	lr, #0
   1b234:	cmp	r8, #0
   1b238:	sbcs	r4, r9, #0
   1b23c:	blt	1b1e4 <__assert_fail@plt+0x9dd0>
   1b240:	cmp	r9, #0
   1b244:	bne	1b260 <__assert_fail@plt+0x9e4c>
   1b248:	cmp	r3, #0
   1b24c:	bne	1b1f0 <__assert_fail@plt+0x9ddc>
   1b250:	umull	r2, r3, r1, r2
   1b254:	mov	r6, r2
   1b258:	mov	r4, r3
   1b25c:	b	1b210 <__assert_fail@plt+0x9dfc>
   1b260:	cmp	r3, #0
   1b264:	bne	1b274 <__assert_fail@plt+0x9e60>
   1b268:	mov	sl, r9
   1b26c:	mov	fp, r2
   1b270:	b	1b1f8 <__assert_fail@plt+0x9de4>
   1b274:	mul	r4, r1, r3
   1b278:	mla	r4, r2, r9, r4
   1b27c:	umull	r6, r7, r1, r2
   1b280:	add	r4, r4, r7
   1b284:	mov	lr, #1
   1b288:	b	1b210 <__assert_fail@plt+0x9dfc>
   1b28c:	mvn	r2, #0
   1b290:	mvn	r3, #0
   1b294:	mov	lr, #1
   1b298:	b	1b220 <__assert_fail@plt+0x9e0c>
   1b29c:	ldr	r1, [sp, #4]
   1b2a0:	strd	r2, [r1]
   1b2a4:	add	sp, sp, #12
   1b2a8:	ldrd	r4, [sp]
   1b2ac:	ldrd	r6, [sp, #8]
   1b2b0:	ldrd	r8, [sp, #16]
   1b2b4:	ldrd	sl, [sp, #24]
   1b2b8:	add	sp, sp, #32
   1b2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2c0:	mov	r0, #0
   1b2c4:	b	1b2a4 <__assert_fail@plt+0x9e90>
   1b2c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1b2cc:	strd	r6, [sp, #8]
   1b2d0:	strd	r8, [sp, #16]
   1b2d4:	str	lr, [sp, #24]
   1b2d8:	sub	sp, sp, #20
   1b2dc:	cmp	r2, #36	; 0x24
   1b2e0:	bhi	1b334 <__assert_fail@plt+0x9f20>
   1b2e4:	mov	r5, r0
   1b2e8:	mov	r6, r1
   1b2ec:	mov	r7, r2
   1b2f0:	mov	r9, r3
   1b2f4:	cmp	r1, #0
   1b2f8:	addeq	r6, sp, #12
   1b2fc:	bl	112dc <__errno_location@plt>
   1b300:	mov	r8, r0
   1b304:	mov	r3, #0
   1b308:	str	r3, [r0]
   1b30c:	ldrb	r4, [r5]
   1b310:	bl	11288 <__ctype_b_loc@plt>
   1b314:	ldr	r1, [r0]
   1b318:	mov	r2, r5
   1b31c:	lsl	r3, r4, #1
   1b320:	ldrh	r3, [r1, r3]
   1b324:	tst	r3, #8192	; 0x2000
   1b328:	beq	1b354 <__assert_fail@plt+0x9f40>
   1b32c:	ldrb	r4, [r2, #1]!
   1b330:	b	1b31c <__assert_fail@plt+0x9f08>
   1b334:	movw	r3, #56340	; 0xdc14
   1b338:	movt	r3, #1
   1b33c:	mov	r2, #85	; 0x55
   1b340:	movw	r1, #56352	; 0xdc20
   1b344:	movt	r1, #1
   1b348:	movw	r0, #56368	; 0xdc30
   1b34c:	movt	r0, #1
   1b350:	bl	11414 <__assert_fail@plt>
   1b354:	cmp	r4, #45	; 0x2d
   1b358:	moveq	r4, #4
   1b35c:	beq	1b4f0 <__assert_fail@plt+0xa0dc>
   1b360:	mov	r3, #0
   1b364:	mov	r2, r7
   1b368:	mov	r1, r6
   1b36c:	mov	r0, r5
   1b370:	bl	11138 <__strtoull_internal@plt>
   1b374:	strd	r0, [sp]
   1b378:	ldr	r7, [r6]
   1b37c:	cmp	r7, r5
   1b380:	beq	1b3a4 <__assert_fail@plt+0x9f90>
   1b384:	ldr	r3, [r8]
   1b388:	cmp	r3, #0
   1b38c:	beq	1b4c8 <__assert_fail@plt+0xa0b4>
   1b390:	cmp	r3, #34	; 0x22
   1b394:	moveq	r4, #1
   1b398:	beq	1b4cc <__assert_fail@plt+0xa0b8>
   1b39c:	mov	r4, #4
   1b3a0:	b	1b4f0 <__assert_fail@plt+0xa0dc>
   1b3a4:	ldr	r3, [sp, #48]	; 0x30
   1b3a8:	cmp	r3, #0
   1b3ac:	beq	1b808 <__assert_fail@plt+0xa3f4>
   1b3b0:	ldrb	r1, [r5]
   1b3b4:	cmp	r1, #0
   1b3b8:	moveq	r4, #4
   1b3bc:	beq	1b4f0 <__assert_fail@plt+0xa0dc>
   1b3c0:	mov	r0, r3
   1b3c4:	bl	112b8 <strchr@plt>
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b810 <__assert_fail@plt+0xa3fc>
   1b3d0:	mov	r2, #1
   1b3d4:	mov	r3, #0
   1b3d8:	strd	r2, [sp]
   1b3dc:	ldrb	r5, [r7]
   1b3e0:	mov	r4, #0
   1b3e4:	mov	r1, r5
   1b3e8:	ldr	r0, [sp, #48]	; 0x30
   1b3ec:	bl	112b8 <strchr@plt>
   1b3f0:	cmp	r0, #0
   1b3f4:	beq	1b50c <__assert_fail@plt+0xa0f8>
   1b3f8:	sub	r3, r5, #69	; 0x45
   1b3fc:	cmp	r3, #47	; 0x2f
   1b400:	ldrls	pc, [pc, r3, lsl #2]
   1b404:	b	1b658 <__assert_fail@plt+0xa244>
   1b408:	andeq	fp, r1, ip, lsl r5
   1b40c:	andeq	fp, r1, r8, asr r6
   1b410:	andeq	fp, r1, ip, lsl r5
   1b414:	andeq	fp, r1, r8, asr r6
   1b418:	andeq	fp, r1, r8, asr r6
   1b41c:	andeq	fp, r1, r8, asr r6
   1b420:	andeq	fp, r1, ip, lsl r5
   1b424:	andeq	fp, r1, r8, asr r6
   1b428:	andeq	fp, r1, ip, lsl r5
   1b42c:	andeq	fp, r1, r8, asr r6
   1b430:	andeq	fp, r1, r8, asr r6
   1b434:	andeq	fp, r1, ip, lsl r5
   1b438:	andeq	fp, r1, r8, asr r6
   1b43c:	andeq	fp, r1, r8, asr r6
   1b440:	andeq	fp, r1, r8, asr r6
   1b444:	andeq	fp, r1, ip, lsl r5
   1b448:	andeq	fp, r1, r8, asr r6
   1b44c:	andeq	fp, r1, r8, asr r6
   1b450:	andeq	fp, r1, r8, asr r6
   1b454:	andeq	fp, r1, r8, asr r6
   1b458:	andeq	fp, r1, ip, lsl r5
   1b45c:	andeq	fp, r1, ip, lsl r5
   1b460:	andeq	fp, r1, r8, asr r6
   1b464:	andeq	fp, r1, r8, asr r6
   1b468:	andeq	fp, r1, r8, asr r6
   1b46c:	andeq	fp, r1, r8, asr r6
   1b470:	andeq	fp, r1, r8, asr r6
   1b474:	andeq	fp, r1, r8, asr r6
   1b478:	andeq	fp, r1, r8, asr r6
   1b47c:	andeq	fp, r1, r8, asr r6
   1b480:	andeq	fp, r1, r8, asr r6
   1b484:	andeq	fp, r1, r8, asr r6
   1b488:	andeq	fp, r1, r8, asr r6
   1b48c:	andeq	fp, r1, r8, asr r6
   1b490:	andeq	fp, r1, ip, lsl r5
   1b494:	andeq	fp, r1, r8, asr r6
   1b498:	andeq	fp, r1, r8, asr r6
   1b49c:	andeq	fp, r1, r8, asr r6
   1b4a0:	andeq	fp, r1, ip, lsl r5
   1b4a4:	andeq	fp, r1, r8, asr r6
   1b4a8:	andeq	fp, r1, ip, lsl r5
   1b4ac:	andeq	fp, r1, r8, asr r6
   1b4b0:	andeq	fp, r1, r8, asr r6
   1b4b4:	andeq	fp, r1, r8, asr r6
   1b4b8:	andeq	fp, r1, r8, asr r6
   1b4bc:	andeq	fp, r1, r8, asr r6
   1b4c0:	andeq	fp, r1, r8, asr r6
   1b4c4:	andeq	fp, r1, ip, lsl r5
   1b4c8:	mov	r4, #0
   1b4cc:	ldr	r3, [sp, #48]	; 0x30
   1b4d0:	cmp	r3, #0
   1b4d4:	strdeq	r0, [r9]
   1b4d8:	beq	1b4f0 <__assert_fail@plt+0xa0dc>
   1b4dc:	ldrb	r5, [r7]
   1b4e0:	cmp	r5, #0
   1b4e4:	bne	1b3e4 <__assert_fail@plt+0x9fd0>
   1b4e8:	ldrd	r2, [sp]
   1b4ec:	strd	r2, [r9]
   1b4f0:	mov	r0, r4
   1b4f4:	add	sp, sp, #20
   1b4f8:	ldrd	r4, [sp]
   1b4fc:	ldrd	r6, [sp, #8]
   1b500:	ldrd	r8, [sp, #16]
   1b504:	add	sp, sp, #24
   1b508:	pop	{pc}		; (ldr pc, [sp], #4)
   1b50c:	ldrd	r2, [sp]
   1b510:	strd	r2, [r9]
   1b514:	orr	r4, r4, #2
   1b518:	b	1b4f0 <__assert_fail@plt+0xa0dc>
   1b51c:	mov	r1, #48	; 0x30
   1b520:	ldr	r0, [sp, #48]	; 0x30
   1b524:	bl	112b8 <strchr@plt>
   1b528:	cmp	r0, #0
   1b52c:	beq	1b664 <__assert_fail@plt+0xa250>
   1b530:	ldrb	r3, [r7, #1]
   1b534:	cmp	r3, #68	; 0x44
   1b538:	beq	1b670 <__assert_fail@plt+0xa25c>
   1b53c:	cmp	r3, #105	; 0x69
   1b540:	beq	1b640 <__assert_fail@plt+0xa22c>
   1b544:	cmp	r3, #66	; 0x42
   1b548:	moveq	r7, #2
   1b54c:	movne	r7, #1
   1b550:	moveq	r1, #1000	; 0x3e8
   1b554:	movne	r1, #1024	; 0x400
   1b558:	sub	r5, r5, #66	; 0x42
   1b55c:	cmp	r5, #53	; 0x35
   1b560:	ldrls	pc, [pc, r5, lsl #2]
   1b564:	b	1b7d4 <__assert_fail@plt+0xa3c0>
   1b568:	andeq	fp, r1, r4, asr #13
   1b56c:	ldrdeq	fp, [r1], -r4
   1b570:	ldrdeq	fp, [r1], -r4
   1b574:	andeq	fp, r1, ip, lsl #14
   1b578:	ldrdeq	fp, [r1], -r4
   1b57c:	andeq	fp, r1, ip, lsl r7
   1b580:	ldrdeq	fp, [r1], -r4
   1b584:	ldrdeq	fp, [r1], -r4
   1b588:	ldrdeq	fp, [r1], -r4
   1b58c:	andeq	fp, r1, ip, lsr #14
   1b590:	ldrdeq	fp, [r1], -r4
   1b594:	andeq	fp, r1, ip, lsr r7
   1b598:	ldrdeq	fp, [r1], -r4
   1b59c:	ldrdeq	fp, [r1], -r4
   1b5a0:	andeq	fp, r1, ip, asr #14
   1b5a4:	ldrdeq	fp, [r1], -r4
   1b5a8:	ldrdeq	fp, [r1], -r4
   1b5ac:	ldrdeq	fp, [r1], -r4
   1b5b0:	andeq	fp, r1, ip, asr r7
   1b5b4:	ldrdeq	fp, [r1], -r4
   1b5b8:	ldrdeq	fp, [r1], -r4
   1b5bc:	ldrdeq	fp, [r1], -r4
   1b5c0:	ldrdeq	fp, [r1], -r4
   1b5c4:			; <UNDEFINED> instruction: 0x0001b7b4
   1b5c8:	andeq	fp, r1, r4, asr #15
   1b5cc:	ldrdeq	fp, [r1], -r4
   1b5d0:	ldrdeq	fp, [r1], -r4
   1b5d4:	ldrdeq	fp, [r1], -r4
   1b5d8:	ldrdeq	fp, [r1], -r4
   1b5dc:	ldrdeq	fp, [r1], -r4
   1b5e0:	ldrdeq	fp, [r1], -r4
   1b5e4:	ldrdeq	fp, [r1], -r4
   1b5e8:	andeq	fp, r1, ip, ror r6
   1b5ec:	andeq	fp, r1, r4, ror #15
   1b5f0:	ldrdeq	fp, [r1], -r4
   1b5f4:	ldrdeq	fp, [r1], -r4
   1b5f8:	ldrdeq	fp, [r1], -r4
   1b5fc:	andeq	fp, r1, ip, lsl r7
   1b600:	ldrdeq	fp, [r1], -r4
   1b604:	ldrdeq	fp, [r1], -r4
   1b608:	ldrdeq	fp, [r1], -r4
   1b60c:	andeq	fp, r1, ip, lsr #14
   1b610:	ldrdeq	fp, [r1], -r4
   1b614:	andeq	fp, r1, ip, lsr r7
   1b618:	ldrdeq	fp, [r1], -r4
   1b61c:	ldrdeq	fp, [r1], -r4
   1b620:	ldrdeq	fp, [r1], -r4
   1b624:	ldrdeq	fp, [r1], -r4
   1b628:	ldrdeq	fp, [r1], -r4
   1b62c:	ldrdeq	fp, [r1], -r4
   1b630:	andeq	fp, r1, ip, asr r7
   1b634:	ldrdeq	fp, [r1], -r4
   1b638:	ldrdeq	fp, [r1], -r4
   1b63c:	andeq	fp, r1, ip, ror #14
   1b640:	ldrb	r3, [r7, #2]
   1b644:	cmp	r3, #66	; 0x42
   1b648:	movne	r7, #1
   1b64c:	moveq	r7, #3
   1b650:	mov	r1, #1024	; 0x400
   1b654:	b	1b558 <__assert_fail@plt+0xa144>
   1b658:	mov	r7, #1
   1b65c:	mov	r1, #1024	; 0x400
   1b660:	b	1b558 <__assert_fail@plt+0xa144>
   1b664:	mov	r7, #1
   1b668:	mov	r1, #1024	; 0x400
   1b66c:	b	1b558 <__assert_fail@plt+0xa144>
   1b670:	mov	r7, #2
   1b674:	mov	r1, #1000	; 0x3e8
   1b678:	b	1b558 <__assert_fail@plt+0xa144>
   1b67c:	ldr	r3, [sp]
   1b680:	ldr	ip, [sp, #4]
   1b684:	lsl	r2, ip, #9
   1b688:	orr	r2, r2, r3, lsr #23
   1b68c:	lsl	r3, r3, #9
   1b690:	mov	r0, #0
   1b694:	mov	r1, r0
   1b698:	lsr	r0, ip, #23
   1b69c:	orrs	r1, r0, r1
   1b6a0:	streq	r3, [sp]
   1b6a4:	streq	r2, [sp, #4]
   1b6a8:	moveq	r0, #0
   1b6ac:	beq	1b7e8 <__assert_fail@plt+0xa3d4>
   1b6b0:	mvn	r2, #0
   1b6b4:	mvn	r3, #0
   1b6b8:	strd	r2, [sp]
   1b6bc:	mov	r0, #1
   1b6c0:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b6c4:	ldr	r3, [sp]
   1b6c8:	ldr	ip, [sp, #4]
   1b6cc:	lsl	r2, ip, #10
   1b6d0:	orr	r2, r2, r3, lsr #22
   1b6d4:	lsl	r3, r3, #10
   1b6d8:	mov	r0, #0
   1b6dc:	mov	r1, r0
   1b6e0:	lsr	r0, ip, #22
   1b6e4:	orrs	r1, r0, r1
   1b6e8:	streq	r3, [sp]
   1b6ec:	streq	r2, [sp, #4]
   1b6f0:	moveq	r0, #0
   1b6f4:	beq	1b7e8 <__assert_fail@plt+0xa3d4>
   1b6f8:	mvn	r2, #0
   1b6fc:	mvn	r3, #0
   1b700:	strd	r2, [sp]
   1b704:	mov	r0, #1
   1b708:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b70c:	mov	r2, #6
   1b710:	mov	r0, sp
   1b714:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b718:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b71c:	mov	r2, #3
   1b720:	mov	r0, sp
   1b724:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b728:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b72c:	mov	r2, #1
   1b730:	mov	r0, sp
   1b734:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b738:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b73c:	mov	r2, #2
   1b740:	mov	r0, sp
   1b744:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b748:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b74c:	mov	r2, #5
   1b750:	mov	r0, sp
   1b754:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b758:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b75c:	mov	r2, #4
   1b760:	mov	r0, sp
   1b764:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b768:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b76c:	ldr	r3, [sp]
   1b770:	ldr	r2, [sp, #4]
   1b774:	adds	r3, r3, r3
   1b778:	adc	r2, r2, r2
   1b77c:	mov	r1, #0
   1b780:	mov	r0, r1
   1b784:	ldr	r1, [sp, #4]
   1b788:	lsr	r1, r1, #31
   1b78c:	orrs	r1, r1, r0
   1b790:	streq	r3, [sp]
   1b794:	streq	r2, [sp, #4]
   1b798:	moveq	r0, #0
   1b79c:	beq	1b7e8 <__assert_fail@plt+0xa3d4>
   1b7a0:	mvn	r2, #0
   1b7a4:	mvn	r3, #0
   1b7a8:	strd	r2, [sp]
   1b7ac:	mov	r0, #1
   1b7b0:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b7b4:	mov	r2, #8
   1b7b8:	mov	r0, sp
   1b7bc:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b7c0:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b7c4:	mov	r2, #7
   1b7c8:	mov	r0, sp
   1b7cc:	bl	1b1a4 <__assert_fail@plt+0x9d90>
   1b7d0:	b	1b7e8 <__assert_fail@plt+0xa3d4>
   1b7d4:	ldrd	r2, [sp]
   1b7d8:	strd	r2, [r9]
   1b7dc:	orr	r4, r4, #2
   1b7e0:	b	1b4f0 <__assert_fail@plt+0xa0dc>
   1b7e4:	mov	r0, #0
   1b7e8:	orr	r4, r4, r0
   1b7ec:	ldr	r3, [r6]
   1b7f0:	add	r2, r3, r7
   1b7f4:	str	r2, [r6]
   1b7f8:	ldrb	r3, [r3, r7]
   1b7fc:	cmp	r3, #0
   1b800:	orrne	r4, r4, #2
   1b804:	b	1b4e8 <__assert_fail@plt+0xa0d4>
   1b808:	mov	r4, #4
   1b80c:	b	1b4f0 <__assert_fail@plt+0xa0dc>
   1b810:	mov	r4, #4
   1b814:	b	1b4f0 <__assert_fail@plt+0xa0dc>
   1b818:	strd	r4, [sp, #-16]!
   1b81c:	str	r6, [sp, #8]
   1b820:	str	lr, [sp, #12]
   1b824:	cmp	r1, #0
   1b828:	cmpne	r0, #0
   1b82c:	beq	1b868 <__assert_fail@plt+0xa454>
   1b830:	mov	r2, r0
   1b834:	mov	r3, r1
   1b838:	umull	r4, r5, r0, r1
   1b83c:	adds	r1, r5, #0
   1b840:	movne	r1, #1
   1b844:	cmp	r4, #0
   1b848:	movlt	r1, #1
   1b84c:	cmp	r1, #0
   1b850:	beq	1b870 <__assert_fail@plt+0xa45c>
   1b854:	bl	112dc <__errno_location@plt>
   1b858:	mov	r3, #12
   1b85c:	str	r3, [r0]
   1b860:	mov	r0, #0
   1b864:	b	1b87c <__assert_fail@plt+0xa468>
   1b868:	mov	r3, #1
   1b86c:	mov	r2, r3
   1b870:	mov	r1, r3
   1b874:	mov	r0, r2
   1b878:	bl	110a8 <calloc@plt>
   1b87c:	ldrd	r4, [sp]
   1b880:	ldr	r6, [sp, #8]
   1b884:	add	sp, sp, #12
   1b888:	pop	{pc}		; (ldr pc, [sp], #4)
   1b88c:	str	r4, [sp, #-8]!
   1b890:	str	lr, [sp, #4]
   1b894:	cmp	r0, #0
   1b898:	beq	1b8b4 <__assert_fail@plt+0xa4a0>
   1b89c:	bge	1b8b8 <__assert_fail@plt+0xa4a4>
   1b8a0:	bl	112dc <__errno_location@plt>
   1b8a4:	mov	r3, #12
   1b8a8:	str	r3, [r0]
   1b8ac:	mov	r0, #0
   1b8b0:	b	1b8bc <__assert_fail@plt+0xa4a8>
   1b8b4:	mov	r0, #1
   1b8b8:	bl	11240 <malloc@plt>
   1b8bc:	ldr	r4, [sp]
   1b8c0:	add	sp, sp, #4
   1b8c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8c8:	str	r4, [sp, #-8]!
   1b8cc:	str	lr, [sp, #4]
   1b8d0:	cmp	r0, #0
   1b8d4:	beq	1b8f8 <__assert_fail@plt+0xa4e4>
   1b8d8:	cmp	r1, #0
   1b8dc:	beq	1b904 <__assert_fail@plt+0xa4f0>
   1b8e0:	cmp	r1, #0
   1b8e4:	blt	1b910 <__assert_fail@plt+0xa4fc>
   1b8e8:	bl	11180 <realloc@plt>
   1b8ec:	ldr	r4, [sp]
   1b8f0:	add	sp, sp, #4
   1b8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8f8:	mov	r0, r1
   1b8fc:	bl	1b88c <__assert_fail@plt+0xa478>
   1b900:	b	1b8ec <__assert_fail@plt+0xa4d8>
   1b904:	bl	16d78 <__assert_fail@plt+0x5964>
   1b908:	mov	r0, #0
   1b90c:	b	1b8ec <__assert_fail@plt+0xa4d8>
   1b910:	bl	112dc <__errno_location@plt>
   1b914:	mov	r3, #12
   1b918:	str	r3, [r0]
   1b91c:	mov	r0, #0
   1b920:	b	1b8ec <__assert_fail@plt+0xa4d8>
   1b924:	andeq	r0, r0, r0
   1b928:	strd	r4, [sp, #-16]!
   1b92c:	str	r6, [sp, #8]
   1b930:	str	lr, [sp, #12]
   1b934:	mov	r5, r0
   1b938:	mov	r4, r1
   1b93c:	movw	r3, #58144	; 0xe320
   1b940:	movt	r3, #2
   1b944:	ldr	r3, [r3]
   1b948:	cmp	r3, #0
   1b94c:	beq	1b980 <__assert_fail@plt+0xa56c>
   1b950:	movw	r3, #58144	; 0xe320
   1b954:	movt	r3, #2
   1b958:	ldr	r2, [r3]
   1b95c:	cmp	r2, #0
   1b960:	beq	1b9a4 <__assert_fail@plt+0xa590>
   1b964:	mov	r1, r4
   1b968:	mov	r0, r5
   1b96c:	bl	11354 <strtod_l@plt>
   1b970:	ldrd	r4, [sp]
   1b974:	ldr	r6, [sp, #8]
   1b978:	add	sp, sp, #12
   1b97c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b980:	mov	r2, #0
   1b984:	movw	r1, #56408	; 0xdc58
   1b988:	movt	r1, #1
   1b98c:	movw	r0, #8127	; 0x1fbf
   1b990:	bl	1139c <newlocale@plt>
   1b994:	movw	r3, #58144	; 0xe320
   1b998:	movt	r3, #2
   1b99c:	str	r0, [r3]
   1b9a0:	b	1b950 <__assert_fail@plt+0xa53c>
   1b9a4:	cmp	r4, #0
   1b9a8:	beq	1b9b8 <__assert_fail@plt+0xa5a4>
   1b9ac:	str	r5, [r4]
   1b9b0:	vldr	d0, [pc, #8]	; 1b9c0 <__assert_fail@plt+0xa5ac>
   1b9b4:	b	1b970 <__assert_fail@plt+0xa55c>
   1b9b8:	vldr	d0, [pc]	; 1b9c0 <__assert_fail@plt+0xa5ac>
   1b9bc:	b	1b970 <__assert_fail@plt+0xa55c>
	...
   1b9c8:	strd	r4, [sp, #-16]!
   1b9cc:	str	r6, [sp, #8]
   1b9d0:	str	lr, [sp, #12]
   1b9d4:	mov	r5, r0
   1b9d8:	bl	11204 <__fpending@plt>
   1b9dc:	mov	r6, r0
   1b9e0:	ldr	r4, [r5]
   1b9e4:	and	r4, r4, #32
   1b9e8:	mov	r0, r5
   1b9ec:	bl	1bb40 <__assert_fail@plt+0xa72c>
   1b9f0:	cmp	r4, #0
   1b9f4:	bne	1ba28 <__assert_fail@plt+0xa614>
   1b9f8:	cmp	r0, #0
   1b9fc:	beq	1ba18 <__assert_fail@plt+0xa604>
   1ba00:	cmp	r6, #0
   1ba04:	bne	1ba44 <__assert_fail@plt+0xa630>
   1ba08:	bl	112dc <__errno_location@plt>
   1ba0c:	ldr	r0, [r0]
   1ba10:	subs	r0, r0, #9
   1ba14:	mvnne	r0, #0
   1ba18:	ldrd	r4, [sp]
   1ba1c:	ldr	r6, [sp, #8]
   1ba20:	add	sp, sp, #12
   1ba24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba28:	cmp	r0, #0
   1ba2c:	bne	1ba4c <__assert_fail@plt+0xa638>
   1ba30:	bl	112dc <__errno_location@plt>
   1ba34:	mov	r3, #0
   1ba38:	str	r3, [r0]
   1ba3c:	mvn	r0, #0
   1ba40:	b	1ba18 <__assert_fail@plt+0xa604>
   1ba44:	mvn	r0, #0
   1ba48:	b	1ba18 <__assert_fail@plt+0xa604>
   1ba4c:	mvn	r0, #0
   1ba50:	b	1ba18 <__assert_fail@plt+0xa604>
   1ba54:	andeq	r0, r0, r0
   1ba58:	vldr	d7, [pc, #200]	; 1bb28 <__assert_fail@plt+0xa714>
   1ba5c:	vcmpe.f64	d0, d7
   1ba60:	vmrs	APSR_nzcv, fpscr
   1ba64:	ble	1ba90 <__assert_fail@plt+0xa67c>
   1ba68:	vldr	d7, [pc, #192]	; 1bb30 <__assert_fail@plt+0xa71c>
   1ba6c:	vcmpe.f64	d0, d7
   1ba70:	vmrs	APSR_nzcv, fpscr
   1ba74:	bmi	1baa4 <__assert_fail@plt+0xa690>
   1ba78:	mvn	r3, #-2147483648	; 0x80000000
   1ba7c:	str	r3, [r0]
   1ba80:	movw	r3, #51711	; 0xc9ff
   1ba84:	movt	r3, #15258	; 0x3b9a
   1ba88:	str	r3, [r0, #4]
   1ba8c:	bx	lr
   1ba90:	mov	r3, #-2147483648	; 0x80000000
   1ba94:	str	r3, [r0]
   1ba98:	mov	r3, #0
   1ba9c:	str	r3, [r0, #4]
   1baa0:	bx	lr
   1baa4:	vcvt.s32.f64	s15, d0
   1baa8:	vcvt.f64.s32	d6, s15
   1baac:	vsub.f64	d0, d0, d6
   1bab0:	vldr	d6, [pc, #128]	; 1bb38 <__assert_fail@plt+0xa724>
   1bab4:	vmul.f64	d0, d0, d6
   1bab8:	vcvt.s32.f64	s14, d0
   1babc:	vcvt.f64.s32	d6, s14
   1bac0:	vcmpe.f64	d6, d0
   1bac4:	vmrs	APSR_nzcv, fpscr
   1bac8:	movmi	r3, #1
   1bacc:	movpl	r3, #0
   1bad0:	vmov	r2, s14
   1bad4:	add	r2, r3, r2
   1bad8:	movw	r3, #12193	; 0x2fa1
   1badc:	movt	r3, #17592	; 0x44b8
   1bae0:	smull	r3, r1, r3, r2
   1bae4:	asr	r3, r2, #31
   1bae8:	rsb	r3, r3, r1, asr #28
   1baec:	vmov	r1, s15
   1baf0:	add	r1, r3, r1
   1baf4:	mov	ip, #51712	; 0xca00
   1baf8:	movt	ip, #15258	; 0x3b9a
   1bafc:	mls	r3, ip, r3, r2
   1bb00:	cmp	r3, #0
   1bb04:	blt	1bb14 <__assert_fail@plt+0xa700>
   1bb08:	str	r1, [r0]
   1bb0c:	str	r3, [r0, #4]
   1bb10:	bx	lr
   1bb14:	sub	r1, r1, #1
   1bb18:	add	r3, r3, #998244352	; 0x3b800000
   1bb1c:	add	r3, r3, #1753088	; 0x1ac000
   1bb20:	add	r3, r3, #2560	; 0xa00
   1bb24:	b	1bb08 <__assert_fail@plt+0xa6f4>
   1bb28:	andeq	r0, r0, r0
   1bb2c:	mvngt	r0, r0
   1bb30:	andeq	r0, r0, r0
   1bb34:	mvnmi	r0, r0
   1bb38:	andeq	r0, r0, r0
   1bb3c:	bicmi	ip, sp, r5, ror #26
   1bb40:	strd	r4, [sp, #-16]!
   1bb44:	str	r6, [sp, #8]
   1bb48:	str	lr, [sp, #12]
   1bb4c:	sub	sp, sp, #8
   1bb50:	mov	r4, r0
   1bb54:	bl	11318 <fileno@plt>
   1bb58:	cmp	r0, #0
   1bb5c:	blt	1bbd4 <__assert_fail@plt+0xa7c0>
   1bb60:	mov	r0, r4
   1bb64:	bl	11258 <__freading@plt>
   1bb68:	cmp	r0, #0
   1bb6c:	beq	1bba0 <__assert_fail@plt+0xa78c>
   1bb70:	mov	r0, r4
   1bb74:	bl	11318 <fileno@plt>
   1bb78:	mov	r3, #1
   1bb7c:	str	r3, [sp]
   1bb80:	mov	r2, #0
   1bb84:	mov	r3, #0
   1bb88:	bl	111ec <lseek64@plt>
   1bb8c:	mvn	r2, #0
   1bb90:	mvn	r3, #0
   1bb94:	cmp	r1, r3
   1bb98:	cmpeq	r0, r2
   1bb9c:	beq	1bbe0 <__assert_fail@plt+0xa7cc>
   1bba0:	mov	r0, r4
   1bba4:	bl	1bbfc <__assert_fail@plt+0xa7e8>
   1bba8:	cmp	r0, #0
   1bbac:	beq	1bbe0 <__assert_fail@plt+0xa7cc>
   1bbb0:	bl	112dc <__errno_location@plt>
   1bbb4:	mov	r5, r0
   1bbb8:	ldr	r6, [r0]
   1bbbc:	mov	r0, r4
   1bbc0:	bl	1133c <fclose@plt>
   1bbc4:	cmp	r6, #0
   1bbc8:	strne	r6, [r5]
   1bbcc:	mvnne	r0, #0
   1bbd0:	b	1bbe8 <__assert_fail@plt+0xa7d4>
   1bbd4:	mov	r0, r4
   1bbd8:	bl	1133c <fclose@plt>
   1bbdc:	b	1bbe8 <__assert_fail@plt+0xa7d4>
   1bbe0:	mov	r0, r4
   1bbe4:	bl	1133c <fclose@plt>
   1bbe8:	add	sp, sp, #8
   1bbec:	ldrd	r4, [sp]
   1bbf0:	ldr	r6, [sp, #8]
   1bbf4:	add	sp, sp, #12
   1bbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbfc:	str	r4, [sp, #-8]!
   1bc00:	str	lr, [sp, #4]
   1bc04:	sub	sp, sp, #8
   1bc08:	subs	r4, r0, #0
   1bc0c:	beq	1bc20 <__assert_fail@plt+0xa80c>
   1bc10:	mov	r0, r4
   1bc14:	bl	11258 <__freading@plt>
   1bc18:	cmp	r0, #0
   1bc1c:	bne	1bc38 <__assert_fail@plt+0xa824>
   1bc20:	mov	r0, r4
   1bc24:	bl	110fc <fflush@plt>
   1bc28:	add	sp, sp, #8
   1bc2c:	ldr	r4, [sp]
   1bc30:	add	sp, sp, #4
   1bc34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc38:	ldr	r3, [r4]
   1bc3c:	tst	r3, #256	; 0x100
   1bc40:	bne	1bc50 <__assert_fail@plt+0xa83c>
   1bc44:	mov	r0, r4
   1bc48:	bl	110fc <fflush@plt>
   1bc4c:	b	1bc28 <__assert_fail@plt+0xa814>
   1bc50:	mov	r3, #1
   1bc54:	str	r3, [sp]
   1bc58:	mov	r2, #0
   1bc5c:	mov	r3, #0
   1bc60:	mov	r0, r4
   1bc64:	bl	1bc6c <__assert_fail@plt+0xa858>
   1bc68:	b	1bc44 <__assert_fail@plt+0xa830>
   1bc6c:	str	r4, [sp, #-16]!
   1bc70:	strd	r6, [sp, #4]
   1bc74:	str	lr, [sp, #12]
   1bc78:	sub	sp, sp, #8
   1bc7c:	mov	r4, r0
   1bc80:	mov	r6, r2
   1bc84:	mov	r7, r3
   1bc88:	ldr	r2, [r0, #8]
   1bc8c:	ldr	r3, [r0, #4]
   1bc90:	cmp	r2, r3
   1bc94:	beq	1bcc4 <__assert_fail@plt+0xa8b0>
   1bc98:	ldr	r3, [sp, #24]
   1bc9c:	str	r3, [sp]
   1bca0:	mov	r2, r6
   1bca4:	mov	r3, r7
   1bca8:	mov	r0, r4
   1bcac:	bl	11348 <fseeko64@plt>
   1bcb0:	add	sp, sp, #8
   1bcb4:	ldr	r4, [sp]
   1bcb8:	ldrd	r6, [sp, #4]
   1bcbc:	add	sp, sp, #12
   1bcc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcc4:	ldr	r2, [r0, #20]
   1bcc8:	ldr	r3, [r0, #16]
   1bccc:	cmp	r2, r3
   1bcd0:	bne	1bc98 <__assert_fail@plt+0xa884>
   1bcd4:	ldr	r3, [r0, #36]	; 0x24
   1bcd8:	cmp	r3, #0
   1bcdc:	bne	1bc98 <__assert_fail@plt+0xa884>
   1bce0:	bl	11318 <fileno@plt>
   1bce4:	ldr	r3, [sp, #24]
   1bce8:	str	r3, [sp]
   1bcec:	mov	r2, r6
   1bcf0:	mov	r3, r7
   1bcf4:	bl	111ec <lseek64@plt>
   1bcf8:	mvn	r2, #0
   1bcfc:	mvn	r3, #0
   1bd00:	cmp	r1, r3
   1bd04:	cmpeq	r0, r2
   1bd08:	beq	1bd24 <__assert_fail@plt+0xa910>
   1bd0c:	ldr	r3, [r4]
   1bd10:	bic	r3, r3, #16
   1bd14:	str	r3, [r4]
   1bd18:	strd	r0, [r4, #80]	; 0x50
   1bd1c:	mov	r0, #0
   1bd20:	b	1bcb0 <__assert_fail@plt+0xa89c>
   1bd24:	mvn	r0, #0
   1bd28:	b	1bcb0 <__assert_fail@plt+0xa89c>
   1bd2c:	str	r4, [sp, #-8]!
   1bd30:	str	lr, [sp, #4]
   1bd34:	mov	r0, #14
   1bd38:	bl	11390 <nl_langinfo@plt>
   1bd3c:	cmp	r0, #0
   1bd40:	beq	1bd64 <__assert_fail@plt+0xa950>
   1bd44:	ldrb	r2, [r0]
   1bd48:	movw	r3, #56412	; 0xdc5c
   1bd4c:	movt	r3, #1
   1bd50:	cmp	r2, #0
   1bd54:	moveq	r0, r3
   1bd58:	ldr	r4, [sp]
   1bd5c:	add	sp, sp, #4
   1bd60:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd64:	movw	r0, #56412	; 0xdc5c
   1bd68:	movt	r0, #1
   1bd6c:	b	1bd58 <__assert_fail@plt+0xa944>
   1bd70:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bd74:	strd	r6, [sp, #8]
   1bd78:	str	lr, [sp, #16]
   1bd7c:	sub	sp, sp, #12
   1bd80:	mov	r7, r1
   1bd84:	mov	r5, r2
   1bd88:	subs	r6, r0, #0
   1bd8c:	addeq	r6, sp, #4
   1bd90:	mov	r0, r6
   1bd94:	bl	11210 <mbrtowc@plt>
   1bd98:	mov	r4, r0
   1bd9c:	cmp	r5, #0
   1bda0:	cmnne	r0, #3
   1bda4:	bhi	1bdc0 <__assert_fail@plt+0xa9ac>
   1bda8:	mov	r0, r4
   1bdac:	add	sp, sp, #12
   1bdb0:	ldrd	r4, [sp]
   1bdb4:	ldrd	r6, [sp, #8]
   1bdb8:	add	sp, sp, #16
   1bdbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdc0:	mov	r0, #0
   1bdc4:	bl	1be3c <__assert_fail@plt+0xaa28>
   1bdc8:	cmp	r0, #0
   1bdcc:	bne	1bda8 <__assert_fail@plt+0xa994>
   1bdd0:	ldrb	r3, [r7]
   1bdd4:	str	r3, [r6]
   1bdd8:	mov	r4, #1
   1bddc:	b	1bda8 <__assert_fail@plt+0xa994>
   1bde0:	str	r4, [sp, #-8]!
   1bde4:	str	lr, [sp, #4]
   1bde8:	umull	r2, r3, r1, r2
   1bdec:	cmp	r3, #0
   1bdf0:	bne	1be08 <__assert_fail@plt+0xa9f4>
   1bdf4:	mov	r1, r2
   1bdf8:	bl	1b8c8 <__assert_fail@plt+0xa4b4>
   1bdfc:	ldr	r4, [sp]
   1be00:	add	sp, sp, #4
   1be04:	pop	{pc}		; (ldr pc, [sp], #4)
   1be08:	bl	112dc <__errno_location@plt>
   1be0c:	mov	r3, #12
   1be10:	str	r3, [r0]
   1be14:	mov	r0, #0
   1be18:	b	1bdfc <__assert_fail@plt+0xa9e8>
   1be1c:	str	r4, [sp, #-8]!
   1be20:	str	lr, [sp, #4]
   1be24:	mov	r2, #3
   1be28:	mov	r1, #0
   1be2c:	bl	16ad0 <__assert_fail@plt+0x56bc>
   1be30:	ldr	r4, [sp]
   1be34:	add	sp, sp, #4
   1be38:	pop	{pc}		; (ldr pc, [sp], #4)
   1be3c:	push	{lr}		; (str lr, [sp, #-4]!)
   1be40:	sub	sp, sp, #268	; 0x10c
   1be44:	movw	r2, #257	; 0x101
   1be48:	add	r1, sp, #4
   1be4c:	bl	1be98 <__assert_fail@plt+0xaa84>
   1be50:	cmp	r0, #0
   1be54:	movne	r0, #0
   1be58:	bne	1be90 <__assert_fail@plt+0xaa7c>
   1be5c:	movw	r1, #56408	; 0xdc58
   1be60:	movt	r1, #1
   1be64:	add	r0, sp, #4
   1be68:	bl	110cc <strcmp@plt>
   1be6c:	cmp	r0, #0
   1be70:	beq	1be8c <__assert_fail@plt+0xaa78>
   1be74:	movw	r1, #56420	; 0xdc64
   1be78:	movt	r1, #1
   1be7c:	add	r0, sp, #4
   1be80:	bl	110cc <strcmp@plt>
   1be84:	adds	r0, r0, #0
   1be88:	movne	r0, #1
   1be8c:	and	r0, r0, #1
   1be90:	add	sp, sp, #268	; 0x10c
   1be94:	pop	{pc}		; (ldr pc, [sp], #4)
   1be98:	strd	r4, [sp, #-16]!
   1be9c:	str	r6, [sp, #8]
   1bea0:	str	lr, [sp, #12]
   1bea4:	mov	r6, r1
   1bea8:	mov	r4, r2
   1beac:	mov	r1, #0
   1beb0:	bl	11378 <setlocale@plt>
   1beb4:	subs	r5, r0, #0
   1beb8:	beq	1befc <__assert_fail@plt+0xaae8>
   1bebc:	mov	r0, r5
   1bec0:	bl	112a0 <strlen@plt>
   1bec4:	cmp	r4, r0
   1bec8:	bhi	1bf18 <__assert_fail@plt+0xab04>
   1becc:	cmp	r4, #0
   1bed0:	moveq	r0, #34	; 0x22
   1bed4:	beq	1bf2c <__assert_fail@plt+0xab18>
   1bed8:	sub	r4, r4, #1
   1bedc:	mov	r2, r4
   1bee0:	mov	r1, r5
   1bee4:	mov	r0, r6
   1bee8:	bl	1112c <memcpy@plt>
   1beec:	mov	r3, #0
   1bef0:	strb	r3, [r6, r4]
   1bef4:	mov	r0, #34	; 0x22
   1bef8:	b	1bf2c <__assert_fail@plt+0xab18>
   1befc:	cmp	r4, #0
   1bf00:	moveq	r0, #22
   1bf04:	beq	1bf2c <__assert_fail@plt+0xab18>
   1bf08:	mov	r3, #0
   1bf0c:	strb	r3, [r6]
   1bf10:	mov	r0, #22
   1bf14:	b	1bf2c <__assert_fail@plt+0xab18>
   1bf18:	add	r2, r0, #1
   1bf1c:	mov	r1, r5
   1bf20:	mov	r0, r6
   1bf24:	bl	1112c <memcpy@plt>
   1bf28:	mov	r0, #0
   1bf2c:	ldrd	r4, [sp]
   1bf30:	ldr	r6, [sp, #8]
   1bf34:	add	sp, sp, #12
   1bf38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf3c:	str	r4, [sp, #-8]!
   1bf40:	str	lr, [sp, #4]
   1bf44:	mov	r1, #0
   1bf48:	bl	11378 <setlocale@plt>
   1bf4c:	ldr	r4, [sp]
   1bf50:	add	sp, sp, #4
   1bf54:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf58:	cmp	r3, #0
   1bf5c:	cmpeq	r2, #0
   1bf60:	bne	1bf84 <__assert_fail@plt+0xab70>
   1bf64:	cmp	r1, #0
   1bf68:	movlt	r1, #-2147483648	; 0x80000000
   1bf6c:	movlt	r0, #0
   1bf70:	blt	1bf80 <__assert_fail@plt+0xab6c>
   1bf74:	cmpeq	r0, #0
   1bf78:	mvnne	r1, #-2147483648	; 0x80000000
   1bf7c:	mvnne	r0, #0
   1bf80:	b	1c02c <__assert_fail@plt+0xac18>
   1bf84:	sub	sp, sp, #8
   1bf88:	push	{sp, lr}
   1bf8c:	cmp	r1, #0
   1bf90:	blt	1bfb0 <__assert_fail@plt+0xab9c>
   1bf94:	cmp	r3, #0
   1bf98:	blt	1bfe4 <__assert_fail@plt+0xabd0>
   1bf9c:	bl	1c03c <__assert_fail@plt+0xac28>
   1bfa0:	ldr	lr, [sp, #4]
   1bfa4:	add	sp, sp, #8
   1bfa8:	pop	{r2, r3}
   1bfac:	bx	lr
   1bfb0:	rsbs	r0, r0, #0
   1bfb4:	sbc	r1, r1, r1, lsl #1
   1bfb8:	cmp	r3, #0
   1bfbc:	blt	1c008 <__assert_fail@plt+0xabf4>
   1bfc0:	bl	1c03c <__assert_fail@plt+0xac28>
   1bfc4:	ldr	lr, [sp, #4]
   1bfc8:	add	sp, sp, #8
   1bfcc:	pop	{r2, r3}
   1bfd0:	rsbs	r0, r0, #0
   1bfd4:	sbc	r1, r1, r1, lsl #1
   1bfd8:	rsbs	r2, r2, #0
   1bfdc:	sbc	r3, r3, r3, lsl #1
   1bfe0:	bx	lr
   1bfe4:	rsbs	r2, r2, #0
   1bfe8:	sbc	r3, r3, r3, lsl #1
   1bfec:	bl	1c03c <__assert_fail@plt+0xac28>
   1bff0:	ldr	lr, [sp, #4]
   1bff4:	add	sp, sp, #8
   1bff8:	pop	{r2, r3}
   1bffc:	rsbs	r0, r0, #0
   1c000:	sbc	r1, r1, r1, lsl #1
   1c004:	bx	lr
   1c008:	rsbs	r2, r2, #0
   1c00c:	sbc	r3, r3, r3, lsl #1
   1c010:	bl	1c03c <__assert_fail@plt+0xac28>
   1c014:	ldr	lr, [sp, #4]
   1c018:	add	sp, sp, #8
   1c01c:	pop	{r2, r3}
   1c020:	rsbs	r2, r2, #0
   1c024:	sbc	r3, r3, r3, lsl #1
   1c028:	bx	lr
   1c02c:	push	{r1, lr}
   1c030:	mov	r0, #8
   1c034:	bl	110c0 <raise@plt>
   1c038:	pop	{r1, pc}
   1c03c:	cmp	r1, r3
   1c040:	cmpeq	r0, r2
   1c044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c048:	mov	r4, r0
   1c04c:	movcc	r0, #0
   1c050:	mov	r5, r1
   1c054:	ldr	lr, [sp, #36]	; 0x24
   1c058:	movcc	r1, r0
   1c05c:	bcc	1c158 <__assert_fail@plt+0xad44>
   1c060:	cmp	r3, #0
   1c064:	clzeq	ip, r2
   1c068:	clzne	ip, r3
   1c06c:	addeq	ip, ip, #32
   1c070:	cmp	r5, #0
   1c074:	clzeq	r1, r4
   1c078:	addeq	r1, r1, #32
   1c07c:	clzne	r1, r5
   1c080:	sub	ip, ip, r1
   1c084:	sub	sl, ip, #32
   1c088:	lsl	r9, r3, ip
   1c08c:	rsb	fp, ip, #32
   1c090:	orr	r9, r9, r2, lsl sl
   1c094:	orr	r9, r9, r2, lsr fp
   1c098:	lsl	r8, r2, ip
   1c09c:	cmp	r5, r9
   1c0a0:	cmpeq	r4, r8
   1c0a4:	movcc	r0, #0
   1c0a8:	movcc	r1, r0
   1c0ac:	bcc	1c0c8 <__assert_fail@plt+0xacb4>
   1c0b0:	mov	r0, #1
   1c0b4:	subs	r4, r4, r8
   1c0b8:	lsl	r1, r0, sl
   1c0bc:	orr	r1, r1, r0, lsr fp
   1c0c0:	lsl	r0, r0, ip
   1c0c4:	sbc	r5, r5, r9
   1c0c8:	cmp	ip, #0
   1c0cc:	beq	1c158 <__assert_fail@plt+0xad44>
   1c0d0:	lsr	r6, r8, #1
   1c0d4:	orr	r6, r6, r9, lsl #31
   1c0d8:	lsr	r7, r9, #1
   1c0dc:	mov	r2, ip
   1c0e0:	b	1c104 <__assert_fail@plt+0xacf0>
   1c0e4:	subs	r3, r4, r6
   1c0e8:	sbc	r8, r5, r7
   1c0ec:	adds	r3, r3, r3
   1c0f0:	adc	r8, r8, r8
   1c0f4:	adds	r4, r3, #1
   1c0f8:	adc	r5, r8, #0
   1c0fc:	subs	r2, r2, #1
   1c100:	beq	1c120 <__assert_fail@plt+0xad0c>
   1c104:	cmp	r5, r7
   1c108:	cmpeq	r4, r6
   1c10c:	bcs	1c0e4 <__assert_fail@plt+0xacd0>
   1c110:	adds	r4, r4, r4
   1c114:	adc	r5, r5, r5
   1c118:	subs	r2, r2, #1
   1c11c:	bne	1c104 <__assert_fail@plt+0xacf0>
   1c120:	lsr	r3, r4, ip
   1c124:	orr	r3, r3, r5, lsl fp
   1c128:	lsr	r2, r5, ip
   1c12c:	orr	r3, r3, r5, lsr sl
   1c130:	adds	r0, r0, r4
   1c134:	mov	r4, r3
   1c138:	lsl	r3, r2, ip
   1c13c:	orr	r3, r3, r4, lsl sl
   1c140:	lsl	ip, r4, ip
   1c144:	orr	r3, r3, r4, lsr fp
   1c148:	adc	r1, r1, r5
   1c14c:	subs	r0, r0, ip
   1c150:	mov	r5, r2
   1c154:	sbc	r1, r1, r3
   1c158:	cmp	lr, #0
   1c15c:	strdne	r4, [lr]
   1c160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c164:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c168:	mov	r7, r0
   1c16c:	ldr	r6, [pc, #72]	; 1c1bc <__assert_fail@plt+0xada8>
   1c170:	ldr	r5, [pc, #72]	; 1c1c0 <__assert_fail@plt+0xadac>
   1c174:	add	r6, pc, r6
   1c178:	add	r5, pc, r5
   1c17c:	sub	r6, r6, r5
   1c180:	mov	r8, r1
   1c184:	mov	r9, r2
   1c188:	bl	1107c <fstatfs64@plt-0x20>
   1c18c:	asrs	r6, r6, #2
   1c190:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c194:	mov	r4, #0
   1c198:	add	r4, r4, #1
   1c19c:	ldr	r3, [r5], #4
   1c1a0:	mov	r2, r9
   1c1a4:	mov	r1, r8
   1c1a8:	mov	r0, r7
   1c1ac:	blx	r3
   1c1b0:	cmp	r6, r4
   1c1b4:	bne	1c198 <__assert_fail@plt+0xad84>
   1c1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c1bc:	muleq	r1, r8, sp
   1c1c0:	muleq	r1, r0, sp
   1c1c4:	bx	lr
   1c1c8:	ldr	r3, [pc, #12]	; 1c1dc <__assert_fail@plt+0xadc8>
   1c1cc:	mov	r1, #0
   1c1d0:	add	r3, pc, r3
   1c1d4:	ldr	r2, [r3]
   1c1d8:	b	112e8 <__cxa_atexit@plt>
   1c1dc:	andeq	r1, r1, ip, ror #30

Disassembly of section .fini:

0001c1e0 <.fini>:
   1c1e0:	push	{r3, lr}
   1c1e4:	pop	{r3, pc}
