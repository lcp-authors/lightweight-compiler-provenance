
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010cc0 <.init>:
   10cc0:	push	{r3, lr}
   10cc4:	bl	10e24 <_start@@Base+0x3c>
   10cc8:	pop	{r3, pc}

Disassembly of section .plt:

00010ccc <strcmp@plt-0x14>:
   10ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd0:	ldr	lr, [pc, #4]	; 10cdc <strcmp@plt-0x4>
   10cd4:	add	lr, pc, lr
   10cd8:	ldr	pc, [lr, #8]!
   10cdc:	andeq	r4, r1, r4, lsr #6

00010ce0 <strcmp@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #804]!	; 0x324

00010cec <printf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #796]!	; 0x31c

00010cf8 <fopen@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #788]!	; 0x314

00010d04 <free@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #780]!	; 0x30c

00010d10 <memcpy@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #772]!	; 0x304

00010d1c <ftell@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #764]!	; 0x2fc

00010d28 <rewind@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #756]!	; 0x2f4

00010d34 <fwrite@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d40 <fread@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #740]!	; 0x2e4

00010d4c <puts@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #732]!	; 0x2dc

00010d58 <malloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #724]!	; 0x2d4

00010d64 <__libc_start_main@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d70 <__gmon_start__@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #708]!	; 0x2c4

00010d7c <exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #700]!	; 0x2bc

00010d88 <fprintf@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #20, 20	; 0x14000
   10d90:	ldr	pc, [ip, #692]!	; 0x2b4

00010d94 <posix_memalign@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #20, 20	; 0x14000
   10d9c:	ldr	pc, [ip, #684]!	; 0x2ac

00010da0 <strncpy@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #20, 20	; 0x14000
   10da8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dac <fclose@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #20, 20	; 0x14000
   10db4:	ldr	pc, [ip, #668]!	; 0x29c

00010db8 <fputc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #20, 20	; 0x14000
   10dc0:	ldr	pc, [ip, #660]!	; 0x294

00010dc4 <fseek@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #20, 20	; 0x14000
   10dcc:	ldr	pc, [ip, #652]!	; 0x28c

00010dd0 <abort@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #20, 20	; 0x14000
   10dd8:	ldr	pc, [ip, #644]!	; 0x284

00010ddc <__assert_fail@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #20, 20	; 0x14000
   10de4:	ldr	pc, [ip, #636]!	; 0x27c

Disassembly of section .text:

00010de8 <_start@@Base>:
   10de8:	mov	fp, #0
   10dec:	mov	lr, #0
   10df0:	pop	{r1}		; (ldr r1, [sp], #4)
   10df4:	mov	r2, sp
   10df8:	push	{r2}		; (str r2, [sp, #-4]!)
   10dfc:	push	{r0}		; (str r0, [sp, #-4]!)
   10e00:	ldr	ip, [pc, #16]	; 10e18 <_start@@Base+0x30>
   10e04:	push	{ip}		; (str ip, [sp, #-4]!)
   10e08:	ldr	r0, [pc, #12]	; 10e1c <_start@@Base+0x34>
   10e0c:	ldr	r3, [pc, #12]	; 10e20 <_start@@Base+0x38>
   10e10:	bl	10d64 <__libc_start_main@plt>
   10e14:	bl	10dd0 <abort@plt>
   10e18:	andeq	r3, r1, r4, asr #19
   10e1c:	andeq	r2, r1, ip, lsr #32
   10e20:	andeq	r3, r1, r4, ror #18
   10e24:	ldr	r3, [pc, #20]	; 10e40 <_start@@Base+0x58>
   10e28:	ldr	r2, [pc, #20]	; 10e44 <_start@@Base+0x5c>
   10e2c:	add	r3, pc, r3
   10e30:	ldr	r2, [r3, r2]
   10e34:	cmp	r2, #0
   10e38:	bxeq	lr
   10e3c:	b	10d70 <__gmon_start__@plt>
   10e40:	andeq	r4, r1, ip, asr #3
   10e44:	andeq	r0, r0, r4, rrx
   10e48:	ldr	r3, [pc, #28]	; 10e6c <_start@@Base+0x84>
   10e4c:	ldr	r0, [pc, #28]	; 10e70 <_start@@Base+0x88>
   10e50:	sub	r3, r3, r0
   10e54:	cmp	r3, #6
   10e58:	bxls	lr
   10e5c:	ldr	r3, [pc, #16]	; 10e74 <_start@@Base+0x8c>
   10e60:	cmp	r3, #0
   10e64:	bxeq	lr
   10e68:	bx	r3
   10e6c:	andeq	r5, r2, r7, ror r0
   10e70:	andeq	r5, r2, r4, ror r0
   10e74:	andeq	r0, r0, r0
   10e78:	ldr	r1, [pc, #36]	; 10ea4 <_start@@Base+0xbc>
   10e7c:	ldr	r0, [pc, #36]	; 10ea8 <_start@@Base+0xc0>
   10e80:	sub	r1, r1, r0
   10e84:	asr	r1, r1, #2
   10e88:	add	r1, r1, r1, lsr #31
   10e8c:	asrs	r1, r1, #1
   10e90:	bxeq	lr
   10e94:	ldr	r3, [pc, #16]	; 10eac <_start@@Base+0xc4>
   10e98:	cmp	r3, #0
   10e9c:	bxeq	lr
   10ea0:	bx	r3
   10ea4:	andeq	r5, r2, r4, ror r0
   10ea8:	andeq	r5, r2, r4, ror r0
   10eac:	andeq	r0, r0, r0
   10eb0:	push	{r4, lr}
   10eb4:	ldr	r4, [pc, #24]	; 10ed4 <_start@@Base+0xec>
   10eb8:	ldrb	r3, [r4]
   10ebc:	cmp	r3, #0
   10ec0:	popne	{r4, pc}
   10ec4:	bl	10e48 <_start@@Base+0x60>
   10ec8:	mov	r3, #1
   10ecc:	strb	r3, [r4]
   10ed0:	pop	{r4, pc}
   10ed4:	andeq	r5, r2, ip, ror r0
   10ed8:	ldr	r0, [pc, #40]	; 10f08 <_start@@Base+0x120>
   10edc:	ldr	r3, [r0]
   10ee0:	cmp	r3, #0
   10ee4:	bne	10eec <_start@@Base+0x104>
   10ee8:	b	10e78 <_start@@Base+0x90>
   10eec:	ldr	r3, [pc, #24]	; 10f0c <_start@@Base+0x124>
   10ef0:	cmp	r3, #0
   10ef4:	beq	10ee8 <_start@@Base+0x100>
   10ef8:	push	{r4, lr}
   10efc:	blx	r3
   10f00:	pop	{r4, lr}
   10f04:	b	10e78 <_start@@Base+0x90>
   10f08:	andeq	r4, r2, r4, lsl pc
   10f0c:	andeq	r0, r0, r0
   10f10:	mov	r0, #0
   10f14:	bx	lr
   10f18:	mov	r0, #0
   10f1c:	bx	lr
   10f20:	push	{r4, lr}
   10f24:	mov	r3, #4
   10f28:	mov	r2, r3
   10f2c:	mov	r1, #0
   10f30:	bl	126a0 <flatcc_verify_field@@Base>
   10f34:	pop	{r4, pc}
   10f38:	push	{r4, lr}
   10f3c:	mov	r4, r0
   10f40:	mov	r3, #8
   10f44:	mov	r2, r3
   10f48:	mov	r1, #0
   10f4c:	bl	126a0 <flatcc_verify_field@@Base>
   10f50:	cmp	r0, #0
   10f54:	popne	{r4, pc}
   10f58:	mov	r3, #4
   10f5c:	mov	r2, r3
   10f60:	mov	r1, #1
   10f64:	mov	r0, r4
   10f68:	bl	126a0 <flatcc_verify_field@@Base>
   10f6c:	pop	{r4, pc}
   10f70:	push	{r4, lr}
   10f74:	mov	r4, r0
   10f78:	mov	r3, #8
   10f7c:	mov	r2, r3
   10f80:	mov	r1, #0
   10f84:	bl	126a0 <flatcc_verify_field@@Base>
   10f88:	cmp	r0, #0
   10f8c:	popne	{r4, pc}
   10f90:	mov	r3, #4
   10f94:	mov	r2, r3
   10f98:	mov	r1, #1
   10f9c:	mov	r0, r4
   10fa0:	bl	126a0 <flatcc_verify_field@@Base>
   10fa4:	pop	{r4, pc}
   10fa8:	push	{r4, lr}
   10fac:	mov	r4, r0
   10fb0:	mov	r3, #1
   10fb4:	mov	r2, r3
   10fb8:	mov	r1, #0
   10fbc:	bl	126a0 <flatcc_verify_field@@Base>
   10fc0:	cmp	r0, #0
   10fc4:	popne	{r4, pc}
   10fc8:	mov	r3, #1
   10fcc:	mov	r2, r3
   10fd0:	mov	r1, r3
   10fd4:	mov	r0, r4
   10fd8:	bl	126a0 <flatcc_verify_field@@Base>
   10fdc:	cmp	r0, #0
   10fe0:	popne	{r4, pc}
   10fe4:	mov	r3, #1
   10fe8:	mov	r2, r3
   10fec:	mov	r1, #2
   10ff0:	mov	r0, r4
   10ff4:	bl	126a0 <flatcc_verify_field@@Base>
   10ff8:	cmp	r0, #0
   10ffc:	popne	{r4, pc}
   11000:	mov	r3, #1
   11004:	mov	r2, r3
   11008:	mov	r1, #3
   1100c:	mov	r0, r4
   11010:	bl	126a0 <flatcc_verify_field@@Base>
   11014:	pop	{r4, pc}
   11018:	push	{r4, lr}
   1101c:	mov	r4, r0
   11020:	mov	r2, #0
   11024:	mov	r1, r2
   11028:	bl	12718 <flatcc_verify_string_field@@Base>
   1102c:	cmp	r0, #0
   11030:	popne	{r4, pc}
   11034:	mov	r3, #8
   11038:	mov	r2, r3
   1103c:	mov	r1, #1
   11040:	mov	r0, r4
   11044:	bl	126a0 <flatcc_verify_field@@Base>
   11048:	cmp	r0, #0
   1104c:	popne	{r4, pc}
   11050:	mov	r3, #2
   11054:	mov	r2, r3
   11058:	mov	r1, r3
   1105c:	mov	r0, r4
   11060:	bl	126a0 <flatcc_verify_field@@Base>
   11064:	pop	{r4, pc}
   11068:	push	{r4, lr}
   1106c:	mov	r4, r0
   11070:	mov	r2, #0
   11074:	mov	r1, r2
   11078:	bl	12718 <flatcc_verify_string_field@@Base>
   1107c:	cmp	r0, #0
   11080:	popne	{r4, pc}
   11084:	mov	r3, #4
   11088:	mov	r2, r3
   1108c:	mov	r1, #1
   11090:	mov	r0, r4
   11094:	bl	126a0 <flatcc_verify_field@@Base>
   11098:	cmp	r0, #0
   1109c:	popne	{r4, pc}
   110a0:	mov	r2, #0
   110a4:	mov	r1, #2
   110a8:	mov	r0, r4
   110ac:	bl	12718 <flatcc_verify_string_field@@Base>
   110b0:	cmp	r0, #0
   110b4:	popne	{r4, pc}
   110b8:	mov	r3, #8
   110bc:	mov	r2, r3
   110c0:	mov	r1, #3
   110c4:	mov	r0, r4
   110c8:	bl	126a0 <flatcc_verify_field@@Base>
   110cc:	cmp	r0, #0
   110d0:	popne	{r4, pc}
   110d4:	mov	r2, #0
   110d8:	mov	r1, #4
   110dc:	mov	r0, r4
   110e0:	bl	12718 <flatcc_verify_string_field@@Base>
   110e4:	cmp	r0, #0
   110e8:	popne	{r4, pc}
   110ec:	mov	r3, #8
   110f0:	mov	r2, r3
   110f4:	mov	r1, #5
   110f8:	mov	r0, r4
   110fc:	bl	126a0 <flatcc_verify_field@@Base>
   11100:	cmp	r0, #0
   11104:	popne	{r4, pc}
   11108:	mov	r3, #4
   1110c:	mov	r2, r3
   11110:	mov	r1, #6
   11114:	mov	r0, r4
   11118:	bl	126a0 <flatcc_verify_field@@Base>
   1111c:	cmp	r0, #0
   11120:	popne	{r4, pc}
   11124:	mov	r3, #8
   11128:	mov	r2, r3
   1112c:	mov	r1, #7
   11130:	mov	r0, r4
   11134:	bl	126a0 <flatcc_verify_field@@Base>
   11138:	cmp	r0, #0
   1113c:	popne	{r4, pc}
   11140:	mov	r3, #4
   11144:	mov	r2, r3
   11148:	mov	r1, #8
   1114c:	mov	r0, r4
   11150:	bl	126a0 <flatcc_verify_field@@Base>
   11154:	pop	{r4, pc}
   11158:	push	{r4, lr}
   1115c:	mov	r4, r0
   11160:	ldr	r3, [pc, #68]	; 111ac <_start@@Base+0x3c4>
   11164:	mov	r2, #0
   11168:	mov	r1, r2
   1116c:	bl	129a4 <flatcc_verify_table_field@@Base>
   11170:	cmp	r0, #0
   11174:	popne	{r4, pc}
   11178:	ldr	r3, [pc, #48]	; 111b0 <_start@@Base+0x3c8>
   1117c:	mov	r2, #0
   11180:	mov	r1, #1
   11184:	mov	r0, r4
   11188:	bl	129a4 <flatcc_verify_table_field@@Base>
   1118c:	cmp	r0, #0
   11190:	popne	{r4, pc}
   11194:	ldr	r3, [pc, #24]	; 111b4 <_start@@Base+0x3cc>
   11198:	mov	r2, #0
   1119c:	mov	r1, #2
   111a0:	mov	r0, r4
   111a4:	bl	129a4 <flatcc_verify_table_field@@Base>
   111a8:	pop	{r4, pc}
   111ac:	andeq	r1, r1, r8, rrx
   111b0:	andeq	r0, r1, r0, ror pc
   111b4:	andeq	r0, r1, r8, lsr pc
   111b8:	push	{r4, lr}
   111bc:	sub	sp, sp, #8
   111c0:	mov	r4, r0
   111c4:	mov	r3, #16
   111c8:	mov	r2, #32
   111cc:	mov	r1, #0
   111d0:	bl	126a0 <flatcc_verify_field@@Base>
   111d4:	cmp	r0, #0
   111d8:	beq	111e4 <_start@@Base+0x3fc>
   111dc:	add	sp, sp, #8
   111e0:	pop	{r4, pc}
   111e4:	mov	r3, #2
   111e8:	mov	r2, r3
   111ec:	mov	r1, r3
   111f0:	mov	r0, r4
   111f4:	bl	126a0 <flatcc_verify_field@@Base>
   111f8:	cmp	r0, #0
   111fc:	bne	111dc <_start@@Base+0x3f4>
   11200:	mov	r3, #2
   11204:	mov	r2, r3
   11208:	mov	r1, #1
   1120c:	mov	r0, r4
   11210:	bl	126a0 <flatcc_verify_field@@Base>
   11214:	cmp	r0, #0
   11218:	bne	111dc <_start@@Base+0x3f4>
   1121c:	mov	r2, #1
   11220:	mov	r1, #3
   11224:	mov	r0, r4
   11228:	bl	12718 <flatcc_verify_string_field@@Base>
   1122c:	cmp	r0, #0
   11230:	bne	111dc <_start@@Base+0x3f4>
   11234:	mov	r3, #1
   11238:	mov	r2, r3
   1123c:	mov	r1, #6
   11240:	mov	r0, r4
   11244:	bl	126a0 <flatcc_verify_field@@Base>
   11248:	cmp	r0, #0
   1124c:	bne	111dc <_start@@Base+0x3f4>
   11250:	mvn	r3, #0
   11254:	str	r3, [sp, #4]
   11258:	mov	r3, #1
   1125c:	str	r3, [sp]
   11260:	mov	r2, #0
   11264:	mov	r1, #5
   11268:	mov	r0, r4
   1126c:	bl	127ac <flatcc_verify_vector_field@@Base>
   11270:	cmp	r0, #0
   11274:	bne	111dc <_start@@Base+0x3f4>
   11278:	ldr	r3, [pc, #876]	; 115ec <_start@@Base+0x804>
   1127c:	mov	r2, #0
   11280:	mov	r1, #11
   11284:	mov	r0, r4
   11288:	bl	12abc <flatcc_verify_table_vector_field@@Base>
   1128c:	cmp	r0, #0
   11290:	bne	111dc <_start@@Base+0x3f4>
   11294:	mov	r2, #0
   11298:	mov	r1, #10
   1129c:	mov	r0, r4
   112a0:	bl	1285c <flatcc_verify_string_vector_field@@Base>
   112a4:	cmp	r0, #0
   112a8:	bne	111dc <_start@@Base+0x3f4>
   112ac:	mov	r2, #0
   112b0:	mov	r1, #28
   112b4:	mov	r0, r4
   112b8:	bl	1285c <flatcc_verify_string_vector_field@@Base>
   112bc:	cmp	r0, #0
   112c0:	bne	111dc <_start@@Base+0x3f4>
   112c4:	mvn	r3, #0
   112c8:	str	r3, [sp, #4]
   112cc:	mov	r3, #1
   112d0:	str	r3, [sp]
   112d4:	mov	r2, #0
   112d8:	mov	r1, #24
   112dc:	mov	r0, r4
   112e0:	bl	127ac <flatcc_verify_vector_field@@Base>
   112e4:	cmp	r0, #0
   112e8:	bne	111dc <_start@@Base+0x3f4>
   112ec:	mvn	r3, #-536870912	; 0xe0000000
   112f0:	str	r3, [sp, #4]
   112f4:	mov	r3, #4
   112f8:	str	r3, [sp]
   112fc:	mov	r3, #8
   11300:	mov	r2, #0
   11304:	mov	r1, #29
   11308:	mov	r0, r4
   1130c:	bl	127ac <flatcc_verify_vector_field@@Base>
   11310:	cmp	r0, #0
   11314:	bne	111dc <_start@@Base+0x3f4>
   11318:	ldr	r3, [pc, #716]	; 115ec <_start@@Base+0x804>
   1131c:	mov	r2, #0
   11320:	mov	r1, #12
   11324:	mov	r0, r4
   11328:	bl	129a4 <flatcc_verify_table_field@@Base>
   1132c:	cmp	r0, #0
   11330:	bne	111dc <_start@@Base+0x3f4>
   11334:	ldr	r3, [pc, #692]	; 115f0 <_start@@Base+0x808>
   11338:	mov	r2, #0
   1133c:	mov	r1, #8
   11340:	mov	r0, r4
   11344:	bl	13594 <flatcc_verify_union_field@@Base>
   11348:	cmp	r0, #0
   1134c:	bne	111dc <_start@@Base+0x3f4>
   11350:	mvn	r3, #-1073741824	; 0xc0000000
   11354:	str	r3, [sp, #4]
   11358:	mov	r3, #2
   1135c:	str	r3, [sp]
   11360:	mov	r3, #4
   11364:	mov	r2, #0
   11368:	mov	r1, #9
   1136c:	mov	r0, r4
   11370:	bl	127ac <flatcc_verify_vector_field@@Base>
   11374:	cmp	r0, #0
   11378:	bne	111dc <_start@@Base+0x3f4>
   1137c:	mvn	r3, #-1073741824	; 0xc0000000
   11380:	str	r3, [sp, #4]
   11384:	mov	r3, #2
   11388:	str	r3, [sp]
   1138c:	mov	r3, #4
   11390:	mov	r2, #0
   11394:	mov	r1, #31
   11398:	mov	r0, r4
   1139c:	bl	127ac <flatcc_verify_vector_field@@Base>
   113a0:	cmp	r0, #0
   113a4:	bne	111dc <_start@@Base+0x3f4>
   113a8:	ldr	r3, [pc, #572]	; 115ec <_start@@Base+0x804>
   113ac:	str	r3, [sp, #4]
   113b0:	mov	r3, #1
   113b4:	str	r3, [sp]
   113b8:	mov	r3, #0
   113bc:	mov	r2, r3
   113c0:	mov	r1, #13
   113c4:	mov	r0, r4
   113c8:	bl	133d4 <flatcc_verify_table_as_nested_root@@Base>
   113cc:	cmp	r0, #0
   113d0:	bne	111dc <_start@@Base+0x3f4>
   113d4:	ldr	r3, [pc, #536]	; 115f4 <_start@@Base+0x80c>
   113d8:	mov	r2, #0
   113dc:	mov	r1, #14
   113e0:	mov	r0, r4
   113e4:	bl	129a4 <flatcc_verify_table_field@@Base>
   113e8:	cmp	r0, #0
   113ec:	bne	111dc <_start@@Base+0x3f4>
   113f0:	mov	r3, #1
   113f4:	mov	r2, r3
   113f8:	mov	r1, #15
   113fc:	mov	r0, r4
   11400:	bl	126a0 <flatcc_verify_field@@Base>
   11404:	cmp	r0, #0
   11408:	bne	111dc <_start@@Base+0x3f4>
   1140c:	mov	r3, #4
   11410:	mov	r2, r3
   11414:	mov	r1, #16
   11418:	mov	r0, r4
   1141c:	bl	126a0 <flatcc_verify_field@@Base>
   11420:	cmp	r0, #0
   11424:	bne	111dc <_start@@Base+0x3f4>
   11428:	mov	r3, #4
   1142c:	mov	r2, r3
   11430:	mov	r1, #17
   11434:	mov	r0, r4
   11438:	bl	126a0 <flatcc_verify_field@@Base>
   1143c:	cmp	r0, #0
   11440:	bne	111dc <_start@@Base+0x3f4>
   11444:	mov	r3, #8
   11448:	mov	r2, r3
   1144c:	mov	r1, #18
   11450:	mov	r0, r4
   11454:	bl	126a0 <flatcc_verify_field@@Base>
   11458:	cmp	r0, #0
   1145c:	bne	111dc <_start@@Base+0x3f4>
   11460:	mov	r3, #8
   11464:	mov	r2, r3
   11468:	mov	r1, #19
   1146c:	mov	r0, r4
   11470:	bl	126a0 <flatcc_verify_field@@Base>
   11474:	cmp	r0, #0
   11478:	bne	111dc <_start@@Base+0x3f4>
   1147c:	mov	r3, #4
   11480:	mov	r2, r3
   11484:	mov	r1, #20
   11488:	mov	r0, r4
   1148c:	bl	126a0 <flatcc_verify_field@@Base>
   11490:	cmp	r0, #0
   11494:	bne	111dc <_start@@Base+0x3f4>
   11498:	mov	r3, #4
   1149c:	mov	r2, r3
   114a0:	mov	r1, #21
   114a4:	mov	r0, r4
   114a8:	bl	126a0 <flatcc_verify_field@@Base>
   114ac:	cmp	r0, #0
   114b0:	bne	111dc <_start@@Base+0x3f4>
   114b4:	mov	r3, #8
   114b8:	mov	r2, r3
   114bc:	mov	r1, #22
   114c0:	mov	r0, r4
   114c4:	bl	126a0 <flatcc_verify_field@@Base>
   114c8:	cmp	r0, #0
   114cc:	bne	111dc <_start@@Base+0x3f4>
   114d0:	mov	r3, #8
   114d4:	mov	r2, r3
   114d8:	mov	r1, #23
   114dc:	mov	r0, r4
   114e0:	bl	126a0 <flatcc_verify_field@@Base>
   114e4:	cmp	r0, #0
   114e8:	bne	111dc <_start@@Base+0x3f4>
   114ec:	mov	r3, #4
   114f0:	mov	r2, r3
   114f4:	mov	r1, #25
   114f8:	mov	r0, r4
   114fc:	bl	126a0 <flatcc_verify_field@@Base>
   11500:	cmp	r0, #0
   11504:	bne	111dc <_start@@Base+0x3f4>
   11508:	mov	r3, #4
   1150c:	mov	r2, r3
   11510:	mov	r1, #26
   11514:	mov	r0, r4
   11518:	bl	126a0 <flatcc_verify_field@@Base>
   1151c:	cmp	r0, #0
   11520:	bne	111dc <_start@@Base+0x3f4>
   11524:	mov	r3, #4
   11528:	mov	r2, r3
   1152c:	mov	r1, #27
   11530:	mov	r0, r4
   11534:	bl	126a0 <flatcc_verify_field@@Base>
   11538:	cmp	r0, #0
   1153c:	bne	111dc <_start@@Base+0x3f4>
   11540:	mvn	r3, #0
   11544:	str	r3, [sp, #4]
   11548:	mov	r3, #1
   1154c:	str	r3, [sp]
   11550:	mov	r2, #0
   11554:	mov	r1, #30
   11558:	mov	r0, r4
   1155c:	bl	127ac <flatcc_verify_vector_field@@Base>
   11560:	cmp	r0, #0
   11564:	bne	111dc <_start@@Base+0x3f4>
   11568:	mvn	r3, #-536870912	; 0xe0000000
   1156c:	str	r3, [sp, #4]
   11570:	mov	r3, #8
   11574:	str	r3, [sp]
   11578:	mov	r2, #0
   1157c:	mov	r1, #32
   11580:	mov	r0, r4
   11584:	bl	127ac <flatcc_verify_vector_field@@Base>
   11588:	cmp	r0, #0
   1158c:	bne	111dc <_start@@Base+0x3f4>
   11590:	mvn	r3, #-536870912	; 0xe0000000
   11594:	str	r3, [sp, #4]
   11598:	mov	r3, #8
   1159c:	str	r3, [sp]
   115a0:	mov	r2, #0
   115a4:	mov	r1, #33	; 0x21
   115a8:	mov	r0, r4
   115ac:	bl	127ac <flatcc_verify_vector_field@@Base>
   115b0:	cmp	r0, #0
   115b4:	bne	111dc <_start@@Base+0x3f4>
   115b8:	ldr	r3, [pc, #56]	; 115f8 <_start@@Base+0x810>
   115bc:	mov	r2, #0
   115c0:	mov	r1, #34	; 0x22
   115c4:	mov	r0, r4
   115c8:	bl	129a4 <flatcc_verify_table_field@@Base>
   115cc:	cmp	r0, #0
   115d0:	bne	111dc <_start@@Base+0x3f4>
   115d4:	ldr	r3, [pc, #32]	; 115fc <_start@@Base+0x814>
   115d8:	mov	r2, #0
   115dc:	mov	r1, #35	; 0x23
   115e0:	mov	r0, r4
   115e4:	bl	129a4 <flatcc_verify_table_field@@Base>
   115e8:	b	111dc <_start@@Base+0x3f4>
   115ec:			; <UNDEFINED> instruction: 0x000111b8
   115f0:	andeq	r1, r1, ip, lsl #13
   115f4:	andeq	r1, r1, r8, lsl r0
   115f8:	andeq	r0, r1, r0, lsl pc
   115fc:	andeq	r1, r1, r0, lsl #12
   11600:	push	{r4, lr}
   11604:	sub	sp, sp, #8
   11608:	mov	r4, r0
   1160c:	mvn	r3, #0
   11610:	str	r3, [sp, #4]
   11614:	mov	r3, #1
   11618:	str	r3, [sp]
   1161c:	mov	r2, #0
   11620:	mov	r1, r2
   11624:	bl	127ac <flatcc_verify_vector_field@@Base>
   11628:	cmp	r0, #0
   1162c:	beq	11638 <_start@@Base+0x850>
   11630:	add	sp, sp, #8
   11634:	pop	{r4, pc}
   11638:	mvn	r3, #0
   1163c:	str	r3, [sp, #4]
   11640:	mov	r1, #1
   11644:	str	r1, [sp]
   11648:	mov	r3, r1
   1164c:	mov	r2, #0
   11650:	mov	r0, r4
   11654:	bl	127ac <flatcc_verify_vector_field@@Base>
   11658:	cmp	r0, #0
   1165c:	bne	11630 <_start@@Base+0x848>
   11660:	ldr	r3, [pc, #32]	; 11688 <_start@@Base+0x8a0>
   11664:	str	r3, [sp, #4]
   11668:	mov	r3, #1
   1166c:	str	r3, [sp]
   11670:	mov	r3, #0
   11674:	mov	r2, r3
   11678:	mov	r1, #2
   1167c:	mov	r0, r4
   11680:	bl	133d4 <flatcc_verify_table_as_nested_root@@Base>
   11684:	b	11630 <_start@@Base+0x848>
   11688:			; <UNDEFINED> instruction: 0x000111b8
   1168c:	push	{r4, lr}
   11690:	ldrb	r3, [r0, #12]
   11694:	sub	r3, r3, #1
   11698:	cmp	r3, #3
   1169c:	ldrls	pc, [pc, r3, lsl #2]
   116a0:	b	116e4 <_start@@Base+0x8fc>
   116a4:			; <UNDEFINED> instruction: 0x000116b4
   116a8:	andeq	r1, r1, r0, asr #13
   116ac:	andeq	r1, r1, ip, asr #13
   116b0:	ldrdeq	r1, [r1], -r8
   116b4:	ldr	r1, [pc, #48]	; 116ec <_start@@Base+0x904>
   116b8:	bl	12d4c <flatcc_verify_union_table@@Base>
   116bc:	pop	{r4, pc}
   116c0:	ldr	r1, [pc, #40]	; 116f0 <_start@@Base+0x908>
   116c4:	bl	12d4c <flatcc_verify_union_table@@Base>
   116c8:	pop	{r4, pc}
   116cc:	ldr	r1, [pc, #32]	; 116f4 <_start@@Base+0x90c>
   116d0:	bl	12d4c <flatcc_verify_union_table@@Base>
   116d4:	pop	{r4, pc}
   116d8:	ldr	r1, [pc, #24]	; 116f8 <_start@@Base+0x910>
   116dc:	bl	12d4c <flatcc_verify_union_table@@Base>
   116e0:	pop	{r4, pc}
   116e4:	mov	r0, #0
   116e8:	pop	{r4, pc}
   116ec:			; <UNDEFINED> instruction: 0x000111b8
   116f0:	andeq	r0, r1, r8, lsr #31
   116f4:	andeq	r0, r1, r8, lsl pc
   116f8:	strdeq	r1, [r1], -ip
   116fc:	push	{r4, lr}
   11700:	mov	r4, r0
   11704:	ldr	r3, [pc, #68]	; 11750 <_start@@Base+0x968>
   11708:	mov	r2, #0
   1170c:	mov	r1, r2
   11710:	bl	129a4 <flatcc_verify_table_field@@Base>
   11714:	cmp	r0, #0
   11718:	popne	{r4, pc}
   1171c:	ldr	r3, [pc, #48]	; 11754 <_start@@Base+0x96c>
   11720:	mov	r2, #0
   11724:	mov	r1, #1
   11728:	mov	r0, r4
   1172c:	bl	129a4 <flatcc_verify_table_field@@Base>
   11730:	cmp	r0, #0
   11734:	popne	{r4, pc}
   11738:	ldr	r3, [pc, #24]	; 11758 <_start@@Base+0x970>
   1173c:	mov	r2, #0
   11740:	mov	r1, #3
   11744:	mov	r0, r4
   11748:	bl	136e4 <flatcc_verify_union_vector_field@@Base>
   1174c:	pop	{r4, pc}
   11750:	andeq	r1, r1, r8, asr r1
   11754:	andeq	r1, r1, ip, asr r7
   11758:	andeq	r1, r1, ip, lsl #13
   1175c:	push	{r4, lr}
   11760:	mov	r4, r0
   11764:	ldr	r3, [pc, #124]	; 117e8 <_start@@Base+0xa00>
   11768:	mov	r2, #0
   1176c:	mov	r1, #1
   11770:	bl	13594 <flatcc_verify_union_field@@Base>
   11774:	cmp	r0, #0
   11778:	popne	{r4, pc}
   1177c:	ldr	r3, [pc, #100]	; 117e8 <_start@@Base+0xa00>
   11780:	mov	r2, #0
   11784:	mov	r1, #3
   11788:	mov	r0, r4
   1178c:	bl	13594 <flatcc_verify_union_field@@Base>
   11790:	cmp	r0, #0
   11794:	popne	{r4, pc}
   11798:	ldr	r3, [pc, #72]	; 117e8 <_start@@Base+0xa00>
   1179c:	mov	r2, #0
   117a0:	mov	r1, #5
   117a4:	mov	r0, r4
   117a8:	bl	13594 <flatcc_verify_union_field@@Base>
   117ac:	cmp	r0, #0
   117b0:	popne	{r4, pc}
   117b4:	ldr	r3, [pc, #44]	; 117e8 <_start@@Base+0xa00>
   117b8:	mov	r2, #0
   117bc:	mov	r1, #7
   117c0:	mov	r0, r4
   117c4:	bl	13594 <flatcc_verify_union_field@@Base>
   117c8:	cmp	r0, #0
   117cc:	popne	{r4, pc}
   117d0:	ldr	r3, [pc, #16]	; 117e8 <_start@@Base+0xa00>
   117d4:	mov	r2, #0
   117d8:	mov	r1, #9
   117dc:	mov	r0, r4
   117e0:	bl	136e4 <flatcc_verify_union_vector_field@@Base>
   117e4:	pop	{r4, pc}
   117e8:	andeq	r1, r1, ip, ror #15
   117ec:	push	{r4, lr}
   117f0:	ldrb	r3, [r0, #12]
   117f4:	cmp	r3, #9
   117f8:	beq	11848 <_start@@Base+0xa60>
   117fc:	bls	1181c <_start@@Base+0xa34>
   11800:	cmp	r3, #11
   11804:	beq	11868 <_start@@Base+0xa80>
   11808:	bcc	11858 <_start@@Base+0xa70>
   1180c:	cmp	r3, #255	; 0xff
   11810:	bne	11870 <_start@@Base+0xa88>
   11814:	bl	12eb0 <flatcc_verify_union_string@@Base>
   11818:	pop	{r4, pc}
   1181c:	cmp	r3, #2
   11820:	beq	1183c <_start@@Base+0xa54>
   11824:	cmp	r3, #8
   11828:	bne	11870 <_start@@Base+0xa88>
   1182c:	mov	r2, #2
   11830:	mov	r1, r2
   11834:	bl	12e44 <flatcc_verify_union_struct@@Base>
   11838:	pop	{r4, pc}
   1183c:	ldr	r1, [pc, #52]	; 11878 <_start@@Base+0xa90>
   11840:	bl	12d4c <flatcc_verify_union_table@@Base>
   11844:	pop	{r4, pc}
   11848:	mov	r2, #4
   1184c:	mov	r1, r2
   11850:	bl	12e44 <flatcc_verify_union_struct@@Base>
   11854:	pop	{r4, pc}
   11858:	mov	r2, #4
   1185c:	mov	r1, r2
   11860:	bl	12e44 <flatcc_verify_union_struct@@Base>
   11864:	pop	{r4, pc}
   11868:	bl	12eb0 <flatcc_verify_union_string@@Base>
   1186c:	pop	{r4, pc}
   11870:	mov	r0, #0
   11874:	pop	{r4, pc}
   11878:	andeq	r0, r1, r0, lsr #30

0001187c <verify_monster@@Base>:
   1187c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11880:	cmp	r0, #0
   11884:	beq	11dc4 <verify_monster@@Base+0x548>
   11888:	ldr	r2, [r0, #4]
   1188c:	ldr	r3, [pc, #1112]	; 11cec <verify_monster@@Base+0x470>
   11890:	cmp	r2, r3
   11894:	bne	11dc4 <verify_monster@@Base+0x548>
   11898:	ldr	r3, [r0]
   1189c:	adds	r4, r0, r3
   118a0:	beq	11dc4 <verify_monster@@Base+0x548>
   118a4:	ldr	r6, [r0, r3]
   118a8:	sub	r6, r4, r6
   118ac:	ldrh	r5, [r6]
   118b0:	cmp	r5, #9
   118b4:	bls	11dd4 <verify_monster@@Base+0x558>
   118b8:	ldrh	r3, [r6, #8]
   118bc:	cmp	r3, #0
   118c0:	beq	11dd4 <verify_monster@@Base+0x558>
   118c4:	ldrsh	r3, [r4, r3]
   118c8:	cmp	r3, #80	; 0x50
   118cc:	bne	11dd4 <verify_monster@@Base+0x558>
   118d0:	cmp	r5, #5
   118d4:	bls	11de4 <verify_monster@@Base+0x568>
   118d8:	ldrh	r3, [r6, #4]
   118dc:	cmp	r3, #0
   118e0:	beq	11de4 <verify_monster@@Base+0x568>
   118e4:	adds	r3, r4, r3
   118e8:	beq	11de4 <verify_monster@@Base+0x568>
   118ec:	sub	r0, r3, r0
   118f0:	tst	r0, #15
   118f4:	bne	11df4 <verify_monster@@Base+0x578>
   118f8:	vldr	s14, [r3]
   118fc:	vldr	s15, [pc, #988]	; 11ce0 <verify_monster@@Base+0x464>
   11900:	vcmp.f32	s14, s15
   11904:	vmrs	APSR_nzcv, fpscr
   11908:	bne	11e04 <verify_monster@@Base+0x588>
   1190c:	vldr	s14, [r3, #4]
   11910:	vldr	s15, [pc, #972]	; 11ce4 <verify_monster@@Base+0x468>
   11914:	vcmp.f32	s14, s15
   11918:	vmrs	APSR_nzcv, fpscr
   1191c:	bne	11e14 <verify_monster@@Base+0x598>
   11920:	vldr	s14, [r3, #8]
   11924:	vldr	s15, [pc, #956]	; 11ce8 <verify_monster@@Base+0x46c>
   11928:	vcmp.f32	s14, s15
   1192c:	vmrs	APSR_nzcv, fpscr
   11930:	bne	11e24 <verify_monster@@Base+0x5a8>
   11934:	vldr	d6, [r3, #16]
   11938:	vldr	d7, [pc, #904]	; 11cc8 <verify_monster@@Base+0x44c>
   1193c:	vcmp.f64	d6, d7
   11940:	vmrs	APSR_nzcv, fpscr
   11944:	bne	11e34 <verify_monster@@Base+0x5b8>
   11948:	ldrsb	r2, [r3, #24]
   1194c:	cmp	r2, #2
   11950:	bne	11e44 <verify_monster@@Base+0x5c8>
   11954:	cmn	r3, #26
   11958:	beq	11e54 <verify_monster@@Base+0x5d8>
   1195c:	ldrsh	r2, [r3, #26]
   11960:	cmp	r2, #5
   11964:	bne	11e54 <verify_monster@@Base+0x5d8>
   11968:	ldrsb	r3, [r3, #28]
   1196c:	cmp	r3, #6
   11970:	bne	11e54 <verify_monster@@Base+0x5d8>
   11974:	cmp	r5, #11
   11978:	bls	11e64 <verify_monster@@Base+0x5e8>
   1197c:	ldrh	r3, [r6, #10]
   11980:	cmp	r3, #0
   11984:	beq	11e64 <verify_monster@@Base+0x5e8>
   11988:	add	r0, r4, r3
   1198c:	ldr	r3, [r4, r3]
   11990:	add	r3, r3, #4
   11994:	adds	r0, r0, r3
   11998:	beq	11e78 <verify_monster@@Base+0x5fc>
   1199c:	ldr	r3, [r0, #-4]
   119a0:	cmp	r3, #9
   119a4:	bne	11e78 <verify_monster@@Base+0x5fc>
   119a8:	ldr	r1, [pc, #832]	; 11cf0 <verify_monster@@Base+0x474>
   119ac:	bl	10ce0 <strcmp@plt>
   119b0:	subs	r1, r0, #0
   119b4:	bne	11e88 <verify_monster@@Base+0x60c>
   119b8:	cmp	r5, #15
   119bc:	bls	11e98 <verify_monster@@Base+0x61c>
   119c0:	ldrh	r3, [r6, #14]
   119c4:	cmp	r3, #0
   119c8:	beq	11e98 <verify_monster@@Base+0x61c>
   119cc:	add	r0, r4, r3
   119d0:	ldr	r3, [r4, r3]
   119d4:	add	r3, r3, #4
   119d8:	adds	r2, r0, r3
   119dc:	beq	11e98 <verify_monster@@Base+0x61c>
   119e0:	ldr	ip, [r2, #-4]
   119e4:	cmp	ip, #5
   119e8:	bne	11e98 <verify_monster@@Base+0x61c>
   119ec:	ldrb	r3, [r0, r3]
   119f0:	cmp	r3, #0
   119f4:	bne	11ebc <verify_monster@@Base+0x640>
   119f8:	mov	r1, #1
   119fc:	cmp	r1, #4
   11a00:	bhi	11ea8 <verify_monster@@Base+0x62c>
   11a04:	ldrb	r3, [r2, r1]
   11a08:	cmp	r3, r1
   11a0c:	bne	11ebc <verify_monster@@Base+0x640>
   11a10:	add	r1, r1, #1
   11a14:	cmp	r1, #4
   11a18:	ble	119fc <verify_monster@@Base+0x180>
   11a1c:	cmp	r5, #25
   11a20:	bls	11ecc <verify_monster@@Base+0x650>
   11a24:	ldrh	r3, [r6, #24]
   11a28:	cmp	r3, #0
   11a2c:	beq	11ecc <verify_monster@@Base+0x650>
   11a30:	add	r2, r4, r3
   11a34:	ldr	r3, [r4, r3]
   11a38:	add	r3, r3, #4
   11a3c:	adds	r7, r2, r3
   11a40:	beq	11ecc <verify_monster@@Base+0x650>
   11a44:	ldr	r1, [r7, #-4]
   11a48:	cmp	r1, #2
   11a4c:	bne	11edc <verify_monster@@Base+0x660>
   11a50:	ldr	r0, [r2, r3]
   11a54:	add	r0, r0, #4
   11a58:	ldr	r1, [pc, #660]	; 11cf4 <verify_monster@@Base+0x478>
   11a5c:	add	r0, r7, r0
   11a60:	bl	10ce0 <strcmp@plt>
   11a64:	cmp	r0, #0
   11a68:	bne	11eec <verify_monster@@Base+0x670>
   11a6c:	ldr	r0, [r7, #4]
   11a70:	add	r0, r0, #8
   11a74:	ldr	r1, [pc, #636]	; 11cf8 <verify_monster@@Base+0x47c>
   11a78:	add	r0, r7, r0
   11a7c:	bl	10ce0 <strcmp@plt>
   11a80:	cmp	r0, #0
   11a84:	bne	11efc <verify_monster@@Base+0x680>
   11a88:	cmp	r5, #19
   11a8c:	bls	11f0c <verify_monster@@Base+0x690>
   11a90:	ldrh	r3, [r6, #18]
   11a94:	cmp	r3, #0
   11a98:	beq	11f0c <verify_monster@@Base+0x690>
   11a9c:	ldrb	r3, [r4, r3]
   11aa0:	cmp	r3, #1
   11aa4:	bne	11f0c <verify_monster@@Base+0x690>
   11aa8:	cmp	r5, #21
   11aac:	bls	11f1c <verify_monster@@Base+0x6a0>
   11ab0:	ldrh	r3, [r6, #20]
   11ab4:	cmp	r3, #0
   11ab8:	beq	11f1c <verify_monster@@Base+0x6a0>
   11abc:	add	r1, r4, r3
   11ac0:	ldr	r3, [r4, r3]
   11ac4:	adds	r2, r1, r3
   11ac8:	beq	11f1c <verify_monster@@Base+0x6a0>
   11acc:	ldr	r3, [r1, r3]
   11ad0:	sub	r3, r2, r3
   11ad4:	ldrh	r1, [r3]
   11ad8:	cmp	r1, #11
   11adc:	bls	11f2c <verify_monster@@Base+0x6b0>
   11ae0:	ldrh	r3, [r3, #10]
   11ae4:	cmp	r3, #0
   11ae8:	beq	11f2c <verify_monster@@Base+0x6b0>
   11aec:	add	r0, r2, r3
   11af0:	ldr	r3, [r2, r3]
   11af4:	add	r3, r3, #4
   11af8:	ldr	r1, [pc, #508]	; 11cfc <verify_monster@@Base+0x480>
   11afc:	add	r0, r0, r3
   11b00:	bl	10ce0 <strcmp@plt>
   11b04:	cmp	r0, #0
   11b08:	bne	11f40 <verify_monster@@Base+0x6c4>
   11b0c:	cmp	r5, #23
   11b10:	bls	11f50 <verify_monster@@Base+0x6d4>
   11b14:	ldrh	r3, [r6, #22]
   11b18:	cmp	r3, #0
   11b1c:	beq	11f50 <verify_monster@@Base+0x6d4>
   11b20:	add	r1, r4, r3
   11b24:	ldr	r3, [r4, r3]
   11b28:	add	r3, r3, #4
   11b2c:	adds	r2, r1, r3
   11b30:	beq	11f50 <verify_monster@@Base+0x6d4>
   11b34:	ldr	ip, [r2, #-4]
   11b38:	cmp	ip, #2
   11b3c:	bne	11f50 <verify_monster@@Base+0x6d4>
   11b40:	ldrsh	r3, [r1, r3]
   11b44:	cmp	r3, #10
   11b48:	bne	11f60 <verify_monster@@Base+0x6e4>
   11b4c:	ldrsb	r3, [r2, #2]
   11b50:	cmp	r3, #20
   11b54:	bne	11f70 <verify_monster@@Base+0x6f4>
   11b58:	cmn	r2, #4
   11b5c:	beq	11f80 <verify_monster@@Base+0x704>
   11b60:	ldrsh	r3, [r2, #4]
   11b64:	cmp	r3, #30
   11b68:	bne	11f80 <verify_monster@@Base+0x704>
   11b6c:	ldrsb	r3, [r2, #6]
   11b70:	cmp	r3, #40	; 0x28
   11b74:	bne	11f90 <verify_monster@@Base+0x714>
   11b78:	cmp	r5, #37	; 0x25
   11b7c:	bls	11fa0 <verify_monster@@Base+0x724>
   11b80:	ldrh	r3, [r6, #36]	; 0x24
   11b84:	cmp	r3, #0
   11b88:	beq	11fa0 <verify_monster@@Base+0x724>
   11b8c:	ldr	r2, [r4, r3]
   11b90:	ldr	r3, [pc, #360]	; 11d00 <verify_monster@@Base+0x484>
   11b94:	cmp	r2, r3
   11b98:	bne	11fa0 <verify_monster@@Base+0x724>
   11b9c:	cmp	r5, #39	; 0x27
   11ba0:	bls	11fb4 <verify_monster@@Base+0x738>
   11ba4:	ldrh	r3, [r6, #38]	; 0x26
   11ba8:	cmp	r3, #0
   11bac:	beq	11fb4 <verify_monster@@Base+0x738>
   11bb0:	ldr	r2, [r4, r3]
   11bb4:	ldr	r3, [pc, #324]	; 11d00 <verify_monster@@Base+0x484>
   11bb8:	cmp	r2, r3
   11bbc:	bne	11fb4 <verify_monster@@Base+0x738>
   11bc0:	cmp	r5, #41	; 0x29
   11bc4:	bls	11fc8 <verify_monster@@Base+0x74c>
   11bc8:	ldrh	r3, [r6, #40]	; 0x28
   11bcc:	cmp	r3, #0
   11bd0:	beq	11fc8 <verify_monster@@Base+0x74c>
   11bd4:	ldrd	r8, [r4, r3]
   11bd8:	add	r3, pc, #240	; 0xf0
   11bdc:	ldrd	r2, [r3]
   11be0:	cmp	r9, r3
   11be4:	cmpeq	r8, r2
   11be8:	bne	11fc8 <verify_monster@@Base+0x74c>
   11bec:	cmp	r5, #43	; 0x2b
   11bf0:	bls	11fdc <verify_monster@@Base+0x760>
   11bf4:	ldrh	r3, [r6, #42]	; 0x2a
   11bf8:	cmp	r3, #0
   11bfc:	beq	11fdc <verify_monster@@Base+0x760>
   11c00:	ldrd	r8, [r4, r3]
   11c04:	add	r3, pc, #196	; 0xc4
   11c08:	ldrd	r2, [r3]
   11c0c:	cmp	r9, r3
   11c10:	cmpeq	r8, r2
   11c14:	bne	11fdc <verify_monster@@Base+0x760>
   11c18:	cmp	r5, #45	; 0x2d
   11c1c:	bls	11ff0 <verify_monster@@Base+0x774>
   11c20:	ldrh	r3, [r6, #44]	; 0x2c
   11c24:	cmp	r3, #0
   11c28:	beq	11ff0 <verify_monster@@Base+0x774>
   11c2c:	ldr	r2, [r4, r3]
   11c30:	ldr	r3, [pc, #204]	; 11d04 <verify_monster@@Base+0x488>
   11c34:	cmp	r2, r3
   11c38:	bne	11ff0 <verify_monster@@Base+0x774>
   11c3c:	cmp	r5, #47	; 0x2f
   11c40:	bls	12004 <verify_monster@@Base+0x788>
   11c44:	ldrh	r3, [r6, #46]	; 0x2e
   11c48:	cmp	r3, #0
   11c4c:	beq	12004 <verify_monster@@Base+0x788>
   11c50:	ldr	r2, [r4, r3]
   11c54:	ldr	r3, [pc, #168]	; 11d04 <verify_monster@@Base+0x488>
   11c58:	cmp	r2, r3
   11c5c:	bne	12004 <verify_monster@@Base+0x788>
   11c60:	cmp	r5, #49	; 0x31
   11c64:	bls	12018 <verify_monster@@Base+0x79c>
   11c68:	ldrh	r3, [r6, #48]	; 0x30
   11c6c:	cmp	r3, #0
   11c70:	beq	12018 <verify_monster@@Base+0x79c>
   11c74:	ldrd	r8, [r4, r3]
   11c78:	add	r3, pc, #88	; 0x58
   11c7c:	ldrd	r2, [r3]
   11c80:	cmp	r9, r3
   11c84:	cmpeq	r8, r2
   11c88:	bne	12018 <verify_monster@@Base+0x79c>
   11c8c:	cmp	r5, #51	; 0x33
   11c90:	bls	11cb8 <verify_monster@@Base+0x43c>
   11c94:	ldrh	r3, [r6, #50]	; 0x32
   11c98:	cmp	r3, #0
   11c9c:	beq	11cb8 <verify_monster@@Base+0x43c>
   11ca0:	ldrd	r4, [r4, r3]
   11ca4:	add	r3, pc, #44	; 0x2c
   11ca8:	ldrd	r2, [r3]
   11cac:	cmp	r5, r3
   11cb0:	cmpeq	r4, r2
   11cb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cb8:	ldr	r3, [pc, #236]	; 11dac <verify_monster@@Base+0x530>
   11cbc:	mov	r2, #155	; 0x9b
   11cc0:	b	11db8 <verify_monster@@Base+0x53c>
   11cc4:	nop			; (mov r0, r0)
   11cc8:	andeq	r0, r0, r0
   11ccc:	andmi	r0, r8, r0
   11cd0:	vrhadd.s<illegal width 64>	d25, d27, d1
   11cd4:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   11cd8:			; <UNDEFINED> instruction: 0xc767ddf1
   11cdc:	mvnsmi	r4, #220, 16	; 0xdc0000
   11ce0:	svccc	0x00800000
   11ce4:	andmi	r0, r0, r0
   11ce8:	submi	r0, r0, r0
   11cec:	movtpl	r4, #61261	; 0xef4d
   11cf0:	andeq	r3, r1, r8, ror #23
   11cf4:	andeq	r3, r1, r8, lsr #26
   11cf8:	andeq	r3, r1, r4, asr sp
   11cfc:	andeq	r3, r1, ip, lsr #27
   11d00:			; <UNDEFINED> instruction: 0xdd79c941
   11d04:	mcrhi	4, 4, sl, cr1, cr1, {3}
   11d08:	andeq	r4, r1, r4, asr #32
   11d0c:	andeq	r3, r1, ip, lsl sl
   11d10:	andeq	r3, r1, r4, lsr sl
   11d14:	andeq	r3, r1, r8, asr sl
   11d18:	andeq	r3, r1, ip, ror #20
   11d1c:	muleq	r1, r4, sl
   11d20:			; <UNDEFINED> instruction: 0x00013ab8
   11d24:	ldrdeq	r3, [r1], -ip
   11d28:	andeq	r3, r1, r0, lsl #22
   11d2c:	andeq	r3, r1, r4, lsl fp
   11d30:	andeq	r3, r1, ip, lsr #22
   11d34:	andeq	r3, r1, ip, asr #23
   11d38:	strdeq	r3, [r1], -r4
   11d3c:	andeq	r3, r1, r8, lsl #24
   11d40:	strdeq	r3, [r1], -r0
   11d44:	andeq	r0, r0, fp, lsl #3
   11d48:	andeq	r3, r1, r4, lsr #24
   11d4c:	andeq	r3, r1, ip, lsl #25
   11d50:	andeq	r3, r1, r4, asr #25
   11d54:	andeq	r3, r1, r4, ror #25
   11d58:	andeq	r3, r1, r0, lsl #26
   11d5c:	andeq	r3, r1, r0, lsr sp
   11d60:	andeq	r3, r1, ip, asr sp
   11d64:	andeq	r3, r1, r4, lsl #27
   11d68:	muleq	r1, r4, sp
   11d6c:	ldrdeq	r3, [r1], -r4
   11d70:			; <UNDEFINED> instruction: 0x000002bb
   11d74:	andeq	r3, r1, r8, lsr #23
   11d78:			; <UNDEFINED> instruction: 0x00013db4
   11d7c:	andeq	r3, r1, r4, asr #22
   11d80:	andeq	r3, r1, ip, asr #27
   11d84:	strdeq	r3, [r1], -r0
   11d88:	andeq	r3, r1, r8, lsl #28
   11d8c:	andeq	r3, r1, r0, lsr #28
   11d90:	andeq	r3, r1, r8, lsr lr
   11d94:	andeq	r3, r1, r4, lsr #29
   11d98:	ldrdeq	r3, [r1], -ip
   11d9c:	andeq	r3, r1, r4, lsl pc
   11da0:	andeq	r3, r1, r4, asr pc
   11da4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11da8:	andeq	r3, r1, ip, asr #31
   11dac:	andeq	r3, r1, ip, lsl #20
   11db0:	andeq	r3, r1, r0, asr lr
   11db4:	andeq	r4, r1, r4
   11db8:	ldr	r1, [pc, #-16]	; 11db0 <verify_monster@@Base+0x534>
   11dbc:	ldr	r0, [pc, #-188]	; 11d08 <verify_monster@@Base+0x48c>
   11dc0:	bl	10ddc <__assert_fail@plt>
   11dc4:	ldr	r0, [pc, #-192]	; 11d0c <verify_monster@@Base+0x490>
   11dc8:	bl	10d4c <puts@plt>
   11dcc:	mvn	r0, #0
   11dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dd4:	ldr	r0, [pc, #-204]	; 11d10 <verify_monster@@Base+0x494>
   11dd8:	bl	10d4c <puts@plt>
   11ddc:	mvn	r0, #0
   11de0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11de4:	ldr	r0, [pc, #-216]	; 11d14 <verify_monster@@Base+0x498>
   11de8:	bl	10d4c <puts@plt>
   11dec:	mvn	r0, #0
   11df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11df4:	ldr	r0, [pc, #-228]	; 11d18 <verify_monster@@Base+0x49c>
   11df8:	bl	10d4c <puts@plt>
   11dfc:	mvn	r0, #0
   11e00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e04:	ldr	r0, [pc, #-240]	; 11d1c <verify_monster@@Base+0x4a0>
   11e08:	bl	10d4c <puts@plt>
   11e0c:	mvn	r0, #0
   11e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e14:	ldr	r0, [pc, #-252]	; 11d20 <verify_monster@@Base+0x4a4>
   11e18:	bl	10d4c <puts@plt>
   11e1c:	mvn	r0, #0
   11e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e24:	ldr	r0, [pc, #-264]	; 11d24 <verify_monster@@Base+0x4a8>
   11e28:	bl	10d4c <puts@plt>
   11e2c:	mvn	r0, #0
   11e30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e34:	ldr	r0, [pc, #-276]	; 11d28 <verify_monster@@Base+0x4ac>
   11e38:	bl	10d4c <puts@plt>
   11e3c:	mvn	r0, #0
   11e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e44:	ldr	r0, [pc, #-288]	; 11d2c <verify_monster@@Base+0x4b0>
   11e48:	bl	10d4c <puts@plt>
   11e4c:	mvn	r0, #0
   11e50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e54:	ldr	r0, [pc, #-300]	; 11d30 <verify_monster@@Base+0x4b4>
   11e58:	bl	10d4c <puts@plt>
   11e5c:	mvn	r0, #0
   11e60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e64:	ldr	r3, [pc, #-256]	; 11d6c <verify_monster@@Base+0x4f0>
   11e68:	ldr	r2, [pc, #-256]	; 11d70 <verify_monster@@Base+0x4f4>
   11e6c:	ldr	r1, [pc, #-248]	; 11d7c <verify_monster@@Base+0x500>
   11e70:	ldr	r0, [pc, #-260]	; 11d74 <verify_monster@@Base+0x4f8>
   11e74:	bl	10ddc <__assert_fail@plt>
   11e78:	ldr	r0, [pc, #-332]	; 11d34 <verify_monster@@Base+0x4b8>
   11e7c:	bl	10d4c <puts@plt>
   11e80:	mvn	r0, #0
   11e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e88:	ldr	r0, [pc, #-344]	; 11d38 <verify_monster@@Base+0x4bc>
   11e8c:	bl	10d4c <puts@plt>
   11e90:	mvn	r0, #0
   11e94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e98:	ldr	r0, [pc, #-356]	; 11d3c <verify_monster@@Base+0x4c0>
   11e9c:	bl	10d4c <puts@plt>
   11ea0:	mvn	r0, #0
   11ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ea8:	ldr	r3, [pc, #-368]	; 11d40 <verify_monster@@Base+0x4c4>
   11eac:	ldr	r2, [pc, #-368]	; 11d44 <verify_monster@@Base+0x4c8>
   11eb0:	ldr	r1, [pc, #-368]	; 11d48 <verify_monster@@Base+0x4cc>
   11eb4:	ldr	r0, [pc, #-368]	; 11d4c <verify_monster@@Base+0x4d0>
   11eb8:	bl	10ddc <__assert_fail@plt>
   11ebc:	ldr	r0, [pc, #-372]	; 11d50 <verify_monster@@Base+0x4d4>
   11ec0:	bl	10cec <printf@plt>
   11ec4:	mvn	r0, #0
   11ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ecc:	ldr	r0, [pc, #-384]	; 11d54 <verify_monster@@Base+0x4d8>
   11ed0:	bl	10d4c <puts@plt>
   11ed4:	mvn	r0, #0
   11ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11edc:	ldr	r0, [pc, #-396]	; 11d58 <verify_monster@@Base+0x4dc>
   11ee0:	bl	10d4c <puts@plt>
   11ee4:	mvn	r0, #0
   11ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11eec:	ldr	r0, [pc, #-408]	; 11d5c <verify_monster@@Base+0x4e0>
   11ef0:	bl	10d4c <puts@plt>
   11ef4:	mvn	r0, #0
   11ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11efc:	ldr	r0, [pc, #-420]	; 11d60 <verify_monster@@Base+0x4e4>
   11f00:	bl	10d4c <puts@plt>
   11f04:	mvn	r0, #0
   11f08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f0c:	ldr	r0, [pc, #-432]	; 11d64 <verify_monster@@Base+0x4e8>
   11f10:	bl	10d4c <puts@plt>
   11f14:	mvn	r0, #0
   11f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f1c:	ldr	r0, [pc, #-444]	; 11d68 <verify_monster@@Base+0x4ec>
   11f20:	bl	10d4c <puts@plt>
   11f24:	mvn	r0, #0
   11f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f2c:	ldr	r3, [pc, #-456]	; 11d6c <verify_monster@@Base+0x4f0>
   11f30:	ldr	r2, [pc, #-456]	; 11d70 <verify_monster@@Base+0x4f4>
   11f34:	ldr	r1, [pc, #-448]	; 11d7c <verify_monster@@Base+0x500>
   11f38:	ldr	r0, [pc, #-460]	; 11d74 <verify_monster@@Base+0x4f8>
   11f3c:	bl	10ddc <__assert_fail@plt>
   11f40:	ldr	r0, [pc, #-464]	; 11d78 <verify_monster@@Base+0x4fc>
   11f44:	bl	10d4c <puts@plt>
   11f48:	mvn	r0, #0
   11f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f50:	ldr	r0, [pc, #-472]	; 11d80 <verify_monster@@Base+0x504>
   11f54:	bl	10d4c <puts@plt>
   11f58:	mvn	r0, #0
   11f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f60:	ldr	r0, [pc, #-484]	; 11d84 <verify_monster@@Base+0x508>
   11f64:	bl	10d4c <puts@plt>
   11f68:	mvn	r0, #0
   11f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f70:	ldr	r0, [pc, #-496]	; 11d88 <verify_monster@@Base+0x50c>
   11f74:	bl	10d4c <puts@plt>
   11f78:	mvn	r0, #0
   11f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f80:	ldr	r0, [pc, #-508]	; 11d8c <verify_monster@@Base+0x510>
   11f84:	bl	10d4c <puts@plt>
   11f88:	mvn	r0, #0
   11f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f90:	ldr	r0, [pc, #-520]	; 11d90 <verify_monster@@Base+0x514>
   11f94:	bl	10d4c <puts@plt>
   11f98:	mvn	r0, #0
   11f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fa0:	ldr	r3, [pc, #-508]	; 11dac <verify_monster@@Base+0x530>
   11fa4:	mov	r2, #148	; 0x94
   11fa8:	ldr	r1, [pc, #-512]	; 11db0 <verify_monster@@Base+0x534>
   11fac:	ldr	r0, [pc, #-544]	; 11d94 <verify_monster@@Base+0x518>
   11fb0:	bl	10ddc <__assert_fail@plt>
   11fb4:	ldr	r3, [pc, #-528]	; 11dac <verify_monster@@Base+0x530>
   11fb8:	mov	r2, #149	; 0x95
   11fbc:	ldr	r1, [pc, #-532]	; 11db0 <verify_monster@@Base+0x534>
   11fc0:	ldr	r0, [pc, #-560]	; 11d98 <verify_monster@@Base+0x51c>
   11fc4:	bl	10ddc <__assert_fail@plt>
   11fc8:	ldr	r3, [pc, #-548]	; 11dac <verify_monster@@Base+0x530>
   11fcc:	mov	r2, #150	; 0x96
   11fd0:	ldr	r1, [pc, #-552]	; 11db0 <verify_monster@@Base+0x534>
   11fd4:	ldr	r0, [pc, #-576]	; 11d9c <verify_monster@@Base+0x520>
   11fd8:	bl	10ddc <__assert_fail@plt>
   11fdc:	ldr	r3, [pc, #-568]	; 11dac <verify_monster@@Base+0x530>
   11fe0:	mov	r2, #151	; 0x97
   11fe4:	ldr	r1, [pc, #-572]	; 11db0 <verify_monster@@Base+0x534>
   11fe8:	ldr	r0, [pc, #-592]	; 11da0 <verify_monster@@Base+0x524>
   11fec:	bl	10ddc <__assert_fail@plt>
   11ff0:	ldr	r3, [pc, #-588]	; 11dac <verify_monster@@Base+0x530>
   11ff4:	mov	r2, #152	; 0x98
   11ff8:	ldr	r1, [pc, #-592]	; 11db0 <verify_monster@@Base+0x534>
   11ffc:	ldr	r0, [pc, #-608]	; 11da4 <verify_monster@@Base+0x528>
   12000:	bl	10ddc <__assert_fail@plt>
   12004:	ldr	r3, [pc, #-608]	; 11dac <verify_monster@@Base+0x530>
   12008:	mov	r2, #153	; 0x99
   1200c:	ldr	r1, [pc, #-612]	; 11db0 <verify_monster@@Base+0x534>
   12010:	ldr	r0, [pc, #-624]	; 11da8 <verify_monster@@Base+0x52c>
   12014:	bl	10ddc <__assert_fail@plt>
   12018:	ldr	r3, [pc, #-628]	; 11dac <verify_monster@@Base+0x530>
   1201c:	mov	r2, #154	; 0x9a
   12020:	ldr	r1, [pc, #-632]	; 11db0 <verify_monster@@Base+0x534>
   12024:	ldr	r0, [pc, #-632]	; 11db4 <verify_monster@@Base+0x538>
   12028:	bl	10ddc <__assert_fail@plt>

0001202c <main@@Base>:
   1202c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12030:	sub	sp, sp, #28
   12034:	sub	r3, r0, #1
   12038:	cmp	r3, #1
   1203c:	bhi	120b8 <main@@Base+0x8c>
   12040:	cmp	r0, #2
   12044:	ldreq	r2, [r1, #4]
   12048:	ldreq	r3, [pc, #816]	; 12380 <main@@Base+0x354>
   1204c:	streq	r2, [r3]
   12050:	ldr	r1, [pc, #812]	; 12384 <main@@Base+0x358>
   12054:	ldr	r3, [pc, #804]	; 12380 <main@@Base+0x354>
   12058:	ldr	r0, [r3]
   1205c:	bl	10cf8 <fopen@plt>
   12060:	subs	r5, r0, #0
   12064:	beq	12180 <main@@Base+0x154>
   12068:	mov	r2, #2
   1206c:	mov	r1, #0
   12070:	mov	r0, r5
   12074:	bl	10dc4 <fseek@plt>
   12078:	mov	r0, r5
   1207c:	bl	10d1c <ftell@plt>
   12080:	mov	r8, r0
   12084:	cmp	r0, #1024	; 0x400
   12088:	bhi	1235c <main@@Base+0x330>
   1208c:	mov	r0, r5
   12090:	bl	10d28 <rewind@plt>
   12094:	cmp	r8, #0
   12098:	movne	r0, r8
   1209c:	moveq	r0, #1
   120a0:	bl	10d58 <malloc@plt>
   120a4:	subs	r6, r0, #0
   120a8:	beq	12360 <main@@Base+0x334>
   120ac:	mov	r4, #0
   120b0:	mov	r7, #1
   120b4:	b	120dc <main@@Base+0xb0>
   120b8:	ldr	r3, [pc, #712]	; 12388 <main@@Base+0x35c>
   120bc:	ldr	r3, [r3]
   120c0:	mov	r2, #63	; 0x3f
   120c4:	mov	r1, #1
   120c8:	ldr	r0, [pc, #700]	; 1238c <main@@Base+0x360>
   120cc:	bl	10d34 <fwrite@plt>
   120d0:	mov	r0, #1
   120d4:	bl	10d7c <exit@plt>
   120d8:	add	r4, r4, r0
   120dc:	mov	r3, r5
   120e0:	sub	r2, r8, r4
   120e4:	mov	r1, r7
   120e8:	add	r0, r6, r4
   120ec:	bl	10d40 <fread@plt>
   120f0:	cmp	r0, #0
   120f4:	bne	120d8 <main@@Base+0xac>
   120f8:	cmp	r8, r4
   120fc:	bne	12360 <main@@Base+0x334>
   12100:	mov	r0, r5
   12104:	bl	10dac <fclose@plt>
   12108:	mov	r8, r4
   1210c:	add	r0, sp, #24
   12110:	mov	r3, #0
   12114:	str	r3, [r0, #-20]!	; 0xffffffec
   12118:	add	r2, r8, #255	; 0xff
   1211c:	bic	r2, r2, #255	; 0xff
   12120:	mov	r1, #256	; 0x100
   12124:	bl	10d94 <posix_memalign@plt>
   12128:	cmp	r0, #0
   1212c:	beq	1218c <main@@Base+0x160>
   12130:	ldr	r0, [sp, #4]
   12134:	cmp	r0, #0
   12138:	beq	12148 <main@@Base+0x11c>
   1213c:	bl	10d04 <free@plt>
   12140:	mov	r3, #0
   12144:	str	r3, [sp, #4]
   12148:	mov	r2, r8
   1214c:	mov	r1, r6
   12150:	ldr	r0, [sp, #4]
   12154:	bl	10d10 <memcpy@plt>
   12158:	mov	r0, r6
   1215c:	bl	10d04 <free@plt>
   12160:	ldr	r3, [pc, #536]	; 12380 <main@@Base+0x354>
   12164:	ldr	r2, [r3]
   12168:	ldr	r1, [pc, #544]	; 12390 <main@@Base+0x364>
   1216c:	ldr	r3, [pc, #532]	; 12388 <main@@Base+0x35c>
   12170:	ldr	r0, [r3]
   12174:	bl	10d88 <fprintf@plt>
   12178:	mvn	r4, #0
   1217c:	b	12304 <main@@Base+0x2d8>
   12180:	mov	r8, #0
   12184:	mov	r6, r8
   12188:	b	1210c <main@@Base+0xe0>
   1218c:	ldr	fp, [sp, #4]
   12190:	mov	r2, r8
   12194:	mov	r1, r6
   12198:	mov	r0, fp
   1219c:	bl	10d10 <memcpy@plt>
   121a0:	mov	r0, r6
   121a4:	bl	10d04 <free@plt>
   121a8:	cmp	fp, #0
   121ac:	beq	12160 <main@@Base+0x134>
   121b0:	ldr	r3, [pc, #464]	; 12388 <main@@Base+0x35c>
   121b4:	ldr	r6, [r3]
   121b8:	ldr	r2, [pc, #468]	; 12394 <main@@Base+0x368>
   121bc:	ldr	r1, [pc, #468]	; 12398 <main@@Base+0x36c>
   121c0:	mov	r0, r6
   121c4:	bl	10d88 <fprintf@plt>
   121c8:	cmp	r8, #0
   121cc:	beq	122b4 <main@@Base+0x288>
   121d0:	sub	r7, fp, #1
   121d4:	mov	r4, #0
   121d8:	ldr	r9, [pc, #444]	; 1239c <main@@Base+0x370>
   121dc:	mov	sl, #46	; 0x2e
   121e0:	b	12240 <main@@Base+0x214>
   121e4:	mov	r2, r4
   121e8:	ldr	r1, [pc, #432]	; 123a0 <main@@Base+0x374>
   121ec:	mov	r0, r6
   121f0:	bl	10d88 <fprintf@plt>
   121f4:	ldrb	r2, [r7, #1]
   121f8:	mov	r1, r9
   121fc:	mov	r0, r6
   12200:	bl	10d88 <fprintf@plt>
   12204:	ldrb	r2, [r7, #1]!
   12208:	sub	r3, r2, #32
   1220c:	uxtb	r3, r3
   12210:	cmp	r3, #94	; 0x5e
   12214:	add	r3, sp, #24
   12218:	add	r3, r3, r5
   1221c:	strbhi	sl, [r3, #-20]	; 0xffffffec
   12220:	strbls	r2, [r3, #-20]	; 0xffffffec
   12224:	add	r3, sp, #24
   12228:	add	r5, r3, r5
   1222c:	mov	r3, #0
   12230:	strb	r3, [r5, #-19]	; 0xffffffed
   12234:	add	r4, r4, #1
   12238:	cmp	r4, r8
   1223c:	beq	1227c <main@@Base+0x250>
   12240:	ands	r5, r4, #15
   12244:	bne	12264 <main@@Base+0x238>
   12248:	cmp	r4, #0
   1224c:	beq	121e4 <main@@Base+0x1b8>
   12250:	add	r2, sp, #4
   12254:	ldr	r1, [pc, #328]	; 123a4 <main@@Base+0x378>
   12258:	mov	r0, r6
   1225c:	bl	10d88 <fprintf@plt>
   12260:	b	121e4 <main@@Base+0x1b8>
   12264:	tst	r4, #7
   12268:	bne	121f4 <main@@Base+0x1c8>
   1226c:	mov	r1, r6
   12270:	mov	r0, #32
   12274:	bl	10db8 <fputc@plt>
   12278:	b	121f4 <main@@Base+0x1c8>
   1227c:	tst	r4, #15
   12280:	beq	122b4 <main@@Base+0x288>
   12284:	mov	r4, r8
   12288:	ldr	r9, [pc, #280]	; 123a8 <main@@Base+0x37c>
   1228c:	mov	r7, #3
   12290:	mov	r5, #1
   12294:	mov	r3, r6
   12298:	mov	r2, r7
   1229c:	mov	r1, r5
   122a0:	mov	r0, r9
   122a4:	bl	10d34 <fwrite@plt>
   122a8:	add	r4, r4, #1
   122ac:	tst	r4, #15
   122b0:	bne	12294 <main@@Base+0x268>
   122b4:	add	r2, sp, #4
   122b8:	ldr	r1, [pc, #228]	; 123a4 <main@@Base+0x378>
   122bc:	mov	r0, r6
   122c0:	bl	10d88 <fprintf@plt>
   122c4:	ldr	r3, [pc, #224]	; 123ac <main@@Base+0x380>
   122c8:	ldr	r2, [pc, #224]	; 123b0 <main@@Base+0x384>
   122cc:	mov	r1, r8
   122d0:	mov	r0, fp
   122d4:	bl	13118 <flatcc_verify_table_as_root@@Base>
   122d8:	cmp	r0, #0
   122dc:	beq	12310 <main@@Base+0x2e4>
   122e0:	ldr	r3, [pc, #160]	; 12388 <main@@Base+0x35c>
   122e4:	ldr	r3, [r3]
   122e8:	mov	r2, #38	; 0x26
   122ec:	mov	r1, #1
   122f0:	ldr	r0, [pc, #188]	; 123b4 <main@@Base+0x388>
   122f4:	bl	10d34 <fwrite@plt>
   122f8:	mvn	r4, #0
   122fc:	mov	r0, fp
   12300:	bl	10d04 <free@plt>
   12304:	mov	r0, r4
   12308:	add	sp, sp, #28
   1230c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12310:	ldr	r3, [pc, #148]	; 123ac <main@@Base+0x380>
   12314:	ldr	r2, [pc, #148]	; 123b0 <main@@Base+0x384>
   12318:	mov	r1, r8
   1231c:	mov	r0, fp
   12320:	bl	13118 <flatcc_verify_table_as_root@@Base>
   12324:	cmp	r0, #0
   12328:	beq	1234c <main@@Base+0x320>
   1232c:	ldr	r3, [pc, #84]	; 12388 <main@@Base+0x35c>
   12330:	ldr	r3, [r3]
   12334:	mov	r2, #62	; 0x3e
   12338:	mov	r1, #1
   1233c:	ldr	r0, [pc, #116]	; 123b8 <main@@Base+0x38c>
   12340:	bl	10d34 <fwrite@plt>
   12344:	mvn	r4, #0
   12348:	b	122fc <main@@Base+0x2d0>
   1234c:	mov	r0, fp
   12350:	bl	1187c <verify_monster@@Base>
   12354:	mov	r4, r0
   12358:	b	122fc <main@@Base+0x2d0>
   1235c:	mov	r6, #0
   12360:	mov	r0, r5
   12364:	bl	10dac <fclose@plt>
   12368:	cmp	r6, #0
   1236c:	beq	1210c <main@@Base+0xe0>
   12370:	mov	r0, r6
   12374:	bl	10d04 <free@plt>
   12378:	mov	r6, #0
   1237c:	b	1210c <main@@Base+0xe0>
   12380:	andeq	r5, r2, r0, ror r0
   12384:	andeq	r4, r1, r4, asr #1
   12388:	andeq	r5, r2, r8, ror r0
   1238c:	andeq	r4, r1, r4, lsl #1
   12390:	andeq	r4, r1, r8, asr #1
   12394:	strdeq	r4, [r1], -r0
   12398:	andeq	r4, r1, r8, lsl #2
   1239c:	andeq	r4, r1, r0, lsr #2
   123a0:	andeq	r4, r1, r8, lsl r1
   123a4:	andeq	r4, r1, r0, lsl r1
   123a8:	andeq	r4, r1, r8, lsr #2
   123ac:			; <UNDEFINED> instruction: 0x000111b8
   123b0:	andeq	r4, r1, ip, lsr #2
   123b4:	andeq	r4, r1, r4, lsr r1
   123b8:	andeq	r4, r1, ip, asr r1
   123bc:	add	r1, r1, #2
   123c0:	lsl	r1, r1, #1
   123c4:	uxth	r1, r1
   123c8:	ldrh	ip, [r0, #22]
   123cc:	cmp	ip, r1
   123d0:	bls	123fc <main@@Base+0x3d0>
   123d4:	ldr	ip, [r0, #12]
   123d8:	ldrh	r1, [ip, r1]
   123dc:	cmp	r1, #0
   123e0:	beq	123fc <main@@Base+0x3d0>
   123e4:	add	r2, r1, #4
   123e8:	ldrh	ip, [r0, #20]
   123ec:	cmp	r2, ip
   123f0:	bls	12414 <main@@Base+0x3e8>
   123f4:	mov	r0, #13
   123f8:	bx	lr
   123fc:	mov	r1, #0
   12400:	str	r1, [r3]
   12404:	cmp	r2, r1
   12408:	moveq	r0, r2
   1240c:	movne	r0, #4
   12410:	bx	lr
   12414:	ldr	r2, [r0, #16]
   12418:	add	r1, r1, r2
   1241c:	tst	r1, #3
   12420:	beq	1242c <main@@Base+0x400>
   12424:	mov	r0, #12
   12428:	bx	lr
   1242c:	str	r1, [r3]
   12430:	mov	r0, #0
   12434:	bx	lr

00012438 <flatcc_verify_error_string@@Base>:
   12438:	cmp	r0, #36	; 0x24
   1243c:	ldrls	pc, [pc, r0, lsl #2]
   12440:	b	125f8 <flatcc_verify_error_string@@Base+0x1c0>
   12444:	andeq	r2, r1, r0, lsl #12
   12448:	ldrdeq	r2, [r1], -r8
   1244c:	andeq	r2, r1, r0, ror #9
   12450:	andeq	r2, r1, r8, ror #9
   12454:	strdeq	r2, [r1], -r0
   12458:	strdeq	r2, [r1], -r8
   1245c:	andeq	r2, r1, r0, lsl #10
   12460:	andeq	r2, r1, r8, lsl #10
   12464:	andeq	r2, r1, r0, lsl r5
   12468:	andeq	r2, r1, r8, lsl r5
   1246c:	andeq	r2, r1, r0, lsr #10
   12470:	andeq	r2, r1, r8, lsr #10
   12474:	andeq	r2, r1, r0, lsr r5
   12478:	andeq	r2, r1, r8, lsr r5
   1247c:	andeq	r2, r1, r0, asr #10
   12480:	andeq	r2, r1, r8, asr #10
   12484:	andeq	r2, r1, r0, asr r5
   12488:	andeq	r2, r1, r8, asr r5
   1248c:	andeq	r2, r1, r0, ror #10
   12490:	andeq	r2, r1, r8, ror #10
   12494:	andeq	r2, r1, r0, ror r5
   12498:	andeq	r2, r1, r8, ror r5
   1249c:	andeq	r2, r1, r0, lsl #11
   124a0:	andeq	r2, r1, r8, lsl #11
   124a4:	muleq	r1, r0, r5
   124a8:	muleq	r1, r8, r5
   124ac:	andeq	r2, r1, r0, lsr #11
   124b0:	andeq	r2, r1, r8, lsr #11
   124b4:			; <UNDEFINED> instruction: 0x000125b0
   124b8:			; <UNDEFINED> instruction: 0x000125b8
   124bc:	andeq	r2, r1, r0, asr #11
   124c0:	andeq	r2, r1, r8, asr #11
   124c4:	ldrdeq	r2, [r1], -r0
   124c8:	ldrdeq	r2, [r1], -r8
   124cc:	andeq	r2, r1, r0, ror #11
   124d0:	andeq	r2, r1, r8, ror #11
   124d4:	strdeq	r2, [r1], -r0
   124d8:	ldr	r0, [pc, #296]	; 12608 <flatcc_verify_error_string@@Base+0x1d0>
   124dc:	bx	lr
   124e0:	ldr	r0, [pc, #292]	; 1260c <flatcc_verify_error_string@@Base+0x1d4>
   124e4:	bx	lr
   124e8:	ldr	r0, [pc, #288]	; 12610 <flatcc_verify_error_string@@Base+0x1d8>
   124ec:	bx	lr
   124f0:	ldr	r0, [pc, #284]	; 12614 <flatcc_verify_error_string@@Base+0x1dc>
   124f4:	bx	lr
   124f8:	ldr	r0, [pc, #280]	; 12618 <flatcc_verify_error_string@@Base+0x1e0>
   124fc:	bx	lr
   12500:	ldr	r0, [pc, #276]	; 1261c <flatcc_verify_error_string@@Base+0x1e4>
   12504:	bx	lr
   12508:	ldr	r0, [pc, #272]	; 12620 <flatcc_verify_error_string@@Base+0x1e8>
   1250c:	bx	lr
   12510:	ldr	r0, [pc, #268]	; 12624 <flatcc_verify_error_string@@Base+0x1ec>
   12514:	bx	lr
   12518:	ldr	r0, [pc, #264]	; 12628 <flatcc_verify_error_string@@Base+0x1f0>
   1251c:	bx	lr
   12520:	ldr	r0, [pc, #260]	; 1262c <flatcc_verify_error_string@@Base+0x1f4>
   12524:	bx	lr
   12528:	ldr	r0, [pc, #256]	; 12630 <flatcc_verify_error_string@@Base+0x1f8>
   1252c:	bx	lr
   12530:	ldr	r0, [pc, #252]	; 12634 <flatcc_verify_error_string@@Base+0x1fc>
   12534:	bx	lr
   12538:	ldr	r0, [pc, #248]	; 12638 <flatcc_verify_error_string@@Base+0x200>
   1253c:	bx	lr
   12540:	ldr	r0, [pc, #244]	; 1263c <flatcc_verify_error_string@@Base+0x204>
   12544:	bx	lr
   12548:	ldr	r0, [pc, #240]	; 12640 <flatcc_verify_error_string@@Base+0x208>
   1254c:	bx	lr
   12550:	ldr	r0, [pc, #236]	; 12644 <flatcc_verify_error_string@@Base+0x20c>
   12554:	bx	lr
   12558:	ldr	r0, [pc, #232]	; 12648 <flatcc_verify_error_string@@Base+0x210>
   1255c:	bx	lr
   12560:	ldr	r0, [pc, #228]	; 1264c <flatcc_verify_error_string@@Base+0x214>
   12564:	bx	lr
   12568:	ldr	r0, [pc, #224]	; 12650 <flatcc_verify_error_string@@Base+0x218>
   1256c:	bx	lr
   12570:	ldr	r0, [pc, #220]	; 12654 <flatcc_verify_error_string@@Base+0x21c>
   12574:	bx	lr
   12578:	ldr	r0, [pc, #216]	; 12658 <flatcc_verify_error_string@@Base+0x220>
   1257c:	bx	lr
   12580:	ldr	r0, [pc, #212]	; 1265c <flatcc_verify_error_string@@Base+0x224>
   12584:	bx	lr
   12588:	ldr	r0, [pc, #208]	; 12660 <flatcc_verify_error_string@@Base+0x228>
   1258c:	bx	lr
   12590:	ldr	r0, [pc, #204]	; 12664 <flatcc_verify_error_string@@Base+0x22c>
   12594:	bx	lr
   12598:	ldr	r0, [pc, #200]	; 12668 <flatcc_verify_error_string@@Base+0x230>
   1259c:	bx	lr
   125a0:	ldr	r0, [pc, #196]	; 1266c <flatcc_verify_error_string@@Base+0x234>
   125a4:	bx	lr
   125a8:	ldr	r0, [pc, #192]	; 12670 <flatcc_verify_error_string@@Base+0x238>
   125ac:	bx	lr
   125b0:	ldr	r0, [pc, #188]	; 12674 <flatcc_verify_error_string@@Base+0x23c>
   125b4:	bx	lr
   125b8:	ldr	r0, [pc, #184]	; 12678 <flatcc_verify_error_string@@Base+0x240>
   125bc:	bx	lr
   125c0:	ldr	r0, [pc, #180]	; 1267c <flatcc_verify_error_string@@Base+0x244>
   125c4:	bx	lr
   125c8:	ldr	r0, [pc, #176]	; 12680 <flatcc_verify_error_string@@Base+0x248>
   125cc:	bx	lr
   125d0:	ldr	r0, [pc, #172]	; 12684 <flatcc_verify_error_string@@Base+0x24c>
   125d4:	bx	lr
   125d8:	ldr	r0, [pc, #168]	; 12688 <flatcc_verify_error_string@@Base+0x250>
   125dc:	bx	lr
   125e0:	ldr	r0, [pc, #164]	; 1268c <flatcc_verify_error_string@@Base+0x254>
   125e4:	bx	lr
   125e8:	ldr	r0, [pc, #160]	; 12690 <flatcc_verify_error_string@@Base+0x258>
   125ec:	bx	lr
   125f0:	ldr	r0, [pc, #156]	; 12694 <flatcc_verify_error_string@@Base+0x25c>
   125f4:	bx	lr
   125f8:	ldr	r0, [pc, #152]	; 12698 <flatcc_verify_error_string@@Base+0x260>
   125fc:	bx	lr
   12600:	ldr	r0, [pc, #148]	; 1269c <flatcc_verify_error_string@@Base+0x264>
   12604:	bx	lr
   12608:	andeq	r4, r1, r0, lsr #3
   1260c:			; <UNDEFINED> instruction: 0x000141b8
   12610:	andeq	r4, r1, ip, asr #3
   12614:	andeq	r4, r1, r8, ror #3
   12618:	andeq	r4, r1, r0, lsl #4
   1261c:	andeq	r4, r1, r4, lsr #4
   12620:	andeq	r4, r1, r4, asr #4
   12624:	andeq	r4, r1, r0, ror #4
   12628:	andeq	r4, r1, r4, ror r2
   1262c:	andeq	r4, r1, r8, lsl #5
   12630:	andeq	r4, r1, r0, lsr #5
   12634:			; <UNDEFINED> instruction: 0x000142b4
   12638:	andeq	r4, r1, ip, asr #5
   1263c:	andeq	r4, r1, r8, ror #5
   12640:	andeq	r4, r1, r4, lsl #6
   12644:	andeq	r4, r1, ip, lsr #6
   12648:	andeq	r4, r1, r4, asr r3
   1264c:	andeq	r4, r1, ip, ror r3
   12650:	muleq	r1, r0, r3
   12654:			; <UNDEFINED> instruction: 0x000143b8
   12658:	ldrdeq	r4, [r1], -r0
   1265c:	strdeq	r4, [r1], -ip
   12660:	andeq	r4, r1, r0, lsr r4
   12664:	andeq	r4, r1, ip, asr r4
   12668:	andeq	r4, r1, r8, lsl #9
   1266c:			; <UNDEFINED> instruction: 0x000144b8
   12670:	andeq	r4, r1, ip, asr #9
   12674:	andeq	r4, r1, r8, ror #9
   12678:	andeq	r4, r1, r0, lsl #10
   1267c:	andeq	r4, r1, r8, lsr #10
   12680:	andeq	r4, r1, r0, asr r5
   12684:	andeq	r4, r1, r8, ror #10
   12688:	muleq	r1, r0, r5
   1268c:			; <UNDEFINED> instruction: 0x000145b8
   12690:	andeq	r4, r1, ip, ror #11
   12694:	andeq	r4, r1, r4, lsl r6
   12698:	andeq	r4, r1, r4, lsr #12
   1269c:	muleq	r1, ip, r1

000126a0 <flatcc_verify_field@@Base>:
   126a0:	add	r1, r1, #2
   126a4:	lsl	r1, r1, #1
   126a8:	uxth	r1, r1
   126ac:	ldrh	ip, [r0, #22]
   126b0:	cmp	ip, r1
   126b4:	bls	12708 <flatcc_verify_field@@Base+0x68>
   126b8:	ldr	ip, [r0, #12]
   126bc:	ldrh	r1, [ip, r1]
   126c0:	cmp	r1, #0
   126c4:	beq	12710 <flatcc_verify_field@@Base+0x70>
   126c8:	add	r2, r2, r1
   126cc:	ldrh	ip, [r0, #20]
   126d0:	cmp	r2, ip
   126d4:	bls	126e0 <flatcc_verify_field@@Base+0x40>
   126d8:	mov	r0, #13
   126dc:	bx	lr
   126e0:	ldr	r2, [r0]
   126e4:	ldr	r0, [r0, #16]
   126e8:	add	r0, r2, r0
   126ec:	add	r0, r0, r1
   126f0:	sub	r3, r3, #1
   126f4:	and	r0, r0, r3
   126f8:	cmp	r0, #0
   126fc:	movne	r0, #12
   12700:	moveq	r0, #0
   12704:	bx	lr
   12708:	mov	r0, #0
   1270c:	bx	lr
   12710:	mov	r0, #0
   12714:	bx	lr

00012718 <flatcc_verify_string_field@@Base>:
   12718:	push	{r4, lr}
   1271c:	sub	sp, sp, #8
   12720:	mov	r4, r0
   12724:	add	r3, sp, #4
   12728:	bl	123bc <main@@Base+0x390>
   1272c:	cmp	r0, #0
   12730:	bne	12790 <flatcc_verify_string_field@@Base+0x78>
   12734:	ldr	r3, [sp, #4]
   12738:	cmp	r3, #0
   1273c:	beq	12790 <flatcc_verify_string_field@@Base+0x78>
   12740:	ldr	r1, [r4]
   12744:	ldr	r2, [r1, r3]
   12748:	add	r2, r3, r2
   1274c:	cmp	r3, r2
   12750:	movcs	r0, #17
   12754:	bcs	12790 <flatcc_verify_string_field@@Base+0x78>
   12758:	ldr	r3, [r4, #4]
   1275c:	add	ip, r2, #4
   12760:	cmp	r3, ip
   12764:	movcc	r0, #17
   12768:	bcc	12790 <flatcc_verify_string_field@@Base+0x78>
   1276c:	tst	r2, #3
   12770:	movne	r0, #17
   12774:	bne	12790 <flatcc_verify_string_field@@Base+0x78>
   12778:	ldr	r2, [r1, r2]
   1277c:	sub	r3, r3, ip
   12780:	add	lr, r2, #1
   12784:	cmp	r3, lr
   12788:	movcc	r0, #8
   1278c:	bcs	12798 <flatcc_verify_string_field@@Base+0x80>
   12790:	add	sp, sp, #8
   12794:	pop	{r4, pc}
   12798:	add	r1, r1, ip
   1279c:	ldrb	r3, [r1, r2]
   127a0:	cmp	r3, #0
   127a4:	movne	r0, #7
   127a8:	b	12790 <flatcc_verify_string_field@@Base+0x78>

000127ac <flatcc_verify_vector_field@@Base>:
   127ac:	push	{r4, r5, r6, lr}
   127b0:	sub	sp, sp, #8
   127b4:	mov	r4, r0
   127b8:	mov	r5, r3
   127bc:	ldrh	r6, [sp, #24]
   127c0:	add	r3, sp, #4
   127c4:	bl	123bc <main@@Base+0x390>
   127c8:	cmp	r0, #0
   127cc:	bne	1283c <flatcc_verify_vector_field@@Base+0x90>
   127d0:	ldr	r3, [sp, #4]
   127d4:	cmp	r3, #0
   127d8:	beq	1283c <flatcc_verify_vector_field@@Base+0x90>
   127dc:	ldr	r1, [r4]
   127e0:	ldr	r2, [r1, r3]
   127e4:	add	r2, r3, r2
   127e8:	cmp	r3, r2
   127ec:	movcs	r0, #16
   127f0:	bcs	1283c <flatcc_verify_vector_field@@Base+0x90>
   127f4:	ldr	ip, [r4, #4]
   127f8:	add	lr, r2, #4
   127fc:	cmp	ip, lr
   12800:	movcc	r0, #16
   12804:	bcc	1283c <flatcc_verify_vector_field@@Base+0x90>
   12808:	cmp	r6, #4
   1280c:	movcs	r3, r6
   12810:	movcc	r3, #4
   12814:	sub	r3, r3, #1
   12818:	orr	r3, r3, #3
   1281c:	tst	r3, lr
   12820:	movne	r0, #16
   12824:	bne	1283c <flatcc_verify_vector_field@@Base+0x90>
   12828:	ldr	r3, [r1, r2]
   1282c:	ldr	r1, [sp, #28]
   12830:	cmp	r1, r3
   12834:	movcc	r0, #25
   12838:	bcs	12844 <flatcc_verify_vector_field@@Base+0x98>
   1283c:	add	sp, sp, #8
   12840:	pop	{r4, r5, r6, pc}
   12844:	mul	r5, r3, r5
   12848:	sub	ip, ip, #4
   1284c:	sub	r2, ip, r2
   12850:	cmp	r5, r2
   12854:	movhi	r0, #26
   12858:	b	1283c <flatcc_verify_vector_field@@Base+0x90>

0001285c <flatcc_verify_string_vector_field@@Base>:
   1285c:	push	{r4, r5, r6, r7, r8, lr}
   12860:	sub	sp, sp, #8
   12864:	mov	r4, r0
   12868:	add	r3, sp, #4
   1286c:	bl	123bc <main@@Base+0x390>
   12870:	cmp	r0, #0
   12874:	bne	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   12878:	ldr	r3, [sp, #4]
   1287c:	cmp	r3, #0
   12880:	beq	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   12884:	ldr	r6, [r4]
   12888:	ldr	r5, [r4, #4]
   1288c:	ldr	lr, [r6, r3]
   12890:	add	lr, r3, lr
   12894:	cmp	r3, lr
   12898:	movcs	r0, #16
   1289c:	bcs	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   128a0:	add	r2, lr, #4
   128a4:	cmp	r5, r2
   128a8:	bcc	128b4 <flatcc_verify_string_vector_field@@Base+0x58>
   128ac:	ands	r1, r2, #3
   128b0:	beq	1295c <flatcc_verify_string_vector_field@@Base+0x100>
   128b4:	add	r3, lr, #4
   128b8:	cmp	r5, r3
   128bc:	movcc	r0, #16
   128c0:	bcc	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   128c4:	tst	r3, #3
   128c8:	movne	r0, #16
   128cc:	bne	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   128d0:	ldr	r3, [r6, lr]
   128d4:	cmn	r3, #-1073741823	; 0xc0000001
   128d8:	movhi	r0, #25
   128dc:	bhi	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   128e0:	sub	r5, r5, #4
   128e4:	sub	lr, r5, lr
   128e8:	lsl	r3, r3, #2
   128ec:	cmp	lr, r3
   128f0:	movcc	r0, #26
   128f4:	b	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   128f8:	add	lr, r6, lr
   128fc:	ldrb	r3, [lr, r7]
   12900:	cmp	r3, #0
   12904:	movne	r0, #7
   12908:	bne	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   1290c:	add	r1, r1, #1
   12910:	add	r2, r2, #4
   12914:	cmp	r4, r1
   12918:	beq	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   1291c:	ldr	r3, [ip, #4]!
   12920:	add	r3, r2, r3
   12924:	cmp	r2, r3
   12928:	bcs	12948 <flatcc_verify_string_vector_field@@Base+0xec>
   1292c:	add	lr, r3, #4
   12930:	cmp	r5, lr
   12934:	bcc	12954 <flatcc_verify_string_vector_field@@Base+0xf8>
   12938:	tst	r3, #3
   1293c:	beq	12988 <flatcc_verify_string_vector_field@@Base+0x12c>
   12940:	mov	r0, #17
   12944:	b	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   12948:	mov	r0, #17
   1294c:	add	sp, sp, #8
   12950:	pop	{r4, r5, r6, r7, r8, pc}
   12954:	mov	r0, #17
   12958:	b	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   1295c:	add	ip, r6, lr
   12960:	ldr	r4, [r6, lr]
   12964:	cmn	r4, #-1073741823	; 0xc0000001
   12968:	bhi	128b4 <flatcc_verify_string_vector_field@@Base+0x58>
   1296c:	sub	r3, r5, #4
   12970:	sub	r3, r3, lr
   12974:	cmp	r3, r4, lsl #2
   12978:	bcc	128b4 <flatcc_verify_string_vector_field@@Base+0x58>
   1297c:	cmp	r4, #0
   12980:	bne	1291c <flatcc_verify_string_vector_field@@Base+0xc0>
   12984:	b	1294c <flatcc_verify_string_vector_field@@Base+0xf0>
   12988:	ldr	r7, [r6, r3]
   1298c:	sub	r3, r5, lr
   12990:	add	r8, r7, #1
   12994:	cmp	r3, r8
   12998:	bcs	128f8 <flatcc_verify_string_vector_field@@Base+0x9c>
   1299c:	mov	r0, #8
   129a0:	b	1294c <flatcc_verify_string_vector_field@@Base+0xf0>

000129a4 <flatcc_verify_table_field@@Base>:
   129a4:	push	{r4, r5, lr}
   129a8:	sub	sp, sp, #36	; 0x24
   129ac:	mov	r4, r0
   129b0:	mov	r5, r3
   129b4:	add	r3, sp, #28
   129b8:	bl	123bc <main@@Base+0x390>
   129bc:	cmp	r0, #0
   129c0:	bne	129d0 <flatcc_verify_table_field@@Base+0x2c>
   129c4:	ldr	r3, [sp, #28]
   129c8:	cmp	r3, #0
   129cc:	bne	129d8 <flatcc_verify_table_field@@Base+0x34>
   129d0:	add	sp, sp, #36	; 0x24
   129d4:	pop	{r4, r5, pc}
   129d8:	ldr	r0, [r4]
   129dc:	ldr	ip, [r4, #4]
   129e0:	ldr	r1, [r0, r3]
   129e4:	ldr	r2, [r4, #8]
   129e8:	sub	r2, r2, #1
   129ec:	str	r2, [sp, #12]
   129f0:	cmp	r2, #0
   129f4:	moveq	r0, #3
   129f8:	beq	129d0 <flatcc_verify_table_field@@Base+0x2c>
   129fc:	add	r2, r3, r1
   12a00:	cmp	r3, r2
   12a04:	movcs	r0, #15
   12a08:	bcs	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a0c:	add	r3, r2, #4
   12a10:	cmp	ip, r3
   12a14:	movcc	r0, #15
   12a18:	bcc	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a1c:	tst	r2, #3
   12a20:	movne	r0, #15
   12a24:	bne	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a28:	str	r2, [sp, #20]
   12a2c:	ldr	r3, [r0, r2]
   12a30:	subs	r3, r2, r3
   12a34:	movmi	r0, #29
   12a38:	bmi	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a3c:	tst	r3, #1
   12a40:	movne	r0, #29
   12a44:	bne	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a48:	add	r1, r3, #2
   12a4c:	cmp	ip, r1
   12a50:	movcc	r0, #27
   12a54:	bcc	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a58:	add	r4, r0, r3
   12a5c:	ldrh	lr, [r0, r3]
   12a60:	strh	lr, [sp, #26]
   12a64:	add	r3, lr, r3
   12a68:	cmp	ip, r3
   12a6c:	movcc	r0, #30
   12a70:	bcc	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a74:	tst	lr, #1
   12a78:	movne	r0, #30
   12a7c:	bne	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a80:	cmp	lr, #3
   12a84:	movls	r0, #28
   12a88:	bls	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12a8c:	ldrh	r3, [r0, r1]
   12a90:	strh	r3, [sp, #24]
   12a94:	sub	r2, ip, r2
   12a98:	cmp	r2, r3
   12a9c:	movcc	r0, #20
   12aa0:	bcc	129d0 <flatcc_verify_table_field@@Base+0x2c>
   12aa4:	str	r4, [sp, #16]
   12aa8:	str	r0, [sp, #4]
   12aac:	str	ip, [sp, #8]
   12ab0:	add	r0, sp, #4
   12ab4:	blx	r5
   12ab8:	b	129d0 <flatcc_verify_table_field@@Base+0x2c>

00012abc <flatcc_verify_table_vector_field@@Base>:
   12abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac0:	sub	sp, sp, #44	; 0x2c
   12ac4:	mov	r5, r0
   12ac8:	str	r3, [sp, #4]
   12acc:	add	r3, sp, #36	; 0x24
   12ad0:	bl	123bc <main@@Base+0x390>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12adc:	ldr	r3, [sp, #36]	; 0x24
   12ae0:	cmp	r3, #0
   12ae4:	bne	12af0 <flatcc_verify_table_vector_field@@Base+0x34>
   12ae8:	add	sp, sp, #44	; 0x2c
   12aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af0:	ldr	r4, [r5, #8]
   12af4:	cmp	r4, #0
   12af8:	movle	r0, #3
   12afc:	ble	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12b00:	ldr	fp, [r5]
   12b04:	ldr	r9, [r5, #4]
   12b08:	ldr	r2, [fp, r3]
   12b0c:	add	r2, r3, r2
   12b10:	cmp	r3, r2
   12b14:	movcs	r0, #16
   12b18:	bcs	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12b1c:	add	r6, r2, #4
   12b20:	cmp	r9, r6
   12b24:	bcc	12b30 <flatcc_verify_table_vector_field@@Base+0x74>
   12b28:	ands	r7, r6, #3
   12b2c:	beq	12ba0 <flatcc_verify_table_vector_field@@Base+0xe4>
   12b30:	add	r3, r2, #4
   12b34:	cmp	r9, r3
   12b38:	movcc	r0, #16
   12b3c:	bcc	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12b40:	tst	r3, #3
   12b44:	movne	r0, #16
   12b48:	bne	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12b4c:	ldr	r3, [fp, r2]
   12b50:	cmn	r3, #-1073741823	; 0xc0000001
   12b54:	movhi	r0, #25
   12b58:	bhi	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12b5c:	lsl	r3, r3, #2
   12b60:	sub	r1, r9, #4
   12b64:	sub	r2, r1, r2
   12b68:	cmp	r3, r2
   12b6c:	movhi	r0, #26
   12b70:	b	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12b74:	add	r3, r3, r6
   12b78:	cmp	r3, r6
   12b7c:	bls	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12b80:	add	r2, r3, #4
   12b84:	cmp	r9, r2
   12b88:	bcc	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12b8c:	tst	r3, #3
   12b90:	beq	12bd0 <flatcc_verify_table_vector_field@@Base+0x114>
   12b94:	ldr	r3, [r8]
   12b98:	str	r4, [sp, #20]
   12b9c:	b	12c88 <flatcc_verify_table_vector_field@@Base+0x1cc>
   12ba0:	ldr	sl, [fp, r2]
   12ba4:	cmn	sl, #-1073741823	; 0xc0000001
   12ba8:	bhi	12b30 <flatcc_verify_table_vector_field@@Base+0x74>
   12bac:	sub	r3, r9, #4
   12bb0:	sub	r3, r3, r2
   12bb4:	cmp	r3, sl, lsl #2
   12bb8:	bcc	12b30 <flatcc_verify_table_vector_field@@Base+0x74>
   12bbc:	cmp	sl, #0
   12bc0:	beq	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12bc4:	add	r5, fp, r6
   12bc8:	sub	r4, r4, #2
   12bcc:	b	12c60 <flatcc_verify_table_vector_field@@Base+0x1a4>
   12bd0:	str	r3, [sp, #28]
   12bd4:	ldr	r2, [fp, r3]
   12bd8:	subs	r2, r3, r2
   12bdc:	bmi	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12be0:	tst	r2, #1
   12be4:	bne	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12be8:	add	r1, r2, #2
   12bec:	cmp	r9, r1
   12bf0:	bcc	12c74 <flatcc_verify_table_vector_field@@Base+0x1b8>
   12bf4:	add	ip, fp, r2
   12bf8:	ldrh	r0, [fp, r2]
   12bfc:	strh	r0, [sp, #34]	; 0x22
   12c00:	add	r2, r0, r2
   12c04:	cmp	r9, r2
   12c08:	bcc	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12c0c:	tst	r0, #1
   12c10:	bne	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12c14:	cmp	r0, #3
   12c18:	bls	12c74 <flatcc_verify_table_vector_field@@Base+0x1b8>
   12c1c:	ldrh	r2, [fp, r1]
   12c20:	strh	r2, [sp, #32]
   12c24:	sub	r3, r9, r3
   12c28:	cmp	r3, r2
   12c2c:	bcc	12c74 <flatcc_verify_table_vector_field@@Base+0x1b8>
   12c30:	str	ip, [sp, #24]
   12c34:	str	fp, [sp, #12]
   12c38:	str	r9, [sp, #16]
   12c3c:	add	r0, sp, #12
   12c40:	ldr	r3, [sp, #4]
   12c44:	blx	r3
   12c48:	cmp	r0, #0
   12c4c:	bne	12b94 <flatcc_verify_table_vector_field@@Base+0xd8>
   12c50:	add	r7, r7, #1
   12c54:	add	r6, r6, #4
   12c58:	cmp	sl, r7
   12c5c:	beq	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12c60:	mov	r8, r5
   12c64:	ldr	r3, [r5], #4
   12c68:	str	r4, [sp, #20]
   12c6c:	cmp	r4, #0
   12c70:	bne	12b74 <flatcc_verify_table_vector_field@@Base+0xb8>
   12c74:	ldr	r3, [r8]
   12c78:	str	r4, [sp, #20]
   12c7c:	cmp	r4, #0
   12c80:	moveq	r0, #3
   12c84:	beq	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12c88:	add	r3, r6, r3
   12c8c:	cmp	r6, r3
   12c90:	movcs	r0, #15
   12c94:	bcs	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12c98:	add	r2, r3, #4
   12c9c:	cmp	r9, r2
   12ca0:	movcc	r0, #15
   12ca4:	bcc	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12ca8:	tst	r3, #3
   12cac:	movne	r0, #15
   12cb0:	bne	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12cb4:	str	r3, [sp, #28]
   12cb8:	ldr	r2, [fp, r3]
   12cbc:	subs	r2, r3, r2
   12cc0:	movmi	r0, #29
   12cc4:	bmi	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12cc8:	tst	r2, #1
   12ccc:	movne	r0, #29
   12cd0:	bne	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12cd4:	add	r0, r2, #2
   12cd8:	cmp	r9, r0
   12cdc:	movcc	r0, #27
   12ce0:	bcc	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12ce4:	add	ip, fp, r2
   12ce8:	ldrh	r1, [fp, r2]
   12cec:	strh	r1, [sp, #34]	; 0x22
   12cf0:	add	r2, r1, r2
   12cf4:	cmp	r9, r2
   12cf8:	movcc	r0, #30
   12cfc:	bcc	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d00:	tst	r1, #1
   12d04:	movne	r0, #30
   12d08:	bne	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d0c:	cmp	r1, #3
   12d10:	movls	r0, #28
   12d14:	bls	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d18:	ldrh	r2, [fp, r0]
   12d1c:	strh	r2, [sp, #32]
   12d20:	sub	r3, r9, r3
   12d24:	cmp	r3, r2
   12d28:	movcc	r0, #20
   12d2c:	bcc	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>
   12d30:	str	ip, [sp, #24]
   12d34:	str	fp, [sp, #12]
   12d38:	str	r9, [sp, #16]
   12d3c:	add	r0, sp, #12
   12d40:	ldr	r3, [sp, #4]
   12d44:	blx	r3
   12d48:	b	12ae8 <flatcc_verify_table_vector_field@@Base+0x2c>

00012d4c <flatcc_verify_union_table@@Base>:
   12d4c:	push	{r4, r5, lr}
   12d50:	sub	sp, sp, #28
   12d54:	ldr	r4, [r0]
   12d58:	ldr	lr, [r0, #4]
   12d5c:	ldr	ip, [r0, #16]
   12d60:	ldr	r2, [r0, #20]
   12d64:	ldr	r3, [r0, #8]
   12d68:	sub	r3, r3, #1
   12d6c:	str	r3, [sp, #8]
   12d70:	cmp	r3, #0
   12d74:	moveq	r0, #3
   12d78:	bne	12d84 <flatcc_verify_union_table@@Base+0x38>
   12d7c:	add	sp, sp, #28
   12d80:	pop	{r4, r5, pc}
   12d84:	add	r3, ip, r2
   12d88:	cmp	ip, r3
   12d8c:	movcs	r0, #15
   12d90:	bcs	12d7c <flatcc_verify_union_table@@Base+0x30>
   12d94:	add	r2, r3, #4
   12d98:	cmp	lr, r2
   12d9c:	movcc	r0, #15
   12da0:	bcc	12d7c <flatcc_verify_union_table@@Base+0x30>
   12da4:	tst	r3, #3
   12da8:	movne	r0, #15
   12dac:	bne	12d7c <flatcc_verify_union_table@@Base+0x30>
   12db0:	str	r3, [sp, #16]
   12db4:	ldr	r2, [r4, r3]
   12db8:	subs	r2, r3, r2
   12dbc:	movmi	r0, #29
   12dc0:	bmi	12d7c <flatcc_verify_union_table@@Base+0x30>
   12dc4:	tst	r2, #1
   12dc8:	movne	r0, #29
   12dcc:	bne	12d7c <flatcc_verify_union_table@@Base+0x30>
   12dd0:	add	r0, r2, #2
   12dd4:	cmp	lr, r0
   12dd8:	movcc	r0, #27
   12ddc:	bcc	12d7c <flatcc_verify_union_table@@Base+0x30>
   12de0:	add	r5, r4, r2
   12de4:	ldrh	ip, [r4, r2]
   12de8:	strh	ip, [sp, #22]
   12dec:	add	r2, ip, r2
   12df0:	cmp	lr, r2
   12df4:	movcc	r0, #30
   12df8:	bcc	12d7c <flatcc_verify_union_table@@Base+0x30>
   12dfc:	tst	ip, #1
   12e00:	movne	r0, #30
   12e04:	bne	12d7c <flatcc_verify_union_table@@Base+0x30>
   12e08:	cmp	ip, #3
   12e0c:	movls	r0, #28
   12e10:	bls	12d7c <flatcc_verify_union_table@@Base+0x30>
   12e14:	ldrh	r2, [r4, r0]
   12e18:	strh	r2, [sp, #20]
   12e1c:	sub	r3, lr, r3
   12e20:	cmp	r3, r2
   12e24:	movcc	r0, #20
   12e28:	bcc	12d7c <flatcc_verify_union_table@@Base+0x30>
   12e2c:	str	r5, [sp, #12]
   12e30:	str	r4, [sp]
   12e34:	str	lr, [sp, #4]
   12e38:	mov	r0, sp
   12e3c:	blx	r1
   12e40:	b	12d7c <flatcc_verify_union_table@@Base+0x30>

00012e44 <flatcc_verify_union_struct@@Base>:
   12e44:	push	{lr}		; (str lr, [sp, #-4]!)
   12e48:	ldr	lr, [r0, #4]
   12e4c:	ldr	ip, [r0, #16]
   12e50:	ldr	r3, [r0, #20]
   12e54:	cmp	r3, #0
   12e58:	bne	12e64 <flatcc_verify_union_struct@@Base+0x20>
   12e5c:	mov	r0, #18
   12e60:	pop	{pc}		; (ldr pc, [sp], #4)
   12e64:	add	r3, ip, r3
   12e68:	cmp	lr, r3
   12e6c:	bcs	12e78 <flatcc_verify_union_struct@@Base+0x34>
   12e70:	mov	r0, #18
   12e74:	pop	{pc}		; (ldr pc, [sp], #4)
   12e78:	adds	r1, r1, r3
   12e7c:	bcc	12e88 <flatcc_verify_union_struct@@Base+0x44>
   12e80:	mov	r0, #10
   12e84:	pop	{pc}		; (ldr pc, [sp], #4)
   12e88:	cmp	lr, r1
   12e8c:	bcs	12e98 <flatcc_verify_union_struct@@Base+0x54>
   12e90:	mov	r0, #9
   12e94:	pop	{pc}		; (ldr pc, [sp], #4)
   12e98:	sub	r0, r2, #1
   12e9c:	and	r0, r0, r3
   12ea0:	cmp	r0, #0
   12ea4:	movne	r0, #11
   12ea8:	moveq	r0, #0
   12eac:	pop	{pc}		; (ldr pc, [sp], #4)

00012eb0 <flatcc_verify_union_string@@Base>:
   12eb0:	ldr	r2, [r0, #16]
   12eb4:	ldr	r3, [r0, #20]
   12eb8:	add	r3, r2, r3
   12ebc:	cmp	r2, r3
   12ec0:	bcs	12efc <flatcc_verify_union_string@@Base+0x4c>
   12ec4:	ldr	r2, [r0, #4]
   12ec8:	add	r1, r3, #4
   12ecc:	cmp	r2, r1
   12ed0:	bcc	12f04 <flatcc_verify_union_string@@Base+0x54>
   12ed4:	tst	r3, #3
   12ed8:	beq	12f0c <flatcc_verify_union_string@@Base+0x5c>
   12edc:	mov	r0, #17
   12ee0:	bx	lr
   12ee4:	add	r1, r0, r1
   12ee8:	ldrb	r0, [r1, r3]
   12eec:	cmp	r0, #0
   12ef0:	movne	r0, #7
   12ef4:	moveq	r0, #0
   12ef8:	bx	lr
   12efc:	mov	r0, #17
   12f00:	bx	lr
   12f04:	mov	r0, #17
   12f08:	bx	lr
   12f0c:	ldr	r0, [r0]
   12f10:	ldr	r3, [r0, r3]
   12f14:	sub	r2, r2, r1
   12f18:	add	ip, r3, #1
   12f1c:	cmp	r2, ip
   12f20:	bcs	12ee4 <flatcc_verify_union_string@@Base+0x34>
   12f24:	mov	r0, #8
   12f28:	bx	lr

00012f2c <flatcc_verify_buffer_header@@Base>:
   12f2c:	tst	r0, #3
   12f30:	beq	12f3c <flatcc_verify_buffer_header@@Base+0x10>
   12f34:	mov	r0, #5
   12f38:	bx	lr
   12f3c:	cmn	r1, #9
   12f40:	bls	12f4c <flatcc_verify_buffer_header@@Base+0x20>
   12f44:	mov	r0, #6
   12f48:	bx	lr
   12f4c:	cmp	r1, #7
   12f50:	bls	12fac <flatcc_verify_buffer_header@@Base+0x80>
   12f54:	cmp	r2, #0
   12f58:	beq	12fb4 <flatcc_verify_buffer_header@@Base+0x88>
   12f5c:	push	{r4, lr}
   12f60:	sub	sp, sp, #8
   12f64:	mov	r1, r2
   12f68:	mov	r4, r0
   12f6c:	add	r0, sp, #8
   12f70:	mov	r3, #0
   12f74:	str	r3, [r0, #-4]!
   12f78:	mov	r2, #4
   12f7c:	bl	10da0 <strncpy@plt>
   12f80:	ldr	r3, [sp, #4]
   12f84:	ldr	r0, [r4, #4]
   12f88:	cmp	r3, #0
   12f8c:	cmpne	r0, r3
   12f90:	moveq	r3, #1
   12f94:	movne	r3, #0
   12f98:	cmp	r3, #0
   12f9c:	moveq	r0, #2
   12fa0:	movne	r0, #0
   12fa4:	add	sp, sp, #8
   12fa8:	pop	{r4, pc}
   12fac:	mov	r0, #1
   12fb0:	bx	lr
   12fb4:	mov	r0, #0
   12fb8:	bx	lr

00012fbc <flatcc_verify_typed_buffer_header@@Base>:
   12fbc:	tst	r0, #3
   12fc0:	beq	12fcc <flatcc_verify_typed_buffer_header@@Base+0x10>
   12fc4:	mov	r0, #5
   12fc8:	bx	lr
   12fcc:	cmn	r1, #9
   12fd0:	bls	12fdc <flatcc_verify_typed_buffer_header@@Base+0x20>
   12fd4:	mov	r0, #6
   12fd8:	bx	lr
   12fdc:	cmp	r1, #7
   12fe0:	bls	13000 <flatcc_verify_typed_buffer_header@@Base+0x44>
   12fe4:	cmp	r2, #0
   12fe8:	beq	13008 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   12fec:	ldr	r0, [r0, #4]
   12ff0:	cmp	r2, r0
   12ff4:	movne	r0, #2
   12ff8:	moveq	r0, #0
   12ffc:	bx	lr
   13000:	mov	r0, #1
   13004:	bx	lr
   13008:	mov	r0, #0
   1300c:	bx	lr

00013010 <flatcc_verify_struct_as_root@@Base>:
   13010:	push	{r4, r5, r6, r7, r8, lr}
   13014:	mov	r5, r0
   13018:	mov	r4, r1
   1301c:	mov	r7, r2
   13020:	mov	r6, r3
   13024:	bl	12f2c <flatcc_verify_buffer_header@@Base>
   13028:	cmp	r0, #0
   1302c:	bne	13054 <flatcc_verify_struct_as_root@@Base+0x44>
   13030:	ldr	r2, [r5]
   13034:	clz	r3, r2
   13038:	lsr	r3, r3, #5
   1303c:	cmp	r4, r2
   13040:	orrcc	r3, r3, #1
   13044:	cmp	r3, #0
   13048:	beq	13068 <flatcc_verify_struct_as_root@@Base+0x58>
   1304c:	mov	r0, #18
   13050:	pop	{r4, r5, r6, r7, r8, pc}
   13054:	mov	r2, r7
   13058:	mov	r1, r4
   1305c:	mov	r0, r5
   13060:	bl	12f2c <flatcc_verify_buffer_header@@Base>
   13064:	pop	{r4, r5, r6, r7, r8, pc}
   13068:	adds	r6, r6, r2
   1306c:	bcc	13078 <flatcc_verify_struct_as_root@@Base+0x68>
   13070:	mov	r0, #10
   13074:	pop	{r4, r5, r6, r7, r8, pc}
   13078:	cmp	r4, r6
   1307c:	bcs	13088 <flatcc_verify_struct_as_root@@Base+0x78>
   13080:	mov	r0, #9
   13084:	pop	{r4, r5, r6, r7, r8, pc}
   13088:	ldrh	r3, [sp, #24]
   1308c:	sub	r3, r3, #1
   13090:	and	r2, r2, r3
   13094:	cmp	r2, #0
   13098:	movne	r0, #11
   1309c:	pop	{r4, r5, r6, r7, r8, pc}

000130a0 <flatcc_verify_struct_as_typed_root@@Base>:
   130a0:	push	{r4, r5, r6, lr}
   130a4:	mov	r5, r0
   130a8:	mov	r4, r1
   130ac:	mov	r6, r3
   130b0:	bl	12fbc <flatcc_verify_typed_buffer_header@@Base>
   130b4:	cmp	r0, #0
   130b8:	popne	{r4, r5, r6, pc}
   130bc:	ldr	r2, [r5]
   130c0:	clz	r3, r2
   130c4:	lsr	r3, r3, #5
   130c8:	cmp	r4, r2
   130cc:	orrcc	r3, r3, #1
   130d0:	cmp	r3, #0
   130d4:	beq	130e0 <flatcc_verify_struct_as_typed_root@@Base+0x40>
   130d8:	mov	r0, #18
   130dc:	pop	{r4, r5, r6, pc}
   130e0:	adds	r6, r6, r2
   130e4:	bcc	130f0 <flatcc_verify_struct_as_typed_root@@Base+0x50>
   130e8:	mov	r0, #10
   130ec:	pop	{r4, r5, r6, pc}
   130f0:	cmp	r4, r6
   130f4:	bcs	13100 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   130f8:	mov	r0, #9
   130fc:	pop	{r4, r5, r6, pc}
   13100:	ldrh	r3, [sp, #16]
   13104:	sub	r3, r3, #1
   13108:	and	r2, r2, r3
   1310c:	cmp	r2, #0
   13110:	movne	r0, #11
   13114:	pop	{r4, r5, r6, pc}

00013118 <flatcc_verify_table_as_root@@Base>:
   13118:	push	{r4, r5, r6, r7, lr}
   1311c:	sub	sp, sp, #28
   13120:	mov	r4, r0
   13124:	mov	r5, r1
   13128:	mov	r6, r2
   1312c:	mov	r7, r3
   13130:	bl	12f2c <flatcc_verify_buffer_header@@Base>
   13134:	cmp	r0, #0
   13138:	bne	13204 <flatcc_verify_table_as_root@@Base+0xec>
   1313c:	ldr	r3, [r4]
   13140:	mov	r2, #99	; 0x63
   13144:	str	r2, [sp, #8]
   13148:	cmp	r3, #0
   1314c:	moveq	r0, #15
   13150:	beq	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   13154:	add	r2, r3, #4
   13158:	cmp	r5, r2
   1315c:	movcc	r0, #15
   13160:	bcc	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   13164:	tst	r3, #3
   13168:	movne	r0, #15
   1316c:	bne	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   13170:	str	r3, [sp, #16]
   13174:	ldr	r2, [r4, r3]
   13178:	subs	r2, r3, r2
   1317c:	movmi	r0, #29
   13180:	bmi	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   13184:	tst	r2, #1
   13188:	movne	r0, #29
   1318c:	bne	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   13190:	add	r1, r2, #2
   13194:	cmp	r5, r1
   13198:	movcc	r0, #27
   1319c:	bcc	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   131a0:	add	ip, r4, r2
   131a4:	ldrh	r0, [r4, r2]
   131a8:	strh	r0, [sp, #22]
   131ac:	add	r2, r0, r2
   131b0:	cmp	r5, r2
   131b4:	movcc	r0, #30
   131b8:	bcc	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   131bc:	tst	r0, #1
   131c0:	movne	r0, #30
   131c4:	bne	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   131c8:	cmp	r0, #3
   131cc:	movls	r0, #28
   131d0:	bls	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   131d4:	ldrh	r2, [r4, r1]
   131d8:	strh	r2, [sp, #20]
   131dc:	sub	r3, r5, r3
   131e0:	cmp	r3, r2
   131e4:	movcc	r0, #20
   131e8:	bcc	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   131ec:	str	ip, [sp, #12]
   131f0:	str	r4, [sp]
   131f4:	str	r5, [sp, #4]
   131f8:	mov	r0, sp
   131fc:	blx	r7
   13200:	b	13214 <flatcc_verify_table_as_root@@Base+0xfc>
   13204:	mov	r2, r6
   13208:	mov	r1, r5
   1320c:	mov	r0, r4
   13210:	bl	12f2c <flatcc_verify_buffer_header@@Base>
   13214:	add	sp, sp, #28
   13218:	pop	{r4, r5, r6, r7, pc}

0001321c <flatcc_verify_table_as_typed_root@@Base>:
   1321c:	push	{r4, r5, r6, lr}
   13220:	sub	sp, sp, #24
   13224:	mov	r4, r0
   13228:	mov	r5, r1
   1322c:	mov	r6, r3
   13230:	bl	12fbc <flatcc_verify_typed_buffer_header@@Base>
   13234:	cmp	r0, #0
   13238:	beq	13244 <flatcc_verify_table_as_typed_root@@Base+0x28>
   1323c:	add	sp, sp, #24
   13240:	pop	{r4, r5, r6, pc}
   13244:	ldr	r3, [r4]
   13248:	mov	r2, #99	; 0x63
   1324c:	str	r2, [sp, #8]
   13250:	cmp	r3, #0
   13254:	moveq	r0, #15
   13258:	beq	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   1325c:	add	r2, r3, #4
   13260:	cmp	r5, r2
   13264:	movcc	r0, #15
   13268:	bcc	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   1326c:	tst	r3, #3
   13270:	movne	r0, #15
   13274:	bne	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   13278:	str	r3, [sp, #16]
   1327c:	ldr	r2, [r4, r3]
   13280:	subs	r2, r3, r2
   13284:	movmi	r0, #29
   13288:	bmi	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   1328c:	tst	r2, #1
   13290:	movne	r0, #29
   13294:	bne	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   13298:	add	r1, r2, #2
   1329c:	cmp	r5, r1
   132a0:	movcc	r0, #27
   132a4:	bcc	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   132a8:	add	ip, r4, r2
   132ac:	ldrh	r0, [r4, r2]
   132b0:	strh	r0, [sp, #22]
   132b4:	add	r2, r0, r2
   132b8:	cmp	r5, r2
   132bc:	movcc	r0, #30
   132c0:	bcc	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   132c4:	tst	r0, #1
   132c8:	movne	r0, #30
   132cc:	bne	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   132d0:	cmp	r0, #3
   132d4:	movls	r0, #28
   132d8:	bls	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   132dc:	ldrh	r2, [r4, r1]
   132e0:	strh	r2, [sp, #20]
   132e4:	sub	r3, r5, r3
   132e8:	cmp	r3, r2
   132ec:	movcc	r0, #20
   132f0:	bcc	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>
   132f4:	str	ip, [sp, #12]
   132f8:	str	r4, [sp]
   132fc:	str	r5, [sp, #4]
   13300:	mov	r0, sp
   13304:	blx	r6
   13308:	b	1323c <flatcc_verify_table_as_typed_root@@Base+0x20>

0001330c <flatcc_verify_struct_as_nested_root@@Base>:
   1330c:	push	{r4, r5, r6, r7, r8, lr}
   13310:	sub	sp, sp, #8
   13314:	mov	r5, r0
   13318:	mov	r4, r1
   1331c:	mov	r8, r2
   13320:	mov	r7, r3
   13324:	ldrh	r6, [sp, #36]	; 0x24
   13328:	mvn	r3, #0
   1332c:	str	r3, [sp, #4]
   13330:	mov	r3, #1
   13334:	str	r3, [sp]
   13338:	mov	r3, r6
   1333c:	bl	127ac <flatcc_verify_vector_field@@Base>
   13340:	cmp	r0, #0
   13344:	bne	133ac <flatcc_verify_struct_as_nested_root@@Base+0xa0>
   13348:	add	r4, r4, #2
   1334c:	lsl	r4, r4, #1
   13350:	uxth	r4, r4
   13354:	ldrh	r3, [r5, #22]
   13358:	cmp	r3, r4
   1335c:	bls	133a4 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   13360:	ldr	r3, [r5, #12]
   13364:	ldrh	r3, [r3, r4]
   13368:	cmp	r3, #0
   1336c:	beq	133a4 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   13370:	ldr	r2, [r5, #16]
   13374:	add	r3, r3, r2
   13378:	ldr	r2, [r5]
   1337c:	adds	r1, r2, r3
   13380:	beq	133a4 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   13384:	ldr	r3, [r2, r3]
   13388:	add	r0, r1, r3
   1338c:	ldr	r1, [r1, r3]
   13390:	str	r6, [sp]
   13394:	ldr	r3, [sp, #32]
   13398:	mov	r2, r7
   1339c:	add	r0, r0, #4
   133a0:	bl	13010 <flatcc_verify_struct_as_root@@Base>
   133a4:	add	sp, sp, #8
   133a8:	pop	{r4, r5, r6, r7, r8, pc}
   133ac:	mvn	r3, #0
   133b0:	str	r3, [sp, #4]
   133b4:	mov	r3, #1
   133b8:	str	r3, [sp]
   133bc:	mov	r3, r6
   133c0:	mov	r2, r8
   133c4:	mov	r1, r4
   133c8:	mov	r0, r5
   133cc:	bl	127ac <flatcc_verify_vector_field@@Base>
   133d0:	b	133a4 <flatcc_verify_struct_as_nested_root@@Base+0x98>

000133d4 <flatcc_verify_table_as_nested_root@@Base>:
   133d4:	push	{r4, r5, r6, r7, r8, lr}
   133d8:	sub	sp, sp, #32
   133dc:	mov	r5, r0
   133e0:	mov	r4, r1
   133e4:	mov	r8, r2
   133e8:	mov	r6, r3
   133ec:	ldrh	r7, [sp, #56]	; 0x38
   133f0:	mvn	r3, #0
   133f4:	str	r3, [sp, #4]
   133f8:	mov	r3, #1
   133fc:	str	r3, [sp]
   13400:	mov	r3, r7
   13404:	bl	127ac <flatcc_verify_vector_field@@Base>
   13408:	cmp	r0, #0
   1340c:	bne	13498 <flatcc_verify_table_as_nested_root@@Base+0xc4>
   13410:	add	r4, r4, #2
   13414:	lsl	r4, r4, #1
   13418:	uxth	r4, r4
   1341c:	ldrh	r3, [r5, #22]
   13420:	cmp	r3, r4
   13424:	bls	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13428:	ldr	r3, [r5, #12]
   1342c:	ldrh	r3, [r3, r4]
   13430:	cmp	r3, #0
   13434:	beq	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13438:	ldr	r2, [r5, #16]
   1343c:	add	r3, r3, r2
   13440:	ldr	r2, [r5]
   13444:	adds	r1, r2, r3
   13448:	beq	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1344c:	ldr	r3, [r2, r3]
   13450:	add	r4, r1, r3
   13454:	ldr	r7, [r1, r3]
   13458:	add	r8, r4, #4
   1345c:	mov	r2, r6
   13460:	mov	r1, r7
   13464:	mov	r0, r8
   13468:	bl	12f2c <flatcc_verify_buffer_header@@Base>
   1346c:	cmp	r0, #0
   13470:	bne	134c0 <flatcc_verify_table_as_nested_root@@Base+0xec>
   13474:	ldr	r2, [r4, #4]
   13478:	ldr	r3, [r5, #8]
   1347c:	sub	r3, r3, #1
   13480:	str	r3, [sp, #16]
   13484:	cmp	r3, #0
   13488:	moveq	r0, #3
   1348c:	bne	134d4 <flatcc_verify_table_as_nested_root@@Base+0x100>
   13490:	add	sp, sp, #32
   13494:	pop	{r4, r5, r6, r7, r8, pc}
   13498:	mvn	r3, #0
   1349c:	str	r3, [sp, #4]
   134a0:	mov	r3, #1
   134a4:	str	r3, [sp]
   134a8:	mov	r3, r7
   134ac:	mov	r2, r8
   134b0:	mov	r1, r4
   134b4:	mov	r0, r5
   134b8:	bl	127ac <flatcc_verify_vector_field@@Base>
   134bc:	b	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   134c0:	mov	r2, r6
   134c4:	mov	r1, r7
   134c8:	mov	r0, r8
   134cc:	bl	12f2c <flatcc_verify_buffer_header@@Base>
   134d0:	b	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   134d4:	cmp	r2, #0
   134d8:	moveq	r0, #15
   134dc:	beq	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   134e0:	add	r3, r2, #4
   134e4:	cmp	r7, r3
   134e8:	movcc	r0, #15
   134ec:	bcc	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   134f0:	tst	r2, #3
   134f4:	movne	r0, #15
   134f8:	bne	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   134fc:	str	r2, [sp, #24]
   13500:	ldr	r3, [r8, r2]
   13504:	subs	r3, r2, r3
   13508:	movmi	r0, #29
   1350c:	bmi	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13510:	tst	r3, #1
   13514:	movne	r0, #29
   13518:	bne	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1351c:	add	r1, r3, #2
   13520:	cmp	r7, r1
   13524:	movcc	r0, #27
   13528:	bcc	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1352c:	add	ip, r8, r3
   13530:	ldrh	r0, [r8, r3]
   13534:	strh	r0, [sp, #30]
   13538:	add	r3, r0, r3
   1353c:	cmp	r7, r3
   13540:	movcc	r0, #30
   13544:	bcc	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13548:	tst	r0, #1
   1354c:	movne	r0, #30
   13550:	bne	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13554:	cmp	r0, #3
   13558:	movls	r0, #28
   1355c:	bls	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13560:	ldrh	r3, [r8, r1]
   13564:	strh	r3, [sp, #28]
   13568:	sub	r2, r7, r2
   1356c:	cmp	r2, r3
   13570:	movcc	r0, #20
   13574:	bcc	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   13578:	str	ip, [sp, #20]
   1357c:	str	r8, [sp, #8]
   13580:	str	r7, [sp, #12]
   13584:	add	r0, sp, #8
   13588:	ldr	r3, [sp, #60]	; 0x3c
   1358c:	blx	r3
   13590:	b	13490 <flatcc_verify_table_as_nested_root@@Base+0xbc>

00013594 <flatcc_verify_union_field@@Base>:
   13594:	push	{r4, r5, r6, r7, lr}
   13598:	sub	sp, sp, #36	; 0x24
   1359c:	sub	ip, r1, #1
   135a0:	uxth	ip, ip
   135a4:	add	ip, ip, #2
   135a8:	lsl	ip, ip, #1
   135ac:	uxth	ip, ip
   135b0:	ldrh	lr, [r0, #22]
   135b4:	cmp	lr, ip
   135b8:	bls	135e8 <flatcc_verify_union_field@@Base+0x54>
   135bc:	ldr	r6, [r0, #12]
   135c0:	ldrh	ip, [r6, ip]
   135c4:	cmp	ip, #0
   135c8:	beq	135e8 <flatcc_verify_union_field@@Base+0x54>
   135cc:	add	r4, ip, #1
   135d0:	ldrh	r5, [r0, #20]
   135d4:	cmp	r4, r5
   135d8:	movhi	r0, #13
   135dc:	bls	13654 <flatcc_verify_union_field@@Base+0xc0>
   135e0:	add	sp, sp, #36	; 0x24
   135e4:	pop	{r4, r5, r6, r7, pc}
   135e8:	add	r1, r1, #2
   135ec:	lsl	r1, r1, #1
   135f0:	uxth	r1, r1
   135f4:	cmp	lr, r1
   135f8:	bls	13610 <flatcc_verify_union_field@@Base+0x7c>
   135fc:	ldr	r3, [r0, #12]
   13600:	ldrh	r3, [r3, r1]
   13604:	cmp	r3, #0
   13608:	movne	r0, #23
   1360c:	bne	135e0 <flatcc_verify_union_field@@Base+0x4c>
   13610:	cmp	r2, #0
   13614:	moveq	r0, r2
   13618:	movne	r0, #21
   1361c:	b	135e0 <flatcc_verify_union_field@@Base+0x4c>
   13620:	ldr	lr, [r0, #16]
   13624:	add	ip, ip, lr
   13628:	add	r5, r7, ip
   1362c:	ldrb	lr, [r7, ip]
   13630:	ldrh	r4, [r6, r4]
   13634:	adds	ip, lr, #0
   13638:	movne	ip, #1
   1363c:	cmp	r4, #0
   13640:	orreq	ip, ip, #1
   13644:	cmp	ip, #0
   13648:	moveq	r0, #24
   1364c:	beq	135e0 <flatcc_verify_union_field@@Base+0x4c>
   13650:	b	1367c <flatcc_verify_union_field@@Base+0xe8>
   13654:	ldr	r7, [r0]
   13658:	add	r4, r1, #2
   1365c:	lsl	r4, r4, #1
   13660:	uxth	r4, r4
   13664:	cmp	lr, r4
   13668:	bhi	13620 <flatcc_verify_union_field@@Base+0x8c>
   1366c:	ldr	lr, [r0, #16]
   13670:	add	ip, ip, lr
   13674:	add	r5, r7, ip
   13678:	ldrb	lr, [r7, ip]
   1367c:	cmp	lr, #0
   13680:	moveq	r0, #0
   13684:	beq	135e0 <flatcc_verify_union_field@@Base+0x4c>
   13688:	mov	r6, r3
   1368c:	mov	r4, r0
   13690:	add	r3, sp, #28
   13694:	bl	123bc <main@@Base+0x390>
   13698:	cmp	r0, #0
   1369c:	bne	135e0 <flatcc_verify_union_field@@Base+0x4c>
   136a0:	ldr	r3, [sp, #28]
   136a4:	cmp	r3, #0
   136a8:	beq	135e0 <flatcc_verify_union_field@@Base+0x4c>
   136ac:	ldr	r2, [r4]
   136b0:	str	r2, [sp, #4]
   136b4:	ldr	r1, [r4, #4]
   136b8:	str	r1, [sp, #8]
   136bc:	ldr	r1, [r4, #8]
   136c0:	str	r1, [sp, #12]
   136c4:	str	r3, [sp, #20]
   136c8:	ldr	r3, [r2, r3]
   136cc:	str	r3, [sp, #24]
   136d0:	ldrb	r3, [r5]
   136d4:	strb	r3, [sp, #16]
   136d8:	add	r0, sp, #4
   136dc:	blx	r6
   136e0:	b	135e0 <flatcc_verify_union_field@@Base+0x4c>

000136e4 <flatcc_verify_union_vector_field@@Base>:
   136e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136e8:	sub	sp, sp, #40	; 0x28
   136ec:	sub	r4, r1, #1
   136f0:	uxth	r4, r4
   136f4:	add	ip, r4, #2
   136f8:	lsl	ip, ip, #1
   136fc:	uxth	r6, ip
   13700:	ldrh	lr, [r0, #22]
   13704:	cmp	lr, r6
   13708:	bls	13834 <flatcc_verify_union_vector_field@@Base+0x150>
   1370c:	ldr	ip, [r0, #12]
   13710:	ldrh	ip, [ip, r6]
   13714:	cmp	ip, #0
   13718:	beq	13834 <flatcc_verify_union_vector_field@@Base+0x150>
   1371c:	mov	r8, r3
   13720:	mov	r9, r2
   13724:	mov	sl, r1
   13728:	mov	r5, r0
   1372c:	mvn	r3, #0
   13730:	str	r3, [sp, #4]
   13734:	mov	r3, #1
   13738:	str	r3, [sp]
   1373c:	mov	r1, r4
   13740:	bl	127ac <flatcc_verify_vector_field@@Base>
   13744:	subs	r7, r0, #0
   13748:	bne	13878 <flatcc_verify_union_vector_field@@Base+0x194>
   1374c:	ldrh	r3, [r5, #22]
   13750:	cmp	r3, r6
   13754:	bls	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13758:	ldr	r3, [r5, #12]
   1375c:	ldrh	r3, [r3, r6]
   13760:	cmp	r3, #0
   13764:	beq	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13768:	ldr	r2, [r5, #16]
   1376c:	add	r3, r3, r2
   13770:	ldr	r2, [r5]
   13774:	adds	r1, r2, r3
   13778:	beq	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   1377c:	ldr	r3, [r2, r3]
   13780:	add	r4, r1, r3
   13784:	ldr	r6, [r1, r3]
   13788:	add	r3, sp, #36	; 0x24
   1378c:	mov	r2, r9
   13790:	mov	r1, sl
   13794:	mov	r0, r5
   13798:	bl	123bc <main@@Base+0x390>
   1379c:	subs	r7, r0, #0
   137a0:	bne	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   137a4:	ldr	r3, [sp, #36]	; 0x24
   137a8:	cmp	r3, #0
   137ac:	beq	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   137b0:	ldr	r1, [r5, #8]
   137b4:	cmp	r1, #0
   137b8:	movle	r7, #3
   137bc:	ble	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   137c0:	ldr	r0, [r5]
   137c4:	ldr	ip, [r5, #4]
   137c8:	ldr	r2, [r0, r3]
   137cc:	add	r2, r3, r2
   137d0:	cmp	r3, r2
   137d4:	movcs	r7, #16
   137d8:	bcs	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   137dc:	add	r5, r2, #4
   137e0:	cmp	ip, r5
   137e4:	bcc	137f0 <flatcc_verify_union_vector_field@@Base+0x10c>
   137e8:	tst	r5, #3
   137ec:	beq	13910 <flatcc_verify_union_vector_field@@Base+0x22c>
   137f0:	add	r3, r2, #4
   137f4:	cmp	ip, r3
   137f8:	movcc	r7, #16
   137fc:	bcc	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13800:	tst	r3, #3
   13804:	movne	r7, #16
   13808:	bne	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   1380c:	ldr	r3, [r0, r2]
   13810:	cmn	r3, #-1073741823	; 0xc0000001
   13814:	movhi	r7, #25
   13818:	bhi	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   1381c:	sub	ip, ip, #4
   13820:	sub	r2, ip, r2
   13824:	lsl	r3, r3, #2
   13828:	cmp	r2, r3
   1382c:	movcc	r7, #26
   13830:	b	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13834:	add	ip, r1, #2
   13838:	lsl	ip, ip, #1
   1383c:	uxth	ip, ip
   13840:	cmp	lr, ip
   13844:	ldrhi	lr, [r0, #12]
   13848:	ldrhhi	ip, [lr, ip]
   1384c:	movls	ip, #0
   13850:	clz	ip, ip
   13854:	lsr	ip, ip, #5
   13858:	cmp	r2, #0
   1385c:	moveq	ip, #0
   13860:	cmp	ip, #0
   13864:	movne	r7, #22
   13868:	beq	1371c <flatcc_verify_union_vector_field@@Base+0x38>
   1386c:	mov	r0, r7
   13870:	add	sp, sp, #40	; 0x28
   13874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13878:	mvn	r3, #0
   1387c:	str	r3, [sp, #4]
   13880:	mov	r3, #1
   13884:	str	r3, [sp]
   13888:	mov	r2, r9
   1388c:	mov	r1, r4
   13890:	mov	r0, r5
   13894:	bl	127ac <flatcc_verify_vector_field@@Base>
   13898:	mov	r7, r0
   1389c:	b	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   138a0:	ldrb	r2, [r4]
   138a4:	cmp	r2, #0
   138a8:	beq	13908 <flatcc_verify_union_vector_field@@Base+0x224>
   138ac:	strb	r2, [sp, #24]
   138b0:	str	r5, [sp, #28]
   138b4:	str	r3, [sp, #32]
   138b8:	add	r0, sp, #12
   138bc:	blx	r8
   138c0:	cmp	r0, #0
   138c4:	bne	138f8 <flatcc_verify_union_vector_field@@Base+0x214>
   138c8:	add	r5, r5, #4
   138cc:	add	r4, r4, #1
   138d0:	cmp	r4, r9
   138d4:	beq	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   138d8:	ldr	r3, [r6, #4]!
   138dc:	cmp	r3, #0
   138e0:	bne	138a0 <flatcc_verify_union_vector_field@@Base+0x1bc>
   138e4:	ldrb	r3, [r4]
   138e8:	cmp	r3, #0
   138ec:	beq	138c8 <flatcc_verify_union_vector_field@@Base+0x1e4>
   138f0:	mov	r7, #32
   138f4:	b	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   138f8:	add	r0, sp, #12
   138fc:	blx	r8
   13900:	mov	r7, r0
   13904:	b	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13908:	mov	r7, #33	; 0x21
   1390c:	b	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13910:	add	r3, r0, r2
   13914:	ldr	lr, [r0, r2]
   13918:	cmn	lr, #-1073741823	; 0xc0000001
   1391c:	bhi	137f0 <flatcc_verify_union_vector_field@@Base+0x10c>
   13920:	sub	r9, ip, #4
   13924:	sub	r9, r9, r2
   13928:	cmp	r9, lr, lsl #2
   1392c:	bcc	137f0 <flatcc_verify_union_vector_field@@Base+0x10c>
   13930:	cmp	r6, lr
   13934:	movne	r7, #34	; 0x22
   13938:	bne	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   1393c:	str	r0, [sp, #12]
   13940:	str	ip, [sp, #16]
   13944:	sub	r1, r1, #1
   13948:	str	r1, [sp, #20]
   1394c:	cmp	lr, #0
   13950:	beq	1386c <flatcc_verify_union_vector_field@@Base+0x188>
   13954:	mov	r6, r3
   13958:	add	r4, r4, #4
   1395c:	add	r9, r4, lr
   13960:	b	138d8 <flatcc_verify_union_vector_field@@Base+0x1f4>

00013964 <__libc_csu_init@@Base>:
   13964:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13968:	mov	r7, r0
   1396c:	ldr	r6, [pc, #72]	; 139bc <__libc_csu_init@@Base+0x58>
   13970:	ldr	r5, [pc, #72]	; 139c0 <__libc_csu_init@@Base+0x5c>
   13974:	add	r6, pc, r6
   13978:	add	r5, pc, r5
   1397c:	sub	r6, r6, r5
   13980:	mov	r8, r1
   13984:	mov	r9, r2
   13988:	bl	10cc0 <strcmp@plt-0x20>
   1398c:	asrs	r6, r6, #2
   13990:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13994:	mov	r4, #0
   13998:	add	r4, r4, #1
   1399c:	ldr	r3, [r5], #4
   139a0:	mov	r2, r9
   139a4:	mov	r1, r8
   139a8:	mov	r0, r7
   139ac:	blx	r3
   139b0:	cmp	r6, r4
   139b4:	bne	13998 <__libc_csu_init@@Base+0x34>
   139b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139bc:	muleq	r1, r4, r5
   139c0:	andeq	r1, r1, ip, lsl #11

000139c4 <__libc_csu_fini@@Base>:
   139c4:	bx	lr

Disassembly of section .fini:

000139c8 <.fini>:
   139c8:	push	{r3, lr}
   139cc:	pop	{r3, pc}
