
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

00014e0c <.init>:
   14e0c:	push	{r3, lr}
   14e10:	bl	14f8c <_start@@Base+0x3c>
   14e14:	pop	{r3, pc}

Disassembly of section .plt:

00014e18 <raise@plt-0x14>:
   14e18:	push	{lr}		; (str lr, [sp, #-4]!)
   14e1c:	ldr	lr, [pc, #4]	; 14e28 <raise@plt-0x4>
   14e20:	add	lr, pc, lr
   14e24:	ldr	pc, [lr, #8]!
   14e28:	ldrdeq	r5, [r3], -r8

00014e2c <raise@plt>:
   14e2c:	add	ip, pc, #0, 12
   14e30:	add	ip, ip, #217088	; 0x35000
   14e34:	ldr	pc, [ip, #472]!	; 0x1d8

00014e38 <strcmp@plt>:
   14e38:	add	ip, pc, #0, 12
   14e3c:	add	ip, ip, #217088	; 0x35000
   14e40:	ldr	pc, [ip, #464]!	; 0x1d0

00014e44 <memmove@plt>:
   14e44:	add	ip, pc, #0, 12
   14e48:	add	ip, ip, #217088	; 0x35000
   14e4c:	ldr	pc, [ip, #456]!	; 0x1c8

00014e50 <free@plt>:
   14e50:	add	ip, pc, #0, 12
   14e54:	add	ip, ip, #217088	; 0x35000
   14e58:	ldr	pc, [ip, #448]!	; 0x1c0

00014e5c <memcpy@plt>:
   14e5c:	add	ip, pc, #0, 12
   14e60:	add	ip, ip, #217088	; 0x35000
   14e64:	ldr	pc, [ip, #440]!	; 0x1b8

00014e68 <__isinff@plt>:
   14e68:	add	ip, pc, #0, 12
   14e6c:	add	ip, ip, #217088	; 0x35000
   14e70:	ldr	pc, [ip, #432]!	; 0x1b0

00014e74 <__isinf@plt>:
   14e74:	add	ip, pc, #0, 12
   14e78:	add	ip, ip, #217088	; 0x35000
   14e7c:	ldr	pc, [ip, #424]!	; 0x1a8

00014e80 <realloc@plt>:
   14e80:	add	ip, pc, #0, 12
   14e84:	add	ip, ip, #217088	; 0x35000
   14e88:	ldr	pc, [ip, #416]!	; 0x1a0

00014e8c <fwrite@plt>:
   14e8c:	add	ip, pc, #0, 12
   14e90:	add	ip, ip, #217088	; 0x35000
   14e94:	ldr	pc, [ip, #408]!	; 0x198

00014e98 <malloc@plt>:
   14e98:	add	ip, pc, #0, 12
   14e9c:	add	ip, ip, #217088	; 0x35000
   14ea0:	ldr	pc, [ip, #400]!	; 0x190

00014ea4 <__libc_start_main@plt>:
   14ea4:	add	ip, pc, #0, 12
   14ea8:	add	ip, ip, #217088	; 0x35000
   14eac:	ldr	pc, [ip, #392]!	; 0x188

00014eb0 <__gmon_start__@plt>:
   14eb0:	add	ip, pc, #0, 12
   14eb4:	add	ip, ip, #217088	; 0x35000
   14eb8:	ldr	pc, [ip, #384]!	; 0x180

00014ebc <bcmp@plt>:
   14ebc:	add	ip, pc, #0, 12
   14ec0:	add	ip, ip, #217088	; 0x35000
   14ec4:	ldr	pc, [ip, #376]!	; 0x178

00014ec8 <strlen@plt>:
   14ec8:	add	ip, pc, #0, 12
   14ecc:	add	ip, ip, #217088	; 0x35000
   14ed0:	ldr	pc, [ip, #368]!	; 0x170

00014ed4 <fprintf@plt>:
   14ed4:	add	ip, pc, #0, 12
   14ed8:	add	ip, ip, #217088	; 0x35000
   14edc:	ldr	pc, [ip, #360]!	; 0x168

00014ee0 <posix_memalign@plt>:
   14ee0:	add	ip, pc, #0, 12
   14ee4:	add	ip, ip, #217088	; 0x35000
   14ee8:	ldr	pc, [ip, #352]!	; 0x160

00014eec <memset@plt>:
   14eec:	add	ip, pc, #0, 12
   14ef0:	add	ip, ip, #217088	; 0x35000
   14ef4:	ldr	pc, [ip, #344]!	; 0x158

00014ef8 <strncpy@plt>:
   14ef8:	add	ip, pc, #0, 12
   14efc:	add	ip, ip, #217088	; 0x35000
   14f00:	ldr	pc, [ip, #336]!	; 0x150

00014f04 <strtod@plt>:
   14f04:	add	ip, pc, #0, 12
   14f08:	add	ip, ip, #217088	; 0x35000
   14f0c:	ldr	pc, [ip, #328]!	; 0x148

00014f10 <memchr@plt>:
   14f10:	add	ip, pc, #0, 12
   14f14:	add	ip, ip, #217088	; 0x35000
   14f18:	ldr	pc, [ip, #320]!	; 0x140

00014f1c <fputc@plt>:
   14f1c:	add	ip, pc, #0, 12
   14f20:	add	ip, ip, #217088	; 0x35000
   14f24:	ldr	pc, [ip, #312]!	; 0x138

00014f28 <sprintf@plt>:
   14f28:	add	ip, pc, #0, 12
   14f2c:	add	ip, ip, #217088	; 0x35000
   14f30:	ldr	pc, [ip, #304]!	; 0x130

00014f34 <abort@plt>:
   14f34:	add	ip, pc, #0, 12
   14f38:	add	ip, ip, #217088	; 0x35000
   14f3c:	ldr	pc, [ip, #296]!	; 0x128

00014f40 <__assert_fail@plt>:
   14f40:	add	ip, pc, #0, 12
   14f44:	add	ip, ip, #217088	; 0x35000
   14f48:	ldr	pc, [ip, #288]!	; 0x120

Disassembly of section .text:

00014f50 <_start@@Base>:
   14f50:	mov	fp, #0
   14f54:	mov	lr, #0
   14f58:	pop	{r1}		; (ldr r1, [sp], #4)
   14f5c:	mov	r2, sp
   14f60:	push	{r2}		; (str r2, [sp, #-4]!)
   14f64:	push	{r0}		; (str r0, [sp, #-4]!)
   14f68:	ldr	ip, [pc, #16]	; 14f80 <_start@@Base+0x30>
   14f6c:	push	{ip}		; (str ip, [sp, #-4]!)
   14f70:	ldr	r0, [pc, #12]	; 14f84 <_start@@Base+0x34>
   14f74:	ldr	r3, [pc, #12]	; 14f88 <_start@@Base+0x38>
   14f78:	bl	14ea4 <__libc_start_main@plt>
   14f7c:	bl	14f34 <abort@plt>
   14f80:	andeq	r1, r3, r4, lsl #30
   14f84:	andeq	r6, r1, r4, ror #1
   14f88:	andeq	r1, r3, r4, lsr #29
   14f8c:	ldr	r3, [pc, #20]	; 14fa8 <_start@@Base+0x58>
   14f90:	ldr	r2, [pc, #20]	; 14fac <_start@@Base+0x5c>
   14f94:	add	r3, pc, r3
   14f98:	ldr	r2, [r3, r2]
   14f9c:	cmp	r2, #0
   14fa0:	bxeq	lr
   14fa4:	b	14eb0 <__gmon_start__@plt>
   14fa8:	andeq	r5, r3, r4, rrx
   14fac:	andeq	r0, r0, ip, rrx
   14fb0:	ldr	r0, [pc, #24]	; 14fd0 <_start@@Base+0x80>
   14fb4:	ldr	r3, [pc, #24]	; 14fd4 <_start@@Base+0x84>
   14fb8:	cmp	r3, r0
   14fbc:	bxeq	lr
   14fc0:	ldr	r3, [pc, #16]	; 14fd8 <_start@@Base+0x88>
   14fc4:	cmp	r3, #0
   14fc8:	bxeq	lr
   14fcc:	bx	r3
   14fd0:	andeq	sl, r4, r4, asr #6
   14fd4:	andeq	sl, r4, r4, asr #6
   14fd8:	andeq	r0, r0, r0
   14fdc:	ldr	r0, [pc, #36]	; 15008 <_start@@Base+0xb8>
   14fe0:	ldr	r1, [pc, #36]	; 1500c <_start@@Base+0xbc>
   14fe4:	sub	r1, r1, r0
   14fe8:	asr	r1, r1, #2
   14fec:	add	r1, r1, r1, lsr #31
   14ff0:	asrs	r1, r1, #1
   14ff4:	bxeq	lr
   14ff8:	ldr	r3, [pc, #16]	; 15010 <_start@@Base+0xc0>
   14ffc:	cmp	r3, #0
   15000:	bxeq	lr
   15004:	bx	r3
   15008:	andeq	sl, r4, r4, asr #6
   1500c:	andeq	sl, r4, r4, asr #6
   15010:	andeq	r0, r0, r0
   15014:	push	{r4, lr}
   15018:	ldr	r4, [pc, #24]	; 15038 <_start@@Base+0xe8>
   1501c:	ldrb	r3, [r4]
   15020:	cmp	r3, #0
   15024:	popne	{r4, pc}
   15028:	bl	14fb0 <_start@@Base+0x60>
   1502c:	mov	r3, #1
   15030:	strb	r3, [r4]
   15034:	pop	{r4, pc}
   15038:	andeq	sl, r4, r0, asr r3
   1503c:	b	14fdc <_start@@Base+0x8c>

00015040 <test_json@@Base>:
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15044:	add	fp, sp, #28
   15048:	sub	sp, sp, #348	; 0x15c
   1504c:	mov	r7, r3
   15050:	mov	r9, r2
   15054:	mov	r8, r1
   15058:	mov	r6, r0
   1505c:	add	r4, sp, #104	; 0x68
   15060:	mov	r0, r4
   15064:	bl	21b34 <flatcc_builder_init@@Base>
   15068:	add	r5, sp, #12
   1506c:	mov	sl, #0
   15070:	mov	r0, r5
   15074:	mov	r1, #0
   15078:	bl	306f8 <flatcc_json_printer_init_dynamic_buffer@@Base>
   1507c:	ldr	r1, [fp, #12]
   15080:	mov	r0, r5
   15084:	bl	1531c <test_json@@Base+0x2dc>
   15088:	mov	r0, r8
   1508c:	bl	14ec8 <strlen@plt>
   15090:	mov	r3, r0
   15094:	ldm	r6, {r0, r1}
   15098:	stmib	sp, {r0, r1}
   1509c:	ldr	r0, [fp, #8]
   150a0:	str	r0, [sp]
   150a4:	add	r1, sp, #60	; 0x3c
   150a8:	mov	r0, r4
   150ac:	mov	r2, r8
   150b0:	bl	28e20 <flatcc_json_parser_table_as_root@@Base>
   150b4:	ldr	r4, [fp, #16]
   150b8:	cmp	r0, r7
   150bc:	bne	15168 <test_json@@Base+0x128>
   150c0:	cmp	r7, #0
   150c4:	beq	150d0 <test_json@@Base+0x90>
   150c8:	mov	r5, #0
   150cc:	b	15144 <test_json@@Base+0x104>
   150d0:	add	r0, sp, #104	; 0x68
   150d4:	sub	r1, fp, #36	; 0x24
   150d8:	bl	24adc <flatcc_builder_finalize_aligned_buffer@@Base>
   150dc:	mov	r5, r0
   150e0:	ldr	r2, [r6]
   150e4:	ldr	r3, [r6, #12]
   150e8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   150ec:	bl	25cd8 <flatcc_verify_table_as_root@@Base>
   150f0:	cmp	r0, #0
   150f4:	bne	15220 <test_json@@Base+0x1e0>
   150f8:	ldr	r3, [r6]
   150fc:	ldr	r0, [r6, #8]
   15100:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15104:	str	r0, [sp]
   15108:	add	r6, sp, #12
   1510c:	mov	r0, r6
   15110:	mov	r1, r5
   15114:	bl	30278 <flatcc_json_printer_table_as_root@@Base>
   15118:	sub	r1, fp, #40	; 0x28
   1511c:	mov	r0, r6
   15120:	bl	30824 <flatcc_json_printer_get_buffer@@Base>
   15124:	mov	r6, r0
   15128:	cmp	r0, #0
   1512c:	beq	1519c <test_json@@Base+0x15c>
   15130:	mov	r0, r9
   15134:	mov	r1, r6
   15138:	bl	14e38 <strcmp@plt>
   1513c:	cmp	r0, #0
   15140:	bne	1519c <test_json@@Base+0x15c>
   15144:	mov	r0, r5
   15148:	bl	24bbc <flatcc_builder_aligned_free@@Base>
   1514c:	add	r0, sp, #104	; 0x68
   15150:	bl	21cb8 <flatcc_builder_clear@@Base>
   15154:	add	r0, sp, #12
   15158:	bl	3088c <flatcc_json_printer_clear@@Base>
   1515c:	mov	r0, sl
   15160:	sub	sp, fp, #28
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	cmp	r7, #0
   1516c:	movw	r6, #41800	; 0xa348
   15170:	movt	r6, #4
   15174:	beq	151fc <test_json@@Base+0x1bc>
   15178:	ldr	r5, [r6]
   1517c:	cmp	r0, #0
   15180:	bne	15278 <test_json@@Base+0x238>
   15184:	mov	r0, r7
   15188:	bl	26978 <flatcc_json_parser_error_string@@Base>
   1518c:	mov	r3, r0
   15190:	movw	r1, #7994	; 0x1f3a
   15194:	movt	r1, #3
   15198:	b	15210 <test_json@@Base+0x1d0>
   1519c:	movw	r7, #41800	; 0xa348
   151a0:	movt	r7, #4
   151a4:	ldr	r0, [r7]
   151a8:	movw	r1, #8208	; 0x2010
   151ac:	movt	r1, #3
   151b0:	mov	r2, r4
   151b4:	bl	14ed4 <fprintf@plt>
   151b8:	ldr	r0, [r7]
   151bc:	movw	r4, #22263	; 0x56f7
   151c0:	movt	r4, #3
   151c4:	mov	r1, r4
   151c8:	mov	r2, r6
   151cc:	bl	14ed4 <fprintf@plt>
   151d0:	ldr	r3, [r7]
   151d4:	movw	r0, #8261	; 0x2045
   151d8:	movt	r0, #3
   151dc:	mov	r1, #10
   151e0:	mov	r2, #1
   151e4:	bl	14e8c <fwrite@plt>
   151e8:	ldr	r0, [r7]
   151ec:	mov	r1, r4
   151f0:	mov	r2, r9
   151f4:	bl	14ed4 <fprintf@plt>
   151f8:	b	15250 <test_json@@Base+0x210>
   151fc:	ldr	r5, [r6]
   15200:	bl	26978 <flatcc_json_parser_error_string@@Base>
   15204:	mov	r3, r0
   15208:	movw	r1, #8058	; 0x1f7a
   1520c:	movt	r1, #3
   15210:	mov	r0, r5
   15214:	mov	r2, r4
   15218:	bl	14ed4 <fprintf@plt>
   1521c:	b	152b4 <test_json@@Base+0x274>
   15220:	movw	r1, #41800	; 0xa348
   15224:	movt	r1, #4
   15228:	ldr	r6, [r1]
   1522c:	bl	25390 <flatcc_verify_error_string@@Base>
   15230:	str	r0, [sp]
   15234:	movw	r1, #8094	; 0x1f9e
   15238:	movt	r1, #3
   1523c:	movw	r2, #8133	; 0x1fc5
   15240:	movt	r2, #3
   15244:	mov	r0, r6
   15248:	mov	r3, r4
   1524c:	bl	14ed4 <fprintf@plt>
   15250:	mvn	sl, #0
   15254:	cmp	r5, #0
   15258:	beq	150c8 <test_json@@Base+0x88>
   1525c:	movw	r0, #41800	; 0xa348
   15260:	movt	r0, #4
   15264:	ldr	r2, [r0]
   15268:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1526c:	mov	r0, r5
   15270:	bl	15370 <test_json@@Base+0x330>
   15274:	b	15144 <test_json@@Base+0x104>
   15278:	bl	26978 <flatcc_json_parser_error_string@@Base>
   1527c:	mov	r3, r0
   15280:	movw	r1, #7956	; 0x1f14
   15284:	movt	r1, #3
   15288:	mov	r0, r5
   1528c:	mov	r2, r4
   15290:	bl	14ed4 <fprintf@plt>
   15294:	ldr	r4, [r6]
   15298:	mov	r0, r7
   1529c:	bl	26978 <flatcc_json_parser_error_string@@Base>
   152a0:	mov	r2, r0
   152a4:	movw	r1, #8027	; 0x1f5b
   152a8:	movt	r1, #3
   152ac:	mov	r0, r4
   152b0:	bl	14ed4 <fprintf@plt>
   152b4:	ldr	r0, [r6]
   152b8:	movw	r1, #22263	; 0x56f7
   152bc:	movt	r1, #3
   152c0:	mov	r2, r8
   152c4:	bl	14ed4 <fprintf@plt>
   152c8:	ldr	r3, [r6]
   152cc:	ldr	r0, [sp, #80]	; 0x50
   152d0:	cmp	r0, #2
   152d4:	blt	15300 <test_json@@Base+0x2c0>
   152d8:	mov	r4, #0
   152dc:	mov	r0, #32
   152e0:	mov	r1, r3
   152e4:	bl	14f1c <fputc@plt>
   152e8:	add	r4, r4, #1
   152ec:	ldr	r3, [r6]
   152f0:	ldr	r0, [sp, #80]	; 0x50
   152f4:	sub	r0, r0, #1
   152f8:	cmp	r4, r0
   152fc:	blt	152dc <test_json@@Base+0x29c>
   15300:	movw	r0, #8091	; 0x1f9b
   15304:	movt	r0, #3
   15308:	mov	r1, #2
   1530c:	mov	r2, #1
   15310:	bl	14e8c <fwrite@plt>
   15314:	mvn	sl, #0
   15318:	b	150c8 <test_json@@Base+0x88>
   1531c:	push	{r4, r5, fp, lr}
   15320:	add	fp, sp, #8
   15324:	mov	r5, r1
   15328:	mov	r4, r0
   1532c:	and	r0, r1, #1
   15330:	strb	r0, [r4, #26]
   15334:	uxtb	r0, r1
   15338:	ubfx	r1, r0, #3, #1
   1533c:	strb	r1, [r4, #29]
   15340:	ubfx	r1, r0, #2, #1
   15344:	strb	r1, [r4, #28]
   15348:	ubfx	r0, r0, #1, #1
   1534c:	strb	r0, [r4, #27]
   15350:	tst	r5, #16
   15354:	movne	r0, r4
   15358:	blne	16fd8 <main@@Base+0xef4>
   1535c:	tst	r5, #32
   15360:	popeq	{r4, r5, fp, pc}
   15364:	mov	r0, r4
   15368:	pop	{r4, r5, fp, lr}
   1536c:	b	16fe4 <main@@Base+0xf00>
   15370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15374:	add	fp, sp, #28
   15378:	sub	sp, sp, #20
   1537c:	mov	r4, r2
   15380:	mov	r5, r1
   15384:	mov	r6, r0
   15388:	movw	r1, #22256	; 0x56f0
   1538c:	movt	r1, #3
   15390:	movw	r2, #8272	; 0x2050
   15394:	movt	r2, #3
   15398:	mov	r0, r4
   1539c:	bl	14ed4 <fprintf@plt>
   153a0:	cmp	r5, #0
   153a4:	beq	15490 <test_json@@Base+0x450>
   153a8:	add	r7, sp, #3
   153ac:	movw	sl, #22275	; 0x5703
   153b0:	movt	sl, #3
   153b4:	mov	r8, #0
   153b8:	ands	r9, r8, #15
   153bc:	bne	15420 <test_json@@Base+0x3e0>
   153c0:	b	15438 <test_json@@Base+0x3f8>
   153c4:	mov	r0, r4
   153c8:	movw	r1, #22267	; 0x56fb
   153cc:	movt	r1, #3
   153d0:	mov	r2, r8
   153d4:	bl	14ed4 <fprintf@plt>
   153d8:	ldrb	r2, [r6, r8]
   153dc:	mov	r0, r4
   153e0:	mov	r1, sl
   153e4:	bl	14ed4 <fprintf@plt>
   153e8:	ldrb	r0, [r6, r8]
   153ec:	sub	r1, r0, #32
   153f0:	uxtb	r1, r1
   153f4:	cmp	r1, #94	; 0x5e
   153f8:	movwhi	r0, #46	; 0x2e
   153fc:	strb	r0, [r7, r9]
   15400:	add	r0, r7, r9
   15404:	mov	r1, #0
   15408:	strb	r1, [r0, #1]
   1540c:	add	r8, r8, #1
   15410:	cmp	r5, r8
   15414:	beq	15458 <test_json@@Base+0x418>
   15418:	ands	r9, r8, #15
   1541c:	beq	15438 <test_json@@Base+0x3f8>
   15420:	tst	r8, #7
   15424:	bne	153d8 <test_json@@Base+0x398>
   15428:	mov	r0, #32
   1542c:	mov	r1, r4
   15430:	bl	14f1c <fputc@plt>
   15434:	b	153d8 <test_json@@Base+0x398>
   15438:	cmp	r8, #0
   1543c:	beq	153c4 <test_json@@Base+0x384>
   15440:	mov	r0, r4
   15444:	movw	r1, #22261	; 0x56f5
   15448:	movt	r1, #3
   1544c:	mov	r2, r7
   15450:	bl	14ed4 <fprintf@plt>
   15454:	b	153c4 <test_json@@Base+0x384>
   15458:	tst	r5, #15
   1545c:	beq	15490 <test_json@@Base+0x450>
   15460:	add	r6, r5, #1
   15464:	movw	r5, #22281	; 0x5709
   15468:	movt	r5, #3
   1546c:	mov	r0, r5
   15470:	mov	r1, #3
   15474:	mov	r2, #1
   15478:	mov	r3, r4
   1547c:	bl	14e8c <fwrite@plt>
   15480:	add	r0, r6, #1
   15484:	tst	r6, #15
   15488:	mov	r6, r0
   1548c:	bne	1546c <test_json@@Base+0x42c>
   15490:	movw	r1, #22261	; 0x56f5
   15494:	movt	r1, #3
   15498:	add	r2, sp, #3
   1549c:	mov	r0, r4
   154a0:	bl	14ed4 <fprintf@plt>
   154a4:	sub	sp, fp, #28
   154a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000154ac <edge_case_tests@@Base>:
   154ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b0:	add	fp, sp, #28
   154b4:	sub	sp, sp, #60	; 0x3c
   154b8:	mov	r0, #155	; 0x9b
   154bc:	mov	sl, #0
   154c0:	str	sl, [sp]
   154c4:	str	sl, [sp, #4]
   154c8:	str	r0, [sp, #8]
   154cc:	movw	r4, #23212	; 0x5aac
   154d0:	movt	r4, #3
   154d4:	movw	r1, #8286	; 0x205e
   154d8:	movt	r1, #3
   154dc:	movw	r2, #8335	; 0x208f
   154e0:	movt	r2, #3
   154e4:	mov	r0, r4
   154e8:	mov	r3, #0
   154ec:	bl	15040 <test_json@@Base>
   154f0:	str	r0, [fp, #-32]	; 0xffffffe0
   154f4:	mov	r0, #168	; 0xa8
   154f8:	mov	r9, #2
   154fc:	stm	sp, {r9, sl}
   15500:	str	r0, [sp, #8]
   15504:	movw	r5, #8365	; 0x20ad
   15508:	movt	r5, #3
   1550c:	movw	r8, #8398	; 0x20ce
   15510:	movt	r8, #3
   15514:	mov	r0, r4
   15518:	mov	r1, r5
   1551c:	mov	r2, r8
   15520:	mov	r3, #0
   15524:	bl	15040 <test_json@@Base>
   15528:	str	r0, [fp, #-36]	; 0xffffffdc
   1552c:	mov	r0, #172	; 0xac
   15530:	str	sl, [sp]
   15534:	str	r9, [sp, #4]
   15538:	str	r0, [sp, #8]
   1553c:	movw	r1, #8432	; 0x20f0
   15540:	movt	r1, #3
   15544:	movw	r2, #8471	; 0x2117
   15548:	movt	r2, #3
   1554c:	mov	r0, r4
   15550:	mov	r3, #0
   15554:	bl	15040 <test_json@@Base>
   15558:	str	r0, [fp, #-40]	; 0xffffffd8
   1555c:	mov	r0, #176	; 0xb0
   15560:	mov	r1, #4
   15564:	str	r9, [sp]
   15568:	str	r1, [sp, #4]
   1556c:	str	r0, [sp, #8]
   15570:	movw	r2, #8500	; 0x2134
   15574:	movt	r2, #3
   15578:	mov	r0, r4
   1557c:	mov	r1, r5
   15580:	mov	r3, #0
   15584:	bl	15040 <test_json@@Base>
   15588:	str	r0, [sp, #44]	; 0x2c
   1558c:	mov	r0, #180	; 0xb4
   15590:	mov	r1, #8
   15594:	str	sl, [sp]
   15598:	str	r1, [sp, #4]
   1559c:	str	r0, [sp, #8]
   155a0:	movw	r1, #8519	; 0x2147
   155a4:	movt	r1, #3
   155a8:	movw	r2, #8553	; 0x2169
   155ac:	movt	r2, #3
   155b0:	mov	r0, r4
   155b4:	mov	r3, #0
   155b8:	bl	15040 <test_json@@Base>
   155bc:	str	r0, [sp, #40]	; 0x28
   155c0:	mov	r0, #195	; 0xc3
   155c4:	stm	sp, {r9, sl}
   155c8:	str	r0, [sp, #8]
   155cc:	movw	r1, #8827	; 0x227b
   155d0:	movt	r1, #3
   155d4:	mov	r0, r4
   155d8:	mov	r2, r8
   155dc:	mov	r3, #0
   155e0:	bl	15040 <test_json@@Base>
   155e4:	str	r0, [sp, #36]	; 0x24
   155e8:	mov	r0, #199	; 0xc7
   155ec:	mov	r6, #1
   155f0:	stm	sp, {r6, sl}
   155f4:	str	r0, [sp, #8]
   155f8:	movw	r5, #8865	; 0x22a1
   155fc:	movt	r5, #3
   15600:	movw	r7, #8915	; 0x22d3
   15604:	movt	r7, #3
   15608:	mov	r0, r4
   1560c:	mov	r1, r5
   15610:	mov	r2, r7
   15614:	mov	r3, #0
   15618:	bl	15040 <test_json@@Base>
   1561c:	str	r0, [sp, #32]
   15620:	mov	r0, #203	; 0xcb
   15624:	str	r6, [sp]
   15628:	str	r6, [sp, #4]
   1562c:	str	r0, [sp, #8]
   15630:	movw	r2, #8942	; 0x22ee
   15634:	movt	r2, #3
   15638:	mov	r0, r4
   1563c:	mov	r1, r5
   15640:	mov	r3, #0
   15644:	bl	15040 <test_json@@Base>
   15648:	str	r0, [sp, #28]
   1564c:	mov	r0, #209	; 0xd1
   15650:	stm	sp, {r6, sl}
   15654:	str	r0, [sp, #8]
   15658:	movw	r1, #8965	; 0x2305
   1565c:	movt	r1, #3
   15660:	mov	r0, r4
   15664:	mov	r2, r7
   15668:	mov	r3, #0
   1566c:	bl	15040 <test_json@@Base>
   15670:	str	r0, [sp, #24]
   15674:	mov	r0, #217	; 0xd9
   15678:	stm	sp, {r9, sl}
   1567c:	str	r0, [sp, #8]
   15680:	movw	r5, #9078	; 0x2376
   15684:	movt	r5, #3
   15688:	mov	r0, r4
   1568c:	mov	r1, r5
   15690:	mov	r2, r8
   15694:	mov	r3, #0
   15698:	bl	15040 <test_json@@Base>
   1569c:	str	r0, [sp, #20]
   156a0:	mov	r0, #221	; 0xdd
   156a4:	str	sl, [sp]
   156a8:	str	r9, [sp, #4]
   156ac:	str	r0, [sp, #8]
   156b0:	movw	r1, #9107	; 0x2393
   156b4:	movt	r1, #3
   156b8:	mov	r0, r4
   156bc:	movw	r2, #8471	; 0x2117
   156c0:	movt	r2, #3
   156c4:	mov	r3, #0
   156c8:	bl	15040 <test_json@@Base>
   156cc:	str	r0, [sp, #16]
   156d0:	mov	r0, #225	; 0xe1
   156d4:	str	r9, [sp]
   156d8:	mov	r1, #4
   156dc:	str	r1, [sp, #4]
   156e0:	str	r0, [sp, #8]
   156e4:	mov	r0, r4
   156e8:	mov	r1, r5
   156ec:	movw	r2, #8500	; 0x2134
   156f0:	movt	r2, #3
   156f4:	mov	r3, #0
   156f8:	bl	15040 <test_json@@Base>
   156fc:	str	r0, [sp, #12]
   15700:	mov	r0, #229	; 0xe5
   15704:	str	sl, [sp]
   15708:	mov	r1, #8
   1570c:	str	r1, [sp, #4]
   15710:	str	r0, [sp, #8]
   15714:	movw	r1, #9140	; 0x23b4
   15718:	movt	r1, #3
   1571c:	movw	r2, #9159	; 0x23c7
   15720:	movt	r2, #3
   15724:	mov	r0, r4
   15728:	mov	r3, #0
   1572c:	bl	15040 <test_json@@Base>
   15730:	mov	r5, r0
   15734:	mov	r0, #233	; 0xe9
   15738:	stm	sp, {r9, sl}
   1573c:	str	r0, [sp, #8]
   15740:	movw	r1, #9438	; 0x24de
   15744:	movt	r1, #3
   15748:	mov	r0, r4
   1574c:	mov	r2, r8
   15750:	mov	r3, #0
   15754:	bl	15040 <test_json@@Base>
   15758:	mov	r8, r0
   1575c:	mov	r0, #237	; 0xed
   15760:	stm	sp, {r6, sl}
   15764:	str	r0, [sp, #8]
   15768:	movw	r9, #9470	; 0x24fe
   1576c:	movt	r9, #3
   15770:	mov	r0, r4
   15774:	mov	r1, r9
   15778:	movw	r2, #8915	; 0x22d3
   1577c:	movt	r2, #3
   15780:	mov	r3, #0
   15784:	bl	15040 <test_json@@Base>
   15788:	mov	r7, r0
   1578c:	mov	r0, #241	; 0xf1
   15790:	str	r6, [sp]
   15794:	str	r6, [sp, #4]
   15798:	str	r0, [sp, #8]
   1579c:	mov	r0, r4
   157a0:	mov	r1, r9
   157a4:	movw	r2, #8942	; 0x22ee
   157a8:	movt	r2, #3
   157ac:	mov	r3, #0
   157b0:	bl	15040 <test_json@@Base>
   157b4:	mov	r1, #247	; 0xf7
   157b8:	stm	sp, {r6, sl}
   157bc:	str	r1, [sp, #8]
   157c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   157c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   157c8:	orr	r1, r2, r1
   157cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   157d0:	orr	r1, r1, r2
   157d4:	ldr	r2, [sp, #44]	; 0x2c
   157d8:	orr	r1, r1, r2
   157dc:	ldr	r2, [sp, #40]	; 0x28
   157e0:	orr	r1, r1, r2
   157e4:	ldr	r2, [sp, #36]	; 0x24
   157e8:	orr	r1, r1, r2
   157ec:	ldr	r2, [sp, #32]
   157f0:	orr	r1, r1, r2
   157f4:	ldr	r2, [sp, #28]
   157f8:	orr	r1, r1, r2
   157fc:	ldr	r2, [sp, #24]
   15800:	orr	r1, r1, r2
   15804:	ldr	r2, [sp, #20]
   15808:	orr	r1, r1, r2
   1580c:	ldr	r2, [sp, #16]
   15810:	orr	r1, r1, r2
   15814:	ldr	r2, [sp, #12]
   15818:	orr	r1, r1, r2
   1581c:	orr	r1, r1, r5
   15820:	orr	r1, r1, r8
   15824:	orr	r1, r1, r7
   15828:	orr	r5, r1, r0
   1582c:	movw	r1, #9512	; 0x2528
   15830:	movt	r1, #3
   15834:	mov	r0, r4
   15838:	movw	r2, #8915	; 0x22d3
   1583c:	movt	r2, #3
   15840:	mov	r3, #0
   15844:	bl	15040 <test_json@@Base>
   15848:	orr	r0, r5, r0
   1584c:	sub	sp, fp, #28
   15850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015854 <error_case_tests@@Base>:
   15854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15858:	add	fp, sp, #28
   1585c:	sub	sp, sp, #60	; 0x3c
   15860:	movw	r0, #285	; 0x11d
   15864:	mov	r6, #0
   15868:	str	r6, [sp]
   1586c:	str	r6, [sp, #4]
   15870:	str	r0, [sp, #8]
   15874:	movw	r4, #23212	; 0x5aac
   15878:	movt	r4, #3
   1587c:	movw	r1, #9607	; 0x2587
   15880:	movt	r1, #3
   15884:	mov	r0, r4
   15888:	mov	r2, #0
   1588c:	mov	r3, #13
   15890:	bl	15040 <test_json@@Base>
   15894:	str	r0, [fp, #-32]	; 0xffffffe0
   15898:	movw	r0, #287	; 0x11f
   1589c:	str	r6, [sp]
   158a0:	str	r6, [sp, #4]
   158a4:	str	r0, [sp, #8]
   158a8:	movw	r1, #9633	; 0x25a1
   158ac:	movt	r1, #3
   158b0:	mov	r0, r4
   158b4:	mov	r2, #0
   158b8:	mov	r3, #13
   158bc:	bl	15040 <test_json@@Base>
   158c0:	str	r0, [fp, #-36]	; 0xffffffdc
   158c4:	movw	r0, #289	; 0x121
   158c8:	str	r6, [sp]
   158cc:	str	r6, [sp, #4]
   158d0:	str	r0, [sp, #8]
   158d4:	movw	r1, #9730	; 0x2602
   158d8:	movt	r1, #3
   158dc:	mov	r0, r4
   158e0:	mov	r2, #0
   158e4:	mov	r3, #13
   158e8:	bl	15040 <test_json@@Base>
   158ec:	str	r0, [fp, #-40]	; 0xffffffd8
   158f0:	movw	r0, #291	; 0x123
   158f4:	str	r6, [sp]
   158f8:	str	r6, [sp, #4]
   158fc:	str	r0, [sp, #8]
   15900:	movw	r1, #9824	; 0x2660
   15904:	movt	r1, #3
   15908:	mov	r0, r4
   1590c:	mov	r2, #0
   15910:	mov	r3, #13
   15914:	bl	15040 <test_json@@Base>
   15918:	str	r0, [sp, #44]	; 0x2c
   1591c:	movw	r0, #293	; 0x125
   15920:	str	r6, [sp]
   15924:	str	r6, [sp, #4]
   15928:	str	r0, [sp, #8]
   1592c:	movw	r1, #9912	; 0x26b8
   15930:	movt	r1, #3
   15934:	mov	r0, r4
   15938:	mov	r2, #0
   1593c:	mov	r3, #13
   15940:	bl	15040 <test_json@@Base>
   15944:	str	r0, [sp, #40]	; 0x28
   15948:	mov	r0, #296	; 0x128
   1594c:	str	r6, [sp]
   15950:	str	r6, [sp, #4]
   15954:	str	r0, [sp, #8]
   15958:	movw	r1, #9997	; 0x270d
   1595c:	movt	r1, #3
   15960:	mov	r0, r4
   15964:	mov	r2, #0
   15968:	mov	r3, #13
   1596c:	bl	15040 <test_json@@Base>
   15970:	str	r0, [sp, #36]	; 0x24
   15974:	movw	r0, #299	; 0x12b
   15978:	str	r6, [sp]
   1597c:	str	r6, [sp, #4]
   15980:	str	r0, [sp, #8]
   15984:	movw	r1, #10155	; 0x27ab
   15988:	movt	r1, #3
   1598c:	mov	r0, r4
   15990:	mov	r2, #0
   15994:	mov	r3, #13
   15998:	bl	15040 <test_json@@Base>
   1599c:	str	r0, [sp, #32]
   159a0:	movw	r0, #303	; 0x12f
   159a4:	str	r6, [sp]
   159a8:	str	r6, [sp, #4]
   159ac:	str	r0, [sp, #8]
   159b0:	movw	r1, #10310	; 0x2846
   159b4:	movt	r1, #3
   159b8:	mov	r0, r4
   159bc:	mov	r2, #0
   159c0:	mov	r3, #13
   159c4:	bl	15040 <test_json@@Base>
   159c8:	str	r0, [sp, #28]
   159cc:	movw	r0, #307	; 0x133
   159d0:	str	r6, [sp]
   159d4:	str	r6, [sp, #4]
   159d8:	str	r0, [sp, #8]
   159dc:	movw	r1, #10509	; 0x290d
   159e0:	movt	r1, #3
   159e4:	mov	r0, r4
   159e8:	mov	r2, #0
   159ec:	mov	r3, #13
   159f0:	bl	15040 <test_json@@Base>
   159f4:	str	r0, [sp, #24]
   159f8:	movw	r0, #322	; 0x142
   159fc:	str	r6, [sp]
   15a00:	str	r6, [sp, #4]
   15a04:	str	r0, [sp, #8]
   15a08:	movw	r1, #10708	; 0x29d4
   15a0c:	movt	r1, #3
   15a10:	mov	r0, r4
   15a14:	mov	r2, #0
   15a18:	mov	r3, #13
   15a1c:	bl	15040 <test_json@@Base>
   15a20:	str	r0, [sp, #20]
   15a24:	mov	r0, #324	; 0x144
   15a28:	str	r6, [sp]
   15a2c:	str	r6, [sp, #4]
   15a30:	str	r0, [sp, #8]
   15a34:	movw	r1, #10732	; 0x29ec
   15a38:	movt	r1, #3
   15a3c:	mov	r0, r4
   15a40:	mov	r2, #0
   15a44:	mov	r3, #13
   15a48:	bl	15040 <test_json@@Base>
   15a4c:	str	r0, [sp, #16]
   15a50:	movw	r0, #326	; 0x146
   15a54:	str	r6, [sp]
   15a58:	str	r6, [sp, #4]
   15a5c:	str	r0, [sp, #8]
   15a60:	movw	r1, #10817	; 0x2a41
   15a64:	movt	r1, #3
   15a68:	mov	r0, r4
   15a6c:	mov	r2, #0
   15a70:	mov	r3, #13
   15a74:	bl	15040 <test_json@@Base>
   15a78:	mov	r7, r0
   15a7c:	mov	r0, #328	; 0x148
   15a80:	str	r6, [sp]
   15a84:	str	r6, [sp, #4]
   15a88:	str	r0, [sp, #8]
   15a8c:	movw	r1, #10899	; 0x2a93
   15a90:	movt	r1, #3
   15a94:	mov	r0, r4
   15a98:	mov	r2, #0
   15a9c:	mov	r3, #13
   15aa0:	bl	15040 <test_json@@Base>
   15aa4:	mov	r8, r0
   15aa8:	movw	r0, #330	; 0x14a
   15aac:	str	r6, [sp]
   15ab0:	str	r6, [sp, #4]
   15ab4:	str	r0, [sp, #8]
   15ab8:	movw	r1, #10979	; 0x2ae3
   15abc:	movt	r1, #3
   15ac0:	mov	r0, r4
   15ac4:	mov	r2, #0
   15ac8:	mov	r3, #13
   15acc:	bl	15040 <test_json@@Base>
   15ad0:	mov	r9, r0
   15ad4:	movw	r0, #333	; 0x14d
   15ad8:	str	r6, [sp]
   15adc:	str	r6, [sp, #4]
   15ae0:	str	r0, [sp, #8]
   15ae4:	movw	r1, #11056	; 0x2b30
   15ae8:	movt	r1, #3
   15aec:	mov	r0, r4
   15af0:	mov	r2, #0
   15af4:	mov	r3, #13
   15af8:	bl	15040 <test_json@@Base>
   15afc:	mov	sl, r0
   15b00:	mov	r0, #336	; 0x150
   15b04:	str	r6, [sp]
   15b08:	str	r6, [sp, #4]
   15b0c:	str	r0, [sp, #8]
   15b10:	movw	r1, #11196	; 0x2bbc
   15b14:	movt	r1, #3
   15b18:	mov	r0, r4
   15b1c:	mov	r2, #0
   15b20:	mov	r3, #13
   15b24:	bl	15040 <test_json@@Base>
   15b28:	mov	r5, r0
   15b2c:	mov	r0, #340	; 0x154
   15b30:	str	r6, [sp]
   15b34:	str	r6, [sp, #4]
   15b38:	str	r0, [sp, #8]
   15b3c:	movw	r1, #11333	; 0x2c45
   15b40:	movt	r1, #3
   15b44:	mov	r0, r4
   15b48:	mov	r2, #0
   15b4c:	mov	r3, #13
   15b50:	bl	15040 <test_json@@Base>
   15b54:	mov	r1, #344	; 0x158
   15b58:	str	r6, [sp]
   15b5c:	str	r6, [sp, #4]
   15b60:	str	r1, [sp, #8]
   15b64:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15b68:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15b6c:	orr	r1, r2, r1
   15b70:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15b74:	orr	r1, r1, r2
   15b78:	ldr	r2, [sp, #44]	; 0x2c
   15b7c:	orr	r1, r1, r2
   15b80:	ldr	r2, [sp, #40]	; 0x28
   15b84:	orr	r1, r1, r2
   15b88:	ldr	r2, [sp, #36]	; 0x24
   15b8c:	orr	r1, r1, r2
   15b90:	ldr	r2, [sp, #32]
   15b94:	orr	r1, r1, r2
   15b98:	ldr	r2, [sp, #28]
   15b9c:	orr	r1, r1, r2
   15ba0:	ldr	r2, [sp, #24]
   15ba4:	orr	r1, r1, r2
   15ba8:	ldr	r2, [sp, #20]
   15bac:	orr	r1, r1, r2
   15bb0:	ldr	r2, [sp, #16]
   15bb4:	orr	r1, r1, r2
   15bb8:	orr	r1, r1, r7
   15bbc:	orr	r1, r1, r8
   15bc0:	orr	r1, r1, r9
   15bc4:	orr	r1, r1, sl
   15bc8:	orr	r1, r1, r5
   15bcc:	orr	r5, r1, r0
   15bd0:	movw	r1, #11508	; 0x2cf4
   15bd4:	movt	r1, #3
   15bd8:	mov	r0, r4
   15bdc:	mov	r2, #0
   15be0:	mov	r3, #13
   15be4:	bl	15040 <test_json@@Base>
   15be8:	orr	r0, r5, r0
   15bec:	sub	sp, fp, #28
   15bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015bf4 <base64_tests@@Base>:
   15bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bf8:	add	fp, sp, #28
   15bfc:	sub	sp, sp, #28
   15c00:	movw	r0, #369	; 0x171
   15c04:	mov	r5, #0
   15c08:	str	r5, [sp]
   15c0c:	str	r5, [sp, #4]
   15c10:	str	r0, [sp, #8]
   15c14:	movw	r4, #23212	; 0x5aac
   15c18:	movt	r4, #3
   15c1c:	movw	r1, #11683	; 0x2da3
   15c20:	movt	r1, #3
   15c24:	movw	r2, #8500	; 0x2134
   15c28:	movt	r2, #3
   15c2c:	mov	r0, r4
   15c30:	mov	r3, #0
   15c34:	bl	15040 <test_json@@Base>
   15c38:	str	r0, [sp, #24]
   15c3c:	mov	r0, #372	; 0x174
   15c40:	str	r5, [sp]
   15c44:	str	r5, [sp, #4]
   15c48:	str	r0, [sp, #8]
   15c4c:	movw	r1, #11705	; 0x2db9
   15c50:	movt	r1, #3
   15c54:	movw	r2, #11744	; 0x2de0
   15c58:	movt	r2, #3
   15c5c:	mov	r0, r4
   15c60:	mov	r3, #0
   15c64:	bl	15040 <test_json@@Base>
   15c68:	str	r0, [sp, #20]
   15c6c:	mov	r0, #376	; 0x178
   15c70:	str	r5, [sp]
   15c74:	str	r5, [sp, #4]
   15c78:	str	r0, [sp, #8]
   15c7c:	movw	r1, #11779	; 0x2e03
   15c80:	movt	r1, #3
   15c84:	movw	r6, #11964	; 0x2ebc
   15c88:	movt	r6, #3
   15c8c:	mov	r0, r4
   15c90:	mov	r2, r6
   15c94:	mov	r3, #0
   15c98:	bl	15040 <test_json@@Base>
   15c9c:	str	r0, [sp, #16]
   15ca0:	movw	r0, #379	; 0x17b
   15ca4:	str	r5, [sp]
   15ca8:	str	r5, [sp, #4]
   15cac:	str	r0, [sp, #8]
   15cb0:	movw	r1, #12144	; 0x2f70
   15cb4:	movt	r1, #3
   15cb8:	movw	r7, #12332	; 0x302c
   15cbc:	movt	r7, #3
   15cc0:	mov	r0, r4
   15cc4:	mov	r2, r7
   15cc8:	mov	r3, #0
   15ccc:	bl	15040 <test_json@@Base>
   15cd0:	str	r0, [sp, #12]
   15cd4:	movw	r0, #382	; 0x17e
   15cd8:	str	r5, [sp]
   15cdc:	str	r5, [sp, #4]
   15ce0:	str	r0, [sp, #8]
   15ce4:	movw	r1, #12515	; 0x30e3
   15ce8:	movt	r1, #3
   15cec:	mov	r0, r4
   15cf0:	mov	r2, r6
   15cf4:	mov	r3, #0
   15cf8:	bl	15040 <test_json@@Base>
   15cfc:	mov	r6, r0
   15d00:	movw	r0, #385	; 0x181
   15d04:	str	r5, [sp]
   15d08:	str	r5, [sp, #4]
   15d0c:	str	r0, [sp, #8]
   15d10:	movw	r1, #12698	; 0x319a
   15d14:	movt	r1, #3
   15d18:	mov	r0, r4
   15d1c:	mov	r2, r7
   15d20:	mov	r3, #0
   15d24:	bl	15040 <test_json@@Base>
   15d28:	mov	r7, r0
   15d2c:	mov	r0, #388	; 0x184
   15d30:	str	r5, [sp]
   15d34:	str	r5, [sp, #4]
   15d38:	str	r0, [sp, #8]
   15d3c:	movw	r1, #12884	; 0x3254
   15d40:	movt	r1, #3
   15d44:	mov	r0, r4
   15d48:	mov	r2, #0
   15d4c:	mov	r3, #31
   15d50:	bl	15040 <test_json@@Base>
   15d54:	mov	r8, r0
   15d58:	movw	r0, #391	; 0x187
   15d5c:	str	r5, [sp]
   15d60:	str	r5, [sp, #4]
   15d64:	str	r0, [sp, #8]
   15d68:	movw	r1, #13069	; 0x330d
   15d6c:	movt	r1, #3
   15d70:	mov	r0, r4
   15d74:	mov	r2, #0
   15d78:	mov	r3, #32
   15d7c:	bl	15040 <test_json@@Base>
   15d80:	mov	r9, r0
   15d84:	movw	r0, #406	; 0x196
   15d88:	str	r5, [sp]
   15d8c:	str	r5, [sp, #4]
   15d90:	str	r0, [sp, #8]
   15d94:	movw	r1, #13257	; 0x33c9
   15d98:	movt	r1, #3
   15d9c:	movw	sl, #13465	; 0x3499
   15da0:	movt	sl, #3
   15da4:	mov	r0, r4
   15da8:	mov	r2, sl
   15dac:	mov	r3, #0
   15db0:	bl	15040 <test_json@@Base>
   15db4:	movw	r1, #419	; 0x1a3
   15db8:	str	r5, [sp]
   15dbc:	str	r5, [sp, #4]
   15dc0:	str	r1, [sp, #8]
   15dc4:	ldr	r1, [sp, #24]
   15dc8:	ldr	r2, [sp, #20]
   15dcc:	orr	r1, r2, r1
   15dd0:	ldr	r2, [sp, #16]
   15dd4:	orr	r1, r1, r2
   15dd8:	ldr	r2, [sp, #12]
   15ddc:	orr	r1, r1, r2
   15de0:	orr	r1, r1, r6
   15de4:	orr	r1, r1, r7
   15de8:	orr	r1, r1, r8
   15dec:	orr	r1, r1, r9
   15df0:	orr	r5, r1, r0
   15df4:	movw	r1, #13678	; 0x356e
   15df8:	movt	r1, #3
   15dfc:	mov	r0, r4
   15e00:	mov	r2, sl
   15e04:	mov	r3, #0
   15e08:	bl	15040 <test_json@@Base>
   15e0c:	orr	r0, r5, r0
   15e10:	sub	sp, fp, #28
   15e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015e18 <mixed_type_union_tests@@Base>:
   15e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e1c:	add	fp, sp, #28
   15e20:	sub	sp, sp, #20
   15e24:	mov	r0, #432	; 0x1b0
   15e28:	mov	r8, #0
   15e2c:	str	r8, [sp]
   15e30:	str	r8, [sp, #4]
   15e34:	str	r0, [sp, #8]
   15e38:	movw	r4, #23228	; 0x5abc
   15e3c:	movt	r4, #3
   15e40:	movw	r1, #13882	; 0x363a
   15e44:	movt	r1, #3
   15e48:	movw	r2, #13961	; 0x3689
   15e4c:	movt	r2, #3
   15e50:	mov	r0, r4
   15e54:	mov	r3, #0
   15e58:	bl	15040 <test_json@@Base>
   15e5c:	str	r0, [sp, #16]
   15e60:	movw	r0, #437	; 0x1b5
   15e64:	str	r8, [sp]
   15e68:	str	r8, [sp, #4]
   15e6c:	str	r0, [sp, #8]
   15e70:	movw	r1, #14032	; 0x36d0
   15e74:	movt	r1, #3
   15e78:	movw	r9, #14163	; 0x3753
   15e7c:	movt	r9, #3
   15e80:	mov	r0, r4
   15e84:	mov	r2, r9
   15e88:	mov	r3, #0
   15e8c:	bl	15040 <test_json@@Base>
   15e90:	mov	sl, r0
   15e94:	movw	r0, #442	; 0x1ba
   15e98:	str	r8, [sp]
   15e9c:	str	r8, [sp, #4]
   15ea0:	str	r0, [sp, #8]
   15ea4:	movw	r1, #14282	; 0x37ca
   15ea8:	movt	r1, #3
   15eac:	mov	r0, r4
   15eb0:	mov	r2, r9
   15eb4:	mov	r3, #0
   15eb8:	bl	15040 <test_json@@Base>
   15ebc:	mov	r5, r0
   15ec0:	movw	r0, #449	; 0x1c1
   15ec4:	str	r8, [sp]
   15ec8:	str	r8, [sp, #4]
   15ecc:	str	r0, [sp, #8]
   15ed0:	movw	r1, #14432	; 0x3860
   15ed4:	movt	r1, #3
   15ed8:	movw	r2, #14653	; 0x393d
   15edc:	movt	r2, #3
   15ee0:	mov	r0, r4
   15ee4:	mov	r3, #0
   15ee8:	bl	15040 <test_json@@Base>
   15eec:	mov	r6, r0
   15ef0:	movw	r0, #458	; 0x1ca
   15ef4:	str	r8, [sp]
   15ef8:	str	r8, [sp, #4]
   15efc:	str	r0, [sp, #8]
   15f00:	movw	r1, #14838	; 0x39f6
   15f04:	movt	r1, #3
   15f08:	movw	r2, #15100	; 0x3afc
   15f0c:	movt	r2, #3
   15f10:	mov	r0, r4
   15f14:	mov	r3, #0
   15f18:	bl	15040 <test_json@@Base>
   15f1c:	mov	r7, r0
   15f20:	movw	r0, #469	; 0x1d5
   15f24:	str	r8, [sp]
   15f28:	str	r8, [sp, #4]
   15f2c:	str	r0, [sp, #8]
   15f30:	movw	r1, #15322	; 0x3bda
   15f34:	movt	r1, #3
   15f38:	movw	r2, #15707	; 0x3d5b
   15f3c:	movt	r2, #3
   15f40:	mov	r0, r4
   15f44:	mov	r3, #0
   15f48:	bl	15040 <test_json@@Base>
   15f4c:	movw	r1, #474	; 0x1da
   15f50:	str	r8, [sp]
   15f54:	str	r8, [sp, #4]
   15f58:	str	r1, [sp, #8]
   15f5c:	ldr	r1, [sp, #16]
   15f60:	orr	r1, sl, r1
   15f64:	orr	r1, r1, r5
   15f68:	orr	r1, r1, r6
   15f6c:	orr	r1, r1, r7
   15f70:	orr	r5, r1, r0
   15f74:	movw	r1, #16033	; 0x3ea1
   15f78:	movt	r1, #3
   15f7c:	mov	r0, r4
   15f80:	mov	r2, r9
   15f84:	mov	r3, #0
   15f88:	bl	15040 <test_json@@Base>
   15f8c:	orr	r0, r5, r0
   15f90:	sub	sp, fp, #28
   15f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015f98 <union_vector_tests@@Base>:
   15f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f9c:	add	fp, sp, #28
   15fa0:	sub	sp, sp, #12
   15fa4:	movw	r0, #485	; 0x1e5
   15fa8:	mov	r7, #0
   15fac:	str	r7, [sp]
   15fb0:	str	r7, [sp, #4]
   15fb4:	str	r0, [sp, #8]
   15fb8:	movw	r4, #23244	; 0x5acc
   15fbc:	movt	r4, #3
   15fc0:	movw	r1, #16174	; 0x3f2e
   15fc4:	movt	r1, #3
   15fc8:	movw	r8, #16238	; 0x3f6e
   15fcc:	movt	r8, #3
   15fd0:	mov	r0, r4
   15fd4:	mov	r2, r8
   15fd8:	mov	r3, #0
   15fdc:	bl	15040 <test_json@@Base>
   15fe0:	mov	r9, r0
   15fe4:	mov	r0, #488	; 0x1e8
   15fe8:	str	r7, [sp]
   15fec:	str	r7, [sp, #4]
   15ff0:	str	r0, [sp, #8]
   15ff4:	movw	r1, #16294	; 0x3fa6
   15ff8:	movt	r1, #3
   15ffc:	movw	r2, #16345	; 0x3fd9
   16000:	movt	r2, #3
   16004:	mov	r0, r4
   16008:	mov	r3, #0
   1600c:	bl	15040 <test_json@@Base>
   16010:	mov	sl, r0
   16014:	movw	r0, #491	; 0x1eb
   16018:	str	r7, [sp]
   1601c:	str	r7, [sp, #4]
   16020:	str	r0, [sp, #8]
   16024:	movw	r1, #16388	; 0x4004
   16028:	movt	r1, #3
   1602c:	movw	r2, #16465	; 0x4051
   16030:	movt	r2, #3
   16034:	mov	r0, r4
   16038:	mov	r3, #0
   1603c:	bl	15040 <test_json@@Base>
   16040:	mov	r6, r0
   16044:	movw	r0, #494	; 0x1ee
   16048:	str	r7, [sp]
   1604c:	str	r7, [sp, #4]
   16050:	str	r0, [sp, #8]
   16054:	movw	r1, #16533	; 0x4095
   16058:	movt	r1, #3
   1605c:	movw	r2, #16658	; 0x4112
   16060:	movt	r2, #3
   16064:	mov	r0, r4
   16068:	mov	r3, #0
   1606c:	bl	15040 <test_json@@Base>
   16070:	mov	r5, r0
   16074:	movw	r0, #497	; 0x1f1
   16078:	str	r7, [sp]
   1607c:	str	r7, [sp, #4]
   16080:	str	r0, [sp, #8]
   16084:	movw	r1, #16766	; 0x417e
   16088:	movt	r1, #3
   1608c:	mov	r0, r4
   16090:	mov	r2, r8
   16094:	mov	r3, #0
   16098:	bl	15040 <test_json@@Base>
   1609c:	mov	r1, #500	; 0x1f4
   160a0:	str	r7, [sp]
   160a4:	str	r7, [sp, #4]
   160a8:	str	r1, [sp, #8]
   160ac:	orr	r1, sl, r9
   160b0:	orr	r1, r1, r6
   160b4:	orr	r1, r1, r5
   160b8:	orr	r5, r1, r0
   160bc:	movw	r1, #16829	; 0x41bd
   160c0:	movt	r1, #3
   160c4:	movw	r2, #16931	; 0x4223
   160c8:	movt	r2, #3
   160cc:	mov	r0, r4
   160d0:	mov	r3, #0
   160d4:	bl	15040 <test_json@@Base>
   160d8:	orr	r0, r5, r0
   160dc:	sub	sp, fp, #28
   160e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000160e4 <main@@Base>:
   160e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	add	fp, sp, #28
   160ec:	sub	sp, sp, #284	; 0x11c
   160f0:	bl	154ac <edge_case_tests@@Base>
   160f4:	str	r0, [fp, #-32]	; 0xffffffe0
   160f8:	bl	15854 <error_case_tests@@Base>
   160fc:	str	r0, [fp, #-36]	; 0xffffffdc
   16100:	bl	15f98 <union_vector_tests@@Base>
   16104:	str	r0, [fp, #-40]	; 0xffffffd8
   16108:	bl	15bf4 <base64_tests@@Base>
   1610c:	str	r0, [fp, #-44]	; 0xffffffd4
   16110:	bl	15e18 <mixed_type_union_tests@@Base>
   16114:	str	r0, [fp, #-48]	; 0xffffffd0
   16118:	movw	r0, #525	; 0x20d
   1611c:	mov	r8, #0
   16120:	str	r8, [sp]
   16124:	str	r8, [sp, #4]
   16128:	str	r0, [sp, #8]
   1612c:	movw	r4, #23212	; 0x5aac
   16130:	movt	r4, #3
   16134:	movw	r1, #17023	; 0x427f
   16138:	movt	r1, #3
   1613c:	movw	sl, #8500	; 0x2134
   16140:	movt	sl, #3
   16144:	mov	r0, r4
   16148:	mov	r2, sl
   1614c:	mov	r3, #0
   16150:	bl	15040 <test_json@@Base>
   16154:	str	r0, [fp, #-52]	; 0xffffffcc
   16158:	mov	r0, #528	; 0x210
   1615c:	str	r8, [sp]
   16160:	str	r8, [sp, #4]
   16164:	str	r0, [sp, #8]
   16168:	movw	r1, #17046	; 0x4296
   1616c:	movt	r1, #3
   16170:	movw	r7, #17085	; 0x42bd
   16174:	movt	r7, #3
   16178:	mov	r0, r4
   1617c:	mov	r2, r7
   16180:	mov	r3, #0
   16184:	bl	15040 <test_json@@Base>
   16188:	str	r0, [fp, #-56]	; 0xffffffc8
   1618c:	movw	r0, #531	; 0x213
   16190:	str	r8, [sp]
   16194:	str	r8, [sp, #4]
   16198:	str	r0, [sp, #8]
   1619c:	movw	r1, #17118	; 0x42de
   161a0:	movt	r1, #3
   161a4:	movw	r6, #17158	; 0x4306
   161a8:	movt	r6, #3
   161ac:	mov	r0, r4
   161b0:	mov	r2, r6
   161b4:	mov	r3, #0
   161b8:	bl	15040 <test_json@@Base>
   161bc:	str	r0, [fp, #-60]	; 0xffffffc4
   161c0:	movw	r0, #534	; 0x216
   161c4:	str	r8, [sp]
   161c8:	str	r8, [sp, #4]
   161cc:	str	r0, [sp, #8]
   161d0:	movw	r1, #17193	; 0x4329
   161d4:	movt	r1, #3
   161d8:	movw	r9, #17242	; 0x435a
   161dc:	movt	r9, #3
   161e0:	mov	r0, r4
   161e4:	mov	r2, r9
   161e8:	mov	r3, #0
   161ec:	bl	15040 <test_json@@Base>
   161f0:	str	r0, [fp, #-64]	; 0xffffffc0
   161f4:	movw	r0, #537	; 0x219
   161f8:	str	r8, [sp]
   161fc:	str	r8, [sp, #4]
   16200:	str	r0, [sp, #8]
   16204:	movw	r1, #17286	; 0x4386
   16208:	movt	r1, #3
   1620c:	mov	r0, r4
   16210:	mov	r2, r9
   16214:	mov	r3, #0
   16218:	bl	15040 <test_json@@Base>
   1621c:	str	r0, [fp, #-68]	; 0xffffffbc
   16220:	mov	r0, #540	; 0x21c
   16224:	str	r8, [sp]
   16228:	str	r8, [sp, #4]
   1622c:	str	r0, [sp, #8]
   16230:	movw	r1, #17344	; 0x43c0
   16234:	movt	r1, #3
   16238:	mov	r0, r4
   1623c:	mov	r2, r7
   16240:	mov	r3, #0
   16244:	bl	15040 <test_json@@Base>
   16248:	str	r0, [fp, #-72]	; 0xffffffb8
   1624c:	movw	r0, #543	; 0x21f
   16250:	str	r8, [sp]
   16254:	str	r8, [sp, #4]
   16258:	str	r0, [sp, #8]
   1625c:	movw	r1, #17382	; 0x43e6
   16260:	movt	r1, #3
   16264:	mov	r0, r4
   16268:	mov	r2, r6
   1626c:	mov	r3, #0
   16270:	bl	15040 <test_json@@Base>
   16274:	str	r0, [fp, #-76]	; 0xffffffb4
   16278:	movw	r0, #547	; 0x223
   1627c:	str	r8, [sp]
   16280:	str	r8, [sp, #4]
   16284:	str	r0, [sp, #8]
   16288:	movw	r1, #17423	; 0x440f
   1628c:	movt	r1, #3
   16290:	mov	r0, r4
   16294:	mov	r2, sl
   16298:	mov	r3, #0
   1629c:	bl	15040 <test_json@@Base>
   162a0:	str	r0, [fp, #-80]	; 0xffffffb0
   162a4:	movw	r0, #551	; 0x227
   162a8:	str	r8, [sp]
   162ac:	str	r8, [sp, #4]
   162b0:	str	r0, [sp, #8]
   162b4:	movw	r1, #8365	; 0x20ad
   162b8:	movt	r1, #3
   162bc:	mov	r0, r4
   162c0:	mov	r2, sl
   162c4:	mov	r3, #0
   162c8:	bl	15040 <test_json@@Base>
   162cc:	str	r0, [fp, #-84]	; 0xffffffac
   162d0:	movw	r0, #555	; 0x22b
   162d4:	str	r8, [sp]
   162d8:	str	r8, [sp, #4]
   162dc:	str	r0, [sp, #8]
   162e0:	movw	r1, #17462	; 0x4436
   162e4:	movt	r1, #3
   162e8:	mov	r0, r4
   162ec:	mov	r2, sl
   162f0:	mov	r3, #0
   162f4:	bl	15040 <test_json@@Base>
   162f8:	str	r0, [fp, #-88]	; 0xffffffa8
   162fc:	movw	r0, #558	; 0x22e
   16300:	str	r8, [sp]
   16304:	str	r8, [sp, #4]
   16308:	str	r0, [sp, #8]
   1630c:	movw	r1, #17483	; 0x444b
   16310:	movt	r1, #3
   16314:	mov	r0, r4
   16318:	mov	r2, r7
   1631c:	mov	r3, #0
   16320:	bl	15040 <test_json@@Base>
   16324:	str	r0, [fp, #-92]	; 0xffffffa4
   16328:	movw	r0, #561	; 0x231
   1632c:	str	r8, [sp]
   16330:	str	r8, [sp, #4]
   16334:	str	r0, [sp, #8]
   16338:	movw	r1, #17518	; 0x446e
   1633c:	movt	r1, #3
   16340:	mov	r0, r4
   16344:	mov	r2, r6
   16348:	mov	r3, #0
   1634c:	bl	15040 <test_json@@Base>
   16350:	str	r0, [fp, #-96]	; 0xffffffa0
   16354:	mov	r0, #564	; 0x234
   16358:	str	r8, [sp]
   1635c:	str	r8, [sp, #4]
   16360:	str	r0, [sp, #8]
   16364:	movw	r1, #17554	; 0x4492
   16368:	movt	r1, #3
   1636c:	mov	r0, r4
   16370:	mov	r2, r9
   16374:	mov	r3, #0
   16378:	bl	15040 <test_json@@Base>
   1637c:	str	r0, [fp, #-100]	; 0xffffff9c
   16380:	movw	r0, #567	; 0x237
   16384:	str	r8, [sp]
   16388:	str	r8, [sp, #4]
   1638c:	str	r0, [sp, #8]
   16390:	movw	r1, #17599	; 0x44bf
   16394:	movt	r1, #3
   16398:	mov	r0, r4
   1639c:	mov	r2, r9
   163a0:	mov	r3, #0
   163a4:	bl	15040 <test_json@@Base>
   163a8:	str	r0, [fp, #-104]	; 0xffffff98
   163ac:	movw	r0, #570	; 0x23a
   163b0:	str	r8, [sp]
   163b4:	str	r8, [sp, #4]
   163b8:	str	r0, [sp, #8]
   163bc:	movw	r1, #17653	; 0x44f5
   163c0:	movt	r1, #3
   163c4:	mov	r0, r4
   163c8:	mov	r2, r7
   163cc:	mov	r3, #0
   163d0:	bl	15040 <test_json@@Base>
   163d4:	str	r0, [fp, #-108]	; 0xffffff94
   163d8:	movw	r0, #573	; 0x23d
   163dc:	str	r8, [sp]
   163e0:	str	r8, [sp, #4]
   163e4:	str	r0, [sp, #8]
   163e8:	movw	r1, #17685	; 0x4515
   163ec:	movt	r1, #3
   163f0:	mov	r0, r4
   163f4:	mov	r2, r6
   163f8:	mov	r3, #0
   163fc:	bl	15040 <test_json@@Base>
   16400:	str	r0, [fp, #-112]	; 0xffffff90
   16404:	movw	r0, #577	; 0x241
   16408:	str	r8, [sp]
   1640c:	str	r8, [sp, #4]
   16410:	str	r0, [sp, #8]
   16414:	movw	r1, #17719	; 0x4537
   16418:	movt	r1, #3
   1641c:	mov	r0, r4
   16420:	mov	r2, sl
   16424:	mov	r3, #0
   16428:	bl	15040 <test_json@@Base>
   1642c:	str	r0, [fp, #-116]	; 0xffffff8c
   16430:	movw	r0, #581	; 0x245
   16434:	str	r8, [sp]
   16438:	str	r8, [sp, #4]
   1643c:	str	r0, [sp, #8]
   16440:	movw	r1, #9078	; 0x2376
   16444:	movt	r1, #3
   16448:	mov	r0, r4
   1644c:	mov	r2, sl
   16450:	mov	r3, #0
   16454:	bl	15040 <test_json@@Base>
   16458:	str	r0, [fp, #-120]	; 0xffffff88
   1645c:	movw	r0, #585	; 0x249
   16460:	str	r8, [sp]
   16464:	str	r8, [sp, #4]
   16468:	str	r0, [sp, #8]
   1646c:	movw	r1, #17752	; 0x4558
   16470:	movt	r1, #3
   16474:	movw	r5, #17790	; 0x457e
   16478:	movt	r5, #3
   1647c:	mov	r0, r4
   16480:	mov	r2, r5
   16484:	mov	r3, #0
   16488:	bl	15040 <test_json@@Base>
   1648c:	str	r0, [fp, #-124]	; 0xffffff84
   16490:	movw	r0, #591	; 0x24f
   16494:	str	r8, [sp]
   16498:	str	r8, [sp, #4]
   1649c:	str	r0, [sp, #8]
   164a0:	movw	r1, #17829	; 0x45a5
   164a4:	movt	r1, #3
   164a8:	mov	r0, r4
   164ac:	mov	r2, r5
   164b0:	mov	r3, #0
   164b4:	bl	15040 <test_json@@Base>
   164b8:	str	r0, [fp, #-128]	; 0xffffff80
   164bc:	movw	r0, #594	; 0x252
   164c0:	str	r8, [sp]
   164c4:	str	r8, [sp, #4]
   164c8:	str	r0, [sp, #8]
   164cc:	movw	r1, #17866	; 0x45ca
   164d0:	movt	r1, #3
   164d4:	mov	r0, r4
   164d8:	mov	r2, r5
   164dc:	mov	r3, #0
   164e0:	bl	15040 <test_json@@Base>
   164e4:	str	r0, [fp, #-132]	; 0xffffff7c
   164e8:	movw	r0, #597	; 0x255
   164ec:	str	r8, [sp]
   164f0:	str	r8, [sp, #4]
   164f4:	str	r0, [sp, #8]
   164f8:	movw	r1, #17903	; 0x45ef
   164fc:	movt	r1, #3
   16500:	mov	r0, r4
   16504:	mov	r2, r9
   16508:	mov	r3, #0
   1650c:	bl	15040 <test_json@@Base>
   16510:	str	r0, [fp, #-136]	; 0xffffff78
   16514:	movw	r0, #601	; 0x259
   16518:	str	r8, [sp]
   1651c:	str	r8, [sp, #4]
   16520:	str	r0, [sp, #8]
   16524:	movw	r1, #17949	; 0x461d
   16528:	movt	r1, #3
   1652c:	mov	r0, r4
   16530:	mov	r2, r7
   16534:	mov	r3, #0
   16538:	bl	15040 <test_json@@Base>
   1653c:	str	r0, [fp, #-140]	; 0xffffff74
   16540:	mov	r0, #604	; 0x25c
   16544:	str	r8, [sp]
   16548:	str	r8, [sp, #4]
   1654c:	str	r0, [sp, #8]
   16550:	movw	r1, #17982	; 0x463e
   16554:	movt	r1, #3
   16558:	mov	r0, r4
   1655c:	mov	r2, r6
   16560:	mov	r3, #0
   16564:	bl	15040 <test_json@@Base>
   16568:	str	r0, [fp, #-144]	; 0xffffff70
   1656c:	movw	r0, #607	; 0x25f
   16570:	str	r8, [sp]
   16574:	str	r8, [sp, #4]
   16578:	str	r0, [sp, #8]
   1657c:	movw	r1, #18015	; 0x465f
   16580:	movt	r1, #3
   16584:	movw	r2, #18048	; 0x4680
   16588:	movt	r2, #3
   1658c:	mov	r0, r4
   16590:	mov	r3, #0
   16594:	bl	15040 <test_json@@Base>
   16598:	str	r0, [fp, #-148]	; 0xffffff6c
   1659c:	movw	r0, #610	; 0x262
   165a0:	str	r8, [sp]
   165a4:	str	r8, [sp, #4]
   165a8:	str	r0, [sp, #8]
   165ac:	movw	r1, #18086	; 0x46a6
   165b0:	movt	r1, #3
   165b4:	mov	r0, r4
   165b8:	mov	r2, r9
   165bc:	mov	r3, #0
   165c0:	bl	15040 <test_json@@Base>
   165c4:	str	r0, [fp, #-152]	; 0xffffff68
   165c8:	movw	r0, #613	; 0x265
   165cc:	str	r8, [sp]
   165d0:	str	r8, [sp, #4]
   165d4:	str	r0, [sp, #8]
   165d8:	movw	r1, #18120	; 0x46c8
   165dc:	movt	r1, #3
   165e0:	movw	r2, #18154	; 0x46ea
   165e4:	movt	r2, #3
   165e8:	mov	r0, r4
   165ec:	mov	r3, #0
   165f0:	bl	15040 <test_json@@Base>
   165f4:	str	r0, [sp, #156]	; 0x9c
   165f8:	mov	r0, #616	; 0x268
   165fc:	str	r8, [sp]
   16600:	str	r8, [sp, #4]
   16604:	str	r0, [sp, #8]
   16608:	movw	r1, #18184	; 0x4708
   1660c:	movt	r1, #3
   16610:	movw	r2, #18218	; 0x472a
   16614:	movt	r2, #3
   16618:	mov	r0, r4
   1661c:	mov	r3, #0
   16620:	bl	15040 <test_json@@Base>
   16624:	str	r0, [sp, #152]	; 0x98
   16628:	movw	r0, #619	; 0x26b
   1662c:	str	r8, [sp]
   16630:	str	r8, [sp, #4]
   16634:	str	r0, [sp, #8]
   16638:	movw	r1, #18248	; 0x4748
   1663c:	movt	r1, #3
   16640:	movw	r2, #18281	; 0x4769
   16644:	movt	r2, #3
   16648:	mov	r0, r4
   1664c:	mov	r3, #0
   16650:	bl	15040 <test_json@@Base>
   16654:	str	r0, [sp, #148]	; 0x94
   16658:	movw	r0, #622	; 0x26e
   1665c:	str	r8, [sp]
   16660:	str	r8, [sp, #4]
   16664:	str	r0, [sp, #8]
   16668:	movw	r1, #18310	; 0x4786
   1666c:	movt	r1, #3
   16670:	mov	r0, r4
   16674:	mov	r2, r7
   16678:	mov	r3, #0
   1667c:	bl	15040 <test_json@@Base>
   16680:	str	r0, [sp, #144]	; 0x90
   16684:	movw	r0, #625	; 0x271
   16688:	str	r8, [sp]
   1668c:	str	r8, [sp, #4]
   16690:	str	r0, [sp, #8]
   16694:	movw	r1, #18353	; 0x47b1
   16698:	movt	r1, #3
   1669c:	mov	r0, r4
   166a0:	mov	r2, r7
   166a4:	mov	r3, #0
   166a8:	bl	15040 <test_json@@Base>
   166ac:	str	r0, [sp, #140]	; 0x8c
   166b0:	mov	r0, #628	; 0x274
   166b4:	str	r8, [sp]
   166b8:	str	r8, [sp, #4]
   166bc:	str	r0, [sp, #8]
   166c0:	movw	r6, #18411	; 0x47eb
   166c4:	movt	r6, #3
   166c8:	movw	r5, #18453	; 0x4815
   166cc:	movt	r5, #3
   166d0:	mov	r0, r4
   166d4:	mov	r1, r6
   166d8:	mov	r2, r5
   166dc:	mov	r3, #0
   166e0:	bl	15040 <test_json@@Base>
   166e4:	str	r0, [sp, #136]	; 0x88
   166e8:	movw	r0, #631	; 0x277
   166ec:	str	r8, [sp]
   166f0:	str	r8, [sp, #4]
   166f4:	str	r0, [sp, #8]
   166f8:	mov	r0, r4
   166fc:	mov	r1, r6
   16700:	mov	r2, r5
   16704:	mov	r3, #0
   16708:	bl	15040 <test_json@@Base>
   1670c:	str	r0, [sp, #132]	; 0x84
   16710:	movw	r0, #634	; 0x27a
   16714:	str	r8, [sp]
   16718:	str	r8, [sp, #4]
   1671c:	str	r0, [sp, #8]
   16720:	movw	r1, #18479	; 0x482f
   16724:	movt	r1, #3
   16728:	movw	r2, #18560	; 0x4880
   1672c:	movt	r2, #3
   16730:	mov	r0, r4
   16734:	mov	r3, #0
   16738:	bl	15040 <test_json@@Base>
   1673c:	str	r0, [sp, #128]	; 0x80
   16740:	movw	r0, #638	; 0x27e
   16744:	str	r8, [sp]
   16748:	str	r8, [sp, #4]
   1674c:	str	r0, [sp, #8]
   16750:	movw	r1, #18631	; 0x48c7
   16754:	movt	r1, #3
   16758:	movw	r2, #18716	; 0x491c
   1675c:	movt	r2, #3
   16760:	mov	r0, r4
   16764:	mov	r3, #0
   16768:	bl	15040 <test_json@@Base>
   1676c:	str	r0, [sp, #124]	; 0x7c
   16770:	movw	r0, #642	; 0x282
   16774:	str	r8, [sp]
   16778:	str	r8, [sp, #4]
   1677c:	str	r0, [sp, #8]
   16780:	movw	r1, #18790	; 0x4966
   16784:	movt	r1, #3
   16788:	movw	r2, #18901	; 0x49d5
   1678c:	movt	r2, #3
   16790:	mov	r0, r4
   16794:	mov	r3, #0
   16798:	bl	15040 <test_json@@Base>
   1679c:	str	r0, [sp, #120]	; 0x78
   167a0:	movw	r0, #646	; 0x286
   167a4:	str	r8, [sp]
   167a8:	str	r8, [sp, #4]
   167ac:	str	r0, [sp, #8]
   167b0:	movw	r1, #18999	; 0x4a37
   167b4:	movt	r1, #3
   167b8:	mov	r0, r4
   167bc:	mov	r2, sl
   167c0:	mov	r3, #0
   167c4:	bl	15040 <test_json@@Base>
   167c8:	str	r0, [sp, #116]	; 0x74
   167cc:	movw	r0, #649	; 0x289
   167d0:	str	r8, [sp]
   167d4:	str	r8, [sp, #4]
   167d8:	str	r0, [sp, #8]
   167dc:	movw	r1, #19042	; 0x4a62
   167e0:	movt	r1, #3
   167e4:	mov	r0, r4
   167e8:	mov	r2, sl
   167ec:	mov	r3, #0
   167f0:	bl	15040 <test_json@@Base>
   167f4:	str	r0, [sp, #112]	; 0x70
   167f8:	movw	r0, #653	; 0x28d
   167fc:	str	r8, [sp]
   16800:	str	r8, [sp, #4]
   16804:	str	r0, [sp, #8]
   16808:	movw	r1, #19080	; 0x4a88
   1680c:	movt	r1, #3
   16810:	mov	r0, r4
   16814:	mov	r2, r7
   16818:	mov	r3, #0
   1681c:	bl	15040 <test_json@@Base>
   16820:	str	r0, [sp, #108]	; 0x6c
   16824:	mov	r0, #656	; 0x290
   16828:	str	r8, [sp]
   1682c:	str	r8, [sp, #4]
   16830:	str	r0, [sp, #8]
   16834:	movw	r1, #19109	; 0x4aa5
   16838:	movt	r1, #3
   1683c:	mov	r0, r4
   16840:	movw	r2, #17158	; 0x4306
   16844:	movt	r2, #3
   16848:	mov	r3, #0
   1684c:	bl	15040 <test_json@@Base>
   16850:	str	r0, [sp, #104]	; 0x68
   16854:	movw	r0, #659	; 0x293
   16858:	str	r8, [sp]
   1685c:	str	r8, [sp, #4]
   16860:	str	r0, [sp, #8]
   16864:	movw	r1, #19138	; 0x4ac2
   16868:	movt	r1, #3
   1686c:	mov	r0, r4
   16870:	movw	r2, #18048	; 0x4680
   16874:	movt	r2, #3
   16878:	mov	r3, #0
   1687c:	bl	15040 <test_json@@Base>
   16880:	str	r0, [sp, #100]	; 0x64
   16884:	movw	r0, #662	; 0x296
   16888:	str	r8, [sp]
   1688c:	str	r8, [sp, #4]
   16890:	str	r0, [sp, #8]
   16894:	movw	r1, #19167	; 0x4adf
   16898:	movt	r1, #3
   1689c:	mov	r0, r4
   168a0:	mov	r2, r9
   168a4:	mov	r3, #0
   168a8:	bl	15040 <test_json@@Base>
   168ac:	str	r0, [sp, #96]	; 0x60
   168b0:	movw	r0, #665	; 0x299
   168b4:	str	r8, [sp]
   168b8:	str	r8, [sp, #4]
   168bc:	str	r0, [sp, #8]
   168c0:	movw	r1, #19197	; 0x4afd
   168c4:	movt	r1, #3
   168c8:	mov	r0, r4
   168cc:	movw	r2, #18154	; 0x46ea
   168d0:	movt	r2, #3
   168d4:	mov	r3, #0
   168d8:	bl	15040 <test_json@@Base>
   168dc:	str	r0, [sp, #92]	; 0x5c
   168e0:	mov	r0, #668	; 0x29c
   168e4:	str	r8, [sp]
   168e8:	str	r8, [sp, #4]
   168ec:	str	r0, [sp, #8]
   168f0:	movw	r1, #19227	; 0x4b1b
   168f4:	movt	r1, #3
   168f8:	mov	r0, r4
   168fc:	movw	r2, #18218	; 0x472a
   16900:	movt	r2, #3
   16904:	mov	r3, #0
   16908:	bl	15040 <test_json@@Base>
   1690c:	str	r0, [sp, #88]	; 0x58
   16910:	movw	r0, #671	; 0x29f
   16914:	str	r8, [sp]
   16918:	str	r8, [sp, #4]
   1691c:	str	r0, [sp, #8]
   16920:	movw	r1, #19257	; 0x4b39
   16924:	movt	r1, #3
   16928:	mov	r0, r4
   1692c:	movw	r2, #18281	; 0x4769
   16930:	movt	r2, #3
   16934:	mov	r3, #0
   16938:	bl	15040 <test_json@@Base>
   1693c:	str	r0, [sp, #84]	; 0x54
   16940:	movw	r0, #674	; 0x2a2
   16944:	str	r8, [sp]
   16948:	str	r8, [sp, #4]
   1694c:	str	r0, [sp, #8]
   16950:	movw	r1, #19286	; 0x4b56
   16954:	movt	r1, #3
   16958:	mov	r0, r4
   1695c:	mov	r2, r7
   16960:	mov	r3, #0
   16964:	bl	15040 <test_json@@Base>
   16968:	str	r0, [sp, #80]	; 0x50
   1696c:	movw	r0, #677	; 0x2a5
   16970:	str	r8, [sp]
   16974:	str	r8, [sp, #4]
   16978:	str	r0, [sp, #8]
   1697c:	movw	r1, #19323	; 0x4b7b
   16980:	movt	r1, #3
   16984:	mov	r0, r4
   16988:	mov	r2, r7
   1698c:	mov	r3, #0
   16990:	bl	15040 <test_json@@Base>
   16994:	str	r0, [sp, #76]	; 0x4c
   16998:	mov	r0, #680	; 0x2a8
   1699c:	str	r8, [sp]
   169a0:	str	r8, [sp, #4]
   169a4:	str	r0, [sp, #8]
   169a8:	movw	r6, #19375	; 0x4baf
   169ac:	movt	r6, #3
   169b0:	mov	r0, r4
   169b4:	mov	r1, r6
   169b8:	mov	r2, r5
   169bc:	mov	r3, #0
   169c0:	bl	15040 <test_json@@Base>
   169c4:	str	r0, [sp, #72]	; 0x48
   169c8:	movw	r0, #683	; 0x2ab
   169cc:	str	r8, [sp]
   169d0:	str	r8, [sp, #4]
   169d4:	str	r0, [sp, #8]
   169d8:	mov	r0, r4
   169dc:	mov	r1, r6
   169e0:	mov	r2, r5
   169e4:	mov	r3, #0
   169e8:	bl	15040 <test_json@@Base>
   169ec:	str	r0, [sp, #68]	; 0x44
   169f0:	movw	r0, #686	; 0x2ae
   169f4:	str	r8, [sp]
   169f8:	str	r8, [sp, #4]
   169fc:	str	r0, [sp, #8]
   16a00:	movw	r1, #19411	; 0x4bd3
   16a04:	movt	r1, #3
   16a08:	mov	r0, r4
   16a0c:	movw	r2, #18560	; 0x4880
   16a10:	movt	r2, #3
   16a14:	mov	r3, #0
   16a18:	bl	15040 <test_json@@Base>
   16a1c:	str	r0, [sp, #64]	; 0x40
   16a20:	movw	r0, #690	; 0x2b2
   16a24:	str	r8, [sp]
   16a28:	str	r8, [sp, #4]
   16a2c:	str	r0, [sp, #8]
   16a30:	movw	r1, #19482	; 0x4c1a
   16a34:	movt	r1, #3
   16a38:	mov	r0, r4
   16a3c:	movw	r2, #18716	; 0x491c
   16a40:	movt	r2, #3
   16a44:	mov	r3, #0
   16a48:	bl	15040 <test_json@@Base>
   16a4c:	str	r0, [sp, #60]	; 0x3c
   16a50:	movw	r0, #694	; 0x2b6
   16a54:	str	r8, [sp]
   16a58:	str	r8, [sp, #4]
   16a5c:	str	r0, [sp, #8]
   16a60:	movw	r1, #19557	; 0x4c65
   16a64:	movt	r1, #3
   16a68:	mov	r0, r4
   16a6c:	movw	r2, #18901	; 0x49d5
   16a70:	movt	r2, #3
   16a74:	mov	r3, #0
   16a78:	bl	15040 <test_json@@Base>
   16a7c:	str	r0, [sp, #56]	; 0x38
   16a80:	movw	r0, #698	; 0x2ba
   16a84:	str	r8, [sp]
   16a88:	str	r8, [sp, #4]
   16a8c:	str	r0, [sp, #8]
   16a90:	movw	r1, #19652	; 0x4cc4
   16a94:	movt	r1, #3
   16a98:	mov	r0, r4
   16a9c:	mov	r2, sl
   16aa0:	mov	r3, #0
   16aa4:	bl	15040 <test_json@@Base>
   16aa8:	str	r0, [sp, #52]	; 0x34
   16aac:	movw	r0, #701	; 0x2bd
   16ab0:	str	r8, [sp]
   16ab4:	str	r8, [sp, #4]
   16ab8:	str	r0, [sp, #8]
   16abc:	movw	r1, #19689	; 0x4ce9
   16ac0:	movt	r1, #3
   16ac4:	mov	r0, r4
   16ac8:	mov	r2, sl
   16acc:	mov	r3, #0
   16ad0:	bl	15040 <test_json@@Base>
   16ad4:	str	r0, [sp, #48]	; 0x30
   16ad8:	movw	r0, #711	; 0x2c7
   16adc:	str	r8, [sp]
   16ae0:	str	r8, [sp, #4]
   16ae4:	str	r0, [sp, #8]
   16ae8:	movw	r1, #19723	; 0x4d0b
   16aec:	movt	r1, #3
   16af0:	movw	r5, #19816	; 0x4d68
   16af4:	movt	r5, #3
   16af8:	mov	r0, r4
   16afc:	mov	r2, r5
   16b00:	mov	r3, #0
   16b04:	bl	15040 <test_json@@Base>
   16b08:	str	r0, [sp, #44]	; 0x2c
   16b0c:	mov	r0, #716	; 0x2cc
   16b10:	str	r8, [sp]
   16b14:	str	r8, [sp, #4]
   16b18:	str	r0, [sp, #8]
   16b1c:	movw	r1, #19910	; 0x4dc6
   16b20:	movt	r1, #3
   16b24:	mov	r0, r4
   16b28:	mov	r2, r5
   16b2c:	mov	r3, #0
   16b30:	bl	15040 <test_json@@Base>
   16b34:	str	r0, [sp, #40]	; 0x28
   16b38:	movw	r0, #731	; 0x2db
   16b3c:	str	r8, [sp]
   16b40:	str	r8, [sp, #4]
   16b44:	str	r0, [sp, #8]
   16b48:	movw	r1, #20019	; 0x4e33
   16b4c:	movt	r1, #3
   16b50:	movw	r2, #20080	; 0x4e70
   16b54:	movt	r2, #3
   16b58:	mov	r0, r4
   16b5c:	mov	r3, #0
   16b60:	bl	15040 <test_json@@Base>
   16b64:	str	r0, [sp, #36]	; 0x24
   16b68:	movw	r0, #734	; 0x2de
   16b6c:	str	r8, [sp]
   16b70:	str	r8, [sp, #4]
   16b74:	str	r0, [sp, #8]
   16b78:	movw	r1, #20128	; 0x4ea0
   16b7c:	movt	r1, #3
   16b80:	movw	r2, #20154	; 0x4eba
   16b84:	movt	r2, #3
   16b88:	mov	r0, r4
   16b8c:	mov	r3, #0
   16b90:	bl	15040 <test_json@@Base>
   16b94:	str	r0, [sp, #32]
   16b98:	movw	r0, #738	; 0x2e2
   16b9c:	str	r8, [sp]
   16ba0:	str	r8, [sp, #4]
   16ba4:	str	r0, [sp, #8]
   16ba8:	movw	r1, #20172	; 0x4ecc
   16bac:	movt	r1, #3
   16bb0:	movw	r5, #20244	; 0x4f14
   16bb4:	movt	r5, #3
   16bb8:	mov	r0, r4
   16bbc:	mov	r2, r5
   16bc0:	mov	r3, #0
   16bc4:	bl	15040 <test_json@@Base>
   16bc8:	str	r0, [sp, #28]
   16bcc:	movw	r0, #750	; 0x2ee
   16bd0:	str	r8, [sp]
   16bd4:	str	r8, [sp, #4]
   16bd8:	str	r0, [sp, #8]
   16bdc:	movw	r1, #20309	; 0x4f55
   16be0:	movt	r1, #3
   16be4:	mov	r0, r4
   16be8:	mov	r2, r5
   16bec:	mov	r3, #0
   16bf0:	bl	15040 <test_json@@Base>
   16bf4:	str	r0, [sp, #24]
   16bf8:	movw	r0, #766	; 0x2fe
   16bfc:	str	r8, [sp]
   16c00:	str	r8, [sp, #4]
   16c04:	str	r0, [sp, #8]
   16c08:	movw	r1, #20466	; 0x4ff2
   16c0c:	movt	r1, #3
   16c10:	movw	r2, #20505	; 0x5019
   16c14:	movt	r2, #3
   16c18:	mov	r0, r4
   16c1c:	mov	r3, #0
   16c20:	bl	15040 <test_json@@Base>
   16c24:	str	r0, [sp, #20]
   16c28:	movw	r0, #770	; 0x302
   16c2c:	str	r8, [sp]
   16c30:	str	r8, [sp, #4]
   16c34:	str	r0, [sp, #8]
   16c38:	movw	r1, #20539	; 0x503b
   16c3c:	movt	r1, #3
   16c40:	movw	r2, #20586	; 0x506a
   16c44:	movt	r2, #3
   16c48:	mov	r0, r4
   16c4c:	mov	r3, #0
   16c50:	bl	15040 <test_json@@Base>
   16c54:	str	r0, [sp, #16]
   16c58:	mov	r0, #776	; 0x308
   16c5c:	str	r8, [sp]
   16c60:	str	r8, [sp, #4]
   16c64:	str	r0, [sp, #8]
   16c68:	movw	r1, #20628	; 0x5094
   16c6c:	movt	r1, #3
   16c70:	movw	r2, #20751	; 0x510f
   16c74:	movt	r2, #3
   16c78:	mov	r0, r4
   16c7c:	mov	r3, #0
   16c80:	bl	15040 <test_json@@Base>
   16c84:	mov	r7, r0
   16c88:	movw	r0, #781	; 0x30d
   16c8c:	str	r8, [sp]
   16c90:	str	r8, [sp, #4]
   16c94:	str	r0, [sp, #8]
   16c98:	movw	r1, #20863	; 0x517f
   16c9c:	movt	r1, #3
   16ca0:	mov	r0, r4
   16ca4:	mov	r2, sl
   16ca8:	mov	r3, #0
   16cac:	bl	15040 <test_json@@Base>
   16cb0:	mov	r5, r0
   16cb4:	movw	r0, #786	; 0x312
   16cb8:	str	r8, [sp]
   16cbc:	str	r8, [sp, #4]
   16cc0:	str	r0, [sp, #8]
   16cc4:	movw	r1, #20983	; 0x51f7
   16cc8:	movt	r1, #3
   16ccc:	movw	r2, #21105	; 0x5271
   16cd0:	movt	r2, #3
   16cd4:	mov	r0, r4
   16cd8:	mov	r3, #0
   16cdc:	bl	15040 <test_json@@Base>
   16ce0:	mov	r6, r0
   16ce4:	movw	r0, #791	; 0x317
   16ce8:	str	r8, [sp]
   16cec:	str	r8, [sp, #4]
   16cf0:	str	r0, [sp, #8]
   16cf4:	movw	r1, #21216	; 0x52e0
   16cf8:	movt	r1, #3
   16cfc:	movw	r2, #21355	; 0x536b
   16d00:	movt	r2, #3
   16d04:	mov	r0, r4
   16d08:	mov	r3, #0
   16d0c:	bl	15040 <test_json@@Base>
   16d10:	mov	sl, r0
   16d14:	mov	r0, #796	; 0x31c
   16d18:	str	r8, [sp]
   16d1c:	str	r8, [sp, #4]
   16d20:	str	r0, [sp, #8]
   16d24:	movw	r1, #21481	; 0x53e9
   16d28:	movt	r1, #3
   16d2c:	movw	r2, #21604	; 0x5464
   16d30:	movt	r2, #3
   16d34:	mov	r0, r4
   16d38:	mov	r3, #0
   16d3c:	bl	15040 <test_json@@Base>
   16d40:	mov	r9, r0
   16d44:	movw	r0, #801	; 0x321
   16d48:	str	r8, [sp]
   16d4c:	str	r8, [sp, #4]
   16d50:	str	r0, [sp, #8]
   16d54:	movw	r1, #21716	; 0x54d4
   16d58:	movt	r1, #3
   16d5c:	movw	r2, #21854	; 0x555e
   16d60:	movt	r2, #3
   16d64:	mov	r0, r4
   16d68:	mov	r3, #0
   16d6c:	bl	15040 <test_json@@Base>
   16d70:	movw	r1, #806	; 0x326
   16d74:	str	r8, [sp]
   16d78:	str	r8, [sp, #4]
   16d7c:	str	r1, [sp, #8]
   16d80:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16d84:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16d88:	orr	r1, r2, r1
   16d8c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16d90:	orr	r1, r1, r2
   16d94:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16d98:	orr	r1, r1, r2
   16d9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16da0:	orr	r1, r1, r2
   16da4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16da8:	orr	r1, r1, r2
   16dac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16db0:	orr	r1, r1, r2
   16db4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16db8:	orr	r1, r1, r2
   16dbc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16dc0:	orr	r1, r1, r2
   16dc4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16dc8:	orr	r1, r1, r2
   16dcc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16dd0:	orr	r1, r1, r2
   16dd4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16dd8:	orr	r1, r1, r2
   16ddc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16de0:	orr	r1, r1, r2
   16de4:	ldr	r2, [fp, #-84]	; 0xffffffac
   16de8:	orr	r1, r1, r2
   16dec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16df0:	orr	r1, r1, r2
   16df4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16df8:	orr	r1, r1, r2
   16dfc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16e00:	orr	r1, r1, r2
   16e04:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16e08:	orr	r1, r1, r2
   16e0c:	ldr	r2, [fp, #-104]	; 0xffffff98
   16e10:	orr	r1, r1, r2
   16e14:	ldr	r2, [fp, #-108]	; 0xffffff94
   16e18:	orr	r1, r1, r2
   16e1c:	ldr	r2, [fp, #-112]	; 0xffffff90
   16e20:	orr	r1, r1, r2
   16e24:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16e28:	orr	r1, r1, r2
   16e2c:	ldr	r2, [fp, #-120]	; 0xffffff88
   16e30:	orr	r1, r1, r2
   16e34:	ldr	r2, [fp, #-124]	; 0xffffff84
   16e38:	orr	r1, r1, r2
   16e3c:	ldr	r2, [fp, #-128]	; 0xffffff80
   16e40:	orr	r1, r1, r2
   16e44:	ldr	r2, [fp, #-132]	; 0xffffff7c
   16e48:	orr	r1, r1, r2
   16e4c:	ldr	r2, [fp, #-136]	; 0xffffff78
   16e50:	orr	r1, r1, r2
   16e54:	ldr	r2, [fp, #-140]	; 0xffffff74
   16e58:	orr	r1, r1, r2
   16e5c:	ldr	r2, [fp, #-144]	; 0xffffff70
   16e60:	orr	r1, r1, r2
   16e64:	ldr	r2, [fp, #-148]	; 0xffffff6c
   16e68:	orr	r1, r1, r2
   16e6c:	ldr	r2, [fp, #-152]	; 0xffffff68
   16e70:	orr	r1, r1, r2
   16e74:	ldr	r2, [sp, #156]	; 0x9c
   16e78:	orr	r1, r1, r2
   16e7c:	ldr	r2, [sp, #152]	; 0x98
   16e80:	orr	r1, r1, r2
   16e84:	ldr	r2, [sp, #148]	; 0x94
   16e88:	orr	r1, r1, r2
   16e8c:	ldr	r2, [sp, #144]	; 0x90
   16e90:	orr	r1, r1, r2
   16e94:	ldr	r2, [sp, #140]	; 0x8c
   16e98:	orr	r1, r1, r2
   16e9c:	ldr	r2, [sp, #136]	; 0x88
   16ea0:	orr	r1, r1, r2
   16ea4:	ldr	r2, [sp, #132]	; 0x84
   16ea8:	orr	r1, r1, r2
   16eac:	ldr	r2, [sp, #128]	; 0x80
   16eb0:	orr	r1, r1, r2
   16eb4:	ldr	r2, [sp, #124]	; 0x7c
   16eb8:	orr	r1, r1, r2
   16ebc:	ldr	r2, [sp, #120]	; 0x78
   16ec0:	orr	r1, r1, r2
   16ec4:	ldr	r2, [sp, #116]	; 0x74
   16ec8:	orr	r1, r1, r2
   16ecc:	ldr	r2, [sp, #112]	; 0x70
   16ed0:	orr	r1, r1, r2
   16ed4:	ldr	r2, [sp, #108]	; 0x6c
   16ed8:	orr	r1, r1, r2
   16edc:	ldr	r2, [sp, #104]	; 0x68
   16ee0:	orr	r1, r1, r2
   16ee4:	ldr	r2, [sp, #100]	; 0x64
   16ee8:	orr	r1, r1, r2
   16eec:	ldr	r2, [sp, #96]	; 0x60
   16ef0:	orr	r1, r1, r2
   16ef4:	ldr	r2, [sp, #92]	; 0x5c
   16ef8:	orr	r1, r1, r2
   16efc:	ldr	r2, [sp, #88]	; 0x58
   16f00:	orr	r1, r1, r2
   16f04:	ldr	r2, [sp, #84]	; 0x54
   16f08:	orr	r1, r1, r2
   16f0c:	ldr	r2, [sp, #80]	; 0x50
   16f10:	orr	r1, r1, r2
   16f14:	ldr	r2, [sp, #76]	; 0x4c
   16f18:	orr	r1, r1, r2
   16f1c:	ldr	r2, [sp, #72]	; 0x48
   16f20:	orr	r1, r1, r2
   16f24:	ldr	r2, [sp, #68]	; 0x44
   16f28:	orr	r1, r1, r2
   16f2c:	ldr	r2, [sp, #64]	; 0x40
   16f30:	orr	r1, r1, r2
   16f34:	ldr	r2, [sp, #60]	; 0x3c
   16f38:	orr	r1, r1, r2
   16f3c:	ldr	r2, [sp, #56]	; 0x38
   16f40:	orr	r1, r1, r2
   16f44:	ldr	r2, [sp, #52]	; 0x34
   16f48:	orr	r1, r1, r2
   16f4c:	ldr	r2, [sp, #48]	; 0x30
   16f50:	orr	r1, r1, r2
   16f54:	ldr	r2, [sp, #44]	; 0x2c
   16f58:	orr	r1, r1, r2
   16f5c:	ldr	r2, [sp, #40]	; 0x28
   16f60:	orr	r1, r1, r2
   16f64:	ldr	r2, [sp, #36]	; 0x24
   16f68:	orr	r1, r1, r2
   16f6c:	ldr	r2, [sp, #32]
   16f70:	orr	r1, r1, r2
   16f74:	ldr	r2, [sp, #28]
   16f78:	orr	r1, r1, r2
   16f7c:	ldr	r2, [sp, #24]
   16f80:	orr	r1, r1, r2
   16f84:	ldr	r2, [sp, #20]
   16f88:	orr	r1, r1, r2
   16f8c:	ldr	r2, [sp, #16]
   16f90:	orr	r1, r1, r2
   16f94:	orr	r1, r1, r7
   16f98:	orr	r1, r1, r5
   16f9c:	orr	r1, r1, r6
   16fa0:	orr	r1, r1, sl
   16fa4:	orr	r1, r1, r9
   16fa8:	orr	r5, r1, r0
   16fac:	movw	r1, #21981	; 0x55dd
   16fb0:	movt	r1, #3
   16fb4:	movw	r2, #22124	; 0x566c
   16fb8:	movt	r2, #3
   16fbc:	mov	r0, r4
   16fc0:	mov	r3, #0
   16fc4:	bl	15040 <test_json@@Base>
   16fc8:	orrs	r0, r5, r0
   16fcc:	mvnne	r0, #0
   16fd0:	sub	sp, fp, #28
   16fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fd8:	mov	r1, #2
   16fdc:	strb	r1, [r0, #25]
   16fe0:	bx	lr
   16fe4:	push	{r4, sl, fp, lr}
   16fe8:	add	fp, sp, #8
   16fec:	mov	r4, r0
   16ff0:	bl	16fd8 <main@@Base+0xef4>
   16ff4:	mov	r0, r4
   16ff8:	bl	17008 <main@@Base+0xf24>
   16ffc:	mov	r0, r4
   17000:	pop	{r4, sl, fp, lr}
   17004:	b	17014 <main@@Base+0xf30>
   17008:	mov	r1, #1
   1700c:	strb	r1, [r0, #26]
   17010:	bx	lr
   17014:	mov	r1, #0
   17018:	strb	r1, [r0, #27]
   1701c:	bx	lr
   17020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17024:	add	fp, sp, #28
   17028:	sub	sp, sp, #4
   1702c:	vpush	{d8-d9}
   17030:	sub	sp, sp, #56	; 0x38
   17034:	mov	r6, r3
   17038:	mov	r4, r2
   1703c:	mov	r8, r1
   17040:	mov	r1, #0
   17044:	str	r1, [r3]
   17048:	str	r0, [sp, #28]
   1704c:	ldr	r0, [r0]
   17050:	mov	r1, #36	; 0x24
   17054:	bl	2313c <flatcc_builder_start_table@@Base>
   17058:	cmp	r0, #0
   1705c:	beq	1708c <main@@Base+0xfa8>
   17060:	ldr	r0, [sp, #28]
   17064:	mov	r1, r8
   17068:	mov	r2, r4
   1706c:	mov	r3, #33	; 0x21
   17070:	bl	26998 <flatcc_json_parser_set_error@@Base>
   17074:	mov	r8, r0
   17078:	mov	r0, r8
   1707c:	sub	sp, fp, #48	; 0x30
   17080:	vpop	{d8-d9}
   17084:	add	sp, sp, #4
   17088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1708c:	add	r0, sp, #44	; 0x2c
   17090:	str	r0, [sp]
   17094:	ldr	r0, [sp, #28]
   17098:	mov	r1, r8
   1709c:	mov	r2, r4
   170a0:	mov	r3, #1
   170a4:	bl	282fc <flatcc_json_parser_prepare_unions@@Base>
   170a8:	cmp	r0, r4
   170ac:	beq	17060 <main@@Base+0xf7c>
   170b0:	add	r3, sp, #52	; 0x34
   170b4:	ldr	r0, [sp, #28]
   170b8:	mov	r1, r8
   170bc:	mov	r2, r4
   170c0:	bl	19f80 <main@@Base+0x3e9c>
   170c4:	mov	r8, r0
   170c8:	ldr	r0, [sp, #52]	; 0x34
   170cc:	cmp	r0, #0
   170d0:	beq	195a0 <main@@Base+0x34bc>
   170d4:	vmov.f32	s16, #8	; 0x40400000  3.0
   170d8:	vldr	s18, [pc, #936]	; 17488 <main@@Base+0x13a4>
   170dc:	movw	r0, #13407	; 0x345f
   170e0:	movt	r0, #29494	; 0x7336
   170e4:	sub	r0, r0, #512	; 0x200
   170e8:	sub	r0, r0, #196608	; 0x30000
   170ec:	add	r1, sp, #16
   170f0:	stm	r1, {r0, r4, r6}
   170f4:	b	17134 <main@@Base+0x1050>
   170f8:	ldr	r0, [sp, #28]
   170fc:	mov	r1, r9
   17100:	mov	r2, r4
   17104:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   17108:	mov	r8, r0
   1710c:	add	r9, sp, #52	; 0x34
   17110:	ldr	r0, [sp, #28]
   17114:	mov	r1, r8
   17118:	mov	r2, r4
   1711c:	mov	r3, r9
   17120:	bl	1cf98 <main@@Base+0x6eb4>
   17124:	mov	r8, r0
   17128:	ldr	r0, [sp, #52]	; 0x34
   1712c:	cmp	r0, #0
   17130:	beq	195a0 <main@@Base+0x34bc>
   17134:	ldr	r0, [sp, #28]
   17138:	mov	r1, r8
   1713c:	mov	r2, r4
   17140:	bl	1a010 <main@@Base+0x3f2c>
   17144:	mov	r9, r0
   17148:	mov	r1, r4
   1714c:	bl	1a054 <main@@Base+0x3f70>
   17150:	mov	sl, r0
   17154:	mov	r7, r1
   17158:	movw	r0, #29281	; 0x7261
   1715c:	movt	r0, #24946	; 0x6172
   17160:	subs	r0, sl, r0
   17164:	movw	r3, #29556	; 0x7374
   17168:	movt	r3, #29797	; 0x7465
   1716c:	sbcs	r0, r1, r3
   17170:	bcs	1721c <main@@Base+0x1138>
   17174:	movw	r0, #28004	; 0x6d64
   17178:	movt	r0, #28257	; 0x6e61
   1717c:	cmp	r7, r0
   17180:	bhi	173f8 <main@@Base+0x1314>
   17184:	movw	r0, #25975	; 0x6577
   17188:	movt	r0, #26220	; 0x666c
   1718c:	cmp	r7, r0
   17190:	bhi	17520 <main@@Base+0x143c>
   17194:	movw	r0, #27759	; 0x6c6f
   17198:	movt	r0, #25455	; 0x636f
   1719c:	eor	r1, r7, r0
   171a0:	and	r0, sl, #-16777216	; 0xff000000
   171a4:	eor	r2, r0, #1912602624	; 0x72000000
   171a8:	orrs	r1, r2, r1
   171ac:	beq	17d38 <main@@Base+0x1c54>
   171b0:	movw	r1, #25965	; 0x656d
   171b4:	movt	r1, #25966	; 0x656e
   171b8:	eor	r1, r7, r1
   171bc:	eor	r0, r0, #2030043136	; 0x79000000
   171c0:	orrs	r0, r0, r1
   171c4:	bne	170f8 <main@@Base+0x1014>
   171c8:	ldr	r0, [sp, #28]
   171cc:	mov	r1, r9
   171d0:	mov	r2, r4
   171d4:	mov	r3, #5
   171d8:	bl	1a058 <main@@Base+0x3f74>
   171dc:	mov	r1, r0
   171e0:	cmp	r9, r0
   171e4:	beq	18258 <main@@Base+0x2174>
   171e8:	ldr	r0, [sp, #28]
   171ec:	mov	r2, r4
   171f0:	add	r3, sp, #48	; 0x30
   171f4:	bl	17020 <main@@Base+0xf3c>
   171f8:	mov	r8, r0
   171fc:	ldr	r0, [sp, #48]	; 0x30
   17200:	cmp	r0, #0
   17204:	add	r9, sp, #52	; 0x34
   17208:	beq	17060 <main@@Base+0xf7c>
   1720c:	ldr	r0, [sp, #28]
   17210:	ldr	r0, [r0]
   17214:	mov	r1, #12
   17218:	b	1944c <main@@Base+0x3368>
   1721c:	movw	r0, #0
   17220:	movt	r0, #26163	; 0x6633
   17224:	subs	r0, sl, r0
   17228:	sbcs	r0, r7, r3
   1722c:	bcs	1748c <main@@Base+0x13a8>
   17230:	movw	r0, #29281	; 0x7261
   17234:	movt	r0, #24946	; 0x6172
   17238:	eor	r1, sl, r0
   1723c:	eor	r0, r7, r3
   17240:	orrs	r1, r1, r0
   17244:	bne	1768c <main@@Base+0x15a8>
   17248:	add	r7, r9, #8
   1724c:	mov	r0, r7
   17250:	mov	r1, r4
   17254:	bl	1a054 <main@@Base+0x3f70>
   17258:	movw	r2, #26989	; 0x696d
   1725c:	movt	r2, #29810	; 0x7472
   17260:	subs	r2, r2, r0
   17264:	movw	r5, #26227	; 0x6673
   17268:	movt	r5, #31087	; 0x796f
   1726c:	sbcs	r2, r5, r1
   17270:	bcc	178d4 <main@@Base+0x17f0>
   17274:	movw	r2, #29797	; 0x7465
   17278:	movt	r2, #28530	; 0x6f72
   1727c:	eor	r2, r0, r2
   17280:	eor	r3, r1, r5
   17284:	orrs	r2, r2, r3
   17288:	beq	18260 <main@@Base+0x217c>
   1728c:	movw	r2, #27763	; 0x6c73
   17290:	movt	r2, #28527	; 0x6f6f
   17294:	eor	r0, r0, r2
   17298:	movw	r2, #26210	; 0x6662
   1729c:	movt	r2, #31087	; 0x796f
   172a0:	eor	r1, r1, r2
   172a4:	orrs	r0, r0, r1
   172a8:	bne	18354 <main@@Base+0x2270>
   172ac:	ldr	r0, [sp, #28]
   172b0:	mov	r1, r7
   172b4:	mov	r2, r4
   172b8:	mov	r3, #8
   172bc:	bl	1a058 <main@@Base+0x3f74>
   172c0:	mov	r8, r0
   172c4:	cmp	r7, r0
   172c8:	add	r9, sp, #52	; 0x34
   172cc:	beq	1898c <main@@Base+0x28a8>
   172d0:	ldr	r0, [sp, #28]
   172d4:	ldr	r0, [r0]
   172d8:	mov	r1, #1
   172dc:	mov	r2, #1
   172e0:	mvn	r3, #0
   172e4:	bl	22e68 <flatcc_builder_start_vector@@Base>
   172e8:	cmp	r0, #0
   172ec:	bne	17060 <main@@Base+0xf7c>
   172f0:	ldr	r0, [sp, #28]
   172f4:	mov	r1, r8
   172f8:	mov	r2, r4
   172fc:	mov	r3, r9
   17300:	bl	1ac10 <main@@Base+0x4b2c>
   17304:	mov	r8, r0
   17308:	ldr	r0, [sp, #52]	; 0x34
   1730c:	cmp	r0, #0
   17310:	beq	173d0 <main@@Base+0x12ec>
   17314:	mov	r0, #0
   17318:	strb	r0, [sp, #32]
   1731c:	ldr	r0, [sp, #28]
   17320:	ldr	r0, [r0]
   17324:	mov	r1, #1
   17328:	bl	2287c <flatcc_builder_extend_vector@@Base>
   1732c:	cmp	r0, #0
   17330:	beq	17060 <main@@Base+0xf7c>
   17334:	mov	r7, r0
   17338:	ldr	r0, [sp, #28]
   1733c:	mov	r1, r8
   17340:	mov	r2, r4
   17344:	mov	r5, r4
   17348:	add	r4, sp, #32
   1734c:	mov	r3, r4
   17350:	bl	1bbe4 <main@@Base+0x5b00>
   17354:	mov	r6, r0
   17358:	cmp	r8, r0
   1735c:	beq	1736c <main@@Base+0x1288>
   17360:	mov	r8, r6
   17364:	mov	r4, r5
   17368:	b	1739c <main@@Base+0x12b8>
   1736c:	str	r4, [sp]
   17370:	ldr	r0, [sp, #28]
   17374:	mov	r1, r6
   17378:	mov	r2, r5
   1737c:	movw	r3, #41160	; 0xa0c8
   17380:	movt	r3, #4
   17384:	bl	1bca0 <main@@Base+0x5bbc>
   17388:	mov	r8, r0
   1738c:	cmp	r0, r6
   17390:	mov	r4, r5
   17394:	cmpne	r8, r4
   17398:	beq	17060 <main@@Base+0xf7c>
   1739c:	ldrb	r1, [sp, #32]
   173a0:	mov	r0, r7
   173a4:	bl	1bdbc <main@@Base+0x5cd8>
   173a8:	ldr	r0, [sp, #28]
   173ac:	mov	r1, r8
   173b0:	mov	r2, r4
   173b4:	mov	r3, r9
   173b8:	bl	1ae6c <main@@Base+0x4d88>
   173bc:	mov	r8, r0
   173c0:	ldr	r0, [sp, #52]	; 0x34
   173c4:	cmp	r0, #0
   173c8:	ldr	r6, [sp, #24]
   173cc:	bne	17314 <main@@Base+0x1230>
   173d0:	ldr	r0, [sp, #28]
   173d4:	ldr	r0, [r0]
   173d8:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   173dc:	str	r0, [sp, #48]	; 0x30
   173e0:	cmp	r0, #0
   173e4:	beq	17060 <main@@Base+0xf7c>
   173e8:	ldr	r0, [sp, #28]
   173ec:	ldr	r0, [r0]
   173f0:	mov	r1, #24
   173f4:	b	1944c <main@@Base+0x3368>
   173f8:	movw	r0, #29555	; 0x7373
   173fc:	movt	r0, #29797	; 0x7465
   17400:	cmp	r7, r0
   17404:	movw	r1, #29285	; 0x7265
   17408:	movt	r1, #28769	; 0x7061
   1740c:	movw	r2, #24430	; 0x5f6e
   17410:	movt	r2, #28276	; 0x6e74
   17414:	bhi	17744 <main@@Base+0x1660>
   17418:	subs	r0, sl, r2
   1741c:	sbcs	r0, r7, r1
   17420:	bcs	179ec <main@@Base+0x1908>
   17424:	movw	r0, #28005	; 0x6d65
   17428:	movt	r0, #28257	; 0x6e61
   1742c:	teq	r7, r0
   17430:	bne	170f8 <main@@Base+0x1014>
   17434:	ldr	r0, [sp, #28]
   17438:	mov	r1, r9
   1743c:	mov	r2, r4
   17440:	mov	r3, #4
   17444:	bl	1a058 <main@@Base+0x3f74>
   17448:	mov	r1, r0
   1744c:	cmp	r9, r0
   17450:	beq	18258 <main@@Base+0x2174>
   17454:	ldr	r0, [sp, #28]
   17458:	mov	r2, r4
   1745c:	add	r3, sp, #48	; 0x30
   17460:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   17464:	mov	r8, r0
   17468:	ldr	r0, [sp, #48]	; 0x30
   1746c:	cmp	r0, #0
   17470:	add	r9, sp, #52	; 0x34
   17474:	beq	17060 <main@@Base+0xf7c>
   17478:	ldr	r0, [sp, #28]
   1747c:	ldr	r0, [r0]
   17480:	mov	r1, #3
   17484:	b	1944c <main@@Base+0x3368>
   17488:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1748c:	movw	r1, #29544	; 0x7368
   17490:	movt	r1, #26721	; 0x6861
   17494:	subs	r0, sl, r1
   17498:	sbcs	r0, r7, r3
   1749c:	bcs	17824 <main@@Base+0x1740>
   174a0:	eor	r0, r7, r3
   174a4:	bfc	sl, #0, #16
   174a8:	movw	r1, #0
   174ac:	movt	r1, #26163	; 0x6633
   174b0:	eor	r1, sl, r1
   174b4:	orrs	r0, r1, r0
   174b8:	bne	170f8 <main@@Base+0x1014>
   174bc:	ldr	r0, [sp, #28]
   174c0:	mov	r1, r9
   174c4:	mov	r2, r4
   174c8:	mov	r3, #6
   174cc:	bl	1a058 <main@@Base+0x3f74>
   174d0:	mov	r6, r0
   174d4:	cmp	r9, r0
   174d8:	beq	18814 <main@@Base+0x2730>
   174dc:	mov	r0, #0
   174e0:	str	r0, [sp, #32]
   174e4:	ldr	r0, [sp, #28]
   174e8:	mov	r1, r6
   174ec:	mov	r2, r4
   174f0:	mov	r5, r4
   174f4:	add	r4, sp, #32
   174f8:	mov	r3, r4
   174fc:	bl	276dc <flatcc_json_parser_float@@Base>
   17500:	mov	r7, r0
   17504:	cmp	r6, r0
   17508:	add	r9, sp, #52	; 0x34
   1750c:	beq	18608 <main@@Base+0x2524>
   17510:	mov	r8, r7
   17514:	ldr	r6, [sp, #24]
   17518:	mov	r4, r5
   1751c:	b	1863c <main@@Base+0x2558>
   17520:	movw	r0, #65535	; 0xffff
   17524:	movt	r0, #26735	; 0x686f
   17528:	cmp	r7, r0
   1752c:	bhi	17ab0 <main@@Base+0x19cc>
   17530:	movw	r0, #25976	; 0x6578
   17534:	movt	r0, #26220	; 0x666c
   17538:	teq	r7, r0
   1753c:	bne	170f8 <main@@Base+0x1014>
   17540:	ldr	r0, [sp, #28]
   17544:	mov	r1, r9
   17548:	mov	r2, r4
   1754c:	mov	r3, #4
   17550:	bl	1a058 <main@@Base+0x3f74>
   17554:	mov	r8, r0
   17558:	cmp	r9, r0
   1755c:	beq	18494 <main@@Base+0x23b0>
   17560:	ldr	r0, [sp, #28]
   17564:	ldr	r0, [r0]
   17568:	mov	r1, #1
   1756c:	mov	r2, #1
   17570:	mvn	r3, #0
   17574:	bl	22e68 <flatcc_builder_start_vector@@Base>
   17578:	cmp	r0, #0
   1757c:	add	r9, sp, #52	; 0x34
   17580:	bne	17060 <main@@Base+0xf7c>
   17584:	ldr	r0, [sp, #28]
   17588:	mov	r1, r8
   1758c:	mov	r2, r4
   17590:	mov	r3, r9
   17594:	bl	1ac10 <main@@Base+0x4b2c>
   17598:	mov	r8, r0
   1759c:	ldr	r0, [sp, #52]	; 0x34
   175a0:	cmp	r0, #0
   175a4:	beq	17664 <main@@Base+0x1580>
   175a8:	mov	r0, #0
   175ac:	strb	r0, [sp, #32]
   175b0:	ldr	r0, [sp, #28]
   175b4:	ldr	r0, [r0]
   175b8:	mov	r1, #1
   175bc:	bl	2287c <flatcc_builder_extend_vector@@Base>
   175c0:	cmp	r0, #0
   175c4:	beq	17060 <main@@Base+0xf7c>
   175c8:	mov	r7, r0
   175cc:	ldr	r0, [sp, #28]
   175d0:	mov	r1, r8
   175d4:	mov	r2, r4
   175d8:	mov	r5, r4
   175dc:	add	r4, sp, #32
   175e0:	mov	r3, r4
   175e4:	bl	1aca0 <main@@Base+0x4bbc>
   175e8:	mov	r6, r0
   175ec:	cmp	r8, r0
   175f0:	beq	17600 <main@@Base+0x151c>
   175f4:	mov	r8, r6
   175f8:	mov	r4, r5
   175fc:	b	17630 <main@@Base+0x154c>
   17600:	str	r4, [sp]
   17604:	ldr	r0, [sp, #28]
   17608:	mov	r1, r6
   1760c:	mov	r2, r5
   17610:	movw	r3, #41096	; 0xa088
   17614:	movt	r3, #4
   17618:	bl	1ad30 <main@@Base+0x4c4c>
   1761c:	mov	r8, r0
   17620:	cmp	r0, r6
   17624:	mov	r4, r5
   17628:	cmpne	r8, r4
   1762c:	beq	17060 <main@@Base+0xf7c>
   17630:	ldrb	r1, [sp, #32]
   17634:	mov	r0, r7
   17638:	bl	1ae4c <main@@Base+0x4d68>
   1763c:	ldr	r0, [sp, #28]
   17640:	mov	r1, r8
   17644:	mov	r2, r4
   17648:	mov	r3, r9
   1764c:	bl	1ae6c <main@@Base+0x4d88>
   17650:	mov	r8, r0
   17654:	ldr	r0, [sp, #52]	; 0x34
   17658:	cmp	r0, #0
   1765c:	ldr	r6, [sp, #24]
   17660:	bne	175a8 <main@@Base+0x14c4>
   17664:	ldr	r0, [sp, #28]
   17668:	ldr	r0, [r0]
   1766c:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   17670:	str	r0, [sp, #48]	; 0x30
   17674:	cmp	r0, #0
   17678:	beq	17060 <main@@Base+0xf7c>
   1767c:	ldr	r0, [sp, #28]
   17680:	ldr	r0, [r0]
   17684:	mov	r1, #30
   17688:	b	1944c <main@@Base+0x3368>
   1768c:	movw	r1, #28788	; 0x7074
   17690:	movt	r1, #25965	; 0x656d
   17694:	subs	r1, sl, r1
   17698:	sbcs	r1, r7, r3
   1769c:	bcs	17b40 <main@@Base+0x1a5c>
   176a0:	movw	r1, #28524	; 0x6f6c
   176a4:	movt	r1, #25199	; 0x626f
   176a8:	eor	r1, sl, r1
   176ac:	orrs	r1, r1, r0
   176b0:	beq	1835c <main@@Base+0x2278>
   176b4:	movw	r1, #29541	; 0x7365
   176b8:	movt	r1, #25185	; 0x6261
   176bc:	eor	r1, sl, r1
   176c0:	orrs	r0, r1, r0
   176c4:	bne	170f8 <main@@Base+0x1014>
   176c8:	add	r6, r9, #8
   176cc:	mov	r0, r6
   176d0:	mov	r1, r4
   176d4:	bl	1a054 <main@@Base+0x3f70>
   176d8:	bfc	r1, #0, #16
   176dc:	movw	r0, #0
   176e0:	movt	r0, #13876	; 0x3634
   176e4:	teq	r1, r0
   176e8:	bne	18814 <main@@Base+0x2730>
   176ec:	ldr	r0, [sp, #28]
   176f0:	mov	r1, r6
   176f4:	mov	r2, r4
   176f8:	mov	r3, #2
   176fc:	bl	1a058 <main@@Base+0x3f74>
   17700:	mov	r1, r0
   17704:	cmp	r6, r0
   17708:	add	r9, sp, #52	; 0x34
   1770c:	beq	1883c <main@@Base+0x2758>
   17710:	ldr	r0, [sp, #28]
   17714:	mov	r2, r4
   17718:	add	r3, sp, #48	; 0x30
   1771c:	bl	1bffc <main@@Base+0x5f18>
   17720:	mov	r8, r0
   17724:	ldr	r0, [sp, #48]	; 0x30
   17728:	cmp	r0, #0
   1772c:	ldr	r6, [sp, #24]
   17730:	beq	17060 <main@@Base+0xf7c>
   17734:	ldr	r0, [sp, #28]
   17738:	ldr	r0, [r0]
   1773c:	mov	r1, #35	; 0x23
   17740:	b	1944c <main@@Base+0x3368>
   17744:	eor	r6, r7, r3
   17748:	and	r4, sl, #-16777216	; 0xff000000
   1774c:	eor	r0, r4, #872415232	; 0x34000000
   17750:	orrs	r0, r0, r6
   17754:	bne	17bd8 <main@@Base+0x1af4>
   17758:	ldr	r0, [sp, #28]
   1775c:	mov	r1, r9
   17760:	ldr	r4, [sp, #20]
   17764:	mov	r2, r4
   17768:	mov	r3, #5
   1776c:	bl	1a058 <main@@Base+0x3f74>
   17770:	mov	r8, r0
   17774:	cmp	r9, r0
   17778:	beq	18778 <main@@Base+0x2694>
   1777c:	ldr	r0, [sp, #28]
   17780:	ldr	r0, [r0]
   17784:	mov	r1, #4
   17788:	mov	r2, #2
   1778c:	mvn	r3, #-1073741824	; 0xc0000000
   17790:	bl	22e68 <flatcc_builder_start_vector@@Base>
   17794:	cmp	r0, #0
   17798:	bne	17060 <main@@Base+0xf7c>
   1779c:	ldr	r5, [sp, #28]
   177a0:	mov	r0, r5
   177a4:	mov	r1, r8
   177a8:	mov	r2, r4
   177ac:	add	r9, sp, #52	; 0x34
   177b0:	mov	r3, r9
   177b4:	bl	1ac10 <main@@Base+0x4b2c>
   177b8:	mov	r8, r0
   177bc:	ldr	r0, [r5]
   177c0:	ldr	r1, [sp, #52]	; 0x34
   177c4:	cmp	r1, #0
   177c8:	beq	1866c <main@@Base+0x2588>
   177cc:	ldr	r6, [sp, #24]
   177d0:	mov	r1, #1
   177d4:	bl	2287c <flatcc_builder_extend_vector@@Base>
   177d8:	cmp	r0, #0
   177dc:	beq	17060 <main@@Base+0xf7c>
   177e0:	mov	r3, r0
   177e4:	ldr	r5, [sp, #28]
   177e8:	mov	r0, r5
   177ec:	mov	r1, r8
   177f0:	mov	r2, r4
   177f4:	bl	1b680 <main@@Base+0x559c>
   177f8:	mov	r1, r0
   177fc:	mov	r0, r5
   17800:	mov	r2, r4
   17804:	mov	r3, r9
   17808:	bl	1ae6c <main@@Base+0x4d88>
   1780c:	mov	r8, r0
   17810:	ldr	r0, [r5]
   17814:	ldr	r1, [sp, #52]	; 0x34
   17818:	cmp	r1, #0
   1781c:	bne	177d0 <main@@Base+0x16ec>
   17820:	b	18670 <main@@Base+0x258c>
   17824:	eor	r1, sl, r1
   17828:	eor	r0, r7, r3
   1782c:	orrs	r1, r1, r0
   17830:	bne	17c44 <main@@Base+0x1b60>
   17834:	add	r7, r9, #8
   17838:	mov	r0, r7
   1783c:	mov	r1, r4
   17840:	bl	1a054 <main@@Base+0x3f70>
   17844:	movw	r3, #30257	; 0x7631
   17848:	movt	r3, #26222	; 0x666e
   1784c:	subs	r2, r0, r3
   17850:	movw	r2, #13407	; 0x345f
   17854:	movt	r2, #29494	; 0x7336
   17858:	sbcs	r2, r1, r2
   1785c:	bcs	17d94 <main@@Base+0x1cb0>
   17860:	eor	r0, r0, r3
   17864:	ldr	r2, [sp, #16]
   17868:	eor	r1, r1, r2
   1786c:	orrs	r0, r0, r1
   17870:	add	r9, sp, #52	; 0x34
   17874:	bne	18b1c <main@@Base+0x2a38>
   17878:	ldr	r0, [sp, #28]
   1787c:	mov	r1, r7
   17880:	mov	r2, r4
   17884:	mov	r3, #8
   17888:	bl	1a058 <main@@Base+0x3f74>
   1788c:	mov	r6, r0
   17890:	cmp	r7, r0
   17894:	beq	18b40 <main@@Base+0x2a5c>
   17898:	mov	r0, #0
   1789c:	str	r0, [sp, #32]
   178a0:	ldr	r0, [sp, #28]
   178a4:	mov	r1, r6
   178a8:	mov	r2, r4
   178ac:	mov	r5, r4
   178b0:	add	r4, sp, #32
   178b4:	mov	r3, r4
   178b8:	bl	1c704 <main@@Base+0x6620>
   178bc:	mov	r7, r0
   178c0:	cmp	r6, r0
   178c4:	beq	18d98 <main@@Base+0x2cb4>
   178c8:	mov	r8, r7
   178cc:	mov	r4, r5
   178d0:	b	18dc8 <main@@Base+0x2ce4>
   178d4:	movw	r2, #27749	; 0x6c65
   178d8:	movt	r2, #24930	; 0x6162
   178dc:	eor	r2, r0, r2
   178e0:	movw	r3, #26228	; 0x6674
   178e4:	movt	r3, #31087	; 0x796f
   178e8:	eor	r3, r1, r3
   178ec:	orrs	r2, r2, r3
   178f0:	beq	183bc <main@@Base+0x22d8>
   178f4:	movw	r2, #26990	; 0x696e
   178f8:	movt	r2, #29810	; 0x7472
   178fc:	eor	r0, r0, r2
   17900:	eor	r1, r1, r5
   17904:	orrs	r0, r0, r1
   17908:	bne	18348 <main@@Base+0x2264>
   1790c:	add	r7, r9, #16
   17910:	mov	r0, r7
   17914:	mov	r1, r4
   17918:	bl	1a054 <main@@Base+0x3f70>
   1791c:	mov	r0, r1
   17920:	bfc	r0, #0, #16
   17924:	movw	r2, #0
   17928:	movt	r2, #26418	; 0x6732
   1792c:	teq	r0, r2
   17930:	bne	18844 <main@@Base+0x2760>
   17934:	ldr	r0, [sp, #28]
   17938:	mov	r1, r7
   1793c:	mov	r2, r4
   17940:	mov	r3, #2
   17944:	bl	1a058 <main@@Base+0x3f74>
   17948:	mov	r8, r0
   1794c:	cmp	r7, r0
   17950:	add	r9, sp, #52	; 0x34
   17954:	beq	18b34 <main@@Base+0x2a50>
   17958:	ldr	r0, [sp, #28]
   1795c:	ldr	r0, [r0]
   17960:	bl	22ef8 <flatcc_builder_start_offset_vector@@Base>
   17964:	cmp	r0, #0
   17968:	bne	17060 <main@@Base+0xf7c>
   1796c:	ldr	r0, [sp, #28]
   17970:	mov	r1, r8
   17974:	mov	r2, r4
   17978:	mov	r3, r9
   1797c:	bl	1ac10 <main@@Base+0x4b2c>
   17980:	mov	r8, r0
   17984:	ldr	r0, [sp, #52]	; 0x34
   17988:	cmp	r0, #0
   1798c:	beq	18edc <main@@Base+0x2df8>
   17990:	ldr	r0, [sp, #28]
   17994:	mov	r1, r8
   17998:	mov	r2, r4
   1799c:	add	r3, sp, #48	; 0x30
   179a0:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   179a4:	mov	r8, r0
   179a8:	ldr	r0, [sp, #48]	; 0x30
   179ac:	cmp	r0, #0
   179b0:	beq	17060 <main@@Base+0xf7c>
   179b4:	ldr	r0, [sp, #28]
   179b8:	ldr	r0, [r0]
   179bc:	mov	r1, #1
   179c0:	bl	22a44 <flatcc_builder_extend_offset_vector@@Base>
   179c4:	cmp	r0, #0
   179c8:	beq	17060 <main@@Base+0xf7c>
   179cc:	ldr	r1, [sp, #48]	; 0x30
   179d0:	str	r1, [r0]
   179d4:	ldr	r0, [sp, #28]
   179d8:	mov	r1, r8
   179dc:	mov	r2, r4
   179e0:	mov	r3, r9
   179e4:	bl	1ae6c <main@@Base+0x4d88>
   179e8:	b	17980 <main@@Base+0x189c>
   179ec:	eor	r0, sl, r2
   179f0:	eor	r1, r7, r1
   179f4:	orrs	r0, r0, r1
   179f8:	bne	17e2c <main@@Base+0x1d48>
   179fc:	add	r6, r9, #8
   17a00:	mov	r0, r6
   17a04:	mov	r1, r4
   17a08:	bl	1a054 <main@@Base+0x3f70>
   17a0c:	movw	r2, #25971	; 0x6573
   17a10:	movt	r2, #24941	; 0x616d
   17a14:	eor	r1, r1, r2
   17a18:	movw	r2, #25445	; 0x6365
   17a1c:	movt	r2, #28769	; 0x7061
   17a20:	eor	r0, r0, r2
   17a24:	orrs	r0, r0, r1
   17a28:	bne	18814 <main@@Base+0x2730>
   17a2c:	add	r7, r9, #16
   17a30:	mov	r0, r7
   17a34:	mov	r1, r4
   17a38:	bl	1a054 <main@@Base+0x3f70>
   17a3c:	movw	r2, #25971	; 0x6573
   17a40:	movt	r2, #24436	; 0x5f74
   17a44:	eor	r1, r1, r2
   17a48:	and	r0, r0, #-16777216	; 0xff000000
   17a4c:	eor	r0, r0, #1946157056	; 0x74000000
   17a50:	orrs	r0, r0, r1
   17a54:	bne	18994 <main@@Base+0x28b0>
   17a58:	ldr	r0, [sp, #28]
   17a5c:	mov	r1, r7
   17a60:	mov	r2, r4
   17a64:	mov	r3, #5
   17a68:	bl	1a058 <main@@Base+0x3f74>
   17a6c:	mov	r1, r0
   17a70:	cmp	r7, r0
   17a74:	ldr	r6, [sp, #24]
   17a78:	add	r9, sp, #52	; 0x34
   17a7c:	beq	18f2c <main@@Base+0x2e48>
   17a80:	ldr	r0, [sp, #28]
   17a84:	mov	r2, r4
   17a88:	add	r3, sp, #48	; 0x30
   17a8c:	bl	1b0f8 <main@@Base+0x5014>
   17a90:	mov	r8, r0
   17a94:	ldr	r0, [sp, #48]	; 0x30
   17a98:	cmp	r0, #0
   17a9c:	beq	17060 <main@@Base+0xf7c>
   17aa0:	ldr	r0, [sp, #28]
   17aa4:	ldr	r0, [r0]
   17aa8:	mov	r1, #34	; 0x22
   17aac:	b	1944c <main@@Base+0x3368>
   17ab0:	movw	r2, #28530	; 0x6f72
   17ab4:	movt	r2, #28276	; 0x6e74
   17ab8:	subs	r0, sl, r2
   17abc:	movw	r1, #30309	; 0x7665
   17ac0:	movt	r1, #26990	; 0x696e
   17ac4:	sbcs	r0, r7, r1
   17ac8:	bcs	17ea0 <main@@Base+0x1dbc>
   17acc:	bfc	r7, #0, #16
   17ad0:	movw	r0, #0
   17ad4:	movt	r0, #26736	; 0x6870
   17ad8:	teq	r7, r0
   17adc:	bne	170f8 <main@@Base+0x1014>
   17ae0:	ldr	r0, [sp, #28]
   17ae4:	mov	r1, r9
   17ae8:	mov	r2, r4
   17aec:	mov	r3, #2
   17af0:	bl	1a058 <main@@Base+0x3f74>
   17af4:	mov	r6, r0
   17af8:	cmp	r9, r0
   17afc:	beq	18814 <main@@Base+0x2730>
   17b00:	mov	r0, #0
   17b04:	strh	r0, [sp, #32]
   17b08:	ldr	r0, [sp, #28]
   17b0c:	mov	r1, r6
   17b10:	mov	r2, r4
   17b14:	mov	r5, r4
   17b18:	add	r4, sp, #32
   17b1c:	mov	r3, r4
   17b20:	bl	1af2c <main@@Base+0x4e48>
   17b24:	mov	r7, r0
   17b28:	cmp	r6, r0
   17b2c:	add	r9, sp, #52	; 0x34
   17b30:	beq	18e10 <main@@Base+0x2d2c>
   17b34:	mov	r8, r7
   17b38:	ldr	r6, [sp, #24]
   17b3c:	b	18e44 <main@@Base+0x2d60>
   17b40:	mvn	r1, #-1711276032	; 0x9a000000
   17b44:	subs	r1, r1, sl
   17b48:	sbcs	r1, r3, r7
   17b4c:	bcc	1801c <main@@Base+0x1f38>
   17b50:	movw	r1, #28788	; 0x7074
   17b54:	movt	r1, #25965	; 0x656d
   17b58:	eor	r1, sl, r1
   17b5c:	orrs	r0, r1, r0
   17b60:	bne	170f8 <main@@Base+0x1014>
   17b64:	add	r6, r9, #8
   17b68:	mov	r0, r6
   17b6c:	mov	r1, r4
   17b70:	bl	1a054 <main@@Base+0x3f70>
   17b74:	and	r0, r1, #-16777216	; 0xff000000
   17b78:	teq	r0, #2030043136	; 0x79000000
   17b7c:	bne	18814 <main@@Base+0x2730>
   17b80:	ldr	r0, [sp, #28]
   17b84:	mov	r1, r6
   17b88:	mov	r2, r4
   17b8c:	mov	r3, #1
   17b90:	bl	1a058 <main@@Base+0x3f74>
   17b94:	mov	r1, r0
   17b98:	cmp	r6, r0
   17b9c:	add	r9, sp, #52	; 0x34
   17ba0:	beq	1883c <main@@Base+0x2758>
   17ba4:	ldr	r0, [sp, #28]
   17ba8:	mov	r2, r4
   17bac:	add	r3, sp, #48	; 0x30
   17bb0:	bl	1c27c <main@@Base+0x6198>
   17bb4:	mov	r8, r0
   17bb8:	ldr	r0, [sp, #48]	; 0x30
   17bbc:	cmp	r0, #0
   17bc0:	ldr	r6, [sp, #24]
   17bc4:	beq	17060 <main@@Base+0xf7c>
   17bc8:	ldr	r0, [sp, #28]
   17bcc:	ldr	r0, [r0]
   17bd0:	mov	r1, #14
   17bd4:	b	1944c <main@@Base+0x3368>
   17bd8:	teq	r7, r3
   17bdc:	bne	1869c <main@@Base+0x25b8>
   17be0:	ldr	r8, [sp, #28]
   17be4:	mov	r0, r8
   17be8:	mov	r1, r9
   17bec:	ldr	r5, [sp, #20]
   17bf0:	mov	r2, r5
   17bf4:	mov	r3, #4
   17bf8:	bl	1a058 <main@@Base+0x3f74>
   17bfc:	mov	r1, r0
   17c00:	cmp	r9, r0
   17c04:	beq	18690 <main@@Base+0x25ac>
   17c08:	ldr	r0, [sp, #44]	; 0x2c
   17c0c:	mov	r2, #8
   17c10:	str	r2, [sp]
   17c14:	str	r0, [sp, #4]
   17c18:	movw	r0, #47248	; 0xb890
   17c1c:	movt	r0, #1
   17c20:	str	r0, [sp, #8]
   17c24:	mov	r0, r8
   17c28:	mov	r2, r5
   17c2c:	mov	r3, #0
   17c30:	bl	283c4 <flatcc_json_parser_union@@Base>
   17c34:	mov	r8, r0
   17c38:	mov	r4, r5
   17c3c:	ldr	r6, [sp, #24]
   17c40:	b	1710c <main@@Base+0x1028>
   17c44:	movw	r3, #24431	; 0x5f6f
   17c48:	movt	r3, #28530	; 0x6f72
   17c4c:	subs	r1, sl, r3
   17c50:	movw	r2, #25460	; 0x6374
   17c54:	movt	r2, #30309	; 0x7665
   17c58:	sbcs	r1, r7, r2
   17c5c:	bcs	180a8 <main@@Base+0x1fc4>
   17c60:	movw	r1, #29556	; 0x7374
   17c64:	movt	r1, #28261	; 0x6e65
   17c68:	eor	r1, sl, r1
   17c6c:	orrs	r0, r1, r0
   17c70:	bne	170f8 <main@@Base+0x1014>
   17c74:	add	r6, r9, #8
   17c78:	mov	r0, r6
   17c7c:	mov	r1, r4
   17c80:	bl	1a054 <main@@Base+0x3f70>
   17c84:	movw	r2, #26220	; 0x666c
   17c88:	movt	r2, #25956	; 0x6564
   17c8c:	eor	r1, r1, r2
   17c90:	movw	r2, #25205	; 0x6275
   17c94:	movt	r2, #24948	; 0x6174
   17c98:	eor	r0, r0, r2
   17c9c:	orrs	r0, r0, r1
   17ca0:	bne	18814 <main@@Base+0x2730>
   17ca4:	add	r6, r9, #16
   17ca8:	mov	r0, r6
   17cac:	mov	r1, r4
   17cb0:	bl	1a054 <main@@Base+0x3f70>
   17cb4:	movw	r0, #25970	; 0x6572
   17cb8:	movt	r0, #26214	; 0x6666
   17cbc:	teq	r1, r0
   17cc0:	bne	18814 <main@@Base+0x2730>
   17cc4:	ldr	r0, [sp, #28]
   17cc8:	mov	r1, r6
   17ccc:	mov	r2, r4
   17cd0:	mov	r3, #4
   17cd4:	bl	1a058 <main@@Base+0x3f74>
   17cd8:	mov	r8, r0
   17cdc:	cmp	r6, r0
   17ce0:	add	r9, sp, #52	; 0x34
   17ce4:	beq	18980 <main@@Base+0x289c>
   17ce8:	cmp	r8, r4
   17cec:	ldr	r6, [sp, #24]
   17cf0:	beq	1927c <main@@Base+0x3198>
   17cf4:	ldrb	r0, [r8]
   17cf8:	cmp	r0, #91	; 0x5b
   17cfc:	bne	1927c <main@@Base+0x3198>
   17d00:	ldr	r0, [sp, #28]
   17d04:	ldr	r0, [r0]
   17d08:	mov	r1, #1
   17d0c:	mov	r2, #1
   17d10:	mvn	r3, #0
   17d14:	bl	22e68 <flatcc_builder_start_vector@@Base>
   17d18:	cmp	r0, #0
   17d1c:	bne	17060 <main@@Base+0xf7c>
   17d20:	ldr	r0, [sp, #28]
   17d24:	mov	r1, r8
   17d28:	mov	r2, r4
   17d2c:	mov	r3, r9
   17d30:	bl	1ac10 <main@@Base+0x4b2c>
   17d34:	b	18d00 <main@@Base+0x2c1c>
   17d38:	ldr	r0, [sp, #28]
   17d3c:	mov	r1, r9
   17d40:	mov	r2, r4
   17d44:	mov	r3, #5
   17d48:	bl	1a058 <main@@Base+0x3f74>
   17d4c:	mov	r6, r0
   17d50:	cmp	r9, r0
   17d54:	beq	18814 <main@@Base+0x2730>
   17d58:	mov	r0, #0
   17d5c:	strb	r0, [sp, #32]
   17d60:	ldr	r0, [sp, #28]
   17d64:	mov	r1, r6
   17d68:	mov	r2, r4
   17d6c:	add	r8, sp, #32
   17d70:	mov	r3, r8
   17d74:	bl	1aa44 <main@@Base+0x4960>
   17d78:	mov	r7, r0
   17d7c:	cmp	r6, r0
   17d80:	add	r9, sp, #52	; 0x34
   17d84:	beq	18908 <main@@Base+0x2824>
   17d88:	mov	r8, r7
   17d8c:	ldr	r6, [sp, #24]
   17d90:	b	18938 <main@@Base+0x2854>
   17d94:	movw	r2, #30256	; 0x7630
   17d98:	movt	r2, #26222	; 0x666e
   17d9c:	subs	r2, r2, r0
   17da0:	movw	r2, #12895	; 0x325f
   17da4:	movt	r2, #30003	; 0x7533
   17da8:	sbcs	r2, r2, r1
   17dac:	add	r9, sp, #52	; 0x34
   17db0:	eor	r0, r0, r3
   17db4:	bcc	184a0 <main@@Base+0x23bc>
   17db8:	movw	r2, #13407	; 0x345f
   17dbc:	movt	r2, #29494	; 0x7336
   17dc0:	eor	r1, r1, r2
   17dc4:	orrs	r0, r0, r1
   17dc8:	bne	18b1c <main@@Base+0x2a38>
   17dcc:	ldr	r0, [sp, #28]
   17dd0:	mov	r1, r7
   17dd4:	mov	r2, r4
   17dd8:	mov	r3, #8
   17ddc:	bl	1a058 <main@@Base+0x3f74>
   17de0:	mov	r6, r0
   17de4:	cmp	r7, r0
   17de8:	beq	18f34 <main@@Base+0x2e50>
   17dec:	mov	r0, #0
   17df0:	str	r0, [sp, #36]	; 0x24
   17df4:	str	r0, [sp, #32]
   17df8:	ldr	r0, [sp, #28]
   17dfc:	mov	r1, r6
   17e00:	mov	r2, r4
   17e04:	mov	r5, r4
   17e08:	add	r4, sp, #32
   17e0c:	mov	r3, r4
   17e10:	bl	1c8d0 <main@@Base+0x67ec>
   17e14:	mov	r7, r0
   17e18:	cmp	r6, r0
   17e1c:	beq	190cc <main@@Base+0x2fe8>
   17e20:	mov	r8, r7
   17e24:	mov	r4, r5
   17e28:	b	190fc <main@@Base+0x3018>
   17e2c:	bic	r0, r7, #255	; 0xff
   17e30:	movw	r1, #29440	; 0x7300
   17e34:	movt	r1, #28783	; 0x706f
   17e38:	teq	r0, r1
   17e3c:	bne	170f8 <main@@Base+0x1014>
   17e40:	ldr	r0, [sp, #28]
   17e44:	mov	r1, r9
   17e48:	mov	r2, r4
   17e4c:	mov	r3, #3
   17e50:	bl	1a058 <main@@Base+0x3f74>
   17e54:	mov	r8, r0
   17e58:	cmp	r9, r0
   17e5c:	beq	18494 <main@@Base+0x23b0>
   17e60:	ldr	r0, [sp, #28]
   17e64:	ldr	r0, [r0]
   17e68:	mov	r1, #0
   17e6c:	mov	r2, #32
   17e70:	mov	r3, #16
   17e74:	bl	23f38 <flatcc_builder_table_add@@Base>
   17e78:	cmp	r0, #0
   17e7c:	add	r9, sp, #52	; 0x34
   17e80:	beq	17060 <main@@Base+0xf7c>
   17e84:	mov	r3, r0
   17e88:	ldr	r0, [sp, #28]
   17e8c:	mov	r1, r8
   17e90:	mov	r2, r4
   17e94:	bl	1b1e0 <main@@Base+0x50fc>
   17e98:	mov	r8, r0
   17e9c:	b	17110 <main@@Base+0x102c>
   17ea0:	eor	r0, sl, r2
   17ea4:	eor	r1, r7, r1
   17ea8:	orrs	r0, r0, r1
   17eac:	bne	18524 <main@@Base+0x2440>
   17eb0:	add	r6, r9, #8
   17eb4:	mov	r0, r6
   17eb8:	mov	r1, r4
   17ebc:	bl	1a054 <main@@Base+0x3f70>
   17ec0:	and	r0, r1, #-16777216	; 0xff000000
   17ec4:	teq	r0, #2030043136	; 0x79000000
   17ec8:	bne	18814 <main@@Base+0x2730>
   17ecc:	ldr	r0, [sp, #28]
   17ed0:	mov	r1, r6
   17ed4:	mov	r2, r4
   17ed8:	mov	r3, #1
   17edc:	bl	1a058 <main@@Base+0x3f74>
   17ee0:	mov	r8, r0
   17ee4:	cmp	r6, r0
   17ee8:	add	r9, sp, #52	; 0x34
   17eec:	beq	18980 <main@@Base+0x289c>
   17ef0:	ldr	r0, [sp, #28]
   17ef4:	ldr	r0, [r0]
   17ef8:	mov	r1, #1
   17efc:	mov	r2, #1
   17f00:	mvn	r3, #0
   17f04:	bl	22e68 <flatcc_builder_start_vector@@Base>
   17f08:	cmp	r0, #0
   17f0c:	ldr	r6, [sp, #24]
   17f10:	bne	17060 <main@@Base+0xf7c>
   17f14:	ldr	r0, [sp, #28]
   17f18:	mov	r1, r8
   17f1c:	mov	r2, r4
   17f20:	mov	r3, r9
   17f24:	bl	1ac10 <main@@Base+0x4b2c>
   17f28:	mov	r8, r0
   17f2c:	ldr	r0, [sp, #52]	; 0x34
   17f30:	cmp	r0, #0
   17f34:	beq	17ff4 <main@@Base+0x1f10>
   17f38:	mov	r0, #0
   17f3c:	strb	r0, [sp, #32]
   17f40:	ldr	r0, [sp, #28]
   17f44:	ldr	r0, [r0]
   17f48:	mov	r1, #1
   17f4c:	bl	2287c <flatcc_builder_extend_vector@@Base>
   17f50:	cmp	r0, #0
   17f54:	beq	17060 <main@@Base+0xf7c>
   17f58:	mov	r7, r0
   17f5c:	ldr	r0, [sp, #28]
   17f60:	mov	r1, r8
   17f64:	mov	r2, r4
   17f68:	mov	r5, r4
   17f6c:	add	r4, sp, #32
   17f70:	mov	r3, r4
   17f74:	bl	1aca0 <main@@Base+0x4bbc>
   17f78:	mov	r6, r0
   17f7c:	cmp	r8, r0
   17f80:	beq	17f90 <main@@Base+0x1eac>
   17f84:	mov	r8, r6
   17f88:	mov	r4, r5
   17f8c:	b	17fc0 <main@@Base+0x1edc>
   17f90:	str	r4, [sp]
   17f94:	ldr	r0, [sp, #28]
   17f98:	mov	r1, r6
   17f9c:	mov	r2, r5
   17fa0:	movw	r3, #41120	; 0xa0a0
   17fa4:	movt	r3, #4
   17fa8:	bl	1ad30 <main@@Base+0x4c4c>
   17fac:	mov	r8, r0
   17fb0:	cmp	r0, r6
   17fb4:	mov	r4, r5
   17fb8:	cmpne	r8, r4
   17fbc:	beq	17060 <main@@Base+0xf7c>
   17fc0:	ldrb	r1, [sp, #32]
   17fc4:	mov	r0, r7
   17fc8:	bl	1ae4c <main@@Base+0x4d68>
   17fcc:	ldr	r0, [sp, #28]
   17fd0:	mov	r1, r8
   17fd4:	mov	r2, r4
   17fd8:	mov	r3, r9
   17fdc:	bl	1ae6c <main@@Base+0x4d88>
   17fe0:	mov	r8, r0
   17fe4:	ldr	r0, [sp, #52]	; 0x34
   17fe8:	cmp	r0, #0
   17fec:	ldr	r6, [sp, #24]
   17ff0:	bne	17f38 <main@@Base+0x1e54>
   17ff4:	ldr	r0, [sp, #28]
   17ff8:	ldr	r0, [r0]
   17ffc:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   18000:	str	r0, [sp, #48]	; 0x30
   18004:	cmp	r0, #0
   18008:	beq	17060 <main@@Base+0xf7c>
   1800c:	ldr	r0, [sp, #28]
   18010:	ldr	r0, [r0]
   18014:	mov	r1, #5
   18018:	b	1944c <main@@Base+0x3368>
   1801c:	mov	r1, sl
   18020:	bfc	r1, #0, #16
   18024:	movw	r2, #0
   18028:	movt	r2, #26163	; 0x6633
   1802c:	subs	r2, r2, #65536	; 0x10000
   18030:	eor	r1, r1, r2
   18034:	sbc	r2, r3, #0
   18038:	eor	r2, r7, r2
   1803c:	orrs	r1, r1, r2
   18040:	bne	18594 <main@@Base+0x24b0>
   18044:	ldr	r0, [sp, #28]
   18048:	mov	r1, r9
   1804c:	mov	r2, r4
   18050:	mov	r3, #6
   18054:	bl	1a058 <main@@Base+0x3f74>
   18058:	mov	r6, r0
   1805c:	cmp	r9, r0
   18060:	beq	18814 <main@@Base+0x2730>
   18064:	mov	r0, #0
   18068:	str	r0, [sp, #32]
   1806c:	ldr	r0, [sp, #28]
   18070:	mov	r1, r6
   18074:	mov	r2, r4
   18078:	mov	r9, r4
   1807c:	add	r4, sp, #32
   18080:	mov	r3, r4
   18084:	bl	276dc <flatcc_json_parser_float@@Base>
   18088:	mov	r7, r0
   1808c:	cmp	r6, r0
   18090:	beq	18e70 <main@@Base+0x2d8c>
   18094:	mov	r8, r7
   18098:	ldr	r6, [sp, #24]
   1809c:	mov	r4, r9
   180a0:	add	r9, sp, #52	; 0x34
   180a4:	b	18eac <main@@Base+0x2dc8>
   180a8:	eor	r0, sl, r3
   180ac:	eor	r1, r7, r2
   180b0:	orrs	r0, r0, r1
   180b4:	bne	170f8 <main@@Base+0x1014>
   180b8:	add	r7, r9, #8
   180bc:	mov	r0, r7
   180c0:	mov	r1, r4
   180c4:	bl	1a054 <main@@Base+0x3f70>
   180c8:	movw	r2, #25711	; 0x646f
   180cc:	movt	r2, #26207	; 0x665f
   180d0:	eor	r2, r1, r2
   180d4:	movw	r3, #27749	; 0x6c65
   180d8:	movt	r3, #30050	; 0x7562
   180dc:	eor	r3, r0, r3
   180e0:	orrs	r2, r3, r2
   180e4:	bne	189a0 <main@@Base+0x28bc>
   180e8:	add	r6, r9, #16
   180ec:	mov	r0, r6
   180f0:	mov	r1, r4
   180f4:	bl	1a054 <main@@Base+0x3f70>
   180f8:	and	r0, r1, #-16777216	; 0xff000000
   180fc:	teq	r0, #1929379840	; 0x73000000
   18100:	bne	18814 <main@@Base+0x2730>
   18104:	ldr	r0, [sp, #28]
   18108:	mov	r1, r6
   1810c:	mov	r2, r4
   18110:	mov	r3, #1
   18114:	bl	1a058 <main@@Base+0x3f74>
   18118:	mov	r8, r0
   1811c:	cmp	r6, r0
   18120:	add	r9, sp, #52	; 0x34
   18124:	beq	18980 <main@@Base+0x289c>
   18128:	ldr	r0, [sp, #28]
   1812c:	ldr	r0, [r0]
   18130:	mov	r1, #8
   18134:	mov	r2, #8
   18138:	mvn	r3, #-536870912	; 0xe0000000
   1813c:	bl	22e68 <flatcc_builder_start_vector@@Base>
   18140:	cmp	r0, #0
   18144:	ldr	r6, [sp, #24]
   18148:	bne	17060 <main@@Base+0xf7c>
   1814c:	ldr	r0, [sp, #28]
   18150:	mov	r1, r8
   18154:	mov	r2, r4
   18158:	mov	r3, r9
   1815c:	bl	1ac10 <main@@Base+0x4b2c>
   18160:	mov	r8, r0
   18164:	ldr	r0, [sp, #52]	; 0x34
   18168:	cmp	r0, #0
   1816c:	beq	18230 <main@@Base+0x214c>
   18170:	mov	r0, #0
   18174:	str	r0, [sp, #36]	; 0x24
   18178:	str	r0, [sp, #32]
   1817c:	ldr	r0, [sp, #28]
   18180:	ldr	r0, [r0]
   18184:	mov	r1, #1
   18188:	bl	2287c <flatcc_builder_extend_vector@@Base>
   1818c:	cmp	r0, #0
   18190:	beq	17060 <main@@Base+0xf7c>
   18194:	mov	r7, r0
   18198:	ldr	r0, [sp, #28]
   1819c:	mov	r1, r8
   181a0:	mov	r2, r4
   181a4:	mov	r5, r4
   181a8:	add	r4, sp, #32
   181ac:	mov	r3, r4
   181b0:	bl	27604 <flatcc_json_parser_double@@Base>
   181b4:	mov	r6, r0
   181b8:	cmp	r8, r0
   181bc:	beq	181cc <main@@Base+0x20e8>
   181c0:	mov	r8, r6
   181c4:	mov	r4, r5
   181c8:	b	181fc <main@@Base+0x2118>
   181cc:	str	r4, [sp]
   181d0:	ldr	r0, [sp, #28]
   181d4:	mov	r1, r6
   181d8:	mov	r2, r5
   181dc:	movw	r3, #41328	; 0xa170
   181e0:	movt	r3, #4
   181e4:	bl	1ce6c <main@@Base+0x6d88>
   181e8:	mov	r8, r0
   181ec:	cmp	r0, r6
   181f0:	mov	r4, r5
   181f4:	cmpne	r8, r4
   181f8:	beq	17060 <main@@Base+0xf7c>
   181fc:	vldr	d0, [sp, #32]
   18200:	mov	r0, r7
   18204:	bl	1cf80 <main@@Base+0x6e9c>
   18208:	ldr	r0, [sp, #28]
   1820c:	mov	r1, r8
   18210:	mov	r2, r4
   18214:	mov	r3, r9
   18218:	bl	1ae6c <main@@Base+0x4d88>
   1821c:	mov	r8, r0
   18220:	ldr	r0, [sp, #52]	; 0x34
   18224:	cmp	r0, #0
   18228:	ldr	r6, [sp, #24]
   1822c:	bne	18170 <main@@Base+0x208c>
   18230:	ldr	r0, [sp, #28]
   18234:	ldr	r0, [r0]
   18238:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   1823c:	str	r0, [sp, #48]	; 0x30
   18240:	cmp	r0, #0
   18244:	beq	17060 <main@@Base+0xf7c>
   18248:	ldr	r0, [sp, #28]
   1824c:	ldr	r0, [r0]
   18250:	mov	r1, #33	; 0x21
   18254:	b	1944c <main@@Base+0x3368>
   18258:	ldr	r0, [sp, #28]
   1825c:	b	17100 <main@@Base+0x101c>
   18260:	add	r7, r9, #16
   18264:	mov	r0, r7
   18268:	mov	r1, r4
   1826c:	bl	1a054 <main@@Base+0x3f70>
   18270:	lsr	r0, r0, #8
   18274:	orr	r0, r0, r1, lsl #24
   18278:	movw	r2, #25460	; 0x6374
   1827c:	movt	r2, #29301	; 0x7275
   18280:	eor	r0, r0, r2
   18284:	movw	r2, #29556	; 0x7374
   18288:	movt	r2, #100	; 0x64
   1828c:	eor	r1, r2, r1, lsr #8
   18290:	orrs	r0, r0, r1
   18294:	bne	18348 <main@@Base+0x2264>
   18298:	ldr	r0, [sp, #28]
   1829c:	mov	r1, r7
   182a0:	mov	r2, r4
   182a4:	mov	r3, #7
   182a8:	bl	1a058 <main@@Base+0x3f74>
   182ac:	mov	r8, r0
   182b0:	cmp	r7, r0
   182b4:	add	r9, sp, #52	; 0x34
   182b8:	beq	18b34 <main@@Base+0x2a50>
   182bc:	ldr	r0, [sp, #28]
   182c0:	ldr	r0, [r0]
   182c4:	mov	r1, #8
   182c8:	mov	r2, #4
   182cc:	mvn	r3, #-536870912	; 0xe0000000
   182d0:	bl	22e68 <flatcc_builder_start_vector@@Base>
   182d4:	cmp	r0, #0
   182d8:	bne	17060 <main@@Base+0xf7c>
   182dc:	ldr	r5, [sp, #28]
   182e0:	mov	r0, r5
   182e4:	mov	r1, r8
   182e8:	mov	r2, r4
   182ec:	mov	r3, r9
   182f0:	bl	1ac10 <main@@Base+0x4b2c>
   182f4:	mov	r8, r0
   182f8:	ldr	r0, [r5]
   182fc:	ldr	r1, [sp, #52]	; 0x34
   18300:	cmp	r1, #0
   18304:	beq	18cb4 <main@@Base+0x2bd0>
   18308:	mov	r1, #1
   1830c:	bl	2287c <flatcc_builder_extend_vector@@Base>
   18310:	cmp	r0, #0
   18314:	beq	17060 <main@@Base+0xf7c>
   18318:	mov	r3, r0
   1831c:	ldr	r5, [sp, #28]
   18320:	mov	r0, r5
   18324:	mov	r1, r8
   18328:	mov	r2, r4
   1832c:	bl	1bddc <main@@Base+0x5cf8>
   18330:	mov	r1, r0
   18334:	mov	r0, r5
   18338:	mov	r2, r4
   1833c:	mov	r3, r9
   18340:	bl	1ae6c <main@@Base+0x4d88>
   18344:	b	182f4 <main@@Base+0x2210>
   18348:	ldr	r0, [sp, #28]
   1834c:	mov	r1, r7
   18350:	b	17100 <main@@Base+0x101c>
   18354:	add	r9, sp, #52	; 0x34
   18358:	b	18b1c <main@@Base+0x2a38>
   1835c:	ldr	r0, [sp, #28]
   18360:	mov	r1, r9
   18364:	mov	r2, r4
   18368:	mov	r3, #8
   1836c:	bl	1a058 <main@@Base+0x3f74>
   18370:	mov	r6, r0
   18374:	cmp	r9, r0
   18378:	beq	18814 <main@@Base+0x2730>
   1837c:	mov	r0, #0
   18380:	strb	r0, [sp, #32]
   18384:	ldr	r0, [sp, #28]
   18388:	mov	r1, r6
   1838c:	mov	r2, r4
   18390:	mov	r5, r4
   18394:	add	r4, sp, #32
   18398:	mov	r3, r4
   1839c:	bl	1bbe4 <main@@Base+0x5b00>
   183a0:	mov	r7, r0
   183a4:	cmp	r6, r0
   183a8:	add	r9, sp, #52	; 0x34
   183ac:	beq	18c18 <main@@Base+0x2b34>
   183b0:	mov	r8, r7
   183b4:	mov	r4, r5
   183b8:	b	18c48 <main@@Base+0x2b64>
   183bc:	add	r6, r9, #16
   183c0:	mov	r0, r6
   183c4:	mov	r1, r4
   183c8:	bl	1a054 <main@@Base+0x3f70>
   183cc:	and	r0, r1, #-16777216	; 0xff000000
   183d0:	teq	r0, #1929379840	; 0x73000000
   183d4:	bne	18814 <main@@Base+0x2730>
   183d8:	ldr	r0, [sp, #28]
   183dc:	mov	r1, r6
   183e0:	mov	r2, r4
   183e4:	mov	r3, #1
   183e8:	bl	1a058 <main@@Base+0x3f74>
   183ec:	mov	r8, r0
   183f0:	cmp	r6, r0
   183f4:	add	r9, sp, #52	; 0x34
   183f8:	beq	18980 <main@@Base+0x289c>
   183fc:	ldr	r0, [sp, #28]
   18400:	ldr	r0, [r0]
   18404:	bl	22ef8 <flatcc_builder_start_offset_vector@@Base>
   18408:	cmp	r0, #0
   1840c:	ldr	r6, [sp, #24]
   18410:	bne	17060 <main@@Base+0xf7c>
   18414:	ldr	r0, [sp, #28]
   18418:	mov	r1, r8
   1841c:	mov	r2, r4
   18420:	mov	r3, r9
   18424:	bl	1ac10 <main@@Base+0x4b2c>
   18428:	mov	r8, r0
   1842c:	ldr	r0, [sp, #52]	; 0x34
   18430:	cmp	r0, #0
   18434:	beq	18f04 <main@@Base+0x2e20>
   18438:	ldr	r0, [sp, #28]
   1843c:	mov	r1, r8
   18440:	mov	r2, r4
   18444:	add	r3, sp, #48	; 0x30
   18448:	bl	17020 <main@@Base+0xf3c>
   1844c:	mov	r8, r0
   18450:	ldr	r0, [sp, #48]	; 0x30
   18454:	cmp	r0, #0
   18458:	beq	17060 <main@@Base+0xf7c>
   1845c:	ldr	r0, [sp, #28]
   18460:	ldr	r0, [r0]
   18464:	mov	r1, #1
   18468:	bl	22a44 <flatcc_builder_extend_offset_vector@@Base>
   1846c:	cmp	r0, #0
   18470:	beq	17060 <main@@Base+0xf7c>
   18474:	ldr	r1, [sp, #48]	; 0x30
   18478:	str	r1, [r0]
   1847c:	ldr	r0, [sp, #28]
   18480:	mov	r1, r8
   18484:	mov	r2, r4
   18488:	mov	r3, r9
   1848c:	bl	1ae6c <main@@Base+0x4d88>
   18490:	b	18428 <main@@Base+0x2344>
   18494:	ldr	r0, [sp, #28]
   18498:	mov	r1, r8
   1849c:	b	17100 <main@@Base+0x101c>
   184a0:	movw	r2, #13407	; 0x345f
   184a4:	movt	r2, #30006	; 0x7536
   184a8:	eor	r2, r1, r2
   184ac:	orrs	r2, r0, r2
   184b0:	beq	18bb8 <main@@Base+0x2ad4>
   184b4:	movw	r2, #12895	; 0x325f
   184b8:	movt	r2, #30003	; 0x7533
   184bc:	eor	r1, r1, r2
   184c0:	orrs	r0, r0, r1
   184c4:	bne	18b1c <main@@Base+0x2a38>
   184c8:	ldr	r0, [sp, #28]
   184cc:	mov	r1, r7
   184d0:	mov	r2, r4
   184d4:	mov	r3, #8
   184d8:	bl	1a058 <main@@Base+0x3f74>
   184dc:	mov	r6, r0
   184e0:	cmp	r7, r0
   184e4:	beq	18fb0 <main@@Base+0x2ecc>
   184e8:	mov	r0, #0
   184ec:	str	r0, [sp, #32]
   184f0:	ldr	r0, [sp, #28]
   184f4:	mov	r1, r6
   184f8:	mov	r2, r4
   184fc:	mov	r5, r4
   18500:	add	r4, sp, #32
   18504:	mov	r3, r4
   18508:	bl	1cab8 <main@@Base+0x69d4>
   1850c:	mov	r7, r0
   18510:	cmp	r6, r0
   18514:	beq	192d0 <main@@Base+0x31ec>
   18518:	mov	r8, r7
   1851c:	mov	r4, r5
   18520:	b	19300 <main@@Base+0x321c>
   18524:	movw	r0, #28257	; 0x6e61
   18528:	movt	r0, #28001	; 0x6d61
   1852c:	teq	r7, r0
   18530:	bne	170f8 <main@@Base+0x1014>
   18534:	ldr	r0, [sp, #28]
   18538:	mov	r1, r9
   1853c:	mov	r2, r4
   18540:	mov	r3, #4
   18544:	bl	1a058 <main@@Base+0x3f74>
   18548:	mov	r6, r0
   1854c:	cmp	r9, r0
   18550:	beq	18814 <main@@Base+0x2730>
   18554:	mov	r0, #0
   18558:	strh	r0, [sp, #32]
   1855c:	ldr	r0, [sp, #28]
   18560:	mov	r1, r6
   18564:	mov	r2, r4
   18568:	mov	r5, r4
   1856c:	add	r4, sp, #32
   18570:	mov	r3, r4
   18574:	bl	1af2c <main@@Base+0x4e48>
   18578:	mov	r7, r0
   1857c:	cmp	r6, r0
   18580:	add	r9, sp, #52	; 0x34
   18584:	beq	1914c <main@@Base+0x3068>
   18588:	mov	r8, r7
   1858c:	ldr	r6, [sp, #24]
   18590:	b	19180 <main@@Base+0x309c>
   18594:	and	r1, sl, #-16777216	; 0xff000000
   18598:	eor	r1, r1, #1711276032	; 0x66000000
   1859c:	orrs	r0, r1, r0
   185a0:	bne	170f8 <main@@Base+0x1014>
   185a4:	ldr	r0, [sp, #28]
   185a8:	mov	r1, r9
   185ac:	mov	r2, r4
   185b0:	mov	r3, #5
   185b4:	bl	1a058 <main@@Base+0x3f74>
   185b8:	mov	r6, r0
   185bc:	cmp	r9, r0
   185c0:	beq	18814 <main@@Base+0x2730>
   185c4:	mov	r0, #0
   185c8:	str	r0, [sp, #32]
   185cc:	ldr	r0, [sp, #28]
   185d0:	mov	r1, r6
   185d4:	mov	r2, r4
   185d8:	mov	r9, r4
   185dc:	add	r4, sp, #32
   185e0:	mov	r3, r4
   185e4:	bl	276dc <flatcc_json_parser_float@@Base>
   185e8:	mov	r7, r0
   185ec:	cmp	r6, r0
   185f0:	beq	191cc <main@@Base+0x30e8>
   185f4:	mov	r8, r7
   185f8:	ldr	r6, [sp, #24]
   185fc:	mov	r4, r9
   18600:	add	r9, sp, #52	; 0x34
   18604:	b	19208 <main@@Base+0x3124>
   18608:	str	r4, [sp]
   1860c:	ldr	r0, [sp, #28]
   18610:	mov	r1, r7
   18614:	mov	r2, r5
   18618:	movw	r3, #41208	; 0xa0f8
   1861c:	movt	r3, #4
   18620:	bl	1c5e0 <main@@Base+0x64fc>
   18624:	mov	r8, r0
   18628:	cmp	r0, r7
   1862c:	ldr	r6, [sp, #24]
   18630:	mov	r4, r5
   18634:	cmpne	r8, r4
   18638:	beq	17060 <main@@Base+0xf7c>
   1863c:	vldr	s0, [sp, #32]
   18640:	vcmp.f32	s0, #0.0
   18644:	vmrs	APSR_nzcv, fpscr
   18648:	bne	1865c <main@@Base+0x2578>
   1864c:	ldr	r0, [sp, #28]
   18650:	ldrb	r0, [r0, #8]
   18654:	tst	r0, #2
   18658:	beq	17110 <main@@Base+0x102c>
   1865c:	ldr	r0, [sp, #28]
   18660:	ldr	r0, [r0]
   18664:	mov	r1, #27
   18668:	b	19234 <main@@Base+0x3150>
   1866c:	ldr	r6, [sp, #24]
   18670:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   18674:	str	r0, [sp, #48]	; 0x30
   18678:	cmp	r0, #0
   1867c:	beq	17060 <main@@Base+0xf7c>
   18680:	ldr	r0, [sp, #28]
   18684:	ldr	r0, [r0]
   18688:	mov	r1, #9
   1868c:	b	1944c <main@@Base+0x3368>
   18690:	mov	r9, r1
   18694:	movw	r3, #29556	; 0x7374
   18698:	movt	r3, #29797	; 0x7465
   1869c:	eor	r0, r7, r3
   186a0:	eor	r1, r4, #889192448	; 0x35000000
   186a4:	orrs	r0, r1, r0
   186a8:	bne	18780 <main@@Base+0x269c>
   186ac:	ldr	r0, [sp, #28]
   186b0:	mov	r1, r9
   186b4:	ldr	r4, [sp, #20]
   186b8:	mov	r2, r4
   186bc:	mov	r3, #5
   186c0:	bl	1a058 <main@@Base+0x3f74>
   186c4:	mov	r8, r0
   186c8:	cmp	r9, r0
   186cc:	beq	18778 <main@@Base+0x2694>
   186d0:	ldr	r0, [sp, #28]
   186d4:	ldr	r0, [r0]
   186d8:	mov	r1, #4
   186dc:	mov	r2, #2
   186e0:	mvn	r3, #-1073741824	; 0xc0000000
   186e4:	bl	22e68 <flatcc_builder_start_vector@@Base>
   186e8:	cmp	r0, #0
   186ec:	bne	17060 <main@@Base+0xf7c>
   186f0:	ldr	r5, [sp, #28]
   186f4:	mov	r0, r5
   186f8:	mov	r1, r8
   186fc:	mov	r2, r4
   18700:	add	r9, sp, #52	; 0x34
   18704:	mov	r3, r9
   18708:	bl	1ac10 <main@@Base+0x4b2c>
   1870c:	mov	r8, r0
   18710:	ldr	r0, [r5]
   18714:	ldr	r1, [sp, #52]	; 0x34
   18718:	cmp	r1, #0
   1871c:	beq	18c90 <main@@Base+0x2bac>
   18720:	ldr	r6, [sp, #24]
   18724:	mov	r1, #1
   18728:	bl	2287c <flatcc_builder_extend_vector@@Base>
   1872c:	cmp	r0, #0
   18730:	beq	17060 <main@@Base+0xf7c>
   18734:	mov	r3, r0
   18738:	ldr	r5, [sp, #28]
   1873c:	mov	r0, r5
   18740:	mov	r1, r8
   18744:	mov	r2, r4
   18748:	bl	1b680 <main@@Base+0x559c>
   1874c:	mov	r1, r0
   18750:	mov	r0, r5
   18754:	mov	r2, r4
   18758:	mov	r3, r9
   1875c:	bl	1ae6c <main@@Base+0x4d88>
   18760:	mov	r8, r0
   18764:	ldr	r0, [r5]
   18768:	ldr	r1, [sp, #52]	; 0x34
   1876c:	cmp	r1, #0
   18770:	bne	18724 <main@@Base+0x2640>
   18774:	b	18c94 <main@@Base+0x2bb0>
   18778:	mov	r9, r8
   1877c:	b	18784 <main@@Base+0x26a0>
   18780:	ldr	r4, [sp, #20]
   18784:	movw	r0, #31088	; 0x7970
   18788:	movt	r0, #24436	; 0x5f74
   1878c:	eor	r0, sl, r0
   18790:	orrs	r0, r0, r6
   18794:	bne	18830 <main@@Base+0x274c>
   18798:	add	r6, r9, #8
   1879c:	mov	r0, r6
   187a0:	mov	r1, r4
   187a4:	bl	1a054 <main@@Base+0x3f70>
   187a8:	and	r0, r1, #-16777216	; 0xff000000
   187ac:	teq	r0, #1694498816	; 0x65000000
   187b0:	bne	18814 <main@@Base+0x2730>
   187b4:	ldr	r0, [sp, #28]
   187b8:	mov	r1, r6
   187bc:	mov	r2, r4
   187c0:	mov	r3, #1
   187c4:	bl	1a058 <main@@Base+0x3f74>
   187c8:	mov	r1, r0
   187cc:	cmp	r6, r0
   187d0:	add	r9, sp, #52	; 0x34
   187d4:	beq	1883c <main@@Base+0x2758>
   187d8:	ldr	r0, [sp, #44]	; 0x2c
   187dc:	mov	r2, #8
   187e0:	str	r2, [sp]
   187e4:	str	r0, [sp, #4]
   187e8:	movw	r0, #41144	; 0xa0b8
   187ec:	movt	r0, #4
   187f0:	str	r0, [sp, #8]
   187f4:	movw	r0, #47248	; 0xb890
   187f8:	movt	r0, #1
   187fc:	str	r0, [sp, #12]
   18800:	ldr	r0, [sp, #28]
   18804:	mov	r2, r4
   18808:	mov	r3, #0
   1880c:	bl	284e8 <flatcc_json_parser_union_type@@Base>
   18810:	b	190c0 <main@@Base+0x2fdc>
   18814:	ldr	r0, [sp, #28]
   18818:	mov	r1, r6
   1881c:	mov	r2, r4
   18820:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   18824:	mov	r8, r0
   18828:	ldr	r6, [sp, #24]
   1882c:	b	1710c <main@@Base+0x1028>
   18830:	ldr	r0, [sp, #28]
   18834:	mov	r1, r9
   18838:	b	1881c <main@@Base+0x2738>
   1883c:	ldr	r0, [sp, #28]
   18840:	b	190b8 <main@@Base+0x2fd4>
   18844:	and	r0, r1, #-16777216	; 0xff000000
   18848:	teq	r0, #1728053248	; 0x67000000
   1884c:	add	r9, sp, #52	; 0x34
   18850:	bne	18b1c <main@@Base+0x2a38>
   18854:	ldr	r0, [sp, #28]
   18858:	mov	r1, r7
   1885c:	mov	r2, r4
   18860:	mov	r3, #1
   18864:	bl	1a058 <main@@Base+0x3f74>
   18868:	mov	r8, r0
   1886c:	cmp	r7, r0
   18870:	beq	18b34 <main@@Base+0x2a50>
   18874:	ldr	r0, [sp, #28]
   18878:	ldr	r0, [r0]
   1887c:	bl	22ef8 <flatcc_builder_start_offset_vector@@Base>
   18880:	cmp	r0, #0
   18884:	bne	17060 <main@@Base+0xf7c>
   18888:	ldr	r0, [sp, #28]
   1888c:	mov	r1, r8
   18890:	mov	r2, r4
   18894:	mov	r3, r9
   18898:	bl	1ac10 <main@@Base+0x4b2c>
   1889c:	mov	r8, r0
   188a0:	ldr	r0, [sp, #52]	; 0x34
   188a4:	cmp	r0, #0
   188a8:	beq	19254 <main@@Base+0x3170>
   188ac:	ldr	r0, [sp, #28]
   188b0:	mov	r1, r8
   188b4:	mov	r2, r4
   188b8:	add	r3, sp, #48	; 0x30
   188bc:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   188c0:	mov	r8, r0
   188c4:	ldr	r0, [sp, #48]	; 0x30
   188c8:	cmp	r0, #0
   188cc:	beq	17060 <main@@Base+0xf7c>
   188d0:	ldr	r0, [sp, #28]
   188d4:	ldr	r0, [r0]
   188d8:	mov	r1, #1
   188dc:	bl	22a44 <flatcc_builder_extend_offset_vector@@Base>
   188e0:	cmp	r0, #0
   188e4:	beq	17060 <main@@Base+0xf7c>
   188e8:	ldr	r1, [sp, #48]	; 0x30
   188ec:	str	r1, [r0]
   188f0:	ldr	r0, [sp, #28]
   188f4:	mov	r1, r8
   188f8:	mov	r2, r4
   188fc:	mov	r3, r9
   18900:	bl	1ae6c <main@@Base+0x4d88>
   18904:	b	1889c <main@@Base+0x27b8>
   18908:	str	r8, [sp]
   1890c:	ldr	r0, [sp, #28]
   18910:	mov	r1, r7
   18914:	mov	r2, r4
   18918:	movw	r3, #41080	; 0xa078
   1891c:	movt	r3, #4
   18920:	bl	1aad4 <main@@Base+0x49f0>
   18924:	mov	r8, r0
   18928:	cmp	r0, r7
   1892c:	ldr	r6, [sp, #24]
   18930:	cmpne	r8, r4
   18934:	beq	17060 <main@@Base+0xf7c>
   18938:	ldrb	r4, [sp, #32]
   1893c:	cmp	r4, #8
   18940:	bne	18954 <main@@Base+0x2870>
   18944:	ldr	r0, [sp, #28]
   18948:	ldrb	r0, [r0, #8]
   1894c:	tst	r0, #2
   18950:	beq	191c4 <main@@Base+0x30e0>
   18954:	ldr	r0, [sp, #28]
   18958:	ldr	r0, [r0]
   1895c:	mov	r1, #6
   18960:	mov	r2, #1
   18964:	mov	r3, #1
   18968:	bl	23f38 <flatcc_builder_table_add@@Base>
   1896c:	cmp	r0, #0
   18970:	beq	19618 <main@@Base+0x3534>
   18974:	sxtb	r1, r4
   18978:	bl	1abf0 <main@@Base+0x4b0c>
   1897c:	b	191c4 <main@@Base+0x30e0>
   18980:	ldr	r0, [sp, #28]
   18984:	mov	r1, r8
   18988:	b	190b8 <main@@Base+0x2fd4>
   1898c:	mov	r7, r8
   18990:	b	18b1c <main@@Base+0x2a38>
   18994:	ldr	r0, [sp, #28]
   18998:	mov	r1, r7
   1899c:	b	1881c <main@@Base+0x2738>
   189a0:	movw	r2, #24428	; 0x5f6c
   189a4:	movt	r2, #102	; 0x66
   189a8:	eor	r2, r2, r1, lsr #8
   189ac:	lsr	r0, r0, #8
   189b0:	orr	r0, r0, r1, lsl #24
   189b4:	movw	r1, #26483	; 0x6773
   189b8:	movt	r1, #28526	; 0x6f6e
   189bc:	eor	r0, r0, r1
   189c0:	orrs	r0, r0, r2
   189c4:	add	r9, sp, #52	; 0x34
   189c8:	bne	18b1c <main@@Base+0x2a38>
   189cc:	ldr	r0, [sp, #28]
   189d0:	mov	r1, r7
   189d4:	mov	r2, r4
   189d8:	mov	r3, #7
   189dc:	bl	1a058 <main@@Base+0x3f74>
   189e0:	mov	r8, r0
   189e4:	cmp	r7, r0
   189e8:	beq	18b34 <main@@Base+0x2a50>
   189ec:	ldr	r0, [sp, #28]
   189f0:	ldr	r0, [r0]
   189f4:	mov	r1, #8
   189f8:	mov	r2, #8
   189fc:	mvn	r3, #-536870912	; 0xe0000000
   18a00:	bl	22e68 <flatcc_builder_start_vector@@Base>
   18a04:	cmp	r0, #0
   18a08:	bne	17060 <main@@Base+0xf7c>
   18a0c:	ldr	r0, [sp, #28]
   18a10:	mov	r1, r8
   18a14:	mov	r2, r4
   18a18:	mov	r3, r9
   18a1c:	bl	1ac10 <main@@Base+0x4b2c>
   18a20:	mov	r8, r0
   18a24:	ldr	r0, [sp, #52]	; 0x34
   18a28:	cmp	r0, #0
   18a2c:	beq	18af4 <main@@Base+0x2a10>
   18a30:	mov	r0, #0
   18a34:	str	r0, [sp, #36]	; 0x24
   18a38:	str	r0, [sp, #32]
   18a3c:	ldr	r0, [sp, #28]
   18a40:	ldr	r0, [r0]
   18a44:	mov	r1, #1
   18a48:	bl	2287c <flatcc_builder_extend_vector@@Base>
   18a4c:	cmp	r0, #0
   18a50:	beq	17060 <main@@Base+0xf7c>
   18a54:	mov	r7, r0
   18a58:	ldr	r0, [sp, #28]
   18a5c:	mov	r1, r8
   18a60:	mov	r2, r4
   18a64:	mov	r5, r4
   18a68:	add	r4, sp, #32
   18a6c:	mov	r3, r4
   18a70:	bl	1c8d0 <main@@Base+0x67ec>
   18a74:	mov	r6, r0
   18a78:	cmp	r8, r0
   18a7c:	beq	18a8c <main@@Base+0x29a8>
   18a80:	mov	r8, r6
   18a84:	mov	r4, r5
   18a88:	b	18abc <main@@Base+0x29d8>
   18a8c:	str	r4, [sp]
   18a90:	ldr	r0, [sp, #28]
   18a94:	mov	r1, r6
   18a98:	mov	r2, r5
   18a9c:	movw	r3, #41340	; 0xa17c
   18aa0:	movt	r3, #4
   18aa4:	bl	1c964 <main@@Base+0x6880>
   18aa8:	mov	r8, r0
   18aac:	cmp	r0, r6
   18ab0:	mov	r4, r5
   18ab4:	cmpne	r8, r4
   18ab8:	beq	17060 <main@@Base+0xf7c>
   18abc:	ldr	r2, [sp, #32]
   18ac0:	ldr	r3, [sp, #36]	; 0x24
   18ac4:	mov	r0, r7
   18ac8:	bl	1ca90 <main@@Base+0x69ac>
   18acc:	ldr	r0, [sp, #28]
   18ad0:	mov	r1, r8
   18ad4:	mov	r2, r4
   18ad8:	mov	r3, r9
   18adc:	bl	1ae6c <main@@Base+0x4d88>
   18ae0:	mov	r8, r0
   18ae4:	ldr	r0, [sp, #52]	; 0x34
   18ae8:	cmp	r0, #0
   18aec:	ldr	r6, [sp, #24]
   18af0:	bne	18a30 <main@@Base+0x294c>
   18af4:	ldr	r0, [sp, #28]
   18af8:	ldr	r0, [r0]
   18afc:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   18b00:	str	r0, [sp, #48]	; 0x30
   18b04:	cmp	r0, #0
   18b08:	beq	17060 <main@@Base+0xf7c>
   18b0c:	ldr	r0, [sp, #28]
   18b10:	ldr	r0, [r0]
   18b14:	mov	r1, #32
   18b18:	b	1944c <main@@Base+0x3368>
   18b1c:	ldr	r0, [sp, #28]
   18b20:	mov	r1, r7
   18b24:	mov	r2, r4
   18b28:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   18b2c:	mov	r8, r0
   18b30:	b	17110 <main@@Base+0x102c>
   18b34:	ldr	r0, [sp, #28]
   18b38:	mov	r1, r8
   18b3c:	b	18b24 <main@@Base+0x2a40>
   18b40:	add	r6, r6, #8
   18b44:	mov	r0, r6
   18b48:	mov	r1, r4
   18b4c:	bl	1a054 <main@@Base+0x3f70>
   18b50:	and	r0, r1, #-16777216	; 0xff000000
   18b54:	teq	r0, #1627389952	; 0x61000000
   18b58:	bne	190a4 <main@@Base+0x2fc0>
   18b5c:	ldr	r0, [sp, #28]
   18b60:	mov	r1, r6
   18b64:	mov	r2, r4
   18b68:	mov	r3, #1
   18b6c:	bl	1a058 <main@@Base+0x3f74>
   18b70:	mov	r7, r0
   18b74:	cmp	r6, r0
   18b78:	beq	190b0 <main@@Base+0x2fcc>
   18b7c:	mov	r0, #0
   18b80:	str	r0, [sp, #32]
   18b84:	ldr	r0, [sp, #28]
   18b88:	mov	r1, r7
   18b8c:	mov	r2, r4
   18b90:	mov	r5, r4
   18b94:	add	r4, sp, #32
   18b98:	mov	r3, r4
   18b9c:	bl	1c704 <main@@Base+0x6620>
   18ba0:	mov	r6, r0
   18ba4:	cmp	r7, r0
   18ba8:	beq	193cc <main@@Base+0x32e8>
   18bac:	mov	r8, r6
   18bb0:	mov	r4, r5
   18bb4:	b	193fc <main@@Base+0x3318>
   18bb8:	ldr	r0, [sp, #28]
   18bbc:	mov	r1, r7
   18bc0:	mov	r2, r4
   18bc4:	mov	r3, #8
   18bc8:	bl	1a058 <main@@Base+0x3f74>
   18bcc:	mov	r6, r0
   18bd0:	cmp	r7, r0
   18bd4:	beq	19028 <main@@Base+0x2f44>
   18bd8:	mov	r0, #0
   18bdc:	str	r0, [sp, #36]	; 0x24
   18be0:	str	r0, [sp, #32]
   18be4:	ldr	r0, [sp, #28]
   18be8:	mov	r1, r6
   18bec:	mov	r2, r4
   18bf0:	mov	r5, r4
   18bf4:	add	r4, sp, #32
   18bf8:	mov	r3, r4
   18bfc:	bl	1cc84 <main@@Base+0x6ba0>
   18c00:	mov	r7, r0
   18c04:	cmp	r6, r0
   18c08:	beq	19348 <main@@Base+0x3264>
   18c0c:	mov	r8, r7
   18c10:	mov	r4, r5
   18c14:	b	19378 <main@@Base+0x3294>
   18c18:	str	r4, [sp]
   18c1c:	ldr	r0, [sp, #28]
   18c20:	mov	r1, r7
   18c24:	mov	r2, r5
   18c28:	movw	r3, #41172	; 0xa0d4
   18c2c:	movt	r3, #4
   18c30:	bl	1bca0 <main@@Base+0x5bbc>
   18c34:	mov	r8, r0
   18c38:	cmp	r0, r7
   18c3c:	mov	r4, r5
   18c40:	cmpne	r8, r4
   18c44:	beq	17060 <main@@Base+0xf7c>
   18c48:	ldrb	r6, [sp, #32]
   18c4c:	cmp	r6, #1
   18c50:	bne	18c64 <main@@Base+0x2b80>
   18c54:	ldr	r0, [sp, #28]
   18c58:	ldrb	r0, [r0, #8]
   18c5c:	tst	r0, #2
   18c60:	beq	193c4 <main@@Base+0x32e0>
   18c64:	ldr	r0, [sp, #28]
   18c68:	ldr	r0, [r0]
   18c6c:	mov	r1, #15
   18c70:	mov	r2, #1
   18c74:	mov	r3, #1
   18c78:	bl	23f38 <flatcc_builder_table_add@@Base>
   18c7c:	cmp	r0, #0
   18c80:	beq	17060 <main@@Base+0xf7c>
   18c84:	mov	r1, r6
   18c88:	bl	1bdbc <main@@Base+0x5cd8>
   18c8c:	b	193c4 <main@@Base+0x32e0>
   18c90:	ldr	r6, [sp, #24]
   18c94:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   18c98:	str	r0, [sp, #48]	; 0x30
   18c9c:	cmp	r0, #0
   18ca0:	beq	17060 <main@@Base+0xf7c>
   18ca4:	ldr	r0, [sp, #28]
   18ca8:	ldr	r0, [r0]
   18cac:	mov	r1, #31
   18cb0:	b	1944c <main@@Base+0x3368>
   18cb4:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   18cb8:	str	r0, [sp, #48]	; 0x30
   18cbc:	cmp	r0, #0
   18cc0:	beq	17060 <main@@Base+0xf7c>
   18cc4:	ldr	r0, [sp, #28]
   18cc8:	ldr	r0, [r0]
   18ccc:	mov	r1, #29
   18cd0:	b	1944c <main@@Base+0x3368>
   18cd4:	mov	r8, r6
   18cd8:	ldr	r6, [sp, #24]
   18cdc:	mov	r4, r5
   18ce0:	ldrb	r1, [sp, #32]
   18ce4:	mov	r0, r7
   18ce8:	bl	1ae4c <main@@Base+0x4d68>
   18cec:	ldr	r0, [sp, #28]
   18cf0:	mov	r1, r8
   18cf4:	mov	r2, r4
   18cf8:	mov	r3, r9
   18cfc:	bl	1ae6c <main@@Base+0x4d88>
   18d00:	mov	r8, r0
   18d04:	ldr	r0, [sp, #52]	; 0x34
   18d08:	cmp	r0, #0
   18d0c:	beq	19428 <main@@Base+0x3344>
   18d10:	mov	r0, #0
   18d14:	strb	r0, [sp, #32]
   18d18:	ldr	r0, [sp, #28]
   18d1c:	ldr	r0, [r0]
   18d20:	mov	r1, #1
   18d24:	bl	2287c <flatcc_builder_extend_vector@@Base>
   18d28:	cmp	r0, #0
   18d2c:	beq	17060 <main@@Base+0xf7c>
   18d30:	mov	r7, r0
   18d34:	ldr	r0, [sp, #28]
   18d38:	mov	r1, r8
   18d3c:	mov	r2, r4
   18d40:	mov	r5, r4
   18d44:	add	r4, sp, #32
   18d48:	mov	r3, r4
   18d4c:	bl	1aca0 <main@@Base+0x4bbc>
   18d50:	mov	r6, r0
   18d54:	cmp	r8, r0
   18d58:	bne	18cd4 <main@@Base+0x2bf0>
   18d5c:	str	r4, [sp]
   18d60:	ldr	r0, [sp, #28]
   18d64:	mov	r1, r6
   18d68:	mov	r2, r5
   18d6c:	movw	r3, #41316	; 0xa164
   18d70:	movt	r3, #4
   18d74:	bl	1ad30 <main@@Base+0x4c4c>
   18d78:	mov	r8, r0
   18d7c:	cmp	r0, r6
   18d80:	mov	r4, r5
   18d84:	beq	17060 <main@@Base+0xf7c>
   18d88:	cmp	r8, r4
   18d8c:	ldr	r6, [sp, #24]
   18d90:	bne	18ce0 <main@@Base+0x2bfc>
   18d94:	b	17060 <main@@Base+0xf7c>
   18d98:	str	r4, [sp]
   18d9c:	ldr	r0, [sp, #28]
   18da0:	mov	r1, r7
   18da4:	mov	r2, r5
   18da8:	movw	r3, #41220	; 0xa104
   18dac:	movt	r3, #4
   18db0:	bl	1c794 <main@@Base+0x66b0>
   18db4:	mov	r8, r0
   18db8:	cmp	r0, r7
   18dbc:	mov	r4, r5
   18dc0:	cmpne	r8, r4
   18dc4:	beq	17060 <main@@Base+0xf7c>
   18dc8:	ldr	r6, [sp, #32]
   18dcc:	cmp	r6, #0
   18dd0:	bne	18de4 <main@@Base+0x2d00>
   18dd4:	ldr	r0, [sp, #28]
   18dd8:	ldrb	r0, [r0, #8]
   18ddc:	tst	r0, #2
   18de0:	beq	193c4 <main@@Base+0x32e0>
   18de4:	ldr	r0, [sp, #28]
   18de8:	ldr	r0, [r0]
   18dec:	mov	r1, #16
   18df0:	mov	r2, #4
   18df4:	mov	r3, #4
   18df8:	bl	23f38 <flatcc_builder_table_add@@Base>
   18dfc:	cmp	r0, #0
   18e00:	beq	17060 <main@@Base+0xf7c>
   18e04:	mov	r1, r6
   18e08:	bl	1c8b0 <main@@Base+0x67cc>
   18e0c:	b	193c4 <main@@Base+0x32e0>
   18e10:	str	r4, [sp]
   18e14:	ldr	r0, [sp, #28]
   18e18:	mov	r1, r7
   18e1c:	mov	r2, r5
   18e20:	movw	r3, #41108	; 0xa094
   18e24:	movt	r3, #4
   18e28:	bl	1afbc <main@@Base+0x4ed8>
   18e2c:	mov	r8, r0
   18e30:	cmp	r0, r7
   18e34:	ldr	r6, [sp, #24]
   18e38:	mov	r4, r5
   18e3c:	cmpne	r8, r4
   18e40:	beq	17060 <main@@Base+0xf7c>
   18e44:	ldrh	r4, [sp, #32]
   18e48:	cmp	r4, #100	; 0x64
   18e4c:	bne	18e60 <main@@Base+0x2d7c>
   18e50:	ldr	r0, [sp, #28]
   18e54:	ldrb	r0, [r0, #8]
   18e58:	tst	r0, #2
   18e5c:	beq	191c4 <main@@Base+0x30e0>
   18e60:	ldr	r0, [sp, #28]
   18e64:	ldr	r0, [r0]
   18e68:	mov	r1, #2
   18e6c:	b	191a8 <main@@Base+0x30c4>
   18e70:	str	r4, [sp]
   18e74:	ldr	r0, [sp, #28]
   18e78:	mov	r1, r7
   18e7c:	mov	r2, r9
   18e80:	movw	r3, #41184	; 0xa0e0
   18e84:	movt	r3, #4
   18e88:	bl	1c5e0 <main@@Base+0x64fc>
   18e8c:	mov	r8, r0
   18e90:	cmp	r0, r7
   18e94:	ldr	r6, [sp, #24]
   18e98:	mov	r4, r9
   18e9c:	beq	17060 <main@@Base+0xf7c>
   18ea0:	cmp	r8, r4
   18ea4:	add	r9, sp, #52	; 0x34
   18ea8:	beq	17060 <main@@Base+0xf7c>
   18eac:	vldr	s0, [sp, #32]
   18eb0:	vcmp.f32	s0, s16
   18eb4:	vmrs	APSR_nzcv, fpscr
   18eb8:	bne	18ecc <main@@Base+0x2de8>
   18ebc:	ldr	r0, [sp, #28]
   18ec0:	ldrb	r0, [r0, #8]
   18ec4:	tst	r0, #2
   18ec8:	beq	17110 <main@@Base+0x102c>
   18ecc:	ldr	r0, [sp, #28]
   18ed0:	ldr	r0, [r0]
   18ed4:	mov	r1, #26
   18ed8:	b	19234 <main@@Base+0x3150>
   18edc:	ldr	r0, [sp, #28]
   18ee0:	ldr	r0, [r0]
   18ee4:	bl	22fac <flatcc_builder_end_offset_vector@@Base>
   18ee8:	str	r0, [sp, #48]	; 0x30
   18eec:	cmp	r0, #0
   18ef0:	beq	17060 <main@@Base+0xf7c>
   18ef4:	ldr	r0, [sp, #28]
   18ef8:	ldr	r0, [r0]
   18efc:	mov	r1, #28
   18f00:	b	1944c <main@@Base+0x3368>
   18f04:	ldr	r0, [sp, #28]
   18f08:	ldr	r0, [r0]
   18f0c:	bl	22fac <flatcc_builder_end_offset_vector@@Base>
   18f10:	str	r0, [sp, #48]	; 0x30
   18f14:	cmp	r0, #0
   18f18:	beq	17060 <main@@Base+0xf7c>
   18f1c:	ldr	r0, [sp, #28]
   18f20:	ldr	r0, [r0]
   18f24:	mov	r1, #11
   18f28:	b	1944c <main@@Base+0x3368>
   18f2c:	ldr	r0, [sp, #28]
   18f30:	b	18b24 <main@@Base+0x2a40>
   18f34:	add	r6, r6, #8
   18f38:	mov	r0, r6
   18f3c:	mov	r1, r4
   18f40:	bl	1a054 <main@@Base+0x3f70>
   18f44:	and	r0, r1, #-16777216	; 0xff000000
   18f48:	teq	r0, #1627389952	; 0x61000000
   18f4c:	bne	190a4 <main@@Base+0x2fc0>
   18f50:	ldr	r0, [sp, #28]
   18f54:	mov	r1, r6
   18f58:	mov	r2, r4
   18f5c:	mov	r3, #1
   18f60:	bl	1a058 <main@@Base+0x3f74>
   18f64:	mov	r7, r0
   18f68:	cmp	r6, r0
   18f6c:	beq	190b0 <main@@Base+0x2fcc>
   18f70:	mov	r0, #0
   18f74:	str	r0, [sp, #36]	; 0x24
   18f78:	str	r0, [sp, #32]
   18f7c:	ldr	r0, [sp, #28]
   18f80:	mov	r1, r7
   18f84:	mov	r2, r4
   18f88:	mov	r5, r4
   18f8c:	add	r4, sp, #32
   18f90:	mov	r3, r4
   18f94:	bl	1c8d0 <main@@Base+0x67ec>
   18f98:	mov	r6, r0
   18f9c:	cmp	r7, r0
   18fa0:	beq	19464 <main@@Base+0x3380>
   18fa4:	mov	r8, r6
   18fa8:	mov	r4, r5
   18fac:	b	19494 <main@@Base+0x33b0>
   18fb0:	add	r6, r6, #8
   18fb4:	mov	r0, r6
   18fb8:	mov	r1, r4
   18fbc:	bl	1a054 <main@@Base+0x3f70>
   18fc0:	and	r0, r1, #-16777216	; 0xff000000
   18fc4:	teq	r0, #1627389952	; 0x61000000
   18fc8:	bne	190a4 <main@@Base+0x2fc0>
   18fcc:	ldr	r0, [sp, #28]
   18fd0:	mov	r1, r6
   18fd4:	mov	r2, r4
   18fd8:	mov	r3, #1
   18fdc:	bl	1a058 <main@@Base+0x3f74>
   18fe0:	mov	r7, r0
   18fe4:	cmp	r6, r0
   18fe8:	beq	190b0 <main@@Base+0x2fcc>
   18fec:	mov	r0, #0
   18ff0:	str	r0, [sp, #32]
   18ff4:	ldr	r0, [sp, #28]
   18ff8:	mov	r1, r7
   18ffc:	mov	r2, r4
   19000:	mov	r5, r4
   19004:	add	r4, sp, #32
   19008:	mov	r3, r4
   1900c:	bl	1cab8 <main@@Base+0x69d4>
   19010:	mov	r6, r0
   19014:	cmp	r7, r0
   19018:	beq	194e4 <main@@Base+0x3400>
   1901c:	mov	r8, r6
   19020:	mov	r4, r5
   19024:	b	19514 <main@@Base+0x3430>
   19028:	add	r6, r6, #8
   1902c:	mov	r0, r6
   19030:	mov	r1, r4
   19034:	bl	1a054 <main@@Base+0x3f70>
   19038:	and	r0, r1, #-16777216	; 0xff000000
   1903c:	teq	r0, #1627389952	; 0x61000000
   19040:	bne	190a4 <main@@Base+0x2fc0>
   19044:	ldr	r0, [sp, #28]
   19048:	mov	r1, r6
   1904c:	mov	r2, r4
   19050:	mov	r3, #1
   19054:	bl	1a058 <main@@Base+0x3f74>
   19058:	mov	r7, r0
   1905c:	cmp	r6, r0
   19060:	beq	190b0 <main@@Base+0x2fcc>
   19064:	mov	r0, #0
   19068:	str	r0, [sp, #36]	; 0x24
   1906c:	str	r0, [sp, #32]
   19070:	ldr	r0, [sp, #28]
   19074:	mov	r1, r7
   19078:	mov	r2, r4
   1907c:	mov	r5, r4
   19080:	add	r4, sp, #32
   19084:	mov	r3, r4
   19088:	bl	1cc84 <main@@Base+0x6ba0>
   1908c:	mov	r6, r0
   19090:	cmp	r7, r0
   19094:	beq	19540 <main@@Base+0x345c>
   19098:	mov	r8, r6
   1909c:	mov	r4, r5
   190a0:	b	19570 <main@@Base+0x348c>
   190a4:	ldr	r0, [sp, #28]
   190a8:	mov	r1, r6
   190ac:	b	190b8 <main@@Base+0x2fd4>
   190b0:	ldr	r0, [sp, #28]
   190b4:	mov	r1, r7
   190b8:	mov	r2, r4
   190bc:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   190c0:	mov	r8, r0
   190c4:	ldr	r6, [sp, #24]
   190c8:	b	17110 <main@@Base+0x102c>
   190cc:	str	r4, [sp]
   190d0:	ldr	r0, [sp, #28]
   190d4:	mov	r1, r7
   190d8:	mov	r2, r5
   190dc:	movw	r3, #41244	; 0xa11c
   190e0:	movt	r3, #4
   190e4:	bl	1c964 <main@@Base+0x6880>
   190e8:	mov	r8, r0
   190ec:	cmp	r0, r7
   190f0:	mov	r4, r5
   190f4:	cmpne	r8, r4
   190f8:	beq	17060 <main@@Base+0xf7c>
   190fc:	ldr	r7, [sp, #32]
   19100:	ldr	r6, [sp, #36]	; 0x24
   19104:	orrs	r0, r7, r6
   19108:	bne	1911c <main@@Base+0x3038>
   1910c:	ldr	r0, [sp, #28]
   19110:	ldrb	r0, [r0, #8]
   19114:	tst	r0, #2
   19118:	beq	193c4 <main@@Base+0x32e0>
   1911c:	ldr	r0, [sp, #28]
   19120:	ldr	r0, [r0]
   19124:	mov	r1, #18
   19128:	mov	r2, #8
   1912c:	mov	r3, #8
   19130:	bl	23f38 <flatcc_builder_table_add@@Base>
   19134:	cmp	r0, #0
   19138:	beq	17060 <main@@Base+0xf7c>
   1913c:	mov	r2, r7
   19140:	mov	r3, r6
   19144:	bl	1ca90 <main@@Base+0x69ac>
   19148:	b	193c4 <main@@Base+0x32e0>
   1914c:	str	r4, [sp]
   19150:	ldr	r0, [sp, #28]
   19154:	mov	r1, r7
   19158:	mov	r2, r5
   1915c:	movw	r3, #41132	; 0xa0ac
   19160:	movt	r3, #4
   19164:	bl	1afbc <main@@Base+0x4ed8>
   19168:	mov	r8, r0
   1916c:	cmp	r0, r7
   19170:	ldr	r6, [sp, #24]
   19174:	mov	r4, r5
   19178:	cmpne	r8, r4
   1917c:	beq	17060 <main@@Base+0xf7c>
   19180:	ldrh	r4, [sp, #32]
   19184:	cmp	r4, #150	; 0x96
   19188:	bne	1919c <main@@Base+0x30b8>
   1918c:	ldr	r0, [sp, #28]
   19190:	ldrb	r0, [r0, #8]
   19194:	tst	r0, #2
   19198:	beq	191c4 <main@@Base+0x30e0>
   1919c:	ldr	r0, [sp, #28]
   191a0:	ldr	r0, [r0]
   191a4:	mov	r1, #1
   191a8:	mov	r2, #2
   191ac:	mov	r3, #2
   191b0:	bl	23f38 <flatcc_builder_table_add@@Base>
   191b4:	cmp	r0, #0
   191b8:	beq	19618 <main@@Base+0x3534>
   191bc:	sxth	r1, r4
   191c0:	bl	1b0d8 <main@@Base+0x4ff4>
   191c4:	ldr	r4, [sp, #20]
   191c8:	b	17110 <main@@Base+0x102c>
   191cc:	str	r4, [sp]
   191d0:	ldr	r0, [sp, #28]
   191d4:	mov	r1, r7
   191d8:	mov	r2, r9
   191dc:	movw	r3, #41196	; 0xa0ec
   191e0:	movt	r3, #4
   191e4:	bl	1c5e0 <main@@Base+0x64fc>
   191e8:	mov	r8, r0
   191ec:	cmp	r0, r7
   191f0:	ldr	r6, [sp, #24]
   191f4:	mov	r4, r9
   191f8:	beq	17060 <main@@Base+0xf7c>
   191fc:	cmp	r8, r4
   19200:	add	r9, sp, #52	; 0x34
   19204:	beq	17060 <main@@Base+0xf7c>
   19208:	vldr	s0, [sp, #32]
   1920c:	vcmp.f32	s0, s18
   19210:	vmrs	APSR_nzcv, fpscr
   19214:	bne	19228 <main@@Base+0x3144>
   19218:	ldr	r0, [sp, #28]
   1921c:	ldrb	r0, [r0, #8]
   19220:	tst	r0, #2
   19224:	beq	17110 <main@@Base+0x102c>
   19228:	ldr	r0, [sp, #28]
   1922c:	ldr	r0, [r0]
   19230:	mov	r1, #25
   19234:	mov	r2, #4
   19238:	mov	r3, #4
   1923c:	bl	23f38 <flatcc_builder_table_add@@Base>
   19240:	cmp	r0, #0
   19244:	beq	17060 <main@@Base+0xf7c>
   19248:	vldr	s0, [sp, #32]
   1924c:	bl	1c6ec <main@@Base+0x6608>
   19250:	b	17110 <main@@Base+0x102c>
   19254:	ldr	r0, [sp, #28]
   19258:	ldr	r0, [r0]
   1925c:	bl	22fac <flatcc_builder_end_offset_vector@@Base>
   19260:	str	r0, [sp, #48]	; 0x30
   19264:	cmp	r0, #0
   19268:	beq	17060 <main@@Base+0xf7c>
   1926c:	ldr	r0, [sp, #28]
   19270:	ldr	r0, [r0]
   19274:	mov	r1, #10
   19278:	b	1944c <main@@Base+0x3368>
   1927c:	ldr	r0, [sp, #28]
   19280:	ldr	r0, [r0]
   19284:	mov	r1, #0
   19288:	mov	r2, #0
   1928c:	mov	r3, #0
   19290:	bl	22450 <flatcc_builder_start_buffer@@Base>
   19294:	cmp	r0, #0
   19298:	bne	17060 <main@@Base+0xf7c>
   1929c:	ldr	r0, [sp, #28]
   192a0:	mov	r1, r8
   192a4:	mov	r2, r4
   192a8:	add	r3, sp, #48	; 0x30
   192ac:	bl	17020 <main@@Base+0xf3c>
   192b0:	mov	r8, r0
   192b4:	ldr	r1, [sp, #48]	; 0x30
   192b8:	cmp	r1, #0
   192bc:	beq	17060 <main@@Base+0xf7c>
   192c0:	ldr	r0, [sp, #28]
   192c4:	ldr	r0, [r0]
   192c8:	bl	22604 <flatcc_builder_end_buffer@@Base>
   192cc:	b	19434 <main@@Base+0x3350>
   192d0:	str	r4, [sp]
   192d4:	ldr	r0, [sp, #28]
   192d8:	mov	r1, r7
   192dc:	mov	r2, r5
   192e0:	movw	r3, #41268	; 0xa134
   192e4:	movt	r3, #4
   192e8:	bl	1cb48 <main@@Base+0x6a64>
   192ec:	mov	r8, r0
   192f0:	cmp	r0, r7
   192f4:	mov	r4, r5
   192f8:	cmpne	r8, r4
   192fc:	beq	17060 <main@@Base+0xf7c>
   19300:	ldr	r6, [sp, #32]
   19304:	cmp	r6, #0
   19308:	bne	1931c <main@@Base+0x3238>
   1930c:	ldr	r0, [sp, #28]
   19310:	ldrb	r0, [r0, #8]
   19314:	tst	r0, #2
   19318:	beq	193c4 <main@@Base+0x32e0>
   1931c:	ldr	r0, [sp, #28]
   19320:	ldr	r0, [r0]
   19324:	mov	r1, #17
   19328:	mov	r2, #4
   1932c:	mov	r3, #4
   19330:	bl	23f38 <flatcc_builder_table_add@@Base>
   19334:	cmp	r0, #0
   19338:	beq	17060 <main@@Base+0xf7c>
   1933c:	mov	r1, r6
   19340:	bl	1cc64 <main@@Base+0x6b80>
   19344:	b	193c4 <main@@Base+0x32e0>
   19348:	str	r4, [sp]
   1934c:	ldr	r0, [sp, #28]
   19350:	mov	r1, r7
   19354:	mov	r2, r5
   19358:	movw	r3, #41292	; 0xa14c
   1935c:	movt	r3, #4
   19360:	bl	1cd18 <main@@Base+0x6c34>
   19364:	mov	r8, r0
   19368:	cmp	r0, r7
   1936c:	mov	r4, r5
   19370:	cmpne	r8, r4
   19374:	beq	17060 <main@@Base+0xf7c>
   19378:	ldr	r6, [sp, #32]
   1937c:	ldr	r7, [sp, #36]	; 0x24
   19380:	orrs	r0, r6, r7
   19384:	bne	19398 <main@@Base+0x32b4>
   19388:	ldr	r0, [sp, #28]
   1938c:	ldrb	r0, [r0, #8]
   19390:	tst	r0, #2
   19394:	beq	193c4 <main@@Base+0x32e0>
   19398:	ldr	r0, [sp, #28]
   1939c:	ldr	r0, [r0]
   193a0:	mov	r1, #19
   193a4:	mov	r2, #8
   193a8:	mov	r3, #8
   193ac:	bl	23f38 <flatcc_builder_table_add@@Base>
   193b0:	cmp	r0, #0
   193b4:	beq	17060 <main@@Base+0xf7c>
   193b8:	mov	r2, r6
   193bc:	mov	r3, r7
   193c0:	bl	1ce44 <main@@Base+0x6d60>
   193c4:	ldr	r6, [sp, #24]
   193c8:	b	17110 <main@@Base+0x102c>
   193cc:	str	r4, [sp]
   193d0:	ldr	r0, [sp, #28]
   193d4:	mov	r1, r6
   193d8:	mov	r2, r5
   193dc:	movw	r3, #41232	; 0xa110
   193e0:	movt	r3, #4
   193e4:	bl	1c794 <main@@Base+0x66b0>
   193e8:	mov	r8, r0
   193ec:	cmp	r0, r6
   193f0:	mov	r4, r5
   193f4:	cmpne	r8, r4
   193f8:	beq	17060 <main@@Base+0xf7c>
   193fc:	ldr	r6, [sp, #32]
   19400:	cmp	r6, #0
   19404:	bne	19418 <main@@Base+0x3334>
   19408:	ldr	r0, [sp, #28]
   1940c:	ldrb	r0, [r0, #8]
   19410:	tst	r0, #2
   19414:	beq	193c4 <main@@Base+0x32e0>
   19418:	ldr	r0, [sp, #28]
   1941c:	ldr	r0, [r0]
   19420:	mov	r1, #20
   19424:	b	18df0 <main@@Base+0x2d0c>
   19428:	ldr	r0, [sp, #28]
   1942c:	ldr	r0, [r0]
   19430:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   19434:	str	r0, [sp, #48]	; 0x30
   19438:	cmp	r0, #0
   1943c:	beq	17060 <main@@Base+0xf7c>
   19440:	ldr	r0, [sp, #28]
   19444:	ldr	r0, [r0]
   19448:	mov	r1, #13
   1944c:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   19450:	cmp	r0, #0
   19454:	beq	17060 <main@@Base+0xf7c>
   19458:	ldr	r1, [sp, #48]	; 0x30
   1945c:	str	r1, [r0]
   19460:	b	17110 <main@@Base+0x102c>
   19464:	str	r4, [sp]
   19468:	ldr	r0, [sp, #28]
   1946c:	mov	r1, r6
   19470:	mov	r2, r5
   19474:	movw	r3, #41256	; 0xa128
   19478:	movt	r3, #4
   1947c:	bl	1c964 <main@@Base+0x6880>
   19480:	mov	r8, r0
   19484:	cmp	r0, r6
   19488:	mov	r4, r5
   1948c:	cmpne	r8, r4
   19490:	beq	17060 <main@@Base+0xf7c>
   19494:	ldr	r6, [sp, #32]
   19498:	ldr	r7, [sp, #36]	; 0x24
   1949c:	orrs	r0, r6, r7
   194a0:	bne	194b4 <main@@Base+0x33d0>
   194a4:	ldr	r0, [sp, #28]
   194a8:	ldrb	r0, [r0, #8]
   194ac:	tst	r0, #2
   194b0:	beq	193c4 <main@@Base+0x32e0>
   194b4:	ldr	r0, [sp, #28]
   194b8:	ldr	r0, [r0]
   194bc:	mov	r1, #22
   194c0:	mov	r2, #8
   194c4:	mov	r3, #8
   194c8:	bl	23f38 <flatcc_builder_table_add@@Base>
   194cc:	cmp	r0, #0
   194d0:	beq	17060 <main@@Base+0xf7c>
   194d4:	mov	r2, r6
   194d8:	mov	r3, r7
   194dc:	bl	1ca90 <main@@Base+0x69ac>
   194e0:	b	193c4 <main@@Base+0x32e0>
   194e4:	str	r4, [sp]
   194e8:	ldr	r0, [sp, #28]
   194ec:	mov	r1, r6
   194f0:	mov	r2, r5
   194f4:	movw	r3, #41280	; 0xa140
   194f8:	movt	r3, #4
   194fc:	bl	1cb48 <main@@Base+0x6a64>
   19500:	mov	r8, r0
   19504:	cmp	r0, r6
   19508:	mov	r4, r5
   1950c:	cmpne	r8, r4
   19510:	beq	17060 <main@@Base+0xf7c>
   19514:	ldr	r6, [sp, #32]
   19518:	cmp	r6, #0
   1951c:	bne	19530 <main@@Base+0x344c>
   19520:	ldr	r0, [sp, #28]
   19524:	ldrb	r0, [r0, #8]
   19528:	tst	r0, #2
   1952c:	beq	193c4 <main@@Base+0x32e0>
   19530:	ldr	r0, [sp, #28]
   19534:	ldr	r0, [r0]
   19538:	mov	r1, #21
   1953c:	b	19328 <main@@Base+0x3244>
   19540:	str	r4, [sp]
   19544:	ldr	r0, [sp, #28]
   19548:	mov	r1, r6
   1954c:	mov	r2, r5
   19550:	movw	r3, #41304	; 0xa158
   19554:	movt	r3, #4
   19558:	bl	1cd18 <main@@Base+0x6c34>
   1955c:	mov	r8, r0
   19560:	cmp	r0, r6
   19564:	mov	r4, r5
   19568:	cmpne	r8, r4
   1956c:	beq	17060 <main@@Base+0xf7c>
   19570:	ldr	r6, [sp, #32]
   19574:	ldr	r7, [sp, #36]	; 0x24
   19578:	orrs	r0, r6, r7
   1957c:	bne	19590 <main@@Base+0x34ac>
   19580:	ldr	r0, [sp, #28]
   19584:	ldrb	r0, [r0, #8]
   19588:	tst	r0, #2
   1958c:	beq	193c4 <main@@Base+0x32e0>
   19590:	ldr	r0, [sp, #28]
   19594:	ldr	r0, [r0]
   19598:	mov	r1, #23
   1959c:	b	193a4 <main@@Base+0x32c0>
   195a0:	ldr	r0, [sp, #28]
   195a4:	ldr	r0, [r0, #24]
   195a8:	cmp	r0, #0
   195ac:	bne	17060 <main@@Base+0xf7c>
   195b0:	ldr	r0, [sp, #28]
   195b4:	ldr	r0, [r0]
   195b8:	mov	r1, #3
   195bc:	bl	236cc <flatcc_builder_check_required_field@@Base>
   195c0:	cmp	r0, #0
   195c4:	beq	195fc <main@@Base+0x3518>
   195c8:	ldr	r3, [sp, #44]	; 0x2c
   195cc:	ldr	r5, [sp, #28]
   195d0:	mov	r0, r5
   195d4:	mov	r1, r8
   195d8:	mov	r2, r4
   195dc:	bl	28368 <flatcc_json_parser_finalize_unions@@Base>
   195e0:	mov	r8, r0
   195e4:	ldr	r0, [r5]
   195e8:	bl	23848 <flatcc_builder_end_table@@Base>
   195ec:	str	r0, [r6]
   195f0:	cmp	r0, #0
   195f4:	bne	17078 <main@@Base+0xf94>
   195f8:	b	17060 <main@@Base+0xf7c>
   195fc:	ldr	r0, [sp, #28]
   19600:	mov	r1, r8
   19604:	mov	r2, r4
   19608:	mov	r3, #29
   1960c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   19610:	mov	r8, r0
   19614:	b	17060 <main@@Base+0xf7c>
   19618:	ldr	r4, [sp, #20]
   1961c:	b	17060 <main@@Base+0xf7c>
   19620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19624:	add	fp, sp, #28
   19628:	sub	sp, sp, #20
   1962c:	mov	r4, r1
   19630:	mov	r5, r0
   19634:	movw	r0, #2416	; 0x970
   19638:	movt	r0, #2
   1963c:	mov	r1, #3
   19640:	str	r1, [sp]
   19644:	str	r0, [sp, #4]
   19648:	mov	r8, #0
   1964c:	movw	r3, #22301	; 0x571d
   19650:	movt	r3, #3
   19654:	mov	r0, r5
   19658:	mov	r1, r4
   1965c:	mov	r2, #0
   19660:	bl	2ffcc <flatcc_json_printer_struct_field@@Base>
   19664:	mov	r0, #150	; 0x96
   19668:	mov	r1, #4
   1966c:	str	r1, [sp]
   19670:	mov	r6, #4
   19674:	str	r0, [sp, #4]
   19678:	movw	r3, #22305	; 0x5721
   1967c:	movt	r3, #3
   19680:	mov	r0, r5
   19684:	mov	r1, r4
   19688:	mov	r2, #1
   1968c:	bl	2b454 <flatcc_json_printer_int16_field@@Base>
   19690:	mov	r0, #100	; 0x64
   19694:	mov	r1, #2
   19698:	str	r1, [sp]
   1969c:	str	r0, [sp, #4]
   196a0:	movw	r3, #22310	; 0x5726
   196a4:	movt	r3, #3
   196a8:	mov	r0, r5
   196ac:	mov	r1, r4
   196b0:	mov	r2, #2
   196b4:	bl	2b454 <flatcc_json_printer_int16_field@@Base>
   196b8:	str	r6, [sp]
   196bc:	movw	r3, #22313	; 0x5729
   196c0:	movt	r3, #3
   196c4:	mov	r0, r5
   196c8:	mov	r1, r4
   196cc:	mov	r2, #3
   196d0:	bl	2ad18 <flatcc_json_printer_string_field@@Base>
   196d4:	mov	r0, #9
   196d8:	str	r0, [sp]
   196dc:	mov	r7, #5
   196e0:	movw	r3, #22318	; 0x572e
   196e4:	movt	r3, #3
   196e8:	mov	r0, r5
   196ec:	mov	r1, r4
   196f0:	mov	r2, #5
   196f4:	bl	2cc88 <flatcc_json_printer_uint8_vector_field@@Base>
   196f8:	movw	r0, #2668	; 0xa6c
   196fc:	movt	r0, #2
   19700:	mov	r1, #8
   19704:	str	r7, [sp]
   19708:	mov	r7, #5
   1970c:	str	r1, [sp, #4]
   19710:	str	r0, [sp, #8]
   19714:	movw	r3, #22328	; 0x5738
   19718:	movt	r3, #3
   1971c:	mov	r0, r5
   19720:	mov	r1, r4
   19724:	mov	r2, #6
   19728:	bl	2bce8 <flatcc_json_printer_int8_enum_field@@Base>
   1972c:	movw	r0, #3000	; 0xbb8
   19730:	movt	r0, #2
   19734:	movw	r1, #2884	; 0xb44
   19738:	movt	r1, #2
   1973c:	str	r6, [sp]
   19740:	str	r1, [sp, #4]
   19744:	str	r0, [sp, #8]
   19748:	movw	r3, #22704	; 0x58b0
   1974c:	movt	r3, #3
   19750:	mov	r0, r5
   19754:	mov	r1, r4
   19758:	mov	r2, #8
   1975c:	bl	2fc20 <flatcc_json_printer_union_field@@Base>
   19760:	movw	r0, #3040	; 0xbe0
   19764:	movt	r0, #2
   19768:	str	r7, [sp]
   1976c:	mov	sl, #5
   19770:	str	r6, [sp, #4]
   19774:	str	r0, [sp, #8]
   19778:	movw	r3, #22334	; 0x573e
   1977c:	movt	r3, #3
   19780:	mov	r0, r5
   19784:	mov	r1, r4
   19788:	mov	r2, #9
   1978c:	bl	2f228 <flatcc_json_printer_struct_vector_field@@Base>
   19790:	mov	r7, #17
   19794:	str	r7, [sp]
   19798:	movw	r3, #22340	; 0x5744
   1979c:	movt	r3, #3
   197a0:	mov	r0, r5
   197a4:	mov	r1, r4
   197a8:	mov	r2, #10
   197ac:	bl	2f4b0 <flatcc_json_printer_string_vector_field@@Base>
   197b0:	movw	r9, #38432	; 0x9620
   197b4:	movt	r9, #1
   197b8:	stm	sp, {r7, r9}
   197bc:	movw	r3, #22358	; 0x5756
   197c0:	movt	r3, #3
   197c4:	mov	r0, r5
   197c8:	mov	r1, r4
   197cc:	mov	r2, #11
   197d0:	bl	2f660 <flatcc_json_printer_table_vector_field@@Base>
   197d4:	str	sl, [sp]
   197d8:	mov	sl, #5
   197dc:	str	r9, [sp, #4]
   197e0:	movw	r3, #22376	; 0x5768
   197e4:	movt	r3, #3
   197e8:	mov	r0, r5
   197ec:	mov	r1, r4
   197f0:	mov	r2, #12
   197f4:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   197f8:	mov	r0, #20
   197fc:	stm	sp, {r0, r8, r9}
   19800:	movw	r3, #22382	; 0x576e
   19804:	movt	r3, #3
   19808:	mov	r0, r5
   1980c:	mov	r1, r4
   19810:	mov	r2, #13
   19814:	bl	3042c <flatcc_json_printer_table_as_nested_root@@Base>
   19818:	movw	r0, #3136	; 0xc40
   1981c:	movt	r0, #2
   19820:	mov	r1, #9
   19824:	str	r1, [sp]
   19828:	str	r0, [sp, #4]
   1982c:	movw	r3, #22403	; 0x5783
   19830:	movt	r3, #3
   19834:	mov	r0, r5
   19838:	mov	r1, r4
   1983c:	mov	r2, #14
   19840:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   19844:	mov	r9, #8
   19848:	str	r9, [sp]
   1984c:	mov	r0, #1
   19850:	str	r0, [sp, #4]
   19854:	movw	r3, #22413	; 0x578d
   19858:	movt	r3, #3
   1985c:	mov	r0, r5
   19860:	mov	r1, r4
   19864:	mov	r2, #15
   19868:	bl	2b6a0 <flatcc_json_printer_bool_field@@Base>
   1986c:	mov	r6, #16
   19870:	stm	sp, {r6, r8}
   19874:	movw	r3, #22422	; 0x5796
   19878:	movt	r3, #3
   1987c:	mov	r0, r5
   19880:	mov	r1, r4
   19884:	mov	r2, #16
   19888:	bl	2b50c <flatcc_json_printer_int32_field@@Base>
   1988c:	stm	sp, {r6, r8}
   19890:	movw	r3, #22439	; 0x57a7
   19894:	movt	r3, #3
   19898:	mov	r0, r5
   1989c:	mov	r1, r4
   198a0:	mov	r2, #17
   198a4:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   198a8:	str	r8, [sp, #8]
   198ac:	str	r8, [sp, #12]
   198b0:	str	r6, [sp]
   198b4:	movw	r3, #22456	; 0x57b8
   198b8:	movt	r3, #3
   198bc:	mov	r0, r5
   198c0:	mov	r1, r4
   198c4:	mov	r2, #18
   198c8:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   198cc:	str	r8, [sp, #8]
   198d0:	str	r8, [sp, #12]
   198d4:	str	r6, [sp]
   198d8:	movw	r3, #22473	; 0x57c9
   198dc:	movt	r3, #3
   198e0:	mov	r0, r5
   198e4:	mov	r1, r4
   198e8:	mov	r2, #19
   198ec:	bl	2b2c0 <flatcc_json_printer_uint64_field@@Base>
   198f0:	stm	sp, {r7, r8}
   198f4:	movw	r3, #22490	; 0x57da
   198f8:	movt	r3, #3
   198fc:	mov	r0, r5
   19900:	mov	r1, r4
   19904:	mov	r2, #20
   19908:	bl	2b50c <flatcc_json_printer_int32_field@@Base>
   1990c:	stm	sp, {r7, r8}
   19910:	movw	r3, #22508	; 0x57ec
   19914:	movt	r3, #3
   19918:	mov	r0, r5
   1991c:	mov	r1, r4
   19920:	mov	r2, #21
   19924:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   19928:	str	r8, [sp, #8]
   1992c:	str	r8, [sp, #12]
   19930:	str	r7, [sp]
   19934:	movw	r3, #22526	; 0x57fe
   19938:	movt	r3, #3
   1993c:	mov	r0, r5
   19940:	mov	r1, r4
   19944:	mov	r2, #22
   19948:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   1994c:	str	r8, [sp, #8]
   19950:	str	r8, [sp, #12]
   19954:	str	r7, [sp]
   19958:	mov	r8, #23
   1995c:	movw	r3, #22544	; 0x5810
   19960:	movt	r3, #3
   19964:	mov	r0, r5
   19968:	mov	r1, r4
   1996c:	mov	r2, #23
   19970:	bl	2b2c0 <flatcc_json_printer_uint64_field@@Base>
   19974:	str	r6, [sp]
   19978:	movw	r3, #22562	; 0x5822
   1997c:	movt	r3, #3
   19980:	mov	r0, r5
   19984:	mov	r1, r4
   19988:	mov	r2, #24
   1998c:	bl	2da88 <flatcc_json_printer_bool_vector_field@@Base>
   19990:	str	sl, [sp]
   19994:	vldr	s0, [pc, #392]	; 19b24 <main@@Base+0x3a40>
   19998:	movw	r3, #22579	; 0x5833
   1999c:	movt	r3, #3
   199a0:	mov	r0, r5
   199a4:	mov	r1, r4
   199a8:	mov	r2, #25
   199ac:	bl	2b798 <flatcc_json_printer_float_field@@Base>
   199b0:	mov	r6, #6
   199b4:	str	r6, [sp]
   199b8:	movw	r3, #22585	; 0x5839
   199bc:	movt	r3, #3
   199c0:	vmov.f32	s0, #8	; 0x40400000  3.0
   199c4:	mov	r0, r5
   199c8:	mov	r1, r4
   199cc:	mov	r2, #26
   199d0:	bl	2b798 <flatcc_json_printer_float_field@@Base>
   199d4:	str	r6, [sp]
   199d8:	vldr	s0, [pc, #328]	; 19b28 <main@@Base+0x3a44>
   199dc:	movw	r3, #22592	; 0x5840
   199e0:	movt	r3, #3
   199e4:	mov	r0, r5
   199e8:	mov	r1, r4
   199ec:	mov	r2, #27
   199f0:	bl	2b798 <flatcc_json_printer_float_field@@Base>
   199f4:	mov	r0, #18
   199f8:	str	r0, [sp]
   199fc:	movw	r3, #22599	; 0x5847
   19a00:	movt	r3, #3
   19a04:	mov	r0, r5
   19a08:	mov	r1, r4
   19a0c:	mov	r2, #28
   19a10:	bl	2f4b0 <flatcc_json_printer_string_vector_field@@Base>
   19a14:	movw	r0, #3268	; 0xcc4
   19a18:	movt	r0, #2
   19a1c:	stm	sp, {r8, r9}
   19a20:	str	r0, [sp, #8]
   19a24:	movw	r3, #22618	; 0x585a
   19a28:	movt	r3, #3
   19a2c:	mov	r0, r5
   19a30:	mov	r1, r4
   19a34:	mov	r2, #29
   19a38:	bl	2f228 <flatcc_json_printer_struct_vector_field@@Base>
   19a3c:	mov	r6, #4
   19a40:	str	r6, [sp]
   19a44:	movw	r3, #22642	; 0x5872
   19a48:	movt	r3, #3
   19a4c:	mov	r0, r5
   19a50:	mov	r1, r4
   19a54:	mov	r2, #30
   19a58:	bl	2cc88 <flatcc_json_printer_uint8_vector_field@@Base>
   19a5c:	str	sl, [sp]
   19a60:	str	r6, [sp, #4]
   19a64:	movw	r0, #3040	; 0xbe0
   19a68:	movt	r0, #2
   19a6c:	str	r0, [sp, #8]
   19a70:	movw	r3, #22647	; 0x5877
   19a74:	movt	r3, #3
   19a78:	mov	r0, r5
   19a7c:	mov	r1, r4
   19a80:	mov	r2, #31
   19a84:	bl	2f228 <flatcc_json_printer_struct_vector_field@@Base>
   19a88:	mov	r0, #15
   19a8c:	str	r0, [sp]
   19a90:	movw	r3, #22653	; 0x587d
   19a94:	movt	r3, #3
   19a98:	mov	r0, r5
   19a9c:	mov	r1, r4
   19aa0:	mov	r2, #32
   19aa4:	bl	2d8c8 <flatcc_json_printer_int64_vector_field@@Base>
   19aa8:	str	r7, [sp]
   19aac:	movw	r3, #22669	; 0x588d
   19ab0:	movt	r3, #3
   19ab4:	mov	r0, r5
   19ab8:	mov	r1, r4
   19abc:	mov	r2, #33	; 0x21
   19ac0:	bl	2de10 <flatcc_json_printer_double_vector_field@@Base>
   19ac4:	movw	r0, #3376	; 0xd30
   19ac8:	movt	r0, #2
   19acc:	mov	r1, #21
   19ad0:	str	r1, [sp]
   19ad4:	str	r0, [sp, #4]
   19ad8:	movw	r3, #22687	; 0x589f
   19adc:	movt	r3, #3
   19ae0:	mov	r0, r5
   19ae4:	mov	r1, r4
   19ae8:	mov	r2, #34	; 0x22
   19aec:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   19af0:	movw	r0, #3380	; 0xd34
   19af4:	movt	r0, #2
   19af8:	mov	r1, #10
   19afc:	str	r1, [sp]
   19b00:	str	r0, [sp, #4]
   19b04:	movw	r3, #22709	; 0x58b5
   19b08:	movt	r3, #3
   19b0c:	mov	r0, r5
   19b10:	mov	r1, r4
   19b14:	mov	r2, #35	; 0x23
   19b18:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   19b1c:	sub	sp, fp, #28
   19b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b24:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   19b28:	andeq	r0, r0, r0
   19b2c:	push	{r4, r5, r6, r7, fp, lr}
   19b30:	add	fp, sp, #16
   19b34:	sub	sp, sp, #8
   19b38:	mov	r4, r0
   19b3c:	mov	r1, #0
   19b40:	mov	r2, #32
   19b44:	mov	r3, #16
   19b48:	bl	253b0 <flatcc_verify_field@@Base>
   19b4c:	cmp	r0, #0
   19b50:	bne	19f58 <main@@Base+0x3e74>
   19b54:	mov	r0, r4
   19b58:	mov	r1, #2
   19b5c:	mov	r2, #2
   19b60:	mov	r3, #2
   19b64:	bl	253b0 <flatcc_verify_field@@Base>
   19b68:	cmp	r0, #0
   19b6c:	bne	19f58 <main@@Base+0x3e74>
   19b70:	mov	r0, r4
   19b74:	mov	r1, #1
   19b78:	mov	r2, #2
   19b7c:	mov	r3, #2
   19b80:	bl	253b0 <flatcc_verify_field@@Base>
   19b84:	cmp	r0, #0
   19b88:	bne	19f58 <main@@Base+0x3e74>
   19b8c:	mov	r0, r4
   19b90:	mov	r1, #3
   19b94:	mov	r2, #1
   19b98:	bl	2541c <flatcc_verify_string_field@@Base>
   19b9c:	cmp	r0, #0
   19ba0:	bne	19f58 <main@@Base+0x3e74>
   19ba4:	mov	r5, #1
   19ba8:	mov	r0, r4
   19bac:	mov	r1, #6
   19bb0:	mov	r2, #1
   19bb4:	mov	r3, #1
   19bb8:	bl	253b0 <flatcc_verify_field@@Base>
   19bbc:	cmp	r0, #0
   19bc0:	bne	19f58 <main@@Base+0x3e74>
   19bc4:	mvn	r0, #0
   19bc8:	str	r5, [sp]
   19bcc:	str	r0, [sp, #4]
   19bd0:	mov	r0, r4
   19bd4:	mov	r1, #5
   19bd8:	mov	r2, #0
   19bdc:	mov	r3, #1
   19be0:	bl	25570 <flatcc_verify_vector_field@@Base>
   19be4:	cmp	r0, #0
   19be8:	bne	19f58 <main@@Base+0x3e74>
   19bec:	movw	r3, #39724	; 0x9b2c
   19bf0:	movt	r3, #1
   19bf4:	mov	r0, r4
   19bf8:	mov	r1, #11
   19bfc:	mov	r2, #0
   19c00:	bl	258dc <flatcc_verify_table_vector_field@@Base>
   19c04:	cmp	r0, #0
   19c08:	bne	19f58 <main@@Base+0x3e74>
   19c0c:	mov	r0, r4
   19c10:	mov	r1, #10
   19c14:	mov	r2, #0
   19c18:	bl	25660 <flatcc_verify_string_vector_field@@Base>
   19c1c:	cmp	r0, #0
   19c20:	bne	19f58 <main@@Base+0x3e74>
   19c24:	mov	r0, r4
   19c28:	mov	r1, #28
   19c2c:	mov	r2, #0
   19c30:	bl	25660 <flatcc_verify_string_vector_field@@Base>
   19c34:	cmp	r0, #0
   19c38:	bne	19f58 <main@@Base+0x3e74>
   19c3c:	mvn	r0, #0
   19c40:	mov	r1, #1
   19c44:	str	r1, [sp]
   19c48:	str	r0, [sp, #4]
   19c4c:	mov	r0, r4
   19c50:	mov	r1, #24
   19c54:	mov	r2, #0
   19c58:	mov	r3, #1
   19c5c:	bl	25570 <flatcc_verify_vector_field@@Base>
   19c60:	cmp	r0, #0
   19c64:	bne	19f58 <main@@Base+0x3e74>
   19c68:	mvn	r0, #-536870912	; 0xe0000000
   19c6c:	mov	r1, #4
   19c70:	str	r1, [sp]
   19c74:	str	r0, [sp, #4]
   19c78:	mov	r0, r4
   19c7c:	mov	r1, #29
   19c80:	mov	r2, #0
   19c84:	mov	r3, #8
   19c88:	bl	25570 <flatcc_verify_vector_field@@Base>
   19c8c:	cmp	r0, #0
   19c90:	bne	19f58 <main@@Base+0x3e74>
   19c94:	movw	r5, #39724	; 0x9b2c
   19c98:	movt	r5, #1
   19c9c:	mov	r0, r4
   19ca0:	mov	r1, #12
   19ca4:	mov	r2, #0
   19ca8:	mov	r3, r5
   19cac:	bl	25768 <flatcc_verify_table_field@@Base>
   19cb0:	cmp	r0, #0
   19cb4:	bne	19f58 <main@@Base+0x3e74>
   19cb8:	movw	r3, #5220	; 0x1464
   19cbc:	movt	r3, #2
   19cc0:	mov	r0, r4
   19cc4:	mov	r1, #8
   19cc8:	mov	r2, #0
   19ccc:	bl	25fa4 <flatcc_verify_union_field@@Base>
   19cd0:	cmp	r0, #0
   19cd4:	bne	19f58 <main@@Base+0x3e74>
   19cd8:	mvn	r6, #-1073741824	; 0xc0000000
   19cdc:	mov	r7, #2
   19ce0:	str	r7, [sp]
   19ce4:	str	r6, [sp, #4]
   19ce8:	mov	r0, r4
   19cec:	mov	r1, #9
   19cf0:	mov	r2, #0
   19cf4:	mov	r3, #4
   19cf8:	bl	25570 <flatcc_verify_vector_field@@Base>
   19cfc:	cmp	r0, #0
   19d00:	bne	19f58 <main@@Base+0x3e74>
   19d04:	str	r7, [sp]
   19d08:	str	r6, [sp, #4]
   19d0c:	mov	r0, r4
   19d10:	mov	r1, #31
   19d14:	mov	r2, #0
   19d18:	mov	r3, #4
   19d1c:	bl	25570 <flatcc_verify_vector_field@@Base>
   19d20:	cmp	r0, #0
   19d24:	bne	19f58 <main@@Base+0x3e74>
   19d28:	mov	r0, #1
   19d2c:	stm	sp, {r0, r5}
   19d30:	mov	r0, r4
   19d34:	mov	r1, #13
   19d38:	mov	r2, #0
   19d3c:	mov	r3, #0
   19d40:	bl	25e98 <flatcc_verify_table_as_nested_root@@Base>
   19d44:	cmp	r0, #0
   19d48:	bne	19f58 <main@@Base+0x3e74>
   19d4c:	movw	r3, #5264	; 0x1490
   19d50:	movt	r3, #2
   19d54:	mov	r0, r4
   19d58:	mov	r1, #14
   19d5c:	mov	r2, #0
   19d60:	bl	25768 <flatcc_verify_table_field@@Base>
   19d64:	cmp	r0, #0
   19d68:	bne	19f58 <main@@Base+0x3e74>
   19d6c:	mov	r0, r4
   19d70:	mov	r1, #15
   19d74:	mov	r2, #1
   19d78:	mov	r3, #1
   19d7c:	bl	253b0 <flatcc_verify_field@@Base>
   19d80:	cmp	r0, #0
   19d84:	bne	19f58 <main@@Base+0x3e74>
   19d88:	mov	r0, r4
   19d8c:	mov	r1, #16
   19d90:	mov	r2, #4
   19d94:	mov	r3, #4
   19d98:	bl	253b0 <flatcc_verify_field@@Base>
   19d9c:	cmp	r0, #0
   19da0:	bne	19f58 <main@@Base+0x3e74>
   19da4:	mov	r0, r4
   19da8:	mov	r1, #17
   19dac:	mov	r2, #4
   19db0:	mov	r3, #4
   19db4:	bl	253b0 <flatcc_verify_field@@Base>
   19db8:	cmp	r0, #0
   19dbc:	bne	19f58 <main@@Base+0x3e74>
   19dc0:	mov	r0, r4
   19dc4:	mov	r1, #18
   19dc8:	mov	r2, #8
   19dcc:	mov	r3, #8
   19dd0:	bl	253b0 <flatcc_verify_field@@Base>
   19dd4:	cmp	r0, #0
   19dd8:	bne	19f58 <main@@Base+0x3e74>
   19ddc:	mov	r0, r4
   19de0:	mov	r1, #19
   19de4:	mov	r2, #8
   19de8:	mov	r3, #8
   19dec:	bl	253b0 <flatcc_verify_field@@Base>
   19df0:	cmp	r0, #0
   19df4:	bne	19f58 <main@@Base+0x3e74>
   19df8:	mov	r0, r4
   19dfc:	mov	r1, #20
   19e00:	mov	r2, #4
   19e04:	mov	r3, #4
   19e08:	bl	253b0 <flatcc_verify_field@@Base>
   19e0c:	cmp	r0, #0
   19e10:	bne	19f58 <main@@Base+0x3e74>
   19e14:	mov	r0, r4
   19e18:	mov	r1, #21
   19e1c:	mov	r2, #4
   19e20:	mov	r3, #4
   19e24:	bl	253b0 <flatcc_verify_field@@Base>
   19e28:	cmp	r0, #0
   19e2c:	bne	19f58 <main@@Base+0x3e74>
   19e30:	mov	r0, r4
   19e34:	mov	r1, #22
   19e38:	mov	r2, #8
   19e3c:	mov	r3, #8
   19e40:	bl	253b0 <flatcc_verify_field@@Base>
   19e44:	cmp	r0, #0
   19e48:	bne	19f58 <main@@Base+0x3e74>
   19e4c:	mov	r0, r4
   19e50:	mov	r1, #23
   19e54:	mov	r2, #8
   19e58:	mov	r3, #8
   19e5c:	bl	253b0 <flatcc_verify_field@@Base>
   19e60:	cmp	r0, #0
   19e64:	bne	19f58 <main@@Base+0x3e74>
   19e68:	mov	r0, r4
   19e6c:	mov	r1, #25
   19e70:	mov	r2, #4
   19e74:	mov	r3, #4
   19e78:	bl	253b0 <flatcc_verify_field@@Base>
   19e7c:	cmp	r0, #0
   19e80:	bne	19f58 <main@@Base+0x3e74>
   19e84:	mov	r0, r4
   19e88:	mov	r1, #26
   19e8c:	mov	r2, #4
   19e90:	mov	r3, #4
   19e94:	bl	253b0 <flatcc_verify_field@@Base>
   19e98:	cmp	r0, #0
   19e9c:	bne	19f58 <main@@Base+0x3e74>
   19ea0:	mov	r0, r4
   19ea4:	mov	r1, #27
   19ea8:	mov	r2, #4
   19eac:	mov	r3, #4
   19eb0:	bl	253b0 <flatcc_verify_field@@Base>
   19eb4:	cmp	r0, #0
   19eb8:	bne	19f58 <main@@Base+0x3e74>
   19ebc:	mvn	r0, #0
   19ec0:	mov	r1, #1
   19ec4:	str	r1, [sp]
   19ec8:	str	r0, [sp, #4]
   19ecc:	mov	r0, r4
   19ed0:	mov	r1, #30
   19ed4:	mov	r2, #0
   19ed8:	mov	r3, #1
   19edc:	bl	25570 <flatcc_verify_vector_field@@Base>
   19ee0:	cmp	r0, #0
   19ee4:	bne	19f58 <main@@Base+0x3e74>
   19ee8:	mvn	r5, #-536870912	; 0xe0000000
   19eec:	mov	r6, #8
   19ef0:	str	r6, [sp]
   19ef4:	str	r5, [sp, #4]
   19ef8:	mov	r0, r4
   19efc:	mov	r1, #32
   19f00:	mov	r2, #0
   19f04:	mov	r3, #8
   19f08:	bl	25570 <flatcc_verify_vector_field@@Base>
   19f0c:	cmp	r0, #0
   19f10:	bne	19f58 <main@@Base+0x3e74>
   19f14:	str	r6, [sp]
   19f18:	str	r5, [sp, #4]
   19f1c:	mov	r0, r4
   19f20:	mov	r1, #33	; 0x21
   19f24:	mov	r2, #0
   19f28:	mov	r3, #8
   19f2c:	bl	25570 <flatcc_verify_vector_field@@Base>
   19f30:	cmp	r0, #0
   19f34:	bne	19f58 <main@@Base+0x3e74>
   19f38:	movw	r3, #5352	; 0x14e8
   19f3c:	movt	r3, #2
   19f40:	mov	r0, r4
   19f44:	mov	r1, #34	; 0x22
   19f48:	mov	r2, #0
   19f4c:	bl	25768 <flatcc_verify_table_field@@Base>
   19f50:	cmp	r0, #0
   19f54:	beq	19f60 <main@@Base+0x3e7c>
   19f58:	sub	sp, fp, #16
   19f5c:	pop	{r4, r5, r6, r7, fp, pc}
   19f60:	movw	r3, #5360	; 0x14f0
   19f64:	movt	r3, #2
   19f68:	mov	r0, r4
   19f6c:	mov	r1, #35	; 0x23
   19f70:	mov	r2, #0
   19f74:	sub	sp, fp, #16
   19f78:	pop	{r4, r5, r6, r7, fp, lr}
   19f7c:	b	25768 <flatcc_verify_table_field@@Base>
   19f80:	push	{r4, r5, r6, sl, fp, lr}
   19f84:	add	fp, sp, #16
   19f88:	mov	r5, r3
   19f8c:	mov	r4, r2
   19f90:	mov	r6, r0
   19f94:	cmp	r1, r2
   19f98:	beq	19fe8 <main@@Base+0x3f04>
   19f9c:	ldrb	r0, [r1]
   19fa0:	cmp	r0, #123	; 0x7b
   19fa4:	bne	19fe8 <main@@Base+0x3f04>
   19fa8:	add	r1, r1, #1
   19fac:	mov	r0, r6
   19fb0:	mov	r2, r4
   19fb4:	bl	1d058 <main@@Base+0x6f74>
   19fb8:	cmp	r0, r4
   19fbc:	beq	1a004 <main@@Base+0x3f20>
   19fc0:	ldrb	r1, [r0]
   19fc4:	cmp	r1, #125	; 0x7d
   19fc8:	bne	1a004 <main@@Base+0x3f20>
   19fcc:	mov	r1, #0
   19fd0:	str	r1, [r5]
   19fd4:	add	r1, r0, #1
   19fd8:	mov	r0, r6
   19fdc:	mov	r2, r4
   19fe0:	pop	{r4, r5, r6, sl, fp, lr}
   19fe4:	b	1d058 <main@@Base+0x6f74>
   19fe8:	mov	r0, #0
   19fec:	str	r0, [r5]
   19ff0:	mov	r0, r6
   19ff4:	mov	r2, r4
   19ff8:	mov	r3, #21
   19ffc:	pop	{r4, r5, r6, sl, fp, lr}
   1a000:	b	26998 <flatcc_json_parser_set_error@@Base>
   1a004:	mov	r1, #1
   1a008:	str	r1, [r5]
   1a00c:	pop	{r4, r5, r6, sl, fp, pc}
   1a010:	cmp	r1, r2
   1a014:	beq	1a044 <main@@Base+0x3f60>
   1a018:	ldrb	r3, [r1]
   1a01c:	cmp	r3, #46	; 0x2e
   1a020:	beq	1a04c <main@@Base+0x3f68>
   1a024:	cmp	r3, #34	; 0x22
   1a028:	moveq	r2, #0
   1a02c:	streq	r2, [r0, #12]
   1a030:	addeq	r1, r1, #1
   1a034:	moveq	r0, r1
   1a038:	bxeq	lr
   1a03c:	mov	r2, #1
   1a040:	str	r2, [r0, #12]
   1a044:	mov	r0, r1
   1a048:	bx	lr
   1a04c:	mov	r3, #5
   1a050:	b	26998 <flatcc_json_parser_set_error@@Base>
   1a054:	b	1d090 <main@@Base+0x6fac>
   1a058:	push	{r4, r5, r6, sl, fp, lr}
   1a05c:	add	fp, sp, #16
   1a060:	mov	r6, r0
   1a064:	sub	r0, r2, r1
   1a068:	cmp	r0, r3
   1a06c:	ble	1a0f0 <main@@Base+0x400c>
   1a070:	mov	r4, r2
   1a074:	mov	r2, r1
   1a078:	ldrb	r0, [r2, r3]!
   1a07c:	ldr	r5, [r6, #12]
   1a080:	cmp	r5, #0
   1a084:	beq	1a0a4 <main@@Base+0x3fc0>
   1a088:	cmp	r0, #33	; 0x21
   1a08c:	bcc	1a098 <main@@Base+0x3fb4>
   1a090:	cmp	r0, #58	; 0x3a
   1a094:	bne	1a0f0 <main@@Base+0x400c>
   1a098:	mov	r0, #0
   1a09c:	str	r0, [r6, #12]
   1a0a0:	b	1a0b4 <main@@Base+0x3fd0>
   1a0a4:	cmp	r0, #34	; 0x22
   1a0a8:	bne	1a0f0 <main@@Base+0x400c>
   1a0ac:	add	r0, r3, r1
   1a0b0:	add	r2, r0, #1
   1a0b4:	mov	r0, r6
   1a0b8:	mov	r1, r2
   1a0bc:	mov	r2, r4
   1a0c0:	bl	1d058 <main@@Base+0x6f74>
   1a0c4:	mov	r1, r0
   1a0c8:	cmp	r0, r4
   1a0cc:	beq	1a0f8 <main@@Base+0x4014>
   1a0d0:	ldrb	r0, [r1]
   1a0d4:	cmp	r0, #58	; 0x3a
   1a0d8:	bne	1a0f8 <main@@Base+0x4014>
   1a0dc:	add	r1, r1, #1
   1a0e0:	mov	r0, r6
   1a0e4:	mov	r2, r4
   1a0e8:	pop	{r4, r5, r6, sl, fp, lr}
   1a0ec:	b	1d058 <main@@Base+0x6f74>
   1a0f0:	mov	r0, r1
   1a0f4:	pop	{r4, r5, r6, sl, fp, pc}
   1a0f8:	mov	r0, r6
   1a0fc:	mov	r2, r4
   1a100:	mov	r3, #4
   1a104:	pop	{r4, r5, r6, sl, fp, lr}
   1a108:	b	26998 <flatcc_json_parser_set_error@@Base>
   1a10c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a110:	add	fp, sp, #24
   1a114:	sub	sp, sp, #8
   1a118:	mov	r9, r3
   1a11c:	mov	r6, r2
   1a120:	mov	r5, r1
   1a124:	mov	r7, r0
   1a128:	mov	r0, r1
   1a12c:	mov	r1, r2
   1a130:	bl	1a054 <main@@Base+0x3f70>
   1a134:	ldr	ip, [fp, #12]
   1a138:	ldr	r8, [fp, #8]
   1a13c:	movw	r3, #25957	; 0x6565
   1a140:	movt	r3, #18290	; 0x4772
   1a144:	mvn	r4, #-1845493760	; 0x92000000
   1a148:	subs	r4, r4, r0
   1a14c:	sbcs	r4, r3, r1
   1a150:	bcc	1a190 <main@@Base+0x40ac>
   1a154:	movw	r0, #30053	; 0x7565
   1a158:	movt	r0, #17004	; 0x426c
   1a15c:	teq	r1, r0
   1a160:	bne	1a21c <main@@Base+0x4138>
   1a164:	str	ip, [sp]
   1a168:	mov	r0, r7
   1a16c:	mov	r1, r5
   1a170:	mov	r2, r6
   1a174:	mov	r3, #4
   1a178:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1a17c:	cmp	r0, r5
   1a180:	beq	1a21c <main@@Base+0x4138>
   1a184:	mov	r1, #0
   1a188:	mov	r2, #8
   1a18c:	b	1a20c <main@@Base+0x4128>
   1a190:	bic	r4, r1, #255	; 0xff
   1a194:	movw	r2, #25600	; 0x6400
   1a198:	movt	r2, #21093	; 0x5265
   1a19c:	teq	r4, r2
   1a1a0:	bne	1a1d0 <main@@Base+0x40ec>
   1a1a4:	str	ip, [sp]
   1a1a8:	mov	r0, r7
   1a1ac:	mov	r1, r5
   1a1b0:	mov	r2, r6
   1a1b4:	mov	r3, #3
   1a1b8:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1a1bc:	cmp	r0, r5
   1a1c0:	beq	1a21c <main@@Base+0x4138>
   1a1c4:	mov	r1, #0
   1a1c8:	mov	r2, #1
   1a1cc:	b	1a20c <main@@Base+0x4128>
   1a1d0:	eor	r1, r1, r3
   1a1d4:	and	r0, r0, #-16777216	; 0xff000000
   1a1d8:	eor	r0, r0, #1845493760	; 0x6e000000
   1a1dc:	orrs	r0, r0, r1
   1a1e0:	bne	1a21c <main@@Base+0x4138>
   1a1e4:	str	ip, [sp]
   1a1e8:	mov	r0, r7
   1a1ec:	mov	r1, r5
   1a1f0:	mov	r2, r6
   1a1f4:	mov	r3, #5
   1a1f8:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1a1fc:	cmp	r0, r5
   1a200:	beq	1a21c <main@@Base+0x4138>
   1a204:	mov	r1, #0
   1a208:	mov	r2, #2
   1a20c:	str	r2, [r8]
   1a210:	str	r1, [r8, #4]
   1a214:	str	r1, [r9]
   1a218:	mov	r5, r0
   1a21c:	mov	r0, r5
   1a220:	sub	sp, fp, #24
   1a224:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a22c:	add	fp, sp, #28
   1a230:	sub	sp, sp, #4
   1a234:	mov	r9, r3
   1a238:	mov	r5, r2
   1a23c:	mov	r7, r1
   1a240:	mov	sl, r0
   1a244:	mov	r0, r1
   1a248:	mov	r1, r2
   1a24c:	bl	1a054 <main@@Base+0x3f70>
   1a250:	movw	r2, #30815	; 0x785f
   1a254:	movt	r2, #26725	; 0x6865
   1a258:	movw	r4, #30061	; 0x756d
   1a25c:	movt	r4, #25966	; 0x656e
   1a260:	subs	r3, r0, r4
   1a264:	sbcs	r3, r1, r2
   1a268:	bcs	1a2cc <main@@Base+0x41e8>
   1a26c:	bic	r3, r1, #255	; 0xff
   1a270:	movw	r2, #27759	; 0x6c6f
   1a274:	movt	r2, #17263	; 0x436f
   1a278:	mvn	r4, #-1912602624	; 0x8e000000
   1a27c:	subs	r4, r4, r0
   1a280:	sbcs	r4, r2, r1
   1a284:	bcc	1a324 <main@@Base+0x4240>
   1a288:	movw	r0, #30976	; 0x7900
   1a28c:	movt	r0, #16750	; 0x416e
   1a290:	teq	r3, r0
   1a294:	bne	1a4c0 <main@@Base+0x43dc>
   1a298:	mov	r0, r7
   1a29c:	mov	r1, r5
   1a2a0:	mov	r2, #3
   1a2a4:	bl	1d11c <main@@Base+0x7038>
   1a2a8:	cmp	r0, r7
   1a2ac:	beq	1a4c0 <main@@Base+0x43dc>
   1a2b0:	mov	r1, r0
   1a2b4:	mov	r0, sl
   1a2b8:	mov	r2, r5
   1a2bc:	mov	r3, r9
   1a2c0:	sub	sp, fp, #28
   1a2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2c8:	b	1b994 <main@@Base+0x58b0>
   1a2cc:	add	r3, r2, #64512	; 0xfc00
   1a2d0:	add	r3, r3, #17301504	; 0x1080000
   1a2d4:	subs	r6, r0, r4
   1a2d8:	sbcs	r6, r1, r3
   1a2dc:	bcs	1a368 <main@@Base+0x4284>
   1a2e0:	eor	r0, r0, r4
   1a2e4:	eor	r1, r1, r2
   1a2e8:	orrs	r0, r0, r1
   1a2ec:	bne	1a4c0 <main@@Base+0x43dc>
   1a2f0:	mov	r0, r7
   1a2f4:	mov	r1, r5
   1a2f8:	mov	r2, #8
   1a2fc:	bl	1d11c <main@@Base+0x7038>
   1a300:	cmp	r0, r7
   1a304:	beq	1a4c0 <main@@Base+0x43dc>
   1a308:	mov	r1, r0
   1a30c:	mov	r0, sl
   1a310:	mov	r2, r5
   1a314:	mov	r3, r9
   1a318:	sub	sp, fp, #28
   1a31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a320:	b	1d254 <main@@Base+0x7170>
   1a324:	movw	r4, #28416	; 0x6f00
   1a328:	movt	r4, #18031	; 0x466f
   1a32c:	teq	r3, r4
   1a330:	bne	1a3c0 <main@@Base+0x42dc>
   1a334:	mov	r0, r7
   1a338:	mov	r1, r5
   1a33c:	mov	r2, #3
   1a340:	bl	1d11c <main@@Base+0x7038>
   1a344:	cmp	r0, r7
   1a348:	beq	1a4c0 <main@@Base+0x43dc>
   1a34c:	mov	r1, r0
   1a350:	mov	r0, sl
   1a354:	mov	r2, r5
   1a358:	mov	r3, r9
   1a35c:	sub	sp, fp, #28
   1a360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a364:	b	1d13c <main@@Base+0x7058>
   1a368:	sub	r2, r2, #4352	; 0x1100
   1a36c:	sub	r2, r2, #-100663296	; 0xfa000000
   1a370:	subs	r6, r0, r4
   1a374:	sbcs	r2, r1, r2
   1a378:	bcs	1a408 <main@@Base+0x4324>
   1a37c:	eor	r0, r0, r4
   1a380:	eor	r1, r1, r3
   1a384:	orrs	r0, r0, r1
   1a388:	bne	1a4c0 <main@@Base+0x43dc>
   1a38c:	mov	r0, r7
   1a390:	mov	r1, r5
   1a394:	mov	r2, #8
   1a398:	bl	1d11c <main@@Base+0x7038>
   1a39c:	cmp	r0, r7
   1a3a0:	beq	1a4c0 <main@@Base+0x43dc>
   1a3a4:	mov	r1, r0
   1a3a8:	mov	r0, sl
   1a3ac:	mov	r2, r5
   1a3b0:	mov	r3, r9
   1a3b4:	sub	sp, fp, #28
   1a3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3bc:	b	1d37c <main@@Base+0x7298>
   1a3c0:	eor	r1, r1, r2
   1a3c4:	and	r0, r0, #-16777216	; 0xff000000
   1a3c8:	eor	r0, r0, #1912602624	; 0x72000000
   1a3cc:	orrs	r0, r0, r1
   1a3d0:	bne	1a4c0 <main@@Base+0x43dc>
   1a3d4:	mov	r0, r7
   1a3d8:	mov	r1, r5
   1a3dc:	mov	r2, #5
   1a3e0:	bl	1d11c <main@@Base+0x7038>
   1a3e4:	cmp	r0, r7
   1a3e8:	beq	1a4c0 <main@@Base+0x43dc>
   1a3ec:	mov	r1, r0
   1a3f0:	mov	r0, sl
   1a3f4:	mov	r2, r5
   1a3f8:	mov	r3, r9
   1a3fc:	sub	sp, fp, #28
   1a400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a404:	b	1a10c <main@@Base+0x4028>
   1a408:	movw	r2, #29817	; 0x7479
   1a40c:	movt	r2, #28016	; 0x6d70
   1a410:	eor	r2, r0, r2
   1a414:	movw	r3, #29797	; 0x7465
   1a418:	movt	r3, #28271	; 0x6e6f
   1a41c:	eor	r3, r1, r3
   1a420:	orrs	r2, r2, r3
   1a424:	beq	1a474 <main@@Base+0x4390>
   1a428:	eor	r0, r0, r4
   1a42c:	movw	r2, #26463	; 0x675f
   1a430:	movt	r2, #28261	; 0x6e65
   1a434:	eor	r1, r1, r2
   1a438:	orrs	r0, r0, r1
   1a43c:	bne	1a4c0 <main@@Base+0x43dc>
   1a440:	mov	r0, r7
   1a444:	mov	r1, r5
   1a448:	mov	r2, #8
   1a44c:	bl	1d11c <main@@Base+0x7038>
   1a450:	cmp	r0, r7
   1a454:	beq	1a4c0 <main@@Base+0x43dc>
   1a458:	mov	r1, r0
   1a45c:	mov	r0, sl
   1a460:	mov	r2, r5
   1a464:	mov	r3, r9
   1a468:	sub	sp, fp, #28
   1a46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a470:	b	1d4f0 <main@@Base+0x740c>
   1a474:	add	r8, r7, #8
   1a478:	mov	r0, r8
   1a47c:	mov	r1, r5
   1a480:	bl	1a054 <main@@Base+0x3f70>
   1a484:	teq	r1, r4
   1a488:	bne	1a4c0 <main@@Base+0x43dc>
   1a48c:	mov	r0, r8
   1a490:	mov	r1, r5
   1a494:	mov	r2, #4
   1a498:	bl	1d11c <main@@Base+0x7038>
   1a49c:	cmp	r0, r8
   1a4a0:	beq	1a4c0 <main@@Base+0x43dc>
   1a4a4:	mov	r1, r0
   1a4a8:	mov	r0, sl
   1a4ac:	mov	r2, r5
   1a4b0:	mov	r3, r9
   1a4b4:	sub	sp, fp, #28
   1a4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4bc:	b	1d600 <main@@Base+0x751c>
   1a4c0:	mov	r0, r7
   1a4c4:	sub	sp, fp, #28
   1a4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4d0:	add	fp, sp, #28
   1a4d4:	sub	sp, sp, #4
   1a4d8:	mov	sl, r3
   1a4dc:	mov	r5, r2
   1a4e0:	mov	r7, r1
   1a4e4:	mov	r8, r0
   1a4e8:	mov	r0, r1
   1a4ec:	mov	r1, r2
   1a4f0:	bl	1a054 <main@@Base+0x3f70>
   1a4f4:	movw	r2, #18273	; 0x4761
   1a4f8:	movt	r2, #19833	; 0x4d79
   1a4fc:	movw	r3, #11844	; 0x2e44
   1a500:	movt	r3, #28005	; 0x6d65
   1a504:	subs	r3, r3, r0
   1a508:	sbcs	r3, r2, r1
   1a50c:	bcc	1a5ac <main@@Base+0x44c8>
   1a510:	movw	r2, #31022	; 0x792e
   1a514:	movt	r2, #24947	; 0x6173
   1a518:	eor	r0, r0, r2
   1a51c:	movw	r2, #28276	; 0x6e74
   1a520:	movt	r2, #18017	; 0x4661
   1a524:	eor	r1, r1, r2
   1a528:	orrs	r0, r0, r1
   1a52c:	bne	1aa38 <main@@Base+0x4954>
   1a530:	add	r0, r7, #8
   1a534:	mov	r1, r5
   1a538:	bl	1a054 <main@@Base+0x3f70>
   1a53c:	movw	r2, #24946	; 0x6172
   1a540:	movt	r2, #17256	; 0x4368
   1a544:	eor	r1, r1, r2
   1a548:	movw	r2, #29797	; 0x7465
   1a54c:	movt	r2, #24931	; 0x6163
   1a550:	eor	r0, r0, r2
   1a554:	orrs	r0, r0, r1
   1a558:	bne	1aa38 <main@@Base+0x4954>
   1a55c:	add	r4, r7, #16
   1a560:	mov	r0, r4
   1a564:	mov	r1, r5
   1a568:	bl	1a054 <main@@Base+0x3f70>
   1a56c:	and	r0, r1, #-16777216	; 0xff000000
   1a570:	teq	r0, #1912602624	; 0x72000000
   1a574:	bne	1aa38 <main@@Base+0x4954>
   1a578:	mov	r0, r4
   1a57c:	mov	r1, r5
   1a580:	mov	r2, #1
   1a584:	bl	1d11c <main@@Base+0x7038>
   1a588:	cmp	r0, r4
   1a58c:	beq	1aa38 <main@@Base+0x4954>
   1a590:	mov	r1, r0
   1a594:	mov	r0, r8
   1a598:	mov	r2, r5
   1a59c:	mov	r3, sl
   1a5a0:	sub	sp, fp, #28
   1a5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5a8:	b	1d67c <main@@Base+0x7598>
   1a5ac:	movw	r3, #11855	; 0x2e4f
   1a5b0:	movt	r3, #28005	; 0x6d65
   1a5b4:	eor	r3, r0, r3
   1a5b8:	eor	r1, r1, r2
   1a5bc:	orrs	r2, r3, r1
   1a5c0:	beq	1a684 <main@@Base+0x45a0>
   1a5c4:	movw	r2, #11845	; 0x2e45
   1a5c8:	movt	r2, #28005	; 0x6d65
   1a5cc:	eor	r0, r0, r2
   1a5d0:	orrs	r0, r0, r1
   1a5d4:	bne	1aa38 <main@@Base+0x4954>
   1a5d8:	add	r0, r7, #8
   1a5dc:	mov	r1, r5
   1a5e0:	bl	1a054 <main@@Base+0x3f70>
   1a5e4:	movw	r2, #28016	; 0x6d70
   1a5e8:	movt	r2, #30817	; 0x7861
   1a5ec:	movw	r3, #11880	; 0x2e68
   1a5f0:	movt	r3, #27749	; 0x6c65
   1a5f4:	subs	r6, r0, r3
   1a5f8:	sbcs	r6, r1, r2
   1a5fc:	bcs	1a758 <main@@Base+0x4674>
   1a600:	subs	r6, r3, #37	; 0x25
   1a604:	sbc	r4, r2, #0
   1a608:	subs	r6, r0, r6
   1a60c:	sbcs	r6, r1, r4
   1a610:	bcs	1a7d4 <main@@Base+0x46f0>
   1a614:	subs	r3, r3, #39	; 0x27
   1a618:	eor	r0, r0, r3
   1a61c:	sbc	r2, r2, #0
   1a620:	eor	r1, r1, r2
   1a624:	orrs	r0, r0, r1
   1a628:	bne	1aa38 <main@@Base+0x4954>
   1a62c:	add	r4, r7, #16
   1a630:	mov	r0, r4
   1a634:	mov	r1, r5
   1a638:	bl	1a054 <main@@Base+0x3f70>
   1a63c:	bfc	r1, #0, #16
   1a640:	movw	r0, #0
   1a644:	movt	r0, #28281	; 0x6e79
   1a648:	teq	r1, r0
   1a64c:	bne	1aa38 <main@@Base+0x4954>
   1a650:	mov	r0, r4
   1a654:	mov	r1, r5
   1a658:	mov	r2, #2
   1a65c:	bl	1d11c <main@@Base+0x7038>
   1a660:	cmp	r0, r4
   1a664:	beq	1aa38 <main@@Base+0x4954>
   1a668:	mov	r1, r0
   1a66c:	mov	r0, r8
   1a670:	mov	r2, r5
   1a674:	mov	r3, sl
   1a678:	sub	sp, fp, #28
   1a67c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a680:	b	1b994 <main@@Base+0x58b0>
   1a684:	add	r0, r7, #8
   1a688:	mov	r1, r5
   1a68c:	bl	1a054 <main@@Base+0x3f70>
   1a690:	movw	r2, #25970	; 0x6572
   1a694:	movt	r2, #29800	; 0x7468
   1a698:	eor	r1, r1, r2
   1a69c:	movw	r2, #28005	; 0x6d65
   1a6a0:	movt	r2, #20065	; 0x4e61
   1a6a4:	eor	r0, r0, r2
   1a6a8:	orrs	r0, r0, r1
   1a6ac:	bne	1aa38 <main@@Base+0x4954>
   1a6b0:	add	r0, r7, #16
   1a6b4:	mov	r1, r5
   1a6b8:	bl	1a054 <main@@Base+0x3f70>
   1a6bc:	movw	r2, #24931	; 0x6163
   1a6c0:	movt	r2, #21360	; 0x5370
   1a6c4:	eor	r1, r1, r2
   1a6c8:	movw	r2, #18034	; 0x4672
   1a6cc:	movt	r2, #25902	; 0x652e
   1a6d0:	eor	r0, r0, r2
   1a6d4:	orrs	r0, r0, r1
   1a6d8:	bne	1aa38 <main@@Base+0x4954>
   1a6dc:	add	r0, r7, #24
   1a6e0:	mov	r1, r5
   1a6e4:	bl	1a054 <main@@Base+0x3f70>
   1a6e8:	movw	r2, #18798	; 0x496e
   1a6ec:	movt	r2, #28525	; 0x6f6d
   1a6f0:	eor	r1, r1, r2
   1a6f4:	movw	r2, #30052	; 0x7564
   1a6f8:	movt	r2, #25452	; 0x636c
   1a6fc:	eor	r0, r0, r2
   1a700:	orrs	r0, r0, r1
   1a704:	bne	1aa38 <main@@Base+0x4954>
   1a708:	add	r4, r7, #32
   1a70c:	mov	r0, r4
   1a710:	mov	r1, r5
   1a714:	bl	1a054 <main@@Base+0x3f70>
   1a718:	and	r0, r1, #-16777216	; 0xff000000
   1a71c:	teq	r0, #1694498816	; 0x65000000
   1a720:	bne	1aa38 <main@@Base+0x4954>
   1a724:	mov	r0, r4
   1a728:	mov	r1, r5
   1a72c:	mov	r2, #1
   1a730:	bl	1d11c <main@@Base+0x7038>
   1a734:	cmp	r0, r4
   1a738:	beq	1aa38 <main@@Base+0x4954>
   1a73c:	mov	r1, r0
   1a740:	mov	r0, r8
   1a744:	mov	r2, r5
   1a748:	mov	r3, sl
   1a74c:	sub	sp, fp, #28
   1a750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a754:	b	1d900 <main@@Base+0x781c>
   1a758:	eor	r6, r0, r3
   1a75c:	eor	r4, r1, r2
   1a760:	orrs	r6, r6, r4
   1a764:	bne	1a854 <main@@Base+0x4770>
   1a768:	add	r4, r7, #16
   1a76c:	mov	r0, r4
   1a770:	mov	r1, r5
   1a774:	bl	1a054 <main@@Base+0x3f70>
   1a778:	movw	r2, #24421	; 0x5f65
   1a77c:	movt	r2, #25959	; 0x6567
   1a780:	add	r2, r2, #1114112	; 0x110000
   1a784:	eor	r1, r1, r2
   1a788:	bic	r0, r0, #255	; 0xff
   1a78c:	movw	r2, #27904	; 0x6d00
   1a790:	movt	r2, #28277	; 0x6e75
   1a794:	eor	r0, r0, r2
   1a798:	orrs	r0, r0, r1
   1a79c:	bne	1aa38 <main@@Base+0x4954>
   1a7a0:	mov	r0, r4
   1a7a4:	mov	r1, r5
   1a7a8:	mov	r2, #7
   1a7ac:	bl	1d11c <main@@Base+0x7038>
   1a7b0:	cmp	r0, r4
   1a7b4:	beq	1aa38 <main@@Base+0x4954>
   1a7b8:	mov	r1, r0
   1a7bc:	mov	r0, r8
   1a7c0:	mov	r2, r5
   1a7c4:	mov	r3, sl
   1a7c8:	sub	sp, fp, #28
   1a7cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7d0:	b	1d254 <main@@Base+0x7170>
   1a7d4:	movw	r3, #11846	; 0x2e46
   1a7d8:	movt	r3, #27749	; 0x6c65
   1a7dc:	eor	r3, r0, r3
   1a7e0:	eor	r1, r1, r2
   1a7e4:	orrs	r2, r3, r1
   1a7e8:	beq	1a964 <main@@Base+0x4880>
   1a7ec:	movw	r2, #11843	; 0x2e43
   1a7f0:	movt	r2, #27749	; 0x6c65
   1a7f4:	eor	r0, r0, r2
   1a7f8:	orrs	r0, r0, r1
   1a7fc:	bne	1aa38 <main@@Base+0x4954>
   1a800:	add	r4, r7, #16
   1a804:	mov	r0, r4
   1a808:	mov	r1, r5
   1a80c:	bl	1a054 <main@@Base+0x3f70>
   1a810:	movw	r0, #28530	; 0x6f72
   1a814:	movt	r0, #28524	; 0x6f6c
   1a818:	teq	r1, r0
   1a81c:	bne	1aa38 <main@@Base+0x4954>
   1a820:	mov	r0, r4
   1a824:	mov	r1, r5
   1a828:	mov	r2, #4
   1a82c:	bl	1d11c <main@@Base+0x7038>
   1a830:	cmp	r0, r4
   1a834:	beq	1aa38 <main@@Base+0x4954>
   1a838:	mov	r1, r0
   1a83c:	mov	r0, r8
   1a840:	mov	r2, r5
   1a844:	mov	r3, sl
   1a848:	sub	sp, fp, #28
   1a84c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a850:	b	1a10c <main@@Base+0x4028>
   1a854:	add	ip, r3, #6
   1a858:	subs	r6, r0, ip
   1a85c:	sbcs	r1, r1, r2
   1a860:	bcs	1a8e4 <main@@Base+0x4800>
   1a864:	add	r1, r3, #1
   1a868:	eor	r0, r0, r1
   1a86c:	orrs	r0, r0, r4
   1a870:	bne	1aa38 <main@@Base+0x4954>
   1a874:	add	r4, r7, #16
   1a878:	mov	r0, r4
   1a87c:	mov	r1, r5
   1a880:	bl	1a054 <main@@Base+0x3f70>
   1a884:	movw	r2, #24421	; 0x5f65
   1a888:	movt	r2, #25959	; 0x6567
   1a88c:	add	r2, r2, #851968	; 0xd0000
   1a890:	add	r2, r2, #150994944	; 0x9000000
   1a894:	eor	r1, r1, r2
   1a898:	bic	r0, r0, #255	; 0xff
   1a89c:	movw	r2, #27904	; 0x6d00
   1a8a0:	movt	r2, #28277	; 0x6e75
   1a8a4:	eor	r0, r0, r2
   1a8a8:	orrs	r0, r0, r1
   1a8ac:	bne	1aa38 <main@@Base+0x4954>
   1a8b0:	mov	r0, r4
   1a8b4:	mov	r1, r5
   1a8b8:	mov	r2, #7
   1a8bc:	bl	1d11c <main@@Base+0x7038>
   1a8c0:	cmp	r0, r4
   1a8c4:	beq	1aa38 <main@@Base+0x4954>
   1a8c8:	mov	r1, r0
   1a8cc:	mov	r0, r8
   1a8d0:	mov	r2, r5
   1a8d4:	mov	r3, sl
   1a8d8:	sub	sp, fp, #28
   1a8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8e0:	b	1d37c <main@@Base+0x7298>
   1a8e4:	eor	r0, r0, ip
   1a8e8:	orrs	r0, r0, r4
   1a8ec:	bne	1aa38 <main@@Base+0x4954>
   1a8f0:	add	r6, r7, #16
   1a8f4:	mov	r0, r6
   1a8f8:	mov	r1, r5
   1a8fc:	bl	1a054 <main@@Base+0x3f70>
   1a900:	mov	r4, r0
   1a904:	mov	r9, r1
   1a908:	lsr	r0, r0, #8
   1a90c:	orr	r0, r0, r1, lsl #24
   1a910:	movw	r1, #30061	; 0x756d
   1a914:	movt	r1, #25966	; 0x656e
   1a918:	eor	r0, r0, r1
   1a91c:	movw	r1, #26463	; 0x675f
   1a920:	movt	r1, #101	; 0x65
   1a924:	eor	r1, r1, r9, lsr #8
   1a928:	orrs	r0, r0, r1
   1a92c:	bne	1a9c0 <main@@Base+0x48dc>
   1a930:	mov	r0, r6
   1a934:	mov	r1, r5
   1a938:	mov	r2, #7
   1a93c:	bl	1d11c <main@@Base+0x7038>
   1a940:	mov	r1, r0
   1a944:	cmp	r0, r6
   1a948:	beq	1a9bc <main@@Base+0x48d8>
   1a94c:	mov	r0, r8
   1a950:	mov	r2, r5
   1a954:	mov	r3, sl
   1a958:	sub	sp, fp, #28
   1a95c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a960:	b	1d4f0 <main@@Base+0x740c>
   1a964:	add	r4, r7, #16
   1a968:	mov	r0, r4
   1a96c:	mov	r1, r5
   1a970:	bl	1a054 <main@@Base+0x3f70>
   1a974:	bfc	r1, #0, #16
   1a978:	movw	r0, #0
   1a97c:	movt	r0, #28527	; 0x6f6f
   1a980:	teq	r1, r0
   1a984:	bne	1aa38 <main@@Base+0x4954>
   1a988:	mov	r0, r4
   1a98c:	mov	r1, r5
   1a990:	mov	r2, #2
   1a994:	bl	1d11c <main@@Base+0x7038>
   1a998:	cmp	r0, r4
   1a99c:	beq	1aa38 <main@@Base+0x4954>
   1a9a0:	mov	r1, r0
   1a9a4:	mov	r0, r8
   1a9a8:	mov	r2, r5
   1a9ac:	mov	r3, sl
   1a9b0:	sub	sp, fp, #28
   1a9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9b8:	b	1d13c <main@@Base+0x7058>
   1a9bc:	mov	r6, r1
   1a9c0:	movw	r0, #31077	; 0x7965
   1a9c4:	movt	r0, #28788	; 0x7074
   1a9c8:	eor	r0, r4, r0
   1a9cc:	movw	r1, #25965	; 0x656d
   1a9d0:	movt	r1, #28532	; 0x6f74
   1a9d4:	eor	r1, r9, r1
   1a9d8:	orrs	r0, r0, r1
   1a9dc:	bne	1aa38 <main@@Base+0x4954>
   1a9e0:	add	r4, r6, #8
   1a9e4:	mov	r0, r4
   1a9e8:	mov	r1, r5
   1a9ec:	bl	1a054 <main@@Base+0x3f70>
   1a9f0:	bic	r0, r1, #255	; 0xff
   1a9f4:	movw	r1, #27904	; 0x6d00
   1a9f8:	movt	r1, #28277	; 0x6e75
   1a9fc:	teq	r0, r1
   1aa00:	bne	1aa38 <main@@Base+0x4954>
   1aa04:	mov	r0, r4
   1aa08:	mov	r1, r5
   1aa0c:	mov	r2, #3
   1aa10:	bl	1d11c <main@@Base+0x7038>
   1aa14:	cmp	r0, r4
   1aa18:	beq	1aa38 <main@@Base+0x4954>
   1aa1c:	mov	r1, r0
   1aa20:	mov	r0, r8
   1aa24:	mov	r2, r5
   1aa28:	mov	r3, sl
   1aa2c:	sub	sp, fp, #28
   1aa30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa34:	b	1d600 <main@@Base+0x751c>
   1aa38:	mov	r0, r7
   1aa3c:	sub	sp, fp, #28
   1aa40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa44:	push	{r4, r5, r6, r7, fp, lr}
   1aa48:	add	fp, sp, #16
   1aa4c:	sub	sp, sp, #24
   1aa50:	mov	r7, r1
   1aa54:	mov	r6, r0
   1aa58:	mov	r0, #0
   1aa5c:	str	r0, [sp, #20]
   1aa60:	str	r0, [sp, #16]
   1aa64:	str	r0, [sp, #12]
   1aa68:	strb	r0, [r3]
   1aa6c:	cmp	r1, r2
   1aa70:	beq	1aac8 <main@@Base+0x49e4>
   1aa74:	mov	r5, r3
   1aa78:	mov	r4, r2
   1aa7c:	add	r0, sp, #16
   1aa80:	str	r0, [sp]
   1aa84:	add	r3, sp, #12
   1aa88:	mov	r0, r6
   1aa8c:	mov	r1, r7
   1aa90:	bl	27cac <flatcc_json_parser_integer@@Base>
   1aa94:	mov	r1, r0
   1aa98:	cmp	r0, r7
   1aa9c:	beq	1aac4 <main@@Base+0x49e0>
   1aaa0:	ldr	r3, [sp, #12]
   1aaa4:	ldr	r0, [sp, #16]
   1aaa8:	ldr	r2, [sp, #20]
   1aaac:	stm	sp, {r0, r2, r5}
   1aab0:	mov	r0, r6
   1aab4:	mov	r2, r4
   1aab8:	bl	1da04 <main@@Base+0x7920>
   1aabc:	mov	r7, r0
   1aac0:	b	1aac8 <main@@Base+0x49e4>
   1aac4:	mov	r7, r1
   1aac8:	mov	r0, r7
   1aacc:	sub	sp, fp, #16
   1aad0:	pop	{r4, r5, r6, r7, fp, pc}
   1aad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aad8:	add	fp, sp, #28
   1aadc:	sub	sp, sp, #36	; 0x24
   1aae0:	mov	r8, r3
   1aae4:	mov	r6, r2
   1aae8:	mov	r5, r0
   1aaec:	mov	r0, #0
   1aaf0:	strb	r0, [fp, #-29]	; 0xffffffe3
   1aaf4:	ldr	sl, [fp, #8]
   1aaf8:	strb	r0, [sl]
   1aafc:	mov	r0, r5
   1ab00:	bl	1da60 <main@@Base+0x797c>
   1ab04:	mov	r4, r0
   1ab08:	cmp	r0, r6
   1ab0c:	beq	1abbc <main@@Base+0x4ad8>
   1ab10:	mov	r9, r8
   1ab14:	b	1ab28 <main@@Base+0x4a44>
   1ab18:	ldr	r0, [r9, #4]!
   1ab1c:	cmp	r0, #0
   1ab20:	mov	r4, r7
   1ab24:	beq	1abcc <main@@Base+0x4ae8>
   1ab28:	ldr	r7, [r9]
   1ab2c:	add	r0, sp, #24
   1ab30:	str	r0, [sp]
   1ab34:	add	r0, sp, #16
   1ab38:	str	r0, [sp, #4]
   1ab3c:	mov	r0, r5
   1ab40:	mov	r1, r4
   1ab44:	mov	r2, r6
   1ab48:	add	r3, sp, #20
   1ab4c:	blx	r7
   1ab50:	mov	r7, r0
   1ab54:	cmp	r0, r6
   1ab58:	beq	1abe4 <main@@Base+0x4b00>
   1ab5c:	cmp	r7, r4
   1ab60:	beq	1ab18 <main@@Base+0x4a34>
   1ab64:	ldr	r3, [sp, #20]
   1ab68:	ldr	r0, [sp, #24]
   1ab6c:	ldr	r1, [sp, #28]
   1ab70:	stm	sp, {r0, r1}
   1ab74:	sub	r0, fp, #29
   1ab78:	str	r0, [sp, #8]
   1ab7c:	mov	r0, r5
   1ab80:	mov	r1, r7
   1ab84:	mov	r2, r6
   1ab88:	bl	1da04 <main@@Base+0x7920>
   1ab8c:	cmp	r0, r6
   1ab90:	beq	1abc4 <main@@Base+0x4ae0>
   1ab94:	ldrb	r0, [sl]
   1ab98:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1ab9c:	add	r0, r0, r1
   1aba0:	strb	r0, [sl]
   1aba4:	ldr	r0, [sp, #16]
   1aba8:	cmp	r0, #0
   1abac:	mov	r4, r7
   1abb0:	mov	r9, r8
   1abb4:	bne	1ab28 <main@@Base+0x4a44>
   1abb8:	b	1abe4 <main@@Base+0x4b00>
   1abbc:	mov	r7, r4
   1abc0:	b	1abe4 <main@@Base+0x4b00>
   1abc4:	mov	r7, r6
   1abc8:	b	1abe4 <main@@Base+0x4b00>
   1abcc:	mov	r0, r5
   1abd0:	mov	r1, r7
   1abd4:	mov	r2, r6
   1abd8:	mov	r3, #23
   1abdc:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1abe0:	mov	r7, r0
   1abe4:	mov	r0, r7
   1abe8:	sub	sp, fp, #28
   1abec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abf0:	push	{r4, r5, fp, lr}
   1abf4:	add	fp, sp, #8
   1abf8:	mov	r4, r1
   1abfc:	mov	r5, r0
   1ac00:	mov	r0, r1
   1ac04:	bl	1da98 <main@@Base+0x79b4>
   1ac08:	strb	r4, [r5]
   1ac0c:	pop	{r4, r5, fp, pc}
   1ac10:	push	{r4, r5, r6, sl, fp, lr}
   1ac14:	add	fp, sp, #16
   1ac18:	mov	r5, r3
   1ac1c:	mov	r4, r2
   1ac20:	mov	r6, r0
   1ac24:	cmp	r1, r2
   1ac28:	beq	1ac78 <main@@Base+0x4b94>
   1ac2c:	ldrb	r0, [r1]
   1ac30:	cmp	r0, #91	; 0x5b
   1ac34:	bne	1ac78 <main@@Base+0x4b94>
   1ac38:	add	r1, r1, #1
   1ac3c:	mov	r0, r6
   1ac40:	mov	r2, r4
   1ac44:	bl	1d058 <main@@Base+0x6f74>
   1ac48:	cmp	r0, r4
   1ac4c:	beq	1ac94 <main@@Base+0x4bb0>
   1ac50:	ldrb	r1, [r0]
   1ac54:	cmp	r1, #93	; 0x5d
   1ac58:	bne	1ac94 <main@@Base+0x4bb0>
   1ac5c:	mov	r1, #0
   1ac60:	str	r1, [r5]
   1ac64:	add	r1, r0, #1
   1ac68:	mov	r0, r6
   1ac6c:	mov	r2, r4
   1ac70:	pop	{r4, r5, r6, sl, fp, lr}
   1ac74:	b	1d058 <main@@Base+0x6f74>
   1ac78:	mov	r0, #0
   1ac7c:	str	r0, [r5]
   1ac80:	mov	r0, r6
   1ac84:	mov	r2, r4
   1ac88:	mov	r3, #22
   1ac8c:	pop	{r4, r5, r6, sl, fp, lr}
   1ac90:	b	26998 <flatcc_json_parser_set_error@@Base>
   1ac94:	mov	r1, #1
   1ac98:	str	r1, [r5]
   1ac9c:	pop	{r4, r5, r6, sl, fp, pc}
   1aca0:	push	{r4, r5, r6, r7, fp, lr}
   1aca4:	add	fp, sp, #16
   1aca8:	sub	sp, sp, #24
   1acac:	mov	r7, r1
   1acb0:	mov	r6, r0
   1acb4:	mov	r0, #0
   1acb8:	str	r0, [sp, #20]
   1acbc:	str	r0, [sp, #16]
   1acc0:	str	r0, [sp, #12]
   1acc4:	strb	r0, [r3]
   1acc8:	cmp	r1, r2
   1accc:	beq	1ad24 <main@@Base+0x4c40>
   1acd0:	mov	r5, r3
   1acd4:	mov	r4, r2
   1acd8:	add	r0, sp, #16
   1acdc:	str	r0, [sp]
   1ace0:	add	r3, sp, #12
   1ace4:	mov	r0, r6
   1ace8:	mov	r1, r7
   1acec:	bl	27cac <flatcc_json_parser_integer@@Base>
   1acf0:	mov	r1, r0
   1acf4:	cmp	r0, r7
   1acf8:	beq	1ad20 <main@@Base+0x4c3c>
   1acfc:	ldr	r3, [sp, #12]
   1ad00:	ldr	r0, [sp, #16]
   1ad04:	ldr	r2, [sp, #20]
   1ad08:	stm	sp, {r0, r2, r5}
   1ad0c:	mov	r0, r6
   1ad10:	mov	r2, r4
   1ad14:	bl	1da9c <main@@Base+0x79b8>
   1ad18:	mov	r7, r0
   1ad1c:	b	1ad24 <main@@Base+0x4c40>
   1ad20:	mov	r7, r1
   1ad24:	mov	r0, r7
   1ad28:	sub	sp, fp, #16
   1ad2c:	pop	{r4, r5, r6, r7, fp, pc}
   1ad30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad34:	add	fp, sp, #28
   1ad38:	sub	sp, sp, #36	; 0x24
   1ad3c:	mov	r8, r3
   1ad40:	mov	r6, r2
   1ad44:	mov	r5, r0
   1ad48:	mov	r0, #0
   1ad4c:	strb	r0, [fp, #-29]	; 0xffffffe3
   1ad50:	ldr	sl, [fp, #8]
   1ad54:	strb	r0, [sl]
   1ad58:	mov	r0, r5
   1ad5c:	bl	1da60 <main@@Base+0x797c>
   1ad60:	mov	r4, r0
   1ad64:	cmp	r0, r6
   1ad68:	beq	1ae18 <main@@Base+0x4d34>
   1ad6c:	mov	r9, r8
   1ad70:	b	1ad84 <main@@Base+0x4ca0>
   1ad74:	ldr	r0, [r9, #4]!
   1ad78:	cmp	r0, #0
   1ad7c:	mov	r4, r7
   1ad80:	beq	1ae28 <main@@Base+0x4d44>
   1ad84:	ldr	r7, [r9]
   1ad88:	add	r0, sp, #24
   1ad8c:	str	r0, [sp]
   1ad90:	add	r0, sp, #16
   1ad94:	str	r0, [sp, #4]
   1ad98:	mov	r0, r5
   1ad9c:	mov	r1, r4
   1ada0:	mov	r2, r6
   1ada4:	add	r3, sp, #20
   1ada8:	blx	r7
   1adac:	mov	r7, r0
   1adb0:	cmp	r0, r6
   1adb4:	beq	1ae40 <main@@Base+0x4d5c>
   1adb8:	cmp	r7, r4
   1adbc:	beq	1ad74 <main@@Base+0x4c90>
   1adc0:	ldr	r3, [sp, #20]
   1adc4:	ldr	r0, [sp, #24]
   1adc8:	ldr	r1, [sp, #28]
   1adcc:	stm	sp, {r0, r1}
   1add0:	sub	r0, fp, #29
   1add4:	str	r0, [sp, #8]
   1add8:	mov	r0, r5
   1addc:	mov	r1, r7
   1ade0:	mov	r2, r6
   1ade4:	bl	1da9c <main@@Base+0x79b8>
   1ade8:	cmp	r0, r6
   1adec:	beq	1ae20 <main@@Base+0x4d3c>
   1adf0:	ldrb	r0, [sl]
   1adf4:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1adf8:	add	r0, r0, r1
   1adfc:	strb	r0, [sl]
   1ae00:	ldr	r0, [sp, #16]
   1ae04:	cmp	r0, #0
   1ae08:	mov	r4, r7
   1ae0c:	mov	r9, r8
   1ae10:	bne	1ad84 <main@@Base+0x4ca0>
   1ae14:	b	1ae40 <main@@Base+0x4d5c>
   1ae18:	mov	r7, r4
   1ae1c:	b	1ae40 <main@@Base+0x4d5c>
   1ae20:	mov	r7, r6
   1ae24:	b	1ae40 <main@@Base+0x4d5c>
   1ae28:	mov	r0, r5
   1ae2c:	mov	r1, r7
   1ae30:	mov	r2, r6
   1ae34:	mov	r3, #23
   1ae38:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1ae3c:	mov	r7, r0
   1ae40:	mov	r0, r7
   1ae44:	sub	sp, fp, #28
   1ae48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae4c:	push	{r4, r5, fp, lr}
   1ae50:	add	fp, sp, #8
   1ae54:	mov	r4, r1
   1ae58:	mov	r5, r0
   1ae5c:	mov	r0, r1
   1ae60:	bl	1dae8 <main@@Base+0x7a04>
   1ae64:	strb	r4, [r5]
   1ae68:	pop	{r4, r5, fp, pc}
   1ae6c:	push	{r4, r5, r6, sl, fp, lr}
   1ae70:	add	fp, sp, #16
   1ae74:	mov	r6, r3
   1ae78:	mov	r4, r2
   1ae7c:	mov	r5, r0
   1ae80:	bl	1d058 <main@@Base+0x6f74>
   1ae84:	mov	r1, r0
   1ae88:	cmp	r0, r4
   1ae8c:	beq	1aed0 <main@@Base+0x4dec>
   1ae90:	ldrb	r0, [r1]
   1ae94:	cmp	r0, #44	; 0x2c
   1ae98:	bne	1aed8 <main@@Base+0x4df4>
   1ae9c:	add	r1, r1, #1
   1aea0:	mov	r0, r5
   1aea4:	mov	r2, r4
   1aea8:	bl	1d058 <main@@Base+0x6f74>
   1aeac:	mov	r1, r0
   1aeb0:	cmp	r0, r4
   1aeb4:	beq	1af00 <main@@Base+0x4e1c>
   1aeb8:	ldrb	r0, [r1]
   1aebc:	cmp	r0, #93	; 0x5d
   1aec0:	bne	1af1c <main@@Base+0x4e38>
   1aec4:	mov	r0, #0
   1aec8:	str	r0, [r6]
   1aecc:	b	1aeec <main@@Base+0x4e08>
   1aed0:	mov	r0, #0
   1aed4:	b	1af20 <main@@Base+0x4e3c>
   1aed8:	mov	r0, #0
   1aedc:	str	r0, [r6]
   1aee0:	ldrb	r0, [r1]
   1aee4:	cmp	r0, #93	; 0x5d
   1aee8:	bne	1af08 <main@@Base+0x4e24>
   1aeec:	add	r1, r1, #1
   1aef0:	mov	r0, r5
   1aef4:	mov	r2, r4
   1aef8:	pop	{r4, r5, r6, sl, fp, lr}
   1aefc:	b	1d058 <main@@Base+0x6f74>
   1af00:	mov	r0, #0
   1af04:	str	r0, [r6]
   1af08:	mov	r0, r5
   1af0c:	mov	r2, r4
   1af10:	mov	r3, #9
   1af14:	pop	{r4, r5, r6, sl, fp, lr}
   1af18:	b	26998 <flatcc_json_parser_set_error@@Base>
   1af1c:	mov	r0, #1
   1af20:	str	r0, [r6]
   1af24:	mov	r0, r1
   1af28:	pop	{r4, r5, r6, sl, fp, pc}
   1af2c:	push	{r4, r5, r6, r7, fp, lr}
   1af30:	add	fp, sp, #16
   1af34:	sub	sp, sp, #24
   1af38:	mov	r7, r1
   1af3c:	mov	r6, r0
   1af40:	mov	r0, #0
   1af44:	str	r0, [sp, #20]
   1af48:	str	r0, [sp, #16]
   1af4c:	str	r0, [sp, #12]
   1af50:	strh	r0, [r3]
   1af54:	cmp	r1, r2
   1af58:	beq	1afb0 <main@@Base+0x4ecc>
   1af5c:	mov	r5, r3
   1af60:	mov	r4, r2
   1af64:	add	r0, sp, #16
   1af68:	str	r0, [sp]
   1af6c:	add	r3, sp, #12
   1af70:	mov	r0, r6
   1af74:	mov	r1, r7
   1af78:	bl	27cac <flatcc_json_parser_integer@@Base>
   1af7c:	mov	r1, r0
   1af80:	cmp	r0, r7
   1af84:	beq	1afac <main@@Base+0x4ec8>
   1af88:	ldr	r3, [sp, #12]
   1af8c:	ldr	r0, [sp, #16]
   1af90:	ldr	r2, [sp, #20]
   1af94:	stm	sp, {r0, r2, r5}
   1af98:	mov	r0, r6
   1af9c:	mov	r2, r4
   1afa0:	bl	1daec <main@@Base+0x7a08>
   1afa4:	mov	r7, r0
   1afa8:	b	1afb0 <main@@Base+0x4ecc>
   1afac:	mov	r7, r1
   1afb0:	mov	r0, r7
   1afb4:	sub	sp, fp, #16
   1afb8:	pop	{r4, r5, r6, r7, fp, pc}
   1afbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afc0:	add	fp, sp, #28
   1afc4:	sub	sp, sp, #36	; 0x24
   1afc8:	mov	r8, r3
   1afcc:	mov	r6, r2
   1afd0:	mov	r5, r0
   1afd4:	mov	r0, #0
   1afd8:	strh	r0, [fp, #-30]	; 0xffffffe2
   1afdc:	ldr	sl, [fp, #8]
   1afe0:	strh	r0, [sl]
   1afe4:	mov	r0, r5
   1afe8:	bl	1da60 <main@@Base+0x797c>
   1afec:	mov	r4, r0
   1aff0:	cmp	r0, r6
   1aff4:	beq	1b0a4 <main@@Base+0x4fc0>
   1aff8:	mov	r9, r8
   1affc:	b	1b010 <main@@Base+0x4f2c>
   1b000:	ldr	r0, [r9, #4]!
   1b004:	cmp	r0, #0
   1b008:	mov	r4, r7
   1b00c:	beq	1b0b4 <main@@Base+0x4fd0>
   1b010:	ldr	r7, [r9]
   1b014:	add	r0, sp, #24
   1b018:	str	r0, [sp]
   1b01c:	add	r0, sp, #16
   1b020:	str	r0, [sp, #4]
   1b024:	mov	r0, r5
   1b028:	mov	r1, r4
   1b02c:	mov	r2, r6
   1b030:	add	r3, sp, #20
   1b034:	blx	r7
   1b038:	mov	r7, r0
   1b03c:	cmp	r0, r6
   1b040:	beq	1b0cc <main@@Base+0x4fe8>
   1b044:	cmp	r7, r4
   1b048:	beq	1b000 <main@@Base+0x4f1c>
   1b04c:	ldr	r3, [sp, #20]
   1b050:	ldr	r0, [sp, #24]
   1b054:	ldr	r1, [sp, #28]
   1b058:	stm	sp, {r0, r1}
   1b05c:	sub	r0, fp, #30
   1b060:	str	r0, [sp, #8]
   1b064:	mov	r0, r5
   1b068:	mov	r1, r7
   1b06c:	mov	r2, r6
   1b070:	bl	1daec <main@@Base+0x7a08>
   1b074:	cmp	r0, r6
   1b078:	beq	1b0ac <main@@Base+0x4fc8>
   1b07c:	ldrh	r0, [sl]
   1b080:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1b084:	add	r0, r0, r1
   1b088:	strh	r0, [sl]
   1b08c:	ldr	r0, [sp, #16]
   1b090:	cmp	r0, #0
   1b094:	mov	r4, r7
   1b098:	mov	r9, r8
   1b09c:	bne	1b010 <main@@Base+0x4f2c>
   1b0a0:	b	1b0cc <main@@Base+0x4fe8>
   1b0a4:	mov	r7, r4
   1b0a8:	b	1b0cc <main@@Base+0x4fe8>
   1b0ac:	mov	r7, r6
   1b0b0:	b	1b0cc <main@@Base+0x4fe8>
   1b0b4:	mov	r0, r5
   1b0b8:	mov	r1, r7
   1b0bc:	mov	r2, r6
   1b0c0:	mov	r3, #23
   1b0c4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1b0c8:	mov	r7, r0
   1b0cc:	mov	r0, r7
   1b0d0:	sub	sp, fp, #28
   1b0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0d8:	push	{r4, r5, fp, lr}
   1b0dc:	add	fp, sp, #8
   1b0e0:	mov	r4, r1
   1b0e4:	mov	r5, r0
   1b0e8:	mov	r0, r1
   1b0ec:	bl	1db4c <main@@Base+0x7a68>
   1b0f0:	strh	r4, [r5]
   1b0f4:	pop	{r4, r5, fp, pc}
   1b0f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b0fc:	add	fp, sp, #24
   1b100:	sub	sp, sp, #8
   1b104:	mov	r8, r3
   1b108:	mov	r4, r2
   1b10c:	mov	r7, r1
   1b110:	mov	r5, r0
   1b114:	mov	r0, #0
   1b118:	str	r0, [r3]
   1b11c:	ldr	r0, [r5]
   1b120:	mov	r1, #0
   1b124:	bl	2313c <flatcc_builder_start_table@@Base>
   1b128:	cmp	r0, #0
   1b12c:	bne	1b1bc <main@@Base+0x50d8>
   1b130:	add	r3, sp, #4
   1b134:	mov	r0, r5
   1b138:	mov	r1, r7
   1b13c:	mov	r2, r4
   1b140:	bl	19f80 <main@@Base+0x3e9c>
   1b144:	mov	r7, r0
   1b148:	ldr	r0, [sp, #4]
   1b14c:	cmp	r0, #0
   1b150:	beq	1b19c <main@@Base+0x50b8>
   1b154:	add	r6, sp, #4
   1b158:	mov	r0, r5
   1b15c:	mov	r1, r7
   1b160:	mov	r2, r4
   1b164:	bl	1a010 <main@@Base+0x3f2c>
   1b168:	mov	r1, r0
   1b16c:	mov	r0, r5
   1b170:	mov	r2, r4
   1b174:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1b178:	mov	r1, r0
   1b17c:	mov	r0, r5
   1b180:	mov	r2, r4
   1b184:	mov	r3, r6
   1b188:	bl	1cf98 <main@@Base+0x6eb4>
   1b18c:	mov	r7, r0
   1b190:	ldr	r0, [sp, #4]
   1b194:	cmp	r0, #0
   1b198:	bne	1b158 <main@@Base+0x5074>
   1b19c:	ldr	r0, [r5, #24]
   1b1a0:	cmp	r0, #0
   1b1a4:	bne	1b1bc <main@@Base+0x50d8>
   1b1a8:	ldr	r0, [r5]
   1b1ac:	bl	23848 <flatcc_builder_end_table@@Base>
   1b1b0:	str	r0, [r8]
   1b1b4:	cmp	r0, #0
   1b1b8:	bne	1b1d4 <main@@Base+0x50f0>
   1b1bc:	mov	r0, r5
   1b1c0:	mov	r1, r7
   1b1c4:	mov	r2, r4
   1b1c8:	mov	r3, #33	; 0x21
   1b1cc:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1b1d0:	mov	r7, r0
   1b1d4:	mov	r0, r7
   1b1d8:	sub	sp, fp, #24
   1b1dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1e4:	add	fp, sp, #28
   1b1e8:	sub	sp, sp, #44	; 0x2c
   1b1ec:	mov	r6, r3
   1b1f0:	mov	r4, r2
   1b1f4:	mov	r5, r0
   1b1f8:	sub	r3, fp, #32
   1b1fc:	bl	19f80 <main@@Base+0x3e9c>
   1b200:	mov	r1, r0
   1b204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b208:	cmp	r0, #0
   1b20c:	beq	1b674 <main@@Base+0x5590>
   1b210:	add	r0, r6, #24
   1b214:	str	r0, [sp, #28]
   1b218:	add	r0, r6, #16
   1b21c:	str	r0, [sp, #24]
   1b220:	add	r0, r6, #26
   1b224:	str	r0, [sp, #20]
   1b228:	add	r0, r6, #8
   1b22c:	str	r0, [sp, #12]
   1b230:	str	r6, [sp, #16]
   1b234:	add	r0, r6, #4
   1b238:	str	r0, [sp, #8]
   1b23c:	movw	r9, #29556	; 0x7374
   1b240:	movt	r9, #29797	; 0x7465
   1b244:	mvn	sl, #-855638016	; 0xcd000000
   1b248:	sub	r6, fp, #32
   1b24c:	b	1b28c <main@@Base+0x51a8>
   1b250:	mov	r0, r5
   1b254:	mov	r1, r6
   1b258:	mov	r2, r4
   1b25c:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1b260:	mov	r8, r0
   1b264:	sub	r6, fp, #32
   1b268:	mov	r0, r5
   1b26c:	mov	r1, r8
   1b270:	mov	r2, r4
   1b274:	mov	r3, r6
   1b278:	bl	1cf98 <main@@Base+0x6eb4>
   1b27c:	mov	r1, r0
   1b280:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b284:	cmp	r0, #0
   1b288:	beq	1b674 <main@@Base+0x5590>
   1b28c:	mov	r0, r5
   1b290:	mov	r2, r4
   1b294:	bl	1a010 <main@@Base+0x3f2c>
   1b298:	mov	r7, r0
   1b29c:	mov	r1, r4
   1b2a0:	bl	1a054 <main@@Base+0x3f70>
   1b2a4:	subs	r2, sl, r0
   1b2a8:	sbcs	r2, r9, r1
   1b2ac:	bcc	1b364 <main@@Base+0x5280>
   1b2b0:	eor	r2, r1, r9
   1b2b4:	and	r0, r0, #-16777216	; 0xff000000
   1b2b8:	eor	r3, r0, #822083584	; 0x31000000
   1b2bc:	orrs	r2, r3, r2
   1b2c0:	beq	1b45c <main@@Base+0x5378>
   1b2c4:	eor	r1, r1, r9
   1b2c8:	eor	r0, r0, #838860800	; 0x32000000
   1b2cc:	orrs	r0, r0, r1
   1b2d0:	bne	1b594 <main@@Base+0x54b0>
   1b2d4:	mov	r0, r5
   1b2d8:	mov	r1, r7
   1b2dc:	mov	r2, r4
   1b2e0:	mov	r3, #5
   1b2e4:	bl	1a058 <main@@Base+0x3f74>
   1b2e8:	mov	r6, r0
   1b2ec:	cmp	r7, r0
   1b2f0:	beq	1b250 <main@@Base+0x516c>
   1b2f4:	mov	r0, #0
   1b2f8:	strb	r0, [sp, #32]
   1b2fc:	mov	r0, r5
   1b300:	mov	r1, r6
   1b304:	mov	r2, r4
   1b308:	add	r7, sp, #32
   1b30c:	mov	r3, r7
   1b310:	bl	1aa44 <main@@Base+0x4960>
   1b314:	mov	r8, r0
   1b318:	cmp	r6, r0
   1b31c:	bne	1b350 <main@@Base+0x526c>
   1b320:	str	r7, [sp]
   1b324:	mov	r0, r5
   1b328:	mov	r1, r8
   1b32c:	mov	r2, r4
   1b330:	movw	r3, #41352	; 0xa188
   1b334:	movt	r3, #4
   1b338:	bl	1aad4 <main@@Base+0x49f0>
   1b33c:	mov	r1, r0
   1b340:	cmp	r0, r8
   1b344:	cmpne	r1, r4
   1b348:	beq	1b660 <main@@Base+0x557c>
   1b34c:	mov	r8, r1
   1b350:	sub	r6, fp, #32
   1b354:	ldrsb	r1, [sp, #32]
   1b358:	ldr	r0, [sp, #28]
   1b35c:	bl	1abf0 <main@@Base+0x4b0c>
   1b360:	b	1b268 <main@@Base+0x5184>
   1b364:	cmn	r1, #-2013265919	; 0x88000001
   1b368:	bhi	1b3b4 <main@@Base+0x52d0>
   1b36c:	eor	r1, r1, r9
   1b370:	and	r0, r0, #-16777216	; 0xff000000
   1b374:	eor	r0, r0, #855638016	; 0x33000000
   1b378:	orrs	r0, r0, r1
   1b37c:	bne	1b594 <main@@Base+0x54b0>
   1b380:	mov	r0, r5
   1b384:	mov	r1, r7
   1b388:	mov	r2, r4
   1b38c:	mov	r3, #5
   1b390:	bl	1a058 <main@@Base+0x3f74>
   1b394:	mov	r1, r0
   1b398:	cmp	r7, r0
   1b39c:	beq	1b5c8 <main@@Base+0x54e4>
   1b3a0:	mov	r0, r5
   1b3a4:	mov	r2, r4
   1b3a8:	ldr	r3, [sp, #20]
   1b3ac:	bl	1b680 <main@@Base+0x559c>
   1b3b0:	b	1b5a4 <main@@Base+0x54c0>
   1b3b4:	and	r0, r1, #-16777216	; 0xff000000
   1b3b8:	lsr	r1, r1, #24
   1b3bc:	cmp	r1, #120	; 0x78
   1b3c0:	bhi	1b4f4 <main@@Base+0x5410>
   1b3c4:	teq	r0, #2013265920	; 0x78000000
   1b3c8:	bne	1b594 <main@@Base+0x54b0>
   1b3cc:	mov	r0, r5
   1b3d0:	mov	r1, r7
   1b3d4:	mov	r2, r4
   1b3d8:	mov	r3, #1
   1b3dc:	bl	1a058 <main@@Base+0x3f74>
   1b3e0:	mov	r6, r0
   1b3e4:	cmp	r7, r0
   1b3e8:	beq	1b250 <main@@Base+0x516c>
   1b3ec:	mov	r0, #0
   1b3f0:	str	r0, [sp, #32]
   1b3f4:	mov	r0, r5
   1b3f8:	mov	r1, r6
   1b3fc:	mov	r2, r4
   1b400:	add	r7, sp, #32
   1b404:	mov	r3, r7
   1b408:	bl	276dc <flatcc_json_parser_float@@Base>
   1b40c:	mov	r8, r0
   1b410:	cmp	r6, r0
   1b414:	bne	1b448 <main@@Base+0x5364>
   1b418:	str	r7, [sp]
   1b41c:	mov	r0, r5
   1b420:	mov	r1, r8
   1b424:	mov	r2, r4
   1b428:	movw	r3, #41380	; 0xa1a4
   1b42c:	movt	r3, #4
   1b430:	bl	1c5e0 <main@@Base+0x64fc>
   1b434:	mov	r1, r0
   1b438:	cmp	r0, r8
   1b43c:	cmpne	r1, r4
   1b440:	beq	1b660 <main@@Base+0x557c>
   1b444:	mov	r8, r1
   1b448:	sub	r6, fp, #32
   1b44c:	vldr	s0, [sp, #32]
   1b450:	ldr	r0, [sp, #16]
   1b454:	bl	1c6ec <main@@Base+0x6608>
   1b458:	b	1b268 <main@@Base+0x5184>
   1b45c:	mov	r0, r5
   1b460:	mov	r1, r7
   1b464:	mov	r2, r4
   1b468:	mov	r3, #5
   1b46c:	bl	1a058 <main@@Base+0x3f74>
   1b470:	mov	sl, r0
   1b474:	cmp	r7, r0
   1b478:	beq	1b5ac <main@@Base+0x54c8>
   1b47c:	mov	r0, #0
   1b480:	str	r0, [sp, #36]	; 0x24
   1b484:	str	r0, [sp, #32]
   1b488:	mov	r0, r5
   1b48c:	mov	r1, sl
   1b490:	mov	r2, r4
   1b494:	add	r6, sp, #32
   1b498:	mov	r3, r6
   1b49c:	bl	27604 <flatcc_json_parser_double@@Base>
   1b4a0:	mov	r8, r0
   1b4a4:	cmp	sl, r0
   1b4a8:	bne	1b4dc <main@@Base+0x53f8>
   1b4ac:	str	r6, [sp]
   1b4b0:	mov	r0, r5
   1b4b4:	mov	r1, r8
   1b4b8:	mov	r2, r4
   1b4bc:	movw	r3, #41368	; 0xa198
   1b4c0:	movt	r3, #4
   1b4c4:	bl	1ce6c <main@@Base+0x6d88>
   1b4c8:	mov	r1, r0
   1b4cc:	cmp	r0, r8
   1b4d0:	cmpne	r1, r4
   1b4d4:	beq	1b660 <main@@Base+0x557c>
   1b4d8:	mov	r8, r1
   1b4dc:	mvn	sl, #-855638016	; 0xcd000000
   1b4e0:	sub	r6, fp, #32
   1b4e4:	vldr	d0, [sp, #32]
   1b4e8:	ldr	r0, [sp, #24]
   1b4ec:	bl	1cf80 <main@@Base+0x6e9c>
   1b4f0:	b	1b268 <main@@Base+0x5184>
   1b4f4:	teq	r0, #2030043136	; 0x79000000
   1b4f8:	beq	1b5d0 <main@@Base+0x54ec>
   1b4fc:	teq	r0, #2046820352	; 0x7a000000
   1b500:	bne	1b594 <main@@Base+0x54b0>
   1b504:	mov	r0, r5
   1b508:	mov	r1, r7
   1b50c:	mov	r2, r4
   1b510:	mov	r3, #1
   1b514:	bl	1a058 <main@@Base+0x3f74>
   1b518:	mov	r6, r0
   1b51c:	cmp	r7, r0
   1b520:	beq	1b250 <main@@Base+0x516c>
   1b524:	mov	r0, #0
   1b528:	str	r0, [sp, #32]
   1b52c:	mov	r0, r5
   1b530:	mov	r1, r6
   1b534:	mov	r2, r4
   1b538:	add	r7, sp, #32
   1b53c:	mov	r3, r7
   1b540:	bl	276dc <flatcc_json_parser_float@@Base>
   1b544:	mov	r8, r0
   1b548:	cmp	r6, r0
   1b54c:	bne	1b580 <main@@Base+0x549c>
   1b550:	str	r7, [sp]
   1b554:	mov	r0, r5
   1b558:	mov	r1, r8
   1b55c:	mov	r2, r4
   1b560:	movw	r3, #41392	; 0xa1b0
   1b564:	movt	r3, #4
   1b568:	bl	1c5e0 <main@@Base+0x64fc>
   1b56c:	mov	r1, r0
   1b570:	cmp	r0, r8
   1b574:	cmpne	r1, r4
   1b578:	beq	1b660 <main@@Base+0x557c>
   1b57c:	mov	r8, r1
   1b580:	sub	r6, fp, #32
   1b584:	vldr	s0, [sp, #32]
   1b588:	ldr	r0, [sp, #12]
   1b58c:	bl	1c6ec <main@@Base+0x6608>
   1b590:	b	1b268 <main@@Base+0x5184>
   1b594:	mov	r0, r5
   1b598:	mov	r1, r7
   1b59c:	mov	r2, r4
   1b5a0:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1b5a4:	mov	r8, r0
   1b5a8:	b	1b268 <main@@Base+0x5184>
   1b5ac:	mov	r0, r5
   1b5b0:	mov	r1, sl
   1b5b4:	mov	r2, r4
   1b5b8:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1b5bc:	mov	r8, r0
   1b5c0:	mvn	sl, #-855638016	; 0xcd000000
   1b5c4:	b	1b268 <main@@Base+0x5184>
   1b5c8:	mov	r0, r5
   1b5cc:	b	1b59c <main@@Base+0x54b8>
   1b5d0:	mov	r0, r5
   1b5d4:	mov	r1, r7
   1b5d8:	mov	r2, r4
   1b5dc:	mov	r3, #1
   1b5e0:	bl	1a058 <main@@Base+0x3f74>
   1b5e4:	mov	r6, r0
   1b5e8:	cmp	r7, r0
   1b5ec:	beq	1b250 <main@@Base+0x516c>
   1b5f0:	mov	r0, #0
   1b5f4:	str	r0, [sp, #32]
   1b5f8:	mov	r0, r5
   1b5fc:	mov	r1, r6
   1b600:	mov	r2, r4
   1b604:	add	r7, sp, #32
   1b608:	mov	r3, r7
   1b60c:	bl	276dc <flatcc_json_parser_float@@Base>
   1b610:	mov	r8, r0
   1b614:	cmp	r6, r0
   1b618:	bne	1b64c <main@@Base+0x5568>
   1b61c:	str	r7, [sp]
   1b620:	mov	r0, r5
   1b624:	mov	r1, r8
   1b628:	mov	r2, r4
   1b62c:	movw	r3, #41404	; 0xa1bc
   1b630:	movt	r3, #4
   1b634:	bl	1c5e0 <main@@Base+0x64fc>
   1b638:	mov	r1, r0
   1b63c:	cmp	r0, r8
   1b640:	cmpne	r1, r4
   1b644:	beq	1b660 <main@@Base+0x557c>
   1b648:	mov	r8, r1
   1b64c:	sub	r6, fp, #32
   1b650:	vldr	s0, [sp, #32]
   1b654:	ldr	r0, [sp, #8]
   1b658:	bl	1c6ec <main@@Base+0x6608>
   1b65c:	b	1b268 <main@@Base+0x5184>
   1b660:	mov	r0, r5
   1b664:	mov	r2, r4
   1b668:	mov	r3, #33	; 0x21
   1b66c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1b670:	mov	r1, r0
   1b674:	mov	r0, r1
   1b678:	sub	sp, fp, #28
   1b67c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b684:	add	fp, sp, #28
   1b688:	sub	sp, sp, #20
   1b68c:	mov	r6, r3
   1b690:	mov	r4, r2
   1b694:	mov	r5, r0
   1b698:	add	r3, sp, #16
   1b69c:	bl	19f80 <main@@Base+0x3e9c>
   1b6a0:	mov	r1, r0
   1b6a4:	ldr	r0, [sp, #16]
   1b6a8:	cmp	r0, #0
   1b6ac:	beq	1b884 <main@@Base+0x57a0>
   1b6b0:	str	r6, [sp, #8]
   1b6b4:	add	r0, r6, #2
   1b6b8:	str	r0, [sp, #4]
   1b6bc:	add	sl, sp, #12
   1b6c0:	add	r9, sp, #16
   1b6c4:	b	1b700 <main@@Base+0x561c>
   1b6c8:	mov	r0, r5
   1b6cc:	mov	r1, r6
   1b6d0:	mov	r2, r4
   1b6d4:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1b6d8:	mov	r8, r0
   1b6dc:	mov	r0, r5
   1b6e0:	mov	r1, r8
   1b6e4:	mov	r2, r4
   1b6e8:	mov	r3, r9
   1b6ec:	bl	1cf98 <main@@Base+0x6eb4>
   1b6f0:	mov	r1, r0
   1b6f4:	ldr	r0, [sp, #16]
   1b6f8:	cmp	r0, #0
   1b6fc:	beq	1b884 <main@@Base+0x57a0>
   1b700:	mov	r0, r5
   1b704:	mov	r2, r4
   1b708:	bl	1a010 <main@@Base+0x3f2c>
   1b70c:	mov	r6, r0
   1b710:	mov	r1, r4
   1b714:	bl	1a054 <main@@Base+0x3f70>
   1b718:	and	r0, r1, #-16777216	; 0xff000000
   1b71c:	teq	r0, #1627389952	; 0x61000000
   1b720:	beq	1b7c0 <main@@Base+0x56dc>
   1b724:	teq	r0, #1644167168	; 0x62000000
   1b728:	bne	1b6c8 <main@@Base+0x55e4>
   1b72c:	mov	r7, sl
   1b730:	mov	r0, r5
   1b734:	mov	r1, r6
   1b738:	mov	r2, r4
   1b73c:	mov	r3, #1
   1b740:	bl	1a058 <main@@Base+0x3f74>
   1b744:	mov	sl, r0
   1b748:	cmp	r6, r0
   1b74c:	beq	1b848 <main@@Base+0x5764>
   1b750:	mov	r0, #0
   1b754:	strb	r0, [sp, #15]
   1b758:	mov	r0, r5
   1b75c:	mov	r1, sl
   1b760:	mov	r2, r4
   1b764:	add	r6, sp, #15
   1b768:	mov	r3, r6
   1b76c:	bl	1aa44 <main@@Base+0x4960>
   1b770:	mov	r8, r0
   1b774:	cmp	sl, r0
   1b778:	bne	1b7ac <main@@Base+0x56c8>
   1b77c:	str	r6, [sp]
   1b780:	mov	r0, r5
   1b784:	mov	r1, r8
   1b788:	mov	r2, r4
   1b78c:	movw	r3, #41416	; 0xa1c8
   1b790:	movt	r3, #4
   1b794:	bl	1aad4 <main@@Base+0x49f0>
   1b798:	mov	r1, r0
   1b79c:	cmp	r0, r8
   1b7a0:	cmpne	r1, r4
   1b7a4:	beq	1b870 <main@@Base+0x578c>
   1b7a8:	mov	r8, r1
   1b7ac:	mov	sl, r7
   1b7b0:	ldrsb	r1, [sp, #15]
   1b7b4:	ldr	r0, [sp, #4]
   1b7b8:	bl	1abf0 <main@@Base+0x4b0c>
   1b7bc:	b	1b6dc <main@@Base+0x55f8>
   1b7c0:	mov	r0, r5
   1b7c4:	mov	r1, r6
   1b7c8:	mov	r2, r4
   1b7cc:	mov	r3, #1
   1b7d0:	bl	1a058 <main@@Base+0x3f74>
   1b7d4:	mov	r7, r0
   1b7d8:	cmp	r6, r0
   1b7dc:	beq	1b864 <main@@Base+0x5780>
   1b7e0:	mov	r0, #0
   1b7e4:	strh	r0, [sp, #12]
   1b7e8:	mov	r0, r5
   1b7ec:	mov	r1, r7
   1b7f0:	mov	r2, r4
   1b7f4:	mov	r3, sl
   1b7f8:	bl	1af2c <main@@Base+0x4e48>
   1b7fc:	mov	r8, r0
   1b800:	cmp	r7, r0
   1b804:	bne	1b838 <main@@Base+0x5754>
   1b808:	str	sl, [sp]
   1b80c:	mov	r0, r5
   1b810:	mov	r1, r8
   1b814:	mov	r2, r4
   1b818:	movw	r3, #41428	; 0xa1d4
   1b81c:	movt	r3, #4
   1b820:	bl	1afbc <main@@Base+0x4ed8>
   1b824:	mov	r1, r0
   1b828:	cmp	r0, r8
   1b82c:	cmpne	r1, r4
   1b830:	beq	1b870 <main@@Base+0x578c>
   1b834:	mov	r8, r1
   1b838:	ldrsh	r1, [sp, #12]
   1b83c:	ldr	r0, [sp, #8]
   1b840:	bl	1b0d8 <main@@Base+0x4ff4>
   1b844:	b	1b6dc <main@@Base+0x55f8>
   1b848:	mov	r0, r5
   1b84c:	mov	r1, sl
   1b850:	mov	r2, r4
   1b854:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1b858:	mov	r8, r0
   1b85c:	mov	sl, r7
   1b860:	b	1b6dc <main@@Base+0x55f8>
   1b864:	mov	r0, r5
   1b868:	mov	r1, r7
   1b86c:	b	1b6d0 <main@@Base+0x55ec>
   1b870:	mov	r0, r5
   1b874:	mov	r2, r4
   1b878:	mov	r3, #33	; 0x21
   1b87c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1b880:	mov	r1, r0
   1b884:	mov	r0, r1
   1b888:	sub	sp, fp, #28
   1b88c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b890:	push	{r4, r5, r6, sl, fp, lr}
   1b894:	add	fp, sp, #16
   1b898:	mov	r4, r2
   1b89c:	mov	r5, r0
   1b8a0:	ldr	r6, [fp, #8]
   1b8a4:	mov	r0, #0
   1b8a8:	str	r0, [r6]
   1b8ac:	cmp	r3, #4
   1b8b0:	bhi	1b950 <main@@Base+0x586c>
   1b8b4:	add	r0, pc, #0
   1b8b8:	ldr	pc, [r0, r3, lsl #2]
   1b8bc:	ldrdeq	fp, [r1], -r0
   1b8c0:	andeq	fp, r1, r0, ror #17
   1b8c4:	strdeq	fp, [r1], -r4
   1b8c8:	andeq	fp, r1, r8, lsl #18
   1b8cc:	andeq	fp, r1, ip, lsl r9
   1b8d0:	mov	r0, r5
   1b8d4:	mov	r2, r4
   1b8d8:	pop	{r4, r5, r6, sl, fp, lr}
   1b8dc:	b	1db50 <main@@Base+0x7a6c>
   1b8e0:	mov	r0, r5
   1b8e4:	mov	r2, r4
   1b8e8:	mov	r3, r6
   1b8ec:	bl	17020 <main@@Base+0xf3c>
   1b8f0:	b	1b92c <main@@Base+0x5848>
   1b8f4:	mov	r0, r5
   1b8f8:	mov	r2, r4
   1b8fc:	mov	r3, r6
   1b900:	bl	1dbac <main@@Base+0x7ac8>
   1b904:	b	1b92c <main@@Base+0x5848>
   1b908:	mov	r0, r5
   1b90c:	mov	r2, r4
   1b910:	mov	r3, r6
   1b914:	bl	1e00c <main@@Base+0x7f28>
   1b918:	b	1b92c <main@@Base+0x5848>
   1b91c:	mov	r0, r5
   1b920:	mov	r2, r4
   1b924:	mov	r3, r6
   1b928:	bl	1e0f4 <main@@Base+0x8010>
   1b92c:	mov	r1, r0
   1b930:	ldr	r0, [r5, #24]
   1b934:	cmp	r0, #0
   1b938:	bne	1b948 <main@@Base+0x5864>
   1b93c:	ldr	r0, [r6]
   1b940:	cmp	r0, #0
   1b944:	beq	1b970 <main@@Base+0x588c>
   1b948:	mov	r0, r1
   1b94c:	pop	{r4, r5, r6, sl, fp, pc}
   1b950:	ldrb	r0, [r5, #8]
   1b954:	tst	r0, #1
   1b958:	bne	1b984 <main@@Base+0x58a0>
   1b95c:	mov	r0, r5
   1b960:	mov	r2, r4
   1b964:	mov	r3, #15
   1b968:	pop	{r4, r5, r6, sl, fp, lr}
   1b96c:	b	26998 <flatcc_json_parser_set_error@@Base>
   1b970:	mov	r0, r5
   1b974:	mov	r2, r4
   1b978:	mov	r3, #33	; 0x21
   1b97c:	pop	{r4, r5, r6, sl, fp, lr}
   1b980:	b	26998 <flatcc_json_parser_set_error@@Base>
   1b984:	mov	r0, r5
   1b988:	mov	r2, r4
   1b98c:	pop	{r4, r5, r6, sl, fp, lr}
   1b990:	b	272ec <flatcc_json_parser_generic_json@@Base>
   1b994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b998:	add	fp, sp, #28
   1b99c:	sub	sp, sp, #4
   1b9a0:	mov	r8, r3
   1b9a4:	mov	r6, r2
   1b9a8:	mov	r5, r1
   1b9ac:	mov	r9, r0
   1b9b0:	mov	r0, r1
   1b9b4:	mov	r1, r2
   1b9b8:	bl	1a054 <main@@Base+0x3f70>
   1b9bc:	mov	r7, r0
   1b9c0:	mov	r4, r1
   1b9c4:	movw	r1, #28275	; 0x6e73
   1b9c8:	movt	r1, #19823	; 0x4d6f
   1b9cc:	movw	r0, #29184	; 0x7200
   1b9d0:	movt	r0, #29797	; 0x7465
   1b9d4:	ldr	r3, [fp, #12]
   1b9d8:	ldr	sl, [fp, #8]
   1b9dc:	subs	r2, r7, r0
   1b9e0:	sbcs	r2, r4, r1
   1b9e4:	bcs	1ba28 <main@@Base+0x5944>
   1b9e8:	bic	r0, r4, #255	; 0xff
   1b9ec:	movw	r1, #29696	; 0x7400
   1b9f0:	movt	r1, #16748	; 0x416c
   1b9f4:	teq	r0, r1
   1b9f8:	bne	1ba74 <main@@Base+0x5990>
   1b9fc:	str	r3, [sp]
   1ba00:	mov	r0, r9
   1ba04:	mov	r1, r5
   1ba08:	mov	r2, r6
   1ba0c:	mov	r3, #3
   1ba10:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1ba14:	cmp	r0, r5
   1ba18:	beq	1ba74 <main@@Base+0x5990>
   1ba1c:	mov	r1, #0
   1ba20:	mov	r2, #4
   1ba24:	b	1ba64 <main@@Base+0x5980>
   1ba28:	eor	r1, r4, r1
   1ba2c:	add	r2, r0, #50	; 0x32
   1ba30:	eor	r2, r7, r2
   1ba34:	orrs	r2, r2, r1
   1ba38:	bne	1ba80 <main@@Base+0x599c>
   1ba3c:	str	r3, [sp]
   1ba40:	mov	r0, r9
   1ba44:	mov	r1, r5
   1ba48:	mov	r2, r6
   1ba4c:	mov	r3, #8
   1ba50:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1ba54:	cmp	r0, r5
   1ba58:	beq	1ba74 <main@@Base+0x5990>
   1ba5c:	mov	r1, #0
   1ba60:	mov	r2, #3
   1ba64:	str	r2, [sl]
   1ba68:	str	r1, [sl, #4]
   1ba6c:	str	r1, [r8]
   1ba70:	mov	r5, r0
   1ba74:	mov	r0, r5
   1ba78:	sub	sp, fp, #28
   1ba7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba80:	bic	r2, r7, #255	; 0xff
   1ba84:	eor	r0, r2, r0
   1ba88:	orrs	r0, r0, r1
   1ba8c:	mov	sl, r5
   1ba90:	bne	1bad8 <main@@Base+0x59f4>
   1ba94:	str	r3, [sp]
   1ba98:	mov	r0, r9
   1ba9c:	mov	r1, r5
   1baa0:	mov	r2, r6
   1baa4:	mov	r3, #7
   1baa8:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1baac:	mov	sl, r0
   1bab0:	cmp	r0, r5
   1bab4:	beq	1bad4 <main@@Base+0x59f0>
   1bab8:	mov	r1, #0
   1babc:	mov	r0, #1
   1bac0:	ldr	r2, [fp, #8]
   1bac4:	strd	r0, [r2]
   1bac8:	str	r1, [r8]
   1bacc:	mov	r5, sl
   1bad0:	b	1ba74 <main@@Base+0x5990>
   1bad4:	ldr	r3, [fp, #12]
   1bad8:	movw	r0, #20037	; 0x4e45
   1badc:	movt	r0, #20047	; 0x4e4f
   1bae0:	teq	r4, r0
   1bae4:	bne	1bb24 <main@@Base+0x5a40>
   1bae8:	str	r3, [sp]
   1baec:	mov	r0, r9
   1baf0:	mov	r1, sl
   1baf4:	mov	r2, r6
   1baf8:	mov	r3, #4
   1bafc:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1bb00:	cmp	r0, sl
   1bb04:	beq	1bb1c <main@@Base+0x5a38>
   1bb08:	mov	r1, #0
   1bb0c:	ldr	r2, [fp, #8]
   1bb10:	str	r1, [r2]
   1bb14:	str	r1, [r2, #4]
   1bb18:	b	1ba6c <main@@Base+0x5988>
   1bb1c:	mov	sl, r0
   1bb20:	ldr	r3, [fp, #12]
   1bb24:	movw	r0, #28016	; 0x6d70
   1bb28:	movt	r0, #21353	; 0x5369
   1bb2c:	eor	r0, r7, r0
   1bb30:	movw	r1, #29556	; 0x7374
   1bb34:	movt	r1, #21605	; 0x5465
   1bb38:	eor	r1, r4, r1
   1bb3c:	orrs	r0, r0, r1
   1bb40:	bne	1ba74 <main@@Base+0x5990>
   1bb44:	mov	r7, r3
   1bb48:	add	r0, sl, #8
   1bb4c:	mov	r1, r6
   1bb50:	bl	1a054 <main@@Base+0x3f70>
   1bb54:	movw	r2, #21601	; 0x5461
   1bb58:	movt	r2, #27749	; 0x6c65
   1bb5c:	eor	r1, r1, r2
   1bb60:	movw	r2, #25943	; 0x6557
   1bb64:	movt	r2, #25196	; 0x626c
   1bb68:	eor	r0, r0, r2
   1bb6c:	orrs	r0, r0, r1
   1bb70:	bne	1ba74 <main@@Base+0x5990>
   1bb74:	add	r4, sl, #16
   1bb78:	mov	r0, r4
   1bb7c:	mov	r1, r6
   1bb80:	bl	1a054 <main@@Base+0x3f70>
   1bb84:	lsr	r0, r0, #8
   1bb88:	orr	r0, r0, r1, lsl #24
   1bb8c:	movw	r2, #30061	; 0x756d
   1bb90:	movt	r2, #17774	; 0x456e
   1bb94:	eor	r0, r0, r2
   1bb98:	movw	r2, #29800	; 0x7468
   1bb9c:	movt	r2, #105	; 0x69
   1bba0:	eor	r1, r2, r1, lsr #8
   1bba4:	orrs	r0, r0, r1
   1bba8:	bne	1ba74 <main@@Base+0x5990>
   1bbac:	str	r7, [sp]
   1bbb0:	mov	r0, r9
   1bbb4:	mov	r1, r4
   1bbb8:	mov	r2, r6
   1bbbc:	mov	r3, #7
   1bbc0:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1bbc4:	cmp	r0, r4
   1bbc8:	ldr	r3, [fp, #8]
   1bbcc:	beq	1ba74 <main@@Base+0x5990>
   1bbd0:	mov	r1, #0
   1bbd4:	mov	r2, #2
   1bbd8:	str	r2, [r3]
   1bbdc:	str	r1, [r3, #4]
   1bbe0:	b	1ba6c <main@@Base+0x5988>
   1bbe4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bbe8:	add	fp, sp, #24
   1bbec:	sub	sp, sp, #8
   1bbf0:	mov	r8, r3
   1bbf4:	mov	r6, r2
   1bbf8:	mov	r5, r1
   1bbfc:	mov	r7, r0
   1bc00:	sub	r4, r2, r1
   1bc04:	cmp	r4, #4
   1bc08:	blt	1bc4c <main@@Base+0x5b68>
   1bc0c:	movw	r1, #22290	; 0x5712
   1bc10:	movt	r1, #3
   1bc14:	mov	r0, r5
   1bc18:	mov	r2, #4
   1bc1c:	bl	14ebc <bcmp@plt>
   1bc20:	cmp	r0, #0
   1bc24:	beq	1bc78 <main@@Base+0x5b94>
   1bc28:	cmp	r4, #5
   1bc2c:	blt	1bc4c <main@@Base+0x5b68>
   1bc30:	movw	r1, #22295	; 0x5717
   1bc34:	movt	r1, #3
   1bc38:	mov	r0, r5
   1bc3c:	mov	r2, #5
   1bc40:	bl	14ebc <bcmp@plt>
   1bc44:	cmp	r0, #0
   1bc48:	beq	1bc8c <main@@Base+0x5ba8>
   1bc4c:	add	r3, sp, #7
   1bc50:	mov	r0, r7
   1bc54:	mov	r1, r5
   1bc58:	mov	r2, r6
   1bc5c:	bl	1aca0 <main@@Base+0x4bbc>
   1bc60:	ldrb	r1, [sp, #7]
   1bc64:	cmp	r1, #0
   1bc68:	movwne	r1, #1
   1bc6c:	strb	r1, [r8]
   1bc70:	sub	sp, fp, #24
   1bc74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc78:	mov	r0, #1
   1bc7c:	strb	r0, [r8]
   1bc80:	add	r0, r5, #4
   1bc84:	sub	sp, fp, #24
   1bc88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bc8c:	mov	r0, #0
   1bc90:	strb	r0, [r8]
   1bc94:	add	r0, r5, #5
   1bc98:	sub	sp, fp, #24
   1bc9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bca4:	add	fp, sp, #28
   1bca8:	sub	sp, sp, #36	; 0x24
   1bcac:	mov	r8, r3
   1bcb0:	mov	r6, r2
   1bcb4:	mov	r5, r0
   1bcb8:	mov	r0, #0
   1bcbc:	strb	r0, [fp, #-29]	; 0xffffffe3
   1bcc0:	ldr	sl, [fp, #8]
   1bcc4:	strb	r0, [sl]
   1bcc8:	mov	r0, r5
   1bccc:	bl	1da60 <main@@Base+0x797c>
   1bcd0:	mov	r4, r0
   1bcd4:	cmp	r0, r6
   1bcd8:	beq	1bd88 <main@@Base+0x5ca4>
   1bcdc:	mov	r9, r8
   1bce0:	b	1bcf4 <main@@Base+0x5c10>
   1bce4:	ldr	r0, [r9, #4]!
   1bce8:	cmp	r0, #0
   1bcec:	mov	r4, r7
   1bcf0:	beq	1bd98 <main@@Base+0x5cb4>
   1bcf4:	ldr	r7, [r9]
   1bcf8:	add	r0, sp, #24
   1bcfc:	str	r0, [sp]
   1bd00:	add	r0, sp, #16
   1bd04:	str	r0, [sp, #4]
   1bd08:	mov	r0, r5
   1bd0c:	mov	r1, r4
   1bd10:	mov	r2, r6
   1bd14:	add	r3, sp, #20
   1bd18:	blx	r7
   1bd1c:	mov	r7, r0
   1bd20:	cmp	r0, r6
   1bd24:	beq	1bdb0 <main@@Base+0x5ccc>
   1bd28:	cmp	r7, r4
   1bd2c:	beq	1bce4 <main@@Base+0x5c00>
   1bd30:	ldr	r3, [sp, #20]
   1bd34:	ldr	r0, [sp, #24]
   1bd38:	ldr	r1, [sp, #28]
   1bd3c:	stm	sp, {r0, r1}
   1bd40:	sub	r0, fp, #29
   1bd44:	str	r0, [sp, #8]
   1bd48:	mov	r0, r5
   1bd4c:	mov	r1, r7
   1bd50:	mov	r2, r6
   1bd54:	bl	2079c <main@@Base+0xa6b8>
   1bd58:	cmp	r0, r6
   1bd5c:	beq	1bd90 <main@@Base+0x5cac>
   1bd60:	ldrb	r0, [sl]
   1bd64:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   1bd68:	add	r0, r0, r1
   1bd6c:	strb	r0, [sl]
   1bd70:	ldr	r0, [sp, #16]
   1bd74:	cmp	r0, #0
   1bd78:	mov	r4, r7
   1bd7c:	mov	r9, r8
   1bd80:	bne	1bcf4 <main@@Base+0x5c10>
   1bd84:	b	1bdb0 <main@@Base+0x5ccc>
   1bd88:	mov	r7, r4
   1bd8c:	b	1bdb0 <main@@Base+0x5ccc>
   1bd90:	mov	r7, r6
   1bd94:	b	1bdb0 <main@@Base+0x5ccc>
   1bd98:	mov	r0, r5
   1bd9c:	mov	r1, r7
   1bda0:	mov	r2, r6
   1bda4:	mov	r3, #23
   1bda8:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1bdac:	mov	r7, r0
   1bdb0:	mov	r0, r7
   1bdb4:	sub	sp, fp, #28
   1bdb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdbc:	push	{r4, r5, fp, lr}
   1bdc0:	add	fp, sp, #8
   1bdc4:	mov	r4, r1
   1bdc8:	mov	r5, r0
   1bdcc:	mov	r0, r1
   1bdd0:	bl	207c8 <main@@Base+0xa6e4>
   1bdd4:	strb	r4, [r5]
   1bdd8:	pop	{r4, r5, fp, pc}
   1bddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bde0:	add	fp, sp, #28
   1bde4:	sub	sp, sp, #28
   1bde8:	mov	r6, r3
   1bdec:	mov	r4, r2
   1bdf0:	mov	r8, r0
   1bdf4:	add	r3, sp, #24
   1bdf8:	bl	19f80 <main@@Base+0x3e9c>
   1bdfc:	mov	r1, r0
   1be00:	ldr	r0, [sp, #24]
   1be04:	cmp	r0, #0
   1be08:	beq	1bff0 <main@@Base+0x5f0c>
   1be0c:	str	r6, [sp, #12]
   1be10:	add	r0, r6, #4
   1be14:	str	r0, [sp, #8]
   1be18:	add	r5, sp, #20
   1be1c:	mov	sl, r5
   1be20:	b	1be60 <main@@Base+0x5d7c>
   1be24:	mov	r0, r8
   1be28:	mov	r1, r7
   1be2c:	mov	r2, r4
   1be30:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1be34:	mov	r9, r0
   1be38:	mov	r0, r8
   1be3c:	mov	r1, r9
   1be40:	mov	r2, r4
   1be44:	add	r3, sp, #24
   1be48:	bl	1cf98 <main@@Base+0x6eb4>
   1be4c:	mov	r1, r0
   1be50:	ldr	r0, [sp, #24]
   1be54:	cmp	r0, #0
   1be58:	mov	r5, sl
   1be5c:	beq	1bff0 <main@@Base+0x5f0c>
   1be60:	mov	r0, r8
   1be64:	mov	r2, r4
   1be68:	bl	1a010 <main@@Base+0x3f2c>
   1be6c:	mov	r6, r0
   1be70:	mov	r1, r4
   1be74:	bl	1a054 <main@@Base+0x3f70>
   1be78:	mov	r2, r1
   1be7c:	bfc	r2, #0, #16
   1be80:	movw	r3, #0
   1be84:	movt	r3, #26980	; 0x6964
   1be88:	teq	r2, r3
   1be8c:	bne	1bee0 <main@@Base+0x5dfc>
   1be90:	mov	r0, r8
   1be94:	mov	r1, r6
   1be98:	mov	r2, r4
   1be9c:	mov	r3, #2
   1bea0:	bl	1a058 <main@@Base+0x3f74>
   1bea4:	mov	r7, r0
   1bea8:	cmp	r6, r0
   1beac:	beq	1be24 <main@@Base+0x5d40>
   1beb0:	mov	r0, #0
   1beb4:	str	r0, [sp, #20]
   1beb8:	mov	r0, r8
   1bebc:	mov	r1, r7
   1bec0:	mov	r2, r4
   1bec4:	mov	r3, r5
   1bec8:	bl	1cab8 <main@@Base+0x69d4>
   1becc:	mov	r6, r0
   1bed0:	cmp	r7, r0
   1bed4:	beq	1bf60 <main@@Base+0x5e7c>
   1bed8:	mov	r9, r6
   1bedc:	b	1bf8c <main@@Base+0x5ea8>
   1bee0:	movw	r2, #25445	; 0x6365
   1bee4:	movt	r2, #24942	; 0x616e
   1bee8:	eor	r0, r0, r2
   1beec:	movw	r2, #29556	; 0x7374
   1bef0:	movt	r2, #25705	; 0x6469
   1bef4:	eor	r1, r1, r2
   1bef8:	orrs	r0, r0, r1
   1befc:	bne	1bf54 <main@@Base+0x5e70>
   1bf00:	mov	r0, r8
   1bf04:	mov	r1, r6
   1bf08:	mov	r2, r4
   1bf0c:	mov	r3, #8
   1bf10:	bl	1a058 <main@@Base+0x3f74>
   1bf14:	mov	r7, r0
   1bf18:	cmp	r6, r0
   1bf1c:	beq	1be24 <main@@Base+0x5d40>
   1bf20:	mov	r0, #0
   1bf24:	str	r0, [sp, #16]
   1bf28:	mov	r0, r8
   1bf2c:	mov	r1, r7
   1bf30:	mov	r2, r4
   1bf34:	add	r5, sp, #16
   1bf38:	mov	r3, r5
   1bf3c:	bl	1cab8 <main@@Base+0x69d4>
   1bf40:	mov	r6, r0
   1bf44:	cmp	r7, r0
   1bf48:	beq	1bf9c <main@@Base+0x5eb8>
   1bf4c:	mov	r9, r6
   1bf50:	b	1bfc8 <main@@Base+0x5ee4>
   1bf54:	mov	r0, r8
   1bf58:	mov	r1, r6
   1bf5c:	b	1be2c <main@@Base+0x5d48>
   1bf60:	str	r5, [sp]
   1bf64:	mov	r0, r8
   1bf68:	mov	r1, r6
   1bf6c:	mov	r2, r4
   1bf70:	movw	r3, #41748	; 0xa314
   1bf74:	movt	r3, #4
   1bf78:	bl	1cb48 <main@@Base+0x6a64>
   1bf7c:	mov	r9, r0
   1bf80:	cmp	r0, r6
   1bf84:	cmpne	r9, r4
   1bf88:	beq	1bfd8 <main@@Base+0x5ef4>
   1bf8c:	ldr	r1, [sp, #20]
   1bf90:	ldr	r0, [sp, #12]
   1bf94:	bl	1cc64 <main@@Base+0x6b80>
   1bf98:	b	1be38 <main@@Base+0x5d54>
   1bf9c:	str	r5, [sp]
   1bfa0:	mov	r0, r8
   1bfa4:	mov	r1, r6
   1bfa8:	mov	r2, r4
   1bfac:	movw	r3, #41760	; 0xa320
   1bfb0:	movt	r3, #4
   1bfb4:	bl	1cb48 <main@@Base+0x6a64>
   1bfb8:	mov	r9, r0
   1bfbc:	cmp	r0, r6
   1bfc0:	cmpne	r9, r4
   1bfc4:	beq	1bfd8 <main@@Base+0x5ef4>
   1bfc8:	ldr	r1, [sp, #16]
   1bfcc:	ldr	r0, [sp, #8]
   1bfd0:	bl	1cc64 <main@@Base+0x6b80>
   1bfd4:	b	1be38 <main@@Base+0x5d54>
   1bfd8:	mov	r0, r8
   1bfdc:	mov	r1, r9
   1bfe0:	mov	r2, r4
   1bfe4:	mov	r3, #33	; 0x21
   1bfe8:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1bfec:	mov	r1, r0
   1bff0:	mov	r0, r1
   1bff4:	sub	sp, fp, #28
   1bff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c000:	add	fp, sp, #28
   1c004:	sub	sp, sp, #20
   1c008:	mov	r7, r3
   1c00c:	mov	r4, r2
   1c010:	mov	r6, r1
   1c014:	mov	r5, r0
   1c018:	mov	r0, #0
   1c01c:	str	r0, [r3]
   1c020:	ldr	r0, [r5]
   1c024:	mov	r1, #3
   1c028:	bl	2313c <flatcc_builder_start_table@@Base>
   1c02c:	cmp	r0, #0
   1c030:	bne	1c23c <main@@Base+0x6158>
   1c034:	add	r3, sp, #16
   1c038:	mov	r0, r5
   1c03c:	mov	r1, r6
   1c040:	mov	r2, r4
   1c044:	bl	19f80 <main@@Base+0x3e9c>
   1c048:	mov	r6, r0
   1c04c:	ldr	r0, [sp, #16]
   1c050:	cmp	r0, #0
   1c054:	str	r7, [sp, #8]
   1c058:	beq	1c230 <main@@Base+0x614c>
   1c05c:	movw	r7, #29556	; 0x7374
   1c060:	movt	r7, #28261	; 0x6e65
   1c064:	movw	r8, #0
   1c068:	movt	r8, #25956	; 0x6564
   1c06c:	movw	r9, #29793	; 0x7461
   1c070:	movt	r9, #25697	; 0x6461
   1c074:	add	sl, sp, #16
   1c078:	b	1c0b4 <main@@Base+0x5fd0>
   1c07c:	mov	r0, r5
   1c080:	mov	r1, r6
   1c084:	mov	r2, r4
   1c088:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1c08c:	mov	r6, r0
   1c090:	mov	r0, r5
   1c094:	mov	r1, r6
   1c098:	mov	r2, r4
   1c09c:	mov	r3, sl
   1c0a0:	bl	1cf98 <main@@Base+0x6eb4>
   1c0a4:	mov	r6, r0
   1c0a8:	ldr	r0, [sp, #16]
   1c0ac:	cmp	r0, #0
   1c0b0:	beq	1c230 <main@@Base+0x614c>
   1c0b4:	mov	r0, r5
   1c0b8:	mov	r1, r6
   1c0bc:	mov	r2, r4
   1c0c0:	bl	1a010 <main@@Base+0x3f2c>
   1c0c4:	mov	r6, r0
   1c0c8:	mov	r1, r4
   1c0cc:	bl	1a054 <main@@Base+0x3f70>
   1c0d0:	subs	r2, r0, r8
   1c0d4:	sbcs	r2, r1, r7
   1c0d8:	bcs	1c138 <main@@Base+0x6054>
   1c0dc:	teq	r1, r9
   1c0e0:	bne	1c07c <main@@Base+0x5f98>
   1c0e4:	mov	r0, r5
   1c0e8:	mov	r1, r6
   1c0ec:	mov	r2, r4
   1c0f0:	mov	r3, #4
   1c0f4:	bl	1a058 <main@@Base+0x3f74>
   1c0f8:	mov	r1, r0
   1c0fc:	cmp	r6, r0
   1c100:	beq	1c228 <main@@Base+0x6144>
   1c104:	mov	r0, #0
   1c108:	str	r0, [sp]
   1c10c:	mov	r0, r5
   1c110:	mov	r2, r4
   1c114:	add	r3, sp, #12
   1c118:	bl	27dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1c11c:	mov	r6, r0
   1c120:	ldr	r0, [sp, #12]
   1c124:	cmp	r0, #0
   1c128:	beq	1c23c <main@@Base+0x6158>
   1c12c:	ldr	r0, [r5]
   1c130:	mov	r1, #0
   1c134:	b	1c210 <main@@Base+0x612c>
   1c138:	movw	r2, #29292	; 0x726c
   1c13c:	movt	r2, #117	; 0x75
   1c140:	eor	r2, r2, r1, lsr #8
   1c144:	lsr	r3, r0, #8
   1c148:	orr	r3, r3, r1, lsl #24
   1c14c:	eor	r3, r3, r9
   1c150:	orrs	r2, r3, r2
   1c154:	bne	1c1ac <main@@Base+0x60c8>
   1c158:	mov	r0, r5
   1c15c:	mov	r1, r6
   1c160:	mov	r2, r4
   1c164:	mov	r3, #7
   1c168:	bl	1a058 <main@@Base+0x3f74>
   1c16c:	mov	r1, r0
   1c170:	cmp	r6, r0
   1c174:	beq	1c228 <main@@Base+0x6144>
   1c178:	mov	r0, #1
   1c17c:	str	r0, [sp]
   1c180:	mov	r0, r5
   1c184:	mov	r2, r4
   1c188:	add	r3, sp, #12
   1c18c:	bl	27dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1c190:	mov	r6, r0
   1c194:	ldr	r0, [sp, #12]
   1c198:	cmp	r0, #0
   1c19c:	beq	1c23c <main@@Base+0x6158>
   1c1a0:	ldr	r0, [r5]
   1c1a4:	mov	r1, #1
   1c1a8:	b	1c210 <main@@Base+0x612c>
   1c1ac:	eor	r1, r1, r7
   1c1b0:	bfc	r0, #0, #16
   1c1b4:	eor	r0, r0, r8
   1c1b8:	orrs	r0, r0, r1
   1c1bc:	bne	1c07c <main@@Base+0x5f98>
   1c1c0:	mov	r0, r5
   1c1c4:	mov	r1, r6
   1c1c8:	mov	r2, r4
   1c1cc:	mov	r3, #6
   1c1d0:	bl	1a058 <main@@Base+0x3f74>
   1c1d4:	mov	r1, r0
   1c1d8:	cmp	r6, r0
   1c1dc:	beq	1c228 <main@@Base+0x6144>
   1c1e0:	mov	r0, #0
   1c1e4:	str	r0, [sp]
   1c1e8:	mov	r0, r5
   1c1ec:	mov	r2, r4
   1c1f0:	add	r3, sp, #12
   1c1f4:	bl	27dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1c1f8:	mov	r6, r0
   1c1fc:	ldr	r0, [sp, #12]
   1c200:	cmp	r0, #0
   1c204:	beq	1c23c <main@@Base+0x6158>
   1c208:	ldr	r0, [r5]
   1c20c:	mov	r1, #2
   1c210:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   1c214:	cmp	r0, #0
   1c218:	beq	1c23c <main@@Base+0x6158>
   1c21c:	ldr	r1, [sp, #12]
   1c220:	str	r1, [r0]
   1c224:	b	1c090 <main@@Base+0x5fac>
   1c228:	mov	r0, r5
   1c22c:	b	1c084 <main@@Base+0x5fa0>
   1c230:	ldr	r0, [r5, #24]
   1c234:	cmp	r0, #0
   1c238:	beq	1c260 <main@@Base+0x617c>
   1c23c:	mov	r0, r5
   1c240:	mov	r1, r6
   1c244:	mov	r2, r4
   1c248:	mov	r3, #33	; 0x21
   1c24c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1c250:	mov	r6, r0
   1c254:	mov	r0, r6
   1c258:	sub	sp, fp, #28
   1c25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c260:	ldr	r0, [r5]
   1c264:	bl	23848 <flatcc_builder_end_table@@Base>
   1c268:	ldr	r1, [sp, #8]
   1c26c:	str	r0, [r1]
   1c270:	cmp	r0, #0
   1c274:	bne	1c254 <main@@Base+0x6170>
   1c278:	b	1c23c <main@@Base+0x6158>
   1c27c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c280:	add	fp, sp, #28
   1c284:	sub	sp, sp, #28
   1c288:	mov	r6, r3
   1c28c:	mov	r4, r2
   1c290:	mov	sl, r1
   1c294:	mov	r5, r0
   1c298:	mov	r0, #0
   1c29c:	str	r0, [r3]
   1c2a0:	ldr	r0, [r5]
   1c2a4:	mov	r1, #3
   1c2a8:	bl	2313c <flatcc_builder_start_table@@Base>
   1c2ac:	cmp	r0, #0
   1c2b0:	beq	1c2d8 <main@@Base+0x61f4>
   1c2b4:	mov	r0, r5
   1c2b8:	mov	r1, sl
   1c2bc:	mov	r2, r4
   1c2c0:	mov	r3, #33	; 0x21
   1c2c4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1c2c8:	mov	sl, r0
   1c2cc:	mov	r0, sl
   1c2d0:	sub	sp, fp, #28
   1c2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2d8:	str	r6, [sp, #4]
   1c2dc:	add	r3, sp, #24
   1c2e0:	mov	r0, r5
   1c2e4:	mov	r1, sl
   1c2e8:	mov	r2, r4
   1c2ec:	bl	19f80 <main@@Base+0x3e9c>
   1c2f0:	mov	sl, r0
   1c2f4:	ldr	r0, [sp, #24]
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c5b8 <main@@Base+0x64d4>
   1c300:	movw	r9, #65535	; 0xffff
   1c304:	movt	r9, #26979	; 0x6963
   1c308:	add	r8, sp, #24
   1c30c:	b	1c348 <main@@Base+0x6264>
   1c310:	mov	r0, r5
   1c314:	mov	r1, r6
   1c318:	mov	r2, r4
   1c31c:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1c320:	mov	sl, r0
   1c324:	mov	r0, r5
   1c328:	mov	r1, sl
   1c32c:	mov	r2, r4
   1c330:	mov	r3, r8
   1c334:	bl	1cf98 <main@@Base+0x6eb4>
   1c338:	mov	sl, r0
   1c33c:	ldr	r0, [sp, #24]
   1c340:	cmp	r0, #0
   1c344:	beq	1c5b8 <main@@Base+0x64d4>
   1c348:	mov	r0, r5
   1c34c:	mov	r1, sl
   1c350:	mov	r2, r4
   1c354:	bl	1a010 <main@@Base+0x3f2c>
   1c358:	mov	r6, r0
   1c35c:	mov	r1, r4
   1c360:	bl	1a054 <main@@Base+0x3f70>
   1c364:	cmp	r1, r9
   1c368:	bhi	1c3dc <main@@Base+0x62f8>
   1c36c:	movw	r2, #30062	; 0x756e
   1c370:	movt	r2, #25455	; 0x636f
   1c374:	eor	r1, r1, r2
   1c378:	and	r0, r0, #-16777216	; 0xff000000
   1c37c:	eor	r0, r0, #1946157056	; 0x74000000
   1c380:	orrs	r0, r0, r1
   1c384:	bne	1c310 <main@@Base+0x622c>
   1c388:	mov	r0, r5
   1c38c:	mov	r1, r6
   1c390:	mov	r2, r4
   1c394:	mov	r3, #5
   1c398:	bl	1a058 <main@@Base+0x3f74>
   1c39c:	mov	r7, r0
   1c3a0:	cmp	r6, r0
   1c3a4:	add	sl, sp, #8
   1c3a8:	beq	1c4bc <main@@Base+0x63d8>
   1c3ac:	mov	r0, #0
   1c3b0:	strh	r0, [sp, #8]
   1c3b4:	mov	r0, r5
   1c3b8:	mov	r1, r7
   1c3bc:	mov	r2, r4
   1c3c0:	mov	r3, sl
   1c3c4:	bl	203cc <main@@Base+0xa2e8>
   1c3c8:	mov	r6, r0
   1c3cc:	cmp	r7, r0
   1c3d0:	beq	1c4c8 <main@@Base+0x63e4>
   1c3d4:	mov	sl, r6
   1c3d8:	b	1c4f4 <main@@Base+0x6410>
   1c3dc:	bic	r0, r1, #255	; 0xff
   1c3e0:	movw	r2, #27648	; 0x6c00
   1c3e4:	movt	r2, #30305	; 0x7661
   1c3e8:	teq	r0, r2
   1c3ec:	add	sl, sp, #8
   1c3f0:	bne	1c448 <main@@Base+0x6364>
   1c3f4:	mov	r0, r5
   1c3f8:	mov	r1, r6
   1c3fc:	mov	r2, r4
   1c400:	mov	r3, #3
   1c404:	bl	1a058 <main@@Base+0x3f74>
   1c408:	mov	r7, r0
   1c40c:	cmp	r6, r0
   1c410:	beq	1c4bc <main@@Base+0x63d8>
   1c414:	mov	r0, #0
   1c418:	str	r0, [sp, #12]
   1c41c:	str	r0, [sp, #8]
   1c420:	mov	r0, r5
   1c424:	mov	r1, r7
   1c428:	mov	r2, r4
   1c42c:	mov	r3, sl
   1c430:	bl	1c8d0 <main@@Base+0x67ec>
   1c434:	mov	r6, r0
   1c438:	cmp	r7, r0
   1c43c:	beq	1c534 <main@@Base+0x6450>
   1c440:	mov	sl, r6
   1c444:	b	1c560 <main@@Base+0x647c>
   1c448:	bfc	r1, #0, #16
   1c44c:	movw	r0, #0
   1c450:	movt	r0, #26980	; 0x6964
   1c454:	teq	r1, r0
   1c458:	bne	1c310 <main@@Base+0x622c>
   1c45c:	mov	r0, r5
   1c460:	mov	r1, r6
   1c464:	mov	r2, r4
   1c468:	mov	r3, #2
   1c46c:	bl	1a058 <main@@Base+0x3f74>
   1c470:	mov	r1, r0
   1c474:	cmp	r6, r0
   1c478:	beq	1c5b0 <main@@Base+0x64cc>
   1c47c:	mov	r0, r5
   1c480:	mov	r2, r4
   1c484:	add	r3, sp, #20
   1c488:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   1c48c:	mov	sl, r0
   1c490:	ldr	r0, [sp, #20]
   1c494:	cmp	r0, #0
   1c498:	beq	1c2b4 <main@@Base+0x61d0>
   1c49c:	ldr	r0, [r5]
   1c4a0:	mov	r1, #0
   1c4a4:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   1c4a8:	cmp	r0, #0
   1c4ac:	beq	1c2b4 <main@@Base+0x61d0>
   1c4b0:	ldr	r1, [sp, #20]
   1c4b4:	str	r1, [r0]
   1c4b8:	b	1c324 <main@@Base+0x6240>
   1c4bc:	mov	r0, r5
   1c4c0:	mov	r1, r7
   1c4c4:	b	1c318 <main@@Base+0x6234>
   1c4c8:	str	sl, [sp]
   1c4cc:	mov	r0, r5
   1c4d0:	mov	r1, r6
   1c4d4:	mov	r2, r4
   1c4d8:	movw	r3, #41772	; 0xa32c
   1c4dc:	movt	r3, #4
   1c4e0:	bl	2045c <main@@Base+0xa378>
   1c4e4:	mov	sl, r0
   1c4e8:	cmp	r0, r6
   1c4ec:	cmpne	sl, r4
   1c4f0:	beq	1c2b4 <main@@Base+0x61d0>
   1c4f4:	ldrh	r6, [sp, #8]
   1c4f8:	cmp	r6, #0
   1c4fc:	bne	1c50c <main@@Base+0x6428>
   1c500:	ldrb	r0, [r5, #8]
   1c504:	tst	r0, #2
   1c508:	beq	1c324 <main@@Base+0x6240>
   1c50c:	ldr	r0, [r5]
   1c510:	mov	r1, #2
   1c514:	mov	r2, #2
   1c518:	mov	r3, #2
   1c51c:	bl	23f38 <flatcc_builder_table_add@@Base>
   1c520:	cmp	r0, #0
   1c524:	beq	1c2b4 <main@@Base+0x61d0>
   1c528:	mov	r1, r6
   1c52c:	bl	20578 <main@@Base+0xa494>
   1c530:	b	1c324 <main@@Base+0x6240>
   1c534:	str	sl, [sp]
   1c538:	mov	r0, r5
   1c53c:	mov	r1, r6
   1c540:	mov	r2, r4
   1c544:	movw	r3, #41784	; 0xa338
   1c548:	movt	r3, #4
   1c54c:	bl	1c964 <main@@Base+0x6880>
   1c550:	mov	sl, r0
   1c554:	cmp	r0, r6
   1c558:	cmpne	sl, r4
   1c55c:	beq	1c2b4 <main@@Base+0x61d0>
   1c560:	mov	r7, r9
   1c564:	ldr	r6, [sp, #8]
   1c568:	ldr	r9, [sp, #12]
   1c56c:	orrs	r0, r6, r9
   1c570:	bne	1c580 <main@@Base+0x649c>
   1c574:	ldrb	r0, [r5, #8]
   1c578:	tst	r0, #2
   1c57c:	beq	1c5a8 <main@@Base+0x64c4>
   1c580:	ldr	r0, [r5]
   1c584:	mov	r1, #1
   1c588:	mov	r2, #8
   1c58c:	mov	r3, #8
   1c590:	bl	23f38 <flatcc_builder_table_add@@Base>
   1c594:	cmp	r0, #0
   1c598:	beq	1c2b4 <main@@Base+0x61d0>
   1c59c:	mov	r2, r6
   1c5a0:	mov	r3, r9
   1c5a4:	bl	1ca90 <main@@Base+0x69ac>
   1c5a8:	mov	r9, r7
   1c5ac:	b	1c324 <main@@Base+0x6240>
   1c5b0:	mov	r0, r5
   1c5b4:	b	1c318 <main@@Base+0x6234>
   1c5b8:	ldr	r0, [r5, #24]
   1c5bc:	cmp	r0, #0
   1c5c0:	bne	1c2b4 <main@@Base+0x61d0>
   1c5c4:	ldr	r0, [r5]
   1c5c8:	bl	23848 <flatcc_builder_end_table@@Base>
   1c5cc:	ldr	r1, [sp, #4]
   1c5d0:	str	r0, [r1]
   1c5d4:	cmp	r0, #0
   1c5d8:	bne	1c2cc <main@@Base+0x61e8>
   1c5dc:	b	1c2b4 <main@@Base+0x61d0>
   1c5e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5e4:	add	fp, sp, #28
   1c5e8:	sub	sp, sp, #28
   1c5ec:	mov	r8, r3
   1c5f0:	mov	r7, r2
   1c5f4:	mov	r5, r0
   1c5f8:	mov	r0, #0
   1c5fc:	str	r0, [sp, #24]
   1c600:	ldr	sl, [fp, #8]
   1c604:	str	r0, [sl]
   1c608:	mov	r0, r5
   1c60c:	bl	1da60 <main@@Base+0x797c>
   1c610:	mov	r6, r0
   1c614:	cmp	r0, r7
   1c618:	beq	1c6b8 <main@@Base+0x65d4>
   1c61c:	mov	r9, r8
   1c620:	b	1c634 <main@@Base+0x6550>
   1c624:	ldr	r0, [r9, #4]!
   1c628:	cmp	r0, #0
   1c62c:	mov	r6, r4
   1c630:	beq	1c6c8 <main@@Base+0x65e4>
   1c634:	ldr	r4, [r9]
   1c638:	add	r0, sp, #16
   1c63c:	str	r0, [sp]
   1c640:	add	r0, sp, #8
   1c644:	str	r0, [sp, #4]
   1c648:	mov	r0, r5
   1c64c:	mov	r1, r6
   1c650:	mov	r2, r7
   1c654:	add	r3, sp, #12
   1c658:	blx	r4
   1c65c:	mov	r4, r0
   1c660:	cmp	r0, r7
   1c664:	beq	1c6e0 <main@@Base+0x65fc>
   1c668:	cmp	r4, r6
   1c66c:	beq	1c624 <main@@Base+0x6540>
   1c670:	add	r3, sp, #12
   1c674:	ldm	r3, {r1, r2, r3}
   1c678:	add	r0, sp, #24
   1c67c:	str	r0, [sp]
   1c680:	mov	r0, r4
   1c684:	bl	207cc <main@@Base+0xa6e8>
   1c688:	cmp	r4, r7
   1c68c:	beq	1c6c0 <main@@Base+0x65dc>
   1c690:	vldr	s0, [sp, #24]
   1c694:	vldr	s2, [sl]
   1c698:	vadd.f32	s0, s0, s2
   1c69c:	vstr	s0, [sl]
   1c6a0:	ldr	r0, [sp, #8]
   1c6a4:	cmp	r0, #0
   1c6a8:	mov	r6, r4
   1c6ac:	mov	r9, r8
   1c6b0:	bne	1c634 <main@@Base+0x6550>
   1c6b4:	b	1c6e0 <main@@Base+0x65fc>
   1c6b8:	mov	r4, r6
   1c6bc:	b	1c6e0 <main@@Base+0x65fc>
   1c6c0:	mov	r4, r7
   1c6c4:	b	1c6e0 <main@@Base+0x65fc>
   1c6c8:	mov	r0, r5
   1c6cc:	mov	r1, r4
   1c6d0:	mov	r2, r7
   1c6d4:	mov	r3, #23
   1c6d8:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1c6dc:	mov	r4, r0
   1c6e0:	mov	r0, r4
   1c6e4:	sub	sp, fp, #28
   1c6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6ec:	push	{r4, sl, fp, lr}
   1c6f0:	add	fp, sp, #8
   1c6f4:	mov	r4, r0
   1c6f8:	bl	20808 <main@@Base+0xa724>
   1c6fc:	vstr	s0, [r4]
   1c700:	pop	{r4, sl, fp, pc}
   1c704:	push	{r4, r5, r6, r7, fp, lr}
   1c708:	add	fp, sp, #16
   1c70c:	sub	sp, sp, #24
   1c710:	mov	r7, r1
   1c714:	mov	r6, r0
   1c718:	mov	r0, #0
   1c71c:	str	r0, [sp, #20]
   1c720:	str	r0, [sp, #16]
   1c724:	str	r0, [sp, #12]
   1c728:	str	r0, [r3]
   1c72c:	cmp	r1, r2
   1c730:	beq	1c788 <main@@Base+0x66a4>
   1c734:	mov	r5, r3
   1c738:	mov	r4, r2
   1c73c:	add	r0, sp, #16
   1c740:	str	r0, [sp]
   1c744:	add	r3, sp, #12
   1c748:	mov	r0, r6
   1c74c:	mov	r1, r7
   1c750:	bl	27cac <flatcc_json_parser_integer@@Base>
   1c754:	mov	r1, r0
   1c758:	cmp	r0, r7
   1c75c:	beq	1c784 <main@@Base+0x66a0>
   1c760:	ldr	r3, [sp, #12]
   1c764:	ldr	r0, [sp, #16]
   1c768:	ldr	r2, [sp, #20]
   1c76c:	stm	sp, {r0, r2, r5}
   1c770:	mov	r0, r6
   1c774:	mov	r2, r4
   1c778:	bl	2080c <main@@Base+0xa728>
   1c77c:	mov	r7, r0
   1c780:	b	1c788 <main@@Base+0x66a4>
   1c784:	mov	r7, r1
   1c788:	mov	r0, r7
   1c78c:	sub	sp, fp, #16
   1c790:	pop	{r4, r5, r6, r7, fp, pc}
   1c794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c798:	add	fp, sp, #28
   1c79c:	sub	sp, sp, #36	; 0x24
   1c7a0:	mov	r8, r3
   1c7a4:	mov	r6, r2
   1c7a8:	mov	r5, r0
   1c7ac:	mov	r0, #0
   1c7b0:	str	r0, [sp, #32]
   1c7b4:	ldr	sl, [fp, #8]
   1c7b8:	str	r0, [sl]
   1c7bc:	mov	r0, r5
   1c7c0:	bl	1da60 <main@@Base+0x797c>
   1c7c4:	mov	r4, r0
   1c7c8:	cmp	r0, r6
   1c7cc:	beq	1c87c <main@@Base+0x6798>
   1c7d0:	mov	r9, r8
   1c7d4:	b	1c7e8 <main@@Base+0x6704>
   1c7d8:	ldr	r0, [r9, #4]!
   1c7dc:	cmp	r0, #0
   1c7e0:	mov	r4, r7
   1c7e4:	beq	1c88c <main@@Base+0x67a8>
   1c7e8:	ldr	r7, [r9]
   1c7ec:	add	r0, sp, #24
   1c7f0:	str	r0, [sp]
   1c7f4:	add	r0, sp, #16
   1c7f8:	str	r0, [sp, #4]
   1c7fc:	mov	r0, r5
   1c800:	mov	r1, r4
   1c804:	mov	r2, r6
   1c808:	add	r3, sp, #20
   1c80c:	blx	r7
   1c810:	mov	r7, r0
   1c814:	cmp	r0, r6
   1c818:	beq	1c8a4 <main@@Base+0x67c0>
   1c81c:	cmp	r7, r4
   1c820:	beq	1c7d8 <main@@Base+0x66f4>
   1c824:	ldr	r3, [sp, #20]
   1c828:	ldr	r0, [sp, #24]
   1c82c:	ldr	r1, [sp, #28]
   1c830:	stm	sp, {r0, r1}
   1c834:	add	r0, sp, #32
   1c838:	str	r0, [sp, #8]
   1c83c:	mov	r0, r5
   1c840:	mov	r1, r7
   1c844:	mov	r2, r6
   1c848:	bl	2080c <main@@Base+0xa728>
   1c84c:	cmp	r0, r6
   1c850:	beq	1c884 <main@@Base+0x67a0>
   1c854:	ldr	r0, [sl]
   1c858:	ldr	r1, [sp, #32]
   1c85c:	add	r0, r0, r1
   1c860:	str	r0, [sl]
   1c864:	ldr	r0, [sp, #16]
   1c868:	cmp	r0, #0
   1c86c:	mov	r4, r7
   1c870:	mov	r9, r8
   1c874:	bne	1c7e8 <main@@Base+0x6704>
   1c878:	b	1c8a4 <main@@Base+0x67c0>
   1c87c:	mov	r7, r4
   1c880:	b	1c8a4 <main@@Base+0x67c0>
   1c884:	mov	r7, r6
   1c888:	b	1c8a4 <main@@Base+0x67c0>
   1c88c:	mov	r0, r5
   1c890:	mov	r1, r7
   1c894:	mov	r2, r6
   1c898:	mov	r3, #23
   1c89c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1c8a0:	mov	r7, r0
   1c8a4:	mov	r0, r7
   1c8a8:	sub	sp, fp, #28
   1c8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8b0:	push	{r4, r5, fp, lr}
   1c8b4:	add	fp, sp, #8
   1c8b8:	mov	r4, r1
   1c8bc:	mov	r5, r0
   1c8c0:	mov	r0, r1
   1c8c4:	bl	20868 <main@@Base+0xa784>
   1c8c8:	str	r4, [r5]
   1c8cc:	pop	{r4, r5, fp, pc}
   1c8d0:	push	{r4, r5, r6, r7, fp, lr}
   1c8d4:	add	fp, sp, #16
   1c8d8:	sub	sp, sp, #24
   1c8dc:	mov	r7, r1
   1c8e0:	mov	r6, r0
   1c8e4:	mov	r0, #0
   1c8e8:	str	r0, [sp, #20]
   1c8ec:	str	r0, [sp, #16]
   1c8f0:	str	r0, [sp, #12]
   1c8f4:	str	r0, [r3]
   1c8f8:	str	r0, [r3, #4]
   1c8fc:	cmp	r1, r2
   1c900:	beq	1c958 <main@@Base+0x6874>
   1c904:	mov	r5, r3
   1c908:	mov	r4, r2
   1c90c:	add	r0, sp, #16
   1c910:	str	r0, [sp]
   1c914:	add	r3, sp, #12
   1c918:	mov	r0, r6
   1c91c:	mov	r1, r7
   1c920:	bl	27cac <flatcc_json_parser_integer@@Base>
   1c924:	mov	r1, r0
   1c928:	cmp	r0, r7
   1c92c:	beq	1c954 <main@@Base+0x6870>
   1c930:	ldr	r3, [sp, #12]
   1c934:	ldr	r0, [sp, #16]
   1c938:	ldr	r2, [sp, #20]
   1c93c:	stm	sp, {r0, r2, r5}
   1c940:	mov	r0, r6
   1c944:	mov	r2, r4
   1c948:	bl	2086c <main@@Base+0xa788>
   1c94c:	mov	r7, r0
   1c950:	b	1c958 <main@@Base+0x6874>
   1c954:	mov	r7, r1
   1c958:	mov	r0, r7
   1c95c:	sub	sp, fp, #16
   1c960:	pop	{r4, r5, r6, r7, fp, pc}
   1c964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c968:	add	fp, sp, #28
   1c96c:	sub	sp, sp, #44	; 0x2c
   1c970:	mov	r8, r3
   1c974:	mov	r6, r2
   1c978:	mov	r5, r0
   1c97c:	mov	r0, #0
   1c980:	str	r0, [sp, #36]	; 0x24
   1c984:	str	r0, [sp, #32]
   1c988:	ldr	sl, [fp, #8]
   1c98c:	str	r0, [sl]
   1c990:	str	r0, [sl, #4]
   1c994:	mov	r0, r5
   1c998:	bl	1da60 <main@@Base+0x797c>
   1c99c:	mov	r4, r0
   1c9a0:	cmp	r0, r6
   1c9a4:	beq	1ca5c <main@@Base+0x6978>
   1c9a8:	mov	r9, r8
   1c9ac:	b	1c9c0 <main@@Base+0x68dc>
   1c9b0:	ldr	r0, [r9, #4]!
   1c9b4:	cmp	r0, #0
   1c9b8:	mov	r4, r7
   1c9bc:	beq	1ca6c <main@@Base+0x6988>
   1c9c0:	ldr	r7, [r9]
   1c9c4:	add	r0, sp, #24
   1c9c8:	str	r0, [sp]
   1c9cc:	add	r0, sp, #16
   1c9d0:	str	r0, [sp, #4]
   1c9d4:	mov	r0, r5
   1c9d8:	mov	r1, r4
   1c9dc:	mov	r2, r6
   1c9e0:	add	r3, sp, #20
   1c9e4:	blx	r7
   1c9e8:	mov	r7, r0
   1c9ec:	cmp	r0, r6
   1c9f0:	beq	1ca84 <main@@Base+0x69a0>
   1c9f4:	cmp	r7, r4
   1c9f8:	beq	1c9b0 <main@@Base+0x68cc>
   1c9fc:	ldr	r3, [sp, #20]
   1ca00:	ldr	r0, [sp, #24]
   1ca04:	ldr	r1, [sp, #28]
   1ca08:	stm	sp, {r0, r1}
   1ca0c:	add	r0, sp, #32
   1ca10:	str	r0, [sp, #8]
   1ca14:	mov	r0, r5
   1ca18:	mov	r1, r7
   1ca1c:	mov	r2, r6
   1ca20:	bl	2086c <main@@Base+0xa788>
   1ca24:	cmp	r0, r6
   1ca28:	beq	1ca64 <main@@Base+0x6980>
   1ca2c:	ldrd	r0, [sl]
   1ca30:	ldr	r2, [sp, #32]
   1ca34:	ldr	r3, [sp, #36]	; 0x24
   1ca38:	adds	r0, r0, r2
   1ca3c:	adc	r1, r1, r3
   1ca40:	strd	r0, [sl]
   1ca44:	ldr	r0, [sp, #16]
   1ca48:	cmp	r0, #0
   1ca4c:	mov	r4, r7
   1ca50:	mov	r9, r8
   1ca54:	bne	1c9c0 <main@@Base+0x68dc>
   1ca58:	b	1ca84 <main@@Base+0x69a0>
   1ca5c:	mov	r7, r4
   1ca60:	b	1ca84 <main@@Base+0x69a0>
   1ca64:	mov	r7, r6
   1ca68:	b	1ca84 <main@@Base+0x69a0>
   1ca6c:	mov	r0, r5
   1ca70:	mov	r1, r7
   1ca74:	mov	r2, r6
   1ca78:	mov	r3, #23
   1ca7c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1ca80:	mov	r7, r0
   1ca84:	mov	r0, r7
   1ca88:	sub	sp, fp, #28
   1ca8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca90:	push	{r4, r6, r7, sl, fp, lr}
   1ca94:	add	fp, sp, #16
   1ca98:	mov	r1, r3
   1ca9c:	mov	r6, r2
   1caa0:	mov	r4, r0
   1caa4:	mov	r0, r2
   1caa8:	bl	208c4 <main@@Base+0xa7e0>
   1caac:	mov	r7, r1
   1cab0:	strd	r6, [r4]
   1cab4:	pop	{r4, r6, r7, sl, fp, pc}
   1cab8:	push	{r4, r5, r6, r7, fp, lr}
   1cabc:	add	fp, sp, #16
   1cac0:	sub	sp, sp, #24
   1cac4:	mov	r7, r1
   1cac8:	mov	r6, r0
   1cacc:	mov	r0, #0
   1cad0:	str	r0, [sp, #20]
   1cad4:	str	r0, [sp, #16]
   1cad8:	str	r0, [sp, #12]
   1cadc:	str	r0, [r3]
   1cae0:	cmp	r1, r2
   1cae4:	beq	1cb3c <main@@Base+0x6a58>
   1cae8:	mov	r5, r3
   1caec:	mov	r4, r2
   1caf0:	add	r0, sp, #16
   1caf4:	str	r0, [sp]
   1caf8:	add	r3, sp, #12
   1cafc:	mov	r0, r6
   1cb00:	mov	r1, r7
   1cb04:	bl	27cac <flatcc_json_parser_integer@@Base>
   1cb08:	mov	r1, r0
   1cb0c:	cmp	r0, r7
   1cb10:	beq	1cb38 <main@@Base+0x6a54>
   1cb14:	ldr	r3, [sp, #12]
   1cb18:	ldr	r0, [sp, #16]
   1cb1c:	ldr	r2, [sp, #20]
   1cb20:	stm	sp, {r0, r2, r5}
   1cb24:	mov	r0, r6
   1cb28:	mov	r2, r4
   1cb2c:	bl	208c8 <main@@Base+0xa7e4>
   1cb30:	mov	r7, r0
   1cb34:	b	1cb3c <main@@Base+0x6a58>
   1cb38:	mov	r7, r1
   1cb3c:	mov	r0, r7
   1cb40:	sub	sp, fp, #16
   1cb44:	pop	{r4, r5, r6, r7, fp, pc}
   1cb48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb4c:	add	fp, sp, #28
   1cb50:	sub	sp, sp, #36	; 0x24
   1cb54:	mov	r8, r3
   1cb58:	mov	r6, r2
   1cb5c:	mov	r5, r0
   1cb60:	mov	r0, #0
   1cb64:	str	r0, [sp, #32]
   1cb68:	ldr	sl, [fp, #8]
   1cb6c:	str	r0, [sl]
   1cb70:	mov	r0, r5
   1cb74:	bl	1da60 <main@@Base+0x797c>
   1cb78:	mov	r4, r0
   1cb7c:	cmp	r0, r6
   1cb80:	beq	1cc30 <main@@Base+0x6b4c>
   1cb84:	mov	r9, r8
   1cb88:	b	1cb9c <main@@Base+0x6ab8>
   1cb8c:	ldr	r0, [r9, #4]!
   1cb90:	cmp	r0, #0
   1cb94:	mov	r4, r7
   1cb98:	beq	1cc40 <main@@Base+0x6b5c>
   1cb9c:	ldr	r7, [r9]
   1cba0:	add	r0, sp, #24
   1cba4:	str	r0, [sp]
   1cba8:	add	r0, sp, #16
   1cbac:	str	r0, [sp, #4]
   1cbb0:	mov	r0, r5
   1cbb4:	mov	r1, r4
   1cbb8:	mov	r2, r6
   1cbbc:	add	r3, sp, #20
   1cbc0:	blx	r7
   1cbc4:	mov	r7, r0
   1cbc8:	cmp	r0, r6
   1cbcc:	beq	1cc58 <main@@Base+0x6b74>
   1cbd0:	cmp	r7, r4
   1cbd4:	beq	1cb8c <main@@Base+0x6aa8>
   1cbd8:	ldr	r3, [sp, #20]
   1cbdc:	ldr	r0, [sp, #24]
   1cbe0:	ldr	r1, [sp, #28]
   1cbe4:	stm	sp, {r0, r1}
   1cbe8:	add	r0, sp, #32
   1cbec:	str	r0, [sp, #8]
   1cbf0:	mov	r0, r5
   1cbf4:	mov	r1, r7
   1cbf8:	mov	r2, r6
   1cbfc:	bl	208c8 <main@@Base+0xa7e4>
   1cc00:	cmp	r0, r6
   1cc04:	beq	1cc38 <main@@Base+0x6b54>
   1cc08:	ldr	r0, [sl]
   1cc0c:	ldr	r1, [sp, #32]
   1cc10:	add	r0, r0, r1
   1cc14:	str	r0, [sl]
   1cc18:	ldr	r0, [sp, #16]
   1cc1c:	cmp	r0, #0
   1cc20:	mov	r4, r7
   1cc24:	mov	r9, r8
   1cc28:	bne	1cb9c <main@@Base+0x6ab8>
   1cc2c:	b	1cc58 <main@@Base+0x6b74>
   1cc30:	mov	r7, r4
   1cc34:	b	1cc58 <main@@Base+0x6b74>
   1cc38:	mov	r7, r6
   1cc3c:	b	1cc58 <main@@Base+0x6b74>
   1cc40:	mov	r0, r5
   1cc44:	mov	r1, r7
   1cc48:	mov	r2, r6
   1cc4c:	mov	r3, #23
   1cc50:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1cc54:	mov	r7, r0
   1cc58:	mov	r0, r7
   1cc5c:	sub	sp, fp, #28
   1cc60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc64:	push	{r4, r5, fp, lr}
   1cc68:	add	fp, sp, #8
   1cc6c:	mov	r4, r1
   1cc70:	mov	r5, r0
   1cc74:	mov	r0, r1
   1cc78:	bl	20900 <main@@Base+0xa81c>
   1cc7c:	str	r4, [r5]
   1cc80:	pop	{r4, r5, fp, pc}
   1cc84:	push	{r4, r5, r6, r7, fp, lr}
   1cc88:	add	fp, sp, #16
   1cc8c:	sub	sp, sp, #24
   1cc90:	mov	r7, r1
   1cc94:	mov	r6, r0
   1cc98:	mov	r0, #0
   1cc9c:	str	r0, [sp, #20]
   1cca0:	str	r0, [sp, #16]
   1cca4:	str	r0, [sp, #12]
   1cca8:	str	r0, [r3]
   1ccac:	str	r0, [r3, #4]
   1ccb0:	cmp	r1, r2
   1ccb4:	beq	1cd0c <main@@Base+0x6c28>
   1ccb8:	mov	r5, r3
   1ccbc:	mov	r4, r2
   1ccc0:	add	r0, sp, #16
   1ccc4:	str	r0, [sp]
   1ccc8:	add	r3, sp, #12
   1cccc:	mov	r0, r6
   1ccd0:	mov	r1, r7
   1ccd4:	bl	27cac <flatcc_json_parser_integer@@Base>
   1ccd8:	mov	r1, r0
   1ccdc:	cmp	r0, r7
   1cce0:	beq	1cd08 <main@@Base+0x6c24>
   1cce4:	ldr	r3, [sp, #12]
   1cce8:	ldr	r0, [sp, #16]
   1ccec:	ldr	r2, [sp, #20]
   1ccf0:	stm	sp, {r0, r2, r5}
   1ccf4:	mov	r0, r6
   1ccf8:	mov	r2, r4
   1ccfc:	bl	20904 <main@@Base+0xa820>
   1cd00:	mov	r7, r0
   1cd04:	b	1cd0c <main@@Base+0x6c28>
   1cd08:	mov	r7, r1
   1cd0c:	mov	r0, r7
   1cd10:	sub	sp, fp, #16
   1cd14:	pop	{r4, r5, r6, r7, fp, pc}
   1cd18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd1c:	add	fp, sp, #28
   1cd20:	sub	sp, sp, #44	; 0x2c
   1cd24:	mov	r8, r3
   1cd28:	mov	r6, r2
   1cd2c:	mov	r5, r0
   1cd30:	mov	r0, #0
   1cd34:	str	r0, [sp, #36]	; 0x24
   1cd38:	str	r0, [sp, #32]
   1cd3c:	ldr	sl, [fp, #8]
   1cd40:	str	r0, [sl]
   1cd44:	str	r0, [sl, #4]
   1cd48:	mov	r0, r5
   1cd4c:	bl	1da60 <main@@Base+0x797c>
   1cd50:	mov	r4, r0
   1cd54:	cmp	r0, r6
   1cd58:	beq	1ce10 <main@@Base+0x6d2c>
   1cd5c:	mov	r9, r8
   1cd60:	b	1cd74 <main@@Base+0x6c90>
   1cd64:	ldr	r0, [r9, #4]!
   1cd68:	cmp	r0, #0
   1cd6c:	mov	r4, r7
   1cd70:	beq	1ce20 <main@@Base+0x6d3c>
   1cd74:	ldr	r7, [r9]
   1cd78:	add	r0, sp, #24
   1cd7c:	str	r0, [sp]
   1cd80:	add	r0, sp, #16
   1cd84:	str	r0, [sp, #4]
   1cd88:	mov	r0, r5
   1cd8c:	mov	r1, r4
   1cd90:	mov	r2, r6
   1cd94:	add	r3, sp, #20
   1cd98:	blx	r7
   1cd9c:	mov	r7, r0
   1cda0:	cmp	r0, r6
   1cda4:	beq	1ce38 <main@@Base+0x6d54>
   1cda8:	cmp	r7, r4
   1cdac:	beq	1cd64 <main@@Base+0x6c80>
   1cdb0:	ldr	r3, [sp, #20]
   1cdb4:	ldr	r0, [sp, #24]
   1cdb8:	ldr	r1, [sp, #28]
   1cdbc:	stm	sp, {r0, r1}
   1cdc0:	add	r0, sp, #32
   1cdc4:	str	r0, [sp, #8]
   1cdc8:	mov	r0, r5
   1cdcc:	mov	r1, r7
   1cdd0:	mov	r2, r6
   1cdd4:	bl	20904 <main@@Base+0xa820>
   1cdd8:	cmp	r0, r6
   1cddc:	beq	1ce18 <main@@Base+0x6d34>
   1cde0:	ldrd	r0, [sl]
   1cde4:	ldr	r2, [sp, #32]
   1cde8:	ldr	r3, [sp, #36]	; 0x24
   1cdec:	adds	r0, r0, r2
   1cdf0:	adc	r1, r1, r3
   1cdf4:	strd	r0, [sl]
   1cdf8:	ldr	r0, [sp, #16]
   1cdfc:	cmp	r0, #0
   1ce00:	mov	r4, r7
   1ce04:	mov	r9, r8
   1ce08:	bne	1cd74 <main@@Base+0x6c90>
   1ce0c:	b	1ce38 <main@@Base+0x6d54>
   1ce10:	mov	r7, r4
   1ce14:	b	1ce38 <main@@Base+0x6d54>
   1ce18:	mov	r7, r6
   1ce1c:	b	1ce38 <main@@Base+0x6d54>
   1ce20:	mov	r0, r5
   1ce24:	mov	r1, r7
   1ce28:	mov	r2, r6
   1ce2c:	mov	r3, #23
   1ce30:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1ce34:	mov	r7, r0
   1ce38:	mov	r0, r7
   1ce3c:	sub	sp, fp, #28
   1ce40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce44:	push	{r4, r6, r7, sl, fp, lr}
   1ce48:	add	fp, sp, #16
   1ce4c:	mov	r1, r3
   1ce50:	mov	r6, r2
   1ce54:	mov	r4, r0
   1ce58:	mov	r0, r2
   1ce5c:	bl	20928 <main@@Base+0xa844>
   1ce60:	mov	r7, r1
   1ce64:	strd	r6, [r4]
   1ce68:	pop	{r4, r6, r7, sl, fp, pc}
   1ce6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce70:	add	fp, sp, #28
   1ce74:	sub	sp, sp, #36	; 0x24
   1ce78:	mov	r8, r3
   1ce7c:	mov	r7, r2
   1ce80:	mov	r5, r0
   1ce84:	mov	r0, #0
   1ce88:	str	r0, [sp, #28]
   1ce8c:	str	r0, [sp, #24]
   1ce90:	ldr	sl, [fp, #8]
   1ce94:	str	r0, [sl]
   1ce98:	str	r0, [sl, #4]
   1ce9c:	mov	r0, r5
   1cea0:	bl	1da60 <main@@Base+0x797c>
   1cea4:	mov	r6, r0
   1cea8:	cmp	r0, r7
   1ceac:	beq	1cf4c <main@@Base+0x6e68>
   1ceb0:	mov	r9, r8
   1ceb4:	b	1cec8 <main@@Base+0x6de4>
   1ceb8:	ldr	r0, [r9, #4]!
   1cebc:	cmp	r0, #0
   1cec0:	mov	r6, r4
   1cec4:	beq	1cf5c <main@@Base+0x6e78>
   1cec8:	ldr	r4, [r9]
   1cecc:	add	r0, sp, #16
   1ced0:	str	r0, [sp]
   1ced4:	add	r0, sp, #8
   1ced8:	str	r0, [sp, #4]
   1cedc:	mov	r0, r5
   1cee0:	mov	r1, r6
   1cee4:	mov	r2, r7
   1cee8:	add	r3, sp, #12
   1ceec:	blx	r4
   1cef0:	mov	r4, r0
   1cef4:	cmp	r0, r7
   1cef8:	beq	1cf74 <main@@Base+0x6e90>
   1cefc:	cmp	r4, r6
   1cf00:	beq	1ceb8 <main@@Base+0x6dd4>
   1cf04:	add	r3, sp, #12
   1cf08:	ldm	r3, {r1, r2, r3}
   1cf0c:	add	r0, sp, #24
   1cf10:	str	r0, [sp]
   1cf14:	mov	r0, r4
   1cf18:	bl	2092c <main@@Base+0xa848>
   1cf1c:	cmp	r4, r7
   1cf20:	beq	1cf54 <main@@Base+0x6e70>
   1cf24:	vldr	d16, [sp, #24]
   1cf28:	vldr	d17, [sl]
   1cf2c:	vadd.f64	d16, d16, d17
   1cf30:	vstr	d16, [sl]
   1cf34:	ldr	r0, [sp, #8]
   1cf38:	cmp	r0, #0
   1cf3c:	mov	r6, r4
   1cf40:	mov	r9, r8
   1cf44:	bne	1cec8 <main@@Base+0x6de4>
   1cf48:	b	1cf74 <main@@Base+0x6e90>
   1cf4c:	mov	r4, r6
   1cf50:	b	1cf74 <main@@Base+0x6e90>
   1cf54:	mov	r4, r7
   1cf58:	b	1cf74 <main@@Base+0x6e90>
   1cf5c:	mov	r0, r5
   1cf60:	mov	r1, r4
   1cf64:	mov	r2, r7
   1cf68:	mov	r3, #23
   1cf6c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1cf70:	mov	r4, r0
   1cf74:	mov	r0, r4
   1cf78:	sub	sp, fp, #28
   1cf7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf80:	push	{r4, sl, fp, lr}
   1cf84:	add	fp, sp, #8
   1cf88:	mov	r4, r0
   1cf8c:	bl	2096c <main@@Base+0xa888>
   1cf90:	vstr	d0, [r4]
   1cf94:	pop	{r4, sl, fp, pc}
   1cf98:	push	{r4, r5, r6, sl, fp, lr}
   1cf9c:	add	fp, sp, #16
   1cfa0:	mov	r6, r3
   1cfa4:	mov	r4, r2
   1cfa8:	mov	r5, r0
   1cfac:	bl	1d058 <main@@Base+0x6f74>
   1cfb0:	mov	r1, r0
   1cfb4:	cmp	r0, r4
   1cfb8:	beq	1cffc <main@@Base+0x6f18>
   1cfbc:	ldrb	r0, [r1]
   1cfc0:	cmp	r0, #44	; 0x2c
   1cfc4:	bne	1d004 <main@@Base+0x6f20>
   1cfc8:	add	r1, r1, #1
   1cfcc:	mov	r0, r5
   1cfd0:	mov	r2, r4
   1cfd4:	bl	1d058 <main@@Base+0x6f74>
   1cfd8:	mov	r1, r0
   1cfdc:	cmp	r0, r4
   1cfe0:	beq	1d02c <main@@Base+0x6f48>
   1cfe4:	ldrb	r0, [r1]
   1cfe8:	cmp	r0, #125	; 0x7d
   1cfec:	bne	1d048 <main@@Base+0x6f64>
   1cff0:	mov	r0, #0
   1cff4:	str	r0, [r6]
   1cff8:	b	1d018 <main@@Base+0x6f34>
   1cffc:	mov	r0, #0
   1d000:	b	1d04c <main@@Base+0x6f68>
   1d004:	mov	r0, #0
   1d008:	str	r0, [r6]
   1d00c:	ldrb	r0, [r1]
   1d010:	cmp	r0, #125	; 0x7d
   1d014:	bne	1d034 <main@@Base+0x6f50>
   1d018:	add	r1, r1, #1
   1d01c:	mov	r0, r5
   1d020:	mov	r2, r4
   1d024:	pop	{r4, r5, r6, sl, fp, lr}
   1d028:	b	1d058 <main@@Base+0x6f74>
   1d02c:	mov	r0, #0
   1d030:	str	r0, [r6]
   1d034:	mov	r0, r5
   1d038:	mov	r2, r4
   1d03c:	mov	r3, #10
   1d040:	pop	{r4, r5, r6, sl, fp, lr}
   1d044:	b	26998 <flatcc_json_parser_set_error@@Base>
   1d048:	mov	r0, #1
   1d04c:	str	r0, [r6]
   1d050:	mov	r0, r1
   1d054:	pop	{r4, r5, r6, sl, fp, pc}
   1d058:	sub	r3, r2, r1
   1d05c:	cmp	r3, #2
   1d060:	blt	1d08c <main@@Base+0x6fa8>
   1d064:	ldrb	r3, [r1]
   1d068:	cmp	r3, #32
   1d06c:	movhi	r0, r1
   1d070:	bxhi	lr
   1d074:	bne	1d08c <main@@Base+0x6fa8>
   1d078:	mov	ip, r1
   1d07c:	ldrb	r3, [ip, #1]!
   1d080:	cmp	r3, #32
   1d084:	movhi	r0, ip
   1d088:	bxhi	lr
   1d08c:	b	26a20 <flatcc_json_parser_space_ext@@Base>
   1d090:	mov	ip, r0
   1d094:	sub	r0, r1, r0
   1d098:	cmp	r0, #8
   1d09c:	movcs	r0, #8
   1d0a0:	sub	r3, r0, #1
   1d0a4:	mov	r1, #0
   1d0a8:	mov	r0, #0
   1d0ac:	cmp	r3, #7
   1d0b0:	bxhi	lr
   1d0b4:	add	r2, pc, #0
   1d0b8:	ldr	pc, [r2, r3, lsl #2]
   1d0bc:	andeq	sp, r1, r0, lsl r1
   1d0c0:	andeq	sp, r1, r8, lsl #2
   1d0c4:	andeq	sp, r1, r0, lsl #2
   1d0c8:	strdeq	sp, [r1], -r8
   1d0cc:	strdeq	sp, [r1], -r0
   1d0d0:	andeq	sp, r1, r8, ror #1
   1d0d4:	andeq	sp, r1, r0, ror #1
   1d0d8:	ldrdeq	sp, [r1], -ip
   1d0dc:	ldrb	r0, [ip, #7]
   1d0e0:	ldrb	r2, [ip, #6]
   1d0e4:	orr	r0, r0, r2, lsl #8
   1d0e8:	ldrb	r2, [ip, #5]
   1d0ec:	orr	r0, r0, r2, lsl #16
   1d0f0:	ldrb	r2, [ip, #4]
   1d0f4:	orr	r0, r0, r2, lsl #24
   1d0f8:	ldrb	r2, [ip, #3]
   1d0fc:	orr	r1, r2, r1
   1d100:	ldrb	r2, [ip, #2]
   1d104:	orr	r1, r1, r2, lsl #8
   1d108:	ldrb	r2, [ip, #1]
   1d10c:	orr	r1, r1, r2, lsl #16
   1d110:	ldrb	r2, [ip]
   1d114:	orr	r1, r1, r2, lsl #24
   1d118:	bx	lr
   1d11c:	sub	r1, r1, r0
   1d120:	cmp	r1, r2
   1d124:	bxle	lr
   1d128:	mov	r1, r0
   1d12c:	ldrb	r2, [r1, r2]!
   1d130:	cmp	r2, #46	; 0x2e
   1d134:	addeq	r0, r1, #1
   1d138:	bx	lr
   1d13c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d140:	add	fp, sp, #24
   1d144:	sub	sp, sp, #8
   1d148:	mov	r8, r3
   1d14c:	mov	r6, r2
   1d150:	mov	r5, r1
   1d154:	mov	r7, r0
   1d158:	mov	r0, r1
   1d15c:	mov	r1, r2
   1d160:	bl	1a054 <main@@Base+0x3f70>
   1d164:	movw	r2, #20577	; 0x5061
   1d168:	movt	r2, #18798	; 0x496e
   1d16c:	eor	r2, r1, r2
   1d170:	movw	r3, #28276	; 0x6e74
   1d174:	movt	r3, #29285	; 0x7265
   1d178:	eor	r0, r0, r3
   1d17c:	orrs	r0, r0, r2
   1d180:	ldr	r9, [fp, #12]
   1d184:	bne	1d1f8 <main@@Base+0x7114>
   1d188:	add	r0, r5, #8
   1d18c:	mov	r1, r6
   1d190:	bl	1a054 <main@@Base+0x3f70>
   1d194:	movw	r2, #28005	; 0x6d65
   1d198:	movt	r2, #20065	; 0x4e61
   1d19c:	eor	r1, r1, r2
   1d1a0:	movw	r2, #24931	; 0x6163
   1d1a4:	movt	r2, #29552	; 0x7370
   1d1a8:	eor	r0, r0, r2
   1d1ac:	orrs	r0, r0, r1
   1d1b0:	bne	1d248 <main@@Base+0x7164>
   1d1b4:	add	r4, r5, #16
   1d1b8:	mov	r0, r4
   1d1bc:	mov	r1, r6
   1d1c0:	bl	1a054 <main@@Base+0x3f70>
   1d1c4:	and	r0, r1, #-16777216	; 0xff000000
   1d1c8:	teq	r0, #1694498816	; 0x65000000
   1d1cc:	bne	1d248 <main@@Base+0x7164>
   1d1d0:	str	r9, [sp]
   1d1d4:	mov	r9, #1
   1d1d8:	mov	r0, r7
   1d1dc:	mov	r1, r4
   1d1e0:	mov	r2, r6
   1d1e4:	mov	r3, #1
   1d1e8:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d1ec:	cmp	r0, r4
   1d1f0:	bne	1d22c <main@@Base+0x7148>
   1d1f4:	b	1d248 <main@@Base+0x7164>
   1d1f8:	movw	r0, #20037	; 0x4e45
   1d1fc:	movt	r0, #20047	; 0x4e4f
   1d200:	teq	r1, r0
   1d204:	bne	1d248 <main@@Base+0x7164>
   1d208:	str	r9, [sp]
   1d20c:	mov	r0, r7
   1d210:	mov	r1, r5
   1d214:	mov	r2, r6
   1d218:	mov	r3, #4
   1d21c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d220:	cmp	r0, r5
   1d224:	beq	1d248 <main@@Base+0x7164>
   1d228:	mov	r9, #0
   1d22c:	mov	r1, #0
   1d230:	mov	r5, r0
   1d234:	ldr	r0, [fp, #8]
   1d238:	str	r9, [r0]
   1d23c:	str	r1, [r0, #4]
   1d240:	mov	r0, #0
   1d244:	str	r0, [r8]
   1d248:	mov	r0, r5
   1d24c:	sub	sp, fp, #24
   1d250:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d254:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d258:	add	fp, sp, #24
   1d25c:	sub	sp, sp, #8
   1d260:	mov	r9, r3
   1d264:	mov	r6, r2
   1d268:	mov	r5, r1
   1d26c:	mov	r7, r0
   1d270:	mov	r0, r1
   1d274:	mov	r1, r2
   1d278:	bl	1a054 <main@@Base+0x3f70>
   1d27c:	ldr	r2, [fp, #12]
   1d280:	ldr	r8, [fp, #8]
   1d284:	movw	r3, #30769	; 0x7831
   1d288:	movt	r3, #26725	; 0x6865
   1d28c:	cmp	r1, r3
   1d290:	bhi	1d2c8 <main@@Base+0x71e4>
   1d294:	teq	r1, r3
   1d298:	bne	1d370 <main@@Base+0x728c>
   1d29c:	str	r2, [sp]
   1d2a0:	mov	r0, r7
   1d2a4:	mov	r1, r5
   1d2a8:	mov	r2, r6
   1d2ac:	mov	r3, #4
   1d2b0:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d2b4:	cmp	r0, r5
   1d2b8:	beq	1d370 <main@@Base+0x728c>
   1d2bc:	mov	r1, #0
   1d2c0:	mov	r2, #3
   1d2c4:	b	1d360 <main@@Base+0x727c>
   1d2c8:	movw	r3, #26725	; 0x6865
   1d2cc:	eor	r3, r3, r1, lsr #16
   1d2d0:	lsr	r0, r0, #16
   1d2d4:	orr	r0, r0, r1, lsl #16
   1d2d8:	movw	r4, #25959	; 0x6567
   1d2dc:	movt	r4, #30830	; 0x786e
   1d2e0:	eor	r0, r0, r4
   1d2e4:	orrs	r0, r0, r3
   1d2e8:	bne	1d324 <main@@Base+0x7240>
   1d2ec:	str	r2, [sp]
   1d2f0:	mov	r0, r7
   1d2f4:	mov	r1, r5
   1d2f8:	mov	r2, r6
   1d2fc:	mov	r3, #6
   1d300:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d304:	cmp	r0, r5
   1d308:	beq	1d370 <main@@Base+0x728c>
   1d30c:	mvn	r1, #0
   1d310:	mvn	r2, #1
   1d314:	str	r2, [r8]
   1d318:	str	r1, [r8, #4]
   1d31c:	mov	r1, #1
   1d320:	b	1d368 <main@@Base+0x7284>
   1d324:	movw	r0, #30770	; 0x7832
   1d328:	movt	r0, #26725	; 0x6865
   1d32c:	teq	r1, r0
   1d330:	bne	1d370 <main@@Base+0x728c>
   1d334:	str	r2, [sp]
   1d338:	mov	r0, r7
   1d33c:	mov	r1, r5
   1d340:	mov	r2, r6
   1d344:	mov	r3, #4
   1d348:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d34c:	cmp	r0, r5
   1d350:	beq	1d370 <main@@Base+0x728c>
   1d354:	mov	r1, #0
   1d358:	movw	r2, #48815	; 0xbeaf
   1d35c:	movt	r2, #32431	; 0x7eaf
   1d360:	str	r2, [r8]
   1d364:	str	r1, [r8, #4]
   1d368:	str	r1, [r9]
   1d36c:	mov	r5, r0
   1d370:	mov	r0, r5
   1d374:	sub	sp, fp, #24
   1d378:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d37c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d380:	add	fp, sp, #24
   1d384:	sub	sp, sp, #8
   1d388:	mov	r9, r3
   1d38c:	mov	r6, r2
   1d390:	mov	r5, r1
   1d394:	mov	r7, r0
   1d398:	mov	r0, r1
   1d39c:	mov	r1, r2
   1d3a0:	bl	1a054 <main@@Base+0x3f70>
   1d3a4:	ldr	ip, [fp, #12]
   1d3a8:	ldr	r8, [fp, #8]
   1d3ac:	movw	r3, #29745	; 0x7431
   1d3b0:	movt	r3, #26990	; 0x696e
   1d3b4:	cmp	r1, r3
   1d3b8:	bhi	1d3f0 <main@@Base+0x730c>
   1d3bc:	teq	r1, r3
   1d3c0:	bne	1d4e4 <main@@Base+0x7400>
   1d3c4:	str	ip, [sp]
   1d3c8:	mov	r0, r7
   1d3cc:	mov	r1, r5
   1d3d0:	mov	r2, r6
   1d3d4:	mov	r3, #4
   1d3d8:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d3dc:	cmp	r0, r5
   1d3e0:	beq	1d4e4 <main@@Base+0x7400>
   1d3e4:	mov	r1, #0
   1d3e8:	mov	r2, #2
   1d3ec:	b	1d444 <main@@Base+0x7360>
   1d3f0:	movw	r4, #29806	; 0x746e
   1d3f4:	movt	r4, #26990	; 0x696e
   1d3f8:	movw	r3, #0
   1d3fc:	movt	r3, #25959	; 0x6567
   1d400:	subs	r2, r0, r3
   1d404:	sbcs	r2, r1, r4
   1d408:	bcs	1d450 <main@@Base+0x736c>
   1d40c:	movw	r0, #29746	; 0x7432
   1d410:	movt	r0, #26990	; 0x696e
   1d414:	teq	r1, r0
   1d418:	bne	1d4e4 <main@@Base+0x7400>
   1d41c:	str	ip, [sp]
   1d420:	mov	r0, r7
   1d424:	mov	r1, r5
   1d428:	mov	r2, r6
   1d42c:	mov	r3, #4
   1d430:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d434:	cmp	r0, r5
   1d438:	beq	1d4e4 <main@@Base+0x7400>
   1d43c:	mov	r1, #0
   1d440:	mov	r2, #42	; 0x2a
   1d444:	str	r2, [r8]
   1d448:	str	r1, [r8, #4]
   1d44c:	b	1d4dc <main@@Base+0x73f8>
   1d450:	eor	r1, r1, r4
   1d454:	add	r2, r3, #12800	; 0x3200
   1d458:	bic	r4, r0, #255	; 0xff
   1d45c:	eor	r2, r4, r2
   1d460:	orrs	r2, r2, r1
   1d464:	bne	1d498 <main@@Base+0x73b4>
   1d468:	str	ip, [sp]
   1d46c:	mov	r0, r7
   1d470:	mov	r1, r5
   1d474:	mov	r2, r6
   1d478:	mov	r3, #7
   1d47c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d480:	cmp	r0, r5
   1d484:	beq	1d4e4 <main@@Base+0x7400>
   1d488:	mvn	r1, #0
   1d48c:	mvn	r2, #1
   1d490:	orr	r2, r2, #1
   1d494:	b	1d4d0 <main@@Base+0x73ec>
   1d498:	bfc	r0, #0, #16
   1d49c:	eor	r0, r0, r3
   1d4a0:	orrs	r0, r0, r1
   1d4a4:	bne	1d4e4 <main@@Base+0x7400>
   1d4a8:	str	ip, [sp]
   1d4ac:	mov	r0, r7
   1d4b0:	mov	r1, r5
   1d4b4:	mov	r2, r6
   1d4b8:	mov	r3, #6
   1d4bc:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d4c0:	cmp	r0, r5
   1d4c4:	beq	1d4e4 <main@@Base+0x7400>
   1d4c8:	mvn	r1, #0
   1d4cc:	mvn	r2, #1
   1d4d0:	str	r2, [r8]
   1d4d4:	str	r1, [r8, #4]
   1d4d8:	mov	r1, #1
   1d4dc:	str	r1, [r9]
   1d4e0:	mov	r5, r0
   1d4e4:	mov	r0, r5
   1d4e8:	sub	sp, fp, #24
   1d4ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d4f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d4f4:	add	fp, sp, #24
   1d4f8:	sub	sp, sp, #8
   1d4fc:	mov	r4, r3
   1d500:	mov	r6, r2
   1d504:	mov	r5, r1
   1d508:	mov	r7, r0
   1d50c:	mov	r0, r1
   1d510:	mov	r1, r2
   1d514:	bl	1a054 <main@@Base+0x3f70>
   1d518:	ldr	r0, [fp, #12]
   1d51c:	ldr	r8, [fp, #8]
   1d520:	movw	r2, #26417	; 0x6731
   1d524:	movt	r2, #28261	; 0x6e65
   1d528:	cmp	r1, r2
   1d52c:	bhi	1d564 <main@@Base+0x7480>
   1d530:	teq	r1, r2
   1d534:	bne	1d5f4 <main@@Base+0x7510>
   1d538:	str	r0, [sp]
   1d53c:	mov	r0, r7
   1d540:	mov	r1, r5
   1d544:	mov	r2, r6
   1d548:	mov	r3, #4
   1d54c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d550:	cmp	r0, r5
   1d554:	beq	1d5f4 <main@@Base+0x7510>
   1d558:	mvn	r1, #0
   1d55c:	mvn	r2, #11
   1d560:	b	1d5e0 <main@@Base+0x74fc>
   1d564:	movw	r2, #26418	; 0x6732
   1d568:	movt	r2, #28261	; 0x6e65
   1d56c:	teq	r1, r2
   1d570:	beq	1d5b4 <main@@Base+0x74d0>
   1d574:	movw	r2, #26419	; 0x6733
   1d578:	movt	r2, #28261	; 0x6e65
   1d57c:	teq	r1, r2
   1d580:	bne	1d5f4 <main@@Base+0x7510>
   1d584:	str	r0, [sp]
   1d588:	mov	r0, r7
   1d58c:	mov	r1, r5
   1d590:	mov	r2, r6
   1d594:	mov	r3, #4
   1d598:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d59c:	cmp	r0, r5
   1d5a0:	beq	1d5f4 <main@@Base+0x7510>
   1d5a4:	mvn	r1, #0
   1d5a8:	mvn	r2, #11
   1d5ac:	orr	r2, r2, #2
   1d5b0:	b	1d5e0 <main@@Base+0x74fc>
   1d5b4:	str	r0, [sp]
   1d5b8:	mov	r0, r7
   1d5bc:	mov	r1, r5
   1d5c0:	mov	r2, r6
   1d5c4:	mov	r3, #4
   1d5c8:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d5cc:	cmp	r0, r5
   1d5d0:	beq	1d5f4 <main@@Base+0x7510>
   1d5d4:	mvn	r1, #0
   1d5d8:	mvn	r2, #11
   1d5dc:	orr	r2, r2, #1
   1d5e0:	str	r2, [r8]
   1d5e4:	str	r1, [r8, #4]
   1d5e8:	mov	r1, #1
   1d5ec:	str	r1, [r4]
   1d5f0:	mov	r5, r0
   1d5f4:	mov	r0, r5
   1d5f8:	sub	sp, fp, #24
   1d5fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d600:	push	{r4, r5, r6, r7, fp, lr}
   1d604:	add	fp, sp, #16
   1d608:	sub	sp, sp, #8
   1d60c:	mov	r4, r3
   1d610:	mov	r6, r2
   1d614:	mov	r5, r1
   1d618:	mov	r7, r0
   1d61c:	mov	r0, r1
   1d620:	mov	r1, r2
   1d624:	bl	1a054 <main@@Base+0x3f70>
   1d628:	and	r0, r1, #-16777216	; 0xff000000
   1d62c:	teq	r0, #2013265920	; 0x78000000
   1d630:	bne	1d670 <main@@Base+0x758c>
   1d634:	ldr	r0, [fp, #12]
   1d638:	str	r0, [sp]
   1d63c:	mov	r0, r7
   1d640:	mov	r1, r5
   1d644:	mov	r2, r6
   1d648:	mov	r3, #1
   1d64c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d650:	cmp	r0, r5
   1d654:	beq	1d670 <main@@Base+0x758c>
   1d658:	ldr	r1, [fp, #8]
   1d65c:	mov	r2, #0
   1d660:	str	r2, [r1]
   1d664:	str	r2, [r1, #4]
   1d668:	str	r2, [r4]
   1d66c:	mov	r5, r0
   1d670:	mov	r0, r5
   1d674:	sub	sp, fp, #16
   1d678:	pop	{r4, r5, r6, r7, fp, pc}
   1d67c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d680:	add	fp, sp, #28
   1d684:	sub	sp, sp, #4
   1d688:	mov	r9, r3
   1d68c:	mov	r6, r2
   1d690:	mov	r5, r1
   1d694:	mov	sl, r0
   1d698:	mov	r0, r1
   1d69c:	mov	r1, r2
   1d6a0:	bl	1a054 <main@@Base+0x3f70>
   1d6a4:	ldr	lr, [fp, #12]
   1d6a8:	ldr	r8, [fp, #8]
   1d6ac:	movw	r2, #20036	; 0x4e44
   1d6b0:	movt	r2, #20047	; 0x4e4f
   1d6b4:	cmp	r1, r2
   1d6b8:	bhi	1d720 <main@@Base+0x763c>
   1d6bc:	and	r2, r0, #-16777216	; 0xff000000
   1d6c0:	movw	r4, #28523	; 0x6f6b
   1d6c4:	movt	r4, #17007	; 0x426f
   1d6c8:	movw	r3, #28160	; 0x6e00
   1d6cc:	movt	r3, #18017	; 0x4661
   1d6d0:	subs	r7, r0, r3
   1d6d4:	sbcs	r7, r1, r4
   1d6d8:	bcs	1d774 <main@@Base+0x7690>
   1d6dc:	movw	r0, #27756	; 0x6c6c
   1d6e0:	movt	r0, #16997	; 0x4265
   1d6e4:	eor	r0, r1, r0
   1d6e8:	eor	r1, r2, #1694498816	; 0x65000000
   1d6ec:	orrs	r0, r1, r0
   1d6f0:	bne	1d8b0 <main@@Base+0x77cc>
   1d6f4:	str	lr, [sp]
   1d6f8:	mov	r0, sl
   1d6fc:	mov	r1, r5
   1d700:	mov	r2, r6
   1d704:	mov	r3, #5
   1d708:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d70c:	cmp	r0, r5
   1d710:	beq	1d8b0 <main@@Base+0x77cc>
   1d714:	mov	r1, #0
   1d718:	mov	r2, #9
   1d71c:	b	1d8a0 <main@@Base+0x77bc>
   1d720:	movw	r3, #26725	; 0x6865
   1d724:	movt	r3, #20340	; 0x4f74
   1d728:	mvn	r2, #-1912602624	; 0x8e000000
   1d72c:	subs	r2, r2, r0
   1d730:	sbcs	r2, r3, r1
   1d734:	bcc	1d7b8 <main@@Base+0x76d4>
   1d738:	movw	r0, #20037	; 0x4e45
   1d73c:	movt	r0, #20047	; 0x4e4f
   1d740:	teq	r1, r0
   1d744:	bne	1d8b0 <main@@Base+0x77cc>
   1d748:	str	lr, [sp]
   1d74c:	mov	r0, sl
   1d750:	mov	r1, r5
   1d754:	mov	r2, r6
   1d758:	mov	r3, #4
   1d75c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d760:	cmp	r0, r5
   1d764:	beq	1d8b0 <main@@Base+0x77cc>
   1d768:	mov	r1, #0
   1d76c:	str	r1, [r8]
   1d770:	b	1d8a4 <main@@Base+0x77c0>
   1d774:	movw	r7, #19553	; 0x4c61
   1d778:	movt	r7, #19829	; 0x4d75
   1d77c:	eor	r7, r1, r7
   1d780:	eor	r2, r2, #1845493760	; 0x6e000000
   1d784:	orrs	r2, r2, r7
   1d788:	bne	1d814 <main@@Base+0x7730>
   1d78c:	str	lr, [sp]
   1d790:	mov	r0, sl
   1d794:	mov	r1, r5
   1d798:	mov	r2, r6
   1d79c:	mov	r3, #5
   1d7a0:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d7a4:	cmp	r0, r5
   1d7a8:	beq	1d8b0 <main@@Base+0x77cc>
   1d7ac:	mov	r1, #0
   1d7b0:	mov	r2, #2
   1d7b4:	b	1d8a0 <main@@Base+0x77bc>
   1d7b8:	movw	ip, #28789	; 0x7075
   1d7bc:	movt	ip, #21089	; 0x5261
   1d7c0:	movw	r4, #25964	; 0x656c
   1d7c4:	movt	r4, #28282	; 0x6e7a
   1d7c8:	subs	r2, r0, r4
   1d7cc:	sbcs	r2, r1, ip
   1d7d0:	bcs	1d854 <main@@Base+0x7770>
   1d7d4:	eor	r1, r1, r3
   1d7d8:	and	r0, r0, #-16777216	; 0xff000000
   1d7dc:	eor	r0, r0, #1912602624	; 0x72000000
   1d7e0:	orrs	r0, r0, r1
   1d7e4:	bne	1d8b0 <main@@Base+0x77cc>
   1d7e8:	str	lr, [sp]
   1d7ec:	mov	r0, sl
   1d7f0:	mov	r1, r5
   1d7f4:	mov	r2, r6
   1d7f8:	mov	r3, #5
   1d7fc:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d800:	cmp	r0, r5
   1d804:	beq	1d8b0 <main@@Base+0x77cc>
   1d808:	mov	r1, #0
   1d80c:	mov	r2, #11
   1d810:	b	1d8a0 <main@@Base+0x77bc>
   1d814:	eor	r1, r1, r4
   1d818:	bic	r0, r0, #255	; 0xff
   1d81c:	eor	r0, r0, r3
   1d820:	orrs	r0, r0, r1
   1d824:	bne	1d8b0 <main@@Base+0x77cc>
   1d828:	str	lr, [sp]
   1d82c:	mov	r0, sl
   1d830:	mov	r1, r5
   1d834:	mov	r2, r6
   1d838:	mov	r3, #7
   1d83c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d840:	cmp	r0, r5
   1d844:	beq	1d8b0 <main@@Base+0x77cc>
   1d848:	mov	r1, #0
   1d84c:	mov	r2, #10
   1d850:	b	1d8a0 <main@@Base+0x77bc>
   1d854:	movw	r2, #21870	; 0x556e
   1d858:	eor	r2, r2, r1, lsr #16
   1d85c:	lsr	r3, r0, #16
   1d860:	orr	r3, r3, r1, lsl #16
   1d864:	movw	r7, #25956	; 0x6564
   1d868:	movt	r7, #30067	; 0x7573
   1d86c:	eor	r3, r3, r7
   1d870:	orrs	r2, r3, r2
   1d874:	bne	1d8bc <main@@Base+0x77d8>
   1d878:	str	lr, [sp]
   1d87c:	mov	r0, sl
   1d880:	mov	r1, r5
   1d884:	mov	r2, r6
   1d888:	mov	r3, #6
   1d88c:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d890:	cmp	r0, r5
   1d894:	beq	1d8b0 <main@@Base+0x77cc>
   1d898:	mov	r1, #0
   1d89c:	mov	r2, #255	; 0xff
   1d8a0:	str	r2, [r8]
   1d8a4:	str	r1, [r8, #4]
   1d8a8:	str	r1, [r9]
   1d8ac:	mov	r5, r0
   1d8b0:	mov	r0, r5
   1d8b4:	sub	sp, fp, #28
   1d8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8bc:	eor	r0, r0, r4
   1d8c0:	eor	r1, r1, ip
   1d8c4:	orrs	r0, r0, r1
   1d8c8:	bne	1d8b0 <main@@Base+0x77cc>
   1d8cc:	str	lr, [sp]
   1d8d0:	mov	r4, #8
   1d8d4:	mov	r0, sl
   1d8d8:	mov	r1, r5
   1d8dc:	mov	r2, r6
   1d8e0:	mov	r3, #8
   1d8e4:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d8e8:	cmp	r0, r5
   1d8ec:	beq	1d8b0 <main@@Base+0x77cc>
   1d8f0:	mov	r5, #0
   1d8f4:	strd	r4, [r8]
   1d8f8:	str	r5, [r9]
   1d8fc:	b	1d8ac <main@@Base+0x77c8>
   1d900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d904:	add	fp, sp, #28
   1d908:	sub	sp, sp, #4
   1d90c:	mov	r8, r3
   1d910:	mov	r6, r2
   1d914:	mov	r5, r1
   1d918:	mov	r9, r0
   1d91c:	mov	r0, r1
   1d920:	mov	r1, r2
   1d924:	bl	1a054 <main@@Base+0x3f70>
   1d928:	mov	r7, r0
   1d92c:	mov	r4, r1
   1d930:	bic	r0, r1, #255	; 0xff
   1d934:	ldr	sl, [fp, #12]
   1d938:	movw	r1, #28416	; 0x6f00
   1d93c:	movt	r1, #18031	; 0x466f
   1d940:	teq	r0, r1
   1d944:	mov	r0, r5
   1d948:	bne	1d978 <main@@Base+0x7894>
   1d94c:	str	sl, [sp]
   1d950:	mov	r0, r9
   1d954:	mov	r1, r5
   1d958:	mov	r2, r6
   1d95c:	mov	r3, #3
   1d960:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d964:	cmp	r0, r5
   1d968:	beq	1d978 <main@@Base+0x7894>
   1d96c:	mov	r3, #0
   1d970:	mov	r2, #17
   1d974:	b	1d9e4 <main@@Base+0x7900>
   1d978:	movw	r1, #25942	; 0x6556
   1d97c:	movt	r1, #30052	; 0x7564
   1d980:	eor	r1, r7, r1
   1d984:	movw	r2, #25452	; 0x636c
   1d988:	movt	r2, #18798	; 0x496e
   1d98c:	eor	r2, r4, r2
   1d990:	orrs	r1, r1, r2
   1d994:	bne	1d9f8 <main@@Base+0x7914>
   1d998:	add	r4, r0, #8
   1d99c:	mov	r0, r4
   1d9a0:	mov	r1, r6
   1d9a4:	bl	1a054 <main@@Base+0x3f70>
   1d9a8:	bfc	r1, #0, #16
   1d9ac:	movw	r0, #0
   1d9b0:	movt	r0, #24940	; 0x616c
   1d9b4:	teq	r1, r0
   1d9b8:	bne	1d9f8 <main@@Base+0x7914>
   1d9bc:	str	sl, [sp]
   1d9c0:	mov	r0, r9
   1d9c4:	mov	r1, r4
   1d9c8:	mov	r2, r6
   1d9cc:	mov	r3, #2
   1d9d0:	bl	26fe4 <flatcc_json_parser_match_constant@@Base>
   1d9d4:	cmp	r0, r4
   1d9d8:	beq	1d9f8 <main@@Base+0x7914>
   1d9dc:	mov	r2, #0
   1d9e0:	mov	r3, #0
   1d9e4:	mov	r5, r0
   1d9e8:	ldr	r0, [fp, #8]
   1d9ec:	strd	r2, [r0]
   1d9f0:	mov	r0, #0
   1d9f4:	str	r0, [r8]
   1d9f8:	mov	r0, r5
   1d9fc:	sub	sp, fp, #28
   1da00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da04:	push	{r4, sl, fp, lr}
   1da08:	add	fp, sp, #8
   1da0c:	ldr	r4, [fp, #12]
   1da10:	ldr	ip, [fp, #8]
   1da14:	ldr	lr, [fp, #16]
   1da18:	cmp	r3, #0
   1da1c:	beq	1da38 <main@@Base+0x7954>
   1da20:	subs	r3, ip, #129	; 0x81
   1da24:	sbcs	r3, r4, #0
   1da28:	bcc	1da50 <main@@Base+0x796c>
   1da2c:	mov	r3, #8
   1da30:	pop	{r4, sl, fp, lr}
   1da34:	b	26998 <flatcc_json_parser_set_error@@Base>
   1da38:	subs	r3, ip, #128	; 0x80
   1da3c:	sbcs	r3, r4, #0
   1da40:	bcc	1da54 <main@@Base+0x7970>
   1da44:	mov	r3, #7
   1da48:	pop	{r4, sl, fp, lr}
   1da4c:	b	26998 <flatcc_json_parser_set_error@@Base>
   1da50:	rsb	ip, ip, #0
   1da54:	strb	ip, [lr]
   1da58:	mov	r0, r1
   1da5c:	pop	{r4, sl, fp, pc}
   1da60:	push	{r4, r5, fp, lr}
   1da64:	add	fp, sp, #8
   1da68:	mov	r4, r2
   1da6c:	mov	r5, r0
   1da70:	bl	1a010 <main@@Base+0x3f2c>
   1da74:	mov	r1, r0
   1da78:	ldr	r0, [r5, #12]
   1da7c:	cmp	r0, #0
   1da80:	movne	r0, r1
   1da84:	popne	{r4, r5, fp, pc}
   1da88:	mov	r0, r5
   1da8c:	mov	r2, r4
   1da90:	pop	{r4, r5, fp, lr}
   1da94:	b	1d058 <main@@Base+0x6f74>
   1da98:	bx	lr
   1da9c:	push	{fp, lr}
   1daa0:	mov	fp, sp
   1daa4:	cmp	r3, #0
   1daa8:	beq	1dab8 <main@@Base+0x79d4>
   1daac:	mov	r3, #8
   1dab0:	pop	{fp, lr}
   1dab4:	b	26998 <flatcc_json_parser_set_error@@Base>
   1dab8:	ldr	ip, [fp, #12]
   1dabc:	ldr	lr, [fp, #8]
   1dac0:	subs	r3, lr, #256	; 0x100
   1dac4:	sbcs	r3, ip, #0
   1dac8:	bcc	1dad8 <main@@Base+0x79f4>
   1dacc:	mov	r3, #7
   1dad0:	pop	{fp, lr}
   1dad4:	b	26998 <flatcc_json_parser_set_error@@Base>
   1dad8:	ldr	r0, [fp, #16]
   1dadc:	strb	lr, [r0]
   1dae0:	mov	r0, r1
   1dae4:	pop	{fp, pc}
   1dae8:	bx	lr
   1daec:	push	{r4, sl, fp, lr}
   1daf0:	add	fp, sp, #8
   1daf4:	ldr	r4, [fp, #12]
   1daf8:	ldr	ip, [fp, #8]
   1dafc:	ldr	lr, [fp, #16]
   1db00:	cmp	r3, #0
   1db04:	beq	1db24 <main@@Base+0x7a40>
   1db08:	movw	r3, #32769	; 0x8001
   1db0c:	subs	r3, ip, r3
   1db10:	sbcs	r3, r4, #0
   1db14:	bcc	1db3c <main@@Base+0x7a58>
   1db18:	mov	r3, #8
   1db1c:	pop	{r4, sl, fp, lr}
   1db20:	b	26998 <flatcc_json_parser_set_error@@Base>
   1db24:	subs	r3, ip, #32768	; 0x8000
   1db28:	sbcs	r3, r4, #0
   1db2c:	bcc	1db40 <main@@Base+0x7a5c>
   1db30:	mov	r3, #7
   1db34:	pop	{r4, sl, fp, lr}
   1db38:	b	26998 <flatcc_json_parser_set_error@@Base>
   1db3c:	rsb	ip, ip, #0
   1db40:	strh	ip, [lr]
   1db44:	mov	r0, r1
   1db48:	pop	{r4, sl, fp, pc}
   1db4c:	bx	lr
   1db50:	push	{r4, r5, r6, sl, fp, lr}
   1db54:	add	fp, sp, #16
   1db58:	mov	r4, r2
   1db5c:	mov	r5, r1
   1db60:	mov	r6, r0
   1db64:	sub	r0, r2, r1
   1db68:	cmp	r0, #4
   1db6c:	blt	1db8c <main@@Base+0x7aa8>
   1db70:	movw	r1, #33062	; 0x8126
   1db74:	movt	r1, #3
   1db78:	mov	r0, r5
   1db7c:	mov	r2, #4
   1db80:	bl	14ebc <bcmp@plt>
   1db84:	cmp	r0, #0
   1db88:	beq	1dba4 <main@@Base+0x7ac0>
   1db8c:	mov	r0, r6
   1db90:	mov	r1, r5
   1db94:	mov	r2, r4
   1db98:	mov	r3, #26
   1db9c:	pop	{r4, r5, r6, sl, fp, lr}
   1dba0:	b	26998 <flatcc_json_parser_set_error@@Base>
   1dba4:	add	r0, r5, #4
   1dba8:	pop	{r4, r5, r6, sl, fp, pc}
   1dbac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb0:	add	fp, sp, #28
   1dbb4:	sub	sp, sp, #20
   1dbb8:	mov	r5, r3
   1dbbc:	mov	r4, r2
   1dbc0:	mov	r8, r1
   1dbc4:	mov	r9, r0
   1dbc8:	mov	r0, #0
   1dbcc:	str	r0, [r3]
   1dbd0:	ldr	r0, [r9]
   1dbd4:	mov	r1, #4
   1dbd8:	bl	2313c <flatcc_builder_start_table@@Base>
   1dbdc:	cmp	r0, #0
   1dbe0:	beq	1dc08 <main@@Base+0x7b24>
   1dbe4:	mov	r0, r9
   1dbe8:	mov	r1, r8
   1dbec:	mov	r2, r4
   1dbf0:	mov	r3, #33	; 0x21
   1dbf4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1dbf8:	mov	r8, r0
   1dbfc:	mov	r0, r8
   1dc00:	sub	sp, fp, #28
   1dc04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc08:	add	r3, sp, #16
   1dc0c:	mov	r0, r9
   1dc10:	mov	r1, r8
   1dc14:	mov	r2, r4
   1dc18:	bl	19f80 <main@@Base+0x3e9c>
   1dc1c:	mov	r8, r0
   1dc20:	ldr	r0, [sp, #16]
   1dc24:	cmp	r0, #0
   1dc28:	str	r5, [sp, #8]
   1dc2c:	beq	1dfe4 <main@@Base+0x7f00>
   1dc30:	add	sl, sp, #13
   1dc34:	add	r7, sp, #12
   1dc38:	b	1dc74 <main@@Base+0x7b90>
   1dc3c:	mov	r0, r9
   1dc40:	mov	r1, r6
   1dc44:	mov	r2, r4
   1dc48:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc4c:	mov	r8, r0
   1dc50:	mov	r0, r9
   1dc54:	mov	r1, r8
   1dc58:	mov	r2, r4
   1dc5c:	add	r3, sp, #16
   1dc60:	bl	1cf98 <main@@Base+0x6eb4>
   1dc64:	mov	r8, r0
   1dc68:	ldr	r0, [sp, #16]
   1dc6c:	cmp	r0, #0
   1dc70:	beq	1dfe4 <main@@Base+0x7f00>
   1dc74:	mov	r0, r9
   1dc78:	mov	r1, r8
   1dc7c:	mov	r2, r4
   1dc80:	bl	1a010 <main@@Base+0x3f2c>
   1dc84:	mov	r5, r0
   1dc88:	mov	r1, r4
   1dc8c:	bl	1a054 <main@@Base+0x3f70>
   1dc90:	mov	r6, r1
   1dc94:	lsr	r1, r0, #16
   1dc98:	orr	r1, r1, r6, lsl #16
   1dc9c:	movw	r2, #29234	; 0x7232
   1dca0:	movt	r2, #27759	; 0x6c6f
   1dca4:	eor	r1, r1, r2
   1dca8:	movw	r2, #25455	; 0x636f
   1dcac:	eor	r2, r2, r6, lsr #16
   1dcb0:	orrs	r1, r1, r2
   1dcb4:	bne	1dd0c <main@@Base+0x7c28>
   1dcb8:	mov	r0, r9
   1dcbc:	mov	r1, r5
   1dcc0:	mov	r2, r4
   1dcc4:	mov	r3, #6
   1dcc8:	bl	1a058 <main@@Base+0x3f74>
   1dccc:	mov	r7, r0
   1dcd0:	cmp	r5, r0
   1dcd4:	add	r5, sp, #15
   1dcd8:	beq	1dd7c <main@@Base+0x7c98>
   1dcdc:	mov	r0, #0
   1dce0:	strb	r0, [sp, #15]
   1dce4:	mov	r0, r9
   1dce8:	mov	r1, r7
   1dcec:	mov	r2, r4
   1dcf0:	mov	r3, r5
   1dcf4:	bl	1aa44 <main@@Base+0x4960>
   1dcf8:	mov	r6, r0
   1dcfc:	cmp	r7, r0
   1dd00:	beq	1de5c <main@@Base+0x7d78>
   1dd04:	mov	r8, r6
   1dd08:	b	1de88 <main@@Base+0x7da4>
   1dd0c:	movw	r1, #27759	; 0x6c6f
   1dd10:	movt	r1, #25455	; 0x636f
   1dd14:	eor	r1, r6, r1
   1dd18:	and	r0, r0, #-16777216	; 0xff000000
   1dd1c:	eor	r0, r0, #1912602624	; 0x72000000
   1dd20:	orrs	r0, r0, r1
   1dd24:	bne	1dd84 <main@@Base+0x7ca0>
   1dd28:	mov	r0, r9
   1dd2c:	mov	r1, r5
   1dd30:	mov	r2, r4
   1dd34:	mov	r3, #5
   1dd38:	bl	1a058 <main@@Base+0x3f74>
   1dd3c:	mov	r7, r0
   1dd40:	cmp	r5, r0
   1dd44:	beq	1dd7c <main@@Base+0x7c98>
   1dd48:	mov	r0, #0
   1dd4c:	strb	r0, [sp, #14]
   1dd50:	mov	r0, r9
   1dd54:	mov	r1, r7
   1dd58:	mov	r2, r4
   1dd5c:	add	r5, sp, #14
   1dd60:	mov	r3, r5
   1dd64:	bl	1aa44 <main@@Base+0x4960>
   1dd68:	mov	r6, r0
   1dd6c:	cmp	r7, r0
   1dd70:	beq	1deb0 <main@@Base+0x7dcc>
   1dd74:	mov	r8, r6
   1dd78:	b	1dedc <main@@Base+0x7df8>
   1dd7c:	mov	r5, r7
   1dd80:	add	r7, sp, #12
   1dd84:	bic	r0, r6, #255	; 0xff
   1dd88:	movw	r1, #12800	; 0x3200
   1dd8c:	movt	r1, #30051	; 0x7563
   1dd90:	teq	r0, r1
   1dd94:	bne	1dde8 <main@@Base+0x7d04>
   1dd98:	mov	r0, r9
   1dd9c:	mov	r1, r5
   1dda0:	mov	r2, r4
   1dda4:	mov	r3, #3
   1dda8:	bl	1a058 <main@@Base+0x3f74>
   1ddac:	mov	r6, r0
   1ddb0:	cmp	r5, r0
   1ddb4:	beq	1dc3c <main@@Base+0x7b58>
   1ddb8:	mov	r0, #0
   1ddbc:	strb	r0, [sp, #13]
   1ddc0:	mov	r0, r9
   1ddc4:	mov	r1, r6
   1ddc8:	mov	r2, r4
   1ddcc:	mov	r3, sl
   1ddd0:	bl	1aca0 <main@@Base+0x4bbc>
   1ddd4:	mov	r7, r0
   1ddd8:	cmp	r6, r0
   1dddc:	beq	1df20 <main@@Base+0x7e3c>
   1dde0:	mov	r8, r7
   1dde4:	b	1df4c <main@@Base+0x7e68>
   1dde8:	bfc	r6, #0, #16
   1ddec:	movw	r0, #0
   1ddf0:	movt	r0, #30051	; 0x7563
   1ddf4:	teq	r6, r0
   1ddf8:	bne	1de50 <main@@Base+0x7d6c>
   1ddfc:	mov	r0, r9
   1de00:	mov	r1, r5
   1de04:	mov	r2, r4
   1de08:	mov	r3, #2
   1de0c:	bl	1a058 <main@@Base+0x3f74>
   1de10:	mov	r6, r0
   1de14:	cmp	r5, r0
   1de18:	beq	1dc3c <main@@Base+0x7b58>
   1de1c:	mov	r0, #0
   1de20:	strb	r0, [sp, #12]
   1de24:	mov	r0, r9
   1de28:	mov	r1, r6
   1de2c:	mov	r2, r4
   1de30:	mov	r3, r7
   1de34:	bl	1aca0 <main@@Base+0x4bbc>
   1de38:	mov	r1, r7
   1de3c:	mov	r7, r0
   1de40:	cmp	r6, r0
   1de44:	beq	1df74 <main@@Base+0x7e90>
   1de48:	mov	r8, r7
   1de4c:	b	1dfa0 <main@@Base+0x7ebc>
   1de50:	mov	r0, r9
   1de54:	mov	r1, r5
   1de58:	b	1dc44 <main@@Base+0x7b60>
   1de5c:	str	r5, [sp]
   1de60:	mov	r0, r9
   1de64:	mov	r1, r6
   1de68:	mov	r2, r4
   1de6c:	movw	r3, #41440	; 0xa1e0
   1de70:	movt	r3, #4
   1de74:	bl	1aad4 <main@@Base+0x49f0>
   1de78:	mov	r8, r0
   1de7c:	cmp	r0, r6
   1de80:	cmpne	r8, r4
   1de84:	beq	1dbe4 <main@@Base+0x7b00>
   1de88:	ldrb	r5, [sp, #15]
   1de8c:	cmp	r5, #2
   1de90:	add	r7, sp, #12
   1de94:	bne	1dea4 <main@@Base+0x7dc0>
   1de98:	ldrb	r0, [r9, #8]
   1de9c:	tst	r0, #2
   1dea0:	beq	1dc50 <main@@Base+0x7b6c>
   1dea4:	ldr	r0, [r9]
   1dea8:	mov	r1, #1
   1deac:	b	1df00 <main@@Base+0x7e1c>
   1deb0:	str	r5, [sp]
   1deb4:	mov	r0, r9
   1deb8:	mov	r1, r6
   1debc:	mov	r2, r4
   1dec0:	movw	r3, #41456	; 0xa1f0
   1dec4:	movt	r3, #4
   1dec8:	bl	1aad4 <main@@Base+0x49f0>
   1decc:	mov	r8, r0
   1ded0:	cmp	r0, r6
   1ded4:	cmpne	r8, r4
   1ded8:	beq	1dbe4 <main@@Base+0x7b00>
   1dedc:	ldrb	r5, [sp, #14]
   1dee0:	cmp	r5, #2
   1dee4:	add	r7, sp, #12
   1dee8:	bne	1def8 <main@@Base+0x7e14>
   1deec:	ldrb	r0, [r9, #8]
   1def0:	tst	r0, #2
   1def4:	beq	1dc50 <main@@Base+0x7b6c>
   1def8:	ldr	r0, [r9]
   1defc:	mov	r1, #0
   1df00:	mov	r2, #1
   1df04:	mov	r3, #1
   1df08:	bl	23f38 <flatcc_builder_table_add@@Base>
   1df0c:	cmp	r0, #0
   1df10:	beq	1dbe4 <main@@Base+0x7b00>
   1df14:	sxtb	r1, r5
   1df18:	bl	1abf0 <main@@Base+0x4b0c>
   1df1c:	b	1dc50 <main@@Base+0x7b6c>
   1df20:	str	sl, [sp]
   1df24:	mov	r0, r9
   1df28:	mov	r1, r7
   1df2c:	mov	r2, r4
   1df30:	movw	r3, #41472	; 0xa200
   1df34:	movt	r3, #4
   1df38:	bl	1ad30 <main@@Base+0x4c4c>
   1df3c:	mov	r8, r0
   1df40:	cmp	r0, r7
   1df44:	cmpne	r8, r4
   1df48:	beq	1dbe4 <main@@Base+0x7b00>
   1df4c:	ldrb	r6, [sp, #13]
   1df50:	cmp	r6, #2
   1df54:	add	r7, sp, #12
   1df58:	bne	1df68 <main@@Base+0x7e84>
   1df5c:	ldrb	r0, [r9, #8]
   1df60:	tst	r0, #2
   1df64:	beq	1dc50 <main@@Base+0x7b6c>
   1df68:	ldr	r0, [r9]
   1df6c:	mov	r1, #3
   1df70:	b	1dfc4 <main@@Base+0x7ee0>
   1df74:	str	r1, [sp]
   1df78:	mov	r0, r9
   1df7c:	mov	r1, r7
   1df80:	mov	r2, r4
   1df84:	movw	r3, #41484	; 0xa20c
   1df88:	movt	r3, #4
   1df8c:	bl	1ad30 <main@@Base+0x4c4c>
   1df90:	mov	r8, r0
   1df94:	cmp	r0, r7
   1df98:	cmpne	r8, r4
   1df9c:	beq	1dbe4 <main@@Base+0x7b00>
   1dfa0:	ldrb	r6, [sp, #12]
   1dfa4:	cmp	r6, #2
   1dfa8:	add	r7, sp, #12
   1dfac:	bne	1dfbc <main@@Base+0x7ed8>
   1dfb0:	ldrb	r0, [r9, #8]
   1dfb4:	tst	r0, #2
   1dfb8:	beq	1dc50 <main@@Base+0x7b6c>
   1dfbc:	ldr	r0, [r9]
   1dfc0:	mov	r1, #2
   1dfc4:	mov	r2, #1
   1dfc8:	mov	r3, #1
   1dfcc:	bl	23f38 <flatcc_builder_table_add@@Base>
   1dfd0:	cmp	r0, #0
   1dfd4:	beq	1dbe4 <main@@Base+0x7b00>
   1dfd8:	mov	r1, r6
   1dfdc:	bl	1ae4c <main@@Base+0x4d68>
   1dfe0:	b	1dc50 <main@@Base+0x7b6c>
   1dfe4:	ldr	r0, [r9, #24]
   1dfe8:	cmp	r0, #0
   1dfec:	bne	1dbe4 <main@@Base+0x7b00>
   1dff0:	ldr	r0, [r9]
   1dff4:	bl	23848 <flatcc_builder_end_table@@Base>
   1dff8:	ldr	r1, [sp, #8]
   1dffc:	str	r0, [r1]
   1e000:	cmp	r0, #0
   1e004:	bne	1dbfc <main@@Base+0x7b18>
   1e008:	b	1dbe4 <main@@Base+0x7b00>
   1e00c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e010:	add	fp, sp, #24
   1e014:	sub	sp, sp, #8
   1e018:	mov	r8, r3
   1e01c:	mov	r4, r2
   1e020:	mov	r7, r1
   1e024:	mov	r5, r0
   1e028:	mov	r0, #0
   1e02c:	str	r0, [r3]
   1e030:	ldr	r0, [r5]
   1e034:	mov	r1, #0
   1e038:	bl	2313c <flatcc_builder_start_table@@Base>
   1e03c:	cmp	r0, #0
   1e040:	bne	1e0d0 <main@@Base+0x7fec>
   1e044:	add	r3, sp, #4
   1e048:	mov	r0, r5
   1e04c:	mov	r1, r7
   1e050:	mov	r2, r4
   1e054:	bl	19f80 <main@@Base+0x3e9c>
   1e058:	mov	r7, r0
   1e05c:	ldr	r0, [sp, #4]
   1e060:	cmp	r0, #0
   1e064:	beq	1e0b0 <main@@Base+0x7fcc>
   1e068:	add	r6, sp, #4
   1e06c:	mov	r0, r5
   1e070:	mov	r1, r7
   1e074:	mov	r2, r4
   1e078:	bl	1a010 <main@@Base+0x3f2c>
   1e07c:	mov	r1, r0
   1e080:	mov	r0, r5
   1e084:	mov	r2, r4
   1e088:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1e08c:	mov	r1, r0
   1e090:	mov	r0, r5
   1e094:	mov	r2, r4
   1e098:	mov	r3, r6
   1e09c:	bl	1cf98 <main@@Base+0x6eb4>
   1e0a0:	mov	r7, r0
   1e0a4:	ldr	r0, [sp, #4]
   1e0a8:	cmp	r0, #0
   1e0ac:	bne	1e06c <main@@Base+0x7f88>
   1e0b0:	ldr	r0, [r5, #24]
   1e0b4:	cmp	r0, #0
   1e0b8:	bne	1e0d0 <main@@Base+0x7fec>
   1e0bc:	ldr	r0, [r5]
   1e0c0:	bl	23848 <flatcc_builder_end_table@@Base>
   1e0c4:	str	r0, [r8]
   1e0c8:	cmp	r0, #0
   1e0cc:	bne	1e0e8 <main@@Base+0x8004>
   1e0d0:	mov	r0, r5
   1e0d4:	mov	r1, r7
   1e0d8:	mov	r2, r4
   1e0dc:	mov	r3, #33	; 0x21
   1e0e0:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1e0e4:	mov	r7, r0
   1e0e8:	mov	r0, r7
   1e0ec:	sub	sp, fp, #24
   1e0f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e0f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0f8:	add	fp, sp, #28
   1e0fc:	sub	sp, sp, #36	; 0x24
   1e100:	mov	r7, r3
   1e104:	mov	r4, r2
   1e108:	mov	r6, r1
   1e10c:	mov	r5, r0
   1e110:	mov	r0, #0
   1e114:	str	r0, [r3]
   1e118:	ldr	r0, [r5]
   1e11c:	mov	r1, #4
   1e120:	bl	2313c <flatcc_builder_start_table@@Base>
   1e124:	cmp	r0, #0
   1e128:	beq	1e150 <main@@Base+0x806c>
   1e12c:	mov	r0, r5
   1e130:	mov	r1, r6
   1e134:	mov	r2, r4
   1e138:	mov	r3, #33	; 0x21
   1e13c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1e140:	mov	r6, r0
   1e144:	mov	r0, r6
   1e148:	sub	sp, fp, #28
   1e14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e150:	add	r0, sp, #24
   1e154:	str	r0, [sp]
   1e158:	mov	r0, r5
   1e15c:	mov	r1, r6
   1e160:	mov	r2, r4
   1e164:	mov	r3, #1
   1e168:	bl	282fc <flatcc_json_parser_prepare_unions@@Base>
   1e16c:	cmp	r0, r4
   1e170:	beq	1e12c <main@@Base+0x8048>
   1e174:	str	r7, [sp, #20]
   1e178:	add	r3, sp, #32
   1e17c:	mov	r0, r5
   1e180:	mov	r1, r6
   1e184:	mov	r2, r4
   1e188:	bl	19f80 <main@@Base+0x3e9c>
   1e18c:	mov	r6, r0
   1e190:	ldr	r0, [sp, #32]
   1e194:	cmp	r0, #0
   1e198:	beq	1e408 <main@@Base+0x8324>
   1e19c:	movw	r0, #30976	; 0x7900
   1e1a0:	movt	r0, #24942	; 0x616e
   1e1a4:	add	r9, r0, #95	; 0x5f
   1e1a8:	add	sl, sp, #32
   1e1ac:	b	1e1e8 <main@@Base+0x8104>
   1e1b0:	mov	r0, r5
   1e1b4:	mov	r1, r6
   1e1b8:	mov	r2, r4
   1e1bc:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1e1c0:	mov	r6, r0
   1e1c4:	mov	r0, r5
   1e1c8:	mov	r1, r6
   1e1cc:	mov	r2, r4
   1e1d0:	mov	r3, sl
   1e1d4:	bl	1cf98 <main@@Base+0x6eb4>
   1e1d8:	mov	r6, r0
   1e1dc:	ldr	r0, [sp, #32]
   1e1e0:	cmp	r0, #0
   1e1e4:	beq	1e408 <main@@Base+0x8324>
   1e1e8:	mov	r0, r5
   1e1ec:	mov	r1, r6
   1e1f0:	mov	r2, r4
   1e1f4:	bl	1a010 <main@@Base+0x3f2c>
   1e1f8:	mov	r6, r0
   1e1fc:	mov	r1, r4
   1e200:	bl	1a054 <main@@Base+0x3f70>
   1e204:	mov	r7, r0
   1e208:	mov	r8, r1
   1e20c:	movw	r0, #28281	; 0x6e79
   1e210:	movt	r0, #28001	; 0x6d61
   1e214:	eor	r0, r1, r0
   1e218:	eor	r1, r7, r9
   1e21c:	orrs	r1, r1, r0
   1e220:	bne	1e2ac <main@@Base+0x81c8>
   1e224:	add	r6, r6, #8
   1e228:	mov	r0, r6
   1e22c:	mov	r1, r4
   1e230:	bl	1a054 <main@@Base+0x3f70>
   1e234:	movw	r0, #28773	; 0x7065
   1e238:	movt	r0, #29817	; 0x7479
   1e23c:	teq	r1, r0
   1e240:	bne	1e1b0 <main@@Base+0x80cc>
   1e244:	mov	r0, r5
   1e248:	mov	r1, r6
   1e24c:	mov	r2, r4
   1e250:	mov	r3, #4
   1e254:	bl	1a058 <main@@Base+0x3f74>
   1e258:	mov	r1, r0
   1e25c:	cmp	r6, r0
   1e260:	beq	1e400 <main@@Base+0x831c>
   1e264:	ldr	r0, [sp, #24]
   1e268:	mov	r2, #3
   1e26c:	str	r2, [sp]
   1e270:	str	r0, [sp, #4]
   1e274:	movw	r0, #41496	; 0xa218
   1e278:	movt	r0, #4
   1e27c:	str	r0, [sp, #8]
   1e280:	movw	r0, #47248	; 0xb890
   1e284:	movt	r0, #1
   1e288:	str	r0, [sp, #12]
   1e28c:	movw	r0, #58440	; 0xe448
   1e290:	movt	r0, #1
   1e294:	str	r0, [sp, #16]
   1e298:	mov	r0, r5
   1e29c:	mov	r2, r4
   1e2a0:	mov	r3, #0
   1e2a4:	bl	28a98 <flatcc_json_parser_union_type_vector@@Base>
   1e2a8:	b	1e1c0 <main@@Base+0x80dc>
   1e2ac:	bic	r1, r7, #255	; 0xff
   1e2b0:	movw	r2, #30976	; 0x7900
   1e2b4:	movt	r2, #24942	; 0x616e
   1e2b8:	eor	r1, r1, r2
   1e2bc:	orrs	r0, r1, r0
   1e2c0:	bne	1e318 <main@@Base+0x8234>
   1e2c4:	mov	r0, r5
   1e2c8:	mov	r1, r6
   1e2cc:	mov	r2, r4
   1e2d0:	mov	r3, #7
   1e2d4:	bl	1a058 <main@@Base+0x3f74>
   1e2d8:	mov	r1, r0
   1e2dc:	cmp	r6, r0
   1e2e0:	beq	1e314 <main@@Base+0x8230>
   1e2e4:	ldr	r0, [sp, #24]
   1e2e8:	mov	r2, #3
   1e2ec:	str	r2, [sp]
   1e2f0:	str	r0, [sp, #4]
   1e2f4:	movw	r0, #47248	; 0xb890
   1e2f8:	movt	r0, #1
   1e2fc:	str	r0, [sp, #8]
   1e300:	mov	r0, r5
   1e304:	mov	r2, r4
   1e308:	mov	r3, #0
   1e30c:	bl	2883c <flatcc_json_parser_union_vector@@Base>
   1e310:	b	1e1c0 <main@@Base+0x80dc>
   1e314:	mov	r6, r1
   1e318:	movw	r0, #28786	; 0x7072
   1e31c:	eor	r0, r0, r8, lsr #16
   1e320:	lsr	r1, r7, #16
   1e324:	orr	r1, r1, r8, lsl #16
   1e328:	movw	r2, #27000	; 0x6978
   1e32c:	movt	r2, #25958	; 0x6566
   1e330:	eor	r1, r1, r2
   1e334:	orrs	r0, r1, r0
   1e338:	bne	1e388 <main@@Base+0x82a4>
   1e33c:	mov	r0, r5
   1e340:	mov	r1, r6
   1e344:	mov	r2, r4
   1e348:	mov	r3, #6
   1e34c:	bl	1a058 <main@@Base+0x3f74>
   1e350:	mov	r1, r0
   1e354:	cmp	r6, r0
   1e358:	beq	1e400 <main@@Base+0x831c>
   1e35c:	mov	r0, r5
   1e360:	mov	r2, r4
   1e364:	add	r3, sp, #28
   1e368:	bl	1e45c <main@@Base+0x8378>
   1e36c:	mov	r6, r0
   1e370:	ldr	r7, [sp, #28]
   1e374:	cmp	r7, #0
   1e378:	beq	1e12c <main@@Base+0x8048>
   1e37c:	ldr	r0, [r5]
   1e380:	mov	r1, #0
   1e384:	b	1e3ec <main@@Base+0x8308>
   1e388:	movw	r0, #30313	; 0x7669
   1e38c:	movt	r0, #28015	; 0x6d6f
   1e390:	eor	r0, r8, r0
   1e394:	and	r1, r7, #-16777216	; 0xff000000
   1e398:	eor	r1, r1, #1694498816	; 0x65000000
   1e39c:	orrs	r0, r1, r0
   1e3a0:	bne	1e1b0 <main@@Base+0x80cc>
   1e3a4:	mov	r0, r5
   1e3a8:	mov	r1, r6
   1e3ac:	mov	r2, r4
   1e3b0:	mov	r3, #5
   1e3b4:	bl	1a058 <main@@Base+0x3f74>
   1e3b8:	mov	r1, r0
   1e3bc:	cmp	r6, r0
   1e3c0:	beq	1e400 <main@@Base+0x831c>
   1e3c4:	mov	r0, r5
   1e3c8:	mov	r2, r4
   1e3cc:	add	r3, sp, #28
   1e3d0:	bl	1e76c <main@@Base+0x8688>
   1e3d4:	mov	r6, r0
   1e3d8:	ldr	r7, [sp, #28]
   1e3dc:	cmp	r7, #0
   1e3e0:	beq	1e12c <main@@Base+0x8048>
   1e3e4:	ldr	r0, [r5]
   1e3e8:	mov	r1, #1
   1e3ec:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   1e3f0:	cmp	r0, #0
   1e3f4:	beq	1e12c <main@@Base+0x8048>
   1e3f8:	str	r7, [r0]
   1e3fc:	b	1e1c4 <main@@Base+0x80e0>
   1e400:	mov	r0, r5
   1e404:	b	1e1b8 <main@@Base+0x80d4>
   1e408:	ldr	r0, [r5, #24]
   1e40c:	cmp	r0, #0
   1e410:	bne	1e12c <main@@Base+0x8048>
   1e414:	ldr	r3, [sp, #24]
   1e418:	mov	r0, r5
   1e41c:	mov	r1, r6
   1e420:	mov	r2, r4
   1e424:	bl	28368 <flatcc_json_parser_finalize_unions@@Base>
   1e428:	mov	r6, r0
   1e42c:	ldr	r0, [r5]
   1e430:	bl	23848 <flatcc_builder_end_table@@Base>
   1e434:	ldr	r1, [sp, #20]
   1e438:	str	r0, [r1]
   1e43c:	cmp	r0, #0
   1e440:	bne	1e144 <main@@Base+0x8060>
   1e444:	b	1e12c <main@@Base+0x8048>
   1e448:	mov	r1, #0
   1e44c:	cmp	r0, #5
   1e450:	movwcc	r1, #1
   1e454:	mov	r0, r1
   1e458:	bx	lr
   1e45c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e460:	add	fp, sp, #28
   1e464:	sub	sp, sp, #12
   1e468:	mov	r7, r3
   1e46c:	mov	r4, r2
   1e470:	mov	r6, r1
   1e474:	mov	r5, r0
   1e478:	mov	r0, #0
   1e47c:	str	r0, [r3]
   1e480:	ldr	r0, [r5]
   1e484:	mov	r1, #3
   1e488:	bl	2313c <flatcc_builder_start_table@@Base>
   1e48c:	cmp	r0, #0
   1e490:	bne	1e72c <main@@Base+0x8648>
   1e494:	add	r3, sp, #8
   1e498:	mov	r0, r5
   1e49c:	mov	r1, r6
   1e4a0:	mov	r2, r4
   1e4a4:	bl	19f80 <main@@Base+0x3e9c>
   1e4a8:	mov	r6, r0
   1e4ac:	ldr	r0, [sp, #8]
   1e4b0:	cmp	r0, #0
   1e4b4:	str	r7, [sp]
   1e4b8:	beq	1e720 <main@@Base+0x863c>
   1e4bc:	movw	r9, #29556	; 0x7374
   1e4c0:	movt	r9, #29797	; 0x7465
   1e4c4:	movw	sl, #28526	; 0x6f6e
   1e4c8:	movt	sl, #27251	; 0x6a73
   1e4cc:	movw	r8, #25958	; 0x6566
   1e4d0:	movt	r8, #28786	; 0x7072
   1e4d4:	add	r7, sp, #8
   1e4d8:	b	1e524 <main@@Base+0x8440>
   1e4dc:	mov	r6, r1
   1e4e0:	movw	r8, #25958	; 0x6566
   1e4e4:	movt	r8, #28786	; 0x7072
   1e4e8:	add	r7, sp, #8
   1e4ec:	mov	r0, r5
   1e4f0:	mov	r1, r6
   1e4f4:	mov	r2, r4
   1e4f8:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1e4fc:	mov	r6, r0
   1e500:	mov	r0, r5
   1e504:	mov	r1, r6
   1e508:	mov	r2, r4
   1e50c:	mov	r3, r7
   1e510:	bl	1cf98 <main@@Base+0x6eb4>
   1e514:	mov	r6, r0
   1e518:	ldr	r0, [sp, #8]
   1e51c:	cmp	r0, #0
   1e520:	beq	1e720 <main@@Base+0x863c>
   1e524:	mov	r0, r5
   1e528:	mov	r1, r6
   1e52c:	mov	r2, r4
   1e530:	bl	1a010 <main@@Base+0x3f2c>
   1e534:	mov	r6, r0
   1e538:	mov	r1, r4
   1e53c:	bl	1a054 <main@@Base+0x3f70>
   1e540:	eor	r1, r1, r9
   1e544:	eor	r0, r0, sl
   1e548:	orrs	r0, r0, r1
   1e54c:	bne	1e4ec <main@@Base+0x8408>
   1e550:	add	r7, r6, #8
   1e554:	mov	r0, r7
   1e558:	mov	r1, r4
   1e55c:	bl	1a054 <main@@Base+0x3f70>
   1e560:	eor	r1, r1, r8
   1e564:	movw	r2, #28769	; 0x7061
   1e568:	movt	r2, #27000	; 0x6978
   1e56c:	eor	r0, r0, r2
   1e570:	orrs	r0, r0, r1
   1e574:	bne	1e5fc <main@@Base+0x8518>
   1e578:	add	r6, r6, #16
   1e57c:	mov	r0, r6
   1e580:	mov	r1, r4
   1e584:	bl	1a054 <main@@Base+0x3f70>
   1e588:	movw	r2, #26990	; 0x696e
   1e58c:	movt	r2, #29299	; 0x7273
   1e590:	eor	r7, r1, r2
   1e594:	mov	r8, r0
   1e598:	bfc	r8, #0, #16
   1e59c:	movw	r1, #0
   1e5a0:	movt	r1, #26418	; 0x6732
   1e5a4:	eor	r1, r8, r1
   1e5a8:	orrs	r1, r1, r7
   1e5ac:	bne	1e614 <main@@Base+0x8530>
   1e5b0:	mov	r0, r5
   1e5b4:	mov	r1, r6
   1e5b8:	mov	r2, r4
   1e5bc:	mov	r3, #6
   1e5c0:	bl	1a058 <main@@Base+0x3f74>
   1e5c4:	mov	r1, r0
   1e5c8:	cmp	r6, r0
   1e5cc:	beq	1e4dc <main@@Base+0x83f8>
   1e5d0:	mov	r0, r5
   1e5d4:	mov	r2, r4
   1e5d8:	add	r3, sp, #4
   1e5dc:	bl	1eed0 <main@@Base+0x8dec>
   1e5e0:	mov	r6, r0
   1e5e4:	ldr	r7, [sp, #4]
   1e5e8:	cmp	r7, #0
   1e5ec:	beq	1e72c <main@@Base+0x8648>
   1e5f0:	ldr	r0, [r5]
   1e5f4:	mov	r1, #1
   1e5f8:	b	1e66c <main@@Base+0x8588>
   1e5fc:	mov	r0, r5
   1e600:	mov	r1, r7
   1e604:	mov	r2, r4
   1e608:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1e60c:	mov	r6, r0
   1e610:	b	1e684 <main@@Base+0x85a0>
   1e614:	and	r0, r0, #-16777216	; 0xff000000
   1e618:	eor	r0, r0, #1728053248	; 0x67000000
   1e61c:	orrs	r0, r0, r7
   1e620:	bne	1e690 <main@@Base+0x85ac>
   1e624:	mov	r0, r5
   1e628:	mov	r1, r6
   1e62c:	mov	r2, r4
   1e630:	mov	r3, #5
   1e634:	bl	1a058 <main@@Base+0x3f74>
   1e638:	mov	r1, r0
   1e63c:	cmp	r6, r0
   1e640:	beq	1e68c <main@@Base+0x85a8>
   1e644:	mov	r0, r5
   1e648:	mov	r2, r4
   1e64c:	add	r3, sp, #4
   1e650:	bl	1f214 <main@@Base+0x9130>
   1e654:	mov	r6, r0
   1e658:	ldr	r7, [sp, #4]
   1e65c:	cmp	r7, #0
   1e660:	beq	1e72c <main@@Base+0x8648>
   1e664:	ldr	r0, [r5]
   1e668:	mov	r1, #0
   1e66c:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   1e670:	cmp	r0, #0
   1e674:	beq	1e72c <main@@Base+0x8648>
   1e678:	str	r7, [r0]
   1e67c:	movw	r8, #25958	; 0x6566
   1e680:	movt	r8, #28786	; 0x7072
   1e684:	add	r7, sp, #8
   1e688:	b	1e500 <main@@Base+0x841c>
   1e68c:	mov	r6, r1
   1e690:	movw	r0, #0
   1e694:	movt	r0, #26418	; 0x6732
   1e698:	add	r0, r0, #65536	; 0x10000
   1e69c:	eor	r0, r8, r0
   1e6a0:	orrs	r0, r0, r7
   1e6a4:	bne	1e4e0 <main@@Base+0x83fc>
   1e6a8:	mov	r0, r5
   1e6ac:	mov	r1, r6
   1e6b0:	mov	r2, r4
   1e6b4:	mov	r3, #6
   1e6b8:	bl	1a058 <main@@Base+0x3f74>
   1e6bc:	mov	r1, r0
   1e6c0:	cmp	r6, r0
   1e6c4:	beq	1e70c <main@@Base+0x8628>
   1e6c8:	mov	r0, r5
   1e6cc:	mov	r2, r4
   1e6d0:	add	r3, sp, #4
   1e6d4:	bl	1f968 <main@@Base+0x9884>
   1e6d8:	mov	r6, r0
   1e6dc:	ldr	r7, [sp, #4]
   1e6e0:	cmp	r7, #0
   1e6e4:	movw	r8, #25958	; 0x6566
   1e6e8:	movt	r8, #28786	; 0x7072
   1e6ec:	beq	1e72c <main@@Base+0x8648>
   1e6f0:	ldr	r0, [r5]
   1e6f4:	mov	r1, #2
   1e6f8:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   1e6fc:	cmp	r0, #0
   1e700:	beq	1e72c <main@@Base+0x8648>
   1e704:	str	r7, [r0]
   1e708:	b	1e684 <main@@Base+0x85a0>
   1e70c:	mov	r0, r5
   1e710:	mov	r2, r4
   1e714:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1e718:	mov	r6, r0
   1e71c:	b	1e67c <main@@Base+0x8598>
   1e720:	ldr	r0, [r5, #24]
   1e724:	cmp	r0, #0
   1e728:	beq	1e750 <main@@Base+0x866c>
   1e72c:	mov	r0, r5
   1e730:	mov	r1, r6
   1e734:	mov	r2, r4
   1e738:	mov	r3, #33	; 0x21
   1e73c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1e740:	mov	r6, r0
   1e744:	mov	r0, r6
   1e748:	sub	sp, fp, #28
   1e74c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e750:	ldr	r0, [r5]
   1e754:	bl	23848 <flatcc_builder_end_table@@Base>
   1e758:	ldr	r1, [sp]
   1e75c:	str	r0, [r1]
   1e760:	cmp	r0, #0
   1e764:	bne	1e744 <main@@Base+0x8660>
   1e768:	b	1e72c <main@@Base+0x8648>
   1e76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e770:	add	fp, sp, #28
   1e774:	sub	sp, sp, #36	; 0x24
   1e778:	mov	r7, r3
   1e77c:	mov	r4, r2
   1e780:	mov	r6, r1
   1e784:	mov	r5, r0
   1e788:	mov	r0, #0
   1e78c:	str	r0, [r3]
   1e790:	ldr	r0, [r5]
   1e794:	mov	r1, #10
   1e798:	bl	2313c <flatcc_builder_start_table@@Base>
   1e79c:	cmp	r0, #0
   1e7a0:	beq	1e7c8 <main@@Base+0x86e4>
   1e7a4:	mov	r0, r5
   1e7a8:	mov	r1, r6
   1e7ac:	mov	r2, r4
   1e7b0:	mov	r3, #33	; 0x21
   1e7b4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1e7b8:	mov	r6, r0
   1e7bc:	mov	r0, r6
   1e7c0:	sub	sp, fp, #28
   1e7c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7c8:	add	r0, sp, #28
   1e7cc:	str	r0, [sp]
   1e7d0:	mov	r0, r5
   1e7d4:	mov	r1, r6
   1e7d8:	mov	r2, r4
   1e7dc:	mov	r3, #5
   1e7e0:	bl	282fc <flatcc_json_parser_prepare_unions@@Base>
   1e7e4:	cmp	r0, r4
   1e7e8:	beq	1e7a4 <main@@Base+0x86c0>
   1e7ec:	add	r3, sp, #32
   1e7f0:	mov	r0, r5
   1e7f4:	mov	r1, r6
   1e7f8:	mov	r2, r4
   1e7fc:	bl	19f80 <main@@Base+0x3e9c>
   1e800:	mov	r6, r0
   1e804:	ldr	r0, [sp, #32]
   1e808:	cmp	r0, #0
   1e80c:	str	r7, [sp, #20]
   1e810:	beq	1ee90 <main@@Base+0x8dac>
   1e814:	movw	r8, #24946	; 0x6172
   1e818:	movt	r8, #25448	; 0x6368
   1e81c:	movw	r9, #29797	; 0x7465
   1e820:	movt	r9, #24931	; 0x6163
   1e824:	movw	r0, #24436	; 0x5f74
   1e828:	movt	r0, #29299	; 0x7273
   1e82c:	movw	sl, #29817	; 0x7479
   1e830:	movt	sl, #28511	; 0x6f5f
   1e834:	add	r0, r0, #65536	; 0x10000
   1e838:	add	r0, r0, #16777216	; 0x1000000
   1e83c:	str	r0, [sp, #24]
   1e840:	add	r7, sp, #32
   1e844:	b	1e87c <main@@Base+0x8798>
   1e848:	mov	r0, r5
   1e84c:	mov	r1, r6
   1e850:	mov	r2, r4
   1e854:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1e858:	mov	r1, r0
   1e85c:	mov	r0, r5
   1e860:	mov	r2, r4
   1e864:	mov	r3, r7
   1e868:	bl	1cf98 <main@@Base+0x6eb4>
   1e86c:	mov	r6, r0
   1e870:	ldr	r0, [sp, #32]
   1e874:	cmp	r0, #0
   1e878:	beq	1ee90 <main@@Base+0x8dac>
   1e87c:	mov	r0, r5
   1e880:	mov	r1, r6
   1e884:	mov	r2, r4
   1e888:	bl	1a010 <main@@Base+0x3f2c>
   1e88c:	mov	r6, r0
   1e890:	mov	r1, r4
   1e894:	bl	1a054 <main@@Base+0x3f70>
   1e898:	subs	r2, r0, r9
   1e89c:	sbcs	r2, r1, r8
   1e8a0:	bcs	1e96c <main@@Base+0x8888>
   1e8a4:	eor	r3, r0, sl
   1e8a8:	movw	r2, #28005	; 0x6d65
   1e8ac:	movt	r2, #25441	; 0x6361
   1e8b0:	eor	r2, r1, r2
   1e8b4:	orrs	r3, r3, r2
   1e8b8:	beq	1eb24 <main@@Base+0x8a40>
   1e8bc:	movw	r3, #28265	; 0x6e69
   1e8c0:	movt	r3, #26479	; 0x676f
   1e8c4:	eor	r3, r0, r3
   1e8c8:	movw	r7, #29793	; 0x7461
   1e8cc:	movt	r7, #24942	; 0x616e
   1e8d0:	eor	r1, r1, r7
   1e8d4:	orrs	r1, r3, r1
   1e8d8:	bne	1eba4 <main@@Base+0x8ac0>
   1e8dc:	add	r6, r6, #8
   1e8e0:	mov	r0, r6
   1e8e4:	mov	r1, r4
   1e8e8:	bl	1a054 <main@@Base+0x3f70>
   1e8ec:	ldr	r2, [sp, #24]
   1e8f0:	eor	r2, r1, r2
   1e8f4:	bic	r0, r0, #255	; 0xff
   1e8f8:	movw	r3, #25856	; 0x6500
   1e8fc:	movt	r3, #31088	; 0x7970
   1e900:	eor	r0, r0, r3
   1e904:	orrs	r0, r0, r2
   1e908:	bne	1ec08 <main@@Base+0x8b24>
   1e90c:	mov	r0, r5
   1e910:	mov	r1, r6
   1e914:	mov	r2, r4
   1e918:	mov	r3, #7
   1e91c:	bl	1a058 <main@@Base+0x3f74>
   1e920:	mov	r1, r0
   1e924:	cmp	r6, r0
   1e928:	add	r7, sp, #32
   1e92c:	beq	1ee50 <main@@Base+0x8d6c>
   1e930:	ldr	r0, [sp, #28]
   1e934:	mov	r2, #3
   1e938:	str	r2, [sp]
   1e93c:	str	r0, [sp, #4]
   1e940:	movw	r0, #41632	; 0xa2a0
   1e944:	movt	r0, #4
   1e948:	str	r0, [sp, #8]
   1e94c:	movw	r0, #64868	; 0xfd64
   1e950:	movt	r0, #1
   1e954:	str	r0, [sp, #12]
   1e958:	mov	r0, r5
   1e95c:	mov	r2, r4
   1e960:	mov	r3, #1
   1e964:	bl	284e8 <flatcc_json_parser_union_type@@Base>
   1e968:	b	1e858 <main@@Base+0x8774>
   1e96c:	movw	r2, #26720	; 0x6860
   1e970:	movt	r2, #24419	; 0x5f63
   1e974:	subs	r2, r2, r0
   1e978:	movw	r2, #26990	; 0x696e
   1e97c:	movt	r2, #28001	; 0x6d61
   1e980:	sbcs	r2, r2, r1
   1e984:	bcc	1ea34 <main@@Base+0x8950>
   1e988:	eor	r0, r0, r9
   1e98c:	eor	r1, r1, r8
   1e990:	orrs	r0, r0, r1
   1e994:	bne	1e848 <main@@Base+0x8764>
   1e998:	add	r6, r6, #8
   1e99c:	mov	r0, r6
   1e9a0:	mov	r1, r4
   1e9a4:	bl	1a054 <main@@Base+0x3f70>
   1e9a8:	movw	r2, #24436	; 0x5f74
   1e9ac:	movt	r2, #29299	; 0x7273
   1e9b0:	eor	r2, r1, r2
   1e9b4:	bic	r0, r0, #255	; 0xff
   1e9b8:	movw	r3, #25856	; 0x6500
   1e9bc:	movt	r3, #31088	; 0x7970
   1e9c0:	eor	r0, r0, r3
   1e9c4:	orrs	r0, r0, r2
   1e9c8:	bne	1ed1c <main@@Base+0x8c38>
   1e9cc:	mov	r0, r5
   1e9d0:	mov	r1, r6
   1e9d4:	mov	r2, r4
   1e9d8:	mov	r3, #7
   1e9dc:	bl	1a058 <main@@Base+0x3f74>
   1e9e0:	mov	r1, r0
   1e9e4:	cmp	r6, r0
   1e9e8:	beq	1ee50 <main@@Base+0x8d6c>
   1e9ec:	ldr	r0, [sp, #28]
   1e9f0:	mov	r2, #9
   1e9f4:	str	r2, [sp]
   1e9f8:	str	r0, [sp, #4]
   1e9fc:	movw	r0, #41664	; 0xa2c0
   1ea00:	movt	r0, #4
   1ea04:	str	r0, [sp, #8]
   1ea08:	movw	r0, #64868	; 0xfd64
   1ea0c:	movt	r0, #1
   1ea10:	str	r0, [sp, #12]
   1ea14:	movw	r0, #65164	; 0xfe8c
   1ea18:	movt	r0, #1
   1ea1c:	str	r0, [sp, #16]
   1ea20:	mov	r0, r5
   1ea24:	mov	r2, r4
   1ea28:	mov	r3, #4
   1ea2c:	bl	28a98 <flatcc_json_parser_union_type_vector@@Base>
   1ea30:	b	1e858 <main@@Base+0x8774>
   1ea34:	movw	r2, #26979	; 0x6963
   1ea38:	movt	r2, #24427	; 0x5f6b
   1ea3c:	eor	r2, r0, r2
   1ea40:	movw	r3, #25701	; 0x6465
   1ea44:	movt	r3, #29545	; 0x7369
   1ea48:	eor	r3, r1, r3
   1ea4c:	orrs	r2, r2, r3
   1ea50:	beq	1ec70 <main@@Base+0x8b8c>
   1ea54:	movw	r2, #26721	; 0x6861
   1ea58:	movt	r2, #24419	; 0x5f63
   1ea5c:	eor	r0, r0, r2
   1ea60:	movw	r2, #26990	; 0x696e
   1ea64:	movt	r2, #28001	; 0x6d61
   1ea68:	eor	r1, r1, r2
   1ea6c:	orrs	r0, r0, r1
   1ea70:	bne	1e848 <main@@Base+0x8764>
   1ea74:	movw	r9, #25856	; 0x6500
   1ea78:	movt	r9, #31088	; 0x7970
   1ea7c:	add	r7, r6, #8
   1ea80:	mov	r0, r7
   1ea84:	mov	r1, r4
   1ea88:	bl	1a054 <main@@Base+0x3f70>
   1ea8c:	movw	r2, #25460	; 0x6374
   1ea90:	movt	r2, #29281	; 0x7261
   1ea94:	eor	r2, r1, r2
   1ea98:	movw	r3, #24436	; 0x5f74
   1ea9c:	movt	r3, #25970	; 0x6572
   1eaa0:	eor	r3, r0, r3
   1eaa4:	orrs	r2, r3, r2
   1eaa8:	bne	1ed80 <main@@Base+0x8c9c>
   1eaac:	add	r6, r6, #16
   1eab0:	mov	r0, r6
   1eab4:	mov	r1, r4
   1eab8:	bl	1a054 <main@@Base+0x3f70>
   1eabc:	bic	r0, r1, #255	; 0xff
   1eac0:	teq	r0, r9
   1eac4:	bne	1ee58 <main@@Base+0x8d74>
   1eac8:	mov	r0, r5
   1eacc:	mov	r1, r6
   1ead0:	mov	r2, r4
   1ead4:	mov	r3, #3
   1ead8:	bl	1a058 <main@@Base+0x3f74>
   1eadc:	mov	r1, r0
   1eae0:	cmp	r6, r0
   1eae4:	beq	1ee70 <main@@Base+0x8d8c>
   1eae8:	ldr	r0, [sp, #28]
   1eaec:	mov	r2, #1
   1eaf0:	str	r2, [sp]
   1eaf4:	str	r0, [sp, #4]
   1eaf8:	movw	r0, #41680	; 0xa2d0
   1eafc:	movt	r0, #4
   1eb00:	str	r0, [sp, #8]
   1eb04:	movw	r0, #64868	; 0xfd64
   1eb08:	movt	r0, #1
   1eb0c:	str	r0, [sp, #12]
   1eb10:	mov	r0, r5
   1eb14:	mov	r2, r4
   1eb18:	mov	r3, #0
   1eb1c:	bl	284e8 <flatcc_json_parser_union_type@@Base>
   1eb20:	b	1ee7c <main@@Base+0x8d98>
   1eb24:	add	r6, r6, #8
   1eb28:	mov	r0, r6
   1eb2c:	mov	r1, r4
   1eb30:	bl	1a054 <main@@Base+0x3f70>
   1eb34:	bfc	r1, #0, #16
   1eb38:	movw	r0, #0
   1eb3c:	movt	r0, #28773	; 0x7065
   1eb40:	teq	r1, r0
   1eb44:	bne	1e848 <main@@Base+0x8764>
   1eb48:	mov	r0, r5
   1eb4c:	mov	r1, r6
   1eb50:	mov	r2, r4
   1eb54:	mov	r3, #2
   1eb58:	bl	1a058 <main@@Base+0x3f74>
   1eb5c:	mov	r1, r0
   1eb60:	cmp	r6, r0
   1eb64:	beq	1ee50 <main@@Base+0x8d6c>
   1eb68:	ldr	r0, [sp, #28]
   1eb6c:	mov	r2, #7
   1eb70:	str	r2, [sp]
   1eb74:	str	r0, [sp, #4]
   1eb78:	movw	r0, #41648	; 0xa2b0
   1eb7c:	movt	r0, #4
   1eb80:	str	r0, [sp, #8]
   1eb84:	movw	r0, #64868	; 0xfd64
   1eb88:	movt	r0, #1
   1eb8c:	str	r0, [sp, #12]
   1eb90:	mov	r0, r5
   1eb94:	mov	r2, r4
   1eb98:	mov	r3, #3
   1eb9c:	bl	284e8 <flatcc_json_parser_union_type@@Base>
   1eba0:	b	1e858 <main@@Base+0x8774>
   1eba4:	and	r0, r0, #-16777216	; 0xff000000
   1eba8:	eor	r0, r0, #1862270976	; 0x6f000000
   1ebac:	orrs	r0, r0, r2
   1ebb0:	bne	1ed00 <main@@Base+0x8c1c>
   1ebb4:	mov	r0, r5
   1ebb8:	mov	r1, r6
   1ebbc:	mov	r2, r4
   1ebc0:	mov	r3, #5
   1ebc4:	bl	1a058 <main@@Base+0x3f74>
   1ebc8:	mov	r1, r0
   1ebcc:	cmp	r6, r0
   1ebd0:	add	r7, sp, #32
   1ebd4:	beq	1ee50 <main@@Base+0x8d6c>
   1ebd8:	ldr	r0, [sp, #28]
   1ebdc:	mov	r2, #7
   1ebe0:	str	r2, [sp]
   1ebe4:	str	r0, [sp, #4]
   1ebe8:	movw	r0, #64868	; 0xfd64
   1ebec:	movt	r0, #1
   1ebf0:	str	r0, [sp, #8]
   1ebf4:	mov	r0, r5
   1ebf8:	mov	r2, r4
   1ebfc:	mov	r3, #3
   1ec00:	bl	283c4 <flatcc_json_parser_union@@Base>
   1ec04:	b	1e858 <main@@Base+0x8774>
   1ec08:	bfc	r1, #0, #16
   1ec0c:	movw	r0, #0
   1ec10:	movt	r0, #29556	; 0x7374
   1ec14:	teq	r1, r0
   1ec18:	add	r7, sp, #32
   1ec1c:	bne	1e848 <main@@Base+0x8764>
   1ec20:	mov	r0, r5
   1ec24:	mov	r1, r6
   1ec28:	mov	r2, r4
   1ec2c:	mov	r3, #2
   1ec30:	bl	1a058 <main@@Base+0x3f74>
   1ec34:	mov	r1, r0
   1ec38:	cmp	r6, r0
   1ec3c:	beq	1ee50 <main@@Base+0x8d6c>
   1ec40:	ldr	r0, [sp, #28]
   1ec44:	mov	r2, #3
   1ec48:	str	r2, [sp]
   1ec4c:	str	r0, [sp, #4]
   1ec50:	movw	r0, #64868	; 0xfd64
   1ec54:	movt	r0, #1
   1ec58:	str	r0, [sp, #8]
   1ec5c:	mov	r0, r5
   1ec60:	mov	r2, r4
   1ec64:	mov	r3, #1
   1ec68:	bl	283c4 <flatcc_json_parser_union@@Base>
   1ec6c:	b	1e858 <main@@Base+0x8774>
   1ec70:	add	r6, r6, #8
   1ec74:	mov	r0, r6
   1ec78:	mov	r1, r4
   1ec7c:	bl	1a054 <main@@Base+0x3f70>
   1ec80:	lsr	r0, r0, #16
   1ec84:	orr	r0, r0, r1, lsl #16
   1ec88:	movw	r2, #28773	; 0x7065
   1ec8c:	movt	r2, #29817	; 0x7479
   1ec90:	eor	r0, r0, r2
   1ec94:	movw	r2, #27487	; 0x6b5f
   1ec98:	eor	r2, r2, r1, lsr #16
   1ec9c:	orrs	r0, r0, r2
   1eca0:	bne	1edf4 <main@@Base+0x8d10>
   1eca4:	mov	r0, r5
   1eca8:	mov	r1, r6
   1ecac:	mov	r2, r4
   1ecb0:	mov	r3, #6
   1ecb4:	bl	1a058 <main@@Base+0x3f74>
   1ecb8:	mov	r1, r0
   1ecbc:	cmp	r6, r0
   1ecc0:	beq	1ee50 <main@@Base+0x8d6c>
   1ecc4:	ldr	r0, [sp, #28]
   1ecc8:	mov	r2, #5
   1eccc:	str	r2, [sp]
   1ecd0:	str	r0, [sp, #4]
   1ecd4:	movw	r0, #41696	; 0xa2e0
   1ecd8:	movt	r0, #4
   1ecdc:	str	r0, [sp, #8]
   1ece0:	movw	r0, #64868	; 0xfd64
   1ece4:	movt	r0, #1
   1ece8:	str	r0, [sp, #12]
   1ecec:	mov	r0, r5
   1ecf0:	mov	r2, r4
   1ecf4:	mov	r3, #2
   1ecf8:	bl	284e8 <flatcc_json_parser_union_type@@Base>
   1ecfc:	b	1e858 <main@@Base+0x8774>
   1ed00:	mov	r0, r5
   1ed04:	mov	r1, r6
   1ed08:	mov	r2, r4
   1ed0c:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1ed10:	mov	r1, r0
   1ed14:	add	r7, sp, #32
   1ed18:	b	1e85c <main@@Base+0x8778>
   1ed1c:	bfc	r1, #0, #16
   1ed20:	movw	r0, #0
   1ed24:	movt	r0, #29299	; 0x7273
   1ed28:	teq	r1, r0
   1ed2c:	bne	1e848 <main@@Base+0x8764>
   1ed30:	mov	r0, r5
   1ed34:	mov	r1, r6
   1ed38:	mov	r2, r4
   1ed3c:	mov	r3, #2
   1ed40:	bl	1a058 <main@@Base+0x3f74>
   1ed44:	mov	r1, r0
   1ed48:	cmp	r6, r0
   1ed4c:	beq	1ee50 <main@@Base+0x8d6c>
   1ed50:	ldr	r0, [sp, #28]
   1ed54:	mov	r2, #9
   1ed58:	str	r2, [sp]
   1ed5c:	str	r0, [sp, #4]
   1ed60:	movw	r0, #64868	; 0xfd64
   1ed64:	movt	r0, #1
   1ed68:	str	r0, [sp, #8]
   1ed6c:	mov	r0, r5
   1ed70:	mov	r2, r4
   1ed74:	mov	r3, #4
   1ed78:	bl	2883c <flatcc_json_parser_union_vector@@Base>
   1ed7c:	b	1e858 <main@@Base+0x8774>
   1ed80:	movw	r2, #29281	; 0x7261
   1ed84:	eor	r2, r2, r1, lsr #16
   1ed88:	lsr	r0, r0, #16
   1ed8c:	orr	r0, r0, r1, lsl #16
   1ed90:	movw	r1, #25970	; 0x6572
   1ed94:	movt	r1, #25460	; 0x6374
   1ed98:	eor	r0, r0, r1
   1ed9c:	orrs	r0, r0, r2
   1eda0:	bne	1ee64 <main@@Base+0x8d80>
   1eda4:	mov	r0, r5
   1eda8:	mov	r1, r7
   1edac:	mov	r2, r4
   1edb0:	mov	r3, #6
   1edb4:	bl	1a058 <main@@Base+0x3f74>
   1edb8:	mov	r1, r0
   1edbc:	cmp	r7, r0
   1edc0:	beq	1ee70 <main@@Base+0x8d8c>
   1edc4:	ldr	r0, [sp, #28]
   1edc8:	mov	r2, #1
   1edcc:	str	r2, [sp]
   1edd0:	str	r0, [sp, #4]
   1edd4:	movw	r0, #64868	; 0xfd64
   1edd8:	movt	r0, #1
   1eddc:	str	r0, [sp, #8]
   1ede0:	mov	r0, r5
   1ede4:	mov	r2, r4
   1ede8:	mov	r3, #0
   1edec:	bl	283c4 <flatcc_json_parser_union@@Base>
   1edf0:	b	1ee7c <main@@Base+0x8d98>
   1edf4:	and	r0, r1, #-16777216	; 0xff000000
   1edf8:	teq	r0, #1795162112	; 0x6b000000
   1edfc:	bne	1e848 <main@@Base+0x8764>
   1ee00:	mov	r0, r5
   1ee04:	mov	r1, r6
   1ee08:	mov	r2, r4
   1ee0c:	mov	r3, #1
   1ee10:	bl	1a058 <main@@Base+0x3f74>
   1ee14:	mov	r1, r0
   1ee18:	cmp	r6, r0
   1ee1c:	beq	1ee50 <main@@Base+0x8d6c>
   1ee20:	ldr	r0, [sp, #28]
   1ee24:	mov	r2, #5
   1ee28:	str	r2, [sp]
   1ee2c:	str	r0, [sp, #4]
   1ee30:	movw	r0, #64868	; 0xfd64
   1ee34:	movt	r0, #1
   1ee38:	str	r0, [sp, #8]
   1ee3c:	mov	r0, r5
   1ee40:	mov	r2, r4
   1ee44:	mov	r3, #2
   1ee48:	bl	283c4 <flatcc_json_parser_union@@Base>
   1ee4c:	b	1e858 <main@@Base+0x8774>
   1ee50:	mov	r0, r5
   1ee54:	b	1e850 <main@@Base+0x876c>
   1ee58:	mov	r0, r5
   1ee5c:	mov	r1, r6
   1ee60:	b	1ee74 <main@@Base+0x8d90>
   1ee64:	mov	r0, r5
   1ee68:	mov	r1, r7
   1ee6c:	b	1ee74 <main@@Base+0x8d90>
   1ee70:	mov	r0, r5
   1ee74:	mov	r2, r4
   1ee78:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee7c:	mov	r1, r0
   1ee80:	movw	r9, #29797	; 0x7465
   1ee84:	movt	r9, #24931	; 0x6163
   1ee88:	add	r7, sp, #32
   1ee8c:	b	1e85c <main@@Base+0x8778>
   1ee90:	ldr	r0, [r5, #24]
   1ee94:	cmp	r0, #0
   1ee98:	bne	1e7a4 <main@@Base+0x86c0>
   1ee9c:	ldr	r3, [sp, #28]
   1eea0:	mov	r0, r5
   1eea4:	mov	r1, r6
   1eea8:	mov	r2, r4
   1eeac:	bl	28368 <flatcc_json_parser_finalize_unions@@Base>
   1eeb0:	mov	r6, r0
   1eeb4:	ldr	r0, [r5]
   1eeb8:	bl	23848 <flatcc_builder_end_table@@Base>
   1eebc:	ldr	r1, [sp, #20]
   1eec0:	str	r0, [r1]
   1eec4:	cmp	r0, #0
   1eec8:	bne	1e7bc <main@@Base+0x86d8>
   1eecc:	b	1e7a4 <main@@Base+0x86c0>
   1eed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eed4:	add	fp, sp, #28
   1eed8:	sub	sp, sp, #20
   1eedc:	mov	r6, r3
   1eee0:	mov	r4, r2
   1eee4:	mov	r9, r1
   1eee8:	mov	r5, r0
   1eeec:	mov	r0, #0
   1eef0:	str	r0, [r3]
   1eef4:	ldr	r0, [r5]
   1eef8:	mov	r1, #2
   1eefc:	bl	2313c <flatcc_builder_start_table@@Base>
   1ef00:	cmp	r0, #0
   1ef04:	bne	1f1d4 <main@@Base+0x90f0>
   1ef08:	str	r6, [sp, #4]
   1ef0c:	add	r3, sp, #16
   1ef10:	mov	r0, r5
   1ef14:	mov	r1, r9
   1ef18:	mov	r2, r4
   1ef1c:	bl	19f80 <main@@Base+0x3e9c>
   1ef20:	mov	r9, r0
   1ef24:	ldr	r0, [sp, #16]
   1ef28:	cmp	r0, #0
   1ef2c:	beq	1f1c8 <main@@Base+0x90e4>
   1ef30:	movw	sl, #24929	; 0x6161
   1ef34:	movt	sl, #24929	; 0x6161
   1ef38:	movw	r7, #25186	; 0x6262
   1ef3c:	movt	r7, #24418	; 0x5f62
   1ef40:	add	r8, sp, #16
   1ef44:	b	1ef80 <main@@Base+0x8e9c>
   1ef48:	mov	r0, r5
   1ef4c:	mov	r1, r6
   1ef50:	mov	r2, r4
   1ef54:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1ef58:	mov	r9, r0
   1ef5c:	mov	r0, r5
   1ef60:	mov	r1, r9
   1ef64:	mov	r2, r4
   1ef68:	mov	r3, r8
   1ef6c:	bl	1cf98 <main@@Base+0x6eb4>
   1ef70:	mov	r9, r0
   1ef74:	ldr	r0, [sp, #16]
   1ef78:	cmp	r0, #0
   1ef7c:	beq	1f1c8 <main@@Base+0x90e4>
   1ef80:	mov	r0, r5
   1ef84:	mov	r1, r9
   1ef88:	mov	r2, r4
   1ef8c:	bl	1a010 <main@@Base+0x3f2c>
   1ef90:	mov	r6, r0
   1ef94:	mov	r1, r4
   1ef98:	bl	1a054 <main@@Base+0x3f70>
   1ef9c:	eor	r1, r1, sl
   1efa0:	eor	r0, r0, r7
   1efa4:	orrs	r0, r0, r1
   1efa8:	bne	1ef48 <main@@Base+0x8e64>
   1efac:	add	r6, r6, #8
   1efb0:	mov	r0, r6
   1efb4:	mov	r1, r4
   1efb8:	bl	1a054 <main@@Base+0x3f70>
   1efbc:	lsr	r2, r0, #8
   1efc0:	orr	r2, r2, r1, lsl #24
   1efc4:	movw	r3, #28787	; 0x7073
   1efc8:	movt	r3, #29797	; 0x7465
   1efcc:	eor	r2, r2, r3
   1efd0:	movw	r3, #24435	; 0x5f73
   1efd4:	movt	r3, #98	; 0x62
   1efd8:	eor	r3, r3, r1, lsr #8
   1efdc:	orrs	r2, r2, r3
   1efe0:	bne	1f03c <main@@Base+0x8f58>
   1efe4:	mov	r0, r5
   1efe8:	mov	r1, r6
   1efec:	mov	r2, r4
   1eff0:	mov	r3, #7
   1eff4:	bl	1a058 <main@@Base+0x3f74>
   1eff8:	mov	r7, r0
   1effc:	cmp	r6, r0
   1f000:	beq	1f0b8 <main@@Base+0x8fd4>
   1f004:	mov	r0, #0
   1f008:	str	r0, [sp, #12]
   1f00c:	str	r0, [sp, #8]
   1f010:	mov	r0, r5
   1f014:	mov	r1, r7
   1f018:	mov	r2, r4
   1f01c:	add	r9, sp, #8
   1f020:	mov	r3, r9
   1f024:	bl	1c8d0 <main@@Base+0x67ec>
   1f028:	mov	r6, r0
   1f02c:	cmp	r7, r0
   1f030:	beq	1f0d0 <main@@Base+0x8fec>
   1f034:	mov	r9, r6
   1f038:	b	1f0fc <main@@Base+0x9018>
   1f03c:	movw	r2, #29791	; 0x745f
   1f040:	movt	r2, #24946	; 0x6172
   1f044:	eor	r0, r0, r2
   1f048:	movw	r2, #29556	; 0x7374
   1f04c:	movt	r2, #25183	; 0x625f
   1f050:	eor	r1, r1, r2
   1f054:	orrs	r0, r0, r1
   1f058:	bne	1ef48 <main@@Base+0x8e64>
   1f05c:	mov	r0, r5
   1f060:	mov	r1, r6
   1f064:	mov	r2, r4
   1f068:	mov	r3, #8
   1f06c:	bl	1a058 <main@@Base+0x3f74>
   1f070:	mov	r7, r0
   1f074:	cmp	r6, r0
   1f078:	beq	1f0b8 <main@@Base+0x8fd4>
   1f07c:	mov	r0, #0
   1f080:	str	r0, [sp, #8]
   1f084:	mov	r0, r5
   1f088:	mov	r1, r7
   1f08c:	mov	r2, r4
   1f090:	add	r9, sp, #8
   1f094:	mov	r3, r9
   1f098:	bl	1cab8 <main@@Base+0x69d4>
   1f09c:	mov	r6, r0
   1f0a0:	cmp	r7, r0
   1f0a4:	beq	1f154 <main@@Base+0x9070>
   1f0a8:	mov	r9, r6
   1f0ac:	movw	r7, #25186	; 0x6262
   1f0b0:	movt	r7, #24418	; 0x5f62
   1f0b4:	b	1f188 <main@@Base+0x90a4>
   1f0b8:	mov	r0, r5
   1f0bc:	mov	r1, r7
   1f0c0:	mov	r2, r4
   1f0c4:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1f0c8:	mov	r9, r0
   1f0cc:	b	1f148 <main@@Base+0x9064>
   1f0d0:	str	r9, [sp]
   1f0d4:	mov	r0, r5
   1f0d8:	mov	r1, r6
   1f0dc:	mov	r2, r4
   1f0e0:	movw	r3, #41512	; 0xa228
   1f0e4:	movt	r3, #4
   1f0e8:	bl	1c964 <main@@Base+0x6880>
   1f0ec:	mov	r9, r0
   1f0f0:	cmp	r0, r6
   1f0f4:	cmpne	r9, r4
   1f0f8:	beq	1f1d4 <main@@Base+0x90f0>
   1f0fc:	mov	r7, sl
   1f100:	ldr	r6, [sp, #8]
   1f104:	ldr	sl, [sp, #12]
   1f108:	orrs	r0, r6, sl
   1f10c:	bne	1f11c <main@@Base+0x9038>
   1f110:	ldrb	r0, [r5, #8]
   1f114:	tst	r0, #2
   1f118:	beq	1f144 <main@@Base+0x9060>
   1f11c:	ldr	r0, [r5]
   1f120:	mov	r1, #0
   1f124:	mov	r2, #8
   1f128:	mov	r3, #8
   1f12c:	bl	23f38 <flatcc_builder_table_add@@Base>
   1f130:	cmp	r0, #0
   1f134:	beq	1f1d4 <main@@Base+0x90f0>
   1f138:	mov	r2, r6
   1f13c:	mov	r3, sl
   1f140:	bl	1ca90 <main@@Base+0x69ac>
   1f144:	mov	sl, r7
   1f148:	movw	r7, #25186	; 0x6262
   1f14c:	movt	r7, #24418	; 0x5f62
   1f150:	b	1ef5c <main@@Base+0x8e78>
   1f154:	str	r9, [sp]
   1f158:	mov	r0, r5
   1f15c:	mov	r1, r6
   1f160:	mov	r2, r4
   1f164:	movw	r3, #41524	; 0xa234
   1f168:	movt	r3, #4
   1f16c:	bl	1cb48 <main@@Base+0x6a64>
   1f170:	mov	r9, r0
   1f174:	cmp	r0, r6
   1f178:	movw	r7, #25186	; 0x6262
   1f17c:	movt	r7, #24418	; 0x5f62
   1f180:	cmpne	r9, r4
   1f184:	beq	1f1d4 <main@@Base+0x90f0>
   1f188:	ldr	r6, [sp, #8]
   1f18c:	cmp	r6, #0
   1f190:	bne	1f1a0 <main@@Base+0x90bc>
   1f194:	ldrb	r0, [r5, #8]
   1f198:	tst	r0, #2
   1f19c:	beq	1ef5c <main@@Base+0x8e78>
   1f1a0:	ldr	r0, [r5]
   1f1a4:	mov	r1, #1
   1f1a8:	mov	r2, #4
   1f1ac:	mov	r3, #4
   1f1b0:	bl	23f38 <flatcc_builder_table_add@@Base>
   1f1b4:	cmp	r0, #0
   1f1b8:	beq	1f1d4 <main@@Base+0x90f0>
   1f1bc:	mov	r1, r6
   1f1c0:	bl	1cc64 <main@@Base+0x6b80>
   1f1c4:	b	1ef5c <main@@Base+0x8e78>
   1f1c8:	ldr	r0, [r5, #24]
   1f1cc:	cmp	r0, #0
   1f1d0:	beq	1f1f8 <main@@Base+0x9114>
   1f1d4:	mov	r0, r5
   1f1d8:	mov	r1, r9
   1f1dc:	mov	r2, r4
   1f1e0:	mov	r3, #33	; 0x21
   1f1e4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1f1e8:	mov	r9, r0
   1f1ec:	mov	r0, r9
   1f1f0:	sub	sp, fp, #28
   1f1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1f8:	ldr	r0, [r5]
   1f1fc:	bl	23848 <flatcc_builder_end_table@@Base>
   1f200:	ldr	r1, [sp, #4]
   1f204:	str	r0, [r1]
   1f208:	cmp	r0, #0
   1f20c:	bne	1f1ec <main@@Base+0x9108>
   1f210:	b	1f1d4 <main@@Base+0x90f0>
   1f214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f218:	add	fp, sp, #28
   1f21c:	sub	sp, sp, #44	; 0x2c
   1f220:	mov	r5, r3
   1f224:	mov	r4, r2
   1f228:	mov	r8, r1
   1f22c:	mov	sl, r0
   1f230:	mov	r0, #0
   1f234:	str	r0, [r3]
   1f238:	ldr	r0, [sl]
   1f23c:	mov	r1, #9
   1f240:	bl	2313c <flatcc_builder_start_table@@Base>
   1f244:	cmp	r0, #0
   1f248:	beq	1f270 <main@@Base+0x918c>
   1f24c:	mov	r0, sl
   1f250:	mov	r1, r8
   1f254:	mov	r2, r4
   1f258:	mov	r3, #33	; 0x21
   1f25c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1f260:	mov	r8, r0
   1f264:	mov	r0, r8
   1f268:	sub	sp, fp, #28
   1f26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f270:	str	r5, [sp, #8]
   1f274:	sub	r3, fp, #32
   1f278:	mov	r0, sl
   1f27c:	mov	r1, r8
   1f280:	mov	r2, r4
   1f284:	bl	19f80 <main@@Base+0x3e9c>
   1f288:	mov	r8, r0
   1f28c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f290:	cmp	r0, #0
   1f294:	beq	1f940 <main@@Base+0x985c>
   1f298:	movw	r1, #24929	; 0x6161
   1f29c:	movt	r1, #24929	; 0x6161
   1f2a0:	add	r9, sp, #24
   1f2a4:	movw	r0, #257	; 0x101
   1f2a8:	movt	r0, #257	; 0x101
   1f2ac:	add	r0, r1, r0
   1f2b0:	str	r0, [sp, #16]
   1f2b4:	movw	r0, #514	; 0x202
   1f2b8:	movt	r0, #514	; 0x202
   1f2bc:	add	r0, r1, r0
   1f2c0:	str	r0, [sp, #20]
   1f2c4:	movw	r0, #771	; 0x303
   1f2c8:	movt	r0, #771	; 0x303
   1f2cc:	add	r0, r1, r0
   1f2d0:	str	r0, [sp, #12]
   1f2d4:	b	1f310 <main@@Base+0x922c>
   1f2d8:	mov	r0, sl
   1f2dc:	mov	r1, r6
   1f2e0:	mov	r2, r4
   1f2e4:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1f2e8:	mov	r8, r0
   1f2ec:	mov	r0, sl
   1f2f0:	mov	r1, r8
   1f2f4:	mov	r2, r4
   1f2f8:	sub	r3, fp, #32
   1f2fc:	bl	1cf98 <main@@Base+0x6eb4>
   1f300:	mov	r8, r0
   1f304:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1f308:	cmp	r0, #0
   1f30c:	beq	1f940 <main@@Base+0x985c>
   1f310:	mov	r0, sl
   1f314:	mov	r1, r8
   1f318:	mov	r2, r4
   1f31c:	bl	1a010 <main@@Base+0x3f2c>
   1f320:	mov	r7, r0
   1f324:	mov	r1, r4
   1f328:	bl	1a054 <main@@Base+0x3f70>
   1f32c:	mov	r6, r1
   1f330:	movw	r1, #25442	; 0x6362
   1f334:	movt	r1, #25443	; 0x6363
   1f338:	cmp	r6, r1
   1f33c:	bhi	1f3cc <main@@Base+0x92e8>
   1f340:	movw	r1, #13108	; 0x3334
   1f344:	movt	r1, #12594	; 0x3132
   1f348:	eor	r5, r0, r1
   1f34c:	movw	r1, #24929	; 0x6161
   1f350:	movt	r1, #24929	; 0x6161
   1f354:	eor	r0, r6, r1
   1f358:	orrs	r0, r5, r0
   1f35c:	bne	1f43c <main@@Base+0x9358>
   1f360:	add	r6, r7, #8
   1f364:	mov	r0, r6
   1f368:	mov	r1, r4
   1f36c:	bl	1a054 <main@@Base+0x3f70>
   1f370:	and	r0, r1, #-16777216	; 0xff000000
   1f374:	teq	r0, #889192448	; 0x35000000
   1f378:	bne	1f2d8 <main@@Base+0x91f4>
   1f37c:	mov	r0, sl
   1f380:	mov	r1, r6
   1f384:	mov	r2, r4
   1f388:	mov	r3, #1
   1f38c:	bl	1a058 <main@@Base+0x3f74>
   1f390:	mov	r7, r0
   1f394:	cmp	r6, r0
   1f398:	beq	1f758 <main@@Base+0x9674>
   1f39c:	mov	r0, #0
   1f3a0:	str	r0, [sp, #24]
   1f3a4:	mov	r0, sl
   1f3a8:	mov	r1, r7
   1f3ac:	mov	r2, r4
   1f3b0:	mov	r3, r9
   1f3b4:	bl	1cab8 <main@@Base+0x69d4>
   1f3b8:	mov	r6, r0
   1f3bc:	cmp	r7, r0
   1f3c0:	beq	1f764 <main@@Base+0x9680>
   1f3c4:	mov	r8, r6
   1f3c8:	b	1f790 <main@@Base+0x96ac>
   1f3cc:	movw	r1, #13108	; 0x3334
   1f3d0:	movt	r1, #12594	; 0x3132
   1f3d4:	eor	r5, r0, r1
   1f3d8:	ldr	r0, [sp, #20]
   1f3dc:	eor	r0, r6, r0
   1f3e0:	orrs	r0, r5, r0
   1f3e4:	bne	1f490 <main@@Base+0x93ac>
   1f3e8:	mov	r0, sl
   1f3ec:	mov	r1, r7
   1f3f0:	mov	r2, r4
   1f3f4:	mov	r3, #8
   1f3f8:	bl	1a058 <main@@Base+0x3f74>
   1f3fc:	mov	r6, r0
   1f400:	cmp	r7, r0
   1f404:	beq	1f4ec <main@@Base+0x9408>
   1f408:	mov	r0, #0
   1f40c:	str	r0, [sp, #28]
   1f410:	str	r0, [sp, #24]
   1f414:	mov	r0, sl
   1f418:	mov	r1, r6
   1f41c:	mov	r2, r4
   1f420:	mov	r3, r9
   1f424:	bl	1c8d0 <main@@Base+0x67ec>
   1f428:	mov	r7, r0
   1f42c:	cmp	r6, r0
   1f430:	beq	1f558 <main@@Base+0x9474>
   1f434:	mov	r8, r7
   1f438:	b	1f584 <main@@Base+0x94a0>
   1f43c:	teq	r6, r1
   1f440:	bne	1f5b0 <main@@Base+0x94cc>
   1f444:	mov	r0, sl
   1f448:	mov	r1, r7
   1f44c:	mov	r2, r4
   1f450:	mov	r3, #4
   1f454:	bl	1a058 <main@@Base+0x3f74>
   1f458:	mov	r1, r0
   1f45c:	cmp	r7, r0
   1f460:	beq	1f5ac <main@@Base+0x94c8>
   1f464:	mov	r0, sl
   1f468:	mov	r2, r4
   1f46c:	add	r3, sp, #36	; 0x24
   1f470:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   1f474:	mov	r8, r0
   1f478:	ldr	r0, [sp, #36]	; 0x24
   1f47c:	cmp	r0, #0
   1f480:	beq	1f24c <main@@Base+0x9168>
   1f484:	ldr	r0, [sl]
   1f488:	mov	r1, #0
   1f48c:	b	1f66c <main@@Base+0x9588>
   1f490:	movw	r0, #25443	; 0x6363
   1f494:	movt	r0, #25443	; 0x6363
   1f498:	teq	r6, r0
   1f49c:	bne	1f688 <main@@Base+0x95a4>
   1f4a0:	mov	r0, sl
   1f4a4:	mov	r1, r7
   1f4a8:	mov	r2, r4
   1f4ac:	mov	r3, #4
   1f4b0:	bl	1a058 <main@@Base+0x3f74>
   1f4b4:	mov	r1, r0
   1f4b8:	cmp	r7, r0
   1f4bc:	beq	1f684 <main@@Base+0x95a0>
   1f4c0:	mov	r0, sl
   1f4c4:	mov	r2, r4
   1f4c8:	add	r3, sp, #36	; 0x24
   1f4cc:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   1f4d0:	mov	r8, r0
   1f4d4:	ldr	r0, [sp, #36]	; 0x24
   1f4d8:	cmp	r0, #0
   1f4dc:	beq	1f24c <main@@Base+0x9168>
   1f4e0:	ldr	r0, [sl]
   1f4e4:	mov	r1, #4
   1f4e8:	b	1f66c <main@@Base+0x9588>
   1f4ec:	add	r6, r6, #8
   1f4f0:	mov	r0, r6
   1f4f4:	mov	r1, r4
   1f4f8:	bl	1a054 <main@@Base+0x3f70>
   1f4fc:	and	r0, r1, #-16777216	; 0xff000000
   1f500:	teq	r0, #889192448	; 0x35000000
   1f504:	bne	1f2d8 <main@@Base+0x91f4>
   1f508:	mov	r0, sl
   1f50c:	mov	r1, r6
   1f510:	mov	r2, r4
   1f514:	mov	r3, #1
   1f518:	bl	1a058 <main@@Base+0x3f74>
   1f51c:	mov	r7, r0
   1f520:	cmp	r6, r0
   1f524:	beq	1f758 <main@@Base+0x9674>
   1f528:	mov	r0, #0
   1f52c:	str	r0, [sp, #24]
   1f530:	mov	r0, sl
   1f534:	mov	r1, r7
   1f538:	mov	r2, r4
   1f53c:	mov	r3, r9
   1f540:	bl	1cab8 <main@@Base+0x69d4>
   1f544:	mov	r6, r0
   1f548:	cmp	r7, r0
   1f54c:	beq	1f884 <main@@Base+0x97a0>
   1f550:	mov	r8, r6
   1f554:	b	1f8b0 <main@@Base+0x97cc>
   1f558:	str	r9, [sp]
   1f55c:	mov	r0, sl
   1f560:	mov	r1, r7
   1f564:	mov	r2, r4
   1f568:	movw	r3, #41560	; 0xa258
   1f56c:	movt	r3, #4
   1f570:	bl	1c964 <main@@Base+0x6880>
   1f574:	mov	r8, r0
   1f578:	cmp	r0, r7
   1f57c:	cmpne	r8, r4
   1f580:	beq	1f24c <main@@Base+0x9168>
   1f584:	ldr	r6, [sp, #24]
   1f588:	ldr	r7, [sp, #28]
   1f58c:	orrs	r0, r6, r7
   1f590:	bne	1f5a0 <main@@Base+0x94bc>
   1f594:	ldrb	r0, [sl, #8]
   1f598:	tst	r0, #2
   1f59c:	beq	1f2ec <main@@Base+0x9208>
   1f5a0:	ldr	r0, [sl]
   1f5a4:	mov	r1, #5
   1f5a8:	b	1f858 <main@@Base+0x9774>
   1f5ac:	mov	r7, r1
   1f5b0:	ldr	r0, [sp, #16]
   1f5b4:	eor	r0, r6, r0
   1f5b8:	orrs	r0, r5, r0
   1f5bc:	bne	1f614 <main@@Base+0x9530>
   1f5c0:	mov	r0, sl
   1f5c4:	mov	r1, r7
   1f5c8:	mov	r2, r4
   1f5cc:	mov	r3, #8
   1f5d0:	bl	1a058 <main@@Base+0x3f74>
   1f5d4:	mov	r6, r0
   1f5d8:	cmp	r7, r0
   1f5dc:	beq	1f2d8 <main@@Base+0x91f4>
   1f5e0:	mov	r0, #0
   1f5e4:	str	r0, [sp, #28]
   1f5e8:	str	r0, [sp, #24]
   1f5ec:	mov	r0, sl
   1f5f0:	mov	r1, r6
   1f5f4:	mov	r2, r4
   1f5f8:	mov	r3, r9
   1f5fc:	bl	1c8d0 <main@@Base+0x67ec>
   1f600:	mov	r7, r0
   1f604:	cmp	r6, r0
   1f608:	beq	1f7b4 <main@@Base+0x96d0>
   1f60c:	mov	r8, r7
   1f610:	b	1f7e0 <main@@Base+0x96fc>
   1f614:	movw	r0, #25186	; 0x6262
   1f618:	movt	r0, #25186	; 0x6262
   1f61c:	teq	r6, r0
   1f620:	bne	1f758 <main@@Base+0x9674>
   1f624:	mov	r0, sl
   1f628:	mov	r1, r7
   1f62c:	mov	r2, r4
   1f630:	mov	r3, #4
   1f634:	bl	1a058 <main@@Base+0x3f74>
   1f638:	mov	r1, r0
   1f63c:	cmp	r7, r0
   1f640:	beq	1f87c <main@@Base+0x9798>
   1f644:	mov	r0, sl
   1f648:	mov	r2, r4
   1f64c:	add	r3, sp, #36	; 0x24
   1f650:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   1f654:	mov	r8, r0
   1f658:	ldr	r0, [sp, #36]	; 0x24
   1f65c:	cmp	r0, #0
   1f660:	beq	1f24c <main@@Base+0x9168>
   1f664:	ldr	r0, [sl]
   1f668:	mov	r1, #2
   1f66c:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   1f670:	cmp	r0, #0
   1f674:	beq	1f24c <main@@Base+0x9168>
   1f678:	ldr	r1, [sp, #36]	; 0x24
   1f67c:	str	r1, [r0]
   1f680:	b	1f2ec <main@@Base+0x9208>
   1f684:	mov	r7, r1
   1f688:	ldr	r0, [sp, #12]
   1f68c:	eor	r0, r6, r0
   1f690:	orrs	r0, r5, r0
   1f694:	bne	1f758 <main@@Base+0x9674>
   1f698:	mov	r0, sl
   1f69c:	mov	r1, r7
   1f6a0:	mov	r2, r4
   1f6a4:	mov	r3, #8
   1f6a8:	bl	1a058 <main@@Base+0x3f74>
   1f6ac:	mov	r6, r0
   1f6b0:	cmp	r7, r0
   1f6b4:	beq	1f6ec <main@@Base+0x9608>
   1f6b8:	mov	r0, #0
   1f6bc:	str	r0, [sp, #28]
   1f6c0:	str	r0, [sp, #24]
   1f6c4:	mov	r0, sl
   1f6c8:	mov	r1, r6
   1f6cc:	mov	r2, r4
   1f6d0:	mov	r3, r9
   1f6d4:	bl	1c8d0 <main@@Base+0x67ec>
   1f6d8:	mov	r7, r0
   1f6dc:	cmp	r6, r0
   1f6e0:	beq	1f808 <main@@Base+0x9724>
   1f6e4:	mov	r8, r7
   1f6e8:	b	1f834 <main@@Base+0x9750>
   1f6ec:	add	r6, r6, #8
   1f6f0:	mov	r0, r6
   1f6f4:	mov	r1, r4
   1f6f8:	bl	1a054 <main@@Base+0x3f70>
   1f6fc:	and	r0, r1, #-16777216	; 0xff000000
   1f700:	teq	r0, #889192448	; 0x35000000
   1f704:	bne	1f2d8 <main@@Base+0x91f4>
   1f708:	mov	r0, sl
   1f70c:	mov	r1, r6
   1f710:	mov	r2, r4
   1f714:	mov	r3, #1
   1f718:	bl	1a058 <main@@Base+0x3f74>
   1f71c:	mov	r7, r0
   1f720:	cmp	r6, r0
   1f724:	beq	1f758 <main@@Base+0x9674>
   1f728:	mov	r0, #0
   1f72c:	str	r0, [sp, #24]
   1f730:	mov	r0, sl
   1f734:	mov	r1, r7
   1f738:	mov	r2, r4
   1f73c:	mov	r3, r9
   1f740:	bl	1cab8 <main@@Base+0x69d4>
   1f744:	mov	r6, r0
   1f748:	cmp	r7, r0
   1f74c:	beq	1f8d4 <main@@Base+0x97f0>
   1f750:	mov	r8, r6
   1f754:	b	1f900 <main@@Base+0x981c>
   1f758:	mov	r0, sl
   1f75c:	mov	r1, r7
   1f760:	b	1f2e0 <main@@Base+0x91fc>
   1f764:	str	r9, [sp]
   1f768:	mov	r0, sl
   1f76c:	mov	r1, r6
   1f770:	mov	r2, r4
   1f774:	movw	r3, #41536	; 0xa240
   1f778:	movt	r3, #4
   1f77c:	bl	1cb48 <main@@Base+0x6a64>
   1f780:	mov	r8, r0
   1f784:	cmp	r0, r6
   1f788:	cmpne	r8, r4
   1f78c:	beq	1f24c <main@@Base+0x9168>
   1f790:	ldr	r6, [sp, #24]
   1f794:	cmp	r6, #0
   1f798:	bne	1f7a8 <main@@Base+0x96c4>
   1f79c:	ldrb	r0, [sl, #8]
   1f7a0:	tst	r0, #2
   1f7a4:	beq	1f2ec <main@@Base+0x9208>
   1f7a8:	ldr	r0, [sl]
   1f7ac:	mov	r1, #1
   1f7b0:	b	1f920 <main@@Base+0x983c>
   1f7b4:	str	r9, [sp]
   1f7b8:	mov	r0, sl
   1f7bc:	mov	r1, r7
   1f7c0:	mov	r2, r4
   1f7c4:	movw	r3, #41548	; 0xa24c
   1f7c8:	movt	r3, #4
   1f7cc:	bl	1c964 <main@@Base+0x6880>
   1f7d0:	mov	r8, r0
   1f7d4:	cmp	r0, r7
   1f7d8:	cmpne	r8, r4
   1f7dc:	beq	1f24c <main@@Base+0x9168>
   1f7e0:	ldr	r6, [sp, #24]
   1f7e4:	ldr	r7, [sp, #28]
   1f7e8:	orrs	r0, r6, r7
   1f7ec:	bne	1f7fc <main@@Base+0x9718>
   1f7f0:	ldrb	r0, [sl, #8]
   1f7f4:	tst	r0, #2
   1f7f8:	beq	1f2ec <main@@Base+0x9208>
   1f7fc:	ldr	r0, [sl]
   1f800:	mov	r1, #3
   1f804:	b	1f858 <main@@Base+0x9774>
   1f808:	str	r9, [sp]
   1f80c:	mov	r0, sl
   1f810:	mov	r1, r7
   1f814:	mov	r2, r4
   1f818:	movw	r3, #41584	; 0xa270
   1f81c:	movt	r3, #4
   1f820:	bl	1c964 <main@@Base+0x6880>
   1f824:	mov	r8, r0
   1f828:	cmp	r0, r7
   1f82c:	cmpne	r8, r4
   1f830:	beq	1f24c <main@@Base+0x9168>
   1f834:	ldr	r6, [sp, #24]
   1f838:	ldr	r7, [sp, #28]
   1f83c:	orrs	r0, r6, r7
   1f840:	bne	1f850 <main@@Base+0x976c>
   1f844:	ldrb	r0, [sl, #8]
   1f848:	tst	r0, #2
   1f84c:	beq	1f2ec <main@@Base+0x9208>
   1f850:	ldr	r0, [sl]
   1f854:	mov	r1, #7
   1f858:	mov	r2, #8
   1f85c:	mov	r3, #8
   1f860:	bl	23f38 <flatcc_builder_table_add@@Base>
   1f864:	cmp	r0, #0
   1f868:	beq	1f24c <main@@Base+0x9168>
   1f86c:	mov	r2, r6
   1f870:	mov	r3, r7
   1f874:	bl	1ca90 <main@@Base+0x69ac>
   1f878:	b	1f2ec <main@@Base+0x9208>
   1f87c:	mov	r0, sl
   1f880:	b	1f2e0 <main@@Base+0x91fc>
   1f884:	str	r9, [sp]
   1f888:	mov	r0, sl
   1f88c:	mov	r1, r6
   1f890:	mov	r2, r4
   1f894:	movw	r3, #41572	; 0xa264
   1f898:	movt	r3, #4
   1f89c:	bl	1cb48 <main@@Base+0x6a64>
   1f8a0:	mov	r8, r0
   1f8a4:	cmp	r0, r6
   1f8a8:	cmpne	r8, r4
   1f8ac:	beq	1f24c <main@@Base+0x9168>
   1f8b0:	ldr	r6, [sp, #24]
   1f8b4:	cmp	r6, #0
   1f8b8:	bne	1f8c8 <main@@Base+0x97e4>
   1f8bc:	ldrb	r0, [sl, #8]
   1f8c0:	tst	r0, #2
   1f8c4:	beq	1f2ec <main@@Base+0x9208>
   1f8c8:	ldr	r0, [sl]
   1f8cc:	mov	r1, #6
   1f8d0:	b	1f920 <main@@Base+0x983c>
   1f8d4:	str	r9, [sp]
   1f8d8:	mov	r0, sl
   1f8dc:	mov	r1, r6
   1f8e0:	mov	r2, r4
   1f8e4:	movw	r3, #41596	; 0xa27c
   1f8e8:	movt	r3, #4
   1f8ec:	bl	1cb48 <main@@Base+0x6a64>
   1f8f0:	mov	r8, r0
   1f8f4:	cmp	r0, r6
   1f8f8:	cmpne	r8, r4
   1f8fc:	beq	1f24c <main@@Base+0x9168>
   1f900:	ldr	r6, [sp, #24]
   1f904:	cmp	r6, #0
   1f908:	bne	1f918 <main@@Base+0x9834>
   1f90c:	ldrb	r0, [sl, #8]
   1f910:	tst	r0, #2
   1f914:	beq	1f2ec <main@@Base+0x9208>
   1f918:	ldr	r0, [sl]
   1f91c:	mov	r1, #8
   1f920:	mov	r2, #4
   1f924:	mov	r3, #4
   1f928:	bl	23f38 <flatcc_builder_table_add@@Base>
   1f92c:	cmp	r0, #0
   1f930:	beq	1f24c <main@@Base+0x9168>
   1f934:	mov	r1, r6
   1f938:	bl	1cc64 <main@@Base+0x6b80>
   1f93c:	b	1f2ec <main@@Base+0x9208>
   1f940:	ldr	r0, [sl, #24]
   1f944:	cmp	r0, #0
   1f948:	bne	1f24c <main@@Base+0x9168>
   1f94c:	ldr	r0, [sl]
   1f950:	bl	23848 <flatcc_builder_end_table@@Base>
   1f954:	ldr	r1, [sp, #8]
   1f958:	str	r0, [r1]
   1f95c:	cmp	r0, #0
   1f960:	bne	1f264 <main@@Base+0x9180>
   1f964:	b	1f24c <main@@Base+0x9168>
   1f968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f96c:	add	fp, sp, #28
   1f970:	sub	sp, sp, #20
   1f974:	mov	r6, r3
   1f978:	mov	r4, r2
   1f97c:	mov	r8, r1
   1f980:	mov	r5, r0
   1f984:	mov	r0, #0
   1f988:	str	r0, [r3]
   1f98c:	ldr	r0, [r5]
   1f990:	mov	r1, #2
   1f994:	bl	2313c <flatcc_builder_start_table@@Base>
   1f998:	cmp	r0, #0
   1f99c:	beq	1f9c4 <main@@Base+0x98e0>
   1f9a0:	mov	r0, r5
   1f9a4:	mov	r1, r8
   1f9a8:	mov	r2, r4
   1f9ac:	mov	r3, #33	; 0x21
   1f9b0:	bl	26998 <flatcc_json_parser_set_error@@Base>
   1f9b4:	mov	r8, r0
   1f9b8:	mov	r0, r8
   1f9bc:	sub	sp, fp, #28
   1f9c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9c4:	str	r6, [sp, #4]
   1f9c8:	add	r3, sp, #16
   1f9cc:	mov	r0, r5
   1f9d0:	mov	r1, r8
   1f9d4:	mov	r2, r4
   1f9d8:	bl	19f80 <main@@Base+0x3e9c>
   1f9dc:	mov	r8, r0
   1f9e0:	ldr	r0, [sp, #16]
   1f9e4:	cmp	r0, #0
   1f9e8:	beq	1fca4 <main@@Base+0x9bc0>
   1f9ec:	movw	r9, #24929	; 0x6161
   1f9f0:	movt	r9, #24929	; 0x6161
   1f9f4:	movw	sl, #25186	; 0x6262
   1f9f8:	movt	sl, #24418	; 0x5f62
   1f9fc:	add	r6, sp, #16
   1fa00:	b	1fa3c <main@@Base+0x9958>
   1fa04:	mov	r0, r5
   1fa08:	mov	r1, r7
   1fa0c:	mov	r2, r4
   1fa10:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa14:	mov	r8, r0
   1fa18:	mov	r0, r5
   1fa1c:	mov	r1, r8
   1fa20:	mov	r2, r4
   1fa24:	mov	r3, r6
   1fa28:	bl	1cf98 <main@@Base+0x6eb4>
   1fa2c:	mov	r8, r0
   1fa30:	ldr	r0, [sp, #16]
   1fa34:	cmp	r0, #0
   1fa38:	beq	1fca4 <main@@Base+0x9bc0>
   1fa3c:	mov	r0, r5
   1fa40:	mov	r1, r8
   1fa44:	mov	r2, r4
   1fa48:	bl	1a010 <main@@Base+0x3f2c>
   1fa4c:	mov	r7, r0
   1fa50:	mov	r1, r4
   1fa54:	bl	1a054 <main@@Base+0x3f70>
   1fa58:	eor	r1, r1, r9
   1fa5c:	eor	r0, r0, sl
   1fa60:	orrs	r0, r0, r1
   1fa64:	bne	1fa04 <main@@Base+0x9920>
   1fa68:	add	r6, r7, #8
   1fa6c:	mov	r0, r6
   1fa70:	mov	r1, r4
   1fa74:	bl	1a054 <main@@Base+0x3f70>
   1fa78:	movw	r2, #29556	; 0x7374
   1fa7c:	movt	r2, #25183	; 0x625f
   1fa80:	eor	r2, r1, r2
   1fa84:	movw	r3, #29791	; 0x745f
   1fa88:	movt	r3, #24946	; 0x6172
   1fa8c:	eor	r3, r0, r3
   1fa90:	orrs	r2, r3, r2
   1fa94:	bne	1fb18 <main@@Base+0x9a34>
   1fa98:	add	r6, r7, #16
   1fa9c:	mov	r0, r6
   1faa0:	mov	r1, r4
   1faa4:	bl	1a054 <main@@Base+0x3f70>
   1faa8:	movw	r2, #25968	; 0x6570
   1faac:	movt	r2, #29556	; 0x7374
   1fab0:	eor	r1, r1, r2
   1fab4:	and	r0, r0, #-16777216	; 0xff000000
   1fab8:	eor	r0, r0, #1929379840	; 0x73000000
   1fabc:	orrs	r0, r0, r1
   1fac0:	bne	1fb98 <main@@Base+0x9ab4>
   1fac4:	mov	r0, r5
   1fac8:	mov	r1, r6
   1facc:	mov	r2, r4
   1fad0:	mov	r3, #5
   1fad4:	bl	1a058 <main@@Base+0x3f74>
   1fad8:	mov	r7, r0
   1fadc:	cmp	r6, r0
   1fae0:	add	r8, sp, #8
   1fae4:	beq	1fba4 <main@@Base+0x9ac0>
   1fae8:	mov	r0, #0
   1faec:	str	r0, [sp, #8]
   1faf0:	mov	r0, r5
   1faf4:	mov	r1, r7
   1faf8:	mov	r2, r4
   1fafc:	mov	r3, r8
   1fb00:	bl	1cab8 <main@@Base+0x69d4>
   1fb04:	mov	r6, r0
   1fb08:	cmp	r7, r0
   1fb0c:	beq	1fbc0 <main@@Base+0x9adc>
   1fb10:	mov	r8, r6
   1fb14:	b	1fbec <main@@Base+0x9b08>
   1fb18:	movw	r2, #24435	; 0x5f73
   1fb1c:	movt	r2, #98	; 0x62
   1fb20:	eor	r2, r2, r1, lsr #8
   1fb24:	lsr	r0, r0, #8
   1fb28:	orr	r0, r0, r1, lsl #24
   1fb2c:	movw	r1, #28787	; 0x7073
   1fb30:	movt	r1, #29797	; 0x7465
   1fb34:	eor	r0, r0, r1
   1fb38:	orrs	r0, r0, r2
   1fb3c:	bne	1fb98 <main@@Base+0x9ab4>
   1fb40:	mov	r0, r5
   1fb44:	mov	r1, r6
   1fb48:	mov	r2, r4
   1fb4c:	mov	r3, #7
   1fb50:	bl	1a058 <main@@Base+0x3f74>
   1fb54:	mov	r7, r0
   1fb58:	cmp	r6, r0
   1fb5c:	add	r8, sp, #8
   1fb60:	beq	1fba4 <main@@Base+0x9ac0>
   1fb64:	mov	r0, #0
   1fb68:	str	r0, [sp, #12]
   1fb6c:	str	r0, [sp, #8]
   1fb70:	mov	r0, r5
   1fb74:	mov	r1, r7
   1fb78:	mov	r2, r4
   1fb7c:	mov	r3, r8
   1fb80:	bl	1c8d0 <main@@Base+0x67ec>
   1fb84:	mov	r6, r0
   1fb88:	cmp	r7, r0
   1fb8c:	beq	1fc2c <main@@Base+0x9b48>
   1fb90:	mov	r8, r6
   1fb94:	b	1fc58 <main@@Base+0x9b74>
   1fb98:	mov	r0, r5
   1fb9c:	mov	r1, r6
   1fba0:	b	1fbac <main@@Base+0x9ac8>
   1fba4:	mov	r0, r5
   1fba8:	mov	r1, r7
   1fbac:	mov	r2, r4
   1fbb0:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   1fbb4:	mov	r8, r0
   1fbb8:	add	r6, sp, #16
   1fbbc:	b	1fa18 <main@@Base+0x9934>
   1fbc0:	str	r8, [sp]
   1fbc4:	mov	r0, r5
   1fbc8:	mov	r1, r6
   1fbcc:	mov	r2, r4
   1fbd0:	movw	r3, #41608	; 0xa288
   1fbd4:	movt	r3, #4
   1fbd8:	bl	1cb48 <main@@Base+0x6a64>
   1fbdc:	mov	r8, r0
   1fbe0:	cmp	r0, r6
   1fbe4:	cmpne	r8, r4
   1fbe8:	beq	1f9a0 <main@@Base+0x98bc>
   1fbec:	ldr	r6, [sp, #8]
   1fbf0:	cmp	r6, #0
   1fbf4:	bne	1fc04 <main@@Base+0x9b20>
   1fbf8:	ldrb	r0, [r5, #8]
   1fbfc:	tst	r0, #2
   1fc00:	beq	1fc9c <main@@Base+0x9bb8>
   1fc04:	ldr	r0, [r5]
   1fc08:	mov	r1, #1
   1fc0c:	mov	r2, #4
   1fc10:	mov	r3, #4
   1fc14:	bl	23f38 <flatcc_builder_table_add@@Base>
   1fc18:	cmp	r0, #0
   1fc1c:	beq	1f9a0 <main@@Base+0x98bc>
   1fc20:	mov	r1, r6
   1fc24:	bl	1cc64 <main@@Base+0x6b80>
   1fc28:	b	1fc9c <main@@Base+0x9bb8>
   1fc2c:	str	r8, [sp]
   1fc30:	mov	r0, r5
   1fc34:	mov	r1, r6
   1fc38:	mov	r2, r4
   1fc3c:	movw	r3, #41620	; 0xa294
   1fc40:	movt	r3, #4
   1fc44:	bl	1c964 <main@@Base+0x6880>
   1fc48:	mov	r8, r0
   1fc4c:	cmp	r0, r6
   1fc50:	cmpne	r8, r4
   1fc54:	beq	1f9a0 <main@@Base+0x98bc>
   1fc58:	ldr	r6, [sp, #8]
   1fc5c:	ldr	r7, [sp, #12]
   1fc60:	orrs	r0, r6, r7
   1fc64:	bne	1fc74 <main@@Base+0x9b90>
   1fc68:	ldrb	r0, [r5, #8]
   1fc6c:	tst	r0, #2
   1fc70:	beq	1fc9c <main@@Base+0x9bb8>
   1fc74:	ldr	r0, [r5]
   1fc78:	mov	r1, #0
   1fc7c:	mov	r2, #8
   1fc80:	mov	r3, #8
   1fc84:	bl	23f38 <flatcc_builder_table_add@@Base>
   1fc88:	cmp	r0, #0
   1fc8c:	beq	1f9a0 <main@@Base+0x98bc>
   1fc90:	mov	r2, r6
   1fc94:	mov	r3, r7
   1fc98:	bl	1ca90 <main@@Base+0x69ac>
   1fc9c:	add	r6, sp, #16
   1fca0:	b	1fa18 <main@@Base+0x9934>
   1fca4:	ldr	r0, [r5, #24]
   1fca8:	cmp	r0, #0
   1fcac:	bne	1f9a0 <main@@Base+0x98bc>
   1fcb0:	ldr	r0, [r5]
   1fcb4:	bl	23848 <flatcc_builder_end_table@@Base>
   1fcb8:	ldr	r1, [sp, #4]
   1fcbc:	str	r0, [r1]
   1fcc0:	cmp	r0, #0
   1fcc4:	bne	1f9b8 <main@@Base+0x98d4>
   1fcc8:	b	1f9a0 <main@@Base+0x98bc>
   1fccc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fcd0:	add	fp, sp, #24
   1fcd4:	mov	r8, r3
   1fcd8:	mov	r5, r2
   1fcdc:	mov	r7, r1
   1fce0:	mov	r6, r0
   1fce4:	mov	r0, r1
   1fce8:	mov	r1, r2
   1fcec:	bl	1a054 <main@@Base+0x3f70>
   1fcf0:	movw	r2, #24946	; 0x6172
   1fcf4:	movt	r2, #17256	; 0x4368
   1fcf8:	eor	r1, r1, r2
   1fcfc:	movw	r2, #29797	; 0x7465
   1fd00:	movt	r2, #24931	; 0x6163
   1fd04:	eor	r0, r0, r2
   1fd08:	orrs	r0, r0, r1
   1fd0c:	bne	1fd5c <main@@Base+0x9c78>
   1fd10:	add	r4, r7, #8
   1fd14:	mov	r0, r4
   1fd18:	mov	r1, r5
   1fd1c:	bl	1a054 <main@@Base+0x3f70>
   1fd20:	and	r0, r1, #-16777216	; 0xff000000
   1fd24:	teq	r0, #1912602624	; 0x72000000
   1fd28:	bne	1fd5c <main@@Base+0x9c78>
   1fd2c:	mov	r0, r4
   1fd30:	mov	r1, r5
   1fd34:	mov	r2, #1
   1fd38:	bl	1d11c <main@@Base+0x7038>
   1fd3c:	cmp	r0, r4
   1fd40:	beq	1fd5c <main@@Base+0x9c78>
   1fd44:	mov	r1, r0
   1fd48:	mov	r0, r6
   1fd4c:	mov	r2, r5
   1fd50:	mov	r3, r8
   1fd54:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fd58:	b	1d67c <main@@Base+0x7598>
   1fd5c:	mov	r0, r7
   1fd60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fd64:	push	{r4, r5, r6, sl, fp, lr}
   1fd68:	add	fp, sp, #16
   1fd6c:	mov	r4, r2
   1fd70:	mov	r5, r0
   1fd74:	ldr	r6, [fp, #8]
   1fd78:	mov	r0, #0
   1fd7c:	str	r0, [r6]
   1fd80:	cmp	r3, #11
   1fd84:	bhi	1fdd4 <main@@Base+0x9cf0>
   1fd88:	add	r0, pc, #0
   1fd8c:	ldr	pc, [r0, r3, lsl #2]
   1fd90:	andeq	pc, r1, r0, lsl lr	; <UNPREDICTABLE>
   1fd94:	strdeq	pc, [r1], -r0
   1fd98:	andeq	pc, r1, r0, lsr #28
   1fd9c:	strdeq	pc, [r1], -r0
   1fda0:	strdeq	pc, [r1], -r0
   1fda4:	strdeq	pc, [r1], -r0
   1fda8:	strdeq	pc, [r1], -r0
   1fdac:	strdeq	pc, [r1], -r0
   1fdb0:	andeq	pc, r1, r4, lsr lr	; <UNPREDICTABLE>
   1fdb4:	andeq	pc, r1, r0, asr #27
   1fdb8:	andeq	pc, r1, r0, asr #27
   1fdbc:	ldrdeq	pc, [r1], -ip
   1fdc0:	mov	r0, r5
   1fdc4:	mov	r2, r4
   1fdc8:	mov	r3, r6
   1fdcc:	bl	2018c <main@@Base+0xa0a8>
   1fdd0:	b	1fe44 <main@@Base+0x9d60>
   1fdd4:	cmp	r3, #255	; 0xff
   1fdd8:	bne	1fdf0 <main@@Base+0x9d0c>
   1fddc:	mov	r0, r5
   1fde0:	mov	r2, r4
   1fde4:	mov	r3, r6
   1fde8:	bl	281a8 <flatcc_json_parser_build_string@@Base>
   1fdec:	b	1fe44 <main@@Base+0x9d60>
   1fdf0:	ldrb	r0, [r5, #8]
   1fdf4:	tst	r0, #1
   1fdf8:	bne	1fe7c <main@@Base+0x9d98>
   1fdfc:	mov	r0, r5
   1fe00:	mov	r2, r4
   1fe04:	mov	r3, #15
   1fe08:	pop	{r4, r5, r6, sl, fp, lr}
   1fe0c:	b	26998 <flatcc_json_parser_set_error@@Base>
   1fe10:	mov	r0, r5
   1fe14:	mov	r2, r4
   1fe18:	pop	{r4, r5, r6, sl, fp, lr}
   1fe1c:	b	1db50 <main@@Base+0x7a6c>
   1fe20:	mov	r0, r5
   1fe24:	mov	r2, r4
   1fe28:	mov	r3, r6
   1fe2c:	bl	1feb4 <main@@Base+0x9dd0>
   1fe30:	b	1fe44 <main@@Base+0x9d60>
   1fe34:	mov	r0, r5
   1fe38:	mov	r2, r4
   1fe3c:	mov	r3, r6
   1fe40:	bl	20100 <main@@Base+0xa01c>
   1fe44:	mov	r1, r0
   1fe48:	ldr	r0, [r5, #24]
   1fe4c:	cmp	r0, #0
   1fe50:	bne	1fe60 <main@@Base+0x9d7c>
   1fe54:	ldr	r0, [r6]
   1fe58:	cmp	r0, #0
   1fe5c:	beq	1fe68 <main@@Base+0x9d84>
   1fe60:	mov	r0, r1
   1fe64:	pop	{r4, r5, r6, sl, fp, pc}
   1fe68:	mov	r0, r5
   1fe6c:	mov	r2, r4
   1fe70:	mov	r3, #33	; 0x21
   1fe74:	pop	{r4, r5, r6, sl, fp, lr}
   1fe78:	b	26998 <flatcc_json_parser_set_error@@Base>
   1fe7c:	mov	r0, r5
   1fe80:	mov	r2, r4
   1fe84:	pop	{r4, r5, r6, sl, fp, lr}
   1fe88:	b	272ec <flatcc_json_parser_generic_json@@Base>
   1fe8c:	add	r0, r0, #1
   1fe90:	uxtb	r1, r0
   1fe94:	cmp	r1, #12
   1fe98:	movhi	r0, #0
   1fe9c:	bxhi	lr
   1fea0:	sxtb	r0, r0
   1fea4:	movw	r1, #23260	; 0x5adc
   1fea8:	movt	r1, #3
   1feac:	ldr	r0, [r1, r0, lsl #2]
   1feb0:	bx	lr
   1feb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feb8:	add	fp, sp, #28
   1febc:	sub	sp, sp, #20
   1fec0:	mov	r7, r3
   1fec4:	mov	r4, r2
   1fec8:	mov	r6, r1
   1fecc:	mov	r5, r0
   1fed0:	mov	r0, #0
   1fed4:	str	r0, [r3]
   1fed8:	ldr	r0, [r5]
   1fedc:	mov	r1, #1
   1fee0:	bl	2313c <flatcc_builder_start_table@@Base>
   1fee4:	cmp	r0, #0
   1fee8:	bne	200dc <main@@Base+0x9ff8>
   1feec:	add	r3, sp, #16
   1fef0:	mov	r0, r5
   1fef4:	mov	r1, r6
   1fef8:	mov	r2, r4
   1fefc:	bl	19f80 <main@@Base+0x3e9c>
   1ff00:	mov	r6, r0
   1ff04:	ldr	r0, [sp, #16]
   1ff08:	cmp	r0, #0
   1ff0c:	str	r7, [sp, #8]
   1ff10:	beq	200b8 <main@@Base+0x9fd4>
   1ff14:	movw	r8, #28530	; 0x6f72
   1ff18:	movt	r8, #29559	; 0x7377
   1ff1c:	movw	sl, #24948	; 0x6174
   1ff20:	movt	sl, #25695	; 0x645f
   1ff24:	add	r9, sp, #16
   1ff28:	mov	r0, r5
   1ff2c:	mov	r1, r6
   1ff30:	mov	r2, r4
   1ff34:	bl	1a010 <main@@Base+0x3f2c>
   1ff38:	mov	r6, r0
   1ff3c:	mov	r1, r4
   1ff40:	bl	1a054 <main@@Base+0x3f70>
   1ff44:	eor	r1, r1, r8
   1ff48:	eor	r0, r0, sl
   1ff4c:	orrs	r0, r0, r1
   1ff50:	bne	1fffc <main@@Base+0x9f18>
   1ff54:	add	r7, r6, #8
   1ff58:	mov	r0, r7
   1ff5c:	mov	r1, r4
   1ff60:	bl	1a054 <main@@Base+0x3f70>
   1ff64:	movw	r2, #25451	; 0x636b
   1ff68:	movt	r2, #29793	; 0x7461
   1ff6c:	eor	r1, r1, r2
   1ff70:	movw	r2, #24941	; 0x616d
   1ff74:	movt	r2, #24420	; 0x5f64
   1ff78:	eor	r0, r0, r2
   1ff7c:	orrs	r0, r0, r1
   1ff80:	bne	20008 <main@@Base+0x9f24>
   1ff84:	add	r6, r6, #16
   1ff88:	mov	r0, r6
   1ff8c:	mov	r1, r4
   1ff90:	bl	1a054 <main@@Base+0x3f70>
   1ff94:	bic	r0, r1, #255	; 0xff
   1ff98:	movw	r1, #25856	; 0x6500
   1ff9c:	movt	r1, #24935	; 0x6167
   1ffa0:	teq	r0, r1
   1ffa4:	bne	1fffc <main@@Base+0x9f18>
   1ffa8:	mov	r0, r5
   1ffac:	mov	r1, r6
   1ffb0:	mov	r2, r4
   1ffb4:	mov	r3, #3
   1ffb8:	bl	1a058 <main@@Base+0x3f74>
   1ffbc:	mov	r7, r0
   1ffc0:	cmp	r6, r0
   1ffc4:	beq	20008 <main@@Base+0x9f24>
   1ffc8:	mov	r0, #0
   1ffcc:	str	r0, [sp, #12]
   1ffd0:	mov	r0, r5
   1ffd4:	mov	r1, r7
   1ffd8:	mov	r2, r4
   1ffdc:	add	r6, sp, #12
   1ffe0:	mov	r3, r6
   1ffe4:	bl	1c704 <main@@Base+0x6620>
   1ffe8:	mov	r8, r0
   1ffec:	cmp	r7, r0
   1fff0:	beq	20044 <main@@Base+0x9f60>
   1fff4:	mov	r6, r8
   1fff8:	b	20070 <main@@Base+0x9f8c>
   1fffc:	mov	r0, r5
   20000:	mov	r1, r6
   20004:	b	20010 <main@@Base+0x9f2c>
   20008:	mov	r0, r5
   2000c:	mov	r1, r7
   20010:	mov	r2, r4
   20014:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   20018:	mov	r6, r0
   2001c:	mov	r0, r5
   20020:	mov	r1, r6
   20024:	mov	r2, r4
   20028:	mov	r3, r9
   2002c:	bl	1cf98 <main@@Base+0x6eb4>
   20030:	mov	r6, r0
   20034:	ldr	r0, [sp, #16]
   20038:	cmp	r0, #0
   2003c:	bne	1ff28 <main@@Base+0x9e44>
   20040:	b	200b8 <main@@Base+0x9fd4>
   20044:	str	r6, [sp]
   20048:	mov	r0, r5
   2004c:	mov	r1, r8
   20050:	mov	r2, r4
   20054:	movw	r3, #41712	; 0xa2f0
   20058:	movt	r3, #4
   2005c:	bl	1c794 <main@@Base+0x66b0>
   20060:	mov	r6, r0
   20064:	cmp	r0, r8
   20068:	cmpne	r6, r4
   2006c:	beq	200dc <main@@Base+0x9ff8>
   20070:	ldr	r8, [sp, #12]
   20074:	cmp	r8, #0
   20078:	bne	20088 <main@@Base+0x9fa4>
   2007c:	ldrb	r0, [r5, #8]
   20080:	tst	r0, #2
   20084:	beq	200ac <main@@Base+0x9fc8>
   20088:	ldr	r0, [r5]
   2008c:	mov	r1, #0
   20090:	mov	r2, #4
   20094:	mov	r3, #4
   20098:	bl	23f38 <flatcc_builder_table_add@@Base>
   2009c:	cmp	r0, #0
   200a0:	beq	200dc <main@@Base+0x9ff8>
   200a4:	mov	r1, r8
   200a8:	bl	1c8b0 <main@@Base+0x67cc>
   200ac:	movw	r8, #28530	; 0x6f72
   200b0:	movt	r8, #29559	; 0x7377
   200b4:	b	2001c <main@@Base+0x9f38>
   200b8:	ldr	r0, [r5, #24]
   200bc:	cmp	r0, #0
   200c0:	bne	200dc <main@@Base+0x9ff8>
   200c4:	ldr	r0, [r5]
   200c8:	bl	23848 <flatcc_builder_end_table@@Base>
   200cc:	ldr	r1, [sp, #8]
   200d0:	str	r0, [r1]
   200d4:	cmp	r0, #0
   200d8:	bne	200f4 <main@@Base+0xa010>
   200dc:	mov	r0, r5
   200e0:	mov	r1, r6
   200e4:	mov	r2, r4
   200e8:	mov	r3, #33	; 0x21
   200ec:	bl	26998 <flatcc_json_parser_set_error@@Base>
   200f0:	mov	r6, r0
   200f4:	mov	r0, r6
   200f8:	sub	sp, fp, #28
   200fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20100:	push	{r4, r5, r6, r7, fp, lr}
   20104:	add	fp, sp, #16
   20108:	mov	r7, r3
   2010c:	mov	r4, r2
   20110:	mov	r6, r1
   20114:	mov	r5, r0
   20118:	mov	r0, #0
   2011c:	str	r0, [r3]
   20120:	ldr	r0, [r5]
   20124:	mov	r1, #2
   20128:	mov	r2, #2
   2012c:	bl	22738 <flatcc_builder_start_struct@@Base>
   20130:	cmp	r0, #0
   20134:	beq	20174 <main@@Base+0xa090>
   20138:	mov	r3, r0
   2013c:	mov	r0, r5
   20140:	mov	r1, r6
   20144:	mov	r2, r4
   20148:	bl	20218 <main@@Base+0xa134>
   2014c:	mov	r6, r0
   20150:	cmp	r0, r4
   20154:	beq	20174 <main@@Base+0xa090>
   20158:	ldr	r0, [r5]
   2015c:	bl	22814 <flatcc_builder_end_struct@@Base>
   20160:	str	r0, [r7]
   20164:	cmp	r0, #0
   20168:	beq	20174 <main@@Base+0xa090>
   2016c:	mov	r0, r6
   20170:	pop	{r4, r5, r6, r7, fp, pc}
   20174:	mov	r0, r5
   20178:	mov	r1, r6
   2017c:	mov	r2, r4
   20180:	mov	r3, #33	; 0x21
   20184:	pop	{r4, r5, r6, r7, fp, lr}
   20188:	b	26998 <flatcc_json_parser_set_error@@Base>
   2018c:	push	{r4, r5, r6, r7, fp, lr}
   20190:	add	fp, sp, #16
   20194:	mov	r7, r3
   20198:	mov	r4, r2
   2019c:	mov	r6, r1
   201a0:	mov	r5, r0
   201a4:	mov	r0, #0
   201a8:	str	r0, [r3]
   201ac:	ldr	r0, [r5]
   201b0:	mov	r1, #4
   201b4:	mov	r2, #4
   201b8:	bl	22738 <flatcc_builder_start_struct@@Base>
   201bc:	cmp	r0, #0
   201c0:	beq	20200 <main@@Base+0xa11c>
   201c4:	mov	r3, r0
   201c8:	mov	r0, r5
   201cc:	mov	r1, r6
   201d0:	mov	r2, r4
   201d4:	bl	205e8 <main@@Base+0xa504>
   201d8:	mov	r6, r0
   201dc:	cmp	r0, r4
   201e0:	beq	20200 <main@@Base+0xa11c>
   201e4:	ldr	r0, [r5]
   201e8:	bl	22814 <flatcc_builder_end_struct@@Base>
   201ec:	str	r0, [r7]
   201f0:	cmp	r0, #0
   201f4:	beq	20200 <main@@Base+0xa11c>
   201f8:	mov	r0, r6
   201fc:	pop	{r4, r5, r6, r7, fp, pc}
   20200:	mov	r0, r5
   20204:	mov	r1, r6
   20208:	mov	r2, r4
   2020c:	mov	r3, #33	; 0x21
   20210:	pop	{r4, r5, r6, r7, fp, lr}
   20214:	b	26998 <flatcc_json_parser_set_error@@Base>
   20218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2021c:	add	fp, sp, #28
   20220:	sub	sp, sp, #20
   20224:	str	r3, [sp, #8]
   20228:	mov	r4, r2
   2022c:	mov	r5, r0
   20230:	add	r3, sp, #16
   20234:	bl	19f80 <main@@Base+0x3e9c>
   20238:	mov	r1, r0
   2023c:	ldr	r0, [sp, #16]
   20240:	cmp	r0, #0
   20244:	beq	203c0 <main@@Base+0xa2dc>
   20248:	movw	r8, #26994	; 0x6972
   2024c:	movt	r8, #26721	; 0x6861
   20250:	movw	r9, #25966	; 0x656e
   20254:	movt	r9, #24428	; 0x5f6c
   20258:	movw	r7, #26624	; 0x6800
   2025c:	movt	r7, #26484	; 0x6774
   20260:	add	sl, sp, #14
   20264:	b	202a0 <main@@Base+0xa1bc>
   20268:	mov	r0, r5
   2026c:	mov	r1, r6
   20270:	mov	r2, r4
   20274:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   20278:	mov	r6, r0
   2027c:	mov	r0, r5
   20280:	mov	r1, r6
   20284:	mov	r2, r4
   20288:	add	r3, sp, #16
   2028c:	bl	1cf98 <main@@Base+0x6eb4>
   20290:	mov	r1, r0
   20294:	ldr	r0, [sp, #16]
   20298:	cmp	r0, #0
   2029c:	beq	203c0 <main@@Base+0xa2dc>
   202a0:	mov	r0, r5
   202a4:	mov	r2, r4
   202a8:	bl	1a010 <main@@Base+0x3f2c>
   202ac:	mov	r6, r0
   202b0:	mov	r1, r4
   202b4:	bl	1a054 <main@@Base+0x3f70>
   202b8:	eor	r1, r1, r8
   202bc:	eor	r0, r0, r9
   202c0:	orrs	r0, r0, r1
   202c4:	bne	20268 <main@@Base+0xa184>
   202c8:	add	r6, r6, #8
   202cc:	mov	r0, r6
   202d0:	mov	r1, r4
   202d4:	bl	1a054 <main@@Base+0x3f70>
   202d8:	bic	r0, r1, #255	; 0xff
   202dc:	teq	r0, r7
   202e0:	bne	20268 <main@@Base+0xa184>
   202e4:	mov	r0, r5
   202e8:	mov	r1, r6
   202ec:	mov	r2, r4
   202f0:	mov	r3, #3
   202f4:	bl	1a058 <main@@Base+0x3f74>
   202f8:	mov	r8, r0
   202fc:	cmp	r6, r0
   20300:	beq	2033c <main@@Base+0xa258>
   20304:	mov	r0, #0
   20308:	strh	r0, [sp, #14]
   2030c:	mov	r0, r5
   20310:	mov	r1, r8
   20314:	mov	r2, r4
   20318:	mov	r9, sl
   2031c:	mov	r3, sl
   20320:	bl	203cc <main@@Base+0xa2e8>
   20324:	mov	r6, r0
   20328:	cmp	r8, r0
   2032c:	beq	2035c <main@@Base+0xa278>
   20330:	movw	r8, #26994	; 0x6972
   20334:	movt	r8, #26721	; 0x6861
   20338:	b	20394 <main@@Base+0xa2b0>
   2033c:	mov	r0, r5
   20340:	mov	r1, r8
   20344:	mov	r2, r4
   20348:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   2034c:	mov	r6, r0
   20350:	movw	r8, #26994	; 0x6972
   20354:	movt	r8, #26721	; 0x6861
   20358:	b	203a0 <main@@Base+0xa2bc>
   2035c:	str	r9, [sp]
   20360:	mov	r0, r5
   20364:	mov	r1, r6
   20368:	mov	r2, r4
   2036c:	movw	r3, #41724	; 0xa2fc
   20370:	movt	r3, #4
   20374:	bl	2045c <main@@Base+0xa378>
   20378:	mov	r1, r0
   2037c:	cmp	r0, r6
   20380:	movw	r8, #26994	; 0x6972
   20384:	movt	r8, #26721	; 0x6861
   20388:	cmpne	r1, r4
   2038c:	beq	203ac <main@@Base+0xa2c8>
   20390:	mov	r6, r1
   20394:	ldrh	r1, [sp, #14]
   20398:	ldr	r0, [sp, #8]
   2039c:	bl	20578 <main@@Base+0xa494>
   203a0:	movw	r9, #25966	; 0x656e
   203a4:	movt	r9, #24428	; 0x5f6c
   203a8:	b	2027c <main@@Base+0xa198>
   203ac:	mov	r0, r5
   203b0:	mov	r2, r4
   203b4:	mov	r3, #33	; 0x21
   203b8:	bl	26998 <flatcc_json_parser_set_error@@Base>
   203bc:	mov	r1, r0
   203c0:	mov	r0, r1
   203c4:	sub	sp, fp, #28
   203c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203cc:	push	{r4, r5, r6, r7, fp, lr}
   203d0:	add	fp, sp, #16
   203d4:	sub	sp, sp, #24
   203d8:	mov	r7, r1
   203dc:	mov	r6, r0
   203e0:	mov	r0, #0
   203e4:	str	r0, [sp, #20]
   203e8:	str	r0, [sp, #16]
   203ec:	str	r0, [sp, #12]
   203f0:	strh	r0, [r3]
   203f4:	cmp	r1, r2
   203f8:	beq	20450 <main@@Base+0xa36c>
   203fc:	mov	r5, r3
   20400:	mov	r4, r2
   20404:	add	r0, sp, #16
   20408:	str	r0, [sp]
   2040c:	add	r3, sp, #12
   20410:	mov	r0, r6
   20414:	mov	r1, r7
   20418:	bl	27cac <flatcc_json_parser_integer@@Base>
   2041c:	mov	r1, r0
   20420:	cmp	r0, r7
   20424:	beq	2044c <main@@Base+0xa368>
   20428:	ldr	r3, [sp, #12]
   2042c:	ldr	r0, [sp, #16]
   20430:	ldr	r2, [sp, #20]
   20434:	stm	sp, {r0, r2, r5}
   20438:	mov	r0, r6
   2043c:	mov	r2, r4
   20440:	bl	20598 <main@@Base+0xa4b4>
   20444:	mov	r7, r0
   20448:	b	20450 <main@@Base+0xa36c>
   2044c:	mov	r7, r1
   20450:	mov	r0, r7
   20454:	sub	sp, fp, #16
   20458:	pop	{r4, r5, r6, r7, fp, pc}
   2045c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20460:	add	fp, sp, #28
   20464:	sub	sp, sp, #36	; 0x24
   20468:	mov	r8, r3
   2046c:	mov	r6, r2
   20470:	mov	r5, r0
   20474:	mov	r0, #0
   20478:	strh	r0, [fp, #-30]	; 0xffffffe2
   2047c:	ldr	sl, [fp, #8]
   20480:	strh	r0, [sl]
   20484:	mov	r0, r5
   20488:	bl	1da60 <main@@Base+0x797c>
   2048c:	mov	r4, r0
   20490:	cmp	r0, r6
   20494:	beq	20544 <main@@Base+0xa460>
   20498:	mov	r9, r8
   2049c:	b	204b0 <main@@Base+0xa3cc>
   204a0:	ldr	r0, [r9, #4]!
   204a4:	cmp	r0, #0
   204a8:	mov	r4, r7
   204ac:	beq	20554 <main@@Base+0xa470>
   204b0:	ldr	r7, [r9]
   204b4:	add	r0, sp, #24
   204b8:	str	r0, [sp]
   204bc:	add	r0, sp, #16
   204c0:	str	r0, [sp, #4]
   204c4:	mov	r0, r5
   204c8:	mov	r1, r4
   204cc:	mov	r2, r6
   204d0:	add	r3, sp, #20
   204d4:	blx	r7
   204d8:	mov	r7, r0
   204dc:	cmp	r0, r6
   204e0:	beq	2056c <main@@Base+0xa488>
   204e4:	cmp	r7, r4
   204e8:	beq	204a0 <main@@Base+0xa3bc>
   204ec:	ldr	r3, [sp, #20]
   204f0:	ldr	r0, [sp, #24]
   204f4:	ldr	r1, [sp, #28]
   204f8:	stm	sp, {r0, r1}
   204fc:	sub	r0, fp, #30
   20500:	str	r0, [sp, #8]
   20504:	mov	r0, r5
   20508:	mov	r1, r7
   2050c:	mov	r2, r6
   20510:	bl	20598 <main@@Base+0xa4b4>
   20514:	cmp	r0, r6
   20518:	beq	2054c <main@@Base+0xa468>
   2051c:	ldrh	r0, [sl]
   20520:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   20524:	add	r0, r0, r1
   20528:	strh	r0, [sl]
   2052c:	ldr	r0, [sp, #16]
   20530:	cmp	r0, #0
   20534:	mov	r4, r7
   20538:	mov	r9, r8
   2053c:	bne	204b0 <main@@Base+0xa3cc>
   20540:	b	2056c <main@@Base+0xa488>
   20544:	mov	r7, r4
   20548:	b	2056c <main@@Base+0xa488>
   2054c:	mov	r7, r6
   20550:	b	2056c <main@@Base+0xa488>
   20554:	mov	r0, r5
   20558:	mov	r1, r7
   2055c:	mov	r2, r6
   20560:	mov	r3, #23
   20564:	bl	26998 <flatcc_json_parser_set_error@@Base>
   20568:	mov	r7, r0
   2056c:	mov	r0, r7
   20570:	sub	sp, fp, #28
   20574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20578:	push	{r4, r5, fp, lr}
   2057c:	add	fp, sp, #8
   20580:	mov	r4, r1
   20584:	mov	r5, r0
   20588:	mov	r0, r1
   2058c:	bl	205e4 <main@@Base+0xa500>
   20590:	strh	r4, [r5]
   20594:	pop	{r4, r5, fp, pc}
   20598:	push	{fp, lr}
   2059c:	mov	fp, sp
   205a0:	cmp	r3, #0
   205a4:	beq	205b4 <main@@Base+0xa4d0>
   205a8:	mov	r3, #8
   205ac:	pop	{fp, lr}
   205b0:	b	26998 <flatcc_json_parser_set_error@@Base>
   205b4:	ldr	ip, [fp, #12]
   205b8:	ldr	lr, [fp, #8]
   205bc:	subs	r3, lr, #65536	; 0x10000
   205c0:	sbcs	r3, ip, #0
   205c4:	bcc	205d4 <main@@Base+0xa4f0>
   205c8:	mov	r3, #7
   205cc:	pop	{fp, lr}
   205d0:	b	26998 <flatcc_json_parser_set_error@@Base>
   205d4:	ldr	r0, [fp, #16]
   205d8:	strh	lr, [r0]
   205dc:	mov	r0, r1
   205e0:	pop	{fp, pc}
   205e4:	bx	lr
   205e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205ec:	add	fp, sp, #28
   205f0:	sub	sp, sp, #20
   205f4:	str	r3, [sp, #8]
   205f8:	mov	r4, r2
   205fc:	mov	r5, r0
   20600:	add	r3, sp, #16
   20604:	bl	19f80 <main@@Base+0x3e9c>
   20608:	mov	r1, r0
   2060c:	ldr	r0, [sp, #16]
   20610:	cmp	r0, #0
   20614:	beq	20790 <main@@Base+0xa6ac>
   20618:	movw	r8, #28523	; 0x6f6b
   2061c:	movt	r8, #25199	; 0x626f
   20620:	movw	r9, #29285	; 0x7265
   20624:	movt	r9, #29535	; 0x735f
   20628:	movw	r7, #0
   2062c:	movt	r7, #24932	; 0x6164
   20630:	add	sl, sp, #12
   20634:	b	20670 <main@@Base+0xa58c>
   20638:	mov	r0, r5
   2063c:	mov	r1, r6
   20640:	mov	r2, r4
   20644:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   20648:	mov	r6, r0
   2064c:	mov	r0, r5
   20650:	mov	r1, r6
   20654:	mov	r2, r4
   20658:	add	r3, sp, #16
   2065c:	bl	1cf98 <main@@Base+0x6eb4>
   20660:	mov	r1, r0
   20664:	ldr	r0, [sp, #16]
   20668:	cmp	r0, #0
   2066c:	beq	20790 <main@@Base+0xa6ac>
   20670:	mov	r0, r5
   20674:	mov	r2, r4
   20678:	bl	1a010 <main@@Base+0x3f2c>
   2067c:	mov	r6, r0
   20680:	mov	r1, r4
   20684:	bl	1a054 <main@@Base+0x3f70>
   20688:	eor	r1, r1, r8
   2068c:	eor	r0, r0, r9
   20690:	orrs	r0, r0, r1
   20694:	bne	20638 <main@@Base+0xa554>
   20698:	add	r6, r6, #8
   2069c:	mov	r0, r6
   206a0:	mov	r1, r4
   206a4:	bl	1a054 <main@@Base+0x3f70>
   206a8:	bfc	r1, #0, #16
   206ac:	teq	r1, r7
   206b0:	bne	20638 <main@@Base+0xa554>
   206b4:	mov	r0, r5
   206b8:	mov	r1, r6
   206bc:	mov	r2, r4
   206c0:	mov	r3, #2
   206c4:	bl	1a058 <main@@Base+0x3f74>
   206c8:	mov	r8, r0
   206cc:	cmp	r6, r0
   206d0:	beq	2070c <main@@Base+0xa628>
   206d4:	mov	r0, #0
   206d8:	str	r0, [sp, #12]
   206dc:	mov	r0, r5
   206e0:	mov	r1, r8
   206e4:	mov	r2, r4
   206e8:	mov	r9, sl
   206ec:	mov	r3, sl
   206f0:	bl	1c704 <main@@Base+0x6620>
   206f4:	mov	r6, r0
   206f8:	cmp	r8, r0
   206fc:	beq	2072c <main@@Base+0xa648>
   20700:	movw	r8, #28523	; 0x6f6b
   20704:	movt	r8, #25199	; 0x626f
   20708:	b	20764 <main@@Base+0xa680>
   2070c:	mov	r0, r5
   20710:	mov	r1, r8
   20714:	mov	r2, r4
   20718:	bl	27138 <flatcc_json_parser_unmatched_symbol@@Base>
   2071c:	mov	r6, r0
   20720:	movw	r8, #28523	; 0x6f6b
   20724:	movt	r8, #25199	; 0x626f
   20728:	b	20770 <main@@Base+0xa68c>
   2072c:	str	r9, [sp]
   20730:	mov	r0, r5
   20734:	mov	r1, r6
   20738:	mov	r2, r4
   2073c:	movw	r3, #41736	; 0xa308
   20740:	movt	r3, #4
   20744:	bl	1c794 <main@@Base+0x66b0>
   20748:	mov	r1, r0
   2074c:	cmp	r0, r6
   20750:	movw	r8, #28523	; 0x6f6b
   20754:	movt	r8, #25199	; 0x626f
   20758:	cmpne	r1, r4
   2075c:	beq	2077c <main@@Base+0xa698>
   20760:	mov	r6, r1
   20764:	ldr	r1, [sp, #12]
   20768:	ldr	r0, [sp, #8]
   2076c:	bl	1c8b0 <main@@Base+0x67cc>
   20770:	movw	r9, #29285	; 0x7265
   20774:	movt	r9, #29535	; 0x735f
   20778:	b	2064c <main@@Base+0xa568>
   2077c:	mov	r0, r5
   20780:	mov	r2, r4
   20784:	mov	r3, #33	; 0x21
   20788:	bl	26998 <flatcc_json_parser_set_error@@Base>
   2078c:	mov	r1, r0
   20790:	mov	r0, r1
   20794:	sub	sp, fp, #28
   20798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2079c:	cmp	r3, #0
   207a0:	beq	207ac <main@@Base+0xa6c8>
   207a4:	mov	r3, #8
   207a8:	b	26998 <flatcc_json_parser_set_error@@Base>
   207ac:	ldr	r2, [sp]
   207b0:	ldmib	sp, {r0, r3}
   207b4:	orrs	r0, r2, r0
   207b8:	movwne	r0, #1
   207bc:	strb	r0, [r3]
   207c0:	mov	r0, r1
   207c4:	bx	lr
   207c8:	bx	lr
   207cc:	push	{r4, r5, fp, lr}
   207d0:	add	fp, sp, #8
   207d4:	mov	r4, r1
   207d8:	mov	r5, r0
   207dc:	mov	r0, r2
   207e0:	mov	r1, r3
   207e4:	bl	31ca4 <flatcc_json_printer_clear@@Base+0x1418>
   207e8:	ldr	r1, [fp, #8]
   207ec:	vmov	s0, r0
   207f0:	vneg.f32	s2, s0
   207f4:	cmp	r4, #0
   207f8:	vseleq.f32	s0, s0, s2
   207fc:	vstr	s0, [r1]
   20800:	mov	r0, r5
   20804:	pop	{r4, r5, fp, pc}
   20808:	bx	lr
   2080c:	push	{r4, sl, fp, lr}
   20810:	add	fp, sp, #8
   20814:	ldr	r4, [fp, #12]
   20818:	ldr	ip, [fp, #8]
   2081c:	ldr	lr, [fp, #16]
   20820:	cmp	r3, #0
   20824:	beq	20840 <main@@Base+0xa75c>
   20828:	subs	r3, ip, #-2147483647	; 0x80000001
   2082c:	sbcs	r3, r4, #0
   20830:	bcc	20858 <main@@Base+0xa774>
   20834:	mov	r3, #8
   20838:	pop	{r4, sl, fp, lr}
   2083c:	b	26998 <flatcc_json_parser_set_error@@Base>
   20840:	subs	r3, ip, #-2147483648	; 0x80000000
   20844:	sbcs	r3, r4, #0
   20848:	bcc	2085c <main@@Base+0xa778>
   2084c:	mov	r3, #7
   20850:	pop	{r4, sl, fp, lr}
   20854:	b	26998 <flatcc_json_parser_set_error@@Base>
   20858:	rsb	ip, ip, #0
   2085c:	str	ip, [lr]
   20860:	mov	r0, r1
   20864:	pop	{r4, sl, fp, pc}
   20868:	bx	lr
   2086c:	push	{r4, r5, fp, lr}
   20870:	add	fp, sp, #8
   20874:	add	ip, fp, #8
   20878:	ldm	ip, {r4, r5, ip}
   2087c:	cmp	r3, #0
   20880:	beq	2089c <main@@Base+0xa7b8>
   20884:	subs	r3, r4, #1
   20888:	sbcs	r3, r5, #-2147483648	; 0x80000000
   2088c:	bcc	208b0 <main@@Base+0xa7cc>
   20890:	mov	r3, #8
   20894:	pop	{r4, r5, fp, lr}
   20898:	b	26998 <flatcc_json_parser_set_error@@Base>
   2089c:	cmn	r5, #1
   208a0:	bgt	208b8 <main@@Base+0xa7d4>
   208a4:	mov	r3, #7
   208a8:	pop	{r4, r5, fp, lr}
   208ac:	b	26998 <flatcc_json_parser_set_error@@Base>
   208b0:	rsbs	r4, r4, #0
   208b4:	rsc	r5, r5, #0
   208b8:	strd	r4, [ip]
   208bc:	mov	r0, r1
   208c0:	pop	{r4, r5, fp, pc}
   208c4:	bx	lr
   208c8:	cmp	r3, #0
   208cc:	beq	208d8 <main@@Base+0xa7f4>
   208d0:	mov	r3, #8
   208d4:	b	26998 <flatcc_json_parser_set_error@@Base>
   208d8:	ldr	r3, [sp, #4]
   208dc:	cmp	r3, #0
   208e0:	beq	208ec <main@@Base+0xa808>
   208e4:	mov	r3, #7
   208e8:	b	26998 <flatcc_json_parser_set_error@@Base>
   208ec:	ldr	r0, [sp]
   208f0:	ldr	r2, [sp, #8]
   208f4:	str	r0, [r2]
   208f8:	mov	r0, r1
   208fc:	bx	lr
   20900:	bx	lr
   20904:	cmp	r3, #0
   20908:	beq	20914 <main@@Base+0xa830>
   2090c:	mov	r3, #8
   20910:	b	26998 <flatcc_json_parser_set_error@@Base>
   20914:	ldm	sp, {r2, r3}
   20918:	ldr	r0, [sp, #8]
   2091c:	strd	r2, [r0]
   20920:	mov	r0, r1
   20924:	bx	lr
   20928:	bx	lr
   2092c:	push	{r4, r5, fp, lr}
   20930:	add	fp, sp, #8
   20934:	mov	r4, r1
   20938:	mov	r5, r0
   2093c:	mov	r0, r2
   20940:	mov	r1, r3
   20944:	bl	31a6c <flatcc_json_printer_clear@@Base+0x11e0>
   20948:	eor	r2, r1, #-2147483648	; 0x80000000
   2094c:	ldr	r3, [fp, #8]
   20950:	vmov	d16, r0, r1
   20954:	vmov	d17, r0, r2
   20958:	cmp	r4, #0
   2095c:	vseleq.f64	d16, d16, d17
   20960:	vstr	d16, [r3]
   20964:	mov	r0, r5
   20968:	pop	{r4, r5, fp, pc}
   2096c:	bx	lr
   20970:	push	{r4, r5, r6, sl, fp, lr}
   20974:	add	fp, sp, #16
   20978:	sub	sp, sp, #16
   2097c:	mov	r4, r1
   20980:	mov	r5, r0
   20984:	mov	r6, #1
   20988:	movw	r0, #22279	; 0x5707
   2098c:	movt	r0, #3
   20990:	stm	sp, {r0, r6}
   20994:	mov	r0, r5
   20998:	mov	r1, #0
   2099c:	mov	r2, r4
   209a0:	mov	r3, #0
   209a4:	bl	2c524 <flatcc_json_printer_float_struct_field@@Base>
   209a8:	movw	r0, #32727	; 0x7fd7
   209ac:	movt	r0, #3
   209b0:	stm	sp, {r0, r6}
   209b4:	mov	r0, r5
   209b8:	mov	r1, #1
   209bc:	mov	r2, r4
   209c0:	mov	r3, #4
   209c4:	bl	2c524 <flatcc_json_printer_float_struct_field@@Base>
   209c8:	movw	r0, #22720	; 0x58c0
   209cc:	movt	r0, #3
   209d0:	stm	sp, {r0, r6}
   209d4:	mov	r0, r5
   209d8:	mov	r1, #2
   209dc:	mov	r2, r4
   209e0:	mov	r3, #8
   209e4:	bl	2c524 <flatcc_json_printer_float_struct_field@@Base>
   209e8:	mov	r6, #5
   209ec:	movw	r0, #22722	; 0x58c2
   209f0:	movt	r0, #3
   209f4:	stm	sp, {r0, r6}
   209f8:	mov	r0, r5
   209fc:	mov	r1, #3
   20a00:	mov	r2, r4
   20a04:	mov	r3, #16
   20a08:	bl	2c590 <flatcc_json_printer_double_struct_field@@Base>
   20a0c:	movw	r0, #2668	; 0xa6c
   20a10:	movt	r0, #2
   20a14:	movw	r1, #22728	; 0x58c8
   20a18:	movt	r1, #3
   20a1c:	stm	sp, {r1, r6}
   20a20:	str	r0, [sp, #8]
   20a24:	mov	r0, r5
   20a28:	mov	r1, #4
   20a2c:	mov	r2, r4
   20a30:	mov	r3, #24
   20a34:	bl	2c818 <flatcc_json_printer_int8_enum_struct_field@@Base>
   20a38:	movw	r0, #3040	; 0xbe0
   20a3c:	movt	r0, #2
   20a40:	movw	r1, #22734	; 0x58ce
   20a44:	movt	r1, #3
   20a48:	stm	sp, {r1, r6}
   20a4c:	str	r0, [sp, #8]
   20a50:	mov	r0, r5
   20a54:	mov	r1, #5
   20a58:	mov	r2, r4
   20a5c:	mov	r3, #26
   20a60:	bl	2ff10 <flatcc_json_printer_embedded_struct_field@@Base>
   20a64:	sub	sp, fp, #16
   20a68:	pop	{r4, r5, r6, sl, fp, pc}
   20a6c:	push	{r4, r5, r6, r7, fp, lr}
   20a70:	add	fp, sp, #16
   20a74:	mov	r4, r0
   20a78:	mvn	r0, #0
   20a7c:	uxtab	r0, r0, r1
   20a80:	uxtb	r7, r1
   20a84:	ands	r5, r0, r7
   20a88:	movwne	r5, #1
   20a8c:	cmp	r1, #0
   20a90:	beq	20aec <main@@Base+0xaa08>
   20a94:	ands	r0, r1, #244	; 0xf4
   20a98:	bne	20aec <main@@Base+0xaa08>
   20a9c:	mov	r0, r4
   20aa0:	mov	r1, r5
   20aa4:	bl	2aca8 <flatcc_json_printer_delimit_enum_flags@@Base>
   20aa8:	mov	r6, #0
   20aac:	tst	r7, #1
   20ab0:	bne	20af8 <main@@Base+0xaa14>
   20ab4:	tst	r7, #2
   20ab8:	bne	20b1c <main@@Base+0xaa38>
   20abc:	tst	r7, #8
   20ac0:	beq	20adc <main@@Base+0xa9f8>
   20ac4:	movw	r2, #22750	; 0x58de
   20ac8:	movt	r2, #3
   20acc:	mov	r0, r4
   20ad0:	mov	r1, r6
   20ad4:	mov	r3, #4
   20ad8:	bl	2acdc <flatcc_json_printer_enum_flag@@Base>
   20adc:	mov	r0, r4
   20ae0:	mov	r1, r5
   20ae4:	pop	{r4, r5, r6, r7, fp, lr}
   20ae8:	b	2aca8 <flatcc_json_printer_delimit_enum_flags@@Base>
   20aec:	mov	r0, r4
   20af0:	pop	{r4, r5, r6, r7, fp, lr}
   20af4:	b	2aa64 <flatcc_json_printer_int8@@Base>
   20af8:	movw	r2, #22740	; 0x58d4
   20afc:	movt	r2, #3
   20b00:	mov	r0, r4
   20b04:	mov	r1, #0
   20b08:	mov	r3, #3
   20b0c:	bl	2acdc <flatcc_json_printer_enum_flag@@Base>
   20b10:	mov	r6, #1
   20b14:	tst	r7, #2
   20b18:	beq	20abc <main@@Base+0xa9d8>
   20b1c:	movw	r2, #22744	; 0x58d8
   20b20:	movt	r2, #3
   20b24:	mov	r0, r4
   20b28:	mov	r1, r6
   20b2c:	mov	r3, #5
   20b30:	bl	2acdc <flatcc_json_printer_enum_flag@@Base>
   20b34:	add	r6, r6, #1
   20b38:	tst	r7, #8
   20b3c:	bne	20ac4 <main@@Base+0xa9e0>
   20b40:	b	20adc <main@@Base+0xa9f8>
   20b44:	sub	r1, r1, #1
   20b48:	cmp	r1, #3
   20b4c:	bhi	20b78 <main@@Base+0xaa94>
   20b50:	add	r2, pc, #0
   20b54:	ldr	pc, [r2, r1, lsl #2]
   20b58:	andeq	r0, r2, r8, ror #22
   20b5c:	andeq	r0, r2, r8, lsl #23
   20b60:	muleq	r2, r8, fp
   20b64:	andeq	r0, r2, r8, lsr #23
   20b68:	movw	r1, #22755	; 0x58e3
   20b6c:	movt	r1, #3
   20b70:	mov	r2, #7
   20b74:	b	2ac1c <flatcc_json_printer_enum@@Base>
   20b78:	movw	r1, #29216	; 0x7220
   20b7c:	movt	r1, #3
   20b80:	mov	r2, #4
   20b84:	b	2ac1c <flatcc_json_printer_enum@@Base>
   20b88:	movw	r1, #22763	; 0x58eb
   20b8c:	movt	r1, #3
   20b90:	mov	r2, #23
   20b94:	b	2ac1c <flatcc_json_printer_enum@@Base>
   20b98:	movw	r1, #22787	; 0x5903
   20b9c:	movt	r1, #3
   20ba0:	mov	r2, #8
   20ba4:	b	2ac1c <flatcc_json_printer_enum@@Base>
   20ba8:	movw	r1, #22796	; 0x590c
   20bac:	movt	r1, #3
   20bb0:	mov	r2, #3
   20bb4:	b	2ac1c <flatcc_json_printer_enum@@Base>
   20bb8:	ldrb	r2, [r1, #8]
   20bbc:	sub	r2, r2, #1
   20bc0:	uxtb	r3, r2
   20bc4:	cmp	r3, #3
   20bc8:	bxhi	lr
   20bcc:	sxtb	r2, r2
   20bd0:	movw	r3, #23312	; 0x5b10
   20bd4:	movt	r3, #3
   20bd8:	ldr	r2, [r3, r2, lsl #2]
   20bdc:	b	2fe28 <flatcc_json_printer_union_table@@Base>
   20be0:	push	{r4, r5, r6, sl, fp, lr}
   20be4:	add	fp, sp, #16
   20be8:	sub	sp, sp, #8
   20bec:	mov	r4, r1
   20bf0:	mov	r5, r0
   20bf4:	mov	r6, #1
   20bf8:	movw	r0, #22506	; 0x57ea
   20bfc:	movt	r0, #3
   20c00:	stm	sp, {r0, r6}
   20c04:	mov	r0, r5
   20c08:	mov	r1, #0
   20c0c:	mov	r2, r4
   20c10:	mov	r3, #0
   20c14:	bl	2c38c <flatcc_json_printer_int16_struct_field@@Base>
   20c18:	movw	r0, #22921	; 0x5989
   20c1c:	movt	r0, #3
   20c20:	stm	sp, {r0, r6}
   20c24:	mov	r0, r5
   20c28:	mov	r1, #1
   20c2c:	mov	r2, r4
   20c30:	mov	r3, #2
   20c34:	bl	2c328 <flatcc_json_printer_int8_struct_field@@Base>
   20c38:	sub	sp, fp, #16
   20c3c:	pop	{r4, r5, r6, sl, fp, pc}
   20c40:	push	{r4, r5, r6, sl, fp, lr}
   20c44:	add	fp, sp, #16
   20c48:	sub	sp, sp, #16
   20c4c:	mov	r4, r1
   20c50:	mov	r5, r0
   20c54:	mov	r0, #2
   20c58:	str	r0, [sp]
   20c5c:	mov	r6, #0
   20c60:	movw	r3, #23168	; 0x5a80
   20c64:	movt	r3, #3
   20c68:	mov	r0, r5
   20c6c:	mov	r2, #0
   20c70:	bl	2ad18 <flatcc_json_printer_string_field@@Base>
   20c74:	str	r6, [sp, #8]
   20c78:	str	r6, [sp, #12]
   20c7c:	mov	r0, #3
   20c80:	str	r0, [sp]
   20c84:	movw	r3, #23171	; 0x5a83
   20c88:	movt	r3, #3
   20c8c:	mov	r0, r5
   20c90:	mov	r1, r4
   20c94:	mov	r2, #1
   20c98:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   20c9c:	mov	r0, #5
   20ca0:	stm	sp, {r0, r6}
   20ca4:	movw	r3, #25468	; 0x637c
   20ca8:	movt	r3, #3
   20cac:	mov	r0, r5
   20cb0:	mov	r1, r4
   20cb4:	mov	r2, #2
   20cb8:	bl	2b150 <flatcc_json_printer_uint16_field@@Base>
   20cbc:	sub	sp, fp, #16
   20cc0:	pop	{r4, r5, r6, sl, fp, pc}
   20cc4:	push	{r4, r5, fp, lr}
   20cc8:	add	fp, sp, #8
   20ccc:	sub	sp, sp, #8
   20cd0:	mov	r4, r1
   20cd4:	mov	r5, r0
   20cd8:	mov	r0, #2
   20cdc:	movw	r1, #23168	; 0x5a80
   20ce0:	movt	r1, #3
   20ce4:	str	r1, [sp]
   20ce8:	str	r0, [sp, #4]
   20cec:	mov	r0, r5
   20cf0:	mov	r1, #0
   20cf4:	mov	r2, r4
   20cf8:	mov	r3, #0
   20cfc:	bl	2c258 <flatcc_json_printer_uint32_struct_field@@Base>
   20d00:	mov	r0, #8
   20d04:	movw	r1, #23175	; 0x5a87
   20d08:	movt	r1, #3
   20d0c:	str	r1, [sp]
   20d10:	str	r0, [sp, #4]
   20d14:	mov	r0, r5
   20d18:	mov	r1, #1
   20d1c:	mov	r2, r4
   20d20:	mov	r3, #4
   20d24:	bl	2c258 <flatcc_json_printer_uint32_struct_field@@Base>
   20d28:	sub	sp, fp, #8
   20d2c:	pop	{r4, r5, fp, pc}
   20d30:	bx	lr
   20d34:	push	{r4, r5, r6, sl, fp, lr}
   20d38:	add	fp, sp, #16
   20d3c:	sub	sp, sp, #8
   20d40:	mov	r4, r1
   20d44:	mov	r5, r0
   20d48:	mov	r6, #0
   20d4c:	mov	r0, #4
   20d50:	stm	sp, {r0, r6}
   20d54:	movw	r3, #23187	; 0x5a93
   20d58:	movt	r3, #3
   20d5c:	mov	r0, r5
   20d60:	mov	r2, #0
   20d64:	bl	2aeac <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20d68:	mov	r0, #1
   20d6c:	mov	r1, #7
   20d70:	str	r1, [sp]
   20d74:	str	r0, [sp, #4]
   20d78:	movw	r3, #23184	; 0x5a90
   20d7c:	movt	r3, #3
   20d80:	mov	r0, r5
   20d84:	mov	r1, r4
   20d88:	mov	r2, #1
   20d8c:	bl	2aeac <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20d90:	mov	r0, #6
   20d94:	stm	sp, {r0, r6}
   20d98:	movw	r3, #23192	; 0x5a98
   20d9c:	movt	r3, #3
   20da0:	mov	r0, r5
   20da4:	mov	r1, r4
   20da8:	mov	r2, #2
   20dac:	bl	2aeac <flatcc_json_printer_uint8_vector_base64_field@@Base>
   20db0:	sub	sp, fp, #16
   20db4:	pop	{r4, r5, r6, sl, fp, pc}
   20db8:	push	{r4, r5, r6, r7, fp, lr}
   20dbc:	add	fp, sp, #16
   20dc0:	sub	sp, sp, #16
   20dc4:	mov	r4, r1
   20dc8:	mov	r5, r0
   20dcc:	movw	r7, #2668	; 0xa6c
   20dd0:	movt	r7, #2
   20dd4:	mov	r6, #2
   20dd8:	mov	r0, #5
   20ddc:	stm	sp, {r0, r6, r7}
   20de0:	movw	r3, #22328	; 0x5738
   20de4:	movt	r3, #3
   20de8:	mov	r0, r5
   20dec:	mov	r2, #0
   20df0:	bl	2bce8 <flatcc_json_printer_int8_enum_field@@Base>
   20df4:	mov	r0, #6
   20df8:	stm	sp, {r0, r6, r7}
   20dfc:	movw	r3, #22800	; 0x5910
   20e00:	movt	r3, #3
   20e04:	mov	r0, r5
   20e08:	mov	r1, r4
   20e0c:	mov	r2, #1
   20e10:	bl	2bce8 <flatcc_json_printer_int8_enum_field@@Base>
   20e14:	str	r6, [sp]
   20e18:	str	r6, [sp, #4]
   20e1c:	movw	r3, #22807	; 0x5917
   20e20:	movt	r3, #3
   20e24:	mov	r0, r5
   20e28:	mov	r1, r4
   20e2c:	mov	r2, #2
   20e30:	bl	2b098 <flatcc_json_printer_uint8_field@@Base>
   20e34:	mov	r0, #3
   20e38:	stm	sp, {r0, r6}
   20e3c:	movw	r3, #22810	; 0x591a
   20e40:	movt	r3, #3
   20e44:	mov	r0, r5
   20e48:	mov	r1, r4
   20e4c:	mov	r2, #3
   20e50:	bl	2b098 <flatcc_json_printer_uint8_field@@Base>
   20e54:	sub	sp, fp, #16
   20e58:	pop	{r4, r5, r6, r7, fp, pc}
   20e5c:	bx	lr
   20e60:	push	{r4, r5, fp, lr}
   20e64:	add	fp, sp, #8
   20e68:	sub	sp, sp, #16
   20e6c:	mov	r4, r1
   20e70:	mov	r5, r0
   20e74:	movw	r0, #3852	; 0xf0c
   20e78:	movt	r0, #2
   20e7c:	mov	r1, #6
   20e80:	str	r1, [sp]
   20e84:	str	r0, [sp, #4]
   20e88:	movw	r3, #22814	; 0x591e
   20e8c:	movt	r3, #3
   20e90:	mov	r0, r5
   20e94:	mov	r1, r4
   20e98:	mov	r2, #0
   20e9c:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   20ea0:	movw	r0, #4008	; 0xfa8
   20ea4:	movt	r0, #2
   20ea8:	mov	r1, #5
   20eac:	str	r1, [sp]
   20eb0:	str	r0, [sp, #4]
   20eb4:	movw	r3, #22821	; 0x5925
   20eb8:	movt	r3, #3
   20ebc:	mov	r0, r5
   20ec0:	mov	r1, r4
   20ec4:	mov	r2, #1
   20ec8:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   20ecc:	movw	r0, #3000	; 0xbb8
   20ed0:	movt	r0, #2
   20ed4:	movw	r1, #2884	; 0xb44
   20ed8:	movt	r1, #2
   20edc:	mov	r2, #7
   20ee0:	str	r2, [sp]
   20ee4:	str	r1, [sp, #4]
   20ee8:	str	r0, [sp, #8]
   20eec:	movw	r3, #22827	; 0x592b
   20ef0:	movt	r3, #3
   20ef4:	mov	r0, r5
   20ef8:	mov	r1, r4
   20efc:	mov	r2, #3
   20f00:	bl	2f888 <flatcc_json_printer_union_vector_field@@Base>
   20f04:	sub	sp, fp, #8
   20f08:	pop	{r4, r5, fp, pc}
   20f0c:	push	{r4, r5, r6, sl, fp, lr}
   20f10:	add	fp, sp, #16
   20f14:	sub	sp, sp, #8
   20f18:	mov	r4, r1
   20f1c:	mov	r5, r0
   20f20:	movw	r0, #4236	; 0x108c
   20f24:	movt	r0, #2
   20f28:	mov	r1, #21
   20f2c:	str	r1, [sp]
   20f30:	str	r0, [sp, #4]
   20f34:	movw	r3, #22835	; 0x5933
   20f38:	movt	r3, #3
   20f3c:	mov	r0, r5
   20f40:	mov	r1, r4
   20f44:	mov	r2, #0
   20f48:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   20f4c:	movw	r0, #4560	; 0x11d0
   20f50:	movt	r0, #2
   20f54:	mov	r6, #22
   20f58:	str	r6, [sp]
   20f5c:	str	r0, [sp, #4]
   20f60:	movw	r3, #22857	; 0x5949
   20f64:	movt	r3, #3
   20f68:	mov	r0, r5
   20f6c:	mov	r1, r4
   20f70:	mov	r2, #1
   20f74:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   20f78:	movw	r0, #4660	; 0x1234
   20f7c:	movt	r0, #2
   20f80:	str	r6, [sp]
   20f84:	str	r0, [sp, #4]
   20f88:	movw	r3, #22880	; 0x5960
   20f8c:	movt	r3, #3
   20f90:	mov	r0, r5
   20f94:	mov	r1, r4
   20f98:	mov	r2, #2
   20f9c:	bl	2fb94 <flatcc_json_printer_table_field@@Base>
   20fa0:	sub	sp, fp, #16
   20fa4:	pop	{r4, r5, r6, sl, fp, pc}
   20fa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20fac:	add	fp, sp, #24
   20fb0:	sub	sp, sp, #16
   20fb4:	mov	r4, r1
   20fb8:	mov	r5, r0
   20fbc:	movw	r6, #4940	; 0x134c
   20fc0:	movt	r6, #2
   20fc4:	movw	r7, #4760	; 0x1298
   20fc8:	movt	r7, #2
   20fcc:	mov	r0, #14
   20fd0:	stm	sp, {r0, r7}
   20fd4:	str	r6, [sp, #8]
   20fd8:	movw	r3, #23030	; 0x59f6
   20fdc:	movt	r3, #3
   20fe0:	mov	r0, r5
   20fe4:	mov	r2, #1
   20fe8:	bl	2fc20 <flatcc_json_printer_union_field@@Base>
   20fec:	mov	r8, #10
   20ff0:	str	r8, [sp]
   20ff4:	str	r7, [sp, #4]
   20ff8:	str	r6, [sp, #8]
   20ffc:	movw	r3, #23045	; 0x5a05
   21000:	movt	r3, #3
   21004:	mov	r0, r5
   21008:	mov	r1, r4
   2100c:	mov	r2, #3
   21010:	bl	2fc20 <flatcc_json_printer_union_field@@Base>
   21014:	mov	r0, #9
   21018:	stm	sp, {r0, r7}
   2101c:	str	r6, [sp, #8]
   21020:	mov	r9, #5
   21024:	movw	r3, #23056	; 0x5a10
   21028:	movt	r3, #3
   2102c:	mov	r0, r5
   21030:	mov	r1, r4
   21034:	mov	r2, #5
   21038:	bl	2fc20 <flatcc_json_printer_union_field@@Base>
   2103c:	str	r9, [sp]
   21040:	str	r7, [sp, #4]
   21044:	str	r6, [sp, #8]
   21048:	movw	r3, #23066	; 0x5a1a
   2104c:	movt	r3, #3
   21050:	mov	r0, r5
   21054:	mov	r1, r4
   21058:	mov	r2, #7
   2105c:	bl	2fc20 <flatcc_json_printer_union_field@@Base>
   21060:	str	r8, [sp]
   21064:	str	r7, [sp, #4]
   21068:	str	r6, [sp, #8]
   2106c:	movw	r3, #23072	; 0x5a20
   21070:	movt	r3, #3
   21074:	mov	r0, r5
   21078:	mov	r1, r4
   2107c:	mov	r2, #9
   21080:	bl	2f888 <flatcc_json_printer_union_vector_field@@Base>
   21084:	sub	sp, fp, #24
   21088:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2108c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21090:	add	fp, sp, #24
   21094:	sub	sp, sp, #16
   21098:	mov	r4, r1
   2109c:	mov	r5, r0
   210a0:	mov	r9, #4
   210a4:	str	r9, [sp]
   210a8:	mov	r6, #0
   210ac:	movw	r3, #22903	; 0x5977
   210b0:	movt	r3, #3
   210b4:	mov	r2, #0
   210b8:	bl	2ad18 <flatcc_json_printer_string_field@@Base>
   210bc:	mov	r8, #9
   210c0:	str	r8, [sp]
   210c4:	str	r6, [sp, #4]
   210c8:	movw	r3, #22908	; 0x597c
   210cc:	movt	r3, #3
   210d0:	mov	r0, r5
   210d4:	mov	r1, r4
   210d8:	mov	r2, #1
   210dc:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   210e0:	str	r9, [sp]
   210e4:	movw	r3, #22918	; 0x5986
   210e8:	movt	r3, #3
   210ec:	mov	r0, r5
   210f0:	mov	r1, r4
   210f4:	mov	r2, #2
   210f8:	bl	2ad18 <flatcc_json_printer_string_field@@Base>
   210fc:	str	r6, [sp, #8]
   21100:	str	r6, [sp, #12]
   21104:	mov	r7, #8
   21108:	str	r7, [sp]
   2110c:	movw	r3, #22923	; 0x598b
   21110:	movt	r3, #3
   21114:	mov	r0, r5
   21118:	mov	r1, r4
   2111c:	mov	r2, #3
   21120:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   21124:	str	r9, [sp]
   21128:	movw	r3, #22932	; 0x5994
   2112c:	movt	r3, #3
   21130:	mov	r0, r5
   21134:	mov	r1, r4
   21138:	mov	r2, #4
   2113c:	bl	2ad18 <flatcc_json_printer_string_field@@Base>
   21140:	str	r6, [sp, #8]
   21144:	str	r6, [sp, #12]
   21148:	str	r7, [sp]
   2114c:	movw	r3, #22937	; 0x5999
   21150:	movt	r3, #3
   21154:	mov	r0, r5
   21158:	mov	r1, r4
   2115c:	mov	r2, #5
   21160:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   21164:	str	r8, [sp]
   21168:	str	r6, [sp, #4]
   2116c:	movw	r3, #22946	; 0x59a2
   21170:	movt	r3, #3
   21174:	mov	r0, r5
   21178:	mov	r1, r4
   2117c:	mov	r2, #6
   21180:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   21184:	str	r6, [sp, #8]
   21188:	str	r6, [sp, #12]
   2118c:	str	r7, [sp]
   21190:	movw	r3, #22956	; 0x59ac
   21194:	movt	r3, #3
   21198:	mov	r0, r5
   2119c:	mov	r1, r4
   211a0:	mov	r2, #7
   211a4:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   211a8:	str	r8, [sp]
   211ac:	str	r6, [sp, #4]
   211b0:	movw	r3, #22965	; 0x59b5
   211b4:	movt	r3, #3
   211b8:	mov	r0, r5
   211bc:	mov	r1, r4
   211c0:	mov	r2, #8
   211c4:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   211c8:	sub	sp, fp, #24
   211cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   211d0:	push	{r4, r5, r6, sl, fp, lr}
   211d4:	add	fp, sp, #16
   211d8:	sub	sp, sp, #16
   211dc:	mov	r4, r1
   211e0:	mov	r5, r0
   211e4:	mov	r6, #0
   211e8:	str	r6, [sp, #8]
   211ec:	str	r6, [sp, #12]
   211f0:	mov	r0, #15
   211f4:	str	r0, [sp]
   211f8:	movw	r3, #22975	; 0x59bf
   211fc:	movt	r3, #3
   21200:	mov	r0, r5
   21204:	mov	r2, #0
   21208:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   2120c:	mov	r0, #16
   21210:	stm	sp, {r0, r6}
   21214:	movw	r3, #22991	; 0x59cf
   21218:	movt	r3, #3
   2121c:	mov	r0, r5
   21220:	mov	r1, r4
   21224:	mov	r2, #1
   21228:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   2122c:	sub	sp, fp, #16
   21230:	pop	{r4, r5, r6, sl, fp, pc}
   21234:	push	{r4, r5, r6, sl, fp, lr}
   21238:	add	fp, sp, #16
   2123c:	sub	sp, sp, #16
   21240:	mov	r4, r1
   21244:	mov	r5, r0
   21248:	mov	r6, #0
   2124c:	str	r6, [sp, #8]
   21250:	str	r6, [sp, #12]
   21254:	mov	r0, #15
   21258:	str	r0, [sp]
   2125c:	movw	r3, #22975	; 0x59bf
   21260:	movt	r3, #3
   21264:	mov	r0, r5
   21268:	mov	r2, #0
   2126c:	bl	2b5c4 <flatcc_json_printer_int64_field@@Base>
   21270:	mov	r0, #21
   21274:	stm	sp, {r0, r6}
   21278:	movw	r3, #23008	; 0x59e0
   2127c:	movt	r3, #3
   21280:	mov	r0, r5
   21284:	mov	r1, r4
   21288:	mov	r2, #1
   2128c:	bl	2b208 <flatcc_json_printer_uint32_field@@Base>
   21290:	sub	sp, fp, #16
   21294:	pop	{r4, r5, r6, sl, fp, pc}
   21298:	sub	r2, r1, #2
   2129c:	cmp	r2, #9
   212a0:	bhi	212e4 <main@@Base+0xb200>
   212a4:	add	r1, pc, #0
   212a8:	ldr	pc, [r1, r2, lsl #2]
   212ac:	ldrdeq	r1, [r2], -r4
   212b0:	strdeq	r1, [r2], -ip
   212b4:	strdeq	r1, [r2], -ip
   212b8:	strdeq	r1, [r2], -ip
   212bc:	strdeq	r1, [r2], -ip
   212c0:	strdeq	r1, [r2], -ip
   212c4:	andeq	r1, r2, ip, lsl #6
   212c8:	andeq	r1, r2, ip, lsl r3
   212cc:	andeq	r1, r2, ip, lsr #6
   212d0:	andeq	r1, r2, ip, lsr r3
   212d4:	movw	r1, #23083	; 0x5a2b
   212d8:	movt	r1, #3
   212dc:	mov	r2, #5
   212e0:	b	2ac1c <flatcc_json_printer_enum@@Base>
   212e4:	cmp	r1, #255	; 0xff
   212e8:	bne	212fc <main@@Base+0xb218>
   212ec:	movw	r1, #23118	; 0x5a4e
   212f0:	movt	r1, #3
   212f4:	mov	r2, #6
   212f8:	b	2ac1c <flatcc_json_printer_enum@@Base>
   212fc:	movw	r1, #29216	; 0x7220
   21300:	movt	r1, #3
   21304:	mov	r2, #4
   21308:	b	2ac1c <flatcc_json_printer_enum@@Base>
   2130c:	movw	r1, #23089	; 0x5a31
   21310:	movt	r1, #3
   21314:	mov	r2, #8
   21318:	b	2ac1c <flatcc_json_printer_enum@@Base>
   2131c:	movw	r1, #23098	; 0x5a3a
   21320:	movt	r1, #3
   21324:	mov	r2, #5
   21328:	b	2ac1c <flatcc_json_printer_enum@@Base>
   2132c:	movw	r1, #23104	; 0x5a40
   21330:	movt	r1, #3
   21334:	mov	r2, #7
   21338:	b	2ac1c <flatcc_json_printer_enum@@Base>
   2133c:	movw	r1, #23112	; 0x5a48
   21340:	movt	r1, #3
   21344:	mov	r2, #5
   21348:	b	2ac1c <flatcc_json_printer_enum@@Base>
   2134c:	ldrb	r3, [r1, #8]
   21350:	sub	r2, r3, #2
   21354:	cmp	r2, #9
   21358:	bhi	21398 <main@@Base+0xb2b4>
   2135c:	add	r3, pc, #0
   21360:	ldr	pc, [r3, r2, lsl #2]
   21364:	andeq	r1, r2, r4, lsr #7
   21368:			; <UNDEFINED> instruction: 0x000213bc
   2136c:			; <UNDEFINED> instruction: 0x000213bc
   21370:			; <UNDEFINED> instruction: 0x000213bc
   21374:			; <UNDEFINED> instruction: 0x000213bc
   21378:			; <UNDEFINED> instruction: 0x000213bc
   2137c:			; <UNDEFINED> instruction: 0x000213b0
   21380:	andeq	r1, r2, ip, lsl #7
   21384:	andeq	r1, r2, ip, lsl #7
   21388:	andeq	r1, r2, r0, lsr #7
   2138c:	movw	r2, #5164	; 0x142c
   21390:	movt	r2, #2
   21394:	b	2fe5c <flatcc_json_printer_union_struct@@Base>
   21398:	cmp	r3, #255	; 0xff
   2139c:	bxne	lr
   213a0:	b	2feec <flatcc_json_printer_union_string@@Base>
   213a4:	movw	r2, #5056	; 0x13c0
   213a8:	movt	r2, #2
   213ac:	b	2fe28 <flatcc_json_printer_union_table@@Base>
   213b0:	movw	r2, #5108	; 0x13f4
   213b4:	movt	r2, #2
   213b8:	b	2fe5c <flatcc_json_printer_union_struct@@Base>
   213bc:	bx	lr
   213c0:	push	{fp, lr}
   213c4:	mov	fp, sp
   213c8:	sub	sp, sp, #8
   213cc:	mov	r2, #0
   213d0:	mov	r3, #19
   213d4:	str	r3, [sp]
   213d8:	str	r2, [sp, #4]
   213dc:	movw	r3, #23125	; 0x5a55
   213e0:	movt	r3, #3
   213e4:	mov	r2, #0
   213e8:	bl	2b50c <flatcc_json_printer_int32_field@@Base>
   213ec:	mov	sp, fp
   213f0:	pop	{fp, pc}
   213f4:	push	{fp, lr}
   213f8:	mov	fp, sp
   213fc:	sub	sp, sp, #8
   21400:	mov	r2, r1
   21404:	mov	r1, #11
   21408:	movw	r3, #23145	; 0x5a69
   2140c:	movt	r3, #3
   21410:	str	r3, [sp]
   21414:	str	r1, [sp, #4]
   21418:	mov	r1, #0
   2141c:	mov	r3, #0
   21420:	bl	2c1f4 <flatcc_json_printer_uint16_struct_field@@Base>
   21424:	mov	sp, fp
   21428:	pop	{fp, pc}
   2142c:	push	{fp, lr}
   21430:	mov	fp, sp
   21434:	sub	sp, sp, #8
   21438:	mov	r2, r1
   2143c:	mov	r1, #10
   21440:	movw	r3, #23157	; 0x5a75
   21444:	movt	r3, #3
   21448:	str	r3, [sp]
   2144c:	str	r1, [sp, #4]
   21450:	mov	r1, #0
   21454:	mov	r3, #0
   21458:	bl	2c3f0 <flatcc_json_printer_int32_struct_field@@Base>
   2145c:	mov	sp, fp
   21460:	pop	{fp, pc}
   21464:	ldrb	r1, [r0, #12]
   21468:	sub	r1, r1, #1
   2146c:	uxtb	r2, r1
   21470:	cmp	r2, #3
   21474:	movhi	r0, #0
   21478:	bxhi	lr
   2147c:	sxtb	r1, r1
   21480:	movw	r2, #23328	; 0x5b20
   21484:	movt	r2, #3
   21488:	ldr	r1, [r2, r1, lsl #2]
   2148c:	b	25a3c <flatcc_verify_union_table@@Base>
   21490:	push	{r4, sl, fp, lr}
   21494:	add	fp, sp, #8
   21498:	mov	r4, r0
   2149c:	mov	r1, #0
   214a0:	mov	r2, #0
   214a4:	bl	2541c <flatcc_verify_string_field@@Base>
   214a8:	cmp	r0, #0
   214ac:	popne	{r4, sl, fp, pc}
   214b0:	mov	r0, r4
   214b4:	mov	r1, #1
   214b8:	mov	r2, #8
   214bc:	mov	r3, #8
   214c0:	bl	253b0 <flatcc_verify_field@@Base>
   214c4:	cmp	r0, #0
   214c8:	beq	214d0 <main@@Base+0xb3ec>
   214cc:	pop	{r4, sl, fp, pc}
   214d0:	mov	r0, r4
   214d4:	mov	r1, #2
   214d8:	mov	r2, #2
   214dc:	mov	r3, #2
   214e0:	pop	{r4, sl, fp, lr}
   214e4:	b	253b0 <flatcc_verify_field@@Base>
   214e8:	mov	r0, #0
   214ec:	bx	lr
   214f0:	push	{r4, r5, r6, sl, fp, lr}
   214f4:	add	fp, sp, #16
   214f8:	sub	sp, sp, #8
   214fc:	mov	r4, r0
   21500:	mvn	r5, #0
   21504:	mov	r6, #1
   21508:	str	r6, [sp]
   2150c:	str	r5, [sp, #4]
   21510:	mov	r1, #0
   21514:	mov	r2, #0
   21518:	mov	r3, #1
   2151c:	bl	25570 <flatcc_verify_vector_field@@Base>
   21520:	cmp	r0, #0
   21524:	bne	2154c <main@@Base+0xb468>
   21528:	str	r6, [sp]
   2152c:	str	r5, [sp, #4]
   21530:	mov	r0, r4
   21534:	mov	r1, #1
   21538:	mov	r2, #0
   2153c:	mov	r3, #1
   21540:	bl	25570 <flatcc_verify_vector_field@@Base>
   21544:	cmp	r0, #0
   21548:	beq	21554 <main@@Base+0xb470>
   2154c:	sub	sp, fp, #16
   21550:	pop	{r4, r5, r6, sl, fp, pc}
   21554:	movw	r0, #39724	; 0x9b2c
   21558:	movt	r0, #1
   2155c:	mov	r1, #1
   21560:	str	r1, [sp]
   21564:	str	r0, [sp, #4]
   21568:	mov	r0, r4
   2156c:	mov	r1, #2
   21570:	mov	r2, #0
   21574:	mov	r3, #0
   21578:	bl	25e98 <flatcc_verify_table_as_nested_root@@Base>
   2157c:	sub	sp, fp, #16
   21580:	pop	{r4, r5, r6, sl, fp, pc}
   21584:	push	{r4, sl, fp, lr}
   21588:	add	fp, sp, #8
   2158c:	mov	r4, r0
   21590:	mov	r1, #0
   21594:	mov	r2, #1
   21598:	mov	r3, #1
   2159c:	bl	253b0 <flatcc_verify_field@@Base>
   215a0:	cmp	r0, #0
   215a4:	bne	215e0 <main@@Base+0xb4fc>
   215a8:	mov	r0, r4
   215ac:	mov	r1, #1
   215b0:	mov	r2, #1
   215b4:	mov	r3, #1
   215b8:	bl	253b0 <flatcc_verify_field@@Base>
   215bc:	cmp	r0, #0
   215c0:	popne	{r4, sl, fp, pc}
   215c4:	mov	r0, r4
   215c8:	mov	r1, #2
   215cc:	mov	r2, #1
   215d0:	mov	r3, #1
   215d4:	bl	253b0 <flatcc_verify_field@@Base>
   215d8:	cmp	r0, #0
   215dc:	beq	215e4 <main@@Base+0xb500>
   215e0:	pop	{r4, sl, fp, pc}
   215e4:	mov	r0, r4
   215e8:	mov	r1, #3
   215ec:	mov	r2, #1
   215f0:	mov	r3, #1
   215f4:	pop	{r4, sl, fp, lr}
   215f8:	b	253b0 <flatcc_verify_field@@Base>
   215fc:	mov	r0, #0
   21600:	bx	lr
   21604:	push	{r4, sl, fp, lr}
   21608:	add	fp, sp, #8
   2160c:	mov	r4, r0
   21610:	movw	r3, #5740	; 0x166c
   21614:	movt	r3, #2
   21618:	mov	r1, #0
   2161c:	mov	r2, #0
   21620:	bl	25768 <flatcc_verify_table_field@@Base>
   21624:	cmp	r0, #0
   21628:	popne	{r4, sl, fp, pc}
   2162c:	movw	r3, #5844	; 0x16d4
   21630:	movt	r3, #2
   21634:	mov	r0, r4
   21638:	mov	r1, #1
   2163c:	mov	r2, #0
   21640:	bl	25768 <flatcc_verify_table_field@@Base>
   21644:	cmp	r0, #0
   21648:	beq	21650 <main@@Base+0xb56c>
   2164c:	pop	{r4, sl, fp, pc}
   21650:	movw	r3, #5220	; 0x1464
   21654:	movt	r3, #2
   21658:	mov	r0, r4
   2165c:	mov	r1, #3
   21660:	mov	r2, #0
   21664:	pop	{r4, sl, fp, lr}
   21668:	b	26110 <flatcc_verify_union_vector_field@@Base>
   2166c:	push	{r4, sl, fp, lr}
   21670:	add	fp, sp, #8
   21674:	mov	r4, r0
   21678:	movw	r3, #6012	; 0x177c
   2167c:	movt	r3, #2
   21680:	mov	r1, #0
   21684:	mov	r2, #0
   21688:	bl	25768 <flatcc_verify_table_field@@Base>
   2168c:	cmp	r0, #0
   21690:	popne	{r4, sl, fp, pc}
   21694:	movw	r3, #6260	; 0x1874
   21698:	movt	r3, #2
   2169c:	mov	r0, r4
   216a0:	mov	r1, #1
   216a4:	mov	r2, #0
   216a8:	bl	25768 <flatcc_verify_table_field@@Base>
   216ac:	cmp	r0, #0
   216b0:	beq	216b8 <main@@Base+0xb5d4>
   216b4:	pop	{r4, sl, fp, pc}
   216b8:	movw	r3, #6320	; 0x18b0
   216bc:	movt	r3, #2
   216c0:	mov	r0, r4
   216c4:	mov	r1, #2
   216c8:	mov	r2, #0
   216cc:	pop	{r4, sl, fp, lr}
   216d0:	b	25768 <flatcc_verify_table_field@@Base>
   216d4:	push	{r4, sl, fp, lr}
   216d8:	add	fp, sp, #8
   216dc:	mov	r4, r0
   216e0:	movw	r3, #6380	; 0x18ec
   216e4:	movt	r3, #2
   216e8:	mov	r1, #1
   216ec:	mov	r2, #0
   216f0:	bl	25fa4 <flatcc_verify_union_field@@Base>
   216f4:	cmp	r0, #0
   216f8:	bne	2175c <main@@Base+0xb678>
   216fc:	movw	r3, #6380	; 0x18ec
   21700:	movt	r3, #2
   21704:	mov	r0, r4
   21708:	mov	r1, #3
   2170c:	mov	r2, #0
   21710:	bl	25fa4 <flatcc_verify_union_field@@Base>
   21714:	cmp	r0, #0
   21718:	bne	2175c <main@@Base+0xb678>
   2171c:	movw	r3, #6380	; 0x18ec
   21720:	movt	r3, #2
   21724:	mov	r0, r4
   21728:	mov	r1, #5
   2172c:	mov	r2, #0
   21730:	bl	25fa4 <flatcc_verify_union_field@@Base>
   21734:	cmp	r0, #0
   21738:	popne	{r4, sl, fp, pc}
   2173c:	movw	r3, #6380	; 0x18ec
   21740:	movt	r3, #2
   21744:	mov	r0, r4
   21748:	mov	r1, #7
   2174c:	mov	r2, #0
   21750:	bl	25fa4 <flatcc_verify_union_field@@Base>
   21754:	cmp	r0, #0
   21758:	beq	21760 <main@@Base+0xb67c>
   2175c:	pop	{r4, sl, fp, pc}
   21760:	movw	r3, #6380	; 0x18ec
   21764:	movt	r3, #2
   21768:	mov	r0, r4
   2176c:	mov	r1, #9
   21770:	mov	r2, #0
   21774:	pop	{r4, sl, fp, lr}
   21778:	b	26110 <flatcc_verify_union_vector_field@@Base>
   2177c:	push	{r4, sl, fp, lr}
   21780:	add	fp, sp, #8
   21784:	mov	r4, r0
   21788:	mov	r1, #0
   2178c:	mov	r2, #0
   21790:	bl	2541c <flatcc_verify_string_field@@Base>
   21794:	cmp	r0, #0
   21798:	bne	21858 <main@@Base+0xb774>
   2179c:	mov	r0, r4
   217a0:	mov	r1, #1
   217a4:	mov	r2, #4
   217a8:	mov	r3, #4
   217ac:	bl	253b0 <flatcc_verify_field@@Base>
   217b0:	cmp	r0, #0
   217b4:	bne	21858 <main@@Base+0xb774>
   217b8:	mov	r0, r4
   217bc:	mov	r1, #2
   217c0:	mov	r2, #0
   217c4:	bl	2541c <flatcc_verify_string_field@@Base>
   217c8:	cmp	r0, #0
   217cc:	bne	21858 <main@@Base+0xb774>
   217d0:	mov	r0, r4
   217d4:	mov	r1, #3
   217d8:	mov	r2, #8
   217dc:	mov	r3, #8
   217e0:	bl	253b0 <flatcc_verify_field@@Base>
   217e4:	cmp	r0, #0
   217e8:	bne	21858 <main@@Base+0xb774>
   217ec:	mov	r0, r4
   217f0:	mov	r1, #4
   217f4:	mov	r2, #0
   217f8:	bl	2541c <flatcc_verify_string_field@@Base>
   217fc:	cmp	r0, #0
   21800:	bne	21858 <main@@Base+0xb774>
   21804:	mov	r0, r4
   21808:	mov	r1, #5
   2180c:	mov	r2, #8
   21810:	mov	r3, #8
   21814:	bl	253b0 <flatcc_verify_field@@Base>
   21818:	cmp	r0, #0
   2181c:	bne	21858 <main@@Base+0xb774>
   21820:	mov	r0, r4
   21824:	mov	r1, #6
   21828:	mov	r2, #4
   2182c:	mov	r3, #4
   21830:	bl	253b0 <flatcc_verify_field@@Base>
   21834:	cmp	r0, #0
   21838:	popne	{r4, sl, fp, pc}
   2183c:	mov	r0, r4
   21840:	mov	r1, #7
   21844:	mov	r2, #8
   21848:	mov	r3, #8
   2184c:	bl	253b0 <flatcc_verify_field@@Base>
   21850:	cmp	r0, #0
   21854:	beq	2185c <main@@Base+0xb778>
   21858:	pop	{r4, sl, fp, pc}
   2185c:	mov	r0, r4
   21860:	mov	r1, #8
   21864:	mov	r2, #4
   21868:	mov	r3, #4
   2186c:	pop	{r4, sl, fp, lr}
   21870:	b	253b0 <flatcc_verify_field@@Base>
   21874:	push	{r4, sl, fp, lr}
   21878:	add	fp, sp, #8
   2187c:	mov	r4, r0
   21880:	mov	r1, #0
   21884:	mov	r2, #8
   21888:	mov	r3, #8
   2188c:	bl	253b0 <flatcc_verify_field@@Base>
   21890:	cmp	r0, #0
   21894:	popne	{r4, sl, fp, pc}
   21898:	mov	r0, r4
   2189c:	mov	r1, #1
   218a0:	mov	r2, #4
   218a4:	mov	r3, #4
   218a8:	pop	{r4, sl, fp, lr}
   218ac:	b	253b0 <flatcc_verify_field@@Base>
   218b0:	push	{r4, sl, fp, lr}
   218b4:	add	fp, sp, #8
   218b8:	mov	r4, r0
   218bc:	mov	r1, #0
   218c0:	mov	r2, #8
   218c4:	mov	r3, #8
   218c8:	bl	253b0 <flatcc_verify_field@@Base>
   218cc:	cmp	r0, #0
   218d0:	popne	{r4, sl, fp, pc}
   218d4:	mov	r0, r4
   218d8:	mov	r1, #1
   218dc:	mov	r2, #4
   218e0:	mov	r3, #4
   218e4:	pop	{r4, sl, fp, lr}
   218e8:	b	253b0 <flatcc_verify_field@@Base>
   218ec:	ldrb	r2, [r0, #12]
   218f0:	sub	r1, r2, #2
   218f4:	cmp	r1, #9
   218f8:	bhi	21938 <main@@Base+0xb854>
   218fc:	add	r2, pc, #0
   21900:	ldr	pc, [r2, r1, lsl #2]
   21904:	andeq	r1, r2, ip, asr #18
   21908:	andeq	r1, r2, r4, asr #18
   2190c:	andeq	r1, r2, r4, asr #18
   21910:	andeq	r1, r2, r4, asr #18
   21914:	andeq	r1, r2, r4, asr #18
   21918:	andeq	r1, r2, r4, asr #18
   2191c:	andeq	r1, r2, r8, asr r9
   21920:	andeq	r1, r2, ip, lsr #18
   21924:	andeq	r1, r2, ip, lsr #18
   21928:	andeq	r1, r2, r0, asr #18
   2192c:	mov	r1, #4
   21930:	mov	r2, #4
   21934:	b	25a70 <flatcc_verify_union_struct@@Base>
   21938:	cmp	r2, #255	; 0xff
   2193c:	bne	21944 <main@@Base+0xb860>
   21940:	b	25af0 <flatcc_verify_union_string@@Base>
   21944:	mov	r0, #0
   21948:	bx	lr
   2194c:	movw	r1, #6500	; 0x1964
   21950:	movt	r1, #2
   21954:	b	25a3c <flatcc_verify_union_table@@Base>
   21958:	mov	r1, #2
   2195c:	mov	r2, #2
   21960:	b	25a70 <flatcc_verify_union_struct@@Base>
   21964:	mov	r1, #0
   21968:	mov	r2, #4
   2196c:	mov	r3, #4
   21970:	b	253b0 <flatcc_verify_field@@Base>

00021974 <flatcc_builder_default_alloc@@Base>:
   21974:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21978:	add	fp, sp, #24
   2197c:	mov	r4, r1
   21980:	cmp	r2, #0
   21984:	beq	219cc <flatcc_builder_default_alloc@@Base+0x58>
   21988:	mov	r8, r3
   2198c:	ldr	r0, [fp, #8]
   21990:	sub	r1, r0, #1
   21994:	cmp	r1, #6
   21998:	bhi	219fc <flatcc_builder_default_alloc@@Base+0x88>
   2199c:	mov	r0, #256	; 0x100
   219a0:	add	r3, pc, #0
   219a4:	ldr	pc, [r3, r1, lsl #2]
   219a8:	andeq	r1, r2, r0, lsl sl
   219ac:	strdeq	r1, [r2], -ip
   219b0:	strdeq	r1, [r2], -ip
   219b4:	andeq	r1, r2, r4, asr #19
   219b8:	andeq	r1, r2, r4, lsl #20
   219bc:	strdeq	r1, [r2], -ip
   219c0:	andeq	r1, r2, ip, lsl #20
   219c4:	mov	r0, #288	; 0x120
   219c8:	b	21a10 <flatcc_builder_default_alloc@@Base+0x9c>
   219cc:	ldr	r0, [r4]
   219d0:	cmp	r0, #0
   219d4:	beq	219f0 <flatcc_builder_default_alloc@@Base+0x7c>
   219d8:	bl	14e50 <free@plt>
   219dc:	mov	r6, #0
   219e0:	str	r6, [r4]
   219e4:	str	r6, [r4, #4]
   219e8:	mov	r0, r6
   219ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   219f0:	mov	r6, #0
   219f4:	mov	r0, r6
   219f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   219fc:	mov	r0, #32
   21a00:	b	21a10 <flatcc_builder_default_alloc@@Base+0x9c>
   21a04:	mov	r0, r2
   21a08:	b	21a10 <flatcc_builder_default_alloc@@Base+0x9c>
   21a0c:	mov	r0, #64	; 0x40
   21a10:	mov	r7, r0
   21a14:	lsl	r0, r0, #1
   21a18:	cmp	r7, r2
   21a1c:	bcc	21a10 <flatcc_builder_default_alloc@@Base+0x9c>
   21a20:	ldr	r0, [r4, #4]
   21a24:	mov	r6, #0
   21a28:	cmp	r0, r2
   21a2c:	lsrcs	r0, r0, #1
   21a30:	cmpcs	r0, r7
   21a34:	bcs	21a78 <flatcc_builder_default_alloc@@Base+0x104>
   21a38:	ldr	r0, [r4]
   21a3c:	mov	r1, r7
   21a40:	bl	14e80 <realloc@plt>
   21a44:	cmp	r0, #0
   21a48:	beq	21a80 <flatcc_builder_default_alloc@@Base+0x10c>
   21a4c:	mov	r5, r0
   21a50:	cmp	r8, #0
   21a54:	beq	21a74 <flatcc_builder_default_alloc@@Base+0x100>
   21a58:	ldr	r1, [r4, #4]
   21a5c:	cmp	r7, r1
   21a60:	bls	21a74 <flatcc_builder_default_alloc@@Base+0x100>
   21a64:	add	r0, r5, r1
   21a68:	sub	r2, r7, r1
   21a6c:	mov	r1, #0
   21a70:	bl	14eec <memset@plt>
   21a74:	stm	r4, {r5, r7}
   21a78:	mov	r0, r6
   21a7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21a80:	mvn	r6, #0
   21a84:	mov	r0, r6
   21a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00021a8c <flatcc_builder_flush_vtable_cache@@Base>:
   21a8c:	push	{r4, r5, fp, lr}
   21a90:	add	fp, sp, #8
   21a94:	mov	r4, r0
   21a98:	ldr	r0, [r0, #116]	; 0x74
   21a9c:	cmp	r0, #0
   21aa0:	popeq	{r4, r5, fp, pc}
   21aa4:	ldr	r0, [r4, #92]	; 0x5c
   21aa8:	ldr	r2, [r4, #96]	; 0x60
   21aac:	mov	r5, #0
   21ab0:	mov	r1, #0
   21ab4:	bl	14eec <memset@plt>
   21ab8:	mov	r0, #16
   21abc:	str	r5, [r4, #120]	; 0x78
   21ac0:	str	r0, [r4, #124]	; 0x7c
   21ac4:	pop	{r4, r5, fp, pc}

00021ac8 <flatcc_builder_custom_init@@Base>:
   21ac8:	push	{r4, r5, r6, r7, fp, lr}
   21acc:	add	fp, sp, #16
   21ad0:	mov	r5, r3
   21ad4:	mov	r6, r2
   21ad8:	mov	r7, r1
   21adc:	mov	r4, r0
   21ae0:	mov	r1, #0
   21ae4:	mov	r2, #232	; 0xe8
   21ae8:	bl	14eec <memset@plt>
   21aec:	ldr	r0, [fp, #8]
   21af0:	cmp	r7, #0
   21af4:	bne	21b0c <flatcc_builder_custom_init@@Base+0x44>
   21af8:	mov	r1, #1
   21afc:	str	r1, [r4, #184]	; 0xb8
   21b00:	add	r6, r4, #188	; 0xbc
   21b04:	movw	r7, #20120	; 0x4e98
   21b08:	movt	r7, #2
   21b0c:	movw	r1, #6516	; 0x1974
   21b10:	movt	r1, #2
   21b14:	cmp	r5, #0
   21b18:	movne	r1, r5
   21b1c:	str	r6, [r4, #36]	; 0x24
   21b20:	str	r0, [r4, #40]	; 0x28
   21b24:	str	r7, [r4, #44]	; 0x2c
   21b28:	str	r1, [r4, #48]	; 0x30
   21b2c:	mov	r0, #0
   21b30:	pop	{r4, r5, r6, r7, fp, pc}

00021b34 <flatcc_builder_init@@Base>:
   21b34:	push	{fp, lr}
   21b38:	mov	fp, sp
   21b3c:	sub	sp, sp, #8
   21b40:	mov	r1, #0
   21b44:	str	r1, [sp]
   21b48:	mov	r1, #0
   21b4c:	mov	r2, #0
   21b50:	mov	r3, #0
   21b54:	bl	21ac8 <flatcc_builder_custom_init@@Base>
   21b58:	mov	r0, #0
   21b5c:	mov	sp, fp
   21b60:	pop	{fp, pc}

00021b64 <flatcc_builder_custom_reset@@Base>:
   21b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b68:	add	fp, sp, #28
   21b6c:	sub	sp, sp, #4
   21b70:	mov	r9, r2
   21b74:	mov	r8, r1
   21b78:	mov	sl, r0
   21b7c:	add	r7, r0, #52	; 0x34
   21b80:	mov	r5, #0
   21b84:	b	21ba4 <flatcc_builder_custom_reset@@Base+0x40>
   21b88:	ldr	r0, [r6, #56]	; 0x38
   21b8c:	cmp	r0, #0
   21b90:	bne	21c8c <flatcc_builder_custom_reset@@Base+0x128>
   21b94:	add	r7, r7, #8
   21b98:	add	r5, r5, #1
   21b9c:	cmp	r5, #8
   21ba0:	beq	21bf8 <flatcc_builder_custom_reset@@Base+0x94>
   21ba4:	add	r6, sl, r5, lsl #3
   21ba8:	ldr	r0, [r6, #52]	; 0x34
   21bac:	cmp	r0, #0
   21bb0:	beq	21b88 <flatcc_builder_custom_reset@@Base+0x24>
   21bb4:	cmp	r9, #0
   21bb8:	cmpne	r5, #5
   21bbc:	beq	21be4 <flatcc_builder_custom_reset@@Base+0x80>
   21bc0:	ldr	r0, [sl, #40]	; 0x28
   21bc4:	ldr	r4, [sl, #48]	; 0x30
   21bc8:	str	r5, [sp]
   21bcc:	mov	r1, r7
   21bd0:	mov	r2, #1
   21bd4:	mov	r3, #1
   21bd8:	blx	r4
   21bdc:	cmp	r0, #0
   21be0:	bne	21c7c <flatcc_builder_custom_reset@@Base+0x118>
   21be4:	ldr	r0, [r6, #52]	; 0x34
   21be8:	ldr	r2, [r6, #56]	; 0x38
   21bec:	mov	r1, #0
   21bf0:	bl	14eec <memset@plt>
   21bf4:	b	21b94 <flatcc_builder_custom_reset@@Base+0x30>
   21bf8:	mov	r0, #0
   21bfc:	str	r0, [sl, #120]	; 0x78
   21c00:	ldr	r1, [sl, #124]	; 0x7c
   21c04:	cmp	r1, #0
   21c08:	movne	r1, #16
   21c0c:	strne	r1, [sl, #124]	; 0x7c
   21c10:	vmov.i32	q8, #0	; 0x00000000
   21c14:	str	r0, [sl, #136]	; 0x88
   21c18:	str	r0, [sl, #140]	; 0x8c
   21c1c:	strh	r0, [sl, #128]	; 0x80
   21c20:	str	r0, [sl, #32]
   21c24:	add	r1, sl, #148	; 0x94
   21c28:	vst1.32	{d16-d17}, [r1]
   21c2c:	ldr	r1, [sl, #52]	; 0x34
   21c30:	ldr	r2, [sl, #60]	; 0x3c
   21c34:	ldr	r3, [sl, #76]	; 0x4c
   21c38:	str	r2, [sl, #16]
   21c3c:	str	r0, [sl, #20]
   21c40:	str	r0, [sl, #24]
   21c44:	str	r3, [sl]
   21c48:	str	r1, [sl, #4]
   21c4c:	cmp	r8, #0
   21c50:	movne	r0, #0
   21c54:	strne	r0, [sl, #172]	; 0xac
   21c58:	strne	r0, [sl, #176]	; 0xb0
   21c5c:	strne	r0, [sl, #180]	; 0xb4
   21c60:	ldr	r0, [sl, #184]	; 0xb8
   21c64:	mov	r5, #0
   21c68:	cmp	r0, #0
   21c6c:	beq	21c80 <flatcc_builder_custom_reset@@Base+0x11c>
   21c70:	add	r0, sl, #188	; 0xbc
   21c74:	bl	24d74 <flatcc_emitter_reset@@Base>
   21c78:	b	21c80 <flatcc_builder_custom_reset@@Base+0x11c>
   21c7c:	mvn	r5, #0
   21c80:	mov	r0, r5
   21c84:	sub	sp, fp, #28
   21c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c8c:	movw	r0, #23856	; 0x5d30
   21c90:	movt	r0, #3
   21c94:	movw	r1, #23874	; 0x5d42
   21c98:	movt	r1, #3
   21c9c:	movw	r3, #23944	; 0x5d88
   21ca0:	movt	r3, #3
   21ca4:	movw	r2, #434	; 0x1b2
   21ca8:	bl	14f40 <__assert_fail@plt>

00021cac <flatcc_builder_reset@@Base>:
   21cac:	mov	r1, #0
   21cb0:	mov	r2, #0
   21cb4:	b	21b64 <flatcc_builder_custom_reset@@Base>

00021cb8 <flatcc_builder_clear@@Base>:
   21cb8:	push	{r4, r5, r6, r7, fp, lr}
   21cbc:	add	fp, sp, #16
   21cc0:	sub	sp, sp, #8
   21cc4:	mov	r7, r0
   21cc8:	add	r5, r0, #52	; 0x34
   21ccc:	mov	r6, #0
   21cd0:	ldr	r0, [r7, #40]	; 0x28
   21cd4:	ldr	r4, [r7, #48]	; 0x30
   21cd8:	str	r6, [sp]
   21cdc:	mov	r1, r5
   21ce0:	mov	r2, #0
   21ce4:	mov	r3, #0
   21ce8:	blx	r4
   21cec:	add	r5, r5, #8
   21cf0:	add	r6, r6, #1
   21cf4:	cmp	r6, #8
   21cf8:	bne	21cd0 <flatcc_builder_clear@@Base+0x18>
   21cfc:	ldr	r0, [r7, #184]	; 0xb8
   21d00:	cmp	r0, #0
   21d04:	beq	21d10 <flatcc_builder_clear@@Base+0x58>
   21d08:	add	r0, r7, #188	; 0xbc
   21d0c:	bl	24e34 <flatcc_emitter_clear@@Base>
   21d10:	mov	r0, r7
   21d14:	mov	r1, #0
   21d18:	mov	r2, #232	; 0xe8
   21d1c:	sub	sp, fp, #16
   21d20:	pop	{r4, r5, r6, r7, fp, lr}
   21d24:	b	14eec <memset@plt>

00021d28 <flatcc_builder_enter_user_frame_ptr@@Base>:
   21d28:	push	{r4, r5, r6, r7, fp, lr}
   21d2c:	add	fp, sp, #16
   21d30:	sub	sp, sp, #8
   21d34:	mov	r4, r0
   21d38:	ldr	r2, [r0, #228]	; 0xe4
   21d3c:	mov	r7, #0
   21d40:	str	r7, [sp]
   21d44:	add	r0, r1, #7
   21d48:	bic	r5, r0, #3
   21d4c:	mov	r0, r4
   21d50:	mov	r1, #7
   21d54:	mov	r3, r5
   21d58:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21d5c:	cmp	r0, #0
   21d60:	beq	21d94 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   21d64:	mov	r6, r0
   21d68:	mov	r1, #0
   21d6c:	mov	r2, r5
   21d70:	bl	14eec <memset@plt>
   21d74:	ldr	r0, [r4, #224]	; 0xe0
   21d78:	str	r0, [r6], #4
   21d7c:	ldr	r0, [r4, #228]	; 0xe4
   21d80:	add	r1, r0, #4
   21d84:	add	r0, r0, r5
   21d88:	str	r1, [r4, #224]	; 0xe0
   21d8c:	str	r0, [r4, #228]	; 0xe4
   21d90:	mov	r7, r6
   21d94:	mov	r0, r7
   21d98:	sub	sp, fp, #16
   21d9c:	pop	{r4, r5, r6, r7, fp, pc}
   21da0:	push	{r4, r5, fp, lr}
   21da4:	add	fp, sp, #8
   21da8:	sub	sp, sp, #8
   21dac:	mov	r4, r2
   21db0:	add	r2, r3, r2
   21db4:	add	r3, r0, r1, lsl #3
   21db8:	add	r5, r3, #52	; 0x34
   21dbc:	ldr	r3, [r3, #56]	; 0x38
   21dc0:	cmp	r2, r3
   21dc4:	bls	21dec <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   21dc8:	ldr	r3, [fp, #8]
   21dcc:	ldr	ip, [r0, #40]	; 0x28
   21dd0:	ldr	lr, [r0, #48]	; 0x30
   21dd4:	str	r1, [sp]
   21dd8:	mov	r0, ip
   21ddc:	mov	r1, r5
   21de0:	blx	lr
   21de4:	cmp	r0, #0
   21de8:	bne	21dfc <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   21dec:	ldr	r0, [r5]
   21df0:	add	r0, r0, r4
   21df4:	sub	sp, fp, #8
   21df8:	pop	{r4, r5, fp, pc}
   21dfc:	movw	r0, #28392	; 0x6ee8
   21e00:	movt	r0, #3
   21e04:	movw	r1, #23874	; 0x5d42
   21e08:	movt	r1, #3
   21e0c:	movw	r3, #27938	; 0x6d22
   21e10:	movt	r3, #3
   21e14:	mov	r2, #308	; 0x134
   21e18:	bl	14f40 <__assert_fail@plt>

00021e1c <flatcc_builder_enter_user_frame@@Base>:
   21e1c:	push	{r4, r5, r6, r7, fp, lr}
   21e20:	add	fp, sp, #16
   21e24:	sub	sp, sp, #8
   21e28:	mov	r4, r0
   21e2c:	ldr	r2, [r0, #228]	; 0xe4
   21e30:	mov	r6, #0
   21e34:	str	r6, [sp]
   21e38:	add	r0, r1, #7
   21e3c:	bic	r5, r0, #3
   21e40:	mov	r0, r4
   21e44:	mov	r1, #7
   21e48:	mov	r3, r5
   21e4c:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   21e50:	cmp	r0, #0
   21e54:	beq	21e84 <flatcc_builder_enter_user_frame@@Base+0x68>
   21e58:	mov	r7, r0
   21e5c:	mov	r1, #0
   21e60:	mov	r2, r5
   21e64:	bl	14eec <memset@plt>
   21e68:	ldr	r0, [r4, #224]	; 0xe0
   21e6c:	str	r0, [r7]
   21e70:	ldr	r0, [r4, #228]	; 0xe4
   21e74:	add	r6, r0, #4
   21e78:	add	r0, r0, r5
   21e7c:	str	r6, [r4, #224]	; 0xe0
   21e80:	str	r0, [r4, #228]	; 0xe4
   21e84:	mov	r0, r6
   21e88:	sub	sp, fp, #16
   21e8c:	pop	{r4, r5, r6, r7, fp, pc}

00021e90 <flatcc_builder_exit_user_frame@@Base>:
   21e90:	push	{fp, lr}
   21e94:	mov	fp, sp
   21e98:	ldr	r1, [r0, #224]	; 0xe0
   21e9c:	cmp	r1, #0
   21ea0:	subne	r2, r1, #4
   21ea4:	strne	r2, [r0, #228]	; 0xe4
   21ea8:	ldrne	r2, [r0, #108]	; 0x6c
   21eac:	addne	r1, r2, r1
   21eb0:	ldrne	r1, [r1, #-4]
   21eb4:	strne	r1, [r0, #224]	; 0xe0
   21eb8:	movne	r0, r1
   21ebc:	popne	{fp, pc}
   21ec0:	movw	r0, #24006	; 0x5dc6
   21ec4:	movt	r0, #3
   21ec8:	movw	r1, #23874	; 0x5d42
   21ecc:	movt	r1, #3
   21ed0:	movw	r3, #24031	; 0x5ddf
   21ed4:	movt	r3, #3
   21ed8:	movw	r2, #542	; 0x21e
   21edc:	bl	14f40 <__assert_fail@plt>

00021ee0 <flatcc_builder_exit_user_frame_at@@Base>:
   21ee0:	push	{fp, lr}
   21ee4:	mov	fp, sp
   21ee8:	ldr	r2, [r0, #224]	; 0xe0
   21eec:	cmp	r2, r1
   21ef0:	bcc	21f00 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   21ef4:	str	r1, [r0, #224]	; 0xe0
   21ef8:	pop	{fp, lr}
   21efc:	b	21e90 <flatcc_builder_exit_user_frame@@Base>
   21f00:	movw	r0, #24089	; 0x5e19
   21f04:	movt	r0, #3
   21f08:	movw	r1, #23874	; 0x5d42
   21f0c:	movt	r1, #3
   21f10:	movw	r3, #24120	; 0x5e38
   21f14:	movt	r3, #3
   21f18:	movw	r2, #551	; 0x227
   21f1c:	bl	14f40 <__assert_fail@plt>

00021f20 <flatcc_builder_get_current_user_frame@@Base>:
   21f20:	ldr	r0, [r0, #224]	; 0xe0
   21f24:	bx	lr

00021f28 <flatcc_builder_get_user_frame_ptr@@Base>:
   21f28:	ldr	r0, [r0, #108]	; 0x6c
   21f2c:	add	r0, r0, r1
   21f30:	bx	lr

00021f34 <flatcc_builder_embed_buffer@@Base>:
   21f34:	push	{r4, r5, r6, r7, fp, lr}
   21f38:	add	fp, sp, #16
   21f3c:	sub	sp, sp, #80	; 0x50
   21f40:	mov	r5, r3
   21f44:	mov	r6, r2
   21f48:	mov	r2, r1
   21f4c:	mov	r4, r0
   21f50:	ldr	r0, [fp, #8]
   21f54:	strh	r0, [fp, #-18]	; 0xffffffee
   21f58:	ldr	r3, [r4, #152]	; 0x98
   21f5c:	cmp	r3, #0
   21f60:	movwne	r3, #1
   21f64:	sub	r1, fp, #18
   21f68:	mov	r0, r4
   21f6c:	bl	22040 <flatcc_builder_embed_buffer@@Base+0x10c>
   21f70:	ldr	r0, [fp, #12]
   21f74:	and	r0, r0, #2
   21f78:	add	r1, r5, r0, lsl #1
   21f7c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   21f80:	mov	r0, r4
   21f84:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   21f88:	mov	r7, r0
   21f8c:	add	r0, r0, r5
   21f90:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   21f94:	mov	r1, #0
   21f98:	str	r1, [sp, #4]
   21f9c:	str	r1, [sp]
   21fa0:	str	r0, [fp, #-24]	; 0xffffffe8
   21fa4:	ldr	r0, [r4, #152]	; 0x98
   21fa8:	cmp	r0, #0
   21fac:	beq	21fcc <flatcc_builder_embed_buffer@@Base+0x98>
   21fb0:	mov	r0, #4
   21fb4:	str	r0, [sp, #12]
   21fb8:	sub	r1, fp, #24
   21fbc:	str	r1, [sp, #8]
   21fc0:	str	r0, [sp]
   21fc4:	mov	r0, #1
   21fc8:	str	r0, [sp, #4]
   21fcc:	cmp	r5, #0
   21fd0:	beq	21ff8 <flatcc_builder_embed_buffer@@Base+0xc4>
   21fd4:	ldm	sp, {r0, r1}
   21fd8:	add	r0, r0, r5
   21fdc:	str	r0, [sp]
   21fe0:	mov	r0, sp
   21fe4:	add	r0, r0, r1, lsl #3
   21fe8:	str	r6, [r0, #8]
   21fec:	str	r5, [r0, #12]
   21ff0:	add	r0, r1, #1
   21ff4:	str	r0, [sp, #4]
   21ff8:	cmp	r7, #0
   21ffc:	beq	2202c <flatcc_builder_embed_buffer@@Base+0xf8>
   22000:	ldm	sp, {r0, r1}
   22004:	add	r0, r0, r7
   22008:	str	r0, [sp]
   2200c:	mov	r0, sp
   22010:	add	r0, r0, r1, lsl #3
   22014:	movw	r2, #23344	; 0x5b30
   22018:	movt	r2, #3
   2201c:	str	r2, [r0, #8]
   22020:	str	r7, [r0, #12]
   22024:	add	r0, r1, #1
   22028:	str	r0, [sp, #4]
   2202c:	mov	r1, sp
   22030:	mov	r0, r4
   22034:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   22038:	sub	sp, fp, #16
   2203c:	pop	{r4, r5, r6, r7, fp, pc}
   22040:	push	{r4, r5, r6, r7, fp, lr}
   22044:	add	fp, sp, #16
   22048:	sub	sp, sp, #72	; 0x48
   2204c:	mov	r6, r3
   22050:	mov	r5, r2
   22054:	mov	r7, r1
   22058:	mov	r4, r0
   2205c:	cmp	r2, #0
   22060:	bne	22070 <flatcc_builder_embed_buffer@@Base+0x13c>
   22064:	ldrh	r5, [r4, #132]	; 0x84
   22068:	cmp	r5, #0
   2206c:	movweq	r5, #1
   22070:	mov	r0, r7
   22074:	mov	r1, #4
   22078:	bl	22ee8 <flatcc_builder_start_vector@@Base+0x80>
   2207c:	mov	r0, r7
   22080:	mov	r1, r5
   22084:	bl	22ee8 <flatcc_builder_start_vector@@Base+0x80>
   22088:	cmp	r6, #0
   2208c:	bne	220d4 <flatcc_builder_embed_buffer@@Base+0x1a0>
   22090:	mov	r0, r4
   22094:	mov	r1, r5
   22098:	bl	24bc8 <flatcc_builder_get_emit_context@@Base+0x8>
   2209c:	cmp	r0, #0
   220a0:	beq	220d4 <flatcc_builder_embed_buffer@@Base+0x1a0>
   220a4:	str	r0, [sp, #12]
   220a8:	movw	r1, #23344	; 0x5b30
   220ac:	movt	r1, #3
   220b0:	str	r1, [sp, #8]
   220b4:	str	r0, [sp]
   220b8:	mov	r0, #1
   220bc:	str	r0, [sp, #4]
   220c0:	mov	r1, sp
   220c4:	mov	r0, r4
   220c8:	bl	23274 <flatcc_builder_create_vtable@@Base+0x80>
   220cc:	cmp	r0, #0
   220d0:	beq	220dc <flatcc_builder_embed_buffer@@Base+0x1a8>
   220d4:	sub	sp, fp, #16
   220d8:	pop	{r4, r5, r6, r7, fp, pc}
   220dc:	movw	r0, #28392	; 0x6ee8
   220e0:	movt	r0, #3
   220e4:	movw	r1, #23874	; 0x5d42
   220e8:	movt	r1, #3
   220ec:	movw	r3, #28005	; 0x6d65
   220f0:	movt	r3, #3
   220f4:	movw	r2, #702	; 0x2be
   220f8:	bl	14f40 <__assert_fail@plt>
   220fc:	ldr	r0, [r0, #136]	; 0x88
   22100:	sub	r0, r0, r1
   22104:	sub	r1, r2, #1
   22108:	and	r0, r0, r1
   2210c:	bx	lr
   22110:	bx	lr
   22114:	push	{r4, r5, fp, lr}
   22118:	add	fp, sp, #8
   2211c:	sub	sp, sp, #8
   22120:	ldr	r3, [r1]
   22124:	cmp	r3, #0
   22128:	ble	22188 <flatcc_builder_embed_buffer@@Base+0x254>
   2212c:	mov	r4, r0
   22130:	ldr	r0, [r0, #136]	; 0x88
   22134:	sub	r5, r0, r3
   22138:	ldr	r2, [r1, #4]
   2213c:	ldr	r0, [r4, #36]	; 0x24
   22140:	ldr	ip, [r4, #44]	; 0x2c
   22144:	str	r3, [sp]
   22148:	add	r1, r1, #8
   2214c:	mov	r3, r5
   22150:	blx	ip
   22154:	cmp	r0, #0
   22158:	streq	r5, [r4, #136]	; 0x88
   2215c:	moveq	r0, r5
   22160:	subeq	sp, fp, #8
   22164:	popeq	{r4, r5, fp, pc}
   22168:	movw	r0, #28392	; 0x6ee8
   2216c:	movt	r0, #3
   22170:	movw	r1, #23874	; 0x5d42
   22174:	movt	r1, #3
   22178:	movw	r3, #28071	; 0x6da7
   2217c:	movt	r3, #3
   22180:	movw	r2, #651	; 0x28b
   22184:	bl	14f40 <__assert_fail@plt>
   22188:	movw	r0, #28392	; 0x6ee8
   2218c:	movt	r0, #3
   22190:	movw	r1, #23874	; 0x5d42
   22194:	movt	r1, #3
   22198:	movw	r3, #28071	; 0x6da7
   2219c:	movt	r3, #3
   221a0:	movw	r2, #647	; 0x287
   221a4:	bl	14f40 <__assert_fail@plt>

000221a8 <flatcc_builder_create_buffer@@Base>:
   221a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221ac:	add	fp, sp, #28
   221b0:	sub	sp, sp, #92	; 0x5c
   221b4:	mov	r6, r3
   221b8:	mov	r7, r1
   221bc:	mov	r4, r0
   221c0:	ldr	r0, [fp, #8]
   221c4:	strh	r0, [fp, #-30]	; 0xffffffe2
   221c8:	mov	r0, #0
   221cc:	str	r0, [sp, #4]
   221d0:	ldr	sl, [fp, #12]
   221d4:	and	r9, sl, #1
   221d8:	sub	r1, fp, #30
   221dc:	mov	r0, r4
   221e0:	mov	r3, r9
   221e4:	bl	22040 <flatcc_builder_embed_buffer@@Base+0x10c>
   221e8:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   221ec:	mov	r0, r4
   221f0:	mov	r1, r5
   221f4:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   221f8:	cmp	r7, #0
   221fc:	str	r6, [sp]
   22200:	beq	2221c <flatcc_builder_create_buffer@@Base+0x74>
   22204:	ldr	r7, [r7]
   22208:	mov	r0, r7
   2220c:	bl	22384 <flatcc_builder_create_buffer@@Base+0x1dc>
   22210:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   22214:	str	r7, [sp, #4]
   22218:	b	22220 <flatcc_builder_create_buffer@@Base+0x78>
   2221c:	ldr	r7, [sp, #4]
   22220:	mov	r8, #4
   22224:	and	r0, r8, sl, lsl #1
   22228:	cmp	r7, #0
   2222c:	mov	r6, r7
   22230:	movwne	r6, #1
   22234:	add	r0, r0, r6, lsl #2
   22238:	add	r1, r0, #4
   2223c:	mov	r0, r4
   22240:	mov	r2, r5
   22244:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   22248:	mov	r1, #0
   2224c:	str	r1, [sp, #12]
   22250:	str	r1, [sp, #8]
   22254:	ands	ip, sl, #3
   22258:	strne	r8, [sp, #20]
   2225c:	subne	r1, fp, #40	; 0x28
   22260:	strne	r1, [sp, #16]
   22264:	strne	r8, [sp, #8]
   22268:	movne	r1, #1
   2226c:	strne	r1, [sp, #12]
   22270:	ldr	r1, [sp, #8]
   22274:	ldr	r3, [sp, #12]
   22278:	add	r5, r1, #4
   2227c:	str	r5, [sp, #8]
   22280:	add	lr, sp, #8
   22284:	add	r1, lr, r3, lsl #3
   22288:	sub	r2, fp, #36	; 0x24
   2228c:	str	r2, [r1, #8]
   22290:	str	r8, [r1, #12]
   22294:	add	r1, r3, #1
   22298:	str	r1, [sp, #12]
   2229c:	cmp	r7, #0
   222a0:	beq	222c8 <flatcc_builder_create_buffer@@Base+0x120>
   222a4:	lsl	r2, r6, #2
   222a8:	add	r5, r5, r2
   222ac:	str	r5, [sp, #8]
   222b0:	add	r1, lr, r1, lsl #3
   222b4:	add	r5, sp, #4
   222b8:	str	r5, [r1, #8]
   222bc:	str	r2, [r1, #12]
   222c0:	add	r1, r3, #2
   222c4:	str	r1, [sp, #12]
   222c8:	cmp	r0, #0
   222cc:	beq	222fc <flatcc_builder_create_buffer@@Base+0x154>
   222d0:	ldr	r1, [sp, #8]
   222d4:	ldr	r2, [sp, #12]
   222d8:	add	r1, r1, r0
   222dc:	str	r1, [sp, #8]
   222e0:	add	r1, lr, r2, lsl #3
   222e4:	movw	r3, #23344	; 0x5b30
   222e8:	movt	r3, #3
   222ec:	str	r3, [r1, #8]
   222f0:	str	r0, [r1, #12]
   222f4:	add	r0, r2, #1
   222f8:	str	r0, [sp, #12]
   222fc:	ldr	r0, [r4, #136]	; 0x88
   22300:	ldr	r1, [sp, #8]
   22304:	sub	r5, r0, r1
   22308:	cmp	ip, #0
   2230c:	addne	r5, r5, #4
   22310:	mov	r0, #144	; 0x90
   22314:	cmp	r9, #0
   22318:	movweq	r0, #140	; 0x8c
   2231c:	ldr	r0, [r4, r0]
   22320:	sub	r0, r0, r5
   22324:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   22328:	str	r0, [fp, #-40]	; 0xffffffd8
   2232c:	ldr	r0, [sp]
   22330:	sub	r0, r0, r5
   22334:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   22338:	str	r0, [fp, #-36]	; 0xffffffdc
   2233c:	add	r1, sp, #8
   22340:	mov	r0, r4
   22344:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   22348:	cmp	r0, #0
   2234c:	subne	sp, fp, #28
   22350:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22354:	movw	r0, #28392	; 0x6ee8
   22358:	movt	r0, #3
   2235c:	movw	r1, #23874	; 0x5d42
   22360:	movt	r1, #3
   22364:	movw	r3, #24189	; 0x5e7d
   22368:	movt	r3, #3
   2236c:	mov	r2, #772	; 0x304
   22370:	bl	14f40 <__assert_fail@plt>
   22374:	ldrh	r2, [r0, #128]	; 0x80
   22378:	cmp	r2, r1
   2237c:	strhcc	r1, [r0, #128]	; 0x80
   22380:	bx	lr
   22384:	bx	lr

00022388 <flatcc_builder_create_struct@@Base>:
   22388:	push	{r4, r5, r6, r7, fp, lr}
   2238c:	add	fp, sp, #16
   22390:	sub	sp, sp, #72	; 0x48
   22394:	cmp	r3, #0
   22398:	beq	22430 <flatcc_builder_create_struct@@Base+0xa8>
   2239c:	mov	r7, r3
   223a0:	mov	r5, r2
   223a4:	mov	r6, r1
   223a8:	mov	r4, r0
   223ac:	mov	r1, r3
   223b0:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   223b4:	mov	r0, r4
   223b8:	mov	r1, r5
   223bc:	mov	r2, r7
   223c0:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   223c4:	mov	r1, #0
   223c8:	str	r1, [sp, #4]
   223cc:	str	r1, [sp]
   223d0:	cmp	r5, #0
   223d4:	strne	r5, [sp, #12]
   223d8:	strne	r6, [sp, #8]
   223dc:	strne	r5, [sp]
   223e0:	movne	r1, #1
   223e4:	strne	r1, [sp, #4]
   223e8:	cmp	r0, #0
   223ec:	beq	2241c <flatcc_builder_create_struct@@Base+0x94>
   223f0:	ldm	sp, {r1, r2}
   223f4:	add	r1, r1, r0
   223f8:	str	r1, [sp]
   223fc:	mov	r1, sp
   22400:	add	r1, r1, r2, lsl #3
   22404:	movw	r3, #23344	; 0x5b30
   22408:	movt	r3, #3
   2240c:	str	r3, [r1, #8]
   22410:	str	r0, [r1, #12]
   22414:	add	r0, r2, #1
   22418:	str	r0, [sp, #4]
   2241c:	mov	r1, sp
   22420:	mov	r0, r4
   22424:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   22428:	sub	sp, fp, #16
   2242c:	pop	{r4, r5, r6, r7, fp, pc}
   22430:	movw	r0, #24320	; 0x5f00
   22434:	movt	r0, #3
   22438:	movw	r1, #23874	; 0x5d42
   2243c:	movt	r1, #3
   22440:	movw	r3, #24331	; 0x5f0b
   22444:	movt	r3, #3
   22448:	movw	r2, #783	; 0x30f
   2244c:	bl	14f40 <__assert_fail@plt>

00022450 <flatcc_builder_start_buffer@@Base>:
   22450:	push	{r4, r5, r6, r7, fp, lr}
   22454:	add	fp, sp, #16
   22458:	mov	r6, r3
   2245c:	mov	r7, r2
   22460:	mov	r5, r1
   22464:	mov	r4, r0
   22468:	ldrh	r1, [r0, #128]	; 0x80
   2246c:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   22470:	mov	r1, r0
   22474:	mvn	r0, #0
   22478:	cmp	r1, #0
   2247c:	popne	{r4, r5, r6, r7, fp, pc}
   22480:	mov	r0, #1
   22484:	strh	r0, [r4, #128]	; 0x80
   22488:	ldrh	r1, [r4, #132]	; 0x84
   2248c:	ldr	r2, [r4, #32]
   22490:	strh	r1, [r2, #34]	; 0x22
   22494:	strh	r7, [r4, #132]	; 0x84
   22498:	ldrh	r1, [r4, #164]	; 0xa4
   2249c:	ldr	r2, [r4, #32]
   224a0:	strh	r1, [r2, #32]
   224a4:	strh	r6, [r4, #164]	; 0xa4
   224a8:	ldr	r1, [r4, #32]
   224ac:	ldr	r2, [r4, #144]	; 0x90
   224b0:	str	r2, [r1, #20]
   224b4:	ldr	r1, [r4, #32]
   224b8:	ldr	r2, [r4, #152]	; 0x98
   224bc:	str	r2, [r1, #28]
   224c0:	ldr	r1, [r4, #32]
   224c4:	ldr	r2, [r4, #136]	; 0x88
   224c8:	ldr	r3, [r4, #148]	; 0x94
   224cc:	ldr	r7, [r4, #168]	; 0xa8
   224d0:	add	r6, r3, #1
   224d4:	str	r2, [r4, #144]	; 0x90
   224d8:	str	r6, [r4, #148]	; 0x94
   224dc:	str	r3, [r4, #152]	; 0x98
   224e0:	str	r7, [r1, #16]
   224e4:	movw	r1, #23344	; 0x5b30
   224e8:	movt	r1, #3
   224ec:	cmp	r5, #0
   224f0:	movne	r1, r5
   224f4:	ldr	r1, [r1]
   224f8:	str	r1, [r4, #168]	; 0xa8
   224fc:	ldr	r1, [r4, #32]
   22500:	strh	r0, [r1, #14]
   22504:	mov	r0, #0
   22508:	pop	{r4, r5, r6, r7, fp, pc}
   2250c:	push	{r4, r5, r6, sl, fp, lr}
   22510:	add	fp, sp, #16
   22514:	sub	sp, sp, #8
   22518:	mov	r5, r1
   2251c:	mov	r4, r0
   22520:	ldr	r1, [r0, #156]	; 0x9c
   22524:	ldr	r2, [r0, #160]	; 0xa0
   22528:	add	r0, r1, #1
   2252c:	str	r0, [r4, #156]	; 0x9c
   22530:	cmp	r1, r2
   22534:	bge	22548 <flatcc_builder_start_buffer@@Base+0xf8>
   22538:	ldr	r0, [r4, #32]
   2253c:	add	r0, r0, #36	; 0x24
   22540:	str	r0, [r4, #32]
   22544:	b	225bc <flatcc_builder_start_buffer@@Base+0x16c>
   22548:	ldr	r2, [r4, #176]	; 0xb0
   2254c:	mvn	r6, #0
   22550:	cmp	r2, #1
   22554:	cmpge	r1, r2
   22558:	bge	225f8 <flatcc_builder_start_buffer@@Base+0x1a8>
   2255c:	mov	r1, #0
   22560:	str	r1, [sp]
   22564:	add	r0, r0, r0, lsl #3
   22568:	mvn	r1, #35	; 0x23
   2256c:	add	r2, r1, r0, lsl #2
   22570:	mov	r0, r4
   22574:	mov	r1, #4
   22578:	mov	r3, #36	; 0x24
   2257c:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   22580:	str	r0, [r4, #32]
   22584:	cmp	r0, #0
   22588:	beq	225f8 <flatcc_builder_start_buffer@@Base+0x1a8>
   2258c:	ldr	r0, [r4, #88]	; 0x58
   22590:	ldr	r1, [r4, #176]	; 0xb0
   22594:	movw	r2, #36409	; 0x8e39
   22598:	movt	r2, #14563	; 0x38e3
   2259c:	umull	r0, r2, r0, r2
   225a0:	lsr	r0, r2, #3
   225a4:	cmp	r1, r2, lsr #3
   225a8:	mov	r2, r0
   225ac:	movlt	r2, r1
   225b0:	cmp	r1, #0
   225b4:	movle	r2, r0
   225b8:	str	r2, [r4, #160]	; 0xa0
   225bc:	ldr	r0, [r4, #20]
   225c0:	ldr	r1, [r4, #32]
   225c4:	str	r0, [r1, #8]
   225c8:	ldrh	r2, [r4, #130]	; 0x82
   225cc:	strh	r2, [r1, #12]
   225d0:	strh	r5, [r4, #130]	; 0x82
   225d4:	ldr	r2, [r4, #28]
   225d8:	mvn	r3, #3
   225dc:	stm	r1, {r2, r3}
   225e0:	mov	r6, #0
   225e4:	str	r6, [r4, #20]
   225e8:	add	r0, r0, r2
   225ec:	add	r0, r0, #7
   225f0:	bic	r0, r0, #7
   225f4:	str	r0, [r4, #28]
   225f8:	mov	r0, r6
   225fc:	sub	sp, fp, #16
   22600:	pop	{r4, r5, r6, sl, fp, pc}

00022604 <flatcc_builder_end_buffer@@Base>:
   22604:	push	{r4, r5, r6, r7, fp, lr}
   22608:	add	fp, sp, #16
   2260c:	sub	sp, sp, #8
   22610:	mov	r4, r0
   22614:	ldr	r0, [r0, #32]
   22618:	ldrh	r0, [r0, #14]
   2261c:	cmp	r0, #1
   22620:	bne	226ac <flatcc_builder_end_buffer@@Base+0xa8>
   22624:	mov	r5, r1
   22628:	ldr	r6, [r4, #152]	; 0x98
   2262c:	ldrh	r7, [r4, #164]	; 0xa4
   22630:	ldrh	r1, [r4, #132]	; 0x84
   22634:	mov	r0, r4
   22638:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   2263c:	and	r0, r7, #2
   22640:	cmp	r6, #0
   22644:	orrne	r0, r0, #1
   22648:	ldrh	r2, [r4, #132]	; 0x84
   2264c:	ldrh	r1, [r4, #128]	; 0x80
   22650:	str	r1, [sp]
   22654:	str	r0, [sp, #4]
   22658:	add	r1, r4, #168	; 0xa8
   2265c:	mov	r0, r4
   22660:	mov	r3, r5
   22664:	bl	221a8 <flatcc_builder_create_buffer@@Base>
   22668:	mov	r5, r0
   2266c:	cmp	r0, #0
   22670:	beq	226a0 <flatcc_builder_end_buffer@@Base+0x9c>
   22674:	ldr	r0, [r4, #32]
   22678:	ldr	r1, [r0, #20]
   2267c:	str	r1, [r4, #144]	; 0x90
   22680:	ldr	r1, [r0, #28]
   22684:	str	r1, [r4, #152]	; 0x98
   22688:	ldr	r1, [r0, #16]
   2268c:	str	r1, [r4, #168]	; 0xa8
   22690:	ldrh	r0, [r0, #32]
   22694:	strh	r0, [r4, #164]	; 0xa4
   22698:	mov	r0, r4
   2269c:	bl	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   226a0:	mov	r0, r5
   226a4:	sub	sp, fp, #16
   226a8:	pop	{r4, r5, r6, r7, fp, pc}
   226ac:	movw	r0, #24433	; 0x5f71
   226b0:	movt	r0, #3
   226b4:	movw	r1, #23874	; 0x5d42
   226b8:	movt	r1, #3
   226bc:	movw	r3, #24477	; 0x5f9d
   226c0:	movt	r3, #3
   226c4:	movw	r2, #838	; 0x346
   226c8:	bl	14f40 <__assert_fail@plt>
   226cc:	push	{r4, sl, fp, lr}
   226d0:	add	fp, sp, #8
   226d4:	mov	r4, r0
   226d8:	ldr	r0, [r0, #16]
   226dc:	ldr	r2, [r4, #20]
   226e0:	mov	r1, #0
   226e4:	bl	14eec <memset@plt>
   226e8:	ldr	r0, [r4, #32]
   226ec:	ldr	r1, [r0, #8]
   226f0:	str	r1, [r4, #20]
   226f4:	ldr	r1, [r0]
   226f8:	str	r1, [r4, #28]
   226fc:	ldr	r1, [r0, #4]
   22700:	mov	r0, r4
   22704:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   22708:	ldrh	r1, [r4, #130]	; 0x82
   2270c:	mov	r0, r4
   22710:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   22714:	ldr	r0, [r4, #32]
   22718:	ldr	r1, [r4, #156]	; 0x9c
   2271c:	ldrh	r2, [r0, #12]
   22720:	sub	r0, r0, #36	; 0x24
   22724:	str	r0, [r4, #32]
   22728:	sub	r0, r1, #1
   2272c:	str	r0, [r4, #156]	; 0x9c
   22730:	strh	r2, [r4, #130]	; 0x82
   22734:	pop	{r4, sl, fp, pc}

00022738 <flatcc_builder_start_struct@@Base>:
   22738:	push	{r4, r5, fp, lr}
   2273c:	add	fp, sp, #8
   22740:	mov	r4, r1
   22744:	mov	r5, r0
   22748:	mov	r1, r2
   2274c:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   22750:	cmp	r0, #0
   22754:	movne	r0, #0
   22758:	popne	{r4, r5, fp, pc}
   2275c:	ldr	r0, [r5, #32]
   22760:	mov	r1, #2
   22764:	strh	r1, [r0, #14]
   22768:	mov	r0, r5
   2276c:	mvn	r1, #3
   22770:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   22774:	mov	r0, r5
   22778:	mov	r1, r4
   2277c:	pop	{r4, r5, fp, lr}
   22780:	b	227bc <flatcc_builder_start_struct@@Base+0x84>
   22784:	push	{fp, lr}
   22788:	mov	fp, sp
   2278c:	ldr	r2, [r0, #28]
   22790:	ldr	ip, [r0, #32]
   22794:	ldr	r3, [r0, #60]	; 0x3c
   22798:	ldr	lr, [r0, #64]	; 0x40
   2279c:	add	r3, r3, r2
   227a0:	str	r3, [r0, #16]
   227a4:	sub	r2, lr, r2
   227a8:	cmp	r2, r1
   227ac:	movhi	r2, r1
   227b0:	str	r2, [r0, #24]
   227b4:	str	r1, [ip, #4]
   227b8:	pop	{fp, pc}
   227bc:	push	{r4, r5, fp, lr}
   227c0:	add	fp, sp, #8
   227c4:	mov	r4, r0
   227c8:	ldr	r5, [r0, #20]
   227cc:	ldr	r2, [r0, #24]
   227d0:	add	r0, r5, r1
   227d4:	str	r0, [r4, #20]
   227d8:	cmp	r0, r2
   227dc:	bcc	22800 <flatcc_builder_start_struct@@Base+0xc8>
   227e0:	add	r1, r0, #1
   227e4:	mov	r0, r4
   227e8:	mvn	r2, #3
   227ec:	bl	24bd8 <flatcc_builder_get_emit_context@@Base+0x18>
   227f0:	mov	r1, r0
   227f4:	mov	r0, #0
   227f8:	cmp	r1, #0
   227fc:	popne	{r4, r5, fp, pc}
   22800:	ldr	r0, [r4, #16]
   22804:	add	r0, r0, r5
   22808:	pop	{r4, r5, fp, pc}

0002280c <flatcc_builder_struct_edit@@Base>:
   2280c:	ldr	r0, [r0, #16]
   22810:	bx	lr

00022814 <flatcc_builder_end_struct@@Base>:
   22814:	push	{r4, r5, fp, lr}
   22818:	add	fp, sp, #8
   2281c:	mov	r4, r0
   22820:	ldr	r0, [r0, #32]
   22824:	ldrh	r0, [r0, #14]
   22828:	cmp	r0, #2
   2282c:	bne	2285c <flatcc_builder_end_struct@@Base+0x48>
   22830:	ldrh	r3, [r4, #130]	; 0x82
   22834:	ldr	r1, [r4, #16]
   22838:	ldr	r2, [r4, #20]
   2283c:	mov	r0, r4
   22840:	bl	22388 <flatcc_builder_create_struct@@Base>
   22844:	mov	r5, r0
   22848:	cmp	r0, #0
   2284c:	movne	r0, r4
   22850:	blne	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   22854:	mov	r0, r5
   22858:	pop	{r4, r5, fp, pc}
   2285c:	movw	r0, #24566	; 0x5ff6
   22860:	movt	r0, #3
   22864:	movw	r1, #23874	; 0x5d42
   22868:	movt	r1, #3
   2286c:	movw	r3, #24610	; 0x6022
   22870:	movt	r3, #3
   22874:	mov	r2, #872	; 0x368
   22878:	bl	14f40 <__assert_fail@plt>

0002287c <flatcc_builder_extend_vector@@Base>:
   2287c:	push	{r4, r5, fp, lr}
   22880:	add	fp, sp, #8
   22884:	mov	r5, r1
   22888:	mov	r4, r0
   2288c:	ldr	r0, [r0, #32]
   22890:	ldr	r2, [r0, #24]
   22894:	mov	r0, r4
   22898:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   2289c:	cmp	r0, #0
   228a0:	movne	r0, #0
   228a4:	popne	{r4, r5, fp, pc}
   228a8:	ldr	r0, [r4, #32]
   228ac:	ldr	r0, [r0, #16]
   228b0:	mul	r1, r0, r5
   228b4:	mov	r0, r4
   228b8:	pop	{r4, r5, fp, lr}
   228bc:	b	227bc <flatcc_builder_start_struct@@Base+0x84>
   228c0:	push	{fp, lr}
   228c4:	mov	fp, sp
   228c8:	ldr	r0, [r0, #32]
   228cc:	ldr	r3, [r0, #20]
   228d0:	adds	r1, r3, r1
   228d4:	bcs	228e8 <flatcc_builder_extend_vector@@Base+0x6c>
   228d8:	cmp	r1, r2
   228dc:	strls	r1, [r0, #20]
   228e0:	movls	r0, #0
   228e4:	popls	{fp, pc}
   228e8:	movw	r0, #28145	; 0x6df1
   228ec:	movt	r0, #3
   228f0:	movw	r1, #23874	; 0x5d42
   228f4:	movt	r1, #3
   228f8:	movw	r3, #28172	; 0x6e0c
   228fc:	movt	r3, #3
   22900:	mov	r2, #892	; 0x37c
   22904:	bl	14f40 <__assert_fail@plt>

00022908 <flatcc_builder_vector_push@@Base>:
   22908:	push	{fp, lr}
   2290c:	mov	fp, sp
   22910:	ldr	r2, [r0, #32]
   22914:	ldrh	r3, [r2, #14]
   22918:	cmp	r3, #4
   2291c:	bne	22948 <flatcc_builder_vector_push@@Base+0x40>
   22920:	ldr	ip, [r2, #20]
   22924:	ldr	r3, [r2, #24]
   22928:	cmp	ip, r3
   2292c:	bhi	22968 <flatcc_builder_vector_push@@Base+0x60>
   22930:	add	r3, ip, #1
   22934:	str	r3, [r2, #20]
   22938:	ldr	r2, [r0, #32]
   2293c:	ldr	r2, [r2, #16]
   22940:	pop	{fp, lr}
   22944:	b	22988 <flatcc_builder_vector_push@@Base+0x80>
   22948:	movw	r0, #24677	; 0x6065
   2294c:	movt	r0, #3
   22950:	movw	r1, #23874	; 0x5d42
   22954:	movt	r1, #3
   22958:	movw	r3, #24721	; 0x6091
   2295c:	movt	r3, #3
   22960:	movw	r2, #907	; 0x38b
   22964:	bl	14f40 <__assert_fail@plt>
   22968:	movw	r0, #24788	; 0x60d4
   2296c:	movt	r0, #3
   22970:	movw	r1, #23874	; 0x5d42
   22974:	movt	r1, #3
   22978:	movw	r3, #24721	; 0x6091
   2297c:	movt	r3, #3
   22980:	mov	r2, #908	; 0x38c
   22984:	bl	14f40 <__assert_fail@plt>
   22988:	push	{r4, r5, r6, sl, fp, lr}
   2298c:	add	fp, sp, #16
   22990:	mov	r4, r2
   22994:	mov	r5, r1
   22998:	mov	r1, r2
   2299c:	bl	227bc <flatcc_builder_start_struct@@Base+0x84>
   229a0:	mov	r6, r0
   229a4:	cmp	r0, #0
   229a8:	beq	229bc <flatcc_builder_vector_push@@Base+0xb4>
   229ac:	mov	r0, r6
   229b0:	mov	r1, r5
   229b4:	mov	r2, r4
   229b8:	bl	14e5c <memcpy@plt>
   229bc:	mov	r0, r6
   229c0:	pop	{r4, r5, r6, sl, fp, pc}

000229c4 <flatcc_builder_append_vector@@Base>:
   229c4:	push	{r4, r5, r6, sl, fp, lr}
   229c8:	add	fp, sp, #16
   229cc:	mov	r4, r1
   229d0:	mov	r6, r0
   229d4:	ldr	r0, [r0, #32]
   229d8:	ldrh	r1, [r0, #14]
   229dc:	cmp	r1, #4
   229e0:	bne	22a24 <flatcc_builder_append_vector@@Base+0x60>
   229e4:	mov	r5, r2
   229e8:	ldr	r2, [r0, #24]
   229ec:	mov	r0, r6
   229f0:	mov	r1, r5
   229f4:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   229f8:	cmp	r0, #0
   229fc:	beq	22a08 <flatcc_builder_append_vector@@Base+0x44>
   22a00:	mov	r0, #0
   22a04:	pop	{r4, r5, r6, sl, fp, pc}
   22a08:	ldr	r0, [r6, #32]
   22a0c:	ldr	r0, [r0, #16]
   22a10:	mul	r2, r0, r5
   22a14:	mov	r0, r6
   22a18:	mov	r1, r4
   22a1c:	pop	{r4, r5, r6, sl, fp, lr}
   22a20:	b	22988 <flatcc_builder_vector_push@@Base+0x80>
   22a24:	movw	r0, #24677	; 0x6065
   22a28:	movt	r0, #3
   22a2c:	movw	r1, #23874	; 0x5d42
   22a30:	movt	r1, #3
   22a34:	movw	r3, #24849	; 0x6111
   22a38:	movt	r3, #3
   22a3c:	movw	r2, #915	; 0x393
   22a40:	bl	14f40 <__assert_fail@plt>

00022a44 <flatcc_builder_extend_offset_vector@@Base>:
   22a44:	push	{r4, r5, fp, lr}
   22a48:	add	fp, sp, #8
   22a4c:	mov	r5, r1
   22a50:	mov	r4, r0
   22a54:	mvn	r2, #-1073741824	; 0xc0000000
   22a58:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   22a5c:	cmp	r0, #0
   22a60:	movne	r0, #0
   22a64:	popne	{r4, r5, fp, pc}
   22a68:	lsl	r1, r5, #2
   22a6c:	mov	r0, r4
   22a70:	pop	{r4, r5, fp, lr}
   22a74:	b	227bc <flatcc_builder_start_struct@@Base+0x84>

00022a78 <flatcc_builder_offset_vector_push@@Base>:
   22a78:	push	{r4, r5, fp, lr}
   22a7c:	add	fp, sp, #8
   22a80:	mov	r4, r1
   22a84:	ldr	r1, [r0, #32]
   22a88:	ldrh	r2, [r1, #14]
   22a8c:	cmp	r2, #5
   22a90:	bne	22ac8 <flatcc_builder_offset_vector_push@@Base+0x50>
   22a94:	ldr	r2, [r1, #20]
   22a98:	mov	r5, #0
   22a9c:	cmn	r2, #-1073741823	; 0xc0000001
   22aa0:	beq	22ac0 <flatcc_builder_offset_vector_push@@Base+0x48>
   22aa4:	add	r2, r2, #1
   22aa8:	str	r2, [r1, #20]
   22aac:	mov	r1, #4
   22ab0:	bl	227bc <flatcc_builder_start_struct@@Base+0x84>
   22ab4:	cmp	r0, #0
   22ab8:	strne	r4, [r0]
   22abc:	movne	r5, r0
   22ac0:	mov	r0, r5
   22ac4:	pop	{r4, r5, fp, pc}
   22ac8:	movw	r0, #24926	; 0x615e
   22acc:	movt	r0, #3
   22ad0:	movw	r1, #23874	; 0x5d42
   22ad4:	movt	r1, #3
   22ad8:	movw	r3, #24977	; 0x6191
   22adc:	movt	r3, #3
   22ae0:	movw	r2, #934	; 0x3a6
   22ae4:	bl	14f40 <__assert_fail@plt>

00022ae8 <flatcc_builder_append_offset_vector@@Base>:
   22ae8:	push	{r4, r5, r6, sl, fp, lr}
   22aec:	add	fp, sp, #16
   22af0:	mov	r6, r0
   22af4:	ldr	r0, [r0, #32]
   22af8:	ldrh	r0, [r0, #14]
   22afc:	cmp	r0, #5
   22b00:	bne	22b40 <flatcc_builder_append_offset_vector@@Base+0x58>
   22b04:	mov	r5, r2
   22b08:	mov	r4, r1
   22b0c:	mov	r0, r6
   22b10:	mov	r1, r2
   22b14:	mvn	r2, #-1073741824	; 0xc0000000
   22b18:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   22b1c:	cmp	r0, #0
   22b20:	beq	22b2c <flatcc_builder_append_offset_vector@@Base+0x44>
   22b24:	mov	r0, #0
   22b28:	pop	{r4, r5, r6, sl, fp, pc}
   22b2c:	lsl	r2, r5, #2
   22b30:	mov	r0, r6
   22b34:	mov	r1, r4
   22b38:	pop	{r4, r5, r6, sl, fp, lr}
   22b3c:	b	22988 <flatcc_builder_vector_push@@Base+0x80>
   22b40:	movw	r0, #24926	; 0x615e
   22b44:	movt	r0, #3
   22b48:	movw	r1, #23874	; 0x5d42
   22b4c:	movt	r1, #3
   22b50:	movw	r3, #25075	; 0x61f3
   22b54:	movt	r3, #3
   22b58:	mov	r2, #948	; 0x3b4
   22b5c:	bl	14f40 <__assert_fail@plt>

00022b60 <flatcc_builder_extend_string@@Base>:
   22b60:	push	{r4, r5, fp, lr}
   22b64:	add	fp, sp, #8
   22b68:	mov	r5, r0
   22b6c:	ldr	r0, [r0, #32]
   22b70:	ldrh	r0, [r0, #14]
   22b74:	cmp	r0, #6
   22b78:	bne	22ba8 <flatcc_builder_extend_string@@Base+0x48>
   22b7c:	mov	r4, r1
   22b80:	mov	r0, r5
   22b84:	mvn	r2, #0
   22b88:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   22b8c:	cmp	r0, #0
   22b90:	movne	r0, #0
   22b94:	popne	{r4, r5, fp, pc}
   22b98:	mov	r0, r5
   22b9c:	mov	r1, r4
   22ba0:	pop	{r4, r5, fp, lr}
   22ba4:	b	227bc <flatcc_builder_start_struct@@Base+0x84>
   22ba8:	movw	r0, #25191	; 0x6267
   22bac:	movt	r0, #3
   22bb0:	movw	r1, #23874	; 0x5d42
   22bb4:	movt	r1, #3
   22bb8:	movw	r3, #25235	; 0x6293
   22bbc:	movt	r3, #3
   22bc0:	movw	r2, #957	; 0x3bd
   22bc4:	bl	14f40 <__assert_fail@plt>

00022bc8 <flatcc_builder_append_string@@Base>:
   22bc8:	push	{r4, r5, r6, sl, fp, lr}
   22bcc:	add	fp, sp, #16
   22bd0:	mov	r6, r0
   22bd4:	ldr	r0, [r0, #32]
   22bd8:	ldrh	r0, [r0, #14]
   22bdc:	cmp	r0, #6
   22be0:	bne	22c20 <flatcc_builder_append_string@@Base+0x58>
   22be4:	mov	r4, r2
   22be8:	mov	r5, r1
   22bec:	mov	r0, r6
   22bf0:	mov	r1, r2
   22bf4:	mvn	r2, #0
   22bf8:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   22bfc:	cmp	r0, #0
   22c00:	beq	22c0c <flatcc_builder_append_string@@Base+0x44>
   22c04:	mov	r0, #0
   22c08:	pop	{r4, r5, r6, sl, fp, pc}
   22c0c:	mov	r0, r6
   22c10:	mov	r1, r5
   22c14:	mov	r2, r4
   22c18:	pop	{r4, r5, r6, sl, fp, lr}
   22c1c:	b	22988 <flatcc_builder_vector_push@@Base+0x80>
   22c20:	movw	r0, #25191	; 0x6267
   22c24:	movt	r0, #3
   22c28:	movw	r1, #23874	; 0x5d42
   22c2c:	movt	r1, #3
   22c30:	movw	r3, #25298	; 0x62d2
   22c34:	movt	r3, #3
   22c38:	movw	r2, #966	; 0x3c6
   22c3c:	bl	14f40 <__assert_fail@plt>

00022c40 <flatcc_builder_append_string_str@@Base>:
   22c40:	push	{r4, r5, fp, lr}
   22c44:	add	fp, sp, #8
   22c48:	mov	r4, r1
   22c4c:	mov	r5, r0
   22c50:	mov	r0, r1
   22c54:	bl	14ec8 <strlen@plt>
   22c58:	mov	r2, r0
   22c5c:	mov	r0, r5
   22c60:	mov	r1, r4
   22c64:	pop	{r4, r5, fp, lr}
   22c68:	b	22bc8 <flatcc_builder_append_string@@Base>

00022c6c <flatcc_builder_append_string_strn@@Base>:
   22c6c:	push	{r4, r5, fp, lr}
   22c70:	add	fp, sp, #8
   22c74:	mov	r4, r1
   22c78:	mov	r5, r0
   22c7c:	mov	r0, r1
   22c80:	mov	r1, r2
   22c84:	bl	22c9c <flatcc_builder_append_string_strn@@Base+0x30>
   22c88:	mov	r2, r0
   22c8c:	mov	r0, r5
   22c90:	mov	r1, r4
   22c94:	pop	{r4, r5, fp, lr}
   22c98:	b	22bc8 <flatcc_builder_append_string@@Base>
   22c9c:	push	{r4, r5, fp, lr}
   22ca0:	add	fp, sp, #8
   22ca4:	mov	r4, r1
   22ca8:	mov	r5, r0
   22cac:	mov	r1, #0
   22cb0:	mov	r2, r4
   22cb4:	bl	14f10 <memchr@plt>
   22cb8:	cmp	r0, #0
   22cbc:	subne	r4, r0, r5
   22cc0:	mov	r0, r4
   22cc4:	pop	{r4, r5, fp, pc}

00022cc8 <flatcc_builder_truncate_vector@@Base>:
   22cc8:	push	{fp, lr}
   22ccc:	mov	fp, sp
   22cd0:	ldr	r2, [r0, #32]
   22cd4:	ldrh	r3, [r2, #14]
   22cd8:	cmp	r3, #4
   22cdc:	bne	22d0c <flatcc_builder_truncate_vector@@Base+0x44>
   22ce0:	ldr	r3, [r2, #20]
   22ce4:	cmp	r3, r1
   22ce8:	bcc	22d2c <flatcc_builder_truncate_vector@@Base+0x64>
   22cec:	sub	r3, r3, r1
   22cf0:	str	r3, [r2, #20]
   22cf4:	ldr	r2, [r0, #32]
   22cf8:	ldr	r2, [r2, #16]
   22cfc:	mul	r1, r2, r1
   22d00:	bl	22d4c <flatcc_builder_truncate_vector@@Base+0x84>
   22d04:	mov	r0, #0
   22d08:	pop	{fp, pc}
   22d0c:	movw	r0, #24677	; 0x6065
   22d10:	movt	r0, #3
   22d14:	movw	r1, #23874	; 0x5d42
   22d18:	movt	r1, #3
   22d1c:	movw	r3, #25375	; 0x631f
   22d20:	movt	r3, #3
   22d24:	movw	r2, #985	; 0x3d9
   22d28:	bl	14f40 <__assert_fail@plt>
   22d2c:	movw	r0, #25438	; 0x635e
   22d30:	movt	r0, #3
   22d34:	movw	r1, #23874	; 0x5d42
   22d38:	movt	r1, #3
   22d3c:	movw	r3, #25375	; 0x631f
   22d40:	movt	r3, #3
   22d44:	movw	r2, #986	; 0x3da
   22d48:	bl	14f40 <__assert_fail@plt>
   22d4c:	mov	r2, r1
   22d50:	ldr	r1, [r0, #16]
   22d54:	ldr	r3, [r0, #20]
   22d58:	sub	r3, r3, r2
   22d5c:	str	r3, [r0, #20]
   22d60:	add	r0, r1, r3
   22d64:	mov	r1, #0
   22d68:	b	14eec <memset@plt>

00022d6c <flatcc_builder_truncate_offset_vector@@Base>:
   22d6c:	push	{fp, lr}
   22d70:	mov	fp, sp
   22d74:	ldr	r2, [r0, #32]
   22d78:	ldrh	r3, [r2, #14]
   22d7c:	cmp	r3, #5
   22d80:	bne	22db0 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   22d84:	ldr	r3, [r2, #20]
   22d88:	cmp	r3, r1
   22d8c:	bcc	22dd0 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   22d90:	sub	r3, r3, r1
   22d94:	str	r3, [r2, #20]
   22d98:	ldr	r2, [r0, #32]
   22d9c:	ldr	r2, [r2, #16]
   22da0:	mul	r1, r2, r1
   22da4:	bl	22d4c <flatcc_builder_truncate_vector@@Base+0x84>
   22da8:	mov	r0, #0
   22dac:	pop	{fp, pc}
   22db0:	movw	r0, #24926	; 0x615e
   22db4:	movt	r0, #3
   22db8:	movw	r1, #23874	; 0x5d42
   22dbc:	movt	r1, #3
   22dc0:	movw	r3, #25474	; 0x6382
   22dc4:	movt	r3, #3
   22dc8:	movw	r2, #994	; 0x3e2
   22dcc:	bl	14f40 <__assert_fail@plt>
   22dd0:	movw	r0, #25544	; 0x63c8
   22dd4:	movt	r0, #3
   22dd8:	movw	r1, #23874	; 0x5d42
   22ddc:	movt	r1, #3
   22de0:	movw	r3, #25474	; 0x6382
   22de4:	movt	r3, #3
   22de8:	movw	r2, #995	; 0x3e3
   22dec:	bl	14f40 <__assert_fail@plt>

00022df0 <flatcc_builder_truncate_string@@Base>:
   22df0:	push	{fp, lr}
   22df4:	mov	fp, sp
   22df8:	ldr	r2, [r0, #32]
   22dfc:	ldrh	r3, [r2, #14]
   22e00:	cmp	r3, #6
   22e04:	bne	22e28 <flatcc_builder_truncate_string@@Base+0x38>
   22e08:	ldr	r3, [r2, #20]
   22e0c:	cmp	r3, r1
   22e10:	bcc	22e48 <flatcc_builder_truncate_string@@Base+0x58>
   22e14:	sub	r3, r3, r1
   22e18:	str	r3, [r2, #20]
   22e1c:	bl	22d4c <flatcc_builder_truncate_vector@@Base+0x84>
   22e20:	mov	r0, #0
   22e24:	pop	{fp, pc}
   22e28:	movw	r0, #25191	; 0x6267
   22e2c:	movt	r0, #3
   22e30:	movw	r1, #23874	; 0x5d42
   22e34:	movt	r1, #3
   22e38:	movw	r3, #25603	; 0x6403
   22e3c:	movt	r3, #3
   22e40:	movw	r2, #1003	; 0x3eb
   22e44:	bl	14f40 <__assert_fail@plt>
   22e48:	movw	r0, #25666	; 0x6442
   22e4c:	movt	r0, #3
   22e50:	movw	r1, #23874	; 0x5d42
   22e54:	movt	r1, #3
   22e58:	movw	r3, #25603	; 0x6403
   22e5c:	movt	r3, #3
   22e60:	mov	r2, #1004	; 0x3ec
   22e64:	bl	14f40 <__assert_fail@plt>

00022e68 <flatcc_builder_start_vector@@Base>:
   22e68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22e6c:	add	fp, sp, #24
   22e70:	sub	sp, sp, #8
   22e74:	mov	r5, r3
   22e78:	mov	r6, r1
   22e7c:	mov	r4, r0
   22e80:	strh	r2, [sp, #6]
   22e84:	add	r0, sp, #6
   22e88:	mov	r8, #4
   22e8c:	mov	r1, #4
   22e90:	bl	22ee8 <flatcc_builder_start_vector@@Base+0x80>
   22e94:	ldrh	r1, [sp, #6]
   22e98:	mov	r0, r4
   22e9c:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   22ea0:	mvn	r7, #0
   22ea4:	cmp	r0, #0
   22ea8:	bne	22edc <flatcc_builder_start_vector@@Base+0x74>
   22eac:	ldr	r0, [r4, #32]
   22eb0:	str	r6, [r0, #16]
   22eb4:	ldr	r0, [r4, #32]
   22eb8:	mov	r7, #0
   22ebc:	str	r7, [r0, #20]
   22ec0:	ldr	r0, [r4, #32]
   22ec4:	str	r5, [r0, #24]
   22ec8:	ldr	r0, [r4, #32]
   22ecc:	strh	r8, [r0, #14]
   22ed0:	mov	r0, r4
   22ed4:	mvn	r1, #3
   22ed8:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   22edc:	mov	r0, r7
   22ee0:	sub	sp, fp, #24
   22ee4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22ee8:	ldrh	r2, [r0]
   22eec:	cmp	r2, r1
   22ef0:	strhcc	r1, [r0]
   22ef4:	bx	lr

00022ef8 <flatcc_builder_start_offset_vector@@Base>:
   22ef8:	push	{r4, r5, r6, sl, fp, lr}
   22efc:	add	fp, sp, #16
   22f00:	mov	r4, r0
   22f04:	mov	r6, #4
   22f08:	mov	r1, #4
   22f0c:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   22f10:	mvn	r5, #0
   22f14:	cmp	r0, #0
   22f18:	beq	22f24 <flatcc_builder_start_offset_vector@@Base+0x2c>
   22f1c:	mov	r0, r5
   22f20:	pop	{r4, r5, r6, sl, fp, pc}
   22f24:	ldr	r0, [r4, #32]
   22f28:	str	r6, [r0, #16]
   22f2c:	ldr	r0, [r4, #32]
   22f30:	mov	r5, #0
   22f34:	str	r5, [r0, #20]
   22f38:	ldr	r0, [r4, #32]
   22f3c:	mov	r1, #5
   22f40:	strh	r1, [r0, #14]
   22f44:	mov	r0, r4
   22f48:	mvn	r1, #3
   22f4c:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   22f50:	mov	r0, r5
   22f54:	pop	{r4, r5, r6, sl, fp, pc}

00022f58 <flatcc_builder_create_offset_vector@@Base>:
   22f58:	push	{r4, r5, r6, sl, fp, lr}
   22f5c:	add	fp, sp, #16
   22f60:	mov	r6, r2
   22f64:	mov	r5, r1
   22f68:	mov	r4, r0
   22f6c:	bl	22ef8 <flatcc_builder_start_offset_vector@@Base>
   22f70:	cmp	r0, #0
   22f74:	beq	22f80 <flatcc_builder_create_offset_vector@@Base+0x28>
   22f78:	mov	r0, #0
   22f7c:	pop	{r4, r5, r6, sl, fp, pc}
   22f80:	mov	r0, r4
   22f84:	mov	r1, r6
   22f88:	bl	22a44 <flatcc_builder_extend_offset_vector@@Base>
   22f8c:	cmp	r0, #0
   22f90:	beq	22f78 <flatcc_builder_create_offset_vector@@Base+0x20>
   22f94:	lsl	r2, r6, #2
   22f98:	mov	r1, r5
   22f9c:	bl	14e5c <memcpy@plt>
   22fa0:	mov	r0, r4
   22fa4:	pop	{r4, r5, r6, sl, fp, lr}
   22fa8:	b	22fac <flatcc_builder_end_offset_vector@@Base>

00022fac <flatcc_builder_end_offset_vector@@Base>:
   22fac:	push	{r4, r5, fp, lr}
   22fb0:	add	fp, sp, #8
   22fb4:	mov	r4, r0
   22fb8:	ldr	r0, [r0, #32]
   22fbc:	ldrh	r1, [r0, #14]
   22fc0:	cmp	r1, #5
   22fc4:	bne	22ff0 <flatcc_builder_end_offset_vector@@Base+0x44>
   22fc8:	ldr	r2, [r0, #20]
   22fcc:	ldr	r1, [r4, #16]
   22fd0:	mov	r0, r4
   22fd4:	bl	23b34 <flatcc_builder_create_offset_vector_direct@@Base>
   22fd8:	mov	r5, r0
   22fdc:	cmp	r0, #0
   22fe0:	movne	r0, r4
   22fe4:	blne	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   22fe8:	mov	r0, r5
   22fec:	pop	{r4, r5, fp, pc}
   22ff0:	movw	r0, #24926	; 0x615e
   22ff4:	movt	r0, #3
   22ff8:	movw	r1, #23874	; 0x5d42
   22ffc:	movt	r1, #3
   23000:	movw	r3, #26509	; 0x678d
   23004:	movt	r3, #3
   23008:	movw	r2, #1480	; 0x5c8
   2300c:	bl	14f40 <__assert_fail@plt>

00023010 <flatcc_builder_start_string@@Base>:
   23010:	push	{r4, r5, r6, sl, fp, lr}
   23014:	add	fp, sp, #16
   23018:	mov	r4, r0
   2301c:	mov	r6, #1
   23020:	mov	r1, #1
   23024:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   23028:	mvn	r5, #0
   2302c:	cmp	r0, #0
   23030:	beq	2303c <flatcc_builder_start_string@@Base+0x2c>
   23034:	mov	r0, r5
   23038:	pop	{r4, r5, r6, sl, fp, pc}
   2303c:	ldr	r0, [r4, #32]
   23040:	str	r6, [r0, #16]
   23044:	ldr	r0, [r4, #32]
   23048:	mov	r5, #0
   2304c:	str	r5, [r0, #20]
   23050:	ldr	r0, [r4, #32]
   23054:	mov	r1, #6
   23058:	strh	r1, [r0, #14]
   2305c:	mov	r0, r4
   23060:	mvn	r1, #3
   23064:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   23068:	mov	r0, r5
   2306c:	pop	{r4, r5, r6, sl, fp, pc}

00023070 <flatcc_builder_reserve_table@@Base>:
   23070:	cmn	r1, #1
   23074:	ble	2307c <flatcc_builder_reserve_table@@Base+0xc>
   23078:	b	230a4 <flatcc_builder_reserve_table@@Base+0x34>
   2307c:	push	{fp, lr}
   23080:	mov	fp, sp
   23084:	movw	r0, #25765	; 0x64a5
   23088:	movt	r0, #3
   2308c:	movw	r1, #23874	; 0x5d42
   23090:	movt	r1, #3
   23094:	movw	r3, #25700	; 0x6464
   23098:	movt	r3, #3
   2309c:	movw	r2, #1065	; 0x429
   230a0:	bl	14f40 <__assert_fail@plt>
   230a4:	push	{r4, r5, r6, sl, fp, lr}
   230a8:	add	fp, sp, #16
   230ac:	sub	sp, sp, #8
   230b0:	mov	r6, r1
   230b4:	mov	r4, r0
   230b8:	ldr	r0, [r0, #32]
   230bc:	ldrh	r1, [r0, #28]
   230c0:	ldr	r0, [r0, #16]
   230c4:	mov	r2, #1
   230c8:	str	r2, [sp]
   230cc:	mov	r2, #4
   230d0:	add	r3, r2, r6, lsl #1
   230d4:	add	r2, r0, r1, lsl #1
   230d8:	mov	r5, #0
   230dc:	mov	r0, r4
   230e0:	mov	r1, #0
   230e4:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   230e8:	str	r0, [r4, #4]
   230ec:	cmp	r0, #0
   230f0:	beq	2312c <flatcc_builder_reserve_table@@Base+0xbc>
   230f4:	lsl	r1, r6, #1
   230f8:	add	r0, r0, #4
   230fc:	str	r0, [r4, #4]
   23100:	ldr	r0, [r4, #32]
   23104:	ldr	r2, [r0, #20]
   23108:	str	r5, [sp]
   2310c:	orr	r3, r1, #1
   23110:	mov	r0, r4
   23114:	mov	r1, #3
   23118:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   2311c:	str	r0, [r4]
   23120:	cmp	r0, #0
   23124:	mvneq	r5, #0
   23128:	b	23130 <flatcc_builder_reserve_table@@Base+0xc0>
   2312c:	mvn	r5, #0
   23130:	mov	r0, r5
   23134:	sub	sp, fp, #16
   23138:	pop	{r4, r5, r6, sl, fp, pc}

0002313c <flatcc_builder_start_table@@Base>:
   2313c:	push	{r4, r5, r6, sl, fp, lr}
   23140:	add	fp, sp, #16
   23144:	mov	r6, r1
   23148:	mov	r4, r0
   2314c:	mov	r1, #4
   23150:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   23154:	mvn	r5, #0
   23158:	cmp	r0, #0
   2315c:	bne	231d4 <flatcc_builder_start_table@@Base+0x98>
   23160:	ldr	r0, [r4, #4]
   23164:	ldr	r1, [r4, #32]
   23168:	ldr	r2, [r4, #52]	; 0x34
   2316c:	sub	r0, r0, r2
   23170:	str	r0, [r1, #16]
   23174:	ldr	r0, [r4]
   23178:	ldr	r1, [r4, #32]
   2317c:	ldr	r2, [r4, #76]	; 0x4c
   23180:	sub	r0, r0, r2
   23184:	str	r0, [r1, #20]
   23188:	ldr	r0, [r4, #12]
   2318c:	ldr	r1, [r4, #32]
   23190:	str	r0, [r1, #24]
   23194:	ldr	r0, [r4, #32]
   23198:	ldrh	r1, [r4, #8]
   2319c:	strh	r1, [r0, #28]
   231a0:	mov	r0, #0
   231a4:	strh	r0, [r4, #8]
   231a8:	movw	r0, #15186	; 0x3b52
   231ac:	movt	r0, #12137	; 0x2f69
   231b0:	str	r0, [r4, #12]
   231b4:	ldr	r0, [r4, #32]
   231b8:	mov	r1, #3
   231bc:	strh	r1, [r0, #14]
   231c0:	mov	r0, r4
   231c4:	mov	r1, r6
   231c8:	bl	230a4 <flatcc_builder_reserve_table@@Base+0x34>
   231cc:	cmp	r0, #0
   231d0:	beq	231dc <flatcc_builder_start_table@@Base+0xa0>
   231d4:	mov	r0, r5
   231d8:	pop	{r4, r5, r6, sl, fp, pc}
   231dc:	mov	r0, r4
   231e0:	movw	r1, #65532	; 0xfffc
   231e4:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   231e8:	mov	r5, #0
   231ec:	mov	r0, r5
   231f0:	pop	{r4, r5, r6, sl, fp, pc}

000231f4 <flatcc_builder_create_vtable@@Base>:
   231f4:	push	{fp, lr}
   231f8:	mov	fp, sp
   231fc:	sub	sp, sp, #72	; 0x48
   23200:	mov	r3, #0
   23204:	str	r3, [sp, #4]
   23208:	str	r3, [sp]
   2320c:	cmp	r2, #0
   23210:	strne	r2, [sp, #12]
   23214:	strne	r1, [sp, #8]
   23218:	strne	r2, [sp]
   2321c:	movne	r1, #1
   23220:	strne	r1, [sp, #4]
   23224:	ldr	r1, [r0, #152]	; 0x98
   23228:	cmp	r1, #0
   2322c:	bne	2323c <flatcc_builder_create_vtable@@Base+0x48>
   23230:	ldr	r1, [r0, #180]	; 0xb4
   23234:	cmp	r1, #0
   23238:	beq	23258 <flatcc_builder_create_vtable@@Base+0x64>
   2323c:	mov	r1, sp
   23240:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   23244:	cmp	r0, #0
   23248:	beq	23268 <flatcc_builder_create_vtable@@Base+0x74>
   2324c:	add	r0, r0, #1
   23250:	mov	sp, fp
   23254:	pop	{fp, pc}
   23258:	mov	r1, sp
   2325c:	bl	23274 <flatcc_builder_create_vtable@@Base+0x80>
   23260:	cmp	r0, #0
   23264:	bne	23250 <flatcc_builder_create_vtable@@Base+0x5c>
   23268:	mov	r0, #0
   2326c:	mov	sp, fp
   23270:	pop	{fp, pc}
   23274:	push	{r4, sl, fp, lr}
   23278:	add	fp, sp, #8
   2327c:	sub	sp, sp, #8
   23280:	ldr	r4, [r0, #140]	; 0x8c
   23284:	ldr	r3, [r1]
   23288:	add	r2, r3, r4
   2328c:	str	r2, [r0, #140]	; 0x8c
   23290:	cmn	r3, #1
   23294:	ble	232e8 <flatcc_builder_create_vtable@@Base+0xf4>
   23298:	ldr	r2, [r1, #4]
   2329c:	ldr	ip, [r0, #36]	; 0x24
   232a0:	ldr	lr, [r0, #44]	; 0x2c
   232a4:	str	r3, [sp]
   232a8:	add	r1, r1, #8
   232ac:	mov	r0, ip
   232b0:	mov	r3, r4
   232b4:	blx	lr
   232b8:	cmp	r0, #0
   232bc:	addeq	r0, r4, #1
   232c0:	subeq	sp, fp, #8
   232c4:	popeq	{r4, sl, fp, pc}
   232c8:	movw	r0, #28392	; 0x6ee8
   232cc:	movt	r0, #3
   232d0:	movw	r1, #23874	; 0x5d42
   232d4:	movt	r1, #3
   232d8:	movw	r3, #28259	; 0x6e63
   232dc:	movt	r3, #3
   232e0:	movw	r2, #677	; 0x2a5
   232e4:	bl	14f40 <__assert_fail@plt>
   232e8:	movw	r0, #28392	; 0x6ee8
   232ec:	movt	r0, #3
   232f0:	movw	r1, #23874	; 0x5d42
   232f4:	movt	r1, #3
   232f8:	movw	r3, #28259	; 0x6e63
   232fc:	movt	r3, #3
   23300:	movw	r2, #673	; 0x2a1
   23304:	bl	14f40 <__assert_fail@plt>

00023308 <flatcc_builder_create_cached_vtable@@Base>:
   23308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2330c:	add	fp, sp, #28
   23310:	sub	sp, sp, #20
   23314:	mov	r4, r2
   23318:	mov	r9, r1
   2331c:	mov	sl, r0
   23320:	mov	r1, r3
   23324:	bl	23500 <flatcc_builder_create_cached_vtable@@Base+0x1f8>
   23328:	cmp	r0, #0
   2332c:	beq	23450 <flatcc_builder_create_cached_vtable@@Base+0x148>
   23330:	mov	r7, r0
   23334:	ldr	r6, [r0]
   23338:	mov	r5, #0
   2333c:	cmp	r6, #0
   23340:	mov	r8, #0
   23344:	beq	233dc <flatcc_builder_create_cached_vtable@@Base+0xd4>
   23348:	ldr	r5, [sl, #68]	; 0x44
   2334c:	str	sl, [sp, #16]
   23350:	ldr	sl, [sl, #100]	; 0x64
   23354:	mov	r0, #0
   23358:	str	r7, [sp, #8]
   2335c:	str	r0, [sp, #12]
   23360:	b	23374 <flatcc_builder_create_cached_vtable@@Base+0x6c>
   23364:	ldr	r6, [r8, #12]!
   23368:	cmp	r6, #0
   2336c:	mov	r7, r8
   23370:	beq	233cc <flatcc_builder_create_cached_vtable@@Base+0xc4>
   23374:	add	r8, sl, r6
   23378:	ldr	r0, [r8, #8]
   2337c:	mov	r1, r5
   23380:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   23384:	cmp	r0, r4
   23388:	bne	23364 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   2338c:	mov	r0, r9
   23390:	mov	r2, r4
   23394:	bl	14ebc <bcmp@plt>
   23398:	cmp	r0, #0
   2339c:	bne	23364 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   233a0:	ldr	r0, [sp, #16]
   233a4:	ldr	r0, [r0, #152]	; 0x98
   233a8:	ldr	r1, [r8, #4]
   233ac:	cmp	r1, r0
   233b0:	beq	234d8 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   233b4:	mov	r7, r8
   233b8:	ldr	r6, [r7, #12]!
   233bc:	cmp	r6, #0
   233c0:	mov	r0, r8
   233c4:	bne	2335c <flatcc_builder_create_cached_vtable@@Base+0x54>
   233c8:	b	233d0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   233cc:	ldr	r8, [sp, #12]
   233d0:	ldr	sl, [sp, #16]
   233d4:	mov	r5, #0
   233d8:	ldr	r7, [sp, #8]
   233dc:	ldr	r2, [sl, #124]	; 0x7c
   233e0:	str	r5, [sp]
   233e4:	mov	r0, sl
   233e8:	mov	r1, #6
   233ec:	mov	r3, #16
   233f0:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   233f4:	cmp	r0, #0
   233f8:	beq	234c4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   233fc:	mov	r6, r0
   23400:	ldr	r0, [sl, #124]	; 0x7c
   23404:	ldr	r1, [sl, #152]	; 0x98
   23408:	add	r2, r0, #16
   2340c:	str	r2, [sl, #124]	; 0x7c
   23410:	str	r1, [r6, #4]
   23414:	ldr	r1, [r7]
   23418:	str	r1, [r6, #12]
   2341c:	str	r0, [r7]
   23420:	mov	r0, sl
   23424:	mov	r1, r9
   23428:	mov	r2, r4
   2342c:	bl	231f4 <flatcc_builder_create_vtable@@Base>
   23430:	str	r0, [r6]
   23434:	cmp	r0, #0
   23438:	beq	234c4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   2343c:	cmp	r8, #0
   23440:	beq	23458 <flatcc_builder_create_cached_vtable@@Base+0x150>
   23444:	ldr	r0, [r8, #8]
   23448:	str	r0, [r6, #8]
   2344c:	b	234c0 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   23450:	mov	r5, #0
   23454:	b	234c4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   23458:	ldr	r0, [sl, #172]	; 0xac
   2345c:	cmp	r0, #0
   23460:	beq	23480 <flatcc_builder_create_cached_vtable@@Base+0x178>
   23464:	ldr	r1, [sl, #120]	; 0x78
   23468:	add	r1, r1, r4
   2346c:	cmp	r0, r1
   23470:	bcs	23480 <flatcc_builder_create_cached_vtable@@Base+0x178>
   23474:	mov	r0, sl
   23478:	bl	21a8c <flatcc_builder_flush_vtable_cache@@Base>
   2347c:	b	234c0 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   23480:	ldr	r2, [sl, #120]	; 0x78
   23484:	mov	r0, #0
   23488:	str	r0, [sp]
   2348c:	mov	r0, sl
   23490:	mov	r1, #2
   23494:	mov	r3, r4
   23498:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   2349c:	cmp	r0, #0
   234a0:	beq	234d0 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   234a4:	ldr	r1, [sl, #120]	; 0x78
   234a8:	str	r1, [r6, #8]
   234ac:	add	r1, r1, r4
   234b0:	str	r1, [sl, #120]	; 0x78
   234b4:	mov	r1, r9
   234b8:	mov	r2, r4
   234bc:	bl	14e5c <memcpy@plt>
   234c0:	ldr	r5, [r6]
   234c4:	mov	r0, r5
   234c8:	sub	sp, fp, #28
   234cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234d0:	mvn	r5, #0
   234d4:	b	234c4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   234d8:	ldr	r1, [sp, #8]
   234dc:	cmp	r7, r1
   234e0:	beq	234f8 <flatcc_builder_create_cached_vtable@@Base+0x1f0>
   234e4:	ldr	r0, [r8, #12]
   234e8:	str	r0, [r7]
   234ec:	ldr	r0, [r1]
   234f0:	str	r0, [r8, #12]
   234f4:	str	r6, [r1]
   234f8:	ldr	r5, [r8]
   234fc:	b	234c4 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   23500:	push	{r4, r5, fp, lr}
   23504:	add	fp, sp, #8
   23508:	mov	r4, r1
   2350c:	mov	r5, r0
   23510:	ldr	r0, [r0, #116]	; 0x74
   23514:	cmp	r0, #0
   23518:	bne	23534 <flatcc_builder_create_cached_vtable@@Base+0x22c>
   2351c:	mov	r0, r5
   23520:	bl	24c40 <flatcc_builder_get_emit_context@@Base+0x80>
   23524:	mov	r1, r0
   23528:	mov	r0, #0
   2352c:	cmp	r1, #0
   23530:	popne	{r4, r5, fp, pc}
   23534:	ldr	r0, [r5, #92]	; 0x5c
   23538:	ldr	r1, [r5, #116]	; 0x74
   2353c:	rsb	r1, r1, #32
   23540:	lsr	r1, r4, r1
   23544:	add	r0, r0, r1, lsl #2
   23548:	pop	{r4, r5, fp, pc}

0002354c <flatcc_builder_create_table@@Base>:
   2354c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23550:	add	fp, sp, #28
   23554:	sub	sp, sp, #84	; 0x54
   23558:	strh	r3, [fp, #-30]	; 0xffffffe2
   2355c:	ldr	r4, [fp, #12]
   23560:	cmn	r4, #1
   23564:	ble	2368c <flatcc_builder_create_table@@Base+0x140>
   23568:	ldr	r8, [fp, #16]
   2356c:	tst	r8, #1
   23570:	beq	236ac <flatcc_builder_create_table@@Base+0x160>
   23574:	mov	sl, r2
   23578:	mov	r6, r1
   2357c:	mov	r5, r0
   23580:	sub	r0, fp, #30
   23584:	mov	r1, #4
   23588:	bl	22ee8 <flatcc_builder_start_vector@@Base+0x80>
   2358c:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   23590:	mov	r0, r5
   23594:	mov	r1, r7
   23598:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   2359c:	mov	r0, r5
   235a0:	mov	r1, sl
   235a4:	mov	r2, r7
   235a8:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   235ac:	mov	r9, r0
   235b0:	add	r0, sl, r0
   235b4:	str	r5, [sp]
   235b8:	ldr	r1, [r5, #136]	; 0x88
   235bc:	sub	r0, r1, r0
   235c0:	sub	r5, r0, #4
   235c4:	sub	r0, r5, r8
   235c8:	add	r0, r0, #1
   235cc:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   235d0:	str	r0, [fp, #-36]	; 0xffffffdc
   235d4:	cmp	r4, #1
   235d8:	blt	23608 <flatcc_builder_create_table@@Base+0xbc>
   235dc:	ldr	r7, [fp, #8]
   235e0:	mvn	r0, #3
   235e4:	sub	r5, r0, r5
   235e8:	ldrh	r8, [r7], #2
   235ec:	ldr	r0, [r8, r6]
   235f0:	add	r0, r5, r0
   235f4:	sub	r0, r0, r8
   235f8:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   235fc:	str	r0, [r8, r6]
   23600:	subs	r4, r4, #1
   23604:	bne	235e8 <flatcc_builder_create_table@@Base+0x9c>
   23608:	mov	r1, #4
   2360c:	str	r1, [sp, #16]
   23610:	sub	r0, fp, #36	; 0x24
   23614:	str	r0, [sp, #12]
   23618:	str	r1, [sp, #4]
   2361c:	mov	r0, #1
   23620:	str	r0, [sp, #8]
   23624:	cmp	sl, #0
   23628:	strne	sl, [sp, #24]
   2362c:	strne	r6, [sp, #20]
   23630:	movne	r0, #2
   23634:	strne	r0, [sp, #8]
   23638:	addne	r0, sl, #4
   2363c:	strne	r0, [sp, #4]
   23640:	cmp	r9, #0
   23644:	ldr	r0, [sp]
   23648:	beq	2367c <flatcc_builder_create_table@@Base+0x130>
   2364c:	ldr	r2, [sp, #4]
   23650:	ldr	r1, [sp, #8]
   23654:	add	r2, r2, r9
   23658:	str	r2, [sp, #4]
   2365c:	add	r2, sp, #4
   23660:	add	r3, r2, r1, lsl #3
   23664:	movw	r2, #23344	; 0x5b30
   23668:	movt	r2, #3
   2366c:	str	r2, [r3, #8]
   23670:	str	r9, [r3, #12]
   23674:	add	r1, r1, #1
   23678:	str	r1, [sp, #8]
   2367c:	add	r1, sp, #4
   23680:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   23684:	sub	sp, fp, #28
   23688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2368c:	movw	r0, #25758	; 0x649e
   23690:	movt	r0, #3
   23694:	movw	r1, #23874	; 0x5d42
   23698:	movt	r1, #3
   2369c:	movw	r3, #25776	; 0x64b0
   236a0:	movt	r3, #3
   236a4:	movw	r2, #1237	; 0x4d5
   236a8:	bl	14f40 <__assert_fail@plt>
   236ac:	movw	r0, #25932	; 0x654c
   236b0:	movt	r0, #3
   236b4:	movw	r1, #23874	; 0x5d42
   236b8:	movt	r1, #3
   236bc:	movw	r3, #25776	; 0x64b0
   236c0:	movt	r3, #3
   236c4:	movw	r2, #1243	; 0x4db
   236c8:	bl	14f40 <__assert_fail@plt>

000236cc <flatcc_builder_check_required_field@@Base>:
   236cc:	push	{fp, lr}
   236d0:	mov	fp, sp
   236d4:	ldr	r2, [r0, #32]
   236d8:	ldrh	r2, [r2, #14]
   236dc:	cmp	r2, #3
   236e0:	bne	23710 <flatcc_builder_check_required_field@@Base+0x44>
   236e4:	ldrh	r3, [r0, #8]
   236e8:	mov	r2, #0
   236ec:	cmp	r3, r1
   236f0:	bls	23708 <flatcc_builder_check_required_field@@Base+0x3c>
   236f4:	ldr	r0, [r0, #4]
   236f8:	add	r0, r0, r1, lsl #1
   236fc:	ldrh	r2, [r0]
   23700:	cmp	r2, #0
   23704:	movwne	r2, #1
   23708:	mov	r0, r2
   2370c:	pop	{fp, pc}
   23710:	movw	r0, #25943	; 0x6557
   23714:	movt	r0, #3
   23718:	movw	r1, #23874	; 0x5d42
   2371c:	movt	r1, #3
   23720:	movw	r3, #25986	; 0x6582
   23724:	movt	r3, #3
   23728:	movw	r2, #1272	; 0x4f8
   2372c:	bl	14f40 <__assert_fail@plt>

00023730 <flatcc_builder_check_union_field@@Base>:
   23730:	push	{fp, lr}
   23734:	mov	fp, sp
   23738:	mov	r2, r0
   2373c:	ldr	r0, [r0, #32]
   23740:	ldrh	r0, [r0, #14]
   23744:	cmp	r0, #3
   23748:	bne	237a8 <flatcc_builder_check_union_field@@Base+0x78>
   2374c:	mov	r0, #0
   23750:	cmp	r1, #0
   23754:	beq	23794 <flatcc_builder_check_union_field@@Base+0x64>
   23758:	ldrh	r3, [r2, #8]
   2375c:	cmp	r3, r1
   23760:	popls	{fp, pc}
   23764:	ldr	r0, [r2, #4]
   23768:	add	r0, r0, r1, lsl #1
   2376c:	ldrh	r1, [r0, #-2]
   23770:	cmp	r1, #0
   23774:	beq	23798 <flatcc_builder_check_union_field@@Base+0x68>
   23778:	ldr	r2, [r2, #16]
   2377c:	ldrb	r1, [r2, r1]
   23780:	ldrh	r0, [r0]
   23784:	cmp	r1, #0
   23788:	beq	2379c <flatcc_builder_check_union_field@@Base+0x6c>
   2378c:	cmp	r0, #0
   23790:	movwne	r0, #1
   23794:	pop	{fp, pc}
   23798:	ldrh	r0, [r0]
   2379c:	clz	r0, r0
   237a0:	lsr	r0, r0, #5
   237a4:	pop	{fp, pc}
   237a8:	movw	r0, #25943	; 0x6557
   237ac:	movt	r0, #3
   237b0:	movw	r1, #23874	; 0x5d42
   237b4:	movt	r1, #3
   237b8:	movw	r3, #26069	; 0x65d5
   237bc:	movt	r3, #3
   237c0:	movw	r2, #1279	; 0x4ff
   237c4:	bl	14f40 <__assert_fail@plt>

000237c8 <flatcc_builder_check_required@@Base>:
   237c8:	push	{fp, lr}
   237cc:	mov	fp, sp
   237d0:	mov	r3, r0
   237d4:	ldr	r0, [r0, #32]
   237d8:	ldrh	r0, [r0, #14]
   237dc:	cmp	r0, #3
   237e0:	bne	23828 <flatcc_builder_check_required@@Base+0x60>
   237e4:	ldrh	ip, [r3, #8]
   237e8:	mov	r0, #0
   237ec:	cmp	ip, r2
   237f0:	poplt	{fp, pc}
   237f4:	cmp	r2, #1
   237f8:	blt	23820 <flatcc_builder_check_required@@Base+0x58>
   237fc:	ldr	ip, [r3, #4]
   23800:	ldrh	r3, [r1]
   23804:	add	r3, ip, r3, lsl #1
   23808:	ldrh	r3, [r3]
   2380c:	cmp	r3, #0
   23810:	beq	23824 <flatcc_builder_check_required@@Base+0x5c>
   23814:	add	r1, r1, #2
   23818:	subs	r2, r2, #1
   2381c:	bne	23800 <flatcc_builder_check_required@@Base+0x38>
   23820:	mov	r0, #1
   23824:	pop	{fp, pc}
   23828:	movw	r0, #25943	; 0x6557
   2382c:	movt	r0, #3
   23830:	movw	r1, #23874	; 0x5d42
   23834:	movt	r1, #3
   23838:	movw	r3, #26149	; 0x6625
   2383c:	movt	r3, #3
   23840:	movw	r2, #1297	; 0x511
   23844:	bl	14f40 <__assert_fail@plt>

00023848 <flatcc_builder_end_table@@Base>:
   23848:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2384c:	add	fp, sp, #24
   23850:	sub	sp, sp, #16
   23854:	mov	r4, r0
   23858:	ldr	r0, [r0, #32]
   2385c:	ldrh	r0, [r0, #14]
   23860:	cmp	r0, #3
   23864:	bne	23974 <flatcc_builder_end_table@@Base+0x12c>
   23868:	ldrh	r0, [r4, #8]
   2386c:	mov	r1, #4
   23870:	add	r0, r1, r0, lsl #1
   23874:	ldr	r6, [r4, #4]
   23878:	strh	r0, [r6, #-4]!
   2387c:	ldrh	r1, [r4, #20]
   23880:	add	r1, r1, #4
   23884:	strh	r1, [r6, #2]
   23888:	uxth	r5, r0
   2388c:	ldr	r0, [r4, #12]
   23890:	eor	r0, r0, r5
   23894:	movw	r2, #31153	; 0x79b1
   23898:	movt	r2, #40503	; 0x9e37
   2389c:	mul	r0, r0, r2
   238a0:	uxth	r1, r1
   238a4:	eor	r0, r0, r1
   238a8:	mul	r3, r0, r2
   238ac:	str	r3, [r4, #12]
   238b0:	mov	r0, r4
   238b4:	mov	r1, r6
   238b8:	mov	r2, r5
   238bc:	bl	23308 <flatcc_builder_create_cached_vtable@@Base>
   238c0:	cmp	r0, #0
   238c4:	beq	23964 <flatcc_builder_end_table@@Base+0x11c>
   238c8:	mov	r7, r0
   238cc:	mov	r8, #0
   238d0:	mov	r0, r6
   238d4:	mov	r1, #0
   238d8:	mov	r2, r5
   238dc:	bl	14eec <memset@plt>
   238e0:	ldrh	r3, [r4, #130]	; 0x82
   238e4:	ldr	r0, [r4, #76]	; 0x4c
   238e8:	ldr	r6, [r4]
   238ec:	ldr	r1, [r4, #16]
   238f0:	ldr	r2, [r4, #20]
   238f4:	ldr	r5, [r4, #32]
   238f8:	ldr	r5, [r5, #20]
   238fc:	add	r0, r0, r5
   23900:	sub	r6, r6, r0
   23904:	asr	r6, r6, #1
   23908:	stm	sp, {r0, r6, r7}
   2390c:	mov	r0, r4
   23910:	bl	2354c <flatcc_builder_create_table@@Base>
   23914:	cmp	r0, #0
   23918:	beq	23968 <flatcc_builder_end_table@@Base+0x120>
   2391c:	mov	r5, r0
   23920:	ldr	r0, [r4, #32]
   23924:	ldr	r1, [r4, #52]	; 0x34
   23928:	ldr	r2, [r4, #76]	; 0x4c
   2392c:	ldr	r3, [r0, #24]
   23930:	str	r3, [r4, #12]
   23934:	ldrh	r3, [r0, #28]
   23938:	strh	r3, [r4, #8]
   2393c:	ldr	r3, [r0, #16]
   23940:	add	r1, r1, r3
   23944:	str	r1, [r4, #4]
   23948:	ldr	r0, [r0, #20]
   2394c:	add	r0, r2, r0
   23950:	str	r0, [r4]
   23954:	mov	r0, r4
   23958:	bl	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   2395c:	mov	r8, r5
   23960:	b	23968 <flatcc_builder_end_table@@Base+0x120>
   23964:	mov	r8, #0
   23968:	mov	r0, r8
   2396c:	sub	sp, fp, #24
   23970:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23974:	movw	r0, #25943	; 0x6557
   23978:	movt	r0, #3
   2397c:	movw	r1, #23874	; 0x5d42
   23980:	movt	r1, #3
   23984:	movw	r3, #26239	; 0x667f
   23988:	movt	r3, #3
   2398c:	movw	r2, #1317	; 0x525
   23990:	bl	14f40 <__assert_fail@plt>

00023994 <flatcc_builder_create_vector@@Base>:
   23994:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23998:	add	fp, sp, #24
   2399c:	sub	sp, sp, #80	; 0x50
   239a0:	mov	r4, r0
   239a4:	ldr	r0, [fp, #8]
   239a8:	strh	r0, [fp, #-26]	; 0xffffffe6
   239ac:	ldr	r0, [fp, #12]
   239b0:	cmp	r2, r0
   239b4:	bhi	23a80 <flatcc_builder_create_vector@@Base+0xec>
   239b8:	mov	r6, r3
   239bc:	mov	r7, r2
   239c0:	mov	r8, r1
   239c4:	sub	r0, fp, #26
   239c8:	mov	r9, #4
   239cc:	mov	r1, #4
   239d0:	bl	22ee8 <flatcc_builder_start_vector@@Base+0x80>
   239d4:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   239d8:	mov	r0, r4
   239dc:	mov	r1, r5
   239e0:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   239e4:	mov	r0, r7
   239e8:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   239ec:	str	r7, [fp, #-32]	; 0xffffffe0
   239f0:	mul	r6, r6, r7
   239f4:	mov	r0, r4
   239f8:	mov	r1, r6
   239fc:	mov	r2, r5
   23a00:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   23a04:	str	r9, [sp, #12]
   23a08:	sub	r1, fp, #32
   23a0c:	str	r1, [sp, #8]
   23a10:	str	r9, [sp]
   23a14:	mov	r1, #1
   23a18:	str	r1, [sp, #4]
   23a1c:	cmp	r6, #0
   23a20:	strne	r6, [sp, #20]
   23a24:	strne	r8, [sp, #16]
   23a28:	movne	r1, #2
   23a2c:	strne	r1, [sp, #4]
   23a30:	addne	r1, r6, #4
   23a34:	strne	r1, [sp]
   23a38:	cmp	r0, #0
   23a3c:	beq	23a6c <flatcc_builder_create_vector@@Base+0xd8>
   23a40:	ldm	sp, {r1, r2}
   23a44:	add	r1, r1, r0
   23a48:	str	r1, [sp]
   23a4c:	mov	r1, sp
   23a50:	add	r1, r1, r2, lsl #3
   23a54:	movw	r3, #23344	; 0x5b30
   23a58:	movt	r3, #3
   23a5c:	str	r3, [r1, #8]
   23a60:	str	r0, [r1, #12]
   23a64:	add	r0, r2, #1
   23a68:	str	r0, [sp, #4]
   23a6c:	mov	r1, sp
   23a70:	mov	r0, r4
   23a74:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   23a78:	sub	sp, fp, #24
   23a7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23a80:	movw	r0, #26305	; 0x66c1
   23a84:	movt	r0, #3
   23a88:	movw	r1, #23874	; 0x5d42
   23a8c:	movt	r1, #3
   23a90:	movw	r3, #26324	; 0x66d4
   23a94:	movt	r3, #3
   23a98:	movw	r2, #1365	; 0x555
   23a9c:	bl	14f40 <__assert_fail@plt>

00023aa0 <flatcc_builder_end_vector@@Base>:
   23aa0:	push	{r4, r5, fp, lr}
   23aa4:	add	fp, sp, #8
   23aa8:	sub	sp, sp, #8
   23aac:	mov	r4, r0
   23ab0:	ldr	r0, [r0, #32]
   23ab4:	ldrh	r1, [r0, #14]
   23ab8:	cmp	r1, #4
   23abc:	bne	23b00 <flatcc_builder_end_vector@@Base+0x60>
   23ac0:	ldr	r1, [r4, #16]
   23ac4:	ldrh	r5, [r4, #130]	; 0x82
   23ac8:	ldr	r3, [r0, #16]
   23acc:	ldr	r2, [r0, #20]
   23ad0:	ldr	r0, [r0, #24]
   23ad4:	str	r5, [sp]
   23ad8:	str	r0, [sp, #4]
   23adc:	mov	r0, r4
   23ae0:	bl	23994 <flatcc_builder_create_vector@@Base>
   23ae4:	mov	r5, r0
   23ae8:	cmp	r0, #0
   23aec:	movne	r0, r4
   23af0:	blne	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   23af4:	mov	r0, r5
   23af8:	sub	sp, fp, #8
   23afc:	pop	{r4, r5, fp, pc}
   23b00:	movw	r0, #24677	; 0x6065
   23b04:	movt	r0, #3
   23b08:	movw	r1, #23874	; 0x5d42
   23b0c:	movt	r1, #3
   23b10:	movw	r3, #26442	; 0x674a
   23b14:	movt	r3, #3
   23b18:	movw	r2, #1400	; 0x578
   23b1c:	bl	14f40 <__assert_fail@plt>

00023b20 <flatcc_builder_vector_count@@Base>:
   23b20:	ldr	r0, [r0, #32]
   23b24:	ldr	r0, [r0, #20]
   23b28:	bx	lr

00023b2c <flatcc_builder_vector_edit@@Base>:
   23b2c:	ldr	r0, [r0, #16]
   23b30:	bx	lr

00023b34 <flatcc_builder_create_offset_vector_direct@@Base>:
   23b34:	mov	r3, #0
   23b38:	b	23b3c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23b3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23b40:	add	fp, sp, #24
   23b44:	sub	sp, sp, #80	; 0x50
   23b48:	mov	r8, r0
   23b4c:	mov	r0, #0
   23b50:	cmn	r2, #-1073741823	; 0xc0000001
   23b54:	bhi	23ca4 <flatcc_builder_create_offset_vector_direct@@Base+0x170>
   23b58:	mov	r9, r3
   23b5c:	mov	r6, r2
   23b60:	mov	r7, r1
   23b64:	mov	r5, #4
   23b68:	mov	r0, r8
   23b6c:	mov	r1, #4
   23b70:	bl	22374 <flatcc_builder_create_buffer@@Base+0x1cc>
   23b74:	mov	r0, r6
   23b78:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23b7c:	str	r6, [fp, #-28]	; 0xffffffe4
   23b80:	lsl	r4, r6, #2
   23b84:	mov	r0, r8
   23b88:	mov	r1, r4
   23b8c:	mov	r2, #4
   23b90:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   23b94:	str	r5, [sp, #16]
   23b98:	sub	r1, fp, #28
   23b9c:	str	r1, [sp, #12]
   23ba0:	str	r5, [sp, #4]
   23ba4:	mov	r1, #1
   23ba8:	str	r1, [sp, #8]
   23bac:	mov	r1, #0
   23bb0:	cmp	r1, r6, lsl #2
   23bb4:	strne	r4, [sp, #24]
   23bb8:	strne	r7, [sp, #20]
   23bbc:	movne	r1, #2
   23bc0:	strne	r1, [sp, #8]
   23bc4:	addne	r1, r4, #4
   23bc8:	strne	r1, [sp, #4]
   23bcc:	cmp	r0, #0
   23bd0:	beq	23c00 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   23bd4:	ldmib	sp, {r1, r2}
   23bd8:	add	r1, r1, r0
   23bdc:	str	r1, [sp, #4]
   23be0:	add	r1, sp, #4
   23be4:	add	r1, r1, r2, lsl #3
   23be8:	movw	r3, #23344	; 0x5b30
   23bec:	movt	r3, #3
   23bf0:	str	r3, [r1, #8]
   23bf4:	str	r0, [r1, #12]
   23bf8:	add	r0, r2, #1
   23bfc:	str	r0, [sp, #8]
   23c00:	cmp	r6, #0
   23c04:	beq	23c98 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   23c08:	ldr	r0, [r8, #136]	; 0x88
   23c0c:	ldr	r1, [sp, #4]
   23c10:	sub	r0, r1, r0
   23c14:	sub	r4, r0, #4
   23c18:	mov	r5, r9
   23c1c:	b	23c34 <flatcc_builder_create_offset_vector_direct@@Base+0x100>
   23c20:	sub	r4, r4, #4
   23c24:	add	r7, r7, #4
   23c28:	add	r5, r5, #1
   23c2c:	subs	r6, r6, #1
   23c30:	beq	23c98 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   23c34:	ldr	r0, [r7]
   23c38:	cmp	r0, #0
   23c3c:	beq	23c64 <flatcc_builder_create_offset_vector_direct@@Base+0x130>
   23c40:	add	r0, r4, r0
   23c44:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   23c48:	str	r0, [r7]
   23c4c:	cmp	r9, #0
   23c50:	beq	23c20 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   23c54:	ldrb	r0, [r5]
   23c58:	cmp	r0, #0
   23c5c:	bne	23c20 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   23c60:	b	23cac <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   23c64:	cmp	r9, #0
   23c68:	beq	23ccc <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   23c6c:	ldrb	r0, [r5]
   23c70:	cmp	r0, #0
   23c74:	beq	23c20 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   23c78:	movw	r0, #28525	; 0x6f6d
   23c7c:	movt	r0, #3
   23c80:	movw	r1, #23874	; 0x5d42
   23c84:	movt	r1, #3
   23c88:	movw	r3, #28394	; 0x6eea
   23c8c:	movt	r3, #3
   23c90:	movw	r2, #1461	; 0x5b5
   23c94:	bl	14f40 <__assert_fail@plt>
   23c98:	add	r1, sp, #4
   23c9c:	mov	r0, r8
   23ca0:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   23ca4:	sub	sp, fp, #24
   23ca8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23cac:	movw	r0, #28380	; 0x6edc
   23cb0:	movt	r0, #3
   23cb4:	movw	r1, #23874	; 0x5d42
   23cb8:	movt	r1, #3
   23cbc:	movw	r3, #28394	; 0x6eea
   23cc0:	movt	r3, #3
   23cc4:	movw	r2, #1457	; 0x5b1
   23cc8:	bl	14f40 <__assert_fail@plt>
   23ccc:	movw	r0, #28392	; 0x6ee8
   23cd0:	movt	r0, #3
   23cd4:	movw	r1, #23874	; 0x5d42
   23cd8:	movt	r1, #3
   23cdc:	movw	r3, #28394	; 0x6eea
   23ce0:	movt	r3, #3
   23ce4:	movw	r2, #1463	; 0x5b7
   23ce8:	bl	14f40 <__assert_fail@plt>

00023cec <flatcc_builder_end_offset_vector_for_unions@@Base>:
   23cec:	push	{r4, r5, fp, lr}
   23cf0:	add	fp, sp, #8
   23cf4:	mov	r3, r1
   23cf8:	mov	r4, r0
   23cfc:	ldr	r0, [r0, #32]
   23d00:	ldrh	r1, [r0, #14]
   23d04:	cmp	r1, #5
   23d08:	bne	23d34 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   23d0c:	ldr	r2, [r0, #20]
   23d10:	ldr	r1, [r4, #16]
   23d14:	mov	r0, r4
   23d18:	bl	23b3c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   23d1c:	mov	r5, r0
   23d20:	cmp	r0, #0
   23d24:	movne	r0, r4
   23d28:	blne	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   23d2c:	mov	r0, r5
   23d30:	pop	{r4, r5, fp, pc}
   23d34:	movw	r0, #24926	; 0x615e
   23d38:	movt	r0, #3
   23d3c:	movw	r1, #23874	; 0x5d42
   23d40:	movt	r1, #3
   23d44:	movw	r3, #26583	; 0x67d7
   23d48:	movt	r3, #3
   23d4c:	movw	r2, #1493	; 0x5d5
   23d50:	bl	14f40 <__assert_fail@plt>

00023d54 <flatcc_builder_offset_vector_edit@@Base>:
   23d54:	ldr	r0, [r0, #16]
   23d58:	bx	lr

00023d5c <flatcc_builder_offset_vector_count@@Base>:
   23d5c:	ldr	r0, [r0, #32]
   23d60:	ldr	r0, [r0, #20]
   23d64:	bx	lr

00023d68 <flatcc_builder_table_add_union@@Base>:
   23d68:	push	{r4, r5, r6, r7, fp, lr}
   23d6c:	add	fp, sp, #16
   23d70:	mov	r5, r0
   23d74:	ldr	r0, [r0, #32]
   23d78:	ldrh	r0, [r0, #14]
   23d7c:	cmp	r0, #3
   23d80:	bne	23df4 <flatcc_builder_table_add_union@@Base+0x8c>
   23d84:	mov	r7, r3
   23d88:	mov	r6, r1
   23d8c:	uxtb	r4, r2
   23d90:	cmp	r3, #0
   23d94:	beq	23da0 <flatcc_builder_table_add_union@@Base+0x38>
   23d98:	cmp	r4, #0
   23d9c:	beq	23e14 <flatcc_builder_table_add_union@@Base+0xac>
   23da0:	cmp	r7, #0
   23da4:	beq	23dc0 <flatcc_builder_table_add_union@@Base+0x58>
   23da8:	mov	r0, r5
   23dac:	mov	r1, r6
   23db0:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   23db4:	cmp	r0, #0
   23db8:	beq	23e54 <flatcc_builder_table_add_union@@Base+0xec>
   23dbc:	str	r7, [r0]
   23dc0:	sub	r1, r6, #1
   23dc4:	mov	r0, r5
   23dc8:	mov	r2, #1
   23dcc:	mov	r3, #1
   23dd0:	bl	23f38 <flatcc_builder_table_add@@Base>
   23dd4:	cmp	r0, #0
   23dd8:	beq	23e34 <flatcc_builder_table_add_union@@Base+0xcc>
   23ddc:	mov	r5, r0
   23de0:	mov	r0, r4
   23de4:	bl	24018 <flatcc_builder_table_add@@Base+0xe0>
   23de8:	strb	r4, [r5]
   23dec:	mov	r0, #0
   23df0:	pop	{r4, r5, r6, r7, fp, pc}
   23df4:	movw	r0, #25943	; 0x6557
   23df8:	movt	r0, #3
   23dfc:	movw	r1, #23874	; 0x5d42
   23e00:	movt	r1, #3
   23e04:	movw	r3, #26697	; 0x6849
   23e08:	movt	r3, #3
   23e0c:	movw	r2, #1518	; 0x5ee
   23e10:	bl	14f40 <__assert_fail@plt>
   23e14:	movw	r0, #26785	; 0x68a1
   23e18:	movt	r0, #3
   23e1c:	movw	r1, #23874	; 0x5d42
   23e20:	movt	r1, #3
   23e24:	movw	r3, #26697	; 0x6849
   23e28:	movt	r3, #3
   23e2c:	movw	r2, #1519	; 0x5ef
   23e30:	bl	14f40 <__assert_fail@plt>
   23e34:	movw	r0, #26829	; 0x68cd
   23e38:	movt	r0, #3
   23e3c:	movw	r1, #23874	; 0x5d42
   23e40:	movt	r1, #3
   23e44:	movw	r3, #26697	; 0x6849
   23e48:	movt	r3, #3
   23e4c:	movw	r2, #1526	; 0x5f6
   23e50:	bl	14f40 <__assert_fail@plt>
   23e54:	movw	r0, #26819	; 0x68c3
   23e58:	movt	r0, #3
   23e5c:	movw	r1, #23874	; 0x5d42
   23e60:	movt	r1, #3
   23e64:	movw	r3, #26697	; 0x6849
   23e68:	movt	r3, #3
   23e6c:	movw	r2, #1522	; 0x5f2
   23e70:	bl	14f40 <__assert_fail@plt>

00023e74 <flatcc_builder_table_add_offset@@Base>:
   23e74:	push	{fp, lr}
   23e78:	mov	fp, sp
   23e7c:	ldr	r2, [r0, #32]
   23e80:	ldrh	r2, [r2, #14]
   23e84:	cmp	r2, #3
   23e88:	bne	23ed8 <flatcc_builder_table_add_offset@@Base+0x64>
   23e8c:	movw	r2, #32765	; 0x7ffd
   23e90:	cmp	r1, r2
   23e94:	bcs	23ef8 <flatcc_builder_table_add_offset@@Base+0x84>
   23e98:	ldr	r2, [r0, #4]
   23e9c:	add	r2, r2, r1, lsl #1
   23ea0:	ldrh	r2, [r2]
   23ea4:	cmp	r2, #0
   23ea8:	bne	23f18 <flatcc_builder_table_add_offset@@Base+0xa4>
   23eac:	ldr	r2, [r0, #12]
   23eb0:	eor	r2, r2, r1
   23eb4:	movw	r3, #31153	; 0x79b1
   23eb8:	movt	r3, #40503	; 0x9e37
   23ebc:	mul	r2, r2, r3
   23ec0:	eor	r2, r2, #4
   23ec4:	mul	r2, r2, r3
   23ec8:	str	r2, [r0, #12]
   23ecc:	uxth	r1, r1
   23ed0:	pop	{fp, lr}
   23ed4:	b	24840 <flatcc_builder_table_add_copy@@Base+0x40>
   23ed8:	movw	r0, #25943	; 0x6557
   23edc:	movt	r0, #3
   23ee0:	movw	r1, #23874	; 0x5d42
   23ee4:	movt	r1, #3
   23ee8:	movw	r3, #27723	; 0x6c4b
   23eec:	movt	r3, #3
   23ef0:	movw	r2, #1811	; 0x713
   23ef4:	bl	14f40 <__assert_fail@plt>
   23ef8:	movw	r0, #27595	; 0x6bcb
   23efc:	movt	r0, #3
   23f00:	movw	r1, #23874	; 0x5d42
   23f04:	movt	r1, #3
   23f08:	movw	r3, #27723	; 0x6c4b
   23f0c:	movt	r3, #3
   23f10:	movw	r2, #1812	; 0x714
   23f14:	bl	14f40 <__assert_fail@plt>
   23f18:	movw	r0, #28392	; 0x6ee8
   23f1c:	movt	r0, #3
   23f20:	movw	r1, #23874	; 0x5d42
   23f24:	movt	r1, #3
   23f28:	movw	r3, #27723	; 0x6c4b
   23f2c:	movt	r3, #3
   23f30:	movw	r2, #1819	; 0x71b
   23f34:	bl	14f40 <__assert_fail@plt>

00023f38 <flatcc_builder_table_add@@Base>:
   23f38:	push	{fp, lr}
   23f3c:	mov	fp, sp
   23f40:	mov	ip, r3
   23f44:	ldr	r3, [r0, #32]
   23f48:	ldrh	r3, [r3, #14]
   23f4c:	cmp	r3, #3
   23f50:	bne	23fb8 <flatcc_builder_table_add@@Base+0x80>
   23f54:	movw	r3, #32765	; 0x7ffd
   23f58:	cmp	r1, r3
   23f5c:	bcs	23fd8 <flatcc_builder_table_add@@Base+0xa0>
   23f60:	mov	lr, r2
   23f64:	ldrh	r3, [r0, #130]	; 0x82
   23f68:	cmp	r3, ip
   23f6c:	strhcc	ip, [r0, #130]	; 0x82
   23f70:	ldr	r3, [r0, #4]
   23f74:	add	r3, r3, r1, lsl #1
   23f78:	ldrh	r3, [r3]
   23f7c:	cmp	r3, #0
   23f80:	bne	23ff8 <flatcc_builder_table_add@@Base+0xc0>
   23f84:	ldr	r3, [r0, #12]
   23f88:	eor	r3, r3, r1
   23f8c:	movw	r2, #31153	; 0x79b1
   23f90:	movt	r2, #40503	; 0x9e37
   23f94:	mul	r3, r3, r2
   23f98:	eor	r3, r3, lr
   23f9c:	mul	r2, r3, r2
   23fa0:	str	r2, [r0, #12]
   23fa4:	uxth	r3, r1
   23fa8:	mov	r1, lr
   23fac:	mov	r2, ip
   23fb0:	pop	{fp, lr}
   23fb4:	b	24734 <flatcc_builder_string_len@@Base+0xc>
   23fb8:	movw	r0, #25943	; 0x6557
   23fbc:	movt	r0, #3
   23fc0:	movw	r1, #23874	; 0x5d42
   23fc4:	movt	r1, #3
   23fc8:	movw	r3, #27521	; 0x6b81
   23fcc:	movt	r3, #3
   23fd0:	movw	r2, #1773	; 0x6ed
   23fd4:	bl	14f40 <__assert_fail@plt>
   23fd8:	movw	r0, #27595	; 0x6bcb
   23fdc:	movt	r0, #3
   23fe0:	movw	r1, #23874	; 0x5d42
   23fe4:	movt	r1, #3
   23fe8:	movw	r3, #27521	; 0x6b81
   23fec:	movt	r3, #3
   23ff0:	movw	r2, #1774	; 0x6ee
   23ff4:	bl	14f40 <__assert_fail@plt>
   23ff8:	movw	r0, #28392	; 0x6ee8
   23ffc:	movt	r0, #3
   24000:	movw	r1, #23874	; 0x5d42
   24004:	movt	r1, #3
   24008:	movw	r3, #27521	; 0x6b81
   2400c:	movt	r3, #3
   24010:	movw	r2, #1784	; 0x6f8
   24014:	bl	14f40 <__assert_fail@plt>
   24018:	bx	lr

0002401c <flatcc_builder_table_add_union_vector@@Base>:
   2401c:	push	{r4, r5, r6, r7, fp, lr}
   24020:	add	fp, sp, #16
   24024:	mov	r6, r0
   24028:	ldr	r0, [r0, #32]
   2402c:	ldrh	r0, [r0, #14]
   24030:	cmp	r0, #3
   24034:	bne	240a0 <flatcc_builder_table_add_union_vector@@Base+0x84>
   24038:	mov	r4, r3
   2403c:	mov	r7, r2
   24040:	mov	r5, r1
   24044:	cmp	r2, #0
   24048:	mov	r0, r2
   2404c:	movwne	r0, #1
   24050:	clz	r1, r3
   24054:	lsr	r1, r1, #5
   24058:	teq	r1, r0
   2405c:	beq	240c0 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   24060:	cmp	r7, #0
   24064:	beq	24098 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   24068:	sub	r1, r5, #1
   2406c:	mov	r0, r6
   24070:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   24074:	cmp	r0, #0
   24078:	beq	240e0 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   2407c:	str	r7, [r0]
   24080:	mov	r0, r6
   24084:	mov	r1, r5
   24088:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   2408c:	cmp	r0, #0
   24090:	beq	24100 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   24094:	str	r4, [r0]
   24098:	mov	r0, #0
   2409c:	pop	{r4, r5, r6, r7, fp, pc}
   240a0:	movw	r0, #25943	; 0x6557
   240a4:	movt	r0, #3
   240a8:	movw	r1, #23874	; 0x5d42
   240ac:	movt	r1, #3
   240b0:	movw	r3, #26841	; 0x68d9
   240b4:	movt	r3, #3
   240b8:	mov	r2, #1536	; 0x600
   240bc:	bl	14f40 <__assert_fail@plt>
   240c0:	movw	r0, #26940	; 0x693c
   240c4:	movt	r0, #3
   240c8:	movw	r1, #23874	; 0x5d42
   240cc:	movt	r1, #3
   240d0:	movw	r3, #26841	; 0x68d9
   240d4:	movt	r3, #3
   240d8:	movw	r2, #1537	; 0x601
   240dc:	bl	14f40 <__assert_fail@plt>
   240e0:	movw	r0, #26819	; 0x68c3
   240e4:	movt	r0, #3
   240e8:	movw	r1, #23874	; 0x5d42
   240ec:	movt	r1, #3
   240f0:	movw	r3, #26841	; 0x68d9
   240f4:	movt	r3, #3
   240f8:	movw	r2, #1540	; 0x604
   240fc:	bl	14f40 <__assert_fail@plt>
   24100:	movw	r0, #26819	; 0x68c3
   24104:	movt	r0, #3
   24108:	movw	r1, #23874	; 0x5d42
   2410c:	movt	r1, #3
   24110:	movw	r3, #26841	; 0x68d9
   24114:	movt	r3, #3
   24118:	movw	r2, #1544	; 0x608
   2411c:	bl	14f40 <__assert_fail@plt>

00024120 <flatcc_builder_create_union_vector@@Base>:
   24120:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24124:	add	fp, sp, #24
   24128:	sub	sp, sp, #16
   2412c:	mov	r7, r3
   24130:	mov	r6, r2
   24134:	mov	r4, r1
   24138:	mov	r5, r0
   2413c:	mov	r0, #0
   24140:	str	r0, [r5]
   24144:	str	r0, [r5, #4]
   24148:	mov	r0, r1
   2414c:	bl	22ef8 <flatcc_builder_start_offset_vector@@Base>
   24150:	cmp	r0, #0
   24154:	beq	24160 <flatcc_builder_create_union_vector@@Base+0x40>
   24158:	sub	sp, fp, #24
   2415c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24160:	mov	r0, r4
   24164:	mov	r1, r7
   24168:	bl	22a44 <flatcc_builder_extend_offset_vector@@Base>
   2416c:	cmp	r0, #0
   24170:	beq	24158 <flatcc_builder_create_union_vector@@Base+0x38>
   24174:	mov	r0, r4
   24178:	mov	r1, r7
   2417c:	bl	227bc <flatcc_builder_start_struct@@Base+0x84>
   24180:	cmp	r0, #0
   24184:	beq	24158 <flatcc_builder_create_union_vector@@Base+0x38>
   24188:	mov	r8, r0
   2418c:	mov	r0, r4
   24190:	bl	23d54 <flatcc_builder_offset_vector_edit@@Base>
   24194:	mov	ip, r0
   24198:	cmp	r7, #0
   2419c:	beq	241cc <flatcc_builder_create_union_vector@@Base+0xac>
   241a0:	add	r0, r6, #4
   241a4:	mov	r1, r8
   241a8:	mov	r2, ip
   241ac:	mov	r6, r7
   241b0:	ldrb	r3, [r0, #-4]
   241b4:	strb	r3, [r1], #1
   241b8:	ldr	r3, [r0]
   241bc:	str	r3, [r2], #4
   241c0:	add	r0, r0, #8
   241c4:	subs	r6, r6, #1
   241c8:	bne	241b0 <flatcc_builder_create_union_vector@@Base+0x90>
   241cc:	str	r7, [sp]
   241d0:	add	r0, sp, #8
   241d4:	mov	r1, r4
   241d8:	mov	r2, r8
   241dc:	mov	r3, ip
   241e0:	bl	24200 <flatcc_builder_create_union_vector_direct@@Base>
   241e4:	ldr	r0, [sp, #8]
   241e8:	ldr	r1, [sp, #12]
   241ec:	stm	r5, {r0, r1}
   241f0:	mov	r0, r4
   241f4:	bl	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   241f8:	sub	sp, fp, #24
   241fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00024200 <flatcc_builder_create_union_vector_direct@@Base>:
   24200:	push	{r4, r5, r6, r7, fp, lr}
   24204:	add	fp, sp, #16
   24208:	sub	sp, sp, #8
   2420c:	mov	r5, r2
   24210:	mov	r6, r1
   24214:	mov	r4, r0
   24218:	mov	r0, #0
   2421c:	str	r0, [r4]
   24220:	str	r0, [r4, #4]
   24224:	ldr	r7, [fp, #8]
   24228:	mov	r0, r1
   2422c:	mov	r1, r3
   24230:	mov	r2, r7
   24234:	mov	r3, r5
   24238:	bl	23b3c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   2423c:	str	r0, [r4, #4]
   24240:	cmp	r0, #0
   24244:	beq	24270 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   24248:	mvn	r0, #0
   2424c:	mov	r1, #1
   24250:	str	r1, [sp]
   24254:	str	r0, [sp, #4]
   24258:	mov	r0, r6
   2425c:	mov	r1, r5
   24260:	mov	r2, r7
   24264:	mov	r3, #1
   24268:	bl	23994 <flatcc_builder_create_vector@@Base>
   2426c:	str	r0, [r4]
   24270:	sub	sp, fp, #16
   24274:	pop	{r4, r5, r6, r7, fp, pc}

00024278 <flatcc_builder_start_union_vector@@Base>:
   24278:	push	{r4, r5, fp, lr}
   2427c:	add	fp, sp, #8
   24280:	mov	r4, r0
   24284:	mov	r1, #4
   24288:	bl	2250c <flatcc_builder_start_buffer@@Base+0xbc>
   2428c:	mvn	r5, #0
   24290:	cmp	r0, #0
   24294:	beq	242a0 <flatcc_builder_start_union_vector@@Base+0x28>
   24298:	mov	r0, r5
   2429c:	pop	{r4, r5, fp, pc}
   242a0:	ldr	r0, [r4, #32]
   242a4:	mov	r1, #8
   242a8:	str	r1, [r0, #16]
   242ac:	ldr	r0, [r4, #32]
   242b0:	mov	r5, #0
   242b4:	str	r5, [r0, #20]
   242b8:	ldr	r0, [r4, #32]
   242bc:	mov	r1, #7
   242c0:	strh	r1, [r0, #14]
   242c4:	mov	r0, r4
   242c8:	mvn	r1, #3
   242cc:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   242d0:	mov	r0, r5
   242d4:	pop	{r4, r5, fp, pc}

000242d8 <flatcc_builder_end_union_vector@@Base>:
   242d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   242dc:	add	fp, sp, #24
   242e0:	sub	sp, sp, #16
   242e4:	mov	r9, r0
   242e8:	mov	r0, #0
   242ec:	str	r0, [r9]
   242f0:	str	r0, [r9, #4]
   242f4:	ldr	r0, [r1, #32]
   242f8:	ldrh	r0, [r0, #14]
   242fc:	cmp	r0, #7
   24300:	bne	243a0 <flatcc_builder_end_union_vector@@Base+0xc8>
   24304:	mov	r4, r1
   24308:	mov	r0, r1
   2430c:	bl	243c0 <flatcc_builder_union_vector_count@@Base>
   24310:	mov	r6, r0
   24314:	add	r1, r0, r0, lsl #2
   24318:	mov	r0, r4
   2431c:	bl	227bc <flatcc_builder_start_struct@@Base+0x84>
   24320:	cmp	r0, #0
   24324:	beq	24398 <flatcc_builder_end_union_vector@@Base+0xc0>
   24328:	mov	r7, r0
   2432c:	add	r8, r0, r6, lsl #2
   24330:	mov	r0, r4
   24334:	bl	243cc <flatcc_builder_union_vector_edit@@Base>
   24338:	cmp	r6, #0
   2433c:	beq	2436c <flatcc_builder_end_union_vector@@Base+0x94>
   24340:	add	r0, r0, #4
   24344:	mov	r1, r8
   24348:	mov	r2, r7
   2434c:	mov	r3, r6
   24350:	ldrb	r5, [r0, #-4]
   24354:	strb	r5, [r1], #1
   24358:	ldr	r5, [r0]
   2435c:	str	r5, [r2], #4
   24360:	add	r0, r0, #8
   24364:	subs	r3, r3, #1
   24368:	bne	24350 <flatcc_builder_end_union_vector@@Base+0x78>
   2436c:	str	r6, [sp]
   24370:	add	r0, sp, #8
   24374:	mov	r1, r4
   24378:	mov	r2, r8
   2437c:	mov	r3, r7
   24380:	bl	24200 <flatcc_builder_create_union_vector_direct@@Base>
   24384:	ldr	r0, [sp, #8]
   24388:	ldr	r1, [sp, #12]
   2438c:	stm	r9, {r0, r1}
   24390:	mov	r0, r4
   24394:	bl	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   24398:	sub	sp, fp, #24
   2439c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   243a0:	movw	r0, #26980	; 0x6964
   243a4:	movt	r0, #3
   243a8:	movw	r1, #23874	; 0x5d42
   243ac:	movt	r1, #3
   243b0:	movw	r3, #27030	; 0x6996
   243b4:	movt	r3, #3
   243b8:	movw	r2, #1617	; 0x651
   243bc:	bl	14f40 <__assert_fail@plt>

000243c0 <flatcc_builder_union_vector_count@@Base>:
   243c0:	ldr	r0, [r0, #32]
   243c4:	ldr	r0, [r0, #20]
   243c8:	bx	lr

000243cc <flatcc_builder_union_vector_edit@@Base>:
   243cc:	ldr	r0, [r0, #16]
   243d0:	bx	lr

000243d4 <flatcc_builder_extend_union_vector@@Base>:
   243d4:	push	{r4, r5, fp, lr}
   243d8:	add	fp, sp, #8
   243dc:	mov	r5, r1
   243e0:	mov	r4, r0
   243e4:	mvn	r2, #-536870912	; 0xe0000000
   243e8:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   243ec:	cmp	r0, #0
   243f0:	movne	r0, #0
   243f4:	popne	{r4, r5, fp, pc}
   243f8:	lsl	r1, r5, #3
   243fc:	mov	r0, r4
   24400:	pop	{r4, r5, fp, lr}
   24404:	b	227bc <flatcc_builder_start_struct@@Base+0x84>

00024408 <flatcc_builder_truncate_union_vector@@Base>:
   24408:	push	{fp, lr}
   2440c:	mov	fp, sp
   24410:	ldr	r2, [r0, #32]
   24414:	ldrh	r3, [r2, #14]
   24418:	cmp	r3, #7
   2441c:	bne	2444c <flatcc_builder_truncate_union_vector@@Base+0x44>
   24420:	ldr	r3, [r2, #20]
   24424:	cmp	r3, r1
   24428:	bcc	2446c <flatcc_builder_truncate_union_vector@@Base+0x64>
   2442c:	sub	r3, r3, r1
   24430:	str	r3, [r2, #20]
   24434:	ldr	r2, [r0, #32]
   24438:	ldr	r2, [r2, #16]
   2443c:	mul	r1, r2, r1
   24440:	bl	22d4c <flatcc_builder_truncate_vector@@Base+0x84>
   24444:	mov	r0, #0
   24448:	pop	{fp, pc}
   2444c:	movw	r0, #26980	; 0x6964
   24450:	movt	r0, #3
   24454:	movw	r1, #23874	; 0x5d42
   24458:	movt	r1, #3
   2445c:	movw	r3, #27113	; 0x69e9
   24460:	movt	r3, #3
   24464:	movw	r2, #1665	; 0x681
   24468:	bl	14f40 <__assert_fail@plt>
   2446c:	movw	r0, #25544	; 0x63c8
   24470:	movt	r0, #3
   24474:	movw	r1, #23874	; 0x5d42
   24478:	movt	r1, #3
   2447c:	movw	r3, #27113	; 0x69e9
   24480:	movt	r3, #3
   24484:	movw	r2, #1666	; 0x682
   24488:	bl	14f40 <__assert_fail@plt>

0002448c <flatcc_builder_union_vector_push@@Base>:
   2448c:	push	{r4, r5, r6, sl, fp, lr}
   24490:	add	fp, sp, #16
   24494:	mov	r4, r2
   24498:	mov	r5, r1
   2449c:	ldr	r1, [r0, #32]
   244a0:	ldrh	r2, [r1, #14]
   244a4:	cmp	r2, #7
   244a8:	bne	244e4 <flatcc_builder_union_vector_push@@Base+0x58>
   244ac:	ldr	r2, [r1, #20]
   244b0:	mov	r6, #0
   244b4:	cmn	r2, #-536870911	; 0xe0000001
   244b8:	beq	244dc <flatcc_builder_union_vector_push@@Base+0x50>
   244bc:	add	r2, r2, #1
   244c0:	str	r2, [r1, #20]
   244c4:	mov	r1, #8
   244c8:	bl	227bc <flatcc_builder_start_struct@@Base+0x84>
   244cc:	cmp	r0, #0
   244d0:	strne	r5, [r0]
   244d4:	strne	r4, [r0, #4]
   244d8:	movne	r6, r0
   244dc:	mov	r0, r6
   244e0:	pop	{r4, r5, r6, sl, fp, pc}
   244e4:	movw	r0, #26980	; 0x6964
   244e8:	movt	r0, #3
   244ec:	movw	r1, #23874	; 0x5d42
   244f0:	movt	r1, #3
   244f4:	movw	r3, #27182	; 0x6a2e
   244f8:	movt	r3, #3
   244fc:	movw	r2, #1677	; 0x68d
   24500:	bl	14f40 <__assert_fail@plt>

00024504 <flatcc_builder_append_union_vector@@Base>:
   24504:	push	{r4, r5, r6, sl, fp, lr}
   24508:	add	fp, sp, #16
   2450c:	mov	r6, r0
   24510:	ldr	r0, [r0, #32]
   24514:	ldrh	r0, [r0, #14]
   24518:	cmp	r0, #7
   2451c:	bne	2455c <flatcc_builder_append_union_vector@@Base+0x58>
   24520:	mov	r5, r2
   24524:	mov	r4, r1
   24528:	mov	r0, r6
   2452c:	mov	r1, r2
   24530:	mvn	r2, #-536870912	; 0xe0000000
   24534:	bl	228c0 <flatcc_builder_extend_vector@@Base+0x44>
   24538:	cmp	r0, #0
   2453c:	beq	24548 <flatcc_builder_append_union_vector@@Base+0x44>
   24540:	mov	r0, #0
   24544:	pop	{r4, r5, r6, sl, fp, pc}
   24548:	lsl	r2, r5, #3
   2454c:	mov	r0, r6
   24550:	mov	r1, r4
   24554:	pop	{r4, r5, r6, sl, fp, lr}
   24558:	b	22988 <flatcc_builder_vector_push@@Base+0x80>
   2455c:	movw	r0, #26980	; 0x6964
   24560:	movt	r0, #3
   24564:	movw	r1, #23874	; 0x5d42
   24568:	movt	r1, #3
   2456c:	movw	r3, #27291	; 0x6a9b
   24570:	movt	r3, #3
   24574:	movw	r2, #1692	; 0x69c
   24578:	bl	14f40 <__assert_fail@plt>

0002457c <flatcc_builder_create_string@@Base>:
   2457c:	push	{r4, r5, r6, r7, fp, lr}
   24580:	add	fp, sp, #16
   24584:	sub	sp, sp, #80	; 0x50
   24588:	mov	r5, r2
   2458c:	mov	r6, r1
   24590:	mov	r4, r0
   24594:	mov	r0, r2
   24598:	bl	22110 <flatcc_builder_embed_buffer@@Base+0x1dc>
   2459c:	str	r5, [fp, #-20]	; 0xffffffec
   245a0:	add	r1, r5, #1
   245a4:	mov	r7, #4
   245a8:	mov	r0, r4
   245ac:	mov	r2, #4
   245b0:	bl	220fc <flatcc_builder_embed_buffer@@Base+0x1c8>
   245b4:	str	r7, [sp, #16]
   245b8:	sub	r1, fp, #20
   245bc:	str	r1, [sp, #12]
   245c0:	str	r7, [sp, #4]
   245c4:	mov	r1, #1
   245c8:	str	r1, [sp, #8]
   245cc:	add	r0, r0, #1
   245d0:	cmp	r5, #0
   245d4:	strne	r5, [sp, #24]
   245d8:	strne	r6, [sp, #20]
   245dc:	movne	r1, #2
   245e0:	strne	r1, [sp, #8]
   245e4:	addne	r1, r5, #4
   245e8:	strne	r1, [sp, #4]
   245ec:	cmp	r0, #0
   245f0:	beq	24620 <flatcc_builder_create_string@@Base+0xa4>
   245f4:	ldmib	sp, {r1, r2}
   245f8:	add	r1, r1, r0
   245fc:	str	r1, [sp, #4]
   24600:	add	r1, sp, #4
   24604:	add	r1, r1, r2, lsl #3
   24608:	movw	r3, #23344	; 0x5b30
   2460c:	movt	r3, #3
   24610:	str	r3, [r1, #8]
   24614:	str	r0, [r1, #12]
   24618:	add	r0, r2, #1
   2461c:	str	r0, [sp, #8]
   24620:	add	r1, sp, #4
   24624:	mov	r0, r4
   24628:	bl	22114 <flatcc_builder_embed_buffer@@Base+0x1e0>
   2462c:	sub	sp, fp, #16
   24630:	pop	{r4, r5, r6, r7, fp, pc}

00024634 <flatcc_builder_create_string_str@@Base>:
   24634:	push	{r4, r5, fp, lr}
   24638:	add	fp, sp, #8
   2463c:	mov	r4, r1
   24640:	mov	r5, r0
   24644:	mov	r0, r1
   24648:	bl	14ec8 <strlen@plt>
   2464c:	mov	r2, r0
   24650:	mov	r0, r5
   24654:	mov	r1, r4
   24658:	pop	{r4, r5, fp, lr}
   2465c:	b	2457c <flatcc_builder_create_string@@Base>

00024660 <flatcc_builder_create_string_strn@@Base>:
   24660:	push	{r4, r5, fp, lr}
   24664:	add	fp, sp, #8
   24668:	mov	r4, r1
   2466c:	mov	r5, r0
   24670:	mov	r0, r1
   24674:	mov	r1, r2
   24678:	bl	22c9c <flatcc_builder_append_string_strn@@Base+0x30>
   2467c:	mov	r2, r0
   24680:	mov	r0, r5
   24684:	mov	r1, r4
   24688:	pop	{r4, r5, fp, lr}
   2468c:	b	2457c <flatcc_builder_create_string@@Base>

00024690 <flatcc_builder_end_string@@Base>:
   24690:	push	{r4, r5, fp, lr}
   24694:	add	fp, sp, #8
   24698:	mov	r4, r0
   2469c:	ldr	r0, [r0, #32]
   246a0:	ldrh	r1, [r0, #14]
   246a4:	cmp	r1, #6
   246a8:	bne	246e0 <flatcc_builder_end_string@@Base+0x50>
   246ac:	ldr	r2, [r4, #20]
   246b0:	ldr	r0, [r0, #20]
   246b4:	cmp	r0, r2
   246b8:	bne	24700 <flatcc_builder_end_string@@Base+0x70>
   246bc:	ldr	r1, [r4, #16]
   246c0:	mov	r0, r4
   246c4:	bl	2457c <flatcc_builder_create_string@@Base>
   246c8:	mov	r5, r0
   246cc:	cmp	r0, #0
   246d0:	movne	r0, r4
   246d4:	blne	226cc <flatcc_builder_end_buffer@@Base+0xc8>
   246d8:	mov	r0, r5
   246dc:	pop	{r4, r5, fp, pc}
   246e0:	movw	r0, #25191	; 0x6267
   246e4:	movt	r0, #3
   246e8:	movw	r1, #23874	; 0x5d42
   246ec:	movt	r1, #3
   246f0:	movw	r3, #27418	; 0x6b1a
   246f4:	movt	r3, #3
   246f8:	movw	r2, #1732	; 0x6c4
   246fc:	bl	14f40 <__assert_fail@plt>
   24700:	movw	r0, #27485	; 0x6b5d
   24704:	movt	r0, #3
   24708:	movw	r1, #23874	; 0x5d42
   2470c:	movt	r1, #3
   24710:	movw	r3, #27418	; 0x6b1a
   24714:	movt	r3, #3
   24718:	movw	r2, #1733	; 0x6c5
   2471c:	bl	14f40 <__assert_fail@plt>

00024720 <flatcc_builder_string_edit@@Base>:
   24720:	ldr	r0, [r0, #16]
   24724:	bx	lr

00024728 <flatcc_builder_string_len@@Base>:
   24728:	ldr	r0, [r0, #32]
   2472c:	ldr	r0, [r0, #20]
   24730:	bx	lr
   24734:	push	{r4, r5, r6, sl, fp, lr}
   24738:	add	fp, sp, #16
   2473c:	mov	r5, r3
   24740:	mov	r4, r0
   24744:	ldr	r0, [r0, #20]
   24748:	ldr	r3, [r4, #24]
   2474c:	add	r0, r2, r0
   24750:	sub	r0, r0, #1
   24754:	rsb	r2, r2, #0
   24758:	and	r6, r0, r2
   2475c:	add	r0, r6, r1
   24760:	str	r0, [r4, #20]
   24764:	cmp	r0, r3
   24768:	bcc	2478c <flatcc_builder_string_len@@Base+0x64>
   2476c:	add	r1, r0, #1
   24770:	mov	r0, r4
   24774:	movw	r2, #65532	; 0xfffc
   24778:	bl	24bd8 <flatcc_builder_get_emit_context@@Base+0x18>
   2477c:	mov	r1, r0
   24780:	mov	r0, #0
   24784:	cmp	r1, #0
   24788:	popne	{r4, r5, r6, sl, fp, pc}
   2478c:	ldr	r0, [r4, #4]
   24790:	add	r0, r0, r5, lsl #1
   24794:	add	r1, r6, #4
   24798:	strh	r1, [r0]
   2479c:	ldrh	r0, [r4, #8]
   247a0:	cmp	r0, r5
   247a4:	addls	r0, r5, #1
   247a8:	strhls	r0, [r4, #8]
   247ac:	ldr	r0, [r4, #16]
   247b0:	add	r0, r0, r6
   247b4:	pop	{r4, r5, r6, sl, fp, pc}

000247b8 <flatcc_builder_table_edit@@Base>:
   247b8:	push	{fp, lr}
   247bc:	mov	fp, sp
   247c0:	ldr	r2, [r0, #32]
   247c4:	ldrh	r2, [r2, #14]
   247c8:	cmp	r2, #3
   247cc:	ldreq	r2, [r0, #16]
   247d0:	ldreq	r0, [r0, #20]
   247d4:	addeq	r0, r2, r0
   247d8:	subeq	r0, r0, r1
   247dc:	popeq	{fp, pc}
   247e0:	movw	r0, #25943	; 0x6557
   247e4:	movt	r0, #3
   247e8:	movw	r1, #23874	; 0x5d42
   247ec:	movt	r1, #3
   247f0:	movw	r3, #27663	; 0x6c0f
   247f4:	movt	r3, #3
   247f8:	movw	r2, #1794	; 0x702
   247fc:	bl	14f40 <__assert_fail@plt>

00024800 <flatcc_builder_table_add_copy@@Base>:
   24800:	push	{r4, r5, r6, sl, fp, lr}
   24804:	add	fp, sp, #16
   24808:	mov	r4, r3
   2480c:	mov	r5, r2
   24810:	ldr	r3, [fp, #8]
   24814:	mov	r2, r4
   24818:	bl	23f38 <flatcc_builder_table_add@@Base>
   2481c:	mov	r6, r0
   24820:	cmp	r0, #0
   24824:	beq	24838 <flatcc_builder_table_add_copy@@Base+0x38>
   24828:	mov	r0, r6
   2482c:	mov	r1, r5
   24830:	mov	r2, r4
   24834:	bl	14e5c <memcpy@plt>
   24838:	mov	r0, r6
   2483c:	pop	{r4, r5, r6, sl, fp, pc}
   24840:	push	{r4, r5, r6, r7, fp, lr}
   24844:	add	fp, sp, #16
   24848:	mov	r5, r1
   2484c:	mov	r4, r0
   24850:	ldr	r0, [r0, #20]
   24854:	ldr	r1, [r4, #24]
   24858:	add	r0, r0, #3
   2485c:	bic	r7, r0, #3
   24860:	add	r6, r7, #4
   24864:	str	r6, [r4, #20]
   24868:	cmp	r6, r1
   2486c:	bls	24890 <flatcc_builder_table_add_copy@@Base+0x90>
   24870:	mov	r0, r4
   24874:	mov	r1, r6
   24878:	movw	r2, #65532	; 0xfffc
   2487c:	bl	24bd8 <flatcc_builder_get_emit_context@@Base+0x18>
   24880:	mov	r1, r0
   24884:	mov	r0, #0
   24888:	cmp	r1, #0
   2488c:	popne	{r4, r5, r6, r7, fp, pc}
   24890:	ldr	r0, [r4, #4]
   24894:	add	r0, r0, r5, lsl #1
   24898:	strh	r6, [r0]
   2489c:	ldrh	r0, [r4, #8]
   248a0:	cmp	r0, r5
   248a4:	addls	r0, r5, #1
   248a8:	strhls	r0, [r4, #8]
   248ac:	ldr	r0, [r4]
   248b0:	add	r1, r0, #2
   248b4:	str	r1, [r4]
   248b8:	strh	r7, [r0]
   248bc:	ldr	r0, [r4, #16]
   248c0:	add	r0, r0, r7
   248c4:	pop	{r4, r5, r6, r7, fp, pc}

000248c8 <flatcc_builder_push_buffer_alignment@@Base>:
   248c8:	ldrh	r1, [r0, #128]	; 0x80
   248cc:	mov	r2, #4
   248d0:	strh	r2, [r0, #128]	; 0x80
   248d4:	mov	r0, r1
   248d8:	bx	lr

000248dc <flatcc_builder_pop_buffer_alignment@@Base>:
   248dc:	b	22374 <flatcc_builder_create_buffer@@Base+0x1cc>

000248e0 <flatcc_builder_get_buffer_alignment@@Base>:
   248e0:	ldrh	r0, [r0, #128]	; 0x80
   248e4:	bx	lr

000248e8 <flatcc_builder_set_vtable_clustering@@Base>:
   248e8:	clz	r1, r1
   248ec:	lsr	r1, r1, #5
   248f0:	str	r1, [r0, #180]	; 0xb4
   248f4:	bx	lr

000248f8 <flatcc_builder_set_block_align@@Base>:
   248f8:	strh	r1, [r0, #132]	; 0x84
   248fc:	bx	lr

00024900 <flatcc_builder_get_level@@Base>:
   24900:	ldr	r0, [r0, #156]	; 0x9c
   24904:	bx	lr

00024908 <flatcc_builder_set_max_level@@Base>:
   24908:	str	r1, [r0, #176]	; 0xb0
   2490c:	ldr	r2, [r0, #160]	; 0xa0
   24910:	cmp	r2, r1
   24914:	strlt	r1, [r0, #160]	; 0xa0
   24918:	bx	lr

0002491c <flatcc_builder_get_buffer_size@@Base>:
   2491c:	ldr	r1, [r0, #136]	; 0x88
   24920:	ldr	r0, [r0, #140]	; 0x8c
   24924:	sub	r0, r0, r1
   24928:	bx	lr

0002492c <flatcc_builder_get_buffer_start@@Base>:
   2492c:	ldr	r0, [r0, #136]	; 0x88
   24930:	bx	lr

00024934 <flatcc_builder_get_buffer_end@@Base>:
   24934:	ldr	r0, [r0, #140]	; 0x8c
   24938:	bx	lr

0002493c <flatcc_builder_set_vtable_cache_limit@@Base>:
   2493c:	str	r1, [r0, #172]	; 0xac
   24940:	bx	lr

00024944 <flatcc_builder_set_identifier@@Base>:
   24944:	movw	r2, #23344	; 0x5b30
   24948:	movt	r2, #3
   2494c:	cmp	r1, #0
   24950:	movne	r2, r1
   24954:	ldr	r1, [r2]
   24958:	str	r1, [r0, #168]	; 0xa8
   2495c:	bx	lr

00024960 <flatcc_builder_get_type@@Base>:
   24960:	ldr	r0, [r0, #32]
   24964:	cmp	r0, #0
   24968:	ldrhne	r0, [r0, #14]
   2496c:	moveq	r0, #0
   24970:	bx	lr

00024974 <flatcc_builder_get_type_at@@Base>:
   24974:	mov	r2, r0
   24978:	mov	r0, #0
   2497c:	cmp	r1, #1
   24980:	blt	249a4 <flatcc_builder_get_type_at@@Base+0x30>
   24984:	ldr	r3, [r2, #156]	; 0x9c
   24988:	cmp	r3, r1
   2498c:	bxlt	lr
   24990:	sub	r0, r1, r3
   24994:	add	r0, r0, r0, lsl #3
   24998:	ldr	r1, [r2, #32]
   2499c:	add	r0, r1, r0, lsl #2
   249a0:	ldrh	r0, [r0, #14]
   249a4:	bx	lr

000249a8 <flatcc_builder_get_direct_buffer@@Base>:
   249a8:	ldr	r2, [r0, #184]	; 0xb8
   249ac:	cmp	r2, #0
   249b0:	beq	249bc <flatcc_builder_get_direct_buffer@@Base+0x14>
   249b4:	add	r0, r0, #188	; 0xbc
   249b8:	b	249d0 <flatcc_builder_get_direct_buffer@@Base+0x28>
   249bc:	cmp	r1, #0
   249c0:	movne	r0, #0
   249c4:	strne	r0, [r1]
   249c8:	mov	r0, #0
   249cc:	bx	lr
   249d0:	ldm	r0, {r2, r3}
   249d4:	cmp	r2, r3
   249d8:	beq	249ec <flatcc_builder_get_direct_buffer@@Base+0x44>
   249dc:	mov	r0, #0
   249e0:	cmp	r1, #0
   249e4:	strne	r0, [r1]
   249e8:	bx	lr
   249ec:	cmp	r1, #0
   249f0:	ldrne	r2, [r0, #24]
   249f4:	strne	r2, [r1]
   249f8:	ldr	r0, [r0, #8]
   249fc:	bx	lr

00024a00 <flatcc_builder_copy_buffer@@Base>:
   24a00:	push	{fp, lr}
   24a04:	mov	fp, sp
   24a08:	ldr	r3, [r0, #184]	; 0xb8
   24a0c:	cmp	r3, #0
   24a10:	beq	24a44 <flatcc_builder_copy_buffer@@Base+0x44>
   24a14:	add	r0, r0, #188	; 0xbc
   24a18:	bl	25110 <flatcc_emitter_copy_buffer@@Base>
   24a1c:	cmp	r0, #0
   24a20:	popne	{fp, pc}
   24a24:	movw	r0, #8279	; 0x2057
   24a28:	movt	r0, #3
   24a2c:	movw	r1, #23874	; 0x5d42
   24a30:	movt	r1, #3
   24a34:	movw	r3, #27802	; 0x6c9a
   24a38:	movt	r3, #3
   24a3c:	movw	r2, #1926	; 0x786
   24a40:	bl	14f40 <__assert_fail@plt>
   24a44:	mov	r0, #0
   24a48:	pop	{fp, pc}

00024a4c <flatcc_builder_finalize_buffer@@Base>:
   24a4c:	push	{r4, r5, r6, sl, fp, lr}
   24a50:	add	fp, sp, #16
   24a54:	mov	r6, r1
   24a58:	mov	r4, r0
   24a5c:	bl	2491c <flatcc_builder_get_buffer_size@@Base>
   24a60:	mov	r5, r0
   24a64:	cmp	r6, #0
   24a68:	strne	r5, [r6]
   24a6c:	mov	r0, r5
   24a70:	bl	14e98 <malloc@plt>
   24a74:	cmp	r0, #0
   24a78:	beq	24abc <flatcc_builder_finalize_buffer@@Base+0x70>
   24a7c:	mov	r6, r0
   24a80:	mov	r0, r4
   24a84:	mov	r1, r6
   24a88:	mov	r2, r5
   24a8c:	bl	24a00 <flatcc_builder_copy_buffer@@Base>
   24a90:	cmp	r0, #0
   24a94:	movne	r0, r6
   24a98:	popne	{r4, r5, r6, sl, fp, pc}
   24a9c:	movw	r0, #28392	; 0x6ee8
   24aa0:	movt	r0, #3
   24aa4:	movw	r1, #23874	; 0x5d42
   24aa8:	movt	r1, #3
   24aac:	movw	r3, #27871	; 0x6cdf
   24ab0:	movt	r3, #3
   24ab4:	movw	r2, #1948	; 0x79c
   24ab8:	bl	14f40 <__assert_fail@plt>
   24abc:	movw	r0, #28392	; 0x6ee8
   24ac0:	movt	r0, #3
   24ac4:	movw	r1, #23874	; 0x5d42
   24ac8:	movt	r1, #3
   24acc:	movw	r3, #27871	; 0x6cdf
   24ad0:	movt	r3, #3
   24ad4:	movw	r2, #1944	; 0x798
   24ad8:	bl	14f40 <__assert_fail@plt>

00024adc <flatcc_builder_finalize_aligned_buffer@@Base>:
   24adc:	push	{r4, r5, r6, r7, fp, lr}
   24ae0:	add	fp, sp, #16
   24ae4:	mov	r4, r1
   24ae8:	mov	r5, r0
   24aec:	bl	2491c <flatcc_builder_get_buffer_size@@Base>
   24af0:	mov	r6, r0
   24af4:	cmp	r4, #0
   24af8:	strne	r6, [r4]
   24afc:	mov	r0, r5
   24b00:	bl	248e0 <flatcc_builder_get_buffer_alignment@@Base>
   24b04:	add	r1, r6, r0
   24b08:	sub	r1, r1, #1
   24b0c:	rsb	r2, r0, #0
   24b10:	and	r7, r1, r2
   24b14:	mov	r1, r7
   24b18:	bl	24b64 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   24b1c:	cmp	r0, #0
   24b20:	beq	24b50 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   24b24:	mov	r6, r0
   24b28:	mov	r0, r5
   24b2c:	mov	r1, r6
   24b30:	mov	r2, r7
   24b34:	bl	24a00 <flatcc_builder_copy_buffer@@Base>
   24b38:	cmp	r0, #0
   24b3c:	beq	24b48 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   24b40:	mov	r0, r6
   24b44:	pop	{r4, r5, r6, r7, fp, pc}
   24b48:	mov	r0, r6
   24b4c:	bl	14e50 <free@plt>
   24b50:	mov	r6, #0
   24b54:	cmp	r4, #0
   24b58:	strne	r6, [r4]
   24b5c:	mov	r0, r6
   24b60:	pop	{r4, r5, r6, r7, fp, pc}
   24b64:	push	{fp, lr}
   24b68:	mov	fp, sp
   24b6c:	sub	sp, sp, #8
   24b70:	mov	r2, r1
   24b74:	mov	r1, r0
   24b78:	mov	r0, #0
   24b7c:	str	r0, [sp, #4]
   24b80:	cmp	r1, #4
   24b84:	movls	r1, #4
   24b88:	add	r0, sp, #4
   24b8c:	bl	14ee0 <posix_memalign@plt>
   24b90:	cmp	r0, #0
   24b94:	ldrne	r0, [sp, #4]
   24b98:	cmpne	r0, #0
   24b9c:	beq	24bac <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   24ba0:	bl	14e50 <free@plt>
   24ba4:	mov	r0, #0
   24ba8:	str	r0, [sp, #4]
   24bac:	ldr	r0, [sp, #4]
   24bb0:	mov	sp, fp
   24bb4:	pop	{fp, pc}

00024bb8 <flatcc_builder_aligned_alloc@@Base>:
   24bb8:	b	24b64 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00024bbc <flatcc_builder_aligned_free@@Base>:
   24bbc:	b	14e50 <free@plt>

00024bc0 <flatcc_builder_get_emit_context@@Base>:
   24bc0:	ldr	r0, [r0, #36]	; 0x24
   24bc4:	bx	lr
   24bc8:	ldr	r0, [r0, #140]	; 0x8c
   24bcc:	sub	r1, r1, #1
   24bd0:	and	r0, r0, r1
   24bd4:	bx	lr
   24bd8:	push	{r4, r5, r6, sl, fp, lr}
   24bdc:	add	fp, sp, #16
   24be0:	sub	sp, sp, #8
   24be4:	mov	r6, r2
   24be8:	mov	r5, r0
   24bec:	ldr	r2, [r0, #28]
   24bf0:	ldr	r0, [r0, #40]	; 0x28
   24bf4:	ldr	r4, [r5, #48]	; 0x30
   24bf8:	mov	r3, #1
   24bfc:	str	r3, [sp]
   24c00:	add	r2, r2, r1
   24c04:	add	r1, r5, #60	; 0x3c
   24c08:	mov	r3, #1
   24c0c:	blx	r4
   24c10:	mov	r1, r0
   24c14:	mvn	r0, #0
   24c18:	cmp	r1, #0
   24c1c:	beq	24c28 <flatcc_builder_get_emit_context@@Base+0x68>
   24c20:	sub	sp, fp, #16
   24c24:	pop	{r4, r5, r6, sl, fp, pc}
   24c28:	mov	r0, r5
   24c2c:	mov	r1, r6
   24c30:	bl	22784 <flatcc_builder_start_struct@@Base+0x4c>
   24c34:	mov	r0, #0
   24c38:	sub	sp, fp, #16
   24c3c:	pop	{r4, r5, r6, sl, fp, pc}
   24c40:	push	{r4, r5, r6, sl, fp, lr}
   24c44:	add	fp, sp, #16
   24c48:	sub	sp, sp, #8
   24c4c:	mov	r4, r0
   24c50:	ldr	r0, [r0, #124]	; 0x7c
   24c54:	cmp	r0, #0
   24c58:	bne	24cf8 <flatcc_builder_get_emit_context@@Base+0x138>
   24c5c:	mov	r0, #0
   24c60:	str	r0, [sp]
   24c64:	mov	r6, #16
   24c68:	mov	r0, r4
   24c6c:	mov	r1, #6
   24c70:	mov	r2, #0
   24c74:	mov	r3, #16
   24c78:	bl	21da0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   24c7c:	mvn	r5, #0
   24c80:	cmp	r0, #0
   24c84:	beq	24cec <flatcc_builder_get_emit_context@@Base+0x12c>
   24c88:	add	r1, r4, #92	; 0x5c
   24c8c:	str	r6, [r4, #124]	; 0x7c
   24c90:	ldr	r0, [r4, #40]	; 0x28
   24c94:	ldr	ip, [r4, #48]	; 0x30
   24c98:	mov	r2, #5
   24c9c:	str	r2, [sp]
   24ca0:	mov	r6, #256	; 0x100
   24ca4:	mov	r2, #256	; 0x100
   24ca8:	mov	r3, #1
   24cac:	blx	ip
   24cb0:	cmp	r0, #0
   24cb4:	bne	24cec <flatcc_builder_get_emit_context@@Base+0x12c>
   24cb8:	ldr	r0, [r4, #96]	; 0x60
   24cbc:	mov	r1, r6
   24cc0:	lsl	r6, r6, #1
   24cc4:	cmp	r0, r1, lsl #1
   24cc8:	bcs	24cbc <flatcc_builder_get_emit_context@@Base+0xfc>
   24ccc:	lsr	r1, r1, #2
   24cd0:	mvn	r0, #0
   24cd4:	mov	r2, #1
   24cd8:	add	r0, r0, #1
   24cdc:	cmp	r1, r2, lsl r0
   24ce0:	bhi	24cd8 <flatcc_builder_get_emit_context@@Base+0x118>
   24ce4:	str	r0, [r4, #116]	; 0x74
   24ce8:	mov	r5, #0
   24cec:	mov	r0, r5
   24cf0:	sub	sp, fp, #16
   24cf4:	pop	{r4, r5, r6, sl, fp, pc}
   24cf8:	movw	r0, #28332	; 0x6eac
   24cfc:	movt	r0, #3
   24d00:	movw	r1, #23874	; 0x5d42
   24d04:	movt	r1, #3
   24d08:	movw	r3, #28347	; 0x6ebb
   24d0c:	movt	r3, #3
   24d10:	movw	r2, #342	; 0x156
   24d14:	bl	14f40 <__assert_fail@plt>

00024d18 <flatcc_emitter_recycle_page@@Base>:
   24d18:	ldr	ip, [r0]
   24d1c:	mvn	r2, #0
   24d20:	cmp	ip, r1
   24d24:	beq	24d6c <flatcc_emitter_recycle_page@@Base+0x54>
   24d28:	ldr	r3, [r0, #4]
   24d2c:	cmp	r3, r1
   24d30:	beq	24d6c <flatcc_emitter_recycle_page@@Base+0x54>
   24d34:	ldr	r2, [r1, #2944]	; 0xb80
   24d38:	ldr	r3, [r1, #2948]	; 0xb84
   24d3c:	str	r3, [r2, #2948]	; 0xb84
   24d40:	ldr	r2, [r1, #2944]	; 0xb80
   24d44:	ldr	r3, [r1, #2948]	; 0xb84
   24d48:	str	r2, [r3, #2944]	; 0xb80
   24d4c:	ldr	r2, [ip, #2948]	; 0xb84
   24d50:	str	r2, [r1, #2948]	; 0xb84
   24d54:	ldr	r0, [r0]
   24d58:	str	r0, [r1, #2944]	; 0xb80
   24d5c:	str	r1, [r2, #2944]	; 0xb80
   24d60:	ldr	r0, [r1, #2944]	; 0xb80
   24d64:	str	r1, [r0, #2948]	; 0xb84
   24d68:	mov	r2, #0
   24d6c:	mov	r0, r2
   24d70:	bx	lr

00024d74 <flatcc_emitter_reset@@Base>:
   24d74:	push	{r4, sl, fp, lr}
   24d78:	add	fp, sp, #8
   24d7c:	mov	r4, r0
   24d80:	ldr	r0, [r0]
   24d84:	cmp	r0, #0
   24d88:	beq	24e30 <flatcc_emitter_reset@@Base+0xbc>
   24d8c:	mov	r1, #1472	; 0x5c0
   24d90:	add	r2, r0, #1472	; 0x5c0
   24d94:	stmib	r4, {r0, r2}
   24d98:	str	r1, [r4, #12]
   24d9c:	str	r2, [r4, #16]
   24da0:	str	r1, [r4, #20]
   24da4:	movw	r1, #64064	; 0xfa40
   24da8:	movt	r1, #65535	; 0xffff
   24dac:	str	r1, [r0, #2952]	; 0xb88
   24db0:	ldr	r0, [r4, #32]
   24db4:	cmp	r0, #0
   24db8:	bne	24dc4 <flatcc_emitter_reset@@Base+0x50>
   24dbc:	ldr	r0, [r4, #24]
   24dc0:	str	r0, [r4, #32]
   24dc4:	add	r2, r4, #24
   24dc8:	ldm	r2, {r0, r1, r2}
   24dcc:	mov	r3, #0
   24dd0:	str	r3, [r4, #24]
   24dd4:	add	r2, r2, r2, lsl #1
   24dd8:	lsr	r2, r2, #2
   24ddc:	add	r0, r2, r0, lsr #2
   24de0:	str	r0, [r4, #32]
   24de4:	cmp	r1, r0, lsl #1
   24de8:	popls	{r4, sl, fp, pc}
   24dec:	ldr	r2, [r4]
   24df0:	ldr	r1, [r4, #4]
   24df4:	ldr	r0, [r1, #2944]	; 0xb80
   24df8:	cmp	r0, r2
   24dfc:	beq	24e30 <flatcc_emitter_reset@@Base+0xbc>
   24e00:	ldr	r2, [r0, #2944]	; 0xb80
   24e04:	str	r2, [r1, #2944]	; 0xb80
   24e08:	ldr	r1, [r0, #2944]	; 0xb80
   24e0c:	ldr	r2, [r4, #4]
   24e10:	str	r2, [r1, #2948]	; 0xb84
   24e14:	bl	14e50 <free@plt>
   24e18:	ldr	r0, [r4, #28]
   24e1c:	ldr	r1, [r4, #32]
   24e20:	sub	r0, r0, #2944	; 0xb80
   24e24:	str	r0, [r4, #28]
   24e28:	cmp	r0, r1, lsl #1
   24e2c:	bhi	24dec <flatcc_emitter_reset@@Base+0x78>
   24e30:	pop	{r4, sl, fp, pc}

00024e34 <flatcc_emitter_clear@@Base>:
   24e34:	push	{r4, r5, r6, sl, fp, lr}
   24e38:	add	fp, sp, #16
   24e3c:	ldr	r5, [r0]
   24e40:	cmp	r5, #0
   24e44:	beq	24e94 <flatcc_emitter_clear@@Base+0x60>
   24e48:	mov	r4, r0
   24e4c:	ldr	r0, [r5, #2948]	; 0xb84
   24e50:	mov	r6, #0
   24e54:	str	r6, [r0, #2944]	; 0xb80
   24e58:	ldr	r0, [r5, #2944]	; 0xb80
   24e5c:	cmp	r0, #0
   24e60:	beq	24e74 <flatcc_emitter_clear@@Base+0x40>
   24e64:	mov	r5, r0
   24e68:	ldr	r0, [r0, #2948]	; 0xb84
   24e6c:	bl	14e50 <free@plt>
   24e70:	b	24e58 <flatcc_emitter_clear@@Base+0x24>
   24e74:	mov	r0, r5
   24e78:	bl	14e50 <free@plt>
   24e7c:	vmov.i32	q8, #0	; 0x00000000
   24e80:	add	r0, r4, #16
   24e84:	vst1.32	{d16-d17}, [r0]
   24e88:	mov	r0, #32
   24e8c:	vst1.32	{d16-d17}, [r4], r0
   24e90:	str	r6, [r4]
   24e94:	pop	{r4, r5, r6, sl, fp, pc}

00024e98 <flatcc_emitter@@Base>:
   24e98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24e9c:	add	fp, sp, #24
   24ea0:	mov	r4, r2
   24ea4:	mov	r5, r1
   24ea8:	mov	r6, r0
   24eac:	ldr	r1, [r0, #24]
   24eb0:	ldr	r0, [fp, #8]
   24eb4:	add	r1, r1, r0
   24eb8:	str	r1, [r6, #24]
   24ebc:	mov	r1, r6
   24ec0:	cmn	r3, #1
   24ec4:	ble	24f04 <flatcc_emitter@@Base+0x6c>
   24ec8:	ldr	r2, [r1, #20]!
   24ecc:	cmp	r2, r0
   24ed0:	bcs	24f4c <flatcc_emitter@@Base+0xb4>
   24ed4:	mov	r8, #0
   24ed8:	cmp	r4, #0
   24edc:	beq	24f9c <flatcc_emitter@@Base+0x104>
   24ee0:	ldm	r5, {r1, r2}
   24ee4:	mov	r0, r6
   24ee8:	bl	25060 <flatcc_emitter@@Base+0x1c8>
   24eec:	cmp	r0, #0
   24ef0:	bne	24f40 <flatcc_emitter@@Base+0xa8>
   24ef4:	subs	r4, r4, #1
   24ef8:	add	r5, r5, #8
   24efc:	bne	24ee0 <flatcc_emitter@@Base+0x48>
   24f00:	b	24f9c <flatcc_emitter@@Base+0x104>
   24f04:	ldr	r2, [r1, #12]!
   24f08:	cmp	r2, r0
   24f0c:	bcs	24f5c <flatcc_emitter@@Base+0xc4>
   24f10:	add	r0, r5, r4, lsl #3
   24f14:	sub	r5, r0, #4
   24f18:	rsb	r4, r4, #1
   24f1c:	cmp	r4, #1
   24f20:	beq	24fa4 <flatcc_emitter@@Base+0x10c>
   24f24:	ldmda	r5, {r1, r2}
   24f28:	mov	r0, r6
   24f2c:	bl	24fb0 <flatcc_emitter@@Base+0x118>
   24f30:	sub	r5, r5, #8
   24f34:	add	r4, r4, #1
   24f38:	cmp	r0, #0
   24f3c:	beq	24f1c <flatcc_emitter@@Base+0x84>
   24f40:	mvn	r8, #0
   24f44:	mov	r0, r8
   24f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24f4c:	ldr	r7, [r6, #16]
   24f50:	add	r3, r7, r0
   24f54:	str	r3, [r6, #16]
   24f58:	b	24f68 <flatcc_emitter@@Base+0xd0>
   24f5c:	ldr	r3, [r6, #8]
   24f60:	sub	r7, r3, r0
   24f64:	str	r7, [r6, #8]
   24f68:	sub	r0, r2, r0
   24f6c:	str	r0, [r1]
   24f70:	mov	r8, #0
   24f74:	cmp	r4, #0
   24f78:	beq	24f9c <flatcc_emitter@@Base+0x104>
   24f7c:	ldm	r5, {r1, r2}
   24f80:	mov	r0, r7
   24f84:	bl	14e5c <memcpy@plt>
   24f88:	ldr	r0, [r5, #4]
   24f8c:	add	r7, r7, r0
   24f90:	add	r5, r5, #8
   24f94:	subs	r4, r4, #1
   24f98:	bne	24f7c <flatcc_emitter@@Base+0xe4>
   24f9c:	mov	r0, r8
   24fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24fa4:	mov	r8, #0
   24fa8:	mov	r0, r8
   24fac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24fb0:	push	{r4, r5, r6, r7, fp, lr}
   24fb4:	add	fp, sp, #16
   24fb8:	cmp	r2, #0
   24fbc:	beq	2504c <flatcc_emitter@@Base+0x1b4>
   24fc0:	mov	r4, r2
   24fc4:	mov	r5, r0
   24fc8:	clz	r0, r2
   24fcc:	lsr	r7, r0, #5
   24fd0:	add	r6, r1, r2
   24fd4:	ldr	r0, [r5, #12]
   24fd8:	cmp	r4, r0
   24fdc:	bls	2500c <flatcc_emitter@@Base+0x174>
   24fe0:	cmp	r0, #0
   24fe4:	bne	25014 <flatcc_emitter@@Base+0x17c>
   24fe8:	mov	r0, r5
   24fec:	bl	251cc <flatcc_emitter_copy_buffer@@Base+0xbc>
   24ff0:	cmp	r0, #0
   24ff4:	mov	r1, r0
   24ff8:	movwne	r1, #1
   24ffc:	orr	r1, r1, r7
   25000:	tst	r1, #1
   25004:	beq	24fd4 <flatcc_emitter@@Base+0x13c>
   25008:	b	25054 <flatcc_emitter@@Base+0x1bc>
   2500c:	mov	r7, r4
   25010:	b	25018 <flatcc_emitter@@Base+0x180>
   25014:	mov	r7, r0
   25018:	sub	r0, r0, r7
   2501c:	str	r0, [r5, #12]
   25020:	ldr	r0, [r5, #8]
   25024:	sub	r0, r0, r7
   25028:	str	r0, [r5, #8]
   2502c:	sub	r6, r6, r7
   25030:	mov	r1, r6
   25034:	mov	r2, r7
   25038:	bl	14e5c <memcpy@plt>
   2503c:	subs	r4, r4, r7
   25040:	clz	r0, r4
   25044:	lsr	r7, r0, #5
   25048:	bne	24fd4 <flatcc_emitter@@Base+0x13c>
   2504c:	mov	r0, #0
   25050:	pop	{r4, r5, r6, r7, fp, pc}
   25054:	cmp	r0, #0
   25058:	mvnne	r0, #0
   2505c:	pop	{r4, r5, r6, r7, fp, pc}
   25060:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   25064:	add	fp, sp, #24
   25068:	cmp	r2, #0
   2506c:	beq	250fc <flatcc_emitter@@Base+0x264>
   25070:	mov	r4, r2
   25074:	mov	r8, r1
   25078:	mov	r6, r0
   2507c:	clz	r0, r2
   25080:	lsr	r5, r0, #5
   25084:	ldr	r7, [r6, #20]
   25088:	cmp	r4, r7
   2508c:	bls	250bc <flatcc_emitter@@Base+0x224>
   25090:	cmp	r7, #0
   25094:	bne	250c0 <flatcc_emitter@@Base+0x228>
   25098:	mov	r0, r6
   2509c:	bl	252bc <flatcc_emitter_copy_buffer@@Base+0x1ac>
   250a0:	cmp	r0, #0
   250a4:	mov	r1, r0
   250a8:	movwne	r1, #1
   250ac:	orr	r1, r1, r5
   250b0:	tst	r1, #1
   250b4:	beq	25084 <flatcc_emitter@@Base+0x1ec>
   250b8:	b	25104 <flatcc_emitter@@Base+0x26c>
   250bc:	mov	r7, r4
   250c0:	ldr	r0, [r6, #16]
   250c4:	mov	r1, r8
   250c8:	mov	r2, r7
   250cc:	bl	14e5c <memcpy@plt>
   250d0:	ldr	r0, [r6, #16]
   250d4:	ldr	r1, [r6, #20]
   250d8:	add	r0, r0, r7
   250dc:	sub	r1, r1, r7
   250e0:	str	r0, [r6, #16]
   250e4:	str	r1, [r6, #20]
   250e8:	add	r8, r8, r7
   250ec:	subs	r4, r4, r7
   250f0:	clz	r0, r4
   250f4:	lsr	r5, r0, #5
   250f8:	bne	25084 <flatcc_emitter@@Base+0x1ec>
   250fc:	mov	r0, #0
   25100:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25104:	cmp	r0, #0
   25108:	mvnne	r0, #0
   2510c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00025110 <flatcc_emitter_copy_buffer@@Base>:
   25110:	push	{r4, r5, r6, sl, fp, lr}
   25114:	add	fp, sp, #16
   25118:	mov	r3, r2
   2511c:	ldr	r2, [r0, #24]
   25120:	mov	r5, #0
   25124:	cmp	r2, r3
   25128:	bhi	251b0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   2512c:	mov	r4, r0
   25130:	ldr	r0, [r0]
   25134:	cmp	r0, #0
   25138:	beq	251b0 <flatcc_emitter_copy_buffer@@Base+0xa0>
   2513c:	mov	r6, r1
   25140:	ldr	r1, [r4, #4]
   25144:	cmp	r0, r1
   25148:	beq	251b8 <flatcc_emitter_copy_buffer@@Base+0xa8>
   2514c:	ldr	r1, [r4, #8]
   25150:	ldr	r0, [r4, #12]
   25154:	rsb	r5, r0, #2944	; 0xb80
   25158:	mov	r0, r6
   2515c:	mov	r2, r5
   25160:	bl	14e5c <memcpy@plt>
   25164:	add	r5, r6, r5
   25168:	ldm	r4, {r0, r1}
   2516c:	ldr	r6, [r0, #2944]	; 0xb80
   25170:	cmp	r6, r1
   25174:	beq	2519c <flatcc_emitter_copy_buffer@@Base+0x8c>
   25178:	mov	r0, r5
   2517c:	mov	r1, r6
   25180:	mov	r2, #2944	; 0xb80
   25184:	bl	14e5c <memcpy@plt>
   25188:	add	r5, r5, #2944	; 0xb80
   2518c:	ldr	r6, [r6, #2944]	; 0xb80
   25190:	ldr	r0, [r4, #4]
   25194:	cmp	r6, r0
   25198:	bne	25178 <flatcc_emitter_copy_buffer@@Base+0x68>
   2519c:	ldr	r0, [r4, #20]
   251a0:	rsb	r2, r0, #2944	; 0xb80
   251a4:	mov	r0, r5
   251a8:	mov	r1, r6
   251ac:	bl	14e5c <memcpy@plt>
   251b0:	mov	r0, r5
   251b4:	pop	{r4, r5, r6, sl, fp, pc}
   251b8:	ldr	r1, [r4, #8]
   251bc:	mov	r0, r6
   251c0:	bl	14e5c <memcpy@plt>
   251c4:	mov	r0, r6
   251c8:	pop	{r4, r5, r6, sl, fp, pc}
   251cc:	push	{r4, r5, fp, lr}
   251d0:	add	fp, sp, #8
   251d4:	mov	r4, r0
   251d8:	ldr	r5, [r0]
   251dc:	cmp	r5, #0
   251e0:	beq	25208 <flatcc_emitter_copy_buffer@@Base+0xf8>
   251e4:	ldr	r0, [r5, #2948]	; 0xb84
   251e8:	ldr	r1, [r4, #4]
   251ec:	cmp	r0, r1
   251f0:	beq	25208 <flatcc_emitter_copy_buffer@@Base+0xf8>
   251f4:	ldr	r1, [r5, #2952]	; 0xb88
   251f8:	sub	r1, r1, #2944	; 0xb80
   251fc:	str	r1, [r0, #2952]	; 0xb88
   25200:	ldr	r0, [r5, #2948]	; 0xb84
   25204:	b	25244 <flatcc_emitter_copy_buffer@@Base+0x134>
   25208:	movw	r0, #2956	; 0xb8c
   2520c:	bl	14e98 <malloc@plt>
   25210:	cmp	r0, #0
   25214:	beq	25274 <flatcc_emitter_copy_buffer@@Base+0x164>
   25218:	ldr	r1, [r4, #28]
   2521c:	add	r1, r1, #2944	; 0xb80
   25220:	str	r1, [r4, #28]
   25224:	cmp	r5, #0
   25228:	beq	2527c <flatcc_emitter_copy_buffer@@Base+0x16c>
   2522c:	ldm	r4, {r1, r2}
   25230:	str	r1, [r0, #2944]	; 0xb80
   25234:	str	r2, [r0, #2948]	; 0xb84
   25238:	str	r0, [r1, #2948]	; 0xb84
   2523c:	ldr	r1, [r4, #4]
   25240:	str	r0, [r1, #2944]	; 0xb80
   25244:	str	r0, [r4]
   25248:	mov	r0, #2944	; 0xb80
   2524c:	ldr	r1, [r4]
   25250:	add	r2, r1, #2944	; 0xb80
   25254:	str	r2, [r4, #8]
   25258:	str	r0, [r4, #12]
   2525c:	ldr	r0, [r1, #2944]	; 0xb80
   25260:	ldr	r0, [r0, #2952]	; 0xb88
   25264:	sub	r0, r0, #2944	; 0xb80
   25268:	str	r0, [r1, #2952]	; 0xb88
   2526c:	mov	r0, #0
   25270:	pop	{r4, r5, fp, pc}
   25274:	mvn	r0, #0
   25278:	pop	{r4, r5, fp, pc}
   2527c:	str	r0, [r4, #4]
   25280:	str	r0, [r4]
   25284:	mov	r1, #1472	; 0x5c0
   25288:	str	r1, [r4, #20]
   2528c:	str	r1, [r4, #12]
   25290:	ldr	r1, [r4]
   25294:	add	r1, r1, #1472	; 0x5c0
   25298:	str	r1, [r4, #16]
   2529c:	str	r1, [r4, #8]
   252a0:	movw	r1, #64064	; 0xfa40
   252a4:	movt	r1, #65535	; 0xffff
   252a8:	str	r0, [r0, #2944]	; 0xb80
   252ac:	str	r0, [r0, #2948]	; 0xb84
   252b0:	str	r1, [r0, #2952]	; 0xb88
   252b4:	mov	r0, #0
   252b8:	pop	{r4, r5, fp, pc}
   252bc:	push	{r4, r5, fp, lr}
   252c0:	add	fp, sp, #8
   252c4:	mov	r4, r0
   252c8:	ldr	r5, [r0, #4]
   252cc:	cmp	r5, #0
   252d0:	beq	252e4 <flatcc_emitter_copy_buffer@@Base+0x1d4>
   252d4:	ldr	r0, [r5, #2944]	; 0xb80
   252d8:	ldr	r1, [r4]
   252dc:	cmp	r0, r1
   252e0:	bne	2531c <flatcc_emitter_copy_buffer@@Base+0x20c>
   252e4:	movw	r0, #2956	; 0xb8c
   252e8:	bl	14e98 <malloc@plt>
   252ec:	cmp	r0, #0
   252f0:	beq	25348 <flatcc_emitter_copy_buffer@@Base+0x238>
   252f4:	ldr	r1, [r4, #28]
   252f8:	add	r1, r1, #2944	; 0xb80
   252fc:	str	r1, [r4, #28]
   25300:	cmp	r5, #0
   25304:	beq	25350 <flatcc_emitter_copy_buffer@@Base+0x240>
   25308:	ldr	r1, [r4]
   2530c:	str	r1, [r0, #2944]	; 0xb80
   25310:	str	r5, [r0, #2948]	; 0xb84
   25314:	str	r0, [r1, #2948]	; 0xb84
   25318:	str	r0, [r5, #2944]	; 0xb80
   2531c:	str	r0, [r4, #4]
   25320:	mov	r0, #2944	; 0xb80
   25324:	ldr	r1, [r4, #4]
   25328:	str	r1, [r4, #16]
   2532c:	str	r0, [r4, #20]
   25330:	ldr	r0, [r1, #2948]	; 0xb84
   25334:	ldr	r0, [r0, #2952]	; 0xb88
   25338:	add	r0, r0, #2944	; 0xb80
   2533c:	str	r0, [r1, #2952]	; 0xb88
   25340:	mov	r0, #0
   25344:	pop	{r4, r5, fp, pc}
   25348:	mvn	r0, #0
   2534c:	pop	{r4, r5, fp, pc}
   25350:	str	r0, [r4, #4]
   25354:	str	r0, [r4]
   25358:	mov	r1, #1472	; 0x5c0
   2535c:	str	r1, [r4, #20]
   25360:	str	r1, [r4, #12]
   25364:	ldr	r1, [r4]
   25368:	add	r1, r1, #1472	; 0x5c0
   2536c:	str	r1, [r4, #16]
   25370:	str	r1, [r4, #8]
   25374:	movw	r1, #64064	; 0xfa40
   25378:	movt	r1, #65535	; 0xffff
   2537c:	str	r0, [r0, #2944]	; 0xb80
   25380:	str	r0, [r0, #2948]	; 0xb84
   25384:	str	r1, [r0, #2952]	; 0xb88
   25388:	mov	r0, #0
   2538c:	pop	{r4, r5, fp, pc}

00025390 <flatcc_verify_error_string@@Base>:
   25390:	cmp	r0, #36	; 0x24
   25394:	movwhi	r0, #29606	; 0x73a6
   25398:	movthi	r0, #3
   2539c:	bxhi	lr
   253a0:	movw	r1, #29616	; 0x73b0
   253a4:	movt	r1, #3
   253a8:	ldr	r0, [r1, r0, lsl #2]
   253ac:	bx	lr

000253b0 <flatcc_verify_field@@Base>:
   253b0:	b	253b4 <flatcc_verify_field@@Base+0x4>
   253b4:	push	{r4, r5, r6, r7, fp, lr}
   253b8:	add	fp, sp, #16
   253bc:	mov	r4, r3
   253c0:	mov	r6, r2
   253c4:	mov	r5, r0
   253c8:	ldr	r7, [r0]
   253cc:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   253d0:	movw	r1, #65535	; 0xffff
   253d4:	tst	r0, r1
   253d8:	beq	25410 <flatcc_verify_field@@Base+0x60>
   253dc:	uxtah	r2, r6, r0
   253e0:	ldrh	r3, [r5, #20]
   253e4:	mov	r1, #13
   253e8:	cmp	r2, r3
   253ec:	bhi	25414 <flatcc_verify_field@@Base+0x64>
   253f0:	uxth	r0, r0
   253f4:	add	r0, r0, r7
   253f8:	ldr	r1, [r5, #16]
   253fc:	add	r0, r0, r1
   25400:	sub	r1, r4, #1
   25404:	ands	r0, r0, r1
   25408:	movwne	r0, #12
   2540c:	pop	{r4, r5, r6, r7, fp, pc}
   25410:	mov	r1, #0
   25414:	mov	r0, r1
   25418:	pop	{r4, r5, r6, r7, fp, pc}

0002541c <flatcc_verify_string_field@@Base>:
   2541c:	push	{r4, r5, r6, sl, fp, lr}
   25420:	add	fp, sp, #16
   25424:	sub	sp, sp, #8
   25428:	mov	r4, r0
   2542c:	add	r3, sp, #4
   25430:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   25434:	cmp	r0, #0
   25438:	bne	25470 <flatcc_verify_string_field@@Base+0x54>
   2543c:	ldr	r5, [sp, #4]
   25440:	cmp	r5, #0
   25444:	beq	25470 <flatcc_verify_string_field@@Base+0x54>
   25448:	ldr	r6, [r4]
   2544c:	ldr	r4, [r4, #4]
   25450:	mov	r0, r6
   25454:	mov	r1, r5
   25458:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   2545c:	mov	r3, r0
   25460:	mov	r0, r6
   25464:	mov	r1, r4
   25468:	mov	r2, r5
   2546c:	bl	254f0 <flatcc_verify_string_field@@Base+0xd4>
   25470:	sub	sp, fp, #16
   25474:	pop	{r4, r5, r6, sl, fp, pc}
   25478:	push	{r4, r5, r6, sl, fp, lr}
   2547c:	add	fp, sp, #16
   25480:	mov	r4, r3
   25484:	mov	r6, r2
   25488:	mov	r5, r0
   2548c:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   25490:	mov	r1, r0
   25494:	movw	r0, #65535	; 0xffff
   25498:	tst	r1, r0
   2549c:	beq	254d8 <flatcc_verify_string_field@@Base+0xbc>
   254a0:	mov	r0, #4
   254a4:	uxtah	r2, r0, r1
   254a8:	ldrh	r3, [r5, #20]
   254ac:	mov	r0, #13
   254b0:	cmp	r2, r3
   254b4:	bhi	254d4 <flatcc_verify_string_field@@Base+0xb8>
   254b8:	uxth	r0, r1
   254bc:	ldr	r1, [r5, #16]
   254c0:	add	r1, r1, r0
   254c4:	mov	r0, #12
   254c8:	tst	r1, #3
   254cc:	streq	r1, [r4]
   254d0:	moveq	r0, #0
   254d4:	pop	{r4, r5, r6, sl, fp, pc}
   254d8:	mov	r0, #0
   254dc:	str	r0, [r4]
   254e0:	cmp	r6, #0
   254e4:	movwne	r6, #1
   254e8:	lsl	r0, r6, #2
   254ec:	pop	{r4, r5, r6, sl, fp, pc}
   254f0:	push	{r4, r5, r6, r7, fp, lr}
   254f4:	add	fp, sp, #16
   254f8:	mov	r6, r3
   254fc:	mov	r7, r2
   25500:	mov	r5, r1
   25504:	mov	r4, r0
   25508:	mov	r0, r1
   2550c:	mov	r1, r2
   25510:	mov	r2, r3
   25514:	bl	26398 <flatcc_verify_union_vector_field@@Base+0x288>
   25518:	cmp	r0, #0
   2551c:	beq	2555c <flatcc_verify_string_field@@Base+0x140>
   25520:	add	r6, r6, r7
   25524:	mov	r0, r4
   25528:	mov	r1, r6
   2552c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25530:	add	r2, r6, #4
   25534:	sub	r3, r5, r2
   25538:	add	r7, r0, #1
   2553c:	mov	r1, #8
   25540:	cmp	r3, r7
   25544:	bcc	25560 <flatcc_verify_string_field@@Base+0x144>
   25548:	add	r1, r4, r2
   2554c:	ldrb	r0, [r1, r0]
   25550:	cmp	r0, #0
   25554:	movwne	r0, #7
   25558:	pop	{r4, r5, r6, r7, fp, pc}
   2555c:	mov	r1, #17
   25560:	mov	r0, r1
   25564:	pop	{r4, r5, r6, r7, fp, pc}
   25568:	add	r0, r0, r1
   2556c:	b	263c4 <flatcc_verify_union_vector_field@@Base+0x2b4>

00025570 <flatcc_verify_vector_field@@Base>:
   25570:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25574:	add	fp, sp, #24
   25578:	sub	sp, sp, #16
   2557c:	mov	r4, r3
   25580:	mov	r6, r0
   25584:	add	r3, sp, #12
   25588:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   2558c:	cmp	r0, #0
   25590:	bne	255d8 <flatcc_verify_vector_field@@Base+0x68>
   25594:	ldr	r5, [sp, #12]
   25598:	cmp	r5, #0
   2559c:	beq	255d8 <flatcc_verify_vector_field@@Base+0x68>
   255a0:	ldr	r8, [fp, #12]
   255a4:	ldr	r9, [fp, #8]
   255a8:	ldr	r7, [r6]
   255ac:	ldr	r6, [r6, #4]
   255b0:	mov	r0, r7
   255b4:	mov	r1, r5
   255b8:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   255bc:	mov	r3, r0
   255c0:	stm	sp, {r4, r9}
   255c4:	str	r8, [sp, #8]
   255c8:	mov	r0, r7
   255cc:	mov	r1, r6
   255d0:	mov	r2, r5
   255d4:	bl	255e0 <flatcc_verify_vector_field@@Base+0x70>
   255d8:	sub	sp, fp, #24
   255dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   255e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   255e4:	add	fp, sp, #24
   255e8:	mov	r5, r3
   255ec:	mov	r7, r2
   255f0:	mov	r4, r1
   255f4:	mov	r6, r0
   255f8:	ldr	r3, [fp, #12]
   255fc:	mov	r0, r1
   25600:	mov	r1, r2
   25604:	mov	r2, r5
   25608:	bl	263d0 <flatcc_verify_union_vector_field@@Base+0x2c0>
   2560c:	cmp	r0, #0
   25610:	beq	25658 <flatcc_verify_vector_field@@Base+0xe8>
   25614:	ldr	r8, [fp, #16]
   25618:	add	r5, r5, r7
   2561c:	mov	r0, r6
   25620:	mov	r1, r5
   25624:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25628:	mov	r1, r0
   2562c:	mov	r0, #25
   25630:	cmp	r1, r8
   25634:	bhi	25654 <flatcc_verify_vector_field@@Base+0xe4>
   25638:	ldr	r0, [fp, #8]
   2563c:	mul	r1, r1, r0
   25640:	sub	r0, r4, r5
   25644:	sub	r2, r0, #4
   25648:	mov	r0, #0
   2564c:	cmp	r2, r1
   25650:	movwcc	r0, #26
   25654:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25658:	mov	r0, #16
   2565c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00025660 <flatcc_verify_string_vector_field@@Base>:
   25660:	push	{r4, r5, r6, sl, fp, lr}
   25664:	add	fp, sp, #16
   25668:	sub	sp, sp, #8
   2566c:	mov	r4, r0
   25670:	add	r3, sp, #4
   25674:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   25678:	cmp	r0, #0
   2567c:	bne	256b4 <flatcc_verify_string_vector_field@@Base+0x54>
   25680:	ldr	r5, [sp, #4]
   25684:	cmp	r5, #0
   25688:	beq	256b4 <flatcc_verify_string_vector_field@@Base+0x54>
   2568c:	ldr	r6, [r4]
   25690:	ldr	r4, [r4, #4]
   25694:	mov	r0, r6
   25698:	mov	r1, r5
   2569c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   256a0:	mov	r3, r0
   256a4:	mov	r0, r6
   256a8:	mov	r1, r4
   256ac:	mov	r2, r5
   256b0:	bl	256bc <flatcc_verify_string_vector_field@@Base+0x5c>
   256b4:	sub	sp, fp, #16
   256b8:	pop	{r4, r5, r6, sl, fp, pc}
   256bc:	push	{r4, r5, r6, r7, fp, lr}
   256c0:	add	fp, sp, #16
   256c4:	sub	sp, sp, #16
   256c8:	mov	r6, r3
   256cc:	mov	r7, r2
   256d0:	mov	r4, r1
   256d4:	mov	r5, r0
   256d8:	mvn	r0, #-1073741824	; 0xc0000000
   256dc:	mov	r1, #4
   256e0:	str	r1, [sp]
   256e4:	str	r1, [sp, #4]
   256e8:	str	r0, [sp, #8]
   256ec:	mov	r0, r5
   256f0:	mov	r1, r4
   256f4:	bl	255e0 <flatcc_verify_vector_field@@Base+0x70>
   256f8:	cmp	r0, #0
   256fc:	beq	25708 <flatcc_verify_string_vector_field@@Base+0xa8>
   25700:	sub	sp, fp, #16
   25704:	pop	{r4, r5, r6, r7, fp, pc}
   25708:	add	r7, r6, r7
   2570c:	mov	r0, r5
   25710:	mov	r1, r7
   25714:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25718:	cmp	r0, #0
   2571c:	beq	2575c <flatcc_verify_string_vector_field@@Base+0xfc>
   25720:	mov	r6, r0
   25724:	add	r7, r7, #4
   25728:	mov	r0, r5
   2572c:	mov	r1, r7
   25730:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25734:	mov	r3, r0
   25738:	mov	r0, r5
   2573c:	mov	r1, r4
   25740:	mov	r2, r7
   25744:	bl	254f0 <flatcc_verify_string_field@@Base+0xd4>
   25748:	cmp	r0, #0
   2574c:	bne	25700 <flatcc_verify_string_vector_field@@Base+0xa0>
   25750:	subs	r6, r6, #1
   25754:	add	r7, r7, #4
   25758:	bne	25728 <flatcc_verify_string_vector_field@@Base+0xc8>
   2575c:	mov	r0, #0
   25760:	sub	sp, fp, #16
   25764:	pop	{r4, r5, r6, r7, fp, pc}

00025768 <flatcc_verify_table_field@@Base>:
   25768:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2576c:	add	fp, sp, #24
   25770:	sub	sp, sp, #16
   25774:	mov	r8, r3
   25778:	mov	r5, r0
   2577c:	add	r3, sp, #12
   25780:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   25784:	cmp	r0, #0
   25788:	bne	257c8 <flatcc_verify_table_field@@Base+0x60>
   2578c:	ldr	r6, [sp, #12]
   25790:	cmp	r6, #0
   25794:	beq	257c8 <flatcc_verify_table_field@@Base+0x60>
   25798:	ldr	r7, [r5]
   2579c:	ldr	r4, [r5, #4]
   257a0:	mov	r0, r7
   257a4:	mov	r1, r6
   257a8:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   257ac:	mov	r3, r0
   257b0:	ldr	r0, [r5, #8]
   257b4:	stm	sp, {r0, r8}
   257b8:	mov	r0, r7
   257bc:	mov	r1, r4
   257c0:	mov	r2, r6
   257c4:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   257c8:	sub	sp, fp, #24
   257cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   257d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   257d4:	add	fp, sp, #24
   257d8:	sub	sp, sp, #24
   257dc:	mov	r4, r0
   257e0:	ldr	r0, [fp, #8]
   257e4:	subs	r0, r0, #1
   257e8:	str	r0, [sp, #8]
   257ec:	beq	258c4 <flatcc_verify_table_field@@Base+0x15c>
   257f0:	mov	r6, r3
   257f4:	mov	r7, r2
   257f8:	mov	r5, r1
   257fc:	mov	r0, r1
   25800:	mov	r1, r2
   25804:	mov	r2, r3
   25808:	bl	26398 <flatcc_verify_union_vector_field@@Base+0x288>
   2580c:	cmp	r0, #0
   25810:	beq	258d0 <flatcc_verify_table_field@@Base+0x168>
   25814:	add	r7, r6, r7
   25818:	str	r7, [sp, #16]
   2581c:	mov	r0, r4
   25820:	mov	r1, r7
   25824:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25828:	sub	r6, r7, r0
   2582c:	mov	r0, #29
   25830:	tst	r6, #-2147483647	; 0x80000001
   25834:	bne	258bc <flatcc_verify_table_field@@Base+0x154>
   25838:	add	r8, r6, #2
   2583c:	mov	r0, #27
   25840:	cmp	r8, r5
   25844:	bhi	258bc <flatcc_verify_table_field@@Base+0x154>
   25848:	mov	r0, r4
   2584c:	mov	r1, r6
   25850:	bl	2640c <flatcc_verify_union_vector_field@@Base+0x2fc>
   25854:	mov	r1, r0
   25858:	strh	r0, [sp, #22]
   2585c:	mov	r0, #30
   25860:	tst	r1, #1
   25864:	bne	258bc <flatcc_verify_table_field@@Base+0x154>
   25868:	add	r2, r6, r1
   2586c:	cmp	r2, r5
   25870:	bhi	258bc <flatcc_verify_table_field@@Base+0x154>
   25874:	mov	r0, #28
   25878:	cmp	r1, #4
   2587c:	bcc	258bc <flatcc_verify_table_field@@Base+0x154>
   25880:	mov	r0, r4
   25884:	mov	r1, r8
   25888:	bl	2640c <flatcc_verify_union_vector_field@@Base+0x2fc>
   2588c:	mov	r1, r0
   25890:	strh	r0, [sp, #20]
   25894:	sub	r2, r5, r7
   25898:	mov	r0, #20
   2589c:	cmp	r2, r1
   258a0:	bcc	258bc <flatcc_verify_table_field@@Base+0x154>
   258a4:	ldr	r1, [fp, #12]
   258a8:	stm	sp, {r4, r5}
   258ac:	add	r0, r4, r6
   258b0:	str	r0, [sp, #12]
   258b4:	mov	r0, sp
   258b8:	blx	r1
   258bc:	sub	sp, fp, #24
   258c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   258c4:	mov	r0, #3
   258c8:	sub	sp, fp, #24
   258cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   258d0:	mov	r0, #15
   258d4:	sub	sp, fp, #24
   258d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000258dc <flatcc_verify_table_vector_field@@Base>:
   258dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   258e0:	add	fp, sp, #24
   258e4:	sub	sp, sp, #16
   258e8:	mov	r8, r3
   258ec:	mov	r5, r0
   258f0:	add	r3, sp, #12
   258f4:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   258f8:	cmp	r0, #0
   258fc:	bne	2593c <flatcc_verify_table_vector_field@@Base+0x60>
   25900:	ldr	r6, [sp, #12]
   25904:	cmp	r6, #0
   25908:	beq	2593c <flatcc_verify_table_vector_field@@Base+0x60>
   2590c:	ldr	r7, [r5]
   25910:	ldr	r4, [r5, #4]
   25914:	mov	r0, r7
   25918:	mov	r1, r6
   2591c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25920:	mov	r3, r0
   25924:	ldr	r0, [r5, #8]
   25928:	stm	sp, {r0, r8}
   2592c:	mov	r0, r7
   25930:	mov	r1, r4
   25934:	mov	r2, r6
   25938:	bl	25944 <flatcc_verify_table_vector_field@@Base+0x68>
   2593c:	sub	sp, fp, #24
   25940:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   25944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25948:	add	fp, sp, #28
   2594c:	sub	sp, sp, #12
   25950:	ldr	r9, [fp, #8]
   25954:	cmp	r9, #1
   25958:	blt	25a00 <flatcc_verify_table_vector_field@@Base+0x124>
   2595c:	mov	r6, r3
   25960:	mov	r7, r2
   25964:	mov	r4, r1
   25968:	mov	r5, r0
   2596c:	mvn	r0, #-1073741824	; 0xc0000000
   25970:	mov	r1, #4
   25974:	str	r1, [sp]
   25978:	str	r1, [sp, #4]
   2597c:	str	r0, [sp, #8]
   25980:	mov	r0, r5
   25984:	mov	r1, r4
   25988:	bl	255e0 <flatcc_verify_vector_field@@Base+0x70>
   2598c:	mov	r8, r0
   25990:	cmp	r0, #0
   25994:	bne	25a04 <flatcc_verify_table_vector_field@@Base+0x128>
   25998:	add	r7, r6, r7
   2599c:	mov	r0, r5
   259a0:	mov	r1, r7
   259a4:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   259a8:	mov	r8, #0
   259ac:	cmp	r0, #0
   259b0:	beq	25a04 <flatcc_verify_table_vector_field@@Base+0x128>
   259b4:	mov	r6, r0
   259b8:	sub	r9, r9, #1
   259bc:	ldr	sl, [fp, #12]
   259c0:	add	r7, r7, #4
   259c4:	mov	r0, r5
   259c8:	mov	r1, r7
   259cc:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   259d0:	mov	r3, r0
   259d4:	stm	sp, {r9, sl}
   259d8:	mov	r0, r5
   259dc:	mov	r1, r4
   259e0:	mov	r2, r7
   259e4:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   259e8:	cmp	r0, #0
   259ec:	bne	25a10 <flatcc_verify_table_vector_field@@Base+0x134>
   259f0:	subs	r6, r6, #1
   259f4:	add	r7, r7, #4
   259f8:	bne	259c4 <flatcc_verify_table_vector_field@@Base+0xe8>
   259fc:	b	25a04 <flatcc_verify_table_vector_field@@Base+0x128>
   25a00:	mov	r8, #3
   25a04:	mov	r0, r8
   25a08:	sub	sp, fp, #28
   25a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a10:	mov	r0, r5
   25a14:	mov	r1, r7
   25a18:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25a1c:	mov	r3, r0
   25a20:	stm	sp, {r9, sl}
   25a24:	mov	r0, r5
   25a28:	mov	r1, r4
   25a2c:	mov	r2, r7
   25a30:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   25a34:	sub	sp, fp, #28
   25a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025a3c <flatcc_verify_union_table@@Base>:
   25a3c:	push	{fp, lr}
   25a40:	mov	fp, sp
   25a44:	sub	sp, sp, #8
   25a48:	ldr	r2, [r0, #16]
   25a4c:	ldr	r3, [r0, #20]
   25a50:	ldm	r0, {ip, lr}
   25a54:	ldr	r0, [r0, #8]
   25a58:	stm	sp, {r0, r1}
   25a5c:	mov	r0, ip
   25a60:	mov	r1, lr
   25a64:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   25a68:	mov	sp, fp
   25a6c:	pop	{fp, pc}

00025a70 <flatcc_verify_union_struct@@Base>:
   25a70:	push	{fp, lr}
   25a74:	mov	fp, sp
   25a78:	sub	sp, sp, #8
   25a7c:	mov	ip, r1
   25a80:	ldr	r3, [r0, #4]
   25a84:	ldr	r1, [r0, #16]
   25a88:	ldr	lr, [r0, #20]
   25a8c:	str	r2, [sp]
   25a90:	mov	r0, r3
   25a94:	mov	r2, lr
   25a98:	mov	r3, ip
   25a9c:	bl	25aa8 <flatcc_verify_union_struct@@Base+0x38>
   25aa0:	mov	sp, fp
   25aa4:	pop	{fp, pc}
   25aa8:	mov	ip, r0
   25aac:	mov	r0, #18
   25ab0:	cmp	r2, #0
   25ab4:	beq	25aec <flatcc_verify_union_struct@@Base+0x7c>
   25ab8:	add	r1, r2, r1
   25abc:	cmp	r1, ip
   25ac0:	bhi	25aec <flatcc_verify_union_struct@@Base+0x7c>
   25ac4:	adds	r2, r1, r3
   25ac8:	mov	r0, #10
   25acc:	bcs	25aec <flatcc_verify_union_struct@@Base+0x7c>
   25ad0:	mov	r0, #9
   25ad4:	cmp	r2, ip
   25ad8:	bxhi	lr
   25adc:	ldr	r0, [sp]
   25ae0:	sub	r0, r0, #1
   25ae4:	ands	r0, r0, r1
   25ae8:	movwne	r0, #11
   25aec:	bx	lr

00025af0 <flatcc_verify_union_string@@Base>:
   25af0:	ldr	ip, [r0]
   25af4:	ldr	r1, [r0, #4]
   25af8:	ldr	r2, [r0, #16]
   25afc:	ldr	r3, [r0, #20]
   25b00:	mov	r0, ip
   25b04:	b	254f0 <flatcc_verify_string_field@@Base+0xd4>

00025b08 <flatcc_verify_buffer_header@@Base>:
   25b08:	push	{r4, r5, fp, lr}
   25b0c:	add	fp, sp, #8
   25b10:	mov	r4, r0
   25b14:	mov	r0, #5
   25b18:	tst	r4, #3
   25b1c:	bne	25b68 <flatcc_verify_buffer_header@@Base+0x60>
   25b20:	mov	r0, #6
   25b24:	cmn	r1, #9
   25b28:	bhi	25b68 <flatcc_verify_buffer_header@@Base+0x60>
   25b2c:	mov	r0, #1
   25b30:	cmp	r1, #8
   25b34:	popcc	{r4, r5, fp, pc}
   25b38:	cmp	r2, #0
   25b3c:	beq	25b6c <flatcc_verify_buffer_header@@Base+0x64>
   25b40:	mov	r0, r2
   25b44:	bl	25b74 <flatcc_verify_buffer_header@@Base+0x6c>
   25b48:	mov	r5, r0
   25b4c:	mov	r0, r4
   25b50:	bl	25ba8 <flatcc_verify_buffer_header@@Base+0xa0>
   25b54:	cmp	r5, #0
   25b58:	movne	r1, r0
   25b5c:	movne	r0, #2
   25b60:	cmpne	r1, r5
   25b64:	moveq	r0, #0
   25b68:	pop	{r4, r5, fp, pc}
   25b6c:	mov	r0, #0
   25b70:	pop	{r4, r5, fp, pc}
   25b74:	push	{fp, lr}
   25b78:	mov	fp, sp
   25b7c:	sub	sp, sp, #8
   25b80:	mov	r1, r0
   25b84:	mov	r0, #0
   25b88:	str	r0, [sp, #4]
   25b8c:	add	r0, sp, #4
   25b90:	mov	r2, #4
   25b94:	bl	14ef8 <strncpy@plt>
   25b98:	ldr	r0, [sp, #4]
   25b9c:	bl	26420 <flatcc_verify_union_vector_field@@Base+0x310>
   25ba0:	mov	sp, fp
   25ba4:	pop	{fp, pc}
   25ba8:	add	r0, r0, #4
   25bac:	b	26424 <flatcc_verify_union_vector_field@@Base+0x314>

00025bb0 <flatcc_verify_typed_buffer_header@@Base>:
   25bb0:	push	{r4, sl, fp, lr}
   25bb4:	add	fp, sp, #8
   25bb8:	mov	r4, r2
   25bbc:	mov	r2, #5
   25bc0:	tst	r0, #3
   25bc4:	bne	25bf8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25bc8:	mov	r2, #6
   25bcc:	cmn	r1, #9
   25bd0:	bhi	25bf8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25bd4:	mov	r2, #1
   25bd8:	cmp	r1, #8
   25bdc:	bcc	25bf8 <flatcc_verify_typed_buffer_header@@Base+0x48>
   25be0:	cmp	r4, #0
   25be4:	beq	25c00 <flatcc_verify_typed_buffer_header@@Base+0x50>
   25be8:	bl	25ba8 <flatcc_verify_buffer_header@@Base+0xa0>
   25bec:	mov	r2, #2
   25bf0:	cmp	r0, r4
   25bf4:	moveq	r2, #0
   25bf8:	mov	r0, r2
   25bfc:	pop	{r4, sl, fp, pc}
   25c00:	mov	r2, #0
   25c04:	mov	r0, r2
   25c08:	pop	{r4, sl, fp, pc}

00025c0c <flatcc_verify_struct_as_root@@Base>:
   25c0c:	push	{r4, r5, r6, r7, fp, lr}
   25c10:	add	fp, sp, #16
   25c14:	sub	sp, sp, #8
   25c18:	mov	r4, r3
   25c1c:	mov	r7, r2
   25c20:	mov	r5, r1
   25c24:	mov	r6, r0
   25c28:	bl	25b08 <flatcc_verify_buffer_header@@Base>
   25c2c:	cmp	r0, #0
   25c30:	beq	25c4c <flatcc_verify_struct_as_root@@Base+0x40>
   25c34:	mov	r0, r6
   25c38:	mov	r1, r5
   25c3c:	mov	r2, r7
   25c40:	sub	sp, fp, #16
   25c44:	pop	{r4, r5, r6, r7, fp, lr}
   25c48:	b	25b08 <flatcc_verify_buffer_header@@Base>
   25c4c:	ldr	r7, [fp, #8]
   25c50:	mov	r0, r6
   25c54:	mov	r1, #0
   25c58:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25c5c:	mov	r2, r0
   25c60:	str	r7, [sp]
   25c64:	mov	r0, r5
   25c68:	mov	r1, #0
   25c6c:	mov	r3, r4
   25c70:	bl	25aa8 <flatcc_verify_union_struct@@Base+0x38>
   25c74:	sub	sp, fp, #16
   25c78:	pop	{r4, r5, r6, r7, fp, pc}

00025c7c <flatcc_verify_struct_as_typed_root@@Base>:
   25c7c:	push	{r4, r5, r6, r7, fp, lr}
   25c80:	add	fp, sp, #16
   25c84:	sub	sp, sp, #8
   25c88:	mov	r4, r3
   25c8c:	mov	r5, r1
   25c90:	mov	r6, r0
   25c94:	bl	25bb0 <flatcc_verify_typed_buffer_header@@Base>
   25c98:	cmp	r0, #0
   25c9c:	beq	25ca8 <flatcc_verify_struct_as_typed_root@@Base+0x2c>
   25ca0:	sub	sp, fp, #16
   25ca4:	pop	{r4, r5, r6, r7, fp, pc}
   25ca8:	ldr	r7, [fp, #8]
   25cac:	mov	r0, r6
   25cb0:	mov	r1, #0
   25cb4:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25cb8:	mov	r2, r0
   25cbc:	str	r7, [sp]
   25cc0:	mov	r0, r5
   25cc4:	mov	r1, #0
   25cc8:	mov	r3, r4
   25ccc:	bl	25aa8 <flatcc_verify_union_struct@@Base+0x38>
   25cd0:	sub	sp, fp, #16
   25cd4:	pop	{r4, r5, r6, r7, fp, pc}

00025cd8 <flatcc_verify_table_as_root@@Base>:
   25cd8:	push	{r4, r5, r6, r7, fp, lr}
   25cdc:	add	fp, sp, #16
   25ce0:	sub	sp, sp, #8
   25ce4:	mov	r5, r3
   25ce8:	mov	r7, r2
   25cec:	mov	r4, r1
   25cf0:	mov	r6, r0
   25cf4:	bl	25b08 <flatcc_verify_buffer_header@@Base>
   25cf8:	cmp	r0, #0
   25cfc:	beq	25d18 <flatcc_verify_table_as_root@@Base+0x40>
   25d00:	mov	r0, r6
   25d04:	mov	r1, r4
   25d08:	mov	r2, r7
   25d0c:	sub	sp, fp, #16
   25d10:	pop	{r4, r5, r6, r7, fp, lr}
   25d14:	b	25b08 <flatcc_verify_buffer_header@@Base>
   25d18:	mov	r0, r6
   25d1c:	mov	r1, #0
   25d20:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25d24:	mov	r3, r0
   25d28:	mov	r0, #100	; 0x64
   25d2c:	stm	sp, {r0, r5}
   25d30:	mov	r0, r6
   25d34:	mov	r1, r4
   25d38:	mov	r2, #0
   25d3c:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   25d40:	sub	sp, fp, #16
   25d44:	pop	{r4, r5, r6, r7, fp, pc}

00025d48 <flatcc_verify_table_as_typed_root@@Base>:
   25d48:	push	{r4, r5, r6, sl, fp, lr}
   25d4c:	add	fp, sp, #16
   25d50:	sub	sp, sp, #8
   25d54:	mov	r5, r3
   25d58:	mov	r4, r1
   25d5c:	mov	r6, r0
   25d60:	bl	25bb0 <flatcc_verify_typed_buffer_header@@Base>
   25d64:	cmp	r0, #0
   25d68:	beq	25d74 <flatcc_verify_table_as_typed_root@@Base+0x2c>
   25d6c:	sub	sp, fp, #16
   25d70:	pop	{r4, r5, r6, sl, fp, pc}
   25d74:	mov	r0, r6
   25d78:	mov	r1, #0
   25d7c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25d80:	mov	r3, r0
   25d84:	mov	r0, #100	; 0x64
   25d88:	stm	sp, {r0, r5}
   25d8c:	mov	r0, r6
   25d90:	mov	r1, r4
   25d94:	mov	r2, #0
   25d98:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   25d9c:	sub	sp, fp, #16
   25da0:	pop	{r4, r5, r6, sl, fp, pc}

00025da4 <flatcc_verify_struct_as_nested_root@@Base>:
   25da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25da8:	add	fp, sp, #28
   25dac:	sub	sp, sp, #12
   25db0:	mov	r8, r3
   25db4:	mov	r7, r2
   25db8:	mov	r6, r1
   25dbc:	mov	r4, r0
   25dc0:	mvn	sl, #0
   25dc4:	mov	r5, #1
   25dc8:	stm	sp, {r5, sl}
   25dcc:	ldr	r9, [fp, #12]
   25dd0:	mov	r3, r9
   25dd4:	bl	25570 <flatcc_verify_vector_field@@Base>
   25dd8:	cmp	r0, #0
   25ddc:	beq	25e00 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   25de0:	stm	sp, {r5, sl}
   25de4:	mov	r0, r4
   25de8:	mov	r1, r6
   25dec:	mov	r2, r7
   25df0:	mov	r3, r9
   25df4:	bl	25570 <flatcc_verify_vector_field@@Base>
   25df8:	sub	sp, fp, #28
   25dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e00:	mov	r0, r4
   25e04:	mov	r1, r6
   25e08:	bl	25e60 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   25e0c:	cmp	r0, #0
   25e10:	beq	25e54 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   25e14:	mov	r4, r0
   25e18:	ldr	r6, [fp, #8]
   25e1c:	mov	r1, #0
   25e20:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25e24:	add	r4, r0, r4
   25e28:	mov	r0, r4
   25e2c:	mov	r1, #0
   25e30:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25e34:	mov	r1, r0
   25e38:	str	r9, [sp]
   25e3c:	add	r0, r4, #4
   25e40:	mov	r2, r8
   25e44:	mov	r3, r6
   25e48:	bl	25c0c <flatcc_verify_struct_as_root@@Base>
   25e4c:	sub	sp, fp, #28
   25e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e54:	mov	r0, #0
   25e58:	sub	sp, fp, #28
   25e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e60:	push	{r4, sl, fp, lr}
   25e64:	add	fp, sp, #8
   25e68:	mov	r4, r0
   25e6c:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   25e70:	uxth	r0, r0
   25e74:	cmp	r0, #0
   25e78:	beq	25e90 <flatcc_verify_struct_as_nested_root@@Base+0xec>
   25e7c:	ldr	r1, [r4]
   25e80:	ldr	r2, [r4, #16]
   25e84:	add	r1, r1, r2
   25e88:	add	r0, r1, r0
   25e8c:	pop	{r4, sl, fp, pc}
   25e90:	mov	r0, #0
   25e94:	pop	{r4, sl, fp, pc}

00025e98 <flatcc_verify_table_as_nested_root@@Base>:
   25e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e9c:	add	fp, sp, #28
   25ea0:	sub	sp, sp, #12
   25ea4:	mov	r8, r3
   25ea8:	mov	r7, r2
   25eac:	mov	r6, r1
   25eb0:	mov	r4, r0
   25eb4:	mvn	r9, #0
   25eb8:	mov	sl, #1
   25ebc:	str	sl, [sp]
   25ec0:	str	r9, [sp, #4]
   25ec4:	ldr	r5, [fp, #8]
   25ec8:	mov	r3, r5
   25ecc:	bl	25570 <flatcc_verify_vector_field@@Base>
   25ed0:	cmp	r0, #0
   25ed4:	beq	25efc <flatcc_verify_table_as_nested_root@@Base+0x64>
   25ed8:	str	sl, [sp]
   25edc:	str	r9, [sp, #4]
   25ee0:	mov	r0, r4
   25ee4:	mov	r1, r6
   25ee8:	mov	r2, r7
   25eec:	mov	r3, r5
   25ef0:	bl	25570 <flatcc_verify_vector_field@@Base>
   25ef4:	sub	sp, fp, #28
   25ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25efc:	ldr	r9, [fp, #12]
   25f00:	mov	r0, r4
   25f04:	mov	r1, r6
   25f08:	bl	25e60 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   25f0c:	cmp	r0, #0
   25f10:	beq	25f68 <flatcc_verify_table_as_nested_root@@Base+0xd0>
   25f14:	mov	r5, r0
   25f18:	mov	r1, #0
   25f1c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25f20:	add	r5, r0, r5
   25f24:	mov	r0, r5
   25f28:	mov	r1, #0
   25f2c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25f30:	mov	r6, r0
   25f34:	add	r7, r5, #4
   25f38:	mov	r0, r7
   25f3c:	mov	r1, r6
   25f40:	mov	r2, r8
   25f44:	bl	25b08 <flatcc_verify_buffer_header@@Base>
   25f48:	cmp	r0, #0
   25f4c:	beq	25f74 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   25f50:	mov	r0, r7
   25f54:	mov	r1, r6
   25f58:	mov	r2, r8
   25f5c:	sub	sp, fp, #28
   25f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f64:	b	25b08 <flatcc_verify_buffer_header@@Base>
   25f68:	mov	r0, #0
   25f6c:	sub	sp, fp, #28
   25f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f74:	mov	r0, r7
   25f78:	mov	r1, #0
   25f7c:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   25f80:	mov	r3, r0
   25f84:	ldr	r0, [r4, #8]
   25f88:	stm	sp, {r0, r9}
   25f8c:	mov	r0, r7
   25f90:	mov	r1, r6
   25f94:	mov	r2, #0
   25f98:	bl	257d0 <flatcc_verify_table_field@@Base+0x68>
   25f9c:	sub	sp, fp, #28
   25fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025fa4 <flatcc_verify_union_field@@Base>:
   25fa4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25fa8:	add	fp, sp, #24
   25fac:	sub	sp, sp, #32
   25fb0:	mov	r8, r3
   25fb4:	mov	r9, r2
   25fb8:	mov	r7, r1
   25fbc:	mov	r5, r0
   25fc0:	sub	r0, r1, #1
   25fc4:	uxth	r4, r0
   25fc8:	mov	r0, r5
   25fcc:	mov	r1, r4
   25fd0:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   25fd4:	uxth	r6, r0
   25fd8:	cmp	r6, #0
   25fdc:	beq	26090 <flatcc_verify_union_field@@Base+0xec>
   25fe0:	mov	r0, r5
   25fe4:	mov	r1, r4
   25fe8:	mov	r2, #1
   25fec:	mov	r3, #1
   25ff0:	bl	253b4 <flatcc_verify_field@@Base+0x4>
   25ff4:	cmp	r0, #0
   25ff8:	bne	260b0 <flatcc_verify_union_field@@Base+0x10c>
   25ffc:	mov	r0, r5
   26000:	mov	r1, r7
   26004:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   26008:	ldr	r1, [r5]
   2600c:	ldr	r2, [r5, #16]
   26010:	add	r4, r1, r2
   26014:	ldrb	r1, [r4, r6]
   26018:	movw	r2, #65535	; 0xffff
   2601c:	tst	r0, r2
   26020:	beq	26030 <flatcc_verify_union_field@@Base+0x8c>
   26024:	mov	r0, #24
   26028:	cmp	r1, #0
   2602c:	beq	260b0 <flatcc_verify_union_field@@Base+0x10c>
   26030:	cmp	r1, #0
   26034:	beq	260cc <flatcc_verify_union_field@@Base+0x128>
   26038:	add	r3, sp, #28
   2603c:	mov	r0, r5
   26040:	mov	r1, r7
   26044:	mov	r2, r9
   26048:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   2604c:	cmp	r0, #0
   26050:	bne	260b0 <flatcc_verify_union_field@@Base+0x10c>
   26054:	ldr	r1, [sp, #28]
   26058:	cmp	r1, #0
   2605c:	beq	260b0 <flatcc_verify_union_field@@Base+0x10c>
   26060:	ldm	r5, {r0, r2, r3}
   26064:	str	r1, [sp, #20]
   26068:	stmib	sp, {r0, r2, r3}
   2606c:	ldr	r0, [r5]
   26070:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   26074:	str	r0, [sp, #24]
   26078:	ldrb	r0, [r4, r6]
   2607c:	strb	r0, [sp, #16]
   26080:	add	r0, sp, #4
   26084:	blx	r8
   26088:	sub	sp, fp, #24
   2608c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26090:	mov	r0, r5
   26094:	mov	r1, r7
   26098:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   2609c:	mov	r1, r0
   260a0:	mov	r0, #23
   260a4:	movw	r2, #65535	; 0xffff
   260a8:	tst	r1, r2
   260ac:	beq	260b8 <flatcc_verify_union_field@@Base+0x114>
   260b0:	sub	sp, fp, #24
   260b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   260b8:	cmp	r9, #0
   260bc:	movwne	r9, #21
   260c0:	mov	r0, r9
   260c4:	sub	sp, fp, #24
   260c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   260cc:	mov	r0, #0
   260d0:	sub	sp, fp, #24
   260d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   260d8:	push	{fp, lr}
   260dc:	mov	fp, sp
   260e0:	mov	r2, #4
   260e4:	add	r1, r2, r1, lsl #1
   260e8:	uxth	r1, r1
   260ec:	ldrh	r3, [r0, #22]
   260f0:	mov	r2, #0
   260f4:	cmp	r1, r3
   260f8:	bcs	26108 <flatcc_verify_union_field@@Base+0x164>
   260fc:	ldr	r0, [r0, #12]
   26100:	bl	2640c <flatcc_verify_union_vector_field@@Base+0x2fc>
   26104:	mov	r2, r0
   26108:	mov	r0, r2
   2610c:	pop	{fp, pc}

00026110 <flatcc_verify_union_vector_field@@Base>:
   26110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26114:	add	fp, sp, #28
   26118:	sub	sp, sp, #20
   2611c:	mov	r8, r3
   26120:	mov	r6, r2
   26124:	mov	sl, r1
   26128:	mov	r5, r0
   2612c:	sub	r0, r1, #1
   26130:	uxth	r4, r0
   26134:	mov	r0, r5
   26138:	mov	r1, r4
   2613c:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   26140:	movw	r1, #65535	; 0xffff
   26144:	tst	r0, r1
   26148:	beq	26194 <flatcc_verify_union_vector_field@@Base+0x84>
   2614c:	mvn	r9, #0
   26150:	mov	r7, #1
   26154:	stm	sp, {r7, r9}
   26158:	mov	r0, r5
   2615c:	mov	r1, r4
   26160:	mov	r2, r6
   26164:	mov	r3, #1
   26168:	bl	25570 <flatcc_verify_vector_field@@Base>
   2616c:	cmp	r0, #0
   26170:	beq	261bc <flatcc_verify_union_vector_field@@Base+0xac>
   26174:	stm	sp, {r7, r9}
   26178:	mov	r0, r5
   2617c:	mov	r1, r4
   26180:	mov	r2, r6
   26184:	mov	r3, #1
   26188:	bl	25570 <flatcc_verify_vector_field@@Base>
   2618c:	sub	sp, fp, #28
   26190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26194:	mov	r0, r5
   26198:	mov	r1, sl
   2619c:	bl	260d8 <flatcc_verify_union_field@@Base+0x134>
   261a0:	cmp	r6, #0
   261a4:	beq	2614c <flatcc_verify_union_vector_field@@Base+0x3c>
   261a8:	uxth	r1, r0
   261ac:	mov	r0, #22
   261b0:	cmp	r1, #0
   261b4:	beq	26254 <flatcc_verify_union_vector_field@@Base+0x144>
   261b8:	b	2614c <flatcc_verify_union_vector_field@@Base+0x3c>
   261bc:	mov	r0, r5
   261c0:	mov	r1, r4
   261c4:	bl	25e60 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   261c8:	cmp	r0, #0
   261cc:	beq	2625c <flatcc_verify_union_vector_field@@Base+0x14c>
   261d0:	mov	r4, r0
   261d4:	mov	r1, #0
   261d8:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   261dc:	add	r4, r0, r4
   261e0:	mov	r0, r4
   261e4:	mov	r1, #0
   261e8:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   261ec:	mov	r9, r0
   261f0:	add	r3, sp, #16
   261f4:	mov	r0, r5
   261f8:	mov	r1, sl
   261fc:	mov	r2, r6
   26200:	bl	25478 <flatcc_verify_string_field@@Base+0x5c>
   26204:	cmp	r0, #0
   26208:	bne	26254 <flatcc_verify_union_vector_field@@Base+0x144>
   2620c:	ldr	r6, [sp, #16]
   26210:	cmp	r6, #0
   26214:	beq	26254 <flatcc_verify_union_vector_field@@Base+0x144>
   26218:	ldm	r5, {r7, sl}
   2621c:	mov	r0, r7
   26220:	mov	r1, r6
   26224:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   26228:	mov	r3, r0
   2622c:	ldr	r0, [r5, #8]
   26230:	add	r1, r4, #4
   26234:	str	r9, [sp]
   26238:	str	r1, [sp, #4]
   2623c:	str	r0, [sp, #8]
   26240:	str	r8, [sp, #12]
   26244:	mov	r0, r7
   26248:	mov	r1, sl
   2624c:	mov	r2, r6
   26250:	bl	26268 <flatcc_verify_union_vector_field@@Base+0x158>
   26254:	sub	sp, fp, #28
   26258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2625c:	mov	r0, #0
   26260:	sub	sp, fp, #28
   26264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2626c:	add	fp, sp, #28
   26270:	sub	sp, sp, #36	; 0x24
   26274:	ldr	r8, [fp, #16]
   26278:	cmp	r8, #1
   2627c:	blt	26314 <flatcc_verify_union_vector_field@@Base+0x204>
   26280:	mov	r6, r3
   26284:	mov	r4, r2
   26288:	mov	r7, r1
   2628c:	mov	r9, r0
   26290:	mvn	r0, #-1073741824	; 0xc0000000
   26294:	mov	r1, #4
   26298:	str	r1, [sp]
   2629c:	str	r1, [sp, #4]
   262a0:	str	r0, [sp, #8]
   262a4:	mov	r0, r9
   262a8:	mov	r1, r7
   262ac:	bl	255e0 <flatcc_verify_vector_field@@Base+0x70>
   262b0:	mov	r5, r0
   262b4:	cmp	r0, #0
   262b8:	bne	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   262bc:	ldr	sl, [fp, #8]
   262c0:	add	r4, r6, r4
   262c4:	mov	r0, r9
   262c8:	mov	r1, r4
   262cc:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   262d0:	mov	r5, #34	; 0x22
   262d4:	cmp	r0, sl
   262d8:	bne	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   262dc:	mov	r6, r0
   262e0:	sub	r0, r8, #1
   262e4:	str	r0, [sp, #20]
   262e8:	str	r7, [sp, #16]
   262ec:	str	r9, [sp, #12]
   262f0:	mov	r5, #0
   262f4:	cmp	r6, #0
   262f8:	beq	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   262fc:	ldr	r0, [fp, #20]
   26300:	ldr	sl, [fp, #12]
   26304:	add	r7, r4, #4
   26308:	mov	r4, r0
   2630c:	add	r8, sp, #12
   26310:	b	2633c <flatcc_verify_union_vector_field@@Base+0x22c>
   26314:	mov	r5, #3
   26318:	mov	r0, r5
   2631c:	sub	sp, fp, #28
   26320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26324:	cmp	r1, #0
   26328:	bne	26390 <flatcc_verify_union_vector_field@@Base+0x280>
   2632c:	add	sl, sl, #1
   26330:	subs	r6, r6, #1
   26334:	add	r7, r7, #4
   26338:	beq	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   2633c:	mov	r0, r9
   26340:	mov	r1, r7
   26344:	bl	25568 <flatcc_verify_string_field@@Base+0x14c>
   26348:	ldrb	r1, [sl]
   2634c:	cmp	r0, #0
   26350:	beq	26324 <flatcc_verify_union_vector_field@@Base+0x214>
   26354:	cmp	r1, #0
   26358:	beq	26388 <flatcc_verify_union_vector_field@@Base+0x278>
   2635c:	str	r0, [sp, #32]
   26360:	str	r7, [sp, #28]
   26364:	strb	r1, [sp, #24]
   26368:	mov	r0, r8
   2636c:	blx	r4
   26370:	cmp	r0, #0
   26374:	beq	2632c <flatcc_verify_union_vector_field@@Base+0x21c>
   26378:	add	r0, sp, #12
   2637c:	blx	r4
   26380:	mov	r5, r0
   26384:	b	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   26388:	mov	r5, #33	; 0x21
   2638c:	b	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   26390:	mov	r5, #32
   26394:	b	26318 <flatcc_verify_union_vector_field@@Base+0x208>
   26398:	mov	r3, r0
   2639c:	add	r2, r2, r1
   263a0:	mov	r0, #0
   263a4:	cmp	r2, r1
   263a8:	bxls	lr
   263ac:	add	r1, r2, #4
   263b0:	cmp	r1, r3
   263b4:	andls	r0, r2, #3
   263b8:	clzls	r0, r0
   263bc:	lsrls	r0, r0, #5
   263c0:	bx	lr
   263c4:	ldr	r0, [r0]
   263c8:	b	263cc <flatcc_verify_union_vector_field@@Base+0x2bc>
   263cc:	bx	lr
   263d0:	mov	ip, r0
   263d4:	cmp	r3, #4
   263d8:	movls	r3, #4
   263dc:	add	r2, r2, r1
   263e0:	mov	r0, #0
   263e4:	cmp	r2, r1
   263e8:	bxls	lr
   263ec:	add	r1, r2, #4
   263f0:	cmp	r1, ip
   263f4:	subls	r0, r3, #1
   263f8:	orrls	r0, r0, #3
   263fc:	andls	r0, r0, r1
   26400:	clzls	r0, r0
   26404:	lsrls	r0, r0, #5
   26408:	bx	lr
   2640c:	add	r0, r0, r1
   26410:	b	26414 <flatcc_verify_union_vector_field@@Base+0x304>
   26414:	ldrh	r0, [r0]
   26418:	b	2641c <flatcc_verify_union_vector_field@@Base+0x30c>
   2641c:	bx	lr
   26420:	bx	lr
   26424:	ldr	r0, [r0]
   26428:	b	2642c <flatcc_verify_union_vector_field@@Base+0x31c>
   2642c:	bx	lr

00026430 <grisu3_diy_fp_encode_double@@Base>:
   26430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26434:	add	fp, sp, #28
   26438:	sub	sp, sp, #68	; 0x44
   2643c:	mov	r9, r3
   26440:	mov	r7, r2
   26444:	mov	r2, r0
   26448:	mov	r6, #0
   2644c:	str	r6, [sp]
   26450:	str	r6, [sp, #4]
   26454:	add	r0, sp, #48	; 0x30
   26458:	mov	r3, r1
   2645c:	bl	266a8 <grisu3_diy_fp_encode_double@@Base+0x278>
   26460:	ldr	r0, [fp, #8]
   26464:	cmp	r0, #0
   26468:	movwne	r0, #1
   2646c:	lsl	r0, r0, #2
   26470:	ldr	r1, [sp, #48]	; 0x30
   26474:	str	r1, [sp, #28]
   26478:	ldr	sl, [sp, #52]	; 0x34
   2647c:	ldr	r5, [sp, #56]	; 0x38
   26480:	ldr	r8, [sp, #60]	; 0x3c
   26484:	rsb	r1, r5, #0
   26488:	lsl	r4, r0, r1
   2648c:	str	r9, [sp, #24]
   26490:	sub	r7, r7, r9
   26494:	add	r1, sp, #48	; 0x30
   26498:	mov	r0, r7
   2649c:	bl	2674c <grisu3_diy_fp_encode_double@@Base+0x31c>
   264a0:	cmp	r7, r0
   264a4:	bne	264b0 <grisu3_diy_fp_encode_double@@Base+0x80>
   264a8:	ldr	r2, [sp, #28]
   264ac:	b	2651c <grisu3_diy_fp_encode_double@@Base+0xec>
   264b0:	mvn	r0, r0
   264b4:	add	r7, r7, r0
   264b8:	cmp	r7, #7
   264bc:	bcs	26688 <grisu3_diy_fp_encode_double@@Base+0x258>
   264c0:	stm	sp, {r5, r8}
   264c4:	movw	r0, #29768	; 0x7448
   264c8:	movt	r0, #3
   264cc:	ldr	r1, [r0, r7, lsl #4]!
   264d0:	str	r1, [sp, #8]
   264d4:	ldmib	r0, {r1, r2}
   264d8:	ldr	r0, [r0, #12]
   264dc:	str	r0, [sp, #20]
   264e0:	str	r2, [sp, #16]
   264e4:	str	r1, [sp, #12]
   264e8:	add	r0, sp, #32
   264ec:	ldr	r2, [sp, #28]
   264f0:	mov	r3, sl
   264f4:	bl	26834 <grisu3_diy_fp_encode_double@@Base+0x404>
   264f8:	ldr	r0, [sp, #24]
   264fc:	add	r0, r0, r7
   26500:	add	r0, r0, #1
   26504:	cmp	r0, #19
   26508:	addgt	r4, r4, #4
   2650c:	ldr	r2, [sp, #32]
   26510:	ldr	sl, [sp, #36]	; 0x24
   26514:	ldr	r5, [sp, #40]	; 0x28
   26518:	ldr	r8, [sp, #44]	; 0x2c
   2651c:	add	r7, sp, #48	; 0x30
   26520:	ldm	r7, {r0, r1, r7}
   26524:	ldr	r3, [sp, #60]	; 0x3c
   26528:	stm	sp, {r5, r8}
   2652c:	add	ip, sp, #8
   26530:	stm	ip, {r0, r1, r7}
   26534:	str	r3, [sp, #20]
   26538:	add	r0, sp, #32
   2653c:	mov	r3, sl
   26540:	bl	26834 <grisu3_diy_fp_encode_double@@Base+0x404>
   26544:	add	r5, sp, #32
   26548:	ldm	r5, {r2, r3, r5}
   2654c:	ldr	r0, [sp, #44]	; 0x2c
   26550:	str	r5, [sp]
   26554:	str	r0, [sp, #4]
   26558:	add	r0, sp, #32
   2655c:	bl	266a8 <grisu3_diy_fp_encode_double@@Base+0x278>
   26560:	mov	r0, #9
   26564:	cmp	r4, #0
   26568:	movweq	r0, #8
   2656c:	add	r0, r0, r4
   26570:	ldr	r3, [sp, #32]
   26574:	ldr	r1, [sp, #36]	; 0x24
   26578:	ldr	r2, [sp, #40]	; 0x28
   2657c:	sub	r7, r5, r2
   26580:	lsl	r9, r0, r7
   26584:	add	r7, r2, #64	; 0x40
   26588:	movw	r0, #64462	; 0xfbce
   2658c:	movt	r0, #65535	; 0xffff
   26590:	add	r5, r0, #63	; 0x3f
   26594:	cmp	r7, r5
   26598:	bgt	265e8 <grisu3_diy_fp_encode_double@@Base+0x1b8>
   2659c:	mov	r6, #64	; 0x40
   265a0:	mvn	r5, #1072	; 0x430
   265a4:	cmp	r7, r5
   265a8:	blt	265b8 <grisu3_diy_fp_encode_double@@Base+0x188>
   265ac:	sub	r6, r0, r2
   265b0:	cmp	r6, #61	; 0x3d
   265b4:	blt	265e8 <grisu3_diy_fp_encode_double@@Base+0x1b8>
   265b8:	sub	r0, r6, #62	; 0x3e
   265bc:	mov	r7, #9
   265c0:	add	r9, r7, r9, asr r0
   265c4:	lsr	r3, r3, r0
   265c8:	rsb	r7, r6, #94	; 0x5e
   265cc:	orr	r3, r3, r1, lsl r7
   265d0:	subs	r7, r6, #94	; 0x5e
   265d4:	lsrpl	r3, r1, r7
   265d8:	add	r2, r0, r2
   265dc:	lsr	r1, r1, r0
   265e0:	movwpl	r1, #0
   265e4:	mov	r6, #62	; 0x3e
   265e8:	ldr	r8, [fp, #12]
   265ec:	lsr	r0, r3, r6
   265f0:	rsb	r7, r6, #32
   265f4:	orr	r0, r0, r1, lsl r7
   265f8:	subs	r7, r6, #32
   265fc:	lsrpl	r0, r1, r7
   26600:	add	r2, r2, r6
   26604:	lsr	r1, r1, r6
   26608:	movwpl	r1, #0
   2660c:	sub	r7, r6, #1
   26610:	mov	r5, #1
   26614:	lsl	r5, r5, r7
   26618:	subs	r7, r6, #33	; 0x21
   2661c:	movwpl	r5, #0
   26620:	add	r7, r9, r5, lsl #3
   26624:	lsl	sl, r5, #3
   26628:	and	r3, r5, r3
   2662c:	lsl	r5, r3, #3
   26630:	mov	r4, #0
   26634:	cmp	r6, r7
   26638:	blt	26658 <grisu3_diy_fp_encode_double@@Base+0x228>
   2663c:	adds	r0, r0, #1
   26640:	adc	r1, r1, #0
   26644:	tst	r1, #2097152	; 0x200000
   26648:	beq	26658 <grisu3_diy_fp_encode_double@@Base+0x228>
   2664c:	lsrs	r1, r1, #1
   26650:	rrx	r0, r0
   26654:	add	r2, r2, #1
   26658:	mov	r3, r4
   2665c:	bl	26894 <grisu3_diy_fp_encode_double@@Base+0x464>
   26660:	vstr	d0, [r8]
   26664:	cmp	r5, r7
   26668:	mov	r0, #0
   2666c:	movwge	r0, #1
   26670:	sub	r1, sl, r9
   26674:	cmp	r1, r5
   26678:	movwge	r4, #1
   2667c:	orr	r0, r0, r4
   26680:	sub	sp, fp, #28
   26684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26688:	movw	r0, #32436	; 0x7eb4
   2668c:	movt	r0, #3
   26690:	movw	r1, #32464	; 0x7ed0
   26694:	movt	r1, #3
   26698:	movw	r3, #32551	; 0x7f27
   2669c:	movt	r3, #3
   266a0:	mov	r2, #185	; 0xb9
   266a4:	bl	14f40 <__assert_fail@plt>
   266a8:	push	{r4, sl, fp, lr}
   266ac:	add	fp, sp, #8
   266b0:	orrs	r1, r2, r3
   266b4:	beq	2672c <grisu3_diy_fp_encode_double@@Base+0x2fc>
   266b8:	ldr	r1, [fp, #8]
   266bc:	mov	r4, #0
   266c0:	cmp	r4, r3, lsr #22
   266c4:	bne	266e0 <grisu3_diy_fp_encode_double@@Base+0x2b0>
   266c8:	lsl	r3, r3, #10
   266cc:	orr	r3, r3, r2, lsr #22
   266d0:	sub	r1, r1, #10
   266d4:	lsl	r2, r2, #10
   266d8:	cmp	r3, #4194304	; 0x400000
   266dc:	bcc	266c8 <grisu3_diy_fp_encode_double@@Base+0x298>
   266e0:	ldr	ip, [fp, #12]
   266e4:	cmp	r3, #0
   266e8:	bmi	26714 <grisu3_diy_fp_encode_double@@Base+0x2e4>
   266ec:	mvn	lr, #0
   266f0:	lsl	r3, r3, #1
   266f4:	orr	r3, r3, r2, lsr #31
   266f8:	sub	r1, r1, #1
   266fc:	lsl	r4, r2, #1
   26700:	subs	r2, lr, r2, lsl #1
   26704:	sbcs	r2, lr, r3
   26708:	mov	r2, r4
   2670c:	blt	266f0 <grisu3_diy_fp_encode_double@@Base+0x2c0>
   26710:	b	26718 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   26714:	mov	r4, r2
   26718:	str	r4, [r0]
   2671c:	str	r3, [r0, #4]
   26720:	str	r1, [r0, #8]
   26724:	str	ip, [r0, #12]
   26728:	pop	{r4, sl, fp, pc}
   2672c:	movw	r0, #33754	; 0x83da
   26730:	movt	r0, #3
   26734:	movw	r1, #33763	; 0x83e3
   26738:	movt	r1, #3
   2673c:	movw	r3, #33849	; 0x8439
   26740:	movt	r3, #3
   26744:	mov	r2, #260	; 0x104
   26748:	bl	14f40 <__assert_fail@plt>
   2674c:	push	{fp, lr}
   26750:	mov	fp, sp
   26754:	cmn	r0, #348	; 0x15c
   26758:	blt	267d4 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   2675c:	cmp	r0, #348	; 0x15c
   26760:	bge	267f4 <grisu3_diy_fp_encode_double@@Base+0x3c4>
   26764:	add	r2, r0, #348	; 0x15c
   26768:	asr	r3, r2, #31
   2676c:	add	r2, r2, r3, lsr #29
   26770:	mvn	r3, #14
   26774:	and	r2, r3, r2, lsl #1
   26778:	movw	r3, #29880	; 0x74b8
   2677c:	movt	r3, #3
   26780:	ldr	r2, [r3, r2]!
   26784:	str	r2, [r1]
   26788:	ldr	r2, [r3, #4]
   2678c:	str	r2, [r1, #4]
   26790:	ldrsh	r2, [r3, #8]
   26794:	str	r2, [r1, #8]
   26798:	ldrsh	r1, [r3, #10]
   2679c:	cmp	r1, r0
   267a0:	bgt	26814 <grisu3_diy_fp_encode_double@@Base+0x3e4>
   267a4:	add	r2, r1, #8
   267a8:	cmp	r2, r0
   267ac:	movgt	r0, r1
   267b0:	popgt	{fp, pc}
   267b4:	movw	r0, #34052	; 0x8504
   267b8:	movt	r0, #3
   267bc:	movw	r1, #32464	; 0x7ed0
   267c0:	movt	r1, #3
   267c4:	movw	r3, #33937	; 0x8491
   267c8:	movt	r3, #3
   267cc:	mov	r2, #89	; 0x59
   267d0:	bl	14f40 <__assert_fail@plt>
   267d4:	movw	r0, #33906	; 0x8472
   267d8:	movt	r0, #3
   267dc:	movw	r1, #32464	; 0x7ed0
   267e0:	movt	r1, #3
   267e4:	movw	r3, #33937	; 0x8491
   267e8:	movt	r3, #3
   267ec:	mov	r2, #80	; 0x50
   267f0:	bl	14f40 <__assert_fail@plt>
   267f4:	movw	r0, #33994	; 0x84ca
   267f8:	movt	r0, #3
   267fc:	movw	r1, #32464	; 0x7ed0
   26800:	movt	r1, #3
   26804:	movw	r3, #33937	; 0x8491
   26808:	movt	r3, #3
   2680c:	mov	r2, #81	; 0x51
   26810:	bl	14f40 <__assert_fail@plt>
   26814:	movw	r0, #34037	; 0x84f5
   26818:	movt	r0, #3
   2681c:	movw	r1, #32464	; 0x7ed0
   26820:	movt	r1, #3
   26824:	movw	r3, #33937	; 0x8491
   26828:	movt	r3, #3
   2682c:	mov	r2, #88	; 0x58
   26830:	bl	14f40 <__assert_fail@plt>
   26834:	push	{r4, r5, fp, lr}
   26838:	add	fp, sp, #8
   2683c:	ldr	ip, [fp, #24]
   26840:	ldr	r1, [fp, #8]
   26844:	add	r1, r1, ip
   26848:	add	r1, r1, #64	; 0x40
   2684c:	str	r1, [r0, #8]
   26850:	ldr	ip, [fp, #16]
   26854:	umull	r1, lr, ip, r2
   26858:	umull	ip, r1, ip, r3
   2685c:	mov	r5, #0
   26860:	adds	lr, ip, lr
   26864:	adc	r5, r5, #0
   26868:	ldr	ip, [fp, #20]
   2686c:	umull	r2, r4, ip, r2
   26870:	adds	r2, lr, r2
   26874:	adc	r5, r5, #0
   26878:	umaal	r1, r4, ip, r3
   2687c:	adds	r2, r2, #-2147483648	; 0x80000000
   26880:	adcs	r1, r1, r5
   26884:	str	r1, [r0]
   26888:	adc	r1, r4, #0
   2688c:	str	r1, [r0, #4]
   26890:	pop	{r4, r5, fp, pc}
   26894:	push	{r4, sl, fp, lr}
   26898:	add	fp, sp, #8
   2689c:	cmp	r1, #2097152	; 0x200000
   268a0:	bcc	268c4 <grisu3_diy_fp_encode_double@@Base+0x494>
   268a4:	mov	r4, #0
   268a8:	lsrs	r3, r1, #1
   268ac:	rrx	r0, r0
   268b0:	add	r2, r2, #1
   268b4:	cmp	r4, r1, lsr #22
   268b8:	mov	r1, r3
   268bc:	bne	268a8 <grisu3_diy_fp_encode_double@@Base+0x478>
   268c0:	b	268c8 <grisu3_diy_fp_encode_double@@Base+0x498>
   268c4:	mov	r3, r1
   268c8:	movw	ip, #64462	; 0xfbce
   268cc:	movt	ip, #65535	; 0xffff
   268d0:	cmp	r2, ip
   268d4:	bge	268e0 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   268d8:	vmov.i32	d0, #0	; 0x00000000
   268dc:	pop	{r4, sl, fp, pc}
   268e0:	and	r1, r3, #1048576	; 0x100000
   268e4:	mov	r4, #1
   268e8:	eor	lr, r4, r1, lsr #20
   268ec:	cmp	r2, ip
   268f0:	beq	26938 <grisu3_diy_fp_encode_double@@Base+0x508>
   268f4:	cmp	r1, #0
   268f8:	bne	26938 <grisu3_diy_fp_encode_double@@Base+0x508>
   268fc:	mov	r4, #1
   26900:	lsl	r1, r3, #1
   26904:	orr	r1, r1, r0, lsr #31
   26908:	and	r3, r3, #524288	; 0x80000
   2690c:	eor	lr, r4, r3, lsr #19
   26910:	lsl	r0, r0, #1
   26914:	sub	r2, r2, #1
   26918:	cmp	r2, ip
   2691c:	ble	2692c <grisu3_diy_fp_encode_double@@Base+0x4fc>
   26920:	cmp	r3, #0
   26924:	mov	r3, r1
   26928:	beq	26900 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   2692c:	cmp	r2, ip
   26930:	beq	26944 <grisu3_diy_fp_encode_double@@Base+0x514>
   26934:	b	26954 <grisu3_diy_fp_encode_double@@Base+0x524>
   26938:	mov	r1, r3
   2693c:	cmp	r2, ip
   26940:	bne	26954 <grisu3_diy_fp_encode_double@@Base+0x524>
   26944:	mov	r3, #0
   26948:	cmp	lr, #0
   2694c:	mov	r4, #0
   26950:	bne	26964 <grisu3_diy_fp_encode_double@@Base+0x534>
   26954:	movw	r3, #1075	; 0x433
   26958:	add	r2, r2, r3
   2695c:	lsl	r4, r2, #20
   26960:	mov	r3, #0
   26964:	orr	r0, r3, r0
   26968:	bfc	r1, #20, #12
   2696c:	orr	r1, r4, r1
   26970:	pop	{r4, sl, fp, lr}
   26974:	b	28fc0 <flatcc_json_parser_struct_as_root@@Base+0xb4>

00026978 <flatcc_json_parser_error_string@@Base>:
   26978:	cmp	r0, #34	; 0x22
   2697c:	movwhi	r0, #29606	; 0x73a6
   26980:	movthi	r0, #3
   26984:	bxhi	lr
   26988:	movw	r1, #32296	; 0x7e28
   2698c:	movt	r1, #3
   26990:	ldr	r0, [r1, r0, lsl #2]
   26994:	bx	lr

00026998 <flatcc_json_parser_set_error@@Base>:
   26998:	mov	ip, r2
   2699c:	ldr	r2, [r0, #24]
   269a0:	cmp	r2, #0
   269a4:	beq	269b0 <flatcc_json_parser_set_error@@Base+0x18>
   269a8:	mov	r0, ip
   269ac:	bx	lr
   269b0:	str	r1, [r0, #36]	; 0x24
   269b4:	ldr	r2, [r0, #4]
   269b8:	sub	r1, r1, r2
   269bc:	add	r1, r1, #1
   269c0:	str	r1, [r0, #20]
   269c4:	str	r3, [r0, #24]
   269c8:	mov	r0, ip
   269cc:	bx	lr

000269d0 <flatcc_json_parser_string_part@@Base>:
   269d0:	push	{fp, lr}
   269d4:	mov	fp, sp
   269d8:	cmp	r1, r2
   269dc:	beq	26a04 <flatcc_json_parser_string_part@@Base+0x34>
   269e0:	ldrb	r3, [r1]
   269e4:	cmp	r3, #32
   269e8:	bcc	26a18 <flatcc_json_parser_string_part@@Base+0x48>
   269ec:	cmp	r3, #34	; 0x22
   269f0:	cmpne	r3, #92	; 0x5c
   269f4:	beq	26a10 <flatcc_json_parser_string_part@@Base+0x40>
   269f8:	add	r1, r1, #1
   269fc:	cmp	r2, r1
   26a00:	bne	269e0 <flatcc_json_parser_string_part@@Base+0x10>
   26a04:	mov	r3, #20
   26a08:	bl	26998 <flatcc_json_parser_set_error@@Base>
   26a0c:	mov	r1, r0
   26a10:	mov	r0, r1
   26a14:	pop	{fp, pc}
   26a18:	mov	r3, #17
   26a1c:	b	26a08 <flatcc_json_parser_string_part@@Base+0x38>

00026a20 <flatcc_json_parser_space_ext@@Base>:
   26a20:	push	{fp, lr}
   26a24:	mov	fp, sp
   26a28:	mov	ip, r1
   26a2c:	cmp	ip, r2
   26a30:	beq	26a68 <flatcc_json_parser_space_ext@@Base+0x48>
   26a34:	ldrb	r3, [ip]
   26a38:	cmp	r3, #32
   26a3c:	bne	26a68 <flatcc_json_parser_space_ext@@Base+0x48>
   26a40:	add	ip, ip, #1
   26a44:	cmp	r2, ip
   26a48:	bne	26a34 <flatcc_json_parser_space_ext@@Base+0x14>
   26a4c:	b	26a68 <flatcc_json_parser_space_ext@@Base+0x48>
   26a50:	add	ip, ip, r3
   26a54:	add	ip, ip, #1
   26a58:	str	ip, [r0, #4]
   26a5c:	ldr	r1, [r0, #16]
   26a60:	add	r1, r1, #1
   26a64:	str	r1, [r0, #16]
   26a68:	cmp	ip, r2
   26a6c:	beq	26b34 <flatcc_json_parser_space_ext@@Base+0x114>
   26a70:	ldrb	r3, [ip]
   26a74:	cmp	r3, #32
   26a78:	bhi	26b34 <flatcc_json_parser_space_ext@@Base+0x114>
   26a7c:	sub	r3, r3, #9
   26a80:	cmp	r3, #23
   26a84:	bhi	26b24 <flatcc_json_parser_space_ext@@Base+0x104>
   26a88:	add	r1, pc, #0
   26a8c:	ldr	pc, [r1, r3, lsl #2]
   26a90:	strdeq	r6, [r2], -r0
   26a94:	andeq	r6, r2, r4, asr sl
   26a98:	andeq	r6, r2, r4, lsr #22
   26a9c:	andeq	r6, r2, r4, lsr #22
   26aa0:	andeq	r6, r2, r0, lsl #22
   26aa4:	andeq	r6, r2, r4, lsr #22
   26aa8:	andeq	r6, r2, r4, lsr #22
   26aac:	andeq	r6, r2, r4, lsr #22
   26ab0:	andeq	r6, r2, r4, lsr #22
   26ab4:	andeq	r6, r2, r4, lsr #22
   26ab8:	andeq	r6, r2, r4, lsr #22
   26abc:	andeq	r6, r2, r4, lsr #22
   26ac0:	andeq	r6, r2, r4, lsr #22
   26ac4:	andeq	r6, r2, r4, lsr #22
   26ac8:	andeq	r6, r2, r4, lsr #22
   26acc:	andeq	r6, r2, r4, lsr #22
   26ad0:	andeq	r6, r2, r4, lsr #22
   26ad4:	andeq	r6, r2, r4, lsr #22
   26ad8:	andeq	r6, r2, r4, lsr #22
   26adc:	andeq	r6, r2, r4, lsr #22
   26ae0:	andeq	r6, r2, r4, lsr #22
   26ae4:	andeq	r6, r2, r4, lsr #22
   26ae8:	andeq	r6, r2, r4, lsr #22
   26aec:	andeq	r6, r2, ip, lsr #20
   26af0:	add	ip, ip, #1
   26af4:	cmp	ip, r2
   26af8:	bne	26a70 <flatcc_json_parser_space_ext@@Base+0x50>
   26afc:	b	26b34 <flatcc_json_parser_space_ext@@Base+0x114>
   26b00:	sub	r1, r2, ip
   26b04:	mov	r3, #0
   26b08:	cmp	r1, #2
   26b0c:	blt	26a50 <flatcc_json_parser_space_ext@@Base+0x30>
   26b10:	ldrb	r1, [ip, #1]
   26b14:	sub	r1, r1, #10
   26b18:	clz	r1, r1
   26b1c:	lsr	r3, r1, #5
   26b20:	b	26a50 <flatcc_json_parser_space_ext@@Base+0x30>
   26b24:	mov	r1, ip
   26b28:	mov	r3, #5
   26b2c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   26b30:	mov	ip, r0
   26b34:	mov	r0, ip
   26b38:	pop	{fp, pc}

00026b3c <flatcc_json_parser_string_escape@@Base>:
   26b3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26b40:	add	fp, sp, #24
   26b44:	sub	r7, r2, r1
   26b48:	cmp	r7, #2
   26b4c:	blt	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26b50:	ldrb	r6, [r1]
   26b54:	cmp	r6, #92	; 0x5c
   26b58:	bne	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26b5c:	ldrb	r6, [r1, #1]
   26b60:	sub	r6, r6, #34	; 0x22
   26b64:	cmp	r6, #86	; 0x56
   26b68:	bhi	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26b6c:	add	r5, pc, #0
   26b70:	ldr	pc, [r5, r6, lsl #2]
   26b74:	ldrdeq	r6, [r2], -r0
   26b78:	andeq	r6, r2, ip, asr #26
   26b7c:	andeq	r6, r2, ip, asr #26
   26b80:	andeq	r6, r2, ip, asr #26
   26b84:	andeq	r6, r2, ip, asr #26
   26b88:	andeq	r6, r2, ip, asr #26
   26b8c:	andeq	r6, r2, ip, asr #26
   26b90:	andeq	r6, r2, ip, asr #26
   26b94:	andeq	r6, r2, ip, asr #26
   26b98:	andeq	r6, r2, ip, asr #26
   26b9c:	andeq	r6, r2, ip, asr #26
   26ba0:	andeq	r6, r2, ip, asr #26
   26ba4:	andeq	r6, r2, ip, asr #26
   26ba8:	ldrdeq	r6, [r2], -r8
   26bac:	andeq	r6, r2, ip, asr #26
   26bb0:	andeq	r6, r2, ip, asr #26
   26bb4:	andeq	r6, r2, ip, asr #26
   26bb8:	andeq	r6, r2, ip, asr #26
   26bbc:	andeq	r6, r2, ip, asr #26
   26bc0:	andeq	r6, r2, ip, asr #26
   26bc4:	andeq	r6, r2, ip, asr #26
   26bc8:	andeq	r6, r2, ip, asr #26
   26bcc:	andeq	r6, r2, ip, asr #26
   26bd0:	andeq	r6, r2, ip, asr #26
   26bd4:	andeq	r6, r2, ip, asr #26
   26bd8:	andeq	r6, r2, ip, asr #26
   26bdc:	andeq	r6, r2, ip, asr #26
   26be0:	andeq	r6, r2, ip, asr #26
   26be4:	andeq	r6, r2, ip, asr #26
   26be8:	andeq	r6, r2, ip, asr #26
   26bec:	andeq	r6, r2, ip, asr #26
   26bf0:	andeq	r6, r2, ip, asr #26
   26bf4:	andeq	r6, r2, ip, asr #26
   26bf8:	andeq	r6, r2, ip, asr #26
   26bfc:	andeq	r6, r2, ip, asr #26
   26c00:	andeq	r6, r2, ip, asr #26
   26c04:	andeq	r6, r2, ip, asr #26
   26c08:	andeq	r6, r2, ip, asr #26
   26c0c:	andeq	r6, r2, ip, asr #26
   26c10:	andeq	r6, r2, ip, asr #26
   26c14:	andeq	r6, r2, ip, asr #26
   26c18:	andeq	r6, r2, ip, asr #26
   26c1c:	andeq	r6, r2, ip, asr #26
   26c20:	andeq	r6, r2, ip, asr #26
   26c24:	andeq	r6, r2, ip, asr #26
   26c28:	andeq	r6, r2, ip, asr #26
   26c2c:	andeq	r6, r2, ip, asr #26
   26c30:	andeq	r6, r2, ip, asr #26
   26c34:	andeq	r6, r2, ip, asr #26
   26c38:	andeq	r6, r2, ip, asr #26
   26c3c:	andeq	r6, r2, ip, asr #26
   26c40:	andeq	r6, r2, ip, asr #26
   26c44:	andeq	r6, r2, ip, asr #26
   26c48:	andeq	r6, r2, ip, asr #26
   26c4c:	andeq	r6, r2, ip, asr #26
   26c50:	andeq	r6, r2, ip, asr #26
   26c54:	andeq	r6, r2, ip, asr #26
   26c58:	andeq	r6, r2, ip, asr #26
   26c5c:	andeq	r6, r2, r0, ror #25
   26c60:	andeq	r6, r2, ip, asr #26
   26c64:	andeq	r6, r2, ip, asr #26
   26c68:	andeq	r6, r2, ip, asr #26
   26c6c:	andeq	r6, r2, ip, asr #26
   26c70:	andeq	r6, r2, ip, asr #26
   26c74:	andeq	r6, r2, r8, ror #25
   26c78:	andeq	r6, r2, ip, asr #26
   26c7c:	andeq	r6, r2, ip, asr #26
   26c80:	andeq	r6, r2, ip, asr #26
   26c84:	strdeq	r6, [r2], -r0
   26c88:	andeq	r6, r2, ip, asr #26
   26c8c:	andeq	r6, r2, ip, asr #26
   26c90:	andeq	r6, r2, ip, asr #26
   26c94:	andeq	r6, r2, ip, asr #26
   26c98:	andeq	r6, r2, ip, asr #26
   26c9c:	andeq	r6, r2, ip, asr #26
   26ca0:	andeq	r6, r2, ip, asr #26
   26ca4:	strdeq	r6, [r2], -r8
   26ca8:	andeq	r6, r2, ip, asr #26
   26cac:	andeq	r6, r2, ip, asr #26
   26cb0:	andeq	r6, r2, ip, asr #26
   26cb4:	andeq	r6, r2, r0, lsl #26
   26cb8:	andeq	r6, r2, ip, asr #26
   26cbc:	andeq	r6, r2, r8, lsl #26
   26cc0:	andeq	r6, r2, r8, lsl sp
   26cc4:	andeq	r6, r2, ip, asr #26
   26cc8:	andeq	r6, r2, ip, asr #26
   26ccc:	andeq	r6, r2, ip, lsr sp
   26cd0:	movw	r0, #8705	; 0x2201
   26cd4:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26cd8:	movw	r0, #12033	; 0x2f01
   26cdc:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26ce0:	movw	r0, #23553	; 0x5c01
   26ce4:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26ce8:	movw	r0, #2049	; 0x801
   26cec:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26cf0:	movw	r0, #3073	; 0xc01
   26cf4:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26cf8:	movw	r0, #2561	; 0xa01
   26cfc:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26d00:	movw	r0, #3329	; 0xd01
   26d04:	b	26d0c <flatcc_json_parser_string_escape@@Base+0x1d0>
   26d08:	movw	r0, #2305	; 0x901
   26d0c:	strh	r0, [r3]
   26d10:	add	r0, r1, #2
   26d14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26d18:	cmp	r7, #5
   26d1c:	ble	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26d20:	ldrb	r7, [r1, #2]
   26d24:	sub	r6, r7, #48	; 0x30
   26d28:	uxtb	r6, r6
   26d2c:	cmp	r6, #9
   26d30:	bhi	26d7c <flatcc_json_parser_string_escape@@Base+0x240>
   26d34:	lsl	ip, r7, #12
   26d38:	b	26d9c <flatcc_json_parser_string_escape@@Base+0x260>
   26d3c:	mov	r6, #1
   26d40:	strb	r6, [r3]
   26d44:	cmp	r7, #3
   26d48:	bgt	26d60 <flatcc_json_parser_string_escape@@Base+0x224>
   26d4c:	mov	r7, #0
   26d50:	strb	r7, [r3]
   26d54:	mov	r3, #18
   26d58:	bl	26998 <flatcc_json_parser_set_error@@Base>
   26d5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26d60:	ldrb	r7, [r1, #2]
   26d64:	sub	r6, r7, #48	; 0x30
   26d68:	uxtb	r6, r6
   26d6c:	cmp	r6, #9
   26d70:	bhi	26db8 <flatcc_json_parser_string_escape@@Base+0x27c>
   26d74:	lsl	r6, r7, #4
   26d78:	b	26dd4 <flatcc_json_parser_string_escape@@Base+0x298>
   26d7c:	orr	r6, r7, #32
   26d80:	sub	r6, r6, #97	; 0x61
   26d84:	uxtb	r6, r6
   26d88:	cmp	r6, #5
   26d8c:	bhi	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26d90:	movw	r6, #36864	; 0x9000
   26d94:	movt	r6, #65535	; 0xffff
   26d98:	add	ip, r6, r7, lsl #12
   26d9c:	ldrb	lr, [r1, #3]
   26da0:	sub	r4, lr, #48	; 0x30
   26da4:	uxtb	r4, r4
   26da8:	cmp	r4, #10
   26dac:	bcs	26e10 <flatcc_json_parser_string_escape@@Base+0x2d4>
   26db0:	mov	r8, #53248	; 0xd000
   26db4:	b	26e28 <flatcc_json_parser_string_escape@@Base+0x2ec>
   26db8:	orr	r6, r7, #32
   26dbc:	sub	r6, r6, #97	; 0x61
   26dc0:	uxtb	r6, r6
   26dc4:	cmp	r6, #5
   26dc8:	bhi	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26dcc:	mvn	r6, #111	; 0x6f
   26dd0:	add	r6, r6, r7, lsl #4
   26dd4:	ldrb	r5, [r1, #3]
   26dd8:	sub	r7, r5, #48	; 0x30
   26ddc:	uxtb	r4, r7
   26de0:	cmp	r4, #9
   26de4:	bls	26e00 <flatcc_json_parser_string_escape@@Base+0x2c4>
   26de8:	orr	r7, r5, #32
   26dec:	sub	r5, r7, #97	; 0x61
   26df0:	uxtb	r5, r5
   26df4:	cmp	r5, #5
   26df8:	bhi	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26dfc:	sub	r7, r7, #87	; 0x57
   26e00:	orr	r0, r7, r6
   26e04:	strb	r0, [r3, #1]
   26e08:	add	r0, r1, #4
   26e0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26e10:	orr	lr, lr, #32
   26e14:	sub	r4, lr, #97	; 0x61
   26e18:	uxtb	r4, r4
   26e1c:	mov	r8, #43264	; 0xa900
   26e20:	cmp	r4, #6
   26e24:	bcs	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26e28:	ldrb	r5, [r1, #4]
   26e2c:	sub	r4, r5, #48	; 0x30
   26e30:	uxtb	r4, r4
   26e34:	cmp	r4, #10
   26e38:	bcs	26e44 <flatcc_json_parser_string_escape@@Base+0x308>
   26e3c:	mov	r9, #64768	; 0xfd00
   26e40:	b	26e5c <flatcc_json_parser_string_escape@@Base+0x320>
   26e44:	orr	r5, r5, #32
   26e48:	sub	r4, r5, #97	; 0x61
   26e4c:	uxtb	r4, r4
   26e50:	movw	r9, #64144	; 0xfa90
   26e54:	cmp	r4, #6
   26e58:	bcs	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26e5c:	ldrb	r7, [r1, #5]
   26e60:	sub	r4, r7, #48	; 0x30
   26e64:	uxtb	r4, r4
   26e68:	cmp	r4, #10
   26e6c:	bcs	26e7c <flatcc_json_parser_string_escape@@Base+0x340>
   26e70:	mvn	r0, #86	; 0x56
   26e74:	add	r4, r0, #39	; 0x27
   26e78:	b	26e94 <flatcc_json_parser_string_escape@@Base+0x358>
   26e7c:	movw	r4, #65449	; 0xffa9
   26e80:	orr	r7, r7, #32
   26e84:	sub	r6, r7, #97	; 0x61
   26e88:	uxtb	r6, r6
   26e8c:	cmp	r6, #6
   26e90:	bcs	26d4c <flatcc_json_parser_string_escape@@Base+0x210>
   26e94:	add	r0, r8, lr, lsl #8
   26e98:	orr	r0, r0, ip
   26e9c:	add	r2, r9, r5, lsl #4
   26ea0:	orr	r0, r0, r2
   26ea4:	add	r2, r4, r7
   26ea8:	orr	r0, r0, r2
   26eac:	uxth	r7, r0
   26eb0:	cmp	r7, #127	; 0x7f
   26eb4:	bhi	26ec4 <flatcc_json_parser_string_escape@@Base+0x388>
   26eb8:	mov	r2, #1
   26ebc:	strb	r2, [r3]
   26ec0:	b	26f14 <flatcc_json_parser_string_escape@@Base+0x3d8>
   26ec4:	mov	r2, #0
   26ec8:	cmp	r2, r7, lsr #11
   26ecc:	bne	26ee8 <flatcc_json_parser_string_escape@@Base+0x3ac>
   26ed0:	mov	r2, #2
   26ed4:	strb	r2, [r3]
   26ed8:	mov	r7, #192	; 0xc0
   26edc:	orr	r7, r7, r0, lsr #6
   26ee0:	strb	r7, [r3, #1]
   26ee4:	b	26f0c <flatcc_json_parser_string_escape@@Base+0x3d0>
   26ee8:	mov	r2, #3
   26eec:	strb	r2, [r3]
   26ef0:	mov	r6, #224	; 0xe0
   26ef4:	orr	r6, r6, r7, lsr #12
   26ef8:	strb	r6, [r3, #1]
   26efc:	lsr	r7, r7, #6
   26f00:	mov	r6, #2
   26f04:	bfi	r7, r6, #6, #26
   26f08:	strb	r7, [r3, #2]
   26f0c:	mvn	r7, #-67108863	; 0xfc000001
   26f10:	bfi	r0, r7, #6, #26
   26f14:	strb	r0, [r3, r2]
   26f18:	add	r0, r1, #6
   26f1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00026f20 <flatcc_json_parser_skip_constant@@Base>:
   26f20:	push	{r4, r5, r6, sl, fp, lr}
   26f24:	add	fp, sp, #16
   26f28:	mov	r4, r1
   26f2c:	cmp	r1, r2
   26f30:	beq	26fa4 <flatcc_json_parser_skip_constant@@Base+0x84>
   26f34:	mov	r5, r2
   26f38:	mov	r6, r0
   26f3c:	ldrsb	r0, [r4]
   26f40:	cmp	r0, #0
   26f44:	bmi	26f54 <flatcc_json_parser_skip_constant@@Base+0x34>
   26f48:	cmp	r0, #95	; 0x5f
   26f4c:	cmpne	r0, #46	; 0x2e
   26f50:	bne	26f64 <flatcc_json_parser_skip_constant@@Base+0x44>
   26f54:	add	r4, r4, #1
   26f58:	cmp	r4, r5
   26f5c:	bne	26f3c <flatcc_json_parser_skip_constant@@Base+0x1c>
   26f60:	b	26fa4 <flatcc_json_parser_skip_constant@@Base+0x84>
   26f64:	sub	r1, r0, #48	; 0x30
   26f68:	uxtb	r1, r1
   26f6c:	cmp	r1, #9
   26f70:	bls	26f54 <flatcc_json_parser_skip_constant@@Base+0x34>
   26f74:	orr	r0, r0, #32
   26f78:	sub	r0, r0, #97	; 0x61
   26f7c:	uxtb	r0, r0
   26f80:	cmp	r0, #25
   26f84:	bls	26f54 <flatcc_json_parser_skip_constant@@Base+0x34>
   26f88:	mov	r0, r6
   26f8c:	mov	r1, r4
   26f90:	mov	r2, r5
   26f94:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   26f98:	cmp	r0, r4
   26f9c:	mov	r4, r0
   26fa0:	bne	26f58 <flatcc_json_parser_skip_constant@@Base+0x38>
   26fa4:	mov	r0, r4
   26fa8:	pop	{r4, r5, r6, sl, fp, pc}
   26fac:	sub	r3, r2, r1
   26fb0:	cmp	r3, #2
   26fb4:	blt	26fe0 <flatcc_json_parser_skip_constant@@Base+0xc0>
   26fb8:	ldrb	r3, [r1]
   26fbc:	cmp	r3, #32
   26fc0:	movhi	r0, r1
   26fc4:	bxhi	lr
   26fc8:	bne	26fe0 <flatcc_json_parser_skip_constant@@Base+0xc0>
   26fcc:	mov	ip, r1
   26fd0:	ldrb	r3, [ip, #1]!
   26fd4:	cmp	r3, #32
   26fd8:	movhi	r0, ip
   26fdc:	bxhi	lr
   26fe0:	b	26a20 <flatcc_json_parser_space_ext@@Base>

00026fe4 <flatcc_json_parser_match_constant@@Base>:
   26fe4:	push	{r4, r5, r6, r7, fp, lr}
   26fe8:	add	fp, sp, #16
   26fec:	mov	r5, r2
   26ff0:	mov	r4, r1
   26ff4:	mov	r2, r0
   26ff8:	sub	r0, r5, r1
   26ffc:	ldr	r7, [fp, #8]
   27000:	cmp	r0, r3
   27004:	ble	270e4 <flatcc_json_parser_match_constant@@Base+0x100>
   27008:	add	r6, r4, r3
   2700c:	ldr	r0, [r2, #12]
   27010:	cmp	r0, #0
   27014:	beq	2707c <flatcc_json_parser_match_constant@@Base+0x98>
   27018:	mov	r0, r2
   2701c:	mov	r1, r6
   27020:	mov	r2, r5
   27024:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27028:	cmp	r0, r5
   2702c:	beq	270f4 <flatcc_json_parser_match_constant@@Base+0x110>
   27030:	cmp	r0, r6
   27034:	beq	27060 <flatcc_json_parser_match_constant@@Base+0x7c>
   27038:	ldrsb	r1, [r0]
   2703c:	cmp	r1, #95	; 0x5f
   27040:	beq	27100 <flatcc_json_parser_match_constant@@Base+0x11c>
   27044:	cmn	r1, #1
   27048:	ble	27100 <flatcc_json_parser_match_constant@@Base+0x11c>
   2704c:	orr	r1, r1, #32
   27050:	sub	r1, r1, #97	; 0x61
   27054:	uxtb	r1, r1
   27058:	cmp	r1, #25
   2705c:	bls	27100 <flatcc_json_parser_match_constant@@Base+0x11c>
   27060:	mov	r1, #0
   27064:	str	r1, [r7]
   27068:	ldrb	r1, [r0]
   2706c:	cmp	r1, #44	; 0x2c
   27070:	cmpne	r1, #93	; 0x5d
   27074:	bne	2712c <flatcc_json_parser_match_constant@@Base+0x148>
   27078:	pop	{r4, r5, r6, r7, fp, pc}
   2707c:	ldrb	r0, [r6]
   27080:	cmp	r0, #92	; 0x5c
   27084:	beq	2710c <flatcc_json_parser_match_constant@@Base+0x128>
   27088:	cmp	r0, #34	; 0x22
   2708c:	beq	270c8 <flatcc_json_parser_match_constant@@Base+0xe4>
   27090:	cmp	r0, #32
   27094:	bne	270e4 <flatcc_json_parser_match_constant@@Base+0x100>
   27098:	add	r0, r4, r3
   2709c:	add	r6, r0, #1
   270a0:	mov	r0, r6
   270a4:	cmp	r5, r6
   270a8:	beq	270f4 <flatcc_json_parser_match_constant@@Base+0x110>
   270ac:	mov	r6, r0
   270b0:	ldrb	r1, [r6], #1
   270b4:	cmp	r1, #32
   270b8:	beq	270a0 <flatcc_json_parser_match_constant@@Base+0xbc>
   270bc:	ldrb	r1, [r6, #-1]!
   270c0:	cmp	r1, #34	; 0x22
   270c4:	bne	27100 <flatcc_json_parser_match_constant@@Base+0x11c>
   270c8:	add	r1, r6, #1
   270cc:	mov	r4, #0
   270d0:	mov	r0, r2
   270d4:	mov	r2, #0
   270d8:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   270dc:	str	r4, [r7]
   270e0:	pop	{r4, r5, r6, r7, fp, pc}
   270e4:	mov	r0, #0
   270e8:	str	r0, [r7]
   270ec:	mov	r0, r4
   270f0:	pop	{r4, r5, r6, r7, fp, pc}
   270f4:	mov	r1, #0
   270f8:	str	r1, [r7]
   270fc:	pop	{r4, r5, r6, r7, fp, pc}
   27100:	mov	r1, #1
   27104:	str	r1, [r7]
   27108:	pop	{r4, r5, r6, r7, fp, pc}
   2710c:	mov	r0, #0
   27110:	str	r0, [r7]
   27114:	mov	r0, r2
   27118:	mov	r1, r6
   2711c:	mov	r2, r5
   27120:	mov	r3, #18
   27124:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27128:	pop	{r4, r5, r6, r7, fp, pc}
   2712c:	cmp	r1, #125	; 0x7d
   27130:	movne	r0, r4
   27134:	pop	{r4, r5, r6, r7, fp, pc}

00027138 <flatcc_json_parser_unmatched_symbol@@Base>:
   27138:	push	{r4, r5, fp, lr}
   2713c:	add	fp, sp, #8
   27140:	mov	r4, r2
   27144:	mov	r5, r0
   27148:	ldrb	r0, [r0, #8]
   2714c:	tst	r0, #1
   27150:	bne	27168 <flatcc_json_parser_unmatched_symbol@@Base+0x30>
   27154:	mov	r0, r5
   27158:	mov	r2, r4
   2715c:	mov	r3, #13
   27160:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27164:	pop	{r4, r5, fp, pc}
   27168:	mov	r0, r5
   2716c:	mov	r2, r4
   27170:	bl	271d4 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   27174:	mov	r1, r0
   27178:	mov	r0, r5
   2717c:	mov	r2, r4
   27180:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27184:	mov	r1, r0
   27188:	cmp	r0, r4
   2718c:	beq	271c0 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   27190:	ldrb	r0, [r1]
   27194:	cmp	r0, #58	; 0x3a
   27198:	bne	271c0 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   2719c:	add	r1, r1, #1
   271a0:	mov	r0, r5
   271a4:	mov	r2, r4
   271a8:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   271ac:	mov	r1, r0
   271b0:	mov	r0, r5
   271b4:	mov	r2, r4
   271b8:	pop	{r4, r5, fp, lr}
   271bc:	b	272ec <flatcc_json_parser_generic_json@@Base>
   271c0:	mov	r0, r5
   271c4:	mov	r2, r4
   271c8:	mov	r3, #4
   271cc:	bl	26998 <flatcc_json_parser_set_error@@Base>
   271d0:	pop	{r4, r5, fp, pc}
   271d4:	push	{fp, lr}
   271d8:	mov	fp, sp
   271dc:	mov	lr, r1
   271e0:	ldr	r1, [r0, #12]
   271e4:	cmp	r1, #0
   271e8:	beq	27294 <flatcc_json_parser_unmatched_symbol@@Base+0x15c>
   271ec:	cmp	lr, r2
   271f0:	beq	272e4 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   271f4:	ldrb	r3, [lr]
   271f8:	mov	ip, #0
   271fc:	cmp	r3, #33	; 0x21
   27200:	bcc	27270 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   27204:	add	r1, lr, #1
   27208:	mov	ip, r3
   2720c:	mov	lr, r1
   27210:	uxtb	r1, r3
   27214:	cmp	r1, #46	; 0x2e
   27218:	cmpne	r1, #95	; 0x5f
   2721c:	bne	2723c <flatcc_json_parser_unmatched_symbol@@Base+0x104>
   27220:	cmp	r2, lr
   27224:	beq	27270 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   27228:	mov	r1, lr
   2722c:	ldrb	r3, [r1], #1
   27230:	cmp	r3, #33	; 0x21
   27234:	bcs	27208 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   27238:	b	27270 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   2723c:	sxtb	r1, ip
   27240:	cmp	r1, #0
   27244:	bmi	27220 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   27248:	sub	r1, ip, #48	; 0x30
   2724c:	uxtb	r1, r1
   27250:	cmp	r1, #9
   27254:	bls	27220 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   27258:	orr	r1, ip, #32
   2725c:	sub	r1, r1, #97	; 0x61
   27260:	uxtb	r1, r1
   27264:	cmp	r1, #26
   27268:	bcc	27220 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   2726c:	sub	lr, lr, #1
   27270:	uxtb	r1, ip
   27274:	cmp	r1, #46	; 0x2e
   27278:	bne	272e4 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   2727c:	mov	r1, lr
   27280:	mov	r3, #5
   27284:	b	272dc <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   27288:	cmp	r1, #34	; 0x22
   2728c:	beq	272c8 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   27290:	add	lr, lr, #1
   27294:	cmp	lr, r2
   27298:	beq	272d4 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   2729c:	ldrb	r1, [lr]
   272a0:	cmp	r1, #92	; 0x5c
   272a4:	bne	27288 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
   272a8:	sub	r1, r2, lr
   272ac:	cmp	r1, #2
   272b0:	blt	272bc <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   272b4:	add	lr, lr, #1
   272b8:	b	27290 <flatcc_json_parser_unmatched_symbol@@Base+0x158>
   272bc:	ldrb	r1, [lr]
   272c0:	cmp	r1, #34	; 0x22
   272c4:	bne	272d4 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   272c8:	add	lr, lr, #1
   272cc:	mov	r0, lr
   272d0:	pop	{fp, pc}
   272d4:	mov	r1, lr
   272d8:	mov	r3, #20
   272dc:	bl	26998 <flatcc_json_parser_set_error@@Base>
   272e0:	mov	lr, r0
   272e4:	mov	r0, lr
   272e8:	pop	{fp, pc}

000272ec <flatcc_json_parser_generic_json@@Base>:
   272ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   272f0:	add	fp, sp, #28
   272f4:	sub	sp, sp, #524	; 0x20c
   272f8:	mov	r7, r1
   272fc:	mov	r6, #0
   27300:	str	r6, [sp]
   27304:	cmp	r1, r2
   27308:	beq	275b4 <flatcc_json_parser_generic_json@@Base+0x2c8>
   2730c:	mov	r4, r2
   27310:	mov	r5, r0
   27314:	add	sl, sp, #8
   27318:	sub	r8, sl, #1
   2731c:	mov	r9, sp
   27320:	mov	r0, sl
   27324:	cmp	r6, #0
   27328:	beq	27394 <flatcc_json_parser_generic_json@@Base+0xa8>
   2732c:	ldrb	r0, [r0, #-1]
   27330:	cmp	r0, #125	; 0x7d
   27334:	bne	27394 <flatcc_json_parser_generic_json@@Base+0xa8>
   27338:	mov	r0, r5
   2733c:	mov	r1, r7
   27340:	mov	r2, r4
   27344:	bl	2781c <flatcc_json_parser_float@@Base+0x140>
   27348:	mov	r1, r0
   2734c:	mov	r0, r5
   27350:	mov	r2, r4
   27354:	bl	271d4 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   27358:	mov	r1, r0
   2735c:	mov	r0, r5
   27360:	mov	r2, r4
   27364:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27368:	mov	r1, r0
   2736c:	cmp	r0, r4
   27370:	beq	275c0 <flatcc_json_parser_generic_json@@Base+0x2d4>
   27374:	ldrb	r0, [r1]
   27378:	cmp	r0, #58	; 0x3a
   2737c:	bne	275d0 <flatcc_json_parser_generic_json@@Base+0x2e4>
   27380:	add	r1, r1, #1
   27384:	mov	r0, r5
   27388:	mov	r2, r4
   2738c:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27390:	mov	r7, r0
   27394:	ldrb	r0, [r7]
   27398:	sub	r1, r0, #48	; 0x30
   2739c:	cmp	r1, #10
   273a0:	bcs	27418 <flatcc_json_parser_generic_json@@Base+0x12c>
   273a4:	mov	r0, r5
   273a8:	mov	r1, r7
   273ac:	mov	r2, r4
   273b0:	bl	278c8 <flatcc_json_parser_float@@Base+0x1ec>
   273b4:	mov	r7, r0
   273b8:	cmp	r6, #0
   273bc:	cmpne	r7, r4
   273c0:	beq	27578 <flatcc_json_parser_generic_json@@Base+0x28c>
   273c4:	ldrb	r0, [r8, r6]
   273c8:	cmp	r0, #93	; 0x5d
   273cc:	bne	273e8 <flatcc_json_parser_generic_json@@Base+0xfc>
   273d0:	mov	r0, r5
   273d4:	mov	r1, r7
   273d8:	mov	r2, r4
   273dc:	mov	r3, r9
   273e0:	bl	27b2c <flatcc_json_parser_float@@Base+0x450>
   273e4:	b	273fc <flatcc_json_parser_generic_json@@Base+0x110>
   273e8:	mov	r0, r5
   273ec:	mov	r1, r7
   273f0:	mov	r2, r4
   273f4:	mov	r3, r9
   273f8:	bl	27bec <flatcc_json_parser_float@@Base+0x510>
   273fc:	mov	r7, r0
   27400:	sub	r6, r6, #1
   27404:	ldr	r0, [sp]
   27408:	cmp	r0, #0
   2740c:	beq	273b8 <flatcc_json_parser_generic_json@@Base+0xcc>
   27410:	add	r6, r6, #1
   27414:	b	27544 <flatcc_json_parser_generic_json@@Base+0x258>
   27418:	cmp	r0, #90	; 0x5a
   2741c:	bgt	27434 <flatcc_json_parser_generic_json@@Base+0x148>
   27420:	cmp	r0, #34	; 0x22
   27424:	beq	27484 <flatcc_json_parser_generic_json@@Base+0x198>
   27428:	cmp	r0, #45	; 0x2d
   2742c:	beq	273a4 <flatcc_json_parser_generic_json@@Base+0xb8>
   27430:	b	27554 <flatcc_json_parser_generic_json@@Base+0x268>
   27434:	cmp	r0, #91	; 0x5b
   27438:	beq	27508 <flatcc_json_parser_generic_json@@Base+0x21c>
   2743c:	cmp	r0, #123	; 0x7b
   27440:	bne	27554 <flatcc_json_parser_generic_json@@Base+0x268>
   27444:	cmp	r6, #512	; 0x200
   27448:	beq	275e0 <flatcc_json_parser_generic_json@@Base+0x2f4>
   2744c:	mov	r0, #125	; 0x7d
   27450:	strb	r0, [sl, r6]
   27454:	add	r1, r7, #1
   27458:	mov	r0, r5
   2745c:	mov	r2, r4
   27460:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27464:	mov	r7, r0
   27468:	add	r6, r6, #1
   2746c:	cmp	r0, r4
   27470:	beq	27544 <flatcc_json_parser_generic_json@@Base+0x258>
   27474:	ldrb	r0, [r7]
   27478:	cmp	r0, #125	; 0x7d
   2747c:	beq	273b8 <flatcc_json_parser_generic_json@@Base+0xcc>
   27480:	b	27544 <flatcc_json_parser_generic_json@@Base+0x258>
   27484:	mov	r0, r5
   27488:	mov	r1, r7
   2748c:	mov	r2, r4
   27490:	bl	27870 <flatcc_json_parser_float@@Base+0x194>
   27494:	mov	r1, r0
   27498:	cmp	r0, r4
   2749c:	beq	274f4 <flatcc_json_parser_generic_json@@Base+0x208>
   274a0:	add	r7, sp, #4
   274a4:	b	274c4 <flatcc_json_parser_generic_json@@Base+0x1d8>
   274a8:	mov	r0, r5
   274ac:	mov	r2, r4
   274b0:	mov	r3, r7
   274b4:	bl	26b3c <flatcc_json_parser_string_escape@@Base>
   274b8:	mov	r1, r0
   274bc:	cmp	r0, r4
   274c0:	beq	274f4 <flatcc_json_parser_generic_json@@Base+0x208>
   274c4:	ldrb	r0, [r1]
   274c8:	cmp	r0, #34	; 0x22
   274cc:	beq	274f4 <flatcc_json_parser_generic_json@@Base+0x208>
   274d0:	mov	r0, r5
   274d4:	mov	r2, r4
   274d8:	bl	269d0 <flatcc_json_parser_string_part@@Base>
   274dc:	mov	r1, r0
   274e0:	cmp	r0, r4
   274e4:	beq	274a8 <flatcc_json_parser_generic_json@@Base+0x1bc>
   274e8:	ldrb	r0, [r1]
   274ec:	cmp	r0, #34	; 0x22
   274f0:	bne	274a8 <flatcc_json_parser_generic_json@@Base+0x1bc>
   274f4:	mov	r0, r5
   274f8:	mov	r2, r4
   274fc:	bl	2789c <flatcc_json_parser_float@@Base+0x1c0>
   27500:	mov	r7, r0
   27504:	b	273b8 <flatcc_json_parser_generic_json@@Base+0xcc>
   27508:	cmp	r6, #512	; 0x200
   2750c:	beq	275e0 <flatcc_json_parser_generic_json@@Base+0x2f4>
   27510:	mov	r0, #93	; 0x5d
   27514:	strb	r0, [sl, r6]
   27518:	add	r1, r7, #1
   2751c:	mov	r0, r5
   27520:	mov	r2, r4
   27524:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27528:	mov	r7, r0
   2752c:	add	r6, r6, #1
   27530:	cmp	r0, r4
   27534:	beq	27544 <flatcc_json_parser_generic_json@@Base+0x258>
   27538:	ldrb	r0, [r7]
   2753c:	cmp	r0, #93	; 0x5d
   27540:	beq	273b8 <flatcc_json_parser_generic_json@@Base+0xcc>
   27544:	add	r0, sl, r6
   27548:	cmp	r7, r4
   2754c:	bne	27324 <flatcc_json_parser_generic_json@@Base+0x38>
   27550:	b	275b4 <flatcc_json_parser_generic_json@@Base+0x2c8>
   27554:	mov	r0, r5
   27558:	mov	r1, r7
   2755c:	mov	r2, r4
   27560:	bl	26f20 <flatcc_json_parser_skip_constant@@Base>
   27564:	mov	r1, r0
   27568:	cmp	r7, r0
   2756c:	beq	275f4 <flatcc_json_parser_generic_json@@Base+0x308>
   27570:	mov	r7, r1
   27574:	b	273b8 <flatcc_json_parser_generic_json@@Base+0xcc>
   27578:	cmp	r7, r4
   2757c:	bne	275b4 <flatcc_json_parser_generic_json@@Base+0x2c8>
   27580:	cmp	r6, #0
   27584:	beq	275b4 <flatcc_json_parser_generic_json@@Base+0x2c8>
   27588:	add	r0, sp, #8
   2758c:	add	r0, r0, r6
   27590:	ldrb	r0, [r0, #-1]
   27594:	mov	r3, #10
   27598:	cmp	r0, #93	; 0x5d
   2759c:	movweq	r3, #9
   275a0:	mov	r0, r5
   275a4:	mov	r1, r7
   275a8:	mov	r2, r4
   275ac:	bl	26998 <flatcc_json_parser_set_error@@Base>
   275b0:	mov	r7, r0
   275b4:	mov	r0, r7
   275b8:	sub	sp, fp, #28
   275bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275c0:	mov	r0, r5
   275c4:	mov	r2, r4
   275c8:	mov	r3, #10
   275cc:	b	275ac <flatcc_json_parser_generic_json@@Base+0x2c0>
   275d0:	mov	r0, r5
   275d4:	mov	r2, r4
   275d8:	mov	r3, #4
   275dc:	b	275ac <flatcc_json_parser_generic_json@@Base+0x2c0>
   275e0:	mov	r0, r5
   275e4:	mov	r1, r7
   275e8:	mov	r2, r4
   275ec:	mov	r3, #2
   275f0:	b	275ac <flatcc_json_parser_generic_json@@Base+0x2c0>
   275f4:	mov	r0, r5
   275f8:	mov	r2, r4
   275fc:	mov	r3, #5
   27600:	b	275ac <flatcc_json_parser_generic_json@@Base+0x2c0>

00027604 <flatcc_json_parser_double@@Base>:
   27604:	push	{r4, r5, r6, r7, fp, lr}
   27608:	add	fp, sp, #16
   2760c:	mov	r5, r1
   27610:	mov	r6, r0
   27614:	mov	r0, #0
   27618:	str	r0, [r3]
   2761c:	str	r0, [r3, #4]
   27620:	cmp	r1, r2
   27624:	beq	276b8 <flatcc_json_parser_double@@Base+0xb4>
   27628:	mov	r7, r3
   2762c:	mov	r4, r2
   27630:	mov	r0, r5
   27634:	ldrb	r1, [r0], #1
   27638:	cmp	r1, #45	; 0x2d
   2763c:	movne	r0, r5
   27640:	sub	r2, r2, r0
   27644:	cmp	r2, #2
   27648:	blt	27678 <flatcc_json_parser_double@@Base+0x74>
   2764c:	sub	r1, r1, #45	; 0x2d
   27650:	clz	r1, r1
   27654:	lsr	r1, r1, #5
   27658:	ldrb	r1, [r5, r1]
   2765c:	cmp	r1, #46	; 0x2e
   27660:	beq	276c0 <flatcc_json_parser_double@@Base+0xbc>
   27664:	cmp	r1, #48	; 0x30
   27668:	bne	27678 <flatcc_json_parser_double@@Base+0x74>
   2766c:	ldrb	r0, [r0, #1]
   27670:	cmp	r0, #48	; 0x30
   27674:	beq	276c0 <flatcc_json_parser_double@@Base+0xbc>
   27678:	sub	r1, r4, r5
   2767c:	mov	r0, r5
   27680:	mov	r2, r7
   27684:	bl	276d8 <flatcc_json_parser_double@@Base+0xd4>
   27688:	cmp	r0, #0
   2768c:	cmpne	r0, r5
   27690:	bne	276d4 <flatcc_json_parser_double@@Base+0xd0>
   27694:	vldr	d0, [r7]
   27698:	bl	14e74 <__isinf@plt>
   2769c:	cmp	r0, #0
   276a0:	beq	276c0 <flatcc_json_parser_double@@Base+0xbc>
   276a4:	mov	r0, r6
   276a8:	mov	r1, r5
   276ac:	mov	r2, r4
   276b0:	mov	r3, #7
   276b4:	b	276d0 <flatcc_json_parser_double@@Base+0xcc>
   276b8:	mov	r0, r5
   276bc:	pop	{r4, r5, r6, r7, fp, pc}
   276c0:	mov	r0, r6
   276c4:	mov	r1, r5
   276c8:	mov	r2, r4
   276cc:	mov	r3, #6
   276d0:	bl	26998 <flatcc_json_parser_set_error@@Base>
   276d4:	pop	{r4, r5, r6, r7, fp, pc}
   276d8:	b	28fc8 <flatcc_json_parser_struct_as_root@@Base+0xbc>

000276dc <flatcc_json_parser_float@@Base>:
   276dc:	push	{r4, r5, r6, r7, fp, lr}
   276e0:	add	fp, sp, #16
   276e4:	mov	r5, r1
   276e8:	mov	r6, r0
   276ec:	mov	r0, #0
   276f0:	str	r0, [r3]
   276f4:	cmp	r1, r2
   276f8:	beq	2778c <flatcc_json_parser_float@@Base+0xb0>
   276fc:	mov	r7, r3
   27700:	mov	r4, r2
   27704:	mov	r0, r5
   27708:	ldrb	r1, [r0], #1
   2770c:	cmp	r1, #45	; 0x2d
   27710:	movne	r0, r5
   27714:	sub	r2, r2, r0
   27718:	cmp	r2, #2
   2771c:	blt	2774c <flatcc_json_parser_float@@Base+0x70>
   27720:	sub	r1, r1, #45	; 0x2d
   27724:	clz	r1, r1
   27728:	lsr	r1, r1, #5
   2772c:	ldrb	r1, [r5, r1]
   27730:	cmp	r1, #46	; 0x2e
   27734:	beq	27794 <flatcc_json_parser_float@@Base+0xb8>
   27738:	cmp	r1, #48	; 0x30
   2773c:	bne	2774c <flatcc_json_parser_float@@Base+0x70>
   27740:	ldrb	r0, [r0, #1]
   27744:	cmp	r0, #48	; 0x30
   27748:	beq	27794 <flatcc_json_parser_float@@Base+0xb8>
   2774c:	sub	r1, r4, r5
   27750:	mov	r0, r5
   27754:	mov	r2, r7
   27758:	bl	277ac <flatcc_json_parser_float@@Base+0xd0>
   2775c:	cmp	r0, #0
   27760:	cmpne	r0, r5
   27764:	bne	277a8 <flatcc_json_parser_float@@Base+0xcc>
   27768:	vldr	s0, [r7]
   2776c:	bl	14e68 <__isinff@plt>
   27770:	cmp	r0, #0
   27774:	beq	27794 <flatcc_json_parser_float@@Base+0xb8>
   27778:	mov	r0, r6
   2777c:	mov	r1, r5
   27780:	mov	r2, r4
   27784:	mov	r3, #7
   27788:	b	277a4 <flatcc_json_parser_float@@Base+0xc8>
   2778c:	mov	r0, r5
   27790:	pop	{r4, r5, r6, r7, fp, pc}
   27794:	mov	r0, r6
   27798:	mov	r1, r5
   2779c:	mov	r2, r4
   277a0:	mov	r3, #6
   277a4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   277a8:	pop	{r4, r5, r6, r7, fp, pc}
   277ac:	push	{r4, r5, r6, sl, fp, lr}
   277b0:	add	fp, sp, #16
   277b4:	vpush	{d8-d9}
   277b8:	sub	sp, sp, #8
   277bc:	mov	r4, r2
   277c0:	mov	r5, r0
   277c4:	mov	r2, sp
   277c8:	bl	276d8 <flatcc_json_parser_double@@Base+0xd4>
   277cc:	mov	r6, r0
   277d0:	vldr	d16, [sp]
   277d4:	add	r0, pc, #56	; 0x38
   277d8:	vcmpe.f64	d16, #0.0
   277dc:	vmrs	APSR_nzcv, fpscr
   277e0:	addmi	r0, r0, #4
   277e4:	vcvt.f32.f64	s16, d16
   277e8:	vldr	s18, [r0]
   277ec:	vmov.f32	s0, s16
   277f0:	bl	14e68 <__isinff@plt>
   277f4:	cmp	r0, #0
   277f8:	vseleq.f32	s0, s16, s18
   277fc:	vstr	s0, [r4]
   27800:	movne	r6, r5
   27804:	mov	r0, r6
   27808:	sub	sp, fp, #32
   2780c:	vpop	{d8-d9}
   27810:	pop	{r4, r5, r6, sl, fp, pc}
   27814:	svcvc	0x00800000
   27818:			; <UNDEFINED> instruction: 0xff800000
   2781c:	push	{fp, lr}
   27820:	mov	fp, sp
   27824:	cmp	r1, r2
   27828:	beq	27868 <flatcc_json_parser_float@@Base+0x18c>
   2782c:	ldrb	r3, [r1]
   27830:	cmp	r3, #46	; 0x2e
   27834:	beq	27854 <flatcc_json_parser_float@@Base+0x178>
   27838:	cmp	r3, #34	; 0x22
   2783c:	bne	27860 <flatcc_json_parser_float@@Base+0x184>
   27840:	mov	r2, #0
   27844:	str	r2, [r0, #12]
   27848:	add	r1, r1, #1
   2784c:	mov	r0, r1
   27850:	pop	{fp, pc}
   27854:	mov	r3, #5
   27858:	bl	26998 <flatcc_json_parser_set_error@@Base>
   2785c:	pop	{fp, pc}
   27860:	mov	r2, #1
   27864:	str	r2, [r0, #12]
   27868:	mov	r0, r1
   2786c:	pop	{fp, pc}
   27870:	push	{fp, lr}
   27874:	mov	fp, sp
   27878:	cmp	r1, r2
   2787c:	beq	27890 <flatcc_json_parser_float@@Base+0x1b4>
   27880:	ldrb	r3, [r1]
   27884:	cmp	r3, #34	; 0x22
   27888:	addeq	r0, r1, #1
   2788c:	popeq	{fp, pc}
   27890:	mov	r3, #16
   27894:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27898:	pop	{fp, pc}
   2789c:	push	{fp, lr}
   278a0:	mov	fp, sp
   278a4:	cmp	r1, r2
   278a8:	beq	278bc <flatcc_json_parser_float@@Base+0x1e0>
   278ac:	ldrb	r3, [r1]
   278b0:	cmp	r3, #34	; 0x22
   278b4:	addeq	r0, r1, #1
   278b8:	popeq	{fp, pc}
   278bc:	mov	r3, #20
   278c0:	bl	26998 <flatcc_json_parser_set_error@@Base>
   278c4:	pop	{fp, pc}
   278c8:	push	{fp, lr}
   278cc:	mov	fp, sp
   278d0:	mov	lr, r1
   278d4:	cmp	r1, r2
   278d8:	beq	27b00 <flatcc_json_parser_float@@Base+0x424>
   278dc:	ldrb	r1, [lr]
   278e0:	cmp	r1, #45	; 0x2d
   278e4:	bne	278f8 <flatcc_json_parser_float@@Base+0x21c>
   278e8:	add	lr, lr, #1
   278ec:	cmp	lr, r2
   278f0:	beq	27b14 <flatcc_json_parser_float@@Base+0x438>
   278f4:	ldrb	r1, [lr]
   278f8:	cmp	r1, #48	; 0x30
   278fc:	bne	27910 <flatcc_json_parser_float@@Base+0x234>
   27900:	add	lr, lr, #1
   27904:	cmp	lr, r2
   27908:	bne	27950 <flatcc_json_parser_float@@Base+0x274>
   2790c:	b	279a0 <flatcc_json_parser_float@@Base+0x2c4>
   27910:	sub	r1, r1, #49	; 0x31
   27914:	uxtb	r1, r1
   27918:	cmp	r1, #8
   2791c:	bhi	27b14 <flatcc_json_parser_float@@Base+0x438>
   27920:	add	r1, lr, #1
   27924:	mov	lr, r1
   27928:	cmp	r2, r1
   2792c:	beq	27948 <flatcc_json_parser_float@@Base+0x26c>
   27930:	mov	r1, lr
   27934:	ldrb	r3, [r1], #1
   27938:	sub	r3, r3, #48	; 0x30
   2793c:	uxtb	r3, r3
   27940:	cmp	r3, #10
   27944:	bcc	27924 <flatcc_json_parser_float@@Base+0x248>
   27948:	cmp	lr, r2
   2794c:	beq	279a0 <flatcc_json_parser_float@@Base+0x2c4>
   27950:	ldrb	r1, [lr]
   27954:	cmp	r1, #46	; 0x2e
   27958:	bne	279a0 <flatcc_json_parser_float@@Base+0x2c4>
   2795c:	mov	r1, lr
   27960:	ldrb	r3, [r1, #1]!
   27964:	sub	r3, r3, #48	; 0x30
   27968:	uxtb	r3, r3
   2796c:	cmp	r3, #10
   27970:	bcs	27b18 <flatcc_json_parser_float@@Base+0x43c>
   27974:	add	lr, lr, #2
   27978:	cmp	lr, r2
   2797c:	beq	279a0 <flatcc_json_parser_float@@Base+0x2c4>
   27980:	ldrb	r1, [lr]
   27984:	sub	r1, r1, #48	; 0x30
   27988:	uxtb	r1, r1
   2798c:	cmp	r1, #9
   27990:	bhi	279a0 <flatcc_json_parser_float@@Base+0x2c4>
   27994:	add	lr, lr, #1
   27998:	cmp	r2, lr
   2799c:	bne	27980 <flatcc_json_parser_float@@Base+0x2a4>
   279a0:	cmp	lr, r2
   279a4:	beq	27a18 <flatcc_json_parser_float@@Base+0x33c>
   279a8:	ldrb	r1, [lr]
   279ac:	orr	r1, r1, #32
   279b0:	cmp	r1, #101	; 0x65
   279b4:	bne	27a18 <flatcc_json_parser_float@@Base+0x33c>
   279b8:	add	r1, lr, #1
   279bc:	cmp	r1, r2
   279c0:	beq	27b18 <flatcc_json_parser_float@@Base+0x43c>
   279c4:	ldrb	ip, [r1]
   279c8:	cmp	ip, #45	; 0x2d
   279cc:	cmpne	ip, #43	; 0x2b
   279d0:	addeq	r1, lr, #2
   279d4:	cmp	r1, r2
   279d8:	beq	27b18 <flatcc_json_parser_float@@Base+0x43c>
   279dc:	ldrb	r3, [r1]
   279e0:	sub	r3, r3, #48	; 0x30
   279e4:	uxtb	r3, r3
   279e8:	cmp	r3, #9
   279ec:	bhi	27b18 <flatcc_json_parser_float@@Base+0x43c>
   279f0:	add	r1, r1, #1
   279f4:	mov	lr, r1
   279f8:	cmp	r2, r1
   279fc:	beq	27a18 <flatcc_json_parser_float@@Base+0x33c>
   27a00:	mov	r1, lr
   27a04:	ldrb	r3, [r1], #1
   27a08:	sub	r3, r3, #48	; 0x30
   27a0c:	uxtb	r3, r3
   27a10:	cmp	r3, #10
   27a14:	bcc	279f4 <flatcc_json_parser_float@@Base+0x318>
   27a18:	cmp	lr, r2
   27a1c:	beq	27b14 <flatcc_json_parser_float@@Base+0x438>
   27a20:	ldrb	ip, [lr]
   27a24:	sub	r1, ip, #9
   27a28:	cmp	r1, #49	; 0x31
   27a2c:	bhi	27b08 <flatcc_json_parser_float@@Base+0x42c>
   27a30:	add	r3, pc, #0
   27a34:	ldr	pc, [r3, r1, lsl #2]
   27a38:	andeq	r7, r2, r0, lsl #22
   27a3c:	andeq	r7, r2, r0, lsl #22
   27a40:	andeq	r7, r2, r0, lsl #22
   27a44:	andeq	r7, r2, r4, lsl fp
   27a48:	andeq	r7, r2, r0, lsl #22
   27a4c:	andeq	r7, r2, r4, lsl fp
   27a50:	andeq	r7, r2, r4, lsl fp
   27a54:	andeq	r7, r2, r4, lsl fp
   27a58:	andeq	r7, r2, r4, lsl fp
   27a5c:	andeq	r7, r2, r4, lsl fp
   27a60:	andeq	r7, r2, r4, lsl fp
   27a64:	andeq	r7, r2, r4, lsl fp
   27a68:	andeq	r7, r2, r4, lsl fp
   27a6c:	andeq	r7, r2, r4, lsl fp
   27a70:	andeq	r7, r2, r4, lsl fp
   27a74:	andeq	r7, r2, r4, lsl fp
   27a78:	andeq	r7, r2, r4, lsl fp
   27a7c:	andeq	r7, r2, r4, lsl fp
   27a80:	andeq	r7, r2, r4, lsl fp
   27a84:	andeq	r7, r2, r4, lsl fp
   27a88:	andeq	r7, r2, r4, lsl fp
   27a8c:	andeq	r7, r2, r4, lsl fp
   27a90:	andeq	r7, r2, r4, lsl fp
   27a94:	andeq	r7, r2, r0, lsl #22
   27a98:	andeq	r7, r2, r4, lsl fp
   27a9c:	andeq	r7, r2, r4, lsl fp
   27aa0:	andeq	r7, r2, r4, lsl fp
   27aa4:	andeq	r7, r2, r4, lsl fp
   27aa8:	andeq	r7, r2, r4, lsl fp
   27aac:	andeq	r7, r2, r4, lsl fp
   27ab0:	andeq	r7, r2, r4, lsl fp
   27ab4:	andeq	r7, r2, r4, lsl fp
   27ab8:	andeq	r7, r2, r4, lsl fp
   27abc:	andeq	r7, r2, r4, lsl fp
   27ac0:	andeq	r7, r2, r4, lsl fp
   27ac4:	andeq	r7, r2, r0, lsl #22
   27ac8:	andeq	r7, r2, r4, lsl fp
   27acc:	andeq	r7, r2, r4, lsl fp
   27ad0:	andeq	r7, r2, r4, lsl fp
   27ad4:	andeq	r7, r2, r4, lsl fp
   27ad8:	andeq	r7, r2, r4, lsl fp
   27adc:	andeq	r7, r2, r4, lsl fp
   27ae0:	andeq	r7, r2, r4, lsl fp
   27ae4:	andeq	r7, r2, r4, lsl fp
   27ae8:	andeq	r7, r2, r4, lsl fp
   27aec:	andeq	r7, r2, r4, lsl fp
   27af0:	andeq	r7, r2, r4, lsl fp
   27af4:	andeq	r7, r2, r4, lsl fp
   27af8:	andeq	r7, r2, r4, lsl fp
   27afc:	andeq	r7, r2, r0, lsl #22
   27b00:	mov	r0, lr
   27b04:	pop	{fp, pc}
   27b08:	cmp	ip, #93	; 0x5d
   27b0c:	cmpne	ip, #125	; 0x7d
   27b10:	beq	27b00 <flatcc_json_parser_float@@Base+0x424>
   27b14:	mov	r1, lr
   27b18:	mov	r3, #6
   27b1c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27b20:	mov	lr, r0
   27b24:	mov	r0, lr
   27b28:	pop	{fp, pc}
   27b2c:	push	{r4, r5, r6, sl, fp, lr}
   27b30:	add	fp, sp, #16
   27b34:	mov	r6, r3
   27b38:	mov	r4, r2
   27b3c:	mov	r5, r0
   27b40:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27b44:	mov	r1, r0
   27b48:	cmp	r0, r4
   27b4c:	beq	27b90 <flatcc_json_parser_float@@Base+0x4b4>
   27b50:	ldrb	r0, [r1]
   27b54:	cmp	r0, #44	; 0x2c
   27b58:	bne	27b98 <flatcc_json_parser_float@@Base+0x4bc>
   27b5c:	add	r1, r1, #1
   27b60:	mov	r0, r5
   27b64:	mov	r2, r4
   27b68:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27b6c:	mov	r1, r0
   27b70:	cmp	r0, r4
   27b74:	beq	27bc0 <flatcc_json_parser_float@@Base+0x4e4>
   27b78:	ldrb	r0, [r1]
   27b7c:	cmp	r0, #93	; 0x5d
   27b80:	bne	27bdc <flatcc_json_parser_float@@Base+0x500>
   27b84:	mov	r0, #0
   27b88:	str	r0, [r6]
   27b8c:	b	27bac <flatcc_json_parser_float@@Base+0x4d0>
   27b90:	mov	r0, #0
   27b94:	b	27be0 <flatcc_json_parser_float@@Base+0x504>
   27b98:	mov	r0, #0
   27b9c:	str	r0, [r6]
   27ba0:	ldrb	r0, [r1]
   27ba4:	cmp	r0, #93	; 0x5d
   27ba8:	bne	27bc8 <flatcc_json_parser_float@@Base+0x4ec>
   27bac:	add	r1, r1, #1
   27bb0:	mov	r0, r5
   27bb4:	mov	r2, r4
   27bb8:	pop	{r4, r5, r6, sl, fp, lr}
   27bbc:	b	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27bc0:	mov	r0, #0
   27bc4:	str	r0, [r6]
   27bc8:	mov	r0, r5
   27bcc:	mov	r2, r4
   27bd0:	mov	r3, #9
   27bd4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27bd8:	pop	{r4, r5, r6, sl, fp, pc}
   27bdc:	mov	r0, #1
   27be0:	str	r0, [r6]
   27be4:	mov	r0, r1
   27be8:	pop	{r4, r5, r6, sl, fp, pc}
   27bec:	push	{r4, r5, r6, sl, fp, lr}
   27bf0:	add	fp, sp, #16
   27bf4:	mov	r6, r3
   27bf8:	mov	r4, r2
   27bfc:	mov	r5, r0
   27c00:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27c04:	mov	r1, r0
   27c08:	cmp	r0, r4
   27c0c:	beq	27c50 <flatcc_json_parser_float@@Base+0x574>
   27c10:	ldrb	r0, [r1]
   27c14:	cmp	r0, #44	; 0x2c
   27c18:	bne	27c58 <flatcc_json_parser_float@@Base+0x57c>
   27c1c:	add	r1, r1, #1
   27c20:	mov	r0, r5
   27c24:	mov	r2, r4
   27c28:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27c2c:	mov	r1, r0
   27c30:	cmp	r0, r4
   27c34:	beq	27c80 <flatcc_json_parser_float@@Base+0x5a4>
   27c38:	ldrb	r0, [r1]
   27c3c:	cmp	r0, #125	; 0x7d
   27c40:	bne	27c9c <flatcc_json_parser_float@@Base+0x5c0>
   27c44:	mov	r0, #0
   27c48:	str	r0, [r6]
   27c4c:	b	27c6c <flatcc_json_parser_float@@Base+0x590>
   27c50:	mov	r0, #0
   27c54:	b	27ca0 <flatcc_json_parser_float@@Base+0x5c4>
   27c58:	mov	r0, #0
   27c5c:	str	r0, [r6]
   27c60:	ldrb	r0, [r1]
   27c64:	cmp	r0, #125	; 0x7d
   27c68:	bne	27c88 <flatcc_json_parser_float@@Base+0x5ac>
   27c6c:	add	r1, r1, #1
   27c70:	mov	r0, r5
   27c74:	mov	r2, r4
   27c78:	pop	{r4, r5, r6, sl, fp, lr}
   27c7c:	b	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   27c80:	mov	r0, #0
   27c84:	str	r0, [r6]
   27c88:	mov	r0, r5
   27c8c:	mov	r2, r4
   27c90:	mov	r3, #10
   27c94:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27c98:	pop	{r4, r5, r6, sl, fp, pc}
   27c9c:	mov	r0, #1
   27ca0:	str	r0, [r6]
   27ca4:	mov	r0, r1
   27ca8:	pop	{r4, r5, r6, sl, fp, pc}

00027cac <flatcc_json_parser_integer@@Base>:
   27cac:	push	{r4, r5, r6, r7, fp, lr}
   27cb0:	add	fp, sp, #16
   27cb4:	cmp	r1, r2
   27cb8:	beq	27d6c <flatcc_json_parser_integer@@Base+0xc0>
   27cbc:	ldrb	r7, [r1]
   27cc0:	sub	r7, r7, #45	; 0x2d
   27cc4:	clz	r7, r7
   27cc8:	lsr	r7, r7, #5
   27ccc:	str	r7, [r3]
   27cd0:	add	ip, r1, r7
   27cd4:	mov	r4, #0
   27cd8:	cmp	ip, r2
   27cdc:	beq	27d74 <flatcc_json_parser_integer@@Base+0xc8>
   27ce0:	mov	lr, #10
   27ce4:	mov	r5, #0
   27ce8:	ldrb	r6, [ip]
   27cec:	sub	r7, r6, #48	; 0x30
   27cf0:	uxtb	r7, r7
   27cf4:	cmp	r7, #9
   27cf8:	bhi	27d8c <flatcc_json_parser_integer@@Base+0xe0>
   27cfc:	add	r7, r5, r5, lsl #2
   27d00:	lsl	r7, r7, #1
   27d04:	umlal	r6, r7, r4, lr
   27d08:	subs	r6, r6, #48	; 0x30
   27d0c:	sbc	r7, r7, #0
   27d10:	subs	r4, r6, r4
   27d14:	sbcs	r4, r7, r5
   27d18:	bcc	27d9c <flatcc_json_parser_integer@@Base+0xf0>
   27d1c:	add	ip, ip, #1
   27d20:	cmp	r2, ip
   27d24:	mov	r4, r6
   27d28:	mov	r5, r7
   27d2c:	bne	27ce8 <flatcc_json_parser_integer@@Base+0x3c>
   27d30:	mov	r3, #0
   27d34:	mov	r4, r6
   27d38:	mov	r5, r7
   27d3c:	cmp	ip, r1
   27d40:	beq	27d84 <flatcc_json_parser_integer@@Base+0xd8>
   27d44:	cmp	r3, #0
   27d48:	beq	27dc0 <flatcc_json_parser_integer@@Base+0x114>
   27d4c:	ldrb	r1, [ip]
   27d50:	cmp	r1, #46	; 0x2e
   27d54:	cmpne	r1, #101	; 0x65
   27d58:	bne	27db8 <flatcc_json_parser_integer@@Base+0x10c>
   27d5c:	mov	r1, ip
   27d60:	mov	r3, #12
   27d64:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27d68:	pop	{r4, r5, r6, r7, fp, pc}
   27d6c:	mov	r0, r1
   27d70:	pop	{r4, r5, r6, r7, fp, pc}
   27d74:	mov	r5, #0
   27d78:	mov	r3, #0
   27d7c:	cmp	ip, r1
   27d80:	bne	27d44 <flatcc_json_parser_integer@@Base+0x98>
   27d84:	mov	r0, ip
   27d88:	pop	{r4, r5, r6, r7, fp, pc}
   27d8c:	mov	r3, #1
   27d90:	cmp	ip, r1
   27d94:	bne	27d44 <flatcc_json_parser_integer@@Base+0x98>
   27d98:	b	27d84 <flatcc_json_parser_integer@@Base+0xd8>
   27d9c:	mov	lr, #8
   27da0:	cmp	r3, #0
   27da4:	movweq	lr, #7
   27da8:	mov	r1, ip
   27dac:	mov	r3, lr
   27db0:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27db4:	pop	{r4, r5, r6, r7, fp, pc}
   27db8:	cmp	r1, #69	; 0x45
   27dbc:	beq	27d5c <flatcc_json_parser_integer@@Base+0xb0>
   27dc0:	ldr	r0, [fp, #8]
   27dc4:	strd	r4, [r0]
   27dc8:	mov	r0, ip
   27dcc:	pop	{r4, r5, r6, r7, fp, pc}

00027dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   27dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dd4:	add	fp, sp, #28
   27dd8:	sub	sp, sp, #20
   27ddc:	mov	r8, r3
   27de0:	mov	r4, r2
   27de4:	mov	r5, r0
   27de8:	bl	27870 <flatcc_json_parser_float@@Base+0x194>
   27dec:	mov	r6, r0
   27df0:	mov	r0, r5
   27df4:	mov	r1, r6
   27df8:	mov	r2, r4
   27dfc:	bl	269d0 <flatcc_json_parser_string_part@@Base>
   27e00:	mov	r7, r0
   27e04:	ldr	sl, [fp, #8]
   27e08:	cmp	sl, #0
   27e0c:	mov	r9, sl
   27e10:	movwne	r9, #1
   27e14:	cmp	r0, r4
   27e18:	beq	27f10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   27e1c:	ldrb	r0, [r7]
   27e20:	cmp	r0, #34	; 0x22
   27e24:	bne	27f10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   27e28:	sub	r0, r7, r6
   27e2c:	str	r0, [sp, #4]
   27e30:	bl	27f3c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   27e34:	str	r0, [sp, #8]
   27e38:	ldr	r0, [r5]
   27e3c:	mov	r1, #1
   27e40:	mov	r2, #1
   27e44:	mvn	r3, #0
   27e48:	bl	22e68 <flatcc_builder_start_vector@@Base>
   27e4c:	cmp	r0, #0
   27e50:	beq	27e70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   27e54:	mov	r0, #0
   27e58:	str	r0, [r8]
   27e5c:	mov	r0, r5
   27e60:	mov	r1, r7
   27e64:	mov	r2, r4
   27e68:	mov	r3, #33	; 0x21
   27e6c:	b	27f30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   27e70:	ldr	r0, [r5]
   27e74:	ldr	r1, [sp, #8]
   27e78:	bl	2287c <flatcc_builder_extend_vector@@Base>
   27e7c:	cmp	r0, #0
   27e80:	beq	27e54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27e84:	ldr	r1, [sp, #8]
   27e88:	str	r1, [sp, #16]
   27e8c:	ldr	r1, [sp, #4]
   27e90:	str	r1, [sp, #12]
   27e94:	str	r9, [sp]
   27e98:	add	r2, sp, #16
   27e9c:	add	r3, sp, #12
   27ea0:	mov	r1, r6
   27ea4:	bl	27f68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   27ea8:	ldr	r1, [sp, #12]
   27eac:	cmp	r0, #0
   27eb0:	bne	27f0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   27eb4:	ldmib	sp, {r0, r2}
   27eb8:	cmp	r1, r0
   27ebc:	bne	27f0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   27ec0:	ldr	r0, [sp, #16]
   27ec4:	cmp	r2, r0
   27ec8:	bls	27ee0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
   27ecc:	sub	r1, r2, r0
   27ed0:	ldr	r0, [r5]
   27ed4:	bl	22cc8 <flatcc_builder_truncate_vector@@Base>
   27ed8:	cmp	r0, #0
   27edc:	bne	27e54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27ee0:	ldr	r0, [r5]
   27ee4:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   27ee8:	str	r0, [r8]
   27eec:	cmp	r0, #0
   27ef0:	beq	27e54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   27ef4:	mov	r0, r5
   27ef8:	mov	r1, r7
   27efc:	mov	r2, r4
   27f00:	bl	2789c <flatcc_json_parser_float@@Base+0x1c0>
   27f04:	sub	sp, fp, #28
   27f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f0c:	add	r7, r6, r1
   27f10:	mov	r0, #0
   27f14:	str	r0, [r8]
   27f18:	mov	r3, #31
   27f1c:	cmp	sl, #0
   27f20:	movwne	r3, #32
   27f24:	mov	r0, r5
   27f28:	mov	r1, r7
   27f2c:	mov	r2, r4
   27f30:	bl	26998 <flatcc_json_parser_set_error@@Base>
   27f34:	sub	sp, fp, #28
   27f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f3c:	and	r1, r0, #3
   27f40:	lsr	r0, r0, #2
   27f44:	add	r0, r0, r0, lsl #1
   27f48:	cmp	r1, #2
   27f4c:	beq	27f60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   27f50:	cmp	r1, #3
   27f54:	addeq	r0, r0, #2
   27f58:	bxeq	lr
   27f5c:	bx	lr
   27f60:	add	r0, r0, #1
   27f64:	bx	lr
   27f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f6c:	add	fp, sp, #28
   27f70:	sub	sp, sp, #4
   27f74:	ldr	r7, [fp, #8]
   27f78:	cmp	r3, #0
   27f7c:	beq	27f88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   27f80:	ldr	lr, [r3]
   27f84:	b	27f8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1bc>
   27f88:	mvn	lr, #0
   27f8c:	and	r5, r7, #32
   27f90:	bic	r4, r7, #224	; 0xe0
   27f94:	cmp	r4, #1
   27f98:	beq	27fbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   27f9c:	mov	ip, #3
   27fa0:	cmp	r4, #0
   27fa4:	bne	27fec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   27fa8:	movw	r4, #31272	; 0x7a28
   27fac:	movt	r4, #3
   27fb0:	movw	ip, #31784	; 0x7c28
   27fb4:	movt	ip, #3
   27fb8:	b	27fcc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1fc>
   27fbc:	movw	r4, #31528	; 0x7b28
   27fc0:	movt	r4, #3
   27fc4:	movw	ip, #32040	; 0x7d28
   27fc8:	movt	ip, #3
   27fcc:	cmp	r5, #0
   27fd0:	moveq	ip, r4
   27fd4:	cmp	r2, #0
   27fd8:	beq	27ff4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   27fdc:	ldr	r9, [r2]
   27fe0:	cmp	r9, #0
   27fe4:	mvneq	r9, #0
   27fe8:	b	27ff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   27fec:	mov	r8, r0
   27ff0:	b	28178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   27ff4:	mvn	r9, #0
   27ff8:	mov	r6, sp
   27ffc:	mov	r8, r0
   28000:	mov	r7, #0
   28004:	mov	r5, lr
   28008:	cmp	r5, r7
   2800c:	bne	28028 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x258>
   28010:	b	280a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   28014:	add	r7, r7, #1
   28018:	cmp	r7, #4
   2801c:	bcs	28054 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x284>
   28020:	cmp	r5, r7
   28024:	beq	280a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d8>
   28028:	ldrb	r4, [r1, r7]
   2802c:	ldrb	r4, [ip, r4]
   28030:	strb	r4, [r6, r7]
   28034:	cmp	r4, #64	; 0x40
   28038:	bcc	28014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   2803c:	cmp	r4, #65	; 0x41
   28040:	bne	280f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   28044:	sub	r7, r7, #1
   28048:	sub	r5, r5, #1
   2804c:	add	r1, r1, #1
   28050:	b	28014 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x244>
   28054:	cmp	r9, #3
   28058:	bcc	281a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   2805c:	ldrb	lr, [sp]
   28060:	ldrb	r4, [sp, #1]
   28064:	lsr	r7, r4, #4
   28068:	orr	r7, r7, lr, lsl #2
   2806c:	strb	r7, [r8]
   28070:	ldrb	r7, [sp, #2]
   28074:	lsr	r7, r7, #2
   28078:	orr	r7, r7, r4, lsl #4
   2807c:	strb	r7, [r8, #1]
   28080:	ldrb	r7, [sp, #2]
   28084:	ldrb	r4, [sp, #3]
   28088:	orr	r7, r4, r7, lsl #6
   2808c:	strb	r7, [r8, #2]
   28090:	sub	lr, r5, #4
   28094:	subs	r9, r9, #3
   28098:	add	r1, r1, #4
   2809c:	add	r8, r8, #3
   280a0:	bne	28000 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   280a4:	b	28174 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a4>
   280a8:	mov	r4, r7
   280ac:	cmp	r7, #0
   280b0:	beq	28170 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a0>
   280b4:	cmp	r7, #3
   280b8:	beq	28130 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   280bc:	mov	ip, #4
   280c0:	cmp	r7, #2
   280c4:	bne	28178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   280c8:	ldrb	r1, [sp, #1]
   280cc:	ands	r7, r1, #15
   280d0:	mov	ip, #1
   280d4:	movwne	ip, #5
   280d8:	bne	28178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   280dc:	ldrb	r7, [sp]
   280e0:	lsl	r7, r7, #2
   280e4:	orr	r1, r7, r1, lsr #4
   280e8:	strb	r1, [r8], #1
   280ec:	b	28170 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a0>
   280f0:	cmp	r4, #66	; 0x42
   280f4:	mov	r4, r7
   280f8:	bne	280ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   280fc:	add	r6, r7, #1
   28100:	mov	r4, r6
   28104:	cmp	r6, r5
   28108:	bcs	280ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   2810c:	cmp	r4, #7
   28110:	ldrbls	r6, [r1, r4]
   28114:	ldrbls	r6, [ip, r6]
   28118:	subls	r6, r6, #65	; 0x41
   2811c:	uxtbls	sl, r6
   28120:	addls	r6, r4, #1
   28124:	cmpls	sl, #2
   28128:	bcc	28100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x330>
   2812c:	b	280ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
   28130:	mov	ip, #5
   28134:	ldrb	r1, [sp, #2]
   28138:	tst	r1, #3
   2813c:	bne	28178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   28140:	mov	ip, #1
   28144:	cmp	r9, #2
   28148:	bcc	28178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   2814c:	ldrb	ip, [sp]
   28150:	ldrb	r6, [sp, #1]
   28154:	lsl	r7, r6, #4
   28158:	orr	r1, r7, r1, lsr #2
   2815c:	strb	r1, [r8, #1]
   28160:	lsr	r1, r6, #4
   28164:	orr	r1, r1, ip, lsl #2
   28168:	strb	r1, [r8]
   2816c:	add	r8, r8, #2
   28170:	sub	lr, r5, r4
   28174:	mov	ip, #0
   28178:	cmp	r2, #0
   2817c:	subne	r0, r8, r0
   28180:	strne	r0, [r2]
   28184:	cmp	r3, #0
   28188:	ldrne	r0, [r3]
   2818c:	subne	r0, r0, lr
   28190:	strne	r0, [r3]
   28194:	mov	r0, ip
   28198:	sub	sp, fp, #28
   2819c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281a0:	mov	ip, #1
   281a4:	b	28178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>

000281a8 <flatcc_json_parser_build_string@@Base>:
   281a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281ac:	add	fp, sp, #28
   281b0:	sub	sp, sp, #4
   281b4:	mov	r9, r3
   281b8:	mov	sl, r2
   281bc:	mov	r6, r0
   281c0:	bl	27870 <flatcc_json_parser_float@@Base+0x194>
   281c4:	mov	r4, r0
   281c8:	mov	r0, r6
   281cc:	mov	r1, r4
   281d0:	mov	r2, sl
   281d4:	bl	269d0 <flatcc_json_parser_string_part@@Base>
   281d8:	mov	r5, r0
   281dc:	cmp	r0, sl
   281e0:	beq	28204 <flatcc_json_parser_build_string@@Base+0x5c>
   281e4:	ldrb	r0, [r5]
   281e8:	cmp	r0, #34	; 0x22
   281ec:	bne	28204 <flatcc_json_parser_build_string@@Base+0x5c>
   281f0:	sub	r2, r5, r4
   281f4:	ldr	r0, [r6]
   281f8:	mov	r1, r4
   281fc:	bl	2457c <flatcc_builder_create_string@@Base>
   28200:	b	282d0 <flatcc_json_parser_build_string@@Base+0x128>
   28204:	ldr	r0, [r6]
   28208:	bl	23010 <flatcc_builder_start_string@@Base>
   2820c:	cmp	r0, #0
   28210:	beq	28220 <flatcc_json_parser_build_string@@Base+0x78>
   28214:	mov	r0, #0
   28218:	str	r0, [r9]
   2821c:	b	282e8 <flatcc_json_parser_build_string@@Base+0x140>
   28220:	sub	r2, r5, r4
   28224:	ldr	r0, [r6]
   28228:	mov	r1, r4
   2822c:	bl	22bc8 <flatcc_builder_append_string@@Base>
   28230:	cmp	r0, #0
   28234:	beq	28214 <flatcc_json_parser_build_string@@Base+0x6c>
   28238:	cmp	r5, sl
   2823c:	beq	282c8 <flatcc_json_parser_build_string@@Base+0x120>
   28240:	mov	r8, sp
   28244:	add	r4, r8, #1
   28248:	b	28254 <flatcc_json_parser_build_string@@Base+0xac>
   2824c:	cmp	r5, sl
   28250:	beq	282c8 <flatcc_json_parser_build_string@@Base+0x120>
   28254:	ldrb	r0, [r5]
   28258:	cmp	r0, #34	; 0x22
   2825c:	beq	282c8 <flatcc_json_parser_build_string@@Base+0x120>
   28260:	mov	r0, r6
   28264:	mov	r1, r5
   28268:	mov	r2, sl
   2826c:	mov	r3, r8
   28270:	bl	26b3c <flatcc_json_parser_string_escape@@Base>
   28274:	mov	r7, r0
   28278:	ldr	r0, [r6]
   2827c:	ldrb	r2, [sp]
   28280:	mov	r1, r4
   28284:	bl	22bc8 <flatcc_builder_append_string@@Base>
   28288:	cmp	r0, #0
   2828c:	beq	282f4 <flatcc_json_parser_build_string@@Base+0x14c>
   28290:	mov	r0, r6
   28294:	mov	r1, r7
   28298:	mov	r2, sl
   2829c:	bl	269d0 <flatcc_json_parser_string_part@@Base>
   282a0:	mov	r5, r0
   282a4:	cmp	r0, sl
   282a8:	beq	2824c <flatcc_json_parser_build_string@@Base+0xa4>
   282ac:	sub	r2, r5, r7
   282b0:	ldr	r0, [r6]
   282b4:	mov	r1, r7
   282b8:	bl	22bc8 <flatcc_builder_append_string@@Base>
   282bc:	cmp	r0, #0
   282c0:	bne	2824c <flatcc_json_parser_build_string@@Base+0xa4>
   282c4:	b	28214 <flatcc_json_parser_build_string@@Base+0x6c>
   282c8:	ldr	r0, [r6]
   282cc:	bl	24690 <flatcc_builder_end_string@@Base>
   282d0:	str	r0, [r9]
   282d4:	mov	r0, r6
   282d8:	mov	r1, r5
   282dc:	mov	r2, sl
   282e0:	bl	2789c <flatcc_json_parser_float@@Base+0x1c0>
   282e4:	mov	r5, r0
   282e8:	mov	r0, r5
   282ec:	sub	sp, fp, #28
   282f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282f4:	mov	r5, r7
   282f8:	b	28214 <flatcc_json_parser_build_string@@Base+0x6c>

000282fc <flatcc_json_parser_prepare_unions@@Base>:
   282fc:	push	{r4, r5, r6, r7, fp, lr}
   28300:	add	fp, sp, #16
   28304:	mov	r5, r3
   28308:	mov	r6, r2
   2830c:	mov	r4, r1
   28310:	mov	r7, r0
   28314:	add	r0, r3, r3, lsl #1
   28318:	mov	r1, #8
   2831c:	add	r1, r1, r0, lsl #3
   28320:	ldr	r0, [r7]
   28324:	bl	21e1c <flatcc_builder_enter_user_frame@@Base>
   28328:	mov	r1, r0
   2832c:	ldr	r0, [fp, #8]
   28330:	str	r1, [r0]
   28334:	cmp	r1, #0
   28338:	beq	28350 <flatcc_json_parser_prepare_unions@@Base+0x54>
   2833c:	ldr	r0, [r7]
   28340:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28344:	str	r5, [r0]
   28348:	mov	r0, r4
   2834c:	pop	{r4, r5, r6, r7, fp, pc}
   28350:	mov	r0, r7
   28354:	mov	r1, r4
   28358:	mov	r2, r6
   2835c:	mov	r3, #33	; 0x21
   28360:	bl	26998 <flatcc_json_parser_set_error@@Base>
   28364:	pop	{r4, r5, r6, r7, fp, pc}

00028368 <flatcc_json_parser_finalize_unions@@Base>:
   28368:	push	{r4, r5, r6, r7, fp, lr}
   2836c:	add	fp, sp, #16
   28370:	mov	r4, r3
   28374:	mov	r7, r2
   28378:	mov	r5, r1
   2837c:	mov	r6, r0
   28380:	ldr	r0, [r0]
   28384:	mov	r1, r3
   28388:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   2838c:	ldr	r0, [r0, #4]
   28390:	cmp	r0, #0
   28394:	beq	283b0 <flatcc_json_parser_finalize_unions@@Base+0x48>
   28398:	mov	r0, r6
   2839c:	mov	r1, r5
   283a0:	mov	r2, r7
   283a4:	mov	r3, #27
   283a8:	bl	26998 <flatcc_json_parser_set_error@@Base>
   283ac:	mov	r5, r0
   283b0:	ldr	r0, [r6]
   283b4:	mov	r1, r4
   283b8:	bl	21ee0 <flatcc_builder_exit_user_frame_at@@Base>
   283bc:	mov	r0, r5
   283c0:	pop	{r4, r5, r6, r7, fp, pc}

000283c4 <flatcc_json_parser_union@@Base>:
   283c4:	push	{r4, r5, r6, r7, fp, lr}
   283c8:	add	fp, sp, #16
   283cc:	sub	sp, sp, #16
   283d0:	mov	r7, r3
   283d4:	mov	r4, r2
   283d8:	mov	r6, r1
   283dc:	mov	r5, r0
   283e0:	ldr	r0, [r0]
   283e4:	ldr	r1, [fp, #12]
   283e8:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   283ec:	add	r2, r0, #8
   283f0:	add	r3, r7, r7, lsl #1
   283f4:	mov	r1, r2
   283f8:	ldr	r7, [r1, r3, lsl #3]!
   283fc:	cmp	r7, #0
   28400:	beq	28428 <flatcc_json_parser_union@@Base+0x64>
   28404:	mov	r0, r5
   28408:	mov	r1, r6
   2840c:	mov	r2, r4
   28410:	mov	r3, #28
   28414:	bl	26998 <flatcc_json_parser_set_error@@Base>
   28418:	mov	r6, r0
   2841c:	mov	r0, r6
   28420:	sub	sp, fp, #16
   28424:	pop	{r4, r5, r6, r7, fp, pc}
   28428:	add	r2, r2, r3, lsl #3
   2842c:	ldrb	r3, [r2, #12]
   28430:	cmp	r3, #0
   28434:	beq	284a0 <flatcc_json_parser_union@@Base+0xdc>
   28438:	ldrb	r3, [r2, #13]
   2843c:	strb	r3, [sp, #8]
   28440:	cmp	r3, #0
   28444:	beq	284d4 <flatcc_json_parser_union@@Base+0x110>
   28448:	ldr	r7, [fp, #16]
   2844c:	ldr	r1, [r0, #4]
   28450:	sub	r1, r1, #1
   28454:	str	r1, [r0, #4]
   28458:	add	r0, sp, #8
   2845c:	add	r0, r0, #4
   28460:	str	r0, [sp]
   28464:	mov	r0, r5
   28468:	mov	r1, r6
   2846c:	mov	r2, r4
   28470:	blx	r7
   28474:	mov	r6, r0
   28478:	cmp	r0, r4
   2847c:	beq	2841c <flatcc_json_parser_union@@Base+0x58>
   28480:	ldr	r1, [fp, #8]
   28484:	ldr	r0, [r5]
   28488:	ldr	r2, [sp, #8]
   2848c:	ldr	r3, [sp, #12]
   28490:	bl	23d68 <flatcc_builder_table_add_union@@Base>
   28494:	cmp	r0, #0
   28498:	bne	28404 <flatcc_json_parser_union@@Base+0x40>
   2849c:	b	2841c <flatcc_json_parser_union@@Base+0x58>
   284a0:	ldr	r3, [r0, #4]
   284a4:	add	r3, r3, #1
   284a8:	str	r3, [r0, #4]
   284ac:	ldr	r0, [r5, #16]
   284b0:	str	r0, [r2, #8]
   284b4:	ldr	r0, [r5, #4]
   284b8:	str	r0, [r2, #4]
   284bc:	str	r6, [r1]
   284c0:	mov	r0, r5
   284c4:	mov	r1, r6
   284c8:	mov	r2, r4
   284cc:	bl	272ec <flatcc_json_parser_generic_json@@Base>
   284d0:	b	28418 <flatcc_json_parser_union@@Base+0x54>
   284d4:	mov	r0, r5
   284d8:	mov	r1, r6
   284dc:	mov	r2, r4
   284e0:	mov	r3, #25
   284e4:	b	28414 <flatcc_json_parser_union@@Base+0x50>

000284e8 <flatcc_json_parser_union_type@@Base>:
   284e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284ec:	add	fp, sp, #28
   284f0:	sub	sp, sp, #20
   284f4:	mov	r6, r3
   284f8:	mov	r7, r2
   284fc:	mov	r4, r1
   28500:	mov	r5, r0
   28504:	ldr	r0, [r0]
   28508:	ldr	r1, [fp, #12]
   2850c:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28510:	mov	sl, r0
   28514:	add	r8, r0, #8
   28518:	add	r9, r6, r6, lsl #1
   2851c:	add	r6, r8, r9, lsl #3
   28520:	mov	r0, r6
   28524:	ldrb	r1, [r0, #12]!
   28528:	cmp	r1, #0
   2852c:	beq	28554 <flatcc_json_parser_union_type@@Base+0x6c>
   28530:	mov	r0, r5
   28534:	mov	r1, r4
   28538:	mov	r2, r7
   2853c:	mov	r3, #28
   28540:	bl	26998 <flatcc_json_parser_set_error@@Base>
   28544:	mov	r7, r0
   28548:	mov	r0, r7
   2854c:	sub	sp, fp, #28
   28550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28554:	mov	r1, #1
   28558:	strb	r1, [r0]
   2855c:	add	r3, r6, #13
   28560:	mov	r0, r5
   28564:	mov	r1, r4
   28568:	mov	r2, r7
   2856c:	str	r3, [sp, #8]
   28570:	bl	28690 <flatcc_json_parser_union_type@@Base+0x1a8>
   28574:	mov	r2, r7
   28578:	mov	r7, r0
   2857c:	cmp	r0, r4
   28580:	str	r2, [sp, #4]
   28584:	beq	28590 <flatcc_json_parser_union_type@@Base+0xa8>
   28588:	ldr	r4, [sp, #8]
   2858c:	b	285b0 <flatcc_json_parser_union_type@@Base+0xc8>
   28590:	ldr	r3, [fp, #16]
   28594:	ldr	r0, [sp, #8]
   28598:	mov	r4, r0
   2859c:	str	r0, [sp]
   285a0:	mov	r0, r5
   285a4:	mov	r1, r7
   285a8:	bl	28720 <flatcc_json_parser_union_type@@Base+0x238>
   285ac:	mov	r7, r0
   285b0:	ldr	r1, [r8, r9, lsl #3]
   285b4:	cmp	r1, #0
   285b8:	beq	28644 <flatcc_json_parser_union_type@@Base+0x15c>
   285bc:	ldr	r0, [sl, #4]
   285c0:	cmp	r0, #0
   285c4:	beq	28670 <flatcc_json_parser_union_type@@Base+0x188>
   285c8:	ldr	ip, [fp, #20]
   285cc:	sub	r0, r0, #1
   285d0:	str	r0, [sl, #4]
   285d4:	ldr	r0, [r6, #8]
   285d8:	ldr	r9, [r5, #4]
   285dc:	ldr	r8, [r5, #16]
   285e0:	str	r0, [r5, #16]
   285e4:	ldr	r0, [r6, #4]
   285e8:	str	r0, [r5, #4]
   285ec:	ldrb	r3, [r4]
   285f0:	strb	r3, [sp, #12]
   285f4:	add	r0, sp, #12
   285f8:	add	r0, r0, #4
   285fc:	str	r0, [sp]
   28600:	mov	r0, r5
   28604:	ldr	r6, [sp, #4]
   28608:	mov	r2, r6
   2860c:	blx	ip
   28610:	cmp	r0, r6
   28614:	beq	2865c <flatcc_json_parser_union_type@@Base+0x174>
   28618:	ldr	r1, [fp, #8]
   2861c:	ldr	r0, [r5]
   28620:	ldr	r2, [sp, #12]
   28624:	ldr	r3, [sp, #16]
   28628:	bl	23d68 <flatcc_builder_table_add_union@@Base>
   2862c:	cmp	r0, #0
   28630:	beq	28664 <flatcc_json_parser_union_type@@Base+0x17c>
   28634:	mov	r0, r5
   28638:	mov	r1, r7
   2863c:	ldr	r2, [sp, #4]
   28640:	b	2853c <flatcc_json_parser_union_type@@Base+0x54>
   28644:	ldrb	r0, [r4]
   28648:	ldr	r1, [sl, #4]
   2864c:	cmp	r0, #0
   28650:	addne	r1, r1, #1
   28654:	str	r1, [sl, #4]
   28658:	b	28548 <flatcc_json_parser_union_type@@Base+0x60>
   2865c:	mov	r7, r6
   28660:	b	28548 <flatcc_json_parser_union_type@@Base+0x60>
   28664:	str	r9, [r5, #4]
   28668:	str	r8, [r5, #16]
   2866c:	b	28548 <flatcc_json_parser_union_type@@Base+0x60>
   28670:	movw	r0, #33212	; 0x81bc
   28674:	movt	r0, #3
   28678:	movw	r1, #33227	; 0x81cb
   2867c:	movt	r1, #3
   28680:	movw	r3, #33301	; 0x8215
   28684:	movt	r3, #3
   28688:	movw	r2, #965	; 0x3c5
   2868c:	bl	14f40 <__assert_fail@plt>
   28690:	push	{r4, r5, r6, r7, fp, lr}
   28694:	add	fp, sp, #16
   28698:	sub	sp, sp, #24
   2869c:	mov	r7, r1
   286a0:	mov	r6, r0
   286a4:	mov	r0, #0
   286a8:	str	r0, [sp, #20]
   286ac:	str	r0, [sp, #16]
   286b0:	str	r0, [sp, #12]
   286b4:	strb	r0, [r3]
   286b8:	cmp	r1, r2
   286bc:	beq	28714 <flatcc_json_parser_union_type@@Base+0x22c>
   286c0:	mov	r5, r3
   286c4:	mov	r4, r2
   286c8:	add	r0, sp, #16
   286cc:	str	r0, [sp]
   286d0:	add	r3, sp, #12
   286d4:	mov	r0, r6
   286d8:	mov	r1, r7
   286dc:	bl	27cac <flatcc_json_parser_integer@@Base>
   286e0:	mov	r1, r0
   286e4:	cmp	r0, r7
   286e8:	beq	28710 <flatcc_json_parser_union_type@@Base+0x228>
   286ec:	ldr	r3, [sp, #12]
   286f0:	ldr	r0, [sp, #16]
   286f4:	ldr	r2, [sp, #20]
   286f8:	stm	sp, {r0, r2, r5}
   286fc:	mov	r0, r6
   28700:	mov	r2, r4
   28704:	bl	298e0 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   28708:	mov	r7, r0
   2870c:	b	28714 <flatcc_json_parser_union_type@@Base+0x22c>
   28710:	mov	r7, r1
   28714:	mov	r0, r7
   28718:	sub	sp, fp, #16
   2871c:	pop	{r4, r5, r6, r7, fp, pc}
   28720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28724:	add	fp, sp, #28
   28728:	sub	sp, sp, #36	; 0x24
   2872c:	mov	r8, r3
   28730:	mov	r6, r2
   28734:	mov	r5, r0
   28738:	mov	r0, #0
   2873c:	strb	r0, [fp, #-29]	; 0xffffffe3
   28740:	ldr	sl, [fp, #8]
   28744:	strb	r0, [sl]
   28748:	mov	r0, r5
   2874c:	bl	2992c <flatcc_json_parser_struct_as_root@@Base+0xa20>
   28750:	mov	r4, r0
   28754:	cmp	r0, r6
   28758:	beq	28808 <flatcc_json_parser_union_type@@Base+0x320>
   2875c:	mov	r9, r8
   28760:	b	28774 <flatcc_json_parser_union_type@@Base+0x28c>
   28764:	ldr	r0, [r9, #4]!
   28768:	cmp	r0, #0
   2876c:	mov	r4, r7
   28770:	beq	28818 <flatcc_json_parser_union_type@@Base+0x330>
   28774:	ldr	r7, [r9]
   28778:	add	r0, sp, #24
   2877c:	str	r0, [sp]
   28780:	add	r0, sp, #16
   28784:	str	r0, [sp, #4]
   28788:	mov	r0, r5
   2878c:	mov	r1, r4
   28790:	mov	r2, r6
   28794:	add	r3, sp, #20
   28798:	blx	r7
   2879c:	mov	r7, r0
   287a0:	cmp	r0, r6
   287a4:	beq	28830 <flatcc_json_parser_union_type@@Base+0x348>
   287a8:	cmp	r7, r4
   287ac:	beq	28764 <flatcc_json_parser_union_type@@Base+0x27c>
   287b0:	ldr	r3, [sp, #20]
   287b4:	ldr	r0, [sp, #24]
   287b8:	ldr	r1, [sp, #28]
   287bc:	stm	sp, {r0, r1}
   287c0:	sub	r0, fp, #29
   287c4:	str	r0, [sp, #8]
   287c8:	mov	r0, r5
   287cc:	mov	r1, r7
   287d0:	mov	r2, r6
   287d4:	bl	298e0 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   287d8:	cmp	r0, r6
   287dc:	beq	28810 <flatcc_json_parser_union_type@@Base+0x328>
   287e0:	ldrb	r0, [sl]
   287e4:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   287e8:	add	r0, r0, r1
   287ec:	strb	r0, [sl]
   287f0:	ldr	r0, [sp, #16]
   287f4:	cmp	r0, #0
   287f8:	mov	r4, r7
   287fc:	mov	r9, r8
   28800:	bne	28774 <flatcc_json_parser_union_type@@Base+0x28c>
   28804:	b	28830 <flatcc_json_parser_union_type@@Base+0x348>
   28808:	mov	r7, r4
   2880c:	b	28830 <flatcc_json_parser_union_type@@Base+0x348>
   28810:	mov	r7, r6
   28814:	b	28830 <flatcc_json_parser_union_type@@Base+0x348>
   28818:	mov	r0, r5
   2881c:	mov	r1, r7
   28820:	mov	r2, r6
   28824:	mov	r3, #23
   28828:	bl	26998 <flatcc_json_parser_set_error@@Base>
   2882c:	mov	r7, r0
   28830:	mov	r0, r7
   28834:	sub	sp, fp, #28
   28838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002883c <flatcc_json_parser_union_vector@@Base>:
   2883c:	push	{r4, r5, r6, r7, fp, lr}
   28840:	add	fp, sp, #16
   28844:	sub	sp, sp, #16
   28848:	mov	r7, r3
   2884c:	mov	r4, r2
   28850:	mov	r5, r1
   28854:	mov	r6, r0
   28858:	ldr	r0, [r0]
   2885c:	ldr	r1, [fp, #12]
   28860:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28864:	add	r2, r0, #8
   28868:	add	r3, r7, r7, lsl #1
   2886c:	mov	r1, r2
   28870:	ldr	r7, [r1, r3, lsl #3]!
   28874:	cmp	r7, #0
   28878:	beq	28898 <flatcc_json_parser_union_vector@@Base+0x5c>
   2887c:	mov	r0, r6
   28880:	mov	r1, r5
   28884:	mov	r2, r4
   28888:	mov	r3, #28
   2888c:	sub	sp, fp, #16
   28890:	pop	{r4, r5, r6, r7, fp, lr}
   28894:	b	26998 <flatcc_json_parser_set_error@@Base>
   28898:	add	r2, r2, r3, lsl #3
   2889c:	ldrb	r7, [r2, #12]
   288a0:	ldr	r3, [r0, #4]
   288a4:	cmp	r7, #0
   288a8:	beq	288e4 <flatcc_json_parser_union_vector@@Base+0xa8>
   288ac:	ldr	r1, [fp, #16]
   288b0:	ldr	r7, [fp, #8]
   288b4:	sub	r3, r3, #1
   288b8:	str	r3, [r0, #4]
   288bc:	ldr	r0, [r2, #16]
   288c0:	ldr	r3, [r2, #20]
   288c4:	stm	sp, {r0, r7}
   288c8:	str	r1, [sp, #8]
   288cc:	mov	r0, r6
   288d0:	mov	r1, r5
   288d4:	mov	r2, r4
   288d8:	bl	28918 <flatcc_json_parser_union_vector@@Base+0xdc>
   288dc:	sub	sp, fp, #16
   288e0:	pop	{r4, r5, r6, r7, fp, pc}
   288e4:	add	r3, r3, #1
   288e8:	str	r3, [r0, #4]
   288ec:	ldr	r0, [r6, #16]
   288f0:	str	r0, [r2, #8]
   288f4:	ldr	r0, [r6, #4]
   288f8:	str	r0, [r2, #4]
   288fc:	str	r5, [r1]
   28900:	mov	r0, r6
   28904:	mov	r1, r5
   28908:	mov	r2, r4
   2890c:	sub	sp, fp, #16
   28910:	pop	{r4, r5, r6, r7, fp, lr}
   28914:	b	272ec <flatcc_json_parser_generic_json@@Base>
   28918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2891c:	add	fp, sp, #28
   28920:	sub	sp, sp, #12
   28924:	mov	r7, r3
   28928:	mov	r5, r2
   2892c:	mov	r4, r1
   28930:	mov	r6, r0
   28934:	mov	r0, #0
   28938:	str	r0, [sp, #8]
   2893c:	ldr	r0, [r6]
   28940:	bl	22ef8 <flatcc_builder_start_offset_vector@@Base>
   28944:	cmp	r0, #0
   28948:	beq	28970 <flatcc_json_parser_union_vector@@Base+0x134>
   2894c:	mov	r0, r6
   28950:	mov	r1, r4
   28954:	mov	r2, r5
   28958:	mov	r3, #33	; 0x21
   2895c:	bl	26998 <flatcc_json_parser_set_error@@Base>
   28960:	mov	r4, r0
   28964:	mov	r0, r4
   28968:	sub	sp, fp, #28
   2896c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28970:	ldr	r8, [fp, #8]
   28974:	add	r3, sp, #4
   28978:	mov	r0, r6
   2897c:	mov	r1, r4
   28980:	mov	r2, r5
   28984:	bl	28d70 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   28988:	mov	r4, r0
   2898c:	clz	r0, r8
   28990:	lsr	r0, r0, #5
   28994:	ldr	r1, [sp, #4]
   28998:	cmp	r1, #0
   2899c:	beq	28a38 <flatcc_json_parser_union_vector@@Base+0x1fc>
   289a0:	sub	sl, r8, #1
   289a4:	mov	r9, #0
   289a8:	add	r8, sp, #8
   289ac:	tst	r0, #1
   289b0:	bne	28a84 <flatcc_json_parser_union_vector@@Base+0x248>
   289b4:	ldr	r0, [r6]
   289b8:	mov	r1, r7
   289bc:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   289c0:	ldrb	r3, [r0, r9]
   289c4:	str	r8, [sp]
   289c8:	mov	r0, r6
   289cc:	mov	r1, r4
   289d0:	mov	r2, r5
   289d4:	ldr	r4, [fp, #16]
   289d8:	blx	r4
   289dc:	mov	r4, r0
   289e0:	cmp	r0, r5
   289e4:	beq	28964 <flatcc_json_parser_union_vector@@Base+0x128>
   289e8:	ldr	r0, [r6]
   289ec:	mov	r1, #1
   289f0:	bl	22a44 <flatcc_builder_extend_offset_vector@@Base>
   289f4:	cmp	r0, #0
   289f8:	beq	2894c <flatcc_json_parser_union_vector@@Base+0x110>
   289fc:	ldr	r1, [sp, #8]
   28a00:	str	r1, [r0]
   28a04:	mov	r0, r6
   28a08:	mov	r1, r4
   28a0c:	mov	r2, r5
   28a10:	add	r3, sp, #4
   28a14:	bl	27b2c <flatcc_json_parser_float@@Base+0x450>
   28a18:	mov	r4, r0
   28a1c:	sub	r0, sl, r9
   28a20:	clz	r0, r0
   28a24:	lsr	r0, r0, #5
   28a28:	add	r9, r9, #1
   28a2c:	ldr	r1, [sp, #4]
   28a30:	cmp	r1, #0
   28a34:	bne	289ac <flatcc_json_parser_union_vector@@Base+0x170>
   28a38:	cmp	r0, #0
   28a3c:	beq	28a84 <flatcc_json_parser_union_vector@@Base+0x248>
   28a40:	ldr	r0, [r6]
   28a44:	mov	r1, r7
   28a48:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28a4c:	mov	r1, r0
   28a50:	ldr	r0, [r6]
   28a54:	bl	23cec <flatcc_builder_end_offset_vector_for_unions@@Base>
   28a58:	str	r0, [sp, #8]
   28a5c:	cmp	r0, #0
   28a60:	beq	2894c <flatcc_json_parser_union_vector@@Base+0x110>
   28a64:	ldr	r1, [fp, #12]
   28a68:	ldr	r0, [r6]
   28a6c:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   28a70:	cmp	r0, #0
   28a74:	beq	2894c <flatcc_json_parser_union_vector@@Base+0x110>
   28a78:	ldr	r1, [sp, #8]
   28a7c:	str	r1, [r0]
   28a80:	b	28964 <flatcc_json_parser_union_vector@@Base+0x128>
   28a84:	mov	r0, r6
   28a88:	mov	r1, r4
   28a8c:	mov	r2, r5
   28a90:	mov	r3, #30
   28a94:	b	2895c <flatcc_json_parser_union_vector@@Base+0x120>

00028a98 <flatcc_json_parser_union_type_vector@@Base>:
   28a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a9c:	add	fp, sp, #28
   28aa0:	sub	sp, sp, #28
   28aa4:	mov	r6, r3
   28aa8:	mov	r9, r2
   28aac:	mov	r4, r1
   28ab0:	mov	r5, r0
   28ab4:	ldr	r0, [r0]
   28ab8:	ldr	r1, [fp, #12]
   28abc:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28ac0:	add	r0, r0, #8
   28ac4:	add	sl, r6, r6, lsl #1
   28ac8:	add	r7, r0, sl, lsl #3
   28acc:	mov	r0, r7
   28ad0:	ldrb	r1, [r0, #12]!
   28ad4:	cmp	r1, #0
   28ad8:	beq	28af0 <flatcc_json_parser_union_type_vector@@Base+0x58>
   28adc:	mov	r0, r5
   28ae0:	mov	r1, r4
   28ae4:	mov	r2, r9
   28ae8:	mov	r3, #28
   28aec:	b	28d18 <flatcc_json_parser_union_type_vector@@Base+0x280>
   28af0:	mov	r1, #1
   28af4:	strb	r1, [r0]
   28af8:	ldr	r0, [r5]
   28afc:	mov	r1, #1
   28b00:	mov	r2, #1
   28b04:	mvn	r3, #0
   28b08:	bl	22e68 <flatcc_builder_start_vector@@Base>
   28b0c:	cmp	r0, #0
   28b10:	bne	28d08 <flatcc_json_parser_union_type_vector@@Base+0x270>
   28b14:	add	r3, sp, #24
   28b18:	mov	r0, r5
   28b1c:	mov	r1, r4
   28b20:	mov	r2, r9
   28b24:	bl	28d70 <flatcc_json_parser_union_type_vector@@Base+0x2d8>
   28b28:	mov	r4, r0
   28b2c:	ldr	r0, [r5]
   28b30:	ldr	r1, [sp, #24]
   28b34:	cmp	r1, #0
   28b38:	beq	28c10 <flatcc_json_parser_union_type_vector@@Base+0x178>
   28b3c:	add	r6, sp, #23
   28b40:	b	28b78 <flatcc_json_parser_union_type_vector@@Base+0xe0>
   28b44:	ldrb	r1, [sp, #23]
   28b48:	mov	r0, r8
   28b4c:	bl	28e00 <flatcc_json_parser_union_type_vector@@Base+0x368>
   28b50:	mov	r0, r5
   28b54:	mov	r1, r4
   28b58:	mov	r2, r9
   28b5c:	add	r3, sp, #24
   28b60:	bl	27b2c <flatcc_json_parser_float@@Base+0x450>
   28b64:	mov	r4, r0
   28b68:	ldr	r0, [r5]
   28b6c:	ldr	r1, [sp, #24]
   28b70:	cmp	r1, #0
   28b74:	beq	28c10 <flatcc_json_parser_union_type_vector@@Base+0x178>
   28b78:	mov	r1, #1
   28b7c:	bl	2287c <flatcc_builder_extend_vector@@Base>
   28b80:	cmp	r0, #0
   28b84:	beq	28d08 <flatcc_json_parser_union_type_vector@@Base+0x270>
   28b88:	mov	r8, r0
   28b8c:	mov	r0, r5
   28b90:	mov	r1, r4
   28b94:	mov	r2, r9
   28b98:	mov	r3, r6
   28b9c:	bl	28690 <flatcc_json_parser_union_type@@Base+0x1a8>
   28ba0:	mov	r1, r6
   28ba4:	mov	r6, r0
   28ba8:	cmp	r4, r0
   28bac:	beq	28bb8 <flatcc_json_parser_union_type_vector@@Base+0x120>
   28bb0:	mov	r4, r6
   28bb4:	b	28be0 <flatcc_json_parser_union_type_vector@@Base+0x148>
   28bb8:	str	r1, [sp]
   28bbc:	mov	r0, r5
   28bc0:	mov	r1, r6
   28bc4:	mov	r2, r9
   28bc8:	ldr	r3, [fp, #16]
   28bcc:	bl	28720 <flatcc_json_parser_union_type@@Base+0x238>
   28bd0:	mov	r4, r0
   28bd4:	cmp	r0, r6
   28bd8:	cmpne	r4, r9
   28bdc:	beq	28d08 <flatcc_json_parser_union_type_vector@@Base+0x270>
   28be0:	ldrb	r0, [sp, #23]
   28be4:	ldr	r1, [fp, #24]
   28be8:	blx	r1
   28bec:	cmp	r0, #0
   28bf0:	add	r6, sp, #23
   28bf4:	bne	28b44 <flatcc_json_parser_union_type_vector@@Base+0xac>
   28bf8:	ldrb	r0, [r5, #8]
   28bfc:	tst	r0, #1
   28c00:	beq	28d3c <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   28c04:	mov	r0, #0
   28c08:	strb	r0, [sp, #23]
   28c0c:	b	28b44 <flatcc_json_parser_union_type_vector@@Base+0xac>
   28c10:	bl	23b20 <flatcc_builder_vector_count@@Base>
   28c14:	mov	r8, r0
   28c18:	str	r0, [r7, #16]
   28c1c:	ldr	r0, [r5]
   28c20:	mov	r1, r8
   28c24:	bl	21e1c <flatcc_builder_enter_user_frame@@Base>
   28c28:	mov	r1, r0
   28c2c:	ldr	r0, [r5]
   28c30:	str	r1, [sp, #16]
   28c34:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28c38:	mov	r6, r0
   28c3c:	ldr	r0, [r5]
   28c40:	bl	23b2c <flatcc_builder_vector_edit@@Base>
   28c44:	mov	r1, r0
   28c48:	mov	r0, r6
   28c4c:	mov	r2, r8
   28c50:	bl	14e5c <memcpy@plt>
   28c54:	ldr	r0, [r5]
   28c58:	bl	23aa0 <flatcc_builder_end_vector@@Base>
   28c5c:	cmp	r0, #0
   28c60:	beq	28d08 <flatcc_json_parser_union_type_vector@@Base+0x270>
   28c64:	mov	r7, r0
   28c68:	ldr	r6, [fp, #8]
   28c6c:	ldr	r0, [r5]
   28c70:	sub	r1, r6, #1
   28c74:	bl	23e74 <flatcc_builder_table_add_offset@@Base>
   28c78:	cmp	r0, #0
   28c7c:	beq	28d08 <flatcc_json_parser_union_type_vector@@Base+0x270>
   28c80:	str	r7, [r0]
   28c84:	ldr	r0, [r5]
   28c88:	ldr	r1, [fp, #12]
   28c8c:	bl	21f28 <flatcc_builder_get_user_frame_ptr@@Base>
   28c90:	add	r7, r0, #8
   28c94:	mov	r2, r7
   28c98:	ldr	r1, [r2, sl, lsl #3]!
   28c9c:	ldr	r3, [sp, #16]
   28ca0:	str	r3, [r2, #20]
   28ca4:	ldr	r2, [r0, #4]
   28ca8:	cmp	r1, #0
   28cac:	beq	28d2c <flatcc_json_parser_union_type_vector@@Base+0x294>
   28cb0:	cmp	r2, #0
   28cb4:	beq	28d50 <flatcc_json_parser_union_type_vector@@Base+0x2b8>
   28cb8:	ldr	ip, [fp, #20]
   28cbc:	sub	r2, r2, #1
   28cc0:	str	r2, [r0, #4]
   28cc4:	add	r0, r7, sl, lsl #3
   28cc8:	ldr	r2, [r0, #8]
   28ccc:	ldr	sl, [r5, #4]
   28cd0:	ldr	r7, [r5, #16]
   28cd4:	str	r2, [r5, #16]
   28cd8:	ldr	r0, [r0, #4]
   28cdc:	str	r0, [r5, #4]
   28ce0:	str	r8, [sp]
   28ce4:	stmib	sp, {r6, ip}
   28ce8:	mov	r0, r5
   28cec:	mov	r2, r9
   28cf0:	bl	28918 <flatcc_json_parser_union_vector@@Base+0xdc>
   28cf4:	cmp	r0, r9
   28cf8:	strne	sl, [r5, #4]
   28cfc:	strne	r7, [r5, #16]
   28d00:	movne	r9, r4
   28d04:	b	28d20 <flatcc_json_parser_union_type_vector@@Base+0x288>
   28d08:	mov	r0, r5
   28d0c:	mov	r1, r4
   28d10:	mov	r2, r9
   28d14:	mov	r3, #33	; 0x21
   28d18:	bl	26998 <flatcc_json_parser_set_error@@Base>
   28d1c:	mov	r9, r0
   28d20:	mov	r0, r9
   28d24:	sub	sp, fp, #28
   28d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d2c:	add	r1, r2, #1
   28d30:	str	r1, [r0, #4]
   28d34:	mov	r9, r4
   28d38:	b	28d20 <flatcc_json_parser_union_type_vector@@Base+0x288>
   28d3c:	mov	r0, r5
   28d40:	mov	r1, r4
   28d44:	mov	r2, r9
   28d48:	mov	r3, #15
   28d4c:	b	28d18 <flatcc_json_parser_union_type_vector@@Base+0x280>
   28d50:	movw	r0, #33212	; 0x81bc
   28d54:	movt	r0, #3
   28d58:	movw	r1, #33227	; 0x81cb
   28d5c:	movt	r1, #3
   28d60:	movw	r3, #33505	; 0x82e1
   28d64:	movt	r3, #3
   28d68:	movw	r2, #1122	; 0x462
   28d6c:	bl	14f40 <__assert_fail@plt>
   28d70:	push	{r4, r5, r6, sl, fp, lr}
   28d74:	add	fp, sp, #16
   28d78:	mov	r5, r3
   28d7c:	mov	r4, r2
   28d80:	mov	r6, r0
   28d84:	cmp	r1, r2
   28d88:	beq	28dd8 <flatcc_json_parser_union_type_vector@@Base+0x340>
   28d8c:	ldrb	r0, [r1]
   28d90:	cmp	r0, #91	; 0x5b
   28d94:	bne	28dd8 <flatcc_json_parser_union_type_vector@@Base+0x340>
   28d98:	add	r1, r1, #1
   28d9c:	mov	r0, r6
   28da0:	mov	r2, r4
   28da4:	bl	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   28da8:	cmp	r0, r4
   28dac:	beq	28df4 <flatcc_json_parser_union_type_vector@@Base+0x35c>
   28db0:	ldrb	r1, [r0]
   28db4:	cmp	r1, #93	; 0x5d
   28db8:	bne	28df4 <flatcc_json_parser_union_type_vector@@Base+0x35c>
   28dbc:	mov	r1, #0
   28dc0:	str	r1, [r5]
   28dc4:	add	r1, r0, #1
   28dc8:	mov	r0, r6
   28dcc:	mov	r2, r4
   28dd0:	pop	{r4, r5, r6, sl, fp, lr}
   28dd4:	b	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   28dd8:	mov	r0, #0
   28ddc:	str	r0, [r5]
   28de0:	mov	r0, r6
   28de4:	mov	r2, r4
   28de8:	mov	r3, #22
   28dec:	bl	26998 <flatcc_json_parser_set_error@@Base>
   28df0:	pop	{r4, r5, r6, sl, fp, pc}
   28df4:	mov	r1, #1
   28df8:	str	r1, [r5]
   28dfc:	pop	{r4, r5, r6, sl, fp, pc}
   28e00:	push	{r4, r5, fp, lr}
   28e04:	add	fp, sp, #8
   28e08:	mov	r4, r1
   28e0c:	mov	r5, r0
   28e10:	mov	r0, r1
   28e14:	bl	29964 <flatcc_json_parser_struct_as_root@@Base+0xa58>
   28e18:	strb	r4, [r5]
   28e1c:	pop	{r4, r5, fp, pc}

00028e20 <flatcc_json_parser_table_as_root@@Base>:
   28e20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28e24:	add	fp, sp, #24
   28e28:	sub	sp, sp, #56	; 0x38
   28e2c:	mov	r4, r2
   28e30:	mov	r6, r0
   28e34:	ldr	r8, [fp, #8]
   28e38:	str	r8, [sp]
   28e3c:	add	r5, sp, #12
   28e40:	cmp	r1, #0
   28e44:	movne	r5, r1
   28e48:	add	r7, r2, r3
   28e4c:	mov	r0, r5
   28e50:	mov	r1, r6
   28e54:	mov	r3, r7
   28e58:	bl	28ed4 <flatcc_json_parser_table_as_root@@Base+0xb4>
   28e5c:	mov	r0, #2
   28e60:	and	r3, r0, r8, lsr #1
   28e64:	ldr	r1, [fp, #12]
   28e68:	mov	r0, r6
   28e6c:	mov	r2, #0
   28e70:	bl	22450 <flatcc_builder_start_buffer@@Base>
   28e74:	mov	r1, r0
   28e78:	mvn	r0, #0
   28e7c:	cmp	r1, #0
   28e80:	bne	28ea8 <flatcc_json_parser_table_as_root@@Base+0x88>
   28e84:	ldr	ip, [fp, #16]
   28e88:	add	r3, sp, #8
   28e8c:	mov	r0, r5
   28e90:	mov	r1, r4
   28e94:	mov	r2, r7
   28e98:	blx	ip
   28e9c:	ldr	r0, [r5, #24]
   28ea0:	cmp	r0, #0
   28ea4:	beq	28eb0 <flatcc_json_parser_table_as_root@@Base+0x90>
   28ea8:	sub	sp, fp, #24
   28eac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28eb0:	ldr	r1, [sp, #8]
   28eb4:	mov	r0, r6
   28eb8:	bl	22604 <flatcc_builder_end_buffer@@Base>
   28ebc:	cmp	r0, #0
   28ec0:	mvn	r0, #0
   28ec4:	strne	r4, [r5, #40]	; 0x28
   28ec8:	movne	r0, #0
   28ecc:	sub	sp, fp, #24
   28ed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28ed4:	vmov.i32	q8, #0	; 0x00000000
   28ed8:	add	ip, r0, #12
   28edc:	vst1.32	{d16-d17}, [ip]
   28ee0:	add	ip, r0, #28
   28ee4:	vst1.32	{d16-d17}, [ip]
   28ee8:	stm	r0, {r1, r2}
   28eec:	mov	r1, #1
   28ef0:	str	r1, [r0, #16]
   28ef4:	str	r2, [r0, #28]
   28ef8:	str	r3, [r0, #32]
   28efc:	str	r2, [r0, #36]	; 0x24
   28f00:	ldr	r1, [sp]
   28f04:	str	r1, [r0, #8]
   28f08:	bx	lr

00028f0c <flatcc_json_parser_struct_as_root@@Base>:
   28f0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28f10:	add	fp, sp, #24
   28f14:	sub	sp, sp, #56	; 0x38
   28f18:	mov	r4, r2
   28f1c:	mov	r6, r0
   28f20:	ldr	r8, [fp, #8]
   28f24:	str	r8, [sp]
   28f28:	add	r5, sp, #12
   28f2c:	cmp	r1, #0
   28f30:	movne	r5, r1
   28f34:	add	r7, r2, r3
   28f38:	mov	r0, r5
   28f3c:	mov	r1, r6
   28f40:	mov	r3, r7
   28f44:	bl	28ed4 <flatcc_json_parser_table_as_root@@Base+0xb4>
   28f48:	mov	r0, #2
   28f4c:	and	r3, r0, r8, lsr #1
   28f50:	ldr	r1, [fp, #12]
   28f54:	mov	r0, r6
   28f58:	mov	r2, #0
   28f5c:	bl	22450 <flatcc_builder_start_buffer@@Base>
   28f60:	mov	r1, r0
   28f64:	mvn	r0, #0
   28f68:	cmp	r1, #0
   28f6c:	bne	28f94 <flatcc_json_parser_struct_as_root@@Base+0x88>
   28f70:	ldr	ip, [fp, #16]
   28f74:	add	r3, sp, #8
   28f78:	mov	r0, r5
   28f7c:	mov	r1, r4
   28f80:	mov	r2, r7
   28f84:	blx	ip
   28f88:	ldr	r0, [r5, #24]
   28f8c:	cmp	r0, #0
   28f90:	beq	28f9c <flatcc_json_parser_struct_as_root@@Base+0x90>
   28f94:	sub	sp, fp, #24
   28f98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28f9c:	ldr	r1, [sp, #8]
   28fa0:	mov	r0, r6
   28fa4:	bl	22604 <flatcc_builder_end_buffer@@Base>
   28fa8:	cmp	r0, #0
   28fac:	mvn	r0, #0
   28fb0:	strne	r4, [r5, #40]	; 0x28
   28fb4:	movne	r0, #0
   28fb8:	sub	sp, fp, #24
   28fbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28fc0:	vmov	d0, r0, r1
   28fc4:	bx	lr
   28fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28fcc:	add	fp, sp, #28
   28fd0:	sub	sp, sp, #44	; 0x2c
   28fd4:	mov	sl, r2
   28fd8:	mov	r8, r0
   28fdc:	mov	r2, #0
   28fe0:	str	r2, [sl]
   28fe4:	str	r2, [sl, #4]
   28fe8:	cmp	r1, #1000	; 0x3e8
   28fec:	movge	r1, #1000	; 0x3e8
   28ff0:	add	ip, r0, r1
   28ff4:	add	r4, ip, #1
   28ff8:	cmp	r4, r0
   28ffc:	beq	2906c <flatcc_json_parser_struct_as_root@@Base+0x160>
   29000:	ldrb	r7, [r8]
   29004:	cmp	r7, #45	; 0x2d
   29008:	mov	r3, r8
   2900c:	bne	29024 <flatcc_json_parser_struct_as_root@@Base+0x118>
   29010:	cmp	r1, #0
   29014:	beq	29400 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   29018:	add	r3, r8, #1
   2901c:	ldrb	r7, [r3]
   29020:	mov	r2, #1
   29024:	cmp	r7, #48	; 0x30
   29028:	bne	29054 <flatcc_json_parser_struct_as_root@@Base+0x148>
   2902c:	add	r0, r3, #1
   29030:	cmp	r3, ip
   29034:	beq	29078 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   29038:	ldrb	r7, [r0]
   2903c:	orr	r7, r7, #32
   29040:	cmp	r7, #120	; 0x78
   29044:	bne	29078 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   29048:	mov	r1, sl
   2904c:	bl	294c4 <flatcc_json_parser_struct_as_root@@Base+0x5b8>
   29050:	b	2906c <flatcc_json_parser_struct_as_root@@Base+0x160>
   29054:	sub	r0, r7, #49	; 0x31
   29058:	uxtb	r0, r0
   2905c:	cmp	r0, #9
   29060:	bcc	290a8 <flatcc_json_parser_struct_as_root@@Base+0x19c>
   29064:	cmp	r2, #0
   29068:	movne	r8, #0
   2906c:	mov	r0, r8
   29070:	sub	sp, fp, #28
   29074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29078:	cmp	r3, ip
   2907c:	beq	2909c <flatcc_json_parser_struct_as_root@@Base+0x190>
   29080:	ldrb	r0, [r3, #1]
   29084:	cmp	r0, #48	; 0x30
   29088:	bne	29098 <flatcc_json_parser_struct_as_root@@Base+0x18c>
   2908c:	add	r3, r3, #1
   29090:	cmp	ip, r3
   29094:	bne	29080 <flatcc_json_parser_struct_as_root@@Base+0x174>
   29098:	add	r0, r3, #1
   2909c:	mov	r7, #0
   290a0:	mov	r3, #0
   290a4:	b	290b4 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   290a8:	add	r0, r3, #1
   290ac:	sub	r7, r7, #48	; 0x30
   290b0:	asr	r3, r7, #31
   290b4:	mov	r5, #0
   290b8:	cmp	r0, r4
   290bc:	str	r2, [sp, #36]	; 0x24
   290c0:	beq	29138 <flatcc_json_parser_struct_as_root@@Base+0x22c>
   290c4:	str	ip, [sp, #28]
   290c8:	str	sl, [sp, #32]
   290cc:	str	r8, [fp, #-32]	; 0xffffffe0
   290d0:	movw	lr, #39321	; 0x9999
   290d4:	movt	lr, #6553	; 0x1999
   290d8:	movw	ip, #39320	; 0x9998
   290dc:	movt	ip, #39321	; 0x9999
   290e0:	mov	r9, #10
   290e4:	mov	r6, r0
   290e8:	ldrb	r8, [r6]
   290ec:	sub	sl, r8, #48	; 0x30
   290f0:	uxtb	r2, sl
   290f4:	cmp	r2, #9
   290f8:	bhi	29128 <flatcc_json_parser_struct_as_root@@Base+0x21c>
   290fc:	subs	r2, ip, r7
   29100:	sbcs	r2, lr, r3
   29104:	bcc	29158 <flatcc_json_parser_struct_as_root@@Base+0x24c>
   29108:	add	r2, r3, r3, lsl #2
   2910c:	lsl	r2, r2, #1
   29110:	umlal	r8, r2, r7, r9
   29114:	subs	r7, r8, #48	; 0x30
   29118:	sbc	r3, r2, #0
   2911c:	add	r6, r6, #1
   29120:	cmp	r4, r6
   29124:	bne	290e8 <flatcc_json_parser_struct_as_root@@Base+0x1dc>
   29128:	mov	lr, r7
   2912c:	mov	r9, r3
   29130:	mov	r3, #0
   29134:	b	29170 <flatcc_json_parser_struct_as_root@@Base+0x264>
   29138:	mov	r6, r0
   2913c:	mov	lr, r7
   29140:	mov	r9, r3
   29144:	mov	r3, #0
   29148:	cmp	r6, r4
   2914c:	bne	29184 <flatcc_json_parser_struct_as_root@@Base+0x278>
   29150:	mov	r1, r6
   29154:	b	29220 <flatcc_json_parser_struct_as_root@@Base+0x314>
   29158:	adds	lr, r7, #1
   2915c:	adc	r9, r3, #0
   29160:	cmp	r8, #52	; 0x34
   29164:	movls	lr, r7
   29168:	movls	r9, r3
   2916c:	mov	r3, #1
   29170:	ldr	r8, [fp, #-32]	; 0xffffffe0
   29174:	ldr	sl, [sp, #32]
   29178:	ldr	ip, [sp, #28]
   2917c:	cmp	r6, r4
   29180:	beq	29150 <flatcc_json_parser_struct_as_root@@Base+0x244>
   29184:	mov	r7, r3
   29188:	str	r4, [fp, #-32]	; 0xffffffe0
   2918c:	sub	r1, r1, r6
   29190:	add	r3, r8, r1
   29194:	mov	r5, #0
   29198:	mov	r1, r6
   2919c:	ldrb	r4, [r1]
   291a0:	cmp	r4, #48	; 0x30
   291a4:	bne	291c8 <flatcc_json_parser_struct_as_root@@Base+0x2bc>
   291a8:	sub	r3, r3, #1
   291ac:	add	r4, r1, #1
   291b0:	add	r5, r5, #1
   291b4:	cmp	r1, ip
   291b8:	mov	r1, r4
   291bc:	bne	2919c <flatcc_json_parser_struct_as_root@@Base+0x290>
   291c0:	mov	r1, r4
   291c4:	b	29218 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   291c8:	sub	r2, r4, #49	; 0x31
   291cc:	uxtb	r2, r2
   291d0:	cmp	r2, #8
   291d4:	bhi	29218 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   291d8:	mvn	r7, #0
   291dc:	mov	r4, r7
   291e0:	cmp	r3, #0
   291e4:	beq	29204 <flatcc_json_parser_struct_as_root@@Base+0x2f8>
   291e8:	ldrb	r2, [r1, -r4]
   291ec:	sub	r2, r2, #48	; 0x30
   291f0:	uxtb	r2, r2
   291f4:	sub	r7, r4, #1
   291f8:	sub	r3, r3, #1
   291fc:	cmp	r2, #10
   29200:	bcc	291dc <flatcc_json_parser_struct_as_root@@Base+0x2d0>
   29204:	sub	r5, r5, r4
   29208:	sub	r1, r1, r4
   2920c:	mov	r3, #1
   29210:	ldr	r4, [fp, #-32]	; 0xffffffe0
   29214:	b	29220 <flatcc_json_parser_struct_as_root@@Base+0x314>
   29218:	ldr	r4, [fp, #-32]	; 0xffffffe0
   2921c:	mov	r3, r7
   29220:	sub	r2, r6, r0
   29224:	cmp	r1, r4
   29228:	beq	292dc <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   2922c:	ldrb	r0, [r1]
   29230:	cmp	r0, #46	; 0x2e
   29234:	bne	292dc <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   29238:	mov	r6, r1
   2923c:	ldrb	r0, [r6, #1]!
   29240:	sub	r0, r0, #48	; 0x30
   29244:	str	r2, [sp, #28]
   29248:	uxtb	r2, r0
   2924c:	mov	r0, #0
   29250:	cmp	r2, #9
   29254:	ldr	r2, [sp, #28]
   29258:	bhi	29404 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   2925c:	cmp	r1, ip
   29260:	beq	2938c <flatcc_json_parser_struct_as_root@@Base+0x480>
   29264:	str	r3, [sp, #24]
   29268:	str	r4, [fp, #-32]	; 0xffffffe0
   2926c:	movw	r0, #39321	; 0x9999
   29270:	movt	r0, #6553	; 0x1999
   29274:	movw	r7, #39320	; 0x9998
   29278:	movt	r7, #39321	; 0x9999
   2927c:	mov	r3, #10
   29280:	ldrb	r4, [r1, #1]
   29284:	sub	r2, r4, #48	; 0x30
   29288:	uxtb	r2, r2
   2928c:	cmp	r2, #9
   29290:	bhi	292c4 <flatcc_json_parser_struct_as_root@@Base+0x3b8>
   29294:	subs	r2, r7, lr
   29298:	sbcs	r2, r0, r9
   2929c:	bcc	2940c <flatcc_json_parser_struct_as_root@@Base+0x500>
   292a0:	add	r2, r9, r9, lsl #2
   292a4:	lsl	r2, r2, #1
   292a8:	umlal	r4, r2, lr, r3
   292ac:	subs	lr, r4, #48	; 0x30
   292b0:	sbc	r9, r2, #0
   292b4:	add	r1, r1, #1
   292b8:	sub	r5, r5, #1
   292bc:	cmp	ip, r1
   292c0:	bne	29280 <flatcc_json_parser_struct_as_root@@Base+0x374>
   292c4:	add	r1, r1, #1
   292c8:	str	lr, [sp, #32]
   292cc:	ldr	r4, [fp, #-32]	; 0xffffffe0
   292d0:	ldr	r3, [sp, #24]
   292d4:	ldr	r2, [sp, #28]
   292d8:	b	2944c <flatcc_json_parser_struct_as_root@@Base+0x540>
   292dc:	str	lr, [sp, #32]
   292e0:	mov	lr, #0
   292e4:	cmp	r1, r4
   292e8:	beq	29348 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   292ec:	ldrb	r0, [r1]
   292f0:	orr	r0, r0, #32
   292f4:	cmp	r0, #101	; 0x65
   292f8:	bne	29348 <flatcc_json_parser_struct_as_root@@Base+0x43c>
   292fc:	mov	r7, r2
   29300:	sub	r2, r4, r1
   29304:	mov	r0, #0
   29308:	cmp	r2, #2
   2930c:	blt	29404 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   29310:	mov	r2, r7
   29314:	mov	r6, r1
   29318:	ldrb	r0, [r6, #1]!
   2931c:	cmp	r0, #45	; 0x2d
   29320:	beq	29398 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   29324:	mov	lr, #0
   29328:	cmp	r0, #43	; 0x2b
   2932c:	bne	293a8 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   29330:	add	r6, r1, #2
   29334:	mov	r0, #0
   29338:	cmp	r6, r4
   2933c:	beq	29404 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   29340:	mov	lr, #0
   29344:	b	293a8 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   29348:	mov	r7, #0
   2934c:	cmp	r1, r4
   29350:	mov	r0, #0
   29354:	beq	29404 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   29358:	add	r0, r2, r5
   2935c:	cmp	lr, #0
   29360:	rsbne	r7, r7, #0
   29364:	add	r0, r0, r7
   29368:	ldr	r7, [sp, #32]
   2936c:	stm	sp, {r7, r9}
   29370:	add	ip, sp, #8
   29374:	stm	ip, {r0, r2, r3, sl}
   29378:	mov	r0, r8
   2937c:	ldr	r2, [sp, #36]	; 0x24
   29380:	bl	294d8 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   29384:	sub	sp, fp, #28
   29388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2938c:	mov	r1, r6
   29390:	str	lr, [sp, #32]
   29394:	b	2944c <flatcc_json_parser_struct_as_root@@Base+0x540>
   29398:	add	r6, r1, #2
   2939c:	mov	lr, #1
   293a0:	cmp	r6, r4
   293a4:	beq	29400 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   293a8:	ldrb	r0, [r6]
   293ac:	sub	r7, r0, #48	; 0x30
   293b0:	uxtb	r1, r7
   293b4:	mov	r0, #0
   293b8:	cmp	r1, #9
   293bc:	bhi	29404 <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   293c0:	cmp	r6, ip
   293c4:	beq	293f8 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   293c8:	ldrb	r0, [r6, #1]
   293cc:	sub	r1, r0, #48	; 0x30
   293d0:	uxtb	r1, r1
   293d4:	cmp	r1, #9
   293d8:	bhi	293f8 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   293dc:	cmp	r7, #32768	; 0x8000
   293e0:	addlt	r1, r7, r7, lsl #2
   293e4:	addlt	r0, r0, r1, lsl #1
   293e8:	sublt	r7, r0, #48	; 0x30
   293ec:	add	r6, r6, #1
   293f0:	cmp	ip, r6
   293f4:	bne	293c8 <flatcc_json_parser_struct_as_root@@Base+0x4bc>
   293f8:	add	r1, r6, #1
   293fc:	b	2934c <flatcc_json_parser_struct_as_root@@Base+0x440>
   29400:	mov	r0, #0
   29404:	sub	sp, fp, #28
   29408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2940c:	add	r1, r1, #1
   29410:	ldr	r3, [sp, #24]
   29414:	cmp	r3, #0
   29418:	ldr	r2, [sp, #28]
   2941c:	beq	29428 <flatcc_json_parser_struct_as_root@@Base+0x51c>
   29420:	str	lr, [sp, #32]
   29424:	b	29448 <flatcc_json_parser_struct_as_root@@Base+0x53c>
   29428:	adds	r0, lr, #1
   2942c:	adc	r3, r9, #0
   29430:	cmp	r4, #52	; 0x34
   29434:	movls	r0, lr
   29438:	str	r0, [sp, #32]
   2943c:	movls	r3, r9
   29440:	mov	r9, r3
   29444:	mov	r3, #1
   29448:	ldr	r4, [fp, #-32]	; 0xffffffe0
   2944c:	sub	r0, r1, r6
   29450:	add	r2, r0, r2
   29454:	cmp	r1, r4
   29458:	beq	292e0 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   2945c:	ldrb	r0, [r1]
   29460:	cmp	r0, #48	; 0x30
   29464:	bne	2947c <flatcc_json_parser_struct_as_root@@Base+0x570>
   29468:	add	r1, r1, #1
   2946c:	add	r5, r5, #1
   29470:	cmp	r4, r1
   29474:	bne	2945c <flatcc_json_parser_struct_as_root@@Base+0x550>
   29478:	b	292e0 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   2947c:	sub	r0, r0, #49	; 0x31
   29480:	uxtb	r0, r0
   29484:	cmp	r0, #8
   29488:	bhi	292e0 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   2948c:	mov	r7, r2
   29490:	mov	r0, r1
   29494:	cmp	ip, r1
   29498:	beq	294b4 <flatcc_json_parser_struct_as_root@@Base+0x5a8>
   2949c:	add	r1, r0, #1
   294a0:	ldrb	r2, [r0, #1]
   294a4:	sub	r2, r2, #48	; 0x30
   294a8:	uxtb	r2, r2
   294ac:	cmp	r2, #10
   294b0:	bcc	29490 <flatcc_json_parser_struct_as_root@@Base+0x584>
   294b4:	add	r1, r0, #1
   294b8:	mov	r3, #1
   294bc:	mov	r2, r7
   294c0:	b	292e0 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   294c4:	mov	r2, #0
   294c8:	str	r2, [r1]
   294cc:	str	r2, [r1, #4]
   294d0:	bx	lr
   294d4:	nop	{0}
   294d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   294dc:	add	fp, sp, #24
   294e0:	sub	sp, sp, #16
   294e4:	mov	r5, r2
   294e8:	mov	r4, r1
   294ec:	mov	r6, r0
   294f0:	ldr	r1, [fp, #12]
   294f4:	ldr	r0, [fp, #8]
   294f8:	vmov.i32	d0, #0	; 0x00000000
   294fc:	orrs	r2, r0, r1
   29500:	ldr	r9, [fp, #28]
   29504:	beq	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29508:	ldr	r7, [fp, #16]
   2950c:	cmn	r7, #324	; 0x144
   29510:	blt	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29514:	movw	r2, #311	; 0x137
   29518:	cmp	r7, r2
   2951c:	blt	29554 <flatcc_json_parser_struct_as_root@@Base+0x648>
   29520:	movw	r1, #0
   29524:	movt	r1, #32752	; 0x7ff0
   29528:	mov	r0, #0
   2952c:	bl	28fc0 <flatcc_json_parser_struct_as_root@@Base+0xb4>
   29530:	vstr	d0, [r9]
   29534:	cmp	r5, #0
   29538:	beq	29548 <flatcc_json_parser_struct_as_root@@Base+0x63c>
   2953c:	vldr	d16, [r9]
   29540:	vneg.f64	d16, d16
   29544:	vstr	d16, [r9]
   29548:	mov	r0, r4
   2954c:	sub	sp, fp, #24
   29550:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29554:	ldr	r8, [fp, #20]
   29558:	mov	r2, #0
   2955c:	cmp	r2, r1, lsr #21
   29560:	bne	29648 <flatcc_json_parser_struct_as_root@@Base+0x73c>
   29564:	cmp	r7, #22
   29568:	bhi	29648 <flatcc_json_parser_struct_as_root@@Base+0x73c>
   2956c:	bl	31a6c <flatcc_json_printer_clear@@Base+0x11e0>
   29570:	sub	r2, r7, r8
   29574:	vmov	d0, r0, r1
   29578:	add	r0, r2, #22
   2957c:	cmp	r0, #44	; 0x2c
   29580:	bhi	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29584:	add	r1, pc, #0
   29588:	ldr	pc, [r1, r0, lsl #2]
   2958c:	andeq	r9, r2, r0, asr #12
   29590:	andeq	r9, r2, r4, lsl #13
   29594:	andeq	r9, r2, ip, lsl #13
   29598:	muleq	r2, r4, r6
   2959c:	muleq	r2, ip, r6
   295a0:	andeq	r9, r2, r4, lsr #13
   295a4:	andeq	r9, r2, ip, lsr #13
   295a8:			; <UNDEFINED> instruction: 0x000296b4
   295ac:			; <UNDEFINED> instruction: 0x000296bc
   295b0:	andeq	r9, r2, r4, asr #13
   295b4:	andeq	r9, r2, ip, asr #13
   295b8:	ldrdeq	r9, [r2], -r4
   295bc:	ldrdeq	r9, [r2], -ip
   295c0:	andeq	r9, r2, r4, ror #13
   295c4:	andeq	r9, r2, ip, ror #13
   295c8:	strdeq	r9, [r2], -r4
   295cc:	strdeq	r9, [r2], -ip
   295d0:	andeq	r9, r2, r4, lsl #14
   295d4:	andeq	r9, r2, ip, lsl #14
   295d8:	andeq	r9, r2, r4, lsl r7
   295dc:	andeq	r9, r2, ip, lsl r7
   295e0:	andeq	r9, r2, r4, lsr #14
   295e4:	andeq	r9, r2, r0, lsr r5
   295e8:	andeq	r9, r2, r0, lsr r7
   295ec:	andeq	r9, r2, ip, lsr r7
   295f0:	andeq	r9, r2, r8, asr #14
   295f4:	andeq	r9, r2, r4, asr r7
   295f8:	andeq	r9, r2, r0, ror #14
   295fc:	andeq	r9, r2, ip, ror #14
   29600:	andeq	r9, r2, r8, ror r7
   29604:	andeq	r9, r2, r4, lsl #15
   29608:	muleq	r2, r0, r7
   2960c:	muleq	r2, ip, r7
   29610:	andeq	r9, r2, r8, lsr #15
   29614:			; <UNDEFINED> instruction: 0x000297b4
   29618:	andeq	r9, r2, r0, asr #15
   2961c:	andeq	r9, r2, ip, asr #15
   29620:	ldrdeq	r9, [r2], -r8
   29624:	andeq	r9, r2, r4, ror #15
   29628:	strdeq	r9, [r2], -r0
   2962c:	strdeq	r9, [r2], -ip
   29630:	andeq	r9, r2, r8, lsl #16
   29634:	andeq	r9, r2, r4, lsl r8
   29638:	andeq	r9, r2, r0, lsr #16
   2963c:	andeq	r9, r2, ip, lsr #16
   29640:	vldr	d16, [pc, #656]	; 298d8 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   29644:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   29648:	ldr	r2, [fp, #24]
   2964c:	stm	sp, {r2, r9}
   29650:	mov	r2, r7
   29654:	mov	r3, r8
   29658:	bl	26430 <grisu3_diy_fp_encode_double@@Base>
   2965c:	cmp	r0, #0
   29660:	bne	29534 <flatcc_json_parser_struct_as_root@@Base+0x628>
   29664:	add	r1, sp, #12
   29668:	mov	r0, r6
   2966c:	bl	14f04 <strtod@plt>
   29670:	vstr	d0, [r9]
   29674:	ldr	r0, [sp, #12]
   29678:	cmp	r0, r4
   2967c:	movcc	r4, r0
   29680:	b	29548 <flatcc_json_parser_struct_as_root@@Base+0x63c>
   29684:	vldr	d16, [pc, #428]	; 29838 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   29688:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   2968c:	vldr	d16, [pc, #428]	; 29840 <flatcc_json_parser_struct_as_root@@Base+0x934>
   29690:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   29694:	vldr	d16, [pc, #428]	; 29848 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   29698:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   2969c:	vldr	d16, [pc, #428]	; 29850 <flatcc_json_parser_struct_as_root@@Base+0x944>
   296a0:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296a4:	vldr	d16, [pc, #428]	; 29858 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   296a8:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296ac:	vldr	d16, [pc, #428]	; 29860 <flatcc_json_parser_struct_as_root@@Base+0x954>
   296b0:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296b4:	vldr	d16, [pc, #428]	; 29868 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   296b8:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296bc:	vldr	d16, [pc, #428]	; 29870 <flatcc_json_parser_struct_as_root@@Base+0x964>
   296c0:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296c4:	vldr	d16, [pc, #428]	; 29878 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   296c8:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296cc:	vldr	d16, [pc, #428]	; 29880 <flatcc_json_parser_struct_as_root@@Base+0x974>
   296d0:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296d4:	vldr	d16, [pc, #428]	; 29888 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   296d8:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296dc:	vldr	d16, [pc, #428]	; 29890 <flatcc_json_parser_struct_as_root@@Base+0x984>
   296e0:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296e4:	vldr	d16, [pc, #428]	; 29898 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   296e8:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296ec:	vldr	d16, [pc, #428]	; 298a0 <flatcc_json_parser_struct_as_root@@Base+0x994>
   296f0:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296f4:	vldr	d16, [pc, #428]	; 298a8 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   296f8:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   296fc:	vldr	d16, [pc, #428]	; 298b0 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   29700:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   29704:	vldr	d16, [pc, #428]	; 298b8 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   29708:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   2970c:	vldr	d16, [pc, #428]	; 298c0 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   29710:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   29714:	vldr	d16, [pc, #428]	; 298c8 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   29718:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   2971c:	vldr	d16, [pc, #428]	; 298d0 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   29720:	b	29728 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   29724:	vmov.f64	d16, #36	; 0x41200000  10.0
   29728:	vdiv.f64	d0, d0, d16
   2972c:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29730:	vmov.f64	d16, #36	; 0x41200000  10.0
   29734:	vmul.f64	d0, d0, d16
   29738:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2973c:	vldr	d16, [pc, #396]	; 298d0 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   29740:	vmul.f64	d0, d0, d16
   29744:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29748:	vldr	d16, [pc, #376]	; 298c8 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   2974c:	vmul.f64	d0, d0, d16
   29750:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29754:	vldr	d16, [pc, #356]	; 298c0 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   29758:	vmul.f64	d0, d0, d16
   2975c:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29760:	vldr	d16, [pc, #336]	; 298b8 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   29764:	vmul.f64	d0, d0, d16
   29768:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2976c:	vldr	d16, [pc, #316]	; 298b0 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   29770:	vmul.f64	d0, d0, d16
   29774:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29778:	vldr	d16, [pc, #296]	; 298a8 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   2977c:	vmul.f64	d0, d0, d16
   29780:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29784:	vldr	d16, [pc, #276]	; 298a0 <flatcc_json_parser_struct_as_root@@Base+0x994>
   29788:	vmul.f64	d0, d0, d16
   2978c:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29790:	vldr	d16, [pc, #256]	; 29898 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   29794:	vmul.f64	d0, d0, d16
   29798:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2979c:	vldr	d16, [pc, #236]	; 29890 <flatcc_json_parser_struct_as_root@@Base+0x984>
   297a0:	vmul.f64	d0, d0, d16
   297a4:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297a8:	vldr	d16, [pc, #216]	; 29888 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   297ac:	vmul.f64	d0, d0, d16
   297b0:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297b4:	vldr	d16, [pc, #196]	; 29880 <flatcc_json_parser_struct_as_root@@Base+0x974>
   297b8:	vmul.f64	d0, d0, d16
   297bc:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297c0:	vldr	d16, [pc, #176]	; 29878 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   297c4:	vmul.f64	d0, d0, d16
   297c8:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297cc:	vldr	d16, [pc, #156]	; 29870 <flatcc_json_parser_struct_as_root@@Base+0x964>
   297d0:	vmul.f64	d0, d0, d16
   297d4:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297d8:	vldr	d16, [pc, #136]	; 29868 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   297dc:	vmul.f64	d0, d0, d16
   297e0:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297e4:	vldr	d16, [pc, #116]	; 29860 <flatcc_json_parser_struct_as_root@@Base+0x954>
   297e8:	vmul.f64	d0, d0, d16
   297ec:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297f0:	vldr	d16, [pc, #96]	; 29858 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   297f4:	vmul.f64	d0, d0, d16
   297f8:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   297fc:	vldr	d16, [pc, #76]	; 29850 <flatcc_json_parser_struct_as_root@@Base+0x944>
   29800:	vmul.f64	d0, d0, d16
   29804:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29808:	vldr	d16, [pc, #56]	; 29848 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   2980c:	vmul.f64	d0, d0, d16
   29810:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29814:	vldr	d16, [pc, #36]	; 29840 <flatcc_json_parser_struct_as_root@@Base+0x934>
   29818:	vmul.f64	d0, d0, d16
   2981c:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29820:	vldr	d16, [pc, #16]	; 29838 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   29824:	vmul.f64	d0, d0, d16
   29828:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   2982c:	vldr	d16, [pc, #164]	; 298d8 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   29830:	vmul.f64	d0, d0, d16
   29834:	b	29530 <flatcc_json_parser_struct_as_root@@Base+0x624>
   29838:	usatle	lr, #2, r0, asr #30
   2983c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   29840:	ldmvc	r5!, {r6, sl, fp, pc}
   29844:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   29848:	addsvs	r3, r1, r0, lsl #26
   2984c:	mvnmi	r5, #228, 16	; 0xe40000
   29850:	strbvs	ip, [lr, -r0, lsl #16]
   29854:			; <UNDEFINED> instruction: 0x43abc16d
   29858:	ldrbhi	sl, [r8]
   2985c:	cmnmi	r6, #1459617792	; 0x57000000
   29860:	strbcc	r8, [r0, r0]!
   29864:	movtmi	ip, #4985	; 0x1379
   29868:	ldrtcs	r0, [r4], -r0
   2986c:	movwmi	r6, #52213	; 0xcbf5
   29870:	cdpne	0, 9, cr0, cr0, cr0, {0}
   29874:	sbcsmi	fp, r6, #196, 24	; 0xc400
   29878:	strb	r0, [r0, #-0]
   2987c:	adcmi	r3, r2, #156	; 0x9c
   29880:	andge	r0, r0, #0
   29884:	rsbmi	r1, sp, #148, 20	; 0x94000
   29888:	stmda	r0, {}	; <UNPREDICTABLE>
   2988c:	eorsmi	r4, r7, #7733248	; 0x760000
   29890:	andcs	r0, r0, r0
   29894:	andmi	sl, r2, #95	; 0x5f
   29898:	andeq	r0, r0, r0
   2989c:	bicmi	ip, sp, r5, ror #26
   298a0:	andeq	r0, r0, r0
   298a4:	orrsmi	sp, r7, r4, lsl #15
   298a8:	andeq	r0, r0, r0
   298ac:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   298b0:	andeq	r0, r0, r0
   298b4:	smlawbmi	lr, r0, r4, r8
   298b8:	andeq	r0, r0, r0
   298bc:	rscsmi	r6, r8, r0, lsl #20
   298c0:	andeq	r0, r0, r0
   298c4:	sbcmi	r8, r3, r0, lsl #16
   298c8:	andeq	r0, r0, r0
   298cc:	addmi	r4, pc, r0
   298d0:	andeq	r0, r0, r0
   298d4:	subsmi	r0, r9, r0
   298d8:			; <UNDEFINED> instruction: 0x064dd592
   298dc:	strmi	pc, [r0], #207	; 0xcf
   298e0:	push	{fp, lr}
   298e4:	mov	fp, sp
   298e8:	cmp	r3, #0
   298ec:	beq	298fc <flatcc_json_parser_struct_as_root@@Base+0x9f0>
   298f0:	mov	r3, #8
   298f4:	bl	26998 <flatcc_json_parser_set_error@@Base>
   298f8:	pop	{fp, pc}
   298fc:	ldr	ip, [fp, #12]
   29900:	ldr	lr, [fp, #8]
   29904:	subs	r3, lr, #256	; 0x100
   29908:	sbcs	r3, ip, #0
   2990c:	bcc	2991c <flatcc_json_parser_struct_as_root@@Base+0xa10>
   29910:	mov	r3, #7
   29914:	bl	26998 <flatcc_json_parser_set_error@@Base>
   29918:	pop	{fp, pc}
   2991c:	ldr	r0, [fp, #16]
   29920:	strb	lr, [r0]
   29924:	mov	r0, r1
   29928:	pop	{fp, pc}
   2992c:	push	{r4, r5, fp, lr}
   29930:	add	fp, sp, #8
   29934:	mov	r4, r2
   29938:	mov	r5, r0
   2993c:	bl	2781c <flatcc_json_parser_float@@Base+0x140>
   29940:	mov	r1, r0
   29944:	ldr	r0, [r5, #12]
   29948:	cmp	r0, #0
   2994c:	movne	r0, r1
   29950:	popne	{r4, r5, fp, pc}
   29954:	mov	r0, r5
   29958:	mov	r2, r4
   2995c:	pop	{r4, r5, fp, lr}
   29960:	b	26fac <flatcc_json_parser_skip_constant@@Base+0x8c>
   29964:	bx	lr

00029968 <flatcc_json_printer_error_string@@Base>:
   29968:	cmp	r0, #3
   2996c:	movwhi	r0, #29606	; 0x73a6
   29970:	movthi	r0, #3
   29974:	bxhi	lr
   29978:	movw	r1, #36868	; 0x9004
   2997c:	movt	r1, #3
   29980:	ldr	r0, [r1, r0, lsl #2]
   29984:	bx	lr

00029988 <flatcc_json_printer_fmt_float@@Base>:
   29988:	vcvt.f64.f32	d0, s0
   2998c:	b	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   29990:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29994:	add	fp, sp, #24
   29998:	vpush	{d8}
   2999c:	sub	sp, sp, #8
   299a0:	mov	r4, r0
   299a4:	vmov.f64	d8, d0
   299a8:	bl	308d0 <flatcc_json_printer_clear@@Base+0x44>
   299ac:	cmp	r4, #0
   299b0:	beq	29c34 <flatcc_json_printer_fmt_float@@Base+0x2ac>
   299b4:	mov	r3, r0
   299b8:	mov	r2, r1
   299bc:	mov	r0, #-2147483648	; 0x80000000
   299c0:	orr	r1, r0, #266338304	; 0xfe00000
   299c4:	orr	r1, r1, #1879048192	; 0x70000000
   299c8:	lsl	r7, r2, #1
   299cc:	orr	r7, r7, r3, lsr #31
   299d0:	mov	r6, #0
   299d4:	subs	r6, r6, r3, lsl #1
   299d8:	sbcs	r1, r1, r7
   299dc:	bcs	299f4 <flatcc_json_printer_fmt_float@@Base+0x6c>
   299e0:	movw	r1, #34663	; 0x8767
   299e4:	movt	r1, #3
   299e8:	mov	r0, r4
   299ec:	bl	14f28 <sprintf@plt>
   299f0:	b	29c28 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   299f4:	cmn	r2, #1
   299f8:	ble	29a04 <flatcc_json_printer_fmt_float@@Base+0x7c>
   299fc:	mov	r5, r4
   29a00:	b	29a18 <flatcc_json_printer_fmt_float@@Base+0x90>
   29a04:	mov	r1, #45	; 0x2d
   29a08:	vneg.f64	d8, d8
   29a0c:	mov	r5, r4
   29a10:	strb	r1, [r5], #1
   29a14:	eor	r2, r2, r0
   29a18:	eor	r0, r2, #267386880	; 0xff00000
   29a1c:	eor	r0, r0, #1879048192	; 0x70000000
   29a20:	orrs	r0, r3, r0
   29a24:	beq	29a40 <flatcc_json_printer_fmt_float@@Base+0xb8>
   29a28:	orrs	r0, r3, r2
   29a2c:	bne	29a54 <flatcc_json_printer_fmt_float@@Base+0xcc>
   29a30:	mov	r0, #48	; 0x30
   29a34:	strh	r0, [r5], -r4
   29a38:	add	r0, r5, #1
   29a3c:	b	29c28 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   29a40:	movw	r0, #28265	; 0x6e69
   29a44:	movt	r0, #102	; 0x66
   29a48:	str	r0, [r5], -r4
   29a4c:	add	r0, r5, #3
   29a50:	b	29c28 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   29a54:	mov	r1, sp
   29a58:	add	r2, sp, #4
   29a5c:	vmov.f64	d0, d8
   29a60:	mov	r0, r5
   29a64:	bl	308d8 <flatcc_json_printer_clear@@Base+0x4c>
   29a68:	cmp	r0, #0
   29a6c:	beq	29ac0 <flatcc_json_printer_fmt_float@@Base+0x138>
   29a70:	ldr	r9, [sp]
   29a74:	sub	r1, r9, #1
   29a78:	cmp	r9, #3
   29a7c:	movwlt	r1, #1
   29a80:	ldr	r0, [sp, #4]
   29a84:	rsb	r7, r0, #0
   29a88:	cmp	r1, r7
   29a8c:	movge	r1, r7
   29a90:	cmn	r0, #1
   29a94:	ble	29ae0 <flatcc_json_printer_fmt_float@@Base+0x158>
   29a98:	cmp	r0, #3
   29a9c:	bcc	29b5c <flatcc_json_printer_fmt_float@@Base+0x1d4>
   29aa0:	mov	r1, #101	; 0x65
   29aa4:	strb	r1, [r5, r9]
   29aa8:	add	r6, r9, #1
   29aac:	add	r1, r5, r6
   29ab0:	bl	30b40 <flatcc_json_printer_clear@@Base+0x2b4>
   29ab4:	add	r0, r0, r6
   29ab8:	str	r0, [sp]
   29abc:	b	29c18 <flatcc_json_printer_fmt_float@@Base+0x290>
   29ac0:	vmov	r2, r3, d8
   29ac4:	movw	r1, #34677	; 0x8775
   29ac8:	movt	r1, #3
   29acc:	mov	r0, r5
   29ad0:	bl	14f28 <sprintf@plt>
   29ad4:	sub	r1, r5, r4
   29ad8:	add	r0, r1, r0
   29adc:	b	29c28 <flatcc_json_printer_fmt_float@@Base+0x2a0>
   29ae0:	cmp	r9, r7
   29ae4:	bgt	29bb0 <flatcc_json_printer_fmt_float@@Base+0x228>
   29ae8:	add	r8, r9, r0
   29aec:	cmn	r8, #2
   29af0:	blt	29bb0 <flatcc_json_printer_fmt_float@@Base+0x228>
   29af4:	rsb	r0, r9, #0
   29af8:	add	r1, r5, r7
   29afc:	add	r0, r1, r0
   29b00:	add	r0, r0, #2
   29b04:	mov	r1, r5
   29b08:	mov	r2, r9
   29b0c:	bl	14e44 <memmove@plt>
   29b10:	movw	r0, #11824	; 0x2e30
   29b14:	strh	r0, [r5]
   29b18:	rsb	r1, r8, #2
   29b1c:	mov	r0, #2
   29b20:	cmp	r1, #3
   29b24:	blt	29b50 <flatcc_json_printer_fmt_float@@Base+0x1c8>
   29b28:	sub	r7, r7, r9
   29b2c:	add	r0, r5, #2
   29b30:	mov	r1, #48	; 0x30
   29b34:	mov	r2, r7
   29b38:	bl	14eec <memset@plt>
   29b3c:	mov	r0, #0
   29b40:	add	r0, r0, #1
   29b44:	cmp	r7, r0
   29b48:	bne	29b40 <flatcc_json_printer_fmt_float@@Base+0x1b8>
   29b4c:	add	r0, r0, #2
   29b50:	add	r0, r0, r9
   29b54:	str	r0, [sp]
   29b58:	b	29c18 <flatcc_json_printer_fmt_float@@Base+0x290>
   29b5c:	cmp	r0, #0
   29b60:	beq	29c18 <flatcc_json_printer_fmt_float@@Base+0x290>
   29b64:	ldr	r0, [sp, #4]
   29b68:	subs	r0, r0, #1
   29b6c:	str	r0, [sp, #4]
   29b70:	blt	29c18 <flatcc_json_printer_fmt_float@@Base+0x290>
   29b74:	ldr	r6, [sp]
   29b78:	add	r0, r5, r6
   29b7c:	ldr	r7, [sp, #4]
   29b80:	bic	r1, r7, r7, asr #31
   29b84:	add	r2, r1, #1
   29b88:	mov	r1, #48	; 0x30
   29b8c:	bl	14eec <memset@plt>
   29b90:	sub	r0, r7, #1
   29b94:	add	r6, r6, #1
   29b98:	cmp	r7, #0
   29b9c:	mov	r7, r0
   29ba0:	bgt	29b90 <flatcc_json_printer_fmt_float@@Base+0x208>
   29ba4:	str	r0, [sp, #4]
   29ba8:	str	r6, [sp]
   29bac:	b	29c18 <flatcc_json_printer_fmt_float@@Base+0x290>
   29bb0:	cmn	r0, #1
   29bb4:	bgt	29aa0 <flatcc_json_printer_fmt_float@@Base+0x118>
   29bb8:	cmp	r9, #2
   29bbc:	blt	29aa0 <flatcc_json_printer_fmt_float@@Base+0x118>
   29bc0:	cmp	r1, #1
   29bc4:	blt	29be8 <flatcc_json_printer_fmt_float@@Base+0x260>
   29bc8:	add	r2, r5, r9
   29bcc:	sub	r3, r2, #1
   29bd0:	mov	r7, #0
   29bd4:	ldrb	r6, [r3, -r7]
   29bd8:	strb	r6, [r2, -r7]
   29bdc:	add	r7, r7, #1
   29be0:	cmp	r7, r1
   29be4:	blt	29bd4 <flatcc_json_printer_fmt_float@@Base+0x24c>
   29be8:	add	r2, r9, #1
   29bec:	str	r2, [sp]
   29bf0:	sub	r3, r9, r1
   29bf4:	mov	r7, #46	; 0x2e
   29bf8:	strb	r7, [r5, r3]
   29bfc:	adds	r0, r1, r0
   29c00:	str	r0, [sp, #4]
   29c04:	beq	29c18 <flatcc_json_printer_fmt_float@@Base+0x290>
   29c08:	mov	r1, #101	; 0x65
   29c0c:	strb	r1, [r5, r2]
   29c10:	add	r6, r9, #2
   29c14:	b	29aac <flatcc_json_printer_fmt_float@@Base+0x124>
   29c18:	ldr	r0, [sp]
   29c1c:	mov	r1, #0
   29c20:	strb	r1, [r5, r0]!
   29c24:	sub	r0, r5, r4
   29c28:	sub	sp, fp, #32
   29c2c:	vpop	{d8}
   29c30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29c34:	movw	r0, #34532	; 0x86e4
   29c38:	movt	r0, #3
   29c3c:	movw	r1, #34536	; 0x86e8
   29c40:	movt	r1, #3
   29c44:	movw	r3, #34623	; 0x873f
   29c48:	movt	r3, #3
   29c4c:	mov	r2, #189	; 0xbd
   29c50:	bl	14f40 <__assert_fail@plt>

00029c54 <flatcc_json_printer_fmt_double@@Base>:
   29c54:	b	29990 <flatcc_json_printer_fmt_float@@Base+0x8>

00029c58 <flatcc_json_printer_fmt_bool@@Base>:
   29c58:	cmp	r1, #0
   29c5c:	movwne	r1, #29300	; 0x7274
   29c60:	movtne	r1, #25973	; 0x6575
   29c64:	strne	r1, [r0]
   29c68:	movne	r0, #4
   29c6c:	bxne	lr
   29c70:	mov	r1, #101	; 0x65
   29c74:	strb	r1, [r0, #4]
   29c78:	movw	r1, #24934	; 0x6166
   29c7c:	movt	r1, #29548	; 0x736c
   29c80:	str	r1, [r0]
   29c84:	mov	r0, #5
   29c88:	bx	lr

00029c8c <flatcc_json_printer_string@@Base>:
   29c8c:	b	29c90 <flatcc_json_printer_string@@Base+0x4>
   29c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29c94:	add	fp, sp, #28
   29c98:	sub	sp, sp, #4
   29c9c:	mov	r5, r2
   29ca0:	mov	r4, r0
   29ca4:	mov	r7, r0
   29ca8:	ldr	r0, [r7, #20]!
   29cac:	add	r2, r0, #1
   29cb0:	str	r2, [r7]
   29cb4:	mov	r2, #34	; 0x22
   29cb8:	strb	r2, [r0]
   29cbc:	mov	r9, #92	; 0x5c
   29cc0:	b	29d3c <flatcc_json_printer_string@@Base+0xb0>
   29cc4:	ldr	r2, [r7]
   29cc8:	add	r3, r2, #1
   29ccc:	str	r3, [r7]
   29cd0:	mov	r3, #117	; 0x75
   29cd4:	strb	r3, [r2]
   29cd8:	ldr	r2, [r7]
   29cdc:	add	r3, r2, #1
   29ce0:	str	r3, [r7]
   29ce4:	mov	r6, #48	; 0x30
   29ce8:	strb	r6, [r2]
   29cec:	ldr	r2, [r7]
   29cf0:	add	r3, r2, #1
   29cf4:	str	r3, [r7]
   29cf8:	strb	r6, [r2]
   29cfc:	ldr	r2, [r7]
   29d00:	add	r3, r2, #1
   29d04:	str	r3, [r7]
   29d08:	orr	r1, r6, r1, lsr #4
   29d0c:	strb	r1, [r2]
   29d10:	ldr	r1, [r7]
   29d14:	add	r2, r1, #1
   29d18:	str	r2, [r7]
   29d1c:	and	r2, sl, #15
   29d20:	cmp	r2, #10
   29d24:	mov	r3, #87	; 0x57
   29d28:	movwcc	r3, #48	; 0x30
   29d2c:	add	r2, r3, r2
   29d30:	strb	r2, [r1]
   29d34:	sub	r5, r0, #1
   29d38:	add	r1, r8, #1
   29d3c:	ldrb	sl, [r1]
   29d40:	mov	r8, r1
   29d44:	cmp	sl, #32
   29d48:	bcc	29d68 <flatcc_json_printer_string@@Base+0xdc>
   29d4c:	uxtb	r0, sl
   29d50:	cmp	r0, #34	; 0x22
   29d54:	cmpne	r0, #92	; 0x5c
   29d58:	beq	29d68 <flatcc_json_printer_string@@Base+0xdc>
   29d5c:	ldrb	sl, [r8, #1]!
   29d60:	cmp	sl, #31
   29d64:	bhi	29d4c <flatcc_json_printer_string@@Base+0xc0>
   29d68:	sub	r6, r8, r1
   29d6c:	mov	r0, r4
   29d70:	mov	r2, r6
   29d74:	bl	29ec0 <flatcc_json_printer_write@@Base+0x4>
   29d78:	ldr	r1, [r4, #20]
   29d7c:	add	r0, r1, #1
   29d80:	str	r0, [r4, #20]
   29d84:	subs	r0, r5, r6
   29d88:	beq	29eac <flatcc_json_printer_string@@Base+0x220>
   29d8c:	strb	r9, [r1]
   29d90:	mvn	r1, #7
   29d94:	uxtab	r2, r1, sl
   29d98:	uxtb	r1, sl
   29d9c:	cmp	r2, #26
   29da0:	bhi	29e2c <flatcc_json_printer_string@@Base+0x1a0>
   29da4:	add	r3, pc, #0
   29da8:	ldr	pc, [r3, r2, lsl #2]
   29dac:	andeq	r9, r2, r8, lsl lr
   29db0:	andeq	r9, r2, r8, asr #28
   29db4:	andeq	r9, r2, ip, asr lr
   29db8:	andeq	r9, r2, r4, asr #25
   29dbc:	andeq	r9, r2, r0, ror lr
   29dc0:	andeq	r9, r2, r4, lsl #29
   29dc4:	andeq	r9, r2, r4, asr #25
   29dc8:	andeq	r9, r2, r4, asr #25
   29dcc:	andeq	r9, r2, r4, asr #25
   29dd0:	andeq	r9, r2, r4, asr #25
   29dd4:	andeq	r9, r2, r4, asr #25
   29dd8:	andeq	r9, r2, r4, asr #25
   29ddc:	andeq	r9, r2, r4, asr #25
   29de0:	andeq	r9, r2, r4, asr #25
   29de4:	andeq	r9, r2, r4, asr #25
   29de8:	andeq	r9, r2, r4, asr #25
   29dec:	andeq	r9, r2, r4, asr #25
   29df0:	andeq	r9, r2, r4, asr #25
   29df4:	andeq	r9, r2, r4, asr #25
   29df8:	andeq	r9, r2, r4, asr #25
   29dfc:	andeq	r9, r2, r4, asr #25
   29e00:	andeq	r9, r2, r4, asr #25
   29e04:	andeq	r9, r2, r4, asr #25
   29e08:	andeq	r9, r2, r4, asr #25
   29e0c:	andeq	r9, r2, r4, asr #25
   29e10:	andeq	r9, r2, r4, asr #25
   29e14:	muleq	r2, r8, lr
   29e18:	ldr	r1, [r7]
   29e1c:	add	r2, r1, #1
   29e20:	str	r2, [r7]
   29e24:	mov	r2, #98	; 0x62
   29e28:	b	29d30 <flatcc_json_printer_string@@Base+0xa4>
   29e2c:	cmp	r1, #92	; 0x5c
   29e30:	bne	29cc4 <flatcc_json_printer_string@@Base+0x38>
   29e34:	ldr	r1, [r7]
   29e38:	add	r2, r1, #1
   29e3c:	str	r2, [r7]
   29e40:	strb	r9, [r1]
   29e44:	b	29d34 <flatcc_json_printer_string@@Base+0xa8>
   29e48:	ldr	r1, [r7]
   29e4c:	add	r2, r1, #1
   29e50:	str	r2, [r7]
   29e54:	mov	r2, #116	; 0x74
   29e58:	b	29d30 <flatcc_json_printer_string@@Base+0xa4>
   29e5c:	ldr	r1, [r7]
   29e60:	add	r2, r1, #1
   29e64:	str	r2, [r7]
   29e68:	mov	r2, #110	; 0x6e
   29e6c:	b	29d30 <flatcc_json_printer_string@@Base+0xa4>
   29e70:	ldr	r1, [r7]
   29e74:	add	r2, r1, #1
   29e78:	str	r2, [r7]
   29e7c:	mov	r2, #102	; 0x66
   29e80:	b	29d30 <flatcc_json_printer_string@@Base+0xa4>
   29e84:	ldr	r1, [r7]
   29e88:	add	r2, r1, #1
   29e8c:	str	r2, [r7]
   29e90:	mov	r2, #114	; 0x72
   29e94:	b	29d30 <flatcc_json_printer_string@@Base+0xa4>
   29e98:	ldr	r1, [r7]
   29e9c:	add	r2, r1, #1
   29ea0:	str	r2, [r7]
   29ea4:	mov	r2, #34	; 0x22
   29ea8:	b	29d30 <flatcc_json_printer_string@@Base+0xa4>
   29eac:	mov	r0, #34	; 0x22
   29eb0:	strb	r0, [r1]
   29eb4:	sub	sp, fp, #28
   29eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029ebc <flatcc_json_printer_write@@Base>:
   29ebc:	b	29ec0 <flatcc_json_printer_write@@Base+0x4>
   29ec0:	push	{r4, r5, fp, lr}
   29ec4:	add	fp, sp, #8
   29ec8:	mov	r4, r2
   29ecc:	mov	r5, r0
   29ed0:	ldr	r2, [r0, #16]
   29ed4:	ldr	r0, [r0, #20]
   29ed8:	add	r3, r0, r4
   29edc:	cmp	r3, r2
   29ee0:	bcs	29efc <flatcc_json_printer_write@@Base+0x40>
   29ee4:	mov	r2, r4
   29ee8:	bl	14e5c <memcpy@plt>
   29eec:	ldr	r0, [r5, #20]
   29ef0:	add	r0, r0, r4
   29ef4:	str	r0, [r5, #20]
   29ef8:	pop	{r4, r5, fp, pc}
   29efc:	mov	r0, r5
   29f00:	mov	r2, r4
   29f04:	pop	{r4, r5, fp, lr}
   29f08:	b	313d4 <flatcc_json_printer_clear@@Base+0xb48>

00029f0c <flatcc_json_printer_nl@@Base>:
   29f0c:	ldr	r1, [r0, #20]
   29f10:	add	r2, r1, #1
   29f14:	str	r2, [r0, #20]
   29f18:	mov	r2, #10
   29f1c:	strb	r2, [r1]
   29f20:	b	29f24 <flatcc_json_printer_nl@@Base+0x18>
   29f24:	ldr	r1, [r0, #16]
   29f28:	ldr	r2, [r0, #20]
   29f2c:	cmp	r2, r1
   29f30:	bxcc	lr
   29f34:	ldr	r2, [r0, #44]	; 0x2c
   29f38:	mov	r1, #0
   29f3c:	bx	r2

00029f40 <flatcc_json_printer_char@@Base>:
   29f40:	ldr	r2, [r0, #20]
   29f44:	add	r3, r2, #1
   29f48:	str	r3, [r0, #20]
   29f4c:	strb	r1, [r2]
   29f50:	bx	lr

00029f54 <flatcc_json_printer_indent@@Base>:
   29f54:	b	29f58 <flatcc_json_printer_indent@@Base+0x4>
   29f58:	push	{r4, r5, r6, sl, fp, lr}
   29f5c:	add	fp, sp, #16
   29f60:	mov	r4, r0
   29f64:	ldr	r1, [r0, #16]
   29f68:	ldr	r0, [r0, #20]
   29f6c:	ldrb	r2, [r4, #25]
   29f70:	ldr	r3, [r4, #32]
   29f74:	mla	r5, r3, r2, r0
   29f78:	mul	r6, r3, r2
   29f7c:	cmp	r5, r1
   29f80:	bls	29f94 <flatcc_json_printer_indent@@Base+0x40>
   29f84:	mov	r0, r4
   29f88:	mov	r1, r6
   29f8c:	pop	{r4, r5, r6, sl, fp, lr}
   29f90:	b	3147c <flatcc_json_printer_clear@@Base+0xbf0>
   29f94:	mov	r1, #32
   29f98:	mov	r2, r6
   29f9c:	bl	14eec <memset@plt>
   29fa0:	ldr	r0, [r4, #20]
   29fa4:	add	r0, r0, r6
   29fa8:	str	r0, [r4, #20]
   29fac:	pop	{r4, r5, r6, sl, fp, pc}

00029fb0 <flatcc_json_printer_add_level@@Base>:
   29fb0:	ldr	r2, [r0, #32]
   29fb4:	add	r1, r2, r1
   29fb8:	str	r1, [r0, #32]
   29fbc:	bx	lr

00029fc0 <flatcc_json_printer_get_level@@Base>:
   29fc0:	ldr	r0, [r0, #32]
   29fc4:	bx	lr

00029fc8 <flatcc_json_printer_uint8@@Base>:
   29fc8:	push	{r4, sl, fp, lr}
   29fcc:	add	fp, sp, #8
   29fd0:	mov	r2, r1
   29fd4:	mov	r4, r0
   29fd8:	ldr	r1, [r0, #20]
   29fdc:	mov	r0, r2
   29fe0:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   29fe4:	ldr	r1, [r4, #20]
   29fe8:	add	r0, r1, r0
   29fec:	str	r0, [r4, #20]
   29ff0:	pop	{r4, sl, fp, pc}
   29ff4:	mov	r2, #0
   29ff8:	cmp	r0, #100	; 0x64
   29ffc:	bcc	2a048 <flatcc_json_printer_uint8@@Base+0x80>
   2a000:	strb	r2, [r1, #3]
   2a004:	movw	r2, #34079	; 0x851f
   2a008:	movt	r2, #20971	; 0x51eb
   2a00c:	umull	r2, r3, r0, r2
   2a010:	mov	r2, #48	; 0x30
   2a014:	orr	r2, r2, r3, lsr #5
   2a018:	strb	r2, [r1]
   2a01c:	lsr	r2, r3, #5
   2a020:	mov	r3, #100	; 0x64
   2a024:	mls	r0, r2, r3, r0
   2a028:	uxtb	r0, r0
   2a02c:	movw	r2, #34856	; 0x8828
   2a030:	movt	r2, #3
   2a034:	add	r0, r2, r0, lsl #1
   2a038:	ldrh	r0, [r0]
   2a03c:	strh	r0, [r1, #1]
   2a040:	mov	r0, #3
   2a044:	bx	lr
   2a048:	cmp	r0, #10
   2a04c:	strbcc	r2, [r1, #1]
   2a050:	addcc	r0, r0, #48	; 0x30
   2a054:	strbcc	r0, [r1]
   2a058:	movcc	r0, #1
   2a05c:	bxcc	lr
   2a060:	strb	r2, [r1, #2]
   2a064:	movw	r2, #34079	; 0x851f
   2a068:	movt	r2, #20971	; 0x51eb
   2a06c:	umull	r2, r3, r0, r2
   2a070:	lsr	r2, r3, #5
   2a074:	mov	r3, #100	; 0x64
   2a078:	mls	r0, r2, r3, r0
   2a07c:	movw	r2, #34856	; 0x8828
   2a080:	movt	r2, #3
   2a084:	add	r0, r2, r0, lsl #1
   2a088:	ldrh	r0, [r0]
   2a08c:	strh	r0, [r1]
   2a090:	mov	r0, #2
   2a094:	bx	lr

0002a098 <flatcc_json_printer_uint16@@Base>:
   2a098:	push	{r4, sl, fp, lr}
   2a09c:	add	fp, sp, #8
   2a0a0:	mov	r2, r1
   2a0a4:	mov	r4, r0
   2a0a8:	ldr	r1, [r0, #20]
   2a0ac:	mov	r0, r2
   2a0b0:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2a0b4:	ldr	r1, [r4, #20]
   2a0b8:	add	r0, r1, r0
   2a0bc:	str	r0, [r4, #20]
   2a0c0:	pop	{r4, sl, fp, pc}
   2a0c4:	push	{fp, lr}
   2a0c8:	mov	fp, sp
   2a0cc:	mov	lr, r0
   2a0d0:	cmp	r0, #1000	; 0x3e8
   2a0d4:	bcc	2a0ec <flatcc_json_printer_uint16@@Base+0x54>
   2a0d8:	movw	r3, #9999	; 0x270f
   2a0dc:	mov	r0, #4
   2a0e0:	cmp	lr, r3
   2a0e4:	movwhi	r0, #5
   2a0e8:	b	2a110 <flatcc_json_printer_uint16@@Base+0x78>
   2a0ec:	cmp	lr, #100	; 0x64
   2a0f0:	bcc	2a104 <flatcc_json_printer_uint16@@Base+0x6c>
   2a0f4:	mov	r0, #0
   2a0f8:	strb	r0, [r1, #3]!
   2a0fc:	mov	r0, #3
   2a100:	b	2a1b4 <flatcc_json_printer_uint16@@Base+0x11c>
   2a104:	mov	r0, #1
   2a108:	cmp	lr, #9
   2a10c:	movwhi	r0, #2
   2a110:	mov	r3, #0
   2a114:	strb	r3, [r1, r0]!
   2a118:	tst	r0, #1
   2a11c:	bne	2a164 <flatcc_json_printer_uint16@@Base+0xcc>
   2a120:	cmp	r0, #2
   2a124:	beq	2a1f4 <flatcc_json_printer_uint16@@Base+0x15c>
   2a128:	cmp	r0, #4
   2a12c:	popne	{fp, pc}
   2a130:	movw	r2, #34079	; 0x851f
   2a134:	movt	r2, #20971	; 0x51eb
   2a138:	umull	r2, r3, lr, r2
   2a13c:	lsr	r3, r3, #5
   2a140:	mov	r2, #100	; 0x64
   2a144:	mls	r2, r3, r2, lr
   2a148:	uxth	ip, r2
   2a14c:	movw	r2, #34856	; 0x8828
   2a150:	movt	r2, #3
   2a154:	add	r2, r2, ip, lsl #1
   2a158:	ldrh	r2, [r2]
   2a15c:	strh	r2, [r1, #-2]!
   2a160:	b	2a1f8 <flatcc_json_printer_uint16@@Base+0x160>
   2a164:	cmp	r0, #1
   2a168:	beq	2a22c <flatcc_json_printer_uint16@@Base+0x194>
   2a16c:	cmp	r0, #3
   2a170:	beq	2a1b4 <flatcc_json_printer_uint16@@Base+0x11c>
   2a174:	cmp	r0, #5
   2a178:	bne	2a228 <flatcc_json_printer_uint16@@Base+0x190>
   2a17c:	movw	r0, #34079	; 0x851f
   2a180:	movt	r0, #20971	; 0x51eb
   2a184:	umull	r0, r3, lr, r0
   2a188:	lsr	r3, r3, #5
   2a18c:	mov	r0, #100	; 0x64
   2a190:	mls	r0, r3, r0, lr
   2a194:	uxth	r0, r0
   2a198:	movw	r2, #34856	; 0x8828
   2a19c:	movt	r2, #3
   2a1a0:	add	r0, r2, r0, lsl #1
   2a1a4:	ldrh	r0, [r0]
   2a1a8:	strh	r0, [r1, #-2]!
   2a1ac:	mov	r0, #5
   2a1b0:	mov	lr, r3
   2a1b4:	uxth	ip, lr
   2a1b8:	movw	r3, #34079	; 0x851f
   2a1bc:	movt	r3, #20971	; 0x51eb
   2a1c0:	umull	r3, r2, ip, r3
   2a1c4:	lsr	r3, r2, #5
   2a1c8:	mov	r2, #100	; 0x64
   2a1cc:	mls	r2, r3, r2, lr
   2a1d0:	uxth	ip, r2
   2a1d4:	movw	r2, #34856	; 0x8828
   2a1d8:	movt	r2, #3
   2a1dc:	add	r2, r2, ip, lsl #1
   2a1e0:	ldrh	r2, [r2]
   2a1e4:	strh	r2, [r1, #-2]!
   2a1e8:	add	r2, r3, #48	; 0x30
   2a1ec:	strb	r2, [r1, #-1]
   2a1f0:	pop	{fp, pc}
   2a1f4:	mov	r3, lr
   2a1f8:	uxth	ip, r3
   2a1fc:	movw	r3, #34079	; 0x851f
   2a200:	movt	r3, #20971	; 0x51eb
   2a204:	umull	r3, r2, ip, r3
   2a208:	lsr	r2, r2, #5
   2a20c:	mov	r3, #100	; 0x64
   2a210:	mls	r2, r2, r3, ip
   2a214:	movw	r3, #34856	; 0x8828
   2a218:	movt	r3, #3
   2a21c:	add	r2, r3, r2, lsl #1
   2a220:	ldrh	r2, [r2]
   2a224:	strh	r2, [r1, #-2]
   2a228:	pop	{fp, pc}
   2a22c:	mov	r3, lr
   2a230:	b	2a1e8 <flatcc_json_printer_uint16@@Base+0x150>

0002a234 <flatcc_json_printer_uint32@@Base>:
   2a234:	push	{r4, sl, fp, lr}
   2a238:	add	fp, sp, #8
   2a23c:	mov	r2, r1
   2a240:	mov	r4, r0
   2a244:	ldr	r1, [r0, #20]
   2a248:	mov	r0, r2
   2a24c:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2a250:	ldr	r1, [r4, #20]
   2a254:	add	r0, r1, r0
   2a258:	str	r0, [r4, #20]
   2a25c:	pop	{r4, sl, fp, pc}
   2a260:	push	{fp, lr}
   2a264:	mov	fp, sp
   2a268:	mov	lr, r0
   2a26c:	movw	r0, #10000	; 0x2710
   2a270:	cmp	lr, r0
   2a274:	bcc	2a2d8 <flatcc_json_printer_uint32@@Base+0xa4>
   2a278:	movw	r0, #38528	; 0x9680
   2a27c:	movt	r0, #152	; 0x98
   2a280:	cmp	lr, r0
   2a284:	bcc	2a2f4 <flatcc_json_printer_uint32@@Base+0xc0>
   2a288:	movw	r0, #51712	; 0xca00
   2a28c:	movt	r0, #15258	; 0x3b9a
   2a290:	cmp	lr, r0
   2a294:	bcc	2a324 <flatcc_json_printer_uint32@@Base+0xf0>
   2a298:	movw	r0, #34079	; 0x851f
   2a29c:	movt	r0, #20971	; 0x51eb
   2a2a0:	umull	r0, r3, lr, r0
   2a2a4:	lsr	r3, r3, #5
   2a2a8:	mov	r0, #100	; 0x64
   2a2ac:	mls	r0, r3, r0, lr
   2a2b0:	movw	r2, #34856	; 0x8828
   2a2b4:	movt	r2, #3
   2a2b8:	add	r0, r2, r0, lsl #1
   2a2bc:	ldrh	r0, [r0]
   2a2c0:	strh	r0, [r1, #8]!
   2a2c4:	mov	r0, #0
   2a2c8:	strb	r0, [r1, #2]
   2a2cc:	mov	r0, #10
   2a2d0:	mov	lr, r3
   2a2d4:	b	2a390 <flatcc_json_printer_uint32@@Base+0x15c>
   2a2d8:	cmp	lr, #100	; 0x64
   2a2dc:	bcc	2a314 <flatcc_json_printer_uint32@@Base+0xe0>
   2a2e0:	lsr	r3, lr, #3
   2a2e4:	mov	r0, #3
   2a2e8:	cmp	r3, #124	; 0x7c
   2a2ec:	movwhi	r0, #4
   2a2f0:	b	2a350 <flatcc_json_printer_uint32@@Base+0x11c>
   2a2f4:	movw	r0, #16960	; 0x4240
   2a2f8:	movt	r0, #15
   2a2fc:	cmp	lr, r0
   2a300:	bcc	2a33c <flatcc_json_printer_uint32@@Base+0x108>
   2a304:	mov	r0, #0
   2a308:	strb	r0, [r1, #7]!
   2a30c:	mov	r0, #7
   2a310:	b	2a4bc <flatcc_json_printer_uint32@@Base+0x288>
   2a314:	mov	r0, #1
   2a318:	cmp	lr, #9
   2a31c:	movwhi	r0, #2
   2a320:	b	2a350 <flatcc_json_printer_uint32@@Base+0x11c>
   2a324:	movw	r3, #57599	; 0xe0ff
   2a328:	movt	r3, #1525	; 0x5f5
   2a32c:	mov	r0, #8
   2a330:	cmp	lr, r3
   2a334:	movwhi	r0, #9
   2a338:	b	2a350 <flatcc_json_printer_uint32@@Base+0x11c>
   2a33c:	movw	r3, #34463	; 0x869f
   2a340:	movt	r3, #1
   2a344:	mov	r0, #5
   2a348:	cmp	lr, r3
   2a34c:	movwhi	r0, #6
   2a350:	mov	r3, #0
   2a354:	strb	r3, [r1, r0]!
   2a358:	tst	r0, #1
   2a35c:	bne	2a450 <flatcc_json_printer_uint32@@Base+0x21c>
   2a360:	sub	r3, r0, #2
   2a364:	cmp	r3, #6
   2a368:	bhi	2a554 <flatcc_json_printer_uint32@@Base+0x320>
   2a36c:	add	r2, pc, #0
   2a370:	ldr	pc, [r2, r3, lsl #2]
   2a374:	andeq	sl, r2, r0, lsr #8
   2a378:	andeq	sl, r2, r4, asr r5
   2a37c:	strdeq	sl, [r2], -r0
   2a380:	andeq	sl, r2, r4, asr r5
   2a384:	andeq	sl, r2, r0, asr #7
   2a388:	andeq	sl, r2, r4, asr r5
   2a38c:	muleq	r2, r0, r3
   2a390:	movw	r2, #34079	; 0x851f
   2a394:	movt	r2, #20971	; 0x51eb
   2a398:	umull	r2, r3, lr, r2
   2a39c:	lsr	r2, r3, #5
   2a3a0:	mov	r3, #100	; 0x64
   2a3a4:	mls	ip, r2, r3, lr
   2a3a8:	movw	r3, #34856	; 0x8828
   2a3ac:	movt	r3, #3
   2a3b0:	add	r3, r3, ip, lsl #1
   2a3b4:	ldrh	r3, [r3]
   2a3b8:	strh	r3, [r1, #-2]!
   2a3bc:	mov	lr, r2
   2a3c0:	movw	r2, #34079	; 0x851f
   2a3c4:	movt	r2, #20971	; 0x51eb
   2a3c8:	umull	r2, r3, lr, r2
   2a3cc:	lsr	r2, r3, #5
   2a3d0:	mov	r3, #100	; 0x64
   2a3d4:	mls	ip, r2, r3, lr
   2a3d8:	movw	r3, #34856	; 0x8828
   2a3dc:	movt	r3, #3
   2a3e0:	add	r3, r3, ip, lsl #1
   2a3e4:	ldrh	r3, [r3]
   2a3e8:	strh	r3, [r1, #-2]!
   2a3ec:	mov	lr, r2
   2a3f0:	movw	r2, #34079	; 0x851f
   2a3f4:	movt	r2, #20971	; 0x51eb
   2a3f8:	umull	r2, r3, lr, r2
   2a3fc:	lsr	r2, r3, #5
   2a400:	mov	r3, #100	; 0x64
   2a404:	mls	ip, r2, r3, lr
   2a408:	movw	r3, #34856	; 0x8828
   2a40c:	movt	r3, #3
   2a410:	add	r3, r3, ip, lsl #1
   2a414:	ldrh	r3, [r3]
   2a418:	strh	r3, [r1, #-2]!
   2a41c:	mov	lr, r2
   2a420:	movw	r2, #34079	; 0x851f
   2a424:	movt	r2, #20971	; 0x51eb
   2a428:	umull	r2, r3, lr, r2
   2a42c:	lsr	r2, r3, #5
   2a430:	mov	r3, #100	; 0x64
   2a434:	mls	r2, r2, r3, lr
   2a438:	movw	r3, #34856	; 0x8828
   2a43c:	movt	r3, #3
   2a440:	add	r2, r3, r2, lsl #1
   2a444:	ldrh	r2, [r2]
   2a448:	strh	r2, [r1, #-2]
   2a44c:	pop	{fp, pc}
   2a450:	sub	ip, r0, #1
   2a454:	cmp	ip, #8
   2a458:	bhi	2a554 <flatcc_json_printer_uint32@@Base+0x320>
   2a45c:	add	r3, pc, #0
   2a460:	ldr	pc, [r3, ip, lsl #2]
   2a464:	andeq	sl, r2, ip, asr #10
   2a468:	andeq	sl, r2, r4, asr r5
   2a46c:	andeq	sl, r2, ip, lsl r5
   2a470:	andeq	sl, r2, r4, asr r5
   2a474:	andeq	sl, r2, ip, ror #9
   2a478:	andeq	sl, r2, r4, asr r5
   2a47c:			; <UNDEFINED> instruction: 0x0002a4bc
   2a480:	andeq	sl, r2, r4, asr r5
   2a484:	andeq	sl, r2, r8, lsl #9
   2a488:	movw	r0, #34079	; 0x851f
   2a48c:	movt	r0, #20971	; 0x51eb
   2a490:	umull	r0, r3, lr, r0
   2a494:	lsr	r3, r3, #5
   2a498:	mov	r0, #100	; 0x64
   2a49c:	mls	r0, r3, r0, lr
   2a4a0:	movw	r2, #34856	; 0x8828
   2a4a4:	movt	r2, #3
   2a4a8:	add	r0, r2, r0, lsl #1
   2a4ac:	ldrh	r0, [r0]
   2a4b0:	strh	r0, [r1, #-2]!
   2a4b4:	mov	r0, #9
   2a4b8:	mov	lr, r3
   2a4bc:	movw	r3, #34079	; 0x851f
   2a4c0:	movt	r3, #20971	; 0x51eb
   2a4c4:	umull	r3, r2, lr, r3
   2a4c8:	lsr	r2, r2, #5
   2a4cc:	mov	r3, #100	; 0x64
   2a4d0:	mls	ip, r2, r3, lr
   2a4d4:	movw	r3, #34856	; 0x8828
   2a4d8:	movt	r3, #3
   2a4dc:	add	r3, r3, ip, lsl #1
   2a4e0:	ldrh	r3, [r3]
   2a4e4:	strh	r3, [r1, #-2]!
   2a4e8:	mov	lr, r2
   2a4ec:	movw	r2, #34079	; 0x851f
   2a4f0:	movt	r2, #20971	; 0x51eb
   2a4f4:	umull	r2, r3, lr, r2
   2a4f8:	lsr	r2, r3, #5
   2a4fc:	mov	r3, #100	; 0x64
   2a500:	mls	ip, r2, r3, lr
   2a504:	movw	r3, #34856	; 0x8828
   2a508:	movt	r3, #3
   2a50c:	add	r3, r3, ip, lsl #1
   2a510:	ldrh	r3, [r3]
   2a514:	strh	r3, [r1, #-2]!
   2a518:	mov	lr, r2
   2a51c:	movw	r2, #34079	; 0x851f
   2a520:	movt	r2, #20971	; 0x51eb
   2a524:	umull	r2, r3, lr, r2
   2a528:	lsr	r2, r3, #5
   2a52c:	mov	r3, #100	; 0x64
   2a530:	mls	ip, r2, r3, lr
   2a534:	movw	r3, #34856	; 0x8828
   2a538:	movt	r3, #3
   2a53c:	add	r3, r3, ip, lsl #1
   2a540:	ldrh	r3, [r3]
   2a544:	strh	r3, [r1, #-2]!
   2a548:	mov	lr, r2
   2a54c:	add	r2, lr, #48	; 0x30
   2a550:	strb	r2, [r1, #-1]
   2a554:	pop	{fp, pc}

0002a558 <flatcc_json_printer_uint64@@Base>:
   2a558:	push	{r4, sl, fp, lr}
   2a55c:	add	fp, sp, #8
   2a560:	mov	r1, r3
   2a564:	mov	r3, r2
   2a568:	mov	r4, r0
   2a56c:	ldr	r2, [r0, #20]
   2a570:	mov	r0, r3
   2a574:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2a578:	ldr	r1, [r4, #20]
   2a57c:	add	r0, r1, r0
   2a580:	str	r0, [r4, #20]
   2a584:	pop	{r4, sl, fp, pc}
   2a588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a58c:	add	fp, sp, #28
   2a590:	sub	sp, sp, #4
   2a594:	mov	r4, r2
   2a598:	mov	r7, r0
   2a59c:	movw	r0, #51711	; 0xc9ff
   2a5a0:	movt	r0, #15258	; 0x3b9a
   2a5a4:	subs	r0, r0, r7
   2a5a8:	rscs	r0, r1, #0
   2a5ac:	bcc	2a5c4 <flatcc_json_printer_uint64@@Base+0x6c>
   2a5b0:	mov	r0, r7
   2a5b4:	mov	r1, r4
   2a5b8:	sub	sp, fp, #28
   2a5bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5c0:	b	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2a5c4:	mov	r6, r1
   2a5c8:	movw	r0, #2328	; 0x918
   2a5cc:	movw	r1, #40960	; 0xa000
   2a5d0:	movt	r1, #20082	; 0x4e72
   2a5d4:	subs	r1, r7, r1
   2a5d8:	sbcs	r0, r6, r0
   2a5dc:	movw	r9, #34856	; 0x8828
   2a5e0:	movt	r9, #3
   2a5e4:	bcc	2a644 <flatcc_json_printer_uint64@@Base+0xec>
   2a5e8:	movw	r0, #34546	; 0x86f2
   2a5ec:	movt	r0, #35	; 0x23
   2a5f0:	movw	r1, #0
   2a5f4:	movt	r1, #28609	; 0x6fc1
   2a5f8:	subs	r1, r7, r1
   2a5fc:	sbcs	r0, r6, r0
   2a600:	bcc	2a674 <flatcc_json_printer_uint64@@Base+0x11c>
   2a604:	movw	r0, #46771	; 0xb6b3
   2a608:	movt	r0, #3552	; 0xde0
   2a60c:	movw	r1, #0
   2a610:	movt	r1, #42852	; 0xa764
   2a614:	subs	r1, r7, r1
   2a618:	sbcs	r0, r6, r0
   2a61c:	bcc	2a6bc <flatcc_json_printer_uint64@@Base+0x164>
   2a620:	mov	r8, #19
   2a624:	movw	r0, #8964	; 0x2304
   2a628:	movt	r0, #35527	; 0x8ac7
   2a62c:	movw	r1, #65535	; 0xffff
   2a630:	movt	r1, #35303	; 0x89e7
   2a634:	subs	r1, r1, r7
   2a638:	sbcs	r0, r0, r6
   2a63c:	movwcc	r8, #20
   2a640:	b	2a6fc <flatcc_json_printer_uint64@@Base+0x1a4>
   2a644:	movw	r0, #59392	; 0xe800
   2a648:	movt	r0, #18550	; 0x4876
   2a64c:	subs	r0, r7, r0
   2a650:	sbcs	r0, r6, #23
   2a654:	bcc	2a6a0 <flatcc_json_printer_uint64@@Base+0x148>
   2a658:	mov	r8, #12
   2a65c:	movw	r0, #4095	; 0xfff
   2a660:	movt	r0, #54437	; 0xd4a5
   2a664:	subs	r0, r0, r7
   2a668:	rscs	r0, r6, #232	; 0xe8
   2a66c:	movwcc	r8, #13
   2a670:	b	2a6fc <flatcc_json_printer_uint64@@Base+0x1a4>
   2a674:	movw	r0, #36222	; 0x8d7e
   2a678:	movt	r0, #3
   2a67c:	movw	r1, #32768	; 0x8000
   2a680:	movt	r1, #42182	; 0xa4c6
   2a684:	subs	r1, r7, r1
   2a688:	sbcs	r0, r6, r0
   2a68c:	bcc	2a6e0 <flatcc_json_printer_uint64@@Base+0x188>
   2a690:	mov	r0, #0
   2a694:	strb	r0, [r4, #16]!
   2a698:	mov	r8, #16
   2a69c:	b	2a7ac <flatcc_json_printer_uint64@@Base+0x254>
   2a6a0:	mov	r8, #10
   2a6a4:	movw	r0, #58367	; 0xe3ff
   2a6a8:	movt	r0, #21515	; 0x540b
   2a6ac:	subs	r0, r0, r7
   2a6b0:	rscs	r0, r6, #2
   2a6b4:	movwcc	r8, #11
   2a6b8:	b	2a6fc <flatcc_json_printer_uint64@@Base+0x1a4>
   2a6bc:	mov	r8, #17
   2a6c0:	movw	r0, #17784	; 0x4578
   2a6c4:	movt	r0, #355	; 0x163
   2a6c8:	movw	r1, #65535	; 0xffff
   2a6cc:	movt	r1, #23945	; 0x5d89
   2a6d0:	subs	r1, r1, r7
   2a6d4:	sbcs	r0, r0, r6
   2a6d8:	movwcc	r8, #18
   2a6dc:	b	2a6fc <flatcc_json_printer_uint64@@Base+0x1a4>
   2a6e0:	mov	r8, #14
   2a6e4:	movw	r0, #23283	; 0x5af3
   2a6e8:	movw	r1, #16383	; 0x3fff
   2a6ec:	movt	r1, #4218	; 0x107a
   2a6f0:	subs	r1, r1, r7
   2a6f4:	sbcs	r0, r0, r6
   2a6f8:	movwcc	r8, #15
   2a6fc:	mov	r0, #0
   2a700:	strb	r0, [r4, r8]!
   2a704:	tst	r8, #1
   2a708:	bne	2a870 <flatcc_json_printer_uint64@@Base+0x318>
   2a70c:	sub	r0, r8, #10
   2a710:	cmp	r0, #10
   2a714:	bhi	2a9bc <flatcc_json_printer_uint64@@Base+0x464>
   2a718:	add	r1, pc, #0
   2a71c:	ldr	pc, [r1, r0, lsl #2]
   2a720:	andeq	sl, r2, ip, lsr r8
   2a724:			; <UNDEFINED> instruction: 0x0002a9bc
   2a728:	andeq	sl, r2, ip, lsl #16
   2a72c:			; <UNDEFINED> instruction: 0x0002a9bc
   2a730:	ldrdeq	sl, [r2], -ip
   2a734:			; <UNDEFINED> instruction: 0x0002a9bc
   2a738:	andeq	sl, r2, ip, lsr #15
   2a73c:			; <UNDEFINED> instruction: 0x0002a9bc
   2a740:	andeq	sl, r2, ip, ror r7
   2a744:			; <UNDEFINED> instruction: 0x0002a9bc
   2a748:	andeq	sl, r2, ip, asr #14
   2a74c:	mov	r5, #100	; 0x64
   2a750:	mov	r0, r7
   2a754:	mov	r1, r6
   2a758:	mov	r2, #100	; 0x64
   2a75c:	mov	r3, #0
   2a760:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a764:	mov	r6, r1
   2a768:	mls	r1, r0, r5, r7
   2a76c:	add	r1, r9, r1, lsl #1
   2a770:	ldrh	r1, [r1]
   2a774:	strh	r1, [r4, #-2]!
   2a778:	mov	r7, r0
   2a77c:	mov	r5, #100	; 0x64
   2a780:	mov	r0, r7
   2a784:	mov	r1, r6
   2a788:	mov	r2, #100	; 0x64
   2a78c:	mov	r3, #0
   2a790:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a794:	mov	r6, r1
   2a798:	mls	r1, r0, r5, r7
   2a79c:	add	r1, r9, r1, lsl #1
   2a7a0:	ldrh	r1, [r1]
   2a7a4:	strh	r1, [r4, #-2]!
   2a7a8:	mov	r7, r0
   2a7ac:	mov	r5, #100	; 0x64
   2a7b0:	mov	r0, r7
   2a7b4:	mov	r1, r6
   2a7b8:	mov	r2, #100	; 0x64
   2a7bc:	mov	r3, #0
   2a7c0:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a7c4:	mov	r6, r1
   2a7c8:	mls	r1, r0, r5, r7
   2a7cc:	add	r1, r9, r1, lsl #1
   2a7d0:	ldrh	r1, [r1]
   2a7d4:	strh	r1, [r4, #-2]!
   2a7d8:	mov	r7, r0
   2a7dc:	mov	r5, #100	; 0x64
   2a7e0:	mov	r0, r7
   2a7e4:	mov	r1, r6
   2a7e8:	mov	r2, #100	; 0x64
   2a7ec:	mov	r3, #0
   2a7f0:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a7f4:	mov	r6, r1
   2a7f8:	mls	r1, r0, r5, r7
   2a7fc:	add	r1, r9, r1, lsl #1
   2a800:	ldrh	r1, [r1]
   2a804:	strh	r1, [r4, #-2]!
   2a808:	mov	r7, r0
   2a80c:	mov	r5, #100	; 0x64
   2a810:	mov	r0, r7
   2a814:	mov	r1, r6
   2a818:	mov	r2, #100	; 0x64
   2a81c:	mov	r3, #0
   2a820:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a824:	mov	r6, r1
   2a828:	mls	r1, r0, r5, r7
   2a82c:	add	r1, r9, r1, lsl #1
   2a830:	ldrh	r1, [r1]
   2a834:	strh	r1, [r4, #-2]!
   2a838:	mov	r7, r0
   2a83c:	mov	r5, #100	; 0x64
   2a840:	mov	r0, r7
   2a844:	mov	r1, r6
   2a848:	mov	r2, #100	; 0x64
   2a84c:	mov	r3, #0
   2a850:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a854:	mov	r6, r1
   2a858:	mls	r1, r0, r5, r7
   2a85c:	add	r1, r9, r1, lsl #1
   2a860:	ldrh	r1, [r1]
   2a864:	strh	r1, [r4, #-2]!
   2a868:	mov	r7, r0
   2a86c:	b	2a9bc <flatcc_json_printer_uint64@@Base+0x464>
   2a870:	sub	r0, r8, #11
   2a874:	cmp	r0, #8
   2a878:	bhi	2a9bc <flatcc_json_printer_uint64@@Base+0x464>
   2a87c:	add	r1, pc, #0
   2a880:	ldr	pc, [r1, r0, lsl #2]
   2a884:	andeq	sl, r2, r0, ror #18
   2a888:			; <UNDEFINED> instruction: 0x0002a9bc
   2a88c:	andeq	sl, r2, r0, lsr r9
   2a890:			; <UNDEFINED> instruction: 0x0002a9bc
   2a894:	andeq	sl, r2, r0, lsl #18
   2a898:			; <UNDEFINED> instruction: 0x0002a9bc
   2a89c:	ldrdeq	sl, [r2], -r0
   2a8a0:			; <UNDEFINED> instruction: 0x0002a9bc
   2a8a4:	andeq	sl, r2, r8, lsr #17
   2a8a8:	mov	r0, r7
   2a8ac:	mov	r1, r6
   2a8b0:	mov	r2, #100	; 0x64
   2a8b4:	mov	r3, #0
   2a8b8:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a8bc:	mov	r7, r0
   2a8c0:	mov	r6, r1
   2a8c4:	add	r0, r9, r2, lsl #1
   2a8c8:	ldrh	r0, [r0]
   2a8cc:	strh	r0, [r4, #-2]!
   2a8d0:	mov	r5, #100	; 0x64
   2a8d4:	mov	r0, r7
   2a8d8:	mov	r1, r6
   2a8dc:	mov	r2, #100	; 0x64
   2a8e0:	mov	r3, #0
   2a8e4:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a8e8:	mov	r6, r1
   2a8ec:	mls	r1, r0, r5, r7
   2a8f0:	add	r1, r9, r1, lsl #1
   2a8f4:	ldrh	r1, [r1]
   2a8f8:	strh	r1, [r4, #-2]!
   2a8fc:	mov	r7, r0
   2a900:	mov	r5, #100	; 0x64
   2a904:	mov	r0, r7
   2a908:	mov	r1, r6
   2a90c:	mov	r2, #100	; 0x64
   2a910:	mov	r3, #0
   2a914:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a918:	mov	r6, r1
   2a91c:	mls	r1, r0, r5, r7
   2a920:	add	r1, r9, r1, lsl #1
   2a924:	ldrh	r1, [r1]
   2a928:	strh	r1, [r4, #-2]!
   2a92c:	mov	r7, r0
   2a930:	mov	r5, #100	; 0x64
   2a934:	mov	r0, r7
   2a938:	mov	r1, r6
   2a93c:	mov	r2, #100	; 0x64
   2a940:	mov	r3, #0
   2a944:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a948:	mov	r6, r1
   2a94c:	mls	r1, r0, r5, r7
   2a950:	add	r1, r9, r1, lsl #1
   2a954:	ldrh	r1, [r1]
   2a958:	strh	r1, [r4, #-2]!
   2a95c:	mov	r7, r0
   2a960:	mov	sl, #100	; 0x64
   2a964:	mov	r0, r7
   2a968:	mov	r1, r6
   2a96c:	mov	r2, #100	; 0x64
   2a970:	mov	r3, #0
   2a974:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a978:	mov	r5, r0
   2a97c:	mov	r2, #10
   2a980:	mov	r3, #0
   2a984:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a988:	orr	r0, r2, #48	; 0x30
   2a98c:	strb	r0, [r4, #-3]!
   2a990:	mls	r0, r5, sl, r7
   2a994:	add	r0, r9, r0, lsl #1
   2a998:	ldrh	r0, [r0]
   2a99c:	strh	r0, [r4, #1]
   2a9a0:	mov	r0, r7
   2a9a4:	mov	r1, r6
   2a9a8:	mov	r2, #1000	; 0x3e8
   2a9ac:	mov	r3, #0
   2a9b0:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a9b4:	mov	r7, r0
   2a9b8:	mov	r6, r1
   2a9bc:	mov	r5, #100	; 0x64
   2a9c0:	mov	r0, r7
   2a9c4:	mov	r1, r6
   2a9c8:	mov	r2, #100	; 0x64
   2a9cc:	mov	r3, #0
   2a9d0:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a9d4:	mls	r2, r0, r5, r7
   2a9d8:	add	r2, r9, r2, lsl #1
   2a9dc:	ldrh	r2, [r2]
   2a9e0:	strh	r2, [r4, #-2]
   2a9e4:	mov	r2, #100	; 0x64
   2a9e8:	mov	r3, #0
   2a9ec:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2a9f0:	add	r0, r9, r2, lsl #1
   2a9f4:	ldrh	r0, [r0]
   2a9f8:	strh	r0, [r4, #-4]
   2a9fc:	mov	r0, r7
   2aa00:	mov	r1, r6
   2aa04:	movw	r2, #10000	; 0x2710
   2aa08:	mov	r3, #0
   2aa0c:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2aa10:	mov	r2, #100	; 0x64
   2aa14:	mov	r3, #0
   2aa18:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2aa1c:	add	r0, r9, r2, lsl #1
   2aa20:	ldrh	r0, [r0]
   2aa24:	strh	r0, [r4, #-6]
   2aa28:	movw	r2, #16960	; 0x4240
   2aa2c:	movt	r2, #15
   2aa30:	mov	r0, r7
   2aa34:	mov	r1, r6
   2aa38:	mov	r3, #0
   2aa3c:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2aa40:	mov	r2, #100	; 0x64
   2aa44:	mov	r3, #0
   2aa48:	bl	31d30 <flatcc_json_printer_clear@@Base+0x14a4>
   2aa4c:	add	r0, r9, r2, lsl #1
   2aa50:	ldrh	r0, [r0]
   2aa54:	strh	r0, [r4, #-8]
   2aa58:	mov	r0, r8
   2aa5c:	sub	sp, fp, #28
   2aa60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002aa64 <flatcc_json_printer_int8@@Base>:
   2aa64:	push	{r4, sl, fp, lr}
   2aa68:	add	fp, sp, #8
   2aa6c:	mov	r2, r1
   2aa70:	mov	r4, r0
   2aa74:	ldr	r1, [r0, #20]
   2aa78:	mov	r0, r2
   2aa7c:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2aa80:	ldr	r1, [r4, #20]
   2aa84:	add	r0, r1, r0
   2aa88:	str	r0, [r4, #20]
   2aa8c:	pop	{r4, sl, fp, pc}
   2aa90:	push	{r4, sl, fp, lr}
   2aa94:	add	fp, sp, #8
   2aa98:	uxtb	r2, r0
   2aa9c:	lsr	r4, r2, #7
   2aaa0:	cmn	r0, #1
   2aaa4:	movle	r2, #45	; 0x2d
   2aaa8:	strble	r2, [r1], #1
   2aaac:	rsble	r0, r0, #0
   2aab0:	uxtb	r0, r0
   2aab4:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2aab8:	add	r0, r0, r4
   2aabc:	pop	{r4, sl, fp, pc}

0002aac0 <flatcc_json_printer_int16@@Base>:
   2aac0:	push	{r4, sl, fp, lr}
   2aac4:	add	fp, sp, #8
   2aac8:	mov	r2, r1
   2aacc:	mov	r4, r0
   2aad0:	ldr	r1, [r0, #20]
   2aad4:	mov	r0, r2
   2aad8:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2aadc:	ldr	r1, [r4, #20]
   2aae0:	add	r0, r1, r0
   2aae4:	str	r0, [r4, #20]
   2aae8:	pop	{r4, sl, fp, pc}
   2aaec:	push	{r4, sl, fp, lr}
   2aaf0:	add	fp, sp, #8
   2aaf4:	uxth	r2, r0
   2aaf8:	lsr	r4, r2, #15
   2aafc:	cmn	r0, #1
   2ab00:	movle	r2, #45	; 0x2d
   2ab04:	strble	r2, [r1], #1
   2ab08:	rsble	r0, r0, #0
   2ab0c:	uxth	r0, r0
   2ab10:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2ab14:	add	r0, r0, r4
   2ab18:	pop	{r4, sl, fp, pc}

0002ab1c <flatcc_json_printer_int32@@Base>:
   2ab1c:	push	{r4, sl, fp, lr}
   2ab20:	add	fp, sp, #8
   2ab24:	mov	r2, r1
   2ab28:	mov	r4, r0
   2ab2c:	ldr	r1, [r0, #20]
   2ab30:	mov	r0, r2
   2ab34:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2ab38:	ldr	r1, [r4, #20]
   2ab3c:	add	r0, r1, r0
   2ab40:	str	r0, [r4, #20]
   2ab44:	pop	{r4, sl, fp, pc}
   2ab48:	push	{r4, sl, fp, lr}
   2ab4c:	add	fp, sp, #8
   2ab50:	lsr	r4, r0, #31
   2ab54:	cmn	r0, #1
   2ab58:	movle	r2, #45	; 0x2d
   2ab5c:	strble	r2, [r1], #1
   2ab60:	rsble	r0, r0, #0
   2ab64:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2ab68:	add	r0, r0, r4
   2ab6c:	pop	{r4, sl, fp, pc}

0002ab70 <flatcc_json_printer_int64@@Base>:
   2ab70:	push	{r4, sl, fp, lr}
   2ab74:	add	fp, sp, #8
   2ab78:	mov	r1, r3
   2ab7c:	mov	r3, r2
   2ab80:	mov	r4, r0
   2ab84:	ldr	r2, [r0, #20]
   2ab88:	mov	r0, r3
   2ab8c:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2ab90:	ldr	r1, [r4, #20]
   2ab94:	add	r0, r1, r0
   2ab98:	str	r0, [r4, #20]
   2ab9c:	pop	{r4, sl, fp, pc}
   2aba0:	push	{r4, sl, fp, lr}
   2aba4:	add	fp, sp, #8
   2aba8:	lsr	r4, r1, #31
   2abac:	cmn	r1, #1
   2abb0:	bgt	2abc4 <flatcc_json_printer_int64@@Base+0x54>
   2abb4:	mov	r3, #45	; 0x2d
   2abb8:	strb	r3, [r2], #1
   2abbc:	rsbs	r0, r0, #0
   2abc0:	rsc	r1, r1, #0
   2abc4:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2abc8:	add	r0, r0, r4
   2abcc:	pop	{r4, sl, fp, pc}

0002abd0 <flatcc_json_printer_float@@Base>:
   2abd0:	push	{r4, sl, fp, lr}
   2abd4:	add	fp, sp, #8
   2abd8:	mov	r4, r0
   2abdc:	ldr	r0, [r0, #20]
   2abe0:	vcvt.f64.f32	d0, s0
   2abe4:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2abe8:	ldr	r1, [r4, #20]
   2abec:	add	r0, r1, r0
   2abf0:	str	r0, [r4, #20]
   2abf4:	pop	{r4, sl, fp, pc}

0002abf8 <flatcc_json_printer_double@@Base>:
   2abf8:	push	{r4, sl, fp, lr}
   2abfc:	add	fp, sp, #8
   2ac00:	mov	r4, r0
   2ac04:	ldr	r0, [r0, #20]
   2ac08:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2ac0c:	ldr	r1, [r4, #20]
   2ac10:	add	r0, r1, r0
   2ac14:	str	r0, [r4, #20]
   2ac18:	pop	{r4, sl, fp, pc}

0002ac1c <flatcc_json_printer_enum@@Base>:
   2ac1c:	b	2ac20 <flatcc_json_printer_enum@@Base+0x4>
   2ac20:	push	{r4, r5, fp, lr}
   2ac24:	add	fp, sp, #8
   2ac28:	mov	r5, r2
   2ac2c:	mov	r4, r0
   2ac30:	ldr	r0, [r0, #20]
   2ac34:	mov	r2, #34	; 0x22
   2ac38:	strb	r2, [r0]
   2ac3c:	ldrb	r2, [r4, #26]
   2ac40:	ldr	r3, [r4, #16]
   2ac44:	ldr	r0, [r4, #20]
   2ac48:	cmp	r2, #0
   2ac4c:	addeq	r0, r0, #1
   2ac50:	str	r0, [r4, #20]
   2ac54:	add	r2, r0, r5
   2ac58:	cmp	r2, r3
   2ac5c:	bcs	2ac78 <flatcc_json_printer_enum@@Base+0x5c>
   2ac60:	mov	r2, r5
   2ac64:	bl	14e5c <memcpy@plt>
   2ac68:	ldr	r0, [r4, #20]
   2ac6c:	add	r0, r0, r5
   2ac70:	str	r0, [r4, #20]
   2ac74:	b	2ac84 <flatcc_json_printer_enum@@Base+0x68>
   2ac78:	mov	r0, r4
   2ac7c:	mov	r2, r5
   2ac80:	bl	29ec0 <flatcc_json_printer_write@@Base+0x4>
   2ac84:	ldr	r0, [r4, #20]
   2ac88:	mov	r1, #34	; 0x22
   2ac8c:	strb	r1, [r0]
   2ac90:	ldrb	r0, [r4, #26]
   2ac94:	ldr	r1, [r4, #20]
   2ac98:	cmp	r0, #0
   2ac9c:	addeq	r1, r1, #1
   2aca0:	str	r1, [r4, #20]
   2aca4:	pop	{r4, r5, fp, pc}

0002aca8 <flatcc_json_printer_delimit_enum_flags@@Base>:
   2aca8:	ldrb	ip, [r0, #26]
   2acac:	ldr	r3, [r0, #20]
   2acb0:	mov	r2, #34	; 0x22
   2acb4:	strb	r2, [r3]
   2acb8:	cmp	r1, #0
   2acbc:	movwne	r1, #1
   2acc0:	clz	r2, ip
   2acc4:	lsr	r2, r2, #5
   2acc8:	orr	r1, r1, r2
   2accc:	ldr	r2, [r0, #20]
   2acd0:	add	r1, r2, r1
   2acd4:	str	r1, [r0, #20]
   2acd8:	bx	lr

0002acdc <flatcc_json_printer_enum_flag@@Base>:
   2acdc:	push	{fp, lr}
   2ace0:	mov	fp, sp
   2ace4:	mov	ip, r3
   2ace8:	mov	lr, r2
   2acec:	ldr	r3, [r0, #20]
   2acf0:	mov	r2, #32
   2acf4:	strb	r2, [r3]
   2acf8:	ldr	r2, [r0, #20]
   2acfc:	cmp	r1, #0
   2ad00:	addgt	r2, r2, #1
   2ad04:	str	r2, [r0, #20]
   2ad08:	mov	r1, lr
   2ad0c:	mov	r2, ip
   2ad10:	pop	{fp, lr}
   2ad14:	b	29ec0 <flatcc_json_printer_write@@Base+0x4>

0002ad18 <flatcc_json_printer_string_field@@Base>:
   2ad18:	push	{r4, r5, r6, r7, fp, lr}
   2ad1c:	add	fp, sp, #16
   2ad20:	mov	r5, r3
   2ad24:	mov	r7, r1
   2ad28:	mov	r4, r0
   2ad2c:	mov	r0, r1
   2ad30:	mov	r1, r2
   2ad34:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2ad38:	cmp	r0, #0
   2ad3c:	beq	2ad94 <flatcc_json_printer_string_field@@Base+0x7c>
   2ad40:	mov	r6, r0
   2ad44:	ldr	r2, [fp, #8]
   2ad48:	ldr	r0, [r7, #16]
   2ad4c:	add	r1, r0, #1
   2ad50:	str	r1, [r7, #16]
   2ad54:	cmp	r0, #0
   2ad58:	beq	2ad70 <flatcc_json_printer_string_field@@Base+0x58>
   2ad5c:	ldr	r0, [r4, #20]
   2ad60:	add	r1, r0, #1
   2ad64:	str	r1, [r4, #20]
   2ad68:	mov	r1, #44	; 0x2c
   2ad6c:	strb	r1, [r0]
   2ad70:	mov	r0, r4
   2ad74:	mov	r1, r5
   2ad78:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2ad7c:	mov	r0, r6
   2ad80:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2ad84:	mov	r1, r0
   2ad88:	mov	r0, r4
   2ad8c:	pop	{r4, r5, r6, r7, fp, lr}
   2ad90:	b	2ae68 <flatcc_json_printer_string_field@@Base+0x150>
   2ad94:	pop	{r4, r5, r6, r7, fp, pc}
   2ad98:	push	{r4, r5, fp, lr}
   2ad9c:	add	fp, sp, #8
   2ada0:	mov	r5, r0
   2ada4:	mov	r0, #4
   2ada8:	add	r1, r0, r1, lsl #1
   2adac:	ldr	r0, [r5, #8]
   2adb0:	mov	r4, #0
   2adb4:	cmp	r1, r0
   2adb8:	bge	2add0 <flatcc_json_printer_string_field@@Base+0xb8>
   2adbc:	ldr	r0, [r5, #4]
   2adc0:	bl	3151c <flatcc_json_printer_clear@@Base+0xc90>
   2adc4:	cmp	r0, #0
   2adc8:	ldrne	r1, [r5]
   2adcc:	addne	r4, r1, r0
   2add0:	mov	r0, r4
   2add4:	pop	{r4, r5, fp, pc}
   2add8:	push	{r4, r5, r6, sl, fp, lr}
   2addc:	add	fp, sp, #16
   2ade0:	mov	r5, r2
   2ade4:	mov	r6, r1
   2ade8:	mov	r4, r0
   2adec:	ldrb	r0, [r0, #25]
   2adf0:	cmp	r0, #0
   2adf4:	beq	2ae18 <flatcc_json_printer_string_field@@Base+0x100>
   2adf8:	ldr	r0, [r4, #20]
   2adfc:	add	r1, r0, #1
   2ae00:	str	r1, [r4, #20]
   2ae04:	mov	r1, #10
   2ae08:	strb	r1, [r0]
   2ae0c:	mov	r0, r4
   2ae10:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ae14:	b	2ae20 <flatcc_json_printer_string_field@@Base+0x108>
   2ae18:	mov	r0, r4
   2ae1c:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2ae20:	mov	r0, r4
   2ae24:	mov	r1, r6
   2ae28:	mov	r2, r5
   2ae2c:	bl	2ac20 <flatcc_json_printer_enum@@Base+0x4>
   2ae30:	ldr	r0, [r4, #20]
   2ae34:	add	r1, r0, #1
   2ae38:	str	r1, [r4, #20]
   2ae3c:	mov	r1, #58	; 0x3a
   2ae40:	strb	r1, [r0]
   2ae44:	ldr	r0, [r4, #20]
   2ae48:	mov	r1, #32
   2ae4c:	strb	r1, [r0]
   2ae50:	ldrb	r0, [r4, #25]
   2ae54:	ldr	r1, [r4, #20]
   2ae58:	cmp	r0, #0
   2ae5c:	addne	r1, r1, #1
   2ae60:	str	r1, [r4, #20]
   2ae64:	pop	{r4, r5, r6, sl, fp, pc}
   2ae68:	push	{r4, r5, fp, lr}
   2ae6c:	add	fp, sp, #8
   2ae70:	mov	r4, r1
   2ae74:	mov	r5, r0
   2ae78:	mov	r0, r1
   2ae7c:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ae80:	mov	r2, r0
   2ae84:	add	r1, r4, #4
   2ae88:	mov	r0, r5
   2ae8c:	pop	{r4, r5, fp, lr}
   2ae90:	b	29c90 <flatcc_json_printer_string@@Base+0x4>
   2ae94:	push	{r4, sl, fp, lr}
   2ae98:	add	fp, sp, #8
   2ae9c:	mov	r4, r0
   2aea0:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2aea4:	add	r0, r4, r0
   2aea8:	pop	{r4, sl, fp, pc}

0002aeac <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   2aeac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2aeb0:	add	fp, sp, #24
   2aeb4:	mov	r8, r3
   2aeb8:	mov	r6, r1
   2aebc:	mov	r4, r0
   2aec0:	mov	r0, r1
   2aec4:	mov	r1, r2
   2aec8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2aecc:	mov	r7, r0
   2aed0:	ldr	r0, [fp, #12]
   2aed4:	mov	r5, #128	; 0x80
   2aed8:	cmp	r0, #0
   2aedc:	movwne	r5, #129	; 0x81
   2aee0:	cmp	r7, #0
   2aee4:	beq	2af3c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x90>
   2aee8:	ldr	r2, [fp, #8]
   2aeec:	ldr	r0, [r6, #16]
   2aef0:	add	r1, r0, #1
   2aef4:	str	r1, [r6, #16]
   2aef8:	cmp	r0, #0
   2aefc:	beq	2af14 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x68>
   2af00:	ldr	r0, [r4, #20]
   2af04:	add	r1, r0, #1
   2af08:	str	r1, [r4, #20]
   2af0c:	mov	r1, #44	; 0x2c
   2af10:	strb	r1, [r0]
   2af14:	mov	r0, r4
   2af18:	mov	r1, r8
   2af1c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2af20:	mov	r0, r7
   2af24:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2af28:	mov	r1, r0
   2af2c:	mov	r0, r4
   2af30:	mov	r2, r5
   2af34:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2af38:	b	2af40 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   2af3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2af40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af44:	add	fp, sp, #28
   2af48:	sub	sp, sp, #12
   2af4c:	mov	r8, r2
   2af50:	mov	r5, r1
   2af54:	mov	r4, r0
   2af58:	mov	r0, r1
   2af5c:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2af60:	str	r0, [sp, #8]
   2af64:	ldr	r0, [r4, #20]
   2af68:	add	r1, r0, #1
   2af6c:	str	r1, [r4, #20]
   2af70:	mov	r1, #34	; 0x22
   2af74:	strb	r1, [r0]
   2af78:	ldr	r0, [sp, #8]
   2af7c:	mov	r1, r8
   2af80:	bl	31530 <flatcc_json_printer_clear@@Base+0xca4>
   2af84:	mov	r7, r0
   2af88:	ldr	r0, [r4, #16]
   2af8c:	ldr	r1, [r4, #20]
   2af90:	add	r1, r1, r7
   2af94:	cmp	r1, r0
   2af98:	bcc	2afac <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   2af9c:	ldr	r2, [r4, #44]	; 0x2c
   2afa0:	mov	r0, r4
   2afa4:	mov	r1, #0
   2afa8:	blx	r2
   2afac:	add	r6, r5, #4
   2afb0:	ldr	r1, [r4, #16]
   2afb4:	ldr	r0, [r4, #20]
   2afb8:	add	r2, r0, r7
   2afbc:	cmp	r2, r1
   2afc0:	bls	2b048 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x19c>
   2afc4:	bic	sl, r8, #128	; 0x80
   2afc8:	add	r9, sp, #4
   2afcc:	sub	r1, r1, r0
   2afd0:	bic	r7, r1, #3
   2afd4:	add	r1, r7, r7, lsl #1
   2afd8:	cmp	r1, #0
   2afdc:	beq	2b078 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1cc>
   2afe0:	lsr	r5, r1, #2
   2afe4:	str	r5, [sp, #4]
   2afe8:	mov	r1, r6
   2afec:	mov	r2, r9
   2aff0:	mov	r3, sl
   2aff4:	bl	31588 <flatcc_json_printer_clear@@Base+0xcfc>
   2aff8:	ldr	r0, [r4, #20]
   2affc:	add	r0, r0, r7
   2b000:	str	r0, [r4, #20]
   2b004:	ldr	r0, [sp, #8]
   2b008:	sub	r0, r0, r5
   2b00c:	str	r0, [sp, #8]
   2b010:	ldr	r2, [r4, #44]	; 0x2c
   2b014:	mov	r0, r4
   2b018:	mov	r1, #0
   2b01c:	blx	r2
   2b020:	add	r6, r6, r5
   2b024:	ldr	r0, [sp, #8]
   2b028:	mov	r1, r8
   2b02c:	bl	31530 <flatcc_json_printer_clear@@Base+0xca4>
   2b030:	mov	r7, r0
   2b034:	ldr	r1, [r4, #16]
   2b038:	ldr	r0, [r4, #20]
   2b03c:	add	r2, r0, r7
   2b040:	cmp	r2, r1
   2b044:	bhi	2afcc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x120>
   2b048:	add	r2, sp, #8
   2b04c:	mov	r1, r6
   2b050:	mov	r3, r8
   2b054:	bl	31588 <flatcc_json_printer_clear@@Base+0xcfc>
   2b058:	ldr	r0, [r4, #20]
   2b05c:	add	r1, r0, r7
   2b060:	add	r1, r1, #1
   2b064:	str	r1, [r4, #20]
   2b068:	mov	r1, #34	; 0x22
   2b06c:	strb	r1, [r0, r7]
   2b070:	sub	sp, fp, #28
   2b074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b078:	movw	r0, #35057	; 0x88f1
   2b07c:	movt	r0, #3
   2b080:	movw	r1, #34131	; 0x8553
   2b084:	movt	r1, #3
   2b088:	movw	r3, #35063	; 0x88f7
   2b08c:	movt	r3, #3
   2b090:	movw	r2, #277	; 0x115
   2b094:	bl	14f40 <__assert_fail@plt>

0002b098 <flatcc_json_printer_uint8_field@@Base>:
   2b098:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b09c:	add	fp, sp, #24
   2b0a0:	mov	r8, r3
   2b0a4:	mov	r6, r1
   2b0a8:	mov	r4, r0
   2b0ac:	mov	r0, r1
   2b0b0:	mov	r1, r2
   2b0b4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b0b8:	ldr	r5, [fp, #12]
   2b0bc:	cmp	r0, #0
   2b0c0:	beq	2b0e4 <flatcc_json_printer_uint8_field@@Base+0x4c>
   2b0c4:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2b0c8:	mov	r7, r0
   2b0cc:	cmp	r0, r5
   2b0d0:	bne	2b0f4 <flatcc_json_printer_uint8_field@@Base+0x5c>
   2b0d4:	ldrb	r0, [r4, #28]
   2b0d8:	cmp	r0, #0
   2b0dc:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b0e0:	b	2b0f4 <flatcc_json_printer_uint8_field@@Base+0x5c>
   2b0e4:	ldrb	r0, [r4, #29]
   2b0e8:	cmp	r0, #0
   2b0ec:	mov	r7, r5
   2b0f0:	beq	2b144 <flatcc_json_printer_uint8_field@@Base+0xac>
   2b0f4:	ldr	r2, [fp, #8]
   2b0f8:	ldr	r0, [r6, #16]
   2b0fc:	add	r1, r0, #1
   2b100:	str	r1, [r6, #16]
   2b104:	cmp	r0, #0
   2b108:	beq	2b120 <flatcc_json_printer_uint8_field@@Base+0x88>
   2b10c:	ldr	r0, [r4, #20]
   2b110:	add	r1, r0, #1
   2b114:	str	r1, [r4, #20]
   2b118:	mov	r1, #44	; 0x2c
   2b11c:	strb	r1, [r0]
   2b120:	mov	r0, r4
   2b124:	mov	r1, r8
   2b128:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b12c:	ldr	r1, [r4, #20]
   2b130:	mov	r0, r7
   2b134:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2b138:	ldr	r1, [r4, #20]
   2b13c:	add	r0, r1, r0
   2b140:	str	r0, [r4, #20]
   2b144:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b148:	ldrb	r0, [r0]
   2b14c:	b	316d0 <flatcc_json_printer_clear@@Base+0xe44>

0002b150 <flatcc_json_printer_uint16_field@@Base>:
   2b150:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b154:	add	fp, sp, #24
   2b158:	mov	r8, r3
   2b15c:	mov	r6, r1
   2b160:	mov	r4, r0
   2b164:	mov	r0, r1
   2b168:	mov	r1, r2
   2b16c:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b170:	ldr	r5, [fp, #12]
   2b174:	cmp	r0, #0
   2b178:	beq	2b19c <flatcc_json_printer_uint16_field@@Base+0x4c>
   2b17c:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2b180:	mov	r7, r0
   2b184:	cmp	r0, r5
   2b188:	bne	2b1ac <flatcc_json_printer_uint16_field@@Base+0x5c>
   2b18c:	ldrb	r0, [r4, #28]
   2b190:	cmp	r0, #0
   2b194:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b198:	b	2b1ac <flatcc_json_printer_uint16_field@@Base+0x5c>
   2b19c:	ldrb	r0, [r4, #29]
   2b1a0:	cmp	r0, #0
   2b1a4:	mov	r7, r5
   2b1a8:	beq	2b1fc <flatcc_json_printer_uint16_field@@Base+0xac>
   2b1ac:	ldr	r2, [fp, #8]
   2b1b0:	ldr	r0, [r6, #16]
   2b1b4:	add	r1, r0, #1
   2b1b8:	str	r1, [r6, #16]
   2b1bc:	cmp	r0, #0
   2b1c0:	beq	2b1d8 <flatcc_json_printer_uint16_field@@Base+0x88>
   2b1c4:	ldr	r0, [r4, #20]
   2b1c8:	add	r1, r0, #1
   2b1cc:	str	r1, [r4, #20]
   2b1d0:	mov	r1, #44	; 0x2c
   2b1d4:	strb	r1, [r0]
   2b1d8:	mov	r0, r4
   2b1dc:	mov	r1, r8
   2b1e0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b1e4:	ldr	r1, [r4, #20]
   2b1e8:	mov	r0, r7
   2b1ec:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2b1f0:	ldr	r1, [r4, #20]
   2b1f4:	add	r0, r1, r0
   2b1f8:	str	r0, [r4, #20]
   2b1fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b200:	ldrh	r0, [r0]
   2b204:	b	316d4 <flatcc_json_printer_clear@@Base+0xe48>

0002b208 <flatcc_json_printer_uint32_field@@Base>:
   2b208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b20c:	add	fp, sp, #24
   2b210:	mov	r8, r3
   2b214:	mov	r6, r1
   2b218:	mov	r4, r0
   2b21c:	mov	r0, r1
   2b220:	mov	r1, r2
   2b224:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b228:	ldr	r5, [fp, #12]
   2b22c:	cmp	r0, #0
   2b230:	beq	2b254 <flatcc_json_printer_uint32_field@@Base+0x4c>
   2b234:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2b238:	mov	r7, r0
   2b23c:	cmp	r0, r5
   2b240:	bne	2b264 <flatcc_json_printer_uint32_field@@Base+0x5c>
   2b244:	ldrb	r0, [r4, #28]
   2b248:	cmp	r0, #0
   2b24c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b250:	b	2b264 <flatcc_json_printer_uint32_field@@Base+0x5c>
   2b254:	ldrb	r0, [r4, #29]
   2b258:	cmp	r0, #0
   2b25c:	mov	r7, r5
   2b260:	beq	2b2b4 <flatcc_json_printer_uint32_field@@Base+0xac>
   2b264:	ldr	r2, [fp, #8]
   2b268:	ldr	r0, [r6, #16]
   2b26c:	add	r1, r0, #1
   2b270:	str	r1, [r6, #16]
   2b274:	cmp	r0, #0
   2b278:	beq	2b290 <flatcc_json_printer_uint32_field@@Base+0x88>
   2b27c:	ldr	r0, [r4, #20]
   2b280:	add	r1, r0, #1
   2b284:	str	r1, [r4, #20]
   2b288:	mov	r1, #44	; 0x2c
   2b28c:	strb	r1, [r0]
   2b290:	mov	r0, r4
   2b294:	mov	r1, r8
   2b298:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b29c:	ldr	r1, [r4, #20]
   2b2a0:	mov	r0, r7
   2b2a4:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2b2a8:	ldr	r1, [r4, #20]
   2b2ac:	add	r0, r1, r0
   2b2b0:	str	r0, [r4, #20]
   2b2b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b2b8:	ldr	r0, [r0]
   2b2bc:	b	316d8 <flatcc_json_printer_clear@@Base+0xe4c>

0002b2c0 <flatcc_json_printer_uint64_field@@Base>:
   2b2c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2c4:	add	fp, sp, #28
   2b2c8:	sub	sp, sp, #4
   2b2cc:	mov	r8, r3
   2b2d0:	mov	r6, r1
   2b2d4:	mov	r4, r0
   2b2d8:	mov	r0, r1
   2b2dc:	mov	r1, r2
   2b2e0:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b2e4:	ldr	r9, [fp, #20]
   2b2e8:	ldr	sl, [fp, #16]
   2b2ec:	cmp	r0, #0
   2b2f0:	beq	2b324 <flatcc_json_printer_uint64_field@@Base+0x64>
   2b2f4:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2b2f8:	mov	r7, r0
   2b2fc:	mov	r5, r1
   2b300:	eor	r0, r1, r9
   2b304:	eor	r1, r7, sl
   2b308:	orrs	r0, r1, r0
   2b30c:	bne	2b338 <flatcc_json_printer_uint64_field@@Base+0x78>
   2b310:	ldrb	r0, [r4, #28]
   2b314:	cmp	r0, #0
   2b318:	beq	2b338 <flatcc_json_printer_uint64_field@@Base+0x78>
   2b31c:	sub	sp, fp, #28
   2b320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b324:	ldrb	r0, [r4, #29]
   2b328:	cmp	r0, #0
   2b32c:	mov	r7, sl
   2b330:	mov	r5, r9
   2b334:	beq	2b31c <flatcc_json_printer_uint64_field@@Base+0x5c>
   2b338:	ldr	r2, [fp, #8]
   2b33c:	ldr	r0, [r6, #16]
   2b340:	add	r1, r0, #1
   2b344:	str	r1, [r6, #16]
   2b348:	cmp	r0, #0
   2b34c:	beq	2b364 <flatcc_json_printer_uint64_field@@Base+0xa4>
   2b350:	ldr	r0, [r4, #20]
   2b354:	add	r1, r0, #1
   2b358:	str	r1, [r4, #20]
   2b35c:	mov	r1, #44	; 0x2c
   2b360:	strb	r1, [r0]
   2b364:	mov	r0, r4
   2b368:	mov	r1, r8
   2b36c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b370:	ldr	r2, [r4, #20]
   2b374:	mov	r0, r7
   2b378:	mov	r1, r5
   2b37c:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2b380:	ldr	r1, [r4, #20]
   2b384:	add	r0, r1, r0
   2b388:	str	r0, [r4, #20]
   2b38c:	sub	sp, fp, #28
   2b390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b394:	ldrd	r0, [r0]
   2b398:	b	316dc <flatcc_json_printer_clear@@Base+0xe50>

0002b39c <flatcc_json_printer_int8_field@@Base>:
   2b39c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b3a0:	add	fp, sp, #24
   2b3a4:	mov	r8, r3
   2b3a8:	mov	r6, r1
   2b3ac:	mov	r4, r0
   2b3b0:	mov	r0, r1
   2b3b4:	mov	r1, r2
   2b3b8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b3bc:	ldr	r5, [fp, #12]
   2b3c0:	cmp	r0, #0
   2b3c4:	beq	2b3e8 <flatcc_json_printer_int8_field@@Base+0x4c>
   2b3c8:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2b3cc:	mov	r7, r0
   2b3d0:	cmp	r0, r5
   2b3d4:	bne	2b3f8 <flatcc_json_printer_int8_field@@Base+0x5c>
   2b3d8:	ldrb	r0, [r4, #28]
   2b3dc:	cmp	r0, #0
   2b3e0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b3e4:	b	2b3f8 <flatcc_json_printer_int8_field@@Base+0x5c>
   2b3e8:	ldrb	r0, [r4, #29]
   2b3ec:	cmp	r0, #0
   2b3f0:	mov	r7, r5
   2b3f4:	beq	2b448 <flatcc_json_printer_int8_field@@Base+0xac>
   2b3f8:	ldr	r2, [fp, #8]
   2b3fc:	ldr	r0, [r6, #16]
   2b400:	add	r1, r0, #1
   2b404:	str	r1, [r6, #16]
   2b408:	cmp	r0, #0
   2b40c:	beq	2b424 <flatcc_json_printer_int8_field@@Base+0x88>
   2b410:	ldr	r0, [r4, #20]
   2b414:	add	r1, r0, #1
   2b418:	str	r1, [r4, #20]
   2b41c:	mov	r1, #44	; 0x2c
   2b420:	strb	r1, [r0]
   2b424:	mov	r0, r4
   2b428:	mov	r1, r8
   2b42c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b430:	ldr	r1, [r4, #20]
   2b434:	mov	r0, r7
   2b438:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2b43c:	ldr	r1, [r4, #20]
   2b440:	add	r0, r1, r0
   2b444:	str	r0, [r4, #20]
   2b448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b44c:	ldrsb	r0, [r0]
   2b450:	b	316e0 <flatcc_json_printer_clear@@Base+0xe54>

0002b454 <flatcc_json_printer_int16_field@@Base>:
   2b454:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b458:	add	fp, sp, #24
   2b45c:	mov	r8, r3
   2b460:	mov	r6, r1
   2b464:	mov	r4, r0
   2b468:	mov	r0, r1
   2b46c:	mov	r1, r2
   2b470:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b474:	ldr	r5, [fp, #12]
   2b478:	cmp	r0, #0
   2b47c:	beq	2b4a0 <flatcc_json_printer_int16_field@@Base+0x4c>
   2b480:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2b484:	mov	r7, r0
   2b488:	cmp	r0, r5
   2b48c:	bne	2b4b0 <flatcc_json_printer_int16_field@@Base+0x5c>
   2b490:	ldrb	r0, [r4, #28]
   2b494:	cmp	r0, #0
   2b498:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b49c:	b	2b4b0 <flatcc_json_printer_int16_field@@Base+0x5c>
   2b4a0:	ldrb	r0, [r4, #29]
   2b4a4:	cmp	r0, #0
   2b4a8:	mov	r7, r5
   2b4ac:	beq	2b500 <flatcc_json_printer_int16_field@@Base+0xac>
   2b4b0:	ldr	r2, [fp, #8]
   2b4b4:	ldr	r0, [r6, #16]
   2b4b8:	add	r1, r0, #1
   2b4bc:	str	r1, [r6, #16]
   2b4c0:	cmp	r0, #0
   2b4c4:	beq	2b4dc <flatcc_json_printer_int16_field@@Base+0x88>
   2b4c8:	ldr	r0, [r4, #20]
   2b4cc:	add	r1, r0, #1
   2b4d0:	str	r1, [r4, #20]
   2b4d4:	mov	r1, #44	; 0x2c
   2b4d8:	strb	r1, [r0]
   2b4dc:	mov	r0, r4
   2b4e0:	mov	r1, r8
   2b4e4:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b4e8:	ldr	r1, [r4, #20]
   2b4ec:	mov	r0, r7
   2b4f0:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2b4f4:	ldr	r1, [r4, #20]
   2b4f8:	add	r0, r1, r0
   2b4fc:	str	r0, [r4, #20]
   2b500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b504:	ldrsh	r0, [r0]
   2b508:	b	316e4 <flatcc_json_printer_clear@@Base+0xe58>

0002b50c <flatcc_json_printer_int32_field@@Base>:
   2b50c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b510:	add	fp, sp, #24
   2b514:	mov	r8, r3
   2b518:	mov	r6, r1
   2b51c:	mov	r4, r0
   2b520:	mov	r0, r1
   2b524:	mov	r1, r2
   2b528:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b52c:	ldr	r5, [fp, #12]
   2b530:	cmp	r0, #0
   2b534:	beq	2b558 <flatcc_json_printer_int32_field@@Base+0x4c>
   2b538:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2b53c:	mov	r7, r0
   2b540:	cmp	r0, r5
   2b544:	bne	2b568 <flatcc_json_printer_int32_field@@Base+0x5c>
   2b548:	ldrb	r0, [r4, #28]
   2b54c:	cmp	r0, #0
   2b550:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b554:	b	2b568 <flatcc_json_printer_int32_field@@Base+0x5c>
   2b558:	ldrb	r0, [r4, #29]
   2b55c:	cmp	r0, #0
   2b560:	mov	r7, r5
   2b564:	beq	2b5b8 <flatcc_json_printer_int32_field@@Base+0xac>
   2b568:	ldr	r2, [fp, #8]
   2b56c:	ldr	r0, [r6, #16]
   2b570:	add	r1, r0, #1
   2b574:	str	r1, [r6, #16]
   2b578:	cmp	r0, #0
   2b57c:	beq	2b594 <flatcc_json_printer_int32_field@@Base+0x88>
   2b580:	ldr	r0, [r4, #20]
   2b584:	add	r1, r0, #1
   2b588:	str	r1, [r4, #20]
   2b58c:	mov	r1, #44	; 0x2c
   2b590:	strb	r1, [r0]
   2b594:	mov	r0, r4
   2b598:	mov	r1, r8
   2b59c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b5a0:	ldr	r1, [r4, #20]
   2b5a4:	mov	r0, r7
   2b5a8:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2b5ac:	ldr	r1, [r4, #20]
   2b5b0:	add	r0, r1, r0
   2b5b4:	str	r0, [r4, #20]
   2b5b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b5bc:	ldr	r0, [r0]
   2b5c0:	b	316e8 <flatcc_json_printer_clear@@Base+0xe5c>

0002b5c4 <flatcc_json_printer_int64_field@@Base>:
   2b5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5c8:	add	fp, sp, #28
   2b5cc:	sub	sp, sp, #4
   2b5d0:	mov	r8, r3
   2b5d4:	mov	r6, r1
   2b5d8:	mov	r4, r0
   2b5dc:	mov	r0, r1
   2b5e0:	mov	r1, r2
   2b5e4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b5e8:	ldr	r9, [fp, #20]
   2b5ec:	ldr	sl, [fp, #16]
   2b5f0:	cmp	r0, #0
   2b5f4:	beq	2b628 <flatcc_json_printer_int64_field@@Base+0x64>
   2b5f8:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2b5fc:	mov	r7, r0
   2b600:	mov	r5, r1
   2b604:	eor	r0, r1, r9
   2b608:	eor	r1, r7, sl
   2b60c:	orrs	r0, r1, r0
   2b610:	bne	2b63c <flatcc_json_printer_int64_field@@Base+0x78>
   2b614:	ldrb	r0, [r4, #28]
   2b618:	cmp	r0, #0
   2b61c:	beq	2b63c <flatcc_json_printer_int64_field@@Base+0x78>
   2b620:	sub	sp, fp, #28
   2b624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b628:	ldrb	r0, [r4, #29]
   2b62c:	cmp	r0, #0
   2b630:	mov	r7, sl
   2b634:	mov	r5, r9
   2b638:	beq	2b620 <flatcc_json_printer_int64_field@@Base+0x5c>
   2b63c:	ldr	r2, [fp, #8]
   2b640:	ldr	r0, [r6, #16]
   2b644:	add	r1, r0, #1
   2b648:	str	r1, [r6, #16]
   2b64c:	cmp	r0, #0
   2b650:	beq	2b668 <flatcc_json_printer_int64_field@@Base+0xa4>
   2b654:	ldr	r0, [r4, #20]
   2b658:	add	r1, r0, #1
   2b65c:	str	r1, [r4, #20]
   2b660:	mov	r1, #44	; 0x2c
   2b664:	strb	r1, [r0]
   2b668:	mov	r0, r4
   2b66c:	mov	r1, r8
   2b670:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b674:	ldr	r2, [r4, #20]
   2b678:	mov	r0, r7
   2b67c:	mov	r1, r5
   2b680:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2b684:	ldr	r1, [r4, #20]
   2b688:	add	r0, r1, r0
   2b68c:	str	r0, [r4, #20]
   2b690:	sub	sp, fp, #28
   2b694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b698:	ldrd	r0, [r0]
   2b69c:	b	316ec <flatcc_json_printer_clear@@Base+0xe60>

0002b6a0 <flatcc_json_printer_bool_field@@Base>:
   2b6a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b6a4:	add	fp, sp, #24
   2b6a8:	mov	r8, r3
   2b6ac:	mov	r6, r1
   2b6b0:	mov	r4, r0
   2b6b4:	mov	r0, r1
   2b6b8:	mov	r1, r2
   2b6bc:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b6c0:	ldr	r5, [fp, #12]
   2b6c4:	cmp	r0, #0
   2b6c8:	beq	2b6ec <flatcc_json_printer_bool_field@@Base+0x4c>
   2b6cc:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2b6d0:	mov	r7, r0
   2b6d4:	cmp	r0, r5
   2b6d8:	bne	2b6fc <flatcc_json_printer_bool_field@@Base+0x5c>
   2b6dc:	ldrb	r0, [r4, #28]
   2b6e0:	cmp	r0, #0
   2b6e4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b6e8:	b	2b6fc <flatcc_json_printer_bool_field@@Base+0x5c>
   2b6ec:	ldrb	r0, [r4, #29]
   2b6f0:	cmp	r0, #0
   2b6f4:	mov	r7, r5
   2b6f8:	beq	2b74c <flatcc_json_printer_bool_field@@Base+0xac>
   2b6fc:	ldr	r2, [fp, #8]
   2b700:	ldr	r0, [r6, #16]
   2b704:	add	r1, r0, #1
   2b708:	str	r1, [r6, #16]
   2b70c:	cmp	r0, #0
   2b710:	beq	2b728 <flatcc_json_printer_bool_field@@Base+0x88>
   2b714:	ldr	r0, [r4, #20]
   2b718:	add	r1, r0, #1
   2b71c:	str	r1, [r4, #20]
   2b720:	mov	r1, #44	; 0x2c
   2b724:	strb	r1, [r0]
   2b728:	mov	r0, r4
   2b72c:	mov	r1, r8
   2b730:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b734:	ldr	r1, [r4, #20]
   2b738:	mov	r0, r7
   2b73c:	bl	2b758 <flatcc_json_printer_bool_field@@Base+0xb8>
   2b740:	ldr	r1, [r4, #20]
   2b744:	add	r0, r1, r0
   2b748:	str	r0, [r4, #20]
   2b74c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b750:	ldrb	r0, [r0]
   2b754:	b	316f0 <flatcc_json_printer_clear@@Base+0xe64>
   2b758:	cmp	r0, #0
   2b75c:	beq	2b77c <flatcc_json_printer_bool_field@@Base+0xdc>
   2b760:	mov	r0, #0
   2b764:	strb	r0, [r1, #4]
   2b768:	movw	r0, #29300	; 0x7274
   2b76c:	movt	r0, #25973	; 0x6575
   2b770:	str	r0, [r1]
   2b774:	mov	r0, #4
   2b778:	bx	lr
   2b77c:	mov	r0, #101	; 0x65
   2b780:	strh	r0, [r1, #4]
   2b784:	movw	r0, #24934	; 0x6166
   2b788:	movt	r0, #29548	; 0x736c
   2b78c:	str	r0, [r1]
   2b790:	mov	r0, #5
   2b794:	bx	lr

0002b798 <flatcc_json_printer_float_field@@Base>:
   2b798:	push	{r4, r5, r6, sl, fp, lr}
   2b79c:	add	fp, sp, #16
   2b7a0:	vpush	{d8-d9}
   2b7a4:	vmov.f32	s18, s0
   2b7a8:	mov	r5, r3
   2b7ac:	mov	r6, r1
   2b7b0:	mov	r4, r0
   2b7b4:	mov	r0, r1
   2b7b8:	mov	r1, r2
   2b7bc:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b7c0:	cmp	r0, #0
   2b7c4:	beq	2b7f0 <flatcc_json_printer_float_field@@Base+0x58>
   2b7c8:	bl	2b858 <flatcc_json_printer_float_field@@Base+0xc0>
   2b7cc:	vmov.f32	s16, s0
   2b7d0:	vcmp.f32	s0, s18
   2b7d4:	vmrs	APSR_nzcv, fpscr
   2b7d8:	bne	2b800 <flatcc_json_printer_float_field@@Base+0x68>
   2b7dc:	ldrb	r0, [r4, #28]
   2b7e0:	cmp	r0, #0
   2b7e4:	beq	2b800 <flatcc_json_printer_float_field@@Base+0x68>
   2b7e8:	vpop	{d8-d9}
   2b7ec:	pop	{r4, r5, r6, sl, fp, pc}
   2b7f0:	ldrb	r0, [r4, #29]
   2b7f4:	cmp	r0, #0
   2b7f8:	vmov.f32	s16, s18
   2b7fc:	beq	2b7e8 <flatcc_json_printer_float_field@@Base+0x50>
   2b800:	ldr	r2, [fp, #8]
   2b804:	ldr	r0, [r6, #16]
   2b808:	add	r1, r0, #1
   2b80c:	str	r1, [r6, #16]
   2b810:	cmp	r0, #0
   2b814:	beq	2b82c <flatcc_json_printer_float_field@@Base+0x94>
   2b818:	ldr	r0, [r4, #20]
   2b81c:	add	r1, r0, #1
   2b820:	str	r1, [r4, #20]
   2b824:	mov	r1, #44	; 0x2c
   2b828:	strb	r1, [r0]
   2b82c:	mov	r0, r4
   2b830:	mov	r1, r5
   2b834:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b838:	ldr	r0, [r4, #20]
   2b83c:	vcvt.f64.f32	d0, s16
   2b840:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2b844:	ldr	r1, [r4, #20]
   2b848:	add	r0, r1, r0
   2b84c:	str	r0, [r4, #20]
   2b850:	vpop	{d8-d9}
   2b854:	pop	{r4, r5, r6, sl, fp, pc}
   2b858:	vldr	s0, [r0]
   2b85c:	b	316f4 <flatcc_json_printer_clear@@Base+0xe68>

0002b860 <flatcc_json_printer_double_field@@Base>:
   2b860:	push	{r4, r5, r6, sl, fp, lr}
   2b864:	add	fp, sp, #16
   2b868:	vpush	{d8-d9}
   2b86c:	vmov.f64	d9, d0
   2b870:	mov	r5, r3
   2b874:	mov	r6, r1
   2b878:	mov	r4, r0
   2b87c:	mov	r0, r1
   2b880:	mov	r1, r2
   2b884:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b888:	cmp	r0, #0
   2b88c:	beq	2b8b8 <flatcc_json_printer_double_field@@Base+0x58>
   2b890:	bl	2b920 <flatcc_json_printer_double_field@@Base+0xc0>
   2b894:	vmov.f64	d8, d0
   2b898:	vcmp.f64	d0, d9
   2b89c:	vmrs	APSR_nzcv, fpscr
   2b8a0:	bne	2b8c8 <flatcc_json_printer_double_field@@Base+0x68>
   2b8a4:	ldrb	r0, [r4, #28]
   2b8a8:	cmp	r0, #0
   2b8ac:	beq	2b8c8 <flatcc_json_printer_double_field@@Base+0x68>
   2b8b0:	vpop	{d8-d9}
   2b8b4:	pop	{r4, r5, r6, sl, fp, pc}
   2b8b8:	ldrb	r0, [r4, #29]
   2b8bc:	cmp	r0, #0
   2b8c0:	vmov.f64	d8, d9
   2b8c4:	beq	2b8b0 <flatcc_json_printer_double_field@@Base+0x50>
   2b8c8:	ldr	r2, [fp, #8]
   2b8cc:	ldr	r0, [r6, #16]
   2b8d0:	add	r1, r0, #1
   2b8d4:	str	r1, [r6, #16]
   2b8d8:	cmp	r0, #0
   2b8dc:	beq	2b8f4 <flatcc_json_printer_double_field@@Base+0x94>
   2b8e0:	ldr	r0, [r4, #20]
   2b8e4:	add	r1, r0, #1
   2b8e8:	str	r1, [r4, #20]
   2b8ec:	mov	r1, #44	; 0x2c
   2b8f0:	strb	r1, [r0]
   2b8f4:	mov	r0, r4
   2b8f8:	mov	r1, r5
   2b8fc:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b900:	ldr	r0, [r4, #20]
   2b904:	vmov.f64	d0, d8
   2b908:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2b90c:	ldr	r1, [r4, #20]
   2b910:	add	r0, r1, r0
   2b914:	str	r0, [r4, #20]
   2b918:	vpop	{d8-d9}
   2b91c:	pop	{r4, r5, r6, sl, fp, pc}
   2b920:	vldr	d0, [r0]
   2b924:	b	316f8 <flatcc_json_printer_clear@@Base+0xe6c>

0002b928 <flatcc_json_printer_uint8_enum_field@@Base>:
   2b928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b92c:	add	fp, sp, #28
   2b930:	sub	sp, sp, #4
   2b934:	mov	r8, r3
   2b938:	mov	r5, r1
   2b93c:	mov	r4, r0
   2b940:	mov	r0, r1
   2b944:	mov	r1, r2
   2b948:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2b94c:	ldr	sl, [fp, #16]
   2b950:	ldr	r7, [fp, #12]
   2b954:	ldr	r9, [fp, #8]
   2b958:	cmp	r0, #0
   2b95c:	beq	2b984 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   2b960:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2b964:	mov	r6, r0
   2b968:	cmp	r0, r7
   2b96c:	bne	2b994 <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2b970:	ldrb	r0, [r4, #28]
   2b974:	cmp	r0, #0
   2b978:	beq	2b994 <flatcc_json_printer_uint8_enum_field@@Base+0x6c>
   2b97c:	sub	sp, fp, #28
   2b980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b984:	ldrb	r0, [r4, #29]
   2b988:	cmp	r0, #0
   2b98c:	mov	r6, r7
   2b990:	beq	2b97c <flatcc_json_printer_uint8_enum_field@@Base+0x54>
   2b994:	ldr	r0, [r5, #16]
   2b998:	add	r1, r0, #1
   2b99c:	str	r1, [r5, #16]
   2b9a0:	cmp	r0, #0
   2b9a4:	beq	2b9bc <flatcc_json_printer_uint8_enum_field@@Base+0x94>
   2b9a8:	ldr	r0, [r4, #20]
   2b9ac:	add	r1, r0, #1
   2b9b0:	str	r1, [r4, #20]
   2b9b4:	mov	r1, #44	; 0x2c
   2b9b8:	strb	r1, [r0]
   2b9bc:	mov	r0, r4
   2b9c0:	mov	r1, r8
   2b9c4:	mov	r2, r9
   2b9c8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2b9cc:	ldrb	r0, [r4, #27]
   2b9d0:	cmp	r0, #0
   2b9d4:	beq	2b9f8 <flatcc_json_printer_uint8_enum_field@@Base+0xd0>
   2b9d8:	ldr	r1, [r4, #20]
   2b9dc:	mov	r0, r6
   2b9e0:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2b9e4:	ldr	r1, [r4, #20]
   2b9e8:	add	r0, r1, r0
   2b9ec:	str	r0, [r4, #20]
   2b9f0:	sub	sp, fp, #28
   2b9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9f8:	mov	r0, r4
   2b9fc:	mov	r1, r6
   2ba00:	mov	r2, sl
   2ba04:	sub	sp, fp, #28
   2ba08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba0c:	bx	r2

0002ba10 <flatcc_json_printer_uint16_enum_field@@Base>:
   2ba10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba14:	add	fp, sp, #28
   2ba18:	sub	sp, sp, #4
   2ba1c:	mov	r8, r3
   2ba20:	mov	r5, r1
   2ba24:	mov	r4, r0
   2ba28:	mov	r0, r1
   2ba2c:	mov	r1, r2
   2ba30:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2ba34:	ldr	sl, [fp, #16]
   2ba38:	ldr	r7, [fp, #12]
   2ba3c:	ldr	r9, [fp, #8]
   2ba40:	cmp	r0, #0
   2ba44:	beq	2ba6c <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   2ba48:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2ba4c:	mov	r6, r0
   2ba50:	cmp	r0, r7
   2ba54:	bne	2ba7c <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2ba58:	ldrb	r0, [r4, #28]
   2ba5c:	cmp	r0, #0
   2ba60:	beq	2ba7c <flatcc_json_printer_uint16_enum_field@@Base+0x6c>
   2ba64:	sub	sp, fp, #28
   2ba68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba6c:	ldrb	r0, [r4, #29]
   2ba70:	cmp	r0, #0
   2ba74:	mov	r6, r7
   2ba78:	beq	2ba64 <flatcc_json_printer_uint16_enum_field@@Base+0x54>
   2ba7c:	ldr	r0, [r5, #16]
   2ba80:	add	r1, r0, #1
   2ba84:	str	r1, [r5, #16]
   2ba88:	cmp	r0, #0
   2ba8c:	beq	2baa4 <flatcc_json_printer_uint16_enum_field@@Base+0x94>
   2ba90:	ldr	r0, [r4, #20]
   2ba94:	add	r1, r0, #1
   2ba98:	str	r1, [r4, #20]
   2ba9c:	mov	r1, #44	; 0x2c
   2baa0:	strb	r1, [r0]
   2baa4:	mov	r0, r4
   2baa8:	mov	r1, r8
   2baac:	mov	r2, r9
   2bab0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2bab4:	ldrb	r0, [r4, #27]
   2bab8:	cmp	r0, #0
   2babc:	beq	2bae0 <flatcc_json_printer_uint16_enum_field@@Base+0xd0>
   2bac0:	ldr	r1, [r4, #20]
   2bac4:	mov	r0, r6
   2bac8:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2bacc:	ldr	r1, [r4, #20]
   2bad0:	add	r0, r1, r0
   2bad4:	str	r0, [r4, #20]
   2bad8:	sub	sp, fp, #28
   2badc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bae0:	mov	r0, r4
   2bae4:	mov	r1, r6
   2bae8:	mov	r2, sl
   2baec:	sub	sp, fp, #28
   2baf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2baf4:	bx	r2

0002baf8 <flatcc_json_printer_uint32_enum_field@@Base>:
   2baf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bafc:	add	fp, sp, #28
   2bb00:	sub	sp, sp, #4
   2bb04:	mov	r8, r3
   2bb08:	mov	r5, r1
   2bb0c:	mov	r4, r0
   2bb10:	mov	r0, r1
   2bb14:	mov	r1, r2
   2bb18:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2bb1c:	ldr	sl, [fp, #16]
   2bb20:	ldr	r7, [fp, #12]
   2bb24:	ldr	r9, [fp, #8]
   2bb28:	cmp	r0, #0
   2bb2c:	beq	2bb54 <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   2bb30:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2bb34:	mov	r6, r0
   2bb38:	cmp	r0, r7
   2bb3c:	bne	2bb64 <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2bb40:	ldrb	r0, [r4, #28]
   2bb44:	cmp	r0, #0
   2bb48:	beq	2bb64 <flatcc_json_printer_uint32_enum_field@@Base+0x6c>
   2bb4c:	sub	sp, fp, #28
   2bb50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb54:	ldrb	r0, [r4, #29]
   2bb58:	cmp	r0, #0
   2bb5c:	mov	r6, r7
   2bb60:	beq	2bb4c <flatcc_json_printer_uint32_enum_field@@Base+0x54>
   2bb64:	ldr	r0, [r5, #16]
   2bb68:	add	r1, r0, #1
   2bb6c:	str	r1, [r5, #16]
   2bb70:	cmp	r0, #0
   2bb74:	beq	2bb8c <flatcc_json_printer_uint32_enum_field@@Base+0x94>
   2bb78:	ldr	r0, [r4, #20]
   2bb7c:	add	r1, r0, #1
   2bb80:	str	r1, [r4, #20]
   2bb84:	mov	r1, #44	; 0x2c
   2bb88:	strb	r1, [r0]
   2bb8c:	mov	r0, r4
   2bb90:	mov	r1, r8
   2bb94:	mov	r2, r9
   2bb98:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2bb9c:	ldrb	r0, [r4, #27]
   2bba0:	cmp	r0, #0
   2bba4:	beq	2bbc8 <flatcc_json_printer_uint32_enum_field@@Base+0xd0>
   2bba8:	ldr	r1, [r4, #20]
   2bbac:	mov	r0, r6
   2bbb0:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2bbb4:	ldr	r1, [r4, #20]
   2bbb8:	add	r0, r1, r0
   2bbbc:	str	r0, [r4, #20]
   2bbc0:	sub	sp, fp, #28
   2bbc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbc8:	mov	r0, r4
   2bbcc:	mov	r1, r6
   2bbd0:	mov	r2, sl
   2bbd4:	sub	sp, fp, #28
   2bbd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbdc:	bx	r2

0002bbe0 <flatcc_json_printer_uint64_enum_field@@Base>:
   2bbe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbe4:	add	fp, sp, #28
   2bbe8:	sub	sp, sp, #12
   2bbec:	str	r3, [sp, #8]
   2bbf0:	mov	r6, r1
   2bbf4:	mov	r4, r0
   2bbf8:	mov	r0, r1
   2bbfc:	mov	r1, r2
   2bc00:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2bc04:	ldr	r5, [fp, #20]
   2bc08:	ldr	r7, [fp, #16]
   2bc0c:	ldr	r1, [fp, #24]
   2bc10:	str	r1, [sp, #4]
   2bc14:	ldr	r9, [fp, #8]
   2bc18:	cmp	r0, #0
   2bc1c:	beq	2bc50 <flatcc_json_printer_uint64_enum_field@@Base+0x70>
   2bc20:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2bc24:	mov	r8, r0
   2bc28:	mov	sl, r1
   2bc2c:	eor	r0, r1, r5
   2bc30:	eor	r1, r8, r7
   2bc34:	orrs	r0, r1, r0
   2bc38:	bne	2bc64 <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2bc3c:	ldrb	r0, [r4, #28]
   2bc40:	cmp	r0, #0
   2bc44:	beq	2bc64 <flatcc_json_printer_uint64_enum_field@@Base+0x84>
   2bc48:	sub	sp, fp, #28
   2bc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc50:	ldrb	r0, [r4, #29]
   2bc54:	cmp	r0, #0
   2bc58:	mov	r8, r7
   2bc5c:	mov	sl, r5
   2bc60:	beq	2bc48 <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   2bc64:	ldr	r0, [r6, #16]
   2bc68:	add	r1, r0, #1
   2bc6c:	str	r1, [r6, #16]
   2bc70:	cmp	r0, #0
   2bc74:	beq	2bc8c <flatcc_json_printer_uint64_enum_field@@Base+0xac>
   2bc78:	ldr	r0, [r4, #20]
   2bc7c:	add	r1, r0, #1
   2bc80:	str	r1, [r4, #20]
   2bc84:	mov	r1, #44	; 0x2c
   2bc88:	strb	r1, [r0]
   2bc8c:	mov	r0, r4
   2bc90:	ldr	r1, [sp, #8]
   2bc94:	mov	r2, r9
   2bc98:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2bc9c:	ldrb	r0, [r4, #27]
   2bca0:	cmp	r0, #0
   2bca4:	beq	2bccc <flatcc_json_printer_uint64_enum_field@@Base+0xec>
   2bca8:	ldr	r2, [r4, #20]
   2bcac:	mov	r0, r8
   2bcb0:	mov	r1, sl
   2bcb4:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2bcb8:	ldr	r1, [r4, #20]
   2bcbc:	add	r0, r1, r0
   2bcc0:	str	r0, [r4, #20]
   2bcc4:	sub	sp, fp, #28
   2bcc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bccc:	mov	r0, r4
   2bcd0:	mov	r2, r8
   2bcd4:	mov	r3, sl
   2bcd8:	ldr	r1, [sp, #4]
   2bcdc:	sub	sp, fp, #28
   2bce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bce4:	bx	r1

0002bce8 <flatcc_json_printer_int8_enum_field@@Base>:
   2bce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bcec:	add	fp, sp, #28
   2bcf0:	sub	sp, sp, #4
   2bcf4:	mov	r8, r3
   2bcf8:	mov	r5, r1
   2bcfc:	mov	r4, r0
   2bd00:	mov	r0, r1
   2bd04:	mov	r1, r2
   2bd08:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2bd0c:	ldr	sl, [fp, #16]
   2bd10:	ldr	r7, [fp, #12]
   2bd14:	ldr	r9, [fp, #8]
   2bd18:	cmp	r0, #0
   2bd1c:	beq	2bd44 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   2bd20:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2bd24:	mov	r6, r0
   2bd28:	cmp	r0, r7
   2bd2c:	bne	2bd54 <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2bd30:	ldrb	r0, [r4, #28]
   2bd34:	cmp	r0, #0
   2bd38:	beq	2bd54 <flatcc_json_printer_int8_enum_field@@Base+0x6c>
   2bd3c:	sub	sp, fp, #28
   2bd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd44:	ldrb	r0, [r4, #29]
   2bd48:	cmp	r0, #0
   2bd4c:	mov	r6, r7
   2bd50:	beq	2bd3c <flatcc_json_printer_int8_enum_field@@Base+0x54>
   2bd54:	ldr	r0, [r5, #16]
   2bd58:	add	r1, r0, #1
   2bd5c:	str	r1, [r5, #16]
   2bd60:	cmp	r0, #0
   2bd64:	beq	2bd7c <flatcc_json_printer_int8_enum_field@@Base+0x94>
   2bd68:	ldr	r0, [r4, #20]
   2bd6c:	add	r1, r0, #1
   2bd70:	str	r1, [r4, #20]
   2bd74:	mov	r1, #44	; 0x2c
   2bd78:	strb	r1, [r0]
   2bd7c:	mov	r0, r4
   2bd80:	mov	r1, r8
   2bd84:	mov	r2, r9
   2bd88:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2bd8c:	ldrb	r0, [r4, #27]
   2bd90:	cmp	r0, #0
   2bd94:	beq	2bdb8 <flatcc_json_printer_int8_enum_field@@Base+0xd0>
   2bd98:	ldr	r1, [r4, #20]
   2bd9c:	mov	r0, r6
   2bda0:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2bda4:	ldr	r1, [r4, #20]
   2bda8:	add	r0, r1, r0
   2bdac:	str	r0, [r4, #20]
   2bdb0:	sub	sp, fp, #28
   2bdb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdb8:	mov	r0, r4
   2bdbc:	mov	r1, r6
   2bdc0:	mov	r2, sl
   2bdc4:	sub	sp, fp, #28
   2bdc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bdcc:	bx	r2

0002bdd0 <flatcc_json_printer_int16_enum_field@@Base>:
   2bdd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bdd4:	add	fp, sp, #28
   2bdd8:	sub	sp, sp, #4
   2bddc:	mov	r8, r3
   2bde0:	mov	r5, r1
   2bde4:	mov	r4, r0
   2bde8:	mov	r0, r1
   2bdec:	mov	r1, r2
   2bdf0:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2bdf4:	ldr	sl, [fp, #16]
   2bdf8:	ldr	r7, [fp, #12]
   2bdfc:	ldr	r9, [fp, #8]
   2be00:	cmp	r0, #0
   2be04:	beq	2be2c <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   2be08:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2be0c:	mov	r6, r0
   2be10:	cmp	r0, r7
   2be14:	bne	2be3c <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2be18:	ldrb	r0, [r4, #28]
   2be1c:	cmp	r0, #0
   2be20:	beq	2be3c <flatcc_json_printer_int16_enum_field@@Base+0x6c>
   2be24:	sub	sp, fp, #28
   2be28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be2c:	ldrb	r0, [r4, #29]
   2be30:	cmp	r0, #0
   2be34:	mov	r6, r7
   2be38:	beq	2be24 <flatcc_json_printer_int16_enum_field@@Base+0x54>
   2be3c:	ldr	r0, [r5, #16]
   2be40:	add	r1, r0, #1
   2be44:	str	r1, [r5, #16]
   2be48:	cmp	r0, #0
   2be4c:	beq	2be64 <flatcc_json_printer_int16_enum_field@@Base+0x94>
   2be50:	ldr	r0, [r4, #20]
   2be54:	add	r1, r0, #1
   2be58:	str	r1, [r4, #20]
   2be5c:	mov	r1, #44	; 0x2c
   2be60:	strb	r1, [r0]
   2be64:	mov	r0, r4
   2be68:	mov	r1, r8
   2be6c:	mov	r2, r9
   2be70:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2be74:	ldrb	r0, [r4, #27]
   2be78:	cmp	r0, #0
   2be7c:	beq	2bea0 <flatcc_json_printer_int16_enum_field@@Base+0xd0>
   2be80:	ldr	r1, [r4, #20]
   2be84:	mov	r0, r6
   2be88:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2be8c:	ldr	r1, [r4, #20]
   2be90:	add	r0, r1, r0
   2be94:	str	r0, [r4, #20]
   2be98:	sub	sp, fp, #28
   2be9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bea0:	mov	r0, r4
   2bea4:	mov	r1, r6
   2bea8:	mov	r2, sl
   2beac:	sub	sp, fp, #28
   2beb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2beb4:	bx	r2

0002beb8 <flatcc_json_printer_int32_enum_field@@Base>:
   2beb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bebc:	add	fp, sp, #28
   2bec0:	sub	sp, sp, #4
   2bec4:	mov	r8, r3
   2bec8:	mov	r5, r1
   2becc:	mov	r4, r0
   2bed0:	mov	r0, r1
   2bed4:	mov	r1, r2
   2bed8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2bedc:	ldr	sl, [fp, #16]
   2bee0:	ldr	r7, [fp, #12]
   2bee4:	ldr	r9, [fp, #8]
   2bee8:	cmp	r0, #0
   2beec:	beq	2bf14 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   2bef0:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2bef4:	mov	r6, r0
   2bef8:	cmp	r0, r7
   2befc:	bne	2bf24 <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2bf00:	ldrb	r0, [r4, #28]
   2bf04:	cmp	r0, #0
   2bf08:	beq	2bf24 <flatcc_json_printer_int32_enum_field@@Base+0x6c>
   2bf0c:	sub	sp, fp, #28
   2bf10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf14:	ldrb	r0, [r4, #29]
   2bf18:	cmp	r0, #0
   2bf1c:	mov	r6, r7
   2bf20:	beq	2bf0c <flatcc_json_printer_int32_enum_field@@Base+0x54>
   2bf24:	ldr	r0, [r5, #16]
   2bf28:	add	r1, r0, #1
   2bf2c:	str	r1, [r5, #16]
   2bf30:	cmp	r0, #0
   2bf34:	beq	2bf4c <flatcc_json_printer_int32_enum_field@@Base+0x94>
   2bf38:	ldr	r0, [r4, #20]
   2bf3c:	add	r1, r0, #1
   2bf40:	str	r1, [r4, #20]
   2bf44:	mov	r1, #44	; 0x2c
   2bf48:	strb	r1, [r0]
   2bf4c:	mov	r0, r4
   2bf50:	mov	r1, r8
   2bf54:	mov	r2, r9
   2bf58:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2bf5c:	ldrb	r0, [r4, #27]
   2bf60:	cmp	r0, #0
   2bf64:	beq	2bf88 <flatcc_json_printer_int32_enum_field@@Base+0xd0>
   2bf68:	ldr	r1, [r4, #20]
   2bf6c:	mov	r0, r6
   2bf70:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2bf74:	ldr	r1, [r4, #20]
   2bf78:	add	r0, r1, r0
   2bf7c:	str	r0, [r4, #20]
   2bf80:	sub	sp, fp, #28
   2bf84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bf88:	mov	r0, r4
   2bf8c:	mov	r1, r6
   2bf90:	mov	r2, sl
   2bf94:	sub	sp, fp, #28
   2bf98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf9c:	bx	r2

0002bfa0 <flatcc_json_printer_int64_enum_field@@Base>:
   2bfa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfa4:	add	fp, sp, #28
   2bfa8:	sub	sp, sp, #12
   2bfac:	str	r3, [sp, #8]
   2bfb0:	mov	r6, r1
   2bfb4:	mov	r4, r0
   2bfb8:	mov	r0, r1
   2bfbc:	mov	r1, r2
   2bfc0:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2bfc4:	ldr	r5, [fp, #20]
   2bfc8:	ldr	r7, [fp, #16]
   2bfcc:	ldr	r1, [fp, #24]
   2bfd0:	str	r1, [sp, #4]
   2bfd4:	ldr	r9, [fp, #8]
   2bfd8:	cmp	r0, #0
   2bfdc:	beq	2c010 <flatcc_json_printer_int64_enum_field@@Base+0x70>
   2bfe0:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2bfe4:	mov	r8, r0
   2bfe8:	mov	sl, r1
   2bfec:	eor	r0, r1, r5
   2bff0:	eor	r1, r8, r7
   2bff4:	orrs	r0, r1, r0
   2bff8:	bne	2c024 <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2bffc:	ldrb	r0, [r4, #28]
   2c000:	cmp	r0, #0
   2c004:	beq	2c024 <flatcc_json_printer_int64_enum_field@@Base+0x84>
   2c008:	sub	sp, fp, #28
   2c00c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c010:	ldrb	r0, [r4, #29]
   2c014:	cmp	r0, #0
   2c018:	mov	r8, r7
   2c01c:	mov	sl, r5
   2c020:	beq	2c008 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   2c024:	ldr	r0, [r6, #16]
   2c028:	add	r1, r0, #1
   2c02c:	str	r1, [r6, #16]
   2c030:	cmp	r0, #0
   2c034:	beq	2c04c <flatcc_json_printer_int64_enum_field@@Base+0xac>
   2c038:	ldr	r0, [r4, #20]
   2c03c:	add	r1, r0, #1
   2c040:	str	r1, [r4, #20]
   2c044:	mov	r1, #44	; 0x2c
   2c048:	strb	r1, [r0]
   2c04c:	mov	r0, r4
   2c050:	ldr	r1, [sp, #8]
   2c054:	mov	r2, r9
   2c058:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c05c:	ldrb	r0, [r4, #27]
   2c060:	cmp	r0, #0
   2c064:	beq	2c08c <flatcc_json_printer_int64_enum_field@@Base+0xec>
   2c068:	ldr	r2, [r4, #20]
   2c06c:	mov	r0, r8
   2c070:	mov	r1, sl
   2c074:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2c078:	ldr	r1, [r4, #20]
   2c07c:	add	r0, r1, r0
   2c080:	str	r0, [r4, #20]
   2c084:	sub	sp, fp, #28
   2c088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c08c:	mov	r0, r4
   2c090:	mov	r2, r8
   2c094:	mov	r3, sl
   2c098:	ldr	r1, [sp, #4]
   2c09c:	sub	sp, fp, #28
   2c0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0a4:	bx	r1

0002c0a8 <flatcc_json_printer_bool_enum_field@@Base>:
   2c0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c0ac:	add	fp, sp, #28
   2c0b0:	sub	sp, sp, #4
   2c0b4:	mov	r8, r3
   2c0b8:	mov	r5, r1
   2c0bc:	mov	r4, r0
   2c0c0:	mov	r0, r1
   2c0c4:	mov	r1, r2
   2c0c8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2c0cc:	ldr	sl, [fp, #16]
   2c0d0:	ldr	r7, [fp, #12]
   2c0d4:	ldr	r9, [fp, #8]
   2c0d8:	cmp	r0, #0
   2c0dc:	beq	2c104 <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   2c0e0:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2c0e4:	mov	r6, r0
   2c0e8:	cmp	r0, r7
   2c0ec:	bne	2c114 <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2c0f0:	ldrb	r0, [r4, #28]
   2c0f4:	cmp	r0, #0
   2c0f8:	beq	2c114 <flatcc_json_printer_bool_enum_field@@Base+0x6c>
   2c0fc:	sub	sp, fp, #28
   2c100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c104:	ldrb	r0, [r4, #29]
   2c108:	cmp	r0, #0
   2c10c:	mov	r6, r7
   2c110:	beq	2c0fc <flatcc_json_printer_bool_enum_field@@Base+0x54>
   2c114:	ldr	r0, [r5, #16]
   2c118:	add	r1, r0, #1
   2c11c:	str	r1, [r5, #16]
   2c120:	cmp	r0, #0
   2c124:	beq	2c13c <flatcc_json_printer_bool_enum_field@@Base+0x94>
   2c128:	ldr	r0, [r4, #20]
   2c12c:	add	r1, r0, #1
   2c130:	str	r1, [r4, #20]
   2c134:	mov	r1, #44	; 0x2c
   2c138:	strb	r1, [r0]
   2c13c:	mov	r0, r4
   2c140:	mov	r1, r8
   2c144:	mov	r2, r9
   2c148:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c14c:	ldrb	r0, [r4, #27]
   2c150:	cmp	r0, #0
   2c154:	beq	2c178 <flatcc_json_printer_bool_enum_field@@Base+0xd0>
   2c158:	ldr	r1, [r4, #20]
   2c15c:	mov	r0, r6
   2c160:	bl	2b758 <flatcc_json_printer_bool_field@@Base+0xb8>
   2c164:	ldr	r1, [r4, #20]
   2c168:	add	r0, r1, r0
   2c16c:	str	r0, [r4, #20]
   2c170:	sub	sp, fp, #28
   2c174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c178:	mov	r0, r4
   2c17c:	mov	r1, r6
   2c180:	mov	r2, sl
   2c184:	sub	sp, fp, #28
   2c188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c18c:	bx	r2

0002c190 <flatcc_json_printer_uint8_struct_field@@Base>:
   2c190:	push	{r4, r5, r6, sl, fp, lr}
   2c194:	add	fp, sp, #16
   2c198:	mov	r6, r1
   2c19c:	mov	r4, r0
   2c1a0:	add	r0, r2, r3
   2c1a4:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2c1a8:	mov	r5, r0
   2c1ac:	ldr	r2, [fp, #12]
   2c1b0:	ldr	r1, [fp, #8]
   2c1b4:	cmp	r6, #0
   2c1b8:	beq	2c1d0 <flatcc_json_printer_uint8_struct_field@@Base+0x40>
   2c1bc:	ldr	r0, [r4, #20]
   2c1c0:	add	r3, r0, #1
   2c1c4:	str	r3, [r4, #20]
   2c1c8:	mov	r3, #44	; 0x2c
   2c1cc:	strb	r3, [r0]
   2c1d0:	mov	r0, r4
   2c1d4:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c1d8:	ldr	r1, [r4, #20]
   2c1dc:	mov	r0, r5
   2c1e0:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2c1e4:	ldr	r1, [r4, #20]
   2c1e8:	add	r0, r1, r0
   2c1ec:	str	r0, [r4, #20]
   2c1f0:	pop	{r4, r5, r6, sl, fp, pc}

0002c1f4 <flatcc_json_printer_uint16_struct_field@@Base>:
   2c1f4:	push	{r4, r5, r6, sl, fp, lr}
   2c1f8:	add	fp, sp, #16
   2c1fc:	mov	r6, r1
   2c200:	mov	r4, r0
   2c204:	add	r0, r2, r3
   2c208:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2c20c:	mov	r5, r0
   2c210:	ldr	r2, [fp, #12]
   2c214:	ldr	r1, [fp, #8]
   2c218:	cmp	r6, #0
   2c21c:	beq	2c234 <flatcc_json_printer_uint16_struct_field@@Base+0x40>
   2c220:	ldr	r0, [r4, #20]
   2c224:	add	r3, r0, #1
   2c228:	str	r3, [r4, #20]
   2c22c:	mov	r3, #44	; 0x2c
   2c230:	strb	r3, [r0]
   2c234:	mov	r0, r4
   2c238:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c23c:	ldr	r1, [r4, #20]
   2c240:	mov	r0, r5
   2c244:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2c248:	ldr	r1, [r4, #20]
   2c24c:	add	r0, r1, r0
   2c250:	str	r0, [r4, #20]
   2c254:	pop	{r4, r5, r6, sl, fp, pc}

0002c258 <flatcc_json_printer_uint32_struct_field@@Base>:
   2c258:	push	{r4, r5, r6, sl, fp, lr}
   2c25c:	add	fp, sp, #16
   2c260:	mov	r6, r1
   2c264:	mov	r4, r0
   2c268:	add	r0, r2, r3
   2c26c:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2c270:	mov	r5, r0
   2c274:	ldr	r2, [fp, #12]
   2c278:	ldr	r1, [fp, #8]
   2c27c:	cmp	r6, #0
   2c280:	beq	2c298 <flatcc_json_printer_uint32_struct_field@@Base+0x40>
   2c284:	ldr	r0, [r4, #20]
   2c288:	add	r3, r0, #1
   2c28c:	str	r3, [r4, #20]
   2c290:	mov	r3, #44	; 0x2c
   2c294:	strb	r3, [r0]
   2c298:	mov	r0, r4
   2c29c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c2a0:	ldr	r1, [r4, #20]
   2c2a4:	mov	r0, r5
   2c2a8:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2c2ac:	ldr	r1, [r4, #20]
   2c2b0:	add	r0, r1, r0
   2c2b4:	str	r0, [r4, #20]
   2c2b8:	pop	{r4, r5, r6, sl, fp, pc}

0002c2bc <flatcc_json_printer_uint64_struct_field@@Base>:
   2c2bc:	push	{r4, r5, r6, r7, fp, lr}
   2c2c0:	add	fp, sp, #16
   2c2c4:	mov	r7, r1
   2c2c8:	mov	r4, r0
   2c2cc:	add	r0, r2, r3
   2c2d0:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2c2d4:	mov	r5, r0
   2c2d8:	mov	r6, r1
   2c2dc:	ldr	r2, [fp, #12]
   2c2e0:	ldr	r1, [fp, #8]
   2c2e4:	cmp	r7, #0
   2c2e8:	beq	2c300 <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   2c2ec:	ldr	r0, [r4, #20]
   2c2f0:	add	r3, r0, #1
   2c2f4:	str	r3, [r4, #20]
   2c2f8:	mov	r3, #44	; 0x2c
   2c2fc:	strb	r3, [r0]
   2c300:	mov	r0, r4
   2c304:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c308:	ldr	r2, [r4, #20]
   2c30c:	mov	r0, r5
   2c310:	mov	r1, r6
   2c314:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2c318:	ldr	r1, [r4, #20]
   2c31c:	add	r0, r1, r0
   2c320:	str	r0, [r4, #20]
   2c324:	pop	{r4, r5, r6, r7, fp, pc}

0002c328 <flatcc_json_printer_int8_struct_field@@Base>:
   2c328:	push	{r4, r5, r6, sl, fp, lr}
   2c32c:	add	fp, sp, #16
   2c330:	mov	r6, r1
   2c334:	mov	r4, r0
   2c338:	add	r0, r2, r3
   2c33c:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2c340:	mov	r5, r0
   2c344:	ldr	r2, [fp, #12]
   2c348:	ldr	r1, [fp, #8]
   2c34c:	cmp	r6, #0
   2c350:	beq	2c368 <flatcc_json_printer_int8_struct_field@@Base+0x40>
   2c354:	ldr	r0, [r4, #20]
   2c358:	add	r3, r0, #1
   2c35c:	str	r3, [r4, #20]
   2c360:	mov	r3, #44	; 0x2c
   2c364:	strb	r3, [r0]
   2c368:	mov	r0, r4
   2c36c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c370:	ldr	r1, [r4, #20]
   2c374:	mov	r0, r5
   2c378:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2c37c:	ldr	r1, [r4, #20]
   2c380:	add	r0, r1, r0
   2c384:	str	r0, [r4, #20]
   2c388:	pop	{r4, r5, r6, sl, fp, pc}

0002c38c <flatcc_json_printer_int16_struct_field@@Base>:
   2c38c:	push	{r4, r5, r6, sl, fp, lr}
   2c390:	add	fp, sp, #16
   2c394:	mov	r6, r1
   2c398:	mov	r4, r0
   2c39c:	add	r0, r2, r3
   2c3a0:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2c3a4:	mov	r5, r0
   2c3a8:	ldr	r2, [fp, #12]
   2c3ac:	ldr	r1, [fp, #8]
   2c3b0:	cmp	r6, #0
   2c3b4:	beq	2c3cc <flatcc_json_printer_int16_struct_field@@Base+0x40>
   2c3b8:	ldr	r0, [r4, #20]
   2c3bc:	add	r3, r0, #1
   2c3c0:	str	r3, [r4, #20]
   2c3c4:	mov	r3, #44	; 0x2c
   2c3c8:	strb	r3, [r0]
   2c3cc:	mov	r0, r4
   2c3d0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c3d4:	ldr	r1, [r4, #20]
   2c3d8:	mov	r0, r5
   2c3dc:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2c3e0:	ldr	r1, [r4, #20]
   2c3e4:	add	r0, r1, r0
   2c3e8:	str	r0, [r4, #20]
   2c3ec:	pop	{r4, r5, r6, sl, fp, pc}

0002c3f0 <flatcc_json_printer_int32_struct_field@@Base>:
   2c3f0:	push	{r4, r5, r6, sl, fp, lr}
   2c3f4:	add	fp, sp, #16
   2c3f8:	mov	r6, r1
   2c3fc:	mov	r4, r0
   2c400:	add	r0, r2, r3
   2c404:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2c408:	mov	r5, r0
   2c40c:	ldr	r2, [fp, #12]
   2c410:	ldr	r1, [fp, #8]
   2c414:	cmp	r6, #0
   2c418:	beq	2c430 <flatcc_json_printer_int32_struct_field@@Base+0x40>
   2c41c:	ldr	r0, [r4, #20]
   2c420:	add	r3, r0, #1
   2c424:	str	r3, [r4, #20]
   2c428:	mov	r3, #44	; 0x2c
   2c42c:	strb	r3, [r0]
   2c430:	mov	r0, r4
   2c434:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c438:	ldr	r1, [r4, #20]
   2c43c:	mov	r0, r5
   2c440:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2c444:	ldr	r1, [r4, #20]
   2c448:	add	r0, r1, r0
   2c44c:	str	r0, [r4, #20]
   2c450:	pop	{r4, r5, r6, sl, fp, pc}

0002c454 <flatcc_json_printer_int64_struct_field@@Base>:
   2c454:	push	{r4, r5, r6, r7, fp, lr}
   2c458:	add	fp, sp, #16
   2c45c:	mov	r7, r1
   2c460:	mov	r4, r0
   2c464:	add	r0, r2, r3
   2c468:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2c46c:	mov	r5, r0
   2c470:	mov	r6, r1
   2c474:	ldr	r2, [fp, #12]
   2c478:	ldr	r1, [fp, #8]
   2c47c:	cmp	r7, #0
   2c480:	beq	2c498 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   2c484:	ldr	r0, [r4, #20]
   2c488:	add	r3, r0, #1
   2c48c:	str	r3, [r4, #20]
   2c490:	mov	r3, #44	; 0x2c
   2c494:	strb	r3, [r0]
   2c498:	mov	r0, r4
   2c49c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c4a0:	ldr	r2, [r4, #20]
   2c4a4:	mov	r0, r5
   2c4a8:	mov	r1, r6
   2c4ac:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2c4b0:	ldr	r1, [r4, #20]
   2c4b4:	add	r0, r1, r0
   2c4b8:	str	r0, [r4, #20]
   2c4bc:	pop	{r4, r5, r6, r7, fp, pc}

0002c4c0 <flatcc_json_printer_bool_struct_field@@Base>:
   2c4c0:	push	{r4, r5, r6, sl, fp, lr}
   2c4c4:	add	fp, sp, #16
   2c4c8:	mov	r6, r1
   2c4cc:	mov	r4, r0
   2c4d0:	add	r0, r2, r3
   2c4d4:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2c4d8:	mov	r5, r0
   2c4dc:	ldr	r2, [fp, #12]
   2c4e0:	ldr	r1, [fp, #8]
   2c4e4:	cmp	r6, #0
   2c4e8:	beq	2c500 <flatcc_json_printer_bool_struct_field@@Base+0x40>
   2c4ec:	ldr	r0, [r4, #20]
   2c4f0:	add	r3, r0, #1
   2c4f4:	str	r3, [r4, #20]
   2c4f8:	mov	r3, #44	; 0x2c
   2c4fc:	strb	r3, [r0]
   2c500:	mov	r0, r4
   2c504:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c508:	ldr	r1, [r4, #20]
   2c50c:	mov	r0, r5
   2c510:	bl	2b758 <flatcc_json_printer_bool_field@@Base+0xb8>
   2c514:	ldr	r1, [r4, #20]
   2c518:	add	r0, r1, r0
   2c51c:	str	r0, [r4, #20]
   2c520:	pop	{r4, r5, r6, sl, fp, pc}

0002c524 <flatcc_json_printer_float_struct_field@@Base>:
   2c524:	push	{r4, r5, fp, lr}
   2c528:	add	fp, sp, #8
   2c52c:	vpush	{d8}
   2c530:	mov	r5, r1
   2c534:	mov	r4, r0
   2c538:	add	r0, r2, r3
   2c53c:	bl	2b858 <flatcc_json_printer_float_field@@Base+0xc0>
   2c540:	vmov.f32	s16, s0
   2c544:	ldr	r2, [fp, #12]
   2c548:	ldr	r1, [fp, #8]
   2c54c:	cmp	r5, #0
   2c550:	beq	2c568 <flatcc_json_printer_float_struct_field@@Base+0x44>
   2c554:	ldr	r0, [r4, #20]
   2c558:	add	r3, r0, #1
   2c55c:	str	r3, [r4, #20]
   2c560:	mov	r3, #44	; 0x2c
   2c564:	strb	r3, [r0]
   2c568:	mov	r0, r4
   2c56c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c570:	ldr	r0, [r4, #20]
   2c574:	vcvt.f64.f32	d0, s16
   2c578:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2c57c:	ldr	r1, [r4, #20]
   2c580:	add	r0, r1, r0
   2c584:	str	r0, [r4, #20]
   2c588:	vpop	{d8}
   2c58c:	pop	{r4, r5, fp, pc}

0002c590 <flatcc_json_printer_double_struct_field@@Base>:
   2c590:	push	{r4, r5, fp, lr}
   2c594:	add	fp, sp, #8
   2c598:	vpush	{d8}
   2c59c:	mov	r5, r1
   2c5a0:	mov	r4, r0
   2c5a4:	add	r0, r2, r3
   2c5a8:	bl	2b920 <flatcc_json_printer_double_field@@Base+0xc0>
   2c5ac:	vmov.f64	d8, d0
   2c5b0:	ldr	r2, [fp, #12]
   2c5b4:	ldr	r1, [fp, #8]
   2c5b8:	cmp	r5, #0
   2c5bc:	beq	2c5d4 <flatcc_json_printer_double_struct_field@@Base+0x44>
   2c5c0:	ldr	r0, [r4, #20]
   2c5c4:	add	r3, r0, #1
   2c5c8:	str	r3, [r4, #20]
   2c5cc:	mov	r3, #44	; 0x2c
   2c5d0:	strb	r3, [r0]
   2c5d4:	mov	r0, r4
   2c5d8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c5dc:	ldr	r0, [r4, #20]
   2c5e0:	vmov.f64	d0, d8
   2c5e4:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2c5e8:	ldr	r1, [r4, #20]
   2c5ec:	add	r0, r1, r0
   2c5f0:	str	r0, [r4, #20]
   2c5f4:	vpop	{d8}
   2c5f8:	pop	{r4, r5, fp, pc}

0002c5fc <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2c5fc:	push	{r4, r5, r6, r7, fp, lr}
   2c600:	add	fp, sp, #16
   2c604:	mov	r6, r1
   2c608:	mov	r4, r0
   2c60c:	add	r0, r2, r3
   2c610:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2c614:	mov	r5, r0
   2c618:	add	r7, fp, #8
   2c61c:	ldm	r7, {r1, r2, r7}
   2c620:	cmp	r6, #0
   2c624:	beq	2c63c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x40>
   2c628:	ldr	r0, [r4, #20]
   2c62c:	add	r3, r0, #1
   2c630:	str	r3, [r4, #20]
   2c634:	mov	r3, #44	; 0x2c
   2c638:	strb	r3, [r0]
   2c63c:	mov	r0, r4
   2c640:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c644:	ldrb	r0, [r4, #27]
   2c648:	cmp	r0, #0
   2c64c:	beq	2c66c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x70>
   2c650:	ldr	r1, [r4, #20]
   2c654:	mov	r0, r5
   2c658:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2c65c:	ldr	r1, [r4, #20]
   2c660:	add	r0, r1, r0
   2c664:	str	r0, [r4, #20]
   2c668:	pop	{r4, r5, r6, r7, fp, pc}
   2c66c:	mov	r0, r4
   2c670:	mov	r1, r5
   2c674:	mov	r2, r7
   2c678:	pop	{r4, r5, r6, r7, fp, lr}
   2c67c:	bx	r2

0002c680 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2c680:	push	{r4, r5, r6, r7, fp, lr}
   2c684:	add	fp, sp, #16
   2c688:	mov	r6, r1
   2c68c:	mov	r4, r0
   2c690:	add	r0, r2, r3
   2c694:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2c698:	mov	r5, r0
   2c69c:	add	r7, fp, #8
   2c6a0:	ldm	r7, {r1, r2, r7}
   2c6a4:	cmp	r6, #0
   2c6a8:	beq	2c6c0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x40>
   2c6ac:	ldr	r0, [r4, #20]
   2c6b0:	add	r3, r0, #1
   2c6b4:	str	r3, [r4, #20]
   2c6b8:	mov	r3, #44	; 0x2c
   2c6bc:	strb	r3, [r0]
   2c6c0:	mov	r0, r4
   2c6c4:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c6c8:	ldrb	r0, [r4, #27]
   2c6cc:	cmp	r0, #0
   2c6d0:	beq	2c6f0 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x70>
   2c6d4:	ldr	r1, [r4, #20]
   2c6d8:	mov	r0, r5
   2c6dc:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2c6e0:	ldr	r1, [r4, #20]
   2c6e4:	add	r0, r1, r0
   2c6e8:	str	r0, [r4, #20]
   2c6ec:	pop	{r4, r5, r6, r7, fp, pc}
   2c6f0:	mov	r0, r4
   2c6f4:	mov	r1, r5
   2c6f8:	mov	r2, r7
   2c6fc:	pop	{r4, r5, r6, r7, fp, lr}
   2c700:	bx	r2

0002c704 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2c704:	push	{r4, r5, r6, r7, fp, lr}
   2c708:	add	fp, sp, #16
   2c70c:	mov	r6, r1
   2c710:	mov	r4, r0
   2c714:	add	r0, r2, r3
   2c718:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2c71c:	mov	r5, r0
   2c720:	add	r7, fp, #8
   2c724:	ldm	r7, {r1, r2, r7}
   2c728:	cmp	r6, #0
   2c72c:	beq	2c744 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x40>
   2c730:	ldr	r0, [r4, #20]
   2c734:	add	r3, r0, #1
   2c738:	str	r3, [r4, #20]
   2c73c:	mov	r3, #44	; 0x2c
   2c740:	strb	r3, [r0]
   2c744:	mov	r0, r4
   2c748:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c74c:	ldrb	r0, [r4, #27]
   2c750:	cmp	r0, #0
   2c754:	beq	2c774 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x70>
   2c758:	ldr	r1, [r4, #20]
   2c75c:	mov	r0, r5
   2c760:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2c764:	ldr	r1, [r4, #20]
   2c768:	add	r0, r1, r0
   2c76c:	str	r0, [r4, #20]
   2c770:	pop	{r4, r5, r6, r7, fp, pc}
   2c774:	mov	r0, r4
   2c778:	mov	r1, r5
   2c77c:	mov	r2, r7
   2c780:	pop	{r4, r5, r6, r7, fp, lr}
   2c784:	bx	r2

0002c788 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2c788:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c78c:	add	fp, sp, #24
   2c790:	mov	r7, r1
   2c794:	mov	r4, r0
   2c798:	add	r0, r2, r3
   2c79c:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2c7a0:	mov	r6, r0
   2c7a4:	mov	r5, r1
   2c7a8:	add	r8, fp, #8
   2c7ac:	ldm	r8, {r1, r2, r8}
   2c7b0:	cmp	r7, #0
   2c7b4:	beq	2c7cc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   2c7b8:	ldr	r0, [r4, #20]
   2c7bc:	add	r3, r0, #1
   2c7c0:	str	r3, [r4, #20]
   2c7c4:	mov	r3, #44	; 0x2c
   2c7c8:	strb	r3, [r0]
   2c7cc:	mov	r0, r4
   2c7d0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c7d4:	ldrb	r0, [r4, #27]
   2c7d8:	cmp	r0, #0
   2c7dc:	beq	2c800 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x78>
   2c7e0:	ldr	r2, [r4, #20]
   2c7e4:	mov	r0, r6
   2c7e8:	mov	r1, r5
   2c7ec:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2c7f0:	ldr	r1, [r4, #20]
   2c7f4:	add	r0, r1, r0
   2c7f8:	str	r0, [r4, #20]
   2c7fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2c800:	mov	r0, r4
   2c804:	mov	r2, r6
   2c808:	mov	r3, r5
   2c80c:	mov	r1, r8
   2c810:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c814:	bx	r1

0002c818 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2c818:	push	{r4, r5, r6, r7, fp, lr}
   2c81c:	add	fp, sp, #16
   2c820:	mov	r6, r1
   2c824:	mov	r4, r0
   2c828:	add	r0, r2, r3
   2c82c:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2c830:	mov	r5, r0
   2c834:	add	r7, fp, #8
   2c838:	ldm	r7, {r1, r2, r7}
   2c83c:	cmp	r6, #0
   2c840:	beq	2c858 <flatcc_json_printer_int8_enum_struct_field@@Base+0x40>
   2c844:	ldr	r0, [r4, #20]
   2c848:	add	r3, r0, #1
   2c84c:	str	r3, [r4, #20]
   2c850:	mov	r3, #44	; 0x2c
   2c854:	strb	r3, [r0]
   2c858:	mov	r0, r4
   2c85c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c860:	ldrb	r0, [r4, #27]
   2c864:	cmp	r0, #0
   2c868:	beq	2c888 <flatcc_json_printer_int8_enum_struct_field@@Base+0x70>
   2c86c:	ldr	r1, [r4, #20]
   2c870:	mov	r0, r5
   2c874:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2c878:	ldr	r1, [r4, #20]
   2c87c:	add	r0, r1, r0
   2c880:	str	r0, [r4, #20]
   2c884:	pop	{r4, r5, r6, r7, fp, pc}
   2c888:	mov	r0, r4
   2c88c:	mov	r1, r5
   2c890:	mov	r2, r7
   2c894:	pop	{r4, r5, r6, r7, fp, lr}
   2c898:	bx	r2

0002c89c <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2c89c:	push	{r4, r5, r6, r7, fp, lr}
   2c8a0:	add	fp, sp, #16
   2c8a4:	mov	r6, r1
   2c8a8:	mov	r4, r0
   2c8ac:	add	r0, r2, r3
   2c8b0:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2c8b4:	mov	r5, r0
   2c8b8:	add	r7, fp, #8
   2c8bc:	ldm	r7, {r1, r2, r7}
   2c8c0:	cmp	r6, #0
   2c8c4:	beq	2c8dc <flatcc_json_printer_int16_enum_struct_field@@Base+0x40>
   2c8c8:	ldr	r0, [r4, #20]
   2c8cc:	add	r3, r0, #1
   2c8d0:	str	r3, [r4, #20]
   2c8d4:	mov	r3, #44	; 0x2c
   2c8d8:	strb	r3, [r0]
   2c8dc:	mov	r0, r4
   2c8e0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c8e4:	ldrb	r0, [r4, #27]
   2c8e8:	cmp	r0, #0
   2c8ec:	beq	2c90c <flatcc_json_printer_int16_enum_struct_field@@Base+0x70>
   2c8f0:	ldr	r1, [r4, #20]
   2c8f4:	mov	r0, r5
   2c8f8:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2c8fc:	ldr	r1, [r4, #20]
   2c900:	add	r0, r1, r0
   2c904:	str	r0, [r4, #20]
   2c908:	pop	{r4, r5, r6, r7, fp, pc}
   2c90c:	mov	r0, r4
   2c910:	mov	r1, r5
   2c914:	mov	r2, r7
   2c918:	pop	{r4, r5, r6, r7, fp, lr}
   2c91c:	bx	r2

0002c920 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2c920:	push	{r4, r5, r6, r7, fp, lr}
   2c924:	add	fp, sp, #16
   2c928:	mov	r6, r1
   2c92c:	mov	r4, r0
   2c930:	add	r0, r2, r3
   2c934:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2c938:	mov	r5, r0
   2c93c:	add	r7, fp, #8
   2c940:	ldm	r7, {r1, r2, r7}
   2c944:	cmp	r6, #0
   2c948:	beq	2c960 <flatcc_json_printer_int32_enum_struct_field@@Base+0x40>
   2c94c:	ldr	r0, [r4, #20]
   2c950:	add	r3, r0, #1
   2c954:	str	r3, [r4, #20]
   2c958:	mov	r3, #44	; 0x2c
   2c95c:	strb	r3, [r0]
   2c960:	mov	r0, r4
   2c964:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c968:	ldrb	r0, [r4, #27]
   2c96c:	cmp	r0, #0
   2c970:	beq	2c990 <flatcc_json_printer_int32_enum_struct_field@@Base+0x70>
   2c974:	ldr	r1, [r4, #20]
   2c978:	mov	r0, r5
   2c97c:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2c980:	ldr	r1, [r4, #20]
   2c984:	add	r0, r1, r0
   2c988:	str	r0, [r4, #20]
   2c98c:	pop	{r4, r5, r6, r7, fp, pc}
   2c990:	mov	r0, r4
   2c994:	mov	r1, r5
   2c998:	mov	r2, r7
   2c99c:	pop	{r4, r5, r6, r7, fp, lr}
   2c9a0:	bx	r2

0002c9a4 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2c9a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2c9a8:	add	fp, sp, #24
   2c9ac:	mov	r7, r1
   2c9b0:	mov	r4, r0
   2c9b4:	add	r0, r2, r3
   2c9b8:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2c9bc:	mov	r6, r0
   2c9c0:	mov	r5, r1
   2c9c4:	add	r8, fp, #8
   2c9c8:	ldm	r8, {r1, r2, r8}
   2c9cc:	cmp	r7, #0
   2c9d0:	beq	2c9e8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   2c9d4:	ldr	r0, [r4, #20]
   2c9d8:	add	r3, r0, #1
   2c9dc:	str	r3, [r4, #20]
   2c9e0:	mov	r3, #44	; 0x2c
   2c9e4:	strb	r3, [r0]
   2c9e8:	mov	r0, r4
   2c9ec:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2c9f0:	ldrb	r0, [r4, #27]
   2c9f4:	cmp	r0, #0
   2c9f8:	beq	2ca1c <flatcc_json_printer_int64_enum_struct_field@@Base+0x78>
   2c9fc:	ldr	r2, [r4, #20]
   2ca00:	mov	r0, r6
   2ca04:	mov	r1, r5
   2ca08:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2ca0c:	ldr	r1, [r4, #20]
   2ca10:	add	r0, r1, r0
   2ca14:	str	r0, [r4, #20]
   2ca18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ca1c:	mov	r0, r4
   2ca20:	mov	r2, r6
   2ca24:	mov	r3, r5
   2ca28:	mov	r1, r8
   2ca2c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ca30:	bx	r1

0002ca34 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2ca34:	push	{r4, r5, r6, r7, fp, lr}
   2ca38:	add	fp, sp, #16
   2ca3c:	mov	r6, r1
   2ca40:	mov	r4, r0
   2ca44:	add	r0, r2, r3
   2ca48:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2ca4c:	mov	r5, r0
   2ca50:	add	r7, fp, #8
   2ca54:	ldm	r7, {r1, r2, r7}
   2ca58:	cmp	r6, #0
   2ca5c:	beq	2ca74 <flatcc_json_printer_bool_enum_struct_field@@Base+0x40>
   2ca60:	ldr	r0, [r4, #20]
   2ca64:	add	r3, r0, #1
   2ca68:	str	r3, [r4, #20]
   2ca6c:	mov	r3, #44	; 0x2c
   2ca70:	strb	r3, [r0]
   2ca74:	mov	r0, r4
   2ca78:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2ca7c:	ldrb	r0, [r4, #27]
   2ca80:	cmp	r0, #0
   2ca84:	beq	2caa4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x70>
   2ca88:	ldr	r1, [r4, #20]
   2ca8c:	mov	r0, r5
   2ca90:	bl	2b758 <flatcc_json_printer_bool_field@@Base+0xb8>
   2ca94:	ldr	r1, [r4, #20]
   2ca98:	add	r0, r1, r0
   2ca9c:	str	r0, [r4, #20]
   2caa0:	pop	{r4, r5, r6, r7, fp, pc}
   2caa4:	mov	r0, r4
   2caa8:	mov	r1, r5
   2caac:	mov	r2, r7
   2cab0:	pop	{r4, r5, r6, r7, fp, lr}
   2cab4:	bx	r2

0002cab8 <flatcc_json_printer_utype_vector_field@@Base>:
   2cab8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cabc:	add	fp, sp, #24
   2cac0:	mov	r7, r3
   2cac4:	mov	r5, r1
   2cac8:	mov	r4, r0
   2cacc:	mov	r0, r1
   2cad0:	mov	r1, r2
   2cad4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2cad8:	cmp	r0, #0
   2cadc:	beq	2cc74 <flatcc_json_printer_utype_vector_field@@Base+0x1bc>
   2cae0:	ldr	r8, [fp, #8]
   2cae4:	ldr	r1, [r5, #16]
   2cae8:	add	r2, r1, #1
   2caec:	str	r2, [r5, #16]
   2caf0:	cmp	r1, #0
   2caf4:	beq	2cb0c <flatcc_json_printer_utype_vector_field@@Base+0x54>
   2caf8:	ldr	r1, [r4, #20]
   2cafc:	add	r2, r1, #1
   2cb00:	str	r2, [r4, #20]
   2cb04:	mov	r2, #44	; 0x2c
   2cb08:	strb	r2, [r1]
   2cb0c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2cb10:	mov	r5, r0
   2cb14:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cb18:	mov	r6, r0
   2cb1c:	mov	r0, r4
   2cb20:	mov	r1, r7
   2cb24:	mov	r2, r8
   2cb28:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2cb2c:	ldr	r0, [r4, #20]
   2cb30:	ldr	r1, [r4, #32]
   2cb34:	add	r1, r1, #1
   2cb38:	str	r1, [r4, #32]
   2cb3c:	add	r1, r0, #1
   2cb40:	str	r1, [r4, #20]
   2cb44:	mov	r1, #91	; 0x5b
   2cb48:	strb	r1, [r0]
   2cb4c:	cmp	r6, #0
   2cb50:	beq	2cc2c <flatcc_json_printer_utype_vector_field@@Base+0x174>
   2cb54:	add	r7, r5, #4
   2cb58:	ldrb	r0, [r4, #25]
   2cb5c:	cmp	r0, #0
   2cb60:	beq	2cb84 <flatcc_json_printer_utype_vector_field@@Base+0xcc>
   2cb64:	ldr	r0, [r4, #20]
   2cb68:	add	r1, r0, #1
   2cb6c:	str	r1, [r4, #20]
   2cb70:	mov	r1, #10
   2cb74:	strb	r1, [r0]
   2cb78:	mov	r0, r4
   2cb7c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cb80:	b	2cb8c <flatcc_json_printer_utype_vector_field@@Base+0xd4>
   2cb84:	mov	r0, r4
   2cb88:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2cb8c:	mov	r0, r7
   2cb90:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2cb94:	ldr	r1, [r4, #20]
   2cb98:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2cb9c:	ldr	r1, [r4, #20]
   2cba0:	add	r0, r1, r0
   2cba4:	str	r0, [r4, #20]
   2cba8:	subs	r6, r6, #1
   2cbac:	beq	2cc2c <flatcc_json_printer_utype_vector_field@@Base+0x174>
   2cbb0:	add	r5, r5, #5
   2cbb4:	mov	r7, #44	; 0x2c
   2cbb8:	mov	r8, #10
   2cbbc:	b	2cbf0 <flatcc_json_printer_utype_vector_field@@Base+0x138>
   2cbc0:	mov	r0, r4
   2cbc4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2cbc8:	mov	r0, r5
   2cbcc:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2cbd0:	ldr	r1, [r4, #20]
   2cbd4:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2cbd8:	ldr	r1, [r4, #20]
   2cbdc:	add	r0, r1, r0
   2cbe0:	str	r0, [r4, #20]
   2cbe4:	add	r5, r5, #1
   2cbe8:	cmp	r6, #0
   2cbec:	beq	2cc2c <flatcc_json_printer_utype_vector_field@@Base+0x174>
   2cbf0:	ldr	r0, [r4, #20]
   2cbf4:	add	r1, r0, #1
   2cbf8:	str	r1, [r4, #20]
   2cbfc:	strb	r7, [r0]
   2cc00:	sub	r6, r6, #1
   2cc04:	ldrb	r0, [r4, #25]
   2cc08:	cmp	r0, #0
   2cc0c:	beq	2cbc0 <flatcc_json_printer_utype_vector_field@@Base+0x108>
   2cc10:	ldr	r0, [r4, #20]
   2cc14:	add	r1, r0, #1
   2cc18:	str	r1, [r4, #20]
   2cc1c:	strb	r8, [r0]
   2cc20:	mov	r0, r4
   2cc24:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cc28:	b	2cbc8 <flatcc_json_printer_utype_vector_field@@Base+0x110>
   2cc2c:	ldrb	r0, [r4, #25]
   2cc30:	cmp	r0, #0
   2cc34:	beq	2cc60 <flatcc_json_printer_utype_vector_field@@Base+0x1a8>
   2cc38:	ldr	r0, [r4, #20]
   2cc3c:	add	r1, r0, #1
   2cc40:	str	r1, [r4, #20]
   2cc44:	mov	r1, #10
   2cc48:	strb	r1, [r0]
   2cc4c:	ldr	r0, [r4, #32]
   2cc50:	sub	r0, r0, #1
   2cc54:	str	r0, [r4, #32]
   2cc58:	mov	r0, r4
   2cc5c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cc60:	ldr	r0, [r4, #20]
   2cc64:	add	r1, r0, #1
   2cc68:	str	r1, [r4, #20]
   2cc6c:	mov	r1, #93	; 0x5d
   2cc70:	strb	r1, [r0]
   2cc74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cc78:	ldr	r0, [r0]
   2cc7c:	b	316fc <flatcc_json_printer_clear@@Base+0xe70>
   2cc80:	ldrb	r0, [r0]
   2cc84:	b	31700 <flatcc_json_printer_clear@@Base+0xe74>

0002cc88 <flatcc_json_printer_uint8_vector_field@@Base>:
   2cc88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cc8c:	add	fp, sp, #24
   2cc90:	mov	r7, r3
   2cc94:	mov	r5, r1
   2cc98:	mov	r4, r0
   2cc9c:	mov	r0, r1
   2cca0:	mov	r1, r2
   2cca4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2cca8:	cmp	r0, #0
   2ccac:	beq	2ce44 <flatcc_json_printer_uint8_vector_field@@Base+0x1bc>
   2ccb0:	ldr	r8, [fp, #8]
   2ccb4:	ldr	r1, [r5, #16]
   2ccb8:	add	r2, r1, #1
   2ccbc:	str	r2, [r5, #16]
   2ccc0:	cmp	r1, #0
   2ccc4:	beq	2ccdc <flatcc_json_printer_uint8_vector_field@@Base+0x54>
   2ccc8:	ldr	r1, [r4, #20]
   2cccc:	add	r2, r1, #1
   2ccd0:	str	r2, [r4, #20]
   2ccd4:	mov	r2, #44	; 0x2c
   2ccd8:	strb	r2, [r1]
   2ccdc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2cce0:	mov	r5, r0
   2cce4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cce8:	mov	r6, r0
   2ccec:	mov	r0, r4
   2ccf0:	mov	r1, r7
   2ccf4:	mov	r2, r8
   2ccf8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2ccfc:	ldr	r0, [r4, #20]
   2cd00:	ldr	r1, [r4, #32]
   2cd04:	add	r1, r1, #1
   2cd08:	str	r1, [r4, #32]
   2cd0c:	add	r1, r0, #1
   2cd10:	str	r1, [r4, #20]
   2cd14:	mov	r1, #91	; 0x5b
   2cd18:	strb	r1, [r0]
   2cd1c:	cmp	r6, #0
   2cd20:	beq	2cdfc <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   2cd24:	add	r7, r5, #4
   2cd28:	ldrb	r0, [r4, #25]
   2cd2c:	cmp	r0, #0
   2cd30:	beq	2cd54 <flatcc_json_printer_uint8_vector_field@@Base+0xcc>
   2cd34:	ldr	r0, [r4, #20]
   2cd38:	add	r1, r0, #1
   2cd3c:	str	r1, [r4, #20]
   2cd40:	mov	r1, #10
   2cd44:	strb	r1, [r0]
   2cd48:	mov	r0, r4
   2cd4c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cd50:	b	2cd5c <flatcc_json_printer_uint8_vector_field@@Base+0xd4>
   2cd54:	mov	r0, r4
   2cd58:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2cd5c:	mov	r0, r7
   2cd60:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2cd64:	ldr	r1, [r4, #20]
   2cd68:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2cd6c:	ldr	r1, [r4, #20]
   2cd70:	add	r0, r1, r0
   2cd74:	str	r0, [r4, #20]
   2cd78:	subs	r6, r6, #1
   2cd7c:	beq	2cdfc <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   2cd80:	add	r5, r5, #5
   2cd84:	mov	r7, #44	; 0x2c
   2cd88:	mov	r8, #10
   2cd8c:	b	2cdc0 <flatcc_json_printer_uint8_vector_field@@Base+0x138>
   2cd90:	mov	r0, r4
   2cd94:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2cd98:	mov	r0, r5
   2cd9c:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2cda0:	ldr	r1, [r4, #20]
   2cda4:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2cda8:	ldr	r1, [r4, #20]
   2cdac:	add	r0, r1, r0
   2cdb0:	str	r0, [r4, #20]
   2cdb4:	add	r5, r5, #1
   2cdb8:	cmp	r6, #0
   2cdbc:	beq	2cdfc <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   2cdc0:	ldr	r0, [r4, #20]
   2cdc4:	add	r1, r0, #1
   2cdc8:	str	r1, [r4, #20]
   2cdcc:	strb	r7, [r0]
   2cdd0:	sub	r6, r6, #1
   2cdd4:	ldrb	r0, [r4, #25]
   2cdd8:	cmp	r0, #0
   2cddc:	beq	2cd90 <flatcc_json_printer_uint8_vector_field@@Base+0x108>
   2cde0:	ldr	r0, [r4, #20]
   2cde4:	add	r1, r0, #1
   2cde8:	str	r1, [r4, #20]
   2cdec:	strb	r8, [r0]
   2cdf0:	mov	r0, r4
   2cdf4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cdf8:	b	2cd98 <flatcc_json_printer_uint8_vector_field@@Base+0x110>
   2cdfc:	ldrb	r0, [r4, #25]
   2ce00:	cmp	r0, #0
   2ce04:	beq	2ce30 <flatcc_json_printer_uint8_vector_field@@Base+0x1a8>
   2ce08:	ldr	r0, [r4, #20]
   2ce0c:	add	r1, r0, #1
   2ce10:	str	r1, [r4, #20]
   2ce14:	mov	r1, #10
   2ce18:	strb	r1, [r0]
   2ce1c:	ldr	r0, [r4, #32]
   2ce20:	sub	r0, r0, #1
   2ce24:	str	r0, [r4, #32]
   2ce28:	mov	r0, r4
   2ce2c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ce30:	ldr	r0, [r4, #20]
   2ce34:	add	r1, r0, #1
   2ce38:	str	r1, [r4, #20]
   2ce3c:	mov	r1, #93	; 0x5d
   2ce40:	strb	r1, [r0]
   2ce44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002ce48 <flatcc_json_printer_uint16_vector_field@@Base>:
   2ce48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ce4c:	add	fp, sp, #24
   2ce50:	mov	r7, r3
   2ce54:	mov	r5, r1
   2ce58:	mov	r4, r0
   2ce5c:	mov	r0, r1
   2ce60:	mov	r1, r2
   2ce64:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2ce68:	cmp	r0, #0
   2ce6c:	beq	2d004 <flatcc_json_printer_uint16_vector_field@@Base+0x1bc>
   2ce70:	ldr	r8, [fp, #8]
   2ce74:	ldr	r1, [r5, #16]
   2ce78:	add	r2, r1, #1
   2ce7c:	str	r2, [r5, #16]
   2ce80:	cmp	r1, #0
   2ce84:	beq	2ce9c <flatcc_json_printer_uint16_vector_field@@Base+0x54>
   2ce88:	ldr	r1, [r4, #20]
   2ce8c:	add	r2, r1, #1
   2ce90:	str	r2, [r4, #20]
   2ce94:	mov	r2, #44	; 0x2c
   2ce98:	strb	r2, [r1]
   2ce9c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2cea0:	mov	r5, r0
   2cea4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2cea8:	mov	r6, r0
   2ceac:	mov	r0, r4
   2ceb0:	mov	r1, r7
   2ceb4:	mov	r2, r8
   2ceb8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2cebc:	ldr	r0, [r4, #20]
   2cec0:	ldr	r1, [r4, #32]
   2cec4:	add	r1, r1, #1
   2cec8:	str	r1, [r4, #32]
   2cecc:	add	r1, r0, #1
   2ced0:	str	r1, [r4, #20]
   2ced4:	mov	r1, #91	; 0x5b
   2ced8:	strb	r1, [r0]
   2cedc:	cmp	r6, #0
   2cee0:	beq	2cfbc <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   2cee4:	add	r7, r5, #4
   2cee8:	ldrb	r0, [r4, #25]
   2ceec:	cmp	r0, #0
   2cef0:	beq	2cf14 <flatcc_json_printer_uint16_vector_field@@Base+0xcc>
   2cef4:	ldr	r0, [r4, #20]
   2cef8:	add	r1, r0, #1
   2cefc:	str	r1, [r4, #20]
   2cf00:	mov	r1, #10
   2cf04:	strb	r1, [r0]
   2cf08:	mov	r0, r4
   2cf0c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cf10:	b	2cf1c <flatcc_json_printer_uint16_vector_field@@Base+0xd4>
   2cf14:	mov	r0, r4
   2cf18:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2cf1c:	mov	r0, r7
   2cf20:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2cf24:	ldr	r1, [r4, #20]
   2cf28:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2cf2c:	ldr	r1, [r4, #20]
   2cf30:	add	r0, r1, r0
   2cf34:	str	r0, [r4, #20]
   2cf38:	subs	r6, r6, #1
   2cf3c:	beq	2cfbc <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   2cf40:	add	r5, r5, #6
   2cf44:	mov	r7, #44	; 0x2c
   2cf48:	mov	r8, #10
   2cf4c:	b	2cf80 <flatcc_json_printer_uint16_vector_field@@Base+0x138>
   2cf50:	mov	r0, r4
   2cf54:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2cf58:	mov	r0, r5
   2cf5c:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2cf60:	ldr	r1, [r4, #20]
   2cf64:	bl	2a0c4 <flatcc_json_printer_uint16@@Base+0x2c>
   2cf68:	ldr	r1, [r4, #20]
   2cf6c:	add	r0, r1, r0
   2cf70:	str	r0, [r4, #20]
   2cf74:	add	r5, r5, #2
   2cf78:	cmp	r6, #0
   2cf7c:	beq	2cfbc <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   2cf80:	ldr	r0, [r4, #20]
   2cf84:	add	r1, r0, #1
   2cf88:	str	r1, [r4, #20]
   2cf8c:	strb	r7, [r0]
   2cf90:	sub	r6, r6, #1
   2cf94:	ldrb	r0, [r4, #25]
   2cf98:	cmp	r0, #0
   2cf9c:	beq	2cf50 <flatcc_json_printer_uint16_vector_field@@Base+0x108>
   2cfa0:	ldr	r0, [r4, #20]
   2cfa4:	add	r1, r0, #1
   2cfa8:	str	r1, [r4, #20]
   2cfac:	strb	r8, [r0]
   2cfb0:	mov	r0, r4
   2cfb4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cfb8:	b	2cf58 <flatcc_json_printer_uint16_vector_field@@Base+0x110>
   2cfbc:	ldrb	r0, [r4, #25]
   2cfc0:	cmp	r0, #0
   2cfc4:	beq	2cff0 <flatcc_json_printer_uint16_vector_field@@Base+0x1a8>
   2cfc8:	ldr	r0, [r4, #20]
   2cfcc:	add	r1, r0, #1
   2cfd0:	str	r1, [r4, #20]
   2cfd4:	mov	r1, #10
   2cfd8:	strb	r1, [r0]
   2cfdc:	ldr	r0, [r4, #32]
   2cfe0:	sub	r0, r0, #1
   2cfe4:	str	r0, [r4, #32]
   2cfe8:	mov	r0, r4
   2cfec:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2cff0:	ldr	r0, [r4, #20]
   2cff4:	add	r1, r0, #1
   2cff8:	str	r1, [r4, #20]
   2cffc:	mov	r1, #93	; 0x5d
   2d000:	strb	r1, [r0]
   2d004:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d008 <flatcc_json_printer_uint32_vector_field@@Base>:
   2d008:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d00c:	add	fp, sp, #24
   2d010:	mov	r7, r3
   2d014:	mov	r5, r1
   2d018:	mov	r4, r0
   2d01c:	mov	r0, r1
   2d020:	mov	r1, r2
   2d024:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2d028:	cmp	r0, #0
   2d02c:	beq	2d1c4 <flatcc_json_printer_uint32_vector_field@@Base+0x1bc>
   2d030:	ldr	r8, [fp, #8]
   2d034:	ldr	r1, [r5, #16]
   2d038:	add	r2, r1, #1
   2d03c:	str	r2, [r5, #16]
   2d040:	cmp	r1, #0
   2d044:	beq	2d05c <flatcc_json_printer_uint32_vector_field@@Base+0x54>
   2d048:	ldr	r1, [r4, #20]
   2d04c:	add	r2, r1, #1
   2d050:	str	r2, [r4, #20]
   2d054:	mov	r2, #44	; 0x2c
   2d058:	strb	r2, [r1]
   2d05c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2d060:	mov	r5, r0
   2d064:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d068:	mov	r6, r0
   2d06c:	mov	r0, r4
   2d070:	mov	r1, r7
   2d074:	mov	r2, r8
   2d078:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2d07c:	ldr	r0, [r4, #20]
   2d080:	ldr	r1, [r4, #32]
   2d084:	add	r1, r1, #1
   2d088:	str	r1, [r4, #32]
   2d08c:	add	r1, r0, #1
   2d090:	str	r1, [r4, #20]
   2d094:	mov	r1, #91	; 0x5b
   2d098:	strb	r1, [r0]
   2d09c:	cmp	r6, #0
   2d0a0:	beq	2d17c <flatcc_json_printer_uint32_vector_field@@Base+0x174>
   2d0a4:	add	r7, r5, #4
   2d0a8:	ldrb	r0, [r4, #25]
   2d0ac:	cmp	r0, #0
   2d0b0:	beq	2d0d4 <flatcc_json_printer_uint32_vector_field@@Base+0xcc>
   2d0b4:	ldr	r0, [r4, #20]
   2d0b8:	add	r1, r0, #1
   2d0bc:	str	r1, [r4, #20]
   2d0c0:	mov	r1, #10
   2d0c4:	strb	r1, [r0]
   2d0c8:	mov	r0, r4
   2d0cc:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d0d0:	b	2d0dc <flatcc_json_printer_uint32_vector_field@@Base+0xd4>
   2d0d4:	mov	r0, r4
   2d0d8:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d0dc:	mov	r0, r7
   2d0e0:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2d0e4:	ldr	r1, [r4, #20]
   2d0e8:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2d0ec:	ldr	r1, [r4, #20]
   2d0f0:	add	r0, r1, r0
   2d0f4:	str	r0, [r4, #20]
   2d0f8:	subs	r6, r6, #1
   2d0fc:	beq	2d17c <flatcc_json_printer_uint32_vector_field@@Base+0x174>
   2d100:	add	r5, r5, #8
   2d104:	mov	r7, #44	; 0x2c
   2d108:	mov	r8, #10
   2d10c:	b	2d140 <flatcc_json_printer_uint32_vector_field@@Base+0x138>
   2d110:	mov	r0, r4
   2d114:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d118:	mov	r0, r5
   2d11c:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2d120:	ldr	r1, [r4, #20]
   2d124:	bl	2a260 <flatcc_json_printer_uint32@@Base+0x2c>
   2d128:	ldr	r1, [r4, #20]
   2d12c:	add	r0, r1, r0
   2d130:	str	r0, [r4, #20]
   2d134:	add	r5, r5, #4
   2d138:	cmp	r6, #0
   2d13c:	beq	2d17c <flatcc_json_printer_uint32_vector_field@@Base+0x174>
   2d140:	ldr	r0, [r4, #20]
   2d144:	add	r1, r0, #1
   2d148:	str	r1, [r4, #20]
   2d14c:	strb	r7, [r0]
   2d150:	sub	r6, r6, #1
   2d154:	ldrb	r0, [r4, #25]
   2d158:	cmp	r0, #0
   2d15c:	beq	2d110 <flatcc_json_printer_uint32_vector_field@@Base+0x108>
   2d160:	ldr	r0, [r4, #20]
   2d164:	add	r1, r0, #1
   2d168:	str	r1, [r4, #20]
   2d16c:	strb	r8, [r0]
   2d170:	mov	r0, r4
   2d174:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d178:	b	2d118 <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   2d17c:	ldrb	r0, [r4, #25]
   2d180:	cmp	r0, #0
   2d184:	beq	2d1b0 <flatcc_json_printer_uint32_vector_field@@Base+0x1a8>
   2d188:	ldr	r0, [r4, #20]
   2d18c:	add	r1, r0, #1
   2d190:	str	r1, [r4, #20]
   2d194:	mov	r1, #10
   2d198:	strb	r1, [r0]
   2d19c:	ldr	r0, [r4, #32]
   2d1a0:	sub	r0, r0, #1
   2d1a4:	str	r0, [r4, #32]
   2d1a8:	mov	r0, r4
   2d1ac:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d1b0:	ldr	r0, [r4, #20]
   2d1b4:	add	r1, r0, #1
   2d1b8:	str	r1, [r4, #20]
   2d1bc:	mov	r1, #93	; 0x5d
   2d1c0:	strb	r1, [r0]
   2d1c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d1c8 <flatcc_json_printer_uint64_vector_field@@Base>:
   2d1c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d1cc:	add	fp, sp, #24
   2d1d0:	mov	r7, r3
   2d1d4:	mov	r5, r1
   2d1d8:	mov	r4, r0
   2d1dc:	mov	r0, r1
   2d1e0:	mov	r1, r2
   2d1e4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2d1e8:	cmp	r0, #0
   2d1ec:	beq	2d384 <flatcc_json_printer_uint64_vector_field@@Base+0x1bc>
   2d1f0:	ldr	r8, [fp, #8]
   2d1f4:	ldr	r1, [r5, #16]
   2d1f8:	add	r2, r1, #1
   2d1fc:	str	r2, [r5, #16]
   2d200:	cmp	r1, #0
   2d204:	beq	2d21c <flatcc_json_printer_uint64_vector_field@@Base+0x54>
   2d208:	ldr	r1, [r4, #20]
   2d20c:	add	r2, r1, #1
   2d210:	str	r2, [r4, #20]
   2d214:	mov	r2, #44	; 0x2c
   2d218:	strb	r2, [r1]
   2d21c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2d220:	mov	r5, r0
   2d224:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d228:	mov	r6, r0
   2d22c:	mov	r0, r4
   2d230:	mov	r1, r7
   2d234:	mov	r2, r8
   2d238:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2d23c:	ldr	r0, [r4, #20]
   2d240:	ldr	r1, [r4, #32]
   2d244:	add	r1, r1, #1
   2d248:	str	r1, [r4, #32]
   2d24c:	add	r1, r0, #1
   2d250:	str	r1, [r4, #20]
   2d254:	mov	r1, #91	; 0x5b
   2d258:	strb	r1, [r0]
   2d25c:	cmp	r6, #0
   2d260:	beq	2d33c <flatcc_json_printer_uint64_vector_field@@Base+0x174>
   2d264:	add	r7, r5, #4
   2d268:	ldrb	r0, [r4, #25]
   2d26c:	cmp	r0, #0
   2d270:	beq	2d294 <flatcc_json_printer_uint64_vector_field@@Base+0xcc>
   2d274:	ldr	r0, [r4, #20]
   2d278:	add	r1, r0, #1
   2d27c:	str	r1, [r4, #20]
   2d280:	mov	r1, #10
   2d284:	strb	r1, [r0]
   2d288:	mov	r0, r4
   2d28c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d290:	b	2d29c <flatcc_json_printer_uint64_vector_field@@Base+0xd4>
   2d294:	mov	r0, r4
   2d298:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d29c:	mov	r0, r7
   2d2a0:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2d2a4:	ldr	r2, [r4, #20]
   2d2a8:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2d2ac:	ldr	r1, [r4, #20]
   2d2b0:	add	r0, r1, r0
   2d2b4:	str	r0, [r4, #20]
   2d2b8:	subs	r6, r6, #1
   2d2bc:	beq	2d33c <flatcc_json_printer_uint64_vector_field@@Base+0x174>
   2d2c0:	add	r5, r5, #12
   2d2c4:	mov	r7, #44	; 0x2c
   2d2c8:	mov	r8, #10
   2d2cc:	b	2d300 <flatcc_json_printer_uint64_vector_field@@Base+0x138>
   2d2d0:	mov	r0, r4
   2d2d4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d2d8:	mov	r0, r5
   2d2dc:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2d2e0:	ldr	r2, [r4, #20]
   2d2e4:	bl	2a588 <flatcc_json_printer_uint64@@Base+0x30>
   2d2e8:	ldr	r1, [r4, #20]
   2d2ec:	add	r0, r1, r0
   2d2f0:	str	r0, [r4, #20]
   2d2f4:	add	r5, r5, #8
   2d2f8:	cmp	r6, #0
   2d2fc:	beq	2d33c <flatcc_json_printer_uint64_vector_field@@Base+0x174>
   2d300:	ldr	r0, [r4, #20]
   2d304:	add	r1, r0, #1
   2d308:	str	r1, [r4, #20]
   2d30c:	strb	r7, [r0]
   2d310:	sub	r6, r6, #1
   2d314:	ldrb	r0, [r4, #25]
   2d318:	cmp	r0, #0
   2d31c:	beq	2d2d0 <flatcc_json_printer_uint64_vector_field@@Base+0x108>
   2d320:	ldr	r0, [r4, #20]
   2d324:	add	r1, r0, #1
   2d328:	str	r1, [r4, #20]
   2d32c:	strb	r8, [r0]
   2d330:	mov	r0, r4
   2d334:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d338:	b	2d2d8 <flatcc_json_printer_uint64_vector_field@@Base+0x110>
   2d33c:	ldrb	r0, [r4, #25]
   2d340:	cmp	r0, #0
   2d344:	beq	2d370 <flatcc_json_printer_uint64_vector_field@@Base+0x1a8>
   2d348:	ldr	r0, [r4, #20]
   2d34c:	add	r1, r0, #1
   2d350:	str	r1, [r4, #20]
   2d354:	mov	r1, #10
   2d358:	strb	r1, [r0]
   2d35c:	ldr	r0, [r4, #32]
   2d360:	sub	r0, r0, #1
   2d364:	str	r0, [r4, #32]
   2d368:	mov	r0, r4
   2d36c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d370:	ldr	r0, [r4, #20]
   2d374:	add	r1, r0, #1
   2d378:	str	r1, [r4, #20]
   2d37c:	mov	r1, #93	; 0x5d
   2d380:	strb	r1, [r0]
   2d384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d388 <flatcc_json_printer_int8_vector_field@@Base>:
   2d388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d38c:	add	fp, sp, #24
   2d390:	mov	r7, r3
   2d394:	mov	r5, r1
   2d398:	mov	r4, r0
   2d39c:	mov	r0, r1
   2d3a0:	mov	r1, r2
   2d3a4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2d3a8:	cmp	r0, #0
   2d3ac:	beq	2d544 <flatcc_json_printer_int8_vector_field@@Base+0x1bc>
   2d3b0:	ldr	r8, [fp, #8]
   2d3b4:	ldr	r1, [r5, #16]
   2d3b8:	add	r2, r1, #1
   2d3bc:	str	r2, [r5, #16]
   2d3c0:	cmp	r1, #0
   2d3c4:	beq	2d3dc <flatcc_json_printer_int8_vector_field@@Base+0x54>
   2d3c8:	ldr	r1, [r4, #20]
   2d3cc:	add	r2, r1, #1
   2d3d0:	str	r2, [r4, #20]
   2d3d4:	mov	r2, #44	; 0x2c
   2d3d8:	strb	r2, [r1]
   2d3dc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2d3e0:	mov	r5, r0
   2d3e4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d3e8:	mov	r6, r0
   2d3ec:	mov	r0, r4
   2d3f0:	mov	r1, r7
   2d3f4:	mov	r2, r8
   2d3f8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2d3fc:	ldr	r0, [r4, #20]
   2d400:	ldr	r1, [r4, #32]
   2d404:	add	r1, r1, #1
   2d408:	str	r1, [r4, #32]
   2d40c:	add	r1, r0, #1
   2d410:	str	r1, [r4, #20]
   2d414:	mov	r1, #91	; 0x5b
   2d418:	strb	r1, [r0]
   2d41c:	cmp	r6, #0
   2d420:	beq	2d4fc <flatcc_json_printer_int8_vector_field@@Base+0x174>
   2d424:	add	r7, r5, #4
   2d428:	ldrb	r0, [r4, #25]
   2d42c:	cmp	r0, #0
   2d430:	beq	2d454 <flatcc_json_printer_int8_vector_field@@Base+0xcc>
   2d434:	ldr	r0, [r4, #20]
   2d438:	add	r1, r0, #1
   2d43c:	str	r1, [r4, #20]
   2d440:	mov	r1, #10
   2d444:	strb	r1, [r0]
   2d448:	mov	r0, r4
   2d44c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d450:	b	2d45c <flatcc_json_printer_int8_vector_field@@Base+0xd4>
   2d454:	mov	r0, r4
   2d458:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d45c:	mov	r0, r7
   2d460:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2d464:	ldr	r1, [r4, #20]
   2d468:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2d46c:	ldr	r1, [r4, #20]
   2d470:	add	r0, r1, r0
   2d474:	str	r0, [r4, #20]
   2d478:	subs	r6, r6, #1
   2d47c:	beq	2d4fc <flatcc_json_printer_int8_vector_field@@Base+0x174>
   2d480:	add	r5, r5, #5
   2d484:	mov	r7, #44	; 0x2c
   2d488:	mov	r8, #10
   2d48c:	b	2d4c0 <flatcc_json_printer_int8_vector_field@@Base+0x138>
   2d490:	mov	r0, r4
   2d494:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d498:	mov	r0, r5
   2d49c:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2d4a0:	ldr	r1, [r4, #20]
   2d4a4:	bl	2aa90 <flatcc_json_printer_int8@@Base+0x2c>
   2d4a8:	ldr	r1, [r4, #20]
   2d4ac:	add	r0, r1, r0
   2d4b0:	str	r0, [r4, #20]
   2d4b4:	add	r5, r5, #1
   2d4b8:	cmp	r6, #0
   2d4bc:	beq	2d4fc <flatcc_json_printer_int8_vector_field@@Base+0x174>
   2d4c0:	ldr	r0, [r4, #20]
   2d4c4:	add	r1, r0, #1
   2d4c8:	str	r1, [r4, #20]
   2d4cc:	strb	r7, [r0]
   2d4d0:	sub	r6, r6, #1
   2d4d4:	ldrb	r0, [r4, #25]
   2d4d8:	cmp	r0, #0
   2d4dc:	beq	2d490 <flatcc_json_printer_int8_vector_field@@Base+0x108>
   2d4e0:	ldr	r0, [r4, #20]
   2d4e4:	add	r1, r0, #1
   2d4e8:	str	r1, [r4, #20]
   2d4ec:	strb	r8, [r0]
   2d4f0:	mov	r0, r4
   2d4f4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d4f8:	b	2d498 <flatcc_json_printer_int8_vector_field@@Base+0x110>
   2d4fc:	ldrb	r0, [r4, #25]
   2d500:	cmp	r0, #0
   2d504:	beq	2d530 <flatcc_json_printer_int8_vector_field@@Base+0x1a8>
   2d508:	ldr	r0, [r4, #20]
   2d50c:	add	r1, r0, #1
   2d510:	str	r1, [r4, #20]
   2d514:	mov	r1, #10
   2d518:	strb	r1, [r0]
   2d51c:	ldr	r0, [r4, #32]
   2d520:	sub	r0, r0, #1
   2d524:	str	r0, [r4, #32]
   2d528:	mov	r0, r4
   2d52c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d530:	ldr	r0, [r4, #20]
   2d534:	add	r1, r0, #1
   2d538:	str	r1, [r4, #20]
   2d53c:	mov	r1, #93	; 0x5d
   2d540:	strb	r1, [r0]
   2d544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d548 <flatcc_json_printer_int16_vector_field@@Base>:
   2d548:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d54c:	add	fp, sp, #24
   2d550:	mov	r7, r3
   2d554:	mov	r5, r1
   2d558:	mov	r4, r0
   2d55c:	mov	r0, r1
   2d560:	mov	r1, r2
   2d564:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2d568:	cmp	r0, #0
   2d56c:	beq	2d704 <flatcc_json_printer_int16_vector_field@@Base+0x1bc>
   2d570:	ldr	r8, [fp, #8]
   2d574:	ldr	r1, [r5, #16]
   2d578:	add	r2, r1, #1
   2d57c:	str	r2, [r5, #16]
   2d580:	cmp	r1, #0
   2d584:	beq	2d59c <flatcc_json_printer_int16_vector_field@@Base+0x54>
   2d588:	ldr	r1, [r4, #20]
   2d58c:	add	r2, r1, #1
   2d590:	str	r2, [r4, #20]
   2d594:	mov	r2, #44	; 0x2c
   2d598:	strb	r2, [r1]
   2d59c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2d5a0:	mov	r5, r0
   2d5a4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d5a8:	mov	r6, r0
   2d5ac:	mov	r0, r4
   2d5b0:	mov	r1, r7
   2d5b4:	mov	r2, r8
   2d5b8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2d5bc:	ldr	r0, [r4, #20]
   2d5c0:	ldr	r1, [r4, #32]
   2d5c4:	add	r1, r1, #1
   2d5c8:	str	r1, [r4, #32]
   2d5cc:	add	r1, r0, #1
   2d5d0:	str	r1, [r4, #20]
   2d5d4:	mov	r1, #91	; 0x5b
   2d5d8:	strb	r1, [r0]
   2d5dc:	cmp	r6, #0
   2d5e0:	beq	2d6bc <flatcc_json_printer_int16_vector_field@@Base+0x174>
   2d5e4:	add	r7, r5, #4
   2d5e8:	ldrb	r0, [r4, #25]
   2d5ec:	cmp	r0, #0
   2d5f0:	beq	2d614 <flatcc_json_printer_int16_vector_field@@Base+0xcc>
   2d5f4:	ldr	r0, [r4, #20]
   2d5f8:	add	r1, r0, #1
   2d5fc:	str	r1, [r4, #20]
   2d600:	mov	r1, #10
   2d604:	strb	r1, [r0]
   2d608:	mov	r0, r4
   2d60c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d610:	b	2d61c <flatcc_json_printer_int16_vector_field@@Base+0xd4>
   2d614:	mov	r0, r4
   2d618:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d61c:	mov	r0, r7
   2d620:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2d624:	ldr	r1, [r4, #20]
   2d628:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2d62c:	ldr	r1, [r4, #20]
   2d630:	add	r0, r1, r0
   2d634:	str	r0, [r4, #20]
   2d638:	subs	r6, r6, #1
   2d63c:	beq	2d6bc <flatcc_json_printer_int16_vector_field@@Base+0x174>
   2d640:	add	r5, r5, #6
   2d644:	mov	r7, #44	; 0x2c
   2d648:	mov	r8, #10
   2d64c:	b	2d680 <flatcc_json_printer_int16_vector_field@@Base+0x138>
   2d650:	mov	r0, r4
   2d654:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d658:	mov	r0, r5
   2d65c:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2d660:	ldr	r1, [r4, #20]
   2d664:	bl	2aaec <flatcc_json_printer_int16@@Base+0x2c>
   2d668:	ldr	r1, [r4, #20]
   2d66c:	add	r0, r1, r0
   2d670:	str	r0, [r4, #20]
   2d674:	add	r5, r5, #2
   2d678:	cmp	r6, #0
   2d67c:	beq	2d6bc <flatcc_json_printer_int16_vector_field@@Base+0x174>
   2d680:	ldr	r0, [r4, #20]
   2d684:	add	r1, r0, #1
   2d688:	str	r1, [r4, #20]
   2d68c:	strb	r7, [r0]
   2d690:	sub	r6, r6, #1
   2d694:	ldrb	r0, [r4, #25]
   2d698:	cmp	r0, #0
   2d69c:	beq	2d650 <flatcc_json_printer_int16_vector_field@@Base+0x108>
   2d6a0:	ldr	r0, [r4, #20]
   2d6a4:	add	r1, r0, #1
   2d6a8:	str	r1, [r4, #20]
   2d6ac:	strb	r8, [r0]
   2d6b0:	mov	r0, r4
   2d6b4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d6b8:	b	2d658 <flatcc_json_printer_int16_vector_field@@Base+0x110>
   2d6bc:	ldrb	r0, [r4, #25]
   2d6c0:	cmp	r0, #0
   2d6c4:	beq	2d6f0 <flatcc_json_printer_int16_vector_field@@Base+0x1a8>
   2d6c8:	ldr	r0, [r4, #20]
   2d6cc:	add	r1, r0, #1
   2d6d0:	str	r1, [r4, #20]
   2d6d4:	mov	r1, #10
   2d6d8:	strb	r1, [r0]
   2d6dc:	ldr	r0, [r4, #32]
   2d6e0:	sub	r0, r0, #1
   2d6e4:	str	r0, [r4, #32]
   2d6e8:	mov	r0, r4
   2d6ec:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d6f0:	ldr	r0, [r4, #20]
   2d6f4:	add	r1, r0, #1
   2d6f8:	str	r1, [r4, #20]
   2d6fc:	mov	r1, #93	; 0x5d
   2d700:	strb	r1, [r0]
   2d704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d708 <flatcc_json_printer_int32_vector_field@@Base>:
   2d708:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d70c:	add	fp, sp, #24
   2d710:	mov	r7, r3
   2d714:	mov	r5, r1
   2d718:	mov	r4, r0
   2d71c:	mov	r0, r1
   2d720:	mov	r1, r2
   2d724:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2d728:	cmp	r0, #0
   2d72c:	beq	2d8c4 <flatcc_json_printer_int32_vector_field@@Base+0x1bc>
   2d730:	ldr	r8, [fp, #8]
   2d734:	ldr	r1, [r5, #16]
   2d738:	add	r2, r1, #1
   2d73c:	str	r2, [r5, #16]
   2d740:	cmp	r1, #0
   2d744:	beq	2d75c <flatcc_json_printer_int32_vector_field@@Base+0x54>
   2d748:	ldr	r1, [r4, #20]
   2d74c:	add	r2, r1, #1
   2d750:	str	r2, [r4, #20]
   2d754:	mov	r2, #44	; 0x2c
   2d758:	strb	r2, [r1]
   2d75c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2d760:	mov	r5, r0
   2d764:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d768:	mov	r6, r0
   2d76c:	mov	r0, r4
   2d770:	mov	r1, r7
   2d774:	mov	r2, r8
   2d778:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2d77c:	ldr	r0, [r4, #20]
   2d780:	ldr	r1, [r4, #32]
   2d784:	add	r1, r1, #1
   2d788:	str	r1, [r4, #32]
   2d78c:	add	r1, r0, #1
   2d790:	str	r1, [r4, #20]
   2d794:	mov	r1, #91	; 0x5b
   2d798:	strb	r1, [r0]
   2d79c:	cmp	r6, #0
   2d7a0:	beq	2d87c <flatcc_json_printer_int32_vector_field@@Base+0x174>
   2d7a4:	add	r7, r5, #4
   2d7a8:	ldrb	r0, [r4, #25]
   2d7ac:	cmp	r0, #0
   2d7b0:	beq	2d7d4 <flatcc_json_printer_int32_vector_field@@Base+0xcc>
   2d7b4:	ldr	r0, [r4, #20]
   2d7b8:	add	r1, r0, #1
   2d7bc:	str	r1, [r4, #20]
   2d7c0:	mov	r1, #10
   2d7c4:	strb	r1, [r0]
   2d7c8:	mov	r0, r4
   2d7cc:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d7d0:	b	2d7dc <flatcc_json_printer_int32_vector_field@@Base+0xd4>
   2d7d4:	mov	r0, r4
   2d7d8:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d7dc:	mov	r0, r7
   2d7e0:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2d7e4:	ldr	r1, [r4, #20]
   2d7e8:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2d7ec:	ldr	r1, [r4, #20]
   2d7f0:	add	r0, r1, r0
   2d7f4:	str	r0, [r4, #20]
   2d7f8:	subs	r6, r6, #1
   2d7fc:	beq	2d87c <flatcc_json_printer_int32_vector_field@@Base+0x174>
   2d800:	add	r5, r5, #8
   2d804:	mov	r7, #44	; 0x2c
   2d808:	mov	r8, #10
   2d80c:	b	2d840 <flatcc_json_printer_int32_vector_field@@Base+0x138>
   2d810:	mov	r0, r4
   2d814:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d818:	mov	r0, r5
   2d81c:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2d820:	ldr	r1, [r4, #20]
   2d824:	bl	2ab48 <flatcc_json_printer_int32@@Base+0x2c>
   2d828:	ldr	r1, [r4, #20]
   2d82c:	add	r0, r1, r0
   2d830:	str	r0, [r4, #20]
   2d834:	add	r5, r5, #4
   2d838:	cmp	r6, #0
   2d83c:	beq	2d87c <flatcc_json_printer_int32_vector_field@@Base+0x174>
   2d840:	ldr	r0, [r4, #20]
   2d844:	add	r1, r0, #1
   2d848:	str	r1, [r4, #20]
   2d84c:	strb	r7, [r0]
   2d850:	sub	r6, r6, #1
   2d854:	ldrb	r0, [r4, #25]
   2d858:	cmp	r0, #0
   2d85c:	beq	2d810 <flatcc_json_printer_int32_vector_field@@Base+0x108>
   2d860:	ldr	r0, [r4, #20]
   2d864:	add	r1, r0, #1
   2d868:	str	r1, [r4, #20]
   2d86c:	strb	r8, [r0]
   2d870:	mov	r0, r4
   2d874:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d878:	b	2d818 <flatcc_json_printer_int32_vector_field@@Base+0x110>
   2d87c:	ldrb	r0, [r4, #25]
   2d880:	cmp	r0, #0
   2d884:	beq	2d8b0 <flatcc_json_printer_int32_vector_field@@Base+0x1a8>
   2d888:	ldr	r0, [r4, #20]
   2d88c:	add	r1, r0, #1
   2d890:	str	r1, [r4, #20]
   2d894:	mov	r1, #10
   2d898:	strb	r1, [r0]
   2d89c:	ldr	r0, [r4, #32]
   2d8a0:	sub	r0, r0, #1
   2d8a4:	str	r0, [r4, #32]
   2d8a8:	mov	r0, r4
   2d8ac:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d8b0:	ldr	r0, [r4, #20]
   2d8b4:	add	r1, r0, #1
   2d8b8:	str	r1, [r4, #20]
   2d8bc:	mov	r1, #93	; 0x5d
   2d8c0:	strb	r1, [r0]
   2d8c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002d8c8 <flatcc_json_printer_int64_vector_field@@Base>:
   2d8c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d8cc:	add	fp, sp, #24
   2d8d0:	mov	r7, r3
   2d8d4:	mov	r5, r1
   2d8d8:	mov	r4, r0
   2d8dc:	mov	r0, r1
   2d8e0:	mov	r1, r2
   2d8e4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2d8e8:	cmp	r0, #0
   2d8ec:	beq	2da84 <flatcc_json_printer_int64_vector_field@@Base+0x1bc>
   2d8f0:	ldr	r8, [fp, #8]
   2d8f4:	ldr	r1, [r5, #16]
   2d8f8:	add	r2, r1, #1
   2d8fc:	str	r2, [r5, #16]
   2d900:	cmp	r1, #0
   2d904:	beq	2d91c <flatcc_json_printer_int64_vector_field@@Base+0x54>
   2d908:	ldr	r1, [r4, #20]
   2d90c:	add	r2, r1, #1
   2d910:	str	r2, [r4, #20]
   2d914:	mov	r2, #44	; 0x2c
   2d918:	strb	r2, [r1]
   2d91c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2d920:	mov	r5, r0
   2d924:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2d928:	mov	r6, r0
   2d92c:	mov	r0, r4
   2d930:	mov	r1, r7
   2d934:	mov	r2, r8
   2d938:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2d93c:	ldr	r0, [r4, #20]
   2d940:	ldr	r1, [r4, #32]
   2d944:	add	r1, r1, #1
   2d948:	str	r1, [r4, #32]
   2d94c:	add	r1, r0, #1
   2d950:	str	r1, [r4, #20]
   2d954:	mov	r1, #91	; 0x5b
   2d958:	strb	r1, [r0]
   2d95c:	cmp	r6, #0
   2d960:	beq	2da3c <flatcc_json_printer_int64_vector_field@@Base+0x174>
   2d964:	add	r7, r5, #4
   2d968:	ldrb	r0, [r4, #25]
   2d96c:	cmp	r0, #0
   2d970:	beq	2d994 <flatcc_json_printer_int64_vector_field@@Base+0xcc>
   2d974:	ldr	r0, [r4, #20]
   2d978:	add	r1, r0, #1
   2d97c:	str	r1, [r4, #20]
   2d980:	mov	r1, #10
   2d984:	strb	r1, [r0]
   2d988:	mov	r0, r4
   2d98c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2d990:	b	2d99c <flatcc_json_printer_int64_vector_field@@Base+0xd4>
   2d994:	mov	r0, r4
   2d998:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d99c:	mov	r0, r7
   2d9a0:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2d9a4:	ldr	r2, [r4, #20]
   2d9a8:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2d9ac:	ldr	r1, [r4, #20]
   2d9b0:	add	r0, r1, r0
   2d9b4:	str	r0, [r4, #20]
   2d9b8:	subs	r6, r6, #1
   2d9bc:	beq	2da3c <flatcc_json_printer_int64_vector_field@@Base+0x174>
   2d9c0:	add	r5, r5, #12
   2d9c4:	mov	r7, #44	; 0x2c
   2d9c8:	mov	r8, #10
   2d9cc:	b	2da00 <flatcc_json_printer_int64_vector_field@@Base+0x138>
   2d9d0:	mov	r0, r4
   2d9d4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2d9d8:	mov	r0, r5
   2d9dc:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2d9e0:	ldr	r2, [r4, #20]
   2d9e4:	bl	2aba0 <flatcc_json_printer_int64@@Base+0x30>
   2d9e8:	ldr	r1, [r4, #20]
   2d9ec:	add	r0, r1, r0
   2d9f0:	str	r0, [r4, #20]
   2d9f4:	add	r5, r5, #8
   2d9f8:	cmp	r6, #0
   2d9fc:	beq	2da3c <flatcc_json_printer_int64_vector_field@@Base+0x174>
   2da00:	ldr	r0, [r4, #20]
   2da04:	add	r1, r0, #1
   2da08:	str	r1, [r4, #20]
   2da0c:	strb	r7, [r0]
   2da10:	sub	r6, r6, #1
   2da14:	ldrb	r0, [r4, #25]
   2da18:	cmp	r0, #0
   2da1c:	beq	2d9d0 <flatcc_json_printer_int64_vector_field@@Base+0x108>
   2da20:	ldr	r0, [r4, #20]
   2da24:	add	r1, r0, #1
   2da28:	str	r1, [r4, #20]
   2da2c:	strb	r8, [r0]
   2da30:	mov	r0, r4
   2da34:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2da38:	b	2d9d8 <flatcc_json_printer_int64_vector_field@@Base+0x110>
   2da3c:	ldrb	r0, [r4, #25]
   2da40:	cmp	r0, #0
   2da44:	beq	2da70 <flatcc_json_printer_int64_vector_field@@Base+0x1a8>
   2da48:	ldr	r0, [r4, #20]
   2da4c:	add	r1, r0, #1
   2da50:	str	r1, [r4, #20]
   2da54:	mov	r1, #10
   2da58:	strb	r1, [r0]
   2da5c:	ldr	r0, [r4, #32]
   2da60:	sub	r0, r0, #1
   2da64:	str	r0, [r4, #32]
   2da68:	mov	r0, r4
   2da6c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2da70:	ldr	r0, [r4, #20]
   2da74:	add	r1, r0, #1
   2da78:	str	r1, [r4, #20]
   2da7c:	mov	r1, #93	; 0x5d
   2da80:	strb	r1, [r0]
   2da84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002da88 <flatcc_json_printer_bool_vector_field@@Base>:
   2da88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2da8c:	add	fp, sp, #24
   2da90:	mov	r7, r3
   2da94:	mov	r5, r1
   2da98:	mov	r4, r0
   2da9c:	mov	r0, r1
   2daa0:	mov	r1, r2
   2daa4:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2daa8:	cmp	r0, #0
   2daac:	beq	2dc44 <flatcc_json_printer_bool_vector_field@@Base+0x1bc>
   2dab0:	ldr	r8, [fp, #8]
   2dab4:	ldr	r1, [r5, #16]
   2dab8:	add	r2, r1, #1
   2dabc:	str	r2, [r5, #16]
   2dac0:	cmp	r1, #0
   2dac4:	beq	2dadc <flatcc_json_printer_bool_vector_field@@Base+0x54>
   2dac8:	ldr	r1, [r4, #20]
   2dacc:	add	r2, r1, #1
   2dad0:	str	r2, [r4, #20]
   2dad4:	mov	r2, #44	; 0x2c
   2dad8:	strb	r2, [r1]
   2dadc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2dae0:	mov	r5, r0
   2dae4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2dae8:	mov	r6, r0
   2daec:	mov	r0, r4
   2daf0:	mov	r1, r7
   2daf4:	mov	r2, r8
   2daf8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2dafc:	ldr	r0, [r4, #20]
   2db00:	ldr	r1, [r4, #32]
   2db04:	add	r1, r1, #1
   2db08:	str	r1, [r4, #32]
   2db0c:	add	r1, r0, #1
   2db10:	str	r1, [r4, #20]
   2db14:	mov	r1, #91	; 0x5b
   2db18:	strb	r1, [r0]
   2db1c:	cmp	r6, #0
   2db20:	beq	2dbfc <flatcc_json_printer_bool_vector_field@@Base+0x174>
   2db24:	add	r7, r5, #4
   2db28:	ldrb	r0, [r4, #25]
   2db2c:	cmp	r0, #0
   2db30:	beq	2db54 <flatcc_json_printer_bool_vector_field@@Base+0xcc>
   2db34:	ldr	r0, [r4, #20]
   2db38:	add	r1, r0, #1
   2db3c:	str	r1, [r4, #20]
   2db40:	mov	r1, #10
   2db44:	strb	r1, [r0]
   2db48:	mov	r0, r4
   2db4c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2db50:	b	2db5c <flatcc_json_printer_bool_vector_field@@Base+0xd4>
   2db54:	mov	r0, r4
   2db58:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2db5c:	mov	r0, r7
   2db60:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2db64:	ldr	r1, [r4, #20]
   2db68:	bl	2b758 <flatcc_json_printer_bool_field@@Base+0xb8>
   2db6c:	ldr	r1, [r4, #20]
   2db70:	add	r0, r1, r0
   2db74:	str	r0, [r4, #20]
   2db78:	subs	r6, r6, #1
   2db7c:	beq	2dbfc <flatcc_json_printer_bool_vector_field@@Base+0x174>
   2db80:	add	r5, r5, #5
   2db84:	mov	r7, #44	; 0x2c
   2db88:	mov	r8, #10
   2db8c:	b	2dbc0 <flatcc_json_printer_bool_vector_field@@Base+0x138>
   2db90:	mov	r0, r4
   2db94:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2db98:	mov	r0, r5
   2db9c:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2dba0:	ldr	r1, [r4, #20]
   2dba4:	bl	2b758 <flatcc_json_printer_bool_field@@Base+0xb8>
   2dba8:	ldr	r1, [r4, #20]
   2dbac:	add	r0, r1, r0
   2dbb0:	str	r0, [r4, #20]
   2dbb4:	add	r5, r5, #1
   2dbb8:	cmp	r6, #0
   2dbbc:	beq	2dbfc <flatcc_json_printer_bool_vector_field@@Base+0x174>
   2dbc0:	ldr	r0, [r4, #20]
   2dbc4:	add	r1, r0, #1
   2dbc8:	str	r1, [r4, #20]
   2dbcc:	strb	r7, [r0]
   2dbd0:	sub	r6, r6, #1
   2dbd4:	ldrb	r0, [r4, #25]
   2dbd8:	cmp	r0, #0
   2dbdc:	beq	2db90 <flatcc_json_printer_bool_vector_field@@Base+0x108>
   2dbe0:	ldr	r0, [r4, #20]
   2dbe4:	add	r1, r0, #1
   2dbe8:	str	r1, [r4, #20]
   2dbec:	strb	r8, [r0]
   2dbf0:	mov	r0, r4
   2dbf4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2dbf8:	b	2db98 <flatcc_json_printer_bool_vector_field@@Base+0x110>
   2dbfc:	ldrb	r0, [r4, #25]
   2dc00:	cmp	r0, #0
   2dc04:	beq	2dc30 <flatcc_json_printer_bool_vector_field@@Base+0x1a8>
   2dc08:	ldr	r0, [r4, #20]
   2dc0c:	add	r1, r0, #1
   2dc10:	str	r1, [r4, #20]
   2dc14:	mov	r1, #10
   2dc18:	strb	r1, [r0]
   2dc1c:	ldr	r0, [r4, #32]
   2dc20:	sub	r0, r0, #1
   2dc24:	str	r0, [r4, #32]
   2dc28:	mov	r0, r4
   2dc2c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2dc30:	ldr	r0, [r4, #20]
   2dc34:	add	r1, r0, #1
   2dc38:	str	r1, [r4, #20]
   2dc3c:	mov	r1, #93	; 0x5d
   2dc40:	strb	r1, [r0]
   2dc44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002dc48 <flatcc_json_printer_float_vector_field@@Base>:
   2dc48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2dc4c:	add	fp, sp, #24
   2dc50:	mov	r7, r3
   2dc54:	mov	r5, r1
   2dc58:	mov	r4, r0
   2dc5c:	mov	r0, r1
   2dc60:	mov	r1, r2
   2dc64:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2dc68:	cmp	r0, #0
   2dc6c:	beq	2de0c <flatcc_json_printer_float_vector_field@@Base+0x1c4>
   2dc70:	ldr	r8, [fp, #8]
   2dc74:	ldr	r1, [r5, #16]
   2dc78:	add	r2, r1, #1
   2dc7c:	str	r2, [r5, #16]
   2dc80:	cmp	r1, #0
   2dc84:	beq	2dc9c <flatcc_json_printer_float_vector_field@@Base+0x54>
   2dc88:	ldr	r1, [r4, #20]
   2dc8c:	add	r2, r1, #1
   2dc90:	str	r2, [r4, #20]
   2dc94:	mov	r2, #44	; 0x2c
   2dc98:	strb	r2, [r1]
   2dc9c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2dca0:	mov	r5, r0
   2dca4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2dca8:	mov	r6, r0
   2dcac:	mov	r0, r4
   2dcb0:	mov	r1, r7
   2dcb4:	mov	r2, r8
   2dcb8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2dcbc:	ldr	r0, [r4, #20]
   2dcc0:	ldr	r1, [r4, #32]
   2dcc4:	add	r1, r1, #1
   2dcc8:	str	r1, [r4, #32]
   2dccc:	add	r1, r0, #1
   2dcd0:	str	r1, [r4, #20]
   2dcd4:	mov	r1, #91	; 0x5b
   2dcd8:	strb	r1, [r0]
   2dcdc:	cmp	r6, #0
   2dce0:	beq	2ddc4 <flatcc_json_printer_float_vector_field@@Base+0x17c>
   2dce4:	add	r7, r5, #4
   2dce8:	ldrb	r0, [r4, #25]
   2dcec:	cmp	r0, #0
   2dcf0:	beq	2dd14 <flatcc_json_printer_float_vector_field@@Base+0xcc>
   2dcf4:	ldr	r0, [r4, #20]
   2dcf8:	add	r1, r0, #1
   2dcfc:	str	r1, [r4, #20]
   2dd00:	mov	r1, #10
   2dd04:	strb	r1, [r0]
   2dd08:	mov	r0, r4
   2dd0c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2dd10:	b	2dd1c <flatcc_json_printer_float_vector_field@@Base+0xd4>
   2dd14:	mov	r0, r4
   2dd18:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2dd1c:	mov	r0, r7
   2dd20:	bl	2b858 <flatcc_json_printer_float_field@@Base+0xc0>
   2dd24:	ldr	r0, [r4, #20]
   2dd28:	vcvt.f64.f32	d0, s0
   2dd2c:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2dd30:	ldr	r1, [r4, #20]
   2dd34:	add	r0, r1, r0
   2dd38:	str	r0, [r4, #20]
   2dd3c:	subs	r6, r6, #1
   2dd40:	beq	2ddc4 <flatcc_json_printer_float_vector_field@@Base+0x17c>
   2dd44:	add	r5, r5, #8
   2dd48:	mov	r7, #44	; 0x2c
   2dd4c:	mov	r8, #10
   2dd50:	b	2dd88 <flatcc_json_printer_float_vector_field@@Base+0x140>
   2dd54:	mov	r0, r4
   2dd58:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2dd5c:	mov	r0, r5
   2dd60:	bl	2b858 <flatcc_json_printer_float_field@@Base+0xc0>
   2dd64:	ldr	r0, [r4, #20]
   2dd68:	vcvt.f64.f32	d0, s0
   2dd6c:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2dd70:	ldr	r1, [r4, #20]
   2dd74:	add	r0, r1, r0
   2dd78:	str	r0, [r4, #20]
   2dd7c:	add	r5, r5, #4
   2dd80:	cmp	r6, #0
   2dd84:	beq	2ddc4 <flatcc_json_printer_float_vector_field@@Base+0x17c>
   2dd88:	ldr	r0, [r4, #20]
   2dd8c:	add	r1, r0, #1
   2dd90:	str	r1, [r4, #20]
   2dd94:	strb	r7, [r0]
   2dd98:	sub	r6, r6, #1
   2dd9c:	ldrb	r0, [r4, #25]
   2dda0:	cmp	r0, #0
   2dda4:	beq	2dd54 <flatcc_json_printer_float_vector_field@@Base+0x10c>
   2dda8:	ldr	r0, [r4, #20]
   2ddac:	add	r1, r0, #1
   2ddb0:	str	r1, [r4, #20]
   2ddb4:	strb	r8, [r0]
   2ddb8:	mov	r0, r4
   2ddbc:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ddc0:	b	2dd5c <flatcc_json_printer_float_vector_field@@Base+0x114>
   2ddc4:	ldrb	r0, [r4, #25]
   2ddc8:	cmp	r0, #0
   2ddcc:	beq	2ddf8 <flatcc_json_printer_float_vector_field@@Base+0x1b0>
   2ddd0:	ldr	r0, [r4, #20]
   2ddd4:	add	r1, r0, #1
   2ddd8:	str	r1, [r4, #20]
   2dddc:	mov	r1, #10
   2dde0:	strb	r1, [r0]
   2dde4:	ldr	r0, [r4, #32]
   2dde8:	sub	r0, r0, #1
   2ddec:	str	r0, [r4, #32]
   2ddf0:	mov	r0, r4
   2ddf4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ddf8:	ldr	r0, [r4, #20]
   2ddfc:	add	r1, r0, #1
   2de00:	str	r1, [r4, #20]
   2de04:	mov	r1, #93	; 0x5d
   2de08:	strb	r1, [r0]
   2de0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002de10 <flatcc_json_printer_double_vector_field@@Base>:
   2de10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2de14:	add	fp, sp, #24
   2de18:	mov	r7, r3
   2de1c:	mov	r5, r1
   2de20:	mov	r4, r0
   2de24:	mov	r0, r1
   2de28:	mov	r1, r2
   2de2c:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2de30:	cmp	r0, #0
   2de34:	beq	2dfcc <flatcc_json_printer_double_vector_field@@Base+0x1bc>
   2de38:	ldr	r8, [fp, #8]
   2de3c:	ldr	r1, [r5, #16]
   2de40:	add	r2, r1, #1
   2de44:	str	r2, [r5, #16]
   2de48:	cmp	r1, #0
   2de4c:	beq	2de64 <flatcc_json_printer_double_vector_field@@Base+0x54>
   2de50:	ldr	r1, [r4, #20]
   2de54:	add	r2, r1, #1
   2de58:	str	r2, [r4, #20]
   2de5c:	mov	r2, #44	; 0x2c
   2de60:	strb	r2, [r1]
   2de64:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2de68:	mov	r5, r0
   2de6c:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2de70:	mov	r6, r0
   2de74:	mov	r0, r4
   2de78:	mov	r1, r7
   2de7c:	mov	r2, r8
   2de80:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2de84:	ldr	r0, [r4, #20]
   2de88:	ldr	r1, [r4, #32]
   2de8c:	add	r1, r1, #1
   2de90:	str	r1, [r4, #32]
   2de94:	add	r1, r0, #1
   2de98:	str	r1, [r4, #20]
   2de9c:	mov	r1, #91	; 0x5b
   2dea0:	strb	r1, [r0]
   2dea4:	cmp	r6, #0
   2dea8:	beq	2df84 <flatcc_json_printer_double_vector_field@@Base+0x174>
   2deac:	add	r7, r5, #4
   2deb0:	ldrb	r0, [r4, #25]
   2deb4:	cmp	r0, #0
   2deb8:	beq	2dedc <flatcc_json_printer_double_vector_field@@Base+0xcc>
   2debc:	ldr	r0, [r4, #20]
   2dec0:	add	r1, r0, #1
   2dec4:	str	r1, [r4, #20]
   2dec8:	mov	r1, #10
   2decc:	strb	r1, [r0]
   2ded0:	mov	r0, r4
   2ded4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ded8:	b	2dee4 <flatcc_json_printer_double_vector_field@@Base+0xd4>
   2dedc:	mov	r0, r4
   2dee0:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2dee4:	mov	r0, r7
   2dee8:	bl	2b920 <flatcc_json_printer_double_field@@Base+0xc0>
   2deec:	ldr	r0, [r4, #20]
   2def0:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2def4:	ldr	r1, [r4, #20]
   2def8:	add	r0, r1, r0
   2defc:	str	r0, [r4, #20]
   2df00:	subs	r6, r6, #1
   2df04:	beq	2df84 <flatcc_json_printer_double_vector_field@@Base+0x174>
   2df08:	add	r5, r5, #12
   2df0c:	mov	r7, #44	; 0x2c
   2df10:	mov	r8, #10
   2df14:	b	2df48 <flatcc_json_printer_double_vector_field@@Base+0x138>
   2df18:	mov	r0, r4
   2df1c:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2df20:	mov	r0, r5
   2df24:	bl	2b920 <flatcc_json_printer_double_field@@Base+0xc0>
   2df28:	ldr	r0, [r4, #20]
   2df2c:	bl	29990 <flatcc_json_printer_fmt_float@@Base+0x8>
   2df30:	ldr	r1, [r4, #20]
   2df34:	add	r0, r1, r0
   2df38:	str	r0, [r4, #20]
   2df3c:	add	r5, r5, #8
   2df40:	cmp	r6, #0
   2df44:	beq	2df84 <flatcc_json_printer_double_vector_field@@Base+0x174>
   2df48:	ldr	r0, [r4, #20]
   2df4c:	add	r1, r0, #1
   2df50:	str	r1, [r4, #20]
   2df54:	strb	r7, [r0]
   2df58:	sub	r6, r6, #1
   2df5c:	ldrb	r0, [r4, #25]
   2df60:	cmp	r0, #0
   2df64:	beq	2df18 <flatcc_json_printer_double_vector_field@@Base+0x108>
   2df68:	ldr	r0, [r4, #20]
   2df6c:	add	r1, r0, #1
   2df70:	str	r1, [r4, #20]
   2df74:	strb	r8, [r0]
   2df78:	mov	r0, r4
   2df7c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2df80:	b	2df20 <flatcc_json_printer_double_vector_field@@Base+0x110>
   2df84:	ldrb	r0, [r4, #25]
   2df88:	cmp	r0, #0
   2df8c:	beq	2dfb8 <flatcc_json_printer_double_vector_field@@Base+0x1a8>
   2df90:	ldr	r0, [r4, #20]
   2df94:	add	r1, r0, #1
   2df98:	str	r1, [r4, #20]
   2df9c:	mov	r1, #10
   2dfa0:	strb	r1, [r0]
   2dfa4:	ldr	r0, [r4, #32]
   2dfa8:	sub	r0, r0, #1
   2dfac:	str	r0, [r4, #32]
   2dfb0:	mov	r0, r4
   2dfb4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2dfb8:	ldr	r0, [r4, #20]
   2dfbc:	add	r1, r0, #1
   2dfc0:	str	r1, [r4, #20]
   2dfc4:	mov	r1, #93	; 0x5d
   2dfc8:	strb	r1, [r0]
   2dfcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002dfd0 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2dfd0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dfd4:	add	fp, sp, #24
   2dfd8:	mov	r6, r3
   2dfdc:	mov	r5, r1
   2dfe0:	mov	r4, r0
   2dfe4:	ldrb	r0, [r0, #27]
   2dfe8:	cmp	r0, #0
   2dfec:	beq	2e004 <flatcc_json_printer_utype_enum_vector_field@@Base+0x34>
   2dff0:	mov	r0, r4
   2dff4:	mov	r1, r5
   2dff8:	mov	r3, r6
   2dffc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e000:	b	2cab8 <flatcc_json_printer_utype_vector_field@@Base>
   2e004:	ldr	r7, [fp, #12]
   2e008:	ldr	r9, [fp, #8]
   2e00c:	mov	r0, r5
   2e010:	mov	r1, r2
   2e014:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2e018:	cmp	r0, #0
   2e01c:	beq	2e1a0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1d0>
   2e020:	ldr	r1, [r5, #16]
   2e024:	add	r2, r1, #1
   2e028:	str	r2, [r5, #16]
   2e02c:	cmp	r1, #0
   2e030:	beq	2e048 <flatcc_json_printer_utype_enum_vector_field@@Base+0x78>
   2e034:	ldr	r1, [r4, #20]
   2e038:	add	r2, r1, #1
   2e03c:	str	r2, [r4, #20]
   2e040:	mov	r2, #44	; 0x2c
   2e044:	strb	r2, [r1]
   2e048:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2e04c:	mov	r5, r0
   2e050:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e054:	mov	r8, r0
   2e058:	mov	r0, r4
   2e05c:	mov	r1, r6
   2e060:	mov	r2, r9
   2e064:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2e068:	ldr	r0, [r4, #20]
   2e06c:	ldr	r1, [r4, #32]
   2e070:	add	r1, r1, #1
   2e074:	str	r1, [r4, #32]
   2e078:	add	r1, r0, #1
   2e07c:	str	r1, [r4, #20]
   2e080:	mov	r1, #91	; 0x5b
   2e084:	strb	r1, [r0]
   2e088:	cmp	r8, #0
   2e08c:	beq	2e158 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   2e090:	add	r6, r5, #4
   2e094:	ldrb	r0, [r4, #25]
   2e098:	cmp	r0, #0
   2e09c:	beq	2e0c0 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf0>
   2e0a0:	ldr	r0, [r4, #20]
   2e0a4:	add	r1, r0, #1
   2e0a8:	str	r1, [r4, #20]
   2e0ac:	mov	r1, #10
   2e0b0:	strb	r1, [r0]
   2e0b4:	mov	r0, r4
   2e0b8:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e0bc:	b	2e0c8 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   2e0c0:	mov	r0, r4
   2e0c4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e0c8:	mov	r0, r6
   2e0cc:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2e0d0:	mov	r1, r0
   2e0d4:	mov	r0, r4
   2e0d8:	blx	r7
   2e0dc:	subs	r6, r8, #1
   2e0e0:	beq	2e158 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   2e0e4:	add	r5, r5, #5
   2e0e8:	mov	r8, #44	; 0x2c
   2e0ec:	mov	r9, #10
   2e0f0:	b	2e11c <flatcc_json_printer_utype_enum_vector_field@@Base+0x14c>
   2e0f4:	mov	r0, r4
   2e0f8:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e0fc:	mov	r0, r5
   2e100:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2e104:	mov	r1, r0
   2e108:	mov	r0, r4
   2e10c:	blx	r7
   2e110:	add	r5, r5, #1
   2e114:	cmp	r6, #0
   2e118:	beq	2e158 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   2e11c:	ldr	r0, [r4, #20]
   2e120:	add	r1, r0, #1
   2e124:	str	r1, [r4, #20]
   2e128:	strb	r8, [r0]
   2e12c:	sub	r6, r6, #1
   2e130:	ldrb	r0, [r4, #25]
   2e134:	cmp	r0, #0
   2e138:	beq	2e0f4 <flatcc_json_printer_utype_enum_vector_field@@Base+0x124>
   2e13c:	ldr	r0, [r4, #20]
   2e140:	add	r1, r0, #1
   2e144:	str	r1, [r4, #20]
   2e148:	strb	r9, [r0]
   2e14c:	mov	r0, r4
   2e150:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e154:	b	2e0fc <flatcc_json_printer_utype_enum_vector_field@@Base+0x12c>
   2e158:	ldrb	r0, [r4, #25]
   2e15c:	cmp	r0, #0
   2e160:	beq	2e18c <flatcc_json_printer_utype_enum_vector_field@@Base+0x1bc>
   2e164:	ldr	r0, [r4, #20]
   2e168:	add	r1, r0, #1
   2e16c:	str	r1, [r4, #20]
   2e170:	mov	r1, #10
   2e174:	strb	r1, [r0]
   2e178:	ldr	r0, [r4, #32]
   2e17c:	sub	r0, r0, #1
   2e180:	str	r0, [r4, #32]
   2e184:	mov	r0, r4
   2e188:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e18c:	ldr	r0, [r4, #20]
   2e190:	add	r1, r0, #1
   2e194:	str	r1, [r4, #20]
   2e198:	mov	r1, #93	; 0x5d
   2e19c:	strb	r1, [r0]
   2e1a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e1a4 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2e1a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e1a8:	add	fp, sp, #24
   2e1ac:	mov	r6, r3
   2e1b0:	mov	r5, r1
   2e1b4:	mov	r4, r0
   2e1b8:	ldrb	r0, [r0, #27]
   2e1bc:	cmp	r0, #0
   2e1c0:	beq	2e1d8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x34>
   2e1c4:	mov	r0, r4
   2e1c8:	mov	r1, r5
   2e1cc:	mov	r3, r6
   2e1d0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e1d4:	b	2cc88 <flatcc_json_printer_uint8_vector_field@@Base>
   2e1d8:	ldr	r7, [fp, #12]
   2e1dc:	ldr	r9, [fp, #8]
   2e1e0:	mov	r0, r5
   2e1e4:	mov	r1, r2
   2e1e8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2e1ec:	cmp	r0, #0
   2e1f0:	beq	2e374 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d0>
   2e1f4:	ldr	r1, [r5, #16]
   2e1f8:	add	r2, r1, #1
   2e1fc:	str	r2, [r5, #16]
   2e200:	cmp	r1, #0
   2e204:	beq	2e21c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x78>
   2e208:	ldr	r1, [r4, #20]
   2e20c:	add	r2, r1, #1
   2e210:	str	r2, [r4, #20]
   2e214:	mov	r2, #44	; 0x2c
   2e218:	strb	r2, [r1]
   2e21c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2e220:	mov	r5, r0
   2e224:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e228:	mov	r8, r0
   2e22c:	mov	r0, r4
   2e230:	mov	r1, r6
   2e234:	mov	r2, r9
   2e238:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2e23c:	ldr	r0, [r4, #20]
   2e240:	ldr	r1, [r4, #32]
   2e244:	add	r1, r1, #1
   2e248:	str	r1, [r4, #32]
   2e24c:	add	r1, r0, #1
   2e250:	str	r1, [r4, #20]
   2e254:	mov	r1, #91	; 0x5b
   2e258:	strb	r1, [r0]
   2e25c:	cmp	r8, #0
   2e260:	beq	2e32c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2e264:	add	r6, r5, #4
   2e268:	ldrb	r0, [r4, #25]
   2e26c:	cmp	r0, #0
   2e270:	beq	2e294 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf0>
   2e274:	ldr	r0, [r4, #20]
   2e278:	add	r1, r0, #1
   2e27c:	str	r1, [r4, #20]
   2e280:	mov	r1, #10
   2e284:	strb	r1, [r0]
   2e288:	mov	r0, r4
   2e28c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e290:	b	2e29c <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   2e294:	mov	r0, r4
   2e298:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e29c:	mov	r0, r6
   2e2a0:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2e2a4:	mov	r1, r0
   2e2a8:	mov	r0, r4
   2e2ac:	blx	r7
   2e2b0:	subs	r6, r8, #1
   2e2b4:	beq	2e32c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2e2b8:	add	r5, r5, #5
   2e2bc:	mov	r8, #44	; 0x2c
   2e2c0:	mov	r9, #10
   2e2c4:	b	2e2f0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14c>
   2e2c8:	mov	r0, r4
   2e2cc:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e2d0:	mov	r0, r5
   2e2d4:	bl	2b148 <flatcc_json_printer_uint8_field@@Base+0xb0>
   2e2d8:	mov	r1, r0
   2e2dc:	mov	r0, r4
   2e2e0:	blx	r7
   2e2e4:	add	r5, r5, #1
   2e2e8:	cmp	r6, #0
   2e2ec:	beq	2e32c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2e2f0:	ldr	r0, [r4, #20]
   2e2f4:	add	r1, r0, #1
   2e2f8:	str	r1, [r4, #20]
   2e2fc:	strb	r8, [r0]
   2e300:	sub	r6, r6, #1
   2e304:	ldrb	r0, [r4, #25]
   2e308:	cmp	r0, #0
   2e30c:	beq	2e2c8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   2e310:	ldr	r0, [r4, #20]
   2e314:	add	r1, r0, #1
   2e318:	str	r1, [r4, #20]
   2e31c:	strb	r9, [r0]
   2e320:	mov	r0, r4
   2e324:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e328:	b	2e2d0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x12c>
   2e32c:	ldrb	r0, [r4, #25]
   2e330:	cmp	r0, #0
   2e334:	beq	2e360 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1bc>
   2e338:	ldr	r0, [r4, #20]
   2e33c:	add	r1, r0, #1
   2e340:	str	r1, [r4, #20]
   2e344:	mov	r1, #10
   2e348:	strb	r1, [r0]
   2e34c:	ldr	r0, [r4, #32]
   2e350:	sub	r0, r0, #1
   2e354:	str	r0, [r4, #32]
   2e358:	mov	r0, r4
   2e35c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e360:	ldr	r0, [r4, #20]
   2e364:	add	r1, r0, #1
   2e368:	str	r1, [r4, #20]
   2e36c:	mov	r1, #93	; 0x5d
   2e370:	strb	r1, [r0]
   2e374:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e378 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2e378:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e37c:	add	fp, sp, #24
   2e380:	mov	r6, r3
   2e384:	mov	r5, r1
   2e388:	mov	r4, r0
   2e38c:	ldrb	r0, [r0, #27]
   2e390:	cmp	r0, #0
   2e394:	beq	2e3ac <flatcc_json_printer_uint16_enum_vector_field@@Base+0x34>
   2e398:	mov	r0, r4
   2e39c:	mov	r1, r5
   2e3a0:	mov	r3, r6
   2e3a4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e3a8:	b	2ce48 <flatcc_json_printer_uint16_vector_field@@Base>
   2e3ac:	ldr	r7, [fp, #12]
   2e3b0:	ldr	r9, [fp, #8]
   2e3b4:	mov	r0, r5
   2e3b8:	mov	r1, r2
   2e3bc:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2e3c0:	cmp	r0, #0
   2e3c4:	beq	2e548 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d0>
   2e3c8:	ldr	r1, [r5, #16]
   2e3cc:	add	r2, r1, #1
   2e3d0:	str	r2, [r5, #16]
   2e3d4:	cmp	r1, #0
   2e3d8:	beq	2e3f0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x78>
   2e3dc:	ldr	r1, [r4, #20]
   2e3e0:	add	r2, r1, #1
   2e3e4:	str	r2, [r4, #20]
   2e3e8:	mov	r2, #44	; 0x2c
   2e3ec:	strb	r2, [r1]
   2e3f0:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2e3f4:	mov	r5, r0
   2e3f8:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e3fc:	mov	r8, r0
   2e400:	mov	r0, r4
   2e404:	mov	r1, r6
   2e408:	mov	r2, r9
   2e40c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2e410:	ldr	r0, [r4, #20]
   2e414:	ldr	r1, [r4, #32]
   2e418:	add	r1, r1, #1
   2e41c:	str	r1, [r4, #32]
   2e420:	add	r1, r0, #1
   2e424:	str	r1, [r4, #20]
   2e428:	mov	r1, #91	; 0x5b
   2e42c:	strb	r1, [r0]
   2e430:	cmp	r8, #0
   2e434:	beq	2e500 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   2e438:	add	r6, r5, #4
   2e43c:	ldrb	r0, [r4, #25]
   2e440:	cmp	r0, #0
   2e444:	beq	2e468 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf0>
   2e448:	ldr	r0, [r4, #20]
   2e44c:	add	r1, r0, #1
   2e450:	str	r1, [r4, #20]
   2e454:	mov	r1, #10
   2e458:	strb	r1, [r0]
   2e45c:	mov	r0, r4
   2e460:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e464:	b	2e470 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf8>
   2e468:	mov	r0, r4
   2e46c:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e470:	mov	r0, r6
   2e474:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2e478:	mov	r1, r0
   2e47c:	mov	r0, r4
   2e480:	blx	r7
   2e484:	subs	r6, r8, #1
   2e488:	beq	2e500 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   2e48c:	add	r5, r5, #6
   2e490:	mov	r8, #44	; 0x2c
   2e494:	mov	r9, #10
   2e498:	b	2e4c4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x14c>
   2e49c:	mov	r0, r4
   2e4a0:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e4a4:	mov	r0, r5
   2e4a8:	bl	2b200 <flatcc_json_printer_uint16_field@@Base+0xb0>
   2e4ac:	mov	r1, r0
   2e4b0:	mov	r0, r4
   2e4b4:	blx	r7
   2e4b8:	add	r5, r5, #2
   2e4bc:	cmp	r6, #0
   2e4c0:	beq	2e500 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   2e4c4:	ldr	r0, [r4, #20]
   2e4c8:	add	r1, r0, #1
   2e4cc:	str	r1, [r4, #20]
   2e4d0:	strb	r8, [r0]
   2e4d4:	sub	r6, r6, #1
   2e4d8:	ldrb	r0, [r4, #25]
   2e4dc:	cmp	r0, #0
   2e4e0:	beq	2e49c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x124>
   2e4e4:	ldr	r0, [r4, #20]
   2e4e8:	add	r1, r0, #1
   2e4ec:	str	r1, [r4, #20]
   2e4f0:	strb	r9, [r0]
   2e4f4:	mov	r0, r4
   2e4f8:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e4fc:	b	2e4a4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x12c>
   2e500:	ldrb	r0, [r4, #25]
   2e504:	cmp	r0, #0
   2e508:	beq	2e534 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1bc>
   2e50c:	ldr	r0, [r4, #20]
   2e510:	add	r1, r0, #1
   2e514:	str	r1, [r4, #20]
   2e518:	mov	r1, #10
   2e51c:	strb	r1, [r0]
   2e520:	ldr	r0, [r4, #32]
   2e524:	sub	r0, r0, #1
   2e528:	str	r0, [r4, #32]
   2e52c:	mov	r0, r4
   2e530:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e534:	ldr	r0, [r4, #20]
   2e538:	add	r1, r0, #1
   2e53c:	str	r1, [r4, #20]
   2e540:	mov	r1, #93	; 0x5d
   2e544:	strb	r1, [r0]
   2e548:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e54c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2e54c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e550:	add	fp, sp, #24
   2e554:	mov	r6, r3
   2e558:	mov	r5, r1
   2e55c:	mov	r4, r0
   2e560:	ldrb	r0, [r0, #27]
   2e564:	cmp	r0, #0
   2e568:	beq	2e580 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x34>
   2e56c:	mov	r0, r4
   2e570:	mov	r1, r5
   2e574:	mov	r3, r6
   2e578:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e57c:	b	2d008 <flatcc_json_printer_uint32_vector_field@@Base>
   2e580:	ldr	r7, [fp, #12]
   2e584:	ldr	r9, [fp, #8]
   2e588:	mov	r0, r5
   2e58c:	mov	r1, r2
   2e590:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2e594:	cmp	r0, #0
   2e598:	beq	2e71c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d0>
   2e59c:	ldr	r1, [r5, #16]
   2e5a0:	add	r2, r1, #1
   2e5a4:	str	r2, [r5, #16]
   2e5a8:	cmp	r1, #0
   2e5ac:	beq	2e5c4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x78>
   2e5b0:	ldr	r1, [r4, #20]
   2e5b4:	add	r2, r1, #1
   2e5b8:	str	r2, [r4, #20]
   2e5bc:	mov	r2, #44	; 0x2c
   2e5c0:	strb	r2, [r1]
   2e5c4:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2e5c8:	mov	r5, r0
   2e5cc:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e5d0:	mov	r8, r0
   2e5d4:	mov	r0, r4
   2e5d8:	mov	r1, r6
   2e5dc:	mov	r2, r9
   2e5e0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2e5e4:	ldr	r0, [r4, #20]
   2e5e8:	ldr	r1, [r4, #32]
   2e5ec:	add	r1, r1, #1
   2e5f0:	str	r1, [r4, #32]
   2e5f4:	add	r1, r0, #1
   2e5f8:	str	r1, [r4, #20]
   2e5fc:	mov	r1, #91	; 0x5b
   2e600:	strb	r1, [r0]
   2e604:	cmp	r8, #0
   2e608:	beq	2e6d4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   2e60c:	add	r6, r5, #4
   2e610:	ldrb	r0, [r4, #25]
   2e614:	cmp	r0, #0
   2e618:	beq	2e63c <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf0>
   2e61c:	ldr	r0, [r4, #20]
   2e620:	add	r1, r0, #1
   2e624:	str	r1, [r4, #20]
   2e628:	mov	r1, #10
   2e62c:	strb	r1, [r0]
   2e630:	mov	r0, r4
   2e634:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e638:	b	2e644 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf8>
   2e63c:	mov	r0, r4
   2e640:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e644:	mov	r0, r6
   2e648:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2e64c:	mov	r1, r0
   2e650:	mov	r0, r4
   2e654:	blx	r7
   2e658:	subs	r6, r8, #1
   2e65c:	beq	2e6d4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   2e660:	add	r5, r5, #8
   2e664:	mov	r8, #44	; 0x2c
   2e668:	mov	r9, #10
   2e66c:	b	2e698 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14c>
   2e670:	mov	r0, r4
   2e674:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e678:	mov	r0, r5
   2e67c:	bl	2b2b8 <flatcc_json_printer_uint32_field@@Base+0xb0>
   2e680:	mov	r1, r0
   2e684:	mov	r0, r4
   2e688:	blx	r7
   2e68c:	add	r5, r5, #4
   2e690:	cmp	r6, #0
   2e694:	beq	2e6d4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   2e698:	ldr	r0, [r4, #20]
   2e69c:	add	r1, r0, #1
   2e6a0:	str	r1, [r4, #20]
   2e6a4:	strb	r8, [r0]
   2e6a8:	sub	r6, r6, #1
   2e6ac:	ldrb	r0, [r4, #25]
   2e6b0:	cmp	r0, #0
   2e6b4:	beq	2e670 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x124>
   2e6b8:	ldr	r0, [r4, #20]
   2e6bc:	add	r1, r0, #1
   2e6c0:	str	r1, [r4, #20]
   2e6c4:	strb	r9, [r0]
   2e6c8:	mov	r0, r4
   2e6cc:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e6d0:	b	2e678 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x12c>
   2e6d4:	ldrb	r0, [r4, #25]
   2e6d8:	cmp	r0, #0
   2e6dc:	beq	2e708 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1bc>
   2e6e0:	ldr	r0, [r4, #20]
   2e6e4:	add	r1, r0, #1
   2e6e8:	str	r1, [r4, #20]
   2e6ec:	mov	r1, #10
   2e6f0:	strb	r1, [r0]
   2e6f4:	ldr	r0, [r4, #32]
   2e6f8:	sub	r0, r0, #1
   2e6fc:	str	r0, [r4, #32]
   2e700:	mov	r0, r4
   2e704:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e708:	ldr	r0, [r4, #20]
   2e70c:	add	r1, r0, #1
   2e710:	str	r1, [r4, #20]
   2e714:	mov	r1, #93	; 0x5d
   2e718:	strb	r1, [r0]
   2e71c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e720 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2e720:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e724:	add	fp, sp, #24
   2e728:	mov	r7, r3
   2e72c:	mov	r5, r1
   2e730:	mov	r4, r0
   2e734:	ldrb	r0, [r0, #27]
   2e738:	cmp	r0, #0
   2e73c:	beq	2e754 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x34>
   2e740:	mov	r0, r4
   2e744:	mov	r1, r5
   2e748:	mov	r3, r7
   2e74c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e750:	b	2d1c8 <flatcc_json_printer_uint64_vector_field@@Base>
   2e754:	ldr	r6, [fp, #12]
   2e758:	ldr	r9, [fp, #8]
   2e75c:	mov	r0, r5
   2e760:	mov	r1, r2
   2e764:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2e768:	cmp	r0, #0
   2e76c:	beq	2e8f8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d8>
   2e770:	ldr	r1, [r5, #16]
   2e774:	add	r2, r1, #1
   2e778:	str	r2, [r5, #16]
   2e77c:	cmp	r1, #0
   2e780:	beq	2e798 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x78>
   2e784:	ldr	r1, [r4, #20]
   2e788:	add	r2, r1, #1
   2e78c:	str	r2, [r4, #20]
   2e790:	mov	r2, #44	; 0x2c
   2e794:	strb	r2, [r1]
   2e798:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2e79c:	mov	r5, r0
   2e7a0:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e7a4:	mov	r8, r0
   2e7a8:	mov	r0, r4
   2e7ac:	mov	r1, r7
   2e7b0:	mov	r2, r9
   2e7b4:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2e7b8:	ldr	r0, [r4, #20]
   2e7bc:	ldr	r1, [r4, #32]
   2e7c0:	add	r1, r1, #1
   2e7c4:	str	r1, [r4, #32]
   2e7c8:	add	r1, r0, #1
   2e7cc:	str	r1, [r4, #20]
   2e7d0:	mov	r1, #91	; 0x5b
   2e7d4:	strb	r1, [r0]
   2e7d8:	cmp	r8, #0
   2e7dc:	beq	2e8b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2e7e0:	add	r7, r5, #4
   2e7e4:	ldrb	r0, [r4, #25]
   2e7e8:	cmp	r0, #0
   2e7ec:	beq	2e810 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf0>
   2e7f0:	ldr	r0, [r4, #20]
   2e7f4:	add	r1, r0, #1
   2e7f8:	str	r1, [r4, #20]
   2e7fc:	mov	r1, #10
   2e800:	strb	r1, [r0]
   2e804:	mov	r0, r4
   2e808:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e80c:	b	2e818 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf8>
   2e810:	mov	r0, r4
   2e814:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e818:	mov	r0, r7
   2e81c:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2e820:	mov	r2, r0
   2e824:	mov	r0, r4
   2e828:	mov	r3, r1
   2e82c:	blx	r6
   2e830:	subs	r7, r8, #1
   2e834:	beq	2e8b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2e838:	add	r5, r5, #12
   2e83c:	mov	r8, #44	; 0x2c
   2e840:	mov	r9, #10
   2e844:	b	2e874 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x154>
   2e848:	mov	r0, r4
   2e84c:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e850:	mov	r0, r5
   2e854:	bl	2b394 <flatcc_json_printer_uint64_field@@Base+0xd4>
   2e858:	mov	r2, r0
   2e85c:	mov	r0, r4
   2e860:	mov	r3, r1
   2e864:	blx	r6
   2e868:	add	r5, r5, #8
   2e86c:	cmp	r7, #0
   2e870:	beq	2e8b0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2e874:	ldr	r0, [r4, #20]
   2e878:	add	r1, r0, #1
   2e87c:	str	r1, [r4, #20]
   2e880:	strb	r8, [r0]
   2e884:	sub	r7, r7, #1
   2e888:	ldrb	r0, [r4, #25]
   2e88c:	cmp	r0, #0
   2e890:	beq	2e848 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x128>
   2e894:	ldr	r0, [r4, #20]
   2e898:	add	r1, r0, #1
   2e89c:	str	r1, [r4, #20]
   2e8a0:	strb	r9, [r0]
   2e8a4:	mov	r0, r4
   2e8a8:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e8ac:	b	2e850 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x130>
   2e8b0:	ldrb	r0, [r4, #25]
   2e8b4:	cmp	r0, #0
   2e8b8:	beq	2e8e4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c4>
   2e8bc:	ldr	r0, [r4, #20]
   2e8c0:	add	r1, r0, #1
   2e8c4:	str	r1, [r4, #20]
   2e8c8:	mov	r1, #10
   2e8cc:	strb	r1, [r0]
   2e8d0:	ldr	r0, [r4, #32]
   2e8d4:	sub	r0, r0, #1
   2e8d8:	str	r0, [r4, #32]
   2e8dc:	mov	r0, r4
   2e8e0:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e8e4:	ldr	r0, [r4, #20]
   2e8e8:	add	r1, r0, #1
   2e8ec:	str	r1, [r4, #20]
   2e8f0:	mov	r1, #93	; 0x5d
   2e8f4:	strb	r1, [r0]
   2e8f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e8fc <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2e8fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e900:	add	fp, sp, #24
   2e904:	mov	r6, r3
   2e908:	mov	r5, r1
   2e90c:	mov	r4, r0
   2e910:	ldrb	r0, [r0, #27]
   2e914:	cmp	r0, #0
   2e918:	beq	2e930 <flatcc_json_printer_int8_enum_vector_field@@Base+0x34>
   2e91c:	mov	r0, r4
   2e920:	mov	r1, r5
   2e924:	mov	r3, r6
   2e928:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e92c:	b	2d388 <flatcc_json_printer_int8_vector_field@@Base>
   2e930:	ldr	r7, [fp, #12]
   2e934:	ldr	r9, [fp, #8]
   2e938:	mov	r0, r5
   2e93c:	mov	r1, r2
   2e940:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2e944:	cmp	r0, #0
   2e948:	beq	2eacc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d0>
   2e94c:	ldr	r1, [r5, #16]
   2e950:	add	r2, r1, #1
   2e954:	str	r2, [r5, #16]
   2e958:	cmp	r1, #0
   2e95c:	beq	2e974 <flatcc_json_printer_int8_enum_vector_field@@Base+0x78>
   2e960:	ldr	r1, [r4, #20]
   2e964:	add	r2, r1, #1
   2e968:	str	r2, [r4, #20]
   2e96c:	mov	r2, #44	; 0x2c
   2e970:	strb	r2, [r1]
   2e974:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2e978:	mov	r5, r0
   2e97c:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2e980:	mov	r8, r0
   2e984:	mov	r0, r4
   2e988:	mov	r1, r6
   2e98c:	mov	r2, r9
   2e990:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2e994:	ldr	r0, [r4, #20]
   2e998:	ldr	r1, [r4, #32]
   2e99c:	add	r1, r1, #1
   2e9a0:	str	r1, [r4, #32]
   2e9a4:	add	r1, r0, #1
   2e9a8:	str	r1, [r4, #20]
   2e9ac:	mov	r1, #91	; 0x5b
   2e9b0:	strb	r1, [r0]
   2e9b4:	cmp	r8, #0
   2e9b8:	beq	2ea84 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2e9bc:	add	r6, r5, #4
   2e9c0:	ldrb	r0, [r4, #25]
   2e9c4:	cmp	r0, #0
   2e9c8:	beq	2e9ec <flatcc_json_printer_int8_enum_vector_field@@Base+0xf0>
   2e9cc:	ldr	r0, [r4, #20]
   2e9d0:	add	r1, r0, #1
   2e9d4:	str	r1, [r4, #20]
   2e9d8:	mov	r1, #10
   2e9dc:	strb	r1, [r0]
   2e9e0:	mov	r0, r4
   2e9e4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2e9e8:	b	2e9f4 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   2e9ec:	mov	r0, r4
   2e9f0:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2e9f4:	mov	r0, r6
   2e9f8:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2e9fc:	mov	r1, r0
   2ea00:	mov	r0, r4
   2ea04:	blx	r7
   2ea08:	subs	r6, r8, #1
   2ea0c:	beq	2ea84 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2ea10:	add	r5, r5, #5
   2ea14:	mov	r8, #44	; 0x2c
   2ea18:	mov	r9, #10
   2ea1c:	b	2ea48 <flatcc_json_printer_int8_enum_vector_field@@Base+0x14c>
   2ea20:	mov	r0, r4
   2ea24:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2ea28:	mov	r0, r5
   2ea2c:	bl	2b44c <flatcc_json_printer_int8_field@@Base+0xb0>
   2ea30:	mov	r1, r0
   2ea34:	mov	r0, r4
   2ea38:	blx	r7
   2ea3c:	add	r5, r5, #1
   2ea40:	cmp	r6, #0
   2ea44:	beq	2ea84 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2ea48:	ldr	r0, [r4, #20]
   2ea4c:	add	r1, r0, #1
   2ea50:	str	r1, [r4, #20]
   2ea54:	strb	r8, [r0]
   2ea58:	sub	r6, r6, #1
   2ea5c:	ldrb	r0, [r4, #25]
   2ea60:	cmp	r0, #0
   2ea64:	beq	2ea20 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   2ea68:	ldr	r0, [r4, #20]
   2ea6c:	add	r1, r0, #1
   2ea70:	str	r1, [r4, #20]
   2ea74:	strb	r9, [r0]
   2ea78:	mov	r0, r4
   2ea7c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ea80:	b	2ea28 <flatcc_json_printer_int8_enum_vector_field@@Base+0x12c>
   2ea84:	ldrb	r0, [r4, #25]
   2ea88:	cmp	r0, #0
   2ea8c:	beq	2eab8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1bc>
   2ea90:	ldr	r0, [r4, #20]
   2ea94:	add	r1, r0, #1
   2ea98:	str	r1, [r4, #20]
   2ea9c:	mov	r1, #10
   2eaa0:	strb	r1, [r0]
   2eaa4:	ldr	r0, [r4, #32]
   2eaa8:	sub	r0, r0, #1
   2eaac:	str	r0, [r4, #32]
   2eab0:	mov	r0, r4
   2eab4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2eab8:	ldr	r0, [r4, #20]
   2eabc:	add	r1, r0, #1
   2eac0:	str	r1, [r4, #20]
   2eac4:	mov	r1, #93	; 0x5d
   2eac8:	strb	r1, [r0]
   2eacc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002ead0 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2ead0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ead4:	add	fp, sp, #24
   2ead8:	mov	r6, r3
   2eadc:	mov	r5, r1
   2eae0:	mov	r4, r0
   2eae4:	ldrb	r0, [r0, #27]
   2eae8:	cmp	r0, #0
   2eaec:	beq	2eb04 <flatcc_json_printer_int16_enum_vector_field@@Base+0x34>
   2eaf0:	mov	r0, r4
   2eaf4:	mov	r1, r5
   2eaf8:	mov	r3, r6
   2eafc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eb00:	b	2d548 <flatcc_json_printer_int16_vector_field@@Base>
   2eb04:	ldr	r7, [fp, #12]
   2eb08:	ldr	r9, [fp, #8]
   2eb0c:	mov	r0, r5
   2eb10:	mov	r1, r2
   2eb14:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2eb18:	cmp	r0, #0
   2eb1c:	beq	2eca0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d0>
   2eb20:	ldr	r1, [r5, #16]
   2eb24:	add	r2, r1, #1
   2eb28:	str	r2, [r5, #16]
   2eb2c:	cmp	r1, #0
   2eb30:	beq	2eb48 <flatcc_json_printer_int16_enum_vector_field@@Base+0x78>
   2eb34:	ldr	r1, [r4, #20]
   2eb38:	add	r2, r1, #1
   2eb3c:	str	r2, [r4, #20]
   2eb40:	mov	r2, #44	; 0x2c
   2eb44:	strb	r2, [r1]
   2eb48:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2eb4c:	mov	r5, r0
   2eb50:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2eb54:	mov	r8, r0
   2eb58:	mov	r0, r4
   2eb5c:	mov	r1, r6
   2eb60:	mov	r2, r9
   2eb64:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2eb68:	ldr	r0, [r4, #20]
   2eb6c:	ldr	r1, [r4, #32]
   2eb70:	add	r1, r1, #1
   2eb74:	str	r1, [r4, #32]
   2eb78:	add	r1, r0, #1
   2eb7c:	str	r1, [r4, #20]
   2eb80:	mov	r1, #91	; 0x5b
   2eb84:	strb	r1, [r0]
   2eb88:	cmp	r8, #0
   2eb8c:	beq	2ec58 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   2eb90:	add	r6, r5, #4
   2eb94:	ldrb	r0, [r4, #25]
   2eb98:	cmp	r0, #0
   2eb9c:	beq	2ebc0 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf0>
   2eba0:	ldr	r0, [r4, #20]
   2eba4:	add	r1, r0, #1
   2eba8:	str	r1, [r4, #20]
   2ebac:	mov	r1, #10
   2ebb0:	strb	r1, [r0]
   2ebb4:	mov	r0, r4
   2ebb8:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ebbc:	b	2ebc8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf8>
   2ebc0:	mov	r0, r4
   2ebc4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2ebc8:	mov	r0, r6
   2ebcc:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2ebd0:	mov	r1, r0
   2ebd4:	mov	r0, r4
   2ebd8:	blx	r7
   2ebdc:	subs	r6, r8, #1
   2ebe0:	beq	2ec58 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   2ebe4:	add	r5, r5, #6
   2ebe8:	mov	r8, #44	; 0x2c
   2ebec:	mov	r9, #10
   2ebf0:	b	2ec1c <flatcc_json_printer_int16_enum_vector_field@@Base+0x14c>
   2ebf4:	mov	r0, r4
   2ebf8:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2ebfc:	mov	r0, r5
   2ec00:	bl	2b504 <flatcc_json_printer_int16_field@@Base+0xb0>
   2ec04:	mov	r1, r0
   2ec08:	mov	r0, r4
   2ec0c:	blx	r7
   2ec10:	add	r5, r5, #2
   2ec14:	cmp	r6, #0
   2ec18:	beq	2ec58 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   2ec1c:	ldr	r0, [r4, #20]
   2ec20:	add	r1, r0, #1
   2ec24:	str	r1, [r4, #20]
   2ec28:	strb	r8, [r0]
   2ec2c:	sub	r6, r6, #1
   2ec30:	ldrb	r0, [r4, #25]
   2ec34:	cmp	r0, #0
   2ec38:	beq	2ebf4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x124>
   2ec3c:	ldr	r0, [r4, #20]
   2ec40:	add	r1, r0, #1
   2ec44:	str	r1, [r4, #20]
   2ec48:	strb	r9, [r0]
   2ec4c:	mov	r0, r4
   2ec50:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ec54:	b	2ebfc <flatcc_json_printer_int16_enum_vector_field@@Base+0x12c>
   2ec58:	ldrb	r0, [r4, #25]
   2ec5c:	cmp	r0, #0
   2ec60:	beq	2ec8c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1bc>
   2ec64:	ldr	r0, [r4, #20]
   2ec68:	add	r1, r0, #1
   2ec6c:	str	r1, [r4, #20]
   2ec70:	mov	r1, #10
   2ec74:	strb	r1, [r0]
   2ec78:	ldr	r0, [r4, #32]
   2ec7c:	sub	r0, r0, #1
   2ec80:	str	r0, [r4, #32]
   2ec84:	mov	r0, r4
   2ec88:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ec8c:	ldr	r0, [r4, #20]
   2ec90:	add	r1, r0, #1
   2ec94:	str	r1, [r4, #20]
   2ec98:	mov	r1, #93	; 0x5d
   2ec9c:	strb	r1, [r0]
   2eca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002eca4 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2eca4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eca8:	add	fp, sp, #24
   2ecac:	mov	r6, r3
   2ecb0:	mov	r5, r1
   2ecb4:	mov	r4, r0
   2ecb8:	ldrb	r0, [r0, #27]
   2ecbc:	cmp	r0, #0
   2ecc0:	beq	2ecd8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x34>
   2ecc4:	mov	r0, r4
   2ecc8:	mov	r1, r5
   2eccc:	mov	r3, r6
   2ecd0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ecd4:	b	2d708 <flatcc_json_printer_int32_vector_field@@Base>
   2ecd8:	ldr	r7, [fp, #12]
   2ecdc:	ldr	r9, [fp, #8]
   2ece0:	mov	r0, r5
   2ece4:	mov	r1, r2
   2ece8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2ecec:	cmp	r0, #0
   2ecf0:	beq	2ee74 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d0>
   2ecf4:	ldr	r1, [r5, #16]
   2ecf8:	add	r2, r1, #1
   2ecfc:	str	r2, [r5, #16]
   2ed00:	cmp	r1, #0
   2ed04:	beq	2ed1c <flatcc_json_printer_int32_enum_vector_field@@Base+0x78>
   2ed08:	ldr	r1, [r4, #20]
   2ed0c:	add	r2, r1, #1
   2ed10:	str	r2, [r4, #20]
   2ed14:	mov	r2, #44	; 0x2c
   2ed18:	strb	r2, [r1]
   2ed1c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2ed20:	mov	r5, r0
   2ed24:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2ed28:	mov	r8, r0
   2ed2c:	mov	r0, r4
   2ed30:	mov	r1, r6
   2ed34:	mov	r2, r9
   2ed38:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2ed3c:	ldr	r0, [r4, #20]
   2ed40:	ldr	r1, [r4, #32]
   2ed44:	add	r1, r1, #1
   2ed48:	str	r1, [r4, #32]
   2ed4c:	add	r1, r0, #1
   2ed50:	str	r1, [r4, #20]
   2ed54:	mov	r1, #91	; 0x5b
   2ed58:	strb	r1, [r0]
   2ed5c:	cmp	r8, #0
   2ed60:	beq	2ee2c <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   2ed64:	add	r6, r5, #4
   2ed68:	ldrb	r0, [r4, #25]
   2ed6c:	cmp	r0, #0
   2ed70:	beq	2ed94 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf0>
   2ed74:	ldr	r0, [r4, #20]
   2ed78:	add	r1, r0, #1
   2ed7c:	str	r1, [r4, #20]
   2ed80:	mov	r1, #10
   2ed84:	strb	r1, [r0]
   2ed88:	mov	r0, r4
   2ed8c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ed90:	b	2ed9c <flatcc_json_printer_int32_enum_vector_field@@Base+0xf8>
   2ed94:	mov	r0, r4
   2ed98:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2ed9c:	mov	r0, r6
   2eda0:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2eda4:	mov	r1, r0
   2eda8:	mov	r0, r4
   2edac:	blx	r7
   2edb0:	subs	r6, r8, #1
   2edb4:	beq	2ee2c <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   2edb8:	add	r5, r5, #8
   2edbc:	mov	r8, #44	; 0x2c
   2edc0:	mov	r9, #10
   2edc4:	b	2edf0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x14c>
   2edc8:	mov	r0, r4
   2edcc:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2edd0:	mov	r0, r5
   2edd4:	bl	2b5bc <flatcc_json_printer_int32_field@@Base+0xb0>
   2edd8:	mov	r1, r0
   2eddc:	mov	r0, r4
   2ede0:	blx	r7
   2ede4:	add	r5, r5, #4
   2ede8:	cmp	r6, #0
   2edec:	beq	2ee2c <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   2edf0:	ldr	r0, [r4, #20]
   2edf4:	add	r1, r0, #1
   2edf8:	str	r1, [r4, #20]
   2edfc:	strb	r8, [r0]
   2ee00:	sub	r6, r6, #1
   2ee04:	ldrb	r0, [r4, #25]
   2ee08:	cmp	r0, #0
   2ee0c:	beq	2edc8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x124>
   2ee10:	ldr	r0, [r4, #20]
   2ee14:	add	r1, r0, #1
   2ee18:	str	r1, [r4, #20]
   2ee1c:	strb	r9, [r0]
   2ee20:	mov	r0, r4
   2ee24:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ee28:	b	2edd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x12c>
   2ee2c:	ldrb	r0, [r4, #25]
   2ee30:	cmp	r0, #0
   2ee34:	beq	2ee60 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1bc>
   2ee38:	ldr	r0, [r4, #20]
   2ee3c:	add	r1, r0, #1
   2ee40:	str	r1, [r4, #20]
   2ee44:	mov	r1, #10
   2ee48:	strb	r1, [r0]
   2ee4c:	ldr	r0, [r4, #32]
   2ee50:	sub	r0, r0, #1
   2ee54:	str	r0, [r4, #32]
   2ee58:	mov	r0, r4
   2ee5c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ee60:	ldr	r0, [r4, #20]
   2ee64:	add	r1, r0, #1
   2ee68:	str	r1, [r4, #20]
   2ee6c:	mov	r1, #93	; 0x5d
   2ee70:	strb	r1, [r0]
   2ee74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002ee78 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2ee78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ee7c:	add	fp, sp, #24
   2ee80:	mov	r7, r3
   2ee84:	mov	r5, r1
   2ee88:	mov	r4, r0
   2ee8c:	ldrb	r0, [r0, #27]
   2ee90:	cmp	r0, #0
   2ee94:	beq	2eeac <flatcc_json_printer_int64_enum_vector_field@@Base+0x34>
   2ee98:	mov	r0, r4
   2ee9c:	mov	r1, r5
   2eea0:	mov	r3, r7
   2eea4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eea8:	b	2d8c8 <flatcc_json_printer_int64_vector_field@@Base>
   2eeac:	ldr	r6, [fp, #12]
   2eeb0:	ldr	r9, [fp, #8]
   2eeb4:	mov	r0, r5
   2eeb8:	mov	r1, r2
   2eebc:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2eec0:	cmp	r0, #0
   2eec4:	beq	2f050 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d8>
   2eec8:	ldr	r1, [r5, #16]
   2eecc:	add	r2, r1, #1
   2eed0:	str	r2, [r5, #16]
   2eed4:	cmp	r1, #0
   2eed8:	beq	2eef0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x78>
   2eedc:	ldr	r1, [r4, #20]
   2eee0:	add	r2, r1, #1
   2eee4:	str	r2, [r4, #20]
   2eee8:	mov	r2, #44	; 0x2c
   2eeec:	strb	r2, [r1]
   2eef0:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2eef4:	mov	r5, r0
   2eef8:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2eefc:	mov	r8, r0
   2ef00:	mov	r0, r4
   2ef04:	mov	r1, r7
   2ef08:	mov	r2, r9
   2ef0c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2ef10:	ldr	r0, [r4, #20]
   2ef14:	ldr	r1, [r4, #32]
   2ef18:	add	r1, r1, #1
   2ef1c:	str	r1, [r4, #32]
   2ef20:	add	r1, r0, #1
   2ef24:	str	r1, [r4, #20]
   2ef28:	mov	r1, #91	; 0x5b
   2ef2c:	strb	r1, [r0]
   2ef30:	cmp	r8, #0
   2ef34:	beq	2f008 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2ef38:	add	r7, r5, #4
   2ef3c:	ldrb	r0, [r4, #25]
   2ef40:	cmp	r0, #0
   2ef44:	beq	2ef68 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf0>
   2ef48:	ldr	r0, [r4, #20]
   2ef4c:	add	r1, r0, #1
   2ef50:	str	r1, [r4, #20]
   2ef54:	mov	r1, #10
   2ef58:	strb	r1, [r0]
   2ef5c:	mov	r0, r4
   2ef60:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ef64:	b	2ef70 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf8>
   2ef68:	mov	r0, r4
   2ef6c:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2ef70:	mov	r0, r7
   2ef74:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2ef78:	mov	r2, r0
   2ef7c:	mov	r0, r4
   2ef80:	mov	r3, r1
   2ef84:	blx	r6
   2ef88:	subs	r7, r8, #1
   2ef8c:	beq	2f008 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2ef90:	add	r5, r5, #12
   2ef94:	mov	r8, #44	; 0x2c
   2ef98:	mov	r9, #10
   2ef9c:	b	2efcc <flatcc_json_printer_int64_enum_vector_field@@Base+0x154>
   2efa0:	mov	r0, r4
   2efa4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2efa8:	mov	r0, r5
   2efac:	bl	2b698 <flatcc_json_printer_int64_field@@Base+0xd4>
   2efb0:	mov	r2, r0
   2efb4:	mov	r0, r4
   2efb8:	mov	r3, r1
   2efbc:	blx	r6
   2efc0:	add	r5, r5, #8
   2efc4:	cmp	r7, #0
   2efc8:	beq	2f008 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2efcc:	ldr	r0, [r4, #20]
   2efd0:	add	r1, r0, #1
   2efd4:	str	r1, [r4, #20]
   2efd8:	strb	r8, [r0]
   2efdc:	sub	r7, r7, #1
   2efe0:	ldrb	r0, [r4, #25]
   2efe4:	cmp	r0, #0
   2efe8:	beq	2efa0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x128>
   2efec:	ldr	r0, [r4, #20]
   2eff0:	add	r1, r0, #1
   2eff4:	str	r1, [r4, #20]
   2eff8:	strb	r9, [r0]
   2effc:	mov	r0, r4
   2f000:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f004:	b	2efa8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x130>
   2f008:	ldrb	r0, [r4, #25]
   2f00c:	cmp	r0, #0
   2f010:	beq	2f03c <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c4>
   2f014:	ldr	r0, [r4, #20]
   2f018:	add	r1, r0, #1
   2f01c:	str	r1, [r4, #20]
   2f020:	mov	r1, #10
   2f024:	strb	r1, [r0]
   2f028:	ldr	r0, [r4, #32]
   2f02c:	sub	r0, r0, #1
   2f030:	str	r0, [r4, #32]
   2f034:	mov	r0, r4
   2f038:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f03c:	ldr	r0, [r4, #20]
   2f040:	add	r1, r0, #1
   2f044:	str	r1, [r4, #20]
   2f048:	mov	r1, #93	; 0x5d
   2f04c:	strb	r1, [r0]
   2f050:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002f054 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2f054:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f058:	add	fp, sp, #24
   2f05c:	mov	r6, r3
   2f060:	mov	r5, r1
   2f064:	mov	r4, r0
   2f068:	ldrb	r0, [r0, #27]
   2f06c:	cmp	r0, #0
   2f070:	beq	2f088 <flatcc_json_printer_bool_enum_vector_field@@Base+0x34>
   2f074:	mov	r0, r4
   2f078:	mov	r1, r5
   2f07c:	mov	r3, r6
   2f080:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f084:	b	2da88 <flatcc_json_printer_bool_vector_field@@Base>
   2f088:	ldr	r7, [fp, #12]
   2f08c:	ldr	r9, [fp, #8]
   2f090:	mov	r0, r5
   2f094:	mov	r1, r2
   2f098:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2f09c:	cmp	r0, #0
   2f0a0:	beq	2f224 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d0>
   2f0a4:	ldr	r1, [r5, #16]
   2f0a8:	add	r2, r1, #1
   2f0ac:	str	r2, [r5, #16]
   2f0b0:	cmp	r1, #0
   2f0b4:	beq	2f0cc <flatcc_json_printer_bool_enum_vector_field@@Base+0x78>
   2f0b8:	ldr	r1, [r4, #20]
   2f0bc:	add	r2, r1, #1
   2f0c0:	str	r2, [r4, #20]
   2f0c4:	mov	r2, #44	; 0x2c
   2f0c8:	strb	r2, [r1]
   2f0cc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f0d0:	mov	r5, r0
   2f0d4:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f0d8:	mov	r8, r0
   2f0dc:	mov	r0, r4
   2f0e0:	mov	r1, r6
   2f0e4:	mov	r2, r9
   2f0e8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2f0ec:	ldr	r0, [r4, #20]
   2f0f0:	ldr	r1, [r4, #32]
   2f0f4:	add	r1, r1, #1
   2f0f8:	str	r1, [r4, #32]
   2f0fc:	add	r1, r0, #1
   2f100:	str	r1, [r4, #20]
   2f104:	mov	r1, #91	; 0x5b
   2f108:	strb	r1, [r0]
   2f10c:	cmp	r8, #0
   2f110:	beq	2f1dc <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2f114:	add	r6, r5, #4
   2f118:	ldrb	r0, [r4, #25]
   2f11c:	cmp	r0, #0
   2f120:	beq	2f144 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf0>
   2f124:	ldr	r0, [r4, #20]
   2f128:	add	r1, r0, #1
   2f12c:	str	r1, [r4, #20]
   2f130:	mov	r1, #10
   2f134:	strb	r1, [r0]
   2f138:	mov	r0, r4
   2f13c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f140:	b	2f14c <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   2f144:	mov	r0, r4
   2f148:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2f14c:	mov	r0, r6
   2f150:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2f154:	mov	r1, r0
   2f158:	mov	r0, r4
   2f15c:	blx	r7
   2f160:	subs	r6, r8, #1
   2f164:	beq	2f1dc <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2f168:	add	r5, r5, #5
   2f16c:	mov	r8, #44	; 0x2c
   2f170:	mov	r9, #10
   2f174:	b	2f1a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x14c>
   2f178:	mov	r0, r4
   2f17c:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2f180:	mov	r0, r5
   2f184:	bl	2b750 <flatcc_json_printer_bool_field@@Base+0xb0>
   2f188:	mov	r1, r0
   2f18c:	mov	r0, r4
   2f190:	blx	r7
   2f194:	add	r5, r5, #1
   2f198:	cmp	r6, #0
   2f19c:	beq	2f1dc <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2f1a0:	ldr	r0, [r4, #20]
   2f1a4:	add	r1, r0, #1
   2f1a8:	str	r1, [r4, #20]
   2f1ac:	strb	r8, [r0]
   2f1b0:	sub	r6, r6, #1
   2f1b4:	ldrb	r0, [r4, #25]
   2f1b8:	cmp	r0, #0
   2f1bc:	beq	2f178 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   2f1c0:	ldr	r0, [r4, #20]
   2f1c4:	add	r1, r0, #1
   2f1c8:	str	r1, [r4, #20]
   2f1cc:	strb	r9, [r0]
   2f1d0:	mov	r0, r4
   2f1d4:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f1d8:	b	2f180 <flatcc_json_printer_bool_enum_vector_field@@Base+0x12c>
   2f1dc:	ldrb	r0, [r4, #25]
   2f1e0:	cmp	r0, #0
   2f1e4:	beq	2f210 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1bc>
   2f1e8:	ldr	r0, [r4, #20]
   2f1ec:	add	r1, r0, #1
   2f1f0:	str	r1, [r4, #20]
   2f1f4:	mov	r1, #10
   2f1f8:	strb	r1, [r0]
   2f1fc:	ldr	r0, [r4, #32]
   2f200:	sub	r0, r0, #1
   2f204:	str	r0, [r4, #32]
   2f208:	mov	r0, r4
   2f20c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f210:	ldr	r0, [r4, #20]
   2f214:	add	r1, r0, #1
   2f218:	str	r1, [r4, #20]
   2f21c:	mov	r1, #93	; 0x5d
   2f220:	strb	r1, [r0]
   2f224:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002f228 <flatcc_json_printer_struct_vector_field@@Base>:
   2f228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f22c:	add	fp, sp, #28
   2f230:	sub	sp, sp, #4
   2f234:	mov	r7, r3
   2f238:	mov	r5, r1
   2f23c:	mov	r4, r0
   2f240:	mov	r0, r1
   2f244:	mov	r1, r2
   2f248:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2f24c:	cmp	r0, #0
   2f250:	beq	2f4a8 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   2f254:	ldr	r8, [fp, #8]
   2f258:	ldr	r1, [r5, #16]
   2f25c:	add	r2, r1, #1
   2f260:	str	r2, [r5, #16]
   2f264:	cmp	r1, #0
   2f268:	beq	2f280 <flatcc_json_printer_struct_vector_field@@Base+0x58>
   2f26c:	ldr	r1, [r4, #20]
   2f270:	add	r2, r1, #1
   2f274:	str	r2, [r4, #20]
   2f278:	mov	r2, #44	; 0x2c
   2f27c:	strb	r2, [r1]
   2f280:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f284:	mov	r5, r0
   2f288:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f28c:	mov	r9, r0
   2f290:	mov	r0, r4
   2f294:	mov	r1, r7
   2f298:	mov	r2, r8
   2f29c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2f2a0:	ldr	r0, [r4, #20]
   2f2a4:	ldr	r1, [r4, #32]
   2f2a8:	add	r1, r1, #1
   2f2ac:	str	r1, [r4, #32]
   2f2b0:	add	r1, r0, #1
   2f2b4:	str	r1, [r4, #20]
   2f2b8:	mov	r1, #91	; 0x5b
   2f2bc:	strb	r1, [r0]
   2f2c0:	cmp	r9, #0
   2f2c4:	beq	2f460 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2f2c8:	add	r8, r5, #4
   2f2cc:	ldrb	r0, [r4, #25]
   2f2d0:	cmp	r0, #0
   2f2d4:	beq	2f2f8 <flatcc_json_printer_struct_vector_field@@Base+0xd0>
   2f2d8:	ldr	r0, [r4, #20]
   2f2dc:	add	r1, r0, #1
   2f2e0:	str	r1, [r4, #20]
   2f2e4:	mov	r1, #10
   2f2e8:	strb	r1, [r0]
   2f2ec:	mov	r0, r4
   2f2f0:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f2f4:	b	2f300 <flatcc_json_printer_struct_vector_field@@Base+0xd8>
   2f2f8:	mov	r0, r4
   2f2fc:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2f300:	ldr	r0, [r4, #20]
   2f304:	ldr	r1, [r4, #32]
   2f308:	add	r1, r1, #1
   2f30c:	str	r1, [r4, #32]
   2f310:	add	r1, r0, #1
   2f314:	str	r1, [r4, #20]
   2f318:	mov	r1, #123	; 0x7b
   2f31c:	strb	r1, [r0]
   2f320:	mov	r0, r4
   2f324:	mov	r1, r8
   2f328:	ldr	r2, [fp, #16]
   2f32c:	blx	r2
   2f330:	ldrb	r0, [r4, #25]
   2f334:	cmp	r0, #0
   2f338:	beq	2f364 <flatcc_json_printer_struct_vector_field@@Base+0x13c>
   2f33c:	ldr	r0, [r4, #20]
   2f340:	add	r1, r0, #1
   2f344:	str	r1, [r4, #20]
   2f348:	mov	r1, #10
   2f34c:	strb	r1, [r0]
   2f350:	ldr	r0, [r4, #32]
   2f354:	sub	r0, r0, #1
   2f358:	str	r0, [r4, #32]
   2f35c:	mov	r0, r4
   2f360:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f364:	ldr	r0, [r4, #20]
   2f368:	add	r1, r0, #1
   2f36c:	str	r1, [r4, #20]
   2f370:	mov	r1, #125	; 0x7d
   2f374:	strb	r1, [r0]
   2f378:	subs	r7, r9, #1
   2f37c:	beq	2f460 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2f380:	ldr	r9, [fp, #12]
   2f384:	add	r0, r9, r5
   2f388:	add	r5, r0, #4
   2f38c:	mov	r6, #44	; 0x2c
   2f390:	mov	sl, #123	; 0x7b
   2f394:	mov	r8, #10
   2f398:	b	2f3bc <flatcc_json_printer_struct_vector_field@@Base+0x194>
   2f39c:	ldr	r0, [r4, #20]
   2f3a0:	add	r1, r0, #1
   2f3a4:	str	r1, [r4, #20]
   2f3a8:	mov	r1, #125	; 0x7d
   2f3ac:	strb	r1, [r0]
   2f3b0:	add	r5, r5, r9
   2f3b4:	cmp	r7, #0
   2f3b8:	beq	2f460 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   2f3bc:	ldr	r0, [r4, #20]
   2f3c0:	add	r1, r0, #1
   2f3c4:	str	r1, [r4, #20]
   2f3c8:	strb	r6, [r0]
   2f3cc:	ldrb	r0, [r4, #25]
   2f3d0:	cmp	r0, #0
   2f3d4:	beq	2f3f4 <flatcc_json_printer_struct_vector_field@@Base+0x1cc>
   2f3d8:	ldr	r0, [r4, #20]
   2f3dc:	add	r1, r0, #1
   2f3e0:	str	r1, [r4, #20]
   2f3e4:	strb	r8, [r0]
   2f3e8:	mov	r0, r4
   2f3ec:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f3f0:	b	2f3fc <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   2f3f4:	mov	r0, r4
   2f3f8:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2f3fc:	sub	r7, r7, #1
   2f400:	ldr	r0, [r4, #20]
   2f404:	ldr	r1, [r4, #32]
   2f408:	add	r1, r1, #1
   2f40c:	str	r1, [r4, #32]
   2f410:	add	r1, r0, #1
   2f414:	str	r1, [r4, #20]
   2f418:	strb	sl, [r0]
   2f41c:	mov	r0, r4
   2f420:	mov	r1, r5
   2f424:	ldr	r2, [fp, #16]
   2f428:	blx	r2
   2f42c:	ldrb	r0, [r4, #25]
   2f430:	cmp	r0, #0
   2f434:	beq	2f39c <flatcc_json_printer_struct_vector_field@@Base+0x174>
   2f438:	ldr	r0, [r4, #20]
   2f43c:	add	r1, r0, #1
   2f440:	str	r1, [r4, #20]
   2f444:	strb	r8, [r0]
   2f448:	ldr	r0, [r4, #32]
   2f44c:	sub	r0, r0, #1
   2f450:	str	r0, [r4, #32]
   2f454:	mov	r0, r4
   2f458:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f45c:	b	2f39c <flatcc_json_printer_struct_vector_field@@Base+0x174>
   2f460:	ldrb	r0, [r4, #25]
   2f464:	cmp	r0, #0
   2f468:	beq	2f494 <flatcc_json_printer_struct_vector_field@@Base+0x26c>
   2f46c:	ldr	r0, [r4, #20]
   2f470:	add	r1, r0, #1
   2f474:	str	r1, [r4, #20]
   2f478:	mov	r1, #10
   2f47c:	strb	r1, [r0]
   2f480:	ldr	r0, [r4, #32]
   2f484:	sub	r0, r0, #1
   2f488:	str	r0, [r4, #32]
   2f48c:	mov	r0, r4
   2f490:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f494:	ldr	r0, [r4, #20]
   2f498:	add	r1, r0, #1
   2f49c:	str	r1, [r4, #20]
   2f4a0:	mov	r1, #93	; 0x5d
   2f4a4:	strb	r1, [r0]
   2f4a8:	sub	sp, fp, #28
   2f4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f4b0 <flatcc_json_printer_string_vector_field@@Base>:
   2f4b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2f4b4:	add	fp, sp, #24
   2f4b8:	mov	r7, r3
   2f4bc:	mov	r5, r1
   2f4c0:	mov	r4, r0
   2f4c4:	mov	r0, r1
   2f4c8:	mov	r1, r2
   2f4cc:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2f4d0:	cmp	r0, #0
   2f4d4:	beq	2f65c <flatcc_json_printer_string_vector_field@@Base+0x1ac>
   2f4d8:	ldr	r8, [fp, #8]
   2f4dc:	ldr	r1, [r5, #16]
   2f4e0:	add	r2, r1, #1
   2f4e4:	str	r2, [r5, #16]
   2f4e8:	cmp	r1, #0
   2f4ec:	beq	2f504 <flatcc_json_printer_string_vector_field@@Base+0x54>
   2f4f0:	ldr	r1, [r4, #20]
   2f4f4:	add	r2, r1, #1
   2f4f8:	str	r2, [r4, #20]
   2f4fc:	mov	r2, #44	; 0x2c
   2f500:	strb	r2, [r1]
   2f504:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f508:	mov	r5, r0
   2f50c:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f510:	mov	r6, r0
   2f514:	mov	r0, r4
   2f518:	mov	r1, r7
   2f51c:	mov	r2, r8
   2f520:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2f524:	ldr	r0, [r4, #20]
   2f528:	ldr	r1, [r4, #32]
   2f52c:	add	r1, r1, #1
   2f530:	str	r1, [r4, #32]
   2f534:	add	r1, r0, #1
   2f538:	str	r1, [r4, #20]
   2f53c:	mov	r1, #91	; 0x5b
   2f540:	strb	r1, [r0]
   2f544:	cmp	r6, #0
   2f548:	beq	2f614 <flatcc_json_printer_string_vector_field@@Base+0x164>
   2f54c:	add	r7, r5, #4
   2f550:	ldrb	r0, [r4, #25]
   2f554:	cmp	r0, #0
   2f558:	beq	2f57c <flatcc_json_printer_string_vector_field@@Base+0xcc>
   2f55c:	ldr	r0, [r4, #20]
   2f560:	add	r1, r0, #1
   2f564:	str	r1, [r4, #20]
   2f568:	mov	r1, #10
   2f56c:	strb	r1, [r0]
   2f570:	mov	r0, r4
   2f574:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f578:	b	2f584 <flatcc_json_printer_string_vector_field@@Base+0xd4>
   2f57c:	mov	r0, r4
   2f580:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2f584:	mov	r0, r7
   2f588:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f58c:	mov	r1, r0
   2f590:	mov	r0, r4
   2f594:	bl	2ae68 <flatcc_json_printer_string_field@@Base+0x150>
   2f598:	subs	r6, r6, #1
   2f59c:	beq	2f614 <flatcc_json_printer_string_vector_field@@Base+0x164>
   2f5a0:	add	r5, r5, #8
   2f5a4:	mov	r7, #44	; 0x2c
   2f5a8:	mov	r8, #10
   2f5ac:	b	2f5d8 <flatcc_json_printer_string_vector_field@@Base+0x128>
   2f5b0:	mov	r0, r4
   2f5b4:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2f5b8:	mov	r0, r5
   2f5bc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f5c0:	mov	r1, r0
   2f5c4:	mov	r0, r4
   2f5c8:	bl	2ae68 <flatcc_json_printer_string_field@@Base+0x150>
   2f5cc:	add	r5, r5, #4
   2f5d0:	cmp	r6, #0
   2f5d4:	beq	2f614 <flatcc_json_printer_string_vector_field@@Base+0x164>
   2f5d8:	ldr	r0, [r4, #20]
   2f5dc:	add	r1, r0, #1
   2f5e0:	str	r1, [r4, #20]
   2f5e4:	strb	r7, [r0]
   2f5e8:	sub	r6, r6, #1
   2f5ec:	ldrb	r0, [r4, #25]
   2f5f0:	cmp	r0, #0
   2f5f4:	beq	2f5b0 <flatcc_json_printer_string_vector_field@@Base+0x100>
   2f5f8:	ldr	r0, [r4, #20]
   2f5fc:	add	r1, r0, #1
   2f600:	str	r1, [r4, #20]
   2f604:	strb	r8, [r0]
   2f608:	mov	r0, r4
   2f60c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f610:	b	2f5b8 <flatcc_json_printer_string_vector_field@@Base+0x108>
   2f614:	ldrb	r0, [r4, #25]
   2f618:	cmp	r0, #0
   2f61c:	beq	2f648 <flatcc_json_printer_string_vector_field@@Base+0x198>
   2f620:	ldr	r0, [r4, #20]
   2f624:	add	r1, r0, #1
   2f628:	str	r1, [r4, #20]
   2f62c:	mov	r1, #10
   2f630:	strb	r1, [r0]
   2f634:	ldr	r0, [r4, #32]
   2f638:	sub	r0, r0, #1
   2f63c:	str	r0, [r4, #32]
   2f640:	mov	r0, r4
   2f644:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f648:	ldr	r0, [r4, #20]
   2f64c:	add	r1, r0, #1
   2f650:	str	r1, [r4, #20]
   2f654:	mov	r1, #93	; 0x5d
   2f658:	strb	r1, [r0]
   2f65c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002f660 <flatcc_json_printer_table_vector_field@@Base>:
   2f660:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f664:	add	fp, sp, #24
   2f668:	mov	r6, r3
   2f66c:	mov	r5, r1
   2f670:	mov	r4, r0
   2f674:	mov	r0, r1
   2f678:	mov	r1, r2
   2f67c:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2f680:	cmp	r0, #0
   2f684:	beq	2f7ac <flatcc_json_printer_table_vector_field@@Base+0x14c>
   2f688:	ldr	r9, [fp, #8]
   2f68c:	ldr	r1, [r5, #16]
   2f690:	add	r2, r1, #1
   2f694:	str	r2, [r5, #16]
   2f698:	cmp	r1, #0
   2f69c:	beq	2f6b4 <flatcc_json_printer_table_vector_field@@Base+0x54>
   2f6a0:	ldr	r1, [r4, #20]
   2f6a4:	add	r2, r1, #1
   2f6a8:	str	r2, [r4, #20]
   2f6ac:	mov	r2, #44	; 0x2c
   2f6b0:	strb	r2, [r1]
   2f6b4:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f6b8:	mov	r8, r0
   2f6bc:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f6c0:	mov	r7, r0
   2f6c4:	mov	r0, r4
   2f6c8:	mov	r1, r6
   2f6cc:	mov	r2, r9
   2f6d0:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2f6d4:	ldr	r0, [r4, #20]
   2f6d8:	ldr	r1, [r4, #32]
   2f6dc:	add	r1, r1, #1
   2f6e0:	str	r1, [r4, #32]
   2f6e4:	add	r1, r0, #1
   2f6e8:	str	r1, [r4, #20]
   2f6ec:	mov	r1, #91	; 0x5b
   2f6f0:	strb	r1, [r0]
   2f6f4:	cmp	r7, #0
   2f6f8:	beq	2f764 <flatcc_json_printer_table_vector_field@@Base+0x104>
   2f6fc:	ldr	r9, [fp, #12]
   2f700:	add	r0, r8, #4
   2f704:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f708:	mov	r1, r0
   2f70c:	ldr	r2, [r5, #12]
   2f710:	mov	r0, r4
   2f714:	mov	r3, r9
   2f718:	bl	2f7b0 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2f71c:	subs	r6, r7, #1
   2f720:	beq	2f764 <flatcc_json_printer_table_vector_field@@Base+0x104>
   2f724:	add	r7, r8, #8
   2f728:	mov	r8, #44	; 0x2c
   2f72c:	ldr	r0, [r4, #20]
   2f730:	add	r1, r0, #1
   2f734:	str	r1, [r4, #20]
   2f738:	strb	r8, [r0]
   2f73c:	mov	r0, r7
   2f740:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f744:	mov	r1, r0
   2f748:	ldr	r2, [r5, #12]
   2f74c:	mov	r0, r4
   2f750:	mov	r3, r9
   2f754:	bl	2f7b0 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2f758:	add	r7, r7, #4
   2f75c:	subs	r6, r6, #1
   2f760:	bne	2f72c <flatcc_json_printer_table_vector_field@@Base+0xcc>
   2f764:	ldrb	r0, [r4, #25]
   2f768:	cmp	r0, #0
   2f76c:	beq	2f798 <flatcc_json_printer_table_vector_field@@Base+0x138>
   2f770:	ldr	r0, [r4, #20]
   2f774:	add	r1, r0, #1
   2f778:	str	r1, [r4, #20]
   2f77c:	mov	r1, #10
   2f780:	strb	r1, [r0]
   2f784:	ldr	r0, [r4, #32]
   2f788:	sub	r0, r0, #1
   2f78c:	str	r0, [r4, #32]
   2f790:	mov	r0, r4
   2f794:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f798:	ldr	r0, [r4, #20]
   2f79c:	add	r1, r0, #1
   2f7a0:	str	r1, [r4, #20]
   2f7a4:	mov	r1, #93	; 0x5d
   2f7a8:	strb	r1, [r0]
   2f7ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2f7b0:	push	{r4, r5, r6, sl, fp, lr}
   2f7b4:	add	fp, sp, #16
   2f7b8:	sub	sp, sp, #24
   2f7bc:	mov	r4, r0
   2f7c0:	subs	r0, r2, #1
   2f7c4:	beq	2f874 <flatcc_json_printer_table_vector_field@@Base+0x214>
   2f7c8:	mov	r5, r3
   2f7cc:	mov	r6, r1
   2f7d0:	ldr	r1, [r4, #20]
   2f7d4:	ldr	r2, [r4, #32]
   2f7d8:	add	r2, r2, #1
   2f7dc:	str	r2, [r4, #32]
   2f7e0:	add	r2, r1, #1
   2f7e4:	str	r2, [r4, #20]
   2f7e8:	mov	r2, #123	; 0x7b
   2f7ec:	strb	r2, [r1]
   2f7f0:	str	r0, [sp, #16]
   2f7f4:	mov	r0, #0
   2f7f8:	str	r0, [sp, #20]
   2f7fc:	str	r6, [sp, #4]
   2f800:	mov	r0, r6
   2f804:	bl	31704 <flatcc_json_printer_clear@@Base+0xe78>
   2f808:	sub	r0, r6, r0
   2f80c:	str	r0, [sp, #8]
   2f810:	bl	31524 <flatcc_json_printer_clear@@Base+0xc98>
   2f814:	str	r0, [sp, #12]
   2f818:	add	r1, sp, #4
   2f81c:	mov	r0, r4
   2f820:	blx	r5
   2f824:	ldrb	r0, [r4, #25]
   2f828:	cmp	r0, #0
   2f82c:	beq	2f858 <flatcc_json_printer_table_vector_field@@Base+0x1f8>
   2f830:	ldr	r0, [r4, #20]
   2f834:	add	r1, r0, #1
   2f838:	str	r1, [r4, #20]
   2f83c:	mov	r1, #10
   2f840:	strb	r1, [r0]
   2f844:	ldr	r0, [r4, #32]
   2f848:	sub	r0, r0, #1
   2f84c:	str	r0, [r4, #32]
   2f850:	mov	r0, r4
   2f854:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2f858:	ldr	r0, [r4, #20]
   2f85c:	add	r1, r0, #1
   2f860:	str	r1, [r4, #20]
   2f864:	mov	r1, #125	; 0x7d
   2f868:	strb	r1, [r0]
   2f86c:	sub	sp, fp, #16
   2f870:	pop	{r4, r5, r6, sl, fp, pc}
   2f874:	mov	r0, r4
   2f878:	mov	r1, #2
   2f87c:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2f880:	sub	sp, fp, #16
   2f884:	pop	{r4, r5, r6, sl, fp, pc}

0002f888 <flatcc_json_printer_union_vector_field@@Base>:
   2f888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f88c:	add	fp, sp, #28
   2f890:	sub	sp, sp, #140	; 0x8c
   2f894:	mov	r6, r3
   2f898:	mov	r7, r2
   2f89c:	mov	r5, r1
   2f8a0:	mov	r4, r0
   2f8a4:	sub	r1, r2, #1
   2f8a8:	mov	r0, r5
   2f8ac:	str	r1, [sp, #12]
   2f8b0:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2f8b4:	mov	r8, r0
   2f8b8:	mov	r0, r5
   2f8bc:	mov	r1, r7
   2f8c0:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2f8c4:	mov	r7, r0
   2f8c8:	ldr	r0, [r5, #12]
   2f8cc:	str	r0, [sp, #24]
   2f8d0:	ldr	r9, [fp, #8]
   2f8d4:	cmp	r9, #101	; 0x65
   2f8d8:	bge	2fb58 <flatcc_json_printer_union_vector_field@@Base+0x2d0>
   2f8dc:	add	sl, sp, #32
   2f8e0:	mov	r0, sl
   2f8e4:	str	r6, [sp, #16]
   2f8e8:	mov	r1, r6
   2f8ec:	mov	r2, r9
   2f8f0:	bl	14e5c <memcpy@plt>
   2f8f4:	movw	r0, #29791	; 0x745f
   2f8f8:	movt	r0, #28793	; 0x7079
   2f8fc:	str	r0, [sl, r9]
   2f900:	add	r0, sl, r9
   2f904:	mov	r1, #101	; 0x65
   2f908:	strb	r1, [r0, #4]
   2f90c:	cmp	r8, #0
   2f910:	cmpne	r7, #0
   2f914:	bne	2f920 <flatcc_json_printer_union_vector_field@@Base+0x98>
   2f918:	sub	sp, fp, #28
   2f91c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f920:	ldr	r0, [fp, #12]
   2f924:	add	r1, r9, #5
   2f928:	str	r1, [sp]
   2f92c:	str	r0, [sp, #4]
   2f930:	add	r3, sp, #32
   2f934:	mov	r0, r4
   2f938:	mov	r1, r5
   2f93c:	ldr	r2, [sp, #12]
   2f940:	bl	2dfd0 <flatcc_json_printer_utype_enum_vector_field@@Base>
   2f944:	ldr	r0, [r5, #16]
   2f948:	add	r1, r0, #1
   2f94c:	str	r1, [r5, #16]
   2f950:	cmp	r0, #0
   2f954:	beq	2f96c <flatcc_json_printer_union_vector_field@@Base+0xe4>
   2f958:	ldr	r0, [r4, #20]
   2f95c:	add	r1, r0, #1
   2f960:	str	r1, [r4, #20]
   2f964:	mov	r1, #44	; 0x2c
   2f968:	strb	r1, [r0]
   2f96c:	mov	r0, r7
   2f970:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f974:	mov	r5, r0
   2f978:	mov	r0, r8
   2f97c:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2f980:	mov	sl, r0
   2f984:	mov	r0, r5
   2f988:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   2f98c:	mov	r6, r0
   2f990:	mov	r0, r4
   2f994:	ldr	r1, [sp, #16]
   2f998:	mov	r2, r9
   2f99c:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2f9a0:	mov	r7, r4
   2f9a4:	ldr	r0, [r7, #20]!
   2f9a8:	add	r1, r0, #1
   2f9ac:	str	r1, [r7]
   2f9b0:	ldr	r1, [r7, #12]
   2f9b4:	add	r1, r1, #1
   2f9b8:	str	r1, [r7, #12]
   2f9bc:	mov	r1, #91	; 0x5b
   2f9c0:	strb	r1, [r0]
   2f9c4:	cmp	r6, #0
   2f9c8:	beq	2fb08 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2f9cc:	ldr	r8, [fp, #16]
   2f9d0:	add	r0, sl, #4
   2f9d4:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2f9d8:	cmp	r0, #0
   2f9dc:	beq	2fa08 <flatcc_json_printer_union_vector_field@@Base+0x180>
   2f9e0:	add	r1, r5, #4
   2f9e4:	str	r1, [sp, #20]
   2f9e8:	strb	r0, [sp, #28]
   2f9ec:	add	r1, sp, #20
   2f9f0:	mov	r0, r4
   2f9f4:	mov	r9, r8
   2f9f8:	blx	r8
   2f9fc:	subs	r8, r6, #1
   2fa00:	bne	2fa60 <flatcc_json_printer_union_vector_field@@Base+0x1d8>
   2fa04:	b	2fb08 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2fa08:	mov	r9, r8
   2fa0c:	ldr	r0, [r7]
   2fa10:	add	r1, r0, #1
   2fa14:	str	r1, [r7]
   2fa18:	mov	r1, #110	; 0x6e
   2fa1c:	strb	r1, [r0]
   2fa20:	ldr	r0, [r7]
   2fa24:	add	r1, r0, #1
   2fa28:	str	r1, [r7]
   2fa2c:	mov	r1, #117	; 0x75
   2fa30:	strb	r1, [r0]
   2fa34:	ldr	r0, [r7]
   2fa38:	add	r1, r0, #1
   2fa3c:	str	r1, [r7]
   2fa40:	mov	r1, #108	; 0x6c
   2fa44:	strb	r1, [r0]
   2fa48:	ldr	r0, [r7]
   2fa4c:	add	r2, r0, #1
   2fa50:	str	r2, [r7]
   2fa54:	strb	r1, [r0]
   2fa58:	subs	r8, r6, #1
   2fa5c:	beq	2fb08 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2fa60:	add	r6, r5, #8
   2fa64:	add	r5, sl, #5
   2fa68:	mov	sl, #44	; 0x2c
   2fa6c:	b	2facc <flatcc_json_printer_union_vector_field@@Base+0x244>
   2fa70:	ldr	r0, [r7]
   2fa74:	add	r1, r0, #1
   2fa78:	str	r1, [r7]
   2fa7c:	mov	r1, #110	; 0x6e
   2fa80:	strb	r1, [r0]
   2fa84:	ldr	r0, [r7]
   2fa88:	add	r1, r0, #1
   2fa8c:	str	r1, [r7]
   2fa90:	mov	r1, #117	; 0x75
   2fa94:	strb	r1, [r0]
   2fa98:	ldr	r0, [r7]
   2fa9c:	add	r1, r0, #1
   2faa0:	str	r1, [r7]
   2faa4:	mov	r2, #108	; 0x6c
   2faa8:	strb	r2, [r0]
   2faac:	ldr	r0, [r7]
   2fab0:	add	r1, r0, #1
   2fab4:	str	r1, [r7]
   2fab8:	strb	r2, [r0]
   2fabc:	add	r6, r6, #4
   2fac0:	add	r5, r5, #1
   2fac4:	cmp	r8, #0
   2fac8:	beq	2fb08 <flatcc_json_printer_union_vector_field@@Base+0x280>
   2facc:	mov	r0, r5
   2fad0:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2fad4:	ldr	r1, [r7]
   2fad8:	add	r2, r1, #1
   2fadc:	str	r2, [r7]
   2fae0:	strb	sl, [r1]
   2fae4:	sub	r8, r8, #1
   2fae8:	cmp	r0, #0
   2faec:	beq	2fa70 <flatcc_json_printer_union_vector_field@@Base+0x1e8>
   2faf0:	str	r6, [sp, #20]
   2faf4:	strb	r0, [sp, #28]
   2faf8:	mov	r0, r4
   2fafc:	add	r1, sp, #20
   2fb00:	blx	r9
   2fb04:	b	2fabc <flatcc_json_printer_union_vector_field@@Base+0x234>
   2fb08:	ldrb	r0, [r4, #25]
   2fb0c:	cmp	r0, #0
   2fb10:	beq	2fb3c <flatcc_json_printer_union_vector_field@@Base+0x2b4>
   2fb14:	ldr	r0, [r4, #20]
   2fb18:	add	r1, r0, #1
   2fb1c:	str	r1, [r4, #20]
   2fb20:	mov	r1, #10
   2fb24:	strb	r1, [r0]
   2fb28:	ldr	r0, [r4, #32]
   2fb2c:	sub	r0, r0, #1
   2fb30:	str	r0, [r4, #32]
   2fb34:	mov	r0, r4
   2fb38:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2fb3c:	ldr	r0, [r7]
   2fb40:	add	r1, r0, #1
   2fb44:	str	r1, [r7]
   2fb48:	mov	r1, #93	; 0x5d
   2fb4c:	strb	r1, [r0]
   2fb50:	sub	sp, fp, #28
   2fb54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb58:	mov	r0, r4
   2fb5c:	mov	r1, #1
   2fb60:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   2fb64:	movw	r0, #34104	; 0x8538
   2fb68:	movt	r0, #3
   2fb6c:	movw	r1, #34131	; 0x8553
   2fb70:	movt	r1, #3
   2fb74:	movw	r3, #34206	; 0x859e
   2fb78:	movt	r3, #3
   2fb7c:	movw	r2, #843	; 0x34b
   2fb80:	bl	14f40 <__assert_fail@plt>
   2fb84:	ldr	r2, [r0, #36]	; 0x24
   2fb88:	cmp	r2, #0
   2fb8c:	streq	r1, [r0, #36]	; 0x24
   2fb90:	bx	lr

0002fb94 <flatcc_json_printer_table_field@@Base>:
   2fb94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fb98:	add	fp, sp, #24
   2fb9c:	mov	r6, r3
   2fba0:	mov	r5, r1
   2fba4:	mov	r4, r0
   2fba8:	mov	r0, r1
   2fbac:	mov	r1, r2
   2fbb0:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2fbb4:	cmp	r0, #0
   2fbb8:	beq	2fc1c <flatcc_json_printer_table_field@@Base+0x88>
   2fbbc:	mov	r7, r0
   2fbc0:	ldr	r8, [fp, #12]
   2fbc4:	ldr	r2, [fp, #8]
   2fbc8:	ldr	r0, [r5, #16]
   2fbcc:	add	r1, r0, #1
   2fbd0:	str	r1, [r5, #16]
   2fbd4:	cmp	r0, #0
   2fbd8:	beq	2fbf0 <flatcc_json_printer_table_field@@Base+0x5c>
   2fbdc:	ldr	r0, [r4, #20]
   2fbe0:	add	r1, r0, #1
   2fbe4:	str	r1, [r4, #20]
   2fbe8:	mov	r1, #44	; 0x2c
   2fbec:	strb	r1, [r0]
   2fbf0:	mov	r0, r4
   2fbf4:	mov	r1, r6
   2fbf8:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2fbfc:	mov	r0, r7
   2fc00:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2fc04:	mov	r1, r0
   2fc08:	ldr	r2, [r5, #12]
   2fc0c:	mov	r0, r4
   2fc10:	mov	r3, r8
   2fc14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2fc18:	b	2f7b0 <flatcc_json_printer_table_vector_field@@Base+0x150>
   2fc1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0002fc20 <flatcc_json_printer_union_field@@Base>:
   2fc20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc24:	add	fp, sp, #28
   2fc28:	sub	sp, sp, #12
   2fc2c:	mov	r8, r3
   2fc30:	mov	r7, r2
   2fc34:	mov	r5, r1
   2fc38:	mov	r4, r0
   2fc3c:	sub	r1, r2, #1
   2fc40:	mov	r0, r5
   2fc44:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2fc48:	mov	r6, r0
   2fc4c:	mov	r0, r5
   2fc50:	mov	r1, r7
   2fc54:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2fc58:	cmp	r6, #0
   2fc5c:	movne	r7, r0
   2fc60:	cmpne	r0, #0
   2fc64:	bne	2fc70 <flatcc_json_printer_union_field@@Base+0x50>
   2fc68:	sub	sp, fp, #28
   2fc6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc70:	mov	r0, r6
   2fc74:	bl	2cc80 <flatcc_json_printer_utype_vector_field@@Base+0x1c8>
   2fc78:	mov	r6, r0
   2fc7c:	ldr	r0, [r5, #16]
   2fc80:	add	r1, r0, #1
   2fc84:	str	r1, [r5, #16]
   2fc88:	cmp	r0, #0
   2fc8c:	beq	2fca4 <flatcc_json_printer_union_field@@Base+0x84>
   2fc90:	ldr	r0, [r4, #20]
   2fc94:	add	r1, r0, #1
   2fc98:	str	r1, [r4, #20]
   2fc9c:	mov	r1, #44	; 0x2c
   2fca0:	strb	r1, [r0]
   2fca4:	ldr	r9, [fp, #8]
   2fca8:	ldrb	r0, [r4, #25]
   2fcac:	cmp	r0, #0
   2fcb0:	beq	2fcd4 <flatcc_json_printer_union_field@@Base+0xb4>
   2fcb4:	ldr	r0, [r4, #20]
   2fcb8:	add	r1, r0, #1
   2fcbc:	str	r1, [r4, #20]
   2fcc0:	mov	r1, #10
   2fcc4:	strb	r1, [r0]
   2fcc8:	mov	r0, r4
   2fccc:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2fcd0:	b	2fcdc <flatcc_json_printer_union_field@@Base+0xbc>
   2fcd4:	mov	r0, r4
   2fcd8:	bl	29f24 <flatcc_json_printer_nl@@Base+0x18>
   2fcdc:	ldr	r0, [r4, #20]
   2fce0:	mov	r1, #34	; 0x22
   2fce4:	strb	r1, [r0]
   2fce8:	ldrb	r1, [r4, #26]
   2fcec:	ldr	r2, [r4, #16]
   2fcf0:	ldr	r0, [r4, #20]
   2fcf4:	cmp	r1, #0
   2fcf8:	addeq	r0, r0, #1
   2fcfc:	str	r0, [r4, #20]
   2fd00:	add	r1, r0, r9
   2fd04:	cmp	r1, r2
   2fd08:	bcs	2fd28 <flatcc_json_printer_union_field@@Base+0x108>
   2fd0c:	mov	r1, r8
   2fd10:	mov	r2, r9
   2fd14:	bl	14e5c <memcpy@plt>
   2fd18:	ldr	r0, [r4, #20]
   2fd1c:	add	r0, r0, r9
   2fd20:	str	r0, [r4, #20]
   2fd24:	b	2fd38 <flatcc_json_printer_union_field@@Base+0x118>
   2fd28:	mov	r0, r4
   2fd2c:	mov	r1, r8
   2fd30:	mov	r2, r9
   2fd34:	bl	29ec0 <flatcc_json_printer_write@@Base+0x4>
   2fd38:	movw	r1, #34408	; 0x8668
   2fd3c:	movt	r1, #3
   2fd40:	mov	r0, r4
   2fd44:	mov	r2, #5
   2fd48:	bl	29ec0 <flatcc_json_printer_write@@Base+0x4>
   2fd4c:	ldr	r0, [r4, #20]
   2fd50:	mov	r1, #34	; 0x22
   2fd54:	strb	r1, [r0]
   2fd58:	ldrb	r0, [r4, #26]
   2fd5c:	ldr	r1, [r4, #20]
   2fd60:	cmp	r0, #0
   2fd64:	addeq	r1, r1, #1
   2fd68:	add	r0, r1, #1
   2fd6c:	str	r0, [r4, #20]
   2fd70:	mov	r0, #58	; 0x3a
   2fd74:	strb	r0, [r1]
   2fd78:	ldr	r0, [r4, #20]
   2fd7c:	mov	r1, #32
   2fd80:	strb	r1, [r0]
   2fd84:	ldrb	r0, [r4, #25]
   2fd88:	ldr	r1, [r4, #20]
   2fd8c:	cmp	r0, #0
   2fd90:	addne	r1, r1, #1
   2fd94:	str	r1, [r4, #20]
   2fd98:	ldrb	r0, [r4, #27]
   2fd9c:	cmp	r0, #0
   2fda0:	beq	2fdc4 <flatcc_json_printer_union_field@@Base+0x1a4>
   2fda4:	mov	r0, r6
   2fda8:	bl	29ff4 <flatcc_json_printer_uint8@@Base+0x2c>
   2fdac:	ldr	r1, [r4, #20]
   2fdb0:	add	r0, r1, r0
   2fdb4:	str	r0, [r4, #20]
   2fdb8:	cmp	r6, #0
   2fdbc:	bne	2fddc <flatcc_json_printer_union_field@@Base+0x1bc>
   2fdc0:	b	2fc68 <flatcc_json_printer_union_field@@Base+0x48>
   2fdc4:	ldr	r2, [fp, #12]
   2fdc8:	mov	r0, r4
   2fdcc:	mov	r1, r6
   2fdd0:	blx	r2
   2fdd4:	cmp	r6, #0
   2fdd8:	beq	2fc68 <flatcc_json_printer_union_field@@Base+0x48>
   2fddc:	ldr	sl, [fp, #16]
   2fde0:	ldr	r0, [r4, #20]
   2fde4:	add	r1, r0, #1
   2fde8:	str	r1, [r4, #20]
   2fdec:	mov	r1, #44	; 0x2c
   2fdf0:	strb	r1, [r0]
   2fdf4:	mov	r0, r4
   2fdf8:	mov	r1, r8
   2fdfc:	mov	r2, r9
   2fe00:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2fe04:	ldr	r0, [r5, #12]
   2fe08:	strb	r6, [sp, #8]
   2fe0c:	str	r7, [sp]
   2fe10:	str	r0, [sp, #4]
   2fe14:	mov	r1, sp
   2fe18:	mov	r0, r4
   2fe1c:	blx	sl
   2fe20:	sub	sp, fp, #28
   2fe24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fe28 <flatcc_json_printer_union_table@@Base>:
   2fe28:	push	{r4, r5, r6, sl, fp, lr}
   2fe2c:	add	fp, sp, #16
   2fe30:	mov	r4, r2
   2fe34:	mov	r5, r1
   2fe38:	mov	r6, r0
   2fe3c:	ldr	r0, [r1]
   2fe40:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2fe44:	mov	r1, r0
   2fe48:	ldr	r2, [r5, #4]
   2fe4c:	mov	r0, r6
   2fe50:	mov	r3, r4
   2fe54:	pop	{r4, r5, r6, sl, fp, lr}
   2fe58:	b	2f7b0 <flatcc_json_printer_table_vector_field@@Base+0x150>

0002fe5c <flatcc_json_printer_union_struct@@Base>:
   2fe5c:	push	{r4, r5, fp, lr}
   2fe60:	add	fp, sp, #8
   2fe64:	mov	r5, r2
   2fe68:	mov	r4, r0
   2fe6c:	ldr	r0, [r0, #20]
   2fe70:	ldr	r2, [r4, #32]
   2fe74:	add	r2, r2, #1
   2fe78:	str	r2, [r4, #32]
   2fe7c:	add	r2, r0, #1
   2fe80:	str	r2, [r4, #20]
   2fe84:	mov	r2, #123	; 0x7b
   2fe88:	strb	r2, [r0]
   2fe8c:	ldr	r0, [r1]
   2fe90:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2fe94:	mov	r1, r0
   2fe98:	mov	r0, r4
   2fe9c:	blx	r5
   2fea0:	ldrb	r0, [r4, #25]
   2fea4:	cmp	r0, #0
   2fea8:	beq	2fed4 <flatcc_json_printer_union_struct@@Base+0x78>
   2feac:	ldr	r0, [r4, #20]
   2feb0:	add	r1, r0, #1
   2feb4:	str	r1, [r4, #20]
   2feb8:	mov	r1, #10
   2febc:	strb	r1, [r0]
   2fec0:	ldr	r0, [r4, #32]
   2fec4:	sub	r0, r0, #1
   2fec8:	str	r0, [r4, #32]
   2fecc:	mov	r0, r4
   2fed0:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2fed4:	ldr	r0, [r4, #20]
   2fed8:	add	r1, r0, #1
   2fedc:	str	r1, [r4, #20]
   2fee0:	mov	r1, #125	; 0x7d
   2fee4:	strb	r1, [r0]
   2fee8:	pop	{r4, r5, fp, pc}

0002feec <flatcc_json_printer_union_string@@Base>:
   2feec:	push	{r4, sl, fp, lr}
   2fef0:	add	fp, sp, #8
   2fef4:	mov	r4, r0
   2fef8:	ldr	r0, [r1]
   2fefc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   2ff00:	mov	r1, r0
   2ff04:	mov	r0, r4
   2ff08:	pop	{r4, sl, fp, lr}
   2ff0c:	b	2ae68 <flatcc_json_printer_string_field@@Base+0x150>

0002ff10 <flatcc_json_printer_embedded_struct_field@@Base>:
   2ff10:	push	{r4, r5, r6, r7, fp, lr}
   2ff14:	add	fp, sp, #16
   2ff18:	mov	r5, r3
   2ff1c:	mov	r6, r2
   2ff20:	mov	r3, r1
   2ff24:	mov	r4, r0
   2ff28:	add	r7, fp, #8
   2ff2c:	ldm	r7, {r1, r2, r7}
   2ff30:	cmp	r3, #0
   2ff34:	beq	2ff4c <flatcc_json_printer_embedded_struct_field@@Base+0x3c>
   2ff38:	ldr	r0, [r4, #20]
   2ff3c:	add	r3, r0, #1
   2ff40:	str	r3, [r4, #20]
   2ff44:	mov	r3, #44	; 0x2c
   2ff48:	strb	r3, [r0]
   2ff4c:	mov	r0, r4
   2ff50:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   2ff54:	ldr	r0, [r4, #20]
   2ff58:	ldr	r1, [r4, #32]
   2ff5c:	add	r1, r1, #1
   2ff60:	str	r1, [r4, #32]
   2ff64:	add	r1, r0, #1
   2ff68:	str	r1, [r4, #20]
   2ff6c:	mov	r1, #123	; 0x7b
   2ff70:	strb	r1, [r0]
   2ff74:	add	r1, r6, r5
   2ff78:	mov	r0, r4
   2ff7c:	blx	r7
   2ff80:	ldrb	r0, [r4, #25]
   2ff84:	cmp	r0, #0
   2ff88:	beq	2ffb4 <flatcc_json_printer_embedded_struct_field@@Base+0xa4>
   2ff8c:	ldr	r0, [r4, #20]
   2ff90:	add	r1, r0, #1
   2ff94:	str	r1, [r4, #20]
   2ff98:	mov	r1, #10
   2ff9c:	strb	r1, [r0]
   2ffa0:	ldr	r0, [r4, #32]
   2ffa4:	sub	r0, r0, #1
   2ffa8:	str	r0, [r4, #32]
   2ffac:	mov	r0, r4
   2ffb0:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   2ffb4:	ldr	r0, [r4, #20]
   2ffb8:	add	r1, r0, #1
   2ffbc:	str	r1, [r4, #20]
   2ffc0:	mov	r1, #125	; 0x7d
   2ffc4:	strb	r1, [r0]
   2ffc8:	pop	{r4, r5, r6, r7, fp, pc}

0002ffcc <flatcc_json_printer_struct_field@@Base>:
   2ffcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ffd0:	add	fp, sp, #24
   2ffd4:	mov	r6, r3
   2ffd8:	mov	r7, r1
   2ffdc:	mov	r4, r0
   2ffe0:	mov	r0, r1
   2ffe4:	mov	r1, r2
   2ffe8:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   2ffec:	cmp	r0, #0
   2fff0:	beq	300a8 <flatcc_json_printer_struct_field@@Base+0xdc>
   2fff4:	mov	r5, r0
   2fff8:	ldr	r8, [fp, #12]
   2fffc:	ldr	r2, [fp, #8]
   30000:	ldr	r0, [r7, #16]
   30004:	add	r1, r0, #1
   30008:	str	r1, [r7, #16]
   3000c:	cmp	r0, #0
   30010:	beq	30028 <flatcc_json_printer_struct_field@@Base+0x5c>
   30014:	ldr	r0, [r4, #20]
   30018:	add	r1, r0, #1
   3001c:	str	r1, [r4, #20]
   30020:	mov	r1, #44	; 0x2c
   30024:	strb	r1, [r0]
   30028:	mov	r0, r4
   3002c:	mov	r1, r6
   30030:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   30034:	ldr	r0, [r4, #20]
   30038:	ldr	r1, [r4, #32]
   3003c:	add	r1, r1, #1
   30040:	str	r1, [r4, #32]
   30044:	add	r1, r0, #1
   30048:	str	r1, [r4, #20]
   3004c:	mov	r1, #123	; 0x7b
   30050:	strb	r1, [r0]
   30054:	mov	r0, r4
   30058:	mov	r1, r5
   3005c:	blx	r8
   30060:	ldrb	r0, [r4, #25]
   30064:	cmp	r0, #0
   30068:	beq	30094 <flatcc_json_printer_struct_field@@Base+0xc8>
   3006c:	ldr	r0, [r4, #20]
   30070:	add	r1, r0, #1
   30074:	str	r1, [r4, #20]
   30078:	mov	r1, #10
   3007c:	strb	r1, [r0]
   30080:	ldr	r0, [r4, #32]
   30084:	sub	r0, r0, #1
   30088:	str	r0, [r4, #32]
   3008c:	mov	r0, r4
   30090:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   30094:	ldr	r0, [r4, #20]
   30098:	add	r1, r0, #1
   3009c:	str	r1, [r4, #20]
   300a0:	mov	r1, #125	; 0x7d
   300a4:	strb	r1, [r0]
   300a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000300ac <flatcc_json_printer_struct_as_root@@Base>:
   300ac:	push	{r4, r5, fp, lr}
   300b0:	add	fp, sp, #8
   300b4:	mov	r5, r1
   300b8:	mov	r4, r0
   300bc:	bl	301ac <flatcc_json_printer_struct_as_root@@Base+0x100>
   300c0:	ldr	r0, [r4, #20]
   300c4:	ldr	r1, [r4, #32]
   300c8:	add	r1, r1, #1
   300cc:	str	r1, [r4, #32]
   300d0:	add	r1, r0, #1
   300d4:	str	r1, [r4, #20]
   300d8:	mov	r1, #123	; 0x7b
   300dc:	strb	r1, [r0]
   300e0:	mov	r0, r5
   300e4:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   300e8:	mov	r1, r0
   300ec:	ldr	r2, [fp, #8]
   300f0:	mov	r0, r4
   300f4:	blx	r2
   300f8:	ldrb	r0, [r4, #25]
   300fc:	cmp	r0, #0
   30100:	beq	3012c <flatcc_json_printer_struct_as_root@@Base+0x80>
   30104:	ldr	r0, [r4, #20]
   30108:	add	r1, r0, #1
   3010c:	str	r1, [r4, #20]
   30110:	mov	r1, #10
   30114:	strb	r1, [r0]
   30118:	ldr	r0, [r4, #32]
   3011c:	sub	r0, r0, #1
   30120:	str	r0, [r4, #32]
   30124:	mov	r0, r4
   30128:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   3012c:	ldr	r0, [r4, #20]
   30130:	add	r1, r0, #1
   30134:	str	r1, [r4, #20]
   30138:	mov	r1, #125	; 0x7d
   3013c:	strb	r1, [r0]
   30140:	ldrb	r0, [r4, #25]
   30144:	cmp	r0, #0
   30148:	beq	3016c <flatcc_json_printer_struct_as_root@@Base+0xc0>
   3014c:	ldr	r0, [r4, #32]
   30150:	cmp	r0, #0
   30154:	bne	3016c <flatcc_json_printer_struct_as_root@@Base+0xc0>
   30158:	ldr	r0, [r4, #20]
   3015c:	add	r1, r0, #1
   30160:	str	r1, [r4, #20]
   30164:	mov	r1, #10
   30168:	strb	r1, [r0]
   3016c:	ldr	r2, [r4, #44]	; 0x2c
   30170:	mov	r0, r4
   30174:	mov	r1, #1
   30178:	blx	r2
   3017c:	mov	r0, r4
   30180:	bl	30270 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   30184:	mov	r1, r0
   30188:	mvn	r0, #0
   3018c:	cmp	r1, #0
   30190:	popne	{r4, r5, fp, pc}
   30194:	ldr	r0, [r4]
   30198:	ldr	r1, [r4, #12]
   3019c:	ldr	r2, [r4, #20]
   301a0:	add	r1, r2, r1
   301a4:	sub	r0, r1, r0
   301a8:	pop	{r4, r5, fp, pc}
   301ac:	push	{r4, r5, r6, sl, fp, lr}
   301b0:	add	fp, sp, #16
   301b4:	sub	sp, sp, #8
   301b8:	mov	r4, r0
   301bc:	mov	r0, #0
   301c0:	str	r0, [sp, #4]
   301c4:	cmp	r1, #0
   301c8:	cmpne	r2, #7
   301cc:	bhi	301fc <flatcc_json_printer_struct_as_root@@Base+0x150>
   301d0:	mov	r0, r4
   301d4:	mov	r1, #1
   301d8:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   301dc:	movw	r0, #35275	; 0x89cb
   301e0:	movt	r0, #3
   301e4:	movw	r1, #34131	; 0x8553
   301e8:	movt	r1, #3
   301ec:	movw	r3, #35306	; 0x89ea
   301f0:	movt	r3, #3
   301f4:	movw	r2, #1019	; 0x3fb
   301f8:	bl	14f40 <__assert_fail@plt>
   301fc:	cmp	r3, #0
   30200:	beq	3023c <flatcc_json_printer_struct_as_root@@Base+0x190>
   30204:	mov	r5, r1
   30208:	add	r0, sp, #4
   3020c:	mov	r1, r3
   30210:	mov	r2, #4
   30214:	bl	14ef8 <strncpy@plt>
   30218:	ldr	r6, [sp, #4]
   3021c:	mov	r0, r6
   30220:	bl	31710 <flatcc_json_printer_clear@@Base+0xe84>
   30224:	str	r6, [sp, #4]
   30228:	add	r0, r5, #4
   3022c:	bl	31714 <flatcc_json_printer_clear@@Base+0xe88>
   30230:	cmp	r6, #0
   30234:	cmpne	r0, r6
   30238:	bne	30244 <flatcc_json_printer_struct_as_root@@Base+0x198>
   3023c:	sub	sp, fp, #16
   30240:	pop	{r4, r5, r6, sl, fp, pc}
   30244:	mov	r0, r4
   30248:	mov	r1, #1
   3024c:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   30250:	movw	r0, #35385	; 0x8a39
   30254:	movt	r0, #3
   30258:	movw	r1, #34131	; 0x8553
   3025c:	movt	r1, #3
   30260:	movw	r3, #35306	; 0x89ea
   30264:	movt	r3, #3
   30268:	movw	r2, #1028	; 0x404
   3026c:	bl	14f40 <__assert_fail@plt>
   30270:	ldr	r0, [r0, #36]	; 0x24
   30274:	bx	lr

00030278 <flatcc_json_printer_table_as_root@@Base>:
   30278:	push	{r4, r5, fp, lr}
   3027c:	add	fp, sp, #8
   30280:	mov	r5, r1
   30284:	mov	r4, r0
   30288:	bl	301ac <flatcc_json_printer_struct_as_root@@Base+0x100>
   3028c:	mov	r0, r5
   30290:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   30294:	mov	r1, r0
   30298:	ldr	r3, [fp, #8]
   3029c:	mov	r0, r4
   302a0:	mov	r2, #100	; 0x64
   302a4:	bl	2f7b0 <flatcc_json_printer_table_vector_field@@Base+0x150>
   302a8:	ldrb	r0, [r4, #25]
   302ac:	cmp	r0, #0
   302b0:	beq	302d4 <flatcc_json_printer_table_as_root@@Base+0x5c>
   302b4:	ldr	r0, [r4, #32]
   302b8:	cmp	r0, #0
   302bc:	bne	302d4 <flatcc_json_printer_table_as_root@@Base+0x5c>
   302c0:	ldr	r0, [r4, #20]
   302c4:	add	r1, r0, #1
   302c8:	str	r1, [r4, #20]
   302cc:	mov	r1, #10
   302d0:	strb	r1, [r0]
   302d4:	ldr	r2, [r4, #44]	; 0x2c
   302d8:	mov	r0, r4
   302dc:	mov	r1, #1
   302e0:	blx	r2
   302e4:	mov	r0, r4
   302e8:	bl	30270 <flatcc_json_printer_struct_as_root@@Base+0x1c4>
   302ec:	mov	r1, r0
   302f0:	mvn	r0, #0
   302f4:	cmp	r1, #0
   302f8:	popne	{r4, r5, fp, pc}
   302fc:	ldr	r0, [r4]
   30300:	ldr	r1, [r4, #12]
   30304:	ldr	r2, [r4, #20]
   30308:	add	r1, r2, r1
   3030c:	sub	r0, r1, r0
   30310:	pop	{r4, r5, fp, pc}

00030314 <flatcc_json_printer_struct_as_nested_root@@Base>:
   30314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30318:	add	fp, sp, #28
   3031c:	sub	sp, sp, #4
   30320:	mov	r5, r3
   30324:	mov	r7, r1
   30328:	mov	r4, r0
   3032c:	mov	r0, r1
   30330:	mov	r1, r2
   30334:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   30338:	cmp	r0, #0
   3033c:	beq	30424 <flatcc_json_printer_struct_as_nested_root@@Base+0x110>
   30340:	mov	r6, r0
   30344:	add	sl, fp, #8
   30348:	ldm	sl, {r8, r9, sl}
   3034c:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   30350:	add	r6, r0, r6
   30354:	mov	r0, r6
   30358:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   3035c:	mov	r2, r0
   30360:	mov	r0, r4
   30364:	mov	r1, r6
   30368:	mov	r3, r9
   3036c:	bl	301ac <flatcc_json_printer_struct_as_root@@Base+0x100>
   30370:	ldr	r0, [r7, #16]
   30374:	add	r1, r0, #1
   30378:	str	r1, [r7, #16]
   3037c:	cmp	r0, #0
   30380:	beq	30398 <flatcc_json_printer_struct_as_nested_root@@Base+0x84>
   30384:	ldr	r0, [r4, #20]
   30388:	add	r1, r0, #1
   3038c:	str	r1, [r4, #20]
   30390:	mov	r1, #44	; 0x2c
   30394:	strb	r1, [r0]
   30398:	mov	r0, r4
   3039c:	mov	r1, r5
   303a0:	mov	r2, r8
   303a4:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   303a8:	ldr	r0, [r4, #20]
   303ac:	ldr	r1, [r4, #32]
   303b0:	add	r1, r1, #1
   303b4:	str	r1, [r4, #32]
   303b8:	add	r1, r0, #1
   303bc:	str	r1, [r4, #20]
   303c0:	mov	r1, #123	; 0x7b
   303c4:	strb	r1, [r0]
   303c8:	mov	r0, r6
   303cc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   303d0:	mov	r1, r0
   303d4:	mov	r0, r4
   303d8:	blx	sl
   303dc:	ldrb	r0, [r4, #25]
   303e0:	cmp	r0, #0
   303e4:	beq	30410 <flatcc_json_printer_struct_as_nested_root@@Base+0xfc>
   303e8:	ldr	r0, [r4, #20]
   303ec:	add	r1, r0, #1
   303f0:	str	r1, [r4, #20]
   303f4:	mov	r1, #10
   303f8:	strb	r1, [r0]
   303fc:	ldr	r0, [r4, #32]
   30400:	sub	r0, r0, #1
   30404:	str	r0, [r4, #32]
   30408:	mov	r0, r4
   3040c:	bl	29f58 <flatcc_json_printer_indent@@Base+0x4>
   30410:	ldr	r0, [r4, #20]
   30414:	add	r1, r0, #1
   30418:	str	r1, [r4, #20]
   3041c:	mov	r1, #125	; 0x7d
   30420:	strb	r1, [r0]
   30424:	sub	sp, fp, #28
   30428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003042c <flatcc_json_printer_table_as_nested_root@@Base>:
   3042c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30430:	add	fp, sp, #28
   30434:	sub	sp, sp, #4
   30438:	mov	sl, r3
   3043c:	mov	r5, r1
   30440:	mov	r4, r0
   30444:	mov	r0, r1
   30448:	mov	r1, r2
   3044c:	bl	2ad98 <flatcc_json_printer_string_field@@Base+0x80>
   30450:	cmp	r0, #0
   30454:	beq	304ec <flatcc_json_printer_table_as_nested_root@@Base+0xc0>
   30458:	mov	r7, r0
   3045c:	ldr	r8, [fp, #16]
   30460:	ldr	r6, [fp, #12]
   30464:	ldr	r9, [fp, #8]
   30468:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   3046c:	add	r7, r0, r7
   30470:	mov	r0, r7
   30474:	bl	2cc78 <flatcc_json_printer_utype_vector_field@@Base+0x1c0>
   30478:	mov	r2, r0
   3047c:	add	r7, r7, #4
   30480:	mov	r0, r4
   30484:	mov	r1, r7
   30488:	mov	r3, r6
   3048c:	bl	301ac <flatcc_json_printer_struct_as_root@@Base+0x100>
   30490:	ldr	r0, [r5, #16]
   30494:	add	r1, r0, #1
   30498:	str	r1, [r5, #16]
   3049c:	cmp	r0, #0
   304a0:	beq	304b8 <flatcc_json_printer_table_as_nested_root@@Base+0x8c>
   304a4:	ldr	r0, [r4, #20]
   304a8:	add	r1, r0, #1
   304ac:	str	r1, [r4, #20]
   304b0:	mov	r1, #44	; 0x2c
   304b4:	strb	r1, [r0]
   304b8:	mov	r0, r4
   304bc:	mov	r1, sl
   304c0:	mov	r2, r9
   304c4:	bl	2add8 <flatcc_json_printer_string_field@@Base+0xc0>
   304c8:	mov	r0, r7
   304cc:	bl	2ae94 <flatcc_json_printer_string_field@@Base+0x17c>
   304d0:	mov	r1, r0
   304d4:	ldr	r2, [r5, #12]
   304d8:	mov	r0, r4
   304dc:	mov	r3, r8
   304e0:	sub	sp, fp, #28
   304e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   304e8:	b	2f7b0 <flatcc_json_printer_table_vector_field@@Base+0x150>
   304ec:	sub	sp, fp, #28
   304f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000304f4 <flatcc_json_printer_init@@Base>:
   304f4:	push	{r4, r5, r6, sl, fp, lr}
   304f8:	add	fp, sp, #16
   304fc:	mov	r5, r0
   30500:	mov	r4, #0
   30504:	vmov.i32	q8, #0	; 0x00000000
   30508:	str	r4, [r0, #32]
   3050c:	mov	r0, #36	; 0x24
   30510:	mov	r2, r5
   30514:	vst1.32	{d16-d17}, [r2], r0
   30518:	str	r4, [r2]
   3051c:	add	r0, r5, #16
   30520:	vst1.32	{d16-d17}, [r0]
   30524:	movw	r0, #41804	; 0xa34c
   30528:	movt	r0, #4
   3052c:	ldr	r0, [r0]
   30530:	movw	r2, #1432	; 0x598
   30534:	movt	r2, #3
   30538:	cmp	r1, #0
   3053c:	movne	r0, r1
   30540:	str	r0, [r5, #40]	; 0x28
   30544:	str	r2, [r5, #44]	; 0x2c
   30548:	movw	r6, #16448	; 0x4040
   3054c:	movw	r0, #16448	; 0x4040
   30550:	bl	14e98 <malloc@plt>
   30554:	str	r0, [r5]
   30558:	cmp	r0, #0
   3055c:	beq	3058c <flatcc_json_printer_init@@Base+0x98>
   30560:	mov	r0, #16384	; 0x4000
   30564:	str	r6, [r5, #4]
   30568:	str	r0, [r5, #8]
   3056c:	mov	r0, #1
   30570:	strb	r0, [r5, #24]
   30574:	ldr	r0, [r5]
   30578:	add	r1, r0, #16384	; 0x4000
   3057c:	str	r1, [r5, #16]
   30580:	str	r0, [r5, #20]
   30584:	mov	r0, r4
   30588:	pop	{r4, r5, r6, sl, fp, pc}
   3058c:	mvn	r4, #0
   30590:	mov	r0, r4
   30594:	pop	{r4, r5, r6, sl, fp, pc}
   30598:	push	{r4, r5, r6, sl, fp, lr}
   3059c:	add	fp, sp, #16
   305a0:	mov	r4, r0
   305a4:	cmp	r1, #0
   305a8:	bne	305bc <flatcc_json_printer_init@@Base+0xc8>
   305ac:	ldr	r5, [r4, #16]
   305b0:	ldr	r6, [r4, #20]
   305b4:	cmp	r6, r5
   305b8:	bcs	305e0 <flatcc_json_printer_init@@Base+0xec>
   305bc:	ldr	r0, [r4]
   305c0:	ldr	r1, [r4, #20]
   305c4:	ldr	r3, [r4, #40]	; 0x28
   305c8:	sub	r5, r1, r0
   305cc:	mov	r1, r5
   305d0:	mov	r2, #1
   305d4:	bl	14e8c <fwrite@plt>
   305d8:	ldr	r0, [r4]
   305dc:	b	30618 <flatcc_json_printer_init@@Base+0x124>
   305e0:	ldr	r0, [r4]
   305e4:	ldr	r1, [r4, #8]
   305e8:	ldr	r3, [r4, #40]	; 0x28
   305ec:	mov	r2, #1
   305f0:	bl	14e8c <fwrite@plt>
   305f4:	sub	r6, r6, r5
   305f8:	ldr	r0, [r4]
   305fc:	ldr	r1, [r4, #8]
   30600:	add	r1, r0, r1
   30604:	mov	r2, r6
   30608:	bl	14e5c <memcpy@plt>
   3060c:	ldr	r0, [r4]
   30610:	ldr	r5, [r4, #8]
   30614:	add	r0, r0, r6
   30618:	str	r0, [r4, #20]
   3061c:	ldr	r0, [r4, #12]
   30620:	ldr	r1, [r4, #20]
   30624:	add	r0, r0, r5
   30628:	str	r0, [r4, #12]
   3062c:	mov	r0, #0
   30630:	strb	r0, [r1]
   30634:	pop	{r4, r5, r6, sl, fp, pc}

00030638 <flatcc_json_printer_init_buffer@@Base>:
   30638:	push	{fp, lr}
   3063c:	mov	fp, sp
   30640:	cmp	r2, #63	; 0x3f
   30644:	bls	30684 <flatcc_json_printer_init_buffer@@Base+0x4c>
   30648:	vmov.i32	q8, #0	; 0x00000000
   3064c:	add	r3, r0, #12
   30650:	vst1.32	{d16-d17}, [r3]
   30654:	movw	r3, #1700	; 0x6a4
   30658:	movt	r3, #3
   3065c:	str	r3, [r0, #44]	; 0x2c
   30660:	add	r3, r0, #28
   30664:	vst1.32	{d16-d17}, [r3]
   30668:	sub	r3, r2, #64	; 0x40
   3066c:	stm	r0, {r1, r2, r3}
   30670:	add	r2, r1, r3
   30674:	str	r2, [r0, #16]
   30678:	str	r1, [r0, #20]
   3067c:	mov	r0, #0
   30680:	pop	{fp, pc}
   30684:	movw	r0, #34414	; 0x866e
   30688:	movt	r0, #3
   3068c:	movw	r1, #34131	; 0x8553
   30690:	movt	r1, #3
   30694:	movw	r3, #34455	; 0x8697
   30698:	movt	r3, #3
   3069c:	movw	r2, #1165	; 0x48d
   306a0:	bl	14f40 <__assert_fail@plt>
   306a4:	push	{r4, sl, fp, lr}
   306a8:	add	fp, sp, #8
   306ac:	mov	r4, r0
   306b0:	ldr	r0, [r0, #16]
   306b4:	ldr	r1, [r4, #20]
   306b8:	cmp	r1, r0
   306bc:	bcc	306e8 <flatcc_json_printer_init_buffer@@Base+0xb0>
   306c0:	mov	r0, r4
   306c4:	mov	r1, #3
   306c8:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   306cc:	ldr	r0, [r4]
   306d0:	ldr	r1, [r4, #12]
   306d4:	ldr	r2, [r4, #20]
   306d8:	str	r0, [r4, #20]
   306dc:	sub	r0, r2, r0
   306e0:	add	r0, r0, r1
   306e4:	str	r0, [r4, #12]
   306e8:	ldr	r0, [r4, #20]
   306ec:	mov	r1, #0
   306f0:	strb	r1, [r0]
   306f4:	pop	{r4, sl, fp, pc}

000306f8 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   306f8:	push	{r4, r5, fp, lr}
   306fc:	add	fp, sp, #8
   30700:	mov	r5, r1
   30704:	mov	r4, r0
   30708:	vmov.i32	q8, #0	; 0x00000000
   3070c:	add	r0, r0, #28
   30710:	vst1.32	{d16-d17}, [r0]
   30714:	add	r0, r4, #12
   30718:	vst1.32	{d16-d17}, [r0]
   3071c:	cmp	r1, #0
   30720:	movweq	r5, #4096	; 0x1000
   30724:	cmp	r5, #64	; 0x40
   30728:	movls	r5, #64	; 0x40
   3072c:	mov	r0, r5
   30730:	bl	14e98 <malloc@plt>
   30734:	mov	r1, r0
   30738:	mov	r0, #1
   3073c:	strb	r0, [r4, #24]
   30740:	sub	r0, r5, #64	; 0x40
   30744:	stm	r4, {r1, r5}
   30748:	str	r0, [r4, #8]
   3074c:	movw	r2, #1924	; 0x784
   30750:	movt	r2, #3
   30754:	str	r2, [r4, #44]	; 0x2c
   30758:	add	r0, r1, r0
   3075c:	str	r0, [r4, #16]
   30760:	str	r1, [r4, #20]
   30764:	mov	r0, #0
   30768:	cmp	r1, #0
   3076c:	popne	{r4, r5, fp, pc}
   30770:	mov	r0, r4
   30774:	mov	r1, #3
   30778:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   3077c:	mvn	r0, #0
   30780:	pop	{r4, r5, fp, pc}
   30784:	push	{r4, r5, fp, lr}
   30788:	add	fp, sp, #8
   3078c:	mov	r4, r0
   30790:	ldr	r0, [r0]
   30794:	ldr	r5, [r4, #20]
   30798:	mov	r1, #0
   3079c:	strb	r1, [r5], -r0
   307a0:	ldr	r0, [r4, #16]
   307a4:	ldr	r1, [r4, #20]
   307a8:	cmp	r1, r0
   307ac:	popcc	{r4, r5, fp, pc}
   307b0:	ldm	r4, {r0, r1}
   307b4:	lsl	r1, r1, #1
   307b8:	bl	14e80 <realloc@plt>
   307bc:	cmp	r0, #0
   307c0:	beq	307f4 <flatcc_json_printer_init_dynamic_buffer@@Base+0xfc>
   307c4:	str	r0, [r4]
   307c8:	add	r1, r0, r5
   307cc:	ldr	r2, [r4, #4]
   307d0:	mvn	r3, #63	; 0x3f
   307d4:	add	r3, r3, r2, lsl #1
   307d8:	str	r3, [r4, #8]
   307dc:	lsl	r2, r2, #1
   307e0:	str	r2, [r4, #4]
   307e4:	add	r0, r0, r3
   307e8:	str	r0, [r4, #16]
   307ec:	str	r1, [r4, #20]
   307f0:	b	30814 <flatcc_json_printer_init_dynamic_buffer@@Base+0x11c>
   307f4:	mov	r0, r4
   307f8:	mov	r1, #3
   307fc:	bl	2fb84 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   30800:	ldr	r0, [r4]
   30804:	ldr	r1, [r4, #12]
   30808:	str	r0, [r4, #20]
   3080c:	add	r0, r1, r5
   30810:	str	r0, [r4, #12]
   30814:	ldr	r0, [r4, #20]
   30818:	mov	r1, #0
   3081c:	strb	r1, [r0]
   30820:	pop	{r4, r5, fp, pc}

00030824 <flatcc_json_printer_get_buffer@@Base>:
   30824:	push	{r4, r5, fp, lr}
   30828:	add	fp, sp, #8
   3082c:	mov	r5, r1
   30830:	mov	r4, r0
   30834:	ldr	r2, [r0, #44]	; 0x2c
   30838:	mov	r1, #0
   3083c:	blx	r2
   30840:	cmp	r5, #0
   30844:	beq	30858 <flatcc_json_printer_get_buffer@@Base+0x34>
   30848:	ldr	r0, [r4]
   3084c:	ldr	r1, [r4, #20]
   30850:	sub	r0, r1, r0
   30854:	str	r0, [r5]
   30858:	ldr	r0, [r4]
   3085c:	pop	{r4, r5, fp, pc}

00030860 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   30860:	push	{r4, sl, fp, lr}
   30864:	add	fp, sp, #8
   30868:	mov	r4, r0
   3086c:	bl	30824 <flatcc_json_printer_get_buffer@@Base>
   30870:	vmov.i32	q8, #0	; 0x00000000
   30874:	add	r1, r4, #16
   30878:	vst1.32	{d16-d17}, [r1]
   3087c:	mov	r1, #32
   30880:	vst1.32	{d16-d17}, [r4], r1
   30884:	vst1.32	{d16-d17}, [r4]
   30888:	pop	{r4, sl, fp, pc}

0003088c <flatcc_json_printer_clear@@Base>:
   3088c:	push	{r4, sl, fp, lr}
   30890:	add	fp, sp, #8
   30894:	mov	r4, r0
   30898:	ldrb	r0, [r0, #24]
   3089c:	cmp	r0, #0
   308a0:	beq	308b4 <flatcc_json_printer_clear@@Base+0x28>
   308a4:	ldr	r0, [r4]
   308a8:	cmp	r0, #0
   308ac:	beq	308b4 <flatcc_json_printer_clear@@Base+0x28>
   308b0:	bl	14e50 <free@plt>
   308b4:	vmov.i32	q8, #0	; 0x00000000
   308b8:	mov	r0, #32
   308bc:	add	r1, r4, #16
   308c0:	vst1.32	{d16-d17}, [r4], r0
   308c4:	vst1.32	{d16-d17}, [r4]
   308c8:	vst1.32	{d16-d17}, [r1]
   308cc:	pop	{r4, sl, fp, pc}
   308d0:	vmov	r0, r1, d0
   308d4:	bx	lr
   308d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   308dc:	add	fp, sp, #28
   308e0:	sub	sp, sp, #4
   308e4:	vpush	{d8}
   308e8:	sub	sp, sp, #160	; 0xa0
   308ec:	add	r3, sp, #68	; 0x44
   308f0:	stm	r3, {r0, r1, r2}
   308f4:	vmov.f64	d8, d0
   308f8:	sub	r0, fp, #56	; 0x38
   308fc:	bl	30be0 <flatcc_json_printer_clear@@Base+0x354>
   30900:	ldr	sl, [fp, #-56]	; 0xffffffc8
   30904:	ldr	r5, [fp, #-52]	; 0xffffffcc
   30908:	ldr	r0, [fp, #-48]	; 0xffffffd0
   3090c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   30910:	stm	sp, {r0, r1}
   30914:	sub	r0, fp, #72	; 0x48
   30918:	mov	r2, sl
   3091c:	mov	r3, r5
   30920:	bl	30c34 <flatcc_json_printer_clear@@Base+0x3a8>
   30924:	ldr	r1, [fp, #-48]	; 0xffffffd0
   30928:	mov	r0, #0
   3092c:	str	r1, [sp, #56]	; 0x38
   30930:	sub	r1, r1, #1
   30934:	str	r1, [sp, #52]	; 0x34
   30938:	str	r1, [sp]
   3093c:	str	r0, [sp, #4]
   30940:	mov	r0, #1
   30944:	orr	r2, r0, sl, lsl #1
   30948:	str	r5, [sp, #60]	; 0x3c
   3094c:	lsl	r0, r5, #1
   30950:	orr	r8, r0, sl, lsr #31
   30954:	sub	r0, fp, #88	; 0x58
   30958:	mov	r3, r8
   3095c:	bl	30c34 <flatcc_json_printer_clear@@Base+0x3a8>
   30960:	vmov.f64	d0, d8
   30964:	bl	308d0 <flatcc_json_printer_clear@@Base+0x44>
   30968:	str	r0, [sp, #48]	; 0x30
   3096c:	vcmpe.f64	d8, #0.0
   30970:	vmrs	APSR_nzcv, fpscr
   30974:	ble	30b18 <flatcc_json_printer_clear@@Base+0x28c>
   30978:	vldr	d16, [pc, #440]	; 30b38 <flatcc_json_printer_clear@@Base+0x2ac>
   3097c:	vcmpe.f64	d8, d16
   30980:	vmrs	APSR_nzcv, fpscr
   30984:	bhi	30b18 <flatcc_json_printer_clear@@Base+0x28c>
   30988:	mov	r9, r1
   3098c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   30990:	mvn	r1, #123	; 0x7b
   30994:	sub	r0, r1, r0
   30998:	ldr	r1, [fp, #-80]	; 0xffffffb0
   3099c:	str	r1, [sp, #44]	; 0x2c
   309a0:	add	r1, sp, #96	; 0x60
   309a4:	bl	30cd8 <flatcc_json_printer_clear@@Base+0x44c>
   309a8:	str	r0, [sp, #64]	; 0x40
   309ac:	ldr	r2, [fp, #-72]	; 0xffffffb8
   309b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   309b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   309b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   309bc:	add	r7, sp, #96	; 0x60
   309c0:	ldm	r7, {r4, r6, r7}
   309c4:	ldr	r5, [sp, #108]	; 0x6c
   309c8:	stm	sp, {r0, r1, r4, r6, r7}
   309cc:	str	r5, [sp, #20]
   309d0:	sub	r0, fp, #72	; 0x48
   309d4:	bl	30d40 <flatcc_json_printer_clear@@Base+0x4b4>
   309d8:	mov	r0, #0
   309dc:	ldr	ip, [sp, #44]	; 0x2c
   309e0:	str	ip, [sp]
   309e4:	stmib	sp, {r0, r4, r6, r7}
   309e8:	str	r5, [sp, #20]
   309ec:	movw	r0, #0
   309f0:	movt	r0, #32752	; 0x7ff0
   309f4:	and	r0, r9, r0
   309f8:	clz	r0, r0
   309fc:	lsr	r0, r0, #5
   30a00:	bfc	r9, #20, #12
   30a04:	ldr	r1, [sp, #48]	; 0x30
   30a08:	orrs	r1, r1, r9
   30a0c:	movwne	r1, #1
   30a10:	orrs	r0, r1, r0
   30a14:	ldr	r1, [sp, #60]	; 0x3c
   30a18:	lsl	r1, r1, #2
   30a1c:	orreq	r8, r1, sl, lsr #30
   30a20:	lsl	r1, sl, #2
   30a24:	lslne	r1, sl, #1
   30a28:	subs	r1, r1, #1
   30a2c:	sbc	r2, r8, #0
   30a30:	cmp	r0, #0
   30a34:	ldr	r0, [sp, #56]	; 0x38
   30a38:	ldr	r3, [sp, #52]	; 0x34
   30a3c:	subeq	r3, r0, #2
   30a40:	sub	r0, r3, ip
   30a44:	rsb	r3, r0, #32
   30a48:	lsr	r3, r1, r3
   30a4c:	orr	r3, r3, r2, lsl r0
   30a50:	subs	r2, r0, #32
   30a54:	lslpl	r3, r1, r2
   30a58:	lsl	r2, r1, r0
   30a5c:	movwpl	r2, #0
   30a60:	add	r0, sp, #80	; 0x50
   30a64:	bl	30d40 <flatcc_json_printer_clear@@Base+0x4b4>
   30a68:	ldr	r8, [sp, #80]	; 0x50
   30a6c:	ldr	r9, [sp, #84]	; 0x54
   30a70:	ldr	r0, [sp, #88]	; 0x58
   30a74:	str	r0, [sp, #60]	; 0x3c
   30a78:	ldr	sl, [sp, #92]	; 0x5c
   30a7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   30a80:	ldr	r3, [fp, #-84]	; 0xffffffac
   30a84:	ldr	r0, [fp, #-80]	; 0xffffffb0
   30a88:	ldr	r1, [fp, #-76]	; 0xffffffb4
   30a8c:	stm	sp, {r0, r1, r4, r6, r7}
   30a90:	str	r5, [sp, #20]
   30a94:	sub	r0, fp, #88	; 0x58
   30a98:	bl	30d40 <flatcc_json_printer_clear@@Base+0x4b4>
   30a9c:	sub	r3, fp, #68	; 0x44
   30aa0:	ldm	r3, {r1, r2, r3}
   30aa4:	ldr	r7, [fp, #-88]	; 0xffffffa8
   30aa8:	ldr	r5, [fp, #-84]	; 0xffffffac
   30aac:	sub	ip, fp, #80	; 0x50
   30ab0:	ldm	ip, {r4, r6, ip}
   30ab4:	ldr	r0, [sp, #68]	; 0x44
   30ab8:	str	r0, [sp, #32]
   30abc:	ldr	r0, [sp, #72]	; 0x48
   30ac0:	str	r0, [sp, #36]	; 0x24
   30ac4:	add	r0, sp, #80	; 0x50
   30ac8:	str	r0, [sp, #40]	; 0x28
   30acc:	str	ip, [sp]
   30ad0:	stmib	sp, {r1, r2, r3, r7}
   30ad4:	str	r5, [sp, #20]
   30ad8:	str	r4, [sp, #24]
   30adc:	str	r6, [sp, #28]
   30ae0:	mov	r0, r8
   30ae4:	mov	r1, r9
   30ae8:	ldr	r2, [sp, #60]	; 0x3c
   30aec:	mov	r3, sl
   30af0:	bl	30da0 <flatcc_json_printer_clear@@Base+0x514>
   30af4:	ldr	r1, [sp, #80]	; 0x50
   30af8:	ldr	r2, [sp, #64]	; 0x40
   30afc:	sub	r1, r1, r2
   30b00:	ldr	r2, [sp, #76]	; 0x4c
   30b04:	str	r1, [r2]
   30b08:	sub	sp, fp, #40	; 0x28
   30b0c:	vpop	{d8}
   30b10:	add	sp, sp, #4
   30b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30b18:	movw	r0, #34683	; 0x877b
   30b1c:	movt	r0, #3
   30b20:	movw	r1, #34536	; 0x86e8
   30b24:	movt	r1, #3
   30b28:	movw	r3, #34720	; 0x87a0
   30b2c:	movt	r3, #3
   30b30:	mov	r2, #138	; 0x8a
   30b34:	bl	14f40 <__assert_fail@plt>
   30b38:			; <UNDEFINED> instruction: 0xffffffff
   30b3c:	svcvc	0x00efffff
   30b40:	push	{r4, sl, fp, lr}
   30b44:	add	fp, sp, #8
   30b48:	cmn	r0, #1
   30b4c:	ble	30b58 <flatcc_json_printer_clear@@Base+0x2cc>
   30b50:	mov	lr, r1
   30b54:	b	30b68 <flatcc_json_printer_clear@@Base+0x2dc>
   30b58:	mov	r2, #45	; 0x2d
   30b5c:	mov	lr, r1
   30b60:	strb	r2, [lr], #1
   30b64:	rsb	r0, r0, #0
   30b68:	movw	ip, #26215	; 0x6667
   30b6c:	movt	ip, #26214	; 0x6666
   30b70:	mov	r3, lr
   30b74:	smmul	r2, r0, ip
   30b78:	asr	r4, r2, #2
   30b7c:	add	r2, r4, r2, lsr #31
   30b80:	add	r4, r2, r2, lsl #2
   30b84:	sub	r4, r0, r4, lsl #1
   30b88:	add	r4, r4, #48	; 0x30
   30b8c:	strb	r4, [r3], #1
   30b90:	add	r0, r0, #9
   30b94:	cmp	r0, #18
   30b98:	mov	r0, r2
   30b9c:	bhi	30b74 <flatcc_json_printer_clear@@Base+0x2e8>
   30ba0:	mov	r2, #0
   30ba4:	mov	r0, r3
   30ba8:	strb	r2, [r0], -lr
   30bac:	cmp	r0, #2
   30bb0:	blt	30bd8 <flatcc_json_printer_clear@@Base+0x34c>
   30bb4:	add	r0, r0, r0, lsr #31
   30bb8:	asr	r0, r0, #1
   30bbc:	sub	r2, r3, #1
   30bc0:	ldrb	ip, [lr]
   30bc4:	ldrb	r4, [r2]
   30bc8:	strb	r4, [lr], #1
   30bcc:	strb	ip, [r2], #-1
   30bd0:	subs	r0, r0, #1
   30bd4:	bne	30bc0 <flatcc_json_printer_clear@@Base+0x334>
   30bd8:	sub	r0, r3, r1
   30bdc:	pop	{r4, sl, fp, pc}
   30be0:	push	{r4, sl, fp, lr}
   30be4:	add	fp, sp, #8
   30be8:	mov	r4, r0
   30bec:	bl	308d0 <flatcc_json_printer_clear@@Base+0x44>
   30bf0:	movw	r2, #0
   30bf4:	movt	r2, #32752	; 0x7ff0
   30bf8:	ands	r2, r1, r2
   30bfc:	bfc	r1, #20, #12
   30c00:	beq	30c20 <flatcc_json_printer_clear@@Base+0x394>
   30c04:	orr	r1, r1, #1048576	; 0x100000
   30c08:	strd	r0, [r4]
   30c0c:	movw	r0, #64461	; 0xfbcd
   30c10:	movt	r0, #65535	; 0xffff
   30c14:	add	r0, r0, r2, lsr #20
   30c18:	str	r0, [r4, #8]
   30c1c:	pop	{r4, sl, fp, pc}
   30c20:	strd	r0, [r4]
   30c24:	movw	r0, #64462	; 0xfbce
   30c28:	movt	r0, #65535	; 0xffff
   30c2c:	str	r0, [r4, #8]
   30c30:	pop	{r4, sl, fp, pc}
   30c34:	push	{r4, sl, fp, lr}
   30c38:	add	fp, sp, #8
   30c3c:	orrs	r1, r2, r3
   30c40:	beq	30cb8 <flatcc_json_printer_clear@@Base+0x42c>
   30c44:	ldr	r1, [fp, #8]
   30c48:	mov	r4, #0
   30c4c:	cmp	r4, r3, lsr #22
   30c50:	bne	30c6c <flatcc_json_printer_clear@@Base+0x3e0>
   30c54:	lsl	r3, r3, #10
   30c58:	orr	r3, r3, r2, lsr #22
   30c5c:	sub	r1, r1, #10
   30c60:	lsl	r2, r2, #10
   30c64:	cmp	r3, #4194304	; 0x400000
   30c68:	bcc	30c54 <flatcc_json_printer_clear@@Base+0x3c8>
   30c6c:	ldr	ip, [fp, #12]
   30c70:	cmp	r3, #0
   30c74:	bmi	30ca0 <flatcc_json_printer_clear@@Base+0x414>
   30c78:	mvn	lr, #0
   30c7c:	lsl	r3, r3, #1
   30c80:	orr	r3, r3, r2, lsr #31
   30c84:	sub	r1, r1, #1
   30c88:	lsl	r4, r2, #1
   30c8c:	subs	r2, lr, r2, lsl #1
   30c90:	sbcs	r2, lr, r3
   30c94:	mov	r2, r4
   30c98:	blt	30c7c <flatcc_json_printer_clear@@Base+0x3f0>
   30c9c:	b	30ca4 <flatcc_json_printer_clear@@Base+0x418>
   30ca0:	mov	r4, r2
   30ca4:	str	r4, [r0]
   30ca8:	str	r3, [r0, #4]
   30cac:	str	r1, [r0, #8]
   30cb0:	str	ip, [r0, #12]
   30cb4:	pop	{r4, sl, fp, pc}
   30cb8:	movw	r0, #33754	; 0x83da
   30cbc:	movt	r0, #3
   30cc0:	movw	r1, #33763	; 0x83e3
   30cc4:	movt	r1, #3
   30cc8:	movw	r3, #33849	; 0x8439
   30ccc:	movt	r3, #3
   30cd0:	mov	r2, #260	; 0x104
   30cd4:	bl	14f40 <__assert_fail@plt>
   30cd8:	push	{r4, sl, fp, lr}
   30cdc:	add	fp, sp, #8
   30ce0:	mov	r4, r1
   30ce4:	add	r0, r0, #63	; 0x3f
   30ce8:	vldr	d16, [pc, #72]	; 30d38 <flatcc_json_printer_clear@@Base+0x4ac>
   30cec:	vmov	s0, r0
   30cf0:	vcvt.f64.s32	d17, s0
   30cf4:	vmul.f64	d0, d17, d16
   30cf8:	bl	31124 <flatcc_json_printer_clear@@Base+0x898>
   30cfc:	movw	r1, #347	; 0x15b
   30d00:	add	r0, r0, r1
   30d04:	asr	r1, r0, #31
   30d08:	add	r0, r0, r1, lsr #29
   30d0c:	mvn	r1, #14
   30d10:	and	r0, r1, r0, lsl #1
   30d14:	movw	r1, #35416	; 0x8a58
   30d18:	movt	r1, #3
   30d1c:	add	r0, r0, r1
   30d20:	ldrd	r2, [r0, #16]
   30d24:	stm	r4, {r2, r3}
   30d28:	ldrsh	r1, [r0, #24]
   30d2c:	str	r1, [r4, #8]
   30d30:	ldrsh	r0, [r0, #26]
   30d34:	pop	{r4, sl, fp, pc}
   30d38:			; <UNDEFINED> instruction: 0x509f79fe
   30d3c:	svccc	0x00d34413
   30d40:	push	{r4, r5, fp, lr}
   30d44:	add	fp, sp, #8
   30d48:	ldr	ip, [fp, #24]
   30d4c:	ldr	r1, [fp, #8]
   30d50:	add	r1, r1, ip
   30d54:	add	r1, r1, #64	; 0x40
   30d58:	str	r1, [r0, #8]
   30d5c:	ldr	ip, [fp, #16]
   30d60:	umull	r1, lr, ip, r2
   30d64:	umull	ip, r1, ip, r3
   30d68:	mov	r5, #0
   30d6c:	adds	lr, ip, lr
   30d70:	adc	r5, r5, #0
   30d74:	ldr	ip, [fp, #20]
   30d78:	umull	r2, r4, ip, r2
   30d7c:	adds	r2, lr, r2
   30d80:	adc	r5, r5, #0
   30d84:	umaal	r1, r4, ip, r3
   30d88:	adds	r2, r2, #-2147483648	; 0x80000000
   30d8c:	adcs	r1, r1, r5
   30d90:	str	r1, [r0]
   30d94:	adc	r1, r4, #0
   30d98:	str	r1, [r0, #4]
   30d9c:	pop	{r4, r5, fp, pc}
   30da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30da4:	add	fp, sp, #28
   30da8:	sub	sp, sp, #132	; 0x84
   30dac:	mov	r6, #0
   30db0:	str	r6, [sp, #20]
   30db4:	str	r2, [sp, #16]
   30db8:	subs	r0, r0, #1
   30dbc:	sbc	r1, r1, #0
   30dc0:	str	r1, [sp, #12]
   30dc4:	str	r0, [sp, #8]
   30dc8:	str	r6, [sp, #4]
   30dcc:	ldr	r0, [fp, #32]
   30dd0:	str	r0, [sp]
   30dd4:	ldr	r0, [fp, #28]
   30dd8:	ldr	r1, [fp, #24]
   30ddc:	adds	r9, r1, #1
   30de0:	adc	r4, r0, #0
   30de4:	sub	r0, fp, #48	; 0x30
   30de8:	mov	r2, r9
   30dec:	mov	r3, r4
   30df0:	bl	31150 <flatcc_json_printer_clear@@Base+0x8c4>
   30df4:	ldr	r1, [fp, #16]
   30df8:	rsb	sl, r1, #0
   30dfc:	lsr	r0, r9, sl
   30e00:	add	r8, r1, #32
   30e04:	orr	r7, r0, r4, lsl r8
   30e08:	mvn	r0, #31
   30e0c:	subs	r5, r0, r1
   30e10:	lsrpl	r7, r4, r5
   30e14:	add	r1, r1, #64	; 0x40
   30e18:	sub	r2, fp, #52	; 0x34
   30e1c:	mov	r0, r7
   30e20:	bl	311a8 <flatcc_json_printer_clear@@Base+0x91c>
   30e24:	mov	ip, sl
   30e28:	ldr	r1, [fp, #48]	; 0x30
   30e2c:	str	r0, [r1]
   30e30:	mov	sl, #1
   30e34:	lsr	r2, sl, r8
   30e38:	cmp	r5, #0
   30e3c:	lslpl	r2, sl, r5
   30e40:	lsl	r5, sl, ip
   30e44:	movwpl	r5, #0
   30e48:	ldr	r0, [fp, #44]	; 0x2c
   30e4c:	str	r6, [r0]
   30e50:	ldr	r1, [r1]
   30e54:	str	r5, [sp, #40]	; 0x28
   30e58:	subs	r3, r5, #1
   30e5c:	str	r9, [sp, #48]	; 0x30
   30e60:	and	r9, r3, r9
   30e64:	str	r2, [sp, #44]	; 0x2c
   30e68:	sbc	r2, r2, #0
   30e6c:	str	r4, [sp, #52]	; 0x34
   30e70:	str	r2, [sp, #68]	; 0x44
   30e74:	and	r8, r2, r4
   30e78:	cmp	r1, #1
   30e7c:	blt	30f2c <flatcc_json_printer_clear@@Base+0x6a0>
   30e80:	str	r3, [sp, #36]	; 0x24
   30e84:	ldr	r1, [fp, #-48]	; 0xffffffd0
   30e88:	str	r1, [sp, #64]	; 0x40
   30e8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   30e90:	str	r1, [sp, #60]	; 0x3c
   30e94:	ldr	r5, [fp, #-52]	; 0xffffffcc
   30e98:	ldr	r3, [fp, #48]	; 0x30
   30e9c:	udiv	r2, r7, r5
   30ea0:	add	r6, r2, #48	; 0x30
   30ea4:	ldr	r4, [r0]
   30ea8:	ldr	r1, [fp, #40]	; 0x28
   30eac:	strb	r6, [r1, r4]
   30eb0:	ldr	r6, [r0]
   30eb4:	add	r6, r6, #1
   30eb8:	str	r6, [r0]
   30ebc:	ldr	r6, [r3]
   30ec0:	sub	r6, r6, #1
   30ec4:	str	r6, [r3]
   30ec8:	mls	r7, r2, r5, r7
   30ecc:	rsb	r6, ip, #32
   30ed0:	lsr	r2, r7, r6
   30ed4:	subs	r4, ip, #32
   30ed8:	lslpl	r2, r7, r4
   30edc:	lsl	r1, r7, ip
   30ee0:	movwpl	r1, #0
   30ee4:	adds	lr, r1, r9
   30ee8:	adc	r2, r2, r8
   30eec:	ldr	r1, [sp, #64]	; 0x40
   30ef0:	str	lr, [sp, #56]	; 0x38
   30ef4:	subs	r1, lr, r1
   30ef8:	ldr	r1, [sp, #60]	; 0x3c
   30efc:	sbcs	r1, r2, r1
   30f00:	bcc	31078 <flatcc_json_printer_clear@@Base+0x7ec>
   30f04:	movw	r1, #52429	; 0xcccd
   30f08:	movt	r1, #52428	; 0xcccc
   30f0c:	umull	r1, r2, r5, r1
   30f10:	lsr	r5, r2, #3
   30f14:	ldr	r1, [r3]
   30f18:	cmp	r1, #0
   30f1c:	bgt	30e9c <flatcc_json_printer_clear@@Base+0x610>
   30f20:	str	r5, [fp, #-52]	; 0xffffffcc
   30f24:	mov	r6, #0
   30f28:	ldr	r3, [sp, #36]	; 0x24
   30f2c:	ldr	r7, [fp, #-48]	; 0xffffffd0
   30f30:	ldr	r5, [fp, #-44]	; 0xffffffd4
   30f34:	rsb	r1, ip, #32
   30f38:	str	r1, [sp, #64]	; 0x40
   30f3c:	sub	r1, ip, #32
   30f40:	str	r1, [sp, #60]	; 0x3c
   30f44:	str	ip, [sp, #56]	; 0x38
   30f48:	mov	lr, #10
   30f4c:	mov	ip, r6
   30f50:	umull	r4, r6, r9, lr
   30f54:	mov	r9, r3
   30f58:	ldr	r0, [sp, #56]	; 0x38
   30f5c:	lsr	r3, r4, r0
   30f60:	add	r2, r8, r8, lsl #2
   30f64:	add	r2, r6, r2, lsl #1
   30f68:	ldr	r1, [sp, #64]	; 0x40
   30f6c:	orr	r3, r3, r2, lsl r1
   30f70:	ldr	r1, [sp, #60]	; 0x3c
   30f74:	cmp	r1, #0
   30f78:	lsrpl	r3, r2, r1
   30f7c:	add	r3, r3, #48	; 0x30
   30f80:	ldr	r1, [fp, #44]	; 0x2c
   30f84:	mov	r0, r1
   30f88:	ldr	r6, [r1]
   30f8c:	ldr	r1, [fp, #40]	; 0x28
   30f90:	strb	r3, [r1, r6]
   30f94:	ldr	r3, [r0]
   30f98:	add	r3, r3, #1
   30f9c:	str	r3, [r0]
   30fa0:	ldr	r0, [fp, #48]	; 0x30
   30fa4:	ldr	r3, [r0]
   30fa8:	sub	r3, r3, #1
   30fac:	str	r3, [r0]
   30fb0:	umull	sl, r3, sl, lr
   30fb4:	add	r6, ip, ip, lsl #2
   30fb8:	add	r6, r3, r6, lsl #1
   30fbc:	umull	r7, r3, r7, lr
   30fc0:	add	r5, r5, r5, lsl #2
   30fc4:	add	r5, r3, r5, lsl #1
   30fc8:	mov	r3, r9
   30fcc:	ldr	r0, [sp, #68]	; 0x44
   30fd0:	and	r8, r2, r0
   30fd4:	and	r9, r4, r9
   30fd8:	subs	r2, r9, r7
   30fdc:	sbcs	r2, r8, r5
   30fe0:	bcs	30f4c <flatcc_json_printer_clear@@Base+0x6c0>
   30fe4:	str	r7, [fp, #-48]	; 0xffffffd0
   30fe8:	str	r5, [fp, #-44]	; 0xffffffd4
   30fec:	ldr	r0, [fp, #44]	; 0x2c
   30ff0:	ldr	r4, [r0]
   30ff4:	mov	r0, #0
   30ff8:	ldr	r1, [fp, #32]
   30ffc:	str	r1, [sp]
   31000:	str	r0, [sp, #4]
   31004:	ldr	r0, [fp, #8]
   31008:	str	r0, [sp, #8]
   3100c:	ldr	r0, [fp, #12]
   31010:	str	r0, [sp, #12]
   31014:	ldr	r0, [fp, #16]
   31018:	str	r0, [sp, #16]
   3101c:	ldr	r0, [fp, #20]
   31020:	str	r0, [sp, #20]
   31024:	add	r0, sp, #72	; 0x48
   31028:	ldr	r2, [sp, #48]	; 0x30
   3102c:	ldr	r3, [sp, #52]	; 0x34
   31030:	bl	31150 <flatcc_json_printer_clear@@Base+0x8c4>
   31034:	ldr	r0, [sp, #72]	; 0x48
   31038:	ldr	r1, [sp, #76]	; 0x4c
   3103c:	str	r7, [sp]
   31040:	stmib	sp, {r5, r9}
   31044:	str	r8, [sp, #12]
   31048:	ldr	r2, [sp, #40]	; 0x28
   3104c:	str	r2, [sp, #16]
   31050:	ldr	r2, [sp, #44]	; 0x2c
   31054:	str	r2, [sp, #20]
   31058:	str	sl, [sp, #24]
   3105c:	str	r6, [sp, #28]
   31060:	umull	r2, r3, r0, sl
   31064:	mla	r0, r0, r6, r3
   31068:	mla	r3, r1, sl, r0
   3106c:	ldr	r0, [fp, #40]	; 0x28
   31070:	mov	r1, r4
   31074:	b	31118 <flatcc_json_printer_clear@@Base+0x88c>
   31078:	str	r5, [fp, #-52]	; 0xffffffcc
   3107c:	ldr	sl, [r0]
   31080:	mov	r8, #0
   31084:	ldr	r0, [fp, #32]
   31088:	stm	sp, {r0, r8}
   3108c:	ldr	r0, [fp, #8]
   31090:	str	r0, [sp, #8]
   31094:	ldr	r0, [fp, #12]
   31098:	str	r0, [sp, #12]
   3109c:	ldr	r0, [fp, #16]
   310a0:	str	r0, [sp, #16]
   310a4:	ldr	r0, [fp, #20]
   310a8:	str	r0, [sp, #20]
   310ac:	sub	r0, fp, #72	; 0x48
   310b0:	mov	r9, r2
   310b4:	ldr	r2, [sp, #48]	; 0x30
   310b8:	ldr	r3, [sp, #52]	; 0x34
   310bc:	mov	r7, ip
   310c0:	bl	31150 <flatcc_json_printer_clear@@Base+0x8c4>
   310c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   310c8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   310cc:	mov	r0, #1
   310d0:	lsr	r1, r5, r6
   310d4:	cmp	r4, #0
   310d8:	lslpl	r1, r5, r4
   310dc:	lsl	r6, r5, r7
   310e0:	movwpl	r6, #0
   310e4:	ldr	r7, [sp, #64]	; 0x40
   310e8:	str	r7, [sp]
   310ec:	ldr	r7, [sp, #60]	; 0x3c
   310f0:	str	r7, [sp, #4]
   310f4:	ldr	r7, [sp, #56]	; 0x38
   310f8:	str	r7, [sp, #8]
   310fc:	str	r9, [sp, #12]
   31100:	str	r6, [sp, #16]
   31104:	str	r1, [sp, #20]
   31108:	str	r0, [sp, #24]
   3110c:	str	r8, [sp, #28]
   31110:	ldr	r0, [fp, #40]	; 0x28
   31114:	mov	r1, sl
   31118:	bl	311e4 <flatcc_json_printer_clear@@Base+0x958>
   3111c:	sub	sp, fp, #28
   31120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31124:	vcvt.s32.f64	s2, d0
   31128:	vmov	r0, s2
   3112c:	vcmpe.f64	d0, #0.0
   31130:	vmrs	APSR_nzcv, fpscr
   31134:	bxmi	lr
   31138:	vcvt.f64.s32	d16, s2
   3113c:	vsub.f64	d16, d0, d16
   31140:	vcmp.f64	d16, #0.0
   31144:	vmrs	APSR_nzcv, fpscr
   31148:	addne	r0, r0, #1
   3114c:	bx	lr
   31150:	push	{fp, lr}
   31154:	mov	fp, sp
   31158:	ldr	ip, [fp, #8]
   3115c:	str	ip, [r0, #8]
   31160:	ldr	r1, [fp, #16]
   31164:	subs	r1, r2, r1
   31168:	str	r1, [r0]
   3116c:	ldr	r1, [fp, #20]
   31170:	sbcs	r1, r3, r1
   31174:	str	r1, [r0, #4]
   31178:	bcc	31188 <flatcc_json_printer_clear@@Base+0x8fc>
   3117c:	ldr	r0, [fp, #24]
   31180:	cmp	ip, r0
   31184:	popeq	{fp, pc}
   31188:	movw	r0, #34761	; 0x87c9
   3118c:	movt	r0, #3
   31190:	movw	r1, #33763	; 0x83e3
   31194:	movt	r1, #3
   31198:	movw	r3, #34786	; 0x87e2
   3119c:	movt	r3, #3
   311a0:	mov	r2, #239	; 0xef
   311a4:	bl	14f40 <__assert_fail@plt>
   311a8:	push	{fp, lr}
   311ac:	mov	fp, sp
   311b0:	movw	r3, #1233	; 0x4d1
   311b4:	mla	lr, r1, r3, r3
   311b8:	mov	r1, #1
   311bc:	add	r1, r1, lr, asr #12
   311c0:	movw	ip, #36808	; 0x8fc8
   311c4:	movt	ip, #3
   311c8:	ldr	r3, [ip, r1, lsl #2]
   311cc:	cmp	r3, r0
   311d0:	asrhi	r1, lr, #12
   311d4:	ldr	r0, [ip, r1, lsl #2]
   311d8:	str	r0, [r2]
   311dc:	mov	r0, r1
   311e0:	pop	{fp, pc}
   311e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   311e8:	add	fp, sp, #28
   311ec:	sub	sp, sp, #20
   311f0:	str	r1, [sp, #12]
   311f4:	str	r0, [sp, #16]
   311f8:	ldr	r5, [fp, #20]
   311fc:	ldr	ip, [fp, #12]
   31200:	ldr	r1, [fp, #16]
   31204:	ldr	lr, [fp, #8]
   31208:	subs	r8, lr, r1
   3120c:	sbc	r7, ip, r5
   31210:	mov	r9, #0
   31214:	ldr	r0, [fp, #28]
   31218:	ldr	r4, [fp, #24]
   3121c:	subs	r4, r8, r4
   31220:	sbcs	r4, r7, r0
   31224:	movwcc	r9, #1
   31228:	ldr	r4, [fp, #36]	; 0x24
   3122c:	ldr	r0, [fp, #32]
   31230:	adds	r6, r0, r2
   31234:	str	r6, [sp, #8]
   31238:	adc	r6, r4, r3
   3123c:	subs	r0, r2, r0
   31240:	sbc	sl, r3, r4
   31244:	subs	r4, r1, r0
   31248:	sbcs	r4, r5, sl
   3124c:	str	r6, [sp, #4]
   31250:	bcs	31314 <flatcc_json_printer_clear@@Base+0xa88>
   31254:	ldr	r3, [fp, #24]
   31258:	subs	r4, r8, r3
   3125c:	ldr	r2, [fp, #28]
   31260:	sbcs	r4, r7, r2
   31264:	bcc	3131c <flatcc_json_printer_clear@@Base+0xa90>
   31268:	ldr	r1, [sp, #12]
   3126c:	sub	r1, r1, #1
   31270:	str	r1, [sp, #12]
   31274:	ldr	r5, [fp, #20]
   31278:	ldr	r8, [fp, #16]
   3127c:	adds	r7, r8, r3
   31280:	adc	r6, r5, r2
   31284:	subs	r4, r7, r0
   31288:	sbcs	r4, r6, sl
   3128c:	bcc	312c4 <flatcc_json_printer_clear@@Base+0xa38>
   31290:	subs	r4, r7, r0
   31294:	sbc	lr, r6, sl
   31298:	mov	r1, ip
   3129c:	subs	ip, r0, r8
   312a0:	mov	r2, r8
   312a4:	sbc	r8, sl, r5
   312a8:	subs	r4, ip, r4
   312ac:	mov	ip, r1
   312b0:	sbcs	r4, r8, lr
   312b4:	mov	r8, r2
   312b8:	ldr	r2, [fp, #28]
   312bc:	ldr	lr, [fp, #8]
   312c0:	bcc	31330 <flatcc_json_printer_clear@@Base+0xaa4>
   312c4:	ldr	r1, [sp, #16]
   312c8:	ldr	r4, [sp, #12]
   312cc:	ldrb	r5, [r1, r4]
   312d0:	sub	r5, r5, #1
   312d4:	strb	r5, [r1, r4]
   312d8:	subs	r5, lr, r7
   312dc:	sbc	r4, ip, r6
   312e0:	subs	r1, r5, r3
   312e4:	sbcs	r1, r4, r2
   312e8:	mov	r9, #0
   312ec:	movwcc	r9, #1
   312f0:	subs	r1, r7, r0
   312f4:	sbcs	r1, r6, sl
   312f8:	bcs	31328 <flatcc_json_printer_clear@@Base+0xa9c>
   312fc:	subs	r1, r5, r3
   31300:	sbcs	r1, r4, r2
   31304:	mov	r8, r7
   31308:	mov	r5, r6
   3130c:	bcs	3127c <flatcc_json_printer_clear@@Base+0x9f0>
   31310:	b	31330 <flatcc_json_printer_clear@@Base+0xaa4>
   31314:	ldr	r2, [fp, #28]
   31318:	ldr	r3, [fp, #24]
   3131c:	ldr	r5, [fp, #20]
   31320:	ldr	r8, [fp, #16]
   31324:	b	31330 <flatcc_json_printer_clear@@Base+0xaa4>
   31328:	mov	r8, r7
   3132c:	mov	r5, r6
   31330:	ldr	r4, [sp, #8]
   31334:	subs	r0, r8, r4
   31338:	ldr	r6, [sp, #4]
   3133c:	sbcs	r0, r5, r6
   31340:	bcs	31380 <flatcc_json_printer_clear@@Base+0xaf4>
   31344:	tst	r9, #1
   31348:	bne	31380 <flatcc_json_printer_clear@@Base+0xaf4>
   3134c:	adds	r1, r8, r3
   31350:	adc	r2, r5, r2
   31354:	mov	r0, #0
   31358:	subs	r3, r1, r4
   3135c:	sbcs	r3, r2, r6
   31360:	bcc	313cc <flatcc_json_printer_clear@@Base+0xb40>
   31364:	subs	r3, r4, r8
   31368:	sbc	r7, r6, r5
   3136c:	subs	r1, r1, r4
   31370:	sbc	r2, r2, r6
   31374:	subs	r1, r1, r3
   31378:	sbcs	r1, r2, r7
   3137c:	bcc	313cc <flatcc_json_printer_clear@@Base+0xb40>
   31380:	ldr	r0, [fp, #36]	; 0x24
   31384:	lsl	r0, r0, #1
   31388:	ldr	r1, [fp, #32]
   3138c:	mov	r2, r1
   31390:	orr	r1, r0, r1, lsr #31
   31394:	mov	r0, #0
   31398:	subs	r2, r8, r2, lsl #1
   3139c:	sbcs	r1, r5, r1
   313a0:	bcc	313cc <flatcc_json_printer_clear@@Base+0xb40>
   313a4:	ldr	r0, [fp, #36]	; 0x24
   313a8:	lsl	r0, r0, #2
   313ac:	ldr	r1, [fp, #32]
   313b0:	orr	r0, r0, r1, lsr #30
   313b4:	subs	r1, lr, r1, lsl #2
   313b8:	sbc	r2, ip, r0
   313bc:	mov	r0, #0
   313c0:	subs	r1, r1, r8
   313c4:	sbcs	r1, r2, r5
   313c8:	movwcs	r0, #1
   313cc:	sub	sp, fp, #28
   313d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   313d4:	push	{r4, r5, r6, r7, fp, lr}
   313d8:	add	fp, sp, #16
   313dc:	mov	r4, r2
   313e0:	mov	r6, r1
   313e4:	mov	r5, r0
   313e8:	ldr	r0, [r0, #16]
   313ec:	ldr	r1, [r5, #20]
   313f0:	cmp	r1, r0
   313f4:	bcc	31408 <flatcc_json_printer_clear@@Base+0xb7c>
   313f8:	ldr	r2, [r5, #44]	; 0x2c
   313fc:	mov	r0, r5
   31400:	mov	r1, #0
   31404:	blx	r2
   31408:	ldr	r1, [r5, #16]
   3140c:	ldr	r0, [r5, #20]
   31410:	sub	r7, r1, r0
   31414:	cmp	r7, r4
   31418:	bcs	31460 <flatcc_json_printer_clear@@Base+0xbd4>
   3141c:	mov	r1, r6
   31420:	mov	r2, r7
   31424:	bl	14e5c <memcpy@plt>
   31428:	ldr	r0, [r5, #20]
   3142c:	ldr	r2, [r5, #44]	; 0x2c
   31430:	add	r0, r0, r7
   31434:	str	r0, [r5, #20]
   31438:	mov	r0, r5
   3143c:	mov	r1, #0
   31440:	blx	r2
   31444:	sub	r4, r4, r7
   31448:	add	r6, r6, r7
   3144c:	ldr	r1, [r5, #16]
   31450:	ldr	r0, [r5, #20]
   31454:	sub	r7, r1, r0
   31458:	cmp	r4, r7
   3145c:	bhi	3141c <flatcc_json_printer_clear@@Base+0xb90>
   31460:	mov	r1, r6
   31464:	mov	r2, r4
   31468:	bl	14e5c <memcpy@plt>
   3146c:	ldr	r0, [r5, #20]
   31470:	add	r0, r0, r4
   31474:	str	r0, [r5, #20]
   31478:	pop	{r4, r5, r6, r7, fp, pc}
   3147c:	push	{r4, r5, r6, sl, fp, lr}
   31480:	add	fp, sp, #16
   31484:	mov	r5, r1
   31488:	mov	r4, r0
   3148c:	ldr	r0, [r0, #16]
   31490:	ldr	r1, [r4, #20]
   31494:	cmp	r1, r0
   31498:	bcc	314ac <flatcc_json_printer_clear@@Base+0xc20>
   3149c:	ldr	r2, [r4, #44]	; 0x2c
   314a0:	mov	r0, r4
   314a4:	mov	r1, #0
   314a8:	blx	r2
   314ac:	ldr	r1, [r4, #16]
   314b0:	ldr	r0, [r4, #20]
   314b4:	sub	r6, r1, r0
   314b8:	cmp	r6, r5
   314bc:	bcs	31500 <flatcc_json_printer_clear@@Base+0xc74>
   314c0:	mov	r1, #32
   314c4:	mov	r2, r6
   314c8:	bl	14eec <memset@plt>
   314cc:	ldr	r0, [r4, #20]
   314d0:	ldr	r2, [r4, #44]	; 0x2c
   314d4:	add	r0, r0, r6
   314d8:	str	r0, [r4, #20]
   314dc:	mov	r0, r4
   314e0:	mov	r1, #0
   314e4:	blx	r2
   314e8:	sub	r5, r5, r6
   314ec:	ldr	r1, [r4, #16]
   314f0:	ldr	r0, [r4, #20]
   314f4:	sub	r6, r1, r0
   314f8:	cmp	r5, r6
   314fc:	bhi	314c0 <flatcc_json_printer_clear@@Base+0xc34>
   31500:	mov	r1, #32
   31504:	mov	r2, r5
   31508:	bl	14eec <memset@plt>
   3150c:	ldr	r0, [r4, #20]
   31510:	add	r0, r0, r5
   31514:	str	r0, [r4, #20]
   31518:	pop	{r4, r5, r6, sl, fp, pc}
   3151c:	add	r0, r0, r1
   31520:	b	31524 <flatcc_json_printer_clear@@Base+0xc98>
   31524:	ldrh	r0, [r0]
   31528:	b	3152c <flatcc_json_printer_clear@@Base+0xca0>
   3152c:	bx	lr
   31530:	mov	r2, r0
   31534:	lsl	r0, r0, #2
   31538:	movw	ip, #43691	; 0xaaab
   3153c:	movt	ip, #43690	; 0xaaaa
   31540:	umull	r0, r3, r0, ip
   31544:	mov	r0, #3
   31548:	add	r0, r0, r3, lsr #1
   3154c:	bic	r0, r0, #3
   31550:	tst	r1, #128	; 0x80
   31554:	bxne	lr
   31558:	umull	r1, r3, r2, ip
   3155c:	lsr	r1, r3, #1
   31560:	add	r1, r1, r1, lsl #1
   31564:	sub	r1, r2, r1
   31568:	cmp	r1, #1
   3156c:	beq	31580 <flatcc_json_printer_clear@@Base+0xcf4>
   31570:	cmp	r1, #2
   31574:	subeq	r0, r0, #1
   31578:	bxeq	lr
   3157c:	bx	lr
   31580:	sub	r0, r0, #2
   31584:	bx	lr
   31588:	push	{r4, r5, fp, lr}
   3158c:	add	fp, sp, #8
   31590:	cmp	r2, #0
   31594:	beq	316cc <flatcc_json_printer_clear@@Base+0xe40>
   31598:	bic	ip, r3, #224	; 0xe0
   3159c:	ldr	lr, [r2]
   315a0:	cmp	ip, #0
   315a4:	beq	315c4 <flatcc_json_printer_clear@@Base+0xd38>
   315a8:	cmp	ip, #1
   315ac:	bne	316c0 <flatcc_json_printer_clear@@Base+0xe34>
   315b0:	movw	ip, #35210	; 0x898a
   315b4:	movt	ip, #3
   315b8:	cmp	lr, #3
   315bc:	bcs	315d4 <flatcc_json_printer_clear@@Base+0xd48>
   315c0:	b	31634 <flatcc_json_printer_clear@@Base+0xda8>
   315c4:	movw	ip, #35145	; 0x8949
   315c8:	movt	ip, #3
   315cc:	cmp	lr, #3
   315d0:	bcc	31634 <flatcc_json_printer_clear@@Base+0xda8>
   315d4:	ldrb	r4, [r1]
   315d8:	ldrb	r4, [ip, r4, lsr #2]
   315dc:	strb	r4, [r0]
   315e0:	ldrb	r4, [r1]
   315e4:	ldrb	r5, [r1, #1]
   315e8:	lsr	r5, r5, #4
   315ec:	bfi	r5, r4, #4, #2
   315f0:	ldrb	r4, [ip, r5]
   315f4:	strb	r4, [r0, #1]
   315f8:	ldrb	r4, [r1, #1]
   315fc:	ldrb	r5, [r1, #2]
   31600:	lsr	r5, r5, #6
   31604:	bfi	r5, r4, #2, #4
   31608:	ldrb	r4, [ip, r5]
   3160c:	strb	r4, [r0, #2]
   31610:	ldrb	r4, [r1, #2]
   31614:	and	r4, r4, #63	; 0x3f
   31618:	ldrb	r4, [ip, r4]
   3161c:	strb	r4, [r0, #3]
   31620:	add	r0, r0, #4
   31624:	add	r1, r1, #3
   31628:	sub	lr, lr, #3
   3162c:	cmp	lr, #2
   31630:	bhi	315d4 <flatcc_json_printer_clear@@Base+0xd48>
   31634:	and	r3, r3, #128	; 0x80
   31638:	cmp	lr, #1
   3163c:	beq	3168c <flatcc_json_printer_clear@@Base+0xe00>
   31640:	cmp	lr, #2
   31644:	bne	316b4 <flatcc_json_printer_clear@@Base+0xe28>
   31648:	ldrb	r5, [r1]
   3164c:	ldrb	r5, [ip, r5, lsr #2]
   31650:	strb	r5, [r0]
   31654:	ldrb	r5, [r1]
   31658:	ldrb	r4, [r1, #1]
   3165c:	lsr	r4, r4, #4
   31660:	bfi	r4, r5, #4, #2
   31664:	ldrb	r5, [ip, r4]
   31668:	strb	r5, [r0, #1]
   3166c:	ldrb	r1, [r1, #1]
   31670:	and	r1, r1, #15
   31674:	ldrb	r1, [ip, r1, lsl #2]
   31678:	strb	r1, [r0, #2]
   3167c:	cmp	r3, #0
   31680:	movne	r1, #61	; 0x3d
   31684:	strbne	r1, [r0, #3]
   31688:	b	316b4 <flatcc_json_printer_clear@@Base+0xe28>
   3168c:	ldrb	r5, [r1]
   31690:	ldrb	r5, [ip, r5, lsr #2]
   31694:	strb	r5, [r0]
   31698:	ldrb	r1, [r1]
   3169c:	and	r1, r1, #3
   316a0:	ldrb	r1, [ip, r1, lsl #4]
   316a4:	strb	r1, [r0, #1]
   316a8:	cmp	r3, #0
   316ac:	movwne	r1, #15677	; 0x3d3d
   316b0:	strhne	r1, [r0, #2]
   316b4:	mov	lr, #0
   316b8:	cmp	r2, #0
   316bc:	popeq	{r4, r5, fp, pc}
   316c0:	ldr	r0, [r2]
   316c4:	sub	r0, r0, lr
   316c8:	str	r0, [r2]
   316cc:	pop	{r4, r5, fp, pc}
   316d0:	bx	lr
   316d4:	bx	lr
   316d8:	bx	lr
   316dc:	bx	lr
   316e0:	bx	lr
   316e4:	bx	lr
   316e8:	bx	lr
   316ec:	bx	lr
   316f0:	bx	lr
   316f4:	bx	lr
   316f8:	bx	lr
   316fc:	bx	lr
   31700:	bx	lr
   31704:	ldr	r0, [r0]
   31708:	b	3170c <flatcc_json_printer_clear@@Base+0xe80>
   3170c:	bx	lr
   31710:	bx	lr
   31714:	ldr	r0, [r0]
   31718:	b	3171c <flatcc_json_printer_clear@@Base+0xe90>
   3171c:	bx	lr
   31720:	eor	r1, r1, #-2147483648	; 0x80000000
   31724:	b	3172c <flatcc_json_printer_clear@@Base+0xea0>
   31728:	eor	r3, r3, #-2147483648	; 0x80000000
   3172c:	push	{r4, r5, lr}
   31730:	lsl	r4, r1, #1
   31734:	lsl	r5, r3, #1
   31738:	teq	r4, r5
   3173c:	teqeq	r0, r2
   31740:	orrsne	ip, r4, r0
   31744:	orrsne	ip, r5, r2
   31748:	mvnsne	ip, r4, asr #21
   3174c:	mvnsne	ip, r5, asr #21
   31750:	beq	3193c <flatcc_json_printer_clear@@Base+0x10b0>
   31754:	lsr	r4, r4, #21
   31758:	rsbs	r5, r4, r5, lsr #21
   3175c:	rsblt	r5, r5, #0
   31760:	ble	31780 <flatcc_json_printer_clear@@Base+0xef4>
   31764:	add	r4, r4, r5
   31768:	eor	r2, r0, r2
   3176c:	eor	r3, r1, r3
   31770:	eor	r0, r2, r0
   31774:	eor	r1, r3, r1
   31778:	eor	r2, r0, r2
   3177c:	eor	r3, r1, r3
   31780:	cmp	r5, #54	; 0x36
   31784:	pophi	{r4, r5, pc}
   31788:	tst	r1, #-2147483648	; 0x80000000
   3178c:	lsl	r1, r1, #12
   31790:	mov	ip, #1048576	; 0x100000
   31794:	orr	r1, ip, r1, lsr #12
   31798:	beq	317a4 <flatcc_json_printer_clear@@Base+0xf18>
   3179c:	rsbs	r0, r0, #0
   317a0:	rsc	r1, r1, #0
   317a4:	tst	r3, #-2147483648	; 0x80000000
   317a8:	lsl	r3, r3, #12
   317ac:	orr	r3, ip, r3, lsr #12
   317b0:	beq	317bc <flatcc_json_printer_clear@@Base+0xf30>
   317b4:	rsbs	r2, r2, #0
   317b8:	rsc	r3, r3, #0
   317bc:	teq	r4, r5
   317c0:	beq	31924 <flatcc_json_printer_clear@@Base+0x1098>
   317c4:	sub	r4, r4, #1
   317c8:	rsbs	lr, r5, #32
   317cc:	blt	317e8 <flatcc_json_printer_clear@@Base+0xf5c>
   317d0:	lsl	ip, r2, lr
   317d4:	adds	r0, r0, r2, lsr r5
   317d8:	adc	r1, r1, #0
   317dc:	adds	r0, r0, r3, lsl lr
   317e0:	adcs	r1, r1, r3, asr r5
   317e4:	b	31804 <flatcc_json_printer_clear@@Base+0xf78>
   317e8:	sub	r5, r5, #32
   317ec:	add	lr, lr, #32
   317f0:	cmp	r2, #1
   317f4:	lsl	ip, r3, lr
   317f8:	orrcs	ip, ip, #2
   317fc:	adds	r0, r0, r3, asr r5
   31800:	adcs	r1, r1, r3, asr #31
   31804:	and	r5, r1, #-2147483648	; 0x80000000
   31808:	bpl	31818 <flatcc_json_printer_clear@@Base+0xf8c>
   3180c:	rsbs	ip, ip, #0
   31810:	rscs	r0, r0, #0
   31814:	rsc	r1, r1, #0
   31818:	cmp	r1, #1048576	; 0x100000
   3181c:	bcc	3185c <flatcc_json_printer_clear@@Base+0xfd0>
   31820:	cmp	r1, #2097152	; 0x200000
   31824:	bcc	31844 <flatcc_json_printer_clear@@Base+0xfb8>
   31828:	lsrs	r1, r1, #1
   3182c:	rrxs	r0, r0
   31830:	rrx	ip, ip
   31834:	add	r4, r4, #1
   31838:	lsl	r2, r4, #21
   3183c:	cmn	r2, #4194304	; 0x400000
   31840:	bcs	3199c <flatcc_json_printer_clear@@Base+0x1110>
   31844:	cmp	ip, #-2147483648	; 0x80000000
   31848:	lsrseq	ip, r0, #1
   3184c:	adcs	r0, r0, #0
   31850:	adc	r1, r1, r4, lsl #20
   31854:	orr	r1, r1, r5
   31858:	pop	{r4, r5, pc}
   3185c:	lsls	ip, ip, #1
   31860:	adcs	r0, r0, r0
   31864:	adc	r1, r1, r1
   31868:	tst	r1, #1048576	; 0x100000
   3186c:	sub	r4, r4, #1
   31870:	bne	31844 <flatcc_json_printer_clear@@Base+0xfb8>
   31874:	teq	r1, #0
   31878:	moveq	r1, r0
   3187c:	moveq	r0, #0
   31880:	clz	r3, r1
   31884:	addeq	r3, r3, #32
   31888:	sub	r3, r3, #11
   3188c:	subs	r2, r3, #32
   31890:	bge	318b4 <flatcc_json_printer_clear@@Base+0x1028>
   31894:	adds	r2, r2, #12
   31898:	ble	318b0 <flatcc_json_printer_clear@@Base+0x1024>
   3189c:	add	ip, r2, #20
   318a0:	rsb	r2, r2, #12
   318a4:	lsl	r0, r1, ip
   318a8:	lsr	r1, r1, r2
   318ac:	b	318c4 <flatcc_json_printer_clear@@Base+0x1038>
   318b0:	add	r2, r2, #20
   318b4:	rsble	ip, r2, #32
   318b8:	lsl	r1, r1, r2
   318bc:	orrle	r1, r1, r0, lsr ip
   318c0:	lslle	r0, r0, r2
   318c4:	subs	r4, r4, r3
   318c8:	addge	r1, r1, r4, lsl #20
   318cc:	orrge	r1, r1, r5
   318d0:	popge	{r4, r5, pc}
   318d4:	mvn	r4, r4
   318d8:	subs	r4, r4, #31
   318dc:	bge	31918 <flatcc_json_printer_clear@@Base+0x108c>
   318e0:	adds	r4, r4, #12
   318e4:	bgt	31900 <flatcc_json_printer_clear@@Base+0x1074>
   318e8:	add	r4, r4, #20
   318ec:	rsb	r2, r4, #32
   318f0:	lsr	r0, r0, r4
   318f4:	orr	r0, r0, r1, lsl r2
   318f8:	orr	r1, r5, r1, lsr r4
   318fc:	pop	{r4, r5, pc}
   31900:	rsb	r4, r4, #12
   31904:	rsb	r2, r4, #32
   31908:	lsr	r0, r0, r2
   3190c:	orr	r0, r0, r1, lsl r4
   31910:	mov	r1, r5
   31914:	pop	{r4, r5, pc}
   31918:	lsr	r0, r1, r4
   3191c:	mov	r1, r5
   31920:	pop	{r4, r5, pc}
   31924:	teq	r4, #0
   31928:	eor	r3, r3, #1048576	; 0x100000
   3192c:	eoreq	r1, r1, #1048576	; 0x100000
   31930:	addeq	r4, r4, #1
   31934:	subne	r5, r5, #1
   31938:	b	317c4 <flatcc_json_printer_clear@@Base+0xf38>
   3193c:	mvns	ip, r4, asr #21
   31940:	mvnsne	ip, r5, asr #21
   31944:	beq	319ac <flatcc_json_printer_clear@@Base+0x1120>
   31948:	teq	r4, r5
   3194c:	teqeq	r0, r2
   31950:	beq	31964 <flatcc_json_printer_clear@@Base+0x10d8>
   31954:	orrs	ip, r4, r0
   31958:	moveq	r1, r3
   3195c:	moveq	r0, r2
   31960:	pop	{r4, r5, pc}
   31964:	teq	r1, r3
   31968:	movne	r1, #0
   3196c:	movne	r0, #0
   31970:	popne	{r4, r5, pc}
   31974:	lsrs	ip, r4, #21
   31978:	bne	3198c <flatcc_json_printer_clear@@Base+0x1100>
   3197c:	lsls	r0, r0, #1
   31980:	adcs	r1, r1, r1
   31984:	orrcs	r1, r1, #-2147483648	; 0x80000000
   31988:	pop	{r4, r5, pc}
   3198c:	adds	r4, r4, #4194304	; 0x400000
   31990:	addcc	r1, r1, #1048576	; 0x100000
   31994:	popcc	{r4, r5, pc}
   31998:	and	r5, r1, #-2147483648	; 0x80000000
   3199c:	orr	r1, r5, #2130706432	; 0x7f000000
   319a0:	orr	r1, r1, #15728640	; 0xf00000
   319a4:	mov	r0, #0
   319a8:	pop	{r4, r5, pc}
   319ac:	mvns	ip, r4, asr #21
   319b0:	movne	r1, r3
   319b4:	movne	r0, r2
   319b8:	mvnseq	ip, r5, asr #21
   319bc:	movne	r3, r1
   319c0:	movne	r2, r0
   319c4:	orrs	r4, r0, r1, lsl #12
   319c8:	orrseq	r5, r2, r3, lsl #12
   319cc:	teqeq	r1, r3
   319d0:	orrne	r1, r1, #524288	; 0x80000
   319d4:	pop	{r4, r5, pc}
   319d8:	teq	r0, #0
   319dc:	moveq	r1, #0
   319e0:	bxeq	lr
   319e4:	push	{r4, r5, lr}
   319e8:	mov	r4, #1024	; 0x400
   319ec:	add	r4, r4, #50	; 0x32
   319f0:	mov	r5, #0
   319f4:	mov	r1, #0
   319f8:	b	31874 <flatcc_json_printer_clear@@Base+0xfe8>
   319fc:	teq	r0, #0
   31a00:	moveq	r1, #0
   31a04:	bxeq	lr
   31a08:	push	{r4, r5, lr}
   31a0c:	mov	r4, #1024	; 0x400
   31a10:	add	r4, r4, #50	; 0x32
   31a14:	ands	r5, r0, #-2147483648	; 0x80000000
   31a18:	rsbmi	r0, r0, #0
   31a1c:	mov	r1, #0
   31a20:	b	31874 <flatcc_json_printer_clear@@Base+0xfe8>
   31a24:	lsls	r2, r0, #1
   31a28:	asr	r1, r2, #3
   31a2c:	rrx	r1, r1
   31a30:	lsl	r0, r2, #28
   31a34:	andsne	r3, r2, #-16777216	; 0xff000000
   31a38:	teqne	r3, #-16777216	; 0xff000000
   31a3c:	eorne	r1, r1, #939524096	; 0x38000000
   31a40:	bxne	lr
   31a44:	bics	r2, r2, #-16777216	; 0xff000000
   31a48:	bxeq	lr
   31a4c:	teq	r3, #-16777216	; 0xff000000
   31a50:	orreq	r1, r1, #524288	; 0x80000
   31a54:	bxeq	lr
   31a58:	push	{r4, r5, lr}
   31a5c:	mov	r4, #896	; 0x380
   31a60:	and	r5, r1, #-2147483648	; 0x80000000
   31a64:	bic	r1, r1, #-2147483648	; 0x80000000
   31a68:	b	31874 <flatcc_json_printer_clear@@Base+0xfe8>
   31a6c:	orrs	r2, r0, r1
   31a70:	bxeq	lr
   31a74:	push	{r4, r5, lr}
   31a78:	mov	r5, #0
   31a7c:	b	31a9c <flatcc_json_printer_clear@@Base+0x1210>
   31a80:	orrs	r2, r0, r1
   31a84:	bxeq	lr
   31a88:	push	{r4, r5, lr}
   31a8c:	ands	r5, r1, #-2147483648	; 0x80000000
   31a90:	bpl	31a9c <flatcc_json_printer_clear@@Base+0x1210>
   31a94:	rsbs	r0, r0, #0
   31a98:	rsc	r1, r1, #0
   31a9c:	mov	r4, #1024	; 0x400
   31aa0:	add	r4, r4, #50	; 0x32
   31aa4:	lsrs	ip, r1, #22
   31aa8:	beq	31818 <flatcc_json_printer_clear@@Base+0xf8c>
   31aac:	mov	r2, #3
   31ab0:	lsrs	ip, ip, #3
   31ab4:	addne	r2, r2, #3
   31ab8:	lsrs	ip, ip, #3
   31abc:	addne	r2, r2, #3
   31ac0:	add	r2, r2, ip, lsr #3
   31ac4:	rsb	r3, r2, #32
   31ac8:	lsl	ip, r0, r3
   31acc:	lsr	r0, r0, r2
   31ad0:	orr	r0, r0, r1, lsl r3
   31ad4:	lsr	r1, r1, r2
   31ad8:	add	r4, r4, r2
   31adc:	b	31818 <flatcc_json_printer_clear@@Base+0xf8c>
   31ae0:	eor	r0, r0, #-2147483648	; 0x80000000
   31ae4:	b	31aec <flatcc_json_printer_clear@@Base+0x1260>
   31ae8:	eor	r1, r1, #-2147483648	; 0x80000000
   31aec:	lsls	r2, r0, #1
   31af0:	lslsne	r3, r1, #1
   31af4:	teqne	r2, r3
   31af8:	mvnsne	ip, r2, asr #24
   31afc:	mvnsne	ip, r3, asr #24
   31b00:	beq	31bf8 <flatcc_json_printer_clear@@Base+0x136c>
   31b04:	lsr	r2, r2, #24
   31b08:	rsbs	r3, r2, r3, lsr #24
   31b0c:	addgt	r2, r2, r3
   31b10:	eorgt	r1, r0, r1
   31b14:	eorgt	r0, r1, r0
   31b18:	eorgt	r1, r0, r1
   31b1c:	rsblt	r3, r3, #0
   31b20:	cmp	r3, #25
   31b24:	bxhi	lr
   31b28:	tst	r0, #-2147483648	; 0x80000000
   31b2c:	orr	r0, r0, #8388608	; 0x800000
   31b30:	bic	r0, r0, #-16777216	; 0xff000000
   31b34:	rsbne	r0, r0, #0
   31b38:	tst	r1, #-2147483648	; 0x80000000
   31b3c:	orr	r1, r1, #8388608	; 0x800000
   31b40:	bic	r1, r1, #-16777216	; 0xff000000
   31b44:	rsbne	r1, r1, #0
   31b48:	teq	r2, r3
   31b4c:	beq	31be0 <flatcc_json_printer_clear@@Base+0x1354>
   31b50:	sub	r2, r2, #1
   31b54:	adds	r0, r0, r1, asr r3
   31b58:	rsb	r3, r3, #32
   31b5c:	lsl	r1, r1, r3
   31b60:	and	r3, r0, #-2147483648	; 0x80000000
   31b64:	bpl	31b70 <flatcc_json_printer_clear@@Base+0x12e4>
   31b68:	rsbs	r1, r1, #0
   31b6c:	rsc	r0, r0, #0
   31b70:	cmp	r0, #8388608	; 0x800000
   31b74:	bcc	31ba8 <flatcc_json_printer_clear@@Base+0x131c>
   31b78:	cmp	r0, #16777216	; 0x1000000
   31b7c:	bcc	31b94 <flatcc_json_printer_clear@@Base+0x1308>
   31b80:	lsrs	r0, r0, #1
   31b84:	rrx	r1, r1
   31b88:	add	r2, r2, #1
   31b8c:	cmp	r2, #254	; 0xfe
   31b90:	bcs	31c4c <flatcc_json_printer_clear@@Base+0x13c0>
   31b94:	cmp	r1, #-2147483648	; 0x80000000
   31b98:	adc	r0, r0, r2, lsl #23
   31b9c:	biceq	r0, r0, #1
   31ba0:	orr	r0, r0, r3
   31ba4:	bx	lr
   31ba8:	lsls	r1, r1, #1
   31bac:	adc	r0, r0, r0
   31bb0:	tst	r0, #8388608	; 0x800000
   31bb4:	sub	r2, r2, #1
   31bb8:	bne	31b94 <flatcc_json_printer_clear@@Base+0x1308>
   31bbc:	clz	ip, r0
   31bc0:	sub	ip, ip, #8
   31bc4:	subs	r2, r2, ip
   31bc8:	lsl	r0, r0, ip
   31bcc:	addge	r0, r0, r2, lsl #23
   31bd0:	rsblt	r2, r2, #0
   31bd4:	orrge	r0, r0, r3
   31bd8:	orrlt	r0, r3, r0, lsr r2
   31bdc:	bx	lr
   31be0:	teq	r2, #0
   31be4:	eor	r1, r1, #8388608	; 0x800000
   31be8:	eoreq	r0, r0, #8388608	; 0x800000
   31bec:	addeq	r2, r2, #1
   31bf0:	subne	r3, r3, #1
   31bf4:	b	31b50 <flatcc_json_printer_clear@@Base+0x12c4>
   31bf8:	lsl	r3, r1, #1
   31bfc:	mvns	ip, r2, asr #24
   31c00:	mvnsne	ip, r3, asr #24
   31c04:	beq	31c58 <flatcc_json_printer_clear@@Base+0x13cc>
   31c08:	teq	r2, r3
   31c0c:	beq	31c1c <flatcc_json_printer_clear@@Base+0x1390>
   31c10:	teq	r2, #0
   31c14:	moveq	r0, r1
   31c18:	bx	lr
   31c1c:	teq	r0, r1
   31c20:	movne	r0, #0
   31c24:	bxne	lr
   31c28:	tst	r2, #-16777216	; 0xff000000
   31c2c:	bne	31c3c <flatcc_json_printer_clear@@Base+0x13b0>
   31c30:	lsls	r0, r0, #1
   31c34:	orrcs	r0, r0, #-2147483648	; 0x80000000
   31c38:	bx	lr
   31c3c:	adds	r2, r2, #33554432	; 0x2000000
   31c40:	addcc	r0, r0, #8388608	; 0x800000
   31c44:	bxcc	lr
   31c48:	and	r3, r0, #-2147483648	; 0x80000000
   31c4c:	orr	r0, r3, #2130706432	; 0x7f000000
   31c50:	orr	r0, r0, #8388608	; 0x800000
   31c54:	bx	lr
   31c58:	mvns	r2, r2, asr #24
   31c5c:	movne	r0, r1
   31c60:	mvnseq	r3, r3, asr #24
   31c64:	movne	r1, r0
   31c68:	lsls	r2, r0, #9
   31c6c:	lslseq	r3, r1, #9
   31c70:	teqeq	r0, r1
   31c74:	orrne	r0, r0, #4194304	; 0x400000
   31c78:	bx	lr
   31c7c:	mov	r3, #0
   31c80:	b	31c8c <flatcc_json_printer_clear@@Base+0x1400>
   31c84:	ands	r3, r0, #-2147483648	; 0x80000000
   31c88:	rsbmi	r0, r0, #0
   31c8c:	movs	ip, r0
   31c90:	bxeq	lr
   31c94:	orr	r3, r3, #1258291200	; 0x4b000000
   31c98:	mov	r1, r0
   31c9c:	mov	r0, #0
   31ca0:	b	31ce4 <flatcc_json_printer_clear@@Base+0x1458>
   31ca4:	orrs	r2, r0, r1
   31ca8:	bxeq	lr
   31cac:	mov	r3, #0
   31cb0:	b	31ccc <flatcc_json_printer_clear@@Base+0x1440>
   31cb4:	orrs	r2, r0, r1
   31cb8:	bxeq	lr
   31cbc:	ands	r3, r1, #-2147483648	; 0x80000000
   31cc0:	bpl	31ccc <flatcc_json_printer_clear@@Base+0x1440>
   31cc4:	rsbs	r0, r0, #0
   31cc8:	rsc	r1, r1, #0
   31ccc:	movs	ip, r1
   31cd0:	moveq	ip, r0
   31cd4:	moveq	r1, r0
   31cd8:	moveq	r0, #0
   31cdc:	orr	r3, r3, #1526726656	; 0x5b000000
   31ce0:	subeq	r3, r3, #268435456	; 0x10000000
   31ce4:	sub	r3, r3, #8388608	; 0x800000
   31ce8:	clz	r2, ip
   31cec:	subs	r2, r2, #8
   31cf0:	sub	r3, r3, r2, lsl #23
   31cf4:	blt	31d14 <flatcc_json_printer_clear@@Base+0x1488>
   31cf8:	add	r3, r3, r1, lsl r2
   31cfc:	lsl	ip, r0, r2
   31d00:	rsb	r2, r2, #32
   31d04:	cmp	ip, #-2147483648	; 0x80000000
   31d08:	adc	r0, r3, r0, lsr r2
   31d0c:	biceq	r0, r0, #1
   31d10:	bx	lr
   31d14:	add	r2, r2, #32
   31d18:	lsl	ip, r1, r2
   31d1c:	rsb	r2, r2, #32
   31d20:	orrs	r0, r0, ip, lsl #1
   31d24:	adc	r0, r3, r1, lsr r2
   31d28:	biceq	r0, r0, ip, lsr #31
   31d2c:	bx	lr
   31d30:	cmp	r3, #0
   31d34:	cmpeq	r2, #0
   31d38:	bne	31d50 <flatcc_json_printer_clear@@Base+0x14c4>
   31d3c:	cmp	r1, #0
   31d40:	cmpeq	r0, #0
   31d44:	mvnne	r1, #0
   31d48:	mvnne	r0, #0
   31d4c:	b	31d6c <flatcc_json_printer_clear@@Base+0x14e0>
   31d50:	sub	sp, sp, #8
   31d54:	push	{sp, lr}
   31d58:	bl	31d7c <flatcc_json_printer_clear@@Base+0x14f0>
   31d5c:	ldr	lr, [sp, #4]
   31d60:	add	sp, sp, #8
   31d64:	pop	{r2, r3}
   31d68:	bx	lr
   31d6c:	push	{r1, lr}
   31d70:	mov	r0, #8
   31d74:	bl	14e2c <raise@plt>
   31d78:	pop	{r1, pc}
   31d7c:	cmp	r1, r3
   31d80:	cmpeq	r0, r2
   31d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d88:	mov	r4, r0
   31d8c:	movcc	r0, #0
   31d90:	mov	r5, r1
   31d94:	ldr	lr, [sp, #36]	; 0x24
   31d98:	movcc	r1, r0
   31d9c:	bcc	31e98 <flatcc_json_printer_clear@@Base+0x160c>
   31da0:	cmp	r3, #0
   31da4:	clzeq	ip, r2
   31da8:	clzne	ip, r3
   31dac:	addeq	ip, ip, #32
   31db0:	cmp	r5, #0
   31db4:	clzeq	r1, r4
   31db8:	addeq	r1, r1, #32
   31dbc:	clzne	r1, r5
   31dc0:	sub	ip, ip, r1
   31dc4:	sub	sl, ip, #32
   31dc8:	lsl	r9, r3, ip
   31dcc:	rsb	fp, ip, #32
   31dd0:	orr	r9, r9, r2, lsl sl
   31dd4:	orr	r9, r9, r2, lsr fp
   31dd8:	lsl	r8, r2, ip
   31ddc:	cmp	r5, r9
   31de0:	cmpeq	r4, r8
   31de4:	movcc	r0, #0
   31de8:	movcc	r1, r0
   31dec:	bcc	31e08 <flatcc_json_printer_clear@@Base+0x157c>
   31df0:	mov	r0, #1
   31df4:	subs	r4, r4, r8
   31df8:	lsl	r1, r0, sl
   31dfc:	orr	r1, r1, r0, lsr fp
   31e00:	lsl	r0, r0, ip
   31e04:	sbc	r5, r5, r9
   31e08:	cmp	ip, #0
   31e0c:	beq	31e98 <flatcc_json_printer_clear@@Base+0x160c>
   31e10:	lsr	r6, r8, #1
   31e14:	orr	r6, r6, r9, lsl #31
   31e18:	lsr	r7, r9, #1
   31e1c:	mov	r2, ip
   31e20:	b	31e44 <flatcc_json_printer_clear@@Base+0x15b8>
   31e24:	subs	r3, r4, r6
   31e28:	sbc	r8, r5, r7
   31e2c:	adds	r3, r3, r3
   31e30:	adc	r8, r8, r8
   31e34:	adds	r4, r3, #1
   31e38:	adc	r5, r8, #0
   31e3c:	subs	r2, r2, #1
   31e40:	beq	31e60 <flatcc_json_printer_clear@@Base+0x15d4>
   31e44:	cmp	r5, r7
   31e48:	cmpeq	r4, r6
   31e4c:	bcs	31e24 <flatcc_json_printer_clear@@Base+0x1598>
   31e50:	adds	r4, r4, r4
   31e54:	adc	r5, r5, r5
   31e58:	subs	r2, r2, #1
   31e5c:	bne	31e44 <flatcc_json_printer_clear@@Base+0x15b8>
   31e60:	lsr	r3, r4, ip
   31e64:	orr	r3, r3, r5, lsl fp
   31e68:	lsr	r2, r5, ip
   31e6c:	orr	r3, r3, r5, lsr sl
   31e70:	adds	r0, r0, r4
   31e74:	mov	r4, r3
   31e78:	lsl	r3, r2, ip
   31e7c:	orr	r3, r3, r4, lsl sl
   31e80:	lsl	ip, r4, ip
   31e84:	orr	r3, r3, r4, lsr fp
   31e88:	adc	r1, r1, r5
   31e8c:	subs	r0, r0, ip
   31e90:	mov	r5, r2
   31e94:	sbc	r1, r1, r3
   31e98:	cmp	lr, #0
   31e9c:	strdne	r4, [lr]
   31ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00031ea4 <__libc_csu_init@@Base>:
   31ea4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31ea8:	mov	r7, r0
   31eac:	ldr	r6, [pc, #72]	; 31efc <__libc_csu_init@@Base+0x58>
   31eb0:	ldr	r5, [pc, #72]	; 31f00 <__libc_csu_init@@Base+0x5c>
   31eb4:	add	r6, pc, r6
   31eb8:	add	r5, pc, r5
   31ebc:	sub	r6, r6, r5
   31ec0:	mov	r8, r1
   31ec4:	mov	r9, r2
   31ec8:	bl	14e0c <raise@plt-0x20>
   31ecc:	asrs	r6, r6, #2
   31ed0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   31ed4:	mov	r4, #0
   31ed8:	add	r4, r4, #1
   31edc:	ldr	r3, [r5], #4
   31ee0:	mov	r2, r9
   31ee4:	mov	r1, r8
   31ee8:	mov	r0, r7
   31eec:	blx	r3
   31ef0:	cmp	r6, r4
   31ef4:	bne	31ed8 <__libc_csu_init@@Base+0x34>
   31ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31efc:	andeq	r8, r1, r0, asr r0
   31f00:	andeq	r8, r1, r8, asr #32

00031f04 <__libc_csu_fini@@Base>:
   31f04:	bx	lr

Disassembly of section .fini:

00031f08 <.fini>:
   31f08:	push	{r3, lr}
   31f0c:	pop	{r3, pc}
