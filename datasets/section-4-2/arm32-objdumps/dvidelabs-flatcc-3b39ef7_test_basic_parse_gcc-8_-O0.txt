
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000123dc <.init>:
   123dc:	push	{r3, lr}
   123e0:	bl	124fc <_start@@Base+0x3c>
   123e4:	pop	{r3, pc}

Disassembly of section .plt:

000123e8 <free@plt-0x14>:
   123e8:	push	{lr}		; (str lr, [sp, #-4]!)
   123ec:	ldr	lr, [pc, #4]	; 123f8 <free@plt-0x4>
   123f0:	add	lr, pc, lr
   123f4:	ldr	pc, [lr, #8]!
   123f8:	andeq	r6, r2, r8, lsl #24

000123fc <free@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #155648	; 0x26000
   12404:	ldr	pc, [ip, #3080]!	; 0xc08

00012408 <memcpy@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #155648	; 0x26000
   12410:	ldr	pc, [ip, #3072]!	; 0xc00

00012414 <memcmp@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #155648	; 0x26000
   1241c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012420 <realloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #155648	; 0x26000
   12428:	ldr	pc, [ip, #3056]!	; 0xbf0

0001242c <fwrite@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #155648	; 0x26000
   12434:	ldr	pc, [ip, #3048]!	; 0xbe8

00012438 <malloc@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #155648	; 0x26000
   12440:	ldr	pc, [ip, #3040]!	; 0xbe0

00012444 <__libc_start_main@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #155648	; 0x26000
   1244c:	ldr	pc, [ip, #3032]!	; 0xbd8

00012450 <__gmon_start__@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #155648	; 0x26000
   12458:	ldr	pc, [ip, #3024]!	; 0xbd0

0001245c <strlen@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #155648	; 0x26000
   12464:	ldr	pc, [ip, #3016]!	; 0xbc8

00012468 <fprintf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #155648	; 0x26000
   12470:	ldr	pc, [ip, #3008]!	; 0xbc0

00012474 <posix_memalign@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #155648	; 0x26000
   1247c:	ldr	pc, [ip, #3000]!	; 0xbb8

00012480 <memset@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #155648	; 0x26000
   12488:	ldr	pc, [ip, #2992]!	; 0xbb0

0001248c <strtod@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #155648	; 0x26000
   12494:	ldr	pc, [ip, #2984]!	; 0xba8

00012498 <memchr@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #155648	; 0x26000
   124a0:	ldr	pc, [ip, #2976]!	; 0xba0

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #155648	; 0x26000
   124ac:	ldr	pc, [ip, #2968]!	; 0xb98

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #155648	; 0x26000
   124b8:	ldr	pc, [ip, #2960]!	; 0xb90

Disassembly of section .text:

000124c0 <_start@@Base>:
   124c0:	mov	fp, #0
   124c4:	mov	lr, #0
   124c8:	pop	{r1}		; (ldr r1, [sp], #4)
   124cc:	mov	r2, sp
   124d0:	push	{r2}		; (str r2, [sp, #-4]!)
   124d4:	push	{r0}		; (str r0, [sp, #-4]!)
   124d8:	ldr	ip, [pc, #16]	; 124f0 <_start@@Base+0x30>
   124dc:	push	{ip}		; (str ip, [sp, #-4]!)
   124e0:	ldr	r0, [pc, #12]	; 124f4 <_start@@Base+0x34>
   124e4:	ldr	r3, [pc, #12]	; 124f8 <_start@@Base+0x38>
   124e8:	bl	12444 <__libc_start_main@plt>
   124ec:	bl	124a4 <abort@plt>
   124f0:	andeq	r6, r2, r8, lsl sl
   124f4:	muleq	r1, r4, r5
   124f8:			; <UNDEFINED> instruction: 0x000269b8
   124fc:	ldr	r3, [pc, #20]	; 12518 <_start@@Base+0x58>
   12500:	ldr	r2, [pc, #20]	; 1251c <_start@@Base+0x5c>
   12504:	add	r3, pc, r3
   12508:	ldr	r2, [r3, r2]
   1250c:	cmp	r2, #0
   12510:	bxeq	lr
   12514:	b	12450 <__gmon_start__@plt>
   12518:	strdeq	r6, [r2], -r4
   1251c:	andeq	r0, r0, r8, asr r0
   12520:	ldr	r0, [pc, #24]	; 12540 <_start@@Base+0x80>
   12524:	ldr	r3, [pc, #24]	; 12544 <_start@@Base+0x84>
   12528:	cmp	r3, r0
   1252c:	bxeq	lr
   12530:	ldr	r3, [pc, #16]	; 12548 <_start@@Base+0x88>
   12534:	cmp	r3, #0
   12538:	bxeq	lr
   1253c:	bx	r3
   12540:	andeq	r9, r3, r0, ror #1
   12544:	andeq	r9, r3, r0, ror #1
   12548:	andeq	r0, r0, r0
   1254c:	ldr	r0, [pc, #36]	; 12578 <_start@@Base+0xb8>
   12550:	ldr	r1, [pc, #36]	; 1257c <_start@@Base+0xbc>
   12554:	sub	r1, r1, r0
   12558:	asr	r1, r1, #2
   1255c:	add	r1, r1, r1, lsr #31
   12560:	asrs	r1, r1, #1
   12564:	bxeq	lr
   12568:	ldr	r3, [pc, #16]	; 12580 <_start@@Base+0xc0>
   1256c:	cmp	r3, #0
   12570:	bxeq	lr
   12574:	bx	r3
   12578:	andeq	r9, r3, r0, ror #1
   1257c:	andeq	r9, r3, r0, ror #1
   12580:	andeq	r0, r0, r0
   12584:	push	{r4, lr}
   12588:	ldr	r4, [pc, #24]	; 125a8 <_start@@Base+0xe8>
   1258c:	ldrb	r3, [r4]
   12590:	cmp	r3, #0
   12594:	popne	{r4, pc}
   12598:	bl	12520 <_start@@Base+0x60>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [r4]
   125a4:	pop	{r4, pc}
   125a8:	andeq	r9, r3, r0, ror #1
   125ac:	b	1254c <_start@@Base+0x8c>
   125b0:	str	fp, [sp, #-8]!
   125b4:	str	lr, [sp, #4]
   125b8:	add	fp, sp, #4
   125bc:	sub	sp, sp, #16
   125c0:	str	r0, [fp, #-8]
   125c4:	str	r1, [fp, #-12]
   125c8:	str	r2, [fp, #-16]
   125cc:	ldr	r2, [fp, #-16]
   125d0:	ldr	r3, [fp, #-12]
   125d4:	sub	r3, r2, r3
   125d8:	cmp	r3, #1
   125dc:	ble	12628 <_start@@Base+0x168>
   125e0:	ldr	r3, [fp, #-12]
   125e4:	ldrb	r3, [r3]
   125e8:	cmp	r3, #32
   125ec:	bls	125f8 <_start@@Base+0x138>
   125f0:	ldr	r3, [fp, #-12]
   125f4:	b	1263c <_start@@Base+0x17c>
   125f8:	ldr	r3, [fp, #-12]
   125fc:	ldrb	r3, [r3]
   12600:	cmp	r3, #32
   12604:	bne	12628 <_start@@Base+0x168>
   12608:	ldr	r3, [fp, #-12]
   1260c:	add	r3, r3, #1
   12610:	ldrb	r3, [r3]
   12614:	cmp	r3, #32
   12618:	bls	12628 <_start@@Base+0x168>
   1261c:	ldr	r3, [fp, #-12]
   12620:	add	r3, r3, #1
   12624:	b	1263c <_start@@Base+0x17c>
   12628:	ldr	r2, [fp, #-16]
   1262c:	ldr	r1, [fp, #-12]
   12630:	ldr	r0, [fp, #-8]
   12634:	bl	23110 <flatcc_json_parser_space_ext@@Base>
   12638:	mov	r3, r0
   1263c:	mov	r0, r3
   12640:	sub	sp, fp, #4
   12644:	ldr	fp, [sp]
   12648:	add	sp, sp, #4
   1264c:	pop	{pc}		; (ldr pc, [sp], #4)
   12650:	str	fp, [sp, #-8]!
   12654:	str	lr, [sp, #4]
   12658:	add	fp, sp, #4
   1265c:	sub	sp, sp, #16
   12660:	str	r0, [fp, #-8]
   12664:	str	r1, [fp, #-12]
   12668:	str	r2, [fp, #-16]
   1266c:	ldr	r2, [fp, #-12]
   12670:	ldr	r3, [fp, #-16]
   12674:	cmp	r2, r3
   12678:	beq	1268c <_start@@Base+0x1cc>
   1267c:	ldr	r3, [fp, #-12]
   12680:	ldrb	r3, [r3]
   12684:	cmp	r3, #34	; 0x22
   12688:	beq	126a8 <_start@@Base+0x1e8>
   1268c:	mov	r3, #16
   12690:	ldr	r2, [fp, #-16]
   12694:	ldr	r1, [fp, #-12]
   12698:	ldr	r0, [fp, #-8]
   1269c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   126a0:	mov	r3, r0
   126a4:	b	126b8 <_start@@Base+0x1f8>
   126a8:	ldr	r3, [fp, #-12]
   126ac:	add	r3, r3, #1
   126b0:	str	r3, [fp, #-12]
   126b4:	ldr	r3, [fp, #-12]
   126b8:	mov	r0, r3
   126bc:	sub	sp, fp, #4
   126c0:	ldr	fp, [sp]
   126c4:	add	sp, sp, #4
   126c8:	pop	{pc}		; (ldr pc, [sp], #4)
   126cc:	str	fp, [sp, #-8]!
   126d0:	str	lr, [sp, #4]
   126d4:	add	fp, sp, #4
   126d8:	sub	sp, sp, #16
   126dc:	str	r0, [fp, #-8]
   126e0:	str	r1, [fp, #-12]
   126e4:	str	r2, [fp, #-16]
   126e8:	ldr	r2, [fp, #-12]
   126ec:	ldr	r3, [fp, #-16]
   126f0:	cmp	r2, r3
   126f4:	beq	12708 <_start@@Base+0x248>
   126f8:	ldr	r3, [fp, #-12]
   126fc:	ldrb	r3, [r3]
   12700:	cmp	r3, #34	; 0x22
   12704:	beq	12724 <_start@@Base+0x264>
   12708:	mov	r3, #20
   1270c:	ldr	r2, [fp, #-16]
   12710:	ldr	r1, [fp, #-12]
   12714:	ldr	r0, [fp, #-8]
   12718:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1271c:	mov	r3, r0
   12720:	b	12734 <_start@@Base+0x274>
   12724:	ldr	r3, [fp, #-12]
   12728:	add	r3, r3, #1
   1272c:	str	r3, [fp, #-12]
   12730:	ldr	r3, [fp, #-12]
   12734:	mov	r0, r3
   12738:	sub	sp, fp, #4
   1273c:	ldr	fp, [sp]
   12740:	add	sp, sp, #4
   12744:	pop	{pc}		; (ldr pc, [sp], #4)
   12748:	str	fp, [sp, #-8]!
   1274c:	str	lr, [sp, #4]
   12750:	add	fp, sp, #4
   12754:	sub	sp, sp, #16
   12758:	str	r0, [fp, #-8]
   1275c:	str	r1, [fp, #-12]
   12760:	str	r2, [fp, #-16]
   12764:	ldr	r2, [fp, #-12]
   12768:	ldr	r3, [fp, #-16]
   1276c:	cmp	r2, r3
   12770:	bne	1277c <_start@@Base+0x2bc>
   12774:	ldr	r3, [fp, #-12]
   12778:	b	127e4 <_start@@Base+0x324>
   1277c:	ldr	r3, [fp, #-12]
   12780:	ldrb	r3, [r3]
   12784:	cmp	r3, #34	; 0x22
   12788:	bne	127a8 <_start@@Base+0x2e8>
   1278c:	ldr	r3, [fp, #-12]
   12790:	add	r3, r3, #1
   12794:	str	r3, [fp, #-12]
   12798:	ldr	r3, [fp, #-8]
   1279c:	mov	r2, #0
   127a0:	str	r2, [r3, #12]
   127a4:	b	127e0 <_start@@Base+0x320>
   127a8:	ldr	r3, [fp, #-12]
   127ac:	ldrb	r3, [r3]
   127b0:	cmp	r3, #46	; 0x2e
   127b4:	bne	127d4 <_start@@Base+0x314>
   127b8:	mov	r3, #5
   127bc:	ldr	r2, [fp, #-16]
   127c0:	ldr	r1, [fp, #-12]
   127c4:	ldr	r0, [fp, #-8]
   127c8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   127cc:	mov	r3, r0
   127d0:	b	127e4 <_start@@Base+0x324>
   127d4:	ldr	r3, [fp, #-8]
   127d8:	mov	r2, #1
   127dc:	str	r2, [r3, #12]
   127e0:	ldr	r3, [fp, #-12]
   127e4:	mov	r0, r3
   127e8:	sub	sp, fp, #4
   127ec:	ldr	fp, [sp]
   127f0:	add	sp, sp, #4
   127f4:	pop	{pc}		; (ldr pc, [sp], #4)
   127f8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   127fc:	strd	r6, [sp, #8]
   12800:	strd	r8, [sp, #16]
   12804:	str	fp, [sp, #24]
   12808:	add	fp, sp, #24
   1280c:	sub	sp, sp, #76	; 0x4c
   12810:	str	r0, [fp, #-48]	; 0xffffffd0
   12814:	str	r1, [fp, #-52]	; 0xffffffcc
   12818:	mov	r2, #0
   1281c:	mov	r3, #0
   12820:	strd	r2, [fp, #-36]	; 0xffffffdc
   12824:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12828:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1282c:	sub	r3, r2, r3
   12830:	str	r3, [fp, #-40]	; 0xffffffd8
   12834:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12838:	cmp	r3, #8
   1283c:	bls	12848 <_start@@Base+0x388>
   12840:	mov	r3, #8
   12844:	str	r3, [fp, #-40]	; 0xffffffd8
   12848:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1284c:	cmp	r3, #8
   12850:	addls	pc, pc, r3, lsl #2
   12854:	b	12a54 <_start@@Base+0x594>
   12858:	b	12a54 <_start@@Base+0x594>
   1285c:	b	12a14 <_start@@Base+0x554>
   12860:	b	129d4 <_start@@Base+0x514>
   12864:	b	12994 <_start@@Base+0x4d4>
   12868:	b	12954 <_start@@Base+0x494>
   1286c:	b	1291c <_start@@Base+0x45c>
   12870:	b	128d8 <_start@@Base+0x418>
   12874:	b	128a0 <_start@@Base+0x3e0>
   12878:	b	1287c <_start@@Base+0x3bc>
   1287c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12880:	add	r3, r3, #7
   12884:	ldrb	r3, [r3]
   12888:	uxtb	r0, r3
   1288c:	mov	r1, #0
   12890:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12894:	orr	r6, r2, r0
   12898:	orr	r7, r3, r1
   1289c:	strd	r6, [fp, #-36]	; 0xffffffdc
   128a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   128a4:	add	r3, r3, #6
   128a8:	ldrb	r3, [r3]
   128ac:	uxtb	r2, r3
   128b0:	mov	r3, #0
   128b4:	mov	r0, #0
   128b8:	mov	r1, #0
   128bc:	lsl	r1, r3, #8
   128c0:	orr	r1, r1, r2, lsr #24
   128c4:	lsl	r0, r2, #8
   128c8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   128cc:	orr	r8, r2, r0
   128d0:	orr	r9, r3, r1
   128d4:	strd	r8, [fp, #-36]	; 0xffffffdc
   128d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   128dc:	add	r3, r3, #5
   128e0:	ldrb	r3, [r3]
   128e4:	uxtb	r2, r3
   128e8:	mov	r3, #0
   128ec:	mov	r0, #0
   128f0:	mov	r1, #0
   128f4:	lsl	r1, r3, #16
   128f8:	orr	r1, r1, r2, lsr #16
   128fc:	lsl	r0, r2, #16
   12900:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12904:	orr	ip, r2, r0
   12908:	str	ip, [fp, #-60]	; 0xffffffc4
   1290c:	orr	r3, r3, r1
   12910:	str	r3, [fp, #-56]	; 0xffffffc8
   12914:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12918:	strd	r2, [fp, #-36]	; 0xffffffdc
   1291c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12920:	add	r3, r3, #4
   12924:	ldrb	r3, [r3]
   12928:	uxtb	r2, r3
   1292c:	mov	r3, #0
   12930:	lsr	r5, r2, #8
   12934:	lsl	r4, r2, #24
   12938:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1293c:	orr	r1, r2, r4
   12940:	str	r1, [fp, #-68]	; 0xffffffbc
   12944:	orr	r3, r3, r5
   12948:	str	r3, [fp, #-64]	; 0xffffffc0
   1294c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   12950:	strd	r2, [fp, #-36]	; 0xffffffdc
   12954:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12958:	add	r3, r3, #3
   1295c:	ldrb	r3, [r3]
   12960:	uxtb	r0, r3
   12964:	mov	r1, #0
   12968:	mov	r2, #0
   1296c:	mov	r3, #0
   12970:	mov	r3, r0
   12974:	mov	r2, #0
   12978:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1297c:	orr	ip, r0, r2
   12980:	str	ip, [fp, #-76]	; 0xffffffb4
   12984:	orr	r3, r1, r3
   12988:	str	r3, [fp, #-72]	; 0xffffffb8
   1298c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   12990:	strd	r2, [fp, #-36]	; 0xffffffdc
   12994:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12998:	add	r3, r3, #2
   1299c:	ldrb	r3, [r3]
   129a0:	uxtb	r0, r3
   129a4:	mov	r1, #0
   129a8:	mov	r2, #0
   129ac:	mov	r3, #0
   129b0:	lsl	r3, r0, #8
   129b4:	mov	r2, #0
   129b8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   129bc:	orr	ip, r0, r2
   129c0:	str	ip, [fp, #-84]	; 0xffffffac
   129c4:	orr	r3, r1, r3
   129c8:	str	r3, [fp, #-80]	; 0xffffffb0
   129cc:	ldrd	r2, [fp, #-84]	; 0xffffffac
   129d0:	strd	r2, [fp, #-36]	; 0xffffffdc
   129d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   129d8:	add	r3, r3, #1
   129dc:	ldrb	r3, [r3]
   129e0:	uxtb	r0, r3
   129e4:	mov	r1, #0
   129e8:	mov	r2, #0
   129ec:	mov	r3, #0
   129f0:	lsl	r3, r0, #16
   129f4:	mov	r2, #0
   129f8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   129fc:	orr	ip, r0, r2
   12a00:	str	ip, [fp, #-92]	; 0xffffffa4
   12a04:	orr	r3, r1, r3
   12a08:	str	r3, [fp, #-88]	; 0xffffffa8
   12a0c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   12a10:	strd	r2, [fp, #-36]	; 0xffffffdc
   12a14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12a18:	ldrb	r3, [r3]
   12a1c:	uxtb	r0, r3
   12a20:	mov	r1, #0
   12a24:	mov	r2, #0
   12a28:	mov	r3, #0
   12a2c:	lsl	r3, r0, #24
   12a30:	mov	r2, #0
   12a34:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   12a38:	orr	ip, r0, r2
   12a3c:	str	ip, [fp, #-100]	; 0xffffff9c
   12a40:	orr	r3, r1, r3
   12a44:	str	r3, [fp, #-96]	; 0xffffffa0
   12a48:	ldrd	r2, [fp, #-100]	; 0xffffff9c
   12a4c:	strd	r2, [fp, #-36]	; 0xffffffdc
   12a50:	nop	{0}
   12a54:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12a58:	mov	r0, r2
   12a5c:	mov	r1, r3
   12a60:	sub	sp, fp, #24
   12a64:	ldrd	r4, [sp]
   12a68:	ldrd	r6, [sp, #8]
   12a6c:	ldrd	r8, [sp, #16]
   12a70:	ldr	fp, [sp, #24]
   12a74:	add	sp, sp, #28
   12a78:	bx	lr
   12a7c:	str	fp, [sp, #-8]!
   12a80:	str	lr, [sp, #4]
   12a84:	add	fp, sp, #4
   12a88:	sub	sp, sp, #16
   12a8c:	str	r0, [fp, #-16]
   12a90:	str	r1, [fp, #-20]	; 0xffffffec
   12a94:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a98:	ldr	r3, [fp, #-16]
   12a9c:	sub	r3, r2, r3
   12aa0:	str	r3, [fp, #-8]
   12aa4:	ldr	r1, [fp, #-20]	; 0xffffffec
   12aa8:	ldr	r0, [fp, #-16]
   12aac:	bl	127f8 <_start@@Base+0x338>
   12ab0:	mov	r2, r0
   12ab4:	mov	r3, r1
   12ab8:	mov	r0, r2
   12abc:	mov	r1, r3
   12ac0:	sub	sp, fp, #4
   12ac4:	ldr	fp, [sp]
   12ac8:	add	sp, sp, #4
   12acc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ad0:	str	fp, [sp, #-8]!
   12ad4:	str	lr, [sp, #4]
   12ad8:	add	fp, sp, #4
   12adc:	sub	sp, sp, #24
   12ae0:	str	r0, [fp, #-16]
   12ae4:	str	r1, [fp, #-20]	; 0xffffffec
   12ae8:	str	r2, [fp, #-24]	; 0xffffffe8
   12aec:	mov	r3, #0
   12af0:	strb	r3, [fp, #-5]
   12af4:	ldr	r3, [fp, #-16]
   12af8:	ldr	r3, [r3, #12]
   12afc:	cmp	r3, #0
   12b00:	beq	12c28 <_start@@Base+0x768>
   12b04:	b	12b9c <_start@@Base+0x6dc>
   12b08:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b0c:	ldrb	r3, [r3]
   12b10:	strb	r3, [fp, #-6]
   12b14:	ldrb	r3, [fp, #-6]
   12b18:	strb	r3, [fp, #-5]
   12b1c:	ldrb	r3, [fp, #-6]
   12b20:	cmp	r3, #95	; 0x5f
   12b24:	beq	12b58 <_start@@Base+0x698>
   12b28:	ldrb	r3, [fp, #-6]
   12b2c:	cmp	r3, #46	; 0x2e
   12b30:	beq	12b58 <_start@@Base+0x698>
   12b34:	ldrsb	r3, [fp, #-6]
   12b38:	cmp	r3, #0
   12b3c:	blt	12b58 <_start@@Base+0x698>
   12b40:	ldrb	r3, [fp, #-6]
   12b44:	cmp	r3, #47	; 0x2f
   12b48:	bls	12b68 <_start@@Base+0x6a8>
   12b4c:	ldrb	r3, [fp, #-6]
   12b50:	cmp	r3, #57	; 0x39
   12b54:	bhi	12b68 <_start@@Base+0x6a8>
   12b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b5c:	add	r3, r3, #1
   12b60:	str	r3, [fp, #-20]	; 0xffffffec
   12b64:	b	12b9c <_start@@Base+0x6dc>
   12b68:	ldrb	r3, [fp, #-6]
   12b6c:	orr	r3, r3, #32
   12b70:	strb	r3, [fp, #-6]
   12b74:	ldrb	r3, [fp, #-6]
   12b78:	cmp	r3, #96	; 0x60
   12b7c:	bls	12bc0 <_start@@Base+0x700>
   12b80:	ldrb	r3, [fp, #-6]
   12b84:	cmp	r3, #122	; 0x7a
   12b88:	bhi	12bc0 <_start@@Base+0x700>
   12b8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b90:	add	r3, r3, #1
   12b94:	str	r3, [fp, #-20]	; 0xffffffec
   12b98:	nop	{0}
   12b9c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ba4:	cmp	r2, r3
   12ba8:	beq	12bc4 <_start@@Base+0x704>
   12bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bb0:	ldrb	r3, [r3]
   12bb4:	cmp	r3, #32
   12bb8:	bhi	12b08 <_start@@Base+0x648>
   12bbc:	b	12bc4 <_start@@Base+0x704>
   12bc0:	nop	{0}
   12bc4:	ldrb	r3, [fp, #-5]
   12bc8:	cmp	r3, #46	; 0x2e
   12bcc:	bne	12c98 <_start@@Base+0x7d8>
   12bd0:	mov	r3, #5
   12bd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12bd8:	ldr	r1, [fp, #-20]	; 0xffffffec
   12bdc:	ldr	r0, [fp, #-16]
   12be0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12be4:	mov	r3, r0
   12be8:	b	12c9c <_start@@Base+0x7dc>
   12bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bf0:	ldrb	r3, [r3]
   12bf4:	cmp	r3, #92	; 0x5c
   12bf8:	bne	12c1c <_start@@Base+0x75c>
   12bfc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c04:	sub	r3, r2, r3
   12c08:	cmp	r3, #1
   12c0c:	ble	12c4c <_start@@Base+0x78c>
   12c10:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c14:	add	r3, r3, #1
   12c18:	str	r3, [fp, #-20]	; 0xffffffec
   12c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c20:	add	r3, r3, #1
   12c24:	str	r3, [fp, #-20]	; 0xffffffec
   12c28:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c30:	cmp	r2, r3
   12c34:	beq	12c50 <_start@@Base+0x790>
   12c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c3c:	ldrb	r3, [r3]
   12c40:	cmp	r3, #34	; 0x22
   12c44:	bne	12bec <_start@@Base+0x72c>
   12c48:	b	12c50 <_start@@Base+0x790>
   12c4c:	nop	{0}
   12c50:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c58:	cmp	r2, r3
   12c5c:	beq	12c70 <_start@@Base+0x7b0>
   12c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c64:	ldrb	r3, [r3]
   12c68:	cmp	r3, #34	; 0x22
   12c6c:	beq	12c8c <_start@@Base+0x7cc>
   12c70:	mov	r3, #20
   12c74:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12c78:	ldr	r1, [fp, #-20]	; 0xffffffec
   12c7c:	ldr	r0, [fp, #-16]
   12c80:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12c84:	mov	r3, r0
   12c88:	b	12c9c <_start@@Base+0x7dc>
   12c8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c90:	add	r3, r3, #1
   12c94:	str	r3, [fp, #-20]	; 0xffffffec
   12c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c9c:	mov	r0, r3
   12ca0:	sub	sp, fp, #4
   12ca4:	ldr	fp, [sp]
   12ca8:	add	sp, sp, #4
   12cac:	pop	{pc}		; (ldr pc, [sp], #4)
   12cb0:	str	fp, [sp, #-8]!
   12cb4:	str	lr, [sp, #4]
   12cb8:	add	fp, sp, #4
   12cbc:	sub	sp, sp, #16
   12cc0:	str	r0, [fp, #-8]
   12cc4:	str	r1, [fp, #-12]
   12cc8:	str	r2, [fp, #-16]
   12ccc:	ldr	r2, [fp, #-16]
   12cd0:	ldr	r1, [fp, #-12]
   12cd4:	ldr	r0, [fp, #-8]
   12cd8:	bl	12748 <_start@@Base+0x288>
   12cdc:	str	r0, [fp, #-12]
   12ce0:	ldr	r3, [fp, #-8]
   12ce4:	ldr	r3, [r3, #12]
   12ce8:	cmp	r3, #0
   12cec:	bne	12d04 <_start@@Base+0x844>
   12cf0:	ldr	r2, [fp, #-16]
   12cf4:	ldr	r1, [fp, #-12]
   12cf8:	ldr	r0, [fp, #-8]
   12cfc:	bl	125b0 <_start@@Base+0xf0>
   12d00:	str	r0, [fp, #-12]
   12d04:	ldr	r3, [fp, #-12]
   12d08:	mov	r0, r3
   12d0c:	sub	sp, fp, #4
   12d10:	ldr	fp, [sp]
   12d14:	add	sp, sp, #4
   12d18:	pop	{pc}		; (ldr pc, [sp], #4)
   12d1c:	str	fp, [sp, #-8]!
   12d20:	str	lr, [sp, #4]
   12d24:	add	fp, sp, #4
   12d28:	sub	sp, sp, #16
   12d2c:	str	r0, [fp, #-8]
   12d30:	str	r1, [fp, #-12]
   12d34:	str	r2, [fp, #-16]
   12d38:	str	r3, [fp, #-20]	; 0xffffffec
   12d3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d40:	cmp	r3, #0
   12d44:	beq	12d64 <_start@@Base+0x8a4>
   12d48:	mov	r3, #8
   12d4c:	ldr	r2, [fp, #-16]
   12d50:	ldr	r1, [fp, #-12]
   12d54:	ldr	r0, [fp, #-8]
   12d58:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12d5c:	mov	r3, r0
   12d60:	b	12d74 <_start@@Base+0x8b4>
   12d64:	ldr	r1, [fp, #12]
   12d68:	ldrd	r2, [fp, #4]
   12d6c:	strd	r2, [r1]
   12d70:	ldr	r3, [fp, #-12]
   12d74:	mov	r0, r3
   12d78:	sub	sp, fp, #4
   12d7c:	ldr	fp, [sp]
   12d80:	add	sp, sp, #4
   12d84:	pop	{pc}		; (ldr pc, [sp], #4)
   12d88:	str	fp, [sp, #-8]!
   12d8c:	str	lr, [sp, #4]
   12d90:	add	fp, sp, #4
   12d94:	sub	sp, sp, #16
   12d98:	str	r0, [fp, #-8]
   12d9c:	str	r1, [fp, #-12]
   12da0:	str	r2, [fp, #-16]
   12da4:	str	r3, [fp, #-20]	; 0xffffffec
   12da8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dac:	cmp	r3, #0
   12db0:	beq	12dd0 <_start@@Base+0x910>
   12db4:	mov	r3, #8
   12db8:	ldr	r2, [fp, #-16]
   12dbc:	ldr	r1, [fp, #-12]
   12dc0:	ldr	r0, [fp, #-8]
   12dc4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12dc8:	mov	r3, r0
   12dcc:	b	12dfc <_start@@Base+0x93c>
   12dd0:	ldr	r2, [fp, #4]
   12dd4:	ldr	r3, [fp, #8]
   12dd8:	orr	r3, r2, r3
   12ddc:	cmp	r3, #0
   12de0:	movne	r3, #1
   12de4:	moveq	r3, #0
   12de8:	uxtb	r3, r3
   12dec:	mov	r2, r3
   12df0:	ldr	r3, [fp, #12]
   12df4:	strb	r2, [r3]
   12df8:	ldr	r3, [fp, #-12]
   12dfc:	mov	r0, r3
   12e00:	sub	sp, fp, #4
   12e04:	ldr	fp, [sp]
   12e08:	add	sp, sp, #4
   12e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e10:	str	fp, [sp, #-8]!
   12e14:	str	lr, [sp, #4]
   12e18:	add	fp, sp, #4
   12e1c:	sub	sp, sp, #16
   12e20:	str	r0, [fp, #-8]
   12e24:	str	r1, [fp, #-12]
   12e28:	str	r2, [fp, #-16]
   12e2c:	str	r3, [fp, #-20]	; 0xffffffec
   12e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e34:	cmp	r3, #0
   12e38:	beq	12e58 <_start@@Base+0x998>
   12e3c:	mov	r3, #8
   12e40:	ldr	r2, [fp, #-16]
   12e44:	ldr	r1, [fp, #-12]
   12e48:	ldr	r0, [fp, #-8]
   12e4c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12e50:	mov	r3, r0
   12e54:	b	12e9c <_start@@Base+0x9dc>
   12e58:	ldrd	r2, [fp, #4]
   12e5c:	mvn	r0, #0
   12e60:	mov	r1, #0
   12e64:	cmp	r3, r1
   12e68:	cmpeq	r2, r0
   12e6c:	bls	12e8c <_start@@Base+0x9cc>
   12e70:	mov	r3, #7
   12e74:	ldr	r2, [fp, #-16]
   12e78:	ldr	r1, [fp, #-12]
   12e7c:	ldr	r0, [fp, #-8]
   12e80:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12e84:	mov	r3, r0
   12e88:	b	12e9c <_start@@Base+0x9dc>
   12e8c:	ldr	r2, [fp, #4]
   12e90:	ldr	r3, [fp, #12]
   12e94:	str	r2, [r3]
   12e98:	ldr	r3, [fp, #-12]
   12e9c:	mov	r0, r3
   12ea0:	sub	sp, fp, #4
   12ea4:	ldr	fp, [sp]
   12ea8:	add	sp, sp, #4
   12eac:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb0:	str	fp, [sp, #-8]!
   12eb4:	str	lr, [sp, #4]
   12eb8:	add	fp, sp, #4
   12ebc:	sub	sp, sp, #16
   12ec0:	str	r0, [fp, #-8]
   12ec4:	str	r1, [fp, #-12]
   12ec8:	str	r2, [fp, #-16]
   12ecc:	str	r3, [fp, #-20]	; 0xffffffec
   12ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ed4:	cmp	r3, #0
   12ed8:	beq	12ef8 <_start@@Base+0xa38>
   12edc:	mov	r3, #8
   12ee0:	ldr	r2, [fp, #-16]
   12ee4:	ldr	r1, [fp, #-12]
   12ee8:	ldr	r0, [fp, #-8]
   12eec:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12ef0:	mov	r3, r0
   12ef4:	b	12f3c <_start@@Base+0xa7c>
   12ef8:	ldrd	r2, [fp, #4]
   12efc:	movw	r0, #65535	; 0xffff
   12f00:	mov	r1, #0
   12f04:	cmp	r3, r1
   12f08:	cmpeq	r2, r0
   12f0c:	bls	12f2c <_start@@Base+0xa6c>
   12f10:	mov	r3, #7
   12f14:	ldr	r2, [fp, #-16]
   12f18:	ldr	r1, [fp, #-12]
   12f1c:	ldr	r0, [fp, #-8]
   12f20:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12f24:	mov	r3, r0
   12f28:	b	12f3c <_start@@Base+0xa7c>
   12f2c:	ldrh	r2, [fp, #4]
   12f30:	ldr	r3, [fp, #12]
   12f34:	strh	r2, [r3]
   12f38:	ldr	r3, [fp, #-12]
   12f3c:	mov	r0, r3
   12f40:	sub	sp, fp, #4
   12f44:	ldr	fp, [sp]
   12f48:	add	sp, sp, #4
   12f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f50:	str	fp, [sp, #-8]!
   12f54:	str	lr, [sp, #4]
   12f58:	add	fp, sp, #4
   12f5c:	sub	sp, sp, #16
   12f60:	str	r0, [fp, #-8]
   12f64:	str	r1, [fp, #-12]
   12f68:	str	r2, [fp, #-16]
   12f6c:	str	r3, [fp, #-20]	; 0xffffffec
   12f70:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f74:	cmp	r3, #0
   12f78:	beq	12f98 <_start@@Base+0xad8>
   12f7c:	mov	r3, #8
   12f80:	ldr	r2, [fp, #-16]
   12f84:	ldr	r1, [fp, #-12]
   12f88:	ldr	r0, [fp, #-8]
   12f8c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12f90:	mov	r3, r0
   12f94:	b	12fd4 <_start@@Base+0xb14>
   12f98:	ldrd	r2, [fp, #4]
   12f9c:	cmp	r3, #0
   12fa0:	cmpeq	r2, #255	; 0xff
   12fa4:	bls	12fc4 <_start@@Base+0xb04>
   12fa8:	mov	r3, #7
   12fac:	ldr	r2, [fp, #-16]
   12fb0:	ldr	r1, [fp, #-12]
   12fb4:	ldr	r0, [fp, #-8]
   12fb8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   12fbc:	mov	r3, r0
   12fc0:	b	12fd4 <_start@@Base+0xb14>
   12fc4:	ldrb	r2, [fp, #4]
   12fc8:	ldr	r3, [fp, #12]
   12fcc:	strb	r2, [r3]
   12fd0:	ldr	r3, [fp, #-12]
   12fd4:	mov	r0, r3
   12fd8:	sub	sp, fp, #4
   12fdc:	ldr	fp, [sp]
   12fe0:	add	sp, sp, #4
   12fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe8:	str	fp, [sp, #-8]!
   12fec:	str	lr, [sp, #4]
   12ff0:	add	fp, sp, #4
   12ff4:	sub	sp, sp, #16
   12ff8:	str	r0, [fp, #-8]
   12ffc:	str	r1, [fp, #-12]
   13000:	str	r2, [fp, #-16]
   13004:	str	r3, [fp, #-20]	; 0xffffffec
   13008:	ldr	r3, [fp, #-20]	; 0xffffffec
   1300c:	cmp	r3, #0
   13010:	beq	13058 <_start@@Base+0xb98>
   13014:	ldrd	r2, [fp, #4]
   13018:	cmp	r3, #-2147483648	; 0x80000000
   1301c:	cmpeq	r2, #0
   13020:	bls	13040 <_start@@Base+0xb80>
   13024:	mov	r3, #8
   13028:	ldr	r2, [fp, #-16]
   1302c:	ldr	r1, [fp, #-12]
   13030:	ldr	r0, [fp, #-8]
   13034:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13038:	mov	r3, r0
   1303c:	b	13094 <_start@@Base+0xbd4>
   13040:	ldrd	r2, [fp, #4]
   13044:	rsbs	r2, r2, #0
   13048:	rsc	r3, r3, #0
   1304c:	ldr	r1, [fp, #12]
   13050:	strd	r2, [r1]
   13054:	b	13090 <_start@@Base+0xbd0>
   13058:	ldrd	r2, [fp, #4]
   1305c:	cmp	r2, #0
   13060:	sbcs	r3, r3, #0
   13064:	bge	13084 <_start@@Base+0xbc4>
   13068:	mov	r3, #7
   1306c:	ldr	r2, [fp, #-16]
   13070:	ldr	r1, [fp, #-12]
   13074:	ldr	r0, [fp, #-8]
   13078:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1307c:	mov	r3, r0
   13080:	b	13094 <_start@@Base+0xbd4>
   13084:	ldrd	r2, [fp, #4]
   13088:	ldr	r1, [fp, #12]
   1308c:	strd	r2, [r1]
   13090:	ldr	r3, [fp, #-12]
   13094:	mov	r0, r3
   13098:	sub	sp, fp, #4
   1309c:	ldr	fp, [sp]
   130a0:	add	sp, sp, #4
   130a4:	pop	{pc}		; (ldr pc, [sp], #4)
   130a8:	str	fp, [sp, #-8]!
   130ac:	str	lr, [sp, #4]
   130b0:	add	fp, sp, #4
   130b4:	sub	sp, sp, #16
   130b8:	str	r0, [fp, #-8]
   130bc:	str	r1, [fp, #-12]
   130c0:	str	r2, [fp, #-16]
   130c4:	str	r3, [fp, #-20]	; 0xffffffec
   130c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130cc:	cmp	r3, #0
   130d0:	beq	13118 <_start@@Base+0xc58>
   130d4:	ldrd	r2, [fp, #4]
   130d8:	cmp	r3, #0
   130dc:	cmpeq	r2, #-2147483648	; 0x80000000
   130e0:	bls	13100 <_start@@Base+0xc40>
   130e4:	mov	r3, #8
   130e8:	ldr	r2, [fp, #-16]
   130ec:	ldr	r1, [fp, #-12]
   130f0:	ldr	r0, [fp, #-8]
   130f4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   130f8:	mov	r3, r0
   130fc:	b	1315c <_start@@Base+0xc9c>
   13100:	ldr	r3, [fp, #4]
   13104:	rsb	r3, r3, #0
   13108:	mov	r2, r3
   1310c:	ldr	r3, [fp, #12]
   13110:	str	r2, [r3]
   13114:	b	13158 <_start@@Base+0xc98>
   13118:	ldrd	r2, [fp, #4]
   1311c:	mvn	r0, #-2147483648	; 0x80000000
   13120:	mov	r1, #0
   13124:	cmp	r3, r1
   13128:	cmpeq	r2, r0
   1312c:	bls	1314c <_start@@Base+0xc8c>
   13130:	mov	r3, #7
   13134:	ldr	r2, [fp, #-16]
   13138:	ldr	r1, [fp, #-12]
   1313c:	ldr	r0, [fp, #-8]
   13140:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13144:	mov	r3, r0
   13148:	b	1315c <_start@@Base+0xc9c>
   1314c:	ldr	r2, [fp, #4]
   13150:	ldr	r3, [fp, #12]
   13154:	str	r2, [r3]
   13158:	ldr	r3, [fp, #-12]
   1315c:	mov	r0, r3
   13160:	sub	sp, fp, #4
   13164:	ldr	fp, [sp]
   13168:	add	sp, sp, #4
   1316c:	pop	{pc}		; (ldr pc, [sp], #4)
   13170:	str	fp, [sp, #-8]!
   13174:	str	lr, [sp, #4]
   13178:	add	fp, sp, #4
   1317c:	sub	sp, sp, #16
   13180:	str	r0, [fp, #-8]
   13184:	str	r1, [fp, #-12]
   13188:	str	r2, [fp, #-16]
   1318c:	str	r3, [fp, #-20]	; 0xffffffec
   13190:	ldr	r3, [fp, #-20]	; 0xffffffec
   13194:	cmp	r3, #0
   13198:	beq	131e4 <_start@@Base+0xd24>
   1319c:	ldrd	r2, [fp, #4]
   131a0:	cmp	r3, #0
   131a4:	cmpeq	r2, #32768	; 0x8000
   131a8:	bls	131c8 <_start@@Base+0xd08>
   131ac:	mov	r3, #8
   131b0:	ldr	r2, [fp, #-16]
   131b4:	ldr	r1, [fp, #-12]
   131b8:	ldr	r0, [fp, #-8]
   131bc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   131c0:	mov	r3, r0
   131c4:	b	13228 <_start@@Base+0xd68>
   131c8:	ldrh	r3, [fp, #4]
   131cc:	rsb	r3, r3, #0
   131d0:	uxth	r3, r3
   131d4:	sxth	r2, r3
   131d8:	ldr	r3, [fp, #12]
   131dc:	strh	r2, [r3]
   131e0:	b	13224 <_start@@Base+0xd64>
   131e4:	ldrd	r2, [fp, #4]
   131e8:	movw	r0, #32767	; 0x7fff
   131ec:	mov	r1, #0
   131f0:	cmp	r3, r1
   131f4:	cmpeq	r2, r0
   131f8:	bls	13218 <_start@@Base+0xd58>
   131fc:	mov	r3, #7
   13200:	ldr	r2, [fp, #-16]
   13204:	ldr	r1, [fp, #-12]
   13208:	ldr	r0, [fp, #-8]
   1320c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13210:	mov	r3, r0
   13214:	b	13228 <_start@@Base+0xd68>
   13218:	ldrsh	r2, [fp, #4]
   1321c:	ldr	r3, [fp, #12]
   13220:	strh	r2, [r3]
   13224:	ldr	r3, [fp, #-12]
   13228:	mov	r0, r3
   1322c:	sub	sp, fp, #4
   13230:	ldr	fp, [sp]
   13234:	add	sp, sp, #4
   13238:	pop	{pc}		; (ldr pc, [sp], #4)
   1323c:	str	fp, [sp, #-8]!
   13240:	str	lr, [sp, #4]
   13244:	add	fp, sp, #4
   13248:	sub	sp, sp, #16
   1324c:	str	r0, [fp, #-8]
   13250:	str	r1, [fp, #-12]
   13254:	str	r2, [fp, #-16]
   13258:	str	r3, [fp, #-20]	; 0xffffffec
   1325c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13260:	cmp	r3, #0
   13264:	beq	132b0 <_start@@Base+0xdf0>
   13268:	ldrd	r2, [fp, #4]
   1326c:	cmp	r3, #0
   13270:	cmpeq	r2, #128	; 0x80
   13274:	bls	13294 <_start@@Base+0xdd4>
   13278:	mov	r3, #8
   1327c:	ldr	r2, [fp, #-16]
   13280:	ldr	r1, [fp, #-12]
   13284:	ldr	r0, [fp, #-8]
   13288:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1328c:	mov	r3, r0
   13290:	b	132ec <_start@@Base+0xe2c>
   13294:	ldrb	r3, [fp, #4]
   13298:	rsb	r3, r3, #0
   1329c:	uxtb	r3, r3
   132a0:	sxtb	r2, r3
   132a4:	ldr	r3, [fp, #12]
   132a8:	strb	r2, [r3]
   132ac:	b	132e8 <_start@@Base+0xe28>
   132b0:	ldrd	r2, [fp, #4]
   132b4:	cmp	r3, #0
   132b8:	cmpeq	r2, #127	; 0x7f
   132bc:	bls	132dc <_start@@Base+0xe1c>
   132c0:	mov	r3, #7
   132c4:	ldr	r2, [fp, #-16]
   132c8:	ldr	r1, [fp, #-12]
   132cc:	ldr	r0, [fp, #-8]
   132d0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   132d4:	mov	r3, r0
   132d8:	b	132ec <_start@@Base+0xe2c>
   132dc:	ldrsb	r2, [fp, #4]
   132e0:	ldr	r3, [fp, #12]
   132e4:	strb	r2, [r3]
   132e8:	ldr	r3, [fp, #-12]
   132ec:	mov	r0, r3
   132f0:	sub	sp, fp, #4
   132f4:	ldr	fp, [sp]
   132f8:	add	sp, sp, #4
   132fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13300:	str	fp, [sp, #-8]!
   13304:	str	lr, [sp, #4]
   13308:	add	fp, sp, #4
   1330c:	sub	sp, sp, #16
   13310:	str	r0, [fp, #-8]
   13314:	str	r1, [fp, #-12]
   13318:	str	r2, [fp, #-16]
   1331c:	str	r3, [fp, #-20]	; 0xffffffec
   13320:	ldr	r3, [fp, #-20]	; 0xffffffec
   13324:	cmp	r3, #0
   13328:	beq	13340 <_start@@Base+0xe80>
   1332c:	ldrd	r0, [fp, #4]
   13330:	bl	2692c <flatcc_json_parser_struct_as_root@@Base+0x6ac>
   13334:	mov	r3, r0
   13338:	eor	r2, r3, #-2147483648	; 0x80000000
   1333c:	b	1334c <_start@@Base+0xe8c>
   13340:	ldrd	r0, [fp, #4]
   13344:	bl	2692c <flatcc_json_parser_struct_as_root@@Base+0x6ac>
   13348:	mov	r2, r0
   1334c:	ldr	r3, [fp, #12]
   13350:	str	r2, [r3]
   13354:	ldr	r3, [fp, #-12]
   13358:	mov	r0, r3
   1335c:	sub	sp, fp, #4
   13360:	ldr	fp, [sp]
   13364:	add	sp, sp, #4
   13368:	pop	{pc}		; (ldr pc, [sp], #4)
   1336c:	str	fp, [sp, #-8]!
   13370:	str	lr, [sp, #4]
   13374:	add	fp, sp, #4
   13378:	sub	sp, sp, #16
   1337c:	str	r0, [fp, #-8]
   13380:	str	r1, [fp, #-12]
   13384:	str	r2, [fp, #-16]
   13388:	str	r3, [fp, #-20]	; 0xffffffec
   1338c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13390:	cmp	r3, #0
   13394:	beq	133b0 <_start@@Base+0xef0>
   13398:	ldrd	r0, [fp, #4]
   1339c:	bl	266f4 <flatcc_json_parser_struct_as_root@@Base+0x474>
   133a0:	mov	r2, r0
   133a4:	mov	r3, r1
   133a8:	eor	r3, r3, #-2147483648	; 0x80000000
   133ac:	b	133c0 <_start@@Base+0xf00>
   133b0:	ldrd	r0, [fp, #4]
   133b4:	bl	266f4 <flatcc_json_parser_struct_as_root@@Base+0x474>
   133b8:	mov	r2, r0
   133bc:	mov	r3, r1
   133c0:	ldr	r1, [fp, #12]
   133c4:	strd	r2, [r1]
   133c8:	ldr	r3, [fp, #-12]
   133cc:	mov	r0, r3
   133d0:	sub	sp, fp, #4
   133d4:	ldr	fp, [sp]
   133d8:	add	sp, sp, #4
   133dc:	pop	{pc}		; (ldr pc, [sp], #4)
   133e0:	str	fp, [sp, #-8]!
   133e4:	str	lr, [sp, #4]
   133e8:	add	fp, sp, #4
   133ec:	sub	sp, sp, #56	; 0x38
   133f0:	str	r0, [fp, #-32]	; 0xffffffe0
   133f4:	str	r1, [fp, #-36]	; 0xffffffdc
   133f8:	str	r2, [fp, #-40]	; 0xffffffd8
   133fc:	str	r3, [fp, #-44]	; 0xffffffd4
   13400:	mov	r2, #0
   13404:	mov	r3, #0
   13408:	strd	r2, [fp, #-20]	; 0xffffffec
   1340c:	mov	r3, #0
   13410:	str	r3, [fp, #-24]	; 0xffffffe8
   13414:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13418:	str	r3, [fp, #-8]
   1341c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13420:	mov	r2, #0
   13424:	str	r2, [r3]
   13428:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1342c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13430:	cmp	r2, r3
   13434:	bne	13440 <_start@@Base+0xf80>
   13438:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1343c:	b	134a8 <_start@@Base+0xfe8>
   13440:	sub	r2, fp, #24
   13444:	sub	r3, fp, #20
   13448:	str	r3, [sp]
   1344c:	mov	r3, r2
   13450:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13454:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13458:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1345c:	bl	24ca8 <flatcc_json_parser_integer@@Base>
   13460:	str	r0, [fp, #-36]	; 0xffffffdc
   13464:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13468:	ldr	r3, [fp, #-8]
   1346c:	cmp	r2, r3
   13470:	beq	134a4 <_start@@Base+0xfe4>
   13474:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13478:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1347c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13480:	str	r1, [sp, #8]
   13484:	strd	r2, [sp]
   13488:	mov	r3, r0
   1348c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13490:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13494:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13498:	bl	12e10 <_start@@Base+0x950>
   1349c:	mov	r3, r0
   134a0:	b	134a8 <_start@@Base+0xfe8>
   134a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   134a8:	mov	r0, r3
   134ac:	sub	sp, fp, #4
   134b0:	ldr	fp, [sp]
   134b4:	add	sp, sp, #4
   134b8:	pop	{pc}		; (ldr pc, [sp], #4)
   134bc:	str	fp, [sp, #-8]!
   134c0:	str	lr, [sp, #4]
   134c4:	add	fp, sp, #4
   134c8:	sub	sp, sp, #56	; 0x38
   134cc:	str	r0, [fp, #-32]	; 0xffffffe0
   134d0:	str	r1, [fp, #-36]	; 0xffffffdc
   134d4:	str	r2, [fp, #-40]	; 0xffffffd8
   134d8:	str	r3, [fp, #-44]	; 0xffffffd4
   134dc:	mov	r2, #0
   134e0:	mov	r3, #0
   134e4:	strd	r2, [fp, #-20]	; 0xffffffec
   134e8:	mov	r3, #0
   134ec:	str	r3, [fp, #-24]	; 0xffffffe8
   134f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   134f4:	str	r3, [fp, #-8]
   134f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   134fc:	mov	r2, #0
   13500:	strb	r2, [r3]
   13504:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13508:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1350c:	cmp	r2, r3
   13510:	bne	1351c <_start@@Base+0x105c>
   13514:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13518:	b	13584 <_start@@Base+0x10c4>
   1351c:	sub	r2, fp, #24
   13520:	sub	r3, fp, #20
   13524:	str	r3, [sp]
   13528:	mov	r3, r2
   1352c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13530:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13534:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13538:	bl	24ca8 <flatcc_json_parser_integer@@Base>
   1353c:	str	r0, [fp, #-36]	; 0xffffffdc
   13540:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13544:	ldr	r3, [fp, #-8]
   13548:	cmp	r2, r3
   1354c:	beq	13580 <_start@@Base+0x10c0>
   13550:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13554:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13558:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1355c:	str	r1, [sp, #8]
   13560:	strd	r2, [sp]
   13564:	mov	r3, r0
   13568:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1356c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13570:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13574:	bl	12f50 <_start@@Base+0xa90>
   13578:	mov	r3, r0
   1357c:	b	13584 <_start@@Base+0x10c4>
   13580:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13584:	mov	r0, r3
   13588:	sub	sp, fp, #4
   1358c:	ldr	fp, [sp]
   13590:	add	sp, sp, #4
   13594:	pop	{pc}		; (ldr pc, [sp], #4)
   13598:	str	fp, [sp, #-8]!
   1359c:	str	lr, [sp, #4]
   135a0:	add	fp, sp, #4
   135a4:	sub	sp, sp, #56	; 0x38
   135a8:	str	r0, [fp, #-32]	; 0xffffffe0
   135ac:	str	r1, [fp, #-36]	; 0xffffffdc
   135b0:	str	r2, [fp, #-40]	; 0xffffffd8
   135b4:	str	r3, [fp, #-44]	; 0xffffffd4
   135b8:	mov	r2, #0
   135bc:	mov	r3, #0
   135c0:	strd	r2, [fp, #-20]	; 0xffffffec
   135c4:	mov	r3, #0
   135c8:	str	r3, [fp, #-24]	; 0xffffffe8
   135cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135d0:	str	r3, [fp, #-8]
   135d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   135d8:	mov	r2, #0
   135dc:	mov	r3, #0
   135e0:	strd	r2, [r1]
   135e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   135e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   135ec:	cmp	r2, r3
   135f0:	bne	135fc <_start@@Base+0x113c>
   135f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135f8:	b	13664 <_start@@Base+0x11a4>
   135fc:	sub	r2, fp, #24
   13600:	sub	r3, fp, #20
   13604:	str	r3, [sp]
   13608:	mov	r3, r2
   1360c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13610:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13614:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13618:	bl	24ca8 <flatcc_json_parser_integer@@Base>
   1361c:	str	r0, [fp, #-36]	; 0xffffffdc
   13620:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13624:	ldr	r3, [fp, #-8]
   13628:	cmp	r2, r3
   1362c:	beq	13660 <_start@@Base+0x11a0>
   13630:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13634:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13638:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1363c:	str	r1, [sp, #8]
   13640:	strd	r2, [sp]
   13644:	mov	r3, r0
   13648:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1364c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13650:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13654:	bl	12fe8 <_start@@Base+0xb28>
   13658:	mov	r3, r0
   1365c:	b	13664 <_start@@Base+0x11a4>
   13660:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13664:	mov	r0, r3
   13668:	sub	sp, fp, #4
   1366c:	ldr	fp, [sp]
   13670:	add	sp, sp, #4
   13674:	pop	{pc}		; (ldr pc, [sp], #4)
   13678:	strd	r4, [sp, #-20]!	; 0xffffffec
   1367c:	str	r6, [sp, #8]
   13680:	str	fp, [sp, #12]
   13684:	str	lr, [sp, #16]
   13688:	add	fp, sp, #16
   1368c:	sub	sp, sp, #76	; 0x4c
   13690:	str	r0, [fp, #-64]	; 0xffffffc0
   13694:	str	r1, [fp, #-68]	; 0xffffffbc
   13698:	str	r2, [fp, #-72]	; 0xffffffb8
   1369c:	str	r3, [fp, #-76]	; 0xffffffb4
   136a0:	mov	r2, #0
   136a4:	mov	r3, #0
   136a8:	strd	r2, [fp, #-44]	; 0xffffffd4
   136ac:	mov	r3, #0
   136b0:	str	r3, [fp, #-28]	; 0xffffffe4
   136b4:	ldr	r1, [fp, #4]
   136b8:	mov	r2, #0
   136bc:	mov	r3, #0
   136c0:	strd	r2, [r1]
   136c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   136c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   136cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136d0:	bl	12cb0 <_start@@Base+0x7f0>
   136d4:	str	r0, [fp, #-68]	; 0xffffffbc
   136d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   136dc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   136e0:	cmp	r2, r3
   136e4:	bne	136f0 <_start@@Base+0x1230>
   136e8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   136ec:	b	13850 <_start@@Base+0x1390>
   136f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   136f4:	str	r3, [fp, #-24]	; 0xffffffe8
   136f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   136fc:	ldr	r6, [r3]
   13700:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13704:	str	r3, [fp, #-32]	; 0xffffffe0
   13708:	sub	r2, fp, #56	; 0x38
   1370c:	sub	r3, fp, #60	; 0x3c
   13710:	str	r3, [sp, #4]
   13714:	sub	r3, fp, #52	; 0x34
   13718:	str	r3, [sp]
   1371c:	mov	r3, r2
   13720:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13724:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13728:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1372c:	blx	r6
   13730:	str	r0, [fp, #-68]	; 0xffffffbc
   13734:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13738:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1373c:	cmp	r2, r3
   13740:	bne	1374c <_start@@Base+0x128c>
   13744:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13748:	b	13850 <_start@@Base+0x1390>
   1374c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13750:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13754:	cmp	r2, r3
   13758:	bne	13778 <_start@@Base+0x12b8>
   1375c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13760:	add	r3, r3, #4
   13764:	str	r3, [fp, #-24]	; 0xffffffe8
   13768:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1376c:	ldr	r3, [r3]
   13770:	cmp	r3, #0
   13774:	bne	136f8 <_start@@Base+0x1238>
   13778:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1377c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13780:	cmp	r2, r3
   13784:	bne	137a4 <_start@@Base+0x12e4>
   13788:	mov	r3, #23
   1378c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13790:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13794:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13798:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1379c:	mov	r3, r0
   137a0:	b	13850 <_start@@Base+0x1390>
   137a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   137a8:	add	r2, r3, #1
   137ac:	str	r2, [fp, #-28]	; 0xffffffe4
   137b0:	cmp	r3, #0
   137b4:	beq	137e4 <_start@@Base+0x1324>
   137b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137bc:	ldr	r3, [r3, #12]
   137c0:	cmp	r3, #0
   137c4:	beq	137e4 <_start@@Base+0x1324>
   137c8:	mov	r3, #14
   137cc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   137d0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   137d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   137d8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   137dc:	mov	r3, r0
   137e0:	b	13850 <_start@@Base+0x1390>
   137e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   137e8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   137ec:	sub	r1, fp, #44	; 0x2c
   137f0:	str	r1, [sp, #8]
   137f4:	strd	r2, [sp]
   137f8:	mov	r3, r0
   137fc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13800:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13804:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13808:	bl	12d1c <_start@@Base+0x85c>
   1380c:	mov	r2, r0
   13810:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13814:	cmp	r3, r2
   13818:	bne	13824 <_start@@Base+0x1364>
   1381c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13820:	b	13850 <_start@@Base+0x1390>
   13824:	ldr	r3, [fp, #4]
   13828:	ldrd	r0, [r3]
   1382c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13830:	adds	r4, r0, r2
   13834:	adc	r5, r1, r3
   13838:	ldr	r3, [fp, #4]
   1383c:	strd	r4, [r3]
   13840:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13844:	cmp	r3, #0
   13848:	bne	136f0 <_start@@Base+0x1230>
   1384c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13850:	mov	r0, r3
   13854:	sub	sp, fp, #16
   13858:	ldrd	r4, [sp]
   1385c:	ldr	r6, [sp, #8]
   13860:	ldr	fp, [sp, #12]
   13864:	add	sp, sp, #16
   13868:	pop	{pc}		; (ldr pc, [sp], #4)
   1386c:	str	r4, [sp, #-12]!
   13870:	str	fp, [sp, #4]
   13874:	str	lr, [sp, #8]
   13878:	add	fp, sp, #8
   1387c:	sub	sp, sp, #68	; 0x44
   13880:	str	r0, [fp, #-48]	; 0xffffffd0
   13884:	str	r1, [fp, #-52]	; 0xffffffcc
   13888:	str	r2, [fp, #-56]	; 0xffffffc8
   1388c:	str	r3, [fp, #-60]	; 0xffffffc4
   13890:	mov	r3, #0
   13894:	str	r3, [fp, #-28]	; 0xffffffe4
   13898:	mov	r3, #0
   1389c:	str	r3, [fp, #-20]	; 0xffffffec
   138a0:	ldr	r3, [fp, #4]
   138a4:	mov	r2, #0
   138a8:	str	r2, [r3]
   138ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   138b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   138b8:	bl	12cb0 <_start@@Base+0x7f0>
   138bc:	str	r0, [fp, #-52]	; 0xffffffcc
   138c0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   138c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138c8:	cmp	r2, r3
   138cc:	bne	138d8 <_start@@Base+0x1418>
   138d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   138d4:	b	13a34 <_start@@Base+0x1574>
   138d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   138dc:	str	r3, [fp, #-16]
   138e0:	ldr	r3, [fp, #-16]
   138e4:	ldr	r4, [r3]
   138e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   138ec:	str	r3, [fp, #-24]	; 0xffffffe8
   138f0:	sub	r2, fp, #40	; 0x28
   138f4:	sub	r3, fp, #44	; 0x2c
   138f8:	str	r3, [sp, #4]
   138fc:	sub	r3, fp, #36	; 0x24
   13900:	str	r3, [sp]
   13904:	mov	r3, r2
   13908:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1390c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13910:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13914:	blx	r4
   13918:	str	r0, [fp, #-52]	; 0xffffffcc
   1391c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13920:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13924:	cmp	r2, r3
   13928:	bne	13934 <_start@@Base+0x1474>
   1392c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13930:	b	13a34 <_start@@Base+0x1574>
   13934:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13938:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1393c:	cmp	r2, r3
   13940:	bne	13960 <_start@@Base+0x14a0>
   13944:	ldr	r3, [fp, #-16]
   13948:	add	r3, r3, #4
   1394c:	str	r3, [fp, #-16]
   13950:	ldr	r3, [fp, #-16]
   13954:	ldr	r3, [r3]
   13958:	cmp	r3, #0
   1395c:	bne	138e0 <_start@@Base+0x1420>
   13960:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13964:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13968:	cmp	r2, r3
   1396c:	bne	1398c <_start@@Base+0x14cc>
   13970:	mov	r3, #23
   13974:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13978:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1397c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13980:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13984:	mov	r3, r0
   13988:	b	13a34 <_start@@Base+0x1574>
   1398c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13990:	add	r2, r3, #1
   13994:	str	r2, [fp, #-20]	; 0xffffffec
   13998:	cmp	r3, #0
   1399c:	beq	139cc <_start@@Base+0x150c>
   139a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139a4:	ldr	r3, [r3, #12]
   139a8:	cmp	r3, #0
   139ac:	beq	139cc <_start@@Base+0x150c>
   139b0:	mov	r3, #14
   139b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139b8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   139bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   139c0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   139c4:	mov	r3, r0
   139c8:	b	13a34 <_start@@Base+0x1574>
   139cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   139d0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   139d4:	sub	r1, fp, #28
   139d8:	str	r1, [sp, #8]
   139dc:	strd	r2, [sp]
   139e0:	mov	r3, r0
   139e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   139ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   139f0:	bl	12e10 <_start@@Base+0x950>
   139f4:	mov	r2, r0
   139f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139fc:	cmp	r3, r2
   13a00:	bne	13a0c <_start@@Base+0x154c>
   13a04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a08:	b	13a34 <_start@@Base+0x1574>
   13a0c:	ldr	r3, [fp, #4]
   13a10:	ldr	r2, [r3]
   13a14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a18:	add	r2, r2, r3
   13a1c:	ldr	r3, [fp, #4]
   13a20:	str	r2, [r3]
   13a24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13a28:	cmp	r3, #0
   13a2c:	bne	138d8 <_start@@Base+0x1418>
   13a30:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13a34:	mov	r0, r3
   13a38:	sub	sp, fp, #8
   13a3c:	ldr	r4, [sp]
   13a40:	ldr	fp, [sp, #4]
   13a44:	add	sp, sp, #8
   13a48:	pop	{pc}		; (ldr pc, [sp], #4)
   13a4c:	str	r4, [sp, #-12]!
   13a50:	str	fp, [sp, #4]
   13a54:	str	lr, [sp, #8]
   13a58:	add	fp, sp, #8
   13a5c:	sub	sp, sp, #68	; 0x44
   13a60:	str	r0, [fp, #-48]	; 0xffffffd0
   13a64:	str	r1, [fp, #-52]	; 0xffffffcc
   13a68:	str	r2, [fp, #-56]	; 0xffffffc8
   13a6c:	str	r3, [fp, #-60]	; 0xffffffc4
   13a70:	mov	r3, #0
   13a74:	strh	r3, [fp, #-26]	; 0xffffffe6
   13a78:	mov	r3, #0
   13a7c:	str	r3, [fp, #-20]	; 0xffffffec
   13a80:	ldr	r3, [fp, #4]
   13a84:	mov	r2, #0
   13a88:	strh	r2, [r3]
   13a8c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a90:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13a94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13a98:	bl	12cb0 <_start@@Base+0x7f0>
   13a9c:	str	r0, [fp, #-52]	; 0xffffffcc
   13aa0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13aa4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13aa8:	cmp	r2, r3
   13aac:	bne	13ab8 <_start@@Base+0x15f8>
   13ab0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13ab4:	b	13c18 <_start@@Base+0x1758>
   13ab8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13abc:	str	r3, [fp, #-16]
   13ac0:	ldr	r3, [fp, #-16]
   13ac4:	ldr	r4, [r3]
   13ac8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13acc:	str	r3, [fp, #-24]	; 0xffffffe8
   13ad0:	sub	r2, fp, #40	; 0x28
   13ad4:	sub	r3, fp, #44	; 0x2c
   13ad8:	str	r3, [sp, #4]
   13adc:	sub	r3, fp, #36	; 0x24
   13ae0:	str	r3, [sp]
   13ae4:	mov	r3, r2
   13ae8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13aec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13af0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13af4:	blx	r4
   13af8:	str	r0, [fp, #-52]	; 0xffffffcc
   13afc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b00:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b04:	cmp	r2, r3
   13b08:	bne	13b14 <_start@@Base+0x1654>
   13b0c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13b10:	b	13c18 <_start@@Base+0x1758>
   13b14:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b1c:	cmp	r2, r3
   13b20:	bne	13b40 <_start@@Base+0x1680>
   13b24:	ldr	r3, [fp, #-16]
   13b28:	add	r3, r3, #4
   13b2c:	str	r3, [fp, #-16]
   13b30:	ldr	r3, [fp, #-16]
   13b34:	ldr	r3, [r3]
   13b38:	cmp	r3, #0
   13b3c:	bne	13ac0 <_start@@Base+0x1600>
   13b40:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13b44:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13b48:	cmp	r2, r3
   13b4c:	bne	13b6c <_start@@Base+0x16ac>
   13b50:	mov	r3, #23
   13b54:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b58:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13b5c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b60:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13b64:	mov	r3, r0
   13b68:	b	13c18 <_start@@Base+0x1758>
   13b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b70:	add	r2, r3, #1
   13b74:	str	r2, [fp, #-20]	; 0xffffffec
   13b78:	cmp	r3, #0
   13b7c:	beq	13bac <_start@@Base+0x16ec>
   13b80:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b84:	ldr	r3, [r3, #12]
   13b88:	cmp	r3, #0
   13b8c:	beq	13bac <_start@@Base+0x16ec>
   13b90:	mov	r3, #14
   13b94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b98:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13b9c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ba0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13ba4:	mov	r3, r0
   13ba8:	b	13c18 <_start@@Base+0x1758>
   13bac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13bb0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13bb4:	sub	r1, fp, #26
   13bb8:	str	r1, [sp, #8]
   13bbc:	strd	r2, [sp]
   13bc0:	mov	r3, r0
   13bc4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bc8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13bcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13bd0:	bl	12eb0 <_start@@Base+0x9f0>
   13bd4:	mov	r2, r0
   13bd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13bdc:	cmp	r3, r2
   13be0:	bne	13bec <_start@@Base+0x172c>
   13be4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13be8:	b	13c18 <_start@@Base+0x1758>
   13bec:	ldr	r3, [fp, #4]
   13bf0:	ldrh	r2, [r3]
   13bf4:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   13bf8:	add	r3, r2, r3
   13bfc:	uxth	r2, r3
   13c00:	ldr	r3, [fp, #4]
   13c04:	strh	r2, [r3]
   13c08:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13c0c:	cmp	r3, #0
   13c10:	bne	13ab8 <_start@@Base+0x15f8>
   13c14:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13c18:	mov	r0, r3
   13c1c:	sub	sp, fp, #8
   13c20:	ldr	r4, [sp]
   13c24:	ldr	fp, [sp, #4]
   13c28:	add	sp, sp, #8
   13c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c30:	str	r4, [sp, #-12]!
   13c34:	str	fp, [sp, #4]
   13c38:	str	lr, [sp, #8]
   13c3c:	add	fp, sp, #8
   13c40:	sub	sp, sp, #68	; 0x44
   13c44:	str	r0, [fp, #-48]	; 0xffffffd0
   13c48:	str	r1, [fp, #-52]	; 0xffffffcc
   13c4c:	str	r2, [fp, #-56]	; 0xffffffc8
   13c50:	str	r3, [fp, #-60]	; 0xffffffc4
   13c54:	mov	r3, #0
   13c58:	strb	r3, [fp, #-25]	; 0xffffffe7
   13c5c:	mov	r3, #0
   13c60:	str	r3, [fp, #-20]	; 0xffffffec
   13c64:	ldr	r3, [fp, #4]
   13c68:	mov	r2, #0
   13c6c:	strb	r2, [r3]
   13c70:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c74:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13c7c:	bl	12cb0 <_start@@Base+0x7f0>
   13c80:	str	r0, [fp, #-52]	; 0xffffffcc
   13c84:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13c88:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13c8c:	cmp	r2, r3
   13c90:	bne	13c9c <_start@@Base+0x17dc>
   13c94:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13c98:	b	13dfc <_start@@Base+0x193c>
   13c9c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ca0:	str	r3, [fp, #-16]
   13ca4:	ldr	r3, [fp, #-16]
   13ca8:	ldr	r4, [r3]
   13cac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13cb0:	str	r3, [fp, #-24]	; 0xffffffe8
   13cb4:	sub	r2, fp, #40	; 0x28
   13cb8:	sub	r3, fp, #44	; 0x2c
   13cbc:	str	r3, [sp, #4]
   13cc0:	sub	r3, fp, #36	; 0x24
   13cc4:	str	r3, [sp]
   13cc8:	mov	r3, r2
   13ccc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13cd0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13cd4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13cd8:	blx	r4
   13cdc:	str	r0, [fp, #-52]	; 0xffffffcc
   13ce0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13ce4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ce8:	cmp	r2, r3
   13cec:	bne	13cf8 <_start@@Base+0x1838>
   13cf0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13cf4:	b	13dfc <_start@@Base+0x193c>
   13cf8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13cfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d00:	cmp	r2, r3
   13d04:	bne	13d24 <_start@@Base+0x1864>
   13d08:	ldr	r3, [fp, #-16]
   13d0c:	add	r3, r3, #4
   13d10:	str	r3, [fp, #-16]
   13d14:	ldr	r3, [fp, #-16]
   13d18:	ldr	r3, [r3]
   13d1c:	cmp	r3, #0
   13d20:	bne	13ca4 <_start@@Base+0x17e4>
   13d24:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13d28:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13d2c:	cmp	r2, r3
   13d30:	bne	13d50 <_start@@Base+0x1890>
   13d34:	mov	r3, #23
   13d38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d3c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13d40:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d44:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13d48:	mov	r3, r0
   13d4c:	b	13dfc <_start@@Base+0x193c>
   13d50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d54:	add	r2, r3, #1
   13d58:	str	r2, [fp, #-20]	; 0xffffffec
   13d5c:	cmp	r3, #0
   13d60:	beq	13d90 <_start@@Base+0x18d0>
   13d64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d68:	ldr	r3, [r3, #12]
   13d6c:	cmp	r3, #0
   13d70:	beq	13d90 <_start@@Base+0x18d0>
   13d74:	mov	r3, #14
   13d78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d7c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13d80:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d84:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13d88:	mov	r3, r0
   13d8c:	b	13dfc <_start@@Base+0x193c>
   13d90:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13d94:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13d98:	sub	r1, fp, #25
   13d9c:	str	r1, [sp, #8]
   13da0:	strd	r2, [sp]
   13da4:	mov	r3, r0
   13da8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13dac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13db0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13db4:	bl	12f50 <_start@@Base+0xa90>
   13db8:	mov	r2, r0
   13dbc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13dc0:	cmp	r3, r2
   13dc4:	bne	13dd0 <_start@@Base+0x1910>
   13dc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13dcc:	b	13dfc <_start@@Base+0x193c>
   13dd0:	ldr	r3, [fp, #4]
   13dd4:	ldrb	r2, [r3]
   13dd8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13ddc:	add	r3, r2, r3
   13de0:	uxtb	r2, r3
   13de4:	ldr	r3, [fp, #4]
   13de8:	strb	r2, [r3]
   13dec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13df0:	cmp	r3, #0
   13df4:	bne	13c9c <_start@@Base+0x17dc>
   13df8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13dfc:	mov	r0, r3
   13e00:	sub	sp, fp, #8
   13e04:	ldr	r4, [sp]
   13e08:	ldr	fp, [sp, #4]
   13e0c:	add	sp, sp, #8
   13e10:	pop	{pc}		; (ldr pc, [sp], #4)
   13e14:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e18:	str	r6, [sp, #8]
   13e1c:	str	fp, [sp, #12]
   13e20:	str	lr, [sp, #16]
   13e24:	add	fp, sp, #16
   13e28:	sub	sp, sp, #76	; 0x4c
   13e2c:	str	r0, [fp, #-64]	; 0xffffffc0
   13e30:	str	r1, [fp, #-68]	; 0xffffffbc
   13e34:	str	r2, [fp, #-72]	; 0xffffffb8
   13e38:	str	r3, [fp, #-76]	; 0xffffffb4
   13e3c:	mov	r2, #0
   13e40:	mov	r3, #0
   13e44:	strd	r2, [fp, #-44]	; 0xffffffd4
   13e48:	mov	r3, #0
   13e4c:	str	r3, [fp, #-28]	; 0xffffffe4
   13e50:	ldr	r1, [fp, #4]
   13e54:	mov	r2, #0
   13e58:	mov	r3, #0
   13e5c:	strd	r2, [r1]
   13e60:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13e64:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13e68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e6c:	bl	12cb0 <_start@@Base+0x7f0>
   13e70:	str	r0, [fp, #-68]	; 0xffffffbc
   13e74:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13e78:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13e7c:	cmp	r2, r3
   13e80:	bne	13e8c <_start@@Base+0x19cc>
   13e84:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13e88:	b	13fec <_start@@Base+0x1b2c>
   13e8c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13e90:	str	r3, [fp, #-24]	; 0xffffffe8
   13e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e98:	ldr	r6, [r3]
   13e9c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13ea0:	str	r3, [fp, #-32]	; 0xffffffe0
   13ea4:	sub	r2, fp, #56	; 0x38
   13ea8:	sub	r3, fp, #60	; 0x3c
   13eac:	str	r3, [sp, #4]
   13eb0:	sub	r3, fp, #52	; 0x34
   13eb4:	str	r3, [sp]
   13eb8:	mov	r3, r2
   13ebc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13ec0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13ec4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ec8:	blx	r6
   13ecc:	str	r0, [fp, #-68]	; 0xffffffbc
   13ed0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ed4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13ed8:	cmp	r2, r3
   13edc:	bne	13ee8 <_start@@Base+0x1a28>
   13ee0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13ee4:	b	13fec <_start@@Base+0x1b2c>
   13ee8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13eec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13ef0:	cmp	r2, r3
   13ef4:	bne	13f14 <_start@@Base+0x1a54>
   13ef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13efc:	add	r3, r3, #4
   13f00:	str	r3, [fp, #-24]	; 0xffffffe8
   13f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f08:	ldr	r3, [r3]
   13f0c:	cmp	r3, #0
   13f10:	bne	13e94 <_start@@Base+0x19d4>
   13f14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f18:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13f1c:	cmp	r2, r3
   13f20:	bne	13f40 <_start@@Base+0x1a80>
   13f24:	mov	r3, #23
   13f28:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13f2c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13f30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f34:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13f38:	mov	r3, r0
   13f3c:	b	13fec <_start@@Base+0x1b2c>
   13f40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f44:	add	r2, r3, #1
   13f48:	str	r2, [fp, #-28]	; 0xffffffe4
   13f4c:	cmp	r3, #0
   13f50:	beq	13f80 <_start@@Base+0x1ac0>
   13f54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f58:	ldr	r3, [r3, #12]
   13f5c:	cmp	r3, #0
   13f60:	beq	13f80 <_start@@Base+0x1ac0>
   13f64:	mov	r3, #14
   13f68:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13f6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13f70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f74:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   13f78:	mov	r3, r0
   13f7c:	b	13fec <_start@@Base+0x1b2c>
   13f80:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f84:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13f88:	sub	r1, fp, #44	; 0x2c
   13f8c:	str	r1, [sp, #8]
   13f90:	strd	r2, [sp]
   13f94:	mov	r3, r0
   13f98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13f9c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13fa0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fa4:	bl	12fe8 <_start@@Base+0xb28>
   13fa8:	mov	r2, r0
   13fac:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13fb0:	cmp	r3, r2
   13fb4:	bne	13fc0 <_start@@Base+0x1b00>
   13fb8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13fbc:	b	13fec <_start@@Base+0x1b2c>
   13fc0:	ldr	r3, [fp, #4]
   13fc4:	ldrd	r0, [r3]
   13fc8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13fcc:	adds	r4, r0, r2
   13fd0:	adc	r5, r1, r3
   13fd4:	ldr	r3, [fp, #4]
   13fd8:	strd	r4, [r3]
   13fdc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13fe0:	cmp	r3, #0
   13fe4:	bne	13e8c <_start@@Base+0x19cc>
   13fe8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13fec:	mov	r0, r3
   13ff0:	sub	sp, fp, #16
   13ff4:	ldrd	r4, [sp]
   13ff8:	ldr	r6, [sp, #8]
   13ffc:	ldr	fp, [sp, #12]
   14000:	add	sp, sp, #16
   14004:	pop	{pc}		; (ldr pc, [sp], #4)
   14008:	str	r4, [sp, #-12]!
   1400c:	str	fp, [sp, #4]
   14010:	str	lr, [sp, #8]
   14014:	add	fp, sp, #8
   14018:	sub	sp, sp, #68	; 0x44
   1401c:	str	r0, [fp, #-48]	; 0xffffffd0
   14020:	str	r1, [fp, #-52]	; 0xffffffcc
   14024:	str	r2, [fp, #-56]	; 0xffffffc8
   14028:	str	r3, [fp, #-60]	; 0xffffffc4
   1402c:	mov	r3, #0
   14030:	str	r3, [fp, #-28]	; 0xffffffe4
   14034:	mov	r3, #0
   14038:	str	r3, [fp, #-20]	; 0xffffffec
   1403c:	ldr	r3, [fp, #4]
   14040:	mov	r2, #0
   14044:	str	r2, [r3]
   14048:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1404c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14050:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14054:	bl	12cb0 <_start@@Base+0x7f0>
   14058:	str	r0, [fp, #-52]	; 0xffffffcc
   1405c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14060:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14064:	cmp	r2, r3
   14068:	bne	14074 <_start@@Base+0x1bb4>
   1406c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14070:	b	141d0 <_start@@Base+0x1d10>
   14074:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14078:	str	r3, [fp, #-16]
   1407c:	ldr	r3, [fp, #-16]
   14080:	ldr	r4, [r3]
   14084:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14088:	str	r3, [fp, #-24]	; 0xffffffe8
   1408c:	sub	r2, fp, #40	; 0x28
   14090:	sub	r3, fp, #44	; 0x2c
   14094:	str	r3, [sp, #4]
   14098:	sub	r3, fp, #36	; 0x24
   1409c:	str	r3, [sp]
   140a0:	mov	r3, r2
   140a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   140ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   140b0:	blx	r4
   140b4:	str	r0, [fp, #-52]	; 0xffffffcc
   140b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   140bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140c0:	cmp	r2, r3
   140c4:	bne	140d0 <_start@@Base+0x1c10>
   140c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   140cc:	b	141d0 <_start@@Base+0x1d10>
   140d0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   140d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140d8:	cmp	r2, r3
   140dc:	bne	140fc <_start@@Base+0x1c3c>
   140e0:	ldr	r3, [fp, #-16]
   140e4:	add	r3, r3, #4
   140e8:	str	r3, [fp, #-16]
   140ec:	ldr	r3, [fp, #-16]
   140f0:	ldr	r3, [r3]
   140f4:	cmp	r3, #0
   140f8:	bne	1407c <_start@@Base+0x1bbc>
   140fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14100:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14104:	cmp	r2, r3
   14108:	bne	14128 <_start@@Base+0x1c68>
   1410c:	mov	r3, #23
   14110:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14114:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14118:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1411c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14120:	mov	r3, r0
   14124:	b	141d0 <_start@@Base+0x1d10>
   14128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1412c:	add	r2, r3, #1
   14130:	str	r2, [fp, #-20]	; 0xffffffec
   14134:	cmp	r3, #0
   14138:	beq	14168 <_start@@Base+0x1ca8>
   1413c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14140:	ldr	r3, [r3, #12]
   14144:	cmp	r3, #0
   14148:	beq	14168 <_start@@Base+0x1ca8>
   1414c:	mov	r3, #14
   14150:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14154:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14158:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1415c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14160:	mov	r3, r0
   14164:	b	141d0 <_start@@Base+0x1d10>
   14168:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1416c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14170:	sub	r1, fp, #28
   14174:	str	r1, [sp, #8]
   14178:	strd	r2, [sp]
   1417c:	mov	r3, r0
   14180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14184:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14188:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1418c:	bl	130a8 <_start@@Base+0xbe8>
   14190:	mov	r2, r0
   14194:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14198:	cmp	r3, r2
   1419c:	bne	141a8 <_start@@Base+0x1ce8>
   141a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   141a4:	b	141d0 <_start@@Base+0x1d10>
   141a8:	ldr	r3, [fp, #4]
   141ac:	ldr	r2, [r3]
   141b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   141b4:	add	r2, r2, r3
   141b8:	ldr	r3, [fp, #4]
   141bc:	str	r2, [r3]
   141c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   141c4:	cmp	r3, #0
   141c8:	bne	14074 <_start@@Base+0x1bb4>
   141cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   141d0:	mov	r0, r3
   141d4:	sub	sp, fp, #8
   141d8:	ldr	r4, [sp]
   141dc:	ldr	fp, [sp, #4]
   141e0:	add	sp, sp, #8
   141e4:	pop	{pc}		; (ldr pc, [sp], #4)
   141e8:	str	r4, [sp, #-12]!
   141ec:	str	fp, [sp, #4]
   141f0:	str	lr, [sp, #8]
   141f4:	add	fp, sp, #8
   141f8:	sub	sp, sp, #68	; 0x44
   141fc:	str	r0, [fp, #-48]	; 0xffffffd0
   14200:	str	r1, [fp, #-52]	; 0xffffffcc
   14204:	str	r2, [fp, #-56]	; 0xffffffc8
   14208:	str	r3, [fp, #-60]	; 0xffffffc4
   1420c:	mov	r3, #0
   14210:	strh	r3, [fp, #-26]	; 0xffffffe6
   14214:	mov	r3, #0
   14218:	str	r3, [fp, #-20]	; 0xffffffec
   1421c:	ldr	r3, [fp, #4]
   14220:	mov	r2, #0
   14224:	strh	r2, [r3]
   14228:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1422c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14230:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14234:	bl	12cb0 <_start@@Base+0x7f0>
   14238:	str	r0, [fp, #-52]	; 0xffffffcc
   1423c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14240:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14244:	cmp	r2, r3
   14248:	bne	14254 <_start@@Base+0x1d94>
   1424c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14250:	b	143c0 <_start@@Base+0x1f00>
   14254:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14258:	str	r3, [fp, #-16]
   1425c:	ldr	r3, [fp, #-16]
   14260:	ldr	r4, [r3]
   14264:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14268:	str	r3, [fp, #-24]	; 0xffffffe8
   1426c:	sub	r2, fp, #40	; 0x28
   14270:	sub	r3, fp, #44	; 0x2c
   14274:	str	r3, [sp, #4]
   14278:	sub	r3, fp, #36	; 0x24
   1427c:	str	r3, [sp]
   14280:	mov	r3, r2
   14284:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14288:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1428c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14290:	blx	r4
   14294:	str	r0, [fp, #-52]	; 0xffffffcc
   14298:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1429c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   142a0:	cmp	r2, r3
   142a4:	bne	142b0 <_start@@Base+0x1df0>
   142a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   142ac:	b	143c0 <_start@@Base+0x1f00>
   142b0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   142b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   142b8:	cmp	r2, r3
   142bc:	bne	142dc <_start@@Base+0x1e1c>
   142c0:	ldr	r3, [fp, #-16]
   142c4:	add	r3, r3, #4
   142c8:	str	r3, [fp, #-16]
   142cc:	ldr	r3, [fp, #-16]
   142d0:	ldr	r3, [r3]
   142d4:	cmp	r3, #0
   142d8:	bne	1425c <_start@@Base+0x1d9c>
   142dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   142e0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   142e4:	cmp	r2, r3
   142e8:	bne	14308 <_start@@Base+0x1e48>
   142ec:	mov	r3, #23
   142f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   142f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   142f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   142fc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14300:	mov	r3, r0
   14304:	b	143c0 <_start@@Base+0x1f00>
   14308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1430c:	add	r2, r3, #1
   14310:	str	r2, [fp, #-20]	; 0xffffffec
   14314:	cmp	r3, #0
   14318:	beq	14348 <_start@@Base+0x1e88>
   1431c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14320:	ldr	r3, [r3, #12]
   14324:	cmp	r3, #0
   14328:	beq	14348 <_start@@Base+0x1e88>
   1432c:	mov	r3, #14
   14330:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14334:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14338:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1433c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14340:	mov	r3, r0
   14344:	b	143c0 <_start@@Base+0x1f00>
   14348:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1434c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14350:	sub	r1, fp, #26
   14354:	str	r1, [sp, #8]
   14358:	strd	r2, [sp]
   1435c:	mov	r3, r0
   14360:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14364:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14368:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1436c:	bl	13170 <_start@@Base+0xcb0>
   14370:	mov	r2, r0
   14374:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14378:	cmp	r3, r2
   1437c:	bne	14388 <_start@@Base+0x1ec8>
   14380:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14384:	b	143c0 <_start@@Base+0x1f00>
   14388:	ldr	r3, [fp, #4]
   1438c:	ldrsh	r3, [r3]
   14390:	uxth	r2, r3
   14394:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   14398:	uxth	r3, r3
   1439c:	add	r3, r2, r3
   143a0:	uxth	r3, r3
   143a4:	sxth	r2, r3
   143a8:	ldr	r3, [fp, #4]
   143ac:	strh	r2, [r3]
   143b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   143b4:	cmp	r3, #0
   143b8:	bne	14254 <_start@@Base+0x1d94>
   143bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   143c0:	mov	r0, r3
   143c4:	sub	sp, fp, #8
   143c8:	ldr	r4, [sp]
   143cc:	ldr	fp, [sp, #4]
   143d0:	add	sp, sp, #8
   143d4:	pop	{pc}		; (ldr pc, [sp], #4)
   143d8:	str	r4, [sp, #-12]!
   143dc:	str	fp, [sp, #4]
   143e0:	str	lr, [sp, #8]
   143e4:	add	fp, sp, #8
   143e8:	sub	sp, sp, #68	; 0x44
   143ec:	str	r0, [fp, #-48]	; 0xffffffd0
   143f0:	str	r1, [fp, #-52]	; 0xffffffcc
   143f4:	str	r2, [fp, #-56]	; 0xffffffc8
   143f8:	str	r3, [fp, #-60]	; 0xffffffc4
   143fc:	mov	r3, #0
   14400:	strb	r3, [fp, #-25]	; 0xffffffe7
   14404:	mov	r3, #0
   14408:	str	r3, [fp, #-20]	; 0xffffffec
   1440c:	ldr	r3, [fp, #4]
   14410:	mov	r2, #0
   14414:	strb	r2, [r3]
   14418:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1441c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14420:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14424:	bl	12cb0 <_start@@Base+0x7f0>
   14428:	str	r0, [fp, #-52]	; 0xffffffcc
   1442c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14430:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14434:	cmp	r2, r3
   14438:	bne	14444 <_start@@Base+0x1f84>
   1443c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14440:	b	145b0 <_start@@Base+0x20f0>
   14444:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14448:	str	r3, [fp, #-16]
   1444c:	ldr	r3, [fp, #-16]
   14450:	ldr	r4, [r3]
   14454:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14458:	str	r3, [fp, #-24]	; 0xffffffe8
   1445c:	sub	r2, fp, #40	; 0x28
   14460:	sub	r3, fp, #44	; 0x2c
   14464:	str	r3, [sp, #4]
   14468:	sub	r3, fp, #36	; 0x24
   1446c:	str	r3, [sp]
   14470:	mov	r3, r2
   14474:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14478:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1447c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14480:	blx	r4
   14484:	str	r0, [fp, #-52]	; 0xffffffcc
   14488:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1448c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14490:	cmp	r2, r3
   14494:	bne	144a0 <_start@@Base+0x1fe0>
   14498:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1449c:	b	145b0 <_start@@Base+0x20f0>
   144a0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   144a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144a8:	cmp	r2, r3
   144ac:	bne	144cc <_start@@Base+0x200c>
   144b0:	ldr	r3, [fp, #-16]
   144b4:	add	r3, r3, #4
   144b8:	str	r3, [fp, #-16]
   144bc:	ldr	r3, [fp, #-16]
   144c0:	ldr	r3, [r3]
   144c4:	cmp	r3, #0
   144c8:	bne	1444c <_start@@Base+0x1f8c>
   144cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   144d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   144d4:	cmp	r2, r3
   144d8:	bne	144f8 <_start@@Base+0x2038>
   144dc:	mov	r3, #23
   144e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   144e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   144e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   144ec:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   144f0:	mov	r3, r0
   144f4:	b	145b0 <_start@@Base+0x20f0>
   144f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144fc:	add	r2, r3, #1
   14500:	str	r2, [fp, #-20]	; 0xffffffec
   14504:	cmp	r3, #0
   14508:	beq	14538 <_start@@Base+0x2078>
   1450c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14510:	ldr	r3, [r3, #12]
   14514:	cmp	r3, #0
   14518:	beq	14538 <_start@@Base+0x2078>
   1451c:	mov	r3, #14
   14520:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14524:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14528:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1452c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14530:	mov	r3, r0
   14534:	b	145b0 <_start@@Base+0x20f0>
   14538:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1453c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14540:	sub	r1, fp, #25
   14544:	str	r1, [sp, #8]
   14548:	strd	r2, [sp]
   1454c:	mov	r3, r0
   14550:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14554:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14558:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1455c:	bl	1323c <_start@@Base+0xd7c>
   14560:	mov	r2, r0
   14564:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14568:	cmp	r3, r2
   1456c:	bne	14578 <_start@@Base+0x20b8>
   14570:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14574:	b	145b0 <_start@@Base+0x20f0>
   14578:	ldr	r3, [fp, #4]
   1457c:	ldrsb	r3, [r3]
   14580:	uxtb	r2, r3
   14584:	ldrsb	r3, [fp, #-25]	; 0xffffffe7
   14588:	uxtb	r3, r3
   1458c:	add	r3, r2, r3
   14590:	uxtb	r3, r3
   14594:	sxtb	r2, r3
   14598:	ldr	r3, [fp, #4]
   1459c:	strb	r2, [r3]
   145a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   145a4:	cmp	r3, #0
   145a8:	bne	14444 <_start@@Base+0x1f84>
   145ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   145b0:	mov	r0, r3
   145b4:	sub	sp, fp, #8
   145b8:	ldr	r4, [sp]
   145bc:	ldr	fp, [sp, #4]
   145c0:	add	sp, sp, #8
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	str	r4, [sp, #-12]!
   145cc:	str	fp, [sp, #4]
   145d0:	str	lr, [sp, #8]
   145d4:	add	fp, sp, #8
   145d8:	sub	sp, sp, #68	; 0x44
   145dc:	str	r0, [fp, #-48]	; 0xffffffd0
   145e0:	str	r1, [fp, #-52]	; 0xffffffcc
   145e4:	str	r2, [fp, #-56]	; 0xffffffc8
   145e8:	str	r3, [fp, #-60]	; 0xffffffc4
   145ec:	mov	r3, #0
   145f0:	strb	r3, [fp, #-25]	; 0xffffffe7
   145f4:	mov	r3, #0
   145f8:	str	r3, [fp, #-20]	; 0xffffffec
   145fc:	ldr	r3, [fp, #4]
   14600:	mov	r2, #0
   14604:	strb	r2, [r3]
   14608:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1460c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14610:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14614:	bl	12cb0 <_start@@Base+0x7f0>
   14618:	str	r0, [fp, #-52]	; 0xffffffcc
   1461c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14620:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14624:	cmp	r2, r3
   14628:	bne	14634 <_start@@Base+0x2174>
   1462c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14630:	b	14794 <_start@@Base+0x22d4>
   14634:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14638:	str	r3, [fp, #-16]
   1463c:	ldr	r3, [fp, #-16]
   14640:	ldr	r4, [r3]
   14644:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14648:	str	r3, [fp, #-24]	; 0xffffffe8
   1464c:	sub	r2, fp, #40	; 0x28
   14650:	sub	r3, fp, #44	; 0x2c
   14654:	str	r3, [sp, #4]
   14658:	sub	r3, fp, #36	; 0x24
   1465c:	str	r3, [sp]
   14660:	mov	r3, r2
   14664:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14668:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1466c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14670:	blx	r4
   14674:	str	r0, [fp, #-52]	; 0xffffffcc
   14678:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1467c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14680:	cmp	r2, r3
   14684:	bne	14690 <_start@@Base+0x21d0>
   14688:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1468c:	b	14794 <_start@@Base+0x22d4>
   14690:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14698:	cmp	r2, r3
   1469c:	bne	146bc <_start@@Base+0x21fc>
   146a0:	ldr	r3, [fp, #-16]
   146a4:	add	r3, r3, #4
   146a8:	str	r3, [fp, #-16]
   146ac:	ldr	r3, [fp, #-16]
   146b0:	ldr	r3, [r3]
   146b4:	cmp	r3, #0
   146b8:	bne	1463c <_start@@Base+0x217c>
   146bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   146c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   146c4:	cmp	r2, r3
   146c8:	bne	146e8 <_start@@Base+0x2228>
   146cc:	mov	r3, #23
   146d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   146d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   146d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   146dc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   146e0:	mov	r3, r0
   146e4:	b	14794 <_start@@Base+0x22d4>
   146e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146ec:	add	r2, r3, #1
   146f0:	str	r2, [fp, #-20]	; 0xffffffec
   146f4:	cmp	r3, #0
   146f8:	beq	14728 <_start@@Base+0x2268>
   146fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14700:	ldr	r3, [r3, #12]
   14704:	cmp	r3, #0
   14708:	beq	14728 <_start@@Base+0x2268>
   1470c:	mov	r3, #14
   14710:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14714:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14718:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1471c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14720:	mov	r3, r0
   14724:	b	14794 <_start@@Base+0x22d4>
   14728:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1472c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14730:	sub	r1, fp, #25
   14734:	str	r1, [sp, #8]
   14738:	strd	r2, [sp]
   1473c:	mov	r3, r0
   14740:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14744:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14748:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1474c:	bl	12d88 <_start@@Base+0x8c8>
   14750:	mov	r2, r0
   14754:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14758:	cmp	r3, r2
   1475c:	bne	14768 <_start@@Base+0x22a8>
   14760:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14764:	b	14794 <_start@@Base+0x22d4>
   14768:	ldr	r3, [fp, #4]
   1476c:	ldrb	r2, [r3]
   14770:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14774:	add	r3, r2, r3
   14778:	uxtb	r2, r3
   1477c:	ldr	r3, [fp, #4]
   14780:	strb	r2, [r3]
   14784:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14788:	cmp	r3, #0
   1478c:	bne	14634 <_start@@Base+0x2174>
   14790:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14794:	mov	r0, r3
   14798:	sub	sp, fp, #8
   1479c:	ldr	r4, [sp]
   147a0:	ldr	fp, [sp, #4]
   147a4:	add	sp, sp, #8
   147a8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ac:	str	r4, [sp, #-12]!
   147b0:	str	fp, [sp, #4]
   147b4:	str	lr, [sp, #8]
   147b8:	add	fp, sp, #8
   147bc:	sub	sp, sp, #68	; 0x44
   147c0:	str	r0, [fp, #-48]	; 0xffffffd0
   147c4:	str	r1, [fp, #-52]	; 0xffffffcc
   147c8:	str	r2, [fp, #-56]	; 0xffffffc8
   147cc:	str	r3, [fp, #-60]	; 0xffffffc4
   147d0:	mov	r3, #0
   147d4:	str	r3, [fp, #-28]	; 0xffffffe4
   147d8:	mov	r3, #0
   147dc:	str	r3, [fp, #-20]	; 0xffffffec
   147e0:	ldr	r3, [fp, #4]
   147e4:	mov	r2, #0
   147e8:	str	r2, [r3]
   147ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   147f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   147f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   147f8:	bl	12cb0 <_start@@Base+0x7f0>
   147fc:	str	r0, [fp, #-52]	; 0xffffffcc
   14800:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14804:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14808:	cmp	r2, r3
   1480c:	bne	14818 <_start@@Base+0x2358>
   14810:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14814:	b	14974 <_start@@Base+0x24b4>
   14818:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1481c:	str	r3, [fp, #-16]
   14820:	ldr	r3, [fp, #-16]
   14824:	ldr	r4, [r3]
   14828:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1482c:	str	r3, [fp, #-24]	; 0xffffffe8
   14830:	sub	r2, fp, #40	; 0x28
   14834:	sub	r3, fp, #44	; 0x2c
   14838:	str	r3, [sp, #4]
   1483c:	sub	r3, fp, #36	; 0x24
   14840:	str	r3, [sp]
   14844:	mov	r3, r2
   14848:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1484c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14850:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14854:	blx	r4
   14858:	str	r0, [fp, #-52]	; 0xffffffcc
   1485c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14860:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14864:	cmp	r2, r3
   14868:	bne	14874 <_start@@Base+0x23b4>
   1486c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14870:	b	14974 <_start@@Base+0x24b4>
   14874:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14878:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1487c:	cmp	r2, r3
   14880:	bne	148a0 <_start@@Base+0x23e0>
   14884:	ldr	r3, [fp, #-16]
   14888:	add	r3, r3, #4
   1488c:	str	r3, [fp, #-16]
   14890:	ldr	r3, [fp, #-16]
   14894:	ldr	r3, [r3]
   14898:	cmp	r3, #0
   1489c:	bne	14820 <_start@@Base+0x2360>
   148a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   148a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   148a8:	cmp	r2, r3
   148ac:	bne	148cc <_start@@Base+0x240c>
   148b0:	mov	r3, #23
   148b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   148b8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   148bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   148c0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   148c4:	mov	r3, r0
   148c8:	b	14974 <_start@@Base+0x24b4>
   148cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   148d0:	add	r2, r3, #1
   148d4:	str	r2, [fp, #-20]	; 0xffffffec
   148d8:	cmp	r3, #0
   148dc:	beq	1490c <_start@@Base+0x244c>
   148e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148e4:	ldr	r3, [r3, #12]
   148e8:	cmp	r3, #0
   148ec:	beq	1490c <_start@@Base+0x244c>
   148f0:	mov	r3, #14
   148f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   148f8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   148fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14900:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14904:	mov	r3, r0
   14908:	b	14974 <_start@@Base+0x24b4>
   1490c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14910:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14914:	sub	r1, fp, #28
   14918:	str	r1, [sp, #8]
   1491c:	strd	r2, [sp]
   14920:	mov	r3, r0
   14924:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14928:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1492c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14930:	bl	13300 <_start@@Base+0xe40>
   14934:	mov	r2, r0
   14938:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1493c:	cmp	r3, r2
   14940:	bne	1494c <_start@@Base+0x248c>
   14944:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14948:	b	14974 <_start@@Base+0x24b4>
   1494c:	ldr	r3, [fp, #4]
   14950:	vldr	s14, [r3]
   14954:	vldr	s15, [fp, #-28]	; 0xffffffe4
   14958:	vadd.f32	s15, s14, s15
   1495c:	ldr	r3, [fp, #4]
   14960:	vstr	s15, [r3]
   14964:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14968:	cmp	r3, #0
   1496c:	bne	14818 <_start@@Base+0x2358>
   14970:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14974:	mov	r0, r3
   14978:	sub	sp, fp, #8
   1497c:	ldr	r4, [sp]
   14980:	ldr	fp, [sp, #4]
   14984:	add	sp, sp, #8
   14988:	pop	{pc}		; (ldr pc, [sp], #4)
   1498c:	str	r4, [sp, #-12]!
   14990:	str	fp, [sp, #4]
   14994:	str	lr, [sp, #8]
   14998:	add	fp, sp, #8
   1499c:	sub	sp, sp, #76	; 0x4c
   149a0:	str	r0, [fp, #-56]	; 0xffffffc8
   149a4:	str	r1, [fp, #-60]	; 0xffffffc4
   149a8:	str	r2, [fp, #-64]	; 0xffffffc0
   149ac:	str	r3, [fp, #-68]	; 0xffffffbc
   149b0:	mov	r2, #0
   149b4:	mov	r3, #0
   149b8:	strd	r2, [fp, #-36]	; 0xffffffdc
   149bc:	mov	r3, #0
   149c0:	str	r3, [fp, #-20]	; 0xffffffec
   149c4:	ldr	r1, [fp, #4]
   149c8:	mov	r2, #0
   149cc:	mov	r3, #0
   149d0:	strd	r2, [r1]
   149d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   149d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   149dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   149e0:	bl	12cb0 <_start@@Base+0x7f0>
   149e4:	str	r0, [fp, #-60]	; 0xffffffc4
   149e8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   149ec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   149f0:	cmp	r2, r3
   149f4:	bne	14a00 <_start@@Base+0x2540>
   149f8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   149fc:	b	14b5c <_start@@Base+0x269c>
   14a00:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14a04:	str	r3, [fp, #-16]
   14a08:	ldr	r3, [fp, #-16]
   14a0c:	ldr	r4, [r3]
   14a10:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14a14:	str	r3, [fp, #-24]	; 0xffffffe8
   14a18:	sub	r2, fp, #48	; 0x30
   14a1c:	sub	r3, fp, #52	; 0x34
   14a20:	str	r3, [sp, #4]
   14a24:	sub	r3, fp, #44	; 0x2c
   14a28:	str	r3, [sp]
   14a2c:	mov	r3, r2
   14a30:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14a34:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14a38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a3c:	blx	r4
   14a40:	str	r0, [fp, #-60]	; 0xffffffc4
   14a44:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14a48:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14a4c:	cmp	r2, r3
   14a50:	bne	14a5c <_start@@Base+0x259c>
   14a54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14a58:	b	14b5c <_start@@Base+0x269c>
   14a5c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14a60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a64:	cmp	r2, r3
   14a68:	bne	14a88 <_start@@Base+0x25c8>
   14a6c:	ldr	r3, [fp, #-16]
   14a70:	add	r3, r3, #4
   14a74:	str	r3, [fp, #-16]
   14a78:	ldr	r3, [fp, #-16]
   14a7c:	ldr	r3, [r3]
   14a80:	cmp	r3, #0
   14a84:	bne	14a08 <_start@@Base+0x2548>
   14a88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14a8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14a90:	cmp	r2, r3
   14a94:	bne	14ab4 <_start@@Base+0x25f4>
   14a98:	mov	r3, #23
   14a9c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14aa0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14aa4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14aa8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14aac:	mov	r3, r0
   14ab0:	b	14b5c <_start@@Base+0x269c>
   14ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ab8:	add	r2, r3, #1
   14abc:	str	r2, [fp, #-20]	; 0xffffffec
   14ac0:	cmp	r3, #0
   14ac4:	beq	14af4 <_start@@Base+0x2634>
   14ac8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14acc:	ldr	r3, [r3, #12]
   14ad0:	cmp	r3, #0
   14ad4:	beq	14af4 <_start@@Base+0x2634>
   14ad8:	mov	r3, #14
   14adc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14ae0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14ae4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14ae8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14aec:	mov	r3, r0
   14af0:	b	14b5c <_start@@Base+0x269c>
   14af4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14af8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   14afc:	sub	r1, fp, #36	; 0x24
   14b00:	str	r1, [sp, #8]
   14b04:	strd	r2, [sp]
   14b08:	mov	r3, r0
   14b0c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14b10:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14b14:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14b18:	bl	1336c <_start@@Base+0xeac>
   14b1c:	mov	r2, r0
   14b20:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14b24:	cmp	r3, r2
   14b28:	bne	14b34 <_start@@Base+0x2674>
   14b2c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14b30:	b	14b5c <_start@@Base+0x269c>
   14b34:	ldr	r3, [fp, #4]
   14b38:	vldr	d6, [r3]
   14b3c:	vldr	d7, [fp, #-36]	; 0xffffffdc
   14b40:	vadd.f64	d7, d6, d7
   14b44:	ldr	r3, [fp, #4]
   14b48:	vstr	d7, [r3]
   14b4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14b50:	cmp	r3, #0
   14b54:	bne	14a00 <_start@@Base+0x2540>
   14b58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14b5c:	mov	r0, r3
   14b60:	sub	sp, fp, #8
   14b64:	ldr	r4, [sp]
   14b68:	ldr	fp, [sp, #4]
   14b6c:	add	sp, sp, #8
   14b70:	pop	{pc}		; (ldr pc, [sp], #4)

00014b74 <test@@Base>:
   14b74:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14b78:	str	r6, [sp, #8]
   14b7c:	strd	r8, [sp, #12]
   14b80:	str	fp, [sp, #20]
   14b84:	str	lr, [sp, #24]
   14b88:	add	fp, sp, #24
   14b8c:	sub	sp, sp, #556	; 0x22c
   14b90:	str	r0, [fp, #-120]	; 0xffffff88
   14b94:	str	r1, [fp, #-124]	; 0xffffff84
   14b98:	str	r2, [fp, #-128]	; 0xffffff80
   14b9c:	str	r3, [fp, #-132]	; 0xffffff7c
   14ba0:	ldr	r6, [pc, #4080]	; 15b98 <test@@Base+0x1024>
   14ba4:	add	r6, pc, r6
   14ba8:	mov	r3, #0
   14bac:	str	r3, [fp, #-36]	; 0xffffffdc
   14bb0:	sub	r3, fp, #112	; 0x70
   14bb4:	str	r3, [fp, #-40]	; 0xffffffd8
   14bb8:	mov	r2, #44	; 0x2c
   14bbc:	mov	r1, #0
   14bc0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14bc4:	bl	12480 <memset@plt>
   14bc8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14bcc:	mov	r3, #1
   14bd0:	str	r3, [r2, #16]
   14bd4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14bd8:	ldr	r3, [fp, #-124]	; 0xffffff84
   14bdc:	str	r3, [r2, #4]
   14be0:	mov	r3, #0
   14be4:	mov	r2, #0
   14be8:	ldr	r1, [pc, #4012]	; 15b9c <test@@Base+0x1028>
   14bec:	add	r1, pc, r1
   14bf0:	ldr	r0, [fp, #-120]	; 0xffffff88
   14bf4:	bl	18a18 <flatcc_builder_start_buffer@@Base>
   14bf8:	ldr	r2, [fp, #-128]	; 0xffffff80
   14bfc:	ldr	r1, [fp, #-124]	; 0xffffff84
   14c00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14c04:	bl	125b0 <_start@@Base+0xf0>
   14c08:	str	r0, [fp, #-124]	; 0xffffff84
   14c0c:	ldr	r2, [fp, #-124]	; 0xffffff84
   14c10:	ldr	r3, [fp, #-128]	; 0xffffff80
   14c14:	cmp	r2, r3
   14c18:	bne	14c40 <test@@Base+0xcc>
   14c1c:	ldr	r3, [pc, #4056]	; 15bfc <test@@Base+0x1088>
   14c20:	ldr	r3, [r6, r3]
   14c24:	ldr	r3, [r3]
   14c28:	mov	r2, #13
   14c2c:	mov	r1, #1
   14c30:	ldr	r0, [pc, #3944]	; 15ba0 <test@@Base+0x102c>
   14c34:	add	r0, pc, r0
   14c38:	bl	1242c <fwrite@plt>
   14c3c:	b	164c8 <test@@Base+0x1954>
   14c40:	ldr	r2, [fp, #-128]	; 0xffffff80
   14c44:	ldr	r3, [fp, #-124]	; 0xffffff84
   14c48:	cmp	r2, r3
   14c4c:	bls	14c94 <test@@Base+0x120>
   14c50:	ldr	r3, [fp, #-124]	; 0xffffff84
   14c54:	ldrb	r3, [r3]
   14c58:	cmp	r3, #123	; 0x7b
   14c5c:	bne	14c94 <test@@Base+0x120>
   14c60:	ldr	r3, [fp, #-124]	; 0xffffff84
   14c64:	add	r3, r3, #1
   14c68:	str	r3, [fp, #-124]	; 0xffffff84
   14c6c:	ldr	r2, [fp, #-128]	; 0xffffff80
   14c70:	ldr	r1, [fp, #-124]	; 0xffffff84
   14c74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14c78:	bl	125b0 <_start@@Base+0xf0>
   14c7c:	str	r0, [fp, #-124]	; 0xffffff84
   14c80:	ldr	r2, [fp, #-124]	; 0xffffff84
   14c84:	ldr	r3, [fp, #-128]	; 0xffffff80
   14c88:	cmp	r2, r3
   14c8c:	beq	14cd0 <test@@Base+0x15c>
   14c90:	b	14cf4 <test@@Base+0x180>
   14c94:	ldr	r3, [pc, #3936]	; 15bfc <test@@Base+0x1088>
   14c98:	ldr	r3, [r6, r3]
   14c9c:	ldr	r3, [r3]
   14ca0:	mov	r2, #123	; 0x7b
   14ca4:	ldr	r1, [pc, #3832]	; 15ba4 <test@@Base+0x1030>
   14ca8:	add	r1, pc, r1
   14cac:	mov	r0, r3
   14cb0:	bl	12468 <fprintf@plt>
   14cb4:	mov	r3, #17
   14cb8:	ldr	r2, [fp, #-128]	; 0xffffff80
   14cbc:	ldr	r1, [fp, #-124]	; 0xffffff84
   14cc0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14cc4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14cc8:	str	r0, [fp, #-124]	; 0xffffff84
   14ccc:	b	164c8 <test@@Base+0x1954>
   14cd0:	ldr	r3, [pc, #3876]	; 15bfc <test@@Base+0x1088>
   14cd4:	ldr	r3, [r6, r3]
   14cd8:	ldr	r3, [r3]
   14cdc:	mov	r2, #13
   14ce0:	mov	r1, #1
   14ce4:	ldr	r0, [pc, #3772]	; 15ba8 <test@@Base+0x1034>
   14ce8:	add	r0, pc, r0
   14cec:	bl	1242c <fwrite@plt>
   14cf0:	b	164c8 <test@@Base+0x1954>
   14cf4:	mov	r1, #11
   14cf8:	ldr	r0, [fp, #-120]	; 0xffffff88
   14cfc:	bl	19b50 <flatcc_builder_start_table@@Base>
   14d00:	ldr	r2, [fp, #-128]	; 0xffffff80
   14d04:	ldr	r1, [fp, #-124]	; 0xffffff84
   14d08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14d0c:	bl	12748 <_start@@Base+0x288>
   14d10:	str	r0, [fp, #-124]	; 0xffffff84
   14d14:	ldr	r1, [fp, #-128]	; 0xffffff80
   14d18:	ldr	r0, [fp, #-124]	; 0xffffff84
   14d1c:	bl	12a7c <_start@@Base+0x5bc>
   14d20:	strd	r0, [fp, #-52]	; 0xffffffcc
   14d24:	ldr	r2, [fp, #-128]	; 0xffffff80
   14d28:	ldr	r3, [fp, #-124]	; 0xffffff84
   14d2c:	sub	r3, r2, r3
   14d30:	cmp	r3, #8
   14d34:	ble	14d44 <test@@Base+0x1d0>
   14d38:	ldr	r3, [fp, #-124]	; 0xffffff84
   14d3c:	add	r3, r3, #8
   14d40:	b	14d48 <test@@Base+0x1d4>
   14d44:	ldr	r3, [fp, #-128]	; 0xffffff80
   14d48:	str	r3, [fp, #-56]	; 0xffffffc8
   14d4c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   14d50:	mov	r2, #0
   14d54:	movt	r2, #65535	; 0xffff
   14d58:	mvn	r3, #0
   14d5c:	and	ip, r0, r2
   14d60:	str	ip, [fp, #-140]	; 0xffffff74
   14d64:	and	r3, r1, r3
   14d68:	str	r3, [fp, #-136]	; 0xffffff78
   14d6c:	mov	r3, #115	; 0x73
   14d70:	uxtb	r2, r3
   14d74:	mov	r3, #0
   14d78:	mov	r4, #0
   14d7c:	mov	r5, #0
   14d80:	lsl	r5, r2, #24
   14d84:	mov	r4, #0
   14d88:	mov	r3, #101	; 0x65
   14d8c:	uxtb	r2, r3
   14d90:	mov	r3, #0
   14d94:	mov	r0, #0
   14d98:	mov	r1, #0
   14d9c:	lsl	r1, r2, #16
   14da0:	mov	r0, #0
   14da4:	orr	r3, r4, r0
   14da8:	str	r3, [fp, #-148]	; 0xffffff6c
   14dac:	orr	r3, r5, r1
   14db0:	str	r3, [fp, #-144]	; 0xffffff70
   14db4:	mov	r3, #99	; 0x63
   14db8:	uxtb	r2, r3
   14dbc:	mov	r3, #0
   14dc0:	mov	r0, #0
   14dc4:	mov	r1, #0
   14dc8:	lsl	r1, r2, #8
   14dcc:	mov	r0, #0
   14dd0:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   14dd4:	mov	ip, r2
   14dd8:	orr	ip, ip, r0
   14ddc:	str	ip, [fp, #-156]	; 0xffffff64
   14de0:	orr	r3, r3, r1
   14de4:	str	r3, [fp, #-152]	; 0xffffff68
   14de8:	mov	r3, #111	; 0x6f
   14dec:	uxtb	r2, r3
   14df0:	mov	r3, #0
   14df4:	mov	r0, #0
   14df8:	mov	r1, #0
   14dfc:	mov	r1, r2
   14e00:	mov	r0, #0
   14e04:	ldrd	r2, [fp, #-156]	; 0xffffff64
   14e08:	mov	ip, r2
   14e0c:	orr	ip, ip, r0
   14e10:	str	ip, [fp, #-164]	; 0xffffff5c
   14e14:	orr	r3, r3, r1
   14e18:	str	r3, [fp, #-160]	; 0xffffff60
   14e1c:	mov	r3, #110	; 0x6e
   14e20:	uxtb	r2, r3
   14e24:	mov	r3, #0
   14e28:	lsr	r1, r2, #8
   14e2c:	str	r1, [fp, #-168]	; 0xffffff58
   14e30:	lsl	r3, r2, #24
   14e34:	str	r3, [fp, #-172]	; 0xffffff54
   14e38:	ldrd	r0, [fp, #-164]	; 0xffffff5c
   14e3c:	mov	ip, r0
   14e40:	ldrd	r2, [fp, #-172]	; 0xffffff54
   14e44:	mov	lr, r2
   14e48:	orr	ip, ip, lr
   14e4c:	str	ip, [fp, #-180]	; 0xffffff4c
   14e50:	orr	r3, r1, r3
   14e54:	str	r3, [fp, #-176]	; 0xffffff50
   14e58:	mov	r3, #100	; 0x64
   14e5c:	uxtb	r2, r3
   14e60:	mov	r3, #0
   14e64:	mov	r0, #0
   14e68:	mov	r1, #0
   14e6c:	lsl	r1, r3, #16
   14e70:	orr	r1, r1, r2, lsr #16
   14e74:	lsl	r0, r2, #16
   14e78:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   14e7c:	mov	ip, r2
   14e80:	orr	ip, ip, r0
   14e84:	str	ip, [fp, #-188]	; 0xffffff44
   14e88:	orr	r3, r3, r1
   14e8c:	str	r3, [fp, #-184]	; 0xffffff48
   14e90:	ldrd	r2, [fp, #-140]	; 0xffffff74
   14e94:	ldrd	r0, [fp, #-188]	; 0xffffff44
   14e98:	cmp	r3, r1
   14e9c:	cmpeq	r2, r0
   14ea0:	bcs	1513c <test@@Base+0x5c8>
   14ea4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   14ea8:	mov	r2, #-16777216	; 0xff000000
   14eac:	mvn	r3, #0
   14eb0:	and	ip, r0, r2
   14eb4:	str	ip, [fp, #-196]	; 0xffffff3c
   14eb8:	and	r3, r1, r3
   14ebc:	str	r3, [fp, #-192]	; 0xffffff40
   14ec0:	mov	r3, #102	; 0x66
   14ec4:	uxtb	r2, r3
   14ec8:	mov	r3, #0
   14ecc:	mov	r4, #0
   14ed0:	mov	r5, #0
   14ed4:	lsl	r5, r2, #24
   14ed8:	mov	r4, #0
   14edc:	mov	r3, #105	; 0x69
   14ee0:	uxtb	r2, r3
   14ee4:	mov	r3, #0
   14ee8:	mov	r0, #0
   14eec:	mov	r1, #0
   14ef0:	lsl	r1, r2, #16
   14ef4:	mov	r0, #0
   14ef8:	orr	r3, r4, r0
   14efc:	str	r3, [fp, #-204]	; 0xffffff34
   14f00:	orr	r3, r5, r1
   14f04:	str	r3, [fp, #-200]	; 0xffffff38
   14f08:	mov	r3, #114	; 0x72
   14f0c:	uxtb	r2, r3
   14f10:	mov	r3, #0
   14f14:	mov	r0, #0
   14f18:	mov	r1, #0
   14f1c:	lsl	r1, r2, #8
   14f20:	mov	r0, #0
   14f24:	ldrd	r2, [fp, #-204]	; 0xffffff34
   14f28:	mov	ip, r2
   14f2c:	orr	ip, ip, r0
   14f30:	str	ip, [fp, #-212]	; 0xffffff2c
   14f34:	orr	r3, r3, r1
   14f38:	str	r3, [fp, #-208]	; 0xffffff30
   14f3c:	mov	r3, #115	; 0x73
   14f40:	uxtb	r2, r3
   14f44:	mov	r3, #0
   14f48:	mov	r0, #0
   14f4c:	mov	r1, #0
   14f50:	mov	r1, r2
   14f54:	mov	r0, #0
   14f58:	ldrd	r2, [fp, #-212]	; 0xffffff2c
   14f5c:	mov	ip, r2
   14f60:	orr	ip, ip, r0
   14f64:	str	ip, [fp, #-220]	; 0xffffff24
   14f68:	orr	r3, r3, r1
   14f6c:	str	r3, [fp, #-216]	; 0xffffff28
   14f70:	mov	r3, #116	; 0x74
   14f74:	uxtb	r2, r3
   14f78:	mov	r3, #0
   14f7c:	lsr	r9, r2, #8
   14f80:	lsl	r8, r2, #24
   14f84:	ldrd	r2, [fp, #-220]	; 0xffffff24
   14f88:	mov	r1, r2
   14f8c:	orr	r1, r1, r8
   14f90:	str	r1, [fp, #-228]	; 0xffffff1c
   14f94:	orr	r3, r3, r9
   14f98:	str	r3, [fp, #-224]	; 0xffffff20
   14f9c:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   14fa0:	ldrd	r0, [fp, #-228]	; 0xffffff1c
   14fa4:	cmp	r3, r1
   14fa8:	cmpeq	r2, r0
   14fac:	beq	14fcc <test@@Base+0x458>
   14fb0:	mov	r3, #13
   14fb4:	ldr	r2, [fp, #-128]	; 0xffffff80
   14fb8:	ldr	r1, [fp, #-124]	; 0xffffff84
   14fbc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14fc0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   14fc4:	str	r0, [fp, #-124]	; 0xffffff84
   14fc8:	b	164c8 <test@@Base+0x1954>
   14fcc:	ldr	r3, [fp, #-124]	; 0xffffff84
   14fd0:	add	r3, r3, #5
   14fd4:	ldr	r2, [fp, #-128]	; 0xffffff80
   14fd8:	mov	r1, r3
   14fdc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14fe0:	bl	12ad0 <_start@@Base+0x610>
   14fe4:	str	r0, [fp, #-124]	; 0xffffff84
   14fe8:	ldr	r2, [fp, #-128]	; 0xffffff80
   14fec:	ldr	r1, [fp, #-124]	; 0xffffff84
   14ff0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14ff4:	bl	125b0 <_start@@Base+0xf0>
   14ff8:	str	r0, [fp, #-124]	; 0xffffff84
   14ffc:	ldr	r2, [fp, #-124]	; 0xffffff84
   15000:	ldr	r3, [fp, #-128]	; 0xffffff80
   15004:	cmp	r2, r3
   15008:	bne	15030 <test@@Base+0x4bc>
   1500c:	ldr	r3, [pc, #3048]	; 15bfc <test@@Base+0x1088>
   15010:	ldr	r3, [r6, r3]
   15014:	ldr	r3, [r3]
   15018:	mov	r2, #13
   1501c:	mov	r1, #1
   15020:	ldr	r0, [pc, #2948]	; 15bac <test@@Base+0x1038>
   15024:	add	r0, pc, r0
   15028:	bl	1242c <fwrite@plt>
   1502c:	b	164c8 <test@@Base+0x1954>
   15030:	ldr	r2, [fp, #-128]	; 0xffffff80
   15034:	ldr	r3, [fp, #-124]	; 0xffffff84
   15038:	cmp	r2, r3
   1503c:	bls	15084 <test@@Base+0x510>
   15040:	ldr	r3, [fp, #-124]	; 0xffffff84
   15044:	ldrb	r3, [r3]
   15048:	cmp	r3, #58	; 0x3a
   1504c:	bne	15084 <test@@Base+0x510>
   15050:	ldr	r3, [fp, #-124]	; 0xffffff84
   15054:	add	r3, r3, #1
   15058:	str	r3, [fp, #-124]	; 0xffffff84
   1505c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15060:	ldr	r1, [fp, #-124]	; 0xffffff84
   15064:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15068:	bl	125b0 <_start@@Base+0xf0>
   1506c:	str	r0, [fp, #-124]	; 0xffffff84
   15070:	ldr	r2, [fp, #-124]	; 0xffffff84
   15074:	ldr	r3, [fp, #-128]	; 0xffffff80
   15078:	cmp	r2, r3
   1507c:	beq	150c0 <test@@Base+0x54c>
   15080:	b	150e4 <test@@Base+0x570>
   15084:	ldr	r3, [pc, #2928]	; 15bfc <test@@Base+0x1088>
   15088:	ldr	r3, [r6, r3]
   1508c:	ldr	r3, [r3]
   15090:	mov	r2, #58	; 0x3a
   15094:	ldr	r1, [pc, #2836]	; 15bb0 <test@@Base+0x103c>
   15098:	add	r1, pc, r1
   1509c:	mov	r0, r3
   150a0:	bl	12468 <fprintf@plt>
   150a4:	mov	r3, #17
   150a8:	ldr	r2, [fp, #-128]	; 0xffffff80
   150ac:	ldr	r1, [fp, #-124]	; 0xffffff84
   150b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   150b4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   150b8:	str	r0, [fp, #-124]	; 0xffffff84
   150bc:	b	164c8 <test@@Base+0x1954>
   150c0:	ldr	r3, [pc, #2868]	; 15bfc <test@@Base+0x1088>
   150c4:	ldr	r3, [r6, r3]
   150c8:	ldr	r3, [r3]
   150cc:	mov	r2, #13
   150d0:	mov	r1, #1
   150d4:	ldr	r0, [pc, #2776]	; 15bb4 <test@@Base+0x1040>
   150d8:	add	r0, pc, r0
   150dc:	bl	1242c <fwrite@plt>
   150e0:	b	164c8 <test@@Base+0x1954>
   150e4:	mov	r3, #1
   150e8:	mov	r2, #1
   150ec:	mov	r1, #0
   150f0:	ldr	r0, [fp, #-120]	; 0xffffff88
   150f4:	bl	1c154 <flatcc_builder_table_add@@Base>
   150f8:	str	r0, [fp, #-60]	; 0xffffffc4
   150fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15100:	cmp	r3, #0
   15104:	beq	16484 <test@@Base+0x1910>
   15108:	ldr	r3, [fp, #-124]	; 0xffffff84
   1510c:	str	r3, [fp, #-56]	; 0xffffffc8
   15110:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15114:	ldr	r2, [fp, #-128]	; 0xffffff80
   15118:	ldr	r1, [fp, #-124]	; 0xffffff84
   1511c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15120:	bl	134bc <_start@@Base+0xffc>
   15124:	str	r0, [fp, #-124]	; 0xffffff84
   15128:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1512c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15130:	cmp	r2, r3
   15134:	bne	162f8 <test@@Base+0x1784>
   15138:	b	164c8 <test@@Base+0x1954>
   1513c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15140:	mov	r2, #0
   15144:	mvn	r3, #0
   15148:	and	ip, r0, r2
   1514c:	str	ip, [fp, #-236]	; 0xffffff14
   15150:	and	r3, r1, r3
   15154:	str	r3, [fp, #-232]	; 0xffffff18
   15158:	mov	r3, #122	; 0x7a
   1515c:	uxtb	r2, r3
   15160:	mov	r3, #0
   15164:	mov	r4, #0
   15168:	mov	r5, #0
   1516c:	lsl	r5, r2, #24
   15170:	mov	r4, #0
   15174:	mov	r3, #117	; 0x75
   15178:	uxtb	r2, r3
   1517c:	mov	r3, #0
   15180:	mov	r0, #0
   15184:	mov	r1, #0
   15188:	lsl	r1, r2, #16
   1518c:	mov	r0, #0
   15190:	orr	r3, r4, r0
   15194:	str	r3, [fp, #-244]	; 0xffffff0c
   15198:	orr	r3, r5, r1
   1519c:	str	r3, [fp, #-240]	; 0xffffff10
   151a0:	mov	r3, #108	; 0x6c
   151a4:	uxtb	r2, r3
   151a8:	mov	r3, #0
   151ac:	mov	r0, #0
   151b0:	mov	r1, #0
   151b4:	lsl	r1, r2, #8
   151b8:	mov	r0, #0
   151bc:	ldrd	r2, [fp, #-244]	; 0xffffff0c
   151c0:	mov	ip, r2
   151c4:	orr	ip, ip, r0
   151c8:	str	ip, [fp, #-252]	; 0xffffff04
   151cc:	orr	r3, r3, r1
   151d0:	str	r3, [fp, #-248]	; 0xffffff08
   151d4:	mov	r3, #117	; 0x75
   151d8:	uxtb	r2, r3
   151dc:	mov	r3, #0
   151e0:	mov	r0, #0
   151e4:	mov	r1, #0
   151e8:	mov	r1, r2
   151ec:	mov	r0, #0
   151f0:	ldrd	r2, [fp, #-252]	; 0xffffff04
   151f4:	mov	ip, r2
   151f8:	orr	ip, ip, r0
   151fc:	str	ip, [fp, #-260]	; 0xfffffefc
   15200:	orr	r3, r3, r1
   15204:	str	r3, [fp, #-256]	; 0xffffff00
   15208:	ldrd	r2, [fp, #-236]	; 0xffffff14
   1520c:	sub	r1, fp, #260	; 0x104
   15210:	ldrd	r0, [r1]
   15214:	cmp	r3, r1
   15218:	cmpeq	r2, r0
   1521c:	bcs	15f38 <test@@Base+0x13c4>
   15220:	mov	r3, #115	; 0x73
   15224:	uxtb	r2, r3
   15228:	mov	r3, #0
   1522c:	mov	r4, #0
   15230:	mov	r5, #0
   15234:	lsl	r5, r2, #24
   15238:	mov	r4, #0
   1523c:	mov	r3, #101	; 0x65
   15240:	uxtb	r2, r3
   15244:	mov	r3, #0
   15248:	mov	r0, #0
   1524c:	mov	r1, #0
   15250:	lsl	r1, r2, #16
   15254:	mov	r0, #0
   15258:	orr	r3, r4, r0
   1525c:	str	r3, [fp, #-268]	; 0xfffffef4
   15260:	orr	r3, r5, r1
   15264:	str	r3, [fp, #-264]	; 0xfffffef8
   15268:	mov	r3, #99	; 0x63
   1526c:	uxtb	r2, r3
   15270:	mov	r3, #0
   15274:	mov	r0, #0
   15278:	mov	r1, #0
   1527c:	lsl	r1, r2, #8
   15280:	mov	r0, #0
   15284:	sub	r3, fp, #268	; 0x10c
   15288:	ldrd	r2, [r3]
   1528c:	mov	ip, r2
   15290:	orr	ip, ip, r0
   15294:	str	ip, [fp, #-276]	; 0xfffffeec
   15298:	orr	r3, r3, r1
   1529c:	str	r3, [fp, #-272]	; 0xfffffef0
   152a0:	mov	r3, #111	; 0x6f
   152a4:	uxtb	r2, r3
   152a8:	mov	r3, #0
   152ac:	mov	r0, #0
   152b0:	mov	r1, #0
   152b4:	mov	r1, r2
   152b8:	mov	r0, #0
   152bc:	sub	r3, fp, #276	; 0x114
   152c0:	ldrd	r2, [r3]
   152c4:	mov	ip, r2
   152c8:	orr	ip, ip, r0
   152cc:	str	ip, [fp, #-284]	; 0xfffffee4
   152d0:	orr	r3, r3, r1
   152d4:	str	r3, [fp, #-280]	; 0xfffffee8
   152d8:	mov	r3, #110	; 0x6e
   152dc:	uxtb	r2, r3
   152e0:	mov	r3, #0
   152e4:	lsr	r1, r2, #8
   152e8:	str	r1, [fp, #-288]	; 0xfffffee0
   152ec:	lsl	r3, r2, #24
   152f0:	str	r3, [fp, #-292]	; 0xfffffedc
   152f4:	sub	r3, fp, #284	; 0x11c
   152f8:	ldrd	r0, [r3]
   152fc:	mov	ip, r0
   15300:	sub	r3, fp, #292	; 0x124
   15304:	ldrd	r2, [r3]
   15308:	mov	lr, r2
   1530c:	orr	ip, ip, lr
   15310:	str	ip, [fp, #-300]	; 0xfffffed4
   15314:	orr	r3, r1, r3
   15318:	str	r3, [fp, #-296]	; 0xfffffed8
   1531c:	mov	r3, #100	; 0x64
   15320:	uxtb	r2, r3
   15324:	mov	r3, #0
   15328:	mov	r0, #0
   1532c:	mov	r1, #0
   15330:	lsl	r1, r3, #16
   15334:	orr	r1, r1, r2, lsr #16
   15338:	lsl	r0, r2, #16
   1533c:	sub	r3, fp, #300	; 0x12c
   15340:	ldrd	r2, [r3]
   15344:	mov	ip, r2
   15348:	orr	ip, ip, r0
   1534c:	str	ip, [fp, #-308]	; 0xfffffecc
   15350:	orr	r3, r3, r1
   15354:	str	r3, [fp, #-304]	; 0xfffffed0
   15358:	mov	r3, #115	; 0x73
   1535c:	uxtb	r2, r3
   15360:	mov	r3, #0
   15364:	mov	r0, #0
   15368:	mov	r1, #0
   1536c:	lsl	r1, r3, #8
   15370:	orr	r1, r1, r2, lsr #24
   15374:	lsl	r0, r2, #8
   15378:	sub	r3, fp, #308	; 0x134
   1537c:	ldrd	r2, [r3]
   15380:	mov	ip, r2
   15384:	orr	ip, ip, r0
   15388:	str	ip, [fp, #-316]	; 0xfffffec4
   1538c:	orr	r3, r3, r1
   15390:	str	r3, [fp, #-312]	; 0xfffffec8
   15394:	mov	r3, #32
   15398:	uxtb	r2, r3
   1539c:	mov	r3, #0
   153a0:	sub	r1, fp, #316	; 0x13c
   153a4:	ldrd	r0, [r1]
   153a8:	mov	ip, r0
   153ac:	orr	ip, ip, r2
   153b0:	str	ip, [fp, #-324]	; 0xfffffebc
   153b4:	orr	r3, r1, r3
   153b8:	str	r3, [fp, #-320]	; 0xfffffec0
   153bc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   153c0:	sub	r1, fp, #324	; 0x144
   153c4:	ldrd	r0, [r1]
   153c8:	cmp	r3, r1
   153cc:	cmpeq	r2, r0
   153d0:	bcs	156d4 <test@@Base+0xb60>
   153d4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   153d8:	mov	r2, #0
   153dc:	movt	r2, #65535	; 0xffff
   153e0:	mvn	r3, #0
   153e4:	and	ip, r0, r2
   153e8:	str	ip, [fp, #-332]	; 0xfffffeb4
   153ec:	and	r3, r1, r3
   153f0:	str	r3, [fp, #-328]	; 0xfffffeb8
   153f4:	mov	r3, #115	; 0x73
   153f8:	uxtb	r2, r3
   153fc:	mov	r3, #0
   15400:	mov	r4, #0
   15404:	mov	r5, #0
   15408:	lsl	r5, r2, #24
   1540c:	mov	r4, #0
   15410:	mov	r3, #101	; 0x65
   15414:	uxtb	r2, r3
   15418:	mov	r3, #0
   1541c:	mov	r0, #0
   15420:	mov	r1, #0
   15424:	lsl	r1, r2, #16
   15428:	mov	r0, #0
   1542c:	orr	r3, r4, r0
   15430:	str	r3, [fp, #-340]	; 0xfffffeac
   15434:	orr	r3, r5, r1
   15438:	str	r3, [fp, #-336]	; 0xfffffeb0
   1543c:	mov	r3, #99	; 0x63
   15440:	uxtb	r2, r3
   15444:	mov	r3, #0
   15448:	mov	r0, #0
   1544c:	mov	r1, #0
   15450:	lsl	r1, r2, #8
   15454:	mov	r0, #0
   15458:	sub	r3, fp, #340	; 0x154
   1545c:	ldrd	r2, [r3]
   15460:	mov	ip, r2
   15464:	orr	ip, ip, r0
   15468:	str	ip, [fp, #-348]	; 0xfffffea4
   1546c:	orr	r3, r3, r1
   15470:	str	r3, [fp, #-344]	; 0xfffffea8
   15474:	mov	r3, #111	; 0x6f
   15478:	uxtb	r2, r3
   1547c:	mov	r3, #0
   15480:	mov	r0, #0
   15484:	mov	r1, #0
   15488:	mov	r1, r2
   1548c:	mov	r0, #0
   15490:	sub	r3, fp, #348	; 0x15c
   15494:	ldrd	r2, [r3]
   15498:	mov	ip, r2
   1549c:	orr	ip, ip, r0
   154a0:	str	ip, [fp, #-356]	; 0xfffffe9c
   154a4:	orr	r3, r3, r1
   154a8:	str	r3, [fp, #-352]	; 0xfffffea0
   154ac:	mov	r3, #110	; 0x6e
   154b0:	uxtb	r2, r3
   154b4:	mov	r3, #0
   154b8:	lsr	r1, r2, #8
   154bc:	str	r1, [fp, #-360]	; 0xfffffe98
   154c0:	lsl	r3, r2, #24
   154c4:	str	r3, [fp, #-364]	; 0xfffffe94
   154c8:	sub	r3, fp, #356	; 0x164
   154cc:	ldrd	r0, [r3]
   154d0:	mov	ip, r0
   154d4:	sub	r3, fp, #364	; 0x16c
   154d8:	ldrd	r2, [r3]
   154dc:	mov	lr, r2
   154e0:	orr	ip, ip, lr
   154e4:	str	ip, [fp, #-372]	; 0xfffffe8c
   154e8:	orr	r3, r1, r3
   154ec:	str	r3, [fp, #-368]	; 0xfffffe90
   154f0:	mov	r3, #100	; 0x64
   154f4:	uxtb	r2, r3
   154f8:	mov	r3, #0
   154fc:	mov	r0, #0
   15500:	mov	r1, #0
   15504:	lsl	r1, r3, #16
   15508:	orr	r1, r1, r2, lsr #16
   1550c:	lsl	r0, r2, #16
   15510:	sub	r3, fp, #372	; 0x174
   15514:	ldrd	r2, [r3]
   15518:	mov	ip, r2
   1551c:	orr	ip, ip, r0
   15520:	str	ip, [fp, #-380]	; 0xfffffe84
   15524:	orr	r3, r3, r1
   15528:	str	r3, [fp, #-376]	; 0xfffffe88
   1552c:	sub	r3, fp, #332	; 0x14c
   15530:	ldrd	r2, [r3]
   15534:	sub	r1, fp, #380	; 0x17c
   15538:	ldrd	r0, [r1]
   1553c:	cmp	r3, r1
   15540:	cmpeq	r2, r0
   15544:	beq	15564 <test@@Base+0x9f0>
   15548:	mov	r3, #13
   1554c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15550:	ldr	r1, [fp, #-124]	; 0xffffff84
   15554:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15558:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1555c:	str	r0, [fp, #-124]	; 0xffffff84
   15560:	b	164c8 <test@@Base+0x1954>
   15564:	ldr	r3, [fp, #-124]	; 0xffffff84
   15568:	add	r3, r3, #6
   1556c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15570:	mov	r1, r3
   15574:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15578:	bl	12ad0 <_start@@Base+0x610>
   1557c:	str	r0, [fp, #-124]	; 0xffffff84
   15580:	ldr	r2, [fp, #-128]	; 0xffffff80
   15584:	ldr	r1, [fp, #-124]	; 0xffffff84
   15588:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1558c:	bl	125b0 <_start@@Base+0xf0>
   15590:	str	r0, [fp, #-124]	; 0xffffff84
   15594:	ldr	r2, [fp, #-124]	; 0xffffff84
   15598:	ldr	r3, [fp, #-128]	; 0xffffff80
   1559c:	cmp	r2, r3
   155a0:	bne	155c8 <test@@Base+0xa54>
   155a4:	ldr	r3, [pc, #1616]	; 15bfc <test@@Base+0x1088>
   155a8:	ldr	r3, [r6, r3]
   155ac:	ldr	r3, [r3]
   155b0:	mov	r2, #13
   155b4:	mov	r1, #1
   155b8:	ldr	r0, [pc, #1528]	; 15bb8 <test@@Base+0x1044>
   155bc:	add	r0, pc, r0
   155c0:	bl	1242c <fwrite@plt>
   155c4:	b	164c8 <test@@Base+0x1954>
   155c8:	ldr	r2, [fp, #-128]	; 0xffffff80
   155cc:	ldr	r3, [fp, #-124]	; 0xffffff84
   155d0:	cmp	r2, r3
   155d4:	bls	1561c <test@@Base+0xaa8>
   155d8:	ldr	r3, [fp, #-124]	; 0xffffff84
   155dc:	ldrb	r3, [r3]
   155e0:	cmp	r3, #58	; 0x3a
   155e4:	bne	1561c <test@@Base+0xaa8>
   155e8:	ldr	r3, [fp, #-124]	; 0xffffff84
   155ec:	add	r3, r3, #1
   155f0:	str	r3, [fp, #-124]	; 0xffffff84
   155f4:	ldr	r2, [fp, #-128]	; 0xffffff80
   155f8:	ldr	r1, [fp, #-124]	; 0xffffff84
   155fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15600:	bl	125b0 <_start@@Base+0xf0>
   15604:	str	r0, [fp, #-124]	; 0xffffff84
   15608:	ldr	r2, [fp, #-124]	; 0xffffff84
   1560c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15610:	cmp	r2, r3
   15614:	beq	15658 <test@@Base+0xae4>
   15618:	b	1567c <test@@Base+0xb08>
   1561c:	ldr	r3, [pc, #1496]	; 15bfc <test@@Base+0x1088>
   15620:	ldr	r3, [r6, r3]
   15624:	ldr	r3, [r3]
   15628:	mov	r2, #58	; 0x3a
   1562c:	ldr	r1, [pc, #1416]	; 15bbc <test@@Base+0x1048>
   15630:	add	r1, pc, r1
   15634:	mov	r0, r3
   15638:	bl	12468 <fprintf@plt>
   1563c:	mov	r3, #17
   15640:	ldr	r2, [fp, #-128]	; 0xffffff80
   15644:	ldr	r1, [fp, #-124]	; 0xffffff84
   15648:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1564c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   15650:	str	r0, [fp, #-124]	; 0xffffff84
   15654:	b	164c8 <test@@Base+0x1954>
   15658:	ldr	r3, [pc, #1436]	; 15bfc <test@@Base+0x1088>
   1565c:	ldr	r3, [r6, r3]
   15660:	ldr	r3, [r3]
   15664:	mov	r2, #13
   15668:	mov	r1, #1
   1566c:	ldr	r0, [pc, #1356]	; 15bc0 <test@@Base+0x104c>
   15670:	add	r0, pc, r0
   15674:	bl	1242c <fwrite@plt>
   15678:	b	164c8 <test@@Base+0x1954>
   1567c:	mov	r3, #8
   15680:	mov	r2, #8
   15684:	mov	r1, #1
   15688:	ldr	r0, [fp, #-120]	; 0xffffff88
   1568c:	bl	1c154 <flatcc_builder_table_add@@Base>
   15690:	str	r0, [fp, #-60]	; 0xffffffc4
   15694:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15698:	cmp	r3, #0
   1569c:	beq	1648c <test@@Base+0x1918>
   156a0:	ldr	r3, [fp, #-124]	; 0xffffff84
   156a4:	str	r3, [fp, #-56]	; 0xffffffc8
   156a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   156ac:	ldr	r2, [fp, #-128]	; 0xffffff80
   156b0:	ldr	r1, [fp, #-124]	; 0xffffff84
   156b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   156b8:	bl	244d8 <flatcc_json_parser_double@@Base>
   156bc:	str	r0, [fp, #-124]	; 0xffffff84
   156c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   156c4:	ldr	r3, [fp, #-124]	; 0xffffff84
   156c8:	cmp	r2, r3
   156cc:	bne	162f8 <test@@Base+0x1784>
   156d0:	b	164c8 <test@@Base+0x1954>
   156d4:	mov	r3, #115	; 0x73
   156d8:	uxtb	r2, r3
   156dc:	mov	r3, #0
   156e0:	mov	r4, #0
   156e4:	mov	r5, #0
   156e8:	lsl	r5, r2, #24
   156ec:	mov	r4, #0
   156f0:	mov	r3, #101	; 0x65
   156f4:	uxtb	r2, r3
   156f8:	mov	r3, #0
   156fc:	mov	r0, #0
   15700:	mov	r1, #0
   15704:	lsl	r1, r2, #16
   15708:	mov	r0, #0
   1570c:	orr	r3, r4, r0
   15710:	str	r3, [fp, #-388]	; 0xfffffe7c
   15714:	orr	r3, r5, r1
   15718:	str	r3, [fp, #-384]	; 0xfffffe80
   1571c:	mov	r3, #99	; 0x63
   15720:	uxtb	r2, r3
   15724:	mov	r3, #0
   15728:	mov	r0, #0
   1572c:	mov	r1, #0
   15730:	lsl	r1, r2, #8
   15734:	mov	r0, #0
   15738:	sub	r3, fp, #388	; 0x184
   1573c:	ldrd	r2, [r3]
   15740:	mov	ip, r2
   15744:	orr	ip, ip, r0
   15748:	str	ip, [fp, #-396]	; 0xfffffe74
   1574c:	orr	r3, r3, r1
   15750:	str	r3, [fp, #-392]	; 0xfffffe78
   15754:	mov	r3, #111	; 0x6f
   15758:	uxtb	r2, r3
   1575c:	mov	r3, #0
   15760:	mov	r0, #0
   15764:	mov	r1, #0
   15768:	mov	r1, r2
   1576c:	mov	r0, #0
   15770:	sub	r3, fp, #396	; 0x18c
   15774:	ldrd	r2, [r3]
   15778:	mov	ip, r2
   1577c:	orr	ip, ip, r0
   15780:	str	ip, [fp, #-404]	; 0xfffffe6c
   15784:	orr	r3, r3, r1
   15788:	str	r3, [fp, #-400]	; 0xfffffe70
   1578c:	mov	r3, #110	; 0x6e
   15790:	uxtb	r2, r3
   15794:	mov	r3, #0
   15798:	lsr	r1, r2, #8
   1579c:	str	r1, [fp, #-408]	; 0xfffffe68
   157a0:	lsl	r3, r2, #24
   157a4:	str	r3, [fp, #-412]	; 0xfffffe64
   157a8:	sub	r3, fp, #404	; 0x194
   157ac:	ldrd	r0, [r3]
   157b0:	mov	ip, r0
   157b4:	sub	r3, fp, #412	; 0x19c
   157b8:	ldrd	r2, [r3]
   157bc:	mov	lr, r2
   157c0:	orr	ip, ip, lr
   157c4:	str	ip, [fp, #-420]	; 0xfffffe5c
   157c8:	orr	r3, r1, r3
   157cc:	str	r3, [fp, #-416]	; 0xfffffe60
   157d0:	mov	r3, #100	; 0x64
   157d4:	uxtb	r2, r3
   157d8:	mov	r3, #0
   157dc:	mov	r0, #0
   157e0:	mov	r1, #0
   157e4:	lsl	r1, r3, #16
   157e8:	orr	r1, r1, r2, lsr #16
   157ec:	lsl	r0, r2, #16
   157f0:	sub	r3, fp, #420	; 0x1a4
   157f4:	ldrd	r2, [r3]
   157f8:	mov	ip, r2
   157fc:	orr	ip, ip, r0
   15800:	str	ip, [fp, #-428]	; 0xfffffe54
   15804:	orr	r3, r3, r1
   15808:	str	r3, [fp, #-424]	; 0xfffffe58
   1580c:	mov	r3, #115	; 0x73
   15810:	uxtb	r2, r3
   15814:	mov	r3, #0
   15818:	mov	r0, #0
   1581c:	mov	r1, #0
   15820:	lsl	r1, r3, #8
   15824:	orr	r1, r1, r2, lsr #24
   15828:	lsl	r0, r2, #8
   1582c:	sub	r3, fp, #428	; 0x1ac
   15830:	ldrd	r2, [r3]
   15834:	mov	ip, r2
   15838:	orr	ip, ip, r0
   1583c:	str	ip, [fp, #-436]	; 0xfffffe4c
   15840:	orr	r3, r3, r1
   15844:	str	r3, [fp, #-432]	; 0xfffffe50
   15848:	mov	r3, #32
   1584c:	uxtb	r2, r3
   15850:	mov	r3, #0
   15854:	sub	r1, fp, #436	; 0x1b4
   15858:	ldrd	r0, [r1]
   1585c:	mov	ip, r0
   15860:	orr	ip, ip, r2
   15864:	str	ip, [fp, #-444]	; 0xfffffe44
   15868:	orr	r3, r1, r3
   1586c:	str	r3, [fp, #-440]	; 0xfffffe48
   15870:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   15874:	sub	r1, fp, #444	; 0x1bc
   15878:	ldrd	r0, [r1]
   1587c:	cmp	r3, r1
   15880:	cmpeq	r2, r0
   15884:	beq	158a4 <test@@Base+0xd30>
   15888:	mov	r3, #13
   1588c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15890:	ldr	r1, [fp, #-124]	; 0xffffff84
   15894:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15898:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1589c:	str	r0, [fp, #-124]	; 0xffffff84
   158a0:	b	164c8 <test@@Base+0x1954>
   158a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   158a8:	str	r3, [fp, #-124]	; 0xffffff84
   158ac:	ldr	r1, [fp, #-128]	; 0xffffff80
   158b0:	ldr	r0, [fp, #-124]	; 0xffffff84
   158b4:	bl	12a7c <_start@@Base+0x5bc>
   158b8:	strd	r0, [fp, #-52]	; 0xffffffcc
   158bc:	ldr	r2, [fp, #-128]	; 0xffffff80
   158c0:	ldr	r3, [fp, #-124]	; 0xffffff84
   158c4:	sub	r3, r2, r3
   158c8:	cmp	r3, #8
   158cc:	ble	158dc <test@@Base+0xd68>
   158d0:	ldr	r3, [fp, #-124]	; 0xffffff84
   158d4:	add	r3, r3, #8
   158d8:	b	158e0 <test@@Base+0xd6c>
   158dc:	ldr	r3, [fp, #-128]	; 0xffffff80
   158e0:	str	r3, [fp, #-56]	; 0xffffffc8
   158e4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   158e8:	mov	r2, #0
   158ec:	mvn	r3, #0
   158f0:	and	ip, r0, r2
   158f4:	str	ip, [fp, #-452]	; 0xfffffe3c
   158f8:	and	r3, r1, r3
   158fc:	str	r3, [fp, #-448]	; 0xfffffe40
   15900:	mov	r3, #108	; 0x6c
   15904:	uxtb	r2, r3
   15908:	mov	r3, #0
   1590c:	mov	r4, #0
   15910:	mov	r5, #0
   15914:	lsl	r5, r2, #24
   15918:	mov	r4, #0
   1591c:	mov	r3, #101	; 0x65
   15920:	uxtb	r2, r3
   15924:	mov	r3, #0
   15928:	mov	r0, #0
   1592c:	mov	r1, #0
   15930:	lsl	r1, r2, #16
   15934:	mov	r0, #0
   15938:	orr	r3, r4, r0
   1593c:	str	r3, [fp, #-460]	; 0xfffffe34
   15940:	orr	r3, r5, r1
   15944:	str	r3, [fp, #-456]	; 0xfffffe38
   15948:	mov	r3, #102	; 0x66
   1594c:	uxtb	r2, r3
   15950:	mov	r3, #0
   15954:	mov	r0, #0
   15958:	mov	r1, #0
   1595c:	lsl	r1, r2, #8
   15960:	mov	r0, #0
   15964:	sub	r3, fp, #460	; 0x1cc
   15968:	ldrd	r2, [r3]
   1596c:	mov	ip, r2
   15970:	orr	ip, ip, r0
   15974:	str	ip, [fp, #-468]	; 0xfffffe2c
   15978:	orr	r3, r3, r1
   1597c:	str	r3, [fp, #-464]	; 0xfffffe30
   15980:	mov	r3, #116	; 0x74
   15984:	uxtb	r2, r3
   15988:	mov	r3, #0
   1598c:	mov	r0, #0
   15990:	mov	r1, #0
   15994:	mov	r1, r2
   15998:	mov	r0, #0
   1599c:	sub	r3, fp, #468	; 0x1d4
   159a0:	ldrd	r2, [r3]
   159a4:	mov	ip, r2
   159a8:	orr	ip, ip, r0
   159ac:	str	ip, [fp, #-476]	; 0xfffffe24
   159b0:	orr	r3, r3, r1
   159b4:	str	r3, [fp, #-472]	; 0xfffffe28
   159b8:	sub	r3, fp, #452	; 0x1c4
   159bc:	ldrd	r2, [r3]
   159c0:	sub	r1, fp, #476	; 0x1dc
   159c4:	ldrd	r0, [r1]
   159c8:	cmp	r3, r1
   159cc:	cmpeq	r2, r0
   159d0:	bcs	15cbc <test@@Base+0x1148>
   159d4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   159d8:	mov	r2, #0
   159dc:	mvn	r3, #0
   159e0:	and	ip, r0, r2
   159e4:	str	ip, [fp, #-484]	; 0xfffffe1c
   159e8:	and	r3, r1, r3
   159ec:	str	r3, [fp, #-480]	; 0xfffffe20
   159f0:	mov	r3, #108	; 0x6c
   159f4:	uxtb	r2, r3
   159f8:	mov	r3, #0
   159fc:	mov	r4, #0
   15a00:	mov	r5, #0
   15a04:	lsl	r5, r2, #24
   15a08:	mov	r4, #0
   15a0c:	mov	r3, #101	; 0x65
   15a10:	uxtb	r2, r3
   15a14:	mov	r3, #0
   15a18:	mov	r0, #0
   15a1c:	mov	r1, #0
   15a20:	lsl	r1, r2, #16
   15a24:	mov	r0, #0
   15a28:	orr	r3, r4, r0
   15a2c:	str	r3, [fp, #-492]	; 0xfffffe14
   15a30:	orr	r3, r5, r1
   15a34:	str	r3, [fp, #-488]	; 0xfffffe18
   15a38:	mov	r3, #97	; 0x61
   15a3c:	uxtb	r2, r3
   15a40:	mov	r3, #0
   15a44:	mov	r0, #0
   15a48:	mov	r1, #0
   15a4c:	lsl	r1, r2, #8
   15a50:	mov	r0, #0
   15a54:	sub	r3, fp, #492	; 0x1ec
   15a58:	ldrd	r2, [r3]
   15a5c:	mov	ip, r2
   15a60:	orr	ip, ip, r0
   15a64:	str	ip, [fp, #-500]	; 0xfffffe0c
   15a68:	orr	r3, r3, r1
   15a6c:	str	r3, [fp, #-496]	; 0xfffffe10
   15a70:	mov	r3, #100	; 0x64
   15a74:	uxtb	r2, r3
   15a78:	mov	r3, #0
   15a7c:	mov	r0, #0
   15a80:	mov	r1, #0
   15a84:	mov	r1, r2
   15a88:	mov	r0, #0
   15a8c:	sub	r3, fp, #500	; 0x1f4
   15a90:	ldrd	r2, [r3]
   15a94:	mov	ip, r2
   15a98:	orr	ip, ip, r0
   15a9c:	str	ip, [fp, #-508]	; 0xfffffe04
   15aa0:	orr	r3, r3, r1
   15aa4:	str	r3, [fp, #-504]	; 0xfffffe08
   15aa8:	sub	r3, fp, #484	; 0x1e4
   15aac:	ldrd	r2, [r3]
   15ab0:	sub	r1, fp, #508	; 0x1fc
   15ab4:	ldrd	r0, [r1]
   15ab8:	cmp	r3, r1
   15abc:	cmpeq	r2, r0
   15ac0:	beq	15ae0 <test@@Base+0xf6c>
   15ac4:	mov	r3, #13
   15ac8:	ldr	r2, [fp, #-128]	; 0xffffff80
   15acc:	ldr	r1, [fp, #-124]	; 0xffffff84
   15ad0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ad4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   15ad8:	str	r0, [fp, #-124]	; 0xffffff84
   15adc:	b	164c8 <test@@Base+0x1954>
   15ae0:	ldr	r3, [fp, #-124]	; 0xffffff84
   15ae4:	add	r3, r3, #4
   15ae8:	ldr	r2, [fp, #-128]	; 0xffffff80
   15aec:	mov	r1, r3
   15af0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15af4:	bl	12ad0 <_start@@Base+0x610>
   15af8:	str	r0, [fp, #-124]	; 0xffffff84
   15afc:	ldr	r2, [fp, #-128]	; 0xffffff80
   15b00:	ldr	r1, [fp, #-124]	; 0xffffff84
   15b04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15b08:	bl	125b0 <_start@@Base+0xf0>
   15b0c:	str	r0, [fp, #-124]	; 0xffffff84
   15b10:	ldr	r2, [fp, #-124]	; 0xffffff84
   15b14:	ldr	r3, [fp, #-128]	; 0xffffff80
   15b18:	cmp	r2, r3
   15b1c:	bne	15b44 <test@@Base+0xfd0>
   15b20:	ldr	r3, [pc, #212]	; 15bfc <test@@Base+0x1088>
   15b24:	ldr	r3, [r6, r3]
   15b28:	ldr	r3, [r3]
   15b2c:	mov	r2, #13
   15b30:	mov	r1, #1
   15b34:	ldr	r0, [pc, #136]	; 15bc4 <test@@Base+0x1050>
   15b38:	add	r0, pc, r0
   15b3c:	bl	1242c <fwrite@plt>
   15b40:	b	164c8 <test@@Base+0x1954>
   15b44:	ldr	r2, [fp, #-128]	; 0xffffff80
   15b48:	ldr	r3, [fp, #-124]	; 0xffffff84
   15b4c:	cmp	r2, r3
   15b50:	bls	15c04 <test@@Base+0x1090>
   15b54:	ldr	r3, [fp, #-124]	; 0xffffff84
   15b58:	ldrb	r3, [r3]
   15b5c:	cmp	r3, #58	; 0x3a
   15b60:	bne	15c04 <test@@Base+0x1090>
   15b64:	ldr	r3, [fp, #-124]	; 0xffffff84
   15b68:	add	r3, r3, #1
   15b6c:	str	r3, [fp, #-124]	; 0xffffff84
   15b70:	ldr	r2, [fp, #-128]	; 0xffffff80
   15b74:	ldr	r1, [fp, #-124]	; 0xffffff84
   15b78:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15b7c:	bl	125b0 <_start@@Base+0xf0>
   15b80:	str	r0, [fp, #-124]	; 0xffffff84
   15b84:	ldr	r2, [fp, #-124]	; 0xffffff84
   15b88:	ldr	r3, [fp, #-128]	; 0xffffff80
   15b8c:	cmp	r2, r3
   15b90:	beq	15c40 <test@@Base+0x10cc>
   15b94:	b	15c64 <test@@Base+0x10f0>
   15b98:	andeq	r4, r2, r4, asr r4
   15b9c:	andeq	r2, r1, r4, asr #1
   15ba0:	andeq	r2, r1, r4, lsl #1
   15ba4:	andeq	r2, r1, r0, lsr #32
   15ba8:	ldrdeq	r1, [r1], -r0
   15bac:	muleq	r1, r4, ip
   15bb0:	andeq	r1, r1, r0, lsr ip
   15bb4:	andeq	r1, r1, r0, ror #23
   15bb8:	strdeq	r1, [r1], -ip
   15bbc:	muleq	r1, r8, r6
   15bc0:	andeq	r1, r1, r8, asr #12
   15bc4:	andeq	r1, r1, r0, lsl #3
   15bc8:	strheq	r1, [r1], -r0
   15bcc:	andeq	r1, r1, r0, rrx
   15bd0:	muleq	r1, r8, lr
   15bd4:	andeq	r0, r1, r4, lsr lr
   15bd8:	andeq	r0, r1, r4, ror #27
   15bdc:	andeq	r0, r1, ip, lsl ip
   15be0:			; <UNDEFINED> instruction: 0x00010bb8
   15be4:	andeq	r0, r1, r8, ror #22
   15be8:	andeq	r0, r1, r4, lsl #19
   15bec:	andeq	r0, r1, r0, lsr #18
   15bf0:	muleq	r1, r0, r8
   15bf4:	andeq	r0, r1, r8, ror #16
   15bf8:	ldrdeq	r0, [r1], -r4
   15bfc:	andeq	r0, r0, r4, asr r0
   15c00:			; <UNDEFINED> instruction: 0x000107b0
   15c04:	ldr	r3, [pc, #-16]	; 15bfc <test@@Base+0x1088>
   15c08:	ldr	r3, [r6, r3]
   15c0c:	ldr	r3, [r3]
   15c10:	mov	r2, #58	; 0x3a
   15c14:	ldr	r1, [pc, #-84]	; 15bc8 <test@@Base+0x1054>
   15c18:	add	r1, pc, r1
   15c1c:	mov	r0, r3
   15c20:	bl	12468 <fprintf@plt>
   15c24:	mov	r3, #17
   15c28:	ldr	r2, [fp, #-128]	; 0xffffff80
   15c2c:	ldr	r1, [fp, #-124]	; 0xffffff84
   15c30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15c34:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   15c38:	str	r0, [fp, #-124]	; 0xffffff84
   15c3c:	b	164c8 <test@@Base+0x1954>
   15c40:	ldr	r3, [pc, #-76]	; 15bfc <test@@Base+0x1088>
   15c44:	ldr	r3, [r6, r3]
   15c48:	ldr	r3, [r3]
   15c4c:	mov	r2, #13
   15c50:	mov	r1, #1
   15c54:	ldr	r0, [pc, #-144]	; 15bcc <test@@Base+0x1058>
   15c58:	add	r0, pc, r0
   15c5c:	bl	1242c <fwrite@plt>
   15c60:	b	164c8 <test@@Base+0x1954>
   15c64:	mov	r3, #8
   15c68:	mov	r2, #8
   15c6c:	mov	r1, #3
   15c70:	ldr	r0, [fp, #-120]	; 0xffffff88
   15c74:	bl	1c154 <flatcc_builder_table_add@@Base>
   15c78:	str	r0, [fp, #-60]	; 0xffffffc4
   15c7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15c80:	cmp	r3, #0
   15c84:	beq	16494 <test@@Base+0x1920>
   15c88:	ldr	r3, [fp, #-124]	; 0xffffff84
   15c8c:	str	r3, [fp, #-56]	; 0xffffffc8
   15c90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15c94:	ldr	r2, [fp, #-128]	; 0xffffff80
   15c98:	ldr	r1, [fp, #-124]	; 0xffffff84
   15c9c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ca0:	bl	13598 <_start@@Base+0x10d8>
   15ca4:	str	r0, [fp, #-124]	; 0xffffff84
   15ca8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15cac:	ldr	r3, [fp, #-124]	; 0xffffff84
   15cb0:	cmp	r2, r3
   15cb4:	bne	162f8 <test@@Base+0x1784>
   15cb8:	b	164c8 <test@@Base+0x1954>
   15cbc:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15cc0:	mov	r2, #0
   15cc4:	mvn	r3, #0
   15cc8:	and	ip, r0, r2
   15ccc:	str	ip, [fp, #-516]	; 0xfffffdfc
   15cd0:	and	r3, r1, r3
   15cd4:	str	r3, [fp, #-512]	; 0xfffffe00
   15cd8:	mov	r3, #108	; 0x6c
   15cdc:	uxtb	r2, r3
   15ce0:	mov	r3, #0
   15ce4:	mov	r4, #0
   15ce8:	mov	r5, #0
   15cec:	lsl	r5, r2, #24
   15cf0:	mov	r4, #0
   15cf4:	mov	r3, #101	; 0x65
   15cf8:	uxtb	r2, r3
   15cfc:	mov	r3, #0
   15d00:	mov	r0, #0
   15d04:	mov	r1, #0
   15d08:	lsl	r1, r2, #16
   15d0c:	mov	r0, #0
   15d10:	orr	r3, r4, r0
   15d14:	str	r3, [fp, #-524]	; 0xfffffdf4
   15d18:	orr	r3, r5, r1
   15d1c:	str	r3, [fp, #-520]	; 0xfffffdf8
   15d20:	mov	r3, #102	; 0x66
   15d24:	uxtb	r2, r3
   15d28:	mov	r3, #0
   15d2c:	mov	r0, #0
   15d30:	mov	r1, #0
   15d34:	lsl	r1, r2, #8
   15d38:	mov	r0, #0
   15d3c:	sub	r3, fp, #524	; 0x20c
   15d40:	ldrd	r2, [r3]
   15d44:	mov	ip, r2
   15d48:	orr	ip, ip, r0
   15d4c:	str	ip, [fp, #-532]	; 0xfffffdec
   15d50:	orr	r3, r3, r1
   15d54:	str	r3, [fp, #-528]	; 0xfffffdf0
   15d58:	mov	r3, #116	; 0x74
   15d5c:	uxtb	r2, r3
   15d60:	mov	r3, #0
   15d64:	mov	r0, #0
   15d68:	mov	r1, #0
   15d6c:	mov	r1, r2
   15d70:	mov	r0, #0
   15d74:	sub	r3, fp, #532	; 0x214
   15d78:	ldrd	r2, [r3]
   15d7c:	mov	ip, r2
   15d80:	orr	ip, ip, r0
   15d84:	str	ip, [fp, #-540]	; 0xfffffde4
   15d88:	orr	r3, r3, r1
   15d8c:	str	r3, [fp, #-536]	; 0xfffffde8
   15d90:	sub	r3, fp, #516	; 0x204
   15d94:	ldrd	r2, [r3]
   15d98:	sub	r1, fp, #540	; 0x21c
   15d9c:	ldrd	r0, [r1]
   15da0:	cmp	r3, r1
   15da4:	cmpeq	r2, r0
   15da8:	beq	15dc8 <test@@Base+0x1254>
   15dac:	mov	r3, #13
   15db0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15db4:	ldr	r1, [fp, #-124]	; 0xffffff84
   15db8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15dbc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   15dc0:	str	r0, [fp, #-124]	; 0xffffff84
   15dc4:	b	164c8 <test@@Base+0x1954>
   15dc8:	ldr	r3, [fp, #-124]	; 0xffffff84
   15dcc:	add	r3, r3, #4
   15dd0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15dd4:	mov	r1, r3
   15dd8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ddc:	bl	12ad0 <_start@@Base+0x610>
   15de0:	str	r0, [fp, #-124]	; 0xffffff84
   15de4:	ldr	r2, [fp, #-128]	; 0xffffff80
   15de8:	ldr	r1, [fp, #-124]	; 0xffffff84
   15dec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15df0:	bl	125b0 <_start@@Base+0xf0>
   15df4:	str	r0, [fp, #-124]	; 0xffffff84
   15df8:	ldr	r2, [fp, #-124]	; 0xffffff84
   15dfc:	ldr	r3, [fp, #-128]	; 0xffffff80
   15e00:	cmp	r2, r3
   15e04:	bne	15e2c <test@@Base+0x12b8>
   15e08:	ldr	r3, [pc, #-532]	; 15bfc <test@@Base+0x1088>
   15e0c:	ldr	r3, [r6, r3]
   15e10:	ldr	r3, [r3]
   15e14:	mov	r2, #13
   15e18:	mov	r1, #1
   15e1c:	ldr	r0, [pc, #-596]	; 15bd0 <test@@Base+0x105c>
   15e20:	add	r0, pc, r0
   15e24:	bl	1242c <fwrite@plt>
   15e28:	b	164c8 <test@@Base+0x1954>
   15e2c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15e30:	ldr	r3, [fp, #-124]	; 0xffffff84
   15e34:	cmp	r2, r3
   15e38:	bls	15e80 <test@@Base+0x130c>
   15e3c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15e40:	ldrb	r3, [r3]
   15e44:	cmp	r3, #58	; 0x3a
   15e48:	bne	15e80 <test@@Base+0x130c>
   15e4c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15e50:	add	r3, r3, #1
   15e54:	str	r3, [fp, #-124]	; 0xffffff84
   15e58:	ldr	r2, [fp, #-128]	; 0xffffff80
   15e5c:	ldr	r1, [fp, #-124]	; 0xffffff84
   15e60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15e64:	bl	125b0 <_start@@Base+0xf0>
   15e68:	str	r0, [fp, #-124]	; 0xffffff84
   15e6c:	ldr	r2, [fp, #-124]	; 0xffffff84
   15e70:	ldr	r3, [fp, #-128]	; 0xffffff80
   15e74:	cmp	r2, r3
   15e78:	beq	15ebc <test@@Base+0x1348>
   15e7c:	b	15ee0 <test@@Base+0x136c>
   15e80:	ldr	r3, [pc, #-652]	; 15bfc <test@@Base+0x1088>
   15e84:	ldr	r3, [r6, r3]
   15e88:	ldr	r3, [r3]
   15e8c:	mov	r2, #58	; 0x3a
   15e90:	ldr	r1, [pc, #-708]	; 15bd4 <test@@Base+0x1060>
   15e94:	add	r1, pc, r1
   15e98:	mov	r0, r3
   15e9c:	bl	12468 <fprintf@plt>
   15ea0:	mov	r3, #17
   15ea4:	ldr	r2, [fp, #-128]	; 0xffffff80
   15ea8:	ldr	r1, [fp, #-124]	; 0xffffff84
   15eac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15eb0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   15eb4:	str	r0, [fp, #-124]	; 0xffffff84
   15eb8:	b	164c8 <test@@Base+0x1954>
   15ebc:	ldr	r3, [pc, #-712]	; 15bfc <test@@Base+0x1088>
   15ec0:	ldr	r3, [r6, r3]
   15ec4:	ldr	r3, [r3]
   15ec8:	mov	r2, #13
   15ecc:	mov	r1, #1
   15ed0:	ldr	r0, [pc, #-768]	; 15bd8 <test@@Base+0x1064>
   15ed4:	add	r0, pc, r0
   15ed8:	bl	1242c <fwrite@plt>
   15edc:	b	164c8 <test@@Base+0x1954>
   15ee0:	mov	r3, #4
   15ee4:	mov	r2, #4
   15ee8:	mov	r1, #2
   15eec:	ldr	r0, [fp, #-120]	; 0xffffff88
   15ef0:	bl	1c154 <flatcc_builder_table_add@@Base>
   15ef4:	str	r0, [fp, #-60]	; 0xffffffc4
   15ef8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15efc:	cmp	r3, #0
   15f00:	beq	1649c <test@@Base+0x1928>
   15f04:	ldr	r3, [fp, #-124]	; 0xffffff84
   15f08:	str	r3, [fp, #-56]	; 0xffffffc8
   15f0c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15f10:	ldr	r2, [fp, #-128]	; 0xffffff80
   15f14:	ldr	r1, [fp, #-124]	; 0xffffff84
   15f18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15f1c:	bl	133e0 <_start@@Base+0xf20>
   15f20:	str	r0, [fp, #-124]	; 0xffffff84
   15f24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15f28:	ldr	r3, [fp, #-124]	; 0xffffff84
   15f2c:	cmp	r2, r3
   15f30:	bne	162f8 <test@@Base+0x1784>
   15f34:	b	164c8 <test@@Base+0x1954>
   15f38:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15f3c:	mov	r2, #0
   15f40:	mvn	r3, #0
   15f44:	and	ip, r0, r2
   15f48:	str	ip, [fp, #-548]	; 0xfffffddc
   15f4c:	and	r3, r1, r3
   15f50:	str	r3, [fp, #-544]	; 0xfffffde0
   15f54:	mov	r3, #122	; 0x7a
   15f58:	uxtb	r2, r3
   15f5c:	mov	r3, #0
   15f60:	mov	r4, #0
   15f64:	mov	r5, #0
   15f68:	lsl	r5, r2, #24
   15f6c:	mov	r4, #0
   15f70:	mov	r3, #117	; 0x75
   15f74:	uxtb	r2, r3
   15f78:	mov	r3, #0
   15f7c:	mov	r0, #0
   15f80:	mov	r1, #0
   15f84:	lsl	r1, r2, #16
   15f88:	mov	r0, #0
   15f8c:	orr	r3, r4, r0
   15f90:	str	r3, [fp, #-556]	; 0xfffffdd4
   15f94:	orr	r3, r5, r1
   15f98:	str	r3, [fp, #-552]	; 0xfffffdd8
   15f9c:	mov	r3, #108	; 0x6c
   15fa0:	uxtb	r2, r3
   15fa4:	mov	r3, #0
   15fa8:	mov	r0, #0
   15fac:	mov	r1, #0
   15fb0:	lsl	r1, r2, #8
   15fb4:	mov	r0, #0
   15fb8:	sub	r3, fp, #556	; 0x22c
   15fbc:	ldrd	r2, [r3]
   15fc0:	mov	ip, r2
   15fc4:	orr	ip, ip, r0
   15fc8:	str	ip, [fp, #-564]	; 0xfffffdcc
   15fcc:	orr	r3, r3, r1
   15fd0:	str	r3, [fp, #-560]	; 0xfffffdd0
   15fd4:	mov	r3, #117	; 0x75
   15fd8:	uxtb	r2, r3
   15fdc:	mov	r3, #0
   15fe0:	mov	r0, #0
   15fe4:	mov	r1, #0
   15fe8:	mov	r1, r2
   15fec:	mov	r0, #0
   15ff0:	sub	r3, fp, #564	; 0x234
   15ff4:	ldrd	r2, [r3]
   15ff8:	mov	ip, r2
   15ffc:	orr	ip, ip, r0
   16000:	str	ip, [fp, #-572]	; 0xfffffdc4
   16004:	orr	r3, r3, r1
   16008:	str	r3, [fp, #-568]	; 0xfffffdc8
   1600c:	sub	r3, fp, #548	; 0x224
   16010:	ldrd	r2, [r3]
   16014:	sub	r1, fp, #572	; 0x23c
   16018:	ldrd	r0, [r1]
   1601c:	cmp	r3, r1
   16020:	cmpeq	r2, r0
   16024:	beq	16044 <test@@Base+0x14d0>
   16028:	mov	r3, #13
   1602c:	ldr	r2, [fp, #-128]	; 0xffffff80
   16030:	ldr	r1, [fp, #-124]	; 0xffffff84
   16034:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16038:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1603c:	str	r0, [fp, #-124]	; 0xffffff84
   16040:	b	164c8 <test@@Base+0x1954>
   16044:	ldr	r3, [fp, #-124]	; 0xffffff84
   16048:	add	r3, r3, #4
   1604c:	ldr	r2, [fp, #-128]	; 0xffffff80
   16050:	mov	r1, r3
   16054:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16058:	bl	12ad0 <_start@@Base+0x610>
   1605c:	str	r0, [fp, #-124]	; 0xffffff84
   16060:	ldr	r2, [fp, #-128]	; 0xffffff80
   16064:	ldr	r1, [fp, #-124]	; 0xffffff84
   16068:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1606c:	bl	125b0 <_start@@Base+0xf0>
   16070:	str	r0, [fp, #-124]	; 0xffffff84
   16074:	ldr	r2, [fp, #-124]	; 0xffffff84
   16078:	ldr	r3, [fp, #-128]	; 0xffffff80
   1607c:	cmp	r2, r3
   16080:	bne	160a8 <test@@Base+0x1534>
   16084:	ldr	r3, [pc, #-1168]	; 15bfc <test@@Base+0x1088>
   16088:	ldr	r3, [r6, r3]
   1608c:	ldr	r3, [r3]
   16090:	mov	r2, #13
   16094:	mov	r1, #1
   16098:	ldr	r0, [pc, #-1220]	; 15bdc <test@@Base+0x1068>
   1609c:	add	r0, pc, r0
   160a0:	bl	1242c <fwrite@plt>
   160a4:	b	164c8 <test@@Base+0x1954>
   160a8:	ldr	r2, [fp, #-128]	; 0xffffff80
   160ac:	ldr	r3, [fp, #-124]	; 0xffffff84
   160b0:	cmp	r2, r3
   160b4:	bls	160fc <test@@Base+0x1588>
   160b8:	ldr	r3, [fp, #-124]	; 0xffffff84
   160bc:	ldrb	r3, [r3]
   160c0:	cmp	r3, #58	; 0x3a
   160c4:	bne	160fc <test@@Base+0x1588>
   160c8:	ldr	r3, [fp, #-124]	; 0xffffff84
   160cc:	add	r3, r3, #1
   160d0:	str	r3, [fp, #-124]	; 0xffffff84
   160d4:	ldr	r2, [fp, #-128]	; 0xffffff80
   160d8:	ldr	r1, [fp, #-124]	; 0xffffff84
   160dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   160e0:	bl	125b0 <_start@@Base+0xf0>
   160e4:	str	r0, [fp, #-124]	; 0xffffff84
   160e8:	ldr	r2, [fp, #-124]	; 0xffffff84
   160ec:	ldr	r3, [fp, #-128]	; 0xffffff80
   160f0:	cmp	r2, r3
   160f4:	beq	16138 <test@@Base+0x15c4>
   160f8:	b	1615c <test@@Base+0x15e8>
   160fc:	ldr	r3, [pc, #-1288]	; 15bfc <test@@Base+0x1088>
   16100:	ldr	r3, [r6, r3]
   16104:	ldr	r3, [r3]
   16108:	mov	r2, #58	; 0x3a
   1610c:	ldr	r1, [pc, #-1332]	; 15be0 <test@@Base+0x106c>
   16110:	add	r1, pc, r1
   16114:	mov	r0, r3
   16118:	bl	12468 <fprintf@plt>
   1611c:	mov	r3, #17
   16120:	ldr	r2, [fp, #-128]	; 0xffffff80
   16124:	ldr	r1, [fp, #-124]	; 0xffffff84
   16128:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1612c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   16130:	str	r0, [fp, #-124]	; 0xffffff84
   16134:	b	164c8 <test@@Base+0x1954>
   16138:	ldr	r3, [pc, #-1348]	; 15bfc <test@@Base+0x1088>
   1613c:	ldr	r3, [r6, r3]
   16140:	ldr	r3, [r3]
   16144:	mov	r2, #13
   16148:	mov	r1, #1
   1614c:	ldr	r0, [pc, #-1392]	; 15be4 <test@@Base+0x1070>
   16150:	add	r0, pc, r0
   16154:	bl	1242c <fwrite@plt>
   16158:	b	164c8 <test@@Base+0x1954>
   1615c:	ldr	r2, [fp, #-128]	; 0xffffff80
   16160:	ldr	r1, [fp, #-124]	; 0xffffff84
   16164:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16168:	bl	12650 <_start@@Base+0x190>
   1616c:	str	r0, [fp, #-124]	; 0xffffff84
   16170:	ldr	r3, [fp, #-124]	; 0xffffff84
   16174:	str	r3, [fp, #-56]	; 0xffffffc8
   16178:	ldr	r2, [fp, #-128]	; 0xffffff80
   1617c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16180:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16184:	bl	2301c <flatcc_json_parser_string_part@@Base>
   16188:	str	r0, [fp, #-124]	; 0xffffff84
   1618c:	ldr	r2, [fp, #-124]	; 0xffffff84
   16190:	ldr	r3, [fp, #-128]	; 0xffffff80
   16194:	cmp	r2, r3
   16198:	beq	164a4 <test@@Base+0x1930>
   1619c:	ldr	r3, [fp, #-124]	; 0xffffff84
   161a0:	ldrb	r3, [r3]
   161a4:	cmp	r3, #34	; 0x22
   161a8:	bne	161d0 <test@@Base+0x165c>
   161ac:	ldr	r2, [fp, #-124]	; 0xffffff84
   161b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   161b4:	sub	r3, r2, r3
   161b8:	mov	r2, r3
   161bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   161c0:	ldr	r0, [fp, #-120]	; 0xffffff88
   161c4:	bl	1bdbc <flatcc_builder_create_string@@Base>
   161c8:	str	r0, [fp, #-32]	; 0xffffffe0
   161cc:	b	162b0 <test@@Base+0x173c>
   161d0:	ldr	r0, [fp, #-120]	; 0xffffff88
   161d4:	bl	19a54 <flatcc_builder_start_string@@Base>
   161d8:	ldr	r2, [fp, #-124]	; 0xffffff84
   161dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   161e0:	sub	r3, r2, r3
   161e4:	mov	r1, r3
   161e8:	ldr	r0, [fp, #-120]	; 0xffffff88
   161ec:	bl	1936c <flatcc_builder_extend_string@@Base>
   161f0:	str	r0, [fp, #-64]	; 0xffffffc0
   161f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   161f8:	cmp	r3, #0
   161fc:	beq	164ac <test@@Base+0x1938>
   16200:	ldr	r2, [fp, #-124]	; 0xffffff84
   16204:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16208:	sub	r3, r2, r3
   1620c:	mov	r2, r3
   16210:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16214:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16218:	bl	12408 <memcpy@plt>
   1621c:	sub	r3, fp, #116	; 0x74
   16220:	ldr	r2, [fp, #-128]	; 0xffffff80
   16224:	ldr	r1, [fp, #-124]	; 0xffffff84
   16228:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1622c:	bl	232b0 <flatcc_json_parser_string_escape@@Base>
   16230:	str	r0, [fp, #-124]	; 0xffffff84
   16234:	sub	r1, fp, #116	; 0x74
   16238:	add	r1, r1, #1
   1623c:	ldrb	r3, [fp, #-116]	; 0xffffff8c
   16240:	mov	r2, r3
   16244:	ldr	r0, [fp, #-120]	; 0xffffff88
   16248:	bl	1940c <flatcc_builder_append_string@@Base>
   1624c:	ldr	r3, [fp, #-124]	; 0xffffff84
   16250:	str	r3, [fp, #-56]	; 0xffffffc8
   16254:	ldr	r2, [fp, #-128]	; 0xffffff80
   16258:	ldr	r1, [fp, #-124]	; 0xffffff84
   1625c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16260:	bl	2301c <flatcc_json_parser_string_part@@Base>
   16264:	str	r0, [fp, #-124]	; 0xffffff84
   16268:	ldr	r2, [fp, #-124]	; 0xffffff84
   1626c:	ldr	r3, [fp, #-128]	; 0xffffff80
   16270:	cmp	r2, r3
   16274:	beq	164b4 <test@@Base+0x1940>
   16278:	ldr	r2, [fp, #-124]	; 0xffffff84
   1627c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16280:	sub	r3, r2, r3
   16284:	mov	r2, r3
   16288:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1628c:	ldr	r0, [fp, #-120]	; 0xffffff88
   16290:	bl	1940c <flatcc_builder_append_string@@Base>
   16294:	ldr	r3, [fp, #-124]	; 0xffffff84
   16298:	ldrb	r3, [r3]
   1629c:	cmp	r3, #34	; 0x22
   162a0:	bne	1621c <test@@Base+0x16a8>
   162a4:	ldr	r0, [fp, #-120]	; 0xffffff88
   162a8:	bl	1c010 <flatcc_builder_end_string@@Base>
   162ac:	str	r0, [fp, #-32]	; 0xffffffe0
   162b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162b4:	cmp	r3, #0
   162b8:	beq	164bc <test@@Base+0x1948>
   162bc:	mov	r1, #10
   162c0:	ldr	r0, [fp, #-120]	; 0xffffff88
   162c4:	bl	1c3c4 <flatcc_builder_table_add_offset@@Base>
   162c8:	str	r0, [fp, #-68]	; 0xffffffbc
   162cc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   162d0:	cmp	r3, #0
   162d4:	beq	164c4 <test@@Base+0x1950>
   162d8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   162dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162e0:	str	r3, [r2]
   162e4:	ldr	r2, [fp, #-128]	; 0xffffff80
   162e8:	ldr	r1, [fp, #-124]	; 0xffffff84
   162ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   162f0:	bl	126cc <_start@@Base+0x20c>
   162f4:	str	r0, [fp, #-124]	; 0xffffff84
   162f8:	ldr	r2, [fp, #-128]	; 0xffffff80
   162fc:	ldr	r1, [fp, #-124]	; 0xffffff84
   16300:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16304:	bl	125b0 <_start@@Base+0xf0>
   16308:	str	r0, [fp, #-124]	; 0xffffff84
   1630c:	ldr	r2, [fp, #-124]	; 0xffffff84
   16310:	ldr	r3, [fp, #-128]	; 0xffffff80
   16314:	cmp	r2, r3
   16318:	bne	16340 <test@@Base+0x17cc>
   1631c:	ldr	r3, [pc, #-1832]	; 15bfc <test@@Base+0x1088>
   16320:	ldr	r3, [r6, r3]
   16324:	ldr	r3, [r3]
   16328:	mov	r2, #13
   1632c:	mov	r1, #1
   16330:	ldr	r0, [pc, #-1872]	; 15be8 <test@@Base+0x1074>
   16334:	add	r0, pc, r0
   16338:	bl	1242c <fwrite@plt>
   1633c:	b	164c8 <test@@Base+0x1954>
   16340:	ldr	r3, [fp, #-124]	; 0xffffff84
   16344:	ldrb	r3, [r3]
   16348:	cmp	r3, #44	; 0x2c
   1634c:	bne	163b8 <test@@Base+0x1844>
   16350:	ldr	r3, [fp, #-124]	; 0xffffff84
   16354:	add	r3, r3, #1
   16358:	str	r3, [fp, #-124]	; 0xffffff84
   1635c:	ldr	r2, [fp, #-128]	; 0xffffff80
   16360:	ldr	r1, [fp, #-124]	; 0xffffff84
   16364:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16368:	bl	125b0 <_start@@Base+0xf0>
   1636c:	str	r0, [fp, #-124]	; 0xffffff84
   16370:	ldr	r2, [fp, #-124]	; 0xffffff84
   16374:	ldr	r3, [fp, #-128]	; 0xffffff80
   16378:	cmp	r2, r3
   1637c:	bne	163a4 <test@@Base+0x1830>
   16380:	ldr	r3, [pc, #-1932]	; 15bfc <test@@Base+0x1088>
   16384:	ldr	r3, [r6, r3]
   16388:	ldr	r3, [r3]
   1638c:	mov	r2, #13
   16390:	mov	r1, #1
   16394:	ldr	r0, [pc, #-1968]	; 15bec <test@@Base+0x1078>
   16398:	add	r0, pc, r0
   1639c:	bl	1242c <fwrite@plt>
   163a0:	b	164c8 <test@@Base+0x1954>
   163a4:	ldr	r3, [fp, #-124]	; 0xffffff84
   163a8:	ldrb	r3, [r3]
   163ac:	cmp	r3, #125	; 0x7d
   163b0:	beq	163b8 <test@@Base+0x1844>
   163b4:	b	14d00 <test@@Base+0x18c>
   163b8:	ldr	r2, [fp, #-128]	; 0xffffff80
   163bc:	ldr	r3, [fp, #-124]	; 0xffffff84
   163c0:	cmp	r2, r3
   163c4:	bls	16424 <test@@Base+0x18b0>
   163c8:	ldr	r3, [fp, #-124]	; 0xffffff84
   163cc:	ldrb	r3, [r3]
   163d0:	cmp	r3, #125	; 0x7d
   163d4:	bne	16424 <test@@Base+0x18b0>
   163d8:	ldr	r3, [fp, #-124]	; 0xffffff84
   163dc:	add	r3, r3, #1
   163e0:	str	r3, [fp, #-124]	; 0xffffff84
   163e4:	ldr	r0, [fp, #-120]	; 0xffffff88
   163e8:	bl	1a704 <flatcc_builder_end_table@@Base>
   163ec:	str	r0, [fp, #-36]	; 0xffffffdc
   163f0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   163f4:	ldr	r0, [fp, #-120]	; 0xffffff88
   163f8:	bl	18b88 <flatcc_builder_end_buffer@@Base>
   163fc:	ldr	r2, [fp, #-128]	; 0xffffff80
   16400:	ldr	r1, [fp, #-124]	; 0xffffff84
   16404:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16408:	bl	125b0 <_start@@Base+0xf0>
   1640c:	str	r0, [fp, #-124]	; 0xffffff84
   16410:	ldr	r2, [fp, #-124]	; 0xffffff84
   16414:	ldr	r3, [fp, #-128]	; 0xffffff80
   16418:	cmp	r2, r3
   1641c:	bne	16460 <test@@Base+0x18ec>
   16420:	b	164c8 <test@@Base+0x1954>
   16424:	ldr	r3, [pc, #-2096]	; 15bfc <test@@Base+0x1088>
   16428:	ldr	r3, [r6, r3]
   1642c:	ldr	r3, [r3]
   16430:	mov	r2, #125	; 0x7d
   16434:	ldr	r1, [pc, #-2124]	; 15bf0 <test@@Base+0x107c>
   16438:	add	r1, pc, r1
   1643c:	mov	r0, r3
   16440:	bl	12468 <fprintf@plt>
   16444:	mov	r3, #17
   16448:	ldr	r2, [fp, #-128]	; 0xffffff80
   1644c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16450:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16454:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   16458:	str	r0, [fp, #-124]	; 0xffffff84
   1645c:	b	164c8 <test@@Base+0x1954>
   16460:	ldr	r3, [pc, #-2156]	; 15bfc <test@@Base+0x1088>
   16464:	ldr	r3, [r6, r3]
   16468:	ldr	r3, [r3]
   1646c:	mov	r2, #26
   16470:	mov	r1, #1
   16474:	ldr	r0, [pc, #-2184]	; 15bf4 <test@@Base+0x1080>
   16478:	add	r0, pc, r0
   1647c:	bl	1242c <fwrite@plt>
   16480:	b	164c8 <test@@Base+0x1954>
   16484:	nop	{0}
   16488:	b	164c8 <test@@Base+0x1954>
   1648c:	nop	{0}
   16490:	b	164c8 <test@@Base+0x1954>
   16494:	nop	{0}
   16498:	b	164c8 <test@@Base+0x1954>
   1649c:	nop	{0}
   164a0:	b	164c8 <test@@Base+0x1954>
   164a4:	nop	{0}
   164a8:	b	164c8 <test@@Base+0x1954>
   164ac:	nop	{0}
   164b0:	b	164c8 <test@@Base+0x1954>
   164b4:	nop	{0}
   164b8:	b	164c8 <test@@Base+0x1954>
   164bc:	nop	{0}
   164c0:	b	164c8 <test@@Base+0x1954>
   164c4:	nop	{0}
   164c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   164cc:	ldr	r3, [r3, #24]
   164d0:	cmp	r3, #0
   164d4:	beq	16540 <test@@Base+0x19cc>
   164d8:	ldr	r3, [pc, #-2276]	; 15bfc <test@@Base+0x1088>
   164dc:	ldr	r3, [r6, r3]
   164e0:	ldr	r4, [r3]
   164e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   164e8:	ldr	r5, [r3, #16]
   164ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   164f0:	ldr	r2, [r3, #36]	; 0x24
   164f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   164f8:	ldr	r3, [r3, #4]
   164fc:	sub	r3, r2, r3
   16500:	add	r6, r3, #1
   16504:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16508:	ldr	r3, [r3, #24]
   1650c:	mov	r0, r3
   16510:	bl	22cb0 <flatcc_json_parser_error_string@@Base>
   16514:	mov	r3, r0
   16518:	str	r3, [sp]
   1651c:	mov	r3, r6
   16520:	mov	r2, r5
   16524:	ldr	r1, [pc, #-2356]	; 15bf8 <test@@Base+0x1084>
   16528:	add	r1, pc, r1
   1652c:	mov	r0, r4
   16530:	bl	12468 <fprintf@plt>
   16534:	ldr	r0, [fp, #-120]	; 0xffffff88
   16538:	bl	176b0 <flatcc_builder_reset@@Base>
   1653c:	b	16560 <test@@Base+0x19ec>
   16540:	ldr	r3, [pc, #-2380]	; 15bfc <test@@Base+0x1088>
   16544:	ldr	r3, [r6, r3]
   16548:	ldr	r3, [r3]
   1654c:	mov	r2, #15
   16550:	mov	r1, #1
   16554:	ldr	r0, [pc, #-2396]	; 15c00 <test@@Base+0x108c>
   16558:	add	r0, pc, r0
   1655c:	bl	1242c <fwrite@plt>
   16560:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16564:	ldr	r2, [r3, #24]
   16568:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1656c:	str	r2, [r3]
   16570:	ldr	r3, [fp, #-124]	; 0xffffff84
   16574:	mov	r0, r3
   16578:	sub	sp, fp, #24
   1657c:	ldrd	r4, [sp]
   16580:	ldr	r6, [sp, #8]
   16584:	ldrd	r8, [sp, #12]
   16588:	ldr	fp, [sp, #20]
   1658c:	add	sp, sp, #24
   16590:	pop	{pc}		; (ldr pc, [sp], #4)

00016594 <main@@Base>:
   16594:	str	r4, [sp, #-12]!
   16598:	str	fp, [sp, #4]
   1659c:	str	lr, [sp, #8]
   165a0:	add	fp, sp, #8
   165a4:	sub	sp, sp, #244	; 0xf4
   165a8:	ldr	r4, [pc, #96]	; 16610 <main@@Base+0x7c>
   165ac:	add	r4, pc, r4
   165b0:	mvn	r3, #0
   165b4:	str	r3, [fp, #-16]
   165b8:	sub	r3, fp, #248	; 0xf8
   165bc:	mov	r0, r3
   165c0:	bl	17410 <flatcc_builder_init@@Base>
   165c4:	ldr	r3, [pc, #72]	; 16614 <main@@Base+0x80>
   165c8:	ldr	r3, [r4, r3]
   165cc:	add	r2, r3, #644	; 0x284
   165d0:	add	r2, r2, #1
   165d4:	sub	r3, fp, #16
   165d8:	sub	r0, fp, #248	; 0xf8
   165dc:	ldr	r1, [pc, #48]	; 16614 <main@@Base+0x80>
   165e0:	ldr	r1, [r4, r1]
   165e4:	bl	14b74 <test@@Base>
   165e8:	sub	r3, fp, #248	; 0xf8
   165ec:	mov	r0, r3
   165f0:	bl	176ec <flatcc_builder_clear@@Base>
   165f4:	ldr	r3, [fp, #-16]
   165f8:	mov	r0, r3
   165fc:	sub	sp, fp, #8
   16600:	ldr	r4, [sp]
   16604:	ldr	fp, [sp, #4]
   16608:	add	sp, sp, #8
   1660c:	pop	{pc}		; (ldr pc, [sp], #4)
   16610:	andeq	r2, r2, ip, asr #20
   16614:	andeq	r0, r0, ip, asr #32
   16618:	str	fp, [sp, #-8]!
   1661c:	str	lr, [sp, #4]
   16620:	add	fp, sp, #4
   16624:	sub	sp, sp, #16
   16628:	str	r0, [fp, #-16]
   1662c:	str	r1, [fp, #-20]	; 0xffffffec
   16630:	mov	r3, #0
   16634:	str	r3, [fp, #-12]
   16638:	ldr	r3, [fp, #-16]
   1663c:	cmp	r3, #3
   16640:	bhi	1664c <main@@Base+0xb8>
   16644:	mov	r3, #4
   16648:	str	r3, [fp, #-16]
   1664c:	sub	r3, fp, #12
   16650:	ldr	r2, [fp, #-20]	; 0xffffffec
   16654:	ldr	r1, [fp, #-16]
   16658:	mov	r0, r3
   1665c:	bl	12474 <posix_memalign@plt>
   16660:	str	r0, [fp, #-8]
   16664:	ldr	r3, [fp, #-8]
   16668:	cmp	r3, #0
   1666c:	beq	16690 <main@@Base+0xfc>
   16670:	ldr	r3, [fp, #-12]
   16674:	cmp	r3, #0
   16678:	beq	16690 <main@@Base+0xfc>
   1667c:	ldr	r3, [fp, #-12]
   16680:	mov	r0, r3
   16684:	bl	123fc <free@plt>
   16688:	mov	r3, #0
   1668c:	str	r3, [fp, #-12]
   16690:	ldr	r3, [fp, #-12]
   16694:	mov	r0, r3
   16698:	sub	sp, fp, #4
   1669c:	ldr	fp, [sp]
   166a0:	add	sp, sp, #4
   166a4:	pop	{pc}		; (ldr pc, [sp], #4)
   166a8:	push	{fp}		; (str fp, [sp, #-4]!)
   166ac:	add	fp, sp, #0
   166b0:	sub	sp, sp, #12
   166b4:	str	r0, [fp, #-8]
   166b8:	ldr	r3, [fp, #-8]
   166bc:	mov	r0, r3
   166c0:	add	sp, fp, #0
   166c4:	pop	{fp}		; (ldr fp, [sp], #4)
   166c8:	bx	lr
   166cc:	push	{fp}		; (str fp, [sp, #-4]!)
   166d0:	add	fp, sp, #0
   166d4:	sub	sp, sp, #12
   166d8:	mov	r3, r0
   166dc:	strb	r3, [fp, #-5]
   166e0:	ldrb	r3, [fp, #-5]
   166e4:	mov	r0, r3
   166e8:	add	sp, fp, #0
   166ec:	pop	{fp}		; (ldr fp, [sp], #4)
   166f0:	bx	lr
   166f4:	push	{fp}		; (str fp, [sp, #-4]!)
   166f8:	add	fp, sp, #0
   166fc:	sub	sp, sp, #12
   16700:	str	r0, [fp, #-8]
   16704:	ldr	r3, [fp, #-8]
   16708:	mov	r0, r3
   1670c:	add	sp, fp, #0
   16710:	pop	{fp}		; (ldr fp, [sp], #4)
   16714:	bx	lr
   16718:	push	{fp}		; (str fp, [sp, #-4]!)
   1671c:	add	fp, sp, #0
   16720:	sub	sp, sp, #12
   16724:	str	r0, [fp, #-8]
   16728:	str	r1, [fp, #-12]
   1672c:	ldr	r3, [fp, #-8]
   16730:	ldr	r2, [r3]
   16734:	ldr	r3, [fp, #-8]
   16738:	ldr	r3, [r3, #4]
   1673c:	cmp	r2, r3
   16740:	bne	1676c <main@@Base+0x1d8>
   16744:	ldr	r3, [fp, #-12]
   16748:	cmp	r3, #0
   1674c:	beq	16760 <main@@Base+0x1cc>
   16750:	ldr	r3, [fp, #-8]
   16754:	ldr	r2, [r3, #24]
   16758:	ldr	r3, [fp, #-12]
   1675c:	str	r2, [r3]
   16760:	ldr	r3, [fp, #-8]
   16764:	ldr	r3, [r3, #8]
   16768:	b	16788 <main@@Base+0x1f4>
   1676c:	ldr	r3, [fp, #-12]
   16770:	cmp	r3, #0
   16774:	beq	16784 <main@@Base+0x1f0>
   16778:	ldr	r3, [fp, #-12]
   1677c:	mov	r2, #0
   16780:	str	r2, [r3]
   16784:	mov	r3, #0
   16788:	mov	r0, r3
   1678c:	add	sp, fp, #0
   16790:	pop	{fp}		; (ldr fp, [sp], #4)
   16794:	bx	lr
   16798:	str	fp, [sp, #-8]!
   1679c:	str	lr, [sp, #4]
   167a0:	add	fp, sp, #4
   167a4:	sub	sp, sp, #16
   167a8:	str	r0, [fp, #-16]
   167ac:	str	r1, [fp, #-20]	; 0xffffffec
   167b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   167b4:	mov	r1, #0
   167b8:	ldr	r0, [fp, #-16]
   167bc:	bl	12498 <memchr@plt>
   167c0:	str	r0, [fp, #-8]
   167c4:	ldr	r3, [fp, #-8]
   167c8:	cmp	r3, #0
   167cc:	beq	167e0 <main@@Base+0x24c>
   167d0:	ldr	r2, [fp, #-8]
   167d4:	ldr	r3, [fp, #-16]
   167d8:	sub	r3, r2, r3
   167dc:	b	167e4 <main@@Base+0x250>
   167e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   167e4:	mov	r0, r3
   167e8:	sub	sp, fp, #4
   167ec:	ldr	fp, [sp]
   167f0:	add	sp, sp, #4
   167f4:	pop	{pc}		; (ldr pc, [sp], #4)

000167f8 <flatcc_builder_default_alloc@@Base>:
   167f8:	str	fp, [sp, #-8]!
   167fc:	str	lr, [sp, #4]
   16800:	add	fp, sp, #4
   16804:	sub	sp, sp, #24
   16808:	str	r0, [fp, #-16]
   1680c:	str	r1, [fp, #-20]	; 0xffffffec
   16810:	str	r2, [fp, #-24]	; 0xffffffe8
   16814:	str	r3, [fp, #-28]	; 0xffffffe4
   16818:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1681c:	cmp	r3, #0
   16820:	bne	16864 <flatcc_builder_default_alloc@@Base+0x6c>
   16824:	ldr	r3, [fp, #-20]	; 0xffffffec
   16828:	ldr	r3, [r3]
   1682c:	cmp	r3, #0
   16830:	beq	1685c <flatcc_builder_default_alloc@@Base+0x64>
   16834:	ldr	r3, [fp, #-20]	; 0xffffffec
   16838:	ldr	r3, [r3]
   1683c:	mov	r0, r3
   16840:	bl	123fc <free@plt>
   16844:	ldr	r3, [fp, #-20]	; 0xffffffec
   16848:	mov	r2, #0
   1684c:	str	r2, [r3]
   16850:	ldr	r3, [fp, #-20]	; 0xffffffec
   16854:	mov	r2, #0
   16858:	str	r2, [r3, #4]
   1685c:	mov	r3, #0
   16860:	b	169b8 <flatcc_builder_default_alloc@@Base+0x1c0>
   16864:	ldr	r3, [fp, #4]
   16868:	sub	r3, r3, #1
   1686c:	cmp	r3, #6
   16870:	addls	pc, pc, r3, lsl #2
   16874:	b	168c4 <flatcc_builder_default_alloc@@Base+0xcc>
   16878:	b	16894 <flatcc_builder_default_alloc@@Base+0x9c>
   1687c:	b	168c4 <flatcc_builder_default_alloc@@Base+0xcc>
   16880:	b	168c4 <flatcc_builder_default_alloc@@Base+0xcc>
   16884:	b	168ac <flatcc_builder_default_alloc@@Base+0xb4>
   16888:	b	168a0 <flatcc_builder_default_alloc@@Base+0xa8>
   1688c:	b	168c4 <flatcc_builder_default_alloc@@Base+0xcc>
   16890:	b	168b8 <flatcc_builder_default_alloc@@Base+0xc0>
   16894:	mov	r3, #256	; 0x100
   16898:	str	r3, [fp, #-8]
   1689c:	b	168d0 <flatcc_builder_default_alloc@@Base+0xd8>
   168a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168a4:	str	r3, [fp, #-8]
   168a8:	b	168d0 <flatcc_builder_default_alloc@@Base+0xd8>
   168ac:	mov	r3, #288	; 0x120
   168b0:	str	r3, [fp, #-8]
   168b4:	b	168d0 <flatcc_builder_default_alloc@@Base+0xd8>
   168b8:	mov	r3, #64	; 0x40
   168bc:	str	r3, [fp, #-8]
   168c0:	b	168d0 <flatcc_builder_default_alloc@@Base+0xd8>
   168c4:	mov	r3, #32
   168c8:	str	r3, [fp, #-8]
   168cc:	nop	{0}
   168d0:	b	168e0 <flatcc_builder_default_alloc@@Base+0xe8>
   168d4:	ldr	r3, [fp, #-8]
   168d8:	lsl	r3, r3, #1
   168dc:	str	r3, [fp, #-8]
   168e0:	ldr	r2, [fp, #-8]
   168e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168e8:	cmp	r2, r3
   168ec:	bcc	168d4 <flatcc_builder_default_alloc@@Base+0xdc>
   168f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   168f4:	ldr	r3, [r3, #4]
   168f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   168fc:	cmp	r2, r3
   16900:	bhi	16924 <flatcc_builder_default_alloc@@Base+0x12c>
   16904:	ldr	r3, [fp, #-20]	; 0xffffffec
   16908:	ldr	r3, [r3, #4]
   1690c:	lsr	r3, r3, #1
   16910:	ldr	r2, [fp, #-8]
   16914:	cmp	r2, r3
   16918:	bhi	16924 <flatcc_builder_default_alloc@@Base+0x12c>
   1691c:	mov	r3, #0
   16920:	b	169b8 <flatcc_builder_default_alloc@@Base+0x1c0>
   16924:	ldr	r3, [fp, #-20]	; 0xffffffec
   16928:	ldr	r3, [r3]
   1692c:	ldr	r1, [fp, #-8]
   16930:	mov	r0, r3
   16934:	bl	12420 <realloc@plt>
   16938:	str	r0, [fp, #-12]
   1693c:	ldr	r3, [fp, #-12]
   16940:	cmp	r3, #0
   16944:	bne	16950 <flatcc_builder_default_alloc@@Base+0x158>
   16948:	mvn	r3, #0
   1694c:	b	169b8 <flatcc_builder_default_alloc@@Base+0x1c0>
   16950:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16954:	cmp	r3, #0
   16958:	beq	1699c <flatcc_builder_default_alloc@@Base+0x1a4>
   1695c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16960:	ldr	r3, [r3, #4]
   16964:	ldr	r2, [fp, #-8]
   16968:	cmp	r2, r3
   1696c:	bls	1699c <flatcc_builder_default_alloc@@Base+0x1a4>
   16970:	ldr	r3, [fp, #-20]	; 0xffffffec
   16974:	ldr	r3, [r3, #4]
   16978:	ldr	r2, [fp, #-12]
   1697c:	add	r0, r2, r3
   16980:	ldr	r3, [fp, #-20]	; 0xffffffec
   16984:	ldr	r3, [r3, #4]
   16988:	ldr	r2, [fp, #-8]
   1698c:	sub	r3, r2, r3
   16990:	mov	r2, r3
   16994:	mov	r1, #0
   16998:	bl	12480 <memset@plt>
   1699c:	ldr	r3, [fp, #-20]	; 0xffffffec
   169a0:	ldr	r2, [fp, #-12]
   169a4:	str	r2, [r3]
   169a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   169ac:	ldr	r2, [fp, #-8]
   169b0:	str	r2, [r3, #4]
   169b4:	mov	r3, #0
   169b8:	mov	r0, r3
   169bc:	sub	sp, fp, #4
   169c0:	ldr	fp, [sp]
   169c4:	add	sp, sp, #4
   169c8:	pop	{pc}		; (ldr pc, [sp], #4)
   169cc:	push	{fp}		; (str fp, [sp, #-4]!)
   169d0:	add	fp, sp, #0
   169d4:	sub	sp, sp, #20
   169d8:	str	r0, [fp, #-16]
   169dc:	str	r1, [fp, #-20]	; 0xffffffec
   169e0:	ldr	r3, [fp, #-16]
   169e4:	add	r3, r3, #52	; 0x34
   169e8:	add	r3, r3, #8
   169ec:	str	r3, [fp, #-8]
   169f0:	ldr	r3, [fp, #-16]
   169f4:	ldr	r2, [r3, #60]	; 0x3c
   169f8:	ldr	r3, [fp, #-16]
   169fc:	ldr	r3, [r3, #28]
   16a00:	add	r2, r2, r3
   16a04:	ldr	r3, [fp, #-16]
   16a08:	str	r2, [r3, #16]
   16a0c:	ldr	r3, [fp, #-8]
   16a10:	ldr	r2, [r3, #4]
   16a14:	ldr	r3, [fp, #-16]
   16a18:	ldr	r3, [r3, #28]
   16a1c:	sub	r2, r2, r3
   16a20:	ldr	r3, [fp, #-16]
   16a24:	str	r2, [r3, #24]
   16a28:	ldr	r3, [fp, #-16]
   16a2c:	ldr	r3, [r3, #24]
   16a30:	ldr	r2, [fp, #-20]	; 0xffffffec
   16a34:	cmp	r2, r3
   16a38:	bcs	16a48 <flatcc_builder_default_alloc@@Base+0x250>
   16a3c:	ldr	r3, [fp, #-16]
   16a40:	ldr	r2, [fp, #-20]	; 0xffffffec
   16a44:	str	r2, [r3, #24]
   16a48:	ldr	r3, [fp, #-16]
   16a4c:	ldr	r3, [r3, #32]
   16a50:	ldr	r2, [fp, #-20]	; 0xffffffec
   16a54:	str	r2, [r3, #4]
   16a58:	nop	{0}
   16a5c:	add	sp, fp, #0
   16a60:	pop	{fp}		; (ldr fp, [sp], #4)
   16a64:	bx	lr
   16a68:	str	r4, [sp, #-12]!
   16a6c:	str	fp, [sp, #4]
   16a70:	str	lr, [sp, #8]
   16a74:	add	fp, sp, #8
   16a78:	sub	sp, sp, #36	; 0x24
   16a7c:	str	r0, [fp, #-24]	; 0xffffffe8
   16a80:	str	r1, [fp, #-28]	; 0xffffffe4
   16a84:	str	r2, [fp, #-32]	; 0xffffffe0
   16a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a8c:	add	r3, r3, #52	; 0x34
   16a90:	add	r3, r3, #8
   16a94:	str	r3, [fp, #-16]
   16a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a9c:	ldr	r4, [r3, #48]	; 0x30
   16aa0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16aa4:	ldr	r0, [r3, #40]	; 0x28
   16aa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16aac:	ldr	r2, [r3, #28]
   16ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ab4:	add	r2, r2, r3
   16ab8:	mov	r3, #1
   16abc:	str	r3, [sp]
   16ac0:	mov	r3, #1
   16ac4:	ldr	r1, [fp, #-16]
   16ac8:	blx	r4
   16acc:	mov	r3, r0
   16ad0:	cmp	r3, #0
   16ad4:	beq	16ae0 <flatcc_builder_default_alloc@@Base+0x2e8>
   16ad8:	mvn	r3, #0
   16adc:	b	16af0 <flatcc_builder_default_alloc@@Base+0x2f8>
   16ae0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16ae4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ae8:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   16aec:	mov	r3, #0
   16af0:	mov	r0, r3
   16af4:	sub	sp, fp, #8
   16af8:	ldr	r4, [sp]
   16afc:	ldr	fp, [sp, #4]
   16b00:	add	sp, sp, #8
   16b04:	pop	{pc}		; (ldr pc, [sp], #4)
   16b08:	str	fp, [sp, #-8]!
   16b0c:	str	lr, [sp, #4]
   16b10:	add	fp, sp, #4
   16b14:	sub	sp, sp, #16
   16b18:	str	r0, [fp, #-16]
   16b1c:	str	r1, [fp, #-20]	; 0xffffffec
   16b20:	ldr	r3, [fp, #-16]
   16b24:	ldr	r3, [r3, #20]
   16b28:	str	r3, [fp, #-8]
   16b2c:	ldr	r3, [fp, #-16]
   16b30:	ldr	r2, [r3, #20]
   16b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b38:	add	r2, r2, r3
   16b3c:	ldr	r3, [fp, #-16]
   16b40:	str	r2, [r3, #20]
   16b44:	ldr	r3, [fp, #-16]
   16b48:	ldr	r2, [r3, #20]
   16b4c:	ldr	r3, [fp, #-16]
   16b50:	ldr	r3, [r3, #24]
   16b54:	cmp	r2, r3
   16b58:	bcc	16b8c <flatcc_builder_default_alloc@@Base+0x394>
   16b5c:	ldr	r3, [fp, #-16]
   16b60:	ldr	r3, [r3, #20]
   16b64:	add	r3, r3, #1
   16b68:	mvn	r2, #3
   16b6c:	mov	r1, r3
   16b70:	ldr	r0, [fp, #-16]
   16b74:	bl	16a68 <flatcc_builder_default_alloc@@Base+0x270>
   16b78:	mov	r3, r0
   16b7c:	cmp	r3, #0
   16b80:	beq	16b8c <flatcc_builder_default_alloc@@Base+0x394>
   16b84:	mov	r3, #0
   16b88:	b	16b9c <flatcc_builder_default_alloc@@Base+0x3a4>
   16b8c:	ldr	r3, [fp, #-16]
   16b90:	ldr	r2, [r3, #16]
   16b94:	ldr	r3, [fp, #-8]
   16b98:	add	r3, r2, r3
   16b9c:	mov	r0, r3
   16ba0:	sub	sp, fp, #4
   16ba4:	ldr	fp, [sp]
   16ba8:	add	sp, sp, #4
   16bac:	pop	{pc}		; (ldr pc, [sp], #4)
   16bb0:	str	fp, [sp, #-8]!
   16bb4:	str	lr, [sp, #4]
   16bb8:	add	fp, sp, #4
   16bbc:	sub	sp, sp, #8
   16bc0:	str	r0, [fp, #-8]
   16bc4:	str	r1, [fp, #-12]
   16bc8:	ldr	r3, [fp, #-8]
   16bcc:	ldr	r2, [r3, #20]
   16bd0:	ldr	r3, [fp, #-12]
   16bd4:	sub	r2, r2, r3
   16bd8:	ldr	r3, [fp, #-8]
   16bdc:	str	r2, [r3, #20]
   16be0:	ldr	r3, [fp, #-8]
   16be4:	ldr	r2, [r3, #16]
   16be8:	ldr	r3, [fp, #-8]
   16bec:	ldr	r3, [r3, #20]
   16bf0:	add	r3, r2, r3
   16bf4:	ldr	r2, [fp, #-12]
   16bf8:	mov	r1, #0
   16bfc:	mov	r0, r3
   16c00:	bl	12480 <memset@plt>
   16c04:	nop	{0}
   16c08:	sub	sp, fp, #4
   16c0c:	ldr	fp, [sp]
   16c10:	add	sp, sp, #4
   16c14:	pop	{pc}		; (ldr pc, [sp], #4)
   16c18:	str	fp, [sp, #-8]!
   16c1c:	str	lr, [sp, #4]
   16c20:	add	fp, sp, #4
   16c24:	sub	sp, sp, #24
   16c28:	str	r0, [fp, #-16]
   16c2c:	str	r1, [fp, #-20]	; 0xffffffec
   16c30:	str	r2, [fp, #-24]	; 0xffffffe8
   16c34:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c38:	ldr	r0, [fp, #-16]
   16c3c:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   16c40:	str	r0, [fp, #-8]
   16c44:	ldr	r3, [fp, #-8]
   16c48:	cmp	r3, #0
   16c4c:	bne	16c58 <flatcc_builder_default_alloc@@Base+0x460>
   16c50:	mov	r3, #0
   16c54:	b	16c6c <flatcc_builder_default_alloc@@Base+0x474>
   16c58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16c5c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c60:	ldr	r0, [fp, #-8]
   16c64:	bl	12408 <memcpy@plt>
   16c68:	ldr	r3, [fp, #-8]
   16c6c:	mov	r0, r3
   16c70:	sub	sp, fp, #4
   16c74:	ldr	fp, [sp]
   16c78:	add	sp, sp, #4
   16c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c80:	str	fp, [sp, #-8]!
   16c84:	str	lr, [sp, #4]
   16c88:	add	fp, sp, #4
   16c8c:	sub	sp, sp, #24
   16c90:	str	r0, [fp, #-16]
   16c94:	str	r1, [fp, #-20]	; 0xffffffec
   16c98:	mov	r1, r2
   16c9c:	mov	r2, r3
   16ca0:	mov	r3, r1
   16ca4:	strh	r3, [fp, #-22]	; 0xffffffea
   16ca8:	mov	r3, r2
   16cac:	strh	r3, [fp, #-24]	; 0xffffffe8
   16cb0:	ldr	r3, [fp, #-16]
   16cb4:	ldr	r2, [r3, #20]
   16cb8:	ldrh	r3, [fp, #-22]	; 0xffffffea
   16cbc:	add	r3, r2, r3
   16cc0:	sub	r3, r3, #1
   16cc4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   16cc8:	rsb	r2, r2, #0
   16ccc:	and	r3, r3, r2
   16cd0:	str	r3, [fp, #-8]
   16cd4:	ldr	r2, [fp, #-8]
   16cd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cdc:	add	r2, r2, r3
   16ce0:	ldr	r3, [fp, #-16]
   16ce4:	str	r2, [r3, #20]
   16ce8:	ldr	r3, [fp, #-16]
   16cec:	ldr	r2, [r3, #20]
   16cf0:	ldr	r3, [fp, #-16]
   16cf4:	ldr	r3, [r3, #24]
   16cf8:	cmp	r2, r3
   16cfc:	bcc	16d30 <flatcc_builder_default_alloc@@Base+0x538>
   16d00:	ldr	r3, [fp, #-16]
   16d04:	ldr	r3, [r3, #20]
   16d08:	add	r3, r3, #1
   16d0c:	movw	r2, #65532	; 0xfffc
   16d10:	mov	r1, r3
   16d14:	ldr	r0, [fp, #-16]
   16d18:	bl	16a68 <flatcc_builder_default_alloc@@Base+0x270>
   16d1c:	mov	r3, r0
   16d20:	cmp	r3, #0
   16d24:	beq	16d30 <flatcc_builder_default_alloc@@Base+0x538>
   16d28:	mov	r3, #0
   16d2c:	b	16d90 <flatcc_builder_default_alloc@@Base+0x598>
   16d30:	ldr	r3, [fp, #-8]
   16d34:	uxth	r2, r3
   16d38:	ldr	r3, [fp, #-16]
   16d3c:	ldr	r1, [r3, #4]
   16d40:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   16d44:	lsl	r3, r3, #1
   16d48:	add	r3, r1, r3
   16d4c:	add	r2, r2, #4
   16d50:	uxth	r2, r2
   16d54:	strh	r2, [r3]
   16d58:	ldr	r3, [fp, #-16]
   16d5c:	ldrh	r3, [r3, #8]
   16d60:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   16d64:	cmp	r2, r3
   16d68:	bcc	16d80 <flatcc_builder_default_alloc@@Base+0x588>
   16d6c:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   16d70:	add	r3, r3, #1
   16d74:	uxth	r2, r3
   16d78:	ldr	r3, [fp, #-16]
   16d7c:	strh	r2, [r3, #8]
   16d80:	ldr	r3, [fp, #-16]
   16d84:	ldr	r2, [r3, #16]
   16d88:	ldr	r3, [fp, #-8]
   16d8c:	add	r3, r2, r3
   16d90:	mov	r0, r3
   16d94:	sub	sp, fp, #4
   16d98:	ldr	fp, [sp]
   16d9c:	add	sp, sp, #4
   16da0:	pop	{pc}		; (ldr pc, [sp], #4)
   16da4:	str	fp, [sp, #-8]!
   16da8:	str	lr, [sp, #4]
   16dac:	add	fp, sp, #4
   16db0:	sub	sp, sp, #16
   16db4:	str	r0, [fp, #-16]
   16db8:	mov	r3, r1
   16dbc:	strh	r3, [fp, #-18]	; 0xffffffee
   16dc0:	ldr	r3, [fp, #-16]
   16dc4:	ldr	r3, [r3, #20]
   16dc8:	add	r3, r3, #3
   16dcc:	bic	r3, r3, #3
   16dd0:	str	r3, [fp, #-8]
   16dd4:	ldr	r3, [fp, #-8]
   16dd8:	add	r2, r3, #4
   16ddc:	ldr	r3, [fp, #-16]
   16de0:	str	r2, [r3, #20]
   16de4:	ldr	r3, [fp, #-16]
   16de8:	ldr	r2, [r3, #20]
   16dec:	ldr	r3, [fp, #-16]
   16df0:	ldr	r3, [r3, #24]
   16df4:	cmp	r2, r3
   16df8:	bls	16e28 <flatcc_builder_default_alloc@@Base+0x630>
   16dfc:	ldr	r3, [fp, #-16]
   16e00:	ldr	r3, [r3, #20]
   16e04:	movw	r2, #65532	; 0xfffc
   16e08:	mov	r1, r3
   16e0c:	ldr	r0, [fp, #-16]
   16e10:	bl	16a68 <flatcc_builder_default_alloc@@Base+0x270>
   16e14:	mov	r3, r0
   16e18:	cmp	r3, #0
   16e1c:	beq	16e28 <flatcc_builder_default_alloc@@Base+0x630>
   16e20:	mov	r3, #0
   16e24:	b	16ea8 <flatcc_builder_default_alloc@@Base+0x6b0>
   16e28:	ldr	r3, [fp, #-8]
   16e2c:	uxth	r2, r3
   16e30:	ldr	r3, [fp, #-16]
   16e34:	ldr	r1, [r3, #4]
   16e38:	ldrh	r3, [fp, #-18]	; 0xffffffee
   16e3c:	lsl	r3, r3, #1
   16e40:	add	r3, r1, r3
   16e44:	add	r2, r2, #4
   16e48:	uxth	r2, r2
   16e4c:	strh	r2, [r3]
   16e50:	ldr	r3, [fp, #-16]
   16e54:	ldrh	r3, [r3, #8]
   16e58:	ldrh	r2, [fp, #-18]	; 0xffffffee
   16e5c:	cmp	r2, r3
   16e60:	bcc	16e78 <flatcc_builder_default_alloc@@Base+0x680>
   16e64:	ldrh	r3, [fp, #-18]	; 0xffffffee
   16e68:	add	r3, r3, #1
   16e6c:	uxth	r2, r3
   16e70:	ldr	r3, [fp, #-16]
   16e74:	strh	r2, [r3, #8]
   16e78:	ldr	r3, [fp, #-16]
   16e7c:	ldr	r3, [r3]
   16e80:	add	r1, r3, #2
   16e84:	ldr	r2, [fp, #-16]
   16e88:	str	r1, [r2]
   16e8c:	ldr	r2, [fp, #-8]
   16e90:	uxth	r2, r2
   16e94:	strh	r2, [r3]
   16e98:	ldr	r3, [fp, #-16]
   16e9c:	ldr	r2, [r3, #16]
   16ea0:	ldr	r3, [fp, #-8]
   16ea4:	add	r3, r2, r3
   16ea8:	mov	r0, r3
   16eac:	sub	sp, fp, #4
   16eb0:	ldr	fp, [sp]
   16eb4:	add	sp, sp, #4
   16eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ebc:	str	r4, [sp, #-12]!
   16ec0:	str	fp, [sp, #4]
   16ec4:	str	lr, [sp, #8]
   16ec8:	add	fp, sp, #8
   16ecc:	sub	sp, sp, #36	; 0x24
   16ed0:	str	r0, [fp, #-24]	; 0xffffffe8
   16ed4:	str	r1, [fp, #-28]	; 0xffffffe4
   16ed8:	str	r2, [fp, #-32]	; 0xffffffe0
   16edc:	str	r3, [fp, #-36]	; 0xffffffdc
   16ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ee4:	add	r2, r3, #52	; 0x34
   16ee8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16eec:	lsl	r3, r3, #3
   16ef0:	add	r3, r2, r3
   16ef4:	str	r3, [fp, #-16]
   16ef8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16efc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16f00:	add	r2, r2, r3
   16f04:	ldr	r3, [fp, #-16]
   16f08:	ldr	r3, [r3, #4]
   16f0c:	cmp	r2, r3
   16f10:	bls	16f70 <flatcc_builder_default_alloc@@Base+0x778>
   16f14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f18:	ldr	r4, [r3, #48]	; 0x30
   16f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f20:	ldr	r0, [r3, #40]	; 0x28
   16f24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16f28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16f2c:	add	r2, r2, r3
   16f30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f34:	str	r3, [sp]
   16f38:	ldr	r3, [fp, #4]
   16f3c:	ldr	r1, [fp, #-16]
   16f40:	blx	r4
   16f44:	mov	r3, r0
   16f48:	cmp	r3, #0
   16f4c:	beq	16f70 <flatcc_builder_default_alloc@@Base+0x778>
   16f50:	ldr	r3, [pc, #68]	; 16f9c <flatcc_builder_default_alloc@@Base+0x7a4>
   16f54:	add	r3, pc, r3
   16f58:	mov	r2, #308	; 0x134
   16f5c:	ldr	r1, [pc, #60]	; 16fa0 <flatcc_builder_default_alloc@@Base+0x7a8>
   16f60:	add	r1, pc, r1
   16f64:	ldr	r0, [pc, #56]	; 16fa4 <flatcc_builder_default_alloc@@Base+0x7ac>
   16f68:	add	r0, pc, r0
   16f6c:	bl	124b0 <__assert_fail@plt>
   16f70:	ldr	r3, [fp, #-16]
   16f74:	ldr	r3, [r3]
   16f78:	mov	r2, r3
   16f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16f80:	add	r3, r2, r3
   16f84:	mov	r0, r3
   16f88:	sub	sp, fp, #8
   16f8c:	ldr	r4, [sp]
   16f90:	ldr	fp, [sp, #4]
   16f94:	add	sp, sp, #8
   16f98:	pop	{pc}		; (ldr pc, [sp], #4)
   16f9c:	strdeq	r0, [r1], -ip
   16fa0:			; <UNDEFINED> instruction: 0x0000ffbc
   16fa4:	andeq	r0, r1, r4, lsl r0
   16fa8:	str	fp, [sp, #-8]!
   16fac:	str	lr, [sp, #4]
   16fb0:	add	fp, sp, #4
   16fb4:	sub	sp, sp, #24
   16fb8:	str	r0, [fp, #-16]
   16fbc:	str	r1, [fp, #-20]	; 0xffffffec
   16fc0:	ldr	r3, [fp, #-16]
   16fc4:	ldr	r3, [r3, #32]
   16fc8:	ldr	r2, [r3, #16]
   16fcc:	ldr	r3, [fp, #-16]
   16fd0:	ldr	r3, [r3, #32]
   16fd4:	ldrh	r3, [r3, #28]
   16fd8:	lsl	r3, r3, #1
   16fdc:	add	r3, r2, r3
   16fe0:	str	r3, [fp, #-8]
   16fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fe8:	add	r3, r3, #2
   16fec:	lsl	r3, r3, #1
   16ff0:	str	r3, [fp, #-12]
   16ff4:	mov	r3, #1
   16ff8:	str	r3, [sp]
   16ffc:	ldr	r3, [fp, #-12]
   17000:	ldr	r2, [fp, #-8]
   17004:	mov	r1, #0
   17008:	ldr	r0, [fp, #-16]
   1700c:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   17010:	mov	r2, r0
   17014:	ldr	r3, [fp, #-16]
   17018:	str	r2, [r3, #4]
   1701c:	ldr	r3, [fp, #-16]
   17020:	ldr	r3, [r3, #4]
   17024:	cmp	r3, #0
   17028:	bne	17034 <flatcc_builder_default_alloc@@Base+0x83c>
   1702c:	mvn	r3, #0
   17030:	b	170ac <flatcc_builder_default_alloc@@Base+0x8b4>
   17034:	ldr	r3, [fp, #-16]
   17038:	ldr	r3, [r3, #4]
   1703c:	add	r2, r3, #4
   17040:	ldr	r3, [fp, #-16]
   17044:	str	r2, [r3, #4]
   17048:	ldr	r3, [fp, #-16]
   1704c:	ldr	r3, [r3, #32]
   17050:	ldr	r3, [r3, #20]
   17054:	str	r3, [fp, #-8]
   17058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1705c:	lsl	r3, r3, #1
   17060:	add	r3, r3, #1
   17064:	str	r3, [fp, #-12]
   17068:	mov	r3, #0
   1706c:	str	r3, [sp]
   17070:	ldr	r3, [fp, #-12]
   17074:	ldr	r2, [fp, #-8]
   17078:	mov	r1, #3
   1707c:	ldr	r0, [fp, #-16]
   17080:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   17084:	mov	r2, r0
   17088:	ldr	r3, [fp, #-16]
   1708c:	str	r2, [r3]
   17090:	ldr	r3, [fp, #-16]
   17094:	ldr	r3, [r3]
   17098:	cmp	r3, #0
   1709c:	bne	170a8 <flatcc_builder_default_alloc@@Base+0x8b0>
   170a0:	mvn	r3, #0
   170a4:	b	170ac <flatcc_builder_default_alloc@@Base+0x8b4>
   170a8:	mov	r3, #0
   170ac:	mov	r0, r3
   170b0:	sub	sp, fp, #4
   170b4:	ldr	fp, [sp]
   170b8:	add	sp, sp, #4
   170bc:	pop	{pc}		; (ldr pc, [sp], #4)
   170c0:	str	r4, [sp, #-12]!
   170c4:	str	fp, [sp, #4]
   170c8:	str	lr, [sp, #8]
   170cc:	add	fp, sp, #8
   170d0:	sub	sp, sp, #36	; 0x24
   170d4:	str	r0, [fp, #-32]	; 0xffffffe0
   170d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170dc:	add	r3, r3, #52	; 0x34
   170e0:	add	r3, r3, #40	; 0x28
   170e4:	str	r3, [fp, #-24]	; 0xffffffe8
   170e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170ec:	ldr	r3, [r3, #124]	; 0x7c
   170f0:	cmp	r3, #0
   170f4:	beq	17118 <flatcc_builder_default_alloc@@Base+0x920>
   170f8:	ldr	r3, [pc, #292]	; 17224 <flatcc_builder_default_alloc@@Base+0xa2c>
   170fc:	add	r3, pc, r3
   17100:	movw	r2, #342	; 0x156
   17104:	ldr	r1, [pc, #284]	; 17228 <flatcc_builder_default_alloc@@Base+0xa30>
   17108:	add	r1, pc, r1
   1710c:	ldr	r0, [pc, #280]	; 1722c <flatcc_builder_default_alloc@@Base+0xa34>
   17110:	add	r0, pc, r0
   17114:	bl	124b0 <__assert_fail@plt>
   17118:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1711c:	ldr	r2, [r3, #124]	; 0x7c
   17120:	mov	r3, #0
   17124:	str	r3, [sp]
   17128:	mov	r3, #16
   1712c:	mov	r1, #6
   17130:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17134:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   17138:	mov	r3, r0
   1713c:	cmp	r3, #0
   17140:	bne	1714c <flatcc_builder_default_alloc@@Base+0x954>
   17144:	mvn	r3, #0
   17148:	b	1720c <flatcc_builder_default_alloc@@Base+0xa14>
   1714c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17150:	mov	r2, #16
   17154:	str	r2, [r3, #124]	; 0x7c
   17158:	mov	r3, #256	; 0x100
   1715c:	str	r3, [fp, #-16]
   17160:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17164:	ldr	r4, [r3, #48]	; 0x30
   17168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1716c:	ldr	r0, [r3, #40]	; 0x28
   17170:	mov	r3, #5
   17174:	str	r3, [sp]
   17178:	mov	r3, #1
   1717c:	ldr	r2, [fp, #-16]
   17180:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17184:	blx	r4
   17188:	mov	r3, r0
   1718c:	cmp	r3, #0
   17190:	beq	171a8 <flatcc_builder_default_alloc@@Base+0x9b0>
   17194:	mvn	r3, #0
   17198:	b	1720c <flatcc_builder_default_alloc@@Base+0xa14>
   1719c:	ldr	r3, [fp, #-16]
   171a0:	lsl	r3, r3, #1
   171a4:	str	r3, [fp, #-16]
   171a8:	ldr	r3, [fp, #-16]
   171ac:	lsl	r2, r3, #1
   171b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171b4:	ldr	r3, [r3, #4]
   171b8:	cmp	r2, r3
   171bc:	bls	1719c <flatcc_builder_default_alloc@@Base+0x9a4>
   171c0:	ldr	r3, [fp, #-16]
   171c4:	lsr	r3, r3, #2
   171c8:	str	r3, [fp, #-16]
   171cc:	mov	r3, #0
   171d0:	str	r3, [fp, #-20]	; 0xffffffec
   171d4:	b	171e4 <flatcc_builder_default_alloc@@Base+0x9ec>
   171d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   171dc:	add	r3, r3, #1
   171e0:	str	r3, [fp, #-20]	; 0xffffffec
   171e4:	mov	r2, #1
   171e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   171ec:	lsl	r3, r2, r3
   171f0:	ldr	r2, [fp, #-16]
   171f4:	cmp	r2, r3
   171f8:	bhi	171d8 <flatcc_builder_default_alloc@@Base+0x9e0>
   171fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17200:	ldr	r2, [fp, #-20]	; 0xffffffec
   17204:	str	r2, [r3, #116]	; 0x74
   17208:	mov	r3, #0
   1720c:	mov	r0, r3
   17210:	sub	sp, fp, #8
   17214:	ldr	r4, [sp]
   17218:	ldr	fp, [sp, #4]
   1721c:	add	sp, sp, #8
   17220:	pop	{pc}		; (ldr pc, [sp], #4)
   17224:	andeq	r0, r1, r8, asr #4
   17228:	andeq	pc, r0, r4, lsl lr	; <UNPREDICTABLE>
   1722c:	andeq	pc, r0, r0, ror lr	; <UNPREDICTABLE>
   17230:	str	fp, [sp, #-8]!
   17234:	str	lr, [sp, #4]
   17238:	add	fp, sp, #4
   1723c:	sub	sp, sp, #16
   17240:	str	r0, [fp, #-16]
   17244:	str	r1, [fp, #-20]	; 0xffffffec
   17248:	ldr	r3, [fp, #-16]
   1724c:	ldr	r3, [r3, #116]	; 0x74
   17250:	cmp	r3, #0
   17254:	bne	17274 <flatcc_builder_default_alloc@@Base+0xa7c>
   17258:	ldr	r0, [fp, #-16]
   1725c:	bl	170c0 <flatcc_builder_default_alloc@@Base+0x8c8>
   17260:	mov	r3, r0
   17264:	cmp	r3, #0
   17268:	beq	17274 <flatcc_builder_default_alloc@@Base+0xa7c>
   1726c:	mov	r3, #0
   17270:	b	172a0 <flatcc_builder_default_alloc@@Base+0xaa8>
   17274:	ldr	r3, [fp, #-16]
   17278:	ldr	r3, [r3, #92]	; 0x5c
   1727c:	str	r3, [fp, #-8]
   17280:	ldr	r3, [fp, #-16]
   17284:	ldr	r3, [r3, #116]	; 0x74
   17288:	rsb	r3, r3, #32
   1728c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17290:	lsr	r3, r2, r3
   17294:	lsl	r3, r3, #2
   17298:	ldr	r2, [fp, #-8]
   1729c:	add	r3, r2, r3
   172a0:	mov	r0, r3
   172a4:	sub	sp, fp, #4
   172a8:	ldr	fp, [sp]
   172ac:	add	sp, sp, #4
   172b0:	pop	{pc}		; (ldr pc, [sp], #4)

000172b4 <flatcc_builder_flush_vtable_cache@@Base>:
   172b4:	str	fp, [sp, #-8]!
   172b8:	str	lr, [sp, #4]
   172bc:	add	fp, sp, #4
   172c0:	sub	sp, sp, #16
   172c4:	str	r0, [fp, #-16]
   172c8:	ldr	r3, [fp, #-16]
   172cc:	add	r3, r3, #52	; 0x34
   172d0:	add	r3, r3, #40	; 0x28
   172d4:	str	r3, [fp, #-8]
   172d8:	ldr	r3, [fp, #-16]
   172dc:	ldr	r3, [r3, #116]	; 0x74
   172e0:	cmp	r3, #0
   172e4:	beq	17320 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   172e8:	ldr	r3, [fp, #-8]
   172ec:	ldr	r0, [r3]
   172f0:	ldr	r3, [fp, #-8]
   172f4:	ldr	r3, [r3, #4]
   172f8:	mov	r2, r3
   172fc:	mov	r1, #0
   17300:	bl	12480 <memset@plt>
   17304:	ldr	r3, [fp, #-16]
   17308:	mov	r2, #16
   1730c:	str	r2, [r3, #124]	; 0x7c
   17310:	ldr	r3, [fp, #-16]
   17314:	mov	r2, #0
   17318:	str	r2, [r3, #120]	; 0x78
   1731c:	b	17324 <flatcc_builder_flush_vtable_cache@@Base+0x70>
   17320:	nop	{0}
   17324:	sub	sp, fp, #4
   17328:	ldr	fp, [sp]
   1732c:	add	sp, sp, #4
   17330:	pop	{pc}		; (ldr pc, [sp], #4)

00017334 <flatcc_builder_custom_init@@Base>:
   17334:	str	r4, [sp, #-12]!
   17338:	str	fp, [sp, #4]
   1733c:	str	lr, [sp, #8]
   17340:	add	fp, sp, #8
   17344:	sub	sp, sp, #20
   17348:	str	r0, [fp, #-16]
   1734c:	str	r1, [fp, #-20]	; 0xffffffec
   17350:	str	r2, [fp, #-24]	; 0xffffffe8
   17354:	str	r3, [fp, #-28]	; 0xffffffe4
   17358:	ldr	r4, [pc, #164]	; 17404 <flatcc_builder_custom_init@@Base+0xd0>
   1735c:	add	r4, pc, r4
   17360:	mov	r2, #232	; 0xe8
   17364:	mov	r1, #0
   17368:	ldr	r0, [fp, #-16]
   1736c:	bl	12480 <memset@plt>
   17370:	ldr	r3, [fp, #-20]	; 0xffffffec
   17374:	cmp	r3, #0
   17378:	bne	173a0 <flatcc_builder_custom_init@@Base+0x6c>
   1737c:	ldr	r3, [fp, #-16]
   17380:	mov	r2, #1
   17384:	str	r2, [r3, #184]	; 0xb8
   17388:	ldr	r3, [pc, #120]	; 17408 <flatcc_builder_custom_init@@Base+0xd4>
   1738c:	ldr	r3, [r4, r3]
   17390:	str	r3, [fp, #-20]	; 0xffffffec
   17394:	ldr	r3, [fp, #-16]
   17398:	add	r3, r3, #188	; 0xbc
   1739c:	str	r3, [fp, #-24]	; 0xffffffe8
   173a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   173a4:	cmp	r3, #0
   173a8:	bne	173b8 <flatcc_builder_custom_init@@Base+0x84>
   173ac:	ldr	r3, [pc, #88]	; 1740c <flatcc_builder_custom_init@@Base+0xd8>
   173b0:	ldr	r3, [r4, r3]
   173b4:	str	r3, [fp, #-28]	; 0xffffffe4
   173b8:	ldr	r3, [fp, #-16]
   173bc:	ldr	r2, [fp, #4]
   173c0:	str	r2, [r3, #40]	; 0x28
   173c4:	ldr	r3, [fp, #-16]
   173c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   173cc:	str	r2, [r3, #48]	; 0x30
   173d0:	ldr	r3, [fp, #-16]
   173d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   173d8:	str	r2, [r3, #36]	; 0x24
   173dc:	ldr	r3, [fp, #-16]
   173e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   173e4:	str	r2, [r3, #44]	; 0x2c
   173e8:	mov	r3, #0
   173ec:	mov	r0, r3
   173f0:	sub	sp, fp, #8
   173f4:	ldr	r4, [sp]
   173f8:	ldr	fp, [sp, #4]
   173fc:	add	sp, sp, #8
   17400:	pop	{pc}		; (ldr pc, [sp], #4)
   17404:	muleq	r2, ip, ip
   17408:	andeq	r0, r0, r0, rrx
   1740c:	andeq	r0, r0, ip, asr r0

00017410 <flatcc_builder_init@@Base>:
   17410:	str	fp, [sp, #-8]!
   17414:	str	lr, [sp, #4]
   17418:	add	fp, sp, #4
   1741c:	sub	sp, sp, #16
   17420:	str	r0, [fp, #-8]
   17424:	mov	r3, #0
   17428:	str	r3, [sp]
   1742c:	mov	r3, #0
   17430:	mov	r2, #0
   17434:	mov	r1, #0
   17438:	ldr	r0, [fp, #-8]
   1743c:	bl	17334 <flatcc_builder_custom_init@@Base>
   17440:	mov	r3, r0
   17444:	mov	r0, r3
   17448:	sub	sp, fp, #4
   1744c:	ldr	fp, [sp]
   17450:	add	sp, sp, #4
   17454:	pop	{pc}		; (ldr pc, [sp], #4)

00017458 <flatcc_builder_custom_reset@@Base>:
   17458:	str	r4, [sp, #-12]!
   1745c:	str	fp, [sp, #4]
   17460:	str	lr, [sp, #8]
   17464:	add	fp, sp, #8
   17468:	sub	sp, sp, #36	; 0x24
   1746c:	str	r0, [fp, #-24]	; 0xffffffe8
   17470:	str	r1, [fp, #-28]	; 0xffffffe4
   17474:	str	r2, [fp, #-32]	; 0xffffffe0
   17478:	mov	r3, #0
   1747c:	str	r3, [fp, #-16]
   17480:	b	1755c <flatcc_builder_custom_reset@@Base+0x104>
   17484:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17488:	add	r2, r3, #52	; 0x34
   1748c:	ldr	r3, [fp, #-16]
   17490:	lsl	r3, r3, #3
   17494:	add	r3, r2, r3
   17498:	str	r3, [fp, #-20]	; 0xffffffec
   1749c:	ldr	r3, [fp, #-20]	; 0xffffffec
   174a0:	ldr	r3, [r3]
   174a4:	cmp	r3, #0
   174a8:	beq	17520 <flatcc_builder_custom_reset@@Base+0xc8>
   174ac:	ldr	r3, [fp, #-16]
   174b0:	cmp	r3, #5
   174b4:	beq	17500 <flatcc_builder_custom_reset@@Base+0xa8>
   174b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174bc:	cmp	r3, #0
   174c0:	beq	17500 <flatcc_builder_custom_reset@@Base+0xa8>
   174c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174c8:	ldr	r4, [r3, #48]	; 0x30
   174cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174d0:	ldr	r0, [r3, #40]	; 0x28
   174d4:	ldr	r3, [fp, #-16]
   174d8:	str	r3, [sp]
   174dc:	mov	r3, #1
   174e0:	mov	r2, #1
   174e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   174e8:	blx	r4
   174ec:	mov	r3, r0
   174f0:	cmp	r3, #0
   174f4:	beq	17500 <flatcc_builder_custom_reset@@Base+0xa8>
   174f8:	mvn	r3, #0
   174fc:	b	1768c <flatcc_builder_custom_reset@@Base+0x234>
   17500:	ldr	r3, [fp, #-20]	; 0xffffffec
   17504:	ldr	r0, [r3]
   17508:	ldr	r3, [fp, #-20]	; 0xffffffec
   1750c:	ldr	r3, [r3, #4]
   17510:	mov	r2, r3
   17514:	mov	r1, #0
   17518:	bl	12480 <memset@plt>
   1751c:	b	17550 <flatcc_builder_custom_reset@@Base+0xf8>
   17520:	ldr	r3, [fp, #-20]	; 0xffffffec
   17524:	ldr	r3, [r3, #4]
   17528:	cmp	r3, #0
   1752c:	beq	17550 <flatcc_builder_custom_reset@@Base+0xf8>
   17530:	ldr	r3, [pc, #364]	; 176a4 <flatcc_builder_custom_reset@@Base+0x24c>
   17534:	add	r3, pc, r3
   17538:	movw	r2, #434	; 0x1b2
   1753c:	ldr	r1, [pc, #356]	; 176a8 <flatcc_builder_custom_reset@@Base+0x250>
   17540:	add	r1, pc, r1
   17544:	ldr	r0, [pc, #352]	; 176ac <flatcc_builder_custom_reset@@Base+0x254>
   17548:	add	r0, pc, r0
   1754c:	bl	124b0 <__assert_fail@plt>
   17550:	ldr	r3, [fp, #-16]
   17554:	add	r3, r3, #1
   17558:	str	r3, [fp, #-16]
   1755c:	ldr	r3, [fp, #-16]
   17560:	cmp	r3, #7
   17564:	ble	17484 <flatcc_builder_custom_reset@@Base+0x2c>
   17568:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1756c:	mov	r2, #0
   17570:	str	r2, [r3, #120]	; 0x78
   17574:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17578:	ldr	r3, [r3, #124]	; 0x7c
   1757c:	cmp	r3, #0
   17580:	beq	17590 <flatcc_builder_custom_reset@@Base+0x138>
   17584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17588:	mov	r2, #16
   1758c:	str	r2, [r3, #124]	; 0x7c
   17590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17594:	mov	r2, #0
   17598:	strh	r2, [r3, #128]	; 0x80
   1759c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175a0:	mov	r2, #0
   175a4:	str	r2, [r3, #136]	; 0x88
   175a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175ac:	mov	r2, #0
   175b0:	str	r2, [r3, #140]	; 0x8c
   175b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175b8:	mov	r2, #0
   175bc:	str	r2, [r3, #156]	; 0x9c
   175c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c4:	mov	r2, #0
   175c8:	str	r2, [r3, #160]	; 0xa0
   175cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175d0:	mov	r2, #0
   175d4:	str	r2, [r3, #20]
   175d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175dc:	mov	r2, #0
   175e0:	str	r2, [r3, #24]
   175e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e8:	mov	r2, #0
   175ec:	str	r2, [r3, #148]	; 0x94
   175f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175f4:	mov	r2, #0
   175f8:	str	r2, [r3, #152]	; 0x98
   175fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17600:	ldr	r2, [r3, #60]	; 0x3c
   17604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17608:	str	r2, [r3, #16]
   1760c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17610:	ldr	r2, [r3, #76]	; 0x4c
   17614:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17618:	str	r2, [r3]
   1761c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17620:	ldr	r2, [r3, #52]	; 0x34
   17624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17628:	str	r2, [r3, #4]
   1762c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17630:	mov	r2, #0
   17634:	str	r2, [r3, #32]
   17638:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1763c:	cmp	r3, #0
   17640:	beq	17668 <flatcc_builder_custom_reset@@Base+0x210>
   17644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17648:	mov	r2, #0
   1764c:	str	r2, [r3, #172]	; 0xac
   17650:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17654:	mov	r2, #0
   17658:	str	r2, [r3, #176]	; 0xb0
   1765c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17660:	mov	r2, #0
   17664:	str	r2, [r3, #180]	; 0xb4
   17668:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1766c:	ldr	r3, [r3, #184]	; 0xb8
   17670:	cmp	r3, #0
   17674:	beq	17688 <flatcc_builder_custom_reset@@Base+0x230>
   17678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1767c:	add	r3, r3, #188	; 0xbc
   17680:	mov	r0, r3
   17684:	bl	1d2ec <flatcc_emitter_reset@@Base>
   17688:	mov	r3, #0
   1768c:	mov	r0, r3
   17690:	sub	sp, fp, #8
   17694:	ldr	r4, [sp]
   17698:	ldr	fp, [sp, #4]
   1769c:	add	sp, sp, #8
   176a0:	pop	{pc}		; (ldr pc, [sp], #4)
   176a4:	andeq	pc, r0, ip, lsr #28
   176a8:	ldrdeq	pc, [r0], -ip
   176ac:	andeq	pc, r0, r8, asr #20

000176b0 <flatcc_builder_reset@@Base>:
   176b0:	str	fp, [sp, #-8]!
   176b4:	str	lr, [sp, #4]
   176b8:	add	fp, sp, #4
   176bc:	sub	sp, sp, #8
   176c0:	str	r0, [fp, #-8]
   176c4:	mov	r2, #0
   176c8:	mov	r1, #0
   176cc:	ldr	r0, [fp, #-8]
   176d0:	bl	17458 <flatcc_builder_custom_reset@@Base>
   176d4:	mov	r3, r0
   176d8:	mov	r0, r3
   176dc:	sub	sp, fp, #4
   176e0:	ldr	fp, [sp]
   176e4:	add	sp, sp, #4
   176e8:	pop	{pc}		; (ldr pc, [sp], #4)

000176ec <flatcc_builder_clear@@Base>:
   176ec:	str	r4, [sp, #-12]!
   176f0:	str	fp, [sp, #4]
   176f4:	str	lr, [sp, #8]
   176f8:	add	fp, sp, #8
   176fc:	sub	sp, sp, #28
   17700:	str	r0, [fp, #-24]	; 0xffffffe8
   17704:	mov	r3, #0
   17708:	str	r3, [fp, #-16]
   1770c:	b	1775c <flatcc_builder_clear@@Base+0x70>
   17710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17714:	add	r2, r3, #52	; 0x34
   17718:	ldr	r3, [fp, #-16]
   1771c:	lsl	r3, r3, #3
   17720:	add	r3, r2, r3
   17724:	str	r3, [fp, #-20]	; 0xffffffec
   17728:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1772c:	ldr	r4, [r3, #48]	; 0x30
   17730:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17734:	ldr	r0, [r3, #40]	; 0x28
   17738:	ldr	r3, [fp, #-16]
   1773c:	str	r3, [sp]
   17740:	mov	r3, #0
   17744:	mov	r2, #0
   17748:	ldr	r1, [fp, #-20]	; 0xffffffec
   1774c:	blx	r4
   17750:	ldr	r3, [fp, #-16]
   17754:	add	r3, r3, #1
   17758:	str	r3, [fp, #-16]
   1775c:	ldr	r3, [fp, #-16]
   17760:	cmp	r3, #7
   17764:	ble	17710 <flatcc_builder_clear@@Base+0x24>
   17768:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1776c:	ldr	r3, [r3, #184]	; 0xb8
   17770:	cmp	r3, #0
   17774:	beq	17788 <flatcc_builder_clear@@Base+0x9c>
   17778:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1777c:	add	r3, r3, #188	; 0xbc
   17780:	mov	r0, r3
   17784:	bl	1d488 <flatcc_emitter_clear@@Base>
   17788:	mov	r2, #232	; 0xe8
   1778c:	mov	r1, #0
   17790:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17794:	bl	12480 <memset@plt>
   17798:	nop	{0}
   1779c:	sub	sp, fp, #8
   177a0:	ldr	r4, [sp]
   177a4:	ldr	fp, [sp, #4]
   177a8:	add	sp, sp, #8
   177ac:	pop	{pc}		; (ldr pc, [sp], #4)
   177b0:	push	{fp}		; (str fp, [sp, #-4]!)
   177b4:	add	fp, sp, #0
   177b8:	sub	sp, sp, #12
   177bc:	str	r0, [fp, #-8]
   177c0:	mov	r3, r1
   177c4:	strh	r3, [fp, #-10]
   177c8:	ldr	r3, [fp, #-8]
   177cc:	ldrh	r3, [r3, #128]	; 0x80
   177d0:	ldrh	r2, [fp, #-10]
   177d4:	cmp	r2, r3
   177d8:	bls	177e8 <flatcc_builder_clear@@Base+0xfc>
   177dc:	ldr	r3, [fp, #-8]
   177e0:	ldrh	r2, [fp, #-10]
   177e4:	strh	r2, [r3, #128]	; 0x80
   177e8:	nop	{0}
   177ec:	add	sp, fp, #0
   177f0:	pop	{fp}		; (ldr fp, [sp], #4)
   177f4:	bx	lr
   177f8:	push	{fp}		; (str fp, [sp, #-4]!)
   177fc:	add	fp, sp, #0
   17800:	sub	sp, sp, #12
   17804:	str	r0, [fp, #-8]
   17808:	mov	r3, r1
   1780c:	strh	r3, [fp, #-10]
   17810:	ldr	r3, [fp, #-8]
   17814:	ldrh	r3, [r3]
   17818:	ldrh	r2, [fp, #-10]
   1781c:	cmp	r2, r3
   17820:	bls	17830 <flatcc_builder_clear@@Base+0x144>
   17824:	ldr	r3, [fp, #-8]
   17828:	ldrh	r2, [fp, #-10]
   1782c:	strh	r2, [r3]
   17830:	nop	{0}
   17834:	add	sp, fp, #0
   17838:	pop	{fp}		; (ldr fp, [sp], #4)
   1783c:	bx	lr

00017840 <flatcc_builder_enter_user_frame_ptr@@Base>:
   17840:	str	fp, [sp, #-8]!
   17844:	str	lr, [sp, #4]
   17848:	add	fp, sp, #4
   1784c:	sub	sp, sp, #24
   17850:	str	r0, [fp, #-16]
   17854:	str	r1, [fp, #-20]	; 0xffffffec
   17858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1785c:	add	r3, r3, #3
   17860:	bic	r3, r3, #3
   17864:	add	r3, r3, #4
   17868:	str	r3, [fp, #-20]	; 0xffffffec
   1786c:	ldr	r3, [fp, #-16]
   17870:	ldr	r2, [r3, #228]	; 0xe4
   17874:	mov	r3, #0
   17878:	str	r3, [sp]
   1787c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17880:	mov	r1, #7
   17884:	ldr	r0, [fp, #-16]
   17888:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   1788c:	str	r0, [fp, #-8]
   17890:	ldr	r3, [fp, #-8]
   17894:	cmp	r3, #0
   17898:	bne	178a4 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   1789c:	mov	r3, #0
   178a0:	b	178fc <flatcc_builder_enter_user_frame_ptr@@Base+0xbc>
   178a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   178a8:	mov	r1, #0
   178ac:	ldr	r0, [fp, #-8]
   178b0:	bl	12480 <memset@plt>
   178b4:	ldr	r3, [fp, #-8]
   178b8:	add	r2, r3, #4
   178bc:	str	r2, [fp, #-8]
   178c0:	ldr	r2, [fp, #-16]
   178c4:	ldr	r2, [r2, #224]	; 0xe0
   178c8:	str	r2, [r3]
   178cc:	ldr	r3, [fp, #-16]
   178d0:	ldr	r3, [r3, #228]	; 0xe4
   178d4:	add	r2, r3, #4
   178d8:	ldr	r3, [fp, #-16]
   178dc:	str	r2, [r3, #224]	; 0xe0
   178e0:	ldr	r3, [fp, #-16]
   178e4:	ldr	r2, [r3, #228]	; 0xe4
   178e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   178ec:	add	r2, r2, r3
   178f0:	ldr	r3, [fp, #-16]
   178f4:	str	r2, [r3, #228]	; 0xe4
   178f8:	ldr	r3, [fp, #-8]
   178fc:	mov	r0, r3
   17900:	sub	sp, fp, #4
   17904:	ldr	fp, [sp]
   17908:	add	sp, sp, #4
   1790c:	pop	{pc}		; (ldr pc, [sp], #4)

00017910 <flatcc_builder_enter_user_frame@@Base>:
   17910:	str	fp, [sp, #-8]!
   17914:	str	lr, [sp, #4]
   17918:	add	fp, sp, #4
   1791c:	sub	sp, sp, #24
   17920:	str	r0, [fp, #-16]
   17924:	str	r1, [fp, #-20]	; 0xffffffec
   17928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1792c:	add	r3, r3, #3
   17930:	bic	r3, r3, #3
   17934:	add	r3, r3, #4
   17938:	str	r3, [fp, #-20]	; 0xffffffec
   1793c:	ldr	r3, [fp, #-16]
   17940:	ldr	r2, [r3, #228]	; 0xe4
   17944:	mov	r3, #0
   17948:	str	r3, [sp]
   1794c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17950:	mov	r1, #7
   17954:	ldr	r0, [fp, #-16]
   17958:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   1795c:	str	r0, [fp, #-8]
   17960:	ldr	r3, [fp, #-8]
   17964:	cmp	r3, #0
   17968:	bne	17974 <flatcc_builder_enter_user_frame@@Base+0x64>
   1796c:	mov	r3, #0
   17970:	b	179d0 <flatcc_builder_enter_user_frame@@Base+0xc0>
   17974:	ldr	r2, [fp, #-20]	; 0xffffffec
   17978:	mov	r1, #0
   1797c:	ldr	r0, [fp, #-8]
   17980:	bl	12480 <memset@plt>
   17984:	ldr	r3, [fp, #-8]
   17988:	add	r2, r3, #4
   1798c:	str	r2, [fp, #-8]
   17990:	ldr	r2, [fp, #-16]
   17994:	ldr	r2, [r2, #224]	; 0xe0
   17998:	str	r2, [r3]
   1799c:	ldr	r3, [fp, #-16]
   179a0:	ldr	r3, [r3, #228]	; 0xe4
   179a4:	add	r2, r3, #4
   179a8:	ldr	r3, [fp, #-16]
   179ac:	str	r2, [r3, #224]	; 0xe0
   179b0:	ldr	r3, [fp, #-16]
   179b4:	ldr	r2, [r3, #228]	; 0xe4
   179b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   179bc:	add	r2, r2, r3
   179c0:	ldr	r3, [fp, #-16]
   179c4:	str	r2, [r3, #228]	; 0xe4
   179c8:	ldr	r3, [fp, #-16]
   179cc:	ldr	r3, [r3, #224]	; 0xe0
   179d0:	mov	r0, r3
   179d4:	sub	sp, fp, #4
   179d8:	ldr	fp, [sp]
   179dc:	add	sp, sp, #4
   179e0:	pop	{pc}		; (ldr pc, [sp], #4)

000179e4 <flatcc_builder_exit_user_frame@@Base>:
   179e4:	str	fp, [sp, #-8]!
   179e8:	str	lr, [sp, #4]
   179ec:	add	fp, sp, #4
   179f0:	sub	sp, sp, #16
   179f4:	str	r0, [fp, #-16]
   179f8:	ldr	r3, [fp, #-16]
   179fc:	ldr	r3, [r3, #224]	; 0xe0
   17a00:	cmp	r3, #0
   17a04:	bne	17a28 <flatcc_builder_exit_user_frame@@Base+0x44>
   17a08:	ldr	r3, [pc, #112]	; 17a80 <flatcc_builder_exit_user_frame@@Base+0x9c>
   17a0c:	add	r3, pc, r3
   17a10:	movw	r2, #542	; 0x21e
   17a14:	ldr	r1, [pc, #104]	; 17a84 <flatcc_builder_exit_user_frame@@Base+0xa0>
   17a18:	add	r1, pc, r1
   17a1c:	ldr	r0, [pc, #100]	; 17a88 <flatcc_builder_exit_user_frame@@Base+0xa4>
   17a20:	add	r0, pc, r0
   17a24:	bl	124b0 <__assert_fail@plt>
   17a28:	ldr	r3, [fp, #-16]
   17a2c:	ldr	r2, [r3, #108]	; 0x6c
   17a30:	ldr	r3, [fp, #-16]
   17a34:	ldr	r3, [r3, #224]	; 0xe0
   17a38:	add	r3, r2, r3
   17a3c:	str	r3, [fp, #-8]
   17a40:	ldr	r3, [fp, #-16]
   17a44:	ldr	r3, [r3, #224]	; 0xe0
   17a48:	sub	r2, r3, #4
   17a4c:	ldr	r3, [fp, #-16]
   17a50:	str	r2, [r3, #228]	; 0xe4
   17a54:	ldr	r3, [fp, #-8]
   17a58:	ldr	r2, [r3, #-4]
   17a5c:	ldr	r3, [fp, #-16]
   17a60:	str	r2, [r3, #224]	; 0xe0
   17a64:	ldr	r3, [fp, #-16]
   17a68:	ldr	r3, [r3, #224]	; 0xe0
   17a6c:	mov	r0, r3
   17a70:	sub	sp, fp, #4
   17a74:	ldr	fp, [sp]
   17a78:	add	sp, sp, #4
   17a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a80:	andeq	pc, r0, r0, ror r9	; <UNPREDICTABLE>
   17a84:	andeq	pc, r0, r4, lsl #10
   17a88:	andeq	pc, r0, r4, lsl #11

00017a8c <flatcc_builder_exit_user_frame_at@@Base>:
   17a8c:	str	fp, [sp, #-8]!
   17a90:	str	lr, [sp, #4]
   17a94:	add	fp, sp, #4
   17a98:	sub	sp, sp, #8
   17a9c:	str	r0, [fp, #-8]
   17aa0:	str	r1, [fp, #-12]
   17aa4:	ldr	r3, [fp, #-8]
   17aa8:	ldr	r3, [r3, #224]	; 0xe0
   17aac:	ldr	r2, [fp, #-12]
   17ab0:	cmp	r2, r3
   17ab4:	bls	17ad8 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   17ab8:	ldr	r3, [pc, #68]	; 17b04 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   17abc:	add	r3, pc, r3
   17ac0:	movw	r2, #551	; 0x227
   17ac4:	ldr	r1, [pc, #60]	; 17b08 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   17ac8:	add	r1, pc, r1
   17acc:	ldr	r0, [pc, #56]	; 17b0c <flatcc_builder_exit_user_frame_at@@Base+0x80>
   17ad0:	add	r0, pc, r0
   17ad4:	bl	124b0 <__assert_fail@plt>
   17ad8:	ldr	r3, [fp, #-8]
   17adc:	ldr	r2, [fp, #-12]
   17ae0:	str	r2, [r3, #224]	; 0xe0
   17ae4:	ldr	r0, [fp, #-8]
   17ae8:	bl	179e4 <flatcc_builder_exit_user_frame@@Base>
   17aec:	mov	r3, r0
   17af0:	mov	r0, r3
   17af4:	sub	sp, fp, #4
   17af8:	ldr	fp, [sp]
   17afc:	add	sp, sp, #4
   17b00:	pop	{pc}		; (ldr pc, [sp], #4)
   17b04:	andeq	pc, r0, r0, ror #17
   17b08:	andeq	pc, r0, r4, asr r4	; <UNPREDICTABLE>
   17b0c:	strdeq	pc, [r0], -r0

00017b10 <flatcc_builder_get_current_user_frame@@Base>:
   17b10:	push	{fp}		; (str fp, [sp, #-4]!)
   17b14:	add	fp, sp, #0
   17b18:	sub	sp, sp, #12
   17b1c:	str	r0, [fp, #-8]
   17b20:	ldr	r3, [fp, #-8]
   17b24:	ldr	r3, [r3, #224]	; 0xe0
   17b28:	mov	r0, r3
   17b2c:	add	sp, fp, #0
   17b30:	pop	{fp}		; (ldr fp, [sp], #4)
   17b34:	bx	lr

00017b38 <flatcc_builder_get_user_frame_ptr@@Base>:
   17b38:	push	{fp}		; (str fp, [sp, #-4]!)
   17b3c:	add	fp, sp, #0
   17b40:	sub	sp, sp, #12
   17b44:	str	r0, [fp, #-8]
   17b48:	str	r1, [fp, #-12]
   17b4c:	ldr	r3, [fp, #-8]
   17b50:	ldr	r2, [r3, #108]	; 0x6c
   17b54:	ldr	r3, [fp, #-12]
   17b58:	add	r3, r2, r3
   17b5c:	mov	r0, r3
   17b60:	add	sp, fp, #0
   17b64:	pop	{fp}		; (ldr fp, [sp], #4)
   17b68:	bx	lr
   17b6c:	str	fp, [sp, #-8]!
   17b70:	str	lr, [sp, #4]
   17b74:	add	fp, sp, #4
   17b78:	sub	sp, sp, #16
   17b7c:	str	r0, [fp, #-8]
   17b80:	mov	r3, r1
   17b84:	strh	r3, [fp, #-10]
   17b88:	ldr	r3, [fp, #-8]
   17b8c:	ldr	r3, [r3, #156]	; 0x9c
   17b90:	add	r2, r3, #1
   17b94:	ldr	r3, [fp, #-8]
   17b98:	str	r2, [r3, #156]	; 0x9c
   17b9c:	ldr	r3, [fp, #-8]
   17ba0:	ldr	r2, [r3, #156]	; 0x9c
   17ba4:	ldr	r3, [fp, #-8]
   17ba8:	ldr	r3, [r3, #160]	; 0xa0
   17bac:	cmp	r2, r3
   17bb0:	ble	17ca4 <flatcc_builder_get_user_frame_ptr@@Base+0x16c>
   17bb4:	ldr	r3, [fp, #-8]
   17bb8:	ldr	r3, [r3, #176]	; 0xb0
   17bbc:	cmp	r3, #0
   17bc0:	ble	17be4 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   17bc4:	ldr	r3, [fp, #-8]
   17bc8:	ldr	r2, [r3, #156]	; 0x9c
   17bcc:	ldr	r3, [fp, #-8]
   17bd0:	ldr	r3, [r3, #176]	; 0xb0
   17bd4:	cmp	r2, r3
   17bd8:	ble	17be4 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   17bdc:	mvn	r3, #0
   17be0:	b	17d44 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   17be4:	ldr	r3, [fp, #-8]
   17be8:	ldr	r3, [r3, #156]	; 0x9c
   17bec:	sub	r3, r3, #1
   17bf0:	mov	r2, r3
   17bf4:	mov	r3, r2
   17bf8:	lsl	r3, r3, #3
   17bfc:	add	r3, r3, r2
   17c00:	lsl	r3, r3, #2
   17c04:	mov	r2, r3
   17c08:	mov	r3, #0
   17c0c:	str	r3, [sp]
   17c10:	mov	r3, #36	; 0x24
   17c14:	mov	r1, #4
   17c18:	ldr	r0, [fp, #-8]
   17c1c:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   17c20:	mov	r2, r0
   17c24:	ldr	r3, [fp, #-8]
   17c28:	str	r2, [r3, #32]
   17c2c:	ldr	r3, [fp, #-8]
   17c30:	ldr	r3, [r3, #32]
   17c34:	cmp	r3, #0
   17c38:	bne	17c44 <flatcc_builder_get_user_frame_ptr@@Base+0x10c>
   17c3c:	mvn	r3, #0
   17c40:	b	17d44 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   17c44:	ldr	r3, [fp, #-8]
   17c48:	ldr	r2, [r3, #88]	; 0x58
   17c4c:	movw	r3, #36409	; 0x8e39
   17c50:	movt	r3, #14563	; 0x38e3
   17c54:	umull	r2, r3, r3, r2
   17c58:	lsr	r3, r3, #3
   17c5c:	mov	r2, r3
   17c60:	ldr	r3, [fp, #-8]
   17c64:	str	r2, [r3, #160]	; 0xa0
   17c68:	ldr	r3, [fp, #-8]
   17c6c:	ldr	r3, [r3, #176]	; 0xb0
   17c70:	cmp	r3, #0
   17c74:	ble	17cb8 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   17c78:	ldr	r3, [fp, #-8]
   17c7c:	ldr	r2, [r3, #176]	; 0xb0
   17c80:	ldr	r3, [fp, #-8]
   17c84:	ldr	r3, [r3, #160]	; 0xa0
   17c88:	cmp	r2, r3
   17c8c:	bge	17cb8 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   17c90:	ldr	r3, [fp, #-8]
   17c94:	ldr	r2, [r3, #176]	; 0xb0
   17c98:	ldr	r3, [fp, #-8]
   17c9c:	str	r2, [r3, #160]	; 0xa0
   17ca0:	b	17cb8 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   17ca4:	ldr	r3, [fp, #-8]
   17ca8:	ldr	r3, [r3, #32]
   17cac:	add	r2, r3, #36	; 0x24
   17cb0:	ldr	r3, [fp, #-8]
   17cb4:	str	r2, [r3, #32]
   17cb8:	ldr	r3, [fp, #-8]
   17cbc:	ldr	r3, [r3, #32]
   17cc0:	ldr	r2, [fp, #-8]
   17cc4:	ldr	r2, [r2, #20]
   17cc8:	str	r2, [r3, #8]
   17ccc:	ldr	r3, [fp, #-8]
   17cd0:	ldr	r3, [r3, #32]
   17cd4:	ldr	r2, [fp, #-8]
   17cd8:	ldrh	r2, [r2, #130]	; 0x82
   17cdc:	strh	r2, [r3, #12]
   17ce0:	ldr	r3, [fp, #-8]
   17ce4:	ldrh	r2, [fp, #-10]
   17ce8:	strh	r2, [r3, #130]	; 0x82
   17cec:	ldr	r3, [fp, #-8]
   17cf0:	ldr	r3, [r3, #32]
   17cf4:	ldr	r2, [fp, #-8]
   17cf8:	ldr	r2, [r2, #28]
   17cfc:	str	r2, [r3]
   17d00:	ldr	r3, [fp, #-8]
   17d04:	ldr	r3, [r3, #32]
   17d08:	mvn	r2, #3
   17d0c:	str	r2, [r3, #4]
   17d10:	ldr	r3, [fp, #-8]
   17d14:	ldr	r2, [r3, #28]
   17d18:	ldr	r3, [fp, #-8]
   17d1c:	ldr	r3, [r3, #20]
   17d20:	add	r3, r2, r3
   17d24:	add	r3, r3, #7
   17d28:	bic	r2, r3, #7
   17d2c:	ldr	r3, [fp, #-8]
   17d30:	str	r2, [r3, #28]
   17d34:	ldr	r3, [fp, #-8]
   17d38:	mov	r2, #0
   17d3c:	str	r2, [r3, #20]
   17d40:	mov	r3, #0
   17d44:	mov	r0, r3
   17d48:	sub	sp, fp, #4
   17d4c:	ldr	fp, [sp]
   17d50:	add	sp, sp, #4
   17d54:	pop	{pc}		; (ldr pc, [sp], #4)
   17d58:	str	fp, [sp, #-8]!
   17d5c:	str	lr, [sp, #4]
   17d60:	add	fp, sp, #4
   17d64:	sub	sp, sp, #8
   17d68:	str	r0, [fp, #-8]
   17d6c:	ldr	r3, [fp, #-8]
   17d70:	ldr	r0, [r3, #16]
   17d74:	ldr	r3, [fp, #-8]
   17d78:	ldr	r3, [r3, #20]
   17d7c:	mov	r2, r3
   17d80:	mov	r1, #0
   17d84:	bl	12480 <memset@plt>
   17d88:	ldr	r3, [fp, #-8]
   17d8c:	ldr	r3, [r3, #32]
   17d90:	ldr	r2, [r3, #8]
   17d94:	ldr	r3, [fp, #-8]
   17d98:	str	r2, [r3, #20]
   17d9c:	ldr	r3, [fp, #-8]
   17da0:	ldr	r3, [r3, #32]
   17da4:	ldr	r2, [r3]
   17da8:	ldr	r3, [fp, #-8]
   17dac:	str	r2, [r3, #28]
   17db0:	ldr	r3, [fp, #-8]
   17db4:	ldr	r3, [r3, #32]
   17db8:	ldr	r3, [r3, #4]
   17dbc:	mov	r1, r3
   17dc0:	ldr	r0, [fp, #-8]
   17dc4:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   17dc8:	ldr	r3, [fp, #-8]
   17dcc:	ldrh	r3, [r3, #130]	; 0x82
   17dd0:	mov	r1, r3
   17dd4:	ldr	r0, [fp, #-8]
   17dd8:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   17ddc:	ldr	r3, [fp, #-8]
   17de0:	ldr	r3, [r3, #32]
   17de4:	ldrh	r2, [r3, #12]
   17de8:	ldr	r3, [fp, #-8]
   17dec:	strh	r2, [r3, #130]	; 0x82
   17df0:	ldr	r3, [fp, #-8]
   17df4:	ldr	r3, [r3, #32]
   17df8:	sub	r2, r3, #36	; 0x24
   17dfc:	ldr	r3, [fp, #-8]
   17e00:	str	r2, [r3, #32]
   17e04:	ldr	r3, [fp, #-8]
   17e08:	ldr	r3, [r3, #156]	; 0x9c
   17e0c:	sub	r2, r3, #1
   17e10:	ldr	r3, [fp, #-8]
   17e14:	str	r2, [r3, #156]	; 0x9c
   17e18:	nop	{0}
   17e1c:	sub	sp, fp, #4
   17e20:	ldr	fp, [sp]
   17e24:	add	sp, sp, #4
   17e28:	pop	{pc}		; (ldr pc, [sp], #4)
   17e2c:	push	{fp}		; (str fp, [sp, #-4]!)
   17e30:	add	fp, sp, #0
   17e34:	sub	sp, sp, #20
   17e38:	str	r0, [fp, #-8]
   17e3c:	str	r1, [fp, #-12]
   17e40:	mov	r3, r2
   17e44:	strh	r3, [fp, #-14]
   17e48:	ldr	r3, [fp, #-8]
   17e4c:	ldr	r3, [r3, #136]	; 0x88
   17e50:	mov	r2, r3
   17e54:	ldr	r3, [fp, #-12]
   17e58:	sub	r3, r2, r3
   17e5c:	ldrh	r2, [fp, #-14]
   17e60:	sub	r2, r2, #1
   17e64:	and	r3, r3, r2
   17e68:	mov	r0, r3
   17e6c:	add	sp, fp, #0
   17e70:	pop	{fp}		; (ldr fp, [sp], #4)
   17e74:	bx	lr
   17e78:	push	{fp}		; (str fp, [sp, #-4]!)
   17e7c:	add	fp, sp, #0
   17e80:	sub	sp, sp, #12
   17e84:	str	r0, [fp, #-8]
   17e88:	mov	r3, r1
   17e8c:	strh	r3, [fp, #-10]
   17e90:	ldr	r3, [fp, #-8]
   17e94:	ldr	r2, [r3, #140]	; 0x8c
   17e98:	ldrh	r3, [fp, #-10]
   17e9c:	sub	r3, r3, #1
   17ea0:	and	r3, r3, r2
   17ea4:	mov	r0, r3
   17ea8:	add	sp, fp, #0
   17eac:	pop	{fp}		; (ldr fp, [sp], #4)
   17eb0:	bx	lr
   17eb4:	str	r4, [sp, #-12]!
   17eb8:	str	fp, [sp, #4]
   17ebc:	str	lr, [sp, #8]
   17ec0:	add	fp, sp, #8
   17ec4:	sub	sp, sp, #28
   17ec8:	str	r0, [fp, #-24]	; 0xffffffe8
   17ecc:	str	r1, [fp, #-28]	; 0xffffffe4
   17ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ed4:	ldr	r3, [r3, #136]	; 0x88
   17ed8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17edc:	ldr	r2, [r2]
   17ee0:	sub	r3, r3, r2
   17ee4:	str	r3, [fp, #-16]
   17ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17eec:	ldr	r3, [r3, #136]	; 0x88
   17ef0:	ldr	r2, [fp, #-16]
   17ef4:	cmp	r2, r3
   17ef8:	blt	17f1c <flatcc_builder_get_user_frame_ptr@@Base+0x3e4>
   17efc:	ldr	r3, [pc, #164]	; 17fa8 <flatcc_builder_get_user_frame_ptr@@Base+0x470>
   17f00:	add	r3, pc, r3
   17f04:	movw	r2, #647	; 0x287
   17f08:	ldr	r1, [pc, #156]	; 17fac <flatcc_builder_get_user_frame_ptr@@Base+0x474>
   17f0c:	add	r1, pc, r1
   17f10:	ldr	r0, [pc, #152]	; 17fb0 <flatcc_builder_get_user_frame_ptr@@Base+0x478>
   17f14:	add	r0, pc, r0
   17f18:	bl	124b0 <__assert_fail@plt>
   17f1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f20:	ldr	r4, [r3, #44]	; 0x2c
   17f24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f28:	ldr	r0, [r3, #36]	; 0x24
   17f2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f30:	add	r1, r3, #8
   17f34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f38:	ldr	r2, [r3, #4]
   17f3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f40:	ldr	r3, [r3]
   17f44:	str	r3, [sp]
   17f48:	ldr	r3, [fp, #-16]
   17f4c:	blx	r4
   17f50:	mov	r3, r0
   17f54:	cmp	r3, #0
   17f58:	beq	17f7c <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   17f5c:	ldr	r3, [pc, #80]	; 17fb4 <flatcc_builder_get_user_frame_ptr@@Base+0x47c>
   17f60:	add	r3, pc, r3
   17f64:	movw	r2, #651	; 0x28b
   17f68:	ldr	r1, [pc, #72]	; 17fb8 <flatcc_builder_get_user_frame_ptr@@Base+0x480>
   17f6c:	add	r1, pc, r1
   17f70:	ldr	r0, [pc, #68]	; 17fbc <flatcc_builder_get_user_frame_ptr@@Base+0x484>
   17f74:	add	r0, pc, r0
   17f78:	bl	124b0 <__assert_fail@plt>
   17f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f80:	ldr	r2, [fp, #-16]
   17f84:	str	r2, [r3, #136]	; 0x88
   17f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f8c:	ldr	r3, [r3, #136]	; 0x88
   17f90:	mov	r0, r3
   17f94:	sub	sp, fp, #8
   17f98:	ldr	r4, [sp]
   17f9c:	ldr	fp, [sp, #4]
   17fa0:	add	sp, sp, #8
   17fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fa8:	ldrdeq	pc, [r0], -ip
   17fac:	andeq	pc, r0, r0, lsl r0	; <UNPREDICTABLE>
   17fb0:	andeq	pc, r0, r8, rrx
   17fb4:	andeq	pc, r0, ip, ror r4	; <UNPREDICTABLE>
   17fb8:			; <UNDEFINED> instruction: 0x0000efb0
   17fbc:	andeq	pc, r0, r8
   17fc0:	str	r4, [sp, #-12]!
   17fc4:	str	fp, [sp, #4]
   17fc8:	str	lr, [sp, #8]
   17fcc:	add	fp, sp, #8
   17fd0:	sub	sp, sp, #28
   17fd4:	str	r0, [fp, #-24]	; 0xffffffe8
   17fd8:	str	r1, [fp, #-28]	; 0xffffffe4
   17fdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fe0:	ldr	r3, [r3, #140]	; 0x8c
   17fe4:	str	r3, [fp, #-16]
   17fe8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17fec:	ldr	r3, [r3]
   17ff0:	mov	r2, r3
   17ff4:	ldr	r3, [fp, #-16]
   17ff8:	add	r2, r2, r3
   17ffc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18000:	str	r2, [r3, #140]	; 0x8c
   18004:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18008:	ldr	r3, [r3, #140]	; 0x8c
   1800c:	ldr	r2, [fp, #-16]
   18010:	cmp	r2, r3
   18014:	ble	18038 <flatcc_builder_get_user_frame_ptr@@Base+0x500>
   18018:	ldr	r3, [pc, #152]	; 180b8 <flatcc_builder_get_user_frame_ptr@@Base+0x580>
   1801c:	add	r3, pc, r3
   18020:	movw	r2, #673	; 0x2a1
   18024:	ldr	r1, [pc, #144]	; 180bc <flatcc_builder_get_user_frame_ptr@@Base+0x584>
   18028:	add	r1, pc, r1
   1802c:	ldr	r0, [pc, #140]	; 180c0 <flatcc_builder_get_user_frame_ptr@@Base+0x588>
   18030:	add	r0, pc, r0
   18034:	bl	124b0 <__assert_fail@plt>
   18038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1803c:	ldr	r4, [r3, #44]	; 0x2c
   18040:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18044:	ldr	r0, [r3, #36]	; 0x24
   18048:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1804c:	add	r1, r3, #8
   18050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18054:	ldr	r2, [r3, #4]
   18058:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1805c:	ldr	r3, [r3]
   18060:	str	r3, [sp]
   18064:	ldr	r3, [fp, #-16]
   18068:	blx	r4
   1806c:	mov	r3, r0
   18070:	cmp	r3, #0
   18074:	beq	18098 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   18078:	ldr	r3, [pc, #68]	; 180c4 <flatcc_builder_get_user_frame_ptr@@Base+0x58c>
   1807c:	add	r3, pc, r3
   18080:	movw	r2, #677	; 0x2a5
   18084:	ldr	r1, [pc, #60]	; 180c8 <flatcc_builder_get_user_frame_ptr@@Base+0x590>
   18088:	add	r1, pc, r1
   1808c:	ldr	r0, [pc, #56]	; 180cc <flatcc_builder_get_user_frame_ptr@@Base+0x594>
   18090:	add	r0, pc, r0
   18094:	bl	124b0 <__assert_fail@plt>
   18098:	ldr	r3, [fp, #-16]
   1809c:	add	r3, r3, #1
   180a0:	mov	r0, r3
   180a4:	sub	sp, fp, #8
   180a8:	ldr	r4, [sp]
   180ac:	ldr	fp, [sp, #4]
   180b0:	add	sp, sp, #8
   180b4:	pop	{pc}		; (ldr pc, [sp], #4)
   180b8:			; <UNDEFINED> instruction: 0x0000f3b4
   180bc:	strdeq	lr, [r0], -r4
   180c0:	andeq	lr, r0, ip, asr #30
   180c4:	andeq	pc, r0, r4, asr r3	; <UNPREDICTABLE>
   180c8:	muleq	r0, r4, lr
   180cc:	andeq	lr, r0, ip, ror #29
   180d0:	str	r4, [sp, #-12]!
   180d4:	str	fp, [sp, #4]
   180d8:	str	lr, [sp, #8]
   180dc:	add	fp, sp, #8
   180e0:	sub	sp, sp, #100	; 0x64
   180e4:	str	r0, [fp, #-96]	; 0xffffffa0
   180e8:	str	r1, [fp, #-100]	; 0xffffff9c
   180ec:	str	r3, [fp, #-108]	; 0xffffff94
   180f0:	mov	r3, r2
   180f4:	strh	r3, [fp, #-102]	; 0xffffff9a
   180f8:	ldr	r4, [pc, #332]	; 1824c <flatcc_builder_get_user_frame_ptr@@Base+0x714>
   180fc:	add	r4, pc, r4
   18100:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   18104:	cmp	r3, #0
   18108:	bne	18130 <flatcc_builder_get_user_frame_ptr@@Base+0x5f8>
   1810c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18110:	ldrh	r3, [r3, #132]	; 0x84
   18114:	cmp	r3, #0
   18118:	beq	18128 <flatcc_builder_get_user_frame_ptr@@Base+0x5f0>
   1811c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   18120:	ldrh	r3, [r3, #132]	; 0x84
   18124:	b	18134 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   18128:	mov	r3, #1
   1812c:	b	18134 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   18130:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   18134:	strh	r3, [fp, #-102]	; 0xffffff9a
   18138:	mov	r1, #4
   1813c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   18140:	bl	177f8 <flatcc_builder_clear@@Base+0x10c>
   18144:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   18148:	mov	r1, r3
   1814c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   18150:	bl	177f8 <flatcc_builder_clear@@Base+0x10c>
   18154:	ldr	r3, [fp, #-108]	; 0xffffff94
   18158:	cmp	r3, #0
   1815c:	bne	18230 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   18160:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   18164:	mov	r1, r3
   18168:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1816c:	bl	17e78 <flatcc_builder_get_user_frame_ptr@@Base+0x340>
   18170:	str	r0, [fp, #-16]
   18174:	ldr	r3, [fp, #-16]
   18178:	cmp	r3, #0
   1817c:	beq	18230 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   18180:	mov	r3, #0
   18184:	str	r3, [fp, #-88]	; 0xffffffa8
   18188:	mov	r3, #0
   1818c:	str	r3, [fp, #-84]	; 0xffffffac
   18190:	ldr	r3, [fp, #-16]
   18194:	cmp	r3, #0
   18198:	beq	181f4 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   1819c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   181a0:	ldr	r3, [fp, #-16]
   181a4:	add	r3, r2, r3
   181a8:	str	r3, [fp, #-88]	; 0xffffffa8
   181ac:	ldr	r3, [fp, #-84]	; 0xffffffac
   181b0:	add	r3, r3, #1
   181b4:	lsl	r3, r3, #3
   181b8:	sub	r2, fp, #12
   181bc:	add	r3, r2, r3
   181c0:	ldr	r2, [pc, #136]	; 18250 <flatcc_builder_get_user_frame_ptr@@Base+0x718>
   181c4:	ldr	r2, [r4, r2]
   181c8:	str	r2, [r3, #-76]	; 0xffffffb4
   181cc:	ldr	r3, [fp, #-84]	; 0xffffffac
   181d0:	add	r3, r3, #1
   181d4:	lsl	r3, r3, #3
   181d8:	sub	r2, fp, #12
   181dc:	add	r3, r2, r3
   181e0:	ldr	r2, [fp, #-16]
   181e4:	str	r2, [r3, #-72]	; 0xffffffb8
   181e8:	ldr	r3, [fp, #-84]	; 0xffffffac
   181ec:	add	r3, r3, #1
   181f0:	str	r3, [fp, #-84]	; 0xffffffac
   181f4:	sub	r3, fp, #88	; 0x58
   181f8:	mov	r1, r3
   181fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18200:	bl	17fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   18204:	mov	r3, r0
   18208:	cmp	r3, #0
   1820c:	bne	18230 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   18210:	ldr	r3, [pc, #60]	; 18254 <flatcc_builder_get_user_frame_ptr@@Base+0x71c>
   18214:	add	r3, pc, r3
   18218:	movw	r2, #702	; 0x2be
   1821c:	ldr	r1, [pc, #52]	; 18258 <flatcc_builder_get_user_frame_ptr@@Base+0x720>
   18220:	add	r1, pc, r1
   18224:	ldr	r0, [pc, #48]	; 1825c <flatcc_builder_get_user_frame_ptr@@Base+0x724>
   18228:	add	r0, pc, r0
   1822c:	bl	124b0 <__assert_fail@plt>
   18230:	mov	r3, #0
   18234:	mov	r0, r3
   18238:	sub	sp, fp, #8
   1823c:	ldr	r4, [sp]
   18240:	ldr	fp, [sp, #4]
   18244:	add	sp, sp, #8
   18248:	pop	{pc}		; (ldr pc, [sp], #4)
   1824c:	strdeq	r0, [r2], -ip
   18250:	andeq	r0, r0, r0, asr r0
   18254:	andeq	pc, r0, ip, lsr #3
   18258:	strdeq	lr, [r0], -ip
   1825c:	andeq	lr, r0, r4, asr sp

00018260 <flatcc_builder_embed_buffer@@Base>:
   18260:	str	r4, [sp, #-12]!
   18264:	str	fp, [sp, #4]
   18268:	str	lr, [sp, #8]
   1826c:	add	fp, sp, #8
   18270:	sub	sp, sp, #108	; 0x6c
   18274:	str	r0, [fp, #-104]	; 0xffffff98
   18278:	str	r2, [fp, #-112]	; 0xffffff90
   1827c:	str	r3, [fp, #-116]	; 0xffffff8c
   18280:	mov	r3, r1
   18284:	strh	r3, [fp, #-106]	; 0xffffff96
   18288:	ldr	r4, [pc, #504]	; 18488 <flatcc_builder_embed_buffer@@Base+0x228>
   1828c:	add	r4, pc, r4
   18290:	ldr	r3, [fp, #8]
   18294:	and	r3, r3, #2
   18298:	str	r3, [fp, #-16]
   1829c:	ldr	r3, [fp, #-104]	; 0xffffff98
   182a0:	ldr	r3, [r3, #152]	; 0x98
   182a4:	cmp	r3, #0
   182a8:	movne	r3, #1
   182ac:	moveq	r3, #0
   182b0:	uxtb	r3, r3
   182b4:	ldrh	r2, [fp, #-106]	; 0xffffff96
   182b8:	add	r1, fp, #4
   182bc:	ldr	r0, [fp, #-104]	; 0xffffff98
   182c0:	bl	180d0 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   182c4:	mov	r3, r0
   182c8:	cmp	r3, #0
   182cc:	beq	182d8 <flatcc_builder_embed_buffer@@Base+0x78>
   182d0:	mov	r3, #0
   182d4:	b	18470 <flatcc_builder_embed_buffer@@Base+0x210>
   182d8:	ldr	r3, [fp, #-16]
   182dc:	cmp	r3, #0
   182e0:	beq	182ec <flatcc_builder_embed_buffer@@Base+0x8c>
   182e4:	mov	r2, #4
   182e8:	b	182f0 <flatcc_builder_embed_buffer@@Base+0x90>
   182ec:	mov	r2, #0
   182f0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   182f4:	add	r3, r2, r3
   182f8:	ldrh	r2, [fp, #4]
   182fc:	mov	r1, r3
   18300:	ldr	r0, [fp, #-104]	; 0xffffff98
   18304:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   18308:	str	r0, [fp, #-20]	; 0xffffffec
   1830c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18310:	ldr	r3, [fp, #-20]	; 0xffffffec
   18314:	add	r3, r2, r3
   18318:	mov	r0, r3
   1831c:	bl	166a8 <main@@Base+0x114>
   18320:	mov	r3, r0
   18324:	str	r3, [fp, #-24]	; 0xffffffe8
   18328:	mov	r3, #0
   1832c:	str	r3, [fp, #-96]	; 0xffffffa0
   18330:	mov	r3, #0
   18334:	str	r3, [fp, #-92]	; 0xffffffa4
   18338:	ldr	r3, [fp, #-104]	; 0xffffff98
   1833c:	ldr	r3, [r3, #152]	; 0x98
   18340:	cmp	r3, #0
   18344:	beq	18398 <flatcc_builder_embed_buffer@@Base+0x138>
   18348:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1834c:	add	r3, r3, #4
   18350:	str	r3, [fp, #-96]	; 0xffffffa0
   18354:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18358:	add	r3, r3, #1
   1835c:	lsl	r3, r3, #3
   18360:	sub	r2, fp, #12
   18364:	add	r3, r2, r3
   18368:	sub	r2, fp, #24
   1836c:	str	r2, [r3, #-84]	; 0xffffffac
   18370:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18374:	add	r3, r3, #1
   18378:	lsl	r3, r3, #3
   1837c:	sub	r2, fp, #12
   18380:	add	r3, r2, r3
   18384:	mov	r2, #4
   18388:	str	r2, [r3, #-80]	; 0xffffffb0
   1838c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18390:	add	r3, r3, #1
   18394:	str	r3, [fp, #-92]	; 0xffffffa4
   18398:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1839c:	cmp	r3, #0
   183a0:	beq	183f8 <flatcc_builder_embed_buffer@@Base+0x198>
   183a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   183a8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   183ac:	add	r3, r2, r3
   183b0:	str	r3, [fp, #-96]	; 0xffffffa0
   183b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   183b8:	add	r3, r3, #1
   183bc:	lsl	r3, r3, #3
   183c0:	sub	r2, fp, #12
   183c4:	add	r3, r2, r3
   183c8:	ldr	r2, [fp, #-112]	; 0xffffff90
   183cc:	str	r2, [r3, #-84]	; 0xffffffac
   183d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   183d4:	add	r3, r3, #1
   183d8:	lsl	r3, r3, #3
   183dc:	sub	r2, fp, #12
   183e0:	add	r3, r2, r3
   183e4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   183e8:	str	r2, [r3, #-80]	; 0xffffffb0
   183ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   183f0:	add	r3, r3, #1
   183f4:	str	r3, [fp, #-92]	; 0xffffffa4
   183f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   183fc:	cmp	r3, #0
   18400:	beq	1845c <flatcc_builder_embed_buffer@@Base+0x1fc>
   18404:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1840c:	add	r3, r2, r3
   18410:	str	r3, [fp, #-96]	; 0xffffffa0
   18414:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18418:	add	r3, r3, #1
   1841c:	lsl	r3, r3, #3
   18420:	sub	r2, fp, #12
   18424:	add	r3, r2, r3
   18428:	ldr	r2, [pc, #92]	; 1848c <flatcc_builder_embed_buffer@@Base+0x22c>
   1842c:	ldr	r2, [r4, r2]
   18430:	str	r2, [r3, #-84]	; 0xffffffac
   18434:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18438:	add	r3, r3, #1
   1843c:	lsl	r3, r3, #3
   18440:	sub	r2, fp, #12
   18444:	add	r3, r2, r3
   18448:	ldr	r2, [fp, #-20]	; 0xffffffec
   1844c:	str	r2, [r3, #-80]	; 0xffffffb0
   18450:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18454:	add	r3, r3, #1
   18458:	str	r3, [fp, #-92]	; 0xffffffa4
   1845c:	sub	r3, fp, #96	; 0x60
   18460:	mov	r1, r3
   18464:	ldr	r0, [fp, #-104]	; 0xffffff98
   18468:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1846c:	mov	r3, r0
   18470:	mov	r0, r3
   18474:	sub	sp, fp, #8
   18478:	ldr	r4, [sp]
   1847c:	ldr	fp, [sp, #4]
   18480:	add	sp, sp, #8
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	andeq	r0, r2, ip, ror #26
   1848c:	andeq	r0, r0, r0, asr r0

00018490 <flatcc_builder_create_buffer@@Base>:
   18490:	str	r4, [sp, #-12]!
   18494:	str	fp, [sp, #4]
   18498:	str	lr, [sp, #8]
   1849c:	add	fp, sp, #8
   184a0:	sub	sp, sp, #132	; 0x84
   184a4:	str	r0, [fp, #-128]	; 0xffffff80
   184a8:	str	r1, [fp, #-132]	; 0xffffff7c
   184ac:	str	r3, [fp, #-140]	; 0xffffff74
   184b0:	mov	r3, r2
   184b4:	strh	r3, [fp, #-134]	; 0xffffff7a
   184b8:	ldr	r4, [pc, #944]	; 18870 <flatcc_builder_create_buffer@@Base+0x3e0>
   184bc:	add	r4, pc, r4
   184c0:	mov	r3, #0
   184c4:	str	r3, [fp, #-16]
   184c8:	mov	r3, #0
   184cc:	str	r3, [fp, #-120]	; 0xffffff88
   184d0:	ldr	r3, [fp, #8]
   184d4:	and	r3, r3, #1
   184d8:	cmp	r3, #0
   184dc:	movne	r3, #1
   184e0:	moveq	r3, #0
   184e4:	uxtb	r3, r3
   184e8:	str	r3, [fp, #-20]	; 0xffffffec
   184ec:	ldr	r3, [fp, #8]
   184f0:	and	r3, r3, #2
   184f4:	cmp	r3, #0
   184f8:	movne	r3, #1
   184fc:	moveq	r3, #0
   18500:	uxtb	r3, r3
   18504:	str	r3, [fp, #-24]	; 0xffffffe8
   18508:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   1850c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18510:	add	r1, fp, #4
   18514:	ldr	r0, [fp, #-128]	; 0xffffff80
   18518:	bl	180d0 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   1851c:	mov	r3, r0
   18520:	cmp	r3, #0
   18524:	beq	18530 <flatcc_builder_create_buffer@@Base+0xa0>
   18528:	mov	r3, #0
   1852c:	b	18858 <flatcc_builder_create_buffer@@Base+0x3c8>
   18530:	ldrh	r3, [fp, #4]
   18534:	mov	r1, r3
   18538:	ldr	r0, [fp, #-128]	; 0xffffff80
   1853c:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   18540:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18544:	cmp	r3, #0
   18548:	beq	18580 <flatcc_builder_create_buffer@@Base+0xf0>
   1854c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18550:	ldr	r3, [r3]
   18554:	str	r3, [fp, #-120]	; 0xffffff88
   18558:	ldr	r3, [fp, #-120]	; 0xffffff88
   1855c:	mov	r0, r3
   18560:	bl	166f4 <main@@Base+0x160>
   18564:	mov	r3, r0
   18568:	str	r3, [fp, #-120]	; 0xffffff88
   1856c:	ldr	r3, [fp, #-120]	; 0xffffff88
   18570:	mov	r0, r3
   18574:	bl	166a8 <main@@Base+0x114>
   18578:	mov	r3, r0
   1857c:	str	r3, [fp, #-120]	; 0xffffff88
   18580:	ldr	r3, [fp, #-120]	; 0xffffff88
   18584:	cmp	r3, #0
   18588:	beq	18594 <flatcc_builder_create_buffer@@Base+0x104>
   1858c:	mov	r3, #4
   18590:	b	18598 <flatcc_builder_create_buffer@@Base+0x108>
   18594:	mov	r3, #0
   18598:	str	r3, [fp, #-16]
   1859c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185a0:	cmp	r3, #0
   185a4:	beq	185b0 <flatcc_builder_create_buffer@@Base+0x120>
   185a8:	mov	r2, #4
   185ac:	b	185b4 <flatcc_builder_create_buffer@@Base+0x124>
   185b0:	mov	r2, #0
   185b4:	ldr	r3, [fp, #-16]
   185b8:	add	r3, r2, r3
   185bc:	add	r3, r3, #4
   185c0:	ldrh	r2, [fp, #4]
   185c4:	mov	r1, r3
   185c8:	ldr	r0, [fp, #-128]	; 0xffffff80
   185cc:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   185d0:	str	r0, [fp, #-28]	; 0xffffffe4
   185d4:	mov	r3, #0
   185d8:	str	r3, [fp, #-116]	; 0xffffff8c
   185dc:	mov	r3, #0
   185e0:	str	r3, [fp, #-112]	; 0xffffff90
   185e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   185e8:	cmp	r3, #0
   185ec:	bne	185fc <flatcc_builder_create_buffer@@Base+0x16c>
   185f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185f4:	cmp	r3, #0
   185f8:	beq	1864c <flatcc_builder_create_buffer@@Base+0x1bc>
   185fc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18600:	add	r3, r3, #4
   18604:	str	r3, [fp, #-116]	; 0xffffff8c
   18608:	ldr	r3, [fp, #-112]	; 0xffffff90
   1860c:	add	r3, r3, #1
   18610:	lsl	r3, r3, #3
   18614:	sub	r2, fp, #12
   18618:	add	r3, r2, r3
   1861c:	sub	r2, fp, #44	; 0x2c
   18620:	str	r2, [r3, #-104]	; 0xffffff98
   18624:	ldr	r3, [fp, #-112]	; 0xffffff90
   18628:	add	r3, r3, #1
   1862c:	lsl	r3, r3, #3
   18630:	sub	r2, fp, #12
   18634:	add	r3, r2, r3
   18638:	mov	r2, #4
   1863c:	str	r2, [r3, #-100]	; 0xffffff9c
   18640:	ldr	r3, [fp, #-112]	; 0xffffff90
   18644:	add	r3, r3, #1
   18648:	str	r3, [fp, #-112]	; 0xffffff90
   1864c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18650:	add	r3, r3, #4
   18654:	str	r3, [fp, #-116]	; 0xffffff8c
   18658:	ldr	r3, [fp, #-112]	; 0xffffff90
   1865c:	add	r3, r3, #1
   18660:	lsl	r3, r3, #3
   18664:	sub	r2, fp, #12
   18668:	add	r3, r2, r3
   1866c:	sub	r2, fp, #40	; 0x28
   18670:	str	r2, [r3, #-104]	; 0xffffff98
   18674:	ldr	r3, [fp, #-112]	; 0xffffff90
   18678:	add	r3, r3, #1
   1867c:	lsl	r3, r3, #3
   18680:	sub	r2, fp, #12
   18684:	add	r3, r2, r3
   18688:	mov	r2, #4
   1868c:	str	r2, [r3, #-100]	; 0xffffff9c
   18690:	ldr	r3, [fp, #-112]	; 0xffffff90
   18694:	add	r3, r3, #1
   18698:	str	r3, [fp, #-112]	; 0xffffff90
   1869c:	ldr	r3, [fp, #-16]
   186a0:	cmp	r3, #0
   186a4:	beq	186fc <flatcc_builder_create_buffer@@Base+0x26c>
   186a8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   186ac:	ldr	r3, [fp, #-16]
   186b0:	add	r3, r2, r3
   186b4:	str	r3, [fp, #-116]	; 0xffffff8c
   186b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   186bc:	add	r3, r3, #1
   186c0:	lsl	r3, r3, #3
   186c4:	sub	r2, fp, #12
   186c8:	add	r3, r2, r3
   186cc:	sub	r2, fp, #120	; 0x78
   186d0:	str	r2, [r3, #-104]	; 0xffffff98
   186d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   186d8:	add	r3, r3, #1
   186dc:	lsl	r3, r3, #3
   186e0:	sub	r2, fp, #12
   186e4:	add	r3, r2, r3
   186e8:	ldr	r2, [fp, #-16]
   186ec:	str	r2, [r3, #-100]	; 0xffffff9c
   186f0:	ldr	r3, [fp, #-112]	; 0xffffff90
   186f4:	add	r3, r3, #1
   186f8:	str	r3, [fp, #-112]	; 0xffffff90
   186fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18700:	cmp	r3, #0
   18704:	beq	18760 <flatcc_builder_create_buffer@@Base+0x2d0>
   18708:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1870c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18710:	add	r3, r2, r3
   18714:	str	r3, [fp, #-116]	; 0xffffff8c
   18718:	ldr	r3, [fp, #-112]	; 0xffffff90
   1871c:	add	r3, r3, #1
   18720:	lsl	r3, r3, #3
   18724:	sub	r2, fp, #12
   18728:	add	r3, r2, r3
   1872c:	ldr	r2, [pc, #320]	; 18874 <flatcc_builder_create_buffer@@Base+0x3e4>
   18730:	ldr	r2, [r4, r2]
   18734:	str	r2, [r3, #-104]	; 0xffffff98
   18738:	ldr	r3, [fp, #-112]	; 0xffffff90
   1873c:	add	r3, r3, #1
   18740:	lsl	r3, r3, #3
   18744:	sub	r2, fp, #12
   18748:	add	r3, r2, r3
   1874c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18750:	str	r2, [r3, #-100]	; 0xffffff9c
   18754:	ldr	r3, [fp, #-112]	; 0xffffff90
   18758:	add	r3, r3, #1
   1875c:	str	r3, [fp, #-112]	; 0xffffff90
   18760:	ldr	r3, [fp, #-128]	; 0xffffff80
   18764:	ldr	r3, [r3, #136]	; 0x88
   18768:	mov	r2, r3
   1876c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18770:	sub	r3, r2, r3
   18774:	ldr	r2, [fp, #-20]	; 0xffffffec
   18778:	cmp	r2, #0
   1877c:	bne	1878c <flatcc_builder_create_buffer@@Base+0x2fc>
   18780:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18784:	cmp	r2, #0
   18788:	beq	18794 <flatcc_builder_create_buffer@@Base+0x304>
   1878c:	mov	r2, #4
   18790:	b	18798 <flatcc_builder_create_buffer@@Base+0x308>
   18794:	mov	r2, #0
   18798:	add	r3, r2, r3
   1879c:	str	r3, [fp, #-32]	; 0xffffffe0
   187a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   187a4:	cmp	r3, #0
   187a8:	beq	187d4 <flatcc_builder_create_buffer@@Base+0x344>
   187ac:	ldr	r3, [fp, #-128]	; 0xffffff80
   187b0:	ldr	r3, [r3, #144]	; 0x90
   187b4:	mov	r2, r3
   187b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   187bc:	sub	r3, r2, r3
   187c0:	mov	r0, r3
   187c4:	bl	166a8 <main@@Base+0x114>
   187c8:	mov	r3, r0
   187cc:	str	r3, [fp, #-44]	; 0xffffffd4
   187d0:	b	187f8 <flatcc_builder_create_buffer@@Base+0x368>
   187d4:	ldr	r3, [fp, #-128]	; 0xffffff80
   187d8:	ldr	r3, [r3, #140]	; 0x8c
   187dc:	mov	r2, r3
   187e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   187e4:	sub	r3, r2, r3
   187e8:	mov	r0, r3
   187ec:	bl	166a8 <main@@Base+0x114>
   187f0:	mov	r3, r0
   187f4:	str	r3, [fp, #-44]	; 0xffffffd4
   187f8:	ldr	r2, [fp, #-140]	; 0xffffff74
   187fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18800:	sub	r3, r2, r3
   18804:	mov	r0, r3
   18808:	bl	166a8 <main@@Base+0x114>
   1880c:	mov	r3, r0
   18810:	str	r3, [fp, #-40]	; 0xffffffd8
   18814:	sub	r3, fp, #116	; 0x74
   18818:	mov	r1, r3
   1881c:	ldr	r0, [fp, #-128]	; 0xffffff80
   18820:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   18824:	str	r0, [fp, #-36]	; 0xffffffdc
   18828:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1882c:	cmp	r3, #0
   18830:	bne	18854 <flatcc_builder_create_buffer@@Base+0x3c4>
   18834:	ldr	r3, [pc, #60]	; 18878 <flatcc_builder_create_buffer@@Base+0x3e8>
   18838:	add	r3, pc, r3
   1883c:	mov	r2, #772	; 0x304
   18840:	ldr	r1, [pc, #52]	; 1887c <flatcc_builder_create_buffer@@Base+0x3ec>
   18844:	add	r1, pc, r1
   18848:	ldr	r0, [pc, #48]	; 18880 <flatcc_builder_create_buffer@@Base+0x3f0>
   1884c:	add	r0, pc, r0
   18850:	bl	124b0 <__assert_fail@plt>
   18854:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18858:	mov	r0, r3
   1885c:	sub	sp, fp, #8
   18860:	ldr	r4, [sp]
   18864:	ldr	fp, [sp, #4]
   18868:	add	sp, sp, #8
   1886c:	pop	{pc}		; (ldr pc, [sp], #4)
   18870:	andeq	r0, r2, ip, lsr fp
   18874:	andeq	r0, r0, r0, asr r0
   18878:			; <UNDEFINED> instruction: 0x0000ebb0
   1887c:	ldrdeq	lr, [r0], -r8
   18880:	andeq	lr, r0, r0, lsr r7

00018884 <flatcc_builder_create_struct@@Base>:
   18884:	str	r4, [sp, #-12]!
   18888:	str	fp, [sp, #4]
   1888c:	str	lr, [sp, #8]
   18890:	add	fp, sp, #8
   18894:	sub	sp, sp, #100	; 0x64
   18898:	str	r0, [fp, #-96]	; 0xffffffa0
   1889c:	str	r1, [fp, #-100]	; 0xffffff9c
   188a0:	str	r2, [fp, #-104]	; 0xffffff98
   188a4:	strh	r3, [fp, #-106]	; 0xffffff96
   188a8:	ldr	r4, [pc, #340]	; 18a04 <flatcc_builder_create_struct@@Base+0x180>
   188ac:	add	r4, pc, r4
   188b0:	ldrh	r3, [fp, #-106]	; 0xffffff96
   188b4:	cmp	r3, #0
   188b8:	bne	188dc <flatcc_builder_create_struct@@Base+0x58>
   188bc:	ldr	r3, [pc, #324]	; 18a08 <flatcc_builder_create_struct@@Base+0x184>
   188c0:	add	r3, pc, r3
   188c4:	movw	r2, #783	; 0x30f
   188c8:	ldr	r1, [pc, #316]	; 18a0c <flatcc_builder_create_struct@@Base+0x188>
   188cc:	add	r1, pc, r1
   188d0:	ldr	r0, [pc, #312]	; 18a10 <flatcc_builder_create_struct@@Base+0x18c>
   188d4:	add	r0, pc, r0
   188d8:	bl	124b0 <__assert_fail@plt>
   188dc:	ldrh	r3, [fp, #-106]	; 0xffffff96
   188e0:	mov	r1, r3
   188e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   188e8:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   188ec:	ldrh	r3, [fp, #-106]	; 0xffffff96
   188f0:	mov	r2, r3
   188f4:	ldr	r1, [fp, #-104]	; 0xffffff98
   188f8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   188fc:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   18900:	str	r0, [fp, #-16]
   18904:	mov	r3, #0
   18908:	str	r3, [fp, #-88]	; 0xffffffa8
   1890c:	mov	r3, #0
   18910:	str	r3, [fp, #-84]	; 0xffffffac
   18914:	ldr	r3, [fp, #-104]	; 0xffffff98
   18918:	cmp	r3, #0
   1891c:	beq	18974 <flatcc_builder_create_struct@@Base+0xf0>
   18920:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18924:	ldr	r3, [fp, #-104]	; 0xffffff98
   18928:	add	r3, r2, r3
   1892c:	str	r3, [fp, #-88]	; 0xffffffa8
   18930:	ldr	r3, [fp, #-84]	; 0xffffffac
   18934:	add	r3, r3, #1
   18938:	lsl	r3, r3, #3
   1893c:	sub	r2, fp, #12
   18940:	add	r3, r2, r3
   18944:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18948:	str	r2, [r3, #-76]	; 0xffffffb4
   1894c:	ldr	r3, [fp, #-84]	; 0xffffffac
   18950:	add	r3, r3, #1
   18954:	lsl	r3, r3, #3
   18958:	sub	r2, fp, #12
   1895c:	add	r3, r2, r3
   18960:	ldr	r2, [fp, #-104]	; 0xffffff98
   18964:	str	r2, [r3, #-72]	; 0xffffffb8
   18968:	ldr	r3, [fp, #-84]	; 0xffffffac
   1896c:	add	r3, r3, #1
   18970:	str	r3, [fp, #-84]	; 0xffffffac
   18974:	ldr	r3, [fp, #-16]
   18978:	cmp	r3, #0
   1897c:	beq	189d8 <flatcc_builder_create_struct@@Base+0x154>
   18980:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18984:	ldr	r3, [fp, #-16]
   18988:	add	r3, r2, r3
   1898c:	str	r3, [fp, #-88]	; 0xffffffa8
   18990:	ldr	r3, [fp, #-84]	; 0xffffffac
   18994:	add	r3, r3, #1
   18998:	lsl	r3, r3, #3
   1899c:	sub	r2, fp, #12
   189a0:	add	r3, r2, r3
   189a4:	ldr	r2, [pc, #104]	; 18a14 <flatcc_builder_create_struct@@Base+0x190>
   189a8:	ldr	r2, [r4, r2]
   189ac:	str	r2, [r3, #-76]	; 0xffffffb4
   189b0:	ldr	r3, [fp, #-84]	; 0xffffffac
   189b4:	add	r3, r3, #1
   189b8:	lsl	r3, r3, #3
   189bc:	sub	r2, fp, #12
   189c0:	add	r3, r2, r3
   189c4:	ldr	r2, [fp, #-16]
   189c8:	str	r2, [r3, #-72]	; 0xffffffb8
   189cc:	ldr	r3, [fp, #-84]	; 0xffffffac
   189d0:	add	r3, r3, #1
   189d4:	str	r3, [fp, #-84]	; 0xffffffac
   189d8:	sub	r3, fp, #88	; 0x58
   189dc:	mov	r1, r3
   189e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   189e4:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   189e8:	mov	r3, r0
   189ec:	mov	r0, r3
   189f0:	sub	sp, fp, #8
   189f4:	ldr	r4, [sp]
   189f8:	ldr	fp, [sp, #4]
   189fc:	add	sp, sp, #8
   18a00:	pop	{pc}		; (ldr pc, [sp], #4)
   18a04:	andeq	r0, r2, ip, asr #14
   18a08:	andeq	lr, r0, r8, asr #22
   18a0c:	andeq	lr, r0, r0, asr r6
   18a10:	andeq	lr, r0, ip, lsl #14
   18a14:	andeq	r0, r0, r0, asr r0

00018a18 <flatcc_builder_start_buffer@@Base>:
   18a18:	str	r4, [sp, #-12]!
   18a1c:	str	fp, [sp, #4]
   18a20:	str	lr, [sp, #8]
   18a24:	add	fp, sp, #8
   18a28:	sub	sp, sp, #20
   18a2c:	str	r0, [fp, #-16]
   18a30:	str	r1, [fp, #-20]	; 0xffffffec
   18a34:	str	r3, [fp, #-28]	; 0xffffffe4
   18a38:	mov	r3, r2
   18a3c:	strh	r3, [fp, #-22]	; 0xffffffea
   18a40:	ldr	r4, [pc, #312]	; 18b80 <flatcc_builder_start_buffer@@Base+0x168>
   18a44:	add	r4, pc, r4
   18a48:	ldr	r3, [fp, #-16]
   18a4c:	ldrh	r3, [r3, #128]	; 0x80
   18a50:	mov	r1, r3
   18a54:	ldr	r0, [fp, #-16]
   18a58:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18a5c:	mov	r3, r0
   18a60:	cmp	r3, #0
   18a64:	beq	18a70 <flatcc_builder_start_buffer@@Base+0x58>
   18a68:	mvn	r3, #0
   18a6c:	b	18b68 <flatcc_builder_start_buffer@@Base+0x150>
   18a70:	ldr	r3, [fp, #-16]
   18a74:	mov	r2, #1
   18a78:	strh	r2, [r3, #128]	; 0x80
   18a7c:	ldr	r3, [fp, #-16]
   18a80:	ldr	r3, [r3, #32]
   18a84:	ldr	r2, [fp, #-16]
   18a88:	ldrh	r2, [r2, #132]	; 0x84
   18a8c:	strh	r2, [r3, #34]	; 0x22
   18a90:	ldr	r3, [fp, #-16]
   18a94:	ldrh	r2, [fp, #-22]	; 0xffffffea
   18a98:	strh	r2, [r3, #132]	; 0x84
   18a9c:	ldr	r3, [fp, #-16]
   18aa0:	ldr	r3, [r3, #32]
   18aa4:	ldr	r2, [fp, #-16]
   18aa8:	ldrh	r2, [r2, #164]	; 0xa4
   18aac:	strh	r2, [r3, #32]
   18ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ab4:	uxth	r2, r3
   18ab8:	ldr	r3, [fp, #-16]
   18abc:	strh	r2, [r3, #164]	; 0xa4
   18ac0:	ldr	r3, [fp, #-16]
   18ac4:	ldr	r3, [r3, #32]
   18ac8:	ldr	r2, [fp, #-16]
   18acc:	ldr	r2, [r2, #144]	; 0x90
   18ad0:	str	r2, [r3, #20]
   18ad4:	ldr	r3, [fp, #-16]
   18ad8:	ldr	r3, [r3, #32]
   18adc:	ldr	r2, [fp, #-16]
   18ae0:	ldr	r2, [r2, #152]	; 0x98
   18ae4:	str	r2, [r3, #28]
   18ae8:	ldr	r3, [fp, #-16]
   18aec:	ldr	r2, [r3, #136]	; 0x88
   18af0:	ldr	r3, [fp, #-16]
   18af4:	str	r2, [r3, #144]	; 0x90
   18af8:	ldr	r3, [fp, #-16]
   18afc:	ldr	r3, [r3, #148]	; 0x94
   18b00:	add	r1, r3, #1
   18b04:	ldr	r2, [fp, #-16]
   18b08:	str	r1, [r2, #148]	; 0x94
   18b0c:	ldr	r2, [fp, #-16]
   18b10:	str	r3, [r2, #152]	; 0x98
   18b14:	ldr	r3, [fp, #-16]
   18b18:	ldr	r3, [r3, #32]
   18b1c:	ldr	r2, [fp, #-16]
   18b20:	ldr	r2, [r2, #168]	; 0xa8
   18b24:	str	r2, [r3, #16]
   18b28:	ldr	r3, [fp, #-16]
   18b2c:	add	r2, r3, #168	; 0xa8
   18b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b34:	cmp	r3, #0
   18b38:	beq	18b44 <flatcc_builder_start_buffer@@Base+0x12c>
   18b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b40:	b	18b4c <flatcc_builder_start_buffer@@Base+0x134>
   18b44:	ldr	r3, [pc, #56]	; 18b84 <flatcc_builder_start_buffer@@Base+0x16c>
   18b48:	ldr	r3, [r4, r3]
   18b4c:	ldr	r3, [r3]
   18b50:	str	r3, [r2]
   18b54:	ldr	r3, [fp, #-16]
   18b58:	ldr	r3, [r3, #32]
   18b5c:	mov	r2, #1
   18b60:	strh	r2, [r3, #14]
   18b64:	mov	r3, #0
   18b68:	mov	r0, r3
   18b6c:	sub	sp, fp, #8
   18b70:	ldr	r4, [sp]
   18b74:	ldr	fp, [sp, #4]
   18b78:	add	sp, sp, #8
   18b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b80:			; <UNDEFINED> instruction: 0x000205b4
   18b84:	andeq	r0, r0, r0, asr r0

00018b88 <flatcc_builder_end_buffer@@Base>:
   18b88:	str	fp, [sp, #-8]!
   18b8c:	str	lr, [sp, #4]
   18b90:	add	fp, sp, #4
   18b94:	sub	sp, sp, #24
   18b98:	str	r0, [fp, #-16]
   18b9c:	str	r1, [fp, #-20]	; 0xffffffec
   18ba0:	ldr	r3, [fp, #-16]
   18ba4:	ldrh	r3, [r3, #164]	; 0xa4
   18ba8:	and	r3, r3, #2
   18bac:	str	r3, [fp, #-8]
   18bb0:	ldr	r3, [fp, #-16]
   18bb4:	ldr	r3, [r3, #152]	; 0x98
   18bb8:	cmp	r3, #0
   18bbc:	movne	r3, #1
   18bc0:	moveq	r3, #0
   18bc4:	uxtb	r3, r3
   18bc8:	mov	r2, r3
   18bcc:	ldr	r3, [fp, #-8]
   18bd0:	orr	r3, r3, r2
   18bd4:	str	r3, [fp, #-8]
   18bd8:	ldr	r3, [fp, #-16]
   18bdc:	ldr	r3, [r3, #32]
   18be0:	ldrh	r3, [r3, #14]
   18be4:	cmp	r3, #1
   18be8:	beq	18c0c <flatcc_builder_end_buffer@@Base+0x84>
   18bec:	ldr	r3, [pc, #232]	; 18cdc <flatcc_builder_end_buffer@@Base+0x154>
   18bf0:	add	r3, pc, r3
   18bf4:	movw	r2, #838	; 0x346
   18bf8:	ldr	r1, [pc, #224]	; 18ce0 <flatcc_builder_end_buffer@@Base+0x158>
   18bfc:	add	r1, pc, r1
   18c00:	ldr	r0, [pc, #220]	; 18ce4 <flatcc_builder_end_buffer@@Base+0x15c>
   18c04:	add	r0, pc, r0
   18c08:	bl	124b0 <__assert_fail@plt>
   18c0c:	ldr	r3, [fp, #-16]
   18c10:	ldrh	r3, [r3, #132]	; 0x84
   18c14:	mov	r1, r3
   18c18:	ldr	r0, [fp, #-16]
   18c1c:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   18c20:	ldr	r3, [fp, #-16]
   18c24:	add	r1, r3, #168	; 0xa8
   18c28:	ldr	r3, [fp, #-16]
   18c2c:	ldrh	r0, [r3, #132]	; 0x84
   18c30:	ldr	r3, [fp, #-16]
   18c34:	ldrh	r3, [r3, #128]	; 0x80
   18c38:	ldr	r2, [fp, #-8]
   18c3c:	str	r2, [sp, #4]
   18c40:	str	r3, [sp]
   18c44:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c48:	mov	r2, r0
   18c4c:	ldr	r0, [fp, #-16]
   18c50:	bl	18490 <flatcc_builder_create_buffer@@Base>
   18c54:	str	r0, [fp, #-12]
   18c58:	ldr	r3, [fp, #-12]
   18c5c:	cmp	r3, #0
   18c60:	bne	18c6c <flatcc_builder_end_buffer@@Base+0xe4>
   18c64:	mov	r3, #0
   18c68:	b	18cc8 <flatcc_builder_end_buffer@@Base+0x140>
   18c6c:	ldr	r3, [fp, #-16]
   18c70:	ldr	r3, [r3, #32]
   18c74:	ldr	r2, [r3, #20]
   18c78:	ldr	r3, [fp, #-16]
   18c7c:	str	r2, [r3, #144]	; 0x90
   18c80:	ldr	r3, [fp, #-16]
   18c84:	ldr	r3, [r3, #32]
   18c88:	ldr	r2, [r3, #28]
   18c8c:	ldr	r3, [fp, #-16]
   18c90:	str	r2, [r3, #152]	; 0x98
   18c94:	ldr	r3, [fp, #-16]
   18c98:	ldr	r3, [r3, #32]
   18c9c:	ldr	r2, [r3, #16]
   18ca0:	ldr	r3, [fp, #-16]
   18ca4:	str	r2, [r3, #168]	; 0xa8
   18ca8:	ldr	r3, [fp, #-16]
   18cac:	ldr	r3, [r3, #32]
   18cb0:	ldrh	r2, [r3, #32]
   18cb4:	ldr	r3, [fp, #-16]
   18cb8:	strh	r2, [r3, #164]	; 0xa4
   18cbc:	ldr	r0, [fp, #-16]
   18cc0:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18cc4:	ldr	r3, [fp, #-12]
   18cc8:	mov	r0, r3
   18ccc:	sub	sp, fp, #4
   18cd0:	ldr	fp, [sp]
   18cd4:	add	sp, sp, #4
   18cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   18cdc:	andeq	lr, r0, r8, lsr r8
   18ce0:	andeq	lr, r0, r0, lsr #6
   18ce4:	andeq	lr, r0, r8, ror #7

00018ce8 <flatcc_builder_start_struct@@Base>:
   18ce8:	str	fp, [sp, #-8]!
   18cec:	str	lr, [sp, #4]
   18cf0:	add	fp, sp, #4
   18cf4:	sub	sp, sp, #16
   18cf8:	str	r0, [fp, #-8]
   18cfc:	str	r1, [fp, #-12]
   18d00:	mov	r3, r2
   18d04:	strh	r3, [fp, #-14]
   18d08:	ldrh	r3, [fp, #-14]
   18d0c:	mov	r1, r3
   18d10:	ldr	r0, [fp, #-8]
   18d14:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18d18:	mov	r3, r0
   18d1c:	cmp	r3, #0
   18d20:	beq	18d2c <flatcc_builder_start_struct@@Base+0x44>
   18d24:	mov	r3, #0
   18d28:	b	18d58 <flatcc_builder_start_struct@@Base+0x70>
   18d2c:	ldr	r3, [fp, #-8]
   18d30:	ldr	r3, [r3, #32]
   18d34:	mov	r2, #2
   18d38:	strh	r2, [r3, #14]
   18d3c:	mvn	r1, #3
   18d40:	ldr	r0, [fp, #-8]
   18d44:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   18d48:	ldr	r1, [fp, #-12]
   18d4c:	ldr	r0, [fp, #-8]
   18d50:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   18d54:	mov	r3, r0
   18d58:	mov	r0, r3
   18d5c:	sub	sp, fp, #4
   18d60:	ldr	fp, [sp]
   18d64:	add	sp, sp, #4
   18d68:	pop	{pc}		; (ldr pc, [sp], #4)

00018d6c <flatcc_builder_struct_edit@@Base>:
   18d6c:	push	{fp}		; (str fp, [sp, #-4]!)
   18d70:	add	fp, sp, #0
   18d74:	sub	sp, sp, #12
   18d78:	str	r0, [fp, #-8]
   18d7c:	ldr	r3, [fp, #-8]
   18d80:	ldr	r3, [r3, #16]
   18d84:	mov	r0, r3
   18d88:	add	sp, fp, #0
   18d8c:	pop	{fp}		; (ldr fp, [sp], #4)
   18d90:	bx	lr

00018d94 <flatcc_builder_end_struct@@Base>:
   18d94:	str	fp, [sp, #-8]!
   18d98:	str	lr, [sp, #4]
   18d9c:	add	fp, sp, #4
   18da0:	sub	sp, sp, #16
   18da4:	str	r0, [fp, #-16]
   18da8:	ldr	r3, [fp, #-16]
   18dac:	ldr	r3, [r3, #32]
   18db0:	ldrh	r3, [r3, #14]
   18db4:	cmp	r3, #2
   18db8:	beq	18ddc <flatcc_builder_end_struct@@Base+0x48>
   18dbc:	ldr	r3, [pc, #112]	; 18e34 <flatcc_builder_end_struct@@Base+0xa0>
   18dc0:	add	r3, pc, r3
   18dc4:	mov	r2, #872	; 0x368
   18dc8:	ldr	r1, [pc, #104]	; 18e38 <flatcc_builder_end_struct@@Base+0xa4>
   18dcc:	add	r1, pc, r1
   18dd0:	ldr	r0, [pc, #100]	; 18e3c <flatcc_builder_end_struct@@Base+0xa8>
   18dd4:	add	r0, pc, r0
   18dd8:	bl	124b0 <__assert_fail@plt>
   18ddc:	ldr	r3, [fp, #-16]
   18de0:	ldr	r1, [r3, #16]
   18de4:	ldr	r3, [fp, #-16]
   18de8:	ldr	r2, [r3, #20]
   18dec:	ldr	r3, [fp, #-16]
   18df0:	ldrh	r3, [r3, #130]	; 0x82
   18df4:	ldr	r0, [fp, #-16]
   18df8:	bl	18884 <flatcc_builder_create_struct@@Base>
   18dfc:	str	r0, [fp, #-8]
   18e00:	ldr	r3, [fp, #-8]
   18e04:	cmp	r3, #0
   18e08:	bne	18e14 <flatcc_builder_end_struct@@Base+0x80>
   18e0c:	mov	r3, #0
   18e10:	b	18e20 <flatcc_builder_end_struct@@Base+0x8c>
   18e14:	ldr	r0, [fp, #-16]
   18e18:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18e1c:	ldr	r3, [fp, #-8]
   18e20:	mov	r0, r3
   18e24:	sub	sp, fp, #4
   18e28:	ldr	fp, [sp]
   18e2c:	add	sp, sp, #4
   18e30:	pop	{pc}		; (ldr pc, [sp], #4)
   18e34:	andeq	lr, r0, r4, lsl #13
   18e38:	andeq	lr, r0, r0, asr r1
   18e3c:	andeq	lr, r0, r4, asr #4
   18e40:	str	fp, [sp, #-8]!
   18e44:	str	lr, [sp, #4]
   18e48:	add	fp, sp, #4
   18e4c:	sub	sp, sp, #24
   18e50:	str	r0, [fp, #-16]
   18e54:	str	r1, [fp, #-20]	; 0xffffffec
   18e58:	str	r2, [fp, #-24]	; 0xffffffe8
   18e5c:	ldr	r3, [fp, #-16]
   18e60:	ldr	r3, [r3, #32]
   18e64:	ldr	r3, [r3, #20]
   18e68:	str	r3, [fp, #-8]
   18e6c:	ldr	r2, [fp, #-8]
   18e70:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e74:	add	r3, r2, r3
   18e78:	str	r3, [fp, #-12]
   18e7c:	ldr	r2, [fp, #-8]
   18e80:	ldr	r3, [fp, #-12]
   18e84:	cmp	r2, r3
   18e88:	bhi	18e9c <flatcc_builder_end_struct@@Base+0x108>
   18e8c:	ldr	r2, [fp, #-12]
   18e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e94:	cmp	r2, r3
   18e98:	bls	18ee4 <flatcc_builder_end_struct@@Base+0x150>
   18e9c:	ldr	r2, [fp, #-8]
   18ea0:	ldr	r3, [fp, #-12]
   18ea4:	cmp	r2, r3
   18ea8:	bhi	18ebc <flatcc_builder_end_struct@@Base+0x128>
   18eac:	ldr	r2, [fp, #-12]
   18eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18eb4:	cmp	r2, r3
   18eb8:	bls	18edc <flatcc_builder_end_struct@@Base+0x148>
   18ebc:	ldr	r3, [pc, #72]	; 18f0c <flatcc_builder_end_struct@@Base+0x178>
   18ec0:	add	r3, pc, r3
   18ec4:	mov	r2, #892	; 0x37c
   18ec8:	ldr	r1, [pc, #64]	; 18f10 <flatcc_builder_end_struct@@Base+0x17c>
   18ecc:	add	r1, pc, r1
   18ed0:	ldr	r0, [pc, #60]	; 18f14 <flatcc_builder_end_struct@@Base+0x180>
   18ed4:	add	r0, pc, r0
   18ed8:	bl	124b0 <__assert_fail@plt>
   18edc:	mvn	r3, #0
   18ee0:	b	18ef8 <flatcc_builder_end_struct@@Base+0x164>
   18ee4:	ldr	r3, [fp, #-16]
   18ee8:	ldr	r3, [r3, #32]
   18eec:	ldr	r2, [fp, #-12]
   18ef0:	str	r2, [r3, #20]
   18ef4:	mov	r3, #0
   18ef8:	mov	r0, r3
   18efc:	sub	sp, fp, #4
   18f00:	ldr	fp, [sp]
   18f04:	add	sp, sp, #4
   18f08:	pop	{pc}		; (ldr pc, [sp], #4)
   18f0c:	andeq	lr, r0, r0, lsr #11
   18f10:	andeq	lr, r0, r0, asr r0
   18f14:	andeq	lr, r0, r0, ror r1

00018f18 <flatcc_builder_extend_vector@@Base>:
   18f18:	str	fp, [sp, #-8]!
   18f1c:	str	lr, [sp, #4]
   18f20:	add	fp, sp, #4
   18f24:	sub	sp, sp, #8
   18f28:	str	r0, [fp, #-8]
   18f2c:	str	r1, [fp, #-12]
   18f30:	ldr	r3, [fp, #-8]
   18f34:	ldr	r3, [r3, #32]
   18f38:	ldr	r3, [r3, #24]
   18f3c:	mov	r2, r3
   18f40:	ldr	r1, [fp, #-12]
   18f44:	ldr	r0, [fp, #-8]
   18f48:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   18f4c:	mov	r3, r0
   18f50:	cmp	r3, #0
   18f54:	beq	18f60 <flatcc_builder_extend_vector@@Base+0x48>
   18f58:	mov	r3, #0
   18f5c:	b	18f84 <flatcc_builder_extend_vector@@Base+0x6c>
   18f60:	ldr	r3, [fp, #-8]
   18f64:	ldr	r3, [r3, #32]
   18f68:	ldr	r3, [r3, #16]
   18f6c:	ldr	r2, [fp, #-12]
   18f70:	mul	r3, r2, r3
   18f74:	mov	r1, r3
   18f78:	ldr	r0, [fp, #-8]
   18f7c:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   18f80:	mov	r3, r0
   18f84:	mov	r0, r3
   18f88:	sub	sp, fp, #4
   18f8c:	ldr	fp, [sp]
   18f90:	add	sp, sp, #4
   18f94:	pop	{pc}		; (ldr pc, [sp], #4)

00018f98 <flatcc_builder_vector_push@@Base>:
   18f98:	str	fp, [sp, #-8]!
   18f9c:	str	lr, [sp, #4]
   18fa0:	add	fp, sp, #4
   18fa4:	sub	sp, sp, #8
   18fa8:	str	r0, [fp, #-8]
   18fac:	str	r1, [fp, #-12]
   18fb0:	ldr	r3, [fp, #-8]
   18fb4:	ldr	r3, [r3, #32]
   18fb8:	ldrh	r3, [r3, #14]
   18fbc:	cmp	r3, #4
   18fc0:	beq	18fe4 <flatcc_builder_vector_push@@Base+0x4c>
   18fc4:	ldr	r3, [pc, #208]	; 1909c <flatcc_builder_vector_push@@Base+0x104>
   18fc8:	add	r3, pc, r3
   18fcc:	movw	r2, #907	; 0x38b
   18fd0:	ldr	r1, [pc, #200]	; 190a0 <flatcc_builder_vector_push@@Base+0x108>
   18fd4:	add	r1, pc, r1
   18fd8:	ldr	r0, [pc, #196]	; 190a4 <flatcc_builder_vector_push@@Base+0x10c>
   18fdc:	add	r0, pc, r0
   18fe0:	bl	124b0 <__assert_fail@plt>
   18fe4:	ldr	r3, [fp, #-8]
   18fe8:	ldr	r3, [r3, #32]
   18fec:	ldr	r2, [r3, #20]
   18ff0:	ldr	r3, [fp, #-8]
   18ff4:	ldr	r3, [r3, #32]
   18ff8:	ldr	r3, [r3, #24]
   18ffc:	cmp	r2, r3
   19000:	bls	1904c <flatcc_builder_vector_push@@Base+0xb4>
   19004:	ldr	r3, [fp, #-8]
   19008:	ldr	r3, [r3, #32]
   1900c:	ldr	r2, [r3, #20]
   19010:	ldr	r3, [fp, #-8]
   19014:	ldr	r3, [r3, #32]
   19018:	ldr	r3, [r3, #24]
   1901c:	cmp	r2, r3
   19020:	bls	19044 <flatcc_builder_vector_push@@Base+0xac>
   19024:	ldr	r3, [pc, #124]	; 190a8 <flatcc_builder_vector_push@@Base+0x110>
   19028:	add	r3, pc, r3
   1902c:	mov	r2, #908	; 0x38c
   19030:	ldr	r1, [pc, #116]	; 190ac <flatcc_builder_vector_push@@Base+0x114>
   19034:	add	r1, pc, r1
   19038:	ldr	r0, [pc, #112]	; 190b0 <flatcc_builder_vector_push@@Base+0x118>
   1903c:	add	r0, pc, r0
   19040:	bl	124b0 <__assert_fail@plt>
   19044:	mov	r3, #0
   19048:	b	19088 <flatcc_builder_vector_push@@Base+0xf0>
   1904c:	ldr	r3, [fp, #-8]
   19050:	ldr	r3, [r3, #32]
   19054:	ldr	r2, [r3, #20]
   19058:	ldr	r3, [fp, #-8]
   1905c:	ldr	r3, [r3, #32]
   19060:	add	r2, r2, #1
   19064:	str	r2, [r3, #20]
   19068:	ldr	r3, [fp, #-8]
   1906c:	ldr	r3, [r3, #32]
   19070:	ldr	r3, [r3, #16]
   19074:	mov	r2, r3
   19078:	ldr	r1, [fp, #-12]
   1907c:	ldr	r0, [fp, #-8]
   19080:	bl	16c18 <flatcc_builder_default_alloc@@Base+0x420>
   19084:	mov	r3, r0
   19088:	mov	r0, r3
   1908c:	sub	sp, fp, #4
   19090:	ldr	fp, [sp]
   19094:	add	sp, sp, #4
   19098:	pop	{pc}		; (ldr pc, [sp], #4)
   1909c:	andeq	lr, r0, ip, lsr #9
   190a0:	andeq	sp, r0, r8, asr #30
   190a4:	andeq	lr, r0, r4, lsl #1
   190a8:	andeq	lr, r0, ip, asr #8
   190ac:	andeq	sp, r0, r8, ror #29
   190b0:	andeq	lr, r0, r0, asr r0

000190b4 <flatcc_builder_append_vector@@Base>:
   190b4:	str	fp, [sp, #-8]!
   190b8:	str	lr, [sp, #4]
   190bc:	add	fp, sp, #4
   190c0:	sub	sp, sp, #16
   190c4:	str	r0, [fp, #-8]
   190c8:	str	r1, [fp, #-12]
   190cc:	str	r2, [fp, #-16]
   190d0:	ldr	r3, [fp, #-8]
   190d4:	ldr	r3, [r3, #32]
   190d8:	ldrh	r3, [r3, #14]
   190dc:	cmp	r3, #4
   190e0:	beq	19104 <flatcc_builder_append_vector@@Base+0x50>
   190e4:	ldr	r3, [pc, #132]	; 19170 <flatcc_builder_append_vector@@Base+0xbc>
   190e8:	add	r3, pc, r3
   190ec:	movw	r2, #915	; 0x393
   190f0:	ldr	r1, [pc, #124]	; 19174 <flatcc_builder_append_vector@@Base+0xc0>
   190f4:	add	r1, pc, r1
   190f8:	ldr	r0, [pc, #120]	; 19178 <flatcc_builder_append_vector@@Base+0xc4>
   190fc:	add	r0, pc, r0
   19100:	bl	124b0 <__assert_fail@plt>
   19104:	ldr	r3, [fp, #-8]
   19108:	ldr	r3, [r3, #32]
   1910c:	ldr	r3, [r3, #24]
   19110:	mov	r2, r3
   19114:	ldr	r1, [fp, #-16]
   19118:	ldr	r0, [fp, #-8]
   1911c:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   19120:	mov	r3, r0
   19124:	cmp	r3, #0
   19128:	beq	19134 <flatcc_builder_append_vector@@Base+0x80>
   1912c:	mov	r3, #0
   19130:	b	1915c <flatcc_builder_append_vector@@Base+0xa8>
   19134:	ldr	r3, [fp, #-8]
   19138:	ldr	r3, [r3, #32]
   1913c:	ldr	r3, [r3, #16]
   19140:	ldr	r2, [fp, #-16]
   19144:	mul	r3, r2, r3
   19148:	mov	r2, r3
   1914c:	ldr	r1, [fp, #-12]
   19150:	ldr	r0, [fp, #-8]
   19154:	bl	16c18 <flatcc_builder_default_alloc@@Base+0x420>
   19158:	mov	r3, r0
   1915c:	mov	r0, r3
   19160:	sub	sp, fp, #4
   19164:	ldr	fp, [sp]
   19168:	add	sp, sp, #4
   1916c:	pop	{pc}		; (ldr pc, [sp], #4)
   19170:	andeq	lr, r0, r8, lsr #7
   19174:	andeq	sp, r0, r8, lsr #28
   19178:	andeq	sp, r0, r4, ror #30

0001917c <flatcc_builder_extend_offset_vector@@Base>:
   1917c:	str	fp, [sp, #-8]!
   19180:	str	lr, [sp, #4]
   19184:	add	fp, sp, #4
   19188:	sub	sp, sp, #8
   1918c:	str	r0, [fp, #-8]
   19190:	str	r1, [fp, #-12]
   19194:	mvn	r2, #-1073741824	; 0xc0000000
   19198:	ldr	r1, [fp, #-12]
   1919c:	ldr	r0, [fp, #-8]
   191a0:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   191a4:	mov	r3, r0
   191a8:	cmp	r3, #0
   191ac:	beq	191b8 <flatcc_builder_extend_offset_vector@@Base+0x3c>
   191b0:	mov	r3, #0
   191b4:	b	191d0 <flatcc_builder_extend_offset_vector@@Base+0x54>
   191b8:	ldr	r3, [fp, #-12]
   191bc:	lsl	r3, r3, #2
   191c0:	mov	r1, r3
   191c4:	ldr	r0, [fp, #-8]
   191c8:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   191cc:	mov	r3, r0
   191d0:	mov	r0, r3
   191d4:	sub	sp, fp, #4
   191d8:	ldr	fp, [sp]
   191dc:	add	sp, sp, #4
   191e0:	pop	{pc}		; (ldr pc, [sp], #4)

000191e4 <flatcc_builder_offset_vector_push@@Base>:
   191e4:	str	fp, [sp, #-8]!
   191e8:	str	lr, [sp, #4]
   191ec:	add	fp, sp, #4
   191f0:	sub	sp, sp, #16
   191f4:	str	r0, [fp, #-16]
   191f8:	str	r1, [fp, #-20]	; 0xffffffec
   191fc:	ldr	r3, [fp, #-16]
   19200:	ldr	r3, [r3, #32]
   19204:	ldrh	r3, [r3, #14]
   19208:	cmp	r3, #5
   1920c:	beq	19230 <flatcc_builder_offset_vector_push@@Base+0x4c>
   19210:	ldr	r3, [pc, #152]	; 192b0 <flatcc_builder_offset_vector_push@@Base+0xcc>
   19214:	add	r3, pc, r3
   19218:	movw	r2, #934	; 0x3a6
   1921c:	ldr	r1, [pc, #144]	; 192b4 <flatcc_builder_offset_vector_push@@Base+0xd0>
   19220:	add	r1, pc, r1
   19224:	ldr	r0, [pc, #140]	; 192b8 <flatcc_builder_offset_vector_push@@Base+0xd4>
   19228:	add	r0, pc, r0
   1922c:	bl	124b0 <__assert_fail@plt>
   19230:	ldr	r3, [fp, #-16]
   19234:	ldr	r3, [r3, #32]
   19238:	ldr	r3, [r3, #20]
   1923c:	cmn	r3, #-1073741823	; 0xc0000001
   19240:	bne	1924c <flatcc_builder_offset_vector_push@@Base+0x68>
   19244:	mov	r3, #0
   19248:	b	1929c <flatcc_builder_offset_vector_push@@Base+0xb8>
   1924c:	ldr	r3, [fp, #-16]
   19250:	ldr	r3, [r3, #32]
   19254:	ldr	r2, [r3, #20]
   19258:	ldr	r3, [fp, #-16]
   1925c:	ldr	r3, [r3, #32]
   19260:	add	r2, r2, #1
   19264:	str	r2, [r3, #20]
   19268:	mov	r1, #4
   1926c:	ldr	r0, [fp, #-16]
   19270:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   19274:	str	r0, [fp, #-8]
   19278:	ldr	r3, [fp, #-8]
   1927c:	cmp	r3, #0
   19280:	bne	1928c <flatcc_builder_offset_vector_push@@Base+0xa8>
   19284:	mov	r3, #0
   19288:	b	1929c <flatcc_builder_offset_vector_push@@Base+0xb8>
   1928c:	ldr	r3, [fp, #-8]
   19290:	ldr	r2, [fp, #-20]	; 0xffffffec
   19294:	str	r2, [r3]
   19298:	ldr	r3, [fp, #-8]
   1929c:	mov	r0, r3
   192a0:	sub	sp, fp, #4
   192a4:	ldr	fp, [sp]
   192a8:	add	sp, sp, #4
   192ac:	pop	{pc}		; (ldr pc, [sp], #4)
   192b0:	muleq	r0, ip, r2
   192b4:	strdeq	sp, [r0], -ip
   192b8:	andeq	sp, r0, r4, lsr #29

000192bc <flatcc_builder_append_offset_vector@@Base>:
   192bc:	str	fp, [sp, #-8]!
   192c0:	str	lr, [sp, #4]
   192c4:	add	fp, sp, #4
   192c8:	sub	sp, sp, #16
   192cc:	str	r0, [fp, #-8]
   192d0:	str	r1, [fp, #-12]
   192d4:	str	r2, [fp, #-16]
   192d8:	ldr	r3, [fp, #-8]
   192dc:	ldr	r3, [r3, #32]
   192e0:	ldrh	r3, [r3, #14]
   192e4:	cmp	r3, #5
   192e8:	beq	1930c <flatcc_builder_append_offset_vector@@Base+0x50>
   192ec:	ldr	r3, [pc, #108]	; 19360 <flatcc_builder_append_offset_vector@@Base+0xa4>
   192f0:	add	r3, pc, r3
   192f4:	mov	r2, #948	; 0x3b4
   192f8:	ldr	r1, [pc, #100]	; 19364 <flatcc_builder_append_offset_vector@@Base+0xa8>
   192fc:	add	r1, pc, r1
   19300:	ldr	r0, [pc, #96]	; 19368 <flatcc_builder_append_offset_vector@@Base+0xac>
   19304:	add	r0, pc, r0
   19308:	bl	124b0 <__assert_fail@plt>
   1930c:	mvn	r2, #-1073741824	; 0xc0000000
   19310:	ldr	r1, [fp, #-16]
   19314:	ldr	r0, [fp, #-8]
   19318:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   1931c:	mov	r3, r0
   19320:	cmp	r3, #0
   19324:	beq	19330 <flatcc_builder_append_offset_vector@@Base+0x74>
   19328:	mov	r3, #0
   1932c:	b	1934c <flatcc_builder_append_offset_vector@@Base+0x90>
   19330:	ldr	r3, [fp, #-16]
   19334:	lsl	r3, r3, #2
   19338:	mov	r2, r3
   1933c:	ldr	r1, [fp, #-12]
   19340:	ldr	r0, [fp, #-8]
   19344:	bl	16c18 <flatcc_builder_default_alloc@@Base+0x420>
   19348:	mov	r3, r0
   1934c:	mov	r0, r3
   19350:	sub	sp, fp, #4
   19354:	ldr	fp, [sp]
   19358:	add	sp, sp, #4
   1935c:	pop	{pc}		; (ldr pc, [sp], #4)
   19360:	andeq	lr, r0, r4, ror #3
   19364:	andeq	sp, r0, r0, lsr #24
   19368:	andeq	sp, r0, r8, asr #27

0001936c <flatcc_builder_extend_string@@Base>:
   1936c:	str	fp, [sp, #-8]!
   19370:	str	lr, [sp, #4]
   19374:	add	fp, sp, #4
   19378:	sub	sp, sp, #8
   1937c:	str	r0, [fp, #-8]
   19380:	str	r1, [fp, #-12]
   19384:	ldr	r3, [fp, #-8]
   19388:	ldr	r3, [r3, #32]
   1938c:	ldrh	r3, [r3, #14]
   19390:	cmp	r3, #6
   19394:	beq	193b8 <flatcc_builder_extend_string@@Base+0x4c>
   19398:	ldr	r3, [pc, #96]	; 19400 <flatcc_builder_extend_string@@Base+0x94>
   1939c:	add	r3, pc, r3
   193a0:	movw	r2, #957	; 0x3bd
   193a4:	ldr	r1, [pc, #88]	; 19404 <flatcc_builder_extend_string@@Base+0x98>
   193a8:	add	r1, pc, r1
   193ac:	ldr	r0, [pc, #84]	; 19408 <flatcc_builder_extend_string@@Base+0x9c>
   193b0:	add	r0, pc, r0
   193b4:	bl	124b0 <__assert_fail@plt>
   193b8:	mvn	r2, #0
   193bc:	ldr	r1, [fp, #-12]
   193c0:	ldr	r0, [fp, #-8]
   193c4:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   193c8:	mov	r3, r0
   193cc:	cmp	r3, #0
   193d0:	beq	193dc <flatcc_builder_extend_string@@Base+0x70>
   193d4:	mov	r3, #0
   193d8:	b	193ec <flatcc_builder_extend_string@@Base+0x80>
   193dc:	ldr	r1, [fp, #-12]
   193e0:	ldr	r0, [fp, #-8]
   193e4:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   193e8:	mov	r3, r0
   193ec:	mov	r0, r3
   193f0:	sub	sp, fp, #4
   193f4:	ldr	fp, [sp]
   193f8:	add	sp, sp, #4
   193fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19400:	andeq	lr, r0, ip, asr r1
   19404:	andeq	sp, r0, r4, ror fp
   19408:	andeq	sp, r0, r0, asr sp

0001940c <flatcc_builder_append_string@@Base>:
   1940c:	str	fp, [sp, #-8]!
   19410:	str	lr, [sp, #4]
   19414:	add	fp, sp, #4
   19418:	sub	sp, sp, #16
   1941c:	str	r0, [fp, #-8]
   19420:	str	r1, [fp, #-12]
   19424:	str	r2, [fp, #-16]
   19428:	ldr	r3, [fp, #-8]
   1942c:	ldr	r3, [r3, #32]
   19430:	ldrh	r3, [r3, #14]
   19434:	cmp	r3, #6
   19438:	beq	1945c <flatcc_builder_append_string@@Base+0x50>
   1943c:	ldr	r3, [pc, #100]	; 194a8 <flatcc_builder_append_string@@Base+0x9c>
   19440:	add	r3, pc, r3
   19444:	movw	r2, #966	; 0x3c6
   19448:	ldr	r1, [pc, #92]	; 194ac <flatcc_builder_append_string@@Base+0xa0>
   1944c:	add	r1, pc, r1
   19450:	ldr	r0, [pc, #88]	; 194b0 <flatcc_builder_append_string@@Base+0xa4>
   19454:	add	r0, pc, r0
   19458:	bl	124b0 <__assert_fail@plt>
   1945c:	mvn	r2, #0
   19460:	ldr	r1, [fp, #-16]
   19464:	ldr	r0, [fp, #-8]
   19468:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   1946c:	mov	r3, r0
   19470:	cmp	r3, #0
   19474:	beq	19480 <flatcc_builder_append_string@@Base+0x74>
   19478:	mov	r3, #0
   1947c:	b	19494 <flatcc_builder_append_string@@Base+0x88>
   19480:	ldr	r2, [fp, #-16]
   19484:	ldr	r1, [fp, #-12]
   19488:	ldr	r0, [fp, #-8]
   1948c:	bl	16c18 <flatcc_builder_default_alloc@@Base+0x420>
   19490:	mov	r3, r0
   19494:	mov	r0, r3
   19498:	sub	sp, fp, #4
   1949c:	ldr	fp, [sp]
   194a0:	add	sp, sp, #4
   194a4:	pop	{pc}		; (ldr pc, [sp], #4)
   194a8:	ldrdeq	lr, [r0], -r8
   194ac:	ldrdeq	sp, [r0], -r0
   194b0:	andeq	sp, r0, ip, lsr #25

000194b4 <flatcc_builder_append_string_str@@Base>:
   194b4:	str	fp, [sp, #-8]!
   194b8:	str	lr, [sp, #4]
   194bc:	add	fp, sp, #4
   194c0:	sub	sp, sp, #8
   194c4:	str	r0, [fp, #-8]
   194c8:	str	r1, [fp, #-12]
   194cc:	ldr	r0, [fp, #-12]
   194d0:	bl	1245c <strlen@plt>
   194d4:	mov	r3, r0
   194d8:	mov	r2, r3
   194dc:	ldr	r1, [fp, #-12]
   194e0:	ldr	r0, [fp, #-8]
   194e4:	bl	1940c <flatcc_builder_append_string@@Base>
   194e8:	mov	r3, r0
   194ec:	mov	r0, r3
   194f0:	sub	sp, fp, #4
   194f4:	ldr	fp, [sp]
   194f8:	add	sp, sp, #4
   194fc:	pop	{pc}		; (ldr pc, [sp], #4)

00019500 <flatcc_builder_append_string_strn@@Base>:
   19500:	str	fp, [sp, #-8]!
   19504:	str	lr, [sp, #4]
   19508:	add	fp, sp, #4
   1950c:	sub	sp, sp, #16
   19510:	str	r0, [fp, #-8]
   19514:	str	r1, [fp, #-12]
   19518:	str	r2, [fp, #-16]
   1951c:	ldr	r1, [fp, #-16]
   19520:	ldr	r0, [fp, #-12]
   19524:	bl	16798 <main@@Base+0x204>
   19528:	mov	r3, r0
   1952c:	mov	r2, r3
   19530:	ldr	r1, [fp, #-12]
   19534:	ldr	r0, [fp, #-8]
   19538:	bl	1940c <flatcc_builder_append_string@@Base>
   1953c:	mov	r3, r0
   19540:	mov	r0, r3
   19544:	sub	sp, fp, #4
   19548:	ldr	fp, [sp]
   1954c:	add	sp, sp, #4
   19550:	pop	{pc}		; (ldr pc, [sp], #4)

00019554 <flatcc_builder_truncate_vector@@Base>:
   19554:	str	fp, [sp, #-8]!
   19558:	str	lr, [sp, #4]
   1955c:	add	fp, sp, #4
   19560:	sub	sp, sp, #8
   19564:	str	r0, [fp, #-8]
   19568:	str	r1, [fp, #-12]
   1956c:	ldr	r3, [fp, #-8]
   19570:	ldr	r3, [r3, #32]
   19574:	ldrh	r3, [r3, #14]
   19578:	cmp	r3, #4
   1957c:	beq	195a0 <flatcc_builder_truncate_vector@@Base+0x4c>
   19580:	ldr	r3, [pc, #200]	; 19650 <flatcc_builder_truncate_vector@@Base+0xfc>
   19584:	add	r3, pc, r3
   19588:	movw	r2, #985	; 0x3d9
   1958c:	ldr	r1, [pc, #192]	; 19654 <flatcc_builder_truncate_vector@@Base+0x100>
   19590:	add	r1, pc, r1
   19594:	ldr	r0, [pc, #188]	; 19658 <flatcc_builder_truncate_vector@@Base+0x104>
   19598:	add	r0, pc, r0
   1959c:	bl	124b0 <__assert_fail@plt>
   195a0:	ldr	r3, [fp, #-8]
   195a4:	ldr	r3, [r3, #32]
   195a8:	ldr	r3, [r3, #20]
   195ac:	ldr	r2, [fp, #-12]
   195b0:	cmp	r2, r3
   195b4:	bls	195f8 <flatcc_builder_truncate_vector@@Base+0xa4>
   195b8:	ldr	r3, [fp, #-8]
   195bc:	ldr	r3, [r3, #32]
   195c0:	ldr	r3, [r3, #20]
   195c4:	ldr	r2, [fp, #-12]
   195c8:	cmp	r2, r3
   195cc:	bls	195f0 <flatcc_builder_truncate_vector@@Base+0x9c>
   195d0:	ldr	r3, [pc, #132]	; 1965c <flatcc_builder_truncate_vector@@Base+0x108>
   195d4:	add	r3, pc, r3
   195d8:	movw	r2, #986	; 0x3da
   195dc:	ldr	r1, [pc, #124]	; 19660 <flatcc_builder_truncate_vector@@Base+0x10c>
   195e0:	add	r1, pc, r1
   195e4:	ldr	r0, [pc, #120]	; 19664 <flatcc_builder_truncate_vector@@Base+0x110>
   195e8:	add	r0, pc, r0
   195ec:	bl	124b0 <__assert_fail@plt>
   195f0:	mvn	r3, #0
   195f4:	b	1963c <flatcc_builder_truncate_vector@@Base+0xe8>
   195f8:	ldr	r3, [fp, #-8]
   195fc:	ldr	r3, [r3, #32]
   19600:	ldr	r1, [r3, #20]
   19604:	ldr	r3, [fp, #-8]
   19608:	ldr	r3, [r3, #32]
   1960c:	ldr	r2, [fp, #-12]
   19610:	sub	r2, r1, r2
   19614:	str	r2, [r3, #20]
   19618:	ldr	r3, [fp, #-8]
   1961c:	ldr	r3, [r3, #32]
   19620:	ldr	r3, [r3, #16]
   19624:	ldr	r2, [fp, #-12]
   19628:	mul	r3, r2, r3
   1962c:	mov	r1, r3
   19630:	ldr	r0, [fp, #-8]
   19634:	bl	16bb0 <flatcc_builder_default_alloc@@Base+0x3b8>
   19638:	mov	r3, #0
   1963c:	mov	r0, r3
   19640:	sub	sp, fp, #4
   19644:	ldr	fp, [sp]
   19648:	add	sp, sp, #4
   1964c:	pop	{pc}		; (ldr pc, [sp], #4)
   19650:			; <UNDEFINED> instruction: 0x0000dfb4
   19654:	andeq	sp, r0, ip, lsl #19
   19658:	andeq	sp, r0, r8, asr #21
   1965c:	andeq	sp, r0, r4, ror #30
   19660:	andeq	sp, r0, ip, lsr r9
   19664:	andeq	sp, r0, r4, asr #22

00019668 <flatcc_builder_truncate_offset_vector@@Base>:
   19668:	str	fp, [sp, #-8]!
   1966c:	str	lr, [sp, #4]
   19670:	add	fp, sp, #4
   19674:	sub	sp, sp, #8
   19678:	str	r0, [fp, #-8]
   1967c:	str	r1, [fp, #-12]
   19680:	ldr	r3, [fp, #-8]
   19684:	ldr	r3, [r3, #32]
   19688:	ldrh	r3, [r3, #14]
   1968c:	cmp	r3, #5
   19690:	beq	196b4 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   19694:	ldr	r3, [pc, #200]	; 19764 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   19698:	add	r3, pc, r3
   1969c:	movw	r2, #994	; 0x3e2
   196a0:	ldr	r1, [pc, #192]	; 19768 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   196a4:	add	r1, pc, r1
   196a8:	ldr	r0, [pc, #188]	; 1976c <flatcc_builder_truncate_offset_vector@@Base+0x104>
   196ac:	add	r0, pc, r0
   196b0:	bl	124b0 <__assert_fail@plt>
   196b4:	ldr	r3, [fp, #-8]
   196b8:	ldr	r3, [r3, #32]
   196bc:	ldr	r3, [r3, #20]
   196c0:	ldr	r2, [fp, #-12]
   196c4:	cmp	r2, r3
   196c8:	bls	1970c <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   196cc:	ldr	r3, [fp, #-8]
   196d0:	ldr	r3, [r3, #32]
   196d4:	ldr	r3, [r3, #20]
   196d8:	ldr	r2, [fp, #-12]
   196dc:	cmp	r2, r3
   196e0:	bls	19704 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   196e4:	ldr	r3, [pc, #132]	; 19770 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   196e8:	add	r3, pc, r3
   196ec:	movw	r2, #995	; 0x3e3
   196f0:	ldr	r1, [pc, #124]	; 19774 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   196f4:	add	r1, pc, r1
   196f8:	ldr	r0, [pc, #120]	; 19778 <flatcc_builder_truncate_offset_vector@@Base+0x110>
   196fc:	add	r0, pc, r0
   19700:	bl	124b0 <__assert_fail@plt>
   19704:	mvn	r3, #0
   19708:	b	19750 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   1970c:	ldr	r3, [fp, #-8]
   19710:	ldr	r3, [r3, #32]
   19714:	ldr	r1, [r3, #20]
   19718:	ldr	r3, [fp, #-8]
   1971c:	ldr	r3, [r3, #32]
   19720:	ldr	r2, [fp, #-12]
   19724:	sub	r2, r1, r2
   19728:	str	r2, [r3, #20]
   1972c:	ldr	r3, [fp, #-8]
   19730:	ldr	r3, [r3, #32]
   19734:	ldr	r3, [r3, #16]
   19738:	ldr	r2, [fp, #-12]
   1973c:	mul	r3, r2, r3
   19740:	mov	r1, r3
   19744:	ldr	r0, [fp, #-8]
   19748:	bl	16bb0 <flatcc_builder_default_alloc@@Base+0x3b8>
   1974c:	mov	r3, #0
   19750:	mov	r0, r3
   19754:	sub	sp, fp, #4
   19758:	ldr	fp, [sp]
   1975c:	add	sp, sp, #4
   19760:	pop	{pc}		; (ldr pc, [sp], #4)
   19764:	andeq	sp, r0, r0, asr #29
   19768:	andeq	sp, r0, r8, ror r8
   1976c:	andeq	sp, r0, r0, lsr #20
   19770:	andeq	sp, r0, r0, ror lr
   19774:	andeq	sp, r0, r8, lsr #16
   19778:	andeq	sp, r0, r4, asr sl

0001977c <flatcc_builder_truncate_string@@Base>:
   1977c:	str	fp, [sp, #-8]!
   19780:	str	lr, [sp, #4]
   19784:	add	fp, sp, #4
   19788:	sub	sp, sp, #8
   1978c:	str	r0, [fp, #-8]
   19790:	str	r1, [fp, #-12]
   19794:	ldr	r3, [fp, #-8]
   19798:	ldr	r3, [r3, #32]
   1979c:	ldrh	r3, [r3, #14]
   197a0:	cmp	r3, #6
   197a4:	beq	197c8 <flatcc_builder_truncate_string@@Base+0x4c>
   197a8:	ldr	r3, [pc, #180]	; 19864 <flatcc_builder_truncate_string@@Base+0xe8>
   197ac:	add	r3, pc, r3
   197b0:	movw	r2, #1003	; 0x3eb
   197b4:	ldr	r1, [pc, #172]	; 19868 <flatcc_builder_truncate_string@@Base+0xec>
   197b8:	add	r1, pc, r1
   197bc:	ldr	r0, [pc, #168]	; 1986c <flatcc_builder_truncate_string@@Base+0xf0>
   197c0:	add	r0, pc, r0
   197c4:	bl	124b0 <__assert_fail@plt>
   197c8:	ldr	r3, [fp, #-8]
   197cc:	ldr	r3, [r3, #32]
   197d0:	ldr	r3, [r3, #20]
   197d4:	ldr	r2, [fp, #-12]
   197d8:	cmp	r2, r3
   197dc:	bls	19820 <flatcc_builder_truncate_string@@Base+0xa4>
   197e0:	ldr	r3, [fp, #-8]
   197e4:	ldr	r3, [r3, #32]
   197e8:	ldr	r3, [r3, #20]
   197ec:	ldr	r2, [fp, #-12]
   197f0:	cmp	r2, r3
   197f4:	bls	19818 <flatcc_builder_truncate_string@@Base+0x9c>
   197f8:	ldr	r3, [pc, #112]	; 19870 <flatcc_builder_truncate_string@@Base+0xf4>
   197fc:	add	r3, pc, r3
   19800:	mov	r2, #1004	; 0x3ec
   19804:	ldr	r1, [pc, #104]	; 19874 <flatcc_builder_truncate_string@@Base+0xf8>
   19808:	add	r1, pc, r1
   1980c:	ldr	r0, [pc, #100]	; 19878 <flatcc_builder_truncate_string@@Base+0xfc>
   19810:	add	r0, pc, r0
   19814:	bl	124b0 <__assert_fail@plt>
   19818:	mvn	r3, #0
   1981c:	b	19850 <flatcc_builder_truncate_string@@Base+0xd4>
   19820:	ldr	r3, [fp, #-8]
   19824:	ldr	r3, [r3, #32]
   19828:	ldr	r1, [r3, #20]
   1982c:	ldr	r3, [fp, #-8]
   19830:	ldr	r3, [r3, #32]
   19834:	ldr	r2, [fp, #-12]
   19838:	sub	r2, r1, r2
   1983c:	str	r2, [r3, #20]
   19840:	ldr	r1, [fp, #-12]
   19844:	ldr	r0, [fp, #-8]
   19848:	bl	16bb0 <flatcc_builder_default_alloc@@Base+0x3b8>
   1984c:	mov	r3, #0
   19850:	mov	r0, r3
   19854:	sub	sp, fp, #4
   19858:	ldr	fp, [sp]
   1985c:	add	sp, sp, #4
   19860:	pop	{pc}		; (ldr pc, [sp], #4)
   19864:	ldrdeq	sp, [r0], -r4
   19868:	andeq	sp, r0, r4, ror #14
   1986c:	andeq	sp, r0, r0, asr #18
   19870:	andeq	sp, r0, r4, lsl #27
   19874:	andeq	sp, r0, r4, lsl r7
   19878:	andeq	sp, r0, ip, ror r9

0001987c <flatcc_builder_start_vector@@Base>:
   1987c:	str	fp, [sp, #-8]!
   19880:	str	lr, [sp, #4]
   19884:	add	fp, sp, #4
   19888:	sub	sp, sp, #16
   1988c:	str	r0, [fp, #-8]
   19890:	str	r1, [fp, #-12]
   19894:	str	r3, [fp, #-20]	; 0xffffffec
   19898:	mov	r3, r2
   1989c:	strh	r3, [fp, #-14]
   198a0:	sub	r3, fp, #14
   198a4:	mov	r1, #4
   198a8:	mov	r0, r3
   198ac:	bl	177f8 <flatcc_builder_clear@@Base+0x10c>
   198b0:	ldrh	r3, [fp, #-14]
   198b4:	mov	r1, r3
   198b8:	ldr	r0, [fp, #-8]
   198bc:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   198c0:	mov	r3, r0
   198c4:	cmp	r3, #0
   198c8:	beq	198d4 <flatcc_builder_start_vector@@Base+0x58>
   198cc:	mvn	r3, #0
   198d0:	b	19924 <flatcc_builder_start_vector@@Base+0xa8>
   198d4:	ldr	r3, [fp, #-8]
   198d8:	ldr	r3, [r3, #32]
   198dc:	ldr	r2, [fp, #-12]
   198e0:	str	r2, [r3, #16]
   198e4:	ldr	r3, [fp, #-8]
   198e8:	ldr	r3, [r3, #32]
   198ec:	mov	r2, #0
   198f0:	str	r2, [r3, #20]
   198f4:	ldr	r3, [fp, #-8]
   198f8:	ldr	r3, [r3, #32]
   198fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19900:	str	r2, [r3, #24]
   19904:	ldr	r3, [fp, #-8]
   19908:	ldr	r3, [r3, #32]
   1990c:	mov	r2, #4
   19910:	strh	r2, [r3, #14]
   19914:	mvn	r1, #3
   19918:	ldr	r0, [fp, #-8]
   1991c:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   19920:	mov	r3, #0
   19924:	mov	r0, r3
   19928:	sub	sp, fp, #4
   1992c:	ldr	fp, [sp]
   19930:	add	sp, sp, #4
   19934:	pop	{pc}		; (ldr pc, [sp], #4)

00019938 <flatcc_builder_start_offset_vector@@Base>:
   19938:	str	fp, [sp, #-8]!
   1993c:	str	lr, [sp, #4]
   19940:	add	fp, sp, #4
   19944:	sub	sp, sp, #8
   19948:	str	r0, [fp, #-8]
   1994c:	mov	r1, #4
   19950:	ldr	r0, [fp, #-8]
   19954:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19958:	mov	r3, r0
   1995c:	cmp	r3, #0
   19960:	beq	1996c <flatcc_builder_start_offset_vector@@Base+0x34>
   19964:	mvn	r3, #0
   19968:	b	199ac <flatcc_builder_start_offset_vector@@Base+0x74>
   1996c:	ldr	r3, [fp, #-8]
   19970:	ldr	r3, [r3, #32]
   19974:	mov	r2, #4
   19978:	str	r2, [r3, #16]
   1997c:	ldr	r3, [fp, #-8]
   19980:	ldr	r3, [r3, #32]
   19984:	mov	r2, #0
   19988:	str	r2, [r3, #20]
   1998c:	ldr	r3, [fp, #-8]
   19990:	ldr	r3, [r3, #32]
   19994:	mov	r2, #5
   19998:	strh	r2, [r3, #14]
   1999c:	mvn	r1, #3
   199a0:	ldr	r0, [fp, #-8]
   199a4:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   199a8:	mov	r3, #0
   199ac:	mov	r0, r3
   199b0:	sub	sp, fp, #4
   199b4:	ldr	fp, [sp]
   199b8:	add	sp, sp, #4
   199bc:	pop	{pc}		; (ldr pc, [sp], #4)

000199c0 <flatcc_builder_create_offset_vector@@Base>:
   199c0:	str	fp, [sp, #-8]!
   199c4:	str	lr, [sp, #4]
   199c8:	add	fp, sp, #4
   199cc:	sub	sp, sp, #24
   199d0:	str	r0, [fp, #-16]
   199d4:	str	r1, [fp, #-20]	; 0xffffffec
   199d8:	str	r2, [fp, #-24]	; 0xffffffe8
   199dc:	ldr	r0, [fp, #-16]
   199e0:	bl	19938 <flatcc_builder_start_offset_vector@@Base>
   199e4:	mov	r3, r0
   199e8:	cmp	r3, #0
   199ec:	beq	199f8 <flatcc_builder_create_offset_vector@@Base+0x38>
   199f0:	mov	r3, #0
   199f4:	b	19a40 <flatcc_builder_create_offset_vector@@Base+0x80>
   199f8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   199fc:	ldr	r0, [fp, #-16]
   19a00:	bl	1917c <flatcc_builder_extend_offset_vector@@Base>
   19a04:	str	r0, [fp, #-8]
   19a08:	ldr	r3, [fp, #-8]
   19a0c:	cmp	r3, #0
   19a10:	bne	19a1c <flatcc_builder_create_offset_vector@@Base+0x5c>
   19a14:	mov	r3, #0
   19a18:	b	19a40 <flatcc_builder_create_offset_vector@@Base+0x80>
   19a1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a20:	lsl	r3, r3, #2
   19a24:	mov	r2, r3
   19a28:	ldr	r1, [fp, #-20]	; 0xffffffec
   19a2c:	ldr	r0, [fp, #-8]
   19a30:	bl	12408 <memcpy@plt>
   19a34:	ldr	r0, [fp, #-16]
   19a38:	bl	1b040 <flatcc_builder_end_offset_vector@@Base>
   19a3c:	mov	r3, r0
   19a40:	mov	r0, r3
   19a44:	sub	sp, fp, #4
   19a48:	ldr	fp, [sp]
   19a4c:	add	sp, sp, #4
   19a50:	pop	{pc}		; (ldr pc, [sp], #4)

00019a54 <flatcc_builder_start_string@@Base>:
   19a54:	str	fp, [sp, #-8]!
   19a58:	str	lr, [sp, #4]
   19a5c:	add	fp, sp, #4
   19a60:	sub	sp, sp, #8
   19a64:	str	r0, [fp, #-8]
   19a68:	mov	r1, #1
   19a6c:	ldr	r0, [fp, #-8]
   19a70:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19a74:	mov	r3, r0
   19a78:	cmp	r3, #0
   19a7c:	beq	19a88 <flatcc_builder_start_string@@Base+0x34>
   19a80:	mvn	r3, #0
   19a84:	b	19ac8 <flatcc_builder_start_string@@Base+0x74>
   19a88:	ldr	r3, [fp, #-8]
   19a8c:	ldr	r3, [r3, #32]
   19a90:	mov	r2, #1
   19a94:	str	r2, [r3, #16]
   19a98:	ldr	r3, [fp, #-8]
   19a9c:	ldr	r3, [r3, #32]
   19aa0:	mov	r2, #0
   19aa4:	str	r2, [r3, #20]
   19aa8:	ldr	r3, [fp, #-8]
   19aac:	ldr	r3, [r3, #32]
   19ab0:	mov	r2, #6
   19ab4:	strh	r2, [r3, #14]
   19ab8:	mvn	r1, #3
   19abc:	ldr	r0, [fp, #-8]
   19ac0:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   19ac4:	mov	r3, #0
   19ac8:	mov	r0, r3
   19acc:	sub	sp, fp, #4
   19ad0:	ldr	fp, [sp]
   19ad4:	add	sp, sp, #4
   19ad8:	pop	{pc}		; (ldr pc, [sp], #4)

00019adc <flatcc_builder_reserve_table@@Base>:
   19adc:	str	fp, [sp, #-8]!
   19ae0:	str	lr, [sp, #4]
   19ae4:	add	fp, sp, #4
   19ae8:	sub	sp, sp, #8
   19aec:	str	r0, [fp, #-8]
   19af0:	str	r1, [fp, #-12]
   19af4:	ldr	r3, [fp, #-12]
   19af8:	cmp	r3, #0
   19afc:	bge	19b20 <flatcc_builder_reserve_table@@Base+0x44>
   19b00:	ldr	r3, [pc, #60]	; 19b44 <flatcc_builder_reserve_table@@Base+0x68>
   19b04:	add	r3, pc, r3
   19b08:	movw	r2, #1065	; 0x429
   19b0c:	ldr	r1, [pc, #52]	; 19b48 <flatcc_builder_reserve_table@@Base+0x6c>
   19b10:	add	r1, pc, r1
   19b14:	ldr	r0, [pc, #48]	; 19b4c <flatcc_builder_reserve_table@@Base+0x70>
   19b18:	add	r0, pc, r0
   19b1c:	bl	124b0 <__assert_fail@plt>
   19b20:	ldr	r1, [fp, #-12]
   19b24:	ldr	r0, [fp, #-8]
   19b28:	bl	16fa8 <flatcc_builder_default_alloc@@Base+0x7b0>
   19b2c:	mov	r3, r0
   19b30:	mov	r0, r3
   19b34:	sub	sp, fp, #4
   19b38:	ldr	fp, [sp]
   19b3c:	add	sp, sp, #4
   19b40:	pop	{pc}		; (ldr pc, [sp], #4)
   19b44:	muleq	r0, ip, sl
   19b48:	andeq	sp, r0, ip, lsl #8
   19b4c:	muleq	r0, r8, r6

00019b50 <flatcc_builder_start_table@@Base>:
   19b50:	str	fp, [sp, #-8]!
   19b54:	str	lr, [sp, #4]
   19b58:	add	fp, sp, #4
   19b5c:	sub	sp, sp, #8
   19b60:	str	r0, [fp, #-8]
   19b64:	str	r1, [fp, #-12]
   19b68:	mov	r1, #4
   19b6c:	ldr	r0, [fp, #-8]
   19b70:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19b74:	mov	r3, r0
   19b78:	cmp	r3, #0
   19b7c:	beq	19b88 <flatcc_builder_start_table@@Base+0x38>
   19b80:	mvn	r3, #0
   19b84:	b	19c68 <flatcc_builder_start_table@@Base+0x118>
   19b88:	ldr	r3, [fp, #-8]
   19b8c:	ldr	r3, [r3, #4]
   19b90:	mov	r1, r3
   19b94:	ldr	r3, [fp, #-8]
   19b98:	ldr	r3, [r3, #52]	; 0x34
   19b9c:	mov	r2, r3
   19ba0:	ldr	r3, [fp, #-8]
   19ba4:	ldr	r3, [r3, #32]
   19ba8:	sub	r2, r1, r2
   19bac:	str	r2, [r3, #16]
   19bb0:	ldr	r3, [fp, #-8]
   19bb4:	ldr	r3, [r3]
   19bb8:	mov	r1, r3
   19bbc:	ldr	r3, [fp, #-8]
   19bc0:	ldr	r3, [r3, #76]	; 0x4c
   19bc4:	mov	r2, r3
   19bc8:	ldr	r3, [fp, #-8]
   19bcc:	ldr	r3, [r3, #32]
   19bd0:	sub	r2, r1, r2
   19bd4:	str	r2, [r3, #20]
   19bd8:	ldr	r3, [fp, #-8]
   19bdc:	ldr	r3, [r3, #32]
   19be0:	ldr	r2, [fp, #-8]
   19be4:	ldr	r2, [r2, #12]
   19be8:	str	r2, [r3, #24]
   19bec:	ldr	r3, [fp, #-8]
   19bf0:	ldr	r3, [r3, #32]
   19bf4:	ldr	r2, [fp, #-8]
   19bf8:	ldrh	r2, [r2, #8]
   19bfc:	strh	r2, [r3, #28]
   19c00:	ldr	r3, [fp, #-8]
   19c04:	mov	r2, #0
   19c08:	str	r2, [r3, #12]
   19c0c:	ldr	r2, [fp, #-8]
   19c10:	movw	r3, #15186	; 0x3b52
   19c14:	movt	r3, #12137	; 0x2f69
   19c18:	str	r3, [r2, #12]
   19c1c:	ldr	r3, [fp, #-8]
   19c20:	mov	r2, #0
   19c24:	strh	r2, [r3, #8]
   19c28:	ldr	r3, [fp, #-8]
   19c2c:	ldr	r3, [r3, #32]
   19c30:	mov	r2, #3
   19c34:	strh	r2, [r3, #14]
   19c38:	ldr	r1, [fp, #-12]
   19c3c:	ldr	r0, [fp, #-8]
   19c40:	bl	16fa8 <flatcc_builder_default_alloc@@Base+0x7b0>
   19c44:	mov	r3, r0
   19c48:	cmp	r3, #0
   19c4c:	beq	19c58 <flatcc_builder_start_table@@Base+0x108>
   19c50:	mvn	r3, #0
   19c54:	b	19c68 <flatcc_builder_start_table@@Base+0x118>
   19c58:	movw	r1, #65532	; 0xfffc
   19c5c:	ldr	r0, [fp, #-8]
   19c60:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   19c64:	mov	r3, #0
   19c68:	mov	r0, r3
   19c6c:	sub	sp, fp, #4
   19c70:	ldr	fp, [sp]
   19c74:	add	sp, sp, #4
   19c78:	pop	{pc}		; (ldr pc, [sp], #4)

00019c7c <flatcc_builder_create_vtable@@Base>:
   19c7c:	str	fp, [sp, #-8]!
   19c80:	str	lr, [sp, #4]
   19c84:	add	fp, sp, #4
   19c88:	sub	sp, sp, #96	; 0x60
   19c8c:	str	r0, [fp, #-88]	; 0xffffffa8
   19c90:	str	r1, [fp, #-92]	; 0xffffffa4
   19c94:	mov	r3, r2
   19c98:	strh	r3, [fp, #-94]	; 0xffffffa2
   19c9c:	mov	r3, #0
   19ca0:	str	r3, [fp, #-80]	; 0xffffffb0
   19ca4:	mov	r3, #0
   19ca8:	str	r3, [fp, #-76]	; 0xffffffb4
   19cac:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   19cb0:	cmp	r3, #0
   19cb4:	beq	19d0c <flatcc_builder_create_vtable@@Base+0x90>
   19cb8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   19cbc:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   19cc0:	add	r3, r2, r3
   19cc4:	str	r3, [fp, #-80]	; 0xffffffb0
   19cc8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19ccc:	add	r3, r3, #1
   19cd0:	lsl	r3, r3, #3
   19cd4:	sub	r2, fp, #4
   19cd8:	add	r3, r2, r3
   19cdc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19ce0:	str	r2, [r3, #-76]	; 0xffffffb4
   19ce4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19ce8:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   19cec:	add	r3, r3, #1
   19cf0:	lsl	r3, r3, #3
   19cf4:	sub	r1, fp, #4
   19cf8:	add	r3, r1, r3
   19cfc:	str	r2, [r3, #-72]	; 0xffffffb8
   19d00:	ldr	r3, [fp, #-76]	; 0xffffffb4
   19d04:	add	r3, r3, #1
   19d08:	str	r3, [fp, #-76]	; 0xffffffb4
   19d0c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19d10:	ldr	r3, [r3, #152]	; 0x98
   19d14:	cmp	r3, #0
   19d18:	bne	19d54 <flatcc_builder_create_vtable@@Base+0xd8>
   19d1c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19d20:	ldr	r3, [r3, #180]	; 0xb4
   19d24:	cmp	r3, #0
   19d28:	bne	19d54 <flatcc_builder_create_vtable@@Base+0xd8>
   19d2c:	sub	r3, fp, #80	; 0x50
   19d30:	mov	r1, r3
   19d34:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19d38:	bl	17fc0 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   19d3c:	str	r0, [fp, #-8]
   19d40:	ldr	r3, [fp, #-8]
   19d44:	cmp	r3, #0
   19d48:	bne	19d88 <flatcc_builder_create_vtable@@Base+0x10c>
   19d4c:	mov	r3, #0
   19d50:	b	19d8c <flatcc_builder_create_vtable@@Base+0x110>
   19d54:	sub	r3, fp, #80	; 0x50
   19d58:	mov	r1, r3
   19d5c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19d60:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   19d64:	str	r0, [fp, #-8]
   19d68:	ldr	r3, [fp, #-8]
   19d6c:	cmp	r3, #0
   19d70:	bne	19d7c <flatcc_builder_create_vtable@@Base+0x100>
   19d74:	mov	r3, #0
   19d78:	b	19d8c <flatcc_builder_create_vtable@@Base+0x110>
   19d7c:	ldr	r3, [fp, #-8]
   19d80:	add	r3, r3, #1
   19d84:	str	r3, [fp, #-8]
   19d88:	ldr	r3, [fp, #-8]
   19d8c:	mov	r0, r3
   19d90:	sub	sp, fp, #4
   19d94:	ldr	fp, [sp]
   19d98:	add	sp, sp, #4
   19d9c:	pop	{pc}		; (ldr pc, [sp], #4)

00019da0 <flatcc_builder_create_cached_vtable@@Base>:
   19da0:	str	fp, [sp, #-8]!
   19da4:	str	lr, [sp, #4]
   19da8:	add	fp, sp, #4
   19dac:	sub	sp, sp, #48	; 0x30
   19db0:	str	r0, [fp, #-32]	; 0xffffffe0
   19db4:	str	r1, [fp, #-36]	; 0xffffffdc
   19db8:	str	r3, [fp, #-44]	; 0xffffffd4
   19dbc:	mov	r3, r2
   19dc0:	strh	r3, [fp, #-38]	; 0xffffffda
   19dc4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   19dc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19dcc:	bl	17230 <flatcc_builder_default_alloc@@Base+0xa38>
   19dd0:	str	r0, [fp, #-20]	; 0xffffffec
   19dd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dd8:	cmp	r3, #0
   19ddc:	bne	19de8 <flatcc_builder_create_cached_vtable@@Base+0x48>
   19de0:	mov	r3, #0
   19de4:	b	1a0ac <flatcc_builder_create_cached_vtable@@Base+0x30c>
   19de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dec:	str	r3, [fp, #-12]
   19df0:	ldr	r3, [fp, #-12]
   19df4:	ldr	r3, [r3]
   19df8:	str	r3, [fp, #-16]
   19dfc:	mov	r3, #0
   19e00:	str	r3, [fp, #-8]
   19e04:	b	19f08 <flatcc_builder_create_cached_vtable@@Base+0x168>
   19e08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e0c:	ldr	r2, [r3, #100]	; 0x64
   19e10:	ldr	r3, [fp, #-16]
   19e14:	add	r3, r2, r3
   19e18:	str	r3, [fp, #-24]	; 0xffffffe8
   19e1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e20:	ldr	r2, [r3, #68]	; 0x44
   19e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e28:	ldr	r3, [r3, #8]
   19e2c:	add	r3, r2, r3
   19e30:	str	r3, [fp, #-28]	; 0xffffffe4
   19e34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19e38:	ldrh	r3, [r3]
   19e3c:	ldrh	r2, [fp, #-38]	; 0xffffffda
   19e40:	cmp	r2, r3
   19e44:	bne	19e68 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   19e48:	ldrh	r3, [fp, #-38]	; 0xffffffda
   19e4c:	mov	r2, r3
   19e50:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19e54:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19e58:	bl	12414 <memcmp@plt>
   19e5c:	mov	r3, r0
   19e60:	cmp	r3, #0
   19e64:	beq	19e84 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   19e68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e6c:	add	r3, r3, #12
   19e70:	str	r3, [fp, #-12]
   19e74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e78:	ldr	r3, [r3, #12]
   19e7c:	str	r3, [fp, #-16]
   19e80:	b	19f08 <flatcc_builder_create_cached_vtable@@Base+0x168>
   19e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e88:	ldr	r2, [r3, #4]
   19e8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e90:	ldr	r3, [r3, #152]	; 0x98
   19e94:	cmp	r2, r3
   19e98:	beq	19ec0 <flatcc_builder_create_cached_vtable@@Base+0x120>
   19e9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ea0:	str	r3, [fp, #-8]
   19ea4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ea8:	add	r3, r3, #12
   19eac:	str	r3, [fp, #-12]
   19eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19eb4:	ldr	r3, [r3, #12]
   19eb8:	str	r3, [fp, #-16]
   19ebc:	b	19f08 <flatcc_builder_create_cached_vtable@@Base+0x168>
   19ec0:	ldr	r2, [fp, #-12]
   19ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ec8:	cmp	r2, r3
   19ecc:	beq	19efc <flatcc_builder_create_cached_vtable@@Base+0x15c>
   19ed0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19ed4:	ldr	r2, [r3, #12]
   19ed8:	ldr	r3, [fp, #-12]
   19edc:	str	r2, [r3]
   19ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ee4:	ldr	r2, [r3]
   19ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19eec:	str	r2, [r3, #12]
   19ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ef4:	ldr	r2, [fp, #-16]
   19ef8:	str	r2, [r3]
   19efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f00:	ldr	r3, [r3]
   19f04:	b	1a0ac <flatcc_builder_create_cached_vtable@@Base+0x30c>
   19f08:	ldr	r3, [fp, #-16]
   19f0c:	cmp	r3, #0
   19f10:	bne	19e08 <flatcc_builder_create_cached_vtable@@Base+0x68>
   19f14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f18:	ldr	r2, [r3, #124]	; 0x7c
   19f1c:	mov	r3, #0
   19f20:	str	r3, [sp]
   19f24:	mov	r3, #16
   19f28:	mov	r1, #6
   19f2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19f30:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   19f34:	str	r0, [fp, #-24]	; 0xffffffe8
   19f38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f3c:	cmp	r3, #0
   19f40:	bne	19f4c <flatcc_builder_create_cached_vtable@@Base+0x1ac>
   19f44:	mov	r3, #0
   19f48:	b	1a0ac <flatcc_builder_create_cached_vtable@@Base+0x30c>
   19f4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f50:	ldr	r3, [r3, #124]	; 0x7c
   19f54:	str	r3, [fp, #-16]
   19f58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f5c:	ldr	r3, [r3, #124]	; 0x7c
   19f60:	add	r2, r3, #16
   19f64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f68:	str	r2, [r3, #124]	; 0x7c
   19f6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19f70:	ldr	r2, [r3, #152]	; 0x98
   19f74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f78:	str	r2, [r3, #4]
   19f7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f80:	ldr	r2, [r3]
   19f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19f88:	str	r2, [r3, #12]
   19f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f90:	ldr	r2, [fp, #-16]
   19f94:	str	r2, [r3]
   19f98:	ldrh	r3, [fp, #-38]	; 0xffffffda
   19f9c:	mov	r2, r3
   19fa0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19fa4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19fa8:	bl	19c7c <flatcc_builder_create_vtable@@Base>
   19fac:	mov	r2, r0
   19fb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fb4:	str	r2, [r3]
   19fb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fbc:	ldr	r3, [r3]
   19fc0:	cmp	r3, #0
   19fc4:	bne	19fd0 <flatcc_builder_create_cached_vtable@@Base+0x230>
   19fc8:	mov	r3, #0
   19fcc:	b	1a0ac <flatcc_builder_create_cached_vtable@@Base+0x30c>
   19fd0:	ldr	r3, [fp, #-8]
   19fd4:	cmp	r3, #0
   19fd8:	beq	19ff0 <flatcc_builder_create_cached_vtable@@Base+0x250>
   19fdc:	ldr	r3, [fp, #-8]
   19fe0:	ldr	r2, [r3, #8]
   19fe4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19fe8:	str	r2, [r3, #8]
   19fec:	b	1a0a4 <flatcc_builder_create_cached_vtable@@Base+0x304>
   19ff0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19ff4:	ldr	r3, [r3, #172]	; 0xac
   19ff8:	cmp	r3, #0
   19ffc:	beq	1a02c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   1a000:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a004:	ldr	r2, [r3, #172]	; 0xac
   1a008:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a00c:	ldr	r1, [r3, #120]	; 0x78
   1a010:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1a014:	add	r3, r1, r3
   1a018:	cmp	r2, r3
   1a01c:	bcs	1a02c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   1a020:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a024:	bl	172b4 <flatcc_builder_flush_vtable_cache@@Base>
   1a028:	b	1a0a4 <flatcc_builder_create_cached_vtable@@Base+0x304>
   1a02c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a030:	ldr	r2, [r3, #120]	; 0x78
   1a034:	ldrh	r1, [fp, #-38]	; 0xffffffda
   1a038:	mov	r3, #0
   1a03c:	str	r3, [sp]
   1a040:	mov	r3, r1
   1a044:	mov	r1, #2
   1a048:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a04c:	bl	16ebc <flatcc_builder_default_alloc@@Base+0x6c4>
   1a050:	str	r0, [fp, #-28]	; 0xffffffe4
   1a054:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a058:	cmp	r3, #0
   1a05c:	bne	1a068 <flatcc_builder_create_cached_vtable@@Base+0x2c8>
   1a060:	mvn	r3, #0
   1a064:	b	1a0ac <flatcc_builder_create_cached_vtable@@Base+0x30c>
   1a068:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a06c:	ldr	r2, [r3, #120]	; 0x78
   1a070:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a074:	str	r2, [r3, #8]
   1a078:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a07c:	ldr	r2, [r3, #120]	; 0x78
   1a080:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1a084:	add	r2, r2, r3
   1a088:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a08c:	str	r2, [r3, #120]	; 0x78
   1a090:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1a094:	mov	r2, r3
   1a098:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a09c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a0a0:	bl	12408 <memcpy@plt>
   1a0a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a0a8:	ldr	r3, [r3]
   1a0ac:	mov	r0, r3
   1a0b0:	sub	sp, fp, #4
   1a0b4:	ldr	fp, [sp]
   1a0b8:	add	sp, sp, #4
   1a0bc:	pop	{pc}		; (ldr pc, [sp], #4)

0001a0c0 <flatcc_builder_create_table@@Base>:
   1a0c0:	str	r4, [sp, #-12]!
   1a0c4:	str	fp, [sp, #4]
   1a0c8:	str	lr, [sp, #8]
   1a0cc:	add	fp, sp, #8
   1a0d0:	sub	sp, sp, #124	; 0x7c
   1a0d4:	str	r0, [fp, #-120]	; 0xffffff88
   1a0d8:	str	r1, [fp, #-124]	; 0xffffff84
   1a0dc:	str	r2, [fp, #-128]	; 0xffffff80
   1a0e0:	strh	r3, [fp, #-130]	; 0xffffff7e
   1a0e4:	ldr	r4, [pc, #740]	; 1a3d0 <flatcc_builder_create_table@@Base+0x310>
   1a0e8:	add	r4, pc, r4
   1a0ec:	ldr	r3, [fp, #8]
   1a0f0:	cmp	r3, #0
   1a0f4:	bge	1a118 <flatcc_builder_create_table@@Base+0x58>
   1a0f8:	ldr	r3, [pc, #724]	; 1a3d4 <flatcc_builder_create_table@@Base+0x314>
   1a0fc:	add	r3, pc, r3
   1a100:	movw	r2, #1237	; 0x4d5
   1a104:	ldr	r1, [pc, #716]	; 1a3d8 <flatcc_builder_create_table@@Base+0x318>
   1a108:	add	r1, pc, r1
   1a10c:	ldr	r0, [pc, #712]	; 1a3dc <flatcc_builder_create_table@@Base+0x31c>
   1a110:	add	r0, pc, r0
   1a114:	bl	124b0 <__assert_fail@plt>
   1a118:	ldr	r3, [fp, #12]
   1a11c:	and	r3, r3, #1
   1a120:	cmp	r3, #0
   1a124:	bne	1a148 <flatcc_builder_create_table@@Base+0x88>
   1a128:	ldr	r3, [pc, #688]	; 1a3e0 <flatcc_builder_create_table@@Base+0x320>
   1a12c:	add	r3, pc, r3
   1a130:	movw	r2, #1243	; 0x4db
   1a134:	ldr	r1, [pc, #680]	; 1a3e4 <flatcc_builder_create_table@@Base+0x324>
   1a138:	add	r1, pc, r1
   1a13c:	ldr	r0, [pc, #676]	; 1a3e8 <flatcc_builder_create_table@@Base+0x328>
   1a140:	add	r0, pc, r0
   1a144:	bl	124b0 <__assert_fail@plt>
   1a148:	sub	r3, fp, #130	; 0x82
   1a14c:	mov	r1, #4
   1a150:	mov	r0, r3
   1a154:	bl	177f8 <flatcc_builder_clear@@Base+0x10c>
   1a158:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   1a15c:	mov	r1, r3
   1a160:	ldr	r0, [fp, #-120]	; 0xffffff88
   1a164:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   1a168:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   1a16c:	mov	r2, r3
   1a170:	ldr	r1, [fp, #-128]	; 0xffffff80
   1a174:	ldr	r0, [fp, #-120]	; 0xffffff88
   1a178:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1a17c:	str	r0, [fp, #-20]	; 0xffffffec
   1a180:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a184:	ldr	r3, [r3, #136]	; 0x88
   1a188:	mov	r1, r3
   1a18c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a190:	ldr	r3, [fp, #-128]	; 0xffffff80
   1a194:	add	r3, r2, r3
   1a198:	sub	r3, r1, r3
   1a19c:	sub	r3, r3, #4
   1a1a0:	str	r3, [fp, #-24]	; 0xffffffe8
   1a1a4:	ldr	r3, [fp, #12]
   1a1a8:	sub	r3, r3, #1
   1a1ac:	str	r3, [fp, #-28]	; 0xffffffe4
   1a1b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a1b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a1b8:	sub	r3, r2, r3
   1a1bc:	str	r3, [fp, #-32]	; 0xffffffe0
   1a1c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a1c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1c8:	sub	r3, r2, r3
   1a1cc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a1d0:	cmp	r2, r3
   1a1d4:	beq	1a1e0 <flatcc_builder_create_table@@Base+0x120>
   1a1d8:	mvn	r3, #0
   1a1dc:	b	1a3b8 <flatcc_builder_create_table@@Base+0x2f8>
   1a1e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a1e4:	bl	166a8 <main@@Base+0x114>
   1a1e8:	mov	r3, r0
   1a1ec:	str	r3, [fp, #-44]	; 0xffffffd4
   1a1f0:	mov	r3, #0
   1a1f4:	str	r3, [fp, #-16]
   1a1f8:	b	1a270 <flatcc_builder_create_table@@Base+0x1b0>
   1a1fc:	ldr	r3, [fp, #-16]
   1a200:	lsl	r3, r3, #1
   1a204:	ldr	r2, [fp, #4]
   1a208:	add	r3, r2, r3
   1a20c:	ldrh	r3, [r3]
   1a210:	mov	r2, r3
   1a214:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a218:	add	r3, r2, r3
   1a21c:	str	r3, [fp, #-36]	; 0xffffffdc
   1a220:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a224:	ldr	r2, [r3]
   1a228:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a22c:	sub	r3, r2, r3
   1a230:	ldr	r2, [fp, #-16]
   1a234:	lsl	r2, r2, #1
   1a238:	ldr	r1, [fp, #4]
   1a23c:	add	r2, r1, r2
   1a240:	ldrh	r2, [r2]
   1a244:	sub	r3, r3, r2
   1a248:	sub	r3, r3, #4
   1a24c:	str	r3, [fp, #-40]	; 0xffffffd8
   1a250:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1a254:	bl	166a8 <main@@Base+0x114>
   1a258:	mov	r2, r0
   1a25c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a260:	str	r2, [r3]
   1a264:	ldr	r3, [fp, #-16]
   1a268:	add	r3, r3, #1
   1a26c:	str	r3, [fp, #-16]
   1a270:	ldr	r2, [fp, #-16]
   1a274:	ldr	r3, [fp, #8]
   1a278:	cmp	r2, r3
   1a27c:	blt	1a1fc <flatcc_builder_create_table@@Base+0x13c>
   1a280:	mov	r3, #0
   1a284:	str	r3, [fp, #-116]	; 0xffffff8c
   1a288:	mov	r3, #0
   1a28c:	str	r3, [fp, #-112]	; 0xffffff90
   1a290:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1a294:	add	r3, r3, #4
   1a298:	str	r3, [fp, #-116]	; 0xffffff8c
   1a29c:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a2a0:	add	r3, r3, #1
   1a2a4:	lsl	r3, r3, #3
   1a2a8:	sub	r2, fp, #12
   1a2ac:	add	r3, r2, r3
   1a2b0:	sub	r2, fp, #44	; 0x2c
   1a2b4:	str	r2, [r3, #-104]	; 0xffffff98
   1a2b8:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a2bc:	add	r3, r3, #1
   1a2c0:	lsl	r3, r3, #3
   1a2c4:	sub	r2, fp, #12
   1a2c8:	add	r3, r2, r3
   1a2cc:	mov	r2, #4
   1a2d0:	str	r2, [r3, #-100]	; 0xffffff9c
   1a2d4:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a2d8:	add	r3, r3, #1
   1a2dc:	str	r3, [fp, #-112]	; 0xffffff90
   1a2e0:	ldr	r3, [fp, #-128]	; 0xffffff80
   1a2e4:	cmp	r3, #0
   1a2e8:	beq	1a340 <flatcc_builder_create_table@@Base+0x280>
   1a2ec:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a2f0:	ldr	r3, [fp, #-128]	; 0xffffff80
   1a2f4:	add	r3, r2, r3
   1a2f8:	str	r3, [fp, #-116]	; 0xffffff8c
   1a2fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a300:	add	r3, r3, #1
   1a304:	lsl	r3, r3, #3
   1a308:	sub	r2, fp, #12
   1a30c:	add	r3, r2, r3
   1a310:	ldr	r2, [fp, #-124]	; 0xffffff84
   1a314:	str	r2, [r3, #-104]	; 0xffffff98
   1a318:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a31c:	add	r3, r3, #1
   1a320:	lsl	r3, r3, #3
   1a324:	sub	r2, fp, #12
   1a328:	add	r3, r2, r3
   1a32c:	ldr	r2, [fp, #-128]	; 0xffffff80
   1a330:	str	r2, [r3, #-100]	; 0xffffff9c
   1a334:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a338:	add	r3, r3, #1
   1a33c:	str	r3, [fp, #-112]	; 0xffffff90
   1a340:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a344:	cmp	r3, #0
   1a348:	beq	1a3a4 <flatcc_builder_create_table@@Base+0x2e4>
   1a34c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a350:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a354:	add	r3, r2, r3
   1a358:	str	r3, [fp, #-116]	; 0xffffff8c
   1a35c:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a360:	add	r3, r3, #1
   1a364:	lsl	r3, r3, #3
   1a368:	sub	r2, fp, #12
   1a36c:	add	r3, r2, r3
   1a370:	ldr	r2, [pc, #116]	; 1a3ec <flatcc_builder_create_table@@Base+0x32c>
   1a374:	ldr	r2, [r4, r2]
   1a378:	str	r2, [r3, #-104]	; 0xffffff98
   1a37c:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a380:	add	r3, r3, #1
   1a384:	lsl	r3, r3, #3
   1a388:	sub	r2, fp, #12
   1a38c:	add	r3, r2, r3
   1a390:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a394:	str	r2, [r3, #-100]	; 0xffffff9c
   1a398:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a39c:	add	r3, r3, #1
   1a3a0:	str	r3, [fp, #-112]	; 0xffffff90
   1a3a4:	sub	r3, fp, #116	; 0x74
   1a3a8:	mov	r1, r3
   1a3ac:	ldr	r0, [fp, #-120]	; 0xffffff88
   1a3b0:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1a3b4:	mov	r3, r0
   1a3b8:	mov	r0, r3
   1a3bc:	sub	sp, fp, #8
   1a3c0:	ldr	r4, [sp]
   1a3c4:	ldr	fp, [sp, #4]
   1a3c8:	add	sp, sp, #8
   1a3cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d0:	andeq	lr, r1, r0, lsl pc
   1a3d4:	andeq	sp, r0, r4, asr #9
   1a3d8:	andeq	ip, r0, r4, lsl lr
   1a3dc:	andeq	sp, r0, ip, lsr #1
   1a3e0:	muleq	r0, r4, r4
   1a3e4:	andeq	ip, r0, r4, ror #27
   1a3e8:	muleq	r0, r0, r0
   1a3ec:	andeq	r0, r0, r0, asr r0

0001a3f0 <flatcc_builder_check_required_field@@Base>:
   1a3f0:	str	fp, [sp, #-8]!
   1a3f4:	str	lr, [sp, #4]
   1a3f8:	add	fp, sp, #4
   1a3fc:	sub	sp, sp, #8
   1a400:	str	r0, [fp, #-8]
   1a404:	mov	r3, r1
   1a408:	strh	r3, [fp, #-10]
   1a40c:	ldr	r3, [fp, #-8]
   1a410:	ldr	r3, [r3, #32]
   1a414:	ldrh	r3, [r3, #14]
   1a418:	cmp	r3, #3
   1a41c:	beq	1a440 <flatcc_builder_check_required_field@@Base+0x50>
   1a420:	ldr	r3, [pc, #108]	; 1a494 <flatcc_builder_check_required_field@@Base+0xa4>
   1a424:	add	r3, pc, r3
   1a428:	movw	r2, #1272	; 0x4f8
   1a42c:	ldr	r1, [pc, #100]	; 1a498 <flatcc_builder_check_required_field@@Base+0xa8>
   1a430:	add	r1, pc, r1
   1a434:	ldr	r0, [pc, #96]	; 1a49c <flatcc_builder_check_required_field@@Base+0xac>
   1a438:	add	r0, pc, r0
   1a43c:	bl	124b0 <__assert_fail@plt>
   1a440:	ldr	r3, [fp, #-8]
   1a444:	ldrh	r3, [r3, #8]
   1a448:	ldrh	r2, [fp, #-10]
   1a44c:	cmp	r2, r3
   1a450:	bcs	1a47c <flatcc_builder_check_required_field@@Base+0x8c>
   1a454:	ldr	r3, [fp, #-8]
   1a458:	ldr	r2, [r3, #4]
   1a45c:	ldrh	r3, [fp, #-10]
   1a460:	lsl	r3, r3, #1
   1a464:	add	r3, r2, r3
   1a468:	ldrh	r3, [r3]
   1a46c:	cmp	r3, #0
   1a470:	beq	1a47c <flatcc_builder_check_required_field@@Base+0x8c>
   1a474:	mov	r3, #1
   1a478:	b	1a480 <flatcc_builder_check_required_field@@Base+0x90>
   1a47c:	mov	r3, #0
   1a480:	mov	r0, r3
   1a484:	sub	sp, fp, #4
   1a488:	ldr	fp, [sp]
   1a48c:	add	sp, sp, #4
   1a490:	pop	{pc}		; (ldr pc, [sp], #4)
   1a494:			; <UNDEFINED> instruction: 0x0000d1b8
   1a498:	andeq	ip, r0, ip, ror #21
   1a49c:	andeq	ip, r0, r4, lsr #27

0001a4a0 <flatcc_builder_check_union_field@@Base>:
   1a4a0:	str	fp, [sp, #-8]!
   1a4a4:	str	lr, [sp, #4]
   1a4a8:	add	fp, sp, #4
   1a4ac:	sub	sp, sp, #8
   1a4b0:	str	r0, [fp, #-8]
   1a4b4:	mov	r3, r1
   1a4b8:	strh	r3, [fp, #-10]
   1a4bc:	ldr	r3, [fp, #-8]
   1a4c0:	ldr	r3, [r3, #32]
   1a4c4:	ldrh	r3, [r3, #14]
   1a4c8:	cmp	r3, #3
   1a4cc:	beq	1a4f0 <flatcc_builder_check_union_field@@Base+0x50>
   1a4d0:	ldr	r3, [pc, #300]	; 1a604 <flatcc_builder_check_union_field@@Base+0x164>
   1a4d4:	add	r3, pc, r3
   1a4d8:	movw	r2, #1279	; 0x4ff
   1a4dc:	ldr	r1, [pc, #292]	; 1a608 <flatcc_builder_check_union_field@@Base+0x168>
   1a4e0:	add	r1, pc, r1
   1a4e4:	ldr	r0, [pc, #288]	; 1a60c <flatcc_builder_check_union_field@@Base+0x16c>
   1a4e8:	add	r0, pc, r0
   1a4ec:	bl	124b0 <__assert_fail@plt>
   1a4f0:	ldrh	r3, [fp, #-10]
   1a4f4:	cmp	r3, #0
   1a4f8:	beq	1a510 <flatcc_builder_check_union_field@@Base+0x70>
   1a4fc:	ldr	r3, [fp, #-8]
   1a500:	ldrh	r3, [r3, #8]
   1a504:	ldrh	r2, [fp, #-10]
   1a508:	cmp	r2, r3
   1a50c:	bcc	1a518 <flatcc_builder_check_union_field@@Base+0x78>
   1a510:	mov	r3, #0
   1a514:	b	1a5f0 <flatcc_builder_check_union_field@@Base+0x150>
   1a518:	ldr	r3, [fp, #-8]
   1a51c:	ldr	r2, [r3, #4]
   1a520:	ldrh	r3, [fp, #-10]
   1a524:	sub	r3, r3, #-2147483647	; 0x80000001
   1a528:	lsl	r3, r3, #1
   1a52c:	add	r3, r2, r3
   1a530:	ldrh	r3, [r3]
   1a534:	cmp	r3, #0
   1a538:	bne	1a568 <flatcc_builder_check_union_field@@Base+0xc8>
   1a53c:	ldr	r3, [fp, #-8]
   1a540:	ldr	r2, [r3, #4]
   1a544:	ldrh	r3, [fp, #-10]
   1a548:	lsl	r3, r3, #1
   1a54c:	add	r3, r2, r3
   1a550:	ldrh	r3, [r3]
   1a554:	cmp	r3, #0
   1a558:	moveq	r3, #1
   1a55c:	movne	r3, #0
   1a560:	uxtb	r3, r3
   1a564:	b	1a5f0 <flatcc_builder_check_union_field@@Base+0x150>
   1a568:	ldr	r3, [fp, #-8]
   1a56c:	ldr	r3, [r3, #16]
   1a570:	ldr	r2, [fp, #-8]
   1a574:	ldr	r1, [r2, #4]
   1a578:	ldrh	r2, [fp, #-10]
   1a57c:	sub	r2, r2, #-2147483647	; 0x80000001
   1a580:	lsl	r2, r2, #1
   1a584:	add	r2, r1, r2
   1a588:	ldrh	r2, [r2]
   1a58c:	add	r3, r3, r2
   1a590:	ldrb	r3, [r3]
   1a594:	cmp	r3, #0
   1a598:	beq	1a5c8 <flatcc_builder_check_union_field@@Base+0x128>
   1a59c:	ldr	r3, [fp, #-8]
   1a5a0:	ldr	r2, [r3, #4]
   1a5a4:	ldrh	r3, [fp, #-10]
   1a5a8:	lsl	r3, r3, #1
   1a5ac:	add	r3, r2, r3
   1a5b0:	ldrh	r3, [r3]
   1a5b4:	cmp	r3, #0
   1a5b8:	movne	r3, #1
   1a5bc:	moveq	r3, #0
   1a5c0:	uxtb	r3, r3
   1a5c4:	b	1a5f0 <flatcc_builder_check_union_field@@Base+0x150>
   1a5c8:	ldr	r3, [fp, #-8]
   1a5cc:	ldr	r2, [r3, #4]
   1a5d0:	ldrh	r3, [fp, #-10]
   1a5d4:	lsl	r3, r3, #1
   1a5d8:	add	r3, r2, r3
   1a5dc:	ldrh	r3, [r3]
   1a5e0:	cmp	r3, #0
   1a5e4:	moveq	r3, #1
   1a5e8:	movne	r3, #0
   1a5ec:	uxtb	r3, r3
   1a5f0:	mov	r0, r3
   1a5f4:	sub	sp, fp, #4
   1a5f8:	ldr	fp, [sp]
   1a5fc:	add	sp, sp, #4
   1a600:	pop	{pc}		; (ldr pc, [sp], #4)
   1a604:	andeq	sp, r0, ip, lsr #2
   1a608:	andeq	ip, r0, ip, lsr sl
   1a60c:	strdeq	ip, [r0], -r4

0001a610 <flatcc_builder_check_required@@Base>:
   1a610:	str	fp, [sp, #-8]!
   1a614:	str	lr, [sp, #4]
   1a618:	add	fp, sp, #4
   1a61c:	sub	sp, sp, #24
   1a620:	str	r0, [fp, #-16]
   1a624:	str	r1, [fp, #-20]	; 0xffffffec
   1a628:	str	r2, [fp, #-24]	; 0xffffffe8
   1a62c:	ldr	r3, [fp, #-16]
   1a630:	ldr	r3, [r3, #32]
   1a634:	ldrh	r3, [r3, #14]
   1a638:	cmp	r3, #3
   1a63c:	beq	1a660 <flatcc_builder_check_required@@Base+0x50>
   1a640:	ldr	r3, [pc, #176]	; 1a6f8 <flatcc_builder_check_required@@Base+0xe8>
   1a644:	add	r3, pc, r3
   1a648:	movw	r2, #1297	; 0x511
   1a64c:	ldr	r1, [pc, #168]	; 1a6fc <flatcc_builder_check_required@@Base+0xec>
   1a650:	add	r1, pc, r1
   1a654:	ldr	r0, [pc, #164]	; 1a700 <flatcc_builder_check_required@@Base+0xf0>
   1a658:	add	r0, pc, r0
   1a65c:	bl	124b0 <__assert_fail@plt>
   1a660:	ldr	r3, [fp, #-16]
   1a664:	ldrh	r3, [r3, #8]
   1a668:	mov	r2, r3
   1a66c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a670:	cmp	r3, r2
   1a674:	ble	1a680 <flatcc_builder_check_required@@Base+0x70>
   1a678:	mov	r3, #0
   1a67c:	b	1a6e4 <flatcc_builder_check_required@@Base+0xd4>
   1a680:	mov	r3, #0
   1a684:	str	r3, [fp, #-8]
   1a688:	b	1a6d0 <flatcc_builder_check_required@@Base+0xc0>
   1a68c:	ldr	r3, [fp, #-16]
   1a690:	ldr	r2, [r3, #4]
   1a694:	ldr	r3, [fp, #-8]
   1a698:	lsl	r3, r3, #1
   1a69c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a6a0:	add	r3, r1, r3
   1a6a4:	ldrh	r3, [r3]
   1a6a8:	lsl	r3, r3, #1
   1a6ac:	add	r3, r2, r3
   1a6b0:	ldrh	r3, [r3]
   1a6b4:	cmp	r3, #0
   1a6b8:	bne	1a6c4 <flatcc_builder_check_required@@Base+0xb4>
   1a6bc:	mov	r3, #0
   1a6c0:	b	1a6e4 <flatcc_builder_check_required@@Base+0xd4>
   1a6c4:	ldr	r3, [fp, #-8]
   1a6c8:	add	r3, r3, #1
   1a6cc:	str	r3, [fp, #-8]
   1a6d0:	ldr	r2, [fp, #-8]
   1a6d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a6d8:	cmp	r2, r3
   1a6dc:	blt	1a68c <flatcc_builder_check_required@@Base+0x7c>
   1a6e0:	mov	r3, #1
   1a6e4:	mov	r0, r3
   1a6e8:	sub	sp, fp, #4
   1a6ec:	ldr	fp, [sp]
   1a6f0:	add	sp, sp, #4
   1a6f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6f8:	andeq	ip, r0, r0, ror #31
   1a6fc:	andeq	ip, r0, ip, asr #17
   1a700:	andeq	ip, r0, r4, lsl #23

0001a704 <flatcc_builder_end_table@@Base>:
   1a704:	str	fp, [sp, #-8]!
   1a708:	str	lr, [sp, #4]
   1a70c:	add	fp, sp, #4
   1a710:	sub	sp, sp, #48	; 0x30
   1a714:	str	r0, [fp, #-32]	; 0xffffffe0
   1a718:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a71c:	ldr	r3, [r3, #32]
   1a720:	ldrh	r3, [r3, #14]
   1a724:	cmp	r3, #3
   1a728:	beq	1a74c <flatcc_builder_end_table@@Base+0x48>
   1a72c:	ldr	r3, [pc, #520]	; 1a93c <flatcc_builder_end_table@@Base+0x238>
   1a730:	add	r3, pc, r3
   1a734:	movw	r2, #1317	; 0x525
   1a738:	ldr	r1, [pc, #512]	; 1a940 <flatcc_builder_end_table@@Base+0x23c>
   1a73c:	add	r1, pc, r1
   1a740:	ldr	r0, [pc, #508]	; 1a944 <flatcc_builder_end_table@@Base+0x240>
   1a744:	add	r0, pc, r0
   1a748:	bl	124b0 <__assert_fail@plt>
   1a74c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a750:	ldr	r3, [r3, #4]
   1a754:	sub	r3, r3, #4
   1a758:	str	r3, [fp, #-8]
   1a75c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a760:	ldrh	r3, [r3, #8]
   1a764:	add	r3, r3, #2
   1a768:	uxth	r3, r3
   1a76c:	lsl	r3, r3, #1
   1a770:	strh	r3, [fp, #-10]
   1a774:	ldr	r3, [fp, #-8]
   1a778:	ldrh	r2, [fp, #-10]
   1a77c:	strh	r2, [r3]
   1a780:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a784:	ldr	r3, [r3, #20]
   1a788:	uxth	r2, r3
   1a78c:	ldr	r3, [fp, #-8]
   1a790:	add	r3, r3, #2
   1a794:	add	r2, r2, #4
   1a798:	uxth	r2, r2
   1a79c:	strh	r2, [r3]
   1a7a0:	ldr	r3, [fp, #-8]
   1a7a4:	ldrh	r3, [r3]
   1a7a8:	mov	r2, r3
   1a7ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a7b0:	ldr	r3, [r3, #12]
   1a7b4:	eor	r2, r2, r3
   1a7b8:	movw	r3, #31153	; 0x79b1
   1a7bc:	movt	r3, #40503	; 0x9e37
   1a7c0:	mul	r3, r3, r2
   1a7c4:	ldr	r2, [fp, #-8]
   1a7c8:	add	r2, r2, #2
   1a7cc:	ldrh	r2, [r2]
   1a7d0:	eor	r2, r2, r3
   1a7d4:	movw	r3, #31153	; 0x79b1
   1a7d8:	movt	r3, #40503	; 0x9e37
   1a7dc:	mul	r2, r3, r2
   1a7e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a7e4:	str	r2, [r3, #12]
   1a7e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a7ec:	ldr	r3, [r3, #12]
   1a7f0:	ldrh	r2, [fp, #-10]
   1a7f4:	ldr	r1, [fp, #-8]
   1a7f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a7fc:	bl	19da0 <flatcc_builder_create_cached_vtable@@Base>
   1a800:	str	r0, [fp, #-16]
   1a804:	ldr	r3, [fp, #-16]
   1a808:	cmp	r3, #0
   1a80c:	bne	1a818 <flatcc_builder_end_table@@Base+0x114>
   1a810:	mov	r3, #0
   1a814:	b	1a928 <flatcc_builder_end_table@@Base+0x224>
   1a818:	ldrh	r3, [fp, #-10]
   1a81c:	mov	r2, r3
   1a820:	mov	r1, #0
   1a824:	ldr	r0, [fp, #-8]
   1a828:	bl	12480 <memset@plt>
   1a82c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a830:	ldr	r2, [r3, #76]	; 0x4c
   1a834:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a838:	ldr	r3, [r3, #32]
   1a83c:	ldr	r3, [r3, #20]
   1a840:	add	r3, r2, r3
   1a844:	str	r3, [fp, #-20]	; 0xffffffec
   1a848:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a84c:	ldr	r2, [r3]
   1a850:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a854:	sub	r3, r2, r3
   1a858:	asr	r3, r3, #1
   1a85c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a860:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a864:	ldr	r1, [r3, #16]
   1a868:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a86c:	ldr	r2, [r3, #20]
   1a870:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a874:	ldrh	r0, [r3, #130]	; 0x82
   1a878:	ldr	r3, [fp, #-16]
   1a87c:	str	r3, [sp, #8]
   1a880:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a884:	str	r3, [sp, #4]
   1a888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a88c:	str	r3, [sp]
   1a890:	mov	r3, r0
   1a894:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a898:	bl	1a0c0 <flatcc_builder_create_table@@Base>
   1a89c:	str	r0, [fp, #-28]	; 0xffffffe4
   1a8a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a8a4:	cmp	r3, #0
   1a8a8:	bne	1a8b4 <flatcc_builder_end_table@@Base+0x1b0>
   1a8ac:	mov	r3, #0
   1a8b0:	b	1a928 <flatcc_builder_end_table@@Base+0x224>
   1a8b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8b8:	ldr	r3, [r3, #32]
   1a8bc:	ldr	r2, [r3, #24]
   1a8c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8c4:	str	r2, [r3, #12]
   1a8c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8cc:	ldr	r3, [r3, #32]
   1a8d0:	ldrh	r2, [r3, #28]
   1a8d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8d8:	strh	r2, [r3, #8]
   1a8dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8e0:	ldr	r2, [r3, #52]	; 0x34
   1a8e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8e8:	ldr	r3, [r3, #32]
   1a8ec:	ldr	r3, [r3, #16]
   1a8f0:	add	r2, r2, r3
   1a8f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a8f8:	str	r2, [r3, #4]
   1a8fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a900:	ldr	r2, [r3, #76]	; 0x4c
   1a904:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a908:	ldr	r3, [r3, #32]
   1a90c:	ldr	r3, [r3, #20]
   1a910:	add	r2, r2, r3
   1a914:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a918:	str	r2, [r3]
   1a91c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a920:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1a924:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a928:	mov	r0, r3
   1a92c:	sub	sp, fp, #4
   1a930:	ldr	fp, [sp]
   1a934:	add	sp, sp, #4
   1a938:	pop	{pc}		; (ldr pc, [sp], #4)
   1a93c:	andeq	ip, r0, r4, lsl pc
   1a940:	andeq	ip, r0, r0, ror #15
   1a944:	muleq	r0, r8, sl

0001a948 <flatcc_builder_create_vector@@Base>:
   1a948:	str	r4, [sp, #-12]!
   1a94c:	str	fp, [sp, #4]
   1a950:	str	lr, [sp, #8]
   1a954:	add	fp, sp, #8
   1a958:	sub	sp, sp, #108	; 0x6c
   1a95c:	str	r0, [fp, #-104]	; 0xffffff98
   1a960:	str	r1, [fp, #-108]	; 0xffffff94
   1a964:	str	r2, [fp, #-112]	; 0xffffff90
   1a968:	str	r3, [fp, #-116]	; 0xffffff8c
   1a96c:	ldr	r4, [pc, #496]	; 1ab64 <flatcc_builder_create_vector@@Base+0x21c>
   1a970:	add	r4, pc, r4
   1a974:	ldr	r2, [fp, #-112]	; 0xffffff90
   1a978:	ldr	r3, [fp, #8]
   1a97c:	cmp	r2, r3
   1a980:	bls	1a9bc <flatcc_builder_create_vector@@Base+0x74>
   1a984:	ldr	r2, [fp, #-112]	; 0xffffff90
   1a988:	ldr	r3, [fp, #8]
   1a98c:	cmp	r2, r3
   1a990:	bls	1a9b4 <flatcc_builder_create_vector@@Base+0x6c>
   1a994:	ldr	r3, [pc, #460]	; 1ab68 <flatcc_builder_create_vector@@Base+0x220>
   1a998:	add	r3, pc, r3
   1a99c:	movw	r2, #1365	; 0x555
   1a9a0:	ldr	r1, [pc, #452]	; 1ab6c <flatcc_builder_create_vector@@Base+0x224>
   1a9a4:	add	r1, pc, r1
   1a9a8:	ldr	r0, [pc, #448]	; 1ab70 <flatcc_builder_create_vector@@Base+0x228>
   1a9ac:	add	r0, pc, r0
   1a9b0:	bl	124b0 <__assert_fail@plt>
   1a9b4:	mov	r3, #0
   1a9b8:	b	1ab4c <flatcc_builder_create_vector@@Base+0x204>
   1a9bc:	mov	r1, #4
   1a9c0:	add	r3, fp, #4
   1a9c4:	mov	r0, r3
   1a9c8:	bl	177f8 <flatcc_builder_clear@@Base+0x10c>
   1a9cc:	ldrh	r3, [fp, #4]
   1a9d0:	mov	r1, r3
   1a9d4:	ldr	r0, [fp, #-104]	; 0xffffff98
   1a9d8:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   1a9dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a9e0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a9e4:	mul	r3, r2, r3
   1a9e8:	str	r3, [fp, #-16]
   1a9ec:	ldr	r0, [fp, #-112]	; 0xffffff90
   1a9f0:	bl	166a8 <main@@Base+0x114>
   1a9f4:	mov	r3, r0
   1a9f8:	str	r3, [fp, #-24]	; 0xffffffe8
   1a9fc:	ldrh	r3, [fp, #4]
   1aa00:	mov	r2, r3
   1aa04:	ldr	r1, [fp, #-16]
   1aa08:	ldr	r0, [fp, #-104]	; 0xffffff98
   1aa0c:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1aa10:	str	r0, [fp, #-20]	; 0xffffffec
   1aa14:	mov	r3, #0
   1aa18:	str	r3, [fp, #-96]	; 0xffffffa0
   1aa1c:	mov	r3, #0
   1aa20:	str	r3, [fp, #-92]	; 0xffffffa4
   1aa24:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1aa28:	add	r3, r3, #4
   1aa2c:	str	r3, [fp, #-96]	; 0xffffffa0
   1aa30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aa34:	add	r3, r3, #1
   1aa38:	lsl	r3, r3, #3
   1aa3c:	sub	r2, fp, #12
   1aa40:	add	r3, r2, r3
   1aa44:	sub	r2, fp, #24
   1aa48:	str	r2, [r3, #-84]	; 0xffffffac
   1aa4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aa50:	add	r3, r3, #1
   1aa54:	lsl	r3, r3, #3
   1aa58:	sub	r2, fp, #12
   1aa5c:	add	r3, r2, r3
   1aa60:	mov	r2, #4
   1aa64:	str	r2, [r3, #-80]	; 0xffffffb0
   1aa68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aa6c:	add	r3, r3, #1
   1aa70:	str	r3, [fp, #-92]	; 0xffffffa4
   1aa74:	ldr	r3, [fp, #-16]
   1aa78:	cmp	r3, #0
   1aa7c:	beq	1aad4 <flatcc_builder_create_vector@@Base+0x18c>
   1aa80:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1aa84:	ldr	r3, [fp, #-16]
   1aa88:	add	r3, r2, r3
   1aa8c:	str	r3, [fp, #-96]	; 0xffffffa0
   1aa90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aa94:	add	r3, r3, #1
   1aa98:	lsl	r3, r3, #3
   1aa9c:	sub	r2, fp, #12
   1aaa0:	add	r3, r2, r3
   1aaa4:	ldr	r2, [fp, #-108]	; 0xffffff94
   1aaa8:	str	r2, [r3, #-84]	; 0xffffffac
   1aaac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aab0:	add	r3, r3, #1
   1aab4:	lsl	r3, r3, #3
   1aab8:	sub	r2, fp, #12
   1aabc:	add	r3, r2, r3
   1aac0:	ldr	r2, [fp, #-16]
   1aac4:	str	r2, [r3, #-80]	; 0xffffffb0
   1aac8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aacc:	add	r3, r3, #1
   1aad0:	str	r3, [fp, #-92]	; 0xffffffa4
   1aad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aad8:	cmp	r3, #0
   1aadc:	beq	1ab38 <flatcc_builder_create_vector@@Base+0x1f0>
   1aae0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1aae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aae8:	add	r3, r2, r3
   1aaec:	str	r3, [fp, #-96]	; 0xffffffa0
   1aaf0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1aaf4:	add	r3, r3, #1
   1aaf8:	lsl	r3, r3, #3
   1aafc:	sub	r2, fp, #12
   1ab00:	add	r3, r2, r3
   1ab04:	ldr	r2, [pc, #104]	; 1ab74 <flatcc_builder_create_vector@@Base+0x22c>
   1ab08:	ldr	r2, [r4, r2]
   1ab0c:	str	r2, [r3, #-84]	; 0xffffffac
   1ab10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1ab14:	add	r3, r3, #1
   1ab18:	lsl	r3, r3, #3
   1ab1c:	sub	r2, fp, #12
   1ab20:	add	r3, r2, r3
   1ab24:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ab28:	str	r2, [r3, #-80]	; 0xffffffb0
   1ab2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1ab30:	add	r3, r3, #1
   1ab34:	str	r3, [fp, #-92]	; 0xffffffa4
   1ab38:	sub	r3, fp, #96	; 0x60
   1ab3c:	mov	r1, r3
   1ab40:	ldr	r0, [fp, #-104]	; 0xffffff98
   1ab44:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1ab48:	mov	r3, r0
   1ab4c:	mov	r0, r3
   1ab50:	sub	sp, fp, #8
   1ab54:	ldr	r4, [sp]
   1ab58:	ldr	fp, [sp, #4]
   1ab5c:	add	sp, sp, #8
   1ab60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab64:	andeq	lr, r1, r8, lsl #13
   1ab68:	andeq	ip, r0, r8, asr #25
   1ab6c:	andeq	ip, r0, r8, ror r5
   1ab70:	andeq	ip, r0, ip, asr r8
   1ab74:	andeq	r0, r0, r0, asr r0

0001ab78 <flatcc_builder_end_vector@@Base>:
   1ab78:	str	fp, [sp, #-8]!
   1ab7c:	str	lr, [sp, #4]
   1ab80:	add	fp, sp, #4
   1ab84:	sub	sp, sp, #24
   1ab88:	str	r0, [fp, #-16]
   1ab8c:	ldr	r3, [fp, #-16]
   1ab90:	ldr	r3, [r3, #32]
   1ab94:	ldrh	r3, [r3, #14]
   1ab98:	cmp	r3, #4
   1ab9c:	beq	1abc0 <flatcc_builder_end_vector@@Base+0x48>
   1aba0:	ldr	r3, [pc, #156]	; 1ac44 <flatcc_builder_end_vector@@Base+0xcc>
   1aba4:	add	r3, pc, r3
   1aba8:	movw	r2, #1400	; 0x578
   1abac:	ldr	r1, [pc, #148]	; 1ac48 <flatcc_builder_end_vector@@Base+0xd0>
   1abb0:	add	r1, pc, r1
   1abb4:	ldr	r0, [pc, #144]	; 1ac4c <flatcc_builder_end_vector@@Base+0xd4>
   1abb8:	add	r0, pc, r0
   1abbc:	bl	124b0 <__assert_fail@plt>
   1abc0:	ldr	r3, [fp, #-16]
   1abc4:	ldr	r1, [r3, #16]
   1abc8:	ldr	r3, [fp, #-16]
   1abcc:	ldr	r3, [r3, #32]
   1abd0:	ldr	r0, [r3, #20]
   1abd4:	ldr	r3, [fp, #-16]
   1abd8:	ldr	r3, [r3, #32]
   1abdc:	ldr	ip, [r3, #16]
   1abe0:	ldr	r3, [fp, #-16]
   1abe4:	ldrh	r3, [r3, #130]	; 0x82
   1abe8:	ldr	r2, [fp, #-16]
   1abec:	ldr	r2, [r2, #32]
   1abf0:	ldr	r2, [r2, #24]
   1abf4:	str	r2, [sp, #4]
   1abf8:	str	r3, [sp]
   1abfc:	mov	r3, ip
   1ac00:	mov	r2, r0
   1ac04:	ldr	r0, [fp, #-16]
   1ac08:	bl	1a948 <flatcc_builder_create_vector@@Base>
   1ac0c:	str	r0, [fp, #-8]
   1ac10:	ldr	r3, [fp, #-8]
   1ac14:	cmp	r3, #0
   1ac18:	bne	1ac24 <flatcc_builder_end_vector@@Base+0xac>
   1ac1c:	mov	r3, #0
   1ac20:	b	1ac30 <flatcc_builder_end_vector@@Base+0xb8>
   1ac24:	ldr	r0, [fp, #-16]
   1ac28:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1ac2c:	ldr	r3, [fp, #-8]
   1ac30:	mov	r0, r3
   1ac34:	sub	sp, fp, #4
   1ac38:	ldr	fp, [sp]
   1ac3c:	add	sp, sp, #4
   1ac40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac44:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   1ac48:	andeq	ip, r0, ip, ror #6
   1ac4c:	andeq	ip, r0, r8, lsr #9

0001ac50 <flatcc_builder_vector_count@@Base>:
   1ac50:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac54:	add	fp, sp, #0
   1ac58:	sub	sp, sp, #12
   1ac5c:	str	r0, [fp, #-8]
   1ac60:	ldr	r3, [fp, #-8]
   1ac64:	ldr	r3, [r3, #32]
   1ac68:	ldr	r3, [r3, #20]
   1ac6c:	mov	r0, r3
   1ac70:	add	sp, fp, #0
   1ac74:	pop	{fp}		; (ldr fp, [sp], #4)
   1ac78:	bx	lr

0001ac7c <flatcc_builder_vector_edit@@Base>:
   1ac7c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ac80:	add	fp, sp, #0
   1ac84:	sub	sp, sp, #12
   1ac88:	str	r0, [fp, #-8]
   1ac8c:	ldr	r3, [fp, #-8]
   1ac90:	ldr	r3, [r3, #16]
   1ac94:	mov	r0, r3
   1ac98:	add	sp, fp, #0
   1ac9c:	pop	{fp}		; (ldr fp, [sp], #4)
   1aca0:	bx	lr
   1aca4:	str	r4, [sp, #-12]!
   1aca8:	str	fp, [sp, #4]
   1acac:	str	lr, [sp, #8]
   1acb0:	add	fp, sp, #8
   1acb4:	sub	sp, sp, #116	; 0x74
   1acb8:	str	r0, [fp, #-112]	; 0xffffff90
   1acbc:	str	r1, [fp, #-116]	; 0xffffff8c
   1acc0:	str	r2, [fp, #-120]	; 0xffffff88
   1acc4:	str	r3, [fp, #-124]	; 0xffffff84
   1acc8:	ldr	r4, [pc, #764]	; 1afcc <flatcc_builder_vector_edit@@Base+0x350>
   1accc:	add	r4, pc, r4
   1acd0:	ldr	r3, [fp, #-120]	; 0xffffff88
   1acd4:	cmn	r3, #-1073741823	; 0xc0000001
   1acd8:	bls	1ace4 <flatcc_builder_vector_edit@@Base+0x68>
   1acdc:	mov	r3, #0
   1ace0:	b	1afb4 <flatcc_builder_vector_edit@@Base+0x338>
   1ace4:	mov	r1, #4
   1ace8:	ldr	r0, [fp, #-112]	; 0xffffff90
   1acec:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   1acf0:	ldr	r3, [fp, #-120]	; 0xffffff88
   1acf4:	lsl	r3, r3, #2
   1acf8:	str	r3, [fp, #-20]	; 0xffffffec
   1acfc:	ldr	r0, [fp, #-120]	; 0xffffff88
   1ad00:	bl	166a8 <main@@Base+0x114>
   1ad04:	mov	r3, r0
   1ad08:	str	r3, [fp, #-36]	; 0xffffffdc
   1ad0c:	mov	r2, #4
   1ad10:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ad14:	ldr	r0, [fp, #-112]	; 0xffffff90
   1ad18:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1ad1c:	str	r0, [fp, #-24]	; 0xffffffe8
   1ad20:	mov	r3, #0
   1ad24:	str	r3, [fp, #-108]	; 0xffffff94
   1ad28:	mov	r3, #0
   1ad2c:	str	r3, [fp, #-104]	; 0xffffff98
   1ad30:	ldr	r3, [fp, #-108]	; 0xffffff94
   1ad34:	add	r3, r3, #4
   1ad38:	str	r3, [fp, #-108]	; 0xffffff94
   1ad3c:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ad40:	add	r3, r3, #1
   1ad44:	lsl	r3, r3, #3
   1ad48:	sub	r2, fp, #12
   1ad4c:	add	r3, r2, r3
   1ad50:	sub	r2, fp, #36	; 0x24
   1ad54:	str	r2, [r3, #-96]	; 0xffffffa0
   1ad58:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ad5c:	add	r3, r3, #1
   1ad60:	lsl	r3, r3, #3
   1ad64:	sub	r2, fp, #12
   1ad68:	add	r3, r2, r3
   1ad6c:	mov	r2, #4
   1ad70:	str	r2, [r3, #-92]	; 0xffffffa4
   1ad74:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ad78:	add	r3, r3, #1
   1ad7c:	str	r3, [fp, #-104]	; 0xffffff98
   1ad80:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad84:	cmp	r3, #0
   1ad88:	beq	1ade0 <flatcc_builder_vector_edit@@Base+0x164>
   1ad8c:	ldr	r2, [fp, #-108]	; 0xffffff94
   1ad90:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ad94:	add	r3, r2, r3
   1ad98:	str	r3, [fp, #-108]	; 0xffffff94
   1ad9c:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ada0:	add	r3, r3, #1
   1ada4:	lsl	r3, r3, #3
   1ada8:	sub	r2, fp, #12
   1adac:	add	r3, r2, r3
   1adb0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1adb4:	str	r2, [r3, #-96]	; 0xffffffa0
   1adb8:	ldr	r3, [fp, #-104]	; 0xffffff98
   1adbc:	add	r3, r3, #1
   1adc0:	lsl	r3, r3, #3
   1adc4:	sub	r2, fp, #12
   1adc8:	add	r3, r2, r3
   1adcc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1add0:	str	r2, [r3, #-92]	; 0xffffffa4
   1add4:	ldr	r3, [fp, #-104]	; 0xffffff98
   1add8:	add	r3, r3, #1
   1addc:	str	r3, [fp, #-104]	; 0xffffff98
   1ade0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ade4:	cmp	r3, #0
   1ade8:	beq	1ae44 <flatcc_builder_vector_edit@@Base+0x1c8>
   1adec:	ldr	r2, [fp, #-108]	; 0xffffff94
   1adf0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1adf4:	add	r3, r2, r3
   1adf8:	str	r3, [fp, #-108]	; 0xffffff94
   1adfc:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ae00:	add	r3, r3, #1
   1ae04:	lsl	r3, r3, #3
   1ae08:	sub	r2, fp, #12
   1ae0c:	add	r3, r2, r3
   1ae10:	ldr	r2, [pc, #440]	; 1afd0 <flatcc_builder_vector_edit@@Base+0x354>
   1ae14:	ldr	r2, [r4, r2]
   1ae18:	str	r2, [r3, #-96]	; 0xffffffa0
   1ae1c:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ae20:	add	r3, r3, #1
   1ae24:	lsl	r3, r3, #3
   1ae28:	sub	r2, fp, #12
   1ae2c:	add	r3, r2, r3
   1ae30:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ae34:	str	r2, [r3, #-92]	; 0xffffffa4
   1ae38:	ldr	r3, [fp, #-104]	; 0xffffff98
   1ae3c:	add	r3, r3, #1
   1ae40:	str	r3, [fp, #-104]	; 0xffffff98
   1ae44:	ldr	r3, [fp, #-112]	; 0xffffff90
   1ae48:	ldr	r3, [r3, #136]	; 0x88
   1ae4c:	mov	r2, r3
   1ae50:	ldr	r3, [fp, #-108]	; 0xffffff94
   1ae54:	sub	r3, r2, r3
   1ae58:	str	r3, [fp, #-28]	; 0xffffffe4
   1ae5c:	mov	r3, #0
   1ae60:	str	r3, [fp, #-16]
   1ae64:	b	1af90 <flatcc_builder_vector_edit@@Base+0x314>
   1ae68:	ldr	r3, [fp, #-16]
   1ae6c:	lsl	r3, r3, #2
   1ae70:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1ae74:	add	r3, r2, r3
   1ae78:	ldr	r3, [r3]
   1ae7c:	cmp	r3, #0
   1ae80:	beq	1af20 <flatcc_builder_vector_edit@@Base+0x2a4>
   1ae84:	ldr	r3, [fp, #-16]
   1ae88:	lsl	r3, r3, #2
   1ae8c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1ae90:	add	r3, r2, r3
   1ae94:	ldr	r3, [r3]
   1ae98:	mov	r2, r3
   1ae9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1aea0:	sub	r2, r2, r3
   1aea4:	ldr	r3, [fp, #-16]
   1aea8:	lsl	r3, r3, #2
   1aeac:	sub	r3, r2, r3
   1aeb0:	sub	r3, r3, #4
   1aeb4:	str	r3, [fp, #-32]	; 0xffffffe0
   1aeb8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1aebc:	bl	166a8 <main@@Base+0x114>
   1aec0:	mov	r1, r0
   1aec4:	ldr	r3, [fp, #-16]
   1aec8:	lsl	r3, r3, #2
   1aecc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1aed0:	add	r3, r2, r3
   1aed4:	mov	r2, r1
   1aed8:	str	r2, [r3]
   1aedc:	ldr	r3, [fp, #-124]	; 0xffffff84
   1aee0:	cmp	r3, #0
   1aee4:	beq	1af84 <flatcc_builder_vector_edit@@Base+0x308>
   1aee8:	ldr	r2, [fp, #-124]	; 0xffffff84
   1aeec:	ldr	r3, [fp, #-16]
   1aef0:	add	r3, r2, r3
   1aef4:	ldrb	r3, [r3]
   1aef8:	cmp	r3, #0
   1aefc:	bne	1af84 <flatcc_builder_vector_edit@@Base+0x308>
   1af00:	ldr	r3, [pc, #204]	; 1afd4 <flatcc_builder_vector_edit@@Base+0x358>
   1af04:	add	r3, pc, r3
   1af08:	movw	r2, #1457	; 0x5b1
   1af0c:	ldr	r1, [pc, #196]	; 1afd8 <flatcc_builder_vector_edit@@Base+0x35c>
   1af10:	add	r1, pc, r1
   1af14:	ldr	r0, [pc, #192]	; 1afdc <flatcc_builder_vector_edit@@Base+0x360>
   1af18:	add	r0, pc, r0
   1af1c:	bl	124b0 <__assert_fail@plt>
   1af20:	ldr	r3, [fp, #-124]	; 0xffffff84
   1af24:	cmp	r3, #0
   1af28:	beq	1af64 <flatcc_builder_vector_edit@@Base+0x2e8>
   1af2c:	ldr	r2, [fp, #-124]	; 0xffffff84
   1af30:	ldr	r3, [fp, #-16]
   1af34:	add	r3, r2, r3
   1af38:	ldrb	r3, [r3]
   1af3c:	cmp	r3, #0
   1af40:	beq	1af84 <flatcc_builder_vector_edit@@Base+0x308>
   1af44:	ldr	r3, [pc, #148]	; 1afe0 <flatcc_builder_vector_edit@@Base+0x364>
   1af48:	add	r3, pc, r3
   1af4c:	movw	r2, #1461	; 0x5b5
   1af50:	ldr	r1, [pc, #140]	; 1afe4 <flatcc_builder_vector_edit@@Base+0x368>
   1af54:	add	r1, pc, r1
   1af58:	ldr	r0, [pc, #136]	; 1afe8 <flatcc_builder_vector_edit@@Base+0x36c>
   1af5c:	add	r0, pc, r0
   1af60:	bl	124b0 <__assert_fail@plt>
   1af64:	ldr	r3, [pc, #128]	; 1afec <flatcc_builder_vector_edit@@Base+0x370>
   1af68:	add	r3, pc, r3
   1af6c:	movw	r2, #1463	; 0x5b7
   1af70:	ldr	r1, [pc, #120]	; 1aff0 <flatcc_builder_vector_edit@@Base+0x374>
   1af74:	add	r1, pc, r1
   1af78:	ldr	r0, [pc, #116]	; 1aff4 <flatcc_builder_vector_edit@@Base+0x378>
   1af7c:	add	r0, pc, r0
   1af80:	bl	124b0 <__assert_fail@plt>
   1af84:	ldr	r3, [fp, #-16]
   1af88:	add	r3, r3, #1
   1af8c:	str	r3, [fp, #-16]
   1af90:	ldr	r2, [fp, #-16]
   1af94:	ldr	r3, [fp, #-120]	; 0xffffff88
   1af98:	cmp	r2, r3
   1af9c:	bcc	1ae68 <flatcc_builder_vector_edit@@Base+0x1ec>
   1afa0:	sub	r3, fp, #108	; 0x6c
   1afa4:	mov	r1, r3
   1afa8:	ldr	r0, [fp, #-112]	; 0xffffff90
   1afac:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1afb0:	mov	r3, r0
   1afb4:	mov	r0, r3
   1afb8:	sub	sp, fp, #8
   1afbc:	ldr	r4, [sp]
   1afc0:	ldr	fp, [sp, #4]
   1afc4:	add	sp, sp, #8
   1afc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1afcc:	andeq	lr, r1, ip, lsr #6
   1afd0:	andeq	r0, r0, r0, asr r0
   1afd4:	muleq	r0, r8, r7
   1afd8:	andeq	ip, r0, ip
   1afdc:	andeq	ip, r0, r4, lsl #6
   1afe0:	andeq	ip, r0, r4, asr r7
   1afe4:	andeq	fp, r0, r8, asr #31
   1afe8:	ldrdeq	ip, [r0], -r0
   1afec:	andeq	ip, r0, r4, lsr r7
   1aff0:	andeq	fp, r0, r8, lsr #31
   1aff4:	andeq	ip, r0, r0

0001aff8 <flatcc_builder_create_offset_vector_direct@@Base>:
   1aff8:	str	fp, [sp, #-8]!
   1affc:	str	lr, [sp, #4]
   1b000:	add	fp, sp, #4
   1b004:	sub	sp, sp, #16
   1b008:	str	r0, [fp, #-8]
   1b00c:	str	r1, [fp, #-12]
   1b010:	str	r2, [fp, #-16]
   1b014:	mov	r3, #0
   1b018:	ldr	r2, [fp, #-16]
   1b01c:	ldr	r1, [fp, #-12]
   1b020:	ldr	r0, [fp, #-8]
   1b024:	bl	1aca4 <flatcc_builder_vector_edit@@Base+0x28>
   1b028:	mov	r3, r0
   1b02c:	mov	r0, r3
   1b030:	sub	sp, fp, #4
   1b034:	ldr	fp, [sp]
   1b038:	add	sp, sp, #4
   1b03c:	pop	{pc}		; (ldr pc, [sp], #4)

0001b040 <flatcc_builder_end_offset_vector@@Base>:
   1b040:	str	fp, [sp, #-8]!
   1b044:	str	lr, [sp, #4]
   1b048:	add	fp, sp, #4
   1b04c:	sub	sp, sp, #16
   1b050:	str	r0, [fp, #-16]
   1b054:	ldr	r3, [fp, #-16]
   1b058:	ldr	r3, [r3, #32]
   1b05c:	ldrh	r3, [r3, #14]
   1b060:	cmp	r3, #5
   1b064:	beq	1b088 <flatcc_builder_end_offset_vector@@Base+0x48>
   1b068:	ldr	r3, [pc, #112]	; 1b0e0 <flatcc_builder_end_offset_vector@@Base+0xa0>
   1b06c:	add	r3, pc, r3
   1b070:	movw	r2, #1480	; 0x5c8
   1b074:	ldr	r1, [pc, #104]	; 1b0e4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   1b078:	add	r1, pc, r1
   1b07c:	ldr	r0, [pc, #100]	; 1b0e8 <flatcc_builder_end_offset_vector@@Base+0xa8>
   1b080:	add	r0, pc, r0
   1b084:	bl	124b0 <__assert_fail@plt>
   1b088:	ldr	r3, [fp, #-16]
   1b08c:	ldr	r1, [r3, #16]
   1b090:	ldr	r3, [fp, #-16]
   1b094:	ldr	r3, [r3, #32]
   1b098:	ldr	r3, [r3, #20]
   1b09c:	mov	r2, r3
   1b0a0:	ldr	r0, [fp, #-16]
   1b0a4:	bl	1aff8 <flatcc_builder_create_offset_vector_direct@@Base>
   1b0a8:	str	r0, [fp, #-8]
   1b0ac:	ldr	r3, [fp, #-8]
   1b0b0:	cmp	r3, #0
   1b0b4:	bne	1b0c0 <flatcc_builder_end_offset_vector@@Base+0x80>
   1b0b8:	mov	r3, #0
   1b0bc:	b	1b0cc <flatcc_builder_end_offset_vector@@Base+0x8c>
   1b0c0:	ldr	r0, [fp, #-16]
   1b0c4:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1b0c8:	ldr	r3, [fp, #-8]
   1b0cc:	mov	r0, r3
   1b0d0:	sub	sp, fp, #4
   1b0d4:	ldr	fp, [sp]
   1b0d8:	add	sp, sp, #4
   1b0dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0e0:	andeq	ip, r0, r0, asr r6
   1b0e4:	andeq	fp, r0, r4, lsr #29
   1b0e8:	andeq	ip, r0, ip, asr #32

0001b0ec <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1b0ec:	str	fp, [sp, #-8]!
   1b0f0:	str	lr, [sp, #4]
   1b0f4:	add	fp, sp, #4
   1b0f8:	sub	sp, sp, #16
   1b0fc:	str	r0, [fp, #-16]
   1b100:	str	r1, [fp, #-20]	; 0xffffffec
   1b104:	ldr	r3, [fp, #-16]
   1b108:	ldr	r3, [r3, #32]
   1b10c:	ldrh	r3, [r3, #14]
   1b110:	cmp	r3, #5
   1b114:	beq	1b138 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   1b118:	ldr	r3, [pc, #112]	; 1b190 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   1b11c:	add	r3, pc, r3
   1b120:	movw	r2, #1493	; 0x5d5
   1b124:	ldr	r1, [pc, #104]	; 1b194 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   1b128:	add	r1, pc, r1
   1b12c:	ldr	r0, [pc, #100]	; 1b198 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   1b130:	add	r0, pc, r0
   1b134:	bl	124b0 <__assert_fail@plt>
   1b138:	ldr	r3, [fp, #-16]
   1b13c:	ldr	r1, [r3, #16]
   1b140:	ldr	r3, [fp, #-16]
   1b144:	ldr	r3, [r3, #32]
   1b148:	ldr	r2, [r3, #20]
   1b14c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b150:	ldr	r0, [fp, #-16]
   1b154:	bl	1aca4 <flatcc_builder_vector_edit@@Base+0x28>
   1b158:	str	r0, [fp, #-8]
   1b15c:	ldr	r3, [fp, #-8]
   1b160:	cmp	r3, #0
   1b164:	bne	1b170 <flatcc_builder_end_offset_vector_for_unions@@Base+0x84>
   1b168:	mov	r3, #0
   1b16c:	b	1b17c <flatcc_builder_end_offset_vector_for_unions@@Base+0x90>
   1b170:	ldr	r0, [fp, #-16]
   1b174:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1b178:	ldr	r3, [fp, #-8]
   1b17c:	mov	r0, r3
   1b180:	sub	sp, fp, #4
   1b184:	ldr	fp, [sp]
   1b188:	add	sp, sp, #4
   1b18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b190:	andeq	ip, r0, r4, asr #11
   1b194:	strdeq	fp, [r0], -r4
   1b198:	muleq	r0, ip, pc	; <UNPREDICTABLE>

0001b19c <flatcc_builder_offset_vector_edit@@Base>:
   1b19c:	push	{fp}		; (str fp, [sp, #-4]!)
   1b1a0:	add	fp, sp, #0
   1b1a4:	sub	sp, sp, #12
   1b1a8:	str	r0, [fp, #-8]
   1b1ac:	ldr	r3, [fp, #-8]
   1b1b0:	ldr	r3, [r3, #16]
   1b1b4:	mov	r0, r3
   1b1b8:	add	sp, fp, #0
   1b1bc:	pop	{fp}		; (ldr fp, [sp], #4)
   1b1c0:	bx	lr

0001b1c4 <flatcc_builder_offset_vector_count@@Base>:
   1b1c4:	push	{fp}		; (str fp, [sp, #-4]!)
   1b1c8:	add	fp, sp, #0
   1b1cc:	sub	sp, sp, #12
   1b1d0:	str	r0, [fp, #-8]
   1b1d4:	ldr	r3, [fp, #-8]
   1b1d8:	ldr	r3, [r3, #32]
   1b1dc:	ldr	r3, [r3, #20]
   1b1e0:	mov	r0, r3
   1b1e4:	add	sp, fp, #0
   1b1e8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b1ec:	bx	lr

0001b1f0 <flatcc_builder_table_add_union@@Base>:
   1b1f0:	str	fp, [sp, #-8]!
   1b1f4:	str	lr, [sp, #4]
   1b1f8:	add	fp, sp, #4
   1b1fc:	sub	sp, sp, #24
   1b200:	str	r0, [fp, #-16]
   1b204:	str	r1, [fp, #-20]	; 0xffffffec
   1b208:	sub	r1, fp, #28
   1b20c:	stm	r1, {r2, r3}
   1b210:	ldr	r3, [fp, #-16]
   1b214:	ldr	r3, [r3, #32]
   1b218:	ldrh	r3, [r3, #14]
   1b21c:	cmp	r3, #3
   1b220:	beq	1b244 <flatcc_builder_table_add_union@@Base+0x54>
   1b224:	ldr	r3, [pc, #360]	; 1b394 <flatcc_builder_table_add_union@@Base+0x1a4>
   1b228:	add	r3, pc, r3
   1b22c:	movw	r2, #1518	; 0x5ee
   1b230:	ldr	r1, [pc, #352]	; 1b398 <flatcc_builder_table_add_union@@Base+0x1a8>
   1b234:	add	r1, pc, r1
   1b238:	ldr	r0, [pc, #348]	; 1b39c <flatcc_builder_table_add_union@@Base+0x1ac>
   1b23c:	add	r0, pc, r0
   1b240:	bl	124b0 <__assert_fail@plt>
   1b244:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1b248:	cmp	r3, #0
   1b24c:	bne	1b29c <flatcc_builder_table_add_union@@Base+0xac>
   1b250:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b254:	cmp	r3, #0
   1b258:	beq	1b29c <flatcc_builder_table_add_union@@Base+0xac>
   1b25c:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1b260:	cmp	r3, #0
   1b264:	bne	1b294 <flatcc_builder_table_add_union@@Base+0xa4>
   1b268:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b26c:	cmp	r3, #0
   1b270:	beq	1b294 <flatcc_builder_table_add_union@@Base+0xa4>
   1b274:	ldr	r3, [pc, #292]	; 1b3a0 <flatcc_builder_table_add_union@@Base+0x1b0>
   1b278:	add	r3, pc, r3
   1b27c:	movw	r2, #1519	; 0x5ef
   1b280:	ldr	r1, [pc, #284]	; 1b3a4 <flatcc_builder_table_add_union@@Base+0x1b4>
   1b284:	add	r1, pc, r1
   1b288:	ldr	r0, [pc, #280]	; 1b3a8 <flatcc_builder_table_add_union@@Base+0x1b8>
   1b28c:	add	r0, pc, r0
   1b290:	bl	124b0 <__assert_fail@plt>
   1b294:	mvn	r3, #0
   1b298:	b	1b380 <flatcc_builder_table_add_union@@Base+0x190>
   1b29c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b2a0:	cmp	r3, #0
   1b2a4:	beq	1b304 <flatcc_builder_table_add_union@@Base+0x114>
   1b2a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b2ac:	ldr	r0, [fp, #-16]
   1b2b0:	bl	1c3c4 <flatcc_builder_table_add_offset@@Base>
   1b2b4:	str	r0, [fp, #-8]
   1b2b8:	ldr	r3, [fp, #-8]
   1b2bc:	cmp	r3, #0
   1b2c0:	bne	1b2f8 <flatcc_builder_table_add_union@@Base+0x108>
   1b2c4:	ldr	r3, [fp, #-8]
   1b2c8:	cmp	r3, #0
   1b2cc:	bne	1b2f0 <flatcc_builder_table_add_union@@Base+0x100>
   1b2d0:	ldr	r3, [pc, #212]	; 1b3ac <flatcc_builder_table_add_union@@Base+0x1bc>
   1b2d4:	add	r3, pc, r3
   1b2d8:	movw	r2, #1522	; 0x5f2
   1b2dc:	ldr	r1, [pc, #204]	; 1b3b0 <flatcc_builder_table_add_union@@Base+0x1c0>
   1b2e0:	add	r1, pc, r1
   1b2e4:	ldr	r0, [pc, #200]	; 1b3b4 <flatcc_builder_table_add_union@@Base+0x1c4>
   1b2e8:	add	r0, pc, r0
   1b2ec:	bl	124b0 <__assert_fail@plt>
   1b2f0:	mvn	r3, #0
   1b2f4:	b	1b380 <flatcc_builder_table_add_union@@Base+0x190>
   1b2f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b2fc:	ldr	r3, [fp, #-8]
   1b300:	str	r2, [r3]
   1b304:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b308:	sub	r1, r3, #1
   1b30c:	mov	r3, #1
   1b310:	mov	r2, #1
   1b314:	ldr	r0, [fp, #-16]
   1b318:	bl	1c154 <flatcc_builder_table_add@@Base>
   1b31c:	str	r0, [fp, #-12]
   1b320:	ldr	r3, [fp, #-12]
   1b324:	cmp	r3, #0
   1b328:	bne	1b360 <flatcc_builder_table_add_union@@Base+0x170>
   1b32c:	ldr	r3, [fp, #-12]
   1b330:	cmp	r3, #0
   1b334:	bne	1b358 <flatcc_builder_table_add_union@@Base+0x168>
   1b338:	ldr	r3, [pc, #120]	; 1b3b8 <flatcc_builder_table_add_union@@Base+0x1c8>
   1b33c:	add	r3, pc, r3
   1b340:	movw	r2, #1526	; 0x5f6
   1b344:	ldr	r1, [pc, #112]	; 1b3bc <flatcc_builder_table_add_union@@Base+0x1cc>
   1b348:	add	r1, pc, r1
   1b34c:	ldr	r0, [pc, #108]	; 1b3c0 <flatcc_builder_table_add_union@@Base+0x1d0>
   1b350:	add	r0, pc, r0
   1b354:	bl	124b0 <__assert_fail@plt>
   1b358:	mvn	r3, #0
   1b35c:	b	1b380 <flatcc_builder_table_add_union@@Base+0x190>
   1b360:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1b364:	mov	r0, r3
   1b368:	bl	166cc <main@@Base+0x138>
   1b36c:	mov	r3, r0
   1b370:	mov	r2, r3
   1b374:	ldr	r3, [fp, #-12]
   1b378:	strb	r2, [r3]
   1b37c:	mov	r3, #0
   1b380:	mov	r0, r3
   1b384:	sub	sp, fp, #4
   1b388:	ldr	fp, [sp]
   1b38c:	add	sp, sp, #4
   1b390:	pop	{pc}		; (ldr pc, [sp], #4)
   1b394:	andeq	ip, r0, r4, ror #9
   1b398:	andeq	fp, r0, r8, ror #25
   1b39c:	andeq	fp, r0, r0, lsr #31
   1b3a0:	muleq	r0, r4, r4
   1b3a4:	muleq	r0, r8, ip
   1b3a8:			; <UNDEFINED> instruction: 0x0000bfb0
   1b3ac:	andeq	ip, r0, r8, lsr r4
   1b3b0:	andeq	fp, r0, ip, lsr ip
   1b3b4:	andeq	fp, r0, r8, ror pc
   1b3b8:	ldrdeq	ip, [r0], -r0
   1b3bc:	ldrdeq	fp, [r0], -r4
   1b3c0:	andeq	fp, r0, ip, lsl pc

0001b3c4 <flatcc_builder_table_add_union_vector@@Base>:
   1b3c4:	str	fp, [sp, #-8]!
   1b3c8:	str	lr, [sp, #4]
   1b3cc:	add	fp, sp, #4
   1b3d0:	sub	sp, sp, #24
   1b3d4:	str	r0, [fp, #-16]
   1b3d8:	str	r1, [fp, #-20]	; 0xffffffec
   1b3dc:	sub	r1, fp, #28
   1b3e0:	stm	r1, {r2, r3}
   1b3e4:	ldr	r3, [fp, #-16]
   1b3e8:	ldr	r3, [r3, #32]
   1b3ec:	ldrh	r3, [r3, #14]
   1b3f0:	cmp	r3, #3
   1b3f4:	beq	1b418 <flatcc_builder_table_add_union_vector@@Base+0x54>
   1b3f8:	ldr	r3, [pc, #404]	; 1b594 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   1b3fc:	add	r3, pc, r3
   1b400:	mov	r2, #1536	; 0x600
   1b404:	ldr	r1, [pc, #396]	; 1b598 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1b408:	add	r1, pc, r1
   1b40c:	ldr	r0, [pc, #392]	; 1b59c <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   1b410:	add	r0, pc, r0
   1b414:	bl	124b0 <__assert_fail@plt>
   1b418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b41c:	cmp	r3, #0
   1b420:	moveq	r3, #1
   1b424:	movne	r3, #0
   1b428:	uxtb	r2, r3
   1b42c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b430:	cmp	r3, #0
   1b434:	moveq	r3, #1
   1b438:	movne	r3, #0
   1b43c:	uxtb	r3, r3
   1b440:	eor	r3, r3, r2
   1b444:	uxtb	r3, r3
   1b448:	cmp	r3, #0
   1b44c:	beq	1b4b0 <flatcc_builder_table_add_union_vector@@Base+0xec>
   1b450:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b454:	cmp	r3, #0
   1b458:	movne	r3, #1
   1b45c:	moveq	r3, #0
   1b460:	uxtb	r2, r3
   1b464:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b468:	cmp	r3, #0
   1b46c:	moveq	r3, #1
   1b470:	movne	r3, #0
   1b474:	uxtb	r3, r3
   1b478:	eor	r3, r3, r2
   1b47c:	uxtb	r3, r3
   1b480:	cmp	r3, #0
   1b484:	bne	1b4a8 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1b488:	ldr	r3, [pc, #272]	; 1b5a0 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   1b48c:	add	r3, pc, r3
   1b490:	movw	r2, #1537	; 0x601
   1b494:	ldr	r1, [pc, #264]	; 1b5a4 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   1b498:	add	r1, pc, r1
   1b49c:	ldr	r0, [pc, #260]	; 1b5a8 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   1b4a0:	add	r0, pc, r0
   1b4a4:	bl	124b0 <__assert_fail@plt>
   1b4a8:	mvn	r3, #0
   1b4ac:	b	1b580 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1b4b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b4b4:	cmp	r3, #0
   1b4b8:	beq	1b57c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1b4bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b4c0:	sub	r3, r3, #1
   1b4c4:	mov	r1, r3
   1b4c8:	ldr	r0, [fp, #-16]
   1b4cc:	bl	1c3c4 <flatcc_builder_table_add_offset@@Base>
   1b4d0:	str	r0, [fp, #-8]
   1b4d4:	ldr	r3, [fp, #-8]
   1b4d8:	cmp	r3, #0
   1b4dc:	bne	1b514 <flatcc_builder_table_add_union_vector@@Base+0x150>
   1b4e0:	ldr	r3, [fp, #-8]
   1b4e4:	cmp	r3, #0
   1b4e8:	bne	1b50c <flatcc_builder_table_add_union_vector@@Base+0x148>
   1b4ec:	ldr	r3, [pc, #184]	; 1b5ac <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   1b4f0:	add	r3, pc, r3
   1b4f4:	movw	r2, #1540	; 0x604
   1b4f8:	ldr	r1, [pc, #176]	; 1b5b0 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   1b4fc:	add	r1, pc, r1
   1b500:	ldr	r0, [pc, #172]	; 1b5b4 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1b504:	add	r0, pc, r0
   1b508:	bl	124b0 <__assert_fail@plt>
   1b50c:	mvn	r3, #0
   1b510:	b	1b580 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1b514:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b518:	ldr	r3, [fp, #-8]
   1b51c:	str	r2, [r3]
   1b520:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b524:	ldr	r0, [fp, #-16]
   1b528:	bl	1c3c4 <flatcc_builder_table_add_offset@@Base>
   1b52c:	str	r0, [fp, #-8]
   1b530:	ldr	r3, [fp, #-8]
   1b534:	cmp	r3, #0
   1b538:	bne	1b570 <flatcc_builder_table_add_union_vector@@Base+0x1ac>
   1b53c:	ldr	r3, [fp, #-8]
   1b540:	cmp	r3, #0
   1b544:	bne	1b568 <flatcc_builder_table_add_union_vector@@Base+0x1a4>
   1b548:	ldr	r3, [pc, #104]	; 1b5b8 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   1b54c:	add	r3, pc, r3
   1b550:	movw	r2, #1544	; 0x608
   1b554:	ldr	r1, [pc, #96]	; 1b5bc <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   1b558:	add	r1, pc, r1
   1b55c:	ldr	r0, [pc, #92]	; 1b5c0 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   1b560:	add	r0, pc, r0
   1b564:	bl	124b0 <__assert_fail@plt>
   1b568:	mvn	r3, #0
   1b56c:	b	1b580 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   1b570:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b574:	ldr	r3, [fp, #-8]
   1b578:	str	r2, [r3]
   1b57c:	mov	r3, #0
   1b580:	mov	r0, r3
   1b584:	sub	sp, fp, #4
   1b588:	ldr	fp, [sp]
   1b58c:	add	sp, sp, #4
   1b590:	pop	{pc}		; (ldr pc, [sp], #4)
   1b594:	andeq	ip, r0, r0, lsr r3
   1b598:	andeq	fp, r0, r4, lsl fp
   1b59c:	andeq	fp, r0, ip, asr #27
   1b5a0:	andeq	ip, r0, r0, lsr #5
   1b5a4:	andeq	fp, r0, r4, lsl #21
   1b5a8:	ldrdeq	fp, [r0], -r8
   1b5ac:	andeq	ip, r0, ip, lsr r2
   1b5b0:	andeq	fp, r0, r0, lsr #20
   1b5b4:	andeq	fp, r0, ip, asr sp
   1b5b8:	andeq	ip, r0, r0, ror #3
   1b5bc:	andeq	fp, r0, r4, asr #19
   1b5c0:	andeq	fp, r0, r0, lsl #26

0001b5c4 <flatcc_builder_create_union_vector@@Base>:
   1b5c4:	str	fp, [sp, #-8]!
   1b5c8:	str	lr, [sp, #4]
   1b5cc:	add	fp, sp, #4
   1b5d0:	sub	sp, sp, #48	; 0x30
   1b5d4:	str	r0, [fp, #-32]	; 0xffffffe0
   1b5d8:	str	r1, [fp, #-36]	; 0xffffffdc
   1b5dc:	str	r2, [fp, #-40]	; 0xffffffd8
   1b5e0:	str	r3, [fp, #-44]	; 0xffffffd4
   1b5e4:	mov	r3, #0
   1b5e8:	str	r3, [fp, #-24]	; 0xffffffe8
   1b5ec:	mov	r3, #0
   1b5f0:	str	r3, [fp, #-20]	; 0xffffffec
   1b5f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b5f8:	bl	19938 <flatcc_builder_start_offset_vector@@Base>
   1b5fc:	mov	r3, r0
   1b600:	cmp	r3, #0
   1b604:	beq	1b620 <flatcc_builder_create_union_vector@@Base+0x5c>
   1b608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b60c:	mov	r1, r3
   1b610:	sub	r3, fp, #24
   1b614:	ldrd	r2, [r3]
   1b618:	strd	r2, [r1]
   1b61c:	b	1b73c <flatcc_builder_create_union_vector@@Base+0x178>
   1b620:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1b624:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b628:	bl	1917c <flatcc_builder_extend_offset_vector@@Base>
   1b62c:	mov	r3, r0
   1b630:	cmp	r3, #0
   1b634:	bne	1b650 <flatcc_builder_create_union_vector@@Base+0x8c>
   1b638:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b63c:	mov	r1, r3
   1b640:	sub	r3, fp, #24
   1b644:	ldrd	r2, [r3]
   1b648:	strd	r2, [r1]
   1b64c:	b	1b73c <flatcc_builder_create_union_vector@@Base+0x178>
   1b650:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1b654:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b658:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   1b65c:	str	r0, [fp, #-12]
   1b660:	ldr	r3, [fp, #-12]
   1b664:	cmp	r3, #0
   1b668:	bne	1b684 <flatcc_builder_create_union_vector@@Base+0xc0>
   1b66c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b670:	mov	r1, r3
   1b674:	sub	r3, fp, #24
   1b678:	ldrd	r2, [r3]
   1b67c:	strd	r2, [r1]
   1b680:	b	1b73c <flatcc_builder_create_union_vector@@Base+0x178>
   1b684:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b688:	bl	1b19c <flatcc_builder_offset_vector_edit@@Base>
   1b68c:	str	r0, [fp, #-16]
   1b690:	mov	r3, #0
   1b694:	str	r3, [fp, #-8]
   1b698:	b	1b6f4 <flatcc_builder_create_union_vector@@Base+0x130>
   1b69c:	ldr	r3, [fp, #-8]
   1b6a0:	lsl	r3, r3, #3
   1b6a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b6a8:	add	r2, r2, r3
   1b6ac:	ldr	r1, [fp, #-12]
   1b6b0:	ldr	r3, [fp, #-8]
   1b6b4:	add	r3, r1, r3
   1b6b8:	ldrb	r2, [r2]
   1b6bc:	strb	r2, [r3]
   1b6c0:	ldr	r3, [fp, #-8]
   1b6c4:	lsl	r3, r3, #3
   1b6c8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b6cc:	add	r2, r2, r3
   1b6d0:	ldr	r3, [fp, #-8]
   1b6d4:	lsl	r3, r3, #2
   1b6d8:	ldr	r1, [fp, #-16]
   1b6dc:	add	r3, r1, r3
   1b6e0:	ldr	r2, [r2, #4]
   1b6e4:	str	r2, [r3]
   1b6e8:	ldr	r3, [fp, #-8]
   1b6ec:	add	r3, r3, #1
   1b6f0:	str	r3, [fp, #-8]
   1b6f4:	ldr	r2, [fp, #-8]
   1b6f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b6fc:	cmp	r2, r3
   1b700:	bcc	1b69c <flatcc_builder_create_union_vector@@Base+0xd8>
   1b704:	sub	r0, fp, #24
   1b708:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b70c:	str	r3, [sp]
   1b710:	ldr	r3, [fp, #-16]
   1b714:	ldr	r2, [fp, #-12]
   1b718:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b71c:	bl	1b750 <flatcc_builder_create_union_vector_direct@@Base>
   1b720:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b724:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1b728:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b72c:	mov	r1, r3
   1b730:	sub	r3, fp, #24
   1b734:	ldrd	r2, [r3]
   1b738:	strd	r2, [r1]
   1b73c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b740:	sub	sp, fp, #4
   1b744:	ldr	fp, [sp]
   1b748:	add	sp, sp, #4
   1b74c:	pop	{pc}		; (ldr pc, [sp], #4)

0001b750 <flatcc_builder_create_union_vector_direct@@Base>:
   1b750:	str	fp, [sp, #-8]!
   1b754:	str	lr, [sp, #4]
   1b758:	add	fp, sp, #4
   1b75c:	sub	sp, sp, #32
   1b760:	str	r0, [fp, #-16]
   1b764:	str	r1, [fp, #-20]	; 0xffffffec
   1b768:	str	r2, [fp, #-24]	; 0xffffffe8
   1b76c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b770:	mov	r3, #0
   1b774:	str	r3, [fp, #-12]
   1b778:	mov	r3, #0
   1b77c:	str	r3, [fp, #-8]
   1b780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b784:	ldr	r2, [fp, #4]
   1b788:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b78c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b790:	bl	1aca4 <flatcc_builder_vector_edit@@Base+0x28>
   1b794:	mov	r3, r0
   1b798:	str	r3, [fp, #-8]
   1b79c:	ldr	r3, [fp, #-8]
   1b7a0:	cmp	r3, #0
   1b7a4:	bne	1b7c0 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   1b7a8:	ldr	r3, [fp, #-16]
   1b7ac:	mov	r1, r3
   1b7b0:	sub	r3, fp, #12
   1b7b4:	ldrd	r2, [r3]
   1b7b8:	strd	r2, [r1]
   1b7bc:	b	1b824 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   1b7c0:	mvn	r3, #0
   1b7c4:	str	r3, [sp, #4]
   1b7c8:	mov	r3, #1
   1b7cc:	str	r3, [sp]
   1b7d0:	mov	r3, #1
   1b7d4:	ldr	r2, [fp, #4]
   1b7d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b7dc:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b7e0:	bl	1a948 <flatcc_builder_create_vector@@Base>
   1b7e4:	mov	r3, r0
   1b7e8:	str	r3, [fp, #-12]
   1b7ec:	ldr	r3, [fp, #-12]
   1b7f0:	cmp	r3, #0
   1b7f4:	bne	1b810 <flatcc_builder_create_union_vector_direct@@Base+0xc0>
   1b7f8:	ldr	r3, [fp, #-16]
   1b7fc:	mov	r1, r3
   1b800:	sub	r3, fp, #12
   1b804:	ldrd	r2, [r3]
   1b808:	strd	r2, [r1]
   1b80c:	b	1b824 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   1b810:	ldr	r3, [fp, #-16]
   1b814:	mov	r1, r3
   1b818:	sub	r3, fp, #12
   1b81c:	ldrd	r2, [r3]
   1b820:	strd	r2, [r1]
   1b824:	ldr	r0, [fp, #-16]
   1b828:	sub	sp, fp, #4
   1b82c:	ldr	fp, [sp]
   1b830:	add	sp, sp, #4
   1b834:	pop	{pc}		; (ldr pc, [sp], #4)

0001b838 <flatcc_builder_start_union_vector@@Base>:
   1b838:	str	fp, [sp, #-8]!
   1b83c:	str	lr, [sp, #4]
   1b840:	add	fp, sp, #4
   1b844:	sub	sp, sp, #8
   1b848:	str	r0, [fp, #-8]
   1b84c:	mov	r1, #4
   1b850:	ldr	r0, [fp, #-8]
   1b854:	bl	17b6c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1b858:	mov	r3, r0
   1b85c:	cmp	r3, #0
   1b860:	beq	1b86c <flatcc_builder_start_union_vector@@Base+0x34>
   1b864:	mvn	r3, #0
   1b868:	b	1b8ac <flatcc_builder_start_union_vector@@Base+0x74>
   1b86c:	ldr	r3, [fp, #-8]
   1b870:	ldr	r3, [r3, #32]
   1b874:	mov	r2, #8
   1b878:	str	r2, [r3, #16]
   1b87c:	ldr	r3, [fp, #-8]
   1b880:	ldr	r3, [r3, #32]
   1b884:	mov	r2, #0
   1b888:	str	r2, [r3, #20]
   1b88c:	ldr	r3, [fp, #-8]
   1b890:	ldr	r3, [r3, #32]
   1b894:	mov	r2, #7
   1b898:	strh	r2, [r3, #14]
   1b89c:	mvn	r1, #3
   1b8a0:	ldr	r0, [fp, #-8]
   1b8a4:	bl	169cc <flatcc_builder_default_alloc@@Base+0x1d4>
   1b8a8:	mov	r3, #0
   1b8ac:	mov	r0, r3
   1b8b0:	sub	sp, fp, #4
   1b8b4:	ldr	fp, [sp]
   1b8b8:	add	sp, sp, #4
   1b8bc:	pop	{pc}		; (ldr pc, [sp], #4)

0001b8c0 <flatcc_builder_end_union_vector@@Base>:
   1b8c0:	str	fp, [sp, #-8]!
   1b8c4:	str	lr, [sp, #4]
   1b8c8:	add	fp, sp, #4
   1b8cc:	sub	sp, sp, #48	; 0x30
   1b8d0:	str	r0, [fp, #-40]	; 0xffffffd8
   1b8d4:	str	r1, [fp, #-44]	; 0xffffffd4
   1b8d8:	mov	r3, #0
   1b8dc:	str	r3, [fp, #-32]	; 0xffffffe0
   1b8e0:	mov	r3, #0
   1b8e4:	str	r3, [fp, #-28]	; 0xffffffe4
   1b8e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b8ec:	ldr	r3, [r3, #32]
   1b8f0:	ldrh	r3, [r3, #14]
   1b8f4:	cmp	r3, #7
   1b8f8:	beq	1b91c <flatcc_builder_end_union_vector@@Base+0x5c>
   1b8fc:	ldr	r3, [pc, #328]	; 1ba4c <flatcc_builder_end_union_vector@@Base+0x18c>
   1b900:	add	r3, pc, r3
   1b904:	movw	r2, #1617	; 0x651
   1b908:	ldr	r1, [pc, #320]	; 1ba50 <flatcc_builder_end_union_vector@@Base+0x190>
   1b90c:	add	r1, pc, r1
   1b910:	ldr	r0, [pc, #316]	; 1ba54 <flatcc_builder_end_union_vector@@Base+0x194>
   1b914:	add	r0, pc, r0
   1b918:	bl	124b0 <__assert_fail@plt>
   1b91c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b920:	bl	1ba80 <flatcc_builder_union_vector_count@@Base>
   1b924:	str	r0, [fp, #-12]
   1b928:	ldr	r2, [fp, #-12]
   1b92c:	mov	r3, r2
   1b930:	lsl	r3, r3, #2
   1b934:	add	r3, r3, r2
   1b938:	mov	r1, r3
   1b93c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b940:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   1b944:	str	r0, [fp, #-16]
   1b948:	ldr	r3, [fp, #-16]
   1b94c:	cmp	r3, #0
   1b950:	bne	1b96c <flatcc_builder_end_union_vector@@Base+0xac>
   1b954:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b958:	mov	r1, r3
   1b95c:	sub	r3, fp, #32
   1b960:	ldrd	r2, [r3]
   1b964:	strd	r2, [r1]
   1b968:	b	1ba38 <flatcc_builder_end_union_vector@@Base+0x178>
   1b96c:	ldr	r3, [fp, #-12]
   1b970:	lsl	r3, r3, #2
   1b974:	ldr	r2, [fp, #-16]
   1b978:	add	r3, r2, r3
   1b97c:	str	r3, [fp, #-20]	; 0xffffffec
   1b980:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b984:	bl	1ba58 <flatcc_builder_union_vector_edit@@Base>
   1b988:	str	r0, [fp, #-24]	; 0xffffffe8
   1b98c:	mov	r3, #0
   1b990:	str	r3, [fp, #-8]
   1b994:	b	1b9f0 <flatcc_builder_end_union_vector@@Base+0x130>
   1b998:	ldr	r3, [fp, #-8]
   1b99c:	lsl	r3, r3, #3
   1b9a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b9a4:	add	r2, r2, r3
   1b9a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b9ac:	ldr	r3, [fp, #-8]
   1b9b0:	add	r3, r1, r3
   1b9b4:	ldrb	r2, [r2]
   1b9b8:	strb	r2, [r3]
   1b9bc:	ldr	r3, [fp, #-8]
   1b9c0:	lsl	r3, r3, #3
   1b9c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b9c8:	add	r2, r2, r3
   1b9cc:	ldr	r3, [fp, #-8]
   1b9d0:	lsl	r3, r3, #2
   1b9d4:	ldr	r1, [fp, #-16]
   1b9d8:	add	r3, r1, r3
   1b9dc:	ldr	r2, [r2, #4]
   1b9e0:	str	r2, [r3]
   1b9e4:	ldr	r3, [fp, #-8]
   1b9e8:	add	r3, r3, #1
   1b9ec:	str	r3, [fp, #-8]
   1b9f0:	ldr	r2, [fp, #-8]
   1b9f4:	ldr	r3, [fp, #-12]
   1b9f8:	cmp	r2, r3
   1b9fc:	bcc	1b998 <flatcc_builder_end_union_vector@@Base+0xd8>
   1ba00:	sub	r0, fp, #32
   1ba04:	ldr	r3, [fp, #-12]
   1ba08:	str	r3, [sp]
   1ba0c:	ldr	r3, [fp, #-16]
   1ba10:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ba14:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1ba18:	bl	1b750 <flatcc_builder_create_union_vector_direct@@Base>
   1ba1c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ba20:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1ba24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1ba28:	mov	r1, r3
   1ba2c:	sub	r3, fp, #32
   1ba30:	ldrd	r2, [r3]
   1ba34:	strd	r2, [r1]
   1ba38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ba3c:	sub	sp, fp, #4
   1ba40:	ldr	fp, [sp]
   1ba44:	add	sp, sp, #4
   1ba48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba4c:	andeq	fp, r0, r4, asr lr
   1ba50:	andeq	fp, r0, r0, lsl r6
   1ba54:	andeq	fp, r0, ip, lsl #19

0001ba58 <flatcc_builder_union_vector_edit@@Base>:
   1ba58:	push	{fp}		; (str fp, [sp, #-4]!)
   1ba5c:	add	fp, sp, #0
   1ba60:	sub	sp, sp, #12
   1ba64:	str	r0, [fp, #-8]
   1ba68:	ldr	r3, [fp, #-8]
   1ba6c:	ldr	r3, [r3, #16]
   1ba70:	mov	r0, r3
   1ba74:	add	sp, fp, #0
   1ba78:	pop	{fp}		; (ldr fp, [sp], #4)
   1ba7c:	bx	lr

0001ba80 <flatcc_builder_union_vector_count@@Base>:
   1ba80:	push	{fp}		; (str fp, [sp, #-4]!)
   1ba84:	add	fp, sp, #0
   1ba88:	sub	sp, sp, #12
   1ba8c:	str	r0, [fp, #-8]
   1ba90:	ldr	r3, [fp, #-8]
   1ba94:	ldr	r3, [r3, #32]
   1ba98:	ldr	r3, [r3, #20]
   1ba9c:	mov	r0, r3
   1baa0:	add	sp, fp, #0
   1baa4:	pop	{fp}		; (ldr fp, [sp], #4)
   1baa8:	bx	lr

0001baac <flatcc_builder_extend_union_vector@@Base>:
   1baac:	str	fp, [sp, #-8]!
   1bab0:	str	lr, [sp, #4]
   1bab4:	add	fp, sp, #4
   1bab8:	sub	sp, sp, #8
   1babc:	str	r0, [fp, #-8]
   1bac0:	str	r1, [fp, #-12]
   1bac4:	mvn	r2, #-536870912	; 0xe0000000
   1bac8:	ldr	r1, [fp, #-12]
   1bacc:	ldr	r0, [fp, #-8]
   1bad0:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   1bad4:	mov	r3, r0
   1bad8:	cmp	r3, #0
   1badc:	beq	1bae8 <flatcc_builder_extend_union_vector@@Base+0x3c>
   1bae0:	mov	r3, #0
   1bae4:	b	1bb00 <flatcc_builder_extend_union_vector@@Base+0x54>
   1bae8:	ldr	r3, [fp, #-12]
   1baec:	lsl	r3, r3, #3
   1baf0:	mov	r1, r3
   1baf4:	ldr	r0, [fp, #-8]
   1baf8:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   1bafc:	mov	r3, r0
   1bb00:	mov	r0, r3
   1bb04:	sub	sp, fp, #4
   1bb08:	ldr	fp, [sp]
   1bb0c:	add	sp, sp, #4
   1bb10:	pop	{pc}		; (ldr pc, [sp], #4)

0001bb14 <flatcc_builder_truncate_union_vector@@Base>:
   1bb14:	str	fp, [sp, #-8]!
   1bb18:	str	lr, [sp, #4]
   1bb1c:	add	fp, sp, #4
   1bb20:	sub	sp, sp, #8
   1bb24:	str	r0, [fp, #-8]
   1bb28:	str	r1, [fp, #-12]
   1bb2c:	ldr	r3, [fp, #-8]
   1bb30:	ldr	r3, [r3, #32]
   1bb34:	ldrh	r3, [r3, #14]
   1bb38:	cmp	r3, #7
   1bb3c:	beq	1bb60 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   1bb40:	ldr	r3, [pc, #200]	; 1bc10 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   1bb44:	add	r3, pc, r3
   1bb48:	movw	r2, #1665	; 0x681
   1bb4c:	ldr	r1, [pc, #192]	; 1bc14 <flatcc_builder_truncate_union_vector@@Base+0x100>
   1bb50:	add	r1, pc, r1
   1bb54:	ldr	r0, [pc, #188]	; 1bc18 <flatcc_builder_truncate_union_vector@@Base+0x104>
   1bb58:	add	r0, pc, r0
   1bb5c:	bl	124b0 <__assert_fail@plt>
   1bb60:	ldr	r3, [fp, #-8]
   1bb64:	ldr	r3, [r3, #32]
   1bb68:	ldr	r3, [r3, #20]
   1bb6c:	ldr	r2, [fp, #-12]
   1bb70:	cmp	r2, r3
   1bb74:	bls	1bbb8 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   1bb78:	ldr	r3, [fp, #-8]
   1bb7c:	ldr	r3, [r3, #32]
   1bb80:	ldr	r3, [r3, #20]
   1bb84:	ldr	r2, [fp, #-12]
   1bb88:	cmp	r2, r3
   1bb8c:	bls	1bbb0 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1bb90:	ldr	r3, [pc, #132]	; 1bc1c <flatcc_builder_truncate_union_vector@@Base+0x108>
   1bb94:	add	r3, pc, r3
   1bb98:	movw	r2, #1666	; 0x682
   1bb9c:	ldr	r1, [pc, #124]	; 1bc20 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   1bba0:	add	r1, pc, r1
   1bba4:	ldr	r0, [pc, #120]	; 1bc24 <flatcc_builder_truncate_union_vector@@Base+0x110>
   1bba8:	add	r0, pc, r0
   1bbac:	bl	124b0 <__assert_fail@plt>
   1bbb0:	mvn	r3, #0
   1bbb4:	b	1bbfc <flatcc_builder_truncate_union_vector@@Base+0xe8>
   1bbb8:	ldr	r3, [fp, #-8]
   1bbbc:	ldr	r3, [r3, #32]
   1bbc0:	ldr	r1, [r3, #20]
   1bbc4:	ldr	r3, [fp, #-8]
   1bbc8:	ldr	r3, [r3, #32]
   1bbcc:	ldr	r2, [fp, #-12]
   1bbd0:	sub	r2, r1, r2
   1bbd4:	str	r2, [r3, #20]
   1bbd8:	ldr	r3, [fp, #-8]
   1bbdc:	ldr	r3, [r3, #32]
   1bbe0:	ldr	r3, [r3, #16]
   1bbe4:	ldr	r2, [fp, #-12]
   1bbe8:	mul	r3, r2, r3
   1bbec:	mov	r1, r3
   1bbf0:	ldr	r0, [fp, #-8]
   1bbf4:	bl	16bb0 <flatcc_builder_default_alloc@@Base+0x3b8>
   1bbf8:	mov	r3, #0
   1bbfc:	mov	r0, r3
   1bc00:	sub	sp, fp, #4
   1bc04:	ldr	fp, [sp]
   1bc08:	add	sp, sp, #4
   1bc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc10:	andeq	fp, r0, r0, lsr ip
   1bc14:	andeq	fp, r0, ip, asr #7
   1bc18:	andeq	fp, r0, r8, asr #14
   1bc1c:	andeq	fp, r0, r0, ror #23
   1bc20:	andeq	fp, r0, ip, ror r3
   1bc24:	andeq	fp, r0, r8, lsr #11

0001bc28 <flatcc_builder_union_vector_push@@Base>:
   1bc28:	str	fp, [sp, #-8]!
   1bc2c:	str	lr, [sp, #4]
   1bc30:	add	fp, sp, #4
   1bc34:	sub	sp, sp, #24
   1bc38:	str	r0, [fp, #-16]
   1bc3c:	sub	r3, fp, #24
   1bc40:	stm	r3, {r1, r2}
   1bc44:	ldr	r3, [fp, #-16]
   1bc48:	ldr	r3, [r3, #32]
   1bc4c:	ldrh	r3, [r3, #14]
   1bc50:	cmp	r3, #7
   1bc54:	beq	1bc78 <flatcc_builder_union_vector_push@@Base+0x50>
   1bc58:	ldr	r3, [pc, #160]	; 1bd00 <flatcc_builder_union_vector_push@@Base+0xd8>
   1bc5c:	add	r3, pc, r3
   1bc60:	movw	r2, #1677	; 0x68d
   1bc64:	ldr	r1, [pc, #152]	; 1bd04 <flatcc_builder_union_vector_push@@Base+0xdc>
   1bc68:	add	r1, pc, r1
   1bc6c:	ldr	r0, [pc, #148]	; 1bd08 <flatcc_builder_union_vector_push@@Base+0xe0>
   1bc70:	add	r0, pc, r0
   1bc74:	bl	124b0 <__assert_fail@plt>
   1bc78:	ldr	r3, [fp, #-16]
   1bc7c:	ldr	r3, [r3, #32]
   1bc80:	ldr	r3, [r3, #20]
   1bc84:	cmn	r3, #-536870911	; 0xe0000001
   1bc88:	bne	1bc94 <flatcc_builder_union_vector_push@@Base+0x6c>
   1bc8c:	mov	r3, #0
   1bc90:	b	1bcec <flatcc_builder_union_vector_push@@Base+0xc4>
   1bc94:	ldr	r3, [fp, #-16]
   1bc98:	ldr	r3, [r3, #32]
   1bc9c:	ldr	r2, [r3, #20]
   1bca0:	ldr	r3, [fp, #-16]
   1bca4:	ldr	r3, [r3, #32]
   1bca8:	add	r2, r2, #1
   1bcac:	str	r2, [r3, #20]
   1bcb0:	mov	r1, #8
   1bcb4:	ldr	r0, [fp, #-16]
   1bcb8:	bl	16b08 <flatcc_builder_default_alloc@@Base+0x310>
   1bcbc:	str	r0, [fp, #-8]
   1bcc0:	ldr	r3, [fp, #-8]
   1bcc4:	cmp	r3, #0
   1bcc8:	bne	1bcd4 <flatcc_builder_union_vector_push@@Base+0xac>
   1bccc:	mov	r3, #0
   1bcd0:	b	1bcec <flatcc_builder_union_vector_push@@Base+0xc4>
   1bcd4:	ldr	r3, [fp, #-8]
   1bcd8:	mov	r1, r3
   1bcdc:	sub	r3, fp, #24
   1bce0:	ldrd	r2, [r3]
   1bce4:	strd	r2, [r1]
   1bce8:	ldr	r3, [fp, #-8]
   1bcec:	mov	r0, r3
   1bcf0:	sub	sp, fp, #4
   1bcf4:	ldr	fp, [sp]
   1bcf8:	add	sp, sp, #4
   1bcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd00:	andeq	fp, r0, r0, asr #22
   1bd04:			; <UNDEFINED> instruction: 0x0000b2b4
   1bd08:	andeq	fp, r0, r0, lsr r6

0001bd0c <flatcc_builder_append_union_vector@@Base>:
   1bd0c:	str	fp, [sp, #-8]!
   1bd10:	str	lr, [sp, #4]
   1bd14:	add	fp, sp, #4
   1bd18:	sub	sp, sp, #16
   1bd1c:	str	r0, [fp, #-8]
   1bd20:	str	r1, [fp, #-12]
   1bd24:	str	r2, [fp, #-16]
   1bd28:	ldr	r3, [fp, #-8]
   1bd2c:	ldr	r3, [r3, #32]
   1bd30:	ldrh	r3, [r3, #14]
   1bd34:	cmp	r3, #7
   1bd38:	beq	1bd5c <flatcc_builder_append_union_vector@@Base+0x50>
   1bd3c:	ldr	r3, [pc, #108]	; 1bdb0 <flatcc_builder_append_union_vector@@Base+0xa4>
   1bd40:	add	r3, pc, r3
   1bd44:	movw	r2, #1692	; 0x69c
   1bd48:	ldr	r1, [pc, #100]	; 1bdb4 <flatcc_builder_append_union_vector@@Base+0xa8>
   1bd4c:	add	r1, pc, r1
   1bd50:	ldr	r0, [pc, #96]	; 1bdb8 <flatcc_builder_append_union_vector@@Base+0xac>
   1bd54:	add	r0, pc, r0
   1bd58:	bl	124b0 <__assert_fail@plt>
   1bd5c:	mvn	r2, #-536870912	; 0xe0000000
   1bd60:	ldr	r1, [fp, #-16]
   1bd64:	ldr	r0, [fp, #-8]
   1bd68:	bl	18e40 <flatcc_builder_end_struct@@Base+0xac>
   1bd6c:	mov	r3, r0
   1bd70:	cmp	r3, #0
   1bd74:	beq	1bd80 <flatcc_builder_append_union_vector@@Base+0x74>
   1bd78:	mov	r3, #0
   1bd7c:	b	1bd9c <flatcc_builder_append_union_vector@@Base+0x90>
   1bd80:	ldr	r3, [fp, #-16]
   1bd84:	lsl	r3, r3, #3
   1bd88:	mov	r2, r3
   1bd8c:	ldr	r1, [fp, #-12]
   1bd90:	ldr	r0, [fp, #-8]
   1bd94:	bl	16c18 <flatcc_builder_default_alloc@@Base+0x420>
   1bd98:	mov	r3, r0
   1bd9c:	mov	r0, r3
   1bda0:	sub	sp, fp, #4
   1bda4:	ldr	fp, [sp]
   1bda8:	add	sp, sp, #4
   1bdac:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdb0:	andeq	fp, r0, r0, lsl #21
   1bdb4:	ldrdeq	fp, [r0], -r0
   1bdb8:	andeq	fp, r0, ip, asr #10

0001bdbc <flatcc_builder_create_string@@Base>:
   1bdbc:	str	r4, [sp, #-12]!
   1bdc0:	str	fp, [sp, #4]
   1bdc4:	str	lr, [sp, #8]
   1bdc8:	add	fp, sp, #8
   1bdcc:	sub	sp, sp, #100	; 0x64
   1bdd0:	str	r0, [fp, #-96]	; 0xffffffa0
   1bdd4:	str	r1, [fp, #-100]	; 0xffffff9c
   1bdd8:	str	r2, [fp, #-104]	; 0xffffff98
   1bddc:	ldr	r4, [pc, #388]	; 1bf68 <flatcc_builder_create_string@@Base+0x1ac>
   1bde0:	add	r4, pc, r4
   1bde4:	ldr	r0, [fp, #-104]	; 0xffffff98
   1bde8:	bl	166a8 <main@@Base+0x114>
   1bdec:	mov	r3, r0
   1bdf0:	str	r3, [fp, #-20]	; 0xffffffec
   1bdf4:	ldr	r3, [fp, #-104]	; 0xffffff98
   1bdf8:	add	r3, r3, #1
   1bdfc:	mov	r2, #4
   1be00:	mov	r1, r3
   1be04:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1be08:	bl	17e2c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1be0c:	mov	r3, r0
   1be10:	add	r3, r3, #1
   1be14:	str	r3, [fp, #-16]
   1be18:	mov	r3, #0
   1be1c:	str	r3, [fp, #-92]	; 0xffffffa4
   1be20:	mov	r3, #0
   1be24:	str	r3, [fp, #-88]	; 0xffffffa8
   1be28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1be2c:	add	r3, r3, #4
   1be30:	str	r3, [fp, #-92]	; 0xffffffa4
   1be34:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1be38:	add	r3, r3, #1
   1be3c:	lsl	r3, r3, #3
   1be40:	sub	r2, fp, #12
   1be44:	add	r3, r2, r3
   1be48:	sub	r2, fp, #20
   1be4c:	str	r2, [r3, #-80]	; 0xffffffb0
   1be50:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1be54:	add	r3, r3, #1
   1be58:	lsl	r3, r3, #3
   1be5c:	sub	r2, fp, #12
   1be60:	add	r3, r2, r3
   1be64:	mov	r2, #4
   1be68:	str	r2, [r3, #-76]	; 0xffffffb4
   1be6c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1be70:	add	r3, r3, #1
   1be74:	str	r3, [fp, #-88]	; 0xffffffa8
   1be78:	ldr	r3, [fp, #-104]	; 0xffffff98
   1be7c:	cmp	r3, #0
   1be80:	beq	1bed8 <flatcc_builder_create_string@@Base+0x11c>
   1be84:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1be88:	ldr	r3, [fp, #-104]	; 0xffffff98
   1be8c:	add	r3, r2, r3
   1be90:	str	r3, [fp, #-92]	; 0xffffffa4
   1be94:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1be98:	add	r3, r3, #1
   1be9c:	lsl	r3, r3, #3
   1bea0:	sub	r2, fp, #12
   1bea4:	add	r3, r2, r3
   1bea8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1beac:	str	r2, [r3, #-80]	; 0xffffffb0
   1beb0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1beb4:	add	r3, r3, #1
   1beb8:	lsl	r3, r3, #3
   1bebc:	sub	r2, fp, #12
   1bec0:	add	r3, r2, r3
   1bec4:	ldr	r2, [fp, #-104]	; 0xffffff98
   1bec8:	str	r2, [r3, #-76]	; 0xffffffb4
   1becc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1bed0:	add	r3, r3, #1
   1bed4:	str	r3, [fp, #-88]	; 0xffffffa8
   1bed8:	ldr	r3, [fp, #-16]
   1bedc:	cmp	r3, #0
   1bee0:	beq	1bf3c <flatcc_builder_create_string@@Base+0x180>
   1bee4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1bee8:	ldr	r3, [fp, #-16]
   1beec:	add	r3, r2, r3
   1bef0:	str	r3, [fp, #-92]	; 0xffffffa4
   1bef4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1bef8:	add	r3, r3, #1
   1befc:	lsl	r3, r3, #3
   1bf00:	sub	r2, fp, #12
   1bf04:	add	r3, r2, r3
   1bf08:	ldr	r2, [pc, #92]	; 1bf6c <flatcc_builder_create_string@@Base+0x1b0>
   1bf0c:	ldr	r2, [r4, r2]
   1bf10:	str	r2, [r3, #-80]	; 0xffffffb0
   1bf14:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1bf18:	add	r3, r3, #1
   1bf1c:	lsl	r3, r3, #3
   1bf20:	sub	r2, fp, #12
   1bf24:	add	r3, r2, r3
   1bf28:	ldr	r2, [fp, #-16]
   1bf2c:	str	r2, [r3, #-76]	; 0xffffffb4
   1bf30:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1bf34:	add	r3, r3, #1
   1bf38:	str	r3, [fp, #-88]	; 0xffffffa8
   1bf3c:	sub	r3, fp, #92	; 0x5c
   1bf40:	mov	r1, r3
   1bf44:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1bf48:	bl	17eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1bf4c:	mov	r3, r0
   1bf50:	mov	r0, r3
   1bf54:	sub	sp, fp, #8
   1bf58:	ldr	r4, [sp]
   1bf5c:	ldr	fp, [sp, #4]
   1bf60:	add	sp, sp, #8
   1bf64:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf68:	andeq	sp, r1, r8, lsl r2
   1bf6c:	andeq	r0, r0, r0, asr r0

0001bf70 <flatcc_builder_create_string_str@@Base>:
   1bf70:	str	fp, [sp, #-8]!
   1bf74:	str	lr, [sp, #4]
   1bf78:	add	fp, sp, #4
   1bf7c:	sub	sp, sp, #8
   1bf80:	str	r0, [fp, #-8]
   1bf84:	str	r1, [fp, #-12]
   1bf88:	ldr	r0, [fp, #-12]
   1bf8c:	bl	1245c <strlen@plt>
   1bf90:	mov	r3, r0
   1bf94:	mov	r2, r3
   1bf98:	ldr	r1, [fp, #-12]
   1bf9c:	ldr	r0, [fp, #-8]
   1bfa0:	bl	1bdbc <flatcc_builder_create_string@@Base>
   1bfa4:	mov	r3, r0
   1bfa8:	mov	r0, r3
   1bfac:	sub	sp, fp, #4
   1bfb0:	ldr	fp, [sp]
   1bfb4:	add	sp, sp, #4
   1bfb8:	pop	{pc}		; (ldr pc, [sp], #4)

0001bfbc <flatcc_builder_create_string_strn@@Base>:
   1bfbc:	str	fp, [sp, #-8]!
   1bfc0:	str	lr, [sp, #4]
   1bfc4:	add	fp, sp, #4
   1bfc8:	sub	sp, sp, #16
   1bfcc:	str	r0, [fp, #-8]
   1bfd0:	str	r1, [fp, #-12]
   1bfd4:	str	r2, [fp, #-16]
   1bfd8:	ldr	r1, [fp, #-16]
   1bfdc:	ldr	r0, [fp, #-12]
   1bfe0:	bl	16798 <main@@Base+0x204>
   1bfe4:	mov	r3, r0
   1bfe8:	mov	r2, r3
   1bfec:	ldr	r1, [fp, #-12]
   1bff0:	ldr	r0, [fp, #-8]
   1bff4:	bl	1bdbc <flatcc_builder_create_string@@Base>
   1bff8:	mov	r3, r0
   1bffc:	mov	r0, r3
   1c000:	sub	sp, fp, #4
   1c004:	ldr	fp, [sp]
   1c008:	add	sp, sp, #4
   1c00c:	pop	{pc}		; (ldr pc, [sp], #4)

0001c010 <flatcc_builder_end_string@@Base>:
   1c010:	str	fp, [sp, #-8]!
   1c014:	str	lr, [sp, #4]
   1c018:	add	fp, sp, #4
   1c01c:	sub	sp, sp, #16
   1c020:	str	r0, [fp, #-16]
   1c024:	ldr	r3, [fp, #-16]
   1c028:	ldr	r3, [r3, #32]
   1c02c:	ldrh	r3, [r3, #14]
   1c030:	cmp	r3, #6
   1c034:	beq	1c058 <flatcc_builder_end_string@@Base+0x48>
   1c038:	ldr	r3, [pc, #168]	; 1c0e8 <flatcc_builder_end_string@@Base+0xd8>
   1c03c:	add	r3, pc, r3
   1c040:	movw	r2, #1732	; 0x6c4
   1c044:	ldr	r1, [pc, #160]	; 1c0ec <flatcc_builder_end_string@@Base+0xdc>
   1c048:	add	r1, pc, r1
   1c04c:	ldr	r0, [pc, #156]	; 1c0f0 <flatcc_builder_end_string@@Base+0xe0>
   1c050:	add	r0, pc, r0
   1c054:	bl	124b0 <__assert_fail@plt>
   1c058:	ldr	r3, [fp, #-16]
   1c05c:	ldr	r3, [r3, #32]
   1c060:	ldr	r2, [r3, #20]
   1c064:	ldr	r3, [fp, #-16]
   1c068:	ldr	r3, [r3, #20]
   1c06c:	cmp	r2, r3
   1c070:	beq	1c094 <flatcc_builder_end_string@@Base+0x84>
   1c074:	ldr	r3, [pc, #120]	; 1c0f4 <flatcc_builder_end_string@@Base+0xe4>
   1c078:	add	r3, pc, r3
   1c07c:	movw	r2, #1733	; 0x6c5
   1c080:	ldr	r1, [pc, #112]	; 1c0f8 <flatcc_builder_end_string@@Base+0xe8>
   1c084:	add	r1, pc, r1
   1c088:	ldr	r0, [pc, #108]	; 1c0fc <flatcc_builder_end_string@@Base+0xec>
   1c08c:	add	r0, pc, r0
   1c090:	bl	124b0 <__assert_fail@plt>
   1c094:	ldr	r3, [fp, #-16]
   1c098:	ldr	r1, [r3, #16]
   1c09c:	ldr	r3, [fp, #-16]
   1c0a0:	ldr	r3, [r3, #20]
   1c0a4:	mov	r2, r3
   1c0a8:	ldr	r0, [fp, #-16]
   1c0ac:	bl	1bdbc <flatcc_builder_create_string@@Base>
   1c0b0:	str	r0, [fp, #-8]
   1c0b4:	ldr	r3, [fp, #-8]
   1c0b8:	cmp	r3, #0
   1c0bc:	bne	1c0c8 <flatcc_builder_end_string@@Base+0xb8>
   1c0c0:	mov	r3, #0
   1c0c4:	b	1c0d4 <flatcc_builder_end_string@@Base+0xc4>
   1c0c8:	ldr	r0, [fp, #-16]
   1c0cc:	bl	17d58 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1c0d0:	ldr	r3, [fp, #-8]
   1c0d4:	mov	r0, r3
   1c0d8:	sub	sp, fp, #4
   1c0dc:	ldr	fp, [sp]
   1c0e0:	add	sp, sp, #4
   1c0e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0e8:	andeq	fp, r0, r8, lsr #15
   1c0ec:	ldrdeq	sl, [r0], -r4
   1c0f0:	strheq	fp, [r0], -r0
   1c0f4:	andeq	fp, r0, ip, ror #14
   1c0f8:	muleq	r0, r8, lr
   1c0fc:	andeq	fp, r0, r8, asr #4

0001c100 <flatcc_builder_string_edit@@Base>:
   1c100:	push	{fp}		; (str fp, [sp, #-4]!)
   1c104:	add	fp, sp, #0
   1c108:	sub	sp, sp, #12
   1c10c:	str	r0, [fp, #-8]
   1c110:	ldr	r3, [fp, #-8]
   1c114:	ldr	r3, [r3, #16]
   1c118:	mov	r0, r3
   1c11c:	add	sp, fp, #0
   1c120:	pop	{fp}		; (ldr fp, [sp], #4)
   1c124:	bx	lr

0001c128 <flatcc_builder_string_len@@Base>:
   1c128:	push	{fp}		; (str fp, [sp, #-4]!)
   1c12c:	add	fp, sp, #0
   1c130:	sub	sp, sp, #12
   1c134:	str	r0, [fp, #-8]
   1c138:	ldr	r3, [fp, #-8]
   1c13c:	ldr	r3, [r3, #32]
   1c140:	ldr	r3, [r3, #20]
   1c144:	mov	r0, r3
   1c148:	add	sp, fp, #0
   1c14c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c150:	bx	lr

0001c154 <flatcc_builder_table_add@@Base>:
   1c154:	str	fp, [sp, #-8]!
   1c158:	str	lr, [sp, #4]
   1c15c:	add	fp, sp, #4
   1c160:	sub	sp, sp, #16
   1c164:	str	r0, [fp, #-8]
   1c168:	str	r1, [fp, #-12]
   1c16c:	str	r2, [fp, #-16]
   1c170:	strh	r3, [fp, #-18]	; 0xffffffee
   1c174:	ldr	r3, [fp, #-8]
   1c178:	ldr	r3, [r3, #32]
   1c17c:	ldrh	r3, [r3, #14]
   1c180:	cmp	r3, #3
   1c184:	beq	1c1a8 <flatcc_builder_table_add@@Base+0x54>
   1c188:	ldr	r3, [pc, #284]	; 1c2ac <flatcc_builder_table_add@@Base+0x158>
   1c18c:	add	r3, pc, r3
   1c190:	movw	r2, #1773	; 0x6ed
   1c194:	ldr	r1, [pc, #276]	; 1c2b0 <flatcc_builder_table_add@@Base+0x15c>
   1c198:	add	r1, pc, r1
   1c19c:	ldr	r0, [pc, #272]	; 1c2b4 <flatcc_builder_table_add@@Base+0x160>
   1c1a0:	add	r0, pc, r0
   1c1a4:	bl	124b0 <__assert_fail@plt>
   1c1a8:	ldr	r3, [fp, #-12]
   1c1ac:	cmp	r3, #0
   1c1b0:	blt	1c1c4 <flatcc_builder_table_add@@Base+0x70>
   1c1b4:	ldr	r3, [fp, #-12]
   1c1b8:	movw	r2, #32764	; 0x7ffc
   1c1bc:	cmp	r3, r2
   1c1c0:	ble	1c1e4 <flatcc_builder_table_add@@Base+0x90>
   1c1c4:	ldr	r3, [pc, #236]	; 1c2b8 <flatcc_builder_table_add@@Base+0x164>
   1c1c8:	add	r3, pc, r3
   1c1cc:	movw	r2, #1774	; 0x6ee
   1c1d0:	ldr	r1, [pc, #228]	; 1c2bc <flatcc_builder_table_add@@Base+0x168>
   1c1d4:	add	r1, pc, r1
   1c1d8:	ldr	r0, [pc, #224]	; 1c2c0 <flatcc_builder_table_add@@Base+0x16c>
   1c1dc:	add	r0, pc, r0
   1c1e0:	bl	124b0 <__assert_fail@plt>
   1c1e4:	ldr	r3, [fp, #-8]
   1c1e8:	ldrh	r3, [r3, #130]	; 0x82
   1c1ec:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1c1f0:	cmp	r2, r3
   1c1f4:	bls	1c204 <flatcc_builder_table_add@@Base+0xb0>
   1c1f8:	ldr	r3, [fp, #-8]
   1c1fc:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1c200:	strh	r2, [r3, #130]	; 0x82
   1c204:	ldr	r3, [fp, #-8]
   1c208:	ldr	r2, [r3, #4]
   1c20c:	ldr	r3, [fp, #-12]
   1c210:	lsl	r3, r3, #1
   1c214:	add	r3, r2, r3
   1c218:	ldrh	r3, [r3]
   1c21c:	cmp	r3, #0
   1c220:	beq	1c244 <flatcc_builder_table_add@@Base+0xf0>
   1c224:	ldr	r3, [pc, #152]	; 1c2c4 <flatcc_builder_table_add@@Base+0x170>
   1c228:	add	r3, pc, r3
   1c22c:	movw	r2, #1784	; 0x6f8
   1c230:	ldr	r1, [pc, #144]	; 1c2c8 <flatcc_builder_table_add@@Base+0x174>
   1c234:	add	r1, pc, r1
   1c238:	ldr	r0, [pc, #140]	; 1c2cc <flatcc_builder_table_add@@Base+0x178>
   1c23c:	add	r0, pc, r0
   1c240:	bl	124b0 <__assert_fail@plt>
   1c244:	ldr	r3, [fp, #-8]
   1c248:	ldr	r2, [r3, #12]
   1c24c:	ldr	r3, [fp, #-12]
   1c250:	eor	r2, r2, r3
   1c254:	movw	r3, #31153	; 0x79b1
   1c258:	movt	r3, #40503	; 0x9e37
   1c25c:	mul	r2, r3, r2
   1c260:	ldr	r3, [fp, #-16]
   1c264:	eor	r2, r2, r3
   1c268:	movw	r3, #31153	; 0x79b1
   1c26c:	movt	r3, #40503	; 0x9e37
   1c270:	mul	r2, r3, r2
   1c274:	ldr	r3, [fp, #-8]
   1c278:	str	r2, [r3, #12]
   1c27c:	ldr	r3, [fp, #-12]
   1c280:	uxth	r3, r3
   1c284:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1c288:	ldr	r1, [fp, #-16]
   1c28c:	ldr	r0, [fp, #-8]
   1c290:	bl	16c80 <flatcc_builder_default_alloc@@Base+0x488>
   1c294:	mov	r3, r0
   1c298:	mov	r0, r3
   1c29c:	sub	sp, fp, #4
   1c2a0:	ldr	fp, [sp]
   1c2a4:	add	sp, sp, #4
   1c2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2ac:	andeq	fp, r0, r4, ror r6
   1c2b0:	andeq	sl, r0, r4, lsl #27
   1c2b4:	andeq	fp, r0, ip, lsr r0
   1c2b8:	andeq	fp, r0, r8, lsr r6
   1c2bc:	andeq	sl, r0, r8, asr #26
   1c2c0:	andeq	fp, r0, ip, lsl r1
   1c2c4:	ldrdeq	fp, [r0], -r8
   1c2c8:	andeq	sl, r0, r8, ror #25
   1c2cc:	andeq	sl, r0, r0, asr #26

0001c2d0 <flatcc_builder_table_edit@@Base>:
   1c2d0:	str	fp, [sp, #-8]!
   1c2d4:	str	lr, [sp, #4]
   1c2d8:	add	fp, sp, #4
   1c2dc:	sub	sp, sp, #8
   1c2e0:	str	r0, [fp, #-8]
   1c2e4:	str	r1, [fp, #-12]
   1c2e8:	ldr	r3, [fp, #-8]
   1c2ec:	ldr	r3, [r3, #32]
   1c2f0:	ldrh	r3, [r3, #14]
   1c2f4:	cmp	r3, #3
   1c2f8:	beq	1c31c <flatcc_builder_table_edit@@Base+0x4c>
   1c2fc:	ldr	r3, [pc, #72]	; 1c34c <flatcc_builder_table_edit@@Base+0x7c>
   1c300:	add	r3, pc, r3
   1c304:	movw	r2, #1794	; 0x702
   1c308:	ldr	r1, [pc, #64]	; 1c350 <flatcc_builder_table_edit@@Base+0x80>
   1c30c:	add	r1, pc, r1
   1c310:	ldr	r0, [pc, #60]	; 1c354 <flatcc_builder_table_edit@@Base+0x84>
   1c314:	add	r0, pc, r0
   1c318:	bl	124b0 <__assert_fail@plt>
   1c31c:	ldr	r3, [fp, #-8]
   1c320:	ldr	r2, [r3, #16]
   1c324:	ldr	r3, [fp, #-8]
   1c328:	ldr	r1, [r3, #20]
   1c32c:	ldr	r3, [fp, #-12]
   1c330:	sub	r3, r1, r3
   1c334:	add	r3, r2, r3
   1c338:	mov	r0, r3
   1c33c:	sub	sp, fp, #4
   1c340:	ldr	fp, [sp]
   1c344:	add	sp, sp, #4
   1c348:	pop	{pc}		; (ldr pc, [sp], #4)
   1c34c:	andeq	fp, r0, ip, lsl r5
   1c350:	andeq	sl, r0, r0, lsl ip
   1c354:	andeq	sl, r0, r8, asr #29

0001c358 <flatcc_builder_table_add_copy@@Base>:
   1c358:	str	fp, [sp, #-8]!
   1c35c:	str	lr, [sp, #4]
   1c360:	add	fp, sp, #4
   1c364:	sub	sp, sp, #24
   1c368:	str	r0, [fp, #-16]
   1c36c:	str	r1, [fp, #-20]	; 0xffffffec
   1c370:	str	r2, [fp, #-24]	; 0xffffffe8
   1c374:	str	r3, [fp, #-28]	; 0xffffffe4
   1c378:	ldrh	r3, [fp, #4]
   1c37c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c380:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c384:	ldr	r0, [fp, #-16]
   1c388:	bl	1c154 <flatcc_builder_table_add@@Base>
   1c38c:	str	r0, [fp, #-8]
   1c390:	ldr	r3, [fp, #-8]
   1c394:	cmp	r3, #0
   1c398:	beq	1c3ac <flatcc_builder_table_add_copy@@Base+0x54>
   1c39c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1c3a0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1c3a4:	ldr	r0, [fp, #-8]
   1c3a8:	bl	12408 <memcpy@plt>
   1c3ac:	ldr	r3, [fp, #-8]
   1c3b0:	mov	r0, r3
   1c3b4:	sub	sp, fp, #4
   1c3b8:	ldr	fp, [sp]
   1c3bc:	add	sp, sp, #4
   1c3c0:	pop	{pc}		; (ldr pc, [sp], #4)

0001c3c4 <flatcc_builder_table_add_offset@@Base>:
   1c3c4:	str	fp, [sp, #-8]!
   1c3c8:	str	lr, [sp, #4]
   1c3cc:	add	fp, sp, #4
   1c3d0:	sub	sp, sp, #8
   1c3d4:	str	r0, [fp, #-8]
   1c3d8:	str	r1, [fp, #-12]
   1c3dc:	ldr	r3, [fp, #-8]
   1c3e0:	ldr	r3, [r3, #32]
   1c3e4:	ldrh	r3, [r3, #14]
   1c3e8:	cmp	r3, #3
   1c3ec:	beq	1c410 <flatcc_builder_table_add_offset@@Base+0x4c>
   1c3f0:	ldr	r3, [pc, #244]	; 1c4ec <flatcc_builder_table_add_offset@@Base+0x128>
   1c3f4:	add	r3, pc, r3
   1c3f8:	movw	r2, #1811	; 0x713
   1c3fc:	ldr	r1, [pc, #236]	; 1c4f0 <flatcc_builder_table_add_offset@@Base+0x12c>
   1c400:	add	r1, pc, r1
   1c404:	ldr	r0, [pc, #232]	; 1c4f4 <flatcc_builder_table_add_offset@@Base+0x130>
   1c408:	add	r0, pc, r0
   1c40c:	bl	124b0 <__assert_fail@plt>
   1c410:	ldr	r3, [fp, #-12]
   1c414:	cmp	r3, #0
   1c418:	blt	1c42c <flatcc_builder_table_add_offset@@Base+0x68>
   1c41c:	ldr	r3, [fp, #-12]
   1c420:	movw	r2, #32764	; 0x7ffc
   1c424:	cmp	r3, r2
   1c428:	ble	1c44c <flatcc_builder_table_add_offset@@Base+0x88>
   1c42c:	ldr	r3, [pc, #196]	; 1c4f8 <flatcc_builder_table_add_offset@@Base+0x134>
   1c430:	add	r3, pc, r3
   1c434:	movw	r2, #1812	; 0x714
   1c438:	ldr	r1, [pc, #188]	; 1c4fc <flatcc_builder_table_add_offset@@Base+0x138>
   1c43c:	add	r1, pc, r1
   1c440:	ldr	r0, [pc, #184]	; 1c500 <flatcc_builder_table_add_offset@@Base+0x13c>
   1c444:	add	r0, pc, r0
   1c448:	bl	124b0 <__assert_fail@plt>
   1c44c:	ldr	r3, [fp, #-8]
   1c450:	ldr	r2, [r3, #4]
   1c454:	ldr	r3, [fp, #-12]
   1c458:	lsl	r3, r3, #1
   1c45c:	add	r3, r2, r3
   1c460:	ldrh	r3, [r3]
   1c464:	cmp	r3, #0
   1c468:	beq	1c48c <flatcc_builder_table_add_offset@@Base+0xc8>
   1c46c:	ldr	r3, [pc, #144]	; 1c504 <flatcc_builder_table_add_offset@@Base+0x140>
   1c470:	add	r3, pc, r3
   1c474:	movw	r2, #1819	; 0x71b
   1c478:	ldr	r1, [pc, #136]	; 1c508 <flatcc_builder_table_add_offset@@Base+0x144>
   1c47c:	add	r1, pc, r1
   1c480:	ldr	r0, [pc, #132]	; 1c50c <flatcc_builder_table_add_offset@@Base+0x148>
   1c484:	add	r0, pc, r0
   1c488:	bl	124b0 <__assert_fail@plt>
   1c48c:	ldr	r3, [fp, #-8]
   1c490:	ldr	r2, [r3, #12]
   1c494:	ldr	r3, [fp, #-12]
   1c498:	eor	r2, r2, r3
   1c49c:	movw	r3, #31153	; 0x79b1
   1c4a0:	movt	r3, #40503	; 0x9e37
   1c4a4:	mul	r3, r3, r2
   1c4a8:	eor	r2, r3, #4
   1c4ac:	movw	r3, #31153	; 0x79b1
   1c4b0:	movt	r3, #40503	; 0x9e37
   1c4b4:	mul	r2, r3, r2
   1c4b8:	ldr	r3, [fp, #-8]
   1c4bc:	str	r2, [r3, #12]
   1c4c0:	ldr	r3, [fp, #-12]
   1c4c4:	uxth	r3, r3
   1c4c8:	mov	r1, r3
   1c4cc:	ldr	r0, [fp, #-8]
   1c4d0:	bl	16da4 <flatcc_builder_default_alloc@@Base+0x5ac>
   1c4d4:	mov	r3, r0
   1c4d8:	mov	r0, r3
   1c4dc:	sub	sp, fp, #4
   1c4e0:	ldr	fp, [sp]
   1c4e4:	add	sp, sp, #4
   1c4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4ec:	andeq	fp, r0, r4, asr #8
   1c4f0:	andeq	sl, r0, ip, lsl fp
   1c4f4:	ldrdeq	sl, [r0], -r4
   1c4f8:	andeq	fp, r0, r8, lsl #8
   1c4fc:	andeq	sl, r0, r0, ror #21
   1c500:			; <UNDEFINED> instruction: 0x0000aeb4
   1c504:	andeq	fp, r0, r8, asr #7
   1c508:	andeq	sl, r0, r0, lsr #21
   1c50c:	strdeq	sl, [r0], -r8

0001c510 <flatcc_builder_push_buffer_alignment@@Base>:
   1c510:	push	{fp}		; (str fp, [sp, #-4]!)
   1c514:	add	fp, sp, #0
   1c518:	sub	sp, sp, #20
   1c51c:	str	r0, [fp, #-16]
   1c520:	ldr	r3, [fp, #-16]
   1c524:	ldrh	r3, [r3, #128]	; 0x80
   1c528:	strh	r3, [fp, #-6]
   1c52c:	ldr	r3, [fp, #-16]
   1c530:	mov	r2, #4
   1c534:	strh	r2, [r3, #128]	; 0x80
   1c538:	ldrh	r3, [fp, #-6]
   1c53c:	mov	r0, r3
   1c540:	add	sp, fp, #0
   1c544:	pop	{fp}		; (ldr fp, [sp], #4)
   1c548:	bx	lr

0001c54c <flatcc_builder_pop_buffer_alignment@@Base>:
   1c54c:	str	fp, [sp, #-8]!
   1c550:	str	lr, [sp, #4]
   1c554:	add	fp, sp, #4
   1c558:	sub	sp, sp, #8
   1c55c:	str	r0, [fp, #-8]
   1c560:	mov	r3, r1
   1c564:	strh	r3, [fp, #-10]
   1c568:	ldrh	r3, [fp, #-10]
   1c56c:	mov	r1, r3
   1c570:	ldr	r0, [fp, #-8]
   1c574:	bl	177b0 <flatcc_builder_clear@@Base+0xc4>
   1c578:	nop	{0}
   1c57c:	sub	sp, fp, #4
   1c580:	ldr	fp, [sp]
   1c584:	add	sp, sp, #4
   1c588:	pop	{pc}		; (ldr pc, [sp], #4)

0001c58c <flatcc_builder_get_buffer_alignment@@Base>:
   1c58c:	push	{fp}		; (str fp, [sp, #-4]!)
   1c590:	add	fp, sp, #0
   1c594:	sub	sp, sp, #12
   1c598:	str	r0, [fp, #-8]
   1c59c:	ldr	r3, [fp, #-8]
   1c5a0:	ldrh	r3, [r3, #128]	; 0x80
   1c5a4:	mov	r0, r3
   1c5a8:	add	sp, fp, #0
   1c5ac:	pop	{fp}		; (ldr fp, [sp], #4)
   1c5b0:	bx	lr

0001c5b4 <flatcc_builder_set_vtable_clustering@@Base>:
   1c5b4:	push	{fp}		; (str fp, [sp, #-4]!)
   1c5b8:	add	fp, sp, #0
   1c5bc:	sub	sp, sp, #12
   1c5c0:	str	r0, [fp, #-8]
   1c5c4:	str	r1, [fp, #-12]
   1c5c8:	ldr	r3, [fp, #-12]
   1c5cc:	cmp	r3, #0
   1c5d0:	moveq	r3, #1
   1c5d4:	movne	r3, #0
   1c5d8:	uxtb	r3, r3
   1c5dc:	mov	r2, r3
   1c5e0:	ldr	r3, [fp, #-8]
   1c5e4:	str	r2, [r3, #180]	; 0xb4
   1c5e8:	nop	{0}
   1c5ec:	add	sp, fp, #0
   1c5f0:	pop	{fp}		; (ldr fp, [sp], #4)
   1c5f4:	bx	lr

0001c5f8 <flatcc_builder_set_block_align@@Base>:
   1c5f8:	push	{fp}		; (str fp, [sp, #-4]!)
   1c5fc:	add	fp, sp, #0
   1c600:	sub	sp, sp, #12
   1c604:	str	r0, [fp, #-8]
   1c608:	mov	r3, r1
   1c60c:	strh	r3, [fp, #-10]
   1c610:	ldr	r3, [fp, #-8]
   1c614:	ldrh	r2, [fp, #-10]
   1c618:	strh	r2, [r3, #132]	; 0x84
   1c61c:	nop	{0}
   1c620:	add	sp, fp, #0
   1c624:	pop	{fp}		; (ldr fp, [sp], #4)
   1c628:	bx	lr

0001c62c <flatcc_builder_get_level@@Base>:
   1c62c:	push	{fp}		; (str fp, [sp, #-4]!)
   1c630:	add	fp, sp, #0
   1c634:	sub	sp, sp, #12
   1c638:	str	r0, [fp, #-8]
   1c63c:	ldr	r3, [fp, #-8]
   1c640:	ldr	r3, [r3, #156]	; 0x9c
   1c644:	mov	r0, r3
   1c648:	add	sp, fp, #0
   1c64c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c650:	bx	lr

0001c654 <flatcc_builder_set_max_level@@Base>:
   1c654:	push	{fp}		; (str fp, [sp, #-4]!)
   1c658:	add	fp, sp, #0
   1c65c:	sub	sp, sp, #12
   1c660:	str	r0, [fp, #-8]
   1c664:	str	r1, [fp, #-12]
   1c668:	ldr	r3, [fp, #-8]
   1c66c:	ldr	r2, [fp, #-12]
   1c670:	str	r2, [r3, #176]	; 0xb0
   1c674:	ldr	r3, [fp, #-8]
   1c678:	ldr	r2, [r3, #160]	; 0xa0
   1c67c:	ldr	r3, [fp, #-8]
   1c680:	ldr	r3, [r3, #176]	; 0xb0
   1c684:	cmp	r2, r3
   1c688:	bge	1c69c <flatcc_builder_set_max_level@@Base+0x48>
   1c68c:	ldr	r3, [fp, #-8]
   1c690:	ldr	r2, [r3, #176]	; 0xb0
   1c694:	ldr	r3, [fp, #-8]
   1c698:	str	r2, [r3, #160]	; 0xa0
   1c69c:	nop	{0}
   1c6a0:	add	sp, fp, #0
   1c6a4:	pop	{fp}		; (ldr fp, [sp], #4)
   1c6a8:	bx	lr

0001c6ac <flatcc_builder_get_buffer_size@@Base>:
   1c6ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1c6b0:	add	fp, sp, #0
   1c6b4:	sub	sp, sp, #12
   1c6b8:	str	r0, [fp, #-8]
   1c6bc:	ldr	r3, [fp, #-8]
   1c6c0:	ldr	r2, [r3, #140]	; 0x8c
   1c6c4:	ldr	r3, [fp, #-8]
   1c6c8:	ldr	r3, [r3, #136]	; 0x88
   1c6cc:	sub	r3, r2, r3
   1c6d0:	mov	r0, r3
   1c6d4:	add	sp, fp, #0
   1c6d8:	pop	{fp}		; (ldr fp, [sp], #4)
   1c6dc:	bx	lr

0001c6e0 <flatcc_builder_get_buffer_start@@Base>:
   1c6e0:	push	{fp}		; (str fp, [sp, #-4]!)
   1c6e4:	add	fp, sp, #0
   1c6e8:	sub	sp, sp, #12
   1c6ec:	str	r0, [fp, #-8]
   1c6f0:	ldr	r3, [fp, #-8]
   1c6f4:	ldr	r3, [r3, #136]	; 0x88
   1c6f8:	mov	r0, r3
   1c6fc:	add	sp, fp, #0
   1c700:	pop	{fp}		; (ldr fp, [sp], #4)
   1c704:	bx	lr

0001c708 <flatcc_builder_get_buffer_end@@Base>:
   1c708:	push	{fp}		; (str fp, [sp, #-4]!)
   1c70c:	add	fp, sp, #0
   1c710:	sub	sp, sp, #12
   1c714:	str	r0, [fp, #-8]
   1c718:	ldr	r3, [fp, #-8]
   1c71c:	ldr	r3, [r3, #140]	; 0x8c
   1c720:	mov	r0, r3
   1c724:	add	sp, fp, #0
   1c728:	pop	{fp}		; (ldr fp, [sp], #4)
   1c72c:	bx	lr

0001c730 <flatcc_builder_set_vtable_cache_limit@@Base>:
   1c730:	push	{fp}		; (str fp, [sp, #-4]!)
   1c734:	add	fp, sp, #0
   1c738:	sub	sp, sp, #12
   1c73c:	str	r0, [fp, #-8]
   1c740:	str	r1, [fp, #-12]
   1c744:	ldr	r3, [fp, #-8]
   1c748:	ldr	r2, [fp, #-12]
   1c74c:	str	r2, [r3, #172]	; 0xac
   1c750:	nop	{0}
   1c754:	add	sp, fp, #0
   1c758:	pop	{fp}		; (ldr fp, [sp], #4)
   1c75c:	bx	lr

0001c760 <flatcc_builder_set_identifier@@Base>:
   1c760:	push	{fp}		; (str fp, [sp, #-4]!)
   1c764:	add	fp, sp, #0
   1c768:	sub	sp, sp, #12
   1c76c:	str	r0, [fp, #-8]
   1c770:	str	r1, [fp, #-12]
   1c774:	ldr	r1, [pc, #60]	; 1c7b8 <flatcc_builder_set_identifier@@Base+0x58>
   1c778:	add	r1, pc, r1
   1c77c:	ldr	r3, [fp, #-8]
   1c780:	add	r2, r3, #168	; 0xa8
   1c784:	ldr	r3, [fp, #-12]
   1c788:	cmp	r3, #0
   1c78c:	beq	1c798 <flatcc_builder_set_identifier@@Base+0x38>
   1c790:	ldr	r3, [fp, #-12]
   1c794:	b	1c7a0 <flatcc_builder_set_identifier@@Base+0x40>
   1c798:	ldr	r3, [pc, #28]	; 1c7bc <flatcc_builder_set_identifier@@Base+0x5c>
   1c79c:	ldr	r3, [r1, r3]
   1c7a0:	ldr	r3, [r3]
   1c7a4:	str	r3, [r2]
   1c7a8:	nop	{0}
   1c7ac:	add	sp, fp, #0
   1c7b0:	pop	{fp}		; (ldr fp, [sp], #4)
   1c7b4:	bx	lr
   1c7b8:	andeq	ip, r1, r0, lsl #17
   1c7bc:	andeq	r0, r0, r0, asr r0

0001c7c0 <flatcc_builder_get_type@@Base>:
   1c7c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1c7c4:	add	fp, sp, #0
   1c7c8:	sub	sp, sp, #12
   1c7cc:	str	r0, [fp, #-8]
   1c7d0:	ldr	r3, [fp, #-8]
   1c7d4:	ldr	r3, [r3, #32]
   1c7d8:	cmp	r3, #0
   1c7dc:	beq	1c7f0 <flatcc_builder_get_type@@Base+0x30>
   1c7e0:	ldr	r3, [fp, #-8]
   1c7e4:	ldr	r3, [r3, #32]
   1c7e8:	ldrh	r3, [r3, #14]
   1c7ec:	b	1c7f4 <flatcc_builder_get_type@@Base+0x34>
   1c7f0:	mov	r3, #0
   1c7f4:	mov	r0, r3
   1c7f8:	add	sp, fp, #0
   1c7fc:	pop	{fp}		; (ldr fp, [sp], #4)
   1c800:	bx	lr

0001c804 <flatcc_builder_get_type_at@@Base>:
   1c804:	push	{fp}		; (str fp, [sp, #-4]!)
   1c808:	add	fp, sp, #0
   1c80c:	sub	sp, sp, #12
   1c810:	str	r0, [fp, #-8]
   1c814:	str	r1, [fp, #-12]
   1c818:	ldr	r3, [fp, #-12]
   1c81c:	cmp	r3, #0
   1c820:	ble	1c838 <flatcc_builder_get_type_at@@Base+0x34>
   1c824:	ldr	r3, [fp, #-8]
   1c828:	ldr	r3, [r3, #156]	; 0x9c
   1c82c:	ldr	r2, [fp, #-12]
   1c830:	cmp	r2, r3
   1c834:	ble	1c840 <flatcc_builder_get_type_at@@Base+0x3c>
   1c838:	mov	r3, #0
   1c83c:	b	1c874 <flatcc_builder_get_type_at@@Base+0x70>
   1c840:	ldr	r3, [fp, #-8]
   1c844:	ldr	r2, [r3, #32]
   1c848:	ldr	r3, [fp, #-8]
   1c84c:	ldr	r3, [r3, #156]	; 0x9c
   1c850:	ldr	r1, [fp, #-12]
   1c854:	sub	r3, r1, r3
   1c858:	mov	r1, r3
   1c85c:	mov	r3, r1
   1c860:	lsl	r3, r3, #3
   1c864:	add	r3, r3, r1
   1c868:	lsl	r3, r3, #2
   1c86c:	add	r3, r2, r3
   1c870:	ldrh	r3, [r3, #14]
   1c874:	mov	r0, r3
   1c878:	add	sp, fp, #0
   1c87c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c880:	bx	lr

0001c884 <flatcc_builder_get_direct_buffer@@Base>:
   1c884:	str	fp, [sp, #-8]!
   1c888:	str	lr, [sp, #4]
   1c88c:	add	fp, sp, #4
   1c890:	sub	sp, sp, #8
   1c894:	str	r0, [fp, #-8]
   1c898:	str	r1, [fp, #-12]
   1c89c:	ldr	r3, [fp, #-8]
   1c8a0:	ldr	r3, [r3, #184]	; 0xb8
   1c8a4:	cmp	r3, #0
   1c8a8:	beq	1c8c8 <flatcc_builder_get_direct_buffer@@Base+0x44>
   1c8ac:	ldr	r3, [fp, #-8]
   1c8b0:	add	r3, r3, #188	; 0xbc
   1c8b4:	ldr	r1, [fp, #-12]
   1c8b8:	mov	r0, r3
   1c8bc:	bl	16718 <main@@Base+0x184>
   1c8c0:	mov	r3, r0
   1c8c4:	b	1c8e4 <flatcc_builder_get_direct_buffer@@Base+0x60>
   1c8c8:	ldr	r3, [fp, #-12]
   1c8cc:	cmp	r3, #0
   1c8d0:	beq	1c8e0 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   1c8d4:	ldr	r3, [fp, #-12]
   1c8d8:	mov	r2, #0
   1c8dc:	str	r2, [r3]
   1c8e0:	mov	r3, #0
   1c8e4:	mov	r0, r3
   1c8e8:	sub	sp, fp, #4
   1c8ec:	ldr	fp, [sp]
   1c8f0:	add	sp, sp, #4
   1c8f4:	pop	{pc}		; (ldr pc, [sp], #4)

0001c8f8 <flatcc_builder_copy_buffer@@Base>:
   1c8f8:	str	fp, [sp, #-8]!
   1c8fc:	str	lr, [sp, #4]
   1c900:	add	fp, sp, #4
   1c904:	sub	sp, sp, #16
   1c908:	str	r0, [fp, #-8]
   1c90c:	str	r1, [fp, #-12]
   1c910:	str	r2, [fp, #-16]
   1c914:	ldr	r3, [fp, #-8]
   1c918:	ldr	r3, [r3, #184]	; 0xb8
   1c91c:	cmp	r3, #0
   1c920:	bne	1c92c <flatcc_builder_copy_buffer@@Base+0x34>
   1c924:	mov	r3, #0
   1c928:	b	1c978 <flatcc_builder_copy_buffer@@Base+0x80>
   1c92c:	ldr	r3, [fp, #-8]
   1c930:	add	r3, r3, #188	; 0xbc
   1c934:	ldr	r2, [fp, #-16]
   1c938:	ldr	r1, [fp, #-12]
   1c93c:	mov	r0, r3
   1c940:	bl	1d74c <flatcc_emitter_copy_buffer@@Base>
   1c944:	str	r0, [fp, #-12]
   1c948:	ldr	r3, [fp, #-12]
   1c94c:	cmp	r3, #0
   1c950:	bne	1c974 <flatcc_builder_copy_buffer@@Base+0x7c>
   1c954:	ldr	r3, [pc, #48]	; 1c98c <flatcc_builder_copy_buffer@@Base+0x94>
   1c958:	add	r3, pc, r3
   1c95c:	movw	r2, #1926	; 0x786
   1c960:	ldr	r1, [pc, #40]	; 1c990 <flatcc_builder_copy_buffer@@Base+0x98>
   1c964:	add	r1, pc, r1
   1c968:	ldr	r0, [pc, #36]	; 1c994 <flatcc_builder_copy_buffer@@Base+0x9c>
   1c96c:	add	r0, pc, r0
   1c970:	bl	124b0 <__assert_fail@plt>
   1c974:	ldr	r3, [fp, #-12]
   1c978:	mov	r0, r3
   1c97c:	sub	sp, fp, #4
   1c980:	ldr	fp, [sp]
   1c984:	add	sp, sp, #4
   1c988:	pop	{pc}		; (ldr pc, [sp], #4)
   1c98c:	andeq	sl, r0, r0, lsl #30
   1c990:			; <UNDEFINED> instruction: 0x0000a5b8
   1c994:	ldrdeq	sl, [r0], -r0

0001c998 <flatcc_builder_finalize_buffer@@Base>:
   1c998:	str	fp, [sp, #-8]!
   1c99c:	str	lr, [sp, #4]
   1c9a0:	add	fp, sp, #4
   1c9a4:	sub	sp, sp, #16
   1c9a8:	str	r0, [fp, #-16]
   1c9ac:	str	r1, [fp, #-20]	; 0xffffffec
   1c9b0:	ldr	r0, [fp, #-16]
   1c9b4:	bl	1c6ac <flatcc_builder_get_buffer_size@@Base>
   1c9b8:	str	r0, [fp, #-8]
   1c9bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c9c0:	cmp	r3, #0
   1c9c4:	beq	1c9d4 <flatcc_builder_finalize_buffer@@Base+0x3c>
   1c9c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c9cc:	ldr	r2, [fp, #-8]
   1c9d0:	str	r2, [r3]
   1c9d4:	ldr	r0, [fp, #-8]
   1c9d8:	bl	12438 <malloc@plt>
   1c9dc:	mov	r3, r0
   1c9e0:	str	r3, [fp, #-12]
   1c9e4:	ldr	r3, [fp, #-12]
   1c9e8:	cmp	r3, #0
   1c9ec:	bne	1ca10 <flatcc_builder_finalize_buffer@@Base+0x78>
   1c9f0:	ldr	r3, [pc, #148]	; 1ca8c <flatcc_builder_finalize_buffer@@Base+0xf4>
   1c9f4:	add	r3, pc, r3
   1c9f8:	movw	r2, #1944	; 0x798
   1c9fc:	ldr	r1, [pc, #140]	; 1ca90 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1ca00:	add	r1, pc, r1
   1ca04:	ldr	r0, [pc, #136]	; 1ca94 <flatcc_builder_finalize_buffer@@Base+0xfc>
   1ca08:	add	r0, pc, r0
   1ca0c:	bl	124b0 <__assert_fail@plt>
   1ca10:	ldr	r2, [fp, #-8]
   1ca14:	ldr	r1, [fp, #-12]
   1ca18:	ldr	r0, [fp, #-16]
   1ca1c:	bl	1c8f8 <flatcc_builder_copy_buffer@@Base>
   1ca20:	mov	r3, r0
   1ca24:	cmp	r3, #0
   1ca28:	bne	1ca4c <flatcc_builder_finalize_buffer@@Base+0xb4>
   1ca2c:	ldr	r3, [pc, #100]	; 1ca98 <flatcc_builder_finalize_buffer@@Base+0x100>
   1ca30:	add	r3, pc, r3
   1ca34:	movw	r2, #1948	; 0x79c
   1ca38:	ldr	r1, [pc, #92]	; 1ca9c <flatcc_builder_finalize_buffer@@Base+0x104>
   1ca3c:	add	r1, pc, r1
   1ca40:	ldr	r0, [pc, #88]	; 1caa0 <flatcc_builder_finalize_buffer@@Base+0x108>
   1ca44:	add	r0, pc, r0
   1ca48:	bl	124b0 <__assert_fail@plt>
   1ca4c:	nop	{0}
   1ca50:	ldr	r3, [fp, #-12]
   1ca54:	cmp	r3, #0
   1ca58:	bne	1ca74 <flatcc_builder_finalize_buffer@@Base+0xdc>
   1ca5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca60:	cmp	r3, #0
   1ca64:	beq	1ca74 <flatcc_builder_finalize_buffer@@Base+0xdc>
   1ca68:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ca6c:	mov	r2, #0
   1ca70:	str	r2, [r3]
   1ca74:	ldr	r3, [fp, #-12]
   1ca78:	mov	r0, r3
   1ca7c:	sub	sp, fp, #4
   1ca80:	ldr	fp, [sp]
   1ca84:	add	sp, sp, #4
   1ca88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca8c:	andeq	sl, r0, r0, lsl #29
   1ca90:	andeq	sl, r0, ip, lsl r5
   1ca94:	andeq	sl, r0, r4, ror r5
   1ca98:	andeq	sl, r0, r4, asr #28
   1ca9c:	andeq	sl, r0, r0, ror #9
   1caa0:	andeq	sl, r0, r8, lsr r5

0001caa4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1caa4:	str	fp, [sp, #-8]!
   1caa8:	str	lr, [sp, #4]
   1caac:	add	fp, sp, #4
   1cab0:	sub	sp, sp, #24
   1cab4:	str	r0, [fp, #-24]	; 0xffffffe8
   1cab8:	str	r1, [fp, #-28]	; 0xffffffe4
   1cabc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cac0:	bl	1c6ac <flatcc_builder_get_buffer_size@@Base>
   1cac4:	str	r0, [fp, #-12]
   1cac8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cacc:	cmp	r3, #0
   1cad0:	beq	1cae0 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   1cad4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cad8:	ldr	r2, [fp, #-12]
   1cadc:	str	r2, [r3]
   1cae0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cae4:	bl	1c58c <flatcc_builder_get_buffer_alignment@@Base>
   1cae8:	mov	r3, r0
   1caec:	str	r3, [fp, #-16]
   1caf0:	ldr	r2, [fp, #-12]
   1caf4:	ldr	r3, [fp, #-16]
   1caf8:	add	r3, r2, r3
   1cafc:	sub	r2, r3, #1
   1cb00:	ldr	r3, [fp, #-16]
   1cb04:	rsb	r3, r3, #0
   1cb08:	and	r3, r3, r2
   1cb0c:	str	r3, [fp, #-12]
   1cb10:	ldr	r1, [fp, #-12]
   1cb14:	ldr	r0, [fp, #-16]
   1cb18:	bl	16618 <main@@Base+0x84>
   1cb1c:	str	r0, [fp, #-8]
   1cb20:	ldr	r3, [fp, #-8]
   1cb24:	cmp	r3, #0
   1cb28:	beq	1cb5c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1cb2c:	ldr	r2, [fp, #-12]
   1cb30:	ldr	r1, [fp, #-8]
   1cb34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cb38:	bl	1c8f8 <flatcc_builder_copy_buffer@@Base>
   1cb3c:	mov	r3, r0
   1cb40:	cmp	r3, #0
   1cb44:	bne	1cb64 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   1cb48:	ldr	r0, [fp, #-8]
   1cb4c:	bl	123fc <free@plt>
   1cb50:	mov	r3, #0
   1cb54:	str	r3, [fp, #-8]
   1cb58:	b	1cb68 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   1cb5c:	nop	{0}
   1cb60:	b	1cb68 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   1cb64:	nop	{0}
   1cb68:	ldr	r3, [fp, #-8]
   1cb6c:	cmp	r3, #0
   1cb70:	bne	1cb8c <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   1cb74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cb78:	cmp	r3, #0
   1cb7c:	beq	1cb8c <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   1cb80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cb84:	mov	r2, #0
   1cb88:	str	r2, [r3]
   1cb8c:	ldr	r3, [fp, #-8]
   1cb90:	mov	r0, r3
   1cb94:	sub	sp, fp, #4
   1cb98:	ldr	fp, [sp]
   1cb9c:	add	sp, sp, #4
   1cba0:	pop	{pc}		; (ldr pc, [sp], #4)

0001cba4 <flatcc_builder_aligned_alloc@@Base>:
   1cba4:	str	fp, [sp, #-8]!
   1cba8:	str	lr, [sp, #4]
   1cbac:	add	fp, sp, #4
   1cbb0:	sub	sp, sp, #8
   1cbb4:	str	r0, [fp, #-8]
   1cbb8:	str	r1, [fp, #-12]
   1cbbc:	ldr	r1, [fp, #-12]
   1cbc0:	ldr	r0, [fp, #-8]
   1cbc4:	bl	16618 <main@@Base+0x84>
   1cbc8:	mov	r3, r0
   1cbcc:	mov	r0, r3
   1cbd0:	sub	sp, fp, #4
   1cbd4:	ldr	fp, [sp]
   1cbd8:	add	sp, sp, #4
   1cbdc:	pop	{pc}		; (ldr pc, [sp], #4)

0001cbe0 <flatcc_builder_aligned_free@@Base>:
   1cbe0:	str	fp, [sp, #-8]!
   1cbe4:	str	lr, [sp, #4]
   1cbe8:	add	fp, sp, #4
   1cbec:	sub	sp, sp, #8
   1cbf0:	str	r0, [fp, #-8]
   1cbf4:	ldr	r0, [fp, #-8]
   1cbf8:	bl	123fc <free@plt>
   1cbfc:	nop	{0}
   1cc00:	sub	sp, fp, #4
   1cc04:	ldr	fp, [sp]
   1cc08:	add	sp, sp, #4
   1cc0c:	pop	{pc}		; (ldr pc, [sp], #4)

0001cc10 <flatcc_builder_get_emit_context@@Base>:
   1cc10:	push	{fp}		; (str fp, [sp, #-4]!)
   1cc14:	add	fp, sp, #0
   1cc18:	sub	sp, sp, #12
   1cc1c:	str	r0, [fp, #-8]
   1cc20:	ldr	r3, [fp, #-8]
   1cc24:	ldr	r3, [r3, #36]	; 0x24
   1cc28:	mov	r0, r3
   1cc2c:	add	sp, fp, #0
   1cc30:	pop	{fp}		; (ldr fp, [sp], #4)
   1cc34:	bx	lr
   1cc38:	str	fp, [sp, #-8]!
   1cc3c:	str	lr, [sp, #4]
   1cc40:	add	fp, sp, #4
   1cc44:	sub	sp, sp, #16
   1cc48:	str	r0, [fp, #-16]
   1cc4c:	mov	r3, #0
   1cc50:	str	r3, [fp, #-8]
   1cc54:	ldr	r3, [fp, #-16]
   1cc58:	ldr	r3, [r3]
   1cc5c:	cmp	r3, #0
   1cc60:	beq	1ccb8 <flatcc_builder_get_emit_context@@Base+0xa8>
   1cc64:	ldr	r3, [fp, #-16]
   1cc68:	ldr	r3, [r3]
   1cc6c:	ldr	r2, [r3, #2948]	; 0xb84
   1cc70:	ldr	r3, [fp, #-16]
   1cc74:	ldr	r3, [r3, #4]
   1cc78:	cmp	r2, r3
   1cc7c:	beq	1ccb8 <flatcc_builder_get_emit_context@@Base+0xa8>
   1cc80:	ldr	r3, [fp, #-16]
   1cc84:	ldr	r3, [r3]
   1cc88:	ldr	r2, [r3, #2952]	; 0xb88
   1cc8c:	ldr	r3, [fp, #-16]
   1cc90:	ldr	r3, [r3]
   1cc94:	ldr	r3, [r3, #2948]	; 0xb84
   1cc98:	sub	r2, r2, #2944	; 0xb80
   1cc9c:	str	r2, [r3, #2952]	; 0xb88
   1cca0:	ldr	r3, [fp, #-16]
   1cca4:	ldr	r3, [r3]
   1cca8:	ldr	r2, [r3, #2948]	; 0xb84
   1ccac:	ldr	r3, [fp, #-16]
   1ccb0:	str	r2, [r3]
   1ccb4:	b	1cde0 <flatcc_builder_get_emit_context@@Base+0x1d0>
   1ccb8:	movw	r0, #2956	; 0xb8c
   1ccbc:	bl	12438 <malloc@plt>
   1ccc0:	mov	r3, r0
   1ccc4:	str	r3, [fp, #-8]
   1ccc8:	ldr	r3, [fp, #-8]
   1cccc:	cmp	r3, #0
   1ccd0:	bne	1ccdc <flatcc_builder_get_emit_context@@Base+0xcc>
   1ccd4:	mvn	r3, #0
   1ccd8:	b	1ce24 <flatcc_builder_get_emit_context@@Base+0x214>
   1ccdc:	ldr	r3, [fp, #-16]
   1cce0:	ldr	r3, [r3, #28]
   1cce4:	add	r2, r3, #2944	; 0xb80
   1cce8:	ldr	r3, [fp, #-16]
   1ccec:	str	r2, [r3, #28]
   1ccf0:	ldr	r3, [fp, #-16]
   1ccf4:	ldr	r3, [r3]
   1ccf8:	cmp	r3, #0
   1ccfc:	beq	1cd50 <flatcc_builder_get_emit_context@@Base+0x140>
   1cd00:	ldr	r3, [fp, #-16]
   1cd04:	ldr	r2, [r3, #4]
   1cd08:	ldr	r3, [fp, #-8]
   1cd0c:	str	r2, [r3, #2948]	; 0xb84
   1cd10:	ldr	r3, [fp, #-16]
   1cd14:	ldr	r2, [r3]
   1cd18:	ldr	r3, [fp, #-8]
   1cd1c:	str	r2, [r3, #2944]	; 0xb80
   1cd20:	ldr	r3, [fp, #-16]
   1cd24:	ldr	r3, [r3]
   1cd28:	ldr	r2, [fp, #-8]
   1cd2c:	str	r2, [r3, #2948]	; 0xb84
   1cd30:	ldr	r3, [fp, #-16]
   1cd34:	ldr	r3, [r3, #4]
   1cd38:	ldr	r2, [fp, #-8]
   1cd3c:	str	r2, [r3, #2944]	; 0xb80
   1cd40:	ldr	r3, [fp, #-16]
   1cd44:	ldr	r2, [fp, #-8]
   1cd48:	str	r2, [r3]
   1cd4c:	b	1cde0 <flatcc_builder_get_emit_context@@Base+0x1d0>
   1cd50:	ldr	r3, [fp, #-16]
   1cd54:	ldr	r2, [fp, #-8]
   1cd58:	str	r2, [r3]
   1cd5c:	ldr	r3, [fp, #-16]
   1cd60:	ldr	r2, [fp, #-8]
   1cd64:	str	r2, [r3, #4]
   1cd68:	ldr	r3, [fp, #-8]
   1cd6c:	ldr	r2, [fp, #-8]
   1cd70:	str	r2, [r3, #2944]	; 0xb80
   1cd74:	ldr	r3, [fp, #-8]
   1cd78:	ldr	r2, [fp, #-8]
   1cd7c:	str	r2, [r3, #2948]	; 0xb84
   1cd80:	ldr	r3, [fp, #-16]
   1cd84:	ldr	r3, [r3]
   1cd88:	add	r2, r3, #1472	; 0x5c0
   1cd8c:	ldr	r3, [fp, #-16]
   1cd90:	str	r2, [r3, #8]
   1cd94:	ldr	r3, [fp, #-16]
   1cd98:	ldr	r2, [r3, #8]
   1cd9c:	ldr	r3, [fp, #-16]
   1cda0:	str	r2, [r3, #16]
   1cda4:	ldr	r3, [fp, #-16]
   1cda8:	mov	r2, #1472	; 0x5c0
   1cdac:	str	r2, [r3, #12]
   1cdb0:	ldr	r3, [fp, #-16]
   1cdb4:	ldr	r3, [r3, #12]
   1cdb8:	rsb	r2, r3, #2944	; 0xb80
   1cdbc:	ldr	r3, [fp, #-16]
   1cdc0:	str	r2, [r3, #20]
   1cdc4:	ldr	r3, [fp, #-16]
   1cdc8:	ldr	r3, [r3, #12]
   1cdcc:	rsb	r2, r3, #0
   1cdd0:	ldr	r3, [fp, #-8]
   1cdd4:	str	r2, [r3, #2952]	; 0xb88
   1cdd8:	mov	r3, #0
   1cddc:	b	1ce24 <flatcc_builder_get_emit_context@@Base+0x214>
   1cde0:	ldr	r3, [fp, #-16]
   1cde4:	ldr	r3, [r3]
   1cde8:	add	r2, r3, #2944	; 0xb80
   1cdec:	ldr	r3, [fp, #-16]
   1cdf0:	str	r2, [r3, #8]
   1cdf4:	ldr	r3, [fp, #-16]
   1cdf8:	mov	r2, #2944	; 0xb80
   1cdfc:	str	r2, [r3, #12]
   1ce00:	ldr	r3, [fp, #-16]
   1ce04:	ldr	r3, [r3]
   1ce08:	ldr	r3, [r3, #2944]	; 0xb80
   1ce0c:	ldr	r2, [r3, #2952]	; 0xb88
   1ce10:	ldr	r3, [fp, #-16]
   1ce14:	ldr	r3, [r3]
   1ce18:	sub	r2, r2, #2944	; 0xb80
   1ce1c:	str	r2, [r3, #2952]	; 0xb88
   1ce20:	mov	r3, #0
   1ce24:	mov	r0, r3
   1ce28:	sub	sp, fp, #4
   1ce2c:	ldr	fp, [sp]
   1ce30:	add	sp, sp, #4
   1ce34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce38:	str	fp, [sp, #-8]!
   1ce3c:	str	lr, [sp, #4]
   1ce40:	add	fp, sp, #4
   1ce44:	sub	sp, sp, #16
   1ce48:	str	r0, [fp, #-16]
   1ce4c:	mov	r3, #0
   1ce50:	str	r3, [fp, #-8]
   1ce54:	ldr	r3, [fp, #-16]
   1ce58:	ldr	r3, [r3, #4]
   1ce5c:	cmp	r3, #0
   1ce60:	beq	1ce98 <flatcc_builder_get_emit_context@@Base+0x288>
   1ce64:	ldr	r3, [fp, #-16]
   1ce68:	ldr	r3, [r3, #4]
   1ce6c:	ldr	r2, [r3, #2944]	; 0xb80
   1ce70:	ldr	r3, [fp, #-16]
   1ce74:	ldr	r3, [r3]
   1ce78:	cmp	r2, r3
   1ce7c:	beq	1ce98 <flatcc_builder_get_emit_context@@Base+0x288>
   1ce80:	ldr	r3, [fp, #-16]
   1ce84:	ldr	r3, [r3, #4]
   1ce88:	ldr	r2, [r3, #2944]	; 0xb80
   1ce8c:	ldr	r3, [fp, #-16]
   1ce90:	str	r2, [r3, #4]
   1ce94:	b	1cfc0 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1ce98:	movw	r0, #2956	; 0xb8c
   1ce9c:	bl	12438 <malloc@plt>
   1cea0:	mov	r3, r0
   1cea4:	str	r3, [fp, #-8]
   1cea8:	ldr	r3, [fp, #-8]
   1ceac:	cmp	r3, #0
   1ceb0:	bne	1cebc <flatcc_builder_get_emit_context@@Base+0x2ac>
   1ceb4:	mvn	r3, #0
   1ceb8:	b	1d004 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1cebc:	ldr	r3, [fp, #-16]
   1cec0:	ldr	r3, [r3, #28]
   1cec4:	add	r2, r3, #2944	; 0xb80
   1cec8:	ldr	r3, [fp, #-16]
   1cecc:	str	r2, [r3, #28]
   1ced0:	ldr	r3, [fp, #-16]
   1ced4:	ldr	r3, [r3, #4]
   1ced8:	cmp	r3, #0
   1cedc:	beq	1cf30 <flatcc_builder_get_emit_context@@Base+0x320>
   1cee0:	ldr	r3, [fp, #-16]
   1cee4:	ldr	r2, [r3, #4]
   1cee8:	ldr	r3, [fp, #-8]
   1ceec:	str	r2, [r3, #2948]	; 0xb84
   1cef0:	ldr	r3, [fp, #-16]
   1cef4:	ldr	r2, [r3]
   1cef8:	ldr	r3, [fp, #-8]
   1cefc:	str	r2, [r3, #2944]	; 0xb80
   1cf00:	ldr	r3, [fp, #-16]
   1cf04:	ldr	r3, [r3]
   1cf08:	ldr	r2, [fp, #-8]
   1cf0c:	str	r2, [r3, #2948]	; 0xb84
   1cf10:	ldr	r3, [fp, #-16]
   1cf14:	ldr	r3, [r3, #4]
   1cf18:	ldr	r2, [fp, #-8]
   1cf1c:	str	r2, [r3, #2944]	; 0xb80
   1cf20:	ldr	r3, [fp, #-16]
   1cf24:	ldr	r2, [fp, #-8]
   1cf28:	str	r2, [r3, #4]
   1cf2c:	b	1cfc0 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1cf30:	ldr	r3, [fp, #-16]
   1cf34:	ldr	r2, [fp, #-8]
   1cf38:	str	r2, [r3]
   1cf3c:	ldr	r3, [fp, #-16]
   1cf40:	ldr	r2, [fp, #-8]
   1cf44:	str	r2, [r3, #4]
   1cf48:	ldr	r3, [fp, #-8]
   1cf4c:	ldr	r2, [fp, #-8]
   1cf50:	str	r2, [r3, #2944]	; 0xb80
   1cf54:	ldr	r3, [fp, #-8]
   1cf58:	ldr	r2, [fp, #-8]
   1cf5c:	str	r2, [r3, #2948]	; 0xb84
   1cf60:	ldr	r3, [fp, #-16]
   1cf64:	ldr	r3, [r3]
   1cf68:	add	r2, r3, #1472	; 0x5c0
   1cf6c:	ldr	r3, [fp, #-16]
   1cf70:	str	r2, [r3, #8]
   1cf74:	ldr	r3, [fp, #-16]
   1cf78:	ldr	r2, [r3, #8]
   1cf7c:	ldr	r3, [fp, #-16]
   1cf80:	str	r2, [r3, #16]
   1cf84:	ldr	r3, [fp, #-16]
   1cf88:	mov	r2, #1472	; 0x5c0
   1cf8c:	str	r2, [r3, #12]
   1cf90:	ldr	r3, [fp, #-16]
   1cf94:	ldr	r3, [r3, #12]
   1cf98:	rsb	r2, r3, #2944	; 0xb80
   1cf9c:	ldr	r3, [fp, #-16]
   1cfa0:	str	r2, [r3, #20]
   1cfa4:	ldr	r3, [fp, #-16]
   1cfa8:	ldr	r3, [r3, #12]
   1cfac:	rsb	r2, r3, #0
   1cfb0:	ldr	r3, [fp, #-8]
   1cfb4:	str	r2, [r3, #2952]	; 0xb88
   1cfb8:	mov	r3, #0
   1cfbc:	b	1d004 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1cfc0:	ldr	r3, [fp, #-16]
   1cfc4:	ldr	r3, [r3, #4]
   1cfc8:	mov	r2, r3
   1cfcc:	ldr	r3, [fp, #-16]
   1cfd0:	str	r2, [r3, #16]
   1cfd4:	ldr	r3, [fp, #-16]
   1cfd8:	mov	r2, #2944	; 0xb80
   1cfdc:	str	r2, [r3, #20]
   1cfe0:	ldr	r3, [fp, #-16]
   1cfe4:	ldr	r3, [r3, #4]
   1cfe8:	ldr	r3, [r3, #2948]	; 0xb84
   1cfec:	ldr	r2, [r3, #2952]	; 0xb88
   1cff0:	ldr	r3, [fp, #-16]
   1cff4:	ldr	r3, [r3, #4]
   1cff8:	add	r2, r2, #2944	; 0xb80
   1cffc:	str	r2, [r3, #2952]	; 0xb88
   1d000:	mov	r3, #0
   1d004:	mov	r0, r3
   1d008:	sub	sp, fp, #4
   1d00c:	ldr	fp, [sp]
   1d010:	add	sp, sp, #4
   1d014:	pop	{pc}		; (ldr pc, [sp], #4)
   1d018:	str	fp, [sp, #-8]!
   1d01c:	str	lr, [sp, #4]
   1d020:	add	fp, sp, #4
   1d024:	sub	sp, sp, #24
   1d028:	str	r0, [fp, #-16]
   1d02c:	str	r1, [fp, #-20]	; 0xffffffec
   1d030:	str	r2, [fp, #-24]	; 0xffffffe8
   1d034:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d03c:	add	r3, r2, r3
   1d040:	str	r3, [fp, #-20]	; 0xffffffec
   1d044:	b	1d108 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1d048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d04c:	str	r3, [fp, #-8]
   1d050:	ldr	r3, [fp, #-16]
   1d054:	ldr	r3, [r3, #12]
   1d058:	ldr	r2, [fp, #-8]
   1d05c:	cmp	r2, r3
   1d060:	bls	1d098 <flatcc_builder_get_emit_context@@Base+0x488>
   1d064:	ldr	r3, [fp, #-16]
   1d068:	ldr	r3, [r3, #12]
   1d06c:	str	r3, [fp, #-8]
   1d070:	ldr	r3, [fp, #-8]
   1d074:	cmp	r3, #0
   1d078:	bne	1d098 <flatcc_builder_get_emit_context@@Base+0x488>
   1d07c:	ldr	r0, [fp, #-16]
   1d080:	bl	1cc38 <flatcc_builder_get_emit_context@@Base+0x28>
   1d084:	mov	r3, r0
   1d088:	cmp	r3, #0
   1d08c:	beq	1d108 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1d090:	mvn	r3, #0
   1d094:	b	1d118 <flatcc_builder_get_emit_context@@Base+0x508>
   1d098:	ldr	r3, [fp, #-16]
   1d09c:	ldr	r2, [r3, #8]
   1d0a0:	ldr	r3, [fp, #-8]
   1d0a4:	rsb	r3, r3, #0
   1d0a8:	add	r2, r2, r3
   1d0ac:	ldr	r3, [fp, #-16]
   1d0b0:	str	r2, [r3, #8]
   1d0b4:	ldr	r3, [fp, #-16]
   1d0b8:	ldr	r2, [r3, #12]
   1d0bc:	ldr	r3, [fp, #-8]
   1d0c0:	sub	r2, r2, r3
   1d0c4:	ldr	r3, [fp, #-16]
   1d0c8:	str	r2, [r3, #12]
   1d0cc:	ldr	r3, [fp, #-8]
   1d0d0:	rsb	r3, r3, #0
   1d0d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d0d8:	add	r3, r2, r3
   1d0dc:	str	r3, [fp, #-20]	; 0xffffffec
   1d0e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d0e4:	ldr	r3, [fp, #-8]
   1d0e8:	sub	r3, r2, r3
   1d0ec:	str	r3, [fp, #-24]	; 0xffffffe8
   1d0f0:	ldr	r3, [fp, #-16]
   1d0f4:	ldr	r3, [r3, #8]
   1d0f8:	ldr	r2, [fp, #-8]
   1d0fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d100:	mov	r0, r3
   1d104:	bl	12408 <memcpy@plt>
   1d108:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d10c:	cmp	r3, #0
   1d110:	bne	1d048 <flatcc_builder_get_emit_context@@Base+0x438>
   1d114:	mov	r3, #0
   1d118:	mov	r0, r3
   1d11c:	sub	sp, fp, #4
   1d120:	ldr	fp, [sp]
   1d124:	add	sp, sp, #4
   1d128:	pop	{pc}		; (ldr pc, [sp], #4)
   1d12c:	str	fp, [sp, #-8]!
   1d130:	str	lr, [sp, #4]
   1d134:	add	fp, sp, #4
   1d138:	sub	sp, sp, #24
   1d13c:	str	r0, [fp, #-16]
   1d140:	str	r1, [fp, #-20]	; 0xffffffec
   1d144:	str	r2, [fp, #-24]	; 0xffffffe8
   1d148:	b	1d204 <flatcc_builder_get_emit_context@@Base+0x5f4>
   1d14c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d150:	str	r3, [fp, #-8]
   1d154:	ldr	r3, [fp, #-16]
   1d158:	ldr	r3, [r3, #20]
   1d15c:	ldr	r2, [fp, #-8]
   1d160:	cmp	r2, r3
   1d164:	bls	1d19c <flatcc_builder_get_emit_context@@Base+0x58c>
   1d168:	ldr	r3, [fp, #-16]
   1d16c:	ldr	r3, [r3, #20]
   1d170:	str	r3, [fp, #-8]
   1d174:	ldr	r3, [fp, #-8]
   1d178:	cmp	r3, #0
   1d17c:	bne	1d19c <flatcc_builder_get_emit_context@@Base+0x58c>
   1d180:	ldr	r0, [fp, #-16]
   1d184:	bl	1ce38 <flatcc_builder_get_emit_context@@Base+0x228>
   1d188:	mov	r3, r0
   1d18c:	cmp	r3, #0
   1d190:	beq	1d204 <flatcc_builder_get_emit_context@@Base+0x5f4>
   1d194:	mvn	r3, #0
   1d198:	b	1d214 <flatcc_builder_get_emit_context@@Base+0x604>
   1d19c:	ldr	r3, [fp, #-16]
   1d1a0:	ldr	r3, [r3, #16]
   1d1a4:	ldr	r2, [fp, #-8]
   1d1a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d1ac:	mov	r0, r3
   1d1b0:	bl	12408 <memcpy@plt>
   1d1b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d1b8:	ldr	r3, [fp, #-8]
   1d1bc:	sub	r3, r2, r3
   1d1c0:	str	r3, [fp, #-24]	; 0xffffffe8
   1d1c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d1c8:	ldr	r3, [fp, #-8]
   1d1cc:	add	r3, r2, r3
   1d1d0:	str	r3, [fp, #-20]	; 0xffffffec
   1d1d4:	ldr	r3, [fp, #-16]
   1d1d8:	ldr	r2, [r3, #16]
   1d1dc:	ldr	r3, [fp, #-8]
   1d1e0:	add	r2, r2, r3
   1d1e4:	ldr	r3, [fp, #-16]
   1d1e8:	str	r2, [r3, #16]
   1d1ec:	ldr	r3, [fp, #-16]
   1d1f0:	ldr	r2, [r3, #20]
   1d1f4:	ldr	r3, [fp, #-8]
   1d1f8:	sub	r2, r2, r3
   1d1fc:	ldr	r3, [fp, #-16]
   1d200:	str	r2, [r3, #20]
   1d204:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d208:	cmp	r3, #0
   1d20c:	bne	1d14c <flatcc_builder_get_emit_context@@Base+0x53c>
   1d210:	mov	r3, #0
   1d214:	mov	r0, r3
   1d218:	sub	sp, fp, #4
   1d21c:	ldr	fp, [sp]
   1d220:	add	sp, sp, #4
   1d224:	pop	{pc}		; (ldr pc, [sp], #4)

0001d228 <flatcc_emitter_recycle_page@@Base>:
   1d228:	push	{fp}		; (str fp, [sp, #-4]!)
   1d22c:	add	fp, sp, #0
   1d230:	sub	sp, sp, #12
   1d234:	str	r0, [fp, #-8]
   1d238:	str	r1, [fp, #-12]
   1d23c:	ldr	r3, [fp, #-8]
   1d240:	ldr	r3, [r3]
   1d244:	ldr	r2, [fp, #-12]
   1d248:	cmp	r2, r3
   1d24c:	beq	1d264 <flatcc_emitter_recycle_page@@Base+0x3c>
   1d250:	ldr	r3, [fp, #-8]
   1d254:	ldr	r3, [r3, #4]
   1d258:	ldr	r2, [fp, #-12]
   1d25c:	cmp	r2, r3
   1d260:	bne	1d26c <flatcc_emitter_recycle_page@@Base+0x44>
   1d264:	mvn	r3, #0
   1d268:	b	1d2dc <flatcc_emitter_recycle_page@@Base+0xb4>
   1d26c:	ldr	r3, [fp, #-12]
   1d270:	ldr	r3, [r3, #2944]	; 0xb80
   1d274:	ldr	r2, [fp, #-12]
   1d278:	ldr	r2, [r2, #2948]	; 0xb84
   1d27c:	str	r2, [r3, #2948]	; 0xb84
   1d280:	ldr	r3, [fp, #-12]
   1d284:	ldr	r3, [r3, #2948]	; 0xb84
   1d288:	ldr	r2, [fp, #-12]
   1d28c:	ldr	r2, [r2, #2944]	; 0xb80
   1d290:	str	r2, [r3, #2944]	; 0xb80
   1d294:	ldr	r3, [fp, #-8]
   1d298:	ldr	r3, [r3]
   1d29c:	ldr	r2, [r3, #2948]	; 0xb84
   1d2a0:	ldr	r3, [fp, #-12]
   1d2a4:	str	r2, [r3, #2948]	; 0xb84
   1d2a8:	ldr	r3, [fp, #-8]
   1d2ac:	ldr	r2, [r3]
   1d2b0:	ldr	r3, [fp, #-12]
   1d2b4:	str	r2, [r3, #2944]	; 0xb80
   1d2b8:	ldr	r3, [fp, #-12]
   1d2bc:	ldr	r3, [r3, #2948]	; 0xb84
   1d2c0:	ldr	r2, [fp, #-12]
   1d2c4:	str	r2, [r3, #2944]	; 0xb80
   1d2c8:	ldr	r3, [fp, #-12]
   1d2cc:	ldr	r3, [r3, #2944]	; 0xb80
   1d2d0:	ldr	r2, [fp, #-12]
   1d2d4:	str	r2, [r3, #2948]	; 0xb84
   1d2d8:	mov	r3, #0
   1d2dc:	mov	r0, r3
   1d2e0:	add	sp, fp, #0
   1d2e4:	pop	{fp}		; (ldr fp, [sp], #4)
   1d2e8:	bx	lr

0001d2ec <flatcc_emitter_reset@@Base>:
   1d2ec:	str	fp, [sp, #-8]!
   1d2f0:	str	lr, [sp, #4]
   1d2f4:	add	fp, sp, #4
   1d2f8:	sub	sp, sp, #16
   1d2fc:	str	r0, [fp, #-16]
   1d300:	ldr	r3, [fp, #-16]
   1d304:	ldr	r3, [r3]
   1d308:	str	r3, [fp, #-8]
   1d30c:	ldr	r3, [fp, #-16]
   1d310:	ldr	r3, [r3]
   1d314:	cmp	r3, #0
   1d318:	beq	1d474 <flatcc_emitter_reset@@Base+0x188>
   1d31c:	ldr	r3, [fp, #-16]
   1d320:	ldr	r2, [r3]
   1d324:	ldr	r3, [fp, #-16]
   1d328:	str	r2, [r3, #4]
   1d32c:	ldr	r3, [fp, #-16]
   1d330:	ldr	r3, [r3]
   1d334:	add	r2, r3, #1472	; 0x5c0
   1d338:	ldr	r3, [fp, #-16]
   1d33c:	str	r2, [r3, #8]
   1d340:	ldr	r3, [fp, #-16]
   1d344:	ldr	r2, [r3, #8]
   1d348:	ldr	r3, [fp, #-16]
   1d34c:	str	r2, [r3, #16]
   1d350:	ldr	r3, [fp, #-16]
   1d354:	mov	r2, #1472	; 0x5c0
   1d358:	str	r2, [r3, #12]
   1d35c:	ldr	r3, [fp, #-16]
   1d360:	mov	r2, #1472	; 0x5c0
   1d364:	str	r2, [r3, #20]
   1d368:	ldr	r3, [fp, #-16]
   1d36c:	ldr	r3, [r3, #12]
   1d370:	mov	r2, r3
   1d374:	ldr	r3, [fp, #-16]
   1d378:	ldr	r3, [r3]
   1d37c:	rsb	r2, r2, #0
   1d380:	str	r2, [r3, #2952]	; 0xb88
   1d384:	ldr	r3, [fp, #-16]
   1d388:	ldr	r3, [r3, #32]
   1d38c:	cmp	r3, #0
   1d390:	bne	1d3a4 <flatcc_emitter_reset@@Base+0xb8>
   1d394:	ldr	r3, [fp, #-16]
   1d398:	ldr	r2, [r3, #24]
   1d39c:	ldr	r3, [fp, #-16]
   1d3a0:	str	r2, [r3, #32]
   1d3a4:	ldr	r3, [fp, #-16]
   1d3a8:	ldr	r2, [r3, #32]
   1d3ac:	mov	r3, r2
   1d3b0:	lsl	r3, r3, #1
   1d3b4:	add	r3, r3, r2
   1d3b8:	lsr	r2, r3, #2
   1d3bc:	ldr	r3, [fp, #-16]
   1d3c0:	ldr	r3, [r3, #24]
   1d3c4:	lsr	r3, r3, #2
   1d3c8:	add	r2, r2, r3
   1d3cc:	ldr	r3, [fp, #-16]
   1d3d0:	str	r2, [r3, #32]
   1d3d4:	ldr	r3, [fp, #-16]
   1d3d8:	mov	r2, #0
   1d3dc:	str	r2, [r3, #24]
   1d3e0:	b	1d438 <flatcc_emitter_reset@@Base+0x14c>
   1d3e4:	ldr	r3, [fp, #-16]
   1d3e8:	ldr	r3, [r3, #4]
   1d3ec:	ldr	r3, [r3, #2944]	; 0xb80
   1d3f0:	str	r3, [fp, #-8]
   1d3f4:	ldr	r3, [fp, #-16]
   1d3f8:	ldr	r3, [r3, #4]
   1d3fc:	ldr	r2, [fp, #-8]
   1d400:	ldr	r2, [r2, #2944]	; 0xb80
   1d404:	str	r2, [r3, #2944]	; 0xb80
   1d408:	ldr	r3, [fp, #-8]
   1d40c:	ldr	r3, [r3, #2944]	; 0xb80
   1d410:	ldr	r2, [fp, #-16]
   1d414:	ldr	r2, [r2, #4]
   1d418:	str	r2, [r3, #2948]	; 0xb84
   1d41c:	ldr	r0, [fp, #-8]
   1d420:	bl	123fc <free@plt>
   1d424:	ldr	r3, [fp, #-16]
   1d428:	ldr	r3, [r3, #28]
   1d42c:	sub	r2, r3, #2944	; 0xb80
   1d430:	ldr	r3, [fp, #-16]
   1d434:	str	r2, [r3, #28]
   1d438:	ldr	r3, [fp, #-16]
   1d43c:	ldr	r3, [r3, #32]
   1d440:	lsl	r2, r3, #1
   1d444:	ldr	r3, [fp, #-16]
   1d448:	ldr	r3, [r3, #28]
   1d44c:	cmp	r2, r3
   1d450:	bcs	1d478 <flatcc_emitter_reset@@Base+0x18c>
   1d454:	ldr	r3, [fp, #-16]
   1d458:	ldr	r3, [r3, #4]
   1d45c:	ldr	r2, [r3, #2944]	; 0xb80
   1d460:	ldr	r3, [fp, #-16]
   1d464:	ldr	r3, [r3]
   1d468:	cmp	r2, r3
   1d46c:	bne	1d3e4 <flatcc_emitter_reset@@Base+0xf8>
   1d470:	b	1d478 <flatcc_emitter_reset@@Base+0x18c>
   1d474:	nop	{0}
   1d478:	sub	sp, fp, #4
   1d47c:	ldr	fp, [sp]
   1d480:	add	sp, sp, #4
   1d484:	pop	{pc}		; (ldr pc, [sp], #4)

0001d488 <flatcc_emitter_clear@@Base>:
   1d488:	str	fp, [sp, #-8]!
   1d48c:	str	lr, [sp, #4]
   1d490:	add	fp, sp, #4
   1d494:	sub	sp, sp, #16
   1d498:	str	r0, [fp, #-16]
   1d49c:	ldr	r3, [fp, #-16]
   1d4a0:	ldr	r3, [r3]
   1d4a4:	str	r3, [fp, #-8]
   1d4a8:	ldr	r3, [fp, #-8]
   1d4ac:	cmp	r3, #0
   1d4b0:	beq	1d510 <flatcc_emitter_clear@@Base+0x88>
   1d4b4:	ldr	r3, [fp, #-8]
   1d4b8:	ldr	r3, [r3, #2948]	; 0xb84
   1d4bc:	mov	r2, #0
   1d4c0:	str	r2, [r3, #2944]	; 0xb80
   1d4c4:	b	1d4e4 <flatcc_emitter_clear@@Base+0x5c>
   1d4c8:	ldr	r3, [fp, #-8]
   1d4cc:	ldr	r3, [r3, #2944]	; 0xb80
   1d4d0:	str	r3, [fp, #-8]
   1d4d4:	ldr	r3, [fp, #-8]
   1d4d8:	ldr	r3, [r3, #2948]	; 0xb84
   1d4dc:	mov	r0, r3
   1d4e0:	bl	123fc <free@plt>
   1d4e4:	ldr	r3, [fp, #-8]
   1d4e8:	ldr	r3, [r3, #2944]	; 0xb80
   1d4ec:	cmp	r3, #0
   1d4f0:	bne	1d4c8 <flatcc_emitter_clear@@Base+0x40>
   1d4f4:	ldr	r0, [fp, #-8]
   1d4f8:	bl	123fc <free@plt>
   1d4fc:	mov	r2, #36	; 0x24
   1d500:	mov	r1, #0
   1d504:	ldr	r0, [fp, #-16]
   1d508:	bl	12480 <memset@plt>
   1d50c:	b	1d514 <flatcc_emitter_clear@@Base+0x8c>
   1d510:	nop	{0}
   1d514:	sub	sp, fp, #4
   1d518:	ldr	fp, [sp]
   1d51c:	add	sp, sp, #4
   1d520:	pop	{pc}		; (ldr pc, [sp], #4)

0001d524 <flatcc_emitter@@Base>:
   1d524:	str	fp, [sp, #-8]!
   1d528:	str	lr, [sp, #4]
   1d52c:	add	fp, sp, #4
   1d530:	sub	sp, sp, #24
   1d534:	str	r0, [fp, #-16]
   1d538:	str	r1, [fp, #-20]	; 0xffffffec
   1d53c:	str	r2, [fp, #-24]	; 0xffffffe8
   1d540:	str	r3, [fp, #-28]	; 0xffffffe4
   1d544:	ldr	r3, [fp, #-16]
   1d548:	str	r3, [fp, #-12]
   1d54c:	ldr	r3, [fp, #-12]
   1d550:	ldr	r2, [r3, #24]
   1d554:	ldr	r3, [fp, #4]
   1d558:	add	r2, r2, r3
   1d55c:	ldr	r3, [fp, #-12]
   1d560:	str	r2, [r3, #24]
   1d564:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d568:	cmp	r3, #0
   1d56c:	bge	1d634 <flatcc_emitter@@Base+0x110>
   1d570:	ldr	r3, [fp, #-12]
   1d574:	ldr	r3, [r3, #12]
   1d578:	ldr	r2, [fp, #4]
   1d57c:	cmp	r2, r3
   1d580:	bhi	1d5c8 <flatcc_emitter@@Base+0xa4>
   1d584:	ldr	r3, [fp, #-12]
   1d588:	ldr	r2, [r3, #8]
   1d58c:	ldr	r3, [fp, #4]
   1d590:	rsb	r3, r3, #0
   1d594:	add	r2, r2, r3
   1d598:	ldr	r3, [fp, #-12]
   1d59c:	str	r2, [r3, #8]
   1d5a0:	ldr	r3, [fp, #-12]
   1d5a4:	ldr	r2, [r3, #12]
   1d5a8:	ldr	r3, [fp, #4]
   1d5ac:	sub	r2, r2, r3
   1d5b0:	ldr	r3, [fp, #-12]
   1d5b4:	str	r2, [r3, #12]
   1d5b8:	ldr	r3, [fp, #-12]
   1d5bc:	ldr	r3, [r3, #8]
   1d5c0:	str	r3, [fp, #-8]
   1d5c4:	b	1d6e0 <flatcc_emitter@@Base+0x1bc>
   1d5c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d5cc:	lsl	r3, r3, #3
   1d5d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d5d4:	add	r3, r2, r3
   1d5d8:	str	r3, [fp, #-20]	; 0xffffffec
   1d5dc:	b	1d61c <flatcc_emitter@@Base+0xf8>
   1d5e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d5e4:	sub	r3, r3, #8
   1d5e8:	str	r3, [fp, #-20]	; 0xffffffec
   1d5ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d5f0:	ldr	r1, [r3]
   1d5f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d5f8:	ldr	r3, [r3, #4]
   1d5fc:	mov	r2, r3
   1d600:	ldr	r0, [fp, #-12]
   1d604:	bl	1d018 <flatcc_builder_get_emit_context@@Base+0x408>
   1d608:	mov	r3, r0
   1d60c:	cmp	r3, #0
   1d610:	beq	1d61c <flatcc_emitter@@Base+0xf8>
   1d614:	mvn	r3, #0
   1d618:	b	1d738 <flatcc_emitter@@Base+0x214>
   1d61c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d620:	sub	r2, r3, #1
   1d624:	str	r2, [fp, #-24]	; 0xffffffe8
   1d628:	cmp	r3, #0
   1d62c:	bne	1d5e0 <flatcc_emitter@@Base+0xbc>
   1d630:	b	1d6d8 <flatcc_emitter@@Base+0x1b4>
   1d634:	ldr	r3, [fp, #-12]
   1d638:	ldr	r3, [r3, #20]
   1d63c:	ldr	r2, [fp, #4]
   1d640:	cmp	r2, r3
   1d644:	bhi	1d6c4 <flatcc_emitter@@Base+0x1a0>
   1d648:	ldr	r3, [fp, #-12]
   1d64c:	ldr	r3, [r3, #16]
   1d650:	str	r3, [fp, #-8]
   1d654:	ldr	r3, [fp, #-12]
   1d658:	ldr	r2, [r3, #16]
   1d65c:	ldr	r3, [fp, #4]
   1d660:	add	r2, r2, r3
   1d664:	ldr	r3, [fp, #-12]
   1d668:	str	r2, [r3, #16]
   1d66c:	ldr	r3, [fp, #-12]
   1d670:	ldr	r2, [r3, #20]
   1d674:	ldr	r3, [fp, #4]
   1d678:	sub	r2, r2, r3
   1d67c:	ldr	r3, [fp, #-12]
   1d680:	str	r2, [r3, #20]
   1d684:	b	1d6e0 <flatcc_emitter@@Base+0x1bc>
   1d688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d68c:	ldr	r1, [r3]
   1d690:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d694:	ldr	r3, [r3, #4]
   1d698:	mov	r2, r3
   1d69c:	ldr	r0, [fp, #-12]
   1d6a0:	bl	1d12c <flatcc_builder_get_emit_context@@Base+0x51c>
   1d6a4:	mov	r3, r0
   1d6a8:	cmp	r3, #0
   1d6ac:	beq	1d6b8 <flatcc_emitter@@Base+0x194>
   1d6b0:	mvn	r3, #0
   1d6b4:	b	1d738 <flatcc_emitter@@Base+0x214>
   1d6b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d6bc:	add	r3, r3, #8
   1d6c0:	str	r3, [fp, #-20]	; 0xffffffec
   1d6c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d6c8:	sub	r2, r3, #1
   1d6cc:	str	r2, [fp, #-24]	; 0xffffffe8
   1d6d0:	cmp	r3, #0
   1d6d4:	bne	1d688 <flatcc_emitter@@Base+0x164>
   1d6d8:	mov	r3, #0
   1d6dc:	b	1d738 <flatcc_emitter@@Base+0x214>
   1d6e0:	b	1d720 <flatcc_emitter@@Base+0x1fc>
   1d6e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d6e8:	ldr	r1, [r3]
   1d6ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d6f0:	ldr	r3, [r3, #4]
   1d6f4:	mov	r2, r3
   1d6f8:	ldr	r0, [fp, #-8]
   1d6fc:	bl	12408 <memcpy@plt>
   1d700:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d704:	ldr	r3, [r3, #4]
   1d708:	ldr	r2, [fp, #-8]
   1d70c:	add	r3, r2, r3
   1d710:	str	r3, [fp, #-8]
   1d714:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d718:	add	r3, r3, #8
   1d71c:	str	r3, [fp, #-20]	; 0xffffffec
   1d720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d724:	sub	r2, r3, #1
   1d728:	str	r2, [fp, #-24]	; 0xffffffe8
   1d72c:	cmp	r3, #0
   1d730:	bne	1d6e4 <flatcc_emitter@@Base+0x1c0>
   1d734:	mov	r3, #0
   1d738:	mov	r0, r3
   1d73c:	sub	sp, fp, #4
   1d740:	ldr	fp, [sp]
   1d744:	add	sp, sp, #4
   1d748:	pop	{pc}		; (ldr pc, [sp], #4)

0001d74c <flatcc_emitter_copy_buffer@@Base>:
   1d74c:	str	fp, [sp, #-8]!
   1d750:	str	lr, [sp, #4]
   1d754:	add	fp, sp, #4
   1d758:	sub	sp, sp, #24
   1d75c:	str	r0, [fp, #-16]
   1d760:	str	r1, [fp, #-20]	; 0xffffffec
   1d764:	str	r2, [fp, #-24]	; 0xffffffe8
   1d768:	ldr	r3, [fp, #-16]
   1d76c:	ldr	r3, [r3, #24]
   1d770:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d774:	cmp	r2, r3
   1d778:	bcs	1d784 <flatcc_emitter_copy_buffer@@Base+0x38>
   1d77c:	mov	r3, #0
   1d780:	b	1d884 <flatcc_emitter_copy_buffer@@Base+0x138>
   1d784:	ldr	r3, [fp, #-16]
   1d788:	ldr	r3, [r3]
   1d78c:	cmp	r3, #0
   1d790:	bne	1d79c <flatcc_emitter_copy_buffer@@Base+0x50>
   1d794:	mov	r3, #0
   1d798:	b	1d884 <flatcc_emitter_copy_buffer@@Base+0x138>
   1d79c:	ldr	r3, [fp, #-16]
   1d7a0:	ldr	r2, [r3]
   1d7a4:	ldr	r3, [fp, #-16]
   1d7a8:	ldr	r3, [r3, #4]
   1d7ac:	cmp	r2, r3
   1d7b0:	bne	1d7d8 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1d7b4:	ldr	r3, [fp, #-16]
   1d7b8:	ldr	r1, [r3, #8]
   1d7bc:	ldr	r3, [fp, #-16]
   1d7c0:	ldr	r3, [r3, #24]
   1d7c4:	mov	r2, r3
   1d7c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d7cc:	bl	12408 <memcpy@plt>
   1d7d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d7d4:	b	1d884 <flatcc_emitter_copy_buffer@@Base+0x138>
   1d7d8:	ldr	r3, [fp, #-16]
   1d7dc:	ldr	r3, [r3, #12]
   1d7e0:	rsb	r3, r3, #2944	; 0xb80
   1d7e4:	str	r3, [fp, #-12]
   1d7e8:	ldr	r3, [fp, #-16]
   1d7ec:	ldr	r3, [r3, #8]
   1d7f0:	ldr	r2, [fp, #-12]
   1d7f4:	mov	r1, r3
   1d7f8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d7fc:	bl	12408 <memcpy@plt>
   1d800:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d804:	ldr	r3, [fp, #-12]
   1d808:	add	r3, r2, r3
   1d80c:	str	r3, [fp, #-20]	; 0xffffffec
   1d810:	ldr	r3, [fp, #-16]
   1d814:	ldr	r3, [r3]
   1d818:	ldr	r3, [r3, #2944]	; 0xb80
   1d81c:	str	r3, [fp, #-8]
   1d820:	b	1d850 <flatcc_emitter_copy_buffer@@Base+0x104>
   1d824:	ldr	r3, [fp, #-8]
   1d828:	mov	r2, #2944	; 0xb80
   1d82c:	mov	r1, r3
   1d830:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d834:	bl	12408 <memcpy@plt>
   1d838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d83c:	add	r3, r3, #2944	; 0xb80
   1d840:	str	r3, [fp, #-20]	; 0xffffffec
   1d844:	ldr	r3, [fp, #-8]
   1d848:	ldr	r3, [r3, #2944]	; 0xb80
   1d84c:	str	r3, [fp, #-8]
   1d850:	ldr	r3, [fp, #-16]
   1d854:	ldr	r3, [r3, #4]
   1d858:	ldr	r2, [fp, #-8]
   1d85c:	cmp	r2, r3
   1d860:	bne	1d824 <flatcc_emitter_copy_buffer@@Base+0xd8>
   1d864:	ldr	r1, [fp, #-8]
   1d868:	ldr	r3, [fp, #-16]
   1d86c:	ldr	r3, [r3, #20]
   1d870:	rsb	r3, r3, #2944	; 0xb80
   1d874:	mov	r2, r3
   1d878:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d87c:	bl	12408 <memcpy@plt>
   1d880:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d884:	mov	r0, r3
   1d888:	sub	sp, fp, #4
   1d88c:	ldr	fp, [sp]
   1d890:	add	sp, sp, #4
   1d894:	pop	{pc}		; (ldr pc, [sp], #4)
   1d898:	push	{fp}		; (str fp, [sp, #-4]!)
   1d89c:	add	fp, sp, #0
   1d8a0:	sub	sp, sp, #12
   1d8a4:	mov	r3, r0
   1d8a8:	strb	r3, [fp, #-5]
   1d8ac:	ldrb	r3, [fp, #-5]
   1d8b0:	mov	r0, r3
   1d8b4:	add	sp, fp, #0
   1d8b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1d8bc:	bx	lr
   1d8c0:	str	fp, [sp, #-8]!
   1d8c4:	str	lr, [sp, #4]
   1d8c8:	add	fp, sp, #4
   1d8cc:	sub	sp, sp, #8
   1d8d0:	str	r0, [fp, #-8]
   1d8d4:	mov	r3, r1
   1d8d8:	strb	r3, [fp, #-9]
   1d8dc:	ldrb	r3, [fp, #-9]
   1d8e0:	mov	r0, r3
   1d8e4:	bl	1d898 <flatcc_emitter_copy_buffer@@Base+0x14c>
   1d8e8:	mov	r3, r0
   1d8ec:	mov	r2, r3
   1d8f0:	ldr	r3, [fp, #-8]
   1d8f4:	strb	r2, [r3]
   1d8f8:	nop	{0}
   1d8fc:	sub	sp, fp, #4
   1d900:	ldr	fp, [sp]
   1d904:	add	sp, sp, #4
   1d908:	pop	{pc}		; (ldr pc, [sp], #4)
   1d90c:	str	fp, [sp, #-8]!
   1d910:	str	lr, [sp, #4]
   1d914:	add	fp, sp, #4
   1d918:	sub	sp, sp, #16
   1d91c:	str	r0, [fp, #-8]
   1d920:	str	r1, [fp, #-12]
   1d924:	str	r2, [fp, #-16]
   1d928:	str	r3, [fp, #-20]	; 0xffffffec
   1d92c:	mov	r2, #44	; 0x2c
   1d930:	mov	r1, #0
   1d934:	ldr	r0, [fp, #-8]
   1d938:	bl	12480 <memset@plt>
   1d93c:	ldr	r3, [fp, #-8]
   1d940:	ldr	r2, [fp, #-12]
   1d944:	str	r2, [r3]
   1d948:	ldr	r3, [fp, #-8]
   1d94c:	ldr	r2, [fp, #-16]
   1d950:	str	r2, [r3, #4]
   1d954:	ldr	r3, [fp, #-8]
   1d958:	mov	r2, #1
   1d95c:	str	r2, [r3, #16]
   1d960:	ldr	r3, [fp, #-8]
   1d964:	ldr	r2, [fp, #4]
   1d968:	str	r2, [r3, #8]
   1d96c:	ldr	r3, [fp, #-8]
   1d970:	ldr	r2, [fp, #-16]
   1d974:	str	r2, [r3, #28]
   1d978:	ldr	r3, [fp, #-8]
   1d97c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d980:	str	r2, [r3, #32]
   1d984:	ldr	r3, [fp, #-8]
   1d988:	ldr	r2, [fp, #-16]
   1d98c:	str	r2, [r3, #36]	; 0x24
   1d990:	nop	{0}
   1d994:	sub	sp, fp, #4
   1d998:	ldr	fp, [sp]
   1d99c:	add	sp, sp, #4
   1d9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9a4:	str	fp, [sp, #-8]!
   1d9a8:	str	lr, [sp, #4]
   1d9ac:	add	fp, sp, #4
   1d9b0:	sub	sp, sp, #16
   1d9b4:	str	r0, [fp, #-8]
   1d9b8:	str	r1, [fp, #-12]
   1d9bc:	str	r2, [fp, #-16]
   1d9c0:	ldr	r2, [fp, #-16]
   1d9c4:	ldr	r3, [fp, #-12]
   1d9c8:	sub	r3, r2, r3
   1d9cc:	cmp	r3, #1
   1d9d0:	ble	1da1c <flatcc_emitter_copy_buffer@@Base+0x2d0>
   1d9d4:	ldr	r3, [fp, #-12]
   1d9d8:	ldrb	r3, [r3]
   1d9dc:	cmp	r3, #32
   1d9e0:	bls	1d9ec <flatcc_emitter_copy_buffer@@Base+0x2a0>
   1d9e4:	ldr	r3, [fp, #-12]
   1d9e8:	b	1da30 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1d9ec:	ldr	r3, [fp, #-12]
   1d9f0:	ldrb	r3, [r3]
   1d9f4:	cmp	r3, #32
   1d9f8:	bne	1da1c <flatcc_emitter_copy_buffer@@Base+0x2d0>
   1d9fc:	ldr	r3, [fp, #-12]
   1da00:	add	r3, r3, #1
   1da04:	ldrb	r3, [r3]
   1da08:	cmp	r3, #32
   1da0c:	bls	1da1c <flatcc_emitter_copy_buffer@@Base+0x2d0>
   1da10:	ldr	r3, [fp, #-12]
   1da14:	add	r3, r3, #1
   1da18:	b	1da30 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1da1c:	ldr	r2, [fp, #-16]
   1da20:	ldr	r1, [fp, #-12]
   1da24:	ldr	r0, [fp, #-8]
   1da28:	bl	23110 <flatcc_json_parser_space_ext@@Base>
   1da2c:	mov	r3, r0
   1da30:	mov	r0, r3
   1da34:	sub	sp, fp, #4
   1da38:	ldr	fp, [sp]
   1da3c:	add	sp, sp, #4
   1da40:	pop	{pc}		; (ldr pc, [sp], #4)
   1da44:	str	fp, [sp, #-8]!
   1da48:	str	lr, [sp, #4]
   1da4c:	add	fp, sp, #4
   1da50:	sub	sp, sp, #16
   1da54:	str	r0, [fp, #-8]
   1da58:	str	r1, [fp, #-12]
   1da5c:	str	r2, [fp, #-16]
   1da60:	ldr	r2, [fp, #-12]
   1da64:	ldr	r3, [fp, #-16]
   1da68:	cmp	r2, r3
   1da6c:	beq	1da80 <flatcc_emitter_copy_buffer@@Base+0x334>
   1da70:	ldr	r3, [fp, #-12]
   1da74:	ldrb	r3, [r3]
   1da78:	cmp	r3, #34	; 0x22
   1da7c:	beq	1da9c <flatcc_emitter_copy_buffer@@Base+0x350>
   1da80:	mov	r3, #16
   1da84:	ldr	r2, [fp, #-16]
   1da88:	ldr	r1, [fp, #-12]
   1da8c:	ldr	r0, [fp, #-8]
   1da90:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1da94:	mov	r3, r0
   1da98:	b	1daac <flatcc_emitter_copy_buffer@@Base+0x360>
   1da9c:	ldr	r3, [fp, #-12]
   1daa0:	add	r3, r3, #1
   1daa4:	str	r3, [fp, #-12]
   1daa8:	ldr	r3, [fp, #-12]
   1daac:	mov	r0, r3
   1dab0:	sub	sp, fp, #4
   1dab4:	ldr	fp, [sp]
   1dab8:	add	sp, sp, #4
   1dabc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dac0:	str	fp, [sp, #-8]!
   1dac4:	str	lr, [sp, #4]
   1dac8:	add	fp, sp, #4
   1dacc:	sub	sp, sp, #16
   1dad0:	str	r0, [fp, #-8]
   1dad4:	str	r1, [fp, #-12]
   1dad8:	str	r2, [fp, #-16]
   1dadc:	ldr	r2, [fp, #-12]
   1dae0:	ldr	r3, [fp, #-16]
   1dae4:	cmp	r2, r3
   1dae8:	beq	1dafc <flatcc_emitter_copy_buffer@@Base+0x3b0>
   1daec:	ldr	r3, [fp, #-12]
   1daf0:	ldrb	r3, [r3]
   1daf4:	cmp	r3, #34	; 0x22
   1daf8:	beq	1db18 <flatcc_emitter_copy_buffer@@Base+0x3cc>
   1dafc:	mov	r3, #20
   1db00:	ldr	r2, [fp, #-16]
   1db04:	ldr	r1, [fp, #-12]
   1db08:	ldr	r0, [fp, #-8]
   1db0c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1db10:	mov	r3, r0
   1db14:	b	1db28 <flatcc_emitter_copy_buffer@@Base+0x3dc>
   1db18:	ldr	r3, [fp, #-12]
   1db1c:	add	r3, r3, #1
   1db20:	str	r3, [fp, #-12]
   1db24:	ldr	r3, [fp, #-12]
   1db28:	mov	r0, r3
   1db2c:	sub	sp, fp, #4
   1db30:	ldr	fp, [sp]
   1db34:	add	sp, sp, #4
   1db38:	pop	{pc}		; (ldr pc, [sp], #4)
   1db3c:	str	fp, [sp, #-8]!
   1db40:	str	lr, [sp, #4]
   1db44:	add	fp, sp, #4
   1db48:	sub	sp, sp, #16
   1db4c:	str	r0, [fp, #-8]
   1db50:	str	r1, [fp, #-12]
   1db54:	str	r2, [fp, #-16]
   1db58:	ldr	r2, [fp, #-12]
   1db5c:	ldr	r3, [fp, #-16]
   1db60:	cmp	r2, r3
   1db64:	bne	1db70 <flatcc_emitter_copy_buffer@@Base+0x424>
   1db68:	ldr	r3, [fp, #-12]
   1db6c:	b	1dbd8 <flatcc_emitter_copy_buffer@@Base+0x48c>
   1db70:	ldr	r3, [fp, #-12]
   1db74:	ldrb	r3, [r3]
   1db78:	cmp	r3, #34	; 0x22
   1db7c:	bne	1db9c <flatcc_emitter_copy_buffer@@Base+0x450>
   1db80:	ldr	r3, [fp, #-12]
   1db84:	add	r3, r3, #1
   1db88:	str	r3, [fp, #-12]
   1db8c:	ldr	r3, [fp, #-8]
   1db90:	mov	r2, #0
   1db94:	str	r2, [r3, #12]
   1db98:	b	1dbd4 <flatcc_emitter_copy_buffer@@Base+0x488>
   1db9c:	ldr	r3, [fp, #-12]
   1dba0:	ldrb	r3, [r3]
   1dba4:	cmp	r3, #46	; 0x2e
   1dba8:	bne	1dbc8 <flatcc_emitter_copy_buffer@@Base+0x47c>
   1dbac:	mov	r3, #5
   1dbb0:	ldr	r2, [fp, #-16]
   1dbb4:	ldr	r1, [fp, #-12]
   1dbb8:	ldr	r0, [fp, #-8]
   1dbbc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1dbc0:	mov	r3, r0
   1dbc4:	b	1dbd8 <flatcc_emitter_copy_buffer@@Base+0x48c>
   1dbc8:	ldr	r3, [fp, #-8]
   1dbcc:	mov	r2, #1
   1dbd0:	str	r2, [r3, #12]
   1dbd4:	ldr	r3, [fp, #-12]
   1dbd8:	mov	r0, r3
   1dbdc:	sub	sp, fp, #4
   1dbe0:	ldr	fp, [sp]
   1dbe4:	add	sp, sp, #4
   1dbe8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbec:	str	fp, [sp, #-8]!
   1dbf0:	str	lr, [sp, #4]
   1dbf4:	add	fp, sp, #4
   1dbf8:	sub	sp, sp, #24
   1dbfc:	str	r0, [fp, #-16]
   1dc00:	str	r1, [fp, #-20]	; 0xffffffec
   1dc04:	str	r2, [fp, #-24]	; 0xffffffe8
   1dc08:	mov	r3, #0
   1dc0c:	strb	r3, [fp, #-5]
   1dc10:	ldr	r3, [fp, #-16]
   1dc14:	ldr	r3, [r3, #12]
   1dc18:	cmp	r3, #0
   1dc1c:	beq	1dd44 <flatcc_emitter_copy_buffer@@Base+0x5f8>
   1dc20:	b	1dcb8 <flatcc_emitter_copy_buffer@@Base+0x56c>
   1dc24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc28:	ldrb	r3, [r3]
   1dc2c:	strb	r3, [fp, #-6]
   1dc30:	ldrb	r3, [fp, #-6]
   1dc34:	strb	r3, [fp, #-5]
   1dc38:	ldrb	r3, [fp, #-6]
   1dc3c:	cmp	r3, #95	; 0x5f
   1dc40:	beq	1dc74 <flatcc_emitter_copy_buffer@@Base+0x528>
   1dc44:	ldrb	r3, [fp, #-6]
   1dc48:	cmp	r3, #46	; 0x2e
   1dc4c:	beq	1dc74 <flatcc_emitter_copy_buffer@@Base+0x528>
   1dc50:	ldrsb	r3, [fp, #-6]
   1dc54:	cmp	r3, #0
   1dc58:	blt	1dc74 <flatcc_emitter_copy_buffer@@Base+0x528>
   1dc5c:	ldrb	r3, [fp, #-6]
   1dc60:	cmp	r3, #47	; 0x2f
   1dc64:	bls	1dc84 <flatcc_emitter_copy_buffer@@Base+0x538>
   1dc68:	ldrb	r3, [fp, #-6]
   1dc6c:	cmp	r3, #57	; 0x39
   1dc70:	bhi	1dc84 <flatcc_emitter_copy_buffer@@Base+0x538>
   1dc74:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc78:	add	r3, r3, #1
   1dc7c:	str	r3, [fp, #-20]	; 0xffffffec
   1dc80:	b	1dcb8 <flatcc_emitter_copy_buffer@@Base+0x56c>
   1dc84:	ldrb	r3, [fp, #-6]
   1dc88:	orr	r3, r3, #32
   1dc8c:	strb	r3, [fp, #-6]
   1dc90:	ldrb	r3, [fp, #-6]
   1dc94:	cmp	r3, #96	; 0x60
   1dc98:	bls	1dcdc <flatcc_emitter_copy_buffer@@Base+0x590>
   1dc9c:	ldrb	r3, [fp, #-6]
   1dca0:	cmp	r3, #122	; 0x7a
   1dca4:	bhi	1dcdc <flatcc_emitter_copy_buffer@@Base+0x590>
   1dca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dcac:	add	r3, r3, #1
   1dcb0:	str	r3, [fp, #-20]	; 0xffffffec
   1dcb4:	nop	{0}
   1dcb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dcbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dcc0:	cmp	r2, r3
   1dcc4:	beq	1dce0 <flatcc_emitter_copy_buffer@@Base+0x594>
   1dcc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dccc:	ldrb	r3, [r3]
   1dcd0:	cmp	r3, #32
   1dcd4:	bhi	1dc24 <flatcc_emitter_copy_buffer@@Base+0x4d8>
   1dcd8:	b	1dce0 <flatcc_emitter_copy_buffer@@Base+0x594>
   1dcdc:	nop	{0}
   1dce0:	ldrb	r3, [fp, #-5]
   1dce4:	cmp	r3, #46	; 0x2e
   1dce8:	bne	1ddb4 <flatcc_emitter_copy_buffer@@Base+0x668>
   1dcec:	mov	r3, #5
   1dcf0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1dcf4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1dcf8:	ldr	r0, [fp, #-16]
   1dcfc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1dd00:	mov	r3, r0
   1dd04:	b	1ddb8 <flatcc_emitter_copy_buffer@@Base+0x66c>
   1dd08:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd0c:	ldrb	r3, [r3]
   1dd10:	cmp	r3, #92	; 0x5c
   1dd14:	bne	1dd38 <flatcc_emitter_copy_buffer@@Base+0x5ec>
   1dd18:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1dd1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd20:	sub	r3, r2, r3
   1dd24:	cmp	r3, #1
   1dd28:	ble	1dd68 <flatcc_emitter_copy_buffer@@Base+0x61c>
   1dd2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd30:	add	r3, r3, #1
   1dd34:	str	r3, [fp, #-20]	; 0xffffffec
   1dd38:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd3c:	add	r3, r3, #1
   1dd40:	str	r3, [fp, #-20]	; 0xffffffec
   1dd44:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dd48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dd4c:	cmp	r2, r3
   1dd50:	beq	1dd6c <flatcc_emitter_copy_buffer@@Base+0x620>
   1dd54:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd58:	ldrb	r3, [r3]
   1dd5c:	cmp	r3, #34	; 0x22
   1dd60:	bne	1dd08 <flatcc_emitter_copy_buffer@@Base+0x5bc>
   1dd64:	b	1dd6c <flatcc_emitter_copy_buffer@@Base+0x620>
   1dd68:	nop	{0}
   1dd6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dd70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dd74:	cmp	r2, r3
   1dd78:	beq	1dd8c <flatcc_emitter_copy_buffer@@Base+0x640>
   1dd7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd80:	ldrb	r3, [r3]
   1dd84:	cmp	r3, #34	; 0x22
   1dd88:	beq	1dda8 <flatcc_emitter_copy_buffer@@Base+0x65c>
   1dd8c:	mov	r3, #20
   1dd90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1dd94:	ldr	r1, [fp, #-20]	; 0xffffffec
   1dd98:	ldr	r0, [fp, #-16]
   1dd9c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1dda0:	mov	r3, r0
   1dda4:	b	1ddb8 <flatcc_emitter_copy_buffer@@Base+0x66c>
   1dda8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ddac:	add	r3, r3, #1
   1ddb0:	str	r3, [fp, #-20]	; 0xffffffec
   1ddb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ddb8:	mov	r0, r3
   1ddbc:	sub	sp, fp, #4
   1ddc0:	ldr	fp, [sp]
   1ddc4:	add	sp, sp, #4
   1ddc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ddcc:	str	fp, [sp, #-8]!
   1ddd0:	str	lr, [sp, #4]
   1ddd4:	add	fp, sp, #4
   1ddd8:	sub	sp, sp, #16
   1dddc:	str	r0, [fp, #-8]
   1dde0:	str	r1, [fp, #-12]
   1dde4:	str	r2, [fp, #-16]
   1dde8:	ldr	r2, [fp, #-16]
   1ddec:	ldr	r1, [fp, #-12]
   1ddf0:	ldr	r0, [fp, #-8]
   1ddf4:	bl	1db3c <flatcc_emitter_copy_buffer@@Base+0x3f0>
   1ddf8:	str	r0, [fp, #-12]
   1ddfc:	ldr	r3, [fp, #-8]
   1de00:	ldr	r3, [r3, #12]
   1de04:	cmp	r3, #0
   1de08:	bne	1de20 <flatcc_emitter_copy_buffer@@Base+0x6d4>
   1de0c:	ldr	r2, [fp, #-16]
   1de10:	ldr	r1, [fp, #-12]
   1de14:	ldr	r0, [fp, #-8]
   1de18:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1de1c:	str	r0, [fp, #-12]
   1de20:	ldr	r3, [fp, #-12]
   1de24:	mov	r0, r3
   1de28:	sub	sp, fp, #4
   1de2c:	ldr	fp, [sp]
   1de30:	add	sp, sp, #4
   1de34:	pop	{pc}		; (ldr pc, [sp], #4)
   1de38:	str	fp, [sp, #-8]!
   1de3c:	str	lr, [sp, #4]
   1de40:	add	fp, sp, #4
   1de44:	sub	sp, sp, #16
   1de48:	str	r0, [fp, #-8]
   1de4c:	str	r1, [fp, #-12]
   1de50:	str	r2, [fp, #-16]
   1de54:	str	r3, [fp, #-20]	; 0xffffffec
   1de58:	ldr	r2, [fp, #-16]
   1de5c:	ldr	r1, [fp, #-12]
   1de60:	ldr	r0, [fp, #-8]
   1de64:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1de68:	str	r0, [fp, #-12]
   1de6c:	ldr	r2, [fp, #-12]
   1de70:	ldr	r3, [fp, #-16]
   1de74:	cmp	r2, r3
   1de78:	bne	1de90 <flatcc_emitter_copy_buffer@@Base+0x744>
   1de7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1de80:	mov	r2, #0
   1de84:	str	r2, [r3]
   1de88:	ldr	r3, [fp, #-12]
   1de8c:	b	1df98 <flatcc_emitter_copy_buffer@@Base+0x84c>
   1de90:	ldr	r3, [fp, #-12]
   1de94:	ldrb	r3, [r3]
   1de98:	cmp	r3, #44	; 0x2c
   1de9c:	beq	1def8 <flatcc_emitter_copy_buffer@@Base+0x7ac>
   1dea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dea4:	mov	r2, #0
   1dea8:	str	r2, [r3]
   1deac:	ldr	r3, [fp, #-12]
   1deb0:	ldrb	r3, [r3]
   1deb4:	cmp	r3, #125	; 0x7d
   1deb8:	beq	1ded8 <flatcc_emitter_copy_buffer@@Base+0x78c>
   1debc:	mov	r3, #10
   1dec0:	ldr	r2, [fp, #-16]
   1dec4:	ldr	r1, [fp, #-12]
   1dec8:	ldr	r0, [fp, #-8]
   1decc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1ded0:	mov	r3, r0
   1ded4:	b	1df98 <flatcc_emitter_copy_buffer@@Base+0x84c>
   1ded8:	ldr	r3, [fp, #-12]
   1dedc:	add	r3, r3, #1
   1dee0:	ldr	r2, [fp, #-16]
   1dee4:	mov	r1, r3
   1dee8:	ldr	r0, [fp, #-8]
   1deec:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1def0:	mov	r3, r0
   1def4:	b	1df98 <flatcc_emitter_copy_buffer@@Base+0x84c>
   1def8:	ldr	r3, [fp, #-12]
   1defc:	add	r3, r3, #1
   1df00:	ldr	r2, [fp, #-16]
   1df04:	mov	r1, r3
   1df08:	ldr	r0, [fp, #-8]
   1df0c:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1df10:	str	r0, [fp, #-12]
   1df14:	ldr	r2, [fp, #-12]
   1df18:	ldr	r3, [fp, #-16]
   1df1c:	cmp	r2, r3
   1df20:	bne	1df4c <flatcc_emitter_copy_buffer@@Base+0x800>
   1df24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1df28:	mov	r2, #0
   1df2c:	str	r2, [r3]
   1df30:	mov	r3, #10
   1df34:	ldr	r2, [fp, #-16]
   1df38:	ldr	r1, [fp, #-12]
   1df3c:	ldr	r0, [fp, #-8]
   1df40:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1df44:	mov	r3, r0
   1df48:	b	1df98 <flatcc_emitter_copy_buffer@@Base+0x84c>
   1df4c:	ldr	r3, [fp, #-12]
   1df50:	ldrb	r3, [r3]
   1df54:	cmp	r3, #125	; 0x7d
   1df58:	bne	1df88 <flatcc_emitter_copy_buffer@@Base+0x83c>
   1df5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1df60:	mov	r2, #0
   1df64:	str	r2, [r3]
   1df68:	ldr	r3, [fp, #-12]
   1df6c:	add	r3, r3, #1
   1df70:	ldr	r2, [fp, #-16]
   1df74:	mov	r1, r3
   1df78:	ldr	r0, [fp, #-8]
   1df7c:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1df80:	mov	r3, r0
   1df84:	b	1df98 <flatcc_emitter_copy_buffer@@Base+0x84c>
   1df88:	ldr	r3, [fp, #-20]	; 0xffffffec
   1df8c:	mov	r2, #1
   1df90:	str	r2, [r3]
   1df94:	ldr	r3, [fp, #-12]
   1df98:	mov	r0, r3
   1df9c:	sub	sp, fp, #4
   1dfa0:	ldr	fp, [sp]
   1dfa4:	add	sp, sp, #4
   1dfa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dfac:	str	fp, [sp, #-8]!
   1dfb0:	str	lr, [sp, #4]
   1dfb4:	add	fp, sp, #4
   1dfb8:	sub	sp, sp, #16
   1dfbc:	str	r0, [fp, #-8]
   1dfc0:	str	r1, [fp, #-12]
   1dfc4:	str	r2, [fp, #-16]
   1dfc8:	str	r3, [fp, #-20]	; 0xffffffec
   1dfcc:	ldr	r2, [fp, #-12]
   1dfd0:	ldr	r3, [fp, #-16]
   1dfd4:	cmp	r2, r3
   1dfd8:	beq	1dfec <flatcc_emitter_copy_buffer@@Base+0x8a0>
   1dfdc:	ldr	r3, [fp, #-12]
   1dfe0:	ldrb	r3, [r3]
   1dfe4:	cmp	r3, #91	; 0x5b
   1dfe8:	beq	1e014 <flatcc_emitter_copy_buffer@@Base+0x8c8>
   1dfec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dff0:	mov	r2, #0
   1dff4:	str	r2, [r3]
   1dff8:	mov	r3, #22
   1dffc:	ldr	r2, [fp, #-16]
   1e000:	ldr	r1, [fp, #-12]
   1e004:	ldr	r0, [fp, #-8]
   1e008:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e00c:	mov	r3, r0
   1e010:	b	1e08c <flatcc_emitter_copy_buffer@@Base+0x940>
   1e014:	ldr	r3, [fp, #-12]
   1e018:	add	r3, r3, #1
   1e01c:	ldr	r2, [fp, #-16]
   1e020:	mov	r1, r3
   1e024:	ldr	r0, [fp, #-8]
   1e028:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1e02c:	str	r0, [fp, #-12]
   1e030:	ldr	r2, [fp, #-12]
   1e034:	ldr	r3, [fp, #-16]
   1e038:	cmp	r2, r3
   1e03c:	beq	1e07c <flatcc_emitter_copy_buffer@@Base+0x930>
   1e040:	ldr	r3, [fp, #-12]
   1e044:	ldrb	r3, [r3]
   1e048:	cmp	r3, #93	; 0x5d
   1e04c:	bne	1e07c <flatcc_emitter_copy_buffer@@Base+0x930>
   1e050:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e054:	mov	r2, #0
   1e058:	str	r2, [r3]
   1e05c:	ldr	r3, [fp, #-12]
   1e060:	add	r3, r3, #1
   1e064:	ldr	r2, [fp, #-16]
   1e068:	mov	r1, r3
   1e06c:	ldr	r0, [fp, #-8]
   1e070:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1e074:	mov	r3, r0
   1e078:	b	1e08c <flatcc_emitter_copy_buffer@@Base+0x940>
   1e07c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e080:	mov	r2, #1
   1e084:	str	r2, [r3]
   1e088:	ldr	r3, [fp, #-12]
   1e08c:	mov	r0, r3
   1e090:	sub	sp, fp, #4
   1e094:	ldr	fp, [sp]
   1e098:	add	sp, sp, #4
   1e09c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0a0:	str	fp, [sp, #-8]!
   1e0a4:	str	lr, [sp, #4]
   1e0a8:	add	fp, sp, #4
   1e0ac:	sub	sp, sp, #16
   1e0b0:	str	r0, [fp, #-8]
   1e0b4:	str	r1, [fp, #-12]
   1e0b8:	str	r2, [fp, #-16]
   1e0bc:	str	r3, [fp, #-20]	; 0xffffffec
   1e0c0:	ldr	r2, [fp, #-16]
   1e0c4:	ldr	r1, [fp, #-12]
   1e0c8:	ldr	r0, [fp, #-8]
   1e0cc:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1e0d0:	str	r0, [fp, #-12]
   1e0d4:	ldr	r2, [fp, #-12]
   1e0d8:	ldr	r3, [fp, #-16]
   1e0dc:	cmp	r2, r3
   1e0e0:	bne	1e0f8 <flatcc_emitter_copy_buffer@@Base+0x9ac>
   1e0e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e0e8:	mov	r2, #0
   1e0ec:	str	r2, [r3]
   1e0f0:	ldr	r3, [fp, #-12]
   1e0f4:	b	1e200 <flatcc_emitter_copy_buffer@@Base+0xab4>
   1e0f8:	ldr	r3, [fp, #-12]
   1e0fc:	ldrb	r3, [r3]
   1e100:	cmp	r3, #44	; 0x2c
   1e104:	beq	1e160 <flatcc_emitter_copy_buffer@@Base+0xa14>
   1e108:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e10c:	mov	r2, #0
   1e110:	str	r2, [r3]
   1e114:	ldr	r3, [fp, #-12]
   1e118:	ldrb	r3, [r3]
   1e11c:	cmp	r3, #93	; 0x5d
   1e120:	beq	1e140 <flatcc_emitter_copy_buffer@@Base+0x9f4>
   1e124:	mov	r3, #9
   1e128:	ldr	r2, [fp, #-16]
   1e12c:	ldr	r1, [fp, #-12]
   1e130:	ldr	r0, [fp, #-8]
   1e134:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e138:	mov	r3, r0
   1e13c:	b	1e200 <flatcc_emitter_copy_buffer@@Base+0xab4>
   1e140:	ldr	r3, [fp, #-12]
   1e144:	add	r3, r3, #1
   1e148:	ldr	r2, [fp, #-16]
   1e14c:	mov	r1, r3
   1e150:	ldr	r0, [fp, #-8]
   1e154:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1e158:	mov	r3, r0
   1e15c:	b	1e200 <flatcc_emitter_copy_buffer@@Base+0xab4>
   1e160:	ldr	r3, [fp, #-12]
   1e164:	add	r3, r3, #1
   1e168:	ldr	r2, [fp, #-16]
   1e16c:	mov	r1, r3
   1e170:	ldr	r0, [fp, #-8]
   1e174:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1e178:	str	r0, [fp, #-12]
   1e17c:	ldr	r2, [fp, #-12]
   1e180:	ldr	r3, [fp, #-16]
   1e184:	cmp	r2, r3
   1e188:	bne	1e1b4 <flatcc_emitter_copy_buffer@@Base+0xa68>
   1e18c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e190:	mov	r2, #0
   1e194:	str	r2, [r3]
   1e198:	mov	r3, #9
   1e19c:	ldr	r2, [fp, #-16]
   1e1a0:	ldr	r1, [fp, #-12]
   1e1a4:	ldr	r0, [fp, #-8]
   1e1a8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e1ac:	mov	r3, r0
   1e1b0:	b	1e200 <flatcc_emitter_copy_buffer@@Base+0xab4>
   1e1b4:	ldr	r3, [fp, #-12]
   1e1b8:	ldrb	r3, [r3]
   1e1bc:	cmp	r3, #93	; 0x5d
   1e1c0:	bne	1e1f0 <flatcc_emitter_copy_buffer@@Base+0xaa4>
   1e1c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e1c8:	mov	r2, #0
   1e1cc:	str	r2, [r3]
   1e1d0:	ldr	r3, [fp, #-12]
   1e1d4:	add	r3, r3, #1
   1e1d8:	ldr	r2, [fp, #-16]
   1e1dc:	mov	r1, r3
   1e1e0:	ldr	r0, [fp, #-8]
   1e1e4:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   1e1e8:	mov	r3, r0
   1e1ec:	b	1e200 <flatcc_emitter_copy_buffer@@Base+0xab4>
   1e1f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e1f4:	mov	r2, #1
   1e1f8:	str	r2, [r3]
   1e1fc:	ldr	r3, [fp, #-12]
   1e200:	mov	r0, r3
   1e204:	sub	sp, fp, #4
   1e208:	ldr	fp, [sp]
   1e20c:	add	sp, sp, #4
   1e210:	pop	{pc}		; (ldr pc, [sp], #4)
   1e214:	str	fp, [sp, #-8]!
   1e218:	str	lr, [sp, #4]
   1e21c:	add	fp, sp, #4
   1e220:	sub	sp, sp, #16
   1e224:	str	r0, [fp, #-8]
   1e228:	str	r1, [fp, #-12]
   1e22c:	str	r2, [fp, #-16]
   1e230:	str	r3, [fp, #-20]	; 0xffffffec
   1e234:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e238:	cmp	r3, #0
   1e23c:	beq	1e25c <flatcc_emitter_copy_buffer@@Base+0xb10>
   1e240:	mov	r3, #8
   1e244:	ldr	r2, [fp, #-16]
   1e248:	ldr	r1, [fp, #-12]
   1e24c:	ldr	r0, [fp, #-8]
   1e250:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e254:	mov	r3, r0
   1e258:	b	1e26c <flatcc_emitter_copy_buffer@@Base+0xb20>
   1e25c:	ldr	r1, [fp, #12]
   1e260:	ldrd	r2, [fp, #4]
   1e264:	strd	r2, [r1]
   1e268:	ldr	r3, [fp, #-12]
   1e26c:	mov	r0, r3
   1e270:	sub	sp, fp, #4
   1e274:	ldr	fp, [sp]
   1e278:	add	sp, sp, #4
   1e27c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e280:	str	fp, [sp, #-8]!
   1e284:	str	lr, [sp, #4]
   1e288:	add	fp, sp, #4
   1e28c:	sub	sp, sp, #16
   1e290:	str	r0, [fp, #-8]
   1e294:	str	r1, [fp, #-12]
   1e298:	str	r2, [fp, #-16]
   1e29c:	str	r3, [fp, #-20]	; 0xffffffec
   1e2a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e2a4:	cmp	r3, #0
   1e2a8:	beq	1e2c8 <flatcc_emitter_copy_buffer@@Base+0xb7c>
   1e2ac:	mov	r3, #8
   1e2b0:	ldr	r2, [fp, #-16]
   1e2b4:	ldr	r1, [fp, #-12]
   1e2b8:	ldr	r0, [fp, #-8]
   1e2bc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e2c0:	mov	r3, r0
   1e2c4:	b	1e2f4 <flatcc_emitter_copy_buffer@@Base+0xba8>
   1e2c8:	ldr	r2, [fp, #4]
   1e2cc:	ldr	r3, [fp, #8]
   1e2d0:	orr	r3, r2, r3
   1e2d4:	cmp	r3, #0
   1e2d8:	movne	r3, #1
   1e2dc:	moveq	r3, #0
   1e2e0:	uxtb	r3, r3
   1e2e4:	mov	r2, r3
   1e2e8:	ldr	r3, [fp, #12]
   1e2ec:	strb	r2, [r3]
   1e2f0:	ldr	r3, [fp, #-12]
   1e2f4:	mov	r0, r3
   1e2f8:	sub	sp, fp, #4
   1e2fc:	ldr	fp, [sp]
   1e300:	add	sp, sp, #4
   1e304:	pop	{pc}		; (ldr pc, [sp], #4)
   1e308:	str	fp, [sp, #-8]!
   1e30c:	str	lr, [sp, #4]
   1e310:	add	fp, sp, #4
   1e314:	sub	sp, sp, #16
   1e318:	str	r0, [fp, #-8]
   1e31c:	str	r1, [fp, #-12]
   1e320:	str	r2, [fp, #-16]
   1e324:	str	r3, [fp, #-20]	; 0xffffffec
   1e328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e32c:	cmp	r3, #0
   1e330:	beq	1e350 <flatcc_emitter_copy_buffer@@Base+0xc04>
   1e334:	mov	r3, #8
   1e338:	ldr	r2, [fp, #-16]
   1e33c:	ldr	r1, [fp, #-12]
   1e340:	ldr	r0, [fp, #-8]
   1e344:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e348:	mov	r3, r0
   1e34c:	b	1e394 <flatcc_emitter_copy_buffer@@Base+0xc48>
   1e350:	ldrd	r2, [fp, #4]
   1e354:	mvn	r0, #0
   1e358:	mov	r1, #0
   1e35c:	cmp	r3, r1
   1e360:	cmpeq	r2, r0
   1e364:	bls	1e384 <flatcc_emitter_copy_buffer@@Base+0xc38>
   1e368:	mov	r3, #7
   1e36c:	ldr	r2, [fp, #-16]
   1e370:	ldr	r1, [fp, #-12]
   1e374:	ldr	r0, [fp, #-8]
   1e378:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e37c:	mov	r3, r0
   1e380:	b	1e394 <flatcc_emitter_copy_buffer@@Base+0xc48>
   1e384:	ldr	r2, [fp, #4]
   1e388:	ldr	r3, [fp, #12]
   1e38c:	str	r2, [r3]
   1e390:	ldr	r3, [fp, #-12]
   1e394:	mov	r0, r3
   1e398:	sub	sp, fp, #4
   1e39c:	ldr	fp, [sp]
   1e3a0:	add	sp, sp, #4
   1e3a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3a8:	str	fp, [sp, #-8]!
   1e3ac:	str	lr, [sp, #4]
   1e3b0:	add	fp, sp, #4
   1e3b4:	sub	sp, sp, #16
   1e3b8:	str	r0, [fp, #-8]
   1e3bc:	str	r1, [fp, #-12]
   1e3c0:	str	r2, [fp, #-16]
   1e3c4:	str	r3, [fp, #-20]	; 0xffffffec
   1e3c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e3cc:	cmp	r3, #0
   1e3d0:	beq	1e3f0 <flatcc_emitter_copy_buffer@@Base+0xca4>
   1e3d4:	mov	r3, #8
   1e3d8:	ldr	r2, [fp, #-16]
   1e3dc:	ldr	r1, [fp, #-12]
   1e3e0:	ldr	r0, [fp, #-8]
   1e3e4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e3e8:	mov	r3, r0
   1e3ec:	b	1e434 <flatcc_emitter_copy_buffer@@Base+0xce8>
   1e3f0:	ldrd	r2, [fp, #4]
   1e3f4:	movw	r0, #65535	; 0xffff
   1e3f8:	mov	r1, #0
   1e3fc:	cmp	r3, r1
   1e400:	cmpeq	r2, r0
   1e404:	bls	1e424 <flatcc_emitter_copy_buffer@@Base+0xcd8>
   1e408:	mov	r3, #7
   1e40c:	ldr	r2, [fp, #-16]
   1e410:	ldr	r1, [fp, #-12]
   1e414:	ldr	r0, [fp, #-8]
   1e418:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e41c:	mov	r3, r0
   1e420:	b	1e434 <flatcc_emitter_copy_buffer@@Base+0xce8>
   1e424:	ldrh	r2, [fp, #4]
   1e428:	ldr	r3, [fp, #12]
   1e42c:	strh	r2, [r3]
   1e430:	ldr	r3, [fp, #-12]
   1e434:	mov	r0, r3
   1e438:	sub	sp, fp, #4
   1e43c:	ldr	fp, [sp]
   1e440:	add	sp, sp, #4
   1e444:	pop	{pc}		; (ldr pc, [sp], #4)
   1e448:	str	fp, [sp, #-8]!
   1e44c:	str	lr, [sp, #4]
   1e450:	add	fp, sp, #4
   1e454:	sub	sp, sp, #16
   1e458:	str	r0, [fp, #-8]
   1e45c:	str	r1, [fp, #-12]
   1e460:	str	r2, [fp, #-16]
   1e464:	str	r3, [fp, #-20]	; 0xffffffec
   1e468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e46c:	cmp	r3, #0
   1e470:	beq	1e490 <flatcc_emitter_copy_buffer@@Base+0xd44>
   1e474:	mov	r3, #8
   1e478:	ldr	r2, [fp, #-16]
   1e47c:	ldr	r1, [fp, #-12]
   1e480:	ldr	r0, [fp, #-8]
   1e484:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e488:	mov	r3, r0
   1e48c:	b	1e4cc <flatcc_emitter_copy_buffer@@Base+0xd80>
   1e490:	ldrd	r2, [fp, #4]
   1e494:	cmp	r3, #0
   1e498:	cmpeq	r2, #255	; 0xff
   1e49c:	bls	1e4bc <flatcc_emitter_copy_buffer@@Base+0xd70>
   1e4a0:	mov	r3, #7
   1e4a4:	ldr	r2, [fp, #-16]
   1e4a8:	ldr	r1, [fp, #-12]
   1e4ac:	ldr	r0, [fp, #-8]
   1e4b0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e4b4:	mov	r3, r0
   1e4b8:	b	1e4cc <flatcc_emitter_copy_buffer@@Base+0xd80>
   1e4bc:	ldrb	r2, [fp, #4]
   1e4c0:	ldr	r3, [fp, #12]
   1e4c4:	strb	r2, [r3]
   1e4c8:	ldr	r3, [fp, #-12]
   1e4cc:	mov	r0, r3
   1e4d0:	sub	sp, fp, #4
   1e4d4:	ldr	fp, [sp]
   1e4d8:	add	sp, sp, #4
   1e4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4e0:	str	fp, [sp, #-8]!
   1e4e4:	str	lr, [sp, #4]
   1e4e8:	add	fp, sp, #4
   1e4ec:	sub	sp, sp, #16
   1e4f0:	str	r0, [fp, #-8]
   1e4f4:	str	r1, [fp, #-12]
   1e4f8:	str	r2, [fp, #-16]
   1e4fc:	str	r3, [fp, #-20]	; 0xffffffec
   1e500:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e504:	cmp	r3, #0
   1e508:	beq	1e550 <flatcc_emitter_copy_buffer@@Base+0xe04>
   1e50c:	ldrd	r2, [fp, #4]
   1e510:	cmp	r3, #-2147483648	; 0x80000000
   1e514:	cmpeq	r2, #0
   1e518:	bls	1e538 <flatcc_emitter_copy_buffer@@Base+0xdec>
   1e51c:	mov	r3, #8
   1e520:	ldr	r2, [fp, #-16]
   1e524:	ldr	r1, [fp, #-12]
   1e528:	ldr	r0, [fp, #-8]
   1e52c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e530:	mov	r3, r0
   1e534:	b	1e58c <flatcc_emitter_copy_buffer@@Base+0xe40>
   1e538:	ldrd	r2, [fp, #4]
   1e53c:	rsbs	r2, r2, #0
   1e540:	rsc	r3, r3, #0
   1e544:	ldr	r1, [fp, #12]
   1e548:	strd	r2, [r1]
   1e54c:	b	1e588 <flatcc_emitter_copy_buffer@@Base+0xe3c>
   1e550:	ldrd	r2, [fp, #4]
   1e554:	cmp	r2, #0
   1e558:	sbcs	r3, r3, #0
   1e55c:	bge	1e57c <flatcc_emitter_copy_buffer@@Base+0xe30>
   1e560:	mov	r3, #7
   1e564:	ldr	r2, [fp, #-16]
   1e568:	ldr	r1, [fp, #-12]
   1e56c:	ldr	r0, [fp, #-8]
   1e570:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e574:	mov	r3, r0
   1e578:	b	1e58c <flatcc_emitter_copy_buffer@@Base+0xe40>
   1e57c:	ldrd	r2, [fp, #4]
   1e580:	ldr	r1, [fp, #12]
   1e584:	strd	r2, [r1]
   1e588:	ldr	r3, [fp, #-12]
   1e58c:	mov	r0, r3
   1e590:	sub	sp, fp, #4
   1e594:	ldr	fp, [sp]
   1e598:	add	sp, sp, #4
   1e59c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5a0:	str	fp, [sp, #-8]!
   1e5a4:	str	lr, [sp, #4]
   1e5a8:	add	fp, sp, #4
   1e5ac:	sub	sp, sp, #16
   1e5b0:	str	r0, [fp, #-8]
   1e5b4:	str	r1, [fp, #-12]
   1e5b8:	str	r2, [fp, #-16]
   1e5bc:	str	r3, [fp, #-20]	; 0xffffffec
   1e5c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e5c4:	cmp	r3, #0
   1e5c8:	beq	1e610 <flatcc_emitter_copy_buffer@@Base+0xec4>
   1e5cc:	ldrd	r2, [fp, #4]
   1e5d0:	cmp	r3, #0
   1e5d4:	cmpeq	r2, #-2147483648	; 0x80000000
   1e5d8:	bls	1e5f8 <flatcc_emitter_copy_buffer@@Base+0xeac>
   1e5dc:	mov	r3, #8
   1e5e0:	ldr	r2, [fp, #-16]
   1e5e4:	ldr	r1, [fp, #-12]
   1e5e8:	ldr	r0, [fp, #-8]
   1e5ec:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e5f0:	mov	r3, r0
   1e5f4:	b	1e654 <flatcc_emitter_copy_buffer@@Base+0xf08>
   1e5f8:	ldr	r3, [fp, #4]
   1e5fc:	rsb	r3, r3, #0
   1e600:	mov	r2, r3
   1e604:	ldr	r3, [fp, #12]
   1e608:	str	r2, [r3]
   1e60c:	b	1e650 <flatcc_emitter_copy_buffer@@Base+0xf04>
   1e610:	ldrd	r2, [fp, #4]
   1e614:	mvn	r0, #-2147483648	; 0x80000000
   1e618:	mov	r1, #0
   1e61c:	cmp	r3, r1
   1e620:	cmpeq	r2, r0
   1e624:	bls	1e644 <flatcc_emitter_copy_buffer@@Base+0xef8>
   1e628:	mov	r3, #7
   1e62c:	ldr	r2, [fp, #-16]
   1e630:	ldr	r1, [fp, #-12]
   1e634:	ldr	r0, [fp, #-8]
   1e638:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e63c:	mov	r3, r0
   1e640:	b	1e654 <flatcc_emitter_copy_buffer@@Base+0xf08>
   1e644:	ldr	r2, [fp, #4]
   1e648:	ldr	r3, [fp, #12]
   1e64c:	str	r2, [r3]
   1e650:	ldr	r3, [fp, #-12]
   1e654:	mov	r0, r3
   1e658:	sub	sp, fp, #4
   1e65c:	ldr	fp, [sp]
   1e660:	add	sp, sp, #4
   1e664:	pop	{pc}		; (ldr pc, [sp], #4)
   1e668:	str	fp, [sp, #-8]!
   1e66c:	str	lr, [sp, #4]
   1e670:	add	fp, sp, #4
   1e674:	sub	sp, sp, #16
   1e678:	str	r0, [fp, #-8]
   1e67c:	str	r1, [fp, #-12]
   1e680:	str	r2, [fp, #-16]
   1e684:	str	r3, [fp, #-20]	; 0xffffffec
   1e688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e68c:	cmp	r3, #0
   1e690:	beq	1e6dc <flatcc_emitter_copy_buffer@@Base+0xf90>
   1e694:	ldrd	r2, [fp, #4]
   1e698:	cmp	r3, #0
   1e69c:	cmpeq	r2, #32768	; 0x8000
   1e6a0:	bls	1e6c0 <flatcc_emitter_copy_buffer@@Base+0xf74>
   1e6a4:	mov	r3, #8
   1e6a8:	ldr	r2, [fp, #-16]
   1e6ac:	ldr	r1, [fp, #-12]
   1e6b0:	ldr	r0, [fp, #-8]
   1e6b4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e6b8:	mov	r3, r0
   1e6bc:	b	1e720 <flatcc_emitter_copy_buffer@@Base+0xfd4>
   1e6c0:	ldrh	r3, [fp, #4]
   1e6c4:	rsb	r3, r3, #0
   1e6c8:	uxth	r3, r3
   1e6cc:	sxth	r2, r3
   1e6d0:	ldr	r3, [fp, #12]
   1e6d4:	strh	r2, [r3]
   1e6d8:	b	1e71c <flatcc_emitter_copy_buffer@@Base+0xfd0>
   1e6dc:	ldrd	r2, [fp, #4]
   1e6e0:	movw	r0, #32767	; 0x7fff
   1e6e4:	mov	r1, #0
   1e6e8:	cmp	r3, r1
   1e6ec:	cmpeq	r2, r0
   1e6f0:	bls	1e710 <flatcc_emitter_copy_buffer@@Base+0xfc4>
   1e6f4:	mov	r3, #7
   1e6f8:	ldr	r2, [fp, #-16]
   1e6fc:	ldr	r1, [fp, #-12]
   1e700:	ldr	r0, [fp, #-8]
   1e704:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e708:	mov	r3, r0
   1e70c:	b	1e720 <flatcc_emitter_copy_buffer@@Base+0xfd4>
   1e710:	ldrsh	r2, [fp, #4]
   1e714:	ldr	r3, [fp, #12]
   1e718:	strh	r2, [r3]
   1e71c:	ldr	r3, [fp, #-12]
   1e720:	mov	r0, r3
   1e724:	sub	sp, fp, #4
   1e728:	ldr	fp, [sp]
   1e72c:	add	sp, sp, #4
   1e730:	pop	{pc}		; (ldr pc, [sp], #4)
   1e734:	str	fp, [sp, #-8]!
   1e738:	str	lr, [sp, #4]
   1e73c:	add	fp, sp, #4
   1e740:	sub	sp, sp, #16
   1e744:	str	r0, [fp, #-8]
   1e748:	str	r1, [fp, #-12]
   1e74c:	str	r2, [fp, #-16]
   1e750:	str	r3, [fp, #-20]	; 0xffffffec
   1e754:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e758:	cmp	r3, #0
   1e75c:	beq	1e7a8 <flatcc_emitter_copy_buffer@@Base+0x105c>
   1e760:	ldrd	r2, [fp, #4]
   1e764:	cmp	r3, #0
   1e768:	cmpeq	r2, #128	; 0x80
   1e76c:	bls	1e78c <flatcc_emitter_copy_buffer@@Base+0x1040>
   1e770:	mov	r3, #8
   1e774:	ldr	r2, [fp, #-16]
   1e778:	ldr	r1, [fp, #-12]
   1e77c:	ldr	r0, [fp, #-8]
   1e780:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e784:	mov	r3, r0
   1e788:	b	1e7e4 <flatcc_emitter_copy_buffer@@Base+0x1098>
   1e78c:	ldrb	r3, [fp, #4]
   1e790:	rsb	r3, r3, #0
   1e794:	uxtb	r3, r3
   1e798:	sxtb	r2, r3
   1e79c:	ldr	r3, [fp, #12]
   1e7a0:	strb	r2, [r3]
   1e7a4:	b	1e7e0 <flatcc_emitter_copy_buffer@@Base+0x1094>
   1e7a8:	ldrd	r2, [fp, #4]
   1e7ac:	cmp	r3, #0
   1e7b0:	cmpeq	r2, #127	; 0x7f
   1e7b4:	bls	1e7d4 <flatcc_emitter_copy_buffer@@Base+0x1088>
   1e7b8:	mov	r3, #7
   1e7bc:	ldr	r2, [fp, #-16]
   1e7c0:	ldr	r1, [fp, #-12]
   1e7c4:	ldr	r0, [fp, #-8]
   1e7c8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1e7cc:	mov	r3, r0
   1e7d0:	b	1e7e4 <flatcc_emitter_copy_buffer@@Base+0x1098>
   1e7d4:	ldrsb	r2, [fp, #4]
   1e7d8:	ldr	r3, [fp, #12]
   1e7dc:	strb	r2, [r3]
   1e7e0:	ldr	r3, [fp, #-12]
   1e7e4:	mov	r0, r3
   1e7e8:	sub	sp, fp, #4
   1e7ec:	ldr	fp, [sp]
   1e7f0:	add	sp, sp, #4
   1e7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7f8:	str	fp, [sp, #-8]!
   1e7fc:	str	lr, [sp, #4]
   1e800:	add	fp, sp, #4
   1e804:	sub	sp, sp, #16
   1e808:	str	r0, [fp, #-8]
   1e80c:	str	r1, [fp, #-12]
   1e810:	str	r2, [fp, #-16]
   1e814:	str	r3, [fp, #-20]	; 0xffffffec
   1e818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e81c:	cmp	r3, #0
   1e820:	beq	1e838 <flatcc_emitter_copy_buffer@@Base+0x10ec>
   1e824:	ldrd	r0, [fp, #4]
   1e828:	bl	2692c <flatcc_json_parser_struct_as_root@@Base+0x6ac>
   1e82c:	mov	r3, r0
   1e830:	eor	r2, r3, #-2147483648	; 0x80000000
   1e834:	b	1e844 <flatcc_emitter_copy_buffer@@Base+0x10f8>
   1e838:	ldrd	r0, [fp, #4]
   1e83c:	bl	2692c <flatcc_json_parser_struct_as_root@@Base+0x6ac>
   1e840:	mov	r2, r0
   1e844:	ldr	r3, [fp, #12]
   1e848:	str	r2, [r3]
   1e84c:	ldr	r3, [fp, #-12]
   1e850:	mov	r0, r3
   1e854:	sub	sp, fp, #4
   1e858:	ldr	fp, [sp]
   1e85c:	add	sp, sp, #4
   1e860:	pop	{pc}		; (ldr pc, [sp], #4)
   1e864:	str	fp, [sp, #-8]!
   1e868:	str	lr, [sp, #4]
   1e86c:	add	fp, sp, #4
   1e870:	sub	sp, sp, #16
   1e874:	str	r0, [fp, #-8]
   1e878:	str	r1, [fp, #-12]
   1e87c:	str	r2, [fp, #-16]
   1e880:	str	r3, [fp, #-20]	; 0xffffffec
   1e884:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e888:	cmp	r3, #0
   1e88c:	beq	1e8a8 <flatcc_emitter_copy_buffer@@Base+0x115c>
   1e890:	ldrd	r0, [fp, #4]
   1e894:	bl	266f4 <flatcc_json_parser_struct_as_root@@Base+0x474>
   1e898:	mov	r2, r0
   1e89c:	mov	r3, r1
   1e8a0:	eor	r3, r3, #-2147483648	; 0x80000000
   1e8a4:	b	1e8b8 <flatcc_emitter_copy_buffer@@Base+0x116c>
   1e8a8:	ldrd	r0, [fp, #4]
   1e8ac:	bl	266f4 <flatcc_json_parser_struct_as_root@@Base+0x474>
   1e8b0:	mov	r2, r0
   1e8b4:	mov	r3, r1
   1e8b8:	ldr	r1, [fp, #12]
   1e8bc:	strd	r2, [r1]
   1e8c0:	ldr	r3, [fp, #-12]
   1e8c4:	mov	r0, r3
   1e8c8:	sub	sp, fp, #4
   1e8cc:	ldr	fp, [sp]
   1e8d0:	add	sp, sp, #4
   1e8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8d8:	str	fp, [sp, #-8]!
   1e8dc:	str	lr, [sp, #4]
   1e8e0:	add	fp, sp, #4
   1e8e4:	sub	sp, sp, #56	; 0x38
   1e8e8:	str	r0, [fp, #-32]	; 0xffffffe0
   1e8ec:	str	r1, [fp, #-36]	; 0xffffffdc
   1e8f0:	str	r2, [fp, #-40]	; 0xffffffd8
   1e8f4:	str	r3, [fp, #-44]	; 0xffffffd4
   1e8f8:	mov	r2, #0
   1e8fc:	mov	r3, #0
   1e900:	strd	r2, [fp, #-20]	; 0xffffffec
   1e904:	mov	r3, #0
   1e908:	str	r3, [fp, #-24]	; 0xffffffe8
   1e90c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e910:	str	r3, [fp, #-8]
   1e914:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e918:	mov	r2, #0
   1e91c:	strb	r2, [r3]
   1e920:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e924:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e928:	cmp	r2, r3
   1e92c:	bne	1e938 <flatcc_emitter_copy_buffer@@Base+0x11ec>
   1e930:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e934:	b	1e9a0 <flatcc_emitter_copy_buffer@@Base+0x1254>
   1e938:	sub	r2, fp, #24
   1e93c:	sub	r3, fp, #20
   1e940:	str	r3, [sp]
   1e944:	mov	r3, r2
   1e948:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1e94c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1e950:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e954:	bl	24ca8 <flatcc_json_parser_integer@@Base>
   1e958:	str	r0, [fp, #-36]	; 0xffffffdc
   1e95c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e960:	ldr	r3, [fp, #-8]
   1e964:	cmp	r2, r3
   1e968:	beq	1e99c <flatcc_emitter_copy_buffer@@Base+0x1250>
   1e96c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e970:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1e974:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1e978:	str	r1, [sp, #8]
   1e97c:	strd	r2, [sp]
   1e980:	mov	r3, r0
   1e984:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1e988:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1e98c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e990:	bl	1e448 <flatcc_emitter_copy_buffer@@Base+0xcfc>
   1e994:	mov	r3, r0
   1e998:	b	1e9a0 <flatcc_emitter_copy_buffer@@Base+0x1254>
   1e99c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e9a0:	mov	r0, r3
   1e9a4:	sub	sp, fp, #4
   1e9a8:	ldr	fp, [sp]
   1e9ac:	add	sp, sp, #4
   1e9b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e9b8:	str	r6, [sp, #8]
   1e9bc:	str	fp, [sp, #12]
   1e9c0:	str	lr, [sp, #16]
   1e9c4:	add	fp, sp, #16
   1e9c8:	sub	sp, sp, #76	; 0x4c
   1e9cc:	str	r0, [fp, #-64]	; 0xffffffc0
   1e9d0:	str	r1, [fp, #-68]	; 0xffffffbc
   1e9d4:	str	r2, [fp, #-72]	; 0xffffffb8
   1e9d8:	str	r3, [fp, #-76]	; 0xffffffb4
   1e9dc:	mov	r2, #0
   1e9e0:	mov	r3, #0
   1e9e4:	strd	r2, [fp, #-44]	; 0xffffffd4
   1e9e8:	mov	r3, #0
   1e9ec:	str	r3, [fp, #-28]	; 0xffffffe4
   1e9f0:	ldr	r1, [fp, #4]
   1e9f4:	mov	r2, #0
   1e9f8:	mov	r3, #0
   1e9fc:	strd	r2, [r1]
   1ea00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1ea04:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1ea08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ea0c:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1ea10:	str	r0, [fp, #-68]	; 0xffffffbc
   1ea14:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1ea18:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ea1c:	cmp	r2, r3
   1ea20:	bne	1ea2c <flatcc_emitter_copy_buffer@@Base+0x12e0>
   1ea24:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1ea28:	b	1eb8c <flatcc_emitter_copy_buffer@@Base+0x1440>
   1ea2c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1ea30:	str	r3, [fp, #-24]	; 0xffffffe8
   1ea34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ea38:	ldr	r6, [r3]
   1ea3c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1ea40:	str	r3, [fp, #-32]	; 0xffffffe0
   1ea44:	sub	r2, fp, #56	; 0x38
   1ea48:	sub	r3, fp, #60	; 0x3c
   1ea4c:	str	r3, [sp, #4]
   1ea50:	sub	r3, fp, #52	; 0x34
   1ea54:	str	r3, [sp]
   1ea58:	mov	r3, r2
   1ea5c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1ea60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ea64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ea68:	blx	r6
   1ea6c:	str	r0, [fp, #-68]	; 0xffffffbc
   1ea70:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1ea74:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ea78:	cmp	r2, r3
   1ea7c:	bne	1ea88 <flatcc_emitter_copy_buffer@@Base+0x133c>
   1ea80:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1ea84:	b	1eb8c <flatcc_emitter_copy_buffer@@Base+0x1440>
   1ea88:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1ea8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1ea90:	cmp	r2, r3
   1ea94:	bne	1eab4 <flatcc_emitter_copy_buffer@@Base+0x1368>
   1ea98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ea9c:	add	r3, r3, #4
   1eaa0:	str	r3, [fp, #-24]	; 0xffffffe8
   1eaa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eaa8:	ldr	r3, [r3]
   1eaac:	cmp	r3, #0
   1eab0:	bne	1ea34 <flatcc_emitter_copy_buffer@@Base+0x12e8>
   1eab4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1eab8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1eabc:	cmp	r2, r3
   1eac0:	bne	1eae0 <flatcc_emitter_copy_buffer@@Base+0x1394>
   1eac4:	mov	r3, #23
   1eac8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1eacc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1ead0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ead4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1ead8:	mov	r3, r0
   1eadc:	b	1eb8c <flatcc_emitter_copy_buffer@@Base+0x1440>
   1eae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eae4:	add	r2, r3, #1
   1eae8:	str	r2, [fp, #-28]	; 0xffffffe4
   1eaec:	cmp	r3, #0
   1eaf0:	beq	1eb20 <flatcc_emitter_copy_buffer@@Base+0x13d4>
   1eaf4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1eaf8:	ldr	r3, [r3, #12]
   1eafc:	cmp	r3, #0
   1eb00:	beq	1eb20 <flatcc_emitter_copy_buffer@@Base+0x13d4>
   1eb04:	mov	r3, #14
   1eb08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1eb0c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1eb10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1eb14:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1eb18:	mov	r3, r0
   1eb1c:	b	1eb8c <flatcc_emitter_copy_buffer@@Base+0x1440>
   1eb20:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1eb24:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1eb28:	sub	r1, fp, #44	; 0x2c
   1eb2c:	str	r1, [sp, #8]
   1eb30:	strd	r2, [sp]
   1eb34:	mov	r3, r0
   1eb38:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1eb3c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1eb40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1eb44:	bl	1e214 <flatcc_emitter_copy_buffer@@Base+0xac8>
   1eb48:	mov	r2, r0
   1eb4c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1eb50:	cmp	r3, r2
   1eb54:	bne	1eb60 <flatcc_emitter_copy_buffer@@Base+0x1414>
   1eb58:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1eb5c:	b	1eb8c <flatcc_emitter_copy_buffer@@Base+0x1440>
   1eb60:	ldr	r3, [fp, #4]
   1eb64:	ldrd	r0, [r3]
   1eb68:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1eb6c:	adds	r4, r0, r2
   1eb70:	adc	r5, r1, r3
   1eb74:	ldr	r3, [fp, #4]
   1eb78:	strd	r4, [r3]
   1eb7c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1eb80:	cmp	r3, #0
   1eb84:	bne	1ea2c <flatcc_emitter_copy_buffer@@Base+0x12e0>
   1eb88:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1eb8c:	mov	r0, r3
   1eb90:	sub	sp, fp, #16
   1eb94:	ldrd	r4, [sp]
   1eb98:	ldr	r6, [sp, #8]
   1eb9c:	ldr	fp, [sp, #12]
   1eba0:	add	sp, sp, #16
   1eba4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eba8:	str	r4, [sp, #-12]!
   1ebac:	str	fp, [sp, #4]
   1ebb0:	str	lr, [sp, #8]
   1ebb4:	add	fp, sp, #8
   1ebb8:	sub	sp, sp, #68	; 0x44
   1ebbc:	str	r0, [fp, #-48]	; 0xffffffd0
   1ebc0:	str	r1, [fp, #-52]	; 0xffffffcc
   1ebc4:	str	r2, [fp, #-56]	; 0xffffffc8
   1ebc8:	str	r3, [fp, #-60]	; 0xffffffc4
   1ebcc:	mov	r3, #0
   1ebd0:	str	r3, [fp, #-28]	; 0xffffffe4
   1ebd4:	mov	r3, #0
   1ebd8:	str	r3, [fp, #-20]	; 0xffffffec
   1ebdc:	ldr	r3, [fp, #4]
   1ebe0:	mov	r2, #0
   1ebe4:	str	r2, [r3]
   1ebe8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ebec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ebf0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ebf4:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1ebf8:	str	r0, [fp, #-52]	; 0xffffffcc
   1ebfc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ec00:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ec04:	cmp	r2, r3
   1ec08:	bne	1ec14 <flatcc_emitter_copy_buffer@@Base+0x14c8>
   1ec0c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ec10:	b	1ed70 <flatcc_emitter_copy_buffer@@Base+0x1624>
   1ec14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ec18:	str	r3, [fp, #-16]
   1ec1c:	ldr	r3, [fp, #-16]
   1ec20:	ldr	r4, [r3]
   1ec24:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ec28:	str	r3, [fp, #-24]	; 0xffffffe8
   1ec2c:	sub	r2, fp, #40	; 0x28
   1ec30:	sub	r3, fp, #44	; 0x2c
   1ec34:	str	r3, [sp, #4]
   1ec38:	sub	r3, fp, #36	; 0x24
   1ec3c:	str	r3, [sp]
   1ec40:	mov	r3, r2
   1ec44:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ec48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ec4c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ec50:	blx	r4
   1ec54:	str	r0, [fp, #-52]	; 0xffffffcc
   1ec58:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ec5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ec60:	cmp	r2, r3
   1ec64:	bne	1ec70 <flatcc_emitter_copy_buffer@@Base+0x1524>
   1ec68:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ec6c:	b	1ed70 <flatcc_emitter_copy_buffer@@Base+0x1624>
   1ec70:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ec74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ec78:	cmp	r2, r3
   1ec7c:	bne	1ec9c <flatcc_emitter_copy_buffer@@Base+0x1550>
   1ec80:	ldr	r3, [fp, #-16]
   1ec84:	add	r3, r3, #4
   1ec88:	str	r3, [fp, #-16]
   1ec8c:	ldr	r3, [fp, #-16]
   1ec90:	ldr	r3, [r3]
   1ec94:	cmp	r3, #0
   1ec98:	bne	1ec1c <flatcc_emitter_copy_buffer@@Base+0x14d0>
   1ec9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1eca0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1eca4:	cmp	r2, r3
   1eca8:	bne	1ecc8 <flatcc_emitter_copy_buffer@@Base+0x157c>
   1ecac:	mov	r3, #23
   1ecb0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ecb4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ecb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ecbc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1ecc0:	mov	r3, r0
   1ecc4:	b	1ed70 <flatcc_emitter_copy_buffer@@Base+0x1624>
   1ecc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1eccc:	add	r2, r3, #1
   1ecd0:	str	r2, [fp, #-20]	; 0xffffffec
   1ecd4:	cmp	r3, #0
   1ecd8:	beq	1ed08 <flatcc_emitter_copy_buffer@@Base+0x15bc>
   1ecdc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ece0:	ldr	r3, [r3, #12]
   1ece4:	cmp	r3, #0
   1ece8:	beq	1ed08 <flatcc_emitter_copy_buffer@@Base+0x15bc>
   1ecec:	mov	r3, #14
   1ecf0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ecf4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ecf8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ecfc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1ed00:	mov	r3, r0
   1ed04:	b	1ed70 <flatcc_emitter_copy_buffer@@Base+0x1624>
   1ed08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ed0c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1ed10:	sub	r1, fp, #28
   1ed14:	str	r1, [sp, #8]
   1ed18:	strd	r2, [sp]
   1ed1c:	mov	r3, r0
   1ed20:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ed24:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ed28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ed2c:	bl	1e308 <flatcc_emitter_copy_buffer@@Base+0xbbc>
   1ed30:	mov	r2, r0
   1ed34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ed38:	cmp	r3, r2
   1ed3c:	bne	1ed48 <flatcc_emitter_copy_buffer@@Base+0x15fc>
   1ed40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ed44:	b	1ed70 <flatcc_emitter_copy_buffer@@Base+0x1624>
   1ed48:	ldr	r3, [fp, #4]
   1ed4c:	ldr	r2, [r3]
   1ed50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ed54:	add	r2, r2, r3
   1ed58:	ldr	r3, [fp, #4]
   1ed5c:	str	r2, [r3]
   1ed60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ed64:	cmp	r3, #0
   1ed68:	bne	1ec14 <flatcc_emitter_copy_buffer@@Base+0x14c8>
   1ed6c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ed70:	mov	r0, r3
   1ed74:	sub	sp, fp, #8
   1ed78:	ldr	r4, [sp]
   1ed7c:	ldr	fp, [sp, #4]
   1ed80:	add	sp, sp, #8
   1ed84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed88:	str	r4, [sp, #-12]!
   1ed8c:	str	fp, [sp, #4]
   1ed90:	str	lr, [sp, #8]
   1ed94:	add	fp, sp, #8
   1ed98:	sub	sp, sp, #68	; 0x44
   1ed9c:	str	r0, [fp, #-48]	; 0xffffffd0
   1eda0:	str	r1, [fp, #-52]	; 0xffffffcc
   1eda4:	str	r2, [fp, #-56]	; 0xffffffc8
   1eda8:	str	r3, [fp, #-60]	; 0xffffffc4
   1edac:	mov	r3, #0
   1edb0:	strh	r3, [fp, #-26]	; 0xffffffe6
   1edb4:	mov	r3, #0
   1edb8:	str	r3, [fp, #-20]	; 0xffffffec
   1edbc:	ldr	r3, [fp, #4]
   1edc0:	mov	r2, #0
   1edc4:	strh	r2, [r3]
   1edc8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1edcc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1edd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1edd4:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1edd8:	str	r0, [fp, #-52]	; 0xffffffcc
   1eddc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ede0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ede4:	cmp	r2, r3
   1ede8:	bne	1edf4 <flatcc_emitter_copy_buffer@@Base+0x16a8>
   1edec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1edf0:	b	1ef54 <flatcc_emitter_copy_buffer@@Base+0x1808>
   1edf4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1edf8:	str	r3, [fp, #-16]
   1edfc:	ldr	r3, [fp, #-16]
   1ee00:	ldr	r4, [r3]
   1ee04:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ee08:	str	r3, [fp, #-24]	; 0xffffffe8
   1ee0c:	sub	r2, fp, #40	; 0x28
   1ee10:	sub	r3, fp, #44	; 0x2c
   1ee14:	str	r3, [sp, #4]
   1ee18:	sub	r3, fp, #36	; 0x24
   1ee1c:	str	r3, [sp]
   1ee20:	mov	r3, r2
   1ee24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ee28:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ee2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ee30:	blx	r4
   1ee34:	str	r0, [fp, #-52]	; 0xffffffcc
   1ee38:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ee3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ee40:	cmp	r2, r3
   1ee44:	bne	1ee50 <flatcc_emitter_copy_buffer@@Base+0x1704>
   1ee48:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ee4c:	b	1ef54 <flatcc_emitter_copy_buffer@@Base+0x1808>
   1ee50:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ee54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee58:	cmp	r2, r3
   1ee5c:	bne	1ee7c <flatcc_emitter_copy_buffer@@Base+0x1730>
   1ee60:	ldr	r3, [fp, #-16]
   1ee64:	add	r3, r3, #4
   1ee68:	str	r3, [fp, #-16]
   1ee6c:	ldr	r3, [fp, #-16]
   1ee70:	ldr	r3, [r3]
   1ee74:	cmp	r3, #0
   1ee78:	bne	1edfc <flatcc_emitter_copy_buffer@@Base+0x16b0>
   1ee7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ee80:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ee84:	cmp	r2, r3
   1ee88:	bne	1eea8 <flatcc_emitter_copy_buffer@@Base+0x175c>
   1ee8c:	mov	r3, #23
   1ee90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ee94:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ee98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ee9c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1eea0:	mov	r3, r0
   1eea4:	b	1ef54 <flatcc_emitter_copy_buffer@@Base+0x1808>
   1eea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1eeac:	add	r2, r3, #1
   1eeb0:	str	r2, [fp, #-20]	; 0xffffffec
   1eeb4:	cmp	r3, #0
   1eeb8:	beq	1eee8 <flatcc_emitter_copy_buffer@@Base+0x179c>
   1eebc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1eec0:	ldr	r3, [r3, #12]
   1eec4:	cmp	r3, #0
   1eec8:	beq	1eee8 <flatcc_emitter_copy_buffer@@Base+0x179c>
   1eecc:	mov	r3, #14
   1eed0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1eed4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eed8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eedc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1eee0:	mov	r3, r0
   1eee4:	b	1ef54 <flatcc_emitter_copy_buffer@@Base+0x1808>
   1eee8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1eeec:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1eef0:	sub	r1, fp, #26
   1eef4:	str	r1, [sp, #8]
   1eef8:	strd	r2, [sp]
   1eefc:	mov	r3, r0
   1ef00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ef04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ef08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ef0c:	bl	1e3a8 <flatcc_emitter_copy_buffer@@Base+0xc5c>
   1ef10:	mov	r2, r0
   1ef14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ef18:	cmp	r3, r2
   1ef1c:	bne	1ef28 <flatcc_emitter_copy_buffer@@Base+0x17dc>
   1ef20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ef24:	b	1ef54 <flatcc_emitter_copy_buffer@@Base+0x1808>
   1ef28:	ldr	r3, [fp, #4]
   1ef2c:	ldrh	r2, [r3]
   1ef30:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1ef34:	add	r3, r2, r3
   1ef38:	uxth	r2, r3
   1ef3c:	ldr	r3, [fp, #4]
   1ef40:	strh	r2, [r3]
   1ef44:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ef48:	cmp	r3, #0
   1ef4c:	bne	1edf4 <flatcc_emitter_copy_buffer@@Base+0x16a8>
   1ef50:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ef54:	mov	r0, r3
   1ef58:	sub	sp, fp, #8
   1ef5c:	ldr	r4, [sp]
   1ef60:	ldr	fp, [sp, #4]
   1ef64:	add	sp, sp, #8
   1ef68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef6c:	str	r4, [sp, #-12]!
   1ef70:	str	fp, [sp, #4]
   1ef74:	str	lr, [sp, #8]
   1ef78:	add	fp, sp, #8
   1ef7c:	sub	sp, sp, #68	; 0x44
   1ef80:	str	r0, [fp, #-48]	; 0xffffffd0
   1ef84:	str	r1, [fp, #-52]	; 0xffffffcc
   1ef88:	str	r2, [fp, #-56]	; 0xffffffc8
   1ef8c:	str	r3, [fp, #-60]	; 0xffffffc4
   1ef90:	mov	r3, #0
   1ef94:	strb	r3, [fp, #-25]	; 0xffffffe7
   1ef98:	mov	r3, #0
   1ef9c:	str	r3, [fp, #-20]	; 0xffffffec
   1efa0:	ldr	r3, [fp, #4]
   1efa4:	mov	r2, #0
   1efa8:	strb	r2, [r3]
   1efac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1efb0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1efb4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1efb8:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1efbc:	str	r0, [fp, #-52]	; 0xffffffcc
   1efc0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1efc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1efc8:	cmp	r2, r3
   1efcc:	bne	1efd8 <flatcc_emitter_copy_buffer@@Base+0x188c>
   1efd0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1efd4:	b	1f138 <flatcc_emitter_copy_buffer@@Base+0x19ec>
   1efd8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1efdc:	str	r3, [fp, #-16]
   1efe0:	ldr	r3, [fp, #-16]
   1efe4:	ldr	r4, [r3]
   1efe8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1efec:	str	r3, [fp, #-24]	; 0xffffffe8
   1eff0:	sub	r2, fp, #40	; 0x28
   1eff4:	sub	r3, fp, #44	; 0x2c
   1eff8:	str	r3, [sp, #4]
   1effc:	sub	r3, fp, #36	; 0x24
   1f000:	str	r3, [sp]
   1f004:	mov	r3, r2
   1f008:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f00c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f010:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f014:	blx	r4
   1f018:	str	r0, [fp, #-52]	; 0xffffffcc
   1f01c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f020:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f024:	cmp	r2, r3
   1f028:	bne	1f034 <flatcc_emitter_copy_buffer@@Base+0x18e8>
   1f02c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f030:	b	1f138 <flatcc_emitter_copy_buffer@@Base+0x19ec>
   1f034:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f038:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f03c:	cmp	r2, r3
   1f040:	bne	1f060 <flatcc_emitter_copy_buffer@@Base+0x1914>
   1f044:	ldr	r3, [fp, #-16]
   1f048:	add	r3, r3, #4
   1f04c:	str	r3, [fp, #-16]
   1f050:	ldr	r3, [fp, #-16]
   1f054:	ldr	r3, [r3]
   1f058:	cmp	r3, #0
   1f05c:	bne	1efe0 <flatcc_emitter_copy_buffer@@Base+0x1894>
   1f060:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f064:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f068:	cmp	r2, r3
   1f06c:	bne	1f08c <flatcc_emitter_copy_buffer@@Base+0x1940>
   1f070:	mov	r3, #23
   1f074:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f078:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f07c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f080:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f084:	mov	r3, r0
   1f088:	b	1f138 <flatcc_emitter_copy_buffer@@Base+0x19ec>
   1f08c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f090:	add	r2, r3, #1
   1f094:	str	r2, [fp, #-20]	; 0xffffffec
   1f098:	cmp	r3, #0
   1f09c:	beq	1f0cc <flatcc_emitter_copy_buffer@@Base+0x1980>
   1f0a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f0a4:	ldr	r3, [r3, #12]
   1f0a8:	cmp	r3, #0
   1f0ac:	beq	1f0cc <flatcc_emitter_copy_buffer@@Base+0x1980>
   1f0b0:	mov	r3, #14
   1f0b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f0b8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f0bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f0c0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f0c4:	mov	r3, r0
   1f0c8:	b	1f138 <flatcc_emitter_copy_buffer@@Base+0x19ec>
   1f0cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f0d0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f0d4:	sub	r1, fp, #25
   1f0d8:	str	r1, [sp, #8]
   1f0dc:	strd	r2, [sp]
   1f0e0:	mov	r3, r0
   1f0e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f0e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f0ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f0f0:	bl	1e448 <flatcc_emitter_copy_buffer@@Base+0xcfc>
   1f0f4:	mov	r2, r0
   1f0f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f0fc:	cmp	r3, r2
   1f100:	bne	1f10c <flatcc_emitter_copy_buffer@@Base+0x19c0>
   1f104:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f108:	b	1f138 <flatcc_emitter_copy_buffer@@Base+0x19ec>
   1f10c:	ldr	r3, [fp, #4]
   1f110:	ldrb	r2, [r3]
   1f114:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1f118:	add	r3, r2, r3
   1f11c:	uxtb	r2, r3
   1f120:	ldr	r3, [fp, #4]
   1f124:	strb	r2, [r3]
   1f128:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f12c:	cmp	r3, #0
   1f130:	bne	1efd8 <flatcc_emitter_copy_buffer@@Base+0x188c>
   1f134:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f138:	mov	r0, r3
   1f13c:	sub	sp, fp, #8
   1f140:	ldr	r4, [sp]
   1f144:	ldr	fp, [sp, #4]
   1f148:	add	sp, sp, #8
   1f14c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f150:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f154:	str	r6, [sp, #8]
   1f158:	str	fp, [sp, #12]
   1f15c:	str	lr, [sp, #16]
   1f160:	add	fp, sp, #16
   1f164:	sub	sp, sp, #76	; 0x4c
   1f168:	str	r0, [fp, #-64]	; 0xffffffc0
   1f16c:	str	r1, [fp, #-68]	; 0xffffffbc
   1f170:	str	r2, [fp, #-72]	; 0xffffffb8
   1f174:	str	r3, [fp, #-76]	; 0xffffffb4
   1f178:	mov	r2, #0
   1f17c:	mov	r3, #0
   1f180:	strd	r2, [fp, #-44]	; 0xffffffd4
   1f184:	mov	r3, #0
   1f188:	str	r3, [fp, #-28]	; 0xffffffe4
   1f18c:	ldr	r1, [fp, #4]
   1f190:	mov	r2, #0
   1f194:	mov	r3, #0
   1f198:	strd	r2, [r1]
   1f19c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1f1a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f1a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f1a8:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1f1ac:	str	r0, [fp, #-68]	; 0xffffffbc
   1f1b0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f1b4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1f1b8:	cmp	r2, r3
   1f1bc:	bne	1f1c8 <flatcc_emitter_copy_buffer@@Base+0x1a7c>
   1f1c0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1f1c4:	b	1f328 <flatcc_emitter_copy_buffer@@Base+0x1bdc>
   1f1c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1f1cc:	str	r3, [fp, #-24]	; 0xffffffe8
   1f1d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f1d4:	ldr	r6, [r3]
   1f1d8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1f1dc:	str	r3, [fp, #-32]	; 0xffffffe0
   1f1e0:	sub	r2, fp, #56	; 0x38
   1f1e4:	sub	r3, fp, #60	; 0x3c
   1f1e8:	str	r3, [sp, #4]
   1f1ec:	sub	r3, fp, #52	; 0x34
   1f1f0:	str	r3, [sp]
   1f1f4:	mov	r3, r2
   1f1f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1f1fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1f200:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f204:	blx	r6
   1f208:	str	r0, [fp, #-68]	; 0xffffffbc
   1f20c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f210:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1f214:	cmp	r2, r3
   1f218:	bne	1f224 <flatcc_emitter_copy_buffer@@Base+0x1ad8>
   1f21c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1f220:	b	1f328 <flatcc_emitter_copy_buffer@@Base+0x1bdc>
   1f224:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1f228:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1f22c:	cmp	r2, r3
   1f230:	bne	1f250 <flatcc_emitter_copy_buffer@@Base+0x1b04>
   1f234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f238:	add	r3, r3, #4
   1f23c:	str	r3, [fp, #-24]	; 0xffffffe8
   1f240:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f244:	ldr	r3, [r3]
   1f248:	cmp	r3, #0
   1f24c:	bne	1f1d0 <flatcc_emitter_copy_buffer@@Base+0x1a84>
   1f250:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1f254:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1f258:	cmp	r2, r3
   1f25c:	bne	1f27c <flatcc_emitter_copy_buffer@@Base+0x1b30>
   1f260:	mov	r3, #23
   1f264:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1f268:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f26c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f270:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f274:	mov	r3, r0
   1f278:	b	1f328 <flatcc_emitter_copy_buffer@@Base+0x1bdc>
   1f27c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f280:	add	r2, r3, #1
   1f284:	str	r2, [fp, #-28]	; 0xffffffe4
   1f288:	cmp	r3, #0
   1f28c:	beq	1f2bc <flatcc_emitter_copy_buffer@@Base+0x1b70>
   1f290:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1f294:	ldr	r3, [r3, #12]
   1f298:	cmp	r3, #0
   1f29c:	beq	1f2bc <flatcc_emitter_copy_buffer@@Base+0x1b70>
   1f2a0:	mov	r3, #14
   1f2a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1f2a8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f2ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f2b0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f2b4:	mov	r3, r0
   1f2b8:	b	1f328 <flatcc_emitter_copy_buffer@@Base+0x1bdc>
   1f2bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f2c0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1f2c4:	sub	r1, fp, #44	; 0x2c
   1f2c8:	str	r1, [sp, #8]
   1f2cc:	strd	r2, [sp]
   1f2d0:	mov	r3, r0
   1f2d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1f2d8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1f2dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1f2e0:	bl	1e4e0 <flatcc_emitter_copy_buffer@@Base+0xd94>
   1f2e4:	mov	r2, r0
   1f2e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1f2ec:	cmp	r3, r2
   1f2f0:	bne	1f2fc <flatcc_emitter_copy_buffer@@Base+0x1bb0>
   1f2f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1f2f8:	b	1f328 <flatcc_emitter_copy_buffer@@Base+0x1bdc>
   1f2fc:	ldr	r3, [fp, #4]
   1f300:	ldrd	r0, [r3]
   1f304:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1f308:	adds	r4, r0, r2
   1f30c:	adc	r5, r1, r3
   1f310:	ldr	r3, [fp, #4]
   1f314:	strd	r4, [r3]
   1f318:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f31c:	cmp	r3, #0
   1f320:	bne	1f1c8 <flatcc_emitter_copy_buffer@@Base+0x1a7c>
   1f324:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1f328:	mov	r0, r3
   1f32c:	sub	sp, fp, #16
   1f330:	ldrd	r4, [sp]
   1f334:	ldr	r6, [sp, #8]
   1f338:	ldr	fp, [sp, #12]
   1f33c:	add	sp, sp, #16
   1f340:	pop	{pc}		; (ldr pc, [sp], #4)
   1f344:	str	r4, [sp, #-12]!
   1f348:	str	fp, [sp, #4]
   1f34c:	str	lr, [sp, #8]
   1f350:	add	fp, sp, #8
   1f354:	sub	sp, sp, #68	; 0x44
   1f358:	str	r0, [fp, #-48]	; 0xffffffd0
   1f35c:	str	r1, [fp, #-52]	; 0xffffffcc
   1f360:	str	r2, [fp, #-56]	; 0xffffffc8
   1f364:	str	r3, [fp, #-60]	; 0xffffffc4
   1f368:	mov	r3, #0
   1f36c:	str	r3, [fp, #-28]	; 0xffffffe4
   1f370:	mov	r3, #0
   1f374:	str	r3, [fp, #-20]	; 0xffffffec
   1f378:	ldr	r3, [fp, #4]
   1f37c:	mov	r2, #0
   1f380:	str	r2, [r3]
   1f384:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f388:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f38c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f390:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1f394:	str	r0, [fp, #-52]	; 0xffffffcc
   1f398:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f39c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f3a0:	cmp	r2, r3
   1f3a4:	bne	1f3b0 <flatcc_emitter_copy_buffer@@Base+0x1c64>
   1f3a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f3ac:	b	1f50c <flatcc_emitter_copy_buffer@@Base+0x1dc0>
   1f3b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f3b4:	str	r3, [fp, #-16]
   1f3b8:	ldr	r3, [fp, #-16]
   1f3bc:	ldr	r4, [r3]
   1f3c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f3c4:	str	r3, [fp, #-24]	; 0xffffffe8
   1f3c8:	sub	r2, fp, #40	; 0x28
   1f3cc:	sub	r3, fp, #44	; 0x2c
   1f3d0:	str	r3, [sp, #4]
   1f3d4:	sub	r3, fp, #36	; 0x24
   1f3d8:	str	r3, [sp]
   1f3dc:	mov	r3, r2
   1f3e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f3e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f3e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f3ec:	blx	r4
   1f3f0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f3f4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f3f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f3fc:	cmp	r2, r3
   1f400:	bne	1f40c <flatcc_emitter_copy_buffer@@Base+0x1cc0>
   1f404:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f408:	b	1f50c <flatcc_emitter_copy_buffer@@Base+0x1dc0>
   1f40c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f414:	cmp	r2, r3
   1f418:	bne	1f438 <flatcc_emitter_copy_buffer@@Base+0x1cec>
   1f41c:	ldr	r3, [fp, #-16]
   1f420:	add	r3, r3, #4
   1f424:	str	r3, [fp, #-16]
   1f428:	ldr	r3, [fp, #-16]
   1f42c:	ldr	r3, [r3]
   1f430:	cmp	r3, #0
   1f434:	bne	1f3b8 <flatcc_emitter_copy_buffer@@Base+0x1c6c>
   1f438:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f43c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f440:	cmp	r2, r3
   1f444:	bne	1f464 <flatcc_emitter_copy_buffer@@Base+0x1d18>
   1f448:	mov	r3, #23
   1f44c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f450:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f454:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f458:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f45c:	mov	r3, r0
   1f460:	b	1f50c <flatcc_emitter_copy_buffer@@Base+0x1dc0>
   1f464:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f468:	add	r2, r3, #1
   1f46c:	str	r2, [fp, #-20]	; 0xffffffec
   1f470:	cmp	r3, #0
   1f474:	beq	1f4a4 <flatcc_emitter_copy_buffer@@Base+0x1d58>
   1f478:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f47c:	ldr	r3, [r3, #12]
   1f480:	cmp	r3, #0
   1f484:	beq	1f4a4 <flatcc_emitter_copy_buffer@@Base+0x1d58>
   1f488:	mov	r3, #14
   1f48c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f490:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f494:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f498:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f49c:	mov	r3, r0
   1f4a0:	b	1f50c <flatcc_emitter_copy_buffer@@Base+0x1dc0>
   1f4a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f4a8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f4ac:	sub	r1, fp, #28
   1f4b0:	str	r1, [sp, #8]
   1f4b4:	strd	r2, [sp]
   1f4b8:	mov	r3, r0
   1f4bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f4c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f4c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f4c8:	bl	1e5a0 <flatcc_emitter_copy_buffer@@Base+0xe54>
   1f4cc:	mov	r2, r0
   1f4d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f4d4:	cmp	r3, r2
   1f4d8:	bne	1f4e4 <flatcc_emitter_copy_buffer@@Base+0x1d98>
   1f4dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f4e0:	b	1f50c <flatcc_emitter_copy_buffer@@Base+0x1dc0>
   1f4e4:	ldr	r3, [fp, #4]
   1f4e8:	ldr	r2, [r3]
   1f4ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1f4f0:	add	r2, r2, r3
   1f4f4:	ldr	r3, [fp, #4]
   1f4f8:	str	r2, [r3]
   1f4fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f500:	cmp	r3, #0
   1f504:	bne	1f3b0 <flatcc_emitter_copy_buffer@@Base+0x1c64>
   1f508:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f50c:	mov	r0, r3
   1f510:	sub	sp, fp, #8
   1f514:	ldr	r4, [sp]
   1f518:	ldr	fp, [sp, #4]
   1f51c:	add	sp, sp, #8
   1f520:	pop	{pc}		; (ldr pc, [sp], #4)
   1f524:	str	r4, [sp, #-12]!
   1f528:	str	fp, [sp, #4]
   1f52c:	str	lr, [sp, #8]
   1f530:	add	fp, sp, #8
   1f534:	sub	sp, sp, #68	; 0x44
   1f538:	str	r0, [fp, #-48]	; 0xffffffd0
   1f53c:	str	r1, [fp, #-52]	; 0xffffffcc
   1f540:	str	r2, [fp, #-56]	; 0xffffffc8
   1f544:	str	r3, [fp, #-60]	; 0xffffffc4
   1f548:	mov	r3, #0
   1f54c:	strh	r3, [fp, #-26]	; 0xffffffe6
   1f550:	mov	r3, #0
   1f554:	str	r3, [fp, #-20]	; 0xffffffec
   1f558:	ldr	r3, [fp, #4]
   1f55c:	mov	r2, #0
   1f560:	strh	r2, [r3]
   1f564:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f568:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f56c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f570:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1f574:	str	r0, [fp, #-52]	; 0xffffffcc
   1f578:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f57c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f580:	cmp	r2, r3
   1f584:	bne	1f590 <flatcc_emitter_copy_buffer@@Base+0x1e44>
   1f588:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f58c:	b	1f6fc <flatcc_emitter_copy_buffer@@Base+0x1fb0>
   1f590:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f594:	str	r3, [fp, #-16]
   1f598:	ldr	r3, [fp, #-16]
   1f59c:	ldr	r4, [r3]
   1f5a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f5a4:	str	r3, [fp, #-24]	; 0xffffffe8
   1f5a8:	sub	r2, fp, #40	; 0x28
   1f5ac:	sub	r3, fp, #44	; 0x2c
   1f5b0:	str	r3, [sp, #4]
   1f5b4:	sub	r3, fp, #36	; 0x24
   1f5b8:	str	r3, [sp]
   1f5bc:	mov	r3, r2
   1f5c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f5c4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f5c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f5cc:	blx	r4
   1f5d0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f5d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f5d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f5dc:	cmp	r2, r3
   1f5e0:	bne	1f5ec <flatcc_emitter_copy_buffer@@Base+0x1ea0>
   1f5e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f5e8:	b	1f6fc <flatcc_emitter_copy_buffer@@Base+0x1fb0>
   1f5ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f5f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f5f4:	cmp	r2, r3
   1f5f8:	bne	1f618 <flatcc_emitter_copy_buffer@@Base+0x1ecc>
   1f5fc:	ldr	r3, [fp, #-16]
   1f600:	add	r3, r3, #4
   1f604:	str	r3, [fp, #-16]
   1f608:	ldr	r3, [fp, #-16]
   1f60c:	ldr	r3, [r3]
   1f610:	cmp	r3, #0
   1f614:	bne	1f598 <flatcc_emitter_copy_buffer@@Base+0x1e4c>
   1f618:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f61c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f620:	cmp	r2, r3
   1f624:	bne	1f644 <flatcc_emitter_copy_buffer@@Base+0x1ef8>
   1f628:	mov	r3, #23
   1f62c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f630:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f634:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f638:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f63c:	mov	r3, r0
   1f640:	b	1f6fc <flatcc_emitter_copy_buffer@@Base+0x1fb0>
   1f644:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f648:	add	r2, r3, #1
   1f64c:	str	r2, [fp, #-20]	; 0xffffffec
   1f650:	cmp	r3, #0
   1f654:	beq	1f684 <flatcc_emitter_copy_buffer@@Base+0x1f38>
   1f658:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f65c:	ldr	r3, [r3, #12]
   1f660:	cmp	r3, #0
   1f664:	beq	1f684 <flatcc_emitter_copy_buffer@@Base+0x1f38>
   1f668:	mov	r3, #14
   1f66c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f670:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f674:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f678:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f67c:	mov	r3, r0
   1f680:	b	1f6fc <flatcc_emitter_copy_buffer@@Base+0x1fb0>
   1f684:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f688:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f68c:	sub	r1, fp, #26
   1f690:	str	r1, [sp, #8]
   1f694:	strd	r2, [sp]
   1f698:	mov	r3, r0
   1f69c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f6a0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f6a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f6a8:	bl	1e668 <flatcc_emitter_copy_buffer@@Base+0xf1c>
   1f6ac:	mov	r2, r0
   1f6b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f6b4:	cmp	r3, r2
   1f6b8:	bne	1f6c4 <flatcc_emitter_copy_buffer@@Base+0x1f78>
   1f6bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f6c0:	b	1f6fc <flatcc_emitter_copy_buffer@@Base+0x1fb0>
   1f6c4:	ldr	r3, [fp, #4]
   1f6c8:	ldrsh	r3, [r3]
   1f6cc:	uxth	r2, r3
   1f6d0:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   1f6d4:	uxth	r3, r3
   1f6d8:	add	r3, r2, r3
   1f6dc:	uxth	r3, r3
   1f6e0:	sxth	r2, r3
   1f6e4:	ldr	r3, [fp, #4]
   1f6e8:	strh	r2, [r3]
   1f6ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f6f0:	cmp	r3, #0
   1f6f4:	bne	1f590 <flatcc_emitter_copy_buffer@@Base+0x1e44>
   1f6f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f6fc:	mov	r0, r3
   1f700:	sub	sp, fp, #8
   1f704:	ldr	r4, [sp]
   1f708:	ldr	fp, [sp, #4]
   1f70c:	add	sp, sp, #8
   1f710:	pop	{pc}		; (ldr pc, [sp], #4)
   1f714:	str	r4, [sp, #-12]!
   1f718:	str	fp, [sp, #4]
   1f71c:	str	lr, [sp, #8]
   1f720:	add	fp, sp, #8
   1f724:	sub	sp, sp, #68	; 0x44
   1f728:	str	r0, [fp, #-48]	; 0xffffffd0
   1f72c:	str	r1, [fp, #-52]	; 0xffffffcc
   1f730:	str	r2, [fp, #-56]	; 0xffffffc8
   1f734:	str	r3, [fp, #-60]	; 0xffffffc4
   1f738:	mov	r3, #0
   1f73c:	strb	r3, [fp, #-25]	; 0xffffffe7
   1f740:	mov	r3, #0
   1f744:	str	r3, [fp, #-20]	; 0xffffffec
   1f748:	ldr	r3, [fp, #4]
   1f74c:	mov	r2, #0
   1f750:	strb	r2, [r3]
   1f754:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f758:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f75c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f760:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1f764:	str	r0, [fp, #-52]	; 0xffffffcc
   1f768:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f76c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f770:	cmp	r2, r3
   1f774:	bne	1f780 <flatcc_emitter_copy_buffer@@Base+0x2034>
   1f778:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f77c:	b	1f8ec <flatcc_emitter_copy_buffer@@Base+0x21a0>
   1f780:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f784:	str	r3, [fp, #-16]
   1f788:	ldr	r3, [fp, #-16]
   1f78c:	ldr	r4, [r3]
   1f790:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f794:	str	r3, [fp, #-24]	; 0xffffffe8
   1f798:	sub	r2, fp, #40	; 0x28
   1f79c:	sub	r3, fp, #44	; 0x2c
   1f7a0:	str	r3, [sp, #4]
   1f7a4:	sub	r3, fp, #36	; 0x24
   1f7a8:	str	r3, [sp]
   1f7ac:	mov	r3, r2
   1f7b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f7b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f7b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f7bc:	blx	r4
   1f7c0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f7c4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f7c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f7cc:	cmp	r2, r3
   1f7d0:	bne	1f7dc <flatcc_emitter_copy_buffer@@Base+0x2090>
   1f7d4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f7d8:	b	1f8ec <flatcc_emitter_copy_buffer@@Base+0x21a0>
   1f7dc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f7e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f7e4:	cmp	r2, r3
   1f7e8:	bne	1f808 <flatcc_emitter_copy_buffer@@Base+0x20bc>
   1f7ec:	ldr	r3, [fp, #-16]
   1f7f0:	add	r3, r3, #4
   1f7f4:	str	r3, [fp, #-16]
   1f7f8:	ldr	r3, [fp, #-16]
   1f7fc:	ldr	r3, [r3]
   1f800:	cmp	r3, #0
   1f804:	bne	1f788 <flatcc_emitter_copy_buffer@@Base+0x203c>
   1f808:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f80c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f810:	cmp	r2, r3
   1f814:	bne	1f834 <flatcc_emitter_copy_buffer@@Base+0x20e8>
   1f818:	mov	r3, #23
   1f81c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f820:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f824:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f828:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f82c:	mov	r3, r0
   1f830:	b	1f8ec <flatcc_emitter_copy_buffer@@Base+0x21a0>
   1f834:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f838:	add	r2, r3, #1
   1f83c:	str	r2, [fp, #-20]	; 0xffffffec
   1f840:	cmp	r3, #0
   1f844:	beq	1f874 <flatcc_emitter_copy_buffer@@Base+0x2128>
   1f848:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f84c:	ldr	r3, [r3, #12]
   1f850:	cmp	r3, #0
   1f854:	beq	1f874 <flatcc_emitter_copy_buffer@@Base+0x2128>
   1f858:	mov	r3, #14
   1f85c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f860:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f864:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f868:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1f86c:	mov	r3, r0
   1f870:	b	1f8ec <flatcc_emitter_copy_buffer@@Base+0x21a0>
   1f874:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f878:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f87c:	sub	r1, fp, #25
   1f880:	str	r1, [sp, #8]
   1f884:	strd	r2, [sp]
   1f888:	mov	r3, r0
   1f88c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f890:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f894:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f898:	bl	1e734 <flatcc_emitter_copy_buffer@@Base+0xfe8>
   1f89c:	mov	r2, r0
   1f8a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f8a4:	cmp	r3, r2
   1f8a8:	bne	1f8b4 <flatcc_emitter_copy_buffer@@Base+0x2168>
   1f8ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f8b0:	b	1f8ec <flatcc_emitter_copy_buffer@@Base+0x21a0>
   1f8b4:	ldr	r3, [fp, #4]
   1f8b8:	ldrsb	r3, [r3]
   1f8bc:	uxtb	r2, r3
   1f8c0:	ldrsb	r3, [fp, #-25]	; 0xffffffe7
   1f8c4:	uxtb	r3, r3
   1f8c8:	add	r3, r2, r3
   1f8cc:	uxtb	r3, r3
   1f8d0:	sxtb	r2, r3
   1f8d4:	ldr	r3, [fp, #4]
   1f8d8:	strb	r2, [r3]
   1f8dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f8e0:	cmp	r3, #0
   1f8e4:	bne	1f780 <flatcc_emitter_copy_buffer@@Base+0x2034>
   1f8e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f8ec:	mov	r0, r3
   1f8f0:	sub	sp, fp, #8
   1f8f4:	ldr	r4, [sp]
   1f8f8:	ldr	fp, [sp, #4]
   1f8fc:	add	sp, sp, #8
   1f900:	pop	{pc}		; (ldr pc, [sp], #4)
   1f904:	str	r4, [sp, #-12]!
   1f908:	str	fp, [sp, #4]
   1f90c:	str	lr, [sp, #8]
   1f910:	add	fp, sp, #8
   1f914:	sub	sp, sp, #68	; 0x44
   1f918:	str	r0, [fp, #-48]	; 0xffffffd0
   1f91c:	str	r1, [fp, #-52]	; 0xffffffcc
   1f920:	str	r2, [fp, #-56]	; 0xffffffc8
   1f924:	str	r3, [fp, #-60]	; 0xffffffc4
   1f928:	mov	r3, #0
   1f92c:	strb	r3, [fp, #-25]	; 0xffffffe7
   1f930:	mov	r3, #0
   1f934:	str	r3, [fp, #-20]	; 0xffffffec
   1f938:	ldr	r3, [fp, #4]
   1f93c:	mov	r2, #0
   1f940:	strb	r2, [r3]
   1f944:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f948:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f94c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f950:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1f954:	str	r0, [fp, #-52]	; 0xffffffcc
   1f958:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f95c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f960:	cmp	r2, r3
   1f964:	bne	1f970 <flatcc_emitter_copy_buffer@@Base+0x2224>
   1f968:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f96c:	b	1fad0 <flatcc_emitter_copy_buffer@@Base+0x2384>
   1f970:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f974:	str	r3, [fp, #-16]
   1f978:	ldr	r3, [fp, #-16]
   1f97c:	ldr	r4, [r3]
   1f980:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f984:	str	r3, [fp, #-24]	; 0xffffffe8
   1f988:	sub	r2, fp, #40	; 0x28
   1f98c:	sub	r3, fp, #44	; 0x2c
   1f990:	str	r3, [sp, #4]
   1f994:	sub	r3, fp, #36	; 0x24
   1f998:	str	r3, [sp]
   1f99c:	mov	r3, r2
   1f9a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f9a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f9a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f9ac:	blx	r4
   1f9b0:	str	r0, [fp, #-52]	; 0xffffffcc
   1f9b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f9b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f9bc:	cmp	r2, r3
   1f9c0:	bne	1f9cc <flatcc_emitter_copy_buffer@@Base+0x2280>
   1f9c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f9c8:	b	1fad0 <flatcc_emitter_copy_buffer@@Base+0x2384>
   1f9cc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f9d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f9d4:	cmp	r2, r3
   1f9d8:	bne	1f9f8 <flatcc_emitter_copy_buffer@@Base+0x22ac>
   1f9dc:	ldr	r3, [fp, #-16]
   1f9e0:	add	r3, r3, #4
   1f9e4:	str	r3, [fp, #-16]
   1f9e8:	ldr	r3, [fp, #-16]
   1f9ec:	ldr	r3, [r3]
   1f9f0:	cmp	r3, #0
   1f9f4:	bne	1f978 <flatcc_emitter_copy_buffer@@Base+0x222c>
   1f9f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f9fc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fa00:	cmp	r2, r3
   1fa04:	bne	1fa24 <flatcc_emitter_copy_buffer@@Base+0x22d8>
   1fa08:	mov	r3, #23
   1fa0c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fa10:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fa14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fa18:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1fa1c:	mov	r3, r0
   1fa20:	b	1fad0 <flatcc_emitter_copy_buffer@@Base+0x2384>
   1fa24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fa28:	add	r2, r3, #1
   1fa2c:	str	r2, [fp, #-20]	; 0xffffffec
   1fa30:	cmp	r3, #0
   1fa34:	beq	1fa64 <flatcc_emitter_copy_buffer@@Base+0x2318>
   1fa38:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fa3c:	ldr	r3, [r3, #12]
   1fa40:	cmp	r3, #0
   1fa44:	beq	1fa64 <flatcc_emitter_copy_buffer@@Base+0x2318>
   1fa48:	mov	r3, #14
   1fa4c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fa50:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fa54:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fa58:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1fa5c:	mov	r3, r0
   1fa60:	b	1fad0 <flatcc_emitter_copy_buffer@@Base+0x2384>
   1fa64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fa68:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1fa6c:	sub	r1, fp, #25
   1fa70:	str	r1, [sp, #8]
   1fa74:	strd	r2, [sp]
   1fa78:	mov	r3, r0
   1fa7c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fa80:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fa84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fa88:	bl	1e280 <flatcc_emitter_copy_buffer@@Base+0xb34>
   1fa8c:	mov	r2, r0
   1fa90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1fa94:	cmp	r3, r2
   1fa98:	bne	1faa4 <flatcc_emitter_copy_buffer@@Base+0x2358>
   1fa9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1faa0:	b	1fad0 <flatcc_emitter_copy_buffer@@Base+0x2384>
   1faa4:	ldr	r3, [fp, #4]
   1faa8:	ldrb	r2, [r3]
   1faac:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1fab0:	add	r3, r2, r3
   1fab4:	uxtb	r2, r3
   1fab8:	ldr	r3, [fp, #4]
   1fabc:	strb	r2, [r3]
   1fac0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1fac4:	cmp	r3, #0
   1fac8:	bne	1f970 <flatcc_emitter_copy_buffer@@Base+0x2224>
   1facc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fad0:	mov	r0, r3
   1fad4:	sub	sp, fp, #8
   1fad8:	ldr	r4, [sp]
   1fadc:	ldr	fp, [sp, #4]
   1fae0:	add	sp, sp, #8
   1fae4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fae8:	str	r4, [sp, #-12]!
   1faec:	str	fp, [sp, #4]
   1faf0:	str	lr, [sp, #8]
   1faf4:	add	fp, sp, #8
   1faf8:	sub	sp, sp, #68	; 0x44
   1fafc:	str	r0, [fp, #-48]	; 0xffffffd0
   1fb00:	str	r1, [fp, #-52]	; 0xffffffcc
   1fb04:	str	r2, [fp, #-56]	; 0xffffffc8
   1fb08:	str	r3, [fp, #-60]	; 0xffffffc4
   1fb0c:	mov	r3, #0
   1fb10:	str	r3, [fp, #-28]	; 0xffffffe4
   1fb14:	mov	r3, #0
   1fb18:	str	r3, [fp, #-20]	; 0xffffffec
   1fb1c:	ldr	r3, [fp, #4]
   1fb20:	mov	r2, #0
   1fb24:	str	r2, [r3]
   1fb28:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fb2c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fb30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fb34:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1fb38:	str	r0, [fp, #-52]	; 0xffffffcc
   1fb3c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1fb40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1fb44:	cmp	r2, r3
   1fb48:	bne	1fb54 <flatcc_emitter_copy_buffer@@Base+0x2408>
   1fb4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fb50:	b	1fcb0 <flatcc_emitter_copy_buffer@@Base+0x2564>
   1fb54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1fb58:	str	r3, [fp, #-16]
   1fb5c:	ldr	r3, [fp, #-16]
   1fb60:	ldr	r4, [r3]
   1fb64:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fb68:	str	r3, [fp, #-24]	; 0xffffffe8
   1fb6c:	sub	r2, fp, #40	; 0x28
   1fb70:	sub	r3, fp, #44	; 0x2c
   1fb74:	str	r3, [sp, #4]
   1fb78:	sub	r3, fp, #36	; 0x24
   1fb7c:	str	r3, [sp]
   1fb80:	mov	r3, r2
   1fb84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fb88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fb8c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fb90:	blx	r4
   1fb94:	str	r0, [fp, #-52]	; 0xffffffcc
   1fb98:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1fb9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1fba0:	cmp	r2, r3
   1fba4:	bne	1fbb0 <flatcc_emitter_copy_buffer@@Base+0x2464>
   1fba8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fbac:	b	1fcb0 <flatcc_emitter_copy_buffer@@Base+0x2564>
   1fbb0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1fbb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fbb8:	cmp	r2, r3
   1fbbc:	bne	1fbdc <flatcc_emitter_copy_buffer@@Base+0x2490>
   1fbc0:	ldr	r3, [fp, #-16]
   1fbc4:	add	r3, r3, #4
   1fbc8:	str	r3, [fp, #-16]
   1fbcc:	ldr	r3, [fp, #-16]
   1fbd0:	ldr	r3, [r3]
   1fbd4:	cmp	r3, #0
   1fbd8:	bne	1fb5c <flatcc_emitter_copy_buffer@@Base+0x2410>
   1fbdc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fbe0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fbe4:	cmp	r2, r3
   1fbe8:	bne	1fc08 <flatcc_emitter_copy_buffer@@Base+0x24bc>
   1fbec:	mov	r3, #23
   1fbf0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fbf4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fbf8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fbfc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1fc00:	mov	r3, r0
   1fc04:	b	1fcb0 <flatcc_emitter_copy_buffer@@Base+0x2564>
   1fc08:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fc0c:	add	r2, r3, #1
   1fc10:	str	r2, [fp, #-20]	; 0xffffffec
   1fc14:	cmp	r3, #0
   1fc18:	beq	1fc48 <flatcc_emitter_copy_buffer@@Base+0x24fc>
   1fc1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fc20:	ldr	r3, [r3, #12]
   1fc24:	cmp	r3, #0
   1fc28:	beq	1fc48 <flatcc_emitter_copy_buffer@@Base+0x24fc>
   1fc2c:	mov	r3, #14
   1fc30:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fc34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fc38:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fc3c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1fc40:	mov	r3, r0
   1fc44:	b	1fcb0 <flatcc_emitter_copy_buffer@@Base+0x2564>
   1fc48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fc4c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1fc50:	sub	r1, fp, #28
   1fc54:	str	r1, [sp, #8]
   1fc58:	strd	r2, [sp]
   1fc5c:	mov	r3, r0
   1fc60:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1fc64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1fc68:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fc6c:	bl	1e7f8 <flatcc_emitter_copy_buffer@@Base+0x10ac>
   1fc70:	mov	r2, r0
   1fc74:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1fc78:	cmp	r3, r2
   1fc7c:	bne	1fc88 <flatcc_emitter_copy_buffer@@Base+0x253c>
   1fc80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1fc84:	b	1fcb0 <flatcc_emitter_copy_buffer@@Base+0x2564>
   1fc88:	ldr	r3, [fp, #4]
   1fc8c:	vldr	s14, [r3]
   1fc90:	vldr	s15, [fp, #-28]	; 0xffffffe4
   1fc94:	vadd.f32	s15, s14, s15
   1fc98:	ldr	r3, [fp, #4]
   1fc9c:	vstr	s15, [r3]
   1fca0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1fca4:	cmp	r3, #0
   1fca8:	bne	1fb54 <flatcc_emitter_copy_buffer@@Base+0x2408>
   1fcac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fcb0:	mov	r0, r3
   1fcb4:	sub	sp, fp, #8
   1fcb8:	ldr	r4, [sp]
   1fcbc:	ldr	fp, [sp, #4]
   1fcc0:	add	sp, sp, #8
   1fcc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fcc8:	str	r4, [sp, #-12]!
   1fccc:	str	fp, [sp, #4]
   1fcd0:	str	lr, [sp, #8]
   1fcd4:	add	fp, sp, #8
   1fcd8:	sub	sp, sp, #76	; 0x4c
   1fcdc:	str	r0, [fp, #-56]	; 0xffffffc8
   1fce0:	str	r1, [fp, #-60]	; 0xffffffc4
   1fce4:	str	r2, [fp, #-64]	; 0xffffffc0
   1fce8:	str	r3, [fp, #-68]	; 0xffffffbc
   1fcec:	mov	r2, #0
   1fcf0:	mov	r3, #0
   1fcf4:	strd	r2, [fp, #-36]	; 0xffffffdc
   1fcf8:	mov	r3, #0
   1fcfc:	str	r3, [fp, #-20]	; 0xffffffec
   1fd00:	ldr	r1, [fp, #4]
   1fd04:	mov	r2, #0
   1fd08:	mov	r3, #0
   1fd0c:	strd	r2, [r1]
   1fd10:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1fd14:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1fd18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1fd1c:	bl	1ddcc <flatcc_emitter_copy_buffer@@Base+0x680>
   1fd20:	str	r0, [fp, #-60]	; 0xffffffc4
   1fd24:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1fd28:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1fd2c:	cmp	r2, r3
   1fd30:	bne	1fd3c <flatcc_emitter_copy_buffer@@Base+0x25f0>
   1fd34:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1fd38:	b	1fe98 <flatcc_emitter_copy_buffer@@Base+0x274c>
   1fd3c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1fd40:	str	r3, [fp, #-16]
   1fd44:	ldr	r3, [fp, #-16]
   1fd48:	ldr	r4, [r3]
   1fd4c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1fd50:	str	r3, [fp, #-24]	; 0xffffffe8
   1fd54:	sub	r2, fp, #48	; 0x30
   1fd58:	sub	r3, fp, #52	; 0x34
   1fd5c:	str	r3, [sp, #4]
   1fd60:	sub	r3, fp, #44	; 0x2c
   1fd64:	str	r3, [sp]
   1fd68:	mov	r3, r2
   1fd6c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1fd70:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fd74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1fd78:	blx	r4
   1fd7c:	str	r0, [fp, #-60]	; 0xffffffc4
   1fd80:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1fd84:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1fd88:	cmp	r2, r3
   1fd8c:	bne	1fd98 <flatcc_emitter_copy_buffer@@Base+0x264c>
   1fd90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1fd94:	b	1fe98 <flatcc_emitter_copy_buffer@@Base+0x274c>
   1fd98:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1fd9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fda0:	cmp	r2, r3
   1fda4:	bne	1fdc4 <flatcc_emitter_copy_buffer@@Base+0x2678>
   1fda8:	ldr	r3, [fp, #-16]
   1fdac:	add	r3, r3, #4
   1fdb0:	str	r3, [fp, #-16]
   1fdb4:	ldr	r3, [fp, #-16]
   1fdb8:	ldr	r3, [r3]
   1fdbc:	cmp	r3, #0
   1fdc0:	bne	1fd44 <flatcc_emitter_copy_buffer@@Base+0x25f8>
   1fdc4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fdc8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1fdcc:	cmp	r2, r3
   1fdd0:	bne	1fdf0 <flatcc_emitter_copy_buffer@@Base+0x26a4>
   1fdd4:	mov	r3, #23
   1fdd8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1fddc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1fde0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1fde4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1fde8:	mov	r3, r0
   1fdec:	b	1fe98 <flatcc_emitter_copy_buffer@@Base+0x274c>
   1fdf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fdf4:	add	r2, r3, #1
   1fdf8:	str	r2, [fp, #-20]	; 0xffffffec
   1fdfc:	cmp	r3, #0
   1fe00:	beq	1fe30 <flatcc_emitter_copy_buffer@@Base+0x26e4>
   1fe04:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1fe08:	ldr	r3, [r3, #12]
   1fe0c:	cmp	r3, #0
   1fe10:	beq	1fe30 <flatcc_emitter_copy_buffer@@Base+0x26e4>
   1fe14:	mov	r3, #14
   1fe18:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1fe1c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1fe20:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1fe24:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   1fe28:	mov	r3, r0
   1fe2c:	b	1fe98 <flatcc_emitter_copy_buffer@@Base+0x274c>
   1fe30:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1fe34:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1fe38:	sub	r1, fp, #36	; 0x24
   1fe3c:	str	r1, [sp, #8]
   1fe40:	strd	r2, [sp]
   1fe44:	mov	r3, r0
   1fe48:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1fe4c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1fe50:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1fe54:	bl	1e864 <flatcc_emitter_copy_buffer@@Base+0x1118>
   1fe58:	mov	r2, r0
   1fe5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1fe60:	cmp	r3, r2
   1fe64:	bne	1fe70 <flatcc_emitter_copy_buffer@@Base+0x2724>
   1fe68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1fe6c:	b	1fe98 <flatcc_emitter_copy_buffer@@Base+0x274c>
   1fe70:	ldr	r3, [fp, #4]
   1fe74:	vldr	d6, [r3]
   1fe78:	vldr	d7, [fp, #-36]	; 0xffffffdc
   1fe7c:	vadd.f64	d7, d6, d7
   1fe80:	ldr	r3, [fp, #4]
   1fe84:	vstr	d7, [r3]
   1fe88:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fe8c:	cmp	r3, #0
   1fe90:	bne	1fd3c <flatcc_emitter_copy_buffer@@Base+0x25f0>
   1fe94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1fe98:	mov	r0, r3
   1fe9c:	sub	sp, fp, #8
   1fea0:	ldr	r4, [sp]
   1fea4:	ldr	fp, [sp, #4]
   1fea8:	add	sp, sp, #8
   1feac:	pop	{pc}		; (ldr pc, [sp], #4)
   1feb0:	push	{fp}		; (str fp, [sp, #-4]!)
   1feb4:	add	fp, sp, #0
   1feb8:	sub	sp, sp, #20
   1febc:	vstr	d0, [fp, #-20]	; 0xffffffec
   1fec0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1fec4:	strd	r2, [fp, #-12]
   1fec8:	ldrd	r2, [fp, #-12]
   1fecc:	mov	r0, r2
   1fed0:	mov	r1, r3
   1fed4:	add	sp, fp, #0
   1fed8:	pop	{fp}		; (ldr fp, [sp], #4)
   1fedc:	bx	lr
   1fee0:	push	{fp}		; (str fp, [sp, #-4]!)
   1fee4:	add	fp, sp, #0
   1fee8:	sub	sp, sp, #20
   1feec:	strd	r0, [fp, #-20]	; 0xffffffec
   1fef0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1fef4:	strd	r2, [fp, #-12]
   1fef8:	ldrd	r2, [fp, #-12]
   1fefc:	vmov	d7, r2, r3
   1ff00:	vmov.f64	d0, d7
   1ff04:	add	sp, fp, #0
   1ff08:	pop	{fp}		; (ldr fp, [sp], #4)
   1ff0c:	bx	lr
   1ff10:	push	{fp}		; (str fp, [sp, #-4]!)
   1ff14:	add	fp, sp, #0
   1ff18:	sub	sp, sp, #20
   1ff1c:	vstr	d0, [fp, #-20]	; 0xffffffec
   1ff20:	vldr	d7, [fp, #-20]	; 0xffffffec
   1ff24:	vcvt.s32.f64	s15, d7
   1ff28:	vmov	r3, s15
   1ff2c:	str	r3, [fp, #-8]
   1ff30:	vldr	d7, [fp, #-20]	; 0xffffffec
   1ff34:	vcmpe.f64	d7, #0.0
   1ff38:	vmrs	APSR_nzcv, fpscr
   1ff3c:	bpl	1ff48 <flatcc_emitter_copy_buffer@@Base+0x27fc>
   1ff40:	ldr	r3, [fp, #-8]
   1ff44:	b	1ff78 <flatcc_emitter_copy_buffer@@Base+0x282c>
   1ff48:	ldr	r3, [fp, #-8]
   1ff4c:	vmov	s15, r3
   1ff50:	vcvt.f64.s32	d7, s15
   1ff54:	vldr	d6, [fp, #-20]	; 0xffffffec
   1ff58:	vsub.f64	d7, d6, d7
   1ff5c:	vcmp.f64	d7, #0.0
   1ff60:	vmrs	APSR_nzcv, fpscr
   1ff64:	beq	1ff74 <flatcc_emitter_copy_buffer@@Base+0x2828>
   1ff68:	ldr	r3, [fp, #-8]
   1ff6c:	add	r3, r3, #1
   1ff70:	b	1ff78 <flatcc_emitter_copy_buffer@@Base+0x282c>
   1ff74:	ldr	r3, [fp, #-8]
   1ff78:	mov	r0, r3
   1ff7c:	add	sp, fp, #0
   1ff80:	pop	{fp}		; (ldr fp, [sp], #4)
   1ff84:	bx	lr
   1ff88:	str	fp, [sp, #-8]!
   1ff8c:	str	lr, [sp, #4]
   1ff90:	add	fp, sp, #4
   1ff94:	sub	sp, sp, #16
   1ff98:	str	r0, [fp, #-16]
   1ff9c:	str	r1, [fp, #-20]	; 0xffffffec
   1ffa0:	ldr	r3, [fp, #-16]
   1ffa4:	add	r3, r3, #63	; 0x3f
   1ffa8:	vmov	s15, r3
   1ffac:	vcvt.f64.s32	d7, s15
   1ffb0:	vldr	d6, [pc, #176]	; 20068 <flatcc_emitter_copy_buffer@@Base+0x291c>
   1ffb4:	vmul.f64	d7, d7, d6
   1ffb8:	vmov.f64	d0, d7
   1ffbc:	bl	1ff10 <flatcc_emitter_copy_buffer@@Base+0x27c4>
   1ffc0:	str	r0, [fp, #-8]
   1ffc4:	ldr	r3, [fp, #-8]
   1ffc8:	add	r3, r3, #344	; 0x158
   1ffcc:	add	r3, r3, #3
   1ffd0:	add	r2, r3, #7
   1ffd4:	cmp	r3, #0
   1ffd8:	movlt	r3, r2
   1ffdc:	movge	r3, r3
   1ffe0:	asr	r3, r3, #3
   1ffe4:	add	r3, r3, #1
   1ffe8:	str	r3, [fp, #-12]
   1ffec:	ldr	r2, [pc, #124]	; 20070 <flatcc_emitter_copy_buffer@@Base+0x2924>
   1fff0:	add	r2, pc, r2
   1fff4:	ldr	r3, [fp, #-12]
   1fff8:	lsl	r3, r3, #4
   1fffc:	add	r3, r2, r3
   20000:	ldrd	r2, [r3]
   20004:	ldr	r1, [fp, #-20]	; 0xffffffec
   20008:	strd	r2, [r1]
   2000c:	ldr	r2, [pc, #96]	; 20074 <flatcc_emitter_copy_buffer@@Base+0x2928>
   20010:	add	r2, pc, r2
   20014:	ldr	r3, [fp, #-12]
   20018:	lsl	r3, r3, #4
   2001c:	add	r3, r2, r3
   20020:	add	r3, r3, #8
   20024:	ldrsh	r3, [r3]
   20028:	mov	r2, r3
   2002c:	ldr	r3, [fp, #-20]	; 0xffffffec
   20030:	str	r2, [r3, #8]
   20034:	ldr	r2, [pc, #60]	; 20078 <flatcc_emitter_copy_buffer@@Base+0x292c>
   20038:	add	r2, pc, r2
   2003c:	ldr	r3, [fp, #-12]
   20040:	lsl	r3, r3, #4
   20044:	add	r3, r2, r3
   20048:	add	r3, r3, #10
   2004c:	ldrsh	r3, [r3]
   20050:	mov	r0, r3
   20054:	sub	sp, fp, #4
   20058:	ldr	fp, [sp]
   2005c:	add	sp, sp, #4
   20060:	pop	{pc}		; (ldr pc, [sp], #4)
   20064:	nop	{0}
   20068:			; <UNDEFINED> instruction: 0x509f79fe
   2006c:	svccc	0x00d34413
   20070:			; <UNDEFINED> instruction: 0x000078b0
   20074:	muleq	r0, r0, r8
   20078:	andeq	r7, r0, r8, ror #16
   2007c:	sub	sp, sp, #8
   20080:	strd	r4, [sp, #-16]!
   20084:	str	fp, [sp, #8]
   20088:	str	lr, [sp, #12]
   2008c:	add	fp, sp, #12
   20090:	sub	sp, sp, #24
   20094:	str	r0, [fp, #-32]	; 0xffffffe0
   20098:	add	r1, fp, #4
   2009c:	stm	r1, {r2, r3}
   200a0:	ldrd	r0, [fp, #4]
   200a4:	ldrd	r2, [fp, #20]
   200a8:	subs	r4, r0, r2
   200ac:	sbc	r5, r1, r3
   200b0:	strd	r4, [fp, #-28]	; 0xffffffe4
   200b4:	ldr	r3, [fp, #12]
   200b8:	str	r3, [fp, #-20]	; 0xffffffec
   200bc:	ldr	r2, [fp, #12]
   200c0:	ldr	r3, [fp, #28]
   200c4:	cmp	r2, r3
   200c8:	bne	200e0 <flatcc_emitter_copy_buffer@@Base+0x2994>
   200cc:	ldrd	r0, [fp, #4]
   200d0:	ldrd	r2, [fp, #20]
   200d4:	cmp	r1, r3
   200d8:	cmpeq	r0, r2
   200dc:	bcs	20100 <flatcc_emitter_copy_buffer@@Base+0x29b4>
   200e0:	ldr	r3, [pc, #84]	; 2013c <flatcc_emitter_copy_buffer@@Base+0x29f0>
   200e4:	add	r3, pc, r3
   200e8:	mov	r2, #239	; 0xef
   200ec:	ldr	r1, [pc, #76]	; 20140 <flatcc_emitter_copy_buffer@@Base+0x29f4>
   200f0:	add	r1, pc, r1
   200f4:	ldr	r0, [pc, #72]	; 20144 <flatcc_emitter_copy_buffer@@Base+0x29f8>
   200f8:	add	r0, pc, r0
   200fc:	bl	124b0 <__assert_fail@plt>
   20100:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20104:	mov	r0, r3
   20108:	sub	r1, fp, #28
   2010c:	ldrd	r2, [r1]
   20110:	strd	r2, [r0]
   20114:	ldrd	r2, [r1, #8]
   20118:	strd	r2, [r0, #8]
   2011c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20120:	sub	sp, fp, #12
   20124:	ldrd	r4, [sp]
   20128:	ldr	fp, [sp, #8]
   2012c:	ldr	lr, [sp, #12]
   20130:	add	sp, sp, #16
   20134:	add	sp, sp, #8
   20138:	bx	lr
   2013c:	andeq	r8, r0, r4, lsr #6
   20140:	andeq	r7, r0, r0, lsr #26
   20144:	andeq	r7, r0, r8, lsl #27
   20148:	sub	sp, sp, #8
   2014c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20150:	strd	r6, [sp, #8]
   20154:	strd	r8, [sp, #16]
   20158:	str	fp, [sp, #24]
   2015c:	str	lr, [sp, #28]
   20160:	add	fp, sp, #28
   20164:	sub	sp, sp, #152	; 0x98
   20168:	str	r0, [fp, #-120]	; 0xffffff88
   2016c:	add	r1, fp, #4
   20170:	stm	r1, {r2, r3}
   20174:	ldrd	r2, [fp, #4]
   20178:	mov	r0, #0
   2017c:	mov	r1, #0
   20180:	mov	r0, r3
   20184:	mov	r1, #0
   20188:	strd	r0, [fp, #-36]	; 0xffffffdc
   2018c:	ldrd	r0, [fp, #4]
   20190:	mvn	r2, #0
   20194:	mov	r3, #0
   20198:	and	r4, r0, r2
   2019c:	and	r5, r1, r3
   201a0:	strd	r4, [fp, #-44]	; 0xffffffd4
   201a4:	ldrd	r2, [fp, #20]
   201a8:	mov	r0, #0
   201ac:	mov	r1, #0
   201b0:	mov	r0, r3
   201b4:	mov	r1, #0
   201b8:	strd	r0, [fp, #-52]	; 0xffffffcc
   201bc:	ldrd	r0, [fp, #20]
   201c0:	mvn	r2, #0
   201c4:	mov	r3, #0
   201c8:	and	r6, r0, r2
   201cc:	and	r7, r1, r3
   201d0:	strd	r6, [fp, #-60]	; 0xffffffc4
   201d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   201d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   201dc:	mul	r1, r3, r2
   201e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   201e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   201e8:	mul	r3, r3, r2
   201ec:	add	r1, r1, r3
   201f0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   201f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   201f8:	umull	r2, r3, r2, r3
   201fc:	add	r1, r1, r3
   20200:	mov	r3, r1
   20204:	strd	r2, [fp, #-68]	; 0xffffffbc
   20208:	strd	r2, [fp, #-68]	; 0xffffffbc
   2020c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   20210:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20214:	mul	r1, r3, r2
   20218:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2021c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20220:	mul	r3, r3, r2
   20224:	add	r1, r1, r3
   20228:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2022c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20230:	umull	r2, r3, r2, r3
   20234:	add	r1, r1, r3
   20238:	mov	r3, r1
   2023c:	strd	r2, [fp, #-76]	; 0xffffffb4
   20240:	strd	r2, [fp, #-76]	; 0xffffffb4
   20244:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20248:	ldr	r3, [fp, #-60]	; 0xffffffc4
   2024c:	mul	r1, r3, r2
   20250:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20254:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20258:	mul	r3, r3, r2
   2025c:	add	r1, r1, r3
   20260:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20264:	ldr	r3, [fp, #-60]	; 0xffffffc4
   20268:	umull	r2, r3, r2, r3
   2026c:	add	r1, r1, r3
   20270:	mov	r3, r1
   20274:	strd	r2, [fp, #-84]	; 0xffffffac
   20278:	strd	r2, [fp, #-84]	; 0xffffffac
   2027c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   20280:	ldr	r3, [fp, #-60]	; 0xffffffc4
   20284:	mul	r1, r3, r2
   20288:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2028c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20290:	mul	r3, r3, r2
   20294:	add	r1, r1, r3
   20298:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2029c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   202a0:	umull	r2, r3, r2, r3
   202a4:	add	r1, r1, r3
   202a8:	mov	r3, r1
   202ac:	strd	r2, [fp, #-92]	; 0xffffffa4
   202b0:	strd	r2, [fp, #-92]	; 0xffffffa4
   202b4:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   202b8:	mov	r4, #0
   202bc:	mov	r5, #0
   202c0:	mov	r4, r3
   202c4:	mov	r5, #0
   202c8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   202cc:	mvn	r2, #0
   202d0:	mov	r3, #0
   202d4:	and	r8, r0, r2
   202d8:	and	r9, r1, r3
   202dc:	adds	r3, r4, r8
   202e0:	str	r3, [fp, #-132]	; 0xffffff7c
   202e4:	adc	r3, r5, r9
   202e8:	str	r3, [fp, #-128]	; 0xffffff80
   202ec:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   202f0:	mvn	r2, #0
   202f4:	mov	r3, #0
   202f8:	and	ip, r0, r2
   202fc:	str	ip, [fp, #-140]	; 0xffffff74
   20300:	and	r3, r1, r3
   20304:	str	r3, [fp, #-136]	; 0xffffff78
   20308:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   2030c:	mov	ip, r0
   20310:	ldrd	r2, [fp, #-140]	; 0xffffff74
   20314:	mov	lr, r2
   20318:	adds	ip, ip, lr
   2031c:	str	ip, [fp, #-172]	; 0xffffff54
   20320:	adc	r3, r1, r3
   20324:	str	r3, [fp, #-168]	; 0xffffff58
   20328:	ldrd	r2, [fp, #-172]	; 0xffffff54
   2032c:	strd	r2, [fp, #-100]	; 0xffffff9c
   20330:	ldrd	r2, [fp, #-100]	; 0xffffff9c
   20334:	adds	r1, r2, #-2147483648	; 0x80000000
   20338:	str	r1, [fp, #-180]	; 0xffffff4c
   2033c:	adc	r3, r3, #0
   20340:	str	r3, [fp, #-176]	; 0xffffff50
   20344:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   20348:	strd	r2, [fp, #-100]	; 0xffffff9c
   2034c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   20350:	mov	r2, #0
   20354:	mov	r3, #0
   20358:	mov	r2, r1
   2035c:	mov	r3, #0
   20360:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   20364:	adds	ip, r2, r0
   20368:	str	ip, [fp, #-148]	; 0xffffff6c
   2036c:	adc	r3, r3, r1
   20370:	str	r3, [fp, #-144]	; 0xffffff70
   20374:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   20378:	mov	r2, #0
   2037c:	mov	r3, #0
   20380:	mov	r2, r1
   20384:	mov	r3, #0
   20388:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   2038c:	mov	ip, r0
   20390:	adds	ip, ip, r2
   20394:	str	ip, [fp, #-156]	; 0xffffff64
   20398:	adc	r3, r1, r3
   2039c:	str	r3, [fp, #-152]	; 0xffffff68
   203a0:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   203a4:	mov	r2, #0
   203a8:	mov	r3, #0
   203ac:	mov	r2, r1
   203b0:	mov	r3, #0
   203b4:	ldrd	r0, [fp, #-156]	; 0xffffff64
   203b8:	mov	ip, r0
   203bc:	adds	ip, ip, r2
   203c0:	str	ip, [fp, #-164]	; 0xffffff5c
   203c4:	adc	r3, r1, r3
   203c8:	str	r3, [fp, #-160]	; 0xffffff60
   203cc:	ldrd	r2, [fp, #-164]	; 0xffffff5c
   203d0:	strd	r2, [fp, #-116]	; 0xffffff8c
   203d4:	ldr	r2, [fp, #12]
   203d8:	ldr	r3, [fp, #28]
   203dc:	add	r3, r2, r3
   203e0:	add	r3, r3, #64	; 0x40
   203e4:	str	r3, [fp, #-108]	; 0xffffff94
   203e8:	ldr	r3, [fp, #-120]	; 0xffffff88
   203ec:	mov	r0, r3
   203f0:	sub	r1, fp, #116	; 0x74
   203f4:	ldrd	r2, [r1]
   203f8:	strd	r2, [r0]
   203fc:	ldrd	r2, [r1, #8]
   20400:	strd	r2, [r0, #8]
   20404:	ldr	r0, [fp, #-120]	; 0xffffff88
   20408:	sub	sp, fp, #28
   2040c:	ldrd	r4, [sp]
   20410:	ldrd	r6, [sp, #8]
   20414:	ldrd	r8, [sp, #16]
   20418:	ldr	fp, [sp, #24]
   2041c:	ldr	lr, [sp, #28]
   20420:	add	sp, sp, #32
   20424:	add	sp, sp, #8
   20428:	bx	lr
   2042c:	sub	sp, sp, #8
   20430:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20434:	strd	r6, [sp, #8]
   20438:	str	fp, [sp, #16]
   2043c:	str	lr, [sp, #20]
   20440:	add	fp, sp, #20
   20444:	sub	sp, sp, #8
   20448:	str	r0, [fp, #-24]	; 0xffffffe8
   2044c:	add	r1, fp, #4
   20450:	stm	r1, {r2, r3}
   20454:	ldrd	r2, [fp, #4]
   20458:	orrs	r3, r2, r3
   2045c:	bne	204a8 <flatcc_emitter_copy_buffer@@Base+0x2d5c>
   20460:	ldr	r3, [pc, #216]	; 20540 <flatcc_emitter_copy_buffer@@Base+0x2df4>
   20464:	add	r3, pc, r3
   20468:	mov	r2, #260	; 0x104
   2046c:	ldr	r1, [pc, #208]	; 20544 <flatcc_emitter_copy_buffer@@Base+0x2df8>
   20470:	add	r1, pc, r1
   20474:	ldr	r0, [pc, #204]	; 20548 <flatcc_emitter_copy_buffer@@Base+0x2dfc>
   20478:	add	r0, pc, r0
   2047c:	bl	124b0 <__assert_fail@plt>
   20480:	ldrd	r0, [fp, #4]
   20484:	mov	r2, #0
   20488:	mov	r3, #0
   2048c:	lsl	r3, r1, #10
   20490:	orr	r3, r3, r0, lsr #22
   20494:	lsl	r2, r0, #10
   20498:	strd	r2, [fp, #4]
   2049c:	ldr	r3, [fp, #12]
   204a0:	sub	r3, r3, #10
   204a4:	str	r3, [fp, #12]
   204a8:	ldrd	r2, [fp, #4]
   204ac:	mov	r0, #0
   204b0:	mov	r1, #0
   204b4:	movt	r1, #65472	; 0xffc0
   204b8:	and	r4, r2, r0
   204bc:	and	r5, r3, r1
   204c0:	orrs	r3, r4, r5
   204c4:	beq	20480 <flatcc_emitter_copy_buffer@@Base+0x2d34>
   204c8:	b	204f0 <flatcc_emitter_copy_buffer@@Base+0x2da4>
   204cc:	ldrd	r2, [fp, #4]
   204d0:	adds	r6, r2, r2
   204d4:	adc	r7, r3, r3
   204d8:	mov	r2, r6
   204dc:	mov	r3, r7
   204e0:	strd	r2, [fp, #4]
   204e4:	ldr	r3, [fp, #12]
   204e8:	sub	r3, r3, #1
   204ec:	str	r3, [fp, #12]
   204f0:	ldrd	r2, [fp, #4]
   204f4:	cmp	r2, #0
   204f8:	sbcs	r3, r3, #0
   204fc:	bge	204cc <flatcc_emitter_copy_buffer@@Base+0x2d80>
   20500:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20504:	mov	r0, r3
   20508:	add	r1, fp, #4
   2050c:	ldrd	r2, [r1]
   20510:	strd	r2, [r0]
   20514:	ldrd	r2, [r1, #8]
   20518:	strd	r2, [r0, #8]
   2051c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   20520:	sub	sp, fp, #20
   20524:	ldrd	r4, [sp]
   20528:	ldrd	r6, [sp, #8]
   2052c:	ldr	fp, [sp, #16]
   20530:	ldr	lr, [sp, #20]
   20534:	add	sp, sp, #24
   20538:	add	sp, sp, #8
   2053c:	bx	lr
   20540:			; <UNDEFINED> instruction: 0x00007fb8
   20544:	andeq	r7, r0, r0, lsr #19
   20548:	andeq	r7, r0, r4, lsr #20
   2054c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20550:	strd	r6, [sp, #8]
   20554:	strd	r8, [sp, #16]
   20558:	str	fp, [sp, #24]
   2055c:	str	lr, [sp, #28]
   20560:	add	fp, sp, #28
   20564:	sub	sp, sp, #48	; 0x30
   20568:	str	r0, [fp, #-56]	; 0xffffffc8
   2056c:	vstr	d0, [fp, #-68]	; 0xffffffbc
   20570:	vldr	d0, [fp, #-68]	; 0xffffffbc
   20574:	bl	1feb0 <flatcc_emitter_copy_buffer@@Base+0x2764>
   20578:	strd	r0, [fp, #-36]	; 0xffffffdc
   2057c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   20580:	mov	r0, #0
   20584:	mov	r1, #0
   20588:	movt	r1, #32752	; 0x7ff0
   2058c:	and	ip, r2, r0
   20590:	str	ip, [fp, #-76]	; 0xffffffb4
   20594:	and	r3, r3, r1
   20598:	str	r3, [fp, #-72]	; 0xffffffb8
   2059c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   205a0:	orrs	r3, r2, r3
   205a4:	bne	205d4 <flatcc_emitter_copy_buffer@@Base+0x2e88>
   205a8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   205ac:	mvn	r0, #0
   205b0:	movw	r1, #65535	; 0xffff
   205b4:	movt	r1, #15
   205b8:	and	r8, r2, r0
   205bc:	and	r9, r3, r1
   205c0:	strd	r8, [fp, #-52]	; 0xffffffcc
   205c4:	movw	r3, #64462	; 0xfbce
   205c8:	movt	r3, #65535	; 0xffff
   205cc:	str	r3, [fp, #-44]	; 0xffffffd4
   205d0:	b	20620 <flatcc_emitter_copy_buffer@@Base+0x2ed4>
   205d4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   205d8:	mvn	r0, #0
   205dc:	movw	r1, #65535	; 0xffff
   205e0:	movt	r1, #15
   205e4:	and	r4, r2, r0
   205e8:	and	r5, r3, r1
   205ec:	adds	r6, r4, #0
   205f0:	adc	r7, r5, #1048576	; 0x100000
   205f4:	strd	r6, [fp, #-52]	; 0xffffffcc
   205f8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   205fc:	mov	r2, #0
   20600:	mov	r3, #0
   20604:	lsr	r2, r1, #20
   20608:	mov	r3, #0
   2060c:	mov	r3, r2
   20610:	ubfx	r3, r3, #0, #11
   20614:	sub	r3, r3, #1072	; 0x430
   20618:	sub	r3, r3, #3
   2061c:	str	r3, [fp, #-44]	; 0xffffffd4
   20620:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20624:	mov	r0, r3
   20628:	sub	r1, fp, #52	; 0x34
   2062c:	ldrd	r2, [r1]
   20630:	strd	r2, [r0]
   20634:	ldrd	r2, [r1, #8]
   20638:	strd	r2, [r0, #8]
   2063c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   20640:	sub	sp, fp, #28
   20644:	ldrd	r4, [sp]
   20648:	ldrd	r6, [sp, #8]
   2064c:	ldrd	r8, [sp, #16]
   20650:	ldr	fp, [sp, #24]
   20654:	add	sp, sp, #28
   20658:	pop	{pc}		; (ldr pc, [sp], #4)
   2065c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20660:	strd	r6, [sp, #8]
   20664:	strd	r8, [sp, #16]
   20668:	str	fp, [sp, #24]
   2066c:	str	lr, [sp, #28]
   20670:	add	fp, sp, #28
   20674:	sub	sp, sp, #112	; 0x70
   20678:	sub	ip, fp, #100	; 0x64
   2067c:	stm	ip, {r0, r1, r2, r3}
   20680:	mov	r2, #0
   20684:	mov	r3, #1048576	; 0x100000
   20688:	strd	r2, [fp, #-44]	; 0xffffffd4
   2068c:	mvn	r2, #0
   20690:	movw	r3, #65535	; 0xffff
   20694:	movt	r3, #15
   20698:	strd	r2, [fp, #-52]	; 0xffffffcc
   2069c:	movw	r3, #64462	; 0xfbce
   206a0:	movt	r3, #65535	; 0xffff
   206a4:	str	r3, [fp, #-56]	; 0xffffffc8
   206a8:	movw	r3, #1075	; 0x433
   206ac:	str	r3, [fp, #-60]	; 0xffffffc4
   206b0:	mov	r3, #52	; 0x34
   206b4:	str	r3, [fp, #-64]	; 0xffffffc0
   206b8:	sub	r0, fp, #84	; 0x54
   206bc:	sub	r1, fp, #100	; 0x64
   206c0:	ldrd	r2, [r1]
   206c4:	strd	r2, [r0]
   206c8:	ldrd	r2, [r1, #8]
   206cc:	strd	r2, [r0, #8]
   206d0:	b	206fc <flatcc_emitter_copy_buffer@@Base+0x2fb0>
   206d4:	ldrd	r2, [fp, #-84]	; 0xffffffac
   206d8:	mov	r0, #0
   206dc:	mov	r1, #0
   206e0:	lsr	r0, r2, #1
   206e4:	orr	r0, r0, r3, lsl #31
   206e8:	lsr	r1, r3, #1
   206ec:	strd	r0, [fp, #-84]	; 0xffffffac
   206f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   206f4:	add	r3, r3, #1
   206f8:	str	r3, [fp, #-76]	; 0xffffffb4
   206fc:	ldrd	r4, [fp, #-84]	; 0xffffffac
   20700:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   20704:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   20708:	adds	ip, r0, r2
   2070c:	str	ip, [fp, #-108]	; 0xffffff94
   20710:	adc	r3, r1, r3
   20714:	str	r3, [fp, #-104]	; 0xffffff98
   20718:	ldrd	r2, [fp, #-108]	; 0xffffff94
   2071c:	cmp	r5, r3
   20720:	cmpeq	r4, r2
   20724:	bhi	206d4 <flatcc_emitter_copy_buffer@@Base+0x2f88>
   20728:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2072c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20730:	cmp	r2, r3
   20734:	ble	20768 <flatcc_emitter_copy_buffer@@Base+0x301c>
   20738:	vldr	d7, [pc, #296]	; 20868 <flatcc_emitter_copy_buffer@@Base+0x311c>
   2073c:	b	20844 <flatcc_emitter_copy_buffer@@Base+0x30f8>
   20740:	ldrd	r2, [fp, #-84]	; 0xffffffac
   20744:	adds	r1, r2, r2
   20748:	str	r1, [fp, #-140]	; 0xffffff74
   2074c:	adc	r3, r3, r3
   20750:	str	r3, [fp, #-136]	; 0xffffff78
   20754:	ldrd	r2, [fp, #-140]	; 0xffffff74
   20758:	strd	r2, [fp, #-84]	; 0xffffffac
   2075c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   20760:	sub	r3, r3, #1
   20764:	str	r3, [fp, #-76]	; 0xffffffb4
   20768:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2076c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20770:	cmp	r2, r3
   20774:	bge	2079c <flatcc_emitter_copy_buffer@@Base+0x3050>
   20778:	ldrd	r0, [fp, #-84]	; 0xffffffac
   2077c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   20780:	and	ip, r0, r2
   20784:	str	ip, [fp, #-116]	; 0xffffff8c
   20788:	and	r3, r1, r3
   2078c:	str	r3, [fp, #-112]	; 0xffffff90
   20790:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   20794:	orrs	r3, r2, r3
   20798:	beq	20740 <flatcc_emitter_copy_buffer@@Base+0x2ff4>
   2079c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   207a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   207a4:	cmp	r2, r3
   207a8:	bne	207e0 <flatcc_emitter_copy_buffer@@Base+0x3094>
   207ac:	ldrd	r0, [fp, #-84]	; 0xffffffac
   207b0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   207b4:	and	ip, r0, r2
   207b8:	str	ip, [fp, #-124]	; 0xffffff84
   207bc:	and	r3, r1, r3
   207c0:	str	r3, [fp, #-120]	; 0xffffff88
   207c4:	ldrd	r2, [fp, #-124]	; 0xffffff84
   207c8:	orrs	r3, r2, r3
   207cc:	bne	207e0 <flatcc_emitter_copy_buffer@@Base+0x3094>
   207d0:	mov	r2, #0
   207d4:	mov	r3, #0
   207d8:	strd	r2, [fp, #-36]	; 0xffffffdc
   207dc:	b	207f8 <flatcc_emitter_copy_buffer@@Base+0x30ac>
   207e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   207e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   207e8:	add	r3, r2, r3
   207ec:	mov	r2, r3
   207f0:	asr	r3, r2, #31
   207f4:	strd	r2, [fp, #-36]	; 0xffffffdc
   207f8:	ldrd	r0, [fp, #-84]	; 0xffffffac
   207fc:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   20800:	and	r8, r0, r2
   20804:	and	r9, r1, r3
   20808:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   2080c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20810:	sub	ip, r1, #32
   20814:	rsb	r0, r1, #32
   20818:	lsl	r7, r3, r1
   2081c:	orr	r7, r7, r2, lsl ip
   20820:	orr	r7, r7, r2, lsr r0
   20824:	lsl	r6, r2, r1
   20828:	orr	r3, r8, r6
   2082c:	str	r3, [fp, #-132]	; 0xffffff7c
   20830:	orr	r3, r9, r7
   20834:	str	r3, [fp, #-128]	; 0xffffff80
   20838:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   2083c:	bl	1fee0 <flatcc_emitter_copy_buffer@@Base+0x2794>
   20840:	vmov.f64	d7, d0
   20844:	vmov.f64	d0, d7
   20848:	sub	sp, fp, #28
   2084c:	ldrd	r4, [sp]
   20850:	ldrd	r6, [sp, #8]
   20854:	ldrd	r8, [sp, #16]
   20858:	ldr	fp, [sp, #24]
   2085c:	add	sp, sp, #28
   20860:	pop	{pc}		; (ldr pc, [sp], #4)
   20864:	nop	{0}
	...
   20870:	push	{fp}		; (str fp, [sp, #-4]!)
   20874:	add	fp, sp, #0
   20878:	sub	sp, sp, #28
   2087c:	str	r0, [fp, #-16]
   20880:	str	r1, [fp, #-20]	; 0xffffffec
   20884:	str	r2, [fp, #-24]	; 0xffffffe8
   20888:	ldr	r3, [fp, #-20]	; 0xffffffec
   2088c:	add	r3, r3, #1
   20890:	movw	r2, #1233	; 0x4d1
   20894:	mul	r3, r2, r3
   20898:	asr	r3, r3, #12
   2089c:	add	r3, r3, #1
   208a0:	str	r3, [fp, #-8]
   208a4:	ldr	r3, [pc, #76]	; 208f8 <flatcc_emitter_copy_buffer@@Base+0x31ac>
   208a8:	add	r3, pc, r3
   208ac:	ldr	r2, [fp, #-8]
   208b0:	ldr	r3, [r3, r2, lsl #2]
   208b4:	ldr	r2, [fp, #-16]
   208b8:	cmp	r2, r3
   208bc:	bcs	208cc <flatcc_emitter_copy_buffer@@Base+0x3180>
   208c0:	ldr	r3, [fp, #-8]
   208c4:	sub	r3, r3, #1
   208c8:	str	r3, [fp, #-8]
   208cc:	ldr	r3, [pc, #40]	; 208fc <flatcc_emitter_copy_buffer@@Base+0x31b0>
   208d0:	add	r3, pc, r3
   208d4:	ldr	r2, [fp, #-8]
   208d8:	ldr	r2, [r3, r2, lsl #2]
   208dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   208e0:	str	r2, [r3]
   208e4:	ldr	r3, [fp, #-8]
   208e8:	mov	r0, r3
   208ec:	add	sp, fp, #0
   208f0:	pop	{fp}		; (ldr fp, [sp], #4)
   208f4:	bx	lr
   208f8:	andeq	r7, r0, r0, lsl #12
   208fc:	ldrdeq	r7, [r0], -r8
   20900:	str	fp, [sp, #-8]!
   20904:	str	lr, [sp, #4]
   20908:	add	fp, sp, #4
   2090c:	sub	sp, sp, #24
   20910:	str	r0, [fp, #-24]	; 0xffffffe8
   20914:	str	r1, [fp, #-28]	; 0xffffffe4
   20918:	mov	r3, #348	; 0x15c
   2091c:	str	r3, [fp, #-8]
   20920:	mov	r3, #8
   20924:	str	r3, [fp, #-12]
   20928:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2092c:	cmn	r3, #348	; 0x15c
   20930:	bge	20954 <flatcc_emitter_copy_buffer@@Base+0x3208>
   20934:	ldr	r3, [pc, #336]	; 20a8c <flatcc_emitter_copy_buffer@@Base+0x3340>
   20938:	add	r3, pc, r3
   2093c:	mov	r2, #80	; 0x50
   20940:	ldr	r1, [pc, #328]	; 20a90 <flatcc_emitter_copy_buffer@@Base+0x3344>
   20944:	add	r1, pc, r1
   20948:	ldr	r0, [pc, #324]	; 20a94 <flatcc_emitter_copy_buffer@@Base+0x3348>
   2094c:	add	r0, pc, r0
   20950:	bl	124b0 <__assert_fail@plt>
   20954:	ldr	r3, [fp, #-12]
   20958:	add	r3, r3, #336	; 0x150
   2095c:	add	r3, r3, #3
   20960:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20964:	cmp	r2, r3
   20968:	ble	2098c <flatcc_emitter_copy_buffer@@Base+0x3240>
   2096c:	ldr	r3, [pc, #292]	; 20a98 <flatcc_emitter_copy_buffer@@Base+0x334c>
   20970:	add	r3, pc, r3
   20974:	mov	r2, #81	; 0x51
   20978:	ldr	r1, [pc, #284]	; 20a9c <flatcc_emitter_copy_buffer@@Base+0x3350>
   2097c:	add	r1, pc, r1
   20980:	ldr	r0, [pc, #280]	; 20aa0 <flatcc_emitter_copy_buffer@@Base+0x3354>
   20984:	add	r0, pc, r0
   20988:	bl	124b0 <__assert_fail@plt>
   2098c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20990:	ldr	r3, [fp, #-8]
   20994:	add	r2, r2, r3
   20998:	ldr	r3, [fp, #-12]
   2099c:	sdiv	r3, r2, r3
   209a0:	str	r3, [fp, #-16]
   209a4:	ldr	r2, [pc, #248]	; 20aa4 <flatcc_emitter_copy_buffer@@Base+0x3358>
   209a8:	add	r2, pc, r2
   209ac:	ldr	r3, [fp, #-16]
   209b0:	lsl	r3, r3, #4
   209b4:	add	r3, r2, r3
   209b8:	add	r3, r3, #10
   209bc:	ldrsh	r3, [r3]
   209c0:	str	r3, [fp, #-20]	; 0xffffffec
   209c4:	ldr	r2, [pc, #220]	; 20aa8 <flatcc_emitter_copy_buffer@@Base+0x335c>
   209c8:	add	r2, pc, r2
   209cc:	ldr	r3, [fp, #-16]
   209d0:	lsl	r3, r3, #4
   209d4:	add	r3, r2, r3
   209d8:	ldrd	r2, [r3]
   209dc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   209e0:	strd	r2, [r1]
   209e4:	ldr	r2, [pc, #192]	; 20aac <flatcc_emitter_copy_buffer@@Base+0x3360>
   209e8:	add	r2, pc, r2
   209ec:	ldr	r3, [fp, #-16]
   209f0:	lsl	r3, r3, #4
   209f4:	add	r3, r2, r3
   209f8:	add	r3, r3, #8
   209fc:	ldrsh	r3, [r3]
   20a00:	mov	r2, r3
   20a04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20a08:	str	r2, [r3, #8]
   20a0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   20a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20a14:	cmp	r2, r3
   20a18:	ble	20a3c <flatcc_emitter_copy_buffer@@Base+0x32f0>
   20a1c:	ldr	r3, [pc, #140]	; 20ab0 <flatcc_emitter_copy_buffer@@Base+0x3364>
   20a20:	add	r3, pc, r3
   20a24:	mov	r2, #88	; 0x58
   20a28:	ldr	r1, [pc, #132]	; 20ab4 <flatcc_emitter_copy_buffer@@Base+0x3368>
   20a2c:	add	r1, pc, r1
   20a30:	ldr	r0, [pc, #128]	; 20ab8 <flatcc_emitter_copy_buffer@@Base+0x336c>
   20a34:	add	r0, pc, r0
   20a38:	bl	124b0 <__assert_fail@plt>
   20a3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   20a40:	ldr	r3, [fp, #-12]
   20a44:	add	r3, r2, r3
   20a48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20a4c:	cmp	r2, r3
   20a50:	blt	20a74 <flatcc_emitter_copy_buffer@@Base+0x3328>
   20a54:	ldr	r3, [pc, #96]	; 20abc <flatcc_emitter_copy_buffer@@Base+0x3370>
   20a58:	add	r3, pc, r3
   20a5c:	mov	r2, #89	; 0x59
   20a60:	ldr	r1, [pc, #88]	; 20ac0 <flatcc_emitter_copy_buffer@@Base+0x3374>
   20a64:	add	r1, pc, r1
   20a68:	ldr	r0, [pc, #84]	; 20ac4 <flatcc_emitter_copy_buffer@@Base+0x3378>
   20a6c:	add	r0, pc, r0
   20a70:	bl	124b0 <__assert_fail@plt>
   20a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   20a78:	mov	r0, r3
   20a7c:	sub	sp, fp, #4
   20a80:	ldr	fp, [sp]
   20a84:	add	sp, sp, #4
   20a88:	pop	{pc}		; (ldr pc, [sp], #4)
   20a8c:	strdeq	r7, [r0], -ip
   20a90:	muleq	r0, r0, r5
   20a94:	strdeq	r7, [r0], -r8
   20a98:	andeq	r7, r0, r4, asr #21
   20a9c:	andeq	r7, r0, r8, asr r5
   20aa0:	andeq	r7, r0, r0, ror #11
   20aa4:	strdeq	r6, [r0], -r8
   20aa8:	ldrdeq	r6, [r0], -r8
   20aac:			; <UNDEFINED> instruction: 0x00006eb8
   20ab0:	andeq	r7, r0, r4, lsl sl
   20ab4:	andeq	r7, r0, r8, lsr #9
   20ab8:	andeq	r7, r0, ip, asr r5
   20abc:	ldrdeq	r7, [r0], -ip
   20ac0:	andeq	r7, r0, r0, ror r4
   20ac4:	andeq	r7, r0, r4, lsr r5

00020ac8 <grisu3_diy_fp_encode_double@@Base>:
   20ac8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20acc:	strd	r6, [sp, #8]
   20ad0:	strd	r8, [sp, #16]
   20ad4:	str	fp, [sp, #24]
   20ad8:	str	lr, [sp, #28]
   20adc:	add	fp, sp, #28
   20ae0:	sub	sp, sp, #216	; 0xd8
   20ae4:	strd	r0, [fp, #-156]	; 0xffffff64
   20ae8:	str	r2, [fp, #-160]	; 0xffffff60
   20aec:	str	r3, [fp, #-164]	; 0xffffff5c
   20af0:	mov	r3, #3
   20af4:	str	r3, [fp, #-40]	; 0xffffffd8
   20af8:	mov	r2, #1
   20afc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20b00:	lsl	r3, r2, r3
   20b04:	str	r3, [fp, #-44]	; 0xffffffd4
   20b08:	movw	r3, #64462	; 0xfbce
   20b0c:	movt	r3, #65535	; 0xffff
   20b10:	str	r3, [fp, #-48]	; 0xffffffd0
   20b14:	mov	r2, #0
   20b18:	mov	r3, #1048576	; 0x100000
   20b1c:	strd	r2, [fp, #-60]	; 0xffffffc4
   20b20:	mov	r3, #64	; 0x40
   20b24:	str	r3, [fp, #-64]	; 0xffffffc0
   20b28:	mov	r3, #19
   20b2c:	str	r3, [fp, #-68]	; 0xffffffbc
   20b30:	ldr	r3, [fp, #4]
   20b34:	cmp	r3, #0
   20b38:	beq	20b50 <grisu3_diy_fp_encode_double@@Base+0x88>
   20b3c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20b40:	lsr	r3, r2, #31
   20b44:	add	r3, r3, r2
   20b48:	asr	r3, r3, #1
   20b4c:	b	20b54 <grisu3_diy_fp_encode_double@@Base+0x8c>
   20b50:	mov	r3, #0
   20b54:	str	r3, [fp, #-32]	; 0xffffffe0
   20b58:	ldr	r2, [fp, #-160]	; 0xffffff60
   20b5c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   20b60:	sub	r3, r2, r3
   20b64:	str	r3, [fp, #-72]	; 0xffffffb8
   20b68:	ldrd	r2, [fp, #-156]	; 0xffffff64
   20b6c:	strd	r2, [fp, #-116]	; 0xffffff8c
   20b70:	mov	r3, #0
   20b74:	str	r3, [fp, #-108]	; 0xffffff94
   20b78:	sub	r0, fp, #116	; 0x74
   20b7c:	mov	r1, sp
   20b80:	sub	r3, fp, #108	; 0x6c
   20b84:	ldrd	r2, [r3]
   20b88:	strd	r2, [r1]
   20b8c:	sub	r3, fp, #116	; 0x74
   20b90:	ldm	r3, {r2, r3}
   20b94:	bl	2042c <flatcc_emitter_copy_buffer@@Base+0x2ce0>
   20b98:	ldr	r3, [fp, #-108]	; 0xffffff94
   20b9c:	rsb	r2, r3, #0
   20ba0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20ba4:	lsl	r3, r3, r2
   20ba8:	str	r3, [fp, #-32]	; 0xffffffe0
   20bac:	sub	r3, fp, #132	; 0x84
   20bb0:	mov	r1, r3
   20bb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   20bb8:	bl	20900 <flatcc_emitter_copy_buffer@@Base+0x31b4>
   20bbc:	str	r0, [fp, #-76]	; 0xffffffb4
   20bc0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   20bc4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   20bc8:	cmp	r2, r3
   20bcc:	beq	20cbc <grisu3_diy_fp_encode_double@@Base+0x1f4>
   20bd0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   20bd4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   20bd8:	sub	r3, r2, r3
   20bdc:	sub	r3, r3, #1
   20be0:	str	r3, [fp, #-80]	; 0xffffffb0
   20be4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20be8:	cmp	r3, #0
   20bec:	blt	20bfc <grisu3_diy_fp_encode_double@@Base+0x134>
   20bf0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20bf4:	cmp	r3, #6
   20bf8:	ble	20c1c <grisu3_diy_fp_encode_double@@Base+0x154>
   20bfc:	ldr	r3, [pc, #1132]	; 21070 <grisu3_diy_fp_encode_double@@Base+0x5a8>
   20c00:	add	r3, pc, r3
   20c04:	mov	r2, #185	; 0xb9
   20c08:	ldr	r1, [pc, #1124]	; 21074 <grisu3_diy_fp_encode_double@@Base+0x5ac>
   20c0c:	add	r1, pc, r1
   20c10:	ldr	r0, [pc, #1120]	; 21078 <grisu3_diy_fp_encode_double@@Base+0x5b0>
   20c14:	add	r0, pc, r0
   20c18:	bl	124b0 <__assert_fail@plt>
   20c1c:	sub	ip, fp, #180	; 0xb4
   20c20:	ldr	r2, [pc, #1108]	; 2107c <grisu3_diy_fp_encode_double@@Base+0x5b4>
   20c24:	add	r2, pc, r2
   20c28:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20c2c:	add	r0, sp, #8
   20c30:	lsl	r1, r3, #4
   20c34:	add	r1, r2, r1
   20c38:	ldrd	r2, [r1]
   20c3c:	strd	r2, [r0]
   20c40:	ldrd	r2, [r1, #8]
   20c44:	strd	r2, [r0, #8]
   20c48:	mov	r1, sp
   20c4c:	sub	r3, fp, #108	; 0x6c
   20c50:	ldrd	r2, [r3]
   20c54:	strd	r2, [r1]
   20c58:	sub	r3, fp, #116	; 0x74
   20c5c:	ldm	r3, {r2, r3}
   20c60:	mov	r0, ip
   20c64:	bl	20148 <flatcc_emitter_copy_buffer@@Base+0x29fc>
   20c68:	sub	r0, fp, #116	; 0x74
   20c6c:	sub	r1, fp, #180	; 0xb4
   20c70:	ldrd	r2, [r1]
   20c74:	strd	r2, [r0]
   20c78:	ldrd	r2, [r1, #8]
   20c7c:	strd	r2, [r0, #8]
   20c80:	ldr	r3, [fp, #-164]	; 0xffffff5c
   20c84:	add	r2, r3, #1
   20c88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20c8c:	add	r2, r2, r3
   20c90:	ldr	r3, [fp, #-68]	; 0xffffffbc
   20c94:	cmp	r3, r2
   20c98:	bge	20cbc <grisu3_diy_fp_encode_double@@Base+0x1f4>
   20c9c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   20ca0:	lsr	r3, r2, #31
   20ca4:	add	r3, r3, r2
   20ca8:	asr	r3, r3, #1
   20cac:	mov	r2, r3
   20cb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20cb4:	add	r3, r3, r2
   20cb8:	str	r3, [fp, #-32]	; 0xffffffe0
   20cbc:	sub	ip, fp, #180	; 0xb4
   20cc0:	add	r0, sp, #8
   20cc4:	sub	r1, fp, #132	; 0x84
   20cc8:	ldrd	r2, [r1]
   20ccc:	strd	r2, [r0]
   20cd0:	ldrd	r2, [r1, #8]
   20cd4:	strd	r2, [r0, #8]
   20cd8:	mov	r1, sp
   20cdc:	sub	r3, fp, #108	; 0x6c
   20ce0:	ldrd	r2, [r3]
   20ce4:	strd	r2, [r1]
   20ce8:	sub	r3, fp, #116	; 0x74
   20cec:	ldm	r3, {r2, r3}
   20cf0:	mov	r0, ip
   20cf4:	bl	20148 <flatcc_emitter_copy_buffer@@Base+0x29fc>
   20cf8:	sub	r0, fp, #116	; 0x74
   20cfc:	sub	r1, fp, #180	; 0xb4
   20d00:	ldrd	r2, [r1]
   20d04:	strd	r2, [r0]
   20d08:	ldrd	r2, [r1, #8]
   20d0c:	strd	r2, [r0, #8]
   20d10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20d14:	cmp	r3, #0
   20d18:	movne	r3, #1
   20d1c:	moveq	r3, #0
   20d20:	uxtb	r3, r3
   20d24:	mov	r2, r3
   20d28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20d2c:	add	r2, r2, r3
   20d30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20d34:	add	r3, r3, r2
   20d38:	str	r3, [fp, #-32]	; 0xffffffe0
   20d3c:	ldr	r3, [fp, #-108]	; 0xffffff94
   20d40:	str	r3, [fp, #-84]	; 0xffffffac
   20d44:	sub	r0, fp, #180	; 0xb4
   20d48:	mov	r1, sp
   20d4c:	sub	r3, fp, #108	; 0x6c
   20d50:	ldrd	r2, [r3]
   20d54:	strd	r2, [r1]
   20d58:	sub	r3, fp, #116	; 0x74
   20d5c:	ldm	r3, {r2, r3}
   20d60:	bl	2042c <flatcc_emitter_copy_buffer@@Base+0x2ce0>
   20d64:	sub	r0, fp, #116	; 0x74
   20d68:	sub	r1, fp, #180	; 0xb4
   20d6c:	ldrd	r2, [r1]
   20d70:	strd	r2, [r0]
   20d74:	ldrd	r2, [r1, #8]
   20d78:	strd	r2, [r0, #8]
   20d7c:	ldr	r2, [fp, #-108]	; 0xffffff94
   20d80:	ldr	r3, [fp, #-84]	; 0xffffffac
   20d84:	sub	r2, r3, r2
   20d88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20d8c:	lsl	r3, r3, r2
   20d90:	str	r3, [fp, #-32]	; 0xffffffe0
   20d94:	ldr	r2, [fp, #-108]	; 0xffffff94
   20d98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20d9c:	add	r3, r3, r2
   20da0:	str	r3, [fp, #-88]	; 0xffffffa8
   20da4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   20da8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20dac:	add	r2, r2, r3
   20db0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   20db4:	cmp	r3, r2
   20db8:	bge	20de4 <grisu3_diy_fp_encode_double@@Base+0x31c>
   20dbc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   20dc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20dc4:	cmp	r2, r3
   20dc8:	ble	20ddc <grisu3_diy_fp_encode_double@@Base+0x314>
   20dcc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   20dd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20dd4:	sub	r3, r2, r3
   20dd8:	b	20de8 <grisu3_diy_fp_encode_double@@Base+0x320>
   20ddc:	mov	r3, #0
   20de0:	b	20de8 <grisu3_diy_fp_encode_double@@Base+0x320>
   20de4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20de8:	str	r3, [fp, #-88]	; 0xffffffa8
   20dec:	ldr	r2, [fp, #-64]	; 0xffffffc0
   20df0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   20df4:	sub	r3, r2, r3
   20df8:	str	r3, [fp, #-36]	; 0xffffffdc
   20dfc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20e00:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20e04:	add	r2, r2, r3
   20e08:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20e0c:	cmp	r3, r2
   20e10:	bgt	20e90 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   20e14:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20e18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20e1c:	add	r2, r2, r3
   20e20:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20e24:	sub	r3, r2, r3
   20e28:	sub	r3, r3, #1
   20e2c:	str	r3, [fp, #-92]	; 0xffffffa4
   20e30:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   20e34:	ldr	r1, [fp, #-92]	; 0xffffffa4
   20e38:	rsb	ip, r1, #32
   20e3c:	sub	r0, r1, #32
   20e40:	lsr	r4, r2, r1
   20e44:	orr	r4, r4, r3, lsl ip
   20e48:	orr	r4, r4, r3, lsr r0
   20e4c:	lsr	r5, r3, r1
   20e50:	strd	r4, [fp, #-116]	; 0xffffff8c
   20e54:	ldr	r2, [fp, #-108]	; 0xffffff94
   20e58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   20e5c:	add	r3, r2, r3
   20e60:	str	r3, [fp, #-108]	; 0xffffff94
   20e64:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20e68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   20e6c:	asr	r3, r2, r3
   20e70:	add	r2, r3, #1
   20e74:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20e78:	add	r3, r3, r2
   20e7c:	str	r3, [fp, #-32]	; 0xffffffe0
   20e80:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20e84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   20e88:	sub	r3, r2, r3
   20e8c:	str	r3, [fp, #-36]	; 0xffffffdc
   20e90:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   20e94:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20e98:	rsb	ip, r1, #32
   20e9c:	sub	r0, r1, #32
   20ea0:	lsr	r8, r2, r1
   20ea4:	orr	r8, r8, r3, lsl ip
   20ea8:	orr	r8, r8, r3, lsr r0
   20eac:	lsr	r9, r3, r1
   20eb0:	strd	r8, [fp, #-148]	; 0xffffff6c
   20eb4:	ldr	r2, [fp, #-108]	; 0xffffff94
   20eb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20ebc:	add	r3, r2, r3
   20ec0:	str	r3, [fp, #-140]	; 0xffffff74
   20ec4:	ldrd	r4, [fp, #-116]	; 0xffffff8c
   20ec8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20ecc:	sub	r1, r3, #1
   20ed0:	mov	r2, #1
   20ed4:	mov	r3, #0
   20ed8:	sub	ip, r1, #32
   20edc:	rsb	r0, r1, #32
   20ee0:	lsl	r7, r3, r1
   20ee4:	orr	r7, r7, r2, lsl ip
   20ee8:	orr	r7, r7, r2, lsr r0
   20eec:	lsl	r6, r2, r1
   20ef0:	and	r3, r4, r6
   20ef4:	str	r3, [fp, #-196]	; 0xffffff3c
   20ef8:	and	r3, r5, r7
   20efc:	str	r3, [fp, #-192]	; 0xffffff40
   20f00:	ldr	r1, [fp, #-196]	; 0xffffff3c
   20f04:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20f08:	mov	r2, r3
   20f0c:	asr	r3, r2, #31
   20f10:	mov	r3, r2
   20f14:	mul	r3, r3, r1
   20f18:	str	r3, [fp, #-96]	; 0xffffffa0
   20f1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20f20:	mov	r2, r3
   20f24:	asr	r3, r2, #31
   20f28:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20f2c:	sub	r1, r1, #1
   20f30:	sub	ip, r1, #32
   20f34:	rsb	r0, r1, #32
   20f38:	lsl	lr, r3, r1
   20f3c:	str	lr, [fp, #-184]	; 0xffffff48
   20f40:	ldr	lr, [fp, #-184]	; 0xffffff48
   20f44:	orr	ip, lr, r2, lsl ip
   20f48:	str	ip, [fp, #-184]	; 0xffffff48
   20f4c:	ldr	ip, [fp, #-184]	; 0xffffff48
   20f50:	orr	r0, ip, r2, lsr r0
   20f54:	str	r0, [fp, #-184]	; 0xffffff48
   20f58:	lsl	r3, r2, r1
   20f5c:	str	r3, [fp, #-188]	; 0xffffff44
   20f60:	ldr	r3, [fp, #-188]	; 0xffffff44
   20f64:	str	r3, [fp, #-100]	; 0xffffff9c
   20f68:	ldr	r2, [fp, #-100]	; 0xffffff9c
   20f6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20f70:	add	r3, r2, r3
   20f74:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20f78:	cmp	r2, r3
   20f7c:	blt	20ffc <grisu3_diy_fp_encode_double@@Base+0x534>
   20f80:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   20f84:	adds	r1, r2, #1
   20f88:	str	r1, [fp, #-204]	; 0xffffff34
   20f8c:	adc	r3, r3, #0
   20f90:	str	r3, [fp, #-200]	; 0xffffff38
   20f94:	ldrd	r2, [fp, #-204]	; 0xffffff34
   20f98:	strd	r2, [fp, #-148]	; 0xffffff6c
   20f9c:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   20fa0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   20fa4:	adds	ip, r2, r2
   20fa8:	str	ip, [fp, #-220]	; 0xffffff24
   20fac:	adc	r3, r3, r3
   20fb0:	str	r3, [fp, #-216]	; 0xffffff28
   20fb4:	ldrd	r2, [fp, #-220]	; 0xffffff24
   20fb8:	and	ip, r0, r2
   20fbc:	str	ip, [fp, #-212]	; 0xffffff2c
   20fc0:	and	r3, r1, r3
   20fc4:	str	r3, [fp, #-208]	; 0xffffff30
   20fc8:	ldrd	r2, [fp, #-212]	; 0xffffff2c
   20fcc:	orrs	r3, r2, r3
   20fd0:	beq	20ffc <grisu3_diy_fp_encode_double@@Base+0x534>
   20fd4:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   20fd8:	mov	r2, #0
   20fdc:	mov	r3, #0
   20fe0:	lsr	r2, r0, #1
   20fe4:	orr	r2, r2, r1, lsl #31
   20fe8:	lsr	r3, r1, #1
   20fec:	strd	r2, [fp, #-148]	; 0xffffff6c
   20ff0:	ldr	r3, [fp, #-140]	; 0xffffff74
   20ff4:	add	r3, r3, #1
   20ff8:	str	r3, [fp, #-140]	; 0xffffff74
   20ffc:	sub	r3, fp, #148	; 0x94
   21000:	ldm	r3, {r0, r1, r2, r3}
   21004:	bl	2065c <flatcc_emitter_copy_buffer@@Base+0x2f10>
   21008:	vmov.f64	d7, d0
   2100c:	ldr	r3, [fp, #8]
   21010:	vstr	d7, [r3]
   21014:	ldr	r2, [fp, #-100]	; 0xffffff9c
   21018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2101c:	sub	r3, r2, r3
   21020:	ldr	r2, [fp, #-96]	; 0xffffffa0
   21024:	cmp	r2, r3
   21028:	ble	21044 <grisu3_diy_fp_encode_double@@Base+0x57c>
   2102c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   21030:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21034:	add	r3, r2, r3
   21038:	ldr	r2, [fp, #-96]	; 0xffffffa0
   2103c:	cmp	r2, r3
   21040:	blt	2104c <grisu3_diy_fp_encode_double@@Base+0x584>
   21044:	mov	r3, #1
   21048:	b	21050 <grisu3_diy_fp_encode_double@@Base+0x588>
   2104c:	mov	r3, #0
   21050:	mov	r0, r3
   21054:	sub	sp, fp, #28
   21058:	ldrd	r4, [sp]
   2105c:	ldrd	r6, [sp, #8]
   21060:	ldrd	r8, [sp, #16]
   21064:	ldr	fp, [sp, #24]
   21068:	add	sp, sp, #28
   2106c:	pop	{pc}		; (ldr pc, [sp], #4)
   21070:	andeq	r7, r0, r4, asr r8
   21074:	andeq	r7, r0, r8, asr #5
   21078:	andeq	r7, r0, r8, lsr #7
   2107c:	andeq	r8, r1, r4, asr #8
   21080:	str	fp, [sp, #-8]!
   21084:	str	lr, [sp, #4]
   21088:	add	fp, sp, #4
   2108c:	sub	sp, sp, #48	; 0x30
   21090:	str	r0, [fp, #-32]	; 0xffffffe0
   21094:	str	r1, [fp, #-36]	; 0xffffffdc
   21098:	str	r2, [fp, #-40]	; 0xffffffd8
   2109c:	movw	r3, #309	; 0x135
   210a0:	str	r3, [fp, #-16]
   210a4:	movw	r3, #65212	; 0xfebc
   210a8:	movt	r3, #65535	; 0xffff
   210ac:	str	r3, [fp, #-20]	; 0xffffffec
   210b0:	ldrd	r2, [fp, #4]
   210b4:	orrs	r3, r2, r3
   210b8:	beq	210cc <grisu3_diy_fp_encode_double@@Base+0x604>
   210bc:	ldr	r2, [fp, #12]
   210c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   210c4:	cmp	r2, r3
   210c8:	bge	210e0 <grisu3_diy_fp_encode_double@@Base+0x618>
   210cc:	ldr	r1, [fp, #24]
   210d0:	mov	r2, #0
   210d4:	mov	r3, #0
   210d8:	strd	r2, [r1]
   210dc:	b	216cc <grisu3_diy_fp_encode_double@@Base+0xc04>
   210e0:	ldr	r3, [fp, #12]
   210e4:	sub	r3, r3, #1
   210e8:	ldr	r2, [fp, #-16]
   210ec:	cmp	r2, r3
   210f0:	bge	21114 <grisu3_diy_fp_encode_double@@Base+0x64c>
   210f4:	mov	r0, #0
   210f8:	mov	r1, #0
   210fc:	movt	r1, #32752	; 0x7ff0
   21100:	bl	1fee0 <flatcc_emitter_copy_buffer@@Base+0x2794>
   21104:	vmov.f64	d7, d0
   21108:	ldr	r3, [fp, #24]
   2110c:	vstr	d7, [r3]
   21110:	b	216cc <grisu3_diy_fp_encode_double@@Base+0xc04>
   21114:	ldrd	r2, [fp, #4]
   21118:	mvn	r0, #0
   2111c:	movw	r1, #65535	; 0xffff
   21120:	movt	r1, #31
   21124:	cmp	r3, r1
   21128:	cmpeq	r2, r0
   2112c:	bhi	215ac <grisu3_diy_fp_encode_double@@Base+0xae4>
   21130:	ldr	r3, [fp, #12]
   21134:	cmp	r3, #0
   21138:	blt	215ac <grisu3_diy_fp_encode_double@@Base+0xae4>
   2113c:	ldr	r3, [fp, #12]
   21140:	cmp	r3, #22
   21144:	bgt	215ac <grisu3_diy_fp_encode_double@@Base+0xae4>
   21148:	ldrd	r0, [fp, #4]
   2114c:	bl	266f4 <flatcc_json_parser_struct_as_root@@Base+0x474>
   21150:	mov	r2, r0
   21154:	mov	r3, r1
   21158:	strd	r2, [fp, #-12]
   2115c:	ldr	r2, [fp, #12]
   21160:	ldr	r3, [fp, #16]
   21164:	sub	r3, r2, r3
   21168:	add	r3, r3, #22
   2116c:	cmp	r3, #44	; 0x2c
   21170:	addls	pc, pc, r3, lsl #2
   21174:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21178:	b	2122c <grisu3_diy_fp_encode_double@@Base+0x764>
   2117c:	b	21240 <grisu3_diy_fp_encode_double@@Base+0x778>
   21180:	b	21254 <grisu3_diy_fp_encode_double@@Base+0x78c>
   21184:	b	21268 <grisu3_diy_fp_encode_double@@Base+0x7a0>
   21188:	b	2127c <grisu3_diy_fp_encode_double@@Base+0x7b4>
   2118c:	b	21290 <grisu3_diy_fp_encode_double@@Base+0x7c8>
   21190:	b	212a4 <grisu3_diy_fp_encode_double@@Base+0x7dc>
   21194:	b	212b8 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   21198:	b	212cc <grisu3_diy_fp_encode_double@@Base+0x804>
   2119c:	b	212e0 <grisu3_diy_fp_encode_double@@Base+0x818>
   211a0:	b	212f4 <grisu3_diy_fp_encode_double@@Base+0x82c>
   211a4:	b	21308 <grisu3_diy_fp_encode_double@@Base+0x840>
   211a8:	b	2131c <grisu3_diy_fp_encode_double@@Base+0x854>
   211ac:	b	21330 <grisu3_diy_fp_encode_double@@Base+0x868>
   211b0:	b	21344 <grisu3_diy_fp_encode_double@@Base+0x87c>
   211b4:	b	21358 <grisu3_diy_fp_encode_double@@Base+0x890>
   211b8:	b	2136c <grisu3_diy_fp_encode_double@@Base+0x8a4>
   211bc:	b	21380 <grisu3_diy_fp_encode_double@@Base+0x8b8>
   211c0:	b	21394 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   211c4:	b	213a8 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   211c8:	b	213bc <grisu3_diy_fp_encode_double@@Base+0x8f4>
   211cc:	b	213d0 <grisu3_diy_fp_encode_double@@Base+0x908>
   211d0:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   211d4:	b	213e4 <grisu3_diy_fp_encode_double@@Base+0x91c>
   211d8:	b	213f8 <grisu3_diy_fp_encode_double@@Base+0x930>
   211dc:	b	2140c <grisu3_diy_fp_encode_double@@Base+0x944>
   211e0:	b	21420 <grisu3_diy_fp_encode_double@@Base+0x958>
   211e4:	b	21434 <grisu3_diy_fp_encode_double@@Base+0x96c>
   211e8:	b	21448 <grisu3_diy_fp_encode_double@@Base+0x980>
   211ec:	b	2145c <grisu3_diy_fp_encode_double@@Base+0x994>
   211f0:	b	21470 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   211f4:	b	21484 <grisu3_diy_fp_encode_double@@Base+0x9bc>
   211f8:	b	21498 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   211fc:	b	214ac <grisu3_diy_fp_encode_double@@Base+0x9e4>
   21200:	b	214c0 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   21204:	b	214d4 <grisu3_diy_fp_encode_double@@Base+0xa0c>
   21208:	b	214e8 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2120c:	b	214fc <grisu3_diy_fp_encode_double@@Base+0xa34>
   21210:	b	21510 <grisu3_diy_fp_encode_double@@Base+0xa48>
   21214:	b	21524 <grisu3_diy_fp_encode_double@@Base+0xa5c>
   21218:	b	21538 <grisu3_diy_fp_encode_double@@Base+0xa70>
   2121c:	b	2154c <grisu3_diy_fp_encode_double@@Base+0xa84>
   21220:	b	21560 <grisu3_diy_fp_encode_double@@Base+0xa98>
   21224:	b	21574 <grisu3_diy_fp_encode_double@@Base+0xaac>
   21228:	b	21588 <grisu3_diy_fp_encode_double@@Base+0xac0>
   2122c:	vldr	d6, [fp, #-12]
   21230:	vldr	d5, [pc, #992]	; 21618 <grisu3_diy_fp_encode_double@@Base+0xb50>
   21234:	vdiv.f64	d7, d6, d5
   21238:	vstr	d7, [fp, #-12]
   2123c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21240:	vldr	d6, [fp, #-12]
   21244:	vldr	d5, [pc, #980]	; 21620 <grisu3_diy_fp_encode_double@@Base+0xb58>
   21248:	vdiv.f64	d7, d6, d5
   2124c:	vstr	d7, [fp, #-12]
   21250:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21254:	vldr	d6, [fp, #-12]
   21258:	vldr	d5, [pc, #968]	; 21628 <grisu3_diy_fp_encode_double@@Base+0xb60>
   2125c:	vdiv.f64	d7, d6, d5
   21260:	vstr	d7, [fp, #-12]
   21264:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21268:	vldr	d6, [fp, #-12]
   2126c:	vldr	d5, [pc, #956]	; 21630 <grisu3_diy_fp_encode_double@@Base+0xb68>
   21270:	vdiv.f64	d7, d6, d5
   21274:	vstr	d7, [fp, #-12]
   21278:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   2127c:	vldr	d6, [fp, #-12]
   21280:	vldr	d5, [pc, #944]	; 21638 <grisu3_diy_fp_encode_double@@Base+0xb70>
   21284:	vdiv.f64	d7, d6, d5
   21288:	vstr	d7, [fp, #-12]
   2128c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21290:	vldr	d6, [fp, #-12]
   21294:	vldr	d5, [pc, #932]	; 21640 <grisu3_diy_fp_encode_double@@Base+0xb78>
   21298:	vdiv.f64	d7, d6, d5
   2129c:	vstr	d7, [fp, #-12]
   212a0:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   212a4:	vldr	d6, [fp, #-12]
   212a8:	vldr	d5, [pc, #920]	; 21648 <grisu3_diy_fp_encode_double@@Base+0xb80>
   212ac:	vdiv.f64	d7, d6, d5
   212b0:	vstr	d7, [fp, #-12]
   212b4:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   212b8:	vldr	d6, [fp, #-12]
   212bc:	vldr	d5, [pc, #908]	; 21650 <grisu3_diy_fp_encode_double@@Base+0xb88>
   212c0:	vdiv.f64	d7, d6, d5
   212c4:	vstr	d7, [fp, #-12]
   212c8:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   212cc:	vldr	d6, [fp, #-12]
   212d0:	vldr	d5, [pc, #896]	; 21658 <grisu3_diy_fp_encode_double@@Base+0xb90>
   212d4:	vdiv.f64	d7, d6, d5
   212d8:	vstr	d7, [fp, #-12]
   212dc:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   212e0:	vldr	d6, [fp, #-12]
   212e4:	vldr	d5, [pc, #884]	; 21660 <grisu3_diy_fp_encode_double@@Base+0xb98>
   212e8:	vdiv.f64	d7, d6, d5
   212ec:	vstr	d7, [fp, #-12]
   212f0:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   212f4:	vldr	d6, [fp, #-12]
   212f8:	vldr	d5, [pc, #872]	; 21668 <grisu3_diy_fp_encode_double@@Base+0xba0>
   212fc:	vdiv.f64	d7, d6, d5
   21300:	vstr	d7, [fp, #-12]
   21304:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21308:	vldr	d6, [fp, #-12]
   2130c:	vldr	d5, [pc, #860]	; 21670 <grisu3_diy_fp_encode_double@@Base+0xba8>
   21310:	vdiv.f64	d7, d6, d5
   21314:	vstr	d7, [fp, #-12]
   21318:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   2131c:	vldr	d6, [fp, #-12]
   21320:	vldr	d5, [pc, #848]	; 21678 <grisu3_diy_fp_encode_double@@Base+0xbb0>
   21324:	vdiv.f64	d7, d6, d5
   21328:	vstr	d7, [fp, #-12]
   2132c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21330:	vldr	d6, [fp, #-12]
   21334:	vldr	d5, [pc, #836]	; 21680 <grisu3_diy_fp_encode_double@@Base+0xbb8>
   21338:	vdiv.f64	d7, d6, d5
   2133c:	vstr	d7, [fp, #-12]
   21340:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21344:	vldr	d6, [fp, #-12]
   21348:	vldr	d5, [pc, #824]	; 21688 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2134c:	vdiv.f64	d7, d6, d5
   21350:	vstr	d7, [fp, #-12]
   21354:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21358:	vldr	d6, [fp, #-12]
   2135c:	vldr	d5, [pc, #812]	; 21690 <grisu3_diy_fp_encode_double@@Base+0xbc8>
   21360:	vdiv.f64	d7, d6, d5
   21364:	vstr	d7, [fp, #-12]
   21368:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   2136c:	vldr	d6, [fp, #-12]
   21370:	vldr	d5, [pc, #800]	; 21698 <grisu3_diy_fp_encode_double@@Base+0xbd0>
   21374:	vdiv.f64	d7, d6, d5
   21378:	vstr	d7, [fp, #-12]
   2137c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21380:	vldr	d6, [fp, #-12]
   21384:	vldr	d5, [pc, #788]	; 216a0 <grisu3_diy_fp_encode_double@@Base+0xbd8>
   21388:	vdiv.f64	d7, d6, d5
   2138c:	vstr	d7, [fp, #-12]
   21390:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21394:	vldr	d6, [fp, #-12]
   21398:	vldr	d5, [pc, #776]	; 216a8 <grisu3_diy_fp_encode_double@@Base+0xbe0>
   2139c:	vdiv.f64	d7, d6, d5
   213a0:	vstr	d7, [fp, #-12]
   213a4:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   213a8:	vldr	d6, [fp, #-12]
   213ac:	vldr	d5, [pc, #764]	; 216b0 <grisu3_diy_fp_encode_double@@Base+0xbe8>
   213b0:	vdiv.f64	d7, d6, d5
   213b4:	vstr	d7, [fp, #-12]
   213b8:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   213bc:	vldr	d6, [fp, #-12]
   213c0:	vldr	d5, [pc, #752]	; 216b8 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   213c4:	vdiv.f64	d7, d6, d5
   213c8:	vstr	d7, [fp, #-12]
   213cc:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   213d0:	vldr	d6, [fp, #-12]
   213d4:	vldr	d5, [pc, #740]	; 216c0 <grisu3_diy_fp_encode_double@@Base+0xbf8>
   213d8:	vdiv.f64	d7, d6, d5
   213dc:	vstr	d7, [fp, #-12]
   213e0:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   213e4:	vldr	d7, [fp, #-12]
   213e8:	vldr	d6, [pc, #720]	; 216c0 <grisu3_diy_fp_encode_double@@Base+0xbf8>
   213ec:	vmul.f64	d7, d7, d6
   213f0:	vstr	d7, [fp, #-12]
   213f4:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   213f8:	vldr	d7, [fp, #-12]
   213fc:	vldr	d6, [pc, #692]	; 216b8 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   21400:	vmul.f64	d7, d7, d6
   21404:	vstr	d7, [fp, #-12]
   21408:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   2140c:	vldr	d7, [fp, #-12]
   21410:	vldr	d6, [pc, #664]	; 216b0 <grisu3_diy_fp_encode_double@@Base+0xbe8>
   21414:	vmul.f64	d7, d7, d6
   21418:	vstr	d7, [fp, #-12]
   2141c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21420:	vldr	d7, [fp, #-12]
   21424:	vldr	d6, [pc, #636]	; 216a8 <grisu3_diy_fp_encode_double@@Base+0xbe0>
   21428:	vmul.f64	d7, d7, d6
   2142c:	vstr	d7, [fp, #-12]
   21430:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21434:	vldr	d7, [fp, #-12]
   21438:	vldr	d6, [pc, #608]	; 216a0 <grisu3_diy_fp_encode_double@@Base+0xbd8>
   2143c:	vmul.f64	d7, d7, d6
   21440:	vstr	d7, [fp, #-12]
   21444:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21448:	vldr	d7, [fp, #-12]
   2144c:	vldr	d6, [pc, #580]	; 21698 <grisu3_diy_fp_encode_double@@Base+0xbd0>
   21450:	vmul.f64	d7, d7, d6
   21454:	vstr	d7, [fp, #-12]
   21458:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   2145c:	vldr	d7, [fp, #-12]
   21460:	vldr	d6, [pc, #552]	; 21690 <grisu3_diy_fp_encode_double@@Base+0xbc8>
   21464:	vmul.f64	d7, d7, d6
   21468:	vstr	d7, [fp, #-12]
   2146c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21470:	vldr	d7, [fp, #-12]
   21474:	vldr	d6, [pc, #524]	; 21688 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   21478:	vmul.f64	d7, d7, d6
   2147c:	vstr	d7, [fp, #-12]
   21480:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21484:	vldr	d7, [fp, #-12]
   21488:	vldr	d6, [pc, #496]	; 21680 <grisu3_diy_fp_encode_double@@Base+0xbb8>
   2148c:	vmul.f64	d7, d7, d6
   21490:	vstr	d7, [fp, #-12]
   21494:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21498:	vldr	d7, [fp, #-12]
   2149c:	vldr	d6, [pc, #468]	; 21678 <grisu3_diy_fp_encode_double@@Base+0xbb0>
   214a0:	vmul.f64	d7, d7, d6
   214a4:	vstr	d7, [fp, #-12]
   214a8:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   214ac:	vldr	d7, [fp, #-12]
   214b0:	vldr	d6, [pc, #440]	; 21670 <grisu3_diy_fp_encode_double@@Base+0xba8>
   214b4:	vmul.f64	d7, d7, d6
   214b8:	vstr	d7, [fp, #-12]
   214bc:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   214c0:	vldr	d7, [fp, #-12]
   214c4:	vldr	d6, [pc, #412]	; 21668 <grisu3_diy_fp_encode_double@@Base+0xba0>
   214c8:	vmul.f64	d7, d7, d6
   214cc:	vstr	d7, [fp, #-12]
   214d0:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   214d4:	vldr	d7, [fp, #-12]
   214d8:	vldr	d6, [pc, #384]	; 21660 <grisu3_diy_fp_encode_double@@Base+0xb98>
   214dc:	vmul.f64	d7, d7, d6
   214e0:	vstr	d7, [fp, #-12]
   214e4:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   214e8:	vldr	d7, [fp, #-12]
   214ec:	vldr	d6, [pc, #356]	; 21658 <grisu3_diy_fp_encode_double@@Base+0xb90>
   214f0:	vmul.f64	d7, d7, d6
   214f4:	vstr	d7, [fp, #-12]
   214f8:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   214fc:	vldr	d7, [fp, #-12]
   21500:	vldr	d6, [pc, #328]	; 21650 <grisu3_diy_fp_encode_double@@Base+0xb88>
   21504:	vmul.f64	d7, d7, d6
   21508:	vstr	d7, [fp, #-12]
   2150c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21510:	vldr	d7, [fp, #-12]
   21514:	vldr	d6, [pc, #300]	; 21648 <grisu3_diy_fp_encode_double@@Base+0xb80>
   21518:	vmul.f64	d7, d7, d6
   2151c:	vstr	d7, [fp, #-12]
   21520:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21524:	vldr	d7, [fp, #-12]
   21528:	vldr	d6, [pc, #272]	; 21640 <grisu3_diy_fp_encode_double@@Base+0xb78>
   2152c:	vmul.f64	d7, d7, d6
   21530:	vstr	d7, [fp, #-12]
   21534:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21538:	vldr	d7, [fp, #-12]
   2153c:	vldr	d6, [pc, #244]	; 21638 <grisu3_diy_fp_encode_double@@Base+0xb70>
   21540:	vmul.f64	d7, d7, d6
   21544:	vstr	d7, [fp, #-12]
   21548:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   2154c:	vldr	d7, [fp, #-12]
   21550:	vldr	d6, [pc, #216]	; 21630 <grisu3_diy_fp_encode_double@@Base+0xb68>
   21554:	vmul.f64	d7, d7, d6
   21558:	vstr	d7, [fp, #-12]
   2155c:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21560:	vldr	d7, [fp, #-12]
   21564:	vldr	d6, [pc, #188]	; 21628 <grisu3_diy_fp_encode_double@@Base+0xb60>
   21568:	vmul.f64	d7, d7, d6
   2156c:	vstr	d7, [fp, #-12]
   21570:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21574:	vldr	d7, [fp, #-12]
   21578:	vldr	d6, [pc, #160]	; 21620 <grisu3_diy_fp_encode_double@@Base+0xb58>
   2157c:	vmul.f64	d7, d7, d6
   21580:	vstr	d7, [fp, #-12]
   21584:	b	2159c <grisu3_diy_fp_encode_double@@Base+0xad4>
   21588:	vldr	d7, [fp, #-12]
   2158c:	vldr	d6, [pc, #132]	; 21618 <grisu3_diy_fp_encode_double@@Base+0xb50>
   21590:	vmul.f64	d7, d7, d6
   21594:	vstr	d7, [fp, #-12]
   21598:	nop	{0}
   2159c:	ldr	r1, [fp, #24]
   215a0:	ldrd	r2, [fp, #-12]
   215a4:	strd	r2, [r1]
   215a8:	b	216cc <grisu3_diy_fp_encode_double@@Base+0xc04>
   215ac:	ldr	r3, [fp, #24]
   215b0:	str	r3, [sp, #4]
   215b4:	ldr	r3, [fp, #20]
   215b8:	str	r3, [sp]
   215bc:	ldr	r3, [fp, #16]
   215c0:	ldr	r2, [fp, #12]
   215c4:	ldrd	r0, [fp, #4]
   215c8:	bl	20ac8 <grisu3_diy_fp_encode_double@@Base>
   215cc:	mov	r3, r0
   215d0:	cmp	r3, #0
   215d4:	bne	216c8 <grisu3_diy_fp_encode_double@@Base+0xc00>
   215d8:	sub	r3, fp, #24
   215dc:	mov	r1, r3
   215e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   215e4:	bl	1248c <strtod@plt>
   215e8:	vmov.f64	d7, d0
   215ec:	ldr	r3, [fp, #24]
   215f0:	vstr	d7, [r3]
   215f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   215f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   215fc:	cmp	r2, r3
   21600:	bls	2160c <grisu3_diy_fp_encode_double@@Base+0xb44>
   21604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21608:	b	216f0 <grisu3_diy_fp_encode_double@@Base+0xc28>
   2160c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   21610:	b	216f0 <grisu3_diy_fp_encode_double@@Base+0xc28>
   21614:	nop	{0}
   21618:			; <UNDEFINED> instruction: 0x064dd592
   2161c:	strmi	pc, [r0], #207	; 0xcf
   21620:	usatle	lr, #2, r0, asr #30
   21624:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   21628:	ldmvc	r5!, {r6, sl, fp, pc}
   2162c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   21630:	addsvs	r3, r1, r0, lsl #26
   21634:	mvnmi	r5, #228, 16	; 0xe40000
   21638:	strbvs	ip, [lr, -r0, lsl #16]
   2163c:			; <UNDEFINED> instruction: 0x43abc16d
   21640:	ldrbhi	sl, [r8]
   21644:	cmnmi	r6, #1459617792	; 0x57000000
   21648:	strbcc	r8, [r0, r0]!
   2164c:	movtmi	ip, #4985	; 0x1379
   21650:	ldrtcs	r0, [r4], -r0
   21654:	movwmi	r6, #52213	; 0xcbf5
   21658:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2165c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   21660:	strb	r0, [r0, #-0]
   21664:	adcmi	r3, r2, #156	; 0x9c
   21668:	andge	r0, r0, #0
   2166c:	rsbmi	r1, sp, #148, 20	; 0x94000
   21670:	stmda	r0, {}	; <UNPREDICTABLE>
   21674:	eorsmi	r4, r7, #7733248	; 0x760000
   21678:	andcs	r0, r0, r0
   2167c:	andmi	sl, r2, #95	; 0x5f
   21680:	andeq	r0, r0, r0
   21684:	bicmi	ip, sp, r5, ror #26
   21688:	andeq	r0, r0, r0
   2168c:	orrsmi	sp, r7, r4, lsl #15
   21690:	andeq	r0, r0, r0
   21694:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   21698:	andeq	r0, r0, r0
   2169c:	smlawbmi	lr, r0, r4, r8
   216a0:	andeq	r0, r0, r0
   216a4:	rscsmi	r6, r8, r0, lsl #20
   216a8:	andeq	r0, r0, r0
   216ac:	sbcmi	r8, r3, r0, lsl #16
   216b0:	andeq	r0, r0, r0
   216b4:	addmi	r4, pc, r0
   216b8:	andeq	r0, r0, r0
   216bc:	subsmi	r0, r9, r0
   216c0:	andeq	r0, r0, r0
   216c4:	eormi	r0, r4, r0
   216c8:	nop	{0}
   216cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   216d0:	cmp	r3, #0
   216d4:	beq	216ec <grisu3_diy_fp_encode_double@@Base+0xc24>
   216d8:	ldr	r3, [fp, #24]
   216dc:	vldr	d7, [r3]
   216e0:	vneg.f64	d7, d7
   216e4:	ldr	r3, [fp, #24]
   216e8:	vstr	d7, [r3]
   216ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   216f0:	mov	r0, r3
   216f4:	sub	sp, fp, #4
   216f8:	ldr	fp, [sp]
   216fc:	add	sp, sp, #4
   21700:	pop	{pc}		; (ldr pc, [sp], #4)
   21704:	push	{fp}		; (str fp, [sp, #-4]!)
   21708:	add	fp, sp, #0
   2170c:	sub	sp, sp, #20
   21710:	str	r0, [fp, #-8]
   21714:	str	r1, [fp, #-12]
   21718:	str	r2, [fp, #-16]
   2171c:	str	r3, [fp, #-20]	; 0xffffffec
   21720:	ldr	r1, [fp, #-20]	; 0xffffffec
   21724:	mov	r2, #0
   21728:	mov	r3, #0
   2172c:	strd	r2, [r1]
   21730:	ldr	r3, [fp, #-8]
   21734:	mov	r0, r3
   21738:	add	sp, fp, #0
   2173c:	pop	{fp}		; (ldr fp, [sp], #4)
   21740:	bx	lr
   21744:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21748:	strd	r6, [sp, #8]
   2174c:	strd	r8, [sp, #16]
   21750:	str	fp, [sp, #24]
   21754:	str	lr, [sp, #28]
   21758:	add	fp, sp, #28
   2175c:	sub	sp, sp, #136	; 0x88
   21760:	str	r0, [fp, #-80]	; 0xffffffb0
   21764:	str	r1, [fp, #-84]	; 0xffffffac
   21768:	str	r2, [fp, #-88]	; 0xffffffa8
   2176c:	mov	r3, #0
   21770:	str	r3, [fp, #-36]	; 0xffffffdc
   21774:	mov	r3, #0
   21778:	str	r3, [fp, #-40]	; 0xffffffd8
   2177c:	mov	r2, #0
   21780:	mov	r3, #0
   21784:	strd	r2, [fp, #-52]	; 0xffffffcc
   21788:	mov	r3, #0
   2178c:	str	r3, [fp, #-56]	; 0xffffffc8
   21790:	mov	r3, #0
   21794:	str	r3, [fp, #-60]	; 0xffffffc4
   21798:	mov	r3, #0
   2179c:	str	r3, [fp, #-64]	; 0xffffffc0
   217a0:	mov	r3, #0
   217a4:	str	r3, [fp, #-68]	; 0xffffffbc
   217a8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   217ac:	mov	r2, #0
   217b0:	mov	r3, #0
   217b4:	strd	r2, [r1]
   217b8:	ldr	r3, [fp, #-84]	; 0xffffffac
   217bc:	add	r2, r3, #1
   217c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   217c4:	add	r3, r3, r2
   217c8:	str	r3, [fp, #-32]	; 0xffffffe0
   217cc:	ldr	r3, [fp, #-84]	; 0xffffffac
   217d0:	cmp	r3, #1000	; 0x3e8
   217d4:	ble	217e8 <grisu3_diy_fp_encode_double@@Base+0xd20>
   217d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   217dc:	add	r3, r3, #1000	; 0x3e8
   217e0:	add	r3, r3, #1
   217e4:	str	r3, [fp, #-32]	; 0xffffffe0
   217e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   217ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   217f0:	cmp	r2, r3
   217f4:	bne	21800 <grisu3_diy_fp_encode_double@@Base+0xd38>
   217f8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   217fc:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21800:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21804:	str	r3, [fp, #-72]	; 0xffffffb8
   21808:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2180c:	ldrb	r3, [r3]
   21810:	cmp	r3, #45	; 0x2d
   21814:	bne	21844 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   21818:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2181c:	add	r3, r3, #1
   21820:	str	r3, [fp, #-80]	; 0xffffffb0
   21824:	mov	r3, #1
   21828:	str	r3, [fp, #-36]	; 0xffffffdc
   2182c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21830:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21834:	cmp	r2, r3
   21838:	bne	21844 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   2183c:	mov	r3, #0
   21840:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21844:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21848:	ldrb	r3, [r3]
   2184c:	cmp	r3, #48	; 0x30
   21850:	bne	218f0 <grisu3_diy_fp_encode_double@@Base+0xe28>
   21854:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21858:	add	r3, r3, #1
   2185c:	str	r3, [fp, #-80]	; 0xffffffb0
   21860:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21864:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21868:	cmp	r2, r3
   2186c:	beq	218cc <grisu3_diy_fp_encode_double@@Base+0xe04>
   21870:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21874:	ldrb	r3, [r3]
   21878:	orr	r3, r3, #32
   2187c:	uxtb	r3, r3
   21880:	cmp	r3, #120	; 0x78
   21884:	bne	218cc <grisu3_diy_fp_encode_double@@Base+0xe04>
   21888:	ldr	r3, [fp, #-88]	; 0xffffffa8
   2188c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   21890:	ldr	r1, [fp, #-32]	; 0xffffffe0
   21894:	ldr	r0, [fp, #-80]	; 0xffffffb0
   21898:	bl	21704 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   2189c:	str	r0, [fp, #-76]	; 0xffffffb4
   218a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   218a4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   218a8:	cmp	r2, r3
   218ac:	bne	218b8 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   218b0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   218b4:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   218b8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   218bc:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   218c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   218c4:	add	r3, r3, #1
   218c8:	str	r3, [fp, #-80]	; 0xffffffb0
   218cc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   218d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   218d4:	cmp	r2, r3
   218d8:	beq	2194c <grisu3_diy_fp_encode_double@@Base+0xe84>
   218dc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   218e0:	ldrb	r3, [r3]
   218e4:	cmp	r3, #48	; 0x30
   218e8:	beq	218c0 <grisu3_diy_fp_encode_double@@Base+0xdf8>
   218ec:	b	2194c <grisu3_diy_fp_encode_double@@Base+0xe84>
   218f0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   218f4:	ldrb	r3, [r3]
   218f8:	cmp	r3, #48	; 0x30
   218fc:	bls	21910 <grisu3_diy_fp_encode_double@@Base+0xe48>
   21900:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21904:	ldrb	r3, [r3]
   21908:	cmp	r3, #57	; 0x39
   2190c:	bls	2192c <grisu3_diy_fp_encode_double@@Base+0xe64>
   21910:	ldr	r3, [fp, #-36]	; 0xffffffdc
   21914:	cmp	r3, #0
   21918:	bne	21924 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2191c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   21920:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21924:	mov	r3, #0
   21928:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   2192c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21930:	add	r3, r2, #1
   21934:	str	r3, [fp, #-80]	; 0xffffffb0
   21938:	ldrb	r3, [r2]
   2193c:	sub	r3, r3, #48	; 0x30
   21940:	mov	r2, r3
   21944:	asr	r3, r2, #31
   21948:	strd	r2, [fp, #-52]	; 0xffffffcc
   2194c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21950:	str	r3, [fp, #-76]	; 0xffffffb4
   21954:	b	21a3c <grisu3_diy_fp_encode_double@@Base+0xf74>
   21958:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   2195c:	add	r3, pc, #924	; 0x39c
   21960:	ldrd	r2, [r3]
   21964:	cmp	r1, r3
   21968:	cmpeq	r0, r2
   2196c:	bls	219b8 <grisu3_diy_fp_encode_double@@Base+0xef0>
   21970:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21974:	ldrb	r3, [r3]
   21978:	cmp	r3, #52	; 0x34
   2197c:	movhi	r3, #1
   21980:	movls	r3, #0
   21984:	uxtb	r3, r3
   21988:	uxtb	r2, r3
   2198c:	mov	r3, #0
   21990:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   21994:	adds	ip, r0, r2
   21998:	str	ip, [fp, #-100]	; 0xffffff9c
   2199c:	adc	r3, r1, r3
   219a0:	str	r3, [fp, #-96]	; 0xffffffa0
   219a4:	ldrd	r2, [fp, #-100]	; 0xffffff9c
   219a8:	strd	r2, [fp, #-52]	; 0xffffffcc
   219ac:	mov	r3, #1
   219b0:	str	r3, [fp, #-68]	; 0xffffffbc
   219b4:	b	21a6c <grisu3_diy_fp_encode_double@@Base+0xfa4>
   219b8:	ldrd	r4, [fp, #-52]	; 0xffffffcc
   219bc:	mov	r2, r4
   219c0:	mov	r3, r5
   219c4:	mov	r0, #0
   219c8:	mov	r1, #0
   219cc:	lsl	r1, r3, #2
   219d0:	orr	r1, r1, r2, lsr #30
   219d4:	lsl	r0, r2, #2
   219d8:	mov	r2, r0
   219dc:	mov	r3, r1
   219e0:	adds	r2, r2, r4
   219e4:	adc	r3, r3, r5
   219e8:	adds	r1, r2, r2
   219ec:	str	r1, [fp, #-108]	; 0xffffff94
   219f0:	adc	r3, r3, r3
   219f4:	str	r3, [fp, #-104]	; 0xffffff98
   219f8:	ldrd	r2, [fp, #-108]	; 0xffffff94
   219fc:	mov	r0, r2
   21a00:	mov	r1, r3
   21a04:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21a08:	add	r3, r2, #1
   21a0c:	str	r3, [fp, #-80]	; 0xffffffb0
   21a10:	ldrb	r3, [r2]
   21a14:	uxtb	r2, r3
   21a18:	mov	r3, #0
   21a1c:	adds	r8, r0, r2
   21a20:	adc	r9, r1, r3
   21a24:	subs	r3, r8, #48	; 0x30
   21a28:	str	r3, [fp, #-116]	; 0xffffff8c
   21a2c:	sbc	r3, r9, #0
   21a30:	str	r3, [fp, #-112]	; 0xffffff90
   21a34:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   21a38:	strd	r2, [fp, #-52]	; 0xffffffcc
   21a3c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21a40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21a44:	cmp	r2, r3
   21a48:	beq	21a6c <grisu3_diy_fp_encode_double@@Base+0xfa4>
   21a4c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21a50:	ldrb	r3, [r3]
   21a54:	cmp	r3, #47	; 0x2f
   21a58:	bls	21a6c <grisu3_diy_fp_encode_double@@Base+0xfa4>
   21a5c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21a60:	ldrb	r3, [r3]
   21a64:	cmp	r3, #57	; 0x39
   21a68:	bls	21958 <grisu3_diy_fp_encode_double@@Base+0xe90>
   21a6c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21a70:	ldr	r3, [fp, #-76]	; 0xffffffb4
   21a74:	sub	r3, r2, r3
   21a78:	str	r3, [fp, #-64]	; 0xffffffc0
   21a7c:	b	21a98 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   21a80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21a84:	add	r3, r3, #1
   21a88:	str	r3, [fp, #-56]	; 0xffffffc8
   21a8c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21a90:	add	r3, r3, #1
   21a94:	str	r3, [fp, #-80]	; 0xffffffb0
   21a98:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21a9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21aa0:	cmp	r2, r3
   21aa4:	beq	21ab8 <grisu3_diy_fp_encode_double@@Base+0xff0>
   21aa8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21aac:	ldrb	r3, [r3]
   21ab0:	cmp	r3, #48	; 0x30
   21ab4:	beq	21a80 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   21ab8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21abc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21ac0:	cmp	r2, r3
   21ac4:	beq	21b54 <grisu3_diy_fp_encode_double@@Base+0x108c>
   21ac8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21acc:	ldrb	r3, [r3]
   21ad0:	cmp	r3, #48	; 0x30
   21ad4:	bls	21b54 <grisu3_diy_fp_encode_double@@Base+0x108c>
   21ad8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21adc:	ldrb	r3, [r3]
   21ae0:	cmp	r3, #57	; 0x39
   21ae4:	bhi	21b54 <grisu3_diy_fp_encode_double@@Base+0x108c>
   21ae8:	mov	r3, #1
   21aec:	str	r3, [fp, #-68]	; 0xffffffbc
   21af0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21af4:	add	r3, r3, #1
   21af8:	str	r3, [fp, #-56]	; 0xffffffc8
   21afc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b00:	add	r3, r3, #1
   21b04:	str	r3, [fp, #-80]	; 0xffffffb0
   21b08:	b	21b24 <grisu3_diy_fp_encode_double@@Base+0x105c>
   21b0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21b10:	add	r3, r3, #1
   21b14:	str	r3, [fp, #-56]	; 0xffffffc8
   21b18:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b1c:	add	r3, r3, #1
   21b20:	str	r3, [fp, #-80]	; 0xffffffb0
   21b24:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21b28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21b2c:	cmp	r2, r3
   21b30:	beq	21b54 <grisu3_diy_fp_encode_double@@Base+0x108c>
   21b34:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b38:	ldrb	r3, [r3]
   21b3c:	cmp	r3, #47	; 0x2f
   21b40:	bls	21b54 <grisu3_diy_fp_encode_double@@Base+0x108c>
   21b44:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b48:	ldrb	r3, [r3]
   21b4c:	cmp	r3, #57	; 0x39
   21b50:	bls	21b0c <grisu3_diy_fp_encode_double@@Base+0x1044>
   21b54:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21b58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21b5c:	cmp	r2, r3
   21b60:	beq	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21b64:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b68:	ldrb	r3, [r3]
   21b6c:	cmp	r3, #46	; 0x2e
   21b70:	bne	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21b74:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b78:	add	r3, r3, #1
   21b7c:	str	r3, [fp, #-80]	; 0xffffffb0
   21b80:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b84:	str	r3, [fp, #-76]	; 0xffffffb4
   21b88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b8c:	ldrb	r3, [r3]
   21b90:	cmp	r3, #47	; 0x2f
   21b94:	bls	21ba8 <grisu3_diy_fp_encode_double@@Base+0x10e0>
   21b98:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21b9c:	ldrb	r3, [r3]
   21ba0:	cmp	r3, #57	; 0x39
   21ba4:	bls	21cac <grisu3_diy_fp_encode_double@@Base+0x11e4>
   21ba8:	mov	r3, #0
   21bac:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21bb0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   21bb4:	add	r1, pc, #324	; 0x144
   21bb8:	ldrd	r0, [r1]
   21bbc:	cmp	r3, r1
   21bc0:	cmpeq	r2, r0
   21bc4:	bls	21c1c <grisu3_diy_fp_encode_double@@Base+0x1154>
   21bc8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   21bcc:	cmp	r3, #0
   21bd0:	bne	21ce0 <grisu3_diy_fp_encode_double@@Base+0x1218>
   21bd4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21bd8:	ldrb	r3, [r3]
   21bdc:	cmp	r3, #52	; 0x34
   21be0:	movhi	r3, #1
   21be4:	movls	r3, #0
   21be8:	uxtb	r3, r3
   21bec:	uxtb	r2, r3
   21bf0:	mov	r3, #0
   21bf4:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   21bf8:	adds	ip, r0, r2
   21bfc:	str	ip, [fp, #-124]	; 0xffffff84
   21c00:	adc	r3, r1, r3
   21c04:	str	r3, [fp, #-120]	; 0xffffff88
   21c08:	ldrd	r2, [fp, #-124]	; 0xffffff84
   21c0c:	strd	r2, [fp, #-52]	; 0xffffffcc
   21c10:	mov	r3, #1
   21c14:	str	r3, [fp, #-68]	; 0xffffffbc
   21c18:	b	21ce0 <grisu3_diy_fp_encode_double@@Base+0x1218>
   21c1c:	ldrd	r4, [fp, #-52]	; 0xffffffcc
   21c20:	mov	r2, r4
   21c24:	mov	r3, r5
   21c28:	mov	r0, #0
   21c2c:	mov	r1, #0
   21c30:	lsl	r1, r3, #2
   21c34:	orr	r1, r1, r2, lsr #30
   21c38:	lsl	r0, r2, #2
   21c3c:	mov	r2, r0
   21c40:	mov	r3, r1
   21c44:	adds	r2, r2, r4
   21c48:	adc	r3, r3, r5
   21c4c:	adds	r1, r2, r2
   21c50:	str	r1, [fp, #-132]	; 0xffffff7c
   21c54:	adc	r3, r3, r3
   21c58:	str	r3, [fp, #-128]	; 0xffffff80
   21c5c:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   21c60:	mov	r0, r2
   21c64:	mov	r1, r3
   21c68:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21c6c:	add	r2, r3, #1
   21c70:	str	r2, [fp, #-80]	; 0xffffffb0
   21c74:	ldrb	r3, [r3]
   21c78:	uxtb	r2, r3
   21c7c:	mov	r3, #0
   21c80:	adds	r6, r0, r2
   21c84:	adc	r7, r1, r3
   21c88:	subs	r3, r6, #48	; 0x30
   21c8c:	str	r3, [fp, #-140]	; 0xffffff74
   21c90:	sbc	r3, r7, #0
   21c94:	str	r3, [fp, #-136]	; 0xffffff78
   21c98:	ldrd	r2, [fp, #-140]	; 0xffffff74
   21c9c:	strd	r2, [fp, #-52]	; 0xffffffcc
   21ca0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21ca4:	sub	r3, r3, #1
   21ca8:	str	r3, [fp, #-56]	; 0xffffffc8
   21cac:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21cb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21cb4:	cmp	r2, r3
   21cb8:	beq	21ce4 <grisu3_diy_fp_encode_double@@Base+0x121c>
   21cbc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21cc0:	ldrb	r3, [r3]
   21cc4:	cmp	r3, #47	; 0x2f
   21cc8:	bls	21ce4 <grisu3_diy_fp_encode_double@@Base+0x121c>
   21ccc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21cd0:	ldrb	r3, [r3]
   21cd4:	cmp	r3, #57	; 0x39
   21cd8:	bls	21bb0 <grisu3_diy_fp_encode_double@@Base+0x10e8>
   21cdc:	b	21ce4 <grisu3_diy_fp_encode_double@@Base+0x121c>
   21ce0:	nop	{0}
   21ce4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21ce8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   21cec:	sub	r3, r2, r3
   21cf0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   21cf4:	add	r3, r2, r3
   21cf8:	str	r3, [fp, #-64]	; 0xffffffc0
   21cfc:	b	21d20 <grisu3_diy_fp_encode_double@@Base+0x1258>
   21d00:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   21d04:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   21d08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21d0c:	add	r3, r3, #1
   21d10:	str	r3, [fp, #-56]	; 0xffffffc8
   21d14:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21d18:	add	r3, r3, #1
   21d1c:	str	r3, [fp, #-80]	; 0xffffffb0
   21d20:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21d24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21d28:	cmp	r2, r3
   21d2c:	beq	21d40 <grisu3_diy_fp_encode_double@@Base+0x1278>
   21d30:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21d34:	ldrb	r3, [r3]
   21d38:	cmp	r3, #48	; 0x30
   21d3c:	beq	21d08 <grisu3_diy_fp_encode_double@@Base+0x1240>
   21d40:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21d44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21d48:	cmp	r2, r3
   21d4c:	beq	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21d50:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21d54:	ldrb	r3, [r3]
   21d58:	cmp	r3, #48	; 0x30
   21d5c:	bls	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21d60:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21d64:	ldrb	r3, [r3]
   21d68:	cmp	r3, #57	; 0x39
   21d6c:	bhi	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21d70:	mov	r3, #1
   21d74:	str	r3, [fp, #-68]	; 0xffffffbc
   21d78:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21d7c:	add	r3, r3, #1
   21d80:	str	r3, [fp, #-80]	; 0xffffffb0
   21d84:	b	21d94 <grisu3_diy_fp_encode_double@@Base+0x12cc>
   21d88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21d8c:	add	r3, r3, #1
   21d90:	str	r3, [fp, #-80]	; 0xffffffb0
   21d94:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21d98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21d9c:	cmp	r2, r3
   21da0:	beq	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21da4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21da8:	ldrb	r3, [r3]
   21dac:	cmp	r3, #47	; 0x2f
   21db0:	bls	21dc4 <grisu3_diy_fp_encode_double@@Base+0x12fc>
   21db4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21db8:	ldrb	r3, [r3]
   21dbc:	cmp	r3, #57	; 0x39
   21dc0:	bls	21d88 <grisu3_diy_fp_encode_double@@Base+0x12c0>
   21dc4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21dc8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   21dcc:	add	r3, r2, r3
   21dd0:	str	r3, [fp, #-56]	; 0xffffffc8
   21dd4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21dd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21ddc:	cmp	r2, r3
   21de0:	beq	21f4c <grisu3_diy_fp_encode_double@@Base+0x1484>
   21de4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21de8:	ldrb	r3, [r3]
   21dec:	orr	r3, r3, #32
   21df0:	uxtb	r3, r3
   21df4:	cmp	r3, #101	; 0x65
   21df8:	bne	21f4c <grisu3_diy_fp_encode_double@@Base+0x1484>
   21dfc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   21e00:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e04:	sub	r3, r2, r3
   21e08:	cmp	r3, #1
   21e0c:	bgt	21e18 <grisu3_diy_fp_encode_double@@Base+0x1350>
   21e10:	mov	r3, #0
   21e14:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21e18:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e1c:	add	r3, r3, #1
   21e20:	str	r3, [fp, #-80]	; 0xffffffb0
   21e24:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e28:	ldrb	r3, [r3]
   21e2c:	cmp	r3, #43	; 0x2b
   21e30:	bne	21e58 <grisu3_diy_fp_encode_double@@Base+0x1390>
   21e34:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e38:	add	r3, r3, #1
   21e3c:	str	r3, [fp, #-80]	; 0xffffffb0
   21e40:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21e44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21e48:	cmp	r2, r3
   21e4c:	bne	21e94 <grisu3_diy_fp_encode_double@@Base+0x13cc>
   21e50:	mov	r3, #0
   21e54:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21e58:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e5c:	ldrb	r3, [r3]
   21e60:	cmp	r3, #45	; 0x2d
   21e64:	bne	21e94 <grisu3_diy_fp_encode_double@@Base+0x13cc>
   21e68:	mov	r3, #1
   21e6c:	str	r3, [fp, #-40]	; 0xffffffd8
   21e70:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e74:	add	r3, r3, #1
   21e78:	str	r3, [fp, #-80]	; 0xffffffb0
   21e7c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21e80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21e84:	cmp	r2, r3
   21e88:	bne	21e94 <grisu3_diy_fp_encode_double@@Base+0x13cc>
   21e8c:	mov	r3, #0
   21e90:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21e94:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21e98:	ldrb	r3, [r3]
   21e9c:	cmp	r3, #47	; 0x2f
   21ea0:	bls	21eb4 <grisu3_diy_fp_encode_double@@Base+0x13ec>
   21ea4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21ea8:	ldrb	r3, [r3]
   21eac:	cmp	r3, #57	; 0x39
   21eb0:	bls	21ebc <grisu3_diy_fp_encode_double@@Base+0x13f4>
   21eb4:	mov	r3, #0
   21eb8:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21ebc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21ec0:	add	r2, r3, #1
   21ec4:	str	r2, [fp, #-80]	; 0xffffffb0
   21ec8:	ldrb	r3, [r3]
   21ecc:	sub	r3, r3, #48	; 0x30
   21ed0:	str	r3, [fp, #-60]	; 0xffffffc4
   21ed4:	b	21f1c <grisu3_diy_fp_encode_double@@Base+0x1454>
   21ed8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21edc:	cmp	r3, #32768	; 0x8000
   21ee0:	bge	21f10 <grisu3_diy_fp_encode_double@@Base+0x1448>
   21ee4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   21ee8:	mov	r3, r2
   21eec:	lsl	r3, r3, #2
   21ef0:	add	r3, r3, r2
   21ef4:	lsl	r3, r3, #1
   21ef8:	mov	r2, r3
   21efc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21f00:	ldrb	r3, [r3]
   21f04:	add	r3, r2, r3
   21f08:	sub	r3, r3, #48	; 0x30
   21f0c:	str	r3, [fp, #-60]	; 0xffffffc4
   21f10:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21f14:	add	r3, r3, #1
   21f18:	str	r3, [fp, #-80]	; 0xffffffb0
   21f1c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21f20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21f24:	cmp	r2, r3
   21f28:	beq	21f4c <grisu3_diy_fp_encode_double@@Base+0x1484>
   21f2c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21f30:	ldrb	r3, [r3]
   21f34:	cmp	r3, #47	; 0x2f
   21f38:	bls	21f4c <grisu3_diy_fp_encode_double@@Base+0x1484>
   21f3c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   21f40:	ldrb	r3, [r3]
   21f44:	cmp	r3, #57	; 0x39
   21f48:	bls	21ed8 <grisu3_diy_fp_encode_double@@Base+0x1410>
   21f4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21f50:	cmp	r3, #0
   21f54:	beq	21f64 <grisu3_diy_fp_encode_double@@Base+0x149c>
   21f58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21f5c:	rsb	r3, r3, #0
   21f60:	b	21f68 <grisu3_diy_fp_encode_double@@Base+0x14a0>
   21f64:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21f68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21f6c:	add	r3, r2, r3
   21f70:	str	r3, [fp, #-56]	; 0xffffffc8
   21f74:	ldr	r2, [fp, #-80]	; 0xffffffb0
   21f78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21f7c:	cmp	r2, r3
   21f80:	bne	21f8c <grisu3_diy_fp_encode_double@@Base+0x14c4>
   21f84:	mov	r3, #0
   21f88:	b	21fc8 <grisu3_diy_fp_encode_double@@Base+0x1500>
   21f8c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   21f90:	str	r3, [sp, #20]
   21f94:	ldr	r3, [fp, #-68]	; 0xffffffbc
   21f98:	str	r3, [sp, #16]
   21f9c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   21fa0:	str	r3, [sp, #12]
   21fa4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21fa8:	str	r3, [sp, #8]
   21fac:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   21fb0:	strd	r2, [sp]
   21fb4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   21fb8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   21fbc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21fc0:	bl	21080 <grisu3_diy_fp_encode_double@@Base+0x5b8>
   21fc4:	mov	r3, r0
   21fc8:	mov	r0, r3
   21fcc:	sub	sp, fp, #28
   21fd0:	ldrd	r4, [sp]
   21fd4:	ldrd	r6, [sp, #8]
   21fd8:	ldrd	r8, [sp, #16]
   21fdc:	ldr	fp, [sp, #24]
   21fe0:	add	sp, sp, #28
   21fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   21fe8:	str	fp, [sp, #-8]!
   21fec:	str	lr, [sp, #4]
   21ff0:	add	fp, sp, #4
   21ff4:	sub	sp, sp, #16
   21ff8:	str	r0, [fp, #-8]
   21ffc:	str	r1, [fp, #-12]
   22000:	str	r2, [fp, #-16]
   22004:	ldr	r2, [fp, #-16]
   22008:	ldr	r1, [fp, #-12]
   2200c:	ldr	r0, [fp, #-8]
   22010:	bl	21744 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   22014:	mov	r3, r0
   22018:	mov	r0, r3
   2201c:	sub	sp, fp, #4
   22020:	ldr	fp, [sp]
   22024:	add	sp, sp, #4
   22028:	pop	{pc}		; (ldr pc, [sp], #4)
   2202c:	str	fp, [sp, #-8]!
   22030:	str	lr, [sp, #4]
   22034:	add	fp, sp, #4
   22038:	sub	sp, sp, #40	; 0x28
   2203c:	str	r0, [fp, #-32]	; 0xffffffe0
   22040:	str	r1, [fp, #-36]	; 0xffffffdc
   22044:	str	r2, [fp, #-40]	; 0xffffffd8
   22048:	mov	r3, #0
   2204c:	movt	r3, #32640	; 0x7f80
   22050:	str	r3, [fp, #-24]	; 0xffffffe8
   22054:	sub	r3, fp, #20
   22058:	mov	r2, r3
   2205c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   22060:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22064:	bl	21fe8 <grisu3_diy_fp_encode_double@@Base+0x1520>
   22068:	str	r0, [fp, #-8]
   2206c:	vldr	d7, [fp, #-20]	; 0xffffffec
   22070:	vcvt.f32.f64	s15, d7
   22074:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22078:	vstr	s15, [r3]
   2207c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22080:	vldr	s15, [r3]
   22084:	vabs.f32	s15, s15
   22088:	vldr	s14, [pc, #124]	; 2210c <grisu3_diy_fp_encode_double@@Base+0x1644>
   2208c:	vcmp.f32	s15, s14
   22090:	vmrs	APSR_nzcv, fpscr
   22094:	movle	r3, #1
   22098:	movgt	r3, #0
   2209c:	uxtb	r3, r3
   220a0:	eor	r3, r3, #1
   220a4:	uxtb	r3, r3
   220a8:	cmp	r3, #0
   220ac:	beq	220b8 <grisu3_diy_fp_encode_double@@Base+0x15f0>
   220b0:	mov	r3, #1
   220b4:	b	220bc <grisu3_diy_fp_encode_double@@Base+0x15f4>
   220b8:	mov	r3, #0
   220bc:	cmp	r3, #0
   220c0:	beq	220f4 <grisu3_diy_fp_encode_double@@Base+0x162c>
   220c4:	vldr	d7, [fp, #-20]	; 0xffffffec
   220c8:	vcmpe.f64	d7, #0.0
   220cc:	vmrs	APSR_nzcv, fpscr
   220d0:	bpl	220e0 <grisu3_diy_fp_encode_double@@Base+0x1618>
   220d4:	vldr	s15, [fp, #-24]	; 0xffffffe8
   220d8:	vneg.f32	s15, s15
   220dc:	b	220e4 <grisu3_diy_fp_encode_double@@Base+0x161c>
   220e0:	vldr	s15, [fp, #-24]	; 0xffffffe8
   220e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   220e8:	vstr	s15, [r3]
   220ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   220f0:	b	220f8 <grisu3_diy_fp_encode_double@@Base+0x1630>
   220f4:	ldr	r3, [fp, #-8]
   220f8:	mov	r0, r3
   220fc:	sub	sp, fp, #4
   22100:	ldr	fp, [sp]
   22104:	add	sp, sp, #4
   22108:	pop	{pc}		; (ldr pc, [sp], #4)
   2210c:	svcvc	0x007fffff
   22110:	push	{fp}		; (str fp, [sp, #-4]!)
   22114:	add	fp, sp, #0
   22118:	sub	sp, sp, #12
   2211c:	str	r0, [fp, #-8]
   22120:	ldr	r3, [fp, #-8]
   22124:	cmp	r3, #5
   22128:	addls	pc, pc, r3, lsl #2
   2212c:	b	22190 <grisu3_diy_fp_encode_double@@Base+0x16c8>
   22130:	b	22148 <grisu3_diy_fp_encode_double@@Base+0x1680>
   22134:	b	2216c <grisu3_diy_fp_encode_double@@Base+0x16a4>
   22138:	b	22154 <grisu3_diy_fp_encode_double@@Base+0x168c>
   2213c:	b	22160 <grisu3_diy_fp_encode_double@@Base+0x1698>
   22140:	b	22178 <grisu3_diy_fp_encode_double@@Base+0x16b0>
   22144:	b	22184 <grisu3_diy_fp_encode_double@@Base+0x16bc>
   22148:	ldr	r3, [pc, #88]	; 221a8 <grisu3_diy_fp_encode_double@@Base+0x16e0>
   2214c:	add	r3, pc, r3
   22150:	b	22198 <grisu3_diy_fp_encode_double@@Base+0x16d0>
   22154:	ldr	r3, [pc, #80]	; 221ac <grisu3_diy_fp_encode_double@@Base+0x16e4>
   22158:	add	r3, pc, r3
   2215c:	b	22198 <grisu3_diy_fp_encode_double@@Base+0x16d0>
   22160:	ldr	r3, [pc, #72]	; 221b0 <grisu3_diy_fp_encode_double@@Base+0x16e8>
   22164:	add	r3, pc, r3
   22168:	b	22198 <grisu3_diy_fp_encode_double@@Base+0x16d0>
   2216c:	ldr	r3, [pc, #64]	; 221b4 <grisu3_diy_fp_encode_double@@Base+0x16ec>
   22170:	add	r3, pc, r3
   22174:	b	22198 <grisu3_diy_fp_encode_double@@Base+0x16d0>
   22178:	ldr	r3, [pc, #56]	; 221b8 <grisu3_diy_fp_encode_double@@Base+0x16f0>
   2217c:	add	r3, pc, r3
   22180:	b	22198 <grisu3_diy_fp_encode_double@@Base+0x16d0>
   22184:	ldr	r3, [pc, #48]	; 221bc <grisu3_diy_fp_encode_double@@Base+0x16f4>
   22188:	add	r3, pc, r3
   2218c:	b	22198 <grisu3_diy_fp_encode_double@@Base+0x16d0>
   22190:	ldr	r3, [pc, #40]	; 221c0 <grisu3_diy_fp_encode_double@@Base+0x16f8>
   22194:	add	r3, pc, r3
   22198:	mov	r0, r3
   2219c:	add	sp, fp, #0
   221a0:	pop	{fp}		; (ldr fp, [sp], #4)
   221a4:	bx	lr
   221a8:	andeq	r5, r0, ip, lsl #29
   221ac:	andeq	r5, r0, r4, lsl #29
   221b0:	andeq	r5, r0, ip, lsl #29
   221b4:	muleq	r0, r0, lr
   221b8:	muleq	r0, r8, lr
   221bc:	andeq	r5, r0, r0, lsr #29
   221c0:	andeq	r5, r0, ip, lsr #29
   221c4:	push	{fp}		; (str fp, [sp, #-4]!)
   221c8:	add	fp, sp, #0
   221cc:	sub	sp, sp, #28
   221d0:	str	r0, [fp, #-24]	; 0xffffffe8
   221d4:	str	r1, [fp, #-28]	; 0xffffffe4
   221d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   221dc:	movw	r3, #43691	; 0xaaab
   221e0:	movt	r3, #43690	; 0xaaaa
   221e4:	umull	r1, r3, r3, r2
   221e8:	lsr	r1, r3, #1
   221ec:	mov	r3, r1
   221f0:	lsl	r3, r3, #1
   221f4:	add	r3, r3, r1
   221f8:	sub	r3, r2, r3
   221fc:	str	r3, [fp, #-12]
   22200:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22204:	lsl	r2, r3, #2
   22208:	movw	r3, #43691	; 0xaaab
   2220c:	movt	r3, #43690	; 0xaaaa
   22210:	umull	r2, r3, r3, r2
   22214:	lsr	r3, r3, #1
   22218:	add	r3, r3, #3
   2221c:	bic	r3, r3, #3
   22220:	str	r3, [fp, #-8]
   22224:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22228:	and	r3, r3, #128	; 0x80
   2222c:	str	r3, [fp, #-16]
   22230:	ldr	r3, [fp, #-16]
   22234:	cmp	r3, #0
   22238:	bne	22274 <grisu3_diy_fp_encode_double@@Base+0x17ac>
   2223c:	ldr	r3, [fp, #-12]
   22240:	cmp	r3, #1
   22244:	beq	22264 <grisu3_diy_fp_encode_double@@Base+0x179c>
   22248:	ldr	r3, [fp, #-12]
   2224c:	cmp	r3, #2
   22250:	bne	2227c <grisu3_diy_fp_encode_double@@Base+0x17b4>
   22254:	ldr	r3, [fp, #-8]
   22258:	sub	r3, r3, #1
   2225c:	str	r3, [fp, #-8]
   22260:	b	22280 <grisu3_diy_fp_encode_double@@Base+0x17b8>
   22264:	ldr	r3, [fp, #-8]
   22268:	sub	r3, r3, #2
   2226c:	str	r3, [fp, #-8]
   22270:	b	22280 <grisu3_diy_fp_encode_double@@Base+0x17b8>
   22274:	nop	{0}
   22278:	b	22280 <grisu3_diy_fp_encode_double@@Base+0x17b8>
   2227c:	nop	{0}
   22280:	ldr	r3, [fp, #-8]
   22284:	mov	r0, r3
   22288:	add	sp, fp, #0
   2228c:	pop	{fp}		; (ldr fp, [sp], #4)
   22290:	bx	lr
   22294:	push	{fp}		; (str fp, [sp, #-4]!)
   22298:	add	fp, sp, #0
   2229c:	sub	sp, sp, #20
   222a0:	str	r0, [fp, #-16]
   222a4:	ldr	r3, [fp, #-16]
   222a8:	and	r3, r3, #3
   222ac:	str	r3, [fp, #-8]
   222b0:	ldr	r3, [fp, #-16]
   222b4:	lsr	r2, r3, #2
   222b8:	mov	r3, r2
   222bc:	lsl	r3, r3, #1
   222c0:	add	r3, r3, r2
   222c4:	str	r3, [fp, #-12]
   222c8:	ldr	r3, [fp, #-8]
   222cc:	cmp	r3, #2
   222d0:	beq	222ec <grisu3_diy_fp_encode_double@@Base+0x1824>
   222d4:	ldr	r3, [fp, #-8]
   222d8:	cmp	r3, #3
   222dc:	bne	222f8 <grisu3_diy_fp_encode_double@@Base+0x1830>
   222e0:	ldr	r3, [fp, #-12]
   222e4:	add	r3, r3, #2
   222e8:	b	222fc <grisu3_diy_fp_encode_double@@Base+0x1834>
   222ec:	ldr	r3, [fp, #-12]
   222f0:	add	r3, r3, #1
   222f4:	b	222fc <grisu3_diy_fp_encode_double@@Base+0x1834>
   222f8:	ldr	r3, [fp, #-12]
   222fc:	mov	r0, r3
   22300:	add	sp, fp, #0
   22304:	pop	{fp}		; (ldr fp, [sp], #4)
   22308:	bx	lr
   2230c:	push	{fp}		; (str fp, [sp, #-4]!)
   22310:	add	fp, sp, #0
   22314:	sub	sp, sp, #52	; 0x34
   22318:	str	r0, [fp, #-40]	; 0xffffffd8
   2231c:	str	r1, [fp, #-44]	; 0xffffffd4
   22320:	str	r2, [fp, #-48]	; 0xffffffd0
   22324:	str	r3, [fp, #-52]	; 0xffffffcc
   22328:	ldr	r3, [pc, #928]	; 226d0 <grisu3_diy_fp_encode_double@@Base+0x1c08>
   2232c:	add	r3, pc, r3
   22330:	str	r3, [fp, #-20]	; 0xffffffec
   22334:	ldr	r3, [pc, #920]	; 226d4 <grisu3_diy_fp_encode_double@@Base+0x1c0c>
   22338:	add	r3, pc, r3
   2233c:	str	r3, [fp, #-24]	; 0xffffffe8
   22340:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22344:	str	r3, [fp, #-28]	; 0xffffffe4
   22348:	ldr	r3, [fp, #4]
   2234c:	and	r3, r3, #128	; 0x80
   22350:	str	r3, [fp, #-32]	; 0xffffffe0
   22354:	mov	r3, #0
   22358:	str	r3, [fp, #-12]
   2235c:	mov	r3, #3
   22360:	str	r3, [fp, #-16]
   22364:	ldr	r3, [fp, #-52]	; 0xffffffcc
   22368:	cmp	r3, #0
   2236c:	bne	2237c <grisu3_diy_fp_encode_double@@Base+0x18b4>
   22370:	mov	r3, #2
   22374:	str	r3, [fp, #-16]
   22378:	b	22674 <grisu3_diy_fp_encode_double@@Base+0x1bac>
   2237c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   22380:	ldr	r3, [r3]
   22384:	str	r3, [fp, #-12]
   22388:	ldr	r3, [fp, #4]
   2238c:	bic	r3, r3, #224	; 0xe0
   22390:	str	r3, [fp, #4]
   22394:	ldr	r3, [fp, #4]
   22398:	cmp	r3, #0
   2239c:	beq	223b0 <grisu3_diy_fp_encode_double@@Base+0x18e8>
   223a0:	ldr	r3, [fp, #4]
   223a4:	cmp	r3, #1
   223a8:	beq	223bc <grisu3_diy_fp_encode_double@@Base+0x18f4>
   223ac:	b	22674 <grisu3_diy_fp_encode_double@@Base+0x1bac>
   223b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   223b4:	str	r3, [fp, #-8]
   223b8:	b	223c8 <grisu3_diy_fp_encode_double@@Base+0x1900>
   223bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   223c0:	str	r3, [fp, #-8]
   223c4:	nop	{0}
   223c8:	mov	r3, #0
   223cc:	str	r3, [fp, #-16]
   223d0:	b	224d4 <grisu3_diy_fp_encode_double@@Base+0x1a0c>
   223d4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   223d8:	ldrb	r3, [r3]
   223dc:	lsr	r3, r3, #2
   223e0:	uxtb	r3, r3
   223e4:	mov	r2, r3
   223e8:	ldr	r3, [fp, #-8]
   223ec:	add	r3, r3, r2
   223f0:	ldrb	r2, [r3]
   223f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   223f8:	strb	r2, [r3]
   223fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   22400:	ldrb	r3, [r3]
   22404:	lsl	r3, r3, #4
   22408:	and	r3, r3, #48	; 0x30
   2240c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   22410:	add	r2, r2, #1
   22414:	ldrb	r2, [r2]
   22418:	lsr	r2, r2, #4
   2241c:	uxtb	r2, r2
   22420:	orr	r3, r3, r2
   22424:	mov	r2, r3
   22428:	ldr	r3, [fp, #-8]
   2242c:	add	r2, r3, r2
   22430:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22434:	add	r3, r3, #1
   22438:	ldrb	r2, [r2]
   2243c:	strb	r2, [r3]
   22440:	ldr	r3, [fp, #-44]	; 0xffffffd4
   22444:	add	r3, r3, #1
   22448:	ldrb	r3, [r3]
   2244c:	lsl	r3, r3, #2
   22450:	and	r3, r3, #60	; 0x3c
   22454:	ldr	r2, [fp, #-44]	; 0xffffffd4
   22458:	add	r2, r2, #2
   2245c:	ldrb	r2, [r2]
   22460:	lsr	r2, r2, #6
   22464:	uxtb	r2, r2
   22468:	orr	r3, r3, r2
   2246c:	mov	r2, r3
   22470:	ldr	r3, [fp, #-8]
   22474:	add	r2, r3, r2
   22478:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2247c:	add	r3, r3, #2
   22480:	ldrb	r2, [r2]
   22484:	strb	r2, [r3]
   22488:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2248c:	add	r3, r3, #2
   22490:	ldrb	r3, [r3]
   22494:	and	r3, r3, #63	; 0x3f
   22498:	ldr	r2, [fp, #-8]
   2249c:	add	r2, r2, r3
   224a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   224a4:	add	r3, r3, #3
   224a8:	ldrb	r2, [r2]
   224ac:	strb	r2, [r3]
   224b0:	ldr	r3, [fp, #-12]
   224b4:	sub	r3, r3, #3
   224b8:	str	r3, [fp, #-12]
   224bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   224c0:	add	r3, r3, #4
   224c4:	str	r3, [fp, #-40]	; 0xffffffd8
   224c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   224cc:	add	r3, r3, #3
   224d0:	str	r3, [fp, #-44]	; 0xffffffd4
   224d4:	ldr	r3, [fp, #-12]
   224d8:	cmp	r3, #2
   224dc:	bhi	223d4 <grisu3_diy_fp_encode_double@@Base+0x190c>
   224e0:	ldr	r3, [fp, #-12]
   224e4:	cmp	r3, #1
   224e8:	beq	225c0 <grisu3_diy_fp_encode_double@@Base+0x1af8>
   224ec:	ldr	r3, [fp, #-12]
   224f0:	cmp	r3, #2
   224f4:	bne	22654 <grisu3_diy_fp_encode_double@@Base+0x1b8c>
   224f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   224fc:	ldrb	r3, [r3]
   22500:	lsr	r3, r3, #2
   22504:	uxtb	r3, r3
   22508:	mov	r2, r3
   2250c:	ldr	r3, [fp, #-8]
   22510:	add	r3, r3, r2
   22514:	ldrb	r2, [r3]
   22518:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2251c:	strb	r2, [r3]
   22520:	ldr	r3, [fp, #-44]	; 0xffffffd4
   22524:	ldrb	r3, [r3]
   22528:	lsl	r3, r3, #4
   2252c:	and	r3, r3, #48	; 0x30
   22530:	ldr	r2, [fp, #-44]	; 0xffffffd4
   22534:	add	r2, r2, #1
   22538:	ldrb	r2, [r2]
   2253c:	lsr	r2, r2, #4
   22540:	uxtb	r2, r2
   22544:	orr	r3, r3, r2
   22548:	mov	r2, r3
   2254c:	ldr	r3, [fp, #-8]
   22550:	add	r2, r3, r2
   22554:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22558:	add	r3, r3, #1
   2255c:	ldrb	r2, [r2]
   22560:	strb	r2, [r3]
   22564:	ldr	r3, [fp, #-44]	; 0xffffffd4
   22568:	add	r3, r3, #1
   2256c:	ldrb	r3, [r3]
   22570:	lsl	r3, r3, #2
   22574:	and	r3, r3, #60	; 0x3c
   22578:	ldr	r2, [fp, #-8]
   2257c:	add	r2, r2, r3
   22580:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22584:	add	r3, r3, #2
   22588:	ldrb	r2, [r2]
   2258c:	strb	r2, [r3]
   22590:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22594:	add	r3, r3, #3
   22598:	str	r3, [fp, #-40]	; 0xffffffd8
   2259c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   225a0:	cmp	r3, #0
   225a4:	beq	22660 <grisu3_diy_fp_encode_double@@Base+0x1b98>
   225a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   225ac:	add	r2, r3, #1
   225b0:	str	r2, [fp, #-40]	; 0xffffffd8
   225b4:	mov	r2, #61	; 0x3d
   225b8:	strb	r2, [r3]
   225bc:	b	22660 <grisu3_diy_fp_encode_double@@Base+0x1b98>
   225c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   225c4:	ldrb	r3, [r3]
   225c8:	lsr	r3, r3, #2
   225cc:	uxtb	r3, r3
   225d0:	mov	r2, r3
   225d4:	ldr	r3, [fp, #-8]
   225d8:	add	r3, r3, r2
   225dc:	ldrb	r2, [r3]
   225e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   225e4:	strb	r2, [r3]
   225e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   225ec:	ldrb	r3, [r3]
   225f0:	lsl	r3, r3, #4
   225f4:	and	r3, r3, #48	; 0x30
   225f8:	ldr	r2, [fp, #-8]
   225fc:	add	r2, r2, r3
   22600:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22604:	add	r3, r3, #1
   22608:	ldrb	r2, [r2]
   2260c:	strb	r2, [r3]
   22610:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22614:	add	r3, r3, #2
   22618:	str	r3, [fp, #-40]	; 0xffffffd8
   2261c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   22620:	cmp	r3, #0
   22624:	beq	22668 <grisu3_diy_fp_encode_double@@Base+0x1ba0>
   22628:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2262c:	add	r2, r3, #1
   22630:	str	r2, [fp, #-40]	; 0xffffffd8
   22634:	mov	r2, #61	; 0x3d
   22638:	strb	r2, [r3]
   2263c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22640:	add	r2, r3, #1
   22644:	str	r2, [fp, #-40]	; 0xffffffd8
   22648:	mov	r2, #61	; 0x3d
   2264c:	strb	r2, [r3]
   22650:	b	22668 <grisu3_diy_fp_encode_double@@Base+0x1ba0>
   22654:	mov	r3, #0
   22658:	str	r3, [fp, #-32]	; 0xffffffe0
   2265c:	b	2266c <grisu3_diy_fp_encode_double@@Base+0x1ba4>
   22660:	nop	{0}
   22664:	b	2266c <grisu3_diy_fp_encode_double@@Base+0x1ba4>
   22668:	nop	{0}
   2266c:	mov	r3, #0
   22670:	str	r3, [fp, #-12]
   22674:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22678:	cmp	r3, #0
   2267c:	beq	22698 <grisu3_diy_fp_encode_double@@Base+0x1bd0>
   22680:	ldr	r2, [fp, #-40]	; 0xffffffd8
   22684:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22688:	sub	r3, r2, r3
   2268c:	mov	r2, r3
   22690:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22694:	str	r2, [r3]
   22698:	ldr	r3, [fp, #-52]	; 0xffffffcc
   2269c:	cmp	r3, #0
   226a0:	beq	226bc <grisu3_diy_fp_encode_double@@Base+0x1bf4>
   226a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   226a8:	ldr	r2, [r3]
   226ac:	ldr	r3, [fp, #-12]
   226b0:	sub	r2, r2, r3
   226b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   226b8:	str	r2, [r3]
   226bc:	ldr	r3, [fp, #-16]
   226c0:	mov	r0, r3
   226c4:	add	sp, fp, #0
   226c8:	pop	{fp}		; (ldr fp, [sp], #4)
   226cc:	bx	lr
   226d0:	andeq	r5, r0, r4, lsr #26
   226d4:	andeq	r5, r0, ip, asr sp
   226d8:	push	{fp}		; (str fp, [sp, #-4]!)
   226dc:	add	fp, sp, #0
   226e0:	sub	sp, sp, #60	; 0x3c
   226e4:	str	r0, [fp, #-48]	; 0xffffffd0
   226e8:	str	r1, [fp, #-52]	; 0xffffffcc
   226ec:	str	r2, [fp, #-56]	; 0xffffffc8
   226f0:	str	r3, [fp, #-60]	; 0xffffffc4
   226f4:	mov	r3, #0
   226f8:	str	r3, [fp, #-8]
   226fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22700:	str	r3, [fp, #-36]	; 0xffffffdc
   22704:	mvn	r3, #0
   22708:	str	r3, [fp, #-20]	; 0xffffffec
   2270c:	mvn	r3, #0
   22710:	str	r3, [fp, #-24]	; 0xffffffe8
   22714:	ldr	r3, [pc, #1388]	; 22c88 <grisu3_diy_fp_encode_double@@Base+0x21c0>
   22718:	add	r3, pc, r3
   2271c:	str	r3, [fp, #-32]	; 0xffffffe0
   22720:	ldr	r3, [fp, #4]
   22724:	and	r3, r3, #32
   22728:	str	r3, [fp, #-40]	; 0xffffffd8
   2272c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   22730:	cmp	r3, #0
   22734:	beq	22744 <grisu3_diy_fp_encode_double@@Base+0x1c7c>
   22738:	ldr	r3, [fp, #-60]	; 0xffffffc4
   2273c:	ldr	r3, [r3]
   22740:	str	r3, [fp, #-24]	; 0xffffffe8
   22744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22748:	str	r3, [fp, #-28]	; 0xffffffe4
   2274c:	ldr	r3, [fp, #4]
   22750:	bic	r3, r3, #224	; 0xe0
   22754:	str	r3, [fp, #4]
   22758:	ldr	r3, [fp, #4]
   2275c:	cmp	r3, #0
   22760:	beq	22774 <grisu3_diy_fp_encode_double@@Base+0x1cac>
   22764:	ldr	r3, [fp, #4]
   22768:	cmp	r3, #1
   2276c:	beq	2279c <grisu3_diy_fp_encode_double@@Base+0x1cd4>
   22770:	b	227c4 <grisu3_diy_fp_encode_double@@Base+0x1cfc>
   22774:	ldr	r3, [fp, #-40]	; 0xffffffd8
   22778:	cmp	r3, #0
   2277c:	beq	2278c <grisu3_diy_fp_encode_double@@Base+0x1cc4>
   22780:	ldr	r3, [pc, #1284]	; 22c8c <grisu3_diy_fp_encode_double@@Base+0x21c4>
   22784:	add	r3, pc, r3
   22788:	b	22794 <grisu3_diy_fp_encode_double@@Base+0x1ccc>
   2278c:	ldr	r3, [pc, #1276]	; 22c90 <grisu3_diy_fp_encode_double@@Base+0x21c8>
   22790:	add	r3, pc, r3
   22794:	str	r3, [fp, #-32]	; 0xffffffe0
   22798:	b	227d0 <grisu3_diy_fp_encode_double@@Base+0x1d08>
   2279c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   227a0:	cmp	r3, #0
   227a4:	beq	227b4 <grisu3_diy_fp_encode_double@@Base+0x1cec>
   227a8:	ldr	r3, [pc, #1252]	; 22c94 <grisu3_diy_fp_encode_double@@Base+0x21cc>
   227ac:	add	r3, pc, r3
   227b0:	b	227bc <grisu3_diy_fp_encode_double@@Base+0x1cf4>
   227b4:	ldr	r3, [pc, #1244]	; 22c98 <grisu3_diy_fp_encode_double@@Base+0x21d0>
   227b8:	add	r3, pc, r3
   227bc:	str	r3, [fp, #-32]	; 0xffffffe0
   227c0:	b	227d0 <grisu3_diy_fp_encode_double@@Base+0x1d08>
   227c4:	mov	r3, #3
   227c8:	str	r3, [fp, #-8]
   227cc:	b	22abc <grisu3_diy_fp_encode_double@@Base+0x1ff4>
   227d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   227d4:	cmp	r3, #0
   227d8:	beq	22aac <grisu3_diy_fp_encode_double@@Base+0x1fe4>
   227dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   227e0:	ldr	r3, [r3]
   227e4:	cmp	r3, #0
   227e8:	beq	22aac <grisu3_diy_fp_encode_double@@Base+0x1fe4>
   227ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   227f0:	ldr	r3, [r3]
   227f4:	str	r3, [fp, #-20]	; 0xffffffec
   227f8:	b	22aac <grisu3_diy_fp_encode_double@@Base+0x1fe4>
   227fc:	mov	r3, #0
   22800:	str	r3, [fp, #-12]
   22804:	b	229cc <grisu3_diy_fp_encode_double@@Base+0x1f04>
   22808:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2280c:	ldr	r3, [fp, #-12]
   22810:	cmp	r2, r3
   22814:	bne	22834 <grisu3_diy_fp_encode_double@@Base+0x1d6c>
   22818:	ldr	r3, [fp, #-12]
   2281c:	str	r3, [fp, #-16]
   22820:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22824:	ldr	r3, [fp, #-12]
   22828:	sub	r3, r2, r3
   2282c:	str	r3, [fp, #-24]	; 0xffffffe8
   22830:	b	22b0c <grisu3_diy_fp_encode_double@@Base+0x2044>
   22834:	ldr	r2, [fp, #-52]	; 0xffffffcc
   22838:	ldr	r3, [fp, #-12]
   2283c:	add	r3, r2, r3
   22840:	ldrb	r3, [r3]
   22844:	mov	r2, r3
   22848:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2284c:	add	r3, r3, r2
   22850:	ldrb	r1, [r3]
   22854:	sub	r2, fp, #44	; 0x2c
   22858:	ldr	r3, [fp, #-12]
   2285c:	add	r3, r2, r3
   22860:	mov	r2, r1
   22864:	strb	r2, [r3]
   22868:	sub	r2, fp, #44	; 0x2c
   2286c:	ldr	r3, [fp, #-12]
   22870:	add	r3, r2, r3
   22874:	ldrb	r2, [r3]
   22878:	ldr	r3, [pc, #1052]	; 22c9c <grisu3_diy_fp_encode_double@@Base+0x21d4>
   2287c:	add	r3, pc, r3
   22880:	ldrb	r3, [r3]
   22884:	cmp	r2, r3
   22888:	bcc	229c0 <grisu3_diy_fp_encode_double@@Base+0x1ef8>
   2288c:	sub	r2, fp, #44	; 0x2c
   22890:	ldr	r3, [fp, #-12]
   22894:	add	r3, r2, r3
   22898:	ldrb	r2, [r3]
   2289c:	ldr	r3, [pc, #1020]	; 22ca0 <grisu3_diy_fp_encode_double@@Base+0x21d8>
   228a0:	add	r3, pc, r3
   228a4:	ldrb	r3, [r3]
   228a8:	cmp	r2, r3
   228ac:	bne	228d8 <grisu3_diy_fp_encode_double@@Base+0x1e10>
   228b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   228b4:	add	r3, r3, #1
   228b8:	str	r3, [fp, #-52]	; 0xffffffcc
   228bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   228c0:	sub	r3, r3, #1
   228c4:	str	r3, [fp, #-24]	; 0xffffffe8
   228c8:	ldr	r3, [fp, #-12]
   228cc:	sub	r3, r3, #1
   228d0:	str	r3, [fp, #-12]
   228d4:	b	229c0 <grisu3_diy_fp_encode_double@@Base+0x1ef8>
   228d8:	ldr	r3, [fp, #-12]
   228dc:	str	r3, [fp, #-16]
   228e0:	sub	r2, fp, #44	; 0x2c
   228e4:	ldr	r3, [fp, #-12]
   228e8:	add	r3, r2, r3
   228ec:	ldrb	r2, [r3]
   228f0:	ldr	r3, [pc, #940]	; 22ca4 <grisu3_diy_fp_encode_double@@Base+0x21dc>
   228f4:	add	r3, pc, r3
   228f8:	ldrb	r3, [r3]
   228fc:	cmp	r2, r3
   22900:	bne	229ac <grisu3_diy_fp_encode_double@@Base+0x1ee4>
   22904:	ldr	r3, [fp, #-12]
   22908:	add	r3, r3, #1
   2290c:	str	r3, [fp, #-12]
   22910:	b	22988 <grisu3_diy_fp_encode_double@@Base+0x1ec0>
   22914:	ldr	r2, [fp, #-52]	; 0xffffffcc
   22918:	ldr	r3, [fp, #-12]
   2291c:	add	r3, r2, r3
   22920:	ldrb	r3, [r3]
   22924:	mov	r2, r3
   22928:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2292c:	add	r3, r3, r2
   22930:	ldrb	r2, [r3]
   22934:	ldr	r3, [pc, #876]	; 22ca8 <grisu3_diy_fp_encode_double@@Base+0x21e0>
   22938:	add	r3, pc, r3
   2293c:	ldrb	r3, [r3]
   22940:	cmp	r2, r3
   22944:	beq	2297c <grisu3_diy_fp_encode_double@@Base+0x1eb4>
   22948:	ldr	r2, [fp, #-52]	; 0xffffffcc
   2294c:	ldr	r3, [fp, #-12]
   22950:	add	r3, r2, r3
   22954:	ldrb	r3, [r3]
   22958:	mov	r2, r3
   2295c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   22960:	add	r3, r3, r2
   22964:	ldrb	r2, [r3]
   22968:	ldr	r3, [pc, #828]	; 22cac <grisu3_diy_fp_encode_double@@Base+0x21e4>
   2296c:	add	r3, pc, r3
   22970:	ldrb	r3, [r3]
   22974:	cmp	r2, r3
   22978:	bne	229a8 <grisu3_diy_fp_encode_double@@Base+0x1ee0>
   2297c:	ldr	r3, [fp, #-12]
   22980:	add	r3, r3, #1
   22984:	str	r3, [fp, #-12]
   22988:	ldr	r2, [fp, #-12]
   2298c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22990:	cmp	r2, r3
   22994:	bcs	229ac <grisu3_diy_fp_encode_double@@Base+0x1ee4>
   22998:	ldr	r3, [fp, #-12]
   2299c:	cmp	r3, #7
   229a0:	bls	22914 <grisu3_diy_fp_encode_double@@Base+0x1e4c>
   229a4:	b	229ac <grisu3_diy_fp_encode_double@@Base+0x1ee4>
   229a8:	nop	{0}
   229ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   229b0:	ldr	r3, [fp, #-12]
   229b4:	sub	r3, r2, r3
   229b8:	str	r3, [fp, #-24]	; 0xffffffe8
   229bc:	b	22b0c <grisu3_diy_fp_encode_double@@Base+0x2044>
   229c0:	ldr	r3, [fp, #-12]
   229c4:	add	r3, r3, #1
   229c8:	str	r3, [fp, #-12]
   229cc:	ldr	r3, [fp, #-12]
   229d0:	cmp	r3, #3
   229d4:	bls	22808 <grisu3_diy_fp_encode_double@@Base+0x1d40>
   229d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   229dc:	cmp	r3, #2
   229e0:	bls	22c58 <grisu3_diy_fp_encode_double@@Base+0x2190>
   229e4:	ldrb	r3, [fp, #-44]	; 0xffffffd4
   229e8:	lsl	r3, r3, #2
   229ec:	sxtb	r2, r3
   229f0:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   229f4:	lsr	r3, r3, #4
   229f8:	uxtb	r3, r3
   229fc:	sxtb	r3, r3
   22a00:	orr	r3, r2, r3
   22a04:	sxtb	r3, r3
   22a08:	uxtb	r2, r3
   22a0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22a10:	strb	r2, [r3]
   22a14:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   22a18:	lsl	r3, r3, #4
   22a1c:	sxtb	r2, r3
   22a20:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   22a24:	lsr	r3, r3, #2
   22a28:	uxtb	r3, r3
   22a2c:	sxtb	r3, r3
   22a30:	orr	r3, r2, r3
   22a34:	sxtb	r2, r3
   22a38:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22a3c:	add	r3, r3, #1
   22a40:	uxtb	r2, r2
   22a44:	strb	r2, [r3]
   22a48:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   22a4c:	lsl	r3, r3, #6
   22a50:	sxtb	r2, r3
   22a54:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   22a58:	sxtb	r3, r3
   22a5c:	orr	r3, r2, r3
   22a60:	sxtb	r2, r3
   22a64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22a68:	add	r3, r3, #2
   22a6c:	uxtb	r2, r2
   22a70:	strb	r2, [r3]
   22a74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22a78:	add	r3, r3, #3
   22a7c:	str	r3, [fp, #-48]	; 0xffffffd0
   22a80:	ldr	r3, [fp, #-52]	; 0xffffffcc
   22a84:	add	r3, r3, #4
   22a88:	str	r3, [fp, #-52]	; 0xffffffcc
   22a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   22a90:	sub	r3, r3, #3
   22a94:	str	r3, [fp, #-20]	; 0xffffffec
   22a98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22a9c:	sub	r3, r3, #4
   22aa0:	str	r3, [fp, #-24]	; 0xffffffe8
   22aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22aa8:	str	r3, [fp, #-28]	; 0xffffffe4
   22aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   22ab0:	cmp	r3, #0
   22ab4:	bne	227fc <grisu3_diy_fp_encode_double@@Base+0x1d34>
   22ab8:	nop	{0}
   22abc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   22ac0:	cmp	r3, #0
   22ac4:	beq	22ae0 <grisu3_diy_fp_encode_double@@Base+0x2018>
   22ac8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   22acc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22ad0:	sub	r3, r2, r3
   22ad4:	mov	r2, r3
   22ad8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   22adc:	str	r2, [r3]
   22ae0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   22ae4:	cmp	r3, #0
   22ae8:	beq	22b04 <grisu3_diy_fp_encode_double@@Base+0x203c>
   22aec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   22af0:	ldr	r2, [r3]
   22af4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22af8:	sub	r2, r2, r3
   22afc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   22b00:	str	r2, [r3]
   22b04:	ldr	r3, [fp, #-8]
   22b08:	b	22c78 <grisu3_diy_fp_encode_double@@Base+0x21b0>
   22b0c:	ldr	r3, [fp, #-16]
   22b10:	cmp	r3, #2
   22b14:	beq	22b34 <grisu3_diy_fp_encode_double@@Base+0x206c>
   22b18:	ldr	r3, [fp, #-16]
   22b1c:	cmp	r3, #3
   22b20:	beq	22b94 <grisu3_diy_fp_encode_double@@Base+0x20cc>
   22b24:	ldr	r3, [fp, #-16]
   22b28:	cmp	r3, #0
   22b2c:	bne	22c28 <grisu3_diy_fp_encode_double@@Base+0x2160>
   22b30:	b	22c34 <grisu3_diy_fp_encode_double@@Base+0x216c>
   22b34:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   22b38:	lsl	r3, r3, #4
   22b3c:	uxtb	r3, r3
   22b40:	cmp	r3, #0
   22b44:	bne	22c40 <grisu3_diy_fp_encode_double@@Base+0x2178>
   22b48:	ldr	r3, [fp, #-20]	; 0xffffffec
   22b4c:	cmp	r3, #0
   22b50:	beq	22c60 <grisu3_diy_fp_encode_double@@Base+0x2198>
   22b54:	ldrb	r3, [fp, #-44]	; 0xffffffd4
   22b58:	lsl	r3, r3, #2
   22b5c:	sxtb	r2, r3
   22b60:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   22b64:	lsr	r3, r3, #4
   22b68:	uxtb	r3, r3
   22b6c:	sxtb	r3, r3
   22b70:	orr	r3, r2, r3
   22b74:	sxtb	r3, r3
   22b78:	uxtb	r2, r3
   22b7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22b80:	strb	r2, [r3]
   22b84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22b88:	add	r3, r3, #1
   22b8c:	str	r3, [fp, #-48]	; 0xffffffd0
   22b90:	b	22c34 <grisu3_diy_fp_encode_double@@Base+0x216c>
   22b94:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   22b98:	lsl	r3, r3, #6
   22b9c:	uxtb	r3, r3
   22ba0:	cmp	r3, #0
   22ba4:	bne	22c48 <grisu3_diy_fp_encode_double@@Base+0x2180>
   22ba8:	ldr	r3, [fp, #-20]	; 0xffffffec
   22bac:	cmp	r3, #1
   22bb0:	bls	22c68 <grisu3_diy_fp_encode_double@@Base+0x21a0>
   22bb4:	ldrb	r3, [fp, #-44]	; 0xffffffd4
   22bb8:	lsl	r3, r3, #2
   22bbc:	sxtb	r2, r3
   22bc0:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   22bc4:	lsr	r3, r3, #4
   22bc8:	uxtb	r3, r3
   22bcc:	sxtb	r3, r3
   22bd0:	orr	r3, r2, r3
   22bd4:	sxtb	r3, r3
   22bd8:	uxtb	r2, r3
   22bdc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22be0:	strb	r2, [r3]
   22be4:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   22be8:	lsl	r3, r3, #4
   22bec:	sxtb	r2, r3
   22bf0:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   22bf4:	lsr	r3, r3, #2
   22bf8:	uxtb	r3, r3
   22bfc:	sxtb	r3, r3
   22c00:	orr	r3, r2, r3
   22c04:	sxtb	r2, r3
   22c08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22c0c:	add	r3, r3, #1
   22c10:	uxtb	r2, r2
   22c14:	strb	r2, [r3]
   22c18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   22c1c:	add	r3, r3, #2
   22c20:	str	r3, [fp, #-48]	; 0xffffffd0
   22c24:	b	22c34 <grisu3_diy_fp_encode_double@@Base+0x216c>
   22c28:	mov	r3, #4
   22c2c:	str	r3, [fp, #-8]
   22c30:	b	22abc <grisu3_diy_fp_encode_double@@Base+0x1ff4>
   22c34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   22c38:	str	r3, [fp, #-28]	; 0xffffffe4
   22c3c:	b	22abc <grisu3_diy_fp_encode_double@@Base+0x1ff4>
   22c40:	nop	{0}
   22c44:	b	22c4c <grisu3_diy_fp_encode_double@@Base+0x2184>
   22c48:	nop	{0}
   22c4c:	mov	r3, #5
   22c50:	str	r3, [fp, #-8]
   22c54:	b	22abc <grisu3_diy_fp_encode_double@@Base+0x1ff4>
   22c58:	nop	{0}
   22c5c:	b	22c6c <grisu3_diy_fp_encode_double@@Base+0x21a4>
   22c60:	nop	{0}
   22c64:	b	22c6c <grisu3_diy_fp_encode_double@@Base+0x21a4>
   22c68:	nop	{0}
   22c6c:	mov	r3, #1
   22c70:	str	r3, [fp, #-8]
   22c74:	b	22abc <grisu3_diy_fp_encode_double@@Base+0x1ff4>
   22c78:	mov	r0, r3
   22c7c:	add	sp, fp, #0
   22c80:	pop	{fp}		; (ldr fp, [sp], #4)
   22c84:	bx	lr
   22c88:	andeq	r5, r0, r8, asr sp
   22c8c:	andeq	r5, r0, ip, ror #27
   22c90:	andeq	r5, r0, r0, ror #25
   22c94:	andeq	r5, r0, r4, asr #29
   22c98:			; <UNDEFINED> instruction: 0x00005fb8
   22c9c:	strdeq	r5, [r0], -r4
   22ca0:	ldrdeq	r5, [r0], -r1
   22ca4:	andeq	r5, r0, lr, ror pc
   22ca8:	andeq	r5, r0, sl, lsr pc
   22cac:	andeq	r5, r0, r5, lsl #30

00022cb0 <flatcc_json_parser_error_string@@Base>:
   22cb0:	push	{fp}		; (str fp, [sp, #-4]!)
   22cb4:	add	fp, sp, #0
   22cb8:	sub	sp, sp, #12
   22cbc:	str	r0, [fp, #-8]
   22cc0:	ldr	r3, [fp, #-8]
   22cc4:	cmp	r3, #34	; 0x22
   22cc8:	addls	pc, pc, r3, lsl #2
   22ccc:	b	22f00 <flatcc_json_parser_error_string@@Base+0x250>
   22cd0:	b	22d5c <flatcc_json_parser_error_string@@Base+0xac>
   22cd4:	b	22d68 <flatcc_json_parser_error_string@@Base+0xb8>
   22cd8:	b	22d74 <flatcc_json_parser_error_string@@Base+0xc4>
   22cdc:	b	22d80 <flatcc_json_parser_error_string@@Base+0xd0>
   22ce0:	b	22d8c <flatcc_json_parser_error_string@@Base+0xdc>
   22ce4:	b	22d98 <flatcc_json_parser_error_string@@Base+0xe8>
   22ce8:	b	22da4 <flatcc_json_parser_error_string@@Base+0xf4>
   22cec:	b	22db0 <flatcc_json_parser_error_string@@Base+0x100>
   22cf0:	b	22dbc <flatcc_json_parser_error_string@@Base+0x10c>
   22cf4:	b	22dc8 <flatcc_json_parser_error_string@@Base+0x118>
   22cf8:	b	22dd4 <flatcc_json_parser_error_string@@Base+0x124>
   22cfc:	b	22de0 <flatcc_json_parser_error_string@@Base+0x130>
   22d00:	b	22dec <flatcc_json_parser_error_string@@Base+0x13c>
   22d04:	b	22df8 <flatcc_json_parser_error_string@@Base+0x148>
   22d08:	b	22e04 <flatcc_json_parser_error_string@@Base+0x154>
   22d0c:	b	22e10 <flatcc_json_parser_error_string@@Base+0x160>
   22d10:	b	22e1c <flatcc_json_parser_error_string@@Base+0x16c>
   22d14:	b	22e28 <flatcc_json_parser_error_string@@Base+0x178>
   22d18:	b	22e34 <flatcc_json_parser_error_string@@Base+0x184>
   22d1c:	b	22e40 <flatcc_json_parser_error_string@@Base+0x190>
   22d20:	b	22e4c <flatcc_json_parser_error_string@@Base+0x19c>
   22d24:	b	22e58 <flatcc_json_parser_error_string@@Base+0x1a8>
   22d28:	b	22e64 <flatcc_json_parser_error_string@@Base+0x1b4>
   22d2c:	b	22e70 <flatcc_json_parser_error_string@@Base+0x1c0>
   22d30:	b	22e7c <flatcc_json_parser_error_string@@Base+0x1cc>
   22d34:	b	22e88 <flatcc_json_parser_error_string@@Base+0x1d8>
   22d38:	b	22e94 <flatcc_json_parser_error_string@@Base+0x1e4>
   22d3c:	b	22ea0 <flatcc_json_parser_error_string@@Base+0x1f0>
   22d40:	b	22eac <flatcc_json_parser_error_string@@Base+0x1fc>
   22d44:	b	22eb8 <flatcc_json_parser_error_string@@Base+0x208>
   22d48:	b	22ec4 <flatcc_json_parser_error_string@@Base+0x214>
   22d4c:	b	22ed0 <flatcc_json_parser_error_string@@Base+0x220>
   22d50:	b	22edc <flatcc_json_parser_error_string@@Base+0x22c>
   22d54:	b	22ee8 <flatcc_json_parser_error_string@@Base+0x238>
   22d58:	b	22ef4 <flatcc_json_parser_error_string@@Base+0x244>
   22d5c:	ldr	r3, [pc, #436]	; 22f18 <flatcc_json_parser_error_string@@Base+0x268>
   22d60:	add	r3, pc, r3
   22d64:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22d68:	ldr	r3, [pc, #428]	; 22f1c <flatcc_json_parser_error_string@@Base+0x26c>
   22d6c:	add	r3, pc, r3
   22d70:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22d74:	ldr	r3, [pc, #420]	; 22f20 <flatcc_json_parser_error_string@@Base+0x270>
   22d78:	add	r3, pc, r3
   22d7c:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22d80:	ldr	r3, [pc, #412]	; 22f24 <flatcc_json_parser_error_string@@Base+0x274>
   22d84:	add	r3, pc, r3
   22d88:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22d8c:	ldr	r3, [pc, #404]	; 22f28 <flatcc_json_parser_error_string@@Base+0x278>
   22d90:	add	r3, pc, r3
   22d94:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22d98:	ldr	r3, [pc, #396]	; 22f2c <flatcc_json_parser_error_string@@Base+0x27c>
   22d9c:	add	r3, pc, r3
   22da0:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22da4:	ldr	r3, [pc, #388]	; 22f30 <flatcc_json_parser_error_string@@Base+0x280>
   22da8:	add	r3, pc, r3
   22dac:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22db0:	ldr	r3, [pc, #380]	; 22f34 <flatcc_json_parser_error_string@@Base+0x284>
   22db4:	add	r3, pc, r3
   22db8:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22dbc:	ldr	r3, [pc, #372]	; 22f38 <flatcc_json_parser_error_string@@Base+0x288>
   22dc0:	add	r3, pc, r3
   22dc4:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22dc8:	ldr	r3, [pc, #364]	; 22f3c <flatcc_json_parser_error_string@@Base+0x28c>
   22dcc:	add	r3, pc, r3
   22dd0:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22dd4:	ldr	r3, [pc, #356]	; 22f40 <flatcc_json_parser_error_string@@Base+0x290>
   22dd8:	add	r3, pc, r3
   22ddc:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22de0:	ldr	r3, [pc, #348]	; 22f44 <flatcc_json_parser_error_string@@Base+0x294>
   22de4:	add	r3, pc, r3
   22de8:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22dec:	ldr	r3, [pc, #340]	; 22f48 <flatcc_json_parser_error_string@@Base+0x298>
   22df0:	add	r3, pc, r3
   22df4:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22df8:	ldr	r3, [pc, #332]	; 22f4c <flatcc_json_parser_error_string@@Base+0x29c>
   22dfc:	add	r3, pc, r3
   22e00:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e04:	ldr	r3, [pc, #324]	; 22f50 <flatcc_json_parser_error_string@@Base+0x2a0>
   22e08:	add	r3, pc, r3
   22e0c:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e10:	ldr	r3, [pc, #316]	; 22f54 <flatcc_json_parser_error_string@@Base+0x2a4>
   22e14:	add	r3, pc, r3
   22e18:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e1c:	ldr	r3, [pc, #308]	; 22f58 <flatcc_json_parser_error_string@@Base+0x2a8>
   22e20:	add	r3, pc, r3
   22e24:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e28:	ldr	r3, [pc, #300]	; 22f5c <flatcc_json_parser_error_string@@Base+0x2ac>
   22e2c:	add	r3, pc, r3
   22e30:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e34:	ldr	r3, [pc, #292]	; 22f60 <flatcc_json_parser_error_string@@Base+0x2b0>
   22e38:	add	r3, pc, r3
   22e3c:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e40:	ldr	r3, [pc, #284]	; 22f64 <flatcc_json_parser_error_string@@Base+0x2b4>
   22e44:	add	r3, pc, r3
   22e48:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e4c:	ldr	r3, [pc, #276]	; 22f68 <flatcc_json_parser_error_string@@Base+0x2b8>
   22e50:	add	r3, pc, r3
   22e54:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e58:	ldr	r3, [pc, #268]	; 22f6c <flatcc_json_parser_error_string@@Base+0x2bc>
   22e5c:	add	r3, pc, r3
   22e60:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e64:	ldr	r3, [pc, #260]	; 22f70 <flatcc_json_parser_error_string@@Base+0x2c0>
   22e68:	add	r3, pc, r3
   22e6c:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e70:	ldr	r3, [pc, #252]	; 22f74 <flatcc_json_parser_error_string@@Base+0x2c4>
   22e74:	add	r3, pc, r3
   22e78:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e7c:	ldr	r3, [pc, #244]	; 22f78 <flatcc_json_parser_error_string@@Base+0x2c8>
   22e80:	add	r3, pc, r3
   22e84:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e88:	ldr	r3, [pc, #236]	; 22f7c <flatcc_json_parser_error_string@@Base+0x2cc>
   22e8c:	add	r3, pc, r3
   22e90:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22e94:	ldr	r3, [pc, #228]	; 22f80 <flatcc_json_parser_error_string@@Base+0x2d0>
   22e98:	add	r3, pc, r3
   22e9c:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22ea0:	ldr	r3, [pc, #220]	; 22f84 <flatcc_json_parser_error_string@@Base+0x2d4>
   22ea4:	add	r3, pc, r3
   22ea8:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22eac:	ldr	r3, [pc, #212]	; 22f88 <flatcc_json_parser_error_string@@Base+0x2d8>
   22eb0:	add	r3, pc, r3
   22eb4:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22eb8:	ldr	r3, [pc, #204]	; 22f8c <flatcc_json_parser_error_string@@Base+0x2dc>
   22ebc:	add	r3, pc, r3
   22ec0:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22ec4:	ldr	r3, [pc, #196]	; 22f90 <flatcc_json_parser_error_string@@Base+0x2e0>
   22ec8:	add	r3, pc, r3
   22ecc:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22ed0:	ldr	r3, [pc, #188]	; 22f94 <flatcc_json_parser_error_string@@Base+0x2e4>
   22ed4:	add	r3, pc, r3
   22ed8:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22edc:	ldr	r3, [pc, #180]	; 22f98 <flatcc_json_parser_error_string@@Base+0x2e8>
   22ee0:	add	r3, pc, r3
   22ee4:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22ee8:	ldr	r3, [pc, #172]	; 22f9c <flatcc_json_parser_error_string@@Base+0x2ec>
   22eec:	add	r3, pc, r3
   22ef0:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22ef4:	ldr	r3, [pc, #164]	; 22fa0 <flatcc_json_parser_error_string@@Base+0x2f0>
   22ef8:	add	r3, pc, r3
   22efc:	b	22f08 <flatcc_json_parser_error_string@@Base+0x258>
   22f00:	ldr	r3, [pc, #156]	; 22fa4 <flatcc_json_parser_error_string@@Base+0x2f4>
   22f04:	add	r3, pc, r3
   22f08:	mov	r0, r3
   22f0c:	add	sp, fp, #0
   22f10:	pop	{fp}		; (ldr fp, [sp], #4)
   22f14:	bx	lr
   22f18:	andeq	r5, r0, r8, ror r2
   22f1c:	andeq	r5, r0, ip, ror #6
   22f20:	andeq	r5, r0, r4, ror #6
   22f24:	andeq	r5, r0, r8, ror #6
   22f28:	andeq	r5, r0, ip, ror #6
   22f2c:	andeq	r5, r0, r0, ror r3
   22f30:	andeq	r5, r0, ip, ror r3
   22f34:	andeq	r5, r0, r0, lsl #7
   22f38:	andeq	r5, r0, r0, lsl #7
   22f3c:	andeq	r5, r0, r0, lsl #7
   22f40:	andeq	r5, r0, r8, lsl #7
   22f44:	muleq	r0, r0, r3
   22f48:	muleq	r0, r4, r3
   22f4c:	muleq	r0, ip, r3
   22f50:	andeq	r5, r0, r0, lsr #7
   22f54:			; <UNDEFINED> instruction: 0x000053b0
   22f58:			; <UNDEFINED> instruction: 0x000053b8
   22f5c:			; <UNDEFINED> instruction: 0x000053bc
   22f60:	andeq	r5, r0, r4, asr #7
   22f64:	andeq	r5, r0, r8, asr #7
   22f68:	andeq	r5, r0, ip, asr #7
   22f6c:	ldrdeq	r5, [r0], -r4
   22f70:	ldrdeq	r5, [r0], -r8
   22f74:	ldrdeq	r5, [r0], -ip
   22f78:	strdeq	r5, [r0], -r4
   22f7c:	strdeq	r5, [r0], -ip
   22f80:	andeq	r5, r0, r0, lsl r4
   22f84:	andeq	r5, r0, r4, lsr #8
   22f88:	andeq	r5, r0, r4, lsr r4
   22f8c:	andeq	r5, r0, r4, asr #8
   22f90:	andeq	r5, r0, r0, asr r4
   22f94:	andeq	r5, r0, r4, ror #8
   22f98:	andeq	r5, r0, r0, ror r4
   22f9c:	andeq	r5, r0, r0, lsl #9
   22fa0:	andeq	r5, r0, r4, lsl #9
   22fa4:	andeq	r5, r0, r8, lsl #9

00022fa8 <flatcc_json_parser_set_error@@Base>:
   22fa8:	push	{fp}		; (str fp, [sp, #-4]!)
   22fac:	add	fp, sp, #0
   22fb0:	sub	sp, sp, #20
   22fb4:	str	r0, [fp, #-8]
   22fb8:	str	r1, [fp, #-12]
   22fbc:	str	r2, [fp, #-16]
   22fc0:	str	r3, [fp, #-20]	; 0xffffffec
   22fc4:	ldr	r3, [fp, #-8]
   22fc8:	ldr	r3, [r3, #24]
   22fcc:	cmp	r3, #0
   22fd0:	bne	23008 <flatcc_json_parser_set_error@@Base+0x60>
   22fd4:	ldr	r3, [fp, #-8]
   22fd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   22fdc:	str	r2, [r3, #24]
   22fe0:	ldr	r3, [fp, #-8]
   22fe4:	ldr	r3, [r3, #4]
   22fe8:	ldr	r2, [fp, #-12]
   22fec:	sub	r3, r2, r3
   22ff0:	add	r2, r3, #1
   22ff4:	ldr	r3, [fp, #-8]
   22ff8:	str	r2, [r3, #20]
   22ffc:	ldr	r3, [fp, #-8]
   23000:	ldr	r2, [fp, #-12]
   23004:	str	r2, [r3, #36]	; 0x24
   23008:	ldr	r3, [fp, #-16]
   2300c:	mov	r0, r3
   23010:	add	sp, fp, #0
   23014:	pop	{fp}		; (ldr fp, [sp], #4)
   23018:	bx	lr

0002301c <flatcc_json_parser_string_part@@Base>:
   2301c:	str	fp, [sp, #-8]!
   23020:	str	lr, [sp, #4]
   23024:	add	fp, sp, #4
   23028:	sub	sp, sp, #16
   2302c:	str	r0, [fp, #-8]
   23030:	str	r1, [fp, #-12]
   23034:	str	r2, [fp, #-16]
   23038:	b	23048 <flatcc_json_parser_string_part@@Base+0x2c>
   2303c:	ldr	r3, [fp, #-12]
   23040:	add	r3, r3, #1
   23044:	str	r3, [fp, #-12]
   23048:	ldr	r2, [fp, #-12]
   2304c:	ldr	r3, [fp, #-16]
   23050:	cmp	r2, r3
   23054:	beq	23088 <flatcc_json_parser_string_part@@Base+0x6c>
   23058:	ldr	r3, [fp, #-12]
   2305c:	ldrb	r3, [r3]
   23060:	cmp	r3, #34	; 0x22
   23064:	beq	23088 <flatcc_json_parser_string_part@@Base+0x6c>
   23068:	ldr	r3, [fp, #-12]
   2306c:	ldrb	r3, [r3]
   23070:	cmp	r3, #31
   23074:	bls	23088 <flatcc_json_parser_string_part@@Base+0x6c>
   23078:	ldr	r3, [fp, #-12]
   2307c:	ldrb	r3, [r3]
   23080:	cmp	r3, #92	; 0x5c
   23084:	bne	2303c <flatcc_json_parser_string_part@@Base+0x20>
   23088:	ldr	r2, [fp, #-12]
   2308c:	ldr	r3, [fp, #-16]
   23090:	cmp	r2, r3
   23094:	bne	230b4 <flatcc_json_parser_string_part@@Base+0x98>
   23098:	mov	r3, #20
   2309c:	ldr	r2, [fp, #-16]
   230a0:	ldr	r1, [fp, #-12]
   230a4:	ldr	r0, [fp, #-8]
   230a8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   230ac:	mov	r3, r0
   230b0:	b	230fc <flatcc_json_parser_string_part@@Base+0xe0>
   230b4:	ldr	r3, [fp, #-12]
   230b8:	ldrb	r3, [r3]
   230bc:	cmp	r3, #34	; 0x22
   230c0:	bne	230cc <flatcc_json_parser_string_part@@Base+0xb0>
   230c4:	ldr	r3, [fp, #-12]
   230c8:	b	230fc <flatcc_json_parser_string_part@@Base+0xe0>
   230cc:	ldr	r3, [fp, #-12]
   230d0:	ldrb	r3, [r3]
   230d4:	cmp	r3, #31
   230d8:	bhi	230f8 <flatcc_json_parser_string_part@@Base+0xdc>
   230dc:	mov	r3, #17
   230e0:	ldr	r2, [fp, #-16]
   230e4:	ldr	r1, [fp, #-12]
   230e8:	ldr	r0, [fp, #-8]
   230ec:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   230f0:	mov	r3, r0
   230f4:	b	230fc <flatcc_json_parser_string_part@@Base+0xe0>
   230f8:	ldr	r3, [fp, #-12]
   230fc:	mov	r0, r3
   23100:	sub	sp, fp, #4
   23104:	ldr	fp, [sp]
   23108:	add	sp, sp, #4
   2310c:	pop	{pc}		; (ldr pc, [sp], #4)

00023110 <flatcc_json_parser_space_ext@@Base>:
   23110:	str	fp, [sp, #-8]!
   23114:	str	lr, [sp, #4]
   23118:	add	fp, sp, #4
   2311c:	sub	sp, sp, #16
   23120:	str	r0, [fp, #-8]
   23124:	str	r1, [fp, #-12]
   23128:	str	r2, [fp, #-16]
   2312c:	b	2313c <flatcc_json_parser_space_ext@@Base+0x2c>
   23130:	ldr	r3, [fp, #-12]
   23134:	add	r3, r3, #1
   23138:	str	r3, [fp, #-12]
   2313c:	ldr	r2, [fp, #-12]
   23140:	ldr	r3, [fp, #-16]
   23144:	cmp	r2, r3
   23148:	beq	23278 <flatcc_json_parser_space_ext@@Base+0x168>
   2314c:	ldr	r3, [fp, #-12]
   23150:	ldrb	r3, [r3]
   23154:	cmp	r3, #32
   23158:	beq	23130 <flatcc_json_parser_space_ext@@Base+0x20>
   2315c:	b	23278 <flatcc_json_parser_space_ext@@Base+0x168>
   23160:	ldr	r3, [fp, #-12]
   23164:	ldrb	r3, [r3]
   23168:	sub	r3, r3, #9
   2316c:	cmp	r3, #23
   23170:	addls	pc, pc, r3, lsl #2
   23174:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   23178:	b	2324c <flatcc_json_parser_space_ext@@Base+0x13c>
   2317c:	b	2321c <flatcc_json_parser_space_ext@@Base+0x10c>
   23180:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   23184:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   23188:	b	231d8 <flatcc_json_parser_space_ext@@Base+0xc8>
   2318c:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   23190:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   23194:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   23198:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   2319c:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231a0:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231a4:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231a8:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231ac:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231b0:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231b4:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231b8:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231bc:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231c0:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231c4:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231c8:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231cc:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231d0:	b	2325c <flatcc_json_parser_space_ext@@Base+0x14c>
   231d4:	b	2312c <flatcc_json_parser_space_ext@@Base+0x1c>
   231d8:	ldr	r2, [fp, #-16]
   231dc:	ldr	r3, [fp, #-12]
   231e0:	sub	r3, r2, r3
   231e4:	cmp	r3, #1
   231e8:	ble	23208 <flatcc_json_parser_space_ext@@Base+0xf8>
   231ec:	ldr	r3, [fp, #-12]
   231f0:	add	r3, r3, #1
   231f4:	ldrb	r3, [r3]
   231f8:	cmp	r3, #10
   231fc:	bne	23208 <flatcc_json_parser_space_ext@@Base+0xf8>
   23200:	mov	r3, #1
   23204:	b	2320c <flatcc_json_parser_space_ext@@Base+0xfc>
   23208:	mov	r3, #0
   2320c:	mov	r2, r3
   23210:	ldr	r3, [fp, #-12]
   23214:	add	r3, r3, r2
   23218:	str	r3, [fp, #-12]
   2321c:	ldr	r3, [fp, #-8]
   23220:	ldr	r3, [r3, #16]
   23224:	add	r2, r3, #1
   23228:	ldr	r3, [fp, #-8]
   2322c:	str	r2, [r3, #16]
   23230:	ldr	r3, [fp, #-12]
   23234:	add	r3, r3, #1
   23238:	str	r3, [fp, #-12]
   2323c:	ldr	r3, [fp, #-8]
   23240:	ldr	r2, [fp, #-12]
   23244:	str	r2, [r3, #4]
   23248:	b	23278 <flatcc_json_parser_space_ext@@Base+0x168>
   2324c:	ldr	r3, [fp, #-12]
   23250:	add	r3, r3, #1
   23254:	str	r3, [fp, #-12]
   23258:	b	23278 <flatcc_json_parser_space_ext@@Base+0x168>
   2325c:	mov	r3, #5
   23260:	ldr	r2, [fp, #-16]
   23264:	ldr	r1, [fp, #-12]
   23268:	ldr	r0, [fp, #-8]
   2326c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   23270:	mov	r3, r0
   23274:	b	2329c <flatcc_json_parser_space_ext@@Base+0x18c>
   23278:	ldr	r2, [fp, #-12]
   2327c:	ldr	r3, [fp, #-16]
   23280:	cmp	r2, r3
   23284:	beq	23298 <flatcc_json_parser_space_ext@@Base+0x188>
   23288:	ldr	r3, [fp, #-12]
   2328c:	ldrb	r3, [r3]
   23290:	cmp	r3, #32
   23294:	bls	23160 <flatcc_json_parser_space_ext@@Base+0x50>
   23298:	ldr	r3, [fp, #-12]
   2329c:	mov	r0, r3
   232a0:	sub	sp, fp, #4
   232a4:	ldr	fp, [sp]
   232a8:	add	sp, sp, #4
   232ac:	pop	{pc}		; (ldr pc, [sp], #4)

000232b0 <flatcc_json_parser_string_escape@@Base>:
   232b0:	str	fp, [sp, #-8]!
   232b4:	str	lr, [sp, #4]
   232b8:	add	fp, sp, #4
   232bc:	sub	sp, sp, #24
   232c0:	str	r0, [fp, #-16]
   232c4:	str	r1, [fp, #-20]	; 0xffffffec
   232c8:	str	r2, [fp, #-24]	; 0xffffffe8
   232cc:	str	r3, [fp, #-28]	; 0xffffffe4
   232d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   232d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   232d8:	sub	r3, r2, r3
   232dc:	cmp	r3, #1
   232e0:	ble	232f4 <flatcc_json_parser_string_escape@@Base+0x44>
   232e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   232e8:	ldrb	r3, [r3]
   232ec:	cmp	r3, #92	; 0x5c
   232f0:	beq	2331c <flatcc_json_parser_string_escape@@Base+0x6c>
   232f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   232f8:	mov	r2, #0
   232fc:	strb	r2, [r3]
   23300:	mov	r3, #18
   23304:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23308:	ldr	r1, [fp, #-20]	; 0xffffffec
   2330c:	ldr	r0, [fp, #-16]
   23310:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   23314:	mov	r3, r0
   23318:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   2331c:	ldr	r3, [fp, #-20]	; 0xffffffec
   23320:	add	r3, r3, #1
   23324:	ldrb	r3, [r3]
   23328:	sub	r3, r3, #34	; 0x22
   2332c:	cmp	r3, #86	; 0x56
   23330:	addls	pc, pc, r3, lsl #2
   23334:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23338:	b	23bd4 <flatcc_json_parser_string_escape@@Base+0x924>
   2333c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23340:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23344:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23348:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2334c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23350:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23354:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23358:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2335c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23360:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23364:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23368:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2336c:	b	23c24 <flatcc_json_parser_string_escape@@Base+0x974>
   23370:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23374:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23378:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2337c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23380:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23384:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23388:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2338c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23390:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23394:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23398:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2339c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233a0:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233a4:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233a8:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233ac:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233b0:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233b4:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233b8:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233bc:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233c0:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233c4:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233c8:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233cc:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233d0:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233d4:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233d8:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233dc:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233e0:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233e4:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233e8:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233ec:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233f0:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233f4:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233f8:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   233fc:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23400:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23404:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23408:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2340c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23410:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23414:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23418:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2341c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23420:	b	23bfc <flatcc_json_parser_string_escape@@Base+0x94c>
   23424:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23428:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2342c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23430:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23434:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23438:	b	23b84 <flatcc_json_parser_string_escape@@Base+0x8d4>
   2343c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23440:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23444:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23448:	b	23bac <flatcc_json_parser_string_escape@@Base+0x8fc>
   2344c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23450:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23454:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23458:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2345c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23460:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23464:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23468:	b	23b34 <flatcc_json_parser_string_escape@@Base+0x884>
   2346c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23470:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23474:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23478:	b	23b5c <flatcc_json_parser_string_escape@@Base+0x8ac>
   2347c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23480:	b	23b0c <flatcc_json_parser_string_escape@@Base+0x85c>
   23484:	b	23670 <flatcc_json_parser_string_escape@@Base+0x3c0>
   23488:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   2348c:	b	23c4c <flatcc_json_parser_string_escape@@Base+0x99c>
   23490:	b	23494 <flatcc_json_parser_string_escape@@Base+0x1e4>
   23494:	mov	r3, #0
   23498:	strb	r3, [fp, #-5]
   2349c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   234a0:	mov	r2, #1
   234a4:	strb	r2, [r3]
   234a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   234ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   234b0:	sub	r3, r2, r3
   234b4:	cmp	r3, #3
   234b8:	bgt	234e4 <flatcc_json_parser_string_escape@@Base+0x234>
   234bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   234c0:	mov	r2, #0
   234c4:	strb	r2, [r3]
   234c8:	mov	r3, #18
   234cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   234d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   234d4:	ldr	r0, [fp, #-16]
   234d8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   234dc:	mov	r3, r0
   234e0:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   234e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   234e8:	ldrb	r3, [r3, #2]
   234ec:	strb	r3, [fp, #-9]
   234f0:	ldrb	r3, [fp, #-9]
   234f4:	cmp	r3, #47	; 0x2f
   234f8:	bls	2352c <flatcc_json_parser_string_escape@@Base+0x27c>
   234fc:	ldrb	r3, [fp, #-9]
   23500:	cmp	r3, #57	; 0x39
   23504:	bhi	2352c <flatcc_json_parser_string_escape@@Base+0x27c>
   23508:	ldrb	r3, [fp, #-9]
   2350c:	sub	r3, r3, #48	; 0x30
   23510:	lsl	r3, r3, #4
   23514:	sxtb	r2, r3
   23518:	ldrsb	r3, [fp, #-5]
   2351c:	orr	r3, r2, r3
   23520:	sxtb	r3, r3
   23524:	strb	r3, [fp, #-5]
   23528:	b	2359c <flatcc_json_parser_string_escape@@Base+0x2ec>
   2352c:	ldrb	r3, [fp, #-9]
   23530:	orr	r3, r3, #32
   23534:	strb	r3, [fp, #-9]
   23538:	ldrb	r3, [fp, #-9]
   2353c:	cmp	r3, #96	; 0x60
   23540:	bls	23574 <flatcc_json_parser_string_escape@@Base+0x2c4>
   23544:	ldrb	r3, [fp, #-9]
   23548:	cmp	r3, #102	; 0x66
   2354c:	bhi	23574 <flatcc_json_parser_string_escape@@Base+0x2c4>
   23550:	ldrb	r3, [fp, #-9]
   23554:	sub	r3, r3, #87	; 0x57
   23558:	lsl	r3, r3, #4
   2355c:	sxtb	r2, r3
   23560:	ldrsb	r3, [fp, #-5]
   23564:	orr	r3, r2, r3
   23568:	sxtb	r3, r3
   2356c:	strb	r3, [fp, #-5]
   23570:	b	2359c <flatcc_json_parser_string_escape@@Base+0x2ec>
   23574:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23578:	mov	r2, #0
   2357c:	strb	r2, [r3]
   23580:	mov	r3, #18
   23584:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23588:	ldr	r1, [fp, #-20]	; 0xffffffec
   2358c:	ldr	r0, [fp, #-16]
   23590:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   23594:	mov	r3, r0
   23598:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   2359c:	ldr	r3, [fp, #-20]	; 0xffffffec
   235a0:	ldrb	r3, [r3, #3]
   235a4:	strb	r3, [fp, #-9]
   235a8:	ldrb	r3, [fp, #-9]
   235ac:	cmp	r3, #47	; 0x2f
   235b0:	bls	235e4 <flatcc_json_parser_string_escape@@Base+0x334>
   235b4:	ldrb	r3, [fp, #-9]
   235b8:	cmp	r3, #57	; 0x39
   235bc:	bhi	235e4 <flatcc_json_parser_string_escape@@Base+0x334>
   235c0:	ldrb	r3, [fp, #-9]
   235c4:	sub	r3, r3, #48	; 0x30
   235c8:	uxtb	r3, r3
   235cc:	sxtb	r2, r3
   235d0:	ldrsb	r3, [fp, #-5]
   235d4:	orr	r3, r2, r3
   235d8:	sxtb	r3, r3
   235dc:	strb	r3, [fp, #-5]
   235e0:	b	23654 <flatcc_json_parser_string_escape@@Base+0x3a4>
   235e4:	ldrb	r3, [fp, #-9]
   235e8:	orr	r3, r3, #32
   235ec:	strb	r3, [fp, #-9]
   235f0:	ldrb	r3, [fp, #-9]
   235f4:	cmp	r3, #96	; 0x60
   235f8:	bls	2362c <flatcc_json_parser_string_escape@@Base+0x37c>
   235fc:	ldrb	r3, [fp, #-9]
   23600:	cmp	r3, #102	; 0x66
   23604:	bhi	2362c <flatcc_json_parser_string_escape@@Base+0x37c>
   23608:	ldrb	r3, [fp, #-9]
   2360c:	sub	r3, r3, #87	; 0x57
   23610:	uxtb	r3, r3
   23614:	sxtb	r2, r3
   23618:	ldrsb	r3, [fp, #-5]
   2361c:	orr	r3, r2, r3
   23620:	sxtb	r3, r3
   23624:	strb	r3, [fp, #-5]
   23628:	b	23654 <flatcc_json_parser_string_escape@@Base+0x3a4>
   2362c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23630:	mov	r2, #0
   23634:	strb	r2, [r3]
   23638:	mov	r3, #18
   2363c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23640:	ldr	r1, [fp, #-20]	; 0xffffffec
   23644:	ldr	r0, [fp, #-16]
   23648:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2364c:	mov	r3, r0
   23650:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23654:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23658:	add	r3, r3, #1
   2365c:	ldrb	r2, [fp, #-5]
   23660:	strb	r2, [r3]
   23664:	ldr	r3, [fp, #-20]	; 0xffffffec
   23668:	add	r3, r3, #4
   2366c:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23670:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23674:	ldr	r3, [fp, #-20]	; 0xffffffec
   23678:	sub	r3, r2, r3
   2367c:	cmp	r3, #5
   23680:	bgt	236ac <flatcc_json_parser_string_escape@@Base+0x3fc>
   23684:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23688:	mov	r2, #0
   2368c:	strb	r2, [r3]
   23690:	mov	r3, #18
   23694:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23698:	ldr	r1, [fp, #-20]	; 0xffffffec
   2369c:	ldr	r0, [fp, #-16]
   236a0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   236a4:	mov	r3, r0
   236a8:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   236ac:	mov	r3, #0
   236b0:	strh	r3, [fp, #-8]
   236b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   236b8:	ldrb	r3, [r3, #2]
   236bc:	strb	r3, [fp, #-9]
   236c0:	ldrb	r3, [fp, #-9]
   236c4:	cmp	r3, #47	; 0x2f
   236c8:	bls	236f8 <flatcc_json_parser_string_escape@@Base+0x448>
   236cc:	ldrb	r3, [fp, #-9]
   236d0:	cmp	r3, #57	; 0x39
   236d4:	bhi	236f8 <flatcc_json_parser_string_escape@@Base+0x448>
   236d8:	ldrb	r3, [fp, #-9]
   236dc:	uxth	r3, r3
   236e0:	sub	r3, r3, #48	; 0x30
   236e4:	strh	r3, [fp, #-12]
   236e8:	ldrh	r3, [fp, #-12]
   236ec:	lsl	r3, r3, #12
   236f0:	strh	r3, [fp, #-8]
   236f4:	b	23774 <flatcc_json_parser_string_escape@@Base+0x4c4>
   236f8:	ldrb	r3, [fp, #-9]
   236fc:	orr	r3, r3, #32
   23700:	strb	r3, [fp, #-9]
   23704:	ldrb	r3, [fp, #-9]
   23708:	cmp	r3, #96	; 0x60
   2370c:	bls	2374c <flatcc_json_parser_string_escape@@Base+0x49c>
   23710:	ldrb	r3, [fp, #-9]
   23714:	cmp	r3, #102	; 0x66
   23718:	bhi	2374c <flatcc_json_parser_string_escape@@Base+0x49c>
   2371c:	ldrb	r3, [fp, #-9]
   23720:	uxth	r3, r3
   23724:	sub	r3, r3, #87	; 0x57
   23728:	strh	r3, [fp, #-12]
   2372c:	ldrh	r3, [fp, #-12]
   23730:	lsl	r3, r3, #12
   23734:	sxth	r2, r3
   23738:	ldrsh	r3, [fp, #-8]
   2373c:	orr	r3, r2, r3
   23740:	sxth	r3, r3
   23744:	strh	r3, [fp, #-8]
   23748:	b	23774 <flatcc_json_parser_string_escape@@Base+0x4c4>
   2374c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23750:	mov	r2, #0
   23754:	strb	r2, [r3]
   23758:	mov	r3, #18
   2375c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23760:	ldr	r1, [fp, #-20]	; 0xffffffec
   23764:	ldr	r0, [fp, #-16]
   23768:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2376c:	mov	r3, r0
   23770:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23774:	ldr	r3, [fp, #-20]	; 0xffffffec
   23778:	ldrb	r3, [r3, #3]
   2377c:	strb	r3, [fp, #-9]
   23780:	ldrb	r3, [fp, #-9]
   23784:	cmp	r3, #47	; 0x2f
   23788:	bls	237c8 <flatcc_json_parser_string_escape@@Base+0x518>
   2378c:	ldrb	r3, [fp, #-9]
   23790:	cmp	r3, #57	; 0x39
   23794:	bhi	237c8 <flatcc_json_parser_string_escape@@Base+0x518>
   23798:	ldrb	r3, [fp, #-9]
   2379c:	uxth	r3, r3
   237a0:	sub	r3, r3, #48	; 0x30
   237a4:	strh	r3, [fp, #-12]
   237a8:	ldrh	r3, [fp, #-12]
   237ac:	lsl	r3, r3, #8
   237b0:	sxth	r2, r3
   237b4:	ldrsh	r3, [fp, #-8]
   237b8:	orr	r3, r2, r3
   237bc:	sxth	r3, r3
   237c0:	strh	r3, [fp, #-8]
   237c4:	b	23844 <flatcc_json_parser_string_escape@@Base+0x594>
   237c8:	ldrb	r3, [fp, #-9]
   237cc:	orr	r3, r3, #32
   237d0:	strb	r3, [fp, #-9]
   237d4:	ldrb	r3, [fp, #-9]
   237d8:	cmp	r3, #96	; 0x60
   237dc:	bls	2381c <flatcc_json_parser_string_escape@@Base+0x56c>
   237e0:	ldrb	r3, [fp, #-9]
   237e4:	cmp	r3, #102	; 0x66
   237e8:	bhi	2381c <flatcc_json_parser_string_escape@@Base+0x56c>
   237ec:	ldrb	r3, [fp, #-9]
   237f0:	uxth	r3, r3
   237f4:	sub	r3, r3, #87	; 0x57
   237f8:	strh	r3, [fp, #-12]
   237fc:	ldrh	r3, [fp, #-12]
   23800:	lsl	r3, r3, #8
   23804:	sxth	r2, r3
   23808:	ldrsh	r3, [fp, #-8]
   2380c:	orr	r3, r2, r3
   23810:	sxth	r3, r3
   23814:	strh	r3, [fp, #-8]
   23818:	b	23844 <flatcc_json_parser_string_escape@@Base+0x594>
   2381c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23820:	mov	r2, #0
   23824:	strb	r2, [r3]
   23828:	mov	r3, #18
   2382c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23830:	ldr	r1, [fp, #-20]	; 0xffffffec
   23834:	ldr	r0, [fp, #-16]
   23838:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2383c:	mov	r3, r0
   23840:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23844:	ldr	r3, [fp, #-20]	; 0xffffffec
   23848:	ldrb	r3, [r3, #4]
   2384c:	strb	r3, [fp, #-9]
   23850:	ldrb	r3, [fp, #-9]
   23854:	cmp	r3, #47	; 0x2f
   23858:	bls	23898 <flatcc_json_parser_string_escape@@Base+0x5e8>
   2385c:	ldrb	r3, [fp, #-9]
   23860:	cmp	r3, #57	; 0x39
   23864:	bhi	23898 <flatcc_json_parser_string_escape@@Base+0x5e8>
   23868:	ldrb	r3, [fp, #-9]
   2386c:	uxth	r3, r3
   23870:	sub	r3, r3, #48	; 0x30
   23874:	strh	r3, [fp, #-12]
   23878:	ldrh	r3, [fp, #-12]
   2387c:	lsl	r3, r3, #4
   23880:	sxth	r2, r3
   23884:	ldrsh	r3, [fp, #-8]
   23888:	orr	r3, r2, r3
   2388c:	sxth	r3, r3
   23890:	strh	r3, [fp, #-8]
   23894:	b	23914 <flatcc_json_parser_string_escape@@Base+0x664>
   23898:	ldrb	r3, [fp, #-9]
   2389c:	orr	r3, r3, #32
   238a0:	strb	r3, [fp, #-9]
   238a4:	ldrb	r3, [fp, #-9]
   238a8:	cmp	r3, #96	; 0x60
   238ac:	bls	238ec <flatcc_json_parser_string_escape@@Base+0x63c>
   238b0:	ldrb	r3, [fp, #-9]
   238b4:	cmp	r3, #102	; 0x66
   238b8:	bhi	238ec <flatcc_json_parser_string_escape@@Base+0x63c>
   238bc:	ldrb	r3, [fp, #-9]
   238c0:	uxth	r3, r3
   238c4:	sub	r3, r3, #87	; 0x57
   238c8:	strh	r3, [fp, #-12]
   238cc:	ldrh	r3, [fp, #-12]
   238d0:	lsl	r3, r3, #4
   238d4:	sxth	r2, r3
   238d8:	ldrsh	r3, [fp, #-8]
   238dc:	orr	r3, r2, r3
   238e0:	sxth	r3, r3
   238e4:	strh	r3, [fp, #-8]
   238e8:	b	23914 <flatcc_json_parser_string_escape@@Base+0x664>
   238ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   238f0:	mov	r2, #0
   238f4:	strb	r2, [r3]
   238f8:	mov	r3, #18
   238fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23900:	ldr	r1, [fp, #-20]	; 0xffffffec
   23904:	ldr	r0, [fp, #-16]
   23908:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2390c:	mov	r3, r0
   23910:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23914:	ldr	r3, [fp, #-20]	; 0xffffffec
   23918:	ldrb	r3, [r3, #5]
   2391c:	strb	r3, [fp, #-9]
   23920:	ldrb	r3, [fp, #-9]
   23924:	cmp	r3, #47	; 0x2f
   23928:	bls	2395c <flatcc_json_parser_string_escape@@Base+0x6ac>
   2392c:	ldrb	r3, [fp, #-9]
   23930:	cmp	r3, #57	; 0x39
   23934:	bhi	2395c <flatcc_json_parser_string_escape@@Base+0x6ac>
   23938:	ldrb	r3, [fp, #-9]
   2393c:	uxth	r3, r3
   23940:	sub	r3, r3, #48	; 0x30
   23944:	strh	r3, [fp, #-12]
   23948:	ldrh	r2, [fp, #-8]
   2394c:	ldrh	r3, [fp, #-12]
   23950:	orr	r3, r2, r3
   23954:	strh	r3, [fp, #-8]
   23958:	b	239cc <flatcc_json_parser_string_escape@@Base+0x71c>
   2395c:	ldrb	r3, [fp, #-9]
   23960:	orr	r3, r3, #32
   23964:	strb	r3, [fp, #-9]
   23968:	ldrb	r3, [fp, #-9]
   2396c:	cmp	r3, #96	; 0x60
   23970:	bls	239a4 <flatcc_json_parser_string_escape@@Base+0x6f4>
   23974:	ldrb	r3, [fp, #-9]
   23978:	cmp	r3, #102	; 0x66
   2397c:	bhi	239a4 <flatcc_json_parser_string_escape@@Base+0x6f4>
   23980:	ldrb	r3, [fp, #-9]
   23984:	uxth	r3, r3
   23988:	sub	r3, r3, #87	; 0x57
   2398c:	strh	r3, [fp, #-12]
   23990:	ldrh	r2, [fp, #-8]
   23994:	ldrh	r3, [fp, #-12]
   23998:	orr	r3, r2, r3
   2399c:	strh	r3, [fp, #-8]
   239a0:	b	239cc <flatcc_json_parser_string_escape@@Base+0x71c>
   239a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   239a8:	mov	r2, #0
   239ac:	strb	r2, [r3]
   239b0:	mov	r3, #18
   239b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   239b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   239bc:	ldr	r0, [fp, #-16]
   239c0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   239c4:	mov	r3, r0
   239c8:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   239cc:	ldrh	r3, [fp, #-8]
   239d0:	cmp	r3, #127	; 0x7f
   239d4:	bhi	239fc <flatcc_json_parser_string_escape@@Base+0x74c>
   239d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   239dc:	mov	r2, #1
   239e0:	strb	r2, [r3]
   239e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   239e8:	add	r3, r3, #1
   239ec:	ldrh	r2, [fp, #-8]
   239f0:	uxtb	r2, r2
   239f4:	strb	r2, [r3]
   239f8:	b	23b00 <flatcc_json_parser_string_escape@@Base+0x850>
   239fc:	ldrh	r3, [fp, #-8]
   23a00:	cmp	r3, #2048	; 0x800
   23a04:	bcs	23a6c <flatcc_json_parser_string_escape@@Base+0x7bc>
   23a08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23a0c:	mov	r2, #2
   23a10:	strb	r2, [r3]
   23a14:	ldrh	r3, [fp, #-8]
   23a18:	lsr	r3, r3, #6
   23a1c:	uxth	r3, r3
   23a20:	uxtb	r3, r3
   23a24:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23a28:	add	r2, r2, #1
   23a2c:	mvn	r3, r3, lsl #26
   23a30:	mvn	r3, r3, lsr #26
   23a34:	uxtb	r3, r3
   23a38:	strb	r3, [r2]
   23a3c:	ldrh	r3, [fp, #-8]
   23a40:	sxtb	r3, r3
   23a44:	and	r3, r3, #63	; 0x3f
   23a48:	sxtb	r3, r3
   23a4c:	mvn	r3, r3, lsl #25
   23a50:	mvn	r3, r3, lsr #25
   23a54:	sxtb	r2, r3
   23a58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23a5c:	add	r3, r3, #2
   23a60:	uxtb	r2, r2
   23a64:	strb	r2, [r3]
   23a68:	b	23b00 <flatcc_json_parser_string_escape@@Base+0x850>
   23a6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23a70:	mov	r2, #3
   23a74:	strb	r2, [r3]
   23a78:	ldrh	r3, [fp, #-8]
   23a7c:	lsr	r3, r3, #12
   23a80:	uxth	r3, r3
   23a84:	uxtb	r3, r3
   23a88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23a8c:	add	r2, r2, #1
   23a90:	mvn	r3, r3, lsl #27
   23a94:	mvn	r3, r3, lsr #27
   23a98:	uxtb	r3, r3
   23a9c:	strb	r3, [r2]
   23aa0:	ldrh	r3, [fp, #-8]
   23aa4:	lsr	r3, r3, #6
   23aa8:	uxth	r3, r3
   23aac:	sxtb	r3, r3
   23ab0:	and	r3, r3, #63	; 0x3f
   23ab4:	sxtb	r3, r3
   23ab8:	mvn	r3, r3, lsl #25
   23abc:	mvn	r3, r3, lsr #25
   23ac0:	sxtb	r2, r3
   23ac4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23ac8:	add	r3, r3, #2
   23acc:	uxtb	r2, r2
   23ad0:	strb	r2, [r3]
   23ad4:	ldrh	r3, [fp, #-8]
   23ad8:	sxtb	r3, r3
   23adc:	and	r3, r3, #63	; 0x3f
   23ae0:	sxtb	r3, r3
   23ae4:	mvn	r3, r3, lsl #25
   23ae8:	mvn	r3, r3, lsr #25
   23aec:	sxtb	r2, r3
   23af0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23af4:	add	r3, r3, #3
   23af8:	uxtb	r2, r2
   23afc:	strb	r2, [r3]
   23b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   23b04:	add	r3, r3, #6
   23b08:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b10:	mov	r2, #1
   23b14:	strb	r2, [r3]
   23b18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b1c:	add	r3, r3, #1
   23b20:	mov	r2, #9
   23b24:	strb	r2, [r3]
   23b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   23b2c:	add	r3, r3, #2
   23b30:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23b34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b38:	mov	r2, #1
   23b3c:	strb	r2, [r3]
   23b40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b44:	add	r3, r3, #1
   23b48:	mov	r2, #10
   23b4c:	strb	r2, [r3]
   23b50:	ldr	r3, [fp, #-20]	; 0xffffffec
   23b54:	add	r3, r3, #2
   23b58:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23b5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b60:	mov	r2, #1
   23b64:	strb	r2, [r3]
   23b68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b6c:	add	r3, r3, #1
   23b70:	mov	r2, #13
   23b74:	strb	r2, [r3]
   23b78:	ldr	r3, [fp, #-20]	; 0xffffffec
   23b7c:	add	r3, r3, #2
   23b80:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b88:	mov	r2, #1
   23b8c:	strb	r2, [r3]
   23b90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23b94:	add	r3, r3, #1
   23b98:	mov	r2, #8
   23b9c:	strb	r2, [r3]
   23ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   23ba4:	add	r3, r3, #2
   23ba8:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23bac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23bb0:	mov	r2, #1
   23bb4:	strb	r2, [r3]
   23bb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23bbc:	add	r3, r3, #1
   23bc0:	mov	r2, #12
   23bc4:	strb	r2, [r3]
   23bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   23bcc:	add	r3, r3, #2
   23bd0:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23bd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23bd8:	mov	r2, #1
   23bdc:	strb	r2, [r3]
   23be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23be4:	add	r3, r3, #1
   23be8:	mov	r2, #34	; 0x22
   23bec:	strb	r2, [r3]
   23bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   23bf4:	add	r3, r3, #2
   23bf8:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23bfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23c00:	mov	r2, #1
   23c04:	strb	r2, [r3]
   23c08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23c0c:	add	r3, r3, #1
   23c10:	mov	r2, #92	; 0x5c
   23c14:	strb	r2, [r3]
   23c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   23c1c:	add	r3, r3, #2
   23c20:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23c24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23c28:	mov	r2, #1
   23c2c:	strb	r2, [r3]
   23c30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23c34:	add	r3, r3, #1
   23c38:	mov	r2, #47	; 0x2f
   23c3c:	strb	r2, [r3]
   23c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   23c44:	add	r3, r3, #2
   23c48:	b	23c70 <flatcc_json_parser_string_escape@@Base+0x9c0>
   23c4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23c50:	mov	r2, #0
   23c54:	strb	r2, [r3]
   23c58:	mov	r3, #18
   23c5c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23c60:	ldr	r1, [fp, #-20]	; 0xffffffec
   23c64:	ldr	r0, [fp, #-16]
   23c68:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   23c6c:	mov	r3, r0
   23c70:	mov	r0, r3
   23c74:	sub	sp, fp, #4
   23c78:	ldr	fp, [sp]
   23c7c:	add	sp, sp, #4
   23c80:	pop	{pc}		; (ldr pc, [sp], #4)

00023c84 <flatcc_json_parser_skip_constant@@Base>:
   23c84:	str	fp, [sp, #-8]!
   23c88:	str	lr, [sp, #4]
   23c8c:	add	fp, sp, #4
   23c90:	sub	sp, sp, #24
   23c94:	str	r0, [fp, #-16]
   23c98:	str	r1, [fp, #-20]	; 0xffffffec
   23c9c:	str	r2, [fp, #-24]	; 0xffffffe8
   23ca0:	b	23d64 <flatcc_json_parser_skip_constant@@Base+0xe0>
   23ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   23ca8:	ldrb	r3, [r3]
   23cac:	strb	r3, [fp, #-5]
   23cb0:	ldrsb	r3, [fp, #-5]
   23cb4:	cmp	r3, #0
   23cb8:	blt	23cec <flatcc_json_parser_skip_constant@@Base+0x68>
   23cbc:	ldrb	r3, [fp, #-5]
   23cc0:	cmp	r3, #95	; 0x5f
   23cc4:	beq	23cec <flatcc_json_parser_skip_constant@@Base+0x68>
   23cc8:	ldrb	r3, [fp, #-5]
   23ccc:	cmp	r3, #47	; 0x2f
   23cd0:	bls	23ce0 <flatcc_json_parser_skip_constant@@Base+0x5c>
   23cd4:	ldrb	r3, [fp, #-5]
   23cd8:	cmp	r3, #57	; 0x39
   23cdc:	bls	23cec <flatcc_json_parser_skip_constant@@Base+0x68>
   23ce0:	ldrb	r3, [fp, #-5]
   23ce4:	cmp	r3, #46	; 0x2e
   23ce8:	bne	23cfc <flatcc_json_parser_skip_constant@@Base+0x78>
   23cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   23cf0:	add	r3, r3, #1
   23cf4:	str	r3, [fp, #-20]	; 0xffffffec
   23cf8:	b	23d64 <flatcc_json_parser_skip_constant@@Base+0xe0>
   23cfc:	ldrb	r3, [fp, #-5]
   23d00:	orr	r3, r3, #32
   23d04:	strb	r3, [fp, #-5]
   23d08:	ldrb	r3, [fp, #-5]
   23d0c:	cmp	r3, #96	; 0x60
   23d10:	bls	23d30 <flatcc_json_parser_skip_constant@@Base+0xac>
   23d14:	ldrb	r3, [fp, #-5]
   23d18:	cmp	r3, #122	; 0x7a
   23d1c:	bhi	23d30 <flatcc_json_parser_skip_constant@@Base+0xac>
   23d20:	ldr	r3, [fp, #-20]	; 0xffffffec
   23d24:	add	r3, r3, #1
   23d28:	str	r3, [fp, #-20]	; 0xffffffec
   23d2c:	b	23d64 <flatcc_json_parser_skip_constant@@Base+0xe0>
   23d30:	ldr	r3, [fp, #-20]	; 0xffffffec
   23d34:	str	r3, [fp, #-12]
   23d38:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23d3c:	ldr	r1, [fp, #-12]
   23d40:	ldr	r0, [fp, #-16]
   23d44:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   23d48:	str	r0, [fp, #-20]	; 0xffffffec
   23d4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   23d50:	ldr	r3, [fp, #-12]
   23d54:	cmp	r2, r3
   23d58:	bne	23d64 <flatcc_json_parser_skip_constant@@Base+0xe0>
   23d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   23d60:	b	23d78 <flatcc_json_parser_skip_constant@@Base+0xf4>
   23d64:	ldr	r2, [fp, #-20]	; 0xffffffec
   23d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23d6c:	cmp	r2, r3
   23d70:	bne	23ca4 <flatcc_json_parser_skip_constant@@Base+0x20>
   23d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   23d78:	mov	r0, r3
   23d7c:	sub	sp, fp, #4
   23d80:	ldr	fp, [sp]
   23d84:	add	sp, sp, #4
   23d88:	pop	{pc}		; (ldr pc, [sp], #4)

00023d8c <flatcc_json_parser_match_constant@@Base>:
   23d8c:	str	fp, [sp, #-8]!
   23d90:	str	lr, [sp, #4]
   23d94:	add	fp, sp, #4
   23d98:	sub	sp, sp, #32
   23d9c:	str	r0, [fp, #-24]	; 0xffffffe8
   23da0:	str	r1, [fp, #-28]	; 0xffffffe4
   23da4:	str	r2, [fp, #-32]	; 0xffffffe0
   23da8:	str	r3, [fp, #-36]	; 0xffffffdc
   23dac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23db0:	str	r3, [fp, #-8]
   23db4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23db8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23dbc:	add	r3, r2, r3
   23dc0:	str	r3, [fp, #-12]
   23dc4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23dc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23dcc:	sub	r3, r2, r3
   23dd0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   23dd4:	cmp	r2, r3
   23dd8:	blt	23df0 <flatcc_json_parser_match_constant@@Base+0x64>
   23ddc:	ldr	r3, [fp, #4]
   23de0:	mov	r2, #0
   23de4:	str	r2, [r3]
   23de8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23dec:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23df4:	ldr	r3, [r3, #12]
   23df8:	cmp	r3, #0
   23dfc:	beq	23f04 <flatcc_json_parser_match_constant@@Base+0x178>
   23e00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23e04:	ldr	r1, [fp, #-12]
   23e08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23e0c:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   23e10:	str	r0, [fp, #-28]	; 0xffffffe4
   23e14:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23e18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23e1c:	cmp	r2, r3
   23e20:	bne	23e38 <flatcc_json_parser_match_constant@@Base+0xac>
   23e24:	ldr	r3, [fp, #4]
   23e28:	mov	r2, #0
   23e2c:	str	r2, [r3]
   23e30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23e34:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23e38:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23e3c:	ldr	r3, [fp, #-12]
   23e40:	cmp	r2, r3
   23e44:	beq	23eb8 <flatcc_json_parser_match_constant@@Base+0x12c>
   23e48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23e4c:	ldrb	r3, [r3]
   23e50:	strb	r3, [fp, #-13]
   23e54:	ldrb	r3, [fp, #-13]
   23e58:	cmp	r3, #95	; 0x5f
   23e5c:	beq	23e6c <flatcc_json_parser_match_constant@@Base+0xe0>
   23e60:	ldrsb	r3, [fp, #-13]
   23e64:	cmp	r3, #0
   23e68:	bge	23e80 <flatcc_json_parser_match_constant@@Base+0xf4>
   23e6c:	ldr	r3, [fp, #4]
   23e70:	mov	r2, #1
   23e74:	str	r2, [r3]
   23e78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23e7c:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23e80:	ldrb	r3, [fp, #-13]
   23e84:	orr	r3, r3, #32
   23e88:	strb	r3, [fp, #-13]
   23e8c:	ldrb	r3, [fp, #-13]
   23e90:	cmp	r3, #96	; 0x60
   23e94:	bls	23eb8 <flatcc_json_parser_match_constant@@Base+0x12c>
   23e98:	ldrb	r3, [fp, #-13]
   23e9c:	cmp	r3, #122	; 0x7a
   23ea0:	bhi	23eb8 <flatcc_json_parser_match_constant@@Base+0x12c>
   23ea4:	ldr	r3, [fp, #4]
   23ea8:	mov	r2, #1
   23eac:	str	r2, [r3]
   23eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23eb4:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23eb8:	ldr	r3, [fp, #4]
   23ebc:	mov	r2, #0
   23ec0:	str	r2, [r3]
   23ec4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23ec8:	ldrb	r3, [r3]
   23ecc:	cmp	r3, #44	; 0x2c
   23ed0:	beq	23ef4 <flatcc_json_parser_match_constant@@Base+0x168>
   23ed4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23ed8:	ldrb	r3, [r3]
   23edc:	cmp	r3, #125	; 0x7d
   23ee0:	beq	23ef4 <flatcc_json_parser_match_constant@@Base+0x168>
   23ee4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23ee8:	ldrb	r3, [r3]
   23eec:	cmp	r3, #93	; 0x5d
   23ef0:	bne	23efc <flatcc_json_parser_match_constant@@Base+0x170>
   23ef4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23ef8:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23efc:	ldr	r3, [fp, #-8]
   23f00:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23f04:	ldr	r3, [fp, #-12]
   23f08:	str	r3, [fp, #-28]	; 0xffffffe4
   23f0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f10:	ldrb	r3, [r3]
   23f14:	cmp	r3, #32
   23f18:	bne	23fa0 <flatcc_json_parser_match_constant@@Base+0x214>
   23f1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f20:	add	r3, r3, #1
   23f24:	str	r3, [fp, #-28]	; 0xffffffe4
   23f28:	b	23f38 <flatcc_json_parser_match_constant@@Base+0x1ac>
   23f2c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f30:	add	r3, r3, #1
   23f34:	str	r3, [fp, #-28]	; 0xffffffe4
   23f38:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23f3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23f40:	cmp	r2, r3
   23f44:	beq	23f58 <flatcc_json_parser_match_constant@@Base+0x1cc>
   23f48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f4c:	ldrb	r3, [r3]
   23f50:	cmp	r3, #32
   23f54:	beq	23f2c <flatcc_json_parser_match_constant@@Base+0x1a0>
   23f58:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23f5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23f60:	cmp	r2, r3
   23f64:	bne	23f7c <flatcc_json_parser_match_constant@@Base+0x1f0>
   23f68:	ldr	r3, [fp, #4]
   23f6c:	mov	r2, #0
   23f70:	str	r2, [r3]
   23f74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f78:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23f7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f80:	ldrb	r3, [r3]
   23f84:	cmp	r3, #34	; 0x22
   23f88:	beq	23fa0 <flatcc_json_parser_match_constant@@Base+0x214>
   23f8c:	ldr	r3, [fp, #4]
   23f90:	mov	r2, #1
   23f94:	str	r2, [r3]
   23f98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23f9c:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23fa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23fa4:	ldrb	r3, [r3]
   23fa8:	cmp	r3, #34	; 0x22
   23fac:	beq	23fe0 <flatcc_json_parser_match_constant@@Base+0x254>
   23fb0:	cmp	r3, #92	; 0x5c
   23fb4:	bne	24010 <flatcc_json_parser_match_constant@@Base+0x284>
   23fb8:	ldr	r3, [fp, #4]
   23fbc:	mov	r2, #0
   23fc0:	str	r2, [r3]
   23fc4:	mov	r3, #18
   23fc8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23fcc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   23fd0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23fd4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   23fd8:	mov	r3, r0
   23fdc:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   23fe0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23fe4:	add	r3, r3, #1
   23fe8:	mov	r2, #0
   23fec:	mov	r1, r3
   23ff0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23ff4:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   23ff8:	str	r0, [fp, #-28]	; 0xffffffe4
   23ffc:	ldr	r3, [fp, #4]
   24000:	mov	r2, #0
   24004:	str	r2, [r3]
   24008:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2400c:	b	24020 <flatcc_json_parser_match_constant@@Base+0x294>
   24010:	ldr	r3, [fp, #4]
   24014:	mov	r2, #0
   24018:	str	r2, [r3]
   2401c:	ldr	r3, [fp, #-8]
   24020:	mov	r0, r3
   24024:	sub	sp, fp, #4
   24028:	ldr	fp, [sp]
   2402c:	add	sp, sp, #4
   24030:	pop	{pc}		; (ldr pc, [sp], #4)

00024034 <flatcc_json_parser_unmatched_symbol@@Base>:
   24034:	str	fp, [sp, #-8]!
   24038:	str	lr, [sp, #4]
   2403c:	add	fp, sp, #4
   24040:	sub	sp, sp, #16
   24044:	str	r0, [fp, #-8]
   24048:	str	r1, [fp, #-12]
   2404c:	str	r2, [fp, #-16]
   24050:	ldr	r3, [fp, #-8]
   24054:	ldr	r3, [r3, #8]
   24058:	and	r3, r3, #1
   2405c:	cmp	r3, #0
   24060:	beq	24104 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   24064:	ldr	r2, [fp, #-16]
   24068:	ldr	r1, [fp, #-12]
   2406c:	ldr	r0, [fp, #-8]
   24070:	bl	1dbec <flatcc_emitter_copy_buffer@@Base+0x4a0>
   24074:	str	r0, [fp, #-12]
   24078:	ldr	r2, [fp, #-16]
   2407c:	ldr	r1, [fp, #-12]
   24080:	ldr	r0, [fp, #-8]
   24084:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   24088:	str	r0, [fp, #-12]
   2408c:	ldr	r2, [fp, #-12]
   24090:	ldr	r3, [fp, #-16]
   24094:	cmp	r2, r3
   24098:	beq	240e8 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   2409c:	ldr	r3, [fp, #-12]
   240a0:	ldrb	r3, [r3]
   240a4:	cmp	r3, #58	; 0x3a
   240a8:	bne	240e8 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   240ac:	ldr	r3, [fp, #-12]
   240b0:	add	r3, r3, #1
   240b4:	str	r3, [fp, #-12]
   240b8:	ldr	r2, [fp, #-16]
   240bc:	ldr	r1, [fp, #-12]
   240c0:	ldr	r0, [fp, #-8]
   240c4:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   240c8:	str	r0, [fp, #-12]
   240cc:	nop	{0}
   240d0:	ldr	r2, [fp, #-16]
   240d4:	ldr	r1, [fp, #-12]
   240d8:	ldr	r0, [fp, #-8]
   240dc:	bl	2482c <flatcc_json_parser_generic_json@@Base>
   240e0:	mov	r3, r0
   240e4:	b	2411c <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   240e8:	mov	r3, #4
   240ec:	ldr	r2, [fp, #-16]
   240f0:	ldr	r1, [fp, #-12]
   240f4:	ldr	r0, [fp, #-8]
   240f8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   240fc:	mov	r3, r0
   24100:	b	2411c <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   24104:	mov	r3, #13
   24108:	ldr	r2, [fp, #-16]
   2410c:	ldr	r1, [fp, #-12]
   24110:	ldr	r0, [fp, #-8]
   24114:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24118:	mov	r3, r0
   2411c:	mov	r0, r3
   24120:	sub	sp, fp, #4
   24124:	ldr	fp, [sp]
   24128:	add	sp, sp, #4
   2412c:	pop	{pc}		; (ldr pc, [sp], #4)
   24130:	str	fp, [sp, #-8]!
   24134:	str	lr, [sp, #4]
   24138:	add	fp, sp, #4
   2413c:	sub	sp, sp, #16
   24140:	str	r0, [fp, #-8]
   24144:	str	r1, [fp, #-12]
   24148:	str	r2, [fp, #-16]
   2414c:	ldr	r2, [fp, #-12]
   24150:	ldr	r3, [fp, #-16]
   24154:	cmp	r2, r3
   24158:	bne	24164 <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   2415c:	ldr	r3, [fp, #-12]
   24160:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   24164:	ldr	r3, [fp, #-12]
   24168:	ldrb	r3, [r3]
   2416c:	cmp	r3, #45	; 0x2d
   24170:	bne	241ac <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   24174:	ldr	r3, [fp, #-12]
   24178:	add	r3, r3, #1
   2417c:	str	r3, [fp, #-12]
   24180:	ldr	r2, [fp, #-12]
   24184:	ldr	r3, [fp, #-16]
   24188:	cmp	r2, r3
   2418c:	bne	241ac <flatcc_json_parser_unmatched_symbol@@Base+0x178>
   24190:	mov	r3, #6
   24194:	ldr	r2, [fp, #-16]
   24198:	ldr	r1, [fp, #-12]
   2419c:	ldr	r0, [fp, #-8]
   241a0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   241a4:	mov	r3, r0
   241a8:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   241ac:	ldr	r3, [fp, #-12]
   241b0:	ldrb	r3, [r3]
   241b4:	cmp	r3, #48	; 0x30
   241b8:	bne	241cc <flatcc_json_parser_unmatched_symbol@@Base+0x198>
   241bc:	ldr	r3, [fp, #-12]
   241c0:	add	r3, r3, #1
   241c4:	str	r3, [fp, #-12]
   241c8:	b	24254 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   241cc:	ldr	r3, [fp, #-12]
   241d0:	ldrb	r3, [r3]
   241d4:	cmp	r3, #48	; 0x30
   241d8:	bls	241ec <flatcc_json_parser_unmatched_symbol@@Base+0x1b8>
   241dc:	ldr	r3, [fp, #-12]
   241e0:	ldrb	r3, [r3]
   241e4:	cmp	r3, #57	; 0x39
   241e8:	bls	24208 <flatcc_json_parser_unmatched_symbol@@Base+0x1d4>
   241ec:	mov	r3, #6
   241f0:	ldr	r2, [fp, #-16]
   241f4:	ldr	r1, [fp, #-12]
   241f8:	ldr	r0, [fp, #-8]
   241fc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24200:	mov	r3, r0
   24204:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   24208:	ldr	r3, [fp, #-12]
   2420c:	add	r3, r3, #1
   24210:	str	r3, [fp, #-12]
   24214:	b	24224 <flatcc_json_parser_unmatched_symbol@@Base+0x1f0>
   24218:	ldr	r3, [fp, #-12]
   2421c:	add	r3, r3, #1
   24220:	str	r3, [fp, #-12]
   24224:	ldr	r2, [fp, #-12]
   24228:	ldr	r3, [fp, #-16]
   2422c:	cmp	r2, r3
   24230:	beq	24254 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   24234:	ldr	r3, [fp, #-12]
   24238:	ldrb	r3, [r3]
   2423c:	cmp	r3, #47	; 0x2f
   24240:	bls	24254 <flatcc_json_parser_unmatched_symbol@@Base+0x220>
   24244:	ldr	r3, [fp, #-12]
   24248:	ldrb	r3, [r3]
   2424c:	cmp	r3, #57	; 0x39
   24250:	bls	24218 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   24254:	ldr	r2, [fp, #-12]
   24258:	ldr	r3, [fp, #-16]
   2425c:	cmp	r2, r3
   24260:	beq	24308 <flatcc_json_parser_unmatched_symbol@@Base+0x2d4>
   24264:	ldr	r3, [fp, #-12]
   24268:	ldrb	r3, [r3]
   2426c:	cmp	r3, #46	; 0x2e
   24270:	bne	24308 <flatcc_json_parser_unmatched_symbol@@Base+0x2d4>
   24274:	ldr	r3, [fp, #-12]
   24278:	add	r3, r3, #1
   2427c:	str	r3, [fp, #-12]
   24280:	ldr	r3, [fp, #-12]
   24284:	ldrb	r3, [r3]
   24288:	cmp	r3, #47	; 0x2f
   2428c:	bls	242a0 <flatcc_json_parser_unmatched_symbol@@Base+0x26c>
   24290:	ldr	r3, [fp, #-12]
   24294:	ldrb	r3, [r3]
   24298:	cmp	r3, #57	; 0x39
   2429c:	bls	242bc <flatcc_json_parser_unmatched_symbol@@Base+0x288>
   242a0:	mov	r3, #6
   242a4:	ldr	r2, [fp, #-16]
   242a8:	ldr	r1, [fp, #-12]
   242ac:	ldr	r0, [fp, #-8]
   242b0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   242b4:	mov	r3, r0
   242b8:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   242bc:	ldr	r3, [fp, #-12]
   242c0:	add	r3, r3, #1
   242c4:	str	r3, [fp, #-12]
   242c8:	b	242d8 <flatcc_json_parser_unmatched_symbol@@Base+0x2a4>
   242cc:	ldr	r3, [fp, #-12]
   242d0:	add	r3, r3, #1
   242d4:	str	r3, [fp, #-12]
   242d8:	ldr	r2, [fp, #-12]
   242dc:	ldr	r3, [fp, #-16]
   242e0:	cmp	r2, r3
   242e4:	beq	24308 <flatcc_json_parser_unmatched_symbol@@Base+0x2d4>
   242e8:	ldr	r3, [fp, #-12]
   242ec:	ldrb	r3, [r3]
   242f0:	cmp	r3, #47	; 0x2f
   242f4:	bls	24308 <flatcc_json_parser_unmatched_symbol@@Base+0x2d4>
   242f8:	ldr	r3, [fp, #-12]
   242fc:	ldrb	r3, [r3]
   24300:	cmp	r3, #57	; 0x39
   24304:	bls	242cc <flatcc_json_parser_unmatched_symbol@@Base+0x298>
   24308:	ldr	r2, [fp, #-12]
   2430c:	ldr	r3, [fp, #-16]
   24310:	cmp	r2, r3
   24314:	beq	24434 <flatcc_json_parser_unmatched_symbol@@Base+0x400>
   24318:	ldr	r3, [fp, #-12]
   2431c:	ldrb	r3, [r3]
   24320:	cmp	r3, #101	; 0x65
   24324:	beq	24338 <flatcc_json_parser_unmatched_symbol@@Base+0x304>
   24328:	ldr	r3, [fp, #-12]
   2432c:	ldrb	r3, [r3]
   24330:	cmp	r3, #69	; 0x45
   24334:	bne	24434 <flatcc_json_parser_unmatched_symbol@@Base+0x400>
   24338:	ldr	r3, [fp, #-12]
   2433c:	add	r3, r3, #1
   24340:	str	r3, [fp, #-12]
   24344:	ldr	r2, [fp, #-12]
   24348:	ldr	r3, [fp, #-16]
   2434c:	cmp	r2, r3
   24350:	bne	24370 <flatcc_json_parser_unmatched_symbol@@Base+0x33c>
   24354:	mov	r3, #6
   24358:	ldr	r2, [fp, #-16]
   2435c:	ldr	r1, [fp, #-12]
   24360:	ldr	r0, [fp, #-8]
   24364:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24368:	mov	r3, r0
   2436c:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   24370:	ldr	r3, [fp, #-12]
   24374:	ldrb	r3, [r3]
   24378:	cmp	r3, #43	; 0x2b
   2437c:	beq	24390 <flatcc_json_parser_unmatched_symbol@@Base+0x35c>
   24380:	ldr	r3, [fp, #-12]
   24384:	ldrb	r3, [r3]
   24388:	cmp	r3, #45	; 0x2d
   2438c:	bne	2439c <flatcc_json_parser_unmatched_symbol@@Base+0x368>
   24390:	ldr	r3, [fp, #-12]
   24394:	add	r3, r3, #1
   24398:	str	r3, [fp, #-12]
   2439c:	ldr	r2, [fp, #-12]
   243a0:	ldr	r3, [fp, #-16]
   243a4:	cmp	r2, r3
   243a8:	beq	243cc <flatcc_json_parser_unmatched_symbol@@Base+0x398>
   243ac:	ldr	r3, [fp, #-12]
   243b0:	ldrb	r3, [r3]
   243b4:	cmp	r3, #47	; 0x2f
   243b8:	bls	243cc <flatcc_json_parser_unmatched_symbol@@Base+0x398>
   243bc:	ldr	r3, [fp, #-12]
   243c0:	ldrb	r3, [r3]
   243c4:	cmp	r3, #57	; 0x39
   243c8:	bls	243e8 <flatcc_json_parser_unmatched_symbol@@Base+0x3b4>
   243cc:	mov	r3, #6
   243d0:	ldr	r2, [fp, #-16]
   243d4:	ldr	r1, [fp, #-12]
   243d8:	ldr	r0, [fp, #-8]
   243dc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   243e0:	mov	r3, r0
   243e4:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   243e8:	ldr	r3, [fp, #-12]
   243ec:	add	r3, r3, #1
   243f0:	str	r3, [fp, #-12]
   243f4:	b	24404 <flatcc_json_parser_unmatched_symbol@@Base+0x3d0>
   243f8:	ldr	r3, [fp, #-12]
   243fc:	add	r3, r3, #1
   24400:	str	r3, [fp, #-12]
   24404:	ldr	r2, [fp, #-12]
   24408:	ldr	r3, [fp, #-16]
   2440c:	cmp	r2, r3
   24410:	beq	24434 <flatcc_json_parser_unmatched_symbol@@Base+0x400>
   24414:	ldr	r3, [fp, #-12]
   24418:	ldrb	r3, [r3]
   2441c:	cmp	r3, #47	; 0x2f
   24420:	bls	24434 <flatcc_json_parser_unmatched_symbol@@Base+0x400>
   24424:	ldr	r3, [fp, #-12]
   24428:	ldrb	r3, [r3]
   2442c:	cmp	r3, #57	; 0x39
   24430:	bls	243f8 <flatcc_json_parser_unmatched_symbol@@Base+0x3c4>
   24434:	ldr	r2, [fp, #-12]
   24438:	ldr	r3, [fp, #-16]
   2443c:	cmp	r2, r3
   24440:	beq	244ac <flatcc_json_parser_unmatched_symbol@@Base+0x478>
   24444:	ldr	r3, [fp, #-12]
   24448:	ldrb	r3, [r3]
   2444c:	cmp	r3, #32
   24450:	beq	244a4 <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   24454:	cmp	r3, #32
   24458:	bgt	24478 <flatcc_json_parser_unmatched_symbol@@Base+0x444>
   2445c:	cmp	r3, #9
   24460:	blt	244ac <flatcc_json_parser_unmatched_symbol@@Base+0x478>
   24464:	cmp	r3, #11
   24468:	ble	244a4 <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   2446c:	cmp	r3, #13
   24470:	beq	244a4 <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   24474:	b	244ac <flatcc_json_parser_unmatched_symbol@@Base+0x478>
   24478:	cmp	r3, #58	; 0x3a
   2447c:	beq	244a4 <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   24480:	cmp	r3, #58	; 0x3a
   24484:	bgt	24494 <flatcc_json_parser_unmatched_symbol@@Base+0x460>
   24488:	cmp	r3, #44	; 0x2c
   2448c:	beq	244a4 <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   24490:	b	244ac <flatcc_json_parser_unmatched_symbol@@Base+0x478>
   24494:	cmp	r3, #93	; 0x5d
   24498:	beq	244a4 <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   2449c:	cmp	r3, #125	; 0x7d
   244a0:	bne	244ac <flatcc_json_parser_unmatched_symbol@@Base+0x478>
   244a4:	ldr	r3, [fp, #-12]
   244a8:	b	244c4 <flatcc_json_parser_unmatched_symbol@@Base+0x490>
   244ac:	mov	r3, #6
   244b0:	ldr	r2, [fp, #-16]
   244b4:	ldr	r1, [fp, #-12]
   244b8:	ldr	r0, [fp, #-8]
   244bc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   244c0:	mov	r3, r0
   244c4:	mov	r0, r3
   244c8:	sub	sp, fp, #4
   244cc:	ldr	fp, [sp]
   244d0:	add	sp, sp, #4
   244d4:	pop	{pc}		; (ldr pc, [sp], #4)

000244d8 <flatcc_json_parser_double@@Base>:
   244d8:	str	fp, [sp, #-8]!
   244dc:	str	lr, [sp, #4]
   244e0:	add	fp, sp, #4
   244e4:	sub	sp, sp, #24
   244e8:	str	r0, [fp, #-16]
   244ec:	str	r1, [fp, #-20]	; 0xffffffec
   244f0:	str	r2, [fp, #-24]	; 0xffffffe8
   244f4:	str	r3, [fp, #-28]	; 0xffffffe4
   244f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   244fc:	mov	r2, #0
   24500:	mov	r3, #0
   24504:	strd	r2, [r1]
   24508:	ldr	r2, [fp, #-20]	; 0xffffffec
   2450c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24510:	cmp	r2, r3
   24514:	bne	24520 <flatcc_json_parser_double@@Base+0x48>
   24518:	ldr	r3, [fp, #-20]	; 0xffffffec
   2451c:	b	24668 <flatcc_json_parser_double@@Base+0x190>
   24520:	ldr	r3, [fp, #-20]	; 0xffffffec
   24524:	str	r3, [fp, #-8]
   24528:	ldr	r3, [fp, #-20]	; 0xffffffec
   2452c:	ldrb	r3, [r3]
   24530:	cmp	r3, #45	; 0x2d
   24534:	bne	24544 <flatcc_json_parser_double@@Base+0x6c>
   24538:	ldr	r3, [fp, #-8]
   2453c:	add	r3, r3, #1
   24540:	str	r3, [fp, #-8]
   24544:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24548:	ldr	r3, [fp, #-8]
   2454c:	sub	r3, r2, r3
   24550:	cmp	r3, #1
   24554:	ble	245a8 <flatcc_json_parser_double@@Base+0xd0>
   24558:	ldr	r3, [fp, #-8]
   2455c:	ldrb	r3, [r3]
   24560:	cmp	r3, #46	; 0x2e
   24564:	beq	2458c <flatcc_json_parser_double@@Base+0xb4>
   24568:	ldr	r3, [fp, #-8]
   2456c:	ldrb	r3, [r3]
   24570:	cmp	r3, #48	; 0x30
   24574:	bne	245a8 <flatcc_json_parser_double@@Base+0xd0>
   24578:	ldr	r3, [fp, #-8]
   2457c:	add	r3, r3, #1
   24580:	ldrb	r3, [r3]
   24584:	cmp	r3, #48	; 0x30
   24588:	bne	245a8 <flatcc_json_parser_double@@Base+0xd0>
   2458c:	mov	r3, #6
   24590:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24594:	ldr	r1, [fp, #-20]	; 0xffffffec
   24598:	ldr	r0, [fp, #-16]
   2459c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   245a0:	mov	r3, r0
   245a4:	b	24668 <flatcc_json_parser_double@@Base+0x190>
   245a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   245ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   245b0:	sub	r3, r2, r3
   245b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   245b8:	mov	r1, r3
   245bc:	ldr	r0, [fp, #-20]	; 0xffffffec
   245c0:	bl	21fe8 <grisu3_diy_fp_encode_double@@Base+0x1520>
   245c4:	str	r0, [fp, #-12]
   245c8:	ldr	r3, [fp, #-12]
   245cc:	cmp	r3, #0
   245d0:	beq	245e4 <flatcc_json_parser_double@@Base+0x10c>
   245d4:	ldr	r2, [fp, #-12]
   245d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   245dc:	cmp	r2, r3
   245e0:	bne	24664 <flatcc_json_parser_double@@Base+0x18c>
   245e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   245e8:	vldr	d7, [r3]
   245ec:	vabs.f64	d7, d7
   245f0:	vldr	d6, [pc, #136]	; 24680 <flatcc_json_parser_double@@Base+0x1a8>
   245f4:	vcmp.f64	d7, d6
   245f8:	vmrs	APSR_nzcv, fpscr
   245fc:	movle	r3, #1
   24600:	movgt	r3, #0
   24604:	uxtb	r3, r3
   24608:	eor	r3, r3, #1
   2460c:	uxtb	r3, r3
   24610:	cmp	r3, #0
   24614:	beq	24620 <flatcc_json_parser_double@@Base+0x148>
   24618:	mov	r3, #1
   2461c:	b	24624 <flatcc_json_parser_double@@Base+0x14c>
   24620:	mov	r3, #0
   24624:	cmp	r3, #0
   24628:	beq	24648 <flatcc_json_parser_double@@Base+0x170>
   2462c:	mov	r3, #7
   24630:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24634:	ldr	r1, [fp, #-20]	; 0xffffffec
   24638:	ldr	r0, [fp, #-16]
   2463c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24640:	mov	r3, r0
   24644:	b	24668 <flatcc_json_parser_double@@Base+0x190>
   24648:	mov	r3, #6
   2464c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24650:	ldr	r1, [fp, #-20]	; 0xffffffec
   24654:	ldr	r0, [fp, #-16]
   24658:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2465c:	mov	r3, r0
   24660:	b	24668 <flatcc_json_parser_double@@Base+0x190>
   24664:	ldr	r3, [fp, #-12]
   24668:	mov	r0, r3
   2466c:	sub	sp, fp, #4
   24670:	ldr	fp, [sp]
   24674:	add	sp, sp, #4
   24678:	pop	{pc}		; (ldr pc, [sp], #4)
   2467c:	nop	{0}
   24680:			; <UNDEFINED> instruction: 0xffffffff
   24684:	svcvc	0x00efffff

00024688 <flatcc_json_parser_float@@Base>:
   24688:	str	fp, [sp, #-8]!
   2468c:	str	lr, [sp, #4]
   24690:	add	fp, sp, #4
   24694:	sub	sp, sp, #24
   24698:	str	r0, [fp, #-16]
   2469c:	str	r1, [fp, #-20]	; 0xffffffec
   246a0:	str	r2, [fp, #-24]	; 0xffffffe8
   246a4:	str	r3, [fp, #-28]	; 0xffffffe4
   246a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   246ac:	mov	r2, #0
   246b0:	str	r2, [r3]
   246b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   246b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   246bc:	cmp	r2, r3
   246c0:	bne	246cc <flatcc_json_parser_float@@Base+0x44>
   246c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   246c8:	b	24814 <flatcc_json_parser_float@@Base+0x18c>
   246cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   246d0:	str	r3, [fp, #-8]
   246d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   246d8:	ldrb	r3, [r3]
   246dc:	cmp	r3, #45	; 0x2d
   246e0:	bne	246f0 <flatcc_json_parser_float@@Base+0x68>
   246e4:	ldr	r3, [fp, #-8]
   246e8:	add	r3, r3, #1
   246ec:	str	r3, [fp, #-8]
   246f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   246f4:	ldr	r3, [fp, #-8]
   246f8:	sub	r3, r2, r3
   246fc:	cmp	r3, #1
   24700:	ble	24754 <flatcc_json_parser_float@@Base+0xcc>
   24704:	ldr	r3, [fp, #-8]
   24708:	ldrb	r3, [r3]
   2470c:	cmp	r3, #46	; 0x2e
   24710:	beq	24738 <flatcc_json_parser_float@@Base+0xb0>
   24714:	ldr	r3, [fp, #-8]
   24718:	ldrb	r3, [r3]
   2471c:	cmp	r3, #48	; 0x30
   24720:	bne	24754 <flatcc_json_parser_float@@Base+0xcc>
   24724:	ldr	r3, [fp, #-8]
   24728:	add	r3, r3, #1
   2472c:	ldrb	r3, [r3]
   24730:	cmp	r3, #48	; 0x30
   24734:	bne	24754 <flatcc_json_parser_float@@Base+0xcc>
   24738:	mov	r3, #6
   2473c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24740:	ldr	r1, [fp, #-20]	; 0xffffffec
   24744:	ldr	r0, [fp, #-16]
   24748:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2474c:	mov	r3, r0
   24750:	b	24814 <flatcc_json_parser_float@@Base+0x18c>
   24754:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24758:	ldr	r3, [fp, #-20]	; 0xffffffec
   2475c:	sub	r3, r2, r3
   24760:	ldr	r2, [fp, #-28]	; 0xffffffe4
   24764:	mov	r1, r3
   24768:	ldr	r0, [fp, #-20]	; 0xffffffec
   2476c:	bl	2202c <grisu3_diy_fp_encode_double@@Base+0x1564>
   24770:	str	r0, [fp, #-12]
   24774:	ldr	r3, [fp, #-12]
   24778:	cmp	r3, #0
   2477c:	beq	24790 <flatcc_json_parser_float@@Base+0x108>
   24780:	ldr	r2, [fp, #-12]
   24784:	ldr	r3, [fp, #-20]	; 0xffffffec
   24788:	cmp	r2, r3
   2478c:	bne	24810 <flatcc_json_parser_float@@Base+0x188>
   24790:	ldr	r3, [fp, #-28]	; 0xffffffe4
   24794:	vldr	s15, [r3]
   24798:	vabs.f32	s15, s15
   2479c:	vldr	s14, [pc, #132]	; 24828 <flatcc_json_parser_float@@Base+0x1a0>
   247a0:	vcmp.f32	s15, s14
   247a4:	vmrs	APSR_nzcv, fpscr
   247a8:	movle	r3, #1
   247ac:	movgt	r3, #0
   247b0:	uxtb	r3, r3
   247b4:	eor	r3, r3, #1
   247b8:	uxtb	r3, r3
   247bc:	cmp	r3, #0
   247c0:	beq	247cc <flatcc_json_parser_float@@Base+0x144>
   247c4:	mov	r3, #1
   247c8:	b	247d0 <flatcc_json_parser_float@@Base+0x148>
   247cc:	mov	r3, #0
   247d0:	cmp	r3, #0
   247d4:	beq	247f4 <flatcc_json_parser_float@@Base+0x16c>
   247d8:	mov	r3, #7
   247dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   247e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   247e4:	ldr	r0, [fp, #-16]
   247e8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   247ec:	mov	r3, r0
   247f0:	b	24814 <flatcc_json_parser_float@@Base+0x18c>
   247f4:	mov	r3, #6
   247f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   247fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   24800:	ldr	r0, [fp, #-16]
   24804:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24808:	mov	r3, r0
   2480c:	b	24814 <flatcc_json_parser_float@@Base+0x18c>
   24810:	ldr	r3, [fp, #-12]
   24814:	mov	r0, r3
   24818:	sub	sp, fp, #4
   2481c:	ldr	fp, [sp]
   24820:	add	sp, sp, #4
   24824:	pop	{pc}		; (ldr pc, [sp], #4)
   24828:	svcvc	0x007fffff

0002482c <flatcc_json_parser_generic_json@@Base>:
   2482c:	str	fp, [sp, #-8]!
   24830:	str	lr, [sp, #4]
   24834:	add	fp, sp, #4
   24838:	sub	sp, sp, #552	; 0x228
   2483c:	str	r0, [fp, #-544]	; 0xfffffde0
   24840:	str	r1, [fp, #-548]	; 0xfffffddc
   24844:	str	r2, [fp, #-552]	; 0xfffffdd8
   24848:	mov	r3, #0
   2484c:	str	r3, [fp, #-536]	; 0xfffffde8
   24850:	sub	r3, fp, #528	; 0x210
   24854:	str	r3, [fp, #-8]
   24858:	ldr	r3, [fp, #-8]
   2485c:	add	r3, r3, #512	; 0x200
   24860:	str	r3, [fp, #-12]
   24864:	ldr	r2, [fp, #-548]	; 0xfffffddc
   24868:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   2486c:	cmp	r2, r3
   24870:	bne	2487c <flatcc_json_parser_generic_json@@Base+0x50>
   24874:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24878:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   2487c:	sub	r3, fp, #528	; 0x210
   24880:	ldr	r2, [fp, #-8]
   24884:	cmp	r2, r3
   24888:	beq	24950 <flatcc_json_parser_generic_json@@Base+0x124>
   2488c:	ldr	r3, [fp, #-8]
   24890:	sub	r3, r3, #1
   24894:	ldrb	r3, [r3]
   24898:	cmp	r3, #125	; 0x7d
   2489c:	bne	24950 <flatcc_json_parser_generic_json@@Base+0x124>
   248a0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   248a4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   248a8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   248ac:	bl	1db3c <flatcc_emitter_copy_buffer@@Base+0x3f0>
   248b0:	str	r0, [fp, #-548]	; 0xfffffddc
   248b4:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   248b8:	ldr	r1, [fp, #-548]	; 0xfffffddc
   248bc:	ldr	r0, [fp, #-544]	; 0xfffffde0
   248c0:	bl	1dbec <flatcc_emitter_copy_buffer@@Base+0x4a0>
   248c4:	str	r0, [fp, #-548]	; 0xfffffddc
   248c8:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   248cc:	ldr	r1, [fp, #-548]	; 0xfffffddc
   248d0:	ldr	r0, [fp, #-544]	; 0xfffffde0
   248d4:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   248d8:	str	r0, [fp, #-548]	; 0xfffffddc
   248dc:	ldr	r2, [fp, #-548]	; 0xfffffddc
   248e0:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   248e4:	cmp	r2, r3
   248e8:	bne	24908 <flatcc_json_parser_generic_json@@Base+0xdc>
   248ec:	mov	r3, #10
   248f0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   248f4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   248f8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   248fc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24900:	mov	r3, r0
   24904:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   24908:	ldr	r3, [fp, #-548]	; 0xfffffddc
   2490c:	ldrb	r3, [r3]
   24910:	cmp	r3, #58	; 0x3a
   24914:	beq	24934 <flatcc_json_parser_generic_json@@Base+0x108>
   24918:	mov	r3, #4
   2491c:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24920:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24924:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24928:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   2492c:	mov	r3, r0
   24930:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   24934:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24938:	add	r3, r3, #1
   2493c:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24940:	mov	r1, r3
   24944:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24948:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   2494c:	str	r0, [fp, #-548]	; 0xfffffddc
   24950:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24954:	ldrb	r3, [r3]
   24958:	cmp	r3, #57	; 0x39
   2495c:	bgt	2497c <flatcc_json_parser_generic_json@@Base+0x150>
   24960:	cmp	r3, #48	; 0x30
   24964:	bge	24a34 <flatcc_json_parser_generic_json@@Base+0x208>
   24968:	cmp	r3, #34	; 0x22
   2496c:	beq	24990 <flatcc_json_parser_generic_json@@Base+0x164>
   24970:	cmp	r3, #45	; 0x2d
   24974:	beq	24a34 <flatcc_json_parser_generic_json@@Base+0x208>
   24978:	b	24b4c <flatcc_json_parser_generic_json@@Base+0x320>
   2497c:	cmp	r3, #91	; 0x5b
   24980:	beq	24a4c <flatcc_json_parser_generic_json@@Base+0x220>
   24984:	cmp	r3, #123	; 0x7b
   24988:	beq	24acc <flatcc_json_parser_generic_json@@Base+0x2a0>
   2498c:	b	24b4c <flatcc_json_parser_generic_json@@Base+0x320>
   24990:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24994:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24998:	ldr	r0, [fp, #-544]	; 0xfffffde0
   2499c:	bl	1da44 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   249a0:	str	r0, [fp, #-548]	; 0xfffffddc
   249a4:	b	249f4 <flatcc_json_parser_generic_json@@Base+0x1c8>
   249a8:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   249ac:	ldr	r1, [fp, #-548]	; 0xfffffddc
   249b0:	ldr	r0, [fp, #-544]	; 0xfffffde0
   249b4:	bl	2301c <flatcc_json_parser_string_part@@Base>
   249b8:	str	r0, [fp, #-548]	; 0xfffffddc
   249bc:	ldr	r2, [fp, #-548]	; 0xfffffddc
   249c0:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   249c4:	cmp	r2, r3
   249c8:	beq	249dc <flatcc_json_parser_generic_json@@Base+0x1b0>
   249cc:	ldr	r3, [fp, #-548]	; 0xfffffddc
   249d0:	ldrb	r3, [r3]
   249d4:	cmp	r3, #34	; 0x22
   249d8:	beq	24a18 <flatcc_json_parser_generic_json@@Base+0x1ec>
   249dc:	sub	r3, fp, #532	; 0x214
   249e0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   249e4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   249e8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   249ec:	bl	232b0 <flatcc_json_parser_string_escape@@Base>
   249f0:	str	r0, [fp, #-548]	; 0xfffffddc
   249f4:	ldr	r2, [fp, #-548]	; 0xfffffddc
   249f8:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   249fc:	cmp	r2, r3
   24a00:	beq	24a1c <flatcc_json_parser_generic_json@@Base+0x1f0>
   24a04:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24a08:	ldrb	r3, [r3]
   24a0c:	cmp	r3, #34	; 0x22
   24a10:	bne	249a8 <flatcc_json_parser_generic_json@@Base+0x17c>
   24a14:	b	24a1c <flatcc_json_parser_generic_json@@Base+0x1f0>
   24a18:	nop	{0}
   24a1c:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24a20:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24a24:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24a28:	bl	1dac0 <flatcc_emitter_copy_buffer@@Base+0x374>
   24a2c:	str	r0, [fp, #-548]	; 0xfffffddc
   24a30:	b	24ba8 <flatcc_json_parser_generic_json@@Base+0x37c>
   24a34:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24a38:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24a3c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24a40:	bl	24130 <flatcc_json_parser_unmatched_symbol@@Base+0xfc>
   24a44:	str	r0, [fp, #-548]	; 0xfffffddc
   24a48:	b	24ba8 <flatcc_json_parser_generic_json@@Base+0x37c>
   24a4c:	ldr	r2, [fp, #-8]
   24a50:	ldr	r3, [fp, #-12]
   24a54:	cmp	r2, r3
   24a58:	bne	24a78 <flatcc_json_parser_generic_json@@Base+0x24c>
   24a5c:	mov	r3, #2
   24a60:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24a64:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24a68:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24a6c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24a70:	mov	r3, r0
   24a74:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   24a78:	ldr	r3, [fp, #-8]
   24a7c:	add	r2, r3, #1
   24a80:	str	r2, [fp, #-8]
   24a84:	mov	r2, #93	; 0x5d
   24a88:	strb	r2, [r3]
   24a8c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24a90:	add	r3, r3, #1
   24a94:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24a98:	mov	r1, r3
   24a9c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24aa0:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   24aa4:	str	r0, [fp, #-548]	; 0xfffffddc
   24aa8:	ldr	r2, [fp, #-548]	; 0xfffffddc
   24aac:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   24ab0:	cmp	r2, r3
   24ab4:	beq	24864 <flatcc_json_parser_generic_json@@Base+0x38>
   24ab8:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24abc:	ldrb	r3, [r3]
   24ac0:	cmp	r3, #93	; 0x5d
   24ac4:	beq	24b94 <flatcc_json_parser_generic_json@@Base+0x368>
   24ac8:	b	24864 <flatcc_json_parser_generic_json@@Base+0x38>
   24acc:	ldr	r2, [fp, #-8]
   24ad0:	ldr	r3, [fp, #-12]
   24ad4:	cmp	r2, r3
   24ad8:	bne	24af8 <flatcc_json_parser_generic_json@@Base+0x2cc>
   24adc:	mov	r3, #2
   24ae0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24ae4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24ae8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24aec:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24af0:	mov	r3, r0
   24af4:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   24af8:	ldr	r3, [fp, #-8]
   24afc:	add	r2, r3, #1
   24b00:	str	r2, [fp, #-8]
   24b04:	mov	r2, #125	; 0x7d
   24b08:	strb	r2, [r3]
   24b0c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24b10:	add	r3, r3, #1
   24b14:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24b18:	mov	r1, r3
   24b1c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24b20:	bl	1d9a4 <flatcc_emitter_copy_buffer@@Base+0x258>
   24b24:	str	r0, [fp, #-548]	; 0xfffffddc
   24b28:	ldr	r2, [fp, #-548]	; 0xfffffddc
   24b2c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   24b30:	cmp	r2, r3
   24b34:	beq	24864 <flatcc_json_parser_generic_json@@Base+0x38>
   24b38:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24b3c:	ldrb	r3, [r3]
   24b40:	cmp	r3, #125	; 0x7d
   24b44:	beq	24b9c <flatcc_json_parser_generic_json@@Base+0x370>
   24b48:	b	24864 <flatcc_json_parser_generic_json@@Base+0x38>
   24b4c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24b50:	str	r3, [fp, #-16]
   24b54:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24b58:	ldr	r1, [fp, #-16]
   24b5c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24b60:	bl	23c84 <flatcc_json_parser_skip_constant@@Base>
   24b64:	str	r0, [fp, #-548]	; 0xfffffddc
   24b68:	ldr	r2, [fp, #-16]
   24b6c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24b70:	cmp	r2, r3
   24b74:	bne	24ba4 <flatcc_json_parser_generic_json@@Base+0x378>
   24b78:	mov	r3, #5
   24b7c:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24b80:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24b84:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24b88:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24b8c:	mov	r3, r0
   24b90:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   24b94:	nop	{0}
   24b98:	b	24c18 <flatcc_json_parser_generic_json@@Base+0x3ec>
   24b9c:	nop	{0}
   24ba0:	b	24c18 <flatcc_json_parser_generic_json@@Base+0x3ec>
   24ba4:	nop	{0}
   24ba8:	b	24c18 <flatcc_json_parser_generic_json@@Base+0x3ec>
   24bac:	ldr	r3, [fp, #-8]
   24bb0:	sub	r3, r3, #1
   24bb4:	str	r3, [fp, #-8]
   24bb8:	ldr	r3, [fp, #-8]
   24bbc:	ldrb	r3, [r3]
   24bc0:	cmp	r3, #93	; 0x5d
   24bc4:	bne	24be4 <flatcc_json_parser_generic_json@@Base+0x3b8>
   24bc8:	sub	r3, fp, #536	; 0x218
   24bcc:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24bd0:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24bd4:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24bd8:	bl	1e0a0 <flatcc_emitter_copy_buffer@@Base+0x954>
   24bdc:	str	r0, [fp, #-548]	; 0xfffffddc
   24be0:	b	24bfc <flatcc_json_parser_generic_json@@Base+0x3d0>
   24be4:	sub	r3, fp, #536	; 0x218
   24be8:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24bec:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24bf0:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24bf4:	bl	1de38 <flatcc_emitter_copy_buffer@@Base+0x6ec>
   24bf8:	str	r0, [fp, #-548]	; 0xfffffddc
   24bfc:	ldr	r3, [fp, #-536]	; 0xfffffde8
   24c00:	cmp	r3, #0
   24c04:	beq	24c18 <flatcc_json_parser_generic_json@@Base+0x3ec>
   24c08:	ldr	r3, [fp, #-8]
   24c0c:	add	r3, r3, #1
   24c10:	str	r3, [fp, #-8]
   24c14:	b	24864 <flatcc_json_parser_generic_json@@Base+0x38>
   24c18:	ldr	r2, [fp, #-548]	; 0xfffffddc
   24c1c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   24c20:	cmp	r2, r3
   24c24:	beq	24c38 <flatcc_json_parser_generic_json@@Base+0x40c>
   24c28:	sub	r3, fp, #528	; 0x210
   24c2c:	ldr	r2, [fp, #-8]
   24c30:	cmp	r2, r3
   24c34:	bne	24bac <flatcc_json_parser_generic_json@@Base+0x380>
   24c38:	ldr	r2, [fp, #-548]	; 0xfffffddc
   24c3c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   24c40:	cmp	r2, r3
   24c44:	bne	24c90 <flatcc_json_parser_generic_json@@Base+0x464>
   24c48:	sub	r3, fp, #528	; 0x210
   24c4c:	ldr	r2, [fp, #-8]
   24c50:	cmp	r2, r3
   24c54:	beq	24c90 <flatcc_json_parser_generic_json@@Base+0x464>
   24c58:	ldr	r3, [fp, #-8]
   24c5c:	sub	r3, r3, #1
   24c60:	ldrb	r3, [r3]
   24c64:	cmp	r3, #93	; 0x5d
   24c68:	bne	24c74 <flatcc_json_parser_generic_json@@Base+0x448>
   24c6c:	mov	r3, #9
   24c70:	b	24c78 <flatcc_json_parser_generic_json@@Base+0x44c>
   24c74:	mov	r3, #10
   24c78:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   24c7c:	ldr	r1, [fp, #-548]	; 0xfffffddc
   24c80:	ldr	r0, [fp, #-544]	; 0xfffffde0
   24c84:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24c88:	mov	r3, r0
   24c8c:	b	24c94 <flatcc_json_parser_generic_json@@Base+0x468>
   24c90:	ldr	r3, [fp, #-548]	; 0xfffffddc
   24c94:	mov	r0, r3
   24c98:	sub	sp, fp, #4
   24c9c:	ldr	fp, [sp]
   24ca0:	add	sp, sp, #4
   24ca4:	pop	{pc}		; (ldr pc, [sp], #4)

00024ca8 <flatcc_json_parser_integer@@Base>:
   24ca8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24cac:	strd	r6, [sp, #8]
   24cb0:	strd	r8, [sp, #16]
   24cb4:	str	fp, [sp, #24]
   24cb8:	str	lr, [sp, #28]
   24cbc:	add	fp, sp, #28
   24cc0:	sub	sp, sp, #48	; 0x30
   24cc4:	str	r0, [fp, #-56]	; 0xffffffc8
   24cc8:	str	r1, [fp, #-60]	; 0xffffffc4
   24ccc:	str	r2, [fp, #-64]	; 0xffffffc0
   24cd0:	str	r3, [fp, #-68]	; 0xffffffbc
   24cd4:	mov	r2, #0
   24cd8:	mov	r3, #0
   24cdc:	strd	r2, [fp, #-36]	; 0xffffffdc
   24ce0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   24ce4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24ce8:	cmp	r2, r3
   24cec:	bne	24cf8 <flatcc_json_parser_integer@@Base+0x50>
   24cf0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24cf4:	b	24ebc <flatcc_json_parser_integer@@Base+0x214>
   24cf8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24cfc:	str	r3, [fp, #-40]	; 0xffffffd8
   24d00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24d04:	ldrb	r3, [r3]
   24d08:	cmp	r3, #45	; 0x2d
   24d0c:	moveq	r3, #1
   24d10:	movne	r3, #0
   24d14:	uxtb	r3, r3
   24d18:	mov	r2, r3
   24d1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   24d20:	str	r2, [r3]
   24d24:	ldr	r3, [fp, #-68]	; 0xffffffbc
   24d28:	ldr	r3, [r3]
   24d2c:	mov	r2, r3
   24d30:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24d34:	add	r3, r3, r2
   24d38:	str	r3, [fp, #-60]	; 0xffffffc4
   24d3c:	b	24e08 <flatcc_json_parser_integer@@Base+0x160>
   24d40:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   24d44:	strd	r2, [fp, #-52]	; 0xffffffcc
   24d48:	ldrd	r6, [fp, #-36]	; 0xffffffdc
   24d4c:	mov	r2, r6
   24d50:	mov	r3, r7
   24d54:	mov	r0, #0
   24d58:	mov	r1, #0
   24d5c:	lsl	r1, r3, #2
   24d60:	orr	r1, r1, r2, lsr #30
   24d64:	lsl	r0, r2, #2
   24d68:	mov	r2, r0
   24d6c:	mov	r3, r1
   24d70:	adds	r2, r2, r6
   24d74:	adc	r3, r3, r7
   24d78:	adds	r1, r2, r2
   24d7c:	str	r1, [fp, #-76]	; 0xffffffb4
   24d80:	adc	r3, r3, r3
   24d84:	str	r3, [fp, #-72]	; 0xffffffb8
   24d88:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   24d8c:	mov	r0, r2
   24d90:	mov	r1, r3
   24d94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24d98:	ldrb	r3, [r3]
   24d9c:	uxtb	r2, r3
   24da0:	mov	r3, #0
   24da4:	adds	r4, r0, r2
   24da8:	adc	r5, r1, r3
   24dac:	subs	r8, r4, #48	; 0x30
   24db0:	sbc	r9, r5, #0
   24db4:	strd	r8, [fp, #-36]	; 0xffffffdc
   24db8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   24dbc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   24dc0:	cmp	r1, r3
   24dc4:	cmpeq	r0, r2
   24dc8:	bls	24dfc <flatcc_json_parser_integer@@Base+0x154>
   24dcc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   24dd0:	cmp	r3, #0
   24dd4:	beq	24de0 <flatcc_json_parser_integer@@Base+0x138>
   24dd8:	mov	r3, #8
   24ddc:	b	24de4 <flatcc_json_parser_integer@@Base+0x13c>
   24de0:	mov	r3, #7
   24de4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   24de8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   24dec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24df0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24df4:	mov	r3, r0
   24df8:	b	24ebc <flatcc_json_parser_integer@@Base+0x214>
   24dfc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e00:	add	r3, r3, #1
   24e04:	str	r3, [fp, #-60]	; 0xffffffc4
   24e08:	ldr	r2, [fp, #-60]	; 0xffffffc4
   24e0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24e10:	cmp	r2, r3
   24e14:	beq	24e38 <flatcc_json_parser_integer@@Base+0x190>
   24e18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e1c:	ldrb	r3, [r3]
   24e20:	cmp	r3, #47	; 0x2f
   24e24:	bls	24e38 <flatcc_json_parser_integer@@Base+0x190>
   24e28:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e2c:	ldrb	r3, [r3]
   24e30:	cmp	r3, #57	; 0x39
   24e34:	bls	24d40 <flatcc_json_parser_integer@@Base+0x98>
   24e38:	ldr	r2, [fp, #-60]	; 0xffffffc4
   24e3c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24e40:	cmp	r2, r3
   24e44:	bne	24e50 <flatcc_json_parser_integer@@Base+0x1a8>
   24e48:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e4c:	b	24ebc <flatcc_json_parser_integer@@Base+0x214>
   24e50:	ldr	r2, [fp, #-60]	; 0xffffffc4
   24e54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24e58:	cmp	r2, r3
   24e5c:	beq	24eac <flatcc_json_parser_integer@@Base+0x204>
   24e60:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e64:	ldrb	r3, [r3]
   24e68:	cmp	r3, #101	; 0x65
   24e6c:	beq	24e90 <flatcc_json_parser_integer@@Base+0x1e8>
   24e70:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e74:	ldrb	r3, [r3]
   24e78:	cmp	r3, #69	; 0x45
   24e7c:	beq	24e90 <flatcc_json_parser_integer@@Base+0x1e8>
   24e80:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24e84:	ldrb	r3, [r3]
   24e88:	cmp	r3, #46	; 0x2e
   24e8c:	bne	24eac <flatcc_json_parser_integer@@Base+0x204>
   24e90:	mov	r3, #12
   24e94:	ldr	r2, [fp, #-64]	; 0xffffffc0
   24e98:	ldr	r1, [fp, #-60]	; 0xffffffc4
   24e9c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   24ea0:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   24ea4:	mov	r3, r0
   24ea8:	b	24ebc <flatcc_json_parser_integer@@Base+0x214>
   24eac:	ldr	r1, [fp, #4]
   24eb0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   24eb4:	strd	r2, [r1]
   24eb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   24ebc:	mov	r0, r3
   24ec0:	sub	sp, fp, #28
   24ec4:	ldrd	r4, [sp]
   24ec8:	ldrd	r6, [sp, #8]
   24ecc:	ldrd	r8, [sp, #16]
   24ed0:	ldr	fp, [sp, #24]
   24ed4:	add	sp, sp, #28
   24ed8:	pop	{pc}		; (ldr pc, [sp], #4)

00024edc <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   24edc:	str	fp, [sp, #-8]!
   24ee0:	str	lr, [sp, #4]
   24ee4:	add	fp, sp, #4
   24ee8:	sub	sp, sp, #56	; 0x38
   24eec:	str	r0, [fp, #-40]	; 0xffffffd8
   24ef0:	str	r1, [fp, #-44]	; 0xffffffd4
   24ef4:	str	r2, [fp, #-48]	; 0xffffffd0
   24ef8:	str	r3, [fp, #-52]	; 0xffffffcc
   24efc:	ldr	r3, [fp, #4]
   24f00:	cmp	r3, #0
   24f04:	movne	r3, #1
   24f08:	moveq	r3, #0
   24f0c:	uxtb	r3, r3
   24f10:	str	r3, [fp, #-8]
   24f14:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24f18:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24f1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24f20:	bl	1da44 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   24f24:	str	r0, [fp, #-44]	; 0xffffffd4
   24f28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   24f2c:	str	r3, [fp, #-12]
   24f30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24f34:	ldr	r1, [fp, #-12]
   24f38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24f3c:	bl	2301c <flatcc_json_parser_string_part@@Base>
   24f40:	str	r0, [fp, #-44]	; 0xffffffd4
   24f44:	ldr	r2, [fp, #-44]	; 0xffffffd4
   24f48:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24f4c:	cmp	r2, r3
   24f50:	beq	25110 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   24f54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   24f58:	ldrb	r3, [r3]
   24f5c:	cmp	r3, #34	; 0x22
   24f60:	bne	25110 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x234>
   24f64:	ldr	r2, [fp, #-44]	; 0xffffffd4
   24f68:	ldr	r3, [fp, #-12]
   24f6c:	sub	r3, r2, r3
   24f70:	mov	r0, r3
   24f74:	bl	22294 <grisu3_diy_fp_encode_double@@Base+0x17cc>
   24f78:	str	r0, [fp, #-16]
   24f7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24f80:	ldr	r0, [r3]
   24f84:	mvn	r3, #0
   24f88:	mov	r2, #1
   24f8c:	mov	r1, #1
   24f90:	bl	1987c <flatcc_builder_start_vector@@Base>
   24f94:	mov	r3, r0
   24f98:	cmp	r3, #0
   24f9c:	bne	250cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f0>
   24fa0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24fa4:	ldr	r3, [r3]
   24fa8:	ldr	r1, [fp, #-16]
   24fac:	mov	r0, r3
   24fb0:	bl	18f18 <flatcc_builder_extend_vector@@Base>
   24fb4:	str	r0, [fp, #-20]	; 0xffffffec
   24fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   24fbc:	cmp	r3, #0
   24fc0:	beq	250d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   24fc4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   24fc8:	ldr	r3, [fp, #-12]
   24fcc:	sub	r3, r2, r3
   24fd0:	str	r3, [fp, #-32]	; 0xffffffe0
   24fd4:	ldr	r3, [fp, #-16]
   24fd8:	str	r3, [fp, #-28]	; 0xffffffe4
   24fdc:	sub	r1, fp, #32
   24fe0:	sub	r2, fp, #28
   24fe4:	ldr	r3, [fp, #-8]
   24fe8:	str	r3, [sp]
   24fec:	mov	r3, r1
   24ff0:	ldr	r1, [fp, #-12]
   24ff4:	ldr	r0, [fp, #-20]	; 0xffffffec
   24ff8:	bl	226d8 <grisu3_diy_fp_encode_double@@Base+0x1c10>
   24ffc:	str	r0, [fp, #-24]	; 0xffffffe8
   25000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25004:	cmp	r3, #0
   25008:	beq	25020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x144>
   2500c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25010:	ldr	r2, [fp, #-12]
   25014:	add	r3, r2, r3
   25018:	str	r3, [fp, #-44]	; 0xffffffd4
   2501c:	b	25114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   25020:	ldr	r2, [fp, #-44]	; 0xffffffd4
   25024:	ldr	r3, [fp, #-12]
   25028:	sub	r3, r2, r3
   2502c:	mov	r2, r3
   25030:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25034:	cmp	r2, r3
   25038:	beq	25050 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2503c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25040:	ldr	r2, [fp, #-12]
   25044:	add	r3, r2, r3
   25048:	str	r3, [fp, #-44]	; 0xffffffd4
   2504c:	b	25114 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   25050:	ldr	r3, [fp, #-28]	; 0xffffffe4
   25054:	ldr	r2, [fp, #-16]
   25058:	cmp	r2, r3
   2505c:	bls	25088 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   25060:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25064:	ldr	r0, [r3]
   25068:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2506c:	ldr	r2, [fp, #-16]
   25070:	sub	r3, r2, r3
   25074:	mov	r1, r3
   25078:	bl	19554 <flatcc_builder_truncate_vector@@Base>
   2507c:	mov	r3, r0
   25080:	cmp	r3, #0
   25084:	bne	250dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
   25088:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2508c:	ldr	r3, [r3]
   25090:	mov	r0, r3
   25094:	bl	1ab78 <flatcc_builder_end_vector@@Base>
   25098:	mov	r2, r0
   2509c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   250a0:	str	r2, [r3]
   250a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   250a8:	ldr	r3, [r3]
   250ac:	cmp	r3, #0
   250b0:	beq	250e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x208>
   250b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   250b8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   250bc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   250c0:	bl	1dac0 <flatcc_emitter_copy_buffer@@Base+0x374>
   250c4:	mov	r3, r0
   250c8:	b	2514c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
   250cc:	nop	{0}
   250d0:	b	250e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   250d4:	nop	{0}
   250d8:	b	250e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   250dc:	nop	{0}
   250e0:	b	250e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   250e4:	nop	{0}
   250e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   250ec:	mov	r2, #0
   250f0:	str	r2, [r3]
   250f4:	mov	r3, #33	; 0x21
   250f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   250fc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25100:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25104:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25108:	mov	r3, r0
   2510c:	b	2514c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
   25110:	nop	{0}
   25114:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25118:	mov	r2, #0
   2511c:	str	r2, [r3]
   25120:	ldr	r3, [fp, #4]
   25124:	cmp	r3, #0
   25128:	beq	25134 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x258>
   2512c:	mov	r3, #32
   25130:	b	25138 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x25c>
   25134:	mov	r3, #31
   25138:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2513c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25140:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25144:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25148:	mov	r3, r0
   2514c:	mov	r0, r3
   25150:	sub	sp, fp, #4
   25154:	ldr	fp, [sp]
   25158:	add	sp, sp, #4
   2515c:	pop	{pc}		; (ldr pc, [sp], #4)

00025160 <flatcc_json_parser_build_string@@Base>:
   25160:	str	fp, [sp, #-8]!
   25164:	str	lr, [sp, #4]
   25168:	add	fp, sp, #4
   2516c:	sub	sp, sp, #24
   25170:	str	r0, [fp, #-16]
   25174:	str	r1, [fp, #-20]	; 0xffffffec
   25178:	str	r2, [fp, #-24]	; 0xffffffe8
   2517c:	str	r3, [fp, #-28]	; 0xffffffe4
   25180:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25184:	ldr	r1, [fp, #-20]	; 0xffffffec
   25188:	ldr	r0, [fp, #-16]
   2518c:	bl	1da44 <flatcc_emitter_copy_buffer@@Base+0x2f8>
   25190:	str	r0, [fp, #-20]	; 0xffffffec
   25194:	ldr	r3, [fp, #-20]	; 0xffffffec
   25198:	str	r3, [fp, #-8]
   2519c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   251a0:	ldr	r1, [fp, #-8]
   251a4:	ldr	r0, [fp, #-16]
   251a8:	bl	2301c <flatcc_json_parser_string_part@@Base>
   251ac:	str	r0, [fp, #-20]	; 0xffffffec
   251b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   251b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   251b8:	cmp	r2, r3
   251bc:	beq	25200 <flatcc_json_parser_build_string@@Base+0xa0>
   251c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   251c4:	ldrb	r3, [r3]
   251c8:	cmp	r3, #34	; 0x22
   251cc:	bne	25200 <flatcc_json_parser_build_string@@Base+0xa0>
   251d0:	ldr	r3, [fp, #-16]
   251d4:	ldr	r0, [r3]
   251d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   251dc:	ldr	r3, [fp, #-8]
   251e0:	sub	r3, r2, r3
   251e4:	mov	r2, r3
   251e8:	ldr	r1, [fp, #-8]
   251ec:	bl	1bdbc <flatcc_builder_create_string@@Base>
   251f0:	mov	r2, r0
   251f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   251f8:	str	r2, [r3]
   251fc:	b	25320 <flatcc_json_parser_build_string@@Base+0x1c0>
   25200:	ldr	r3, [fp, #-16]
   25204:	ldr	r3, [r3]
   25208:	mov	r0, r3
   2520c:	bl	19a54 <flatcc_builder_start_string@@Base>
   25210:	mov	r3, r0
   25214:	cmp	r3, #0
   25218:	bne	25338 <flatcc_json_parser_build_string@@Base+0x1d8>
   2521c:	ldr	r3, [fp, #-16]
   25220:	ldr	r0, [r3]
   25224:	ldr	r2, [fp, #-20]	; 0xffffffec
   25228:	ldr	r3, [fp, #-8]
   2522c:	sub	r3, r2, r3
   25230:	mov	r2, r3
   25234:	ldr	r1, [fp, #-8]
   25238:	bl	1940c <flatcc_builder_append_string@@Base>
   2523c:	mov	r3, r0
   25240:	cmp	r3, #0
   25244:	beq	25338 <flatcc_json_parser_build_string@@Base+0x1d8>
   25248:	b	252e4 <flatcc_json_parser_build_string@@Base+0x184>
   2524c:	sub	r3, fp, #12
   25250:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25254:	ldr	r1, [fp, #-20]	; 0xffffffec
   25258:	ldr	r0, [fp, #-16]
   2525c:	bl	232b0 <flatcc_json_parser_string_escape@@Base>
   25260:	str	r0, [fp, #-20]	; 0xffffffec
   25264:	ldr	r3, [fp, #-16]
   25268:	ldr	r0, [r3]
   2526c:	sub	r3, fp, #12
   25270:	add	r3, r3, #1
   25274:	ldrb	r2, [fp, #-12]
   25278:	mov	r1, r3
   2527c:	bl	1940c <flatcc_builder_append_string@@Base>
   25280:	mov	r3, r0
   25284:	cmp	r3, #0
   25288:	beq	25340 <flatcc_json_parser_build_string@@Base+0x1e0>
   2528c:	ldr	r3, [fp, #-20]	; 0xffffffec
   25290:	str	r3, [fp, #-8]
   25294:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25298:	ldr	r1, [fp, #-8]
   2529c:	ldr	r0, [fp, #-16]
   252a0:	bl	2301c <flatcc_json_parser_string_part@@Base>
   252a4:	str	r0, [fp, #-20]	; 0xffffffec
   252a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   252ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   252b0:	cmp	r2, r3
   252b4:	beq	252e4 <flatcc_json_parser_build_string@@Base+0x184>
   252b8:	ldr	r3, [fp, #-16]
   252bc:	ldr	r0, [r3]
   252c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   252c4:	ldr	r3, [fp, #-8]
   252c8:	sub	r3, r2, r3
   252cc:	mov	r2, r3
   252d0:	ldr	r1, [fp, #-8]
   252d4:	bl	1940c <flatcc_builder_append_string@@Base>
   252d8:	mov	r3, r0
   252dc:	cmp	r3, #0
   252e0:	beq	25348 <flatcc_json_parser_build_string@@Base+0x1e8>
   252e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   252e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   252ec:	cmp	r2, r3
   252f0:	beq	25304 <flatcc_json_parser_build_string@@Base+0x1a4>
   252f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   252f8:	ldrb	r3, [r3]
   252fc:	cmp	r3, #34	; 0x22
   25300:	bne	2524c <flatcc_json_parser_build_string@@Base+0xec>
   25304:	ldr	r3, [fp, #-16]
   25308:	ldr	r3, [r3]
   2530c:	mov	r0, r3
   25310:	bl	1c010 <flatcc_builder_end_string@@Base>
   25314:	mov	r2, r0
   25318:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2531c:	str	r2, [r3]
   25320:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25324:	ldr	r1, [fp, #-20]	; 0xffffffec
   25328:	ldr	r0, [fp, #-16]
   2532c:	bl	1dac0 <flatcc_emitter_copy_buffer@@Base+0x374>
   25330:	mov	r3, r0
   25334:	b	2535c <flatcc_json_parser_build_string@@Base+0x1fc>
   25338:	nop	{0}
   2533c:	b	2534c <flatcc_json_parser_build_string@@Base+0x1ec>
   25340:	nop	{0}
   25344:	b	2534c <flatcc_json_parser_build_string@@Base+0x1ec>
   25348:	nop	{0}
   2534c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   25350:	mov	r2, #0
   25354:	str	r2, [r3]
   25358:	ldr	r3, [fp, #-20]	; 0xffffffec
   2535c:	mov	r0, r3
   25360:	sub	sp, fp, #4
   25364:	ldr	fp, [sp]
   25368:	add	sp, sp, #4
   2536c:	pop	{pc}		; (ldr pc, [sp], #4)

00025370 <flatcc_json_parser_prepare_unions@@Base>:
   25370:	str	fp, [sp, #-8]!
   25374:	str	lr, [sp, #4]
   25378:	add	fp, sp, #4
   2537c:	sub	sp, sp, #24
   25380:	str	r0, [fp, #-16]
   25384:	str	r1, [fp, #-20]	; 0xffffffec
   25388:	str	r2, [fp, #-24]	; 0xffffffe8
   2538c:	str	r3, [fp, #-28]	; 0xffffffe4
   25390:	ldr	r3, [fp, #-16]
   25394:	ldr	r0, [r3]
   25398:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2539c:	mov	r3, r2
   253a0:	lsl	r3, r3, #1
   253a4:	add	r3, r3, r2
   253a8:	lsl	r3, r3, #3
   253ac:	add	r3, r3, #8
   253b0:	mov	r1, r3
   253b4:	bl	17910 <flatcc_builder_enter_user_frame@@Base>
   253b8:	mov	r2, r0
   253bc:	ldr	r3, [fp, #4]
   253c0:	str	r2, [r3]
   253c4:	ldr	r3, [fp, #4]
   253c8:	ldr	r3, [r3]
   253cc:	cmp	r3, #0
   253d0:	bne	253f0 <flatcc_json_parser_prepare_unions@@Base+0x80>
   253d4:	mov	r3, #33	; 0x21
   253d8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   253dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   253e0:	ldr	r0, [fp, #-16]
   253e4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   253e8:	mov	r3, r0
   253ec:	b	25420 <flatcc_json_parser_prepare_unions@@Base+0xb0>
   253f0:	ldr	r3, [fp, #-16]
   253f4:	ldr	r2, [r3]
   253f8:	ldr	r3, [fp, #4]
   253fc:	ldr	r3, [r3]
   25400:	mov	r1, r3
   25404:	mov	r0, r2
   25408:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   2540c:	str	r0, [fp, #-8]
   25410:	ldr	r3, [fp, #-8]
   25414:	ldr	r2, [fp, #-28]	; 0xffffffe4
   25418:	str	r2, [r3]
   2541c:	ldr	r3, [fp, #-20]	; 0xffffffec
   25420:	mov	r0, r3
   25424:	sub	sp, fp, #4
   25428:	ldr	fp, [sp]
   2542c:	add	sp, sp, #4
   25430:	pop	{pc}		; (ldr pc, [sp], #4)

00025434 <flatcc_json_parser_finalize_unions@@Base>:
   25434:	str	fp, [sp, #-8]!
   25438:	str	lr, [sp, #4]
   2543c:	add	fp, sp, #4
   25440:	sub	sp, sp, #24
   25444:	str	r0, [fp, #-16]
   25448:	str	r1, [fp, #-20]	; 0xffffffec
   2544c:	str	r2, [fp, #-24]	; 0xffffffe8
   25450:	str	r3, [fp, #-28]	; 0xffffffe4
   25454:	ldr	r3, [fp, #-16]
   25458:	ldr	r3, [r3]
   2545c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   25460:	mov	r0, r3
   25464:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   25468:	str	r0, [fp, #-8]
   2546c:	ldr	r3, [fp, #-8]
   25470:	ldr	r3, [r3, #4]
   25474:	cmp	r3, #0
   25478:	beq	25494 <flatcc_json_parser_finalize_unions@@Base+0x60>
   2547c:	mov	r3, #27
   25480:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25484:	ldr	r1, [fp, #-20]	; 0xffffffec
   25488:	ldr	r0, [fp, #-16]
   2548c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25490:	str	r0, [fp, #-20]	; 0xffffffec
   25494:	ldr	r3, [fp, #-16]
   25498:	ldr	r3, [r3]
   2549c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   254a0:	mov	r0, r3
   254a4:	bl	17a8c <flatcc_builder_exit_user_frame_at@@Base>
   254a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   254ac:	mov	r0, r3
   254b0:	sub	sp, fp, #4
   254b4:	ldr	fp, [sp]
   254b8:	add	sp, sp, #4
   254bc:	pop	{pc}		; (ldr pc, [sp], #4)

000254c0 <flatcc_json_parser_union@@Base>:
   254c0:	str	r4, [sp, #-12]!
   254c4:	str	fp, [sp, #4]
   254c8:	str	lr, [sp, #8]
   254cc:	add	fp, sp, #8
   254d0:	sub	sp, sp, #44	; 0x2c
   254d4:	str	r0, [fp, #-32]	; 0xffffffe0
   254d8:	str	r1, [fp, #-36]	; 0xffffffdc
   254dc:	str	r2, [fp, #-40]	; 0xffffffd8
   254e0:	str	r3, [fp, #-44]	; 0xffffffd4
   254e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   254e8:	ldr	r3, [r3]
   254ec:	ldr	r1, [fp, #8]
   254f0:	mov	r0, r3
   254f4:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   254f8:	str	r0, [fp, #-16]
   254fc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   25500:	mov	r3, r2
   25504:	lsl	r3, r3, #1
   25508:	add	r3, r3, r2
   2550c:	lsl	r3, r3, #3
   25510:	add	r3, r3, #8
   25514:	ldr	r2, [fp, #-16]
   25518:	add	r3, r2, r3
   2551c:	str	r3, [fp, #-20]	; 0xffffffec
   25520:	ldr	r3, [fp, #-20]	; 0xffffffec
   25524:	ldr	r3, [r3]
   25528:	cmp	r3, #0
   2552c:	beq	2554c <flatcc_json_parser_union@@Base+0x8c>
   25530:	mov	r3, #28
   25534:	ldr	r2, [fp, #-40]	; 0xffffffd8
   25538:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2553c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25540:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25544:	mov	r3, r0
   25548:	b	2568c <flatcc_json_parser_union@@Base+0x1cc>
   2554c:	ldr	r3, [fp, #-20]	; 0xffffffec
   25550:	ldrb	r3, [r3, #12]
   25554:	cmp	r3, #0
   25558:	bne	255bc <flatcc_json_parser_union@@Base+0xfc>
   2555c:	ldr	r3, [fp, #-16]
   25560:	ldr	r3, [r3, #4]
   25564:	add	r2, r3, #1
   25568:	ldr	r3, [fp, #-16]
   2556c:	str	r2, [r3, #4]
   25570:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25574:	ldr	r2, [r3, #16]
   25578:	ldr	r3, [fp, #-20]	; 0xffffffec
   2557c:	str	r2, [r3, #8]
   25580:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25584:	ldr	r2, [r3, #4]
   25588:	ldr	r3, [fp, #-20]	; 0xffffffec
   2558c:	str	r2, [r3, #4]
   25590:	ldr	r3, [fp, #-20]	; 0xffffffec
   25594:	ldr	r2, [fp, #-36]	; 0xffffffdc
   25598:	str	r2, [r3]
   2559c:	ldr	r3, [fp, #-20]	; 0xffffffec
   255a0:	ldr	r3, [r3]
   255a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   255a8:	mov	r1, r3
   255ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   255b0:	bl	2482c <flatcc_json_parser_generic_json@@Base>
   255b4:	str	r0, [fp, #-36]	; 0xffffffdc
   255b8:	b	25688 <flatcc_json_parser_union@@Base+0x1c8>
   255bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   255c0:	ldrb	r3, [r3, #13]
   255c4:	strb	r3, [fp, #-28]	; 0xffffffe4
   255c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   255cc:	ldrb	r3, [r3, #13]
   255d0:	cmp	r3, #0
   255d4:	bne	255f4 <flatcc_json_parser_union@@Base+0x134>
   255d8:	mov	r3, #25
   255dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   255e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   255e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   255e8:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   255ec:	mov	r3, r0
   255f0:	b	2568c <flatcc_json_parser_union@@Base+0x1cc>
   255f4:	ldr	r3, [fp, #-16]
   255f8:	ldr	r3, [r3, #4]
   255fc:	sub	r2, r3, #1
   25600:	ldr	r3, [fp, #-16]
   25604:	str	r2, [r3, #4]
   25608:	ldr	r3, [fp, #-20]	; 0xffffffec
   2560c:	ldrb	r2, [r3, #13]
   25610:	sub	r3, fp, #28
   25614:	add	r3, r3, #4
   25618:	str	r3, [sp]
   2561c:	ldr	r4, [fp, #12]
   25620:	mov	r3, r2
   25624:	ldr	r2, [fp, #-40]	; 0xffffffd8
   25628:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2562c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25630:	blx	r4
   25634:	str	r0, [fp, #-36]	; 0xffffffdc
   25638:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2563c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25640:	cmp	r2, r3
   25644:	beq	25688 <flatcc_json_parser_union@@Base+0x1c8>
   25648:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2564c:	ldr	r0, [r3]
   25650:	ldrh	r1, [fp, #4]
   25654:	sub	r3, fp, #28
   25658:	ldm	r3, {r2, r3}
   2565c:	bl	1b1f0 <flatcc_builder_table_add_union@@Base>
   25660:	mov	r3, r0
   25664:	cmp	r3, #0
   25668:	beq	25688 <flatcc_json_parser_union@@Base+0x1c8>
   2566c:	mov	r3, #28
   25670:	ldr	r2, [fp, #-40]	; 0xffffffd8
   25674:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25678:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2567c:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25680:	mov	r3, r0
   25684:	b	2568c <flatcc_json_parser_union@@Base+0x1cc>
   25688:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2568c:	mov	r0, r3
   25690:	sub	sp, fp, #8
   25694:	ldr	r4, [sp]
   25698:	ldr	fp, [sp, #4]
   2569c:	add	sp, sp, #8
   256a0:	pop	{pc}		; (ldr pc, [sp], #4)

000256a4 <flatcc_json_parser_union_type@@Base>:
   256a4:	str	r4, [sp, #-12]!
   256a8:	str	fp, [sp, #4]
   256ac:	str	lr, [sp, #8]
   256b0:	add	fp, sp, #8
   256b4:	sub	sp, sp, #60	; 0x3c
   256b8:	str	r0, [fp, #-48]	; 0xffffffd0
   256bc:	str	r1, [fp, #-52]	; 0xffffffcc
   256c0:	str	r2, [fp, #-56]	; 0xffffffc8
   256c4:	str	r3, [fp, #-60]	; 0xffffffc4
   256c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   256cc:	ldr	r3, [r3]
   256d0:	ldr	r1, [fp, #8]
   256d4:	mov	r0, r3
   256d8:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   256dc:	str	r0, [fp, #-16]
   256e0:	ldr	r3, [fp, #-16]
   256e4:	add	r1, r3, #8
   256e8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   256ec:	mov	r3, r2
   256f0:	lsl	r3, r3, #1
   256f4:	add	r3, r3, r2
   256f8:	lsl	r3, r3, #3
   256fc:	add	r3, r1, r3
   25700:	str	r3, [fp, #-20]	; 0xffffffec
   25704:	ldr	r3, [fp, #-20]	; 0xffffffec
   25708:	ldrb	r3, [r3, #12]
   2570c:	cmp	r3, #0
   25710:	beq	25730 <flatcc_json_parser_union_type@@Base+0x8c>
   25714:	mov	r3, #28
   25718:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2571c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   25720:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25724:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25728:	mov	r3, r0
   2572c:	b	25904 <flatcc_json_parser_union_type@@Base+0x260>
   25730:	ldr	r3, [fp, #-20]	; 0xffffffec
   25734:	mov	r2, #1
   25738:	strb	r2, [r3, #12]
   2573c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25740:	str	r3, [fp, #-24]	; 0xffffffe8
   25744:	ldr	r3, [fp, #-20]	; 0xffffffec
   25748:	add	r3, r3, #13
   2574c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25750:	ldr	r1, [fp, #-24]	; 0xffffffe8
   25754:	ldr	r0, [fp, #-48]	; 0xffffffd0
   25758:	bl	1e8d8 <flatcc_emitter_copy_buffer@@Base+0x118c>
   2575c:	str	r0, [fp, #-52]	; 0xffffffcc
   25760:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25764:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25768:	cmp	r2, r3
   2576c:	bne	25794 <flatcc_json_parser_union_type@@Base+0xf0>
   25770:	ldr	r3, [fp, #-20]	; 0xffffffec
   25774:	add	r3, r3, #13
   25778:	str	r3, [sp]
   2577c:	ldr	r3, [fp, #12]
   25780:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25784:	ldr	r1, [fp, #-52]	; 0xffffffcc
   25788:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2578c:	bl	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1820>
   25790:	str	r0, [fp, #-52]	; 0xffffffcc
   25794:	ldr	r3, [fp, #-20]	; 0xffffffec
   25798:	ldr	r3, [r3]
   2579c:	cmp	r3, #0
   257a0:	bne	257d8 <flatcc_json_parser_union_type@@Base+0x134>
   257a4:	ldr	r3, [fp, #-16]
   257a8:	ldr	r3, [r3, #4]
   257ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   257b0:	ldrb	r2, [r2, #13]
   257b4:	cmp	r2, #0
   257b8:	movne	r2, #1
   257bc:	moveq	r2, #0
   257c0:	uxtb	r2, r2
   257c4:	add	r2, r3, r2
   257c8:	ldr	r3, [fp, #-16]
   257cc:	str	r2, [r3, #4]
   257d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   257d4:	b	25904 <flatcc_json_parser_union_type@@Base+0x260>
   257d8:	ldr	r3, [fp, #-16]
   257dc:	ldr	r3, [r3, #4]
   257e0:	cmp	r3, #0
   257e4:	bne	25808 <flatcc_json_parser_union_type@@Base+0x164>
   257e8:	ldr	r3, [pc, #300]	; 2591c <flatcc_json_parser_union_type@@Base+0x278>
   257ec:	add	r3, pc, r3
   257f0:	movw	r2, #965	; 0x3c5
   257f4:	ldr	r1, [pc, #292]	; 25920 <flatcc_json_parser_union_type@@Base+0x27c>
   257f8:	add	r1, pc, r1
   257fc:	ldr	r0, [pc, #288]	; 25924 <flatcc_json_parser_union_type@@Base+0x280>
   25800:	add	r0, pc, r0
   25804:	bl	124b0 <__assert_fail@plt>
   25808:	ldr	r3, [fp, #-16]
   2580c:	ldr	r3, [r3, #4]
   25810:	sub	r2, r3, #1
   25814:	ldr	r3, [fp, #-16]
   25818:	str	r2, [r3, #4]
   2581c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   25820:	ldr	r3, [r3, #16]
   25824:	str	r3, [fp, #-28]	; 0xffffffe4
   25828:	ldr	r3, [fp, #-48]	; 0xffffffd0
   2582c:	ldr	r3, [r3, #4]
   25830:	str	r3, [fp, #-32]	; 0xffffffe0
   25834:	ldr	r3, [fp, #-20]	; 0xffffffec
   25838:	ldr	r2, [r3, #8]
   2583c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   25840:	str	r2, [r3, #16]
   25844:	ldr	r3, [fp, #-20]	; 0xffffffec
   25848:	ldr	r2, [r3, #4]
   2584c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   25850:	str	r2, [r3, #4]
   25854:	ldr	r3, [fp, #-20]	; 0xffffffec
   25858:	ldrb	r3, [r3, #13]
   2585c:	strb	r3, [fp, #-40]	; 0xffffffd8
   25860:	ldr	r3, [fp, #-20]	; 0xffffffec
   25864:	ldr	r1, [r3]
   25868:	ldr	r3, [fp, #-20]	; 0xffffffec
   2586c:	ldrb	r2, [r3, #13]
   25870:	sub	r3, fp, #40	; 0x28
   25874:	add	r3, r3, #4
   25878:	str	r3, [sp]
   2587c:	ldr	r4, [fp, #16]
   25880:	mov	r3, r2
   25884:	ldr	r2, [fp, #-56]	; 0xffffffc8
   25888:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2588c:	blx	r4
   25890:	mov	r2, r0
   25894:	ldr	r3, [fp, #-56]	; 0xffffffc8
   25898:	cmp	r3, r2
   2589c:	bne	258a8 <flatcc_json_parser_union_type@@Base+0x204>
   258a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   258a4:	b	25904 <flatcc_json_parser_union_type@@Base+0x260>
   258a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   258ac:	ldr	r0, [r3]
   258b0:	ldrh	r1, [fp, #4]
   258b4:	sub	r3, fp, #40	; 0x28
   258b8:	ldm	r3, {r2, r3}
   258bc:	bl	1b1f0 <flatcc_builder_table_add_union@@Base>
   258c0:	mov	r3, r0
   258c4:	cmp	r3, #0
   258c8:	beq	258e8 <flatcc_json_parser_union_type@@Base+0x244>
   258cc:	mov	r3, #28
   258d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   258d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   258d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   258dc:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   258e0:	mov	r3, r0
   258e4:	b	25904 <flatcc_json_parser_union_type@@Base+0x260>
   258e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   258ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   258f0:	str	r2, [r3, #16]
   258f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   258f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   258fc:	str	r2, [r3, #4]
   25900:	ldr	r3, [fp, #-52]	; 0xffffffcc
   25904:	mov	r0, r3
   25908:	sub	sp, fp, #8
   2590c:	ldr	r4, [sp]
   25910:	ldr	fp, [sp, #4]
   25914:	add	sp, sp, #8
   25918:	pop	{pc}		; (ldr pc, [sp], #4)
   2591c:	andeq	r3, r0, r8, lsl #1
   25920:	muleq	r0, ip, fp
   25924:	strdeq	r2, [r0], -r8
   25928:	str	r4, [sp, #-12]!
   2592c:	str	fp, [sp, #4]
   25930:	str	lr, [sp, #8]
   25934:	add	fp, sp, #8
   25938:	sub	sp, sp, #52	; 0x34
   2593c:	str	r0, [fp, #-40]	; 0xffffffd8
   25940:	str	r1, [fp, #-44]	; 0xffffffd4
   25944:	str	r2, [fp, #-48]	; 0xffffffd0
   25948:	str	r3, [fp, #-52]	; 0xffffffcc
   2594c:	mov	r3, #0
   25950:	str	r3, [fp, #-28]	; 0xffffffe4
   25954:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25958:	ldr	r3, [r3]
   2595c:	mov	r0, r3
   25960:	bl	19938 <flatcc_builder_start_offset_vector@@Base>
   25964:	mov	r3, r0
   25968:	cmp	r3, #0
   2596c:	bne	25b2c <flatcc_json_parser_union_type@@Base+0x488>
   25970:	sub	r3, fp, #32
   25974:	ldr	r2, [fp, #-48]	; 0xffffffd0
   25978:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2597c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25980:	bl	1dfac <flatcc_emitter_copy_buffer@@Base+0x860>
   25984:	str	r0, [fp, #-44]	; 0xffffffd4
   25988:	mov	r3, #0
   2598c:	str	r3, [fp, #-16]
   25990:	b	25a78 <flatcc_json_parser_union_type@@Base+0x3d4>
   25994:	ldr	r2, [fp, #-16]
   25998:	ldr	r3, [fp, #4]
   2599c:	cmp	r2, r3
   259a0:	bne	259c0 <flatcc_json_parser_union_type@@Base+0x31c>
   259a4:	mov	r3, #30
   259a8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   259ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   259b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   259b4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   259b8:	mov	r3, r0
   259bc:	b	25b60 <flatcc_json_parser_union_type@@Base+0x4bc>
   259c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   259c4:	ldr	r3, [r3]
   259c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   259cc:	mov	r0, r3
   259d0:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   259d4:	str	r0, [fp, #-20]	; 0xffffffec
   259d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   259dc:	ldr	r3, [fp, #-16]
   259e0:	add	r3, r2, r3
   259e4:	ldrb	r2, [r3]
   259e8:	sub	r3, fp, #28
   259ec:	str	r3, [sp]
   259f0:	ldr	r4, [fp, #12]
   259f4:	mov	r3, r2
   259f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   259fc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25a00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25a04:	blx	r4
   25a08:	str	r0, [fp, #-44]	; 0xffffffd4
   25a0c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   25a10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   25a14:	cmp	r2, r3
   25a18:	bne	25a24 <flatcc_json_parser_union_type@@Base+0x380>
   25a1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   25a20:	b	25b60 <flatcc_json_parser_union_type@@Base+0x4bc>
   25a24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25a28:	ldr	r3, [r3]
   25a2c:	mov	r1, #1
   25a30:	mov	r0, r3
   25a34:	bl	1917c <flatcc_builder_extend_offset_vector@@Base>
   25a38:	str	r0, [fp, #-24]	; 0xffffffe8
   25a3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a40:	cmp	r3, #0
   25a44:	beq	25b34 <flatcc_json_parser_union_type@@Base+0x490>
   25a48:	ldr	r2, [fp, #-28]	; 0xffffffe4
   25a4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a50:	str	r2, [r3]
   25a54:	sub	r3, fp, #32
   25a58:	ldr	r2, [fp, #-48]	; 0xffffffd0
   25a5c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25a60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25a64:	bl	1e0a0 <flatcc_emitter_copy_buffer@@Base+0x954>
   25a68:	str	r0, [fp, #-44]	; 0xffffffd4
   25a6c:	ldr	r3, [fp, #-16]
   25a70:	add	r3, r3, #1
   25a74:	str	r3, [fp, #-16]
   25a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   25a7c:	cmp	r3, #0
   25a80:	bne	25994 <flatcc_json_parser_union_type@@Base+0x2f0>
   25a84:	ldr	r2, [fp, #-16]
   25a88:	ldr	r3, [fp, #4]
   25a8c:	cmp	r2, r3
   25a90:	beq	25ab0 <flatcc_json_parser_union_type@@Base+0x40c>
   25a94:	mov	r3, #30
   25a98:	ldr	r2, [fp, #-48]	; 0xffffffd0
   25a9c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25aa0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25aa4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25aa8:	mov	r3, r0
   25aac:	b	25b60 <flatcc_json_parser_union_type@@Base+0x4bc>
   25ab0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25ab4:	ldr	r3, [r3]
   25ab8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   25abc:	mov	r0, r3
   25ac0:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   25ac4:	str	r0, [fp, #-20]	; 0xffffffec
   25ac8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25acc:	ldr	r3, [r3]
   25ad0:	ldr	r1, [fp, #-20]	; 0xffffffec
   25ad4:	mov	r0, r3
   25ad8:	bl	1b0ec <flatcc_builder_end_offset_vector_for_unions@@Base>
   25adc:	mov	r3, r0
   25ae0:	str	r3, [fp, #-28]	; 0xffffffe4
   25ae4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   25ae8:	cmp	r3, #0
   25aec:	beq	25b3c <flatcc_json_parser_union_type@@Base+0x498>
   25af0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25af4:	ldr	r3, [r3]
   25af8:	ldrh	r2, [fp, #8]
   25afc:	mov	r1, r2
   25b00:	mov	r0, r3
   25b04:	bl	1c3c4 <flatcc_builder_table_add_offset@@Base>
   25b08:	str	r0, [fp, #-24]	; 0xffffffe8
   25b0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25b10:	cmp	r3, #0
   25b14:	beq	25b44 <flatcc_json_parser_union_type@@Base+0x4a0>
   25b18:	ldr	r2, [fp, #-28]	; 0xffffffe4
   25b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25b20:	str	r2, [r3]
   25b24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   25b28:	b	25b60 <flatcc_json_parser_union_type@@Base+0x4bc>
   25b2c:	nop	{0}
   25b30:	b	25b48 <flatcc_json_parser_union_type@@Base+0x4a4>
   25b34:	nop	{0}
   25b38:	b	25b48 <flatcc_json_parser_union_type@@Base+0x4a4>
   25b3c:	nop	{0}
   25b40:	b	25b48 <flatcc_json_parser_union_type@@Base+0x4a4>
   25b44:	nop	{0}
   25b48:	mov	r3, #33	; 0x21
   25b4c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   25b50:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25b54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25b58:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25b5c:	mov	r3, r0
   25b60:	mov	r0, r3
   25b64:	sub	sp, fp, #8
   25b68:	ldr	r4, [sp]
   25b6c:	ldr	fp, [sp, #4]
   25b70:	add	sp, sp, #8
   25b74:	pop	{pc}		; (ldr pc, [sp], #4)

00025b78 <flatcc_json_parser_union_vector@@Base>:
   25b78:	str	fp, [sp, #-8]!
   25b7c:	str	lr, [sp, #4]
   25b80:	add	fp, sp, #4
   25b84:	sub	sp, sp, #40	; 0x28
   25b88:	str	r0, [fp, #-16]
   25b8c:	str	r1, [fp, #-20]	; 0xffffffec
   25b90:	str	r2, [fp, #-24]	; 0xffffffe8
   25b94:	str	r3, [fp, #-28]	; 0xffffffe4
   25b98:	ldr	r3, [fp, #-16]
   25b9c:	ldr	r3, [r3]
   25ba0:	ldr	r1, [fp, #8]
   25ba4:	mov	r0, r3
   25ba8:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   25bac:	str	r0, [fp, #-8]
   25bb0:	ldr	r3, [fp, #-8]
   25bb4:	add	r1, r3, #8
   25bb8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   25bbc:	mov	r3, r2
   25bc0:	lsl	r3, r3, #1
   25bc4:	add	r3, r3, r2
   25bc8:	lsl	r3, r3, #3
   25bcc:	add	r3, r1, r3
   25bd0:	str	r3, [fp, #-12]
   25bd4:	ldr	r3, [fp, #-12]
   25bd8:	ldr	r3, [r3]
   25bdc:	cmp	r3, #0
   25be0:	beq	25c00 <flatcc_json_parser_union_vector@@Base+0x88>
   25be4:	mov	r3, #28
   25be8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25bec:	ldr	r1, [fp, #-20]	; 0xffffffec
   25bf0:	ldr	r0, [fp, #-16]
   25bf4:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25bf8:	mov	r3, r0
   25bfc:	b	25cc4 <flatcc_json_parser_union_vector@@Base+0x14c>
   25c00:	ldr	r3, [fp, #-12]
   25c04:	ldrb	r3, [r3, #12]
   25c08:	cmp	r3, #0
   25c0c:	bne	25c70 <flatcc_json_parser_union_vector@@Base+0xf8>
   25c10:	ldr	r3, [fp, #-8]
   25c14:	ldr	r3, [r3, #4]
   25c18:	add	r2, r3, #1
   25c1c:	ldr	r3, [fp, #-8]
   25c20:	str	r2, [r3, #4]
   25c24:	ldr	r3, [fp, #-16]
   25c28:	ldr	r2, [r3, #16]
   25c2c:	ldr	r3, [fp, #-12]
   25c30:	str	r2, [r3, #8]
   25c34:	ldr	r3, [fp, #-16]
   25c38:	ldr	r2, [r3, #4]
   25c3c:	ldr	r3, [fp, #-12]
   25c40:	str	r2, [r3, #4]
   25c44:	ldr	r3, [fp, #-12]
   25c48:	ldr	r2, [fp, #-20]	; 0xffffffec
   25c4c:	str	r2, [r3]
   25c50:	ldr	r3, [fp, #-12]
   25c54:	ldr	r3, [r3]
   25c58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25c5c:	mov	r1, r3
   25c60:	ldr	r0, [fp, #-16]
   25c64:	bl	2482c <flatcc_json_parser_generic_json@@Base>
   25c68:	str	r0, [fp, #-20]	; 0xffffffec
   25c6c:	b	25cc0 <flatcc_json_parser_union_vector@@Base+0x148>
   25c70:	ldr	r3, [fp, #-8]
   25c74:	ldr	r3, [r3, #4]
   25c78:	sub	r2, r3, #1
   25c7c:	ldr	r3, [fp, #-8]
   25c80:	str	r2, [r3, #4]
   25c84:	ldr	r3, [fp, #-12]
   25c88:	ldr	r1, [r3, #20]
   25c8c:	ldr	r3, [fp, #-12]
   25c90:	ldr	r3, [r3, #16]
   25c94:	ldr	r2, [fp, #12]
   25c98:	str	r2, [sp, #8]
   25c9c:	ldrh	r2, [fp, #4]
   25ca0:	str	r2, [sp, #4]
   25ca4:	str	r3, [sp]
   25ca8:	mov	r3, r1
   25cac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25cb0:	ldr	r1, [fp, #-20]	; 0xffffffec
   25cb4:	ldr	r0, [fp, #-16]
   25cb8:	bl	25928 <flatcc_json_parser_union_type@@Base+0x284>
   25cbc:	str	r0, [fp, #-20]	; 0xffffffec
   25cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   25cc4:	mov	r0, r3
   25cc8:	sub	sp, fp, #4
   25ccc:	ldr	fp, [sp]
   25cd0:	add	sp, sp, #4
   25cd4:	pop	{pc}		; (ldr pc, [sp], #4)

00025cd8 <flatcc_json_parser_union_type_vector@@Base>:
   25cd8:	str	fp, [sp, #-8]!
   25cdc:	str	lr, [sp, #4]
   25ce0:	add	fp, sp, #4
   25ce4:	sub	sp, sp, #88	; 0x58
   25ce8:	str	r0, [fp, #-64]	; 0xffffffc0
   25cec:	str	r1, [fp, #-68]	; 0xffffffbc
   25cf0:	str	r2, [fp, #-72]	; 0xffffffb8
   25cf4:	str	r3, [fp, #-76]	; 0xffffffb4
   25cf8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25cfc:	ldr	r3, [r3]
   25d00:	ldr	r1, [fp, #8]
   25d04:	mov	r0, r3
   25d08:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   25d0c:	str	r0, [fp, #-8]
   25d10:	ldr	r3, [fp, #-8]
   25d14:	add	r1, r3, #8
   25d18:	ldr	r2, [fp, #-76]	; 0xffffffb4
   25d1c:	mov	r3, r2
   25d20:	lsl	r3, r3, #1
   25d24:	add	r3, r3, r2
   25d28:	lsl	r3, r3, #3
   25d2c:	add	r3, r1, r3
   25d30:	str	r3, [fp, #-12]
   25d34:	ldr	r3, [fp, #-12]
   25d38:	ldrb	r3, [r3, #12]
   25d3c:	cmp	r3, #0
   25d40:	beq	25d60 <flatcc_json_parser_union_type_vector@@Base+0x88>
   25d44:	mov	r3, #28
   25d48:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25d4c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25d50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25d54:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25d58:	mov	r3, r0
   25d5c:	b	26138 <flatcc_json_parser_union_type_vector@@Base+0x460>
   25d60:	ldr	r3, [fp, #-12]
   25d64:	mov	r2, #1
   25d68:	strb	r2, [r3, #12]
   25d6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25d70:	ldr	r0, [r3]
   25d74:	mvn	r3, #0
   25d78:	mov	r2, #1
   25d7c:	mov	r1, #1
   25d80:	bl	1987c <flatcc_builder_start_vector@@Base>
   25d84:	mov	r3, r0
   25d88:	cmp	r3, #0
   25d8c:	bne	260fc <flatcc_json_parser_union_type_vector@@Base+0x424>
   25d90:	sub	r3, fp, #56	; 0x38
   25d94:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25d98:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25d9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25da0:	bl	1dfac <flatcc_emitter_copy_buffer@@Base+0x860>
   25da4:	str	r0, [fp, #-68]	; 0xffffffbc
   25da8:	b	25ec4 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   25dac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25db0:	ldr	r3, [r3]
   25db4:	mov	r1, #1
   25db8:	mov	r0, r3
   25dbc:	bl	18f18 <flatcc_builder_extend_vector@@Base>
   25dc0:	str	r0, [fp, #-16]
   25dc4:	ldr	r3, [fp, #-16]
   25dc8:	cmp	r3, #0
   25dcc:	beq	26104 <flatcc_json_parser_union_type_vector@@Base+0x42c>
   25dd0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   25dd4:	str	r3, [fp, #-20]	; 0xffffffec
   25dd8:	sub	r3, fp, #57	; 0x39
   25ddc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25de0:	ldr	r1, [fp, #-20]	; 0xffffffec
   25de4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25de8:	bl	1e8d8 <flatcc_emitter_copy_buffer@@Base+0x118c>
   25dec:	str	r0, [fp, #-68]	; 0xffffffbc
   25df0:	ldr	r2, [fp, #-20]	; 0xffffffec
   25df4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   25df8:	cmp	r2, r3
   25dfc:	bne	25e48 <flatcc_json_parser_union_type_vector@@Base+0x170>
   25e00:	ldr	r3, [fp, #-68]	; 0xffffffbc
   25e04:	str	r3, [fp, #-20]	; 0xffffffec
   25e08:	sub	r3, fp, #57	; 0x39
   25e0c:	str	r3, [sp]
   25e10:	ldr	r3, [fp, #12]
   25e14:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25e18:	ldr	r1, [fp, #-20]	; 0xffffffec
   25e1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25e20:	bl	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1820>
   25e24:	str	r0, [fp, #-68]	; 0xffffffbc
   25e28:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   25e30:	cmp	r2, r3
   25e34:	beq	2610c <flatcc_json_parser_union_type_vector@@Base+0x434>
   25e38:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25e3c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e40:	cmp	r2, r3
   25e44:	beq	2610c <flatcc_json_parser_union_type_vector@@Base+0x434>
   25e48:	ldrb	r2, [fp, #-57]	; 0xffffffc7
   25e4c:	ldr	r3, [fp, #20]
   25e50:	mov	r0, r2
   25e54:	blx	r3
   25e58:	mov	r3, r0
   25e5c:	cmp	r3, #0
   25e60:	bne	25e9c <flatcc_json_parser_union_type_vector@@Base+0x1c4>
   25e64:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25e68:	ldr	r3, [r3, #8]
   25e6c:	and	r3, r3, #1
   25e70:	cmp	r3, #0
   25e74:	bne	25e94 <flatcc_json_parser_union_type_vector@@Base+0x1bc>
   25e78:	mov	r3, #15
   25e7c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25e80:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25e84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25e88:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   25e8c:	mov	r3, r0
   25e90:	b	26138 <flatcc_json_parser_union_type_vector@@Base+0x460>
   25e94:	mov	r3, #0
   25e98:	strb	r3, [fp, #-57]	; 0xffffffc7
   25e9c:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   25ea0:	mov	r1, r3
   25ea4:	ldr	r0, [fp, #-16]
   25ea8:	bl	1d8c0 <flatcc_emitter_copy_buffer@@Base+0x174>
   25eac:	sub	r3, fp, #56	; 0x38
   25eb0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25eb4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25eb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25ebc:	bl	1e0a0 <flatcc_emitter_copy_buffer@@Base+0x954>
   25ec0:	str	r0, [fp, #-68]	; 0xffffffbc
   25ec4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   25ec8:	cmp	r3, #0
   25ecc:	bne	25dac <flatcc_json_parser_union_type_vector@@Base+0xd4>
   25ed0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25ed4:	ldr	r3, [r3]
   25ed8:	mov	r0, r3
   25edc:	bl	1ac50 <flatcc_builder_vector_count@@Base>
   25ee0:	str	r0, [fp, #-24]	; 0xffffffe8
   25ee4:	ldr	r3, [fp, #-12]
   25ee8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25eec:	str	r2, [r3, #16]
   25ef0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ef4:	str	r3, [fp, #-28]	; 0xffffffe4
   25ef8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25efc:	ldr	r3, [r3]
   25f00:	ldr	r1, [fp, #-28]	; 0xffffffe4
   25f04:	mov	r0, r3
   25f08:	bl	17910 <flatcc_builder_enter_user_frame@@Base>
   25f0c:	str	r0, [fp, #-32]	; 0xffffffe0
   25f10:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25f14:	ldr	r3, [r3]
   25f18:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25f1c:	mov	r0, r3
   25f20:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   25f24:	str	r0, [fp, #-36]	; 0xffffffdc
   25f28:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25f2c:	ldr	r3, [r3]
   25f30:	mov	r0, r3
   25f34:	bl	1ac7c <flatcc_builder_vector_edit@@Base>
   25f38:	mov	r3, r0
   25f3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   25f40:	mov	r1, r3
   25f44:	ldr	r0, [fp, #-36]	; 0xffffffdc
   25f48:	bl	12408 <memcpy@plt>
   25f4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25f50:	ldr	r3, [r3]
   25f54:	mov	r0, r3
   25f58:	bl	1ab78 <flatcc_builder_end_vector@@Base>
   25f5c:	str	r0, [fp, #-40]	; 0xffffffd8
   25f60:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25f64:	cmp	r3, #0
   25f68:	beq	26114 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   25f6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25f70:	ldr	r2, [r3]
   25f74:	ldrh	r3, [fp, #4]
   25f78:	sub	r3, r3, #1
   25f7c:	mov	r1, r3
   25f80:	mov	r0, r2
   25f84:	bl	1c3c4 <flatcc_builder_table_add_offset@@Base>
   25f88:	str	r0, [fp, #-44]	; 0xffffffd4
   25f8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   25f90:	cmp	r3, #0
   25f94:	beq	2611c <flatcc_json_parser_union_type_vector@@Base+0x444>
   25f98:	ldr	r3, [fp, #-44]	; 0xffffffd4
   25f9c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   25fa0:	str	r2, [r3]
   25fa4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25fa8:	ldr	r3, [r3]
   25fac:	ldr	r1, [fp, #8]
   25fb0:	mov	r0, r3
   25fb4:	bl	17b38 <flatcc_builder_get_user_frame_ptr@@Base>
   25fb8:	str	r0, [fp, #-8]
   25fbc:	ldr	r3, [fp, #-8]
   25fc0:	add	r1, r3, #8
   25fc4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   25fc8:	mov	r3, r2
   25fcc:	lsl	r3, r3, #1
   25fd0:	add	r3, r3, r2
   25fd4:	lsl	r3, r3, #3
   25fd8:	add	r3, r1, r3
   25fdc:	str	r3, [fp, #-12]
   25fe0:	ldr	r3, [fp, #-12]
   25fe4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   25fe8:	str	r2, [r3, #20]
   25fec:	ldr	r3, [fp, #-12]
   25ff0:	ldr	r3, [r3]
   25ff4:	cmp	r3, #0
   25ff8:	bne	26018 <flatcc_json_parser_union_type_vector@@Base+0x340>
   25ffc:	ldr	r3, [fp, #-8]
   26000:	ldr	r3, [r3, #4]
   26004:	add	r2, r3, #1
   26008:	ldr	r3, [fp, #-8]
   2600c:	str	r2, [r3, #4]
   26010:	ldr	r3, [fp, #-68]	; 0xffffffbc
   26014:	b	26138 <flatcc_json_parser_union_type_vector@@Base+0x460>
   26018:	ldr	r3, [fp, #-8]
   2601c:	ldr	r3, [r3, #4]
   26020:	cmp	r3, #0
   26024:	bne	26048 <flatcc_json_parser_union_type_vector@@Base+0x370>
   26028:	ldr	r3, [pc, #284]	; 2614c <flatcc_json_parser_union_type_vector@@Base+0x474>
   2602c:	add	r3, pc, r3
   26030:	movw	r2, #1122	; 0x462
   26034:	ldr	r1, [pc, #276]	; 26150 <flatcc_json_parser_union_type_vector@@Base+0x478>
   26038:	add	r1, pc, r1
   2603c:	ldr	r0, [pc, #272]	; 26154 <flatcc_json_parser_union_type_vector@@Base+0x47c>
   26040:	add	r0, pc, r0
   26044:	bl	124b0 <__assert_fail@plt>
   26048:	ldr	r3, [fp, #-8]
   2604c:	ldr	r3, [r3, #4]
   26050:	sub	r2, r3, #1
   26054:	ldr	r3, [fp, #-8]
   26058:	str	r2, [r3, #4]
   2605c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   26060:	ldr	r3, [r3, #16]
   26064:	str	r3, [fp, #-48]	; 0xffffffd0
   26068:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2606c:	ldr	r3, [r3, #4]
   26070:	str	r3, [fp, #-52]	; 0xffffffcc
   26074:	ldr	r3, [fp, #-12]
   26078:	ldr	r2, [r3, #8]
   2607c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   26080:	str	r2, [r3, #16]
   26084:	ldr	r3, [fp, #-12]
   26088:	ldr	r2, [r3, #4]
   2608c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   26090:	str	r2, [r3, #4]
   26094:	ldr	r3, [fp, #-12]
   26098:	ldr	r1, [r3]
   2609c:	ldr	r3, [fp, #16]
   260a0:	str	r3, [sp, #8]
   260a4:	ldrh	r3, [fp, #4]
   260a8:	str	r3, [sp, #4]
   260ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   260b0:	str	r3, [sp]
   260b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   260b8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   260bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   260c0:	bl	25928 <flatcc_json_parser_union_type@@Base+0x284>
   260c4:	mov	r2, r0
   260c8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   260cc:	cmp	r3, r2
   260d0:	bne	260dc <flatcc_json_parser_union_type_vector@@Base+0x404>
   260d4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   260d8:	b	26138 <flatcc_json_parser_union_type_vector@@Base+0x460>
   260dc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   260e0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   260e4:	str	r2, [r3, #16]
   260e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   260ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   260f0:	str	r2, [r3, #4]
   260f4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   260f8:	b	26138 <flatcc_json_parser_union_type_vector@@Base+0x460>
   260fc:	nop	{0}
   26100:	b	26120 <flatcc_json_parser_union_type_vector@@Base+0x448>
   26104:	nop	{0}
   26108:	b	26120 <flatcc_json_parser_union_type_vector@@Base+0x448>
   2610c:	nop	{0}
   26110:	b	26120 <flatcc_json_parser_union_type_vector@@Base+0x448>
   26114:	nop	{0}
   26118:	b	26120 <flatcc_json_parser_union_type_vector@@Base+0x448>
   2611c:	nop	{0}
   26120:	mov	r3, #33	; 0x21
   26124:	ldr	r2, [fp, #-72]	; 0xffffffb8
   26128:	ldr	r1, [fp, #-68]	; 0xffffffbc
   2612c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   26130:	bl	22fa8 <flatcc_json_parser_set_error@@Base>
   26134:	mov	r3, r0
   26138:	mov	r0, r3
   2613c:	sub	sp, fp, #4
   26140:	ldr	fp, [sp]
   26144:	add	sp, sp, #4
   26148:	pop	{pc}		; (ldr pc, [sp], #4)
   2614c:	andeq	r2, r0, r8, ror #16
   26150:	andeq	r2, r0, ip, asr r3
   26154:			; <UNDEFINED> instruction: 0x000023b8

00026158 <flatcc_json_parser_table_as_root@@Base>:
   26158:	str	r4, [sp, #-12]!
   2615c:	str	fp, [sp, #4]
   26160:	str	lr, [sp, #8]
   26164:	add	fp, sp, #8
   26168:	sub	sp, sp, #84	; 0x54
   2616c:	str	r0, [fp, #-72]	; 0xffffffb8
   26170:	str	r1, [fp, #-76]	; 0xffffffb4
   26174:	str	r2, [fp, #-80]	; 0xffffffb0
   26178:	str	r3, [fp, #-84]	; 0xffffffac
   2617c:	ldr	r3, [fp, #4]
   26180:	asr	r3, r3, #1
   26184:	and	r3, r3, #2
   26188:	str	r3, [fp, #-16]
   2618c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   26190:	cmp	r3, #0
   26194:	bne	261a0 <flatcc_json_parser_table_as_root@@Base+0x48>
   26198:	sub	r3, fp, #60	; 0x3c
   2619c:	b	261a4 <flatcc_json_parser_table_as_root@@Base+0x4c>
   261a0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   261a4:	str	r3, [fp, #-76]	; 0xffffffb4
   261a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   261ac:	ldr	r3, [fp, #-84]	; 0xffffffac
   261b0:	add	r2, r2, r3
   261b4:	ldr	r3, [fp, #4]
   261b8:	str	r3, [sp]
   261bc:	mov	r3, r2
   261c0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   261c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   261c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   261cc:	bl	1d90c <flatcc_emitter_copy_buffer@@Base+0x1c0>
   261d0:	ldr	r3, [fp, #-16]
   261d4:	mov	r2, #0
   261d8:	ldr	r1, [fp, #8]
   261dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   261e0:	bl	18a18 <flatcc_builder_start_buffer@@Base>
   261e4:	mov	r3, r0
   261e8:	cmp	r3, #0
   261ec:	beq	261f8 <flatcc_json_parser_table_as_root@@Base+0xa0>
   261f0:	mvn	r3, #0
   261f4:	b	26268 <flatcc_json_parser_table_as_root@@Base+0x110>
   261f8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   261fc:	ldr	r3, [fp, #-84]	; 0xffffffac
   26200:	add	r2, r2, r3
   26204:	sub	r3, fp, #64	; 0x40
   26208:	ldr	r4, [fp, #12]
   2620c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   26210:	ldr	r0, [fp, #-76]	; 0xffffffb4
   26214:	blx	r4
   26218:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2621c:	ldr	r3, [r3, #24]
   26220:	cmp	r3, #0
   26224:	beq	26234 <flatcc_json_parser_table_as_root@@Base+0xdc>
   26228:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2622c:	ldr	r3, [r3, #24]
   26230:	b	26268 <flatcc_json_parser_table_as_root@@Base+0x110>
   26234:	ldr	r3, [fp, #-64]	; 0xffffffc0
   26238:	mov	r1, r3
   2623c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26240:	bl	18b88 <flatcc_builder_end_buffer@@Base>
   26244:	mov	r3, r0
   26248:	cmp	r3, #0
   2624c:	bne	26258 <flatcc_json_parser_table_as_root@@Base+0x100>
   26250:	mvn	r3, #0
   26254:	b	26268 <flatcc_json_parser_table_as_root@@Base+0x110>
   26258:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2625c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   26260:	str	r2, [r3, #40]	; 0x28
   26264:	mov	r3, #0
   26268:	mov	r0, r3
   2626c:	sub	sp, fp, #8
   26270:	ldr	r4, [sp]
   26274:	ldr	fp, [sp, #4]
   26278:	add	sp, sp, #8
   2627c:	pop	{pc}		; (ldr pc, [sp], #4)

00026280 <flatcc_json_parser_struct_as_root@@Base>:
   26280:	str	r4, [sp, #-12]!
   26284:	str	fp, [sp, #4]
   26288:	str	lr, [sp, #8]
   2628c:	add	fp, sp, #8
   26290:	sub	sp, sp, #84	; 0x54
   26294:	str	r0, [fp, #-72]	; 0xffffffb8
   26298:	str	r1, [fp, #-76]	; 0xffffffb4
   2629c:	str	r2, [fp, #-80]	; 0xffffffb0
   262a0:	str	r3, [fp, #-84]	; 0xffffffac
   262a4:	ldr	r3, [fp, #4]
   262a8:	asr	r3, r3, #1
   262ac:	and	r3, r3, #2
   262b0:	str	r3, [fp, #-16]
   262b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   262b8:	cmp	r3, #0
   262bc:	bne	262c8 <flatcc_json_parser_struct_as_root@@Base+0x48>
   262c0:	sub	r3, fp, #60	; 0x3c
   262c4:	b	262cc <flatcc_json_parser_struct_as_root@@Base+0x4c>
   262c8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   262cc:	str	r3, [fp, #-76]	; 0xffffffb4
   262d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   262d4:	ldr	r3, [fp, #-84]	; 0xffffffac
   262d8:	add	r2, r2, r3
   262dc:	ldr	r3, [fp, #4]
   262e0:	str	r3, [sp]
   262e4:	mov	r3, r2
   262e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   262ec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   262f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   262f4:	bl	1d90c <flatcc_emitter_copy_buffer@@Base+0x1c0>
   262f8:	ldr	r3, [fp, #-16]
   262fc:	mov	r2, #0
   26300:	ldr	r1, [fp, #8]
   26304:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26308:	bl	18a18 <flatcc_builder_start_buffer@@Base>
   2630c:	mov	r3, r0
   26310:	cmp	r3, #0
   26314:	beq	26320 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   26318:	mvn	r3, #0
   2631c:	b	26390 <flatcc_json_parser_struct_as_root@@Base+0x110>
   26320:	ldr	r2, [fp, #-80]	; 0xffffffb0
   26324:	ldr	r3, [fp, #-84]	; 0xffffffac
   26328:	add	r2, r2, r3
   2632c:	sub	r3, fp, #64	; 0x40
   26330:	ldr	r4, [fp, #12]
   26334:	ldr	r1, [fp, #-80]	; 0xffffffb0
   26338:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2633c:	blx	r4
   26340:	ldr	r3, [fp, #-76]	; 0xffffffb4
   26344:	ldr	r3, [r3, #24]
   26348:	cmp	r3, #0
   2634c:	beq	2635c <flatcc_json_parser_struct_as_root@@Base+0xdc>
   26350:	ldr	r3, [fp, #-76]	; 0xffffffb4
   26354:	ldr	r3, [r3, #24]
   26358:	b	26390 <flatcc_json_parser_struct_as_root@@Base+0x110>
   2635c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   26360:	mov	r1, r3
   26364:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26368:	bl	18b88 <flatcc_builder_end_buffer@@Base>
   2636c:	mov	r3, r0
   26370:	cmp	r3, #0
   26374:	bne	26380 <flatcc_json_parser_struct_as_root@@Base+0x100>
   26378:	mvn	r3, #0
   2637c:	b	26390 <flatcc_json_parser_struct_as_root@@Base+0x110>
   26380:	ldr	r3, [fp, #-76]	; 0xffffffb4
   26384:	ldr	r2, [fp, #-80]	; 0xffffffb0
   26388:	str	r2, [r3, #40]	; 0x28
   2638c:	mov	r3, #0
   26390:	mov	r0, r3
   26394:	sub	sp, fp, #8
   26398:	ldr	r4, [sp]
   2639c:	ldr	fp, [sp, #4]
   263a0:	add	sp, sp, #8
   263a4:	pop	{pc}		; (ldr pc, [sp], #4)
   263a8:	eor	r1, r1, #-2147483648	; 0x80000000
   263ac:	b	263b4 <flatcc_json_parser_struct_as_root@@Base+0x134>
   263b0:	eor	r3, r3, #-2147483648	; 0x80000000
   263b4:	push	{r4, r5, lr}
   263b8:	lsl	r4, r1, #1
   263bc:	lsl	r5, r3, #1
   263c0:	teq	r4, r5
   263c4:	teqeq	r0, r2
   263c8:	orrsne	ip, r4, r0
   263cc:	orrsne	ip, r5, r2
   263d0:	mvnsne	ip, r4, asr #21
   263d4:	mvnsne	ip, r5, asr #21
   263d8:	beq	265c4 <flatcc_json_parser_struct_as_root@@Base+0x344>
   263dc:	lsr	r4, r4, #21
   263e0:	rsbs	r5, r4, r5, lsr #21
   263e4:	rsblt	r5, r5, #0
   263e8:	ble	26408 <flatcc_json_parser_struct_as_root@@Base+0x188>
   263ec:	add	r4, r4, r5
   263f0:	eor	r2, r0, r2
   263f4:	eor	r3, r1, r3
   263f8:	eor	r0, r2, r0
   263fc:	eor	r1, r3, r1
   26400:	eor	r2, r0, r2
   26404:	eor	r3, r1, r3
   26408:	cmp	r5, #54	; 0x36
   2640c:	pophi	{r4, r5, pc}
   26410:	tst	r1, #-2147483648	; 0x80000000
   26414:	lsl	r1, r1, #12
   26418:	mov	ip, #1048576	; 0x100000
   2641c:	orr	r1, ip, r1, lsr #12
   26420:	beq	2642c <flatcc_json_parser_struct_as_root@@Base+0x1ac>
   26424:	rsbs	r0, r0, #0
   26428:	rsc	r1, r1, #0
   2642c:	tst	r3, #-2147483648	; 0x80000000
   26430:	lsl	r3, r3, #12
   26434:	orr	r3, ip, r3, lsr #12
   26438:	beq	26444 <flatcc_json_parser_struct_as_root@@Base+0x1c4>
   2643c:	rsbs	r2, r2, #0
   26440:	rsc	r3, r3, #0
   26444:	teq	r4, r5
   26448:	beq	265ac <flatcc_json_parser_struct_as_root@@Base+0x32c>
   2644c:	sub	r4, r4, #1
   26450:	rsbs	lr, r5, #32
   26454:	blt	26470 <flatcc_json_parser_struct_as_root@@Base+0x1f0>
   26458:	lsl	ip, r2, lr
   2645c:	adds	r0, r0, r2, lsr r5
   26460:	adc	r1, r1, #0
   26464:	adds	r0, r0, r3, lsl lr
   26468:	adcs	r1, r1, r3, asr r5
   2646c:	b	2648c <flatcc_json_parser_struct_as_root@@Base+0x20c>
   26470:	sub	r5, r5, #32
   26474:	add	lr, lr, #32
   26478:	cmp	r2, #1
   2647c:	lsl	ip, r3, lr
   26480:	orrcs	ip, ip, #2
   26484:	adds	r0, r0, r3, asr r5
   26488:	adcs	r1, r1, r3, asr #31
   2648c:	and	r5, r1, #-2147483648	; 0x80000000
   26490:	bpl	264a0 <flatcc_json_parser_struct_as_root@@Base+0x220>
   26494:	rsbs	ip, ip, #0
   26498:	rscs	r0, r0, #0
   2649c:	rsc	r1, r1, #0
   264a0:	cmp	r1, #1048576	; 0x100000
   264a4:	bcc	264e4 <flatcc_json_parser_struct_as_root@@Base+0x264>
   264a8:	cmp	r1, #2097152	; 0x200000
   264ac:	bcc	264cc <flatcc_json_parser_struct_as_root@@Base+0x24c>
   264b0:	lsrs	r1, r1, #1
   264b4:	rrxs	r0, r0
   264b8:	rrx	ip, ip
   264bc:	add	r4, r4, #1
   264c0:	lsl	r2, r4, #21
   264c4:	cmn	r2, #4194304	; 0x400000
   264c8:	bcs	26624 <flatcc_json_parser_struct_as_root@@Base+0x3a4>
   264cc:	cmp	ip, #-2147483648	; 0x80000000
   264d0:	lsrseq	ip, r0, #1
   264d4:	adcs	r0, r0, #0
   264d8:	adc	r1, r1, r4, lsl #20
   264dc:	orr	r1, r1, r5
   264e0:	pop	{r4, r5, pc}
   264e4:	lsls	ip, ip, #1
   264e8:	adcs	r0, r0, r0
   264ec:	adc	r1, r1, r1
   264f0:	tst	r1, #1048576	; 0x100000
   264f4:	sub	r4, r4, #1
   264f8:	bne	264cc <flatcc_json_parser_struct_as_root@@Base+0x24c>
   264fc:	teq	r1, #0
   26500:	moveq	r1, r0
   26504:	moveq	r0, #0
   26508:	clz	r3, r1
   2650c:	addeq	r3, r3, #32
   26510:	sub	r3, r3, #11
   26514:	subs	r2, r3, #32
   26518:	bge	2653c <flatcc_json_parser_struct_as_root@@Base+0x2bc>
   2651c:	adds	r2, r2, #12
   26520:	ble	26538 <flatcc_json_parser_struct_as_root@@Base+0x2b8>
   26524:	add	ip, r2, #20
   26528:	rsb	r2, r2, #12
   2652c:	lsl	r0, r1, ip
   26530:	lsr	r1, r1, r2
   26534:	b	2654c <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   26538:	add	r2, r2, #20
   2653c:	rsble	ip, r2, #32
   26540:	lsl	r1, r1, r2
   26544:	orrle	r1, r1, r0, lsr ip
   26548:	lslle	r0, r0, r2
   2654c:	subs	r4, r4, r3
   26550:	addge	r1, r1, r4, lsl #20
   26554:	orrge	r1, r1, r5
   26558:	popge	{r4, r5, pc}
   2655c:	mvn	r4, r4
   26560:	subs	r4, r4, #31
   26564:	bge	265a0 <flatcc_json_parser_struct_as_root@@Base+0x320>
   26568:	adds	r4, r4, #12
   2656c:	bgt	26588 <flatcc_json_parser_struct_as_root@@Base+0x308>
   26570:	add	r4, r4, #20
   26574:	rsb	r2, r4, #32
   26578:	lsr	r0, r0, r4
   2657c:	orr	r0, r0, r1, lsl r2
   26580:	orr	r1, r5, r1, lsr r4
   26584:	pop	{r4, r5, pc}
   26588:	rsb	r4, r4, #12
   2658c:	rsb	r2, r4, #32
   26590:	lsr	r0, r0, r2
   26594:	orr	r0, r0, r1, lsl r4
   26598:	mov	r1, r5
   2659c:	pop	{r4, r5, pc}
   265a0:	lsr	r0, r1, r4
   265a4:	mov	r1, r5
   265a8:	pop	{r4, r5, pc}
   265ac:	teq	r4, #0
   265b0:	eor	r3, r3, #1048576	; 0x100000
   265b4:	eoreq	r1, r1, #1048576	; 0x100000
   265b8:	addeq	r4, r4, #1
   265bc:	subne	r5, r5, #1
   265c0:	b	2644c <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   265c4:	mvns	ip, r4, asr #21
   265c8:	mvnsne	ip, r5, asr #21
   265cc:	beq	26634 <flatcc_json_parser_struct_as_root@@Base+0x3b4>
   265d0:	teq	r4, r5
   265d4:	teqeq	r0, r2
   265d8:	beq	265ec <flatcc_json_parser_struct_as_root@@Base+0x36c>
   265dc:	orrs	ip, r4, r0
   265e0:	moveq	r1, r3
   265e4:	moveq	r0, r2
   265e8:	pop	{r4, r5, pc}
   265ec:	teq	r1, r3
   265f0:	movne	r1, #0
   265f4:	movne	r0, #0
   265f8:	popne	{r4, r5, pc}
   265fc:	lsrs	ip, r4, #21
   26600:	bne	26614 <flatcc_json_parser_struct_as_root@@Base+0x394>
   26604:	lsls	r0, r0, #1
   26608:	adcs	r1, r1, r1
   2660c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   26610:	pop	{r4, r5, pc}
   26614:	adds	r4, r4, #4194304	; 0x400000
   26618:	addcc	r1, r1, #1048576	; 0x100000
   2661c:	popcc	{r4, r5, pc}
   26620:	and	r5, r1, #-2147483648	; 0x80000000
   26624:	orr	r1, r5, #2130706432	; 0x7f000000
   26628:	orr	r1, r1, #15728640	; 0xf00000
   2662c:	mov	r0, #0
   26630:	pop	{r4, r5, pc}
   26634:	mvns	ip, r4, asr #21
   26638:	movne	r1, r3
   2663c:	movne	r0, r2
   26640:	mvnseq	ip, r5, asr #21
   26644:	movne	r3, r1
   26648:	movne	r2, r0
   2664c:	orrs	r4, r0, r1, lsl #12
   26650:	orrseq	r5, r2, r3, lsl #12
   26654:	teqeq	r1, r3
   26658:	orrne	r1, r1, #524288	; 0x80000
   2665c:	pop	{r4, r5, pc}
   26660:	teq	r0, #0
   26664:	moveq	r1, #0
   26668:	bxeq	lr
   2666c:	push	{r4, r5, lr}
   26670:	mov	r4, #1024	; 0x400
   26674:	add	r4, r4, #50	; 0x32
   26678:	mov	r5, #0
   2667c:	mov	r1, #0
   26680:	b	264fc <flatcc_json_parser_struct_as_root@@Base+0x27c>
   26684:	teq	r0, #0
   26688:	moveq	r1, #0
   2668c:	bxeq	lr
   26690:	push	{r4, r5, lr}
   26694:	mov	r4, #1024	; 0x400
   26698:	add	r4, r4, #50	; 0x32
   2669c:	ands	r5, r0, #-2147483648	; 0x80000000
   266a0:	rsbmi	r0, r0, #0
   266a4:	mov	r1, #0
   266a8:	b	264fc <flatcc_json_parser_struct_as_root@@Base+0x27c>
   266ac:	lsls	r2, r0, #1
   266b0:	asr	r1, r2, #3
   266b4:	rrx	r1, r1
   266b8:	lsl	r0, r2, #28
   266bc:	andsne	r3, r2, #-16777216	; 0xff000000
   266c0:	teqne	r3, #-16777216	; 0xff000000
   266c4:	eorne	r1, r1, #939524096	; 0x38000000
   266c8:	bxne	lr
   266cc:	bics	r2, r2, #-16777216	; 0xff000000
   266d0:	bxeq	lr
   266d4:	teq	r3, #-16777216	; 0xff000000
   266d8:	orreq	r1, r1, #524288	; 0x80000
   266dc:	bxeq	lr
   266e0:	push	{r4, r5, lr}
   266e4:	mov	r4, #896	; 0x380
   266e8:	and	r5, r1, #-2147483648	; 0x80000000
   266ec:	bic	r1, r1, #-2147483648	; 0x80000000
   266f0:	b	264fc <flatcc_json_parser_struct_as_root@@Base+0x27c>
   266f4:	orrs	r2, r0, r1
   266f8:	bxeq	lr
   266fc:	push	{r4, r5, lr}
   26700:	mov	r5, #0
   26704:	b	26724 <flatcc_json_parser_struct_as_root@@Base+0x4a4>
   26708:	orrs	r2, r0, r1
   2670c:	bxeq	lr
   26710:	push	{r4, r5, lr}
   26714:	ands	r5, r1, #-2147483648	; 0x80000000
   26718:	bpl	26724 <flatcc_json_parser_struct_as_root@@Base+0x4a4>
   2671c:	rsbs	r0, r0, #0
   26720:	rsc	r1, r1, #0
   26724:	mov	r4, #1024	; 0x400
   26728:	add	r4, r4, #50	; 0x32
   2672c:	lsrs	ip, r1, #22
   26730:	beq	264a0 <flatcc_json_parser_struct_as_root@@Base+0x220>
   26734:	mov	r2, #3
   26738:	lsrs	ip, ip, #3
   2673c:	addne	r2, r2, #3
   26740:	lsrs	ip, ip, #3
   26744:	addne	r2, r2, #3
   26748:	add	r2, r2, ip, lsr #3
   2674c:	rsb	r3, r2, #32
   26750:	lsl	ip, r0, r3
   26754:	lsr	r0, r0, r2
   26758:	orr	r0, r0, r1, lsl r3
   2675c:	lsr	r1, r1, r2
   26760:	add	r4, r4, r2
   26764:	b	264a0 <flatcc_json_parser_struct_as_root@@Base+0x220>
   26768:	eor	r0, r0, #-2147483648	; 0x80000000
   2676c:	b	26774 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   26770:	eor	r1, r1, #-2147483648	; 0x80000000
   26774:	lsls	r2, r0, #1
   26778:	lslsne	r3, r1, #1
   2677c:	teqne	r2, r3
   26780:	mvnsne	ip, r2, asr #24
   26784:	mvnsne	ip, r3, asr #24
   26788:	beq	26880 <flatcc_json_parser_struct_as_root@@Base+0x600>
   2678c:	lsr	r2, r2, #24
   26790:	rsbs	r3, r2, r3, lsr #24
   26794:	addgt	r2, r2, r3
   26798:	eorgt	r1, r0, r1
   2679c:	eorgt	r0, r1, r0
   267a0:	eorgt	r1, r0, r1
   267a4:	rsblt	r3, r3, #0
   267a8:	cmp	r3, #25
   267ac:	bxhi	lr
   267b0:	tst	r0, #-2147483648	; 0x80000000
   267b4:	orr	r0, r0, #8388608	; 0x800000
   267b8:	bic	r0, r0, #-16777216	; 0xff000000
   267bc:	rsbne	r0, r0, #0
   267c0:	tst	r1, #-2147483648	; 0x80000000
   267c4:	orr	r1, r1, #8388608	; 0x800000
   267c8:	bic	r1, r1, #-16777216	; 0xff000000
   267cc:	rsbne	r1, r1, #0
   267d0:	teq	r2, r3
   267d4:	beq	26868 <flatcc_json_parser_struct_as_root@@Base+0x5e8>
   267d8:	sub	r2, r2, #1
   267dc:	adds	r0, r0, r1, asr r3
   267e0:	rsb	r3, r3, #32
   267e4:	lsl	r1, r1, r3
   267e8:	and	r3, r0, #-2147483648	; 0x80000000
   267ec:	bpl	267f8 <flatcc_json_parser_struct_as_root@@Base+0x578>
   267f0:	rsbs	r1, r1, #0
   267f4:	rsc	r0, r0, #0
   267f8:	cmp	r0, #8388608	; 0x800000
   267fc:	bcc	26830 <flatcc_json_parser_struct_as_root@@Base+0x5b0>
   26800:	cmp	r0, #16777216	; 0x1000000
   26804:	bcc	2681c <flatcc_json_parser_struct_as_root@@Base+0x59c>
   26808:	lsrs	r0, r0, #1
   2680c:	rrx	r1, r1
   26810:	add	r2, r2, #1
   26814:	cmp	r2, #254	; 0xfe
   26818:	bcs	268d4 <flatcc_json_parser_struct_as_root@@Base+0x654>
   2681c:	cmp	r1, #-2147483648	; 0x80000000
   26820:	adc	r0, r0, r2, lsl #23
   26824:	biceq	r0, r0, #1
   26828:	orr	r0, r0, r3
   2682c:	bx	lr
   26830:	lsls	r1, r1, #1
   26834:	adc	r0, r0, r0
   26838:	tst	r0, #8388608	; 0x800000
   2683c:	sub	r2, r2, #1
   26840:	bne	2681c <flatcc_json_parser_struct_as_root@@Base+0x59c>
   26844:	clz	ip, r0
   26848:	sub	ip, ip, #8
   2684c:	subs	r2, r2, ip
   26850:	lsl	r0, r0, ip
   26854:	addge	r0, r0, r2, lsl #23
   26858:	rsblt	r2, r2, #0
   2685c:	orrge	r0, r0, r3
   26860:	orrlt	r0, r3, r0, lsr r2
   26864:	bx	lr
   26868:	teq	r2, #0
   2686c:	eor	r1, r1, #8388608	; 0x800000
   26870:	eoreq	r0, r0, #8388608	; 0x800000
   26874:	addeq	r2, r2, #1
   26878:	subne	r3, r3, #1
   2687c:	b	267d8 <flatcc_json_parser_struct_as_root@@Base+0x558>
   26880:	lsl	r3, r1, #1
   26884:	mvns	ip, r2, asr #24
   26888:	mvnsne	ip, r3, asr #24
   2688c:	beq	268e0 <flatcc_json_parser_struct_as_root@@Base+0x660>
   26890:	teq	r2, r3
   26894:	beq	268a4 <flatcc_json_parser_struct_as_root@@Base+0x624>
   26898:	teq	r2, #0
   2689c:	moveq	r0, r1
   268a0:	bx	lr
   268a4:	teq	r0, r1
   268a8:	movne	r0, #0
   268ac:	bxne	lr
   268b0:	tst	r2, #-16777216	; 0xff000000
   268b4:	bne	268c4 <flatcc_json_parser_struct_as_root@@Base+0x644>
   268b8:	lsls	r0, r0, #1
   268bc:	orrcs	r0, r0, #-2147483648	; 0x80000000
   268c0:	bx	lr
   268c4:	adds	r2, r2, #33554432	; 0x2000000
   268c8:	addcc	r0, r0, #8388608	; 0x800000
   268cc:	bxcc	lr
   268d0:	and	r3, r0, #-2147483648	; 0x80000000
   268d4:	orr	r0, r3, #2130706432	; 0x7f000000
   268d8:	orr	r0, r0, #8388608	; 0x800000
   268dc:	bx	lr
   268e0:	mvns	r2, r2, asr #24
   268e4:	movne	r0, r1
   268e8:	mvnseq	r3, r3, asr #24
   268ec:	movne	r1, r0
   268f0:	lsls	r2, r0, #9
   268f4:	lslseq	r3, r1, #9
   268f8:	teqeq	r0, r1
   268fc:	orrne	r0, r0, #4194304	; 0x400000
   26900:	bx	lr
   26904:	mov	r3, #0
   26908:	b	26914 <flatcc_json_parser_struct_as_root@@Base+0x694>
   2690c:	ands	r3, r0, #-2147483648	; 0x80000000
   26910:	rsbmi	r0, r0, #0
   26914:	movs	ip, r0
   26918:	bxeq	lr
   2691c:	orr	r3, r3, #1258291200	; 0x4b000000
   26920:	mov	r1, r0
   26924:	mov	r0, #0
   26928:	b	2696c <flatcc_json_parser_struct_as_root@@Base+0x6ec>
   2692c:	orrs	r2, r0, r1
   26930:	bxeq	lr
   26934:	mov	r3, #0
   26938:	b	26954 <flatcc_json_parser_struct_as_root@@Base+0x6d4>
   2693c:	orrs	r2, r0, r1
   26940:	bxeq	lr
   26944:	ands	r3, r1, #-2147483648	; 0x80000000
   26948:	bpl	26954 <flatcc_json_parser_struct_as_root@@Base+0x6d4>
   2694c:	rsbs	r0, r0, #0
   26950:	rsc	r1, r1, #0
   26954:	movs	ip, r1
   26958:	moveq	ip, r0
   2695c:	moveq	r1, r0
   26960:	moveq	r0, #0
   26964:	orr	r3, r3, #1526726656	; 0x5b000000
   26968:	subeq	r3, r3, #268435456	; 0x10000000
   2696c:	sub	r3, r3, #8388608	; 0x800000
   26970:	clz	r2, ip
   26974:	subs	r2, r2, #8
   26978:	sub	r3, r3, r2, lsl #23
   2697c:	blt	2699c <flatcc_json_parser_struct_as_root@@Base+0x71c>
   26980:	add	r3, r3, r1, lsl r2
   26984:	lsl	ip, r0, r2
   26988:	rsb	r2, r2, #32
   2698c:	cmp	ip, #-2147483648	; 0x80000000
   26990:	adc	r0, r3, r0, lsr r2
   26994:	biceq	r0, r0, #1
   26998:	bx	lr
   2699c:	add	r2, r2, #32
   269a0:	lsl	ip, r1, r2
   269a4:	rsb	r2, r2, #32
   269a8:	orrs	r0, r0, ip, lsl #1
   269ac:	adc	r0, r3, r1, lsr r2
   269b0:	biceq	r0, r0, ip, lsr #31
   269b4:	bx	lr

000269b8 <__libc_csu_init@@Base>:
   269b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   269bc:	mov	r7, r0
   269c0:	ldr	r6, [pc, #72]	; 26a10 <__libc_csu_init@@Base+0x58>
   269c4:	ldr	r5, [pc, #72]	; 26a14 <__libc_csu_init@@Base+0x5c>
   269c8:	add	r6, pc, r6
   269cc:	add	r5, pc, r5
   269d0:	sub	r6, r6, r5
   269d4:	mov	r8, r1
   269d8:	mov	r9, r2
   269dc:	bl	123dc <free@plt-0x20>
   269e0:	asrs	r6, r6, #2
   269e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   269e8:	mov	r4, #0
   269ec:	add	r4, r4, #1
   269f0:	ldr	r3, [r5], #4
   269f4:	mov	r2, r9
   269f8:	mov	r1, r8
   269fc:	mov	r0, r7
   26a00:	blx	r3
   26a04:	cmp	r6, r4
   26a08:	bne	269ec <__libc_csu_init@@Base+0x34>
   26a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a10:	andeq	r2, r1, r4, asr #10
   26a14:	andeq	r2, r1, ip, lsr r5

00026a18 <__libc_csu_fini@@Base>:
   26a18:	bx	lr

Disassembly of section .fini:

00026a1c <.fini>:
   26a1c:	push	{r3, lr}
   26a20:	pop	{r3, pc}
