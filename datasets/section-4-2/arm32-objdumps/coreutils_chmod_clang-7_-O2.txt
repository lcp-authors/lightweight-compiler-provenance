
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

0001109c <.init>:
   1109c:	push	{r3, lr}
   110a0:	bl	113ec <__assert_fail@plt+0x48>
   110a4:	pop	{r3, pc}

Disassembly of section .plt:

000110a8 <fstatfs64@plt-0x14>:
   110a8:	push	{lr}		; (str lr, [sp, #-4]!)
   110ac:	ldr	lr, [pc, #4]	; 110b8 <fstatfs64@plt-0x4>
   110b0:	add	lr, pc, lr
   110b4:	ldr	pc, [lr, #8]!
   110b8:	andeq	r9, r1, r8, asr #30

000110bc <fstatfs64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #3912]!	; 0xf48

000110c8 <calloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #3904]!	; 0xf40

000110d4 <fputs_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #3896]!	; 0xf38

000110e0 <raise@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #3888]!	; 0xf30

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #3880]!	; 0xf28

000110f8 <fflush@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #3872]!	; 0xf20

00011104 <memmove@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #3864]!	; 0xf18

00011110 <free@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #3856]!	; 0xf10

0001111c <_exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3848]!	; 0xf08

00011128 <memcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3840]!	; 0xf00

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3832]!	; 0xef8

00011140 <memcmp@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3824]!	; 0xef0

0001114c <dcgettext@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3816]!	; 0xee8

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3808]!	; 0xee0

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3800]!	; 0xed8

00011170 <__fxstatat64@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3792]!	; 0xed0

0001117c <iswprint@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3784]!	; 0xec8

00011188 <__fxstat64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3776]!	; 0xec0

00011194 <fwrite@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3768]!	; 0xeb8

000111a0 <lseek64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111ac <__ctype_get_mb_cur_max@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3752]!	; 0xea8

000111b8 <__fpending@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3744]!	; 0xea0

000111c4 <mbrtowc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3736]!	; 0xe98

000111d0 <error@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3728]!	; 0xe90

000111dc <open64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3720]!	; 0xe88

000111e8 <malloc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3712]!	; 0xe80

000111f4 <__libc_start_main@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3704]!	; 0xe78

00011200 <__freading@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3696]!	; 0xe70

0001120c <__gmon_start__@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3688]!	; 0xe68

00011218 <getopt_long@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #102400	; 0x19000
   11220:	ldr	pc, [ip, #3680]!	; 0xe60

00011224 <__ctype_b_loc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #102400	; 0x19000
   1122c:	ldr	pc, [ip, #3672]!	; 0xe58

00011230 <exit@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #102400	; 0x19000
   11238:	ldr	pc, [ip, #3664]!	; 0xe50

0001123c <strlen@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #102400	; 0x19000
   11244:	ldr	pc, [ip, #3656]!	; 0xe48

00011248 <openat64@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #102400	; 0x19000
   11250:	ldr	pc, [ip, #3648]!	; 0xe40

00011254 <fchmodat@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #102400	; 0x19000
   1125c:	ldr	pc, [ip, #3640]!	; 0xe38

00011260 <__errno_location@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #102400	; 0x19000
   11268:	ldr	pc, [ip, #3632]!	; 0xe30

0001126c <__sprintf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #102400	; 0x19000
   11274:	ldr	pc, [ip, #3624]!	; 0xe28

00011278 <__cxa_atexit@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #102400	; 0x19000
   11280:	ldr	pc, [ip, #3616]!	; 0xe20

00011284 <memset@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #102400	; 0x19000
   1128c:	ldr	pc, [ip, #3608]!	; 0xe18

00011290 <__printf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #102400	; 0x19000
   11298:	ldr	pc, [ip, #3600]!	; 0xe10

0001129c <fileno@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #102400	; 0x19000
   112a4:	ldr	pc, [ip, #3592]!	; 0xe08

000112a8 <__fprintf_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #102400	; 0x19000
   112b0:	ldr	pc, [ip, #3584]!	; 0xe00

000112b4 <fclose@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #102400	; 0x19000
   112bc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112c0 <fseeko64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #102400	; 0x19000
   112c8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112cc <fcntl64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #102400	; 0x19000
   112d4:	ldr	pc, [ip, #3560]!	; 0xde8

000112d8 <setlocale@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #102400	; 0x19000
   112e0:	ldr	pc, [ip, #3552]!	; 0xde0

000112e4 <strrchr@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #102400	; 0x19000
   112ec:	ldr	pc, [ip, #3544]!	; 0xdd8

000112f0 <nl_langinfo@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #102400	; 0x19000
   112f8:	ldr	pc, [ip, #3536]!	; 0xdd0

000112fc <readdir64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #102400	; 0x19000
   11304:	ldr	pc, [ip, #3528]!	; 0xdc8

00011308 <fdopendir@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #102400	; 0x19000
   11310:	ldr	pc, [ip, #3520]!	; 0xdc0

00011314 <dirfd@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #102400	; 0x19000
   1131c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011320 <fchdir@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #102400	; 0x19000
   11328:	ldr	pc, [ip, #3504]!	; 0xdb0

0001132c <qsort@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #102400	; 0x19000
   11334:	ldr	pc, [ip, #3496]!	; 0xda8

00011338 <bindtextdomain@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #102400	; 0x19000
   11340:	ldr	pc, [ip, #3488]!	; 0xda0

00011344 <umask@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #102400	; 0x19000
   1134c:	ldr	pc, [ip, #3480]!	; 0xd98

00011350 <chmod@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #102400	; 0x19000
   11358:	ldr	pc, [ip, #3472]!	; 0xd90

0001135c <__xstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #102400	; 0x19000
   11364:	ldr	pc, [ip, #3464]!	; 0xd88

00011368 <strncmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #102400	; 0x19000
   11370:	ldr	pc, [ip, #3456]!	; 0xd80

00011374 <abort@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #102400	; 0x19000
   1137c:	ldr	pc, [ip, #3448]!	; 0xd78

00011380 <close@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #102400	; 0x19000
   11388:	ldr	pc, [ip, #3440]!	; 0xd70

0001138c <__lxstat64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #102400	; 0x19000
   11394:	ldr	pc, [ip, #3432]!	; 0xd68

00011398 <closedir@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #102400	; 0x19000
   113a0:	ldr	pc, [ip, #3424]!	; 0xd60

000113a4 <__assert_fail@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #102400	; 0x19000
   113ac:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113b0 <.text>:
   113b0:	mov	fp, #0
   113b4:	mov	lr, #0
   113b8:	pop	{r1}		; (ldr r1, [sp], #4)
   113bc:	mov	r2, sp
   113c0:	push	{r2}		; (str r2, [sp, #-4]!)
   113c4:	push	{r0}		; (str r0, [sp, #-4]!)
   113c8:	ldr	ip, [pc, #16]	; 113e0 <__assert_fail@plt+0x3c>
   113cc:	push	{ip}		; (str ip, [sp, #-4]!)
   113d0:	ldr	r0, [pc, #12]	; 113e4 <__assert_fail@plt+0x40>
   113d4:	ldr	r3, [pc, #12]	; 113e8 <__assert_fail@plt+0x44>
   113d8:	bl	111f4 <__libc_start_main@plt>
   113dc:	bl	11374 <abort@plt>
   113e0:	andeq	r9, r1, ip, asr #29
   113e4:	andeq	r1, r1, r8, ror r7
   113e8:	andeq	r9, r1, ip, ror #28
   113ec:	ldr	r3, [pc, #20]	; 11408 <__assert_fail@plt+0x64>
   113f0:	ldr	r2, [pc, #20]	; 1140c <__assert_fail@plt+0x68>
   113f4:	add	r3, pc, r3
   113f8:	ldr	r2, [r3, r2]
   113fc:	cmp	r2, #0
   11400:	bxeq	lr
   11404:	b	1120c <__gmon_start__@plt>
   11408:	andeq	r9, r1, r4, lsl #24
   1140c:	andeq	r0, r0, r8, lsl #2
   11410:	ldr	r0, [pc, #24]	; 11430 <__assert_fail@plt+0x8c>
   11414:	ldr	r3, [pc, #24]	; 11434 <__assert_fail@plt+0x90>
   11418:	cmp	r3, r0
   1141c:	bxeq	lr
   11420:	ldr	r3, [pc, #16]	; 11438 <__assert_fail@plt+0x94>
   11424:	cmp	r3, #0
   11428:	bxeq	lr
   1142c:	bx	r3
   11430:	andeq	fp, r2, r8, ror #2
   11434:	andeq	fp, r2, r8, ror #2
   11438:	andeq	r0, r0, r0
   1143c:	ldr	r0, [pc, #36]	; 11468 <__assert_fail@plt+0xc4>
   11440:	ldr	r1, [pc, #36]	; 1146c <__assert_fail@plt+0xc8>
   11444:	sub	r1, r1, r0
   11448:	asr	r1, r1, #2
   1144c:	add	r1, r1, r1, lsr #31
   11450:	asrs	r1, r1, #1
   11454:	bxeq	lr
   11458:	ldr	r3, [pc, #16]	; 11470 <__assert_fail@plt+0xcc>
   1145c:	cmp	r3, #0
   11460:	bxeq	lr
   11464:	bx	r3
   11468:	andeq	fp, r2, r8, ror #2
   1146c:	andeq	fp, r2, r8, ror #2
   11470:	andeq	r0, r0, r0
   11474:	push	{r4, lr}
   11478:	ldr	r4, [pc, #24]	; 11498 <__assert_fail@plt+0xf4>
   1147c:	ldrb	r3, [r4]
   11480:	cmp	r3, #0
   11484:	popne	{r4, pc}
   11488:	bl	11410 <__assert_fail@plt+0x6c>
   1148c:	mov	r3, #1
   11490:	strb	r3, [r4]
   11494:	pop	{r4, pc}
   11498:	andeq	fp, r2, r4, lsl #3
   1149c:	b	1143c <__assert_fail@plt+0x98>
   114a0:	push	{fp, lr}
   114a4:	mov	fp, sp
   114a8:	sub	sp, sp, #64	; 0x40
   114ac:	mov	r4, r0
   114b0:	cmp	r0, #0
   114b4:	bne	11734 <__assert_fail@plt+0x390>
   114b8:	movw	r1, #40731	; 0x9f1b
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	1114c <dcgettext@plt>
   114cc:	mov	r1, r0
   114d0:	movw	r0, #45492	; 0xb1b4
   114d4:	movt	r0, #2
   114d8:	ldr	r2, [r0]
   114dc:	mov	r0, #1
   114e0:	mov	r3, r2
   114e4:	str	r2, [sp]
   114e8:	bl	11290 <__printf_chk@plt>
   114ec:	movw	r1, #40866	; 0x9fa2
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	movt	r1, #1
   114fc:	bl	1114c <dcgettext@plt>
   11500:	movw	r7, #45436	; 0xb17c
   11504:	movt	r7, #2
   11508:	ldr	r1, [r7]
   1150c:	bl	110d4 <fputs_unlocked@plt>
   11510:	movw	r1, #40971	; 0xa00b
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	1114c <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	110d4 <fputs_unlocked@plt>
   1152c:	movw	r1, #41172	; 0xa0d4
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	1114c <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	110d4 <fputs_unlocked@plt>
   11548:	movw	r1, #41300	; 0xa154
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	1114c <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	110d4 <fputs_unlocked@plt>
   11564:	movw	r1, #41366	; 0xa196
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	1114c <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	110d4 <fputs_unlocked@plt>
   11580:	movw	r1, #41433	; 0xa1d9
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	1114c <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	110d4 <fputs_unlocked@plt>
   1159c:	movw	r1, #41478	; 0xa206
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	1114c <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	110d4 <fputs_unlocked@plt>
   115b8:	movw	r1, #41532	; 0xa23c
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	1114c <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	110d4 <fputs_unlocked@plt>
   115d4:	movw	r0, #43216	; 0xa8d0
   115d8:	mov	r2, #48	; 0x30
   115dc:	add	r6, sp, #8
   115e0:	movw	r5, #41607	; 0xa287
   115e4:	movt	r0, #1
   115e8:	movt	r5, #1
   115ec:	add	r1, r0, #32
   115f0:	add	r3, r0, #16
   115f4:	vld1.64	{d18-d19}, [r0], r2
   115f8:	vld1.64	{d16-d17}, [r1]
   115fc:	vld1.64	{d20-d21}, [r3]
   11600:	add	r1, r6, #32
   11604:	vldr	d22, [r0]
   11608:	add	r0, r6, #16
   1160c:	vst1.64	{d16-d17}, [r1]
   11610:	movw	r1, #41881	; 0xa399
   11614:	vst1.64	{d20-d21}, [r0]
   11618:	mov	r0, r6
   1161c:	vst1.64	{d18-d19}, [r0], r2
   11620:	movt	r1, #1
   11624:	vstr	d22, [r0]
   11628:	mov	r0, r5
   1162c:	bl	110ec <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	ldrne	r1, [r6, #8]!
   11638:	cmpne	r1, #0
   1163c:	bne	11628 <__assert_fail@plt+0x284>
   11640:	ldr	r6, [r6, #4]
   11644:	movw	r1, #41976	; 0xa3f8
   11648:	mov	r0, #0
   1164c:	mov	r2, #5
   11650:	movt	r1, #1
   11654:	bl	1114c <dcgettext@plt>
   11658:	movw	r2, #41705	; 0xa2e9
   1165c:	movw	r3, #41999	; 0xa40f
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	movt	r2, #1
   1166c:	movt	r3, #1
   11670:	bl	11290 <__printf_chk@plt>
   11674:	cmp	r6, #0
   11678:	mov	r0, #5
   1167c:	mov	r1, #0
   11680:	moveq	r6, r5
   11684:	bl	112d8 <setlocale@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116c4 <__assert_fail@plt+0x320>
   11690:	movw	r1, #42039	; 0xa437
   11694:	mov	r2, #3
   11698:	movt	r1, #1
   1169c:	bl	11368 <strncmp@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	116c4 <__assert_fail@plt+0x320>
   116a8:	movw	r1, #42043	; 0xa43b
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	1114c <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	110d4 <fputs_unlocked@plt>
   116c4:	movw	r1, #42114	; 0xa482
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	1114c <dcgettext@plt>
   116d8:	movw	r2, #41999	; 0xa40f
   116dc:	mov	r1, r0
   116e0:	mov	r0, #1
   116e4:	mov	r3, r5
   116e8:	movt	r2, #1
   116ec:	bl	11290 <__printf_chk@plt>
   116f0:	movw	r1, #42141	; 0xa49d
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	1114c <dcgettext@plt>
   11704:	movw	r3, #40970	; 0xa00a
   11708:	mov	r1, r0
   1170c:	movw	r0, #41909	; 0xa3b5
   11710:	cmp	r6, r5
   11714:	mov	r2, r6
   11718:	movt	r0, #1
   1171c:	movt	r3, #1
   11720:	moveq	r3, r0
   11724:	mov	r0, #1
   11728:	bl	11290 <__printf_chk@plt>
   1172c:	mov	r0, r4
   11730:	bl	11230 <exit@plt>
   11734:	movw	r0, #45432	; 0xb178
   11738:	movw	r1, #40692	; 0x9ef4
   1173c:	mov	r2, #5
   11740:	movt	r0, #2
   11744:	movt	r1, #1
   11748:	ldr	r5, [r0]
   1174c:	mov	r0, #0
   11750:	bl	1114c <dcgettext@plt>
   11754:	mov	r2, r0
   11758:	movw	r0, #45492	; 0xb1b4
   1175c:	mov	r1, #1
   11760:	movt	r0, #2
   11764:	ldr	r3, [r0]
   11768:	mov	r0, r5
   1176c:	bl	112a8 <__fprintf_chk@plt>
   11770:	mov	r0, r4
   11774:	bl	11230 <exit@plt>
   11778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1177c:	add	fp, sp, #28
   11780:	sub	sp, sp, #156	; 0x9c
   11784:	mov	r4, #0
   11788:	mov	r7, r0
   1178c:	mov	r5, r1
   11790:	str	r4, [sp, #36]	; 0x24
   11794:	ldr	r0, [r1]
   11798:	bl	169f4 <__assert_fail@plt+0x5650>
   1179c:	movw	r1, #40970	; 0xa00a
   117a0:	mov	r0, #6
   117a4:	movt	r1, #1
   117a8:	bl	112d8 <setlocale@plt>
   117ac:	movw	r6, #41709	; 0xa2ed
   117b0:	movw	r1, #41613	; 0xa28d
   117b4:	movt	r6, #1
   117b8:	movt	r1, #1
   117bc:	mov	r0, r6
   117c0:	bl	11338 <bindtextdomain@plt>
   117c4:	mov	r0, r6
   117c8:	bl	11164 <textdomain@plt>
   117cc:	movw	r0, #10500	; 0x2904
   117d0:	movt	r0, #1
   117d4:	bl	19ed0 <__assert_fail@plt+0x8b2c>
   117d8:	movw	r0, #45448	; 0xb188
   117dc:	mov	r1, #0
   117e0:	str	r7, [sp, #28]
   117e4:	movt	r0, #2
   117e8:	str	r1, [sp, #32]
   117ec:	strb	r4, [r0]
   117f0:	movw	r0, #45449	; 0xb189
   117f4:	movt	r0, #2
   117f8:	strb	r4, [r0]
   117fc:	movw	r0, #45450	; 0xb18a
   11800:	movt	r0, #2
   11804:	strb	r4, [r0]
   11808:	mov	r0, #0
   1180c:	mov	r4, #0
   11810:	str	r0, [sp, #24]
   11814:	mov	r0, #0
   11818:	b	11858 <__assert_fail@plt+0x4b4>
   1181c:	mov	r0, #44	; 0x2c
   11820:	str	r1, [sp, #32]
   11824:	add	r2, r9, #1
   11828:	strb	r0, [r1, r4]
   1182c:	add	r0, r1, r5
   11830:	mov	r1, r8
   11834:	bl	11128 <memcpy@plt>
   11838:	mov	r5, r7
   1183c:	ldr	r7, [sp, #28]
   11840:	movw	r0, #45448	; 0xb188
   11844:	mov	r1, #1
   11848:	mov	r4, r6
   1184c:	movt	r0, #2
   11850:	strb	r1, [r0]
   11854:	mov	r0, sl
   11858:	movw	r2, #41637	; 0xa2a5
   1185c:	movw	r3, #43040	; 0xa820
   11860:	mov	sl, r0
   11864:	mov	r0, #0
   11868:	mov	r1, r5
   1186c:	str	r0, [sp]
   11870:	mov	r0, r7
   11874:	movt	r2, #1
   11878:	movt	r3, #1
   1187c:	bl	11218 <getopt_long@plt>
   11880:	add	r1, r0, #3
   11884:	lsr	r0, r1, #1
   11888:	cmp	r0, #130	; 0x82
   1188c:	bhi	12874 <__assert_fail@plt+0x14d0>
   11890:	add	r2, pc, #4
   11894:	mov	r0, #0
   11898:	ldr	pc, [r2, r1, lsl #2]
   1189c:	andeq	r2, r1, r4, asr #15
   118a0:	andeq	r2, r1, r8, lsl r8
   118a4:	andeq	r1, r1, r0, lsl #27
   118a8:	andeq	r2, r1, r4, ror r8
   118ac:	andeq	r2, r1, r4, ror r8
   118b0:	andeq	r2, r1, r4, ror r8
   118b4:	andeq	r2, r1, r4, ror r8
   118b8:	andeq	r2, r1, r4, ror r8
   118bc:	andeq	r2, r1, r4, ror r8
   118c0:	andeq	r2, r1, r4, ror r8
   118c4:	andeq	r2, r1, r4, ror r8
   118c8:	andeq	r2, r1, r4, ror r8
   118cc:	andeq	r2, r1, r4, ror r8
   118d0:	andeq	r2, r1, r4, ror r8
   118d4:	andeq	r2, r1, r4, ror r8
   118d8:	andeq	r2, r1, r4, ror r8
   118dc:	andeq	r2, r1, r4, ror r8
   118e0:	andeq	r2, r1, r4, ror r8
   118e4:	andeq	r2, r1, r4, ror r8
   118e8:	andeq	r2, r1, r4, ror r8
   118ec:	andeq	r2, r1, r4, ror r8
   118f0:	andeq	r2, r1, r4, ror r8
   118f4:	andeq	r2, r1, r4, ror r8
   118f8:	andeq	r2, r1, r4, ror r8
   118fc:	andeq	r2, r1, r4, ror r8
   11900:	andeq	r2, r1, r4, ror r8
   11904:	andeq	r2, r1, r4, ror r8
   11908:	andeq	r2, r1, r4, ror r8
   1190c:	andeq	r2, r1, r4, ror r8
   11910:	andeq	r2, r1, r4, ror r8
   11914:	andeq	r2, r1, r4, ror r8
   11918:	andeq	r2, r1, r4, ror r8
   1191c:	andeq	r2, r1, r4, ror r8
   11920:	andeq	r2, r1, r4, ror r8
   11924:	andeq	r2, r1, r4, ror r8
   11928:	andeq	r2, r1, r4, ror r8
   1192c:	andeq	r2, r1, r4, ror r8
   11930:	andeq	r2, r1, r4, ror r8
   11934:	andeq	r2, r1, r4, ror r8
   11938:	andeq	r2, r1, r4, ror r8
   1193c:	andeq	r2, r1, r4, ror r8
   11940:	andeq	r2, r1, r4, ror r8
   11944:	andeq	r2, r1, r4, ror r8
   11948:	andeq	r2, r1, r4, ror r8
   1194c:	andeq	r2, r1, r4, ror r8
   11950:	andeq	r2, r1, r4, ror r8
   11954:			; <UNDEFINED> instruction: 0x00011cb4
   11958:			; <UNDEFINED> instruction: 0x00011cb4
   1195c:	andeq	r2, r1, r4, ror r8
   11960:	andeq	r2, r1, r4, ror r8
   11964:	andeq	r2, r1, r4, ror r8
   11968:			; <UNDEFINED> instruction: 0x00011cb4
   1196c:			; <UNDEFINED> instruction: 0x00011cb4
   11970:			; <UNDEFINED> instruction: 0x00011cb4
   11974:			; <UNDEFINED> instruction: 0x00011cb4
   11978:			; <UNDEFINED> instruction: 0x00011cb4
   1197c:			; <UNDEFINED> instruction: 0x00011cb4
   11980:			; <UNDEFINED> instruction: 0x00011cb4
   11984:			; <UNDEFINED> instruction: 0x00011cb4
   11988:	andeq	r2, r1, r4, ror r8
   1198c:	andeq	r2, r1, r4, ror r8
   11990:	andeq	r2, r1, r4, ror r8
   11994:	andeq	r2, r1, r4, ror r8
   11998:	andeq	r2, r1, r4, ror r8
   1199c:			; <UNDEFINED> instruction: 0x00011cb4
   119a0:	andeq	r2, r1, r4, ror r8
   119a4:	andeq	r2, r1, r4, ror r8
   119a8:	andeq	r2, r1, r4, ror r8
   119ac:	andeq	r2, r1, r4, ror r8
   119b0:	andeq	r2, r1, r4, ror r8
   119b4:	andeq	r2, r1, r4, ror r8
   119b8:	andeq	r2, r1, r4, ror r8
   119bc:	andeq	r2, r1, r4, ror r8
   119c0:	andeq	r2, r1, r4, ror r8
   119c4:	andeq	r2, r1, r4, ror r8
   119c8:	andeq	r2, r1, r4, ror r8
   119cc:	andeq	r2, r1, r4, ror r8
   119d0:	andeq	r2, r1, r4, ror r8
   119d4:	andeq	r2, r1, r4, ror r8
   119d8:	andeq	r2, r1, r4, ror r8
   119dc:	andeq	r2, r1, r4, ror r8
   119e0:	andeq	r2, r1, r4, ror r8
   119e4:	andeq	r2, r1, r4, ror r8
   119e8:	andeq	r2, r1, r4, ror r8
   119ec:	andeq	r2, r1, r4, ror r8
   119f0:	andeq	r1, r1, r0, lsr sp
   119f4:	andeq	r2, r1, r4, ror r8
   119f8:	andeq	r2, r1, r4, ror r8
   119fc:	andeq	r2, r1, r4, ror r8
   11a00:	andeq	r2, r1, r4, ror r8
   11a04:	andeq	r2, r1, r4, ror r8
   11a08:			; <UNDEFINED> instruction: 0x00011cb4
   11a0c:	andeq	r2, r1, r4, ror r8
   11a10:	andeq	r2, r1, r4, ror r8
   11a14:	andeq	r2, r1, r4, ror r8
   11a18:	andeq	r2, r1, r4, ror r8
   11a1c:	andeq	r2, r1, r4, ror r8
   11a20:	andeq	r2, r1, r4, ror r8
   11a24:	andeq	r2, r1, r4, ror r8
   11a28:	andeq	r2, r1, r4, ror r8
   11a2c:			; <UNDEFINED> instruction: 0x00011cb4
   11a30:	andeq	r2, r1, r4, ror r8
   11a34:	andeq	r1, r1, r8, asr #26
   11a38:	andeq	r2, r1, r4, ror r8
   11a3c:	andeq	r2, r1, r4, ror r8
   11a40:	andeq	r1, r1, r4, lsr #26
   11a44:			; <UNDEFINED> instruction: 0x00011cb4
   11a48:	andeq	r2, r1, r4, ror r8
   11a4c:	andeq	r2, r1, r4, ror r8
   11a50:	andeq	r2, r1, r4, ror r8
   11a54:	andeq	r2, r1, r4, ror r8
   11a58:	andeq	r2, r1, r4, ror r8
   11a5c:	andeq	r2, r1, r4, ror r8
   11a60:	andeq	r2, r1, r4, ror r8
   11a64:			; <UNDEFINED> instruction: 0x00011cb4
   11a68:	andeq	r2, r1, r4, ror r8
   11a6c:	andeq	r2, r1, r4, ror r8
   11a70:			; <UNDEFINED> instruction: 0x00011cb4
   11a74:			; <UNDEFINED> instruction: 0x00011cb4
   11a78:			; <UNDEFINED> instruction: 0x00011cb4
   11a7c:			; <UNDEFINED> instruction: 0x00011cb4
   11a80:	andeq	r1, r1, r8, lsl sp
   11a84:			; <UNDEFINED> instruction: 0x00011cb4
   11a88:			; <UNDEFINED> instruction: 0x00011cb4
   11a8c:	andeq	r2, r1, r4, ror r8
   11a90:	andeq	r2, r1, r4, ror r8
   11a94:	andeq	r2, r1, r4, ror r8
   11a98:	andeq	r2, r1, r4, ror r8
   11a9c:	andeq	r2, r1, r4, ror r8
   11aa0:	andeq	r2, r1, r4, ror r8
   11aa4:	andeq	r2, r1, r4, ror r8
   11aa8:	andeq	r2, r1, r4, ror r8
   11aac:	andeq	r2, r1, r4, ror r8
   11ab0:	andeq	r2, r1, r4, ror r8
   11ab4:	andeq	r2, r1, r4, ror r8
   11ab8:	andeq	r2, r1, r4, ror r8
   11abc:	andeq	r2, r1, r4, ror r8
   11ac0:	andeq	r2, r1, r4, ror r8
   11ac4:	andeq	r2, r1, r4, ror r8
   11ac8:	andeq	r2, r1, r4, ror r8
   11acc:	andeq	r2, r1, r4, ror r8
   11ad0:	andeq	r2, r1, r4, ror r8
   11ad4:	andeq	r2, r1, r4, ror r8
   11ad8:	andeq	r2, r1, r4, ror r8
   11adc:	andeq	r2, r1, r4, ror r8
   11ae0:	andeq	r2, r1, r4, ror r8
   11ae4:	andeq	r2, r1, r4, ror r8
   11ae8:	andeq	r2, r1, r4, ror r8
   11aec:	andeq	r2, r1, r4, ror r8
   11af0:	andeq	r2, r1, r4, ror r8
   11af4:	andeq	r2, r1, r4, ror r8
   11af8:	andeq	r2, r1, r4, ror r8
   11afc:	andeq	r2, r1, r4, ror r8
   11b00:	andeq	r2, r1, r4, ror r8
   11b04:	andeq	r2, r1, r4, ror r8
   11b08:	andeq	r2, r1, r4, ror r8
   11b0c:	andeq	r2, r1, r4, ror r8
   11b10:	andeq	r2, r1, r4, ror r8
   11b14:	andeq	r2, r1, r4, ror r8
   11b18:	andeq	r2, r1, r4, ror r8
   11b1c:	andeq	r2, r1, r4, ror r8
   11b20:	andeq	r2, r1, r4, ror r8
   11b24:	andeq	r2, r1, r4, ror r8
   11b28:	andeq	r2, r1, r4, ror r8
   11b2c:	andeq	r2, r1, r4, ror r8
   11b30:	andeq	r2, r1, r4, ror r8
   11b34:	andeq	r2, r1, r4, ror r8
   11b38:	andeq	r2, r1, r4, ror r8
   11b3c:	andeq	r2, r1, r4, ror r8
   11b40:	andeq	r2, r1, r4, ror r8
   11b44:	andeq	r2, r1, r4, ror r8
   11b48:	andeq	r2, r1, r4, ror r8
   11b4c:	andeq	r2, r1, r4, ror r8
   11b50:	andeq	r2, r1, r4, ror r8
   11b54:	andeq	r2, r1, r4, ror r8
   11b58:	andeq	r2, r1, r4, ror r8
   11b5c:	andeq	r2, r1, r4, ror r8
   11b60:	andeq	r2, r1, r4, ror r8
   11b64:	andeq	r2, r1, r4, ror r8
   11b68:	andeq	r2, r1, r4, ror r8
   11b6c:	andeq	r2, r1, r4, ror r8
   11b70:	andeq	r2, r1, r4, ror r8
   11b74:	andeq	r2, r1, r4, ror r8
   11b78:	andeq	r2, r1, r4, ror r8
   11b7c:	andeq	r2, r1, r4, ror r8
   11b80:	andeq	r2, r1, r4, ror r8
   11b84:	andeq	r2, r1, r4, ror r8
   11b88:	andeq	r2, r1, r4, ror r8
   11b8c:	andeq	r2, r1, r4, ror r8
   11b90:	andeq	r2, r1, r4, ror r8
   11b94:	andeq	r2, r1, r4, ror r8
   11b98:	andeq	r2, r1, r4, ror r8
   11b9c:	andeq	r2, r1, r4, ror r8
   11ba0:	andeq	r2, r1, r4, ror r8
   11ba4:	andeq	r2, r1, r4, ror r8
   11ba8:	andeq	r2, r1, r4, ror r8
   11bac:	andeq	r2, r1, r4, ror r8
   11bb0:	andeq	r2, r1, r4, ror r8
   11bb4:	andeq	r2, r1, r4, ror r8
   11bb8:	andeq	r2, r1, r4, ror r8
   11bbc:	andeq	r2, r1, r4, ror r8
   11bc0:	andeq	r2, r1, r4, ror r8
   11bc4:	andeq	r2, r1, r4, ror r8
   11bc8:	andeq	r2, r1, r4, ror r8
   11bcc:	andeq	r2, r1, r4, ror r8
   11bd0:	andeq	r2, r1, r4, ror r8
   11bd4:	andeq	r2, r1, r4, ror r8
   11bd8:	andeq	r2, r1, r4, ror r8
   11bdc:	andeq	r2, r1, r4, ror r8
   11be0:	andeq	r2, r1, r4, ror r8
   11be4:	andeq	r2, r1, r4, ror r8
   11be8:	andeq	r2, r1, r4, ror r8
   11bec:	andeq	r2, r1, r4, ror r8
   11bf0:	andeq	r2, r1, r4, ror r8
   11bf4:	andeq	r2, r1, r4, ror r8
   11bf8:	andeq	r2, r1, r4, ror r8
   11bfc:	andeq	r2, r1, r4, ror r8
   11c00:	andeq	r2, r1, r4, ror r8
   11c04:	andeq	r2, r1, r4, ror r8
   11c08:	andeq	r2, r1, r4, ror r8
   11c0c:	andeq	r2, r1, r4, ror r8
   11c10:	andeq	r2, r1, r4, ror r8
   11c14:	andeq	r2, r1, r4, ror r8
   11c18:	andeq	r2, r1, r4, ror r8
   11c1c:	andeq	r2, r1, r4, ror r8
   11c20:	andeq	r2, r1, r4, ror r8
   11c24:	andeq	r2, r1, r4, ror r8
   11c28:	andeq	r2, r1, r4, ror r8
   11c2c:	andeq	r2, r1, r4, ror r8
   11c30:	andeq	r2, r1, r4, ror r8
   11c34:	andeq	r2, r1, r4, ror r8
   11c38:	andeq	r2, r1, r4, ror r8
   11c3c:	andeq	r2, r1, r4, ror r8
   11c40:	andeq	r2, r1, r4, ror r8
   11c44:	andeq	r2, r1, r4, ror r8
   11c48:	andeq	r2, r1, r4, ror r8
   11c4c:	andeq	r2, r1, r4, ror r8
   11c50:	andeq	r2, r1, r4, ror r8
   11c54:	andeq	r2, r1, r4, ror r8
   11c58:	andeq	r2, r1, r4, ror r8
   11c5c:	andeq	r2, r1, r4, ror r8
   11c60:	andeq	r2, r1, r4, ror r8
   11c64:	andeq	r2, r1, r4, ror r8
   11c68:	andeq	r2, r1, r4, ror r8
   11c6c:	andeq	r2, r1, r4, ror r8
   11c70:	andeq	r2, r1, r4, ror r8
   11c74:	andeq	r2, r1, r4, ror r8
   11c78:	andeq	r2, r1, r4, ror r8
   11c7c:	andeq	r2, r1, r4, ror r8
   11c80:	andeq	r2, r1, r4, ror r8
   11c84:	andeq	r2, r1, r4, ror r8
   11c88:	andeq	r2, r1, r4, ror r8
   11c8c:	andeq	r2, r1, r4, ror r8
   11c90:	andeq	r2, r1, r4, ror r8
   11c94:	andeq	r2, r1, r4, ror r8
   11c98:	andeq	r2, r1, r4, ror r8
   11c9c:	andeq	r2, r1, r4, ror r8
   11ca0:	andeq	r2, r1, r4, ror r8
   11ca4:	andeq	r2, r1, r4, ror r8
   11ca8:	andeq	r1, r1, r8, asr r8
   11cac:	andeq	r1, r1, r0, ror #26
   11cb0:	andeq	r1, r1, r8, ror #26
   11cb4:	movw	r0, #45424	; 0xb170
   11cb8:	mov	r7, r5
   11cbc:	movt	r0, #2
   11cc0:	ldr	r0, [r0]
   11cc4:	add	r0, r5, r0, lsl #2
   11cc8:	ldr	r8, [r0, #-4]
   11ccc:	mov	r0, r8
   11cd0:	bl	1123c <strlen@plt>
   11cd4:	cmp	r4, #0
   11cd8:	mov	r5, r4
   11cdc:	mov	r9, r0
   11ce0:	addne	r5, r5, #1
   11ce4:	add	r6, r0, r5
   11ce8:	ldr	r0, [sp, #36]	; 0x24
   11cec:	cmp	r0, r6
   11cf0:	bls	11cfc <__assert_fail@plt+0x958>
   11cf4:	ldr	r1, [sp, #32]
   11cf8:	b	1181c <__assert_fail@plt+0x478>
   11cfc:	add	r0, r6, #1
   11d00:	add	r1, sp, #36	; 0x24
   11d04:	str	r0, [sp, #36]	; 0x24
   11d08:	ldr	r0, [sp, #32]
   11d0c:	bl	18fe8 <__assert_fail@plt+0x7c44>
   11d10:	mov	r1, r0
   11d14:	b	1181c <__assert_fail@plt+0x478>
   11d18:	movw	r0, #45336	; 0xb118
   11d1c:	mov	r1, #0
   11d20:	b	11d50 <__assert_fail@plt+0x9ac>
   11d24:	movw	r0, #45449	; 0xb189
   11d28:	movt	r0, #2
   11d2c:	b	11d38 <__assert_fail@plt+0x994>
   11d30:	movw	r0, #45450	; 0xb18a
   11d34:	movt	r0, #2
   11d38:	mov	r1, #1
   11d3c:	strb	r1, [r0]
   11d40:	mov	r0, sl
   11d44:	b	11858 <__assert_fail@plt+0x4b4>
   11d48:	movw	r0, #45336	; 0xb118
   11d4c:	mov	r1, #1
   11d50:	movt	r0, #2
   11d54:	str	r1, [r0]
   11d58:	mov	r0, sl
   11d5c:	b	11858 <__assert_fail@plt+0x4b4>
   11d60:	mov	r0, #1
   11d64:	b	11858 <__assert_fail@plt+0x4b4>
   11d68:	movw	r0, #45440	; 0xb180
   11d6c:	movt	r0, #2
   11d70:	ldr	r0, [r0]
   11d74:	str	r0, [sp, #24]
   11d78:	mov	r0, sl
   11d7c:	b	11858 <__assert_fail@plt+0x4b4>
   11d80:	ldr	r4, [sp, #24]
   11d84:	cmp	r4, #0
   11d88:	beq	11da8 <__assert_fail@plt+0xa04>
   11d8c:	ldr	r0, [sp, #32]
   11d90:	mov	r6, #0
   11d94:	cmp	r0, #0
   11d98:	beq	11dd0 <__assert_fail@plt+0xa2c>
   11d9c:	movw	r1, #41748	; 0xa314
   11da0:	movt	r1, #1
   11da4:	b	12884 <__assert_fail@plt+0x14e0>
   11da8:	ldr	r6, [sp, #32]
   11dac:	cmp	r6, #0
   11db0:	bne	11dd0 <__assert_fail@plt+0xa2c>
   11db4:	movw	r0, #45424	; 0xb170
   11db8:	movt	r0, #2
   11dbc:	mov	r2, r0
   11dc0:	ldr	r0, [r0]
   11dc4:	add	r1, r0, #1
   11dc8:	str	r1, [r2]
   11dcc:	ldr	r6, [r5, r0, lsl #2]
   11dd0:	movw	r0, #45424	; 0xb170
   11dd4:	movt	r0, #2
   11dd8:	ldr	r0, [r0]
   11ddc:	cmp	r0, r7
   11de0:	bge	12824 <__assert_fail@plt+0x1480>
   11de4:	cmp	r4, #0
   11de8:	beq	11e48 <__assert_fail@plt+0xaa4>
   11dec:	mov	r0, r4
   11df0:	bl	167e8 <__assert_fail@plt+0x5444>
   11df4:	movw	r1, #45452	; 0xb18c
   11df8:	cmp	r0, #0
   11dfc:	movt	r1, #2
   11e00:	str	r0, [r1]
   11e04:	bne	11e78 <__assert_fail@plt+0xad4>
   11e08:	bl	11260 <__errno_location@plt>
   11e0c:	ldr	r6, [r0]
   11e10:	movw	r1, #41833	; 0xa369
   11e14:	mov	r0, #0
   11e18:	mov	r2, #5
   11e1c:	movt	r1, #1
   11e20:	bl	1114c <dcgettext@plt>
   11e24:	mov	r5, r0
   11e28:	mov	r0, #4
   11e2c:	mov	r1, r4
   11e30:	bl	18100 <__assert_fail@plt+0x6d5c>
   11e34:	mov	r3, r0
   11e38:	mov	r0, #1
   11e3c:	mov	r1, r6
   11e40:	mov	r2, r5
   11e44:	bl	111d0 <error@plt>
   11e48:	mov	r0, r6
   11e4c:	bl	163b0 <__assert_fail@plt+0x500c>
   11e50:	movw	r1, #45452	; 0xb18c
   11e54:	cmp	r0, #0
   11e58:	movt	r1, #2
   11e5c:	str	r0, [r1]
   11e60:	beq	128a8 <__assert_fail@plt+0x1504>
   11e64:	mov	r0, #0
   11e68:	bl	11344 <umask@plt>
   11e6c:	movw	r1, #45456	; 0xb190
   11e70:	movt	r1, #2
   11e74:	str	r0, [r1]
   11e78:	movw	r0, #45450	; 0xb18a
   11e7c:	movt	r0, #2
   11e80:	ldrb	r0, [r0]
   11e84:	and	r0, sl, r0
   11e88:	tst	r0, #1
   11e8c:	beq	11ef4 <__assert_fail@plt+0xb50>
   11e90:	movw	r0, #45464	; 0xb198
   11e94:	movt	r0, #2
   11e98:	bl	18760 <__assert_fail@plt+0x73bc>
   11e9c:	movw	r1, #45480	; 0xb1a8
   11ea0:	cmp	r0, #0
   11ea4:	movt	r1, #2
   11ea8:	str	r0, [r1]
   11eac:	bne	11f04 <__assert_fail@plt+0xb60>
   11eb0:	bl	11260 <__errno_location@plt>
   11eb4:	ldr	r4, [r0]
   11eb8:	movw	r1, #41833	; 0xa369
   11ebc:	mov	r0, #0
   11ec0:	mov	r2, #5
   11ec4:	movt	r1, #1
   11ec8:	bl	1114c <dcgettext@plt>
   11ecc:	movw	r1, #44495	; 0xadcf
   11ed0:	mov	r5, r0
   11ed4:	mov	r0, #4
   11ed8:	movt	r1, #1
   11edc:	bl	18100 <__assert_fail@plt+0x6d5c>
   11ee0:	mov	r3, r0
   11ee4:	mov	r0, #1
   11ee8:	mov	r1, r4
   11eec:	mov	r2, r5
   11ef0:	bl	111d0 <error@plt>
   11ef4:	movw	r0, #45480	; 0xb1a8
   11ef8:	mov	r1, #0
   11efc:	movt	r0, #2
   11f00:	str	r1, [r0]
   11f04:	movw	r0, #45424	; 0xb170
   11f08:	movw	r1, #1041	; 0x411
   11f0c:	mov	r2, #0
   11f10:	movt	r0, #2
   11f14:	ldr	r0, [r0]
   11f18:	add	r0, r5, r0, lsl #2
   11f1c:	bl	19458 <__assert_fail@plt+0x80b4>
   11f20:	str	r0, [sp, #32]
   11f24:	bl	135a0 <__assert_fail@plt+0x21fc>
   11f28:	cmp	r0, #0
   11f2c:	beq	12724 <__assert_fail@plt+0x1380>
   11f30:	mov	r8, r0
   11f34:	sub	r0, fp, #40	; 0x28
   11f38:	mov	r4, #1
   11f3c:	add	r0, r0, #1
   11f40:	str	r0, [sp, #24]
   11f44:	add	r0, sp, #40	; 0x28
   11f48:	add	r0, r0, #1
   11f4c:	str	r0, [sp, #28]
   11f50:	b	11ff0 <__assert_fail@plt+0xc4c>
   11f54:	ldr	r0, [sp, #32]
   11f58:	mov	r6, #1
   11f5c:	mov	r1, r8
   11f60:	mov	r2, #1
   11f64:	str	r6, [r8, #16]
   11f68:	bl	14c20 <__assert_fail@plt+0x387c>
   11f6c:	b	12708 <__assert_fail@plt+0x1364>
   11f70:	movw	r1, #42570	; 0xa64a
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	movt	r1, #1
   11f80:	bl	1114c <dcgettext@plt>
   11f84:	mov	r5, r0
   11f88:	mov	r0, #4
   11f8c:	mov	r1, r6
   11f90:	bl	18100 <__assert_fail@plt+0x6d5c>
   11f94:	mov	r3, r0
   11f98:	mov	r0, #0
   11f9c:	mov	r1, #0
   11fa0:	mov	r2, r5
   11fa4:	bl	111d0 <error@plt>
   11fa8:	movw	r1, #42673	; 0xa6b1
   11fac:	mov	r0, #0
   11fb0:	mov	r2, #5
   11fb4:	mov	r6, #0
   11fb8:	movt	r1, #1
   11fbc:	bl	1114c <dcgettext@plt>
   11fc0:	mov	r2, r0
   11fc4:	mov	r0, #0
   11fc8:	mov	r1, #0
   11fcc:	bl	111d0 <error@plt>
   11fd0:	ldr	r5, [sp, #32]
   11fd4:	mov	r1, r8
   11fd8:	mov	r2, #4
   11fdc:	mov	r0, r5
   11fe0:	bl	14c20 <__assert_fail@plt+0x387c>
   11fe4:	mov	r0, r5
   11fe8:	bl	135a0 <__assert_fail@plt+0x21fc>
   11fec:	b	12708 <__assert_fail@plt+0x1364>
   11ff0:	ldr	r9, [r8, #24]
   11ff4:	ldr	r7, [r8, #28]
   11ff8:	ldrh	r0, [r8, #56]	; 0x38
   11ffc:	sub	r0, r0, #2
   12000:	cmp	r0, #11
   12004:	bhi	1209c <__assert_fail@plt+0xcf8>
   12008:	add	r1, pc, #4
   1200c:	mov	r6, #1
   12010:	ldr	pc, [r1, r0, lsl #2]
   12014:	andeq	r2, r1, r4, asr #32
   12018:	muleq	r1, ip, r0
   1201c:	andeq	r2, r1, ip, ror r1
   12020:	muleq	r1, ip, r0
   12024:	andeq	r2, r1, r8, lsl #14
   12028:	andeq	r2, r1, ip, lsl #4
   1202c:	muleq	r1, ip, r0
   12030:	muleq	r1, ip, r0
   12034:	andeq	r2, r1, ip, asr r2
   12038:	muleq	r1, ip, r0
   1203c:	muleq	r1, ip, r0
   12040:			; <UNDEFINED> instruction: 0x000121b4
   12044:	ldr	r0, [sp, #32]
   12048:	mov	r1, r8
   1204c:	bl	194a4 <__assert_fail@plt+0x8100>
   12050:	cmp	r0, #0
   12054:	beq	1209c <__assert_fail@plt+0xcf8>
   12058:	movw	r1, #42384	; 0xa590
   1205c:	mov	r0, #0
   12060:	mov	r2, #5
   12064:	mov	r6, #0
   12068:	movt	r1, #1
   1206c:	bl	1114c <dcgettext@plt>
   12070:	mov	r5, r0
   12074:	mov	r0, #0
   12078:	mov	r1, #3
   1207c:	mov	r2, r7
   12080:	bl	1837c <__assert_fail@plt+0x6fd8>
   12084:	mov	r3, r0
   12088:	mov	r0, #0
   1208c:	mov	r1, #0
   12090:	mov	r2, r5
   12094:	bl	111d0 <error@plt>
   12098:	b	12708 <__assert_fail@plt+0x1364>
   1209c:	movw	r0, #45480	; 0xb1a8
   120a0:	movt	r0, #2
   120a4:	ldr	r0, [r0]
   120a8:	cmp	r0, #0
   120ac:	beq	1215c <__assert_fail@plt+0xdb8>
   120b0:	mov	r5, r7
   120b4:	ldrd	r2, [r0]
   120b8:	ldrd	r6, [r8, #160]	; 0xa0
   120bc:	eor	r1, r7, r3
   120c0:	eor	r2, r6, r2
   120c4:	mov	r7, r5
   120c8:	orrs	r1, r2, r1
   120cc:	bne	1215c <__assert_fail@plt+0xdb8>
   120d0:	ldrd	r0, [r0, #8]
   120d4:	ldrd	r2, [r8, #64]	; 0x40
   120d8:	eor	r1, r3, r1
   120dc:	eor	r0, r2, r0
   120e0:	orrs	r0, r0, r1
   120e4:	bne	1215c <__assert_fail@plt+0xdb8>
   120e8:	mov	r0, r7
   120ec:	mov	r6, r7
   120f0:	movw	r7, #44495	; 0xadcf
   120f4:	movt	r7, #1
   120f8:	mov	r1, r7
   120fc:	bl	110ec <strcmp@plt>
   12100:	cmp	r0, #0
   12104:	beq	11f70 <__assert_fail@plt+0xbcc>
   12108:	movw	r1, #42615	; 0xa677
   1210c:	mov	r0, #0
   12110:	mov	r2, #5
   12114:	movt	r1, #1
   12118:	bl	1114c <dcgettext@plt>
   1211c:	mov	r5, r0
   12120:	mov	r0, #0
   12124:	mov	r1, #4
   12128:	mov	r2, r6
   1212c:	bl	18058 <__assert_fail@plt+0x6cb4>
   12130:	mov	r6, r0
   12134:	mov	r0, #1
   12138:	mov	r1, #4
   1213c:	mov	r2, r7
   12140:	bl	18058 <__assert_fail@plt+0x6cb4>
   12144:	str	r0, [sp]
   12148:	mov	r0, #0
   1214c:	mov	r1, #0
   12150:	mov	r2, r5
   12154:	mov	r3, r6
   12158:	b	11fa4 <__assert_fail@plt+0xc00>
   1215c:	ldr	sl, [r8, #80]	; 0x50
   12160:	and	r0, sl, #61440	; 0xf000
   12164:	cmp	r0, #40960	; 0xa000
   12168:	bne	12384 <__assert_fail@plt+0xfe0>
   1216c:	mov	r6, #2
   12170:	mov	r5, #0
   12174:	mov	sl, #0
   12178:	b	122dc <__assert_fail@plt+0xf38>
   1217c:	movw	r0, #45449	; 0xb189
   12180:	mov	r5, #0
   12184:	mov	sl, #0
   12188:	mov	r6, #0
   1218c:	movt	r0, #2
   12190:	ldrb	r0, [r0]
   12194:	cmp	r0, #0
   12198:	bne	122dc <__assert_fail@plt+0xf38>
   1219c:	ldr	sl, [r8, #32]
   121a0:	movw	r1, #42321	; 0xa551
   121a4:	mov	r5, #0
   121a8:	mov	r0, #0
   121ac:	movt	r1, #1
   121b0:	b	122a8 <__assert_fail@plt+0xf04>
   121b4:	movw	r0, #45449	; 0xb189
   121b8:	mov	r5, #0
   121bc:	mov	sl, #0
   121c0:	mov	r6, #0
   121c4:	movt	r0, #2
   121c8:	ldrb	r0, [r0]
   121cc:	cmp	r0, #0
   121d0:	bne	122dc <__assert_fail@plt+0xf38>
   121d4:	movw	r1, #42346	; 0xa56a
   121d8:	mov	r0, #0
   121dc:	mov	r2, #5
   121e0:	mov	r5, #0
   121e4:	movt	r1, #1
   121e8:	bl	1114c <dcgettext@plt>
   121ec:	mov	r6, r0
   121f0:	mov	r0, #4
   121f4:	mov	r1, r7
   121f8:	bl	18100 <__assert_fail@plt+0x6d5c>
   121fc:	mov	r3, r0
   12200:	mov	r0, #0
   12204:	mov	r1, #0
   12208:	b	122cc <__assert_fail@plt+0xf28>
   1220c:	movw	r0, #45449	; 0xb189
   12210:	mov	r5, #0
   12214:	mov	sl, #0
   12218:	mov	r6, #0
   1221c:	movt	r0, #2
   12220:	ldrb	r0, [r0]
   12224:	cmp	r0, #0
   12228:	bne	122dc <__assert_fail@plt+0xf38>
   1222c:	ldr	r6, [r8, #32]
   12230:	mov	r0, #0
   12234:	mov	r1, #3
   12238:	mov	r2, r7
   1223c:	mov	r5, #0
   12240:	bl	1837c <__assert_fail@plt+0x6fd8>
   12244:	movw	r2, #41878	; 0xa396
   12248:	mov	r3, r0
   1224c:	mov	r0, #0
   12250:	mov	r1, r6
   12254:	movt	r2, #1
   12258:	b	122d0 <__assert_fail@plt+0xf2c>
   1225c:	ldr	r0, [r8, #48]	; 0x30
   12260:	cmp	r0, #0
   12264:	bne	12274 <__assert_fail@plt+0xed0>
   12268:	ldr	r0, [r8, #16]
   1226c:	cmp	r0, #0
   12270:	beq	11f54 <__assert_fail@plt+0xbb0>
   12274:	movw	r0, #45449	; 0xb189
   12278:	mov	r5, #0
   1227c:	mov	sl, #0
   12280:	mov	r6, #0
   12284:	movt	r0, #2
   12288:	ldrb	r0, [r0]
   1228c:	cmp	r0, #0
   12290:	bne	122dc <__assert_fail@plt+0xf38>
   12294:	ldr	sl, [r8, #32]
   12298:	movw	r1, #42304	; 0xa540
   1229c:	mov	r5, #0
   122a0:	mov	r0, #0
   122a4:	movt	r1, #1
   122a8:	mov	r2, #5
   122ac:	bl	1114c <dcgettext@plt>
   122b0:	mov	r6, r0
   122b4:	mov	r0, #4
   122b8:	mov	r1, r7
   122bc:	bl	18100 <__assert_fail@plt+0x6d5c>
   122c0:	mov	r3, r0
   122c4:	mov	r0, #0
   122c8:	mov	r1, sl
   122cc:	mov	r2, r6
   122d0:	bl	111d0 <error@plt>
   122d4:	mov	sl, #0
   122d8:	mov	r6, #0
   122dc:	movw	r0, #45336	; 0xb118
   122e0:	movt	r0, #2
   122e4:	ldr	r0, [r0]
   122e8:	cmp	r0, #2
   122ec:	beq	12604 <__assert_fail@plt+0x1260>
   122f0:	cmp	r6, #4
   122f4:	bne	124a4 <__assert_fail@plt+0x1100>
   122f8:	tst	r5, #3584	; 0xe00
   122fc:	mov	r0, r5
   12300:	beq	12440 <__assert_fail@plt+0x109c>
   12304:	ldr	r0, [sp, #32]
   12308:	mov	r2, r9
   1230c:	add	r3, sp, #40	; 0x28
   12310:	ldr	r1, [r0, #32]
   12314:	mov	r0, #0
   12318:	str	r0, [sp]
   1231c:	mov	r0, #3
   12320:	bl	11170 <__fxstatat64@plt>
   12324:	cmp	r0, #0
   12328:	beq	1243c <__assert_fail@plt+0x1098>
   1232c:	movw	r0, #45449	; 0xb189
   12330:	movt	r0, #2
   12334:	ldrb	r0, [r0]
   12338:	cmp	r0, #0
   1233c:	bne	124a0 <__assert_fail@plt+0x10fc>
   12340:	bl	11260 <__errno_location@plt>
   12344:	ldr	r9, [r0]
   12348:	movw	r1, #42784	; 0xa720
   1234c:	mov	r0, #0
   12350:	mov	r2, #5
   12354:	movt	r1, #1
   12358:	bl	1114c <dcgettext@plt>
   1235c:	mov	r6, r0
   12360:	mov	r0, #4
   12364:	mov	r1, r7
   12368:	bl	18100 <__assert_fail@plt+0x6d5c>
   1236c:	mov	r3, r0
   12370:	mov	r0, #0
   12374:	mov	r1, r9
   12378:	mov	r2, r6
   1237c:	bl	111d0 <error@plt>
   12380:	b	124a0 <__assert_fail@plt+0x10fc>
   12384:	movw	r1, #45452	; 0xb18c
   12388:	sub	r0, r0, #16384	; 0x4000
   1238c:	movt	r1, #2
   12390:	clz	r0, r0
   12394:	ldr	r3, [r1]
   12398:	movw	r1, #45456	; 0xb190
   1239c:	movt	r1, #2
   123a0:	ldr	r2, [r1]
   123a4:	mov	r1, #0
   123a8:	str	r1, [sp]
   123ac:	lsr	r1, r0, #5
   123b0:	mov	r0, sl
   123b4:	bl	1684c <__assert_fail@plt+0x54a8>
   123b8:	mov	r5, r0
   123bc:	ldr	r0, [sp, #32]
   123c0:	mov	r1, r9
   123c4:	mov	r3, #0
   123c8:	mov	r2, r5
   123cc:	ldr	r0, [r0, #32]
   123d0:	bl	129ec <__assert_fail@plt+0x1648>
   123d4:	cmp	r0, #0
   123d8:	beq	125bc <__assert_fail@plt+0x1218>
   123dc:	movw	r0, #45449	; 0xb189
   123e0:	mov	r6, #1
   123e4:	movt	r0, #2
   123e8:	ldrb	r0, [r0]
   123ec:	cmp	r0, #0
   123f0:	bne	122dc <__assert_fail@plt+0xf38>
   123f4:	bl	11260 <__errno_location@plt>
   123f8:	ldr	r0, [r0]
   123fc:	movw	r1, #42722	; 0xa6e2
   12400:	mov	r2, #5
   12404:	movt	r1, #1
   12408:	str	r0, [sp, #20]
   1240c:	mov	r0, #0
   12410:	bl	1114c <dcgettext@plt>
   12414:	str	r0, [sp, #16]
   12418:	mov	r0, #4
   1241c:	mov	r1, r7
   12420:	bl	18100 <__assert_fail@plt+0x6d5c>
   12424:	ldr	r1, [sp, #20]
   12428:	ldr	r2, [sp, #16]
   1242c:	mov	r3, r0
   12430:	mov	r0, #0
   12434:	bl	111d0 <error@plt>
   12438:	b	122dc <__assert_fail@plt+0xf38>
   1243c:	ldr	r0, [sp, #56]	; 0x38
   12440:	eor	r0, r0, sl
   12444:	movw	r1, #4095	; 0xfff
   12448:	tst	r0, r1
   1244c:	beq	124a0 <__assert_fail@plt+0x10fc>
   12450:	mov	r0, #4
   12454:	mov	r1, r7
   12458:	mov	r6, #4
   1245c:	str	r7, [sp, #20]
   12460:	bl	18100 <__assert_fail@plt+0x6d5c>
   12464:	mov	r9, r0
   12468:	mov	r0, r5
   1246c:	add	r1, sp, #40	; 0x28
   12470:	bl	12b24 <__assert_fail@plt+0x1780>
   12474:	mov	r7, #0
   12478:	mov	r0, sl
   1247c:	sub	r1, fp, #40	; 0x28
   12480:	strb	r7, [sp, #50]	; 0x32
   12484:	bl	12b24 <__assert_fail@plt+0x1780>
   12488:	movw	r1, #42895	; 0xa78f
   1248c:	strb	r7, [fp, #-30]	; 0xffffffe2
   12490:	mov	r7, r5
   12494:	bfc	r7, #12, #20
   12498:	movt	r1, #1
   1249c:	b	125cc <__assert_fail@plt+0x1228>
   124a0:	mov	r6, #3
   124a4:	cmp	r6, #4
   124a8:	movwne	r0, #45336	; 0xb118
   124ac:	movtne	r0, #2
   124b0:	ldrne	r0, [r0]
   124b4:	cmpne	r0, #0
   124b8:	bne	12604 <__assert_fail@plt+0x1260>
   124bc:	mov	r0, #4
   124c0:	mov	r1, r7
   124c4:	bl	18100 <__assert_fail@plt+0x6d5c>
   124c8:	mov	r9, r0
   124cc:	cmp	r6, #0
   124d0:	beq	12510 <__assert_fail@plt+0x116c>
   124d4:	cmp	r6, #2
   124d8:	bne	12544 <__assert_fail@plt+0x11a0>
   124dc:	movw	r1, #42813	; 0xa73d
   124e0:	mov	r0, #0
   124e4:	mov	r2, #5
   124e8:	movt	r1, #1
   124ec:	bl	1114c <dcgettext@plt>
   124f0:	mov	r1, r0
   124f4:	mov	r0, #1
   124f8:	mov	r2, r9
   124fc:	bl	11290 <__printf_chk@plt>
   12500:	mov	r6, #2
   12504:	cmp	r6, #3
   12508:	bcs	1260c <__assert_fail@plt+0x1268>
   1250c:	b	126d8 <__assert_fail@plt+0x1334>
   12510:	movw	r1, #42869	; 0xa775
   12514:	mov	r0, #0
   12518:	mov	r2, #5
   1251c:	mov	r6, #0
   12520:	movt	r1, #1
   12524:	bl	1114c <dcgettext@plt>
   12528:	mov	r1, r0
   1252c:	mov	r0, #1
   12530:	mov	r2, r9
   12534:	bl	11290 <__printf_chk@plt>
   12538:	cmp	r6, #3
   1253c:	bcs	1260c <__assert_fail@plt+0x1268>
   12540:	b	126d8 <__assert_fail@plt+0x1334>
   12544:	mov	r0, r5
   12548:	add	r1, sp, #40	; 0x28
   1254c:	str	r7, [sp, #20]
   12550:	bl	12b24 <__assert_fail@plt+0x1780>
   12554:	mov	r7, #0
   12558:	mov	r0, sl
   1255c:	sub	r1, fp, #40	; 0x28
   12560:	strb	r7, [sp, #50]	; 0x32
   12564:	bl	12b24 <__assert_fail@plt+0x1780>
   12568:	strb	r7, [fp, #-30]	; 0xffffffe2
   1256c:	mov	r7, r5
   12570:	cmp	r6, #1
   12574:	bfc	r7, #12, #20
   12578:	beq	125c4 <__assert_fail@plt+0x1220>
   1257c:	cmp	r6, #3
   12580:	bne	12820 <__assert_fail@plt+0x147c>
   12584:	movw	r1, #43004	; 0xa7fc
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	movt	r1, #1
   12594:	bl	1114c <dcgettext@plt>
   12598:	mov	r1, r0
   1259c:	ldr	r0, [sp, #28]
   125a0:	mov	r2, r9
   125a4:	mov	r3, r7
   125a8:	str	r0, [sp]
   125ac:	mov	r0, #1
   125b0:	bl	11290 <__printf_chk@plt>
   125b4:	mov	r6, #3
   125b8:	b	12600 <__assert_fail@plt+0x125c>
   125bc:	mov	r6, #4
   125c0:	b	122dc <__assert_fail@plt+0xf38>
   125c4:	movw	r1, #42945	; 0xa7c1
   125c8:	movt	r1, #1
   125cc:	mov	r0, #0
   125d0:	mov	r2, #5
   125d4:	bl	1114c <dcgettext@plt>
   125d8:	mov	r1, r0
   125dc:	ldr	r0, [sp, #24]
   125e0:	mov	r3, sl
   125e4:	mov	r2, r9
   125e8:	bfc	r3, #12, #20
   125ec:	stm	sp, {r0, r7}
   125f0:	ldr	r0, [sp, #28]
   125f4:	str	r0, [sp, #8]
   125f8:	mov	r0, #1
   125fc:	bl	11290 <__printf_chk@plt>
   12600:	ldr	r7, [sp, #20]
   12604:	cmp	r6, #3
   12608:	bcc	126d8 <__assert_fail@plt+0x1334>
   1260c:	movw	r0, #45448	; 0xb188
   12610:	movt	r0, #2
   12614:	ldrb	r0, [r0]
   12618:	cmp	r0, #1
   1261c:	bne	126d8 <__assert_fail@plt+0x1334>
   12620:	movw	r0, #45452	; 0xb18c
   12624:	mov	r2, #0
   12628:	mov	r9, r7
   1262c:	movt	r0, #2
   12630:	ldr	r3, [r0]
   12634:	mov	r0, #0
   12638:	str	r0, [sp]
   1263c:	and	r0, sl, #61440	; 0xf000
   12640:	sub	r0, r0, #16384	; 0x4000
   12644:	clz	r0, r0
   12648:	lsr	r1, r0, #5
   1264c:	mov	r0, sl
   12650:	bl	1684c <__assert_fail@plt+0x54a8>
   12654:	mov	r7, r0
   12658:	mvn	r0, r0
   1265c:	tst	r5, r0
   12660:	beq	126d8 <__assert_fail@plt+0x1334>
   12664:	mov	r0, r5
   12668:	add	r1, sp, #40	; 0x28
   1266c:	bl	12b24 <__assert_fail@plt+0x1780>
   12670:	mov	r0, r7
   12674:	sub	r1, fp, #40	; 0x28
   12678:	bl	12b24 <__assert_fail@plt+0x1780>
   1267c:	mov	r0, #0
   12680:	movw	r1, #42749	; 0xa6fd
   12684:	mov	r2, #5
   12688:	strb	r0, [sp, #50]	; 0x32
   1268c:	strb	r0, [fp, #-30]	; 0xffffffe2
   12690:	mov	r0, #0
   12694:	movt	r1, #1
   12698:	bl	1114c <dcgettext@plt>
   1269c:	mov	r5, r0
   126a0:	mov	r0, #0
   126a4:	mov	r1, #3
   126a8:	mov	r2, r9
   126ac:	bl	1837c <__assert_fail@plt+0x6fd8>
   126b0:	mov	r3, r0
   126b4:	ldr	r0, [sp, #28]
   126b8:	mov	r1, #0
   126bc:	mov	r2, r5
   126c0:	str	r0, [sp]
   126c4:	ldr	r0, [sp, #24]
   126c8:	str	r0, [sp, #4]
   126cc:	mov	r0, #0
   126d0:	bl	111d0 <error@plt>
   126d4:	mov	r6, #1
   126d8:	movw	r0, #45450	; 0xb18a
   126dc:	movt	r0, #2
   126e0:	ldrb	r0, [r0]
   126e4:	cmp	r0, #0
   126e8:	bne	126fc <__assert_fail@plt+0x1358>
   126ec:	ldr	r0, [sp, #32]
   126f0:	mov	r1, r8
   126f4:	mov	r2, #4
   126f8:	bl	14c20 <__assert_fail@plt+0x387c>
   126fc:	cmp	r6, #1
   12700:	mov	r6, #0
   12704:	movwhi	r6, #1
   12708:	ldr	r0, [sp, #32]
   1270c:	and	r4, r4, r6
   12710:	bl	135a0 <__assert_fail@plt+0x21fc>
   12714:	mov	r8, r0
   12718:	cmp	r0, #0
   1271c:	bne	11ff0 <__assert_fail@plt+0xc4c>
   12720:	b	12728 <__assert_fail@plt+0x1384>
   12724:	mov	r4, #1
   12728:	bl	11260 <__errno_location@plt>
   1272c:	ldr	r6, [r0]
   12730:	mov	r5, r0
   12734:	cmp	r6, #0
   12738:	beq	1277c <__assert_fail@plt+0x13d8>
   1273c:	movw	r0, #45449	; 0xb189
   12740:	mov	r4, #0
   12744:	movt	r0, #2
   12748:	ldrb	r0, [r0]
   1274c:	cmp	r0, #0
   12750:	bne	1277c <__assert_fail@plt+0x13d8>
   12754:	movw	r1, #42271	; 0xa51f
   12758:	mov	r0, #0
   1275c:	mov	r2, #5
   12760:	mov	r4, #0
   12764:	movt	r1, #1
   12768:	bl	1114c <dcgettext@plt>
   1276c:	mov	r2, r0
   12770:	mov	r0, #0
   12774:	mov	r1, r6
   12778:	bl	111d0 <error@plt>
   1277c:	ldr	r0, [sp, #32]
   12780:	bl	13400 <__assert_fail@plt+0x205c>
   12784:	cmp	r0, #0
   12788:	beq	127b8 <__assert_fail@plt+0x1414>
   1278c:	ldr	r5, [r5]
   12790:	movw	r1, #42287	; 0xa52f
   12794:	mov	r0, #0
   12798:	mov	r2, #5
   1279c:	mov	r4, #0
   127a0:	movt	r1, #1
   127a4:	bl	1114c <dcgettext@plt>
   127a8:	mov	r2, r0
   127ac:	mov	r0, #0
   127b0:	mov	r1, r5
   127b4:	bl	111d0 <error@plt>
   127b8:	eor	r0, r4, #1
   127bc:	sub	sp, fp, #28
   127c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c4:	movw	r0, #45340	; 0xb11c
   127c8:	movw	r2, #41735	; 0xa307
   127cc:	mov	r1, #0
   127d0:	movw	r7, #41719	; 0xa2f7
   127d4:	movt	r0, #2
   127d8:	movt	r2, #1
   127dc:	str	r1, [sp, #8]
   127e0:	movw	r1, #41607	; 0xa287
   127e4:	movt	r7, #1
   127e8:	ldr	r3, [r0]
   127ec:	movw	r0, #45436	; 0xb17c
   127f0:	str	r2, [sp, #4]
   127f4:	movw	r2, #41705	; 0xa2e9
   127f8:	movt	r1, #1
   127fc:	str	r7, [sp]
   12800:	movt	r0, #2
   12804:	movt	r2, #1
   12808:	ldr	r0, [r0]
   1280c:	bl	18c80 <__assert_fail@plt+0x78dc>
   12810:	mov	r0, #0
   12814:	bl	11230 <exit@plt>
   12818:	mov	r0, #0
   1281c:	bl	114a0 <__assert_fail@plt+0xfc>
   12820:	bl	11374 <abort@plt>
   12824:	cmp	r6, #0
   12828:	beq	1287c <__assert_fail@plt+0x14d8>
   1282c:	add	r0, r5, r0, lsl #2
   12830:	ldr	r0, [r0, #-4]
   12834:	cmp	r6, r0
   12838:	bne	1287c <__assert_fail@plt+0x14d8>
   1283c:	movw	r1, #41808	; 0xa350
   12840:	mov	r0, #0
   12844:	mov	r2, #5
   12848:	movt	r1, #1
   1284c:	bl	1114c <dcgettext@plt>
   12850:	mov	r6, r0
   12854:	add	r0, r5, r7, lsl #2
   12858:	ldr	r0, [r0, #-4]
   1285c:	bl	18628 <__assert_fail@plt+0x7284>
   12860:	mov	r3, r0
   12864:	mov	r0, #0
   12868:	mov	r1, #0
   1286c:	mov	r2, r6
   12870:	bl	111d0 <error@plt>
   12874:	mov	r0, #1
   12878:	bl	114a0 <__assert_fail@plt+0xfc>
   1287c:	movw	r1, #41792	; 0xa340
   12880:	movt	r1, #1
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	bl	1114c <dcgettext@plt>
   12890:	mov	r2, r0
   12894:	mov	r0, #0
   12898:	mov	r1, #0
   1289c:	bl	111d0 <error@plt>
   128a0:	mov	r0, #1
   128a4:	bl	114a0 <__assert_fail@plt+0xfc>
   128a8:	movw	r1, #41864	; 0xa388
   128ac:	mov	r0, #0
   128b0:	mov	r2, #5
   128b4:	movt	r1, #1
   128b8:	bl	1114c <dcgettext@plt>
   128bc:	mov	r4, r0
   128c0:	mov	r0, r6
   128c4:	bl	18628 <__assert_fail@plt+0x7284>
   128c8:	mov	r3, r0
   128cc:	mov	r0, #0
   128d0:	mov	r1, #0
   128d4:	mov	r2, r4
   128d8:	bl	111d0 <error@plt>
   128dc:	mov	r0, #1
   128e0:	bl	114a0 <__assert_fail@plt+0xfc>
   128e4:	movw	r1, #45484	; 0xb1ac
   128e8:	movt	r1, #2
   128ec:	str	r0, [r1]
   128f0:	bx	lr
   128f4:	movw	r1, #45488	; 0xb1b0
   128f8:	movt	r1, #2
   128fc:	strb	r0, [r1]
   12900:	bx	lr
   12904:	push	{r4, r5, r6, sl, fp, lr}
   12908:	add	fp, sp, #16
   1290c:	sub	sp, sp, #8
   12910:	movw	r0, #45436	; 0xb17c
   12914:	movt	r0, #2
   12918:	ldr	r0, [r0]
   1291c:	bl	195ac <__assert_fail@plt+0x8208>
   12920:	cmp	r0, #0
   12924:	beq	1294c <__assert_fail@plt+0x15a8>
   12928:	movw	r0, #45488	; 0xb1b0
   1292c:	movt	r0, #2
   12930:	ldrb	r0, [r0]
   12934:	cmp	r0, #0
   12938:	beq	1296c <__assert_fail@plt+0x15c8>
   1293c:	bl	11260 <__errno_location@plt>
   12940:	ldr	r0, [r0]
   12944:	cmp	r0, #32
   12948:	bne	1296c <__assert_fail@plt+0x15c8>
   1294c:	movw	r0, #45432	; 0xb178
   12950:	movt	r0, #2
   12954:	ldr	r0, [r0]
   12958:	bl	195ac <__assert_fail@plt+0x8208>
   1295c:	cmp	r0, #0
   12960:	subeq	sp, fp, #16
   12964:	popeq	{r4, r5, r6, sl, fp, pc}
   12968:	b	129dc <__assert_fail@plt+0x1638>
   1296c:	movw	r1, #43287	; 0xa917
   12970:	mov	r0, #0
   12974:	mov	r2, #5
   12978:	movt	r1, #1
   1297c:	bl	1114c <dcgettext@plt>
   12980:	mov	r4, r0
   12984:	movw	r0, #45484	; 0xb1ac
   12988:	movt	r0, #2
   1298c:	ldr	r6, [r0]
   12990:	bl	11260 <__errno_location@plt>
   12994:	ldr	r5, [r0]
   12998:	cmp	r6, #0
   1299c:	bne	129b8 <__assert_fail@plt+0x1614>
   129a0:	movw	r2, #41878	; 0xa396
   129a4:	mov	r0, #0
   129a8:	mov	r1, r5
   129ac:	mov	r3, r4
   129b0:	movt	r2, #1
   129b4:	b	129d8 <__assert_fail@plt+0x1634>
   129b8:	mov	r0, r6
   129bc:	bl	182a0 <__assert_fail@plt+0x6efc>
   129c0:	movw	r2, #43299	; 0xa923
   129c4:	mov	r3, r0
   129c8:	str	r4, [sp]
   129cc:	mov	r0, #0
   129d0:	mov	r1, r5
   129d4:	movt	r2, #1
   129d8:	bl	111d0 <error@plt>
   129dc:	movw	r0, #45344	; 0xb120
   129e0:	movt	r0, #2
   129e4:	ldr	r0, [r0]
   129e8:	bl	1111c <_exit@plt>
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f0:	add	fp, sp, #28
   129f4:	sub	sp, sp, #140	; 0x8c
   129f8:	mov	r8, r2
   129fc:	mov	r5, r1
   12a00:	mov	r6, r0
   12a04:	cmp	r3, #256	; 0x100
   12a08:	bne	12afc <__assert_fail@plt+0x1758>
   12a0c:	mov	r0, r6
   12a10:	mov	r1, r5
   12a14:	mov	r2, #2654208	; 0x288000
   12a18:	bl	11248 <openat64@plt>
   12a1c:	mov	r4, r0
   12a20:	cmp	r0, #0
   12a24:	blt	12a70 <__assert_fail@plt+0x16cc>
   12a28:	movw	r2, #40970	; 0xa00a
   12a2c:	mov	r0, #4096	; 0x1000
   12a30:	add	r3, sp, #32
   12a34:	mov	r1, r4
   12a38:	str	r0, [sp]
   12a3c:	movt	r2, #1
   12a40:	mov	r0, #3
   12a44:	bl	11170 <__fxstatat64@plt>
   12a48:	cmp	r0, #0
   12a4c:	beq	12a78 <__assert_fail@plt+0x16d4>
   12a50:	bl	11260 <__errno_location@plt>
   12a54:	ldr	r6, [r0]
   12a58:	mov	r5, r0
   12a5c:	mov	r0, r4
   12a60:	bl	11380 <close@plt>
   12a64:	str	r6, [r5]
   12a68:	mvn	r7, #0
   12a6c:	b	12b10 <__assert_fail@plt+0x176c>
   12a70:	mov	r7, r4
   12a74:	b	12b10 <__assert_fail@plt+0x176c>
   12a78:	ldr	r0, [sp, #48]	; 0x30
   12a7c:	and	r0, r0, #61440	; 0xf000
   12a80:	cmp	r0, #40960	; 0xa000
   12a84:	bne	12aa4 <__assert_fail@plt+0x1700>
   12a88:	mov	r0, r4
   12a8c:	bl	11380 <close@plt>
   12a90:	bl	11260 <__errno_location@plt>
   12a94:	mov	r1, #95	; 0x5f
   12a98:	mvn	r7, #0
   12a9c:	str	r1, [r0]
   12aa0:	b	12b10 <__assert_fail@plt+0x176c>
   12aa4:	movw	r3, #43306	; 0xa92a
   12aa8:	add	r7, sp, #6
   12aac:	mov	r1, #1
   12ab0:	mov	r2, #26
   12ab4:	str	r4, [sp]
   12ab8:	movt	r3, #1
   12abc:	mov	r0, r7
   12ac0:	bl	1126c <__sprintf_chk@plt>
   12ac4:	mov	r0, r7
   12ac8:	mov	r1, r8
   12acc:	bl	11350 <chmod@plt>
   12ad0:	mov	r7, r0
   12ad4:	bl	11260 <__errno_location@plt>
   12ad8:	ldr	sl, [r0]
   12adc:	mov	r9, r0
   12ae0:	mov	r0, r4
   12ae4:	bl	11380 <close@plt>
   12ae8:	cmp	r7, #0
   12aec:	beq	12b10 <__assert_fail@plt+0x176c>
   12af0:	cmp	sl, #2
   12af4:	bne	12b1c <__assert_fail@plt+0x1778>
   12af8:	mov	r3, #0
   12afc:	mov	r0, r6
   12b00:	mov	r1, r5
   12b04:	mov	r2, r8
   12b08:	bl	11254 <fchmodat@plt>
   12b0c:	mov	r7, r0
   12b10:	mov	r0, r7
   12b14:	sub	sp, fp, #28
   12b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b1c:	str	sl, [r9]
   12b20:	b	12b10 <__assert_fail@plt+0x176c>
   12b24:	and	r2, r0, #61440	; 0xf000
   12b28:	sub	r2, r2, #4096	; 0x1000
   12b2c:	lsr	r3, r2, #12
   12b30:	cmp	r3, #11
   12b34:	bhi	12b84 <__assert_fail@plt+0x17e0>
   12b38:	add	r2, pc, #4
   12b3c:	mov	ip, #45	; 0x2d
   12b40:	ldr	pc, [r2, r3, lsl #2]
   12b44:	andeq	r2, r1, r4, ror fp
   12b48:	andeq	r2, r1, ip, ror fp
   12b4c:	andeq	r2, r1, r4, lsl #23
   12b50:	andeq	r2, r1, ip, lsl #23
   12b54:	andeq	r2, r1, r4, lsl #23
   12b58:	andeq	r2, r1, r4, lsr #23
   12b5c:	andeq	r2, r1, r4, lsl #23
   12b60:	andeq	r2, r1, r8, lsr #23
   12b64:	andeq	r2, r1, r4, lsl #23
   12b68:	muleq	r1, r4, fp
   12b6c:	andeq	r2, r1, r4, lsl #23
   12b70:	muleq	r1, ip, fp
   12b74:	mov	ip, #112	; 0x70
   12b78:	b	12ba8 <__assert_fail@plt+0x1804>
   12b7c:	mov	ip, #99	; 0x63
   12b80:	b	12ba8 <__assert_fail@plt+0x1804>
   12b84:	mov	ip, #63	; 0x3f
   12b88:	b	12ba8 <__assert_fail@plt+0x1804>
   12b8c:	mov	ip, #100	; 0x64
   12b90:	b	12ba8 <__assert_fail@plt+0x1804>
   12b94:	mov	ip, #108	; 0x6c
   12b98:	b	12ba8 <__assert_fail@plt+0x1804>
   12b9c:	mov	ip, #115	; 0x73
   12ba0:	b	12ba8 <__assert_fail@plt+0x1804>
   12ba4:	mov	ip, #98	; 0x62
   12ba8:	push	{fp, lr}
   12bac:	mov	fp, sp
   12bb0:	mov	r2, #32
   12bb4:	tst	r0, #256	; 0x100
   12bb8:	mov	r3, #114	; 0x72
   12bbc:	strb	ip, [r1]
   12bc0:	mov	ip, #114	; 0x72
   12bc4:	mov	lr, #45	; 0x2d
   12bc8:	strh	r2, [r1, #10]
   12bcc:	movweq	r3, #45	; 0x2d
   12bd0:	tst	r0, #128	; 0x80
   12bd4:	mov	r2, #119	; 0x77
   12bd8:	movweq	r2, #45	; 0x2d
   12bdc:	strb	r3, [r1, #1]
   12be0:	tst	r0, #32
   12be4:	mov	r3, #119	; 0x77
   12be8:	strb	r2, [r1, #2]
   12bec:	mov	r2, #114	; 0x72
   12bf0:	movweq	r2, #45	; 0x2d
   12bf4:	tst	r0, #16
   12bf8:	strb	r2, [r1, #4]
   12bfc:	mov	r2, #119	; 0x77
   12c00:	movweq	r2, #45	; 0x2d
   12c04:	tst	r0, #4
   12c08:	movweq	ip, #45	; 0x2d
   12c0c:	tst	r0, #2
   12c10:	strb	r2, [r1, #5]
   12c14:	movweq	r3, #45	; 0x2d
   12c18:	strb	ip, [r1, #7]
   12c1c:	ands	r2, r0, #64	; 0x40
   12c20:	mov	ip, #45	; 0x2d
   12c24:	strb	r3, [r1, #8]
   12c28:	mov	r3, #83	; 0x53
   12c2c:	movwne	lr, #120	; 0x78
   12c30:	mov	r2, #83	; 0x53
   12c34:	movwne	r3, #115	; 0x73
   12c38:	tst	r0, #2048	; 0x800
   12c3c:	moveq	r3, lr
   12c40:	strb	r3, [r1, #3]
   12c44:	ands	r3, r0, #8
   12c48:	mov	r3, #45	; 0x2d
   12c4c:	movwne	r2, #115	; 0x73
   12c50:	movwne	r3, #120	; 0x78
   12c54:	tst	r0, #1024	; 0x400
   12c58:	moveq	r2, r3
   12c5c:	strb	r2, [r1, #6]
   12c60:	ands	r2, r0, #1
   12c64:	mov	r2, #84	; 0x54
   12c68:	movwne	ip, #120	; 0x78
   12c6c:	movwne	r2, #116	; 0x74
   12c70:	tst	r0, #512	; 0x200
   12c74:	moveq	r2, ip
   12c78:	strb	r2, [r1, #9]
   12c7c:	pop	{fp, pc}
   12c80:	ldr	r0, [r0, #16]
   12c84:	b	12b24 <__assert_fail@plt+0x1780>
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	add	fp, sp, #28
   12c90:	sub	sp, sp, #28
   12c94:	cmp	r1, #4096	; 0x1000
   12c98:	bcs	12cb4 <__assert_fail@plt+0x1910>
   12c9c:	mov	r7, r0
   12ca0:	and	r0, r1, #516	; 0x204
   12ca4:	mov	r5, r1
   12ca8:	cmp	r0, #516	; 0x204
   12cac:	tstne	r5, #18
   12cb0:	bne	12cd0 <__assert_fail@plt+0x192c>
   12cb4:	bl	11260 <__errno_location@plt>
   12cb8:	mov	r1, #22
   12cbc:	mov	r4, #0
   12cc0:	str	r1, [r0]
   12cc4:	mov	r0, r4
   12cc8:	sub	sp, fp, #28
   12ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cd0:	mov	r0, #1
   12cd4:	mov	r1, #96	; 0x60
   12cd8:	mov	sl, r2
   12cdc:	bl	194d4 <__assert_fail@plt+0x8130>
   12ce0:	cmp	r0, #0
   12ce4:	beq	130d4 <__assert_fail@plt+0x1d30>
   12ce8:	mov	r4, r0
   12cec:	mvn	r0, #99	; 0x63
   12cf0:	tst	r5, #2
   12cf4:	mov	r1, r5
   12cf8:	str	r0, [r4, #32]
   12cfc:	bic	r0, r5, #516	; 0x204
   12d00:	str	sl, [r4, #44]	; 0x2c
   12d04:	str	r4, [sp, #24]
   12d08:	orrne	r1, r0, #4
   12d0c:	str	r1, [r4, #48]	; 0x30
   12d10:	ldr	r0, [r7]
   12d14:	cmp	r0, #0
   12d18:	beq	12d50 <__assert_fail@plt+0x19ac>
   12d1c:	add	r6, r7, #4
   12d20:	mov	r4, #0
   12d24:	bl	1123c <strlen@plt>
   12d28:	cmp	r0, r4
   12d2c:	movhi	r4, r0
   12d30:	ldr	r0, [r6], #4
   12d34:	cmp	r0, #0
   12d38:	bne	12d24 <__assert_fail@plt+0x1980>
   12d3c:	add	r0, r4, #1
   12d40:	ldr	r4, [sp, #24]
   12d44:	cmp	r0, #4096	; 0x1000
   12d48:	movls	r0, #4096	; 0x1000
   12d4c:	b	12d54 <__assert_fail@plt+0x19b0>
   12d50:	mov	r0, #4096	; 0x1000
   12d54:	ldr	r1, [r4, #36]	; 0x24
   12d58:	add	r0, r0, #256	; 0x100
   12d5c:	adds	r1, r0, r1
   12d60:	bcc	12d84 <__assert_fail@plt+0x19e0>
   12d64:	ldr	r0, [r4, #24]
   12d68:	bl	19a44 <__assert_fail@plt+0x86a0>
   12d6c:	mov	r0, #0
   12d70:	str	r0, [r4, #24]
   12d74:	bl	11260 <__errno_location@plt>
   12d78:	mov	r1, #36	; 0x24
   12d7c:	str	r1, [r0]
   12d80:	b	130cc <__assert_fail@plt+0x1d28>
   12d84:	str	r1, [r4, #36]	; 0x24
   12d88:	ldr	r0, [r4, #24]
   12d8c:	bl	19558 <__assert_fail@plt+0x81b4>
   12d90:	cmp	r0, #0
   12d94:	beq	12df8 <__assert_fail@plt+0x1a54>
   12d98:	str	r0, [r4, #24]
   12d9c:	ldr	r0, [r7]
   12da0:	cmp	r0, #0
   12da4:	beq	12e0c <__assert_fail@plt+0x1a68>
   12da8:	mov	r0, #176	; 0xb0
   12dac:	bl	19528 <__assert_fail@plt+0x8184>
   12db0:	cmp	r0, #0
   12db4:	beq	130c4 <__assert_fail@plt+0x1d20>
   12db8:	ldr	r1, [r4, #24]
   12dbc:	mov	r8, r0
   12dc0:	mov	r0, #0
   12dc4:	mov	r2, #196608	; 0x30000
   12dc8:	strb	r0, [r8, #168]	; 0xa8
   12dcc:	str	r2, [r8, #58]	; 0x3a
   12dd0:	mvn	r2, #0
   12dd4:	str	r0, [r8, #12]
   12dd8:	str	r0, [r8, #16]
   12ddc:	str	r0, [r8, #20]
   12de0:	str	r4, [r8, #44]	; 0x2c
   12de4:	str	r2, [r8, #48]	; 0x30
   12de8:	str	r0, [r8, #52]	; 0x34
   12dec:	str	r1, [r8, #28]
   12df0:	str	r0, [r8, #32]
   12df4:	b	12e10 <__assert_fail@plt+0x1a6c>
   12df8:	ldr	r0, [r4, #24]
   12dfc:	bl	19a44 <__assert_fail@plt+0x86a0>
   12e00:	mov	r0, #0
   12e04:	str	r0, [r4, #24]
   12e08:	b	130cc <__assert_fail@plt+0x1d28>
   12e0c:	mov	r8, #0
   12e10:	cmp	sl, #0
   12e14:	ldrbne	r0, [r4, #49]	; 0x31
   12e18:	ubfxne	r0, r0, #2, #1
   12e1c:	ldr	r4, [r7]
   12e20:	moveq	r0, #1
   12e24:	cmp	r4, #0
   12e28:	beq	12f94 <__assert_fail@plt+0x1bf0>
   12e2c:	eor	r0, r0, #1
   12e30:	and	r1, r5, #2048	; 0x800
   12e34:	mov	r9, #0
   12e38:	mov	r6, #0
   12e3c:	str	r8, [sp, #16]
   12e40:	str	sl, [sp, #8]
   12e44:	str	r0, [sp, #12]
   12e48:	mov	r0, #0
   12e4c:	str	r1, [sp, #20]
   12e50:	str	r0, [sp, #4]
   12e54:	mov	r0, r4
   12e58:	bl	1123c <strlen@plt>
   12e5c:	mov	r8, r0
   12e60:	ldr	r0, [sp, #20]
   12e64:	cmp	r0, #0
   12e68:	bne	12ea0 <__assert_fail@plt+0x1afc>
   12e6c:	cmp	r8, #3
   12e70:	bcc	12ea0 <__assert_fail@plt+0x1afc>
   12e74:	add	r0, r4, r8
   12e78:	ldrb	r0, [r0, #-1]
   12e7c:	cmp	r0, #47	; 0x2f
   12e80:	bne	12ea0 <__assert_fail@plt+0x1afc>
   12e84:	sub	r0, r4, #2
   12e88:	ldrb	r1, [r0, r8]
   12e8c:	cmp	r1, #47	; 0x2f
   12e90:	bne	12ea0 <__assert_fail@plt+0x1afc>
   12e94:	sub	r8, r8, #1
   12e98:	cmp	r8, #1
   12e9c:	bhi	12e88 <__assert_fail@plt+0x1ae4>
   12ea0:	add	r0, r8, #176	; 0xb0
   12ea4:	bic	r0, r0, #7
   12ea8:	bl	19528 <__assert_fail@plt+0x8184>
   12eac:	cmp	r0, #0
   12eb0:	beq	12fa0 <__assert_fail@plt+0x1bfc>
   12eb4:	add	sl, r0, #168	; 0xa8
   12eb8:	mov	r5, r0
   12ebc:	mov	r1, r4
   12ec0:	mov	r2, r8
   12ec4:	mov	r0, sl
   12ec8:	bl	11128 <memcpy@plt>
   12ecc:	ldr	r0, [sp, #24]
   12ed0:	mov	r4, #0
   12ed4:	mov	r2, #196608	; 0x30000
   12ed8:	strb	r4, [sl, r8]
   12edc:	str	r2, [r5, #58]	; 0x3a
   12ee0:	add	r2, r5, #44	; 0x2c
   12ee4:	ldr	r1, [r0, #24]
   12ee8:	stm	r2, {r0, r4, r8}
   12eec:	ldr	r8, [sp, #16]
   12ef0:	ldr	r2, [sp, #12]
   12ef4:	str	r8, [r5, #4]
   12ef8:	str	r4, [r5, #12]
   12efc:	str	r4, [r5, #16]
   12f00:	str	r4, [r5, #20]
   12f04:	str	sl, [r5, #24]
   12f08:	str	r1, [r5, #28]
   12f0c:	clz	r1, r9
   12f10:	str	r4, [r5, #32]
   12f14:	lsr	r1, r1, #5
   12f18:	orrs	r1, r2, r1
   12f1c:	bne	12f34 <__assert_fail@plt+0x1b90>
   12f20:	mov	r0, #2
   12f24:	str	r0, [r5, #112]	; 0x70
   12f28:	str	r4, [r5, #116]	; 0x74
   12f2c:	mov	r0, #11
   12f30:	b	12f40 <__assert_fail@plt+0x1b9c>
   12f34:	mov	r1, r5
   12f38:	mov	r2, #0
   12f3c:	bl	13164 <__assert_fail@plt+0x1dc0>
   12f40:	ldr	sl, [sp, #8]
   12f44:	strh	r0, [r5, #56]	; 0x38
   12f48:	cmp	sl, #0
   12f4c:	beq	12f5c <__assert_fail@plt+0x1bb8>
   12f50:	str	r9, [r5, #8]
   12f54:	mov	r9, r5
   12f58:	b	12f74 <__assert_fail@plt+0x1bd0>
   12f5c:	cmp	r9, #0
   12f60:	str	r4, [r5, #8]
   12f64:	beq	12f88 <__assert_fail@plt+0x1be4>
   12f68:	ldr	r0, [sp, #4]
   12f6c:	str	r5, [sp, #4]
   12f70:	str	r5, [r0, #8]
   12f74:	ldr	r4, [r7, #4]!
   12f78:	add	r6, r6, #1
   12f7c:	cmp	r4, #0
   12f80:	bne	12e54 <__assert_fail@plt+0x1ab0>
   12f84:	b	12fb0 <__assert_fail@plt+0x1c0c>
   12f88:	mov	r0, r5
   12f8c:	str	r5, [sp, #4]
   12f90:	b	12f54 <__assert_fail@plt+0x1bb0>
   12f94:	ldr	r4, [sp, #24]
   12f98:	mov	r9, #0
   12f9c:	b	12fe0 <__assert_fail@plt+0x1c3c>
   12fa0:	ldr	r8, [sp, #16]
   12fa4:	cmp	r9, #0
   12fa8:	bne	13090 <__assert_fail@plt+0x1cec>
   12fac:	b	130b8 <__assert_fail@plt+0x1d14>
   12fb0:	cmp	sl, #0
   12fb4:	beq	12fdc <__assert_fail@plt+0x1c38>
   12fb8:	ldr	r4, [sp, #24]
   12fbc:	cmp	r6, #2
   12fc0:	bcc	12fe0 <__assert_fail@plt+0x1c3c>
   12fc4:	mov	r0, r4
   12fc8:	mov	r1, r9
   12fcc:	mov	r2, r6
   12fd0:	bl	132fc <__assert_fail@plt+0x1f58>
   12fd4:	mov	r9, r0
   12fd8:	b	12fe0 <__assert_fail@plt+0x1c3c>
   12fdc:	ldr	r4, [sp, #24]
   12fe0:	mov	r0, #176	; 0xb0
   12fe4:	bl	19528 <__assert_fail@plt+0x8184>
   12fe8:	cmp	r0, #0
   12fec:	beq	13080 <__assert_fail@plt+0x1cdc>
   12ff0:	ldr	r2, [r4, #24]
   12ff4:	mov	r1, #0
   12ff8:	mov	r3, #196608	; 0x30000
   12ffc:	str	r0, [r4]
   13000:	str	r1, [r0, #52]	; 0x34
   13004:	strb	r1, [r0, #168]	; 0xa8
   13008:	str	r4, [r0, #44]	; 0x2c
   1300c:	str	r3, [r0, #58]	; 0x3a
   13010:	str	r2, [r0, #28]
   13014:	mov	r2, #9
   13018:	str	r1, [r0, #32]
   1301c:	strh	r2, [r0, #56]	; 0x38
   13020:	str	r9, [r0, #8]
   13024:	str	r1, [r0, #12]
   13028:	str	r1, [r0, #16]
   1302c:	str	r1, [r0, #20]
   13030:	mov	r1, #1
   13034:	str	r1, [r0, #48]	; 0x30
   13038:	ldrh	r0, [r4, #48]	; 0x30
   1303c:	movw	r1, #258	; 0x102
   13040:	tst	r0, r1
   13044:	beq	130dc <__assert_fail@plt+0x1d38>
   13048:	movw	r0, #39492	; 0x9a44
   1304c:	movw	r2, #20008	; 0x4e28
   13050:	movw	r3, #20040	; 0x4e48
   13054:	mov	r1, #0
   13058:	movt	r0, #1
   1305c:	movt	r2, #1
   13060:	movt	r3, #1
   13064:	str	r0, [sp]
   13068:	mov	r0, #31
   1306c:	bl	154b8 <__assert_fail@plt+0x4114>
   13070:	cmp	r0, #0
   13074:	str	r0, [r4, #56]	; 0x38
   13078:	bne	130f4 <__assert_fail@plt+0x1d50>
   1307c:	b	13088 <__assert_fail@plt+0x1ce4>
   13080:	mov	r0, #0
   13084:	str	r0, [r4]
   13088:	cmp	r9, #0
   1308c:	beq	130b8 <__assert_fail@plt+0x1d14>
   13090:	ldrd	r4, [r9, #8]
   13094:	cmp	r5, #0
   13098:	beq	130a4 <__assert_fail@plt+0x1d00>
   1309c:	mov	r0, r5
   130a0:	bl	11398 <closedir@plt>
   130a4:	mov	r0, r9
   130a8:	bl	19a44 <__assert_fail@plt+0x86a0>
   130ac:	cmp	r4, #0
   130b0:	mov	r9, r4
   130b4:	bne	13090 <__assert_fail@plt+0x1cec>
   130b8:	mov	r0, r8
   130bc:	bl	19a44 <__assert_fail@plt+0x86a0>
   130c0:	ldr	r4, [sp, #24]
   130c4:	ldr	r0, [r4, #24]
   130c8:	bl	19a44 <__assert_fail@plt+0x86a0>
   130cc:	mov	r0, r4
   130d0:	bl	19a44 <__assert_fail@plt+0x86a0>
   130d4:	mov	r4, #0
   130d8:	b	12cc4 <__assert_fail@plt+0x1920>
   130dc:	mov	r0, #32
   130e0:	bl	19528 <__assert_fail@plt+0x8184>
   130e4:	cmp	r0, #0
   130e8:	str	r0, [r4, #56]	; 0x38
   130ec:	beq	13088 <__assert_fail@plt+0x1ce4>
   130f0:	bl	19630 <__assert_fail@plt+0x828c>
   130f4:	ldr	r4, [sp, #24]
   130f8:	ldr	r0, [r4, #48]	; 0x30
   130fc:	tst	r0, #516	; 0x204
   13100:	bne	13154 <__assert_fail@plt+0x1db0>
   13104:	mov	r1, #32768	; 0x8000
   13108:	tst	r0, #512	; 0x200
   1310c:	and	r1, r1, r0, lsl #11
   13110:	orr	r1, r1, #18688	; 0x4900
   13114:	orr	r2, r1, #524288	; 0x80000
   13118:	bne	13130 <__assert_fail@plt+0x1d8c>
   1311c:	movw	r0, #43324	; 0xa93c
   13120:	mov	r1, r2
   13124:	movt	r0, #1
   13128:	bl	199a0 <__assert_fail@plt+0x85fc>
   1312c:	b	13140 <__assert_fail@plt+0x1d9c>
   13130:	ldr	r0, [r4, #32]
   13134:	movw	r1, #43324	; 0xa93c
   13138:	movt	r1, #1
   1313c:	bl	16954 <__assert_fail@plt+0x55b0>
   13140:	str	r0, [r4, #28]
   13144:	cmn	r0, #1
   13148:	ldrle	r0, [r4, #48]	; 0x30
   1314c:	orrle	r0, r0, #4
   13150:	strle	r0, [r4, #48]	; 0x30
   13154:	add	r0, r4, #60	; 0x3c
   13158:	mvn	r1, #0
   1315c:	bl	162e0 <__assert_fail@plt+0x4f3c>
   13160:	b	12cc4 <__assert_fail@plt+0x1920>
   13164:	push	{r4, r5, r6, sl, fp, lr}
   13168:	add	fp, sp, #16
   1316c:	sub	sp, sp, #8
   13170:	mov	r4, r1
   13174:	ldr	r1, [r0, #48]	; 0x30
   13178:	ldr	r3, [r4, #48]	; 0x30
   1317c:	add	r5, r4, #64	; 0x40
   13180:	cmp	r3, #0
   13184:	andeq	r3, r1, #1
   13188:	orreq	r2, r3, r2
   1318c:	cmp	r2, #0
   13190:	andseq	r1, r1, #2
   13194:	beq	131f0 <__assert_fail@plt+0x1e4c>
   13198:	ldr	r1, [r4, #24]
   1319c:	mov	r0, #3
   131a0:	mov	r2, r5
   131a4:	bl	1135c <__xstat64@plt>
   131a8:	cmp	r0, #0
   131ac:	beq	13270 <__assert_fail@plt+0x1ecc>
   131b0:	bl	11260 <__errno_location@plt>
   131b4:	mov	r6, r0
   131b8:	ldr	r0, [r0]
   131bc:	cmp	r0, #2
   131c0:	bne	13220 <__assert_fail@plt+0x1e7c>
   131c4:	ldr	r1, [r4, #24]
   131c8:	mov	r0, #3
   131cc:	mov	r2, r5
   131d0:	bl	1138c <__lxstat64@plt>
   131d4:	cmp	r0, #0
   131d8:	bne	1321c <__assert_fail@plt+0x1e78>
   131dc:	mov	r0, #0
   131e0:	str	r0, [r6]
   131e4:	mov	r0, #13
   131e8:	sub	sp, fp, #16
   131ec:	pop	{r4, r5, r6, sl, fp, pc}
   131f0:	ldr	r1, [r0, #32]
   131f4:	ldr	r2, [r4, #24]
   131f8:	mov	r0, #256	; 0x100
   131fc:	mov	r3, r5
   13200:	str	r0, [sp]
   13204:	mov	r0, #3
   13208:	bl	11170 <__fxstatat64@plt>
   1320c:	cmp	r0, #0
   13210:	beq	13270 <__assert_fail@plt+0x1ecc>
   13214:	bl	11260 <__errno_location@plt>
   13218:	mov	r6, r0
   1321c:	ldr	r0, [r6]
   13220:	vmov.i32	q8, #0	; 0x00000000
   13224:	add	r1, r5, #80	; 0x50
   13228:	str	r0, [r4, #32]
   1322c:	mov	r0, #0
   13230:	vst1.64	{d16-d17}, [r1]
   13234:	add	r1, r5, #64	; 0x40
   13238:	str	r0, [r5, #96]	; 0x60
   1323c:	vst1.64	{d16-d17}, [r1]
   13240:	add	r1, r5, #48	; 0x30
   13244:	vst1.64	{d16-d17}, [r1]
   13248:	add	r1, r5, #32
   1324c:	vst1.64	{d16-d17}, [r1]
   13250:	add	r1, r5, #16
   13254:	vst1.64	{d16-d17}, [r1]
   13258:	mov	r1, #100	; 0x64
   1325c:	vst1.64	{d16-d17}, [r5], r1
   13260:	str	r0, [r5]
   13264:	mov	r0, #10
   13268:	sub	sp, fp, #16
   1326c:	pop	{r4, r5, r6, sl, fp, pc}
   13270:	ldr	r0, [r4, #80]	; 0x50
   13274:	and	r0, r0, #61440	; 0xf000
   13278:	cmp	r0, #40960	; 0xa000
   1327c:	beq	132d8 <__assert_fail@plt+0x1f34>
   13280:	cmp	r0, #32768	; 0x8000
   13284:	moveq	r0, #8
   13288:	subeq	sp, fp, #16
   1328c:	popeq	{r4, r5, r6, sl, fp, pc}
   13290:	cmp	r0, #16384	; 0x4000
   13294:	bne	132cc <__assert_fail@plt+0x1f28>
   13298:	ldrb	r1, [r4, #168]	; 0xa8
   1329c:	mov	r0, #1
   132a0:	cmp	r1, #46	; 0x2e
   132a4:	bne	132c4 <__assert_fail@plt+0x1f20>
   132a8:	ldrb	r1, [r4, #169]	; 0xa9
   132ac:	cmp	r1, #0
   132b0:	beq	132e4 <__assert_fail@plt+0x1f40>
   132b4:	cmp	r1, #46	; 0x2e
   132b8:	ldrbeq	r1, [r4, #170]	; 0xaa
   132bc:	cmpeq	r1, #0
   132c0:	beq	132e4 <__assert_fail@plt+0x1f40>
   132c4:	sub	sp, fp, #16
   132c8:	pop	{r4, r5, r6, sl, fp, pc}
   132cc:	mov	r0, #3
   132d0:	sub	sp, fp, #16
   132d4:	pop	{r4, r5, r6, sl, fp, pc}
   132d8:	mov	r0, #12
   132dc:	sub	sp, fp, #16
   132e0:	pop	{r4, r5, r6, sl, fp, pc}
   132e4:	ldr	r1, [r4, #48]	; 0x30
   132e8:	mov	r0, #5
   132ec:	cmp	r1, #0
   132f0:	movweq	r0, #1
   132f4:	sub	sp, fp, #16
   132f8:	pop	{r4, r5, r6, sl, fp, pc}
   132fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13300:	add	fp, sp, #24
   13304:	ldrd	r8, [r0, #40]	; 0x28
   13308:	mov	r5, r2
   1330c:	mov	r4, r1
   13310:	mov	r6, r0
   13314:	cmp	r8, r2
   13318:	bcs	13358 <__assert_fail@plt+0x1fb4>
   1331c:	add	r1, r5, #40	; 0x28
   13320:	cmn	r1, #-1073741823	; 0xc0000001
   13324:	str	r1, [r6, #40]	; 0x28
   13328:	bhi	133e4 <__assert_fail@plt+0x2040>
   1332c:	add	r7, r6, #8
   13330:	lsl	r1, r1, #2
   13334:	ldr	r0, [r7]
   13338:	bl	19558 <__assert_fail@plt+0x81b4>
   1333c:	cmp	r0, #0
   13340:	beq	133e4 <__assert_fail@plt+0x2040>
   13344:	mov	r6, r7
   13348:	str	r0, [r7]
   1334c:	cmp	r4, #0
   13350:	bne	13364 <__assert_fail@plt+0x1fc0>
   13354:	b	13378 <__assert_fail@plt+0x1fd4>
   13358:	ldr	r0, [r6, #8]!
   1335c:	cmp	r4, #0
   13360:	beq	13378 <__assert_fail@plt+0x1fd4>
   13364:	str	r4, [r0], #4
   13368:	ldr	r4, [r4, #8]
   1336c:	cmp	r4, #0
   13370:	bne	13364 <__assert_fail@plt+0x1fc0>
   13374:	ldr	r0, [r6]
   13378:	mov	r1, r5
   1337c:	mov	r2, #4
   13380:	mov	r3, r9
   13384:	bl	1132c <qsort@plt>
   13388:	ldr	r7, [r6]
   1338c:	subs	r0, r5, #1
   13390:	ldr	r4, [r7]
   13394:	mov	r1, r4
   13398:	beq	133d4 <__assert_fail@plt+0x2030>
   1339c:	mov	r1, r7
   133a0:	cmp	r5, #2
   133a4:	ldr	r2, [r1, #4]!
   133a8:	str	r2, [r4, #8]
   133ac:	beq	133d0 <__assert_fail@plt+0x202c>
   133b0:	rsb	r3, r5, #2
   133b4:	mov	r2, r1
   133b8:	ldr	r6, [r2, #4]!
   133bc:	ldr	r1, [r1]
   133c0:	adds	r3, r3, #1
   133c4:	str	r6, [r1, #8]
   133c8:	mov	r1, r2
   133cc:	bne	133b8 <__assert_fail@plt+0x2014>
   133d0:	ldr	r1, [r7, r0, lsl #2]
   133d4:	mov	r0, #0
   133d8:	str	r0, [r1, #8]
   133dc:	mov	r0, r4
   133e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   133e4:	ldr	r0, [r6, #8]
   133e8:	bl	19a44 <__assert_fail@plt+0x86a0>
   133ec:	mov	r0, #0
   133f0:	str	r0, [r6, #40]	; 0x28
   133f4:	str	r0, [r6, #8]
   133f8:	mov	r0, r4
   133fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13400:	push	{r4, r5, r6, r7, fp, lr}
   13404:	add	fp, sp, #16
   13408:	mov	r4, r0
   1340c:	ldr	r0, [r0]
   13410:	cmp	r0, #0
   13414:	beq	13454 <__assert_fail@plt+0x20b0>
   13418:	ldr	r1, [r0, #48]	; 0x30
   1341c:	cmp	r1, #0
   13420:	blt	13448 <__assert_fail@plt+0x20a4>
   13424:	ldr	r5, [r0, #8]
   13428:	cmp	r5, #0
   1342c:	ldreq	r5, [r0, #4]
   13430:	bl	19a44 <__assert_fail@plt+0x86a0>
   13434:	ldr	r0, [r5, #48]	; 0x30
   13438:	cmn	r0, #1
   1343c:	mov	r0, r5
   13440:	bgt	13424 <__assert_fail@plt+0x2080>
   13444:	b	1344c <__assert_fail@plt+0x20a8>
   13448:	mov	r5, r0
   1344c:	mov	r0, r5
   13450:	bl	19a44 <__assert_fail@plt+0x86a0>
   13454:	ldr	r5, [r4, #4]
   13458:	cmp	r5, #0
   1345c:	beq	13488 <__assert_fail@plt+0x20e4>
   13460:	ldrd	r6, [r5, #8]
   13464:	cmp	r7, #0
   13468:	beq	13474 <__assert_fail@plt+0x20d0>
   1346c:	mov	r0, r7
   13470:	bl	11398 <closedir@plt>
   13474:	mov	r0, r5
   13478:	bl	19a44 <__assert_fail@plt+0x86a0>
   1347c:	cmp	r6, #0
   13480:	mov	r5, r6
   13484:	bne	13460 <__assert_fail@plt+0x20bc>
   13488:	ldr	r0, [r4, #8]
   1348c:	bl	19a44 <__assert_fail@plt+0x86a0>
   13490:	ldr	r0, [r4, #24]
   13494:	bl	19a44 <__assert_fail@plt+0x86a0>
   13498:	ldr	r0, [r4, #48]	; 0x30
   1349c:	tst	r0, #512	; 0x200
   134a0:	bne	134cc <__assert_fail@plt+0x2128>
   134a4:	mov	r6, #0
   134a8:	tst	r0, #4
   134ac:	bne	13510 <__assert_fail@plt+0x216c>
   134b0:	ldr	r0, [r4, #28]
   134b4:	bl	11320 <fchdir@plt>
   134b8:	cmp	r0, #0
   134bc:	beq	134ec <__assert_fail@plt+0x2148>
   134c0:	bl	11260 <__errno_location@plt>
   134c4:	ldr	r6, [r0]
   134c8:	b	134f0 <__assert_fail@plt+0x214c>
   134cc:	ldr	r0, [r4, #32]
   134d0:	mov	r6, #0
   134d4:	cmp	r0, #0
   134d8:	blt	13510 <__assert_fail@plt+0x216c>
   134dc:	bl	11380 <close@plt>
   134e0:	cmp	r0, #0
   134e4:	bne	13508 <__assert_fail@plt+0x2164>
   134e8:	b	13510 <__assert_fail@plt+0x216c>
   134ec:	mov	r6, #0
   134f0:	ldr	r0, [r4, #28]
   134f4:	bl	11380 <close@plt>
   134f8:	cmp	r6, #0
   134fc:	bne	13510 <__assert_fail@plt+0x216c>
   13500:	cmp	r0, #0
   13504:	beq	13510 <__assert_fail@plt+0x216c>
   13508:	bl	11260 <__errno_location@plt>
   1350c:	ldr	r6, [r0]
   13510:	add	r5, r4, #60	; 0x3c
   13514:	b	1351c <__assert_fail@plt+0x2178>
   13518:	bl	11380 <close@plt>
   1351c:	mov	r0, r5
   13520:	bl	16304 <__assert_fail@plt+0x4f60>
   13524:	cmp	r0, #0
   13528:	bne	13540 <__assert_fail@plt+0x219c>
   1352c:	mov	r0, r5
   13530:	bl	16358 <__assert_fail@plt+0x4fb4>
   13534:	cmp	r0, #0
   13538:	bge	13518 <__assert_fail@plt+0x2174>
   1353c:	b	1351c <__assert_fail@plt+0x2178>
   13540:	ldr	r0, [r4, #52]	; 0x34
   13544:	cmp	r0, #0
   13548:	beq	13550 <__assert_fail@plt+0x21ac>
   1354c:	bl	157b0 <__assert_fail@plt+0x440c>
   13550:	ldrh	r0, [r4, #48]	; 0x30
   13554:	movw	r1, #258	; 0x102
   13558:	tst	r0, r1
   1355c:	beq	13574 <__assert_fail@plt+0x21d0>
   13560:	ldr	r0, [r4, #56]	; 0x38
   13564:	cmp	r0, #0
   13568:	beq	1357c <__assert_fail@plt+0x21d8>
   1356c:	bl	157b0 <__assert_fail@plt+0x440c>
   13570:	b	1357c <__assert_fail@plt+0x21d8>
   13574:	ldr	r0, [r4, #56]	; 0x38
   13578:	bl	19a44 <__assert_fail@plt+0x86a0>
   1357c:	mov	r0, r4
   13580:	bl	19a44 <__assert_fail@plt+0x86a0>
   13584:	cmp	r6, #0
   13588:	moveq	r0, #0
   1358c:	popeq	{r4, r5, r6, r7, fp, pc}
   13590:	bl	11260 <__errno_location@plt>
   13594:	str	r6, [r0]
   13598:	mvn	r0, #0
   1359c:	pop	{r4, r5, r6, r7, fp, pc}
   135a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135a4:	add	fp, sp, #24
   135a8:	sub	sp, sp, #8
   135ac:	ldr	r6, [r0]
   135b0:	mov	r5, #0
   135b4:	cmp	r6, #0
   135b8:	beq	13cec <__assert_fail@plt+0x2948>
   135bc:	mov	r4, r0
   135c0:	ldr	r0, [r0, #48]	; 0x30
   135c4:	tst	r0, #8192	; 0x2000
   135c8:	bne	13cec <__assert_fail@plt+0x2948>
   135cc:	ldrh	r1, [r6, #60]	; 0x3c
   135d0:	mov	r2, #3
   135d4:	strh	r2, [r6, #60]	; 0x3c
   135d8:	cmp	r1, #1
   135dc:	beq	13654 <__assert_fail@plt+0x22b0>
   135e0:	mov	r7, r6
   135e4:	cmp	r1, #2
   135e8:	bne	13670 <__assert_fail@plt+0x22cc>
   135ec:	ldrh	r2, [r7, #56]!	; 0x38
   135f0:	movw	r3, #65534	; 0xfffe
   135f4:	and	r3, r2, r3
   135f8:	cmp	r3, #12
   135fc:	bne	13674 <__assert_fail@plt+0x22d0>
   13600:	mov	r0, r4
   13604:	mov	r1, r6
   13608:	mov	r2, #1
   1360c:	bl	13164 <__assert_fail@plt+0x1dc0>
   13610:	cmp	r0, #1
   13614:	strh	r0, [r6, #56]	; 0x38
   13618:	bne	1375c <__assert_fail@plt+0x23b8>
   1361c:	ldr	r0, [r4, #48]	; 0x30
   13620:	tst	r0, #4
   13624:	bne	1375c <__assert_fail@plt+0x23b8>
   13628:	mov	r1, #32768	; 0x8000
   1362c:	tst	r0, #512	; 0x200
   13630:	and	r1, r1, r0, lsl #11
   13634:	orr	r1, r1, #18688	; 0x4900
   13638:	orr	r2, r1, #524288	; 0x80000
   1363c:	bne	139c8 <__assert_fail@plt+0x2624>
   13640:	movw	r0, #43324	; 0xa93c
   13644:	mov	r1, r2
   13648:	movt	r0, #1
   1364c:	bl	199a0 <__assert_fail@plt+0x85fc>
   13650:	b	139d8 <__assert_fail@plt+0x2634>
   13654:	mov	r0, r4
   13658:	mov	r1, r6
   1365c:	mov	r2, #0
   13660:	bl	13164 <__assert_fail@plt+0x1dc0>
   13664:	strh	r0, [r6, #56]	; 0x38
   13668:	mov	r5, r6
   1366c:	b	13cec <__assert_fail@plt+0x2948>
   13670:	ldrh	r2, [r7, #56]!	; 0x38
   13674:	cmp	r2, #1
   13678:	bne	136f0 <__assert_fail@plt+0x234c>
   1367c:	cmp	r1, #4
   13680:	bne	13764 <__assert_fail@plt+0x23c0>
   13684:	ldrb	r0, [r6, #58]	; 0x3a
   13688:	tst	r0, #2
   1368c:	beq	13698 <__assert_fail@plt+0x22f4>
   13690:	ldr	r0, [r6, #36]	; 0x24
   13694:	bl	11380 <close@plt>
   13698:	ldr	r5, [r4, #4]
   1369c:	cmp	r5, #0
   136a0:	beq	136d4 <__assert_fail@plt+0x2330>
   136a4:	ldrd	r8, [r5, #8]
   136a8:	cmp	r9, #0
   136ac:	beq	136b8 <__assert_fail@plt+0x2314>
   136b0:	mov	r0, r9
   136b4:	bl	11398 <closedir@plt>
   136b8:	mov	r0, r5
   136bc:	bl	19a44 <__assert_fail@plt+0x86a0>
   136c0:	cmp	r8, #0
   136c4:	mov	r5, r8
   136c8:	bne	136a4 <__assert_fail@plt+0x2300>
   136cc:	mov	r0, #0
   136d0:	str	r0, [r4, #4]
   136d4:	mov	r0, #6
   136d8:	strh	r0, [r6, #56]	; 0x38
   136dc:	mov	r0, r4
   136e0:	mov	r1, r6
   136e4:	bl	13cfc <__assert_fail@plt+0x2958>
   136e8:	mov	r5, r6
   136ec:	b	13cec <__assert_fail@plt+0x2948>
   136f0:	ldr	r5, [r6, #8]
   136f4:	cmp	r5, #0
   136f8:	beq	137f4 <__assert_fail@plt+0x2450>
   136fc:	mov	r0, r6
   13700:	str	r5, [r4]
   13704:	bl	19a44 <__assert_fail@plt+0x86a0>
   13708:	ldr	r0, [r5, #48]	; 0x30
   1370c:	cmp	r0, #0
   13710:	beq	13840 <__assert_fail@plt+0x249c>
   13714:	ldrh	r0, [r5, #60]	; 0x3c
   13718:	mov	r6, r5
   1371c:	cmp	r0, #4
   13720:	beq	136f0 <__assert_fail@plt+0x234c>
   13724:	cmp	r0, #2
   13728:	bne	138e0 <__assert_fail@plt+0x253c>
   1372c:	mov	r0, r4
   13730:	mov	r1, r5
   13734:	mov	r2, #1
   13738:	bl	13164 <__assert_fail@plt+0x1dc0>
   1373c:	strh	r0, [r5, #56]	; 0x38
   13740:	cmp	r0, #1
   13744:	ldreq	r0, [r4, #48]	; 0x30
   13748:	tsteq	r0, #4
   1374c:	beq	13c04 <__assert_fail@plt+0x2860>
   13750:	mov	r0, #3
   13754:	strh	r0, [r5, #60]	; 0x3c
   13758:	b	138e0 <__assert_fail@plt+0x253c>
   1375c:	mov	r5, r6
   13760:	b	1391c <__assert_fail@plt+0x2578>
   13764:	tst	r0, #64	; 0x40
   13768:	beq	13784 <__assert_fail@plt+0x23e0>
   1376c:	ldrd	r2, [r4, #16]
   13770:	ldrd	r8, [r6, #64]	; 0x40
   13774:	eor	r1, r9, r3
   13778:	eor	r2, r8, r2
   1377c:	orrs	r1, r2, r1
   13780:	bne	13684 <__assert_fail@plt+0x22e0>
   13784:	ldr	r5, [r4, #4]
   13788:	cmp	r5, #0
   1378c:	beq	138bc <__assert_fail@plt+0x2518>
   13790:	tst	r0, #4096	; 0x1000
   13794:	bne	13884 <__assert_fail@plt+0x24e0>
   13798:	ldr	r3, [r6, #24]
   1379c:	mov	r0, r4
   137a0:	mov	r1, r6
   137a4:	mvn	r2, #0
   137a8:	bl	13dcc <__assert_fail@plt+0x2a28>
   137ac:	cmp	r0, #0
   137b0:	beq	138d4 <__assert_fail@plt+0x2530>
   137b4:	bl	11260 <__errno_location@plt>
   137b8:	ldr	r0, [r0]
   137bc:	str	r0, [r6, #32]
   137c0:	ldrh	r0, [r6, #58]	; 0x3a
   137c4:	orr	r0, r0, #1
   137c8:	strh	r0, [r6, #58]	; 0x3a
   137cc:	ldr	r0, [r4, #4]
   137d0:	cmp	r0, #0
   137d4:	beq	138d4 <__assert_fail@plt+0x2530>
   137d8:	ldmib	r0, {r1, r2}
   137dc:	ldr	r1, [r1, #24]
   137e0:	cmp	r2, #0
   137e4:	str	r1, [r0, #24]
   137e8:	mov	r0, r2
   137ec:	bne	137d8 <__assert_fail@plt+0x2434>
   137f0:	b	138d4 <__assert_fail@plt+0x2530>
   137f4:	ldr	r5, [r6, #4]
   137f8:	ldr	r0, [r5, #12]
   137fc:	cmp	r0, #0
   13800:	beq	13a08 <__assert_fail@plt+0x2664>
   13804:	str	r5, [r4]
   13808:	ldr	r1, [r5, #40]	; 0x28
   1380c:	ldr	r0, [r4, #24]
   13810:	mov	r5, #0
   13814:	strb	r5, [r0, r1]
   13818:	mov	r0, r4
   1381c:	mov	r1, #3
   13820:	bl	14024 <__assert_fail@plt+0x2c80>
   13824:	cmp	r0, #0
   13828:	beq	139f8 <__assert_fail@plt+0x2654>
   1382c:	mov	r7, r0
   13830:	mov	r0, r6
   13834:	bl	19a44 <__assert_fail@plt+0x86a0>
   13838:	mov	r5, r7
   1383c:	b	138e0 <__assert_fail@plt+0x253c>
   13840:	mov	r0, r4
   13844:	bl	14ad8 <__assert_fail@plt+0x3734>
   13848:	ldr	r1, [r4, #48]	; 0x30
   1384c:	cmp	r0, #0
   13850:	beq	13864 <__assert_fail@plt+0x24c0>
   13854:	orr	r0, r1, #8192	; 0x2000
   13858:	mov	r5, #0
   1385c:	str	r0, [r4, #48]	; 0x30
   13860:	b	13cec <__assert_fail@plt+0x2948>
   13864:	movw	r0, #258	; 0x102
   13868:	tst	r1, r0
   1386c:	beq	13ab8 <__assert_fail@plt+0x2714>
   13870:	ldr	r0, [r4, #56]	; 0x38
   13874:	cmp	r0, #0
   13878:	beq	13ac0 <__assert_fail@plt+0x271c>
   1387c:	bl	157b0 <__assert_fail@plt+0x440c>
   13880:	b	13ac0 <__assert_fail@plt+0x271c>
   13884:	bic	r0, r0, #4096	; 0x1000
   13888:	str	r0, [r4, #48]	; 0x30
   1388c:	ldrd	r8, [r5, #8]
   13890:	cmp	r9, #0
   13894:	beq	138a0 <__assert_fail@plt+0x24fc>
   13898:	mov	r0, r9
   1389c:	bl	11398 <closedir@plt>
   138a0:	mov	r0, r5
   138a4:	bl	19a44 <__assert_fail@plt+0x86a0>
   138a8:	cmp	r8, #0
   138ac:	mov	r5, r8
   138b0:	bne	1388c <__assert_fail@plt+0x24e8>
   138b4:	mov	r0, #0
   138b8:	str	r0, [r4, #4]
   138bc:	mov	r0, r4
   138c0:	mov	r1, #3
   138c4:	bl	14024 <__assert_fail@plt+0x2c80>
   138c8:	cmp	r0, #0
   138cc:	str	r0, [r4, #4]
   138d0:	beq	1399c <__assert_fail@plt+0x25f8>
   138d4:	ldr	r5, [r4, #4]
   138d8:	mov	r0, #0
   138dc:	str	r0, [r4, #4]
   138e0:	ldr	r0, [r5, #4]
   138e4:	ldr	r1, [r0, #28]
   138e8:	ldr	r0, [r0, #40]	; 0x28
   138ec:	sub	r2, r0, #1
   138f0:	ldrb	r1, [r1, r2]
   138f4:	cmp	r1, #47	; 0x2f
   138f8:	ldr	r1, [r4, #24]
   138fc:	moveq	r0, r2
   13900:	mov	r2, #47	; 0x2f
   13904:	strb	r2, [r1, r0]!
   13908:	ldr	r2, [r5, #52]	; 0x34
   1390c:	add	r0, r1, #1
   13910:	add	r1, r5, #168	; 0xa8
   13914:	add	r2, r2, #1
   13918:	bl	11104 <memmove@plt>
   1391c:	str	r5, [r4]
   13920:	ldrh	r0, [r5, #56]	; 0x38
   13924:	cmp	r0, #11
   13928:	bne	1395c <__assert_fail@plt+0x25b8>
   1392c:	ldrd	r0, [r5, #112]	; 0x70
   13930:	eor	r2, r0, #1
   13934:	orrs	r2, r2, r1
   13938:	beq	13cec <__assert_fail@plt+0x2948>
   1393c:	eor	r0, r0, #2
   13940:	orrs	r0, r0, r1
   13944:	bne	13cf8 <__assert_fail@plt+0x2954>
   13948:	mov	r0, r4
   1394c:	mov	r1, r5
   13950:	mov	r2, #0
   13954:	bl	13164 <__assert_fail@plt+0x1dc0>
   13958:	strh	r0, [r5, #56]	; 0x38
   1395c:	cmp	r0, #1
   13960:	bne	13cec <__assert_fail@plt+0x2948>
   13964:	ldr	r0, [r5, #48]	; 0x30
   13968:	cmp	r0, #0
   1396c:	ldrdeq	r0, [r5, #64]	; 0x40
   13970:	strdeq	r0, [r4, #16]
   13974:	mov	r0, r4
   13978:	mov	r1, r5
   1397c:	bl	14b68 <__assert_fail@plt+0x37c4>
   13980:	cmp	r0, #0
   13984:	bne	13cec <__assert_fail@plt+0x2948>
   13988:	bl	11260 <__errno_location@plt>
   1398c:	mov	r1, #12
   13990:	mov	r5, #0
   13994:	str	r1, [r0]
   13998:	b	13cec <__assert_fail@plt+0x2948>
   1399c:	ldrb	r0, [r4, #49]	; 0x31
   139a0:	mov	r5, #0
   139a4:	tst	r0, #32
   139a8:	bne	13cec <__assert_fail@plt+0x2948>
   139ac:	ldr	r0, [r6, #32]
   139b0:	cmp	r0, #0
   139b4:	ldrhne	r0, [r7]
   139b8:	cmpne	r0, #4
   139bc:	movne	r0, #7
   139c0:	strhne	r0, [r7]
   139c4:	b	136dc <__assert_fail@plt+0x2338>
   139c8:	ldr	r0, [r4, #32]
   139cc:	movw	r1, #43324	; 0xa93c
   139d0:	movt	r1, #1
   139d4:	bl	16954 <__assert_fail@plt+0x55b0>
   139d8:	cmn	r0, #1
   139dc:	str	r0, [r6, #36]	; 0x24
   139e0:	ble	13a9c <__assert_fail@plt+0x26f8>
   139e4:	ldrh	r0, [r6, #58]	; 0x3a
   139e8:	mov	r5, r6
   139ec:	orr	r0, r0, #2
   139f0:	strh	r0, [r6, #58]	; 0x3a
   139f4:	b	1391c <__assert_fail@plt+0x2578>
   139f8:	ldrb	r0, [r4, #49]	; 0x31
   139fc:	tst	r0, #32
   13a00:	bne	13cec <__assert_fail@plt+0x2948>
   13a04:	ldr	r5, [r6, #4]
   13a08:	mov	r0, r6
   13a0c:	str	r5, [r4]
   13a10:	bl	19a44 <__assert_fail@plt+0x86a0>
   13a14:	ldr	r0, [r5, #48]	; 0x30
   13a18:	cmn	r0, #1
   13a1c:	beq	13a80 <__assert_fail@plt+0x26dc>
   13a20:	ldrh	r0, [r5, #56]	; 0x38
   13a24:	cmp	r0, #11
   13a28:	beq	13cf8 <__assert_fail@plt+0x2954>
   13a2c:	ldr	r0, [r5, #40]	; 0x28
   13a30:	ldr	r1, [r4, #24]
   13a34:	mov	r2, #0
   13a38:	strb	r2, [r1, r0]
   13a3c:	ldr	r0, [r5, #48]	; 0x30
   13a40:	cmp	r0, #0
   13a44:	beq	13b90 <__assert_fail@plt+0x27ec>
   13a48:	ldrh	r0, [r5, #58]	; 0x3a
   13a4c:	tst	r0, #2
   13a50:	bne	13bbc <__assert_fail@plt+0x2818>
   13a54:	tst	r0, #1
   13a58:	bne	13cb0 <__assert_fail@plt+0x290c>
   13a5c:	ldr	r1, [r5, #4]
   13a60:	movw	r3, #43323	; 0xa93b
   13a64:	mov	r0, r4
   13a68:	mvn	r2, #0
   13a6c:	movt	r3, #1
   13a70:	bl	13dcc <__assert_fail@plt+0x2a28>
   13a74:	cmp	r0, #0
   13a78:	bne	13ba0 <__assert_fail@plt+0x27fc>
   13a7c:	b	13cb0 <__assert_fail@plt+0x290c>
   13a80:	mov	r0, r5
   13a84:	bl	19a44 <__assert_fail@plt+0x86a0>
   13a88:	bl	11260 <__errno_location@plt>
   13a8c:	mov	r5, #0
   13a90:	str	r5, [r0]
   13a94:	str	r5, [r4]
   13a98:	b	13cec <__assert_fail@plt+0x2948>
   13a9c:	bl	11260 <__errno_location@plt>
   13aa0:	ldr	r0, [r0]
   13aa4:	mov	r1, #7
   13aa8:	mov	r5, r6
   13aac:	strh	r1, [r6, #56]	; 0x38
   13ab0:	str	r0, [r6, #32]
   13ab4:	b	1391c <__assert_fail@plt+0x2578>
   13ab8:	ldr	r0, [r4, #56]	; 0x38
   13abc:	bl	19a44 <__assert_fail@plt+0x86a0>
   13ac0:	ldr	r1, [r5, #52]	; 0x34
   13ac4:	add	r6, r5, #168	; 0xa8
   13ac8:	str	r1, [r5, #40]	; 0x28
   13acc:	add	r2, r1, #1
   13ad0:	mov	r1, r6
   13ad4:	ldr	r0, [r4, #24]
   13ad8:	bl	11104 <memmove@plt>
   13adc:	mov	r0, r6
   13ae0:	mov	r1, #47	; 0x2f
   13ae4:	bl	112e4 <strrchr@plt>
   13ae8:	cmp	r0, #0
   13aec:	beq	13b28 <__assert_fail@plt+0x2784>
   13af0:	cmp	r0, r6
   13af4:	bne	13b04 <__assert_fail@plt+0x2760>
   13af8:	ldrb	r1, [r5, #169]	; 0xa9
   13afc:	cmp	r1, #0
   13b00:	beq	13b28 <__assert_fail@plt+0x2784>
   13b04:	add	r7, r0, #1
   13b08:	mov	r0, r7
   13b0c:	bl	1123c <strlen@plt>
   13b10:	mov	r8, r0
   13b14:	add	r2, r0, #1
   13b18:	mov	r0, r6
   13b1c:	mov	r1, r7
   13b20:	bl	11104 <memmove@plt>
   13b24:	str	r8, [r5, #52]	; 0x34
   13b28:	ldr	r0, [r4, #24]
   13b2c:	movw	r1, #258	; 0x102
   13b30:	str	r0, [r5, #24]
   13b34:	str	r0, [r5, #28]
   13b38:	ldrh	r0, [r4, #48]	; 0x30
   13b3c:	tst	r0, r1
   13b40:	beq	13b74 <__assert_fail@plt+0x27d0>
   13b44:	movw	r0, #39492	; 0x9a44
   13b48:	movw	r2, #20008	; 0x4e28
   13b4c:	movw	r3, #20040	; 0x4e48
   13b50:	mov	r1, #0
   13b54:	movt	r0, #1
   13b58:	movt	r2, #1
   13b5c:	movt	r3, #1
   13b60:	str	r0, [sp]
   13b64:	mov	r0, #31
   13b68:	bl	154b8 <__assert_fail@plt+0x4114>
   13b6c:	str	r0, [r4, #56]	; 0x38
   13b70:	b	1391c <__assert_fail@plt+0x2578>
   13b74:	mov	r0, #32
   13b78:	bl	19528 <__assert_fail@plt+0x8184>
   13b7c:	cmp	r0, #0
   13b80:	str	r0, [r4, #56]	; 0x38
   13b84:	beq	1391c <__assert_fail@plt+0x2578>
   13b88:	bl	19630 <__assert_fail@plt+0x828c>
   13b8c:	b	1391c <__assert_fail@plt+0x2578>
   13b90:	mov	r0, r4
   13b94:	bl	14ad8 <__assert_fail@plt+0x3734>
   13b98:	cmp	r0, #0
   13b9c:	beq	13cb0 <__assert_fail@plt+0x290c>
   13ba0:	bl	11260 <__errno_location@plt>
   13ba4:	ldr	r0, [r0]
   13ba8:	str	r0, [r5, #32]
   13bac:	ldr	r0, [r4, #48]	; 0x30
   13bb0:	orr	r0, r0, #8192	; 0x2000
   13bb4:	str	r0, [r4, #48]	; 0x30
   13bb8:	b	13cb0 <__assert_fail@plt+0x290c>
   13bbc:	ldr	r0, [r4, #48]	; 0x30
   13bc0:	tst	r0, #4
   13bc4:	bne	13c30 <__assert_fail@plt+0x288c>
   13bc8:	mov	r7, r5
   13bcc:	tst	r0, #512	; 0x200
   13bd0:	ldr	r6, [r7, #36]!	; 0x24
   13bd4:	bne	13c7c <__assert_fail@plt+0x28d8>
   13bd8:	mov	r0, r6
   13bdc:	bl	11320 <fchdir@plt>
   13be0:	cmp	r0, #0
   13be4:	beq	13ca8 <__assert_fail@plt+0x2904>
   13be8:	bl	11260 <__errno_location@plt>
   13bec:	ldr	r0, [r0]
   13bf0:	str	r0, [r5, #32]
   13bf4:	ldr	r0, [r4, #48]	; 0x30
   13bf8:	orr	r0, r0, #8192	; 0x2000
   13bfc:	str	r0, [r4, #48]	; 0x30
   13c00:	b	13ca8 <__assert_fail@plt+0x2904>
   13c04:	mov	r1, #32768	; 0x8000
   13c08:	tst	r0, #512	; 0x200
   13c0c:	and	r1, r1, r0, lsl #11
   13c10:	orr	r1, r1, #18688	; 0x4900
   13c14:	orr	r2, r1, #524288	; 0x80000
   13c18:	bne	13c38 <__assert_fail@plt+0x2894>
   13c1c:	movw	r0, #43324	; 0xa93c
   13c20:	mov	r1, r2
   13c24:	movt	r0, #1
   13c28:	bl	199a0 <__assert_fail@plt+0x85fc>
   13c2c:	b	13c48 <__assert_fail@plt+0x28a4>
   13c30:	add	r7, r5, #36	; 0x24
   13c34:	b	13ca8 <__assert_fail@plt+0x2904>
   13c38:	ldr	r0, [r4, #32]
   13c3c:	movw	r1, #43324	; 0xa93c
   13c40:	movt	r1, #1
   13c44:	bl	16954 <__assert_fail@plt+0x55b0>
   13c48:	cmn	r0, #1
   13c4c:	str	r0, [r5, #36]	; 0x24
   13c50:	ble	13c64 <__assert_fail@plt+0x28c0>
   13c54:	ldrh	r0, [r5, #58]	; 0x3a
   13c58:	orr	r0, r0, #2
   13c5c:	strh	r0, [r5, #58]	; 0x3a
   13c60:	b	13750 <__assert_fail@plt+0x23ac>
   13c64:	bl	11260 <__errno_location@plt>
   13c68:	ldr	r0, [r0]
   13c6c:	mov	r1, #7
   13c70:	strh	r1, [r5, #56]	; 0x38
   13c74:	str	r0, [r5, #32]
   13c78:	b	13750 <__assert_fail@plt+0x23ac>
   13c7c:	ldr	r1, [r4, #32]
   13c80:	cmp	r1, r6
   13c84:	bne	13c90 <__assert_fail@plt+0x28ec>
   13c88:	cmn	r1, #100	; 0x64
   13c8c:	bne	13cf8 <__assert_fail@plt+0x2954>
   13c90:	add	r0, r4, #60	; 0x3c
   13c94:	bl	1630c <__assert_fail@plt+0x4f68>
   13c98:	cmp	r0, #0
   13c9c:	blt	13ca4 <__assert_fail@plt+0x2900>
   13ca0:	bl	11380 <close@plt>
   13ca4:	str	r6, [r4, #32]
   13ca8:	ldr	r0, [r7]
   13cac:	bl	11380 <close@plt>
   13cb0:	ldrh	r0, [r5, #56]	; 0x38
   13cb4:	cmp	r0, #2
   13cb8:	beq	13ce0 <__assert_fail@plt+0x293c>
   13cbc:	ldr	r0, [r5, #32]
   13cc0:	mov	r1, #7
   13cc4:	cmp	r0, #0
   13cc8:	movweq	r1, #6
   13ccc:	strh	r1, [r5, #56]	; 0x38
   13cd0:	bne	13ce0 <__assert_fail@plt+0x293c>
   13cd4:	mov	r0, r4
   13cd8:	mov	r1, r5
   13cdc:	bl	13cfc <__assert_fail@plt+0x2958>
   13ce0:	ldrb	r0, [r4, #49]	; 0x31
   13ce4:	tst	r0, #32
   13ce8:	movne	r5, #0
   13cec:	mov	r0, r5
   13cf0:	sub	sp, fp, #24
   13cf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13cf8:	bl	11374 <abort@plt>
   13cfc:	push	{r4, r5, r6, r7, fp, lr}
   13d00:	add	fp, sp, #16
   13d04:	sub	sp, sp, #24
   13d08:	ldrh	r2, [r0, #48]	; 0x30
   13d0c:	movw	r3, #258	; 0x102
   13d10:	add	lr, r1, #64	; 0x40
   13d14:	tst	r2, r3
   13d18:	beq	13d50 <__assert_fail@plt+0x29ac>
   13d1c:	ldrd	r2, [lr]
   13d20:	stm	sp, {r2, r3}
   13d24:	ldrd	r2, [r1, #160]	; 0xa0
   13d28:	mov	r1, sp
   13d2c:	str	r3, [sp, #12]
   13d30:	str	r2, [sp, #8]
   13d34:	ldr	r0, [r0, #56]	; 0x38
   13d38:	bl	1603c <__assert_fail@plt+0x4c98>
   13d3c:	cmp	r0, #0
   13d40:	beq	13dc8 <__assert_fail@plt+0x2a24>
   13d44:	bl	19a44 <__assert_fail@plt+0x86a0>
   13d48:	sub	sp, fp, #16
   13d4c:	pop	{r4, r5, r6, r7, fp, pc}
   13d50:	ldr	r2, [r1, #4]
   13d54:	cmp	r2, #0
   13d58:	beq	13dc0 <__assert_fail@plt+0x2a1c>
   13d5c:	ldr	r3, [r2, #48]	; 0x30
   13d60:	cmp	r3, #0
   13d64:	blt	13dc0 <__assert_fail@plt+0x2a1c>
   13d68:	ldr	ip, [r0, #56]	; 0x38
   13d6c:	ldrd	r4, [ip, #16]
   13d70:	orrs	r3, r4, r5
   13d74:	beq	13dc8 <__assert_fail@plt+0x2a24>
   13d78:	ldrd	r4, [r1, #160]	; 0xa0
   13d7c:	ldrd	r6, [ip]
   13d80:	eor	r1, r7, r5
   13d84:	eor	r3, r6, r4
   13d88:	orrs	r1, r3, r1
   13d8c:	bne	13dc0 <__assert_fail@plt+0x2a1c>
   13d90:	ldr	r1, [ip, #8]!
   13d94:	ldrd	r4, [lr]
   13d98:	ldr	r3, [ip, #4]
   13d9c:	eor	r1, r1, r4
   13da0:	eor	r3, r3, r5
   13da4:	orrs	r1, r1, r3
   13da8:	bne	13dc0 <__assert_fail@plt+0x2a1c>
   13dac:	ldrd	r4, [r2, #64]	; 0x40
   13db0:	strd	r4, [ip]
   13db4:	ldr	r0, [r0, #56]	; 0x38
   13db8:	ldrd	r2, [r2, #160]	; 0xa0
   13dbc:	strd	r2, [r0]
   13dc0:	sub	sp, fp, #16
   13dc4:	pop	{r4, r5, r6, r7, fp, pc}
   13dc8:	bl	11374 <abort@plt>
   13dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd0:	add	fp, sp, #28
   13dd4:	sub	sp, sp, #108	; 0x6c
   13dd8:	mov	r7, r3
   13ddc:	mov	r4, r2
   13de0:	mov	r8, r1
   13de4:	mov	sl, r0
   13de8:	cmp	r3, #0
   13dec:	beq	13e10 <__assert_fail@plt+0x2a6c>
   13df0:	movw	r1, #43323	; 0xa93b
   13df4:	mov	r0, r7
   13df8:	movt	r1, #1
   13dfc:	bl	110ec <strcmp@plt>
   13e00:	mov	r6, r0
   13e04:	cmp	r0, #0
   13e08:	movwne	r6, #1
   13e0c:	b	13e14 <__assert_fail@plt+0x2a70>
   13e10:	mov	r6, #1
   13e14:	ldr	r0, [sl, #48]	; 0x30
   13e18:	tst	r0, #4
   13e1c:	bne	13e74 <__assert_fail@plt+0x2ad0>
   13e20:	cmn	r4, #1
   13e24:	mov	r1, #0
   13e28:	mov	r9, #0
   13e2c:	movwgt	r1, #1
   13e30:	orrs	r1, r1, r6
   13e34:	bne	13e94 <__assert_fail@plt+0x2af0>
   13e38:	ands	r0, r0, #512	; 0x200
   13e3c:	beq	13e94 <__assert_fail@plt+0x2af0>
   13e40:	add	r4, sl, #60	; 0x3c
   13e44:	mov	r0, r4
   13e48:	bl	16304 <__assert_fail@plt+0x4f60>
   13e4c:	cmp	r0, #0
   13e50:	bne	13e9c <__assert_fail@plt+0x2af8>
   13e54:	mov	r0, r4
   13e58:	bl	16358 <__assert_fail@plt+0x4fb4>
   13e5c:	cmn	r0, #1
   13e60:	ble	13e9c <__assert_fail@plt+0x2af8>
   13e64:	mov	r4, r0
   13e68:	mov	r9, #0
   13e6c:	mov	r7, #0
   13e70:	b	13ee4 <__assert_fail@plt+0x2b40>
   13e74:	mov	r5, #0
   13e78:	cmp	r4, #0
   13e7c:	blt	14014 <__assert_fail@plt+0x2c70>
   13e80:	ands	r0, r0, #512	; 0x200
   13e84:	beq	14014 <__assert_fail@plt+0x2c70>
   13e88:	mov	r0, r4
   13e8c:	bl	11380 <close@plt>
   13e90:	b	14014 <__assert_fail@plt+0x2c70>
   13e94:	cmn	r4, #1
   13e98:	bgt	13ee4 <__assert_fail@plt+0x2b40>
   13e9c:	ldr	r0, [sl, #48]	; 0x30
   13ea0:	mov	r1, #32768	; 0x8000
   13ea4:	and	r1, r1, r0, lsl #11
   13ea8:	tst	r0, #512	; 0x200
   13eac:	orr	r1, r1, #18688	; 0x4900
   13eb0:	orr	r2, r1, #524288	; 0x80000
   13eb4:	bne	13ec8 <__assert_fail@plt+0x2b24>
   13eb8:	mov	r0, r7
   13ebc:	mov	r1, r2
   13ec0:	bl	199a0 <__assert_fail@plt+0x85fc>
   13ec4:	b	13ed4 <__assert_fail@plt+0x2b30>
   13ec8:	ldr	r0, [sl, #32]
   13ecc:	mov	r1, r7
   13ed0:	bl	16954 <__assert_fail@plt+0x55b0>
   13ed4:	mov	r4, r0
   13ed8:	mov	r9, #1
   13edc:	cmp	r0, #0
   13ee0:	blt	13fb8 <__assert_fail@plt+0x2c14>
   13ee4:	ldr	r5, [sl, #48]	; 0x30
   13ee8:	tst	r5, #2
   13eec:	bne	13f30 <__assert_fail@plt+0x2b8c>
   13ef0:	cmp	r7, #0
   13ef4:	beq	13f10 <__assert_fail@plt+0x2b6c>
   13ef8:	movw	r1, #43323	; 0xa93b
   13efc:	mov	r0, r7
   13f00:	movt	r1, #1
   13f04:	bl	110ec <strcmp@plt>
   13f08:	cmp	r0, #0
   13f0c:	beq	13f30 <__assert_fail@plt+0x2b8c>
   13f10:	tst	r5, #512	; 0x200
   13f14:	bne	13f88 <__assert_fail@plt+0x2be4>
   13f18:	mov	r0, r4
   13f1c:	bl	11320 <fchdir@plt>
   13f20:	mov	r5, r0
   13f24:	cmp	r9, #0
   13f28:	bne	13fd8 <__assert_fail@plt+0x2c34>
   13f2c:	b	14014 <__assert_fail@plt+0x2c70>
   13f30:	mov	r2, sp
   13f34:	mov	r0, #3
   13f38:	mov	r1, r4
   13f3c:	bl	11188 <__fxstat64@plt>
   13f40:	cmp	r0, #0
   13f44:	bne	13fcc <__assert_fail@plt+0x2c28>
   13f48:	ldrd	r0, [r8, #64]	; 0x40
   13f4c:	ldm	sp, {r2, r3}
   13f50:	eor	r1, r1, r3
   13f54:	eor	r0, r0, r2
   13f58:	orrs	r0, r0, r1
   13f5c:	bne	13fc0 <__assert_fail@plt+0x2c1c>
   13f60:	ldrd	r0, [r8, #160]	; 0xa0
   13f64:	ldr	r2, [sp, #96]	; 0x60
   13f68:	ldr	r3, [sp, #100]	; 0x64
   13f6c:	eor	r1, r1, r3
   13f70:	eor	r0, r0, r2
   13f74:	orrs	r0, r0, r1
   13f78:	bne	13fc0 <__assert_fail@plt+0x2c1c>
   13f7c:	ldr	r5, [sl, #48]	; 0x30
   13f80:	tst	r5, #512	; 0x200
   13f84:	beq	13f18 <__assert_fail@plt+0x2b74>
   13f88:	ldr	r1, [sl, #32]
   13f8c:	cmp	r1, r4
   13f90:	bne	13f9c <__assert_fail@plt+0x2bf8>
   13f94:	cmn	r1, #100	; 0x64
   13f98:	bne	14020 <__assert_fail@plt+0x2c7c>
   13f9c:	cmp	r6, #0
   13fa0:	beq	13ff4 <__assert_fail@plt+0x2c50>
   13fa4:	add	r0, sl, #60	; 0x3c
   13fa8:	bl	1630c <__assert_fail@plt+0x4f68>
   13fac:	cmp	r0, #0
   13fb0:	bge	14008 <__assert_fail@plt+0x2c64>
   13fb4:	b	1400c <__assert_fail@plt+0x2c68>
   13fb8:	mvn	r5, #0
   13fbc:	b	14014 <__assert_fail@plt+0x2c70>
   13fc0:	bl	11260 <__errno_location@plt>
   13fc4:	mov	r1, #2
   13fc8:	str	r1, [r0]
   13fcc:	mvn	r5, #0
   13fd0:	cmp	r9, #0
   13fd4:	beq	14014 <__assert_fail@plt+0x2c70>
   13fd8:	bl	11260 <__errno_location@plt>
   13fdc:	ldr	r7, [r0]
   13fe0:	mov	r6, r0
   13fe4:	mov	r0, r4
   13fe8:	bl	11380 <close@plt>
   13fec:	str	r7, [r6]
   13ff0:	b	14014 <__assert_fail@plt+0x2c70>
   13ff4:	tst	r5, #4
   13ff8:	bne	1400c <__assert_fail@plt+0x2c68>
   13ffc:	cmp	r1, #0
   14000:	blt	1400c <__assert_fail@plt+0x2c68>
   14004:	mov	r0, r1
   14008:	bl	11380 <close@plt>
   1400c:	str	r4, [sl, #32]
   14010:	mov	r5, #0
   14014:	mov	r0, r5
   14018:	sub	sp, fp, #28
   1401c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14020:	bl	11374 <abort@plt>
   14024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14028:	add	fp, sp, #28
   1402c:	sub	sp, sp, #76	; 0x4c
   14030:	ldr	sl, [r0]
   14034:	mov	r8, r1
   14038:	mov	r5, r0
   1403c:	str	r0, [sp, #44]	; 0x2c
   14040:	ldr	r4, [sl, #12]
   14044:	cmp	r4, #0
   14048:	beq	14094 <__assert_fail@plt+0x2cf0>
   1404c:	mov	r0, r4
   14050:	bl	11314 <dirfd@plt>
   14054:	cmn	r0, #1
   14058:	str	r0, [fp, #-32]	; 0xffffffe0
   1405c:	ble	140cc <__assert_fail@plt+0x2d28>
   14060:	mov	r1, r5
   14064:	mvn	r2, #0
   14068:	str	r4, [sp, #16]
   1406c:	str	r8, [sp, #8]
   14070:	mov	ip, #0
   14074:	ldr	r0, [r1, #44]!	; 0x2c
   14078:	cmp	r0, #0
   1407c:	str	r1, [sp, #52]	; 0x34
   14080:	add	r7, r1, #4
   14084:	movweq	r2, #34464	; 0x86a0
   14088:	movteq	r2, #1
   1408c:	str	r2, [sp, #32]
   14090:	b	142b0 <__assert_fail@plt+0x2f0c>
   14094:	mov	r7, r5
   14098:	mvn	r0, #99	; 0x63
   1409c:	mov	r2, #0
   140a0:	ldr	r3, [r7, #48]!	; 0x30
   140a4:	and	r1, r3, #516	; 0x204
   140a8:	cmp	r1, #512	; 0x200
   140ac:	ldr	r1, [sl, #24]
   140b0:	ldreq	r0, [r5, #32]
   140b4:	tst	r3, #16
   140b8:	beq	140f4 <__assert_fail@plt+0x2d50>
   140bc:	tst	r3, #1
   140c0:	bne	140e8 <__assert_fail@plt+0x2d44>
   140c4:	mov	r2, #32768	; 0x8000
   140c8:	b	140f4 <__assert_fail@plt+0x2d50>
   140cc:	ldr	r0, [sl, #12]
   140d0:	bl	11398 <closedir@plt>
   140d4:	mov	r6, #0
   140d8:	str	r6, [sl, #12]
   140dc:	cmp	r8, #3
   140e0:	beq	14138 <__assert_fail@plt+0x2d94>
   140e4:	b	149cc <__assert_fail@plt+0x3628>
   140e8:	ldr	r3, [sl, #48]	; 0x30
   140ec:	cmp	r3, #0
   140f0:	movne	r2, #32768	; 0x8000
   140f4:	sub	r3, fp, #32
   140f8:	bl	16998 <__assert_fail@plt+0x55f4>
   140fc:	cmp	r0, #0
   14100:	str	r0, [sl, #12]
   14104:	beq	1412c <__assert_fail@plt+0x2d88>
   14108:	ldrh	r0, [sl, #56]	; 0x38
   1410c:	cmp	r0, #11
   14110:	bne	14150 <__assert_fail@plt+0x2dac>
   14114:	mov	r0, r5
   14118:	mov	r1, sl
   1411c:	mov	r2, #0
   14120:	bl	13164 <__assert_fail@plt+0x1dc0>
   14124:	strh	r0, [sl, #56]	; 0x38
   14128:	b	14190 <__assert_fail@plt+0x2dec>
   1412c:	mov	r6, #0
   14130:	cmp	r8, #3
   14134:	bne	149cc <__assert_fail@plt+0x3628>
   14138:	mov	r0, #4
   1413c:	strh	r0, [sl, #56]	; 0x38
   14140:	bl	11260 <__errno_location@plt>
   14144:	ldr	r0, [r0]
   14148:	str	r0, [sl, #32]
   1414c:	b	149cc <__assert_fail@plt+0x3628>
   14150:	ldrb	r0, [r7, #1]
   14154:	tst	r0, #1
   14158:	beq	14190 <__assert_fail@plt+0x2dec>
   1415c:	mov	r0, r5
   14160:	mov	r1, sl
   14164:	bl	13cfc <__assert_fail@plt+0x2958>
   14168:	mov	r0, r5
   1416c:	mov	r1, sl
   14170:	mov	r2, #0
   14174:	mov	r6, #0
   14178:	bl	13164 <__assert_fail@plt+0x1dc0>
   1417c:	mov	r0, r5
   14180:	mov	r1, sl
   14184:	bl	14b68 <__assert_fail@plt+0x37c4>
   14188:	cmp	r0, #0
   1418c:	beq	14938 <__assert_fail@plt+0x3594>
   14190:	mov	r1, r5
   14194:	str	r8, [sp, #8]
   14198:	str	r4, [sp, #16]
   1419c:	ldr	r0, [r1, #44]!	; 0x2c
   141a0:	str	r1, [sp, #52]	; 0x34
   141a4:	mvn	r1, #0
   141a8:	cmp	r0, #0
   141ac:	movweq	r1, #34464	; 0x86a0
   141b0:	movteq	r1, #1
   141b4:	cmp	r8, #2
   141b8:	str	r1, [sp, #32]
   141bc:	bne	141d8 <__assert_fail@plt+0x2e34>
   141c0:	mov	ip, #1
   141c4:	cmp	r8, #3
   141c8:	bne	142b0 <__assert_fail@plt+0x2f0c>
   141cc:	sub	r0, r8, #3
   141d0:	mov	r5, #0
   141d4:	b	141f8 <__assert_fail@plt+0x2e54>
   141d8:	ldr	r0, [r7]
   141dc:	and	r0, r0, #56	; 0x38
   141e0:	cmp	r0, #24
   141e4:	ldreq	r0, [sl, #84]	; 0x54
   141e8:	cmpeq	r0, #2
   141ec:	beq	14a80 <__assert_fail@plt+0x36dc>
   141f0:	sub	r0, r8, #3
   141f4:	mov	r5, #1
   141f8:	clz	r0, r0
   141fc:	lsr	r6, r0, #5
   14200:	ldrb	r0, [r7, #1]
   14204:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14208:	tst	r0, #2
   1420c:	beq	14228 <__assert_fail@plt+0x2e84>
   14210:	mov	r0, r2
   14214:	movw	r1, #1030	; 0x406
   14218:	mov	r2, #3
   1421c:	bl	197c0 <__assert_fail@plt+0x841c>
   14220:	mov	r2, r0
   14224:	str	r0, [fp, #-32]	; 0xffffffe0
   14228:	cmp	r2, #0
   1422c:	blt	14248 <__assert_fail@plt+0x2ea4>
   14230:	ldr	r0, [sp, #44]	; 0x2c
   14234:	mov	r1, sl
   14238:	mov	r3, #0
   1423c:	bl	13dcc <__assert_fail@plt+0x2a28>
   14240:	cmp	r0, #0
   14244:	beq	142a8 <__assert_fail@plt+0x2f04>
   14248:	and	r0, r6, r5
   1424c:	cmp	r0, #1
   14250:	bne	14260 <__assert_fail@plt+0x2ebc>
   14254:	bl	11260 <__errno_location@plt>
   14258:	ldr	r0, [r0]
   1425c:	str	r0, [sl, #32]
   14260:	ldrh	r0, [sl, #58]	; 0x3a
   14264:	orr	r0, r0, #1
   14268:	strh	r0, [sl, #58]	; 0x3a
   1426c:	ldr	r0, [sl, #12]
   14270:	bl	11398 <closedir@plt>
   14274:	mov	r4, #0
   14278:	ldr	r5, [sp, #44]	; 0x2c
   1427c:	str	r4, [sl, #12]
   14280:	ldr	r0, [r7]
   14284:	tst	r0, #512	; 0x200
   14288:	beq	1429c <__assert_fail@plt+0x2ef8>
   1428c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14290:	cmp	r0, #0
   14294:	blt	1429c <__assert_fail@plt+0x2ef8>
   14298:	bl	11380 <close@plt>
   1429c:	mov	ip, #1
   142a0:	str	r4, [sl, #12]
   142a4:	b	142b0 <__assert_fail@plt+0x2f0c>
   142a8:	ldr	r5, [sp, #44]	; 0x2c
   142ac:	mov	ip, #0
   142b0:	ldr	r0, [sl, #40]	; 0x28
   142b4:	ldr	r1, [sl, #28]
   142b8:	mov	r9, #0
   142bc:	sub	r2, r0, #1
   142c0:	ldrb	r1, [r1, r2]
   142c4:	cmp	r1, #47	; 0x2f
   142c8:	ldrb	r1, [r7]
   142cc:	moveq	r0, r2
   142d0:	tst	r1, #4
   142d4:	mov	r1, #0
   142d8:	str	r1, [sp, #40]	; 0x28
   142dc:	beq	142f4 <__assert_fail@plt+0x2f50>
   142e0:	ldr	r1, [r5, #24]
   142e4:	mov	r2, #47	; 0x2f
   142e8:	strb	r2, [r1, r0]!
   142ec:	add	r1, r1, #1
   142f0:	str	r1, [sp, #40]	; 0x28
   142f4:	ldr	r6, [sl, #12]
   142f8:	add	r1, r0, #1
   142fc:	str	r1, [fp, #-48]	; 0xffffffd0
   14300:	cmp	r6, #0
   14304:	beq	1467c <__assert_fail@plt+0x32d8>
   14308:	ldr	r0, [sl, #48]	; 0x30
   1430c:	str	r7, [fp, #-36]	; 0xffffffdc
   14310:	str	ip, [sp, #4]
   14314:	mov	r7, #0
   14318:	add	r0, r0, #1
   1431c:	str	r0, [sp, #24]
   14320:	ldr	r0, [r5, #36]	; 0x24
   14324:	sub	r0, r0, r1
   14328:	str	r0, [fp, #-44]	; 0xffffffd4
   1432c:	bl	11260 <__errno_location@plt>
   14330:	str	r0, [sp, #36]	; 0x24
   14334:	mov	r0, #0
   14338:	mov	r9, #0
   1433c:	mov	r4, #0
   14340:	str	sl, [sp, #28]
   14344:	str	r0, [sp, #48]	; 0x30
   14348:	mov	r0, #0
   1434c:	str	r0, [sp, #12]
   14350:	mov	r0, #0
   14354:	str	r0, [sp, #20]
   14358:	ldr	r0, [sp, #36]	; 0x24
   1435c:	str	r7, [r0]
   14360:	mov	r0, r6
   14364:	bl	112fc <readdir64@plt>
   14368:	cmp	r0, #0
   1436c:	beq	147d0 <__assert_fail@plt+0x342c>
   14370:	mov	r8, r0
   14374:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14378:	str	r4, [fp, #-40]	; 0xffffffd8
   1437c:	add	r4, r8, #19
   14380:	ldrb	r0, [r0]
   14384:	tst	r0, #32
   14388:	ldrbeq	r0, [r4]
   1438c:	cmpeq	r0, #46	; 0x2e
   14390:	beq	1448c <__assert_fail@plt+0x30e8>
   14394:	mov	r0, r4
   14398:	bl	1123c <strlen@plt>
   1439c:	mov	r5, r0
   143a0:	add	r0, r0, #176	; 0xb0
   143a4:	bic	r0, r0, #7
   143a8:	bl	19528 <__assert_fail@plt+0x8184>
   143ac:	mov	r6, r0
   143b0:	cmp	r0, #0
   143b4:	beq	1495c <__assert_fail@plt+0x35b8>
   143b8:	add	sl, r6, #168	; 0xa8
   143bc:	mov	r1, r4
   143c0:	mov	r2, r5
   143c4:	mov	r0, sl
   143c8:	bl	11128 <memcpy@plt>
   143cc:	ldr	r2, [sp, #44]	; 0x2c
   143d0:	mov	r0, #0
   143d4:	mov	r1, #196608	; 0x30000
   143d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143dc:	strb	r0, [sl, r5]
   143e0:	str	r5, [r6, #52]	; 0x34
   143e4:	str	r2, [r6, #44]	; 0x2c
   143e8:	add	r7, r5, r3
   143ec:	ldr	r4, [r2, #24]
   143f0:	str	r1, [r6, #58]	; 0x3a
   143f4:	str	r0, [r6, #12]
   143f8:	str	r0, [r6, #16]
   143fc:	str	r0, [r6, #20]
   14400:	str	r4, [r6, #28]
   14404:	str	r0, [r6, #32]
   14408:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1440c:	cmp	r5, r0
   14410:	bcs	14428 <__assert_fail@plt+0x3084>
   14414:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14418:	mov	r5, r2
   1441c:	cmp	r7, r3
   14420:	bcs	144cc <__assert_fail@plt+0x3128>
   14424:	b	14834 <__assert_fail@plt+0x3490>
   14428:	ldr	r1, [r2, #36]	; 0x24
   1442c:	movw	r0, #257	; 0x101
   14430:	mov	r5, r2
   14434:	add	r0, r7, r0
   14438:	adds	r1, r0, r1
   1443c:	bcs	14918 <__assert_fail@plt+0x3574>
   14440:	mov	r0, r4
   14444:	str	r1, [r5, #36]	; 0x24
   14448:	bl	19558 <__assert_fail@plt+0x81b4>
   1444c:	cmp	r0, #0
   14450:	beq	14948 <__assert_fail@plt+0x35a4>
   14454:	cmp	r0, r4
   14458:	str	r0, [r5, #24]
   1445c:	beq	144b4 <__assert_fail@plt+0x3110>
   14460:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14464:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14468:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1446c:	ldrb	r1, [r1]
   14470:	tst	r1, #4
   14474:	ldr	r1, [sp, #40]	; 0x28
   14478:	addne	r1, r0, r3
   1447c:	mov	r0, #1
   14480:	str	r1, [sp, #40]	; 0x28
   14484:	str	r0, [sp, #20]
   14488:	b	144bc <__assert_fail@plt+0x3118>
   1448c:	ldrb	r0, [r8, #20]
   14490:	cmp	r0, #0
   14494:	beq	144a8 <__assert_fail@plt+0x3104>
   14498:	cmp	r0, #46	; 0x2e
   1449c:	ldrbeq	r0, [r8, #21]
   144a0:	cmpeq	r0, #0
   144a4:	bne	14394 <__assert_fail@plt+0x2ff0>
   144a8:	ldr	r4, [fp, #-40]	; 0xffffffd8
   144ac:	mov	r7, #0
   144b0:	b	14660 <__assert_fail@plt+0x32bc>
   144b4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   144b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   144bc:	ldr	r0, [r5, #36]	; 0x24
   144c0:	sub	r0, r0, r3
   144c4:	cmp	r7, r3
   144c8:	bcc	14834 <__assert_fail@plt+0x3490>
   144cc:	str	r0, [fp, #-44]	; 0xffffffd4
   144d0:	ldr	r0, [sp, #24]
   144d4:	str	r0, [r6, #48]	; 0x30
   144d8:	ldr	r0, [r5]
   144dc:	str	r7, [r6, #40]	; 0x28
   144e0:	str	r0, [r6, #4]
   144e4:	ldrd	r0, [r8]
   144e8:	strd	r0, [r6, #160]	; 0xa0
   144ec:	ldrb	r0, [r5, #48]	; 0x30
   144f0:	tst	r0, #4
   144f4:	bne	14500 <__assert_fail@plt+0x315c>
   144f8:	str	sl, [r6, #24]
   144fc:	b	1451c <__assert_fail@plt+0x3178>
   14500:	ldr	r0, [r6, #28]
   14504:	ldr	r1, [r6, #52]	; 0x34
   14508:	str	r0, [r6, #24]
   1450c:	ldr	r0, [sp, #40]	; 0x28
   14510:	add	r2, r1, #1
   14514:	mov	r1, sl
   14518:	bl	11104 <memmove@plt>
   1451c:	ldr	r0, [sp, #52]	; 0x34
   14520:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14524:	ldr	sl, [sp, #28]
   14528:	ldr	r0, [r0]
   1452c:	ldr	r2, [r1]
   14530:	cmp	r0, #0
   14534:	beq	1455c <__assert_fail@plt+0x31b8>
   14538:	ands	r0, r2, #1024	; 0x400
   1453c:	bne	1455c <__assert_fail@plt+0x31b8>
   14540:	mov	r0, r5
   14544:	mov	r1, r6
   14548:	mov	r2, #0
   1454c:	bl	13164 <__assert_fail@plt+0x1dc0>
   14550:	mov	r7, #0
   14554:	strh	r0, [r6, #56]	; 0x38
   14558:	b	145d0 <__assert_fail@plt+0x322c>
   1455c:	ldrb	r3, [r8, #18]
   14560:	mov	r0, #0
   14564:	tst	r2, #8
   14568:	mov	r1, #0
   1456c:	beq	14590 <__assert_fail@plt+0x31ec>
   14570:	orr	r1, r3, #4
   14574:	cmp	r1, #4
   14578:	mov	r1, #0
   1457c:	beq	14590 <__assert_fail@plt+0x31ec>
   14580:	eor	r1, r3, #10
   14584:	and	r2, r2, #16
   14588:	orrs	r1, r2, r1
   1458c:	movwne	r1, #1
   14590:	mov	r2, #11
   14594:	mov	r7, #0
   14598:	strh	r2, [r6, #56]	; 0x38
   1459c:	sub	r2, r3, #1
   145a0:	uxtb	r3, r2
   145a4:	cmp	r3, #11
   145a8:	sxtbls	r0, r2
   145ac:	movwls	r2, #43328	; 0xa940
   145b0:	movtls	r2, #1
   145b4:	ldrls	r0, [r2, r0, lsl #2]
   145b8:	cmp	r1, #0
   145bc:	str	r0, [r6, #80]	; 0x50
   145c0:	mov	r0, #2
   145c4:	movwne	r0, #1
   145c8:	str	r0, [r6, #112]	; 0x70
   145cc:	str	r7, [r6, #116]	; 0x74
   145d0:	cmp	r9, #0
   145d4:	str	r7, [r6, #8]
   145d8:	ldrne	r0, [sp, #48]	; 0x30
   145dc:	moveq	r9, r6
   145e0:	strne	r6, [r0, #8]
   145e4:	movw	r0, #10000	; 0x2710
   145e8:	cmp	r4, r0
   145ec:	bne	14640 <__assert_fail@plt+0x329c>
   145f0:	ldr	r0, [sp, #52]	; 0x34
   145f4:	ldr	r0, [r0]
   145f8:	cmp	r0, #0
   145fc:	bne	14640 <__assert_fail@plt+0x329c>
   14600:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14604:	mov	r0, sl
   14608:	bl	14ec8 <__assert_fail@plt+0x3b24>
   1460c:	mov	r1, #0
   14610:	str	r1, [sp, #12]
   14614:	movw	r1, #19778	; 0x4d42
   14618:	movt	r1, #65363	; 0xff53
   1461c:	cmp	r0, r1
   14620:	movwne	r1, #26985	; 0x6969
   14624:	cmpne	r0, r1
   14628:	beq	14640 <__assert_fail@plt+0x329c>
   1462c:	movw	r1, #6548	; 0x1994
   14630:	movt	r1, #258	; 0x102
   14634:	cmp	r0, r1
   14638:	movne	r0, #1
   1463c:	strne	r0, [sp, #12]
   14640:	ldr	r0, [sp, #32]
   14644:	add	r4, r4, #1
   14648:	cmp	r0, r4
   1464c:	mov	r0, #0
   14650:	movwls	r0, #15
   14654:	cmp	r0, #0
   14658:	bne	148a8 <__assert_fail@plt+0x3504>
   1465c:	str	r6, [sp, #48]	; 0x30
   14660:	ldr	r6, [sl, #12]
   14664:	cmp	r6, #0
   14668:	bne	14358 <__assert_fail@plt+0x2fb4>
   1466c:	ldr	r0, [sp, #20]
   14670:	ldr	ip, [sp, #4]
   14674:	ldr	r6, [sp, #12]
   14678:	b	1481c <__assert_fail@plt+0x3478>
   1467c:	mov	r4, #0
   14680:	mov	r6, #0
   14684:	ldrb	r0, [r7]
   14688:	tst	r0, #4
   1468c:	beq	146b8 <__assert_fail@plt+0x3314>
   14690:	ldr	r2, [sp, #40]	; 0x28
   14694:	ldr	r0, [r5, #36]	; 0x24
   14698:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1469c:	cmp	r3, r0
   146a0:	sub	r1, r2, #1
   146a4:	mov	r0, #0
   146a8:	moveq	r2, r1
   146ac:	cmp	r4, #0
   146b0:	moveq	r2, r1
   146b4:	strb	r0, [r2]
   146b8:	ldr	r0, [sp, #16]
   146bc:	cmp	r0, #0
   146c0:	movwne	r0, #1
   146c4:	orrs	r0, r0, ip
   146c8:	beq	1472c <__assert_fail@plt+0x3388>
   146cc:	cmp	r4, #0
   146d0:	bne	1476c <__assert_fail@plt+0x33c8>
   146d4:	ldr	r0, [sp, #8]
   146d8:	cmp	r0, #3
   146dc:	bne	146f4 <__assert_fail@plt+0x3350>
   146e0:	ldrh	r0, [sl, #56]	; 0x38
   146e4:	cmp	r0, #4
   146e8:	cmpne	r0, #7
   146ec:	movne	r0, #6
   146f0:	strhne	r0, [sl, #56]	; 0x38
   146f4:	mov	r6, #0
   146f8:	cmp	r9, #0
   146fc:	beq	149cc <__assert_fail@plt+0x3628>
   14700:	ldrd	r4, [r9, #8]
   14704:	cmp	r5, #0
   14708:	beq	14714 <__assert_fail@plt+0x3370>
   1470c:	mov	r0, r5
   14710:	bl	11398 <closedir@plt>
   14714:	mov	r0, r9
   14718:	bl	19a44 <__assert_fail@plt+0x86a0>
   1471c:	cmp	r4, #0
   14720:	mov	r9, r4
   14724:	bne	14700 <__assert_fail@plt+0x335c>
   14728:	b	149cc <__assert_fail@plt+0x3628>
   1472c:	ldr	r0, [sp, #8]
   14730:	cmp	r0, #1
   14734:	cmpne	r4, #0
   14738:	bne	1476c <__assert_fail@plt+0x33c8>
   1473c:	ldr	r0, [sl, #48]	; 0x30
   14740:	cmp	r0, #0
   14744:	beq	148bc <__assert_fail@plt+0x3518>
   14748:	ldr	r1, [sl, #4]
   1474c:	movw	r3, #43323	; 0xa93b
   14750:	mov	r0, r5
   14754:	mvn	r2, #0
   14758:	movt	r3, #1
   1475c:	bl	13dcc <__assert_fail@plt+0x2a28>
   14760:	cmp	r0, #0
   14764:	bne	148cc <__assert_fail@plt+0x3528>
   14768:	b	146cc <__assert_fail@plt+0x3328>
   1476c:	tst	r6, #1
   14770:	beq	147a0 <__assert_fail@plt+0x33fc>
   14774:	movw	r0, #20112	; 0x4e90
   14778:	mov	r1, r9
   1477c:	mov	r2, r4
   14780:	movt	r0, #1
   14784:	str	r0, [r5, #44]	; 0x2c
   14788:	mov	r0, r5
   1478c:	bl	132fc <__assert_fail@plt+0x1f58>
   14790:	mov	r6, r0
   14794:	mov	r0, #0
   14798:	str	r0, [r5, #44]	; 0x2c
   1479c:	b	149cc <__assert_fail@plt+0x3628>
   147a0:	cmp	r4, #2
   147a4:	bcc	1482c <__assert_fail@plt+0x3488>
   147a8:	ldr	r0, [sp, #52]	; 0x34
   147ac:	ldr	r0, [r0]
   147b0:	cmp	r0, #0
   147b4:	beq	1482c <__assert_fail@plt+0x3488>
   147b8:	mov	r0, r5
   147bc:	mov	r1, r9
   147c0:	mov	r2, r4
   147c4:	bl	132fc <__assert_fail@plt+0x1f58>
   147c8:	mov	r6, r0
   147cc:	b	149cc <__assert_fail@plt+0x3628>
   147d0:	ldr	r0, [sp, #36]	; 0x24
   147d4:	ldr	r0, [r0]
   147d8:	cmp	r0, #0
   147dc:	beq	147f8 <__assert_fail@plt+0x3454>
   147e0:	str	r0, [sl, #32]
   147e4:	ldr	r0, [sp, #16]
   147e8:	orrs	r0, r0, r4
   147ec:	mov	r0, #4
   147f0:	movwne	r0, #7
   147f4:	strh	r0, [sl, #56]	; 0x38
   147f8:	ldr	r0, [sl, #12]
   147fc:	ldr	r6, [sp, #12]
   14800:	cmp	r0, #0
   14804:	beq	149e0 <__assert_fail@plt+0x363c>
   14808:	bl	11398 <closedir@plt>
   1480c:	mov	r0, #0
   14810:	ldr	ip, [sp, #4]
   14814:	str	r0, [sl, #12]
   14818:	ldr	r0, [sp, #20]
   1481c:	tst	r0, #1
   14820:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14824:	beq	14684 <__assert_fail@plt+0x32e0>
   14828:	b	149f4 <__assert_fail@plt+0x3650>
   1482c:	mov	r6, r9
   14830:	b	149cc <__assert_fail@plt+0x3628>
   14834:	mov	r0, r6
   14838:	bl	19a44 <__assert_fail@plt+0x86a0>
   1483c:	ldr	r7, [sp, #28]
   14840:	cmp	r9, #0
   14844:	beq	14870 <__assert_fail@plt+0x34cc>
   14848:	ldrd	r4, [r9, #8]
   1484c:	cmp	r5, #0
   14850:	beq	1485c <__assert_fail@plt+0x34b8>
   14854:	mov	r0, r5
   14858:	bl	11398 <closedir@plt>
   1485c:	mov	r0, r9
   14860:	bl	19a44 <__assert_fail@plt+0x86a0>
   14864:	cmp	r4, #0
   14868:	mov	r9, r4
   1486c:	bne	14848 <__assert_fail@plt+0x34a4>
   14870:	ldr	r0, [r7, #12]
   14874:	bl	11398 <closedir@plt>
   14878:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1487c:	mov	r6, #0
   14880:	mov	r0, #7
   14884:	str	r6, [r7, #12]
   14888:	strh	r0, [r7, #56]	; 0x38
   1488c:	ldr	r0, [r1]
   14890:	orr	r0, r0, #8192	; 0x2000
   14894:	str	r0, [r1]
   14898:	ldr	r1, [sp, #36]	; 0x24
   1489c:	mov	r0, #36	; 0x24
   148a0:	str	r0, [r1]
   148a4:	b	149cc <__assert_fail@plt+0x3628>
   148a8:	ldr	ip, [sp, #4]
   148ac:	cmp	r0, #15
   148b0:	bne	149d8 <__assert_fail@plt+0x3634>
   148b4:	ldr	r6, [sp, #12]
   148b8:	b	149e4 <__assert_fail@plt+0x3640>
   148bc:	mov	r0, r5
   148c0:	bl	14ad8 <__assert_fail@plt+0x3734>
   148c4:	cmp	r0, #0
   148c8:	beq	146cc <__assert_fail@plt+0x3328>
   148cc:	mov	r0, #7
   148d0:	mov	r6, #0
   148d4:	cmp	r9, #0
   148d8:	strh	r0, [sl, #56]	; 0x38
   148dc:	ldr	r0, [r7]
   148e0:	orr	r0, r0, #8192	; 0x2000
   148e4:	str	r0, [r7]
   148e8:	beq	149cc <__assert_fail@plt+0x3628>
   148ec:	ldrd	r4, [r9, #8]
   148f0:	cmp	r5, #0
   148f4:	beq	14900 <__assert_fail@plt+0x355c>
   148f8:	mov	r0, r5
   148fc:	bl	11398 <closedir@plt>
   14900:	mov	r0, r9
   14904:	bl	19a44 <__assert_fail@plt+0x86a0>
   14908:	cmp	r4, #0
   1490c:	mov	r9, r4
   14910:	bne	148ec <__assert_fail@plt+0x3548>
   14914:	b	149cc <__assert_fail@plt+0x3628>
   14918:	mov	r0, r4
   1491c:	bl	19a44 <__assert_fail@plt+0x86a0>
   14920:	ldr	r1, [sp, #36]	; 0x24
   14924:	mov	r0, #0
   14928:	str	r0, [r5, #24]
   1492c:	mov	r0, #36	; 0x24
   14930:	str	r0, [r1]
   14934:	b	14958 <__assert_fail@plt+0x35b4>
   14938:	bl	11260 <__errno_location@plt>
   1493c:	mov	r1, #12
   14940:	str	r1, [r0]
   14944:	b	149cc <__assert_fail@plt+0x3628>
   14948:	ldr	r0, [r5, #24]
   1494c:	bl	19a44 <__assert_fail@plt+0x86a0>
   14950:	mov	r0, #0
   14954:	str	r0, [r5, #24]
   14958:	ldr	sl, [sp, #28]
   1495c:	ldr	r0, [sp, #36]	; 0x24
   14960:	ldr	r4, [r0]
   14964:	mov	r0, r6
   14968:	bl	19a44 <__assert_fail@plt+0x86a0>
   1496c:	cmp	r9, #0
   14970:	beq	1499c <__assert_fail@plt+0x35f8>
   14974:	ldrd	r6, [r9, #8]
   14978:	cmp	r7, #0
   1497c:	beq	14988 <__assert_fail@plt+0x35e4>
   14980:	mov	r0, r7
   14984:	bl	11398 <closedir@plt>
   14988:	mov	r0, r9
   1498c:	bl	19a44 <__assert_fail@plt+0x86a0>
   14990:	cmp	r6, #0
   14994:	mov	r9, r6
   14998:	bne	14974 <__assert_fail@plt+0x35d0>
   1499c:	ldr	r0, [sl, #12]
   149a0:	bl	11398 <closedir@plt>
   149a4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   149a8:	mov	r6, #0
   149ac:	mov	r0, #7
   149b0:	str	r6, [sl, #12]
   149b4:	strh	r0, [sl, #56]	; 0x38
   149b8:	ldr	r0, [r1]
   149bc:	orr	r0, r0, #8192	; 0x2000
   149c0:	str	r0, [r1]
   149c4:	ldr	r0, [sp, #36]	; 0x24
   149c8:	str	r4, [r0]
   149cc:	mov	r0, r6
   149d0:	sub	sp, fp, #28
   149d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d8:	mov	r6, #0
   149dc:	b	149cc <__assert_fail@plt+0x3628>
   149e0:	ldr	ip, [sp, #4]
   149e4:	ldr	r0, [sp, #20]
   149e8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   149ec:	tst	r0, #1
   149f0:	beq	14684 <__assert_fail@plt+0x32e0>
   149f4:	ldr	r1, [r5, #4]
   149f8:	ldr	r0, [r5, #24]
   149fc:	cmp	r1, #0
   14a00:	beq	14a30 <__assert_fail@plt+0x368c>
   14a04:	ldr	r2, [r1, #24]
   14a08:	add	r3, r1, #168	; 0xa8
   14a0c:	cmp	r2, r3
   14a10:	ldrne	r3, [r1, #28]
   14a14:	subne	r2, r2, r3
   14a18:	addne	r2, r0, r2
   14a1c:	strne	r2, [r1, #24]
   14a20:	str	r0, [r1, #28]
   14a24:	ldr	r1, [r1, #8]
   14a28:	cmp	r1, #0
   14a2c:	bne	14a04 <__assert_fail@plt+0x3660>
   14a30:	ldr	r1, [r9, #48]	; 0x30
   14a34:	cmp	r1, #0
   14a38:	blt	14684 <__assert_fail@plt+0x32e0>
   14a3c:	mov	r1, r9
   14a40:	ldr	r2, [r1, #24]
   14a44:	add	r3, r1, #168	; 0xa8
   14a48:	cmp	r2, r3
   14a4c:	ldrne	r3, [r1, #28]
   14a50:	subne	r2, r2, r3
   14a54:	addne	r2, r0, r2
   14a58:	strne	r2, [r1, #24]
   14a5c:	str	r0, [r1, #28]
   14a60:	ldr	r2, [r1, #8]
   14a64:	cmp	r2, #0
   14a68:	ldreq	r2, [r1, #4]
   14a6c:	ldr	r1, [r2, #48]	; 0x30
   14a70:	cmn	r1, #1
   14a74:	mov	r1, r2
   14a78:	bgt	14a40 <__assert_fail@plt+0x369c>
   14a7c:	b	14684 <__assert_fail@plt+0x32e0>
   14a80:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14a84:	mov	r0, sl
   14a88:	bl	14ec8 <__assert_fail@plt+0x3b24>
   14a8c:	movw	r1, #26984	; 0x6968
   14a90:	cmp	r0, r1
   14a94:	ble	14ac0 <__assert_fail@plt+0x371c>
   14a98:	movw	r1, #26985	; 0x6969
   14a9c:	cmp	r0, r1
   14aa0:	movwne	r1, #16719	; 0x414f
   14aa4:	movtne	r1, #21318	; 0x5346
   14aa8:	cmpne	r0, r1
   14aac:	beq	141f0 <__assert_fail@plt+0x2e4c>
   14ab0:	movw	r1, #40864	; 0x9fa0
   14ab4:	cmp	r0, r1
   14ab8:	beq	141f0 <__assert_fail@plt+0x2e4c>
   14abc:	b	141c0 <__assert_fail@plt+0x2e1c>
   14ac0:	movw	r1, #19778	; 0x4d42
   14ac4:	movt	r1, #65363	; 0xff53
   14ac8:	cmp	r0, r1
   14acc:	cmpne	r0, #0
   14ad0:	beq	141f0 <__assert_fail@plt+0x2e4c>
   14ad4:	b	141c0 <__assert_fail@plt+0x2e1c>
   14ad8:	push	{r4, r5, fp, lr}
   14adc:	add	fp, sp, #8
   14ae0:	mov	r5, r0
   14ae4:	ldr	r0, [r0, #48]	; 0x30
   14ae8:	mov	r4, #0
   14aec:	tst	r0, #4
   14af0:	bne	14b34 <__assert_fail@plt+0x3790>
   14af4:	tst	r0, #512	; 0x200
   14af8:	bne	14b14 <__assert_fail@plt+0x3770>
   14afc:	ldr	r0, [r5, #28]
   14b00:	bl	11320 <fchdir@plt>
   14b04:	mov	r4, r0
   14b08:	cmp	r0, #0
   14b0c:	movwne	r4, #1
   14b10:	b	14b34 <__assert_fail@plt+0x3790>
   14b14:	ldr	r1, [r5, #32]
   14b18:	add	r0, r5, #60	; 0x3c
   14b1c:	bl	1630c <__assert_fail@plt+0x4f68>
   14b20:	cmp	r0, #0
   14b24:	blt	14b2c <__assert_fail@plt+0x3788>
   14b28:	bl	11380 <close@plt>
   14b2c:	mvn	r0, #99	; 0x63
   14b30:	str	r0, [r5, #32]
   14b34:	add	r5, r5, #60	; 0x3c
   14b38:	b	14b40 <__assert_fail@plt+0x379c>
   14b3c:	bl	11380 <close@plt>
   14b40:	mov	r0, r5
   14b44:	bl	16304 <__assert_fail@plt+0x4f60>
   14b48:	cmp	r0, #0
   14b4c:	movne	r0, r4
   14b50:	popne	{r4, r5, fp, pc}
   14b54:	mov	r0, r5
   14b58:	bl	16358 <__assert_fail@plt+0x4fb4>
   14b5c:	cmp	r0, #0
   14b60:	bge	14b3c <__assert_fail@plt+0x3798>
   14b64:	b	14b40 <__assert_fail@plt+0x379c>
   14b68:	push	{r4, r5, r6, r7, fp, lr}
   14b6c:	add	fp, sp, #16
   14b70:	mov	r6, r0
   14b74:	ldrh	r0, [r0, #48]	; 0x30
   14b78:	mov	r4, r1
   14b7c:	movw	r1, #258	; 0x102
   14b80:	tst	r0, r1
   14b84:	beq	14bf8 <__assert_fail@plt+0x3854>
   14b88:	mov	r0, #24
   14b8c:	bl	19528 <__assert_fail@plt+0x8184>
   14b90:	mov	r5, #0
   14b94:	cmp	r0, #0
   14b98:	beq	14c18 <__assert_fail@plt+0x3874>
   14b9c:	mov	r7, r0
   14ba0:	ldrd	r0, [r4, #64]	; 0x40
   14ba4:	add	r2, r7, #8
   14ba8:	stm	r7, {r0, r1}
   14bac:	ldrd	r0, [r4, #160]	; 0xa0
   14bb0:	stm	r2, {r0, r1, r4}
   14bb4:	mov	r1, r7
   14bb8:	ldr	r0, [r6, #56]	; 0x38
   14bbc:	bl	15ffc <__assert_fail@plt+0x4c58>
   14bc0:	cmp	r0, r7
   14bc4:	beq	14bec <__assert_fail@plt+0x3848>
   14bc8:	mov	r6, r0
   14bcc:	mov	r0, r7
   14bd0:	bl	19a44 <__assert_fail@plt+0x86a0>
   14bd4:	cmp	r6, #0
   14bd8:	beq	14c18 <__assert_fail@plt+0x3874>
   14bdc:	ldr	r0, [r6, #16]
   14be0:	mov	r1, #2
   14be4:	strh	r1, [r4, #56]	; 0x38
   14be8:	str	r0, [r4]
   14bec:	mov	r5, #1
   14bf0:	mov	r0, r5
   14bf4:	pop	{r4, r5, r6, r7, fp, pc}
   14bf8:	ldr	r0, [r6, #56]	; 0x38
   14bfc:	add	r1, r4, #64	; 0x40
   14c00:	bl	1964c <__assert_fail@plt+0x82a8>
   14c04:	cmp	r0, #0
   14c08:	mov	r5, #1
   14c0c:	movne	r0, #2
   14c10:	strhne	r0, [r4, #56]	; 0x38
   14c14:	strne	r4, [r4]
   14c18:	mov	r0, r5
   14c1c:	pop	{r4, r5, r6, r7, fp, pc}
   14c20:	cmp	r2, #5
   14c24:	movcc	r0, #0
   14c28:	strhcc	r2, [r1, #60]	; 0x3c
   14c2c:	bxcc	lr
   14c30:	push	{fp, lr}
   14c34:	mov	fp, sp
   14c38:	bl	11260 <__errno_location@plt>
   14c3c:	mov	r1, #22
   14c40:	str	r1, [r0]
   14c44:	mov	r0, #1
   14c48:	pop	{fp, pc}
   14c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c50:	add	fp, sp, #28
   14c54:	sub	sp, sp, #4
   14c58:	mov	r9, r0
   14c5c:	orr	r0, r1, #4096	; 0x1000
   14c60:	cmp	r0, #4096	; 0x1000
   14c64:	bne	14ca4 <__assert_fail@plt+0x3900>
   14c68:	ldr	r8, [r9]
   14c6c:	mov	r7, r1
   14c70:	bl	11260 <__errno_location@plt>
   14c74:	mov	r5, #0
   14c78:	mov	sl, r0
   14c7c:	str	r5, [r0]
   14c80:	ldrb	r0, [r9, #49]	; 0x31
   14c84:	tst	r0, #32
   14c88:	bne	14cb4 <__assert_fail@plt+0x3910>
   14c8c:	ldrh	r0, [r8, #56]	; 0x38
   14c90:	cmp	r0, #1
   14c94:	beq	14cc0 <__assert_fail@plt+0x391c>
   14c98:	cmp	r0, #9
   14c9c:	ldreq	r5, [r8, #8]
   14ca0:	b	14cb4 <__assert_fail@plt+0x3910>
   14ca4:	bl	11260 <__errno_location@plt>
   14ca8:	mov	r1, #22
   14cac:	mov	r5, #0
   14cb0:	str	r1, [r0]
   14cb4:	mov	r0, r5
   14cb8:	sub	sp, fp, #28
   14cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cc0:	ldr	r6, [r9, #4]
   14cc4:	cmp	r6, #0
   14cc8:	beq	14cf8 <__assert_fail@plt+0x3954>
   14ccc:	ldr	r4, [r6, #8]
   14cd0:	ldr	r1, [r6, #12]
   14cd4:	cmp	r1, #0
   14cd8:	beq	14ce4 <__assert_fail@plt+0x3940>
   14cdc:	mov	r0, r1
   14ce0:	bl	11398 <closedir@plt>
   14ce4:	mov	r0, r6
   14ce8:	bl	19a44 <__assert_fail@plt+0x86a0>
   14cec:	cmp	r4, #0
   14cf0:	mov	r6, r4
   14cf4:	bne	14ccc <__assert_fail@plt+0x3928>
   14cf8:	cmp	r7, #4096	; 0x1000
   14cfc:	mov	r4, #1
   14d00:	ldreq	r0, [r9, #48]	; 0x30
   14d04:	moveq	r4, #2
   14d08:	orreq	r0, r0, #4096	; 0x1000
   14d0c:	streq	r0, [r9, #48]	; 0x30
   14d10:	ldr	r0, [r8, #48]	; 0x30
   14d14:	cmp	r0, #0
   14d18:	bne	14d64 <__assert_fail@plt+0x39c0>
   14d1c:	ldr	r0, [r8, #24]
   14d20:	ldrb	r0, [r0]
   14d24:	cmp	r0, #47	; 0x2f
   14d28:	beq	14d64 <__assert_fail@plt+0x39c0>
   14d2c:	ldr	r0, [r9, #48]	; 0x30
   14d30:	tst	r0, #4
   14d34:	bne	14d64 <__assert_fail@plt+0x39c0>
   14d38:	mov	r1, #32768	; 0x8000
   14d3c:	tst	r0, #512	; 0x200
   14d40:	and	r1, r1, r0, lsl #11
   14d44:	orr	r1, r1, #18688	; 0x4900
   14d48:	orr	r2, r1, #524288	; 0x80000
   14d4c:	bne	14d7c <__assert_fail@plt+0x39d8>
   14d50:	movw	r0, #43324	; 0xa93c
   14d54:	mov	r1, r2
   14d58:	movt	r0, #1
   14d5c:	bl	199a0 <__assert_fail@plt+0x85fc>
   14d60:	b	14d8c <__assert_fail@plt+0x39e8>
   14d64:	mov	r0, r9
   14d68:	mov	r1, r4
   14d6c:	bl	14024 <__assert_fail@plt+0x2c80>
   14d70:	mov	r5, r0
   14d74:	str	r0, [r9, #4]
   14d78:	b	14cb4 <__assert_fail@plt+0x3910>
   14d7c:	ldr	r0, [r9, #32]
   14d80:	movw	r1, #43324	; 0xa93c
   14d84:	movt	r1, #1
   14d88:	bl	16954 <__assert_fail@plt+0x55b0>
   14d8c:	mov	r8, r0
   14d90:	cmn	r0, #1
   14d94:	ble	14dd8 <__assert_fail@plt+0x3a34>
   14d98:	mov	r0, r9
   14d9c:	mov	r1, r4
   14da0:	bl	14024 <__assert_fail@plt+0x2c80>
   14da4:	str	r0, [r9, #4]
   14da8:	ldrb	r0, [r9, #49]	; 0x31
   14dac:	tst	r0, #2
   14db0:	bne	14de4 <__assert_fail@plt+0x3a40>
   14db4:	mov	r0, r8
   14db8:	bl	11320 <fchdir@plt>
   14dbc:	cmp	r0, #0
   14dc0:	beq	14e14 <__assert_fail@plt+0x3a70>
   14dc4:	ldr	r4, [sl]
   14dc8:	mov	r0, r8
   14dcc:	bl	11380 <close@plt>
   14dd0:	str	r4, [sl]
   14dd4:	b	14cb4 <__assert_fail@plt+0x3910>
   14dd8:	mov	r5, #0
   14ddc:	str	r5, [r9, #4]
   14de0:	b	14cb4 <__assert_fail@plt+0x3910>
   14de4:	ldr	r1, [r9, #32]
   14de8:	cmp	r1, r8
   14dec:	bne	14df8 <__assert_fail@plt+0x3a54>
   14df0:	cmn	r1, #100	; 0x64
   14df4:	bne	14e24 <__assert_fail@plt+0x3a80>
   14df8:	add	r0, r9, #60	; 0x3c
   14dfc:	bl	1630c <__assert_fail@plt+0x4f68>
   14e00:	cmp	r0, #0
   14e04:	blt	14e0c <__assert_fail@plt+0x3a68>
   14e08:	bl	11380 <close@plt>
   14e0c:	str	r8, [r9, #32]
   14e10:	b	14e1c <__assert_fail@plt+0x3a78>
   14e14:	mov	r0, r8
   14e18:	bl	11380 <close@plt>
   14e1c:	ldr	r5, [r9, #4]
   14e20:	b	14cb4 <__assert_fail@plt+0x3910>
   14e24:	bl	11374 <abort@plt>
   14e28:	push	{fp, lr}
   14e2c:	mov	fp, sp
   14e30:	mov	r2, r1
   14e34:	ldrd	r0, [r0, #8]
   14e38:	mov	r3, #0
   14e3c:	bl	19cf8 <__assert_fail@plt+0x8954>
   14e40:	mov	r0, r2
   14e44:	pop	{fp, pc}
   14e48:	push	{r4, r5, fp, lr}
   14e4c:	add	fp, sp, #8
   14e50:	ldrd	r2, [r1, #8]
   14e54:	ldrd	r4, [r0, #8]
   14e58:	eor	r3, r5, r3
   14e5c:	eor	r2, r4, r2
   14e60:	orrs	r2, r2, r3
   14e64:	mov	r2, #0
   14e68:	bne	14e88 <__assert_fail@plt+0x3ae4>
   14e6c:	ldrd	r2, [r1]
   14e70:	ldrd	r0, [r0]
   14e74:	eor	r1, r1, r3
   14e78:	eor	r0, r0, r2
   14e7c:	orr	r0, r0, r1
   14e80:	clz	r0, r0
   14e84:	lsr	r2, r0, #5
   14e88:	mov	r0, r2
   14e8c:	pop	{r4, r5, fp, pc}
   14e90:	push	{r4, r5, fp, lr}
   14e94:	add	fp, sp, #8
   14e98:	ldr	r0, [r0]
   14e9c:	ldrd	r2, [r0, #160]	; 0xa0
   14ea0:	ldr	r0, [r1]
   14ea4:	ldrd	r4, [r0, #160]	; 0xa0
   14ea8:	mov	r0, #0
   14eac:	subs	r1, r4, r2
   14eb0:	sbcs	r1, r5, r3
   14eb4:	movwcc	r0, #1
   14eb8:	subs	r1, r2, r4
   14ebc:	sbcs	r1, r3, r5
   14ec0:	subcc	r0, r0, #1
   14ec4:	pop	{r4, r5, fp, pc}
   14ec8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ecc:	add	fp, sp, #24
   14ed0:	sub	sp, sp, #96	; 0x60
   14ed4:	ldr	r7, [r0, #44]	; 0x2c
   14ed8:	mov	r4, r0
   14edc:	mov	r5, #0
   14ee0:	ldrb	r0, [r7, #49]	; 0x31
   14ee4:	tst	r0, #2
   14ee8:	beq	14fe4 <__assert_fail@plt+0x3c40>
   14eec:	ldr	r6, [r7, #52]	; 0x34
   14ef0:	mov	r9, r1
   14ef4:	cmp	r6, #0
   14ef8:	bne	14f38 <__assert_fail@plt+0x3b94>
   14efc:	movw	r0, #39492	; 0x9a44
   14f00:	movw	r2, #20464	; 0x4ff0
   14f04:	movw	r3, #20496	; 0x5010
   14f08:	mov	r1, #0
   14f0c:	mov	r8, #0
   14f10:	movt	r0, #1
   14f14:	movt	r2, #1
   14f18:	movt	r3, #1
   14f1c:	str	r0, [sp]
   14f20:	mov	r0, #13
   14f24:	bl	154b8 <__assert_fail@plt+0x4114>
   14f28:	mov	r6, r0
   14f2c:	cmp	r0, #0
   14f30:	str	r0, [r7, #52]	; 0x34
   14f34:	beq	14f70 <__assert_fail@plt+0x3bcc>
   14f38:	ldrd	r0, [r4, #64]	; 0x40
   14f3c:	str	r1, [sp, #12]
   14f40:	str	r0, [sp, #8]
   14f44:	add	r1, sp, #8
   14f48:	mov	r0, r6
   14f4c:	bl	15208 <__assert_fail@plt+0x3e64>
   14f50:	cmp	r0, #0
   14f54:	beq	14f60 <__assert_fail@plt+0x3bbc>
   14f58:	ldr	r5, [r0, #8]
   14f5c:	b	14fe4 <__assert_fail@plt+0x3c40>
   14f60:	mov	r8, #1
   14f64:	cmp	r9, #0
   14f68:	bge	14f7c <__assert_fail@plt+0x3bd8>
   14f6c:	b	14fe4 <__assert_fail@plt+0x3c40>
   14f70:	mov	r6, #0
   14f74:	cmp	r9, #0
   14f78:	blt	14fe4 <__assert_fail@plt+0x3c40>
   14f7c:	add	r1, sp, #8
   14f80:	mov	r0, r9
   14f84:	bl	110bc <fstatfs64@plt>
   14f88:	cmp	r0, #0
   14f8c:	bne	14fe4 <__assert_fail@plt+0x3c40>
   14f90:	cmp	r8, #0
   14f94:	beq	14fe0 <__assert_fail@plt+0x3c3c>
   14f98:	mov	r0, #16
   14f9c:	bl	19528 <__assert_fail@plt+0x8184>
   14fa0:	cmp	r0, #0
   14fa4:	beq	14fe0 <__assert_fail@plt+0x3c3c>
   14fa8:	mov	r5, r0
   14fac:	ldrd	r0, [r4, #64]	; 0x40
   14fb0:	ldr	r2, [sp, #8]
   14fb4:	stm	r5, {r0, r1, r2}
   14fb8:	mov	r0, r6
   14fbc:	mov	r1, r5
   14fc0:	bl	15ffc <__assert_fail@plt+0x4c58>
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fd8 <__assert_fail@plt+0x3c34>
   14fcc:	cmp	r0, r5
   14fd0:	beq	14fe0 <__assert_fail@plt+0x3c3c>
   14fd4:	bl	11374 <abort@plt>
   14fd8:	mov	r0, r5
   14fdc:	bl	19a44 <__assert_fail@plt+0x86a0>
   14fe0:	ldr	r5, [sp, #8]
   14fe4:	mov	r0, r5
   14fe8:	sub	sp, fp, #24
   14fec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ff0:	push	{fp, lr}
   14ff4:	mov	fp, sp
   14ff8:	mov	r2, r1
   14ffc:	ldrd	r0, [r0]
   15000:	mov	r3, #0
   15004:	bl	19cf8 <__assert_fail@plt+0x8954>
   15008:	mov	r0, r2
   1500c:	pop	{fp, pc}
   15010:	ldrd	r2, [r1]
   15014:	ldrd	r0, [r0]
   15018:	eor	r1, r1, r3
   1501c:	eor	r0, r0, r2
   15020:	orr	r0, r0, r1
   15024:	clz	r0, r0
   15028:	lsr	r0, r0, #5
   1502c:	bx	lr
   15030:	ldr	r0, [r0, #8]
   15034:	bx	lr
   15038:	ldr	r0, [r0, #12]
   1503c:	bx	lr
   15040:	ldr	r0, [r0, #16]
   15044:	bx	lr
   15048:	ldm	r0, {r2, ip}
   1504c:	mov	r0, #0
   15050:	cmp	r2, ip
   15054:	bxcs	lr
   15058:	mov	r0, #0
   1505c:	ldr	r1, [r2]
   15060:	cmp	r1, #0
   15064:	beq	15088 <__assert_fail@plt+0x3ce4>
   15068:	mov	r3, #0
   1506c:	mov	r1, r2
   15070:	ldr	r1, [r1, #4]
   15074:	add	r3, r3, #1
   15078:	cmp	r1, #0
   1507c:	bne	15070 <__assert_fail@plt+0x3ccc>
   15080:	cmp	r3, r0
   15084:	movhi	r0, r3
   15088:	add	r2, r2, #8
   1508c:	cmp	r2, ip
   15090:	bcc	1505c <__assert_fail@plt+0x3cb8>
   15094:	bx	lr
   15098:	push	{fp, lr}
   1509c:	mov	fp, sp
   150a0:	ldm	r0, {r3, ip}
   150a4:	mov	lr, #0
   150a8:	mov	r1, #0
   150ac:	cmp	r3, ip
   150b0:	bcs	150ec <__assert_fail@plt+0x3d48>
   150b4:	mov	r1, #0
   150b8:	mov	lr, #0
   150bc:	ldr	r2, [r3]
   150c0:	cmp	r2, #0
   150c4:	beq	150e0 <__assert_fail@plt+0x3d3c>
   150c8:	mov	r2, r3
   150cc:	ldr	r2, [r2, #4]
   150d0:	add	r1, r1, #1
   150d4:	cmp	r2, #0
   150d8:	bne	150cc <__assert_fail@plt+0x3d28>
   150dc:	add	lr, lr, #1
   150e0:	add	r3, r3, #8
   150e4:	cmp	r3, ip
   150e8:	bcc	150bc <__assert_fail@plt+0x3d18>
   150ec:	ldr	r2, [r0, #12]
   150f0:	cmp	lr, r2
   150f4:	bne	1510c <__assert_fail@plt+0x3d68>
   150f8:	ldr	r2, [r0, #16]
   150fc:	mov	r0, #1
   15100:	cmp	r1, r2
   15104:	movne	r0, #0
   15108:	pop	{fp, pc}
   1510c:	mov	r0, #0
   15110:	pop	{fp, pc}
   15114:	nop	{0}
   15118:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1511c:	add	fp, sp, #24
   15120:	sub	sp, sp, #8
   15124:	ldr	r6, [r0]
   15128:	ldmib	r0, {r2, r7, r8}
   1512c:	ldr	r3, [r0, #16]
   15130:	mov	r4, r1
   15134:	mov	r5, #0
   15138:	cmp	r6, r2
   1513c:	bcs	1517c <__assert_fail@plt+0x3dd8>
   15140:	mov	r5, #0
   15144:	ldr	r0, [r6]
   15148:	cmp	r0, #0
   1514c:	beq	15170 <__assert_fail@plt+0x3dcc>
   15150:	mov	r0, #0
   15154:	mov	r1, r6
   15158:	ldr	r1, [r1, #4]
   1515c:	add	r0, r0, #1
   15160:	cmp	r1, #0
   15164:	bne	15158 <__assert_fail@plt+0x3db4>
   15168:	cmp	r0, r5
   1516c:	movhi	r5, r0
   15170:	add	r6, r6, #8
   15174:	cmp	r6, r2
   15178:	bcc	15144 <__assert_fail@plt+0x3da0>
   1517c:	movw	r2, #43376	; 0xa970
   15180:	mov	r0, r4
   15184:	mov	r1, #1
   15188:	movt	r2, #1
   1518c:	bl	112a8 <__fprintf_chk@plt>
   15190:	movw	r2, #43400	; 0xa988
   15194:	mov	r0, r4
   15198:	mov	r1, #1
   1519c:	mov	r3, r7
   151a0:	movt	r2, #1
   151a4:	bl	112a8 <__fprintf_chk@plt>
   151a8:	vldr	d16, [pc, #80]	; 15200 <__assert_fail@plt+0x3e5c>
   151ac:	vmov	s0, r8
   151b0:	movw	r2, #43424	; 0xa9a0
   151b4:	mov	r0, r4
   151b8:	mov	r1, #1
   151bc:	mov	r3, r8
   151c0:	vcvt.f64.u32	d17, s0
   151c4:	vmov	s0, r7
   151c8:	movt	r2, #1
   151cc:	vcvt.f64.u32	d18, s0
   151d0:	vmul.f64	d16, d17, d16
   151d4:	vdiv.f64	d16, d16, d18
   151d8:	vstr	d16, [sp]
   151dc:	bl	112a8 <__fprintf_chk@plt>
   151e0:	movw	r2, #43457	; 0xa9c1
   151e4:	mov	r0, r4
   151e8:	mov	r1, #1
   151ec:	mov	r3, r5
   151f0:	movt	r2, #1
   151f4:	sub	sp, fp, #24
   151f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   151fc:	b	112a8 <__fprintf_chk@plt>
   15200:	andeq	r0, r0, r0
   15204:	subsmi	r0, r9, r0
   15208:	push	{r4, r5, r6, r7, fp, lr}
   1520c:	add	fp, sp, #16
   15210:	mov	r4, r1
   15214:	ldr	r1, [r0, #8]
   15218:	ldr	r2, [r0, #24]
   1521c:	mov	r5, r0
   15220:	mov	r0, r4
   15224:	blx	r2
   15228:	ldr	r1, [r5, #8]
   1522c:	cmp	r0, r1
   15230:	bcs	1529c <__assert_fail@plt+0x3ef8>
   15234:	ldr	r7, [r5]
   15238:	mov	r6, #0
   1523c:	ldr	r1, [r7, r0, lsl #3]!
   15240:	cmp	r1, #0
   15244:	cmpne	r7, #0
   15248:	bne	15258 <__assert_fail@plt+0x3eb4>
   1524c:	mov	r0, r6
   15250:	pop	{r4, r5, r6, r7, fp, pc}
   15254:	ldr	r1, [r7]
   15258:	cmp	r1, r4
   1525c:	beq	15284 <__assert_fail@plt+0x3ee0>
   15260:	ldr	r2, [r5, #28]
   15264:	mov	r0, r4
   15268:	blx	r2
   1526c:	cmp	r0, #0
   15270:	bne	15290 <__assert_fail@plt+0x3eec>
   15274:	ldr	r7, [r7, #4]
   15278:	cmp	r7, #0
   1527c:	bne	15254 <__assert_fail@plt+0x3eb0>
   15280:	b	1524c <__assert_fail@plt+0x3ea8>
   15284:	mov	r6, r4
   15288:	mov	r0, r6
   1528c:	pop	{r4, r5, r6, r7, fp, pc}
   15290:	ldr	r6, [r7]
   15294:	mov	r0, r6
   15298:	pop	{r4, r5, r6, r7, fp, pc}
   1529c:	bl	11374 <abort@plt>
   152a0:	ldr	r1, [r0, #16]
   152a4:	cmp	r1, #0
   152a8:	moveq	r0, #0
   152ac:	bxeq	lr
   152b0:	ldm	r0, {r1, r2}
   152b4:	cmp	r1, r2
   152b8:	bcs	152d0 <__assert_fail@plt+0x3f2c>
   152bc:	ldr	r0, [r1], #8
   152c0:	cmp	r0, #0
   152c4:	bxne	lr
   152c8:	cmp	r1, r2
   152cc:	bcc	152bc <__assert_fail@plt+0x3f18>
   152d0:	push	{fp, lr}
   152d4:	mov	fp, sp
   152d8:	bl	11374 <abort@plt>
   152dc:	push	{r4, r5, fp, lr}
   152e0:	add	fp, sp, #8
   152e4:	mov	r5, r1
   152e8:	ldr	r1, [r0, #8]
   152ec:	ldr	r2, [r0, #24]
   152f0:	mov	r4, r0
   152f4:	mov	r0, r5
   152f8:	blx	r2
   152fc:	ldr	r1, [r4, #8]
   15300:	cmp	r0, r1
   15304:	bcs	15360 <__assert_fail@plt+0x3fbc>
   15308:	ldr	r1, [r4]
   1530c:	add	r2, r1, r0, lsl #3
   15310:	ldr	r3, [r2]
   15314:	ldr	r2, [r2, #4]
   15318:	cmp	r3, r5
   1531c:	beq	1532c <__assert_fail@plt+0x3f88>
   15320:	cmp	r2, #0
   15324:	bne	15310 <__assert_fail@plt+0x3f6c>
   15328:	b	15338 <__assert_fail@plt+0x3f94>
   1532c:	cmp	r2, #0
   15330:	ldrne	r0, [r2]
   15334:	popne	{r4, r5, fp, pc}
   15338:	ldr	r2, [r4, #4]
   1533c:	add	r0, r1, r0, lsl #3
   15340:	add	r1, r0, #8
   15344:	cmp	r1, r2
   15348:	movcs	r0, #0
   1534c:	popcs	{r4, r5, fp, pc}
   15350:	ldr	r0, [r1], #8
   15354:	cmp	r0, #0
   15358:	popne	{r4, r5, fp, pc}
   1535c:	b	15344 <__assert_fail@plt+0x3fa0>
   15360:	bl	11374 <abort@plt>
   15364:	push	{r4, r5, fp, lr}
   15368:	add	fp, sp, #8
   1536c:	ldm	r0, {r5, lr}
   15370:	mov	ip, r0
   15374:	mov	r0, #0
   15378:	cmp	r5, lr
   1537c:	bcs	153c8 <__assert_fail@plt+0x4024>
   15380:	mov	r0, #0
   15384:	ldr	r3, [r5]
   15388:	cmp	r3, #0
   1538c:	cmpne	r5, #0
   15390:	beq	153bc <__assert_fail@plt+0x4018>
   15394:	mov	r3, r5
   15398:	cmp	r0, r2
   1539c:	popcs	{r4, r5, fp, pc}
   153a0:	ldr	r4, [r3]
   153a4:	str	r4, [r1, r0, lsl #2]
   153a8:	add	r0, r0, #1
   153ac:	ldr	r3, [r3, #4]
   153b0:	cmp	r3, #0
   153b4:	bne	15398 <__assert_fail@plt+0x3ff4>
   153b8:	ldr	lr, [ip, #4]
   153bc:	add	r5, r5, #8
   153c0:	cmp	r5, lr
   153c4:	bcc	15384 <__assert_fail@plt+0x3fe0>
   153c8:	pop	{r4, r5, fp, pc}
   153cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153d0:	add	fp, sp, #24
   153d4:	mov	r5, r1
   153d8:	ldr	r4, [r0]
   153dc:	ldr	r1, [r0, #4]
   153e0:	mov	r6, #0
   153e4:	cmp	r4, r1
   153e8:	bcs	1545c <__assert_fail@plt+0x40b8>
   153ec:	mov	r9, r2
   153f0:	mov	r8, r0
   153f4:	mov	r6, #0
   153f8:	b	15440 <__assert_fail@plt+0x409c>
   153fc:	mov	r1, r9
   15400:	blx	r5
   15404:	cmp	r0, #0
   15408:	beq	1545c <__assert_fail@plt+0x40b8>
   1540c:	mov	r7, r4
   15410:	ldr	r7, [r7, #4]
   15414:	add	r6, r6, #1
   15418:	cmp	r7, #0
   1541c:	beq	15438 <__assert_fail@plt+0x4094>
   15420:	ldr	r0, [r7]
   15424:	mov	r1, r9
   15428:	blx	r5
   1542c:	cmp	r0, #0
   15430:	bne	15410 <__assert_fail@plt+0x406c>
   15434:	b	1545c <__assert_fail@plt+0x40b8>
   15438:	ldr	r1, [r8, #4]
   1543c:	b	15450 <__assert_fail@plt+0x40ac>
   15440:	ldr	r0, [r4]
   15444:	cmp	r0, #0
   15448:	cmpne	r4, #0
   1544c:	bne	153fc <__assert_fail@plt+0x4058>
   15450:	add	r4, r4, #8
   15454:	cmp	r4, r1
   15458:	bcc	15440 <__assert_fail@plt+0x409c>
   1545c:	mov	r0, r6
   15460:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15464:	ldrb	r2, [r0]
   15468:	cmp	r2, #0
   1546c:	moveq	r0, #0
   15470:	bxeq	lr
   15474:	add	r3, r0, #1
   15478:	mov	r0, #0
   1547c:	rsb	r0, r0, r0, lsl #5
   15480:	uxtab	r0, r0, r2
   15484:	udiv	r2, r0, r1
   15488:	mls	r0, r2, r1, r0
   1548c:	ldrb	r2, [r3], #1
   15490:	cmp	r2, #0
   15494:	bne	1547c <__assert_fail@plt+0x40d8>
   15498:	bx	lr
   1549c:	movw	r1, #43488	; 0xa9e0
   154a0:	movt	r1, #1
   154a4:	vld1.32	{d16-d17}, [r1]!
   154a8:	ldr	r1, [r1]
   154ac:	vst1.32	{d16-d17}, [r0]!
   154b0:	str	r1, [r0]
   154b4:	bx	lr
   154b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154bc:	add	fp, sp, #24
   154c0:	movw	r9, #22240	; 0x56e0
   154c4:	movw	r5, #22220	; 0x56cc
   154c8:	cmp	r3, #0
   154cc:	mov	r6, r0
   154d0:	mov	r0, #40	; 0x28
   154d4:	mov	r7, r1
   154d8:	movt	r9, #1
   154dc:	movt	r5, #1
   154e0:	movne	r9, r3
   154e4:	cmp	r2, #0
   154e8:	movne	r5, r2
   154ec:	bl	19528 <__assert_fail@plt+0x8184>
   154f0:	mov	r8, #0
   154f4:	cmp	r0, #0
   154f8:	beq	156b4 <__assert_fail@plt+0x4310>
   154fc:	mov	r4, r0
   15500:	movw	r0, #43488	; 0xa9e0
   15504:	cmp	r7, #0
   15508:	movt	r0, #1
   1550c:	moveq	r7, r0
   15510:	cmp	r7, r0
   15514:	str	r7, [r4, #20]
   15518:	beq	15594 <__assert_fail@plt+0x41f0>
   1551c:	vldr	s2, [pc, #408]	; 156bc <__assert_fail@plt+0x4318>
   15520:	vldr	s0, [r7, #8]
   15524:	vcmpe.f32	s0, s2
   15528:	vmrs	APSR_nzcv, fpscr
   1552c:	ble	15640 <__assert_fail@plt+0x429c>
   15530:	vldr	s4, [pc, #392]	; 156c0 <__assert_fail@plt+0x431c>
   15534:	vcmpe.f32	s0, s4
   15538:	vmrs	APSR_nzcv, fpscr
   1553c:	bpl	15640 <__assert_fail@plt+0x429c>
   15540:	vldr	s4, [pc, #380]	; 156c4 <__assert_fail@plt+0x4320>
   15544:	vldr	s6, [r7, #12]
   15548:	vcmpe.f32	s6, s4
   1554c:	vmrs	APSR_nzcv, fpscr
   15550:	ble	15640 <__assert_fail@plt+0x429c>
   15554:	vldr	s4, [r7]
   15558:	vcmpe.f32	s4, #0.0
   1555c:	vmrs	APSR_nzcv, fpscr
   15560:	blt	15640 <__assert_fail@plt+0x429c>
   15564:	vadd.f32	s2, s4, s2
   15568:	vcmpe.f32	s2, s0
   1556c:	vmrs	APSR_nzcv, fpscr
   15570:	bpl	15640 <__assert_fail@plt+0x429c>
   15574:	vldr	s0, [r7, #4]
   15578:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1557c:	vcmpe.f32	s0, s4
   15580:	vmrs	APSR_nzcv, fpscr
   15584:	bhi	15640 <__assert_fail@plt+0x429c>
   15588:	vcmpe.f32	s2, s0
   1558c:	vmrs	APSR_nzcv, fpscr
   15590:	bpl	15640 <__assert_fail@plt+0x429c>
   15594:	ldrb	r0, [r7, #16]
   15598:	cmp	r0, #0
   1559c:	bne	155c8 <__assert_fail@plt+0x4224>
   155a0:	vldr	s0, [r7, #8]
   155a4:	vldr	s4, [pc, #284]	; 156c8 <__assert_fail@plt+0x4324>
   155a8:	vmov	s2, r6
   155ac:	vcvt.f32.u32	s2, s2
   155b0:	vdiv.f32	s2, s2, s0
   155b4:	vcmpe.f32	s2, s4
   155b8:	vcvt.u32.f32	s0, s2
   155bc:	vmrs	APSR_nzcv, fpscr
   155c0:	bge	15650 <__assert_fail@plt+0x42ac>
   155c4:	vmov	r6, s0
   155c8:	cmp	r6, #10
   155cc:	movls	r6, #10
   155d0:	orr	r0, r6, #1
   155d4:	cmn	r0, #1
   155d8:	beq	15650 <__assert_fail@plt+0x42ac>
   155dc:	ldr	r6, [fp, #8]
   155e0:	mov	r1, #3
   155e4:	cmp	r0, #10
   155e8:	bcc	15620 <__assert_fail@plt+0x427c>
   155ec:	mov	r1, #3
   155f0:	mov	r3, #9
   155f4:	mov	r2, #12
   155f8:	udiv	r7, r0, r1
   155fc:	mls	r7, r7, r1, r0
   15600:	cmp	r7, #0
   15604:	beq	15620 <__assert_fail@plt+0x427c>
   15608:	add	r3, r3, r2
   1560c:	add	r2, r2, #8
   15610:	add	r1, r1, #2
   15614:	add	r3, r3, #4
   15618:	cmp	r3, r0
   1561c:	bcc	155f8 <__assert_fail@plt+0x4254>
   15620:	udiv	r2, r0, r1
   15624:	mls	r1, r2, r1, r0
   15628:	cmp	r1, #0
   1562c:	bne	15648 <__assert_fail@plt+0x42a4>
   15630:	add	r0, r0, #2
   15634:	cmn	r0, #1
   15638:	bne	155e0 <__assert_fail@plt+0x423c>
   1563c:	b	15650 <__assert_fail@plt+0x42ac>
   15640:	str	r0, [r4, #20]
   15644:	b	15658 <__assert_fail@plt+0x42b4>
   15648:	cmp	r0, #536870912	; 0x20000000
   1564c:	bcc	15668 <__assert_fail@plt+0x42c4>
   15650:	mov	r0, #0
   15654:	str	r0, [r4, #8]
   15658:	mov	r0, r4
   1565c:	bl	19a44 <__assert_fail@plt+0x86a0>
   15660:	mov	r0, r8
   15664:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15668:	cmp	r0, #0
   1566c:	str	r0, [r4, #8]
   15670:	beq	15658 <__assert_fail@plt+0x42b4>
   15674:	mov	r1, #8
   15678:	bl	194d4 <__assert_fail@plt+0x8130>
   1567c:	cmp	r0, #0
   15680:	str	r0, [r4]
   15684:	beq	15658 <__assert_fail@plt+0x42b4>
   15688:	mov	r1, #0
   1568c:	mov	r8, r4
   15690:	str	r1, [r4, #12]
   15694:	str	r1, [r4, #16]
   15698:	str	r5, [r4, #24]
   1569c:	str	r9, [r4, #28]
   156a0:	str	r6, [r4, #32]
   156a4:	str	r1, [r4, #36]	; 0x24
   156a8:	ldr	r1, [r4, #8]
   156ac:	add	r0, r0, r1, lsl #3
   156b0:	str	r0, [r4, #4]
   156b4:	mov	r0, r8
   156b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   156c0:	svccc	0x00666666
   156c4:	svccc	0x008ccccd
   156c8:	svcmi	0x00800000
   156cc:	ror	r2, r0, #3
   156d0:	udiv	r2, r2, r1
   156d4:	mul	r1, r2, r1
   156d8:	rsb	r0, r1, r0, ror #3
   156dc:	bx	lr
   156e0:	sub	r0, r0, r1
   156e4:	clz	r0, r0
   156e8:	lsr	r0, r0, #5
   156ec:	bx	lr
   156f0:	push	{r4, r5, r6, r7, fp, lr}
   156f4:	add	fp, sp, #16
   156f8:	mov	r4, r0
   156fc:	ldr	r5, [r0]
   15700:	ldr	r0, [r0, #4]
   15704:	cmp	r5, r0
   15708:	bcs	157a0 <__assert_fail@plt+0x43fc>
   1570c:	mov	r6, #0
   15710:	ldr	r1, [r5]
   15714:	cmp	r1, #0
   15718:	beq	15794 <__assert_fail@plt+0x43f0>
   1571c:	ldr	r1, [r4, #32]
   15720:	ldr	r7, [r5, #4]
   15724:	cmp	r1, #0
   15728:	mov	r0, r1
   1572c:	movwne	r0, #1
   15730:	cmp	r7, #0
   15734:	beq	15778 <__assert_fail@plt+0x43d4>
   15738:	tst	r0, #1
   1573c:	beq	1574c <__assert_fail@plt+0x43a8>
   15740:	ldr	r0, [r7]
   15744:	blx	r1
   15748:	ldr	r1, [r4, #32]
   1574c:	str	r6, [r7]
   15750:	cmp	r1, #0
   15754:	ldr	r0, [r4, #36]	; 0x24
   15758:	ldr	r2, [r7, #4]
   1575c:	str	r0, [r7, #4]
   15760:	mov	r0, r1
   15764:	str	r7, [r4, #36]	; 0x24
   15768:	mov	r7, r2
   1576c:	movwne	r0, #1
   15770:	cmp	r2, #0
   15774:	bne	15738 <__assert_fail@plt+0x4394>
   15778:	cmp	r0, #0
   1577c:	beq	15788 <__assert_fail@plt+0x43e4>
   15780:	ldr	r0, [r5]
   15784:	blx	r1
   15788:	str	r6, [r5]
   1578c:	str	r6, [r5, #4]
   15790:	ldr	r0, [r4, #4]
   15794:	add	r5, r5, #8
   15798:	cmp	r5, r0
   1579c:	bcc	15710 <__assert_fail@plt+0x436c>
   157a0:	mov	r0, #0
   157a4:	str	r0, [r4, #12]
   157a8:	str	r0, [r4, #16]
   157ac:	pop	{r4, r5, r6, r7, fp, pc}
   157b0:	push	{r4, r5, r6, sl, fp, lr}
   157b4:	add	fp, sp, #16
   157b8:	mov	r4, r0
   157bc:	ldr	r0, [r0, #32]
   157c0:	cmp	r0, #0
   157c4:	ldrne	r0, [r4, #16]
   157c8:	cmpne	r0, #0
   157cc:	beq	15834 <__assert_fail@plt+0x4490>
   157d0:	ldr	r5, [r4]
   157d4:	ldr	r1, [r4, #4]
   157d8:	cmp	r5, r1
   157dc:	bcc	157f0 <__assert_fail@plt+0x444c>
   157e0:	b	15834 <__assert_fail@plt+0x4490>
   157e4:	add	r5, r5, #8
   157e8:	cmp	r5, r1
   157ec:	bcs	15834 <__assert_fail@plt+0x4490>
   157f0:	ldr	r0, [r5]
   157f4:	cmp	r0, #0
   157f8:	cmpne	r5, #0
   157fc:	beq	157e4 <__assert_fail@plt+0x4440>
   15800:	ldr	r1, [r4, #32]
   15804:	blx	r1
   15808:	ldr	r6, [r5, #4]
   1580c:	cmp	r6, #0
   15810:	beq	1582c <__assert_fail@plt+0x4488>
   15814:	ldr	r1, [r4, #32]
   15818:	ldr	r0, [r6]
   1581c:	blx	r1
   15820:	ldr	r6, [r6, #4]
   15824:	cmp	r6, #0
   15828:	bne	15814 <__assert_fail@plt+0x4470>
   1582c:	ldr	r1, [r4, #4]
   15830:	b	157e4 <__assert_fail@plt+0x4440>
   15834:	ldr	r5, [r4]
   15838:	ldr	r1, [r4, #4]
   1583c:	cmp	r5, r1
   15840:	bcc	15854 <__assert_fail@plt+0x44b0>
   15844:	b	1587c <__assert_fail@plt+0x44d8>
   15848:	add	r5, r5, #8
   1584c:	cmp	r5, r1
   15850:	bcs	1587c <__assert_fail@plt+0x44d8>
   15854:	ldr	r0, [r5, #4]
   15858:	cmp	r0, #0
   1585c:	beq	15848 <__assert_fail@plt+0x44a4>
   15860:	ldr	r6, [r0, #4]
   15864:	bl	19a44 <__assert_fail@plt+0x86a0>
   15868:	cmp	r6, #0
   1586c:	mov	r0, r6
   15870:	bne	15860 <__assert_fail@plt+0x44bc>
   15874:	ldr	r1, [r4, #4]
   15878:	b	15848 <__assert_fail@plt+0x44a4>
   1587c:	ldr	r0, [r4, #36]	; 0x24
   15880:	cmp	r0, #0
   15884:	beq	1589c <__assert_fail@plt+0x44f8>
   15888:	ldr	r5, [r0, #4]
   1588c:	bl	19a44 <__assert_fail@plt+0x86a0>
   15890:	cmp	r5, #0
   15894:	mov	r0, r5
   15898:	bne	15888 <__assert_fail@plt+0x44e4>
   1589c:	ldr	r0, [r4]
   158a0:	bl	19a44 <__assert_fail@plt+0x86a0>
   158a4:	mov	r0, r4
   158a8:	pop	{r4, r5, r6, sl, fp, lr}
   158ac:	b	19a44 <__assert_fail@plt+0x86a0>
   158b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158b4:	add	fp, sp, #28
   158b8:	sub	sp, sp, #44	; 0x2c
   158bc:	mov	r7, r0
   158c0:	mov	r4, r0
   158c4:	ldr	r0, [r7, #20]!
   158c8:	ldrb	r2, [r0, #16]
   158cc:	cmp	r2, #0
   158d0:	bne	15900 <__assert_fail@plt+0x455c>
   158d4:	vldr	s0, [r0, #8]
   158d8:	vldr	s4, [pc, #560]	; 15b10 <__assert_fail@plt+0x476c>
   158dc:	vmov	s2, r1
   158e0:	mov	r5, #0
   158e4:	vcvt.f32.u32	s2, s2
   158e8:	vdiv.f32	s2, s2, s0
   158ec:	vcmpe.f32	s2, s4
   158f0:	vcvt.u32.f32	s0, s2
   158f4:	vmrs	APSR_nzcv, fpscr
   158f8:	bge	15b00 <__assert_fail@plt+0x475c>
   158fc:	vmov	r1, s0
   15900:	cmp	r1, #10
   15904:	mov	r5, #0
   15908:	movls	r1, #10
   1590c:	orr	r6, r1, #1
   15910:	cmn	r6, #1
   15914:	bne	15928 <__assert_fail@plt+0x4584>
   15918:	b	15b00 <__assert_fail@plt+0x475c>
   1591c:	add	r6, r6, #2
   15920:	cmn	r6, #1
   15924:	beq	15b00 <__assert_fail@plt+0x475c>
   15928:	mov	r0, #3
   1592c:	cmp	r6, #10
   15930:	bcc	15968 <__assert_fail@plt+0x45c4>
   15934:	mov	r0, #3
   15938:	mov	r2, #9
   1593c:	mov	r1, #12
   15940:	udiv	r3, r6, r0
   15944:	mls	r3, r3, r0, r6
   15948:	cmp	r3, #0
   1594c:	beq	15968 <__assert_fail@plt+0x45c4>
   15950:	add	r2, r2, r1
   15954:	add	r1, r1, #8
   15958:	add	r0, r0, #2
   1595c:	add	r2, r2, #4
   15960:	cmp	r2, r6
   15964:	bcc	15940 <__assert_fail@plt+0x459c>
   15968:	udiv	r1, r6, r0
   1596c:	mls	r0, r1, r0, r6
   15970:	cmp	r0, #0
   15974:	beq	1591c <__assert_fail@plt+0x4578>
   15978:	sub	r0, r6, #1
   1597c:	cmn	r0, #-536870910	; 0xe0000002
   15980:	bhi	15b00 <__assert_fail@plt+0x475c>
   15984:	ldr	r0, [r4, #8]
   15988:	cmp	r6, r0
   1598c:	bne	15998 <__assert_fail@plt+0x45f4>
   15990:	mov	r5, #1
   15994:	b	15b00 <__assert_fail@plt+0x475c>
   15998:	mov	r0, r6
   1599c:	mov	r1, #8
   159a0:	bl	194d4 <__assert_fail@plt+0x8130>
   159a4:	cmp	r0, #0
   159a8:	str	r0, [sp, #4]
   159ac:	beq	15b00 <__assert_fail@plt+0x475c>
   159b0:	mov	r1, #0
   159b4:	add	r0, r0, r6, lsl #3
   159b8:	str	r6, [sp, #12]
   159bc:	add	r5, sp, #4
   159c0:	mov	sl, r4
   159c4:	mov	r2, #0
   159c8:	str	r1, [sp, #16]
   159cc:	str	r1, [sp, #20]
   159d0:	str	r0, [sp, #8]
   159d4:	add	r0, r5, #20
   159d8:	mov	r1, r4
   159dc:	vld1.32	{d16-d17}, [r7]
   159e0:	vst1.32	{d16-d17}, [r0]
   159e4:	ldr	r0, [sl, #36]!	; 0x24
   159e8:	str	r0, [sp, #40]	; 0x28
   159ec:	mov	r0, r5
   159f0:	bl	15b14 <__assert_fail@plt+0x4770>
   159f4:	cmp	r0, #0
   159f8:	beq	15a20 <__assert_fail@plt+0x467c>
   159fc:	ldr	r0, [r4]
   15a00:	bl	19a44 <__assert_fail@plt+0x86a0>
   15a04:	mov	r0, #36	; 0x24
   15a08:	vld1.32	{d16-d17}, [r5], r0
   15a0c:	vst1.32	{d16-d17}, [r4], r0
   15a10:	ldr	r0, [r5]
   15a14:	mov	r5, #1
   15a18:	str	r0, [r4]
   15a1c:	b	15b00 <__assert_fail@plt+0x475c>
   15a20:	ldr	r0, [sp, #40]	; 0x28
   15a24:	str	r0, [sl]
   15a28:	ldr	r0, [sp, #8]
   15a2c:	ldr	r8, [sp, #4]
   15a30:	cmp	r8, r0
   15a34:	str	r0, [sp]
   15a38:	bcs	15adc <__assert_fail@plt+0x4738>
   15a3c:	mov	r9, #0
   15a40:	ldr	r0, [r8]
   15a44:	cmp	r0, #0
   15a48:	beq	15acc <__assert_fail@plt+0x4728>
   15a4c:	ldr	r6, [r8, #4]
   15a50:	cmp	r6, #0
   15a54:	beq	15ac8 <__assert_fail@plt+0x4724>
   15a58:	ldr	r1, [r4, #8]
   15a5c:	ldr	r5, [r6]
   15a60:	ldr	r2, [r4, #24]
   15a64:	mov	r0, r5
   15a68:	blx	r2
   15a6c:	ldr	r1, [r4, #8]
   15a70:	cmp	r0, r1
   15a74:	bcs	15b0c <__assert_fail@plt+0x4768>
   15a78:	ldr	r3, [r4]
   15a7c:	ldr	r2, [r6, #4]
   15a80:	ldr	r7, [r3, r0, lsl #3]
   15a84:	cmp	r7, #0
   15a88:	beq	15a98 <__assert_fail@plt+0x46f4>
   15a8c:	add	r0, r3, r0, lsl #3
   15a90:	add	r0, r0, #4
   15a94:	b	15ab0 <__assert_fail@plt+0x470c>
   15a98:	str	r5, [r3, r0, lsl #3]
   15a9c:	ldr	r0, [r4, #12]
   15aa0:	add	r0, r0, #1
   15aa4:	str	r0, [r4, #12]
   15aa8:	mov	r0, sl
   15aac:	str	r9, [r6]
   15ab0:	ldr	r3, [r0]
   15ab4:	cmp	r2, #0
   15ab8:	str	r3, [r6, #4]
   15abc:	str	r6, [r0]
   15ac0:	mov	r6, r2
   15ac4:	bne	15a5c <__assert_fail@plt+0x46b8>
   15ac8:	str	r9, [r8, #4]
   15acc:	ldr	r0, [sp]
   15ad0:	add	r8, r8, #8
   15ad4:	cmp	r8, r0
   15ad8:	bcc	15a40 <__assert_fail@plt+0x469c>
   15adc:	add	r1, sp, #4
   15ae0:	mov	r0, r4
   15ae4:	mov	r2, #0
   15ae8:	mov	r5, #0
   15aec:	bl	15b14 <__assert_fail@plt+0x4770>
   15af0:	cmp	r0, #0
   15af4:	beq	15b0c <__assert_fail@plt+0x4768>
   15af8:	ldr	r0, [sp, #4]
   15afc:	bl	19a44 <__assert_fail@plt+0x86a0>
   15b00:	mov	r0, r5
   15b04:	sub	sp, fp, #28
   15b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b0c:	bl	11374 <abort@plt>
   15b10:	svcmi	0x00800000
   15b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b18:	add	fp, sp, #28
   15b1c:	sub	sp, sp, #12
   15b20:	ldr	sl, [r1]
   15b24:	str	r1, [sp, #8]
   15b28:	ldr	r1, [r1, #4]
   15b2c:	mov	r7, r0
   15b30:	mov	r0, #1
   15b34:	str	r2, [sp, #4]
   15b38:	cmp	sl, r1
   15b3c:	bcs	15c98 <__assert_fail@plt+0x48f4>
   15b40:	add	r8, r7, #36	; 0x24
   15b44:	mov	r9, #0
   15b48:	ldr	r4, [sl]
   15b4c:	cmp	r4, #0
   15b50:	beq	15c80 <__assert_fail@plt+0x48dc>
   15b54:	ldr	r5, [sl, #4]
   15b58:	cmp	r5, #0
   15b5c:	beq	15bd4 <__assert_fail@plt+0x4830>
   15b60:	ldr	r1, [r7, #8]
   15b64:	ldr	r4, [r5]
   15b68:	ldr	r2, [r7, #24]
   15b6c:	mov	r0, r4
   15b70:	blx	r2
   15b74:	ldr	r1, [r7, #8]
   15b78:	cmp	r0, r1
   15b7c:	bcs	15cac <__assert_fail@plt+0x4908>
   15b80:	ldr	r3, [r7]
   15b84:	ldr	r2, [r5, #4]
   15b88:	ldr	r6, [r3, r0, lsl #3]
   15b8c:	cmp	r6, #0
   15b90:	beq	15ba0 <__assert_fail@plt+0x47fc>
   15b94:	add	r0, r3, r0, lsl #3
   15b98:	add	r0, r0, #4
   15b9c:	b	15bb8 <__assert_fail@plt+0x4814>
   15ba0:	str	r4, [r3, r0, lsl #3]
   15ba4:	ldr	r0, [r7, #12]
   15ba8:	add	r0, r0, #1
   15bac:	str	r0, [r7, #12]
   15bb0:	mov	r0, r8
   15bb4:	str	r9, [r5]
   15bb8:	ldr	r3, [r0]
   15bbc:	cmp	r2, #0
   15bc0:	str	r3, [r5, #4]
   15bc4:	str	r5, [r0]
   15bc8:	mov	r5, r2
   15bcc:	bne	15b64 <__assert_fail@plt+0x47c0>
   15bd0:	ldr	r4, [sl]
   15bd4:	ldr	r0, [sp, #4]
   15bd8:	str	r9, [sl, #4]
   15bdc:	cmp	r0, #0
   15be0:	bne	15c80 <__assert_fail@plt+0x48dc>
   15be4:	ldr	r1, [r7, #8]
   15be8:	ldr	r2, [r7, #24]
   15bec:	mov	r0, r4
   15bf0:	blx	r2
   15bf4:	mov	r5, r0
   15bf8:	ldr	r0, [r7, #8]
   15bfc:	cmp	r5, r0
   15c00:	bcs	15cac <__assert_fail@plt+0x4908>
   15c04:	ldr	r6, [r7]
   15c08:	ldr	r0, [r6, r5, lsl #3]
   15c0c:	cmp	r0, #0
   15c10:	beq	15c30 <__assert_fail@plt+0x488c>
   15c14:	ldr	r0, [r8]
   15c18:	cmp	r0, #0
   15c1c:	beq	15c44 <__assert_fail@plt+0x48a0>
   15c20:	mov	r1, r0
   15c24:	ldr	r2, [r1, #4]!
   15c28:	str	r2, [r8]
   15c2c:	b	15c58 <__assert_fail@plt+0x48b4>
   15c30:	str	r4, [r6, r5, lsl #3]
   15c34:	ldr	r0, [r7, #12]
   15c38:	add	r0, r0, #1
   15c3c:	str	r0, [r7, #12]
   15c40:	b	15c6c <__assert_fail@plt+0x48c8>
   15c44:	mov	r0, #8
   15c48:	bl	19528 <__assert_fail@plt+0x8184>
   15c4c:	cmp	r0, #0
   15c50:	beq	15ca0 <__assert_fail@plt+0x48fc>
   15c54:	add	r1, r0, #4
   15c58:	str	r4, [r0]
   15c5c:	add	r2, r6, r5, lsl #3
   15c60:	ldr	r3, [r2, #4]
   15c64:	str	r3, [r1]
   15c68:	str	r0, [r2, #4]
   15c6c:	ldr	r1, [sp, #8]
   15c70:	str	r9, [sl]
   15c74:	ldr	r0, [r1, #12]
   15c78:	sub	r0, r0, #1
   15c7c:	str	r0, [r1, #12]
   15c80:	ldr	r0, [sp, #8]
   15c84:	add	sl, sl, #8
   15c88:	ldr	r0, [r0, #4]
   15c8c:	cmp	sl, r0
   15c90:	bcc	15b48 <__assert_fail@plt+0x47a4>
   15c94:	mov	r0, #1
   15c98:	sub	sp, fp, #28
   15c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca0:	mov	r0, #0
   15ca4:	sub	sp, fp, #28
   15ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cac:	bl	11374 <abort@plt>
   15cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cb4:	add	fp, sp, #28
   15cb8:	sub	sp, sp, #4
   15cbc:	cmp	r1, #0
   15cc0:	beq	15fe4 <__assert_fail@plt+0x4c40>
   15cc4:	mov	r8, r2
   15cc8:	mov	sl, r1
   15ccc:	ldr	r1, [r0, #8]
   15cd0:	ldr	r2, [r0, #24]
   15cd4:	mov	r4, r0
   15cd8:	mov	r0, sl
   15cdc:	blx	r2
   15ce0:	mov	r7, r0
   15ce4:	ldr	r0, [r4, #8]
   15ce8:	cmp	r7, r0
   15cec:	bcs	15fe4 <__assert_fail@plt+0x4c40>
   15cf0:	ldr	r5, [r4]
   15cf4:	mov	r9, r5
   15cf8:	ldr	r1, [r9, r7, lsl #3]!
   15cfc:	cmp	r1, #0
   15d00:	beq	15d8c <__assert_fail@plt+0x49e8>
   15d04:	cmp	r1, sl
   15d08:	beq	15d34 <__assert_fail@plt+0x4990>
   15d0c:	ldr	r2, [r4, #28]
   15d10:	mov	r0, sl
   15d14:	blx	r2
   15d18:	cmp	r0, #0
   15d1c:	mov	r6, r9
   15d20:	beq	15d48 <__assert_fail@plt+0x49a4>
   15d24:	ldr	r0, [r6]
   15d28:	cmp	r0, #0
   15d2c:	bne	15d38 <__assert_fail@plt+0x4994>
   15d30:	b	15d8c <__assert_fail@plt+0x49e8>
   15d34:	mov	r0, sl
   15d38:	cmp	r8, #0
   15d3c:	mov	r7, #0
   15d40:	strne	r0, [r8]
   15d44:	b	15f80 <__assert_fail@plt+0x4bdc>
   15d48:	add	r6, r5, r7, lsl #3
   15d4c:	ldr	r0, [r6, #4]!
   15d50:	cmp	r0, #0
   15d54:	beq	15d8c <__assert_fail@plt+0x49e8>
   15d58:	ldr	r1, [r0]
   15d5c:	cmp	r1, sl
   15d60:	beq	15d80 <__assert_fail@plt+0x49dc>
   15d64:	ldr	r2, [r4, #28]
   15d68:	mov	r0, sl
   15d6c:	blx	r2
   15d70:	ldr	r6, [r6]
   15d74:	cmp	r0, #0
   15d78:	beq	15d4c <__assert_fail@plt+0x49a8>
   15d7c:	b	15d24 <__assert_fail@plt+0x4980>
   15d80:	mov	r0, sl
   15d84:	cmp	r0, #0
   15d88:	bne	15d38 <__assert_fail@plt+0x4994>
   15d8c:	vldr	s0, [r4, #8]
   15d90:	vldr	s2, [r4, #12]
   15d94:	ldr	r0, [r4, #20]
   15d98:	vcvt.f32.u32	s0, s0
   15d9c:	vcvt.f32.u32	s4, s2
   15da0:	vldr	s2, [r0, #8]
   15da4:	vmul.f32	s6, s2, s0
   15da8:	vcmpe.f32	s6, s4
   15dac:	vmrs	APSR_nzcv, fpscr
   15db0:	bpl	15f04 <__assert_fail@plt+0x4b60>
   15db4:	movw	r1, #43488	; 0xa9e0
   15db8:	movt	r1, #1
   15dbc:	cmp	r0, r1
   15dc0:	beq	15e4c <__assert_fail@plt+0x4aa8>
   15dc4:	vldr	s6, [pc, #540]	; 15fe8 <__assert_fail@plt+0x4c44>
   15dc8:	vcmpe.f32	s2, s6
   15dcc:	vmrs	APSR_nzcv, fpscr
   15dd0:	ble	15e38 <__assert_fail@plt+0x4a94>
   15dd4:	vldr	s8, [pc, #528]	; 15fec <__assert_fail@plt+0x4c48>
   15dd8:	vcmpe.f32	s2, s8
   15ddc:	vmrs	APSR_nzcv, fpscr
   15de0:	bpl	15e38 <__assert_fail@plt+0x4a94>
   15de4:	vldr	s8, [pc, #516]	; 15ff0 <__assert_fail@plt+0x4c4c>
   15de8:	vldr	s10, [r0, #12]
   15dec:	vcmpe.f32	s10, s8
   15df0:	vmrs	APSR_nzcv, fpscr
   15df4:	ble	15e38 <__assert_fail@plt+0x4a94>
   15df8:	vldr	s8, [r0]
   15dfc:	vcmpe.f32	s8, #0.0
   15e00:	vmrs	APSR_nzcv, fpscr
   15e04:	blt	15e38 <__assert_fail@plt+0x4a94>
   15e08:	vadd.f32	s6, s8, s6
   15e0c:	vcmpe.f32	s6, s2
   15e10:	vmrs	APSR_nzcv, fpscr
   15e14:	bpl	15e38 <__assert_fail@plt+0x4a94>
   15e18:	vldr	s8, [r0, #4]
   15e1c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   15e20:	vcmpe.f32	s8, s10
   15e24:	vmrs	APSR_nzcv, fpscr
   15e28:	bhi	15e38 <__assert_fail@plt+0x4a94>
   15e2c:	vcmpe.f32	s6, s8
   15e30:	vmrs	APSR_nzcv, fpscr
   15e34:	bmi	15e50 <__assert_fail@plt+0x4aac>
   15e38:	vldr	s2, [pc, #436]	; 15ff4 <__assert_fail@plt+0x4c50>
   15e3c:	movw	r0, #43488	; 0xa9e0
   15e40:	movt	r0, #1
   15e44:	str	r0, [r4, #20]
   15e48:	b	15e50 <__assert_fail@plt+0x4aac>
   15e4c:	mov	r0, r1
   15e50:	vmul.f32	s6, s2, s0
   15e54:	vcmpe.f32	s6, s4
   15e58:	vmrs	APSR_nzcv, fpscr
   15e5c:	bpl	15f04 <__assert_fail@plt+0x4b60>
   15e60:	vldr	s4, [r0, #12]
   15e64:	ldrb	r0, [r0, #16]
   15e68:	mvn	r7, #0
   15e6c:	vmul.f32	s0, s4, s0
   15e70:	vldr	s4, [pc, #384]	; 15ff8 <__assert_fail@plt+0x4c54>
   15e74:	cmp	r0, #0
   15e78:	vmul.f32	s2, s2, s0
   15e7c:	vseleq.f32	s0, s2, s0
   15e80:	vcmpe.f32	s0, s4
   15e84:	vmrs	APSR_nzcv, fpscr
   15e88:	bge	15f80 <__assert_fail@plt+0x4bdc>
   15e8c:	vcvt.u32.f32	s0, s0
   15e90:	mov	r0, r4
   15e94:	vmov	r1, s0
   15e98:	bl	158b0 <__assert_fail@plt+0x450c>
   15e9c:	cmp	r0, #0
   15ea0:	beq	15f80 <__assert_fail@plt+0x4bdc>
   15ea4:	ldr	r1, [r4, #8]
   15ea8:	ldr	r2, [r4, #24]
   15eac:	mov	r0, sl
   15eb0:	blx	r2
   15eb4:	mov	r7, r0
   15eb8:	ldr	r0, [r4, #8]
   15ebc:	cmp	r7, r0
   15ec0:	bcs	15fe4 <__assert_fail@plt+0x4c40>
   15ec4:	ldr	r5, [r4]
   15ec8:	mov	r9, r5
   15ecc:	ldr	r1, [r9, r7, lsl #3]!
   15ed0:	cmp	r1, #0
   15ed4:	beq	15f2c <__assert_fail@plt+0x4b88>
   15ed8:	cmp	r1, sl
   15edc:	mov	r0, sl
   15ee0:	beq	15efc <__assert_fail@plt+0x4b58>
   15ee4:	ldr	r2, [r4, #28]
   15ee8:	mov	r0, sl
   15eec:	blx	r2
   15ef0:	cmp	r0, #0
   15ef4:	beq	15f94 <__assert_fail@plt+0x4bf0>
   15ef8:	ldr	r0, [r9]
   15efc:	cmp	r0, #0
   15f00:	bne	15fe4 <__assert_fail@plt+0x4c40>
   15f04:	ldr	r0, [r9]
   15f08:	cmp	r0, #0
   15f0c:	beq	15f2c <__assert_fail@plt+0x4b88>
   15f10:	ldr	r0, [r4, #36]	; 0x24
   15f14:	cmp	r0, #0
   15f18:	beq	15f4c <__assert_fail@plt+0x4ba8>
   15f1c:	mov	r1, r0
   15f20:	ldr	r2, [r1, #4]!
   15f24:	str	r2, [r4, #36]	; 0x24
   15f28:	b	15f60 <__assert_fail@plt+0x4bbc>
   15f2c:	str	sl, [r9]
   15f30:	ldr	r0, [r4, #12]
   15f34:	ldr	r1, [r4, #16]
   15f38:	add	r0, r0, #1
   15f3c:	add	r1, r1, #1
   15f40:	str	r0, [r4, #12]
   15f44:	str	r1, [r4, #16]
   15f48:	b	15f7c <__assert_fail@plt+0x4bd8>
   15f4c:	mov	r0, #8
   15f50:	bl	19528 <__assert_fail@plt+0x8184>
   15f54:	cmp	r0, #0
   15f58:	beq	15f8c <__assert_fail@plt+0x4be8>
   15f5c:	add	r1, r0, #4
   15f60:	str	sl, [r0]
   15f64:	ldr	r2, [r9, #4]
   15f68:	str	r2, [r1]
   15f6c:	str	r0, [r9, #4]
   15f70:	ldr	r0, [r4, #16]
   15f74:	add	r0, r0, #1
   15f78:	str	r0, [r4, #16]
   15f7c:	mov	r7, #1
   15f80:	mov	r0, r7
   15f84:	sub	sp, fp, #28
   15f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f8c:	mvn	r7, #0
   15f90:	b	15f80 <__assert_fail@plt+0x4bdc>
   15f94:	add	r6, r5, r7, lsl #3
   15f98:	ldr	r0, [r6, #4]!
   15f9c:	cmp	r0, #0
   15fa0:	beq	15f04 <__assert_fail@plt+0x4b60>
   15fa4:	ldr	r1, [r0]
   15fa8:	cmp	r1, sl
   15fac:	beq	15fd8 <__assert_fail@plt+0x4c34>
   15fb0:	ldr	r2, [r4, #28]
   15fb4:	mov	r0, sl
   15fb8:	blx	r2
   15fbc:	ldr	r6, [r6]
   15fc0:	cmp	r0, #0
   15fc4:	beq	15f98 <__assert_fail@plt+0x4bf4>
   15fc8:	ldr	r0, [r6]
   15fcc:	cmp	r0, #0
   15fd0:	beq	15f04 <__assert_fail@plt+0x4b60>
   15fd4:	b	15fe4 <__assert_fail@plt+0x4c40>
   15fd8:	mov	r0, sl
   15fdc:	cmp	r0, #0
   15fe0:	beq	15f04 <__assert_fail@plt+0x4b60>
   15fe4:	bl	11374 <abort@plt>
   15fe8:	stclcc	12, cr12, [ip, #820]	; 0x334
   15fec:	svccc	0x00666666
   15ff0:	svccc	0x008ccccd
   15ff4:	svccc	0x004ccccd
   15ff8:	svcmi	0x00800000
   15ffc:	push	{r4, sl, fp, lr}
   16000:	add	fp, sp, #8
   16004:	sub	sp, sp, #8
   16008:	add	r2, sp, #4
   1600c:	mov	r4, r1
   16010:	bl	15cb0 <__assert_fail@plt+0x490c>
   16014:	cmn	r0, #1
   16018:	beq	1602c <__assert_fail@plt+0x4c88>
   1601c:	ldr	r1, [sp, #4]
   16020:	cmp	r0, #0
   16024:	moveq	r4, r1
   16028:	b	16030 <__assert_fail@plt+0x4c8c>
   1602c:	mov	r4, #0
   16030:	mov	r0, r4
   16034:	sub	sp, fp, #8
   16038:	pop	{r4, sl, fp, pc}
   1603c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16040:	add	fp, sp, #24
   16044:	mov	r9, r1
   16048:	ldr	r1, [r0, #8]
   1604c:	ldr	r2, [r0, #24]
   16050:	mov	r5, r0
   16054:	mov	r0, r9
   16058:	blx	r2
   1605c:	mov	r7, r0
   16060:	ldr	r0, [r5, #8]
   16064:	cmp	r7, r0
   16068:	bcs	162c8 <__assert_fail@plt+0x4f24>
   1606c:	ldr	r6, [r5]
   16070:	mov	r8, #0
   16074:	mov	r4, r6
   16078:	ldr	r1, [r4, r7, lsl #3]!
   1607c:	cmp	r1, #0
   16080:	beq	16134 <__assert_fail@plt+0x4d90>
   16084:	cmp	r1, r9
   16088:	beq	160a4 <__assert_fail@plt+0x4d00>
   1608c:	ldr	r2, [r5, #28]
   16090:	mov	r0, r9
   16094:	blx	r2
   16098:	cmp	r0, #0
   1609c:	beq	160dc <__assert_fail@plt+0x4d38>
   160a0:	ldr	r9, [r4]
   160a4:	add	r0, r6, r7, lsl #3
   160a8:	ldr	r0, [r0, #4]
   160ac:	cmp	r0, #0
   160b0:	beq	16124 <__assert_fail@plt+0x4d80>
   160b4:	ldm	r0, {r1, r2}
   160b8:	stm	r4, {r1, r2}
   160bc:	mov	r1, #0
   160c0:	str	r1, [r0]
   160c4:	ldr	r1, [r5, #36]	; 0x24
   160c8:	str	r1, [r0, #4]
   160cc:	str	r0, [r5, #36]	; 0x24
   160d0:	cmp	r9, #0
   160d4:	bne	1616c <__assert_fail@plt+0x4dc8>
   160d8:	b	16134 <__assert_fail@plt+0x4d90>
   160dc:	add	r7, r6, r7, lsl #3
   160e0:	ldr	r0, [r7, #4]!
   160e4:	cmp	r0, #0
   160e8:	beq	16134 <__assert_fail@plt+0x4d90>
   160ec:	ldr	r1, [r0]
   160f0:	cmp	r1, r9
   160f4:	beq	1613c <__assert_fail@plt+0x4d98>
   160f8:	ldr	r2, [r5, #28]
   160fc:	mov	r0, r9
   16100:	blx	r2
   16104:	ldr	r1, [r7]
   16108:	cmp	r0, #0
   1610c:	bne	16144 <__assert_fail@plt+0x4da0>
   16110:	ldr	r0, [r1, #4]!
   16114:	cmp	r0, #0
   16118:	mov	r7, r1
   1611c:	bne	160ec <__assert_fail@plt+0x4d48>
   16120:	b	16134 <__assert_fail@plt+0x4d90>
   16124:	mov	r0, #0
   16128:	str	r0, [r4]
   1612c:	cmp	r9, #0
   16130:	bne	1616c <__assert_fail@plt+0x4dc8>
   16134:	mov	r0, r8
   16138:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1613c:	mov	r1, r0
   16140:	b	16148 <__assert_fail@plt+0x4da4>
   16144:	ldr	r9, [r1]
   16148:	ldr	r0, [r1, #4]
   1614c:	str	r0, [r7]
   16150:	mov	r0, #0
   16154:	str	r0, [r1]
   16158:	ldr	r0, [r5, #36]	; 0x24
   1615c:	str	r0, [r1, #4]
   16160:	str	r1, [r5, #36]	; 0x24
   16164:	cmp	r9, #0
   16168:	beq	16134 <__assert_fail@plt+0x4d90>
   1616c:	ldr	r0, [r5, #16]
   16170:	sub	r0, r0, #1
   16174:	str	r0, [r5, #16]
   16178:	ldr	r0, [r4]
   1617c:	cmp	r0, #0
   16180:	bne	16288 <__assert_fail@plt+0x4ee4>
   16184:	ldr	r0, [r5, #12]
   16188:	vldr	s0, [r5, #8]
   1618c:	sub	r1, r0, #1
   16190:	str	r1, [r5, #12]
   16194:	vmov	s2, r1
   16198:	ldr	r0, [r5, #20]
   1619c:	vcvt.f32.u32	s0, s0
   161a0:	vcvt.f32.u32	s2, s2
   161a4:	vldr	s4, [r0]
   161a8:	vmul.f32	s6, s4, s0
   161ac:	vcmpe.f32	s6, s2
   161b0:	vmrs	APSR_nzcv, fpscr
   161b4:	ble	16288 <__assert_fail@plt+0x4ee4>
   161b8:	movw	r1, #43488	; 0xa9e0
   161bc:	movt	r1, #1
   161c0:	cmp	r0, r1
   161c4:	beq	1621c <__assert_fail@plt+0x4e78>
   161c8:	vldr	s8, [pc, #252]	; 162cc <__assert_fail@plt+0x4f28>
   161cc:	vldr	s6, [r0, #8]
   161d0:	vcmpe.f32	s6, s8
   161d4:	vmrs	APSR_nzcv, fpscr
   161d8:	ble	16208 <__assert_fail@plt+0x4e64>
   161dc:	vldr	s10, [pc, #236]	; 162d0 <__assert_fail@plt+0x4f2c>
   161e0:	vcmpe.f32	s6, s10
   161e4:	vmrs	APSR_nzcv, fpscr
   161e8:	bpl	16208 <__assert_fail@plt+0x4e64>
   161ec:	vcmpe.f32	s4, #0.0
   161f0:	vmrs	APSR_nzcv, fpscr
   161f4:	vldrge	s10, [r0, #12]
   161f8:	vldrge	s12, [pc, #212]	; 162d4 <__assert_fail@plt+0x4f30>
   161fc:	vcmpege.f32	s10, s12
   16200:	vmrsge	APSR_nzcv, fpscr
   16204:	bgt	16294 <__assert_fail@plt+0x4ef0>
   16208:	vldr	s4, [pc, #200]	; 162d8 <__assert_fail@plt+0x4f34>
   1620c:	movw	r0, #43488	; 0xa9e0
   16210:	movt	r0, #1
   16214:	str	r0, [r5, #20]
   16218:	b	16220 <__assert_fail@plt+0x4e7c>
   1621c:	mov	r0, r1
   16220:	vmul.f32	s4, s4, s0
   16224:	vcmpe.f32	s4, s2
   16228:	vmrs	APSR_nzcv, fpscr
   1622c:	ble	16288 <__assert_fail@plt+0x4ee4>
   16230:	ldrb	r1, [r0, #16]
   16234:	vldr	s2, [r0, #4]
   16238:	cmp	r1, #0
   1623c:	vmul.f32	s0, s2, s0
   16240:	vldreq	s2, [r0, #8]
   16244:	mov	r0, r5
   16248:	vmuleq.f32	s0, s0, s2
   1624c:	vcvt.u32.f32	s0, s0
   16250:	vmov	r1, s0
   16254:	bl	158b0 <__assert_fail@plt+0x450c>
   16258:	cmp	r0, #0
   1625c:	bne	16288 <__assert_fail@plt+0x4ee4>
   16260:	ldr	r0, [r5, #36]	; 0x24
   16264:	cmp	r0, #0
   16268:	beq	16280 <__assert_fail@plt+0x4edc>
   1626c:	ldr	r4, [r0, #4]
   16270:	bl	19a44 <__assert_fail@plt+0x86a0>
   16274:	cmp	r4, #0
   16278:	mov	r0, r4
   1627c:	bne	1626c <__assert_fail@plt+0x4ec8>
   16280:	mov	r0, #0
   16284:	str	r0, [r5, #36]	; 0x24
   16288:	mov	r8, r9
   1628c:	mov	r0, r8
   16290:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16294:	vadd.f32	s8, s4, s8
   16298:	vcmpe.f32	s8, s6
   1629c:	vmrs	APSR_nzcv, fpscr
   162a0:	bpl	16208 <__assert_fail@plt+0x4e64>
   162a4:	vldr	s6, [r0, #4]
   162a8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   162ac:	vcmpe.f32	s6, s10
   162b0:	vmrs	APSR_nzcv, fpscr
   162b4:	bhi	16208 <__assert_fail@plt+0x4e64>
   162b8:	vcmpe.f32	s8, s6
   162bc:	vmrs	APSR_nzcv, fpscr
   162c0:	bmi	16220 <__assert_fail@plt+0x4e7c>
   162c4:	b	16208 <__assert_fail@plt+0x4e64>
   162c8:	bl	11374 <abort@plt>
   162cc:	stclcc	12, cr12, [ip, #820]	; 0x334
   162d0:	svccc	0x00666666
   162d4:	svccc	0x008ccccd
   162d8:	andeq	r0, r0, r0
   162dc:	b	1603c <__assert_fail@plt+0x4c98>
   162e0:	mov	r3, #1
   162e4:	mov	r2, #0
   162e8:	vdup.32	q8, r1
   162ec:	strb	r3, [r0, #28]
   162f0:	str	r2, [r0, #20]
   162f4:	str	r2, [r0, #24]
   162f8:	vst1.32	{d16-d17}, [r0]!
   162fc:	str	r1, [r0]
   16300:	bx	lr
   16304:	ldrb	r0, [r0, #28]
   16308:	bx	lr
   1630c:	push	{fp, lr}
   16310:	mov	fp, sp
   16314:	ldrb	r3, [r0, #28]
   16318:	ldr	r2, [r0, #20]
   1631c:	eor	lr, r3, #1
   16320:	add	r2, r2, lr
   16324:	and	r3, r2, #3
   16328:	ldr	ip, [r0, r3, lsl #2]
   1632c:	str	r1, [r0, r3, lsl #2]
   16330:	str	r3, [r0, #20]
   16334:	ldr	r1, [r0, #24]
   16338:	cmp	r3, r1
   1633c:	addeq	r1, r2, lr
   16340:	andeq	r1, r1, #3
   16344:	streq	r1, [r0, #24]
   16348:	mov	r1, #0
   1634c:	strb	r1, [r0, #28]
   16350:	mov	r0, ip
   16354:	pop	{fp, pc}
   16358:	ldrb	r1, [r0, #28]
   1635c:	cmp	r1, #0
   16360:	bne	163a4 <__assert_fail@plt+0x5000>
   16364:	ldr	r3, [r0, #20]
   16368:	ldr	r2, [r0, #16]
   1636c:	ldr	r1, [r0, r3, lsl #2]
   16370:	str	r2, [r0, r3, lsl #2]
   16374:	ldr	r2, [r0, #20]
   16378:	ldr	r3, [r0, #24]
   1637c:	cmp	r2, r3
   16380:	moveq	r2, #1
   16384:	strbeq	r2, [r0, #28]
   16388:	moveq	r0, r1
   1638c:	bxeq	lr
   16390:	sub	r2, r2, #1
   16394:	and	r2, r2, #3
   16398:	str	r2, [r0, #20]
   1639c:	mov	r0, r1
   163a0:	bx	lr
   163a4:	push	{fp, lr}
   163a8:	mov	fp, sp
   163ac:	bl	11374 <abort@plt>
   163b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163b4:	add	fp, sp, #28
   163b8:	sub	sp, sp, #4
   163bc:	ldrb	r1, [r0]
   163c0:	mov	r4, r0
   163c4:	and	r0, r1, #248	; 0xf8
   163c8:	cmp	r0, #48	; 0x30
   163cc:	bne	16418 <__assert_fail@plt+0x5074>
   163d0:	mov	r0, #0
   163d4:	mov	r5, #0
   163d8:	mov	r2, r4
   163dc:	lsl	r3, r5, #3
   163e0:	uxtab	r1, r3, r1
   163e4:	sub	r5, r1, #48	; 0x30
   163e8:	cmp	r0, r5, lsr #12
   163ec:	bne	16410 <__assert_fail@plt+0x506c>
   163f0:	ldrb	r1, [r2, #1]
   163f4:	add	r6, r2, #1
   163f8:	and	r2, r1, #248	; 0xf8
   163fc:	cmp	r2, #48	; 0x30
   16400:	mov	r2, r6
   16404:	beq	163dc <__assert_fail@plt+0x5038>
   16408:	cmp	r1, #0
   1640c:	beq	16488 <__assert_fail@plt+0x50e4>
   16410:	sub	sp, fp, #28
   16414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16418:	movw	sl, #5
   1641c:	mov	r2, #1
   16420:	mvn	r3, #42	; 0x2a
   16424:	mov	r7, #1
   16428:	mov	r0, #1
   1642c:	movt	sl, #4
   16430:	b	16440 <__assert_fail@plt+0x509c>
   16434:	ldrb	r1, [r4, r7]
   16438:	add	r0, r6, r0
   1643c:	add	r7, r7, #1
   16440:	uxtab	r6, r3, r1
   16444:	uxtb	r1, r1
   16448:	cmp	r6, #18
   1644c:	bhi	1645c <__assert_fail@plt+0x50b8>
   16450:	tst	sl, r2, lsl r6
   16454:	mov	r6, #1
   16458:	bne	16434 <__assert_fail@plt+0x5090>
   1645c:	cmp	r1, #0
   16460:	beq	1646c <__assert_fail@plt+0x50c8>
   16464:	mov	r6, #0
   16468:	b	16434 <__assert_fail@plt+0x5090>
   1646c:	mov	r1, #16
   16470:	bl	18f84 <__assert_fail@plt+0x7be0>
   16474:	mov	r9, #0
   16478:	mov	ip, #1
   1647c:	mvn	lr, #87	; 0x57
   16480:	mov	r8, #0
   16484:	b	164d4 <__assert_fail@plt+0x5130>
   16488:	mov	r0, #32
   1648c:	bl	18eb4 <__assert_fail@plt+0x7b10>
   16490:	movw	r1, #317	; 0x13d
   16494:	mov	r2, #0
   16498:	and	r3, r5, #3072	; 0xc00
   1649c:	movw	r7, #1023	; 0x3ff
   164a0:	strh	r1, [r0]
   164a4:	strb	r2, [r0, #17]
   164a8:	sub	r2, r6, r4
   164ac:	movw	r1, #4095	; 0xfff
   164b0:	cmp	r2, #5
   164b4:	str	r1, [r0, #4]
   164b8:	str	r5, [r0, #8]
   164bc:	orrlt	r1, r3, r7
   164c0:	str	r1, [r0, #12]
   164c4:	sub	sp, fp, #28
   164c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164cc:	add	r4, r4, #1
   164d0:	mov	r8, r3
   164d4:	mov	r2, #0
   164d8:	b	164e4 <__assert_fail@plt+0x5140>
   164dc:	orr	r2, r2, r1
   164e0:	add	r4, r4, #1
   164e4:	ldrb	r6, [r4]
   164e8:	sub	r3, r6, #97	; 0x61
   164ec:	cmp	r3, #20
   164f0:	bhi	1656c <__assert_fail@plt+0x51c8>
   164f4:	add	r5, pc, #4
   164f8:	mov	r1, #2496	; 0x9c0
   164fc:	ldr	pc, [r5, r3, lsl #2]
   16500:	andeq	r6, r1, r4, asr r5
   16504:	ldrdeq	r6, [r1], -r8
   16508:	ldrdeq	r6, [r1], -r8
   1650c:	ldrdeq	r6, [r1], -r8
   16510:	ldrdeq	r6, [r1], -r8
   16514:	ldrdeq	r6, [r1], -r8
   16518:	andeq	r6, r1, ip, asr r5
   1651c:	ldrdeq	r6, [r1], -r8
   16520:	ldrdeq	r6, [r1], -r8
   16524:	ldrdeq	r6, [r1], -r8
   16528:	ldrdeq	r6, [r1], -r8
   1652c:	ldrdeq	r6, [r1], -r8
   16530:	ldrdeq	r6, [r1], -r8
   16534:	ldrdeq	r6, [r1], -r8
   16538:	andeq	r6, r1, r4, ror #10
   1653c:	ldrdeq	r6, [r1], -r8
   16540:	ldrdeq	r6, [r1], -r8
   16544:	ldrdeq	r6, [r1], -r8
   16548:	ldrdeq	r6, [r1], -r8
   1654c:	ldrdeq	r6, [r1], -r8
   16550:	ldrdeq	r6, [r1], -ip
   16554:	movw	r1, #4095	; 0xfff
   16558:	b	164dc <__assert_fail@plt+0x5138>
   1655c:	movw	r1, #1080	; 0x438
   16560:	b	164dc <__assert_fail@plt+0x5138>
   16564:	movw	r1, #519	; 0x207
   16568:	b	164dc <__assert_fail@plt+0x5138>
   1656c:	sub	r1, r6, #43	; 0x2b
   16570:	cmp	r1, #18
   16574:	bhi	167d8 <__assert_fail@plt+0x5434>
   16578:	tst	sl, ip, lsl r1
   1657c:	beq	167d8 <__assert_fail@plt+0x5434>
   16580:	ldrb	r1, [r4, #1]
   16584:	sub	r3, r1, #48	; 0x30
   16588:	cmp	r3, #8
   1658c:	bcs	165e8 <__assert_fail@plt+0x5244>
   16590:	add	r3, r4, #2
   16594:	mov	r7, #0
   16598:	lsl	r4, r7, #3
   1659c:	uxtab	r1, r4, r1
   165a0:	sub	r7, r1, #48	; 0x30
   165a4:	cmp	r9, r7, lsr #12
   165a8:	bne	167d8 <__assert_fail@plt+0x5434>
   165ac:	ldrb	r1, [r3], #1
   165b0:	and	r4, r1, #248	; 0xf8
   165b4:	cmp	r4, #48	; 0x30
   165b8:	beq	16598 <__assert_fail@plt+0x51f4>
   165bc:	cmp	r2, #0
   165c0:	bne	167d8 <__assert_fail@plt+0x5434>
   165c4:	sub	r4, r3, #1
   165c8:	mov	r5, #1
   165cc:	movw	r2, #4095	; 0xfff
   165d0:	cmp	r1, #0
   165d4:	beq	16614 <__assert_fail@plt+0x5270>
   165d8:	cmp	r1, #44	; 0x2c
   165dc:	movw	r1, #4095	; 0xfff
   165e0:	beq	16724 <__assert_fail@plt+0x5380>
   165e4:	b	167d8 <__assert_fail@plt+0x5434>
   165e8:	add	r4, r4, #2
   165ec:	cmp	r1, #103	; 0x67
   165f0:	beq	1661c <__assert_fail@plt+0x5278>
   165f4:	cmp	r1, #111	; 0x6f
   165f8:	beq	1662c <__assert_fail@plt+0x5288>
   165fc:	cmp	r1, #117	; 0x75
   16600:	bne	1663c <__assert_fail@plt+0x5298>
   16604:	mov	r5, #3
   16608:	mov	r1, #0
   1660c:	mov	r7, #448	; 0x1c0
   16610:	b	16724 <__assert_fail@plt+0x5380>
   16614:	movw	r1, #4095	; 0xfff
   16618:	b	16724 <__assert_fail@plt+0x5380>
   1661c:	mov	r5, #3
   16620:	mov	r1, #0
   16624:	mov	r7, #56	; 0x38
   16628:	b	16724 <__assert_fail@plt+0x5380>
   1662c:	mov	r5, #3
   16630:	mov	r1, #0
   16634:	mov	r7, #7
   16638:	b	16724 <__assert_fail@plt+0x5380>
   1663c:	mov	r3, #1
   16640:	mov	r7, #0
   16644:	b	1664c <__assert_fail@plt+0x52a8>
   16648:	ldrb	r1, [r4], #1
   1664c:	uxtab	r1, lr, r1
   16650:	mov	r5, r3
   16654:	cmp	r1, #32
   16658:	bhi	16718 <__assert_fail@plt+0x5374>
   1665c:	add	ip, pc, #4
   16660:	mov	r3, #2
   16664:	ldr	pc, [ip, r1, lsl #2]
   16668:	andeq	r6, r1, r8, asr #12
   1666c:	andeq	r6, r1, r8, lsl r7
   16670:	andeq	r6, r1, r8, lsl r7
   16674:	andeq	r6, r1, r8, lsl r7
   16678:	andeq	r6, r1, r8, lsl r7
   1667c:	andeq	r6, r1, r8, lsl r7
   16680:	andeq	r6, r1, r8, lsl r7
   16684:	andeq	r6, r1, r8, lsl r7
   16688:	andeq	r6, r1, r8, lsl r7
   1668c:	andeq	r6, r1, r8, lsl r7
   16690:	andeq	r6, r1, r8, lsl r7
   16694:	andeq	r6, r1, r8, lsl r7
   16698:	andeq	r6, r1, r8, lsl r7
   1669c:	andeq	r6, r1, r8, lsl r7
   166a0:	andeq	r6, r1, r8, lsl r7
   166a4:	andeq	r6, r1, r8, lsl r7
   166a8:	andeq	r6, r1, r8, lsl r7
   166ac:	andeq	r6, r1, r8, lsl r7
   166b0:	andeq	r6, r1, r8, lsl r7
   166b4:	andeq	r6, r1, r8, lsl r7
   166b8:	andeq	r6, r1, r8, lsl r7
   166bc:	andeq	r6, r1, r8, lsl r7
   166c0:	andeq	r6, r1, r8, lsl r7
   166c4:	andeq	r6, r1, r8, lsl r7
   166c8:	andeq	r6, r1, r8, lsl r7
   166cc:	andeq	r6, r1, r8, lsl r7
   166d0:	andeq	r6, r1, ip, ror #13
   166d4:	strdeq	r6, [r1], -r4
   166d8:	strdeq	r6, [r1], -ip
   166dc:	andeq	r6, r1, r8, lsl r7
   166e0:	andeq	r6, r1, r8, lsl r7
   166e4:	andeq	r6, r1, r4, lsl #14
   166e8:	andeq	r6, r1, ip, lsl #14
   166ec:	orr	r7, r7, #292	; 0x124
   166f0:	b	16710 <__assert_fail@plt+0x536c>
   166f4:	orr	r7, r7, #3072	; 0xc00
   166f8:	b	16710 <__assert_fail@plt+0x536c>
   166fc:	orr	r7, r7, #512	; 0x200
   16700:	b	16710 <__assert_fail@plt+0x536c>
   16704:	orr	r7, r7, #146	; 0x92
   16708:	b	16710 <__assert_fail@plt+0x536c>
   1670c:	orr	r7, r7, #73	; 0x49
   16710:	mov	r3, r5
   16714:	b	16648 <__assert_fail@plt+0x52a4>
   16718:	sub	r4, r4, #1
   1671c:	mov	r1, #0
   16720:	mov	ip, #1
   16724:	mov	r3, r0
   16728:	cmp	r1, #0
   1672c:	strb	r6, [r3, r8, lsl #4]!
   16730:	strb	r5, [r3, #1]
   16734:	stmib	r3, {r2, r7}
   16738:	bne	16748 <__assert_fail@plt+0x53a4>
   1673c:	cmp	r2, #0
   16740:	andne	r7, r7, r2
   16744:	mov	r1, r7
   16748:	add	r7, r0, r8, lsl #4
   1674c:	add	r3, r8, #1
   16750:	str	r1, [r7, #12]
   16754:	ldrb	r6, [r4]
   16758:	sub	r1, r6, #43	; 0x2b
   1675c:	cmp	r1, #18
   16760:	bhi	167bc <__assert_fail@plt+0x5418>
   16764:	add	r7, pc, #4
   16768:	mov	r8, r3
   1676c:	ldr	pc, [r7, r1, lsl #2]
   16770:	andeq	r6, r1, r0, lsl #11
   16774:	andeq	r6, r1, ip, asr #9
   16778:	andeq	r6, r1, r0, lsl #11
   1677c:	ldrdeq	r6, [r1], -r8
   16780:	ldrdeq	r6, [r1], -r8
   16784:	ldrdeq	r6, [r1], -r8
   16788:	ldrdeq	r6, [r1], -r8
   1678c:	ldrdeq	r6, [r1], -r8
   16790:	ldrdeq	r6, [r1], -r8
   16794:	ldrdeq	r6, [r1], -r8
   16798:	ldrdeq	r6, [r1], -r8
   1679c:	ldrdeq	r6, [r1], -r8
   167a0:	ldrdeq	r6, [r1], -r8
   167a4:	ldrdeq	r6, [r1], -r8
   167a8:	ldrdeq	r6, [r1], -r8
   167ac:	ldrdeq	r6, [r1], -r8
   167b0:	ldrdeq	r6, [r1], -r8
   167b4:	ldrdeq	r6, [r1], -r8
   167b8:	andeq	r6, r1, r0, lsl #11
   167bc:	cmp	r6, #0
   167c0:	bne	167d8 <__assert_fail@plt+0x5434>
   167c4:	add	r1, r0, r3, lsl #4
   167c8:	mov	r2, #0
   167cc:	strb	r2, [r1, #1]
   167d0:	sub	sp, fp, #28
   167d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167d8:	bl	19a44 <__assert_fail@plt+0x86a0>
   167dc:	mov	r0, #0
   167e0:	sub	sp, fp, #28
   167e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167e8:	push	{r4, sl, fp, lr}
   167ec:	add	fp, sp, #8
   167f0:	sub	sp, sp, #104	; 0x68
   167f4:	mov	r1, r0
   167f8:	mov	r2, sp
   167fc:	mov	r0, #3
   16800:	bl	1135c <__xstat64@plt>
   16804:	mov	r1, r0
   16808:	mov	r0, #0
   1680c:	cmp	r1, #0
   16810:	beq	1681c <__assert_fail@plt+0x5478>
   16814:	sub	sp, fp, #8
   16818:	pop	{r4, sl, fp, pc}
   1681c:	ldr	r4, [sp, #16]
   16820:	mov	r0, #32
   16824:	bl	18eb4 <__assert_fail@plt+0x7b10>
   16828:	movw	r1, #317	; 0x13d
   1682c:	strh	r1, [r0]
   16830:	movw	r1, #4095	; 0xfff
   16834:	stmib	r0, {r1, r4}
   16838:	str	r1, [r0, #12]
   1683c:	mov	r1, #0
   16840:	strb	r1, [r0, #17]
   16844:	sub	sp, fp, #8
   16848:	pop	{r4, sl, fp, pc}
   1684c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16850:	add	fp, sp, #24
   16854:	ldrb	r4, [r3, #1]
   16858:	ldr	ip, [fp, #8]
   1685c:	bfc	r0, #12, #20
   16860:	cmp	r4, #0
   16864:	beq	16944 <__assert_fail@plt+0x55a0>
   16868:	cmp	r1, #0
   1686c:	mov	lr, r1
   16870:	add	r3, r3, #8
   16874:	mov	r9, #0
   16878:	movw	r8, #4095	; 0xfff
   1687c:	movwne	lr, #3072	; 0xc00
   16880:	mov	r5, r3
   16884:	ldr	r7, [r3, #-4]
   16888:	ldr	r3, [r3]
   1688c:	uxtb	r4, r4
   16890:	ldr	r6, [r5, #4]
   16894:	cmp	r4, #2
   16898:	bic	r6, lr, r6
   1689c:	beq	168c8 <__assert_fail@plt+0x5524>
   168a0:	cmp	r4, #3
   168a4:	bne	168d4 <__assert_fail@plt+0x5530>
   168a8:	and	r4, r3, r0
   168ac:	tst	r4, #146	; 0x92
   168b0:	mov	r3, r4
   168b4:	orrne	r3, r3, #146	; 0x92
   168b8:	tst	r4, #292	; 0x124
   168bc:	orrne	r3, r3, #292	; 0x124
   168c0:	tst	r4, #73	; 0x49
   168c4:	b	168d0 <__assert_fail@plt+0x552c>
   168c8:	and	r4, r0, #73	; 0x49
   168cc:	orrs	r4, r4, r1
   168d0:	orrne	r3, r3, #73	; 0x49
   168d4:	cmp	r7, #0
   168d8:	mov	r4, r7
   168dc:	mvneq	r4, r2
   168e0:	bic	r4, r4, r6
   168e4:	and	r3, r4, r3
   168e8:	ldrb	r4, [r5, #-8]
   168ec:	cmp	r4, #43	; 0x2b
   168f0:	beq	16920 <__assert_fail@plt+0x557c>
   168f4:	cmp	r4, #45	; 0x2d
   168f8:	beq	16928 <__assert_fail@plt+0x5584>
   168fc:	cmp	r4, #61	; 0x3d
   16900:	bne	16930 <__assert_fail@plt+0x558c>
   16904:	mvn	r4, r7
   16908:	cmp	r7, #0
   1690c:	orrne	r6, r6, r4
   16910:	and	r0, r6, r0
   16914:	orr	r0, r3, r0
   16918:	bic	r3, r8, r6
   1691c:	b	1692c <__assert_fail@plt+0x5588>
   16920:	orr	r0, r3, r0
   16924:	b	1692c <__assert_fail@plt+0x5588>
   16928:	bic	r0, r0, r3
   1692c:	orr	r9, r3, r9
   16930:	ldrb	r4, [r5, #9]
   16934:	add	r3, r5, #16
   16938:	cmp	r4, #0
   1693c:	bne	16880 <__assert_fail@plt+0x54dc>
   16940:	b	16948 <__assert_fail@plt+0x55a4>
   16944:	mov	r9, #0
   16948:	cmp	ip, #0
   1694c:	strne	r9, [ip]
   16950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16954:	sub	sp, sp, #4
   16958:	push	{fp, lr}
   1695c:	mov	fp, sp
   16960:	sub	sp, sp, #4
   16964:	str	r3, [fp, #8]
   16968:	mov	r3, #0
   1696c:	tst	r2, #64	; 0x40
   16970:	addne	r3, fp, #8
   16974:	addne	r3, r3, #4
   16978:	strne	r3, [sp]
   1697c:	ldrne	r3, [fp, #8]
   16980:	bl	11248 <openat64@plt>
   16984:	bl	187b8 <__assert_fail@plt+0x7414>
   16988:	mov	sp, fp
   1698c:	pop	{fp, lr}
   16990:	add	sp, sp, #4
   16994:	bx	lr
   16998:	push	{r4, r5, r6, sl, fp, lr}
   1699c:	add	fp, sp, #16
   169a0:	orr	r2, r2, #18688	; 0x4900
   169a4:	mov	r4, r3
   169a8:	orr	r2, r2, #524288	; 0x80000
   169ac:	bl	16954 <__assert_fail@plt+0x55b0>
   169b0:	mov	r5, r0
   169b4:	mov	r0, #0
   169b8:	cmp	r5, #0
   169bc:	poplt	{r4, r5, r6, sl, fp, pc}
   169c0:	mov	r0, r5
   169c4:	bl	11308 <fdopendir@plt>
   169c8:	cmp	r0, #0
   169cc:	strne	r5, [r4]
   169d0:	popne	{r4, r5, r6, sl, fp, pc}
   169d4:	bl	11260 <__errno_location@plt>
   169d8:	ldr	r6, [r0]
   169dc:	mov	r4, r0
   169e0:	mov	r0, r5
   169e4:	bl	11380 <close@plt>
   169e8:	mov	r0, #0
   169ec:	str	r6, [r4]
   169f0:	pop	{r4, r5, r6, sl, fp, pc}
   169f4:	push	{r4, r5, fp, lr}
   169f8:	add	fp, sp, #8
   169fc:	cmp	r0, #0
   16a00:	beq	16a94 <__assert_fail@plt+0x56f0>
   16a04:	mov	r1, #47	; 0x2f
   16a08:	mov	r4, r0
   16a0c:	bl	112e4 <strrchr@plt>
   16a10:	cmp	r0, #0
   16a14:	mov	r5, r4
   16a18:	addne	r5, r0, #1
   16a1c:	sub	r0, r5, r4
   16a20:	cmp	r0, #7
   16a24:	blt	16a78 <__assert_fail@plt+0x56d4>
   16a28:	movw	r1, #43564	; 0xaa2c
   16a2c:	sub	r0, r5, #7
   16a30:	mov	r2, #7
   16a34:	movt	r1, #1
   16a38:	bl	11368 <strncmp@plt>
   16a3c:	cmp	r0, #0
   16a40:	bne	16a78 <__assert_fail@plt+0x56d4>
   16a44:	movw	r1, #43572	; 0xaa34
   16a48:	mov	r0, r5
   16a4c:	mov	r2, #3
   16a50:	movt	r1, #1
   16a54:	bl	11368 <strncmp@plt>
   16a58:	cmp	r0, #0
   16a5c:	beq	16a68 <__assert_fail@plt+0x56c4>
   16a60:	mov	r4, r5
   16a64:	b	16a78 <__assert_fail@plt+0x56d4>
   16a68:	movw	r0, #45416	; 0xb168
   16a6c:	add	r4, r5, #3
   16a70:	movt	r0, #2
   16a74:	str	r4, [r0]
   16a78:	movw	r0, #45420	; 0xb16c
   16a7c:	movt	r0, #2
   16a80:	str	r4, [r0]
   16a84:	movw	r0, #45492	; 0xb1b4
   16a88:	movt	r0, #2
   16a8c:	str	r4, [r0]
   16a90:	pop	{r4, r5, fp, pc}
   16a94:	movw	r0, #45432	; 0xb178
   16a98:	mov	r1, #55	; 0x37
   16a9c:	mov	r2, #1
   16aa0:	movt	r0, #2
   16aa4:	ldr	r3, [r0]
   16aa8:	movw	r0, #43508	; 0xa9f4
   16aac:	movt	r0, #1
   16ab0:	bl	11194 <fwrite@plt>
   16ab4:	bl	11374 <abort@plt>
   16ab8:	push	{r4, r5, r6, sl, fp, lr}
   16abc:	add	fp, sp, #16
   16ac0:	mov	r4, r0
   16ac4:	movw	r0, #45496	; 0xb1b8
   16ac8:	movt	r0, #2
   16acc:	cmp	r4, #0
   16ad0:	moveq	r4, r0
   16ad4:	bl	11260 <__errno_location@plt>
   16ad8:	ldr	r6, [r0]
   16adc:	mov	r5, r0
   16ae0:	mov	r0, r4
   16ae4:	mov	r1, #48	; 0x30
   16ae8:	bl	19314 <__assert_fail@plt+0x7f70>
   16aec:	str	r6, [r5]
   16af0:	pop	{r4, r5, r6, sl, fp, pc}
   16af4:	movw	r1, #45496	; 0xb1b8
   16af8:	cmp	r0, #0
   16afc:	movt	r1, #2
   16b00:	movne	r1, r0
   16b04:	ldr	r0, [r1]
   16b08:	bx	lr
   16b0c:	movw	r2, #45496	; 0xb1b8
   16b10:	cmp	r0, #0
   16b14:	movt	r2, #2
   16b18:	movne	r2, r0
   16b1c:	str	r1, [r2]
   16b20:	bx	lr
   16b24:	movw	r3, #45496	; 0xb1b8
   16b28:	cmp	r0, #0
   16b2c:	movt	r3, #2
   16b30:	movne	r3, r0
   16b34:	ubfx	r0, r1, #5, #3
   16b38:	and	r1, r1, #31
   16b3c:	add	r0, r3, r0, lsl #2
   16b40:	ldr	r3, [r0, #8]
   16b44:	eor	r2, r2, r3, lsr r1
   16b48:	and	r2, r2, #1
   16b4c:	eor	r2, r3, r2, lsl r1
   16b50:	str	r2, [r0, #8]
   16b54:	mov	r0, #1
   16b58:	and	r0, r0, r3, lsr r1
   16b5c:	bx	lr
   16b60:	movw	r2, #45496	; 0xb1b8
   16b64:	cmp	r0, #0
   16b68:	movt	r2, #2
   16b6c:	movne	r2, r0
   16b70:	ldr	r0, [r2, #4]
   16b74:	str	r1, [r2, #4]
   16b78:	bx	lr
   16b7c:	movw	r3, #45496	; 0xb1b8
   16b80:	cmp	r0, #0
   16b84:	movt	r3, #2
   16b88:	movne	r3, r0
   16b8c:	cmp	r1, #0
   16b90:	mov	r0, #10
   16b94:	cmpne	r2, #0
   16b98:	str	r0, [r3]
   16b9c:	bne	16bac <__assert_fail@plt+0x5808>
   16ba0:	push	{fp, lr}
   16ba4:	mov	fp, sp
   16ba8:	bl	11374 <abort@plt>
   16bac:	str	r1, [r3, #40]	; 0x28
   16bb0:	str	r2, [r3, #44]	; 0x2c
   16bb4:	bx	lr
   16bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bbc:	add	fp, sp, #28
   16bc0:	sub	sp, sp, #20
   16bc4:	mov	r7, r0
   16bc8:	ldr	r0, [fp, #8]
   16bcc:	movw	r5, #45496	; 0xb1b8
   16bd0:	mov	r8, r3
   16bd4:	mov	r9, r2
   16bd8:	mov	sl, r1
   16bdc:	movt	r5, #2
   16be0:	cmp	r0, #0
   16be4:	movne	r5, r0
   16be8:	bl	11260 <__errno_location@plt>
   16bec:	mov	r4, r0
   16bf0:	ldm	r5, {r0, r1}
   16bf4:	ldr	r2, [r5, #40]	; 0x28
   16bf8:	ldr	r3, [r5, #44]	; 0x2c
   16bfc:	add	r5, r5, #8
   16c00:	ldr	r6, [r4]
   16c04:	stm	sp, {r0, r1, r5}
   16c08:	str	r2, [sp, #12]
   16c0c:	str	r3, [sp, #16]
   16c10:	mov	r0, r7
   16c14:	mov	r1, sl
   16c18:	mov	r2, r9
   16c1c:	mov	r3, r8
   16c20:	bl	16c30 <__assert_fail@plt+0x588c>
   16c24:	str	r6, [r4]
   16c28:	sub	sp, fp, #28
   16c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c34:	add	fp, sp, #28
   16c38:	sub	sp, sp, #156	; 0x9c
   16c3c:	str	r0, [sp, #80]	; 0x50
   16c40:	ldr	r0, [fp, #12]
   16c44:	mov	r6, r1
   16c48:	mov	r9, r3
   16c4c:	str	r2, [fp, #-84]	; 0xffffffac
   16c50:	and	r1, r0, #4
   16c54:	str	r1, [sp, #32]
   16c58:	and	r1, r0, #1
   16c5c:	str	r1, [sp, #36]	; 0x24
   16c60:	ubfx	r4, r0, #1, #1
   16c64:	bl	111ac <__ctype_get_mb_cur_max@plt>
   16c68:	str	r0, [sp, #40]	; 0x28
   16c6c:	ldr	r0, [fp, #24]
   16c70:	ldr	r7, [fp, #8]
   16c74:	mov	r1, #0
   16c78:	mov	r5, #1
   16c7c:	str	r1, [fp, #-56]	; 0xffffffc8
   16c80:	mov	r1, #0
   16c84:	str	r1, [sp, #60]	; 0x3c
   16c88:	str	r0, [sp, #76]	; 0x4c
   16c8c:	ldr	r0, [fp, #20]
   16c90:	str	r0, [sp, #72]	; 0x48
   16c94:	mov	r0, #0
   16c98:	str	r0, [sp, #56]	; 0x38
   16c9c:	mov	r0, #0
   16ca0:	str	r0, [sp, #92]	; 0x5c
   16ca4:	mov	r0, #0
   16ca8:	str	r0, [fp, #-76]	; 0xffffffb4
   16cac:	mov	r0, #0
   16cb0:	cmp	r7, #10
   16cb4:	bhi	17c34 <__assert_fail@plt+0x6890>
   16cb8:	add	r1, pc, #28
   16cbc:	mov	sl, r6
   16cc0:	ldr	r6, [sp, #80]	; 0x50
   16cc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16cc8:	mov	r8, #0
   16ccc:	mov	r2, #1
   16cd0:	mov	r3, #0
   16cd4:	mov	lr, r9
   16cd8:	ldr	pc, [r1, r7, lsl #2]
   16cdc:	andeq	r6, r1, r0, asr #27
   16ce0:	andeq	r6, r1, ip, ror #27
   16ce4:			; <UNDEFINED> instruction: 0x00016db0
   16ce8:	andeq	r6, r1, r8, lsr #27
   16cec:	andeq	r6, r1, r0, ror #27
   16cf0:	andeq	r6, r1, r4, lsr lr
   16cf4:	ldrdeq	r6, [r1], -r0
   16cf8:	muleq	r1, r0, lr
   16cfc:	andeq	r6, r1, r8, lsl #26
   16d00:	andeq	r6, r1, r8, lsl #26
   16d04:	andeq	r6, r1, r0, lsr sp
   16d08:	movw	r0, #43654	; 0xaa86
   16d0c:	mov	r1, r7
   16d10:	movt	r0, #1
   16d14:	bl	18640 <__assert_fail@plt+0x729c>
   16d18:	str	r0, [sp, #72]	; 0x48
   16d1c:	movw	r0, #43656	; 0xaa88
   16d20:	mov	r1, r7
   16d24:	movt	r0, #1
   16d28:	bl	18640 <__assert_fail@plt+0x729c>
   16d2c:	str	r0, [sp, #76]	; 0x4c
   16d30:	str	r5, [fp, #-48]	; 0xffffffd0
   16d34:	mov	r8, #0
   16d38:	mov	r5, r7
   16d3c:	tst	r4, #1
   16d40:	bne	16d78 <__assert_fail@plt+0x59d4>
   16d44:	ldr	r0, [sp, #72]	; 0x48
   16d48:	ldrb	r0, [r0]
   16d4c:	cmp	r0, #0
   16d50:	beq	16d78 <__assert_fail@plt+0x59d4>
   16d54:	ldr	r1, [sp, #72]	; 0x48
   16d58:	mov	r8, #0
   16d5c:	add	r1, r1, #1
   16d60:	cmp	r8, sl
   16d64:	strbcc	r0, [r6, r8]
   16d68:	ldrb	r0, [r1, r8]
   16d6c:	add	r8, r8, #1
   16d70:	cmp	r0, #0
   16d74:	bne	16d60 <__assert_fail@plt+0x59bc>
   16d78:	ldr	r7, [sp, #76]	; 0x4c
   16d7c:	mov	r0, r7
   16d80:	bl	1123c <strlen@plt>
   16d84:	str	r7, [sp, #92]	; 0x5c
   16d88:	mov	r7, r5
   16d8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d90:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16d94:	str	r0, [fp, #-76]	; 0xffffffb4
   16d98:	mov	r2, #1
   16d9c:	mov	r3, r4
   16da0:	mov	lr, r9
   16da4:	b	16e90 <__assert_fail@plt+0x5aec>
   16da8:	mov	r0, #1
   16dac:	b	16dec <__assert_fail@plt+0x5a48>
   16db0:	tst	r4, #1
   16db4:	bne	16dec <__assert_fail@plt+0x5a48>
   16db8:	mov	r2, r0
   16dbc:	b	16e14 <__assert_fail@plt+0x5a70>
   16dc0:	mov	r7, #0
   16dc4:	mov	r8, #0
   16dc8:	mov	r2, r0
   16dcc:	b	16e8c <__assert_fail@plt+0x5ae8>
   16dd0:	mov	r0, #1
   16dd4:	mov	r8, #0
   16dd8:	mov	r7, #5
   16ddc:	b	16e48 <__assert_fail@plt+0x5aa4>
   16de0:	mov	r2, #1
   16de4:	tst	r4, #1
   16de8:	beq	16e14 <__assert_fail@plt+0x5a70>
   16dec:	mov	r1, #1
   16df0:	mov	r8, #0
   16df4:	mov	r7, #2
   16df8:	mov	r2, r0
   16dfc:	mov	r3, #1
   16e00:	str	r1, [fp, #-76]	; 0xffffffb4
   16e04:	movw	r1, #43656	; 0xaa88
   16e08:	movt	r1, #1
   16e0c:	str	r1, [sp, #92]	; 0x5c
   16e10:	b	16e90 <__assert_fail@plt+0x5aec>
   16e14:	cmp	sl, #0
   16e18:	mov	r8, #1
   16e1c:	mov	r7, #2
   16e20:	movne	r0, #39	; 0x27
   16e24:	strbne	r0, [r6]
   16e28:	movw	r0, #43656	; 0xaa88
   16e2c:	movt	r0, #1
   16e30:	b	16e80 <__assert_fail@plt+0x5adc>
   16e34:	mov	r7, #5
   16e38:	tst	r4, #1
   16e3c:	beq	16e64 <__assert_fail@plt+0x5ac0>
   16e40:	mov	r0, #1
   16e44:	mov	r8, #0
   16e48:	str	r0, [fp, #-76]	; 0xffffffb4
   16e4c:	movw	r0, #43652	; 0xaa84
   16e50:	mov	r2, #1
   16e54:	mov	r3, #1
   16e58:	movt	r0, #1
   16e5c:	str	r0, [sp, #92]	; 0x5c
   16e60:	b	16e90 <__assert_fail@plt+0x5aec>
   16e64:	cmp	sl, #0
   16e68:	mov	r8, #1
   16e6c:	mov	r2, #1
   16e70:	movne	r0, #34	; 0x22
   16e74:	strbne	r0, [r6]
   16e78:	movw	r0, #43652	; 0xaa84
   16e7c:	movt	r0, #1
   16e80:	str	r0, [sp, #92]	; 0x5c
   16e84:	mov	r0, #1
   16e88:	str	r0, [fp, #-76]	; 0xffffffb4
   16e8c:	mov	r3, #0
   16e90:	ldr	r0, [fp, #16]
   16e94:	str	r3, [fp, #-72]	; 0xffffffb8
   16e98:	str	r7, [fp, #-64]	; 0xffffffc0
   16e9c:	str	r2, [sp, #84]	; 0x54
   16ea0:	cmp	r0, #0
   16ea4:	movwne	r0, #1
   16ea8:	and	r0, r0, r3
   16eac:	str	r0, [fp, #-88]	; 0xffffffa8
   16eb0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16eb4:	cmp	r0, #0
   16eb8:	movwne	r0, #1
   16ebc:	subs	r4, r7, #2
   16ec0:	mov	r7, #0
   16ec4:	and	r1, r0, r3
   16ec8:	str	r4, [fp, #-80]	; 0xffffffb0
   16ecc:	and	r1, r2, r1
   16ed0:	str	r1, [sp, #48]	; 0x30
   16ed4:	clz	r1, r4
   16ed8:	lsr	r1, r1, #5
   16edc:	and	r1, r1, r3
   16ee0:	eor	r3, r3, #1
   16ee4:	str	r1, [sp, #64]	; 0x40
   16ee8:	mov	r1, r4
   16eec:	str	r3, [sp, #88]	; 0x58
   16ef0:	movwne	r1, #1
   16ef4:	orr	r3, r1, r3
   16ef8:	and	r1, r1, r2
   16efc:	and	r0, r0, r1
   16f00:	str	r3, [sp, #68]	; 0x44
   16f04:	str	r1, [fp, #-68]	; 0xffffffbc
   16f08:	str	r0, [fp, #-60]	; 0xffffffc4
   16f0c:	eor	r0, r2, #1
   16f10:	str	r0, [sp, #52]	; 0x34
   16f14:	cmn	lr, #1
   16f18:	beq	16f28 <__assert_fail@plt+0x5b84>
   16f1c:	cmp	r7, lr
   16f20:	bne	16f34 <__assert_fail@plt+0x5b90>
   16f24:	b	17a5c <__assert_fail@plt+0x66b8>
   16f28:	ldrb	r0, [ip, r7]
   16f2c:	cmp	r0, #0
   16f30:	beq	17a64 <__assert_fail@plt+0x66c0>
   16f34:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16f38:	mov	r9, #0
   16f3c:	str	r5, [fp, #-48]	; 0xffffffd0
   16f40:	cmp	r0, #0
   16f44:	beq	16f78 <__assert_fail@plt+0x5bd4>
   16f48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16f4c:	add	r4, r7, r0
   16f50:	cmp	r0, #2
   16f54:	bcc	16f70 <__assert_fail@plt+0x5bcc>
   16f58:	cmn	lr, #1
   16f5c:	bne	16f70 <__assert_fail@plt+0x5bcc>
   16f60:	mov	r0, ip
   16f64:	bl	1123c <strlen@plt>
   16f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f6c:	mov	lr, r0
   16f70:	cmp	r4, lr
   16f74:	bls	16f80 <__assert_fail@plt+0x5bdc>
   16f78:	mov	r0, #0
   16f7c:	b	16fc0 <__assert_fail@plt+0x5c1c>
   16f80:	ldr	r1, [sp, #92]	; 0x5c
   16f84:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16f88:	add	r0, ip, r7
   16f8c:	mov	r4, lr
   16f90:	bl	11140 <memcmp@plt>
   16f94:	ldr	r2, [sp, #88]	; 0x58
   16f98:	cmp	r0, #0
   16f9c:	mov	r1, r0
   16fa0:	movwne	r1, #1
   16fa4:	orr	r1, r1, r2
   16fa8:	tst	r1, #1
   16fac:	beq	17af4 <__assert_fail@plt+0x6750>
   16fb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fb4:	clz	r0, r0
   16fb8:	mov	lr, r4
   16fbc:	lsr	r0, r0, #5
   16fc0:	str	r0, [fp, #-52]	; 0xffffffcc
   16fc4:	ldrb	r5, [ip, r7]
   16fc8:	cmp	r5, #126	; 0x7e
   16fcc:	bhi	17384 <__assert_fail@plt+0x5fe0>
   16fd0:	add	r3, pc, #16
   16fd4:	mov	r4, #1
   16fd8:	mov	r2, #110	; 0x6e
   16fdc:	mov	r0, #97	; 0x61
   16fe0:	mov	r1, #0
   16fe4:	ldr	pc, [r3, r5, lsl #2]
   16fe8:	andeq	r7, r1, r0, lsl #5
   16fec:	andeq	r7, r1, r4, lsl #7
   16ff0:	andeq	r7, r1, r4, lsl #7
   16ff4:	andeq	r7, r1, r4, lsl #7
   16ff8:	andeq	r7, r1, r4, lsl #7
   16ffc:	andeq	r7, r1, r4, lsl #7
   17000:	andeq	r7, r1, r4, lsl #7
   17004:	andeq	r7, r1, r8, lsr r4
   17008:	andeq	r7, r1, r0, ror #4
   1700c:	andeq	r7, r1, r8, asr r2
   17010:	andeq	r7, r1, ip, ror #4
   17014:	andeq	r7, r1, ip, ror #5
   17018:	andeq	r7, r1, r0, asr r2
   1701c:	andeq	r7, r1, r8, ror #4
   17020:	andeq	r7, r1, r4, lsl #7
   17024:	andeq	r7, r1, r4, lsl #7
   17028:	andeq	r7, r1, r4, lsl #7
   1702c:	andeq	r7, r1, r4, lsl #7
   17030:	andeq	r7, r1, r4, lsl #7
   17034:	andeq	r7, r1, r4, lsl #7
   17038:	andeq	r7, r1, r4, lsl #7
   1703c:	andeq	r7, r1, r4, lsl #7
   17040:	andeq	r7, r1, r4, lsl #7
   17044:	andeq	r7, r1, r4, lsl #7
   17048:	andeq	r7, r1, r4, lsl #7
   1704c:	andeq	r7, r1, r4, lsl #7
   17050:	andeq	r7, r1, r4, lsl #7
   17054:	andeq	r7, r1, r4, lsl #7
   17058:	andeq	r7, r1, r4, lsl #7
   1705c:	andeq	r7, r1, r4, lsl #7
   17060:	andeq	r7, r1, r4, lsl #7
   17064:	andeq	r7, r1, r4, lsl #7
   17068:	strdeq	r7, [r1], -r0
   1706c:	strdeq	r7, [r1], -r4
   17070:	strdeq	r7, [r1], -r4
   17074:	strdeq	r7, [r1], -r8
   17078:	strdeq	r7, [r1], -r4
   1707c:	andeq	r7, r1, r4, ror #3
   17080:	strdeq	r7, [r1], -r4
   17084:	strdeq	r7, [r1], -r4
   17088:	strdeq	r7, [r1], -r4
   1708c:	strdeq	r7, [r1], -r4
   17090:	strdeq	r7, [r1], -r4
   17094:	andeq	r7, r1, r4, ror #3
   17098:	andeq	r7, r1, r4, ror #3
   1709c:	andeq	r7, r1, r4, ror #3
   170a0:	andeq	r7, r1, r4, ror #3
   170a4:	andeq	r7, r1, r4, ror #3
   170a8:	andeq	r7, r1, r4, ror #3
   170ac:	andeq	r7, r1, r4, ror #3
   170b0:	andeq	r7, r1, r4, ror #3
   170b4:	andeq	r7, r1, r4, ror #3
   170b8:	andeq	r7, r1, r4, ror #3
   170bc:	andeq	r7, r1, r4, ror #3
   170c0:	andeq	r7, r1, r4, ror #3
   170c4:	andeq	r7, r1, r4, ror #3
   170c8:	andeq	r7, r1, r4, ror #3
   170cc:	andeq	r7, r1, r4, ror #3
   170d0:	andeq	r7, r1, r4, ror #3
   170d4:	strdeq	r7, [r1], -r4
   170d8:	strdeq	r7, [r1], -r4
   170dc:	strdeq	r7, [r1], -r4
   170e0:	strdeq	r7, [r1], -r4
   170e4:	andeq	r7, r1, r0, asr #5
   170e8:	andeq	r7, r1, r4, lsl #7
   170ec:	andeq	r7, r1, r4, ror #3
   170f0:	andeq	r7, r1, r4, ror #3
   170f4:	andeq	r7, r1, r4, ror #3
   170f8:	andeq	r7, r1, r4, ror #3
   170fc:	andeq	r7, r1, r4, ror #3
   17100:	andeq	r7, r1, r4, ror #3
   17104:	andeq	r7, r1, r4, ror #3
   17108:	andeq	r7, r1, r4, ror #3
   1710c:	andeq	r7, r1, r4, ror #3
   17110:	andeq	r7, r1, r4, ror #3
   17114:	andeq	r7, r1, r4, ror #3
   17118:	andeq	r7, r1, r4, ror #3
   1711c:	andeq	r7, r1, r4, ror #3
   17120:	andeq	r7, r1, r4, ror #3
   17124:	andeq	r7, r1, r4, ror #3
   17128:	andeq	r7, r1, r4, ror #3
   1712c:	andeq	r7, r1, r4, ror #3
   17130:	andeq	r7, r1, r4, ror #3
   17134:	andeq	r7, r1, r4, ror #3
   17138:	andeq	r7, r1, r4, ror #3
   1713c:	andeq	r7, r1, r4, ror #3
   17140:	andeq	r7, r1, r4, ror #3
   17144:	andeq	r7, r1, r4, ror #3
   17148:	andeq	r7, r1, r4, ror #3
   1714c:	andeq	r7, r1, r4, ror #3
   17150:	andeq	r7, r1, r4, ror #3
   17154:	strdeq	r7, [r1], -r4
   17158:	andeq	r7, r1, ip, lsr #4
   1715c:	andeq	r7, r1, r4, ror #3
   17160:	strdeq	r7, [r1], -r4
   17164:	andeq	r7, r1, r4, ror #3
   17168:	strdeq	r7, [r1], -r4
   1716c:	andeq	r7, r1, r4, ror #3
   17170:	andeq	r7, r1, r4, ror #3
   17174:	andeq	r7, r1, r4, ror #3
   17178:	andeq	r7, r1, r4, ror #3
   1717c:	andeq	r7, r1, r4, ror #3
   17180:	andeq	r7, r1, r4, ror #3
   17184:	andeq	r7, r1, r4, ror #3
   17188:	andeq	r7, r1, r4, ror #3
   1718c:	andeq	r7, r1, r4, ror #3
   17190:	andeq	r7, r1, r4, ror #3
   17194:	andeq	r7, r1, r4, ror #3
   17198:	andeq	r7, r1, r4, ror #3
   1719c:	andeq	r7, r1, r4, ror #3
   171a0:	andeq	r7, r1, r4, ror #3
   171a4:	andeq	r7, r1, r4, ror #3
   171a8:	andeq	r7, r1, r4, ror #3
   171ac:	andeq	r7, r1, r4, ror #3
   171b0:	andeq	r7, r1, r4, ror #3
   171b4:	andeq	r7, r1, r4, ror #3
   171b8:	andeq	r7, r1, r4, ror #3
   171bc:	andeq	r7, r1, r4, ror #3
   171c0:	andeq	r7, r1, r4, ror #3
   171c4:	andeq	r7, r1, r4, ror #3
   171c8:	andeq	r7, r1, r4, ror #3
   171cc:	andeq	r7, r1, r4, ror #3
   171d0:	andeq	r7, r1, r4, ror #3
   171d4:	andeq	r7, r1, ip, lsl #4
   171d8:	strdeq	r7, [r1], -r4
   171dc:	andeq	r7, r1, ip, lsl #4
   171e0:	strdeq	r7, [r1], -r8
   171e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   171e8:	cmp	r0, #0
   171ec:	beq	1744c <__assert_fail@plt+0x60a8>
   171f0:	ldr	r0, [fp, #16]
   171f4:	b	17450 <__assert_fail@plt+0x60ac>
   171f8:	mov	r4, #0
   171fc:	cmp	r7, #0
   17200:	beq	173f0 <__assert_fail@plt+0x604c>
   17204:	mov	r9, #0
   17208:	b	171e4 <__assert_fail@plt+0x5e40>
   1720c:	mov	r4, #0
   17210:	cmn	lr, #1
   17214:	beq	173d4 <__assert_fail@plt+0x6030>
   17218:	cmp	r7, #0
   1721c:	bne	17204 <__assert_fail@plt+0x5e60>
   17220:	cmp	lr, #1
   17224:	beq	173f0 <__assert_fail@plt+0x604c>
   17228:	b	17204 <__assert_fail@plt+0x5e60>
   1722c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17230:	cmp	r0, #2
   17234:	bne	17414 <__assert_fail@plt+0x6070>
   17238:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1723c:	tst	r0, #1
   17240:	bne	17b10 <__assert_fail@plt+0x676c>
   17244:	mov	r9, #0
   17248:	mov	r0, #92	; 0x5c
   1724c:	b	17428 <__assert_fail@plt+0x6084>
   17250:	mov	r0, #102	; 0x66
   17254:	b	17438 <__assert_fail@plt+0x6094>
   17258:	mov	r2, #116	; 0x74
   1725c:	b	1726c <__assert_fail@plt+0x5ec8>
   17260:	mov	r0, #98	; 0x62
   17264:	b	17438 <__assert_fail@plt+0x6094>
   17268:	mov	r2, #114	; 0x72
   1726c:	ldr	r0, [sp, #68]	; 0x44
   17270:	tst	r0, #1
   17274:	mov	r0, r2
   17278:	bne	17438 <__assert_fail@plt+0x6094>
   1727c:	b	17b10 <__assert_fail@plt+0x676c>
   17280:	ldr	r0, [sp, #84]	; 0x54
   17284:	tst	r0, #1
   17288:	beq	17528 <__assert_fail@plt+0x6184>
   1728c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17290:	tst	r0, #1
   17294:	bne	17c20 <__assert_fail@plt+0x687c>
   17298:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1729c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   172a0:	cmp	r0, #2
   172a4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   172a8:	movwne	r0, #1
   172ac:	orr	r0, r0, r2
   172b0:	tst	r0, #1
   172b4:	beq	178f8 <__assert_fail@plt+0x6554>
   172b8:	mov	r0, r8
   172bc:	b	1792c <__assert_fail@plt+0x6588>
   172c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   172c4:	mov	r9, #0
   172c8:	mov	r5, #63	; 0x3f
   172cc:	cmp	r0, #5
   172d0:	beq	176dc <__assert_fail@plt+0x6338>
   172d4:	cmp	r0, #2
   172d8:	bne	17780 <__assert_fail@plt+0x63dc>
   172dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   172e0:	tst	r0, #1
   172e4:	beq	17784 <__assert_fail@plt+0x63e0>
   172e8:	b	17b10 <__assert_fail@plt+0x676c>
   172ec:	mov	r0, #118	; 0x76
   172f0:	b	17438 <__assert_fail@plt+0x6094>
   172f4:	mov	r0, #1
   172f8:	mov	r5, #39	; 0x27
   172fc:	str	r0, [sp, #60]	; 0x3c
   17300:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17304:	cmp	r0, #2
   17308:	bne	1737c <__assert_fail@plt+0x5fd8>
   1730c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17310:	tst	r0, #1
   17314:	bne	17b10 <__assert_fail@plt+0x676c>
   17318:	ldr	r2, [sp, #56]	; 0x38
   1731c:	clz	r1, sl
   17320:	mov	r9, #0
   17324:	lsr	r1, r1, #5
   17328:	cmp	r2, #0
   1732c:	mov	r0, r2
   17330:	movwne	r0, #1
   17334:	orrs	r0, r0, r1
   17338:	moveq	r2, sl
   1733c:	moveq	sl, r0
   17340:	cmp	r8, sl
   17344:	str	r2, [sp, #56]	; 0x38
   17348:	movcc	r0, #39	; 0x27
   1734c:	strbcc	r0, [r6, r8]
   17350:	add	r0, r8, #1
   17354:	cmp	r0, sl
   17358:	movcc	r1, #92	; 0x5c
   1735c:	strbcc	r1, [r6, r0]
   17360:	add	r0, r8, #2
   17364:	add	r8, r8, #3
   17368:	cmp	r0, sl
   1736c:	movcc	r1, #39	; 0x27
   17370:	strbcc	r1, [r6, r0]
   17374:	mov	r0, #0
   17378:	str	r0, [fp, #-56]	; 0xffffffc8
   1737c:	mov	r4, #1
   17380:	b	171e4 <__assert_fail@plt+0x5e40>
   17384:	ldr	r0, [sp, #40]	; 0x28
   17388:	cmp	r0, #1
   1738c:	bne	17554 <__assert_fail@plt+0x61b0>
   17390:	str	lr, [sp, #28]
   17394:	bl	11224 <__ctype_b_loc@plt>
   17398:	ldr	r0, [r0]
   1739c:	ldr	ip, [fp, #-84]	; 0xffffffac
   173a0:	mov	r1, #1
   173a4:	add	r0, r0, r5, lsl #1
   173a8:	ldrb	r0, [r0, #1]
   173ac:	ubfx	r4, r0, #6, #1
   173b0:	ldr	r0, [sp, #52]	; 0x34
   173b4:	mov	r2, r1
   173b8:	cmp	r1, #1
   173bc:	orr	r0, r4, r0
   173c0:	bhi	1778c <__assert_fail@plt+0x63e8>
   173c4:	tst	r0, #1
   173c8:	beq	1778c <__assert_fail@plt+0x63e8>
   173cc:	ldr	lr, [sp, #28]
   173d0:	b	171e4 <__assert_fail@plt+0x5e40>
   173d4:	cmp	r7, #0
   173d8:	ldrbeq	r0, [ip, #1]
   173dc:	cmpeq	r0, #0
   173e0:	beq	173f0 <__assert_fail@plt+0x604c>
   173e4:	mvn	lr, #0
   173e8:	mov	r9, #0
   173ec:	b	171e4 <__assert_fail@plt+0x5e40>
   173f0:	mov	r1, #1
   173f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   173f8:	cmp	r0, #2
   173fc:	bne	1740c <__assert_fail@plt+0x6068>
   17400:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17404:	tst	r0, #1
   17408:	bne	17b10 <__assert_fail@plt+0x676c>
   1740c:	mov	r4, r1
   17410:	b	171e4 <__assert_fail@plt+0x5e40>
   17414:	ldr	r1, [sp, #48]	; 0x30
   17418:	mov	r9, #0
   1741c:	mov	r0, #92	; 0x5c
   17420:	cmp	r1, #0
   17424:	beq	17438 <__assert_fail@plt+0x6094>
   17428:	mov	r4, #0
   1742c:	cmp	r9, #0
   17430:	beq	179c4 <__assert_fail@plt+0x6620>
   17434:	b	17a00 <__assert_fail@plt+0x665c>
   17438:	ldr	r1, [sp, #84]	; 0x54
   1743c:	mov	r4, #0
   17440:	mov	r9, #0
   17444:	tst	r1, #1
   17448:	bne	17488 <__assert_fail@plt+0x60e4>
   1744c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17450:	cmp	r0, #0
   17454:	mov	r0, r5
   17458:	beq	1747c <__assert_fail@plt+0x60d8>
   1745c:	ldr	r1, [fp, #16]
   17460:	ubfx	r0, r5, #5, #3
   17464:	mov	r2, #1
   17468:	ldr	r0, [r1, r0, lsl #2]
   1746c:	and	r1, r5, #31
   17470:	tst	r0, r2, lsl r1
   17474:	mov	r0, r5
   17478:	bne	17488 <__assert_fail@plt+0x60e4>
   1747c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17480:	cmp	r1, #0
   17484:	beq	179bc <__assert_fail@plt+0x6618>
   17488:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1748c:	tst	r1, #1
   17490:	bne	17ae8 <__assert_fail@plt+0x6744>
   17494:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17498:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1749c:	cmp	r1, #2
   174a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   174a4:	movwne	r1, #1
   174a8:	orr	r1, r1, r2
   174ac:	tst	r1, #1
   174b0:	beq	174bc <__assert_fail@plt+0x6118>
   174b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   174b8:	b	174f8 <__assert_fail@plt+0x6154>
   174bc:	cmp	r8, sl
   174c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   174c4:	movcc	r1, #39	; 0x27
   174c8:	strbcc	r1, [r6, r8]
   174cc:	add	r1, r8, #1
   174d0:	cmp	r1, sl
   174d4:	movcc	r2, #36	; 0x24
   174d8:	strbcc	r2, [r6, r1]
   174dc:	add	r1, r8, #2
   174e0:	add	r8, r8, #3
   174e4:	cmp	r1, sl
   174e8:	movcc	r2, #39	; 0x27
   174ec:	strbcc	r2, [r6, r1]
   174f0:	mov	r1, #1
   174f4:	str	r1, [fp, #-56]	; 0xffffffc8
   174f8:	cmp	r8, sl
   174fc:	movcc	r1, #92	; 0x5c
   17500:	strbcc	r1, [r6, r8]
   17504:	add	r8, r8, #1
   17508:	cmp	r8, sl
   1750c:	and	r5, r5, r4
   17510:	add	r7, r7, #1
   17514:	strbcc	r0, [r6, r8]
   17518:	add	r8, r8, #1
   1751c:	cmn	lr, #1
   17520:	bne	16f1c <__assert_fail@plt+0x5b78>
   17524:	b	16f28 <__assert_fail@plt+0x5b84>
   17528:	ldr	r0, [sp, #36]	; 0x24
   1752c:	mov	r4, #0
   17530:	mov	r9, #0
   17534:	mov	r5, #0
   17538:	cmp	r0, #0
   1753c:	beq	1744c <__assert_fail@plt+0x60a8>
   17540:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17544:	add	r7, r7, #1
   17548:	cmn	lr, #1
   1754c:	bne	16f1c <__assert_fail@plt+0x5b78>
   17550:	b	16f28 <__assert_fail@plt+0x5b84>
   17554:	mov	r0, #0
   17558:	cmn	lr, #1
   1755c:	str	r0, [fp, #-36]	; 0xffffffdc
   17560:	str	r0, [fp, #-40]	; 0xffffffd8
   17564:	bne	17578 <__assert_fail@plt+0x61d4>
   17568:	mov	r0, ip
   1756c:	bl	1123c <strlen@plt>
   17570:	ldr	ip, [fp, #-84]	; 0xffffffac
   17574:	mov	lr, r0
   17578:	add	r0, ip, r7
   1757c:	mov	r4, #1
   17580:	mov	r6, #0
   17584:	str	lr, [sp, #28]
   17588:	str	r0, [sp, #24]
   1758c:	sub	r0, fp, #40	; 0x28
   17590:	mov	r3, r0
   17594:	str	r6, [sp, #44]	; 0x2c
   17598:	add	r6, r6, r7
   1759c:	sub	r0, fp, #44	; 0x2c
   175a0:	add	r1, ip, r6
   175a4:	sub	r2, lr, r6
   175a8:	bl	19b48 <__assert_fail@plt+0x87a4>
   175ac:	cmp	r0, #0
   175b0:	beq	17a48 <__assert_fail@plt+0x66a4>
   175b4:	cmn	r0, #1
   175b8:	beq	17a08 <__assert_fail@plt+0x6664>
   175bc:	ldr	lr, [sp, #28]
   175c0:	cmn	r0, #2
   175c4:	beq	17a10 <__assert_fail@plt+0x666c>
   175c8:	ldr	r2, [sp, #64]	; 0x40
   175cc:	cmp	r0, #2
   175d0:	mov	r1, #0
   175d4:	movwcc	r1, #1
   175d8:	eor	r2, r2, #1
   175dc:	orrs	r1, r2, r1
   175e0:	bne	176a0 <__assert_fail@plt+0x62fc>
   175e4:	ldr	r1, [sp, #44]	; 0x2c
   175e8:	ldr	r2, [sp, #24]
   175ec:	add	r1, r2, r1
   175f0:	mov	r2, #1
   175f4:	ldrb	r3, [r1, r2]
   175f8:	sub	r3, r3, #91	; 0x5b
   175fc:	cmp	r3, #33	; 0x21
   17600:	bhi	17694 <__assert_fail@plt+0x62f0>
   17604:	add	r6, pc, #0
   17608:	ldr	pc, [r6, r3, lsl #2]
   1760c:	andeq	r7, r1, r8, lsl #22
   17610:	andeq	r7, r1, r8, lsl #22
   17614:	muleq	r1, r4, r6
   17618:	andeq	r7, r1, r8, lsl #22
   1761c:	muleq	r1, r4, r6
   17620:	andeq	r7, r1, r8, lsl #22
   17624:	muleq	r1, r4, r6
   17628:	muleq	r1, r4, r6
   1762c:	muleq	r1, r4, r6
   17630:	muleq	r1, r4, r6
   17634:	muleq	r1, r4, r6
   17638:	muleq	r1, r4, r6
   1763c:	muleq	r1, r4, r6
   17640:	muleq	r1, r4, r6
   17644:	muleq	r1, r4, r6
   17648:	muleq	r1, r4, r6
   1764c:	muleq	r1, r4, r6
   17650:	muleq	r1, r4, r6
   17654:	muleq	r1, r4, r6
   17658:	muleq	r1, r4, r6
   1765c:	muleq	r1, r4, r6
   17660:	muleq	r1, r4, r6
   17664:	muleq	r1, r4, r6
   17668:	muleq	r1, r4, r6
   1766c:	muleq	r1, r4, r6
   17670:	muleq	r1, r4, r6
   17674:	muleq	r1, r4, r6
   17678:	muleq	r1, r4, r6
   1767c:	muleq	r1, r4, r6
   17680:	muleq	r1, r4, r6
   17684:	muleq	r1, r4, r6
   17688:	muleq	r1, r4, r6
   1768c:	muleq	r1, r4, r6
   17690:	andeq	r7, r1, r8, lsl #22
   17694:	add	r2, r2, #1
   17698:	cmp	r2, r0
   1769c:	bcc	175f4 <__assert_fail@plt+0x6250>
   176a0:	ldr	r6, [sp, #44]	; 0x2c
   176a4:	add	r6, r0, r6
   176a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   176ac:	bl	1117c <iswprint@plt>
   176b0:	cmp	r0, #0
   176b4:	movwne	r0, #1
   176b8:	and	r4, r4, r0
   176bc:	sub	r0, fp, #40	; 0x28
   176c0:	bl	11134 <mbsinit@plt>
   176c4:	ldr	lr, [sp, #28]
   176c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   176cc:	sub	r3, fp, #40	; 0x28
   176d0:	cmp	r0, #0
   176d4:	beq	17594 <__assert_fail@plt+0x61f0>
   176d8:	b	17a50 <__assert_fail@plt+0x66ac>
   176dc:	ldr	r0, [sp, #32]
   176e0:	cmp	r0, #0
   176e4:	beq	17780 <__assert_fail@plt+0x63dc>
   176e8:	add	r0, r7, #2
   176ec:	cmp	r0, lr
   176f0:	bcs	17780 <__assert_fail@plt+0x63dc>
   176f4:	add	r1, ip, r7
   176f8:	ldrb	r1, [r1, #1]
   176fc:	cmp	r1, #63	; 0x3f
   17700:	bne	17780 <__assert_fail@plt+0x63dc>
   17704:	ldrb	r5, [ip, r0]
   17708:	sub	r1, r5, #33	; 0x21
   1770c:	cmp	r1, #29
   17710:	bhi	17780 <__assert_fail@plt+0x63dc>
   17714:	movw	r3, #20929	; 0x51c1
   17718:	mov	r2, #1
   1771c:	movt	r3, #14336	; 0x3800
   17720:	tst	r3, r2, lsl r1
   17724:	beq	17780 <__assert_fail@plt+0x63dc>
   17728:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1772c:	tst	r1, #1
   17730:	bne	17c28 <__assert_fail@plt+0x6884>
   17734:	cmp	r8, sl
   17738:	mov	r7, r0
   1773c:	mov	r4, #0
   17740:	movcc	r1, #63	; 0x3f
   17744:	strbcc	r1, [r6, r8]
   17748:	add	r1, r8, #1
   1774c:	cmp	r1, sl
   17750:	movcc	r2, #34	; 0x22
   17754:	strbcc	r2, [r6, r1]
   17758:	add	r1, r8, #2
   1775c:	cmp	r1, sl
   17760:	movcc	r2, #34	; 0x22
   17764:	strbcc	r2, [r6, r1]
   17768:	add	r1, r8, #3
   1776c:	add	r8, r8, #4
   17770:	cmp	r1, sl
   17774:	movcc	r2, #63	; 0x3f
   17778:	strbcc	r2, [r6, r1]
   1777c:	b	171e4 <__assert_fail@plt+0x5e40>
   17780:	mov	r5, #63	; 0x3f
   17784:	mov	r4, #0
   17788:	b	171e4 <__assert_fail@plt+0x5e40>
   1778c:	add	r1, r2, r7
   17790:	ldr	lr, [sp, #28]
   17794:	mov	r3, #0
   17798:	str	r1, [sp, #44]	; 0x2c
   1779c:	add	r1, r7, #1
   177a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   177a4:	tst	r0, #1
   177a8:	bne	1787c <__assert_fail@plt+0x64d8>
   177ac:	ldr	r2, [fp, #-72]	; 0xffffffb8
   177b0:	tst	r2, #1
   177b4:	bne	17b70 <__assert_fail@plt+0x67cc>
   177b8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   177bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   177c0:	cmp	r7, #2
   177c4:	movwne	r3, #1
   177c8:	orr	r3, r3, r2
   177cc:	tst	r3, #1
   177d0:	bne	1780c <__assert_fail@plt+0x6468>
   177d4:	cmp	r8, sl
   177d8:	add	r3, r8, #1
   177dc:	movcc	r2, #39	; 0x27
   177e0:	strbcc	r2, [r6, r8]
   177e4:	cmp	r3, sl
   177e8:	movcc	r2, #36	; 0x24
   177ec:	strbcc	r2, [r6, r3]
   177f0:	add	r3, r8, #2
   177f4:	add	r8, r8, #3
   177f8:	cmp	r3, sl
   177fc:	movcc	r2, #39	; 0x27
   17800:	strbcc	r2, [r6, r3]
   17804:	mov	r2, #1
   17808:	str	r2, [fp, #-56]	; 0xffffffc8
   1780c:	cmp	r8, sl
   17810:	movcc	r3, #92	; 0x5c
   17814:	strbcc	r3, [r6, r8]
   17818:	add	r3, r8, #1
   1781c:	cmp	r3, sl
   17820:	andcc	r7, r5, #192	; 0xc0
   17824:	movcc	r2, #48	; 0x30
   17828:	orrcc	r7, r2, r7, lsr #6
   1782c:	strbcc	r7, [r6, r3]
   17830:	add	r3, r8, #2
   17834:	add	r8, r8, #3
   17838:	cmp	r3, sl
   1783c:	lsrcc	r7, r5, #3
   17840:	movcc	r2, #6
   17844:	bficc	r7, r2, #3, #29
   17848:	mov	r2, #6
   1784c:	strbcc	r7, [r6, r3]
   17850:	bfi	r5, r2, #3, #29
   17854:	mov	r3, #1
   17858:	b	178a0 <__assert_fail@plt+0x64fc>
   1785c:	cmp	r8, sl
   17860:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17864:	strbcc	r5, [r6, r8]
   17868:	add	r8, r8, #1
   1786c:	ldrb	r5, [ip, r1]
   17870:	add	r1, r1, #1
   17874:	tst	r0, #1
   17878:	beq	177ac <__assert_fail@plt+0x6408>
   1787c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17880:	tst	r2, #1
   17884:	beq	17898 <__assert_fail@plt+0x64f4>
   17888:	cmp	r8, sl
   1788c:	movcc	r7, #92	; 0x5c
   17890:	strbcc	r7, [r6, r8]
   17894:	add	r8, r8, #1
   17898:	mov	r2, #0
   1789c:	str	r2, [fp, #-52]	; 0xffffffcc
   178a0:	ldr	r2, [sp, #44]	; 0x2c
   178a4:	and	r9, r3, #1
   178a8:	cmp	r2, r1
   178ac:	bls	179ac <__assert_fail@plt+0x6608>
   178b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   178b4:	cmp	r9, #0
   178b8:	movwne	r9, #1
   178bc:	mvn	r7, r2
   178c0:	orr	r7, r7, r9
   178c4:	tst	r7, #1
   178c8:	bne	1785c <__assert_fail@plt+0x64b8>
   178cc:	cmp	r8, sl
   178d0:	movcc	r7, #39	; 0x27
   178d4:	strbcc	r7, [r6, r8]
   178d8:	add	r7, r8, #1
   178dc:	add	r8, r8, #2
   178e0:	cmp	r7, sl
   178e4:	movcc	r2, #39	; 0x27
   178e8:	strbcc	r2, [r6, r7]
   178ec:	mov	r2, #0
   178f0:	str	r2, [fp, #-56]	; 0xffffffc8
   178f4:	b	1785c <__assert_fail@plt+0x64b8>
   178f8:	cmp	r8, sl
   178fc:	mov	r2, #1
   17900:	movcc	r0, #39	; 0x27
   17904:	strbcc	r0, [r6, r8]
   17908:	add	r0, r8, #1
   1790c:	cmp	r0, sl
   17910:	movcc	r1, #36	; 0x24
   17914:	strbcc	r1, [r6, r0]
   17918:	add	r0, r8, #2
   1791c:	cmp	r0, sl
   17920:	movcc	r1, #39	; 0x27
   17924:	strbcc	r1, [r6, r0]
   17928:	add	r0, r8, #3
   1792c:	cmp	r0, sl
   17930:	add	r8, r0, #1
   17934:	str	r2, [fp, #-56]	; 0xffffffc8
   17938:	movcc	r1, #92	; 0x5c
   1793c:	strbcc	r1, [r6, r0]
   17940:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17944:	cmp	r1, #2
   17948:	beq	1799c <__assert_fail@plt+0x65f8>
   1794c:	add	r1, r7, #1
   17950:	mov	r4, #0
   17954:	mov	r9, #1
   17958:	mov	r5, #48	; 0x30
   1795c:	cmp	r1, lr
   17960:	bcs	171e4 <__assert_fail@plt+0x5e40>
   17964:	ldrb	r1, [ip, r1]
   17968:	sub	r1, r1, #48	; 0x30
   1796c:	uxtb	r1, r1
   17970:	cmp	r1, #9
   17974:	bhi	171e4 <__assert_fail@plt+0x5e40>
   17978:	cmp	r8, sl
   1797c:	movcc	r1, #48	; 0x30
   17980:	strbcc	r1, [r6, r8]
   17984:	add	r1, r0, #2
   17988:	add	r8, r0, #3
   1798c:	cmp	r1, sl
   17990:	movcc	r2, #48	; 0x30
   17994:	strbcc	r2, [r6, r1]
   17998:	b	171e4 <__assert_fail@plt+0x5e40>
   1799c:	mov	r0, #48	; 0x30
   179a0:	mov	r9, #1
   179a4:	mov	r4, #0
   179a8:	b	1747c <__assert_fail@plt+0x60d8>
   179ac:	cmp	r9, #0
   179b0:	sub	r7, r1, #1
   179b4:	mov	r0, r5
   179b8:	movwne	r9, #1
   179bc:	cmp	r9, #0
   179c0:	bne	17a00 <__assert_fail@plt+0x665c>
   179c4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   179c8:	tst	r1, #1
   179cc:	beq	17a00 <__assert_fail@plt+0x665c>
   179d0:	cmp	r8, sl
   179d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   179d8:	movcc	r1, #39	; 0x27
   179dc:	strbcc	r1, [r6, r8]
   179e0:	add	r1, r8, #1
   179e4:	add	r8, r8, #2
   179e8:	cmp	r1, sl
   179ec:	movcc	r2, #39	; 0x27
   179f0:	strbcc	r2, [r6, r1]
   179f4:	mov	r1, #0
   179f8:	str	r1, [fp, #-56]	; 0xffffffc8
   179fc:	b	17508 <__assert_fail@plt+0x6164>
   17a00:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17a04:	b	17508 <__assert_fail@plt+0x6164>
   17a08:	mov	r4, #0
   17a0c:	b	17a48 <__assert_fail@plt+0x66a4>
   17a10:	mov	r4, #0
   17a14:	cmp	lr, r6
   17a18:	bls	17a48 <__assert_fail@plt+0x66a4>
   17a1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a20:	ldr	r6, [sp, #44]	; 0x2c
   17a24:	ldr	r0, [sp, #24]
   17a28:	ldrb	r0, [r0, r6]
   17a2c:	cmp	r0, #0
   17a30:	beq	17a50 <__assert_fail@plt+0x66ac>
   17a34:	add	r6, r6, #1
   17a38:	add	r0, r7, r6
   17a3c:	cmp	r0, lr
   17a40:	bcc	17a24 <__assert_fail@plt+0x6680>
   17a44:	b	17a50 <__assert_fail@plt+0x66ac>
   17a48:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a4c:	ldr	r6, [sp, #44]	; 0x2c
   17a50:	mov	r1, r6
   17a54:	ldr	r6, [sp, #80]	; 0x50
   17a58:	b	173b0 <__assert_fail@plt+0x600c>
   17a5c:	mov	lr, r7
   17a60:	b	17a68 <__assert_fail@plt+0x66c4>
   17a64:	mvn	lr, #0
   17a68:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17a6c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17a70:	eor	r0, r7, #2
   17a74:	orr	r0, r0, r8
   17a78:	clz	r0, r0
   17a7c:	lsr	r0, r0, #5
   17a80:	tst	r1, r0
   17a84:	bne	17b10 <__assert_fail@plt+0x676c>
   17a88:	mov	r0, r1
   17a8c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17a90:	cmp	r7, #2
   17a94:	movwne	r1, #1
   17a98:	orr	r0, r0, r1
   17a9c:	tst	r0, #1
   17aa0:	ldreq	r0, [sp, #60]	; 0x3c
   17aa4:	eoreq	r0, r0, #1
   17aa8:	tsteq	r0, #1
   17aac:	bne	17bbc <__assert_fail@plt+0x6818>
   17ab0:	mov	r9, lr
   17ab4:	tst	r5, #1
   17ab8:	bne	17b78 <__assert_fail@plt+0x67d4>
   17abc:	ldr	r6, [sp, #56]	; 0x38
   17ac0:	mov	r4, #0
   17ac4:	cmp	r6, #0
   17ac8:	beq	17bb4 <__assert_fail@plt+0x6810>
   17acc:	ldr	r0, [sp, #84]	; 0x54
   17ad0:	mov	r1, #0
   17ad4:	cmp	sl, #0
   17ad8:	mov	r5, #0
   17adc:	str	r1, [fp, #-72]	; 0xffffffb8
   17ae0:	beq	16cb0 <__assert_fail@plt+0x590c>
   17ae4:	b	17bbc <__assert_fail@plt+0x6818>
   17ae8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17aec:	ldr	r2, [sp, #84]	; 0x54
   17af0:	b	17b18 <__assert_fail@plt+0x6774>
   17af4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17af8:	mov	r2, #1
   17afc:	mov	lr, r4
   17b00:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17b04:	b	17b18 <__assert_fail@plt+0x6774>
   17b08:	ldr	r6, [sp, #80]	; 0x50
   17b0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b10:	ldr	r2, [sp, #84]	; 0x54
   17b14:	mov	r7, #2
   17b18:	mov	r0, #0
   17b1c:	ldr	r1, [fp, #12]
   17b20:	tst	r2, #1
   17b24:	mov	r2, r7
   17b28:	mov	r3, lr
   17b2c:	str	r0, [sp, #8]
   17b30:	ldr	r0, [sp, #72]	; 0x48
   17b34:	movwne	r2, #4
   17b38:	cmp	r7, #2
   17b3c:	movne	r2, r7
   17b40:	str	r2, [sp]
   17b44:	mov	r2, ip
   17b48:	bic	r1, r1, #2
   17b4c:	str	r0, [sp, #12]
   17b50:	ldr	r0, [sp, #76]	; 0x4c
   17b54:	str	r1, [sp, #4]
   17b58:	mov	r1, sl
   17b5c:	str	r0, [sp, #16]
   17b60:	mov	r0, r6
   17b64:	bl	16c30 <__assert_fail@plt+0x588c>
   17b68:	mov	r8, r0
   17b6c:	b	17c14 <__assert_fail@plt+0x6870>
   17b70:	ldr	r2, [sp, #84]	; 0x54
   17b74:	b	17b18 <__assert_fail@plt+0x6774>
   17b78:	mov	r0, #5
   17b7c:	ldr	r1, [sp, #56]	; 0x38
   17b80:	ldr	r2, [fp, #-84]	; 0xffffffac
   17b84:	mov	r3, r9
   17b88:	str	r0, [sp]
   17b8c:	ldr	r0, [fp, #12]
   17b90:	str	r0, [sp, #4]
   17b94:	ldr	r0, [fp, #16]
   17b98:	str	r0, [sp, #8]
   17b9c:	ldr	r0, [sp, #72]	; 0x48
   17ba0:	str	r0, [sp, #12]
   17ba4:	ldr	r0, [sp, #76]	; 0x4c
   17ba8:	str	r0, [sp, #16]
   17bac:	ldr	r0, [sp, #80]	; 0x50
   17bb0:	b	17b64 <__assert_fail@plt+0x67c0>
   17bb4:	mov	r0, #0
   17bb8:	str	r0, [fp, #-72]	; 0xffffffb8
   17bbc:	ldr	r1, [sp, #92]	; 0x5c
   17bc0:	cmp	r1, #0
   17bc4:	beq	17c04 <__assert_fail@plt+0x6860>
   17bc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17bcc:	ldr	r2, [sp, #80]	; 0x50
   17bd0:	tst	r0, #1
   17bd4:	bne	17c08 <__assert_fail@plt+0x6864>
   17bd8:	ldrb	r0, [r1]
   17bdc:	cmp	r0, #0
   17be0:	beq	17c08 <__assert_fail@plt+0x6864>
   17be4:	add	r1, r1, #1
   17be8:	cmp	r8, sl
   17bec:	strbcc	r0, [r2, r8]
   17bf0:	add	r8, r8, #1
   17bf4:	ldrb	r0, [r1], #1
   17bf8:	cmp	r0, #0
   17bfc:	bne	17be8 <__assert_fail@plt+0x6844>
   17c00:	b	17c08 <__assert_fail@plt+0x6864>
   17c04:	ldr	r2, [sp, #80]	; 0x50
   17c08:	cmp	r8, sl
   17c0c:	movcc	r0, #0
   17c10:	strbcc	r0, [r2, r8]
   17c14:	mov	r0, r8
   17c18:	sub	sp, fp, #28
   17c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c20:	mov	r2, #1
   17c24:	b	17b00 <__assert_fail@plt+0x675c>
   17c28:	ldr	r2, [sp, #84]	; 0x54
   17c2c:	mov	r7, #5
   17c30:	b	17b18 <__assert_fail@plt+0x6774>
   17c34:	bl	11374 <abort@plt>
   17c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c3c:	add	fp, sp, #28
   17c40:	sub	sp, sp, #28
   17c44:	movw	r5, #45496	; 0xb1b8
   17c48:	cmp	r2, #0
   17c4c:	mov	r4, r1
   17c50:	mov	r7, r0
   17c54:	str	r0, [sp, #20]
   17c58:	movt	r5, #2
   17c5c:	movne	r5, r2
   17c60:	bl	11260 <__errno_location@plt>
   17c64:	mov	sl, r0
   17c68:	ldm	r5, {r0, r1}
   17c6c:	ldr	r2, [r5, #40]	; 0x28
   17c70:	ldr	r3, [r5, #44]	; 0x2c
   17c74:	add	r9, r5, #8
   17c78:	ldr	r6, [sl]
   17c7c:	orr	r8, r1, #1
   17c80:	mov	r1, #0
   17c84:	str	r6, [sp, #24]
   17c88:	stm	sp, {r0, r8, r9}
   17c8c:	str	r2, [sp, #12]
   17c90:	str	r3, [sp, #16]
   17c94:	mov	r0, #0
   17c98:	mov	r2, r7
   17c9c:	mov	r3, r4
   17ca0:	mov	r6, r4
   17ca4:	bl	16c30 <__assert_fail@plt+0x588c>
   17ca8:	add	r7, r0, #1
   17cac:	mov	r0, r7
   17cb0:	bl	18ee4 <__assert_fail@plt+0x7b40>
   17cb4:	mov	r4, r0
   17cb8:	ldr	r0, [r5]
   17cbc:	ldr	r2, [r5, #44]	; 0x2c
   17cc0:	ldr	r1, [r5, #40]	; 0x28
   17cc4:	mov	r3, r6
   17cc8:	stm	sp, {r0, r8, r9}
   17ccc:	str	r2, [sp, #16]
   17cd0:	str	r1, [sp, #12]
   17cd4:	mov	r0, r4
   17cd8:	mov	r1, r7
   17cdc:	ldr	r2, [sp, #20]
   17ce0:	bl	16c30 <__assert_fail@plt+0x588c>
   17ce4:	ldr	r0, [sp, #24]
   17ce8:	str	r0, [sl]
   17cec:	mov	r0, r4
   17cf0:	sub	sp, fp, #28
   17cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cfc:	add	fp, sp, #28
   17d00:	sub	sp, sp, #36	; 0x24
   17d04:	movw	r8, #45496	; 0xb1b8
   17d08:	cmp	r3, #0
   17d0c:	mov	r4, r2
   17d10:	str	r2, [sp, #24]
   17d14:	mov	r5, r1
   17d18:	mov	r6, r0
   17d1c:	str	r0, [sp, #20]
   17d20:	movt	r8, #2
   17d24:	movne	r8, r3
   17d28:	bl	11260 <__errno_location@plt>
   17d2c:	str	r0, [sp, #28]
   17d30:	cmp	r4, #0
   17d34:	add	sl, r8, #8
   17d38:	ldm	r8, {r3, r9}
   17d3c:	ldr	r7, [r0]
   17d40:	ldr	r1, [r8, #40]	; 0x28
   17d44:	ldr	r2, [r8, #44]	; 0x2c
   17d48:	mov	r0, #0
   17d4c:	orreq	r9, r9, #1
   17d50:	str	r7, [sp, #32]
   17d54:	mov	r7, r5
   17d58:	stm	sp, {r3, r9, sl}
   17d5c:	str	r1, [sp, #12]
   17d60:	str	r2, [sp, #16]
   17d64:	mov	r1, #0
   17d68:	mov	r2, r6
   17d6c:	mov	r3, r5
   17d70:	bl	16c30 <__assert_fail@plt+0x588c>
   17d74:	add	r4, r0, #1
   17d78:	mov	r5, r0
   17d7c:	mov	r0, r4
   17d80:	bl	18ee4 <__assert_fail@plt+0x7b40>
   17d84:	mov	r6, r0
   17d88:	ldr	r0, [r8]
   17d8c:	ldr	r2, [r8, #44]	; 0x2c
   17d90:	ldr	r1, [r8, #40]	; 0x28
   17d94:	mov	r3, r7
   17d98:	stm	sp, {r0, r9, sl}
   17d9c:	str	r2, [sp, #16]
   17da0:	str	r1, [sp, #12]
   17da4:	mov	r0, r6
   17da8:	mov	r1, r4
   17dac:	ldr	r2, [sp, #20]
   17db0:	bl	16c30 <__assert_fail@plt+0x588c>
   17db4:	ldr	r0, [sp, #24]
   17db8:	ldr	r1, [sp, #32]
   17dbc:	ldr	r2, [sp, #28]
   17dc0:	cmp	r0, #0
   17dc4:	str	r1, [r2]
   17dc8:	strne	r5, [r0]
   17dcc:	mov	r0, r6
   17dd0:	sub	sp, fp, #28
   17dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ddc:	add	fp, sp, #24
   17de0:	movw	r5, #45356	; 0xb12c
   17de4:	movw	r8, #45352	; 0xb128
   17de8:	movt	r5, #2
   17dec:	movt	r8, #2
   17df0:	ldr	r0, [r5]
   17df4:	ldr	r4, [r8]
   17df8:	cmp	r0, #2
   17dfc:	blt	17e28 <__assert_fail@plt+0x6a84>
   17e00:	add	r7, r4, #12
   17e04:	mov	r6, #0
   17e08:	ldr	r0, [r7, r6, lsl #3]
   17e0c:	bl	19a44 <__assert_fail@plt+0x86a0>
   17e10:	ldr	r1, [r5]
   17e14:	add	r2, r6, #2
   17e18:	add	r0, r6, #1
   17e1c:	mov	r6, r0
   17e20:	cmp	r2, r1
   17e24:	blt	17e08 <__assert_fail@plt+0x6a64>
   17e28:	ldr	r0, [r4, #4]
   17e2c:	movw	r7, #45544	; 0xb1e8
   17e30:	movt	r7, #2
   17e34:	cmp	r0, r7
   17e38:	beq	17e50 <__assert_fail@plt+0x6aac>
   17e3c:	bl	19a44 <__assert_fail@plt+0x86a0>
   17e40:	movw	r0, #45360	; 0xb130
   17e44:	mov	r6, #256	; 0x100
   17e48:	movt	r0, #2
   17e4c:	strd	r6, [r0]
   17e50:	movw	r6, #45360	; 0xb130
   17e54:	movt	r6, #2
   17e58:	cmp	r4, r6
   17e5c:	beq	17e6c <__assert_fail@plt+0x6ac8>
   17e60:	mov	r0, r4
   17e64:	bl	19a44 <__assert_fail@plt+0x86a0>
   17e68:	str	r6, [r8]
   17e6c:	mov	r0, #1
   17e70:	str	r0, [r5]
   17e74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17e78:	movw	r3, #45496	; 0xb1b8
   17e7c:	mvn	r2, #0
   17e80:	movt	r3, #2
   17e84:	b	17e88 <__assert_fail@plt+0x6ae4>
   17e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e8c:	add	fp, sp, #28
   17e90:	sub	sp, sp, #44	; 0x2c
   17e94:	mov	r7, r3
   17e98:	str	r2, [sp, #36]	; 0x24
   17e9c:	str	r1, [sp, #32]
   17ea0:	mov	r5, r0
   17ea4:	bl	11260 <__errno_location@plt>
   17ea8:	cmp	r5, #0
   17eac:	blt	18018 <__assert_fail@plt+0x6c74>
   17eb0:	cmn	r5, #-2147483647	; 0x80000001
   17eb4:	beq	18018 <__assert_fail@plt+0x6c74>
   17eb8:	movw	r8, #45356	; 0xb12c
   17ebc:	movw	r4, #45352	; 0xb128
   17ec0:	str	r0, [sp, #28]
   17ec4:	ldr	r0, [r0]
   17ec8:	movt	r8, #2
   17ecc:	movt	r4, #2
   17ed0:	ldr	r1, [r8]
   17ed4:	ldr	r6, [r4]
   17ed8:	str	r0, [sp, #24]
   17edc:	cmp	r1, r5
   17ee0:	ble	17eec <__assert_fail@plt+0x6b48>
   17ee4:	mov	sl, r6
   17ee8:	b	17f54 <__assert_fail@plt+0x6bb0>
   17eec:	movw	r9, #45360	; 0xb130
   17ef0:	mov	r0, #8
   17ef4:	add	r2, r5, #1
   17ef8:	str	r1, [fp, #-32]	; 0xffffffe0
   17efc:	mvn	r3, #-2147483648	; 0x80000000
   17f00:	movt	r9, #2
   17f04:	str	r0, [sp]
   17f08:	sub	r2, r2, r1
   17f0c:	sub	r1, fp, #32
   17f10:	subs	r0, r6, r9
   17f14:	movne	r0, r6
   17f18:	bl	190e4 <__assert_fail@plt+0x7d40>
   17f1c:	cmp	r6, r9
   17f20:	mov	sl, r0
   17f24:	str	r0, [r4]
   17f28:	ldrdeq	r0, [r9]
   17f2c:	stmeq	sl, {r0, r1}
   17f30:	ldr	r1, [r8]
   17f34:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17f38:	add	r0, sl, r1, lsl #3
   17f3c:	sub	r1, r2, r1
   17f40:	lsl	r2, r1, #3
   17f44:	mov	r1, #0
   17f48:	bl	11284 <memset@plt>
   17f4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17f50:	str	r0, [r8]
   17f54:	mov	r9, sl
   17f58:	ldr	r6, [r9, r5, lsl #3]!
   17f5c:	ldr	r4, [r9, #4]!
   17f60:	ldm	r7, {r0, r1}
   17f64:	ldr	r2, [r7, #40]	; 0x28
   17f68:	ldr	r3, [r7, #44]	; 0x2c
   17f6c:	orr	r8, r1, #1
   17f70:	add	r1, r7, #8
   17f74:	stm	sp, {r0, r8}
   17f78:	add	r0, sp, #8
   17f7c:	str	r1, [sp, #20]
   17f80:	stm	r0, {r1, r2, r3}
   17f84:	mov	r0, r4
   17f88:	mov	r1, r6
   17f8c:	ldr	r2, [sp, #32]
   17f90:	ldr	r3, [sp, #36]	; 0x24
   17f94:	bl	16c30 <__assert_fail@plt+0x588c>
   17f98:	cmp	r6, r0
   17f9c:	bhi	18000 <__assert_fail@plt+0x6c5c>
   17fa0:	add	r6, r0, #1
   17fa4:	movw	r0, #45544	; 0xb1e8
   17fa8:	movt	r0, #2
   17fac:	str	r6, [sl, r5, lsl #3]
   17fb0:	cmp	r4, r0
   17fb4:	beq	17fc0 <__assert_fail@plt+0x6c1c>
   17fb8:	mov	r0, r4
   17fbc:	bl	19a44 <__assert_fail@plt+0x86a0>
   17fc0:	mov	r0, r6
   17fc4:	bl	18ee4 <__assert_fail@plt+0x7b40>
   17fc8:	str	r0, [r9]
   17fcc:	mov	r4, r0
   17fd0:	add	r3, sp, #8
   17fd4:	ldr	r0, [r7]
   17fd8:	ldr	r1, [r7, #40]	; 0x28
   17fdc:	ldr	r2, [r7, #44]	; 0x2c
   17fe0:	stm	sp, {r0, r8}
   17fe4:	ldr	r0, [sp, #20]
   17fe8:	stm	r3, {r0, r1, r2}
   17fec:	mov	r0, r4
   17ff0:	mov	r1, r6
   17ff4:	ldr	r2, [sp, #32]
   17ff8:	ldr	r3, [sp, #36]	; 0x24
   17ffc:	bl	16c30 <__assert_fail@plt+0x588c>
   18000:	ldr	r0, [sp, #28]
   18004:	ldr	r1, [sp, #24]
   18008:	str	r1, [r0]
   1800c:	mov	r0, r4
   18010:	sub	sp, fp, #28
   18014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18018:	bl	11374 <abort@plt>
   1801c:	movw	r3, #45496	; 0xb1b8
   18020:	movt	r3, #2
   18024:	b	17e88 <__assert_fail@plt+0x6ae4>
   18028:	movw	r3, #45496	; 0xb1b8
   1802c:	mov	r1, r0
   18030:	mov	r0, #0
   18034:	mvn	r2, #0
   18038:	movt	r3, #2
   1803c:	b	17e88 <__assert_fail@plt+0x6ae4>
   18040:	movw	r3, #45496	; 0xb1b8
   18044:	mov	r2, r1
   18048:	mov	r1, r0
   1804c:	mov	r0, #0
   18050:	movt	r3, #2
   18054:	b	17e88 <__assert_fail@plt+0x6ae4>
   18058:	push	{fp, lr}
   1805c:	mov	fp, sp
   18060:	sub	sp, sp, #48	; 0x30
   18064:	vmov.i32	q8, #0	; 0x00000000
   18068:	mov	ip, #32
   1806c:	mov	r3, sp
   18070:	mov	lr, r2
   18074:	cmp	r1, #10
   18078:	add	r2, r3, #16
   1807c:	vst1.64	{d16-d17}, [r3], ip
   18080:	vst1.64	{d16-d17}, [r3]
   18084:	vst1.64	{d16-d17}, [r2]
   18088:	beq	180a8 <__assert_fail@plt+0x6d04>
   1808c:	str	r1, [sp]
   18090:	mov	r3, sp
   18094:	mov	r1, lr
   18098:	mvn	r2, #0
   1809c:	bl	17e88 <__assert_fail@plt+0x6ae4>
   180a0:	mov	sp, fp
   180a4:	pop	{fp, pc}
   180a8:	bl	11374 <abort@plt>
   180ac:	push	{r4, sl, fp, lr}
   180b0:	add	fp, sp, #8
   180b4:	sub	sp, sp, #48	; 0x30
   180b8:	mov	ip, r3
   180bc:	mov	r3, sp
   180c0:	vmov.i32	q8, #0	; 0x00000000
   180c4:	mov	lr, #32
   180c8:	cmp	r1, #10
   180cc:	add	r4, r3, #16
   180d0:	vst1.64	{d16-d17}, [r3], lr
   180d4:	vst1.64	{d16-d17}, [r3]
   180d8:	vst1.64	{d16-d17}, [r4]
   180dc:	beq	180fc <__assert_fail@plt+0x6d58>
   180e0:	str	r1, [sp]
   180e4:	mov	r1, r2
   180e8:	mov	r3, sp
   180ec:	mov	r2, ip
   180f0:	bl	17e88 <__assert_fail@plt+0x6ae4>
   180f4:	sub	sp, fp, #8
   180f8:	pop	{r4, sl, fp, pc}
   180fc:	bl	11374 <abort@plt>
   18100:	push	{fp, lr}
   18104:	mov	fp, sp
   18108:	sub	sp, sp, #48	; 0x30
   1810c:	mov	r3, sp
   18110:	vmov.i32	q8, #0	; 0x00000000
   18114:	mov	ip, #32
   18118:	cmp	r0, #10
   1811c:	add	r2, r3, #16
   18120:	vst1.64	{d16-d17}, [r3], ip
   18124:	vst1.64	{d16-d17}, [r3]
   18128:	vst1.64	{d16-d17}, [r2]
   1812c:	beq	1814c <__assert_fail@plt+0x6da8>
   18130:	str	r0, [sp]
   18134:	mov	r3, sp
   18138:	mov	r0, #0
   1813c:	mvn	r2, #0
   18140:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18144:	mov	sp, fp
   18148:	pop	{fp, pc}
   1814c:	bl	11374 <abort@plt>
   18150:	push	{fp, lr}
   18154:	mov	fp, sp
   18158:	sub	sp, sp, #48	; 0x30
   1815c:	mov	r3, sp
   18160:	vmov.i32	q8, #0	; 0x00000000
   18164:	mov	ip, #32
   18168:	cmp	r0, #10
   1816c:	add	lr, r3, #16
   18170:	vst1.64	{d16-d17}, [r3], ip
   18174:	vst1.64	{d16-d17}, [r3]
   18178:	vst1.64	{d16-d17}, [lr]
   1817c:	beq	18198 <__assert_fail@plt+0x6df4>
   18180:	str	r0, [sp]
   18184:	mov	r3, sp
   18188:	mov	r0, #0
   1818c:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18190:	mov	sp, fp
   18194:	pop	{fp, pc}
   18198:	bl	11374 <abort@plt>
   1819c:	push	{r4, sl, fp, lr}
   181a0:	add	fp, sp, #8
   181a4:	sub	sp, sp, #48	; 0x30
   181a8:	mov	lr, r0
   181ac:	movw	r0, #45496	; 0xb1b8
   181b0:	mov	r3, #32
   181b4:	mov	ip, r1
   181b8:	mov	r4, #1
   181bc:	movt	r0, #2
   181c0:	add	r1, r0, #16
   181c4:	vld1.64	{d16-d17}, [r0], r3
   181c8:	mov	r3, sp
   181cc:	vld1.64	{d18-d19}, [r1]
   181d0:	add	r1, r3, #16
   181d4:	vld1.64	{d20-d21}, [r0]
   181d8:	add	r0, r3, #32
   181dc:	vst1.64	{d18-d19}, [r1]
   181e0:	mov	r1, r3
   181e4:	vst1.64	{d20-d21}, [r0]
   181e8:	mov	r0, #28
   181ec:	and	r0, r0, r2, lsr #3
   181f0:	and	r2, r2, #31
   181f4:	vst1.64	{d16-d17}, [r1], r0
   181f8:	ldr	r0, [r1, #8]
   181fc:	bic	r4, r4, r0, lsr r2
   18200:	eor	r0, r0, r4, lsl r2
   18204:	mov	r2, ip
   18208:	str	r0, [r1, #8]
   1820c:	mov	r0, #0
   18210:	mov	r1, lr
   18214:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18218:	sub	sp, fp, #8
   1821c:	pop	{r4, sl, fp, pc}
   18220:	push	{fp, lr}
   18224:	mov	fp, sp
   18228:	sub	sp, sp, #48	; 0x30
   1822c:	mov	ip, r0
   18230:	movw	r0, #45496	; 0xb1b8
   18234:	mov	r3, #32
   18238:	movt	r0, #2
   1823c:	add	r2, r0, #16
   18240:	vld1.64	{d16-d17}, [r0], r3
   18244:	mov	r3, sp
   18248:	vld1.64	{d18-d19}, [r2]
   1824c:	add	r2, r3, #16
   18250:	vld1.64	{d20-d21}, [r0]
   18254:	add	r0, r3, #32
   18258:	vst1.64	{d18-d19}, [r2]
   1825c:	mov	r2, r3
   18260:	vst1.64	{d20-d21}, [r0]
   18264:	mov	r0, #28
   18268:	and	r0, r0, r1, lsr #3
   1826c:	and	r1, r1, #31
   18270:	vst1.64	{d16-d17}, [r2], r0
   18274:	mov	r0, #1
   18278:	ldr	lr, [r2, #8]
   1827c:	bic	r0, r0, lr, lsr r1
   18280:	eor	r0, lr, r0, lsl r1
   18284:	mov	r1, ip
   18288:	str	r0, [r2, #8]
   1828c:	mov	r0, #0
   18290:	mvn	r2, #0
   18294:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18298:	mov	sp, fp
   1829c:	pop	{fp, pc}
   182a0:	push	{fp, lr}
   182a4:	mov	fp, sp
   182a8:	sub	sp, sp, #48	; 0x30
   182ac:	movw	r2, #45496	; 0xb1b8
   182b0:	mov	r3, #32
   182b4:	mov	r1, r0
   182b8:	movt	r2, #2
   182bc:	add	r0, r2, #16
   182c0:	vld1.64	{d16-d17}, [r2], r3
   182c4:	mov	r3, sp
   182c8:	vld1.64	{d18-d19}, [r0]
   182cc:	add	r0, r3, #16
   182d0:	vld1.64	{d20-d21}, [r2]
   182d4:	mov	r2, r3
   182d8:	vst1.64	{d18-d19}, [r0]
   182dc:	add	r0, r3, #32
   182e0:	vst1.64	{d20-d21}, [r0]
   182e4:	mov	r0, #12
   182e8:	vst1.64	{d16-d17}, [r2], r0
   182ec:	ldr	r0, [r2]
   182f0:	orr	r0, r0, #67108864	; 0x4000000
   182f4:	str	r0, [r2]
   182f8:	mov	r0, #0
   182fc:	mvn	r2, #0
   18300:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18304:	mov	sp, fp
   18308:	pop	{fp, pc}
   1830c:	push	{fp, lr}
   18310:	mov	fp, sp
   18314:	sub	sp, sp, #48	; 0x30
   18318:	mov	ip, r1
   1831c:	mov	r1, r0
   18320:	movw	r0, #45496	; 0xb1b8
   18324:	mov	r3, #32
   18328:	movt	r0, #2
   1832c:	add	r2, r0, #16
   18330:	vld1.64	{d16-d17}, [r0], r3
   18334:	mov	r3, sp
   18338:	vld1.64	{d18-d19}, [r2]
   1833c:	add	r2, r3, #16
   18340:	vld1.64	{d20-d21}, [r0]
   18344:	add	r0, r3, #32
   18348:	vst1.64	{d18-d19}, [r2]
   1834c:	mov	r2, r3
   18350:	vst1.64	{d20-d21}, [r0]
   18354:	mov	r0, #12
   18358:	vst1.64	{d16-d17}, [r2], r0
   1835c:	ldr	r0, [r2]
   18360:	orr	r0, r0, #67108864	; 0x4000000
   18364:	str	r0, [r2]
   18368:	mov	r0, #0
   1836c:	mov	r2, ip
   18370:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18374:	mov	sp, fp
   18378:	pop	{fp, pc}
   1837c:	push	{r4, sl, fp, lr}
   18380:	add	fp, sp, #8
   18384:	sub	sp, sp, #96	; 0x60
   18388:	mov	ip, r2
   1838c:	mov	r2, sp
   18390:	vmov.i32	q8, #0	; 0x00000000
   18394:	mov	r4, #28
   18398:	cmp	r1, #10
   1839c:	mov	r3, r2
   183a0:	add	lr, r2, #16
   183a4:	vst1.64	{d16-d17}, [r3], r4
   183a8:	vst1.64	{d16-d17}, [lr]
   183ac:	vst1.32	{d16-d17}, [r3]
   183b0:	beq	18400 <__assert_fail@plt+0x705c>
   183b4:	vld1.64	{d16-d17}, [r2], r4
   183b8:	vld1.64	{d18-d19}, [lr]
   183bc:	add	r3, sp, #48	; 0x30
   183c0:	add	r4, r3, #4
   183c4:	vld1.32	{d20-d21}, [r2]
   183c8:	add	r2, r3, #20
   183cc:	vst1.32	{d16-d17}, [r4]
   183d0:	vst1.32	{d18-d19}, [r2]
   183d4:	add	r2, r3, #32
   183d8:	vst1.32	{d20-d21}, [r2]
   183dc:	str	r1, [sp, #48]	; 0x30
   183e0:	mvn	r2, #0
   183e4:	ldr	r1, [sp, #60]	; 0x3c
   183e8:	orr	r1, r1, #67108864	; 0x4000000
   183ec:	str	r1, [sp, #60]	; 0x3c
   183f0:	mov	r1, ip
   183f4:	bl	17e88 <__assert_fail@plt+0x6ae4>
   183f8:	sub	sp, fp, #8
   183fc:	pop	{r4, sl, fp, pc}
   18400:	bl	11374 <abort@plt>
   18404:	push	{r4, r5, fp, lr}
   18408:	add	fp, sp, #8
   1840c:	sub	sp, sp, #48	; 0x30
   18410:	mov	ip, r3
   18414:	movw	r3, #45496	; 0xb1b8
   18418:	mov	lr, #32
   1841c:	cmp	r1, #0
   18420:	mov	r5, sp
   18424:	movt	r3, #2
   18428:	cmpne	r2, #0
   1842c:	add	r4, r3, #16
   18430:	vld1.64	{d16-d17}, [r3], lr
   18434:	vld1.64	{d18-d19}, [r4]
   18438:	add	r4, r5, #16
   1843c:	vld1.64	{d20-d21}, [r3]
   18440:	vst1.64	{d16-d17}, [r5], lr
   18444:	mov	r3, #10
   18448:	vst1.64	{d18-d19}, [r4]
   1844c:	vst1.64	{d20-d21}, [r5]
   18450:	str	r3, [sp]
   18454:	bne	1845c <__assert_fail@plt+0x70b8>
   18458:	bl	11374 <abort@plt>
   1845c:	str	r2, [sp, #44]	; 0x2c
   18460:	str	r1, [sp, #40]	; 0x28
   18464:	mov	r3, sp
   18468:	mov	r1, ip
   1846c:	mvn	r2, #0
   18470:	bl	17e88 <__assert_fail@plt+0x6ae4>
   18474:	sub	sp, fp, #8
   18478:	pop	{r4, r5, fp, pc}
   1847c:	push	{r4, r5, fp, lr}
   18480:	add	fp, sp, #8
   18484:	sub	sp, sp, #48	; 0x30
   18488:	mov	lr, r3
   1848c:	movw	r3, #45496	; 0xb1b8
   18490:	mov	ip, #32
   18494:	cmp	r1, #0
   18498:	mov	r5, sp
   1849c:	movt	r3, #2
   184a0:	cmpne	r2, #0
   184a4:	add	r4, r3, #16
   184a8:	vld1.64	{d16-d17}, [r3], ip
   184ac:	vld1.64	{d18-d19}, [r4]
   184b0:	add	r4, r5, #16
   184b4:	vld1.64	{d20-d21}, [r3]
   184b8:	vst1.64	{d16-d17}, [r5], ip
   184bc:	mov	r3, #10
   184c0:	vst1.64	{d18-d19}, [r4]
   184c4:	vst1.64	{d20-d21}, [r5]
   184c8:	str	r3, [sp]
   184cc:	bne	184d4 <__assert_fail@plt+0x7130>
   184d0:	bl	11374 <abort@plt>
   184d4:	ldr	ip, [fp, #8]
   184d8:	str	r2, [sp, #44]	; 0x2c
   184dc:	str	r1, [sp, #40]	; 0x28
   184e0:	mov	r3, sp
   184e4:	mov	r1, lr
   184e8:	mov	r2, ip
   184ec:	bl	17e88 <__assert_fail@plt+0x6ae4>
   184f0:	sub	sp, fp, #8
   184f4:	pop	{r4, r5, fp, pc}
   184f8:	push	{r4, sl, fp, lr}
   184fc:	add	fp, sp, #8
   18500:	sub	sp, sp, #48	; 0x30
   18504:	mov	ip, r2
   18508:	movw	r2, #45496	; 0xb1b8
   1850c:	mov	lr, #32
   18510:	cmp	r0, #0
   18514:	mov	r4, sp
   18518:	movt	r2, #2
   1851c:	cmpne	r1, #0
   18520:	add	r3, r2, #16
   18524:	vld1.64	{d16-d17}, [r2], lr
   18528:	vld1.64	{d18-d19}, [r3]
   1852c:	add	r3, r4, #16
   18530:	vld1.64	{d20-d21}, [r2]
   18534:	vst1.64	{d16-d17}, [r4], lr
   18538:	mov	r2, #10
   1853c:	vst1.64	{d18-d19}, [r3]
   18540:	vst1.64	{d20-d21}, [r4]
   18544:	str	r2, [sp]
   18548:	bne	18550 <__assert_fail@plt+0x71ac>
   1854c:	bl	11374 <abort@plt>
   18550:	str	r1, [sp, #44]	; 0x2c
   18554:	str	r0, [sp, #40]	; 0x28
   18558:	mov	r3, sp
   1855c:	mov	r0, #0
   18560:	mov	r1, ip
   18564:	mvn	r2, #0
   18568:	bl	17e88 <__assert_fail@plt+0x6ae4>
   1856c:	sub	sp, fp, #8
   18570:	pop	{r4, sl, fp, pc}
   18574:	push	{r4, r5, fp, lr}
   18578:	add	fp, sp, #8
   1857c:	sub	sp, sp, #48	; 0x30
   18580:	mov	lr, r2
   18584:	movw	r2, #45496	; 0xb1b8
   18588:	mov	ip, r3
   1858c:	mov	r3, #32
   18590:	cmp	r0, #0
   18594:	mov	r5, sp
   18598:	movt	r2, #2
   1859c:	cmpne	r1, #0
   185a0:	add	r4, r2, #16
   185a4:	vld1.64	{d16-d17}, [r2], r3
   185a8:	vld1.64	{d18-d19}, [r4]
   185ac:	add	r4, r5, #16
   185b0:	vld1.64	{d20-d21}, [r2]
   185b4:	vst1.64	{d16-d17}, [r5], r3
   185b8:	mov	r2, #10
   185bc:	vst1.64	{d18-d19}, [r4]
   185c0:	vst1.64	{d20-d21}, [r5]
   185c4:	str	r2, [sp]
   185c8:	bne	185d0 <__assert_fail@plt+0x722c>
   185cc:	bl	11374 <abort@plt>
   185d0:	str	r1, [sp, #44]	; 0x2c
   185d4:	str	r0, [sp, #40]	; 0x28
   185d8:	mov	r3, sp
   185dc:	mov	r0, #0
   185e0:	mov	r1, lr
   185e4:	mov	r2, ip
   185e8:	bl	17e88 <__assert_fail@plt+0x6ae4>
   185ec:	sub	sp, fp, #8
   185f0:	pop	{r4, r5, fp, pc}
   185f4:	movw	r3, #45368	; 0xb138
   185f8:	movt	r3, #2
   185fc:	b	17e88 <__assert_fail@plt+0x6ae4>
   18600:	movw	r3, #45368	; 0xb138
   18604:	mov	r2, r1
   18608:	mov	r1, r0
   1860c:	mov	r0, #0
   18610:	movt	r3, #2
   18614:	b	17e88 <__assert_fail@plt+0x6ae4>
   18618:	movw	r3, #45368	; 0xb138
   1861c:	mvn	r2, #0
   18620:	movt	r3, #2
   18624:	b	17e88 <__assert_fail@plt+0x6ae4>
   18628:	movw	r3, #45368	; 0xb138
   1862c:	mov	r1, r0
   18630:	mov	r0, #0
   18634:	mvn	r2, #0
   18638:	movt	r3, #2
   1863c:	b	17e88 <__assert_fail@plt+0x6ae4>
   18640:	push	{r4, r5, fp, lr}
   18644:	add	fp, sp, #8
   18648:	mov	r5, r0
   1864c:	mov	r4, r1
   18650:	mov	r0, #0
   18654:	mov	r2, #5
   18658:	mov	r1, r5
   1865c:	bl	1114c <dcgettext@plt>
   18660:	cmp	r0, r5
   18664:	popne	{r4, r5, fp, pc}
   18668:	bl	19b10 <__assert_fail@plt+0x876c>
   1866c:	ldrb	r1, [r0]
   18670:	and	r1, r1, #223	; 0xdf
   18674:	cmp	r1, #71	; 0x47
   18678:	beq	186e0 <__assert_fail@plt+0x733c>
   1867c:	cmp	r1, #85	; 0x55
   18680:	bne	18704 <__assert_fail@plt+0x7360>
   18684:	ldrb	r1, [r0, #1]
   18688:	and	r1, r1, #223	; 0xdf
   1868c:	cmp	r1, #84	; 0x54
   18690:	bne	18704 <__assert_fail@plt+0x7360>
   18694:	ldrb	r1, [r0, #2]
   18698:	and	r1, r1, #223	; 0xdf
   1869c:	cmp	r1, #70	; 0x46
   186a0:	ldrbeq	r1, [r0, #3]
   186a4:	cmpeq	r1, #45	; 0x2d
   186a8:	bne	18704 <__assert_fail@plt+0x7360>
   186ac:	ldrb	r1, [r0, #4]
   186b0:	cmp	r1, #56	; 0x38
   186b4:	ldrbeq	r0, [r0, #5]
   186b8:	cmpeq	r0, #0
   186bc:	bne	18704 <__assert_fail@plt+0x7360>
   186c0:	ldrb	r1, [r5]
   186c4:	movw	r2, #43658	; 0xaa8a
   186c8:	movw	r0, #43662	; 0xaa8e
   186cc:	movt	r2, #1
   186d0:	movt	r0, #1
   186d4:	cmp	r1, #96	; 0x60
   186d8:	moveq	r0, r2
   186dc:	pop	{r4, r5, fp, pc}
   186e0:	ldrb	r1, [r0, #1]
   186e4:	and	r1, r1, #223	; 0xdf
   186e8:	cmp	r1, #66	; 0x42
   186ec:	bne	18704 <__assert_fail@plt+0x7360>
   186f0:	ldrb	r1, [r0, #2]
   186f4:	cmp	r1, #49	; 0x31
   186f8:	ldrbeq	r1, [r0, #3]
   186fc:	cmpeq	r1, #56	; 0x38
   18700:	beq	18720 <__assert_fail@plt+0x737c>
   18704:	movw	r1, #43652	; 0xaa84
   18708:	movw	r0, #43656	; 0xaa88
   1870c:	cmp	r4, #9
   18710:	movt	r1, #1
   18714:	movt	r0, #1
   18718:	moveq	r0, r1
   1871c:	pop	{r4, r5, fp, pc}
   18720:	ldrb	r1, [r0, #4]
   18724:	cmp	r1, #48	; 0x30
   18728:	ldrbeq	r1, [r0, #5]
   1872c:	cmpeq	r1, #51	; 0x33
   18730:	bne	18704 <__assert_fail@plt+0x7360>
   18734:	ldrb	r1, [r0, #6]
   18738:	cmp	r1, #48	; 0x30
   1873c:	ldrbeq	r0, [r0, #7]
   18740:	cmpeq	r0, #0
   18744:	bne	18704 <__assert_fail@plt+0x7360>
   18748:	ldrb	r1, [r5]
   1874c:	movw	r2, #43666	; 0xaa92
   18750:	movw	r0, #43670	; 0xaa96
   18754:	movt	r2, #1
   18758:	movt	r0, #1
   1875c:	b	186d4 <__assert_fail@plt+0x7330>
   18760:	push	{r4, sl, fp, lr}
   18764:	add	fp, sp, #8
   18768:	sub	sp, sp, #104	; 0x68
   1876c:	movw	r1, #44495	; 0xadcf
   18770:	mov	r4, r0
   18774:	mov	r2, sp
   18778:	mov	r0, #3
   1877c:	movt	r1, #1
   18780:	bl	1138c <__lxstat64@plt>
   18784:	mov	r1, r0
   18788:	mov	r0, #0
   1878c:	cmp	r1, #0
   18790:	beq	1879c <__assert_fail@plt+0x73f8>
   18794:	sub	sp, fp, #8
   18798:	pop	{r4, sl, fp, pc}
   1879c:	ldr	r0, [sp, #96]	; 0x60
   187a0:	ldr	r1, [sp, #100]	; 0x64
   187a4:	ldm	sp, {r2, r3}
   187a8:	stm	r4, {r0, r1, r2, r3}
   187ac:	mov	r0, r4
   187b0:	sub	sp, fp, #8
   187b4:	pop	{r4, sl, fp, pc}
   187b8:	push	{r4, r5, r6, r7, fp, lr}
   187bc:	add	fp, sp, #16
   187c0:	mov	r4, r0
   187c4:	cmp	r0, #2
   187c8:	movhi	r0, r4
   187cc:	pophi	{r4, r5, r6, r7, fp, pc}
   187d0:	mov	r0, r4
   187d4:	bl	19be4 <__assert_fail@plt+0x8840>
   187d8:	mov	r5, r0
   187dc:	bl	11260 <__errno_location@plt>
   187e0:	ldr	r7, [r0]
   187e4:	mov	r6, r0
   187e8:	mov	r0, r4
   187ec:	bl	11380 <close@plt>
   187f0:	mov	r0, r5
   187f4:	str	r7, [r6]
   187f8:	pop	{r4, r5, r6, r7, fp, pc}
   187fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18800:	add	fp, sp, #24
   18804:	sub	sp, sp, #32
   18808:	ldr	r6, [fp, #12]
   1880c:	ldr	r7, [fp, #8]
   18810:	mov	r4, r2
   18814:	mov	r8, r0
   18818:	cmp	r1, #0
   1881c:	beq	18844 <__assert_fail@plt+0x74a0>
   18820:	movw	r2, #43760	; 0xaaf0
   18824:	mov	r5, r1
   18828:	str	r3, [sp, #4]
   1882c:	str	r4, [sp]
   18830:	mov	r0, r8
   18834:	mov	r1, #1
   18838:	movt	r2, #1
   1883c:	mov	r3, r5
   18840:	b	1885c <__assert_fail@plt+0x74b8>
   18844:	movw	r2, #43772	; 0xaafc
   18848:	str	r3, [sp]
   1884c:	mov	r0, r8
   18850:	mov	r1, #1
   18854:	mov	r3, r4
   18858:	movt	r2, #1
   1885c:	bl	112a8 <__fprintf_chk@plt>
   18860:	movw	r1, #43779	; 0xab03
   18864:	mov	r0, #0
   18868:	mov	r2, #5
   1886c:	movt	r1, #1
   18870:	bl	1114c <dcgettext@plt>
   18874:	movw	r2, #44497	; 0xadd1
   18878:	mov	r3, r0
   1887c:	movw	r0, #2022	; 0x7e6
   18880:	mov	r1, #1
   18884:	str	r0, [sp]
   18888:	movt	r2, #1
   1888c:	mov	r0, r8
   18890:	bl	112a8 <__fprintf_chk@plt>
   18894:	movw	r4, #40969	; 0xa009
   18898:	mov	r1, r8
   1889c:	movt	r4, #1
   188a0:	mov	r0, r4
   188a4:	bl	110d4 <fputs_unlocked@plt>
   188a8:	movw	r1, #43783	; 0xab07
   188ac:	mov	r0, #0
   188b0:	mov	r2, #5
   188b4:	movt	r1, #1
   188b8:	bl	1114c <dcgettext@plt>
   188bc:	movw	r3, #43954	; 0xabb2
   188c0:	mov	r2, r0
   188c4:	mov	r0, r8
   188c8:	mov	r1, #1
   188cc:	movt	r3, #1
   188d0:	bl	112a8 <__fprintf_chk@plt>
   188d4:	mov	r0, r4
   188d8:	mov	r1, r8
   188dc:	bl	110d4 <fputs_unlocked@plt>
   188e0:	cmp	r6, #9
   188e4:	bhi	18920 <__assert_fail@plt+0x757c>
   188e8:	add	r0, pc, #0
   188ec:	ldr	pc, [r0, r6, lsl #2]
   188f0:	andeq	r8, r1, r8, lsl r9
   188f4:	andeq	r8, r1, ip, lsr #18
   188f8:	andeq	r8, r1, ip, asr r9
   188fc:	andeq	r8, r1, r4, lsl #19
   18900:	andeq	r8, r1, ip, lsr #19
   18904:	ldrdeq	r8, [r1], -r4
   18908:	strdeq	r8, [r1], -ip
   1890c:	andeq	r8, r1, r4, lsr sl
   18910:	ldrdeq	r8, [r1], -r4
   18914:	andeq	r8, r1, ip, ror sl
   18918:	sub	sp, fp, #24
   1891c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18920:	movw	r1, #44307	; 0xad13
   18924:	movt	r1, #1
   18928:	b	18a84 <__assert_fail@plt+0x76e0>
   1892c:	movw	r1, #43988	; 0xabd4
   18930:	mov	r0, #0
   18934:	mov	r2, #5
   18938:	movt	r1, #1
   1893c:	bl	1114c <dcgettext@plt>
   18940:	ldr	r3, [r7]
   18944:	mov	r2, r0
   18948:	mov	r0, r8
   1894c:	mov	r1, #1
   18950:	sub	sp, fp, #24
   18954:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18958:	b	112a8 <__fprintf_chk@plt>
   1895c:	movw	r1, #44004	; 0xabe4
   18960:	mov	r0, #0
   18964:	mov	r2, #5
   18968:	movt	r1, #1
   1896c:	bl	1114c <dcgettext@plt>
   18970:	mov	r2, r0
   18974:	ldr	r3, [r7]
   18978:	ldr	r0, [r7, #4]
   1897c:	str	r0, [sp]
   18980:	b	18a70 <__assert_fail@plt+0x76cc>
   18984:	movw	r1, #44027	; 0xabfb
   18988:	mov	r0, #0
   1898c:	mov	r2, #5
   18990:	movt	r1, #1
   18994:	bl	1114c <dcgettext@plt>
   18998:	ldr	r3, [r7]
   1899c:	mov	r2, r0
   189a0:	ldmib	r7, {r0, r1}
   189a4:	stm	sp, {r0, r1}
   189a8:	b	18a70 <__assert_fail@plt+0x76cc>
   189ac:	movw	r1, #44055	; 0xac17
   189b0:	mov	r0, #0
   189b4:	mov	r2, #5
   189b8:	movt	r1, #1
   189bc:	bl	1114c <dcgettext@plt>
   189c0:	ldr	r3, [r7]
   189c4:	mov	r2, r0
   189c8:	ldmib	r7, {r0, r1, r7}
   189cc:	stm	sp, {r0, r1, r7}
   189d0:	b	18a70 <__assert_fail@plt+0x76cc>
   189d4:	movw	r1, #44087	; 0xac37
   189d8:	mov	r0, #0
   189dc:	mov	r2, #5
   189e0:	movt	r1, #1
   189e4:	bl	1114c <dcgettext@plt>
   189e8:	ldr	r3, [r7]
   189ec:	mov	r2, r0
   189f0:	ldmib	r7, {r0, r1, r6, r7}
   189f4:	stm	sp, {r0, r1, r6, r7}
   189f8:	b	18a70 <__assert_fail@plt+0x76cc>
   189fc:	movw	r1, #44123	; 0xac5b
   18a00:	mov	r0, #0
   18a04:	mov	r2, #5
   18a08:	movt	r1, #1
   18a0c:	bl	1114c <dcgettext@plt>
   18a10:	ldr	r3, [r7]
   18a14:	mov	r2, r0
   18a18:	ldmib	r7, {r0, r1, r6}
   18a1c:	ldr	r5, [r7, #16]
   18a20:	ldr	r7, [r7, #20]
   18a24:	stm	sp, {r0, r1, r6}
   18a28:	str	r5, [sp, #12]
   18a2c:	str	r7, [sp, #16]
   18a30:	b	18a70 <__assert_fail@plt+0x76cc>
   18a34:	movw	r1, #44163	; 0xac83
   18a38:	mov	r0, #0
   18a3c:	mov	r2, #5
   18a40:	movt	r1, #1
   18a44:	bl	1114c <dcgettext@plt>
   18a48:	ldr	r3, [r7]
   18a4c:	mov	r2, r0
   18a50:	ldmib	r7, {r0, r1, r6}
   18a54:	ldr	r5, [r7, #16]
   18a58:	ldr	r4, [r7, #20]
   18a5c:	ldr	r7, [r7, #24]
   18a60:	stm	sp, {r0, r1, r6}
   18a64:	str	r5, [sp, #12]
   18a68:	str	r4, [sp, #16]
   18a6c:	str	r7, [sp, #20]
   18a70:	mov	r0, r8
   18a74:	mov	r1, #1
   18a78:	b	18b24 <__assert_fail@plt+0x7780>
   18a7c:	movw	r1, #44255	; 0xacdf
   18a80:	movt	r1, #1
   18a84:	mov	r0, #0
   18a88:	mov	r2, #5
   18a8c:	bl	1114c <dcgettext@plt>
   18a90:	mov	ip, r0
   18a94:	ldr	r3, [r7]
   18a98:	ldr	r0, [r7, #4]
   18a9c:	ldr	r1, [r7, #8]
   18aa0:	ldr	r6, [r7, #12]
   18aa4:	ldr	r5, [r7, #16]
   18aa8:	ldr	r4, [r7, #20]
   18aac:	ldr	r2, [r7, #24]
   18ab0:	ldr	lr, [r7, #28]
   18ab4:	ldr	r7, [r7, #32]
   18ab8:	stm	sp, {r0, r1, r6}
   18abc:	str	r5, [sp, #12]
   18ac0:	str	r4, [sp, #16]
   18ac4:	str	r2, [sp, #20]
   18ac8:	str	lr, [sp, #24]
   18acc:	str	r7, [sp, #28]
   18ad0:	b	18b18 <__assert_fail@plt+0x7774>
   18ad4:	movw	r1, #44207	; 0xacaf
   18ad8:	mov	r0, #0
   18adc:	mov	r2, #5
   18ae0:	movt	r1, #1
   18ae4:	bl	1114c <dcgettext@plt>
   18ae8:	mov	ip, r0
   18aec:	ldr	r3, [r7]
   18af0:	ldmib	r7, {r0, r1, r6}
   18af4:	ldr	r5, [r7, #16]
   18af8:	ldr	r4, [r7, #20]
   18afc:	ldr	r2, [r7, #24]
   18b00:	ldr	r7, [r7, #28]
   18b04:	stm	sp, {r0, r1, r6}
   18b08:	str	r5, [sp, #12]
   18b0c:	str	r4, [sp, #16]
   18b10:	str	r2, [sp, #20]
   18b14:	str	r7, [sp, #24]
   18b18:	mov	r0, r8
   18b1c:	mov	r1, #1
   18b20:	mov	r2, ip
   18b24:	bl	112a8 <__fprintf_chk@plt>
   18b28:	sub	sp, fp, #24
   18b2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b30:	push	{r4, sl, fp, lr}
   18b34:	add	fp, sp, #8
   18b38:	sub	sp, sp, #8
   18b3c:	ldr	ip, [fp, #8]
   18b40:	mov	lr, #0
   18b44:	ldr	r4, [ip, lr, lsl #2]
   18b48:	add	lr, lr, #1
   18b4c:	cmp	r4, #0
   18b50:	bne	18b44 <__assert_fail@plt+0x77a0>
   18b54:	sub	r4, lr, #1
   18b58:	str	ip, [sp]
   18b5c:	str	r4, [sp, #4]
   18b60:	bl	187fc <__assert_fail@plt+0x7458>
   18b64:	sub	sp, fp, #8
   18b68:	pop	{r4, sl, fp, pc}
   18b6c:	push	{fp, lr}
   18b70:	mov	fp, sp
   18b74:	sub	sp, sp, #48	; 0x30
   18b78:	ldr	ip, [fp, #8]
   18b7c:	ldr	lr, [ip]
   18b80:	cmp	lr, #0
   18b84:	str	lr, [sp, #8]
   18b88:	beq	18c24 <__assert_fail@plt+0x7880>
   18b8c:	ldr	lr, [ip, #4]
   18b90:	cmp	lr, #0
   18b94:	str	lr, [sp, #12]
   18b98:	beq	18c2c <__assert_fail@plt+0x7888>
   18b9c:	ldr	lr, [ip, #8]
   18ba0:	cmp	lr, #0
   18ba4:	str	lr, [sp, #16]
   18ba8:	beq	18c34 <__assert_fail@plt+0x7890>
   18bac:	ldr	lr, [ip, #12]
   18bb0:	cmp	lr, #0
   18bb4:	str	lr, [sp, #20]
   18bb8:	beq	18c3c <__assert_fail@plt+0x7898>
   18bbc:	ldr	lr, [ip, #16]
   18bc0:	cmp	lr, #0
   18bc4:	str	lr, [sp, #24]
   18bc8:	beq	18c44 <__assert_fail@plt+0x78a0>
   18bcc:	ldr	lr, [ip, #20]
   18bd0:	cmp	lr, #0
   18bd4:	str	lr, [sp, #28]
   18bd8:	beq	18c4c <__assert_fail@plt+0x78a8>
   18bdc:	ldr	lr, [ip, #24]
   18be0:	cmp	lr, #0
   18be4:	str	lr, [sp, #32]
   18be8:	beq	18c54 <__assert_fail@plt+0x78b0>
   18bec:	ldr	lr, [ip, #28]
   18bf0:	cmp	lr, #0
   18bf4:	str	lr, [sp, #36]	; 0x24
   18bf8:	beq	18c5c <__assert_fail@plt+0x78b8>
   18bfc:	ldr	lr, [ip, #32]
   18c00:	cmp	lr, #0
   18c04:	str	lr, [sp, #40]	; 0x28
   18c08:	beq	18c64 <__assert_fail@plt+0x78c0>
   18c0c:	ldr	lr, [ip, #36]	; 0x24
   18c10:	mov	ip, #10
   18c14:	cmp	lr, #0
   18c18:	str	lr, [sp, #44]	; 0x2c
   18c1c:	movweq	ip, #9
   18c20:	b	18c68 <__assert_fail@plt+0x78c4>
   18c24:	mov	ip, #0
   18c28:	b	18c68 <__assert_fail@plt+0x78c4>
   18c2c:	mov	ip, #1
   18c30:	b	18c68 <__assert_fail@plt+0x78c4>
   18c34:	mov	ip, #2
   18c38:	b	18c68 <__assert_fail@plt+0x78c4>
   18c3c:	mov	ip, #3
   18c40:	b	18c68 <__assert_fail@plt+0x78c4>
   18c44:	mov	ip, #4
   18c48:	b	18c68 <__assert_fail@plt+0x78c4>
   18c4c:	mov	ip, #5
   18c50:	b	18c68 <__assert_fail@plt+0x78c4>
   18c54:	mov	ip, #6
   18c58:	b	18c68 <__assert_fail@plt+0x78c4>
   18c5c:	mov	ip, #7
   18c60:	b	18c68 <__assert_fail@plt+0x78c4>
   18c64:	mov	ip, #8
   18c68:	add	lr, sp, #8
   18c6c:	str	ip, [sp, #4]
   18c70:	str	lr, [sp]
   18c74:	bl	187fc <__assert_fail@plt+0x7458>
   18c78:	mov	sp, fp
   18c7c:	pop	{fp, pc}
   18c80:	push	{fp, lr}
   18c84:	mov	fp, sp
   18c88:	sub	sp, sp, #56	; 0x38
   18c8c:	add	ip, fp, #8
   18c90:	str	ip, [sp, #12]
   18c94:	ldr	lr, [fp, #8]
   18c98:	cmp	lr, #0
   18c9c:	str	lr, [sp, #16]
   18ca0:	beq	18d3c <__assert_fail@plt+0x7998>
   18ca4:	ldr	lr, [ip, #4]
   18ca8:	cmp	lr, #0
   18cac:	str	lr, [sp, #20]
   18cb0:	beq	18d44 <__assert_fail@plt+0x79a0>
   18cb4:	ldr	lr, [ip, #8]
   18cb8:	cmp	lr, #0
   18cbc:	str	lr, [sp, #24]
   18cc0:	beq	18d4c <__assert_fail@plt+0x79a8>
   18cc4:	ldr	lr, [ip, #12]
   18cc8:	cmp	lr, #0
   18ccc:	str	lr, [sp, #28]
   18cd0:	beq	18d54 <__assert_fail@plt+0x79b0>
   18cd4:	ldr	lr, [ip, #16]
   18cd8:	cmp	lr, #0
   18cdc:	str	lr, [sp, #32]
   18ce0:	beq	18d5c <__assert_fail@plt+0x79b8>
   18ce4:	ldr	lr, [ip, #20]
   18ce8:	cmp	lr, #0
   18cec:	str	lr, [sp, #36]	; 0x24
   18cf0:	beq	18d64 <__assert_fail@plt+0x79c0>
   18cf4:	ldr	lr, [ip, #24]
   18cf8:	cmp	lr, #0
   18cfc:	str	lr, [sp, #40]	; 0x28
   18d00:	beq	18d6c <__assert_fail@plt+0x79c8>
   18d04:	ldr	lr, [ip, #28]
   18d08:	cmp	lr, #0
   18d0c:	str	lr, [sp, #44]	; 0x2c
   18d10:	beq	18d74 <__assert_fail@plt+0x79d0>
   18d14:	ldr	lr, [ip, #32]
   18d18:	cmp	lr, #0
   18d1c:	str	lr, [sp, #48]	; 0x30
   18d20:	beq	18d7c <__assert_fail@plt+0x79d8>
   18d24:	ldr	lr, [ip, #36]	; 0x24
   18d28:	mov	ip, #10
   18d2c:	cmp	lr, #0
   18d30:	str	lr, [sp, #52]	; 0x34
   18d34:	movweq	ip, #9
   18d38:	b	18d80 <__assert_fail@plt+0x79dc>
   18d3c:	mov	ip, #0
   18d40:	b	18d80 <__assert_fail@plt+0x79dc>
   18d44:	mov	ip, #1
   18d48:	b	18d80 <__assert_fail@plt+0x79dc>
   18d4c:	mov	ip, #2
   18d50:	b	18d80 <__assert_fail@plt+0x79dc>
   18d54:	mov	ip, #3
   18d58:	b	18d80 <__assert_fail@plt+0x79dc>
   18d5c:	mov	ip, #4
   18d60:	b	18d80 <__assert_fail@plt+0x79dc>
   18d64:	mov	ip, #5
   18d68:	b	18d80 <__assert_fail@plt+0x79dc>
   18d6c:	mov	ip, #6
   18d70:	b	18d80 <__assert_fail@plt+0x79dc>
   18d74:	mov	ip, #7
   18d78:	b	18d80 <__assert_fail@plt+0x79dc>
   18d7c:	mov	ip, #8
   18d80:	add	lr, sp, #16
   18d84:	str	ip, [sp, #4]
   18d88:	str	lr, [sp]
   18d8c:	bl	187fc <__assert_fail@plt+0x7458>
   18d90:	mov	sp, fp
   18d94:	pop	{fp, pc}
   18d98:	push	{fp, lr}
   18d9c:	mov	fp, sp
   18da0:	movw	r0, #45436	; 0xb17c
   18da4:	movt	r0, #2
   18da8:	ldr	r1, [r0]
   18dac:	movw	r0, #40969	; 0xa009
   18db0:	movt	r0, #1
   18db4:	bl	110d4 <fputs_unlocked@plt>
   18db8:	movw	r1, #44367	; 0xad4f
   18dbc:	mov	r0, #0
   18dc0:	mov	r2, #5
   18dc4:	movt	r1, #1
   18dc8:	bl	1114c <dcgettext@plt>
   18dcc:	movw	r2, #44387	; 0xad63
   18dd0:	mov	r1, r0
   18dd4:	mov	r0, #1
   18dd8:	movt	r2, #1
   18ddc:	bl	11290 <__printf_chk@plt>
   18de0:	movw	r1, #44409	; 0xad79
   18de4:	mov	r0, #0
   18de8:	mov	r2, #5
   18dec:	movt	r1, #1
   18df0:	bl	1114c <dcgettext@plt>
   18df4:	movw	r2, #41705	; 0xa2e9
   18df8:	movw	r3, #41999	; 0xa40f
   18dfc:	mov	r1, r0
   18e00:	mov	r0, #1
   18e04:	movt	r2, #1
   18e08:	movt	r3, #1
   18e0c:	bl	11290 <__printf_chk@plt>
   18e10:	movw	r1, #44429	; 0xad8d
   18e14:	mov	r0, #0
   18e18:	mov	r2, #5
   18e1c:	movt	r1, #1
   18e20:	bl	1114c <dcgettext@plt>
   18e24:	movw	r2, #44468	; 0xadb4
   18e28:	mov	r1, r0
   18e2c:	mov	r0, #1
   18e30:	movt	r2, #1
   18e34:	pop	{fp, lr}
   18e38:	b	11290 <__printf_chk@plt>
   18e3c:	push	{r4, r5, r6, sl, fp, lr}
   18e40:	add	fp, sp, #16
   18e44:	mov	r4, r2
   18e48:	mov	r5, r1
   18e4c:	mov	r6, r0
   18e50:	bl	19ba8 <__assert_fail@plt+0x8804>
   18e54:	cmp	r0, #0
   18e58:	popne	{r4, r5, r6, sl, fp, pc}
   18e5c:	cmp	r6, #0
   18e60:	beq	18e74 <__assert_fail@plt+0x7ad0>
   18e64:	cmp	r5, #0
   18e68:	cmpne	r4, #0
   18e6c:	bne	18e74 <__assert_fail@plt+0x7ad0>
   18e70:	pop	{r4, r5, r6, sl, fp, pc}
   18e74:	bl	19414 <__assert_fail@plt+0x8070>
   18e78:	push	{r4, r5, r6, sl, fp, lr}
   18e7c:	add	fp, sp, #16
   18e80:	mov	r4, r2
   18e84:	mov	r5, r1
   18e88:	mov	r6, r0
   18e8c:	bl	19ba8 <__assert_fail@plt+0x8804>
   18e90:	cmp	r0, #0
   18e94:	popne	{r4, r5, r6, sl, fp, pc}
   18e98:	cmp	r6, #0
   18e9c:	beq	18eb0 <__assert_fail@plt+0x7b0c>
   18ea0:	cmp	r5, #0
   18ea4:	cmpne	r4, #0
   18ea8:	bne	18eb0 <__assert_fail@plt+0x7b0c>
   18eac:	pop	{r4, r5, r6, sl, fp, pc}
   18eb0:	bl	19414 <__assert_fail@plt+0x8070>
   18eb4:	push	{fp, lr}
   18eb8:	mov	fp, sp
   18ebc:	bl	19528 <__assert_fail@plt+0x8184>
   18ec0:	cmp	r0, #0
   18ec4:	popne	{fp, pc}
   18ec8:	bl	19414 <__assert_fail@plt+0x8070>
   18ecc:	push	{fp, lr}
   18ed0:	mov	fp, sp
   18ed4:	bl	19528 <__assert_fail@plt+0x8184>
   18ed8:	cmp	r0, #0
   18edc:	popne	{fp, pc}
   18ee0:	bl	19414 <__assert_fail@plt+0x8070>
   18ee4:	push	{fp, lr}
   18ee8:	mov	fp, sp
   18eec:	bl	19528 <__assert_fail@plt+0x8184>
   18ef0:	cmp	r0, #0
   18ef4:	popne	{fp, pc}
   18ef8:	bl	19414 <__assert_fail@plt+0x8070>
   18efc:	push	{r4, r5, fp, lr}
   18f00:	add	fp, sp, #8
   18f04:	mov	r4, r1
   18f08:	mov	r5, r0
   18f0c:	bl	19558 <__assert_fail@plt+0x81b4>
   18f10:	cmp	r0, #0
   18f14:	popne	{r4, r5, fp, pc}
   18f18:	cmp	r5, #0
   18f1c:	beq	18f2c <__assert_fail@plt+0x7b88>
   18f20:	cmp	r4, #0
   18f24:	bne	18f2c <__assert_fail@plt+0x7b88>
   18f28:	pop	{r4, r5, fp, pc}
   18f2c:	bl	19414 <__assert_fail@plt+0x8070>
   18f30:	push	{fp, lr}
   18f34:	mov	fp, sp
   18f38:	cmp	r1, #0
   18f3c:	orreq	r1, r1, #1
   18f40:	bl	19558 <__assert_fail@plt+0x81b4>
   18f44:	cmp	r0, #0
   18f48:	popne	{fp, pc}
   18f4c:	bl	19414 <__assert_fail@plt+0x8070>
   18f50:	push	{fp, lr}
   18f54:	mov	fp, sp
   18f58:	clz	r3, r2
   18f5c:	lsr	ip, r3, #5
   18f60:	clz	r3, r1
   18f64:	lsr	r3, r3, #5
   18f68:	orrs	r3, r3, ip
   18f6c:	movwne	r1, #1
   18f70:	movwne	r2, #1
   18f74:	bl	19ba8 <__assert_fail@plt+0x8804>
   18f78:	cmp	r0, #0
   18f7c:	popne	{fp, pc}
   18f80:	bl	19414 <__assert_fail@plt+0x8070>
   18f84:	push	{fp, lr}
   18f88:	mov	fp, sp
   18f8c:	mov	r2, r1
   18f90:	mov	r1, r0
   18f94:	mov	r0, #0
   18f98:	bl	19ba8 <__assert_fail@plt+0x8804>
   18f9c:	cmp	r0, #0
   18fa0:	popne	{fp, pc}
   18fa4:	bl	19414 <__assert_fail@plt+0x8070>
   18fa8:	push	{fp, lr}
   18fac:	mov	fp, sp
   18fb0:	mov	r2, r1
   18fb4:	mov	r1, r0
   18fb8:	clz	r0, r2
   18fbc:	clz	r3, r1
   18fc0:	lsr	r0, r0, #5
   18fc4:	lsr	r3, r3, #5
   18fc8:	orrs	r0, r3, r0
   18fcc:	movwne	r1, #1
   18fd0:	movwne	r2, #1
   18fd4:	mov	r0, #0
   18fd8:	bl	19ba8 <__assert_fail@plt+0x8804>
   18fdc:	cmp	r0, #0
   18fe0:	popne	{fp, pc}
   18fe4:	bl	19414 <__assert_fail@plt+0x8070>
   18fe8:	push	{r4, r5, r6, sl, fp, lr}
   18fec:	add	fp, sp, #16
   18ff0:	ldr	r5, [r1]
   18ff4:	mov	r4, r1
   18ff8:	mov	r6, r0
   18ffc:	cmp	r0, #0
   19000:	beq	19018 <__assert_fail@plt+0x7c74>
   19004:	mov	r0, #1
   19008:	add	r0, r0, r5, lsr #1
   1900c:	adds	r5, r5, r0
   19010:	bcc	19020 <__assert_fail@plt+0x7c7c>
   19014:	b	1905c <__assert_fail@plt+0x7cb8>
   19018:	cmp	r5, #0
   1901c:	movweq	r5, #64	; 0x40
   19020:	mov	r0, r6
   19024:	mov	r1, r5
   19028:	mov	r2, #1
   1902c:	bl	19ba8 <__assert_fail@plt+0x8804>
   19030:	cmp	r5, #0
   19034:	mov	r1, r5
   19038:	movwne	r1, #1
   1903c:	cmp	r0, #0
   19040:	bne	19054 <__assert_fail@plt+0x7cb0>
   19044:	clz	r2, r6
   19048:	lsr	r2, r2, #5
   1904c:	orrs	r1, r2, r1
   19050:	bne	1905c <__assert_fail@plt+0x7cb8>
   19054:	str	r5, [r4]
   19058:	pop	{r4, r5, r6, sl, fp, pc}
   1905c:	bl	19414 <__assert_fail@plt+0x8070>
   19060:	push	{r4, r5, r6, r7, fp, lr}
   19064:	add	fp, sp, #16
   19068:	ldr	r5, [r1]
   1906c:	mov	r6, r2
   19070:	mov	r4, r1
   19074:	mov	r7, r0
   19078:	cmp	r0, #0
   1907c:	beq	19094 <__assert_fail@plt+0x7cf0>
   19080:	mov	r0, #1
   19084:	add	r0, r0, r5, lsr #1
   19088:	adds	r5, r5, r0
   1908c:	bcc	190ac <__assert_fail@plt+0x7d08>
   19090:	b	190e0 <__assert_fail@plt+0x7d3c>
   19094:	cmp	r5, #0
   19098:	bne	190ac <__assert_fail@plt+0x7d08>
   1909c:	mov	r0, #64	; 0x40
   190a0:	cmp	r6, #64	; 0x40
   190a4:	udiv	r5, r0, r6
   190a8:	addhi	r5, r5, #1
   190ac:	mov	r0, r7
   190b0:	mov	r1, r5
   190b4:	mov	r2, r6
   190b8:	bl	19ba8 <__assert_fail@plt+0x8804>
   190bc:	cmp	r0, #0
   190c0:	bne	190d8 <__assert_fail@plt+0x7d34>
   190c4:	cmp	r7, #0
   190c8:	beq	190e0 <__assert_fail@plt+0x7d3c>
   190cc:	cmp	r6, #0
   190d0:	cmpne	r5, #0
   190d4:	bne	190e0 <__assert_fail@plt+0x7d3c>
   190d8:	str	r5, [r4]
   190dc:	pop	{r4, r5, r6, r7, fp, pc}
   190e0:	bl	19414 <__assert_fail@plt+0x8070>
   190e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   190e8:	add	fp, sp, #24
   190ec:	mov	r8, r1
   190f0:	ldr	r1, [r1]
   190f4:	mov	r5, r0
   190f8:	add	r0, r1, r1, asr #1
   190fc:	cmp	r0, r1
   19100:	mvnvs	r0, #-2147483648	; 0x80000000
   19104:	cmp	r0, r3
   19108:	mov	r7, r0
   1910c:	movgt	r7, r3
   19110:	cmn	r3, #1
   19114:	movle	r7, r0
   19118:	ldr	r0, [fp, #8]
   1911c:	cmn	r0, #1
   19120:	ble	19148 <__assert_fail@plt+0x7da4>
   19124:	cmp	r0, #0
   19128:	beq	1919c <__assert_fail@plt+0x7df8>
   1912c:	cmn	r7, #1
   19130:	ble	19170 <__assert_fail@plt+0x7dcc>
   19134:	mvn	r4, #-2147483648	; 0x80000000
   19138:	udiv	r6, r4, r0
   1913c:	cmp	r6, r7
   19140:	bge	1919c <__assert_fail@plt+0x7df8>
   19144:	b	191ac <__assert_fail@plt+0x7e08>
   19148:	cmn	r7, #1
   1914c:	ble	1918c <__assert_fail@plt+0x7de8>
   19150:	cmn	r0, #1
   19154:	beq	1919c <__assert_fail@plt+0x7df8>
   19158:	mov	r6, #-2147483648	; 0x80000000
   1915c:	mvn	r4, #-2147483648	; 0x80000000
   19160:	sdiv	r6, r6, r0
   19164:	cmp	r6, r7
   19168:	bge	1919c <__assert_fail@plt+0x7df8>
   1916c:	b	191ac <__assert_fail@plt+0x7e08>
   19170:	beq	1919c <__assert_fail@plt+0x7df8>
   19174:	mov	r6, #-2147483648	; 0x80000000
   19178:	mvn	r4, #-2147483648	; 0x80000000
   1917c:	sdiv	r6, r6, r7
   19180:	cmp	r6, r0
   19184:	bge	1919c <__assert_fail@plt+0x7df8>
   19188:	b	191ac <__assert_fail@plt+0x7e08>
   1918c:	mvn	r4, #-2147483648	; 0x80000000
   19190:	sdiv	r6, r4, r0
   19194:	cmp	r7, r6
   19198:	blt	191ac <__assert_fail@plt+0x7e08>
   1919c:	mul	r6, r7, r0
   191a0:	mov	r4, #64	; 0x40
   191a4:	cmp	r6, #63	; 0x3f
   191a8:	bgt	191b4 <__assert_fail@plt+0x7e10>
   191ac:	sdiv	r7, r4, r0
   191b0:	mul	r6, r7, r0
   191b4:	cmp	r5, #0
   191b8:	moveq	r4, #0
   191bc:	streq	r4, [r8]
   191c0:	sub	r4, r7, r1
   191c4:	cmp	r4, r2
   191c8:	bge	19274 <__assert_fail@plt+0x7ed0>
   191cc:	add	r7, r1, r2
   191d0:	mov	r6, #0
   191d4:	mov	r2, #0
   191d8:	cmp	r7, r3
   191dc:	movwgt	r6, #1
   191e0:	cmn	r3, #1
   191e4:	movwgt	r2, #1
   191e8:	cmp	r7, r1
   191ec:	bvs	192a8 <__assert_fail@plt+0x7f04>
   191f0:	ands	r1, r2, r6
   191f4:	bne	192a8 <__assert_fail@plt+0x7f04>
   191f8:	cmn	r0, #1
   191fc:	ble	19224 <__assert_fail@plt+0x7e80>
   19200:	cmp	r0, #0
   19204:	beq	19270 <__assert_fail@plt+0x7ecc>
   19208:	cmn	r7, #1
   1920c:	ble	19248 <__assert_fail@plt+0x7ea4>
   19210:	mvn	r1, #-2147483648	; 0x80000000
   19214:	udiv	r1, r1, r0
   19218:	cmp	r1, r7
   1921c:	bge	19270 <__assert_fail@plt+0x7ecc>
   19220:	b	192a8 <__assert_fail@plt+0x7f04>
   19224:	cmn	r7, #1
   19228:	ble	19260 <__assert_fail@plt+0x7ebc>
   1922c:	cmn	r0, #1
   19230:	beq	19270 <__assert_fail@plt+0x7ecc>
   19234:	mov	r1, #-2147483648	; 0x80000000
   19238:	sdiv	r1, r1, r0
   1923c:	cmp	r1, r7
   19240:	bge	19270 <__assert_fail@plt+0x7ecc>
   19244:	b	192a8 <__assert_fail@plt+0x7f04>
   19248:	beq	19270 <__assert_fail@plt+0x7ecc>
   1924c:	mov	r1, #-2147483648	; 0x80000000
   19250:	sdiv	r1, r1, r7
   19254:	cmp	r1, r0
   19258:	bge	19270 <__assert_fail@plt+0x7ecc>
   1925c:	b	192a8 <__assert_fail@plt+0x7f04>
   19260:	mvn	r1, #-2147483648	; 0x80000000
   19264:	sdiv	r1, r1, r0
   19268:	cmp	r7, r1
   1926c:	blt	192a8 <__assert_fail@plt+0x7f04>
   19270:	mul	r6, r7, r0
   19274:	mov	r0, r5
   19278:	mov	r1, r6
   1927c:	bl	19558 <__assert_fail@plt+0x81b4>
   19280:	cmp	r6, #0
   19284:	movwne	r6, #1
   19288:	cmp	r0, #0
   1928c:	bne	192a0 <__assert_fail@plt+0x7efc>
   19290:	clz	r1, r5
   19294:	lsr	r1, r1, #5
   19298:	orrs	r1, r1, r6
   1929c:	bne	192a8 <__assert_fail@plt+0x7f04>
   192a0:	str	r7, [r8]
   192a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192a8:	bl	19414 <__assert_fail@plt+0x8070>
   192ac:	push	{fp, lr}
   192b0:	mov	fp, sp
   192b4:	mov	r1, #1
   192b8:	bl	194d4 <__assert_fail@plt+0x8130>
   192bc:	cmp	r0, #0
   192c0:	popne	{fp, pc}
   192c4:	bl	19414 <__assert_fail@plt+0x8070>
   192c8:	push	{fp, lr}
   192cc:	mov	fp, sp
   192d0:	bl	194d4 <__assert_fail@plt+0x8130>
   192d4:	cmp	r0, #0
   192d8:	popne	{fp, pc}
   192dc:	bl	19414 <__assert_fail@plt+0x8070>
   192e0:	push	{fp, lr}
   192e4:	mov	fp, sp
   192e8:	mov	r1, #1
   192ec:	bl	194d4 <__assert_fail@plt+0x8130>
   192f0:	cmp	r0, #0
   192f4:	popne	{fp, pc}
   192f8:	bl	19414 <__assert_fail@plt+0x8070>
   192fc:	push	{fp, lr}
   19300:	mov	fp, sp
   19304:	bl	194d4 <__assert_fail@plt+0x8130>
   19308:	cmp	r0, #0
   1930c:	popne	{fp, pc}
   19310:	bl	19414 <__assert_fail@plt+0x8070>
   19314:	push	{r4, r5, r6, sl, fp, lr}
   19318:	add	fp, sp, #16
   1931c:	mov	r5, r0
   19320:	mov	r0, r1
   19324:	mov	r4, r1
   19328:	bl	19528 <__assert_fail@plt+0x8184>
   1932c:	cmp	r0, #0
   19330:	beq	1934c <__assert_fail@plt+0x7fa8>
   19334:	mov	r1, r5
   19338:	mov	r2, r4
   1933c:	mov	r6, r0
   19340:	bl	11128 <memcpy@plt>
   19344:	mov	r0, r6
   19348:	pop	{r4, r5, r6, sl, fp, pc}
   1934c:	bl	19414 <__assert_fail@plt+0x8070>
   19350:	push	{r4, r5, r6, sl, fp, lr}
   19354:	add	fp, sp, #16
   19358:	mov	r5, r0
   1935c:	mov	r0, r1
   19360:	mov	r4, r1
   19364:	bl	19528 <__assert_fail@plt+0x8184>
   19368:	cmp	r0, #0
   1936c:	beq	19388 <__assert_fail@plt+0x7fe4>
   19370:	mov	r1, r5
   19374:	mov	r2, r4
   19378:	mov	r6, r0
   1937c:	bl	11128 <memcpy@plt>
   19380:	mov	r0, r6
   19384:	pop	{r4, r5, r6, sl, fp, pc}
   19388:	bl	19414 <__assert_fail@plt+0x8070>
   1938c:	push	{r4, r5, r6, sl, fp, lr}
   19390:	add	fp, sp, #16
   19394:	mov	r5, r0
   19398:	add	r0, r1, #1
   1939c:	mov	r4, r1
   193a0:	bl	19528 <__assert_fail@plt+0x8184>
   193a4:	cmp	r0, #0
   193a8:	beq	193d0 <__assert_fail@plt+0x802c>
   193ac:	mov	r6, r0
   193b0:	mov	r0, #0
   193b4:	mov	r1, r5
   193b8:	mov	r2, r4
   193bc:	strb	r0, [r6, r4]
   193c0:	mov	r0, r6
   193c4:	bl	11128 <memcpy@plt>
   193c8:	mov	r0, r6
   193cc:	pop	{r4, r5, r6, sl, fp, pc}
   193d0:	bl	19414 <__assert_fail@plt+0x8070>
   193d4:	push	{r4, r5, r6, sl, fp, lr}
   193d8:	add	fp, sp, #16
   193dc:	mov	r4, r0
   193e0:	bl	1123c <strlen@plt>
   193e4:	add	r5, r0, #1
   193e8:	mov	r0, r5
   193ec:	bl	19528 <__assert_fail@plt+0x8184>
   193f0:	cmp	r0, #0
   193f4:	beq	19410 <__assert_fail@plt+0x806c>
   193f8:	mov	r1, r4
   193fc:	mov	r2, r5
   19400:	mov	r6, r0
   19404:	bl	11128 <memcpy@plt>
   19408:	mov	r0, r6
   1940c:	pop	{r4, r5, r6, sl, fp, pc}
   19410:	bl	19414 <__assert_fail@plt+0x8070>
   19414:	push	{fp, lr}
   19418:	mov	fp, sp
   1941c:	movw	r0, #45344	; 0xb120
   19420:	movw	r1, #44544	; 0xae00
   19424:	mov	r2, #5
   19428:	movt	r0, #2
   1942c:	movt	r1, #1
   19430:	ldr	r4, [r0]
   19434:	mov	r0, #0
   19438:	bl	1114c <dcgettext@plt>
   1943c:	movw	r2, #41878	; 0xa396
   19440:	mov	r3, r0
   19444:	mov	r0, r4
   19448:	mov	r1, #0
   1944c:	movt	r2, #1
   19450:	bl	111d0 <error@plt>
   19454:	bl	11374 <abort@plt>
   19458:	push	{fp, lr}
   1945c:	mov	fp, sp
   19460:	orr	r1, r1, #512	; 0x200
   19464:	bl	12c88 <__assert_fail@plt+0x18e4>
   19468:	cmp	r0, #0
   1946c:	popne	{fp, pc}
   19470:	bl	11260 <__errno_location@plt>
   19474:	ldr	r0, [r0]
   19478:	cmp	r0, #22
   1947c:	bne	194a0 <__assert_fail@plt+0x80fc>
   19480:	movw	r0, #44561	; 0xae11
   19484:	movw	r1, #44577	; 0xae21
   19488:	movw	r3, #44588	; 0xae2c
   1948c:	mov	r2, #41	; 0x29
   19490:	movt	r0, #1
   19494:	movt	r1, #1
   19498:	movt	r3, #1
   1949c:	bl	113a4 <__assert_fail@plt>
   194a0:	bl	19414 <__assert_fail@plt+0x8070>
   194a4:	ldr	r0, [r0, #48]	; 0x30
   194a8:	and	r0, r0, #17
   194ac:	cmp	r0, #16
   194b0:	moveq	r0, #1
   194b4:	bxeq	lr
   194b8:	cmp	r0, #17
   194bc:	movne	r0, #0
   194c0:	bxne	lr
   194c4:	ldr	r0, [r1, #48]	; 0x30
   194c8:	cmp	r0, #0
   194cc:	movwne	r0, #1
   194d0:	bx	lr
   194d4:	clz	r2, r1
   194d8:	clz	r3, r0
   194dc:	lsr	r2, r2, #5
   194e0:	lsr	r3, r3, #5
   194e4:	orrs	r2, r3, r2
   194e8:	movwne	r1, #1
   194ec:	movwne	r0, #1
   194f0:	cmp	r1, #0
   194f4:	beq	19524 <__assert_fail@plt+0x8180>
   194f8:	mvn	r2, #-2147483648	; 0x80000000
   194fc:	udiv	r2, r2, r1
   19500:	cmp	r2, r0
   19504:	bcs	19524 <__assert_fail@plt+0x8180>
   19508:	push	{fp, lr}
   1950c:	mov	fp, sp
   19510:	bl	11260 <__errno_location@plt>
   19514:	mov	r1, #12
   19518:	str	r1, [r0]
   1951c:	mov	r0, #0
   19520:	pop	{fp, pc}
   19524:	b	110c8 <calloc@plt>
   19528:	cmp	r0, #0
   1952c:	movweq	r0, #1
   19530:	cmn	r0, #1
   19534:	ble	1953c <__assert_fail@plt+0x8198>
   19538:	b	111e8 <malloc@plt>
   1953c:	push	{fp, lr}
   19540:	mov	fp, sp
   19544:	bl	11260 <__errno_location@plt>
   19548:	mov	r1, #12
   1954c:	str	r1, [r0]
   19550:	mov	r0, #0
   19554:	pop	{fp, pc}
   19558:	push	{fp, lr}
   1955c:	mov	fp, sp
   19560:	cmp	r0, #0
   19564:	beq	19580 <__assert_fail@plt+0x81dc>
   19568:	cmp	r1, #0
   1956c:	beq	1958c <__assert_fail@plt+0x81e8>
   19570:	cmn	r1, #1
   19574:	ble	19598 <__assert_fail@plt+0x81f4>
   19578:	pop	{fp, lr}
   1957c:	b	11158 <realloc@plt>
   19580:	mov	r0, r1
   19584:	pop	{fp, lr}
   19588:	b	19528 <__assert_fail@plt+0x8184>
   1958c:	bl	19a44 <__assert_fail@plt+0x86a0>
   19590:	mov	r0, #0
   19594:	pop	{fp, pc}
   19598:	bl	11260 <__errno_location@plt>
   1959c:	mov	r1, #12
   195a0:	str	r1, [r0]
   195a4:	mov	r0, #0
   195a8:	pop	{fp, pc}
   195ac:	push	{r4, r5, r6, sl, fp, lr}
   195b0:	add	fp, sp, #16
   195b4:	mov	r4, r0
   195b8:	bl	111b8 <__fpending@plt>
   195bc:	ldr	r6, [r4]
   195c0:	mov	r5, r0
   195c4:	mov	r0, r4
   195c8:	bl	19724 <__assert_fail@plt+0x8380>
   195cc:	tst	r6, #32
   195d0:	bne	19608 <__assert_fail@plt+0x8264>
   195d4:	cmp	r0, #0
   195d8:	mov	r4, r0
   195dc:	mvnne	r4, #0
   195e0:	cmp	r5, #0
   195e4:	bne	19614 <__assert_fail@plt+0x8270>
   195e8:	cmp	r0, #0
   195ec:	beq	19614 <__assert_fail@plt+0x8270>
   195f0:	bl	11260 <__errno_location@plt>
   195f4:	ldr	r0, [r0]
   195f8:	subs	r4, r0, #9
   195fc:	mvnne	r4, #0
   19600:	mov	r0, r4
   19604:	pop	{r4, r5, r6, sl, fp, pc}
   19608:	mvn	r4, #0
   1960c:	cmp	r0, #0
   19610:	beq	1961c <__assert_fail@plt+0x8278>
   19614:	mov	r0, r4
   19618:	pop	{r4, r5, r6, sl, fp, pc}
   1961c:	bl	11260 <__errno_location@plt>
   19620:	mov	r1, #0
   19624:	str	r1, [r0]
   19628:	mov	r0, r4
   1962c:	pop	{r4, r5, r6, sl, fp, pc}
   19630:	movw	r2, #62998	; 0xf616
   19634:	mov	r1, #0
   19638:	movt	r2, #149	; 0x95
   1963c:	str	r1, [r0, #16]
   19640:	str	r1, [r0, #20]
   19644:	str	r2, [r0, #24]
   19648:	bx	lr
   1964c:	push	{r4, r5, r6, r7, fp, lr}
   19650:	add	fp, sp, #16
   19654:	ldr	r2, [r0, #24]
   19658:	movw	r3, #62998	; 0xf616
   1965c:	movt	r3, #149	; 0x95
   19660:	cmp	r2, r3
   19664:	bne	19704 <__assert_fail@plt+0x8360>
   19668:	mov	r3, r0
   1966c:	ldr	r2, [r3, #16]!
   19670:	ldr	lr, [r3, #4]
   19674:	orrs	r5, r2, lr
   19678:	beq	196b0 <__assert_fail@plt+0x830c>
   1967c:	ldrd	r4, [r0]
   19680:	ldrd	r6, [r1, #96]	; 0x60
   19684:	eor	r7, r7, r5
   19688:	eor	r6, r6, r4
   1968c:	orrs	r7, r6, r7
   19690:	bne	196b0 <__assert_fail@plt+0x830c>
   19694:	ldrd	r4, [r0, #8]
   19698:	ldrd	r6, [r1]
   1969c:	mov	ip, #1
   196a0:	eor	r7, r7, r5
   196a4:	eor	r6, r6, r4
   196a8:	orrs	r7, r6, r7
   196ac:	beq	196d0 <__assert_fail@plt+0x832c>
   196b0:	adds	r4, r2, #1
   196b4:	mov	ip, #0
   196b8:	adc	r5, lr, #0
   196bc:	and	r2, r4, r2
   196c0:	strd	r4, [r3]
   196c4:	and	r3, r5, lr
   196c8:	orrs	r2, r2, r3
   196cc:	beq	196d8 <__assert_fail@plt+0x8334>
   196d0:	mov	r0, ip
   196d4:	pop	{r4, r5, r6, r7, fp, pc}
   196d8:	orrs	r2, r4, r5
   196dc:	moveq	ip, #1
   196e0:	moveq	r0, ip
   196e4:	popeq	{r4, r5, r6, r7, fp, pc}
   196e8:	ldrd	r2, [r1]
   196ec:	str	r3, [r0, #12]
   196f0:	str	r2, [r0, #8]
   196f4:	ldrd	r2, [r1, #96]	; 0x60
   196f8:	stm	r0, {r2, r3}
   196fc:	mov	r0, ip
   19700:	pop	{r4, r5, r6, r7, fp, pc}
   19704:	movw	r0, #44666	; 0xae7a
   19708:	movw	r1, #44690	; 0xae92
   1970c:	movw	r3, #44708	; 0xaea4
   19710:	mov	r2, #60	; 0x3c
   19714:	movt	r0, #1
   19718:	movt	r1, #1
   1971c:	movt	r3, #1
   19720:	bl	113a4 <__assert_fail@plt>
   19724:	push	{r4, r5, r6, sl, fp, lr}
   19728:	add	fp, sp, #16
   1972c:	sub	sp, sp, #8
   19730:	mov	r4, r0
   19734:	bl	1129c <fileno@plt>
   19738:	cmn	r0, #1
   1973c:	ble	197b0 <__assert_fail@plt+0x840c>
   19740:	mov	r0, r4
   19744:	bl	11200 <__freading@plt>
   19748:	cmp	r0, #0
   1974c:	beq	19778 <__assert_fail@plt+0x83d4>
   19750:	mov	r0, r4
   19754:	bl	1129c <fileno@plt>
   19758:	mov	r1, #1
   1975c:	mov	r2, #0
   19760:	mov	r3, #0
   19764:	str	r1, [sp]
   19768:	bl	111a0 <lseek64@plt>
   1976c:	and	r0, r0, r1
   19770:	cmn	r0, #1
   19774:	beq	197b0 <__assert_fail@plt+0x840c>
   19778:	mov	r0, r4
   1977c:	bl	199e8 <__assert_fail@plt+0x8644>
   19780:	cmp	r0, #0
   19784:	beq	197b0 <__assert_fail@plt+0x840c>
   19788:	bl	11260 <__errno_location@plt>
   1978c:	ldr	r6, [r0]
   19790:	mov	r5, r0
   19794:	mov	r0, r4
   19798:	bl	112b4 <fclose@plt>
   1979c:	cmp	r6, #0
   197a0:	strne	r6, [r5]
   197a4:	mvnne	r0, #0
   197a8:	sub	sp, fp, #16
   197ac:	pop	{r4, r5, r6, sl, fp, pc}
   197b0:	mov	r0, r4
   197b4:	sub	sp, fp, #16
   197b8:	pop	{r4, r5, r6, sl, fp, lr}
   197bc:	b	112b4 <fclose@plt>
   197c0:	sub	sp, sp, #8
   197c4:	push	{r4, r5, r6, r7, fp, lr}
   197c8:	add	fp, sp, #16
   197cc:	sub	sp, sp, #8
   197d0:	mov	r5, r0
   197d4:	add	r0, fp, #8
   197d8:	cmp	r1, #11
   197dc:	str	r3, [fp, #12]
   197e0:	str	r2, [fp, #8]
   197e4:	str	r0, [sp, #4]
   197e8:	bhi	19824 <__assert_fail@plt+0x8480>
   197ec:	mov	r0, #1
   197f0:	movw	r2, #1300	; 0x514
   197f4:	tst	r2, r0, lsl r1
   197f8:	bne	198e4 <__assert_fail@plt+0x8540>
   197fc:	movw	r2, #2570	; 0xa0a
   19800:	tst	r2, r0, lsl r1
   19804:	bne	1984c <__assert_fail@plt+0x84a8>
   19808:	cmp	r1, #0
   1980c:	bne	19824 <__assert_fail@plt+0x8480>
   19810:	ldr	r0, [sp, #4]
   19814:	add	r1, r0, #4
   19818:	str	r1, [sp, #4]
   1981c:	mov	r1, #0
   19820:	b	198f0 <__assert_fail@plt+0x854c>
   19824:	sub	r0, r1, #1024	; 0x400
   19828:	cmp	r0, #10
   1982c:	bhi	198e4 <__assert_fail@plt+0x8540>
   19830:	mov	r2, #1
   19834:	movw	r3, #645	; 0x285
   19838:	tst	r3, r2, lsl r0
   1983c:	bne	198e4 <__assert_fail@plt+0x8540>
   19840:	movw	r3, #1282	; 0x502
   19844:	tst	r3, r2, lsl r0
   19848:	beq	19858 <__assert_fail@plt+0x84b4>
   1984c:	mov	r0, r5
   19850:	bl	112cc <fcntl64@plt>
   19854:	b	198fc <__assert_fail@plt+0x8558>
   19858:	cmp	r0, #6
   1985c:	bne	198e4 <__assert_fail@plt+0x8540>
   19860:	ldr	r0, [sp, #4]
   19864:	movw	r7, #45800	; 0xb2e8
   19868:	movt	r7, #2
   1986c:	add	r1, r0, #4
   19870:	str	r1, [sp, #4]
   19874:	ldr	r6, [r0]
   19878:	ldr	r0, [r7]
   1987c:	cmp	r0, #0
   19880:	blt	19920 <__assert_fail@plt+0x857c>
   19884:	mov	r0, r5
   19888:	movw	r1, #1030	; 0x406
   1988c:	mov	r2, r6
   19890:	bl	112cc <fcntl64@plt>
   19894:	mov	r4, r0
   19898:	cmn	r0, #1
   1989c:	bgt	19914 <__assert_fail@plt+0x8570>
   198a0:	bl	11260 <__errno_location@plt>
   198a4:	ldr	r0, [r0]
   198a8:	cmp	r0, #22
   198ac:	bne	19914 <__assert_fail@plt+0x8570>
   198b0:	mov	r0, r5
   198b4:	mov	r1, #0
   198b8:	mov	r2, r6
   198bc:	bl	112cc <fcntl64@plt>
   198c0:	mov	r4, r0
   198c4:	cmp	r0, #0
   198c8:	blt	19900 <__assert_fail@plt+0x855c>
   198cc:	mvn	r0, #0
   198d0:	str	r0, [r7]
   198d4:	mov	r0, #1
   198d8:	cmp	r0, #0
   198dc:	bne	1994c <__assert_fail@plt+0x85a8>
   198e0:	b	19900 <__assert_fail@plt+0x855c>
   198e4:	ldr	r0, [sp, #4]
   198e8:	add	r2, r0, #4
   198ec:	str	r2, [sp, #4]
   198f0:	ldr	r2, [r0]
   198f4:	mov	r0, r5
   198f8:	bl	112cc <fcntl64@plt>
   198fc:	mov	r4, r0
   19900:	mov	r0, r4
   19904:	sub	sp, fp, #16
   19908:	pop	{r4, r5, r6, r7, fp, lr}
   1990c:	add	sp, sp, #8
   19910:	bx	lr
   19914:	mov	r0, #1
   19918:	str	r0, [r7]
   1991c:	b	19900 <__assert_fail@plt+0x855c>
   19920:	mov	r0, r5
   19924:	mov	r1, #0
   19928:	mov	r2, r6
   1992c:	bl	112cc <fcntl64@plt>
   19930:	mov	r4, r0
   19934:	ldr	r0, [r7]
   19938:	add	r0, r0, #1
   1993c:	clz	r0, r0
   19940:	lsr	r0, r0, #5
   19944:	cmp	r0, #0
   19948:	beq	19900 <__assert_fail@plt+0x855c>
   1994c:	cmp	r4, #0
   19950:	blt	19900 <__assert_fail@plt+0x855c>
   19954:	mov	r0, r4
   19958:	mov	r1, #1
   1995c:	bl	112cc <fcntl64@plt>
   19960:	cmp	r0, #0
   19964:	blt	19980 <__assert_fail@plt+0x85dc>
   19968:	orr	r2, r0, #1
   1996c:	mov	r0, r4
   19970:	mov	r1, #2
   19974:	bl	112cc <fcntl64@plt>
   19978:	cmn	r0, #1
   1997c:	bne	19900 <__assert_fail@plt+0x855c>
   19980:	bl	11260 <__errno_location@plt>
   19984:	ldr	r6, [r0]
   19988:	mov	r5, r0
   1998c:	mov	r0, r4
   19990:	bl	11380 <close@plt>
   19994:	str	r6, [r5]
   19998:	mvn	r4, #0
   1999c:	b	19900 <__assert_fail@plt+0x855c>
   199a0:	sub	sp, sp, #8
   199a4:	push	{fp, lr}
   199a8:	mov	fp, sp
   199ac:	sub	sp, sp, #8
   199b0:	str	r2, [fp, #8]
   199b4:	mov	r2, #0
   199b8:	tst	r1, #64	; 0x40
   199bc:	str	r3, [fp, #12]
   199c0:	addne	r2, fp, #8
   199c4:	orrne	r2, r2, #4
   199c8:	strne	r2, [sp, #4]
   199cc:	ldrne	r2, [fp, #8]
   199d0:	bl	111dc <open64@plt>
   199d4:	bl	187b8 <__assert_fail@plt+0x7414>
   199d8:	mov	sp, fp
   199dc:	pop	{fp, lr}
   199e0:	add	sp, sp, #8
   199e4:	bx	lr
   199e8:	push	{r4, sl, fp, lr}
   199ec:	add	fp, sp, #8
   199f0:	sub	sp, sp, #8
   199f4:	mov	r4, r0
   199f8:	cmp	r0, #0
   199fc:	beq	19a18 <__assert_fail@plt+0x8674>
   19a00:	mov	r0, r4
   19a04:	bl	11200 <__freading@plt>
   19a08:	cmp	r0, #0
   19a0c:	ldrbne	r0, [r4, #1]
   19a10:	tstne	r0, #1
   19a14:	bne	19a28 <__assert_fail@plt+0x8684>
   19a18:	mov	r0, r4
   19a1c:	sub	sp, fp, #8
   19a20:	pop	{r4, sl, fp, lr}
   19a24:	b	110f8 <fflush@plt>
   19a28:	mov	r0, #1
   19a2c:	mov	r2, #0
   19a30:	mov	r3, #0
   19a34:	str	r0, [sp]
   19a38:	mov	r0, r4
   19a3c:	bl	19a6c <__assert_fail@plt+0x86c8>
   19a40:	b	19a18 <__assert_fail@plt+0x8674>
   19a44:	push	{r4, r5, r6, sl, fp, lr}
   19a48:	add	fp, sp, #16
   19a4c:	mov	r4, r0
   19a50:	bl	11260 <__errno_location@plt>
   19a54:	ldr	r6, [r0]
   19a58:	mov	r5, r0
   19a5c:	mov	r0, r4
   19a60:	bl	11110 <free@plt>
   19a64:	str	r6, [r5]
   19a68:	pop	{r4, r5, r6, sl, fp, pc}
   19a6c:	push	{r4, r5, r6, r7, fp, lr}
   19a70:	add	fp, sp, #16
   19a74:	sub	sp, sp, #8
   19a78:	mov	r4, r0
   19a7c:	ldr	r0, [r0, #4]
   19a80:	mov	r5, r3
   19a84:	mov	r6, r2
   19a88:	ldr	r1, [r4, #8]
   19a8c:	cmp	r1, r0
   19a90:	bne	19aac <__assert_fail@plt+0x8708>
   19a94:	ldrd	r0, [r4, #16]
   19a98:	cmp	r1, r0
   19a9c:	bne	19aac <__assert_fail@plt+0x8708>
   19aa0:	ldr	r0, [r4, #36]	; 0x24
   19aa4:	cmp	r0, #0
   19aa8:	beq	19ac4 <__assert_fail@plt+0x8720>
   19aac:	mov	r0, r4
   19ab0:	mov	r2, r6
   19ab4:	mov	r3, r5
   19ab8:	sub	sp, fp, #16
   19abc:	pop	{r4, r5, r6, r7, fp, lr}
   19ac0:	b	112c0 <fseeko64@plt>
   19ac4:	ldr	r7, [fp, #8]
   19ac8:	mov	r0, r4
   19acc:	bl	1129c <fileno@plt>
   19ad0:	mov	r2, r6
   19ad4:	mov	r3, r5
   19ad8:	str	r7, [sp]
   19adc:	bl	111a0 <lseek64@plt>
   19ae0:	and	r2, r0, r1
   19ae4:	cmn	r2, #1
   19ae8:	mvneq	r0, #0
   19aec:	subeq	sp, fp, #16
   19af0:	popeq	{r4, r5, r6, r7, fp, pc}
   19af4:	strd	r0, [r4, #80]	; 0x50
   19af8:	ldr	r0, [r4]
   19afc:	bic	r0, r0, #16
   19b00:	str	r0, [r4]
   19b04:	mov	r0, #0
   19b08:	sub	sp, fp, #16
   19b0c:	pop	{r4, r5, r6, r7, fp, pc}
   19b10:	push	{fp, lr}
   19b14:	mov	fp, sp
   19b18:	mov	r0, #14
   19b1c:	bl	112f0 <nl_langinfo@plt>
   19b20:	movw	r1, #40970	; 0xa00a
   19b24:	cmp	r0, #0
   19b28:	movt	r1, #1
   19b2c:	movne	r1, r0
   19b30:	movw	r0, #44775	; 0xaee7
   19b34:	ldrb	r2, [r1]
   19b38:	movt	r0, #1
   19b3c:	cmp	r2, #0
   19b40:	movne	r0, r1
   19b44:	pop	{fp, pc}
   19b48:	push	{r4, r5, r6, r7, fp, lr}
   19b4c:	add	fp, sp, #16
   19b50:	sub	sp, sp, #8
   19b54:	add	r5, sp, #4
   19b58:	cmp	r0, #0
   19b5c:	mov	r7, r2
   19b60:	mov	r4, r1
   19b64:	movne	r5, r0
   19b68:	mov	r0, r5
   19b6c:	bl	111c4 <mbrtowc@plt>
   19b70:	mov	r6, r0
   19b74:	cmp	r7, #0
   19b78:	beq	19b9c <__assert_fail@plt+0x87f8>
   19b7c:	cmn	r6, #2
   19b80:	bcc	19b9c <__assert_fail@plt+0x87f8>
   19b84:	mov	r0, #0
   19b88:	bl	19bf0 <__assert_fail@plt+0x884c>
   19b8c:	cmp	r0, #0
   19b90:	ldrbeq	r0, [r4]
   19b94:	moveq	r6, #1
   19b98:	streq	r0, [r5]
   19b9c:	mov	r0, r6
   19ba0:	sub	sp, fp, #16
   19ba4:	pop	{r4, r5, r6, r7, fp, pc}
   19ba8:	cmp	r2, #0
   19bac:	beq	19bdc <__assert_fail@plt+0x8838>
   19bb0:	mvn	r3, #0
   19bb4:	udiv	r3, r3, r2
   19bb8:	cmp	r3, r1
   19bbc:	bcs	19bdc <__assert_fail@plt+0x8838>
   19bc0:	push	{fp, lr}
   19bc4:	mov	fp, sp
   19bc8:	bl	11260 <__errno_location@plt>
   19bcc:	mov	r1, #12
   19bd0:	str	r1, [r0]
   19bd4:	mov	r0, #0
   19bd8:	pop	{fp, pc}
   19bdc:	mul	r1, r2, r1
   19be0:	b	19558 <__assert_fail@plt+0x81b4>
   19be4:	mov	r1, #0
   19be8:	mov	r2, #3
   19bec:	b	197c0 <__assert_fail@plt+0x841c>
   19bf0:	push	{r4, sl, fp, lr}
   19bf4:	add	fp, sp, #8
   19bf8:	sub	sp, sp, #264	; 0x108
   19bfc:	add	r1, sp, #7
   19c00:	movw	r2, #257	; 0x101
   19c04:	bl	19c54 <__assert_fail@plt+0x88b0>
   19c08:	mov	r4, #0
   19c0c:	cmp	r0, #0
   19c10:	bne	19c48 <__assert_fail@plt+0x88a4>
   19c14:	movw	r1, #44781	; 0xaeed
   19c18:	add	r0, sp, #7
   19c1c:	movt	r1, #1
   19c20:	bl	110ec <strcmp@plt>
   19c24:	cmp	r0, #0
   19c28:	beq	19c48 <__assert_fail@plt+0x88a4>
   19c2c:	movw	r1, #44783	; 0xaeef
   19c30:	add	r0, sp, #7
   19c34:	movt	r1, #1
   19c38:	bl	110ec <strcmp@plt>
   19c3c:	mov	r4, r0
   19c40:	cmp	r0, #0
   19c44:	movwne	r4, #1
   19c48:	mov	r0, r4
   19c4c:	sub	sp, fp, #8
   19c50:	pop	{r4, sl, fp, pc}
   19c54:	push	{r4, r5, r6, r7, fp, lr}
   19c58:	add	fp, sp, #16
   19c5c:	mov	r4, r1
   19c60:	mov	r1, #0
   19c64:	mov	r6, r2
   19c68:	bl	112d8 <setlocale@plt>
   19c6c:	cmp	r0, #0
   19c70:	beq	19ca0 <__assert_fail@plt+0x88fc>
   19c74:	mov	r7, r0
   19c78:	bl	1123c <strlen@plt>
   19c7c:	cmp	r0, r6
   19c80:	bcs	19cc0 <__assert_fail@plt+0x891c>
   19c84:	add	r2, r0, #1
   19c88:	mov	r0, r4
   19c8c:	mov	r1, r7
   19c90:	bl	11128 <memcpy@plt>
   19c94:	mov	r5, #0
   19c98:	mov	r0, r5
   19c9c:	pop	{r4, r5, r6, r7, fp, pc}
   19ca0:	cmp	r6, #0
   19ca4:	mov	r5, #22
   19ca8:	movne	r0, #0
   19cac:	strbne	r0, [r4]
   19cb0:	movne	r0, r5
   19cb4:	popne	{r4, r5, r6, r7, fp, pc}
   19cb8:	mov	r0, r5
   19cbc:	pop	{r4, r5, r6, r7, fp, pc}
   19cc0:	mov	r5, #34	; 0x22
   19cc4:	cmp	r6, #0
   19cc8:	beq	19ce8 <__assert_fail@plt+0x8944>
   19ccc:	sub	r6, r6, #1
   19cd0:	mov	r0, r4
   19cd4:	mov	r1, r7
   19cd8:	mov	r2, r6
   19cdc:	bl	11128 <memcpy@plt>
   19ce0:	mov	r0, #0
   19ce4:	strb	r0, [r4, r6]
   19ce8:	mov	r0, r5
   19cec:	pop	{r4, r5, r6, r7, fp, pc}
   19cf0:	mov	r1, #0
   19cf4:	b	112d8 <setlocale@plt>
   19cf8:	cmp	r3, #0
   19cfc:	cmpeq	r2, #0
   19d00:	bne	19d18 <__assert_fail@plt+0x8974>
   19d04:	cmp	r1, #0
   19d08:	cmpeq	r0, #0
   19d0c:	mvnne	r1, #0
   19d10:	mvnne	r0, #0
   19d14:	b	19d34 <__assert_fail@plt+0x8990>
   19d18:	sub	sp, sp, #8
   19d1c:	push	{sp, lr}
   19d20:	bl	19d44 <__assert_fail@plt+0x89a0>
   19d24:	ldr	lr, [sp, #4]
   19d28:	add	sp, sp, #8
   19d2c:	pop	{r2, r3}
   19d30:	bx	lr
   19d34:	push	{r1, lr}
   19d38:	mov	r0, #8
   19d3c:	bl	110e0 <raise@plt>
   19d40:	pop	{r1, pc}
   19d44:	cmp	r1, r3
   19d48:	cmpeq	r0, r2
   19d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d50:	mov	r4, r0
   19d54:	movcc	r0, #0
   19d58:	mov	r5, r1
   19d5c:	ldr	lr, [sp, #36]	; 0x24
   19d60:	movcc	r1, r0
   19d64:	bcc	19e60 <__assert_fail@plt+0x8abc>
   19d68:	cmp	r3, #0
   19d6c:	clzeq	ip, r2
   19d70:	clzne	ip, r3
   19d74:	addeq	ip, ip, #32
   19d78:	cmp	r5, #0
   19d7c:	clzeq	r1, r4
   19d80:	addeq	r1, r1, #32
   19d84:	clzne	r1, r5
   19d88:	sub	ip, ip, r1
   19d8c:	sub	sl, ip, #32
   19d90:	lsl	r9, r3, ip
   19d94:	rsb	fp, ip, #32
   19d98:	orr	r9, r9, r2, lsl sl
   19d9c:	orr	r9, r9, r2, lsr fp
   19da0:	lsl	r8, r2, ip
   19da4:	cmp	r5, r9
   19da8:	cmpeq	r4, r8
   19dac:	movcc	r0, #0
   19db0:	movcc	r1, r0
   19db4:	bcc	19dd0 <__assert_fail@plt+0x8a2c>
   19db8:	mov	r0, #1
   19dbc:	subs	r4, r4, r8
   19dc0:	lsl	r1, r0, sl
   19dc4:	orr	r1, r1, r0, lsr fp
   19dc8:	lsl	r0, r0, ip
   19dcc:	sbc	r5, r5, r9
   19dd0:	cmp	ip, #0
   19dd4:	beq	19e60 <__assert_fail@plt+0x8abc>
   19dd8:	lsr	r6, r8, #1
   19ddc:	orr	r6, r6, r9, lsl #31
   19de0:	lsr	r7, r9, #1
   19de4:	mov	r2, ip
   19de8:	b	19e0c <__assert_fail@plt+0x8a68>
   19dec:	subs	r3, r4, r6
   19df0:	sbc	r8, r5, r7
   19df4:	adds	r3, r3, r3
   19df8:	adc	r8, r8, r8
   19dfc:	adds	r4, r3, #1
   19e00:	adc	r5, r8, #0
   19e04:	subs	r2, r2, #1
   19e08:	beq	19e28 <__assert_fail@plt+0x8a84>
   19e0c:	cmp	r5, r7
   19e10:	cmpeq	r4, r6
   19e14:	bcs	19dec <__assert_fail@plt+0x8a48>
   19e18:	adds	r4, r4, r4
   19e1c:	adc	r5, r5, r5
   19e20:	subs	r2, r2, #1
   19e24:	bne	19e0c <__assert_fail@plt+0x8a68>
   19e28:	lsr	r3, r4, ip
   19e2c:	orr	r3, r3, r5, lsl fp
   19e30:	lsr	r2, r5, ip
   19e34:	orr	r3, r3, r5, lsr sl
   19e38:	adds	r0, r0, r4
   19e3c:	mov	r4, r3
   19e40:	lsl	r3, r2, ip
   19e44:	orr	r3, r3, r4, lsl sl
   19e48:	lsl	ip, r4, ip
   19e4c:	orr	r3, r3, r4, lsr fp
   19e50:	adc	r1, r1, r5
   19e54:	subs	r0, r0, ip
   19e58:	mov	r5, r2
   19e5c:	sbc	r1, r1, r3
   19e60:	cmp	lr, #0
   19e64:	strdne	r4, [lr]
   19e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e70:	mov	r7, r0
   19e74:	ldr	r6, [pc, #72]	; 19ec4 <__assert_fail@plt+0x8b20>
   19e78:	ldr	r5, [pc, #72]	; 19ec8 <__assert_fail@plt+0x8b24>
   19e7c:	add	r6, pc, r6
   19e80:	add	r5, pc, r5
   19e84:	sub	r6, r6, r5
   19e88:	mov	r8, r1
   19e8c:	mov	r9, r2
   19e90:	bl	1109c <fstatfs64@plt-0x20>
   19e94:	asrs	r6, r6, #2
   19e98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e9c:	mov	r4, #0
   19ea0:	add	r4, r4, #1
   19ea4:	ldr	r3, [r5], #4
   19ea8:	mov	r2, r9
   19eac:	mov	r1, r8
   19eb0:	mov	r0, r7
   19eb4:	blx	r3
   19eb8:	cmp	r6, r4
   19ebc:	bne	19ea0 <__assert_fail@plt+0x8afc>
   19ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ec4:	andeq	r1, r1, r8, lsl #1
   19ec8:	andeq	r1, r1, r0, lsl #1
   19ecc:	bx	lr
   19ed0:	ldr	r3, [pc, #12]	; 19ee4 <__assert_fail@plt+0x8b40>
   19ed4:	mov	r1, #0
   19ed8:	add	r3, pc, r3
   19edc:	ldr	r2, [r3]
   19ee0:	b	11278 <__cxa_atexit@plt>
   19ee4:	andeq	r1, r1, r4, lsr r2

Disassembly of section .fini:

00019ee8 <.fini>:
   19ee8:	push	{r3, lr}
   19eec:	pop	{r3, pc}
