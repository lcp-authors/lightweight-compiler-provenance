
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010d9c <.init>:
   10d9c:	push	{r3, lr}
   10da0:	bl	11050 <__assert_fail@plt+0x48>
   10da4:	pop	{r3, pc}

Disassembly of section .plt:

00010da8 <calloc@plt-0x14>:
   10da8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dac:	ldr	lr, [pc, #4]	; 10db8 <calloc@plt-0x4>
   10db0:	add	lr, pc, lr
   10db4:	ldr	pc, [lr, #8]!
   10db8:	andeq	r6, r1, r8, asr #4

00010dbc <calloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #584]!	; 0x248

00010dc8 <fputs_unlocked@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #576]!	; 0x240

00010dd4 <raise@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #568]!	; 0x238

00010de0 <strcmp@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #560]!	; 0x230

00010dec <fflush@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #552]!	; 0x228

00010df8 <free@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #544]!	; 0x220

00010e04 <_exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #536]!	; 0x218

00010e10 <memcpy@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #528]!	; 0x210

00010e1c <__strtoull_internal@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #520]!	; 0x208

00010e28 <mbsinit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #512]!	; 0x200

00010e34 <__sched_cpucount@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e40 <dcgettext@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #496]!	; 0x1f0

00010e4c <sysconf@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #488]!	; 0x1e8

00010e58 <realloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #480]!	; 0x1e0

00010e64 <textdomain@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #472]!	; 0x1d8

00010e70 <iswprint@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #464]!	; 0x1d0

00010e7c <fwrite@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #456]!	; 0x1c8

00010e88 <lseek64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #448]!	; 0x1c0

00010e94 <__ctype_get_mb_cur_max@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea0 <__fpending@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #432]!	; 0x1b0

00010eac <mbrtowc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb8 <error@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec4 <getenv@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #408]!	; 0x198

00010ed0 <malloc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #400]!	; 0x190

00010edc <__libc_start_main@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #392]!	; 0x188

00010ee8 <__freading@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #384]!	; 0x180

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #376]!	; 0x178

00010f00 <getopt_long@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #368]!	; 0x170

00010f0c <__ctype_b_loc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #360]!	; 0x168

00010f18 <exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #352]!	; 0x160

00010f24 <bcmp@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #344]!	; 0x158

00010f30 <strtoul@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #336]!	; 0x150

00010f3c <strlen@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #328]!	; 0x148

00010f48 <strchr@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #320]!	; 0x140

00010f54 <__errno_location@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #312]!	; 0x138

00010f60 <__cxa_atexit@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #304]!	; 0x130

00010f6c <memset@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #296]!	; 0x128

00010f78 <__printf_chk@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #288]!	; 0x120

00010f84 <fileno@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #280]!	; 0x118

00010f90 <__fprintf_chk@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #272]!	; 0x110

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #264]!	; 0x108

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #256]!	; 0x100

00010fb4 <setlocale@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #248]!	; 0xf8

00010fc0 <strrchr@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #240]!	; 0xf0

00010fcc <nl_langinfo@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #232]!	; 0xe8

00010fd8 <sched_getaffinity@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #224]!	; 0xe0

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #216]!	; 0xd8

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #208]!	; 0xd0

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #200]!	; 0xc8

00011008 <__assert_fail@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #192]!	; 0xc0

Disassembly of section .text:

00011014 <.text>:
   11014:	mov	fp, #0
   11018:	mov	lr, #0
   1101c:	pop	{r1}		; (ldr r1, [sp], #4)
   11020:	mov	r2, sp
   11024:	push	{r2}		; (str r2, [sp, #-4]!)
   11028:	push	{r0}		; (str r0, [sp, #-4]!)
   1102c:	ldr	ip, [pc, #16]	; 11044 <__assert_fail@plt+0x3c>
   11030:	push	{ip}		; (str ip, [sp, #-4]!)
   11034:	ldr	r0, [pc, #12]	; 11048 <__assert_fail@plt+0x40>
   11038:	ldr	r3, [pc, #12]	; 1104c <__assert_fail@plt+0x44>
   1103c:	bl	10edc <__libc_start_main@plt>
   11040:	bl	10ffc <abort@plt>
   11044:	andeq	r5, r1, r0, lsl #13
   11048:	andeq	r1, r1, r4, ror #6
   1104c:	andeq	r5, r1, r0, lsr #12
   11050:	ldr	r3, [pc, #20]	; 1106c <__assert_fail@plt+0x64>
   11054:	ldr	r2, [pc, #20]	; 11070 <__assert_fail@plt+0x68>
   11058:	add	r3, pc, r3
   1105c:	ldr	r2, [r3, r2]
   11060:	cmp	r2, #0
   11064:	bxeq	lr
   11068:	b	10ef4 <__gmon_start__@plt>
   1106c:	andeq	r5, r1, r0, lsr #31
   11070:	ldrdeq	r0, [r0], -r4
   11074:	ldr	r0, [pc, #24]	; 11094 <__assert_fail@plt+0x8c>
   11078:	ldr	r3, [pc, #24]	; 11098 <__assert_fail@plt+0x90>
   1107c:	cmp	r3, r0
   11080:	bxeq	lr
   11084:	ldr	r3, [pc, #16]	; 1109c <__assert_fail@plt+0x94>
   11088:	cmp	r3, #0
   1108c:	bxeq	lr
   11090:	bx	r3
   11094:	andeq	r7, r2, r8, lsr #2
   11098:	andeq	r7, r2, r8, lsr #2
   1109c:	andeq	r0, r0, r0
   110a0:	ldr	r0, [pc, #36]	; 110cc <__assert_fail@plt+0xc4>
   110a4:	ldr	r1, [pc, #36]	; 110d0 <__assert_fail@plt+0xc8>
   110a8:	sub	r1, r1, r0
   110ac:	asr	r1, r1, #2
   110b0:	add	r1, r1, r1, lsr #31
   110b4:	asrs	r1, r1, #1
   110b8:	bxeq	lr
   110bc:	ldr	r3, [pc, #16]	; 110d4 <__assert_fail@plt+0xcc>
   110c0:	cmp	r3, #0
   110c4:	bxeq	lr
   110c8:	bx	r3
   110cc:	andeq	r7, r2, r8, lsr #2
   110d0:	andeq	r7, r2, r8, lsr #2
   110d4:	andeq	r0, r0, r0
   110d8:	push	{r4, lr}
   110dc:	ldr	r4, [pc, #24]	; 110fc <__assert_fail@plt+0xf4>
   110e0:	ldrb	r3, [r4]
   110e4:	cmp	r3, #0
   110e8:	popne	{r4, pc}
   110ec:	bl	11074 <__assert_fail@plt+0x6c>
   110f0:	mov	r3, #1
   110f4:	strb	r3, [r4]
   110f8:	pop	{r4, pc}
   110fc:	andeq	r7, r2, r4, asr #2
   11100:	b	110a0 <__assert_fail@plt+0x98>
   11104:	push	{fp, lr}
   11108:	mov	fp, sp
   1110c:	sub	sp, sp, #56	; 0x38
   11110:	mov	r4, r0
   11114:	cmp	r0, #0
   11118:	bne	11320 <__assert_fail@plt+0x318>
   1111c:	movw	r1, #22227	; 0x56d3
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e40 <dcgettext@plt>
   11130:	mov	r1, r0
   11134:	movw	r0, #29008	; 0x7150
   11138:	movt	r0, #2
   1113c:	ldr	r2, [r0]
   11140:	mov	r0, #1
   11144:	bl	10f78 <__printf_chk@plt>
   11148:	movw	r1, #22250	; 0x56ea
   1114c:	mov	r0, #0
   11150:	mov	r2, #5
   11154:	movt	r1, #1
   11158:	bl	10e40 <dcgettext@plt>
   1115c:	movw	r7, #28988	; 0x713c
   11160:	movt	r7, #2
   11164:	ldr	r1, [r7]
   11168:	bl	10dc8 <fputs_unlocked@plt>
   1116c:	movw	r1, #22378	; 0x576a
   11170:	mov	r0, #0
   11174:	mov	r2, #5
   11178:	movt	r1, #1
   1117c:	bl	10e40 <dcgettext@plt>
   11180:	ldr	r1, [r7]
   11184:	bl	10dc8 <fputs_unlocked@plt>
   11188:	movw	r1, #22495	; 0x57df
   1118c:	mov	r0, #0
   11190:	mov	r2, #5
   11194:	movt	r1, #1
   11198:	bl	10e40 <dcgettext@plt>
   1119c:	ldr	r1, [r7]
   111a0:	bl	10dc8 <fputs_unlocked@plt>
   111a4:	movw	r1, #22540	; 0x580c
   111a8:	mov	r0, #0
   111ac:	mov	r2, #5
   111b0:	movt	r1, #1
   111b4:	bl	10e40 <dcgettext@plt>
   111b8:	ldr	r1, [r7]
   111bc:	bl	10dc8 <fputs_unlocked@plt>
   111c0:	movw	r0, #23112	; 0x5a48
   111c4:	mov	r2, #48	; 0x30
   111c8:	mov	r6, sp
   111cc:	movw	r5, #22594	; 0x5842
   111d0:	movt	r0, #1
   111d4:	movt	r5, #1
   111d8:	add	r1, r0, #32
   111dc:	add	r3, r0, #16
   111e0:	vld1.64	{d18-d19}, [r0], r2
   111e4:	vld1.64	{d16-d17}, [r1]
   111e8:	vld1.64	{d20-d21}, [r3]
   111ec:	vldr	d22, [r0]
   111f0:	add	r1, r6, #32
   111f4:	add	r0, r6, #16
   111f8:	vst1.64	{d16-d17}, [r1]
   111fc:	movw	r1, #22693	; 0x58a5
   11200:	vst1.64	{d20-d21}, [r0]
   11204:	mov	r0, r6
   11208:	movt	r1, #1
   1120c:	vst1.64	{d18-d19}, [r0], r2
   11210:	vstr	d22, [r0]
   11214:	mov	r0, r5
   11218:	bl	10de0 <strcmp@plt>
   1121c:	cmp	r0, #0
   11220:	ldrne	r1, [r6, #8]!
   11224:	cmpne	r1, #0
   11228:	bne	11214 <__assert_fail@plt+0x20c>
   1122c:	movw	r1, #22788	; 0x5904
   11230:	ldr	r6, [r6, #4]
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10e40 <dcgettext@plt>
   11244:	movw	r2, #22624	; 0x5860
   11248:	movw	r3, #22811	; 0x591b
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	movt	r2, #1
   11258:	movt	r3, #1
   1125c:	bl	10f78 <__printf_chk@plt>
   11260:	cmp	r6, #0
   11264:	mov	r0, #5
   11268:	mov	r1, #0
   1126c:	moveq	r6, r5
   11270:	bl	10fb4 <setlocale@plt>
   11274:	cmp	r0, #0
   11278:	beq	112b0 <__assert_fail@plt+0x2a8>
   1127c:	movw	r1, #22851	; 0x5943
   11280:	mov	r2, #3
   11284:	movt	r1, #1
   11288:	bl	10ff0 <strncmp@plt>
   1128c:	cmp	r0, #0
   11290:	beq	112b0 <__assert_fail@plt+0x2a8>
   11294:	movw	r1, #22855	; 0x5947
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10e40 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10dc8 <fputs_unlocked@plt>
   112b0:	movw	r1, #22926	; 0x598e
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10e40 <dcgettext@plt>
   112c4:	movw	r2, #22811	; 0x591b
   112c8:	mov	r1, r0
   112cc:	mov	r0, #1
   112d0:	mov	r3, r5
   112d4:	movt	r2, #1
   112d8:	bl	10f78 <__printf_chk@plt>
   112dc:	movw	r1, #22953	; 0x59a9
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10e40 <dcgettext@plt>
   112f0:	mov	r1, r0
   112f4:	movw	r0, #22721	; 0x58c1
   112f8:	movw	r3, #22377	; 0x5769
   112fc:	cmp	r6, r5
   11300:	mov	r2, r6
   11304:	movt	r0, #1
   11308:	movt	r3, #1
   1130c:	moveq	r3, r0
   11310:	mov	r0, #1
   11314:	bl	10f78 <__printf_chk@plt>
   11318:	mov	r0, r4
   1131c:	bl	10f18 <exit@plt>
   11320:	movw	r0, #28984	; 0x7138
   11324:	movw	r1, #22188	; 0x56ac
   11328:	mov	r2, #5
   1132c:	movt	r0, #2
   11330:	movt	r1, #1
   11334:	ldr	r5, [r0]
   11338:	mov	r0, #0
   1133c:	bl	10e40 <dcgettext@plt>
   11340:	mov	r2, r0
   11344:	movw	r0, #29008	; 0x7150
   11348:	mov	r1, #1
   1134c:	movt	r0, #2
   11350:	ldr	r3, [r0]
   11354:	mov	r0, r5
   11358:	bl	10f90 <__fprintf_chk@plt>
   1135c:	mov	r0, r4
   11360:	bl	10f18 <exit@plt>
   11364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11368:	add	fp, sp, #28
   1136c:	sub	sp, sp, #20
   11370:	mov	r5, r0
   11374:	ldr	r0, [r1]
   11378:	mov	r4, r1
   1137c:	bl	11830 <__assert_fail@plt+0x828>
   11380:	movw	sl, #22377	; 0x5769
   11384:	mov	r0, #6
   11388:	movt	sl, #1
   1138c:	mov	r1, sl
   11390:	bl	10fb4 <setlocale@plt>
   11394:	movw	r6, #22628	; 0x5864
   11398:	movw	r1, #22600	; 0x5848
   1139c:	movt	r6, #1
   113a0:	movt	r1, #1
   113a4:	mov	r0, r6
   113a8:	bl	10fe4 <bindtextdomain@plt>
   113ac:	mov	r0, r6
   113b0:	bl	10e64 <textdomain@plt>
   113b4:	movw	r0, #5484	; 0x156c
   113b8:	movt	r0, #1
   113bc:	bl	15684 <__assert_fail@plt+0x467c>
   113c0:	movw	r8, #23032	; 0x59f8
   113c4:	mov	r7, #2
   113c8:	mov	r6, #0
   113cc:	movt	r8, #1
   113d0:	mov	r9, r7
   113d4:	mov	r7, #0
   113d8:	mov	r0, r5
   113dc:	mov	r1, r4
   113e0:	mov	r2, sl
   113e4:	mov	r3, r8
   113e8:	str	r7, [sp]
   113ec:	bl	10f00 <getopt_long@plt>
   113f0:	cmp	r0, #255	; 0xff
   113f4:	ble	11460 <__assert_fail@plt+0x458>
   113f8:	cmp	r0, #256	; 0x100
   113fc:	beq	113d0 <__assert_fail@plt+0x3c8>
   11400:	movw	r1, #257	; 0x101
   11404:	cmp	r0, r1
   11408:	bne	11544 <__assert_fail@plt+0x53c>
   1140c:	movw	r0, #28992	; 0x7140
   11410:	movw	r1, #22656	; 0x5880
   11414:	mov	r2, #5
   11418:	movt	r0, #2
   1141c:	movt	r1, #1
   11420:	ldr	r6, [r0]
   11424:	mov	r0, #0
   11428:	bl	10e40 <dcgettext@plt>
   1142c:	mvn	r1, #0
   11430:	mov	r2, #0
   11434:	mov	r3, #0
   11438:	str	r1, [sp]
   1143c:	mov	r1, #0
   11440:	stmib	sp, {r1, sl}
   11444:	str	r0, [sp, #12]
   11448:	mov	r0, r6
   1144c:	str	r1, [sp, #16]
   11450:	bl	142fc <__assert_fail@plt+0x32f4>
   11454:	mov	r6, r0
   11458:	mov	r7, r9
   1145c:	b	113d0 <__assert_fail@plt+0x3c8>
   11460:	cmn	r0, #1
   11464:	bne	114ac <__assert_fail@plt+0x4a4>
   11468:	movw	r7, #28976	; 0x7130
   1146c:	movt	r7, #2
   11470:	ldr	r0, [r7]
   11474:	cmp	r0, r5
   11478:	bne	1150c <__assert_fail@plt+0x504>
   1147c:	mov	r0, r9
   11480:	bl	11654 <__assert_fail@plt+0x64c>
   11484:	movw	r1, #22688	; 0x58a0
   11488:	subs	r2, r0, r6
   1148c:	mov	r0, #1
   11490:	movt	r1, #1
   11494:	movls	r2, r0
   11498:	mov	r0, #1
   1149c:	bl	10f78 <__printf_chk@plt>
   114a0:	mov	r0, #0
   114a4:	sub	sp, fp, #28
   114a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114ac:	cmn	r0, #3
   114b0:	bne	114fc <__assert_fail@plt+0x4f4>
   114b4:	movw	r0, #28896	; 0x70e0
   114b8:	movw	r2, #22638	; 0x586e
   114bc:	mov	r1, #0
   114c0:	movt	r0, #2
   114c4:	movt	r2, #1
   114c8:	str	r1, [sp, #4]
   114cc:	movw	r1, #22594	; 0x5842
   114d0:	movt	r1, #1
   114d4:	ldr	r3, [r0]
   114d8:	movw	r0, #28988	; 0x713c
   114dc:	str	r2, [sp]
   114e0:	movw	r2, #22624	; 0x5860
   114e4:	movt	r0, #2
   114e8:	movt	r2, #1
   114ec:	ldr	r0, [r0]
   114f0:	bl	13a54 <__assert_fail@plt+0x2a4c>
   114f4:	mov	r0, #0
   114f8:	bl	10f18 <exit@plt>
   114fc:	cmn	r0, #2
   11500:	bne	11544 <__assert_fail@plt+0x53c>
   11504:	mov	r0, #0
   11508:	bl	11104 <__assert_fail@plt+0xfc>
   1150c:	movw	r1, #22671	; 0x588f
   11510:	mov	r0, #0
   11514:	mov	r2, #5
   11518:	movt	r1, #1
   1151c:	bl	10e40 <dcgettext@plt>
   11520:	mov	r5, r0
   11524:	ldr	r0, [r7]
   11528:	ldr	r0, [r4, r0, lsl #2]
   1152c:	bl	13484 <__assert_fail@plt+0x247c>
   11530:	mov	r3, r0
   11534:	mov	r0, #0
   11538:	mov	r1, #0
   1153c:	mov	r2, r5
   11540:	bl	10eb8 <error@plt>
   11544:	mov	r0, #1
   11548:	bl	11104 <__assert_fail@plt+0xfc>
   1154c:	movw	r1, #29000	; 0x7148
   11550:	movt	r1, #2
   11554:	str	r0, [r1]
   11558:	bx	lr
   1155c:	movw	r1, #29004	; 0x714c
   11560:	movt	r1, #2
   11564:	strb	r0, [r1]
   11568:	bx	lr
   1156c:	push	{r4, r5, r6, sl, fp, lr}
   11570:	add	fp, sp, #16
   11574:	sub	sp, sp, #8
   11578:	movw	r0, #28988	; 0x713c
   1157c:	movt	r0, #2
   11580:	ldr	r0, [r0]
   11584:	bl	1507c <__assert_fail@plt+0x4074>
   11588:	cmp	r0, #0
   1158c:	beq	115b4 <__assert_fail@plt+0x5ac>
   11590:	movw	r0, #29004	; 0x714c
   11594:	movt	r0, #2
   11598:	ldrb	r0, [r0]
   1159c:	cmp	r0, #0
   115a0:	beq	115d4 <__assert_fail@plt+0x5cc>
   115a4:	bl	10f54 <__errno_location@plt>
   115a8:	ldr	r0, [r0]
   115ac:	cmp	r0, #32
   115b0:	bne	115d4 <__assert_fail@plt+0x5cc>
   115b4:	movw	r0, #28984	; 0x7138
   115b8:	movt	r0, #2
   115bc:	ldr	r0, [r0]
   115c0:	bl	1507c <__assert_fail@plt+0x4074>
   115c4:	cmp	r0, #0
   115c8:	subeq	sp, fp, #16
   115cc:	popeq	{r4, r5, r6, sl, fp, pc}
   115d0:	b	11644 <__assert_fail@plt+0x63c>
   115d4:	movw	r1, #23183	; 0x5a8f
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	movt	r1, #1
   115e4:	bl	10e40 <dcgettext@plt>
   115e8:	mov	r4, r0
   115ec:	movw	r0, #29000	; 0x7148
   115f0:	movt	r0, #2
   115f4:	ldr	r6, [r0]
   115f8:	bl	10f54 <__errno_location@plt>
   115fc:	ldr	r5, [r0]
   11600:	cmp	r6, #0
   11604:	bne	11620 <__assert_fail@plt+0x618>
   11608:	movw	r2, #23199	; 0x5a9f
   1160c:	mov	r0, #0
   11610:	mov	r1, r5
   11614:	mov	r3, r4
   11618:	movt	r2, #1
   1161c:	b	11640 <__assert_fail@plt+0x638>
   11620:	mov	r0, r6
   11624:	bl	130fc <__assert_fail@plt+0x20f4>
   11628:	movw	r2, #23195	; 0x5a9b
   1162c:	mov	r3, r0
   11630:	str	r4, [sp]
   11634:	mov	r0, #0
   11638:	mov	r1, r5
   1163c:	movt	r2, #1
   11640:	bl	10eb8 <error@plt>
   11644:	movw	r0, #28900	; 0x70e4
   11648:	movt	r0, #2
   1164c:	ldr	r0, [r0]
   11650:	bl	10e04 <_exit@plt>
   11654:	push	{r4, r5, fp, lr}
   11658:	add	fp, sp, #8
   1165c:	sub	sp, sp, #128	; 0x80
   11660:	mvn	r4, #0
   11664:	cmp	r0, #2
   11668:	bne	116b8 <__assert_fail@plt+0x6b0>
   1166c:	movw	r0, #23202	; 0x5aa2
   11670:	movt	r0, #1
   11674:	bl	10ec4 <getenv@plt>
   11678:	bl	11780 <__assert_fail@plt+0x778>
   1167c:	mov	r5, r0
   11680:	movw	r0, #23218	; 0x5ab2
   11684:	movt	r0, #1
   11688:	bl	10ec4 <getenv@plt>
   1168c:	bl	11780 <__assert_fail@plt+0x778>
   11690:	cmp	r0, #0
   11694:	mov	r1, r0
   11698:	mvneq	r1, #0
   1169c:	cmp	r5, r1
   116a0:	mov	r4, r1
   116a4:	movcc	r4, r5
   116a8:	cmp	r5, #0
   116ac:	bne	11774 <__assert_fail@plt+0x76c>
   116b0:	mov	r0, #1
   116b4:	mov	r4, r1
   116b8:	cmp	r0, #1
   116bc:	bne	116f0 <__assert_fail@plt+0x6e8>
   116c0:	mov	r2, sp
   116c4:	mov	r0, #0
   116c8:	mov	r1, #128	; 0x80
   116cc:	bl	10fd8 <sched_getaffinity@plt>
   116d0:	cmp	r0, #0
   116d4:	beq	11754 <__assert_fail@plt+0x74c>
   116d8:	mov	r0, #84	; 0x54
   116dc:	bl	10e4c <sysconf@plt>
   116e0:	cmp	r0, #0
   116e4:	mov	r5, r0
   116e8:	movle	r5, #1
   116ec:	b	1176c <__assert_fail@plt+0x764>
   116f0:	mov	r0, #83	; 0x53
   116f4:	bl	10e4c <sysconf@plt>
   116f8:	mov	r5, r0
   116fc:	sub	r0, r0, #1
   11700:	cmp	r0, #1
   11704:	bhi	1173c <__assert_fail@plt+0x734>
   11708:	mov	r2, sp
   1170c:	mov	r0, #0
   11710:	mov	r1, #128	; 0x80
   11714:	bl	10fd8 <sched_getaffinity@plt>
   11718:	cmp	r0, #0
   1171c:	bne	1176c <__assert_fail@plt+0x764>
   11720:	mov	r1, sp
   11724:	mov	r0, #128	; 0x80
   11728:	bl	10e34 <__sched_cpucount@plt>
   1172c:	cmp	r0, #0
   11730:	cmpne	r0, r5
   11734:	bls	1176c <__assert_fail@plt+0x764>
   11738:	b	11740 <__assert_fail@plt+0x738>
   1173c:	mov	r0, r5
   11740:	cmp	r0, #0
   11744:	mov	r5, r0
   11748:	bgt	1176c <__assert_fail@plt+0x764>
   1174c:	mov	r5, #1
   11750:	b	1176c <__assert_fail@plt+0x764>
   11754:	mov	r1, sp
   11758:	mov	r0, #128	; 0x80
   1175c:	bl	10e34 <__sched_cpucount@plt>
   11760:	cmp	r0, #0
   11764:	beq	116d8 <__assert_fail@plt+0x6d0>
   11768:	mov	r5, r0
   1176c:	cmp	r5, r4
   11770:	movcc	r4, r5
   11774:	mov	r0, r4
   11778:	sub	sp, fp, #8
   1177c:	pop	{r4, r5, fp, pc}
   11780:	push	{fp, lr}
   11784:	mov	fp, sp
   11788:	sub	sp, sp, #8
   1178c:	mov	r2, r0
   11790:	mov	r0, #0
   11794:	cmp	r2, #0
   11798:	bne	117a4 <__assert_fail@plt+0x79c>
   1179c:	b	11818 <__assert_fail@plt+0x810>
   117a0:	add	r2, r2, #1
   117a4:	ldrb	r1, [r2]
   117a8:	sub	r3, r1, #9
   117ac:	cmp	r3, #5
   117b0:	bcc	117a0 <__assert_fail@plt+0x798>
   117b4:	cmp	r1, #32
   117b8:	beq	117a0 <__assert_fail@plt+0x798>
   117bc:	sub	r1, r1, #48	; 0x30
   117c0:	cmp	r1, #9
   117c4:	bhi	11818 <__assert_fail@plt+0x810>
   117c8:	mov	r0, #0
   117cc:	add	r1, sp, #4
   117d0:	str	r0, [sp, #4]
   117d4:	mov	r0, r2
   117d8:	mov	r2, #10
   117dc:	bl	10f30 <strtoul@plt>
   117e0:	ldr	r1, [sp, #4]
   117e4:	cmp	r1, #0
   117e8:	bne	117f4 <__assert_fail@plt+0x7ec>
   117ec:	b	11824 <__assert_fail@plt+0x81c>
   117f0:	add	r1, r1, #1
   117f4:	ldrb	r2, [r1]
   117f8:	sub	r3, r2, #9
   117fc:	cmp	r3, #5
   11800:	bcc	117f0 <__assert_fail@plt+0x7e8>
   11804:	cmp	r2, #32
   11808:	beq	117f0 <__assert_fail@plt+0x7e8>
   1180c:	cmp	r2, #0
   11810:	cmpne	r2, #44	; 0x2c
   11814:	bne	11820 <__assert_fail@plt+0x818>
   11818:	mov	sp, fp
   1181c:	pop	{fp, pc}
   11820:	str	r1, [sp, #4]
   11824:	mov	r0, #0
   11828:	mov	sp, fp
   1182c:	pop	{fp, pc}
   11830:	push	{r4, r5, fp, lr}
   11834:	add	fp, sp, #8
   11838:	cmp	r0, #0
   1183c:	beq	118d0 <__assert_fail@plt+0x8c8>
   11840:	mov	r1, #47	; 0x2f
   11844:	mov	r4, r0
   11848:	bl	10fc0 <strrchr@plt>
   1184c:	cmp	r0, #0
   11850:	mov	r5, r4
   11854:	addne	r5, r0, #1
   11858:	sub	r0, r5, r4
   1185c:	cmp	r0, #7
   11860:	blt	118b4 <__assert_fail@plt+0x8ac>
   11864:	movw	r1, #23291	; 0x5afb
   11868:	sub	r0, r5, #7
   1186c:	mov	r2, #7
   11870:	movt	r1, #1
   11874:	bl	10ff0 <strncmp@plt>
   11878:	cmp	r0, #0
   1187c:	bne	118b4 <__assert_fail@plt+0x8ac>
   11880:	movw	r1, #23299	; 0x5b03
   11884:	mov	r0, r5
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	10ff0 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118a4 <__assert_fail@plt+0x89c>
   1189c:	mov	r4, r5
   118a0:	b	118b4 <__assert_fail@plt+0x8ac>
   118a4:	movw	r0, #28968	; 0x7128
   118a8:	add	r4, r5, #3
   118ac:	movt	r0, #2
   118b0:	str	r4, [r0]
   118b4:	movw	r0, #28972	; 0x712c
   118b8:	movt	r0, #2
   118bc:	str	r4, [r0]
   118c0:	movw	r0, #29008	; 0x7150
   118c4:	movt	r0, #2
   118c8:	str	r4, [r0]
   118cc:	pop	{r4, r5, fp, pc}
   118d0:	movw	r0, #28984	; 0x7138
   118d4:	mov	r1, #55	; 0x37
   118d8:	mov	r2, #1
   118dc:	movt	r0, #2
   118e0:	ldr	r3, [r0]
   118e4:	movw	r0, #23235	; 0x5ac3
   118e8:	movt	r0, #1
   118ec:	bl	10e7c <fwrite@plt>
   118f0:	bl	10ffc <abort@plt>
   118f4:	push	{r4, r5, r6, sl, fp, lr}
   118f8:	add	fp, sp, #16
   118fc:	mov	r4, r0
   11900:	movw	r0, #29016	; 0x7158
   11904:	movt	r0, #2
   11908:	cmp	r4, #0
   1190c:	moveq	r4, r0
   11910:	bl	10f54 <__errno_location@plt>
   11914:	ldr	r6, [r0]
   11918:	mov	r5, r0
   1191c:	mov	r0, r4
   11920:	mov	r1, #48	; 0x30
   11924:	bl	140e8 <__assert_fail@plt+0x30e0>
   11928:	str	r6, [r5]
   1192c:	pop	{r4, r5, r6, sl, fp, pc}
   11930:	movw	r1, #29016	; 0x7158
   11934:	cmp	r0, #0
   11938:	movt	r1, #2
   1193c:	movne	r1, r0
   11940:	ldr	r0, [r1]
   11944:	bx	lr
   11948:	movw	r2, #29016	; 0x7158
   1194c:	cmp	r0, #0
   11950:	movt	r2, #2
   11954:	movne	r2, r0
   11958:	str	r1, [r2]
   1195c:	bx	lr
   11960:	movw	r3, #29016	; 0x7158
   11964:	cmp	r0, #0
   11968:	and	r2, r2, #1
   1196c:	movt	r3, #2
   11970:	movne	r3, r0
   11974:	ubfx	r0, r1, #5, #3
   11978:	and	r1, r1, #31
   1197c:	add	ip, r3, r0, lsl #2
   11980:	mov	r0, #1
   11984:	ldr	r3, [ip, #8]
   11988:	and	r0, r0, r3, lsr r1
   1198c:	eor	r2, r0, r2
   11990:	eor	r1, r3, r2, lsl r1
   11994:	str	r1, [ip, #8]
   11998:	bx	lr
   1199c:	movw	r2, #29016	; 0x7158
   119a0:	cmp	r0, #0
   119a4:	movt	r2, #2
   119a8:	movne	r2, r0
   119ac:	ldr	r0, [r2, #4]
   119b0:	str	r1, [r2, #4]
   119b4:	bx	lr
   119b8:	push	{fp, lr}
   119bc:	mov	fp, sp
   119c0:	movw	r3, #29016	; 0x7158
   119c4:	cmp	r0, #0
   119c8:	movt	r3, #2
   119cc:	movne	r3, r0
   119d0:	cmp	r1, #0
   119d4:	mov	r0, #10
   119d8:	cmpne	r2, #0
   119dc:	str	r0, [r3]
   119e0:	bne	119e8 <__assert_fail@plt+0x9e0>
   119e4:	bl	10ffc <abort@plt>
   119e8:	str	r1, [r3, #40]	; 0x28
   119ec:	str	r2, [r3, #44]	; 0x2c
   119f0:	pop	{fp, pc}
   119f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f8:	add	fp, sp, #28
   119fc:	sub	sp, sp, #20
   11a00:	mov	r7, r0
   11a04:	ldr	r0, [fp, #8]
   11a08:	movw	r5, #29016	; 0x7158
   11a0c:	mov	r8, r3
   11a10:	mov	r9, r2
   11a14:	mov	sl, r1
   11a18:	movt	r5, #2
   11a1c:	cmp	r0, #0
   11a20:	movne	r5, r0
   11a24:	bl	10f54 <__errno_location@plt>
   11a28:	ldr	r2, [r5, #40]	; 0x28
   11a2c:	ldr	r3, [r5, #44]	; 0x2c
   11a30:	mov	r4, r0
   11a34:	ldm	r5, {r0, r1}
   11a38:	add	r5, r5, #8
   11a3c:	ldr	r6, [r4]
   11a40:	stm	sp, {r0, r1, r5}
   11a44:	mov	r0, r7
   11a48:	mov	r1, sl
   11a4c:	str	r2, [sp, #12]
   11a50:	str	r3, [sp, #16]
   11a54:	mov	r2, r9
   11a58:	mov	r3, r8
   11a5c:	bl	11a6c <__assert_fail@plt+0xa64>
   11a60:	str	r6, [r4]
   11a64:	sub	sp, fp, #28
   11a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a70:	add	fp, sp, #28
   11a74:	sub	sp, sp, #156	; 0x9c
   11a78:	mov	r5, r0
   11a7c:	add	r0, r2, #1
   11a80:	mov	r6, r1
   11a84:	mov	sl, r3
   11a88:	str	r2, [fp, #-80]	; 0xffffffb0
   11a8c:	str	r0, [sp, #72]	; 0x48
   11a90:	ldr	r0, [fp, #12]
   11a94:	and	r1, r0, #1
   11a98:	str	r1, [sp, #36]	; 0x24
   11a9c:	and	r1, r0, #4
   11aa0:	str	r1, [sp, #32]
   11aa4:	ubfx	r9, r0, #1, #1
   11aa8:	bl	10e94 <__ctype_get_mb_cur_max@plt>
   11aac:	str	r0, [sp, #40]	; 0x28
   11ab0:	ldr	r0, [fp, #24]
   11ab4:	ldr	r7, [fp, #8]
   11ab8:	mov	r1, #0
   11abc:	str	r5, [fp, #-84]	; 0xffffffac
   11ac0:	str	r1, [fp, #-56]	; 0xffffffc8
   11ac4:	mov	r1, #0
   11ac8:	str	r1, [sp, #60]	; 0x3c
   11acc:	mov	r1, #1
   11ad0:	str	r1, [fp, #-48]	; 0xffffffd0
   11ad4:	str	r0, [sp, #80]	; 0x50
   11ad8:	ldr	r0, [fp, #20]
   11adc:	str	r0, [sp, #76]	; 0x4c
   11ae0:	mov	r0, #0
   11ae4:	str	r0, [sp, #56]	; 0x38
   11ae8:	mov	r0, #0
   11aec:	str	r0, [fp, #-88]	; 0xffffffa8
   11af0:	mov	r0, #0
   11af4:	str	r0, [fp, #-72]	; 0xffffffb8
   11af8:	mov	r0, #0
   11afc:	cmp	r7, #10
   11b00:	bhi	12a94 <__assert_fail@plt+0x1a8c>
   11b04:	add	r1, pc, #24
   11b08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11b0c:	mov	r4, r6
   11b10:	mov	r8, #0
   11b14:	mov	r2, #1
   11b18:	mov	r3, #0
   11b1c:	mov	lr, sl
   11b20:	ldr	pc, [r1, r7, lsl #2]
   11b24:	andeq	r1, r1, r8, ror #23
   11b28:	andeq	r1, r1, ip, lsr ip
   11b2c:	strdeq	r1, [r1], -ip
   11b30:	andeq	r1, r1, r0, ror #23
   11b34:	andeq	r1, r1, r0, lsr ip
   11b38:	andeq	r1, r1, r4, ror #24
   11b3c:	andeq	r1, r1, ip, lsl #24
   11b40:	andeq	r1, r1, r8, ror #25
   11b44:	andeq	r1, r1, r0, asr fp
   11b48:	andeq	r1, r1, r0, asr fp
   11b4c:	andeq	r1, r1, r8, ror fp
   11b50:	movw	r0, #23381	; 0x5b55
   11b54:	mov	r1, r7
   11b58:	movt	r0, #1
   11b5c:	bl	1349c <__assert_fail@plt+0x2494>
   11b60:	str	r0, [sp, #76]	; 0x4c
   11b64:	movw	r0, #23383	; 0x5b57
   11b68:	mov	r1, r7
   11b6c:	movt	r0, #1
   11b70:	bl	1349c <__assert_fail@plt+0x2494>
   11b74:	str	r0, [sp, #80]	; 0x50
   11b78:	mov	r8, #0
   11b7c:	tst	r9, #1
   11b80:	bne	11bb8 <__assert_fail@plt+0xbb0>
   11b84:	ldr	r0, [sp, #76]	; 0x4c
   11b88:	ldrb	r0, [r0]
   11b8c:	cmp	r0, #0
   11b90:	beq	11bb8 <__assert_fail@plt+0xbb0>
   11b94:	ldr	r1, [sp, #76]	; 0x4c
   11b98:	mov	r8, #0
   11b9c:	add	r1, r1, #1
   11ba0:	cmp	r8, r4
   11ba4:	strbcc	r0, [r5, r8]
   11ba8:	ldrb	r0, [r1, r8]
   11bac:	add	r8, r8, #1
   11bb0:	cmp	r0, #0
   11bb4:	bne	11ba0 <__assert_fail@plt+0xb98>
   11bb8:	ldr	r6, [sp, #80]	; 0x50
   11bbc:	mov	r0, r6
   11bc0:	bl	10f3c <strlen@plt>
   11bc4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11bc8:	str	r0, [fp, #-72]	; 0xffffffb8
   11bcc:	str	r6, [fp, #-88]	; 0xffffffa8
   11bd0:	mov	r2, #1
   11bd4:	mov	r3, r9
   11bd8:	mov	lr, sl
   11bdc:	b	11ce8 <__assert_fail@plt+0xce0>
   11be0:	mov	r0, #1
   11be4:	b	11c3c <__assert_fail@plt+0xc34>
   11be8:	mov	r7, #0
   11bec:	mov	r8, #0
   11bf0:	mov	r2, r0
   11bf4:	mov	r3, #0
   11bf8:	b	11ce8 <__assert_fail@plt+0xce0>
   11bfc:	tst	r9, #1
   11c00:	bne	11c3c <__assert_fail@plt+0xc34>
   11c04:	mov	r2, r0
   11c08:	b	11c94 <__assert_fail@plt+0xc8c>
   11c0c:	mov	r0, #1
   11c10:	mov	r8, #0
   11c14:	mov	r7, #5
   11c18:	mov	r2, #1
   11c1c:	str	r0, [fp, #-72]	; 0xffffffb8
   11c20:	movw	r0, #23379	; 0x5b53
   11c24:	movt	r0, #1
   11c28:	str	r0, [fp, #-88]	; 0xffffffa8
   11c2c:	b	11c5c <__assert_fail@plt+0xc54>
   11c30:	mov	r2, #1
   11c34:	tst	r9, #1
   11c38:	beq	11c94 <__assert_fail@plt+0xc8c>
   11c3c:	mov	r1, #1
   11c40:	mov	r8, #0
   11c44:	mov	r7, #2
   11c48:	mov	r2, r0
   11c4c:	str	r1, [fp, #-72]	; 0xffffffb8
   11c50:	movw	r1, #23383	; 0x5b57
   11c54:	movt	r1, #1
   11c58:	str	r1, [fp, #-88]	; 0xffffffa8
   11c5c:	mov	r3, #1
   11c60:	b	11ce8 <__assert_fail@plt+0xce0>
   11c64:	tst	r9, #1
   11c68:	beq	11cb8 <__assert_fail@plt+0xcb0>
   11c6c:	mov	r0, #1
   11c70:	mov	r8, #0
   11c74:	mov	r2, #1
   11c78:	mov	r3, #1
   11c7c:	mov	r7, #5
   11c80:	str	r0, [fp, #-72]	; 0xffffffb8
   11c84:	movw	r0, #23379	; 0x5b53
   11c88:	movt	r0, #1
   11c8c:	str	r0, [fp, #-88]	; 0xffffffa8
   11c90:	b	11ce8 <__assert_fail@plt+0xce0>
   11c94:	cmp	r4, #0
   11c98:	mov	r8, #1
   11c9c:	mov	r3, #0
   11ca0:	mov	r7, #2
   11ca4:	movne	r0, #39	; 0x27
   11ca8:	strbne	r0, [r5]
   11cac:	movw	r0, #23383	; 0x5b57
   11cb0:	movt	r0, #1
   11cb4:	b	11cdc <__assert_fail@plt+0xcd4>
   11cb8:	cmp	r4, #0
   11cbc:	mov	r8, #1
   11cc0:	mov	r2, #1
   11cc4:	mov	r7, #5
   11cc8:	mov	r3, #0
   11ccc:	movne	r0, #34	; 0x22
   11cd0:	strbne	r0, [r5]
   11cd4:	movw	r0, #23379	; 0x5b53
   11cd8:	movt	r0, #1
   11cdc:	str	r0, [fp, #-88]	; 0xffffffa8
   11ce0:	mov	r0, #1
   11ce4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ce8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11cec:	eor	r6, r3, #1
   11cf0:	str	r7, [fp, #-68]	; 0xffffffbc
   11cf4:	str	r3, [fp, #-76]	; 0xffffffb4
   11cf8:	str	r2, [sp, #84]	; 0x54
   11cfc:	str	r6, [sp, #92]	; 0x5c
   11d00:	cmp	r0, #0
   11d04:	movwne	r0, #1
   11d08:	and	r1, r0, r3
   11d0c:	and	r1, r2, r1
   11d10:	str	r1, [sp, #48]	; 0x30
   11d14:	sub	r1, r7, #2
   11d18:	clz	r1, r1
   11d1c:	lsr	r1, r1, #5
   11d20:	and	r1, r1, r3
   11d24:	str	r1, [sp, #64]	; 0x40
   11d28:	subs	r1, r7, #2
   11d2c:	mov	r7, #0
   11d30:	movwne	r1, #1
   11d34:	orr	r6, r1, r6
   11d38:	and	r1, r1, r2
   11d3c:	and	r0, r0, r1
   11d40:	str	r6, [sp, #68]	; 0x44
   11d44:	str	r0, [fp, #-60]	; 0xffffffc4
   11d48:	orr	r0, r1, r3
   11d4c:	ldr	r1, [fp, #16]
   11d50:	eor	r0, r0, #1
   11d54:	clz	r1, r1
   11d58:	lsr	r1, r1, #5
   11d5c:	orr	r0, r1, r0
   11d60:	str	r0, [fp, #-64]	; 0xffffffc0
   11d64:	eor	r0, r2, #1
   11d68:	str	r0, [sp, #52]	; 0x34
   11d6c:	cmn	lr, #1
   11d70:	beq	11d80 <__assert_fail@plt+0xd78>
   11d74:	cmp	r7, lr
   11d78:	bne	11d8c <__assert_fail@plt+0xd84>
   11d7c:	b	128d4 <__assert_fail@plt+0x18cc>
   11d80:	ldrb	r0, [ip, r7]
   11d84:	cmp	r0, #0
   11d88:	beq	128dc <__assert_fail@plt+0x18d4>
   11d8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d90:	mov	sl, #0
   11d94:	cmp	r0, #0
   11d98:	beq	11dd0 <__assert_fail@plt+0xdc8>
   11d9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11da0:	add	r5, r7, r0
   11da4:	cmp	r0, #2
   11da8:	bcc	11dc4 <__assert_fail@plt+0xdbc>
   11dac:	cmn	lr, #1
   11db0:	bne	11dc4 <__assert_fail@plt+0xdbc>
   11db4:	mov	r0, ip
   11db8:	bl	10f3c <strlen@plt>
   11dbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11dc0:	mov	lr, r0
   11dc4:	cmp	r5, lr
   11dc8:	bls	11dd8 <__assert_fail@plt+0xdd0>
   11dcc:	ldr	r5, [fp, #-84]	; 0xffffffac
   11dd0:	mov	r0, #0
   11dd4:	b	11e24 <__assert_fail@plt+0xe1c>
   11dd8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11ddc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11de0:	add	r0, ip, r7
   11de4:	mov	r6, r4
   11de8:	mov	r4, lr
   11dec:	bl	10f24 <bcmp@plt>
   11df0:	ldr	r2, [sp, #92]	; 0x5c
   11df4:	cmp	r0, #0
   11df8:	ldr	r5, [fp, #-84]	; 0xffffffac
   11dfc:	mov	r1, r0
   11e00:	movwne	r1, #1
   11e04:	orr	r1, r1, r2
   11e08:	tst	r1, #1
   11e0c:	beq	12964 <__assert_fail@plt+0x195c>
   11e10:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11e14:	clz	r0, r0
   11e18:	mov	lr, r4
   11e1c:	mov	r4, r6
   11e20:	lsr	r0, r0, #5
   11e24:	str	r0, [fp, #-52]	; 0xffffffcc
   11e28:	ldrb	r6, [ip, r7]
   11e2c:	cmp	r6, #126	; 0x7e
   11e30:	bhi	12360 <__assert_fail@plt+0x1358>
   11e34:	add	r3, pc, #16
   11e38:	mov	r9, #1
   11e3c:	mov	r2, #110	; 0x6e
   11e40:	mov	r0, #97	; 0x61
   11e44:	mov	r1, #0
   11e48:	ldr	pc, [r3, r6, lsl #2]
   11e4c:	andeq	r2, r1, r0, asr #3
   11e50:	andeq	r2, r1, r0, ror #6
   11e54:	andeq	r2, r1, r0, ror #6
   11e58:	andeq	r2, r1, r0, ror #6
   11e5c:	andeq	r2, r1, r0, ror #6
   11e60:	andeq	r2, r1, r0, ror #6
   11e64:	andeq	r2, r1, r0, ror #6
   11e68:	andeq	r2, r1, ip, lsr r4
   11e6c:	andeq	r2, r1, r0, lsr #3
   11e70:	muleq	r1, r8, r1
   11e74:	andeq	r2, r1, ip, lsr #3
   11e78:	andeq	r2, r1, r8, asr #5
   11e7c:	muleq	r1, r0, r1
   11e80:	andeq	r2, r1, r8, lsr #3
   11e84:	andeq	r2, r1, r0, ror #6
   11e88:	andeq	r2, r1, r0, ror #6
   11e8c:	andeq	r2, r1, r0, ror #6
   11e90:	andeq	r2, r1, r0, ror #6
   11e94:	andeq	r2, r1, r0, ror #6
   11e98:	andeq	r2, r1, r0, ror #6
   11e9c:	andeq	r2, r1, r0, ror #6
   11ea0:	andeq	r2, r1, r0, ror #6
   11ea4:	andeq	r2, r1, r0, ror #6
   11ea8:	andeq	r2, r1, r0, ror #6
   11eac:	andeq	r2, r1, r0, ror #6
   11eb0:	andeq	r2, r1, r0, ror #6
   11eb4:	andeq	r2, r1, r0, ror #6
   11eb8:	andeq	r2, r1, r0, ror #6
   11ebc:	andeq	r2, r1, r0, ror #6
   11ec0:	andeq	r2, r1, r0, ror #6
   11ec4:	andeq	r2, r1, r0, ror #6
   11ec8:	andeq	r2, r1, r0, ror #6
   11ecc:	andeq	r2, r1, r4, asr #2
   11ed0:	andeq	r2, r1, r8, asr #2
   11ed4:	andeq	r2, r1, r8, asr #2
   11ed8:	andeq	r2, r1, r0, lsr r1
   11edc:	andeq	r2, r1, r8, asr #2
   11ee0:	andeq	r2, r1, r8, asr #32
   11ee4:	andeq	r2, r1, r8, asr #2
   11ee8:	ldrdeq	r2, [r1], -r0
   11eec:	andeq	r2, r1, r8, asr #2
   11ef0:	andeq	r2, r1, r8, asr #2
   11ef4:	andeq	r2, r1, r8, asr #2
   11ef8:	andeq	r2, r1, r8, asr #32
   11efc:	andeq	r2, r1, r8, asr #32
   11f00:	andeq	r2, r1, r8, asr #32
   11f04:	andeq	r2, r1, r8, asr #32
   11f08:	andeq	r2, r1, r8, asr #32
   11f0c:	andeq	r2, r1, r8, asr #32
   11f10:	andeq	r2, r1, r8, asr #32
   11f14:	andeq	r2, r1, r8, asr #32
   11f18:	andeq	r2, r1, r8, asr #32
   11f1c:	andeq	r2, r1, r8, asr #32
   11f20:	andeq	r2, r1, r8, asr #32
   11f24:	andeq	r2, r1, r8, asr #32
   11f28:	andeq	r2, r1, r8, asr #32
   11f2c:	andeq	r2, r1, r8, asr #32
   11f30:	andeq	r2, r1, r8, asr #32
   11f34:	andeq	r2, r1, r8, asr #32
   11f38:	andeq	r2, r1, r8, asr #2
   11f3c:	andeq	r2, r1, r8, asr #2
   11f40:	andeq	r2, r1, r8, asr #2
   11f44:	andeq	r2, r1, r8, asr #2
   11f48:	muleq	r1, r8, r2
   11f4c:	andeq	r2, r1, r0, ror #6
   11f50:	andeq	r2, r1, r8, asr #32
   11f54:	andeq	r2, r1, r8, asr #32
   11f58:	andeq	r2, r1, r8, asr #32
   11f5c:	andeq	r2, r1, r8, asr #32
   11f60:	andeq	r2, r1, r8, asr #32
   11f64:	andeq	r2, r1, r8, asr #32
   11f68:	andeq	r2, r1, r8, asr #32
   11f6c:	andeq	r2, r1, r8, asr #32
   11f70:	andeq	r2, r1, r8, asr #32
   11f74:	andeq	r2, r1, r8, asr #32
   11f78:	andeq	r2, r1, r8, asr #32
   11f7c:	andeq	r2, r1, r8, asr #32
   11f80:	andeq	r2, r1, r8, asr #32
   11f84:	andeq	r2, r1, r8, asr #32
   11f88:	andeq	r2, r1, r8, asr #32
   11f8c:	andeq	r2, r1, r8, asr #32
   11f90:	andeq	r2, r1, r8, asr #32
   11f94:	andeq	r2, r1, r8, asr #32
   11f98:	andeq	r2, r1, r8, asr #32
   11f9c:	andeq	r2, r1, r8, asr #32
   11fa0:	andeq	r2, r1, r8, asr #32
   11fa4:	andeq	r2, r1, r8, asr #32
   11fa8:	andeq	r2, r1, r8, asr #32
   11fac:	andeq	r2, r1, r8, asr #32
   11fb0:	andeq	r2, r1, r8, asr #32
   11fb4:	andeq	r2, r1, r8, asr #32
   11fb8:	andeq	r2, r1, r8, asr #2
   11fbc:	andeq	r2, r1, r0, ror r1
   11fc0:	andeq	r2, r1, r8, asr #32
   11fc4:	andeq	r2, r1, r8, asr #2
   11fc8:	andeq	r2, r1, r8, asr #32
   11fcc:	andeq	r2, r1, r8, asr #2
   11fd0:	andeq	r2, r1, r8, asr #32
   11fd4:	andeq	r2, r1, r8, asr #32
   11fd8:	andeq	r2, r1, r8, asr #32
   11fdc:	andeq	r2, r1, r8, asr #32
   11fe0:	andeq	r2, r1, r8, asr #32
   11fe4:	andeq	r2, r1, r8, asr #32
   11fe8:	andeq	r2, r1, r8, asr #32
   11fec:	andeq	r2, r1, r8, asr #32
   11ff0:	andeq	r2, r1, r8, asr #32
   11ff4:	andeq	r2, r1, r8, asr #32
   11ff8:	andeq	r2, r1, r8, asr #32
   11ffc:	andeq	r2, r1, r8, asr #32
   12000:	andeq	r2, r1, r8, asr #32
   12004:	andeq	r2, r1, r8, asr #32
   12008:	andeq	r2, r1, r8, asr #32
   1200c:	andeq	r2, r1, r8, asr #32
   12010:	andeq	r2, r1, r8, asr #32
   12014:	andeq	r2, r1, r8, asr #32
   12018:	andeq	r2, r1, r8, asr #32
   1201c:	andeq	r2, r1, r8, asr #32
   12020:	andeq	r2, r1, r8, asr #32
   12024:	andeq	r2, r1, r8, asr #32
   12028:	andeq	r2, r1, r8, asr #32
   1202c:	andeq	r2, r1, r8, asr #32
   12030:	andeq	r2, r1, r8, asr #32
   12034:	andeq	r2, r1, r8, asr #32
   12038:	andeq	r2, r1, r4, lsl #2
   1203c:	andeq	r2, r1, r8, asr #2
   12040:	andeq	r2, r1, r4, lsl #2
   12044:	andeq	r2, r1, r0, lsr r1
   12048:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1204c:	tst	r0, #1
   12050:	bne	1207c <__assert_fail@plt+0x1074>
   12054:	ldr	r1, [fp, #16]
   12058:	ubfx	r0, r6, #5, #3
   1205c:	mov	r2, #1
   12060:	ldr	r0, [r1, r0, lsl #2]
   12064:	and	r1, r6, #31
   12068:	tst	r0, r2, lsl r1
   1206c:	beq	1207c <__assert_fail@plt+0x1074>
   12070:	mov	r0, r6
   12074:	mov	r1, r9
   12078:	b	12090 <__assert_fail@plt+0x1088>
   1207c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12080:	mov	r1, r9
   12084:	cmp	r0, #0
   12088:	mov	r0, r6
   1208c:	beq	123d0 <__assert_fail@plt+0x13c8>
   12090:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12094:	tst	r2, #1
   12098:	bne	129a0 <__assert_fail@plt+0x1998>
   1209c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   120a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   120a4:	subs	r2, r2, #2
   120a8:	movwne	r2, #1
   120ac:	orr	r2, r2, r3
   120b0:	tst	r2, #1
   120b4:	bne	120f0 <__assert_fail@plt+0x10e8>
   120b8:	cmp	r8, r4
   120bc:	movcc	r2, #39	; 0x27
   120c0:	strbcc	r2, [r5, r8]
   120c4:	add	r2, r8, #1
   120c8:	cmp	r2, r4
   120cc:	movcc	r3, #36	; 0x24
   120d0:	strbcc	r3, [r5, r2]
   120d4:	add	r2, r8, #2
   120d8:	add	r8, r8, #3
   120dc:	cmp	r2, r4
   120e0:	movcc	r3, #39	; 0x27
   120e4:	strbcc	r3, [r5, r2]
   120e8:	mov	r2, #1
   120ec:	str	r2, [fp, #-56]	; 0xffffffc8
   120f0:	cmp	r8, r4
   120f4:	movcc	r2, #92	; 0x5c
   120f8:	strbcc	r2, [r5, r8]
   120fc:	add	r8, r8, #1
   12100:	b	12414 <__assert_fail@plt+0x140c>
   12104:	cmp	lr, #1
   12108:	beq	12130 <__assert_fail@plt+0x1128>
   1210c:	mov	r9, #0
   12110:	cmn	lr, #1
   12114:	bne	1213c <__assert_fail@plt+0x1134>
   12118:	ldrb	r0, [ip, #1]
   1211c:	cmp	r0, #0
   12120:	beq	12130 <__assert_fail@plt+0x1128>
   12124:	mvn	lr, #0
   12128:	mov	sl, #0
   1212c:	b	12048 <__assert_fail@plt+0x1040>
   12130:	mov	r9, #0
   12134:	cmp	r7, #0
   12138:	beq	12144 <__assert_fail@plt+0x113c>
   1213c:	mov	sl, #0
   12140:	b	12048 <__assert_fail@plt+0x1040>
   12144:	mov	r1, #1
   12148:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1214c:	cmp	r0, #2
   12150:	bne	12168 <__assert_fail@plt+0x1160>
   12154:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12158:	mov	r9, r1
   1215c:	tst	r0, #1
   12160:	beq	12048 <__assert_fail@plt+0x1040>
   12164:	b	129a0 <__assert_fail@plt+0x1998>
   12168:	mov	r9, r1
   1216c:	b	12048 <__assert_fail@plt+0x1040>
   12170:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12174:	cmp	r0, #2
   12178:	bne	123b4 <__assert_fail@plt+0x13ac>
   1217c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12180:	tst	r0, #1
   12184:	bne	129a0 <__assert_fail@plt+0x1998>
   12188:	mov	sl, #0
   1218c:	b	123c8 <__assert_fail@plt+0x13c0>
   12190:	mov	r0, #102	; 0x66
   12194:	b	1243c <__assert_fail@plt+0x1434>
   12198:	mov	r2, #116	; 0x74
   1219c:	b	121ac <__assert_fail@plt+0x11a4>
   121a0:	mov	r0, #98	; 0x62
   121a4:	b	1243c <__assert_fail@plt+0x1434>
   121a8:	mov	r2, #114	; 0x72
   121ac:	ldr	r0, [sp, #68]	; 0x44
   121b0:	tst	r0, #1
   121b4:	mov	r0, r2
   121b8:	bne	1243c <__assert_fail@plt+0x1434>
   121bc:	b	129a0 <__assert_fail@plt+0x1998>
   121c0:	ldr	r0, [sp, #84]	; 0x54
   121c4:	tst	r0, #1
   121c8:	beq	12458 <__assert_fail@plt+0x1450>
   121cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121d0:	tst	r0, #1
   121d4:	bne	12a8c <__assert_fail@plt+0x1a84>
   121d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   121e0:	subs	r0, r0, #2
   121e4:	movwne	r0, #1
   121e8:	orr	r0, r0, r1
   121ec:	tst	r0, #1
   121f0:	bne	1222c <__assert_fail@plt+0x1224>
   121f4:	cmp	r8, r4
   121f8:	movcc	r0, #39	; 0x27
   121fc:	strbcc	r0, [r5, r8]
   12200:	add	r0, r8, #1
   12204:	cmp	r0, r4
   12208:	movcc	r1, #36	; 0x24
   1220c:	strbcc	r1, [r5, r0]
   12210:	add	r0, r8, #2
   12214:	add	r8, r8, #3
   12218:	cmp	r0, r4
   1221c:	movcc	r1, #39	; 0x27
   12220:	strbcc	r1, [r5, r0]
   12224:	mov	r0, #1
   12228:	str	r0, [fp, #-56]	; 0xffffffc8
   1222c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12230:	cmp	r8, r4
   12234:	mov	r9, #0
   12238:	mov	sl, #1
   1223c:	mov	r6, #48	; 0x30
   12240:	movcc	r0, #92	; 0x5c
   12244:	strbcc	r0, [r5, r8]
   12248:	add	r0, r8, #1
   1224c:	cmp	r1, #2
   12250:	beq	12620 <__assert_fail@plt+0x1618>
   12254:	add	r1, r7, #1
   12258:	cmp	r1, lr
   1225c:	bcs	12620 <__assert_fail@plt+0x1618>
   12260:	ldrb	r1, [ip, r1]
   12264:	sub	r1, r1, #48	; 0x30
   12268:	uxtb	r1, r1
   1226c:	cmp	r1, #9
   12270:	bhi	12620 <__assert_fail@plt+0x1618>
   12274:	cmp	r0, r4
   12278:	movcc	r1, #48	; 0x30
   1227c:	strbcc	r1, [r5, r0]
   12280:	add	r0, r8, #2
   12284:	add	r8, r8, #3
   12288:	cmp	r0, r4
   1228c:	movcc	r1, #48	; 0x30
   12290:	strbcc	r1, [r5, r0]
   12294:	b	12048 <__assert_fail@plt+0x1040>
   12298:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1229c:	mov	sl, #0
   122a0:	mov	r6, #63	; 0x3f
   122a4:	cmp	r0, #5
   122a8:	beq	12628 <__assert_fail@plt+0x1620>
   122ac:	cmp	r0, #2
   122b0:	bne	126d0 <__assert_fail@plt+0x16c8>
   122b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122b8:	mov	r9, #0
   122bc:	tst	r0, #1
   122c0:	beq	12048 <__assert_fail@plt+0x1040>
   122c4:	b	129a0 <__assert_fail@plt+0x1998>
   122c8:	mov	r0, #118	; 0x76
   122cc:	b	1243c <__assert_fail@plt+0x1434>
   122d0:	mov	r0, #1
   122d4:	mov	r6, #39	; 0x27
   122d8:	str	r0, [sp, #60]	; 0x3c
   122dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122e0:	cmp	r0, #2
   122e4:	bne	12474 <__assert_fail@plt+0x146c>
   122e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122ec:	tst	r0, #1
   122f0:	bne	129a0 <__assert_fail@plt+0x1998>
   122f4:	ldr	r2, [sp, #56]	; 0x38
   122f8:	clz	r1, r4
   122fc:	mov	sl, #0
   12300:	mov	r9, #1
   12304:	lsr	r1, r1, #5
   12308:	cmp	r2, #0
   1230c:	mov	r0, r2
   12310:	movwne	r0, #1
   12314:	orrs	r0, r0, r1
   12318:	moveq	r2, r4
   1231c:	moveq	r4, r0
   12320:	cmp	r8, r4
   12324:	str	r2, [sp, #56]	; 0x38
   12328:	movcc	r0, #39	; 0x27
   1232c:	strbcc	r0, [r5, r8]
   12330:	add	r0, r8, #1
   12334:	cmp	r0, r4
   12338:	movcc	r1, #92	; 0x5c
   1233c:	strbcc	r1, [r5, r0]
   12340:	add	r0, r8, #2
   12344:	add	r8, r8, #3
   12348:	cmp	r0, r4
   1234c:	movcc	r1, #39	; 0x27
   12350:	strbcc	r1, [r5, r0]
   12354:	mov	r0, #0
   12358:	str	r0, [fp, #-56]	; 0xffffffc8
   1235c:	b	12048 <__assert_fail@plt+0x1040>
   12360:	ldr	r0, [sp, #40]	; 0x28
   12364:	str	r4, [sp, #88]	; 0x58
   12368:	cmp	r0, #1
   1236c:	bne	1247c <__assert_fail@plt+0x1474>
   12370:	str	lr, [sp, #28]
   12374:	bl	10f0c <__ctype_b_loc@plt>
   12378:	ldr	r0, [r0]
   1237c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12380:	mov	r2, #1
   12384:	add	r0, r0, r6, lsl #1
   12388:	ldrb	r0, [r0, #1]
   1238c:	ubfx	r9, r0, #6, #1
   12390:	ldr	r0, [sp, #52]	; 0x34
   12394:	cmp	r2, #1
   12398:	orr	r0, r9, r0
   1239c:	bhi	126d8 <__assert_fail@plt+0x16d0>
   123a0:	tst	r0, #1
   123a4:	beq	126d8 <__assert_fail@plt+0x16d0>
   123a8:	ldr	lr, [sp, #28]
   123ac:	ldr	r4, [sp, #88]	; 0x58
   123b0:	b	12048 <__assert_fail@plt+0x1040>
   123b4:	ldr	r1, [sp, #48]	; 0x30
   123b8:	mov	sl, #0
   123bc:	mov	r0, #92	; 0x5c
   123c0:	cmp	r1, #0
   123c4:	beq	1243c <__assert_fail@plt+0x1434>
   123c8:	mov	r6, #92	; 0x5c
   123cc:	mov	r9, #0
   123d0:	cmp	sl, #0
   123d4:	bne	1240c <__assert_fail@plt+0x1404>
   123d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   123dc:	tst	r0, #1
   123e0:	beq	1240c <__assert_fail@plt+0x1404>
   123e4:	cmp	r8, r4
   123e8:	movcc	r0, #39	; 0x27
   123ec:	strbcc	r0, [r5, r8]
   123f0:	add	r0, r8, #1
   123f4:	add	r8, r8, #2
   123f8:	cmp	r0, r4
   123fc:	movcc	r1, #39	; 0x27
   12400:	strbcc	r1, [r5, r0]
   12404:	mov	r0, #0
   12408:	str	r0, [fp, #-56]	; 0xffffffc8
   1240c:	mov	r1, r9
   12410:	mov	r0, r6
   12414:	cmp	r8, r4
   12418:	strbcc	r0, [r5, r8]
   1241c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12420:	add	r8, r8, #1
   12424:	and	r0, r0, r1
   12428:	str	r0, [fp, #-48]	; 0xffffffd0
   1242c:	add	r7, r7, #1
   12430:	cmn	lr, #1
   12434:	bne	11d74 <__assert_fail@plt+0xd6c>
   12438:	b	11d80 <__assert_fail@plt+0xd78>
   1243c:	ldr	r1, [sp, #84]	; 0x54
   12440:	mov	sl, #0
   12444:	mov	r9, #0
   12448:	tst	r1, #1
   1244c:	mov	r1, #0
   12450:	beq	12048 <__assert_fail@plt+0x1040>
   12454:	b	12090 <__assert_fail@plt+0x1088>
   12458:	ldr	r0, [sp, #36]	; 0x24
   1245c:	mov	r6, #0
   12460:	mov	sl, #0
   12464:	mov	r9, #0
   12468:	cmp	r0, #0
   1246c:	beq	12048 <__assert_fail@plt+0x1040>
   12470:	b	1242c <__assert_fail@plt+0x1424>
   12474:	mov	r9, #1
   12478:	b	12048 <__assert_fail@plt+0x1040>
   1247c:	mov	r0, #0
   12480:	cmn	lr, #1
   12484:	sub	r4, fp, #40	; 0x28
   12488:	str	r0, [fp, #-36]	; 0xffffffdc
   1248c:	str	r0, [fp, #-40]	; 0xffffffd8
   12490:	bne	124a4 <__assert_fail@plt+0x149c>
   12494:	mov	r0, ip
   12498:	bl	10f3c <strlen@plt>
   1249c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124a0:	mov	lr, r0
   124a4:	ldr	r0, [sp, #72]	; 0x48
   124a8:	mov	r9, #1
   124ac:	mov	r2, #0
   124b0:	str	lr, [sp, #28]
   124b4:	add	r0, r0, r7
   124b8:	str	r0, [sp, #20]
   124bc:	b	12500 <__assert_fail@plt+0x14f8>
   124c0:	ldr	r5, [sp, #44]	; 0x2c
   124c4:	add	r5, r0, r5
   124c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124cc:	bl	10e70 <iswprint@plt>
   124d0:	cmp	r0, #0
   124d4:	sub	r4, fp, #40	; 0x28
   124d8:	movwne	r0, #1
   124dc:	and	r9, r9, r0
   124e0:	mov	r0, r4
   124e4:	bl	10e28 <mbsinit@plt>
   124e8:	mov	r2, r5
   124ec:	ldr	lr, [sp, #28]
   124f0:	ldr	r5, [fp, #-84]	; 0xffffffac
   124f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124f8:	cmp	r0, #0
   124fc:	bne	12390 <__assert_fail@plt+0x1388>
   12500:	add	r0, r2, r7
   12504:	str	r2, [sp, #44]	; 0x2c
   12508:	mov	r3, r4
   1250c:	add	r1, ip, r0
   12510:	str	r0, [sp, #24]
   12514:	sub	r2, lr, r0
   12518:	sub	r0, fp, #44	; 0x2c
   1251c:	bl	15300 <__assert_fail@plt+0x42f8>
   12520:	cmp	r0, #0
   12524:	beq	128c8 <__assert_fail@plt+0x18c0>
   12528:	cmn	r0, #1
   1252c:	beq	12884 <__assert_fail@plt+0x187c>
   12530:	ldr	lr, [sp, #28]
   12534:	cmn	r0, #2
   12538:	beq	1288c <__assert_fail@plt+0x1884>
   1253c:	ldr	r2, [sp, #64]	; 0x40
   12540:	ldr	r4, [sp, #88]	; 0x58
   12544:	ldr	ip, [sp, #84]	; 0x54
   12548:	cmp	r0, #2
   1254c:	mov	r1, #0
   12550:	movwcc	r1, #1
   12554:	eor	r2, r2, #1
   12558:	orrs	r1, r2, r1
   1255c:	bne	124c0 <__assert_fail@plt+0x14b8>
   12560:	ldr	r1, [sp, #44]	; 0x2c
   12564:	ldr	r2, [sp, #20]
   12568:	add	r1, r2, r1
   1256c:	sub	r2, r0, #1
   12570:	b	12580 <__assert_fail@plt+0x1578>
   12574:	add	r1, r1, #1
   12578:	subs	r2, r2, #1
   1257c:	beq	124c0 <__assert_fail@plt+0x14b8>
   12580:	ldrb	r3, [r1]
   12584:	sub	r3, r3, #91	; 0x5b
   12588:	cmp	r3, #33	; 0x21
   1258c:	bhi	12574 <__assert_fail@plt+0x156c>
   12590:	add	r5, pc, #0
   12594:	ldr	pc, [r5, r3, lsl #2]
   12598:	andeq	r2, r1, ip, ror r9
   1259c:	andeq	r2, r1, ip, ror r9
   125a0:	andeq	r2, r1, r4, ror r5
   125a4:	andeq	r2, r1, ip, ror r9
   125a8:	andeq	r2, r1, r4, ror r5
   125ac:	andeq	r2, r1, ip, ror r9
   125b0:	andeq	r2, r1, r4, ror r5
   125b4:	andeq	r2, r1, r4, ror r5
   125b8:	andeq	r2, r1, r4, ror r5
   125bc:	andeq	r2, r1, r4, ror r5
   125c0:	andeq	r2, r1, r4, ror r5
   125c4:	andeq	r2, r1, r4, ror r5
   125c8:	andeq	r2, r1, r4, ror r5
   125cc:	andeq	r2, r1, r4, ror r5
   125d0:	andeq	r2, r1, r4, ror r5
   125d4:	andeq	r2, r1, r4, ror r5
   125d8:	andeq	r2, r1, r4, ror r5
   125dc:	andeq	r2, r1, r4, ror r5
   125e0:	andeq	r2, r1, r4, ror r5
   125e4:	andeq	r2, r1, r4, ror r5
   125e8:	andeq	r2, r1, r4, ror r5
   125ec:	andeq	r2, r1, r4, ror r5
   125f0:	andeq	r2, r1, r4, ror r5
   125f4:	andeq	r2, r1, r4, ror r5
   125f8:	andeq	r2, r1, r4, ror r5
   125fc:	andeq	r2, r1, r4, ror r5
   12600:	andeq	r2, r1, r4, ror r5
   12604:	andeq	r2, r1, r4, ror r5
   12608:	andeq	r2, r1, r4, ror r5
   1260c:	andeq	r2, r1, r4, ror r5
   12610:	andeq	r2, r1, r4, ror r5
   12614:	andeq	r2, r1, r4, ror r5
   12618:	andeq	r2, r1, r4, ror r5
   1261c:	andeq	r2, r1, ip, ror r9
   12620:	mov	r8, r0
   12624:	b	12048 <__assert_fail@plt+0x1040>
   12628:	ldr	r0, [sp, #32]
   1262c:	cmp	r0, #0
   12630:	beq	126d0 <__assert_fail@plt+0x16c8>
   12634:	add	r0, r7, #2
   12638:	cmp	r0, lr
   1263c:	bcs	126d0 <__assert_fail@plt+0x16c8>
   12640:	add	r1, r7, ip
   12644:	ldrb	r1, [r1, #1]
   12648:	cmp	r1, #63	; 0x3f
   1264c:	bne	126d0 <__assert_fail@plt+0x16c8>
   12650:	ldrb	r9, [ip, r0]
   12654:	sub	r2, r9, #33	; 0x21
   12658:	cmp	r2, #29
   1265c:	bhi	126d0 <__assert_fail@plt+0x16c8>
   12660:	movw	r1, #20929	; 0x51c1
   12664:	mov	r3, #1
   12668:	movt	r1, #14336	; 0x3800
   1266c:	tst	r1, r3, lsl r2
   12670:	beq	126d0 <__assert_fail@plt+0x16c8>
   12674:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12678:	tst	r1, #1
   1267c:	bne	129a0 <__assert_fail@plt+0x1998>
   12680:	cmp	r8, r4
   12684:	add	r2, r8, #1
   12688:	mov	r6, r9
   1268c:	mov	r7, r0
   12690:	mov	r9, #0
   12694:	movcc	r1, #63	; 0x3f
   12698:	strbcc	r1, [r5, r8]
   1269c:	cmp	r2, r4
   126a0:	movcc	r1, #34	; 0x22
   126a4:	strbcc	r1, [r5, r2]
   126a8:	add	r2, r8, #2
   126ac:	cmp	r2, r4
   126b0:	movcc	r1, #34	; 0x22
   126b4:	strbcc	r1, [r5, r2]
   126b8:	add	r2, r8, #3
   126bc:	add	r8, r8, #4
   126c0:	cmp	r2, r4
   126c4:	movcc	r1, #63	; 0x3f
   126c8:	strbcc	r1, [r5, r2]
   126cc:	b	12048 <__assert_fail@plt+0x1040>
   126d0:	mov	r9, #0
   126d4:	b	12048 <__assert_fail@plt+0x1040>
   126d8:	ldr	lr, [sp, #28]
   126dc:	ldr	r4, [fp, #-56]	; 0xffffffc8
   126e0:	add	r1, r2, r7
   126e4:	mov	r2, #0
   126e8:	str	r1, [sp, #44]	; 0x2c
   126ec:	tst	r0, #1
   126f0:	bne	1280c <__assert_fail@plt+0x1804>
   126f4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126f8:	tst	r1, #1
   126fc:	bne	1299c <__assert_fail@plt+0x1994>
   12700:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12704:	subs	r2, r1, #2
   12708:	movwne	r2, #1
   1270c:	orr	r2, r2, r4
   12710:	tst	r2, #1
   12714:	bne	12758 <__assert_fail@plt+0x1750>
   12718:	ldr	r1, [sp, #88]	; 0x58
   1271c:	add	r2, r8, #1
   12720:	mov	r4, #1
   12724:	cmp	r8, r1
   12728:	movcc	r1, #39	; 0x27
   1272c:	strbcc	r1, [r5, r8]
   12730:	ldr	r1, [sp, #88]	; 0x58
   12734:	cmp	r2, r1
   12738:	movcc	r1, #36	; 0x24
   1273c:	strbcc	r1, [r5, r2]
   12740:	ldr	r1, [sp, #88]	; 0x58
   12744:	add	r2, r8, #2
   12748:	add	r8, r8, #3
   1274c:	cmp	r2, r1
   12750:	movcc	r1, #39	; 0x27
   12754:	strbcc	r1, [r5, r2]
   12758:	ldr	r1, [sp, #88]	; 0x58
   1275c:	add	r2, r8, #1
   12760:	cmp	r8, r1
   12764:	movcc	r1, #92	; 0x5c
   12768:	strbcc	r1, [r5, r8]
   1276c:	ldr	r1, [sp, #88]	; 0x58
   12770:	cmp	r2, r1
   12774:	bcs	12788 <__assert_fail@plt+0x1780>
   12778:	uxtb	r3, r6
   1277c:	mov	r1, #48	; 0x30
   12780:	orr	r3, r1, r3, lsr #6
   12784:	strb	r3, [r5, r2]
   12788:	ldr	r1, [sp, #88]	; 0x58
   1278c:	add	r2, r8, #2
   12790:	add	r8, r8, #3
   12794:	cmp	r2, r1
   12798:	lsrcc	r3, r6, #3
   1279c:	movcc	r1, #6
   127a0:	bficc	r3, r1, #3, #29
   127a4:	mov	r1, #6
   127a8:	bfi	r6, r1, #3, #29
   127ac:	strbcc	r3, [r5, r2]
   127b0:	mov	r2, #1
   127b4:	b	12834 <__assert_fail@plt+0x182c>
   127b8:	ldr	r1, [sp, #88]	; 0x58
   127bc:	ldr	r5, [fp, #-84]	; 0xffffffac
   127c0:	ldr	r4, [sp, #88]	; 0x58
   127c4:	cmp	r8, r1
   127c8:	movcc	r1, #39	; 0x27
   127cc:	strbcc	r1, [r5, r8]
   127d0:	add	r1, r8, #1
   127d4:	add	r8, r8, #2
   127d8:	cmp	r1, r4
   127dc:	movcc	r4, #39	; 0x27
   127e0:	strbcc	r4, [r5, r1]
   127e4:	mov	r4, #0
   127e8:	ldr	r1, [sp, #88]	; 0x58
   127ec:	cmp	r8, r1
   127f0:	ldr	r1, [sp, #72]	; 0x48
   127f4:	strbcc	r6, [r5, r8]
   127f8:	add	r8, r8, #1
   127fc:	ldrb	r6, [r1, r7]
   12800:	mov	r7, r3
   12804:	tst	r0, #1
   12808:	beq	126f4 <__assert_fail@plt+0x16ec>
   1280c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12810:	tst	r1, #1
   12814:	beq	1282c <__assert_fail@plt+0x1824>
   12818:	ldr	r1, [sp, #88]	; 0x58
   1281c:	cmp	r8, r1
   12820:	movcc	r1, #92	; 0x5c
   12824:	strbcc	r1, [r5, r8]
   12828:	add	r8, r8, #1
   1282c:	mov	r1, #0
   12830:	str	r1, [fp, #-52]	; 0xffffffcc
   12834:	ldr	r1, [sp, #44]	; 0x2c
   12838:	add	r3, r7, #1
   1283c:	and	sl, r2, #1
   12840:	cmp	r1, r3
   12844:	bls	12868 <__assert_fail@plt+0x1860>
   12848:	cmp	sl, #0
   1284c:	mvn	r5, r4
   12850:	movwne	sl, #1
   12854:	orr	r5, r5, sl
   12858:	tst	r5, #1
   1285c:	beq	127b8 <__assert_fail@plt+0x17b0>
   12860:	ldr	r5, [fp, #-84]	; 0xffffffac
   12864:	b	127e8 <__assert_fail@plt+0x17e0>
   12868:	str	r4, [fp, #-56]	; 0xffffffc8
   1286c:	ldr	r4, [sp, #88]	; 0x58
   12870:	cmp	sl, #0
   12874:	movwne	sl, #1
   12878:	cmp	sl, #0
   1287c:	beq	123d8 <__assert_fail@plt+0x13d0>
   12880:	b	1240c <__assert_fail@plt+0x1404>
   12884:	mov	r9, #0
   12888:	b	128c8 <__assert_fail@plt+0x18c0>
   1288c:	ldr	r0, [sp, #24]
   12890:	mov	r9, #0
   12894:	cmp	lr, r0
   12898:	bls	128c8 <__assert_fail@plt+0x18c0>
   1289c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128a0:	ldr	r2, [sp, #44]	; 0x2c
   128a4:	add	r0, ip, r7
   128a8:	ldrb	r1, [r0, r2]
   128ac:	cmp	r1, #0
   128b0:	beq	12390 <__assert_fail@plt+0x1388>
   128b4:	add	r2, r2, #1
   128b8:	add	r1, r7, r2
   128bc:	cmp	r1, lr
   128c0:	bcc	128a8 <__assert_fail@plt+0x18a0>
   128c4:	b	12390 <__assert_fail@plt+0x1388>
   128c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128cc:	ldr	r2, [sp, #44]	; 0x2c
   128d0:	b	12390 <__assert_fail@plt+0x1388>
   128d4:	mov	lr, r7
   128d8:	b	128e0 <__assert_fail@plt+0x18d8>
   128dc:	mvn	lr, #0
   128e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128e8:	eor	r0, r1, #2
   128ec:	orr	r0, r0, r8
   128f0:	clz	r0, r0
   128f4:	lsr	r0, r0, #5
   128f8:	tst	r2, r0
   128fc:	bne	129a0 <__assert_fail@plt+0x1998>
   12900:	subs	r0, r1, #2
   12904:	movwne	r0, #1
   12908:	orr	r0, r2, r0
   1290c:	tst	r0, #1
   12910:	ldreq	r0, [sp, #60]	; 0x3c
   12914:	eoreq	r0, r0, #1
   12918:	tsteq	r0, #1
   1291c:	bne	12a34 <__assert_fail@plt+0x1a2c>
   12920:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12924:	mov	sl, lr
   12928:	tst	r0, #1
   1292c:	bne	12a00 <__assert_fail@plt+0x19f8>
   12930:	ldr	r6, [sp, #56]	; 0x38
   12934:	mov	r9, #0
   12938:	cmp	r6, #0
   1293c:	beq	12a2c <__assert_fail@plt+0x1a24>
   12940:	ldr	r0, [sp, #84]	; 0x54
   12944:	mov	r1, #0
   12948:	mov	r7, #2
   1294c:	cmp	r4, #0
   12950:	str	r1, [fp, #-48]	; 0xffffffd0
   12954:	mov	r1, #0
   12958:	str	r1, [fp, #-76]	; 0xffffffb4
   1295c:	beq	11afc <__assert_fail@plt+0xaf4>
   12960:	b	12a34 <__assert_fail@plt+0x1a2c>
   12964:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12968:	ldr	r1, [fp, #12]
   1296c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12970:	mov	lr, r4
   12974:	mov	r4, r6
   12978:	b	129c0 <__assert_fail@plt+0x19b8>
   1297c:	tst	ip, #1
   12980:	ldr	r5, [fp, #-84]	; 0xffffffac
   12984:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12988:	ldr	r1, [fp, #12]
   1298c:	mov	r0, #2
   12990:	movwne	r0, #4
   12994:	mov	r2, r0
   12998:	b	129c0 <__assert_fail@plt+0x19b8>
   1299c:	ldr	r4, [sp, #88]	; 0x58
   129a0:	ldr	r1, [sp, #84]	; 0x54
   129a4:	mov	r0, #2
   129a8:	tst	r1, #1
   129ac:	movwne	r0, #4
   129b0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   129b4:	ldr	r1, [fp, #12]
   129b8:	cmp	r2, #2
   129bc:	moveq	r2, r0
   129c0:	mov	r0, #0
   129c4:	bic	r1, r1, #2
   129c8:	str	r2, [sp]
   129cc:	mov	r2, ip
   129d0:	mov	r3, lr
   129d4:	str	r0, [sp, #8]
   129d8:	ldr	r0, [sp, #76]	; 0x4c
   129dc:	str	r1, [sp, #4]
   129e0:	mov	r1, r4
   129e4:	str	r0, [sp, #12]
   129e8:	ldr	r0, [sp, #80]	; 0x50
   129ec:	str	r0, [sp, #16]
   129f0:	mov	r0, r5
   129f4:	bl	11a6c <__assert_fail@plt+0xa64>
   129f8:	mov	r8, r0
   129fc:	b	12a80 <__assert_fail@plt+0x1a78>
   12a00:	mov	r0, #5
   12a04:	ldr	r1, [sp, #56]	; 0x38
   12a08:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12a0c:	mov	r3, sl
   12a10:	str	r0, [sp]
   12a14:	ldr	r0, [fp, #12]
   12a18:	str	r0, [sp, #4]
   12a1c:	ldr	r0, [fp, #16]
   12a20:	str	r0, [sp, #8]
   12a24:	ldr	r0, [sp, #76]	; 0x4c
   12a28:	b	129e4 <__assert_fail@plt+0x19dc>
   12a2c:	mov	r0, #0
   12a30:	str	r0, [fp, #-76]	; 0xffffffb4
   12a34:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12a38:	cmp	r1, #0
   12a3c:	beq	12a74 <__assert_fail@plt+0x1a6c>
   12a40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a44:	tst	r0, #1
   12a48:	bne	12a74 <__assert_fail@plt+0x1a6c>
   12a4c:	ldrb	r0, [r1]
   12a50:	cmp	r0, #0
   12a54:	beq	12a74 <__assert_fail@plt+0x1a6c>
   12a58:	add	r1, r1, #1
   12a5c:	cmp	r8, r4
   12a60:	strbcc	r0, [r5, r8]
   12a64:	add	r8, r8, #1
   12a68:	ldrb	r0, [r1], #1
   12a6c:	cmp	r0, #0
   12a70:	bne	12a5c <__assert_fail@plt+0x1a54>
   12a74:	cmp	r8, r4
   12a78:	movcc	r0, #0
   12a7c:	strbcc	r0, [r5, r8]
   12a80:	mov	r0, r8
   12a84:	sub	sp, fp, #28
   12a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a8c:	mov	r0, #4
   12a90:	b	129b0 <__assert_fail@plt+0x19a8>
   12a94:	bl	10ffc <abort@plt>
   12a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a9c:	add	fp, sp, #28
   12aa0:	sub	sp, sp, #28
   12aa4:	movw	r5, #29016	; 0x7158
   12aa8:	cmp	r2, #0
   12aac:	mov	r4, r1
   12ab0:	mov	r7, r0
   12ab4:	str	r0, [sp, #20]
   12ab8:	movt	r5, #2
   12abc:	movne	r5, r2
   12ac0:	bl	10f54 <__errno_location@plt>
   12ac4:	mov	sl, r0
   12ac8:	ldr	r2, [r5, #40]	; 0x28
   12acc:	ldr	r3, [r5, #44]	; 0x2c
   12ad0:	ldm	r5, {r0, r1}
   12ad4:	orr	r8, r1, #1
   12ad8:	add	r9, r5, #8
   12adc:	mov	r1, #0
   12ae0:	ldr	r6, [sl]
   12ae4:	stm	sp, {r0, r8, r9}
   12ae8:	mov	r0, #0
   12aec:	str	r2, [sp, #12]
   12af0:	str	r3, [sp, #16]
   12af4:	mov	r2, r7
   12af8:	mov	r3, r4
   12afc:	str	r6, [sp, #24]
   12b00:	mov	r6, r4
   12b04:	bl	11a6c <__assert_fail@plt+0xa64>
   12b08:	add	r7, r0, #1
   12b0c:	mov	r0, r7
   12b10:	bl	13cb8 <__assert_fail@plt+0x2cb0>
   12b14:	mov	r4, r0
   12b18:	ldr	r0, [r5]
   12b1c:	ldr	r2, [r5, #44]	; 0x2c
   12b20:	ldr	r1, [r5, #40]	; 0x28
   12b24:	mov	r3, r6
   12b28:	stm	sp, {r0, r8, r9}
   12b2c:	str	r2, [sp, #16]
   12b30:	ldr	r2, [sp, #20]
   12b34:	str	r1, [sp, #12]
   12b38:	mov	r0, r4
   12b3c:	mov	r1, r7
   12b40:	bl	11a6c <__assert_fail@plt+0xa64>
   12b44:	ldr	r0, [sp, #24]
   12b48:	str	r0, [sl]
   12b4c:	mov	r0, r4
   12b50:	sub	sp, fp, #28
   12b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b5c:	add	fp, sp, #28
   12b60:	sub	sp, sp, #36	; 0x24
   12b64:	movw	r8, #29016	; 0x7158
   12b68:	cmp	r3, #0
   12b6c:	mov	r4, r2
   12b70:	str	r2, [sp, #24]
   12b74:	mov	r5, r1
   12b78:	mov	r6, r0
   12b7c:	str	r0, [sp, #20]
   12b80:	movt	r8, #2
   12b84:	movne	r8, r3
   12b88:	bl	10f54 <__errno_location@plt>
   12b8c:	str	r0, [sp, #28]
   12b90:	ldr	r1, [r8, #40]	; 0x28
   12b94:	ldr	r2, [r8, #44]	; 0x2c
   12b98:	ldr	r7, [r0]
   12b9c:	cmp	r4, #0
   12ba0:	add	sl, r8, #8
   12ba4:	mov	r0, #0
   12ba8:	ldm	r8, {r3, r9}
   12bac:	orreq	r9, r9, #1
   12bb0:	stm	sp, {r3, r9, sl}
   12bb4:	str	r1, [sp, #12]
   12bb8:	str	r2, [sp, #16]
   12bbc:	mov	r1, #0
   12bc0:	mov	r2, r6
   12bc4:	mov	r3, r5
   12bc8:	str	r7, [sp, #32]
   12bcc:	mov	r7, r5
   12bd0:	bl	11a6c <__assert_fail@plt+0xa64>
   12bd4:	add	r4, r0, #1
   12bd8:	mov	r5, r0
   12bdc:	mov	r0, r4
   12be0:	bl	13cb8 <__assert_fail@plt+0x2cb0>
   12be4:	mov	r6, r0
   12be8:	ldr	r0, [r8]
   12bec:	ldr	r2, [r8, #44]	; 0x2c
   12bf0:	ldr	r1, [r8, #40]	; 0x28
   12bf4:	mov	r3, r7
   12bf8:	stm	sp, {r0, r9, sl}
   12bfc:	str	r2, [sp, #16]
   12c00:	ldr	r2, [sp, #20]
   12c04:	str	r1, [sp, #12]
   12c08:	mov	r0, r6
   12c0c:	mov	r1, r4
   12c10:	bl	11a6c <__assert_fail@plt+0xa64>
   12c14:	ldr	r0, [sp, #24]
   12c18:	ldr	r1, [sp, #32]
   12c1c:	ldr	r2, [sp, #28]
   12c20:	cmp	r0, #0
   12c24:	str	r1, [r2]
   12c28:	strne	r5, [r0]
   12c2c:	mov	r0, r6
   12c30:	sub	sp, fp, #28
   12c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c3c:	add	fp, sp, #24
   12c40:	movw	r5, #28908	; 0x70ec
   12c44:	movw	r8, #28904	; 0x70e8
   12c48:	movt	r5, #2
   12c4c:	movt	r8, #2
   12c50:	ldr	r0, [r5]
   12c54:	ldr	r4, [r8]
   12c58:	cmp	r0, #2
   12c5c:	blt	12c88 <__assert_fail@plt+0x1c80>
   12c60:	add	r7, r4, #12
   12c64:	mov	r6, #0
   12c68:	ldr	r0, [r7, r6, lsl #3]
   12c6c:	bl	151f8 <__assert_fail@plt+0x41f0>
   12c70:	ldr	r1, [r5]
   12c74:	add	r2, r6, #2
   12c78:	add	r0, r6, #1
   12c7c:	mov	r6, r0
   12c80:	cmp	r2, r1
   12c84:	blt	12c68 <__assert_fail@plt+0x1c60>
   12c88:	ldr	r0, [r4, #4]
   12c8c:	movw	r9, #29064	; 0x7188
   12c90:	movw	r7, #28912	; 0x70f0
   12c94:	movt	r9, #2
   12c98:	movt	r7, #2
   12c9c:	cmp	r0, r9
   12ca0:	beq	12cb0 <__assert_fail@plt+0x1ca8>
   12ca4:	bl	151f8 <__assert_fail@plt+0x41f0>
   12ca8:	mov	r0, #256	; 0x100
   12cac:	stm	r7, {r0, r9}
   12cb0:	cmp	r4, r7
   12cb4:	beq	12cc4 <__assert_fail@plt+0x1cbc>
   12cb8:	mov	r0, r4
   12cbc:	bl	151f8 <__assert_fail@plt+0x41f0>
   12cc0:	str	r7, [r8]
   12cc4:	mov	r0, #1
   12cc8:	str	r0, [r5]
   12ccc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12cd0:	movw	r3, #29016	; 0x7158
   12cd4:	mvn	r2, #0
   12cd8:	movt	r3, #2
   12cdc:	b	12ce0 <__assert_fail@plt+0x1cd8>
   12ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ce4:	add	fp, sp, #28
   12ce8:	sub	sp, sp, #44	; 0x2c
   12cec:	mov	r7, r3
   12cf0:	str	r2, [sp, #36]	; 0x24
   12cf4:	str	r1, [sp, #32]
   12cf8:	mov	r5, r0
   12cfc:	bl	10f54 <__errno_location@plt>
   12d00:	cmp	r5, #0
   12d04:	bmi	12e74 <__assert_fail@plt+0x1e6c>
   12d08:	cmn	r5, #-2147483647	; 0x80000001
   12d0c:	beq	12e74 <__assert_fail@plt+0x1e6c>
   12d10:	movw	r8, #28908	; 0x70ec
   12d14:	movw	r4, #28904	; 0x70e8
   12d18:	str	r0, [sp, #28]
   12d1c:	ldr	r0, [r0]
   12d20:	movt	r8, #2
   12d24:	movt	r4, #2
   12d28:	ldr	r1, [r8]
   12d2c:	ldr	r6, [r4]
   12d30:	str	r0, [sp, #24]
   12d34:	cmp	r1, r5
   12d38:	ble	12d44 <__assert_fail@plt+0x1d3c>
   12d3c:	mov	sl, r6
   12d40:	b	12db0 <__assert_fail@plt+0x1da8>
   12d44:	movw	r9, #28912	; 0x70f0
   12d48:	mov	r0, #8
   12d4c:	str	r1, [fp, #-32]	; 0xffffffe0
   12d50:	sub	r1, r5, r1
   12d54:	mvn	r3, #-2147483648	; 0x80000000
   12d58:	movt	r9, #2
   12d5c:	str	r0, [sp]
   12d60:	add	r2, r1, #1
   12d64:	sub	r1, fp, #32
   12d68:	subs	r0, r6, r9
   12d6c:	movne	r0, r6
   12d70:	bl	13eb8 <__assert_fail@plt+0x2eb0>
   12d74:	mov	sl, r0
   12d78:	cmp	r6, r9
   12d7c:	str	r0, [r4]
   12d80:	bne	12d8c <__assert_fail@plt+0x1d84>
   12d84:	ldrd	r0, [r9]
   12d88:	stm	sl, {r0, r1}
   12d8c:	ldr	r1, [r8]
   12d90:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d94:	add	r0, sl, r1, lsl #3
   12d98:	sub	r1, r2, r1
   12d9c:	lsl	r2, r1, #3
   12da0:	mov	r1, #0
   12da4:	bl	10f6c <memset@plt>
   12da8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12dac:	str	r0, [r8]
   12db0:	mov	r9, sl
   12db4:	ldm	r7, {r0, r1}
   12db8:	orr	r8, r1, #1
   12dbc:	add	r1, r7, #8
   12dc0:	ldr	r2, [r7, #40]	; 0x28
   12dc4:	ldr	r3, [r7, #44]	; 0x2c
   12dc8:	ldr	r6, [r9, r5, lsl #3]!
   12dcc:	str	r1, [sp, #20]
   12dd0:	ldr	r4, [r9, #4]!
   12dd4:	stm	sp, {r0, r8}
   12dd8:	add	r0, sp, #8
   12ddc:	stm	r0, {r1, r2, r3}
   12de0:	ldr	r2, [sp, #32]
   12de4:	ldr	r3, [sp, #36]	; 0x24
   12de8:	mov	r1, r6
   12dec:	mov	r0, r4
   12df0:	bl	11a6c <__assert_fail@plt+0xa64>
   12df4:	cmp	r6, r0
   12df8:	bhi	12e5c <__assert_fail@plt+0x1e54>
   12dfc:	add	r6, r0, #1
   12e00:	movw	r0, #29064	; 0x7188
   12e04:	movt	r0, #2
   12e08:	str	r6, [sl, r5, lsl #3]
   12e0c:	cmp	r4, r0
   12e10:	beq	12e1c <__assert_fail@plt+0x1e14>
   12e14:	mov	r0, r4
   12e18:	bl	151f8 <__assert_fail@plt+0x41f0>
   12e1c:	mov	r0, r6
   12e20:	bl	13cb8 <__assert_fail@plt+0x2cb0>
   12e24:	str	r0, [r9]
   12e28:	mov	r4, r0
   12e2c:	add	r3, sp, #8
   12e30:	ldr	r0, [r7]
   12e34:	ldr	r1, [r7, #40]	; 0x28
   12e38:	ldr	r2, [r7, #44]	; 0x2c
   12e3c:	stm	sp, {r0, r8}
   12e40:	ldr	r0, [sp, #20]
   12e44:	stm	r3, {r0, r1, r2}
   12e48:	ldr	r2, [sp, #32]
   12e4c:	ldr	r3, [sp, #36]	; 0x24
   12e50:	mov	r0, r4
   12e54:	mov	r1, r6
   12e58:	bl	11a6c <__assert_fail@plt+0xa64>
   12e5c:	ldr	r0, [sp, #28]
   12e60:	ldr	r1, [sp, #24]
   12e64:	str	r1, [r0]
   12e68:	mov	r0, r4
   12e6c:	sub	sp, fp, #28
   12e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e74:	bl	10ffc <abort@plt>
   12e78:	movw	r3, #29016	; 0x7158
   12e7c:	movt	r3, #2
   12e80:	b	12ce0 <__assert_fail@plt+0x1cd8>
   12e84:	movw	r3, #29016	; 0x7158
   12e88:	mov	r1, r0
   12e8c:	mov	r0, #0
   12e90:	mvn	r2, #0
   12e94:	movt	r3, #2
   12e98:	b	12ce0 <__assert_fail@plt+0x1cd8>
   12e9c:	movw	r3, #29016	; 0x7158
   12ea0:	mov	r2, r1
   12ea4:	mov	r1, r0
   12ea8:	mov	r0, #0
   12eac:	movt	r3, #2
   12eb0:	b	12ce0 <__assert_fail@plt+0x1cd8>
   12eb4:	push	{fp, lr}
   12eb8:	mov	fp, sp
   12ebc:	sub	sp, sp, #48	; 0x30
   12ec0:	vmov.i32	q8, #0	; 0x00000000
   12ec4:	mov	ip, #32
   12ec8:	mov	r3, sp
   12ecc:	mov	lr, r2
   12ed0:	cmp	r1, #10
   12ed4:	add	r2, r3, #16
   12ed8:	vst1.64	{d16-d17}, [r3], ip
   12edc:	vst1.64	{d16-d17}, [r2]
   12ee0:	vst1.64	{d16-d17}, [r3]
   12ee4:	beq	12f04 <__assert_fail@plt+0x1efc>
   12ee8:	str	r1, [sp]
   12eec:	mov	r3, sp
   12ef0:	mov	r1, lr
   12ef4:	mvn	r2, #0
   12ef8:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   12efc:	mov	sp, fp
   12f00:	pop	{fp, pc}
   12f04:	bl	10ffc <abort@plt>
   12f08:	push	{r4, sl, fp, lr}
   12f0c:	add	fp, sp, #8
   12f10:	sub	sp, sp, #48	; 0x30
   12f14:	vmov.i32	q8, #0	; 0x00000000
   12f18:	mov	ip, r3
   12f1c:	mov	r3, sp
   12f20:	mov	lr, #32
   12f24:	cmp	r1, #10
   12f28:	add	r4, r3, #16
   12f2c:	vst1.64	{d16-d17}, [r3], lr
   12f30:	vst1.64	{d16-d17}, [r4]
   12f34:	vst1.64	{d16-d17}, [r3]
   12f38:	beq	12f58 <__assert_fail@plt+0x1f50>
   12f3c:	str	r1, [sp]
   12f40:	mov	r1, r2
   12f44:	mov	r3, sp
   12f48:	mov	r2, ip
   12f4c:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   12f50:	sub	sp, fp, #8
   12f54:	pop	{r4, sl, fp, pc}
   12f58:	bl	10ffc <abort@plt>
   12f5c:	push	{fp, lr}
   12f60:	mov	fp, sp
   12f64:	sub	sp, sp, #48	; 0x30
   12f68:	vmov.i32	q8, #0	; 0x00000000
   12f6c:	mov	r3, sp
   12f70:	mov	ip, #32
   12f74:	cmp	r0, #10
   12f78:	add	r2, r3, #16
   12f7c:	vst1.64	{d16-d17}, [r3], ip
   12f80:	vst1.64	{d16-d17}, [r2]
   12f84:	vst1.64	{d16-d17}, [r3]
   12f88:	beq	12fa8 <__assert_fail@plt+0x1fa0>
   12f8c:	str	r0, [sp]
   12f90:	mov	r3, sp
   12f94:	mov	r0, #0
   12f98:	mvn	r2, #0
   12f9c:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   12fa0:	mov	sp, fp
   12fa4:	pop	{fp, pc}
   12fa8:	bl	10ffc <abort@plt>
   12fac:	push	{fp, lr}
   12fb0:	mov	fp, sp
   12fb4:	sub	sp, sp, #48	; 0x30
   12fb8:	vmov.i32	q8, #0	; 0x00000000
   12fbc:	mov	r3, sp
   12fc0:	mov	ip, #32
   12fc4:	cmp	r0, #10
   12fc8:	add	lr, r3, #16
   12fcc:	vst1.64	{d16-d17}, [r3], ip
   12fd0:	vst1.64	{d16-d17}, [lr]
   12fd4:	vst1.64	{d16-d17}, [r3]
   12fd8:	beq	12ff4 <__assert_fail@plt+0x1fec>
   12fdc:	str	r0, [sp]
   12fe0:	mov	r3, sp
   12fe4:	mov	r0, #0
   12fe8:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   12fec:	mov	sp, fp
   12ff0:	pop	{fp, pc}
   12ff4:	bl	10ffc <abort@plt>
   12ff8:	push	{r4, sl, fp, lr}
   12ffc:	add	fp, sp, #8
   13000:	sub	sp, sp, #48	; 0x30
   13004:	mov	lr, r0
   13008:	movw	r0, #29016	; 0x7158
   1300c:	mov	ip, r1
   13010:	mov	r1, #32
   13014:	mov	r4, #1
   13018:	movt	r0, #2
   1301c:	add	r3, r0, #16
   13020:	vld1.64	{d16-d17}, [r0], r1
   13024:	vld1.64	{d20-d21}, [r0]
   13028:	vld1.64	{d18-d19}, [r3]
   1302c:	mov	r3, sp
   13030:	add	r0, r3, #32
   13034:	add	r1, r3, #16
   13038:	vst1.64	{d20-d21}, [r0]
   1303c:	mov	r0, #28
   13040:	vst1.64	{d18-d19}, [r1]
   13044:	mov	r1, r3
   13048:	and	r0, r0, r2, lsr #3
   1304c:	and	r2, r2, #31
   13050:	vst1.64	{d16-d17}, [r1], r0
   13054:	ldr	r0, [r1, #8]
   13058:	bic	r4, r4, r0, lsr r2
   1305c:	eor	r0, r0, r4, lsl r2
   13060:	mov	r2, ip
   13064:	str	r0, [r1, #8]
   13068:	mov	r0, #0
   1306c:	mov	r1, lr
   13070:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   13074:	sub	sp, fp, #8
   13078:	pop	{r4, sl, fp, pc}
   1307c:	push	{fp, lr}
   13080:	mov	fp, sp
   13084:	sub	sp, sp, #48	; 0x30
   13088:	mov	ip, r0
   1308c:	movw	r0, #29016	; 0x7158
   13090:	mov	r2, #32
   13094:	movt	r0, #2
   13098:	add	r3, r0, #16
   1309c:	vld1.64	{d16-d17}, [r0], r2
   130a0:	vld1.64	{d20-d21}, [r0]
   130a4:	vld1.64	{d18-d19}, [r3]
   130a8:	mov	r3, sp
   130ac:	add	r0, r3, #32
   130b0:	add	r2, r3, #16
   130b4:	vst1.64	{d20-d21}, [r0]
   130b8:	mov	r0, #28
   130bc:	vst1.64	{d18-d19}, [r2]
   130c0:	mov	r2, r3
   130c4:	and	r0, r0, r1, lsr #3
   130c8:	and	r1, r1, #31
   130cc:	vst1.64	{d16-d17}, [r2], r0
   130d0:	mov	r0, #1
   130d4:	ldr	lr, [r2, #8]
   130d8:	bic	r0, r0, lr, lsr r1
   130dc:	eor	r0, lr, r0, lsl r1
   130e0:	mov	r1, ip
   130e4:	str	r0, [r2, #8]
   130e8:	mov	r0, #0
   130ec:	mvn	r2, #0
   130f0:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   130f4:	mov	sp, fp
   130f8:	pop	{fp, pc}
   130fc:	push	{fp, lr}
   13100:	mov	fp, sp
   13104:	sub	sp, sp, #48	; 0x30
   13108:	mov	r1, r0
   1310c:	movw	r0, #29016	; 0x7158
   13110:	mov	r3, #32
   13114:	movt	r0, #2
   13118:	add	r2, r0, #16
   1311c:	vld1.64	{d16-d17}, [r0], r3
   13120:	mov	r3, sp
   13124:	vld1.64	{d18-d19}, [r2]
   13128:	vld1.64	{d20-d21}, [r0]
   1312c:	add	r2, r3, #16
   13130:	add	r0, r3, #32
   13134:	vst1.64	{d18-d19}, [r2]
   13138:	vst1.64	{d20-d21}, [r0]
   1313c:	mov	r0, #12
   13140:	mov	r2, r3
   13144:	vst1.64	{d16-d17}, [r2], r0
   13148:	ldr	r0, [r2]
   1314c:	orr	r0, r0, #67108864	; 0x4000000
   13150:	str	r0, [r2]
   13154:	mov	r0, #0
   13158:	mvn	r2, #0
   1315c:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   13160:	mov	sp, fp
   13164:	pop	{fp, pc}
   13168:	push	{fp, lr}
   1316c:	mov	fp, sp
   13170:	sub	sp, sp, #48	; 0x30
   13174:	mov	ip, r1
   13178:	mov	r1, r0
   1317c:	movw	r0, #29016	; 0x7158
   13180:	mov	r2, #32
   13184:	movt	r0, #2
   13188:	add	r3, r0, #16
   1318c:	vld1.64	{d16-d17}, [r0], r2
   13190:	vld1.64	{d18-d19}, [r3]
   13194:	vld1.64	{d20-d21}, [r0]
   13198:	mov	r3, sp
   1319c:	add	r2, r3, #16
   131a0:	add	r0, r3, #32
   131a4:	vst1.64	{d18-d19}, [r2]
   131a8:	vst1.64	{d20-d21}, [r0]
   131ac:	mov	r0, #12
   131b0:	mov	r2, r3
   131b4:	vst1.64	{d16-d17}, [r2], r0
   131b8:	ldr	r0, [r2]
   131bc:	orr	r0, r0, #67108864	; 0x4000000
   131c0:	str	r0, [r2]
   131c4:	mov	r0, #0
   131c8:	mov	r2, ip
   131cc:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   131d0:	mov	sp, fp
   131d4:	pop	{fp, pc}
   131d8:	push	{r4, sl, fp, lr}
   131dc:	add	fp, sp, #8
   131e0:	sub	sp, sp, #96	; 0x60
   131e4:	vmov.i32	q8, #0	; 0x00000000
   131e8:	mov	ip, r2
   131ec:	mov	r2, sp
   131f0:	mov	r4, #28
   131f4:	cmp	r1, #10
   131f8:	mov	r3, r2
   131fc:	add	lr, r2, #16
   13200:	vst1.64	{d16-d17}, [r3], r4
   13204:	vst1.64	{d16-d17}, [lr]
   13208:	vst1.32	{d16-d17}, [r3]
   1320c:	beq	1325c <__assert_fail@plt+0x2254>
   13210:	vld1.64	{d16-d17}, [r2], r4
   13214:	vld1.64	{d18-d19}, [lr]
   13218:	add	r3, sp, #48	; 0x30
   1321c:	vld1.32	{d20-d21}, [r2]
   13220:	add	r2, r3, #20
   13224:	add	r4, r3, #4
   13228:	vst1.32	{d18-d19}, [r2]
   1322c:	add	r2, r3, #32
   13230:	vst1.32	{d16-d17}, [r4]
   13234:	vst1.32	{d20-d21}, [r2]
   13238:	str	r1, [sp, #48]	; 0x30
   1323c:	mvn	r2, #0
   13240:	ldr	r1, [sp, #60]	; 0x3c
   13244:	orr	r1, r1, #67108864	; 0x4000000
   13248:	str	r1, [sp, #60]	; 0x3c
   1324c:	mov	r1, ip
   13250:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   13254:	sub	sp, fp, #8
   13258:	pop	{r4, sl, fp, pc}
   1325c:	bl	10ffc <abort@plt>
   13260:	push	{r4, r5, r6, sl, fp, lr}
   13264:	add	fp, sp, #16
   13268:	sub	sp, sp, #48	; 0x30
   1326c:	mov	ip, r3
   13270:	movw	r3, #29016	; 0x7158
   13274:	mov	r6, #32
   13278:	cmp	r1, #0
   1327c:	mov	r4, sp
   13280:	movt	r3, #2
   13284:	cmpne	r2, #0
   13288:	add	r5, r4, #16
   1328c:	add	lr, r3, #16
   13290:	vld1.64	{d16-d17}, [r3], r6
   13294:	vld1.64	{d18-d19}, [lr]
   13298:	vld1.64	{d20-d21}, [r3]
   1329c:	mov	r3, #10
   132a0:	vst1.64	{d16-d17}, [r4], r6
   132a4:	vst1.64	{d18-d19}, [r5]
   132a8:	vst1.64	{d20-d21}, [r4]
   132ac:	str	r3, [sp]
   132b0:	bne	132b8 <__assert_fail@plt+0x22b0>
   132b4:	bl	10ffc <abort@plt>
   132b8:	str	r2, [sp, #44]	; 0x2c
   132bc:	str	r1, [sp, #40]	; 0x28
   132c0:	mov	r3, sp
   132c4:	mov	r1, ip
   132c8:	mvn	r2, #0
   132cc:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   132d0:	sub	sp, fp, #16
   132d4:	pop	{r4, r5, r6, sl, fp, pc}
   132d8:	push	{r4, r5, r6, sl, fp, lr}
   132dc:	add	fp, sp, #16
   132e0:	sub	sp, sp, #48	; 0x30
   132e4:	mov	lr, r3
   132e8:	movw	r3, #29016	; 0x7158
   132ec:	mov	r6, #32
   132f0:	cmp	r1, #0
   132f4:	mov	r4, sp
   132f8:	movt	r3, #2
   132fc:	cmpne	r2, #0
   13300:	add	r5, r4, #16
   13304:	add	ip, r3, #16
   13308:	vld1.64	{d16-d17}, [r3], r6
   1330c:	vld1.64	{d18-d19}, [ip]
   13310:	vld1.64	{d20-d21}, [r3]
   13314:	mov	r3, #10
   13318:	vst1.64	{d16-d17}, [r4], r6
   1331c:	vst1.64	{d18-d19}, [r5]
   13320:	vst1.64	{d20-d21}, [r4]
   13324:	str	r3, [sp]
   13328:	bne	13330 <__assert_fail@plt+0x2328>
   1332c:	bl	10ffc <abort@plt>
   13330:	ldr	ip, [fp, #8]
   13334:	str	r2, [sp, #44]	; 0x2c
   13338:	str	r1, [sp, #40]	; 0x28
   1333c:	mov	r3, sp
   13340:	mov	r1, lr
   13344:	mov	r2, ip
   13348:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   1334c:	sub	sp, fp, #16
   13350:	pop	{r4, r5, r6, sl, fp, pc}
   13354:	push	{r4, sl, fp, lr}
   13358:	add	fp, sp, #8
   1335c:	sub	sp, sp, #48	; 0x30
   13360:	movw	r3, #29016	; 0x7158
   13364:	mov	lr, #32
   13368:	mov	ip, r2
   1336c:	cmp	r0, #0
   13370:	movt	r3, #2
   13374:	cmpne	r1, #0
   13378:	add	r2, r3, #16
   1337c:	vld1.64	{d16-d17}, [r3], lr
   13380:	vld1.64	{d20-d21}, [r3]
   13384:	vld1.64	{d18-d19}, [r2]
   13388:	mov	r2, sp
   1338c:	add	r4, r2, #16
   13390:	vst1.64	{d16-d17}, [r2], lr
   13394:	vst1.64	{d20-d21}, [r2]
   13398:	mov	r2, #10
   1339c:	vst1.64	{d18-d19}, [r4]
   133a0:	str	r2, [sp]
   133a4:	bne	133ac <__assert_fail@plt+0x23a4>
   133a8:	bl	10ffc <abort@plt>
   133ac:	str	r1, [sp, #44]	; 0x2c
   133b0:	str	r0, [sp, #40]	; 0x28
   133b4:	mov	r3, sp
   133b8:	mov	r0, #0
   133bc:	mov	r1, ip
   133c0:	mvn	r2, #0
   133c4:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   133c8:	sub	sp, fp, #8
   133cc:	pop	{r4, sl, fp, pc}
   133d0:	push	{r4, r5, fp, lr}
   133d4:	add	fp, sp, #8
   133d8:	sub	sp, sp, #48	; 0x30
   133dc:	mov	ip, r3
   133e0:	movw	r3, #29016	; 0x7158
   133e4:	mov	r4, #32
   133e8:	mov	lr, r2
   133ec:	cmp	r0, #0
   133f0:	movt	r3, #2
   133f4:	cmpne	r1, #0
   133f8:	add	r2, r3, #16
   133fc:	vld1.64	{d16-d17}, [r3], r4
   13400:	vld1.64	{d20-d21}, [r3]
   13404:	vld1.64	{d18-d19}, [r2]
   13408:	mov	r2, sp
   1340c:	add	r5, r2, #16
   13410:	vst1.64	{d16-d17}, [r2], r4
   13414:	vst1.64	{d20-d21}, [r2]
   13418:	mov	r2, #10
   1341c:	vst1.64	{d18-d19}, [r5]
   13420:	str	r2, [sp]
   13424:	bne	1342c <__assert_fail@plt+0x2424>
   13428:	bl	10ffc <abort@plt>
   1342c:	str	r1, [sp, #44]	; 0x2c
   13430:	str	r0, [sp, #40]	; 0x28
   13434:	mov	r3, sp
   13438:	mov	r0, #0
   1343c:	mov	r1, lr
   13440:	mov	r2, ip
   13444:	bl	12ce0 <__assert_fail@plt+0x1cd8>
   13448:	sub	sp, fp, #8
   1344c:	pop	{r4, r5, fp, pc}
   13450:	movw	r3, #28920	; 0x70f8
   13454:	movt	r3, #2
   13458:	b	12ce0 <__assert_fail@plt+0x1cd8>
   1345c:	movw	r3, #28920	; 0x70f8
   13460:	mov	r2, r1
   13464:	mov	r1, r0
   13468:	mov	r0, #0
   1346c:	movt	r3, #2
   13470:	b	12ce0 <__assert_fail@plt+0x1cd8>
   13474:	movw	r3, #28920	; 0x70f8
   13478:	mvn	r2, #0
   1347c:	movt	r3, #2
   13480:	b	12ce0 <__assert_fail@plt+0x1cd8>
   13484:	movw	r3, #28920	; 0x70f8
   13488:	mov	r1, r0
   1348c:	mov	r0, #0
   13490:	mvn	r2, #0
   13494:	movt	r3, #2
   13498:	b	12ce0 <__assert_fail@plt+0x1cd8>
   1349c:	push	{r4, r5, fp, lr}
   134a0:	add	fp, sp, #8
   134a4:	mov	r5, r0
   134a8:	mov	r4, r1
   134ac:	mov	r0, #0
   134b0:	mov	r2, #5
   134b4:	mov	r1, r5
   134b8:	bl	10e40 <dcgettext@plt>
   134bc:	cmp	r0, r5
   134c0:	popne	{r4, r5, fp, pc}
   134c4:	bl	152c8 <__assert_fail@plt+0x42c0>
   134c8:	ldrb	r1, [r0]
   134cc:	and	r1, r1, #223	; 0xdf
   134d0:	cmp	r1, #71	; 0x47
   134d4:	beq	1353c <__assert_fail@plt+0x2534>
   134d8:	cmp	r1, #85	; 0x55
   134dc:	bne	13594 <__assert_fail@plt+0x258c>
   134e0:	ldrb	r1, [r0, #1]
   134e4:	and	r1, r1, #223	; 0xdf
   134e8:	cmp	r1, #84	; 0x54
   134ec:	bne	13594 <__assert_fail@plt+0x258c>
   134f0:	ldrb	r1, [r0, #2]
   134f4:	and	r1, r1, #223	; 0xdf
   134f8:	cmp	r1, #70	; 0x46
   134fc:	bne	13594 <__assert_fail@plt+0x258c>
   13500:	ldrb	r1, [r0, #3]
   13504:	cmp	r1, #45	; 0x2d
   13508:	bne	13594 <__assert_fail@plt+0x258c>
   1350c:	ldrb	r1, [r0, #4]
   13510:	cmp	r1, #56	; 0x38
   13514:	bne	13594 <__assert_fail@plt+0x258c>
   13518:	ldrb	r0, [r0, #5]
   1351c:	cmp	r0, #0
   13520:	bne	13594 <__assert_fail@plt+0x258c>
   13524:	ldrb	r1, [r5]
   13528:	movw	r2, #23385	; 0x5b59
   1352c:	movw	r0, #23389	; 0x5b5d
   13530:	movt	r2, #1
   13534:	movt	r0, #1
   13538:	b	135c4 <__assert_fail@plt+0x25bc>
   1353c:	ldrb	r1, [r0, #1]
   13540:	and	r1, r1, #223	; 0xdf
   13544:	cmp	r1, #66	; 0x42
   13548:	bne	13594 <__assert_fail@plt+0x258c>
   1354c:	ldrb	r1, [r0, #2]
   13550:	cmp	r1, #49	; 0x31
   13554:	bne	13594 <__assert_fail@plt+0x258c>
   13558:	ldrb	r1, [r0, #3]
   1355c:	cmp	r1, #56	; 0x38
   13560:	bne	13594 <__assert_fail@plt+0x258c>
   13564:	ldrb	r1, [r0, #4]
   13568:	cmp	r1, #48	; 0x30
   1356c:	bne	13594 <__assert_fail@plt+0x258c>
   13570:	ldrb	r1, [r0, #5]
   13574:	cmp	r1, #51	; 0x33
   13578:	bne	13594 <__assert_fail@plt+0x258c>
   1357c:	ldrb	r1, [r0, #6]
   13580:	cmp	r1, #48	; 0x30
   13584:	bne	13594 <__assert_fail@plt+0x258c>
   13588:	ldrb	r0, [r0, #7]
   1358c:	cmp	r0, #0
   13590:	beq	135b0 <__assert_fail@plt+0x25a8>
   13594:	movw	r1, #23379	; 0x5b53
   13598:	movw	r0, #23383	; 0x5b57
   1359c:	cmp	r4, #9
   135a0:	movt	r1, #1
   135a4:	movt	r0, #1
   135a8:	moveq	r0, r1
   135ac:	pop	{r4, r5, fp, pc}
   135b0:	ldrb	r1, [r5]
   135b4:	movw	r2, #23393	; 0x5b61
   135b8:	movw	r0, #23397	; 0x5b65
   135bc:	movt	r2, #1
   135c0:	movt	r0, #1
   135c4:	cmp	r1, #96	; 0x60
   135c8:	moveq	r0, r2
   135cc:	pop	{r4, r5, fp, pc}
   135d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135d4:	add	fp, sp, #24
   135d8:	sub	sp, sp, #32
   135dc:	ldr	r6, [fp, #12]
   135e0:	ldr	r7, [fp, #8]
   135e4:	mov	r4, r2
   135e8:	mov	r8, r0
   135ec:	cmp	r1, #0
   135f0:	beq	13618 <__assert_fail@plt+0x2610>
   135f4:	movw	r2, #23484	; 0x5bbc
   135f8:	mov	r5, r1
   135fc:	str	r3, [sp, #4]
   13600:	str	r4, [sp]
   13604:	mov	r0, r8
   13608:	mov	r1, #1
   1360c:	movt	r2, #1
   13610:	mov	r3, r5
   13614:	b	13630 <__assert_fail@plt+0x2628>
   13618:	movw	r2, #23496	; 0x5bc8
   1361c:	str	r3, [sp]
   13620:	mov	r0, r8
   13624:	mov	r1, #1
   13628:	mov	r3, r4
   1362c:	movt	r2, #1
   13630:	bl	10f90 <__fprintf_chk@plt>
   13634:	movw	r1, #23503	; 0x5bcf
   13638:	mov	r0, #0
   1363c:	mov	r2, #5
   13640:	movt	r1, #1
   13644:	bl	10e40 <dcgettext@plt>
   13648:	movw	r2, #24221	; 0x5e9d
   1364c:	mov	r3, r0
   13650:	movw	r0, #2022	; 0x7e6
   13654:	mov	r1, #1
   13658:	movt	r2, #1
   1365c:	str	r0, [sp]
   13660:	mov	r0, r8
   13664:	bl	10f90 <__fprintf_chk@plt>
   13668:	movw	r4, #22376	; 0x5768
   1366c:	mov	r1, r8
   13670:	movt	r4, #1
   13674:	mov	r0, r4
   13678:	bl	10dc8 <fputs_unlocked@plt>
   1367c:	movw	r1, #23507	; 0x5bd3
   13680:	mov	r0, #0
   13684:	mov	r2, #5
   13688:	movt	r1, #1
   1368c:	bl	10e40 <dcgettext@plt>
   13690:	movw	r3, #23678	; 0x5c7e
   13694:	mov	r2, r0
   13698:	mov	r0, r8
   1369c:	mov	r1, #1
   136a0:	movt	r3, #1
   136a4:	bl	10f90 <__fprintf_chk@plt>
   136a8:	mov	r0, r4
   136ac:	mov	r1, r8
   136b0:	bl	10dc8 <fputs_unlocked@plt>
   136b4:	cmp	r6, #9
   136b8:	bhi	136f4 <__assert_fail@plt+0x26ec>
   136bc:	add	r0, pc, #0
   136c0:	ldr	pc, [r0, r6, lsl #2]
   136c4:	andeq	r3, r1, ip, ror #13
   136c8:	andeq	r3, r1, r0, lsl #14
   136cc:	andeq	r3, r1, r0, lsr r7
   136d0:	andeq	r3, r1, r8, asr r7
   136d4:	andeq	r3, r1, r0, lsl #15
   136d8:	andeq	r3, r1, r8, lsr #15
   136dc:	ldrdeq	r3, [r1], -r0
   136e0:	andeq	r3, r1, r8, lsl #16
   136e4:	andeq	r3, r1, r8, lsr #17
   136e8:	andeq	r3, r1, r0, asr r8
   136ec:	sub	sp, fp, #24
   136f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136f4:	movw	r1, #24031	; 0x5ddf
   136f8:	movt	r1, #1
   136fc:	b	13858 <__assert_fail@plt+0x2850>
   13700:	movw	r1, #23712	; 0x5ca0
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	movt	r1, #1
   13710:	bl	10e40 <dcgettext@plt>
   13714:	ldr	r3, [r7]
   13718:	mov	r2, r0
   1371c:	mov	r0, r8
   13720:	mov	r1, #1
   13724:	sub	sp, fp, #24
   13728:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1372c:	b	10f90 <__fprintf_chk@plt>
   13730:	movw	r1, #23728	; 0x5cb0
   13734:	mov	r0, #0
   13738:	mov	r2, #5
   1373c:	movt	r1, #1
   13740:	bl	10e40 <dcgettext@plt>
   13744:	mov	r2, r0
   13748:	ldr	r3, [r7]
   1374c:	ldr	r0, [r7, #4]
   13750:	str	r0, [sp]
   13754:	b	13844 <__assert_fail@plt+0x283c>
   13758:	movw	r1, #23751	; 0x5cc7
   1375c:	mov	r0, #0
   13760:	mov	r2, #5
   13764:	movt	r1, #1
   13768:	bl	10e40 <dcgettext@plt>
   1376c:	mov	r2, r0
   13770:	ldr	r3, [r7]
   13774:	ldmib	r7, {r0, r1}
   13778:	stm	sp, {r0, r1}
   1377c:	b	13844 <__assert_fail@plt+0x283c>
   13780:	movw	r1, #23779	; 0x5ce3
   13784:	mov	r0, #0
   13788:	mov	r2, #5
   1378c:	movt	r1, #1
   13790:	bl	10e40 <dcgettext@plt>
   13794:	ldr	r3, [r7]
   13798:	mov	r2, r0
   1379c:	ldmib	r7, {r0, r1, r7}
   137a0:	stm	sp, {r0, r1, r7}
   137a4:	b	13844 <__assert_fail@plt+0x283c>
   137a8:	movw	r1, #23811	; 0x5d03
   137ac:	mov	r0, #0
   137b0:	mov	r2, #5
   137b4:	movt	r1, #1
   137b8:	bl	10e40 <dcgettext@plt>
   137bc:	ldr	r3, [r7]
   137c0:	mov	r2, r0
   137c4:	ldmib	r7, {r0, r1, r6, r7}
   137c8:	stm	sp, {r0, r1, r6, r7}
   137cc:	b	13844 <__assert_fail@plt+0x283c>
   137d0:	movw	r1, #23847	; 0x5d27
   137d4:	mov	r0, #0
   137d8:	mov	r2, #5
   137dc:	movt	r1, #1
   137e0:	bl	10e40 <dcgettext@plt>
   137e4:	mov	r2, r0
   137e8:	ldr	r3, [r7]
   137ec:	ldmib	r7, {r0, r1, r6}
   137f0:	ldr	r5, [r7, #16]
   137f4:	ldr	r7, [r7, #20]
   137f8:	stm	sp, {r0, r1, r6}
   137fc:	str	r5, [sp, #12]
   13800:	str	r7, [sp, #16]
   13804:	b	13844 <__assert_fail@plt+0x283c>
   13808:	movw	r1, #23887	; 0x5d4f
   1380c:	mov	r0, #0
   13810:	mov	r2, #5
   13814:	movt	r1, #1
   13818:	bl	10e40 <dcgettext@plt>
   1381c:	mov	r2, r0
   13820:	ldr	r3, [r7]
   13824:	ldmib	r7, {r0, r1, r6}
   13828:	ldr	r5, [r7, #16]
   1382c:	ldr	r4, [r7, #20]
   13830:	ldr	r7, [r7, #24]
   13834:	stm	sp, {r0, r1, r6}
   13838:	str	r5, [sp, #12]
   1383c:	str	r4, [sp, #16]
   13840:	str	r7, [sp, #20]
   13844:	mov	r0, r8
   13848:	mov	r1, #1
   1384c:	b	138f8 <__assert_fail@plt+0x28f0>
   13850:	movw	r1, #23979	; 0x5dab
   13854:	movt	r1, #1
   13858:	mov	r0, #0
   1385c:	mov	r2, #5
   13860:	bl	10e40 <dcgettext@plt>
   13864:	mov	ip, r0
   13868:	ldr	r3, [r7]
   1386c:	ldr	r0, [r7, #4]
   13870:	ldr	r1, [r7, #8]
   13874:	ldr	r6, [r7, #12]
   13878:	ldr	r5, [r7, #16]
   1387c:	ldr	r4, [r7, #20]
   13880:	ldr	r2, [r7, #24]
   13884:	ldr	lr, [r7, #28]
   13888:	ldr	r7, [r7, #32]
   1388c:	stm	sp, {r0, r1, r6}
   13890:	str	r5, [sp, #12]
   13894:	str	r4, [sp, #16]
   13898:	str	r2, [sp, #20]
   1389c:	str	lr, [sp, #24]
   138a0:	str	r7, [sp, #28]
   138a4:	b	138ec <__assert_fail@plt+0x28e4>
   138a8:	movw	r1, #23931	; 0x5d7b
   138ac:	mov	r0, #0
   138b0:	mov	r2, #5
   138b4:	movt	r1, #1
   138b8:	bl	10e40 <dcgettext@plt>
   138bc:	mov	ip, r0
   138c0:	ldr	r3, [r7]
   138c4:	ldmib	r7, {r0, r1, r6}
   138c8:	ldr	r5, [r7, #16]
   138cc:	ldr	r4, [r7, #20]
   138d0:	ldr	r2, [r7, #24]
   138d4:	ldr	r7, [r7, #28]
   138d8:	stm	sp, {r0, r1, r6}
   138dc:	str	r5, [sp, #12]
   138e0:	str	r4, [sp, #16]
   138e4:	str	r2, [sp, #20]
   138e8:	str	r7, [sp, #24]
   138ec:	mov	r0, r8
   138f0:	mov	r1, #1
   138f4:	mov	r2, ip
   138f8:	bl	10f90 <__fprintf_chk@plt>
   138fc:	sub	sp, fp, #24
   13900:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13904:	push	{r4, sl, fp, lr}
   13908:	add	fp, sp, #8
   1390c:	sub	sp, sp, #8
   13910:	ldr	ip, [fp, #8]
   13914:	mov	lr, #0
   13918:	ldr	r4, [ip, lr, lsl #2]
   1391c:	add	lr, lr, #1
   13920:	cmp	r4, #0
   13924:	bne	13918 <__assert_fail@plt+0x2910>
   13928:	sub	r4, lr, #1
   1392c:	str	ip, [sp]
   13930:	str	r4, [sp, #4]
   13934:	bl	135d0 <__assert_fail@plt+0x25c8>
   13938:	sub	sp, fp, #8
   1393c:	pop	{r4, sl, fp, pc}
   13940:	push	{fp, lr}
   13944:	mov	fp, sp
   13948:	sub	sp, sp, #48	; 0x30
   1394c:	ldr	ip, [fp, #8]
   13950:	ldr	lr, [ip]
   13954:	cmp	lr, #0
   13958:	str	lr, [sp, #8]
   1395c:	beq	139f8 <__assert_fail@plt+0x29f0>
   13960:	ldr	lr, [ip, #4]
   13964:	cmp	lr, #0
   13968:	str	lr, [sp, #12]
   1396c:	beq	13a00 <__assert_fail@plt+0x29f8>
   13970:	ldr	lr, [ip, #8]
   13974:	cmp	lr, #0
   13978:	str	lr, [sp, #16]
   1397c:	beq	13a08 <__assert_fail@plt+0x2a00>
   13980:	ldr	lr, [ip, #12]
   13984:	cmp	lr, #0
   13988:	str	lr, [sp, #20]
   1398c:	beq	13a10 <__assert_fail@plt+0x2a08>
   13990:	ldr	lr, [ip, #16]
   13994:	cmp	lr, #0
   13998:	str	lr, [sp, #24]
   1399c:	beq	13a18 <__assert_fail@plt+0x2a10>
   139a0:	ldr	lr, [ip, #20]
   139a4:	cmp	lr, #0
   139a8:	str	lr, [sp, #28]
   139ac:	beq	13a20 <__assert_fail@plt+0x2a18>
   139b0:	ldr	lr, [ip, #24]
   139b4:	cmp	lr, #0
   139b8:	str	lr, [sp, #32]
   139bc:	beq	13a28 <__assert_fail@plt+0x2a20>
   139c0:	ldr	lr, [ip, #28]
   139c4:	cmp	lr, #0
   139c8:	str	lr, [sp, #36]	; 0x24
   139cc:	beq	13a30 <__assert_fail@plt+0x2a28>
   139d0:	ldr	lr, [ip, #32]
   139d4:	cmp	lr, #0
   139d8:	str	lr, [sp, #40]	; 0x28
   139dc:	beq	13a38 <__assert_fail@plt+0x2a30>
   139e0:	ldr	lr, [ip, #36]	; 0x24
   139e4:	mov	ip, #10
   139e8:	cmp	lr, #0
   139ec:	str	lr, [sp, #44]	; 0x2c
   139f0:	movweq	ip, #9
   139f4:	b	13a3c <__assert_fail@plt+0x2a34>
   139f8:	mov	ip, #0
   139fc:	b	13a3c <__assert_fail@plt+0x2a34>
   13a00:	mov	ip, #1
   13a04:	b	13a3c <__assert_fail@plt+0x2a34>
   13a08:	mov	ip, #2
   13a0c:	b	13a3c <__assert_fail@plt+0x2a34>
   13a10:	mov	ip, #3
   13a14:	b	13a3c <__assert_fail@plt+0x2a34>
   13a18:	mov	ip, #4
   13a1c:	b	13a3c <__assert_fail@plt+0x2a34>
   13a20:	mov	ip, #5
   13a24:	b	13a3c <__assert_fail@plt+0x2a34>
   13a28:	mov	ip, #6
   13a2c:	b	13a3c <__assert_fail@plt+0x2a34>
   13a30:	mov	ip, #7
   13a34:	b	13a3c <__assert_fail@plt+0x2a34>
   13a38:	mov	ip, #8
   13a3c:	add	lr, sp, #8
   13a40:	str	ip, [sp, #4]
   13a44:	str	lr, [sp]
   13a48:	bl	135d0 <__assert_fail@plt+0x25c8>
   13a4c:	mov	sp, fp
   13a50:	pop	{fp, pc}
   13a54:	push	{fp, lr}
   13a58:	mov	fp, sp
   13a5c:	sub	sp, sp, #56	; 0x38
   13a60:	add	ip, fp, #8
   13a64:	str	ip, [sp, #12]
   13a68:	ldr	lr, [fp, #8]
   13a6c:	cmp	lr, #0
   13a70:	str	lr, [sp, #16]
   13a74:	beq	13b10 <__assert_fail@plt+0x2b08>
   13a78:	ldr	lr, [ip, #4]
   13a7c:	cmp	lr, #0
   13a80:	str	lr, [sp, #20]
   13a84:	beq	13b18 <__assert_fail@plt+0x2b10>
   13a88:	ldr	lr, [ip, #8]
   13a8c:	cmp	lr, #0
   13a90:	str	lr, [sp, #24]
   13a94:	beq	13b20 <__assert_fail@plt+0x2b18>
   13a98:	ldr	lr, [ip, #12]
   13a9c:	cmp	lr, #0
   13aa0:	str	lr, [sp, #28]
   13aa4:	beq	13b28 <__assert_fail@plt+0x2b20>
   13aa8:	ldr	lr, [ip, #16]
   13aac:	cmp	lr, #0
   13ab0:	str	lr, [sp, #32]
   13ab4:	beq	13b30 <__assert_fail@plt+0x2b28>
   13ab8:	ldr	lr, [ip, #20]
   13abc:	cmp	lr, #0
   13ac0:	str	lr, [sp, #36]	; 0x24
   13ac4:	beq	13b38 <__assert_fail@plt+0x2b30>
   13ac8:	ldr	lr, [ip, #24]
   13acc:	cmp	lr, #0
   13ad0:	str	lr, [sp, #40]	; 0x28
   13ad4:	beq	13b40 <__assert_fail@plt+0x2b38>
   13ad8:	ldr	lr, [ip, #28]
   13adc:	cmp	lr, #0
   13ae0:	str	lr, [sp, #44]	; 0x2c
   13ae4:	beq	13b48 <__assert_fail@plt+0x2b40>
   13ae8:	ldr	lr, [ip, #32]
   13aec:	cmp	lr, #0
   13af0:	str	lr, [sp, #48]	; 0x30
   13af4:	beq	13b50 <__assert_fail@plt+0x2b48>
   13af8:	ldr	lr, [ip, #36]	; 0x24
   13afc:	mov	ip, #10
   13b00:	cmp	lr, #0
   13b04:	str	lr, [sp, #52]	; 0x34
   13b08:	movweq	ip, #9
   13b0c:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b10:	mov	ip, #0
   13b14:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b18:	mov	ip, #1
   13b1c:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b20:	mov	ip, #2
   13b24:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b28:	mov	ip, #3
   13b2c:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b30:	mov	ip, #4
   13b34:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b38:	mov	ip, #5
   13b3c:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b40:	mov	ip, #6
   13b44:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b48:	mov	ip, #7
   13b4c:	b	13b54 <__assert_fail@plt+0x2b4c>
   13b50:	mov	ip, #8
   13b54:	add	lr, sp, #16
   13b58:	str	ip, [sp, #4]
   13b5c:	str	lr, [sp]
   13b60:	bl	135d0 <__assert_fail@plt+0x25c8>
   13b64:	mov	sp, fp
   13b68:	pop	{fp, pc}
   13b6c:	push	{fp, lr}
   13b70:	mov	fp, sp
   13b74:	movw	r0, #28988	; 0x713c
   13b78:	movt	r0, #2
   13b7c:	ldr	r1, [r0]
   13b80:	movw	r0, #22376	; 0x5768
   13b84:	movt	r0, #1
   13b88:	bl	10dc8 <fputs_unlocked@plt>
   13b8c:	movw	r1, #24091	; 0x5e1b
   13b90:	mov	r0, #0
   13b94:	mov	r2, #5
   13b98:	movt	r1, #1
   13b9c:	bl	10e40 <dcgettext@plt>
   13ba0:	movw	r2, #24111	; 0x5e2f
   13ba4:	mov	r1, r0
   13ba8:	mov	r0, #1
   13bac:	movt	r2, #1
   13bb0:	bl	10f78 <__printf_chk@plt>
   13bb4:	movw	r1, #24133	; 0x5e45
   13bb8:	mov	r0, #0
   13bbc:	mov	r2, #5
   13bc0:	movt	r1, #1
   13bc4:	bl	10e40 <dcgettext@plt>
   13bc8:	movw	r2, #22624	; 0x5860
   13bcc:	movw	r3, #22811	; 0x591b
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, #1
   13bd8:	movt	r2, #1
   13bdc:	movt	r3, #1
   13be0:	bl	10f78 <__printf_chk@plt>
   13be4:	movw	r1, #24153	; 0x5e59
   13be8:	mov	r0, #0
   13bec:	mov	r2, #5
   13bf0:	movt	r1, #1
   13bf4:	bl	10e40 <dcgettext@plt>
   13bf8:	movw	r2, #24192	; 0x5e80
   13bfc:	mov	r1, r0
   13c00:	mov	r0, #1
   13c04:	movt	r2, #1
   13c08:	pop	{fp, lr}
   13c0c:	b	10f78 <__printf_chk@plt>
   13c10:	push	{r4, r5, r6, sl, fp, lr}
   13c14:	add	fp, sp, #16
   13c18:	mov	r4, r2
   13c1c:	mov	r5, r1
   13c20:	mov	r6, r0
   13c24:	bl	15364 <__assert_fail@plt+0x435c>
   13c28:	cmp	r0, #0
   13c2c:	popne	{r4, r5, r6, sl, fp, pc}
   13c30:	cmp	r6, #0
   13c34:	beq	13c48 <__assert_fail@plt+0x2c40>
   13c38:	cmp	r5, #0
   13c3c:	cmpne	r4, #0
   13c40:	bne	13c48 <__assert_fail@plt+0x2c40>
   13c44:	pop	{r4, r5, r6, sl, fp, pc}
   13c48:	bl	141c4 <__assert_fail@plt+0x31bc>
   13c4c:	push	{r4, r5, r6, sl, fp, lr}
   13c50:	add	fp, sp, #16
   13c54:	mov	r4, r2
   13c58:	mov	r5, r1
   13c5c:	mov	r6, r0
   13c60:	bl	15364 <__assert_fail@plt+0x435c>
   13c64:	cmp	r0, #0
   13c68:	popne	{r4, r5, r6, sl, fp, pc}
   13c6c:	cmp	r6, #0
   13c70:	beq	13c84 <__assert_fail@plt+0x2c7c>
   13c74:	cmp	r5, #0
   13c78:	cmpne	r4, #0
   13c7c:	bne	13c84 <__assert_fail@plt+0x2c7c>
   13c80:	pop	{r4, r5, r6, sl, fp, pc}
   13c84:	bl	141c4 <__assert_fail@plt+0x31bc>
   13c88:	push	{fp, lr}
   13c8c:	mov	fp, sp
   13c90:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   13c94:	cmp	r0, #0
   13c98:	popne	{fp, pc}
   13c9c:	bl	141c4 <__assert_fail@plt+0x31bc>
   13ca0:	push	{fp, lr}
   13ca4:	mov	fp, sp
   13ca8:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   13cac:	cmp	r0, #0
   13cb0:	popne	{fp, pc}
   13cb4:	bl	141c4 <__assert_fail@plt+0x31bc>
   13cb8:	push	{fp, lr}
   13cbc:	mov	fp, sp
   13cc0:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   13cc4:	cmp	r0, #0
   13cc8:	popne	{fp, pc}
   13ccc:	bl	141c4 <__assert_fail@plt+0x31bc>
   13cd0:	push	{r4, r5, fp, lr}
   13cd4:	add	fp, sp, #8
   13cd8:	mov	r4, r1
   13cdc:	mov	r5, r0
   13ce0:	bl	15028 <__assert_fail@plt+0x4020>
   13ce4:	cmp	r0, #0
   13ce8:	popne	{r4, r5, fp, pc}
   13cec:	cmp	r5, #0
   13cf0:	beq	13d00 <__assert_fail@plt+0x2cf8>
   13cf4:	cmp	r4, #0
   13cf8:	bne	13d00 <__assert_fail@plt+0x2cf8>
   13cfc:	pop	{r4, r5, fp, pc}
   13d00:	bl	141c4 <__assert_fail@plt+0x31bc>
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	cmp	r1, #0
   13d10:	orreq	r1, r1, #1
   13d14:	bl	15028 <__assert_fail@plt+0x4020>
   13d18:	cmp	r0, #0
   13d1c:	popne	{fp, pc}
   13d20:	bl	141c4 <__assert_fail@plt+0x31bc>
   13d24:	push	{fp, lr}
   13d28:	mov	fp, sp
   13d2c:	clz	r3, r2
   13d30:	lsr	ip, r3, #5
   13d34:	clz	r3, r1
   13d38:	lsr	r3, r3, #5
   13d3c:	orrs	r3, r3, ip
   13d40:	movwne	r1, #1
   13d44:	movwne	r2, #1
   13d48:	bl	15364 <__assert_fail@plt+0x435c>
   13d4c:	cmp	r0, #0
   13d50:	popne	{fp, pc}
   13d54:	bl	141c4 <__assert_fail@plt+0x31bc>
   13d58:	push	{fp, lr}
   13d5c:	mov	fp, sp
   13d60:	mov	r2, r1
   13d64:	mov	r1, r0
   13d68:	mov	r0, #0
   13d6c:	bl	15364 <__assert_fail@plt+0x435c>
   13d70:	cmp	r0, #0
   13d74:	popne	{fp, pc}
   13d78:	bl	141c4 <__assert_fail@plt+0x31bc>
   13d7c:	push	{fp, lr}
   13d80:	mov	fp, sp
   13d84:	mov	r2, r1
   13d88:	mov	r1, r0
   13d8c:	clz	r0, r2
   13d90:	clz	r3, r1
   13d94:	lsr	r0, r0, #5
   13d98:	lsr	r3, r3, #5
   13d9c:	orrs	r0, r3, r0
   13da0:	mov	r0, #0
   13da4:	movwne	r1, #1
   13da8:	movwne	r2, #1
   13dac:	bl	15364 <__assert_fail@plt+0x435c>
   13db0:	cmp	r0, #0
   13db4:	popne	{fp, pc}
   13db8:	bl	141c4 <__assert_fail@plt+0x31bc>
   13dbc:	push	{r4, r5, r6, sl, fp, lr}
   13dc0:	add	fp, sp, #16
   13dc4:	ldr	r5, [r1]
   13dc8:	mov	r4, r1
   13dcc:	mov	r6, r0
   13dd0:	cmp	r0, #0
   13dd4:	beq	13dec <__assert_fail@plt+0x2de4>
   13dd8:	mov	r0, #1
   13ddc:	add	r0, r0, r5, lsr #1
   13de0:	adds	r5, r5, r0
   13de4:	bcc	13df4 <__assert_fail@plt+0x2dec>
   13de8:	b	13e30 <__assert_fail@plt+0x2e28>
   13dec:	cmp	r5, #0
   13df0:	movweq	r5, #64	; 0x40
   13df4:	mov	r0, r6
   13df8:	mov	r1, r5
   13dfc:	mov	r2, #1
   13e00:	bl	15364 <__assert_fail@plt+0x435c>
   13e04:	cmp	r5, #0
   13e08:	mov	r1, r5
   13e0c:	movwne	r1, #1
   13e10:	cmp	r0, #0
   13e14:	bne	13e28 <__assert_fail@plt+0x2e20>
   13e18:	clz	r2, r6
   13e1c:	lsr	r2, r2, #5
   13e20:	orrs	r1, r2, r1
   13e24:	bne	13e30 <__assert_fail@plt+0x2e28>
   13e28:	str	r5, [r4]
   13e2c:	pop	{r4, r5, r6, sl, fp, pc}
   13e30:	bl	141c4 <__assert_fail@plt+0x31bc>
   13e34:	push	{r4, r5, r6, r7, fp, lr}
   13e38:	add	fp, sp, #16
   13e3c:	ldr	r5, [r1]
   13e40:	mov	r6, r2
   13e44:	mov	r4, r1
   13e48:	mov	r7, r0
   13e4c:	cmp	r0, #0
   13e50:	beq	13e68 <__assert_fail@plt+0x2e60>
   13e54:	mov	r0, #1
   13e58:	add	r0, r0, r5, lsr #1
   13e5c:	adds	r5, r5, r0
   13e60:	bcc	13e80 <__assert_fail@plt+0x2e78>
   13e64:	b	13eb4 <__assert_fail@plt+0x2eac>
   13e68:	cmp	r5, #0
   13e6c:	bne	13e80 <__assert_fail@plt+0x2e78>
   13e70:	mov	r0, #64	; 0x40
   13e74:	cmp	r6, #64	; 0x40
   13e78:	udiv	r5, r0, r6
   13e7c:	addhi	r5, r5, #1
   13e80:	mov	r0, r7
   13e84:	mov	r1, r5
   13e88:	mov	r2, r6
   13e8c:	bl	15364 <__assert_fail@plt+0x435c>
   13e90:	cmp	r0, #0
   13e94:	bne	13eac <__assert_fail@plt+0x2ea4>
   13e98:	cmp	r7, #0
   13e9c:	beq	13eb4 <__assert_fail@plt+0x2eac>
   13ea0:	cmp	r6, #0
   13ea4:	cmpne	r5, #0
   13ea8:	bne	13eb4 <__assert_fail@plt+0x2eac>
   13eac:	str	r5, [r4]
   13eb0:	pop	{r4, r5, r6, r7, fp, pc}
   13eb4:	bl	141c4 <__assert_fail@plt+0x31bc>
   13eb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ebc:	add	fp, sp, #24
   13ec0:	mov	r8, r1
   13ec4:	ldr	r1, [r1]
   13ec8:	mov	r5, r0
   13ecc:	add	r0, r1, r1, asr #1
   13ed0:	cmp	r0, r1
   13ed4:	mvnvs	r0, #-2147483648	; 0x80000000
   13ed8:	cmp	r0, r3
   13edc:	mov	r7, r0
   13ee0:	movgt	r7, r3
   13ee4:	cmn	r3, #1
   13ee8:	movle	r7, r0
   13eec:	ldr	r0, [fp, #8]
   13ef0:	cmn	r0, #1
   13ef4:	ble	13f1c <__assert_fail@plt+0x2f14>
   13ef8:	cmp	r0, #0
   13efc:	beq	13f70 <__assert_fail@plt+0x2f68>
   13f00:	cmn	r7, #1
   13f04:	ble	13f44 <__assert_fail@plt+0x2f3c>
   13f08:	mvn	r4, #-2147483648	; 0x80000000
   13f0c:	udiv	r6, r4, r0
   13f10:	cmp	r6, r7
   13f14:	bge	13f70 <__assert_fail@plt+0x2f68>
   13f18:	b	13f80 <__assert_fail@plt+0x2f78>
   13f1c:	cmn	r7, #1
   13f20:	ble	13f60 <__assert_fail@plt+0x2f58>
   13f24:	cmn	r0, #1
   13f28:	beq	13f70 <__assert_fail@plt+0x2f68>
   13f2c:	mov	r6, #-2147483648	; 0x80000000
   13f30:	mvn	r4, #-2147483648	; 0x80000000
   13f34:	sdiv	r6, r6, r0
   13f38:	cmp	r6, r7
   13f3c:	bge	13f70 <__assert_fail@plt+0x2f68>
   13f40:	b	13f80 <__assert_fail@plt+0x2f78>
   13f44:	beq	13f70 <__assert_fail@plt+0x2f68>
   13f48:	mov	r6, #-2147483648	; 0x80000000
   13f4c:	mvn	r4, #-2147483648	; 0x80000000
   13f50:	sdiv	r6, r6, r7
   13f54:	cmp	r6, r0
   13f58:	bge	13f70 <__assert_fail@plt+0x2f68>
   13f5c:	b	13f80 <__assert_fail@plt+0x2f78>
   13f60:	mvn	r4, #-2147483648	; 0x80000000
   13f64:	sdiv	r6, r4, r0
   13f68:	cmp	r7, r6
   13f6c:	blt	13f80 <__assert_fail@plt+0x2f78>
   13f70:	mul	r6, r7, r0
   13f74:	mov	r4, #64	; 0x40
   13f78:	cmp	r6, #63	; 0x3f
   13f7c:	bgt	13f88 <__assert_fail@plt+0x2f80>
   13f80:	sdiv	r7, r4, r0
   13f84:	mul	r6, r7, r0
   13f88:	cmp	r5, #0
   13f8c:	moveq	r4, #0
   13f90:	streq	r4, [r8]
   13f94:	sub	r4, r7, r1
   13f98:	cmp	r4, r2
   13f9c:	bge	14048 <__assert_fail@plt+0x3040>
   13fa0:	add	r7, r1, r2
   13fa4:	mov	r6, #0
   13fa8:	mov	r2, #0
   13fac:	cmp	r7, r3
   13fb0:	movwgt	r6, #1
   13fb4:	cmn	r3, #1
   13fb8:	movwgt	r2, #1
   13fbc:	cmp	r7, r1
   13fc0:	bvs	1407c <__assert_fail@plt+0x3074>
   13fc4:	ands	r1, r2, r6
   13fc8:	bne	1407c <__assert_fail@plt+0x3074>
   13fcc:	cmn	r0, #1
   13fd0:	ble	13ff8 <__assert_fail@plt+0x2ff0>
   13fd4:	cmp	r0, #0
   13fd8:	beq	14044 <__assert_fail@plt+0x303c>
   13fdc:	cmn	r7, #1
   13fe0:	ble	1401c <__assert_fail@plt+0x3014>
   13fe4:	mvn	r1, #-2147483648	; 0x80000000
   13fe8:	udiv	r1, r1, r0
   13fec:	cmp	r1, r7
   13ff0:	bge	14044 <__assert_fail@plt+0x303c>
   13ff4:	b	1407c <__assert_fail@plt+0x3074>
   13ff8:	cmn	r7, #1
   13ffc:	ble	14034 <__assert_fail@plt+0x302c>
   14000:	cmn	r0, #1
   14004:	beq	14044 <__assert_fail@plt+0x303c>
   14008:	mov	r1, #-2147483648	; 0x80000000
   1400c:	sdiv	r1, r1, r0
   14010:	cmp	r1, r7
   14014:	bge	14044 <__assert_fail@plt+0x303c>
   14018:	b	1407c <__assert_fail@plt+0x3074>
   1401c:	beq	14044 <__assert_fail@plt+0x303c>
   14020:	mov	r1, #-2147483648	; 0x80000000
   14024:	sdiv	r1, r1, r7
   14028:	cmp	r1, r0
   1402c:	bge	14044 <__assert_fail@plt+0x303c>
   14030:	b	1407c <__assert_fail@plt+0x3074>
   14034:	mvn	r1, #-2147483648	; 0x80000000
   14038:	sdiv	r1, r1, r0
   1403c:	cmp	r7, r1
   14040:	blt	1407c <__assert_fail@plt+0x3074>
   14044:	mul	r6, r7, r0
   14048:	mov	r0, r5
   1404c:	mov	r1, r6
   14050:	bl	15028 <__assert_fail@plt+0x4020>
   14054:	cmp	r6, #0
   14058:	movwne	r6, #1
   1405c:	cmp	r0, #0
   14060:	bne	14074 <__assert_fail@plt+0x306c>
   14064:	clz	r1, r5
   14068:	lsr	r1, r1, #5
   1406c:	orrs	r1, r1, r6
   14070:	bne	1407c <__assert_fail@plt+0x3074>
   14074:	str	r7, [r8]
   14078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1407c:	bl	141c4 <__assert_fail@plt+0x31bc>
   14080:	push	{fp, lr}
   14084:	mov	fp, sp
   14088:	mov	r1, #1
   1408c:	bl	14fa4 <__assert_fail@plt+0x3f9c>
   14090:	cmp	r0, #0
   14094:	popne	{fp, pc}
   14098:	bl	141c4 <__assert_fail@plt+0x31bc>
   1409c:	push	{fp, lr}
   140a0:	mov	fp, sp
   140a4:	bl	14fa4 <__assert_fail@plt+0x3f9c>
   140a8:	cmp	r0, #0
   140ac:	popne	{fp, pc}
   140b0:	bl	141c4 <__assert_fail@plt+0x31bc>
   140b4:	push	{fp, lr}
   140b8:	mov	fp, sp
   140bc:	mov	r1, #1
   140c0:	bl	14fa4 <__assert_fail@plt+0x3f9c>
   140c4:	cmp	r0, #0
   140c8:	popne	{fp, pc}
   140cc:	bl	141c4 <__assert_fail@plt+0x31bc>
   140d0:	push	{fp, lr}
   140d4:	mov	fp, sp
   140d8:	bl	14fa4 <__assert_fail@plt+0x3f9c>
   140dc:	cmp	r0, #0
   140e0:	popne	{fp, pc}
   140e4:	bl	141c4 <__assert_fail@plt+0x31bc>
   140e8:	push	{r4, r5, fp, lr}
   140ec:	add	fp, sp, #8
   140f0:	mov	r5, r0
   140f4:	mov	r0, r1
   140f8:	mov	r4, r1
   140fc:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   14100:	cmp	r0, #0
   14104:	beq	14118 <__assert_fail@plt+0x3110>
   14108:	mov	r1, r5
   1410c:	mov	r2, r4
   14110:	pop	{r4, r5, fp, lr}
   14114:	b	10e10 <memcpy@plt>
   14118:	bl	141c4 <__assert_fail@plt+0x31bc>
   1411c:	push	{r4, r5, fp, lr}
   14120:	add	fp, sp, #8
   14124:	mov	r5, r0
   14128:	mov	r0, r1
   1412c:	mov	r4, r1
   14130:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   14134:	cmp	r0, #0
   14138:	beq	1414c <__assert_fail@plt+0x3144>
   1413c:	mov	r1, r5
   14140:	mov	r2, r4
   14144:	pop	{r4, r5, fp, lr}
   14148:	b	10e10 <memcpy@plt>
   1414c:	bl	141c4 <__assert_fail@plt+0x31bc>
   14150:	push	{r4, r5, fp, lr}
   14154:	add	fp, sp, #8
   14158:	mov	r5, r0
   1415c:	add	r0, r1, #1
   14160:	mov	r4, r1
   14164:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   14168:	cmp	r0, #0
   1416c:	beq	14188 <__assert_fail@plt+0x3180>
   14170:	mov	r1, #0
   14174:	mov	r2, r4
   14178:	strb	r1, [r0, r4]
   1417c:	mov	r1, r5
   14180:	pop	{r4, r5, fp, lr}
   14184:	b	10e10 <memcpy@plt>
   14188:	bl	141c4 <__assert_fail@plt+0x31bc>
   1418c:	push	{r4, r5, fp, lr}
   14190:	add	fp, sp, #8
   14194:	mov	r4, r0
   14198:	bl	10f3c <strlen@plt>
   1419c:	add	r5, r0, #1
   141a0:	mov	r0, r5
   141a4:	bl	14ff8 <__assert_fail@plt+0x3ff0>
   141a8:	cmp	r0, #0
   141ac:	beq	141c0 <__assert_fail@plt+0x31b8>
   141b0:	mov	r1, r4
   141b4:	mov	r2, r5
   141b8:	pop	{r4, r5, fp, lr}
   141bc:	b	10e10 <memcpy@plt>
   141c0:	bl	141c4 <__assert_fail@plt+0x31bc>
   141c4:	push	{fp, lr}
   141c8:	mov	fp, sp
   141cc:	movw	r0, #28900	; 0x70e4
   141d0:	movw	r1, #24268	; 0x5ecc
   141d4:	mov	r2, #5
   141d8:	movt	r0, #2
   141dc:	movt	r1, #1
   141e0:	ldr	r4, [r0]
   141e4:	mov	r0, #0
   141e8:	bl	10e40 <dcgettext@plt>
   141ec:	movw	r2, #23199	; 0x5a9f
   141f0:	mov	r3, r0
   141f4:	mov	r0, r4
   141f8:	mov	r1, #0
   141fc:	movt	r2, #1
   14200:	bl	10eb8 <error@plt>
   14204:	bl	10ffc <abort@plt>
   14208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1420c:	add	fp, sp, #24
   14210:	sub	sp, sp, #16
   14214:	mov	r8, r0
   14218:	ldr	r0, [fp, #16]
   1421c:	mov	r5, r3
   14220:	mov	r6, r2
   14224:	mov	r2, r1
   14228:	add	r3, sp, #8
   1422c:	mov	r1, #0
   14230:	str	r0, [sp]
   14234:	mov	r0, r8
   14238:	bl	14304 <__assert_fail@plt+0x32fc>
   1423c:	cmp	r0, #0
   14240:	bne	142cc <__assert_fail@plt+0x32c4>
   14244:	ldr	r4, [sp, #8]
   14248:	ldr	r7, [sp, #12]
   1424c:	subs	r0, r4, r6
   14250:	sbcs	r0, r7, r5
   14254:	bcc	14278 <__assert_fail@plt+0x3270>
   14258:	ldr	r1, [fp, #8]
   1425c:	ldr	r0, [fp, #12]
   14260:	subs	r1, r1, r4
   14264:	sbcs	r0, r0, r7
   14268:	movcs	r0, r4
   1426c:	movcs	r1, r7
   14270:	subcs	sp, fp, #24
   14274:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14278:	bl	10f54 <__errno_location@plt>
   1427c:	subs	r1, r4, #1073741824	; 0x40000000
   14280:	sbcs	r1, r7, #0
   14284:	movcc	r1, #34	; 0x22
   14288:	movcs	r1, #75	; 0x4b
   1428c:	str	r1, [r0]
   14290:	ldr	r6, [r0]
   14294:	ldr	r4, [fp, #24]
   14298:	ldr	r5, [fp, #20]
   1429c:	mov	r0, r8
   142a0:	bl	13484 <__assert_fail@plt+0x247c>
   142a4:	subs	r1, r6, #22
   142a8:	movw	r2, #23195	; 0x5a9b
   142ac:	str	r0, [sp]
   142b0:	mov	r3, r5
   142b4:	movne	r1, r6
   142b8:	cmp	r4, #0
   142bc:	movt	r2, #1
   142c0:	movweq	r4, #1
   142c4:	mov	r0, r4
   142c8:	bl	10eb8 <error@plt>
   142cc:	cmp	r0, #1
   142d0:	beq	142e8 <__assert_fail@plt+0x32e0>
   142d4:	cmp	r0, #3
   142d8:	bne	142f4 <__assert_fail@plt+0x32ec>
   142dc:	bl	10f54 <__errno_location@plt>
   142e0:	mov	r1, #0
   142e4:	b	1428c <__assert_fail@plt+0x3284>
   142e8:	bl	10f54 <__errno_location@plt>
   142ec:	mov	r1, #75	; 0x4b
   142f0:	b	1428c <__assert_fail@plt+0x3284>
   142f4:	bl	10f54 <__errno_location@plt>
   142f8:	b	14290 <__assert_fail@plt+0x3288>
   142fc:	mov	r1, #10
   14300:	b	14208 <__assert_fail@plt+0x3200>
   14304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14308:	add	fp, sp, #28
   1430c:	sub	sp, sp, #44	; 0x2c
   14310:	cmp	r2, #37	; 0x25
   14314:	bcs	14f84 <__assert_fail@plt+0x3f7c>
   14318:	ldr	sl, [fp, #8]
   1431c:	mov	r6, r2
   14320:	mov	r7, r1
   14324:	mov	r4, r0
   14328:	str	r3, [sp, #36]	; 0x24
   1432c:	bl	10f54 <__errno_location@plt>
   14330:	mov	r5, r0
   14334:	mov	r0, #0
   14338:	str	r0, [r5]
   1433c:	bl	10f0c <__ctype_b_loc@plt>
   14340:	ldr	r1, [r0]
   14344:	mov	r2, r4
   14348:	ldrb	r0, [r2], #1
   1434c:	add	r3, r1, r0, lsl #1
   14350:	ldrb	r3, [r3, #1]
   14354:	tst	r3, #32
   14358:	bne	14348 <__assert_fail@plt+0x3340>
   1435c:	cmp	r7, #0
   14360:	sub	r9, fp, #32
   14364:	mov	r8, #4
   14368:	movne	r9, r7
   1436c:	cmp	r0, #45	; 0x2d
   14370:	beq	14f78 <__assert_fail@plt+0x3f70>
   14374:	mov	r0, r4
   14378:	mov	r1, r9
   1437c:	mov	r2, r6
   14380:	mov	r3, #0
   14384:	bl	10e1c <__strtoull_internal@plt>
   14388:	mov	r7, r1
   1438c:	ldr	r1, [r9]
   14390:	cmp	r1, r4
   14394:	beq	143c0 <__assert_fail@plt+0x33b8>
   14398:	mov	r6, r0
   1439c:	ldr	r0, [r5]
   143a0:	cmp	r0, #0
   143a4:	beq	143fc <__assert_fail@plt+0x33f4>
   143a8:	cmp	r0, #34	; 0x22
   143ac:	bne	14f78 <__assert_fail@plt+0x3f70>
   143b0:	mov	r8, #1
   143b4:	cmp	sl, #0
   143b8:	bne	14408 <__assert_fail@plt+0x3400>
   143bc:	b	14f70 <__assert_fail@plt+0x3f68>
   143c0:	cmp	sl, #0
   143c4:	beq	14f78 <__assert_fail@plt+0x3f70>
   143c8:	mov	r5, r1
   143cc:	ldrb	r1, [r4]
   143d0:	cmp	r1, #0
   143d4:	beq	14f78 <__assert_fail@plt+0x3f70>
   143d8:	mov	r0, sl
   143dc:	bl	10f48 <strchr@plt>
   143e0:	cmp	r0, #0
   143e4:	beq	14f78 <__assert_fail@plt+0x3f70>
   143e8:	mov	r1, r5
   143ec:	mov	r8, #0
   143f0:	mov	r6, #1
   143f4:	mov	r7, #0
   143f8:	b	14408 <__assert_fail@plt+0x3400>
   143fc:	mov	r8, r0
   14400:	cmp	sl, #0
   14404:	beq	14f70 <__assert_fail@plt+0x3f68>
   14408:	ldrb	r4, [r1]
   1440c:	cmp	r4, #0
   14410:	beq	14f70 <__assert_fail@plt+0x3f68>
   14414:	str	r1, [sp, #32]
   14418:	mov	r0, sl
   1441c:	mov	r1, r4
   14420:	bl	10f48 <strchr@plt>
   14424:	cmp	r0, #0
   14428:	beq	146f0 <__assert_fail@plt+0x36e8>
   1442c:	sub	r0, r4, #69	; 0x45
   14430:	mov	r1, #1
   14434:	mov	r3, #0
   14438:	mov	r5, #1024	; 0x400
   1443c:	cmp	r0, #47	; 0x2f
   14440:	str	r1, [sp, #28]
   14444:	bhi	14548 <__assert_fail@plt+0x3540>
   14448:	add	r1, pc, #0
   1444c:	ldr	pc, [r1, r0, lsl #2]
   14450:	andeq	r4, r1, r0, lsl r5
   14454:	andeq	r4, r1, r8, asr #10
   14458:	andeq	r4, r1, r0, lsl r5
   1445c:	andeq	r4, r1, r8, asr #10
   14460:	andeq	r4, r1, r8, asr #10
   14464:	andeq	r4, r1, r8, asr #10
   14468:	andeq	r4, r1, r0, lsl r5
   1446c:	andeq	r4, r1, r8, asr #10
   14470:	andeq	r4, r1, r0, lsl r5
   14474:	andeq	r4, r1, r8, asr #10
   14478:	andeq	r4, r1, r8, asr #10
   1447c:	andeq	r4, r1, r0, lsl r5
   14480:	andeq	r4, r1, r8, asr #10
   14484:	andeq	r4, r1, r8, asr #10
   14488:	andeq	r4, r1, r8, asr #10
   1448c:	andeq	r4, r1, r0, lsl r5
   14490:	andeq	r4, r1, r8, asr #10
   14494:	andeq	r4, r1, r8, asr #10
   14498:	andeq	r4, r1, r8, asr #10
   1449c:	andeq	r4, r1, r8, asr #10
   144a0:	andeq	r4, r1, r0, lsl r5
   144a4:	andeq	r4, r1, r0, lsl r5
   144a8:	andeq	r4, r1, r8, asr #10
   144ac:	andeq	r4, r1, r8, asr #10
   144b0:	andeq	r4, r1, r8, asr #10
   144b4:	andeq	r4, r1, r8, asr #10
   144b8:	andeq	r4, r1, r8, asr #10
   144bc:	andeq	r4, r1, r8, asr #10
   144c0:	andeq	r4, r1, r8, asr #10
   144c4:	andeq	r4, r1, r8, asr #10
   144c8:	andeq	r4, r1, r8, asr #10
   144cc:	andeq	r4, r1, r8, asr #10
   144d0:	andeq	r4, r1, r8, asr #10
   144d4:	andeq	r4, r1, r8, asr #10
   144d8:	andeq	r4, r1, r0, lsl r5
   144dc:	andeq	r4, r1, r8, asr #10
   144e0:	andeq	r4, r1, r8, asr #10
   144e4:	andeq	r4, r1, r8, asr #10
   144e8:	andeq	r4, r1, r0, lsl r5
   144ec:	andeq	r4, r1, r8, asr #10
   144f0:	andeq	r4, r1, r0, lsl r5
   144f4:	andeq	r4, r1, r8, asr #10
   144f8:	andeq	r4, r1, r8, asr #10
   144fc:	andeq	r4, r1, r8, asr #10
   14500:	andeq	r4, r1, r8, asr #10
   14504:	andeq	r4, r1, r8, asr #10
   14508:	andeq	r4, r1, r8, asr #10
   1450c:	andeq	r4, r1, r0, lsl r5
   14510:	mov	r0, sl
   14514:	mov	r1, #48	; 0x30
   14518:	bl	10f48 <strchr@plt>
   1451c:	cmp	r0, #0
   14520:	beq	14544 <__assert_fail@plt+0x353c>
   14524:	ldr	r1, [sp, #32]
   14528:	ldrb	r0, [r1, #1]
   1452c:	cmp	r0, #66	; 0x42
   14530:	cmpne	r0, #68	; 0x44
   14534:	bne	146fc <__assert_fail@plt+0x36f4>
   14538:	mov	r5, #1000	; 0x3e8
   1453c:	mov	r0, #2
   14540:	str	r0, [sp, #28]
   14544:	mov	r3, #0
   14548:	sub	r0, r4, #66	; 0x42
   1454c:	cmp	r0, #53	; 0x35
   14550:	bhi	146f0 <__assert_fail@plt+0x36e8>
   14554:	add	r1, pc, #0
   14558:	ldr	pc, [r1, r0, lsl #2]
   1455c:	andeq	r4, r1, r8, ror sl
   14560:	strdeq	r4, [r1], -r0
   14564:	strdeq	r4, [r1], -r0
   14568:	andeq	r4, r1, r0, lsr #21
   1456c:	strdeq	r4, [r1], -r0
   14570:	andeq	r4, r1, r4, lsr r6
   14574:	strdeq	r4, [r1], -r0
   14578:	strdeq	r4, [r1], -r0
   1457c:	strdeq	r4, [r1], -r0
   14580:	andeq	r4, r1, r0, lsr #14
   14584:	strdeq	r4, [r1], -r0
   14588:	andeq	r4, r1, r8, ror #14
   1458c:	strdeq	r4, [r1], -r0
   14590:	strdeq	r4, [r1], -r0
   14594:	strdeq	r4, [r1], -r8
   14598:	strdeq	r4, [r1], -r0
   1459c:	strdeq	r4, [r1], -r0
   145a0:	strdeq	r4, [r1], -r0
   145a4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145a8:	strdeq	r4, [r1], -r0
   145ac:	strdeq	r4, [r1], -r0
   145b0:	strdeq	r4, [r1], -r0
   145b4:	strdeq	r4, [r1], -r0
   145b8:	andeq	r4, r1, r0, lsr #26
   145bc:	ldrdeq	r4, [r1], -ip
   145c0:	strdeq	r4, [r1], -r0
   145c4:	strdeq	r4, [r1], -r0
   145c8:	strdeq	r4, [r1], -r0
   145cc:	strdeq	r4, [r1], -r0
   145d0:	strdeq	r4, [r1], -r0
   145d4:	strdeq	r4, [r1], -r0
   145d8:	strdeq	r4, [r1], -r0
   145dc:	strdeq	r4, [r1], -r8
   145e0:	andeq	r4, r1, r0, asr pc
   145e4:	strdeq	r4, [r1], -r0
   145e8:	strdeq	r4, [r1], -r0
   145ec:	strdeq	r4, [r1], -r0
   145f0:	andeq	r4, r1, r4, lsr r6
   145f4:	strdeq	r4, [r1], -r0
   145f8:	strdeq	r4, [r1], -r0
   145fc:	strdeq	r4, [r1], -r0
   14600:	andeq	r4, r1, r0, lsr #14
   14604:	strdeq	r4, [r1], -r0
   14608:	andeq	r4, r1, r8, ror #14
   1460c:	strdeq	r4, [r1], -r0
   14610:	strdeq	r4, [r1], -r0
   14614:	strdeq	r4, [r1], -r0
   14618:	strdeq	r4, [r1], -r0
   1461c:	strdeq	r4, [r1], -r0
   14620:	strdeq	r4, [r1], -r0
   14624:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14628:	strdeq	r4, [r1], -r0
   1462c:	strdeq	r4, [r1], -r0
   14630:	andeq	r4, r1, ip, lsr #30
   14634:	mvn	r0, #0
   14638:	mvn	r1, #0
   1463c:	mov	r2, r5
   14640:	mov	sl, r3
   14644:	bl	154ac <__assert_fail@plt+0x44a4>
   14648:	subs	r3, r0, r6
   1464c:	umull	r4, r2, r6, r5
   14650:	mov	lr, #0
   14654:	str	r1, [sp, #20]
   14658:	sbcs	r3, r1, r7
   1465c:	movwcc	lr, #1
   14660:	mla	ip, r6, sl, r2
   14664:	mov	r2, r1
   14668:	mov	r2, #0
   1466c:	cmp	lr, #0
   14670:	mla	r7, r7, r5, ip
   14674:	mvnne	r4, #0
   14678:	mvnne	r7, #0
   1467c:	subs	r6, r0, r4
   14680:	sbcs	r6, r1, r7
   14684:	umull	r3, r6, r4, r5
   14688:	movwcc	r2, #1
   1468c:	cmp	r2, #0
   14690:	mvnne	r3, #0
   14694:	cmp	r2, #0
   14698:	str	r6, [sp, #16]
   1469c:	umull	r6, ip, r3, r5
   146a0:	mla	r1, r3, sl, ip
   146a4:	ldr	ip, [sp, #16]
   146a8:	str	r1, [sp, #12]
   146ac:	mla	r4, r4, sl, ip
   146b0:	mla	r4, r7, r5, r4
   146b4:	mvnne	r4, #0
   146b8:	subs	r0, r0, r3
   146bc:	ldr	r0, [sp, #20]
   146c0:	ldr	r7, [sp, #12]
   146c4:	sbcs	r0, r0, r4
   146c8:	mov	r0, #0
   146cc:	mla	r7, r4, r5, r7
   146d0:	movwcc	r0, #1
   146d4:	cmp	r0, #0
   146d8:	mov	r1, r0
   146dc:	orr	r0, lr, r2
   146e0:	mvnne	r7, #0
   146e4:	mvnne	r6, #0
   146e8:	orr	r3, r0, r1
   146ec:	b	14f50 <__assert_fail@plt+0x3f48>
   146f0:	ldr	r0, [sp, #36]	; 0x24
   146f4:	orr	r8, r8, #2
   146f8:	b	14f74 <__assert_fail@plt+0x3f6c>
   146fc:	cmp	r0, #105	; 0x69
   14700:	mov	r3, #0
   14704:	bne	14548 <__assert_fail@plt+0x3540>
   14708:	ldrb	r0, [r1, #2]
   1470c:	mov	r1, #1
   14710:	cmp	r0, #66	; 0x42
   14714:	movweq	r1, #3
   14718:	str	r1, [sp, #28]
   1471c:	b	14548 <__assert_fail@plt+0x3540>
   14720:	mvn	r0, #0
   14724:	mvn	r1, #0
   14728:	mov	r2, r5
   1472c:	mov	r4, r3
   14730:	bl	154ac <__assert_fail@plt+0x44a4>
   14734:	subs	r0, r0, r6
   14738:	mov	r2, #0
   1473c:	sbcs	r0, r1, r7
   14740:	umull	r0, r1, r6, r5
   14744:	movwcc	r2, #1
   14748:	cmp	r2, #0
   1474c:	mla	r1, r6, r4, r1
   14750:	mov	r3, r2
   14754:	mvnne	r0, #0
   14758:	mla	r7, r7, r5, r1
   1475c:	mvnne	r7, #0
   14760:	mov	r6, r0
   14764:	b	14f50 <__assert_fail@plt+0x3f48>
   14768:	mvn	r0, #0
   1476c:	mvn	r1, #0
   14770:	mov	r2, r5
   14774:	str	r3, [sp, #24]
   14778:	bl	154ac <__assert_fail@plt+0x44a4>
   1477c:	subs	r3, r0, r6
   14780:	mov	ip, r0
   14784:	umull	r4, r0, r6, r5
   14788:	mov	sl, #0
   1478c:	sbcs	r3, r1, r7
   14790:	mov	r3, #0
   14794:	movwcc	r3, #1
   14798:	cmp	r3, #0
   1479c:	str	r0, [sp, #20]
   147a0:	ldr	r0, [sp, #24]
   147a4:	mvnne	r4, #0
   147a8:	cmp	r3, #0
   147ac:	umull	lr, r2, r4, r5
   147b0:	mla	r2, r4, r0, r2
   147b4:	str	r2, [sp, #16]
   147b8:	ldr	r2, [sp, #20]
   147bc:	mla	r6, r6, r0, r2
   147c0:	ldr	r0, [sp, #16]
   147c4:	mla	r6, r7, r5, r6
   147c8:	mvnne	r6, #0
   147cc:	mla	r7, r6, r5, r0
   147d0:	subs	r0, ip, r4
   147d4:	sbcs	r0, r1, r6
   147d8:	movwcc	sl, #1
   147dc:	cmp	sl, #0
   147e0:	orr	r3, r3, sl
   147e4:	mvnne	lr, #0
   147e8:	mvnne	r7, #0
   147ec:	mov	r6, lr
   147f0:	b	14f50 <__assert_fail@plt+0x3f48>
   147f4:	mvn	r0, #0
   147f8:	mvn	r1, #0
   147fc:	mov	r2, r5
   14800:	mov	sl, r3
   14804:	bl	154ac <__assert_fail@plt+0x44a4>
   14808:	subs	r3, r0, r6
   1480c:	mov	ip, r1
   14810:	umull	r2, lr, r6, r5
   14814:	str	r0, [sp, #20]
   14818:	sbcs	r3, r1, r7
   1481c:	mov	r1, #0
   14820:	str	ip, [sp, #16]
   14824:	movwcc	r1, #1
   14828:	mla	r6, r6, sl, lr
   1482c:	mov	lr, #0
   14830:	cmp	r1, #0
   14834:	mla	r7, r7, r5, r6
   14838:	mvnne	r2, #0
   1483c:	cmp	r1, #0
   14840:	umull	r3, r4, r2, r5
   14844:	mvnne	r7, #0
   14848:	mla	r4, r2, sl, r4
   1484c:	subs	r2, r0, r2
   14850:	sbcs	r2, ip, r7
   14854:	mla	r4, r7, r5, r4
   14858:	mov	r2, #0
   1485c:	movwcc	lr, #1
   14860:	cmp	lr, #0
   14864:	mvnne	r3, #0
   14868:	mvnne	r4, #0
   1486c:	subs	r7, r0, r3
   14870:	mov	r0, r5
   14874:	sbcs	r7, ip, r4
   14878:	umull	r5, r7, r3, r5
   1487c:	movwcc	r2, #1
   14880:	cmp	r2, #0
   14884:	mla	r3, r3, sl, r7
   14888:	mvnne	r5, #0
   1488c:	cmp	r2, #0
   14890:	mla	r3, r4, r0, r3
   14894:	umull	r6, ip, r5, r0
   14898:	mvnne	r3, #0
   1489c:	mla	ip, r5, sl, ip
   148a0:	mla	r7, r3, r0, ip
   148a4:	ldr	r0, [sp, #20]
   148a8:	subs	r0, r0, r5
   148ac:	ldr	r0, [sp, #16]
   148b0:	sbcs	r0, r0, r3
   148b4:	mov	r0, #0
   148b8:	movwcc	r0, #1
   148bc:	cmp	r0, #0
   148c0:	mov	r3, r0
   148c4:	orr	r0, r1, lr
   148c8:	orr	r0, r0, r2
   148cc:	mvnne	r7, #0
   148d0:	mvnne	r6, #0
   148d4:	orr	r3, r0, r3
   148d8:	b	14f50 <__assert_fail@plt+0x3f48>
   148dc:	mvn	r0, #0
   148e0:	mvn	r1, #0
   148e4:	mov	r2, r5
   148e8:	mov	r4, r3
   148ec:	str	r3, [sp, #24]
   148f0:	bl	154ac <__assert_fail@plt+0x44a4>
   148f4:	umull	r3, r2, r6, r5
   148f8:	mla	r2, r6, r4, r2
   148fc:	subs	r6, r0, r6
   14900:	sbcs	r6, r1, r7
   14904:	mov	r6, #0
   14908:	mla	ip, r7, r5, r2
   1490c:	ldr	r2, [sp, #24]
   14910:	movwcc	r6, #1
   14914:	cmp	r6, #0
   14918:	str	r6, [sp, #20]
   1491c:	mov	r6, #0
   14920:	mvnne	r3, #0
   14924:	mvnne	ip, #0
   14928:	subs	r4, r0, r3
   1492c:	umull	r7, lr, r3, r5
   14930:	sbcs	r4, r1, ip
   14934:	movwcc	r6, #1
   14938:	mla	r3, r3, r2, lr
   1493c:	cmp	r6, #0
   14940:	str	r6, [sp, #16]
   14944:	mvnne	r7, #0
   14948:	cmp	r6, #0
   1494c:	umull	sl, r4, r7, r5
   14950:	mla	r4, r7, r2, r4
   14954:	mla	r2, ip, r5, r3
   14958:	mvnne	r2, #0
   1495c:	subs	r3, r0, r7
   14960:	mov	ip, #0
   14964:	mla	r6, r2, r5, r4
   14968:	sbcs	r2, r1, r2
   1496c:	mov	r4, r0
   14970:	mov	r0, #0
   14974:	movwcc	r0, #1
   14978:	mov	r3, r4
   1497c:	cmp	r0, #0
   14980:	str	r0, [sp, #12]
   14984:	mov	r0, r1
   14988:	str	r3, [sp, #4]
   1498c:	mvnne	sl, #0
   14990:	mvnne	r6, #0
   14994:	str	r0, [sp, #8]
   14998:	subs	r2, r4, sl
   1499c:	ldr	r4, [sp, #24]
   149a0:	sbcs	r2, r1, r6
   149a4:	umull	r7, r2, sl, r5
   149a8:	movwcc	ip, #1
   149ac:	cmp	ip, #0
   149b0:	mvnne	r7, #0
   149b4:	mla	r2, sl, r4, r2
   149b8:	cmp	ip, #0
   149bc:	mov	sl, #0
   149c0:	umull	r1, lr, r7, r5
   149c4:	mla	r2, r6, r5, r2
   149c8:	mvnne	r2, #0
   149cc:	subs	r6, r3, r7
   149d0:	mla	lr, r7, r4, lr
   149d4:	mla	lr, r2, r5, lr
   149d8:	sbcs	r2, r0, r2
   149dc:	mov	r2, #0
   149e0:	movwcc	sl, #1
   149e4:	cmp	sl, #0
   149e8:	mvnne	r1, #0
   149ec:	mvnne	lr, #0
   149f0:	subs	r6, r3, r1
   149f4:	ldr	r3, [sp, #24]
   149f8:	sbcs	r6, r0, lr
   149fc:	umull	r0, r7, r1, r5
   14a00:	movwcc	r2, #1
   14a04:	cmp	r2, #0
   14a08:	mvnne	r0, #0
   14a0c:	mla	r1, r1, r3, r7
   14a10:	cmp	r2, #0
   14a14:	umull	r6, r4, r0, r5
   14a18:	mla	r1, lr, r5, r1
   14a1c:	mvnne	r1, #0
   14a20:	mla	r4, r0, r3, r4
   14a24:	ldr	r3, [sp, #4]
   14a28:	mla	r7, r1, r5, r4
   14a2c:	ldr	r5, [sp, #16]
   14a30:	subs	r0, r3, r0
   14a34:	ldr	r0, [sp, #8]
   14a38:	sbcs	r0, r0, r1
   14a3c:	mov	r0, #0
   14a40:	movwcc	r0, #1
   14a44:	cmp	r0, #0
   14a48:	mov	r1, r0
   14a4c:	ldr	r0, [sp, #20]
   14a50:	mvnne	r7, #0
   14a54:	mvnne	r6, #0
   14a58:	orr	r0, r0, r5
   14a5c:	ldr	r5, [sp, #12]
   14a60:	orr	r0, r0, r5
   14a64:	orr	r0, r0, ip
   14a68:	orr	r0, r0, sl
   14a6c:	orr	r0, r0, r2
   14a70:	orr	r0, r0, r1
   14a74:	b	14ef0 <__assert_fail@plt+0x3ee8>
   14a78:	mov	r1, #0
   14a7c:	lsl	r2, r7, #10
   14a80:	lsl	r0, r6, #10
   14a84:	lsr	r3, r7, #22
   14a88:	cmp	r1, r7, lsr #22
   14a8c:	orr	r2, r2, r6, lsr #22
   14a90:	mvnne	r0, #0
   14a94:	movwne	r3, #1
   14a98:	cmp	r1, r7, lsr #22
   14a9c:	b	14f1c <__assert_fail@plt+0x3f14>
   14aa0:	mvn	r0, #0
   14aa4:	mvn	r1, #0
   14aa8:	mov	r2, r5
   14aac:	mov	sl, r3
   14ab0:	bl	154ac <__assert_fail@plt+0x44a4>
   14ab4:	subs	r2, r0, r6
   14ab8:	mov	ip, r0
   14abc:	mov	r0, #0
   14ac0:	sbcs	r2, r1, r7
   14ac4:	umull	r4, r2, r6, r5
   14ac8:	movwcc	r0, #1
   14acc:	cmp	r0, #0
   14ad0:	mla	r2, r6, sl, r2
   14ad4:	str	r0, [sp, #20]
   14ad8:	mvnne	r4, #0
   14adc:	cmp	r0, #0
   14ae0:	mla	r2, r7, r5, r2
   14ae4:	mov	r0, #0
   14ae8:	umull	lr, r3, r4, r5
   14aec:	mvnne	r2, #0
   14af0:	mla	r3, r4, sl, r3
   14af4:	mla	r6, r2, r5, r3
   14af8:	subs	r3, ip, r4
   14afc:	mov	r3, r1
   14b00:	sbcs	r2, r1, r2
   14b04:	str	r3, [sp, #8]
   14b08:	movwcc	r0, #1
   14b0c:	cmp	r0, #0
   14b10:	str	r0, [sp, #16]
   14b14:	mov	r0, ip
   14b18:	mvnne	lr, #0
   14b1c:	mvnne	r6, #0
   14b20:	str	r0, [sp, #12]
   14b24:	subs	r2, ip, lr
   14b28:	umull	r7, r4, lr, r5
   14b2c:	sbcs	r2, r1, r6
   14b30:	mov	r2, #0
   14b34:	movwcc	r2, #1
   14b38:	mla	r4, lr, sl, r4
   14b3c:	cmp	r2, #0
   14b40:	mla	r6, r6, r5, r4
   14b44:	mov	r4, #0
   14b48:	mvnne	r7, #0
   14b4c:	cmp	r2, #0
   14b50:	umull	r1, ip, r7, r5
   14b54:	mvnne	r6, #0
   14b58:	mla	ip, r7, sl, ip
   14b5c:	subs	r7, r0, r7
   14b60:	sbcs	r7, r3, r6
   14b64:	mla	lr, r6, r5, ip
   14b68:	mov	ip, #0
   14b6c:	movwcc	ip, #1
   14b70:	cmp	ip, #0
   14b74:	mvnne	r1, #0
   14b78:	mvnne	lr, #0
   14b7c:	subs	r7, r0, r1
   14b80:	sbcs	r7, r3, lr
   14b84:	umull	r0, r7, r1, r5
   14b88:	movwcc	r4, #1
   14b8c:	cmp	r4, #0
   14b90:	mla	r1, r1, sl, r7
   14b94:	mvnne	r0, #0
   14b98:	cmp	r4, #0
   14b9c:	mla	r1, lr, r5, r1
   14ba0:	umull	r6, r3, r0, r5
   14ba4:	mvnne	r1, #0
   14ba8:	mla	r3, r0, sl, r3
   14bac:	mla	r7, r1, r5, r3
   14bb0:	ldr	r3, [sp, #12]
   14bb4:	subs	r0, r3, r0
   14bb8:	ldr	r0, [sp, #8]
   14bbc:	ldr	r3, [sp, #16]
   14bc0:	sbcs	r0, r0, r1
   14bc4:	mov	r0, #0
   14bc8:	movwcc	r0, #1
   14bcc:	cmp	r0, #0
   14bd0:	mov	r1, r0
   14bd4:	ldr	r0, [sp, #20]
   14bd8:	mvnne	r7, #0
   14bdc:	mvnne	r6, #0
   14be0:	orr	r0, r0, r3
   14be4:	orr	r0, r0, r2
   14be8:	orr	r0, r0, ip
   14bec:	orr	r0, r0, r4
   14bf0:	orr	r3, r0, r1
   14bf4:	b	14f50 <__assert_fail@plt+0x3f48>
   14bf8:	mvn	r0, #0
   14bfc:	mvn	r1, #0
   14c00:	mov	r2, r5
   14c04:	mov	sl, r3
   14c08:	bl	154ac <__assert_fail@plt+0x44a4>
   14c0c:	umull	r3, r2, r6, r5
   14c10:	mov	lr, r1
   14c14:	mov	r1, r0
   14c18:	mla	r2, r6, sl, r2
   14c1c:	subs	r6, r0, r6
   14c20:	mov	r0, #0
   14c24:	sbcs	r6, lr, r7
   14c28:	mla	r2, r7, r5, r2
   14c2c:	movwcc	r0, #1
   14c30:	cmp	r0, #0
   14c34:	str	r0, [sp, #20]
   14c38:	mov	r0, r1
   14c3c:	mvnne	r3, #0
   14c40:	mvnne	r2, #0
   14c44:	str	r0, [sp, #16]
   14c48:	subs	r4, r1, r3
   14c4c:	umull	r7, ip, r3, r5
   14c50:	sbcs	r4, lr, r2
   14c54:	mov	r4, #0
   14c58:	movwcc	r4, #1
   14c5c:	mla	r3, r3, sl, ip
   14c60:	mov	ip, #0
   14c64:	cmp	r4, #0
   14c68:	mla	r2, r2, r5, r3
   14c6c:	mvnne	r7, #0
   14c70:	cmp	r4, #0
   14c74:	umull	r1, r6, r7, r5
   14c78:	mvnne	r2, #0
   14c7c:	mla	r6, r7, sl, r6
   14c80:	mla	r3, r2, r5, r6
   14c84:	subs	r6, r0, r7
   14c88:	sbcs	r2, lr, r2
   14c8c:	mov	r2, #0
   14c90:	movwcc	ip, #1
   14c94:	cmp	ip, #0
   14c98:	mvnne	r1, #0
   14c9c:	mvnne	r3, #0
   14ca0:	subs	r6, r0, r1
   14ca4:	sbcs	r6, lr, r3
   14ca8:	umull	r0, r6, r1, r5
   14cac:	movwcc	r2, #1
   14cb0:	cmp	r2, #0
   14cb4:	mvnne	r0, #0
   14cb8:	cmp	r2, #0
   14cbc:	str	r6, [sp, #12]
   14cc0:	umull	r6, r7, r0, r5
   14cc4:	mla	r7, r0, sl, r7
   14cc8:	str	r7, [sp, #8]
   14ccc:	ldr	r7, [sp, #12]
   14cd0:	mla	r1, r1, sl, r7
   14cd4:	mla	r1, r3, r5, r1
   14cd8:	ldr	r3, [sp, #8]
   14cdc:	mvnne	r1, #0
   14ce0:	mla	r7, r1, r5, r3
   14ce4:	ldr	r3, [sp, #16]
   14ce8:	subs	r0, r3, r0
   14cec:	sbcs	r0, lr, r1
   14cf0:	mov	r0, #0
   14cf4:	movwcc	r0, #1
   14cf8:	cmp	r0, #0
   14cfc:	mov	r1, r0
   14d00:	ldr	r0, [sp, #20]
   14d04:	mvnne	r7, #0
   14d08:	mvnne	r6, #0
   14d0c:	orr	r0, r0, r4
   14d10:	orr	r0, r0, ip
   14d14:	orr	r0, r0, r2
   14d18:	orr	r3, r0, r1
   14d1c:	b	14f50 <__assert_fail@plt+0x3f48>
   14d20:	mvn	r0, #0
   14d24:	mvn	r1, #0
   14d28:	mov	r2, r5
   14d2c:	mov	sl, r3
   14d30:	bl	154ac <__assert_fail@plt+0x44a4>
   14d34:	mov	lr, r0
   14d38:	subs	r0, r0, r6
   14d3c:	mov	r2, #0
   14d40:	mov	ip, r1
   14d44:	str	sl, [sp, #24]
   14d48:	sbcs	r0, r1, r7
   14d4c:	umull	r3, r1, r6, r5
   14d50:	str	lr, [sp, #4]
   14d54:	movwcc	r2, #1
   14d58:	cmp	r2, #0
   14d5c:	mla	r6, r6, sl, r1
   14d60:	mov	r1, #0
   14d64:	str	r2, [sp, #20]
   14d68:	mvnne	r3, #0
   14d6c:	cmp	r2, #0
   14d70:	mla	r7, r7, r5, r6
   14d74:	mov	r2, #0
   14d78:	umull	r0, r4, r3, r5
   14d7c:	mvnne	r7, #0
   14d80:	mla	r4, r3, sl, r4
   14d84:	subs	r3, lr, r3
   14d88:	sbcs	r3, ip, r7
   14d8c:	mla	r4, r7, r5, r4
   14d90:	movwcc	r1, #1
   14d94:	cmp	r1, #0
   14d98:	str	r1, [sp, #16]
   14d9c:	mvnne	r0, #0
   14da0:	mvnne	r4, #0
   14da4:	subs	r3, lr, r0
   14da8:	sbcs	r3, ip, r4
   14dac:	umull	r6, r3, r0, r5
   14db0:	movwcc	r2, #1
   14db4:	cmp	r2, #0
   14db8:	mla	r0, r0, sl, r3
   14dbc:	str	r2, [sp, #12]
   14dc0:	mvnne	r6, #0
   14dc4:	cmp	r2, #0
   14dc8:	mla	r0, r4, r5, r0
   14dcc:	ldr	r4, [sp, #24]
   14dd0:	umull	r1, r7, r6, r5
   14dd4:	mvnne	r0, #0
   14dd8:	subs	r3, lr, r6
   14ddc:	mov	r3, ip
   14de0:	str	r3, [sp]
   14de4:	mla	r7, r6, sl, r7
   14de8:	mla	r7, r0, r5, r7
   14dec:	sbcs	r0, ip, r0
   14df0:	mov	r0, #0
   14df4:	movwcc	r0, #1
   14df8:	cmp	r0, #0
   14dfc:	str	r0, [sp, #8]
   14e00:	mvnne	r1, #0
   14e04:	mvnne	r7, #0
   14e08:	subs	r0, lr, r1
   14e0c:	sbcs	r0, ip, r7
   14e10:	mov	ip, #0
   14e14:	umull	r6, r0, r1, r5
   14e18:	movwcc	ip, #1
   14e1c:	cmp	ip, #0
   14e20:	mla	r1, r1, r4, r0
   14e24:	mov	r0, lr
   14e28:	mvnne	r6, #0
   14e2c:	cmp	ip, #0
   14e30:	mla	r1, r7, r5, r1
   14e34:	umull	r2, sl, r6, r5
   14e38:	mvnne	r1, #0
   14e3c:	mla	sl, r6, r4, sl
   14e40:	subs	r6, lr, r6
   14e44:	mov	lr, #0
   14e48:	mla	r7, r1, r5, sl
   14e4c:	sbcs	r1, r3, r1
   14e50:	ldr	r1, [sp, #24]
   14e54:	movwcc	lr, #1
   14e58:	cmp	lr, #0
   14e5c:	mvnne	r2, #0
   14e60:	mvnne	r7, #0
   14e64:	subs	r6, r0, r2
   14e68:	umull	r0, sl, r2, r5
   14e6c:	sbcs	r6, r3, r7
   14e70:	mov	r3, #0
   14e74:	movwcc	r3, #1
   14e78:	mla	r2, r2, r1, sl
   14e7c:	cmp	r3, #0
   14e80:	mla	r2, r7, r5, r2
   14e84:	mvnne	r0, #0
   14e88:	cmp	r3, #0
   14e8c:	umull	r6, r4, r0, r5
   14e90:	mvnne	r2, #0
   14e94:	mla	r4, r0, r1, r4
   14e98:	ldr	r1, [sp, #4]
   14e9c:	mla	r7, r2, r5, r4
   14ea0:	ldr	r5, [sp, #16]
   14ea4:	subs	r0, r1, r0
   14ea8:	ldr	r0, [sp]
   14eac:	sbcs	r0, r0, r2
   14eb0:	mov	r0, #0
   14eb4:	movwcc	r0, #1
   14eb8:	cmp	r0, #0
   14ebc:	mov	r2, r0
   14ec0:	ldr	r0, [sp, #20]
   14ec4:	mvnne	r7, #0
   14ec8:	mvnne	r6, #0
   14ecc:	orr	r0, r0, r5
   14ed0:	ldr	r5, [sp, #12]
   14ed4:	orr	r0, r0, r5
   14ed8:	ldr	r5, [sp, #8]
   14edc:	orr	r0, r0, r5
   14ee0:	orr	r0, r0, ip
   14ee4:	orr	r0, r0, lr
   14ee8:	orr	r0, r0, r3
   14eec:	orr	r0, r0, r2
   14ef0:	and	r3, r0, #1
   14ef4:	b	14f50 <__assert_fail@plt+0x3f48>
   14ef8:	mov	r1, #0
   14efc:	lsl	r2, r7, #9
   14f00:	lsl	r0, r6, #9
   14f04:	lsr	r3, r7, #23
   14f08:	cmp	r1, r7, lsr #23
   14f0c:	orr	r2, r2, r6, lsr #23
   14f10:	mvnne	r0, #0
   14f14:	movwne	r3, #1
   14f18:	cmp	r1, r7, lsr #23
   14f1c:	mvnne	r2, #0
   14f20:	mov	r6, r0
   14f24:	mov	r7, r2
   14f28:	b	14f50 <__assert_fail@plt+0x3f48>
   14f2c:	lsl	r1, r7, #1
   14f30:	cmp	r7, #0
   14f34:	lsl	r0, r6, #1
   14f38:	lsr	r3, r7, #31
   14f3c:	orr	r1, r1, r6, lsr #31
   14f40:	mvnmi	r0, #0
   14f44:	mvnmi	r1, #0
   14f48:	mov	r6, r0
   14f4c:	mov	r7, r1
   14f50:	ldr	r1, [sp, #32]
   14f54:	ldr	r2, [sp, #28]
   14f58:	orr	r8, r3, r8
   14f5c:	add	r0, r1, r2
   14f60:	str	r0, [r9]
   14f64:	ldrb	r0, [r1, r2]
   14f68:	cmp	r0, #0
   14f6c:	orrne	r8, r8, #2
   14f70:	ldr	r0, [sp, #36]	; 0x24
   14f74:	strd	r6, [r0]
   14f78:	mov	r0, r8
   14f7c:	sub	sp, fp, #28
   14f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f84:	movw	r0, #24285	; 0x5edd
   14f88:	movw	r1, #24323	; 0x5f03
   14f8c:	movw	r3, #24339	; 0x5f13
   14f90:	mov	r2, #85	; 0x55
   14f94:	movt	r0, #1
   14f98:	movt	r1, #1
   14f9c:	movt	r3, #1
   14fa0:	bl	11008 <__assert_fail@plt>
   14fa4:	clz	r2, r1
   14fa8:	clz	r3, r0
   14fac:	lsr	r2, r2, #5
   14fb0:	lsr	r3, r3, #5
   14fb4:	orrs	r2, r3, r2
   14fb8:	movwne	r1, #1
   14fbc:	movwne	r0, #1
   14fc0:	cmp	r1, #0
   14fc4:	beq	14ff4 <__assert_fail@plt+0x3fec>
   14fc8:	mvn	r2, #-2147483648	; 0x80000000
   14fcc:	udiv	r2, r2, r1
   14fd0:	cmp	r2, r0
   14fd4:	bcs	14ff4 <__assert_fail@plt+0x3fec>
   14fd8:	push	{fp, lr}
   14fdc:	mov	fp, sp
   14fe0:	bl	10f54 <__errno_location@plt>
   14fe4:	mov	r1, #12
   14fe8:	str	r1, [r0]
   14fec:	mov	r0, #0
   14ff0:	pop	{fp, pc}
   14ff4:	b	10dbc <calloc@plt>
   14ff8:	cmp	r0, #0
   14ffc:	movweq	r0, #1
   15000:	cmn	r0, #1
   15004:	ble	1500c <__assert_fail@plt+0x4004>
   15008:	b	10ed0 <malloc@plt>
   1500c:	push	{fp, lr}
   15010:	mov	fp, sp
   15014:	bl	10f54 <__errno_location@plt>
   15018:	mov	r1, #12
   1501c:	str	r1, [r0]
   15020:	mov	r0, #0
   15024:	pop	{fp, pc}
   15028:	push	{fp, lr}
   1502c:	mov	fp, sp
   15030:	cmp	r0, #0
   15034:	beq	15050 <__assert_fail@plt+0x4048>
   15038:	cmp	r1, #0
   1503c:	beq	1505c <__assert_fail@plt+0x4054>
   15040:	cmn	r1, #1
   15044:	ble	15068 <__assert_fail@plt+0x4060>
   15048:	pop	{fp, lr}
   1504c:	b	10e58 <realloc@plt>
   15050:	mov	r0, r1
   15054:	pop	{fp, lr}
   15058:	b	14ff8 <__assert_fail@plt+0x3ff0>
   1505c:	bl	151f8 <__assert_fail@plt+0x41f0>
   15060:	mov	r0, #0
   15064:	pop	{fp, pc}
   15068:	bl	10f54 <__errno_location@plt>
   1506c:	mov	r1, #12
   15070:	str	r1, [r0]
   15074:	mov	r0, #0
   15078:	pop	{fp, pc}
   1507c:	push	{r4, r5, r6, sl, fp, lr}
   15080:	add	fp, sp, #16
   15084:	mov	r4, r0
   15088:	bl	10ea0 <__fpending@plt>
   1508c:	ldr	r6, [r4]
   15090:	mov	r5, r0
   15094:	mov	r0, r4
   15098:	bl	15100 <__assert_fail@plt+0x40f8>
   1509c:	tst	r6, #32
   150a0:	bne	150d8 <__assert_fail@plt+0x40d0>
   150a4:	cmp	r0, #0
   150a8:	mov	r4, r0
   150ac:	mvnne	r4, #0
   150b0:	cmp	r5, #0
   150b4:	bne	150e4 <__assert_fail@plt+0x40dc>
   150b8:	cmp	r0, #0
   150bc:	beq	150e4 <__assert_fail@plt+0x40dc>
   150c0:	bl	10f54 <__errno_location@plt>
   150c4:	ldr	r0, [r0]
   150c8:	subs	r4, r0, #9
   150cc:	mvnne	r4, #0
   150d0:	mov	r0, r4
   150d4:	pop	{r4, r5, r6, sl, fp, pc}
   150d8:	mvn	r4, #0
   150dc:	cmp	r0, #0
   150e0:	beq	150ec <__assert_fail@plt+0x40e4>
   150e4:	mov	r0, r4
   150e8:	pop	{r4, r5, r6, sl, fp, pc}
   150ec:	bl	10f54 <__errno_location@plt>
   150f0:	mov	r1, #0
   150f4:	str	r1, [r0]
   150f8:	mov	r0, r4
   150fc:	pop	{r4, r5, r6, sl, fp, pc}
   15100:	push	{r4, r5, r6, sl, fp, lr}
   15104:	add	fp, sp, #16
   15108:	sub	sp, sp, #8
   1510c:	mov	r4, r0
   15110:	bl	10f84 <fileno@plt>
   15114:	cmn	r0, #1
   15118:	ble	1518c <__assert_fail@plt+0x4184>
   1511c:	mov	r0, r4
   15120:	bl	10ee8 <__freading@plt>
   15124:	cmp	r0, #0
   15128:	beq	15154 <__assert_fail@plt+0x414c>
   1512c:	mov	r0, r4
   15130:	bl	10f84 <fileno@plt>
   15134:	mov	r1, #1
   15138:	mov	r2, #0
   1513c:	mov	r3, #0
   15140:	str	r1, [sp]
   15144:	bl	10e88 <lseek64@plt>
   15148:	and	r0, r0, r1
   1514c:	cmn	r0, #1
   15150:	beq	1518c <__assert_fail@plt+0x4184>
   15154:	mov	r0, r4
   15158:	bl	1519c <__assert_fail@plt+0x4194>
   1515c:	cmp	r0, #0
   15160:	beq	1518c <__assert_fail@plt+0x4184>
   15164:	bl	10f54 <__errno_location@plt>
   15168:	ldr	r6, [r0]
   1516c:	mov	r5, r0
   15170:	mov	r0, r4
   15174:	bl	10f9c <fclose@plt>
   15178:	cmp	r6, #0
   1517c:	strne	r6, [r5]
   15180:	mvnne	r0, #0
   15184:	sub	sp, fp, #16
   15188:	pop	{r4, r5, r6, sl, fp, pc}
   1518c:	mov	r0, r4
   15190:	sub	sp, fp, #16
   15194:	pop	{r4, r5, r6, sl, fp, lr}
   15198:	b	10f9c <fclose@plt>
   1519c:	push	{r4, sl, fp, lr}
   151a0:	add	fp, sp, #8
   151a4:	sub	sp, sp, #8
   151a8:	mov	r4, r0
   151ac:	cmp	r0, #0
   151b0:	beq	151e8 <__assert_fail@plt+0x41e0>
   151b4:	mov	r0, r4
   151b8:	bl	10ee8 <__freading@plt>
   151bc:	cmp	r0, #0
   151c0:	beq	151e8 <__assert_fail@plt+0x41e0>
   151c4:	ldrb	r0, [r4, #1]
   151c8:	tst	r0, #1
   151cc:	beq	151e8 <__assert_fail@plt+0x41e0>
   151d0:	mov	r0, #1
   151d4:	mov	r2, #0
   151d8:	mov	r3, #0
   151dc:	str	r0, [sp]
   151e0:	mov	r0, r4
   151e4:	bl	15220 <__assert_fail@plt+0x4218>
   151e8:	mov	r0, r4
   151ec:	sub	sp, fp, #8
   151f0:	pop	{r4, sl, fp, lr}
   151f4:	b	10dec <fflush@plt>
   151f8:	push	{r4, r5, r6, sl, fp, lr}
   151fc:	add	fp, sp, #16
   15200:	mov	r4, r0
   15204:	bl	10f54 <__errno_location@plt>
   15208:	ldr	r6, [r0]
   1520c:	mov	r5, r0
   15210:	mov	r0, r4
   15214:	bl	10df8 <free@plt>
   15218:	str	r6, [r5]
   1521c:	pop	{r4, r5, r6, sl, fp, pc}
   15220:	push	{r4, r5, r6, r7, fp, lr}
   15224:	add	fp, sp, #16
   15228:	sub	sp, sp, #8
   1522c:	mov	r4, r0
   15230:	ldr	r0, [r0, #4]
   15234:	mov	r5, r3
   15238:	mov	r6, r2
   1523c:	ldr	r1, [r4, #8]
   15240:	cmp	r1, r0
   15244:	bne	15260 <__assert_fail@plt+0x4258>
   15248:	ldrd	r0, [r4, #16]
   1524c:	cmp	r1, r0
   15250:	bne	15260 <__assert_fail@plt+0x4258>
   15254:	ldr	r0, [r4, #36]	; 0x24
   15258:	cmp	r0, #0
   1525c:	beq	15278 <__assert_fail@plt+0x4270>
   15260:	mov	r0, r4
   15264:	mov	r2, r6
   15268:	mov	r3, r5
   1526c:	sub	sp, fp, #16
   15270:	pop	{r4, r5, r6, r7, fp, lr}
   15274:	b	10fa8 <fseeko64@plt>
   15278:	ldr	r7, [fp, #8]
   1527c:	mov	r0, r4
   15280:	bl	10f84 <fileno@plt>
   15284:	mov	r2, r6
   15288:	mov	r3, r5
   1528c:	str	r7, [sp]
   15290:	bl	10e88 <lseek64@plt>
   15294:	and	r2, r0, r1
   15298:	cmn	r2, #1
   1529c:	beq	152bc <__assert_fail@plt+0x42b4>
   152a0:	strd	r0, [r4, #80]	; 0x50
   152a4:	ldr	r0, [r4]
   152a8:	bic	r0, r0, #16
   152ac:	str	r0, [r4]
   152b0:	mov	r0, #0
   152b4:	sub	sp, fp, #16
   152b8:	pop	{r4, r5, r6, r7, fp, pc}
   152bc:	mvn	r0, #0
   152c0:	sub	sp, fp, #16
   152c4:	pop	{r4, r5, r6, r7, fp, pc}
   152c8:	push	{fp, lr}
   152cc:	mov	fp, sp
   152d0:	mov	r0, #14
   152d4:	bl	10fcc <nl_langinfo@plt>
   152d8:	movw	r1, #22377	; 0x5769
   152dc:	cmp	r0, #0
   152e0:	movt	r1, #1
   152e4:	movne	r1, r0
   152e8:	movw	r0, #24418	; 0x5f62
   152ec:	ldrb	r2, [r1]
   152f0:	movt	r0, #1
   152f4:	cmp	r2, #0
   152f8:	movne	r0, r1
   152fc:	pop	{fp, pc}
   15300:	push	{r4, r5, r6, r7, fp, lr}
   15304:	add	fp, sp, #16
   15308:	sub	sp, sp, #8
   1530c:	cmp	r0, #0
   15310:	add	r5, sp, #4
   15314:	mov	r7, r2
   15318:	mov	r4, r1
   1531c:	movne	r5, r0
   15320:	mov	r0, r5
   15324:	bl	10eac <mbrtowc@plt>
   15328:	mov	r6, r0
   1532c:	cmp	r7, #0
   15330:	beq	15358 <__assert_fail@plt+0x4350>
   15334:	cmn	r6, #2
   15338:	bcc	15358 <__assert_fail@plt+0x4350>
   1533c:	mov	r0, #0
   15340:	bl	153a0 <__assert_fail@plt+0x4398>
   15344:	cmp	r0, #0
   15348:	bne	15358 <__assert_fail@plt+0x4350>
   1534c:	ldrb	r0, [r4]
   15350:	mov	r6, #1
   15354:	str	r0, [r5]
   15358:	mov	r0, r6
   1535c:	sub	sp, fp, #16
   15360:	pop	{r4, r5, r6, r7, fp, pc}
   15364:	cmp	r2, #0
   15368:	beq	15398 <__assert_fail@plt+0x4390>
   1536c:	mvn	r3, #0
   15370:	udiv	r3, r3, r2
   15374:	cmp	r3, r1
   15378:	bcs	15398 <__assert_fail@plt+0x4390>
   1537c:	push	{fp, lr}
   15380:	mov	fp, sp
   15384:	bl	10f54 <__errno_location@plt>
   15388:	mov	r1, #12
   1538c:	str	r1, [r0]
   15390:	mov	r0, #0
   15394:	pop	{fp, pc}
   15398:	mul	r1, r2, r1
   1539c:	b	15028 <__assert_fail@plt+0x4020>
   153a0:	push	{r4, sl, fp, lr}
   153a4:	add	fp, sp, #8
   153a8:	sub	sp, sp, #264	; 0x108
   153ac:	add	r1, sp, #7
   153b0:	movw	r2, #257	; 0x101
   153b4:	bl	1540c <__assert_fail@plt+0x4404>
   153b8:	mov	r4, #0
   153bc:	cmp	r0, #0
   153c0:	bne	15400 <__assert_fail@plt+0x43f8>
   153c4:	movw	r1, #24424	; 0x5f68
   153c8:	add	r0, sp, #7
   153cc:	mov	r2, #2
   153d0:	movt	r1, #1
   153d4:	bl	10f24 <bcmp@plt>
   153d8:	cmp	r0, #0
   153dc:	beq	15400 <__assert_fail@plt+0x43f8>
   153e0:	movw	r1, #24426	; 0x5f6a
   153e4:	add	r0, sp, #7
   153e8:	mov	r2, #6
   153ec:	movt	r1, #1
   153f0:	bl	10f24 <bcmp@plt>
   153f4:	cmp	r0, #0
   153f8:	mov	r4, r0
   153fc:	movwne	r4, #1
   15400:	mov	r0, r4
   15404:	sub	sp, fp, #8
   15408:	pop	{r4, sl, fp, pc}
   1540c:	push	{r4, r5, r6, r7, fp, lr}
   15410:	add	fp, sp, #16
   15414:	mov	r4, r1
   15418:	mov	r1, #0
   1541c:	mov	r6, r2
   15420:	bl	10fb4 <setlocale@plt>
   15424:	cmp	r0, #0
   15428:	beq	15458 <__assert_fail@plt+0x4450>
   1542c:	mov	r7, r0
   15430:	bl	10f3c <strlen@plt>
   15434:	cmp	r0, r6
   15438:	bcs	15474 <__assert_fail@plt+0x446c>
   1543c:	add	r2, r0, #1
   15440:	mov	r0, r4
   15444:	mov	r1, r7
   15448:	bl	10e10 <memcpy@plt>
   1544c:	mov	r5, #0
   15450:	mov	r0, r5
   15454:	pop	{r4, r5, r6, r7, fp, pc}
   15458:	mov	r5, #22
   1545c:	cmp	r6, #0
   15460:	beq	1549c <__assert_fail@plt+0x4494>
   15464:	mov	r0, #0
   15468:	strb	r0, [r4]
   1546c:	mov	r0, r5
   15470:	pop	{r4, r5, r6, r7, fp, pc}
   15474:	mov	r5, #34	; 0x22
   15478:	cmp	r6, #0
   1547c:	beq	1549c <__assert_fail@plt+0x4494>
   15480:	sub	r6, r6, #1
   15484:	mov	r0, r4
   15488:	mov	r1, r7
   1548c:	mov	r2, r6
   15490:	bl	10e10 <memcpy@plt>
   15494:	mov	r0, #0
   15498:	strb	r0, [r4, r6]
   1549c:	mov	r0, r5
   154a0:	pop	{r4, r5, r6, r7, fp, pc}
   154a4:	mov	r1, #0
   154a8:	b	10fb4 <setlocale@plt>
   154ac:	cmp	r3, #0
   154b0:	cmpeq	r2, #0
   154b4:	bne	154cc <__assert_fail@plt+0x44c4>
   154b8:	cmp	r1, #0
   154bc:	cmpeq	r0, #0
   154c0:	mvnne	r1, #0
   154c4:	mvnne	r0, #0
   154c8:	b	154e8 <__assert_fail@plt+0x44e0>
   154cc:	sub	sp, sp, #8
   154d0:	push	{sp, lr}
   154d4:	bl	154f8 <__assert_fail@plt+0x44f0>
   154d8:	ldr	lr, [sp, #4]
   154dc:	add	sp, sp, #8
   154e0:	pop	{r2, r3}
   154e4:	bx	lr
   154e8:	push	{r1, lr}
   154ec:	mov	r0, #8
   154f0:	bl	10dd4 <raise@plt>
   154f4:	pop	{r1, pc}
   154f8:	cmp	r1, r3
   154fc:	cmpeq	r0, r2
   15500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15504:	mov	r4, r0
   15508:	movcc	r0, #0
   1550c:	mov	r5, r1
   15510:	ldr	lr, [sp, #36]	; 0x24
   15514:	movcc	r1, r0
   15518:	bcc	15614 <__assert_fail@plt+0x460c>
   1551c:	cmp	r3, #0
   15520:	clzeq	ip, r2
   15524:	clzne	ip, r3
   15528:	addeq	ip, ip, #32
   1552c:	cmp	r5, #0
   15530:	clzeq	r1, r4
   15534:	addeq	r1, r1, #32
   15538:	clzne	r1, r5
   1553c:	sub	ip, ip, r1
   15540:	sub	sl, ip, #32
   15544:	lsl	r9, r3, ip
   15548:	rsb	fp, ip, #32
   1554c:	orr	r9, r9, r2, lsl sl
   15550:	orr	r9, r9, r2, lsr fp
   15554:	lsl	r8, r2, ip
   15558:	cmp	r5, r9
   1555c:	cmpeq	r4, r8
   15560:	movcc	r0, #0
   15564:	movcc	r1, r0
   15568:	bcc	15584 <__assert_fail@plt+0x457c>
   1556c:	mov	r0, #1
   15570:	subs	r4, r4, r8
   15574:	lsl	r1, r0, sl
   15578:	orr	r1, r1, r0, lsr fp
   1557c:	lsl	r0, r0, ip
   15580:	sbc	r5, r5, r9
   15584:	cmp	ip, #0
   15588:	beq	15614 <__assert_fail@plt+0x460c>
   1558c:	lsr	r6, r8, #1
   15590:	orr	r6, r6, r9, lsl #31
   15594:	lsr	r7, r9, #1
   15598:	mov	r2, ip
   1559c:	b	155c0 <__assert_fail@plt+0x45b8>
   155a0:	subs	r3, r4, r6
   155a4:	sbc	r8, r5, r7
   155a8:	adds	r3, r3, r3
   155ac:	adc	r8, r8, r8
   155b0:	adds	r4, r3, #1
   155b4:	adc	r5, r8, #0
   155b8:	subs	r2, r2, #1
   155bc:	beq	155dc <__assert_fail@plt+0x45d4>
   155c0:	cmp	r5, r7
   155c4:	cmpeq	r4, r6
   155c8:	bcs	155a0 <__assert_fail@plt+0x4598>
   155cc:	adds	r4, r4, r4
   155d0:	adc	r5, r5, r5
   155d4:	subs	r2, r2, #1
   155d8:	bne	155c0 <__assert_fail@plt+0x45b8>
   155dc:	lsr	r3, r4, ip
   155e0:	orr	r3, r3, r5, lsl fp
   155e4:	lsr	r2, r5, ip
   155e8:	orr	r3, r3, r5, lsr sl
   155ec:	adds	r0, r0, r4
   155f0:	mov	r4, r3
   155f4:	lsl	r3, r2, ip
   155f8:	orr	r3, r3, r4, lsl sl
   155fc:	lsl	ip, r4, ip
   15600:	orr	r3, r3, r4, lsr fp
   15604:	adc	r1, r1, r5
   15608:	subs	r0, r0, ip
   1560c:	mov	r5, r2
   15610:	sbc	r1, r1, r3
   15614:	cmp	lr, #0
   15618:	strdne	r4, [lr]
   1561c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15620:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15624:	mov	r7, r0
   15628:	ldr	r6, [pc, #72]	; 15678 <__assert_fail@plt+0x4670>
   1562c:	ldr	r5, [pc, #72]	; 1567c <__assert_fail@plt+0x4674>
   15630:	add	r6, pc, r6
   15634:	add	r5, pc, r5
   15638:	sub	r6, r6, r5
   1563c:	mov	r8, r1
   15640:	mov	r9, r2
   15644:	bl	10d9c <calloc@plt-0x20>
   15648:	asrs	r6, r6, #2
   1564c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15650:	mov	r4, #0
   15654:	add	r4, r4, #1
   15658:	ldr	r3, [r5], #4
   1565c:	mov	r2, r9
   15660:	mov	r1, r8
   15664:	mov	r0, r7
   15668:	blx	r3
   1566c:	cmp	r6, r4
   15670:	bne	15654 <__assert_fail@plt+0x464c>
   15674:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15678:	ldrdeq	r1, [r1], -r4
   1567c:	andeq	r1, r1, ip, asr #17
   15680:	bx	lr
   15684:	ldr	r3, [pc, #12]	; 15698 <__assert_fail@plt+0x4690>
   15688:	mov	r1, #0
   1568c:	add	r3, pc, r3
   15690:	ldr	r2, [r3]
   15694:	b	10f60 <__cxa_atexit@plt>
   15698:	andeq	r1, r1, r8, asr #20

Disassembly of section .fini:

0001569c <.fini>:
   1569c:	push	{r3, lr}
   156a0:	pop	{r3, pc}
