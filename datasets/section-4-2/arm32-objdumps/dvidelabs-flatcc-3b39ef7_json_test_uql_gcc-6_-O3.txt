
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uql:     file format elf32-littlearm


Disassembly of section .init:

000144fc <.init>:
   144fc:	push	{r3, lr}
   14500:	bl	155dc <_start@@Base+0x3c>
   14504:	pop	{r3, pc}

Disassembly of section .plt:

00014508 <raise@plt-0x14>:
   14508:	push	{lr}		; (str lr, [sp, #-4]!)
   1450c:	ldr	lr, [pc, #4]	; 14518 <raise@plt-0x4>
   14510:	add	lr, pc, lr
   14514:	ldr	pc, [lr, #8]!
   14518:	andeq	r3, r4, r8, ror #21

0001451c <raise@plt>:
   1451c:	add	ip, pc, #0, 12
   14520:	add	ip, ip, #274432	; 0x43000
   14524:	ldr	pc, [ip, #2792]!	; 0xae8

00014528 <strcmp@plt>:
   14528:	add	ip, pc, #0, 12
   1452c:	add	ip, ip, #274432	; 0x43000
   14530:	ldr	pc, [ip, #2784]!	; 0xae0

00014534 <memmove@plt>:
   14534:	add	ip, pc, #0, 12
   14538:	add	ip, ip, #274432	; 0x43000
   1453c:	ldr	pc, [ip, #2776]!	; 0xad8

00014540 <free@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #274432	; 0x43000
   14548:	ldr	pc, [ip, #2768]!	; 0xad0

0001454c <memcpy@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #274432	; 0x43000
   14554:	ldr	pc, [ip, #2760]!	; 0xac8

00014558 <memcmp@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #274432	; 0x43000
   14560:	ldr	pc, [ip, #2752]!	; 0xac0

00014564 <realloc@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #274432	; 0x43000
   1456c:	ldr	pc, [ip, #2744]!	; 0xab8

00014570 <fwrite@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #274432	; 0x43000
   14578:	ldr	pc, [ip, #2736]!	; 0xab0

0001457c <malloc@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #274432	; 0x43000
   14584:	ldr	pc, [ip, #2728]!	; 0xaa8

00014588 <__libc_start_main@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #274432	; 0x43000
   14590:	ldr	pc, [ip, #2720]!	; 0xaa0

00014594 <__gmon_start__@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #274432	; 0x43000
   1459c:	ldr	pc, [ip, #2712]!	; 0xa98

000145a0 <strlen@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #274432	; 0x43000
   145a8:	ldr	pc, [ip, #2704]!	; 0xa90

000145ac <fprintf@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #274432	; 0x43000
   145b4:	ldr	pc, [ip, #2696]!	; 0xa88

000145b8 <posix_memalign@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #274432	; 0x43000
   145c0:	ldr	pc, [ip, #2688]!	; 0xa80

000145c4 <memset@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #274432	; 0x43000
   145cc:	ldr	pc, [ip, #2680]!	; 0xa78

000145d0 <strncpy@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #274432	; 0x43000
   145d8:	ldr	pc, [ip, #2672]!	; 0xa70

000145dc <strtod@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #274432	; 0x43000
   145e4:	ldr	pc, [ip, #2664]!	; 0xa68

000145e8 <memchr@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #274432	; 0x43000
   145f0:	ldr	pc, [ip, #2656]!	; 0xa60

000145f4 <fputc@plt>:
   145f4:	add	ip, pc, #0, 12
   145f8:	add	ip, ip, #274432	; 0x43000
   145fc:	ldr	pc, [ip, #2648]!	; 0xa58

00014600 <sprintf@plt>:
   14600:	add	ip, pc, #0, 12
   14604:	add	ip, ip, #274432	; 0x43000
   14608:	ldr	pc, [ip, #2640]!	; 0xa50

0001460c <abort@plt>:
   1460c:	add	ip, pc, #0, 12
   14610:	add	ip, ip, #274432	; 0x43000
   14614:	ldr	pc, [ip, #2632]!	; 0xa48

00014618 <__assert_fail@plt>:
   14618:	add	ip, pc, #0, 12
   1461c:	add	ip, ip, #274432	; 0x43000
   14620:	ldr	pc, [ip, #2624]!	; 0xa40

Disassembly of section .text:

00014628 <main@@Base-0x304>:
   14628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1462c:	sub	sp, sp, #36	; 0x24
   14630:	mov	r6, #0
   14634:	ldr	r8, [sp, #72]	; 0x48
   14638:	mov	r7, #0
   1463c:	cmp	r1, r2
   14640:	strd	r6, [r8]
   14644:	mov	r4, r1
   14648:	mov	r5, r2
   1464c:	mov	r9, r3
   14650:	mov	r6, r0
   14654:	beq	1468c <__assert_fail@plt+0x74>
   14658:	ldrb	r3, [r1]
   1465c:	cmp	r3, #34	; 0x22
   14660:	moveq	r3, #0
   14664:	addeq	r4, r1, #1
   14668:	streq	r3, [r0, #12]
   1466c:	beq	1468c <__assert_fail@plt+0x74>
   14670:	cmp	r3, #46	; 0x2e
   14674:	movne	r3, #1
   14678:	strne	r3, [r0, #12]
   1467c:	bne	1468c <__assert_fail@plt+0x74>
   14680:	mov	r3, #5
   14684:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   14688:	mov	r4, r0
   1468c:	ldr	r3, [r6, #12]
   14690:	cmp	r3, #0
   14694:	bne	146ac <__assert_fail@plt+0x94>
   14698:	mov	r1, r4
   1469c:	mov	r2, r5
   146a0:	mov	r0, r6
   146a4:	bl	17318 <_start@@Base+0x1d78>
   146a8:	mov	r4, r0
   146ac:	cmp	r5, r4
   146b0:	beq	14790 <__assert_fail@plt+0x178>
   146b4:	mov	r2, #0
   146b8:	mov	r3, #0
   146bc:	add	fp, sp, #20
   146c0:	strd	r2, [sp, #8]
   146c4:	mov	sl, r9
   146c8:	add	r3, sp, #24
   146cc:	str	r3, [sp]
   146d0:	str	fp, [sp, #4]
   146d4:	add	r3, sp, #16
   146d8:	ldr	r7, [sl]
   146dc:	mov	r2, r5
   146e0:	mov	r1, r4
   146e4:	mov	r0, r6
   146e8:	blx	r7
   146ec:	cmp	r5, r0
   146f0:	beq	14790 <__assert_fail@plt+0x178>
   146f4:	cmp	r4, r0
   146f8:	bne	14724 <__assert_fail@plt+0x10c>
   146fc:	ldr	r3, [sl, #4]!
   14700:	cmp	r3, #0
   14704:	bne	146c8 <__assert_fail@plt+0xb0>
   14708:	mov	r2, r5
   1470c:	mov	r1, r4
   14710:	mov	r0, r6
   14714:	mov	r3, #23
   14718:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1471c:	mov	r5, r0
   14720:	b	14790 <__assert_fail@plt+0x178>
   14724:	ldr	r3, [sp, #16]
   14728:	mov	r7, r0
   1472c:	cmp	r3, #0
   14730:	beq	14784 <__assert_fail@plt+0x16c>
   14734:	mov	r3, #8
   14738:	mov	r2, r5
   1473c:	mov	r1, r7
   14740:	mov	r0, r6
   14744:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   14748:	cmp	r5, r0
   1474c:	beq	14790 <__assert_fail@plt+0x178>
   14750:	ldrd	r2, [r8]
   14754:	ldrd	r0, [sp, #8]
   14758:	ldr	ip, [sp, #20]
   1475c:	adds	r0, r0, r2
   14760:	adc	r1, r1, r3
   14764:	mov	r2, r0
   14768:	mov	r3, r1
   1476c:	cmp	ip, #0
   14770:	strd	r2, [r8]
   14774:	movne	r4, r7
   14778:	bne	146c4 <__assert_fail@plt+0xac>
   1477c:	mov	r5, r7
   14780:	b	14790 <__assert_fail@plt+0x178>
   14784:	ldrd	r2, [sp, #24]
   14788:	strd	r2, [sp, #8]
   1478c:	b	14750 <__assert_fail@plt+0x138>
   14790:	mov	r0, r5
   14794:	add	sp, sp, #36	; 0x24
   14798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1479c:	push	{r4, lr}
   147a0:	mov	r2, #308	; 0x134
   147a4:	ldr	r3, [pc, #8]	; 147b4 <__assert_fail@plt+0x19c>
   147a8:	ldr	r1, [pc, #8]	; 147b8 <__assert_fail@plt+0x1a0>
   147ac:	ldr	r0, [pc, #8]	; 147bc <__assert_fail@plt+0x1a4>
   147b0:	bl	14618 <__assert_fail@plt>
   147b4:	andeq	r5, r4, r4, lsl #14
   147b8:	andeq	r5, r4, r4, asr lr
   147bc:	andeq	r5, r4, r4, lsl pc
   147c0:	push	{r4, lr}
   147c4:	ldr	r3, [pc, #12]	; 147d8 <__assert_fail@plt+0x1c0>
   147c8:	ldr	r2, [pc, #12]	; 147dc <__assert_fail@plt+0x1c4>
   147cc:	ldr	r1, [pc, #12]	; 147e0 <__assert_fail@plt+0x1c8>
   147d0:	ldr	r0, [pc, #12]	; 147e4 <__assert_fail@plt+0x1cc>
   147d4:	bl	14618 <__assert_fail@plt>
   147d8:	andeq	r5, r4, r4, lsl r7
   147dc:	andeq	r0, r0, r1, lsr #5
   147e0:	andeq	r5, r4, r4, asr lr
   147e4:	andeq	r5, r4, r4, lsl pc
   147e8:	push	{r4, lr}
   147ec:	ldr	r3, [pc, #12]	; 14800 <__assert_fail@plt+0x1e8>
   147f0:	ldr	r2, [pc, #12]	; 14804 <__assert_fail@plt+0x1ec>
   147f4:	ldr	r1, [pc, #12]	; 14808 <__assert_fail@plt+0x1f0>
   147f8:	ldr	r0, [pc, #12]	; 1480c <__assert_fail@plt+0x1f4>
   147fc:	bl	14618 <__assert_fail@plt>
   14800:	andeq	r5, r4, r0, lsr #14
   14804:	andeq	r0, r0, r7, lsl #5
   14808:	andeq	r5, r4, r4, asr lr
   1480c:	andeq	r5, r4, r4, lsl pc
   14810:	push	{r4, lr}
   14814:	mov	r2, #892	; 0x37c
   14818:	ldr	r3, [pc, #8]	; 14828 <__assert_fail@plt+0x210>
   1481c:	ldr	r1, [pc, #8]	; 1482c <__assert_fail@plt+0x214>
   14820:	ldr	r0, [pc, #8]	; 14830 <__assert_fail@plt+0x218>
   14824:	bl	14618 <__assert_fail@plt>
   14828:	andeq	r5, r4, ip, lsr #14
   1482c:	andeq	r5, r4, r4, asr lr
   14830:	muleq	r4, ip, lr
   14834:	push	{r4, lr}
   14838:	ldr	r3, [pc, #12]	; 1484c <__assert_fail@plt+0x234>
   1483c:	ldr	r2, [pc, #12]	; 14850 <__assert_fail@plt+0x238>
   14840:	ldr	r1, [pc, #12]	; 14854 <__assert_fail@plt+0x23c>
   14844:	ldr	r0, [pc, #12]	; 14858 <__assert_fail@plt+0x240>
   14848:	bl	14618 <__assert_fail@plt>
   1484c:	andeq	r5, r4, r0, asr #14
   14850:	andeq	r0, r0, lr, lsl r2
   14854:	andeq	r5, r4, r4, asr lr
   14858:			; <UNDEFINED> instruction: 0x00045eb8
   1485c:	push	{r4, lr}
   14860:	ldr	r3, [pc, #12]	; 14874 <__assert_fail@plt+0x25c>
   14864:	ldr	r2, [pc, #12]	; 14878 <__assert_fail@plt+0x260>
   14868:	ldr	r1, [pc, #12]	; 1487c <__assert_fail@plt+0x264>
   1486c:	ldr	r0, [pc, #12]	; 14880 <__assert_fail@plt+0x268>
   14870:	bl	14618 <__assert_fail@plt>
   14874:	andeq	r5, r4, r0, ror #14
   14878:	andeq	r0, r0, r6, asr #7
   1487c:	andeq	r5, r4, r4, asr lr
   14880:	ldrdeq	r5, [r4], -r4
   14884:	push	{r4, lr}
   14888:	ldr	r3, [pc, #12]	; 1489c <__assert_fail@plt+0x284>
   1488c:	ldr	r2, [pc, #12]	; 148a0 <__assert_fail@plt+0x288>
   14890:	ldr	r1, [pc, #12]	; 148a4 <__assert_fail@plt+0x28c>
   14894:	ldr	r0, [pc, #12]	; 148a8 <__assert_fail@plt+0x290>
   14898:	bl	14618 <__assert_fail@plt>
   1489c:	andeq	r5, r4, r0, lsl #15
   148a0:	andeq	r0, r0, r6, lsl #15
   148a4:	andeq	r5, r4, r4, asr lr
   148a8:	andeq	r5, r4, r0, lsl #30
   148ac:	push	{r4, lr}
   148b0:	mov	r2, #260	; 0x104
   148b4:	ldr	r3, [pc, #8]	; 148c4 <__assert_fail@plt+0x2ac>
   148b8:	ldr	r1, [pc, #8]	; 148c8 <__assert_fail@plt+0x2b0>
   148bc:	ldr	r0, [pc, #8]	; 148cc <__assert_fail@plt+0x2b4>
   148c0:	bl	14618 <__assert_fail@plt>
   148c4:	andeq	r6, r4, r8, lsl #15
   148c8:	andeq	r7, r4, r0, lsr #32
   148cc:	andeq	r7, r4, r8, ror r0
   148d0:	push	{r4, lr}
   148d4:	mov	r2, #260	; 0x104
   148d8:	ldr	r3, [pc, #8]	; 148e8 <__assert_fail@plt+0x2d0>
   148dc:	ldr	r1, [pc, #8]	; 148ec <__assert_fail@plt+0x2d4>
   148e0:	ldr	r0, [pc, #8]	; 148f0 <__assert_fail@plt+0x2d8>
   148e4:	bl	14618 <__assert_fail@plt>
   148e8:	andeq	r7, r4, ip, lsl r5
   148ec:	andeq	r7, r4, r0, lsr #32
   148f0:	andeq	r7, r4, r8, ror r0
   148f4:	ldr	r3, [r0, #36]	; 0x24
   148f8:	push	{r4, lr}
   148fc:	cmp	r3, #0
   14900:	moveq	r3, #1
   14904:	streq	r3, [r0, #36]	; 0x24
   14908:	ldr	r2, [pc, #12]	; 1491c <__assert_fail@plt+0x304>
   1490c:	ldr	r3, [pc, #12]	; 14920 <__assert_fail@plt+0x308>
   14910:	ldr	r1, [pc, #12]	; 14924 <__assert_fail@plt+0x30c>
   14914:	ldr	r0, [pc, #12]	; 14928 <__assert_fail@plt+0x310>
   14918:	bl	14618 <__assert_fail@plt>
   1491c:	andeq	r0, r0, r4, lsl #8
   14920:	andeq	r7, r4, r8, asr #10
   14924:			; <UNDEFINED> instruction: 0x00047bbc
   14928:	andeq	r7, r4, r8, lsl #24

0001492c <main@@Base>:
   1492c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14930:	sub	sp, sp, #12
   14934:	bl	252d4 <edge_case_tests@@Base>
   14938:	ldr	r6, [pc, #2572]	; 1534c <main@@Base+0xa20>
   1493c:	mov	r4, #0
   14940:	ldr	r7, [pc, #2568]	; 15350 <main@@Base+0xa24>
   14944:	ldr	r9, [pc, #2568]	; 15354 <main@@Base+0xa28>
   14948:	ldr	r8, [pc, #2568]	; 15358 <main@@Base+0xa2c>
   1494c:	ldr	sl, [pc, #2568]	; 1535c <main@@Base+0xa30>
   14950:	ldr	fp, [pc, #2568]	; 15360 <main@@Base+0xa34>
   14954:	mov	r5, r0
   14958:	bl	255c8 <error_case_tests@@Base>
   1495c:	orr	r5, r5, r0
   14960:	bl	25bc0 <union_vector_tests@@Base>
   14964:	orr	r5, r5, r0
   14968:	bl	258dc <base64_tests@@Base>
   1496c:	orr	r5, r5, r0
   14970:	bl	25abc <mixed_type_union_tests@@Base>
   14974:	ldr	r3, [pc, #2536]	; 15364 <main@@Base+0xa38>
   14978:	mov	r1, r6
   1497c:	str	r3, [sp, #4]
   14980:	mov	r2, r4
   14984:	mov	r3, r4
   14988:	str	r4, [sp]
   1498c:	orr	r5, r5, r0
   14990:	ldr	r0, [pc, #2512]	; 15368 <main@@Base+0xa3c>
   14994:	bl	18464 <_start@@Base+0x2ec4>
   14998:	mov	ip, #528	; 0x210
   1499c:	mov	r3, r4
   149a0:	mov	r2, r4
   149a4:	mov	r1, r7
   149a8:	str	ip, [sp, #4]
   149ac:	str	r4, [sp]
   149b0:	orr	r5, r5, r0
   149b4:	ldr	r0, [pc, #2480]	; 1536c <main@@Base+0xa40>
   149b8:	bl	18464 <_start@@Base+0x2ec4>
   149bc:	ldr	ip, [pc, #2476]	; 15370 <main@@Base+0xa44>
   149c0:	mov	r3, r4
   149c4:	mov	r2, r4
   149c8:	mov	r1, r9
   149cc:	str	ip, [sp, #4]
   149d0:	str	r4, [sp]
   149d4:	orr	r5, r5, r0
   149d8:	ldr	r0, [pc, #2452]	; 15374 <main@@Base+0xa48>
   149dc:	bl	18464 <_start@@Base+0x2ec4>
   149e0:	ldr	ip, [pc, #2448]	; 15378 <main@@Base+0xa4c>
   149e4:	mov	r3, r4
   149e8:	mov	r2, r4
   149ec:	mov	r1, r8
   149f0:	str	ip, [sp, #4]
   149f4:	str	r4, [sp]
   149f8:	orr	r5, r5, r0
   149fc:	ldr	r0, [pc, #2424]	; 1537c <main@@Base+0xa50>
   14a00:	bl	18464 <_start@@Base+0x2ec4>
   14a04:	ldr	ip, [pc, #2420]	; 15380 <main@@Base+0xa54>
   14a08:	mov	r3, r4
   14a0c:	mov	r2, r4
   14a10:	mov	r1, r8
   14a14:	str	ip, [sp, #4]
   14a18:	str	r4, [sp]
   14a1c:	orr	r5, r5, r0
   14a20:	ldr	r0, [pc, #2396]	; 15384 <main@@Base+0xa58>
   14a24:	bl	18464 <_start@@Base+0x2ec4>
   14a28:	mov	ip, #540	; 0x21c
   14a2c:	mov	r3, r4
   14a30:	mov	r2, r4
   14a34:	mov	r1, r7
   14a38:	str	ip, [sp, #4]
   14a3c:	str	r4, [sp]
   14a40:	orr	r5, r5, r0
   14a44:	ldr	r0, [pc, #2364]	; 15388 <main@@Base+0xa5c>
   14a48:	bl	18464 <_start@@Base+0x2ec4>
   14a4c:	ldr	ip, [pc, #2360]	; 1538c <main@@Base+0xa60>
   14a50:	mov	r3, r4
   14a54:	mov	r2, r4
   14a58:	mov	r1, r9
   14a5c:	str	ip, [sp, #4]
   14a60:	str	r4, [sp]
   14a64:	orr	r5, r5, r0
   14a68:	ldr	r0, [pc, #2336]	; 15390 <main@@Base+0xa64>
   14a6c:	bl	18464 <_start@@Base+0x2ec4>
   14a70:	ldr	ip, [pc, #2332]	; 15394 <main@@Base+0xa68>
   14a74:	mov	r3, r4
   14a78:	mov	r2, r4
   14a7c:	mov	r1, r6
   14a80:	str	ip, [sp, #4]
   14a84:	str	r4, [sp]
   14a88:	orr	r5, r5, r0
   14a8c:	ldr	r0, [pc, #2308]	; 15398 <main@@Base+0xa6c>
   14a90:	bl	18464 <_start@@Base+0x2ec4>
   14a94:	ldr	ip, [pc, #2304]	; 1539c <main@@Base+0xa70>
   14a98:	mov	r3, r4
   14a9c:	mov	r2, r4
   14aa0:	mov	r1, r6
   14aa4:	str	ip, [sp, #4]
   14aa8:	str	r4, [sp]
   14aac:	orr	r5, r5, r0
   14ab0:	ldr	r0, [pc, #2280]	; 153a0 <main@@Base+0xa74>
   14ab4:	bl	18464 <_start@@Base+0x2ec4>
   14ab8:	ldr	ip, [pc, #2276]	; 153a4 <main@@Base+0xa78>
   14abc:	mov	r3, r4
   14ac0:	mov	r2, r4
   14ac4:	mov	r1, r6
   14ac8:	str	ip, [sp, #4]
   14acc:	str	r4, [sp]
   14ad0:	orr	r5, r5, r0
   14ad4:	ldr	r0, [pc, #2252]	; 153a8 <main@@Base+0xa7c>
   14ad8:	bl	18464 <_start@@Base+0x2ec4>
   14adc:	ldr	ip, [pc, #2248]	; 153ac <main@@Base+0xa80>
   14ae0:	mov	r3, r4
   14ae4:	mov	r2, r4
   14ae8:	mov	r1, r7
   14aec:	str	ip, [sp, #4]
   14af0:	str	r4, [sp]
   14af4:	orr	r5, r5, r0
   14af8:	ldr	r0, [pc, #2224]	; 153b0 <main@@Base+0xa84>
   14afc:	bl	18464 <_start@@Base+0x2ec4>
   14b00:	ldr	ip, [pc, #2220]	; 153b4 <main@@Base+0xa88>
   14b04:	mov	r3, r4
   14b08:	mov	r2, r4
   14b0c:	mov	r1, r9
   14b10:	str	ip, [sp, #4]
   14b14:	str	r4, [sp]
   14b18:	orr	r5, r5, r0
   14b1c:	ldr	r0, [pc, #2196]	; 153b8 <main@@Base+0xa8c>
   14b20:	bl	18464 <_start@@Base+0x2ec4>
   14b24:	mov	ip, #564	; 0x234
   14b28:	mov	r3, r4
   14b2c:	mov	r2, r4
   14b30:	mov	r1, r8
   14b34:	str	ip, [sp, #4]
   14b38:	str	r4, [sp]
   14b3c:	orr	r5, r5, r0
   14b40:	ldr	r0, [pc, #2164]	; 153bc <main@@Base+0xa90>
   14b44:	bl	18464 <_start@@Base+0x2ec4>
   14b48:	ldr	ip, [pc, #2160]	; 153c0 <main@@Base+0xa94>
   14b4c:	mov	r3, r4
   14b50:	mov	r2, r4
   14b54:	mov	r1, r8
   14b58:	str	ip, [sp, #4]
   14b5c:	str	r4, [sp]
   14b60:	orr	r5, r5, r0
   14b64:	ldr	r0, [pc, #2136]	; 153c4 <main@@Base+0xa98>
   14b68:	bl	18464 <_start@@Base+0x2ec4>
   14b6c:	ldr	ip, [pc, #2132]	; 153c8 <main@@Base+0xa9c>
   14b70:	mov	r3, r4
   14b74:	mov	r2, r4
   14b78:	mov	r1, r7
   14b7c:	str	ip, [sp, #4]
   14b80:	str	r4, [sp]
   14b84:	orr	r5, r5, r0
   14b88:	ldr	r0, [pc, #2108]	; 153cc <main@@Base+0xaa0>
   14b8c:	bl	18464 <_start@@Base+0x2ec4>
   14b90:	ldr	ip, [pc, #2104]	; 153d0 <main@@Base+0xaa4>
   14b94:	mov	r3, r4
   14b98:	mov	r2, r4
   14b9c:	mov	r1, r9
   14ba0:	str	ip, [sp, #4]
   14ba4:	str	r4, [sp]
   14ba8:	orr	r5, r5, r0
   14bac:	ldr	r0, [pc, #2080]	; 153d4 <main@@Base+0xaa8>
   14bb0:	bl	18464 <_start@@Base+0x2ec4>
   14bb4:	ldr	ip, [pc, #2076]	; 153d8 <main@@Base+0xaac>
   14bb8:	mov	r3, r4
   14bbc:	mov	r2, r4
   14bc0:	mov	r1, r6
   14bc4:	str	ip, [sp, #4]
   14bc8:	str	r4, [sp]
   14bcc:	orr	r5, r5, r0
   14bd0:	ldr	r0, [pc, #2052]	; 153dc <main@@Base+0xab0>
   14bd4:	bl	18464 <_start@@Base+0x2ec4>
   14bd8:	ldr	ip, [pc, #2048]	; 153e0 <main@@Base+0xab4>
   14bdc:	mov	r3, r4
   14be0:	mov	r2, r4
   14be4:	mov	r1, r6
   14be8:	str	ip, [sp, #4]
   14bec:	str	r4, [sp]
   14bf0:	orr	r5, r5, r0
   14bf4:	ldr	r0, [pc, #2024]	; 153e4 <main@@Base+0xab8>
   14bf8:	bl	18464 <_start@@Base+0x2ec4>
   14bfc:	ldr	ip, [pc, #2020]	; 153e8 <main@@Base+0xabc>
   14c00:	mov	r3, r4
   14c04:	mov	r2, r4
   14c08:	mov	r1, sl
   14c0c:	str	ip, [sp, #4]
   14c10:	str	r4, [sp]
   14c14:	orr	r5, r5, r0
   14c18:	ldr	r0, [pc, #1996]	; 153ec <main@@Base+0xac0>
   14c1c:	bl	18464 <_start@@Base+0x2ec4>
   14c20:	ldr	ip, [pc, #1992]	; 153f0 <main@@Base+0xac4>
   14c24:	mov	r3, r4
   14c28:	mov	r2, r4
   14c2c:	mov	r1, sl
   14c30:	str	ip, [sp, #4]
   14c34:	str	r4, [sp]
   14c38:	orr	r5, r5, r0
   14c3c:	ldr	r0, [pc, #1968]	; 153f4 <main@@Base+0xac8>
   14c40:	bl	18464 <_start@@Base+0x2ec4>
   14c44:	ldr	ip, [pc, #1964]	; 153f8 <main@@Base+0xacc>
   14c48:	mov	r1, sl
   14c4c:	mov	r3, r4
   14c50:	mov	r2, r4
   14c54:	str	ip, [sp, #4]
   14c58:	str	r4, [sp]
   14c5c:	ldr	sl, [pc, #1944]	; 153fc <main@@Base+0xad0>
   14c60:	orr	r5, r5, r0
   14c64:	ldr	r0, [pc, #1940]	; 15400 <main@@Base+0xad4>
   14c68:	bl	18464 <_start@@Base+0x2ec4>
   14c6c:	ldr	ip, [pc, #1936]	; 15404 <main@@Base+0xad8>
   14c70:	mov	r3, r4
   14c74:	mov	r2, r4
   14c78:	mov	r1, r8
   14c7c:	str	ip, [sp, #4]
   14c80:	str	r4, [sp]
   14c84:	orr	r5, r5, r0
   14c88:	ldr	r0, [pc, #1912]	; 15408 <main@@Base+0xadc>
   14c8c:	bl	18464 <_start@@Base+0x2ec4>
   14c90:	ldr	ip, [pc, #1908]	; 1540c <main@@Base+0xae0>
   14c94:	mov	r3, r4
   14c98:	mov	r2, r4
   14c9c:	mov	r1, r7
   14ca0:	str	ip, [sp, #4]
   14ca4:	str	r4, [sp]
   14ca8:	orr	r5, r5, r0
   14cac:	ldr	r0, [pc, #1884]	; 15410 <main@@Base+0xae4>
   14cb0:	bl	18464 <_start@@Base+0x2ec4>
   14cb4:	mov	ip, #604	; 0x25c
   14cb8:	mov	r3, r4
   14cbc:	mov	r2, r4
   14cc0:	mov	r1, r9
   14cc4:	str	ip, [sp, #4]
   14cc8:	str	r4, [sp]
   14ccc:	orr	r5, r5, r0
   14cd0:	ldr	r0, [pc, #1852]	; 15414 <main@@Base+0xae8>
   14cd4:	bl	18464 <_start@@Base+0x2ec4>
   14cd8:	ldr	ip, [pc, #1848]	; 15418 <main@@Base+0xaec>
   14cdc:	mov	r3, r4
   14ce0:	mov	r2, r4
   14ce4:	str	ip, [sp, #4]
   14ce8:	str	r4, [sp]
   14cec:	ldr	r1, [pc, #1832]	; 1541c <main@@Base+0xaf0>
   14cf0:	orr	r5, r5, r0
   14cf4:	ldr	r0, [pc, #1828]	; 15420 <main@@Base+0xaf4>
   14cf8:	bl	18464 <_start@@Base+0x2ec4>
   14cfc:	ldr	ip, [pc, #1824]	; 15424 <main@@Base+0xaf8>
   14d00:	mov	r3, r4
   14d04:	mov	r2, r4
   14d08:	mov	r1, r8
   14d0c:	str	ip, [sp, #4]
   14d10:	str	r4, [sp]
   14d14:	orr	r5, r5, r0
   14d18:	ldr	r0, [pc, #1800]	; 15428 <main@@Base+0xafc>
   14d1c:	bl	18464 <_start@@Base+0x2ec4>
   14d20:	ldr	ip, [pc, #1796]	; 1542c <main@@Base+0xb00>
   14d24:	mov	r3, r4
   14d28:	mov	r2, r4
   14d2c:	str	ip, [sp, #4]
   14d30:	str	r4, [sp]
   14d34:	ldr	r1, [pc, #1780]	; 15430 <main@@Base+0xb04>
   14d38:	orr	r5, r5, r0
   14d3c:	ldr	r0, [pc, #1776]	; 15434 <main@@Base+0xb08>
   14d40:	bl	18464 <_start@@Base+0x2ec4>
   14d44:	mov	ip, #616	; 0x268
   14d48:	mov	r3, r4
   14d4c:	mov	r2, r4
   14d50:	str	ip, [sp, #4]
   14d54:	str	r4, [sp]
   14d58:	ldr	r1, [pc, #1752]	; 15438 <main@@Base+0xb0c>
   14d5c:	orr	r5, r5, r0
   14d60:	ldr	r0, [pc, #1748]	; 1543c <main@@Base+0xb10>
   14d64:	bl	18464 <_start@@Base+0x2ec4>
   14d68:	ldr	ip, [pc, #1744]	; 15440 <main@@Base+0xb14>
   14d6c:	mov	r3, r4
   14d70:	mov	r2, r4
   14d74:	str	ip, [sp, #4]
   14d78:	str	r4, [sp]
   14d7c:	ldr	r1, [pc, #1728]	; 15444 <main@@Base+0xb18>
   14d80:	orr	r5, r5, r0
   14d84:	ldr	r0, [pc, #1724]	; 15448 <main@@Base+0xb1c>
   14d88:	bl	18464 <_start@@Base+0x2ec4>
   14d8c:	ldr	ip, [pc, #1720]	; 1544c <main@@Base+0xb20>
   14d90:	mov	r3, r4
   14d94:	mov	r2, r4
   14d98:	mov	r1, r7
   14d9c:	str	ip, [sp, #4]
   14da0:	str	r4, [sp]
   14da4:	orr	r5, r5, r0
   14da8:	ldr	r0, [pc, #1696]	; 15450 <main@@Base+0xb24>
   14dac:	bl	18464 <_start@@Base+0x2ec4>
   14db0:	ldr	ip, [pc, #1692]	; 15454 <main@@Base+0xb28>
   14db4:	mov	r3, r4
   14db8:	mov	r2, r4
   14dbc:	mov	r1, r7
   14dc0:	str	ip, [sp, #4]
   14dc4:	str	r4, [sp]
   14dc8:	orr	r5, r5, r0
   14dcc:	ldr	r0, [pc, #1668]	; 15458 <main@@Base+0xb2c>
   14dd0:	bl	18464 <_start@@Base+0x2ec4>
   14dd4:	mov	ip, #628	; 0x274
   14dd8:	str	ip, [sp, #4]
   14ddc:	mov	r3, r4
   14de0:	mov	r2, r4
   14de4:	mov	r1, sl
   14de8:	str	r4, [sp]
   14dec:	orr	r5, r5, r0
   14df0:	mov	r0, fp
   14df4:	bl	18464 <_start@@Base+0x2ec4>
   14df8:	ldr	r1, [pc, #1628]	; 1545c <main@@Base+0xb30>
   14dfc:	mov	r3, r4
   14e00:	mov	r2, r4
   14e04:	str	r1, [sp, #4]
   14e08:	str	r4, [sp]
   14e0c:	mov	r1, sl
   14e10:	orr	r5, r5, r0
   14e14:	mov	r0, fp
   14e18:	bl	18464 <_start@@Base+0x2ec4>
   14e1c:	ldr	r1, [pc, #1596]	; 15460 <main@@Base+0xb34>
   14e20:	mov	r3, r4
   14e24:	mov	r2, r4
   14e28:	str	r1, [sp, #4]
   14e2c:	str	r4, [sp]
   14e30:	ldr	r1, [pc, #1580]	; 15464 <main@@Base+0xb38>
   14e34:	ldr	fp, [pc, #1580]	; 15468 <main@@Base+0xb3c>
   14e38:	orr	r5, r5, r0
   14e3c:	ldr	r0, [pc, #1576]	; 1546c <main@@Base+0xb40>
   14e40:	bl	18464 <_start@@Base+0x2ec4>
   14e44:	ldr	r1, [pc, #1572]	; 15470 <main@@Base+0xb44>
   14e48:	mov	r3, r4
   14e4c:	mov	r2, r4
   14e50:	str	r1, [sp, #4]
   14e54:	str	r4, [sp]
   14e58:	ldr	r1, [pc, #1556]	; 15474 <main@@Base+0xb48>
   14e5c:	orr	r5, r5, r0
   14e60:	ldr	r0, [pc, #1552]	; 15478 <main@@Base+0xb4c>
   14e64:	bl	18464 <_start@@Base+0x2ec4>
   14e68:	ldr	r1, [pc, #1548]	; 1547c <main@@Base+0xb50>
   14e6c:	mov	r3, r4
   14e70:	mov	r2, r4
   14e74:	str	r1, [sp, #4]
   14e78:	str	r4, [sp]
   14e7c:	ldr	r1, [pc, #1532]	; 15480 <main@@Base+0xb54>
   14e80:	orr	r5, r5, r0
   14e84:	ldr	r0, [pc, #1528]	; 15484 <main@@Base+0xb58>
   14e88:	bl	18464 <_start@@Base+0x2ec4>
   14e8c:	ldr	r1, [pc, #1524]	; 15488 <main@@Base+0xb5c>
   14e90:	mov	r3, r4
   14e94:	mov	r2, r4
   14e98:	str	r1, [sp, #4]
   14e9c:	str	r4, [sp]
   14ea0:	mov	r1, r6
   14ea4:	orr	r5, r5, r0
   14ea8:	ldr	r0, [pc, #1500]	; 1548c <main@@Base+0xb60>
   14eac:	bl	18464 <_start@@Base+0x2ec4>
   14eb0:	ldr	r1, [pc, #1496]	; 15490 <main@@Base+0xb64>
   14eb4:	mov	r3, r4
   14eb8:	mov	r2, r4
   14ebc:	str	r1, [sp, #4]
   14ec0:	str	r4, [sp]
   14ec4:	mov	r1, r6
   14ec8:	orr	r5, r5, r0
   14ecc:	ldr	r0, [pc, #1472]	; 15494 <main@@Base+0xb68>
   14ed0:	bl	18464 <_start@@Base+0x2ec4>
   14ed4:	ldr	r1, [pc, #1468]	; 15498 <main@@Base+0xb6c>
   14ed8:	mov	r3, r4
   14edc:	mov	r2, r4
   14ee0:	str	r1, [sp, #4]
   14ee4:	str	r4, [sp]
   14ee8:	mov	r1, r7
   14eec:	orr	r5, r5, r0
   14ef0:	ldr	r0, [pc, #1444]	; 1549c <main@@Base+0xb70>
   14ef4:	bl	18464 <_start@@Base+0x2ec4>
   14ef8:	mov	r2, #656	; 0x290
   14efc:	mov	r1, r9
   14f00:	mov	r3, r4
   14f04:	str	r2, [sp, #4]
   14f08:	str	r4, [sp]
   14f0c:	mov	r2, r4
   14f10:	orr	r5, r5, r0
   14f14:	ldr	r0, [pc, #1412]	; 154a0 <main@@Base+0xb74>
   14f18:	bl	18464 <_start@@Base+0x2ec4>
   14f1c:	ldr	ip, [pc, #1408]	; 154a4 <main@@Base+0xb78>
   14f20:	mov	r3, r4
   14f24:	mov	r2, r4
   14f28:	str	ip, [sp, #4]
   14f2c:	ldr	r1, [pc, #1256]	; 1541c <main@@Base+0xaf0>
   14f30:	str	r4, [sp]
   14f34:	orr	r5, r5, r0
   14f38:	ldr	r0, [pc, #1384]	; 154a8 <main@@Base+0xb7c>
   14f3c:	bl	18464 <_start@@Base+0x2ec4>
   14f40:	ldr	ip, [pc, #1380]	; 154ac <main@@Base+0xb80>
   14f44:	mov	r1, r8
   14f48:	mov	r3, r4
   14f4c:	mov	r2, r4
   14f50:	str	ip, [sp, #4]
   14f54:	str	r4, [sp]
   14f58:	ldr	r8, [pc, #1360]	; 154b0 <main@@Base+0xb84>
   14f5c:	orr	r5, r5, r0
   14f60:	ldr	r0, [pc, #1356]	; 154b4 <main@@Base+0xb88>
   14f64:	bl	18464 <_start@@Base+0x2ec4>
   14f68:	ldr	ip, [pc, #1352]	; 154b8 <main@@Base+0xb8c>
   14f6c:	mov	r3, r4
   14f70:	mov	r2, r4
   14f74:	str	ip, [sp, #4]
   14f78:	ldr	r1, [pc, #1200]	; 15430 <main@@Base+0xb04>
   14f7c:	str	r4, [sp]
   14f80:	orr	r5, r5, r0
   14f84:	ldr	r0, [pc, #1328]	; 154bc <main@@Base+0xb90>
   14f88:	bl	18464 <_start@@Base+0x2ec4>
   14f8c:	mov	ip, #668	; 0x29c
   14f90:	mov	r3, r4
   14f94:	mov	r2, r4
   14f98:	str	ip, [sp, #4]
   14f9c:	ldr	r1, [pc, #1172]	; 15438 <main@@Base+0xb0c>
   14fa0:	str	r4, [sp]
   14fa4:	orr	r5, r5, r0
   14fa8:	ldr	r0, [pc, #1296]	; 154c0 <main@@Base+0xb94>
   14fac:	bl	18464 <_start@@Base+0x2ec4>
   14fb0:	ldr	ip, [pc, #1292]	; 154c4 <main@@Base+0xb98>
   14fb4:	mov	r3, r4
   14fb8:	mov	r2, r4
   14fbc:	str	ip, [sp, #4]
   14fc0:	ldr	r1, [pc, #1148]	; 15444 <main@@Base+0xb18>
   14fc4:	str	r4, [sp]
   14fc8:	orr	r5, r5, r0
   14fcc:	ldr	r0, [pc, #1268]	; 154c8 <main@@Base+0xb9c>
   14fd0:	bl	18464 <_start@@Base+0x2ec4>
   14fd4:	ldr	ip, [pc, #1264]	; 154cc <main@@Base+0xba0>
   14fd8:	mov	r3, r4
   14fdc:	mov	r2, r4
   14fe0:	mov	r1, r7
   14fe4:	str	ip, [sp, #4]
   14fe8:	str	r4, [sp]
   14fec:	orr	r5, r5, r0
   14ff0:	ldr	r0, [pc, #1240]	; 154d0 <main@@Base+0xba4>
   14ff4:	bl	18464 <_start@@Base+0x2ec4>
   14ff8:	ldr	ip, [pc, #1236]	; 154d4 <main@@Base+0xba8>
   14ffc:	mov	r1, r7
   15000:	mov	r3, r4
   15004:	mov	r2, r4
   15008:	str	ip, [sp, #4]
   1500c:	str	r4, [sp]
   15010:	ldr	r7, [pc, #1216]	; 154d8 <main@@Base+0xbac>
   15014:	orr	r5, r5, r0
   15018:	ldr	r0, [pc, #1212]	; 154dc <main@@Base+0xbb0>
   1501c:	bl	18464 <_start@@Base+0x2ec4>
   15020:	mov	ip, #680	; 0x2a8
   15024:	mov	r3, r4
   15028:	mov	r2, r4
   1502c:	mov	r1, sl
   15030:	str	ip, [sp, #4]
   15034:	str	r4, [sp]
   15038:	orr	r5, r5, r0
   1503c:	mov	r0, fp
   15040:	bl	18464 <_start@@Base+0x2ec4>
   15044:	ldr	ip, [pc, #1172]	; 154e0 <main@@Base+0xbb4>
   15048:	mov	r1, sl
   1504c:	mov	r3, r4
   15050:	mov	r2, r4
   15054:	str	ip, [sp, #4]
   15058:	str	r4, [sp]
   1505c:	orr	r5, r5, r0
   15060:	mov	r0, fp
   15064:	bl	18464 <_start@@Base+0x2ec4>
   15068:	ldr	ip, [pc, #1140]	; 154e4 <main@@Base+0xbb8>
   1506c:	mov	r3, r4
   15070:	mov	r2, r4
   15074:	str	ip, [sp, #4]
   15078:	str	r4, [sp]
   1507c:	ldr	r1, [pc, #992]	; 15464 <main@@Base+0xb38>
   15080:	orr	r5, r5, r0
   15084:	ldr	r0, [pc, #1116]	; 154e8 <main@@Base+0xbbc>
   15088:	bl	18464 <_start@@Base+0x2ec4>
   1508c:	ldr	ip, [pc, #1112]	; 154ec <main@@Base+0xbc0>
   15090:	mov	r3, r4
   15094:	mov	r2, r4
   15098:	str	ip, [sp, #4]
   1509c:	str	r4, [sp]
   150a0:	ldr	r1, [pc, #972]	; 15474 <main@@Base+0xb48>
   150a4:	orr	r5, r5, r0
   150a8:	ldr	r0, [pc, #1088]	; 154f0 <main@@Base+0xbc4>
   150ac:	bl	18464 <_start@@Base+0x2ec4>
   150b0:	ldr	ip, [pc, #1084]	; 154f4 <main@@Base+0xbc8>
   150b4:	mov	r3, r4
   150b8:	mov	r2, r4
   150bc:	str	ip, [sp, #4]
   150c0:	str	r4, [sp]
   150c4:	ldr	r1, [pc, #948]	; 15480 <main@@Base+0xb54>
   150c8:	orr	r5, r5, r0
   150cc:	ldr	r0, [pc, #1060]	; 154f8 <main@@Base+0xbcc>
   150d0:	bl	18464 <_start@@Base+0x2ec4>
   150d4:	ldr	ip, [pc, #1056]	; 154fc <main@@Base+0xbd0>
   150d8:	mov	r3, r4
   150dc:	mov	r2, r4
   150e0:	mov	r1, r6
   150e4:	str	ip, [sp, #4]
   150e8:	str	r4, [sp]
   150ec:	orr	r5, r5, r0
   150f0:	ldr	r0, [pc, #1032]	; 15500 <main@@Base+0xbd4>
   150f4:	bl	18464 <_start@@Base+0x2ec4>
   150f8:	ldr	ip, [pc, #1028]	; 15504 <main@@Base+0xbd8>
   150fc:	mov	r3, r4
   15100:	mov	r2, r4
   15104:	mov	r1, r6
   15108:	str	ip, [sp, #4]
   1510c:	str	r4, [sp]
   15110:	orr	r5, r5, r0
   15114:	ldr	r0, [pc, #1004]	; 15508 <main@@Base+0xbdc>
   15118:	bl	18464 <_start@@Base+0x2ec4>
   1511c:	ldr	ip, [pc, #1000]	; 1550c <main@@Base+0xbe0>
   15120:	mov	r3, r4
   15124:	mov	r2, r4
   15128:	mov	r1, r8
   1512c:	str	ip, [sp, #4]
   15130:	str	r4, [sp]
   15134:	orr	r5, r5, r0
   15138:	ldr	r0, [pc, #976]	; 15510 <main@@Base+0xbe4>
   1513c:	bl	18464 <_start@@Base+0x2ec4>
   15140:	mov	ip, #716	; 0x2cc
   15144:	str	ip, [sp, #4]
   15148:	mov	r1, r8
   1514c:	mov	r3, r4
   15150:	mov	r2, r4
   15154:	str	r4, [sp]
   15158:	orr	r5, r5, r0
   1515c:	ldr	r0, [pc, #944]	; 15514 <main@@Base+0xbe8>
   15160:	bl	18464 <_start@@Base+0x2ec4>
   15164:	ldr	r1, [pc, #940]	; 15518 <main@@Base+0xbec>
   15168:	mov	r3, r4
   1516c:	mov	r2, r4
   15170:	str	r1, [sp, #4]
   15174:	str	r4, [sp]
   15178:	ldr	r1, [pc, #924]	; 1551c <main@@Base+0xbf0>
   1517c:	orr	r5, r5, r0
   15180:	ldr	r0, [pc, #920]	; 15520 <main@@Base+0xbf4>
   15184:	bl	18464 <_start@@Base+0x2ec4>
   15188:	ldr	r1, [pc, #916]	; 15524 <main@@Base+0xbf8>
   1518c:	mov	r3, r4
   15190:	mov	r2, r4
   15194:	str	r1, [sp, #4]
   15198:	str	r4, [sp]
   1519c:	ldr	r1, [pc, #900]	; 15528 <main@@Base+0xbfc>
   151a0:	orr	r5, r5, r0
   151a4:	ldr	r0, [pc, #896]	; 1552c <main@@Base+0xc00>
   151a8:	bl	18464 <_start@@Base+0x2ec4>
   151ac:	ldr	ip, [pc, #892]	; 15530 <main@@Base+0xc04>
   151b0:	mov	r3, r4
   151b4:	mov	r2, r4
   151b8:	mov	r1, r7
   151bc:	str	ip, [sp, #4]
   151c0:	str	r4, [sp]
   151c4:	orr	r5, r5, r0
   151c8:	ldr	r0, [pc, #868]	; 15534 <main@@Base+0xc08>
   151cc:	bl	18464 <_start@@Base+0x2ec4>
   151d0:	ldr	ip, [pc, #864]	; 15538 <main@@Base+0xc0c>
   151d4:	mov	r1, r7
   151d8:	str	ip, [sp, #4]
   151dc:	mov	r3, r4
   151e0:	mov	r2, r4
   151e4:	str	r4, [sp]
   151e8:	orr	r5, r5, r0
   151ec:	ldr	r0, [pc, #840]	; 1553c <main@@Base+0xc10>
   151f0:	bl	18464 <_start@@Base+0x2ec4>
   151f4:	ldr	r1, [pc, #836]	; 15540 <main@@Base+0xc14>
   151f8:	mov	r3, r4
   151fc:	mov	r2, r4
   15200:	str	r1, [sp, #4]
   15204:	str	r4, [sp]
   15208:	ldr	r1, [pc, #820]	; 15544 <main@@Base+0xc18>
   1520c:	orr	r5, r5, r0
   15210:	ldr	r0, [pc, #816]	; 15548 <main@@Base+0xc1c>
   15214:	bl	18464 <_start@@Base+0x2ec4>
   15218:	ldr	r1, [pc, #812]	; 1554c <main@@Base+0xc20>
   1521c:	mov	r3, r4
   15220:	mov	r2, r4
   15224:	str	r1, [sp, #4]
   15228:	str	r4, [sp]
   1522c:	ldr	r1, [pc, #796]	; 15550 <main@@Base+0xc24>
   15230:	orr	r5, r5, r0
   15234:	ldr	r0, [pc, #792]	; 15554 <main@@Base+0xc28>
   15238:	bl	18464 <_start@@Base+0x2ec4>
   1523c:	mov	r1, #776	; 0x308
   15240:	mov	r3, r4
   15244:	mov	r2, r4
   15248:	str	r1, [sp, #4]
   1524c:	str	r4, [sp]
   15250:	ldr	r1, [pc, #768]	; 15558 <main@@Base+0xc2c>
   15254:	orr	r5, r5, r0
   15258:	ldr	r0, [pc, #764]	; 1555c <main@@Base+0xc30>
   1525c:	bl	18464 <_start@@Base+0x2ec4>
   15260:	ldr	ip, [pc, #760]	; 15560 <main@@Base+0xc34>
   15264:	mov	r1, r6
   15268:	str	ip, [sp, #4]
   1526c:	mov	r3, r4
   15270:	mov	r2, r4
   15274:	str	r4, [sp]
   15278:	orr	r5, r5, r0
   1527c:	ldr	r0, [pc, #736]	; 15564 <main@@Base+0xc38>
   15280:	bl	18464 <_start@@Base+0x2ec4>
   15284:	ldr	r1, [pc, #732]	; 15568 <main@@Base+0xc3c>
   15288:	mov	r3, r4
   1528c:	mov	r2, r4
   15290:	str	r1, [sp, #4]
   15294:	str	r4, [sp]
   15298:	ldr	r1, [pc, #716]	; 1556c <main@@Base+0xc40>
   1529c:	orr	r5, r5, r0
   152a0:	ldr	r0, [pc, #712]	; 15570 <main@@Base+0xc44>
   152a4:	bl	18464 <_start@@Base+0x2ec4>
   152a8:	ldr	r1, [pc, #708]	; 15574 <main@@Base+0xc48>
   152ac:	mov	r3, r4
   152b0:	mov	r2, r4
   152b4:	str	r1, [sp, #4]
   152b8:	str	r4, [sp]
   152bc:	ldr	r1, [pc, #692]	; 15578 <main@@Base+0xc4c>
   152c0:	orr	r5, r5, r0
   152c4:	ldr	r0, [pc, #688]	; 1557c <main@@Base+0xc50>
   152c8:	bl	18464 <_start@@Base+0x2ec4>
   152cc:	mov	r1, #796	; 0x31c
   152d0:	mov	r3, r4
   152d4:	mov	r2, r4
   152d8:	str	r1, [sp, #4]
   152dc:	str	r4, [sp]
   152e0:	ldr	r1, [pc, #664]	; 15580 <main@@Base+0xc54>
   152e4:	orr	r5, r5, r0
   152e8:	ldr	r0, [pc, #660]	; 15584 <main@@Base+0xc58>
   152ec:	bl	18464 <_start@@Base+0x2ec4>
   152f0:	ldr	r1, [pc, #656]	; 15588 <main@@Base+0xc5c>
   152f4:	mov	r3, r4
   152f8:	mov	r2, r4
   152fc:	str	r1, [sp, #4]
   15300:	str	r4, [sp]
   15304:	ldr	r1, [pc, #640]	; 1558c <main@@Base+0xc60>
   15308:	orr	r5, r5, r0
   1530c:	ldr	r0, [pc, #636]	; 15590 <main@@Base+0xc64>
   15310:	bl	18464 <_start@@Base+0x2ec4>
   15314:	ldr	r1, [pc, #632]	; 15594 <main@@Base+0xc68>
   15318:	mov	r3, r4
   1531c:	str	r1, [sp, #4]
   15320:	str	r4, [sp]
   15324:	mov	r2, r4
   15328:	ldr	r1, [pc, #616]	; 15598 <main@@Base+0xc6c>
   1532c:	orr	r5, r5, r0
   15330:	ldr	r0, [pc, #612]	; 1559c <main@@Base+0xc70>
   15334:	bl	18464 <_start@@Base+0x2ec4>
   15338:	orrs	r3, r5, r0
   1533c:	mvnne	r0, #0
   15340:	moveq	r0, r4
   15344:	add	sp, sp, #12
   15348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1534c:	andeq	r2, r4, r0, lsr r0
   15350:	strdeq	r4, [r4], -ip
   15354:	andeq	r4, r4, r8, asr #4
   15358:	muleq	r4, r4, r2
   1535c:	ldrdeq	r4, [r4], -ip
   15360:			; <UNDEFINED> instruction: 0x000447b4
   15364:	andeq	r0, r0, sp, lsl #4
   15368:	andeq	r4, r4, r4, ror #3
   1536c:	andeq	r4, r4, r0, lsr #4
   15370:	andeq	r0, r0, r3, lsl r2
   15374:	andeq	r4, r4, ip, ror #4
   15378:	andeq	r0, r0, r6, lsl r2
   1537c:	andeq	r4, r4, r0, asr #5
   15380:	andeq	r0, r0, r9, lsl r2
   15384:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   15388:	andeq	r4, r4, r0, lsr r3
   1538c:	andeq	r0, r0, pc, lsl r2
   15390:	andeq	r4, r4, r8, asr r3
   15394:	andeq	r0, r0, r3, lsr #4
   15398:	andeq	r4, r4, r4, lsl #7
   1539c:	andeq	r0, r0, r7, lsr #4
   153a0:	andeq	r1, r4, r4, asr #31
   153a4:	andeq	r0, r0, fp, lsr #4
   153a8:	andeq	r4, r4, ip, lsr #7
   153ac:	andeq	r0, r0, lr, lsr #4
   153b0:	andeq	r4, r4, r4, asr #7
   153b4:	andeq	r0, r0, r1, lsr r2
   153b8:	andeq	r4, r4, r8, ror #7
   153bc:	andeq	r4, r4, ip, lsl #8
   153c0:	andeq	r0, r0, r7, lsr r2
   153c4:	andeq	r4, r4, ip, lsr r4
   153c8:	andeq	r0, r0, sl, lsr r2
   153cc:	andeq	r4, r4, r4, ror r4
   153d0:	andeq	r0, r0, sp, lsr r2
   153d4:	muleq	r4, r4, r4
   153d8:	andeq	r0, r0, r1, asr #4
   153dc:			; <UNDEFINED> instruction: 0x000444b8
   153e0:	andeq	r0, r0, r5, asr #4
   153e4:	andeq	r2, r4, r0, lsl #5
   153e8:	andeq	r0, r0, r9, asr #4
   153ec:	andeq	r4, r4, r4, lsl #10
   153f0:	andeq	r0, r0, pc, asr #4
   153f4:	andeq	r4, r4, ip, lsr #10
   153f8:	andeq	r0, r0, r2, asr r2
   153fc:	muleq	r4, r8, r7
   15400:	andeq	r4, r4, r4, asr r5
   15404:	andeq	r0, r0, r5, asr r2
   15408:	andeq	r4, r4, ip, ror r5
   1540c:	andeq	r0, r0, r9, asr r2
   15410:	andeq	r4, r4, ip, lsr #11
   15414:	ldrdeq	r4, [r4], -r0
   15418:	andeq	r0, r0, pc, asr r2
   1541c:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   15420:	andeq	r4, r4, ip, lsl r6
   15424:	andeq	r0, r0, r2, ror #4
   15428:	andeq	r4, r4, r0, asr #12
   1542c:	andeq	r0, r0, r5, ror #4
   15430:	andeq	r4, r4, r4, ror #12
   15434:	andeq	r4, r4, r4, lsl #13
   15438:	andeq	r4, r4, r8, lsr #13
   1543c:	andeq	r4, r4, r8, asr #13
   15440:	andeq	r0, r0, fp, ror #4
   15444:	andeq	r4, r4, ip, ror #13
   15448:	andeq	r4, r4, ip, lsl #14
   1544c:	andeq	r0, r0, lr, ror #4
   15450:	andeq	r4, r4, r0, lsr r7
   15454:	andeq	r0, r0, r1, ror r2
   15458:	andeq	r4, r4, ip, asr r7
   1545c:	andeq	r0, r0, r7, ror r2
   15460:	andeq	r0, r0, sl, ror r2
   15464:	andeq	r4, r4, r0, ror #15
   15468:	andeq	r4, r4, r4, lsl #23
   1546c:	andeq	r4, r4, r8, lsr #16
   15470:	andeq	r0, r0, lr, ror r2
   15474:	andeq	r4, r4, ip, ror r8
   15478:	andeq	r4, r4, r8, asr #17
   1547c:	andeq	r0, r0, r2, lsl #5
   15480:	andeq	r4, r4, r0, lsr #18
   15484:	andeq	r4, r4, r4, lsl #19
   15488:	andeq	r0, r0, r6, lsl #5
   1548c:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   15490:	andeq	r0, r0, r9, lsl #5
   15494:	andeq	r4, r4, r0, lsr #20
   15498:	andeq	r0, r0, sp, lsl #5
   1549c:	andeq	r4, r4, r8, asr #20
   154a0:	andeq	r4, r4, r8, ror #20
   154a4:	muleq	r0, r3, r2
   154a8:	andeq	r4, r4, r8, lsl #21
   154ac:	muleq	r0, r6, r2
   154b0:	andeq	r4, r4, r8, ror #25
   154b4:	andeq	r4, r4, r8, lsr #21
   154b8:	muleq	r0, r9, r2
   154bc:	andeq	r4, r4, r8, asr #21
   154c0:	andeq	r4, r4, r8, ror #21
   154c4:	muleq	r0, pc, r2	; <UNPREDICTABLE>
   154c8:	andeq	r4, r4, r8, lsl #22
   154cc:	andeq	r0, r0, r2, lsr #5
   154d0:	andeq	r4, r4, r8, lsr #22
   154d4:	andeq	r0, r0, r5, lsr #5
   154d8:			; <UNDEFINED> instruction: 0x00044eb8
   154dc:	andeq	r4, r4, r0, asr fp
   154e0:	andeq	r0, r0, fp, lsr #5
   154e4:	andeq	r0, r0, lr, lsr #5
   154e8:	andeq	r4, r4, r8, lsr #23
   154ec:			; <UNDEFINED> instruction: 0x000002b2
   154f0:	strdeq	r4, [r4], -r0
   154f4:			; <UNDEFINED> instruction: 0x000002b6
   154f8:	andeq	r4, r4, ip, lsr ip
   154fc:			; <UNDEFINED> instruction: 0x000002ba
   15500:	muleq	r4, ip, ip
   15504:			; <UNDEFINED> instruction: 0x000002bd
   15508:	andeq	r4, r4, r4, asr #25
   1550c:	andeq	r0, r0, r7, asr #5
   15510:	andeq	r4, r4, r8, asr #26
   15514:	andeq	r4, r4, r8, lsr #27
   15518:	ldrdeq	r0, [r0], -fp
   1551c:	andeq	r4, r4, r8, lsl lr
   15520:	andeq	r4, r4, r8, asr #28
   15524:	ldrdeq	r0, [r0], -lr
   15528:	andeq	r4, r4, r8, lsl #29
   1552c:	muleq	r4, ip, lr
   15530:	andeq	r0, r0, r2, ror #5
   15534:	strdeq	r4, [r4], -ip
   15538:	andeq	r0, r0, lr, ror #5
   1553c:	andeq	r4, r4, r4, asr #30
   15540:	strdeq	r0, [r0], -lr
   15544:	andeq	r4, r4, r4, ror #31
   15548:	andeq	r5, r4, r8
   1554c:	andeq	r0, r0, r2, lsl #6
   15550:	andeq	r5, r4, r0, lsr r0
   15554:	andeq	r5, r4, ip, asr r0
   15558:	andeq	r5, r4, ip, lsl #1
   1555c:	strdeq	r5, [r4], -ip
   15560:	andeq	r0, r0, sp, lsl #6
   15564:	andeq	r5, r4, r8, ror r1
   15568:	andeq	r0, r0, r2, lsl r3
   1556c:	strdeq	r5, [r4], -r0
   15570:	andeq	r5, r4, r0, ror #4
   15574:	andeq	r0, r0, r7, lsl r3
   15578:	ldrdeq	r5, [r4], -ip
   1557c:	andeq	r5, r4, ip, asr r3
   15580:	andeq	r5, r4, r8, ror #7
   15584:	andeq	r5, r4, r8, asr r4
   15588:	andeq	r0, r0, r1, lsr #6
   1558c:	ldrdeq	r5, [r4], -r4
   15590:	andeq	r5, r4, r4, asr r5
   15594:	andeq	r0, r0, r6, lsr #6
   15598:	andeq	r5, r4, r0, ror #11
   1559c:	andeq	r5, r4, r4, ror #12

000155a0 <_start@@Base>:
   155a0:	mov	fp, #0
   155a4:	mov	lr, #0
   155a8:	pop	{r1}		; (ldr r1, [sp], #4)
   155ac:	mov	r2, sp
   155b0:	push	{r2}		; (str r2, [sp, #-4]!)
   155b4:	push	{r0}		; (str r0, [sp, #-4]!)
   155b8:	ldr	ip, [pc, #16]	; 155d0 <_start@@Base+0x30>
   155bc:	push	{ip}		; (str ip, [sp, #-4]!)
   155c0:	ldr	r0, [pc, #12]	; 155d4 <_start@@Base+0x34>
   155c4:	ldr	r3, [pc, #12]	; 155d8 <_start@@Base+0x38>
   155c8:	bl	14588 <__libc_start_main@plt>
   155cc:	bl	1460c <abort@plt>
   155d0:	andeq	r1, r4, r4, lsr r9
   155d4:	andeq	r4, r1, ip, lsr #18
   155d8:	ldrdeq	r1, [r4], -r4
   155dc:	ldr	r3, [pc, #20]	; 155f8 <_start@@Base+0x58>
   155e0:	ldr	r2, [pc, #20]	; 155fc <_start@@Base+0x5c>
   155e4:	add	r3, pc, r3
   155e8:	ldr	r2, [r3, r2]
   155ec:	cmp	r2, #0
   155f0:	bxeq	lr
   155f4:	b	14594 <__gmon_start__@plt>
   155f8:	andeq	r2, r4, r4, lsl sl
   155fc:	andeq	r0, r0, r4, rrx
   15600:	ldr	r3, [pc, #28]	; 15624 <_start@@Base+0x84>
   15604:	ldr	r0, [pc, #28]	; 15628 <_start@@Base+0x88>
   15608:	sub	r3, r3, r0
   1560c:	cmp	r3, #6
   15610:	bxls	lr
   15614:	ldr	r3, [pc, #16]	; 1562c <_start@@Base+0x8c>
   15618:	cmp	r3, #0
   1561c:	bxeq	lr
   15620:	bx	r3
   15624:			; <UNDEFINED> instruction: 0x000583b3
   15628:			; <UNDEFINED> instruction: 0x000583b0
   1562c:	andeq	r0, r0, r0
   15630:	ldr	r1, [pc, #36]	; 1565c <_start@@Base+0xbc>
   15634:	ldr	r0, [pc, #36]	; 15660 <_start@@Base+0xc0>
   15638:	sub	r1, r1, r0
   1563c:	asr	r1, r1, #2
   15640:	add	r1, r1, r1, lsr #31
   15644:	asrs	r1, r1, #1
   15648:	bxeq	lr
   1564c:	ldr	r3, [pc, #16]	; 15664 <_start@@Base+0xc4>
   15650:	cmp	r3, #0
   15654:	bxeq	lr
   15658:	bx	r3
   1565c:			; <UNDEFINED> instruction: 0x000583b0
   15660:			; <UNDEFINED> instruction: 0x000583b0
   15664:	andeq	r0, r0, r0
   15668:	push	{r4, lr}
   1566c:	ldr	r4, [pc, #24]	; 1568c <_start@@Base+0xec>
   15670:	ldrb	r3, [r4]
   15674:	cmp	r3, #0
   15678:	popne	{r4, pc}
   1567c:	bl	15600 <_start@@Base+0x60>
   15680:	mov	r3, #1
   15684:	strb	r3, [r4]
   15688:	pop	{r4, pc}
   1568c:			; <UNDEFINED> instruction: 0x000583b8
   15690:	ldr	r0, [pc, #40]	; 156c0 <_start@@Base+0x120>
   15694:	ldr	r3, [r0]
   15698:	cmp	r3, #0
   1569c:	bne	156a4 <_start@@Base+0x104>
   156a0:	b	15630 <_start@@Base+0x90>
   156a4:	ldr	r3, [pc, #24]	; 156c4 <_start@@Base+0x124>
   156a8:	cmp	r3, #0
   156ac:	beq	156a0 <_start@@Base+0x100>
   156b0:	push	{r4, lr}
   156b4:	blx	r3
   156b8:	pop	{r4, lr}
   156bc:	b	15630 <_start@@Base+0x90>
   156c0:	andeq	r7, r5, r4, lsl pc
   156c4:	andeq	r0, r0, r0
   156c8:	sub	r1, r1, r0
   156cc:	cmp	r1, #8
   156d0:	push	{r4, r5, r6, r7}
   156d4:	bls	15770 <_start@@Base+0x1d0>
   156d8:	ldrb	r4, [r0, #7]
   156dc:	mov	r5, #0
   156e0:	ldrb	r6, [r0, #6]
   156e4:	lsr	r3, r6, #24
   156e8:	lsl	r2, r6, #8
   156ec:	orr	r4, r4, r2
   156f0:	orr	r5, r5, r3
   156f4:	ldrb	r6, [r0, #5]
   156f8:	lsr	r3, r6, #16
   156fc:	lsl	r2, r6, #16
   15700:	orr	r4, r4, r2
   15704:	orr	r5, r5, r3
   15708:	ldrb	r6, [r0, #4]
   1570c:	lsr	r3, r6, #8
   15710:	lsl	r2, r6, #24
   15714:	orr	r4, r4, r2
   15718:	orr	r5, r5, r3
   1571c:	ldrb	r3, [r0, #3]
   15720:	mov	r2, #0
   15724:	orr	r4, r4, r2
   15728:	orr	r5, r5, r3
   1572c:	ldrb	r6, [r0, #2]
   15730:	mov	r2, #0
   15734:	orr	r4, r4, r2
   15738:	lsl	r3, r6, #8
   1573c:	orr	r5, r5, r3
   15740:	ldrb	r6, [r0, #1]
   15744:	mov	r2, #0
   15748:	orr	r2, r2, r4
   1574c:	lsl	r3, r6, #16
   15750:	orr	r3, r3, r5
   15754:	ldrb	r4, [r0]
   15758:	mov	r0, #0
   1575c:	orr	r0, r0, r2
   15760:	lsl	r1, r4, #24
   15764:	orr	r1, r1, r3
   15768:	pop	{r4, r5, r6, r7}
   1576c:	bx	lr
   15770:	sub	r1, r1, #1
   15774:	cmp	r1, #7
   15778:	ldrls	pc, [pc, r1, lsl #2]
   1577c:	b	157f4 <_start@@Base+0x254>
   15780:	andeq	r5, r1, ip, lsr #15
   15784:			; <UNDEFINED> instruction: 0x000157b8
   15788:	andeq	r5, r1, r4, asr #15
   1578c:	ldrdeq	r5, [r1], -r0
   15790:	ldrdeq	r5, [r1], -ip
   15794:	andeq	r5, r1, r8, ror #15
   15798:	andeq	r5, r1, r0, lsr #15
   1579c:	ldrdeq	r5, [r1], -r8
   157a0:	mov	r4, #0
   157a4:	mov	r5, #0
   157a8:	b	156e0 <_start@@Base+0x140>
   157ac:	mov	r2, #0
   157b0:	mov	r3, #0
   157b4:	b	15754 <_start@@Base+0x1b4>
   157b8:	mov	r4, #0
   157bc:	mov	r5, #0
   157c0:	b	15740 <_start@@Base+0x1a0>
   157c4:	mov	r4, #0
   157c8:	mov	r5, #0
   157cc:	b	1572c <_start@@Base+0x18c>
   157d0:	mov	r4, #0
   157d4:	mov	r5, #0
   157d8:	b	1571c <_start@@Base+0x17c>
   157dc:	mov	r4, #0
   157e0:	mov	r5, #0
   157e4:	b	15708 <_start@@Base+0x168>
   157e8:	mov	r4, #0
   157ec:	mov	r5, #0
   157f0:	b	156f4 <_start@@Base+0x154>
   157f4:	mov	r0, #0
   157f8:	mov	r1, #0
   157fc:	b	15768 <_start@@Base+0x1c8>
   15800:	cmp	r0, #4
   15804:	movhi	r0, #0
   15808:	movls	r0, #1
   1580c:	bx	lr
   15810:	cmp	r0, #11
   15814:	bhi	15838 <_start@@Base+0x298>
   15818:	cmp	r0, #8
   1581c:	bcs	15840 <_start@@Base+0x2a0>
   15820:	cmp	r0, #0
   15824:	beq	15840 <_start@@Base+0x2a0>
   15828:	cmp	r0, #2
   1582c:	beq	15840 <_start@@Base+0x2a0>
   15830:	mov	r0, #0
   15834:	bx	lr
   15838:	cmp	r0, #255	; 0xff
   1583c:	bne	15830 <_start@@Base+0x290>
   15840:	mov	r0, #1
   15844:	bx	lr
   15848:	bx	lr
   1584c:	mov	r0, #0
   15850:	bx	lr
   15854:	mov	r3, #4
   15858:	mov	r2, r3
   1585c:	mov	r1, #0
   15860:	b	2bb58 <flatcc_verify_field@@Base>
   15864:	push	{r4, r5, r6, lr}
   15868:	sub	sp, sp, #8
   1586c:	ldr	r2, [pc, #104]	; 158dc <_start@@Base+0x33c>
   15870:	mov	r3, #21
   15874:	str	r2, [sp, #4]
   15878:	str	r3, [sp]
   1587c:	mov	r2, #0
   15880:	ldr	r3, [pc, #88]	; 158e0 <_start@@Base+0x340>
   15884:	mov	r4, r0
   15888:	mov	r5, r1
   1588c:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   15890:	ldr	r3, [pc, #76]	; 158e4 <_start@@Base+0x344>
   15894:	mov	r6, #22
   15898:	mov	r1, r5
   1589c:	mov	r0, r4
   158a0:	str	r3, [sp, #4]
   158a4:	str	r6, [sp]
   158a8:	ldr	r3, [pc, #56]	; 158e8 <_start@@Base+0x348>
   158ac:	mov	r2, #1
   158b0:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   158b4:	ldr	r3, [pc, #48]	; 158ec <_start@@Base+0x34c>
   158b8:	str	r6, [sp]
   158bc:	str	r3, [sp, #4]
   158c0:	mov	r1, r5
   158c4:	mov	r0, r4
   158c8:	ldr	r3, [pc, #32]	; 158f0 <_start@@Base+0x350>
   158cc:	mov	r2, #2
   158d0:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   158d4:	add	sp, sp, #8
   158d8:	pop	{r4, r5, r6, pc}
   158dc:	andeq	r5, r1, r8, ror #19
   158e0:	andeq	r1, r4, r4, ror #18
   158e4:	andeq	r5, r1, r4, lsl #19
   158e8:	andeq	r1, r4, ip, ror r9
   158ec:	andeq	r5, r1, r0, lsr #18
   158f0:	muleq	r4, r4, r9
   158f4:	push	{lr}		; (str lr, [sp, #-4]!)
   158f8:	sub	sp, sp, #12
   158fc:	mov	r2, #0
   15900:	mov	r3, #19
   15904:	str	r3, [sp]
   15908:	str	r2, [sp, #4]
   1590c:	ldr	r3, [pc, #8]	; 1591c <_start@@Base+0x37c>
   15910:	bl	37b98 <flatcc_json_printer_int32_field@@Base>
   15914:	add	sp, sp, #12
   15918:	pop	{pc}		; (ldr pc, [sp], #4)
   1591c:	andeq	r1, r4, ip, lsr #19
   15920:	push	{r4, r5, lr}
   15924:	mov	r4, #0
   15928:	sub	sp, sp, #20
   1592c:	mov	r5, #0
   15930:	mov	r3, #15
   15934:	strd	r4, [sp, #8]
   15938:	str	r3, [sp]
   1593c:	mov	r2, #0
   15940:	ldr	r3, [pc, #52]	; 1597c <_start@@Base+0x3dc>
   15944:	mov	r4, r0
   15948:	mov	r5, r1
   1594c:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   15950:	mov	r2, #0
   15954:	mov	r3, #21
   15958:	str	r2, [sp, #4]
   1595c:	str	r3, [sp]
   15960:	mov	r1, r5
   15964:	mov	r0, r4
   15968:	ldr	r3, [pc, #16]	; 15980 <_start@@Base+0x3e0>
   1596c:	mov	r2, #1
   15970:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   15974:	add	sp, sp, #20
   15978:	pop	{r4, r5, pc}
   1597c:	andeq	r1, r4, r0, asr #19
   15980:	ldrdeq	r1, [r4], -r0
   15984:	push	{r4, r5, lr}
   15988:	mov	r4, #0
   1598c:	sub	sp, sp, #20
   15990:	mov	r5, #0
   15994:	mov	r3, #15
   15998:	strd	r4, [sp, #8]
   1599c:	str	r3, [sp]
   159a0:	mov	r2, #0
   159a4:	ldr	r3, [pc, #52]	; 159e0 <_start@@Base+0x440>
   159a8:	mov	r4, r0
   159ac:	mov	r5, r1
   159b0:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   159b4:	mov	r2, #0
   159b8:	mov	r3, #16
   159bc:	str	r2, [sp, #4]
   159c0:	str	r3, [sp]
   159c4:	mov	r1, r5
   159c8:	mov	r0, r4
   159cc:	ldr	r3, [pc, #16]	; 159e4 <_start@@Base+0x444>
   159d0:	mov	r2, #1
   159d4:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   159d8:	add	sp, sp, #20
   159dc:	pop	{r4, r5, pc}
   159e0:	andeq	r1, r4, r0, asr #19
   159e4:	andeq	r1, r4, r8, ror #19
   159e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159ec:	mov	r2, #0
   159f0:	sub	sp, sp, #20
   159f4:	mov	fp, r2
   159f8:	mov	r7, #4
   159fc:	mov	sl, #9
   15a00:	mov	r4, r0
   15a04:	mov	r5, r1
   15a08:	str	r7, [sp]
   15a0c:	ldr	r3, [pc, #224]	; 15af4 <_start@@Base+0x554>
   15a10:	bl	368dc <flatcc_json_printer_string_field@@Base>
   15a14:	mov	r8, #0
   15a18:	mov	r9, #0
   15a1c:	mov	r1, r5
   15a20:	mov	r0, r4
   15a24:	stm	sp, {sl, fp}
   15a28:	ldr	r3, [pc, #200]	; 15af8 <_start@@Base+0x558>
   15a2c:	mov	r2, #1
   15a30:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   15a34:	mov	r6, #8
   15a38:	mov	r1, r5
   15a3c:	mov	r0, r4
   15a40:	str	r7, [sp]
   15a44:	ldr	r3, [pc, #176]	; 15afc <_start@@Base+0x55c>
   15a48:	mov	r2, #2
   15a4c:	bl	368dc <flatcc_json_printer_string_field@@Base>
   15a50:	mov	r1, r5
   15a54:	mov	r0, r4
   15a58:	strd	r8, [sp, #8]
   15a5c:	str	r6, [sp]
   15a60:	ldr	r3, [pc, #152]	; 15b00 <_start@@Base+0x560>
   15a64:	mov	r2, #3
   15a68:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   15a6c:	mov	r2, r7
   15a70:	mov	r1, r5
   15a74:	mov	r0, r4
   15a78:	str	r7, [sp]
   15a7c:	ldr	r3, [pc, #128]	; 15b04 <_start@@Base+0x564>
   15a80:	bl	368dc <flatcc_json_printer_string_field@@Base>
   15a84:	mov	r1, r5
   15a88:	mov	r0, r4
   15a8c:	strd	r8, [sp, #8]
   15a90:	str	r6, [sp]
   15a94:	ldr	r3, [pc, #108]	; 15b08 <_start@@Base+0x568>
   15a98:	mov	r2, #5
   15a9c:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   15aa0:	mov	r1, r5
   15aa4:	mov	r0, r4
   15aa8:	stm	sp, {sl, fp}
   15aac:	ldr	r3, [pc, #88]	; 15b0c <_start@@Base+0x56c>
   15ab0:	mov	r2, #6
   15ab4:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   15ab8:	mov	r1, r5
   15abc:	mov	r0, r4
   15ac0:	strd	r8, [sp, #8]
   15ac4:	str	r6, [sp]
   15ac8:	ldr	r3, [pc, #64]	; 15b10 <_start@@Base+0x570>
   15acc:	mov	r2, #7
   15ad0:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   15ad4:	stm	sp, {sl, fp}
   15ad8:	mov	r2, r6
   15adc:	mov	r1, r5
   15ae0:	mov	r0, r4
   15ae4:	ldr	r3, [pc, #40]	; 15b14 <_start@@Base+0x574>
   15ae8:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   15aec:	add	sp, sp, #20
   15af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15af4:	strdeq	r1, [r4], -ip
   15af8:	andeq	r1, r4, r4, lsl #20
   15afc:	andeq	r1, r4, r0, lsl sl
   15b00:	andeq	r1, r4, r8, lsl sl
   15b04:	andeq	r1, r4, r4, lsr #20
   15b08:	andeq	r1, r4, ip, lsr #20
   15b0c:	andeq	r1, r4, r8, lsr sl
   15b10:	andeq	r1, r4, r4, asr #20
   15b14:	andeq	r1, r4, r0, asr sl
   15b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b1c:	sub	sp, sp, #20
   15b20:	ldr	r3, [pc, #1092]	; 15f6c <_start@@Base+0x9cc>
   15b24:	mov	r6, #3
   15b28:	str	r3, [sp, #4]
   15b2c:	str	r6, [sp]
   15b30:	ldr	r3, [pc, #1080]	; 15f70 <_start@@Base+0x9d0>
   15b34:	mov	r2, #0
   15b38:	mov	r4, r0
   15b3c:	mov	r5, r1
   15b40:	mov	r7, #4
   15b44:	bl	405bc <flatcc_json_printer_struct_field@@Base>
   15b48:	mov	r3, #150	; 0x96
   15b4c:	mov	r1, r5
   15b50:	mov	r0, r4
   15b54:	str	r3, [sp, #4]
   15b58:	str	r7, [sp]
   15b5c:	ldr	r3, [pc, #1040]	; 15f74 <_start@@Base+0x9d4>
   15b60:	mov	r2, #1
   15b64:	bl	37ac0 <flatcc_json_printer_int16_field@@Base>
   15b68:	mov	r2, #2
   15b6c:	mov	r3, #100	; 0x64
   15b70:	mov	r1, r5
   15b74:	stm	sp, {r2, r3}
   15b78:	mov	r0, r4
   15b7c:	ldr	r3, [pc, #1012]	; 15f78 <_start@@Base+0x9d8>
   15b80:	bl	37ac0 <flatcc_json_printer_int16_field@@Base>
   15b84:	mov	sl, #9
   15b88:	mov	r2, r6
   15b8c:	mov	r1, r5
   15b90:	mov	r0, r4
   15b94:	str	r7, [sp]
   15b98:	ldr	r3, [pc, #988]	; 15f7c <_start@@Base+0x9dc>
   15b9c:	bl	368dc <flatcc_json_printer_string_field@@Base>
   15ba0:	mov	r1, r5
   15ba4:	mov	r0, r4
   15ba8:	str	sl, [sp]
   15bac:	ldr	r3, [pc, #972]	; 15f80 <_start@@Base+0x9e0>
   15bb0:	mov	r2, #5
   15bb4:	bl	3b2c8 <flatcc_json_printer_uint8_vector_field@@Base>
   15bb8:	mov	r8, #5
   15bbc:	mov	fp, #8
   15bc0:	ldr	r3, [pc, #956]	; 15f84 <_start@@Base+0x9e4>
   15bc4:	mov	r1, r5
   15bc8:	mov	r0, r4
   15bcc:	str	r3, [sp, #8]
   15bd0:	stm	sp, {r8, fp}
   15bd4:	ldr	r3, [pc, #940]	; 15f88 <_start@@Base+0x9e8>
   15bd8:	mov	r2, #6
   15bdc:	bl	384b0 <flatcc_json_printer_int8_enum_field@@Base>
   15be0:	ldr	ip, [pc, #932]	; 15f8c <_start@@Base+0x9ec>
   15be4:	ldr	r3, [pc, #932]	; 15f90 <_start@@Base+0x9f0>
   15be8:	mov	r2, fp
   15bec:	mov	r1, r5
   15bf0:	stmib	sp, {r3, ip}
   15bf4:	mov	r0, r4
   15bf8:	str	r7, [sp]
   15bfc:	ldr	r3, [pc, #912]	; 15f94 <_start@@Base+0x9f4>
   15c00:	bl	3fd48 <flatcc_json_printer_union_field@@Base>
   15c04:	ldr	r3, [pc, #908]	; 15f98 <_start@@Base+0x9f8>
   15c08:	mov	r6, #17
   15c0c:	mov	r2, sl
   15c10:	mov	r1, r5
   15c14:	mov	r0, r4
   15c18:	str	r3, [sp, #8]
   15c1c:	str	r7, [sp, #4]
   15c20:	str	r8, [sp]
   15c24:	ldr	r3, [pc, #880]	; 15f9c <_start@@Base+0x9fc>
   15c28:	bl	3eda0 <flatcc_json_printer_struct_vector_field@@Base>
   15c2c:	mov	r1, r5
   15c30:	mov	r0, r4
   15c34:	str	r6, [sp]
   15c38:	ldr	r3, [pc, #864]	; 15fa0 <_start@@Base+0xa00>
   15c3c:	mov	r2, #10
   15c40:	bl	3f190 <flatcc_json_printer_string_vector_field@@Base>
   15c44:	ldr	r3, [pc, #856]	; 15fa4 <_start@@Base+0xa04>
   15c48:	mov	r1, r5
   15c4c:	mov	r0, r4
   15c50:	str	r3, [sp, #4]
   15c54:	str	r6, [sp]
   15c58:	ldr	r3, [pc, #840]	; 15fa8 <_start@@Base+0xa08>
   15c5c:	mov	r2, #11
   15c60:	bl	3f434 <flatcc_json_printer_table_vector_field@@Base>
   15c64:	ldr	r3, [pc, #824]	; 15fa4 <_start@@Base+0xa04>
   15c68:	mov	r1, r5
   15c6c:	str	r3, [sp, #4]
   15c70:	mov	r0, r4
   15c74:	str	r8, [sp]
   15c78:	ldr	r3, [pc, #812]	; 15fac <_start@@Base+0xa0c>
   15c7c:	mov	r2, #12
   15c80:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   15c84:	ldr	r3, [pc, #792]	; 15fa4 <_start@@Base+0xa04>
   15c88:	mov	r9, #0
   15c8c:	str	r3, [sp, #8]
   15c90:	mov	r3, #20
   15c94:	mov	r1, r5
   15c98:	mov	r0, r4
   15c9c:	str	r9, [sp, #4]
   15ca0:	str	r3, [sp]
   15ca4:	mov	r2, #13
   15ca8:	ldr	r3, [pc, #768]	; 15fb0 <_start@@Base+0xa10>
   15cac:	bl	40b34 <flatcc_json_printer_table_as_nested_root@@Base>
   15cb0:	ldr	r3, [pc, #764]	; 15fb4 <_start@@Base+0xa14>
   15cb4:	str	sl, [sp]
   15cb8:	mov	r1, r5
   15cbc:	mov	r0, r4
   15cc0:	str	r3, [sp, #4]
   15cc4:	mov	r2, #14
   15cc8:	ldr	r3, [pc, #744]	; 15fb8 <_start@@Base+0xa18>
   15ccc:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   15cd0:	mov	r3, #1
   15cd4:	mov	sl, #16
   15cd8:	mov	r1, r5
   15cdc:	mov	r0, r4
   15ce0:	str	r3, [sp, #4]
   15ce4:	str	fp, [sp]
   15ce8:	ldr	r3, [pc, #716]	; 15fbc <_start@@Base+0xa1c>
   15cec:	mov	r2, #15
   15cf0:	bl	37d58 <flatcc_json_printer_bool_field@@Base>
   15cf4:	str	r9, [sp, #4]
   15cf8:	mov	r1, r5
   15cfc:	mov	r0, r4
   15d00:	mov	r2, sl
   15d04:	str	sl, [sp]
   15d08:	ldr	r3, [pc, #688]	; 15fc0 <_start@@Base+0xa20>
   15d0c:	bl	37b98 <flatcc_json_printer_int32_field@@Base>
   15d10:	str	r9, [sp, #4]
   15d14:	mov	r2, r6
   15d18:	mov	r1, r5
   15d1c:	mov	r0, r4
   15d20:	str	sl, [sp]
   15d24:	ldr	r3, [pc, #664]	; 15fc4 <_start@@Base+0xa24>
   15d28:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   15d2c:	mov	r2, #0
   15d30:	mov	r3, #0
   15d34:	mov	r1, r5
   15d38:	strd	r2, [sp, #8]
   15d3c:	mov	r0, r4
   15d40:	str	sl, [sp]
   15d44:	ldr	r3, [pc, #636]	; 15fc8 <_start@@Base+0xa28>
   15d48:	mov	r2, #18
   15d4c:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   15d50:	mov	r2, #0
   15d54:	mov	r3, #0
   15d58:	mov	r1, r5
   15d5c:	strd	r2, [sp, #8]
   15d60:	mov	r0, r4
   15d64:	str	sl, [sp]
   15d68:	ldr	r3, [pc, #604]	; 15fcc <_start@@Base+0xa2c>
   15d6c:	mov	r2, #19
   15d70:	bl	3771c <flatcc_json_printer_uint64_field@@Base>
   15d74:	stm	sp, {r6, r9}
   15d78:	mov	r1, r5
   15d7c:	mov	r0, r4
   15d80:	mov	r2, #20
   15d84:	ldr	r3, [pc, #580]	; 15fd0 <_start@@Base+0xa30>
   15d88:	bl	37b98 <flatcc_json_printer_int32_field@@Base>
   15d8c:	stm	sp, {r6, r9}
   15d90:	mov	r1, r5
   15d94:	mov	r0, r4
   15d98:	ldr	r3, [pc, #564]	; 15fd4 <_start@@Base+0xa34>
   15d9c:	mov	r2, #21
   15da0:	bl	374f8 <flatcc_json_printer_uint32_field@@Base>
   15da4:	mov	r2, #0
   15da8:	mov	r3, #0
   15dac:	mov	r1, r5
   15db0:	strd	r2, [sp, #8]
   15db4:	mov	r0, r4
   15db8:	str	r6, [sp]
   15dbc:	ldr	r3, [pc, #532]	; 15fd8 <_start@@Base+0xa38>
   15dc0:	mov	r2, #22
   15dc4:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   15dc8:	mov	r2, #0
   15dcc:	mov	r3, #0
   15dd0:	mov	r1, r5
   15dd4:	strd	r2, [sp, #8]
   15dd8:	mov	r0, r4
   15ddc:	str	r6, [sp]
   15de0:	ldr	r3, [pc, #500]	; 15fdc <_start@@Base+0xa3c>
   15de4:	mov	r2, #23
   15de8:	bl	3771c <flatcc_json_printer_uint64_field@@Base>
   15dec:	mov	r1, r5
   15df0:	mov	r0, r4
   15df4:	str	sl, [sp]
   15df8:	ldr	r3, [pc, #480]	; 15fe0 <_start@@Base+0xa40>
   15dfc:	mov	r2, #24
   15e00:	bl	3cc74 <flatcc_json_printer_bool_vector_field@@Base>
   15e04:	mov	r9, #6
   15e08:	mov	r1, r5
   15e0c:	mov	r0, r4
   15e10:	str	r8, [sp]
   15e14:	vldr	s0, [pc, #324]	; 15f60 <_start@@Base+0x9c0>
   15e18:	ldr	r3, [pc, #452]	; 15fe4 <_start@@Base+0xa44>
   15e1c:	mov	r2, #25
   15e20:	bl	37fb8 <flatcc_json_printer_float_field@@Base>
   15e24:	mov	r1, r5
   15e28:	mov	r0, r4
   15e2c:	str	r9, [sp]
   15e30:	vldr	s0, [pc, #300]	; 15f64 <_start@@Base+0x9c4>
   15e34:	ldr	r3, [pc, #428]	; 15fe8 <_start@@Base+0xa48>
   15e38:	mov	r2, #26
   15e3c:	bl	37fb8 <flatcc_json_printer_float_field@@Base>
   15e40:	vldr	s0, [pc, #288]	; 15f68 <_start@@Base+0x9c8>
   15e44:	mov	r1, r5
   15e48:	mov	r0, r4
   15e4c:	str	r9, [sp]
   15e50:	ldr	r3, [pc, #404]	; 15fec <_start@@Base+0xa4c>
   15e54:	mov	r2, #27
   15e58:	bl	37fb8 <flatcc_json_printer_float_field@@Base>
   15e5c:	mov	r3, #18
   15e60:	mov	r1, r5
   15e64:	mov	r0, r4
   15e68:	str	r3, [sp]
   15e6c:	mov	r2, #28
   15e70:	ldr	r3, [pc, #376]	; 15ff0 <_start@@Base+0xa50>
   15e74:	bl	3f190 <flatcc_json_printer_string_vector_field@@Base>
   15e78:	ldr	r2, [pc, #372]	; 15ff4 <_start@@Base+0xa54>
   15e7c:	mov	r3, #23
   15e80:	mov	r1, r5
   15e84:	mov	r0, r4
   15e88:	str	r2, [sp, #8]
   15e8c:	str	r3, [sp]
   15e90:	str	fp, [sp, #4]
   15e94:	ldr	r3, [pc, #348]	; 15ff8 <_start@@Base+0xa58>
   15e98:	mov	r2, #29
   15e9c:	bl	3eda0 <flatcc_json_printer_struct_vector_field@@Base>
   15ea0:	mov	r1, r5
   15ea4:	mov	r0, r4
   15ea8:	str	r7, [sp]
   15eac:	ldr	r3, [pc, #328]	; 15ffc <_start@@Base+0xa5c>
   15eb0:	mov	r2, #30
   15eb4:	bl	3b2c8 <flatcc_json_printer_uint8_vector_field@@Base>
   15eb8:	ldr	r3, [pc, #216]	; 15f98 <_start@@Base+0x9f8>
   15ebc:	mov	r1, r5
   15ec0:	str	r3, [sp, #8]
   15ec4:	mov	r0, r4
   15ec8:	str	r7, [sp, #4]
   15ecc:	str	r8, [sp]
   15ed0:	ldr	r3, [pc, #296]	; 16000 <_start@@Base+0xa60>
   15ed4:	mov	r2, #31
   15ed8:	bl	3eda0 <flatcc_json_printer_struct_vector_field@@Base>
   15edc:	mov	r3, #15
   15ee0:	mov	r1, r5
   15ee4:	mov	r0, r4
   15ee8:	str	r3, [sp]
   15eec:	mov	r2, #32
   15ef0:	ldr	r3, [pc, #268]	; 16004 <_start@@Base+0xa64>
   15ef4:	bl	3c984 <flatcc_json_printer_int64_vector_field@@Base>
   15ef8:	mov	r1, r5
   15efc:	mov	r0, r4
   15f00:	str	r6, [sp]
   15f04:	ldr	r3, [pc, #252]	; 16008 <_start@@Base+0xa68>
   15f08:	mov	r2, #33	; 0x21
   15f0c:	bl	3d250 <flatcc_json_printer_double_vector_field@@Base>
   15f10:	ldr	r2, [pc, #244]	; 1600c <_start@@Base+0xa6c>
   15f14:	mov	r3, #21
   15f18:	mov	r1, r5
   15f1c:	mov	r0, r4
   15f20:	str	r2, [sp, #4]
   15f24:	str	r3, [sp]
   15f28:	mov	r2, #34	; 0x22
   15f2c:	ldr	r3, [pc, #220]	; 16010 <_start@@Base+0xa70>
   15f30:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   15f34:	ldr	r2, [pc, #216]	; 16014 <_start@@Base+0xa74>
   15f38:	mov	r3, #10
   15f3c:	str	r2, [sp, #4]
   15f40:	str	r3, [sp]
   15f44:	mov	r1, r5
   15f48:	mov	r0, r4
   15f4c:	ldr	r3, [pc, #196]	; 16018 <_start@@Base+0xa78>
   15f50:	mov	r2, #35	; 0x23
   15f54:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   15f58:	add	sp, sp, #20
   15f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f60:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15f64:	submi	r0, r0, r0
   15f68:	andeq	r0, r0, r0
   15f6c:	andeq	r6, r1, ip, ror r6
   15f70:	andeq	r1, r4, ip, asr sl
   15f74:	andeq	r1, r4, r0, ror #20
   15f78:	andeq	r1, r4, r8, ror #20
   15f7c:	andeq	r1, r4, ip, ror #20
   15f80:	andeq	r1, r4, r4, ror sl
   15f84:			; <UNDEFINED> instruction: 0x000165b0
   15f88:	andeq	r1, r4, r0, lsl #21
   15f8c:	ldrdeq	r6, [r1], -ip
   15f90:	strdeq	r7, [r1], -ip
   15f94:	andeq	r1, r4, r8, lsl #21
   15f98:	andeq	r6, r1, ip, ror r1
   15f9c:	muleq	r4, r0, sl
   15fa0:	muleq	r4, r8, sl
   15fa4:	andeq	r5, r1, r8, lsl fp
   15fa8:	andeq	r1, r4, ip, lsr #21
   15fac:	andeq	r1, r4, r0, asr #21
   15fb0:	andeq	r1, r4, r8, asr #21
   15fb4:	strdeq	r6, [r1], -ip
   15fb8:	andeq	r1, r4, r0, ror #21
   15fbc:	andeq	r1, r4, ip, ror #21
   15fc0:	strdeq	r1, [r4], -r8
   15fc4:	andeq	r1, r4, ip, lsl #22
   15fc8:	andeq	r1, r4, r0, lsr #22
   15fcc:	andeq	r1, r4, r4, lsr fp
   15fd0:	andeq	r1, r4, r8, asr #22
   15fd4:	andeq	r1, r4, ip, asr fp
   15fd8:	andeq	r1, r4, r0, ror fp
   15fdc:	andeq	r1, r4, r4, lsl #23
   15fe0:	muleq	r4, r8, fp
   15fe4:	andeq	r1, r4, ip, lsr #23
   15fe8:			; <UNDEFINED> instruction: 0x00041bb4
   15fec:			; <UNDEFINED> instruction: 0x00041bbc
   15ff0:	andeq	r1, r4, r4, asr #23
   15ff4:	muleq	r1, ip, r0
   15ff8:	ldrdeq	r1, [r4], -r8
   15ffc:	strdeq	r1, [r4], -r0
   16000:	strdeq	r1, [r4], -r8
   16004:	andeq	r1, r4, r0, lsl #24
   16008:	andeq	r1, r4, r0, lsl ip
   1600c:	andeq	r7, r1, r4, ror lr
   16010:	andeq	r1, r4, r4, lsr #24
   16014:	andeq	r6, r1, ip, lsl r0
   16018:	andeq	r1, r4, ip, lsr ip
   1601c:	push	{r4, r5, r6, lr}
   16020:	sub	sp, sp, #8
   16024:	mov	r4, #0
   16028:	mov	r3, #4
   1602c:	mov	r2, r4
   16030:	str	r3, [sp]
   16034:	str	r4, [sp, #4]
   16038:	ldr	r3, [pc, #80]	; 16090 <_start@@Base+0xaf0>
   1603c:	mov	r5, r0
   16040:	mov	r6, r1
   16044:	bl	36ac8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   16048:	mov	r2, #1
   1604c:	mov	r3, #7
   16050:	mov	r1, r6
   16054:	mov	r0, r5
   16058:	str	r2, [sp, #4]
   1605c:	str	r3, [sp]
   16060:	ldr	r3, [pc, #44]	; 16094 <_start@@Base+0xaf4>
   16064:	bl	36ac8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   16068:	mov	r3, #6
   1606c:	str	r3, [sp]
   16070:	str	r4, [sp, #4]
   16074:	mov	r1, r6
   16078:	mov	r0, r5
   1607c:	ldr	r3, [pc, #20]	; 16098 <_start@@Base+0xaf8>
   16080:	mov	r2, #2
   16084:	bl	36ac8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   16088:	add	sp, sp, #8
   1608c:	pop	{r4, r5, r6, pc}
   16090:	andeq	r1, r4, r8, asr #24
   16094:	andeq	r1, r4, r0, asr ip
   16098:	andeq	r1, r4, r8, asr ip
   1609c:	push	{r4, r5, lr}
   160a0:	sub	sp, sp, #12
   160a4:	ldr	ip, [pc, #72]	; 160f4 <_start@@Base+0xb54>
   160a8:	mov	r4, r1
   160ac:	mov	r3, #0
   160b0:	mov	r1, #2
   160b4:	mov	r2, r4
   160b8:	str	ip, [sp]
   160bc:	str	r1, [sp, #4]
   160c0:	mov	r1, r3
   160c4:	mov	r5, r0
   160c8:	bl	38f1c <flatcc_json_printer_uint32_struct_field@@Base>
   160cc:	ldr	r1, [pc, #36]	; 160f8 <_start@@Base+0xb58>
   160d0:	mov	r3, #8
   160d4:	mov	r2, r4
   160d8:	stm	sp, {r1, r3}
   160dc:	mov	r0, r5
   160e0:	mov	r3, #4
   160e4:	mov	r1, #1
   160e8:	bl	38f1c <flatcc_json_printer_uint32_struct_field@@Base>
   160ec:	add	sp, sp, #12
   160f0:	pop	{r4, r5, pc}
   160f4:	andeq	r1, r4, r0, ror #24
   160f8:	andeq	r1, r4, r4, ror #24
   160fc:	push	{r4, r5, r6, r8, r9, lr}
   16100:	sub	sp, sp, #16
   16104:	mov	r6, #2
   16108:	str	r6, [sp]
   1610c:	ldr	r3, [pc, #92]	; 16170 <_start@@Base+0xbd0>
   16110:	mov	r2, #0
   16114:	mov	r8, #0
   16118:	mov	r9, #0
   1611c:	mov	r4, r0
   16120:	mov	r5, r1
   16124:	bl	368dc <flatcc_json_printer_string_field@@Base>
   16128:	mov	r3, #3
   1612c:	mov	r1, r5
   16130:	mov	r0, r4
   16134:	str	r3, [sp]
   16138:	strd	r8, [sp, #8]
   1613c:	ldr	r3, [pc, #48]	; 16174 <_start@@Base+0xbd4>
   16140:	mov	r2, #1
   16144:	bl	37c6c <flatcc_json_printer_int64_field@@Base>
   16148:	mov	ip, #0
   1614c:	mov	r3, #5
   16150:	mov	r2, r6
   16154:	stm	sp, {r3, ip}
   16158:	mov	r1, r5
   1615c:	mov	r0, r4
   16160:	ldr	r3, [pc, #16]	; 16178 <_start@@Base+0xbd8>
   16164:	bl	372d4 <flatcc_json_printer_uint16_field@@Base>
   16168:	add	sp, sp, #16
   1616c:	pop	{r4, r5, r6, r8, r9, pc}
   16170:	andeq	r1, r4, r0, ror #24
   16174:	andeq	r1, r4, r0, ror ip
   16178:	andeq	r1, r4, r4, ror ip
   1617c:	push	{r4, r5, r6, lr}
   16180:	sub	sp, sp, #8
   16184:	ldr	ip, [pc, #72]	; 161d4 <_start@@Base+0xc34>
   16188:	mov	r4, #1
   1618c:	mov	r3, #0
   16190:	mov	r5, r1
   16194:	mov	r2, r1
   16198:	str	ip, [sp]
   1619c:	mov	r1, r3
   161a0:	str	r4, [sp, #4]
   161a4:	mov	r6, r0
   161a8:	bl	39500 <flatcc_json_printer_int16_struct_field@@Base>
   161ac:	ldr	r3, [pc, #36]	; 161d8 <_start@@Base+0xc38>
   161b0:	str	r4, [sp, #4]
   161b4:	str	r3, [sp]
   161b8:	mov	r2, r5
   161bc:	mov	r1, r4
   161c0:	mov	r0, r6
   161c4:	mov	r3, #2
   161c8:	bl	39288 <flatcc_json_printer_int8_struct_field@@Base>
   161cc:	add	sp, sp, #8
   161d0:	pop	{r4, r5, r6, pc}
   161d4:	andeq	r1, r4, r8, asr fp
   161d8:	andeq	r1, r4, ip, ror ip
   161dc:	ldrb	r3, [r1, #8]
   161e0:	sub	r3, r3, #1
   161e4:	cmp	r3, #3
   161e8:	ldrls	pc, [pc, r3, lsl #2]
   161ec:	b	16220 <_start@@Base+0xc80>
   161f0:	andeq	r6, r1, r8, lsl r2
   161f4:	andeq	r6, r1, r0, lsl r2
   161f8:	andeq	r6, r1, r8, lsl #4
   161fc:	andeq	r6, r1, r0, lsl #4
   16200:	ldr	r2, [pc, #28]	; 16224 <_start@@Base+0xc84>
   16204:	b	400d4 <flatcc_json_printer_union_table@@Base>
   16208:	ldr	r2, [pc, #24]	; 16228 <_start@@Base+0xc88>
   1620c:	b	400d4 <flatcc_json_printer_union_table@@Base>
   16210:	ldr	r2, [pc, #20]	; 1622c <_start@@Base+0xc8c>
   16214:	b	400d4 <flatcc_json_printer_union_table@@Base>
   16218:	ldr	r2, [pc, #16]	; 16230 <_start@@Base+0xc90>
   1621c:	b	400d4 <flatcc_json_printer_union_table@@Base>
   16220:	bx	lr
   16224:	andeq	r6, r1, r4, lsr r2
   16228:	andeq	r5, r1, r8, asr #16
   1622c:	andeq	r6, r1, r0, lsl r5
   16230:	andeq	r5, r1, r8, lsl fp
   16234:	push	{r4, r5, lr}
   16238:	sub	sp, sp, #20
   1623c:	ldr	r2, [pc, #112]	; 162b4 <_start@@Base+0xd14>
   16240:	mov	r3, #6
   16244:	str	r2, [sp, #4]
   16248:	str	r3, [sp]
   1624c:	mov	r2, #0
   16250:	ldr	r3, [pc, #96]	; 162b8 <_start@@Base+0xd18>
   16254:	mov	r4, r0
   16258:	mov	r5, r1
   1625c:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   16260:	ldr	r2, [pc, #84]	; 162bc <_start@@Base+0xd1c>
   16264:	mov	r3, #5
   16268:	mov	r1, r5
   1626c:	mov	r0, r4
   16270:	str	r2, [sp, #4]
   16274:	str	r3, [sp]
   16278:	mov	r2, #1
   1627c:	ldr	r3, [pc, #60]	; 162c0 <_start@@Base+0xd20>
   16280:	bl	3fa94 <flatcc_json_printer_table_field@@Base>
   16284:	ldr	ip, [pc, #56]	; 162c4 <_start@@Base+0xd24>
   16288:	ldr	r2, [pc, #56]	; 162c8 <_start@@Base+0xd28>
   1628c:	mov	r3, #7
   16290:	str	r3, [sp]
   16294:	stmib	sp, {r2, ip}
   16298:	mov	r1, r5
   1629c:	mov	r0, r4
   162a0:	ldr	r3, [pc, #36]	; 162cc <_start@@Base+0xd2c>
   162a4:	mov	r2, #3
   162a8:	bl	3f77c <flatcc_json_printer_union_vector_field@@Base>
   162ac:	add	sp, sp, #20
   162b0:	pop	{r4, r5, pc}
   162b4:	andeq	r5, r1, r4, ror #16
   162b8:	andeq	r1, r4, r0, lsl #25
   162bc:	ldrdeq	r6, [r1], -r0
   162c0:	andeq	r1, r4, r8, lsl #25
   162c4:	ldrdeq	r6, [r1], -ip
   162c8:	strdeq	r7, [r1], -ip
   162cc:	muleq	r4, r0, ip
   162d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   162d4:	mov	r3, #14
   162d8:	ldr	r5, [pc, #160]	; 16380 <_start@@Base+0xde0>
   162dc:	ldr	r4, [pc, #160]	; 16384 <_start@@Base+0xde4>
   162e0:	sub	sp, sp, #20
   162e4:	mov	r6, r0
   162e8:	mov	r7, r1
   162ec:	stm	sp, {r3, r4, r5}
   162f0:	mov	r9, #10
   162f4:	ldr	r3, [pc, #140]	; 16388 <_start@@Base+0xde8>
   162f8:	mov	r2, #1
   162fc:	bl	3fd48 <flatcc_json_printer_union_field@@Base>
   16300:	mov	r8, #9
   16304:	mov	r1, r7
   16308:	mov	r0, r6
   1630c:	stmib	sp, {r4, r5}
   16310:	str	r9, [sp]
   16314:	ldr	r3, [pc, #112]	; 1638c <_start@@Base+0xdec>
   16318:	mov	r2, #3
   1631c:	bl	3fd48 <flatcc_json_printer_union_field@@Base>
   16320:	mov	r1, r7
   16324:	mov	r0, r6
   16328:	stmib	sp, {r4, r5}
   1632c:	str	r8, [sp]
   16330:	ldr	r3, [pc, #88]	; 16390 <_start@@Base+0xdf0>
   16334:	mov	r2, #5
   16338:	bl	3fd48 <flatcc_json_printer_union_field@@Base>
   1633c:	mov	r3, #5
   16340:	mov	r1, r7
   16344:	mov	r0, r6
   16348:	str	r3, [sp]
   1634c:	stmib	sp, {r4, r5}
   16350:	ldr	r3, [pc, #60]	; 16394 <_start@@Base+0xdf4>
   16354:	mov	r2, #7
   16358:	bl	3fd48 <flatcc_json_printer_union_field@@Base>
   1635c:	stmib	sp, {r4, r5}
   16360:	str	r9, [sp]
   16364:	mov	r2, r8
   16368:	mov	r1, r7
   1636c:	mov	r0, r6
   16370:	ldr	r3, [pc, #32]	; 16398 <_start@@Base+0xdf8>
   16374:	bl	3f77c <flatcc_json_printer_union_vector_field@@Base>
   16378:	add	sp, sp, #20
   1637c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16380:	muleq	r1, ip, r3
   16384:	andeq	r6, r1, r8, ror #8
   16388:	muleq	r4, r8, ip
   1638c:	andeq	r1, r4, r8, lsr #25
   16390:			; <UNDEFINED> instruction: 0x00041cb4
   16394:	andeq	r1, r4, r0, asr #25
   16398:	andeq	r1, r4, r8, asr #25
   1639c:	ldrb	r3, [r1, #8]
   163a0:	cmp	r3, #9
   163a4:	beq	163dc <_start@@Base+0xe3c>
   163a8:	bls	163c4 <_start@@Base+0xe24>
   163ac:	cmp	r3, #11
   163b0:	beq	163c0 <_start@@Base+0xe20>
   163b4:	bcc	163dc <_start@@Base+0xe3c>
   163b8:	cmp	r3, #255	; 0xff
   163bc:	bne	163e4 <_start@@Base+0xe44>
   163c0:	b	402d4 <flatcc_json_printer_union_string@@Base>
   163c4:	cmp	r3, #2
   163c8:	beq	163ec <_start@@Base+0xe4c>
   163cc:	cmp	r3, #8
   163d0:	bne	163e8 <_start@@Base+0xe48>
   163d4:	ldr	r2, [pc, #24]	; 163f4 <_start@@Base+0xe54>
   163d8:	b	401a8 <flatcc_json_printer_union_struct@@Base>
   163dc:	ldr	r2, [pc, #20]	; 163f8 <_start@@Base+0xe58>
   163e0:	b	401a8 <flatcc_json_printer_union_struct@@Base>
   163e4:	bx	lr
   163e8:	bx	lr
   163ec:	ldr	r2, [pc, #8]	; 163fc <_start@@Base+0xe5c>
   163f0:	b	400d4 <flatcc_json_printer_union_table@@Base>
   163f4:	andeq	r6, r1, r4, lsr r4
   163f8:	andeq	r6, r1, r0, lsl #8
   163fc:	strdeq	r5, [r1], -r4
   16400:	push	{lr}		; (str lr, [sp, #-4]!)
   16404:	sub	sp, sp, #12
   16408:	ldr	lr, [pc, #32]	; 16430 <_start@@Base+0xe90>
   1640c:	mov	ip, #10
   16410:	mov	r3, #0
   16414:	mov	r2, r1
   16418:	str	lr, [sp]
   1641c:	str	ip, [sp, #4]
   16420:	mov	r1, r3
   16424:	bl	396d8 <flatcc_json_printer_int32_struct_field@@Base>
   16428:	add	sp, sp, #12
   1642c:	pop	{pc}		; (ldr pc, [sp], #4)
   16430:	ldrdeq	r1, [r4], -r4
   16434:	push	{lr}		; (str lr, [sp, #-4]!)
   16438:	sub	sp, sp, #12
   1643c:	ldr	lr, [pc, #32]	; 16464 <_start@@Base+0xec4>
   16440:	mov	ip, #11
   16444:	mov	r3, #0
   16448:	mov	r2, r1
   1644c:	str	lr, [sp]
   16450:	str	ip, [sp, #4]
   16454:	mov	r1, r3
   16458:	bl	38d68 <flatcc_json_printer_uint16_struct_field@@Base>
   1645c:	add	sp, sp, #12
   16460:	pop	{pc}		; (ldr pc, [sp], #4)
   16464:	andeq	r1, r4, r0, ror #25
   16468:	cmp	r1, #9
   1646c:	mov	r3, r0
   16470:	beq	164e8 <_start@@Base+0xf48>
   16474:	bls	16498 <_start@@Base+0xef8>
   16478:	cmp	r1, #11
   1647c:	beq	164b4 <_start@@Base+0xf14>
   16480:	bcc	164dc <_start@@Base+0xf3c>
   16484:	cmp	r1, #255	; 0xff
   16488:	bne	164c0 <_start@@Base+0xf20>
   1648c:	mov	r2, #6
   16490:	ldr	r1, [pc, #92]	; 164f4 <_start@@Base+0xf54>
   16494:	b	366a8 <flatcc_json_printer_enum@@Base>
   16498:	cmp	r1, #2
   1649c:	beq	164d0 <_start@@Base+0xf30>
   164a0:	cmp	r1, #8
   164a4:	bne	164c0 <_start@@Base+0xf20>
   164a8:	mov	r2, r1
   164ac:	ldr	r1, [pc, #68]	; 164f8 <_start@@Base+0xf58>
   164b0:	b	366a8 <flatcc_json_printer_enum@@Base>
   164b4:	mov	r2, #5
   164b8:	ldr	r1, [pc, #60]	; 164fc <_start@@Base+0xf5c>
   164bc:	b	366a8 <flatcc_json_printer_enum@@Base>
   164c0:	mov	r0, r3
   164c4:	mov	r2, #4
   164c8:	ldr	r1, [pc, #48]	; 16500 <_start@@Base+0xf60>
   164cc:	b	366a8 <flatcc_json_printer_enum@@Base>
   164d0:	mov	r2, #5
   164d4:	ldr	r1, [pc, #40]	; 16504 <_start@@Base+0xf64>
   164d8:	b	366a8 <flatcc_json_printer_enum@@Base>
   164dc:	mov	r2, #7
   164e0:	ldr	r1, [pc, #32]	; 16508 <_start@@Base+0xf68>
   164e4:	b	366a8 <flatcc_json_printer_enum@@Base>
   164e8:	mov	r2, #5
   164ec:	ldr	r1, [pc, #24]	; 1650c <_start@@Base+0xf6c>
   164f0:	b	366a8 <flatcc_json_printer_enum@@Base>
   164f4:	andeq	r1, r4, r8, lsl sp
   164f8:	strdeq	r1, [r4], -r4
   164fc:	andeq	r1, r4, r0, lsl sp
   16500:	andeq	r6, r4, r0, ror #11
   16504:	andeq	r1, r4, ip, ror #25
   16508:	andeq	r1, r4, r8, lsl #26
   1650c:	andeq	r1, r4, r0, lsl #26
   16510:	push	{r4, r5, r6, r7, lr}
   16514:	mov	r3, #5
   16518:	ldr	r7, [pc, #124]	; 1659c <_start@@Base+0xffc>
   1651c:	sub	sp, sp, #20
   16520:	mov	r4, #2
   16524:	mov	r2, #0
   16528:	stm	sp, {r3, r4, r7}
   1652c:	mov	r5, r0
   16530:	ldr	r3, [pc, #104]	; 165a0 <_start@@Base+0x1000>
   16534:	mov	r6, r1
   16538:	bl	384b0 <flatcc_json_printer_int8_enum_field@@Base>
   1653c:	mov	r3, #6
   16540:	mov	r1, r6
   16544:	mov	r0, r5
   16548:	str	r3, [sp]
   1654c:	stmib	sp, {r4, r7}
   16550:	ldr	r3, [pc, #76]	; 165a4 <_start@@Base+0x1004>
   16554:	mov	r2, #1
   16558:	bl	384b0 <flatcc_json_printer_int8_enum_field@@Base>
   1655c:	mov	r2, r4
   16560:	mov	r1, r6
   16564:	mov	r0, r5
   16568:	str	r4, [sp, #4]
   1656c:	str	r4, [sp]
   16570:	ldr	r3, [pc, #48]	; 165a8 <_start@@Base+0x1008>
   16574:	bl	37010 <flatcc_json_printer_uint8_field@@Base>
   16578:	mov	r2, #3
   1657c:	str	r4, [sp, #4]
   16580:	mov	r1, r6
   16584:	mov	r0, r5
   16588:	str	r2, [sp]
   1658c:	ldr	r3, [pc, #24]	; 165ac <_start@@Base+0x100c>
   16590:	bl	37010 <flatcc_json_printer_uint8_field@@Base>
   16594:	add	sp, sp, #20
   16598:	pop	{r4, r5, r6, r7, pc}
   1659c:			; <UNDEFINED> instruction: 0x000165b0
   165a0:	andeq	r1, r4, r0, lsl #21
   165a4:	andeq	r1, r4, r0, lsr #26
   165a8:	andeq	r1, r4, r8, lsr #26
   165ac:	andeq	r1, r4, ip, lsr #26
   165b0:	push	{r4, r5, r6, r7, r8, lr}
   165b4:	uxtb	r4, r1
   165b8:	tst	r4, #244	; 0xf4
   165bc:	movne	r5, #1
   165c0:	moveq	r5, #0
   165c4:	cmp	r4, #0
   165c8:	orreq	r5, r5, #1
   165cc:	cmp	r5, #0
   165d0:	beq	165dc <_start@@Base+0x103c>
   165d4:	pop	{r4, r5, r6, r7, r8, lr}
   165d8:	b	364b4 <flatcc_json_printer_int8@@Base>
   165dc:	sub	r3, r4, #1
   165e0:	tst	r3, r4
   165e4:	movne	r7, #1
   165e8:	moveq	r7, #0
   165ec:	mov	r1, r7
   165f0:	mov	r6, r0
   165f4:	bl	367b4 <flatcc_json_printer_delimit_enum_flags@@Base>
   165f8:	ands	r1, r4, #1
   165fc:	moveq	r5, #1
   16600:	bne	16624 <_start@@Base+0x1084>
   16604:	tst	r4, #2
   16608:	bne	16658 <_start@@Base+0x10b8>
   1660c:	tst	r4, #8
   16610:	bne	16644 <_start@@Base+0x10a4>
   16614:	mov	r1, r7
   16618:	mov	r0, r6
   1661c:	pop	{r4, r5, r6, r7, r8, lr}
   16620:	b	367b4 <flatcc_json_printer_delimit_enum_flags@@Base>
   16624:	mov	r1, r5
   16628:	mov	r3, #3
   1662c:	ldr	r2, [pc, #60]	; 16670 <_start@@Base+0x10d0>
   16630:	mov	r0, r6
   16634:	bl	367e4 <flatcc_json_printer_enum_flag@@Base>
   16638:	mov	r5, #2
   1663c:	mov	r1, #1
   16640:	b	16604 <_start@@Base+0x1064>
   16644:	mov	r3, #4
   16648:	ldr	r2, [pc, #36]	; 16674 <_start@@Base+0x10d4>
   1664c:	mov	r0, r6
   16650:	bl	367e4 <flatcc_json_printer_enum_flag@@Base>
   16654:	b	16614 <_start@@Base+0x1074>
   16658:	mov	r3, #5
   1665c:	ldr	r2, [pc, #20]	; 16678 <_start@@Base+0x10d8>
   16660:	mov	r0, r6
   16664:	bl	367e4 <flatcc_json_printer_enum_flag@@Base>
   16668:	mov	r1, r5
   1666c:	b	1660c <_start@@Base+0x106c>
   16670:	andeq	r1, r4, r0, lsr sp
   16674:	andeq	r1, r4, ip, lsr sp
   16678:	andeq	r1, r4, r4, lsr sp
   1667c:	push	{r4, r5, r6, lr}
   16680:	sub	sp, sp, #16
   16684:	ldr	ip, [pc, #216]	; 16764 <_start@@Base+0x11c4>
   16688:	mov	r6, #1
   1668c:	mov	r3, #0
   16690:	mov	r4, r1
   16694:	str	ip, [sp]
   16698:	mov	r2, r1
   1669c:	str	r6, [sp, #4]
   166a0:	mov	r1, r3
   166a4:	mov	r5, r0
   166a8:	bl	39c80 <flatcc_json_printer_float_struct_field@@Base>
   166ac:	ldr	r3, [pc, #180]	; 16768 <_start@@Base+0x11c8>
   166b0:	str	r6, [sp, #4]
   166b4:	mov	r2, r4
   166b8:	mov	r1, r6
   166bc:	mov	r0, r5
   166c0:	str	r3, [sp]
   166c4:	mov	r3, #4
   166c8:	bl	39c80 <flatcc_json_printer_float_struct_field@@Base>
   166cc:	ldr	r3, [pc, #152]	; 1676c <_start@@Base+0x11cc>
   166d0:	str	r6, [sp, #4]
   166d4:	mov	r2, r4
   166d8:	mov	r0, r5
   166dc:	str	r3, [sp]
   166e0:	mov	r1, #2
   166e4:	mov	r3, #8
   166e8:	bl	39c80 <flatcc_json_printer_float_struct_field@@Base>
   166ec:	ldr	r3, [pc, #124]	; 16770 <_start@@Base+0x11d0>
   166f0:	mov	r6, #5
   166f4:	mov	r2, r4
   166f8:	mov	r0, r5
   166fc:	stm	sp, {r3, r6}
   16700:	mov	r1, #3
   16704:	mov	r3, #16
   16708:	bl	39e40 <flatcc_json_printer_double_struct_field@@Base>
   1670c:	ldr	r1, [pc, #96]	; 16774 <_start@@Base+0x11d4>
   16710:	ldr	r3, [pc, #96]	; 16778 <_start@@Base+0x11d8>
   16714:	mov	r2, r4
   16718:	mov	r0, r5
   1671c:	str	r1, [sp, #8]
   16720:	str	r3, [sp]
   16724:	str	r6, [sp, #4]
   16728:	mov	r3, #24
   1672c:	mov	r1, #4
   16730:	bl	3a810 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16734:	ldr	ip, [pc, #64]	; 1677c <_start@@Base+0x11dc>
   16738:	ldr	r3, [pc, #64]	; 16780 <_start@@Base+0x11e0>
   1673c:	str	r6, [sp, #4]
   16740:	str	r3, [sp]
   16744:	mov	r2, r4
   16748:	mov	r1, r6
   1674c:	mov	r0, r5
   16750:	str	ip, [sp, #8]
   16754:	mov	r3, #26
   16758:	bl	402ec <flatcc_json_printer_embedded_struct_field@@Base>
   1675c:	add	sp, sp, #16
   16760:	pop	{r4, r5, r6, pc}
   16764:			; <UNDEFINED> instruction: 0x00041dbc
   16768:	andeq	r1, r4, r4, asr #21
   1676c:	andeq	r1, r4, r4, asr #26
   16770:	andeq	r1, r4, r8, asr #26
   16774:			; <UNDEFINED> instruction: 0x000165b0
   16778:	andeq	r1, r4, r0, asr sp
   1677c:	andeq	r6, r1, ip, ror r1
   16780:	andeq	r1, r4, r8, asr sp
   16784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16788:	mov	r4, r1
   1678c:	sub	sp, sp, #12
   16790:	mov	r1, r2
   16794:	mov	r5, r0
   16798:	mov	r0, r4
   1679c:	mov	sl, r2
   167a0:	mov	fp, r3
   167a4:	bl	156c8 <_start@@Base+0x128>
   167a8:	add	r3, pc, #624	; 0x270
   167ac:	ldrd	r2, [r3]
   167b0:	cmp	r1, r3
   167b4:	cmpeq	r0, r2
   167b8:	bhi	1682c <_start@@Base+0x128c>
   167bc:	add	r3, pc, #612	; 0x264
   167c0:	ldrd	r2, [r3]
   167c4:	cmp	r1, r3
   167c8:	cmpeq	r0, r2
   167cc:	bls	168f4 <_start@@Base+0x1354>
   167d0:	add	r7, pc, #600	; 0x258
   167d4:	ldrd	r6, [r7]
   167d8:	and	r8, r0, #-16777216	; 0xff000000
   167dc:	cmp	r1, r7
   167e0:	cmpeq	r8, r6
   167e4:	beq	169c8 <_start@@Base+0x1428>
   167e8:	add	r3, pc, #584	; 0x248
   167ec:	ldrd	r2, [r3]
   167f0:	bic	r0, r0, #255	; 0xff
   167f4:	cmp	r1, r3
   167f8:	cmpeq	r0, r2
   167fc:	bne	16858 <_start@@Base+0x12b8>
   16800:	ldr	r3, [sp, #52]	; 0x34
   16804:	mov	r2, sl
   16808:	str	r3, [sp]
   1680c:	mov	r0, r5
   16810:	mov	r3, #7
   16814:	mov	r1, r4
   16818:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   1681c:	cmp	r4, r0
   16820:	movne	r6, #10
   16824:	bne	16934 <_start@@Base+0x1394>
   16828:	b	16858 <_start@@Base+0x12b8>
   1682c:	add	r3, pc, #524	; 0x20c
   16830:	ldrd	r2, [r3]
   16834:	cmp	r1, r3
   16838:	cmpeq	r0, r2
   1683c:	bhi	16864 <_start@@Base+0x12c4>
   16840:	add	r3, pc, #512	; 0x200
   16844:	ldrd	r2, [r3]
   16848:	mov	r0, #0
   1684c:	cmp	r1, r3
   16850:	cmpeq	r0, r2
   16854:	beq	1699c <_start@@Base+0x13fc>
   16858:	mov	r0, r4
   1685c:	add	sp, sp, #12
   16860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16864:	add	r3, pc, #484	; 0x1e4
   16868:	ldrd	r2, [r3]
   1686c:	cmp	r1, r3
   16870:	cmpeq	r0, r2
   16874:	bls	16958 <_start@@Base+0x13b8>
   16878:	add	r7, pc, #472	; 0x1d8
   1687c:	ldrd	r6, [r7]
   16880:	ldr	r2, [pc, #496]	; 16a78 <_start@@Base+0x14d8>
   16884:	mvn	r3, #0
   16888:	and	r3, r3, r1
   1688c:	and	r2, r2, r0
   16890:	cmp	r3, r7
   16894:	cmpeq	r2, r6
   16898:	beq	169f4 <_start@@Base+0x1454>
   1689c:	add	r3, pc, #444	; 0x1bc
   168a0:	ldrd	r2, [r3]
   168a4:	cmp	r1, r3
   168a8:	cmpeq	r0, r2
   168ac:	bne	16858 <_start@@Base+0x12b8>
   168b0:	ldr	r3, [sp, #52]	; 0x34
   168b4:	mov	r2, sl
   168b8:	str	r3, [sp]
   168bc:	mov	r0, r5
   168c0:	mov	r3, #8
   168c4:	mov	r1, r4
   168c8:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   168cc:	cmp	r4, r0
   168d0:	beq	16858 <_start@@Base+0x12b8>
   168d4:	ldr	r2, [sp, #48]	; 0x30
   168d8:	mov	r4, r0
   168dc:	mov	r1, #0
   168e0:	mov	r0, #8
   168e4:	mov	r3, #0
   168e8:	strd	r0, [r2]
   168ec:	str	r3, [fp]
   168f0:	b	16858 <_start@@Base+0x12b8>
   168f4:	add	r3, pc, #364	; 0x16c
   168f8:	ldrd	r2, [r3]
   168fc:	and	r0, r0, #-16777216	; 0xff000000
   16900:	cmp	r1, r3
   16904:	cmpeq	r0, r2
   16908:	bne	16858 <_start@@Base+0x12b8>
   1690c:	ldr	r3, [sp, #52]	; 0x34
   16910:	mov	r2, sl
   16914:	str	r3, [sp]
   16918:	mov	r0, r5
   1691c:	mov	r3, #5
   16920:	mov	r1, r4
   16924:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16928:	cmp	r4, r0
   1692c:	movne	r6, #9
   16930:	beq	16858 <_start@@Base+0x12b8>
   16934:	ldr	r2, [sp, #48]	; 0x30
   16938:	mov	r7, #0
   1693c:	mov	r3, #0
   16940:	mov	r4, r0
   16944:	strd	r6, [r2]
   16948:	mov	r0, r4
   1694c:	str	r3, [fp]
   16950:	add	sp, sp, #12
   16954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16958:	add	r3, pc, #272	; 0x110
   1695c:	ldrd	r2, [r3]
   16960:	and	r0, r0, #-16777216	; 0xff000000
   16964:	cmp	r1, r3
   16968:	cmpeq	r0, r2
   1696c:	bne	16858 <_start@@Base+0x12b8>
   16970:	ldr	r3, [sp, #52]	; 0x34
   16974:	mov	r2, sl
   16978:	str	r3, [sp]
   1697c:	mov	r0, r5
   16980:	mov	r3, #5
   16984:	mov	r1, r4
   16988:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   1698c:	cmp	r4, r0
   16990:	beq	16858 <_start@@Base+0x12b8>
   16994:	mov	r6, #11
   16998:	b	16934 <_start@@Base+0x1394>
   1699c:	ldr	r3, [sp, #52]	; 0x34
   169a0:	mov	r2, sl
   169a4:	str	r3, [sp]
   169a8:	mov	r0, r5
   169ac:	mov	r3, #4
   169b0:	mov	r1, r4
   169b4:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   169b8:	cmp	r4, r0
   169bc:	movne	r6, #0
   169c0:	bne	16934 <_start@@Base+0x1394>
   169c4:	b	16858 <_start@@Base+0x12b8>
   169c8:	ldr	r3, [sp, #52]	; 0x34
   169cc:	mov	r2, sl
   169d0:	str	r3, [sp]
   169d4:	mov	r0, r5
   169d8:	mov	r3, #5
   169dc:	mov	r1, r4
   169e0:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   169e4:	cmp	r4, r0
   169e8:	movne	r6, #2
   169ec:	bne	16934 <_start@@Base+0x1394>
   169f0:	b	16858 <_start@@Base+0x12b8>
   169f4:	ldr	r3, [sp, #52]	; 0x34
   169f8:	mov	r2, sl
   169fc:	str	r3, [sp]
   16a00:	mov	r0, r5
   16a04:	mov	r3, #6
   16a08:	mov	r1, r4
   16a0c:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16a10:	cmp	r4, r0
   16a14:	movne	r6, #255	; 0xff
   16a18:	bne	16934 <_start@@Base+0x1394>
   16a1c:	b	16858 <_start@@Base+0x12b8>
   16a20:			; <UNDEFINED> instruction: 0xffffffff
   16a24:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16a28:			; <UNDEFINED> instruction: 0x46616dff
   16a2c:	rsbmi	r6, pc, #428	; 0x1ac
   16a30:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16a34:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16a38:	strbtmi	r6, [r1], -r0, lsl #28
   16a3c:	rsbmi	r6, pc, #428	; 0x1ac
   16a40:	ldrshvc	pc, [pc, #255]	; 16b47 <_start@@Base+0x15a7>	; <UNPREDICTABLE>
   16a44:	svcmi	0x00746865
   16a48:	andeq	r0, r0, r0
   16a4c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16a50:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   16a54:	rsbpl	r7, r1, #117	; 0x75
   16a58:	strbvs	r0, [r4, #-0]!
   16a5c:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16a60:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16a64:	rsbpl	r7, r1, #117	; 0x75
   16a68:	strvs	r0, [r0, #-0]
   16a6c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16a70:	andvc	r0, r0, #0
   16a74:	svcmi	0x00746865
   16a78:			; <UNDEFINED> instruction: 0xffff0000
   16a7c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16a80:	mov	r6, r1
   16a84:	sub	sp, sp, #12
   16a88:	mov	r1, r2
   16a8c:	mov	r8, r0
   16a90:	mov	r0, r6
   16a94:	mov	r7, r2
   16a98:	mov	r9, r3
   16a9c:	bl	156c8 <_start@@Base+0x128>
   16aa0:	add	r3, pc, #464	; 0x1d0
   16aa4:	ldrd	r2, [r3]
   16aa8:	cmp	r1, r3
   16aac:	cmpeq	r0, r2
   16ab0:	mov	r5, r1
   16ab4:	bhi	16ae0 <_start@@Base+0x1540>
   16ab8:	add	r3, pc, #448	; 0x1c0
   16abc:	ldrd	r2, [r3]
   16ac0:	bic	r5, r1, #255	; 0xff
   16ac4:	mov	r4, #0
   16ac8:	cmp	r5, r3
   16acc:	cmpeq	r4, r2
   16ad0:	beq	16bb0 <_start@@Base+0x1610>
   16ad4:	mov	r0, r6
   16ad8:	add	sp, sp, #12
   16adc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ae0:	add	r3, pc, #416	; 0x1a0
   16ae4:	ldrd	r2, [r3]
   16ae8:	mov	r4, r0
   16aec:	cmp	r1, r3
   16af0:	cmpeq	r0, r2
   16af4:	beq	16bf4 <_start@@Base+0x1654>
   16af8:	add	r3, pc, #400	; 0x190
   16afc:	ldrd	r2, [r3]
   16b00:	bic	r0, r0, #255	; 0xff
   16b04:	cmp	r1, r3
   16b08:	cmpeq	r0, r2
   16b0c:	beq	16c20 <_start@@Base+0x1680>
   16b10:	add	r3, pc, #384	; 0x180
   16b14:	ldrd	r2, [r3]
   16b18:	mov	r0, #0
   16b1c:	cmp	r5, r3
   16b20:	cmpeq	r0, r2
   16b24:	beq	16c4c <_start@@Base+0x16ac>
   16b28:	add	r3, pc, #368	; 0x170
   16b2c:	ldrd	r2, [r3]
   16b30:	cmp	r5, r3
   16b34:	cmpeq	r4, r2
   16b38:	bne	16ad4 <_start@@Base+0x1534>
   16b3c:	mov	r1, r7
   16b40:	add	r0, r6, #8
   16b44:	bl	156c8 <_start@@Base+0x128>
   16b48:	add	r3, pc, #344	; 0x158
   16b4c:	ldrd	r2, [r3]
   16b50:	cmp	r1, r3
   16b54:	cmpeq	r0, r2
   16b58:	bne	16ad4 <_start@@Base+0x1534>
   16b5c:	add	r4, r6, #16
   16b60:	mov	r0, r4
   16b64:	mov	r1, r7
   16b68:	bl	156c8 <_start@@Base+0x128>
   16b6c:	add	r3, pc, #316	; 0x13c
   16b70:	ldrd	r2, [r3]
   16b74:	bic	r0, r0, #255	; 0xff
   16b78:	cmp	r1, r3
   16b7c:	cmpeq	r0, r2
   16b80:	bne	16ad4 <_start@@Base+0x1534>
   16b84:	ldr	r3, [sp, #44]	; 0x2c
   16b88:	mov	r2, r7
   16b8c:	str	r3, [sp]
   16b90:	mov	r0, r8
   16b94:	mov	r3, #7
   16b98:	mov	r1, r4
   16b9c:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16ba0:	cmp	r4, r0
   16ba4:	beq	16ad4 <_start@@Base+0x1534>
   16ba8:	mov	r4, #2
   16bac:	b	16bd8 <_start@@Base+0x1638>
   16bb0:	ldr	r3, [sp, #44]	; 0x2c
   16bb4:	mov	r2, r7
   16bb8:	str	r3, [sp]
   16bbc:	mov	r0, r8
   16bc0:	mov	r3, #3
   16bc4:	mov	r1, r6
   16bc8:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16bcc:	cmp	r6, r0
   16bd0:	movne	r4, #4
   16bd4:	beq	16ad8 <_start@@Base+0x1538>
   16bd8:	ldr	r2, [sp, #40]	; 0x28
   16bdc:	mov	r5, #0
   16be0:	mov	r3, #0
   16be4:	strd	r4, [r2]
   16be8:	str	r3, [r9]
   16bec:	add	sp, sp, #12
   16bf0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16bf4:	ldr	r3, [sp, #44]	; 0x2c
   16bf8:	mov	r2, r7
   16bfc:	str	r3, [sp]
   16c00:	mov	r0, r8
   16c04:	mov	r3, #8
   16c08:	mov	r1, r6
   16c0c:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16c10:	cmp	r6, r0
   16c14:	movne	r4, #3
   16c18:	bne	16bd8 <_start@@Base+0x1638>
   16c1c:	b	16ad4 <_start@@Base+0x1534>
   16c20:	ldr	r3, [sp, #44]	; 0x2c
   16c24:	mov	r2, r7
   16c28:	str	r3, [sp]
   16c2c:	mov	r1, r6
   16c30:	mov	r3, #7
   16c34:	mov	r0, r8
   16c38:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16c3c:	cmp	r6, r0
   16c40:	movne	r4, #1
   16c44:	bne	16bd8 <_start@@Base+0x1638>
   16c48:	b	16b10 <_start@@Base+0x1570>
   16c4c:	ldr	r3, [sp, #44]	; 0x2c
   16c50:	mov	r2, r7
   16c54:	str	r3, [sp]
   16c58:	mov	r0, r8
   16c5c:	mov	r3, #4
   16c60:	mov	r1, r6
   16c64:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16c68:	cmp	r6, r0
   16c6c:	movne	r4, #0
   16c70:	bne	16bd8 <_start@@Base+0x1638>
   16c74:	b	16ad4 <_start@@Base+0x1534>
   16c78:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16c7c:	stclmi	14, cr6, [pc, #-460]!	; 16ab8 <_start@@Base+0x1518>
   16c80:	andeq	r0, r0, r0
   16c84:	cmnmi	ip, r0, lsl #8
   16c88:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16c8c:	stclmi	14, cr6, [pc, #-460]!	; 16ac8 <_start@@Base+0x1528>
   16c90:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16c94:	stclmi	14, cr6, [pc, #-460]!	; 16ad0 <_start@@Base+0x1530>
   16c98:	andeq	r0, r0, r0
   16c9c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16ca0:	cmnpl	r9, #112, 26	; 0x1c00
   16ca4:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16ca8:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16cac:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16cb0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16cb4:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16cb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16cbc:	mov	r4, r1
   16cc0:	sub	sp, sp, #12
   16cc4:	mov	r1, r2
   16cc8:	mov	r6, r0
   16ccc:	mov	r0, r4
   16cd0:	mov	r5, r2
   16cd4:	mov	r7, r3
   16cd8:	bl	156c8 <_start@@Base+0x128>
   16cdc:	add	r3, pc, #316	; 0x13c
   16ce0:	ldrd	r2, [r3]
   16ce4:	cmp	r1, r3
   16ce8:	cmpeq	r0, r2
   16cec:	bhi	16d14 <_start@@Base+0x1774>
   16cf0:	add	r3, pc, #304	; 0x130
   16cf4:	ldrd	r2, [r3]
   16cf8:	mov	r0, #0
   16cfc:	cmp	r1, r3
   16d00:	cmpeq	r0, r2
   16d04:	beq	16d94 <_start@@Base+0x17f4>
   16d08:	mov	r0, r4
   16d0c:	add	sp, sp, #12
   16d10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d14:	add	r9, pc, #276	; 0x114
   16d18:	ldrd	r8, [r9]
   16d1c:	ldr	r2, [pc, #292]	; 16e48 <_start@@Base+0x18a8>
   16d20:	mvn	r3, #0
   16d24:	and	r3, r3, r1
   16d28:	and	r2, r2, r0
   16d2c:	cmp	r3, r9
   16d30:	cmpeq	r2, r8
   16d34:	beq	16dd8 <_start@@Base+0x1838>
   16d38:	add	r3, pc, #248	; 0xf8
   16d3c:	ldrd	r2, [r3]
   16d40:	mov	r0, #0
   16d44:	cmp	r1, r3
   16d48:	cmpeq	r0, r2
   16d4c:	bne	16d08 <_start@@Base+0x1768>
   16d50:	ldr	r3, [sp, #44]	; 0x2c
   16d54:	mov	r2, r5
   16d58:	str	r3, [sp]
   16d5c:	mov	r0, r6
   16d60:	mov	r3, #4
   16d64:	mov	r1, r4
   16d68:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16d6c:	cmp	r4, r0
   16d70:	beq	16d08 <_start@@Base+0x1768>
   16d74:	add	r9, pc, #196	; 0xc4
   16d78:	ldrd	r8, [r9]
   16d7c:	ldr	r2, [sp, #40]	; 0x28
   16d80:	mov	r3, #0
   16d84:	mov	r4, r0
   16d88:	strd	r8, [r2]
   16d8c:	str	r3, [r7]
   16d90:	b	16d08 <_start@@Base+0x1768>
   16d94:	ldr	r3, [sp, #44]	; 0x2c
   16d98:	mov	r2, r5
   16d9c:	str	r3, [sp]
   16da0:	mov	r0, r6
   16da4:	mov	r3, #4
   16da8:	mov	r1, r4
   16dac:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16db0:	cmp	r4, r0
   16db4:	beq	16d08 <_start@@Base+0x1768>
   16db8:	ldr	r2, [sp, #40]	; 0x28
   16dbc:	mov	r8, #3
   16dc0:	mov	r9, #0
   16dc4:	mov	r3, #0
   16dc8:	strd	r8, [r2]
   16dcc:	mov	r4, r0
   16dd0:	str	r3, [r7]
   16dd4:	b	16d08 <_start@@Base+0x1768>
   16dd8:	ldr	r3, [sp, #44]	; 0x2c
   16ddc:	mov	r2, r5
   16de0:	str	r3, [sp]
   16de4:	mov	r0, r6
   16de8:	mov	r3, #6
   16dec:	mov	r1, r4
   16df0:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16df4:	cmp	r4, r0
   16df8:	beq	16d08 <_start@@Base+0x1768>
   16dfc:	ldr	r2, [sp, #40]	; 0x28
   16e00:	mvn	r8, #1
   16e04:	mvn	r9, #0
   16e08:	mov	r3, #1
   16e0c:	strd	r8, [r2]
   16e10:	mov	r4, r0
   16e14:	str	r3, [r7]
   16e18:	b	16d08 <_start@@Base+0x1768>
   16e1c:	nop			; (mov r0, r0)
   16e20:			; <UNDEFINED> instruction: 0xffffffff
   16e24:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16e28:	andeq	r0, r0, r0
   16e2c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16e30:	strbvs	r0, [r7, #-0]!
   16e34:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16e38:	andeq	r0, r0, r0
   16e3c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16e40:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16e44:	andeq	r0, r0, r0
   16e48:			; <UNDEFINED> instruction: 0xffff0000
   16e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e50:	mov	r4, r1
   16e54:	sub	sp, sp, #12
   16e58:	mov	r1, r2
   16e5c:	mov	r5, r0
   16e60:	mov	r0, r4
   16e64:	mov	sl, r2
   16e68:	mov	fp, r3
   16e6c:	bl	156c8 <_start@@Base+0x128>
   16e70:	add	r3, pc, #408	; 0x198
   16e74:	ldrd	r2, [r3]
   16e78:	cmp	r1, r3
   16e7c:	cmpeq	r0, r2
   16e80:	bhi	16ea8 <_start@@Base+0x1908>
   16e84:	add	r3, pc, #396	; 0x18c
   16e88:	ldrd	r2, [r3]
   16e8c:	mov	r0, #0
   16e90:	cmp	r1, r3
   16e94:	cmpeq	r0, r2
   16e98:	beq	16f80 <_start@@Base+0x19e0>
   16e9c:	mov	r0, r4
   16ea0:	add	sp, sp, #12
   16ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea8:	add	r3, pc, #368	; 0x170
   16eac:	ldrd	r2, [r3]
   16eb0:	cmp	r1, r3
   16eb4:	cmpeq	r0, r2
   16eb8:	bls	16f3c <_start@@Base+0x199c>
   16ebc:	add	r7, pc, #356	; 0x164
   16ec0:	ldrd	r6, [r7]
   16ec4:	bic	r8, r0, #255	; 0xff
   16ec8:	cmp	r1, r7
   16ecc:	cmpeq	r8, r6
   16ed0:	beq	16fcc <_start@@Base+0x1a2c>
   16ed4:	add	r7, pc, #340	; 0x154
   16ed8:	ldrd	r6, [r7]
   16edc:	ldr	r2, [pc, #348]	; 17040 <_start@@Base+0x1aa0>
   16ee0:	mvn	r3, #0
   16ee4:	and	r1, r1, r3
   16ee8:	and	r0, r0, r2
   16eec:	cmp	r1, r7
   16ef0:	cmpeq	r0, r6
   16ef4:	bne	16e9c <_start@@Base+0x18fc>
   16ef8:	ldr	r3, [sp, #52]	; 0x34
   16efc:	mov	r2, sl
   16f00:	str	r3, [sp]
   16f04:	mov	r0, r5
   16f08:	mov	r3, #6
   16f0c:	mov	r1, r4
   16f10:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16f14:	cmp	r4, r0
   16f18:	beq	16e9c <_start@@Base+0x18fc>
   16f1c:	ldr	r2, [sp, #48]	; 0x30
   16f20:	mov	r4, r0
   16f24:	mvn	r1, #0
   16f28:	mvn	r0, #1
   16f2c:	mov	r3, #1
   16f30:	strd	r0, [r2]
   16f34:	str	r3, [fp]
   16f38:	b	16e9c <_start@@Base+0x18fc>
   16f3c:	add	r3, pc, #244	; 0xf4
   16f40:	ldrd	r2, [r3]
   16f44:	mov	r0, #0
   16f48:	cmp	r1, r3
   16f4c:	cmpeq	r0, r2
   16f50:	bne	16e9c <_start@@Base+0x18fc>
   16f54:	ldr	r3, [sp, #52]	; 0x34
   16f58:	mov	r2, sl
   16f5c:	str	r3, [sp]
   16f60:	mov	r0, r5
   16f64:	mov	r3, #4
   16f68:	mov	r1, r4
   16f6c:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16f70:	cmp	r4, r0
   16f74:	beq	16e9c <_start@@Base+0x18fc>
   16f78:	mov	r6, #42	; 0x2a
   16f7c:	b	16fa8 <_start@@Base+0x1a08>
   16f80:	ldr	r3, [sp, #52]	; 0x34
   16f84:	mov	r2, sl
   16f88:	str	r3, [sp]
   16f8c:	mov	r0, r5
   16f90:	mov	r3, #4
   16f94:	mov	r1, r4
   16f98:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16f9c:	cmp	r4, r0
   16fa0:	movne	r6, #2
   16fa4:	beq	16e9c <_start@@Base+0x18fc>
   16fa8:	ldr	r2, [sp, #48]	; 0x30
   16fac:	mov	r7, #0
   16fb0:	mov	r3, #0
   16fb4:	mov	r4, r0
   16fb8:	strd	r6, [r2]
   16fbc:	mov	r0, r4
   16fc0:	str	r3, [fp]
   16fc4:	add	sp, sp, #12
   16fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fcc:	ldr	r3, [sp, #52]	; 0x34
   16fd0:	mov	r2, sl
   16fd4:	str	r3, [sp]
   16fd8:	mov	r0, r5
   16fdc:	mov	r3, #7
   16fe0:	mov	r1, r4
   16fe4:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   16fe8:	cmp	r4, r0
   16fec:	beq	16e9c <_start@@Base+0x18fc>
   16ff0:	ldr	r2, [sp, #48]	; 0x30
   16ff4:	mvn	r6, #0
   16ff8:	mvn	r7, #0
   16ffc:	mov	r3, #1
   17000:	strd	r6, [r2]
   17004:	mov	r4, r0
   17008:	str	r3, [fp]
   1700c:	b	16e9c <_start@@Base+0x18fc>
   17010:			; <UNDEFINED> instruction: 0xffffffff
   17014:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17018:	andeq	r0, r0, r0
   1701c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17020:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   17024:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17028:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   1702c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17030:	strbvs	r0, [r7, #-0]!
   17034:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   17038:	andeq	r0, r0, r0
   1703c:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   17040:			; <UNDEFINED> instruction: 0xffff0000
   17044:	push	{r4, r5, r6, r7, r8, r9, lr}
   17048:	mov	r4, r1
   1704c:	sub	sp, sp, #12
   17050:	mov	r1, r2
   17054:	mov	r6, r0
   17058:	mov	r0, r4
   1705c:	mov	r5, r2
   17060:	mov	r7, r3
   17064:	bl	156c8 <_start@@Base+0x128>
   17068:	add	r3, pc, #280	; 0x118
   1706c:	ldrd	r2, [r3]
   17070:	cmp	r1, r3
   17074:	cmpeq	r0, r2
   17078:	bhi	170a0 <_start@@Base+0x1b00>
   1707c:	add	r3, pc, #268	; 0x10c
   17080:	ldrd	r2, [r3]
   17084:	mov	r0, #0
   17088:	cmp	r1, r3
   1708c:	cmpeq	r0, r2
   17090:	beq	17110 <_start@@Base+0x1b70>
   17094:	mov	r0, r4
   17098:	add	sp, sp, #12
   1709c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   170a0:	add	r3, pc, #240	; 0xf0
   170a4:	ldrd	r2, [r3]
   170a8:	mov	r0, #0
   170ac:	cmp	r1, r3
   170b0:	cmpeq	r0, r2
   170b4:	beq	1715c <_start@@Base+0x1bbc>
   170b8:	add	r3, pc, #224	; 0xe0
   170bc:	ldrd	r2, [r3]
   170c0:	cmp	r1, r3
   170c4:	cmpeq	r0, r2
   170c8:	bne	17094 <_start@@Base+0x1af4>
   170cc:	ldr	r3, [sp, #44]	; 0x2c
   170d0:	mov	r2, r5
   170d4:	str	r3, [sp]
   170d8:	mov	r0, r6
   170dc:	mov	r3, #4
   170e0:	mov	r1, r4
   170e4:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   170e8:	cmp	r4, r0
   170ec:	beq	17094 <_start@@Base+0x1af4>
   170f0:	ldr	r2, [sp, #40]	; 0x28
   170f4:	mov	r4, r0
   170f8:	mvn	r1, #0
   170fc:	mvn	r0, #10
   17100:	mov	r3, #1
   17104:	strd	r0, [r2]
   17108:	str	r3, [r7]
   1710c:	b	17094 <_start@@Base+0x1af4>
   17110:	ldr	r3, [sp, #44]	; 0x2c
   17114:	mov	r2, r5
   17118:	str	r3, [sp]
   1711c:	mov	r0, r6
   17120:	mov	r3, #4
   17124:	mov	r1, r4
   17128:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   1712c:	cmp	r4, r0
   17130:	mvnne	r8, #11
   17134:	beq	17094 <_start@@Base+0x1af4>
   17138:	ldr	r2, [sp, #40]	; 0x28
   1713c:	mvn	r9, #0
   17140:	mov	r3, #1
   17144:	mov	r4, r0
   17148:	strd	r8, [r2]
   1714c:	mov	r0, r4
   17150:	str	r3, [r7]
   17154:	add	sp, sp, #12
   17158:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1715c:	ldr	r3, [sp, #44]	; 0x2c
   17160:	mov	r2, r5
   17164:	str	r3, [sp]
   17168:	mov	r0, r6
   1716c:	mov	r3, #4
   17170:	mov	r1, r4
   17174:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   17178:	cmp	r4, r0
   1717c:	beq	17094 <_start@@Base+0x1af4>
   17180:	mvn	r8, #9
   17184:	b	17138 <_start@@Base+0x1b98>
   17188:			; <UNDEFINED> instruction: 0xffffffff
   1718c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17190:	andeq	r0, r0, r0
   17194:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17198:	andeq	r0, r0, r0
   1719c:	mcrvs	7, 3, r6, cr5, cr3, {1}
   171a0:	andeq	r0, r0, r0
   171a4:	mcrvs	7, 3, r6, cr5, cr2, {1}
   171a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171ac:	mov	r4, r1
   171b0:	sub	sp, sp, #12
   171b4:	mov	r1, r2
   171b8:	mov	r5, r0
   171bc:	mov	r0, r4
   171c0:	mov	sl, r2
   171c4:	mov	fp, r3
   171c8:	bl	156c8 <_start@@Base+0x128>
   171cc:	add	r3, pc, #292	; 0x124
   171d0:	ldrd	r2, [r3]
   171d4:	cmp	r1, r3
   171d8:	cmpeq	r0, r2
   171dc:	bhi	17204 <_start@@Base+0x1c64>
   171e0:	add	r3, pc, #280	; 0x118
   171e4:	ldrd	r2, [r3]
   171e8:	mov	r0, #0
   171ec:	cmp	r1, r3
   171f0:	cmpeq	r0, r2
   171f4:	beq	1727c <_start@@Base+0x1cdc>
   171f8:	mov	r0, r4
   171fc:	add	sp, sp, #12
   17200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17204:	add	r7, pc, #252	; 0xfc
   17208:	ldrd	r6, [r7]
   1720c:	bic	r9, r1, #255	; 0xff
   17210:	mov	r8, #0
   17214:	cmp	r9, r7
   17218:	cmpeq	r8, r6
   1721c:	beq	172c8 <_start@@Base+0x1d28>
   17220:	add	r3, pc, #232	; 0xe8
   17224:	ldrd	r2, [r3]
   17228:	and	r0, r0, #-16777216	; 0xff000000
   1722c:	cmp	r1, r3
   17230:	cmpeq	r0, r2
   17234:	bne	171f8 <_start@@Base+0x1c58>
   17238:	ldr	r3, [sp, #52]	; 0x34
   1723c:	mov	r2, sl
   17240:	str	r3, [sp]
   17244:	mov	r0, r5
   17248:	mov	r3, #5
   1724c:	mov	r1, r4
   17250:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   17254:	cmp	r4, r0
   17258:	beq	171f8 <_start@@Base+0x1c58>
   1725c:	ldr	r2, [sp, #48]	; 0x30
   17260:	mov	r4, r0
   17264:	mov	r1, #0
   17268:	mov	r0, #2
   1726c:	mov	r3, #0
   17270:	strd	r0, [r2]
   17274:	str	r3, [fp]
   17278:	b	171f8 <_start@@Base+0x1c58>
   1727c:	ldr	r3, [sp, #52]	; 0x34
   17280:	mov	r2, sl
   17284:	str	r3, [sp]
   17288:	mov	r0, r5
   1728c:	mov	r3, #4
   17290:	mov	r1, r4
   17294:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   17298:	cmp	r4, r0
   1729c:	movne	r6, #8
   172a0:	beq	171f8 <_start@@Base+0x1c58>
   172a4:	ldr	r2, [sp, #48]	; 0x30
   172a8:	mov	r7, #0
   172ac:	mov	r3, #0
   172b0:	mov	r4, r0
   172b4:	strd	r6, [r2]
   172b8:	mov	r0, r4
   172bc:	str	r3, [fp]
   172c0:	add	sp, sp, #12
   172c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172c8:	ldr	r3, [sp, #52]	; 0x34
   172cc:	mov	r2, sl
   172d0:	str	r3, [sp]
   172d4:	mov	r0, r5
   172d8:	mov	r3, #3
   172dc:	mov	r1, r4
   172e0:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   172e4:	cmp	r4, r0
   172e8:	beq	171f8 <_start@@Base+0x1c58>
   172ec:	mov	r6, #1
   172f0:	b	172a4 <_start@@Base+0x1d04>
   172f4:	nop			; (mov r0, r0)
   172f8:	ldclvs	15, cr15, [pc, #1020]!	; 176fc <_start@@Base+0x215c>
   172fc:	ldrbmi	r6, [r2, -r5, ror #10]!
   17300:	andeq	r0, r0, r0
   17304:	rsbmi	r7, ip, #423624704	; 0x19400000
   17308:	andeq	r0, r0, r0
   1730c:	rsbpl	r6, r5, #0, 8
   17310:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   17314:	ldrbmi	r6, [r2, -r5, ror #10]!
   17318:	sub	r3, r2, r1
   1731c:	cmp	r3, #1
   17320:	ble	17334 <_start@@Base+0x1d94>
   17324:	ldrb	r3, [r1]
   17328:	cmp	r3, #32
   1732c:	bhi	17338 <_start@@Base+0x1d98>
   17330:	beq	17340 <_start@@Base+0x1da0>
   17334:	b	2f2dc <flatcc_json_parser_space_ext@@Base>
   17338:	mov	r0, r1
   1733c:	bx	lr
   17340:	ldrb	r3, [r1, #1]
   17344:	cmp	r3, #32
   17348:	bls	17334 <_start@@Base+0x1d94>
   1734c:	add	r0, r1, #1
   17350:	bx	lr
   17354:	mov	r3, #8
   17358:	push	{r4, lr}
   1735c:	mov	r2, r3
   17360:	mov	r1, #0
   17364:	mov	r4, r0
   17368:	bl	2bb58 <flatcc_verify_field@@Base>
   1736c:	cmp	r0, #0
   17370:	popne	{r4, pc}
   17374:	mov	r3, #4
   17378:	mov	r0, r4
   1737c:	mov	r2, r3
   17380:	mov	r1, #1
   17384:	pop	{r4, lr}
   17388:	b	2bb58 <flatcc_verify_field@@Base>
   1738c:	mov	r3, #1
   17390:	push	{r4, lr}
   17394:	mov	r2, r3
   17398:	mov	r1, #0
   1739c:	mov	r4, r0
   173a0:	bl	2bb58 <flatcc_verify_field@@Base>
   173a4:	cmp	r0, #0
   173a8:	popne	{r4, pc}
   173ac:	mov	r3, #1
   173b0:	mov	r2, r3
   173b4:	mov	r1, r3
   173b8:	mov	r0, r4
   173bc:	bl	2bb58 <flatcc_verify_field@@Base>
   173c0:	cmp	r0, #0
   173c4:	popne	{r4, pc}
   173c8:	mov	r3, #1
   173cc:	mov	r2, r3
   173d0:	mov	r1, #2
   173d4:	mov	r0, r4
   173d8:	bl	2bb58 <flatcc_verify_field@@Base>
   173dc:	cmp	r0, #0
   173e0:	popne	{r4, pc}
   173e4:	mov	r3, #1
   173e8:	mov	r0, r4
   173ec:	mov	r2, r3
   173f0:	mov	r1, #3
   173f4:	pop	{r4, lr}
   173f8:	b	2bb58 <flatcc_verify_field@@Base>
   173fc:	mov	r2, #0
   17400:	push	{r4, lr}
   17404:	mov	r1, r2
   17408:	mov	r4, r0
   1740c:	bl	2bbc8 <flatcc_verify_string_field@@Base>
   17410:	cmp	r0, #0
   17414:	popne	{r4, pc}
   17418:	mov	r3, #8
   1741c:	mov	r2, r3
   17420:	mov	r1, #1
   17424:	mov	r0, r4
   17428:	bl	2bb58 <flatcc_verify_field@@Base>
   1742c:	cmp	r0, #0
   17430:	popne	{r4, pc}
   17434:	mov	r3, #2
   17438:	mov	r0, r4
   1743c:	mov	r2, r3
   17440:	mov	r1, r3
   17444:	pop	{r4, lr}
   17448:	b	2bb58 <flatcc_verify_field@@Base>
   1744c:	mov	r2, #0
   17450:	push	{r4, lr}
   17454:	mov	r1, r2
   17458:	mov	r4, r0
   1745c:	bl	2bbc8 <flatcc_verify_string_field@@Base>
   17460:	cmp	r0, #0
   17464:	popne	{r4, pc}
   17468:	mov	r3, #4
   1746c:	mov	r2, r3
   17470:	mov	r1, #1
   17474:	mov	r0, r4
   17478:	bl	2bb58 <flatcc_verify_field@@Base>
   1747c:	cmp	r0, #0
   17480:	popne	{r4, pc}
   17484:	mov	r2, r0
   17488:	mov	r1, #2
   1748c:	mov	r0, r4
   17490:	bl	2bbc8 <flatcc_verify_string_field@@Base>
   17494:	cmp	r0, #0
   17498:	popne	{r4, pc}
   1749c:	mov	r3, #8
   174a0:	mov	r2, r3
   174a4:	mov	r1, #3
   174a8:	mov	r0, r4
   174ac:	bl	2bb58 <flatcc_verify_field@@Base>
   174b0:	cmp	r0, #0
   174b4:	popne	{r4, pc}
   174b8:	mov	r2, r0
   174bc:	mov	r1, #4
   174c0:	mov	r0, r4
   174c4:	bl	2bbc8 <flatcc_verify_string_field@@Base>
   174c8:	cmp	r0, #0
   174cc:	popne	{r4, pc}
   174d0:	mov	r3, #8
   174d4:	mov	r2, r3
   174d8:	mov	r1, #5
   174dc:	mov	r0, r4
   174e0:	bl	2bb58 <flatcc_verify_field@@Base>
   174e4:	cmp	r0, #0
   174e8:	popne	{r4, pc}
   174ec:	mov	r3, #4
   174f0:	mov	r2, r3
   174f4:	mov	r1, #6
   174f8:	mov	r0, r4
   174fc:	bl	2bb58 <flatcc_verify_field@@Base>
   17500:	cmp	r0, #0
   17504:	popne	{r4, pc}
   17508:	mov	r3, #8
   1750c:	mov	r2, r3
   17510:	mov	r1, #7
   17514:	mov	r0, r4
   17518:	bl	2bb58 <flatcc_verify_field@@Base>
   1751c:	cmp	r0, #0
   17520:	popne	{r4, pc}
   17524:	mov	r3, #4
   17528:	mov	r0, r4
   1752c:	mov	r2, r3
   17530:	mov	r1, #8
   17534:	pop	{r4, lr}
   17538:	b	2bb58 <flatcc_verify_field@@Base>
   1753c:	mov	r2, #0
   17540:	push	{r4, lr}
   17544:	mov	r1, r2
   17548:	ldr	r3, [pc, #64]	; 17590 <_start@@Base+0x1ff0>
   1754c:	mov	r4, r0
   17550:	bl	2bf50 <flatcc_verify_table_field@@Base>
   17554:	cmp	r0, #0
   17558:	popne	{r4, pc}
   1755c:	mov	r2, r0
   17560:	ldr	r3, [pc, #44]	; 17594 <_start@@Base+0x1ff4>
   17564:	mov	r1, #1
   17568:	mov	r0, r4
   1756c:	bl	2bf50 <flatcc_verify_table_field@@Base>
   17570:	cmp	r0, #0
   17574:	popne	{r4, pc}
   17578:	mov	r2, r0
   1757c:	ldr	r3, [pc, #20]	; 17598 <_start@@Base+0x1ff8>
   17580:	mov	r0, r4
   17584:	mov	r1, #2
   17588:	pop	{r4, lr}
   1758c:	b	2bf50 <flatcc_verify_table_field@@Base>
   17590:	andeq	r7, r1, ip, asr #8
   17594:	andeq	r8, r1, ip, lsr #8
   17598:	andeq	r7, r1, r4, asr r3
   1759c:	push	{r4, r5, r6, r7, r8, lr}
   175a0:	mov	r3, #16
   175a4:	sub	sp, sp, #8
   175a8:	mov	r2, #32
   175ac:	mov	r1, #0
   175b0:	mov	r4, r0
   175b4:	bl	2bb58 <flatcc_verify_field@@Base>
   175b8:	cmp	r0, #0
   175bc:	beq	175c8 <_start@@Base+0x2028>
   175c0:	add	sp, sp, #8
   175c4:	pop	{r4, r5, r6, r7, r8, pc}
   175c8:	mov	r3, #2
   175cc:	mov	r2, r3
   175d0:	mov	r1, r3
   175d4:	mov	r0, r4
   175d8:	bl	2bb58 <flatcc_verify_field@@Base>
   175dc:	cmp	r0, #0
   175e0:	bne	175c0 <_start@@Base+0x2020>
   175e4:	mov	r3, #2
   175e8:	mov	r2, r3
   175ec:	mov	r1, #1
   175f0:	mov	r0, r4
   175f4:	bl	2bb58 <flatcc_verify_field@@Base>
   175f8:	cmp	r0, #0
   175fc:	bne	175c0 <_start@@Base+0x2020>
   17600:	mov	r2, #1
   17604:	mov	r1, #3
   17608:	mov	r0, r4
   1760c:	bl	2bbc8 <flatcc_verify_string_field@@Base>
   17610:	cmp	r0, #0
   17614:	bne	175c0 <_start@@Base+0x2020>
   17618:	mov	r3, #1
   1761c:	mov	r2, r3
   17620:	mov	r1, #6
   17624:	mov	r0, r4
   17628:	bl	2bb58 <flatcc_verify_field@@Base>
   1762c:	cmp	r0, #0
   17630:	bne	175c0 <_start@@Base+0x2020>
   17634:	mov	r5, #1
   17638:	mvn	r6, #0
   1763c:	mov	r2, r0
   17640:	stm	sp, {r5, r6}
   17644:	mov	r3, r5
   17648:	mov	r1, #5
   1764c:	mov	r0, r4
   17650:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17654:	cmp	r0, #0
   17658:	bne	175c0 <_start@@Base+0x2020>
   1765c:	mov	r2, r0
   17660:	ldr	r3, [pc, #840]	; 179b0 <_start@@Base+0x2410>
   17664:	mov	r1, #11
   17668:	mov	r0, r4
   1766c:	bl	2c0b4 <flatcc_verify_table_vector_field@@Base>
   17670:	cmp	r0, #0
   17674:	bne	175c0 <_start@@Base+0x2020>
   17678:	mov	r2, r0
   1767c:	mov	r1, #10
   17680:	mov	r0, r4
   17684:	bl	2bd9c <flatcc_verify_string_vector_field@@Base>
   17688:	cmp	r0, #0
   1768c:	bne	175c0 <_start@@Base+0x2020>
   17690:	mov	r2, r0
   17694:	mov	r1, #28
   17698:	mov	r0, r4
   1769c:	bl	2bd9c <flatcc_verify_string_vector_field@@Base>
   176a0:	cmp	r0, #0
   176a4:	bne	175c0 <_start@@Base+0x2020>
   176a8:	mov	r2, r0
   176ac:	stm	sp, {r5, r6}
   176b0:	mov	r3, r5
   176b4:	mov	r1, #24
   176b8:	mov	r0, r4
   176bc:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   176c0:	cmp	r0, #0
   176c4:	bne	175c0 <_start@@Base+0x2020>
   176c8:	mvn	r3, #-536870912	; 0xe0000000
   176cc:	mov	r5, #4
   176d0:	str	r3, [sp, #4]
   176d4:	str	r5, [sp]
   176d8:	mov	r3, #8
   176dc:	mov	r2, #0
   176e0:	mov	r1, #29
   176e4:	mov	r0, r4
   176e8:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   176ec:	cmp	r0, #0
   176f0:	bne	175c0 <_start@@Base+0x2020>
   176f4:	ldr	r7, [pc, #692]	; 179b0 <_start@@Base+0x2410>
   176f8:	mov	r2, r0
   176fc:	mov	r3, r7
   17700:	mov	r1, #12
   17704:	mov	r0, r4
   17708:	bl	2bf50 <flatcc_verify_table_field@@Base>
   1770c:	cmp	r0, #0
   17710:	bne	175c0 <_start@@Base+0x2020>
   17714:	mov	r2, r0
   17718:	ldr	r3, [pc, #660]	; 179b4 <_start@@Base+0x2414>
   1771c:	mov	r1, #8
   17720:	mov	r0, r4
   17724:	bl	2cfe4 <flatcc_verify_union_field@@Base>
   17728:	cmp	r0, #0
   1772c:	bne	175c0 <_start@@Base+0x2020>
   17730:	mvn	r8, #-1073741824	; 0xc0000000
   17734:	mov	r6, #2
   17738:	mov	r2, r0
   1773c:	stm	sp, {r6, r8}
   17740:	mov	r3, r5
   17744:	mov	r1, #9
   17748:	mov	r0, r4
   1774c:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17750:	cmp	r0, #0
   17754:	bne	175c0 <_start@@Base+0x2020>
   17758:	mov	r2, r0
   1775c:	stm	sp, {r6, r8}
   17760:	mov	r3, r5
   17764:	mov	r1, #31
   17768:	mov	r0, r4
   1776c:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17770:	cmp	r0, #0
   17774:	bne	175c0 <_start@@Base+0x2020>
   17778:	mov	r6, #1
   1777c:	mov	r3, r0
   17780:	mov	r2, r0
   17784:	stm	sp, {r6, r7}
   17788:	mov	r1, #13
   1778c:	mov	r0, r4
   17790:	bl	2cd54 <flatcc_verify_table_as_nested_root@@Base>
   17794:	cmp	r0, #0
   17798:	bne	175c0 <_start@@Base+0x2020>
   1779c:	mov	r2, r0
   177a0:	ldr	r3, [pc, #528]	; 179b8 <_start@@Base+0x2418>
   177a4:	mov	r1, #14
   177a8:	mov	r0, r4
   177ac:	bl	2bf50 <flatcc_verify_table_field@@Base>
   177b0:	cmp	r0, #0
   177b4:	bne	175c0 <_start@@Base+0x2020>
   177b8:	mov	r3, r6
   177bc:	mov	r2, r6
   177c0:	mov	r1, #15
   177c4:	mov	r0, r4
   177c8:	bl	2bb58 <flatcc_verify_field@@Base>
   177cc:	cmp	r0, #0
   177d0:	bne	175c0 <_start@@Base+0x2020>
   177d4:	mov	r3, r5
   177d8:	mov	r2, r5
   177dc:	mov	r1, #16
   177e0:	mov	r0, r4
   177e4:	bl	2bb58 <flatcc_verify_field@@Base>
   177e8:	cmp	r0, #0
   177ec:	bne	175c0 <_start@@Base+0x2020>
   177f0:	mov	r3, r5
   177f4:	mov	r2, r5
   177f8:	mov	r1, #17
   177fc:	mov	r0, r4
   17800:	bl	2bb58 <flatcc_verify_field@@Base>
   17804:	cmp	r0, #0
   17808:	bne	175c0 <_start@@Base+0x2020>
   1780c:	mov	r3, #8
   17810:	mov	r2, r3
   17814:	mov	r1, #18
   17818:	mov	r0, r4
   1781c:	bl	2bb58 <flatcc_verify_field@@Base>
   17820:	cmp	r0, #0
   17824:	bne	175c0 <_start@@Base+0x2020>
   17828:	mov	r3, #8
   1782c:	mov	r2, r3
   17830:	mov	r1, #19
   17834:	mov	r0, r4
   17838:	bl	2bb58 <flatcc_verify_field@@Base>
   1783c:	cmp	r0, #0
   17840:	bne	175c0 <_start@@Base+0x2020>
   17844:	mov	r3, r5
   17848:	mov	r2, r5
   1784c:	mov	r1, #20
   17850:	mov	r0, r4
   17854:	bl	2bb58 <flatcc_verify_field@@Base>
   17858:	cmp	r0, #0
   1785c:	bne	175c0 <_start@@Base+0x2020>
   17860:	mov	r3, r5
   17864:	mov	r2, r5
   17868:	mov	r1, #21
   1786c:	mov	r0, r4
   17870:	bl	2bb58 <flatcc_verify_field@@Base>
   17874:	cmp	r0, #0
   17878:	bne	175c0 <_start@@Base+0x2020>
   1787c:	mov	r3, #8
   17880:	mov	r2, r3
   17884:	mov	r1, #22
   17888:	mov	r0, r4
   1788c:	bl	2bb58 <flatcc_verify_field@@Base>
   17890:	cmp	r0, #0
   17894:	bne	175c0 <_start@@Base+0x2020>
   17898:	mov	r3, #8
   1789c:	mov	r2, r3
   178a0:	mov	r1, #23
   178a4:	mov	r0, r4
   178a8:	bl	2bb58 <flatcc_verify_field@@Base>
   178ac:	cmp	r0, #0
   178b0:	bne	175c0 <_start@@Base+0x2020>
   178b4:	mov	r3, r5
   178b8:	mov	r2, r5
   178bc:	mov	r1, #25
   178c0:	mov	r0, r4
   178c4:	bl	2bb58 <flatcc_verify_field@@Base>
   178c8:	cmp	r0, #0
   178cc:	bne	175c0 <_start@@Base+0x2020>
   178d0:	mov	r3, r5
   178d4:	mov	r2, r5
   178d8:	mov	r1, #26
   178dc:	mov	r0, r4
   178e0:	bl	2bb58 <flatcc_verify_field@@Base>
   178e4:	cmp	r0, #0
   178e8:	bne	175c0 <_start@@Base+0x2020>
   178ec:	mov	r3, r5
   178f0:	mov	r2, r5
   178f4:	mov	r1, #27
   178f8:	mov	r0, r4
   178fc:	bl	2bb58 <flatcc_verify_field@@Base>
   17900:	cmp	r0, #0
   17904:	bne	175c0 <_start@@Base+0x2020>
   17908:	mvn	r1, #0
   1790c:	mov	r2, r0
   17910:	str	r1, [sp, #4]
   17914:	mov	r3, r6
   17918:	str	r6, [sp]
   1791c:	mov	r1, #30
   17920:	mov	r0, r4
   17924:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17928:	cmp	r0, #0
   1792c:	bne	175c0 <_start@@Base+0x2020>
   17930:	mov	r5, #8
   17934:	mvn	r6, #-536870912	; 0xe0000000
   17938:	mov	r3, r5
   1793c:	stm	sp, {r5, r6}
   17940:	mov	r2, #0
   17944:	mov	r1, #32
   17948:	mov	r0, r4
   1794c:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17950:	cmp	r0, #0
   17954:	bne	175c0 <_start@@Base+0x2020>
   17958:	mov	r2, r0
   1795c:	stm	sp, {r5, r6}
   17960:	mov	r3, r5
   17964:	mov	r1, #33	; 0x21
   17968:	mov	r0, r4
   1796c:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17970:	cmp	r0, #0
   17974:	bne	175c0 <_start@@Base+0x2020>
   17978:	mov	r2, r0
   1797c:	ldr	r3, [pc, #56]	; 179bc <_start@@Base+0x241c>
   17980:	mov	r1, #34	; 0x22
   17984:	mov	r0, r4
   17988:	bl	2bf50 <flatcc_verify_table_field@@Base>
   1798c:	cmp	r0, #0
   17990:	bne	175c0 <_start@@Base+0x2020>
   17994:	mov	r2, r0
   17998:	ldr	r3, [pc, #32]	; 179c0 <_start@@Base+0x2420>
   1799c:	mov	r0, r4
   179a0:	mov	r1, #35	; 0x23
   179a4:	add	sp, sp, #8
   179a8:	pop	{r4, r5, r6, r7, r8, lr}
   179ac:	b	2bf50 <flatcc_verify_table_field@@Base>
   179b0:	muleq	r1, ip, r5
   179b4:	andeq	r7, r1, ip, asr #20
   179b8:	strdeq	r7, [r1], -ip
   179bc:	andeq	r7, r1, ip, ror #28
   179c0:	andeq	r7, r1, r4, asr #19
   179c4:	push	{r4, r5, r6, lr}
   179c8:	mov	r4, #1
   179cc:	sub	sp, sp, #8
   179d0:	mvn	r5, #0
   179d4:	mov	r2, #0
   179d8:	mov	r1, r2
   179dc:	stm	sp, {r4, r5}
   179e0:	mov	r3, r4
   179e4:	mov	r6, r0
   179e8:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   179ec:	subs	r2, r0, #0
   179f0:	beq	17a00 <_start@@Base+0x2460>
   179f4:	mov	r0, r2
   179f8:	add	sp, sp, #8
   179fc:	pop	{r4, r5, r6, pc}
   17a00:	stm	sp, {r4, r5}
   17a04:	mov	r3, r4
   17a08:	mov	r1, r4
   17a0c:	mov	r0, r6
   17a10:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   17a14:	subs	r2, r0, #0
   17a18:	bne	179f4 <_start@@Base+0x2454>
   17a1c:	ldr	r3, [pc, #36]	; 17a48 <_start@@Base+0x24a8>
   17a20:	str	r4, [sp]
   17a24:	str	r3, [sp, #4]
   17a28:	mov	r0, r6
   17a2c:	mov	r3, r2
   17a30:	mov	r1, #2
   17a34:	bl	2cd54 <flatcc_verify_table_as_nested_root@@Base>
   17a38:	mov	r2, r0
   17a3c:	mov	r0, r2
   17a40:	add	sp, sp, #8
   17a44:	pop	{r4, r5, r6, pc}
   17a48:	muleq	r1, ip, r5
   17a4c:	ldrb	r3, [r0, #12]
   17a50:	sub	r3, r3, #1
   17a54:	cmp	r3, #3
   17a58:	ldrls	pc, [pc, r3, lsl #2]
   17a5c:	b	17a90 <_start@@Base+0x24f0>
   17a60:	andeq	r7, r1, r8, lsl #21
   17a64:	andeq	r7, r1, r0, lsl #21
   17a68:	andeq	r7, r1, r8, ror sl
   17a6c:	andeq	r7, r1, r0, ror sl
   17a70:	ldr	r1, [pc, #32]	; 17a98 <_start@@Base+0x24f8>
   17a74:	b	2c3a4 <flatcc_verify_union_table@@Base>
   17a78:	ldr	r1, [pc, #28]	; 17a9c <_start@@Base+0x24fc>
   17a7c:	b	2c3a4 <flatcc_verify_union_table@@Base>
   17a80:	ldr	r1, [pc, #24]	; 17aa0 <_start@@Base+0x2500>
   17a84:	b	2c3a4 <flatcc_verify_union_table@@Base>
   17a88:	ldr	r1, [pc, #20]	; 17aa4 <_start@@Base+0x2504>
   17a8c:	b	2c3a4 <flatcc_verify_union_table@@Base>
   17a90:	mov	r0, #0
   17a94:	bx	lr
   17a98:	andeq	r7, r1, r8, lsr #21
   17a9c:	andeq	r5, r1, ip, asr #16
   17aa0:	andeq	r7, r1, ip, lsl #7
   17aa4:	muleq	r1, ip, r5
   17aa8:	mov	r2, #0
   17aac:	push	{r4, lr}
   17ab0:	mov	r1, r2
   17ab4:	ldr	r3, [pc, #64]	; 17afc <_start@@Base+0x255c>
   17ab8:	mov	r4, r0
   17abc:	bl	2bf50 <flatcc_verify_table_field@@Base>
   17ac0:	cmp	r0, #0
   17ac4:	popne	{r4, pc}
   17ac8:	mov	r2, r0
   17acc:	ldr	r3, [pc, #44]	; 17b00 <_start@@Base+0x2560>
   17ad0:	mov	r1, #1
   17ad4:	mov	r0, r4
   17ad8:	bl	2bf50 <flatcc_verify_table_field@@Base>
   17adc:	cmp	r0, #0
   17ae0:	popne	{r4, pc}
   17ae4:	mov	r2, r0
   17ae8:	ldr	r3, [pc, #20]	; 17b04 <_start@@Base+0x2564>
   17aec:	mov	r0, r4
   17af0:	mov	r1, #3
   17af4:	pop	{r4, lr}
   17af8:	b	2d150 <flatcc_verify_union_vector_field@@Base>
   17afc:	andeq	r7, r1, ip, lsr r5
   17b00:	andeq	r7, r1, r8, lsl #22
   17b04:	andeq	r7, r1, ip, asr #20
   17b08:	push	{r4, lr}
   17b0c:	mov	r2, #0
   17b10:	ldr	r3, [pc, #124]	; 17b94 <_start@@Base+0x25f4>
   17b14:	mov	r1, #1
   17b18:	mov	r4, r0
   17b1c:	bl	2cfe4 <flatcc_verify_union_field@@Base>
   17b20:	cmp	r0, #0
   17b24:	popne	{r4, pc}
   17b28:	mov	r2, r0
   17b2c:	ldr	r3, [pc, #96]	; 17b94 <_start@@Base+0x25f4>
   17b30:	mov	r1, #3
   17b34:	mov	r0, r4
   17b38:	bl	2cfe4 <flatcc_verify_union_field@@Base>
   17b3c:	cmp	r0, #0
   17b40:	popne	{r4, pc}
   17b44:	mov	r2, r0
   17b48:	ldr	r3, [pc, #68]	; 17b94 <_start@@Base+0x25f4>
   17b4c:	mov	r1, #5
   17b50:	mov	r0, r4
   17b54:	bl	2cfe4 <flatcc_verify_union_field@@Base>
   17b58:	cmp	r0, #0
   17b5c:	popne	{r4, pc}
   17b60:	mov	r2, r0
   17b64:	ldr	r3, [pc, #40]	; 17b94 <_start@@Base+0x25f4>
   17b68:	mov	r1, #7
   17b6c:	mov	r0, r4
   17b70:	bl	2cfe4 <flatcc_verify_union_field@@Base>
   17b74:	cmp	r0, #0
   17b78:	popne	{r4, pc}
   17b7c:	mov	r2, r0
   17b80:	ldr	r3, [pc, #12]	; 17b94 <_start@@Base+0x25f4>
   17b84:	mov	r0, r4
   17b88:	mov	r1, #9
   17b8c:	pop	{r4, lr}
   17b90:	b	2d150 <flatcc_verify_union_vector_field@@Base>
   17b94:	muleq	r1, r8, fp
   17b98:	ldrb	r3, [r0, #12]
   17b9c:	cmp	r3, #9
   17ba0:	beq	17bdc <_start@@Base+0x263c>
   17ba4:	bls	17bc0 <_start@@Base+0x2620>
   17ba8:	cmp	r3, #11
   17bac:	beq	17bbc <_start@@Base+0x261c>
   17bb0:	bcc	17bdc <_start@@Base+0x263c>
   17bb4:	cmp	r3, #255	; 0xff
   17bb8:	bne	17be8 <_start@@Base+0x2648>
   17bbc:	b	2c4f8 <flatcc_verify_union_string@@Base>
   17bc0:	cmp	r3, #2
   17bc4:	beq	17bf0 <_start@@Base+0x2650>
   17bc8:	cmp	r3, #8
   17bcc:	bne	17be8 <_start@@Base+0x2648>
   17bd0:	mov	r2, #2
   17bd4:	mov	r1, r2
   17bd8:	b	2c49c <flatcc_verify_union_struct@@Base>
   17bdc:	mov	r2, #4
   17be0:	mov	r1, r2
   17be4:	b	2c49c <flatcc_verify_union_struct@@Base>
   17be8:	mov	r0, #0
   17bec:	bx	lr
   17bf0:	ldr	r1, [pc]	; 17bf8 <_start@@Base+0x2658>
   17bf4:	b	2c3a4 <flatcc_verify_union_table@@Base>
   17bf8:	andeq	r5, r1, r4, asr r8
   17bfc:	sub	r1, r1, #1
   17c00:	cmp	r1, #3
   17c04:	ldrls	pc, [pc, r1, lsl #2]
   17c08:	b	17c4c <_start@@Base+0x26ac>
   17c0c:	andeq	r7, r1, r0, asr #24
   17c10:	andeq	r7, r1, r4, lsr ip
   17c14:	andeq	r7, r1, r8, lsr #24
   17c18:	andeq	r7, r1, ip, lsl ip
   17c1c:	mov	r2, #3
   17c20:	ldr	r1, [pc, #48]	; 17c58 <_start@@Base+0x26b8>
   17c24:	b	366a8 <flatcc_json_printer_enum@@Base>
   17c28:	mov	r2, #8
   17c2c:	ldr	r1, [pc, #40]	; 17c5c <_start@@Base+0x26bc>
   17c30:	b	366a8 <flatcc_json_printer_enum@@Base>
   17c34:	mov	r2, #23
   17c38:	ldr	r1, [pc, #32]	; 17c60 <_start@@Base+0x26c0>
   17c3c:	b	366a8 <flatcc_json_printer_enum@@Base>
   17c40:	mov	r2, #7
   17c44:	ldr	r1, [pc, #24]	; 17c64 <_start@@Base+0x26c4>
   17c48:	b	366a8 <flatcc_json_printer_enum@@Base>
   17c4c:	mov	r2, #4
   17c50:	ldr	r1, [pc, #16]	; 17c68 <_start@@Base+0x26c8>
   17c54:	b	366a8 <flatcc_json_printer_enum@@Base>
   17c58:	andeq	r1, r4, ip, lsl #27
   17c5c:	andeq	r1, r4, r0, lsl #27
   17c60:	andeq	r1, r4, r8, ror #26
   17c64:	andeq	r1, r4, r0, ror #26
   17c68:	andeq	r6, r4, r0, ror #11
   17c6c:	push	{r4, r5, r6, r7, lr}
   17c70:	mov	r4, #0
   17c74:	sub	sp, sp, #28
   17c78:	mov	r5, #0
   17c7c:	cmp	r1, r2
   17c80:	strd	r4, [r3]
   17c84:	strd	r4, [sp, #16]
   17c88:	str	r4, [sp, #12]
   17c8c:	moveq	r0, r1
   17c90:	beq	17ce4 <_start@@Base+0x2744>
   17c94:	mov	r5, r3
   17c98:	add	r3, sp, #16
   17c9c:	str	r3, [sp]
   17ca0:	add	r3, sp, #12
   17ca4:	mov	r4, r1
   17ca8:	mov	r6, r2
   17cac:	mov	r7, r0
   17cb0:	bl	31f80 <flatcc_json_parser_integer@@Base>
   17cb4:	cmp	r4, r0
   17cb8:	beq	17ce4 <_start@@Base+0x2744>
   17cbc:	ldr	r1, [sp, #12]
   17cc0:	ldrd	r2, [sp, #16]
   17cc4:	cmp	r1, #0
   17cc8:	beq	17cec <_start@@Base+0x274c>
   17ccc:	cmp	r3, #-2147483648	; 0x80000000
   17cd0:	cmpeq	r2, #0
   17cd4:	bhi	17d04 <_start@@Base+0x2764>
   17cd8:	rsbs	r2, r2, #0
   17cdc:	rsc	r3, r3, #0
   17ce0:	strd	r2, [r5]
   17ce4:	add	sp, sp, #28
   17ce8:	pop	{r4, r5, r6, r7, pc}
   17cec:	cmp	r2, #0
   17cf0:	sbcs	r1, r3, #0
   17cf4:	blt	17d1c <_start@@Base+0x277c>
   17cf8:	strd	r2, [r5]
   17cfc:	add	sp, sp, #28
   17d00:	pop	{r4, r5, r6, r7, pc}
   17d04:	mov	r1, r0
   17d08:	mov	r2, r6
   17d0c:	mov	r0, r7
   17d10:	mov	r3, #8
   17d14:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   17d18:	b	17ce4 <_start@@Base+0x2744>
   17d1c:	mov	r1, r0
   17d20:	mov	r2, r6
   17d24:	mov	r0, r7
   17d28:	mov	r3, #7
   17d2c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   17d30:	b	17ce4 <_start@@Base+0x2744>
   17d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d38:	mov	r5, r1
   17d3c:	sub	sp, sp, #28
   17d40:	mov	r6, r2
   17d44:	mov	r7, r0
   17d48:	ldr	r1, [pc, #260]	; 17e54 <_start@@Base+0x28b4>
   17d4c:	mov	r0, r2
   17d50:	ldr	r2, [pc, #256]	; 17e58 <_start@@Base+0x28b8>
   17d54:	bl	145ac <fprintf@plt>
   17d58:	cmp	r5, #0
   17d5c:	beq	17e4c <_start@@Base+0x28ac>
   17d60:	mov	r9, #0
   17d64:	ldr	fp, [pc, #240]	; 17e5c <_start@@Base+0x28bc>
   17d68:	ldr	sl, [pc, #240]	; 17e60 <_start@@Base+0x28c0>
   17d6c:	sub	r7, r7, #1
   17d70:	add	r8, sp, #4
   17d74:	b	17dd4 <_start@@Base+0x2834>
   17d78:	cmp	r9, #0
   17d7c:	beq	17d84 <_start@@Base+0x27e4>
   17d80:	bl	145ac <fprintf@plt>
   17d84:	mov	r2, r9
   17d88:	ldr	r1, [pc, #212]	; 17e64 <_start@@Base+0x28c4>
   17d8c:	mov	r0, r6
   17d90:	bl	145ac <fprintf@plt>
   17d94:	ldrb	r2, [r7, #1]
   17d98:	mov	r1, sl
   17d9c:	mov	r0, r6
   17da0:	bl	145ac <fprintf@plt>
   17da4:	ldrb	r2, [r7, #1]!
   17da8:	add	r3, sp, #24
   17dac:	add	r3, r3, r4
   17db0:	sub	r1, r2, #32
   17db4:	cmp	r1, #94	; 0x5e
   17db8:	add	r9, r9, #1
   17dbc:	movhi	r2, #46	; 0x2e
   17dc0:	mov	r1, #0
   17dc4:	cmp	r9, r5
   17dc8:	strb	r1, [r3, #-19]	; 0xffffffed
   17dcc:	strb	r2, [r3, #-20]	; 0xffffffec
   17dd0:	beq	17e00 <_start@@Base+0x2860>
   17dd4:	ands	r4, r9, #15
   17dd8:	mov	r2, r8
   17ddc:	mov	r1, fp
   17de0:	mov	r0, r6
   17de4:	beq	17d78 <_start@@Base+0x27d8>
   17de8:	tst	r9, #7
   17dec:	bne	17d94 <_start@@Base+0x27f4>
   17df0:	mov	r1, r6
   17df4:	mov	r0, #32
   17df8:	bl	145f4 <fputc@plt>
   17dfc:	b	17d94 <_start@@Base+0x27f4>
   17e00:	tst	r5, #15
   17e04:	beq	17e34 <_start@@Base+0x2894>
   17e08:	ldr	r9, [pc, #88]	; 17e68 <_start@@Base+0x28c8>
   17e0c:	mov	r7, #3
   17e10:	mov	r4, #1
   17e14:	add	r5, r5, #1
   17e18:	mov	r3, r6
   17e1c:	mov	r2, r7
   17e20:	mov	r1, r4
   17e24:	mov	r0, r9
   17e28:	bl	14570 <fwrite@plt>
   17e2c:	tst	r5, #15
   17e30:	bne	17e14 <_start@@Base+0x2874>
   17e34:	mov	r2, r8
   17e38:	mov	r0, r6
   17e3c:	ldr	r1, [pc, #24]	; 17e5c <_start@@Base+0x28bc>
   17e40:	bl	145ac <fprintf@plt>
   17e44:	add	sp, sp, #28
   17e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e4c:	add	r8, sp, #4
   17e50:	b	17e34 <_start@@Base+0x2894>
   17e54:	andeq	r1, r4, r0, lsr #27
   17e58:	muleq	r4, r0, sp
   17e5c:	andeq	r1, r4, r8, lsr #27
   17e60:			; <UNDEFINED> instruction: 0x00041db8
   17e64:			; <UNDEFINED> instruction: 0x00041db0
   17e68:	andeq	r1, r4, r0, asr #27
   17e6c:	mov	r0, #0
   17e70:	bx	lr
   17e74:	bx	lr
   17e78:	push	{r4, r5, r6, r7, r8, lr}
   17e7c:	sub	sp, sp, #352	; 0x160
   17e80:	mov	r5, r0
   17e84:	add	r0, sp, #120	; 0x78
   17e88:	mov	r6, r1
   17e8c:	mov	r8, r2
   17e90:	mov	r7, r3
   17e94:	bl	261ac <flatcc_builder_init@@Base>
   17e98:	mov	r1, #0
   17e9c:	add	r0, sp, #72	; 0x48
   17ea0:	bl	40e04 <flatcc_json_printer_init_dynamic_buffer@@Base>
   17ea4:	mov	r4, #0
   17ea8:	mov	r0, r6
   17eac:	str	r4, [sp, #98]	; 0x62
   17eb0:	bl	145a0 <strlen@plt>
   17eb4:	ldr	r2, [r5, #4]
   17eb8:	ldr	r3, [r5]
   17ebc:	add	r1, sp, #28
   17ec0:	str	r2, [sp, #8]
   17ec4:	str	r3, [sp, #4]
   17ec8:	str	r4, [sp]
   17ecc:	mov	r2, r6
   17ed0:	mov	r3, r0
   17ed4:	add	r0, sp, #120	; 0x78
   17ed8:	bl	33d14 <flatcc_json_parser_table_as_root@@Base>
   17edc:	cmp	r0, r4
   17ee0:	beq	17f84 <_start@@Base+0x29e4>
   17ee4:	ldr	r5, [pc, #404]	; 18080 <_start@@Base+0x2ae0>
   17ee8:	ldr	r8, [r5]
   17eec:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   17ef0:	mov	r2, r7
   17ef4:	ldr	r1, [pc, #392]	; 18084 <_start@@Base+0x2ae4>
   17ef8:	mov	r3, r0
   17efc:	mov	r0, r8
   17f00:	bl	145ac <fprintf@plt>
   17f04:	mov	r2, r6
   17f08:	ldr	r0, [r5]
   17f0c:	ldr	r1, [pc, #372]	; 18088 <_start@@Base+0x2ae8>
   17f10:	bl	145ac <fprintf@plt>
   17f14:	ldr	r3, [sp, #48]	; 0x30
   17f18:	cmp	r3, #1
   17f1c:	movgt	r6, #32
   17f20:	ble	17f44 <_start@@Base+0x29a4>
   17f24:	ldr	r1, [r5]
   17f28:	mov	r0, r6
   17f2c:	bl	145f4 <fputc@plt>
   17f30:	ldr	r3, [sp, #48]	; 0x30
   17f34:	add	r4, r4, #1
   17f38:	sub	r3, r3, #1
   17f3c:	cmp	r4, r3
   17f40:	blt	17f24 <_start@@Base+0x2984>
   17f44:	ldr	r3, [r5]
   17f48:	mov	r2, #2
   17f4c:	mov	r1, #1
   17f50:	ldr	r0, [pc, #308]	; 1808c <_start@@Base+0x2aec>
   17f54:	bl	14570 <fwrite@plt>
   17f58:	mov	r4, #0
   17f5c:	mvn	r5, #0
   17f60:	mov	r0, r4
   17f64:	bl	2b570 <flatcc_builder_aligned_free@@Base>
   17f68:	add	r0, sp, #120	; 0x78
   17f6c:	bl	26418 <flatcc_builder_clear@@Base>
   17f70:	add	r0, sp, #72	; 0x48
   17f74:	bl	40f14 <flatcc_json_printer_clear@@Base>
   17f78:	mov	r0, r5
   17f7c:	add	sp, sp, #352	; 0x160
   17f80:	pop	{r4, r5, r6, r7, r8, pc}
   17f84:	add	r1, sp, #20
   17f88:	add	r0, sp, #120	; 0x78
   17f8c:	bl	2b460 <flatcc_builder_finalize_aligned_buffer@@Base>
   17f90:	ldr	r3, [r5, #12]
   17f94:	ldr	r2, [r5]
   17f98:	ldr	r1, [sp, #20]
   17f9c:	mov	r4, r0
   17fa0:	bl	2c85c <flatcc_verify_table_as_root@@Base>
   17fa4:	cmp	r0, #0
   17fa8:	bne	18058 <_start@@Base+0x2ab8>
   17fac:	ldr	r1, [r5, #8]
   17fb0:	ldr	r3, [r5]
   17fb4:	ldr	r2, [sp, #20]
   17fb8:	str	r1, [sp]
   17fbc:	add	r0, sp, #72	; 0x48
   17fc0:	mov	r1, r4
   17fc4:	bl	40810 <flatcc_json_printer_table_as_root@@Base>
   17fc8:	add	r1, sp, #24
   17fcc:	add	r0, sp, #72	; 0x48
   17fd0:	bl	40ea0 <flatcc_json_printer_get_buffer@@Base>
   17fd4:	subs	r6, r0, #0
   17fd8:	beq	17ff0 <_start@@Base+0x2a50>
   17fdc:	mov	r1, r6
   17fe0:	mov	r0, r8
   17fe4:	bl	14528 <strcmp@plt>
   17fe8:	subs	r5, r0, #0
   17fec:	beq	17f60 <_start@@Base+0x29c0>
   17ff0:	ldr	r5, [pc, #136]	; 18080 <_start@@Base+0x2ae0>
   17ff4:	mov	r2, r7
   17ff8:	ldr	r1, [pc, #144]	; 18090 <_start@@Base+0x2af0>
   17ffc:	ldr	r0, [r5]
   18000:	bl	145ac <fprintf@plt>
   18004:	mov	r2, r6
   18008:	ldr	r1, [pc, #120]	; 18088 <_start@@Base+0x2ae8>
   1800c:	ldr	r0, [r5]
   18010:	bl	145ac <fprintf@plt>
   18014:	mov	r2, #10
   18018:	mov	r1, #1
   1801c:	ldr	r3, [r5]
   18020:	ldr	r0, [pc, #108]	; 18094 <_start@@Base+0x2af4>
   18024:	bl	14570 <fwrite@plt>
   18028:	mov	r2, r8
   1802c:	ldr	r0, [r5]
   18030:	ldr	r1, [pc, #80]	; 18088 <_start@@Base+0x2ae8>
   18034:	bl	145ac <fprintf@plt>
   18038:	cmp	r4, #0
   1803c:	beq	18050 <_start@@Base+0x2ab0>
   18040:	ldr	r2, [r5]
   18044:	ldr	r1, [sp, #20]
   18048:	mov	r0, r4
   1804c:	bl	17d34 <_start@@Base+0x2794>
   18050:	mvn	r5, #0
   18054:	b	17f60 <_start@@Base+0x29c0>
   18058:	ldr	r5, [pc, #32]	; 18080 <_start@@Base+0x2ae0>
   1805c:	ldr	r6, [r5]
   18060:	bl	2bb3c <flatcc_verify_error_string@@Base>
   18064:	mov	r3, r7
   18068:	ldr	r2, [pc, #40]	; 18098 <_start@@Base+0x2af8>
   1806c:	ldr	r1, [pc, #40]	; 1809c <_start@@Base+0x2afc>
   18070:	str	r0, [sp]
   18074:	mov	r0, r6
   18078:	bl	145ac <fprintf@plt>
   1807c:	b	18038 <_start@@Base+0x2a98>
   18080:			; <UNDEFINED> instruction: 0x000583b0
   18084:	andeq	r1, r4, r4, asr #27
   18088:	andeq	r1, r4, r0, lsr pc
   1808c:	andeq	r1, r4, r8, ror #27
   18090:	andeq	r1, r4, r0, ror #28
   18094:	muleq	r4, r8, lr
   18098:	andeq	r1, r4, ip, ror #27
   1809c:	andeq	r1, r4, r8, lsr lr
   180a0:	push	{r4, r5, r6, r7, lr}
   180a4:	mov	r4, #0
   180a8:	sub	sp, sp, #28
   180ac:	mov	r5, #0
   180b0:	cmp	r1, r2
   180b4:	strd	r4, [r3]
   180b8:	strd	r4, [sp, #16]
   180bc:	str	r4, [sp, #12]
   180c0:	moveq	r0, r1
   180c4:	beq	18104 <_start@@Base+0x2b64>
   180c8:	mov	r5, r3
   180cc:	add	r3, sp, #16
   180d0:	str	r3, [sp]
   180d4:	add	r3, sp, #12
   180d8:	mov	r4, r1
   180dc:	mov	r6, r2
   180e0:	mov	r7, r0
   180e4:	bl	31f80 <flatcc_json_parser_integer@@Base>
   180e8:	cmp	r4, r0
   180ec:	beq	18104 <_start@@Base+0x2b64>
   180f0:	ldr	r3, [sp, #12]
   180f4:	cmp	r3, #0
   180f8:	bne	1810c <_start@@Base+0x2b6c>
   180fc:	ldrd	r2, [sp, #16]
   18100:	strd	r2, [r5]
   18104:	add	sp, sp, #28
   18108:	pop	{r4, r5, r6, r7, pc}
   1810c:	mov	r1, r0
   18110:	mov	r2, r6
   18114:	mov	r0, r7
   18118:	mov	r3, #8
   1811c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18120:	add	sp, sp, #28
   18124:	pop	{r4, r5, r6, r7, pc}
   18128:	push	{r4, r5, r6, r7, r8, r9, lr}
   1812c:	mov	r6, #0
   18130:	sub	sp, sp, #28
   18134:	mov	r7, #0
   18138:	mov	lr, #0
   1813c:	cmp	r1, r2
   18140:	str	lr, [r3]
   18144:	str	lr, [sp, #12]
   18148:	strd	r6, [sp, #16]
   1814c:	moveq	r0, r1
   18150:	beq	181a4 <_start@@Base+0x2c04>
   18154:	mov	r5, r3
   18158:	add	r3, sp, #16
   1815c:	str	r3, [sp]
   18160:	add	r3, sp, #12
   18164:	mov	r4, r1
   18168:	mov	r7, r0
   1816c:	mov	r6, r2
   18170:	bl	31f80 <flatcc_json_parser_integer@@Base>
   18174:	cmp	r4, r0
   18178:	beq	181a4 <_start@@Base+0x2c04>
   1817c:	ldr	r3, [sp, #12]
   18180:	cmp	r3, #0
   18184:	bne	181ac <_start@@Base+0x2c0c>
   18188:	ldrd	r2, [sp, #16]
   1818c:	mov	r9, #0
   18190:	mvn	r8, #0
   18194:	cmp	r3, r9
   18198:	cmpeq	r2, r8
   1819c:	strls	r2, [r5]
   181a0:	bhi	181c8 <_start@@Base+0x2c28>
   181a4:	add	sp, sp, #28
   181a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   181ac:	mov	r1, r0
   181b0:	mov	r2, r6
   181b4:	mov	r0, r7
   181b8:	mov	r3, #8
   181bc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   181c0:	add	sp, sp, #28
   181c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   181c8:	mov	r1, r0
   181cc:	mov	r2, r6
   181d0:	mov	r0, r7
   181d4:	mov	r3, #7
   181d8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   181dc:	add	sp, sp, #28
   181e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   181e4:	push	{r4, r5, r6, r7, lr}
   181e8:	mov	r6, #0
   181ec:	sub	sp, sp, #28
   181f0:	mov	r7, #0
   181f4:	mov	lr, #0
   181f8:	cmp	r1, r2
   181fc:	strb	lr, [r3]
   18200:	str	lr, [sp, #12]
   18204:	strd	r6, [sp, #16]
   18208:	moveq	r0, r1
   1820c:	beq	18258 <_start@@Base+0x2cb8>
   18210:	mov	r5, r3
   18214:	add	r3, sp, #16
   18218:	str	r3, [sp]
   1821c:	add	r3, sp, #12
   18220:	mov	r4, r1
   18224:	mov	r7, r0
   18228:	mov	r6, r2
   1822c:	bl	31f80 <flatcc_json_parser_integer@@Base>
   18230:	cmp	r4, r0
   18234:	beq	18258 <_start@@Base+0x2cb8>
   18238:	ldr	r3, [sp, #12]
   1823c:	cmp	r3, #0
   18240:	bne	18260 <_start@@Base+0x2cc0>
   18244:	ldrd	r2, [sp, #16]
   18248:	cmp	r3, #0
   1824c:	cmpeq	r2, #255	; 0xff
   18250:	strbls	r2, [r5]
   18254:	bhi	1827c <_start@@Base+0x2cdc>
   18258:	add	sp, sp, #28
   1825c:	pop	{r4, r5, r6, r7, pc}
   18260:	mov	r1, r0
   18264:	mov	r2, r6
   18268:	mov	r0, r7
   1826c:	mov	r3, #8
   18270:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18274:	add	sp, sp, #28
   18278:	pop	{r4, r5, r6, r7, pc}
   1827c:	mov	r1, r0
   18280:	mov	r2, r6
   18284:	mov	r0, r7
   18288:	mov	r3, #7
   1828c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18290:	add	sp, sp, #28
   18294:	pop	{r4, r5, r6, r7, pc}
   18298:	push	{r4, r5, r6, r7, r8, r9, lr}
   1829c:	mov	r6, #0
   182a0:	sub	sp, sp, #28
   182a4:	mov	r7, #0
   182a8:	mov	lr, #0
   182ac:	cmp	r1, r2
   182b0:	str	lr, [r3]
   182b4:	str	lr, [sp, #12]
   182b8:	strd	r6, [sp, #16]
   182bc:	moveq	r0, r1
   182c0:	beq	18310 <_start@@Base+0x2d70>
   182c4:	mov	r5, r3
   182c8:	add	r3, sp, #16
   182cc:	str	r3, [sp]
   182d0:	add	r3, sp, #12
   182d4:	mov	r4, r1
   182d8:	mov	r7, r0
   182dc:	mov	r6, r2
   182e0:	bl	31f80 <flatcc_json_parser_integer@@Base>
   182e4:	cmp	r4, r0
   182e8:	beq	18310 <_start@@Base+0x2d70>
   182ec:	ldr	r1, [sp, #12]
   182f0:	ldrd	r2, [sp, #16]
   182f4:	cmp	r1, #0
   182f8:	beq	18318 <_start@@Base+0x2d78>
   182fc:	cmp	r3, #0
   18300:	cmpeq	r2, #-2147483648	; 0x80000000
   18304:	rsbls	r2, r2, #0
   18308:	strls	r2, [r5]
   1830c:	bhi	18348 <_start@@Base+0x2da8>
   18310:	add	sp, sp, #28
   18314:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18318:	mov	r9, #0
   1831c:	cmp	r3, r9
   18320:	mvn	r8, #-2147483648	; 0x80000000
   18324:	cmpeq	r2, r8
   18328:	strls	r2, [r5]
   1832c:	bls	18310 <_start@@Base+0x2d70>
   18330:	mov	r1, r0
   18334:	mov	r2, r6
   18338:	mov	r0, r7
   1833c:	mov	r3, #7
   18340:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18344:	b	18310 <_start@@Base+0x2d70>
   18348:	mov	r1, r0
   1834c:	mov	r2, r6
   18350:	mov	r0, r7
   18354:	mov	r3, #8
   18358:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1835c:	b	18310 <_start@@Base+0x2d70>
   18360:	push	{r4, r5, r6, r7, r8, r9, lr}
   18364:	mov	r6, #0
   18368:	sub	sp, sp, #28
   1836c:	mov	r7, #0
   18370:	mov	lr, #0
   18374:	cmp	r1, r2
   18378:	strh	lr, [r3]
   1837c:	str	lr, [sp, #12]
   18380:	strd	r6, [sp, #16]
   18384:	moveq	r0, r1
   18388:	beq	183d8 <_start@@Base+0x2e38>
   1838c:	mov	r5, r3
   18390:	add	r3, sp, #16
   18394:	str	r3, [sp]
   18398:	add	r3, sp, #12
   1839c:	mov	r4, r1
   183a0:	mov	r7, r0
   183a4:	mov	r6, r2
   183a8:	bl	31f80 <flatcc_json_parser_integer@@Base>
   183ac:	cmp	r4, r0
   183b0:	beq	183d8 <_start@@Base+0x2e38>
   183b4:	ldr	r1, [sp, #12]
   183b8:	ldrd	r2, [sp, #16]
   183bc:	cmp	r1, #0
   183c0:	beq	183e0 <_start@@Base+0x2e40>
   183c4:	cmp	r3, #0
   183c8:	cmpeq	r2, #32768	; 0x8000
   183cc:	rsbls	r2, r2, #0
   183d0:	strhls	r2, [r5]
   183d4:	bhi	18410 <_start@@Base+0x2e70>
   183d8:	add	sp, sp, #28
   183dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   183e0:	ldr	r8, [pc, #64]	; 18428 <_start@@Base+0x2e88>
   183e4:	mov	r9, #0
   183e8:	cmp	r3, r9
   183ec:	cmpeq	r2, r8
   183f0:	strhls	r2, [r5]
   183f4:	bls	183d8 <_start@@Base+0x2e38>
   183f8:	mov	r1, r0
   183fc:	mov	r2, r6
   18400:	mov	r0, r7
   18404:	mov	r3, #7
   18408:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1840c:	b	183d8 <_start@@Base+0x2e38>
   18410:	mov	r1, r0
   18414:	mov	r2, r6
   18418:	mov	r0, r7
   1841c:	mov	r3, #8
   18420:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18424:	b	183d8 <_start@@Base+0x2e38>
   18428:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1842c:	mov	r3, #8
   18430:	push	{r4, lr}
   18434:	mov	r2, r3
   18438:	mov	r1, #0
   1843c:	mov	r4, r0
   18440:	bl	2bb58 <flatcc_verify_field@@Base>
   18444:	cmp	r0, #0
   18448:	popne	{r4, pc}
   1844c:	mov	r3, #4
   18450:	mov	r0, r4
   18454:	mov	r2, r3
   18458:	mov	r1, #1
   1845c:	pop	{r4, lr}
   18460:	b	2bb58 <flatcc_verify_field@@Base>
   18464:	push	{r4, r5, r6, r7, r8, r9, lr}
   18468:	sub	sp, sp, #356	; 0x164
   1846c:	mov	r6, r0
   18470:	ldr	r4, [sp, #384]	; 0x180
   18474:	add	r0, sp, #120	; 0x78
   18478:	mov	r7, r2
   1847c:	mov	r5, r3
   18480:	mov	r8, r1
   18484:	bl	261ac <flatcc_builder_init@@Base>
   18488:	mov	r1, #0
   1848c:	add	r0, sp, #72	; 0x48
   18490:	bl	40e04 <flatcc_json_printer_init_dynamic_buffer@@Base>
   18494:	lsr	r3, r4, #3
   18498:	tst	r4, #16
   1849c:	and	r3, r3, #1
   184a0:	lsr	r1, r4, #1
   184a4:	and	r1, r1, #1
   184a8:	lsr	r2, r4, #2
   184ac:	strb	r3, [sp, #101]	; 0x65
   184b0:	movne	r3, #2
   184b4:	and	r2, r2, #1
   184b8:	strb	r1, [sp, #99]	; 0x63
   184bc:	strbne	r3, [sp, #97]	; 0x61
   184c0:	and	r1, r4, #1
   184c4:	tst	r4, #32
   184c8:	strb	r2, [sp, #100]	; 0x64
   184cc:	strb	r1, [sp, #98]	; 0x62
   184d0:	beq	184ec <_start@@Base+0x2f4c>
   184d4:	mov	r3, #2
   184d8:	mov	r2, #1
   184dc:	strb	r3, [sp, #97]	; 0x61
   184e0:	mov	r3, #0
   184e4:	strb	r2, [sp, #98]	; 0x62
   184e8:	strb	r3, [sp, #99]	; 0x63
   184ec:	mov	r0, r6
   184f0:	bl	145a0 <strlen@plt>
   184f4:	ldr	r9, [pc, #596]	; 18750 <_start@@Base+0x31b0>
   184f8:	ldr	r3, [pc, #596]	; 18754 <_start@@Base+0x31b4>
   184fc:	str	r5, [sp]
   18500:	str	r3, [sp, #8]
   18504:	str	r9, [sp, #4]
   18508:	mov	r2, r6
   1850c:	add	r1, sp, #28
   18510:	mov	r3, r0
   18514:	add	r0, sp, #120	; 0x78
   18518:	bl	33d14 <flatcc_json_parser_table_as_root@@Base>
   1851c:	cmp	r0, r7
   18520:	beq	18628 <_start@@Base+0x3088>
   18524:	cmp	r7, #0
   18528:	ldr	r5, [pc, #552]	; 18758 <_start@@Base+0x31b8>
   1852c:	beq	186a4 <_start@@Base+0x3104>
   18530:	cmp	r0, #0
   18534:	bne	185dc <_start@@Base+0x303c>
   18538:	mov	r0, r7
   1853c:	ldr	r4, [r5]
   18540:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   18544:	ldr	r2, [sp, #388]	; 0x184
   18548:	ldr	r1, [pc, #524]	; 1875c <_start@@Base+0x31bc>
   1854c:	mov	r3, r0
   18550:	mov	r0, r4
   18554:	bl	145ac <fprintf@plt>
   18558:	mov	r2, r6
   1855c:	ldr	r0, [r5]
   18560:	ldr	r1, [pc, #504]	; 18760 <_start@@Base+0x31c0>
   18564:	bl	145ac <fprintf@plt>
   18568:	ldr	r3, [sp, #48]	; 0x30
   1856c:	cmp	r3, #1
   18570:	movgt	r4, #0
   18574:	movgt	r6, #32
   18578:	ble	1859c <_start@@Base+0x2ffc>
   1857c:	ldr	r1, [r5]
   18580:	mov	r0, r6
   18584:	bl	145f4 <fputc@plt>
   18588:	ldr	r3, [sp, #48]	; 0x30
   1858c:	add	r4, r4, #1
   18590:	sub	r3, r3, #1
   18594:	cmp	r4, r3
   18598:	blt	1857c <_start@@Base+0x2fdc>
   1859c:	ldr	r3, [r5]
   185a0:	mov	r2, #2
   185a4:	mov	r1, #1
   185a8:	ldr	r0, [pc, #436]	; 18764 <_start@@Base+0x31c4>
   185ac:	bl	14570 <fwrite@plt>
   185b0:	mov	r4, #0
   185b4:	mvn	r5, #0
   185b8:	mov	r0, r4
   185bc:	bl	2b570 <flatcc_builder_aligned_free@@Base>
   185c0:	add	r0, sp, #120	; 0x78
   185c4:	bl	26418 <flatcc_builder_clear@@Base>
   185c8:	add	r0, sp, #72	; 0x48
   185cc:	bl	40f14 <flatcc_json_printer_clear@@Base>
   185d0:	mov	r0, r5
   185d4:	add	sp, sp, #356	; 0x164
   185d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   185dc:	ldr	r4, [r5]
   185e0:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   185e4:	ldr	r2, [sp, #388]	; 0x184
   185e8:	ldr	r1, [pc, #376]	; 18768 <_start@@Base+0x31c8>
   185ec:	mov	r3, r0
   185f0:	mov	r0, r4
   185f4:	bl	145ac <fprintf@plt>
   185f8:	mov	r0, r7
   185fc:	ldr	r4, [r5]
   18600:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   18604:	ldr	r1, [pc, #352]	; 1876c <_start@@Base+0x31cc>
   18608:	mov	r2, r0
   1860c:	mov	r0, r4
   18610:	bl	145ac <fprintf@plt>
   18614:	mov	r2, r6
   18618:	ldr	r0, [r5]
   1861c:	ldr	r1, [pc, #316]	; 18760 <_start@@Base+0x31c0>
   18620:	bl	145ac <fprintf@plt>
   18624:	b	18568 <_start@@Base+0x2fc8>
   18628:	cmp	r7, #0
   1862c:	movne	r4, #0
   18630:	movne	r5, r4
   18634:	bne	185b8 <_start@@Base+0x3018>
   18638:	add	r1, sp, #20
   1863c:	add	r0, sp, #120	; 0x78
   18640:	bl	2b460 <flatcc_builder_finalize_aligned_buffer@@Base>
   18644:	ldr	r3, [pc, #292]	; 18770 <_start@@Base+0x31d0>
   18648:	mov	r2, r9
   1864c:	ldr	r1, [sp, #20]
   18650:	mov	r4, r0
   18654:	bl	2c85c <flatcc_verify_table_as_root@@Base>
   18658:	cmp	r0, #0
   1865c:	beq	186c0 <_start@@Base+0x3120>
   18660:	ldr	r5, [pc, #240]	; 18758 <_start@@Base+0x31b8>
   18664:	ldr	r6, [r5]
   18668:	bl	2bb3c <flatcc_verify_error_string@@Base>
   1866c:	ldr	r3, [sp, #388]	; 0x184
   18670:	ldr	r2, [pc, #252]	; 18774 <_start@@Base+0x31d4>
   18674:	ldr	r1, [pc, #252]	; 18778 <_start@@Base+0x31d8>
   18678:	str	r0, [sp]
   1867c:	mov	r0, r6
   18680:	bl	145ac <fprintf@plt>
   18684:	cmp	r4, #0
   18688:	beq	1869c <_start@@Base+0x30fc>
   1868c:	ldr	r2, [r5]
   18690:	ldr	r1, [sp, #20]
   18694:	mov	r0, r4
   18698:	bl	17d34 <_start@@Base+0x2794>
   1869c:	mvn	r5, #0
   186a0:	b	185b8 <_start@@Base+0x3018>
   186a4:	ldr	r4, [r5]
   186a8:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   186ac:	ldr	r2, [sp, #388]	; 0x184
   186b0:	ldr	r1, [pc, #196]	; 1877c <_start@@Base+0x31dc>
   186b4:	mov	r3, r0
   186b8:	mov	r0, r4
   186bc:	b	18554 <_start@@Base+0x2fb4>
   186c0:	ldr	r1, [pc, #184]	; 18780 <_start@@Base+0x31e0>
   186c4:	ldr	r2, [sp, #20]
   186c8:	mov	r3, r9
   186cc:	str	r1, [sp]
   186d0:	add	r0, sp, #72	; 0x48
   186d4:	mov	r1, r4
   186d8:	bl	40810 <flatcc_json_printer_table_as_root@@Base>
   186dc:	add	r1, sp, #24
   186e0:	add	r0, sp, #72	; 0x48
   186e4:	bl	40ea0 <flatcc_json_printer_get_buffer@@Base>
   186e8:	subs	r6, r0, #0
   186ec:	beq	18704 <_start@@Base+0x3164>
   186f0:	mov	r1, r6
   186f4:	mov	r0, r8
   186f8:	bl	14528 <strcmp@plt>
   186fc:	subs	r5, r0, #0
   18700:	beq	185b8 <_start@@Base+0x3018>
   18704:	ldr	r5, [pc, #76]	; 18758 <_start@@Base+0x31b8>
   18708:	ldr	r2, [sp, #388]	; 0x184
   1870c:	ldr	r1, [pc, #112]	; 18784 <_start@@Base+0x31e4>
   18710:	ldr	r0, [r5]
   18714:	bl	145ac <fprintf@plt>
   18718:	mov	r2, r6
   1871c:	ldr	r0, [r5]
   18720:	ldr	r1, [pc, #56]	; 18760 <_start@@Base+0x31c0>
   18724:	bl	145ac <fprintf@plt>
   18728:	ldr	r3, [r5]
   1872c:	mov	r2, #10
   18730:	mov	r1, #1
   18734:	ldr	r0, [pc, #76]	; 18788 <_start@@Base+0x31e8>
   18738:	bl	14570 <fwrite@plt>
   1873c:	mov	r2, r8
   18740:	ldr	r0, [r5]
   18744:	ldr	r1, [pc, #20]	; 18760 <_start@@Base+0x31c0>
   18748:	bl	145ac <fprintf@plt>
   1874c:	b	18684 <_start@@Base+0x30e4>
   18750:	andeq	r1, r4, r4, lsr #29
   18754:	andeq	fp, r1, r8, ror r4
   18758:			; <UNDEFINED> instruction: 0x000583b0
   1875c:	strdeq	r1, [r4], -r4
   18760:	andeq	r1, r4, r0, lsr pc
   18764:	andeq	r1, r4, r8, ror #27
   18768:	andeq	r1, r4, ip, lsr #29
   1876c:	ldrdeq	r1, [r4], -r4
   18770:	muleq	r1, ip, r5
   18774:	andeq	r1, r4, ip, ror #27
   18778:	andeq	r1, r4, r8, lsr lr
   1877c:	andeq	r1, r4, r4, asr #27
   18780:	andeq	r5, r1, r8, lsl fp
   18784:	andeq	r1, r4, r0, ror #28
   18788:	muleq	r4, r8, lr
   1878c:	cmp	r1, r2
   18790:	beq	187a0 <_start@@Base+0x3200>
   18794:	ldrb	ip, [r1]
   18798:	cmp	ip, #123	; 0x7b
   1879c:	beq	187b0 <_start@@Base+0x3210>
   187a0:	mov	ip, #0
   187a4:	str	ip, [r3]
   187a8:	mov	r3, #21
   187ac:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   187b0:	push	{r4, r5, r6, lr}
   187b4:	mov	r5, r0
   187b8:	add	r0, r1, #1
   187bc:	mov	r6, r3
   187c0:	sub	r3, r2, r0
   187c4:	cmp	r3, #1
   187c8:	mov	r4, r2
   187cc:	ble	187e0 <_start@@Base+0x3240>
   187d0:	ldrb	r3, [r1, #1]
   187d4:	cmp	r3, #32
   187d8:	bhi	187f0 <_start@@Base+0x3250>
   187dc:	beq	18810 <_start@@Base+0x3270>
   187e0:	mov	r1, r0
   187e4:	mov	r2, r4
   187e8:	mov	r0, r5
   187ec:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   187f0:	cmp	r4, r0
   187f4:	beq	18804 <_start@@Base+0x3264>
   187f8:	ldrb	r3, [r0]
   187fc:	cmp	r3, #125	; 0x7d
   18800:	beq	18824 <_start@@Base+0x3284>
   18804:	mov	r3, #1
   18808:	str	r3, [r6]
   1880c:	pop	{r4, r5, r6, pc}
   18810:	ldrb	r3, [r1, #2]
   18814:	cmp	r3, #32
   18818:	addhi	r0, r1, #2
   1881c:	bls	187e0 <_start@@Base+0x3240>
   18820:	b	187f0 <_start@@Base+0x3250>
   18824:	mov	r3, #0
   18828:	mov	r2, r4
   1882c:	add	r1, r0, #1
   18830:	str	r3, [r6]
   18834:	mov	r0, r5
   18838:	pop	{r4, r5, r6, lr}
   1883c:	b	17318 <_start@@Base+0x1d78>
   18840:	ldr	ip, [r0, #12]
   18844:	cmp	ip, #0
   18848:	ldrb	ip, [r1, r3]
   1884c:	beq	188d4 <_start@@Base+0x3334>
   18850:	cmp	ip, #58	; 0x3a
   18854:	cmpne	ip, #32
   18858:	movls	ip, #0
   1885c:	add	r3, r1, r3
   18860:	movhi	ip, #1
   18864:	strls	ip, [r0, #12]
   18868:	bhi	188dc <_start@@Base+0x333c>
   1886c:	push	{r4, r5, r6, lr}
   18870:	mov	r5, r2
   18874:	sub	r2, r2, r3
   18878:	cmp	r2, #1
   1887c:	mov	r4, r0
   18880:	ble	18894 <_start@@Base+0x32f4>
   18884:	ldrb	r2, [r3]
   18888:	cmp	r2, #32
   1888c:	bhi	188a8 <_start@@Base+0x3308>
   18890:	beq	188f0 <_start@@Base+0x3350>
   18894:	mov	r1, r3
   18898:	mov	r2, r5
   1889c:	mov	r0, r4
   188a0:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   188a4:	mov	r3, r0
   188a8:	cmp	r5, r3
   188ac:	beq	188bc <_start@@Base+0x331c>
   188b0:	ldrb	r2, [r3]
   188b4:	cmp	r2, #58	; 0x3a
   188b8:	beq	18904 <_start@@Base+0x3364>
   188bc:	mov	r2, r5
   188c0:	mov	r1, r3
   188c4:	mov	r0, r4
   188c8:	mov	r3, #4
   188cc:	pop	{r4, r5, r6, lr}
   188d0:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   188d4:	cmp	ip, #34	; 0x22
   188d8:	beq	188e4 <_start@@Base+0x3344>
   188dc:	mov	r0, r1
   188e0:	bx	lr
   188e4:	add	r3, r3, #1
   188e8:	add	r3, r1, r3
   188ec:	b	1886c <_start@@Base+0x32cc>
   188f0:	ldrb	r2, [r3, #1]
   188f4:	cmp	r2, #32
   188f8:	addhi	r3, r3, #1
   188fc:	bls	18894 <_start@@Base+0x32f4>
   18900:	b	188a8 <_start@@Base+0x3308>
   18904:	mov	r2, r5
   18908:	mov	r0, r4
   1890c:	add	r1, r3, #1
   18910:	pop	{r4, r5, r6, lr}
   18914:	b	17318 <_start@@Base+0x1d78>
   18918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1891c:	sub	sp, sp, #36	; 0x24
   18920:	mov	ip, #0
   18924:	ldr	fp, [sp, #72]	; 0x48
   18928:	cmp	r1, r2
   1892c:	mov	r5, r1
   18930:	mov	r6, r2
   18934:	str	r3, [sp, #12]
   18938:	str	ip, [fp]
   1893c:	mov	r8, r0
   18940:	beq	18a8c <_start@@Base+0x34ec>
   18944:	ldrb	r3, [r1]
   18948:	cmp	r3, #34	; 0x22
   1894c:	beq	18a3c <_start@@Base+0x349c>
   18950:	cmp	r3, #46	; 0x2e
   18954:	movne	r3, #1
   18958:	strne	r3, [r0, #12]
   1895c:	beq	18a9c <_start@@Base+0x34fc>
   18960:	add	sl, sp, #20
   18964:	add	r9, sp, #24
   18968:	ldr	r4, [sp, #12]
   1896c:	b	18984 <_start@@Base+0x33e4>
   18970:	cmp	r5, r0
   18974:	bne	189b4 <_start@@Base+0x3414>
   18978:	ldr	r3, [r4, #4]!
   1897c:	cmp	r3, #0
   18980:	beq	189f0 <_start@@Base+0x3450>
   18984:	stm	sp, {r9, sl}
   18988:	add	r3, sp, #16
   1898c:	ldr	r7, [r4]
   18990:	mov	r2, r6
   18994:	mov	r1, r5
   18998:	mov	r0, r8
   1899c:	blx	r7
   189a0:	cmp	r6, r0
   189a4:	bne	18970 <_start@@Base+0x33d0>
   189a8:	mov	r0, r6
   189ac:	add	sp, sp, #36	; 0x24
   189b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189b4:	ldr	r3, [sp, #16]
   189b8:	mov	r7, r0
   189bc:	cmp	r3, #0
   189c0:	ldrd	r0, [sp, #24]
   189c4:	beq	18a14 <_start@@Base+0x3474>
   189c8:	bl	416d4 <flatcc_json_printer_clear@@Base+0x7c0>
   189cc:	vldr	s15, [fp]
   189d0:	ldr	r3, [sp, #20]
   189d4:	cmp	r3, #0
   189d8:	vmov	s14, r0
   189dc:	vsub.f32	s15, s15, s14
   189e0:	vstr	s15, [fp]
   189e4:	beq	18a34 <_start@@Base+0x3494>
   189e8:	mov	r5, r7
   189ec:	b	18968 <_start@@Base+0x33c8>
   189f0:	mov	r2, r6
   189f4:	mov	r1, r5
   189f8:	mov	r0, r8
   189fc:	mov	r3, #23
   18a00:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18a04:	mov	r6, r0
   18a08:	mov	r0, r6
   18a0c:	add	sp, sp, #36	; 0x24
   18a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a14:	bl	416d4 <flatcc_json_printer_clear@@Base+0x7c0>
   18a18:	vldr	s15, [fp]
   18a1c:	ldr	r3, [sp, #20]
   18a20:	cmp	r3, #0
   18a24:	vmov	s14, r0
   18a28:	vadd.f32	s15, s15, s14
   18a2c:	vstr	s15, [fp]
   18a30:	bne	189e8 <_start@@Base+0x3448>
   18a34:	mov	r6, r7
   18a38:	b	189a8 <_start@@Base+0x3408>
   18a3c:	add	r5, r1, #1
   18a40:	sub	r3, r6, r5
   18a44:	mov	r2, #0
   18a48:	str	r2, [r0, #12]
   18a4c:	cmp	r3, #1
   18a50:	ble	18a64 <_start@@Base+0x34c4>
   18a54:	ldrb	r3, [r5]
   18a58:	cmp	r3, #32
   18a5c:	bhi	18a78 <_start@@Base+0x34d8>
   18a60:	beq	18abc <_start@@Base+0x351c>
   18a64:	mov	r1, r5
   18a68:	mov	r2, r6
   18a6c:	mov	r0, r8
   18a70:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   18a74:	mov	r5, r0
   18a78:	cmp	r6, r5
   18a7c:	bne	18960 <_start@@Base+0x33c0>
   18a80:	mov	r0, r6
   18a84:	add	sp, sp, #36	; 0x24
   18a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a8c:	ldr	r3, [r0, #12]
   18a90:	cmp	r3, #0
   18a94:	beq	18a64 <_start@@Base+0x34c4>
   18a98:	b	189a8 <_start@@Base+0x3408>
   18a9c:	mov	r3, #5
   18aa0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18aa4:	ldr	r3, [r8, #12]
   18aa8:	cmp	r3, #0
   18aac:	mov	r5, r0
   18ab0:	subeq	r3, r6, r0
   18ab4:	beq	18a4c <_start@@Base+0x34ac>
   18ab8:	b	18a78 <_start@@Base+0x34d8>
   18abc:	ldrb	r3, [r5, #1]
   18ac0:	cmp	r3, #32
   18ac4:	addhi	r5, r5, #1
   18ac8:	bls	18a64 <_start@@Base+0x34c4>
   18acc:	b	18a78 <_start@@Base+0x34d8>
   18ad0:	cmp	r1, r2
   18ad4:	beq	18ae4 <_start@@Base+0x3544>
   18ad8:	ldrb	ip, [r1]
   18adc:	cmp	ip, #91	; 0x5b
   18ae0:	beq	18af4 <_start@@Base+0x3554>
   18ae4:	mov	ip, #0
   18ae8:	str	ip, [r3]
   18aec:	mov	r3, #22
   18af0:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   18af4:	push	{r4, r5, r6, lr}
   18af8:	mov	r5, r0
   18afc:	add	r0, r1, #1
   18b00:	mov	r6, r3
   18b04:	sub	r3, r2, r0
   18b08:	cmp	r3, #1
   18b0c:	mov	r4, r2
   18b10:	ble	18b24 <_start@@Base+0x3584>
   18b14:	ldrb	r3, [r1, #1]
   18b18:	cmp	r3, #32
   18b1c:	bhi	18b34 <_start@@Base+0x3594>
   18b20:	beq	18b54 <_start@@Base+0x35b4>
   18b24:	mov	r1, r0
   18b28:	mov	r2, r4
   18b2c:	mov	r0, r5
   18b30:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   18b34:	cmp	r4, r0
   18b38:	beq	18b48 <_start@@Base+0x35a8>
   18b3c:	ldrb	r3, [r0]
   18b40:	cmp	r3, #93	; 0x5d
   18b44:	beq	18b68 <_start@@Base+0x35c8>
   18b48:	mov	r3, #1
   18b4c:	str	r3, [r6]
   18b50:	pop	{r4, r5, r6, pc}
   18b54:	ldrb	r3, [r1, #2]
   18b58:	cmp	r3, #32
   18b5c:	addhi	r0, r1, #2
   18b60:	bls	18b24 <_start@@Base+0x3584>
   18b64:	b	18b34 <_start@@Base+0x3594>
   18b68:	mov	r3, #0
   18b6c:	mov	r2, r4
   18b70:	add	r1, r0, #1
   18b74:	str	r3, [r6]
   18b78:	mov	r0, r5
   18b7c:	pop	{r4, r5, r6, lr}
   18b80:	b	17318 <_start@@Base+0x1d78>
   18b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b88:	sub	sp, sp, #36	; 0x24
   18b8c:	mov	r8, #0
   18b90:	ldr	fp, [sp, #72]	; 0x48
   18b94:	mov	r9, #0
   18b98:	cmp	r1, r2
   18b9c:	strd	r8, [fp]
   18ba0:	mov	r5, r1
   18ba4:	mov	r6, r2
   18ba8:	str	r3, [sp, #12]
   18bac:	mov	r8, r0
   18bb0:	beq	18cfc <_start@@Base+0x375c>
   18bb4:	ldrb	r3, [r1]
   18bb8:	cmp	r3, #34	; 0x22
   18bbc:	beq	18cac <_start@@Base+0x370c>
   18bc0:	cmp	r3, #46	; 0x2e
   18bc4:	movne	r3, #1
   18bc8:	strne	r3, [r0, #12]
   18bcc:	beq	18d0c <_start@@Base+0x376c>
   18bd0:	add	sl, sp, #20
   18bd4:	add	r9, sp, #24
   18bd8:	ldr	r4, [sp, #12]
   18bdc:	b	18bf4 <_start@@Base+0x3654>
   18be0:	cmp	r5, r0
   18be4:	bne	18c24 <_start@@Base+0x3684>
   18be8:	ldr	r3, [r4, #4]!
   18bec:	cmp	r3, #0
   18bf0:	beq	18c60 <_start@@Base+0x36c0>
   18bf4:	stm	sp, {r9, sl}
   18bf8:	add	r3, sp, #16
   18bfc:	ldr	r7, [r4]
   18c00:	mov	r2, r6
   18c04:	mov	r1, r5
   18c08:	mov	r0, r8
   18c0c:	blx	r7
   18c10:	cmp	r6, r0
   18c14:	bne	18be0 <_start@@Base+0x3640>
   18c18:	mov	r0, r6
   18c1c:	add	sp, sp, #36	; 0x24
   18c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c24:	ldr	r3, [sp, #16]
   18c28:	mov	r7, r0
   18c2c:	cmp	r3, #0
   18c30:	ldrd	r0, [sp, #24]
   18c34:	beq	18c84 <_start@@Base+0x36e4>
   18c38:	bl	4149c <flatcc_json_printer_clear@@Base+0x588>
   18c3c:	vldr	d7, [fp]
   18c40:	ldr	r3, [sp, #20]
   18c44:	cmp	r3, #0
   18c48:	vmov	d6, r0, r1
   18c4c:	vsub.f64	d7, d7, d6
   18c50:	vstr	d7, [fp]
   18c54:	beq	18ca4 <_start@@Base+0x3704>
   18c58:	mov	r5, r7
   18c5c:	b	18bd8 <_start@@Base+0x3638>
   18c60:	mov	r2, r6
   18c64:	mov	r1, r5
   18c68:	mov	r0, r8
   18c6c:	mov	r3, #23
   18c70:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18c74:	mov	r6, r0
   18c78:	mov	r0, r6
   18c7c:	add	sp, sp, #36	; 0x24
   18c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c84:	bl	4149c <flatcc_json_printer_clear@@Base+0x588>
   18c88:	vldr	d7, [fp]
   18c8c:	ldr	r3, [sp, #20]
   18c90:	cmp	r3, #0
   18c94:	vmov	d6, r0, r1
   18c98:	vadd.f64	d7, d7, d6
   18c9c:	vstr	d7, [fp]
   18ca0:	bne	18c58 <_start@@Base+0x36b8>
   18ca4:	mov	r6, r7
   18ca8:	b	18c18 <_start@@Base+0x3678>
   18cac:	add	r5, r1, #1
   18cb0:	sub	r3, r6, r5
   18cb4:	mov	r2, #0
   18cb8:	str	r2, [r0, #12]
   18cbc:	cmp	r3, #1
   18cc0:	ble	18cd4 <_start@@Base+0x3734>
   18cc4:	ldrb	r3, [r5]
   18cc8:	cmp	r3, #32
   18ccc:	bhi	18ce8 <_start@@Base+0x3748>
   18cd0:	beq	18d2c <_start@@Base+0x378c>
   18cd4:	mov	r1, r5
   18cd8:	mov	r2, r6
   18cdc:	mov	r0, r8
   18ce0:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   18ce4:	mov	r5, r0
   18ce8:	cmp	r6, r5
   18cec:	bne	18bd0 <_start@@Base+0x3630>
   18cf0:	mov	r0, r6
   18cf4:	add	sp, sp, #36	; 0x24
   18cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cfc:	ldr	r3, [r0, #12]
   18d00:	cmp	r3, #0
   18d04:	beq	18cd4 <_start@@Base+0x3734>
   18d08:	b	18c18 <_start@@Base+0x3678>
   18d0c:	mov	r3, #5
   18d10:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18d14:	ldr	r3, [r8, #12]
   18d18:	cmp	r3, #0
   18d1c:	mov	r5, r0
   18d20:	subeq	r3, r6, r0
   18d24:	beq	18cbc <_start@@Base+0x371c>
   18d28:	b	18ce8 <_start@@Base+0x3748>
   18d2c:	ldrb	r3, [r5, #1]
   18d30:	cmp	r3, #32
   18d34:	addhi	r5, r5, #1
   18d38:	bls	18cd4 <_start@@Base+0x3734>
   18d3c:	b	18ce8 <_start@@Base+0x3748>
   18d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d44:	sub	sp, sp, #36	; 0x24
   18d48:	mov	ip, #0
   18d4c:	str	r3, [sp, #12]
   18d50:	ldr	r3, [sp, #72]	; 0x48
   18d54:	cmp	r1, r2
   18d58:	mov	r7, r1
   18d5c:	mov	r6, r2
   18d60:	strb	ip, [r3]
   18d64:	mov	r8, r0
   18d68:	beq	18eb4 <_start@@Base+0x3914>
   18d6c:	ldrb	r3, [r1]
   18d70:	cmp	r3, #34	; 0x22
   18d74:	beq	18e70 <_start@@Base+0x38d0>
   18d78:	cmp	r3, #46	; 0x2e
   18d7c:	movne	r3, #1
   18d80:	strne	r3, [r0, #12]
   18d84:	beq	18ec4 <_start@@Base+0x3924>
   18d88:	mov	fp, #0
   18d8c:	add	sl, sp, #20
   18d90:	add	r9, sp, #24
   18d94:	ldr	r5, [sp, #12]
   18d98:	b	18db0 <_start@@Base+0x3810>
   18d9c:	cmp	r7, r0
   18da0:	bne	18de0 <_start@@Base+0x3840>
   18da4:	ldr	r3, [r5, #4]!
   18da8:	cmp	r3, #0
   18dac:	beq	18e2c <_start@@Base+0x388c>
   18db0:	stm	sp, {r9, sl}
   18db4:	add	r3, sp, #16
   18db8:	ldr	r4, [r5]
   18dbc:	mov	r2, r6
   18dc0:	mov	r1, r7
   18dc4:	mov	r0, r8
   18dc8:	blx	r4
   18dcc:	cmp	r6, r0
   18dd0:	bne	18d9c <_start@@Base+0x37fc>
   18dd4:	mov	r0, r6
   18dd8:	add	sp, sp, #36	; 0x24
   18ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de0:	ldr	r3, [sp, #16]
   18de4:	mov	r4, r0
   18de8:	cmp	r3, #0
   18dec:	bne	18e50 <_start@@Base+0x38b0>
   18df0:	ldr	r2, [sp, #24]
   18df4:	ldr	r3, [sp, #28]
   18df8:	orrs	r3, r2, r3
   18dfc:	movne	fp, #1
   18e00:	moveq	fp, #0
   18e04:	ldr	r3, [sp, #72]	; 0x48
   18e08:	ldr	r2, [sp, #20]
   18e0c:	ldrb	r3, [r3]
   18e10:	cmp	r2, #0
   18e14:	ldr	r2, [sp, #72]	; 0x48
   18e18:	add	r3, fp, r3
   18e1c:	strb	r3, [r2]
   18e20:	beq	18ef8 <_start@@Base+0x3958>
   18e24:	mov	r7, r4
   18e28:	b	18d94 <_start@@Base+0x37f4>
   18e2c:	mov	r2, r6
   18e30:	mov	r1, r7
   18e34:	mov	r0, r8
   18e38:	mov	r3, #23
   18e3c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18e40:	mov	r6, r0
   18e44:	mov	r0, r6
   18e48:	add	sp, sp, #36	; 0x24
   18e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e50:	mov	r3, #8
   18e54:	mov	r2, r6
   18e58:	mov	r1, r4
   18e5c:	mov	r0, r8
   18e60:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18e64:	cmp	r6, r0
   18e68:	bne	18e04 <_start@@Base+0x3864>
   18e6c:	b	18dd4 <_start@@Base+0x3834>
   18e70:	add	r7, r1, #1
   18e74:	sub	r3, r2, r7
   18e78:	str	ip, [r0, #12]
   18e7c:	cmp	r3, #1
   18e80:	ble	18e94 <_start@@Base+0x38f4>
   18e84:	ldrb	r3, [r7]
   18e88:	cmp	r3, #32
   18e8c:	bhi	18ea8 <_start@@Base+0x3908>
   18e90:	beq	18ee4 <_start@@Base+0x3944>
   18e94:	mov	r1, r7
   18e98:	mov	r2, r6
   18e9c:	mov	r0, r8
   18ea0:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   18ea4:	mov	r7, r0
   18ea8:	cmp	r6, r7
   18eac:	bne	18d88 <_start@@Base+0x37e8>
   18eb0:	b	18dd4 <_start@@Base+0x3834>
   18eb4:	ldr	r3, [r0, #12]
   18eb8:	cmp	r3, #0
   18ebc:	bne	18dd4 <_start@@Base+0x3834>
   18ec0:	b	18e94 <_start@@Base+0x38f4>
   18ec4:	mov	r3, #5
   18ec8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   18ecc:	ldr	r3, [r8, #12]
   18ed0:	cmp	r3, #0
   18ed4:	mov	r7, r0
   18ed8:	subeq	r3, r6, r0
   18edc:	beq	18e7c <_start@@Base+0x38dc>
   18ee0:	b	18ea8 <_start@@Base+0x3908>
   18ee4:	ldrb	r3, [r7, #1]
   18ee8:	cmp	r3, #32
   18eec:	addhi	r7, r7, #1
   18ef0:	bls	18e94 <_start@@Base+0x38f4>
   18ef4:	b	18ea8 <_start@@Base+0x3908>
   18ef8:	mov	r6, r4
   18efc:	b	18dd4 <_start@@Base+0x3834>
   18f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f04:	sub	sp, sp, #36	; 0x24
   18f08:	mov	ip, #0
   18f0c:	str	r3, [sp, #12]
   18f10:	ldr	r3, [sp, #72]	; 0x48
   18f14:	cmp	r1, r2
   18f18:	mov	r6, r1
   18f1c:	mov	r7, r2
   18f20:	strh	ip, [r3]
   18f24:	mov	r8, r0
   18f28:	beq	190b0 <_start@@Base+0x3b10>
   18f2c:	ldrb	r3, [r1]
   18f30:	cmp	r3, #34	; 0x22
   18f34:	beq	19064 <_start@@Base+0x3ac4>
   18f38:	cmp	r3, #46	; 0x2e
   18f3c:	movne	r3, #1
   18f40:	strne	r3, [r0, #12]
   18f44:	beq	190c0 <_start@@Base+0x3b20>
   18f48:	mov	fp, #0
   18f4c:	add	sl, sp, #20
   18f50:	add	r9, sp, #24
   18f54:	ldr	r5, [sp, #12]
   18f58:	b	18f70 <_start@@Base+0x39d0>
   18f5c:	cmp	r6, r0
   18f60:	bne	18fa0 <_start@@Base+0x3a00>
   18f64:	ldr	r3, [r5, #4]!
   18f68:	cmp	r3, #0
   18f6c:	beq	18ff0 <_start@@Base+0x3a50>
   18f70:	stm	sp, {r9, sl}
   18f74:	add	r3, sp, #16
   18f78:	ldr	r4, [r5]
   18f7c:	mov	r2, r7
   18f80:	mov	r1, r6
   18f84:	mov	r0, r8
   18f88:	blx	r4
   18f8c:	cmp	r7, r0
   18f90:	bne	18f5c <_start@@Base+0x39bc>
   18f94:	mov	r0, r7
   18f98:	add	sp, sp, #36	; 0x24
   18f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fa0:	ldr	r1, [sp, #16]
   18fa4:	mov	r4, r0
   18fa8:	cmp	r1, #0
   18fac:	ldrd	r2, [sp, #24]
   18fb0:	beq	19014 <_start@@Base+0x3a74>
   18fb4:	cmp	r3, #0
   18fb8:	cmpeq	r2, #32768	; 0x8000
   18fbc:	rsbls	fp, r2, #0
   18fc0:	sxthls	fp, fp
   18fc4:	bhi	19044 <_start@@Base+0x3aa4>
   18fc8:	ldr	r3, [sp, #72]	; 0x48
   18fcc:	ldr	r2, [sp, #20]
   18fd0:	ldrh	r3, [r3]
   18fd4:	cmp	r2, #0
   18fd8:	ldr	r2, [sp, #72]	; 0x48
   18fdc:	add	r3, r3, fp
   18fe0:	strh	r3, [r2]
   18fe4:	beq	190f4 <_start@@Base+0x3b54>
   18fe8:	mov	r6, r4
   18fec:	b	18f54 <_start@@Base+0x39b4>
   18ff0:	mov	r2, r7
   18ff4:	mov	r1, r6
   18ff8:	mov	r0, r8
   18ffc:	mov	r3, #23
   19000:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19004:	mov	r7, r0
   19008:	mov	r0, r7
   1900c:	add	sp, sp, #36	; 0x24
   19010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19014:	ldr	r0, [pc, #224]	; 190fc <_start@@Base+0x3b5c>
   19018:	mov	r1, #0
   1901c:	cmp	r3, r1
   19020:	cmpeq	r2, r0
   19024:	sxthls	fp, r2
   19028:	bls	18fc8 <_start@@Base+0x3a28>
   1902c:	mov	r3, #7
   19030:	mov	r2, r7
   19034:	mov	r1, r4
   19038:	mov	r0, r8
   1903c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19040:	b	19058 <_start@@Base+0x3ab8>
   19044:	mov	r3, #8
   19048:	mov	r2, r7
   1904c:	mov	r1, r4
   19050:	mov	r0, r8
   19054:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19058:	cmp	r7, r0
   1905c:	bne	18fc8 <_start@@Base+0x3a28>
   19060:	b	18f94 <_start@@Base+0x39f4>
   19064:	add	r6, r1, #1
   19068:	sub	r3, r2, r6
   1906c:	str	ip, [r0, #12]
   19070:	cmp	r3, #1
   19074:	ble	19088 <_start@@Base+0x3ae8>
   19078:	ldrb	r3, [r6]
   1907c:	cmp	r3, #32
   19080:	bhi	1909c <_start@@Base+0x3afc>
   19084:	beq	190e0 <_start@@Base+0x3b40>
   19088:	mov	r1, r6
   1908c:	mov	r2, r7
   19090:	mov	r0, r8
   19094:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19098:	mov	r6, r0
   1909c:	cmp	r7, r6
   190a0:	bne	18f48 <_start@@Base+0x39a8>
   190a4:	mov	r0, r7
   190a8:	add	sp, sp, #36	; 0x24
   190ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190b0:	ldr	r3, [r0, #12]
   190b4:	cmp	r3, #0
   190b8:	beq	19088 <_start@@Base+0x3ae8>
   190bc:	b	18f94 <_start@@Base+0x39f4>
   190c0:	mov	r3, #5
   190c4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   190c8:	ldr	r3, [r8, #12]
   190cc:	cmp	r3, #0
   190d0:	mov	r6, r0
   190d4:	subeq	r3, r7, r0
   190d8:	beq	19070 <_start@@Base+0x3ad0>
   190dc:	b	1909c <_start@@Base+0x3afc>
   190e0:	ldrb	r3, [r6, #1]
   190e4:	cmp	r3, #32
   190e8:	addhi	r6, r6, #1
   190ec:	bls	19088 <_start@@Base+0x3ae8>
   190f0:	b	1909c <_start@@Base+0x3afc>
   190f4:	mov	r7, r4
   190f8:	b	18f94 <_start@@Base+0x39f4>
   190fc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   19100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19104:	sub	sp, sp, #36	; 0x24
   19108:	mov	fp, r3
   1910c:	ldr	r3, [sp, #72]	; 0x48
   19110:	mov	ip, #0
   19114:	cmp	r1, r2
   19118:	mov	r7, r1
   1911c:	mov	r6, r2
   19120:	strh	ip, [r3]
   19124:	mov	r8, r0
   19128:	beq	192a8 <_start@@Base+0x3d08>
   1912c:	ldrb	r3, [r1]
   19130:	cmp	r3, #34	; 0x22
   19134:	beq	1925c <_start@@Base+0x3cbc>
   19138:	cmp	r3, #46	; 0x2e
   1913c:	movne	r3, #1
   19140:	strne	r3, [r0, #12]
   19144:	beq	192b8 <_start@@Base+0x3d18>
   19148:	add	sl, sp, #20
   1914c:	add	r9, sp, #24
   19150:	mov	r3, #0
   19154:	str	r3, [sp, #12]
   19158:	mov	r5, fp
   1915c:	b	19174 <_start@@Base+0x3bd4>
   19160:	cmp	r7, r0
   19164:	bne	191a4 <_start@@Base+0x3c04>
   19168:	ldr	r3, [r5, #4]!
   1916c:	cmp	r3, #0
   19170:	beq	19200 <_start@@Base+0x3c60>
   19174:	stm	sp, {r9, sl}
   19178:	add	r3, sp, #16
   1917c:	ldr	r4, [r5]
   19180:	mov	r2, r6
   19184:	mov	r1, r7
   19188:	mov	r0, r8
   1918c:	blx	r4
   19190:	cmp	r6, r0
   19194:	bne	19160 <_start@@Base+0x3bc0>
   19198:	mov	r0, r6
   1919c:	add	sp, sp, #36	; 0x24
   191a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191a4:	ldr	r3, [sp, #16]
   191a8:	mov	r4, r0
   191ac:	cmp	r3, #0
   191b0:	bne	19224 <_start@@Base+0x3c84>
   191b4:	ldrd	r2, [sp, #24]
   191b8:	ldr	r0, [pc, #308]	; 192f4 <_start@@Base+0x3d54>
   191bc:	mov	r1, #0
   191c0:	cmp	r3, r1
   191c4:	cmpeq	r2, r0
   191c8:	uxthls	r3, r2
   191cc:	strls	r3, [sp, #12]
   191d0:	bhi	19244 <_start@@Base+0x3ca4>
   191d4:	ldr	r3, [sp, #72]	; 0x48
   191d8:	ldr	r2, [sp, #20]
   191dc:	ldr	r1, [sp, #12]
   191e0:	ldrh	r3, [r3]
   191e4:	cmp	r2, #0
   191e8:	ldr	r2, [sp, #72]	; 0x48
   191ec:	add	r3, r1, r3
   191f0:	strh	r3, [r2]
   191f4:	beq	192ec <_start@@Base+0x3d4c>
   191f8:	mov	r7, r4
   191fc:	b	19158 <_start@@Base+0x3bb8>
   19200:	mov	r2, r6
   19204:	mov	r1, r7
   19208:	mov	r0, r8
   1920c:	mov	r3, #23
   19210:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19214:	mov	r6, r0
   19218:	mov	r0, r6
   1921c:	add	sp, sp, #36	; 0x24
   19220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19224:	mov	r3, #8
   19228:	mov	r2, r6
   1922c:	mov	r1, r4
   19230:	mov	r0, r8
   19234:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19238:	cmp	r6, r0
   1923c:	bne	191d4 <_start@@Base+0x3c34>
   19240:	b	19198 <_start@@Base+0x3bf8>
   19244:	mov	r3, #7
   19248:	mov	r2, r6
   1924c:	mov	r1, r4
   19250:	mov	r0, r8
   19254:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19258:	b	19238 <_start@@Base+0x3c98>
   1925c:	add	r7, r1, #1
   19260:	sub	r3, r2, r7
   19264:	str	ip, [r0, #12]
   19268:	cmp	r3, #1
   1926c:	ble	19280 <_start@@Base+0x3ce0>
   19270:	ldrb	r3, [r7]
   19274:	cmp	r3, #32
   19278:	bhi	19294 <_start@@Base+0x3cf4>
   1927c:	beq	192d8 <_start@@Base+0x3d38>
   19280:	mov	r1, r7
   19284:	mov	r2, r6
   19288:	mov	r0, r8
   1928c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19290:	mov	r7, r0
   19294:	cmp	r6, r7
   19298:	bne	19148 <_start@@Base+0x3ba8>
   1929c:	mov	r0, r6
   192a0:	add	sp, sp, #36	; 0x24
   192a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192a8:	ldr	r3, [r0, #12]
   192ac:	cmp	r3, #0
   192b0:	beq	19280 <_start@@Base+0x3ce0>
   192b4:	b	19198 <_start@@Base+0x3bf8>
   192b8:	mov	r3, #5
   192bc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   192c0:	ldr	r3, [r8, #12]
   192c4:	cmp	r3, #0
   192c8:	mov	r7, r0
   192cc:	subeq	r3, r6, r0
   192d0:	beq	19268 <_start@@Base+0x3cc8>
   192d4:	b	19294 <_start@@Base+0x3cf4>
   192d8:	ldrb	r3, [r7, #1]
   192dc:	cmp	r3, #32
   192e0:	addhi	r7, r7, #1
   192e4:	bls	19280 <_start@@Base+0x3ce0>
   192e8:	b	19294 <_start@@Base+0x3cf4>
   192ec:	mov	r6, r4
   192f0:	b	19198 <_start@@Base+0x3bf8>
   192f4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   192f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192fc:	sub	sp, sp, #36	; 0x24
   19300:	mov	ip, #0
   19304:	ldr	fp, [sp, #72]	; 0x48
   19308:	cmp	r1, r2
   1930c:	mov	r6, r1
   19310:	mov	r7, r2
   19314:	str	r3, [sp, #12]
   19318:	str	ip, [fp]
   1931c:	mov	r8, r0
   19320:	beq	194a8 <_start@@Base+0x3f08>
   19324:	ldrb	r3, [r1]
   19328:	cmp	r3, #34	; 0x22
   1932c:	beq	1945c <_start@@Base+0x3ebc>
   19330:	cmp	r3, #46	; 0x2e
   19334:	movne	r3, #1
   19338:	strne	r3, [r0, #12]
   1933c:	beq	194b8 <_start@@Base+0x3f18>
   19340:	add	sl, sp, #20
   19344:	add	r9, sp, #24
   19348:	mov	r3, #0
   1934c:	str	r3, [sp, #8]
   19350:	ldr	r5, [sp, #12]
   19354:	b	1936c <_start@@Base+0x3dcc>
   19358:	cmp	r6, r0
   1935c:	bne	1939c <_start@@Base+0x3dfc>
   19360:	ldr	r3, [r5, #4]!
   19364:	cmp	r3, #0
   19368:	beq	193e8 <_start@@Base+0x3e48>
   1936c:	stm	sp, {r9, sl}
   19370:	add	r3, sp, #16
   19374:	ldr	r4, [r5]
   19378:	mov	r2, r7
   1937c:	mov	r1, r6
   19380:	mov	r0, r8
   19384:	blx	r4
   19388:	cmp	r7, r0
   1938c:	bne	19358 <_start@@Base+0x3db8>
   19390:	mov	r0, r7
   19394:	add	sp, sp, #36	; 0x24
   19398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1939c:	ldr	r1, [sp, #16]
   193a0:	mov	r4, r0
   193a4:	cmp	r1, #0
   193a8:	ldrd	r2, [sp, #24]
   193ac:	beq	1940c <_start@@Base+0x3e6c>
   193b0:	cmp	r3, #0
   193b4:	cmpeq	r2, #-2147483648	; 0x80000000
   193b8:	rsbls	r3, r2, #0
   193bc:	strls	r3, [sp, #8]
   193c0:	bhi	1943c <_start@@Base+0x3e9c>
   193c4:	ldr	r3, [fp]
   193c8:	ldr	r2, [sp, #20]
   193cc:	ldr	r1, [sp, #8]
   193d0:	cmp	r2, #0
   193d4:	add	r3, r3, r1
   193d8:	str	r3, [fp]
   193dc:	beq	194ec <_start@@Base+0x3f4c>
   193e0:	mov	r6, r4
   193e4:	b	19350 <_start@@Base+0x3db0>
   193e8:	mov	r2, r7
   193ec:	mov	r1, r6
   193f0:	mov	r0, r8
   193f4:	mov	r3, #23
   193f8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   193fc:	mov	r7, r0
   19400:	mov	r0, r7
   19404:	add	sp, sp, #36	; 0x24
   19408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1940c:	mov	r1, #0
   19410:	cmp	r3, r1
   19414:	mvn	r0, #-2147483648	; 0x80000000
   19418:	cmpeq	r2, r0
   1941c:	strls	r2, [sp, #8]
   19420:	bls	193c4 <_start@@Base+0x3e24>
   19424:	mov	r3, #7
   19428:	mov	r2, r7
   1942c:	mov	r1, r4
   19430:	mov	r0, r8
   19434:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19438:	b	19450 <_start@@Base+0x3eb0>
   1943c:	mov	r3, #8
   19440:	mov	r2, r7
   19444:	mov	r1, r4
   19448:	mov	r0, r8
   1944c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19450:	cmp	r7, r0
   19454:	bne	193c4 <_start@@Base+0x3e24>
   19458:	b	19390 <_start@@Base+0x3df0>
   1945c:	add	r6, r1, #1
   19460:	sub	r3, r2, r6
   19464:	str	ip, [r0, #12]
   19468:	cmp	r3, #1
   1946c:	ble	19480 <_start@@Base+0x3ee0>
   19470:	ldrb	r3, [r6]
   19474:	cmp	r3, #32
   19478:	bhi	19494 <_start@@Base+0x3ef4>
   1947c:	beq	194d8 <_start@@Base+0x3f38>
   19480:	mov	r1, r6
   19484:	mov	r2, r7
   19488:	mov	r0, r8
   1948c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19490:	mov	r6, r0
   19494:	cmp	r7, r6
   19498:	bne	19340 <_start@@Base+0x3da0>
   1949c:	mov	r0, r7
   194a0:	add	sp, sp, #36	; 0x24
   194a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194a8:	ldr	r3, [r0, #12]
   194ac:	cmp	r3, #0
   194b0:	beq	19480 <_start@@Base+0x3ee0>
   194b4:	b	19390 <_start@@Base+0x3df0>
   194b8:	mov	r3, #5
   194bc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   194c0:	ldr	r3, [r8, #12]
   194c4:	cmp	r3, #0
   194c8:	mov	r6, r0
   194cc:	subeq	r3, r7, r0
   194d0:	beq	19468 <_start@@Base+0x3ec8>
   194d4:	b	19494 <_start@@Base+0x3ef4>
   194d8:	ldrb	r3, [r6, #1]
   194dc:	cmp	r3, #32
   194e0:	addhi	r6, r6, #1
   194e4:	bls	19480 <_start@@Base+0x3ee0>
   194e8:	b	19494 <_start@@Base+0x3ef4>
   194ec:	mov	r7, r4
   194f0:	b	19390 <_start@@Base+0x3df0>
   194f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194f8:	sub	sp, sp, #36	; 0x24
   194fc:	mov	ip, #0
   19500:	str	r3, [sp, #12]
   19504:	ldr	r3, [sp, #72]	; 0x48
   19508:	cmp	r1, r2
   1950c:	mov	r6, r1
   19510:	mov	r7, r2
   19514:	strb	ip, [r3]
   19518:	mov	r8, r0
   1951c:	beq	1969c <_start@@Base+0x40fc>
   19520:	ldrb	r3, [r1]
   19524:	cmp	r3, #34	; 0x22
   19528:	beq	19650 <_start@@Base+0x40b0>
   1952c:	cmp	r3, #46	; 0x2e
   19530:	movne	r3, #1
   19534:	strne	r3, [r0, #12]
   19538:	beq	196ac <_start@@Base+0x410c>
   1953c:	mov	fp, #0
   19540:	add	sl, sp, #20
   19544:	add	r9, sp, #24
   19548:	ldr	r5, [sp, #12]
   1954c:	b	19564 <_start@@Base+0x3fc4>
   19550:	cmp	r6, r0
   19554:	bne	19594 <_start@@Base+0x3ff4>
   19558:	ldr	r3, [r5, #4]!
   1955c:	cmp	r3, #0
   19560:	beq	195e4 <_start@@Base+0x4044>
   19564:	stm	sp, {r9, sl}
   19568:	add	r3, sp, #16
   1956c:	ldr	r4, [r5]
   19570:	mov	r2, r7
   19574:	mov	r1, r6
   19578:	mov	r0, r8
   1957c:	blx	r4
   19580:	cmp	r7, r0
   19584:	bne	19550 <_start@@Base+0x3fb0>
   19588:	mov	r0, r7
   1958c:	add	sp, sp, #36	; 0x24
   19590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19594:	ldr	r1, [sp, #16]
   19598:	mov	r4, r0
   1959c:	cmp	r1, #0
   195a0:	ldrd	r2, [sp, #24]
   195a4:	beq	19608 <_start@@Base+0x4068>
   195a8:	cmp	r3, #0
   195ac:	cmpeq	r2, #128	; 0x80
   195b0:	rsbls	fp, r2, #0
   195b4:	sxtbls	fp, fp
   195b8:	bhi	19630 <_start@@Base+0x4090>
   195bc:	ldr	r3, [sp, #72]	; 0x48
   195c0:	ldr	r2, [sp, #20]
   195c4:	ldrb	r3, [r3]
   195c8:	cmp	r2, #0
   195cc:	ldr	r2, [sp, #72]	; 0x48
   195d0:	add	r3, r3, fp
   195d4:	strb	r3, [r2]
   195d8:	beq	196e0 <_start@@Base+0x4140>
   195dc:	mov	r6, r4
   195e0:	b	19548 <_start@@Base+0x3fa8>
   195e4:	mov	r2, r7
   195e8:	mov	r1, r6
   195ec:	mov	r0, r8
   195f0:	mov	r3, #23
   195f4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   195f8:	mov	r7, r0
   195fc:	mov	r0, r7
   19600:	add	sp, sp, #36	; 0x24
   19604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19608:	cmp	r3, #0
   1960c:	cmpeq	r2, #127	; 0x7f
   19610:	sxtbls	fp, r2
   19614:	bls	195bc <_start@@Base+0x401c>
   19618:	mov	r3, #7
   1961c:	mov	r2, r7
   19620:	mov	r1, r4
   19624:	mov	r0, r8
   19628:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1962c:	b	19644 <_start@@Base+0x40a4>
   19630:	mov	r3, #8
   19634:	mov	r2, r7
   19638:	mov	r1, r4
   1963c:	mov	r0, r8
   19640:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19644:	cmp	r7, r0
   19648:	bne	195bc <_start@@Base+0x401c>
   1964c:	b	19588 <_start@@Base+0x3fe8>
   19650:	add	r6, r1, #1
   19654:	sub	r3, r2, r6
   19658:	str	ip, [r0, #12]
   1965c:	cmp	r3, #1
   19660:	ble	19674 <_start@@Base+0x40d4>
   19664:	ldrb	r3, [r6]
   19668:	cmp	r3, #32
   1966c:	bhi	19688 <_start@@Base+0x40e8>
   19670:	beq	196cc <_start@@Base+0x412c>
   19674:	mov	r1, r6
   19678:	mov	r2, r7
   1967c:	mov	r0, r8
   19680:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19684:	mov	r6, r0
   19688:	cmp	r7, r6
   1968c:	bne	1953c <_start@@Base+0x3f9c>
   19690:	mov	r0, r7
   19694:	add	sp, sp, #36	; 0x24
   19698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1969c:	ldr	r3, [r0, #12]
   196a0:	cmp	r3, #0
   196a4:	beq	19674 <_start@@Base+0x40d4>
   196a8:	b	19588 <_start@@Base+0x3fe8>
   196ac:	mov	r3, #5
   196b0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   196b4:	ldr	r3, [r8, #12]
   196b8:	cmp	r3, #0
   196bc:	mov	r6, r0
   196c0:	subeq	r3, r7, r0
   196c4:	beq	1965c <_start@@Base+0x40bc>
   196c8:	b	19688 <_start@@Base+0x40e8>
   196cc:	ldrb	r3, [r6, #1]
   196d0:	cmp	r3, #32
   196d4:	addhi	r6, r6, #1
   196d8:	bls	19674 <_start@@Base+0x40d4>
   196dc:	b	19688 <_start@@Base+0x40e8>
   196e0:	mov	r7, r4
   196e4:	b	19588 <_start@@Base+0x3fe8>
   196e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196ec:	sub	sp, sp, #36	; 0x24
   196f0:	mov	ip, #0
   196f4:	ldr	fp, [sp, #72]	; 0x48
   196f8:	cmp	r1, r2
   196fc:	mov	r7, r1
   19700:	mov	r6, r2
   19704:	str	r3, [sp, #8]
   19708:	str	ip, [fp]
   1970c:	mov	r8, r0
   19710:	beq	19884 <_start@@Base+0x42e4>
   19714:	ldrb	r3, [r1]
   19718:	cmp	r3, #34	; 0x22
   1971c:	beq	19838 <_start@@Base+0x4298>
   19720:	cmp	r3, #46	; 0x2e
   19724:	movne	r3, #1
   19728:	strne	r3, [r0, #12]
   1972c:	beq	19894 <_start@@Base+0x42f4>
   19730:	add	sl, sp, #20
   19734:	add	r9, sp, #24
   19738:	mov	r3, #0
   1973c:	str	r3, [sp, #12]
   19740:	ldr	r5, [sp, #8]
   19744:	b	1975c <_start@@Base+0x41bc>
   19748:	cmp	r7, r0
   1974c:	bne	1978c <_start@@Base+0x41ec>
   19750:	ldr	r3, [r5, #4]!
   19754:	cmp	r3, #0
   19758:	beq	197dc <_start@@Base+0x423c>
   1975c:	stm	sp, {r9, sl}
   19760:	add	r3, sp, #16
   19764:	ldr	r4, [r5]
   19768:	mov	r2, r6
   1976c:	mov	r1, r7
   19770:	mov	r0, r8
   19774:	blx	r4
   19778:	cmp	r6, r0
   1977c:	bne	19748 <_start@@Base+0x41a8>
   19780:	mov	r0, r6
   19784:	add	sp, sp, #36	; 0x24
   19788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1978c:	ldr	r3, [sp, #16]
   19790:	mov	r4, r0
   19794:	cmp	r3, #0
   19798:	bne	19800 <_start@@Base+0x4260>
   1979c:	ldrd	r2, [sp, #24]
   197a0:	mov	r1, #0
   197a4:	mvn	r0, #0
   197a8:	cmp	r3, r1
   197ac:	cmpeq	r2, r0
   197b0:	strls	r2, [sp, #12]
   197b4:	bhi	19820 <_start@@Base+0x4280>
   197b8:	ldr	r3, [fp]
   197bc:	ldr	r2, [sp, #20]
   197c0:	ldr	r1, [sp, #12]
   197c4:	cmp	r2, #0
   197c8:	add	r3, r3, r1
   197cc:	str	r3, [fp]
   197d0:	beq	198c8 <_start@@Base+0x4328>
   197d4:	mov	r7, r4
   197d8:	b	19740 <_start@@Base+0x41a0>
   197dc:	mov	r2, r6
   197e0:	mov	r1, r7
   197e4:	mov	r0, r8
   197e8:	mov	r3, #23
   197ec:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   197f0:	mov	r6, r0
   197f4:	mov	r0, r6
   197f8:	add	sp, sp, #36	; 0x24
   197fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19800:	mov	r3, #8
   19804:	mov	r2, r6
   19808:	mov	r1, r4
   1980c:	mov	r0, r8
   19810:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19814:	cmp	r6, r0
   19818:	bne	197b8 <_start@@Base+0x4218>
   1981c:	b	19780 <_start@@Base+0x41e0>
   19820:	mov	r3, #7
   19824:	mov	r2, r6
   19828:	mov	r1, r4
   1982c:	mov	r0, r8
   19830:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19834:	b	19814 <_start@@Base+0x4274>
   19838:	add	r7, r1, #1
   1983c:	sub	r3, r2, r7
   19840:	str	ip, [r0, #12]
   19844:	cmp	r3, #1
   19848:	ble	1985c <_start@@Base+0x42bc>
   1984c:	ldrb	r3, [r7]
   19850:	cmp	r3, #32
   19854:	bhi	19870 <_start@@Base+0x42d0>
   19858:	beq	198b4 <_start@@Base+0x4314>
   1985c:	mov	r1, r7
   19860:	mov	r2, r6
   19864:	mov	r0, r8
   19868:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1986c:	mov	r7, r0
   19870:	cmp	r6, r7
   19874:	bne	19730 <_start@@Base+0x4190>
   19878:	mov	r0, r6
   1987c:	add	sp, sp, #36	; 0x24
   19880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19884:	ldr	r3, [r0, #12]
   19888:	cmp	r3, #0
   1988c:	beq	1985c <_start@@Base+0x42bc>
   19890:	b	19780 <_start@@Base+0x41e0>
   19894:	mov	r3, #5
   19898:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1989c:	ldr	r3, [r8, #12]
   198a0:	cmp	r3, #0
   198a4:	mov	r7, r0
   198a8:	subeq	r3, r6, r0
   198ac:	beq	19844 <_start@@Base+0x42a4>
   198b0:	b	19870 <_start@@Base+0x42d0>
   198b4:	ldrb	r3, [r7, #1]
   198b8:	cmp	r3, #32
   198bc:	addhi	r7, r7, #1
   198c0:	bls	1985c <_start@@Base+0x42bc>
   198c4:	b	19870 <_start@@Base+0x42d0>
   198c8:	mov	r6, r4
   198cc:	b	19780 <_start@@Base+0x41e0>
   198d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d4:	sub	sp, sp, #36	; 0x24
   198d8:	mov	fp, r3
   198dc:	ldr	r3, [sp, #72]	; 0x48
   198e0:	mov	ip, #0
   198e4:	cmp	r1, r2
   198e8:	mov	r7, r1
   198ec:	mov	r6, r2
   198f0:	strb	ip, [r3]
   198f4:	mov	r8, r0
   198f8:	beq	19a70 <_start@@Base+0x44d0>
   198fc:	ldrb	r3, [r1]
   19900:	cmp	r3, #34	; 0x22
   19904:	beq	19a24 <_start@@Base+0x4484>
   19908:	cmp	r3, #46	; 0x2e
   1990c:	movne	r3, #1
   19910:	strne	r3, [r0, #12]
   19914:	beq	19a80 <_start@@Base+0x44e0>
   19918:	add	sl, sp, #20
   1991c:	add	r9, sp, #24
   19920:	mov	r3, #0
   19924:	str	r3, [sp, #12]
   19928:	mov	r5, fp
   1992c:	b	19944 <_start@@Base+0x43a4>
   19930:	cmp	r7, r0
   19934:	bne	19974 <_start@@Base+0x43d4>
   19938:	ldr	r3, [r5, #4]!
   1993c:	cmp	r3, #0
   19940:	beq	199c8 <_start@@Base+0x4428>
   19944:	stm	sp, {r9, sl}
   19948:	add	r3, sp, #16
   1994c:	ldr	r4, [r5]
   19950:	mov	r2, r6
   19954:	mov	r1, r7
   19958:	mov	r0, r8
   1995c:	blx	r4
   19960:	cmp	r6, r0
   19964:	bne	19930 <_start@@Base+0x4390>
   19968:	mov	r0, r6
   1996c:	add	sp, sp, #36	; 0x24
   19970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19974:	ldr	r3, [sp, #16]
   19978:	mov	r4, r0
   1997c:	cmp	r3, #0
   19980:	bne	199ec <_start@@Base+0x444c>
   19984:	ldrd	r2, [sp, #24]
   19988:	cmp	r3, #0
   1998c:	cmpeq	r2, #255	; 0xff
   19990:	uxtbls	r3, r2
   19994:	strls	r3, [sp, #12]
   19998:	bhi	19a0c <_start@@Base+0x446c>
   1999c:	ldr	r3, [sp, #72]	; 0x48
   199a0:	ldr	r2, [sp, #20]
   199a4:	ldr	r1, [sp, #12]
   199a8:	ldrb	r3, [r3]
   199ac:	cmp	r2, #0
   199b0:	ldr	r2, [sp, #72]	; 0x48
   199b4:	add	r3, r1, r3
   199b8:	strb	r3, [r2]
   199bc:	beq	19ab4 <_start@@Base+0x4514>
   199c0:	mov	r7, r4
   199c4:	b	19928 <_start@@Base+0x4388>
   199c8:	mov	r2, r6
   199cc:	mov	r1, r7
   199d0:	mov	r0, r8
   199d4:	mov	r3, #23
   199d8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   199dc:	mov	r6, r0
   199e0:	mov	r0, r6
   199e4:	add	sp, sp, #36	; 0x24
   199e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199ec:	mov	r3, #8
   199f0:	mov	r2, r6
   199f4:	mov	r1, r4
   199f8:	mov	r0, r8
   199fc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19a00:	cmp	r6, r0
   19a04:	bne	1999c <_start@@Base+0x43fc>
   19a08:	b	19968 <_start@@Base+0x43c8>
   19a0c:	mov	r3, #7
   19a10:	mov	r2, r6
   19a14:	mov	r1, r4
   19a18:	mov	r0, r8
   19a1c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19a20:	b	19a00 <_start@@Base+0x4460>
   19a24:	add	r7, r1, #1
   19a28:	sub	r3, r2, r7
   19a2c:	str	ip, [r0, #12]
   19a30:	cmp	r3, #1
   19a34:	ble	19a48 <_start@@Base+0x44a8>
   19a38:	ldrb	r3, [r7]
   19a3c:	cmp	r3, #32
   19a40:	bhi	19a5c <_start@@Base+0x44bc>
   19a44:	beq	19aa0 <_start@@Base+0x4500>
   19a48:	mov	r1, r7
   19a4c:	mov	r2, r6
   19a50:	mov	r0, r8
   19a54:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19a58:	mov	r7, r0
   19a5c:	cmp	r6, r7
   19a60:	bne	19918 <_start@@Base+0x4378>
   19a64:	mov	r0, r6
   19a68:	add	sp, sp, #36	; 0x24
   19a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a70:	ldr	r3, [r0, #12]
   19a74:	cmp	r3, #0
   19a78:	beq	19a48 <_start@@Base+0x44a8>
   19a7c:	b	19968 <_start@@Base+0x43c8>
   19a80:	mov	r3, #5
   19a84:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19a88:	ldr	r3, [r8, #12]
   19a8c:	cmp	r3, #0
   19a90:	mov	r7, r0
   19a94:	subeq	r3, r6, r0
   19a98:	beq	19a30 <_start@@Base+0x4490>
   19a9c:	b	19a5c <_start@@Base+0x44bc>
   19aa0:	ldrb	r3, [r7, #1]
   19aa4:	cmp	r3, #32
   19aa8:	addhi	r7, r7, #1
   19aac:	bls	19a48 <_start@@Base+0x44a8>
   19ab0:	b	19a5c <_start@@Base+0x44bc>
   19ab4:	mov	r6, r4
   19ab8:	b	19968 <_start@@Base+0x43c8>
   19abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ac0:	sub	sp, sp, #44	; 0x2c
   19ac4:	mov	r4, #0
   19ac8:	ldr	fp, [sp, #80]	; 0x50
   19acc:	mov	r5, #0
   19ad0:	cmp	r1, r2
   19ad4:	mov	r6, r1
   19ad8:	mov	r7, r2
   19adc:	str	r3, [sp, #20]
   19ae0:	strd	r4, [fp]
   19ae4:	mov	r8, r0
   19ae8:	beq	19c6c <_start@@Base+0x46cc>
   19aec:	ldrb	r3, [r1]
   19af0:	cmp	r3, #34	; 0x22
   19af4:	beq	19c1c <_start@@Base+0x467c>
   19af8:	cmp	r3, #46	; 0x2e
   19afc:	movne	r3, #1
   19b00:	strne	r3, [r0, #12]
   19b04:	beq	19c7c <_start@@Base+0x46dc>
   19b08:	mov	r2, #0
   19b0c:	mov	r3, #0
   19b10:	add	sl, sp, #28
   19b14:	add	r9, sp, #32
   19b18:	strd	r2, [sp, #8]
   19b1c:	ldr	r5, [sp, #20]
   19b20:	b	19b38 <_start@@Base+0x4598>
   19b24:	cmp	r6, r0
   19b28:	bne	19b68 <_start@@Base+0x45c8>
   19b2c:	ldr	r3, [r5, #4]!
   19b30:	cmp	r3, #0
   19b34:	beq	19bc4 <_start@@Base+0x4624>
   19b38:	stm	sp, {r9, sl}
   19b3c:	add	r3, sp, #24
   19b40:	ldr	r4, [r5]
   19b44:	mov	r2, r7
   19b48:	mov	r1, r6
   19b4c:	mov	r0, r8
   19b50:	blx	r4
   19b54:	cmp	r7, r0
   19b58:	bne	19b24 <_start@@Base+0x4584>
   19b5c:	mov	r0, r7
   19b60:	add	sp, sp, #44	; 0x2c
   19b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b68:	ldr	r1, [sp, #24]
   19b6c:	mov	r4, r0
   19b70:	cmp	r1, #0
   19b74:	ldrd	r2, [sp, #32]
   19b78:	beq	19be8 <_start@@Base+0x4648>
   19b7c:	cmp	r3, #-2147483648	; 0x80000000
   19b80:	cmpeq	r2, #0
   19b84:	bhi	19bfc <_start@@Base+0x465c>
   19b88:	rsbs	r2, r2, #0
   19b8c:	rsc	r3, r3, #0
   19b90:	strd	r2, [sp, #8]
   19b94:	ldrd	r2, [fp]
   19b98:	ldrd	r0, [sp, #8]
   19b9c:	ldr	ip, [sp, #28]
   19ba0:	adds	r0, r0, r2
   19ba4:	adc	r1, r1, r3
   19ba8:	mov	r2, r0
   19bac:	mov	r3, r1
   19bb0:	cmp	ip, #0
   19bb4:	strd	r2, [fp]
   19bb8:	beq	19cc8 <_start@@Base+0x4728>
   19bbc:	mov	r6, r4
   19bc0:	b	19b1c <_start@@Base+0x457c>
   19bc4:	mov	r2, r7
   19bc8:	mov	r1, r6
   19bcc:	mov	r0, r8
   19bd0:	mov	r3, #23
   19bd4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19bd8:	mov	r7, r0
   19bdc:	mov	r0, r7
   19be0:	add	sp, sp, #44	; 0x2c
   19be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19be8:	cmp	r2, #0
   19bec:	sbcs	r1, r3, #0
   19bf0:	blt	19c9c <_start@@Base+0x46fc>
   19bf4:	strd	r2, [sp, #8]
   19bf8:	b	19b94 <_start@@Base+0x45f4>
   19bfc:	mov	r3, #8
   19c00:	mov	r2, r7
   19c04:	mov	r1, r4
   19c08:	mov	r0, r8
   19c0c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19c10:	cmp	r7, r0
   19c14:	bne	19b94 <_start@@Base+0x45f4>
   19c18:	b	19b5c <_start@@Base+0x45bc>
   19c1c:	add	r6, r1, #1
   19c20:	sub	r3, r7, r6
   19c24:	mov	r2, #0
   19c28:	str	r2, [r0, #12]
   19c2c:	cmp	r3, #1
   19c30:	ble	19c44 <_start@@Base+0x46a4>
   19c34:	ldrb	r3, [r6]
   19c38:	cmp	r3, #32
   19c3c:	bhi	19c58 <_start@@Base+0x46b8>
   19c40:	beq	19cb4 <_start@@Base+0x4714>
   19c44:	mov	r1, r6
   19c48:	mov	r2, r7
   19c4c:	mov	r0, r8
   19c50:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19c54:	mov	r6, r0
   19c58:	cmp	r7, r6
   19c5c:	bne	19b08 <_start@@Base+0x4568>
   19c60:	mov	r0, r7
   19c64:	add	sp, sp, #44	; 0x2c
   19c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c6c:	ldr	r3, [r0, #12]
   19c70:	cmp	r3, #0
   19c74:	beq	19c44 <_start@@Base+0x46a4>
   19c78:	b	19b5c <_start@@Base+0x45bc>
   19c7c:	mov	r3, #5
   19c80:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19c84:	ldr	r3, [r8, #12]
   19c88:	cmp	r3, #0
   19c8c:	mov	r6, r0
   19c90:	subeq	r3, r7, r0
   19c94:	beq	19c2c <_start@@Base+0x468c>
   19c98:	b	19c58 <_start@@Base+0x46b8>
   19c9c:	mov	r3, #7
   19ca0:	mov	r2, r7
   19ca4:	mov	r1, r4
   19ca8:	mov	r0, r8
   19cac:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   19cb0:	b	19c10 <_start@@Base+0x4670>
   19cb4:	ldrb	r3, [r6, #1]
   19cb8:	cmp	r3, #32
   19cbc:	addhi	r6, r6, #1
   19cc0:	bls	19c44 <_start@@Base+0x46a4>
   19cc4:	b	19c58 <_start@@Base+0x46b8>
   19cc8:	mov	r7, r4
   19ccc:	b	19b5c <_start@@Base+0x45bc>
   19cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cd4:	sub	sp, sp, #12
   19cd8:	mov	sl, r2
   19cdc:	str	r3, [sp]
   19ce0:	sub	r2, r2, r1
   19ce4:	ldr	r3, [sp, #48]	; 0x30
   19ce8:	cmp	r2, #8
   19cec:	mov	r4, r1
   19cf0:	mov	r5, r0
   19cf4:	str	r3, [sp, #4]
   19cf8:	ldr	fp, [sp, #52]	; 0x34
   19cfc:	bls	19dd4 <_start@@Base+0x4834>
   19d00:	ldrb	r6, [r4, #7]
   19d04:	mov	r7, #0
   19d08:	ldrb	r0, [r4, #6]
   19d0c:	lsr	r3, r0, #24
   19d10:	lsl	r2, r0, #8
   19d14:	orr	r6, r6, r2
   19d18:	orr	r7, r7, r3
   19d1c:	ldrb	r0, [r4, #5]
   19d20:	lsr	r3, r0, #16
   19d24:	lsl	r2, r0, #16
   19d28:	orr	r6, r6, r2
   19d2c:	orr	r7, r7, r3
   19d30:	ldrb	r0, [r4, #4]
   19d34:	lsr	r3, r0, #8
   19d38:	lsl	r2, r0, #24
   19d3c:	orr	r6, r6, r2
   19d40:	orr	r7, r7, r3
   19d44:	ldrb	r3, [r4, #3]
   19d48:	mov	r2, #0
   19d4c:	orr	r2, r2, r6
   19d50:	orr	r3, r3, r7
   19d54:	ldrb	r0, [r4, #2]
   19d58:	mov	r6, #0
   19d5c:	orr	r2, r2, r6
   19d60:	lsl	r7, r0, #8
   19d64:	orr	r3, r3, r7
   19d68:	ldrb	r0, [r4, #1]
   19d6c:	mov	r6, #0
   19d70:	orr	r6, r6, r2
   19d74:	lsl	r7, r0, #16
   19d78:	orr	r7, r7, r3
   19d7c:	ldrb	r2, [r4]
   19d80:	add	r9, pc, #280	; 0x118
   19d84:	ldrd	r8, [r9]
   19d88:	mov	r0, #0
   19d8c:	orr	r0, r0, r6
   19d90:	lsl	r1, r2, #24
   19d94:	orr	r1, r1, r7
   19d98:	cmp	r1, r9
   19d9c:	cmpeq	r0, r8
   19da0:	bne	19dc8 <_start@@Base+0x4828>
   19da4:	add	r6, r4, #8
   19da8:	mov	r0, r6
   19dac:	mov	r1, sl
   19db0:	bl	156c8 <_start@@Base+0x128>
   19db4:	mov	r0, #0
   19db8:	and	r1, r1, #-16777216	; 0xff000000
   19dbc:	cmp	r1, #1912602624	; 0x72000000
   19dc0:	cmpeq	r0, #0
   19dc4:	beq	19e04 <_start@@Base+0x4864>
   19dc8:	mov	r0, r4
   19dcc:	add	sp, sp, #12
   19dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd4:	sub	r2, r2, #1
   19dd8:	cmp	r2, #7
   19ddc:	ldrls	pc, [pc, r2, lsl #2]
   19de0:	b	19dc8 <_start@@Base+0x4828>
   19de4:	andeq	r9, r1, ip, asr #28
   19de8:	andeq	r9, r1, r8, asr lr
   19dec:	andeq	r9, r1, r4, ror #28
   19df0:	andeq	r9, r1, r0, ror lr
   19df4:	andeq	r9, r1, ip, ror lr
   19df8:	andeq	r9, r1, r8, lsl #29
   19dfc:	muleq	r1, r4, lr
   19e00:	andeq	r9, r1, r0, lsl #26
   19e04:	sub	r3, sl, r6
   19e08:	cmp	r3, #1
   19e0c:	ble	19dc8 <_start@@Base+0x4828>
   19e10:	ldrb	r3, [r4, #9]
   19e14:	cmp	r3, #46	; 0x2e
   19e18:	bne	19dc8 <_start@@Base+0x4828>
   19e1c:	add	r1, r4, #10
   19e20:	cmp	r6, r1
   19e24:	beq	19dc8 <_start@@Base+0x4828>
   19e28:	ldr	r3, [sp, #4]
   19e2c:	str	fp, [sp, #52]	; 0x34
   19e30:	str	r3, [sp, #48]	; 0x30
   19e34:	mov	r2, sl
   19e38:	ldr	r3, [sp]
   19e3c:	mov	r0, r5
   19e40:	add	sp, sp, #12
   19e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e48:	b	16784 <_start@@Base+0x11e4>
   19e4c:	mov	r6, #0
   19e50:	mov	r7, #0
   19e54:	b	19d7c <_start@@Base+0x47dc>
   19e58:	mov	r2, #0
   19e5c:	mov	r3, #0
   19e60:	b	19d68 <_start@@Base+0x47c8>
   19e64:	mov	r2, #0
   19e68:	mov	r3, #0
   19e6c:	b	19d54 <_start@@Base+0x47b4>
   19e70:	mov	r6, #0
   19e74:	mov	r7, #0
   19e78:	b	19d44 <_start@@Base+0x47a4>
   19e7c:	mov	r6, #0
   19e80:	mov	r7, #0
   19e84:	b	19d30 <_start@@Base+0x4790>
   19e88:	mov	r6, #0
   19e8c:	mov	r7, #0
   19e90:	b	19d1c <_start@@Base+0x477c>
   19e94:	mov	r6, #0
   19e98:	mov	r7, #0
   19e9c:	b	19d08 <_start@@Base+0x4768>
   19ea0:	cmnvs	r3, r5, ror #8
   19ea4:	cmnmi	r8, #-2147483620	; 0x8000001c
   19ea8:	push	{r4, r5, r6, lr}
   19eac:	mov	r4, r2
   19eb0:	sub	r2, r2, r1
   19eb4:	cmp	r2, #1
   19eb8:	mov	r5, r0
   19ebc:	mov	r6, r3
   19ec0:	ble	19ed4 <_start@@Base+0x4934>
   19ec4:	ldrb	r3, [r1]
   19ec8:	cmp	r3, #32
   19ecc:	bhi	19ee4 <_start@@Base+0x4944>
   19ed0:	beq	19f54 <_start@@Base+0x49b4>
   19ed4:	mov	r2, r4
   19ed8:	mov	r0, r5
   19edc:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19ee0:	mov	r1, r0
   19ee4:	cmp	r4, r1
   19ee8:	beq	19fb8 <_start@@Base+0x4a18>
   19eec:	ldrb	r3, [r1]
   19ef0:	cmp	r3, #44	; 0x2c
   19ef4:	beq	19f68 <_start@@Base+0x49c8>
   19ef8:	mov	r3, #0
   19efc:	str	r3, [r6]
   19f00:	ldrb	r3, [r1]
   19f04:	cmp	r3, #125	; 0x7d
   19f08:	beq	19f20 <_start@@Base+0x4980>
   19f0c:	mov	r2, r4
   19f10:	mov	r0, r5
   19f14:	mov	r3, #10
   19f18:	pop	{r4, r5, r6, lr}
   19f1c:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   19f20:	add	r0, r1, #1
   19f24:	sub	r3, r4, r0
   19f28:	cmp	r3, #1
   19f2c:	ble	19f40 <_start@@Base+0x49a0>
   19f30:	ldrb	r3, [r1, #1]
   19f34:	cmp	r3, #32
   19f38:	pophi	{r4, r5, r6, pc}
   19f3c:	beq	19fdc <_start@@Base+0x4a3c>
   19f40:	mov	r2, r4
   19f44:	mov	r1, r0
   19f48:	mov	r0, r5
   19f4c:	pop	{r4, r5, r6, lr}
   19f50:	b	2f2dc <flatcc_json_parser_space_ext@@Base>
   19f54:	ldrb	r3, [r1, #1]
   19f58:	cmp	r3, #32
   19f5c:	addhi	r1, r1, #1
   19f60:	bls	19ed4 <_start@@Base+0x4934>
   19f64:	b	19ee4 <_start@@Base+0x4944>
   19f68:	add	r0, r1, #1
   19f6c:	sub	r3, r4, r0
   19f70:	cmp	r3, #1
   19f74:	ble	19f88 <_start@@Base+0x49e8>
   19f78:	ldrb	r3, [r1, #1]
   19f7c:	cmp	r3, #32
   19f80:	bhi	19f98 <_start@@Base+0x49f8>
   19f84:	beq	19fc8 <_start@@Base+0x4a28>
   19f88:	mov	r1, r0
   19f8c:	mov	r2, r4
   19f90:	mov	r0, r5
   19f94:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   19f98:	cmp	r4, r0
   19f9c:	beq	1a00c <_start@@Base+0x4a6c>
   19fa0:	ldrb	r3, [r0]
   19fa4:	cmp	r3, #125	; 0x7d
   19fa8:	beq	19ff0 <_start@@Base+0x4a50>
   19fac:	mov	r3, #1
   19fb0:	str	r3, [r6]
   19fb4:	pop	{r4, r5, r6, pc}
   19fb8:	mov	r3, #0
   19fbc:	mov	r0, r4
   19fc0:	str	r3, [r6]
   19fc4:	pop	{r4, r5, r6, pc}
   19fc8:	ldrb	r3, [r1, #2]
   19fcc:	cmp	r3, #32
   19fd0:	addhi	r0, r1, #2
   19fd4:	bls	19f88 <_start@@Base+0x49e8>
   19fd8:	b	19f98 <_start@@Base+0x49f8>
   19fdc:	ldrb	r3, [r1, #2]
   19fe0:	cmp	r3, #32
   19fe4:	bls	19f40 <_start@@Base+0x49a0>
   19fe8:	add	r0, r1, #2
   19fec:	pop	{r4, r5, r6, pc}
   19ff0:	mov	r3, #0
   19ff4:	mov	r2, r4
   19ff8:	add	r1, r0, #1
   19ffc:	str	r3, [r6]
   1a000:	mov	r0, r5
   1a004:	pop	{r4, r5, r6, lr}
   1a008:	b	17318 <_start@@Base+0x1d78>
   1a00c:	mov	r3, #0
   1a010:	str	r3, [r6]
   1a014:	mov	r0, r5
   1a018:	mov	r2, r4
   1a01c:	mov	r1, r4
   1a020:	mov	r3, #10
   1a024:	pop	{r4, r5, r6, lr}
   1a028:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   1a02c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a030:	mov	fp, r3
   1a034:	mov	r3, #0
   1a038:	sub	sp, sp, #36	; 0x24
   1a03c:	mov	sl, r0
   1a040:	mov	r4, r1
   1a044:	str	r3, [fp]
   1a048:	ldr	r0, [r0]
   1a04c:	mov	r1, #10
   1a050:	mov	r5, r2
   1a054:	bl	2887c <flatcc_builder_start_table@@Base>
   1a058:	cmp	r0, #0
   1a05c:	bne	1a250 <_start@@Base+0x4cb0>
   1a060:	add	r3, sp, #28
   1a064:	str	r3, [sp]
   1a068:	mov	r2, r5
   1a06c:	mov	r3, #5
   1a070:	mov	r1, r4
   1a074:	mov	r0, sl
   1a078:	bl	32884 <flatcc_json_parser_prepare_unions@@Base>
   1a07c:	cmp	r5, r0
   1a080:	beq	1a250 <_start@@Base+0x4cb0>
   1a084:	mov	r1, r4
   1a088:	add	r3, sp, #24
   1a08c:	mov	r2, r5
   1a090:	mov	r0, sl
   1a094:	bl	1878c <_start@@Base+0x31ec>
   1a098:	ldr	r3, [sp, #24]
   1a09c:	cmp	r3, #0
   1a0a0:	mov	r4, r0
   1a0a4:	beq	1a244 <_start@@Base+0x4ca4>
   1a0a8:	add	r9, pc, #952	; 0x3b8
   1a0ac:	ldrd	r8, [r9]
   1a0b0:	b	1a134 <_start@@Base+0x4b94>
   1a0b4:	add	r3, pc, #948	; 0x3b4
   1a0b8:	ldrd	r2, [r3]
   1a0bc:	cmp	r1, r3
   1a0c0:	cmpeq	r0, r2
   1a0c4:	beq	1a33c <_start@@Base+0x4d9c>
   1a0c8:	add	r3, pc, #936	; 0x3a8
   1a0cc:	ldrd	r2, [r3]
   1a0d0:	cmp	r1, r3
   1a0d4:	cmpeq	r0, r2
   1a0d8:	beq	1a3dc <_start@@Base+0x4e3c>
   1a0dc:	add	r3, pc, #924	; 0x39c
   1a0e0:	ldrd	r2, [r3]
   1a0e4:	and	r0, r0, #-16777216	; 0xff000000
   1a0e8:	cmp	r1, r3
   1a0ec:	cmpeq	r0, r2
   1a0f0:	bne	1a100 <_start@@Base+0x4b60>
   1a0f4:	sub	r3, r5, r4
   1a0f8:	cmp	r3, #5
   1a0fc:	bgt	1a674 <_start@@Base+0x50d4>
   1a100:	mov	r1, r4
   1a104:	mov	r2, r5
   1a108:	mov	r0, sl
   1a10c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1a110:	mov	r1, r0
   1a114:	add	r3, sp, #24
   1a118:	mov	r2, r5
   1a11c:	mov	r0, sl
   1a120:	bl	19ea8 <_start@@Base+0x4908>
   1a124:	ldr	r3, [sp, #24]
   1a128:	cmp	r3, #0
   1a12c:	mov	r4, r0
   1a130:	beq	1a244 <_start@@Base+0x4ca4>
   1a134:	cmp	r5, r4
   1a138:	beq	1a164 <_start@@Base+0x4bc4>
   1a13c:	ldrb	r3, [r4]
   1a140:	cmp	r3, #34	; 0x22
   1a144:	moveq	r3, #0
   1a148:	addeq	r4, r4, #1
   1a14c:	streq	r3, [sl, #12]
   1a150:	beq	1a164 <_start@@Base+0x4bc4>
   1a154:	cmp	r3, #46	; 0x2e
   1a158:	movne	r3, #1
   1a15c:	strne	r3, [sl, #12]
   1a160:	beq	1a548 <_start@@Base+0x4fa8>
   1a164:	mov	r1, r5
   1a168:	mov	r0, r4
   1a16c:	bl	156c8 <_start@@Base+0x128>
   1a170:	cmp	r1, r9
   1a174:	cmpeq	r0, r8
   1a178:	bls	1a0b4 <_start@@Base+0x4b14>
   1a17c:	add	r3, pc, #772	; 0x304
   1a180:	ldrd	r2, [r3]
   1a184:	cmp	r1, r3
   1a188:	cmpeq	r0, r2
   1a18c:	bhi	1a26c <_start@@Base+0x4ccc>
   1a190:	add	r3, pc, #760	; 0x2f8
   1a194:	ldrd	r2, [r3]
   1a198:	cmp	r1, r3
   1a19c:	cmpeq	r0, r2
   1a1a0:	bne	1a100 <_start@@Base+0x4b60>
   1a1a4:	add	r4, r4, #8
   1a1a8:	mov	r0, r4
   1a1ac:	mov	r1, r5
   1a1b0:	bl	156c8 <_start@@Base+0x128>
   1a1b4:	add	r3, pc, #732	; 0x2dc
   1a1b8:	ldrd	r2, [r3]
   1a1bc:	bic	r6, r0, #255	; 0xff
   1a1c0:	cmp	r1, r3
   1a1c4:	cmpeq	r6, r2
   1a1c8:	beq	1a6bc <_start@@Base+0x511c>
   1a1cc:	ldr	r3, [pc, #748]	; 1a4c0 <_start@@Base+0x4f20>
   1a1d0:	mov	r2, #0
   1a1d4:	and	r1, r1, r3
   1a1d8:	ldr	r3, [pc, #740]	; 1a4c4 <_start@@Base+0x4f24>
   1a1dc:	and	r0, r0, r2
   1a1e0:	cmp	r1, r3
   1a1e4:	mov	r2, #0
   1a1e8:	cmpeq	r0, r2
   1a1ec:	bne	1a100 <_start@@Base+0x4b60>
   1a1f0:	sub	r3, r5, r4
   1a1f4:	cmp	r3, #2
   1a1f8:	ble	1a100 <_start@@Base+0x4b60>
   1a1fc:	mov	r1, r4
   1a200:	mov	r3, #2
   1a204:	mov	r2, r5
   1a208:	mov	r0, sl
   1a20c:	bl	18840 <_start@@Base+0x32a0>
   1a210:	cmp	r4, r0
   1a214:	mov	r1, r0
   1a218:	beq	1a100 <_start@@Base+0x4b60>
   1a21c:	ldr	r2, [sp, #28]
   1a220:	ldr	ip, [pc, #672]	; 1a4c8 <_start@@Base+0x4f28>
   1a224:	mov	r3, #9
   1a228:	str	r3, [sp]
   1a22c:	stmib	sp, {r2, ip}
   1a230:	mov	r3, #4
   1a234:	mov	r2, r5
   1a238:	mov	r0, sl
   1a23c:	bl	32e9c <flatcc_json_parser_union_vector@@Base>
   1a240:	b	1a110 <_start@@Base+0x4b70>
   1a244:	ldr	r3, [sl, #24]
   1a248:	cmp	r3, #0
   1a24c:	beq	1a564 <_start@@Base+0x4fc4>
   1a250:	mov	r2, r5
   1a254:	mov	r1, r4
   1a258:	mov	r0, sl
   1a25c:	mov	r3, #33	; 0x21
   1a260:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1a264:	add	sp, sp, #36	; 0x24
   1a268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a26c:	add	r3, pc, #556	; 0x22c
   1a270:	ldrd	r2, [r3]
   1a274:	cmp	r1, r3
   1a278:	cmpeq	r0, r2
   1a27c:	beq	1a4d8 <_start@@Base+0x4f38>
   1a280:	add	r3, pc, #544	; 0x220
   1a284:	ldrd	r2, [r3]
   1a288:	cmp	r1, r3
   1a28c:	cmpeq	r0, r2
   1a290:	bne	1a100 <_start@@Base+0x4b60>
   1a294:	add	r4, r4, #8
   1a298:	mov	r0, r4
   1a29c:	mov	r1, r5
   1a2a0:	bl	156c8 <_start@@Base+0x128>
   1a2a4:	ldr	r2, [pc, #532]	; 1a4c0 <_start@@Base+0x4f20>
   1a2a8:	mvn	r3, #0
   1a2ac:	mov	r6, r0
   1a2b0:	mov	r7, r1
   1a2b4:	add	r1, pc, #500	; 0x1f4
   1a2b8:	ldrd	r0, [r1]
   1a2bc:	and	r3, r3, r7
   1a2c0:	and	r2, r2, r6
   1a2c4:	cmp	r3, r1
   1a2c8:	cmpeq	r2, r0
   1a2cc:	beq	1a71c <_start@@Base+0x517c>
   1a2d0:	and	r7, r7, #-16777216	; 0xff000000
   1a2d4:	mov	r6, #0
   1a2d8:	cmp	r7, #1795162112	; 0x6b000000
   1a2dc:	cmpeq	r6, #0
   1a2e0:	bne	1a100 <_start@@Base+0x4b60>
   1a2e4:	sub	r3, r5, r4
   1a2e8:	cmp	r3, #1
   1a2ec:	ble	1a100 <_start@@Base+0x4b60>
   1a2f0:	mov	r1, r4
   1a2f4:	mov	r3, #1
   1a2f8:	mov	r2, r5
   1a2fc:	mov	r0, sl
   1a300:	bl	18840 <_start@@Base+0x32a0>
   1a304:	cmp	r4, r0
   1a308:	mov	r1, r0
   1a30c:	beq	1a100 <_start@@Base+0x4b60>
   1a310:	ldr	r2, [sp, #28]
   1a314:	ldr	r0, [pc, #428]	; 1a4c8 <_start@@Base+0x4f28>
   1a318:	mov	r3, #5
   1a31c:	str	r0, [sp, #8]
   1a320:	str	r2, [sp, #4]
   1a324:	str	r3, [sp]
   1a328:	mov	r2, r5
   1a32c:	mov	r3, #2
   1a330:	mov	r0, sl
   1a334:	bl	32980 <flatcc_json_parser_union@@Base>
   1a338:	b	1a110 <_start@@Base+0x4b70>
   1a33c:	add	r4, r4, #8
   1a340:	mov	r0, r4
   1a344:	mov	r1, r5
   1a348:	bl	156c8 <_start@@Base+0x128>
   1a34c:	add	r3, pc, #356	; 0x164
   1a350:	ldrd	r2, [r3]
   1a354:	bic	r6, r0, #255	; 0xff
   1a358:	cmp	r1, r3
   1a35c:	cmpeq	r6, r2
   1a360:	beq	1a61c <_start@@Base+0x507c>
   1a364:	ldr	r3, [pc, #340]	; 1a4c0 <_start@@Base+0x4f20>
   1a368:	mov	r2, #0
   1a36c:	and	r1, r1, r3
   1a370:	ldr	r3, [pc, #340]	; 1a4cc <_start@@Base+0x4f2c>
   1a374:	and	r0, r0, r2
   1a378:	cmp	r1, r3
   1a37c:	mov	r2, #0
   1a380:	cmpeq	r0, r2
   1a384:	bne	1a100 <_start@@Base+0x4b60>
   1a388:	sub	r3, r5, r4
   1a38c:	cmp	r3, #2
   1a390:	ble	1a100 <_start@@Base+0x4b60>
   1a394:	mov	r1, r4
   1a398:	mov	r3, #2
   1a39c:	mov	r2, r5
   1a3a0:	mov	r0, sl
   1a3a4:	bl	18840 <_start@@Base+0x32a0>
   1a3a8:	cmp	r4, r0
   1a3ac:	mov	r1, r0
   1a3b0:	beq	1a100 <_start@@Base+0x4b60>
   1a3b4:	ldr	r2, [sp, #28]
   1a3b8:	ldr	ip, [pc, #264]	; 1a4c8 <_start@@Base+0x4f28>
   1a3bc:	mov	r3, #3
   1a3c0:	str	r3, [sp]
   1a3c4:	stmib	sp, {r2, ip}
   1a3c8:	mov	r3, #1
   1a3cc:	mov	r2, r5
   1a3d0:	mov	r0, sl
   1a3d4:	bl	32980 <flatcc_json_parser_union@@Base>
   1a3d8:	b	1a110 <_start@@Base+0x4b70>
   1a3dc:	add	r4, r4, #8
   1a3e0:	mov	r0, r4
   1a3e4:	mov	r1, r5
   1a3e8:	bl	156c8 <_start@@Base+0x128>
   1a3ec:	ldr	r3, [pc, #204]	; 1a4c0 <_start@@Base+0x4f20>
   1a3f0:	ldr	r7, [pc, #216]	; 1a4d0 <_start@@Base+0x4f30>
   1a3f4:	mov	r2, #0
   1a3f8:	mov	r6, #0
   1a3fc:	and	r1, r1, r3
   1a400:	and	r0, r0, r2
   1a404:	cmp	r1, r7
   1a408:	cmpeq	r0, r6
   1a40c:	bne	1a100 <_start@@Base+0x4b60>
   1a410:	sub	r3, r5, r4
   1a414:	cmp	r3, #2
   1a418:	ble	1a100 <_start@@Base+0x4b60>
   1a41c:	mov	r1, r4
   1a420:	mov	r3, #2
   1a424:	mov	r2, r5
   1a428:	mov	r0, sl
   1a42c:	bl	18840 <_start@@Base+0x32a0>
   1a430:	cmp	r4, r0
   1a434:	mov	r1, r0
   1a438:	beq	1a100 <_start@@Base+0x4b60>
   1a43c:	ldr	r2, [sp, #28]
   1a440:	ldr	lr, [pc, #128]	; 1a4c8 <_start@@Base+0x4f28>
   1a444:	ldr	ip, [pc, #136]	; 1a4d4 <_start@@Base+0x4f34>
   1a448:	mov	r3, #7
   1a44c:	str	r3, [sp]
   1a450:	stmib	sp, {r2, ip, lr}
   1a454:	mov	r3, #3
   1a458:	mov	r2, r5
   1a45c:	mov	r0, sl
   1a460:	bl	32af0 <flatcc_json_parser_union_type@@Base>
   1a464:	b	1a110 <_start@@Base+0x4b70>
   1a468:	cmnvs	r3, r4, ror #8
   1a46c:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a470:	strbvs	r6, [pc, -r9, ror #28]!
   1a474:	cmnvs	lr, r1, ror #8
   1a478:	svcvs	0x005f7479
   1a47c:	cmnvs	r1, #6464	; 0x1940
   1a480:	svcvs	0x00000000
   1a484:	cmnvs	r1, #6464	; 0x1940
   1a488:	svcpl	0x00636860
   1a48c:			; <UNDEFINED> instruction: 0x6d61696e
   1a490:	cmnvs	r3, r5, ror #8
   1a494:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a498:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a49c:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1a4a0:	svcpl	0x00636861
   1a4a4:			; <UNDEFINED> instruction: 0x6d61696e
   1a4a8:	svcpl	0x006b6963
   1a4ac:	cmnvc	r9, #1694498816	; 0x65000000
   1a4b0:	rsbvc	r0, r5, r0
   1a4b4:	blvs	17f76a0 <__bss_end__@@Base+0x179f2e4>
   1a4b8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a4bc:	cmnvc	r4, #116, 30	; 0x1d0
   1a4c0:			; <UNDEFINED> instruction: 0xffff0000
   1a4c4:	rsbsvc	r0, r3, #0
   1a4c8:			; <UNDEFINED> instruction: 0x000202b8
   1a4cc:	cmnvc	r4, #0
   1a4d0:	rsbvc	r0, r5, r0
   1a4d4:	andeq	r8, r5, r0, lsl #1
   1a4d8:	add	r6, r4, #8
   1a4dc:	mov	r0, r6
   1a4e0:	mov	r1, r5
   1a4e4:	bl	156c8 <_start@@Base+0x128>
   1a4e8:	add	r3, pc, #720	; 0x2d0
   1a4ec:	ldrd	r2, [r3]
   1a4f0:	cmp	r1, r3
   1a4f4:	cmpeq	r0, r2
   1a4f8:	beq	1a598 <_start@@Base+0x4ff8>
   1a4fc:	ldr	r2, [pc, #724]	; 1a7d8 <_start@@Base+0x5238>
   1a500:	mvn	r3, #0
   1a504:	and	r2, r2, r0
   1a508:	and	r3, r3, r1
   1a50c:	mov	r0, r2
   1a510:	mov	r1, r3
   1a514:	add	r3, pc, #684	; 0x2ac
   1a518:	ldrd	r2, [r3]
   1a51c:	cmp	r1, r3
   1a520:	cmpeq	r0, r2
   1a524:	bne	1a534 <_start@@Base+0x4f94>
   1a528:	sub	r3, r5, r6
   1a52c:	cmp	r3, #6
   1a530:	bgt	1a774 <_start@@Base+0x51d4>
   1a534:	mov	r1, r6
   1a538:	mov	r2, r5
   1a53c:	mov	r0, sl
   1a540:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1a544:	b	1a110 <_start@@Base+0x4b70>
   1a548:	mov	r1, r4
   1a54c:	mov	r3, #5
   1a550:	mov	r2, r5
   1a554:	mov	r0, sl
   1a558:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1a55c:	mov	r4, r0
   1a560:	b	1a164 <_start@@Base+0x4bc4>
   1a564:	mov	r1, r4
   1a568:	ldr	r3, [sp, #28]
   1a56c:	mov	r2, r5
   1a570:	mov	r0, sl
   1a574:	bl	32910 <flatcc_json_parser_finalize_unions@@Base>
   1a578:	mov	r4, r0
   1a57c:	ldr	r0, [sl]
   1a580:	bl	292bc <flatcc_builder_end_table@@Base>
   1a584:	cmp	r0, #0
   1a588:	str	r0, [fp]
   1a58c:	movne	r0, r4
   1a590:	beq	1a250 <_start@@Base+0x4cb0>
   1a594:	b	1a264 <_start@@Base+0x4cc4>
   1a598:	add	r4, r4, #16
   1a59c:	mov	r0, r4
   1a5a0:	mov	r1, r5
   1a5a4:	bl	156c8 <_start@@Base+0x128>
   1a5a8:	add	r3, pc, #544	; 0x220
   1a5ac:	ldrd	r2, [r3]
   1a5b0:	mov	r0, #0
   1a5b4:	bic	r1, r1, #255	; 0xff
   1a5b8:	cmp	r1, r3
   1a5bc:	cmpeq	r0, r2
   1a5c0:	bne	1a100 <_start@@Base+0x4b60>
   1a5c4:	sub	r3, r5, r4
   1a5c8:	cmp	r3, #3
   1a5cc:	ble	1a100 <_start@@Base+0x4b60>
   1a5d0:	mov	r1, r4
   1a5d4:	mov	r3, #3
   1a5d8:	mov	r2, r5
   1a5dc:	mov	r0, sl
   1a5e0:	bl	18840 <_start@@Base+0x32a0>
   1a5e4:	cmp	r4, r0
   1a5e8:	mov	r1, r0
   1a5ec:	beq	1a100 <_start@@Base+0x4b60>
   1a5f0:	ldr	r2, [sp, #28]
   1a5f4:	ldr	lr, [pc, #480]	; 1a7dc <_start@@Base+0x523c>
   1a5f8:	ldr	ip, [pc, #480]	; 1a7e0 <_start@@Base+0x5240>
   1a5fc:	mov	r3, #1
   1a600:	str	r3, [sp]
   1a604:	stmib	sp, {r2, ip, lr}
   1a608:	mov	r3, #0
   1a60c:	mov	r2, r5
   1a610:	mov	r0, sl
   1a614:	bl	32af0 <flatcc_json_parser_union_type@@Base>
   1a618:	b	1a110 <_start@@Base+0x4b70>
   1a61c:	sub	r3, r5, r4
   1a620:	cmp	r3, #7
   1a624:	ble	1a100 <_start@@Base+0x4b60>
   1a628:	mov	r1, r4
   1a62c:	mov	r3, #7
   1a630:	mov	r2, r5
   1a634:	mov	r0, sl
   1a638:	bl	18840 <_start@@Base+0x32a0>
   1a63c:	cmp	r4, r0
   1a640:	mov	r1, r0
   1a644:	beq	1a100 <_start@@Base+0x4b60>
   1a648:	ldr	r2, [sp, #28]
   1a64c:	ldr	lr, [pc, #392]	; 1a7dc <_start@@Base+0x523c>
   1a650:	ldr	ip, [pc, #396]	; 1a7e4 <_start@@Base+0x5244>
   1a654:	mov	r3, #3
   1a658:	str	r3, [sp]
   1a65c:	stmib	sp, {r2, ip, lr}
   1a660:	mov	r3, #1
   1a664:	mov	r2, r5
   1a668:	mov	r0, sl
   1a66c:	bl	32af0 <flatcc_json_parser_union_type@@Base>
   1a670:	b	1a110 <_start@@Base+0x4b70>
   1a674:	mov	r1, r4
   1a678:	mov	r3, #5
   1a67c:	mov	r2, r5
   1a680:	mov	r0, sl
   1a684:	bl	18840 <_start@@Base+0x32a0>
   1a688:	cmp	r0, r4
   1a68c:	mov	r1, r0
   1a690:	beq	1a100 <_start@@Base+0x4b60>
   1a694:	ldr	r2, [sp, #28]
   1a698:	ldr	ip, [pc, #316]	; 1a7dc <_start@@Base+0x523c>
   1a69c:	mov	r3, #7
   1a6a0:	str	r3, [sp]
   1a6a4:	stmib	sp, {r2, ip}
   1a6a8:	mov	r3, #3
   1a6ac:	mov	r2, r5
   1a6b0:	mov	r0, sl
   1a6b4:	bl	32980 <flatcc_json_parser_union@@Base>
   1a6b8:	b	1a110 <_start@@Base+0x4b70>
   1a6bc:	sub	r3, r5, r4
   1a6c0:	cmp	r3, #7
   1a6c4:	ble	1a100 <_start@@Base+0x4b60>
   1a6c8:	mov	r1, r4
   1a6cc:	mov	r3, #7
   1a6d0:	mov	r2, r5
   1a6d4:	mov	r0, sl
   1a6d8:	bl	18840 <_start@@Base+0x32a0>
   1a6dc:	cmp	r4, r0
   1a6e0:	mov	r1, r0
   1a6e4:	beq	1a100 <_start@@Base+0x4b60>
   1a6e8:	ldr	r2, [sp, #28]
   1a6ec:	ldr	r3, [pc, #244]	; 1a7e8 <_start@@Base+0x5248>
   1a6f0:	ldr	lr, [pc, #228]	; 1a7dc <_start@@Base+0x523c>
   1a6f4:	ldr	ip, [pc, #240]	; 1a7ec <_start@@Base+0x524c>
   1a6f8:	str	r3, [sp, #16]
   1a6fc:	mov	r3, #9
   1a700:	stmib	sp, {r2, ip, lr}
   1a704:	mov	r0, sl
   1a708:	str	r3, [sp]
   1a70c:	mov	r2, r5
   1a710:	mov	r3, #4
   1a714:	bl	32f88 <flatcc_json_parser_union_type_vector@@Base>
   1a718:	b	1a110 <_start@@Base+0x4b70>
   1a71c:	sub	r3, r5, r4
   1a720:	cmp	r3, #6
   1a724:	ble	1a100 <_start@@Base+0x4b60>
   1a728:	mov	r1, r4
   1a72c:	mov	r3, #6
   1a730:	mov	r2, r5
   1a734:	mov	r0, sl
   1a738:	bl	18840 <_start@@Base+0x32a0>
   1a73c:	cmp	r4, r0
   1a740:	mov	r1, r0
   1a744:	beq	1a100 <_start@@Base+0x4b60>
   1a748:	ldr	r2, [sp, #28]
   1a74c:	ldr	lr, [pc, #136]	; 1a7dc <_start@@Base+0x523c>
   1a750:	ldr	ip, [pc, #152]	; 1a7f0 <_start@@Base+0x5250>
   1a754:	mov	r3, #5
   1a758:	str	r3, [sp]
   1a75c:	stmib	sp, {r2, ip, lr}
   1a760:	mov	r3, #2
   1a764:	mov	r2, r5
   1a768:	mov	r0, sl
   1a76c:	bl	32af0 <flatcc_json_parser_union_type@@Base>
   1a770:	b	1a110 <_start@@Base+0x4b70>
   1a774:	mov	r1, r6
   1a778:	mov	r3, #6
   1a77c:	mov	r2, r5
   1a780:	mov	r0, sl
   1a784:	bl	18840 <_start@@Base+0x32a0>
   1a788:	cmp	r6, r0
   1a78c:	mov	r1, r0
   1a790:	beq	1a534 <_start@@Base+0x4f94>
   1a794:	ldr	r2, [sp, #28]
   1a798:	ldr	ip, [pc, #60]	; 1a7dc <_start@@Base+0x523c>
   1a79c:	mov	r3, #1
   1a7a0:	str	r3, [sp]
   1a7a4:	stmib	sp, {r2, ip}
   1a7a8:	mov	r3, #0
   1a7ac:	mov	r2, r5
   1a7b0:	mov	r0, sl
   1a7b4:	bl	32980 <flatcc_json_parser_union@@Base>
   1a7b8:	b	1a110 <_start@@Base+0x4b70>
   1a7bc:	nop			; (mov r0, r0)
   1a7c0:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1a7c4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a7c8:	ldrbvs	r0, [r2, #-0]!
   1a7cc:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a7d0:	andeq	r0, r0, r0
   1a7d4:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a7d8:			; <UNDEFINED> instruction: 0xffff0000
   1a7dc:			; <UNDEFINED> instruction: 0x000202b8
   1a7e0:	andeq	r8, r5, r0, lsr #1
   1a7e4:	andeq	r8, r5, r0, ror r0
   1a7e8:	andeq	r5, r1, r0, lsl r8
   1a7ec:	muleq	r5, r0, r0
   1a7f0:	strheq	r8, [r5], -r0
   1a7f4:	push	{r4, r5, r6, lr}
   1a7f8:	mov	r4, r2
   1a7fc:	sub	r2, r2, r1
   1a800:	cmp	r2, #1
   1a804:	mov	r5, r0
   1a808:	mov	r6, r3
   1a80c:	ble	1a820 <_start@@Base+0x5280>
   1a810:	ldrb	r3, [r1]
   1a814:	cmp	r3, #32
   1a818:	bhi	1a830 <_start@@Base+0x5290>
   1a81c:	beq	1a8a0 <_start@@Base+0x5300>
   1a820:	mov	r2, r4
   1a824:	mov	r0, r5
   1a828:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1a82c:	mov	r1, r0
   1a830:	cmp	r4, r1
   1a834:	beq	1a904 <_start@@Base+0x5364>
   1a838:	ldrb	r3, [r1]
   1a83c:	cmp	r3, #44	; 0x2c
   1a840:	beq	1a8b4 <_start@@Base+0x5314>
   1a844:	mov	r3, #0
   1a848:	str	r3, [r6]
   1a84c:	ldrb	r3, [r1]
   1a850:	cmp	r3, #93	; 0x5d
   1a854:	beq	1a86c <_start@@Base+0x52cc>
   1a858:	mov	r2, r4
   1a85c:	mov	r0, r5
   1a860:	mov	r3, #9
   1a864:	pop	{r4, r5, r6, lr}
   1a868:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   1a86c:	add	r0, r1, #1
   1a870:	sub	r3, r4, r0
   1a874:	cmp	r3, #1
   1a878:	ble	1a88c <_start@@Base+0x52ec>
   1a87c:	ldrb	r3, [r1, #1]
   1a880:	cmp	r3, #32
   1a884:	pophi	{r4, r5, r6, pc}
   1a888:	beq	1a928 <_start@@Base+0x5388>
   1a88c:	mov	r2, r4
   1a890:	mov	r1, r0
   1a894:	mov	r0, r5
   1a898:	pop	{r4, r5, r6, lr}
   1a89c:	b	2f2dc <flatcc_json_parser_space_ext@@Base>
   1a8a0:	ldrb	r3, [r1, #1]
   1a8a4:	cmp	r3, #32
   1a8a8:	addhi	r1, r1, #1
   1a8ac:	bls	1a820 <_start@@Base+0x5280>
   1a8b0:	b	1a830 <_start@@Base+0x5290>
   1a8b4:	add	r0, r1, #1
   1a8b8:	sub	r3, r4, r0
   1a8bc:	cmp	r3, #1
   1a8c0:	ble	1a8d4 <_start@@Base+0x5334>
   1a8c4:	ldrb	r3, [r1, #1]
   1a8c8:	cmp	r3, #32
   1a8cc:	bhi	1a8e4 <_start@@Base+0x5344>
   1a8d0:	beq	1a914 <_start@@Base+0x5374>
   1a8d4:	mov	r1, r0
   1a8d8:	mov	r2, r4
   1a8dc:	mov	r0, r5
   1a8e0:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1a8e4:	cmp	r4, r0
   1a8e8:	beq	1a958 <_start@@Base+0x53b8>
   1a8ec:	ldrb	r3, [r0]
   1a8f0:	cmp	r3, #93	; 0x5d
   1a8f4:	beq	1a93c <_start@@Base+0x539c>
   1a8f8:	mov	r3, #1
   1a8fc:	str	r3, [r6]
   1a900:	pop	{r4, r5, r6, pc}
   1a904:	mov	r3, #0
   1a908:	mov	r0, r4
   1a90c:	str	r3, [r6]
   1a910:	pop	{r4, r5, r6, pc}
   1a914:	ldrb	r3, [r1, #2]
   1a918:	cmp	r3, #32
   1a91c:	addhi	r0, r1, #2
   1a920:	bls	1a8d4 <_start@@Base+0x5334>
   1a924:	b	1a8e4 <_start@@Base+0x5344>
   1a928:	ldrb	r3, [r1, #2]
   1a92c:	cmp	r3, #32
   1a930:	bls	1a88c <_start@@Base+0x52ec>
   1a934:	add	r0, r1, #2
   1a938:	pop	{r4, r5, r6, pc}
   1a93c:	mov	r3, #0
   1a940:	mov	r2, r4
   1a944:	add	r1, r0, #1
   1a948:	str	r3, [r6]
   1a94c:	mov	r0, r5
   1a950:	pop	{r4, r5, r6, lr}
   1a954:	b	17318 <_start@@Base+0x1d78>
   1a958:	mov	r3, #0
   1a95c:	str	r3, [r6]
   1a960:	mov	r0, r5
   1a964:	mov	r2, r4
   1a968:	mov	r1, r4
   1a96c:	mov	r3, #9
   1a970:	pop	{r4, r5, r6, lr}
   1a974:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   1a978:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a97c:	mov	r7, r3
   1a980:	mov	r3, #0
   1a984:	mov	r5, r0
   1a988:	mov	r6, r1
   1a98c:	str	r3, [r7]
   1a990:	mov	r1, r3
   1a994:	ldr	r0, [r0]
   1a998:	mov	r4, r2
   1a99c:	bl	2887c <flatcc_builder_start_table@@Base>
   1a9a0:	cmp	r0, #0
   1a9a4:	bne	1a9e0 <_start@@Base+0x5440>
   1a9a8:	cmp	r6, r4
   1a9ac:	beq	1a9bc <_start@@Base+0x541c>
   1a9b0:	ldrb	r3, [r6]
   1a9b4:	cmp	r3, #123	; 0x7b
   1a9b8:	beq	1aa14 <_start@@Base+0x5474>
   1a9bc:	mov	r1, r6
   1a9c0:	mov	r3, #21
   1a9c4:	mov	r2, r4
   1a9c8:	mov	r0, r5
   1a9cc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1a9d0:	mov	r6, r0
   1a9d4:	ldr	r3, [r5, #24]
   1a9d8:	cmp	r3, #0
   1a9dc:	beq	1a9f8 <_start@@Base+0x5458>
   1a9e0:	mov	r2, r4
   1a9e4:	mov	r1, r6
   1a9e8:	mov	r0, r5
   1a9ec:	mov	r3, #33	; 0x21
   1a9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a9f4:	b	2f1dc <flatcc_json_parser_set_error@@Base>
   1a9f8:	ldr	r0, [r5]
   1a9fc:	bl	292bc <flatcc_builder_end_table@@Base>
   1aa00:	cmp	r0, #0
   1aa04:	str	r0, [r7]
   1aa08:	beq	1a9e0 <_start@@Base+0x5440>
   1aa0c:	mov	r0, r6
   1aa10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa14:	add	r1, r6, #1
   1aa18:	sub	r3, r4, r1
   1aa1c:	cmp	r3, #1
   1aa20:	ble	1aa34 <_start@@Base+0x5494>
   1aa24:	ldrb	r3, [r6, #1]
   1aa28:	cmp	r3, #32
   1aa2c:	bhi	1aa44 <_start@@Base+0x54a4>
   1aa30:	beq	1abf0 <_start@@Base+0x5650>
   1aa34:	mov	r2, r4
   1aa38:	mov	r0, r5
   1aa3c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1aa40:	mov	r1, r0
   1aa44:	cmp	r4, r1
   1aa48:	beq	1aa58 <_start@@Base+0x54b8>
   1aa4c:	ldrb	r3, [r1]
   1aa50:	cmp	r3, #125	; 0x7d
   1aa54:	beq	1ab98 <_start@@Base+0x55f8>
   1aa58:	mov	r6, #1
   1aa5c:	mov	r9, #5
   1aa60:	mov	r8, #0
   1aa64:	cmp	r4, r1
   1aa68:	beq	1aa8c <_start@@Base+0x54ec>
   1aa6c:	ldrb	r3, [r1]
   1aa70:	cmp	r3, #34	; 0x22
   1aa74:	addeq	r1, r1, #1
   1aa78:	streq	r8, [r5, #12]
   1aa7c:	beq	1aa8c <_start@@Base+0x54ec>
   1aa80:	cmp	r3, #46	; 0x2e
   1aa84:	strne	r6, [r5, #12]
   1aa88:	beq	1abb0 <_start@@Base+0x5610>
   1aa8c:	mov	r2, r4
   1aa90:	mov	r0, r5
   1aa94:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1aa98:	sub	r3, r4, r0
   1aa9c:	cmp	r3, #1
   1aaa0:	ble	1aab4 <_start@@Base+0x5514>
   1aaa4:	ldrb	r3, [r0]
   1aaa8:	cmp	r3, #32
   1aaac:	bhi	1aac4 <_start@@Base+0x5524>
   1aab0:	beq	1ab34 <_start@@Base+0x5594>
   1aab4:	mov	r1, r0
   1aab8:	mov	r2, r4
   1aabc:	mov	r0, r5
   1aac0:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1aac4:	cmp	r4, r0
   1aac8:	beq	1ab4c <_start@@Base+0x55ac>
   1aacc:	ldrb	r3, [r0]
   1aad0:	cmp	r3, #44	; 0x2c
   1aad4:	beq	1ab54 <_start@@Base+0x55b4>
   1aad8:	cmp	r3, #125	; 0x7d
   1aadc:	beq	1aafc <_start@@Base+0x555c>
   1aae0:	mov	r1, r0
   1aae4:	mov	r3, #10
   1aae8:	mov	r2, r4
   1aaec:	mov	r0, r5
   1aaf0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1aaf4:	mov	r6, r0
   1aaf8:	b	1a9d4 <_start@@Base+0x5434>
   1aafc:	add	r6, r0, #1
   1ab00:	sub	r3, r4, r6
   1ab04:	cmp	r3, #1
   1ab08:	ble	1ab1c <_start@@Base+0x557c>
   1ab0c:	ldrb	r3, [r0, #1]
   1ab10:	cmp	r3, #32
   1ab14:	bhi	1a9d4 <_start@@Base+0x5434>
   1ab18:	beq	1abc8 <_start@@Base+0x5628>
   1ab1c:	mov	r1, r6
   1ab20:	mov	r2, r4
   1ab24:	mov	r0, r5
   1ab28:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1ab2c:	mov	r6, r0
   1ab30:	b	1a9d4 <_start@@Base+0x5434>
   1ab34:	ldrb	r3, [r0, #1]
   1ab38:	cmp	r3, #32
   1ab3c:	addhi	r0, r0, #1
   1ab40:	bls	1aab4 <_start@@Base+0x5514>
   1ab44:	cmp	r4, r0
   1ab48:	bne	1aacc <_start@@Base+0x552c>
   1ab4c:	mov	r6, r4
   1ab50:	b	1a9d4 <_start@@Base+0x5434>
   1ab54:	add	r1, r0, #1
   1ab58:	sub	r3, r4, r1
   1ab5c:	cmp	r3, #1
   1ab60:	ble	1ab74 <_start@@Base+0x55d4>
   1ab64:	ldrb	r3, [r0, #1]
   1ab68:	cmp	r3, #32
   1ab6c:	bhi	1ab84 <_start@@Base+0x55e4>
   1ab70:	beq	1abdc <_start@@Base+0x563c>
   1ab74:	mov	r2, r4
   1ab78:	mov	r0, r5
   1ab7c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1ab80:	mov	r1, r0
   1ab84:	cmp	r4, r1
   1ab88:	beq	1ac04 <_start@@Base+0x5664>
   1ab8c:	ldrb	r3, [r1]
   1ab90:	cmp	r3, #125	; 0x7d
   1ab94:	bne	1aa64 <_start@@Base+0x54c4>
   1ab98:	add	r1, r1, #1
   1ab9c:	mov	r2, r4
   1aba0:	mov	r0, r5
   1aba4:	bl	17318 <_start@@Base+0x1d78>
   1aba8:	mov	r6, r0
   1abac:	b	1a9d4 <_start@@Base+0x5434>
   1abb0:	mov	r3, r9
   1abb4:	mov	r2, r4
   1abb8:	mov	r0, r5
   1abbc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1abc0:	mov	r1, r0
   1abc4:	b	1aa8c <_start@@Base+0x54ec>
   1abc8:	ldrb	r3, [r0, #2]
   1abcc:	cmp	r3, #32
   1abd0:	addhi	r6, r0, #2
   1abd4:	bls	1ab1c <_start@@Base+0x557c>
   1abd8:	b	1a9d4 <_start@@Base+0x5434>
   1abdc:	ldrb	r3, [r0, #2]
   1abe0:	cmp	r3, #32
   1abe4:	addhi	r1, r0, #2
   1abe8:	bls	1ab74 <_start@@Base+0x55d4>
   1abec:	b	1ab84 <_start@@Base+0x55e4>
   1abf0:	ldrb	r3, [r6, #2]
   1abf4:	cmp	r3, #32
   1abf8:	addhi	r1, r6, #2
   1abfc:	bls	1aa34 <_start@@Base+0x5494>
   1ac00:	b	1aa44 <_start@@Base+0x54a4>
   1ac04:	mov	r3, #10
   1ac08:	mov	r2, r4
   1ac0c:	mov	r1, r4
   1ac10:	mov	r0, r5
   1ac14:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1ac18:	mov	r6, r0
   1ac1c:	b	1a9d4 <_start@@Base+0x5434>
   1ac20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac24:	sub	sp, sp, #92	; 0x5c
   1ac28:	cmp	r1, r2
   1ac2c:	mov	r5, r2
   1ac30:	mov	r6, r0
   1ac34:	str	r3, [sp, #64]	; 0x40
   1ac38:	beq	1ac48 <_start@@Base+0x56a8>
   1ac3c:	ldrb	r3, [r1]
   1ac40:	cmp	r3, #123	; 0x7b
   1ac44:	beq	1ac68 <_start@@Base+0x56c8>
   1ac48:	mov	r2, r5
   1ac4c:	mov	r0, r6
   1ac50:	mov	r3, #21
   1ac54:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1ac58:	mov	r5, r0
   1ac5c:	mov	r0, r5
   1ac60:	add	sp, sp, #92	; 0x5c
   1ac64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac68:	add	r4, r1, #1
   1ac6c:	sub	r3, r2, r4
   1ac70:	cmp	r3, #1
   1ac74:	ble	1ac88 <_start@@Base+0x56e8>
   1ac78:	ldrb	r3, [r1, #1]
   1ac7c:	cmp	r3, #32
   1ac80:	bhi	1ac9c <_start@@Base+0x56fc>
   1ac84:	beq	1b440 <_start@@Base+0x5ea0>
   1ac88:	mov	r1, r4
   1ac8c:	mov	r2, r5
   1ac90:	mov	r0, r6
   1ac94:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1ac98:	mov	r4, r0
   1ac9c:	cmp	r5, r4
   1aca0:	beq	1acb0 <_start@@Base+0x5710>
   1aca4:	ldrb	r3, [r4]
   1aca8:	cmp	r3, #125	; 0x7d
   1acac:	beq	1b454 <_start@@Base+0x5eb4>
   1acb0:	mov	r7, #0
   1acb4:	strd	r8, [sp, #32]
   1acb8:	cmp	r5, r4
   1acbc:	beq	1af68 <_start@@Base+0x59c8>
   1acc0:	ldrb	r3, [r4]
   1acc4:	cmp	r3, #34	; 0x22
   1acc8:	beq	1b128 <_start@@Base+0x5b88>
   1accc:	cmp	r3, #46	; 0x2e
   1acd0:	movne	r3, #1
   1acd4:	subne	ip, r5, r4
   1acd8:	strne	r3, [r6, #12]
   1acdc:	beq	1b264 <_start@@Base+0x5cc4>
   1ace0:	cmp	ip, #8
   1ace4:	bls	1af7c <_start@@Base+0x59dc>
   1ace8:	mov	r9, #0
   1acec:	ldrb	r2, [r4, #6]
   1acf0:	lsr	r1, r2, #24
   1acf4:	lsl	r3, r2, #8
   1acf8:	str	r1, [sp, #60]	; 0x3c
   1acfc:	str	r3, [sp, #56]	; 0x38
   1ad00:	ldrd	r2, [sp, #56]	; 0x38
   1ad04:	orr	r3, r3, r9
   1ad08:	mov	r9, r3
   1ad0c:	ldrb	r2, [r4, #5]
   1ad10:	lsr	r1, r2, #16
   1ad14:	lsl	r3, r2, #16
   1ad18:	str	r1, [sp, #52]	; 0x34
   1ad1c:	str	r3, [sp, #48]	; 0x30
   1ad20:	ldrd	r2, [sp, #48]	; 0x30
   1ad24:	orr	r3, r3, r9
   1ad28:	mov	r9, r3
   1ad2c:	ldrb	r2, [r4, #4]
   1ad30:	lsr	r1, r2, #8
   1ad34:	lsl	r3, r2, #24
   1ad38:	str	r1, [sp, #28]
   1ad3c:	str	r3, [sp, #24]
   1ad40:	ldrd	r2, [sp, #24]
   1ad44:	orr	r3, r3, r9
   1ad48:	mov	r9, r3
   1ad4c:	ldrb	r3, [r4, #3]
   1ad50:	str	r3, [sp, #44]	; 0x2c
   1ad54:	mov	r3, #0
   1ad58:	str	r3, [sp, #40]	; 0x28
   1ad5c:	ldrd	r2, [sp, #40]	; 0x28
   1ad60:	orr	r3, r3, r9
   1ad64:	mov	r9, r3
   1ad68:	ldrb	r2, [r4, #2]
   1ad6c:	lsl	r3, r2, #8
   1ad70:	str	r3, [sp, #20]
   1ad74:	mov	r3, #0
   1ad78:	str	r3, [sp, #16]
   1ad7c:	ldrd	r2, [sp, #16]
   1ad80:	orr	r3, r3, r9
   1ad84:	mov	r9, r3
   1ad88:	ldrb	r2, [r4]
   1ad8c:	ldrb	r0, [r4, #1]
   1ad90:	mov	sl, #0
   1ad94:	str	sl, [sp, #8]
   1ad98:	lsl	r3, r2, #24
   1ad9c:	str	r3, [sp, #12]
   1ada0:	ldrd	r2, [sp, #8]
   1ada4:	lsl	fp, r0, #16
   1ada8:	orr	r9, r9, fp
   1adac:	orr	r3, r3, r9
   1adb0:	and	r3, r3, #-16777216	; 0xff000000
   1adb4:	mov	r2, #0
   1adb8:	cmp	r3, #1644167168	; 0x62000000
   1adbc:	cmpeq	r2, #0
   1adc0:	strd	r2, [sp, #32]
   1adc4:	beq	1aff4 <_start@@Base+0x5a54>
   1adc8:	cmp	r3, #1627389952	; 0x61000000
   1adcc:	cmpeq	r2, #0
   1add0:	bne	1af68 <_start@@Base+0x59c8>
   1add4:	cmp	ip, #1
   1add8:	ble	1af68 <_start@@Base+0x59c8>
   1addc:	ldr	r3, [r6, #12]
   1ade0:	cmp	r3, #0
   1ade4:	ldrb	r3, [r4, #1]
   1ade8:	beq	1b1c8 <_start@@Base+0x5c28>
   1adec:	cmp	r3, #58	; 0x3a
   1adf0:	cmpne	r3, #32
   1adf4:	movls	r3, #0
   1adf8:	movhi	r3, #1
   1adfc:	strls	r3, [r6, #12]
   1ae00:	addls	r1, r4, #1
   1ae04:	bhi	1af68 <_start@@Base+0x59c8>
   1ae08:	sub	r3, r5, r1
   1ae0c:	cmp	r3, #1
   1ae10:	ble	1ae24 <_start@@Base+0x5884>
   1ae14:	ldrb	r3, [r1]
   1ae18:	cmp	r3, #32
   1ae1c:	bhi	1ae34 <_start@@Base+0x5894>
   1ae20:	beq	1b370 <_start@@Base+0x5dd0>
   1ae24:	mov	r2, r5
   1ae28:	mov	r0, r6
   1ae2c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1ae30:	mov	r1, r0
   1ae34:	cmp	r5, r1
   1ae38:	beq	1ae48 <_start@@Base+0x58a8>
   1ae3c:	ldrb	r3, [r1]
   1ae40:	cmp	r3, #58	; 0x3a
   1ae44:	beq	1b398 <_start@@Base+0x5df8>
   1ae48:	mov	r3, #4
   1ae4c:	mov	r2, r5
   1ae50:	mov	r0, r6
   1ae54:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1ae58:	str	r0, [sp, #68]	; 0x44
   1ae5c:	ldr	r3, [sp, #68]	; 0x44
   1ae60:	cmp	r3, r4
   1ae64:	beq	1af68 <_start@@Base+0x59c8>
   1ae68:	mov	r4, r3
   1ae6c:	cmp	r5, r3
   1ae70:	mov	r3, #0
   1ae74:	strh	r7, [sp, #74]	; 0x4a
   1ae78:	str	r3, [sp, #80]	; 0x50
   1ae7c:	str	r3, [sp, #84]	; 0x54
   1ae80:	str	r7, [sp, #76]	; 0x4c
   1ae84:	beq	1b2c8 <_start@@Base+0x5d28>
   1ae88:	add	r3, sp, #80	; 0x50
   1ae8c:	str	r3, [sp]
   1ae90:	mov	r2, r5
   1ae94:	add	r3, sp, #76	; 0x4c
   1ae98:	mov	r1, r4
   1ae9c:	mov	r0, r6
   1aea0:	bl	31f80 <flatcc_json_parser_integer@@Base>
   1aea4:	cmp	r4, r0
   1aea8:	beq	1b2c8 <_start@@Base+0x5d28>
   1aeac:	ldr	r1, [sp, #76]	; 0x4c
   1aeb0:	ldrd	r2, [sp, #80]	; 0x50
   1aeb4:	cmp	r1, #0
   1aeb8:	beq	1b1d8 <_start@@Base+0x5c38>
   1aebc:	cmp	r3, #0
   1aec0:	cmpeq	r2, #32768	; 0x8000
   1aec4:	rsbls	r2, r2, #0
   1aec8:	sxthls	r2, r2
   1aecc:	bhi	1b298 <_start@@Base+0x5cf8>
   1aed0:	ldr	r3, [sp, #64]	; 0x40
   1aed4:	strh	r2, [r3]
   1aed8:	sub	r3, r5, r0
   1aedc:	cmp	r3, #1
   1aee0:	ble	1aef4 <_start@@Base+0x5954>
   1aee4:	ldrb	r3, [r0]
   1aee8:	cmp	r3, #32
   1aeec:	bhi	1af04 <_start@@Base+0x5964>
   1aef0:	beq	1b138 <_start@@Base+0x5b98>
   1aef4:	mov	r1, r0
   1aef8:	mov	r2, r5
   1aefc:	mov	r0, r6
   1af00:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1af04:	cmp	r5, r0
   1af08:	beq	1ac5c <_start@@Base+0x56bc>
   1af0c:	ldrb	r3, [r0]
   1af10:	cmp	r3, #44	; 0x2c
   1af14:	beq	1b14c <_start@@Base+0x5bac>
   1af18:	cmp	r3, #125	; 0x7d
   1af1c:	beq	1b0f4 <_start@@Base+0x5b54>
   1af20:	mov	r2, r5
   1af24:	mov	r1, r0
   1af28:	mov	r3, #10
   1af2c:	mov	r0, r6
   1af30:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1af34:	mov	r5, r0
   1af38:	mov	r0, r5
   1af3c:	add	sp, sp, #92	; 0x5c
   1af40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af44:	ldrb	r2, [r4]
   1af48:	lsl	r3, r2, #24
   1af4c:	str	r3, [sp, #36]	; 0x24
   1af50:	mov	r3, #0
   1af54:	str	r3, [sp, #32]
   1af58:	ldrd	r2, [sp, #32]
   1af5c:	cmp	r3, #1644167168	; 0x62000000
   1af60:	cmpeq	r2, #0
   1af64:	bne	1adc8 <_start@@Base+0x5828>
   1af68:	mov	r1, r4
   1af6c:	mov	r2, r5
   1af70:	mov	r0, r6
   1af74:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1af78:	b	1aed8 <_start@@Base+0x5938>
   1af7c:	sub	r3, ip, #1
   1af80:	cmp	r3, #7
   1af84:	ldrls	pc, [pc, r3, lsl #2]
   1af88:	b	1af68 <_start@@Base+0x59c8>
   1af8c:	andeq	sl, r1, r4, asr #30
   1af90:	andeq	sl, r1, r8, ror #31
   1af94:	ldrdeq	sl, [r1], -ip
   1af98:	ldrdeq	sl, [r1], -r0
   1af9c:	andeq	sl, r1, r4, asr #31
   1afa0:			; <UNDEFINED> instruction: 0x0001afb8
   1afa4:	andeq	sl, r1, ip, lsr #31
   1afa8:	andeq	sl, r1, r8, ror #25
   1afac:	mov	r8, #0
   1afb0:	mov	r9, r8
   1afb4:	b	1acec <_start@@Base+0x574c>
   1afb8:	mov	r8, #0
   1afbc:	mov	r9, r8
   1afc0:	b	1ad0c <_start@@Base+0x576c>
   1afc4:	mov	r8, #0
   1afc8:	mov	r9, r8
   1afcc:	b	1ad2c <_start@@Base+0x578c>
   1afd0:	mov	r8, #0
   1afd4:	mov	r9, r8
   1afd8:	b	1ad4c <_start@@Base+0x57ac>
   1afdc:	mov	r8, #0
   1afe0:	mov	r9, r8
   1afe4:	b	1ad68 <_start@@Base+0x57c8>
   1afe8:	mov	r8, #0
   1afec:	mov	r9, r8
   1aff0:	b	1ad88 <_start@@Base+0x57e8>
   1aff4:	cmp	ip, #1
   1aff8:	ble	1af68 <_start@@Base+0x59c8>
   1affc:	ldr	r3, [r6, #12]
   1b000:	cmp	r3, sl
   1b004:	ldrb	r3, [r4, #1]
   1b008:	beq	1b220 <_start@@Base+0x5c80>
   1b00c:	cmp	r3, #58	; 0x3a
   1b010:	cmpne	r3, #32
   1b014:	movls	r3, #0
   1b018:	movhi	r3, #1
   1b01c:	strls	r3, [r6, #12]
   1b020:	addls	r1, r4, #1
   1b024:	bhi	1af68 <_start@@Base+0x59c8>
   1b028:	sub	r3, r5, r1
   1b02c:	cmp	r3, #1
   1b030:	ble	1b044 <_start@@Base+0x5aa4>
   1b034:	ldrb	r3, [r1]
   1b038:	cmp	r3, #32
   1b03c:	bhi	1b054 <_start@@Base+0x5ab4>
   1b040:	beq	1b384 <_start@@Base+0x5de4>
   1b044:	mov	r2, r5
   1b048:	mov	r0, r6
   1b04c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1b050:	mov	r1, r0
   1b054:	cmp	r5, r1
   1b058:	beq	1b068 <_start@@Base+0x5ac8>
   1b05c:	ldrb	r3, [r1]
   1b060:	cmp	r3, #58	; 0x3a
   1b064:	beq	1b3d4 <_start@@Base+0x5e34>
   1b068:	mov	r3, #4
   1b06c:	mov	r2, r5
   1b070:	mov	r0, r6
   1b074:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b078:	mov	r8, r0
   1b07c:	cmp	r8, r4
   1b080:	beq	1af68 <_start@@Base+0x59c8>
   1b084:	mov	r3, #0
   1b088:	cmp	r5, r8
   1b08c:	strb	r7, [sp, #74]	; 0x4a
   1b090:	str	r3, [sp, #80]	; 0x50
   1b094:	str	r3, [sp, #84]	; 0x54
   1b098:	str	r7, [sp, #76]	; 0x4c
   1b09c:	beq	1b344 <_start@@Base+0x5da4>
   1b0a0:	add	r3, sp, #80	; 0x50
   1b0a4:	str	r3, [sp]
   1b0a8:	mov	r2, r5
   1b0ac:	add	r3, sp, #76	; 0x4c
   1b0b0:	mov	r1, r8
   1b0b4:	mov	r0, r6
   1b0b8:	bl	31f80 <flatcc_json_parser_integer@@Base>
   1b0bc:	cmp	r8, r0
   1b0c0:	beq	1b344 <_start@@Base+0x5da4>
   1b0c4:	ldr	r1, [sp, #76]	; 0x4c
   1b0c8:	ldrd	r2, [sp, #80]	; 0x50
   1b0cc:	cmp	r1, #0
   1b0d0:	beq	1b230 <_start@@Base+0x5c90>
   1b0d4:	cmp	r3, #0
   1b0d8:	cmpeq	r2, #128	; 0x80
   1b0dc:	rsbls	r2, r2, #0
   1b0e0:	sxtbls	r2, r2
   1b0e4:	bhi	1b2b0 <_start@@Base+0x5d10>
   1b0e8:	ldr	r3, [sp, #64]	; 0x40
   1b0ec:	strb	r2, [r3, #2]
   1b0f0:	b	1aed8 <_start@@Base+0x5938>
   1b0f4:	add	r1, r0, #1
   1b0f8:	sub	r3, r5, r1
   1b0fc:	cmp	r3, #1
   1b100:	ble	1b114 <_start@@Base+0x5b74>
   1b104:	ldrb	r3, [r0, #1]
   1b108:	cmp	r3, #32
   1b10c:	bhi	1b218 <_start@@Base+0x5c78>
   1b110:	beq	1b284 <_start@@Base+0x5ce4>
   1b114:	mov	r2, r5
   1b118:	mov	r0, r6
   1b11c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1b120:	mov	r5, r0
   1b124:	b	1ac5c <_start@@Base+0x56bc>
   1b128:	add	r4, r4, #1
   1b12c:	str	r7, [r6, #12]
   1b130:	sub	ip, r5, r4
   1b134:	b	1ace0 <_start@@Base+0x5740>
   1b138:	ldrb	r3, [r0, #1]
   1b13c:	cmp	r3, #32
   1b140:	addhi	r0, r0, #1
   1b144:	bls	1aef4 <_start@@Base+0x5954>
   1b148:	b	1af04 <_start@@Base+0x5964>
   1b14c:	add	r4, r0, #1
   1b150:	sub	r3, r5, r4
   1b154:	cmp	r3, #1
   1b158:	ble	1b16c <_start@@Base+0x5bcc>
   1b15c:	ldrb	r3, [r0, #1]
   1b160:	cmp	r3, #32
   1b164:	bhi	1b180 <_start@@Base+0x5be0>
   1b168:	beq	1b310 <_start@@Base+0x5d70>
   1b16c:	mov	r1, r4
   1b170:	mov	r2, r5
   1b174:	mov	r0, r6
   1b178:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1b17c:	mov	r4, r0
   1b180:	cmp	r5, r4
   1b184:	beq	1b328 <_start@@Base+0x5d88>
   1b188:	ldrb	r3, [r4]
   1b18c:	cmp	r3, #125	; 0x7d
   1b190:	bne	1acb8 <_start@@Base+0x5718>
   1b194:	add	r1, r4, #1
   1b198:	sub	r3, r5, r1
   1b19c:	cmp	r3, #1
   1b1a0:	ble	1b114 <_start@@Base+0x5b74>
   1b1a4:	ldrb	r3, [r4, #1]
   1b1a8:	cmp	r3, #32
   1b1ac:	bhi	1b218 <_start@@Base+0x5c78>
   1b1b0:	bne	1b114 <_start@@Base+0x5b74>
   1b1b4:	ldrb	r3, [r4, #2]
   1b1b8:	cmp	r3, #32
   1b1bc:	addhi	r5, r4, #2
   1b1c0:	bls	1b114 <_start@@Base+0x5b74>
   1b1c4:	b	1ac5c <_start@@Base+0x56bc>
   1b1c8:	cmp	r3, #34	; 0x22
   1b1cc:	bne	1af68 <_start@@Base+0x59c8>
   1b1d0:	add	r1, r4, #2
   1b1d4:	b	1ae08 <_start@@Base+0x5868>
   1b1d8:	ldr	r8, [pc, #652]	; 1b46c <_start@@Base+0x5ecc>
   1b1dc:	mov	r9, #0
   1b1e0:	cmp	r3, r9
   1b1e4:	cmpeq	r2, r8
   1b1e8:	sxthls	r2, r2
   1b1ec:	bls	1aed0 <_start@@Base+0x5930>
   1b1f0:	mov	r1, r0
   1b1f4:	mov	r3, #7
   1b1f8:	mov	r2, r5
   1b1fc:	mov	r0, r6
   1b200:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b204:	ldr	r3, [sp, #68]	; 0x44
   1b208:	cmp	r3, r0
   1b20c:	beq	1b2c8 <_start@@Base+0x5d28>
   1b210:	ldrsh	r2, [sp, #74]	; 0x4a
   1b214:	b	1aed0 <_start@@Base+0x5930>
   1b218:	mov	r5, r1
   1b21c:	b	1ac5c <_start@@Base+0x56bc>
   1b220:	cmp	r3, #34	; 0x22
   1b224:	bne	1af68 <_start@@Base+0x59c8>
   1b228:	add	r1, r4, #2
   1b22c:	b	1b028 <_start@@Base+0x5a88>
   1b230:	cmp	r3, #0
   1b234:	cmpeq	r2, #127	; 0x7f
   1b238:	sxtbls	r2, r2
   1b23c:	bls	1b0e8 <_start@@Base+0x5b48>
   1b240:	mov	r1, r0
   1b244:	mov	r3, #7
   1b248:	mov	r2, r5
   1b24c:	mov	r0, r6
   1b250:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b254:	cmp	r8, r0
   1b258:	beq	1b344 <_start@@Base+0x5da4>
   1b25c:	ldrsb	r2, [sp, #74]	; 0x4a
   1b260:	b	1b0e8 <_start@@Base+0x5b48>
   1b264:	mov	r1, r4
   1b268:	mov	r3, #5
   1b26c:	mov	r2, r5
   1b270:	mov	r0, r6
   1b274:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b278:	mov	r4, r0
   1b27c:	sub	ip, r5, r0
   1b280:	b	1ace0 <_start@@Base+0x5740>
   1b284:	ldrb	r3, [r0, #2]
   1b288:	cmp	r3, #32
   1b28c:	addhi	r5, r0, #2
   1b290:	bls	1b114 <_start@@Base+0x5b74>
   1b294:	b	1ac5c <_start@@Base+0x56bc>
   1b298:	mov	r1, r0
   1b29c:	mov	r3, #8
   1b2a0:	mov	r2, r5
   1b2a4:	mov	r0, r6
   1b2a8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b2ac:	b	1b204 <_start@@Base+0x5c64>
   1b2b0:	mov	r1, r0
   1b2b4:	mov	r3, #8
   1b2b8:	mov	r2, r5
   1b2bc:	mov	r0, r6
   1b2c0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b2c4:	b	1b254 <_start@@Base+0x5cb4>
   1b2c8:	ldr	r4, [sp, #68]	; 0x44
   1b2cc:	add	r3, sp, #74	; 0x4a
   1b2d0:	str	r3, [sp]
   1b2d4:	mov	r2, r5
   1b2d8:	ldr	r3, [pc, #400]	; 1b470 <_start@@Base+0x5ed0>
   1b2dc:	mov	r1, r4
   1b2e0:	mov	r0, r6
   1b2e4:	bl	18f00 <_start@@Base+0x3960>
   1b2e8:	cmp	r5, r0
   1b2ec:	cmpne	r0, r4
   1b2f0:	bne	1b210 <_start@@Base+0x5c70>
   1b2f4:	mov	r2, r5
   1b2f8:	mov	r1, r0
   1b2fc:	mov	r3, #33	; 0x21
   1b300:	mov	r0, r6
   1b304:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b308:	mov	r5, r0
   1b30c:	b	1ac5c <_start@@Base+0x56bc>
   1b310:	ldrb	r3, [r0, #2]
   1b314:	cmp	r3, #32
   1b318:	addhi	r4, r0, #2
   1b31c:	bls	1b16c <_start@@Base+0x5bcc>
   1b320:	cmp	r5, r4
   1b324:	bne	1b188 <_start@@Base+0x5be8>
   1b328:	mov	r2, r5
   1b32c:	mov	r1, r5
   1b330:	mov	r0, r6
   1b334:	mov	r3, #10
   1b338:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b33c:	mov	r5, r0
   1b340:	b	1ac5c <_start@@Base+0x56bc>
   1b344:	add	r3, sp, #74	; 0x4a
   1b348:	str	r3, [sp]
   1b34c:	mov	r2, r5
   1b350:	ldr	r3, [pc, #284]	; 1b474 <_start@@Base+0x5ed4>
   1b354:	mov	r1, r8
   1b358:	mov	r0, r6
   1b35c:	bl	194f4 <_start@@Base+0x3f54>
   1b360:	cmp	r5, r0
   1b364:	cmpne	r0, r8
   1b368:	bne	1b25c <_start@@Base+0x5cbc>
   1b36c:	b	1b2f4 <_start@@Base+0x5d54>
   1b370:	ldrb	r3, [r1, #1]
   1b374:	cmp	r3, #32
   1b378:	addhi	r1, r1, #1
   1b37c:	bls	1ae24 <_start@@Base+0x5884>
   1b380:	b	1ae34 <_start@@Base+0x5894>
   1b384:	ldrb	r3, [r1, #1]
   1b388:	cmp	r3, #32
   1b38c:	addhi	r1, r1, #1
   1b390:	bls	1b044 <_start@@Base+0x5aa4>
   1b394:	b	1b054 <_start@@Base+0x5ab4>
   1b398:	add	r3, r1, #1
   1b39c:	str	r3, [sp, #68]	; 0x44
   1b3a0:	sub	r3, r5, r3
   1b3a4:	cmp	r3, #1
   1b3a8:	ble	1b3bc <_start@@Base+0x5e1c>
   1b3ac:	ldrb	r3, [r1, #1]
   1b3b0:	cmp	r3, #32
   1b3b4:	bhi	1ae5c <_start@@Base+0x58bc>
   1b3b8:	beq	1b410 <_start@@Base+0x5e70>
   1b3bc:	ldr	r1, [sp, #68]	; 0x44
   1b3c0:	mov	r2, r5
   1b3c4:	mov	r0, r6
   1b3c8:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1b3cc:	str	r0, [sp, #68]	; 0x44
   1b3d0:	b	1ae5c <_start@@Base+0x58bc>
   1b3d4:	add	r3, r1, #1
   1b3d8:	mov	r8, r3
   1b3dc:	sub	r3, r5, r3
   1b3e0:	cmp	r3, #1
   1b3e4:	ble	1b3f8 <_start@@Base+0x5e58>
   1b3e8:	ldrb	r3, [r1, #1]
   1b3ec:	cmp	r3, #32
   1b3f0:	bhi	1b07c <_start@@Base+0x5adc>
   1b3f4:	beq	1b428 <_start@@Base+0x5e88>
   1b3f8:	mov	r1, r8
   1b3fc:	mov	r2, r5
   1b400:	mov	r0, r6
   1b404:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1b408:	mov	r8, r0
   1b40c:	b	1b07c <_start@@Base+0x5adc>
   1b410:	ldrb	r3, [r1, #2]
   1b414:	cmp	r3, #32
   1b418:	addhi	r3, r1, #2
   1b41c:	strhi	r3, [sp, #68]	; 0x44
   1b420:	bls	1b3bc <_start@@Base+0x5e1c>
   1b424:	b	1ae5c <_start@@Base+0x58bc>
   1b428:	ldrb	r3, [r1, #2]
   1b42c:	cmp	r3, #32
   1b430:	addhi	r3, r1, #2
   1b434:	movhi	r8, r3
   1b438:	bls	1b3f8 <_start@@Base+0x5e58>
   1b43c:	b	1b07c <_start@@Base+0x5adc>
   1b440:	ldrb	r3, [r1, #2]
   1b444:	cmp	r3, #32
   1b448:	addhi	r4, r1, #2
   1b44c:	bls	1ac88 <_start@@Base+0x56e8>
   1b450:	b	1ac9c <_start@@Base+0x56fc>
   1b454:	mov	r2, r5
   1b458:	add	r1, r4, #1
   1b45c:	mov	r0, r6
   1b460:	bl	17318 <_start@@Base+0x1d78>
   1b464:	mov	r5, r0
   1b468:	b	1ac5c <_start@@Base+0x56bc>
   1b46c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1b470:	andeq	r8, r5, ip, asr #1
   1b474:	andeq	r8, r5, r0, asr #1
   1b478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b47c:	vpush	{d8-d9}
   1b480:	mov	sl, r0
   1b484:	mov	r0, r3
   1b488:	mov	fp, r1
   1b48c:	sub	sp, sp, #124	; 0x7c
   1b490:	mov	r1, #36	; 0x24
   1b494:	str	r3, [sp, #68]	; 0x44
   1b498:	mov	r3, #0
   1b49c:	str	r3, [r0]
   1b4a0:	ldr	r0, [sl]
   1b4a4:	mov	r9, r2
   1b4a8:	bl	2887c <flatcc_builder_start_table@@Base>
   1b4ac:	cmp	r0, #0
   1b4b0:	bne	1b648 <_start@@Base+0x60a8>
   1b4b4:	add	r3, sp, #96	; 0x60
   1b4b8:	str	r3, [sp]
   1b4bc:	mov	r2, r9
   1b4c0:	mov	r3, #1
   1b4c4:	mov	r1, fp
   1b4c8:	mov	r0, sl
   1b4cc:	bl	32884 <flatcc_json_parser_prepare_unions@@Base>
   1b4d0:	cmp	r9, r0
   1b4d4:	beq	1b648 <_start@@Base+0x60a8>
   1b4d8:	mov	r1, fp
   1b4dc:	add	r3, sp, #88	; 0x58
   1b4e0:	mov	r2, r9
   1b4e4:	mov	r0, sl
   1b4e8:	bl	1878c <_start@@Base+0x31ec>
   1b4ec:	ldr	r3, [sp, #88]	; 0x58
   1b4f0:	cmp	r3, #0
   1b4f4:	mov	fp, r0
   1b4f8:	beq	1b610 <_start@@Base+0x6070>
   1b4fc:	mov	r3, r9
   1b500:	mov	r9, sl
   1b504:	mov	sl, r3
   1b508:	cmp	sl, fp
   1b50c:	beq	1b538 <_start@@Base+0x5f98>
   1b510:	ldrb	r3, [fp]
   1b514:	cmp	r3, #34	; 0x22
   1b518:	moveq	r3, #0
   1b51c:	addeq	fp, fp, #1
   1b520:	streq	r3, [r9, #12]
   1b524:	beq	1b538 <_start@@Base+0x5f98>
   1b528:	cmp	r3, #46	; 0x2e
   1b52c:	movne	r3, #1
   1b530:	strne	r3, [r9, #12]
   1b534:	beq	1bad8 <_start@@Base+0x6538>
   1b538:	mov	r1, sl
   1b53c:	mov	r0, fp
   1b540:	bl	156c8 <_start@@Base+0x128>
   1b544:	add	r3, pc, #876	; 0x36c
   1b548:	ldrd	r2, [r3]
   1b54c:	cmp	r1, r3
   1b550:	cmpeq	r0, r2
   1b554:	mov	r4, r0
   1b558:	mov	r5, r1
   1b55c:	bhi	1b668 <_start@@Base+0x60c8>
   1b560:	add	r3, pc, #856	; 0x358
   1b564:	ldrd	r2, [r3]
   1b568:	cmp	r1, r3
   1b56c:	cmpeq	r0, r2
   1b570:	bhi	1b6e4 <_start@@Base+0x6144>
   1b574:	add	r3, pc, #844	; 0x34c
   1b578:	ldrd	r2, [r3]
   1b57c:	cmp	r1, r3
   1b580:	cmpeq	r0, r2
   1b584:	bhi	1b798 <_start@@Base+0x61f8>
   1b588:	add	r3, pc, #832	; 0x340
   1b58c:	ldrd	r2, [r3]
   1b590:	and	r4, r0, #-16777216	; 0xff000000
   1b594:	cmp	r1, r3
   1b598:	cmpeq	r4, r2
   1b59c:	beq	1c02c <_start@@Base+0x6a8c>
   1b5a0:	add	r3, pc, #816	; 0x330
   1b5a4:	ldrd	r2, [r3]
   1b5a8:	cmp	r1, r3
   1b5ac:	cmpeq	r4, r2
   1b5b0:	beq	1bc44 <_start@@Base+0x66a4>
   1b5b4:	mov	r1, fp
   1b5b8:	mov	r2, sl
   1b5bc:	mov	r0, r9
   1b5c0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b5c4:	mov	fp, r0
   1b5c8:	b	1b5e0 <_start@@Base+0x6040>
   1b5cc:	mov	r1, fp
   1b5d0:	mov	r2, sl
   1b5d4:	mov	r0, r9
   1b5d8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b5dc:	mov	fp, r0
   1b5e0:	mov	r1, fp
   1b5e4:	add	r3, sp, #88	; 0x58
   1b5e8:	mov	r2, sl
   1b5ec:	mov	r0, r9
   1b5f0:	bl	19ea8 <_start@@Base+0x4908>
   1b5f4:	ldr	r3, [sp, #88]	; 0x58
   1b5f8:	cmp	r3, #0
   1b5fc:	mov	fp, r0
   1b600:	bne	1b508 <_start@@Base+0x5f68>
   1b604:	mov	r3, sl
   1b608:	mov	sl, r9
   1b60c:	mov	r9, r3
   1b610:	ldr	r3, [sl, #24]
   1b614:	cmp	r3, #0
   1b618:	bne	1b648 <_start@@Base+0x60a8>
   1b61c:	mov	r1, #3
   1b620:	ldr	r0, [sl]
   1b624:	bl	29114 <flatcc_builder_check_required_field@@Base>
   1b628:	mov	r1, fp
   1b62c:	cmp	r0, #0
   1b630:	bne	1e384 <_start@@Base+0x8de4>
   1b634:	mov	r3, #29
   1b638:	mov	r2, r9
   1b63c:	mov	r0, sl
   1b640:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b644:	mov	fp, r0
   1b648:	mov	r2, r9
   1b64c:	mov	r1, fp
   1b650:	mov	r0, sl
   1b654:	mov	r3, #33	; 0x21
   1b658:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1b65c:	add	sp, sp, #124	; 0x7c
   1b660:	vpop	{d8-d9}
   1b664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b668:	add	r3, pc, #624	; 0x270
   1b66c:	ldrd	r2, [r3]
   1b670:	cmp	r1, r3
   1b674:	cmpeq	r0, r2
   1b678:	bhi	1b73c <_start@@Base+0x619c>
   1b67c:	add	r3, pc, #612	; 0x264
   1b680:	ldrd	r2, [r3]
   1b684:	cmp	r1, r3
   1b688:	cmpeq	r0, r2
   1b68c:	beq	1ba4c <_start@@Base+0x64ac>
   1b690:	add	r3, pc, #600	; 0x258
   1b694:	ldrd	r2, [r3]
   1b698:	cmp	r1, r3
   1b69c:	cmpeq	r0, r2
   1b6a0:	bhi	1b9f0 <_start@@Base+0x6450>
   1b6a4:	add	r3, pc, #588	; 0x24c
   1b6a8:	ldrd	r2, [r3]
   1b6ac:	cmp	r1, r3
   1b6b0:	cmpeq	r0, r2
   1b6b4:	beq	1c110 <_start@@Base+0x6b70>
   1b6b8:	add	r3, pc, #576	; 0x240
   1b6bc:	ldrd	r2, [r3]
   1b6c0:	cmp	r1, r3
   1b6c4:	cmpeq	r0, r2
   1b6c8:	beq	1bccc <_start@@Base+0x672c>
   1b6cc:	mov	r1, fp
   1b6d0:	mov	r2, sl
   1b6d4:	mov	r0, r9
   1b6d8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b6dc:	mov	fp, r0
   1b6e0:	b	1b5e0 <_start@@Base+0x6040>
   1b6e4:	add	r3, pc, #540	; 0x21c
   1b6e8:	ldrd	r2, [r3]
   1b6ec:	cmp	r1, r3
   1b6f0:	cmpeq	r0, r2
   1b6f4:	bhi	1b7dc <_start@@Base+0x623c>
   1b6f8:	add	r3, pc, #528	; 0x210
   1b6fc:	ldrd	r2, [r3]
   1b700:	cmp	r1, r3
   1b704:	cmpeq	r0, r2
   1b708:	bhi	1baf4 <_start@@Base+0x6554>
   1b70c:	add	r3, pc, #516	; 0x204
   1b710:	ldrd	r2, [r3]
   1b714:	mov	r4, #0
   1b718:	cmp	r1, r3
   1b71c:	cmpeq	r4, r2
   1b720:	beq	1bde8 <_start@@Base+0x6848>
   1b724:	mov	r1, fp
   1b728:	mov	r2, sl
   1b72c:	mov	r0, r9
   1b730:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b734:	mov	fp, r0
   1b738:	b	1b5e0 <_start@@Base+0x6040>
   1b73c:	add	r3, pc, #476	; 0x1dc
   1b740:	ldrd	r2, [r3]
   1b744:	cmp	r1, r3
   1b748:	cmpeq	r0, r2
   1b74c:	bhi	1b960 <_start@@Base+0x63c0>
   1b750:	add	r3, pc, #464	; 0x1d0
   1b754:	ldrd	r2, [r3]
   1b758:	ldr	r0, [pc, #496]	; 1b950 <_start@@Base+0x63b0>
   1b75c:	mvn	r1, #0
   1b760:	and	r5, r5, r1
   1b764:	and	r4, r4, r0
   1b768:	cmp	r5, r3
   1b76c:	cmpeq	r4, r2
   1b770:	bne	1b5cc <_start@@Base+0x602c>
   1b774:	sub	r3, sl, fp
   1b778:	cmp	r3, #6
   1b77c:	bgt	1be30 <_start@@Base+0x6890>
   1b780:	mov	r1, fp
   1b784:	mov	r2, sl
   1b788:	mov	r0, r9
   1b78c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b790:	mov	fp, r0
   1b794:	b	1b5e0 <_start@@Base+0x6040>
   1b798:	ldr	r3, [pc, #436]	; 1b954 <_start@@Base+0x63b4>
   1b79c:	mvn	r2, #0
   1b7a0:	cmp	r1, r3
   1b7a4:	cmpeq	r0, r2
   1b7a8:	bhi	1bb48 <_start@@Base+0x65a8>
   1b7ac:	add	r3, pc, #380	; 0x17c
   1b7b0:	ldrd	r2, [r3]
   1b7b4:	mov	r4, #0
   1b7b8:	cmp	r1, r3
   1b7bc:	cmpeq	r4, r2
   1b7c0:	beq	1be0c <_start@@Base+0x686c>
   1b7c4:	mov	r1, fp
   1b7c8:	mov	r2, sl
   1b7cc:	mov	r0, r9
   1b7d0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b7d4:	mov	fp, r0
   1b7d8:	b	1b5e0 <_start@@Base+0x6040>
   1b7dc:	add	r3, pc, #340	; 0x154
   1b7e0:	ldrd	r2, [r3]
   1b7e4:	and	r6, r0, #-16777216	; 0xff000000
   1b7e8:	mov	r7, r1
   1b7ec:	cmp	r1, r3
   1b7f0:	cmpeq	r6, r2
   1b7f4:	beq	1c050 <_start@@Base+0x6ab0>
   1b7f8:	sub	r8, sl, fp
   1b7fc:	cmp	r8, #4
   1b800:	bgt	1d7b8 <_start@@Base+0x8218>
   1b804:	add	r3, pc, #308	; 0x134
   1b808:	ldrd	r2, [r3]
   1b80c:	cmp	r7, r3
   1b810:	cmpeq	r6, r2
   1b814:	beq	1befc <_start@@Base+0x695c>
   1b818:	add	r3, pc, #296	; 0x128
   1b81c:	ldrd	r2, [r3]
   1b820:	cmp	r5, r3
   1b824:	cmpeq	r4, r2
   1b828:	bne	1bf04 <_start@@Base+0x6964>
   1b82c:	add	fp, fp, #8
   1b830:	mov	r0, fp
   1b834:	mov	r1, sl
   1b838:	bl	156c8 <_start@@Base+0x128>
   1b83c:	mov	r0, #0
   1b840:	and	r1, r1, #-16777216	; 0xff000000
   1b844:	cmp	r1, #1694498816	; 0x65000000
   1b848:	cmpeq	r0, #0
   1b84c:	bne	1c2f0 <_start@@Base+0x6d50>
   1b850:	sub	r3, sl, fp
   1b854:	cmp	r3, #1
   1b858:	ble	1c910 <_start@@Base+0x7370>
   1b85c:	mov	r1, fp
   1b860:	mov	r3, #1
   1b864:	mov	r2, sl
   1b868:	mov	r0, r9
   1b86c:	bl	18840 <_start@@Base+0x32a0>
   1b870:	cmp	fp, r0
   1b874:	mov	r1, r0
   1b878:	beq	1c910 <_start@@Base+0x7370>
   1b87c:	ldr	r2, [sp, #96]	; 0x60
   1b880:	ldr	ip, [pc, #208]	; 1b958 <_start@@Base+0x63b8>
   1b884:	ldr	r0, [pc, #208]	; 1b95c <_start@@Base+0x63bc>
   1b888:	mov	r3, #8
   1b88c:	str	r0, [sp, #8]
   1b890:	str	r2, [sp, #4]
   1b894:	str	r3, [sp]
   1b898:	str	ip, [sp, #12]
   1b89c:	mov	r3, #0
   1b8a0:	mov	r2, sl
   1b8a4:	mov	r0, r9
   1b8a8:	bl	32af0 <flatcc_json_parser_union_type@@Base>
   1b8ac:	mov	fp, r0
   1b8b0:	b	1b5e0 <_start@@Base+0x6040>
   1b8b4:	nop			; (mov r0, r0)
   1b8b8:	cmnvs	r2, r0, ror #4
   1b8bc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b8c0:			; <UNDEFINED> instruction: 0xffffffff
   1b8c4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1b8c8:			; <UNDEFINED> instruction: 0xffffffff
   1b8cc:			; <UNDEFINED> instruction: 0x666c6577
   1b8d0:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1b8d4:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1b8d8:	andvc	r0, r0, #0
   1b8dc:	cmnvs	pc, #28416	; 0x6f00
   1b8e0:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1b8e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b8e8:	cmnvs	r2, r1, ror #4
   1b8ec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b8f0:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1b8f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b8f8:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1b8fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b900:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1b904:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b908:			; <UNDEFINED> instruction: 0xffffffff
   1b90c:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1b910:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1b914:	rsbvc	r7, r1, r5, ror #4
   1b918:	andeq	r0, r0, r0
   1b91c:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1b920:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1b924:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b928:	ldrtvs	r0, [r3], -r0
   1b92c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b930:	andeq	r0, r0, r0
   1b934:			; <UNDEFINED> instruction: 0x666c6578
   1b938:	strcc	r0, [r0], #-0
   1b93c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b940:	strcc	r0, [r0, #-0]
   1b944:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b948:	svcpl	0x00747970
   1b94c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b950:			; <UNDEFINED> instruction: 0xffff0000
   1b954:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1b958:	andeq	r3, r2, r8, lsr sp
   1b95c:	andeq	r8, r5, r8, asr r1
   1b960:	add	r3, pc, #976	; 0x3d0
   1b964:	ldrd	r2, [r3]
   1b968:	cmp	r1, r3
   1b96c:	cmpeq	r0, r2
   1b970:	beq	1bfdc <_start@@Base+0x6a3c>
   1b974:	add	r3, pc, #964	; 0x3c4
   1b978:	ldrd	r2, [r3]
   1b97c:	cmp	r1, r3
   1b980:	cmpeq	r0, r2
   1b984:	bls	1bbf4 <_start@@Base+0x6654>
   1b988:	add	r3, pc, #952	; 0x3b8
   1b98c:	ldrd	r2, [r3]
   1b990:	cmp	r1, r3
   1b994:	cmpeq	r0, r2
   1b998:	bne	1c180 <_start@@Base+0x6be0>
   1b99c:	add	r4, fp, #8
   1b9a0:	mov	r0, r4
   1b9a4:	mov	r1, sl
   1b9a8:	bl	156c8 <_start@@Base+0x128>
   1b9ac:	add	r3, pc, #924	; 0x39c
   1b9b0:	ldrd	r2, [r3]
   1b9b4:	cmp	r1, r3
   1b9b8:	cmpeq	r0, r2
   1b9bc:	beq	1deec <_start@@Base+0x894c>
   1b9c0:	add	r3, pc, #912	; 0x390
   1b9c4:	ldrd	r2, [r3]
   1b9c8:	bic	r0, r0, #255	; 0xff
   1b9cc:	cmp	r1, r3
   1b9d0:	cmpeq	r0, r2
   1b9d4:	beq	1c8ec <_start@@Base+0x734c>
   1b9d8:	mov	r1, r4
   1b9dc:	mov	r2, sl
   1b9e0:	mov	r0, r9
   1b9e4:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1b9e8:	mov	fp, r0
   1b9ec:	b	1b5e0 <_start@@Base+0x6040>
   1b9f0:	add	r3, pc, #872	; 0x368
   1b9f4:	ldrd	r2, [r3]
   1b9f8:	cmp	r1, r3
   1b9fc:	cmpeq	r0, r2
   1ba00:	bls	1bba4 <_start@@Base+0x6604>
   1ba04:	add	r3, pc, #860	; 0x35c
   1ba08:	ldrd	r2, [r3]
   1ba0c:	ldr	r0, [pc, #972]	; 1bde0 <_start@@Base+0x6840>
   1ba10:	mvn	r1, #0
   1ba14:	and	r5, r5, r1
   1ba18:	cmp	r5, r3
   1ba1c:	and	r4, r4, r0
   1ba20:	cmpeq	r4, r2
   1ba24:	sub	r3, sl, fp
   1ba28:	beq	1c36c <_start@@Base+0x6dcc>
   1ba2c:	cmp	r3, #5
   1ba30:	bgt	1e0c0 <_start@@Base+0x8b20>
   1ba34:	mov	r1, fp
   1ba38:	mov	r2, sl
   1ba3c:	mov	r0, r9
   1ba40:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1ba44:	mov	fp, r0
   1ba48:	b	1b5e0 <_start@@Base+0x6040>
   1ba4c:	add	r4, fp, #8
   1ba50:	mov	r0, r4
   1ba54:	mov	r1, sl
   1ba58:	bl	156c8 <_start@@Base+0x128>
   1ba5c:	add	r3, pc, #780	; 0x30c
   1ba60:	ldrd	r2, [r3]
   1ba64:	cmp	r1, r3
   1ba68:	cmpeq	r0, r2
   1ba6c:	bhi	1bc68 <_start@@Base+0x66c8>
   1ba70:	add	r3, pc, #768	; 0x300
   1ba74:	ldrd	r2, [r3]
   1ba78:	cmp	r1, r3
   1ba7c:	cmpeq	r0, r2
   1ba80:	beq	1d028 <_start@@Base+0x7a88>
   1ba84:	add	r3, pc, #756	; 0x2f4
   1ba88:	ldrd	r2, [r3]
   1ba8c:	cmp	r1, r3
   1ba90:	cmpeq	r0, r2
   1ba94:	bne	1c324 <_start@@Base+0x6d84>
   1ba98:	add	r4, fp, #16
   1ba9c:	mov	r0, r4
   1baa0:	mov	r1, sl
   1baa4:	bl	156c8 <_start@@Base+0x128>
   1baa8:	add	r3, pc, #728	; 0x2d8
   1baac:	ldrd	r2, [r3]
   1bab0:	bic	r0, r0, #255	; 0xff
   1bab4:	cmp	r1, r3
   1bab8:	cmpeq	r0, r2
   1babc:	beq	1c928 <_start@@Base+0x7388>
   1bac0:	mov	r1, r4
   1bac4:	mov	r2, sl
   1bac8:	mov	r0, r9
   1bacc:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bad0:	mov	fp, r0
   1bad4:	b	1b5e0 <_start@@Base+0x6040>
   1bad8:	mov	r1, fp
   1badc:	mov	r3, #5
   1bae0:	mov	r2, sl
   1bae4:	mov	r0, r9
   1bae8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1baec:	mov	fp, r0
   1baf0:	b	1b538 <_start@@Base+0x5f98>
   1baf4:	add	r3, pc, #660	; 0x294
   1baf8:	ldrd	r2, [r3]
   1bafc:	cmp	r1, r3
   1bb00:	cmpeq	r0, r2
   1bb04:	beq	1bec0 <_start@@Base+0x6920>
   1bb08:	add	r3, pc, #648	; 0x288
   1bb0c:	ldrd	r2, [r3]
   1bb10:	bic	r5, r1, #255	; 0xff
   1bb14:	mov	r4, #0
   1bb18:	cmp	r5, r3
   1bb1c:	cmpeq	r4, r2
   1bb20:	bne	1c198 <_start@@Base+0x6bf8>
   1bb24:	sub	r3, sl, fp
   1bb28:	cmp	r3, #3
   1bb2c:	bgt	1d804 <_start@@Base+0x8264>
   1bb30:	mov	r1, fp
   1bb34:	mov	r2, sl
   1bb38:	mov	r0, r9
   1bb3c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bb40:	mov	fp, r0
   1bb44:	b	1b5e0 <_start@@Base+0x6040>
   1bb48:	add	r3, pc, #592	; 0x250
   1bb4c:	ldrd	r2, [r3]
   1bb50:	cmp	r1, r3
   1bb54:	cmpeq	r0, r2
   1bb58:	bhi	1bcf0 <_start@@Base+0x6750>
   1bb5c:	ldr	r3, [pc, #636]	; 1bde0 <_start@@Base+0x6840>
   1bb60:	mov	r2, #0
   1bb64:	and	r5, r5, r3
   1bb68:	ldr	r3, [pc, #628]	; 1bde4 <_start@@Base+0x6844>
   1bb6c:	and	r4, r4, r2
   1bb70:	cmp	r5, r3
   1bb74:	mov	r2, #0
   1bb78:	cmpeq	r4, r2
   1bb7c:	bne	1c308 <_start@@Base+0x6d68>
   1bb80:	sub	r3, sl, fp
   1bb84:	cmp	r3, #2
   1bb88:	bgt	1ca4c <_start@@Base+0x74ac>
   1bb8c:	mov	r1, fp
   1bb90:	mov	r2, sl
   1bb94:	mov	r0, r9
   1bb98:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bb9c:	mov	fp, r0
   1bba0:	b	1b5e0 <_start@@Base+0x6040>
   1bba4:	add	r3, pc, #508	; 0x1fc
   1bba8:	ldrd	r2, [r3]
   1bbac:	cmp	r1, r3
   1bbb0:	cmpeq	r0, r2
   1bbb4:	bne	1c1b0 <_start@@Base+0x6c10>
   1bbb8:	add	r4, fp, #8
   1bbbc:	mov	r0, r4
   1bbc0:	mov	r1, sl
   1bbc4:	bl	156c8 <_start@@Base+0x128>
   1bbc8:	mov	r0, #0
   1bbcc:	and	r1, r1, #-16777216	; 0xff000000
   1bbd0:	cmp	r1, #2030043136	; 0x79000000
   1bbd4:	cmpeq	r0, #0
   1bbd8:	beq	1c4b8 <_start@@Base+0x6f18>
   1bbdc:	mov	r1, r4
   1bbe0:	mov	r2, sl
   1bbe4:	mov	r0, r9
   1bbe8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bbec:	mov	fp, r0
   1bbf0:	b	1b5e0 <_start@@Base+0x6040>
   1bbf4:	add	r3, pc, #436	; 0x1b4
   1bbf8:	ldrd	r2, [r3]
   1bbfc:	cmp	r1, r3
   1bc00:	cmpeq	r0, r2
   1bc04:	bne	1c168 <_start@@Base+0x6bc8>
   1bc08:	add	r4, fp, #8
   1bc0c:	mov	r0, r4
   1bc10:	mov	r1, sl
   1bc14:	bl	156c8 <_start@@Base+0x128>
   1bc18:	add	r3, pc, #408	; 0x198
   1bc1c:	ldrd	r2, [r3]
   1bc20:	cmp	r1, r3
   1bc24:	cmpeq	r0, r2
   1bc28:	beq	1c6ac <_start@@Base+0x710c>
   1bc2c:	mov	r1, r4
   1bc30:	mov	r2, sl
   1bc34:	mov	r0, r9
   1bc38:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bc3c:	mov	fp, r0
   1bc40:	b	1b5e0 <_start@@Base+0x6040>
   1bc44:	sub	r3, sl, fp
   1bc48:	cmp	r3, #5
   1bc4c:	bgt	1c38c <_start@@Base+0x6dec>
   1bc50:	mov	r1, fp
   1bc54:	mov	r2, sl
   1bc58:	mov	r0, r9
   1bc5c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bc60:	mov	fp, r0
   1bc64:	b	1b5e0 <_start@@Base+0x6040>
   1bc68:	add	r3, pc, #336	; 0x150
   1bc6c:	ldrd	r2, [r3]
   1bc70:	cmp	r1, r3
   1bc74:	cmpeq	r0, r2
   1bc78:	beq	1d1a0 <_start@@Base+0x7c00>
   1bc7c:	add	r3, pc, #324	; 0x144
   1bc80:	ldrd	r2, [r3]
   1bc84:	cmp	r1, r3
   1bc88:	cmpeq	r0, r2
   1bc8c:	bne	1c354 <_start@@Base+0x6db4>
   1bc90:	add	r4, fp, #16
   1bc94:	mov	r0, r4
   1bc98:	mov	r1, sl
   1bc9c:	bl	156c8 <_start@@Base+0x128>
   1bca0:	mov	r0, #0
   1bca4:	and	r1, r1, #-16777216	; 0xff000000
   1bca8:	cmp	r1, #1929379840	; 0x73000000
   1bcac:	cmpeq	r0, #0
   1bcb0:	beq	1c94c <_start@@Base+0x73ac>
   1bcb4:	mov	r1, r4
   1bcb8:	mov	r2, sl
   1bcbc:	mov	r0, r9
   1bcc0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bcc4:	mov	fp, r0
   1bcc8:	b	1b5e0 <_start@@Base+0x6040>
   1bccc:	sub	r3, sl, fp
   1bcd0:	cmp	r3, #8
   1bcd4:	bgt	1d33c <_start@@Base+0x7d9c>
   1bcd8:	mov	r1, fp
   1bcdc:	mov	r2, sl
   1bce0:	mov	r0, r9
   1bce4:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bce8:	mov	fp, r0
   1bcec:	b	1b5e0 <_start@@Base+0x6040>
   1bcf0:	add	r3, pc, #216	; 0xd8
   1bcf4:	ldrd	r2, [r3]
   1bcf8:	cmp	r1, r3
   1bcfc:	cmpeq	r0, r2
   1bd00:	beq	1d658 <_start@@Base+0x80b8>
   1bd04:	add	r3, pc, #204	; 0xcc
   1bd08:	ldrd	r2, [r3]
   1bd0c:	mov	r4, #0
   1bd10:	cmp	r1, r3
   1bd14:	cmpeq	r4, r2
   1bd18:	beq	1c494 <_start@@Base+0x6ef4>
   1bd1c:	mov	r1, fp
   1bd20:	mov	r2, sl
   1bd24:	mov	r0, r9
   1bd28:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bd2c:	mov	fp, r0
   1bd30:	b	1b5e0 <_start@@Base+0x6040>
   1bd34:	nop			; (mov r0, r0)
   1bd38:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1bd3c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bd40:	svcvs	0x00725f6e
   1bd44:			; <UNDEFINED> instruction: 0x76656374
   1bd48:	svcvs	0x00725f6f
   1bd4c:			; <UNDEFINED> instruction: 0x76656374
   1bd50:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1bd54:	ldrbvs	r6, [pc], -pc, ror #8
   1bd58:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1bd5c:	ldrbvs	r6, [pc], -pc, ror #24
   1bd60:	ldrbvs	pc, [pc, #4095]!	; 1cd67 <_start@@Base+0x77c7>	; <UNPREDICTABLE>
   1bd64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bd68:	ldrtvs	r0, [r2], -r0
   1bd6c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bd70:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1bd74:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1bd78:	svcvs	0x006f6c73
   1bd7c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1bd80:	svcvs	0x00727465
   1bd84:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1bd88:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1bd8c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1bd90:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1bd94:	rsbvc	r7, r1, r5, ror #4
   1bd98:	andeq	r0, r0, r0
   1bd9c:	rsbvc	r7, pc, r0, lsl #6
   1bda0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1bda4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1bda8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1bdac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bdb0:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1bdb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bdb8:	cmnvs	r4, r5, ror r2
   1bdbc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1bdc0:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1bdc4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1bdc8:	cmnvs	r2, r5, ror #24
   1bdcc:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1bdd0:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1bdd4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1bdd8:	andeq	r0, r0, r0
   1bddc:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1bde0:			; <UNDEFINED> instruction: 0xffff0000
   1bde4:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1bde8:	sub	r3, sl, fp
   1bdec:	cmp	r3, #4
   1bdf0:	bgt	1d590 <_start@@Base+0x7ff0>
   1bdf4:	mov	r1, fp
   1bdf8:	mov	r2, sl
   1bdfc:	mov	r0, r9
   1be00:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1be04:	mov	fp, r0
   1be08:	b	1b5e0 <_start@@Base+0x6040>
   1be0c:	sub	r3, sl, fp
   1be10:	cmp	r3, #4
   1be14:	bgt	1d454 <_start@@Base+0x7eb4>
   1be18:	mov	r1, fp
   1be1c:	mov	r2, sl
   1be20:	mov	r0, r9
   1be24:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1be28:	mov	fp, r0
   1be2c:	b	1b5e0 <_start@@Base+0x6040>
   1be30:	mov	r3, #6
   1be34:	mov	r2, sl
   1be38:	mov	r1, fp
   1be3c:	mov	r0, r9
   1be40:	bl	18840 <_start@@Base+0x32a0>
   1be44:	cmp	r0, fp
   1be48:	mov	r5, r0
   1be4c:	beq	1b780 <_start@@Base+0x61e0>
   1be50:	add	r4, sp, #120	; 0x78
   1be54:	mov	r3, #0
   1be58:	mov	r1, r0
   1be5c:	str	r3, [r4, #-8]!
   1be60:	mov	r2, sl
   1be64:	mov	r0, r9
   1be68:	mov	r3, r4
   1be6c:	bl	30008 <flatcc_json_parser_float@@Base>
   1be70:	cmp	r0, r5
   1be74:	mov	fp, r0
   1be78:	beq	1e1d8 <_start@@Base+0x8c38>
   1be7c:	vldr	s15, [sp, #112]	; 0x70
   1be80:	vcmp.f32	s15, #0.0
   1be84:	vmrs	APSR_nzcv, fpscr
   1be88:	bne	1be98 <_start@@Base+0x68f8>
   1be8c:	ldr	r3, [r9, #8]
   1be90:	tst	r3, #2
   1be94:	beq	1b5e0 <_start@@Base+0x6040>
   1be98:	mov	r3, #4
   1be9c:	mov	r2, r3
   1bea0:	mov	r1, #27
   1bea4:	ldr	r0, [r9]
   1bea8:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1beac:	cmp	r0, #0
   1beb0:	beq	1bfcc <_start@@Base+0x6a2c>
   1beb4:	ldr	r3, [sp, #112]	; 0x70
   1beb8:	str	r3, [r0]
   1bebc:	b	1b5e0 <_start@@Base+0x6040>
   1bec0:	add	r4, fp, #8
   1bec4:	mov	r0, r4
   1bec8:	mov	r1, sl
   1becc:	bl	156c8 <_start@@Base+0x128>
   1bed0:	add	r3, pc, #752	; 0x2f0
   1bed4:	ldrd	r2, [r3]
   1bed8:	cmp	r1, r3
   1bedc:	cmpeq	r0, r2
   1bee0:	beq	1c8a0 <_start@@Base+0x7300>
   1bee4:	mov	r1, r4
   1bee8:	mov	r2, sl
   1beec:	mov	r0, r9
   1bef0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bef4:	mov	fp, r0
   1bef8:	b	1b5e0 <_start@@Base+0x6040>
   1befc:	cmp	r8, #5
   1bf00:	bgt	1bf1c <_start@@Base+0x697c>
   1bf04:	mov	r1, fp
   1bf08:	mov	r2, sl
   1bf0c:	mov	r0, r9
   1bf10:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1bf14:	mov	fp, r0
   1bf18:	b	1b5e0 <_start@@Base+0x6040>
   1bf1c:	mov	r3, #5
   1bf20:	mov	r2, sl
   1bf24:	mov	r1, fp
   1bf28:	mov	r0, r9
   1bf2c:	bl	18840 <_start@@Base+0x32a0>
   1bf30:	cmp	r0, fp
   1bf34:	mov	r4, r0
   1bf38:	beq	1bf04 <_start@@Base+0x6964>
   1bf3c:	mvn	r3, #-1073741824	; 0xc0000000
   1bf40:	mov	r2, #2
   1bf44:	mov	r1, #4
   1bf48:	ldr	r0, [r9]
   1bf4c:	bl	280dc <flatcc_builder_start_vector@@Base>
   1bf50:	cmp	r0, #0
   1bf54:	bne	1ebf8 <_start@@Base+0x9658>
   1bf58:	add	r3, sp, #88	; 0x58
   1bf5c:	mov	r1, r4
   1bf60:	mov	r2, sl
   1bf64:	mov	r0, r9
   1bf68:	bl	18ad0 <_start@@Base+0x3530>
   1bf6c:	ldr	r3, [sp, #88]	; 0x58
   1bf70:	cmp	r3, #0
   1bf74:	mov	fp, r0
   1bf78:	beq	1d784 <_start@@Base+0x81e4>
   1bf7c:	mov	r4, #1
   1bf80:	b	1bfac <_start@@Base+0x6a0c>
   1bf84:	bl	1ac20 <_start@@Base+0x5680>
   1bf88:	add	r3, sp, #88	; 0x58
   1bf8c:	mov	r2, sl
   1bf90:	mov	r1, r0
   1bf94:	mov	r0, r9
   1bf98:	bl	1a7f4 <_start@@Base+0x5254>
   1bf9c:	ldr	r3, [sp, #88]	; 0x58
   1bfa0:	cmp	r3, #0
   1bfa4:	mov	fp, r0
   1bfa8:	beq	1d784 <_start@@Base+0x81e4>
   1bfac:	mov	r1, r4
   1bfb0:	ldr	r0, [r9]
   1bfb4:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1bfb8:	mov	r1, fp
   1bfbc:	mov	r2, sl
   1bfc0:	subs	r3, r0, #0
   1bfc4:	mov	r0, r9
   1bfc8:	bne	1bf84 <_start@@Base+0x69e4>
   1bfcc:	mov	r3, sl
   1bfd0:	mov	sl, r9
   1bfd4:	mov	r9, r3
   1bfd8:	b	1b648 <_start@@Base+0x60a8>
   1bfdc:	add	fp, fp, #8
   1bfe0:	mov	r0, fp
   1bfe4:	mov	r1, sl
   1bfe8:	bl	156c8 <_start@@Base+0x128>
   1bfec:	add	r3, pc, #476	; 0x1dc
   1bff0:	ldrd	r2, [r3]
   1bff4:	cmp	r1, r3
   1bff8:	cmpeq	r0, r2
   1bffc:	bhi	1c1e8 <_start@@Base+0x6c48>
   1c000:	add	r3, pc, #464	; 0x1d0
   1c004:	ldrd	r2, [r3]
   1c008:	cmp	r1, r3
   1c00c:	cmpeq	r0, r2
   1c010:	beq	1c7d8 <_start@@Base+0x7238>
   1c014:	mov	r1, fp
   1c018:	mov	r2, sl
   1c01c:	mov	r0, r9
   1c020:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c024:	mov	fp, r0
   1c028:	b	1b5e0 <_start@@Base+0x6040>
   1c02c:	sub	r3, sl, fp
   1c030:	cmp	r3, #5
   1c034:	bgt	1cfc8 <_start@@Base+0x7a28>
   1c038:	mov	r1, fp
   1c03c:	mov	r2, sl
   1c040:	mov	r0, r9
   1c044:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c048:	mov	fp, r0
   1c04c:	b	1b5e0 <_start@@Base+0x6040>
   1c050:	sub	r3, sl, fp
   1c054:	cmp	r3, #5
   1c058:	ble	1bf04 <_start@@Base+0x6964>
   1c05c:	mov	r3, #5
   1c060:	mov	r2, sl
   1c064:	mov	r1, fp
   1c068:	mov	r0, r9
   1c06c:	bl	18840 <_start@@Base+0x32a0>
   1c070:	cmp	r0, fp
   1c074:	mov	r4, r0
   1c078:	beq	1bf04 <_start@@Base+0x6964>
   1c07c:	mvn	r3, #-1073741824	; 0xc0000000
   1c080:	mov	r2, #2
   1c084:	mov	r1, #4
   1c088:	ldr	r0, [r9]
   1c08c:	bl	280dc <flatcc_builder_start_vector@@Base>
   1c090:	cmp	r0, #0
   1c094:	bne	1ebf8 <_start@@Base+0x9658>
   1c098:	add	r3, sp, #88	; 0x58
   1c09c:	mov	r1, r4
   1c0a0:	mov	r2, sl
   1c0a4:	mov	r0, r9
   1c0a8:	bl	18ad0 <_start@@Base+0x3530>
   1c0ac:	ldr	r3, [sp, #88]	; 0x58
   1c0b0:	cmp	r3, #0
   1c0b4:	mov	fp, r0
   1c0b8:	beq	1ce80 <_start@@Base+0x78e0>
   1c0bc:	mov	r4, #1
   1c0c0:	b	1c0ec <_start@@Base+0x6b4c>
   1c0c4:	bl	1ac20 <_start@@Base+0x5680>
   1c0c8:	add	r3, sp, #88	; 0x58
   1c0cc:	mov	r2, sl
   1c0d0:	mov	r1, r0
   1c0d4:	mov	r0, r9
   1c0d8:	bl	1a7f4 <_start@@Base+0x5254>
   1c0dc:	ldr	r3, [sp, #88]	; 0x58
   1c0e0:	cmp	r3, #0
   1c0e4:	mov	fp, r0
   1c0e8:	beq	1ce80 <_start@@Base+0x78e0>
   1c0ec:	mov	r1, r4
   1c0f0:	ldr	r0, [r9]
   1c0f4:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1c0f8:	mov	r1, fp
   1c0fc:	mov	r2, sl
   1c100:	subs	r3, r0, #0
   1c104:	mov	r0, r9
   1c108:	bne	1c0c4 <_start@@Base+0x6b24>
   1c10c:	b	1bfcc <_start@@Base+0x6a2c>
   1c110:	add	r4, fp, #8
   1c114:	mov	r0, r4
   1c118:	mov	r1, sl
   1c11c:	bl	156c8 <_start@@Base+0x128>
   1c120:	ldr	r3, [pc, #184]	; 1c1e0 <_start@@Base+0x6c40>
   1c124:	ldr	r7, [pc, #184]	; 1c1e4 <_start@@Base+0x6c44>
   1c128:	mov	r2, #0
   1c12c:	mov	r6, #0
   1c130:	and	r3, r3, r1
   1c134:	and	r2, r2, r0
   1c138:	cmp	r3, r7
   1c13c:	cmpeq	r2, r6
   1c140:	bne	1c33c <_start@@Base+0x6d9c>
   1c144:	sub	r3, sl, r4
   1c148:	cmp	r3, #2
   1c14c:	bgt	1cb6c <_start@@Base+0x75cc>
   1c150:	mov	r1, r4
   1c154:	mov	r2, sl
   1c158:	mov	r0, r9
   1c15c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c160:	mov	fp, r0
   1c164:	b	1b5e0 <_start@@Base+0x6040>
   1c168:	mov	r1, fp
   1c16c:	mov	r2, sl
   1c170:	mov	r0, r9
   1c174:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c178:	mov	fp, r0
   1c17c:	b	1b5e0 <_start@@Base+0x6040>
   1c180:	mov	r1, fp
   1c184:	mov	r2, sl
   1c188:	mov	r0, r9
   1c18c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c190:	mov	fp, r0
   1c194:	b	1b5e0 <_start@@Base+0x6040>
   1c198:	mov	r1, fp
   1c19c:	mov	r2, sl
   1c1a0:	mov	r0, r9
   1c1a4:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c1a8:	mov	fp, r0
   1c1ac:	b	1b5e0 <_start@@Base+0x6040>
   1c1b0:	mov	r1, fp
   1c1b4:	mov	r2, sl
   1c1b8:	mov	r0, r9
   1c1bc:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c1c0:	mov	fp, r0
   1c1c4:	b	1b5e0 <_start@@Base+0x6040>
   1c1c8:	rsbvc	r6, r1, r5, ror #6
   1c1cc:	smcvs	54867	; 0xd653
   1c1d0:			; <UNDEFINED> instruction: 0x666e7630
   1c1d4:	teqvc	r6, #1593835520	; 0x5f000000
   1c1d8:			; <UNDEFINED> instruction: 0x666e7631
   1c1dc:	teqvc	r3, #-268435451	; 0xf0000005
   1c1e0:			; <UNDEFINED> instruction: 0xffff0000
   1c1e4:	ldrtcc	r0, [r4], -r0
   1c1e8:	add	r3, pc, #840	; 0x348
   1c1ec:	ldrd	r2, [r3]
   1c1f0:	cmp	r1, r3
   1c1f4:	cmpeq	r0, r2
   1c1f8:	bls	1c6f8 <_start@@Base+0x7158>
   1c1fc:	add	r3, pc, #828	; 0x33c
   1c200:	ldrd	r2, [r3]
   1c204:	cmp	r1, r3
   1c208:	cmpeq	r0, r2
   1c20c:	beq	1e48c <_start@@Base+0x8eec>
   1c210:	add	r3, pc, #816	; 0x330
   1c214:	ldrd	r2, [r3]
   1c218:	cmp	r1, r3
   1c21c:	cmpeq	r0, r2
   1c220:	bne	1e2dc <_start@@Base+0x8d3c>
   1c224:	sub	r3, sl, fp
   1c228:	cmp	r3, #8
   1c22c:	bgt	1ee1c <_start@@Base+0x987c>
   1c230:	add	fp, fp, #8
   1c234:	mov	r0, fp
   1c238:	mov	r1, sl
   1c23c:	bl	156c8 <_start@@Base+0x128>
   1c240:	mov	r0, #0
   1c244:	and	r1, r1, #-16777216	; 0xff000000
   1c248:	cmp	r1, #1627389952	; 0x61000000
   1c24c:	cmpeq	r0, #0
   1c250:	bne	1f1b4 <_start@@Base+0x9c14>
   1c254:	sub	r3, sl, fp
   1c258:	cmp	r3, #1
   1c25c:	ble	1f344 <_start@@Base+0x9da4>
   1c260:	mov	r3, #1
   1c264:	mov	r2, sl
   1c268:	mov	r1, fp
   1c26c:	mov	r0, r9
   1c270:	bl	18840 <_start@@Base+0x32a0>
   1c274:	cmp	fp, r0
   1c278:	mov	r4, r0
   1c27c:	beq	1f348 <_start@@Base+0x9da8>
   1c280:	mov	r0, #0
   1c284:	mov	r1, #0
   1c288:	add	r5, sp, #120	; 0x78
   1c28c:	mov	r2, sl
   1c290:	strd	r0, [r5, #-8]!
   1c294:	mov	r1, r4
   1c298:	mov	r3, r5
   1c29c:	mov	r0, r9
   1c2a0:	bl	180a0 <_start@@Base+0x2b00>
   1c2a4:	cmp	r0, r4
   1c2a8:	mov	fp, r0
   1c2ac:	beq	1f418 <_start@@Base+0x9e78>
   1c2b0:	ldrd	r2, [sp, #112]	; 0x70
   1c2b4:	orrs	r3, r2, r3
   1c2b8:	bne	1c2c8 <_start@@Base+0x6d28>
   1c2bc:	ldr	r3, [r9, #8]
   1c2c0:	tst	r3, #2
   1c2c4:	beq	1b5e0 <_start@@Base+0x6040>
   1c2c8:	mov	r3, #8
   1c2cc:	mov	r2, r3
   1c2d0:	mov	r1, #23
   1c2d4:	ldr	r0, [r9]
   1c2d8:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1c2dc:	cmp	r0, #0
   1c2e0:	beq	1f404 <_start@@Base+0x9e64>
   1c2e4:	ldrd	r2, [sp, #112]	; 0x70
   1c2e8:	strd	r2, [r0]
   1c2ec:	b	1b5e0 <_start@@Base+0x6040>
   1c2f0:	mov	r1, fp
   1c2f4:	mov	r2, sl
   1c2f8:	mov	r0, r9
   1c2fc:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c300:	mov	fp, r0
   1c304:	b	1b5e0 <_start@@Base+0x6040>
   1c308:	mov	r1, fp
   1c30c:	mov	r2, sl
   1c310:	mov	r0, r9
   1c314:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c318:	mov	fp, r0
   1c31c:	b	1b5e0 <_start@@Base+0x6040>
   1c320:	mov	r4, r0
   1c324:	mov	r1, r4
   1c328:	mov	r2, sl
   1c32c:	mov	r0, r9
   1c330:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c334:	mov	fp, r0
   1c338:	b	1b5e0 <_start@@Base+0x6040>
   1c33c:	mov	r1, r4
   1c340:	mov	r2, sl
   1c344:	mov	r0, r9
   1c348:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c34c:	mov	fp, r0
   1c350:	b	1b5e0 <_start@@Base+0x6040>
   1c354:	mov	r1, r4
   1c358:	mov	r2, sl
   1c35c:	mov	r0, r9
   1c360:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c364:	mov	fp, r0
   1c368:	b	1b5e0 <_start@@Base+0x6040>
   1c36c:	cmp	r3, #6
   1c370:	bgt	1cad8 <_start@@Base+0x7538>
   1c374:	mov	r1, fp
   1c378:	mov	r2, sl
   1c37c:	mov	r0, r9
   1c380:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c384:	mov	fp, r0
   1c388:	b	1b5e0 <_start@@Base+0x6040>
   1c38c:	mov	r3, #5
   1c390:	mov	r2, sl
   1c394:	mov	r1, fp
   1c398:	mov	r0, r9
   1c39c:	bl	18840 <_start@@Base+0x32a0>
   1c3a0:	cmp	r0, fp
   1c3a4:	mov	r4, r0
   1c3a8:	beq	1bc50 <_start@@Base+0x66b0>
   1c3ac:	mov	r0, #0
   1c3b0:	mov	r1, #0
   1c3b4:	mov	r3, #0
   1c3b8:	cmp	sl, r4
   1c3bc:	strd	r0, [sp, #112]	; 0x70
   1c3c0:	strb	r3, [sp, #104]	; 0x68
   1c3c4:	str	r3, [sp, #108]	; 0x6c
   1c3c8:	beq	1debc <_start@@Base+0x891c>
   1c3cc:	add	r3, sp, #112	; 0x70
   1c3d0:	str	r3, [sp]
   1c3d4:	mov	r2, sl
   1c3d8:	add	r3, sp, #108	; 0x6c
   1c3dc:	mov	r1, r4
   1c3e0:	mov	r0, r9
   1c3e4:	bl	31f80 <flatcc_json_parser_integer@@Base>
   1c3e8:	cmp	r4, r0
   1c3ec:	mov	fp, r0
   1c3f0:	beq	1deb8 <_start@@Base+0x8918>
   1c3f4:	ldr	r1, [sp, #108]	; 0x6c
   1c3f8:	ldrd	r2, [sp, #112]	; 0x70
   1c3fc:	cmp	r1, #0
   1c400:	bne	1c454 <_start@@Base+0x6eb4>
   1c404:	cmp	r3, #0
   1c408:	cmpeq	r2, #127	; 0x7f
   1c40c:	sxtbls	r2, r2
   1c410:	strbls	r2, [sp, #104]	; 0x68
   1c414:	bhi	1e554 <_start@@Base+0x8fb4>
   1c418:	cmp	r2, #8
   1c41c:	bne	1c42c <_start@@Base+0x6e8c>
   1c420:	ldr	r3, [r9, #8]
   1c424:	tst	r3, #2
   1c428:	beq	1b5e0 <_start@@Base+0x6040>
   1c42c:	mov	r3, #1
   1c430:	mov	r2, r3
   1c434:	mov	r1, #6
   1c438:	ldr	r0, [r9]
   1c43c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1c440:	cmp	r0, #0
   1c444:	beq	1bfcc <_start@@Base+0x6a2c>
   1c448:	ldrsb	r3, [sp, #104]	; 0x68
   1c44c:	strb	r3, [r0]
   1c450:	b	1b5e0 <_start@@Base+0x6040>
   1c454:	cmp	r3, #0
   1c458:	cmpeq	r2, #128	; 0x80
   1c45c:	rsbls	r2, r2, #0
   1c460:	sxtbls	r2, r2
   1c464:	strbls	r2, [sp, #104]	; 0x68
   1c468:	bls	1c418 <_start@@Base+0x6e78>
   1c46c:	mov	r1, r0
   1c470:	mov	r3, #8
   1c474:	mov	r2, sl
   1c478:	mov	r0, r9
   1c47c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1c480:	mov	fp, r0
   1c484:	cmp	r4, fp
   1c488:	beq	1debc <_start@@Base+0x891c>
   1c48c:	ldrsb	r2, [sp, #104]	; 0x68
   1c490:	b	1c418 <_start@@Base+0x6e78>
   1c494:	sub	r3, sl, fp
   1c498:	cmp	r3, #4
   1c49c:	bgt	1e250 <_start@@Base+0x8cb0>
   1c4a0:	mov	r1, fp
   1c4a4:	mov	r2, sl
   1c4a8:	mov	r0, r9
   1c4ac:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c4b0:	mov	fp, r0
   1c4b4:	b	1b5e0 <_start@@Base+0x6040>
   1c4b8:	sub	r3, sl, r4
   1c4bc:	cmp	r3, #1
   1c4c0:	ble	1ea30 <_start@@Base+0x9490>
   1c4c4:	mov	r3, #1
   1c4c8:	mov	r2, sl
   1c4cc:	mov	r1, r4
   1c4d0:	mov	r0, r9
   1c4d4:	bl	18840 <_start@@Base+0x32a0>
   1c4d8:	cmp	r4, r0
   1c4dc:	mov	fp, r0
   1c4e0:	beq	1ea2c <_start@@Base+0x948c>
   1c4e4:	mov	r3, #0
   1c4e8:	mov	r1, #3
   1c4ec:	ldr	r0, [r9]
   1c4f0:	str	r3, [sp, #92]	; 0x5c
   1c4f4:	bl	2887c <flatcc_builder_start_table@@Base>
   1c4f8:	cmp	r0, #0
   1c4fc:	bne	1d614 <_start@@Base+0x8074>
   1c500:	mov	r1, fp
   1c504:	add	r3, sp, #100	; 0x64
   1c508:	mov	r2, sl
   1c50c:	mov	r0, r9
   1c510:	bl	1878c <_start@@Base+0x31ec>
   1c514:	ldr	r3, [sp, #100]	; 0x64
   1c518:	cmp	r3, #0
   1c51c:	mov	fp, r0
   1c520:	beq	1e2f4 <_start@@Base+0x8d54>
   1c524:	mov	r6, #1
   1c528:	mov	r8, #5
   1c52c:	mov	r7, #0
   1c530:	b	1c5b8 <_start@@Base+0x7018>
   1c534:	nop			; (mov r0, r0)
   1c538:			; <UNDEFINED> instruction: 0x666e7630
   1c53c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1c540:			; <UNDEFINED> instruction: 0x666e7631
   1c544:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1c548:			; <UNDEFINED> instruction: 0x666e7631
   1c54c:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1c550:	strvc	r0, [r0], #-0
   1c554:	cmnvs	pc, #461373440	; 0x1b800000
   1c558:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1c55c:	sub	r3, pc, #20
   1c560:	ldrd	r2, [r3]
   1c564:	and	r0, r0, #-16777216	; 0xff000000
   1c568:	cmp	r1, r3
   1c56c:	cmpeq	r0, r2
   1c570:	bne	1c580 <_start@@Base+0x6fe0>
   1c574:	sub	r3, sl, fp
   1c578:	cmp	r3, #5
   1c57c:	bgt	1ceb4 <_start@@Base+0x7914>
   1c580:	mov	r1, fp
   1c584:	mov	r2, sl
   1c588:	mov	r0, r9
   1c58c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c590:	mov	fp, r0
   1c594:	mov	r1, fp
   1c598:	add	r3, sp, #100	; 0x64
   1c59c:	mov	r2, sl
   1c5a0:	mov	r0, r9
   1c5a4:	bl	19ea8 <_start@@Base+0x4908>
   1c5a8:	ldr	r3, [sp, #100]	; 0x64
   1c5ac:	cmp	r3, #0
   1c5b0:	mov	fp, r0
   1c5b4:	beq	1e2f4 <_start@@Base+0x8d54>
   1c5b8:	cmp	sl, fp
   1c5bc:	beq	1c5e0 <_start@@Base+0x7040>
   1c5c0:	ldrb	r3, [fp]
   1c5c4:	cmp	r3, #34	; 0x22
   1c5c8:	addeq	fp, fp, #1
   1c5cc:	streq	r7, [r9, #12]
   1c5d0:	beq	1c5e0 <_start@@Base+0x7040>
   1c5d4:	cmp	r3, #46	; 0x2e
   1c5d8:	strne	r6, [r9, #12]
   1c5dc:	beq	1d2c0 <_start@@Base+0x7d20>
   1c5e0:	mov	r1, sl
   1c5e4:	mov	r0, fp
   1c5e8:	bl	156c8 <_start@@Base+0x128>
   1c5ec:	ldr	r3, [pc, #-156]	; 1c558 <_start@@Base+0x6fb8>
   1c5f0:	mvn	r2, #0
   1c5f4:	cmp	r1, r3
   1c5f8:	cmpeq	r0, r2
   1c5fc:	bls	1c55c <_start@@Base+0x6fbc>
   1c600:	add	r3, pc, #944	; 0x3b0
   1c604:	ldrd	r2, [r3]
   1c608:	bic	r5, r1, #255	; 0xff
   1c60c:	mov	r4, #0
   1c610:	cmp	r5, r3
   1c614:	cmpeq	r4, r2
   1c618:	beq	1cd38 <_start@@Base+0x7798>
   1c61c:	ldr	r3, [pc, #948]	; 1c9d8 <_start@@Base+0x7438>
   1c620:	mov	r2, #0
   1c624:	and	r1, r1, r3
   1c628:	ldr	r3, [pc, #940]	; 1c9dc <_start@@Base+0x743c>
   1c62c:	and	r0, r0, r2
   1c630:	cmp	r1, r3
   1c634:	mov	r2, #0
   1c638:	cmpeq	r0, r2
   1c63c:	bne	1c580 <_start@@Base+0x6fe0>
   1c640:	sub	r3, sl, fp
   1c644:	cmp	r3, #2
   1c648:	ble	1c580 <_start@@Base+0x6fe0>
   1c64c:	mov	r1, fp
   1c650:	mov	r3, #2
   1c654:	mov	r2, sl
   1c658:	mov	r0, r9
   1c65c:	bl	18840 <_start@@Base+0x32a0>
   1c660:	cmp	r0, fp
   1c664:	mov	r1, r0
   1c668:	beq	1c580 <_start@@Base+0x6fe0>
   1c66c:	add	r3, sp, #104	; 0x68
   1c670:	mov	r2, sl
   1c674:	mov	r0, r9
   1c678:	bl	3255c <flatcc_json_parser_build_string@@Base>
   1c67c:	ldr	r3, [sp, #104]	; 0x68
   1c680:	cmp	r3, #0
   1c684:	mov	fp, r0
   1c688:	beq	1d614 <_start@@Base+0x8074>
   1c68c:	mov	r1, r7
   1c690:	ldr	r0, [r9]
   1c694:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1c698:	cmp	r0, #0
   1c69c:	beq	1d614 <_start@@Base+0x8074>
   1c6a0:	ldr	r3, [sp, #104]	; 0x68
   1c6a4:	str	r3, [r0]
   1c6a8:	b	1c594 <_start@@Base+0x6ff4>
   1c6ac:	add	r4, fp, #16
   1c6b0:	mov	r0, r4
   1c6b4:	mov	r1, sl
   1c6b8:	bl	156c8 <_start@@Base+0x128>
   1c6bc:	add	r3, pc, #764	; 0x2fc
   1c6c0:	ldrd	r2, [r3]
   1c6c4:	mov	r0, #0
   1c6c8:	cmp	r1, r3
   1c6cc:	cmpeq	r0, r2
   1c6d0:	bne	1e060 <_start@@Base+0x8ac0>
   1c6d4:	sub	r3, sl, r4
   1c6d8:	cmp	r3, #4
   1c6dc:	bgt	1eadc <_start@@Base+0x953c>
   1c6e0:	mov	r1, r4
   1c6e4:	mov	r2, sl
   1c6e8:	mov	r0, r9
   1c6ec:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c6f0:	mov	fp, r0
   1c6f4:	b	1b5e0 <_start@@Base+0x6040>
   1c6f8:	add	r3, pc, #712	; 0x2c8
   1c6fc:	ldrd	r2, [r3]
   1c700:	cmp	r1, r3
   1c704:	cmpeq	r0, r2
   1c708:	bne	1e16c <_start@@Base+0x8bcc>
   1c70c:	sub	r3, sl, fp
   1c710:	cmp	r3, #8
   1c714:	bgt	1ec24 <_start@@Base+0x9684>
   1c718:	add	fp, fp, #8
   1c71c:	mov	r0, fp
   1c720:	mov	r1, sl
   1c724:	bl	156c8 <_start@@Base+0x128>
   1c728:	mov	r0, #0
   1c72c:	and	r1, r1, #-16777216	; 0xff000000
   1c730:	cmp	r1, #1627389952	; 0x61000000
   1c734:	cmpeq	r0, #0
   1c738:	bne	1eeac <_start@@Base+0x990c>
   1c73c:	sub	r3, sl, fp
   1c740:	cmp	r3, #1
   1c744:	ble	1f2f0 <_start@@Base+0x9d50>
   1c748:	mov	r3, #1
   1c74c:	mov	r2, sl
   1c750:	mov	r1, fp
   1c754:	mov	r0, r9
   1c758:	bl	18840 <_start@@Base+0x32a0>
   1c75c:	cmp	fp, r0
   1c760:	mov	r4, r0
   1c764:	beq	1f2f4 <_start@@Base+0x9d54>
   1c768:	mov	r0, #0
   1c76c:	mov	r1, #0
   1c770:	add	r5, sp, #120	; 0x78
   1c774:	mov	r2, sl
   1c778:	strd	r0, [r5, #-8]!
   1c77c:	mov	r1, r4
   1c780:	mov	r3, r5
   1c784:	mov	r0, r9
   1c788:	bl	17c6c <_start@@Base+0x26cc>
   1c78c:	cmp	r0, r4
   1c790:	mov	fp, r0
   1c794:	beq	1f3ac <_start@@Base+0x9e0c>
   1c798:	ldrd	r2, [sp, #112]	; 0x70
   1c79c:	orrs	r3, r2, r3
   1c7a0:	bne	1c7b0 <_start@@Base+0x7210>
   1c7a4:	ldr	r3, [r9, #8]
   1c7a8:	tst	r3, #2
   1c7ac:	beq	1b5e0 <_start@@Base+0x6040>
   1c7b0:	mov	r3, #8
   1c7b4:	mov	r2, r3
   1c7b8:	mov	r1, #22
   1c7bc:	ldr	r0, [r9]
   1c7c0:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1c7c4:	cmp	r0, #0
   1c7c8:	beq	1f404 <_start@@Base+0x9e64>
   1c7cc:	ldrd	r2, [sp, #112]	; 0x70
   1c7d0:	strd	r2, [r0]
   1c7d4:	b	1b5e0 <_start@@Base+0x6040>
   1c7d8:	sub	r3, sl, fp
   1c7dc:	cmp	r3, #8
   1c7e0:	bgt	1e400 <_start@@Base+0x8e60>
   1c7e4:	add	fp, fp, #8
   1c7e8:	mov	r0, fp
   1c7ec:	mov	r1, sl
   1c7f0:	bl	156c8 <_start@@Base+0x128>
   1c7f4:	mov	r0, #0
   1c7f8:	and	r1, r1, #-16777216	; 0xff000000
   1c7fc:	cmp	r1, #1627389952	; 0x61000000
   1c800:	cmpeq	r0, #0
   1c804:	bne	1ec0c <_start@@Base+0x966c>
   1c808:	sub	r3, sl, fp
   1c80c:	cmp	r3, #1
   1c810:	ble	1f290 <_start@@Base+0x9cf0>
   1c814:	mov	r3, #1
   1c818:	mov	r2, sl
   1c81c:	mov	r1, fp
   1c820:	mov	r0, r9
   1c824:	bl	18840 <_start@@Base+0x32a0>
   1c828:	cmp	fp, r0
   1c82c:	mov	r5, r0
   1c830:	beq	1f290 <_start@@Base+0x9cf0>
   1c834:	add	r4, sp, #120	; 0x78
   1c838:	mov	r3, #0
   1c83c:	str	r3, [r4, #-8]!
   1c840:	mov	r1, r0
   1c844:	mov	r2, sl
   1c848:	mov	r3, r4
   1c84c:	mov	r0, r9
   1c850:	bl	18298 <_start@@Base+0x2cf8>
   1c854:	cmp	r0, r5
   1c858:	mov	fp, r0
   1c85c:	beq	1f3d8 <_start@@Base+0x9e38>
   1c860:	ldr	r3, [sp, #112]	; 0x70
   1c864:	cmp	r3, #0
   1c868:	bne	1c878 <_start@@Base+0x72d8>
   1c86c:	ldr	r3, [r9, #8]
   1c870:	tst	r3, #2
   1c874:	beq	1b5e0 <_start@@Base+0x6040>
   1c878:	mov	r3, #4
   1c87c:	mov	r2, r3
   1c880:	mov	r1, #20
   1c884:	ldr	r0, [r9]
   1c888:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1c88c:	cmp	r0, #0
   1c890:	beq	1f404 <_start@@Base+0x9e64>
   1c894:	ldr	r3, [sp, #112]	; 0x70
   1c898:	str	r3, [r0]
   1c89c:	b	1b5e0 <_start@@Base+0x6040>
   1c8a0:	add	fp, fp, #16
   1c8a4:	mov	r0, fp
   1c8a8:	mov	r1, sl
   1c8ac:	bl	156c8 <_start@@Base+0x128>
   1c8b0:	add	r3, pc, #280	; 0x118
   1c8b4:	ldrd	r2, [r3]
   1c8b8:	and	r0, r0, #-16777216	; 0xff000000
   1c8bc:	cmp	r1, r3
   1c8c0:	cmpeq	r0, r2
   1c8c4:	bne	1e184 <_start@@Base+0x8be4>
   1c8c8:	sub	r3, sl, fp
   1c8cc:	cmp	r3, #5
   1c8d0:	bgt	1ecb4 <_start@@Base+0x9714>
   1c8d4:	mov	r1, fp
   1c8d8:	mov	r2, sl
   1c8dc:	mov	r0, r9
   1c8e0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c8e4:	mov	fp, r0
   1c8e8:	b	1b5e0 <_start@@Base+0x6040>
   1c8ec:	sub	r3, sl, r4
   1c8f0:	cmp	r3, #7
   1c8f4:	bgt	1e59c <_start@@Base+0x8ffc>
   1c8f8:	mov	r1, r4
   1c8fc:	mov	r2, sl
   1c900:	mov	r0, r9
   1c904:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c908:	mov	fp, r0
   1c90c:	b	1b5e0 <_start@@Base+0x6040>
   1c910:	mov	r1, fp
   1c914:	mov	r2, sl
   1c918:	mov	r0, r9
   1c91c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c920:	mov	fp, r0
   1c924:	b	1b5e0 <_start@@Base+0x6040>
   1c928:	sub	r3, sl, r4
   1c92c:	cmp	r3, #7
   1c930:	bgt	1e6f8 <_start@@Base+0x9158>
   1c934:	mov	r1, r4
   1c938:	mov	r2, sl
   1c93c:	mov	r0, r9
   1c940:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1c944:	mov	fp, r0
   1c948:	b	1b5e0 <_start@@Base+0x6040>
   1c94c:	sub	r3, sl, r4
   1c950:	cmp	r3, #1
   1c954:	ble	1eda4 <_start@@Base+0x9804>
   1c958:	mov	r3, #1
   1c95c:	mov	r2, sl
   1c960:	mov	r1, r4
   1c964:	mov	r0, r9
   1c968:	bl	18840 <_start@@Base+0x32a0>
   1c96c:	cmp	r4, r0
   1c970:	mov	fp, r0
   1c974:	beq	1eda0 <_start@@Base+0x9800>
   1c978:	ldr	r0, [r9]
   1c97c:	bl	28234 <flatcc_builder_start_offset_vector@@Base>
   1c980:	cmp	r0, #0
   1c984:	bne	1bfcc <_start@@Base+0x6a2c>
   1c988:	mov	r1, fp
   1c98c:	add	r3, sp, #88	; 0x58
   1c990:	mov	r2, sl
   1c994:	mov	r0, r9
   1c998:	bl	18ad0 <_start@@Base+0x3530>
   1c99c:	ldr	r3, [sp, #88]	; 0x58
   1c9a0:	cmp	r3, #0
   1c9a4:	mov	fp, r0
   1c9a8:	beq	1ea48 <_start@@Base+0x94a8>
   1c9ac:	add	r4, sp, #92	; 0x5c
   1c9b0:	mov	r5, #1
   1c9b4:	b	1ca20 <_start@@Base+0x7480>
   1c9b8:	andeq	r0, r0, r0
   1c9bc:	strbtvc	r6, [r1], -r0, lsl #24
   1c9c0:	andeq	r0, r0, r0
   1c9c4:			; <UNDEFINED> instruction: 0x66666572
   1c9c8:			; <UNDEFINED> instruction: 0x666e7631
   1c9cc:	teqvc	r6, #1593835520	; 0x5f000000
   1c9d0:	strvc	r0, [r0], #-0
   1c9d4:	svcpl	0x00746573
   1c9d8:			; <UNDEFINED> instruction: 0xffff0000
   1c9dc:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1c9e0:	submi	r0, r0, r0
   1c9e4:	ldr	r0, [r9]
   1c9e8:	bl	27898 <flatcc_builder_extend_offset_vector@@Base>
   1c9ec:	add	r3, sp, #88	; 0x58
   1c9f0:	mov	r2, sl
   1c9f4:	mov	r1, fp
   1c9f8:	subs	ip, r0, #0
   1c9fc:	mov	r0, r9
   1ca00:	beq	1bfcc <_start@@Base+0x6a2c>
   1ca04:	ldr	lr, [sp, #92]	; 0x5c
   1ca08:	str	lr, [ip]
   1ca0c:	bl	1a7f4 <_start@@Base+0x5254>
   1ca10:	ldr	r3, [sp, #88]	; 0x58
   1ca14:	cmp	r3, #0
   1ca18:	mov	fp, r0
   1ca1c:	beq	1ea48 <_start@@Base+0x94a8>
   1ca20:	mov	r1, fp
   1ca24:	mov	r3, r4
   1ca28:	mov	r2, sl
   1ca2c:	mov	r0, r9
   1ca30:	bl	1b478 <_start@@Base+0x5ed8>
   1ca34:	ldr	r3, [sp, #92]	; 0x5c
   1ca38:	mov	r1, r5
   1ca3c:	cmp	r3, #0
   1ca40:	mov	fp, r0
   1ca44:	bne	1c9e4 <_start@@Base+0x7444>
   1ca48:	b	1bfcc <_start@@Base+0x6a2c>
   1ca4c:	mov	r3, #2
   1ca50:	mov	r2, sl
   1ca54:	mov	r1, fp
   1ca58:	mov	r0, r9
   1ca5c:	bl	18840 <_start@@Base+0x32a0>
   1ca60:	cmp	r0, fp
   1ca64:	mov	r5, r0
   1ca68:	beq	1bb8c <_start@@Base+0x65ec>
   1ca6c:	add	r4, sp, #120	; 0x78
   1ca70:	mov	r3, #0
   1ca74:	strh	r3, [r4, #-8]!
   1ca78:	mov	r1, r0
   1ca7c:	mov	r2, sl
   1ca80:	mov	r3, r4
   1ca84:	mov	r0, r9
   1ca88:	bl	18360 <_start@@Base+0x2dc0>
   1ca8c:	cmp	r5, r0
   1ca90:	mov	fp, r0
   1ca94:	beq	1ed74 <_start@@Base+0x97d4>
   1ca98:	ldrsh	r3, [sp, #112]	; 0x70
   1ca9c:	cmp	r3, #100	; 0x64
   1caa0:	bne	1cab0 <_start@@Base+0x7510>
   1caa4:	ldr	r3, [r9, #8]
   1caa8:	tst	r3, #2
   1caac:	beq	1b5e0 <_start@@Base+0x6040>
   1cab0:	mov	r3, #2
   1cab4:	mov	r2, r3
   1cab8:	mov	r1, r3
   1cabc:	ldr	r0, [r9]
   1cac0:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1cac4:	cmp	r0, #0
   1cac8:	beq	1bfcc <_start@@Base+0x6a2c>
   1cacc:	ldrsh	r3, [sp, #112]	; 0x70
   1cad0:	strh	r3, [r0]
   1cad4:	b	1b5e0 <_start@@Base+0x6040>
   1cad8:	mov	r3, #6
   1cadc:	mov	r2, sl
   1cae0:	mov	r1, fp
   1cae4:	mov	r0, r9
   1cae8:	bl	18840 <_start@@Base+0x32a0>
   1caec:	cmp	r0, fp
   1caf0:	mov	r5, r0
   1caf4:	beq	1c374 <_start@@Base+0x6dd4>
   1caf8:	add	r4, sp, #120	; 0x78
   1cafc:	mov	r3, #0
   1cb00:	mov	r1, r0
   1cb04:	str	r3, [r4, #-8]!
   1cb08:	mov	r2, sl
   1cb0c:	mov	r0, r9
   1cb10:	mov	r3, r4
   1cb14:	bl	30008 <flatcc_json_parser_float@@Base>
   1cb18:	cmp	r0, r5
   1cb1c:	mov	fp, r0
   1cb20:	beq	1f018 <_start@@Base+0x9a78>
   1cb24:	vldr	s15, [pc, #-332]	; 1c9e0 <_start@@Base+0x7440>
   1cb28:	vldr	s14, [sp, #112]	; 0x70
   1cb2c:	vcmp.f32	s14, s15
   1cb30:	vmrs	APSR_nzcv, fpscr
   1cb34:	bne	1cb44 <_start@@Base+0x75a4>
   1cb38:	ldr	r3, [r9, #8]
   1cb3c:	tst	r3, #2
   1cb40:	beq	1b5e0 <_start@@Base+0x6040>
   1cb44:	mov	r3, #4
   1cb48:	mov	r2, r3
   1cb4c:	mov	r1, #26
   1cb50:	ldr	r0, [r9]
   1cb54:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1cb58:	cmp	r0, #0
   1cb5c:	beq	1bfcc <_start@@Base+0x6a2c>
   1cb60:	ldr	r3, [sp, #112]	; 0x70
   1cb64:	str	r3, [r0]
   1cb68:	b	1b5e0 <_start@@Base+0x6040>
   1cb6c:	mov	r3, #2
   1cb70:	mov	r2, sl
   1cb74:	mov	r1, r4
   1cb78:	mov	r0, r9
   1cb7c:	bl	18840 <_start@@Base+0x32a0>
   1cb80:	cmp	r4, r0
   1cb84:	mov	fp, r0
   1cb88:	beq	1f360 <_start@@Base+0x9dc0>
   1cb8c:	mov	r3, #0
   1cb90:	mov	r1, #3
   1cb94:	ldr	r0, [r9]
   1cb98:	str	r3, [sp, #92]	; 0x5c
   1cb9c:	bl	2887c <flatcc_builder_start_table@@Base>
   1cba0:	cmp	r0, #0
   1cba4:	bne	1ce3c <_start@@Base+0x789c>
   1cba8:	mov	r1, fp
   1cbac:	add	r3, sp, #108	; 0x6c
   1cbb0:	mov	r2, sl
   1cbb4:	mov	r0, r9
   1cbb8:	bl	1878c <_start@@Base+0x31ec>
   1cbbc:	ldr	r3, [sp, #108]	; 0x6c
   1cbc0:	cmp	r3, #0
   1cbc4:	mov	fp, r0
   1cbc8:	beq	1e3dc <_start@@Base+0x8e3c>
   1cbcc:	add	r7, pc, #940	; 0x3ac
   1cbd0:	ldrd	r6, [r7]
   1cbd4:	mov	r8, #5
   1cbd8:	b	1cc38 <_start@@Base+0x7698>
   1cbdc:	add	r3, pc, #932	; 0x3a4
   1cbe0:	ldrd	r2, [r3]
   1cbe4:	mov	r0, #0
   1cbe8:	cmp	r1, r3
   1cbec:	cmpeq	r0, r2
   1cbf0:	bne	1cc00 <_start@@Base+0x7660>
   1cbf4:	sub	r3, sl, fp
   1cbf8:	cmp	r3, #4
   1cbfc:	bgt	1d2dc <_start@@Base+0x7d3c>
   1cc00:	mov	r1, fp
   1cc04:	mov	r2, sl
   1cc08:	mov	r0, r9
   1cc0c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1cc10:	mov	fp, r0
   1cc14:	mov	r1, fp
   1cc18:	add	r3, sp, #108	; 0x6c
   1cc1c:	mov	r2, sl
   1cc20:	mov	r0, r9
   1cc24:	bl	19ea8 <_start@@Base+0x4908>
   1cc28:	ldr	r3, [sp, #108]	; 0x6c
   1cc2c:	cmp	r3, #0
   1cc30:	mov	fp, r0
   1cc34:	beq	1e3dc <_start@@Base+0x8e3c>
   1cc38:	cmp	sl, fp
   1cc3c:	beq	1cc68 <_start@@Base+0x76c8>
   1cc40:	ldrb	r3, [fp]
   1cc44:	cmp	r3, #34	; 0x22
   1cc48:	moveq	r3, #0
   1cc4c:	addeq	fp, fp, #1
   1cc50:	streq	r3, [r9, #12]
   1cc54:	beq	1cc68 <_start@@Base+0x76c8>
   1cc58:	cmp	r3, #46	; 0x2e
   1cc5c:	movne	r3, #1
   1cc60:	strne	r3, [r9, #12]
   1cc64:	beq	1d5f0 <_start@@Base+0x8050>
   1cc68:	mov	r1, sl
   1cc6c:	mov	r0, fp
   1cc70:	bl	156c8 <_start@@Base+0x128>
   1cc74:	cmp	r1, r7
   1cc78:	cmpeq	r0, r6
   1cc7c:	bls	1cbdc <_start@@Base+0x763c>
   1cc80:	add	r5, pc, #776	; 0x308
   1cc84:	ldrd	r4, [r5]
   1cc88:	bic	r2, r0, #255	; 0xff
   1cc8c:	cmp	r1, r5
   1cc90:	cmpeq	r2, r4
   1cc94:	beq	1cdd4 <_start@@Base+0x7834>
   1cc98:	ldr	r2, [pc, #776]	; 1cfa8 <_start@@Base+0x7a08>
   1cc9c:	mvn	r3, #0
   1cca0:	and	r2, r2, r0
   1cca4:	and	r3, r3, r1
   1cca8:	mov	r0, r2
   1ccac:	mov	r1, r3
   1ccb0:	add	r3, pc, #736	; 0x2e0
   1ccb4:	ldrd	r2, [r3]
   1ccb8:	cmp	r1, r3
   1ccbc:	cmpeq	r0, r2
   1ccc0:	bne	1cc00 <_start@@Base+0x7660>
   1ccc4:	sub	r3, sl, fp
   1ccc8:	cmp	r3, #6
   1cccc:	ble	1cc00 <_start@@Base+0x7660>
   1ccd0:	mov	r1, fp
   1ccd4:	mov	r3, #6
   1ccd8:	mov	r2, sl
   1ccdc:	mov	r0, r9
   1cce0:	bl	18840 <_start@@Base+0x32a0>
   1cce4:	cmp	r0, fp
   1cce8:	mov	r1, r0
   1ccec:	beq	1cc00 <_start@@Base+0x7660>
   1ccf0:	mov	r3, #0
   1ccf4:	str	r3, [sp]
   1ccf8:	mov	r2, sl
   1ccfc:	add	r3, sp, #112	; 0x70
   1cd00:	mov	r0, r9
   1cd04:	bl	320bc <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1cd08:	ldr	r3, [sp, #112]	; 0x70
   1cd0c:	cmp	r3, #0
   1cd10:	mov	fp, r0
   1cd14:	beq	1ce3c <_start@@Base+0x789c>
   1cd18:	mov	r1, #2
   1cd1c:	ldr	r0, [r9]
   1cd20:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1cd24:	cmp	r0, #0
   1cd28:	beq	1ce3c <_start@@Base+0x789c>
   1cd2c:	ldr	r3, [sp, #112]	; 0x70
   1cd30:	str	r3, [r0]
   1cd34:	b	1cc14 <_start@@Base+0x7674>
   1cd38:	sub	r3, sl, fp
   1cd3c:	cmp	r3, #3
   1cd40:	ble	1c580 <_start@@Base+0x6fe0>
   1cd44:	mov	r3, #3
   1cd48:	mov	r2, sl
   1cd4c:	mov	r1, fp
   1cd50:	mov	r0, r9
   1cd54:	bl	18840 <_start@@Base+0x32a0>
   1cd58:	cmp	r0, fp
   1cd5c:	mov	r5, r0
   1cd60:	beq	1c580 <_start@@Base+0x6fe0>
   1cd64:	mov	r0, #0
   1cd68:	mov	r1, #0
   1cd6c:	add	r4, sp, #120	; 0x78
   1cd70:	mov	r2, sl
   1cd74:	strd	r0, [r4, #-8]!
   1cd78:	mov	r1, r5
   1cd7c:	mov	r3, r4
   1cd80:	mov	r0, r9
   1cd84:	bl	17c6c <_start@@Base+0x26cc>
   1cd88:	cmp	r5, r0
   1cd8c:	mov	fp, r0
   1cd90:	beq	1ed48 <_start@@Base+0x97a8>
   1cd94:	ldrd	r2, [sp, #112]	; 0x70
   1cd98:	orrs	r3, r2, r3
   1cd9c:	bne	1cdac <_start@@Base+0x780c>
   1cda0:	ldr	r3, [r9, #8]
   1cda4:	tst	r3, #2
   1cda8:	beq	1c594 <_start@@Base+0x6ff4>
   1cdac:	mov	r3, #8
   1cdb0:	mov	r2, r3
   1cdb4:	mov	r1, r6
   1cdb8:	ldr	r0, [r9]
   1cdbc:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1cdc0:	cmp	r0, #0
   1cdc4:	beq	1d60c <_start@@Base+0x806c>
   1cdc8:	ldrd	r2, [sp, #112]	; 0x70
   1cdcc:	strd	r2, [r0]
   1cdd0:	b	1c594 <_start@@Base+0x6ff4>
   1cdd4:	sub	r3, sl, fp
   1cdd8:	cmp	r3, #7
   1cddc:	ble	1cc00 <_start@@Base+0x7660>
   1cde0:	mov	r1, fp
   1cde4:	mov	r3, #7
   1cde8:	mov	r2, sl
   1cdec:	mov	r0, r9
   1cdf0:	bl	18840 <_start@@Base+0x32a0>
   1cdf4:	cmp	r0, fp
   1cdf8:	mov	r1, r0
   1cdfc:	beq	1cc00 <_start@@Base+0x7660>
   1ce00:	mov	r3, #1
   1ce04:	str	r3, [sp]
   1ce08:	mov	r2, sl
   1ce0c:	add	r3, sp, #112	; 0x70
   1ce10:	mov	r0, r9
   1ce14:	bl	320bc <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1ce18:	ldr	r3, [sp, #112]	; 0x70
   1ce1c:	cmp	r3, #0
   1ce20:	mov	fp, r0
   1ce24:	beq	1ce3c <_start@@Base+0x789c>
   1ce28:	mov	r1, #1
   1ce2c:	ldr	r0, [r9]
   1ce30:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1ce34:	cmp	r0, #0
   1ce38:	bne	1cd2c <_start@@Base+0x778c>
   1ce3c:	mov	r1, fp
   1ce40:	mov	r3, #33	; 0x21
   1ce44:	mov	r2, sl
   1ce48:	mov	r0, r9
   1ce4c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1ce50:	ldr	r3, [sp, #92]	; 0x5c
   1ce54:	cmp	r3, #0
   1ce58:	mov	fp, r0
   1ce5c:	beq	1bfcc <_start@@Base+0x6a2c>
   1ce60:	mov	r1, #35	; 0x23
   1ce64:	ldr	r0, [r9]
   1ce68:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1ce6c:	cmp	r0, #0
   1ce70:	beq	1bfcc <_start@@Base+0x6a2c>
   1ce74:	ldr	r3, [sp, #92]	; 0x5c
   1ce78:	str	r3, [r0]
   1ce7c:	b	1b5e0 <_start@@Base+0x6040>
   1ce80:	ldr	r0, [r9]
   1ce84:	bl	295bc <flatcc_builder_end_vector@@Base>
   1ce88:	cmp	r0, #0
   1ce8c:	str	r0, [sp, #92]	; 0x5c
   1ce90:	beq	1bfcc <_start@@Base+0x6a2c>
   1ce94:	mov	r1, #9
   1ce98:	ldr	r0, [r9]
   1ce9c:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1cea0:	cmp	r0, #0
   1cea4:	beq	1bfcc <_start@@Base+0x6a2c>
   1cea8:	ldr	r3, [sp, #92]	; 0x5c
   1ceac:	str	r3, [r0]
   1ceb0:	b	1b5e0 <_start@@Base+0x6040>
   1ceb4:	mov	r3, r8
   1ceb8:	mov	r2, sl
   1cebc:	mov	r1, fp
   1cec0:	mov	r0, r9
   1cec4:	bl	18840 <_start@@Base+0x32a0>
   1cec8:	cmp	r0, fp
   1cecc:	mov	r4, r0
   1ced0:	beq	1c580 <_start@@Base+0x6fe0>
   1ced4:	mov	r2, #0
   1ced8:	mov	r3, #0
   1cedc:	cmp	sl, r0
   1cee0:	strh	r7, [sp, #86]	; 0x56
   1cee4:	str	r7, [sp, #108]	; 0x6c
   1cee8:	strd	r2, [sp, #112]	; 0x70
   1ceec:	beq	1e08c <_start@@Base+0x8aec>
   1cef0:	add	r3, sp, #112	; 0x70
   1cef4:	str	r3, [sp]
   1cef8:	mov	r1, r0
   1cefc:	add	r3, sp, #108	; 0x6c
   1cf00:	mov	r2, sl
   1cf04:	mov	r0, r9
   1cf08:	bl	31f80 <flatcc_json_parser_integer@@Base>
   1cf0c:	cmp	r4, r0
   1cf10:	mov	fp, r0
   1cf14:	beq	1e088 <_start@@Base+0x8ae8>
   1cf18:	ldr	r3, [sp, #108]	; 0x6c
   1cf1c:	cmp	r3, #0
   1cf20:	bne	1e19c <_start@@Base+0x8bfc>
   1cf24:	ldrd	r2, [sp, #112]	; 0x70
   1cf28:	ldr	r0, [pc, #112]	; 1cfa0 <_start@@Base+0x7a00>
   1cf2c:	mov	r1, #0
   1cf30:	cmp	r3, r1
   1cf34:	cmpeq	r2, r0
   1cf38:	uxthls	r2, r2
   1cf3c:	strhls	r2, [sp, #86]	; 0x56
   1cf40:	bhi	1e344 <_start@@Base+0x8da4>
   1cf44:	cmp	r2, #0
   1cf48:	bne	1cf58 <_start@@Base+0x79b8>
   1cf4c:	ldr	r3, [r9, #8]
   1cf50:	tst	r3, #2
   1cf54:	beq	1c594 <_start@@Base+0x6ff4>
   1cf58:	mov	r3, #2
   1cf5c:	mov	r2, r3
   1cf60:	mov	r1, r3
   1cf64:	ldr	r0, [r9]
   1cf68:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1cf6c:	cmp	r0, #0
   1cf70:	beq	1d614 <_start@@Base+0x8074>
   1cf74:	ldrh	r3, [sp, #86]	; 0x56
   1cf78:	strh	r3, [r0]
   1cf7c:	b	1c594 <_start@@Base+0x6ff4>
   1cf80:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1cf84:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1cf88:	andeq	r0, r0, r0
   1cf8c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1cf90:	cmnvs	r4, r0, lsl #2
   1cf94:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1cf98:	strbvs	r0, [r4, #-0]!
   1cf9c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1cfa0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1cfa4:	andeq	r8, r5, r8, ror #2
   1cfa8:			; <UNDEFINED> instruction: 0xffff0000
   1cfac:	ldrvs	r0, [r2, -r0]!
   1cfb0:	andeq	r1, r4, r4, lsr pc
   1cfb4:	andeq	r1, r4, ip, lsr pc
   1cfb8:	andeq	r8, r5, r8, ror #1
   1cfbc:	andeq	r8, r5, r0, lsl #2
   1cfc0:	andeq	r3, r2, r8, lsr sp
   1cfc4:	andeq	r8, r5, ip, asr #2
   1cfc8:	mov	r1, fp
   1cfcc:	mov	r3, #5
   1cfd0:	mov	r2, sl
   1cfd4:	mov	r0, r9
   1cfd8:	bl	18840 <_start@@Base+0x32a0>
   1cfdc:	cmp	r0, fp
   1cfe0:	mov	r1, r0
   1cfe4:	beq	1c038 <_start@@Base+0x6a98>
   1cfe8:	add	r3, sp, #92	; 0x5c
   1cfec:	mov	r2, sl
   1cff0:	mov	r0, r9
   1cff4:	bl	1b478 <_start@@Base+0x5ed8>
   1cff8:	ldr	r3, [sp, #92]	; 0x5c
   1cffc:	cmp	r3, #0
   1d000:	mov	fp, r0
   1d004:	beq	1bfcc <_start@@Base+0x6a2c>
   1d008:	mov	r1, #12
   1d00c:	ldr	r0, [r9]
   1d010:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1d014:	cmp	r0, #0
   1d018:	beq	1bfcc <_start@@Base+0x6a2c>
   1d01c:	ldr	r3, [sp, #92]	; 0x5c
   1d020:	str	r3, [r0]
   1d024:	b	1b5e0 <_start@@Base+0x6040>
   1d028:	sub	r3, sl, r4
   1d02c:	cmp	r3, #8
   1d030:	ble	1c324 <_start@@Base+0x6d84>
   1d034:	mov	r3, #8
   1d038:	mov	r2, sl
   1d03c:	mov	r1, r4
   1d040:	mov	r0, r9
   1d044:	bl	18840 <_start@@Base+0x32a0>
   1d048:	cmp	r4, r0
   1d04c:	mov	fp, r0
   1d050:	beq	1c320 <_start@@Base+0x6d80>
   1d054:	mov	r2, #1
   1d058:	mov	r1, r2
   1d05c:	mvn	r3, #0
   1d060:	ldr	r0, [r9]
   1d064:	bl	280dc <flatcc_builder_start_vector@@Base>
   1d068:	subs	r5, r0, #0
   1d06c:	bne	1bfcc <_start@@Base+0x6a2c>
   1d070:	mov	r1, fp
   1d074:	add	r3, sp, #88	; 0x58
   1d078:	mov	r2, sl
   1d07c:	mov	r0, r9
   1d080:	bl	18ad0 <_start@@Base+0x3530>
   1d084:	ldr	r3, [sp, #88]	; 0x58
   1d088:	cmp	r3, #0
   1d08c:	mov	fp, r0
   1d090:	beq	1e204 <_start@@Base+0x8c64>
   1d094:	ldr	r7, [pc, #-232]	; 1cfb4 <_start@@Base+0x7a14>
   1d098:	mov	r6, #1
   1d09c:	b	1d0f4 <_start@@Base+0x7b54>
   1d0a0:	add	r3, sp, #112	; 0x70
   1d0a4:	mov	r1, fp
   1d0a8:	mov	r2, sl
   1d0ac:	mov	r0, r9
   1d0b0:	bl	181e4 <_start@@Base+0x2c44>
   1d0b4:	ldrb	r3, [sp, #112]	; 0x70
   1d0b8:	adds	r3, r3, #0
   1d0bc:	movne	r3, #1
   1d0c0:	strb	r3, [sp, #108]	; 0x6c
   1d0c4:	mov	r1, r0
   1d0c8:	cmp	r1, fp
   1d0cc:	beq	1d170 <_start@@Base+0x7bd0>
   1d0d0:	strb	r3, [r4]
   1d0d4:	mov	r2, sl
   1d0d8:	add	r3, sp, #88	; 0x58
   1d0dc:	mov	r0, r9
   1d0e0:	bl	1a7f4 <_start@@Base+0x5254>
   1d0e4:	ldr	r3, [sp, #88]	; 0x58
   1d0e8:	cmp	r3, #0
   1d0ec:	mov	fp, r0
   1d0f0:	beq	1e204 <_start@@Base+0x8c64>
   1d0f4:	mov	r1, r6
   1d0f8:	ldr	r0, [r9]
   1d0fc:	strb	r5, [sp, #108]	; 0x6c
   1d100:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1d104:	subs	r4, r0, #0
   1d108:	beq	1bfcc <_start@@Base+0x6a2c>
   1d10c:	sub	r8, sl, fp
   1d110:	cmp	r8, #3
   1d114:	ble	1d0a0 <_start@@Base+0x7b00>
   1d118:	mov	r2, #4
   1d11c:	ldr	r1, [pc, #-372]	; 1cfb0 <_start@@Base+0x7a10>
   1d120:	mov	r0, fp
   1d124:	bl	14558 <memcmp@plt>
   1d128:	cmp	r0, #0
   1d12c:	beq	1d160 <_start@@Base+0x7bc0>
   1d130:	cmp	r8, #4
   1d134:	beq	1d0a0 <_start@@Base+0x7b00>
   1d138:	mov	r2, #5
   1d13c:	mov	r1, r7
   1d140:	mov	r0, fp
   1d144:	bl	14558 <memcmp@plt>
   1d148:	cmp	r0, #0
   1d14c:	bne	1d0a0 <_start@@Base+0x7b00>
   1d150:	strb	r0, [sp, #108]	; 0x6c
   1d154:	add	r1, fp, #5
   1d158:	mov	r3, r5
   1d15c:	b	1d0c8 <_start@@Base+0x7b28>
   1d160:	strb	r6, [sp, #108]	; 0x6c
   1d164:	add	r1, fp, #4
   1d168:	mov	r3, #1
   1d16c:	b	1d0c8 <_start@@Base+0x7b28>
   1d170:	add	r3, sp, #108	; 0x6c
   1d174:	str	r3, [sp]
   1d178:	mov	r2, sl
   1d17c:	ldr	r3, [pc, #-480]	; 1cfa4 <_start@@Base+0x7a04>
   1d180:	mov	r0, r9
   1d184:	bl	18d40 <_start@@Base+0x37a0>
   1d188:	cmp	sl, r0
   1d18c:	cmpne	r0, fp
   1d190:	mov	r1, r0
   1d194:	beq	1f1dc <_start@@Base+0x9c3c>
   1d198:	ldrb	r3, [sp, #108]	; 0x6c
   1d19c:	b	1d0d0 <_start@@Base+0x7b30>
   1d1a0:	add	r4, fp, #16
   1d1a4:	mov	r0, r4
   1d1a8:	mov	r1, sl
   1d1ac:	bl	156c8 <_start@@Base+0x128>
   1d1b0:	ldr	r3, [pc, #-528]	; 1cfa8 <_start@@Base+0x7a08>
   1d1b4:	mov	r2, #0
   1d1b8:	and	r3, r3, r1
   1d1bc:	mov	r7, r1
   1d1c0:	ldr	r1, [pc, #-540]	; 1cfac <_start@@Base+0x7a0c>
   1d1c4:	and	r2, r2, r0
   1d1c8:	cmp	r3, r1
   1d1cc:	mov	r0, #0
   1d1d0:	cmpeq	r2, r0
   1d1d4:	beq	1e3b8 <_start@@Base+0x8e18>
   1d1d8:	and	r7, r7, #-16777216	; 0xff000000
   1d1dc:	mov	r6, #0
   1d1e0:	cmp	r7, #1728053248	; 0x67000000
   1d1e4:	cmpeq	r6, #0
   1d1e8:	bne	1e1c0 <_start@@Base+0x8c20>
   1d1ec:	sub	r3, sl, r4
   1d1f0:	cmp	r3, #1
   1d1f4:	ble	1f154 <_start@@Base+0x9bb4>
   1d1f8:	mov	r3, #1
   1d1fc:	mov	r2, sl
   1d200:	mov	r1, r4
   1d204:	mov	r0, r9
   1d208:	bl	18840 <_start@@Base+0x32a0>
   1d20c:	cmp	r4, r0
   1d210:	mov	fp, r0
   1d214:	beq	1f150 <_start@@Base+0x9bb0>
   1d218:	ldr	r0, [r9]
   1d21c:	bl	28234 <flatcc_builder_start_offset_vector@@Base>
   1d220:	cmp	r0, #0
   1d224:	bne	1bfcc <_start@@Base+0x6a2c>
   1d228:	mov	r1, fp
   1d22c:	add	r3, sp, #88	; 0x58
   1d230:	mov	r2, sl
   1d234:	mov	r0, r9
   1d238:	bl	18ad0 <_start@@Base+0x3530>
   1d23c:	ldr	r3, [sp, #88]	; 0x58
   1d240:	cmp	r3, #0
   1d244:	mov	fp, r0
   1d248:	beq	1edbc <_start@@Base+0x981c>
   1d24c:	add	r4, sp, #92	; 0x5c
   1d250:	mov	r5, #1
   1d254:	b	1d294 <_start@@Base+0x7cf4>
   1d258:	ldr	r0, [r9]
   1d25c:	bl	27898 <flatcc_builder_extend_offset_vector@@Base>
   1d260:	add	r3, sp, #88	; 0x58
   1d264:	mov	r2, sl
   1d268:	mov	r1, fp
   1d26c:	subs	ip, r0, #0
   1d270:	mov	r0, r9
   1d274:	beq	1bfcc <_start@@Base+0x6a2c>
   1d278:	ldr	lr, [sp, #92]	; 0x5c
   1d27c:	str	lr, [ip]
   1d280:	bl	1a7f4 <_start@@Base+0x5254>
   1d284:	ldr	r3, [sp, #88]	; 0x58
   1d288:	cmp	r3, #0
   1d28c:	mov	fp, r0
   1d290:	beq	1edbc <_start@@Base+0x981c>
   1d294:	mov	r1, fp
   1d298:	mov	r3, r4
   1d29c:	mov	r2, sl
   1d2a0:	mov	r0, r9
   1d2a4:	bl	3255c <flatcc_json_parser_build_string@@Base>
   1d2a8:	ldr	r3, [sp, #92]	; 0x5c
   1d2ac:	mov	r1, r5
   1d2b0:	cmp	r3, #0
   1d2b4:	mov	fp, r0
   1d2b8:	bne	1d258 <_start@@Base+0x7cb8>
   1d2bc:	b	1bfcc <_start@@Base+0x6a2c>
   1d2c0:	mov	r1, fp
   1d2c4:	mov	r3, r8
   1d2c8:	mov	r2, sl
   1d2cc:	mov	r0, r9
   1d2d0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1d2d4:	mov	fp, r0
   1d2d8:	b	1c5e0 <_start@@Base+0x7040>
   1d2dc:	mov	r1, fp
   1d2e0:	mov	r3, #4
   1d2e4:	mov	r2, sl
   1d2e8:	mov	r0, r9
   1d2ec:	bl	18840 <_start@@Base+0x32a0>
   1d2f0:	cmp	r0, fp
   1d2f4:	mov	r1, r0
   1d2f8:	beq	1cc00 <_start@@Base+0x7660>
   1d2fc:	mov	r5, #0
   1d300:	add	r3, sp, #112	; 0x70
   1d304:	str	r5, [sp]
   1d308:	mov	r2, sl
   1d30c:	mov	r0, r9
   1d310:	bl	320bc <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d314:	ldr	r3, [sp, #112]	; 0x70
   1d318:	cmp	r3, r5
   1d31c:	mov	fp, r0
   1d320:	beq	1ce3c <_start@@Base+0x789c>
   1d324:	mov	r1, r5
   1d328:	ldr	r0, [r9]
   1d32c:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1d330:	cmp	r0, #0
   1d334:	bne	1cd2c <_start@@Base+0x778c>
   1d338:	b	1ce3c <_start@@Base+0x789c>
   1d33c:	mov	r3, #8
   1d340:	mov	r2, sl
   1d344:	mov	r1, fp
   1d348:	mov	r0, r9
   1d34c:	bl	18840 <_start@@Base+0x32a0>
   1d350:	cmp	r0, fp
   1d354:	mov	r4, r0
   1d358:	beq	1bcd8 <_start@@Base+0x6738>
   1d35c:	sub	r5, sl, r0
   1d360:	mov	r3, #0
   1d364:	cmp	r5, #3
   1d368:	strb	r3, [sp, #104]	; 0x68
   1d36c:	ble	1d3a8 <_start@@Base+0x7e08>
   1d370:	mov	r2, #4
   1d374:	ldr	r1, [pc, #-972]	; 1cfb0 <_start@@Base+0x7a10>
   1d378:	bl	14558 <memcmp@plt>
   1d37c:	cmp	r0, #0
   1d380:	beq	1e078 <_start@@Base+0x8ad8>
   1d384:	cmp	r5, #4
   1d388:	beq	1d3a8 <_start@@Base+0x7e08>
   1d38c:	mov	r2, #5
   1d390:	ldr	r1, [pc, #-996]	; 1cfb4 <_start@@Base+0x7a14>
   1d394:	mov	r0, r4
   1d398:	bl	14558 <memcmp@plt>
   1d39c:	cmp	r0, #0
   1d3a0:	addeq	fp, r4, #5
   1d3a4:	beq	1d42c <_start@@Base+0x7e8c>
   1d3a8:	mov	r0, #0
   1d3ac:	mov	r1, #0
   1d3b0:	mov	r3, #0
   1d3b4:	cmp	sl, r4
   1d3b8:	strd	r0, [sp, #112]	; 0x70
   1d3bc:	str	r3, [sp, #108]	; 0x6c
   1d3c0:	beq	1e024 <_start@@Base+0x8a84>
   1d3c4:	add	r3, sp, #112	; 0x70
   1d3c8:	str	r3, [sp]
   1d3cc:	mov	r2, sl
   1d3d0:	add	r3, sp, #108	; 0x6c
   1d3d4:	mov	r1, r4
   1d3d8:	mov	r0, r9
   1d3dc:	bl	31f80 <flatcc_json_parser_integer@@Base>
   1d3e0:	cmp	r4, r0
   1d3e4:	mov	fp, r0
   1d3e8:	beq	1e024 <_start@@Base+0x8a84>
   1d3ec:	ldr	r3, [sp, #108]	; 0x6c
   1d3f0:	cmp	r3, #0
   1d3f4:	bne	1e6cc <_start@@Base+0x912c>
   1d3f8:	ldrd	r2, [sp, #112]	; 0x70
   1d3fc:	cmp	r3, #0
   1d400:	cmpeq	r2, #255	; 0xff
   1d404:	bhi	1ebdc <_start@@Base+0x963c>
   1d408:	tst	r2, #255	; 0xff
   1d40c:	movne	r3, #1
   1d410:	moveq	r3, #0
   1d414:	strb	r3, [sp, #104]	; 0x68
   1d418:	cmp	r3, #1
   1d41c:	bne	1d42c <_start@@Base+0x7e8c>
   1d420:	ldr	r3, [r9, #8]
   1d424:	tst	r3, #2
   1d428:	beq	1b5e0 <_start@@Base+0x6040>
   1d42c:	mov	r3, #1
   1d430:	mov	r2, r3
   1d434:	mov	r1, #15
   1d438:	ldr	r0, [r9]
   1d43c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1d440:	cmp	r0, #0
   1d444:	beq	1bfcc <_start@@Base+0x6a2c>
   1d448:	ldrb	r3, [sp, #104]	; 0x68
   1d44c:	strb	r3, [r0]
   1d450:	b	1b5e0 <_start@@Base+0x6040>
   1d454:	mov	r3, #4
   1d458:	mov	r2, sl
   1d45c:	mov	r1, fp
   1d460:	mov	r0, r9
   1d464:	bl	18840 <_start@@Base+0x32a0>
   1d468:	cmp	r0, fp
   1d46c:	mov	r4, r0
   1d470:	beq	1be18 <_start@@Base+0x6878>
   1d474:	mov	r2, #1
   1d478:	mov	r1, r2
   1d47c:	mvn	r3, #0
   1d480:	ldr	r0, [r9]
   1d484:	bl	280dc <flatcc_builder_start_vector@@Base>
   1d488:	subs	r6, r0, #0
   1d48c:	bne	1ebf8 <_start@@Base+0x9658>
   1d490:	add	r3, sp, #88	; 0x58
   1d494:	mov	r1, r4
   1d498:	mov	r2, sl
   1d49c:	mov	r0, r9
   1d4a0:	bl	18ad0 <_start@@Base+0x3530>
   1d4a4:	ldr	r3, [sp, #88]	; 0x58
   1d4a8:	cmp	r3, #0
   1d4ac:	mov	fp, r0
   1d4b0:	beq	1d55c <_start@@Base+0x7fbc>
   1d4b4:	ldr	r8, [pc, #-1284]	; 1cfb8 <_start@@Base+0x7a18>
   1d4b8:	mov	r7, #1
   1d4bc:	add	r5, sp, #112	; 0x70
   1d4c0:	b	1d4f0 <_start@@Base+0x7f50>
   1d4c4:	ldrb	r2, [sp, #112]	; 0x70
   1d4c8:	mov	r1, r0
   1d4cc:	add	r3, sp, #88	; 0x58
   1d4d0:	strb	r2, [r4]
   1d4d4:	mov	r0, r9
   1d4d8:	mov	r2, sl
   1d4dc:	bl	1a7f4 <_start@@Base+0x5254>
   1d4e0:	ldr	r3, [sp, #88]	; 0x58
   1d4e4:	cmp	r3, #0
   1d4e8:	mov	fp, r0
   1d4ec:	beq	1d55c <_start@@Base+0x7fbc>
   1d4f0:	mov	r1, r7
   1d4f4:	ldr	r0, [r9]
   1d4f8:	strb	r6, [sp, #112]	; 0x70
   1d4fc:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1d500:	mov	r1, fp
   1d504:	mov	r3, r5
   1d508:	mov	r2, sl
   1d50c:	subs	r4, r0, #0
   1d510:	mov	r0, r9
   1d514:	beq	1bfcc <_start@@Base+0x6a2c>
   1d518:	bl	181e4 <_start@@Base+0x2c44>
   1d51c:	cmp	r0, fp
   1d520:	bne	1d4c4 <_start@@Base+0x7f24>
   1d524:	str	r5, [sp]
   1d528:	mov	r3, r8
   1d52c:	mov	r2, sl
   1d530:	mov	r1, fp
   1d534:	mov	r0, r9
   1d538:	bl	198d0 <_start@@Base+0x4330>
   1d53c:	cmp	sl, r0
   1d540:	cmpne	r0, fp
   1d544:	bne	1d4c4 <_start@@Base+0x7f24>
   1d548:	mov	r3, sl
   1d54c:	mov	fp, r0
   1d550:	mov	sl, r9
   1d554:	mov	r9, r3
   1d558:	b	1b648 <_start@@Base+0x60a8>
   1d55c:	ldr	r0, [r9]
   1d560:	bl	295bc <flatcc_builder_end_vector@@Base>
   1d564:	cmp	r0, #0
   1d568:	str	r0, [sp, #92]	; 0x5c
   1d56c:	beq	1bfcc <_start@@Base+0x6a2c>
   1d570:	mov	r1, #30
   1d574:	ldr	r0, [r9]
   1d578:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1d57c:	cmp	r0, #0
   1d580:	beq	1bfcc <_start@@Base+0x6a2c>
   1d584:	ldr	r3, [sp, #92]	; 0x5c
   1d588:	str	r3, [r0]
   1d58c:	b	1b5e0 <_start@@Base+0x6040>
   1d590:	mov	r1, fp
   1d594:	mov	r3, #4
   1d598:	mov	r2, sl
   1d59c:	mov	r0, r9
   1d5a0:	bl	18840 <_start@@Base+0x32a0>
   1d5a4:	cmp	r0, fp
   1d5a8:	mov	r1, r0
   1d5ac:	beq	1bdf4 <_start@@Base+0x6854>
   1d5b0:	add	r3, sp, #92	; 0x5c
   1d5b4:	mov	r2, sl
   1d5b8:	mov	r0, r9
   1d5bc:	bl	3255c <flatcc_json_parser_build_string@@Base>
   1d5c0:	ldr	r3, [sp, #92]	; 0x5c
   1d5c4:	cmp	r3, #0
   1d5c8:	mov	fp, r0
   1d5cc:	beq	1bfcc <_start@@Base+0x6a2c>
   1d5d0:	mov	r1, #3
   1d5d4:	ldr	r0, [r9]
   1d5d8:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1d5dc:	cmp	r0, #0
   1d5e0:	beq	1bfcc <_start@@Base+0x6a2c>
   1d5e4:	ldr	r3, [sp, #92]	; 0x5c
   1d5e8:	str	r3, [r0]
   1d5ec:	b	1b5e0 <_start@@Base+0x6040>
   1d5f0:	mov	r1, fp
   1d5f4:	mov	r3, r8
   1d5f8:	mov	r2, sl
   1d5fc:	mov	r0, r9
   1d600:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1d604:	mov	fp, r0
   1d608:	b	1cc68 <_start@@Base+0x76c8>
   1d60c:	mov	r0, fp
   1d610:	mov	fp, r0
   1d614:	mov	r1, fp
   1d618:	mov	r3, #33	; 0x21
   1d61c:	mov	r2, sl
   1d620:	mov	r0, r9
   1d624:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1d628:	ldr	r3, [sp, #92]	; 0x5c
   1d62c:	cmp	r3, #0
   1d630:	mov	fp, r0
   1d634:	beq	1bfcc <_start@@Base+0x6a2c>
   1d638:	mov	r1, #14
   1d63c:	ldr	r0, [r9]
   1d640:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1d644:	cmp	r0, #0
   1d648:	beq	1bfcc <_start@@Base+0x6a2c>
   1d64c:	ldr	r3, [sp, #92]	; 0x5c
   1d650:	str	r3, [r0]
   1d654:	b	1b5e0 <_start@@Base+0x6040>
   1d658:	add	r4, fp, #8
   1d65c:	mov	r0, r4
   1d660:	mov	r1, sl
   1d664:	bl	156c8 <_start@@Base+0x128>
   1d668:	mov	r0, #0
   1d66c:	and	r1, r1, #-16777216	; 0xff000000
   1d670:	cmp	r1, #2030043136	; 0x79000000
   1d674:	cmpeq	r0, #0
   1d678:	bne	1e154 <_start@@Base+0x8bb4>
   1d67c:	sub	r3, sl, r4
   1d680:	cmp	r3, #1
   1d684:	ble	1f19c <_start@@Base+0x9bfc>
   1d688:	mov	r3, #1
   1d68c:	mov	r2, sl
   1d690:	mov	r1, r4
   1d694:	mov	r0, r9
   1d698:	bl	18840 <_start@@Base+0x32a0>
   1d69c:	cmp	r4, r0
   1d6a0:	mov	fp, r0
   1d6a4:	beq	1f198 <_start@@Base+0x9bf8>
   1d6a8:	mov	r2, #1
   1d6ac:	mov	r1, r2
   1d6b0:	mvn	r3, #0
   1d6b4:	ldr	r0, [r9]
   1d6b8:	bl	280dc <flatcc_builder_start_vector@@Base>
   1d6bc:	cmp	r0, #0
   1d6c0:	bne	1bfcc <_start@@Base+0x6a2c>
   1d6c4:	mov	r1, fp
   1d6c8:	add	r3, sp, #88	; 0x58
   1d6cc:	mov	r2, sl
   1d6d0:	mov	r0, r9
   1d6d4:	bl	18ad0 <_start@@Base+0x3530>
   1d6d8:	ldr	r3, [sp, #88]	; 0x58
   1d6dc:	cmp	r3, #0
   1d6e0:	mov	fp, r0
   1d6e4:	beq	1eaa8 <_start@@Base+0x9508>
   1d6e8:	ldr	r8, [pc, #-1844]	; 1cfbc <_start@@Base+0x7a1c>
   1d6ec:	mov	r7, #0
   1d6f0:	mov	r6, #1
   1d6f4:	add	r5, sp, #112	; 0x70
   1d6f8:	b	1d728 <_start@@Base+0x8188>
   1d6fc:	ldrb	r2, [sp, #112]	; 0x70
   1d700:	mov	r1, r0
   1d704:	add	r3, sp, #88	; 0x58
   1d708:	strb	r2, [r4]
   1d70c:	mov	r0, r9
   1d710:	mov	r2, sl
   1d714:	bl	1a7f4 <_start@@Base+0x5254>
   1d718:	ldr	r3, [sp, #88]	; 0x58
   1d71c:	cmp	r3, #0
   1d720:	mov	fp, r0
   1d724:	beq	1eaa8 <_start@@Base+0x9508>
   1d728:	mov	r1, r6
   1d72c:	ldr	r0, [r9]
   1d730:	strb	r7, [sp, #112]	; 0x70
   1d734:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1d738:	mov	r1, fp
   1d73c:	mov	r3, r5
   1d740:	mov	r2, sl
   1d744:	subs	r4, r0, #0
   1d748:	mov	r0, r9
   1d74c:	beq	1bfcc <_start@@Base+0x6a2c>
   1d750:	bl	181e4 <_start@@Base+0x2c44>
   1d754:	cmp	r0, fp
   1d758:	bne	1d6fc <_start@@Base+0x815c>
   1d75c:	str	r5, [sp]
   1d760:	mov	r3, r8
   1d764:	mov	r2, sl
   1d768:	mov	r1, fp
   1d76c:	mov	r0, r9
   1d770:	bl	198d0 <_start@@Base+0x4330>
   1d774:	cmp	sl, r0
   1d778:	cmpne	r0, fp
   1d77c:	bne	1d6fc <_start@@Base+0x815c>
   1d780:	b	1d548 <_start@@Base+0x7fa8>
   1d784:	ldr	r0, [r9]
   1d788:	bl	295bc <flatcc_builder_end_vector@@Base>
   1d78c:	cmp	r0, #0
   1d790:	str	r0, [sp, #92]	; 0x5c
   1d794:	beq	1bfcc <_start@@Base+0x6a2c>
   1d798:	mov	r1, #31
   1d79c:	ldr	r0, [r9]
   1d7a0:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1d7a4:	cmp	r0, #0
   1d7a8:	beq	1bfcc <_start@@Base+0x6a2c>
   1d7ac:	ldr	r3, [sp, #92]	; 0x5c
   1d7b0:	str	r3, [r0]
   1d7b4:	b	1b5e0 <_start@@Base+0x6040>
   1d7b8:	mov	r1, fp
   1d7bc:	mov	r3, #4
   1d7c0:	mov	r2, sl
   1d7c4:	mov	r0, r9
   1d7c8:	bl	18840 <_start@@Base+0x32a0>
   1d7cc:	cmp	r0, fp
   1d7d0:	mov	r1, r0
   1d7d4:	beq	1b804 <_start@@Base+0x6264>
   1d7d8:	ldr	r2, [sp, #96]	; 0x60
   1d7dc:	ldr	ip, [pc, #-2084]	; 1cfc0 <_start@@Base+0x7a20>
   1d7e0:	mov	r3, #8
   1d7e4:	str	r3, [sp]
   1d7e8:	stmib	sp, {r2, ip}
   1d7ec:	mov	r3, #0
   1d7f0:	mov	r2, sl
   1d7f4:	mov	r0, r9
   1d7f8:	bl	32980 <flatcc_json_parser_union@@Base>
   1d7fc:	mov	fp, r0
   1d800:	b	1b5e0 <_start@@Base+0x6040>
   1d804:	mov	r3, #3
   1d808:	mov	r2, sl
   1d80c:	mov	r1, fp
   1d810:	mov	r0, r9
   1d814:	bl	18840 <_start@@Base+0x32a0>
   1d818:	cmp	r0, fp
   1d81c:	mov	r5, r0
   1d820:	beq	1bb30 <_start@@Base+0x6590>
   1d824:	mov	r3, #16
   1d828:	mov	r2, #32
   1d82c:	mov	r1, #0
   1d830:	ldr	r0, [r9]
   1d834:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1d838:	subs	r6, r0, #0
   1d83c:	beq	1f234 <_start@@Base+0x9c94>
   1d840:	add	r3, sp, #104	; 0x68
   1d844:	mov	r1, r5
   1d848:	mov	r2, sl
   1d84c:	mov	r0, r9
   1d850:	bl	1878c <_start@@Base+0x31ec>
   1d854:	ldr	r3, [sp, #104]	; 0x68
   1d858:	cmp	r3, #0
   1d85c:	mov	fp, r0
   1d860:	beq	1b5e0 <_start@@Base+0x6040>
   1d864:	str	r6, [sp, #64]	; 0x40
   1d868:	ldr	r8, [pc, #-2220]	; 1cfc4 <_start@@Base+0x7a24>
   1d86c:	vldr	s18, [pc, #892]	; 1dbf0 <_start@@Base+0x8650>
   1d870:	vldr	d8, [pc, #848]	; 1dbc8 <_start@@Base+0x8628>
   1d874:	ldrd	r6, [sp, #72]	; 0x48
   1d878:	b	1da04 <_start@@Base+0x8464>
   1d87c:	ldrb	r2, [fp, #7]
   1d880:	mov	r3, #0
   1d884:	ldrb	r0, [fp, #6]
   1d888:	lsr	lr, r0, #24
   1d88c:	lsl	r1, r0, #8
   1d890:	str	lr, [sp, #60]	; 0x3c
   1d894:	str	r1, [sp, #56]	; 0x38
   1d898:	ldrd	r0, [sp, #56]	; 0x38
   1d89c:	orr	r0, r0, r2
   1d8a0:	orr	r1, r1, r3
   1d8a4:	mov	r2, r0
   1d8a8:	mov	r3, r1
   1d8ac:	ldrb	r0, [fp, #5]
   1d8b0:	lsr	lr, r0, #16
   1d8b4:	lsl	r1, r0, #16
   1d8b8:	str	lr, [sp, #52]	; 0x34
   1d8bc:	str	r1, [sp, #48]	; 0x30
   1d8c0:	ldrd	r0, [sp, #48]	; 0x30
   1d8c4:	orr	r0, r0, r2
   1d8c8:	orr	r1, r1, r3
   1d8cc:	mov	r2, r0
   1d8d0:	mov	r3, r1
   1d8d4:	ldrb	r0, [fp, #4]
   1d8d8:	lsr	lr, r0, #8
   1d8dc:	lsl	r1, r0, #24
   1d8e0:	str	lr, [sp, #36]	; 0x24
   1d8e4:	str	r1, [sp, #32]
   1d8e8:	ldrd	r0, [sp, #32]
   1d8ec:	orr	r0, r0, r2
   1d8f0:	orr	r1, r1, r3
   1d8f4:	mov	r2, r0
   1d8f8:	mov	r3, r1
   1d8fc:	ldrb	r1, [fp, #3]
   1d900:	str	r1, [sp, #44]	; 0x2c
   1d904:	mov	r1, #0
   1d908:	str	r1, [sp, #40]	; 0x28
   1d90c:	ldrd	r0, [sp, #40]	; 0x28
   1d910:	orr	r0, r0, r2
   1d914:	orr	r1, r1, r3
   1d918:	mov	r2, r0
   1d91c:	mov	r3, r1
   1d920:	ldrb	r0, [fp, #2]
   1d924:	lsl	r1, r0, #8
   1d928:	str	r1, [sp, #28]
   1d92c:	mov	r1, #0
   1d930:	str	r1, [sp, #24]
   1d934:	ldrd	r0, [sp, #24]
   1d938:	orr	r0, r0, r2
   1d93c:	orr	r1, r1, r3
   1d940:	mov	r2, r0
   1d944:	mov	r3, r1
   1d948:	ldrb	r0, [fp, #1]
   1d94c:	lsl	r1, r0, #16
   1d950:	str	r1, [sp, #20]
   1d954:	mov	r1, #0
   1d958:	str	r1, [sp, #16]
   1d95c:	ldrd	r0, [sp, #16]
   1d960:	orr	r0, r0, r2
   1d964:	orr	r1, r1, r3
   1d968:	mov	r2, r0
   1d96c:	mov	r3, r1
   1d970:	ldrb	r4, [fp]
   1d974:	add	r1, pc, #596	; 0x254
   1d978:	ldrd	r0, [r1]
   1d97c:	mov	r6, #0
   1d980:	orr	r2, r2, r6
   1d984:	lsl	r7, r4, #24
   1d988:	orr	r3, r3, r7
   1d98c:	cmp	r3, r1
   1d990:	cmpeq	r2, r0
   1d994:	bls	1dac4 <_start@@Base+0x8524>
   1d998:	mvn	r1, #-2013265920	; 0x88000000
   1d99c:	mvn	r0, #0
   1d9a0:	cmp	r3, r1
   1d9a4:	cmpeq	r2, r0
   1d9a8:	bhi	1db50 <_start@@Base+0x85b0>
   1d9ac:	add	r1, pc, #548	; 0x224
   1d9b0:	ldrd	r0, [r1]
   1d9b4:	and	r2, r2, #-16777216	; 0xff000000
   1d9b8:	cmp	r3, r1
   1d9bc:	cmpeq	r2, r0
   1d9c0:	bne	1d9cc <_start@@Base+0x842c>
   1d9c4:	cmp	ip, #5
   1d9c8:	bgt	1dd7c <_start@@Base+0x87dc>
   1d9cc:	mov	r1, fp
   1d9d0:	mov	r2, sl
   1d9d4:	mov	r0, r9
   1d9d8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1d9dc:	mov	r4, r0
   1d9e0:	add	r3, sp, #104	; 0x68
   1d9e4:	mov	r1, r4
   1d9e8:	mov	r2, sl
   1d9ec:	mov	r0, r9
   1d9f0:	bl	19ea8 <_start@@Base+0x4908>
   1d9f4:	ldr	r3, [sp, #104]	; 0x68
   1d9f8:	cmp	r3, #0
   1d9fc:	mov	fp, r0
   1da00:	beq	1de1c <_start@@Base+0x887c>
   1da04:	cmp	sl, fp
   1da08:	beq	1dd20 <_start@@Base+0x8780>
   1da0c:	ldrb	r3, [fp]
   1da10:	cmp	r3, #34	; 0x22
   1da14:	moveq	r3, #0
   1da18:	addeq	fp, fp, #1
   1da1c:	streq	r3, [r9, #12]
   1da20:	beq	1da34 <_start@@Base+0x8494>
   1da24:	cmp	r3, #46	; 0x2e
   1da28:	movne	r3, #1
   1da2c:	strne	r3, [r9, #12]
   1da30:	beq	1dd28 <_start@@Base+0x8788>
   1da34:	sub	ip, sl, fp
   1da38:	cmp	ip, #8
   1da3c:	bhi	1d87c <_start@@Base+0x82dc>
   1da40:	sub	r3, ip, #1
   1da44:	cmp	r3, #7
   1da48:	ldrls	pc, [pc, r3, lsl #2]
   1da4c:	b	1d9cc <_start@@Base+0x842c>
   1da50:			; <UNDEFINED> instruction: 0x0001dab8
   1da54:	andeq	sp, r1, ip, lsr #21
   1da58:	andeq	sp, r1, r0, lsr #21
   1da5c:	muleq	r1, r4, sl
   1da60:	andeq	sp, r1, r8, lsl #21
   1da64:	andeq	sp, r1, ip, ror sl
   1da68:	andeq	sp, r1, r0, ror sl
   1da6c:	andeq	sp, r1, ip, ror r8
   1da70:	mov	r2, #0
   1da74:	mov	r3, #0
   1da78:	b	1d884 <_start@@Base+0x82e4>
   1da7c:	mov	r2, #0
   1da80:	mov	r3, #0
   1da84:	b	1d8ac <_start@@Base+0x830c>
   1da88:	mov	r2, #0
   1da8c:	mov	r3, #0
   1da90:	b	1d8d4 <_start@@Base+0x8334>
   1da94:	mov	r2, #0
   1da98:	mov	r3, #0
   1da9c:	b	1d8fc <_start@@Base+0x835c>
   1daa0:	mov	r2, #0
   1daa4:	mov	r3, #0
   1daa8:	b	1d920 <_start@@Base+0x8380>
   1daac:	mov	r2, #0
   1dab0:	mov	r3, #0
   1dab4:	b	1d948 <_start@@Base+0x83a8>
   1dab8:	mov	r2, #0
   1dabc:	mov	r3, #0
   1dac0:	b	1d970 <_start@@Base+0x83d0>
   1dac4:	add	r1, pc, #276	; 0x114
   1dac8:	ldrd	r0, [r1]
   1dacc:	and	r2, r2, #-16777216	; 0xff000000
   1dad0:	cmp	r3, r1
   1dad4:	cmpeq	r2, r0
   1dad8:	beq	1dc00 <_start@@Base+0x8660>
   1dadc:	add	r1, pc, #260	; 0x104
   1dae0:	ldrd	r0, [r1]
   1dae4:	cmp	r3, r1
   1dae8:	cmpeq	r2, r0
   1daec:	bne	1d9cc <_start@@Base+0x842c>
   1daf0:	cmp	ip, #5
   1daf4:	ble	1d9cc <_start@@Base+0x842c>
   1daf8:	mov	r3, #5
   1dafc:	mov	r2, sl
   1db00:	mov	r1, fp
   1db04:	mov	r0, r9
   1db08:	bl	18840 <_start@@Base+0x32a0>
   1db0c:	cmp	r0, fp
   1db10:	mov	r5, r0
   1db14:	beq	1d9cc <_start@@Base+0x842c>
   1db18:	add	fp, sp, #120	; 0x78
   1db1c:	mov	r1, r0
   1db20:	vstmdb	fp!, {d8}
   1db24:	mov	r2, sl
   1db28:	mov	r0, r9
   1db2c:	mov	r3, fp
   1db30:	bl	2ff0c <flatcc_json_parser_double@@Base>
   1db34:	cmp	r5, r0
   1db38:	mov	r4, r0
   1db3c:	beq	1de40 <_start@@Base+0x88a0>
   1db40:	ldrd	r2, [sp, #112]	; 0x70
   1db44:	ldr	r1, [sp, #64]	; 0x40
   1db48:	strd	r2, [r1, #16]
   1db4c:	b	1d9e0 <_start@@Base+0x8440>
   1db50:	mvn	r1, #-2030043136	; 0x87000000
   1db54:	mvn	r0, #0
   1db58:	cmp	r3, r1
   1db5c:	cmpeq	r2, r0
   1db60:	bhi	1dc9c <_start@@Base+0x86fc>
   1db64:	cmp	ip, #1
   1db68:	ble	1d9cc <_start@@Base+0x842c>
   1db6c:	mov	r3, #1
   1db70:	mov	r2, sl
   1db74:	mov	r1, fp
   1db78:	mov	r0, r9
   1db7c:	bl	18840 <_start@@Base+0x32a0>
   1db80:	cmp	r0, fp
   1db84:	mov	r5, r0
   1db88:	beq	1d9cc <_start@@Base+0x842c>
   1db8c:	vmov	r3, s18
   1db90:	add	fp, sp, #120	; 0x78
   1db94:	mov	r1, r0
   1db98:	mov	r2, sl
   1db9c:	str	r3, [fp, #-8]!
   1dba0:	mov	r0, r9
   1dba4:	mov	r3, fp
   1dba8:	bl	30008 <flatcc_json_parser_float@@Base>
   1dbac:	cmp	r5, r0
   1dbb0:	mov	r4, r0
   1dbb4:	beq	1e318 <_start@@Base+0x8d78>
   1dbb8:	ldr	r2, [sp, #64]	; 0x40
   1dbbc:	ldr	r3, [sp, #112]	; 0x70
   1dbc0:	str	r3, [r2]
   1dbc4:	b	1d9e0 <_start@@Base+0x8440>
	...
   1dbd0:	rscscc	pc, pc, #1020	; 0x3fc
   1dbd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbd8:	movwcc	r0, #0
   1dbdc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbe0:	andcc	r0, r0, #0
   1dbe4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbe8:	mrscc	r0, (UNDEF: 0)
   1dbec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dbf0:	andeq	r0, r0, r0
   1dbf4:	andeq	r8, r5, r8, lsr #2
   1dbf8:	andeq	r8, r5, r8, lsl r1
   1dbfc:	ldrdeq	r8, [r5], -r8	; <UNPREDICTABLE>
   1dc00:	cmp	ip, #5
   1dc04:	ble	1d9cc <_start@@Base+0x842c>
   1dc08:	mov	r3, #5
   1dc0c:	mov	r2, sl
   1dc10:	mov	r1, fp
   1dc14:	mov	r0, r9
   1dc18:	bl	18840 <_start@@Base+0x32a0>
   1dc1c:	cmp	r0, fp
   1dc20:	mov	r5, r0
   1dc24:	beq	1d9cc <_start@@Base+0x842c>
   1dc28:	mov	r2, #0
   1dc2c:	mov	r3, #0
   1dc30:	cmp	sl, r0
   1dc34:	strb	r6, [sp, #100]	; 0x64
   1dc38:	str	r6, [sp, #108]	; 0x6c
   1dc3c:	strd	r2, [sp, #112]	; 0x70
   1dc40:	beq	1de6c <_start@@Base+0x88cc>
   1dc44:	add	r3, sp, #112	; 0x70
   1dc48:	str	r3, [sp]
   1dc4c:	mov	r1, r0
   1dc50:	add	r3, sp, #108	; 0x6c
   1dc54:	mov	r2, sl
   1dc58:	mov	r0, r9
   1dc5c:	bl	31f80 <flatcc_json_parser_integer@@Base>
   1dc60:	cmp	r5, r0
   1dc64:	mov	r4, r0
   1dc68:	beq	1de6c <_start@@Base+0x88cc>
   1dc6c:	ldr	r1, [sp, #108]	; 0x6c
   1dc70:	ldrd	r2, [sp, #112]	; 0x70
   1dc74:	cmp	r1, r6
   1dc78:	beq	1dd44 <_start@@Base+0x87a4>
   1dc7c:	cmp	r3, #0
   1dc80:	cmpeq	r2, #128	; 0x80
   1dc84:	rsbls	r2, r2, #0
   1dc88:	sxtbls	r2, r2
   1dc8c:	bhi	1de24 <_start@@Base+0x8884>
   1dc90:	ldr	r3, [sp, #64]	; 0x40
   1dc94:	strb	r2, [r3, #24]
   1dc98:	b	1d9e0 <_start@@Base+0x8440>
   1dc9c:	and	r3, r3, #-16777216	; 0xff000000
   1dca0:	mov	r2, #0
   1dca4:	cmp	r3, #2046820352	; 0x7a000000
   1dca8:	cmpeq	r2, #0
   1dcac:	beq	1ddb8 <_start@@Base+0x8818>
   1dcb0:	cmp	r3, #2030043136	; 0x79000000
   1dcb4:	cmpeq	r2, #0
   1dcb8:	bne	1d9cc <_start@@Base+0x842c>
   1dcbc:	cmp	ip, #1
   1dcc0:	ble	1d9cc <_start@@Base+0x842c>
   1dcc4:	mov	r3, #1
   1dcc8:	mov	r2, sl
   1dccc:	mov	r1, fp
   1dcd0:	mov	r0, r9
   1dcd4:	bl	18840 <_start@@Base+0x32a0>
   1dcd8:	cmp	r0, fp
   1dcdc:	mov	r5, r0
   1dce0:	beq	1d9cc <_start@@Base+0x842c>
   1dce4:	vmov	r3, s18
   1dce8:	add	fp, sp, #120	; 0x78
   1dcec:	mov	r1, r0
   1dcf0:	mov	r2, sl
   1dcf4:	str	r3, [fp, #-8]!
   1dcf8:	mov	r0, r9
   1dcfc:	mov	r3, fp
   1dd00:	bl	30008 <flatcc_json_parser_float@@Base>
   1dd04:	cmp	r5, r0
   1dd08:	mov	r4, r0
   1dd0c:	beq	1e570 <_start@@Base+0x8fd0>
   1dd10:	ldr	r2, [sp, #64]	; 0x40
   1dd14:	ldr	r3, [sp, #112]	; 0x70
   1dd18:	str	r3, [r2, #4]
   1dd1c:	b	1d9e0 <_start@@Base+0x8440>
   1dd20:	mov	fp, sl
   1dd24:	b	1d9cc <_start@@Base+0x842c>
   1dd28:	mov	r1, fp
   1dd2c:	mov	r3, #5
   1dd30:	mov	r2, sl
   1dd34:	mov	r0, r9
   1dd38:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1dd3c:	mov	fp, r0
   1dd40:	b	1da34 <_start@@Base+0x8494>
   1dd44:	cmp	r3, #0
   1dd48:	cmpeq	r2, #127	; 0x7f
   1dd4c:	sxtbls	r2, r2
   1dd50:	bls	1dc90 <_start@@Base+0x86f0>
   1dd54:	mov	r1, r0
   1dd58:	mov	r3, #7
   1dd5c:	mov	r2, sl
   1dd60:	mov	r0, r9
   1dd64:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1dd68:	mov	r4, r0
   1dd6c:	cmp	r5, r4
   1dd70:	beq	1de6c <_start@@Base+0x88cc>
   1dd74:	ldrsb	r2, [sp, #100]	; 0x64
   1dd78:	b	1dc90 <_start@@Base+0x86f0>
   1dd7c:	mov	r1, fp
   1dd80:	mov	r3, #5
   1dd84:	mov	r2, sl
   1dd88:	mov	r0, r9
   1dd8c:	bl	18840 <_start@@Base+0x32a0>
   1dd90:	cmp	r0, fp
   1dd94:	mov	r1, r0
   1dd98:	beq	1d9cc <_start@@Base+0x842c>
   1dd9c:	ldr	r3, [sp, #64]	; 0x40
   1dda0:	mov	r2, sl
   1dda4:	add	r3, r3, #26
   1dda8:	mov	r0, r9
   1ddac:	bl	1ac20 <_start@@Base+0x5680>
   1ddb0:	mov	r4, r0
   1ddb4:	b	1d9e0 <_start@@Base+0x8440>
   1ddb8:	cmp	ip, #1
   1ddbc:	ble	1d9cc <_start@@Base+0x842c>
   1ddc0:	mov	r3, #1
   1ddc4:	mov	r2, sl
   1ddc8:	mov	r1, fp
   1ddcc:	mov	r0, r9
   1ddd0:	bl	18840 <_start@@Base+0x32a0>
   1ddd4:	cmp	r0, fp
   1ddd8:	mov	r5, r0
   1dddc:	beq	1d9cc <_start@@Base+0x842c>
   1dde0:	vmov	r3, s18
   1dde4:	add	fp, sp, #120	; 0x78
   1dde8:	mov	r1, r0
   1ddec:	mov	r2, sl
   1ddf0:	str	r3, [fp, #-8]!
   1ddf4:	mov	r0, r9
   1ddf8:	mov	r3, fp
   1ddfc:	bl	30008 <flatcc_json_parser_float@@Base>
   1de00:	cmp	r5, r0
   1de04:	mov	r4, r0
   1de08:	beq	1ea7c <_start@@Base+0x94dc>
   1de0c:	ldr	r2, [sp, #64]	; 0x40
   1de10:	ldr	r3, [sp, #112]	; 0x70
   1de14:	str	r3, [r2, #8]
   1de18:	b	1d9e0 <_start@@Base+0x8440>
   1de1c:	strd	r6, [sp, #72]	; 0x48
   1de20:	b	1b5e0 <_start@@Base+0x6040>
   1de24:	mov	r1, r0
   1de28:	mov	r3, #8
   1de2c:	mov	r2, sl
   1de30:	mov	r0, r9
   1de34:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1de38:	mov	r4, r0
   1de3c:	b	1dd6c <_start@@Base+0x87cc>
   1de40:	mov	r1, r0
   1de44:	str	fp, [sp]
   1de48:	ldr	r3, [pc, #-604]	; 1dbf4 <_start@@Base+0x8654>
   1de4c:	mov	r2, sl
   1de50:	mov	r0, r9
   1de54:	bl	18b84 <_start@@Base+0x35e4>
   1de58:	cmp	sl, r0
   1de5c:	cmpne	r4, r0
   1de60:	beq	1f338 <_start@@Base+0x9d98>
   1de64:	mov	r4, r0
   1de68:	b	1db40 <_start@@Base+0x85a0>
   1de6c:	add	r3, sp, #100	; 0x64
   1de70:	str	r3, [sp]
   1de74:	mov	r2, sl
   1de78:	ldr	r3, [pc, #-648]	; 1dbf8 <_start@@Base+0x8658>
   1de7c:	mov	r1, r5
   1de80:	mov	r0, r9
   1de84:	bl	194f4 <_start@@Base+0x3f54>
   1de88:	cmp	sl, r0
   1de8c:	cmpne	r0, r5
   1de90:	mov	r4, r0
   1de94:	bne	1dd74 <_start@@Base+0x87d4>
   1de98:	strd	r6, [sp, #72]	; 0x48
   1de9c:	mov	r1, r4
   1dea0:	mov	r3, #33	; 0x21
   1dea4:	mov	r2, sl
   1dea8:	mov	r0, r9
   1deac:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1deb0:	mov	fp, r0
   1deb4:	b	1b5e0 <_start@@Base+0x6040>
   1deb8:	mov	r4, r0
   1debc:	add	r3, sp, #104	; 0x68
   1dec0:	str	r3, [sp]
   1dec4:	mov	r2, sl
   1dec8:	ldr	r3, [pc, #-724]	; 1dbfc <_start@@Base+0x865c>
   1decc:	mov	r1, r4
   1ded0:	mov	r0, r9
   1ded4:	bl	194f4 <_start@@Base+0x3f54>
   1ded8:	cmp	sl, r0
   1dedc:	cmpne	r0, r4
   1dee0:	mov	fp, r0
   1dee4:	bne	1c48c <_start@@Base+0x6eec>
   1dee8:	b	1bfcc <_start@@Base+0x6a2c>
   1deec:	add	r4, fp, #16
   1def0:	mov	r0, r4
   1def4:	mov	r1, sl
   1def8:	bl	156c8 <_start@@Base+0x128>
   1defc:	mov	r0, #0
   1df00:	and	r1, r1, #-16777216	; 0xff000000
   1df04:	cmp	r1, #1929379840	; 0x73000000
   1df08:	cmpeq	r0, #0
   1df0c:	bne	1e238 <_start@@Base+0x8c98>
   1df10:	sub	r3, sl, r4
   1df14:	cmp	r3, #1
   1df18:	ble	1f24c <_start@@Base+0x9cac>
   1df1c:	mov	r3, #1
   1df20:	mov	r2, sl
   1df24:	mov	r1, r4
   1df28:	mov	r0, r9
   1df2c:	bl	18840 <_start@@Base+0x32a0>
   1df30:	cmp	r4, r0
   1df34:	mov	fp, r0
   1df38:	beq	1f248 <_start@@Base+0x9ca8>
   1df3c:	mov	r2, #8
   1df40:	mov	r1, r2
   1df44:	mvn	r3, #-536870912	; 0xe0000000
   1df48:	ldr	r0, [r9]
   1df4c:	bl	280dc <flatcc_builder_start_vector@@Base>
   1df50:	cmp	r0, #0
   1df54:	bne	1bfcc <_start@@Base+0x6a2c>
   1df58:	mov	r1, fp
   1df5c:	add	r3, sp, #88	; 0x58
   1df60:	mov	r2, sl
   1df64:	mov	r0, r9
   1df68:	bl	18ad0 <_start@@Base+0x3530>
   1df6c:	ldr	r3, [sp, #88]	; 0x58
   1df70:	cmp	r3, #0
   1df74:	mov	fp, r0
   1df78:	beq	1ed14 <_start@@Base+0x9774>
   1df7c:	vldr	d8, [pc, #988]	; 1e360 <_start@@Base+0x8dc0>
   1df80:	ldr	r7, [pc, #996]	; 1e36c <_start@@Base+0x8dcc>
   1df84:	mov	r6, #1
   1df88:	add	r5, sp, #112	; 0x70
   1df8c:	b	1dfbc <_start@@Base+0x8a1c>
   1df90:	vldr	d7, [sp, #112]	; 0x70
   1df94:	mov	r1, r0
   1df98:	add	r3, sp, #88	; 0x58
   1df9c:	mov	r2, sl
   1dfa0:	vstr	d7, [r4]
   1dfa4:	mov	r0, r9
   1dfa8:	bl	1a7f4 <_start@@Base+0x5254>
   1dfac:	ldr	r3, [sp, #88]	; 0x58
   1dfb0:	cmp	r3, #0
   1dfb4:	mov	fp, r0
   1dfb8:	beq	1ed14 <_start@@Base+0x9774>
   1dfbc:	mov	r1, r6
   1dfc0:	ldr	r0, [r9]
   1dfc4:	vstr	d8, [sp, #112]	; 0x70
   1dfc8:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1dfcc:	mov	r1, fp
   1dfd0:	mov	r3, r5
   1dfd4:	mov	r2, sl
   1dfd8:	subs	r4, r0, #0
   1dfdc:	mov	r0, r9
   1dfe0:	beq	1bfcc <_start@@Base+0x6a2c>
   1dfe4:	bl	2ff0c <flatcc_json_parser_double@@Base>
   1dfe8:	cmp	r0, fp
   1dfec:	bne	1df90 <_start@@Base+0x89f0>
   1dff0:	str	r5, [sp]
   1dff4:	mov	r3, r7
   1dff8:	mov	r2, sl
   1dffc:	mov	r1, fp
   1e000:	mov	r0, r9
   1e004:	bl	18b84 <_start@@Base+0x35e4>
   1e008:	cmp	sl, r0
   1e00c:	cmpne	r0, fp
   1e010:	bne	1df90 <_start@@Base+0x89f0>
   1e014:	mov	r3, sl
   1e018:	mov	sl, r9
   1e01c:	mov	r9, r3
   1e020:	b	1b644 <_start@@Base+0x60a4>
   1e024:	mov	r3, #0
   1e028:	strb	r3, [sp, #104]	; 0x68
   1e02c:	add	r3, sp, #104	; 0x68
   1e030:	str	r3, [sp]
   1e034:	mov	r2, sl
   1e038:	ldr	r3, [pc, #816]	; 1e370 <_start@@Base+0x8dd0>
   1e03c:	mov	r1, r4
   1e040:	mov	r0, r9
   1e044:	bl	18d40 <_start@@Base+0x37a0>
   1e048:	cmp	sl, r0
   1e04c:	cmpne	r0, r4
   1e050:	mov	fp, r0
   1e054:	beq	1bfcc <_start@@Base+0x6a2c>
   1e058:	ldrb	r3, [sp, #104]	; 0x68
   1e05c:	b	1d418 <_start@@Base+0x7e78>
   1e060:	mov	r1, r4
   1e064:	mov	r2, sl
   1e068:	mov	r0, r9
   1e06c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e070:	mov	fp, r0
   1e074:	b	1b5e0 <_start@@Base+0x6040>
   1e078:	mov	r3, #1
   1e07c:	add	fp, r4, #4
   1e080:	strb	r3, [sp, #104]	; 0x68
   1e084:	b	1d420 <_start@@Base+0x7e80>
   1e088:	mov	r4, r0
   1e08c:	add	r3, sp, #86	; 0x56
   1e090:	str	r3, [sp]
   1e094:	mov	r2, sl
   1e098:	ldr	r3, [pc, #724]	; 1e374 <_start@@Base+0x8dd4>
   1e09c:	mov	r1, r4
   1e0a0:	mov	r0, r9
   1e0a4:	bl	19100 <_start@@Base+0x3b60>
   1e0a8:	cmp	sl, r0
   1e0ac:	cmpne	r0, r4
   1e0b0:	mov	fp, r0
   1e0b4:	beq	1d614 <_start@@Base+0x8074>
   1e0b8:	ldrh	r2, [sp, #86]	; 0x56
   1e0bc:	b	1cf44 <_start@@Base+0x79a4>
   1e0c0:	mov	r3, #5
   1e0c4:	mov	r2, sl
   1e0c8:	mov	r1, fp
   1e0cc:	mov	r0, r9
   1e0d0:	bl	18840 <_start@@Base+0x32a0>
   1e0d4:	cmp	r0, fp
   1e0d8:	mov	r5, r0
   1e0dc:	beq	1ba34 <_start@@Base+0x6494>
   1e0e0:	add	r4, sp, #120	; 0x78
   1e0e4:	mov	r3, #0
   1e0e8:	mov	r1, r0
   1e0ec:	str	r3, [r4, #-8]!
   1e0f0:	mov	r2, sl
   1e0f4:	mov	r0, r9
   1e0f8:	mov	r3, r4
   1e0fc:	bl	30008 <flatcc_json_parser_float@@Base>
   1e100:	cmp	r0, r5
   1e104:	mov	fp, r0
   1e108:	beq	1edf0 <_start@@Base+0x9850>
   1e10c:	vldr	s15, [pc, #596]	; 1e368 <_start@@Base+0x8dc8>
   1e110:	vldr	s14, [sp, #112]	; 0x70
   1e114:	vcmp.f32	s14, s15
   1e118:	vmrs	APSR_nzcv, fpscr
   1e11c:	bne	1e12c <_start@@Base+0x8b8c>
   1e120:	ldr	r3, [r9, #8]
   1e124:	tst	r3, #2
   1e128:	beq	1b5e0 <_start@@Base+0x6040>
   1e12c:	mov	r3, #4
   1e130:	mov	r2, r3
   1e134:	mov	r1, #25
   1e138:	ldr	r0, [r9]
   1e13c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1e140:	cmp	r0, #0
   1e144:	beq	1bfcc <_start@@Base+0x6a2c>
   1e148:	ldr	r3, [sp, #112]	; 0x70
   1e14c:	str	r3, [r0]
   1e150:	b	1b5e0 <_start@@Base+0x6040>
   1e154:	mov	r1, r4
   1e158:	mov	r2, sl
   1e15c:	mov	r0, r9
   1e160:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e164:	mov	fp, r0
   1e168:	b	1b5e0 <_start@@Base+0x6040>
   1e16c:	mov	r1, fp
   1e170:	mov	r2, sl
   1e174:	mov	r0, r9
   1e178:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e17c:	mov	fp, r0
   1e180:	b	1b5e0 <_start@@Base+0x6040>
   1e184:	mov	r1, fp
   1e188:	mov	r2, sl
   1e18c:	mov	r0, r9
   1e190:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e194:	mov	fp, r0
   1e198:	b	1b5e0 <_start@@Base+0x6040>
   1e19c:	mov	r1, r0
   1e1a0:	mov	r3, #8
   1e1a4:	mov	r2, sl
   1e1a8:	mov	r0, r9
   1e1ac:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1e1b0:	mov	fp, r0
   1e1b4:	cmp	r4, fp
   1e1b8:	bne	1e0b8 <_start@@Base+0x8b18>
   1e1bc:	b	1e08c <_start@@Base+0x8aec>
   1e1c0:	mov	r1, r4
   1e1c4:	mov	r2, sl
   1e1c8:	mov	r0, r9
   1e1cc:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e1d0:	mov	fp, r0
   1e1d4:	b	1b5e0 <_start@@Base+0x6040>
   1e1d8:	mov	r1, r0
   1e1dc:	str	r4, [sp]
   1e1e0:	ldr	r3, [pc, #400]	; 1e378 <_start@@Base+0x8dd8>
   1e1e4:	mov	r2, sl
   1e1e8:	mov	r0, r9
   1e1ec:	bl	18918 <_start@@Base+0x3378>
   1e1f0:	cmp	sl, r0
   1e1f4:	cmpne	fp, r0
   1e1f8:	beq	1e014 <_start@@Base+0x8a74>
   1e1fc:	mov	fp, r0
   1e200:	b	1be7c <_start@@Base+0x68dc>
   1e204:	ldr	r0, [r9]
   1e208:	bl	295bc <flatcc_builder_end_vector@@Base>
   1e20c:	cmp	r0, #0
   1e210:	str	r0, [sp, #92]	; 0x5c
   1e214:	beq	1bfcc <_start@@Base+0x6a2c>
   1e218:	mov	r1, #24
   1e21c:	ldr	r0, [r9]
   1e220:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1e224:	cmp	r0, #0
   1e228:	beq	1bfcc <_start@@Base+0x6a2c>
   1e22c:	ldr	r3, [sp, #92]	; 0x5c
   1e230:	str	r3, [r0]
   1e234:	b	1b5e0 <_start@@Base+0x6040>
   1e238:	mov	r1, r4
   1e23c:	mov	r2, sl
   1e240:	mov	r0, r9
   1e244:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e248:	mov	fp, r0
   1e24c:	b	1b5e0 <_start@@Base+0x6040>
   1e250:	mov	r3, #4
   1e254:	mov	r2, sl
   1e258:	mov	r1, fp
   1e25c:	mov	r0, r9
   1e260:	bl	18840 <_start@@Base+0x32a0>
   1e264:	cmp	r0, fp
   1e268:	mov	r5, r0
   1e26c:	beq	1c4a0 <_start@@Base+0x6f00>
   1e270:	add	r4, sp, #120	; 0x78
   1e274:	mov	r3, #0
   1e278:	strh	r3, [r4, #-8]!
   1e27c:	mov	r1, r0
   1e280:	mov	r2, sl
   1e284:	mov	r3, r4
   1e288:	mov	r0, r9
   1e28c:	bl	18360 <_start@@Base+0x2dc0>
   1e290:	cmp	r0, r5
   1e294:	mov	fp, r0
   1e298:	beq	1f16c <_start@@Base+0x9bcc>
   1e29c:	ldrsh	r3, [sp, #112]	; 0x70
   1e2a0:	cmp	r3, #150	; 0x96
   1e2a4:	bne	1e2b4 <_start@@Base+0x8d14>
   1e2a8:	ldr	r3, [r9, #8]
   1e2ac:	tst	r3, #2
   1e2b0:	beq	1b5e0 <_start@@Base+0x6040>
   1e2b4:	mov	r3, #2
   1e2b8:	mov	r2, r3
   1e2bc:	mov	r1, #1
   1e2c0:	ldr	r0, [r9]
   1e2c4:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1e2c8:	cmp	r0, #0
   1e2cc:	beq	1bfcc <_start@@Base+0x6a2c>
   1e2d0:	ldrsh	r3, [sp, #112]	; 0x70
   1e2d4:	strh	r3, [r0]
   1e2d8:	b	1b5e0 <_start@@Base+0x6040>
   1e2dc:	mov	r1, fp
   1e2e0:	mov	r2, sl
   1e2e4:	mov	r0, r9
   1e2e8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e2ec:	mov	fp, r0
   1e2f0:	b	1b5e0 <_start@@Base+0x6040>
   1e2f4:	ldr	r3, [r9, #24]
   1e2f8:	cmp	r3, #0
   1e2fc:	bne	1d614 <_start@@Base+0x8074>
   1e300:	ldr	r0, [r9]
   1e304:	bl	292bc <flatcc_builder_end_table@@Base>
   1e308:	cmp	r0, #0
   1e30c:	str	r0, [sp, #92]	; 0x5c
   1e310:	beq	1d614 <_start@@Base+0x8074>
   1e314:	b	1d638 <_start@@Base+0x8098>
   1e318:	mov	r1, r0
   1e31c:	str	fp, [sp]
   1e320:	ldr	r3, [pc, #84]	; 1e37c <_start@@Base+0x8ddc>
   1e324:	mov	r2, sl
   1e328:	mov	r0, r9
   1e32c:	bl	18918 <_start@@Base+0x3378>
   1e330:	cmp	sl, r0
   1e334:	cmpne	r4, r0
   1e338:	beq	1f338 <_start@@Base+0x9d98>
   1e33c:	mov	r4, r0
   1e340:	b	1dbb8 <_start@@Base+0x8618>
   1e344:	mov	r1, fp
   1e348:	mov	r3, #7
   1e34c:	mov	r2, sl
   1e350:	mov	r0, r9
   1e354:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1e358:	mov	fp, r0
   1e35c:	b	1e1b4 <_start@@Base+0x8c14>
	...
   1e368:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1e36c:	andeq	r8, r5, r0, asr #4
   1e370:	andeq	r8, r5, ip, lsl #3
   1e374:	muleq	r5, r8, r1
   1e378:	andeq	r8, r5, r8, asr #3
   1e37c:	andeq	r8, r5, r4, lsr r1
   1e380:	andeq	r8, r5, ip, asr #4
   1e384:	ldr	r3, [sp, #96]	; 0x60
   1e388:	mov	r2, r9
   1e38c:	mov	r0, sl
   1e390:	bl	32910 <flatcc_json_parser_finalize_unions@@Base>
   1e394:	mov	fp, r0
   1e398:	ldr	r0, [sl]
   1e39c:	bl	292bc <flatcc_builder_end_table@@Base>
   1e3a0:	ldr	r3, [sp, #68]	; 0x44
   1e3a4:	cmp	r0, #0
   1e3a8:	str	r0, [r3]
   1e3ac:	beq	1b648 <_start@@Base+0x60a8>
   1e3b0:	mov	r0, fp
   1e3b4:	b	1b65c <_start@@Base+0x60bc>
   1e3b8:	sub	r3, sl, r4
   1e3bc:	cmp	r3, #2
   1e3c0:	bgt	1ef50 <_start@@Base+0x99b0>
   1e3c4:	mov	r1, r4
   1e3c8:	mov	r2, sl
   1e3cc:	mov	r0, r9
   1e3d0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e3d4:	mov	fp, r0
   1e3d8:	b	1b5e0 <_start@@Base+0x6040>
   1e3dc:	ldr	r3, [r9, #24]
   1e3e0:	cmp	r3, #0
   1e3e4:	bne	1ce3c <_start@@Base+0x789c>
   1e3e8:	ldr	r0, [r9]
   1e3ec:	bl	292bc <flatcc_builder_end_table@@Base>
   1e3f0:	cmp	r0, #0
   1e3f4:	str	r0, [sp, #92]	; 0x5c
   1e3f8:	beq	1ce3c <_start@@Base+0x789c>
   1e3fc:	b	1ce60 <_start@@Base+0x78c0>
   1e400:	mov	r3, #8
   1e404:	mov	r2, sl
   1e408:	mov	r1, fp
   1e40c:	mov	r0, r9
   1e410:	bl	18840 <_start@@Base+0x32a0>
   1e414:	cmp	fp, r0
   1e418:	mov	r5, r0
   1e41c:	beq	1c7e4 <_start@@Base+0x7244>
   1e420:	add	r4, sp, #120	; 0x78
   1e424:	mov	r3, #0
   1e428:	str	r3, [r4, #-8]!
   1e42c:	mov	r1, r0
   1e430:	mov	r2, sl
   1e434:	mov	r3, r4
   1e438:	mov	r0, r9
   1e43c:	bl	18298 <_start@@Base+0x2cf8>
   1e440:	cmp	r0, r5
   1e444:	mov	fp, r0
   1e448:	beq	1f1f0 <_start@@Base+0x9c50>
   1e44c:	ldr	r3, [sp, #112]	; 0x70
   1e450:	cmp	r3, #0
   1e454:	bne	1e464 <_start@@Base+0x8ec4>
   1e458:	ldr	r3, [r9, #8]
   1e45c:	tst	r3, #2
   1e460:	beq	1b5e0 <_start@@Base+0x6040>
   1e464:	mov	r3, #4
   1e468:	mov	r2, r3
   1e46c:	mov	r1, #16
   1e470:	ldr	r0, [r9]
   1e474:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1e478:	cmp	r0, #0
   1e47c:	beq	1f404 <_start@@Base+0x9e64>
   1e480:	ldr	r3, [sp, #112]	; 0x70
   1e484:	str	r3, [r0]
   1e488:	b	1b5e0 <_start@@Base+0x6040>
   1e48c:	sub	r3, sl, fp
   1e490:	cmp	r3, #8
   1e494:	bgt	1eec4 <_start@@Base+0x9924>
   1e498:	add	fp, fp, #8
   1e49c:	mov	r0, fp
   1e4a0:	mov	r1, sl
   1e4a4:	bl	156c8 <_start@@Base+0x128>
   1e4a8:	mov	r0, #0
   1e4ac:	and	r1, r1, #-16777216	; 0xff000000
   1e4b0:	cmp	r1, #1627389952	; 0x61000000
   1e4b4:	cmpeq	r0, #0
   1e4b8:	bne	1f21c <_start@@Base+0x9c7c>
   1e4bc:	sub	r3, sl, fp
   1e4c0:	cmp	r3, #1
   1e4c4:	ble	1f2d4 <_start@@Base+0x9d34>
   1e4c8:	mov	r3, #1
   1e4cc:	mov	r2, sl
   1e4d0:	mov	r1, fp
   1e4d4:	mov	r0, r9
   1e4d8:	bl	18840 <_start@@Base+0x32a0>
   1e4dc:	cmp	fp, r0
   1e4e0:	mov	r4, r0
   1e4e4:	beq	1f2d8 <_start@@Base+0x9d38>
   1e4e8:	add	r5, sp, #120	; 0x78
   1e4ec:	mov	r3, #0
   1e4f0:	str	r3, [r5, #-8]!
   1e4f4:	mov	r1, r0
   1e4f8:	mov	r2, sl
   1e4fc:	mov	r3, r5
   1e500:	mov	r0, r9
   1e504:	bl	18128 <_start@@Base+0x2b88>
   1e508:	cmp	r0, r4
   1e50c:	mov	fp, r0
   1e510:	beq	1f378 <_start@@Base+0x9dd8>
   1e514:	ldr	r3, [sp, #112]	; 0x70
   1e518:	cmp	r3, #0
   1e51c:	bne	1e52c <_start@@Base+0x8f8c>
   1e520:	ldr	r3, [r9, #8]
   1e524:	tst	r3, #2
   1e528:	beq	1b5e0 <_start@@Base+0x6040>
   1e52c:	mov	r3, #4
   1e530:	mov	r2, r3
   1e534:	mov	r1, #21
   1e538:	ldr	r0, [r9]
   1e53c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1e540:	cmp	r0, #0
   1e544:	beq	1f404 <_start@@Base+0x9e64>
   1e548:	ldr	r3, [sp, #112]	; 0x70
   1e54c:	str	r3, [r0]
   1e550:	b	1b5e0 <_start@@Base+0x6040>
   1e554:	mov	r1, r0
   1e558:	mov	r3, #7
   1e55c:	mov	r2, sl
   1e560:	mov	r0, r9
   1e564:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1e568:	mov	fp, r0
   1e56c:	b	1c484 <_start@@Base+0x6ee4>
   1e570:	mov	r1, r0
   1e574:	str	fp, [sp]
   1e578:	mov	r3, r8
   1e57c:	mov	r2, sl
   1e580:	mov	r0, r9
   1e584:	bl	18918 <_start@@Base+0x3378>
   1e588:	cmp	sl, r0
   1e58c:	cmpne	r4, r0
   1e590:	beq	1f338 <_start@@Base+0x9d98>
   1e594:	mov	r4, r0
   1e598:	b	1dd10 <_start@@Base+0x8770>
   1e59c:	mov	r3, #7
   1e5a0:	mov	r2, sl
   1e5a4:	mov	r1, r4
   1e5a8:	mov	r0, r9
   1e5ac:	bl	18840 <_start@@Base+0x32a0>
   1e5b0:	cmp	r4, r0
   1e5b4:	mov	fp, r0
   1e5b8:	beq	1f3a4 <_start@@Base+0x9e04>
   1e5bc:	mov	r2, #8
   1e5c0:	mov	r1, r2
   1e5c4:	mvn	r3, #-536870912	; 0xe0000000
   1e5c8:	ldr	r0, [r9]
   1e5cc:	bl	280dc <flatcc_builder_start_vector@@Base>
   1e5d0:	cmp	r0, #0
   1e5d4:	bne	1bfcc <_start@@Base+0x6a2c>
   1e5d8:	mov	r1, fp
   1e5dc:	add	r3, sp, #88	; 0x58
   1e5e0:	mov	r2, sl
   1e5e4:	mov	r0, r9
   1e5e8:	bl	18ad0 <_start@@Base+0x3530>
   1e5ec:	ldr	r3, [sp, #88]	; 0x58
   1e5f0:	cmp	r3, #0
   1e5f4:	mov	fp, r0
   1e5f8:	beq	1e698 <_start@@Base+0x90f8>
   1e5fc:	mov	r8, #1
   1e600:	add	r7, sp, #112	; 0x70
   1e604:	b	1e634 <_start@@Base+0x9094>
   1e608:	ldrd	r4, [sp, #112]	; 0x70
   1e60c:	mov	r1, r0
   1e610:	add	r3, sp, #88	; 0x58
   1e614:	strd	r4, [r6]
   1e618:	mov	r2, sl
   1e61c:	mov	r0, r9
   1e620:	bl	1a7f4 <_start@@Base+0x5254>
   1e624:	ldr	r3, [sp, #88]	; 0x58
   1e628:	cmp	r3, #0
   1e62c:	mov	fp, r0
   1e630:	beq	1e698 <_start@@Base+0x90f8>
   1e634:	mov	r2, #0
   1e638:	mov	r3, #0
   1e63c:	mov	r1, r8
   1e640:	ldr	r0, [r9]
   1e644:	strd	r2, [sp, #112]	; 0x70
   1e648:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1e64c:	mov	r1, fp
   1e650:	mov	r3, r7
   1e654:	mov	r2, sl
   1e658:	subs	r6, r0, #0
   1e65c:	mov	r0, r9
   1e660:	beq	1bfcc <_start@@Base+0x6a2c>
   1e664:	bl	17c6c <_start@@Base+0x26cc>
   1e668:	cmp	r0, fp
   1e66c:	bne	1e608 <_start@@Base+0x9068>
   1e670:	str	r7, [sp]
   1e674:	ldr	r3, [pc, #-764]	; 1e380 <_start@@Base+0x8de0>
   1e678:	mov	r2, sl
   1e67c:	mov	r1, fp
   1e680:	mov	r0, r9
   1e684:	bl	19abc <_start@@Base+0x451c>
   1e688:	cmp	sl, r0
   1e68c:	cmpne	r0, fp
   1e690:	bne	1e608 <_start@@Base+0x9068>
   1e694:	b	1e014 <_start@@Base+0x8a74>
   1e698:	ldr	r0, [r9]
   1e69c:	bl	295bc <flatcc_builder_end_vector@@Base>
   1e6a0:	cmp	r0, #0
   1e6a4:	str	r0, [sp, #92]	; 0x5c
   1e6a8:	beq	1bfcc <_start@@Base+0x6a2c>
   1e6ac:	mov	r1, #32
   1e6b0:	ldr	r0, [r9]
   1e6b4:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1e6b8:	cmp	r0, #0
   1e6bc:	beq	1bfcc <_start@@Base+0x6a2c>
   1e6c0:	ldr	r3, [sp, #92]	; 0x5c
   1e6c4:	str	r3, [r0]
   1e6c8:	b	1b5e0 <_start@@Base+0x6040>
   1e6cc:	mov	r1, r0
   1e6d0:	mov	r3, #8
   1e6d4:	mov	r2, sl
   1e6d8:	mov	r0, r9
   1e6dc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1e6e0:	mov	fp, r0
   1e6e4:	mov	r3, #0
   1e6e8:	cmp	r4, fp
   1e6ec:	strb	r3, [sp, #104]	; 0x68
   1e6f0:	bne	1d42c <_start@@Base+0x7e8c>
   1e6f4:	b	1e02c <_start@@Base+0x8a8c>
   1e6f8:	mov	r3, #7
   1e6fc:	mov	r2, sl
   1e700:	mov	r1, r4
   1e704:	mov	r0, r9
   1e708:	bl	18840 <_start@@Base+0x32a0>
   1e70c:	cmp	r4, r0
   1e710:	mov	fp, r0
   1e714:	beq	1f44c <_start@@Base+0x9eac>
   1e718:	mvn	r3, #-536870912	; 0xe0000000
   1e71c:	mov	r2, #4
   1e720:	mov	r1, #8
   1e724:	ldr	r0, [r9]
   1e728:	bl	280dc <flatcc_builder_start_vector@@Base>
   1e72c:	cmp	r0, #0
   1e730:	bne	1bfcc <_start@@Base+0x6a2c>
   1e734:	mov	r1, fp
   1e738:	add	r3, sp, #88	; 0x58
   1e73c:	mov	r2, sl
   1e740:	mov	r0, r9
   1e744:	bl	18ad0 <_start@@Base+0x3530>
   1e748:	ldr	r3, [sp, #88]	; 0x58
   1e74c:	cmp	r3, #0
   1e750:	mov	fp, r0
   1e754:	beq	1e998 <_start@@Base+0x93f8>
   1e758:	mov	r8, #1
   1e75c:	mov	r1, r8
   1e760:	ldr	r0, [r9]
   1e764:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1e768:	subs	r5, r0, #0
   1e76c:	beq	1bfcc <_start@@Base+0x6a2c>
   1e770:	add	r3, sp, #108	; 0x6c
   1e774:	mov	r1, fp
   1e778:	mov	r2, sl
   1e77c:	mov	r0, r9
   1e780:	bl	1878c <_start@@Base+0x31ec>
   1e784:	ldr	r3, [sp, #108]	; 0x6c
   1e788:	cmp	r3, #0
   1e78c:	mov	r4, r0
   1e790:	beq	1e974 <_start@@Base+0x93d4>
   1e794:	mov	fp, #0
   1e798:	b	1e7f4 <_start@@Base+0x9254>
   1e79c:	add	r3, pc, #996	; 0x3e4
   1e7a0:	ldrd	r2, [r3]
   1e7a4:	cmp	r7, r3
   1e7a8:	cmpeq	r6, r2
   1e7ac:	bne	1e7bc <_start@@Base+0x921c>
   1e7b0:	sub	r3, sl, r4
   1e7b4:	cmp	r3, #8
   1e7b8:	bgt	1e8b0 <_start@@Base+0x9310>
   1e7bc:	mov	r1, r4
   1e7c0:	mov	r2, sl
   1e7c4:	mov	r0, r9
   1e7c8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1e7cc:	mov	r4, r0
   1e7d0:	mov	r1, r4
   1e7d4:	add	r3, sp, #108	; 0x6c
   1e7d8:	mov	r2, sl
   1e7dc:	mov	r0, r9
   1e7e0:	bl	19ea8 <_start@@Base+0x4908>
   1e7e4:	ldr	r3, [sp, #108]	; 0x6c
   1e7e8:	cmp	r3, #0
   1e7ec:	mov	r4, r0
   1e7f0:	beq	1e974 <_start@@Base+0x93d4>
   1e7f4:	cmp	sl, r4
   1e7f8:	beq	1e900 <_start@@Base+0x9360>
   1e7fc:	ldrb	r3, [r4]
   1e800:	cmp	r3, #34	; 0x22
   1e804:	addeq	r4, r4, #1
   1e808:	streq	fp, [r9, #12]
   1e80c:	beq	1e81c <_start@@Base+0x927c>
   1e810:	cmp	r3, #46	; 0x2e
   1e814:	strne	r8, [r9, #12]
   1e818:	beq	1e940 <_start@@Base+0x93a0>
   1e81c:	mov	r1, sl
   1e820:	mov	r0, r4
   1e824:	bl	156c8 <_start@@Base+0x128>
   1e828:	ldr	r3, [pc, #864]	; 1eb90 <_start@@Base+0x95f0>
   1e82c:	mov	r2, #0
   1e830:	and	r3, r3, r1
   1e834:	mov	r7, r1
   1e838:	ldr	r1, [pc, #852]	; 1eb94 <_start@@Base+0x95f4>
   1e83c:	and	r2, r2, r0
   1e840:	mov	r6, r0
   1e844:	cmp	r3, r1
   1e848:	mov	r0, #0
   1e84c:	cmpeq	r2, r0
   1e850:	bne	1e79c <_start@@Base+0x91fc>
   1e854:	sub	r3, sl, r4
   1e858:	cmp	r3, #2
   1e85c:	ble	1e7bc <_start@@Base+0x921c>
   1e860:	mov	r3, #2
   1e864:	mov	r2, sl
   1e868:	mov	r1, r4
   1e86c:	mov	r0, r9
   1e870:	bl	18840 <_start@@Base+0x32a0>
   1e874:	cmp	r0, r4
   1e878:	mov	r6, r0
   1e87c:	beq	1e7bc <_start@@Base+0x921c>
   1e880:	mov	r1, r0
   1e884:	add	r3, sp, #112	; 0x70
   1e888:	mov	r2, sl
   1e88c:	mov	r0, r9
   1e890:	str	fp, [sp, #112]	; 0x70
   1e894:	bl	18128 <_start@@Base+0x2b88>
   1e898:	cmp	r6, r0
   1e89c:	mov	r4, r0
   1e8a0:	beq	1e9fc <_start@@Base+0x945c>
   1e8a4:	ldr	r3, [sp, #112]	; 0x70
   1e8a8:	str	r3, [r5]
   1e8ac:	b	1e7d0 <_start@@Base+0x9230>
   1e8b0:	mov	r3, #8
   1e8b4:	mov	r2, sl
   1e8b8:	mov	r1, r4
   1e8bc:	mov	r0, r9
   1e8c0:	bl	18840 <_start@@Base+0x32a0>
   1e8c4:	cmp	r4, r0
   1e8c8:	mov	r6, r0
   1e8cc:	beq	1e7bc <_start@@Base+0x921c>
   1e8d0:	mov	r1, r0
   1e8d4:	add	r3, sp, #112	; 0x70
   1e8d8:	mov	r2, sl
   1e8dc:	mov	r0, r9
   1e8e0:	str	fp, [sp, #112]	; 0x70
   1e8e4:	bl	18128 <_start@@Base+0x2b88>
   1e8e8:	cmp	r6, r0
   1e8ec:	mov	r4, r0
   1e8f0:	beq	1e9cc <_start@@Base+0x942c>
   1e8f4:	ldr	r3, [sp, #112]	; 0x70
   1e8f8:	str	r3, [r5, #4]
   1e8fc:	b	1e7d0 <_start@@Base+0x9230>
   1e900:	mov	r1, sl
   1e904:	mov	r0, sl
   1e908:	bl	156c8 <_start@@Base+0x128>
   1e90c:	ldr	r3, [pc, #636]	; 1eb90 <_start@@Base+0x95f0>
   1e910:	mov	r2, #0
   1e914:	mov	r4, sl
   1e918:	and	r3, r3, r1
   1e91c:	mov	r7, r1
   1e920:	ldr	r1, [pc, #620]	; 1eb94 <_start@@Base+0x95f4>
   1e924:	and	r2, r2, r0
   1e928:	mov	r6, r0
   1e92c:	cmp	r3, r1
   1e930:	mov	r0, #0
   1e934:	cmpeq	r2, r0
   1e938:	bne	1e79c <_start@@Base+0x91fc>
   1e93c:	b	1e7bc <_start@@Base+0x921c>
   1e940:	mov	r1, r4
   1e944:	mov	r3, #5
   1e948:	mov	r2, sl
   1e94c:	mov	r0, r9
   1e950:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1e954:	mov	r4, r0
   1e958:	b	1e81c <_start@@Base+0x927c>
   1e95c:	mov	r1, r0
   1e960:	mov	r3, #33	; 0x21
   1e964:	mov	r2, sl
   1e968:	mov	r0, r9
   1e96c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1e970:	mov	r4, r0
   1e974:	add	r3, sp, #88	; 0x58
   1e978:	mov	r1, r4
   1e97c:	mov	r2, sl
   1e980:	mov	r0, r9
   1e984:	bl	1a7f4 <_start@@Base+0x5254>
   1e988:	ldr	r3, [sp, #88]	; 0x58
   1e98c:	cmp	r3, #0
   1e990:	mov	fp, r0
   1e994:	bne	1e75c <_start@@Base+0x91bc>
   1e998:	ldr	r0, [r9]
   1e99c:	bl	295bc <flatcc_builder_end_vector@@Base>
   1e9a0:	cmp	r0, #0
   1e9a4:	str	r0, [sp, #92]	; 0x5c
   1e9a8:	beq	1bfcc <_start@@Base+0x6a2c>
   1e9ac:	mov	r1, #29
   1e9b0:	ldr	r0, [r9]
   1e9b4:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1e9b8:	cmp	r0, #0
   1e9bc:	beq	1bfcc <_start@@Base+0x6a2c>
   1e9c0:	ldr	r3, [sp, #92]	; 0x5c
   1e9c4:	str	r3, [r0]
   1e9c8:	b	1b5e0 <_start@@Base+0x6040>
   1e9cc:	add	r3, sp, #112	; 0x70
   1e9d0:	str	r3, [sp]
   1e9d4:	mov	r1, r0
   1e9d8:	ldr	r3, [pc, #440]	; 1eb98 <_start@@Base+0x95f8>
   1e9dc:	mov	r2, sl
   1e9e0:	mov	r0, r9
   1e9e4:	bl	196e8 <_start@@Base+0x4148>
   1e9e8:	cmp	sl, r0
   1e9ec:	cmpne	r4, r0
   1e9f0:	beq	1e95c <_start@@Base+0x93bc>
   1e9f4:	mov	r4, r0
   1e9f8:	b	1e8f4 <_start@@Base+0x9354>
   1e9fc:	add	r3, sp, #112	; 0x70
   1ea00:	str	r3, [sp]
   1ea04:	mov	r1, r0
   1ea08:	ldr	r3, [pc, #396]	; 1eb9c <_start@@Base+0x95fc>
   1ea0c:	mov	r2, sl
   1ea10:	mov	r0, r9
   1ea14:	bl	196e8 <_start@@Base+0x4148>
   1ea18:	cmp	sl, r0
   1ea1c:	cmpne	r4, r0
   1ea20:	beq	1e95c <_start@@Base+0x93bc>
   1ea24:	mov	r4, r0
   1ea28:	b	1e8a4 <_start@@Base+0x9304>
   1ea2c:	mov	r4, r0
   1ea30:	mov	r1, r4
   1ea34:	mov	r2, sl
   1ea38:	mov	r0, r9
   1ea3c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1ea40:	mov	fp, r0
   1ea44:	b	1b5e0 <_start@@Base+0x6040>
   1ea48:	ldr	r0, [r9]
   1ea4c:	bl	297dc <flatcc_builder_end_offset_vector@@Base>
   1ea50:	cmp	r0, #0
   1ea54:	str	r0, [sp, #92]	; 0x5c
   1ea58:	beq	1bfcc <_start@@Base+0x6a2c>
   1ea5c:	mov	r1, #11
   1ea60:	ldr	r0, [r9]
   1ea64:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1ea68:	cmp	r0, #0
   1ea6c:	beq	1bfcc <_start@@Base+0x6a2c>
   1ea70:	ldr	r3, [sp, #92]	; 0x5c
   1ea74:	str	r3, [r0]
   1ea78:	b	1b5e0 <_start@@Base+0x6040>
   1ea7c:	mov	r1, r0
   1ea80:	str	fp, [sp]
   1ea84:	ldr	r3, [pc, #276]	; 1eba0 <_start@@Base+0x9600>
   1ea88:	mov	r2, sl
   1ea8c:	mov	r0, r9
   1ea90:	bl	18918 <_start@@Base+0x3378>
   1ea94:	cmp	sl, r0
   1ea98:	cmpne	r4, r0
   1ea9c:	beq	1f338 <_start@@Base+0x9d98>
   1eaa0:	mov	r4, r0
   1eaa4:	b	1de0c <_start@@Base+0x886c>
   1eaa8:	ldr	r0, [r9]
   1eaac:	bl	295bc <flatcc_builder_end_vector@@Base>
   1eab0:	cmp	r0, #0
   1eab4:	str	r0, [sp, #92]	; 0x5c
   1eab8:	beq	1bfcc <_start@@Base+0x6a2c>
   1eabc:	mov	r1, #5
   1eac0:	ldr	r0, [r9]
   1eac4:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1eac8:	cmp	r0, #0
   1eacc:	beq	1bfcc <_start@@Base+0x6a2c>
   1ead0:	ldr	r3, [sp, #92]	; 0x5c
   1ead4:	str	r3, [r0]
   1ead8:	b	1b5e0 <_start@@Base+0x6040>
   1eadc:	mov	r3, #4
   1eae0:	mov	r2, sl
   1eae4:	mov	r1, r4
   1eae8:	mov	r0, r9
   1eaec:	bl	18840 <_start@@Base+0x32a0>
   1eaf0:	cmp	r4, r0
   1eaf4:	mov	fp, r0
   1eaf8:	beq	1f368 <_start@@Base+0x9dc8>
   1eafc:	cmp	sl, r0
   1eb00:	beq	1eb10 <_start@@Base+0x9570>
   1eb04:	ldrb	r3, [r0]
   1eb08:	cmp	r3, #91	; 0x5b
   1eb0c:	beq	1f078 <_start@@Base+0x9ad8>
   1eb10:	mov	r3, #0
   1eb14:	mov	r2, r3
   1eb18:	mov	r1, r3
   1eb1c:	ldr	r0, [r9]
   1eb20:	bl	26c9c <flatcc_builder_start_buffer@@Base>
   1eb24:	cmp	r0, #0
   1eb28:	bne	1bfcc <_start@@Base+0x6a2c>
   1eb2c:	mov	r1, fp
   1eb30:	add	r3, sp, #92	; 0x5c
   1eb34:	mov	r2, sl
   1eb38:	mov	r0, r9
   1eb3c:	bl	1b478 <_start@@Base+0x5ed8>
   1eb40:	ldr	r1, [sp, #92]	; 0x5c
   1eb44:	cmp	r1, #0
   1eb48:	mov	fp, r0
   1eb4c:	beq	1bfcc <_start@@Base+0x6a2c>
   1eb50:	ldr	r0, [r9]
   1eb54:	bl	26e28 <flatcc_builder_end_buffer@@Base>
   1eb58:	str	r0, [sp, #92]	; 0x5c
   1eb5c:	cmp	r0, #0
   1eb60:	beq	1bfcc <_start@@Base+0x6a2c>
   1eb64:	mov	r1, #13
   1eb68:	ldr	r0, [r9]
   1eb6c:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1eb70:	cmp	r0, #0
   1eb74:	beq	1bfcc <_start@@Base+0x6a2c>
   1eb78:	ldr	r3, [sp, #92]	; 0x5c
   1eb7c:	str	r3, [r0]
   1eb80:	b	1b5e0 <_start@@Base+0x6040>
   1eb84:	nop			; (mov r0, r0)
   1eb88:	cmnvs	lr, r5, ror #6
   1eb8c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1eb90:			; <UNDEFINED> instruction: 0xffff0000
   1eb94:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1eb98:	andeq	r8, r5, r0, lsl #3
   1eb9c:	andeq	r8, r5, r4, ror r1
   1eba0:	andeq	r8, r5, r0, asr #2
   1eba4:	andeq	r8, r5, r4, lsr #3
   1eba8:	strdeq	r8, [r5], -r4
   1ebac:			; <UNDEFINED> instruction: 0x000581bc
   1ebb0:			; <UNDEFINED> instruction: 0x000581b0
   1ebb4:	andeq	r8, r5, r4, lsr r2
   1ebb8:	andeq	r8, r5, ip, lsl #2
   1ebbc:	ldrdeq	r8, [r5], -r4
   1ebc0:	andeq	r8, r5, ip, ror #3
   1ebc4:	andeq	r8, r5, ip, lsl r2
   1ebc8:	andeq	r8, r5, r4, lsl #4
   1ebcc:	andeq	r8, r5, r0, lsl r2
   1ebd0:	strdeq	r8, [r5], -r8	; <UNPREDICTABLE>
   1ebd4:	andeq	r8, r5, r0, ror #3
   1ebd8:	andeq	r8, r5, r8, lsr #4
   1ebdc:	mov	r1, r0
   1ebe0:	mov	r3, #7
   1ebe4:	mov	r2, sl
   1ebe8:	mov	r0, r9
   1ebec:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1ebf0:	mov	fp, r0
   1ebf4:	b	1e6e4 <_start@@Base+0x9144>
   1ebf8:	mov	r3, sl
   1ebfc:	mov	fp, r4
   1ec00:	mov	sl, r9
   1ec04:	mov	r9, r3
   1ec08:	b	1b648 <_start@@Base+0x60a8>
   1ec0c:	mov	r1, fp
   1ec10:	mov	r2, sl
   1ec14:	mov	r0, r9
   1ec18:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1ec1c:	mov	fp, r0
   1ec20:	b	1b5e0 <_start@@Base+0x6040>
   1ec24:	mov	r3, #8
   1ec28:	mov	r2, sl
   1ec2c:	mov	r1, fp
   1ec30:	mov	r0, r9
   1ec34:	bl	18840 <_start@@Base+0x32a0>
   1ec38:	cmp	fp, r0
   1ec3c:	mov	r5, r0
   1ec40:	beq	1c718 <_start@@Base+0x7178>
   1ec44:	mov	r0, #0
   1ec48:	mov	r1, #0
   1ec4c:	add	r4, sp, #120	; 0x78
   1ec50:	mov	r2, sl
   1ec54:	strd	r0, [r4, #-8]!
   1ec58:	mov	r1, r5
   1ec5c:	mov	r3, r4
   1ec60:	mov	r0, r9
   1ec64:	bl	17c6c <_start@@Base+0x26cc>
   1ec68:	cmp	r0, r5
   1ec6c:	mov	fp, r0
   1ec70:	beq	1f264 <_start@@Base+0x9cc4>
   1ec74:	ldrd	r2, [sp, #112]	; 0x70
   1ec78:	orrs	r3, r2, r3
   1ec7c:	bne	1ec8c <_start@@Base+0x96ec>
   1ec80:	ldr	r3, [r9, #8]
   1ec84:	tst	r3, #2
   1ec88:	beq	1b5e0 <_start@@Base+0x6040>
   1ec8c:	mov	r3, #8
   1ec90:	mov	r2, r3
   1ec94:	mov	r1, #18
   1ec98:	ldr	r0, [r9]
   1ec9c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1eca0:	cmp	r0, #0
   1eca4:	beq	1f404 <_start@@Base+0x9e64>
   1eca8:	ldrd	r2, [sp, #112]	; 0x70
   1ecac:	strd	r2, [r0]
   1ecb0:	b	1b5e0 <_start@@Base+0x6040>
   1ecb4:	mov	r1, fp
   1ecb8:	mov	r3, #5
   1ecbc:	mov	r2, sl
   1ecc0:	mov	r0, r9
   1ecc4:	bl	18840 <_start@@Base+0x32a0>
   1ecc8:	cmp	fp, r0
   1eccc:	mov	r1, r0
   1ecd0:	beq	1c8d4 <_start@@Base+0x7334>
   1ecd4:	add	r3, sp, #92	; 0x5c
   1ecd8:	mov	r2, sl
   1ecdc:	mov	r0, r9
   1ece0:	bl	1a978 <_start@@Base+0x53d8>
   1ece4:	ldr	r3, [sp, #92]	; 0x5c
   1ece8:	cmp	r3, #0
   1ecec:	mov	fp, r0
   1ecf0:	beq	1bfcc <_start@@Base+0x6a2c>
   1ecf4:	mov	r1, #34	; 0x22
   1ecf8:	ldr	r0, [r9]
   1ecfc:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1ed00:	cmp	r0, #0
   1ed04:	beq	1bfcc <_start@@Base+0x6a2c>
   1ed08:	ldr	r3, [sp, #92]	; 0x5c
   1ed0c:	str	r3, [r0]
   1ed10:	b	1b5e0 <_start@@Base+0x6040>
   1ed14:	ldr	r0, [r9]
   1ed18:	bl	295bc <flatcc_builder_end_vector@@Base>
   1ed1c:	cmp	r0, #0
   1ed20:	str	r0, [sp, #92]	; 0x5c
   1ed24:	beq	1bfcc <_start@@Base+0x6a2c>
   1ed28:	mov	r1, #33	; 0x21
   1ed2c:	ldr	r0, [r9]
   1ed30:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1ed34:	cmp	r0, #0
   1ed38:	beq	1bfcc <_start@@Base+0x6a2c>
   1ed3c:	ldr	r3, [sp, #92]	; 0x5c
   1ed40:	str	r3, [r0]
   1ed44:	b	1b5e0 <_start@@Base+0x6040>
   1ed48:	mov	r1, r0
   1ed4c:	str	r4, [sp]
   1ed50:	ldr	r3, [pc, #-436]	; 1eba4 <_start@@Base+0x9604>
   1ed54:	mov	r2, sl
   1ed58:	mov	r0, r9
   1ed5c:	bl	19abc <_start@@Base+0x451c>
   1ed60:	cmp	sl, r0
   1ed64:	cmpne	fp, r0
   1ed68:	beq	1d610 <_start@@Base+0x8070>
   1ed6c:	mov	fp, r0
   1ed70:	b	1cd94 <_start@@Base+0x77f4>
   1ed74:	mov	r1, r0
   1ed78:	str	r4, [sp]
   1ed7c:	ldr	r3, [pc, #-476]	; 1eba8 <_start@@Base+0x9608>
   1ed80:	mov	r2, sl
   1ed84:	mov	r0, r9
   1ed88:	bl	18f00 <_start@@Base+0x3960>
   1ed8c:	cmp	sl, r0
   1ed90:	cmpne	fp, r0
   1ed94:	beq	1d548 <_start@@Base+0x7fa8>
   1ed98:	mov	fp, r0
   1ed9c:	b	1ca98 <_start@@Base+0x74f8>
   1eda0:	mov	r4, r0
   1eda4:	mov	r1, r4
   1eda8:	mov	r2, sl
   1edac:	mov	r0, r9
   1edb0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1edb4:	mov	fp, r0
   1edb8:	b	1b5e0 <_start@@Base+0x6040>
   1edbc:	ldr	r0, [r9]
   1edc0:	bl	297dc <flatcc_builder_end_offset_vector@@Base>
   1edc4:	cmp	r0, #0
   1edc8:	str	r0, [sp, #92]	; 0x5c
   1edcc:	beq	1bfcc <_start@@Base+0x6a2c>
   1edd0:	mov	r1, #10
   1edd4:	ldr	r0, [r9]
   1edd8:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1eddc:	cmp	r0, #0
   1ede0:	beq	1bfcc <_start@@Base+0x6a2c>
   1ede4:	ldr	r3, [sp, #92]	; 0x5c
   1ede8:	str	r3, [r0]
   1edec:	b	1b5e0 <_start@@Base+0x6040>
   1edf0:	mov	r1, r0
   1edf4:	str	r4, [sp]
   1edf8:	ldr	r3, [pc, #-596]	; 1ebac <_start@@Base+0x960c>
   1edfc:	mov	r2, sl
   1ee00:	mov	r0, r9
   1ee04:	bl	18918 <_start@@Base+0x3378>
   1ee08:	cmp	sl, r0
   1ee0c:	cmpne	fp, r0
   1ee10:	beq	1e014 <_start@@Base+0x8a74>
   1ee14:	mov	fp, r0
   1ee18:	b	1e10c <_start@@Base+0x8b6c>
   1ee1c:	mov	r3, #8
   1ee20:	mov	r2, sl
   1ee24:	mov	r1, fp
   1ee28:	mov	r0, r9
   1ee2c:	bl	18840 <_start@@Base+0x32a0>
   1ee30:	cmp	fp, r0
   1ee34:	mov	r4, r0
   1ee38:	beq	1f370 <_start@@Base+0x9dd0>
   1ee3c:	mov	r0, #0
   1ee40:	mov	r1, #0
   1ee44:	add	r5, sp, #120	; 0x78
   1ee48:	mov	r2, sl
   1ee4c:	strd	r0, [r5, #-8]!
   1ee50:	mov	r1, r4
   1ee54:	mov	r3, r5
   1ee58:	mov	r0, r9
   1ee5c:	bl	180a0 <_start@@Base+0x2b00>
   1ee60:	cmp	r0, r4
   1ee64:	mov	fp, r0
   1ee68:	beq	1f2a8 <_start@@Base+0x9d08>
   1ee6c:	ldrd	r2, [sp, #112]	; 0x70
   1ee70:	orrs	r3, r2, r3
   1ee74:	bne	1ee84 <_start@@Base+0x98e4>
   1ee78:	ldr	r3, [r9, #8]
   1ee7c:	tst	r3, #2
   1ee80:	beq	1b5e0 <_start@@Base+0x6040>
   1ee84:	mov	r3, #8
   1ee88:	mov	r2, r3
   1ee8c:	mov	r1, #19
   1ee90:	ldr	r0, [r9]
   1ee94:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1ee98:	cmp	r0, #0
   1ee9c:	beq	1bfcc <_start@@Base+0x6a2c>
   1eea0:	ldrd	r2, [sp, #112]	; 0x70
   1eea4:	strd	r2, [r0]
   1eea8:	b	1b5e0 <_start@@Base+0x6040>
   1eeac:	mov	r1, fp
   1eeb0:	mov	r2, sl
   1eeb4:	mov	r0, r9
   1eeb8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1eebc:	mov	fp, r0
   1eec0:	b	1b5e0 <_start@@Base+0x6040>
   1eec4:	mov	r3, #8
   1eec8:	mov	r2, sl
   1eecc:	mov	r1, fp
   1eed0:	mov	r0, r9
   1eed4:	bl	18840 <_start@@Base+0x32a0>
   1eed8:	cmp	fp, r0
   1eedc:	mov	r5, r0
   1eee0:	beq	1e498 <_start@@Base+0x8ef8>
   1eee4:	add	r4, sp, #120	; 0x78
   1eee8:	mov	r3, #0
   1eeec:	str	r3, [r4, #-8]!
   1eef0:	mov	r1, r0
   1eef4:	mov	r2, sl
   1eef8:	mov	r3, r4
   1eefc:	mov	r0, r9
   1ef00:	bl	18128 <_start@@Base+0x2b88>
   1ef04:	cmp	r0, r5
   1ef08:	mov	fp, r0
   1ef0c:	beq	1f30c <_start@@Base+0x9d6c>
   1ef10:	ldr	r3, [sp, #112]	; 0x70
   1ef14:	cmp	r3, #0
   1ef18:	bne	1ef28 <_start@@Base+0x9988>
   1ef1c:	ldr	r3, [r9, #8]
   1ef20:	tst	r3, #2
   1ef24:	beq	1b5e0 <_start@@Base+0x6040>
   1ef28:	mov	r3, #4
   1ef2c:	mov	r2, r3
   1ef30:	mov	r1, #17
   1ef34:	ldr	r0, [r9]
   1ef38:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   1ef3c:	cmp	r0, #0
   1ef40:	beq	1f404 <_start@@Base+0x9e64>
   1ef44:	ldr	r3, [sp, #112]	; 0x70
   1ef48:	str	r3, [r0]
   1ef4c:	b	1b5e0 <_start@@Base+0x6040>
   1ef50:	mov	r3, #2
   1ef54:	mov	r2, sl
   1ef58:	mov	r1, r4
   1ef5c:	mov	r0, r9
   1ef60:	bl	18840 <_start@@Base+0x32a0>
   1ef64:	cmp	r4, r0
   1ef68:	mov	fp, r0
   1ef6c:	beq	1f444 <_start@@Base+0x9ea4>
   1ef70:	ldr	r0, [r9]
   1ef74:	bl	28234 <flatcc_builder_start_offset_vector@@Base>
   1ef78:	cmp	r0, #0
   1ef7c:	bne	1bfcc <_start@@Base+0x6a2c>
   1ef80:	mov	r1, fp
   1ef84:	add	r3, sp, #88	; 0x58
   1ef88:	mov	r2, sl
   1ef8c:	mov	r0, r9
   1ef90:	bl	18ad0 <_start@@Base+0x3530>
   1ef94:	ldr	r3, [sp, #88]	; 0x58
   1ef98:	cmp	r3, #0
   1ef9c:	mov	fp, r0
   1efa0:	beq	1f044 <_start@@Base+0x9aa4>
   1efa4:	add	r4, sp, #92	; 0x5c
   1efa8:	mov	r5, #1
   1efac:	b	1efec <_start@@Base+0x9a4c>
   1efb0:	ldr	r0, [r9]
   1efb4:	bl	27898 <flatcc_builder_extend_offset_vector@@Base>
   1efb8:	add	r3, sp, #88	; 0x58
   1efbc:	mov	r2, sl
   1efc0:	mov	r1, fp
   1efc4:	subs	ip, r0, #0
   1efc8:	mov	r0, r9
   1efcc:	beq	1bfcc <_start@@Base+0x6a2c>
   1efd0:	ldr	lr, [sp, #92]	; 0x5c
   1efd4:	str	lr, [ip]
   1efd8:	bl	1a7f4 <_start@@Base+0x5254>
   1efdc:	ldr	r3, [sp, #88]	; 0x58
   1efe0:	cmp	r3, #0
   1efe4:	mov	fp, r0
   1efe8:	beq	1f044 <_start@@Base+0x9aa4>
   1efec:	mov	r1, fp
   1eff0:	mov	r3, r4
   1eff4:	mov	r2, sl
   1eff8:	mov	r0, r9
   1effc:	bl	3255c <flatcc_json_parser_build_string@@Base>
   1f000:	ldr	r3, [sp, #92]	; 0x5c
   1f004:	mov	r1, r5
   1f008:	cmp	r3, #0
   1f00c:	mov	fp, r0
   1f010:	bne	1efb0 <_start@@Base+0x9a10>
   1f014:	b	1bfcc <_start@@Base+0x6a2c>
   1f018:	mov	r1, r0
   1f01c:	str	r4, [sp]
   1f020:	ldr	r3, [pc, #-1144]	; 1ebb0 <_start@@Base+0x9610>
   1f024:	mov	r2, sl
   1f028:	mov	r0, r9
   1f02c:	bl	18918 <_start@@Base+0x3378>
   1f030:	cmp	sl, r0
   1f034:	cmpne	fp, r0
   1f038:	beq	1e014 <_start@@Base+0x8a74>
   1f03c:	mov	fp, r0
   1f040:	b	1cb24 <_start@@Base+0x7584>
   1f044:	ldr	r0, [r9]
   1f048:	bl	297dc <flatcc_builder_end_offset_vector@@Base>
   1f04c:	cmp	r0, #0
   1f050:	str	r0, [sp, #92]	; 0x5c
   1f054:	beq	1bfcc <_start@@Base+0x6a2c>
   1f058:	mov	r1, #28
   1f05c:	ldr	r0, [r9]
   1f060:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   1f064:	cmp	r0, #0
   1f068:	beq	1bfcc <_start@@Base+0x6a2c>
   1f06c:	ldr	r3, [sp, #92]	; 0x5c
   1f070:	str	r3, [r0]
   1f074:	b	1b5e0 <_start@@Base+0x6040>
   1f078:	mov	r2, #1
   1f07c:	mov	r1, r2
   1f080:	mvn	r3, #0
   1f084:	ldr	r0, [r9]
   1f088:	bl	280dc <flatcc_builder_start_vector@@Base>
   1f08c:	subs	r6, r0, #0
   1f090:	bne	1bfcc <_start@@Base+0x6a2c>
   1f094:	mov	r1, fp
   1f098:	add	r3, sp, #88	; 0x58
   1f09c:	mov	r2, sl
   1f0a0:	mov	r0, r9
   1f0a4:	bl	18ad0 <_start@@Base+0x3530>
   1f0a8:	ldr	r3, [sp, #88]	; 0x58
   1f0ac:	cmp	r3, #0
   1f0b0:	mov	fp, r0
   1f0b4:	beq	1f1cc <_start@@Base+0x9c2c>
   1f0b8:	ldr	r8, [pc, #-1292]	; 1ebb4 <_start@@Base+0x9614>
   1f0bc:	mov	r7, #1
   1f0c0:	add	r5, sp, #112	; 0x70
   1f0c4:	b	1f0f4 <_start@@Base+0x9b54>
   1f0c8:	ldrb	r2, [sp, #112]	; 0x70
   1f0cc:	mov	r1, r0
   1f0d0:	add	r3, sp, #88	; 0x58
   1f0d4:	strb	r2, [r4]
   1f0d8:	mov	r0, r9
   1f0dc:	mov	r2, sl
   1f0e0:	bl	1a7f4 <_start@@Base+0x5254>
   1f0e4:	ldr	r3, [sp, #88]	; 0x58
   1f0e8:	cmp	r3, #0
   1f0ec:	mov	fp, r0
   1f0f0:	beq	1f1cc <_start@@Base+0x9c2c>
   1f0f4:	mov	r1, r7
   1f0f8:	ldr	r0, [r9]
   1f0fc:	strb	r6, [sp, #112]	; 0x70
   1f100:	bl	27570 <flatcc_builder_extend_vector@@Base>
   1f104:	mov	r1, fp
   1f108:	mov	r3, r5
   1f10c:	mov	r2, sl
   1f110:	subs	r4, r0, #0
   1f114:	mov	r0, r9
   1f118:	beq	1bfcc <_start@@Base+0x6a2c>
   1f11c:	bl	181e4 <_start@@Base+0x2c44>
   1f120:	cmp	r0, fp
   1f124:	bne	1f0c8 <_start@@Base+0x9b28>
   1f128:	str	r5, [sp]
   1f12c:	mov	r3, r8
   1f130:	mov	r2, sl
   1f134:	mov	r1, fp
   1f138:	mov	r0, r9
   1f13c:	bl	198d0 <_start@@Base+0x4330>
   1f140:	cmp	sl, r0
   1f144:	cmpne	r0, fp
   1f148:	bne	1f0c8 <_start@@Base+0x9b28>
   1f14c:	b	1e014 <_start@@Base+0x8a74>
   1f150:	mov	r4, r0
   1f154:	mov	r1, r4
   1f158:	mov	r2, sl
   1f15c:	mov	r0, r9
   1f160:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f164:	mov	fp, r0
   1f168:	b	1b5e0 <_start@@Base+0x6040>
   1f16c:	mov	r1, r0
   1f170:	str	r4, [sp]
   1f174:	ldr	r3, [pc, #-1476]	; 1ebb8 <_start@@Base+0x9618>
   1f178:	mov	r2, sl
   1f17c:	mov	r0, r9
   1f180:	bl	18f00 <_start@@Base+0x3960>
   1f184:	cmp	sl, r0
   1f188:	cmpne	fp, r0
   1f18c:	beq	1d548 <_start@@Base+0x7fa8>
   1f190:	mov	fp, r0
   1f194:	b	1e29c <_start@@Base+0x8cfc>
   1f198:	mov	r4, r0
   1f19c:	mov	r1, r4
   1f1a0:	mov	r2, sl
   1f1a4:	mov	r0, r9
   1f1a8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f1ac:	mov	fp, r0
   1f1b0:	b	1b5e0 <_start@@Base+0x6040>
   1f1b4:	mov	r1, fp
   1f1b8:	mov	r2, sl
   1f1bc:	mov	r0, r9
   1f1c0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f1c4:	mov	fp, r0
   1f1c8:	b	1b5e0 <_start@@Base+0x6040>
   1f1cc:	ldr	r0, [r9]
   1f1d0:	bl	295bc <flatcc_builder_end_vector@@Base>
   1f1d4:	str	r0, [sp, #92]	; 0x5c
   1f1d8:	b	1eb5c <_start@@Base+0x95bc>
   1f1dc:	mov	r3, sl
   1f1e0:	mov	fp, r0
   1f1e4:	mov	sl, r9
   1f1e8:	mov	r9, r3
   1f1ec:	b	1b648 <_start@@Base+0x60a8>
   1f1f0:	mov	r1, r0
   1f1f4:	str	r4, [sp]
   1f1f8:	ldr	r3, [pc, #-1604]	; 1ebbc <_start@@Base+0x961c>
   1f1fc:	mov	r2, sl
   1f200:	mov	r0, r9
   1f204:	bl	192f8 <_start@@Base+0x3d58>
   1f208:	cmp	sl, r0
   1f20c:	cmpne	fp, r0
   1f210:	beq	1e014 <_start@@Base+0x8a74>
   1f214:	mov	fp, r0
   1f218:	b	1e44c <_start@@Base+0x8eac>
   1f21c:	mov	r1, fp
   1f220:	mov	r2, sl
   1f224:	mov	r0, r9
   1f228:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f22c:	mov	fp, r0
   1f230:	b	1b5e0 <_start@@Base+0x6040>
   1f234:	mov	r3, sl
   1f238:	mov	fp, r5
   1f23c:	mov	sl, r9
   1f240:	mov	r9, r3
   1f244:	b	1b648 <_start@@Base+0x60a8>
   1f248:	mov	r4, r0
   1f24c:	mov	r1, r4
   1f250:	mov	r2, sl
   1f254:	mov	r0, r9
   1f258:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f25c:	mov	fp, r0
   1f260:	b	1b5e0 <_start@@Base+0x6040>
   1f264:	mov	r1, r0
   1f268:	str	r4, [sp]
   1f26c:	ldr	r3, [pc, #-1716]	; 1ebc0 <_start@@Base+0x9620>
   1f270:	mov	r2, sl
   1f274:	mov	r0, r9
   1f278:	bl	19abc <_start@@Base+0x451c>
   1f27c:	cmp	sl, r0
   1f280:	cmpne	fp, r0
   1f284:	beq	1e014 <_start@@Base+0x8a74>
   1f288:	mov	fp, r0
   1f28c:	b	1ec74 <_start@@Base+0x96d4>
   1f290:	mov	r1, fp
   1f294:	mov	r2, sl
   1f298:	mov	r0, r9
   1f29c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f2a0:	mov	fp, r0
   1f2a4:	b	1b5e0 <_start@@Base+0x6040>
   1f2a8:	str	r5, [sp]
   1f2ac:	ldr	r3, [pc, #-1776]	; 1ebc4 <_start@@Base+0x9624>
   1f2b0:	mov	r2, sl
   1f2b4:	mov	r1, r4
   1f2b8:	mov	r0, r9
   1f2bc:	bl	14628 <__assert_fail@plt+0x10>
   1f2c0:	cmp	sl, r0
   1f2c4:	cmpne	r4, r0
   1f2c8:	mov	fp, r0
   1f2cc:	bne	1ee6c <_start@@Base+0x98cc>
   1f2d0:	b	1bfcc <_start@@Base+0x6a2c>
   1f2d4:	mov	r4, fp
   1f2d8:	mov	r1, r4
   1f2dc:	mov	r2, sl
   1f2e0:	mov	r0, r9
   1f2e4:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f2e8:	mov	fp, r0
   1f2ec:	b	1b5e0 <_start@@Base+0x6040>
   1f2f0:	mov	r4, fp
   1f2f4:	mov	r1, r4
   1f2f8:	mov	r2, sl
   1f2fc:	mov	r0, r9
   1f300:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f304:	mov	fp, r0
   1f308:	b	1b5e0 <_start@@Base+0x6040>
   1f30c:	mov	r1, r0
   1f310:	str	r4, [sp]
   1f314:	ldr	r3, [pc, #-1876]	; 1ebc8 <_start@@Base+0x9628>
   1f318:	mov	r2, sl
   1f31c:	mov	r0, r9
   1f320:	bl	196e8 <_start@@Base+0x4148>
   1f324:	cmp	sl, r0
   1f328:	cmpne	fp, r0
   1f32c:	beq	1e014 <_start@@Base+0x8a74>
   1f330:	mov	fp, r0
   1f334:	b	1ef10 <_start@@Base+0x9970>
   1f338:	strd	r6, [sp, #72]	; 0x48
   1f33c:	mov	r4, r0
   1f340:	b	1de9c <_start@@Base+0x88fc>
   1f344:	mov	r4, fp
   1f348:	mov	r1, r4
   1f34c:	mov	r2, sl
   1f350:	mov	r0, r9
   1f354:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1f358:	mov	fp, r0
   1f35c:	b	1b5e0 <_start@@Base+0x6040>
   1f360:	mov	r4, r0
   1f364:	b	1c150 <_start@@Base+0x6bb0>
   1f368:	mov	r4, r0
   1f36c:	b	1c6e0 <_start@@Base+0x7140>
   1f370:	mov	fp, r0
   1f374:	b	1c230 <_start@@Base+0x6c90>
   1f378:	mov	r1, r0
   1f37c:	str	r5, [sp]
   1f380:	ldr	r3, [pc, #-1980]	; 1ebcc <_start@@Base+0x962c>
   1f384:	mov	r2, sl
   1f388:	mov	r0, r9
   1f38c:	bl	196e8 <_start@@Base+0x4148>
   1f390:	cmp	sl, r0
   1f394:	cmpne	fp, r0
   1f398:	beq	1e014 <_start@@Base+0x8a74>
   1f39c:	mov	fp, r0
   1f3a0:	b	1e514 <_start@@Base+0x8f74>
   1f3a4:	mov	r4, r0
   1f3a8:	b	1c8f8 <_start@@Base+0x7358>
   1f3ac:	mov	r1, r0
   1f3b0:	str	r5, [sp]
   1f3b4:	ldr	r3, [pc, #-2028]	; 1ebd0 <_start@@Base+0x9630>
   1f3b8:	mov	r2, sl
   1f3bc:	mov	r0, r9
   1f3c0:	bl	19abc <_start@@Base+0x451c>
   1f3c4:	cmp	sl, r0
   1f3c8:	cmpne	fp, r0
   1f3cc:	beq	1e014 <_start@@Base+0x8a74>
   1f3d0:	mov	fp, r0
   1f3d4:	b	1c798 <_start@@Base+0x71f8>
   1f3d8:	mov	r1, r0
   1f3dc:	str	r4, [sp]
   1f3e0:	ldr	r3, [pc, #-2068]	; 1ebd4 <_start@@Base+0x9634>
   1f3e4:	mov	r2, sl
   1f3e8:	mov	r0, r9
   1f3ec:	bl	192f8 <_start@@Base+0x3d58>
   1f3f0:	cmp	sl, r0
   1f3f4:	cmpne	fp, r0
   1f3f8:	beq	1e014 <_start@@Base+0x8a74>
   1f3fc:	mov	fp, r0
   1f400:	b	1c860 <_start@@Base+0x72c0>
   1f404:	mov	r3, sl
   1f408:	mov	r0, fp
   1f40c:	mov	sl, r9
   1f410:	mov	r9, r3
   1f414:	b	1b644 <_start@@Base+0x60a4>
   1f418:	mov	r1, r0
   1f41c:	str	r5, [sp]
   1f420:	ldr	r3, [pc, #-2128]	; 1ebd8 <_start@@Base+0x9638>
   1f424:	mov	r2, sl
   1f428:	mov	r0, r9
   1f42c:	bl	14628 <__assert_fail@plt+0x10>
   1f430:	cmp	sl, r0
   1f434:	cmpne	fp, r0
   1f438:	beq	1e014 <_start@@Base+0x8a74>
   1f43c:	mov	fp, r0
   1f440:	b	1c2b0 <_start@@Base+0x6d10>
   1f444:	mov	r4, r0
   1f448:	b	1e3c4 <_start@@Base+0x8e24>
   1f44c:	mov	r4, r0
   1f450:	b	1c934 <_start@@Base+0x7394>
   1f454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f458:	mov	r5, r2
   1f45c:	sub	r2, r2, r1
   1f460:	cmp	r2, #8
   1f464:	sub	sp, sp, #8
   1f468:	mov	r4, r1
   1f46c:	mov	r8, r0
   1f470:	mov	r9, r3
   1f474:	bls	1f540 <_start@@Base+0x9fa0>
   1f478:	ldrb	r6, [r4, #7]
   1f47c:	mov	r7, #0
   1f480:	ldrb	r2, [r4, #6]
   1f484:	lsr	r1, r2, #24
   1f488:	lsl	r0, r2, #8
   1f48c:	orr	r6, r6, r0
   1f490:	orr	r7, r7, r1
   1f494:	ldrb	r2, [r4, #5]
   1f498:	lsr	r1, r2, #16
   1f49c:	lsl	r0, r2, #16
   1f4a0:	orr	r0, r0, r6
   1f4a4:	orr	r1, r1, r7
   1f4a8:	ldrb	r2, [r4, #4]
   1f4ac:	lsr	r7, r2, #8
   1f4b0:	lsl	r6, r2, #24
   1f4b4:	orr	r6, r6, r0
   1f4b8:	orr	r7, r7, r1
   1f4bc:	ldrb	r1, [r4, #3]
   1f4c0:	mov	r0, #0
   1f4c4:	orr	r6, r6, r0
   1f4c8:	orr	r7, r7, r1
   1f4cc:	ldrb	r2, [r4, #2]
   1f4d0:	mov	r0, #0
   1f4d4:	orr	r6, r6, r0
   1f4d8:	lsl	r1, r2, #8
   1f4dc:	orr	r7, r7, r1
   1f4e0:	ldrb	r2, [r4, #1]
   1f4e4:	mov	r0, #0
   1f4e8:	orr	r0, r0, r6
   1f4ec:	lsl	r1, r2, #16
   1f4f0:	orr	r1, r1, r7
   1f4f4:	ldrb	r2, [r4]
   1f4f8:	mov	r6, #0
   1f4fc:	orr	r0, r0, r6
   1f500:	lsl	r7, r2, #24
   1f504:	add	r3, pc, #380	; 0x17c
   1f508:	ldrd	r2, [r3]
   1f50c:	orr	r1, r1, r7
   1f510:	cmp	r1, r3
   1f514:	cmpeq	r0, r2
   1f518:	beq	1f570 <_start@@Base+0x9fd0>
   1f51c:	add	r3, pc, #364	; 0x16c
   1f520:	ldrd	r2, [r3]
   1f524:	mov	r0, #0
   1f528:	cmp	r1, r3
   1f52c:	cmpeq	r0, r2
   1f530:	beq	1f5f0 <_start@@Base+0xa050>
   1f534:	mov	r0, r4
   1f538:	add	sp, sp, #8
   1f53c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f540:	sub	r2, r2, #1
   1f544:	cmp	r2, #7
   1f548:	ldrls	pc, [pc, r2, lsl #2]
   1f54c:	b	1f534 <_start@@Base+0x9f94>
   1f550:	andeq	pc, r1, r0, lsr r6	; <UNPREDICTABLE>
   1f554:	andeq	pc, r1, ip, lsr r6	; <UNPREDICTABLE>
   1f558:	andeq	pc, r1, r8, asr #12
   1f55c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f560:	andeq	pc, r1, r0, ror #12
   1f564:	andeq	pc, r1, ip, ror #12
   1f568:	andeq	pc, r1, r8, ror r6	; <UNPREDICTABLE>
   1f56c:	andeq	pc, r1, r8, ror r4	; <UNPREDICTABLE>
   1f570:	mov	r1, r5
   1f574:	add	r0, r4, #8
   1f578:	bl	156c8 <_start@@Base+0x128>
   1f57c:	add	r3, pc, #276	; 0x114
   1f580:	ldrd	r2, [r3]
   1f584:	cmp	r1, r3
   1f588:	cmpeq	r0, r2
   1f58c:	bne	1f534 <_start@@Base+0x9f94>
   1f590:	add	sl, r4, #16
   1f594:	mov	r0, sl
   1f598:	mov	r1, r5
   1f59c:	bl	156c8 <_start@@Base+0x128>
   1f5a0:	mov	r0, #0
   1f5a4:	and	r1, r1, #-16777216	; 0xff000000
   1f5a8:	cmp	r1, #1694498816	; 0x65000000
   1f5ac:	cmpeq	r0, #0
   1f5b0:	bne	1f534 <_start@@Base+0x9f94>
   1f5b4:	ldr	r3, [sp, #44]	; 0x2c
   1f5b8:	mov	r2, r5
   1f5bc:	str	r3, [sp]
   1f5c0:	mov	r0, r8
   1f5c4:	mov	r3, #1
   1f5c8:	mov	r1, sl
   1f5cc:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   1f5d0:	cmp	sl, r0
   1f5d4:	beq	1f534 <_start@@Base+0x9f94>
   1f5d8:	ldr	r1, [sp, #40]	; 0x28
   1f5dc:	mov	r2, #1
   1f5e0:	mov	r3, #0
   1f5e4:	strd	r2, [r1]
   1f5e8:	str	r6, [r9]
   1f5ec:	b	1f538 <_start@@Base+0x9f98>
   1f5f0:	ldr	r3, [sp, #44]	; 0x2c
   1f5f4:	mov	r2, r5
   1f5f8:	str	r3, [sp]
   1f5fc:	mov	r0, r8
   1f600:	mov	r3, #4
   1f604:	mov	r1, r4
   1f608:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   1f60c:	cmp	r4, r0
   1f610:	beq	1f538 <_start@@Base+0x9f98>
   1f614:	ldr	r1, [sp, #40]	; 0x28
   1f618:	mov	r2, #0
   1f61c:	mov	r3, #0
   1f620:	strd	r2, [r1]
   1f624:	str	r6, [r9]
   1f628:	add	sp, sp, #8
   1f62c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f630:	mov	r0, #0
   1f634:	mov	r1, #0
   1f638:	b	1f4f4 <_start@@Base+0x9f54>
   1f63c:	mov	r6, #0
   1f640:	mov	r7, #0
   1f644:	b	1f4e0 <_start@@Base+0x9f40>
   1f648:	mov	r6, #0
   1f64c:	mov	r7, #0
   1f650:	b	1f4cc <_start@@Base+0x9f2c>
   1f654:	mov	r6, #0
   1f658:	mov	r7, #0
   1f65c:	b	1f4bc <_start@@Base+0x9f1c>
   1f660:	mov	r0, #0
   1f664:	mov	r1, #0
   1f668:	b	1f4a8 <_start@@Base+0x9f08>
   1f66c:	mov	r6, #0
   1f670:	mov	r7, #0
   1f674:	b	1f494 <_start@@Base+0x9ef4>
   1f678:	mov	r6, #0
   1f67c:	mov	r7, #0
   1f680:	b	1f480 <_start@@Base+0x9ee0>
   1f684:	nop			; (mov r0, r0)
   1f688:	rsbvc	r6, r5, #116, 28	; 0x740
   1f68c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   1f690:	andeq	r0, r0, r0
   1f694:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   1f698:	cmnvc	r0, #-1073741800	; 0xc0000018
   1f69c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1f6a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6a4:	mov	r4, r1
   1f6a8:	sub	sp, sp, #12
   1f6ac:	mov	r1, r2
   1f6b0:	mov	r5, r0
   1f6b4:	mov	r0, r4
   1f6b8:	mov	sl, r2
   1f6bc:	mov	fp, r3
   1f6c0:	bl	156c8 <_start@@Base+0x128>
   1f6c4:	add	r3, pc, #780	; 0x30c
   1f6c8:	ldrd	r2, [r3]
   1f6cc:	ldr	r8, [sp, #48]	; 0x30
   1f6d0:	ldr	r9, [sp, #52]	; 0x34
   1f6d4:	cmp	r1, r3
   1f6d8:	cmpeq	r0, r2
   1f6dc:	bhi	1f71c <_start@@Base+0xa17c>
   1f6e0:	add	r3, pc, #760	; 0x2f8
   1f6e4:	ldrd	r2, [r3]
   1f6e8:	cmp	r1, r3
   1f6ec:	cmpeq	r0, r2
   1f6f0:	bhi	1f868 <_start@@Base+0xa2c8>
   1f6f4:	add	r3, pc, #748	; 0x2ec
   1f6f8:	ldrd	r2, [r3]
   1f6fc:	bic	r1, r1, #255	; 0xff
   1f700:	mov	r0, #0
   1f704:	cmp	r1, r3
   1f708:	cmpeq	r0, r2
   1f70c:	beq	1f928 <_start@@Base+0xa388>
   1f710:	mov	r0, r4
   1f714:	add	sp, sp, #12
   1f718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f71c:	add	r3, pc, #716	; 0x2cc
   1f720:	ldrd	r2, [r3]
   1f724:	cmp	r1, r3
   1f728:	cmpeq	r0, r2
   1f72c:	bhi	1f780 <_start@@Base+0xa1e0>
   1f730:	add	r3, pc, #704	; 0x2c0
   1f734:	ldrd	r2, [r3]
   1f738:	cmp	r1, r3
   1f73c:	cmpeq	r0, r2
   1f740:	bne	1f710 <_start@@Base+0xa170>
   1f744:	sub	r3, sl, r4
   1f748:	cmp	r3, #8
   1f74c:	ble	1f710 <_start@@Base+0xa170>
   1f750:	ldrb	r3, [r4, #8]
   1f754:	cmp	r3, #46	; 0x2e
   1f758:	bne	1f710 <_start@@Base+0xa170>
   1f75c:	str	r9, [sp, #52]	; 0x34
   1f760:	str	r8, [sp, #48]	; 0x30
   1f764:	mov	r3, fp
   1f768:	mov	r2, sl
   1f76c:	add	r1, r4, #9
   1f770:	mov	r0, r5
   1f774:	add	sp, sp, #12
   1f778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f77c:	b	16cb8 <_start@@Base+0x1718>
   1f780:	add	r3, pc, #632	; 0x278
   1f784:	ldrd	r2, [r3]
   1f788:	cmp	r1, r3
   1f78c:	cmpeq	r0, r2
   1f790:	bls	1f8d8 <_start@@Base+0xa338>
   1f794:	add	r3, pc, #620	; 0x26c
   1f798:	ldrd	r2, [r3]
   1f79c:	cmp	r1, r3
   1f7a0:	cmpeq	r0, r2
   1f7a4:	beq	1f998 <_start@@Base+0xa3f8>
   1f7a8:	add	r3, pc, #608	; 0x260
   1f7ac:	ldrd	r2, [r3]
   1f7b0:	cmp	r1, r3
   1f7b4:	cmpeq	r0, r2
   1f7b8:	bne	1f710 <_start@@Base+0xa170>
   1f7bc:	add	r6, r4, #8
   1f7c0:	mov	r0, r6
   1f7c4:	mov	r1, sl
   1f7c8:	bl	156c8 <_start@@Base+0x128>
   1f7cc:	add	r3, pc, #580	; 0x244
   1f7d0:	ldrd	r2, [r3]
   1f7d4:	mov	r0, #0
   1f7d8:	cmp	r1, r3
   1f7dc:	cmpeq	r0, r2
   1f7e0:	bne	1f710 <_start@@Base+0xa170>
   1f7e4:	sub	r3, sl, r6
   1f7e8:	cmp	r3, #4
   1f7ec:	ble	1f710 <_start@@Base+0xa170>
   1f7f0:	ldrb	r3, [r4, #12]
   1f7f4:	cmp	r3, #46	; 0x2e
   1f7f8:	bne	1f710 <_start@@Base+0xa170>
   1f7fc:	add	r7, r4, #13
   1f800:	cmp	r6, r7
   1f804:	beq	1f710 <_start@@Base+0xa170>
   1f808:	mov	r1, sl
   1f80c:	mov	r0, r7
   1f810:	bl	156c8 <_start@@Base+0x128>
   1f814:	mov	r0, #0
   1f818:	and	r1, r1, #-16777216	; 0xff000000
   1f81c:	cmp	r1, #2013265920	; 0x78000000
   1f820:	cmpeq	r0, #0
   1f824:	movne	r4, r7
   1f828:	bne	1f710 <_start@@Base+0xa170>
   1f82c:	str	r9, [sp]
   1f830:	mov	r2, sl
   1f834:	mov	r0, r5
   1f838:	mov	r3, #1
   1f83c:	mov	r1, r7
   1f840:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   1f844:	cmp	r7, r0
   1f848:	mov	r4, r0
   1f84c:	beq	1f710 <_start@@Base+0xa170>
   1f850:	mov	r0, #0
   1f854:	mov	r1, #0
   1f858:	mov	r3, #0
   1f85c:	strd	r0, [r8]
   1f860:	str	r3, [fp]
   1f864:	b	1f710 <_start@@Base+0xa170>
   1f868:	add	r7, pc, #432	; 0x1b0
   1f86c:	ldrd	r6, [r7]
   1f870:	bic	r3, r1, #255	; 0xff
   1f874:	mov	r2, #0
   1f878:	cmp	r3, r7
   1f87c:	cmpeq	r2, r6
   1f880:	beq	1f95c <_start@@Base+0xa3bc>
   1f884:	add	r3, pc, #412	; 0x19c
   1f888:	ldrd	r2, [r3]
   1f88c:	and	r0, r0, #-16777216	; 0xff000000
   1f890:	cmp	r1, r3
   1f894:	cmpeq	r0, r2
   1f898:	bne	1f710 <_start@@Base+0xa170>
   1f89c:	sub	r3, sl, r4
   1f8a0:	cmp	r3, #5
   1f8a4:	ble	1f710 <_start@@Base+0xa170>
   1f8a8:	ldrb	r3, [r4, #5]
   1f8ac:	cmp	r3, #46	; 0x2e
   1f8b0:	bne	1f710 <_start@@Base+0xa170>
   1f8b4:	str	r9, [sp, #52]	; 0x34
   1f8b8:	str	r8, [sp, #48]	; 0x30
   1f8bc:	mov	r3, fp
   1f8c0:	mov	r2, sl
   1f8c4:	add	r1, r4, #6
   1f8c8:	mov	r0, r5
   1f8cc:	add	sp, sp, #12
   1f8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8d4:	b	171a8 <_start@@Base+0x1c08>
   1f8d8:	add	r3, pc, #336	; 0x150
   1f8dc:	ldrd	r2, [r3]
   1f8e0:	cmp	r1, r3
   1f8e4:	cmpeq	r0, r2
   1f8e8:	bne	1f710 <_start@@Base+0xa170>
   1f8ec:	sub	r3, sl, r4
   1f8f0:	cmp	r3, #8
   1f8f4:	ble	1f710 <_start@@Base+0xa170>
   1f8f8:	ldrb	r3, [r4, #8]
   1f8fc:	cmp	r3, #46	; 0x2e
   1f900:	bne	1f710 <_start@@Base+0xa170>
   1f904:	str	r9, [sp, #52]	; 0x34
   1f908:	str	r8, [sp, #48]	; 0x30
   1f90c:	mov	r3, fp
   1f910:	mov	r2, sl
   1f914:	add	r1, r4, #9
   1f918:	mov	r0, r5
   1f91c:	add	sp, sp, #12
   1f920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f924:	b	16e4c <_start@@Base+0x18ac>
   1f928:	sub	r3, sl, r4
   1f92c:	cmp	r3, #3
   1f930:	ble	1f710 <_start@@Base+0xa170>
   1f934:	ldrb	r3, [r4, #3]
   1f938:	cmp	r3, #46	; 0x2e
   1f93c:	bne	1f710 <_start@@Base+0xa170>
   1f940:	mov	r3, fp
   1f944:	mov	r2, sl
   1f948:	add	r1, r4, #4
   1f94c:	mov	r0, r5
   1f950:	add	sp, sp, #12
   1f954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f958:	b	16a7c <_start@@Base+0x14dc>
   1f95c:	sub	r3, sl, r4
   1f960:	cmp	r3, #3
   1f964:	ble	1f710 <_start@@Base+0xa170>
   1f968:	ldrb	r3, [r4, #3]
   1f96c:	cmp	r3, #46	; 0x2e
   1f970:	bne	1f710 <_start@@Base+0xa170>
   1f974:	str	r9, [sp, #52]	; 0x34
   1f978:	str	r8, [sp, #48]	; 0x30
   1f97c:	mov	r3, fp
   1f980:	mov	r2, sl
   1f984:	add	r1, r4, #4
   1f988:	mov	r0, r5
   1f98c:	add	sp, sp, #12
   1f990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f994:	b	1f454 <_start@@Base+0x9eb4>
   1f998:	sub	r3, sl, r4
   1f99c:	cmp	r3, #8
   1f9a0:	ble	1f710 <_start@@Base+0xa170>
   1f9a4:	ldrb	r3, [r4, #8]
   1f9a8:	cmp	r3, #46	; 0x2e
   1f9ac:	bne	1f710 <_start@@Base+0xa170>
   1f9b0:	str	r9, [sp, #52]	; 0x34
   1f9b4:	str	r8, [sp, #48]	; 0x30
   1f9b8:	mov	r3, fp
   1f9bc:	mov	r2, sl
   1f9c0:	add	r1, r4, #9
   1f9c4:	mov	r0, r5
   1f9c8:	add	sp, sp, #12
   1f9cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9d0:	b	17044 <_start@@Base+0x1aa4>
   1f9d4:	nop			; (mov r0, r0)
   1f9d8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f9dc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f9e0:	ldrshvc	pc, [pc, #255]	; 1fae7 <_start@@Base+0xa547>	; <UNPREDICTABLE>
   1f9e4:	cmnmi	pc, #28416	; 0x6f00
   1f9e8:	andeq	r0, r0, r0
   1f9ec:	cmnmi	lr, r0, lsl #18
   1f9f0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f9f4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f9f8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f9fc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1fa00:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1fa04:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1fa08:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1fa0c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1fa10:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1fa14:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1fa18:	andeq	r0, r0, r0
   1fa1c:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1fa20:	andeq	r0, r0, r0
   1fa24:	strbtmi	r6, [pc], -r0, lsl #30
   1fa28:	andvc	r0, r0, #0
   1fa2c:	cmnmi	pc, #28416	; 0x6f00
   1fa30:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1fa34:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1fa38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa3c:	sub	sp, sp, #148	; 0x94
   1fa40:	mov	r8, r0
   1fa44:	mov	r0, r3
   1fa48:	str	r3, [sp, #124]	; 0x7c
   1fa4c:	mov	r4, r2
   1fa50:	mov	r3, #0
   1fa54:	mov	r2, #4
   1fa58:	str	r3, [r0]
   1fa5c:	mov	r5, r1
   1fa60:	ldr	r0, [r8]
   1fa64:	mov	r1, r2
   1fa68:	bl	271d8 <flatcc_builder_start_struct@@Base>
   1fa6c:	subs	r3, r0, #0
   1fa70:	str	r3, [sp, #116]	; 0x74
   1fa74:	beq	20238 <_start@@Base+0xac98>
   1fa78:	cmp	r5, r4
   1fa7c:	beq	1fa8c <_start@@Base+0xa4ec>
   1fa80:	ldrb	r3, [r5]
   1fa84:	cmp	r3, #123	; 0x7b
   1fa88:	beq	1faec <_start@@Base+0xa54c>
   1fa8c:	mov	r1, r5
   1fa90:	mov	r3, #21
   1fa94:	mov	r2, r4
   1fa98:	mov	r0, r8
   1fa9c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1faa0:	mov	r1, r0
   1faa4:	cmp	r4, r1
   1faa8:	beq	1facc <_start@@Base+0xa52c>
   1faac:	ldr	r0, [r8]
   1fab0:	str	r1, [sp, #8]
   1fab4:	bl	27394 <flatcc_builder_end_struct@@Base>
   1fab8:	ldr	r3, [sp, #124]	; 0x7c
   1fabc:	ldr	r1, [sp, #8]
   1fac0:	cmp	r0, #0
   1fac4:	str	r0, [r3]
   1fac8:	bne	1fae0 <_start@@Base+0xa540>
   1facc:	mov	r2, r4
   1fad0:	mov	r0, r8
   1fad4:	mov	r3, #33	; 0x21
   1fad8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1fadc:	mov	r1, r0
   1fae0:	mov	r0, r1
   1fae4:	add	sp, sp, #148	; 0x94
   1fae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faec:	add	r3, r5, #1
   1faf0:	sub	r2, r4, r3
   1faf4:	cmp	r2, #1
   1faf8:	ble	1fb0c <_start@@Base+0xa56c>
   1fafc:	ldrb	r2, [r5, #1]
   1fb00:	cmp	r2, #32
   1fb04:	bhi	1fb20 <_start@@Base+0xa580>
   1fb08:	beq	2028c <_start@@Base+0xacec>
   1fb0c:	mov	r1, r3
   1fb10:	mov	r2, r4
   1fb14:	mov	r0, r8
   1fb18:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1fb1c:	mov	r3, r0
   1fb20:	cmp	r4, r3
   1fb24:	beq	1fb34 <_start@@Base+0xa594>
   1fb28:	ldrb	r2, [r3]
   1fb2c:	cmp	r2, #125	; 0x7d
   1fb30:	beq	202a0 <_start@@Base+0xad00>
   1fb34:	mov	r9, #0
   1fb38:	mov	r1, r3
   1fb3c:	cmp	r4, r1
   1fb40:	beq	1fe50 <_start@@Base+0xa8b0>
   1fb44:	ldrb	r3, [r1]
   1fb48:	cmp	r3, #34	; 0x22
   1fb4c:	moveq	r3, #0
   1fb50:	addeq	r1, r1, #1
   1fb54:	streq	r3, [r8, #12]
   1fb58:	beq	1fb6c <_start@@Base+0xa5cc>
   1fb5c:	cmp	r3, #46	; 0x2e
   1fb60:	movne	r3, #1
   1fb64:	strne	r3, [r8, #12]
   1fb68:	beq	20148 <_start@@Base+0xaba8>
   1fb6c:	sub	r3, r4, r1
   1fb70:	cmp	r3, #8
   1fb74:	bls	1fe60 <_start@@Base+0xa8c0>
   1fb78:	ldrb	r6, [r1, #7]
   1fb7c:	mov	r7, #0
   1fb80:	ldrb	r2, [r1, #6]
   1fb84:	lsr	r0, r2, #24
   1fb88:	lsl	r3, r2, #8
   1fb8c:	str	r0, [sp, #76]	; 0x4c
   1fb90:	str	r3, [sp, #72]	; 0x48
   1fb94:	ldrd	r2, [sp, #72]	; 0x48
   1fb98:	orr	r2, r2, r6
   1fb9c:	orr	r3, r3, r7
   1fba0:	ldrb	r6, [r1, #5]
   1fba4:	lsr	r0, r6, #16
   1fba8:	str	r0, [sp, #52]	; 0x34
   1fbac:	lsl	r0, r6, #16
   1fbb0:	str	r0, [sp, #48]	; 0x30
   1fbb4:	ldrd	r6, [sp, #48]	; 0x30
   1fbb8:	orr	r6, r6, r2
   1fbbc:	orr	r7, r7, r3
   1fbc0:	mov	r2, r6
   1fbc4:	mov	r3, r7
   1fbc8:	ldrb	r6, [r1, #4]
   1fbcc:	lsr	r0, r6, #8
   1fbd0:	str	r0, [sp, #28]
   1fbd4:	lsl	r0, r6, #24
   1fbd8:	str	r0, [sp, #24]
   1fbdc:	ldrd	r6, [sp, #24]
   1fbe0:	orr	r6, r6, r2
   1fbe4:	orr	r7, r7, r3
   1fbe8:	mov	r2, r6
   1fbec:	mov	r3, r7
   1fbf0:	ldrb	r0, [r1, #3]
   1fbf4:	str	r0, [sp, #36]	; 0x24
   1fbf8:	mov	r0, #0
   1fbfc:	str	r0, [sp, #32]
   1fc00:	ldrd	r6, [sp, #32]
   1fc04:	orr	r6, r6, r2
   1fc08:	orr	r7, r7, r3
   1fc0c:	mov	r2, r6
   1fc10:	mov	r3, r7
   1fc14:	ldrb	r6, [r1, #2]
   1fc18:	lsl	r0, r6, #8
   1fc1c:	str	r0, [sp, #20]
   1fc20:	mov	r0, #0
   1fc24:	str	r0, [sp, #16]
   1fc28:	ldrd	r6, [sp, #16]
   1fc2c:	orr	r6, r6, r2
   1fc30:	orr	r7, r7, r3
   1fc34:	mov	r2, r6
   1fc38:	mov	r3, r7
   1fc3c:	ldrb	r6, [r1, #1]
   1fc40:	lsl	r0, r6, #16
   1fc44:	str	r0, [sp, #12]
   1fc48:	mov	r0, #0
   1fc4c:	str	r0, [sp, #8]
   1fc50:	ldrd	r6, [sp, #8]
   1fc54:	orr	r6, r6, r2
   1fc58:	orr	r7, r7, r3
   1fc5c:	mov	r2, r6
   1fc60:	mov	r3, r7
   1fc64:	ldrb	r6, [r1]
   1fc68:	mov	sl, #0
   1fc6c:	orr	r2, r2, sl
   1fc70:	lsl	fp, r6, #24
   1fc74:	add	r7, pc, #956	; 0x3bc
   1fc78:	ldrd	r6, [r7]
   1fc7c:	orr	r3, r3, fp
   1fc80:	cmp	r3, r7
   1fc84:	cmpeq	r2, r6
   1fc88:	bne	1fe50 <_start@@Base+0xa8b0>
   1fc8c:	add	r5, r1, #8
   1fc90:	sub	r0, r4, r5
   1fc94:	cmp	r0, #8
   1fc98:	bls	1fee4 <_start@@Base+0xa944>
   1fc9c:	ldrb	r6, [r1, #15]
   1fca0:	mov	r7, #0
   1fca4:	ldrb	r2, [r1, #14]
   1fca8:	lsr	ip, r2, #24
   1fcac:	lsl	r3, r2, #8
   1fcb0:	str	ip, [sp, #108]	; 0x6c
   1fcb4:	str	r3, [sp, #104]	; 0x68
   1fcb8:	ldrd	r2, [sp, #104]	; 0x68
   1fcbc:	orr	r2, r2, r6
   1fcc0:	orr	r3, r3, r7
   1fcc4:	mov	r6, r2
   1fcc8:	mov	r7, r3
   1fccc:	ldrb	r2, [r1, #13]
   1fcd0:	lsr	ip, r2, #16
   1fcd4:	lsl	r3, r2, #16
   1fcd8:	str	ip, [sp, #100]	; 0x64
   1fcdc:	str	r3, [sp, #96]	; 0x60
   1fce0:	ldrd	r2, [sp, #96]	; 0x60
   1fce4:	orr	r2, r2, r6
   1fce8:	orr	r3, r3, r7
   1fcec:	mov	r6, r2
   1fcf0:	mov	r7, r3
   1fcf4:	ldrb	r2, [r1, #12]
   1fcf8:	lsr	ip, r2, #8
   1fcfc:	lsl	r3, r2, #24
   1fd00:	str	ip, [sp, #84]	; 0x54
   1fd04:	str	r3, [sp, #80]	; 0x50
   1fd08:	ldrd	r2, [sp, #80]	; 0x50
   1fd0c:	orr	r2, r2, r6
   1fd10:	orr	r3, r3, r7
   1fd14:	mov	r6, r2
   1fd18:	mov	r7, r3
   1fd1c:	ldrb	r3, [r1, #11]
   1fd20:	str	r3, [sp, #92]	; 0x5c
   1fd24:	mov	r3, #0
   1fd28:	str	r3, [sp, #88]	; 0x58
   1fd2c:	ldrd	r2, [sp, #88]	; 0x58
   1fd30:	orr	r2, r2, r6
   1fd34:	orr	r3, r3, r7
   1fd38:	mov	r6, r2
   1fd3c:	mov	r7, r3
   1fd40:	ldrb	r2, [r1, #10]
   1fd44:	lsl	r3, r2, #8
   1fd48:	str	r3, [sp, #68]	; 0x44
   1fd4c:	mov	r3, #0
   1fd50:	str	r3, [sp, #64]	; 0x40
   1fd54:	ldrd	r2, [sp, #64]	; 0x40
   1fd58:	orr	r2, r2, r6
   1fd5c:	orr	r3, r3, r7
   1fd60:	ldrb	r6, [r1, #9]
   1fd64:	lsl	ip, r6, #16
   1fd68:	str	ip, [sp, #60]	; 0x3c
   1fd6c:	mov	ip, #0
   1fd70:	str	ip, [sp, #56]	; 0x38
   1fd74:	ldrd	r6, [sp, #56]	; 0x38
   1fd78:	orr	r6, r6, r2
   1fd7c:	orr	r7, r7, r3
   1fd80:	mov	r2, r6
   1fd84:	mov	r3, r7
   1fd88:	ldrb	r6, [r1, #8]
   1fd8c:	lsl	ip, r6, #24
   1fd90:	str	ip, [sp, #44]	; 0x2c
   1fd94:	mov	ip, #0
   1fd98:	str	ip, [sp, #40]	; 0x28
   1fd9c:	ldrd	r6, [sp, #40]	; 0x28
   1fda0:	orr	r7, r7, r3
   1fda4:	mov	r3, r7
   1fda8:	ldr	r7, [pc, #656]	; 20040 <_start@@Base+0xaaa0>
   1fdac:	orr	r6, r6, r2
   1fdb0:	and	r3, r3, r7
   1fdb4:	ldr	r7, [pc, #648]	; 20044 <_start@@Base+0xaaa4>
   1fdb8:	mov	r2, r6
   1fdbc:	mov	r6, #0
   1fdc0:	and	r2, r2, r6
   1fdc4:	cmp	r3, r7
   1fdc8:	mov	r6, #0
   1fdcc:	cmpeq	r2, r6
   1fdd0:	bne	1fddc <_start@@Base+0xa83c>
   1fdd4:	cmp	r0, #2
   1fdd8:	bgt	2004c <_start@@Base+0xaaac>
   1fddc:	mov	r1, r5
   1fde0:	mov	r2, r4
   1fde4:	mov	r0, r8
   1fde8:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1fdec:	sub	r3, r4, r0
   1fdf0:	cmp	r3, #1
   1fdf4:	ble	1fe08 <_start@@Base+0xa868>
   1fdf8:	ldrb	r3, [r0]
   1fdfc:	cmp	r3, #32
   1fe00:	bhi	1fe18 <_start@@Base+0xa878>
   1fe04:	beq	1ff9c <_start@@Base+0xa9fc>
   1fe08:	mov	r1, r0
   1fe0c:	mov	r2, r4
   1fe10:	mov	r0, r8
   1fe14:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1fe18:	cmp	r4, r0
   1fe1c:	beq	1ffb4 <_start@@Base+0xaa14>
   1fe20:	ldrb	r3, [r0]
   1fe24:	cmp	r3, #44	; 0x2c
   1fe28:	beq	1ffbc <_start@@Base+0xaa1c>
   1fe2c:	cmp	r3, #125	; 0x7d
   1fe30:	beq	1ff68 <_start@@Base+0xa9c8>
   1fe34:	mov	r1, r0
   1fe38:	mov	r3, #10
   1fe3c:	mov	r2, r4
   1fe40:	mov	r0, r8
   1fe44:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   1fe48:	mov	r1, r0
   1fe4c:	b	1faa4 <_start@@Base+0xa504>
   1fe50:	mov	r2, r4
   1fe54:	mov	r0, r8
   1fe58:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   1fe5c:	b	1fdec <_start@@Base+0xa84c>
   1fe60:	sub	r3, r3, #1
   1fe64:	cmp	r3, #7
   1fe68:	ldrls	pc, [pc, r3, lsl #2]
   1fe6c:	b	1fe50 <_start@@Base+0xa8b0>
   1fe70:	ldrdeq	pc, [r1], -r8
   1fe74:	andeq	pc, r1, ip, asr #29
   1fe78:	andeq	pc, r1, r0, asr #29
   1fe7c:			; <UNDEFINED> instruction: 0x0001feb4
   1fe80:	andeq	pc, r1, r8, lsr #29
   1fe84:	muleq	r1, ip, lr
   1fe88:	muleq	r1, r0, lr
   1fe8c:	andeq	pc, r1, r8, ror fp	; <UNPREDICTABLE>
   1fe90:	mov	r6, r9
   1fe94:	mov	r7, #0
   1fe98:	b	1fb80 <_start@@Base+0xa5e0>
   1fe9c:	mov	r2, r9
   1fea0:	mov	r3, #0
   1fea4:	b	1fba0 <_start@@Base+0xa600>
   1fea8:	mov	r2, r9
   1feac:	mov	r3, #0
   1feb0:	b	1fbc8 <_start@@Base+0xa628>
   1feb4:	mov	r2, r9
   1feb8:	mov	r3, #0
   1febc:	b	1fbf0 <_start@@Base+0xa650>
   1fec0:	mov	r2, r9
   1fec4:	mov	r3, #0
   1fec8:	b	1fc14 <_start@@Base+0xa674>
   1fecc:	mov	r2, r9
   1fed0:	mov	r3, #0
   1fed4:	b	1fc3c <_start@@Base+0xa69c>
   1fed8:	mov	r2, r9
   1fedc:	mov	r3, #0
   1fee0:	b	1fc64 <_start@@Base+0xa6c4>
   1fee4:	sub	r3, r0, #1
   1fee8:	cmp	r3, #7
   1feec:	ldrls	pc, [pc, r3, lsl #2]
   1fef0:	b	1fddc <_start@@Base+0xa83c>
   1fef4:	andeq	pc, r1, ip, asr pc	; <UNPREDICTABLE>
   1fef8:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fefc:	andeq	pc, r1, r4, asr #30
   1ff00:	andeq	pc, r1, r8, lsr pc	; <UNPREDICTABLE>
   1ff04:	andeq	pc, r1, ip, lsr #30
   1ff08:	andeq	pc, r1, r0, lsr #30
   1ff0c:	andeq	pc, r1, r4, lsl pc	; <UNPREDICTABLE>
   1ff10:	muleq	r1, ip, ip
   1ff14:	mov	r6, r9
   1ff18:	mov	r7, #0
   1ff1c:	b	1fca4 <_start@@Base+0xa704>
   1ff20:	mov	r6, r9
   1ff24:	mov	r7, #0
   1ff28:	b	1fccc <_start@@Base+0xa72c>
   1ff2c:	mov	r6, r9
   1ff30:	mov	r7, #0
   1ff34:	b	1fcf4 <_start@@Base+0xa754>
   1ff38:	mov	r6, r9
   1ff3c:	mov	r7, #0
   1ff40:	b	1fd1c <_start@@Base+0xa77c>
   1ff44:	mov	r6, r9
   1ff48:	mov	r7, #0
   1ff4c:	b	1fd40 <_start@@Base+0xa7a0>
   1ff50:	mov	r2, r9
   1ff54:	mov	r3, #0
   1ff58:	b	1fd60 <_start@@Base+0xa7c0>
   1ff5c:	mov	r2, r9
   1ff60:	mov	r3, #0
   1ff64:	b	1fd88 <_start@@Base+0xa7e8>
   1ff68:	add	r1, r0, #1
   1ff6c:	sub	r3, r4, r1
   1ff70:	cmp	r3, #1
   1ff74:	ble	1ff88 <_start@@Base+0xa9e8>
   1ff78:	ldrb	r3, [r0, #1]
   1ff7c:	cmp	r3, #32
   1ff80:	bhi	1faa4 <_start@@Base+0xa504>
   1ff84:	beq	201b0 <_start@@Base+0xac10>
   1ff88:	mov	r2, r4
   1ff8c:	mov	r0, r8
   1ff90:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1ff94:	mov	r1, r0
   1ff98:	b	1faa4 <_start@@Base+0xa504>
   1ff9c:	ldrb	r3, [r0, #1]
   1ffa0:	cmp	r3, #32
   1ffa4:	addhi	r0, r0, #1
   1ffa8:	bls	1fe08 <_start@@Base+0xa868>
   1ffac:	cmp	r4, r0
   1ffb0:	bne	1fe20 <_start@@Base+0xa880>
   1ffb4:	mov	r1, r4
   1ffb8:	b	1facc <_start@@Base+0xa52c>
   1ffbc:	add	r1, r0, #1
   1ffc0:	sub	r3, r4, r1
   1ffc4:	cmp	r3, #1
   1ffc8:	ble	1ffdc <_start@@Base+0xaa3c>
   1ffcc:	ldrb	r3, [r0, #1]
   1ffd0:	cmp	r3, #32
   1ffd4:	bhi	1ffec <_start@@Base+0xaa4c>
   1ffd8:	beq	201c4 <_start@@Base+0xac24>
   1ffdc:	mov	r2, r4
   1ffe0:	mov	r0, r8
   1ffe4:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   1ffe8:	mov	r1, r0
   1ffec:	cmp	r4, r1
   1fff0:	beq	20240 <_start@@Base+0xaca0>
   1fff4:	ldrb	r3, [r1]
   1fff8:	cmp	r3, #125	; 0x7d
   1fffc:	bne	1fb3c <_start@@Base+0xa59c>
   20000:	mov	r3, r1
   20004:	add	r1, r1, #1
   20008:	sub	r2, r4, r1
   2000c:	cmp	r2, #1
   20010:	ble	1ff88 <_start@@Base+0xa9e8>
   20014:	ldrb	r2, [r3, #1]
   20018:	cmp	r2, #32
   2001c:	bhi	1faa4 <_start@@Base+0xa504>
   20020:	bne	1ff88 <_start@@Base+0xa9e8>
   20024:	ldrb	r2, [r3, #2]
   20028:	cmp	r2, #32
   2002c:	addhi	r1, r3, #2
   20030:	bls	1ff88 <_start@@Base+0xa9e8>
   20034:	b	1faa4 <_start@@Base+0xa504>
   20038:	cmpvc	pc, #1342177286	; 0x50000006
   2003c:	rsbvs	r6, pc, #428	; 0x1ac
   20040:			; <UNDEFINED> instruction: 0xffff0000
   20044:	cmnvs	r4, r0
   20048:	andeq	r8, r5, r8, asr r2
   2004c:	ldr	r3, [r8, #12]
   20050:	cmp	r3, ip
   20054:	ldrb	r3, [r1, #10]
   20058:	beq	201a0 <_start@@Base+0xac00>
   2005c:	cmp	r3, #58	; 0x3a
   20060:	cmpne	r3, #32
   20064:	movls	r3, #0
   20068:	movhi	r3, #1
   2006c:	addls	r1, r1, #10
   20070:	strls	r3, [r8, #12]
   20074:	bhi	1fddc <_start@@Base+0xa83c>
   20078:	sub	r3, r4, r1
   2007c:	cmp	r3, #1
   20080:	ble	20094 <_start@@Base+0xaaf4>
   20084:	ldrb	r3, [r1]
   20088:	cmp	r3, #32
   2008c:	bhi	200a4 <_start@@Base+0xab04>
   20090:	beq	2025c <_start@@Base+0xacbc>
   20094:	mov	r2, r4
   20098:	mov	r0, r8
   2009c:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   200a0:	mov	r1, r0
   200a4:	cmp	r4, r1
   200a8:	beq	200b8 <_start@@Base+0xab18>
   200ac:	ldrb	r3, [r1]
   200b0:	cmp	r3, #58	; 0x3a
   200b4:	beq	20270 <_start@@Base+0xacd0>
   200b8:	mov	r3, #4
   200bc:	mov	r2, r4
   200c0:	mov	r0, r8
   200c4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   200c8:	mov	r3, r0
   200cc:	str	r0, [sp, #120]	; 0x78
   200d0:	cmp	r5, r3
   200d4:	beq	1fddc <_start@@Base+0xa83c>
   200d8:	mov	r5, r3
   200dc:	cmp	r4, r3
   200e0:	mov	r3, #0
   200e4:	str	r3, [sp, #128]	; 0x80
   200e8:	str	r9, [sp, #136]	; 0x88
   200ec:	str	r3, [sp, #140]	; 0x8c
   200f0:	str	r3, [sp, #132]	; 0x84
   200f4:	beq	201f0 <_start@@Base+0xac50>
   200f8:	add	r3, sp, #136	; 0x88
   200fc:	str	r3, [sp]
   20100:	mov	r2, r4
   20104:	add	r3, sp, #132	; 0x84
   20108:	mov	r1, r5
   2010c:	mov	r0, r8
   20110:	bl	31f80 <flatcc_json_parser_integer@@Base>
   20114:	cmp	r5, r0
   20118:	beq	201f0 <_start@@Base+0xac50>
   2011c:	ldr	r1, [sp, #132]	; 0x84
   20120:	ldrd	r2, [sp, #136]	; 0x88
   20124:	cmp	r1, #0
   20128:	beq	20160 <_start@@Base+0xabc0>
   2012c:	cmp	r3, #0
   20130:	cmpeq	r2, #-2147483648	; 0x80000000
   20134:	rsbls	r3, r2, #0
   20138:	bhi	201d8 <_start@@Base+0xac38>
   2013c:	ldr	r2, [sp, #116]	; 0x74
   20140:	str	r3, [r2]
   20144:	b	1fdec <_start@@Base+0xa84c>
   20148:	mov	r3, #5
   2014c:	mov	r2, r4
   20150:	mov	r0, r8
   20154:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20158:	mov	r1, r0
   2015c:	b	1fb6c <_start@@Base+0xa5cc>
   20160:	mov	r7, #0
   20164:	cmp	r3, r7
   20168:	mvn	r6, #-2147483648	; 0x80000000
   2016c:	cmpeq	r2, r6
   20170:	movls	r3, r2
   20174:	bls	2013c <_start@@Base+0xab9c>
   20178:	mov	r1, r0
   2017c:	mov	r3, #7
   20180:	mov	r2, r4
   20184:	mov	r0, r8
   20188:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   2018c:	ldr	r3, [sp, #120]	; 0x78
   20190:	cmp	r3, r0
   20194:	beq	201f0 <_start@@Base+0xac50>
   20198:	ldr	r3, [sp, #128]	; 0x80
   2019c:	b	2013c <_start@@Base+0xab9c>
   201a0:	cmp	r3, #34	; 0x22
   201a4:	bne	1fddc <_start@@Base+0xa83c>
   201a8:	add	r1, r1, #11
   201ac:	b	20078 <_start@@Base+0xaad8>
   201b0:	ldrb	r3, [r0, #2]
   201b4:	cmp	r3, #32
   201b8:	addhi	r1, r0, #2
   201bc:	bls	1ff88 <_start@@Base+0xa9e8>
   201c0:	b	1faa4 <_start@@Base+0xa504>
   201c4:	ldrb	r3, [r0, #2]
   201c8:	cmp	r3, #32
   201cc:	addhi	r1, r0, #2
   201d0:	bls	1ffdc <_start@@Base+0xaa3c>
   201d4:	b	1ffec <_start@@Base+0xaa4c>
   201d8:	mov	r1, r0
   201dc:	mov	r3, #8
   201e0:	mov	r2, r4
   201e4:	mov	r0, r8
   201e8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   201ec:	b	2018c <_start@@Base+0xabec>
   201f0:	ldr	r5, [sp, #120]	; 0x78
   201f4:	add	r3, sp, #128	; 0x80
   201f8:	str	r3, [sp]
   201fc:	mov	r2, r4
   20200:	ldr	r3, [pc, #-448]	; 20048 <_start@@Base+0xaaa8>
   20204:	mov	r1, r5
   20208:	mov	r0, r8
   2020c:	bl	192f8 <_start@@Base+0x3d58>
   20210:	cmp	r4, r0
   20214:	cmpne	r0, r5
   20218:	bne	20198 <_start@@Base+0xabf8>
   2021c:	mov	r1, r0
   20220:	mov	r3, #33	; 0x21
   20224:	mov	r2, r4
   20228:	mov	r0, r8
   2022c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20230:	mov	r1, r0
   20234:	b	1faa4 <_start@@Base+0xa504>
   20238:	mov	r1, r5
   2023c:	b	1facc <_start@@Base+0xa52c>
   20240:	mov	r1, r4
   20244:	mov	r3, #10
   20248:	mov	r2, r4
   2024c:	mov	r0, r8
   20250:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20254:	mov	r1, r0
   20258:	b	1faa4 <_start@@Base+0xa504>
   2025c:	ldrb	r3, [r1, #1]
   20260:	cmp	r3, #32
   20264:	addhi	r1, r1, #1
   20268:	bls	20094 <_start@@Base+0xaaf4>
   2026c:	b	200a4 <_start@@Base+0xab04>
   20270:	add	r1, r1, #1
   20274:	mov	r2, r4
   20278:	mov	r0, r8
   2027c:	bl	17318 <_start@@Base+0x1d78>
   20280:	str	r0, [sp, #120]	; 0x78
   20284:	mov	r3, r0
   20288:	b	200d0 <_start@@Base+0xab30>
   2028c:	ldrb	r2, [r5, #2]
   20290:	cmp	r2, #32
   20294:	addhi	r3, r5, #2
   20298:	bls	1fb0c <_start@@Base+0xa56c>
   2029c:	b	1fb20 <_start@@Base+0xa580>
   202a0:	add	r1, r3, #1
   202a4:	mov	r2, r4
   202a8:	mov	r0, r8
   202ac:	bl	17318 <_start@@Base+0x1d78>
   202b0:	mov	r1, r0
   202b4:	b	1faa4 <_start@@Base+0xa504>
   202b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202bc:	sub	sp, sp, #132	; 0x84
   202c0:	mov	ip, #0
   202c4:	ldr	lr, [sp, #168]	; 0xa8
   202c8:	cmp	r3, #9
   202cc:	mov	r5, r0
   202d0:	str	ip, [lr]
   202d4:	mov	r4, r2
   202d8:	beq	20384 <_start@@Base+0xade4>
   202dc:	mov	r6, r1
   202e0:	bls	20328 <_start@@Base+0xad88>
   202e4:	cmp	r3, #11
   202e8:	beq	203cc <_start@@Base+0xae2c>
   202ec:	bcc	20384 <_start@@Base+0xade4>
   202f0:	cmp	r3, #255	; 0xff
   202f4:	beq	203cc <_start@@Base+0xae2c>
   202f8:	ldr	r3, [r5, #8]
   202fc:	mov	r2, r4
   20300:	tst	r3, #1
   20304:	mov	r1, r6
   20308:	mov	r0, r5
   2030c:	bne	20b8c <_start@@Base+0xb5ec>
   20310:	mov	r3, #15
   20314:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20318:	mov	r1, r0
   2031c:	mov	r0, r1
   20320:	add	sp, sp, #132	; 0x84
   20324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20328:	cmp	r3, #2
   2032c:	beq	20754 <_start@@Base+0xb1b4>
   20330:	cmp	r3, #8
   20334:	beq	203dc <_start@@Base+0xae3c>
   20338:	cmp	r3, ip
   2033c:	bne	202f8 <_start@@Base+0xad58>
   20340:	sub	r3, r2, r1
   20344:	cmp	r3, #3
   20348:	ble	20368 <_start@@Base+0xadc8>
   2034c:	ldr	r1, [pc, #1108]	; 207a8 <_start@@Base+0xb208>
   20350:	mov	r2, #4
   20354:	mov	r0, r6
   20358:	bl	14558 <memcmp@plt>
   2035c:	cmp	r0, #0
   20360:	addeq	r1, r6, #4
   20364:	beq	2031c <_start@@Base+0xad7c>
   20368:	mov	r1, r6
   2036c:	mov	r2, r4
   20370:	mov	r0, r5
   20374:	mov	r3, #26
   20378:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   2037c:	mov	r1, r0
   20380:	b	2031c <_start@@Base+0xad7c>
   20384:	mov	r3, lr
   20388:	bl	1fa38 <_start@@Base+0xa498>
   2038c:	mov	r1, r0
   20390:	ldr	r3, [r5, #24]
   20394:	cmp	r3, #0
   20398:	bne	2031c <_start@@Base+0xad7c>
   2039c:	ldr	r3, [sp, #168]	; 0xa8
   203a0:	ldr	r3, [r3]
   203a4:	cmp	r3, #0
   203a8:	bne	2031c <_start@@Base+0xad7c>
   203ac:	mov	r2, r4
   203b0:	mov	r0, r5
   203b4:	mov	r3, #33	; 0x21
   203b8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   203bc:	mov	r1, r0
   203c0:	mov	r0, r1
   203c4:	add	sp, sp, #132	; 0x84
   203c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203cc:	mov	r3, lr
   203d0:	bl	3255c <flatcc_json_parser_build_string@@Base>
   203d4:	mov	r1, r0
   203d8:	b	20390 <_start@@Base+0xadf0>
   203dc:	mov	r2, #2
   203e0:	mov	r1, r2
   203e4:	ldr	r0, [r0]
   203e8:	bl	271d8 <flatcc_builder_start_struct@@Base>
   203ec:	mov	r1, r6
   203f0:	subs	r3, r0, #0
   203f4:	str	r3, [sp, #24]
   203f8:	beq	2068c <_start@@Base+0xb0ec>
   203fc:	add	r3, sp, #112	; 0x70
   20400:	mov	r2, r4
   20404:	mov	r0, r5
   20408:	bl	1878c <_start@@Base+0x31ec>
   2040c:	ldr	r3, [sp, #112]	; 0x70
   20410:	cmp	r3, #0
   20414:	mov	r1, r0
   20418:	beq	20a98 <_start@@Base+0xb4f8>
   2041c:	mov	sl, #0
   20420:	mov	fp, sl
   20424:	b	20490 <_start@@Base+0xaef0>
   20428:	add	r7, r0, #8
   2042c:	mov	r0, r7
   20430:	mov	r1, r4
   20434:	bl	156c8 <_start@@Base+0x128>
   20438:	add	r3, pc, #856	; 0x358
   2043c:	ldrd	r2, [r3]
   20440:	mov	r0, #0
   20444:	bic	r1, r1, #255	; 0xff
   20448:	cmp	r1, r3
   2044c:	cmpeq	r0, r2
   20450:	bne	20460 <_start@@Base+0xaec0>
   20454:	sub	r3, r4, r7
   20458:	cmp	r3, #3
   2045c:	bgt	206a4 <_start@@Base+0xb104>
   20460:	mov	r1, r7
   20464:	mov	r2, r4
   20468:	mov	r0, r5
   2046c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   20470:	mov	r1, r0
   20474:	add	r3, sp, #112	; 0x70
   20478:	mov	r2, r4
   2047c:	mov	r0, r5
   20480:	bl	19ea8 <_start@@Base+0x4908>
   20484:	ldr	r3, [sp, #112]	; 0x70
   20488:	cmp	r3, #0
   2048c:	beq	20ac4 <_start@@Base+0xb524>
   20490:	cmp	r4, r0
   20494:	beq	205e0 <_start@@Base+0xb040>
   20498:	ldrb	r3, [r0]
   2049c:	cmp	r3, #34	; 0x22
   204a0:	moveq	r3, #0
   204a4:	addeq	r0, r0, #1
   204a8:	streq	r3, [r5, #12]
   204ac:	beq	204c0 <_start@@Base+0xaf20>
   204b0:	cmp	r3, #46	; 0x2e
   204b4:	movne	r3, #1
   204b8:	strne	r3, [r5, #12]
   204bc:	beq	2073c <_start@@Base+0xb19c>
   204c0:	sub	r3, r4, r0
   204c4:	cmp	r3, #8
   204c8:	bls	205f8 <_start@@Base+0xb058>
   204cc:	ldrb	r6, [r0, #7]
   204d0:	mov	r7, #0
   204d4:	ldrb	r2, [r0, #6]
   204d8:	lsr	r1, r2, #24
   204dc:	lsl	r3, r2, #8
   204e0:	str	r1, [sp, #92]	; 0x5c
   204e4:	str	r3, [sp, #88]	; 0x58
   204e8:	ldrd	r2, [sp, #88]	; 0x58
   204ec:	orr	r2, r2, r6
   204f0:	orr	r3, r3, r7
   204f4:	mov	r6, r2
   204f8:	mov	r7, r3
   204fc:	ldrb	r2, [r0, #5]
   20500:	lsr	r1, r2, #16
   20504:	lsl	r3, r2, #16
   20508:	str	r1, [sp, #76]	; 0x4c
   2050c:	str	r3, [sp, #72]	; 0x48
   20510:	ldrd	r2, [sp, #72]	; 0x48
   20514:	orr	r2, r2, r6
   20518:	orr	r3, r3, r7
   2051c:	ldrb	r6, [r0, #4]
   20520:	lsr	r1, r6, #8
   20524:	str	r1, [sp, #36]	; 0x24
   20528:	lsl	r1, r6, #24
   2052c:	str	r1, [sp, #32]
   20530:	ldrd	r6, [sp, #32]
   20534:	orr	r6, r6, r2
   20538:	orr	r7, r7, r3
   2053c:	mov	r2, r6
   20540:	mov	r3, r7
   20544:	ldrb	r1, [r0, #3]
   20548:	str	r1, [sp, #52]	; 0x34
   2054c:	mov	r1, #0
   20550:	str	r1, [sp, #48]	; 0x30
   20554:	ldrd	r6, [sp, #48]	; 0x30
   20558:	orr	r6, r6, r2
   2055c:	orr	r7, r7, r3
   20560:	mov	r2, r6
   20564:	mov	r3, r7
   20568:	ldrb	r6, [r0, #2]
   2056c:	lsl	r1, r6, #8
   20570:	str	r1, [sp, #20]
   20574:	mov	r1, #0
   20578:	str	r1, [sp, #16]
   2057c:	ldrd	r6, [sp, #16]
   20580:	orr	r6, r6, r2
   20584:	orr	r7, r7, r3
   20588:	mov	r2, r6
   2058c:	mov	r3, r7
   20590:	ldrb	r6, [r0, #1]
   20594:	lsl	r1, r6, #16
   20598:	str	r1, [sp, #12]
   2059c:	mov	r1, #0
   205a0:	str	r1, [sp, #8]
   205a4:	ldrd	r6, [sp, #8]
   205a8:	orr	r6, r6, r2
   205ac:	orr	r7, r7, r3
   205b0:	mov	r2, r6
   205b4:	mov	r3, r7
   205b8:	ldrb	r6, [r0]
   205bc:	mov	r8, #0
   205c0:	orr	r2, r2, r8
   205c4:	lsl	r9, r6, #24
   205c8:	add	r7, pc, #464	; 0x1d0
   205cc:	ldrd	r6, [r7]
   205d0:	orr	r3, r3, r9
   205d4:	cmp	r3, r7
   205d8:	cmpeq	r2, r6
   205dc:	beq	20428 <_start@@Base+0xae88>
   205e0:	mov	r1, r0
   205e4:	mov	r2, r4
   205e8:	mov	r0, r5
   205ec:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   205f0:	mov	r1, r0
   205f4:	b	20474 <_start@@Base+0xaed4>
   205f8:	sub	r3, r3, #1
   205fc:	cmp	r3, #7
   20600:	ldrls	pc, [pc, r3, lsl #2]
   20604:	b	205e0 <_start@@Base+0xb040>
   20608:	andeq	r0, r2, r0, ror r6
   2060c:	andeq	r0, r2, r4, ror #12
   20610:	andeq	r0, r2, r8, asr r6
   20614:	andeq	r0, r2, ip, asr #12
   20618:	andeq	r0, r2, r0, asr #12
   2061c:	andeq	r0, r2, r4, lsr r6
   20620:	andeq	r0, r2, r8, lsr #12
   20624:	andeq	r0, r2, ip, asr #9
   20628:	mov	r6, sl
   2062c:	mov	r7, fp
   20630:	b	204d4 <_start@@Base+0xaf34>
   20634:	mov	r6, sl
   20638:	mov	r7, fp
   2063c:	b	204fc <_start@@Base+0xaf5c>
   20640:	mov	r2, sl
   20644:	mov	r3, fp
   20648:	b	2051c <_start@@Base+0xaf7c>
   2064c:	mov	r2, sl
   20650:	mov	r3, fp
   20654:	b	20544 <_start@@Base+0xafa4>
   20658:	mov	r2, sl
   2065c:	mov	r3, fp
   20660:	b	20568 <_start@@Base+0xafc8>
   20664:	mov	r2, sl
   20668:	mov	r3, fp
   2066c:	b	20590 <_start@@Base+0xaff0>
   20670:	mov	r2, sl
   20674:	mov	r3, fp
   20678:	b	205b8 <_start@@Base+0xb018>
   2067c:	ldr	r3, [r5, #24]
   20680:	cmp	r3, #0
   20684:	beq	20bf4 <_start@@Base+0xb654>
   20688:	mov	r1, r6
   2068c:	mov	r3, #33	; 0x21
   20690:	mov	r2, r4
   20694:	mov	r0, r5
   20698:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   2069c:	mov	r1, r0
   206a0:	b	20390 <_start@@Base+0xadf0>
   206a4:	mov	r3, #3
   206a8:	mov	r2, r4
   206ac:	mov	r1, r7
   206b0:	mov	r0, r5
   206b4:	bl	18840 <_start@@Base+0x32a0>
   206b8:	cmp	r7, r0
   206bc:	mov	r6, r0
   206c0:	str	r0, [sp, #40]	; 0x28
   206c4:	beq	20460 <_start@@Base+0xaec0>
   206c8:	cmp	r4, r0
   206cc:	strh	r8, [sp, #108]	; 0x6c
   206d0:	str	sl, [sp, #120]	; 0x78
   206d4:	str	fp, [sp, #124]	; 0x7c
   206d8:	str	r8, [sp, #116]	; 0x74
   206dc:	beq	20a54 <_start@@Base+0xb4b4>
   206e0:	add	r3, sp, #120	; 0x78
   206e4:	mov	r1, r0
   206e8:	str	r3, [sp]
   206ec:	mov	r2, r4
   206f0:	add	r3, sp, #116	; 0x74
   206f4:	mov	r0, r5
   206f8:	bl	31f80 <flatcc_json_parser_integer@@Base>
   206fc:	cmp	r6, r0
   20700:	mov	r1, r0
   20704:	beq	20a54 <_start@@Base+0xb4b4>
   20708:	ldr	r3, [sp, #116]	; 0x74
   2070c:	cmp	r3, r8
   20710:	bne	20bcc <_start@@Base+0xb62c>
   20714:	ldrd	r2, [sp, #120]	; 0x78
   20718:	ldr	r6, [pc, #140]	; 207ac <_start@@Base+0xb20c>
   2071c:	mov	r7, #0
   20720:	cmp	r3, r7
   20724:	cmpeq	r2, r6
   20728:	uxthls	r2, r2
   2072c:	bhi	20c3c <_start@@Base+0xb69c>
   20730:	ldr	r3, [sp, #24]
   20734:	strh	r2, [r3]
   20738:	b	20474 <_start@@Base+0xaed4>
   2073c:	mov	r1, r0
   20740:	mov	r3, #5
   20744:	mov	r2, r4
   20748:	mov	r0, r5
   2074c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20750:	b	204c0 <_start@@Base+0xaf20>
   20754:	mov	r1, #1
   20758:	ldr	r0, [r0]
   2075c:	bl	2887c <flatcc_builder_start_table@@Base>
   20760:	cmp	r0, #0
   20764:	bne	20688 <_start@@Base+0xb0e8>
   20768:	mov	r1, r6
   2076c:	add	r3, sp, #108	; 0x6c
   20770:	mov	r2, r4
   20774:	mov	r0, r5
   20778:	bl	1878c <_start@@Base+0x31ec>
   2077c:	ldr	r3, [sp, #108]	; 0x6c
   20780:	cmp	r3, #0
   20784:	mov	r6, r0
   20788:	beq	2067c <_start@@Base+0xb0dc>
   2078c:	mov	r8, #0
   20790:	mov	r9, r8
   20794:	b	20960 <_start@@Base+0xb3c0>
   20798:	andeq	r0, r0, r0
   2079c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   207a0:	svcpl	0x006c656e
   207a4:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   207a8:	andeq	r1, r4, r4, asr #30
   207ac:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   207b0:	ldrb	r2, [r6, #7]
   207b4:	mov	r3, #0
   207b8:	ldrb	r0, [r6, #6]
   207bc:	lsr	ip, r0, #24
   207c0:	lsl	r1, r0, #8
   207c4:	str	ip, [sp, #100]	; 0x64
   207c8:	str	r1, [sp, #96]	; 0x60
   207cc:	ldrd	r0, [sp, #96]	; 0x60
   207d0:	orr	r0, r0, r2
   207d4:	orr	r1, r1, r3
   207d8:	mov	r2, r0
   207dc:	mov	r3, r1
   207e0:	ldrb	r0, [r6, #5]
   207e4:	lsr	ip, r0, #16
   207e8:	lsl	r1, r0, #16
   207ec:	str	ip, [sp, #84]	; 0x54
   207f0:	str	r1, [sp, #80]	; 0x50
   207f4:	ldrd	r0, [sp, #80]	; 0x50
   207f8:	orr	r0, r0, r2
   207fc:	orr	r1, r1, r3
   20800:	mov	r2, r0
   20804:	mov	r3, r1
   20808:	ldrb	r0, [r6, #4]
   2080c:	lsr	ip, r0, #8
   20810:	lsl	r1, r0, #24
   20814:	str	ip, [sp, #60]	; 0x3c
   20818:	str	r1, [sp, #56]	; 0x38
   2081c:	ldrd	r0, [sp, #56]	; 0x38
   20820:	orr	r0, r0, r2
   20824:	orr	r1, r1, r3
   20828:	mov	r2, r0
   2082c:	mov	r3, r1
   20830:	ldrb	r1, [r6, #3]
   20834:	str	r1, [sp, #68]	; 0x44
   20838:	mov	r1, #0
   2083c:	str	r1, [sp, #64]	; 0x40
   20840:	ldrd	r0, [sp, #64]	; 0x40
   20844:	orr	r0, r0, r2
   20848:	orr	r1, r1, r3
   2084c:	mov	r2, r0
   20850:	mov	r3, r1
   20854:	ldrb	r0, [r6, #2]
   20858:	lsl	r1, r0, #8
   2085c:	str	r1, [sp, #44]	; 0x2c
   20860:	mov	r1, #0
   20864:	str	r1, [sp, #40]	; 0x28
   20868:	ldrd	r0, [sp, #40]	; 0x28
   2086c:	orr	r0, r0, r2
   20870:	orr	r1, r1, r3
   20874:	mov	r2, r0
   20878:	mov	r3, r1
   2087c:	ldrb	r0, [r6, #1]
   20880:	lsl	r1, r0, #16
   20884:	str	r1, [sp, #28]
   20888:	mov	r1, #0
   2088c:	str	r1, [sp, #24]
   20890:	ldrd	r0, [sp, #24]
   20894:	orr	r0, r0, r2
   20898:	orr	r1, r1, r3
   2089c:	mov	r2, r0
   208a0:	mov	r3, r1
   208a4:	ldrb	r0, [r6]
   208a8:	mov	sl, #0
   208ac:	orr	r2, r2, sl
   208b0:	lsl	fp, r0, #24
   208b4:	add	r1, pc, #972	; 0x3cc
   208b8:	ldrd	r0, [r1]
   208bc:	orr	r3, r3, fp
   208c0:	cmp	r3, r1
   208c4:	cmpeq	r2, r0
   208c8:	bne	20928 <_start@@Base+0xb388>
   208cc:	add	r7, r6, #8
   208d0:	mov	r0, r7
   208d4:	mov	r1, r4
   208d8:	bl	156c8 <_start@@Base+0x128>
   208dc:	add	r3, pc, #940	; 0x3ac
   208e0:	ldrd	r2, [r3]
   208e4:	cmp	r1, r3
   208e8:	cmpeq	r0, r2
   208ec:	bne	20a20 <_start@@Base+0xb480>
   208f0:	add	r6, r6, #16
   208f4:	mov	r0, r6
   208f8:	mov	r1, r4
   208fc:	bl	156c8 <_start@@Base+0x128>
   20900:	add	r3, pc, #912	; 0x390
   20904:	ldrd	r2, [r3]
   20908:	mov	r0, #0
   2090c:	bic	r1, r1, #255	; 0xff
   20910:	cmp	r1, r3
   20914:	cmpeq	r0, r2
   20918:	bne	20928 <_start@@Base+0xb388>
   2091c:	sub	r3, r4, r6
   20920:	cmp	r3, #3
   20924:	bgt	20acc <_start@@Base+0xb52c>
   20928:	mov	r1, r6
   2092c:	mov	r2, r4
   20930:	mov	r0, r5
   20934:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   20938:	mov	r6, r0
   2093c:	mov	r1, r6
   20940:	add	r3, sp, #108	; 0x6c
   20944:	mov	r2, r4
   20948:	mov	r0, r5
   2094c:	bl	19ea8 <_start@@Base+0x4908>
   20950:	ldr	r3, [sp, #108]	; 0x6c
   20954:	cmp	r3, #0
   20958:	mov	r6, r0
   2095c:	beq	2067c <_start@@Base+0xb0dc>
   20960:	cmp	r4, r6
   20964:	beq	20928 <_start@@Base+0xb388>
   20968:	ldrb	r3, [r6]
   2096c:	cmp	r3, #34	; 0x22
   20970:	moveq	r3, #0
   20974:	addeq	r6, r6, #1
   20978:	streq	r3, [r5, #12]
   2097c:	beq	20990 <_start@@Base+0xb3f0>
   20980:	cmp	r3, #46	; 0x2e
   20984:	movne	r3, #1
   20988:	strne	r3, [r5, #12]
   2098c:	beq	20a38 <_start@@Base+0xb498>
   20990:	sub	r3, r4, r6
   20994:	cmp	r3, #8
   20998:	bhi	207b0 <_start@@Base+0xb210>
   2099c:	sub	r3, r3, #1
   209a0:	cmp	r3, #7
   209a4:	ldrls	pc, [pc, r3, lsl #2]
   209a8:	b	20928 <_start@@Base+0xb388>
   209ac:	andeq	r0, r2, r4, lsl sl
   209b0:	andeq	r0, r2, r8, lsl #20
   209b4:	strdeq	r0, [r2], -ip
   209b8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   209bc:	andeq	r0, r2, r4, ror #19
   209c0:	ldrdeq	r0, [r2], -r8
   209c4:	andeq	r0, r2, ip, asr #19
   209c8:			; <UNDEFINED> instruction: 0x000207b0
   209cc:	mov	r2, r8
   209d0:	mov	r3, r9
   209d4:	b	207b8 <_start@@Base+0xb218>
   209d8:	mov	r2, r8
   209dc:	mov	r3, r9
   209e0:	b	207e0 <_start@@Base+0xb240>
   209e4:	mov	r2, r8
   209e8:	mov	r3, r9
   209ec:	b	20808 <_start@@Base+0xb268>
   209f0:	mov	r2, r8
   209f4:	mov	r3, r9
   209f8:	b	20830 <_start@@Base+0xb290>
   209fc:	mov	r2, r8
   20a00:	mov	r3, r9
   20a04:	b	20854 <_start@@Base+0xb2b4>
   20a08:	mov	r2, r8
   20a0c:	mov	r3, r9
   20a10:	b	2087c <_start@@Base+0xb2dc>
   20a14:	mov	r2, r8
   20a18:	mov	r3, r9
   20a1c:	b	208a4 <_start@@Base+0xb304>
   20a20:	mov	r1, r7
   20a24:	mov	r2, r4
   20a28:	mov	r0, r5
   20a2c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   20a30:	mov	r6, r0
   20a34:	b	2093c <_start@@Base+0xb39c>
   20a38:	mov	r1, r6
   20a3c:	mov	r3, #5
   20a40:	mov	r2, r4
   20a44:	mov	r0, r5
   20a48:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20a4c:	mov	r6, r0
   20a50:	b	20990 <_start@@Base+0xb3f0>
   20a54:	ldr	r6, [sp, #40]	; 0x28
   20a58:	add	r3, sp, #108	; 0x6c
   20a5c:	str	r3, [sp]
   20a60:	mov	r1, r6
   20a64:	ldr	r3, [pc, #564]	; 20ca0 <_start@@Base+0xb700>
   20a68:	mov	r2, r4
   20a6c:	mov	r0, r5
   20a70:	bl	19100 <_start@@Base+0x3b60>
   20a74:	cmp	r4, r0
   20a78:	cmpne	r0, r6
   20a7c:	mov	r1, r0
   20a80:	bne	20bec <_start@@Base+0xb64c>
   20a84:	mov	r3, #33	; 0x21
   20a88:	mov	r2, r4
   20a8c:	mov	r0, r5
   20a90:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20a94:	mov	r1, r0
   20a98:	cmp	r4, r1
   20a9c:	beq	2068c <_start@@Base+0xb0ec>
   20aa0:	ldr	r0, [r5]
   20aa4:	str	r1, [sp, #8]
   20aa8:	bl	27394 <flatcc_builder_end_struct@@Base>
   20aac:	ldr	r3, [sp, #168]	; 0xa8
   20ab0:	ldr	r1, [sp, #8]
   20ab4:	cmp	r0, #0
   20ab8:	str	r0, [r3]
   20abc:	beq	2068c <_start@@Base+0xb0ec>
   20ac0:	b	2031c <_start@@Base+0xad7c>
   20ac4:	mov	r1, r0
   20ac8:	b	20a98 <_start@@Base+0xb4f8>
   20acc:	mov	r3, #3
   20ad0:	mov	r2, r4
   20ad4:	mov	r1, r6
   20ad8:	mov	r0, r5
   20adc:	bl	18840 <_start@@Base+0x32a0>
   20ae0:	cmp	r6, r0
   20ae4:	mov	r7, r0
   20ae8:	beq	20928 <_start@@Base+0xb388>
   20aec:	cmp	r4, r0
   20af0:	str	sl, [sp, #112]	; 0x70
   20af4:	str	r8, [sp, #120]	; 0x78
   20af8:	str	r9, [sp, #124]	; 0x7c
   20afc:	str	sl, [sp, #116]	; 0x74
   20b00:	beq	20c58 <_start@@Base+0xb6b8>
   20b04:	add	r3, sp, #120	; 0x78
   20b08:	str	r3, [sp]
   20b0c:	mov	r1, r0
   20b10:	add	r3, sp, #116	; 0x74
   20b14:	mov	r2, r4
   20b18:	mov	r0, r5
   20b1c:	bl	31f80 <flatcc_json_parser_integer@@Base>
   20b20:	cmp	r7, r0
   20b24:	mov	r6, r0
   20b28:	beq	20c54 <_start@@Base+0xb6b4>
   20b2c:	ldr	r1, [sp, #116]	; 0x74
   20b30:	ldrd	r2, [sp, #120]	; 0x78
   20b34:	cmp	r1, sl
   20b38:	beq	20b98 <_start@@Base+0xb5f8>
   20b3c:	cmp	r3, #0
   20b40:	cmpeq	r2, #-2147483648	; 0x80000000
   20b44:	rsbls	r2, r2, #0
   20b48:	strls	r2, [sp, #112]	; 0x70
   20b4c:	bhi	20c14 <_start@@Base+0xb674>
   20b50:	cmp	r2, #0
   20b54:	bne	20b64 <_start@@Base+0xb5c4>
   20b58:	ldr	r3, [r5, #8]
   20b5c:	tst	r3, #2
   20b60:	beq	2093c <_start@@Base+0xb39c>
   20b64:	mov	r3, #4
   20b68:	mov	r2, r3
   20b6c:	mov	r1, #0
   20b70:	ldr	r0, [r5]
   20b74:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   20b78:	cmp	r0, #0
   20b7c:	beq	20688 <_start@@Base+0xb0e8>
   20b80:	ldr	r3, [sp, #112]	; 0x70
   20b84:	str	r3, [r0]
   20b88:	b	2093c <_start@@Base+0xb39c>
   20b8c:	bl	30128 <flatcc_json_parser_generic_json@@Base>
   20b90:	mov	r1, r0
   20b94:	b	2031c <_start@@Base+0xad7c>
   20b98:	mov	r1, #0
   20b9c:	cmp	r3, r1
   20ba0:	mvn	r0, #-2147483648	; 0x80000000
   20ba4:	cmpeq	r2, r0
   20ba8:	strls	r2, [sp, #112]	; 0x70
   20bac:	bls	20b50 <_start@@Base+0xb5b0>
   20bb0:	mov	r1, r6
   20bb4:	mov	r3, #7
   20bb8:	mov	r2, r4
   20bbc:	mov	r0, r5
   20bc0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20bc4:	mov	r6, r0
   20bc8:	b	20c2c <_start@@Base+0xb68c>
   20bcc:	mov	r3, #8
   20bd0:	mov	r2, r4
   20bd4:	mov	r0, r5
   20bd8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20bdc:	mov	r1, r0
   20be0:	ldr	r3, [sp, #40]	; 0x28
   20be4:	cmp	r3, r1
   20be8:	beq	20a54 <_start@@Base+0xb4b4>
   20bec:	ldrh	r2, [sp, #108]	; 0x6c
   20bf0:	b	20730 <_start@@Base+0xb190>
   20bf4:	ldr	r0, [r5]
   20bf8:	bl	292bc <flatcc_builder_end_table@@Base>
   20bfc:	ldr	r3, [sp, #168]	; 0xa8
   20c00:	cmp	r0, #0
   20c04:	str	r0, [r3]
   20c08:	movne	r1, r6
   20c0c:	beq	20688 <_start@@Base+0xb0e8>
   20c10:	b	20390 <_start@@Base+0xadf0>
   20c14:	mov	r1, r0
   20c18:	mov	r3, #8
   20c1c:	mov	r2, r4
   20c20:	mov	r0, r5
   20c24:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20c28:	mov	r6, r0
   20c2c:	cmp	r7, r6
   20c30:	beq	20c58 <_start@@Base+0xb6b8>
   20c34:	ldr	r2, [sp, #112]	; 0x70
   20c38:	b	20b50 <_start@@Base+0xb5b0>
   20c3c:	mov	r3, #7
   20c40:	mov	r2, r4
   20c44:	mov	r0, r5
   20c48:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20c4c:	mov	r1, r0
   20c50:	b	20be0 <_start@@Base+0xb640>
   20c54:	mov	r7, r0
   20c58:	add	r3, sp, #112	; 0x70
   20c5c:	str	r3, [sp]
   20c60:	mov	r2, r4
   20c64:	ldr	r3, [pc, #56]	; 20ca4 <_start@@Base+0xb704>
   20c68:	mov	r1, r7
   20c6c:	mov	r0, r5
   20c70:	bl	192f8 <_start@@Base+0x3d58>
   20c74:	cmp	r4, r0
   20c78:	cmpne	r0, r7
   20c7c:	mov	r6, r0
   20c80:	bne	20c34 <_start@@Base+0xb694>
   20c84:	b	20688 <_start@@Base+0xb0e8>
   20c88:	ldrbvs	r6, [pc], #-372	; 20c90 <_start@@Base+0xb6f0>
   20c8c:	cmnvc	r7, #456	; 0x1c8
   20c90:	svcpl	0x0064616d
   20c94:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   20c98:	andeq	r0, r0, r0
   20c9c:	cmnvs	r7, r0, lsl #10
   20ca0:	andeq	r8, r5, r0, ror r2
   20ca4:	andeq	r8, r5, r4, ror #4
   20ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cac:	sub	sp, sp, #700	; 0x2bc
   20cb0:	mov	sl, r0
   20cb4:	mov	r0, r3
   20cb8:	str	r3, [sp, #652]	; 0x28c
   20cbc:	mov	r3, #0
   20cc0:	str	r3, [r0]
   20cc4:	mov	r4, r1
   20cc8:	ldr	r0, [sl]
   20ccc:	mov	r1, #4
   20cd0:	mov	fp, r2
   20cd4:	bl	2887c <flatcc_builder_start_table@@Base>
   20cd8:	subs	r3, r0, #0
   20cdc:	str	r3, [sp, #648]	; 0x288
   20ce0:	bne	20fd0 <_start@@Base+0xba30>
   20ce4:	add	r3, sp, #664	; 0x298
   20ce8:	str	r3, [sp]
   20cec:	mov	r2, fp
   20cf0:	mov	r3, #1
   20cf4:	mov	r1, r4
   20cf8:	mov	r0, sl
   20cfc:	bl	32884 <flatcc_json_parser_prepare_unions@@Base>
   20d00:	cmp	fp, r0
   20d04:	beq	20fd0 <_start@@Base+0xba30>
   20d08:	mov	r1, r4
   20d0c:	add	r3, sp, #656	; 0x290
   20d10:	mov	r2, fp
   20d14:	mov	r0, sl
   20d18:	bl	1878c <_start@@Base+0x31ec>
   20d1c:	ldr	r3, [sp, #656]	; 0x290
   20d20:	mov	r4, r0
   20d24:	cmp	r3, #0
   20d28:	beq	20fc4 <_start@@Base+0xba24>
   20d2c:	mov	r3, fp
   20d30:	mov	fp, sl
   20d34:	mov	sl, r3
   20d38:	cmp	sl, r4
   20d3c:	ldreq	r5, [sp, #648]	; 0x288
   20d40:	beq	22374 <_start@@Base+0xcdd4>
   20d44:	ldrb	r3, [r4]
   20d48:	cmp	r3, #34	; 0x22
   20d4c:	beq	211ec <_start@@Base+0xbc4c>
   20d50:	cmp	r3, #46	; 0x2e
   20d54:	movne	r3, #1
   20d58:	subne	r5, sl, r4
   20d5c:	strne	r3, [fp, #12]
   20d60:	beq	223c8 <_start@@Base+0xce28>
   20d64:	cmp	r5, #8
   20d68:	bls	20fec <_start@@Base+0xba4c>
   20d6c:	ldrb	r6, [r4, #7]
   20d70:	mov	r7, #0
   20d74:	ldrb	r2, [r4, #6]
   20d78:	lsl	r3, r2, #8
   20d7c:	str	r3, [sp, #544]	; 0x220
   20d80:	add	r3, sp, #544	; 0x220
   20d84:	lsr	r1, r2, #24
   20d88:	str	r1, [sp, #548]	; 0x224
   20d8c:	ldrd	r2, [r3]
   20d90:	orr	r2, r2, r6
   20d94:	orr	r3, r3, r7
   20d98:	mov	r6, r2
   20d9c:	mov	r7, r3
   20da0:	ldrb	r2, [r4, #5]
   20da4:	lsl	r3, r2, #16
   20da8:	str	r3, [sp, #464]	; 0x1d0
   20dac:	add	r3, sp, #464	; 0x1d0
   20db0:	lsr	r1, r2, #16
   20db4:	str	r1, [sp, #468]	; 0x1d4
   20db8:	ldrd	r2, [r3]
   20dbc:	orr	r2, r2, r6
   20dc0:	orr	r3, r3, r7
   20dc4:	mov	r6, r2
   20dc8:	mov	r7, r3
   20dcc:	ldrb	r2, [r4, #4]
   20dd0:	lsl	r3, r2, #24
   20dd4:	str	r3, [sp, #392]	; 0x188
   20dd8:	add	r3, sp, #392	; 0x188
   20ddc:	lsr	r1, r2, #8
   20de0:	str	r1, [sp, #396]	; 0x18c
   20de4:	ldrd	r2, [r3]
   20de8:	orr	r2, r2, r6
   20dec:	orr	r3, r3, r7
   20df0:	mov	r6, r2
   20df4:	mov	r7, r3
   20df8:	ldrb	r3, [r4, #3]
   20dfc:	str	r3, [sp, #420]	; 0x1a4
   20e00:	mov	r3, #0
   20e04:	str	r3, [sp, #416]	; 0x1a0
   20e08:	add	r3, sp, #416	; 0x1a0
   20e0c:	ldrd	r2, [r3]
   20e10:	orr	r2, r2, r6
   20e14:	orr	r3, r3, r7
   20e18:	mov	r6, r2
   20e1c:	mov	r7, r3
   20e20:	ldrb	r2, [r4, #2]
   20e24:	lsl	r3, r2, #8
   20e28:	str	r3, [sp, #380]	; 0x17c
   20e2c:	mov	r3, #0
   20e30:	str	r3, [sp, #376]	; 0x178
   20e34:	add	r3, sp, #376	; 0x178
   20e38:	ldrd	r2, [r3]
   20e3c:	orr	r2, r2, r6
   20e40:	orr	r3, r3, r7
   20e44:	mov	r6, r2
   20e48:	mov	r7, r3
   20e4c:	ldrb	r2, [r4, #1]
   20e50:	lsl	r3, r2, #16
   20e54:	str	r3, [sp, #308]	; 0x134
   20e58:	mov	r3, #0
   20e5c:	str	r3, [sp, #304]	; 0x130
   20e60:	add	r3, sp, #304	; 0x130
   20e64:	ldrd	r2, [r3]
   20e68:	orr	r2, r2, r6
   20e6c:	orr	r3, r3, r7
   20e70:	mov	r6, r2
   20e74:	mov	r7, r3
   20e78:	ldrb	r2, [r4]
   20e7c:	lsl	r3, r2, #24
   20e80:	str	r3, [sp, #268]	; 0x10c
   20e84:	mov	r3, #0
   20e88:	str	r3, [sp, #264]	; 0x108
   20e8c:	add	r3, sp, #264	; 0x108
   20e90:	ldrd	r2, [r3]
   20e94:	orr	r2, r2, r6
   20e98:	orr	r3, r3, r7
   20e9c:	mov	r6, r2
   20ea0:	mov	r7, r3
   20ea4:	add	r3, pc, #852	; 0x354
   20ea8:	ldrd	r2, [r3]
   20eac:	cmp	r7, r3
   20eb0:	cmpeq	r6, r2
   20eb4:	beq	21070 <_start@@Base+0xbad0>
   20eb8:	add	r3, pc, #840	; 0x348
   20ebc:	ldrd	r2, [r3]
   20ec0:	bic	r0, r6, #255	; 0xff
   20ec4:	cmp	r7, r3
   20ec8:	cmpeq	r0, r2
   20ecc:	movne	r8, #1
   20ed0:	moveq	r8, #0
   20ed4:	cmp	r5, #7
   20ed8:	orrle	r8, r8, #1
   20edc:	cmp	r8, #0
   20ee0:	beq	22450 <_start@@Base+0xceb0>
   20ee4:	add	r1, pc, #804	; 0x324
   20ee8:	ldrd	r0, [r1]
   20eec:	ldr	r2, [pc, #820]	; 21228 <_start@@Base+0xbc88>
   20ef0:	mvn	r3, #0
   20ef4:	and	r3, r3, r7
   20ef8:	and	r2, r2, r6
   20efc:	cmp	r3, r1
   20f00:	cmpeq	r2, r0
   20f04:	beq	2122c <_start@@Base+0xbc8c>
   20f08:	add	r3, pc, #776	; 0x308
   20f0c:	ldrd	r2, [r3]
   20f10:	and	r6, r6, #-16777216	; 0xff000000
   20f14:	cmp	r7, r3
   20f18:	cmpeq	r6, r2
   20f1c:	bne	20f28 <_start@@Base+0xb988>
   20f20:	cmp	r5, #5
   20f24:	bgt	223e8 <_start@@Base+0xce48>
   20f28:	mov	r1, r4
   20f2c:	mov	r2, sl
   20f30:	mov	r0, fp
   20f34:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   20f38:	mov	r6, r0
   20f3c:	sub	r3, sl, r6
   20f40:	cmp	r3, #1
   20f44:	ble	20f58 <_start@@Base+0xb9b8>
   20f48:	ldrb	r3, [r6]
   20f4c:	cmp	r3, #32
   20f50:	bhi	20f6c <_start@@Base+0xb9cc>
   20f54:	beq	221dc <_start@@Base+0xcc3c>
   20f58:	mov	r1, r6
   20f5c:	mov	r2, sl
   20f60:	mov	r0, fp
   20f64:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   20f68:	mov	r6, r0
   20f6c:	cmp	sl, r6
   20f70:	beq	221f4 <_start@@Base+0xcc54>
   20f74:	ldrb	r3, [r6]
   20f78:	cmp	r3, #44	; 0x2c
   20f7c:	beq	22318 <_start@@Base+0xcd78>
   20f80:	mov	r3, sl
   20f84:	mov	sl, fp
   20f88:	mov	fp, r3
   20f8c:	mov	r3, #0
   20f90:	str	r3, [sp, #656]	; 0x290
   20f94:	ldrb	r3, [r6]
   20f98:	cmp	r3, #125	; 0x7d
   20f9c:	beq	211b0 <_start@@Base+0xbc10>
   20fa0:	mov	r3, #10
   20fa4:	mov	r1, r6
   20fa8:	mov	r2, fp
   20fac:	mov	r0, sl
   20fb0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20fb4:	ldr	r3, [sp, #656]	; 0x290
   20fb8:	cmp	r3, #0
   20fbc:	mov	r4, r0
   20fc0:	bne	20d2c <_start@@Base+0xb78c>
   20fc4:	ldr	r3, [sl, #24]
   20fc8:	cmp	r3, #0
   20fcc:	beq	23aa8 <_start@@Base+0xe508>
   20fd0:	mov	r2, fp
   20fd4:	mov	r1, r4
   20fd8:	mov	r0, sl
   20fdc:	mov	r3, #33	; 0x21
   20fe0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   20fe4:	add	sp, sp, #700	; 0x2bc
   20fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fec:	sub	r3, r5, #1
   20ff0:	cmp	r3, #7
   20ff4:	ldrls	pc, [pc, r3, lsl #2]
   20ff8:	b	22374 <_start@@Base+0xcdd4>
   20ffc:	andeq	r1, r2, r4, rrx
   21000:	andeq	r1, r2, r8, asr r0
   21004:	andeq	r1, r2, ip, asr #32
   21008:	andeq	r1, r2, r0, asr #32
   2100c:	andeq	r1, r2, r4, lsr r0
   21010:	andeq	r1, r2, r8, lsr #32
   21014:	andeq	r1, r2, ip, lsl r0
   21018:	andeq	r0, r2, ip, ror #26
   2101c:	mov	r6, #0
   21020:	mov	r7, #0
   21024:	b	20d74 <_start@@Base+0xb7d4>
   21028:	mov	r6, #0
   2102c:	mov	r7, #0
   21030:	b	20da0 <_start@@Base+0xb800>
   21034:	mov	r6, #0
   21038:	mov	r7, #0
   2103c:	b	20dcc <_start@@Base+0xb82c>
   21040:	mov	r6, #0
   21044:	mov	r7, #0
   21048:	b	20df8 <_start@@Base+0xb858>
   2104c:	mov	r6, #0
   21050:	mov	r7, #0
   21054:	b	20e20 <_start@@Base+0xb880>
   21058:	mov	r6, #0
   2105c:	mov	r7, #0
   21060:	b	20e4c <_start@@Base+0xb8ac>
   21064:	mov	r6, #0
   21068:	mov	r7, #0
   2106c:	b	20e78 <_start@@Base+0xb8d8>
   21070:	add	r5, r4, #8
   21074:	sub	ip, sl, r5
   21078:	cmp	ip, #8
   2107c:	bls	2221c <_start@@Base+0xcc7c>
   21080:	ldrb	r0, [r4, #14]
   21084:	mov	r3, #0
   21088:	lsl	r1, r0, #8
   2108c:	str	r1, [sp, #640]	; 0x280
   21090:	add	r1, sp, #640	; 0x280
   21094:	lsr	lr, r0, #24
   21098:	str	lr, [sp, #644]	; 0x284
   2109c:	ldrd	r0, [r1]
   210a0:	orr	r1, r1, r3
   210a4:	mov	r3, r1
   210a8:	ldrb	r0, [r4, #13]
   210ac:	lsl	r1, r0, #16
   210b0:	str	r1, [sp, #632]	; 0x278
   210b4:	add	r1, sp, #632	; 0x278
   210b8:	lsr	lr, r0, #16
   210bc:	str	lr, [sp, #636]	; 0x27c
   210c0:	ldrd	r0, [r1]
   210c4:	orr	r1, r1, r3
   210c8:	mov	r3, r1
   210cc:	ldrb	r0, [r4, #12]
   210d0:	lsl	r1, r0, #24
   210d4:	str	r1, [sp, #608]	; 0x260
   210d8:	add	r1, sp, #608	; 0x260
   210dc:	lsr	lr, r0, #8
   210e0:	str	lr, [sp, #612]	; 0x264
   210e4:	ldrd	r0, [r1]
   210e8:	orr	r1, r1, r3
   210ec:	mov	r3, r1
   210f0:	ldrb	r1, [r4, #11]
   210f4:	str	r1, [sp, #620]	; 0x26c
   210f8:	mov	r1, #0
   210fc:	str	r1, [sp, #616]	; 0x268
   21100:	add	r1, sp, #616	; 0x268
   21104:	ldrd	r0, [r1]
   21108:	orr	r1, r1, r3
   2110c:	mov	r3, r1
   21110:	ldrb	r0, [r4, #10]
   21114:	lsl	r1, r0, #8
   21118:	str	r1, [sp, #596]	; 0x254
   2111c:	mov	r1, #0
   21120:	str	r1, [sp, #592]	; 0x250
   21124:	add	r1, sp, #592	; 0x250
   21128:	ldrd	r0, [r1]
   2112c:	orr	r1, r1, r3
   21130:	mov	r3, r1
   21134:	ldrb	r0, [r4, #9]
   21138:	lsl	r1, r0, #16
   2113c:	str	r1, [sp, #580]	; 0x244
   21140:	mov	r1, #0
   21144:	str	r1, [sp, #576]	; 0x240
   21148:	add	r1, sp, #576	; 0x240
   2114c:	ldrd	r0, [r1]
   21150:	orr	r1, r1, r3
   21154:	mov	r3, r1
   21158:	ldrb	r0, [r4, #8]
   2115c:	add	lr, sp, #536	; 0x218
   21160:	mov	r2, #0
   21164:	lsl	r1, r0, #24
   21168:	str	r1, [sp, #540]	; 0x21c
   2116c:	mov	r1, #0
   21170:	str	r1, [sp, #536]	; 0x218
   21174:	ldrd	r6, [lr]
   21178:	add	r1, pc, #160	; 0xa0
   2117c:	ldrd	r0, [r1]
   21180:	orr	r7, r7, r3
   21184:	cmp	r7, r1
   21188:	cmpeq	r2, r0
   2118c:	bne	21198 <_start@@Base+0xbbf8>
   21190:	cmp	ip, #4
   21194:	bgt	22f84 <_start@@Base+0xd9e4>
   21198:	mov	r1, r5
   2119c:	mov	r2, sl
   211a0:	mov	r0, fp
   211a4:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   211a8:	mov	r6, r0
   211ac:	b	20f3c <_start@@Base+0xb99c>
   211b0:	add	r4, r6, #1
   211b4:	sub	r3, fp, r4
   211b8:	cmp	r3, #1
   211bc:	ble	211d0 <_start@@Base+0xbc30>
   211c0:	ldrb	r3, [r6, #1]
   211c4:	cmp	r3, #32
   211c8:	bhi	20fc4 <_start@@Base+0xba24>
   211cc:	beq	23960 <_start@@Base+0xe3c0>
   211d0:	mov	r1, r4
   211d4:	mov	r2, fp
   211d8:	mov	r0, sl
   211dc:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   211e0:	ldr	r3, [sp, #656]	; 0x290
   211e4:	mov	r4, r0
   211e8:	b	20d24 <_start@@Base+0xb784>
   211ec:	add	r4, r4, #1
   211f0:	mov	r3, #0
   211f4:	sub	r5, sl, r4
   211f8:	str	r3, [fp, #12]
   211fc:	b	20d64 <_start@@Base+0xb7c4>
   21200:	cmnvs	lr, pc, asr r9
   21204:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   21208:	cmnvs	lr, r0, lsl #18
   2120c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   21210:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   21214:	rsbsvc	r6, r2, r6, ror #10
   21218:	strvs	r0, [r0, #-0]
   2121c:	stclvs	6, cr7, [pc, #-420]!	; 21080 <_start@@Base+0xbae0>
   21220:	andeq	r0, r0, r0
   21224:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   21228:			; <UNDEFINED> instruction: 0xffff0000
   2122c:	cmp	r5, #6
   21230:	ble	20f28 <_start@@Base+0xb988>
   21234:	mov	r3, #6
   21238:	mov	r2, sl
   2123c:	mov	r1, r4
   21240:	mov	r0, fp
   21244:	bl	18840 <_start@@Base+0x32a0>
   21248:	cmp	r0, r4
   2124c:	mov	r6, r0
   21250:	beq	20f28 <_start@@Base+0xb988>
   21254:	mov	r3, #0
   21258:	mov	r1, #3
   2125c:	ldr	r0, [fp]
   21260:	str	r3, [sp, #660]	; 0x294
   21264:	bl	2887c <flatcc_builder_start_table@@Base>
   21268:	cmp	r0, #0
   2126c:	bne	217d8 <_start@@Base+0xc238>
   21270:	add	r3, sp, #668	; 0x29c
   21274:	mov	r1, r6
   21278:	mov	r2, sl
   2127c:	mov	r0, fp
   21280:	bl	1878c <_start@@Base+0x31ec>
   21284:	ldr	r3, [sp, #668]	; 0x29c
   21288:	cmp	r3, #0
   2128c:	beq	21794 <_start@@Base+0xc1f4>
   21290:	cmp	sl, r0
   21294:	beq	2181c <_start@@Base+0xc27c>
   21298:	ldrb	r3, [r0]
   2129c:	cmp	r3, #34	; 0x22
   212a0:	moveq	r3, #0
   212a4:	addeq	r0, r0, #1
   212a8:	streq	r3, [fp, #12]
   212ac:	beq	212c0 <_start@@Base+0xbd20>
   212b0:	cmp	r3, #46	; 0x2e
   212b4:	movne	r3, #1
   212b8:	strne	r3, [fp, #12]
   212bc:	beq	221ac <_start@@Base+0xcc0c>
   212c0:	sub	r3, sl, r0
   212c4:	cmp	r3, #8
   212c8:	bls	21834 <_start@@Base+0xc294>
   212cc:	ldrb	r2, [r0, #7]
   212d0:	mov	r3, #0
   212d4:	ldrb	r4, [r0, #6]
   212d8:	lsr	r1, r4, #24
   212dc:	str	r1, [sp, #316]	; 0x13c
   212e0:	lsl	r1, r4, #8
   212e4:	str	r1, [sp, #312]	; 0x138
   212e8:	add	r1, sp, #312	; 0x138
   212ec:	ldrd	r4, [r1]
   212f0:	orr	r4, r4, r2
   212f4:	orr	r5, r5, r3
   212f8:	mov	r2, r4
   212fc:	mov	r3, r5
   21300:	ldrb	r4, [r0, #5]
   21304:	lsr	r1, r4, #16
   21308:	str	r1, [sp, #196]	; 0xc4
   2130c:	lsl	r1, r4, #16
   21310:	str	r1, [sp, #192]	; 0xc0
   21314:	ldrd	r4, [sp, #192]	; 0xc0
   21318:	orr	r4, r4, r2
   2131c:	orr	r5, r5, r3
   21320:	mov	r2, r4
   21324:	mov	r3, r5
   21328:	ldrb	r4, [r0, #4]
   2132c:	lsr	r1, r4, #8
   21330:	str	r1, [sp, #132]	; 0x84
   21334:	lsl	r1, r4, #24
   21338:	str	r1, [sp, #128]	; 0x80
   2133c:	ldrd	r4, [sp, #128]	; 0x80
   21340:	orr	r4, r4, r2
   21344:	orr	r5, r5, r3
   21348:	mov	r2, r4
   2134c:	mov	r3, r5
   21350:	ldrb	r1, [r0, #3]
   21354:	str	r1, [sp, #148]	; 0x94
   21358:	mov	r1, #0
   2135c:	str	r1, [sp, #144]	; 0x90
   21360:	ldrd	r4, [sp, #144]	; 0x90
   21364:	orr	r4, r4, r2
   21368:	orr	r5, r5, r3
   2136c:	mov	r2, r4
   21370:	mov	r3, r5
   21374:	ldrb	r4, [r0, #2]
   21378:	lsl	r1, r4, #8
   2137c:	str	r1, [sp, #108]	; 0x6c
   21380:	mov	r1, #0
   21384:	str	r1, [sp, #104]	; 0x68
   21388:	ldrd	r4, [sp, #104]	; 0x68
   2138c:	orr	r4, r4, r2
   21390:	orr	r5, r5, r3
   21394:	mov	r2, r4
   21398:	mov	r3, r5
   2139c:	ldrb	r4, [r0, #1]
   213a0:	lsl	r1, r4, #16
   213a4:	str	r1, [sp, #76]	; 0x4c
   213a8:	mov	r1, #0
   213ac:	str	r1, [sp, #72]	; 0x48
   213b0:	ldrd	r4, [sp, #72]	; 0x48
   213b4:	orr	r4, r4, r2
   213b8:	orr	r5, r5, r3
   213bc:	mov	r2, r4
   213c0:	mov	r3, r5
   213c4:	ldrb	r4, [r0]
   213c8:	lsl	r1, r4, #24
   213cc:	str	r1, [sp, #52]	; 0x34
   213d0:	mov	r1, #0
   213d4:	str	r1, [sp, #48]	; 0x30
   213d8:	ldrd	r4, [sp, #48]	; 0x30
   213dc:	orr	r4, r4, r2
   213e0:	orr	r5, r5, r3
   213e4:	mov	r2, r4
   213e8:	mov	r3, r5
   213ec:	add	r5, pc, #948	; 0x3b4
   213f0:	ldrd	r4, [r5]
   213f4:	cmp	r3, r5
   213f8:	cmpeq	r2, r4
   213fc:	bne	2181c <_start@@Base+0xc27c>
   21400:	add	r1, r0, #8
   21404:	sub	r3, sl, r1
   21408:	cmp	r3, #8
   2140c:	bls	218b8 <_start@@Base+0xc318>
   21410:	ldrb	r2, [r0, #15]
   21414:	mov	r3, #0
   21418:	ldrb	r4, [r0, #14]
   2141c:	lsr	ip, r4, #24
   21420:	str	ip, [sp, #492]	; 0x1ec
   21424:	lsl	ip, r4, #8
   21428:	str	ip, [sp, #488]	; 0x1e8
   2142c:	add	ip, sp, #488	; 0x1e8
   21430:	ldrd	r4, [ip]
   21434:	orr	r4, r4, r2
   21438:	orr	r5, r5, r3
   2143c:	mov	r2, r4
   21440:	mov	r3, r5
   21444:	ldrb	r4, [r0, #13]
   21448:	lsr	ip, r4, #16
   2144c:	str	ip, [sp, #412]	; 0x19c
   21450:	lsl	ip, r4, #16
   21454:	str	ip, [sp, #408]	; 0x198
   21458:	add	ip, sp, #408	; 0x198
   2145c:	ldrd	r4, [ip]
   21460:	orr	r4, r4, r2
   21464:	orr	r5, r5, r3
   21468:	mov	r2, r4
   2146c:	mov	r3, r5
   21470:	ldrb	r4, [r0, #12]
   21474:	lsr	ip, r4, #8
   21478:	str	ip, [sp, #324]	; 0x144
   2147c:	lsl	ip, r4, #24
   21480:	str	ip, [sp, #320]	; 0x140
   21484:	add	ip, sp, #320	; 0x140
   21488:	ldrd	r4, [ip]
   2148c:	orr	r4, r4, r2
   21490:	orr	r5, r5, r3
   21494:	mov	r2, r4
   21498:	mov	r3, r5
   2149c:	ldrb	ip, [r0, #11]
   214a0:	str	ip, [sp, #356]	; 0x164
   214a4:	mov	ip, #0
   214a8:	str	ip, [sp, #352]	; 0x160
   214ac:	add	ip, sp, #352	; 0x160
   214b0:	ldrd	r4, [ip]
   214b4:	orr	r4, r4, r2
   214b8:	orr	r5, r5, r3
   214bc:	mov	r2, r4
   214c0:	mov	r3, r5
   214c4:	ldrb	r4, [r0, #10]
   214c8:	lsl	ip, r4, #8
   214cc:	str	ip, [sp, #276]	; 0x114
   214d0:	mov	ip, #0
   214d4:	str	ip, [sp, #272]	; 0x110
   214d8:	add	ip, sp, #272	; 0x110
   214dc:	ldrd	r4, [ip]
   214e0:	orr	r4, r4, r2
   214e4:	orr	r5, r5, r3
   214e8:	mov	r2, r4
   214ec:	mov	r3, r5
   214f0:	ldrb	r4, [r0, #9]
   214f4:	lsl	ip, r4, #16
   214f8:	str	ip, [sp, #236]	; 0xec
   214fc:	mov	ip, #0
   21500:	str	ip, [sp, #232]	; 0xe8
   21504:	ldrd	r4, [sp, #232]	; 0xe8
   21508:	orr	r4, r4, r2
   2150c:	orr	r5, r5, r3
   21510:	mov	r2, r4
   21514:	mov	r3, r5
   21518:	ldrb	r4, [r0, #8]
   2151c:	lsl	ip, r4, #24
   21520:	str	ip, [sp, #204]	; 0xcc
   21524:	mov	ip, #0
   21528:	str	ip, [sp, #200]	; 0xc8
   2152c:	ldrd	r4, [sp, #200]	; 0xc8
   21530:	orr	r4, r4, r2
   21534:	orr	r5, r5, r3
   21538:	mov	r2, r4
   2153c:	mov	r3, r5
   21540:	add	r5, pc, #616	; 0x268
   21544:	ldrd	r4, [r5]
   21548:	cmp	r3, r5
   2154c:	cmpeq	r2, r4
   21550:	bne	21820 <_start@@Base+0xc280>
   21554:	add	r5, r0, #16
   21558:	sub	r4, sl, r5
   2155c:	cmp	r4, #8
   21560:	bls	21a0c <_start@@Base+0xc46c>
   21564:	ldrb	r2, [r0, #23]
   21568:	mov	r3, #0
   2156c:	ldrb	r6, [r0, #22]
   21570:	lsr	r1, r6, #24
   21574:	str	r1, [sp, #604]	; 0x25c
   21578:	lsl	r1, r6, #8
   2157c:	str	r1, [sp, #600]	; 0x258
   21580:	add	r1, sp, #600	; 0x258
   21584:	ldrd	r6, [r1]
   21588:	orr	r6, r6, r2
   2158c:	orr	r7, r7, r3
   21590:	mov	r2, r6
   21594:	mov	r3, r7
   21598:	ldrb	r6, [r0, #21]
   2159c:	lsr	r1, r6, #16
   215a0:	str	r1, [sp, #572]	; 0x23c
   215a4:	lsl	r1, r6, #16
   215a8:	str	r1, [sp, #568]	; 0x238
   215ac:	add	r1, sp, #568	; 0x238
   215b0:	ldrd	r6, [r1]
   215b4:	orr	r6, r6, r2
   215b8:	orr	r7, r7, r3
   215bc:	mov	r2, r6
   215c0:	mov	r3, r7
   215c4:	ldrb	r6, [r0, #20]
   215c8:	lsr	r1, r6, #8
   215cc:	str	r1, [sp, #508]	; 0x1fc
   215d0:	lsl	r1, r6, #24
   215d4:	str	r1, [sp, #504]	; 0x1f8
   215d8:	add	r1, sp, #504	; 0x1f8
   215dc:	ldrd	r6, [r1]
   215e0:	orr	r6, r6, r2
   215e4:	orr	r7, r7, r3
   215e8:	mov	r2, r6
   215ec:	mov	r3, r7
   215f0:	ldrb	r1, [r0, #19]
   215f4:	str	r1, [sp, #524]	; 0x20c
   215f8:	mov	r1, #0
   215fc:	str	r1, [sp, #520]	; 0x208
   21600:	add	r1, sp, #520	; 0x208
   21604:	ldrd	r6, [r1]
   21608:	orr	r6, r6, r2
   2160c:	orr	r7, r7, r3
   21610:	mov	r2, r6
   21614:	mov	r3, r7
   21618:	ldrb	r6, [r0, #18]
   2161c:	lsl	r1, r6, #8
   21620:	str	r1, [sp, #476]	; 0x1dc
   21624:	mov	r1, #0
   21628:	str	r1, [sp, #472]	; 0x1d8
   2162c:	add	r1, sp, #472	; 0x1d8
   21630:	ldrd	r6, [r1]
   21634:	orr	r6, r6, r2
   21638:	orr	r7, r7, r3
   2163c:	mov	r2, r6
   21640:	mov	r3, r7
   21644:	ldrb	r6, [r0, #17]
   21648:	lsl	r1, r6, #16
   2164c:	str	r1, [sp, #460]	; 0x1cc
   21650:	mov	r1, #0
   21654:	str	r1, [sp, #456]	; 0x1c8
   21658:	add	r1, sp, #456	; 0x1c8
   2165c:	ldrd	r6, [r1]
   21660:	orr	r6, r6, r2
   21664:	orr	r7, r7, r3
   21668:	mov	r2, r6
   2166c:	mov	r3, r7
   21670:	ldrb	r6, [r0, #16]
   21674:	add	r1, pc, #316	; 0x13c
   21678:	ldrd	r0, [r1]
   2167c:	lsl	ip, r6, #24
   21680:	str	ip, [sp, #404]	; 0x194
   21684:	mov	ip, #0
   21688:	str	ip, [sp, #400]	; 0x190
   2168c:	add	ip, sp, #400	; 0x190
   21690:	ldrd	r6, [ip]
   21694:	orr	r6, r6, r2
   21698:	orr	r7, r7, r3
   2169c:	mov	r2, r6
   216a0:	mov	r3, r7
   216a4:	ldr	r6, [pc, #292]	; 217d0 <_start@@Base+0xc230>
   216a8:	mvn	r7, #0
   216ac:	and	r7, r7, r3
   216b0:	and	r6, r6, r2
   216b4:	cmp	r7, r1
   216b8:	cmpeq	r6, r0
   216bc:	beq	21a90 <_start@@Base+0xc4f0>
   216c0:	add	r1, pc, #248	; 0xf8
   216c4:	ldrd	r0, [r1]
   216c8:	and	r2, r2, #-16777216	; 0xff000000
   216cc:	cmp	r3, r1
   216d0:	cmpeq	r2, r0
   216d4:	movne	r3, #1
   216d8:	moveq	r3, #0
   216dc:	cmp	r4, #5
   216e0:	orrle	r3, r3, #1
   216e4:	cmp	r3, #0
   216e8:	beq	23038 <_start@@Base+0xda98>
   216ec:	add	r3, pc, #212	; 0xd4
   216f0:	ldrd	r2, [r3]
   216f4:	cmp	r7, r3
   216f8:	cmpeq	r6, r2
   216fc:	bne	21708 <_start@@Base+0xc168>
   21700:	cmp	r4, #6
   21704:	bgt	22498 <_start@@Base+0xcef8>
   21708:	mov	r1, r5
   2170c:	mov	r2, sl
   21710:	mov	r0, fp
   21714:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   21718:	mov	r9, r0
   2171c:	sub	r3, sl, r9
   21720:	cmp	r3, #1
   21724:	ble	21738 <_start@@Base+0xc198>
   21728:	ldrb	r3, [r9]
   2172c:	cmp	r3, #32
   21730:	bhi	2174c <_start@@Base+0xc1ac>
   21734:	beq	21974 <_start@@Base+0xc3d4>
   21738:	mov	r1, r9
   2173c:	mov	r2, sl
   21740:	mov	r0, fp
   21744:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   21748:	mov	r9, r0
   2174c:	cmp	sl, r9
   21750:	beq	2198c <_start@@Base+0xc3ec>
   21754:	ldrb	r3, [r9]
   21758:	cmp	r3, #44	; 0x2c
   2175c:	beq	219bc <_start@@Base+0xc41c>
   21760:	mov	r3, #0
   21764:	str	r3, [sp, #668]	; 0x29c
   21768:	ldrb	r3, [r9]
   2176c:	cmp	r3, #125	; 0x7d
   21770:	beq	2193c <_start@@Base+0xc39c>
   21774:	mov	r3, #10
   21778:	mov	r1, r9
   2177c:	mov	r2, sl
   21780:	mov	r0, fp
   21784:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   21788:	ldr	r3, [sp, #668]	; 0x29c
   2178c:	cmp	r3, #0
   21790:	bne	21290 <_start@@Base+0xbcf0>
   21794:	mov	r6, r0
   21798:	ldr	r3, [fp, #24]
   2179c:	cmp	r3, #0
   217a0:	beq	219a4 <_start@@Base+0xc404>
   217a4:	b	217d8 <_start@@Base+0xc238>
   217a8:	bvs	1cfd568 <__bss_end__@@Base+0x1ca51ac>
   217ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   217b0:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   217b4:	rsbsvc	r6, r2, r6, ror #10
   217b8:	ldrvs	r0, [r2, -r0]!
   217bc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   217c0:	strvs	r0, [r0, -r0]
   217c4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   217c8:	ldrvs	r0, [r3, -r0]!
   217cc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   217d0:			; <UNDEFINED> instruction: 0xffff0000
   217d4:	muleq	r5, r8, r2
   217d8:	mov	r1, r6
   217dc:	mov	r3, #33	; 0x21
   217e0:	mov	r2, sl
   217e4:	mov	r0, fp
   217e8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   217ec:	ldr	r3, [sp, #660]	; 0x294
   217f0:	cmp	r3, #0
   217f4:	mov	r6, r0
   217f8:	beq	2243c <_start@@Base+0xce9c>
   217fc:	mov	r1, #0
   21800:	ldr	r0, [fp]
   21804:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   21808:	cmp	r0, #0
   2180c:	beq	2243c <_start@@Base+0xce9c>
   21810:	ldr	r3, [sp, #660]	; 0x294
   21814:	str	r3, [r0]
   21818:	b	20f3c <_start@@Base+0xb99c>
   2181c:	mov	r1, r0
   21820:	mov	r2, sl
   21824:	mov	r0, fp
   21828:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   2182c:	mov	r9, r0
   21830:	b	2171c <_start@@Base+0xc17c>
   21834:	sub	r3, r3, #1
   21838:	cmp	r3, #7
   2183c:	ldrls	pc, [pc, r3, lsl #2]
   21840:	b	2181c <_start@@Base+0xc27c>
   21844:	andeq	r1, r2, ip, lsr #17
   21848:	andeq	r1, r2, r0, lsr #17
   2184c:	muleq	r2, r4, r8
   21850:	andeq	r1, r2, r8, lsl #17
   21854:	andeq	r1, r2, ip, ror r8
   21858:	andeq	r1, r2, r0, ror r8
   2185c:	andeq	r1, r2, r4, ror #16
   21860:	andeq	r1, r2, ip, asr #5
   21864:	mov	r2, #0
   21868:	mov	r3, #0
   2186c:	b	212d4 <_start@@Base+0xbd34>
   21870:	mov	r2, #0
   21874:	mov	r3, #0
   21878:	b	21300 <_start@@Base+0xbd60>
   2187c:	mov	r2, #0
   21880:	mov	r3, #0
   21884:	b	21328 <_start@@Base+0xbd88>
   21888:	mov	r2, #0
   2188c:	mov	r3, #0
   21890:	b	21350 <_start@@Base+0xbdb0>
   21894:	mov	r2, #0
   21898:	mov	r3, #0
   2189c:	b	21374 <_start@@Base+0xbdd4>
   218a0:	mov	r2, #0
   218a4:	mov	r3, #0
   218a8:	b	2139c <_start@@Base+0xbdfc>
   218ac:	mov	r2, #0
   218b0:	mov	r3, #0
   218b4:	b	213c4 <_start@@Base+0xbe24>
   218b8:	sub	r3, r3, #1
   218bc:	cmp	r3, #7
   218c0:	ldrls	pc, [pc, r3, lsl #2]
   218c4:	b	21820 <_start@@Base+0xc280>
   218c8:	andeq	r1, r2, r0, lsr r9
   218cc:	andeq	r1, r2, r4, lsr #18
   218d0:	andeq	r1, r2, r8, lsl r9
   218d4:	andeq	r1, r2, ip, lsl #18
   218d8:	andeq	r1, r2, r0, lsl #18
   218dc:	strdeq	r1, [r2], -r4
   218e0:	andeq	r1, r2, r8, ror #17
   218e4:	andeq	r1, r2, r0, lsl r4
   218e8:	mov	r2, #0
   218ec:	mov	r3, #0
   218f0:	b	21418 <_start@@Base+0xbe78>
   218f4:	mov	r2, #0
   218f8:	mov	r3, #0
   218fc:	b	21444 <_start@@Base+0xbea4>
   21900:	mov	r2, #0
   21904:	mov	r3, #0
   21908:	b	21470 <_start@@Base+0xbed0>
   2190c:	mov	r2, #0
   21910:	mov	r3, #0
   21914:	b	2149c <_start@@Base+0xbefc>
   21918:	mov	r2, #0
   2191c:	mov	r3, #0
   21920:	b	214c4 <_start@@Base+0xbf24>
   21924:	mov	r2, #0
   21928:	mov	r3, #0
   2192c:	b	214f0 <_start@@Base+0xbf50>
   21930:	mov	r2, #0
   21934:	mov	r3, #0
   21938:	b	21518 <_start@@Base+0xbf78>
   2193c:	add	r0, r9, #1
   21940:	sub	r3, sl, r0
   21944:	cmp	r3, #1
   21948:	ble	2195c <_start@@Base+0xc3bc>
   2194c:	ldrb	r3, [r9, #1]
   21950:	cmp	r3, #32
   21954:	bhi	21794 <_start@@Base+0xc1f4>
   21958:	beq	22398 <_start@@Base+0xcdf8>
   2195c:	mov	r1, r0
   21960:	mov	r2, sl
   21964:	mov	r0, fp
   21968:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   2196c:	ldr	r3, [sp, #668]	; 0x29c
   21970:	b	21288 <_start@@Base+0xbce8>
   21974:	ldrb	r3, [r9, #1]
   21978:	cmp	r3, #32
   2197c:	addhi	r9, r9, #1
   21980:	bls	21738 <_start@@Base+0xc198>
   21984:	cmp	sl, r9
   21988:	bne	21754 <_start@@Base+0xc1b4>
   2198c:	mov	r3, #0
   21990:	str	r3, [sp, #668]	; 0x29c
   21994:	ldr	r3, [fp, #24]
   21998:	mov	r6, sl
   2199c:	cmp	r3, #0
   219a0:	bne	217d8 <_start@@Base+0xc238>
   219a4:	ldr	r0, [fp]
   219a8:	bl	292bc <flatcc_builder_end_table@@Base>
   219ac:	cmp	r0, #0
   219b0:	str	r0, [sp, #660]	; 0x294
   219b4:	beq	217d8 <_start@@Base+0xc238>
   219b8:	b	217fc <_start@@Base+0xc25c>
   219bc:	add	r0, r9, #1
   219c0:	sub	r3, sl, r0
   219c4:	cmp	r3, #1
   219c8:	ble	219dc <_start@@Base+0xc43c>
   219cc:	ldrb	r3, [r9, #1]
   219d0:	cmp	r3, #32
   219d4:	bhi	219ec <_start@@Base+0xc44c>
   219d8:	beq	22eb8 <_start@@Base+0xd918>
   219dc:	mov	r1, r0
   219e0:	mov	r2, sl
   219e4:	mov	r0, fp
   219e8:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   219ec:	cmp	sl, r0
   219f0:	beq	22ed0 <_start@@Base+0xd930>
   219f4:	ldrb	r3, [r0]
   219f8:	cmp	r3, #125	; 0x7d
   219fc:	beq	23974 <_start@@Base+0xe3d4>
   21a00:	mov	r3, #1
   21a04:	str	r3, [sp, #668]	; 0x29c
   21a08:	b	21290 <_start@@Base+0xbcf0>
   21a0c:	sub	r3, r4, #1
   21a10:	cmp	r3, #7
   21a14:	ldrls	pc, [pc, r3, lsl #2]
   21a18:	b	21708 <_start@@Base+0xc168>
   21a1c:	andeq	r1, r2, r4, lsl #21
   21a20:	andeq	r1, r2, r8, ror sl
   21a24:	andeq	r1, r2, ip, ror #20
   21a28:	andeq	r1, r2, r0, ror #20
   21a2c:	andeq	r1, r2, r4, asr sl
   21a30:	andeq	r1, r2, r8, asr #20
   21a34:	andeq	r1, r2, ip, lsr sl
   21a38:	andeq	r1, r2, r4, ror #10
   21a3c:	mov	r2, #0
   21a40:	mov	r3, #0
   21a44:	b	2156c <_start@@Base+0xbfcc>
   21a48:	mov	r2, #0
   21a4c:	mov	r3, #0
   21a50:	b	21598 <_start@@Base+0xbff8>
   21a54:	mov	r2, #0
   21a58:	mov	r3, #0
   21a5c:	b	215c4 <_start@@Base+0xc024>
   21a60:	mov	r2, #0
   21a64:	mov	r3, #0
   21a68:	b	215f0 <_start@@Base+0xc050>
   21a6c:	mov	r2, #0
   21a70:	mov	r3, #0
   21a74:	b	21618 <_start@@Base+0xc078>
   21a78:	mov	r2, #0
   21a7c:	mov	r3, #0
   21a80:	b	21644 <_start@@Base+0xc0a4>
   21a84:	mov	r2, #0
   21a88:	mov	r3, #0
   21a8c:	b	21670 <_start@@Base+0xc0d0>
   21a90:	cmp	r4, #6
   21a94:	ble	21708 <_start@@Base+0xc168>
   21a98:	mov	r3, #6
   21a9c:	mov	r2, sl
   21aa0:	mov	r1, r5
   21aa4:	mov	r0, fp
   21aa8:	bl	18840 <_start@@Base+0x32a0>
   21aac:	cmp	r5, r0
   21ab0:	mov	r9, r0
   21ab4:	beq	21708 <_start@@Base+0xc168>
   21ab8:	mov	r1, #2
   21abc:	ldr	r0, [fp]
   21ac0:	bl	2887c <flatcc_builder_start_table@@Base>
   21ac4:	cmp	r0, #0
   21ac8:	bne	21e88 <_start@@Base+0xc8e8>
   21acc:	mov	r1, r9
   21ad0:	add	r3, sp, #672	; 0x2a0
   21ad4:	mov	r2, sl
   21ad8:	mov	r0, fp
   21adc:	bl	1878c <_start@@Base+0x31ec>
   21ae0:	mov	r6, #0
   21ae4:	ldr	r8, [pc, #-792]	; 217d4 <_start@@Base+0xc234>
   21ae8:	ldr	r3, [sp, #672]	; 0x2a0
   21aec:	mov	r5, r6
   21af0:	mov	r9, fp
   21af4:	mov	r7, sl
   21af8:	cmp	r3, #0
   21afc:	beq	21e70 <_start@@Base+0xc8d0>
   21b00:	mov	r1, r0
   21b04:	cmp	r7, r1
   21b08:	beq	21ea4 <_start@@Base+0xc904>
   21b0c:	ldrb	r3, [r1]
   21b10:	cmp	r3, #34	; 0x22
   21b14:	moveq	r3, #0
   21b18:	addeq	r1, r1, #1
   21b1c:	streq	r3, [r9, #12]
   21b20:	beq	21b34 <_start@@Base+0xc594>
   21b24:	cmp	r3, #46	; 0x2e
   21b28:	movne	r3, #1
   21b2c:	strne	r3, [r9, #12]
   21b30:	beq	221c4 <_start@@Base+0xcc24>
   21b34:	sub	r3, r7, r1
   21b38:	cmp	r3, #8
   21b3c:	bls	21eb8 <_start@@Base+0xc918>
   21b40:	ldrb	sl, [r1, #7]
   21b44:	mov	fp, #0
   21b48:	ldrb	r2, [r1, #6]
   21b4c:	lsl	r3, r2, #8
   21b50:	str	r3, [sp, #336]	; 0x150
   21b54:	add	r3, sp, #336	; 0x150
   21b58:	lsr	r0, r2, #24
   21b5c:	str	r0, [sp, #340]	; 0x154
   21b60:	ldrd	r2, [r3]
   21b64:	orr	r2, r2, sl
   21b68:	orr	r3, r3, fp
   21b6c:	ldrb	sl, [r1, #5]
   21b70:	lsr	r0, sl, #16
   21b74:	str	r0, [sp, #212]	; 0xd4
   21b78:	lsl	r0, sl, #16
   21b7c:	str	r0, [sp, #208]	; 0xd0
   21b80:	ldrd	sl, [sp, #208]	; 0xd0
   21b84:	orr	sl, sl, r2
   21b88:	orr	fp, fp, r3
   21b8c:	mov	r2, sl
   21b90:	mov	r3, fp
   21b94:	ldrb	sl, [r1, #4]
   21b98:	lsr	r0, sl, #8
   21b9c:	str	r0, [sp, #140]	; 0x8c
   21ba0:	lsl	r0, sl, #24
   21ba4:	str	r0, [sp, #136]	; 0x88
   21ba8:	ldrd	sl, [sp, #136]	; 0x88
   21bac:	orr	sl, sl, r2
   21bb0:	orr	fp, fp, r3
   21bb4:	mov	r2, sl
   21bb8:	mov	r3, fp
   21bbc:	ldrb	r0, [r1, #3]
   21bc0:	str	r0, [sp, #156]	; 0x9c
   21bc4:	mov	r0, #0
   21bc8:	str	r0, [sp, #152]	; 0x98
   21bcc:	ldrd	sl, [sp, #152]	; 0x98
   21bd0:	orr	sl, sl, r2
   21bd4:	orr	fp, fp, r3
   21bd8:	mov	r2, sl
   21bdc:	mov	r3, fp
   21be0:	ldrb	sl, [r1, #2]
   21be4:	lsl	r0, sl, #8
   21be8:	str	r0, [sp, #116]	; 0x74
   21bec:	mov	r0, #0
   21bf0:	str	r0, [sp, #112]	; 0x70
   21bf4:	ldrd	sl, [sp, #112]	; 0x70
   21bf8:	orr	sl, sl, r2
   21bfc:	orr	fp, fp, r3
   21c00:	mov	r2, sl
   21c04:	mov	r3, fp
   21c08:	ldrb	sl, [r1, #1]
   21c0c:	lsl	r0, sl, #16
   21c10:	str	r0, [sp, #92]	; 0x5c
   21c14:	mov	r0, #0
   21c18:	str	r0, [sp, #88]	; 0x58
   21c1c:	ldrd	sl, [sp, #88]	; 0x58
   21c20:	orr	sl, sl, r2
   21c24:	orr	fp, fp, r3
   21c28:	mov	r2, sl
   21c2c:	mov	r3, fp
   21c30:	ldrb	sl, [r1]
   21c34:	lsl	r0, sl, #24
   21c38:	str	r0, [sp, #60]	; 0x3c
   21c3c:	mov	r0, #0
   21c40:	str	r0, [sp, #56]	; 0x38
   21c44:	ldrd	sl, [sp, #56]	; 0x38
   21c48:	orr	sl, sl, r2
   21c4c:	orr	fp, fp, r3
   21c50:	mov	r2, sl
   21c54:	mov	r3, fp
   21c58:	add	fp, pc, #920	; 0x398
   21c5c:	ldrd	sl, [fp]
   21c60:	cmp	r3, fp
   21c64:	cmpeq	r2, sl
   21c68:	bne	21ea4 <_start@@Base+0xc904>
   21c6c:	add	r4, r1, #8
   21c70:	sub	r0, r7, r4
   21c74:	cmp	r0, #8
   21c78:	bls	21f3c <_start@@Base+0xc99c>
   21c7c:	ldrb	sl, [r1, #15]
   21c80:	mov	fp, #0
   21c84:	ldrb	r2, [r1, #14]
   21c88:	lsl	r3, r2, #8
   21c8c:	str	r3, [sp, #512]	; 0x200
   21c90:	add	r3, sp, #512	; 0x200
   21c94:	lsr	ip, r2, #24
   21c98:	str	ip, [sp, #516]	; 0x204
   21c9c:	ldrd	r2, [r3]
   21ca0:	orr	r2, r2, sl
   21ca4:	orr	r3, r3, fp
   21ca8:	mov	sl, r2
   21cac:	mov	fp, r3
   21cb0:	ldrb	r2, [r1, #13]
   21cb4:	lsl	r3, r2, #16
   21cb8:	str	r3, [sp, #432]	; 0x1b0
   21cbc:	add	r3, sp, #432	; 0x1b0
   21cc0:	lsr	ip, r2, #16
   21cc4:	str	ip, [sp, #436]	; 0x1b4
   21cc8:	ldrd	r2, [r3]
   21ccc:	orr	r2, r2, sl
   21cd0:	orr	r3, r3, fp
   21cd4:	mov	sl, r2
   21cd8:	mov	fp, r3
   21cdc:	ldrb	r2, [r1, #12]
   21ce0:	lsl	r3, r2, #24
   21ce4:	str	r3, [sp, #344]	; 0x158
   21ce8:	add	r3, sp, #344	; 0x158
   21cec:	lsr	ip, r2, #8
   21cf0:	str	ip, [sp, #348]	; 0x15c
   21cf4:	ldrd	r2, [r3]
   21cf8:	orr	r2, r2, sl
   21cfc:	orr	r3, r3, fp
   21d00:	ldrb	ip, [r1, #11]
   21d04:	str	ip, [sp, #372]	; 0x174
   21d08:	mov	ip, #0
   21d0c:	str	ip, [sp, #368]	; 0x170
   21d10:	add	ip, sp, #368	; 0x170
   21d14:	ldrd	sl, [ip]
   21d18:	orr	sl, sl, r2
   21d1c:	orr	fp, fp, r3
   21d20:	mov	r2, sl
   21d24:	mov	r3, fp
   21d28:	ldrb	sl, [r1, #10]
   21d2c:	lsl	ip, sl, #8
   21d30:	str	ip, [sp, #292]	; 0x124
   21d34:	mov	ip, #0
   21d38:	str	ip, [sp, #288]	; 0x120
   21d3c:	add	ip, sp, #288	; 0x120
   21d40:	ldrd	sl, [ip]
   21d44:	orr	sl, sl, r2
   21d48:	orr	fp, fp, r3
   21d4c:	mov	r2, sl
   21d50:	mov	r3, fp
   21d54:	ldrb	sl, [r1, #9]
   21d58:	lsl	ip, sl, #16
   21d5c:	str	ip, [sp, #260]	; 0x104
   21d60:	mov	ip, #0
   21d64:	str	ip, [sp, #256]	; 0x100
   21d68:	add	ip, sp, #256	; 0x100
   21d6c:	ldrd	sl, [ip]
   21d70:	orr	sl, sl, r2
   21d74:	orr	fp, fp, r3
   21d78:	mov	r2, sl
   21d7c:	mov	r3, fp
   21d80:	ldrb	sl, [r1, #8]
   21d84:	lsl	r1, sl, #24
   21d88:	str	r1, [sp, #172]	; 0xac
   21d8c:	mov	r1, #0
   21d90:	str	r1, [sp, #168]	; 0xa8
   21d94:	ldrd	sl, [sp, #168]	; 0xa8
   21d98:	orr	sl, sl, r2
   21d9c:	orr	fp, fp, r3
   21da0:	add	r3, sp, #384	; 0x180
   21da4:	strd	sl, [r3]
   21da8:	add	r3, pc, #592	; 0x250
   21dac:	ldrd	r2, [r3]
   21db0:	bic	sl, sl, #255	; 0xff
   21db4:	cmp	fp, r3
   21db8:	cmpeq	sl, r2
   21dbc:	beq	2207c <_start@@Base+0xcadc>
   21dc0:	add	r1, sp, #384	; 0x180
   21dc4:	add	r3, pc, #572	; 0x23c
   21dc8:	ldrd	r2, [r3]
   21dcc:	ldrd	sl, [r1]
   21dd0:	cmp	fp, r3
   21dd4:	cmpeq	sl, r2
   21dd8:	bne	21de4 <_start@@Base+0xc844>
   21ddc:	cmp	r0, #8
   21de0:	bgt	2224c <_start@@Base+0xccac>
   21de4:	mov	r1, r4
   21de8:	mov	r2, r7
   21dec:	mov	r0, r9
   21df0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   21df4:	mov	r4, r0
   21df8:	sub	r3, r7, r4
   21dfc:	cmp	r3, #1
   21e00:	ble	21e14 <_start@@Base+0xc874>
   21e04:	ldrb	r3, [r4]
   21e08:	cmp	r3, #32
   21e0c:	bhi	21e28 <_start@@Base+0xc888>
   21e10:	beq	22018 <_start@@Base+0xca78>
   21e14:	mov	r1, r4
   21e18:	mov	r2, r7
   21e1c:	mov	r0, r9
   21e20:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   21e24:	mov	r4, r0
   21e28:	cmp	r7, r4
   21e2c:	beq	22030 <_start@@Base+0xca90>
   21e30:	ldrb	r3, [r4]
   21e34:	cmp	r3, #44	; 0x2c
   21e38:	beq	2215c <_start@@Base+0xcbbc>
   21e3c:	mov	r3, #0
   21e40:	str	r3, [sp, #672]	; 0x2a0
   21e44:	ldrb	r3, [r4]
   21e48:	cmp	r3, #125	; 0x7d
   21e4c:	beq	21fc0 <_start@@Base+0xca20>
   21e50:	mov	r3, #10
   21e54:	mov	r1, r4
   21e58:	mov	r2, r7
   21e5c:	mov	r0, r9
   21e60:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   21e64:	ldr	r3, [sp, #672]	; 0x2a0
   21e68:	cmp	r3, #0
   21e6c:	bne	21b00 <_start@@Base+0xc560>
   21e70:	mov	fp, r9
   21e74:	mov	sl, r7
   21e78:	mov	r9, r0
   21e7c:	ldr	r3, [fp, #24]
   21e80:	cmp	r3, #0
   21e84:	beq	22050 <_start@@Base+0xcab0>
   21e88:	mov	r1, r9
   21e8c:	mov	r3, #33	; 0x21
   21e90:	mov	r2, sl
   21e94:	mov	r0, fp
   21e98:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   21e9c:	mov	r6, r0
   21ea0:	b	217d8 <_start@@Base+0xc238>
   21ea4:	mov	r2, r7
   21ea8:	mov	r0, r9
   21eac:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   21eb0:	mov	r4, r0
   21eb4:	b	21df8 <_start@@Base+0xc858>
   21eb8:	sub	r3, r3, #1
   21ebc:	cmp	r3, #7
   21ec0:	ldrls	pc, [pc, r3, lsl #2]
   21ec4:	b	21ea4 <_start@@Base+0xc904>
   21ec8:	andeq	r1, r2, r0, lsr pc
   21ecc:	andeq	r1, r2, r4, lsr #30
   21ed0:	andeq	r1, r2, r8, lsl pc
   21ed4:	andeq	r1, r2, ip, lsl #30
   21ed8:	andeq	r1, r2, r0, lsl #30
   21edc:	strdeq	r1, [r2], -r4
   21ee0:	andeq	r1, r2, r8, ror #29
   21ee4:	andeq	r1, r2, r0, asr #22
   21ee8:	mov	sl, r6
   21eec:	mov	fp, r5
   21ef0:	b	21b48 <_start@@Base+0xc5a8>
   21ef4:	mov	r2, r6
   21ef8:	mov	r3, r5
   21efc:	b	21b6c <_start@@Base+0xc5cc>
   21f00:	mov	r2, r6
   21f04:	mov	r3, r5
   21f08:	b	21b94 <_start@@Base+0xc5f4>
   21f0c:	mov	r2, r6
   21f10:	mov	r3, r5
   21f14:	b	21bbc <_start@@Base+0xc61c>
   21f18:	mov	r2, r6
   21f1c:	mov	r3, r5
   21f20:	b	21be0 <_start@@Base+0xc640>
   21f24:	mov	r2, r6
   21f28:	mov	r3, r5
   21f2c:	b	21c08 <_start@@Base+0xc668>
   21f30:	mov	r2, r6
   21f34:	mov	r3, r5
   21f38:	b	21c30 <_start@@Base+0xc690>
   21f3c:	sub	r3, r0, #1
   21f40:	cmp	r3, #7
   21f44:	ldrls	pc, [pc, r3, lsl #2]
   21f48:	b	21de4 <_start@@Base+0xc844>
   21f4c:			; <UNDEFINED> instruction: 0x00021fb4
   21f50:	andeq	r1, r2, r8, lsr #31
   21f54:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   21f58:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   21f5c:	andeq	r1, r2, r4, lsl #31
   21f60:	andeq	r1, r2, r8, ror pc
   21f64:	andeq	r1, r2, ip, ror #30
   21f68:	andeq	r1, r2, ip, ror ip
   21f6c:	mov	sl, r6
   21f70:	mov	fp, r5
   21f74:	b	21c84 <_start@@Base+0xc6e4>
   21f78:	mov	sl, r6
   21f7c:	mov	fp, r5
   21f80:	b	21cb0 <_start@@Base+0xc710>
   21f84:	mov	sl, r6
   21f88:	mov	fp, r5
   21f8c:	b	21cdc <_start@@Base+0xc73c>
   21f90:	mov	r2, r6
   21f94:	mov	r3, r5
   21f98:	b	21d00 <_start@@Base+0xc760>
   21f9c:	mov	r2, r6
   21fa0:	mov	r3, r5
   21fa4:	b	21d28 <_start@@Base+0xc788>
   21fa8:	mov	r2, r6
   21fac:	mov	r3, r5
   21fb0:	b	21d54 <_start@@Base+0xc7b4>
   21fb4:	mov	r2, r6
   21fb8:	mov	r3, r5
   21fbc:	b	21d80 <_start@@Base+0xc7e0>
   21fc0:	add	r0, r4, #1
   21fc4:	sub	r3, r7, r0
   21fc8:	cmp	r3, #1
   21fcc:	ble	21fe0 <_start@@Base+0xca40>
   21fd0:	ldrb	r3, [r4, #1]
   21fd4:	cmp	r3, #32
   21fd8:	bhi	21e70 <_start@@Base+0xc8d0>
   21fdc:	beq	223ac <_start@@Base+0xce0c>
   21fe0:	mov	r1, r0
   21fe4:	mov	r2, r7
   21fe8:	mov	r0, r9
   21fec:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   21ff0:	ldr	r3, [sp, #672]	; 0x2a0
   21ff4:	b	21af8 <_start@@Base+0xc558>
   21ff8:	svcpl	0x00626262
   21ffc:	cmnvs	r1, r1, ror #2
   22000:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   22004:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22008:	cmnvs	r2, pc, asr r4
   2200c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22010:	andeq	r3, r2, r8, lsr sp
   22014:	strdeq	r8, [r5], -r8	; <UNPREDICTABLE>
   22018:	ldrb	r3, [r4, #1]
   2201c:	cmp	r3, #32
   22020:	addhi	r4, r4, #1
   22024:	bls	21e14 <_start@@Base+0xc874>
   22028:	cmp	r7, r4
   2202c:	bne	21e30 <_start@@Base+0xc890>
   22030:	mov	fp, r9
   22034:	mov	r3, #0
   22038:	str	r3, [sp, #672]	; 0x2a0
   2203c:	ldr	r3, [fp, #24]
   22040:	mov	sl, r7
   22044:	cmp	r3, #0
   22048:	mov	r9, r7
   2204c:	bne	21e88 <_start@@Base+0xc8e8>
   22050:	ldr	r0, [fp]
   22054:	bl	292bc <flatcc_builder_end_table@@Base>
   22058:	subs	r4, r0, #0
   2205c:	beq	21e88 <_start@@Base+0xc8e8>
   22060:	mov	r1, #1
   22064:	ldr	r0, [fp]
   22068:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   2206c:	cmp	r0, #0
   22070:	bne	22890 <_start@@Base+0xd2f0>
   22074:	mov	r6, r9
   22078:	b	217d8 <_start@@Base+0xc238>
   2207c:	cmp	r0, #7
   22080:	ble	21de4 <_start@@Base+0xc844>
   22084:	mov	r3, #7
   22088:	mov	r2, r7
   2208c:	mov	r1, r4
   22090:	mov	r0, r9
   22094:	bl	18840 <_start@@Base+0x32a0>
   22098:	cmp	r4, r0
   2209c:	mov	sl, r0
   220a0:	beq	21de4 <_start@@Base+0xc844>
   220a4:	ldr	r3, [sp, #168]	; 0xa8
   220a8:	cmp	r7, r0
   220ac:	str	r6, [sp, #680]	; 0x2a8
   220b0:	str	r5, [sp, #684]	; 0x2ac
   220b4:	str	r6, [sp, #688]	; 0x2b0
   220b8:	str	r5, [sp, #692]	; 0x2b4
   220bc:	str	r3, [sp, #676]	; 0x2a4
   220c0:	beq	23afc <_start@@Base+0xe55c>
   220c4:	add	r3, sp, #688	; 0x2b0
   220c8:	str	r3, [sp]
   220cc:	mov	r1, r0
   220d0:	add	r3, sp, #676	; 0x2a4
   220d4:	mov	r2, r7
   220d8:	mov	r0, r9
   220dc:	bl	31f80 <flatcc_json_parser_integer@@Base>
   220e0:	cmp	sl, r0
   220e4:	mov	r4, r0
   220e8:	beq	23afc <_start@@Base+0xe55c>
   220ec:	ldr	r1, [sp, #676]	; 0x2a4
   220f0:	add	r3, sp, #688	; 0x2b0
   220f4:	cmp	r1, #0
   220f8:	ldrd	r2, [r3]
   220fc:	beq	22380 <_start@@Base+0xcde0>
   22100:	cmp	r3, #-2147483648	; 0x80000000
   22104:	cmpeq	r2, #0
   22108:	bhi	239f8 <_start@@Base+0xe458>
   2210c:	rsbs	r2, r2, #0
   22110:	rsc	r3, r3, #0
   22114:	add	r1, sp, #680	; 0x2a8
   22118:	strd	r2, [r1]
   2211c:	orrs	r3, r2, r3
   22120:	bne	22130 <_start@@Base+0xcb90>
   22124:	ldr	r3, [r9, #8]
   22128:	tst	r3, #2
   2212c:	beq	21df8 <_start@@Base+0xc858>
   22130:	mov	r3, #8
   22134:	mov	r2, r3
   22138:	mov	r1, #0
   2213c:	ldr	r0, [r9]
   22140:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   22144:	cmp	r0, #0
   22148:	beq	23950 <_start@@Base+0xe3b0>
   2214c:	add	r3, sp, #680	; 0x2a8
   22150:	ldrd	r2, [r3]
   22154:	strd	r2, [r0]
   22158:	b	21df8 <_start@@Base+0xc858>
   2215c:	add	r1, r4, #1
   22160:	sub	r3, r7, r1
   22164:	cmp	r3, #1
   22168:	ble	2217c <_start@@Base+0xcbdc>
   2216c:	ldrb	r3, [r4, #1]
   22170:	cmp	r3, #32
   22174:	bhi	2218c <_start@@Base+0xcbec>
   22178:	beq	22f48 <_start@@Base+0xd9a8>
   2217c:	mov	r2, r7
   22180:	mov	r0, r9
   22184:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   22188:	mov	r1, r0
   2218c:	cmp	r7, r1
   22190:	beq	22f60 <_start@@Base+0xd9c0>
   22194:	ldrb	r3, [r1]
   22198:	cmp	r3, #125	; 0x7d
   2219c:	beq	239b0 <_start@@Base+0xe410>
   221a0:	mov	r3, #1
   221a4:	str	r3, [sp, #672]	; 0x2a0
   221a8:	b	21b04 <_start@@Base+0xc564>
   221ac:	mov	r1, r0
   221b0:	mov	r3, #5
   221b4:	mov	r2, sl
   221b8:	mov	r0, fp
   221bc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   221c0:	b	212c0 <_start@@Base+0xbd20>
   221c4:	mov	r3, #5
   221c8:	mov	r2, r7
   221cc:	mov	r0, r9
   221d0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   221d4:	mov	r1, r0
   221d8:	b	21b34 <_start@@Base+0xc594>
   221dc:	ldrb	r3, [r6, #1]
   221e0:	cmp	r3, #32
   221e4:	addhi	r6, r6, #1
   221e8:	bls	20f58 <_start@@Base+0xb9b8>
   221ec:	cmp	sl, r6
   221f0:	bne	20f74 <_start@@Base+0xb9d4>
   221f4:	mov	r3, sl
   221f8:	mov	sl, fp
   221fc:	mov	fp, r3
   22200:	mov	r3, #0
   22204:	str	r3, [sp, #656]	; 0x290
   22208:	ldr	r3, [sl, #24]
   2220c:	mov	r4, fp
   22210:	cmp	r3, #0
   22214:	bne	20fd0 <_start@@Base+0xba30>
   22218:	b	23aa8 <_start@@Base+0xe508>
   2221c:	sub	r3, ip, #1
   22220:	cmp	r3, #7
   22224:	ldrls	pc, [pc, r3, lsl #2]
   22228:	b	21198 <_start@@Base+0xbbf8>
   2222c:	muleq	r2, r8, sl
   22230:	muleq	r2, r0, sl
   22234:	andeq	r3, r2, r8, lsl #21
   22238:	andeq	r3, r2, r0, lsl #21
   2223c:	andeq	r3, r2, r8, ror sl
   22240:	andeq	r3, r2, r0, ror sl
   22244:	andeq	r1, r2, r0, lsl #1
   22248:	andeq	r1, r2, r0, lsl #1
   2224c:	mov	r3, #8
   22250:	mov	r2, r7
   22254:	mov	r1, r4
   22258:	mov	r0, r9
   2225c:	bl	18840 <_start@@Base+0x32a0>
   22260:	cmp	r4, r0
   22264:	mov	sl, r0
   22268:	beq	21de4 <_start@@Base+0xc844>
   2226c:	ldrd	r2, [sp, #168]	; 0xa8
   22270:	cmp	r7, r0
   22274:	str	r6, [sp, #688]	; 0x2b0
   22278:	str	r2, [sp, #676]	; 0x2a4
   2227c:	str	r5, [sp, #692]	; 0x2b4
   22280:	str	r2, [sp, #680]	; 0x2a8
   22284:	beq	23a24 <_start@@Base+0xe484>
   22288:	add	r3, sp, #688	; 0x2b0
   2228c:	str	r3, [sp]
   22290:	mov	r1, r0
   22294:	add	r3, sp, #680	; 0x2a8
   22298:	mov	r2, r7
   2229c:	mov	r0, r9
   222a0:	bl	31f80 <flatcc_json_parser_integer@@Base>
   222a4:	cmp	sl, r0
   222a8:	mov	r4, r0
   222ac:	beq	23a24 <_start@@Base+0xe484>
   222b0:	ldr	r3, [sp, #680]	; 0x2a8
   222b4:	cmp	r3, #0
   222b8:	bne	22f20 <_start@@Base+0xd980>
   222bc:	add	r3, sp, #688	; 0x2b0
   222c0:	mov	r1, #0
   222c4:	ldrd	r2, [r3]
   222c8:	mvn	r0, #0
   222cc:	cmp	r3, r1
   222d0:	cmpeq	r2, r0
   222d4:	strls	r2, [sp, #676]	; 0x2a4
   222d8:	bhi	2301c <_start@@Base+0xda7c>
   222dc:	cmp	r2, #0
   222e0:	bne	222f0 <_start@@Base+0xcd50>
   222e4:	ldr	r3, [r9, #8]
   222e8:	tst	r3, #2
   222ec:	beq	21df8 <_start@@Base+0xc858>
   222f0:	mov	r3, #4
   222f4:	mov	r2, r3
   222f8:	mov	r1, #1
   222fc:	ldr	r0, [r9]
   22300:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   22304:	cmp	r0, #0
   22308:	beq	23950 <_start@@Base+0xe3b0>
   2230c:	ldr	r3, [sp, #676]	; 0x2a4
   22310:	str	r3, [r0]
   22314:	b	21df8 <_start@@Base+0xc858>
   22318:	add	r4, r6, #1
   2231c:	sub	r3, sl, r4
   22320:	cmp	r3, #1
   22324:	ble	22338 <_start@@Base+0xcd98>
   22328:	ldrb	r3, [r6, #1]
   2232c:	cmp	r3, #32
   22330:	bhi	2234c <_start@@Base+0xcdac>
   22334:	beq	23b2c <_start@@Base+0xe58c>
   22338:	mov	r1, r4
   2233c:	mov	r2, sl
   22340:	mov	r0, fp
   22344:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   22348:	mov	r4, r0
   2234c:	cmp	sl, r4
   22350:	beq	23c6c <_start@@Base+0xe6cc>
   22354:	ldrb	r3, [r4]
   22358:	cmp	r3, #125	; 0x7d
   2235c:	beq	23b9c <_start@@Base+0xe5fc>
   22360:	cmp	sl, r4
   22364:	mov	r3, #1
   22368:	str	r3, [sp, #656]	; 0x290
   2236c:	ldreq	r5, [sp, #648]	; 0x288
   22370:	bne	20d44 <_start@@Base+0xb7a4>
   22374:	mov	r6, #0
   22378:	mov	r7, #0
   2237c:	b	20f08 <_start@@Base+0xb968>
   22380:	cmp	r2, #0
   22384:	sbcs	r1, r3, #0
   22388:	blt	23c24 <_start@@Base+0xe684>
   2238c:	add	r1, sp, #680	; 0x2a8
   22390:	strd	r2, [r1]
   22394:	b	2211c <_start@@Base+0xcb7c>
   22398:	ldrb	r3, [r9, #2]
   2239c:	cmp	r3, #32
   223a0:	bls	2195c <_start@@Base+0xc3bc>
   223a4:	add	r6, r9, #2
   223a8:	b	21798 <_start@@Base+0xc1f8>
   223ac:	ldrb	r3, [r4, #2]
   223b0:	cmp	r3, #32
   223b4:	bls	21fe0 <_start@@Base+0xca40>
   223b8:	mov	fp, r9
   223bc:	mov	sl, r7
   223c0:	add	r9, r4, #2
   223c4:	b	21e7c <_start@@Base+0xc8dc>
   223c8:	mov	r1, r4
   223cc:	mov	r3, #5
   223d0:	mov	r2, sl
   223d4:	mov	r0, fp
   223d8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   223dc:	mov	r4, r0
   223e0:	sub	r5, sl, r0
   223e4:	b	20d64 <_start@@Base+0xb7c4>
   223e8:	mov	r1, r4
   223ec:	mov	r3, #5
   223f0:	mov	r2, sl
   223f4:	mov	r0, fp
   223f8:	bl	18840 <_start@@Base+0x32a0>
   223fc:	cmp	r0, r4
   22400:	mov	r1, r0
   22404:	beq	20f28 <_start@@Base+0xb988>
   22408:	add	r3, sp, #660	; 0x294
   2240c:	mov	r2, sl
   22410:	mov	r0, fp
   22414:	bl	1a02c <_start@@Base+0x4a8c>
   22418:	ldr	r3, [sp, #660]	; 0x294
   2241c:	cmp	r3, #0
   22420:	mov	r6, r0
   22424:	beq	2243c <_start@@Base+0xce9c>
   22428:	mov	r1, #1
   2242c:	ldr	r0, [fp]
   22430:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   22434:	cmp	r0, #0
   22438:	bne	21810 <_start@@Base+0xc270>
   2243c:	mov	r3, sl
   22440:	mov	r4, r6
   22444:	mov	sl, fp
   22448:	mov	fp, r3
   2244c:	b	20fd0 <_start@@Base+0xba30>
   22450:	mov	r1, r4
   22454:	mov	r3, #7
   22458:	mov	r2, sl
   2245c:	mov	r0, fp
   22460:	bl	18840 <_start@@Base+0x32a0>
   22464:	cmp	r0, r4
   22468:	mov	r1, r0
   2246c:	beq	20ee4 <_start@@Base+0xb944>
   22470:	ldr	lr, [pc, #-1128]	; 22010 <_start@@Base+0xca70>
   22474:	ldr	ip, [sp, #664]	; 0x298
   22478:	mov	r2, #3
   2247c:	mov	r3, r8
   22480:	stm	sp, {r2, ip, lr}
   22484:	mov	r0, fp
   22488:	mov	r2, sl
   2248c:	bl	32e9c <flatcc_json_parser_union_vector@@Base>
   22490:	mov	r6, r0
   22494:	b	20f3c <_start@@Base+0xb99c>
   22498:	mov	r3, #6
   2249c:	mov	r2, sl
   224a0:	mov	r1, r5
   224a4:	mov	r0, fp
   224a8:	bl	18840 <_start@@Base+0x32a0>
   224ac:	cmp	r5, r0
   224b0:	mov	r9, r0
   224b4:	beq	21708 <_start@@Base+0xc168>
   224b8:	mov	r1, #2
   224bc:	ldr	r0, [fp]
   224c0:	bl	2887c <flatcc_builder_start_table@@Base>
   224c4:	cmp	r0, #0
   224c8:	bne	21e88 <_start@@Base+0xc8e8>
   224cc:	mov	r1, r9
   224d0:	add	r3, sp, #672	; 0x2a0
   224d4:	mov	r2, sl
   224d8:	mov	r0, fp
   224dc:	bl	1878c <_start@@Base+0x31ec>
   224e0:	mov	r6, #0
   224e4:	ldr	r8, [pc, #-1240]	; 22014 <_start@@Base+0xca74>
   224e8:	ldr	r3, [sp, #672]	; 0x2a0
   224ec:	mov	r5, r6
   224f0:	mov	r9, fp
   224f4:	mov	r7, sl
   224f8:	cmp	r3, #0
   224fc:	beq	22854 <_start@@Base+0xd2b4>
   22500:	mov	r1, r0
   22504:	cmp	r7, r1
   22508:	beq	22898 <_start@@Base+0xd2f8>
   2250c:	ldrb	r3, [r1]
   22510:	cmp	r3, #34	; 0x22
   22514:	moveq	r3, #0
   22518:	addeq	r1, r1, #1
   2251c:	streq	r3, [r9, #12]
   22520:	beq	22534 <_start@@Base+0xcf94>
   22524:	cmp	r3, #46	; 0x2e
   22528:	movne	r3, #1
   2252c:	strne	r3, [r9, #12]
   22530:	beq	22d58 <_start@@Base+0xd7b8>
   22534:	sub	r3, r7, r1
   22538:	cmp	r3, #8
   2253c:	bls	228ac <_start@@Base+0xd30c>
   22540:	ldrb	sl, [r1, #7]
   22544:	mov	fp, #0
   22548:	ldrb	r2, [r1, #6]
   2254c:	lsr	r0, r2, #24
   22550:	lsl	r3, r2, #8
   22554:	str	r0, [sp, #220]	; 0xdc
   22558:	str	r3, [sp, #216]	; 0xd8
   2255c:	ldrd	r2, [sp, #216]	; 0xd8
   22560:	orr	r2, r2, sl
   22564:	orr	r3, r3, fp
   22568:	ldrb	sl, [r1, #5]
   2256c:	lsr	r0, sl, #16
   22570:	str	r0, [sp, #124]	; 0x7c
   22574:	lsl	r0, sl, #16
   22578:	str	r0, [sp, #120]	; 0x78
   2257c:	ldrd	sl, [sp, #120]	; 0x78
   22580:	orr	sl, sl, r2
   22584:	orr	fp, fp, r3
   22588:	mov	r2, sl
   2258c:	mov	r3, fp
   22590:	ldrb	sl, [r1, #4]
   22594:	lsr	r0, sl, #8
   22598:	str	r0, [sp, #68]	; 0x44
   2259c:	lsl	r0, sl, #24
   225a0:	str	r0, [sp, #64]	; 0x40
   225a4:	ldrd	sl, [sp, #64]	; 0x40
   225a8:	orr	sl, sl, r2
   225ac:	orr	fp, fp, r3
   225b0:	mov	r2, sl
   225b4:	mov	r3, fp
   225b8:	ldrb	r0, [r1, #3]
   225bc:	str	r0, [sp, #84]	; 0x54
   225c0:	mov	r0, #0
   225c4:	str	r0, [sp, #80]	; 0x50
   225c8:	ldrd	sl, [sp, #80]	; 0x50
   225cc:	orr	sl, sl, r2
   225d0:	orr	fp, fp, r3
   225d4:	mov	r2, sl
   225d8:	mov	r3, fp
   225dc:	ldrb	sl, [r1, #2]
   225e0:	lsl	r0, sl, #8
   225e4:	str	r0, [sp, #44]	; 0x2c
   225e8:	mov	r0, #0
   225ec:	str	r0, [sp, #40]	; 0x28
   225f0:	ldrd	sl, [sp, #40]	; 0x28
   225f4:	orr	sl, sl, r2
   225f8:	orr	fp, fp, r3
   225fc:	mov	r2, sl
   22600:	mov	r3, fp
   22604:	ldrb	sl, [r1, #1]
   22608:	lsl	r0, sl, #16
   2260c:	str	r0, [sp, #36]	; 0x24
   22610:	mov	r0, #0
   22614:	str	r0, [sp, #32]
   22618:	ldrd	sl, [sp, #32]
   2261c:	orr	sl, sl, r2
   22620:	orr	fp, fp, r3
   22624:	mov	r2, sl
   22628:	mov	r3, fp
   2262c:	ldrb	sl, [r1]
   22630:	lsl	r0, sl, #24
   22634:	str	r0, [sp, #28]
   22638:	mov	r0, #0
   2263c:	str	r0, [sp, #24]
   22640:	ldrd	sl, [sp, #24]
   22644:	orr	sl, sl, r2
   22648:	orr	fp, fp, r3
   2264c:	mov	r2, sl
   22650:	mov	r3, fp
   22654:	add	fp, pc, #964	; 0x3c4
   22658:	ldrd	sl, [fp]
   2265c:	cmp	r3, fp
   22660:	cmpeq	r2, sl
   22664:	bne	22898 <_start@@Base+0xd2f8>
   22668:	add	r4, r1, #8
   2266c:	sub	r0, r7, r4
   22670:	cmp	r0, #8
   22674:	bls	22930 <_start@@Base+0xd390>
   22678:	ldrb	sl, [r1, #15]
   2267c:	mov	fp, #0
   22680:	ldrb	r2, [r1, #14]
   22684:	lsl	r3, r2, #8
   22688:	str	r3, [sp, #448]	; 0x1c0
   2268c:	add	r3, sp, #448	; 0x1c0
   22690:	lsr	ip, r2, #24
   22694:	str	ip, [sp, #452]	; 0x1c4
   22698:	ldrd	r2, [r3]
   2269c:	orr	r2, r2, sl
   226a0:	orr	r3, r3, fp
   226a4:	mov	sl, r2
   226a8:	mov	fp, r3
   226ac:	ldrb	r2, [r1, #13]
   226b0:	lsl	r3, r2, #16
   226b4:	str	r3, [sp, #296]	; 0x128
   226b8:	add	r3, sp, #296	; 0x128
   226bc:	lsr	ip, r2, #16
   226c0:	str	ip, [sp, #300]	; 0x12c
   226c4:	ldrd	r2, [r3]
   226c8:	orr	r2, r2, sl
   226cc:	orr	r3, r3, fp
   226d0:	mov	sl, r2
   226d4:	mov	fp, r3
   226d8:	ldrb	r2, [r1, #12]
   226dc:	lsr	ip, r2, #8
   226e0:	lsl	r3, r2, #24
   226e4:	str	ip, [sp, #228]	; 0xe4
   226e8:	str	r3, [sp, #224]	; 0xe0
   226ec:	ldrd	r2, [sp, #224]	; 0xe0
   226f0:	orr	r2, r2, sl
   226f4:	orr	r3, r3, fp
   226f8:	mov	sl, r2
   226fc:	mov	fp, r3
   22700:	ldrb	r3, [r1, #11]
   22704:	str	r3, [sp, #244]	; 0xf4
   22708:	mov	r3, #0
   2270c:	str	r3, [sp, #240]	; 0xf0
   22710:	ldrd	r2, [sp, #240]	; 0xf0
   22714:	orr	r2, r2, sl
   22718:	orr	r3, r3, fp
   2271c:	mov	sl, r2
   22720:	mov	fp, r3
   22724:	ldrb	r2, [r1, #10]
   22728:	lsl	r3, r2, #8
   2272c:	str	r3, [sp, #180]	; 0xb4
   22730:	mov	r3, #0
   22734:	str	r3, [sp, #176]	; 0xb0
   22738:	ldrd	r2, [sp, #176]	; 0xb0
   2273c:	orr	r2, r2, sl
   22740:	orr	r3, r3, fp
   22744:	ldrb	sl, [r1, #9]
   22748:	lsl	ip, sl, #16
   2274c:	str	ip, [sp, #164]	; 0xa4
   22750:	mov	ip, #0
   22754:	str	ip, [sp, #160]	; 0xa0
   22758:	ldrd	sl, [sp, #160]	; 0xa0
   2275c:	orr	sl, sl, r2
   22760:	orr	fp, fp, r3
   22764:	mov	r2, sl
   22768:	mov	r3, fp
   2276c:	ldrb	sl, [r1, #8]
   22770:	lsl	ip, sl, #24
   22774:	str	ip, [sp, #100]	; 0x64
   22778:	mov	ip, #0
   2277c:	str	ip, [sp, #96]	; 0x60
   22780:	ldrd	sl, [sp, #96]	; 0x60
   22784:	orr	sl, sl, r2
   22788:	orr	fp, fp, r3
   2278c:	mov	r2, sl
   22790:	mov	r3, fp
   22794:	add	fp, pc, #652	; 0x28c
   22798:	ldrd	sl, [fp]
   2279c:	cmp	r3, fp
   227a0:	cmpeq	r2, sl
   227a4:	beq	22a50 <_start@@Base+0xd4b0>
   227a8:	add	fp, pc, #640	; 0x280
   227ac:	ldrd	sl, [fp]
   227b0:	bic	r2, r2, #255	; 0xff
   227b4:	cmp	r3, fp
   227b8:	cmpeq	r2, sl
   227bc:	bne	227c8 <_start@@Base+0xd228>
   227c0:	cmp	r0, #7
   227c4:	bgt	22d70 <_start@@Base+0xd7d0>
   227c8:	mov	r1, r4
   227cc:	mov	r2, r7
   227d0:	mov	r0, r9
   227d4:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   227d8:	mov	r4, r0
   227dc:	sub	r3, r7, r4
   227e0:	cmp	r3, #1
   227e4:	ble	227f8 <_start@@Base+0xd258>
   227e8:	ldrb	r3, [r4]
   227ec:	cmp	r3, #32
   227f0:	bhi	2280c <_start@@Base+0xd26c>
   227f4:	beq	229ec <_start@@Base+0xd44c>
   227f8:	mov	r1, r4
   227fc:	mov	r2, r7
   22800:	mov	r0, r9
   22804:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   22808:	mov	r4, r0
   2280c:	cmp	r7, r4
   22810:	beq	22a04 <_start@@Base+0xd464>
   22814:	ldrb	r3, [r4]
   22818:	cmp	r3, #44	; 0x2c
   2281c:	beq	22c84 <_start@@Base+0xd6e4>
   22820:	mov	r3, #0
   22824:	str	r3, [sp, #672]	; 0x2a0
   22828:	ldrb	r3, [r4]
   2282c:	cmp	r3, #125	; 0x7d
   22830:	beq	229b4 <_start@@Base+0xd414>
   22834:	mov	r3, #10
   22838:	mov	r1, r4
   2283c:	mov	r2, r7
   22840:	mov	r0, r9
   22844:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22848:	ldr	r3, [sp, #672]	; 0x2a0
   2284c:	cmp	r3, #0
   22850:	bne	22500 <_start@@Base+0xcf60>
   22854:	mov	fp, r9
   22858:	mov	sl, r7
   2285c:	mov	r9, r0
   22860:	ldr	r3, [fp, #24]
   22864:	cmp	r3, #0
   22868:	bne	21e88 <_start@@Base+0xc8e8>
   2286c:	ldr	r0, [fp]
   22870:	bl	292bc <flatcc_builder_end_table@@Base>
   22874:	subs	r4, r0, #0
   22878:	beq	21e88 <_start@@Base+0xc8e8>
   2287c:	mov	r1, #2
   22880:	ldr	r0, [fp]
   22884:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   22888:	cmp	r0, #0
   2288c:	beq	22074 <_start@@Base+0xcad4>
   22890:	str	r4, [r0]
   22894:	b	2171c <_start@@Base+0xc17c>
   22898:	mov	r2, r7
   2289c:	mov	r0, r9
   228a0:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   228a4:	mov	r4, r0
   228a8:	b	227dc <_start@@Base+0xd23c>
   228ac:	sub	r3, r3, #1
   228b0:	cmp	r3, #7
   228b4:	ldrls	pc, [pc, r3, lsl #2]
   228b8:	b	22898 <_start@@Base+0xd2f8>
   228bc:	andeq	r2, r2, r4, lsr #18
   228c0:	andeq	r2, r2, r8, lsl r9
   228c4:	andeq	r2, r2, ip, lsl #18
   228c8:	andeq	r2, r2, r0, lsl #18
   228cc:	strdeq	r2, [r2], -r4
   228d0:	andeq	r2, r2, r8, ror #17
   228d4:	ldrdeq	r2, [r2], -ip
   228d8:	andeq	r2, r2, r0, asr #10
   228dc:	mov	sl, r6
   228e0:	mov	fp, r5
   228e4:	b	22548 <_start@@Base+0xcfa8>
   228e8:	mov	r2, r6
   228ec:	mov	r3, r5
   228f0:	b	22568 <_start@@Base+0xcfc8>
   228f4:	mov	r2, r6
   228f8:	mov	r3, r5
   228fc:	b	22590 <_start@@Base+0xcff0>
   22900:	mov	r2, r6
   22904:	mov	r3, r5
   22908:	b	225b8 <_start@@Base+0xd018>
   2290c:	mov	r2, r6
   22910:	mov	r3, r5
   22914:	b	225dc <_start@@Base+0xd03c>
   22918:	mov	r2, r6
   2291c:	mov	r3, r5
   22920:	b	22604 <_start@@Base+0xd064>
   22924:	mov	r2, r6
   22928:	mov	r3, r5
   2292c:	b	2262c <_start@@Base+0xd08c>
   22930:	sub	r3, r0, #1
   22934:	cmp	r3, #7
   22938:	ldrls	pc, [pc, r3, lsl #2]
   2293c:	b	227c8 <_start@@Base+0xd228>
   22940:	andeq	r2, r2, r8, lsr #19
   22944:	muleq	r2, ip, r9
   22948:	muleq	r2, r0, r9
   2294c:	andeq	r2, r2, r4, lsl #19
   22950:	andeq	r2, r2, r8, ror r9
   22954:	andeq	r2, r2, ip, ror #18
   22958:	andeq	r2, r2, r0, ror #18
   2295c:	andeq	r2, r2, r8, ror r6
   22960:	mov	sl, r6
   22964:	mov	fp, r5
   22968:	b	22680 <_start@@Base+0xd0e0>
   2296c:	mov	sl, r6
   22970:	mov	fp, r5
   22974:	b	226ac <_start@@Base+0xd10c>
   22978:	mov	sl, r6
   2297c:	mov	fp, r5
   22980:	b	226d8 <_start@@Base+0xd138>
   22984:	mov	sl, r6
   22988:	mov	fp, r5
   2298c:	b	22700 <_start@@Base+0xd160>
   22990:	mov	sl, r6
   22994:	mov	fp, r5
   22998:	b	22724 <_start@@Base+0xd184>
   2299c:	mov	r2, r6
   229a0:	mov	r3, r5
   229a4:	b	22744 <_start@@Base+0xd1a4>
   229a8:	mov	r2, r6
   229ac:	mov	r3, r5
   229b0:	b	2276c <_start@@Base+0xd1cc>
   229b4:	add	r0, r4, #1
   229b8:	sub	r3, r7, r0
   229bc:	cmp	r3, #1
   229c0:	ble	229d4 <_start@@Base+0xd434>
   229c4:	ldrb	r3, [r4, #1]
   229c8:	cmp	r3, #32
   229cc:	bhi	22854 <_start@@Base+0xd2b4>
   229d0:	beq	22e60 <_start@@Base+0xd8c0>
   229d4:	mov	r1, r0
   229d8:	mov	r2, r7
   229dc:	mov	r0, r9
   229e0:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   229e4:	ldr	r3, [sp, #672]	; 0x2a0
   229e8:	b	224f8 <_start@@Base+0xcf58>
   229ec:	ldrb	r3, [r4, #1]
   229f0:	cmp	r3, #32
   229f4:	addhi	r4, r4, #1
   229f8:	bls	227f8 <_start@@Base+0xd258>
   229fc:	cmp	r7, r4
   22a00:	bne	22814 <_start@@Base+0xd274>
   22a04:	mov	r3, #0
   22a08:	mov	fp, r9
   22a0c:	mov	sl, r7
   22a10:	str	r3, [sp, #672]	; 0x2a0
   22a14:	mov	r9, r7
   22a18:	b	22860 <_start@@Base+0xd2c0>
   22a1c:	nop			; (mov r0, r0)
   22a20:	svcpl	0x00626262
   22a24:	cmnvs	r1, r1, ror #2
   22a28:	cmnvs	r2, pc, asr r4
   22a2c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22a30:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   22a34:	subsvs	r7, pc, #116, 6	; 0xd0000001
   22a38:	movwvc	r0, #0
   22a3c:	cmnvc	r4, #112, 10	; 0x1c000000
   22a40:	andeq	r8, r5, r0, ror #5
   22a44:	andeq	r8, r5, ip, ror r2
   22a48:	andeq	r3, r2, r8, lsr sp
   22a4c:	andeq	r5, r1, r0, lsl #16
   22a50:	add	r4, r1, #16
   22a54:	sub	r0, r7, r4
   22a58:	cmp	r0, #8
   22a5c:	bls	22cd4 <_start@@Base+0xd734>
   22a60:	ldrb	sl, [r1, #23]
   22a64:	mov	fp, #0
   22a68:	ldrb	r2, [r1, #22]
   22a6c:	lsl	r3, r2, #8
   22a70:	str	r3, [sp, #624]	; 0x270
   22a74:	add	r3, sp, #624	; 0x270
   22a78:	lsr	ip, r2, #24
   22a7c:	str	ip, [sp, #628]	; 0x274
   22a80:	ldrd	r2, [r3]
   22a84:	orr	r2, r2, sl
   22a88:	orr	r3, r3, fp
   22a8c:	mov	sl, r2
   22a90:	mov	fp, r3
   22a94:	ldrb	r2, [r1, #21]
   22a98:	lsl	r3, r2, #16
   22a9c:	str	r3, [sp, #584]	; 0x248
   22aa0:	add	r3, sp, #584	; 0x248
   22aa4:	lsr	ip, r2, #16
   22aa8:	str	ip, [sp, #588]	; 0x24c
   22aac:	ldrd	r2, [r3]
   22ab0:	orr	r2, r2, sl
   22ab4:	orr	r3, r3, fp
   22ab8:	mov	sl, r2
   22abc:	mov	fp, r3
   22ac0:	ldrb	r2, [r1, #20]
   22ac4:	lsl	r3, r2, #24
   22ac8:	str	r3, [sp, #552]	; 0x228
   22acc:	add	r3, sp, #552	; 0x228
   22ad0:	lsr	ip, r2, #8
   22ad4:	str	ip, [sp, #556]	; 0x22c
   22ad8:	ldrd	r2, [r3]
   22adc:	orr	r2, r2, sl
   22ae0:	orr	r3, r3, fp
   22ae4:	mov	sl, r2
   22ae8:	mov	fp, r3
   22aec:	ldrb	r3, [r1, #19]
   22af0:	str	r3, [sp, #564]	; 0x234
   22af4:	mov	r3, #0
   22af8:	str	r3, [sp, #560]	; 0x230
   22afc:	add	r3, sp, #560	; 0x230
   22b00:	ldrd	r2, [r3]
   22b04:	orr	r2, r2, sl
   22b08:	orr	r3, r3, fp
   22b0c:	mov	sl, r2
   22b10:	mov	fp, r3
   22b14:	ldrb	r2, [r1, #18]
   22b18:	lsl	r3, r2, #8
   22b1c:	str	r3, [sp, #532]	; 0x214
   22b20:	mov	r3, #0
   22b24:	str	r3, [sp, #528]	; 0x210
   22b28:	add	r3, sp, #528	; 0x210
   22b2c:	ldrd	r2, [r3]
   22b30:	orr	r2, r2, sl
   22b34:	orr	r3, r3, fp
   22b38:	mov	sl, r2
   22b3c:	mov	fp, r3
   22b40:	ldrb	r2, [r1, #17]
   22b44:	lsl	r3, r2, #16
   22b48:	str	r3, [sp, #484]	; 0x1e4
   22b4c:	mov	r3, #0
   22b50:	str	r3, [sp, #480]	; 0x1e0
   22b54:	add	r3, sp, #480	; 0x1e0
   22b58:	ldrd	r2, [r3]
   22b5c:	orr	r2, r2, sl
   22b60:	orr	r3, r3, fp
   22b64:	mov	sl, r2
   22b68:	mov	fp, r3
   22b6c:	ldrb	r2, [r1, #16]
   22b70:	lsl	r3, r2, #24
   22b74:	str	r3, [sp, #444]	; 0x1bc
   22b78:	mov	r3, #0
   22b7c:	str	r3, [sp, #440]	; 0x1b8
   22b80:	add	r3, sp, #440	; 0x1b8
   22b84:	ldrd	r2, [r3]
   22b88:	orr	r2, r2, sl
   22b8c:	orr	r3, r3, fp
   22b90:	mov	fp, r3
   22b94:	and	sl, r2, #-16777216	; 0xff000000
   22b98:	sub	r3, pc, #360	; 0x168
   22b9c:	ldrd	r2, [r3]
   22ba0:	cmp	fp, r3
   22ba4:	cmpeq	sl, r2
   22ba8:	bne	227c8 <_start@@Base+0xd228>
   22bac:	cmp	r0, #5
   22bb0:	ble	227c8 <_start@@Base+0xd228>
   22bb4:	mov	r3, #5
   22bb8:	mov	r2, r7
   22bbc:	mov	r1, r4
   22bc0:	mov	r0, r9
   22bc4:	bl	18840 <_start@@Base+0x32a0>
   22bc8:	cmp	r4, r0
   22bcc:	mov	sl, r0
   22bd0:	beq	227c8 <_start@@Base+0xd228>
   22bd4:	add	r3, sp, #440	; 0x1b8
   22bd8:	cmp	r7, r0
   22bdc:	ldrd	r2, [r3]
   22be0:	str	r6, [sp, #688]	; 0x2b0
   22be4:	str	r5, [sp, #692]	; 0x2b4
   22be8:	str	r2, [sp, #676]	; 0x2a4
   22bec:	str	r2, [sp, #680]	; 0x2a8
   22bf0:	beq	23b5c <_start@@Base+0xe5bc>
   22bf4:	add	r3, sp, #688	; 0x2b0
   22bf8:	str	r3, [sp]
   22bfc:	mov	r1, r0
   22c00:	add	r3, sp, #680	; 0x2a8
   22c04:	mov	r2, r7
   22c08:	mov	r0, r9
   22c0c:	bl	31f80 <flatcc_json_parser_integer@@Base>
   22c10:	cmp	sl, r0
   22c14:	mov	r4, r0
   22c18:	beq	23b5c <_start@@Base+0xe5bc>
   22c1c:	ldr	r3, [sp, #680]	; 0x2a8
   22c20:	cmp	r3, #0
   22c24:	bne	239d0 <_start@@Base+0xe430>
   22c28:	add	r3, sp, #688	; 0x2b0
   22c2c:	mov	r1, #0
   22c30:	ldrd	r2, [r3]
   22c34:	mvn	r0, #0
   22c38:	cmp	r3, r1
   22c3c:	cmpeq	r2, r0
   22c40:	strls	r2, [sp, #676]	; 0x2a4
   22c44:	bhi	23a54 <_start@@Base+0xe4b4>
   22c48:	cmp	r2, #0
   22c4c:	bne	22c5c <_start@@Base+0xd6bc>
   22c50:	ldr	r3, [r9, #8]
   22c54:	tst	r3, #2
   22c58:	beq	227dc <_start@@Base+0xd23c>
   22c5c:	mov	r3, #4
   22c60:	mov	r2, r3
   22c64:	mov	r1, #1
   22c68:	ldr	r0, [r9]
   22c6c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   22c70:	cmp	r0, #0
   22c74:	beq	23950 <_start@@Base+0xe3b0>
   22c78:	ldr	r3, [sp, #676]	; 0x2a4
   22c7c:	str	r3, [r0]
   22c80:	b	227dc <_start@@Base+0xd23c>
   22c84:	add	r1, r4, #1
   22c88:	sub	r3, r7, r1
   22c8c:	cmp	r3, #1
   22c90:	ble	22ca4 <_start@@Base+0xd704>
   22c94:	ldrb	r3, [r4, #1]
   22c98:	cmp	r3, #32
   22c9c:	bhi	22cb4 <_start@@Base+0xd714>
   22ca0:	beq	22e7c <_start@@Base+0xd8dc>
   22ca4:	mov	r2, r7
   22ca8:	mov	r0, r9
   22cac:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   22cb0:	mov	r1, r0
   22cb4:	cmp	r7, r1
   22cb8:	beq	22e94 <_start@@Base+0xd8f4>
   22cbc:	ldrb	r3, [r1]
   22cc0:	cmp	r3, #125	; 0x7d
   22cc4:	beq	22fdc <_start@@Base+0xda3c>
   22cc8:	mov	r3, #1
   22ccc:	str	r3, [sp, #672]	; 0x2a0
   22cd0:	b	22504 <_start@@Base+0xcf64>
   22cd4:	sub	r3, r0, #1
   22cd8:	cmp	r3, #7
   22cdc:	ldrls	pc, [pc, r3, lsl #2]
   22ce0:	b	227c8 <_start@@Base+0xd228>
   22ce4:	andeq	r2, r2, ip, asr #26
   22ce8:	andeq	r2, r2, r0, asr #26
   22cec:	andeq	r2, r2, r4, lsr sp
   22cf0:	andeq	r2, r2, r8, lsr #26
   22cf4:	andeq	r2, r2, ip, lsl sp
   22cf8:	andeq	r2, r2, r0, lsl sp
   22cfc:	andeq	r2, r2, r4, lsl #26
   22d00:	andeq	r2, r2, r0, ror #20
   22d04:	mov	sl, r6
   22d08:	mov	fp, r5
   22d0c:	b	22a68 <_start@@Base+0xd4c8>
   22d10:	mov	sl, r6
   22d14:	mov	fp, r5
   22d18:	b	22a94 <_start@@Base+0xd4f4>
   22d1c:	mov	sl, r6
   22d20:	mov	fp, r5
   22d24:	b	22ac0 <_start@@Base+0xd520>
   22d28:	mov	sl, r6
   22d2c:	mov	fp, r5
   22d30:	b	22aec <_start@@Base+0xd54c>
   22d34:	mov	sl, r6
   22d38:	mov	fp, r5
   22d3c:	b	22b14 <_start@@Base+0xd574>
   22d40:	mov	sl, r6
   22d44:	mov	fp, r5
   22d48:	b	22b40 <_start@@Base+0xd5a0>
   22d4c:	mov	sl, r6
   22d50:	mov	fp, r5
   22d54:	b	22b6c <_start@@Base+0xd5cc>
   22d58:	mov	r3, #5
   22d5c:	mov	r2, r7
   22d60:	mov	r0, r9
   22d64:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22d68:	mov	r1, r0
   22d6c:	b	22534 <_start@@Base+0xcf94>
   22d70:	mov	r3, #7
   22d74:	mov	r2, r7
   22d78:	mov	r1, r4
   22d7c:	mov	r0, r9
   22d80:	bl	18840 <_start@@Base+0x32a0>
   22d84:	cmp	r4, r0
   22d88:	mov	sl, r0
   22d8c:	beq	227c8 <_start@@Base+0xd228>
   22d90:	ldr	r3, [sp, #96]	; 0x60
   22d94:	cmp	r7, r0
   22d98:	str	r6, [sp, #680]	; 0x2a8
   22d9c:	str	r5, [sp, #684]	; 0x2ac
   22da0:	str	r6, [sp, #688]	; 0x2b0
   22da4:	str	r5, [sp, #692]	; 0x2b4
   22da8:	str	r3, [sp, #676]	; 0x2a4
   22dac:	beq	23924 <_start@@Base+0xe384>
   22db0:	add	r3, sp, #688	; 0x2b0
   22db4:	str	r3, [sp]
   22db8:	mov	r1, r0
   22dbc:	add	r3, sp, #676	; 0x2a4
   22dc0:	mov	r2, r7
   22dc4:	mov	r0, r9
   22dc8:	bl	31f80 <flatcc_json_parser_integer@@Base>
   22dcc:	cmp	sl, r0
   22dd0:	mov	r4, r0
   22dd4:	beq	23924 <_start@@Base+0xe384>
   22dd8:	ldr	r1, [sp, #676]	; 0x2a4
   22ddc:	add	r3, sp, #688	; 0x2b0
   22de0:	cmp	r1, #0
   22de4:	ldrd	r2, [r3]
   22de8:	beq	22e48 <_start@@Base+0xd8a8>
   22dec:	cmp	r3, #-2147483648	; 0x80000000
   22df0:	cmpeq	r2, #0
   22df4:	bhi	22ef4 <_start@@Base+0xd954>
   22df8:	rsbs	r2, r2, #0
   22dfc:	rsc	r3, r3, #0
   22e00:	add	r1, sp, #680	; 0x2a8
   22e04:	strd	r2, [r1]
   22e08:	orrs	r3, r2, r3
   22e0c:	bne	22e1c <_start@@Base+0xd87c>
   22e10:	ldr	r3, [r9, #8]
   22e14:	tst	r3, #2
   22e18:	beq	227dc <_start@@Base+0xd23c>
   22e1c:	mov	r3, #8
   22e20:	mov	r2, r3
   22e24:	mov	r1, #0
   22e28:	ldr	r0, [r9]
   22e2c:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   22e30:	cmp	r0, #0
   22e34:	beq	23950 <_start@@Base+0xe3b0>
   22e38:	add	r3, sp, #680	; 0x2a8
   22e3c:	ldrd	r2, [r3]
   22e40:	strd	r2, [r0]
   22e44:	b	227dc <_start@@Base+0xd23c>
   22e48:	cmp	r2, #0
   22e4c:	sbcs	r1, r3, #0
   22e50:	blt	23b40 <_start@@Base+0xe5a0>
   22e54:	add	r1, sp, #680	; 0x2a8
   22e58:	strd	r2, [r1]
   22e5c:	b	22e08 <_start@@Base+0xd868>
   22e60:	ldrb	r3, [r4, #2]
   22e64:	cmp	r3, #32
   22e68:	bls	229d4 <_start@@Base+0xd434>
   22e6c:	mov	fp, r9
   22e70:	mov	sl, r7
   22e74:	add	r9, r4, #2
   22e78:	b	22860 <_start@@Base+0xd2c0>
   22e7c:	ldrb	r3, [r4, #2]
   22e80:	cmp	r3, #32
   22e84:	addhi	r1, r4, #2
   22e88:	bls	22ca4 <_start@@Base+0xd704>
   22e8c:	cmp	r7, r1
   22e90:	bne	22cbc <_start@@Base+0xd71c>
   22e94:	mov	ip, #0
   22e98:	mov	r3, #10
   22e9c:	mov	r2, r7
   22ea0:	mov	r1, r7
   22ea4:	mov	r0, r9
   22ea8:	str	ip, [sp, #672]	; 0x2a0
   22eac:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22eb0:	ldr	r3, [sp, #672]	; 0x2a0
   22eb4:	b	224f8 <_start@@Base+0xcf58>
   22eb8:	ldrb	r3, [r9, #2]
   22ebc:	cmp	r3, #32
   22ec0:	addhi	r0, r9, #2
   22ec4:	bls	219dc <_start@@Base+0xc43c>
   22ec8:	cmp	sl, r0
   22ecc:	bne	219f4 <_start@@Base+0xc454>
   22ed0:	mov	ip, #0
   22ed4:	mov	r3, #10
   22ed8:	mov	r2, sl
   22edc:	mov	r1, sl
   22ee0:	mov	r0, fp
   22ee4:	str	ip, [sp, #668]	; 0x29c
   22ee8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22eec:	ldr	r3, [sp, #668]	; 0x29c
   22ef0:	b	21288 <_start@@Base+0xbce8>
   22ef4:	mov	r1, r0
   22ef8:	mov	r3, #8
   22efc:	mov	r2, r7
   22f00:	mov	r0, r9
   22f04:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22f08:	mov	r4, r0
   22f0c:	cmp	sl, r4
   22f10:	beq	23924 <_start@@Base+0xe384>
   22f14:	add	r3, sp, #680	; 0x2a8
   22f18:	ldrd	r2, [r3]
   22f1c:	b	22e08 <_start@@Base+0xd868>
   22f20:	mov	r1, r0
   22f24:	mov	r3, #8
   22f28:	mov	r2, r7
   22f2c:	mov	r0, r9
   22f30:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22f34:	mov	r4, r0
   22f38:	cmp	sl, r4
   22f3c:	beq	23a24 <_start@@Base+0xe484>
   22f40:	ldr	r2, [sp, #676]	; 0x2a4
   22f44:	b	222dc <_start@@Base+0xcd3c>
   22f48:	ldrb	r3, [r4, #2]
   22f4c:	cmp	r3, #32
   22f50:	addhi	r1, r4, #2
   22f54:	bls	2217c <_start@@Base+0xcbdc>
   22f58:	cmp	r7, r1
   22f5c:	bne	22194 <_start@@Base+0xcbf4>
   22f60:	mov	ip, #0
   22f64:	mov	r3, #10
   22f68:	mov	r2, r7
   22f6c:	mov	r1, r7
   22f70:	mov	r0, r9
   22f74:	str	ip, [sp, #672]	; 0x2a0
   22f78:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   22f7c:	ldr	r3, [sp, #672]	; 0x2a0
   22f80:	b	21af8 <_start@@Base+0xc558>
   22f84:	mov	r1, r5
   22f88:	mov	r3, #4
   22f8c:	mov	r2, sl
   22f90:	mov	r0, fp
   22f94:	bl	18840 <_start@@Base+0x32a0>
   22f98:	cmp	r5, r0
   22f9c:	mov	r1, r0
   22fa0:	beq	21198 <_start@@Base+0xbbf8>
   22fa4:	ldr	r2, [sp, #664]	; 0x298
   22fa8:	ldr	r3, [pc, #-1380]	; 22a4c <_start@@Base+0xd4ac>
   22fac:	ldr	lr, [pc, #-1388]	; 22a48 <_start@@Base+0xd4a8>
   22fb0:	ldr	ip, [pc, #-1396]	; 22a44 <_start@@Base+0xd4a4>
   22fb4:	str	r3, [sp, #16]
   22fb8:	mov	r3, #3
   22fbc:	stmib	sp, {r2, ip, lr}
   22fc0:	mov	r0, fp
   22fc4:	str	r3, [sp]
   22fc8:	mov	r2, sl
   22fcc:	ldr	r3, [sp, #536]	; 0x218
   22fd0:	bl	32f88 <flatcc_json_parser_union_type_vector@@Base>
   22fd4:	mov	r6, r0
   22fd8:	b	20f3c <_start@@Base+0xb99c>
   22fdc:	mov	r0, r1
   22fe0:	add	r1, r1, #1
   22fe4:	sub	r3, r7, r1
   22fe8:	cmp	r3, #1
   22fec:	mov	r3, #0
   22ff0:	str	r3, [sp, #672]	; 0x2a0
   22ff4:	ble	23008 <_start@@Base+0xda68>
   22ff8:	ldrb	r3, [r0, #1]
   22ffc:	cmp	r3, #32
   23000:	bhi	23b8c <_start@@Base+0xe5ec>
   23004:	beq	23ae0 <_start@@Base+0xe540>
   23008:	mov	r2, r7
   2300c:	mov	r0, r9
   23010:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   23014:	ldr	r3, [sp, #672]	; 0x2a0
   23018:	b	224f8 <_start@@Base+0xcf58>
   2301c:	mov	r1, r4
   23020:	mov	r3, #7
   23024:	mov	r2, r7
   23028:	mov	r0, r9
   2302c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23030:	mov	r4, r0
   23034:	b	22f38 <_start@@Base+0xd998>
   23038:	mov	r3, #5
   2303c:	mov	r2, sl
   23040:	mov	r1, r5
   23044:	mov	r0, fp
   23048:	bl	18840 <_start@@Base+0x32a0>
   2304c:	cmp	r5, r0
   23050:	mov	r9, r0
   23054:	beq	216ec <_start@@Base+0xc14c>
   23058:	mov	r1, #9
   2305c:	ldr	r0, [fp]
   23060:	bl	2887c <flatcc_builder_start_table@@Base>
   23064:	cmp	r0, #0
   23068:	bne	21e88 <_start@@Base+0xc8e8>
   2306c:	mov	r1, r9
   23070:	add	r3, sp, #676	; 0x2a4
   23074:	mov	r2, sl
   23078:	mov	r0, fp
   2307c:	bl	1878c <_start@@Base+0x31ec>
   23080:	ldr	r3, [sp, #676]	; 0x2a4
   23084:	cmp	r3, #0
   23088:	mov	r9, r0
   2308c:	beq	23358 <_start@@Base+0xddb8>
   23090:	ldr	r8, [pc, #-1624]	; 22a40 <_start@@Base+0xd4a0>
   23094:	add	r7, pc, #972	; 0x3cc
   23098:	ldrd	r6, [r7]
   2309c:	cmp	sl, r9
   230a0:	beq	2331c <_start@@Base+0xdd7c>
   230a4:	ldrb	r3, [r9]
   230a8:	cmp	r3, #34	; 0x22
   230ac:	moveq	r3, #0
   230b0:	addeq	r9, r9, #1
   230b4:	streq	r3, [fp, #12]
   230b8:	beq	230cc <_start@@Base+0xdb2c>
   230bc:	cmp	r3, #46	; 0x2e
   230c0:	movne	r3, #1
   230c4:	strne	r3, [fp, #12]
   230c8:	beq	237f0 <_start@@Base+0xe250>
   230cc:	sub	ip, sl, r9
   230d0:	cmp	ip, #8
   230d4:	bls	23434 <_start@@Base+0xde94>
   230d8:	ldrb	r2, [r9, #7]
   230dc:	mov	r3, #0
   230e0:	ldrb	r0, [r9, #6]
   230e4:	lsl	r1, r0, #8
   230e8:	str	r1, [sp, #496]	; 0x1f0
   230ec:	add	r1, sp, #496	; 0x1f0
   230f0:	lsr	lr, r0, #24
   230f4:	str	lr, [sp, #500]	; 0x1f4
   230f8:	ldrd	r0, [r1]
   230fc:	orr	r0, r0, r2
   23100:	orr	r1, r1, r3
   23104:	mov	r2, r0
   23108:	mov	r3, r1
   2310c:	ldrb	r0, [r9, #5]
   23110:	lsl	r1, r0, #16
   23114:	str	r1, [sp, #424]	; 0x1a8
   23118:	add	r1, sp, #424	; 0x1a8
   2311c:	lsr	lr, r0, #16
   23120:	str	lr, [sp, #428]	; 0x1ac
   23124:	ldrd	r0, [r1]
   23128:	orr	r0, r0, r2
   2312c:	orr	r1, r1, r3
   23130:	mov	r2, r0
   23134:	mov	r3, r1
   23138:	ldrb	r0, [r9, #4]
   2313c:	lsl	r1, r0, #24
   23140:	str	r1, [sp, #328]	; 0x148
   23144:	add	r1, sp, #328	; 0x148
   23148:	lsr	lr, r0, #8
   2314c:	str	lr, [sp, #332]	; 0x14c
   23150:	ldrd	r0, [r1]
   23154:	orr	r0, r0, r2
   23158:	orr	r1, r1, r3
   2315c:	mov	r2, r0
   23160:	mov	r3, r1
   23164:	ldrb	r1, [r9, #3]
   23168:	str	r1, [sp, #364]	; 0x16c
   2316c:	mov	r1, #0
   23170:	str	r1, [sp, #360]	; 0x168
   23174:	add	r1, sp, #360	; 0x168
   23178:	ldrd	r0, [r1]
   2317c:	orr	r0, r0, r2
   23180:	orr	r1, r1, r3
   23184:	mov	r2, r0
   23188:	mov	r3, r1
   2318c:	ldrb	r0, [r9, #2]
   23190:	lsl	r1, r0, #8
   23194:	str	r1, [sp, #284]	; 0x11c
   23198:	mov	r1, #0
   2319c:	str	r1, [sp, #280]	; 0x118
   231a0:	add	r1, sp, #280	; 0x118
   231a4:	ldrd	r0, [r1]
   231a8:	orr	r0, r0, r2
   231ac:	orr	r1, r1, r3
   231b0:	mov	r2, r0
   231b4:	mov	r3, r1
   231b8:	ldrb	r0, [r9, #1]
   231bc:	lsl	r1, r0, #16
   231c0:	str	r1, [sp, #252]	; 0xfc
   231c4:	mov	r1, #0
   231c8:	str	r1, [sp, #248]	; 0xf8
   231cc:	ldrd	r0, [sp, #248]	; 0xf8
   231d0:	orr	r0, r0, r2
   231d4:	orr	r1, r1, r3
   231d8:	mov	r2, r0
   231dc:	mov	r3, r1
   231e0:	ldrb	r4, [r9]
   231e4:	add	r1, pc, #644	; 0x284
   231e8:	ldrd	r0, [r1]
   231ec:	lsl	lr, r4, #24
   231f0:	str	lr, [sp, #188]	; 0xbc
   231f4:	mov	lr, #0
   231f8:	str	lr, [sp, #184]	; 0xb8
   231fc:	ldrd	r4, [sp, #184]	; 0xb8
   23200:	orr	r5, r5, r3
   23204:	orr	r4, r4, r2
   23208:	cmp	r5, r1
   2320c:	cmpeq	r4, r0
   23210:	mov	r2, r4
   23214:	bls	23380 <_start@@Base+0xdde0>
   23218:	add	r1, pc, #600	; 0x258
   2321c:	ldrd	r0, [r1]
   23220:	cmp	r5, r1
   23224:	cmpeq	r4, r0
   23228:	beq	235d4 <_start@@Base+0xe034>
   2322c:	add	r1, pc, #588	; 0x24c
   23230:	ldrd	r0, [r1]
   23234:	mov	r4, #0
   23238:	cmp	r5, r1
   2323c:	cmpeq	r4, r0
   23240:	beq	236f0 <_start@@Base+0xe150>
   23244:	add	r1, pc, #572	; 0x23c
   23248:	ldrd	r0, [r1]
   2324c:	cmp	r5, r1
   23250:	cmpeq	r2, r0
   23254:	bne	23320 <_start@@Base+0xdd80>
   23258:	cmp	ip, #8
   2325c:	bgt	2380c <_start@@Base+0xe26c>
   23260:	add	r9, r9, #8
   23264:	mov	r0, r9
   23268:	mov	r1, sl
   2326c:	bl	156c8 <_start@@Base+0x128>
   23270:	mov	r0, #0
   23274:	and	r1, r1, #-16777216	; 0xff000000
   23278:	cmp	r1, #889192448	; 0x35000000
   2327c:	cmpeq	r0, #0
   23280:	bne	23320 <_start@@Base+0xdd80>
   23284:	sub	r3, sl, r9
   23288:	cmp	r3, #1
   2328c:	ble	23320 <_start@@Base+0xdd80>
   23290:	mov	r3, #1
   23294:	mov	r2, sl
   23298:	mov	r1, r9
   2329c:	mov	r0, fp
   232a0:	bl	18840 <_start@@Base+0x32a0>
   232a4:	cmp	r9, r0
   232a8:	mov	r5, r0
   232ac:	beq	23320 <_start@@Base+0xdd80>
   232b0:	add	r4, sp, #696	; 0x2b8
   232b4:	mov	r3, #0
   232b8:	str	r3, [r4, #-8]!
   232bc:	mov	r1, r0
   232c0:	mov	r2, sl
   232c4:	mov	r3, r4
   232c8:	mov	r0, fp
   232cc:	bl	18128 <_start@@Base+0x2b88>
   232d0:	cmp	r5, r0
   232d4:	mov	r9, r0
   232d8:	beq	23ce0 <_start@@Base+0xe740>
   232dc:	ldr	r3, [sp, #688]	; 0x2b0
   232e0:	cmp	r3, #0
   232e4:	bne	232f4 <_start@@Base+0xdd54>
   232e8:	ldr	r3, [fp, #8]
   232ec:	tst	r3, #2
   232f0:	beq	23334 <_start@@Base+0xdd94>
   232f4:	mov	r3, #4
   232f8:	mov	r2, r3
   232fc:	mov	r1, #8
   23300:	ldr	r0, [fp]
   23304:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   23308:	cmp	r0, #0
   2330c:	bne	235c8 <_start@@Base+0xe028>
   23310:	mov	r0, r9
   23314:	mov	r9, r0
   23318:	b	21e88 <_start@@Base+0xc8e8>
   2331c:	mov	r9, sl
   23320:	mov	r1, r9
   23324:	mov	r2, sl
   23328:	mov	r0, fp
   2332c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   23330:	mov	r9, r0
   23334:	mov	r1, r9
   23338:	add	r3, sp, #676	; 0x2a4
   2333c:	mov	r2, sl
   23340:	mov	r0, fp
   23344:	bl	19ea8 <_start@@Base+0x4908>
   23348:	ldr	r3, [sp, #676]	; 0x2a4
   2334c:	cmp	r3, #0
   23350:	mov	r9, r0
   23354:	bne	2309c <_start@@Base+0xdafc>
   23358:	ldr	r1, [fp, #24]
   2335c:	cmp	r1, #0
   23360:	bne	21e88 <_start@@Base+0xc8e8>
   23364:	ldr	r0, [fp]
   23368:	str	r1, [sp, #384]	; 0x180
   2336c:	bl	292bc <flatcc_builder_end_table@@Base>
   23370:	ldr	r1, [sp, #384]	; 0x180
   23374:	subs	r4, r0, #0
   23378:	beq	21e88 <_start@@Base+0xc8e8>
   2337c:	b	22880 <_start@@Base+0xd2e0>
   23380:	cmp	r5, r7
   23384:	cmpeq	r4, r6
   23388:	beq	23518 <_start@@Base+0xdf78>
   2338c:	add	r1, pc, #252	; 0xfc
   23390:	ldrd	r0, [r1]
   23394:	mov	r4, #0
   23398:	cmp	r5, r1
   2339c:	cmpeq	r4, r0
   233a0:	beq	23690 <_start@@Base+0xe0f0>
   233a4:	add	r1, pc, #236	; 0xec
   233a8:	ldrd	r0, [r1]
   233ac:	cmp	r5, r1
   233b0:	cmpeq	r2, r0
   233b4:	beq	23750 <_start@@Base+0xe1b0>
   233b8:	add	r3, pc, #224	; 0xe0
   233bc:	ldrd	r2, [r3]
   233c0:	cmp	r5, r3
   233c4:	cmpeq	r4, r2
   233c8:	bne	23320 <_start@@Base+0xdd80>
   233cc:	cmp	ip, #4
   233d0:	ble	23320 <_start@@Base+0xdd80>
   233d4:	mov	r1, r9
   233d8:	mov	r3, #4
   233dc:	mov	r2, sl
   233e0:	mov	r0, fp
   233e4:	bl	18840 <_start@@Base+0x32a0>
   233e8:	cmp	r0, r9
   233ec:	mov	r1, r0
   233f0:	beq	23320 <_start@@Base+0xdd80>
   233f4:	add	r3, sp, #680	; 0x2a8
   233f8:	mov	r2, sl
   233fc:	mov	r0, fp
   23400:	bl	3255c <flatcc_json_parser_build_string@@Base>
   23404:	ldr	r3, [sp, #680]	; 0x2a8
   23408:	cmp	r3, #0
   2340c:	mov	r9, r0
   23410:	beq	21e88 <_start@@Base+0xc8e8>
   23414:	mov	r1, #2
   23418:	ldr	r0, [fp]
   2341c:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   23420:	cmp	r0, #0
   23424:	beq	21e88 <_start@@Base+0xc8e8>
   23428:	ldr	r3, [sp, #680]	; 0x2a8
   2342c:	str	r3, [r0]
   23430:	b	23334 <_start@@Base+0xdd94>
   23434:	sub	r3, ip, #1
   23438:	cmp	r3, #7
   2343c:	ldrls	pc, [pc, r3, lsl #2]
   23440:	b	23320 <_start@@Base+0xdd80>
   23444:	andeq	r3, r2, ip, lsl #10
   23448:	andeq	r3, r2, r0, lsl #10
   2344c:	strdeq	r3, [r2], -r4
   23450:	andeq	r3, r2, r8, ror #9
   23454:	ldrdeq	r3, [r2], -ip
   23458:	ldrdeq	r3, [r2], -r0
   2345c:	andeq	r3, r2, r4, asr #9
   23460:	ldrdeq	r3, [r2], -r8
   23464:	nop			; (mov r0, r0)
   23468:	teqcc	r2, r4, lsr r3
   2346c:	cmnvs	r1, r1, ror #2
   23470:			; <UNDEFINED> instruction: 0xffffffff
   23474:	cmnvs	r3, #-2013265919	; 0x88000001
   23478:	teqcc	r2, r4, lsr r3
   2347c:	cmnvs	r3, #-1946157055	; 0x8c000001
   23480:	andeq	r0, r0, r0
   23484:	cmnvs	r3, #-1946157055	; 0x8c000001
   23488:	teqcc	r2, r4, lsr r3
   2348c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   23490:	andeq	r0, r0, r0
   23494:	cmnvs	r1, r1, ror #2
   23498:	teqcc	r2, r4, lsr r3
   2349c:	rsbvs	r6, r2, #536870918	; 0x20000006
   234a0:	andeq	r0, r0, r0
   234a4:	rsbvs	r6, r2, #536870918	; 0x20000006
   234a8:	andeq	r8, r5, ip, lsl #5
   234ac:	andeq	r8, r5, ip, ror #5
   234b0:	ldrdeq	r8, [r5], -r4
   234b4:			; <UNDEFINED> instruction: 0x000582bc
   234b8:			; <UNDEFINED> instruction: 0x000582b0
   234bc:	andeq	r8, r5, r4, lsr #5
   234c0:	andeq	r8, r5, r8, asr #5
   234c4:	mov	r2, #0
   234c8:	mov	r3, #0
   234cc:	b	230e0 <_start@@Base+0xdb40>
   234d0:	mov	r2, #0
   234d4:	mov	r3, #0
   234d8:	b	2310c <_start@@Base+0xdb6c>
   234dc:	mov	r2, #0
   234e0:	mov	r3, #0
   234e4:	b	23138 <_start@@Base+0xdb98>
   234e8:	mov	r2, #0
   234ec:	mov	r3, #0
   234f0:	b	23164 <_start@@Base+0xdbc4>
   234f4:	mov	r2, #0
   234f8:	mov	r3, #0
   234fc:	b	2318c <_start@@Base+0xdbec>
   23500:	mov	r2, #0
   23504:	mov	r3, #0
   23508:	b	231b8 <_start@@Base+0xdc18>
   2350c:	mov	r2, #0
   23510:	mov	r3, #0
   23514:	b	231e0 <_start@@Base+0xdc40>
   23518:	add	r9, r9, #8
   2351c:	mov	r0, r9
   23520:	mov	r1, sl
   23524:	bl	156c8 <_start@@Base+0x128>
   23528:	mov	r0, #0
   2352c:	and	r1, r1, #-16777216	; 0xff000000
   23530:	cmp	r1, #889192448	; 0x35000000
   23534:	cmpeq	r0, #0
   23538:	bne	23320 <_start@@Base+0xdd80>
   2353c:	sub	r3, sl, r9
   23540:	cmp	r3, #1
   23544:	ble	23320 <_start@@Base+0xdd80>
   23548:	mov	r3, #1
   2354c:	mov	r2, sl
   23550:	mov	r1, r9
   23554:	mov	r0, fp
   23558:	bl	18840 <_start@@Base+0x32a0>
   2355c:	cmp	r9, r0
   23560:	mov	r5, r0
   23564:	beq	23320 <_start@@Base+0xdd80>
   23568:	ldr	r3, [sp, #184]	; 0xb8
   2356c:	add	r4, sp, #696	; 0x2b8
   23570:	mov	r1, r0
   23574:	str	r3, [r4, #-8]!
   23578:	mov	r2, sl
   2357c:	mov	r3, r4
   23580:	mov	r0, fp
   23584:	bl	18128 <_start@@Base+0x2b88>
   23588:	cmp	r5, r0
   2358c:	mov	r9, r0
   23590:	beq	23ca0 <_start@@Base+0xe700>
   23594:	ldr	r3, [sp, #688]	; 0x2b0
   23598:	cmp	r3, #0
   2359c:	bne	235ac <_start@@Base+0xe00c>
   235a0:	ldr	r3, [fp, #8]
   235a4:	tst	r3, #2
   235a8:	beq	23334 <_start@@Base+0xdd94>
   235ac:	mov	r3, #4
   235b0:	mov	r2, r3
   235b4:	mov	r1, #1
   235b8:	ldr	r0, [fp]
   235bc:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   235c0:	cmp	r0, #0
   235c4:	beq	21e88 <_start@@Base+0xc8e8>
   235c8:	ldr	r3, [sp, #688]	; 0x2b0
   235cc:	str	r3, [r0]
   235d0:	b	23334 <_start@@Base+0xdd94>
   235d4:	cmp	ip, #8
   235d8:	bgt	23898 <_start@@Base+0xe2f8>
   235dc:	add	r9, r9, #8
   235e0:	mov	r0, r9
   235e4:	mov	r1, sl
   235e8:	bl	156c8 <_start@@Base+0x128>
   235ec:	mov	r0, #0
   235f0:	and	r1, r1, #-16777216	; 0xff000000
   235f4:	cmp	r1, #889192448	; 0x35000000
   235f8:	cmpeq	r0, #0
   235fc:	bne	23320 <_start@@Base+0xdd80>
   23600:	sub	r3, sl, r9
   23604:	cmp	r3, #1
   23608:	ble	23320 <_start@@Base+0xdd80>
   2360c:	mov	r3, #1
   23610:	mov	r2, sl
   23614:	mov	r1, r9
   23618:	mov	r0, fp
   2361c:	bl	18840 <_start@@Base+0x32a0>
   23620:	cmp	r9, r0
   23624:	mov	r5, r0
   23628:	beq	23320 <_start@@Base+0xdd80>
   2362c:	add	r4, sp, #696	; 0x2b8
   23630:	mov	r3, #0
   23634:	str	r3, [r4, #-8]!
   23638:	mov	r1, r0
   2363c:	mov	r2, sl
   23640:	mov	r3, r4
   23644:	mov	r0, fp
   23648:	bl	18128 <_start@@Base+0x2b88>
   2364c:	cmp	r5, r0
   23650:	mov	r9, r0
   23654:	beq	23d0c <_start@@Base+0xe76c>
   23658:	ldr	r3, [sp, #688]	; 0x2b0
   2365c:	cmp	r3, #0
   23660:	bne	23670 <_start@@Base+0xe0d0>
   23664:	ldr	r3, [fp, #8]
   23668:	tst	r3, #2
   2366c:	beq	23334 <_start@@Base+0xdd94>
   23670:	mov	r3, #4
   23674:	mov	r2, r3
   23678:	mov	r1, #6
   2367c:	ldr	r0, [fp]
   23680:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   23684:	cmp	r0, #0
   23688:	bne	235c8 <_start@@Base+0xe028>
   2368c:	b	23310 <_start@@Base+0xdd70>
   23690:	cmp	ip, #4
   23694:	ble	23320 <_start@@Base+0xdd80>
   23698:	mov	r1, r9
   2369c:	mov	r3, #4
   236a0:	mov	r2, sl
   236a4:	mov	r0, fp
   236a8:	bl	18840 <_start@@Base+0x32a0>
   236ac:	cmp	r0, r9
   236b0:	mov	r1, r0
   236b4:	beq	23320 <_start@@Base+0xdd80>
   236b8:	add	r3, sp, #680	; 0x2a8
   236bc:	mov	r2, sl
   236c0:	mov	r0, fp
   236c4:	bl	3255c <flatcc_json_parser_build_string@@Base>
   236c8:	ldr	r3, [sp, #680]	; 0x2a8
   236cc:	cmp	r3, #0
   236d0:	mov	r9, r0
   236d4:	beq	21e88 <_start@@Base+0xc8e8>
   236d8:	ldr	r1, [sp, #184]	; 0xb8
   236dc:	ldr	r0, [fp]
   236e0:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   236e4:	cmp	r0, #0
   236e8:	bne	23428 <_start@@Base+0xde88>
   236ec:	b	21e88 <_start@@Base+0xc8e8>
   236f0:	cmp	ip, #4
   236f4:	ble	23320 <_start@@Base+0xdd80>
   236f8:	mov	r1, r9
   236fc:	mov	r3, #4
   23700:	mov	r2, sl
   23704:	mov	r0, fp
   23708:	bl	18840 <_start@@Base+0x32a0>
   2370c:	cmp	r0, r9
   23710:	mov	r1, r0
   23714:	beq	23320 <_start@@Base+0xdd80>
   23718:	add	r3, sp, #680	; 0x2a8
   2371c:	mov	r2, sl
   23720:	mov	r0, fp
   23724:	bl	3255c <flatcc_json_parser_build_string@@Base>
   23728:	ldr	r3, [sp, #680]	; 0x2a8
   2372c:	cmp	r3, #0
   23730:	mov	r9, r0
   23734:	beq	21e88 <_start@@Base+0xc8e8>
   23738:	mov	r1, #4
   2373c:	ldr	r0, [fp]
   23740:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   23744:	cmp	r0, #0
   23748:	bne	23428 <_start@@Base+0xde88>
   2374c:	b	21e88 <_start@@Base+0xc8e8>
   23750:	cmp	ip, #8
   23754:	ble	23320 <_start@@Base+0xdd80>
   23758:	mov	r3, #8
   2375c:	mov	r2, sl
   23760:	mov	r1, r9
   23764:	mov	r0, fp
   23768:	bl	18840 <_start@@Base+0x32a0>
   2376c:	cmp	r0, r9
   23770:	mov	r5, r0
   23774:	beq	23320 <_start@@Base+0xdd80>
   23778:	mov	r0, #0
   2377c:	mov	r1, #0
   23780:	add	r4, sp, #696	; 0x2b8
   23784:	mov	r2, sl
   23788:	strd	r0, [r4, #-8]!
   2378c:	mov	r1, r5
   23790:	mov	r3, r4
   23794:	mov	r0, fp
   23798:	bl	17c6c <_start@@Base+0x26cc>
   2379c:	cmp	r5, r0
   237a0:	mov	r9, r0
   237a4:	beq	23c40 <_start@@Base+0xe6a0>
   237a8:	add	r3, sp, #688	; 0x2b0
   237ac:	ldrd	r2, [r3]
   237b0:	orrs	r3, r2, r3
   237b4:	bne	237c4 <_start@@Base+0xe224>
   237b8:	ldr	r3, [fp, #8]
   237bc:	tst	r3, #2
   237c0:	beq	23334 <_start@@Base+0xdd94>
   237c4:	mov	r3, #8
   237c8:	mov	r2, r3
   237cc:	mov	r1, #3
   237d0:	ldr	r0, [fp]
   237d4:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   237d8:	cmp	r0, #0
   237dc:	beq	21e88 <_start@@Base+0xc8e8>
   237e0:	add	r3, sp, #688	; 0x2b0
   237e4:	ldrd	r2, [r3]
   237e8:	strd	r2, [r0]
   237ec:	b	23334 <_start@@Base+0xdd94>
   237f0:	mov	r1, r9
   237f4:	mov	r3, #5
   237f8:	mov	r2, sl
   237fc:	mov	r0, fp
   23800:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23804:	mov	r9, r0
   23808:	b	230cc <_start@@Base+0xdb2c>
   2380c:	mov	r3, #8
   23810:	mov	r2, sl
   23814:	mov	r1, r9
   23818:	mov	r0, fp
   2381c:	bl	18840 <_start@@Base+0x32a0>
   23820:	cmp	r0, r9
   23824:	mov	r5, r0
   23828:	beq	23260 <_start@@Base+0xdcc0>
   2382c:	mov	r0, #0
   23830:	mov	r1, #0
   23834:	add	r4, sp, #696	; 0x2b8
   23838:	mov	r2, sl
   2383c:	strd	r0, [r4, #-8]!
   23840:	mov	r1, r5
   23844:	mov	r3, r4
   23848:	mov	r0, fp
   2384c:	bl	17c6c <_start@@Base+0x26cc>
   23850:	cmp	r5, r0
   23854:	mov	r9, r0
   23858:	beq	23bcc <_start@@Base+0xe62c>
   2385c:	add	r3, sp, #688	; 0x2b0
   23860:	ldrd	r2, [r3]
   23864:	orrs	r3, r2, r3
   23868:	bne	23878 <_start@@Base+0xe2d8>
   2386c:	ldr	r3, [fp, #8]
   23870:	tst	r3, #2
   23874:	beq	23334 <_start@@Base+0xdd94>
   23878:	mov	r3, #8
   2387c:	mov	r2, r3
   23880:	mov	r1, #7
   23884:	ldr	r0, [fp]
   23888:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   2388c:	cmp	r0, #0
   23890:	bne	237e0 <_start@@Base+0xe240>
   23894:	b	21e88 <_start@@Base+0xc8e8>
   23898:	mov	r3, #8
   2389c:	mov	r2, sl
   238a0:	mov	r1, r9
   238a4:	mov	r0, fp
   238a8:	bl	18840 <_start@@Base+0x32a0>
   238ac:	cmp	r0, r9
   238b0:	mov	r5, r0
   238b4:	beq	235dc <_start@@Base+0xe03c>
   238b8:	mov	r0, #0
   238bc:	mov	r1, #0
   238c0:	add	r4, sp, #696	; 0x2b8
   238c4:	mov	r2, sl
   238c8:	strd	r0, [r4, #-8]!
   238cc:	mov	r1, r5
   238d0:	mov	r3, r4
   238d4:	mov	r0, fp
   238d8:	bl	17c6c <_start@@Base+0x26cc>
   238dc:	cmp	r5, r0
   238e0:	mov	r9, r0
   238e4:	beq	23bf8 <_start@@Base+0xe658>
   238e8:	add	r3, sp, #688	; 0x2b0
   238ec:	ldrd	r2, [r3]
   238f0:	orrs	r3, r2, r3
   238f4:	bne	23904 <_start@@Base+0xe364>
   238f8:	ldr	r3, [fp, #8]
   238fc:	tst	r3, #2
   23900:	beq	23334 <_start@@Base+0xdd94>
   23904:	mov	r3, #8
   23908:	mov	r2, r3
   2390c:	mov	r1, #5
   23910:	ldr	r0, [fp]
   23914:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   23918:	cmp	r0, #0
   2391c:	bne	237e0 <_start@@Base+0xe240>
   23920:	b	21e88 <_start@@Base+0xc8e8>
   23924:	add	r3, sp, #680	; 0x2a8
   23928:	str	r3, [sp]
   2392c:	mov	r2, r7
   23930:	mov	r3, r8
   23934:	mov	r1, sl
   23938:	mov	r0, r9
   2393c:	bl	19abc <_start@@Base+0x451c>
   23940:	cmp	r7, r0
   23944:	cmpne	r0, sl
   23948:	mov	r4, r0
   2394c:	bne	22f14 <_start@@Base+0xd974>
   23950:	mov	fp, r9
   23954:	mov	sl, r7
   23958:	mov	r9, r4
   2395c:	b	21e88 <_start@@Base+0xc8e8>
   23960:	ldrb	r3, [r6, #2]
   23964:	cmp	r3, #32
   23968:	bls	211d0 <_start@@Base+0xbc30>
   2396c:	add	r4, r6, #2
   23970:	b	20fc4 <_start@@Base+0xba24>
   23974:	add	r1, r0, #1
   23978:	sub	r3, sl, r1
   2397c:	cmp	r3, #1
   23980:	mov	r3, #0
   23984:	str	r3, [sp, #668]	; 0x29c
   23988:	ble	2399c <_start@@Base+0xe3fc>
   2398c:	ldrb	r3, [r0, #1]
   23990:	cmp	r3, #32
   23994:	bhi	23aa0 <_start@@Base+0xe500>
   23998:	beq	23ccc <_start@@Base+0xe72c>
   2399c:	mov	r2, sl
   239a0:	mov	r0, fp
   239a4:	bl	2f2dc <flatcc_json_parser_space_ext@@Base>
   239a8:	ldr	r3, [sp, #668]	; 0x29c
   239ac:	b	21288 <_start@@Base+0xbce8>
   239b0:	mov	r3, #0
   239b4:	add	r1, r1, #1
   239b8:	mov	r2, r7
   239bc:	mov	r0, r9
   239c0:	str	r3, [sp, #672]	; 0x2a0
   239c4:	bl	17318 <_start@@Base+0x1d78>
   239c8:	ldr	r3, [sp, #672]	; 0x2a0
   239cc:	b	21af8 <_start@@Base+0xc558>
   239d0:	mov	r1, r0
   239d4:	mov	r3, #8
   239d8:	mov	r2, r7
   239dc:	mov	r0, r9
   239e0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   239e4:	mov	r4, r0
   239e8:	cmp	sl, r4
   239ec:	beq	23b5c <_start@@Base+0xe5bc>
   239f0:	ldr	r2, [sp, #676]	; 0x2a4
   239f4:	b	22c48 <_start@@Base+0xd6a8>
   239f8:	mov	r1, r0
   239fc:	mov	r3, #8
   23a00:	mov	r2, r7
   23a04:	mov	r0, r9
   23a08:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23a0c:	mov	r4, r0
   23a10:	cmp	sl, r4
   23a14:	beq	23afc <_start@@Base+0xe55c>
   23a18:	add	r3, sp, #680	; 0x2a8
   23a1c:	ldrd	r2, [r3]
   23a20:	b	2211c <_start@@Base+0xcb7c>
   23a24:	add	r3, sp, #676	; 0x2a4
   23a28:	str	r3, [sp]
   23a2c:	mov	r2, r7
   23a30:	mov	r3, r8
   23a34:	mov	r1, sl
   23a38:	mov	r0, r9
   23a3c:	bl	196e8 <_start@@Base+0x4148>
   23a40:	cmp	r7, r0
   23a44:	cmpne	r0, sl
   23a48:	mov	r4, r0
   23a4c:	bne	22f40 <_start@@Base+0xd9a0>
   23a50:	b	23950 <_start@@Base+0xe3b0>
   23a54:	mov	r1, r4
   23a58:	mov	r3, #7
   23a5c:	mov	r2, r7
   23a60:	mov	r0, r9
   23a64:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23a68:	mov	r4, r0
   23a6c:	b	239e8 <_start@@Base+0xe448>
   23a70:	mov	r3, #0
   23a74:	b	210a8 <_start@@Base+0xbb08>
   23a78:	mov	r3, #0
   23a7c:	b	210cc <_start@@Base+0xbb2c>
   23a80:	mov	r3, #0
   23a84:	b	210f0 <_start@@Base+0xbb50>
   23a88:	mov	r3, #0
   23a8c:	b	21110 <_start@@Base+0xbb70>
   23a90:	mov	r3, #0
   23a94:	b	21134 <_start@@Base+0xbb94>
   23a98:	mov	r3, #0
   23a9c:	b	21158 <_start@@Base+0xbbb8>
   23aa0:	mov	r6, r1
   23aa4:	b	21798 <_start@@Base+0xc1f8>
   23aa8:	mov	r1, r4
   23aac:	ldr	r3, [sp, #664]	; 0x298
   23ab0:	mov	r2, fp
   23ab4:	mov	r0, sl
   23ab8:	bl	32910 <flatcc_json_parser_finalize_unions@@Base>
   23abc:	mov	r4, r0
   23ac0:	ldr	r0, [sl]
   23ac4:	bl	292bc <flatcc_builder_end_table@@Base>
   23ac8:	ldr	r3, [sp, #652]	; 0x28c
   23acc:	cmp	r0, #0
   23ad0:	str	r0, [r3]
   23ad4:	beq	20fd0 <_start@@Base+0xba30>
   23ad8:	mov	r0, r4
   23adc:	b	20fe4 <_start@@Base+0xba44>
   23ae0:	ldrb	r3, [r0, #2]
   23ae4:	cmp	r3, #32
   23ae8:	bls	23008 <_start@@Base+0xda68>
   23aec:	mov	fp, r9
   23af0:	mov	sl, r7
   23af4:	add	r9, r0, #2
   23af8:	b	22860 <_start@@Base+0xd2c0>
   23afc:	add	r3, sp, #680	; 0x2a8
   23b00:	str	r3, [sp]
   23b04:	mov	r2, r7
   23b08:	ldr	r3, [pc, #-1640]	; 234a8 <_start@@Base+0xdf08>
   23b0c:	mov	r1, sl
   23b10:	mov	r0, r9
   23b14:	bl	19abc <_start@@Base+0x451c>
   23b18:	cmp	r7, r0
   23b1c:	cmpne	r0, sl
   23b20:	mov	r4, r0
   23b24:	bne	23a18 <_start@@Base+0xe478>
   23b28:	b	23950 <_start@@Base+0xe3b0>
   23b2c:	ldrb	r3, [r6, #2]
   23b30:	cmp	r3, #32
   23b34:	addhi	r4, r6, #2
   23b38:	bls	22338 <_start@@Base+0xcd98>
   23b3c:	b	2234c <_start@@Base+0xcdac>
   23b40:	mov	r1, r0
   23b44:	mov	r3, #7
   23b48:	mov	r2, r7
   23b4c:	mov	r0, r9
   23b50:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23b54:	mov	r4, r0
   23b58:	b	22f0c <_start@@Base+0xd96c>
   23b5c:	add	r3, sp, #676	; 0x2a4
   23b60:	str	r3, [sp]
   23b64:	mov	r2, r7
   23b68:	ldr	r3, [pc, #-1732]	; 234ac <_start@@Base+0xdf0c>
   23b6c:	mov	r1, sl
   23b70:	mov	r0, r9
   23b74:	bl	196e8 <_start@@Base+0x4148>
   23b78:	cmp	r7, r0
   23b7c:	cmpne	r0, sl
   23b80:	mov	r4, r0
   23b84:	bne	239f0 <_start@@Base+0xe450>
   23b88:	b	23950 <_start@@Base+0xe3b0>
   23b8c:	mov	fp, r9
   23b90:	mov	sl, r7
   23b94:	mov	r9, r1
   23b98:	b	22860 <_start@@Base+0xd2c0>
   23b9c:	mov	r3, sl
   23ba0:	mov	sl, fp
   23ba4:	mov	fp, r3
   23ba8:	add	r1, r4, #1
   23bac:	mov	r3, #0
   23bb0:	mov	r2, fp
   23bb4:	mov	r0, sl
   23bb8:	str	r3, [sp, #656]	; 0x290
   23bbc:	bl	17318 <_start@@Base+0x1d78>
   23bc0:	ldr	r3, [sp, #656]	; 0x290
   23bc4:	mov	r4, r0
   23bc8:	b	20d24 <_start@@Base+0xb784>
   23bcc:	mov	r1, r0
   23bd0:	str	r4, [sp]
   23bd4:	ldr	r3, [pc, #-1836]	; 234b0 <_start@@Base+0xdf10>
   23bd8:	mov	r2, sl
   23bdc:	mov	r0, fp
   23be0:	bl	19abc <_start@@Base+0x451c>
   23be4:	cmp	sl, r0
   23be8:	cmpne	r9, r0
   23bec:	mov	r9, r0
   23bf0:	bne	2385c <_start@@Base+0xe2bc>
   23bf4:	b	21e88 <_start@@Base+0xc8e8>
   23bf8:	mov	r1, r0
   23bfc:	str	r4, [sp]
   23c00:	ldr	r3, [pc, #-1876]	; 234b4 <_start@@Base+0xdf14>
   23c04:	mov	r2, sl
   23c08:	mov	r0, fp
   23c0c:	bl	19abc <_start@@Base+0x451c>
   23c10:	cmp	sl, r0
   23c14:	cmpne	r9, r0
   23c18:	mov	r9, r0
   23c1c:	bne	238e8 <_start@@Base+0xe348>
   23c20:	b	21e88 <_start@@Base+0xc8e8>
   23c24:	mov	r1, r0
   23c28:	mov	r3, #7
   23c2c:	mov	r2, r7
   23c30:	mov	r0, r9
   23c34:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23c38:	mov	r4, r0
   23c3c:	b	23a10 <_start@@Base+0xe470>
   23c40:	mov	r1, r0
   23c44:	str	r4, [sp]
   23c48:	ldr	r3, [pc, #-1944]	; 234b8 <_start@@Base+0xdf18>
   23c4c:	mov	r2, sl
   23c50:	mov	r0, fp
   23c54:	bl	19abc <_start@@Base+0x451c>
   23c58:	cmp	sl, r0
   23c5c:	cmpne	r9, r0
   23c60:	mov	r9, r0
   23c64:	bne	237a8 <_start@@Base+0xe208>
   23c68:	b	21e88 <_start@@Base+0xc8e8>
   23c6c:	mov	r3, sl
   23c70:	mov	sl, fp
   23c74:	mov	fp, r3
   23c78:	mov	ip, #0
   23c7c:	mov	r3, #10
   23c80:	mov	r2, fp
   23c84:	mov	r1, fp
   23c88:	mov	r0, sl
   23c8c:	str	ip, [sp, #656]	; 0x290
   23c90:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23c94:	ldr	r3, [sp, #656]	; 0x290
   23c98:	mov	r4, r0
   23c9c:	b	20d24 <_start@@Base+0xb784>
   23ca0:	mov	r1, r0
   23ca4:	str	r4, [sp]
   23ca8:	ldr	r3, [pc, #-2036]	; 234bc <_start@@Base+0xdf1c>
   23cac:	mov	r2, sl
   23cb0:	mov	r0, fp
   23cb4:	bl	196e8 <_start@@Base+0x4148>
   23cb8:	cmp	sl, r0
   23cbc:	cmpne	r9, r0
   23cc0:	mov	r9, r0
   23cc4:	bne	23594 <_start@@Base+0xdff4>
   23cc8:	b	21e88 <_start@@Base+0xc8e8>
   23ccc:	ldrb	r3, [r0, #2]
   23cd0:	cmp	r3, #32
   23cd4:	bls	2399c <_start@@Base+0xe3fc>
   23cd8:	add	r6, r0, #2
   23cdc:	b	21798 <_start@@Base+0xc1f8>
   23ce0:	mov	r1, r0
   23ce4:	str	r4, [sp]
   23ce8:	mov	r3, r8
   23cec:	mov	r2, sl
   23cf0:	mov	r0, fp
   23cf4:	bl	196e8 <_start@@Base+0x4148>
   23cf8:	cmp	sl, r0
   23cfc:	cmpne	r9, r0
   23d00:	beq	23314 <_start@@Base+0xdd74>
   23d04:	mov	r9, r0
   23d08:	b	232dc <_start@@Base+0xdd3c>
   23d0c:	mov	r1, r0
   23d10:	str	r4, [sp]
   23d14:	ldr	r3, [pc, #-2140]	; 234c0 <_start@@Base+0xdf20>
   23d18:	mov	r2, sl
   23d1c:	mov	r0, fp
   23d20:	bl	196e8 <_start@@Base+0x4148>
   23d24:	cmp	sl, r0
   23d28:	cmpne	r9, r0
   23d2c:	beq	23314 <_start@@Base+0xdd74>
   23d30:	mov	r9, r0
   23d34:	b	23658 <_start@@Base+0xe0b8>
   23d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d3c:	sub	sp, sp, #92	; 0x5c
   23d40:	mov	r5, r2
   23d44:	ldr	r2, [sp, #128]	; 0x80
   23d48:	mov	ip, #0
   23d4c:	mov	r8, r0
   23d50:	mov	r4, r1
   23d54:	str	ip, [r2]
   23d58:	cmp	r3, #4
   23d5c:	ldrls	pc, [pc, r3, lsl #2]
   23d60:	b	243e4 <_start@@Base+0xee44>
   23d64:			; <UNDEFINED> instruction: 0x00023dbc
   23d68:	andeq	r3, r2, r0, lsl #28
   23d6c:	andeq	r3, r2, r0, lsl lr
   23d70:	andeq	r4, r2, r4, lsr #1
   23d74:	andeq	r3, r2, r8, ror sp
   23d78:	ldr	r3, [sp, #128]	; 0x80
   23d7c:	mov	r2, r5
   23d80:	bl	20ca8 <_start@@Base+0xb708>
   23d84:	ldr	r3, [r8, #24]
   23d88:	cmp	r3, #0
   23d8c:	bne	23db4 <_start@@Base+0xe814>
   23d90:	ldr	r3, [sp, #128]	; 0x80
   23d94:	ldr	r3, [r3]
   23d98:	cmp	r3, #0
   23d9c:	bne	23db4 <_start@@Base+0xe814>
   23da0:	mov	r1, r0
   23da4:	mov	r2, r5
   23da8:	mov	r0, r8
   23dac:	mov	r3, #33	; 0x21
   23db0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23db4:	add	sp, sp, #92	; 0x5c
   23db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23dbc:	sub	r3, r5, r1
   23dc0:	cmp	r3, #3
   23dc4:	ble	23de4 <_start@@Base+0xe844>
   23dc8:	mov	r2, #4
   23dcc:	ldr	r1, [pc, #1284]	; 242d8 <_start@@Base+0xed38>
   23dd0:	mov	r0, r4
   23dd4:	bl	14558 <memcmp@plt>
   23dd8:	cmp	r0, #0
   23ddc:	addeq	r0, r4, #4
   23de0:	beq	23db4 <_start@@Base+0xe814>
   23de4:	mov	r2, r5
   23de8:	mov	r1, r4
   23dec:	mov	r0, r8
   23df0:	mov	r3, #26
   23df4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   23df8:	add	sp, sp, #92	; 0x5c
   23dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e00:	ldr	r3, [sp, #128]	; 0x80
   23e04:	mov	r2, r5
   23e08:	bl	1b478 <_start@@Base+0x5ed8>
   23e0c:	b	23d84 <_start@@Base+0xe7e4>
   23e10:	mov	r1, #4
   23e14:	ldr	r0, [r0]
   23e18:	bl	2887c <flatcc_builder_start_table@@Base>
   23e1c:	cmp	r0, #0
   23e20:	bne	243b0 <_start@@Base+0xee10>
   23e24:	mov	r1, r4
   23e28:	add	r3, sp, #72	; 0x48
   23e2c:	mov	r2, r5
   23e30:	mov	r0, r8
   23e34:	bl	1878c <_start@@Base+0x31ec>
   23e38:	ldr	r3, [sp, #72]	; 0x48
   23e3c:	cmp	r3, #0
   23e40:	mov	r4, r0
   23e44:	bne	24038 <_start@@Base+0xea98>
   23e48:	b	24640 <_start@@Base+0xf0a0>
   23e4c:	ldrb	r6, [r4, #7]
   23e50:	mov	r7, #0
   23e54:	ldrb	r2, [r4, #6]
   23e58:	lsr	r1, r2, #24
   23e5c:	lsl	r3, r2, #8
   23e60:	str	r1, [sp, #60]	; 0x3c
   23e64:	str	r3, [sp, #56]	; 0x38
   23e68:	ldrd	r2, [sp, #56]	; 0x38
   23e6c:	orr	r2, r2, r6
   23e70:	orr	r3, r3, r7
   23e74:	mov	r6, r2
   23e78:	mov	r7, r3
   23e7c:	ldrb	r2, [r4, #5]
   23e80:	lsr	r1, r2, #16
   23e84:	lsl	r3, r2, #16
   23e88:	str	r1, [sp, #52]	; 0x34
   23e8c:	str	r3, [sp, #48]	; 0x30
   23e90:	ldrd	r2, [sp, #48]	; 0x30
   23e94:	orr	r2, r2, r6
   23e98:	orr	r3, r3, r7
   23e9c:	mov	r6, r2
   23ea0:	mov	r7, r3
   23ea4:	ldrb	r2, [r4, #4]
   23ea8:	lsr	r1, r2, #8
   23eac:	lsl	r3, r2, #24
   23eb0:	str	r1, [sp, #36]	; 0x24
   23eb4:	str	r3, [sp, #32]
   23eb8:	ldrd	r2, [sp, #32]
   23ebc:	orr	r2, r2, r6
   23ec0:	orr	r3, r3, r7
   23ec4:	mov	r6, r2
   23ec8:	mov	r7, r3
   23ecc:	ldrb	r3, [r4, #3]
   23ed0:	str	r3, [sp, #44]	; 0x2c
   23ed4:	mov	r3, #0
   23ed8:	str	r3, [sp, #40]	; 0x28
   23edc:	ldrd	r2, [sp, #40]	; 0x28
   23ee0:	orr	r2, r2, r6
   23ee4:	orr	r3, r3, r7
   23ee8:	mov	r6, r2
   23eec:	mov	r7, r3
   23ef0:	ldrb	r2, [r4, #2]
   23ef4:	lsl	r3, r2, #8
   23ef8:	str	r3, [sp, #28]
   23efc:	mov	r3, #0
   23f00:	str	r3, [sp, #24]
   23f04:	ldrd	r2, [sp, #24]
   23f08:	orr	r2, r2, r6
   23f0c:	orr	r3, r3, r7
   23f10:	mov	r6, r2
   23f14:	mov	r7, r3
   23f18:	ldrb	r2, [r4, #1]
   23f1c:	lsl	r3, r2, #16
   23f20:	str	r3, [sp, #20]
   23f24:	mov	r3, #0
   23f28:	str	r3, [sp, #16]
   23f2c:	ldrd	r2, [sp, #16]
   23f30:	orr	r2, r2, r6
   23f34:	orr	r3, r3, r7
   23f38:	mov	r6, r2
   23f3c:	mov	r7, r3
   23f40:	ldrb	r2, [r4]
   23f44:	add	r1, pc, #884	; 0x374
   23f48:	ldrd	r0, [r1]
   23f4c:	lsl	r3, r2, #24
   23f50:	str	r3, [sp, #12]
   23f54:	mov	r3, #0
   23f58:	str	r3, [sp, #8]
   23f5c:	ldrd	r2, [sp, #8]
   23f60:	orr	r2, r2, r6
   23f64:	orr	r3, r3, r7
   23f68:	mov	r6, r2
   23f6c:	mov	r7, r3
   23f70:	ldr	r2, [pc, #868]	; 242dc <_start@@Base+0xed3c>
   23f74:	mvn	r3, #0
   23f78:	and	r3, r3, r7
   23f7c:	and	r2, r2, r6
   23f80:	cmp	r3, r1
   23f84:	cmpeq	r2, r0
   23f88:	beq	24108 <_start@@Base+0xeb68>
   23f8c:	add	r3, pc, #820	; 0x334
   23f90:	ldrd	r2, [r3]
   23f94:	and	r0, r6, #-16777216	; 0xff000000
   23f98:	cmp	r7, r3
   23f9c:	cmpeq	r0, r2
   23fa0:	movne	sl, #1
   23fa4:	moveq	sl, #0
   23fa8:	cmp	r9, #5
   23fac:	orrle	sl, sl, #1
   23fb0:	cmp	sl, #0
   23fb4:	beq	2443c <_start@@Base+0xee9c>
   23fb8:	add	r3, pc, #784	; 0x310
   23fbc:	ldrd	r2, [r3]
   23fc0:	bic	r1, r7, #255	; 0xff
   23fc4:	mov	r0, #0
   23fc8:	cmp	r1, r3
   23fcc:	cmpeq	r0, r2
   23fd0:	beq	241dc <_start@@Base+0xec3c>
   23fd4:	ldr	r3, [pc, #768]	; 242dc <_start@@Base+0xed3c>
   23fd8:	mov	r2, #0
   23fdc:	and	r7, r7, r3
   23fe0:	ldr	r3, [pc, #760]	; 242e0 <_start@@Base+0xed40>
   23fe4:	and	r6, r6, r2
   23fe8:	cmp	r7, r3
   23fec:	mov	r2, #0
   23ff0:	cmpeq	r6, r2
   23ff4:	bne	24000 <_start@@Base+0xea60>
   23ff8:	cmp	r9, #2
   23ffc:	bgt	242f4 <_start@@Base+0xed54>
   24000:	mov	r1, r4
   24004:	mov	r2, r5
   24008:	mov	r0, r8
   2400c:	bl	31abc <flatcc_json_parser_unmatched_symbol@@Base>
   24010:	mov	r4, r0
   24014:	mov	r1, r4
   24018:	add	r3, sp, #72	; 0x48
   2401c:	mov	r2, r5
   24020:	mov	r0, r8
   24024:	bl	19ea8 <_start@@Base+0x4908>
   24028:	ldr	r3, [sp, #72]	; 0x48
   2402c:	cmp	r3, #0
   24030:	mov	r4, r0
   24034:	beq	24640 <_start@@Base+0xf0a0>
   24038:	cmp	r5, r4
   2403c:	beq	242ac <_start@@Base+0xed0c>
   24040:	ldrb	r3, [r4]
   24044:	cmp	r3, #34	; 0x22
   24048:	moveq	r3, #0
   2404c:	addeq	r4, r4, #1
   24050:	streq	r3, [r8, #12]
   24054:	beq	24068 <_start@@Base+0xeac8>
   24058:	cmp	r3, #46	; 0x2e
   2405c:	movne	r3, #1
   24060:	strne	r3, [r8, #12]
   24064:	beq	243c8 <_start@@Base+0xee28>
   24068:	sub	r9, r5, r4
   2406c:	cmp	r9, #8
   24070:	bhi	23e4c <_start@@Base+0xe8ac>
   24074:	sub	r3, r9, #1
   24078:	cmp	r3, #7
   2407c:	ldrls	pc, [pc, r3, lsl #2]
   24080:	b	242b0 <_start@@Base+0xed10>
   24084:	strdeq	r4, [r2], -ip
   24088:	strdeq	r4, [r2], -r0
   2408c:	andeq	r4, r2, r4, ror #1
   24090:	ldrdeq	r4, [r2], -r8
   24094:	andeq	r4, r2, ip, asr #1
   24098:	andeq	r4, r2, r0, asr #1
   2409c:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>
   240a0:	andeq	r3, r2, ip, asr #28
   240a4:	ldr	r3, [sp, #128]	; 0x80
   240a8:	mov	r2, r5
   240ac:	bl	1a978 <_start@@Base+0x53d8>
   240b0:	b	23d84 <_start@@Base+0xe7e4>
   240b4:	mov	r6, #0
   240b8:	mov	r7, #0
   240bc:	b	23e54 <_start@@Base+0xe8b4>
   240c0:	mov	r6, #0
   240c4:	mov	r7, #0
   240c8:	b	23e7c <_start@@Base+0xe8dc>
   240cc:	mov	r6, #0
   240d0:	mov	r7, #0
   240d4:	b	23ea4 <_start@@Base+0xe904>
   240d8:	mov	r6, #0
   240dc:	mov	r7, #0
   240e0:	b	23ecc <_start@@Base+0xe92c>
   240e4:	mov	r6, #0
   240e8:	mov	r7, #0
   240ec:	b	23ef0 <_start@@Base+0xe950>
   240f0:	mov	r6, #0
   240f4:	mov	r7, #0
   240f8:	b	23f18 <_start@@Base+0xe978>
   240fc:	mov	r6, #0
   24100:	mov	r7, #0
   24104:	b	23f40 <_start@@Base+0xe9a0>
   24108:	cmp	r9, #6
   2410c:	ble	23fd4 <_start@@Base+0xea34>
   24110:	mov	r3, #6
   24114:	mov	r2, r5
   24118:	mov	r1, r4
   2411c:	mov	r0, r8
   24120:	bl	18840 <_start@@Base+0x32a0>
   24124:	cmp	r0, r4
   24128:	mov	sl, r0
   2412c:	beq	23fd4 <_start@@Base+0xea34>
   24130:	cmp	r5, r0
   24134:	ldrd	r0, [sp, #8]
   24138:	mov	r2, #0
   2413c:	mov	r3, #0
   24140:	strb	r0, [sp, #71]	; 0x47
   24144:	str	r0, [sp, #76]	; 0x4c
   24148:	strd	r2, [sp, #80]	; 0x50
   2414c:	beq	24574 <_start@@Base+0xefd4>
   24150:	add	r3, sp, #80	; 0x50
   24154:	str	r3, [sp]
   24158:	mov	r2, r5
   2415c:	add	r3, sp, #76	; 0x4c
   24160:	mov	r1, sl
   24164:	mov	r0, r8
   24168:	bl	31f80 <flatcc_json_parser_integer@@Base>
   2416c:	cmp	sl, r0
   24170:	mov	r4, r0
   24174:	beq	24570 <_start@@Base+0xefd0>
   24178:	ldr	r1, [sp, #76]	; 0x4c
   2417c:	ldrd	r2, [sp, #80]	; 0x50
   24180:	cmp	r1, #0
   24184:	beq	24400 <_start@@Base+0xee60>
   24188:	cmp	r3, #0
   2418c:	cmpeq	r2, #128	; 0x80
   24190:	rsbls	r2, r2, #0
   24194:	sxtbls	r2, r2
   24198:	strbls	r2, [sp, #71]	; 0x47
   2419c:	bhi	246ac <_start@@Base+0xf10c>
   241a0:	cmp	r2, #2
   241a4:	bne	241b4 <_start@@Base+0xec14>
   241a8:	ldr	r3, [r8, #8]
   241ac:	tst	r3, #2
   241b0:	beq	24014 <_start@@Base+0xea74>
   241b4:	mov	r3, #1
   241b8:	mov	r2, r3
   241bc:	mov	r1, r3
   241c0:	ldr	r0, [r8]
   241c4:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   241c8:	cmp	r0, #0
   241cc:	beq	243b0 <_start@@Base+0xee10>
   241d0:	ldrsb	r3, [sp, #71]	; 0x47
   241d4:	strb	r3, [r0]
   241d8:	b	24014 <_start@@Base+0xea74>
   241dc:	cmp	r9, #3
   241e0:	ble	24000 <_start@@Base+0xea60>
   241e4:	mov	r3, #3
   241e8:	mov	r2, r5
   241ec:	mov	r1, r4
   241f0:	mov	r0, r8
   241f4:	bl	18840 <_start@@Base+0x32a0>
   241f8:	cmp	r0, r4
   241fc:	mov	r6, r0
   24200:	beq	24000 <_start@@Base+0xea60>
   24204:	mov	r0, #0
   24208:	mov	r1, #0
   2420c:	mov	r3, #0
   24210:	cmp	r5, r6
   24214:	strd	r0, [sp, #80]	; 0x50
   24218:	strb	r3, [sp, #71]	; 0x47
   2421c:	str	r3, [sp, #76]	; 0x4c
   24220:	beq	245b0 <_start@@Base+0xf010>
   24224:	add	r3, sp, #80	; 0x50
   24228:	str	r3, [sp]
   2422c:	mov	r2, r5
   24230:	add	r3, sp, #76	; 0x4c
   24234:	mov	r1, r6
   24238:	mov	r0, r8
   2423c:	bl	31f80 <flatcc_json_parser_integer@@Base>
   24240:	cmp	r6, r0
   24244:	mov	r4, r0
   24248:	beq	245ac <_start@@Base+0xf00c>
   2424c:	ldr	r3, [sp, #76]	; 0x4c
   24250:	cmp	r3, #0
   24254:	bne	2466c <_start@@Base+0xf0cc>
   24258:	ldrd	r2, [sp, #80]	; 0x50
   2425c:	cmp	r3, #0
   24260:	cmpeq	r2, #255	; 0xff
   24264:	uxtbls	r2, r2
   24268:	strbls	r2, [sp, #71]	; 0x47
   2426c:	bhi	246c8 <_start@@Base+0xf128>
   24270:	cmp	r2, #2
   24274:	bne	24284 <_start@@Base+0xece4>
   24278:	ldr	r3, [r8, #8]
   2427c:	tst	r3, #2
   24280:	beq	24014 <_start@@Base+0xea74>
   24284:	mov	r3, #1
   24288:	mov	r2, r3
   2428c:	mov	r1, #3
   24290:	ldr	r0, [r8]
   24294:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   24298:	cmp	r0, #0
   2429c:	beq	243b0 <_start@@Base+0xee10>
   242a0:	ldrb	r3, [sp, #71]	; 0x47
   242a4:	strb	r3, [r0]
   242a8:	b	24014 <_start@@Base+0xea74>
   242ac:	mov	r9, #0
   242b0:	mov	r6, #0
   242b4:	mov	r7, #0
   242b8:	b	23fd4 <_start@@Base+0xea34>
   242bc:	nop			; (mov r0, r0)
   242c0:	eorsvc	r0, r2, #0
   242c4:	cmnvs	pc, #28416	; 0x6f00
   242c8:	andvc	r0, r0, #0
   242cc:	cmnvs	pc, #28416	; 0x6f00
   242d0:	andeq	r0, r0, r0
   242d4:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   242d8:	andeq	r1, r4, r4, asr #30
   242dc:			; <UNDEFINED> instruction: 0xffff0000
   242e0:	strbvc	r0, [r3, #-0]!
   242e4:	andeq	r8, r5, r0, lsr r3
   242e8:	andeq	r8, r5, r4, lsl #6
   242ec:	andeq	r8, r5, r4, lsr #6
   242f0:	andeq	r8, r5, r4, lsl r3
   242f4:	mov	r3, #2
   242f8:	mov	r2, r5
   242fc:	mov	r1, r4
   24300:	mov	r0, r8
   24304:	bl	18840 <_start@@Base+0x32a0>
   24308:	cmp	r0, r4
   2430c:	mov	r6, r0
   24310:	beq	24000 <_start@@Base+0xea60>
   24314:	mov	r0, #0
   24318:	mov	r1, #0
   2431c:	mov	r3, #0
   24320:	cmp	r5, r6
   24324:	strd	r0, [sp, #80]	; 0x50
   24328:	strb	r3, [sp, #71]	; 0x47
   2432c:	str	r3, [sp, #76]	; 0x4c
   24330:	beq	2453c <_start@@Base+0xef9c>
   24334:	add	r3, sp, #80	; 0x50
   24338:	str	r3, [sp]
   2433c:	mov	r2, r5
   24340:	add	r3, sp, #76	; 0x4c
   24344:	mov	r1, r6
   24348:	mov	r0, r8
   2434c:	bl	31f80 <flatcc_json_parser_integer@@Base>
   24350:	cmp	r6, r0
   24354:	mov	r4, r0
   24358:	beq	24538 <_start@@Base+0xef98>
   2435c:	ldr	r3, [sp, #76]	; 0x4c
   24360:	cmp	r3, #0
   24364:	bne	245e4 <_start@@Base+0xf044>
   24368:	ldrd	r2, [sp, #80]	; 0x50
   2436c:	cmp	r3, #0
   24370:	cmpeq	r2, #255	; 0xff
   24374:	uxtbls	r2, r2
   24378:	strbls	r2, [sp, #71]	; 0x47
   2437c:	bhi	24690 <_start@@Base+0xf0f0>
   24380:	cmp	r2, #2
   24384:	bne	24394 <_start@@Base+0xedf4>
   24388:	ldr	r3, [r8, #8]
   2438c:	tst	r3, #2
   24390:	beq	24014 <_start@@Base+0xea74>
   24394:	mov	r3, #1
   24398:	mov	r2, r3
   2439c:	mov	r1, #2
   243a0:	ldr	r0, [r8]
   243a4:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   243a8:	cmp	r0, #0
   243ac:	bne	242a0 <_start@@Base+0xed00>
   243b0:	mov	r1, r4
   243b4:	mov	r3, #33	; 0x21
   243b8:	mov	r2, r5
   243bc:	mov	r0, r8
   243c0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   243c4:	b	23d84 <_start@@Base+0xe7e4>
   243c8:	mov	r1, r4
   243cc:	mov	r3, #5
   243d0:	mov	r2, r5
   243d4:	mov	r0, r8
   243d8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   243dc:	mov	r4, r0
   243e0:	b	24068 <_start@@Base+0xeac8>
   243e4:	ldr	r3, [r0, #8]
   243e8:	mov	r2, r5
   243ec:	tst	r3, #1
   243f0:	bne	245a4 <_start@@Base+0xf004>
   243f4:	mov	r3, #15
   243f8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   243fc:	b	23db4 <_start@@Base+0xe814>
   24400:	cmp	r3, #0
   24404:	cmpeq	r2, #127	; 0x7f
   24408:	sxtbls	r2, r2
   2440c:	strbls	r2, [sp, #71]	; 0x47
   24410:	bls	241a0 <_start@@Base+0xec00>
   24414:	mov	r1, r0
   24418:	mov	r3, #7
   2441c:	mov	r2, r5
   24420:	mov	r0, r8
   24424:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   24428:	mov	r4, r0
   2442c:	cmp	sl, r4
   24430:	beq	24574 <_start@@Base+0xefd4>
   24434:	ldrsb	r2, [sp, #71]	; 0x47
   24438:	b	241a0 <_start@@Base+0xec00>
   2443c:	mov	r3, #5
   24440:	mov	r2, r5
   24444:	mov	r1, r4
   24448:	mov	r0, r8
   2444c:	bl	18840 <_start@@Base+0x32a0>
   24450:	cmp	r0, r4
   24454:	mov	fp, r0
   24458:	beq	23fb8 <_start@@Base+0xea18>
   2445c:	mov	r2, #0
   24460:	mov	r3, #0
   24464:	cmp	r5, r0
   24468:	strb	sl, [sp, #71]	; 0x47
   2446c:	str	sl, [sp, #76]	; 0x4c
   24470:	strd	r2, [sp, #80]	; 0x50
   24474:	beq	24610 <_start@@Base+0xf070>
   24478:	add	r3, sp, #80	; 0x50
   2447c:	str	r3, [sp]
   24480:	mov	r1, r0
   24484:	add	r3, sp, #76	; 0x4c
   24488:	mov	r2, r5
   2448c:	mov	r0, r8
   24490:	bl	31f80 <flatcc_json_parser_integer@@Base>
   24494:	cmp	fp, r0
   24498:	mov	r4, r0
   2449c:	beq	2460c <_start@@Base+0xf06c>
   244a0:	ldr	r1, [sp, #76]	; 0x4c
   244a4:	ldrd	r2, [sp, #80]	; 0x50
   244a8:	cmp	r1, #0
   244ac:	beq	244fc <_start@@Base+0xef5c>
   244b0:	cmp	r3, #0
   244b4:	cmpeq	r2, #128	; 0x80
   244b8:	rsbls	r2, r2, #0
   244bc:	sxtbls	r2, r2
   244c0:	strbls	r2, [sp, #71]	; 0x47
   244c4:	bhi	246e4 <_start@@Base+0xf144>
   244c8:	cmp	r2, #2
   244cc:	bne	244dc <_start@@Base+0xef3c>
   244d0:	ldr	r3, [r8, #8]
   244d4:	tst	r3, #2
   244d8:	beq	24014 <_start@@Base+0xea74>
   244dc:	mov	r3, #1
   244e0:	mov	r2, r3
   244e4:	mov	r1, #0
   244e8:	ldr	r0, [r8]
   244ec:	bl	2a9e8 <flatcc_builder_table_add@@Base>
   244f0:	cmp	r0, #0
   244f4:	bne	241d0 <_start@@Base+0xec30>
   244f8:	b	243b0 <_start@@Base+0xee10>
   244fc:	cmp	r3, #0
   24500:	cmpeq	r2, #127	; 0x7f
   24504:	sxtbls	r2, r2
   24508:	strbls	r2, [sp, #71]	; 0x47
   2450c:	bls	244c8 <_start@@Base+0xef28>
   24510:	mov	r1, r0
   24514:	mov	r3, #7
   24518:	mov	r2, r5
   2451c:	mov	r0, r8
   24520:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   24524:	mov	r4, r0
   24528:	cmp	fp, r4
   2452c:	beq	24610 <_start@@Base+0xf070>
   24530:	ldrsb	r2, [sp, #71]	; 0x47
   24534:	b	244c8 <_start@@Base+0xef28>
   24538:	mov	r6, r0
   2453c:	add	r3, sp, #71	; 0x47
   24540:	str	r3, [sp]
   24544:	mov	r2, r5
   24548:	ldr	r3, [pc, #-620]	; 242e4 <_start@@Base+0xed44>
   2454c:	mov	r1, r6
   24550:	mov	r0, r8
   24554:	bl	198d0 <_start@@Base+0x4330>
   24558:	cmp	r5, r0
   2455c:	cmpne	r0, r6
   24560:	mov	r4, r0
   24564:	beq	243b0 <_start@@Base+0xee10>
   24568:	ldrb	r2, [sp, #71]	; 0x47
   2456c:	b	24380 <_start@@Base+0xede0>
   24570:	mov	sl, r0
   24574:	add	r3, sp, #71	; 0x47
   24578:	str	r3, [sp]
   2457c:	mov	r2, r5
   24580:	ldr	r3, [pc, #-672]	; 242e8 <_start@@Base+0xed48>
   24584:	mov	r1, sl
   24588:	mov	r0, r8
   2458c:	bl	194f4 <_start@@Base+0x3f54>
   24590:	cmp	r5, r0
   24594:	cmpne	r0, sl
   24598:	mov	r4, r0
   2459c:	bne	24434 <_start@@Base+0xee94>
   245a0:	b	243b0 <_start@@Base+0xee10>
   245a4:	bl	30128 <flatcc_json_parser_generic_json@@Base>
   245a8:	b	23db4 <_start@@Base+0xe814>
   245ac:	mov	r6, r0
   245b0:	add	r3, sp, #71	; 0x47
   245b4:	str	r3, [sp]
   245b8:	mov	r2, r5
   245bc:	ldr	r3, [pc, #-728]	; 242ec <_start@@Base+0xed4c>
   245c0:	mov	r1, r6
   245c4:	mov	r0, r8
   245c8:	bl	198d0 <_start@@Base+0x4330>
   245cc:	cmp	r5, r0
   245d0:	cmpne	r0, r6
   245d4:	mov	r4, r0
   245d8:	beq	243b0 <_start@@Base+0xee10>
   245dc:	ldrb	r2, [sp, #71]	; 0x47
   245e0:	b	24270 <_start@@Base+0xecd0>
   245e4:	mov	r1, r0
   245e8:	mov	r3, #8
   245ec:	mov	r2, r5
   245f0:	mov	r0, r8
   245f4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   245f8:	mov	r4, r0
   245fc:	cmp	r6, r4
   24600:	beq	2453c <_start@@Base+0xef9c>
   24604:	ldrb	r2, [sp, #71]	; 0x47
   24608:	b	24380 <_start@@Base+0xede0>
   2460c:	mov	fp, r0
   24610:	add	r3, sp, #71	; 0x47
   24614:	str	r3, [sp]
   24618:	mov	r2, r5
   2461c:	ldr	r3, [pc, #-820]	; 242f0 <_start@@Base+0xed50>
   24620:	mov	r1, fp
   24624:	mov	r0, r8
   24628:	bl	194f4 <_start@@Base+0x3f54>
   2462c:	cmp	r5, r0
   24630:	cmpne	r0, fp
   24634:	mov	r4, r0
   24638:	bne	24530 <_start@@Base+0xef90>
   2463c:	b	243b0 <_start@@Base+0xee10>
   24640:	ldr	r3, [r8, #24]
   24644:	cmp	r3, #0
   24648:	bne	243b0 <_start@@Base+0xee10>
   2464c:	ldr	r0, [r8]
   24650:	bl	292bc <flatcc_builder_end_table@@Base>
   24654:	ldr	r3, [sp, #128]	; 0x80
   24658:	cmp	r0, #0
   2465c:	str	r0, [r3]
   24660:	movne	r0, r4
   24664:	beq	243b0 <_start@@Base+0xee10>
   24668:	b	23d84 <_start@@Base+0xe7e4>
   2466c:	mov	r1, r0
   24670:	mov	r3, #8
   24674:	mov	r2, r5
   24678:	mov	r0, r8
   2467c:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   24680:	mov	r4, r0
   24684:	cmp	r6, r4
   24688:	bne	245dc <_start@@Base+0xf03c>
   2468c:	b	245b0 <_start@@Base+0xf010>
   24690:	mov	r1, r0
   24694:	mov	r3, #7
   24698:	mov	r2, r5
   2469c:	mov	r0, r8
   246a0:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   246a4:	mov	r4, r0
   246a8:	b	245fc <_start@@Base+0xf05c>
   246ac:	mov	r1, r0
   246b0:	mov	r3, #8
   246b4:	mov	r2, r5
   246b8:	mov	r0, r8
   246bc:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   246c0:	mov	r4, r0
   246c4:	b	2442c <_start@@Base+0xee8c>
   246c8:	mov	r1, r0
   246cc:	mov	r3, #7
   246d0:	mov	r2, r5
   246d4:	mov	r0, r8
   246d8:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   246dc:	mov	r4, r0
   246e0:	b	24684 <_start@@Base+0xf0e4>
   246e4:	mov	r1, r0
   246e8:	mov	r3, #8
   246ec:	mov	r2, r5
   246f0:	mov	r0, r8
   246f4:	bl	2f1dc <flatcc_json_parser_set_error@@Base>
   246f8:	mov	r4, r0
   246fc:	b	24528 <_start@@Base+0xef88>
   24700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24704:	mov	r4, r1
   24708:	sub	sp, sp, #28
   2470c:	mov	r1, r2
   24710:	mov	r8, r0
   24714:	mov	r0, r4
   24718:	mov	r5, r2
   2471c:	mov	sl, r3
   24720:	bl	156c8 <_start@@Base+0x128>
   24724:	add	r3, pc, #956	; 0x3bc
   24728:	ldrd	r2, [r3]
   2472c:	ldr	r7, [sp, #64]	; 0x40
   24730:	ldr	fp, [sp, #68]	; 0x44
   24734:	cmp	r1, r3
   24738:	cmpeq	r0, r2
   2473c:	bhi	24760 <_start@@Base+0xf1c0>
   24740:	add	r3, pc, #936	; 0x3a8
   24744:	ldrd	r2, [r3]
   24748:	cmp	r1, r3
   2474c:	cmpeq	r0, r2
   24750:	beq	24874 <_start@@Base+0xf2d4>
   24754:	mov	r0, r4
   24758:	add	sp, sp, #28
   2475c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24760:	add	r3, pc, #912	; 0x390
   24764:	ldrd	r2, [r3]
   24768:	cmp	r1, r3
   2476c:	cmpeq	r0, r2
   24770:	beq	248f4 <_start@@Base+0xf354>
   24774:	add	r3, pc, #900	; 0x384
   24778:	ldrd	r2, [r3]
   2477c:	cmp	r1, r3
   24780:	cmpeq	r0, r2
   24784:	bne	24754 <_start@@Base+0xf1b4>
   24788:	mov	r1, r5
   2478c:	add	r0, r4, #8
   24790:	bl	156c8 <_start@@Base+0x128>
   24794:	add	r3, pc, #876	; 0x36c
   24798:	ldrd	r2, [r3]
   2479c:	cmp	r1, r3
   247a0:	cmpeq	r0, r2
   247a4:	bne	24754 <_start@@Base+0xf1b4>
   247a8:	mov	r1, r5
   247ac:	add	r0, r4, #16
   247b0:	bl	156c8 <_start@@Base+0x128>
   247b4:	add	r3, pc, #852	; 0x354
   247b8:	ldrd	r2, [r3]
   247bc:	cmp	r1, r3
   247c0:	cmpeq	r0, r2
   247c4:	bne	24754 <_start@@Base+0xf1b4>
   247c8:	mov	r1, r5
   247cc:	add	r0, r4, #24
   247d0:	bl	156c8 <_start@@Base+0x128>
   247d4:	add	r3, pc, #828	; 0x33c
   247d8:	ldrd	r2, [r3]
   247dc:	cmp	r1, r3
   247e0:	cmpeq	r0, r2
   247e4:	bne	24754 <_start@@Base+0xf1b4>
   247e8:	add	r6, r4, #32
   247ec:	mov	r0, r6
   247f0:	mov	r1, r5
   247f4:	bl	156c8 <_start@@Base+0x128>
   247f8:	mov	r0, #0
   247fc:	and	r1, r1, #-16777216	; 0xff000000
   24800:	cmp	r1, #1694498816	; 0x65000000
   24804:	cmpeq	r0, #0
   24808:	bne	24754 <_start@@Base+0xf1b4>
   2480c:	sub	r6, r5, r6
   24810:	cmp	r6, #1
   24814:	ble	24754 <_start@@Base+0xf1b4>
   24818:	ldrb	r3, [r4, #33]	; 0x21
   2481c:	cmp	r3, #46	; 0x2e
   24820:	bne	24754 <_start@@Base+0xf1b4>
   24824:	add	r9, r4, #34	; 0x22
   24828:	mov	r0, r9
   2482c:	mov	r1, r5
   24830:	bl	156c8 <_start@@Base+0x128>
   24834:	mov	r2, #0
   24838:	bic	r3, r1, #255	; 0xff
   2483c:	strd	r0, [sp, #8]
   24840:	add	r1, pc, #728	; 0x2d8
   24844:	ldrd	r0, [r1]
   24848:	cmp	r3, r1
   2484c:	cmpeq	r2, r0
   24850:	beq	24e84 <_start@@Base+0xf8e4>
   24854:	add	r3, pc, #716	; 0x2cc
   24858:	ldrd	r2, [r3]
   2485c:	ldrd	r0, [sp, #8]
   24860:	cmp	r1, r3
   24864:	cmpeq	r0, r2
   24868:	beq	24e14 <_start@@Base+0xf874>
   2486c:	mov	r4, r9
   24870:	b	24754 <_start@@Base+0xf1b4>
   24874:	mov	r1, r5
   24878:	add	r0, r4, #8
   2487c:	bl	156c8 <_start@@Base+0x128>
   24880:	add	r3, pc, #680	; 0x2a8
   24884:	ldrd	r2, [r3]
   24888:	cmp	r1, r3
   2488c:	cmpeq	r0, r2
   24890:	bne	24754 <_start@@Base+0xf1b4>
   24894:	add	r6, r4, #16
   24898:	mov	r0, r6
   2489c:	mov	r1, r5
   248a0:	bl	156c8 <_start@@Base+0x128>
   248a4:	mov	r0, #0
   248a8:	and	r1, r1, #-16777216	; 0xff000000
   248ac:	cmp	r1, #1912602624	; 0x72000000
   248b0:	cmpeq	r0, #0
   248b4:	bne	24754 <_start@@Base+0xf1b4>
   248b8:	sub	r6, r5, r6
   248bc:	cmp	r6, #1
   248c0:	ble	24754 <_start@@Base+0xf1b4>
   248c4:	ldrb	r3, [r4, #17]
   248c8:	cmp	r3, #46	; 0x2e
   248cc:	bne	24754 <_start@@Base+0xf1b4>
   248d0:	str	fp, [sp, #68]	; 0x44
   248d4:	str	r7, [sp, #64]	; 0x40
   248d8:	mov	r3, sl
   248dc:	mov	r2, r5
   248e0:	add	r1, r4, #18
   248e4:	mov	r0, r8
   248e8:	add	sp, sp, #28
   248ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248f0:	b	16784 <_start@@Base+0x11e4>
   248f4:	mov	r1, r5
   248f8:	add	r0, r4, #8
   248fc:	bl	156c8 <_start@@Base+0x128>
   24900:	add	r3, pc, #560	; 0x230
   24904:	ldrd	r2, [r3]
   24908:	cmp	r1, r3
   2490c:	cmpeq	r0, r2
   24910:	bhi	249c0 <_start@@Base+0xf420>
   24914:	add	r3, pc, #548	; 0x224
   24918:	ldrd	r2, [r3]
   2491c:	cmp	r1, r3
   24920:	cmpeq	r0, r2
   24924:	bls	24a60 <_start@@Base+0xf4c0>
   24928:	add	r3, pc, #536	; 0x218
   2492c:	ldrd	r2, [r3]
   24930:	cmp	r1, r3
   24934:	cmpeq	r0, r2
   24938:	beq	24d74 <_start@@Base+0xf7d4>
   2493c:	add	r3, pc, #524	; 0x20c
   24940:	ldrd	r2, [r3]
   24944:	cmp	r1, r3
   24948:	cmpeq	r0, r2
   2494c:	bne	24754 <_start@@Base+0xf1b4>
   24950:	add	r6, r4, #16
   24954:	mov	r0, r6
   24958:	mov	r1, r5
   2495c:	bl	156c8 <_start@@Base+0x128>
   24960:	ldr	r3, [pc, #536]	; 24b80 <_start@@Base+0xf5e0>
   24964:	mov	r2, #0
   24968:	and	r3, r3, r1
   2496c:	ldr	r1, [pc, #528]	; 24b84 <_start@@Base+0xf5e4>
   24970:	and	r2, r2, r0
   24974:	cmp	r3, r1
   24978:	mov	r0, #0
   2497c:	cmpeq	r2, r0
   24980:	bne	24754 <_start@@Base+0xf1b4>
   24984:	sub	r6, r5, r6
   24988:	cmp	r6, #2
   2498c:	ble	24754 <_start@@Base+0xf1b4>
   24990:	ldrb	r3, [r4, #18]
   24994:	cmp	r3, #46	; 0x2e
   24998:	bne	24754 <_start@@Base+0xf1b4>
   2499c:	str	fp, [sp, #68]	; 0x44
   249a0:	str	r7, [sp, #64]	; 0x40
   249a4:	mov	r3, sl
   249a8:	mov	r2, r5
   249ac:	add	r1, r4, #19
   249b0:	mov	r0, r8
   249b4:	add	sp, sp, #28
   249b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249bc:	b	1f454 <_start@@Base+0x9eb4>
   249c0:	add	r3, pc, #400	; 0x190
   249c4:	ldrd	r2, [r3]
   249c8:	cmp	r1, r3
   249cc:	cmpeq	r0, r2
   249d0:	beq	24b8c <_start@@Base+0xf5ec>
   249d4:	add	r3, pc, #388	; 0x184
   249d8:	ldrd	r2, [r3]
   249dc:	cmp	r1, r3
   249e0:	cmpeq	r0, r2
   249e4:	bhi	24bf0 <_start@@Base+0xf650>
   249e8:	add	r3, pc, #376	; 0x178
   249ec:	ldrd	r2, [r3]
   249f0:	cmp	r1, r3
   249f4:	cmpeq	r0, r2
   249f8:	bne	24754 <_start@@Base+0xf1b4>
   249fc:	add	r6, r4, #16
   24a00:	mov	r0, r6
   24a04:	mov	r1, r5
   24a08:	bl	156c8 <_start@@Base+0x128>
   24a0c:	add	r3, pc, #348	; 0x15c
   24a10:	ldrd	r2, [r3]
   24a14:	bic	r0, r0, #255	; 0xff
   24a18:	cmp	r1, r3
   24a1c:	cmpeq	r0, r2
   24a20:	bne	24754 <_start@@Base+0xf1b4>
   24a24:	sub	r6, r5, r6
   24a28:	cmp	r6, #7
   24a2c:	ble	24754 <_start@@Base+0xf1b4>
   24a30:	ldrb	r3, [r4, #23]
   24a34:	cmp	r3, #46	; 0x2e
   24a38:	bne	24754 <_start@@Base+0xf1b4>
   24a3c:	str	fp, [sp, #68]	; 0x44
   24a40:	str	r7, [sp, #64]	; 0x40
   24a44:	mov	r3, sl
   24a48:	mov	r2, r5
   24a4c:	add	r1, r4, #24
   24a50:	mov	r0, r8
   24a54:	add	sp, sp, #28
   24a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a5c:	b	16e4c <_start@@Base+0x18ac>
   24a60:	add	r3, pc, #272	; 0x110
   24a64:	ldrd	r2, [r3]
   24a68:	cmp	r1, r3
   24a6c:	cmpeq	r0, r2
   24a70:	bne	24754 <_start@@Base+0xf1b4>
   24a74:	add	r6, r4, #16
   24a78:	mov	r0, r6
   24a7c:	mov	r1, r5
   24a80:	bl	156c8 <_start@@Base+0x128>
   24a84:	ldr	r3, [pc, #244]	; 24b80 <_start@@Base+0xf5e0>
   24a88:	mov	r2, #0
   24a8c:	and	r3, r3, r1
   24a90:	ldr	r1, [pc, #240]	; 24b88 <_start@@Base+0xf5e8>
   24a94:	and	r2, r2, r0
   24a98:	cmp	r3, r1
   24a9c:	mov	r0, #0
   24aa0:	cmpeq	r2, r0
   24aa4:	bne	24754 <_start@@Base+0xf1b4>
   24aa8:	sub	r6, r5, r6
   24aac:	cmp	r6, #2
   24ab0:	ble	24754 <_start@@Base+0xf1b4>
   24ab4:	ldrb	r3, [r4, #18]
   24ab8:	cmp	r3, #46	; 0x2e
   24abc:	bne	24754 <_start@@Base+0xf1b4>
   24ac0:	str	fp, [sp, #68]	; 0x44
   24ac4:	str	r7, [sp, #64]	; 0x40
   24ac8:	mov	r3, sl
   24acc:	mov	r2, r5
   24ad0:	add	r1, r4, #19
   24ad4:	mov	r0, r8
   24ad8:	add	sp, sp, #28
   24adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ae0:	b	16a7c <_start@@Base+0x14dc>
   24ae4:	nop			; (mov r0, r0)
   24ae8:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   24aec:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24af0:	cmnvs	r3, lr, lsr #18
   24af4:			; <UNDEFINED> instruction: 0x46616e74
   24af8:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   24afc:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24b00:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   24b04:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24b08:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   24b0c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   24b10:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   24b14:	cmnpl	r0, #-1073741800	; 0xc0000018
   24b18:	cmnvs	ip, #100, 10	; 0x19000000
   24b1c:	svcvs	0x006d496e
   24b20:	andeq	r0, r0, r0
   24b24:	strbtmi	r6, [pc], -r0, lsl #30
   24b28:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   24b2c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   24b30:	cmnvs	r3, r5, ror #8
   24b34:	cmnmi	r8, #-2147483620	; 0x8000001c
   24b38:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   24b3c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b40:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   24b44:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b48:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   24b4c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b50:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   24b54:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b58:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   24b5c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b60:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   24b64:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b68:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   24b6c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b70:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24b74:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   24b78:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   24b7c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24b80:			; <UNDEFINED> instruction: 0xffff0000
   24b84:	svcvs	0x006f0000
   24b88:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   24b8c:	add	r6, r4, #16
   24b90:	mov	r0, r6
   24b94:	mov	r1, r5
   24b98:	bl	156c8 <_start@@Base+0x128>
   24b9c:	add	r3, pc, #940	; 0x3ac
   24ba0:	ldrd	r2, [r3]
   24ba4:	bic	r0, r0, #255	; 0xff
   24ba8:	cmp	r1, r3
   24bac:	cmpeq	r0, r2
   24bb0:	bne	24754 <_start@@Base+0xf1b4>
   24bb4:	sub	r6, r5, r6
   24bb8:	cmp	r6, #7
   24bbc:	ble	24754 <_start@@Base+0xf1b4>
   24bc0:	ldrb	r3, [r4, #23]
   24bc4:	cmp	r3, #46	; 0x2e
   24bc8:	bne	24754 <_start@@Base+0xf1b4>
   24bcc:	str	fp, [sp, #68]	; 0x44
   24bd0:	str	r7, [sp, #64]	; 0x40
   24bd4:	mov	r3, sl
   24bd8:	mov	r2, r5
   24bdc:	add	r1, r4, #24
   24be0:	mov	r0, r8
   24be4:	add	sp, sp, #28
   24be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bec:	b	16cb8 <_start@@Base+0x1718>
   24bf0:	add	r3, pc, #864	; 0x360
   24bf4:	ldrd	r2, [r3]
   24bf8:	cmp	r1, r3
   24bfc:	cmpeq	r0, r2
   24c00:	bne	24754 <_start@@Base+0xf1b4>
   24c04:	add	r9, r4, #16
   24c08:	mov	r0, r9
   24c0c:	mov	r1, r5
   24c10:	bl	156c8 <_start@@Base+0x128>
   24c14:	mov	r3, r1
   24c18:	bic	r2, r0, #255	; 0xff
   24c1c:	strd	r0, [sp, #8]
   24c20:	add	r1, pc, #824	; 0x338
   24c24:	ldrd	r0, [r1]
   24c28:	cmp	r3, r1
   24c2c:	cmpeq	r2, r0
   24c30:	beq	24dd8 <_start@@Base+0xf838>
   24c34:	add	r3, pc, #812	; 0x32c
   24c38:	ldrd	r2, [r3]
   24c3c:	ldrd	r0, [sp, #8]
   24c40:	cmp	r1, r3
   24c44:	cmpeq	r0, r2
   24c48:	bne	24754 <_start@@Base+0xf1b4>
   24c4c:	add	r6, r4, #24
   24c50:	mov	r0, r6
   24c54:	mov	r1, r5
   24c58:	bl	156c8 <_start@@Base+0x128>
   24c5c:	add	r3, pc, #780	; 0x30c
   24c60:	ldrd	r2, [r3]
   24c64:	mov	r0, #0
   24c68:	bic	r1, r1, #255	; 0xff
   24c6c:	cmp	r1, r3
   24c70:	cmpeq	r0, r2
   24c74:	bne	24754 <_start@@Base+0xf1b4>
   24c78:	sub	r6, r5, r6
   24c7c:	cmp	r6, #3
   24c80:	ble	24754 <_start@@Base+0xf1b4>
   24c84:	ldrb	r3, [r4, #27]
   24c88:	cmp	r3, #46	; 0x2e
   24c8c:	bne	24754 <_start@@Base+0xf1b4>
   24c90:	add	r6, r4, #28
   24c94:	sub	r3, r5, r6
   24c98:	cmp	r3, #8
   24c9c:	bls	24ec0 <_start@@Base+0xf920>
   24ca0:	ldrb	r2, [r4, #35]	; 0x23
   24ca4:	mov	r3, #0
   24ca8:	strd	r2, [sp, #8]
   24cac:	ldrb	r0, [r4, #34]	; 0x22
   24cb0:	lsr	r3, r0, #24
   24cb4:	lsl	r2, r0, #8
   24cb8:	ldrd	r0, [sp, #8]
   24cbc:	orr	r0, r0, r2
   24cc0:	orr	r1, r1, r3
   24cc4:	strd	r0, [sp, #8]
   24cc8:	ldrb	r0, [r4, #33]	; 0x21
   24ccc:	lsr	r3, r0, #16
   24cd0:	lsl	r2, r0, #16
   24cd4:	ldrd	r0, [sp, #8]
   24cd8:	orr	r0, r0, r2
   24cdc:	orr	r1, r1, r3
   24ce0:	strd	r0, [sp, #8]
   24ce4:	ldrb	r0, [r4, #32]
   24ce8:	lsr	r3, r0, #8
   24cec:	ldrd	r0, [sp, #8]
   24cf0:	orr	r1, r1, r3
   24cf4:	mov	r3, r1
   24cf8:	ldrb	r1, [r4, #31]
   24cfc:	orr	r1, r1, r3
   24d00:	ldrb	r2, [r4, #30]
   24d04:	mov	r3, #0
   24d08:	strd	r2, [sp, #8]
   24d0c:	ldr	ip, [sp, #8]
   24d10:	lsl	r3, ip, #8
   24d14:	orr	r3, r3, r1
   24d18:	ldrb	r0, [r4, #29]
   24d1c:	mov	r1, #0
   24d20:	strd	r0, [sp, #8]
   24d24:	ldr	ip, [sp, #8]
   24d28:	lsl	r1, ip, #16
   24d2c:	orr	r3, r3, r1
   24d30:	ldrb	r0, [r4, #28]
   24d34:	mov	r1, #0
   24d38:	mov	r2, #0
   24d3c:	strd	r0, [sp, #16]
   24d40:	ldr	r1, [sp, #16]
   24d44:	lsl	r1, r1, #24
   24d48:	str	r1, [sp, #12]
   24d4c:	mov	r1, #0
   24d50:	str	r1, [sp, #8]
   24d54:	ldrd	r0, [sp, #8]
   24d58:	orr	r1, r1, r3
   24d5c:	and	r3, r1, #-16777216	; 0xff000000
   24d60:	cmp	r3, #2013265920	; 0x78000000
   24d64:	cmpeq	r2, #0
   24d68:	beq	24ef0 <_start@@Base+0xf950>
   24d6c:	mov	r4, r6
   24d70:	b	24754 <_start@@Base+0xf1b4>
   24d74:	add	r6, r4, #16
   24d78:	mov	r0, r6
   24d7c:	mov	r1, r5
   24d80:	bl	156c8 <_start@@Base+0x128>
   24d84:	add	r3, pc, #492	; 0x1ec
   24d88:	ldrd	r2, [r3]
   24d8c:	mov	r0, #0
   24d90:	cmp	r1, r3
   24d94:	cmpeq	r0, r2
   24d98:	bne	24754 <_start@@Base+0xf1b4>
   24d9c:	sub	r6, r5, r6
   24da0:	cmp	r6, #4
   24da4:	ble	24754 <_start@@Base+0xf1b4>
   24da8:	ldrb	r3, [r4, #20]
   24dac:	cmp	r3, #46	; 0x2e
   24db0:	bne	24754 <_start@@Base+0xf1b4>
   24db4:	str	fp, [sp, #68]	; 0x44
   24db8:	str	r7, [sp, #64]	; 0x40
   24dbc:	mov	r3, sl
   24dc0:	mov	r2, r5
   24dc4:	add	r1, r4, #21
   24dc8:	mov	r0, r8
   24dcc:	add	sp, sp, #28
   24dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24dd4:	b	171a8 <_start@@Base+0x1c08>
   24dd8:	sub	r9, r5, r9
   24ddc:	cmp	r9, #7
   24de0:	ble	24754 <_start@@Base+0xf1b4>
   24de4:	ldrb	r3, [r4, #23]
   24de8:	cmp	r3, #46	; 0x2e
   24dec:	bne	24754 <_start@@Base+0xf1b4>
   24df0:	str	fp, [sp, #68]	; 0x44
   24df4:	str	r7, [sp, #64]	; 0x40
   24df8:	mov	r3, sl
   24dfc:	mov	r2, r5
   24e00:	add	r1, r4, #24
   24e04:	mov	r0, r8
   24e08:	add	sp, sp, #28
   24e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e10:	b	17044 <_start@@Base+0x1aa4>
   24e14:	add	r6, r4, #42	; 0x2a
   24e18:	mov	r0, r6
   24e1c:	mov	r1, r5
   24e20:	bl	156c8 <_start@@Base+0x128>
   24e24:	ldr	r3, [pc, #340]	; 24f80 <_start@@Base+0xf9e0>
   24e28:	mov	r2, #0
   24e2c:	and	r3, r3, r1
   24e30:	ldr	r1, [pc, #332]	; 24f84 <_start@@Base+0xf9e4>
   24e34:	and	r2, r2, r0
   24e38:	cmp	r3, r1
   24e3c:	mov	r0, #0
   24e40:	cmpeq	r2, r0
   24e44:	bne	2486c <_start@@Base+0xf2cc>
   24e48:	str	fp, [sp]
   24e4c:	mov	r2, r5
   24e50:	mov	r0, r8
   24e54:	mov	r3, #2
   24e58:	mov	r1, r6
   24e5c:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   24e60:	cmp	r6, r0
   24e64:	mov	r4, r0
   24e68:	beq	2486c <_start@@Base+0xf2cc>
   24e6c:	mov	r0, #0
   24e70:	mov	r1, #0
   24e74:	mov	r3, #0
   24e78:	strd	r0, [r7]
   24e7c:	str	r3, [sl]
   24e80:	b	24754 <_start@@Base+0xf1b4>
   24e84:	str	fp, [sp]
   24e88:	mov	r2, r5
   24e8c:	mov	r0, r8
   24e90:	mov	r3, #3
   24e94:	mov	r1, r9
   24e98:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   24e9c:	cmp	r9, r0
   24ea0:	mov	r4, r0
   24ea4:	beq	24754 <_start@@Base+0xf1b4>
   24ea8:	mov	r0, #17
   24eac:	mov	r1, #0
   24eb0:	mov	r3, #0
   24eb4:	strd	r0, [r7]
   24eb8:	str	r3, [sl]
   24ebc:	b	24754 <_start@@Base+0xf1b4>
   24ec0:	sub	r3, r3, #1
   24ec4:	cmp	r3, #7
   24ec8:	ldrls	pc, [pc, r3, lsl #2]
   24ecc:	b	24d6c <_start@@Base+0xf7cc>
   24ed0:			; <UNDEFINED> instruction: 0x00024fb0
   24ed4:	andeq	r4, r2, r8, lsr #31
   24ed8:	andeq	r4, r2, r0, lsr #31
   24edc:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   24ee0:	andeq	r4, r2, r8, lsl #31
   24ee4:	andeq	r4, r2, ip, lsr pc
   24ee8:	andeq	r4, r2, ip, lsr #30
   24eec:	andeq	r4, r2, r0, lsr #25
   24ef0:	str	fp, [sp]
   24ef4:	mov	r2, r5
   24ef8:	mov	r0, r8
   24efc:	mov	r3, #1
   24f00:	mov	r1, r6
   24f04:	bl	2fae8 <flatcc_json_parser_match_constant@@Base>
   24f08:	cmp	r6, r0
   24f0c:	mov	r4, r0
   24f10:	beq	24754 <_start@@Base+0xf1b4>
   24f14:	mov	r3, #0
   24f18:	mov	r2, #0
   24f1c:	strd	r2, [r7]
   24f20:	ldr	r3, [sp, #8]
   24f24:	str	r3, [sl]
   24f28:	b	24754 <_start@@Base+0xf1b4>
   24f2c:	mov	r2, #0
   24f30:	mov	r3, #0
   24f34:	strd	r2, [sp, #8]
   24f38:	b	24cac <_start@@Base+0xf70c>
   24f3c:	mov	r2, #0
   24f40:	mov	r3, #0
   24f44:	strd	r2, [sp, #8]
   24f48:	b	24cc8 <_start@@Base+0xf728>
   24f4c:	nop			; (mov r0, r0)
   24f50:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24f54:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   24f58:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   24f5c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24f60:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24f64:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   24f68:	rsbsvc	r7, r4, r5, ror #18
   24f6c:	svcvs	0x0074656d
   24f70:	andeq	r0, r0, r0
   24f74:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24f78:	andeq	r0, r0, r0
   24f7c:	svcvs	0x006c6f72
   24f80:			; <UNDEFINED> instruction: 0xffff0000
   24f84:	cmnvs	ip, r0
   24f88:	mov	r2, #0
   24f8c:	mov	r3, #0
   24f90:	strd	r2, [sp, #8]
   24f94:	b	24ce4 <_start@@Base+0xf744>
   24f98:	mov	r3, #0
   24f9c:	b	24cf8 <_start@@Base+0xf758>
   24fa0:	mov	r1, #0
   24fa4:	b	24d00 <_start@@Base+0xf760>
   24fa8:	mov	r3, #0
   24fac:	b	24d18 <_start@@Base+0xf778>
   24fb0:	mov	r3, #0
   24fb4:	b	24d30 <_start@@Base+0xf790>

00024fb8 <test_json@@Base>:
   24fb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   24fbc:	sub	sp, sp, #356	; 0x164
   24fc0:	mov	r5, r0
   24fc4:	ldr	r4, [sp, #388]	; 0x184
   24fc8:	add	r0, sp, #120	; 0x78
   24fcc:	mov	r8, r2
   24fd0:	mov	r7, r3
   24fd4:	mov	r6, r1
   24fd8:	ldr	r9, [sp, #384]	; 0x180
   24fdc:	bl	261ac <flatcc_builder_init@@Base>
   24fe0:	mov	r1, #0
   24fe4:	add	r0, sp, #72	; 0x48
   24fe8:	bl	40e04 <flatcc_json_printer_init_dynamic_buffer@@Base>
   24fec:	lsr	r3, r4, #3
   24ff0:	tst	r4, #16
   24ff4:	and	r3, r3, #1
   24ff8:	lsr	r1, r4, #1
   24ffc:	and	r1, r1, #1
   25000:	lsr	r2, r4, #2
   25004:	strb	r3, [sp, #101]	; 0x65
   25008:	movne	r3, #2
   2500c:	and	r2, r2, #1
   25010:	strb	r1, [sp, #99]	; 0x63
   25014:	strbne	r3, [sp, #97]	; 0x61
   25018:	and	r1, r4, #1
   2501c:	tst	r4, #32
   25020:	strb	r2, [sp, #100]	; 0x64
   25024:	strb	r1, [sp, #98]	; 0x62
   25028:	beq	25044 <test_json@@Base+0x8c>
   2502c:	mov	r3, #2
   25030:	mov	r2, #1
   25034:	strb	r3, [sp, #97]	; 0x61
   25038:	mov	r3, #0
   2503c:	strb	r2, [sp, #98]	; 0x62
   25040:	strb	r3, [sp, #99]	; 0x63
   25044:	mov	r0, r6
   25048:	bl	145a0 <strlen@plt>
   2504c:	ldr	r2, [r5, #4]
   25050:	ldr	r3, [r5]
   25054:	add	r1, sp, #28
   25058:	str	r2, [sp, #8]
   2505c:	str	r3, [sp, #4]
   25060:	str	r9, [sp]
   25064:	mov	r2, r6
   25068:	mov	r3, r0
   2506c:	add	r0, sp, #120	; 0x78
   25070:	bl	33d14 <flatcc_json_parser_table_as_root@@Base>
   25074:	cmp	r0, r7
   25078:	beq	25180 <test_json@@Base+0x1c8>
   2507c:	cmp	r7, #0
   25080:	ldr	r5, [pc, #544]	; 252a8 <test_json@@Base+0x2f0>
   25084:	beq	251fc <test_json@@Base+0x244>
   25088:	cmp	r0, #0
   2508c:	bne	25134 <test_json@@Base+0x17c>
   25090:	mov	r0, r7
   25094:	ldr	r4, [r5]
   25098:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   2509c:	ldr	r2, [sp, #392]	; 0x188
   250a0:	ldr	r1, [pc, #516]	; 252ac <test_json@@Base+0x2f4>
   250a4:	mov	r3, r0
   250a8:	mov	r0, r4
   250ac:	bl	145ac <fprintf@plt>
   250b0:	mov	r2, r6
   250b4:	ldr	r0, [r5]
   250b8:	ldr	r1, [pc, #496]	; 252b0 <test_json@@Base+0x2f8>
   250bc:	bl	145ac <fprintf@plt>
   250c0:	ldr	r3, [sp, #48]	; 0x30
   250c4:	cmp	r3, #1
   250c8:	movgt	r4, #0
   250cc:	movgt	r6, #32
   250d0:	ble	250f4 <test_json@@Base+0x13c>
   250d4:	ldr	r1, [r5]
   250d8:	mov	r0, r6
   250dc:	bl	145f4 <fputc@plt>
   250e0:	ldr	r3, [sp, #48]	; 0x30
   250e4:	add	r4, r4, #1
   250e8:	sub	r3, r3, #1
   250ec:	cmp	r3, r4
   250f0:	bgt	250d4 <test_json@@Base+0x11c>
   250f4:	ldr	r3, [r5]
   250f8:	mov	r2, #2
   250fc:	mov	r1, #1
   25100:	ldr	r0, [pc, #428]	; 252b4 <test_json@@Base+0x2fc>
   25104:	bl	14570 <fwrite@plt>
   25108:	mov	r4, #0
   2510c:	mvn	r5, #0
   25110:	mov	r0, r4
   25114:	bl	2b570 <flatcc_builder_aligned_free@@Base>
   25118:	add	r0, sp, #120	; 0x78
   2511c:	bl	26418 <flatcc_builder_clear@@Base>
   25120:	add	r0, sp, #72	; 0x48
   25124:	bl	40f14 <flatcc_json_printer_clear@@Base>
   25128:	mov	r0, r5
   2512c:	add	sp, sp, #356	; 0x164
   25130:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25134:	ldr	r4, [r5]
   25138:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   2513c:	ldr	r2, [sp, #392]	; 0x188
   25140:	ldr	r1, [pc, #368]	; 252b8 <test_json@@Base+0x300>
   25144:	mov	r3, r0
   25148:	mov	r0, r4
   2514c:	bl	145ac <fprintf@plt>
   25150:	mov	r0, r7
   25154:	ldr	r4, [r5]
   25158:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   2515c:	ldr	r1, [pc, #344]	; 252bc <test_json@@Base+0x304>
   25160:	mov	r2, r0
   25164:	mov	r0, r4
   25168:	bl	145ac <fprintf@plt>
   2516c:	mov	r2, r6
   25170:	ldr	r0, [r5]
   25174:	ldr	r1, [pc, #308]	; 252b0 <test_json@@Base+0x2f8>
   25178:	bl	145ac <fprintf@plt>
   2517c:	b	250c0 <test_json@@Base+0x108>
   25180:	cmp	r7, #0
   25184:	movne	r4, #0
   25188:	movne	r5, r4
   2518c:	bne	25110 <test_json@@Base+0x158>
   25190:	add	r1, sp, #20
   25194:	add	r0, sp, #120	; 0x78
   25198:	bl	2b460 <flatcc_builder_finalize_aligned_buffer@@Base>
   2519c:	ldr	r3, [r5, #12]
   251a0:	ldr	r2, [r5]
   251a4:	ldr	r1, [sp, #20]
   251a8:	mov	r4, r0
   251ac:	bl	2c85c <flatcc_verify_table_as_root@@Base>
   251b0:	cmp	r0, #0
   251b4:	beq	25218 <test_json@@Base+0x260>
   251b8:	ldr	r5, [pc, #232]	; 252a8 <test_json@@Base+0x2f0>
   251bc:	ldr	r6, [r5]
   251c0:	bl	2bb3c <flatcc_verify_error_string@@Base>
   251c4:	ldr	r3, [sp, #392]	; 0x188
   251c8:	ldr	r2, [pc, #240]	; 252c0 <test_json@@Base+0x308>
   251cc:	ldr	r1, [pc, #240]	; 252c4 <test_json@@Base+0x30c>
   251d0:	str	r0, [sp]
   251d4:	mov	r0, r6
   251d8:	bl	145ac <fprintf@plt>
   251dc:	cmp	r4, #0
   251e0:	beq	251f4 <test_json@@Base+0x23c>
   251e4:	ldr	r2, [r5]
   251e8:	ldr	r1, [sp, #20]
   251ec:	mov	r0, r4
   251f0:	bl	17d34 <_start@@Base+0x2794>
   251f4:	mvn	r5, #0
   251f8:	b	25110 <test_json@@Base+0x158>
   251fc:	ldr	r4, [r5]
   25200:	bl	2f1bc <flatcc_json_parser_error_string@@Base>
   25204:	ldr	r2, [sp, #392]	; 0x188
   25208:	ldr	r1, [pc, #184]	; 252c8 <test_json@@Base+0x310>
   2520c:	mov	r3, r0
   25210:	mov	r0, r4
   25214:	b	250ac <test_json@@Base+0xf4>
   25218:	ldr	r1, [r5, #8]
   2521c:	ldr	r3, [r5]
   25220:	ldr	r2, [sp, #20]
   25224:	str	r1, [sp]
   25228:	add	r0, sp, #72	; 0x48
   2522c:	mov	r1, r4
   25230:	bl	40810 <flatcc_json_printer_table_as_root@@Base>
   25234:	add	r1, sp, #24
   25238:	add	r0, sp, #72	; 0x48
   2523c:	bl	40ea0 <flatcc_json_printer_get_buffer@@Base>
   25240:	subs	r6, r0, #0
   25244:	beq	2525c <test_json@@Base+0x2a4>
   25248:	mov	r1, r6
   2524c:	mov	r0, r8
   25250:	bl	14528 <strcmp@plt>
   25254:	subs	r5, r0, #0
   25258:	beq	25110 <test_json@@Base+0x158>
   2525c:	ldr	r5, [pc, #68]	; 252a8 <test_json@@Base+0x2f0>
   25260:	ldr	r2, [sp, #392]	; 0x188
   25264:	ldr	r1, [pc, #96]	; 252cc <test_json@@Base+0x314>
   25268:	ldr	r0, [r5]
   2526c:	bl	145ac <fprintf@plt>
   25270:	mov	r2, r6
   25274:	ldr	r0, [r5]
   25278:	ldr	r1, [pc, #48]	; 252b0 <test_json@@Base+0x2f8>
   2527c:	bl	145ac <fprintf@plt>
   25280:	ldr	r3, [r5]
   25284:	mov	r2, #10
   25288:	mov	r1, #1
   2528c:	ldr	r0, [pc, #60]	; 252d0 <test_json@@Base+0x318>
   25290:	bl	14570 <fwrite@plt>
   25294:	mov	r2, r8
   25298:	ldr	r0, [r5]
   2529c:	ldr	r1, [pc, #12]	; 252b0 <test_json@@Base+0x2f8>
   252a0:	bl	145ac <fprintf@plt>
   252a4:	b	251dc <test_json@@Base+0x224>
   252a8:			; <UNDEFINED> instruction: 0x000583b0
   252ac:	strdeq	r1, [r4], -r4
   252b0:	andeq	r1, r4, r0, lsr pc
   252b4:	andeq	r1, r4, r8, ror #27
   252b8:	andeq	r1, r4, ip, lsr #29
   252bc:	ldrdeq	r1, [r4], -r4
   252c0:	andeq	r1, r4, ip, ror #27
   252c4:	andeq	r1, r4, r8, lsr lr
   252c8:	andeq	r1, r4, r4, asr #27
   252cc:	andeq	r1, r4, r0, ror #28
   252d0:	muleq	r4, r8, lr

000252d4 <edge_case_tests@@Base>:
   252d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252d8:	sub	sp, sp, #12
   252dc:	mov	r5, #0
   252e0:	mov	r3, #155	; 0x9b
   252e4:	str	r3, [sp, #4]
   252e8:	mov	r2, r5
   252ec:	mov	r3, r5
   252f0:	str	r5, [sp]
   252f4:	ldr	r1, [pc, #632]	; 25574 <edge_case_tests@@Base+0x2a0>
   252f8:	ldr	r0, [pc, #632]	; 25578 <edge_case_tests@@Base+0x2a4>
   252fc:	bl	18464 <_start@@Base+0x2ec4>
   25300:	ldr	r9, [pc, #628]	; 2557c <edge_case_tests@@Base+0x2a8>
   25304:	ldr	sl, [pc, #628]	; 25580 <edge_case_tests@@Base+0x2ac>
   25308:	mov	r3, #168	; 0xa8
   2530c:	mov	r2, r5
   25310:	mov	r1, r9
   25314:	str	r3, [sp, #4]
   25318:	str	r5, [sp]
   2531c:	mov	r3, #2
   25320:	mov	r7, #2
   25324:	ldr	r8, [pc, #600]	; 25584 <edge_case_tests@@Base+0x2b0>
   25328:	ldr	fp, [pc, #600]	; 25588 <edge_case_tests@@Base+0x2b4>
   2532c:	mov	r6, #1
   25330:	mov	r4, r0
   25334:	mov	r0, sl
   25338:	bl	18464 <_start@@Base+0x2ec4>
   2533c:	mov	ip, #172	; 0xac
   25340:	mov	r3, r5
   25344:	stm	sp, {r7, ip}
   25348:	mov	r2, r5
   2534c:	ldr	r1, [pc, #568]	; 2558c <edge_case_tests@@Base+0x2b8>
   25350:	orr	r4, r4, r0
   25354:	ldr	r0, [pc, #564]	; 25590 <edge_case_tests@@Base+0x2bc>
   25358:	bl	18464 <_start@@Base+0x2ec4>
   2535c:	mov	r1, #176	; 0xb0
   25360:	str	r1, [sp, #4]
   25364:	mov	r1, #4
   25368:	mov	r3, r7
   2536c:	mov	r2, r5
   25370:	str	r1, [sp]
   25374:	ldr	r1, [pc, #536]	; 25594 <edge_case_tests@@Base+0x2c0>
   25378:	orr	r4, r4, r0
   2537c:	mov	r0, sl
   25380:	bl	18464 <_start@@Base+0x2ec4>
   25384:	mov	r1, #180	; 0xb4
   25388:	str	r1, [sp, #4]
   2538c:	mov	r1, #8
   25390:	mov	r3, r5
   25394:	mov	r2, r5
   25398:	str	r1, [sp]
   2539c:	ldr	r1, [pc, #500]	; 25598 <edge_case_tests@@Base+0x2c4>
   253a0:	ldr	sl, [pc, #500]	; 2559c <edge_case_tests@@Base+0x2c8>
   253a4:	orr	r4, r4, r0
   253a8:	ldr	r0, [pc, #496]	; 255a0 <edge_case_tests@@Base+0x2cc>
   253ac:	bl	18464 <_start@@Base+0x2ec4>
   253b0:	mov	r1, #195	; 0xc3
   253b4:	mov	r3, r7
   253b8:	mov	r2, r5
   253bc:	str	r1, [sp, #4]
   253c0:	str	r5, [sp]
   253c4:	mov	r1, r9
   253c8:	orr	r4, r4, r0
   253cc:	ldr	r0, [pc, #464]	; 255a4 <edge_case_tests@@Base+0x2d0>
   253d0:	bl	18464 <_start@@Base+0x2ec4>
   253d4:	mov	r3, #199	; 0xc7
   253d8:	mov	r2, r5
   253dc:	mov	r1, r8
   253e0:	str	r3, [sp, #4]
   253e4:	str	r5, [sp]
   253e8:	mov	r3, r6
   253ec:	orr	r4, r4, r0
   253f0:	mov	r0, fp
   253f4:	bl	18464 <_start@@Base+0x2ec4>
   253f8:	mov	r3, #203	; 0xcb
   253fc:	mov	r2, r5
   25400:	str	r3, [sp, #4]
   25404:	ldr	r1, [pc, #412]	; 255a8 <edge_case_tests@@Base+0x2d4>
   25408:	mov	r3, r6
   2540c:	str	r6, [sp]
   25410:	orr	r4, r4, r0
   25414:	mov	r0, fp
   25418:	bl	18464 <_start@@Base+0x2ec4>
   2541c:	mov	ip, #209	; 0xd1
   25420:	mov	r3, r6
   25424:	mov	r2, r5
   25428:	mov	r1, r8
   2542c:	str	ip, [sp, #4]
   25430:	str	r5, [sp]
   25434:	orr	r4, r4, r0
   25438:	ldr	r0, [pc, #364]	; 255ac <edge_case_tests@@Base+0x2d8>
   2543c:	bl	18464 <_start@@Base+0x2ec4>
   25440:	mov	ip, #217	; 0xd9
   25444:	mov	r3, r7
   25448:	mov	r2, r5
   2544c:	mov	r1, r9
   25450:	str	ip, [sp, #4]
   25454:	str	r5, [sp]
   25458:	orr	r4, r4, r0
   2545c:	ldr	r0, [pc, #332]	; 255b0 <edge_case_tests@@Base+0x2dc>
   25460:	bl	18464 <_start@@Base+0x2ec4>
   25464:	mov	ip, #221	; 0xdd
   25468:	mov	r3, r5
   2546c:	mov	r2, r5
   25470:	str	ip, [sp, #4]
   25474:	str	r7, [sp]
   25478:	ldr	r1, [pc, #268]	; 2558c <edge_case_tests@@Base+0x2b8>
   2547c:	orr	r4, r4, r0
   25480:	ldr	r0, [pc, #300]	; 255b4 <edge_case_tests@@Base+0x2e0>
   25484:	bl	18464 <_start@@Base+0x2ec4>
   25488:	mov	ip, #225	; 0xe1
   2548c:	mov	r3, #4
   25490:	str	ip, [sp, #4]
   25494:	str	r3, [sp]
   25498:	mov	r2, r5
   2549c:	mov	r3, r7
   254a0:	ldr	r1, [pc, #236]	; 25594 <edge_case_tests@@Base+0x2c0>
   254a4:	orr	r4, r4, r0
   254a8:	ldr	r0, [pc, #256]	; 255b0 <edge_case_tests@@Base+0x2dc>
   254ac:	bl	18464 <_start@@Base+0x2ec4>
   254b0:	mov	r1, #229	; 0xe5
   254b4:	mov	r3, #8
   254b8:	str	r3, [sp]
   254bc:	mov	r2, r5
   254c0:	mov	r3, r5
   254c4:	str	r1, [sp, #4]
   254c8:	ldr	r1, [pc, #232]	; 255b8 <edge_case_tests@@Base+0x2e4>
   254cc:	orr	r4, r4, r0
   254d0:	ldr	r0, [pc, #228]	; 255bc <edge_case_tests@@Base+0x2e8>
   254d4:	bl	18464 <_start@@Base+0x2ec4>
   254d8:	mov	ip, #233	; 0xe9
   254dc:	mov	r3, r7
   254e0:	mov	r1, r9
   254e4:	mov	r2, r5
   254e8:	str	ip, [sp, #4]
   254ec:	str	r5, [sp]
   254f0:	orr	r4, r4, r0
   254f4:	ldr	r0, [pc, #196]	; 255c0 <edge_case_tests@@Base+0x2ec>
   254f8:	bl	18464 <_start@@Base+0x2ec4>
   254fc:	mov	ip, #237	; 0xed
   25500:	mov	r3, r6
   25504:	mov	r2, r5
   25508:	mov	r1, r8
   2550c:	str	ip, [sp, #4]
   25510:	str	r5, [sp]
   25514:	orr	r4, r4, r0
   25518:	mov	r0, sl
   2551c:	bl	18464 <_start@@Base+0x2ec4>
   25520:	mov	ip, #241	; 0xf1
   25524:	mov	r3, r6
   25528:	mov	r2, r5
   2552c:	str	ip, [sp, #4]
   25530:	str	r6, [sp]
   25534:	ldr	r1, [pc, #108]	; 255a8 <edge_case_tests@@Base+0x2d4>
   25538:	orr	r4, r4, r0
   2553c:	mov	r0, sl
   25540:	bl	18464 <_start@@Base+0x2ec4>
   25544:	mov	ip, #247	; 0xf7
   25548:	str	r5, [sp]
   2554c:	mov	r3, r6
   25550:	mov	r2, r5
   25554:	mov	r1, r8
   25558:	str	ip, [sp, #4]
   2555c:	orr	r4, r4, r0
   25560:	ldr	r0, [pc, #92]	; 255c4 <edge_case_tests@@Base+0x2f0>
   25564:	bl	18464 <_start@@Base+0x2ec4>
   25568:	orr	r0, r4, r0
   2556c:	add	sp, sp, #12
   25570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25574:	andeq	r1, r4, ip, asr #30
   25578:	andeq	r1, r4, ip, ror #30
   2557c:	andeq	r1, r4, r0, lsr #31
   25580:	andeq	r1, r4, r4, asr #31
   25584:	andeq	r2, r4, r4, lsr #3
   25588:	andeq	r2, r4, r0, asr #3
   2558c:	andeq	r1, r4, r8, ror #31
   25590:	andeq	r2, r4, r8
   25594:	andeq	r2, r4, r0, lsr r0
   25598:	andeq	r2, r4, r4, asr #32
   2559c:	andeq	r2, r4, r0, lsl r4
   255a0:	andeq	r2, r4, r8, asr r1
   255a4:	andeq	r2, r4, ip, ror r1
   255a8:	strdeq	r2, [r4], -r4
   255ac:	andeq	r2, r4, ip, lsl #4
   255b0:	andeq	r2, r4, r0, lsl #5
   255b4:	andeq	r2, r4, r0, lsr #5
   255b8:	andeq	r2, r4, r4, asr #5
   255bc:	ldrdeq	r2, [r4], -ip
   255c0:	strdeq	r2, [r4], -r0
   255c4:	andeq	r2, r4, ip, lsr r4

000255c8 <error_case_tests@@Base>:
   255c8:	push	{r4, r5, lr}
   255cc:	sub	sp, sp, #12
   255d0:	ldr	r3, [pc, #652]	; 25864 <error_case_tests@@Base+0x29c>
   255d4:	mov	r4, #0
   255d8:	str	r3, [sp, #4]
   255dc:	mov	r1, r4
   255e0:	mov	r3, r4
   255e4:	str	r4, [sp]
   255e8:	mov	r2, #13
   255ec:	ldr	r0, [pc, #628]	; 25868 <error_case_tests@@Base+0x2a0>
   255f0:	bl	18464 <_start@@Base+0x2ec4>
   255f4:	ldr	r2, [pc, #624]	; 2586c <error_case_tests@@Base+0x2a4>
   255f8:	mov	r3, r4
   255fc:	mov	r1, r4
   25600:	str	r2, [sp, #4]
   25604:	str	r4, [sp]
   25608:	mov	r2, #13
   2560c:	mov	r5, r0
   25610:	ldr	r0, [pc, #600]	; 25870 <error_case_tests@@Base+0x2a8>
   25614:	bl	18464 <_start@@Base+0x2ec4>
   25618:	ldr	r2, [pc, #596]	; 25874 <error_case_tests@@Base+0x2ac>
   2561c:	mov	r3, r4
   25620:	mov	r1, r4
   25624:	str	r2, [sp, #4]
   25628:	str	r4, [sp]
   2562c:	mov	r2, #13
   25630:	orr	r5, r5, r0
   25634:	ldr	r0, [pc, #572]	; 25878 <error_case_tests@@Base+0x2b0>
   25638:	bl	18464 <_start@@Base+0x2ec4>
   2563c:	ldr	r2, [pc, #568]	; 2587c <error_case_tests@@Base+0x2b4>
   25640:	mov	r3, r4
   25644:	mov	r1, r4
   25648:	str	r2, [sp, #4]
   2564c:	str	r4, [sp]
   25650:	mov	r2, #13
   25654:	orr	r5, r5, r0
   25658:	ldr	r0, [pc, #544]	; 25880 <error_case_tests@@Base+0x2b8>
   2565c:	bl	18464 <_start@@Base+0x2ec4>
   25660:	ldr	r2, [pc, #540]	; 25884 <error_case_tests@@Base+0x2bc>
   25664:	mov	r3, r4
   25668:	mov	r1, r4
   2566c:	str	r2, [sp, #4]
   25670:	str	r4, [sp]
   25674:	mov	r2, #13
   25678:	orr	r5, r5, r0
   2567c:	ldr	r0, [pc, #516]	; 25888 <error_case_tests@@Base+0x2c0>
   25680:	bl	18464 <_start@@Base+0x2ec4>
   25684:	mov	r2, #296	; 0x128
   25688:	mov	r3, r4
   2568c:	mov	r1, r4
   25690:	str	r2, [sp, #4]
   25694:	str	r4, [sp]
   25698:	mov	r2, #13
   2569c:	orr	r5, r5, r0
   256a0:	ldr	r0, [pc, #484]	; 2588c <error_case_tests@@Base+0x2c4>
   256a4:	bl	18464 <_start@@Base+0x2ec4>
   256a8:	ldr	r2, [pc, #480]	; 25890 <error_case_tests@@Base+0x2c8>
   256ac:	mov	r3, r4
   256b0:	mov	r1, r4
   256b4:	str	r2, [sp, #4]
   256b8:	str	r4, [sp]
   256bc:	mov	r2, #13
   256c0:	orr	r5, r5, r0
   256c4:	ldr	r0, [pc, #456]	; 25894 <error_case_tests@@Base+0x2cc>
   256c8:	bl	18464 <_start@@Base+0x2ec4>
   256cc:	ldr	r2, [pc, #452]	; 25898 <error_case_tests@@Base+0x2d0>
   256d0:	mov	r3, r4
   256d4:	mov	r1, r4
   256d8:	str	r2, [sp, #4]
   256dc:	str	r4, [sp]
   256e0:	mov	r2, #13
   256e4:	orr	r5, r5, r0
   256e8:	ldr	r0, [pc, #428]	; 2589c <error_case_tests@@Base+0x2d4>
   256ec:	bl	18464 <_start@@Base+0x2ec4>
   256f0:	ldr	r2, [pc, #424]	; 258a0 <error_case_tests@@Base+0x2d8>
   256f4:	mov	r3, r4
   256f8:	mov	r1, r4
   256fc:	str	r2, [sp, #4]
   25700:	str	r4, [sp]
   25704:	mov	r2, #13
   25708:	orr	r5, r5, r0
   2570c:	ldr	r0, [pc, #400]	; 258a4 <error_case_tests@@Base+0x2dc>
   25710:	bl	18464 <_start@@Base+0x2ec4>
   25714:	ldr	r2, [pc, #396]	; 258a8 <error_case_tests@@Base+0x2e0>
   25718:	mov	r3, r4
   2571c:	mov	r1, r4
   25720:	str	r2, [sp, #4]
   25724:	str	r4, [sp]
   25728:	mov	r2, #13
   2572c:	orr	r5, r5, r0
   25730:	ldr	r0, [pc, #372]	; 258ac <error_case_tests@@Base+0x2e4>
   25734:	bl	18464 <_start@@Base+0x2ec4>
   25738:	mov	r2, #324	; 0x144
   2573c:	mov	r3, r4
   25740:	mov	r1, r4
   25744:	str	r2, [sp, #4]
   25748:	str	r4, [sp]
   2574c:	mov	r2, #13
   25750:	orr	r5, r5, r0
   25754:	ldr	r0, [pc, #340]	; 258b0 <error_case_tests@@Base+0x2e8>
   25758:	bl	18464 <_start@@Base+0x2ec4>
   2575c:	ldr	r2, [pc, #336]	; 258b4 <error_case_tests@@Base+0x2ec>
   25760:	mov	r3, r4
   25764:	mov	r1, r4
   25768:	str	r2, [sp, #4]
   2576c:	str	r4, [sp]
   25770:	mov	r2, #13
   25774:	orr	r5, r5, r0
   25778:	ldr	r0, [pc, #312]	; 258b8 <error_case_tests@@Base+0x2f0>
   2577c:	bl	18464 <_start@@Base+0x2ec4>
   25780:	mov	r2, #328	; 0x148
   25784:	mov	r3, r4
   25788:	mov	r1, r4
   2578c:	str	r2, [sp, #4]
   25790:	str	r4, [sp]
   25794:	mov	r2, #13
   25798:	orr	r5, r5, r0
   2579c:	ldr	r0, [pc, #280]	; 258bc <error_case_tests@@Base+0x2f4>
   257a0:	bl	18464 <_start@@Base+0x2ec4>
   257a4:	ldr	r2, [pc, #276]	; 258c0 <error_case_tests@@Base+0x2f8>
   257a8:	mov	r3, r4
   257ac:	mov	r1, r4
   257b0:	str	r2, [sp, #4]
   257b4:	str	r4, [sp]
   257b8:	mov	r2, #13
   257bc:	orr	r5, r5, r0
   257c0:	ldr	r0, [pc, #252]	; 258c4 <error_case_tests@@Base+0x2fc>
   257c4:	bl	18464 <_start@@Base+0x2ec4>
   257c8:	ldr	r2, [pc, #248]	; 258c8 <error_case_tests@@Base+0x300>
   257cc:	mov	r3, r4
   257d0:	mov	r1, r4
   257d4:	str	r2, [sp, #4]
   257d8:	str	r4, [sp]
   257dc:	mov	r2, #13
   257e0:	orr	r5, r5, r0
   257e4:	ldr	r0, [pc, #224]	; 258cc <error_case_tests@@Base+0x304>
   257e8:	bl	18464 <_start@@Base+0x2ec4>
   257ec:	mov	r2, #336	; 0x150
   257f0:	mov	r3, r4
   257f4:	mov	r1, r4
   257f8:	str	r2, [sp, #4]
   257fc:	str	r4, [sp]
   25800:	mov	r2, #13
   25804:	orr	r5, r5, r0
   25808:	ldr	r0, [pc, #192]	; 258d0 <error_case_tests@@Base+0x308>
   2580c:	bl	18464 <_start@@Base+0x2ec4>
   25810:	mov	r2, #340	; 0x154
   25814:	mov	r3, r4
   25818:	mov	r1, r4
   2581c:	str	r2, [sp, #4]
   25820:	str	r4, [sp]
   25824:	mov	r2, #13
   25828:	orr	r5, r5, r0
   2582c:	ldr	r0, [pc, #160]	; 258d4 <error_case_tests@@Base+0x30c>
   25830:	bl	18464 <_start@@Base+0x2ec4>
   25834:	mov	r2, #344	; 0x158
   25838:	str	r2, [sp, #4]
   2583c:	str	r4, [sp]
   25840:	mov	r3, r4
   25844:	mov	r1, r4
   25848:	mov	r2, #13
   2584c:	orr	r5, r5, r0
   25850:	ldr	r0, [pc, #128]	; 258d8 <error_case_tests@@Base+0x310>
   25854:	bl	18464 <_start@@Base+0x2ec4>
   25858:	orr	r0, r5, r0
   2585c:	add	sp, sp, #12
   25860:	pop	{r4, r5, pc}
   25864:	andeq	r0, r0, sp, lsl r1
   25868:	muleq	r4, ip, r4
   2586c:	andeq	r0, r0, pc, lsl r1
   25870:			; <UNDEFINED> instruction: 0x000424b8
   25874:	andeq	r0, r0, r1, lsr #2
   25878:	andeq	r2, r4, ip, lsl r5
   2587c:	andeq	r0, r0, r3, lsr #2
   25880:	andeq	r2, r4, ip, ror r5
   25884:	andeq	r0, r0, r5, lsr #2
   25888:	ldrdeq	r2, [r4], -r4
   2588c:	andeq	r2, r4, ip, lsr #12
   25890:	andeq	r0, r0, fp, lsr #2
   25894:	andeq	r2, r4, ip, asr #13
   25898:	andeq	r0, r0, pc, lsr #2
   2589c:	andeq	r2, r4, r8, ror #14
   258a0:	andeq	r0, r0, r3, lsr r1
   258a4:	andeq	r2, r4, r0, lsr r8
   258a8:	andeq	r0, r0, r2, asr #2
   258ac:	strdeq	r2, [r4], -r8
   258b0:	andeq	r2, r4, r0, lsl r9
   258b4:	andeq	r0, r0, r6, asr #2
   258b8:	andeq	r2, r4, r8, ror #18
   258bc:			; <UNDEFINED> instruction: 0x000429bc
   258c0:	andeq	r0, r0, sl, asr #2
   258c4:	andeq	r2, r4, ip, lsl #20
   258c8:	andeq	r0, r0, sp, asr #2
   258cc:	andeq	r2, r4, ip, asr sl
   258d0:	andeq	r2, r4, r8, ror #21
   258d4:	andeq	r2, r4, r4, ror fp
   258d8:	andeq	r2, r4, r4, lsr #24

000258dc <base64_tests@@Base>:
   258dc:	push	{r4, r5, r6, r7, r8, lr}
   258e0:	sub	sp, sp, #8
   258e4:	ldr	r3, [pc, #376]	; 25a64 <base64_tests@@Base+0x188>
   258e8:	mov	r4, #0
   258ec:	str	r3, [sp, #4]
   258f0:	mov	r2, r4
   258f4:	mov	r3, r4
   258f8:	str	r4, [sp]
   258fc:	ldr	r1, [pc, #356]	; 25a68 <base64_tests@@Base+0x18c>
   25900:	ldr	r0, [pc, #356]	; 25a6c <base64_tests@@Base+0x190>
   25904:	bl	18464 <_start@@Base+0x2ec4>
   25908:	mov	r1, #372	; 0x174
   2590c:	mov	r3, r4
   25910:	mov	r2, r4
   25914:	str	r1, [sp, #4]
   25918:	str	r4, [sp]
   2591c:	ldr	r1, [pc, #332]	; 25a70 <base64_tests@@Base+0x194>
   25920:	ldr	r8, [pc, #332]	; 25a74 <base64_tests@@Base+0x198>
   25924:	ldr	r7, [pc, #332]	; 25a78 <base64_tests@@Base+0x19c>
   25928:	ldr	r6, [pc, #332]	; 25a7c <base64_tests@@Base+0x1a0>
   2592c:	mov	r5, r0
   25930:	ldr	r0, [pc, #328]	; 25a80 <base64_tests@@Base+0x1a4>
   25934:	bl	18464 <_start@@Base+0x2ec4>
   25938:	mov	ip, #376	; 0x178
   2593c:	str	ip, [sp, #4]
   25940:	mov	r3, r4
   25944:	mov	r2, r4
   25948:	mov	r1, r8
   2594c:	str	r4, [sp]
   25950:	orr	r5, r5, r0
   25954:	ldr	r0, [pc, #296]	; 25a84 <base64_tests@@Base+0x1a8>
   25958:	bl	18464 <_start@@Base+0x2ec4>
   2595c:	ldr	r1, [pc, #292]	; 25a88 <base64_tests@@Base+0x1ac>
   25960:	mov	r3, r4
   25964:	mov	r2, r4
   25968:	str	r1, [sp, #4]
   2596c:	str	r4, [sp]
   25970:	mov	r1, r7
   25974:	orr	r5, r5, r0
   25978:	ldr	r0, [pc, #268]	; 25a8c <base64_tests@@Base+0x1b0>
   2597c:	bl	18464 <_start@@Base+0x2ec4>
   25980:	ldr	r2, [pc, #264]	; 25a90 <base64_tests@@Base+0x1b4>
   25984:	mov	r1, r8
   25988:	mov	r3, r4
   2598c:	str	r2, [sp, #4]
   25990:	str	r4, [sp]
   25994:	mov	r2, r4
   25998:	orr	r5, r5, r0
   2599c:	ldr	r0, [pc, #240]	; 25a94 <base64_tests@@Base+0x1b8>
   259a0:	bl	18464 <_start@@Base+0x2ec4>
   259a4:	ldr	ip, [pc, #236]	; 25a98 <base64_tests@@Base+0x1bc>
   259a8:	mov	r1, r7
   259ac:	str	ip, [sp, #4]
   259b0:	mov	r3, r4
   259b4:	mov	r2, r4
   259b8:	str	r4, [sp]
   259bc:	orr	r5, r5, r0
   259c0:	ldr	r0, [pc, #212]	; 25a9c <base64_tests@@Base+0x1c0>
   259c4:	bl	18464 <_start@@Base+0x2ec4>
   259c8:	mov	r2, #388	; 0x184
   259cc:	mov	r3, r4
   259d0:	mov	r1, r4
   259d4:	str	r2, [sp, #4]
   259d8:	str	r4, [sp]
   259dc:	mov	r2, #31
   259e0:	orr	r5, r5, r0
   259e4:	ldr	r0, [pc, #180]	; 25aa0 <base64_tests@@Base+0x1c4>
   259e8:	bl	18464 <_start@@Base+0x2ec4>
   259ec:	ldr	r2, [pc, #176]	; 25aa4 <base64_tests@@Base+0x1c8>
   259f0:	mov	r3, r4
   259f4:	mov	r1, r4
   259f8:	str	r2, [sp, #4]
   259fc:	str	r4, [sp]
   25a00:	mov	r2, #32
   25a04:	orr	r5, r5, r0
   25a08:	ldr	r0, [pc, #152]	; 25aa8 <base64_tests@@Base+0x1cc>
   25a0c:	bl	18464 <_start@@Base+0x2ec4>
   25a10:	ldr	ip, [pc, #148]	; 25aac <base64_tests@@Base+0x1d0>
   25a14:	mov	r3, r4
   25a18:	mov	r2, r4
   25a1c:	mov	r1, r6
   25a20:	str	ip, [sp, #4]
   25a24:	str	r4, [sp]
   25a28:	orr	r5, r5, r0
   25a2c:	ldr	r0, [pc, #124]	; 25ab0 <base64_tests@@Base+0x1d4>
   25a30:	bl	18464 <_start@@Base+0x2ec4>
   25a34:	ldr	ip, [pc, #120]	; 25ab4 <base64_tests@@Base+0x1d8>
   25a38:	str	r4, [sp]
   25a3c:	mov	r1, r6
   25a40:	mov	r3, r4
   25a44:	mov	r2, r4
   25a48:	str	ip, [sp, #4]
   25a4c:	orr	r5, r5, r0
   25a50:	ldr	r0, [pc, #96]	; 25ab8 <base64_tests@@Base+0x1dc>
   25a54:	bl	18464 <_start@@Base+0x2ec4>
   25a58:	orr	r0, r5, r0
   25a5c:	add	sp, sp, #8
   25a60:	pop	{r4, r5, r6, r7, r8, pc}
   25a64:	andeq	r0, r0, r1, ror r1
   25a68:	andeq	r2, r4, r0, lsr r0
   25a6c:	ldrdeq	r2, [r4], -r4
   25a70:	andeq	r2, r4, ip, ror #25
   25a74:	andeq	r2, r4, r8, lsr sp
   25a78:	andeq	r2, r4, r8, lsr #29
   25a7c:	andeq	r3, r4, r8, lsl #6
   25a80:	andeq	r2, r4, r0, lsl sp
   25a84:	andeq	r2, r4, ip, ror #27
   25a88:	andeq	r0, r0, fp, ror r1
   25a8c:	andeq	r2, r4, r0, ror #30
   25a90:	andeq	r0, r0, lr, ror r1
   25a94:	andeq	r3, r4, ip, lsl r0
   25a98:	andeq	r0, r0, r1, lsl #3
   25a9c:	ldrdeq	r3, [r4], -r4
   25aa0:	muleq	r4, r0, r1
   25aa4:	andeq	r0, r0, r7, lsl #3
   25aa8:	andeq	r3, r4, ip, asr #4
   25aac:	muleq	r0, r6, r1
   25ab0:	andeq	r3, r4, r0, ror #7
   25ab4:	andeq	r0, r0, r3, lsr #3
   25ab8:			; <UNDEFINED> instruction: 0x000434b0

00025abc <mixed_type_union_tests@@Base>:
   25abc:	push	{r4, r5, r6, lr}
   25ac0:	mov	r3, #432	; 0x1b0
   25ac4:	ldr	r5, [pc, #168]	; 25b74 <mixed_type_union_tests@@Base+0xb8>
   25ac8:	ldr	r2, [pc, #168]	; 25b78 <mixed_type_union_tests@@Base+0xbc>
   25acc:	mov	r0, r5
   25ad0:	ldr	r1, [pc, #164]	; 25b7c <mixed_type_union_tests@@Base+0xc0>
   25ad4:	bl	17e78 <_start@@Base+0x28d8>
   25ad8:	ldr	r6, [pc, #160]	; 25b80 <mixed_type_union_tests@@Base+0xc4>
   25adc:	ldr	r3, [pc, #160]	; 25b84 <mixed_type_union_tests@@Base+0xc8>
   25ae0:	mov	r2, r6
   25ae4:	ldr	r1, [pc, #156]	; 25b88 <mixed_type_union_tests@@Base+0xcc>
   25ae8:	mov	r4, r0
   25aec:	mov	r0, r5
   25af0:	bl	17e78 <_start@@Base+0x28d8>
   25af4:	mov	r2, r6
   25af8:	ldr	r3, [pc, #140]	; 25b8c <mixed_type_union_tests@@Base+0xd0>
   25afc:	ldr	r1, [pc, #140]	; 25b90 <mixed_type_union_tests@@Base+0xd4>
   25b00:	orr	r4, r4, r0
   25b04:	mov	r0, r5
   25b08:	bl	17e78 <_start@@Base+0x28d8>
   25b0c:	ldr	r3, [pc, #128]	; 25b94 <mixed_type_union_tests@@Base+0xd8>
   25b10:	ldr	r2, [pc, #128]	; 25b98 <mixed_type_union_tests@@Base+0xdc>
   25b14:	ldr	r1, [pc, #128]	; 25b9c <mixed_type_union_tests@@Base+0xe0>
   25b18:	orr	r4, r4, r0
   25b1c:	mov	r0, r5
   25b20:	bl	17e78 <_start@@Base+0x28d8>
   25b24:	ldr	r3, [pc, #116]	; 25ba0 <mixed_type_union_tests@@Base+0xe4>
   25b28:	ldr	r2, [pc, #116]	; 25ba4 <mixed_type_union_tests@@Base+0xe8>
   25b2c:	ldr	r1, [pc, #116]	; 25ba8 <mixed_type_union_tests@@Base+0xec>
   25b30:	orr	r4, r4, r0
   25b34:	mov	r0, r5
   25b38:	bl	17e78 <_start@@Base+0x28d8>
   25b3c:	ldr	r3, [pc, #104]	; 25bac <mixed_type_union_tests@@Base+0xf0>
   25b40:	ldr	r2, [pc, #104]	; 25bb0 <mixed_type_union_tests@@Base+0xf4>
   25b44:	ldr	r1, [pc, #104]	; 25bb4 <mixed_type_union_tests@@Base+0xf8>
   25b48:	orr	r4, r4, r0
   25b4c:	mov	r0, r5
   25b50:	bl	17e78 <_start@@Base+0x28d8>
   25b54:	mov	r2, r6
   25b58:	ldr	r3, [pc, #88]	; 25bb8 <mixed_type_union_tests@@Base+0xfc>
   25b5c:	ldr	r1, [pc, #88]	; 25bbc <mixed_type_union_tests@@Base+0x100>
   25b60:	orr	r4, r4, r0
   25b64:	mov	r0, r5
   25b68:	bl	17e78 <_start@@Base+0x28d8>
   25b6c:	orr	r0, r4, r0
   25b70:	pop	{r4, r5, r6, pc}
   25b74:	andeq	r1, r4, r4, asr #18
   25b78:	andeq	r3, r4, ip, ror r5
   25b7c:	andeq	r3, r4, r4, asr #11
   25b80:	andeq	r3, r4, r4, lsl r6
   25b84:			; <UNDEFINED> instruction: 0x000001b5
   25b88:	andeq	r3, r4, ip, lsl #13
   25b8c:			; <UNDEFINED> instruction: 0x000001ba
   25b90:	andeq	r3, r4, r0, lsl r7
   25b94:	andeq	r0, r0, r1, asr #3
   25b98:	andeq	r3, r4, r8, lsr #15
   25b9c:	andeq	r3, r4, r4, ror #16
   25ba0:	andeq	r0, r0, sl, asr #3
   25ba4:	andeq	r3, r4, r4, asr #18
   25ba8:	andeq	r3, r4, r4, lsr #20
   25bac:	ldrdeq	r0, [r0], -r5
   25bb0:	andeq	r3, r4, ip, lsr #22
   25bb4:	andeq	r3, r4, r4, ror ip
   25bb8:	ldrdeq	r0, [r0], -sl
   25bbc:	strdeq	r3, [r4], -r8

00025bc0 <union_vector_tests@@Base>:
   25bc0:	push	{r4, r5, r6, lr}
   25bc4:	ldr	r5, [pc, #148]	; 25c60 <union_vector_tests@@Base+0xa0>
   25bc8:	ldr	r6, [pc, #148]	; 25c64 <union_vector_tests@@Base+0xa4>
   25bcc:	mov	r0, r5
   25bd0:	mov	r2, r6
   25bd4:	ldr	r3, [pc, #140]	; 25c68 <union_vector_tests@@Base+0xa8>
   25bd8:	ldr	r1, [pc, #140]	; 25c6c <union_vector_tests@@Base+0xac>
   25bdc:	bl	17e78 <_start@@Base+0x28d8>
   25be0:	mov	r3, #488	; 0x1e8
   25be4:	ldr	r2, [pc, #132]	; 25c70 <union_vector_tests@@Base+0xb0>
   25be8:	ldr	r1, [pc, #132]	; 25c74 <union_vector_tests@@Base+0xb4>
   25bec:	mov	r4, r0
   25bf0:	mov	r0, r5
   25bf4:	bl	17e78 <_start@@Base+0x28d8>
   25bf8:	ldr	r3, [pc, #120]	; 25c78 <union_vector_tests@@Base+0xb8>
   25bfc:	ldr	r2, [pc, #120]	; 25c7c <union_vector_tests@@Base+0xbc>
   25c00:	ldr	r1, [pc, #120]	; 25c80 <union_vector_tests@@Base+0xc0>
   25c04:	orr	r4, r4, r0
   25c08:	mov	r0, r5
   25c0c:	bl	17e78 <_start@@Base+0x28d8>
   25c10:	ldr	r3, [pc, #108]	; 25c84 <union_vector_tests@@Base+0xc4>
   25c14:	ldr	r2, [pc, #108]	; 25c88 <union_vector_tests@@Base+0xc8>
   25c18:	ldr	r1, [pc, #108]	; 25c8c <union_vector_tests@@Base+0xcc>
   25c1c:	orr	r4, r4, r0
   25c20:	mov	r0, r5
   25c24:	bl	17e78 <_start@@Base+0x28d8>
   25c28:	mov	r2, r6
   25c2c:	ldr	r3, [pc, #92]	; 25c90 <union_vector_tests@@Base+0xd0>
   25c30:	ldr	r1, [pc, #92]	; 25c94 <union_vector_tests@@Base+0xd4>
   25c34:	orr	r4, r4, r0
   25c38:	mov	r0, r5
   25c3c:	bl	17e78 <_start@@Base+0x28d8>
   25c40:	mov	r3, #500	; 0x1f4
   25c44:	ldr	r2, [pc, #76]	; 25c98 <union_vector_tests@@Base+0xd8>
   25c48:	ldr	r1, [pc, #76]	; 25c9c <union_vector_tests@@Base+0xdc>
   25c4c:	orr	r4, r4, r0
   25c50:	mov	r0, r5
   25c54:	bl	17e78 <_start@@Base+0x28d8>
   25c58:	orr	r0, r4, r0
   25c5c:	pop	{r4, r5, r6, pc}
   25c60:	andeq	r1, r4, r4, asr r9
   25c64:	andeq	r3, r4, r8, lsl #29
   25c68:	andeq	r0, r0, r5, ror #3
   25c6c:	andeq	r3, r4, r0, asr #29
   25c70:	andeq	r3, r4, r0, lsl #30
   25c74:	andeq	r3, r4, ip, lsr #30
   25c78:	andeq	r0, r0, fp, ror #3
   25c7c:	andeq	r3, r4, r0, ror #30
   25c80:	andeq	r3, r4, r4, lsr #31
   25c84:	andeq	r0, r0, lr, ror #3
   25c88:	strdeq	r3, [r4], -r4
   25c8c:	andeq	r4, r4, r0, rrx
   25c90:	strdeq	r0, [r0], -r1
   25c94:	andeq	r4, r4, r0, ror #1
   25c98:	andeq	r4, r4, r0, lsr #2
   25c9c:	andeq	r4, r4, ip, ror r1

00025ca0 <flatcc_builder_default_alloc@@Base>:
   25ca0:	push	{r4, r5, r6, r7, r8, lr}
   25ca4:	subs	r5, r2, #0
   25ca8:	mov	r6, r1
   25cac:	bne	25cd0 <flatcc_builder_default_alloc@@Base+0x30>
   25cb0:	ldr	r0, [r1]
   25cb4:	cmp	r0, #0
   25cb8:	popeq	{r4, r5, r6, r7, r8, pc}
   25cbc:	bl	14540 <free@plt>
   25cc0:	str	r5, [r6]
   25cc4:	str	r5, [r6, #4]
   25cc8:	mov	r0, r5
   25ccc:	pop	{r4, r5, r6, r7, r8, pc}
   25cd0:	mov	r7, r3
   25cd4:	ldr	r3, [sp, #24]
   25cd8:	sub	r2, r3, #1
   25cdc:	cmp	r2, #6
   25ce0:	ldrls	pc, [pc, r2, lsl #2]
   25ce4:	b	25d80 <flatcc_builder_default_alloc@@Base+0xe0>
   25ce8:	andeq	r5, r2, r4, asr sp
   25cec:	andeq	r5, r2, r0, lsl #27
   25cf0:	andeq	r5, r2, r0, lsl #27
   25cf4:	andeq	r5, r2, r8, ror sp
   25cf8:	andeq	r5, r2, r4, lsl #26
   25cfc:	andeq	r5, r2, r0, lsl #27
   25d00:	andeq	r5, r2, r0, ror sp
   25d04:	mov	r4, r5
   25d08:	ldr	r3, [r6, #4]
   25d0c:	cmp	r5, r3
   25d10:	bhi	25d1c <flatcc_builder_default_alloc@@Base+0x7c>
   25d14:	cmp	r4, r3, lsr #1
   25d18:	bls	25d88 <flatcc_builder_default_alloc@@Base+0xe8>
   25d1c:	mov	r1, r4
   25d20:	ldr	r0, [r6]
   25d24:	bl	14564 <realloc@plt>
   25d28:	subs	r5, r0, #0
   25d2c:	beq	25da4 <flatcc_builder_default_alloc@@Base+0x104>
   25d30:	cmp	r7, #0
   25d34:	beq	25d44 <flatcc_builder_default_alloc@@Base+0xa4>
   25d38:	ldr	r0, [r6, #4]
   25d3c:	cmp	r0, r4
   25d40:	bcc	25d90 <flatcc_builder_default_alloc@@Base+0xf0>
   25d44:	str	r5, [r6]
   25d48:	str	r4, [r6, #4]
   25d4c:	mov	r0, #0
   25d50:	pop	{r4, r5, r6, r7, r8, pc}
   25d54:	mov	r4, #256	; 0x100
   25d58:	cmp	r5, r4
   25d5c:	bls	25d08 <flatcc_builder_default_alloc@@Base+0x68>
   25d60:	lsl	r4, r4, #1
   25d64:	cmp	r5, r4
   25d68:	bhi	25d60 <flatcc_builder_default_alloc@@Base+0xc0>
   25d6c:	b	25d08 <flatcc_builder_default_alloc@@Base+0x68>
   25d70:	mov	r4, #64	; 0x40
   25d74:	b	25d58 <flatcc_builder_default_alloc@@Base+0xb8>
   25d78:	mov	r4, #288	; 0x120
   25d7c:	b	25d58 <flatcc_builder_default_alloc@@Base+0xb8>
   25d80:	mov	r4, #32
   25d84:	b	25d58 <flatcc_builder_default_alloc@@Base+0xb8>
   25d88:	mov	r0, #0
   25d8c:	pop	{r4, r5, r6, r7, r8, pc}
   25d90:	sub	r2, r4, r0
   25d94:	mov	r1, #0
   25d98:	add	r0, r5, r0
   25d9c:	bl	145c4 <memset@plt>
   25da0:	b	25d44 <flatcc_builder_default_alloc@@Base+0xa4>
   25da4:	mvn	r0, #0
   25da8:	pop	{r4, r5, r6, r7, r8, pc}
   25dac:	push	{r4, r5, r6, r7, r8, lr}
   25db0:	mov	r5, r0
   25db4:	ldrh	r0, [r0, #128]	; 0x80
   25db8:	sub	sp, sp, #88	; 0x58
   25dbc:	mov	r7, #4
   25dc0:	cmp	r0, #3
   25dc4:	movls	r0, #4
   25dc8:	strhls	r0, [r5, #128]	; 0x80
   25dcc:	ldr	r0, [r5, #136]	; 0x88
   25dd0:	lsls	r4, r2, #2
   25dd4:	mov	r8, #1
   25dd8:	str	r7, [sp, #16]
   25ddc:	str	r8, [sp, #20]
   25de0:	and	ip, r0, #3
   25de4:	movne	r8, #2
   25de8:	str	r7, [sp, #28]
   25dec:	addne	r7, r4, r7
   25df0:	strne	r4, [sp, #36]	; 0x24
   25df4:	add	lr, sp, #12
   25df8:	strne	r1, [sp, #32]
   25dfc:	strne	r7, [sp, #16]
   25e00:	strne	r8, [sp, #20]
   25e04:	movne	r4, #3
   25e08:	moveq	r4, #2
   25e0c:	cmp	ip, #0
   25e10:	str	r2, [sp, #12]
   25e14:	str	lr, [sp, #24]
   25e18:	beq	25e44 <flatcc_builder_default_alloc@@Base+0x1a4>
   25e1c:	add	lr, r8, #1
   25e20:	add	r8, sp, #88	; 0x58
   25e24:	add	lr, r8, lr, lsl #3
   25e28:	ldr	r6, [pc, #320]	; 25f70 <flatcc_builder_default_alloc@@Base+0x2d0>
   25e2c:	mov	r8, r4
   25e30:	add	r7, r7, ip
   25e34:	str	ip, [lr, #-68]	; 0xffffffbc
   25e38:	str	r7, [sp, #16]
   25e3c:	str	r4, [sp, #20]
   25e40:	str	r6, [lr, #-72]	; 0xffffffb8
   25e44:	cmp	r2, #0
   25e48:	sub	r4, r0, r7
   25e4c:	beq	25ee0 <flatcc_builder_default_alloc@@Base+0x240>
   25e50:	cmp	r3, #0
   25e54:	addne	r6, r3, r2
   25e58:	mvnne	r0, #3
   25e5c:	bne	25e90 <flatcc_builder_default_alloc@@Base+0x1f0>
   25e60:	b	25f1c <flatcc_builder_default_alloc@@Base+0x27c>
   25e64:	sub	lr, r0, r4
   25e68:	add	ip, lr, ip
   25e6c:	str	ip, [r1]
   25e70:	ldrb	ip, [r3]
   25e74:	cmp	ip, #0
   25e78:	beq	25f44 <flatcc_builder_default_alloc@@Base+0x2a4>
   25e7c:	add	r3, r3, #1
   25e80:	cmp	r3, r6
   25e84:	add	r1, r1, #4
   25e88:	sub	r0, r0, #4
   25e8c:	beq	25ed8 <flatcc_builder_default_alloc@@Base+0x238>
   25e90:	ldr	ip, [r1]
   25e94:	cmp	ip, #0
   25e98:	bne	25e64 <flatcc_builder_default_alloc@@Base+0x1c4>
   25e9c:	ldrb	ip, [r3]
   25ea0:	cmp	ip, #0
   25ea4:	beq	25e7c <flatcc_builder_default_alloc@@Base+0x1dc>
   25ea8:	ldr	r3, [pc, #196]	; 25f74 <flatcc_builder_default_alloc@@Base+0x2d4>
   25eac:	ldr	r2, [pc, #196]	; 25f78 <flatcc_builder_default_alloc@@Base+0x2d8>
   25eb0:	ldr	r1, [pc, #196]	; 25f7c <flatcc_builder_default_alloc@@Base+0x2dc>
   25eb4:	ldr	r0, [pc, #196]	; 25f80 <flatcc_builder_default_alloc@@Base+0x2e0>
   25eb8:	bl	14618 <__assert_fail@plt>
   25ebc:	sub	r1, r0, r4
   25ec0:	add	r3, r3, #1
   25ec4:	add	r1, r1, lr
   25ec8:	cmp	r2, r3
   25ecc:	str	r1, [ip, #4]!
   25ed0:	sub	r0, r0, #4
   25ed4:	bne	25f24 <flatcc_builder_default_alloc@@Base+0x284>
   25ed8:	ldr	r0, [r5, #136]	; 0x88
   25edc:	sub	r4, r0, r7
   25ee0:	cmp	r4, r0
   25ee4:	bge	25f6c <flatcc_builder_default_alloc@@Base+0x2cc>
   25ee8:	ldr	r0, [r5, #36]	; 0x24
   25eec:	mov	r2, r8
   25ef0:	str	r7, [sp]
   25ef4:	mov	r3, r4
   25ef8:	ldr	r6, [r5, #44]	; 0x2c
   25efc:	add	r1, sp, #24
   25f00:	blx	r6
   25f04:	cmp	r0, #0
   25f08:	bne	25f58 <flatcc_builder_default_alloc@@Base+0x2b8>
   25f0c:	mov	r0, r4
   25f10:	str	r4, [r5, #136]	; 0x88
   25f14:	add	sp, sp, #88	; 0x58
   25f18:	pop	{r4, r5, r6, r7, r8, pc}
   25f1c:	sub	ip, r1, #4
   25f20:	mvn	r0, #3
   25f24:	ldr	lr, [ip, #4]
   25f28:	cmp	lr, #0
   25f2c:	bne	25ebc <flatcc_builder_default_alloc@@Base+0x21c>
   25f30:	ldr	r3, [pc, #60]	; 25f74 <flatcc_builder_default_alloc@@Base+0x2d4>
   25f34:	ldr	r2, [pc, #72]	; 25f84 <flatcc_builder_default_alloc@@Base+0x2e4>
   25f38:	ldr	r1, [pc, #60]	; 25f7c <flatcc_builder_default_alloc@@Base+0x2dc>
   25f3c:	ldr	r0, [pc, #68]	; 25f88 <flatcc_builder_default_alloc@@Base+0x2e8>
   25f40:	bl	14618 <__assert_fail@plt>
   25f44:	ldr	r3, [pc, #40]	; 25f74 <flatcc_builder_default_alloc@@Base+0x2d4>
   25f48:	ldr	r2, [pc, #60]	; 25f8c <flatcc_builder_default_alloc@@Base+0x2ec>
   25f4c:	ldr	r1, [pc, #40]	; 25f7c <flatcc_builder_default_alloc@@Base+0x2dc>
   25f50:	ldr	r0, [pc, #56]	; 25f90 <flatcc_builder_default_alloc@@Base+0x2f0>
   25f54:	bl	14618 <__assert_fail@plt>
   25f58:	ldr	r3, [pc, #52]	; 25f94 <flatcc_builder_default_alloc@@Base+0x2f4>
   25f5c:	ldr	r2, [pc, #52]	; 25f98 <flatcc_builder_default_alloc@@Base+0x2f8>
   25f60:	ldr	r1, [pc, #20]	; 25f7c <flatcc_builder_default_alloc@@Base+0x2dc>
   25f64:	ldr	r0, [pc, #28]	; 25f88 <flatcc_builder_default_alloc@@Base+0x2e8>
   25f68:	bl	14618 <__assert_fail@plt>
   25f6c:	bl	147e8 <__assert_fail@plt+0x1d0>
   25f70:	muleq	r4, ip, r7
   25f74:	muleq	r4, ip, r9
   25f78:			; <UNDEFINED> instruction: 0x000005b5
   25f7c:	andeq	r5, r4, r4, asr lr
   25f80:	andeq	r5, r4, r8, lsl pc
   25f84:			; <UNDEFINED> instruction: 0x000005b7
   25f88:	andeq	r5, r4, r4, lsl pc
   25f8c:			; <UNDEFINED> instruction: 0x000005b1
   25f90:	andeq	r5, r4, r8, lsl #30
   25f94:	andeq	r5, r4, r0, lsr #14
   25f98:	andeq	r0, r0, fp, lsl #5
   25f9c:	ldrh	r3, [r0, #128]	; 0x80
   25fa0:	push	{r4, r5, r6, r7, lr}
   25fa4:	sub	sp, sp, #92	; 0x5c
   25fa8:	cmp	r3, #3
   25fac:	movls	r3, #4
   25fb0:	ldr	lr, [r0, #136]	; 0x88
   25fb4:	mov	ip, #4
   25fb8:	strhls	r3, [r0, #128]	; 0x80
   25fbc:	mov	r4, r0
   25fc0:	lsls	r6, r2, #2
   25fc4:	mov	r0, #1
   25fc8:	add	r5, sp, #12
   25fcc:	str	ip, [sp, #16]
   25fd0:	str	r0, [sp, #20]
   25fd4:	and	r3, lr, #3
   25fd8:	movne	r0, #2
   25fdc:	str	ip, [sp, #28]
   25fe0:	addne	ip, r6, ip
   25fe4:	str	r5, [sp, #24]
   25fe8:	strne	r6, [sp, #36]	; 0x24
   25fec:	strne	r1, [sp, #32]
   25ff0:	strne	ip, [sp, #16]
   25ff4:	strne	r0, [sp, #20]
   25ff8:	movne	r5, r0
   25ffc:	movne	r6, #3
   26000:	moveq	r5, r0
   26004:	moveq	r6, #2
   26008:	cmp	r3, #0
   2600c:	str	r2, [sp, #12]
   26010:	beq	2603c <flatcc_builder_default_alloc@@Base+0x39c>
   26014:	add	r0, r5, #1
   26018:	add	r5, sp, #88	; 0x58
   2601c:	add	r0, r5, r0, lsl #3
   26020:	ldr	r7, [pc, #204]	; 260f4 <flatcc_builder_default_alloc@@Base+0x454>
   26024:	mov	r5, r6
   26028:	add	ip, ip, r3
   2602c:	str	r3, [r0, #-68]	; 0xffffffbc
   26030:	str	ip, [sp, #16]
   26034:	str	r6, [sp, #20]
   26038:	str	r7, [r0, #-72]	; 0xffffffb8
   2603c:	cmp	r2, #0
   26040:	beq	2609c <flatcc_builder_default_alloc@@Base+0x3fc>
   26044:	ldr	r3, [r1]
   26048:	cmp	r3, #0
   2604c:	beq	26084 <flatcc_builder_default_alloc@@Base+0x3e4>
   26050:	sub	r6, lr, ip
   26054:	mov	r0, #0
   26058:	mvn	lr, #3
   2605c:	sub	r3, r3, r6
   26060:	add	r0, r0, #1
   26064:	add	r3, r3, lr
   26068:	cmp	r2, r0
   2606c:	str	r3, [r1]
   26070:	beq	26098 <flatcc_builder_default_alloc@@Base+0x3f8>
   26074:	ldr	r3, [r1, #4]!
   26078:	sub	lr, lr, #4
   2607c:	cmp	r3, #0
   26080:	bne	2605c <flatcc_builder_default_alloc@@Base+0x3bc>
   26084:	ldr	r3, [pc, #108]	; 260f8 <flatcc_builder_default_alloc@@Base+0x458>
   26088:	ldr	r2, [pc, #108]	; 260fc <flatcc_builder_default_alloc@@Base+0x45c>
   2608c:	ldr	r1, [pc, #108]	; 26100 <flatcc_builder_default_alloc@@Base+0x460>
   26090:	ldr	r0, [pc, #108]	; 26104 <flatcc_builder_default_alloc@@Base+0x464>
   26094:	bl	14618 <__assert_fail@plt>
   26098:	ldr	lr, [r4, #136]	; 0x88
   2609c:	sub	r6, lr, ip
   260a0:	cmp	r6, lr
   260a4:	bge	260f0 <flatcc_builder_default_alloc@@Base+0x450>
   260a8:	ldr	r0, [r4, #36]	; 0x24
   260ac:	mov	r2, r5
   260b0:	str	ip, [sp]
   260b4:	mov	r3, r6
   260b8:	ldr	r5, [r4, #44]	; 0x2c
   260bc:	add	r1, sp, #24
   260c0:	blx	r5
   260c4:	cmp	r0, #0
   260c8:	bne	260dc <flatcc_builder_default_alloc@@Base+0x43c>
   260cc:	mov	r0, r6
   260d0:	str	r6, [r4, #136]	; 0x88
   260d4:	add	sp, sp, #92	; 0x5c
   260d8:	pop	{r4, r5, r6, r7, pc}
   260dc:	ldr	r3, [pc, #36]	; 26108 <flatcc_builder_default_alloc@@Base+0x468>
   260e0:	ldr	r2, [pc, #36]	; 2610c <flatcc_builder_default_alloc@@Base+0x46c>
   260e4:	ldr	r1, [pc, #20]	; 26100 <flatcc_builder_default_alloc@@Base+0x460>
   260e8:	ldr	r0, [pc, #20]	; 26104 <flatcc_builder_default_alloc@@Base+0x464>
   260ec:	bl	14618 <__assert_fail@plt>
   260f0:	bl	147e8 <__assert_fail@plt+0x1d0>
   260f4:	muleq	r4, ip, r7
   260f8:	muleq	r4, ip, r9
   260fc:			; <UNDEFINED> instruction: 0x000005b7
   26100:	andeq	r5, r4, r4, asr lr
   26104:	andeq	r5, r4, r4, lsl pc
   26108:	andeq	r5, r4, r0, lsr #14
   2610c:	andeq	r0, r0, fp, lsl #5

00026110 <flatcc_builder_flush_vtable_cache@@Base>:
   26110:	ldr	r3, [r0, #116]	; 0x74
   26114:	cmp	r3, #0
   26118:	bxeq	lr
   2611c:	ldr	r2, [r0, #96]	; 0x60
   26120:	push	{r4, lr}
   26124:	mov	r1, #0
   26128:	mov	r4, r0
   2612c:	ldr	r0, [r0, #92]	; 0x5c
   26130:	bl	145c4 <memset@plt>
   26134:	mov	r2, #16
   26138:	mov	r3, #0
   2613c:	str	r2, [r4, #124]	; 0x7c
   26140:	str	r3, [r4, #120]	; 0x78
   26144:	pop	{r4, pc}

00026148 <flatcc_builder_custom_init@@Base>:
   26148:	push	{r4, r5, r6, r7, r8, lr}
   2614c:	mov	r6, r1
   26150:	mov	r7, r2
   26154:	mov	r1, #0
   26158:	mov	r2, #232	; 0xe8
   2615c:	mov	r4, r0
   26160:	mov	r5, r3
   26164:	ldr	r8, [sp, #24]
   26168:	bl	145c4 <memset@plt>
   2616c:	cmp	r6, #0
   26170:	moveq	r3, #1
   26174:	ldreq	r6, [pc, #40]	; 261a4 <flatcc_builder_custom_init@@Base+0x5c>
   26178:	addeq	r7, r4, #188	; 0xbc
   2617c:	str	r8, [r4, #40]	; 0x28
   26180:	str	r7, [r4, #36]	; 0x24
   26184:	str	r6, [r4, #44]	; 0x2c
   26188:	mov	r0, #0
   2618c:	streq	r3, [r4, #184]	; 0xb8
   26190:	ldr	r3, [pc, #16]	; 261a8 <flatcc_builder_custom_init@@Base+0x60>
   26194:	cmp	r5, #0
   26198:	moveq	r5, r3
   2619c:	str	r5, [r4, #48]	; 0x30
   261a0:	pop	{r4, r5, r6, r7, r8, pc}
   261a4:	strdeq	fp, [r2], -ip
   261a8:	andeq	r5, r2, r0, lsr #25

000261ac <flatcc_builder_init@@Base>:
   261ac:	push	{r4, lr}
   261b0:	mov	r2, #232	; 0xe8
   261b4:	mov	r1, #0
   261b8:	mov	r4, r0
   261bc:	bl	145c4 <memset@plt>
   261c0:	ldr	r1, [pc, #32]	; 261e8 <flatcc_builder_init@@Base+0x3c>
   261c4:	ldr	r3, [pc, #32]	; 261ec <flatcc_builder_init@@Base+0x40>
   261c8:	mov	r0, #1
   261cc:	add	r2, r4, #188	; 0xbc
   261d0:	str	r0, [r4, #184]	; 0xb8
   261d4:	str	r1, [r4, #48]	; 0x30
   261d8:	str	r2, [r4, #36]	; 0x24
   261dc:	str	r3, [r4, #44]	; 0x2c
   261e0:	mov	r0, #0
   261e4:	pop	{r4, pc}
   261e8:	andeq	r5, r2, r0, lsr #25
   261ec:	strdeq	fp, [r2], -ip

000261f0 <flatcc_builder_custom_reset@@Base>:
   261f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261f4:	add	r7, r0, #52	; 0x34
   261f8:	mov	r4, #0
   261fc:	sub	sp, sp, #12
   26200:	mov	r5, r0
   26204:	mov	sl, r1
   26208:	mov	r8, r2
   2620c:	mov	r6, r7
   26210:	mov	r9, r4
   26214:	mov	fp, #1
   26218:	b	2626c <flatcc_builder_custom_reset@@Base+0x7c>
   2621c:	cmp	r4, #5
   26220:	cmpne	r8, #0
   26224:	beq	26250 <flatcc_builder_custom_reset@@Base+0x60>
   26228:	ldr	r0, [r5, #40]	; 0x28
   2622c:	mov	r3, fp
   26230:	str	r4, [sp]
   26234:	mov	r2, #1
   26238:	mov	r1, r6
   2623c:	ldr	ip, [r5, #48]	; 0x30
   26240:	blx	ip
   26244:	cmp	r0, #0
   26248:	bne	26320 <flatcc_builder_custom_reset@@Base+0x130>
   2624c:	ldr	r0, [r7, r4, lsl #3]
   26250:	ldr	r2, [r6, #4]
   26254:	mov	r1, r9
   26258:	bl	145c4 <memset@plt>
   2625c:	add	r4, r4, #1
   26260:	cmp	r4, #8
   26264:	add	r6, r6, #8
   26268:	beq	26298 <flatcc_builder_custom_reset@@Base+0xa8>
   2626c:	ldr	r0, [r7, r4, lsl #3]
   26270:	cmp	r0, #0
   26274:	bne	2621c <flatcc_builder_custom_reset@@Base+0x2c>
   26278:	ldr	r3, [r6, #4]
   2627c:	cmp	r3, #0
   26280:	beq	2625c <flatcc_builder_custom_reset@@Base+0x6c>
   26284:	ldr	r3, [pc, #156]	; 26328 <flatcc_builder_custom_reset@@Base+0x138>
   26288:	ldr	r2, [pc, #156]	; 2632c <flatcc_builder_custom_reset@@Base+0x13c>
   2628c:	ldr	r1, [pc, #156]	; 26330 <flatcc_builder_custom_reset@@Base+0x140>
   26290:	ldr	r0, [pc, #156]	; 26334 <flatcc_builder_custom_reset@@Base+0x144>
   26294:	bl	14618 <__assert_fail@plt>
   26298:	ldr	r2, [r5, #124]	; 0x7c
   2629c:	mov	r3, #0
   262a0:	ldr	r0, [r5, #60]	; 0x3c
   262a4:	cmp	r2, r3
   262a8:	str	r3, [r5, #120]	; 0x78
   262ac:	ldr	r1, [r5, #76]	; 0x4c
   262b0:	movne	r3, #16
   262b4:	ldr	r2, [r5, #52]	; 0x34
   262b8:	str	r0, [r5, #16]
   262bc:	ldr	r0, [r5, #184]	; 0xb8
   262c0:	strne	r3, [r5, #124]	; 0x7c
   262c4:	mov	r3, #0
   262c8:	cmp	sl, #0
   262cc:	strne	r3, [r5, #172]	; 0xac
   262d0:	strne	r3, [r5, #176]	; 0xb0
   262d4:	strne	r3, [r5, #180]	; 0xb4
   262d8:	cmp	r0, #0
   262dc:	stm	r5, {r1, r2}
   262e0:	strh	r3, [r5, #128]	; 0x80
   262e4:	str	r3, [r5, #136]	; 0x88
   262e8:	str	r3, [r5, #140]	; 0x8c
   262ec:	str	r3, [r5, #156]	; 0x9c
   262f0:	str	r3, [r5, #160]	; 0xa0
   262f4:	str	r3, [r5, #20]
   262f8:	str	r3, [r5, #24]
   262fc:	str	r3, [r5, #148]	; 0x94
   26300:	str	r3, [r5, #152]	; 0x98
   26304:	str	r3, [r5, #32]
   26308:	beq	26318 <flatcc_builder_custom_reset@@Base+0x128>
   2630c:	add	r0, r5, #188	; 0xbc
   26310:	bl	2b5d4 <flatcc_emitter_reset@@Base>
   26314:	mov	r0, #0
   26318:	add	sp, sp, #12
   2631c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26320:	mvn	r0, #0
   26324:	b	26318 <flatcc_builder_custom_reset@@Base+0x128>
   26328:			; <UNDEFINED> instruction: 0x000459bc
   2632c:			; <UNDEFINED> instruction: 0x000001b2
   26330:	andeq	r5, r4, r4, asr lr
   26334:	andeq	r5, r4, r8, lsr #30

00026338 <flatcc_builder_reset@@Base>:
   26338:	push	{r4, r5, r6, r7, r8, lr}
   2633c:	mov	r5, r0
   26340:	add	r4, r0, #52	; 0x34
   26344:	add	r6, r0, #116	; 0x74
   26348:	mov	r7, #0
   2634c:	b	26368 <flatcc_builder_reset@@Base+0x30>
   26350:	ldr	r2, [r4, #4]
   26354:	mov	r1, r7
   26358:	bl	145c4 <memset@plt>
   2635c:	add	r4, r4, #8
   26360:	cmp	r6, r4
   26364:	beq	26394 <flatcc_builder_reset@@Base+0x5c>
   26368:	ldr	r0, [r4]
   2636c:	cmp	r0, #0
   26370:	bne	26350 <flatcc_builder_reset@@Base+0x18>
   26374:	ldr	r3, [r4, #4]
   26378:	cmp	r3, #0
   2637c:	beq	2635c <flatcc_builder_reset@@Base+0x24>
   26380:	ldr	r3, [pc, #128]	; 26408 <flatcc_builder_reset@@Base+0xd0>
   26384:	ldr	r2, [pc, #128]	; 2640c <flatcc_builder_reset@@Base+0xd4>
   26388:	ldr	r1, [pc, #128]	; 26410 <flatcc_builder_reset@@Base+0xd8>
   2638c:	ldr	r0, [pc, #128]	; 26414 <flatcc_builder_reset@@Base+0xdc>
   26390:	bl	14618 <__assert_fail@plt>
   26394:	ldr	r2, [r5, #124]	; 0x7c
   26398:	mov	r3, #0
   2639c:	cmp	r2, r3
   263a0:	str	r3, [r5, #120]	; 0x78
   263a4:	movne	r3, #16
   263a8:	strne	r3, [r5, #124]	; 0x7c
   263ac:	ldr	r1, [r5, #76]	; 0x4c
   263b0:	ldr	r3, [r5, #184]	; 0xb8
   263b4:	ldr	r2, [r5, #52]	; 0x34
   263b8:	ldr	r0, [r5, #60]	; 0x3c
   263bc:	cmp	r3, #0
   263c0:	mov	r3, #0
   263c4:	str	r0, [r5, #16]
   263c8:	stm	r5, {r1, r2}
   263cc:	strh	r3, [r5, #128]	; 0x80
   263d0:	str	r3, [r5, #136]	; 0x88
   263d4:	str	r3, [r5, #140]	; 0x8c
   263d8:	str	r3, [r5, #156]	; 0x9c
   263dc:	str	r3, [r5, #160]	; 0xa0
   263e0:	str	r3, [r5, #20]
   263e4:	str	r3, [r5, #24]
   263e8:	str	r3, [r5, #148]	; 0x94
   263ec:	str	r3, [r5, #152]	; 0x98
   263f0:	str	r3, [r5, #32]
   263f4:	beq	26400 <flatcc_builder_reset@@Base+0xc8>
   263f8:	add	r0, r5, #188	; 0xbc
   263fc:	bl	2b5d4 <flatcc_emitter_reset@@Base>
   26400:	mov	r0, #0
   26404:	pop	{r4, r5, r6, r7, r8, pc}
   26408:			; <UNDEFINED> instruction: 0x000459bc
   2640c:			; <UNDEFINED> instruction: 0x000001b2
   26410:	andeq	r5, r4, r4, asr lr
   26414:	andeq	r5, r4, r8, lsr #30

00026418 <flatcc_builder_clear@@Base>:
   26418:	push	{r4, r5, r6, r7, r8, lr}
   2641c:	mov	r4, #0
   26420:	sub	sp, sp, #8
   26424:	mov	r6, r0
   26428:	add	r5, r0, #52	; 0x34
   2642c:	mov	r8, r4
   26430:	ldr	r0, [r6, #40]	; 0x28
   26434:	mov	r1, r5
   26438:	str	r4, [sp]
   2643c:	mov	r3, r8
   26440:	add	r4, r4, #1
   26444:	ldr	r7, [r6, #48]	; 0x30
   26448:	mov	r2, #0
   2644c:	blx	r7
   26450:	cmp	r4, #8
   26454:	add	r5, r5, #8
   26458:	bne	26430 <flatcc_builder_clear@@Base+0x18>
   2645c:	ldr	r3, [r6, #184]	; 0xb8
   26460:	cmp	r3, #0
   26464:	beq	26470 <flatcc_builder_clear@@Base+0x58>
   26468:	add	r0, r6, #188	; 0xbc
   2646c:	bl	2b690 <flatcc_emitter_clear@@Base>
   26470:	mov	r0, r6
   26474:	mov	r2, #232	; 0xe8
   26478:	mov	r1, #0
   2647c:	add	sp, sp, #8
   26480:	pop	{r4, r5, r6, r7, r8, lr}
   26484:	b	145c4 <memset@plt>

00026488 <flatcc_builder_enter_user_frame_ptr@@Base>:
   26488:	push	{r4, r5, r6, r7, r8, lr}
   2648c:	add	r4, r1, #3
   26490:	bic	r4, r4, #3
   26494:	ldr	r7, [r0, #228]	; 0xe4
   26498:	add	r4, r4, #4
   2649c:	ldr	r3, [r0, #112]	; 0x70
   264a0:	add	r2, r4, r7
   264a4:	cmp	r2, r3
   264a8:	sub	sp, sp, #8
   264ac:	mov	r6, r0
   264b0:	bhi	264f8 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   264b4:	ldr	r8, [r6, #108]	; 0x6c
   264b8:	adds	r5, r8, r7
   264bc:	beq	26520 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   264c0:	mov	r2, r4
   264c4:	mov	r1, #0
   264c8:	mov	r0, r5
   264cc:	bl	145c4 <memset@plt>
   264d0:	ldr	r3, [r6, #224]	; 0xe0
   264d4:	add	r0, r5, #4
   264d8:	str	r3, [r8, r7]
   264dc:	ldr	r3, [r6, #228]	; 0xe4
   264e0:	add	r4, r4, r3
   264e4:	add	r3, r3, #4
   264e8:	str	r4, [r6, #228]	; 0xe4
   264ec:	str	r3, [r6, #224]	; 0xe0
   264f0:	add	sp, sp, #8
   264f4:	pop	{r4, r5, r6, r7, r8, pc}
   264f8:	mov	r3, #7
   264fc:	ldr	r0, [r0, #40]	; 0x28
   26500:	add	r1, r6, #108	; 0x6c
   26504:	str	r3, [sp]
   26508:	mov	r3, #0
   2650c:	ldr	r5, [r6, #48]	; 0x30
   26510:	blx	r5
   26514:	cmp	r0, #0
   26518:	beq	264b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   2651c:	bl	1479c <__assert_fail@plt+0x184>
   26520:	mov	r0, r5
   26524:	b	264f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00026528 <flatcc_builder_enter_user_frame@@Base>:
   26528:	push	{r4, r5, r6, r7, lr}
   2652c:	add	r4, r1, #3
   26530:	bic	r4, r4, #3
   26534:	ldr	r6, [r0, #228]	; 0xe4
   26538:	add	r4, r4, #4
   2653c:	ldr	r3, [r0, #112]	; 0x70
   26540:	add	r2, r4, r6
   26544:	cmp	r2, r3
   26548:	sub	sp, sp, #12
   2654c:	mov	r5, r0
   26550:	bhi	26590 <flatcc_builder_enter_user_frame@@Base+0x68>
   26554:	ldr	r7, [r5, #108]	; 0x6c
   26558:	adds	r0, r7, r6
   2655c:	beq	26588 <flatcc_builder_enter_user_frame@@Base+0x60>
   26560:	mov	r2, r4
   26564:	mov	r1, #0
   26568:	bl	145c4 <memset@plt>
   2656c:	ldr	r3, [r5, #224]	; 0xe0
   26570:	str	r3, [r7, r6]
   26574:	ldr	r0, [r5, #228]	; 0xe4
   26578:	add	r4, r4, r0
   2657c:	add	r0, r0, #4
   26580:	str	r4, [r5, #228]	; 0xe4
   26584:	str	r0, [r5, #224]	; 0xe0
   26588:	add	sp, sp, #12
   2658c:	pop	{r4, r5, r6, r7, pc}
   26590:	mov	r3, #7
   26594:	ldr	r0, [r0, #40]	; 0x28
   26598:	add	r1, r5, #108	; 0x6c
   2659c:	str	r3, [sp]
   265a0:	mov	r3, #0
   265a4:	ldr	r7, [r5, #48]	; 0x30
   265a8:	blx	r7
   265ac:	cmp	r0, #0
   265b0:	beq	26554 <flatcc_builder_enter_user_frame@@Base+0x2c>
   265b4:	bl	1479c <__assert_fail@plt+0x184>

000265b8 <flatcc_builder_exit_user_frame@@Base>:
   265b8:	ldr	r3, [r0, #224]	; 0xe0
   265bc:	cmp	r3, #0
   265c0:	beq	265e4 <flatcc_builder_exit_user_frame@@Base+0x2c>
   265c4:	ldr	r2, [r0, #108]	; 0x6c
   265c8:	sub	r1, r3, #4
   265cc:	add	r3, r2, r3
   265d0:	str	r1, [r0, #228]	; 0xe4
   265d4:	ldr	r3, [r3, #-4]
   265d8:	str	r3, [r0, #224]	; 0xe0
   265dc:	mov	r0, r3
   265e0:	bx	lr
   265e4:	push	{r4, lr}
   265e8:	bl	14834 <__assert_fail@plt+0x21c>

000265ec <flatcc_builder_exit_user_frame_at@@Base>:
   265ec:	ldr	r3, [r0, #224]	; 0xe0
   265f0:	push	{r4, lr}
   265f4:	cmp	r3, r1
   265f8:	bcc	26628 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   265fc:	cmp	r1, #0
   26600:	str	r1, [r0, #224]	; 0xe0
   26604:	beq	2663c <flatcc_builder_exit_user_frame_at@@Base+0x50>
   26608:	ldr	r3, [r0, #108]	; 0x6c
   2660c:	sub	r2, r1, #4
   26610:	add	r1, r3, r1
   26614:	str	r2, [r0, #228]	; 0xe4
   26618:	ldr	r3, [r1, #-4]
   2661c:	str	r3, [r0, #224]	; 0xe0
   26620:	mov	r0, r3
   26624:	pop	{r4, pc}
   26628:	ldr	r3, [pc, #16]	; 26640 <flatcc_builder_exit_user_frame_at@@Base+0x54>
   2662c:	ldr	r2, [pc, #16]	; 26644 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   26630:	ldr	r1, [pc, #16]	; 26648 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   26634:	ldr	r0, [pc, #16]	; 2664c <flatcc_builder_exit_user_frame_at@@Base+0x60>
   26638:	bl	14618 <__assert_fail@plt>
   2663c:	bl	14834 <__assert_fail@plt+0x21c>
   26640:	ldrdeq	r5, [r4], -r8
   26644:	andeq	r0, r0, r7, lsr #4
   26648:	andeq	r5, r4, r4, asr lr
   2664c:	andeq	r5, r4, ip, lsr pc

00026650 <flatcc_builder_get_current_user_frame@@Base>:
   26650:	ldr	r0, [r0, #224]	; 0xe0
   26654:	bx	lr

00026658 <flatcc_builder_get_user_frame_ptr@@Base>:
   26658:	ldr	r0, [r0, #108]	; 0x6c
   2665c:	add	r0, r0, r1
   26660:	bx	lr

00026664 <flatcc_builder_embed_buffer@@Base>:
   26664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26668:	sub	sp, sp, #92	; 0x5c
   2666c:	cmp	r1, #0
   26670:	ldr	r6, [sp, #132]	; 0x84
   26674:	mov	r8, r2
   26678:	mov	r5, r0
   2667c:	mov	r7, r3
   26680:	ldr	r2, [r0, #152]	; 0x98
   26684:	and	r6, r6, #2
   26688:	ldrh	r4, [sp, #128]	; 0x80
   2668c:	bne	2669c <flatcc_builder_embed_buffer@@Base+0x38>
   26690:	ldrh	r1, [r0, #132]	; 0x84
   26694:	cmp	r1, #0
   26698:	beq	26824 <flatcc_builder_embed_buffer@@Base+0x1c0>
   2669c:	cmp	r4, #4
   266a0:	movcc	r4, #4
   266a4:	cmp	r1, r4
   266a8:	movcs	r4, r1
   266ac:	cmp	r2, #0
   266b0:	bne	26718 <flatcc_builder_embed_buffer@@Base+0xb4>
   266b4:	ldr	r9, [r5, #140]	; 0x8c
   266b8:	sub	r1, r1, #1
   266bc:	ands	r1, r1, r9
   266c0:	beq	26718 <flatcc_builder_embed_buffer@@Base+0xb4>
   266c4:	add	r3, r9, r1
   266c8:	ldr	sl, [pc, #420]	; 26874 <flatcc_builder_embed_buffer@@Base+0x210>
   266cc:	mov	r2, #1
   266d0:	cmp	r9, r3
   266d4:	str	r1, [sp, #16]
   266d8:	str	r1, [sp, #28]
   266dc:	str	sl, [sp, #24]
   266e0:	str	r3, [r5, #140]	; 0x8c
   266e4:	str	r2, [sp, #20]
   266e8:	bgt	26848 <flatcc_builder_embed_buffer@@Base+0x1e4>
   266ec:	ldr	r0, [r5, #36]	; 0x24
   266f0:	mov	r3, r9
   266f4:	str	r1, [sp]
   266f8:	add	r1, sp, #24
   266fc:	ldr	fp, [r5, #44]	; 0x2c
   26700:	blx	fp
   26704:	cmp	r0, #0
   26708:	bne	2684c <flatcc_builder_embed_buffer@@Base+0x1e8>
   2670c:	cmn	r9, #1
   26710:	beq	26860 <flatcc_builder_embed_buffer@@Base+0x1fc>
   26714:	ldr	r2, [r5, #152]	; 0x98
   26718:	ldr	r1, [r5, #136]	; 0x88
   2671c:	cmp	r6, #0
   26720:	movne	r6, #4
   26724:	moveq	r6, #0
   26728:	sub	r3, r1, r7
   2672c:	sub	r6, r3, r6
   26730:	sub	r4, r4, #1
   26734:	and	r4, r4, r6
   26738:	mov	r3, #0
   2673c:	add	r0, r7, r4
   26740:	cmp	r2, #0
   26744:	str	r0, [sp, #12]
   26748:	str	r3, [sp, #16]
   2674c:	str	r3, [sp, #20]
   26750:	bne	267fc <flatcc_builder_embed_buffer@@Base+0x198>
   26754:	mov	r3, r2
   26758:	mov	ip, #2
   2675c:	mov	r0, #1
   26760:	cmp	r7, #0
   26764:	beq	26790 <flatcc_builder_embed_buffer@@Base+0x12c>
   26768:	add	r2, r2, #1
   2676c:	add	lr, sp, #88	; 0x58
   26770:	add	r2, lr, r2, lsl #3
   26774:	add	r3, r3, r7
   26778:	str	r3, [sp, #16]
   2677c:	str	r8, [r2, #-72]	; 0xffffffb8
   26780:	str	r7, [r2, #-68]	; 0xffffffbc
   26784:	mov	r2, r0
   26788:	str	r0, [sp, #20]
   2678c:	mov	r0, ip
   26790:	cmp	r4, #0
   26794:	beq	267c0 <flatcc_builder_embed_buffer@@Base+0x15c>
   26798:	add	r2, r2, #1
   2679c:	add	ip, sp, #88	; 0x58
   267a0:	add	ip, ip, r2, lsl #3
   267a4:	ldr	lr, [pc, #200]	; 26874 <flatcc_builder_embed_buffer@@Base+0x210>
   267a8:	mov	r2, r0
   267ac:	add	r3, r3, r4
   267b0:	str	r3, [sp, #16]
   267b4:	str	r4, [ip, #-68]	; 0xffffffbc
   267b8:	str	lr, [ip, #-72]	; 0xffffffb8
   267bc:	str	r0, [sp, #20]
   267c0:	sub	r4, r1, r3
   267c4:	cmp	r1, r4
   267c8:	ble	26830 <flatcc_builder_embed_buffer@@Base+0x1cc>
   267cc:	ldr	r0, [r5, #36]	; 0x24
   267d0:	add	r1, sp, #24
   267d4:	str	r3, [sp]
   267d8:	mov	r3, r4
   267dc:	ldr	r6, [r5, #44]	; 0x2c
   267e0:	blx	r6
   267e4:	cmp	r0, #0
   267e8:	bne	26834 <flatcc_builder_embed_buffer@@Base+0x1d0>
   267ec:	mov	r0, r4
   267f0:	str	r4, [r5, #136]	; 0x88
   267f4:	add	sp, sp, #92	; 0x5c
   267f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267fc:	mov	r3, #4
   26800:	add	r0, sp, #12
   26804:	mov	r2, #1
   26808:	str	r0, [sp, #24]
   2680c:	str	r3, [sp, #16]
   26810:	str	r3, [sp, #28]
   26814:	str	r2, [sp, #20]
   26818:	mov	ip, #3
   2681c:	mov	r0, #2
   26820:	b	26760 <flatcc_builder_embed_buffer@@Base+0xfc>
   26824:	cmp	r4, #4
   26828:	movcc	r4, #4
   2682c:	b	26718 <flatcc_builder_embed_buffer@@Base+0xb4>
   26830:	bl	147e8 <__assert_fail@plt+0x1d0>
   26834:	ldr	r3, [pc, #60]	; 26878 <flatcc_builder_embed_buffer@@Base+0x214>
   26838:	ldr	r2, [pc, #60]	; 2687c <flatcc_builder_embed_buffer@@Base+0x218>
   2683c:	ldr	r1, [pc, #60]	; 26880 <flatcc_builder_embed_buffer@@Base+0x21c>
   26840:	ldr	r0, [pc, #60]	; 26884 <flatcc_builder_embed_buffer@@Base+0x220>
   26844:	bl	14618 <__assert_fail@plt>
   26848:	bl	147c0 <__assert_fail@plt+0x1a8>
   2684c:	ldr	r3, [pc, #52]	; 26888 <flatcc_builder_embed_buffer@@Base+0x224>
   26850:	ldr	r2, [pc, #52]	; 2688c <flatcc_builder_embed_buffer@@Base+0x228>
   26854:	ldr	r1, [pc, #36]	; 26880 <flatcc_builder_embed_buffer@@Base+0x21c>
   26858:	ldr	r0, [pc, #36]	; 26884 <flatcc_builder_embed_buffer@@Base+0x220>
   2685c:	bl	14618 <__assert_fail@plt>
   26860:	add	r3, sl, #608	; 0x260
   26864:	ldr	r2, [pc, #36]	; 26890 <flatcc_builder_embed_buffer@@Base+0x22c>
   26868:	ldr	r1, [pc, #16]	; 26880 <flatcc_builder_embed_buffer@@Base+0x21c>
   2686c:	ldr	r0, [pc, #16]	; 26884 <flatcc_builder_embed_buffer@@Base+0x220>
   26870:	bl	14618 <__assert_fail@plt>
   26874:	muleq	r4, ip, r7
   26878:	andeq	r5, r4, r0, lsr #14
   2687c:	andeq	r0, r0, fp, lsl #5
   26880:	andeq	r5, r4, r4, asr lr
   26884:	andeq	r5, r4, r4, lsl pc
   26888:	andeq	r5, r4, r4, lsl r7
   2688c:	andeq	r0, r0, r5, lsr #5
   26890:			; <UNDEFINED> instruction: 0x000002be

00026894 <flatcc_builder_create_buffer@@Base>:
   26894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26898:	sub	sp, sp, #100	; 0x64
   2689c:	mov	ip, #0
   268a0:	ldr	r5, [sp, #140]	; 0x8c
   268a4:	cmp	r2, #0
   268a8:	mov	r6, r0
   268ac:	mov	r8, r1
   268b0:	mov	sl, r3
   268b4:	and	r7, r5, #1
   268b8:	str	ip, [sp, #20]
   268bc:	ldrh	r4, [sp, #136]	; 0x88
   268c0:	bne	268d0 <flatcc_builder_create_buffer@@Base+0x3c>
   268c4:	ldrh	r2, [r0, #132]	; 0x84
   268c8:	cmp	r2, ip
   268cc:	beq	26adc <flatcc_builder_create_buffer@@Base+0x248>
   268d0:	cmp	r4, #4
   268d4:	movcc	r4, #4
   268d8:	cmp	r2, r4
   268dc:	movcs	r4, r2
   268e0:	cmp	r7, #0
   268e4:	bne	26948 <flatcc_builder_create_buffer@@Base+0xb4>
   268e8:	ldr	r9, [r6, #140]	; 0x8c
   268ec:	sub	r2, r2, #1
   268f0:	ands	r3, r2, r9
   268f4:	beq	26948 <flatcc_builder_create_buffer@@Base+0xb4>
   268f8:	add	r1, r9, r3
   268fc:	ldr	fp, [pc, #584]	; 26b4c <flatcc_builder_create_buffer@@Base+0x2b8>
   26900:	mov	r2, #1
   26904:	cmp	r9, r1
   26908:	str	r3, [sp, #24]
   2690c:	str	r3, [sp, #36]	; 0x24
   26910:	str	fp, [sp, #32]
   26914:	str	r1, [r6, #140]	; 0x8c
   26918:	str	r2, [sp, #28]
   2691c:	bgt	26b34 <flatcc_builder_create_buffer@@Base+0x2a0>
   26920:	ldr	r0, [r6, #36]	; 0x24
   26924:	add	r1, sp, #32
   26928:	str	r3, [sp]
   2692c:	mov	r3, r9
   26930:	ldr	ip, [r6, #44]	; 0x2c
   26934:	blx	ip
   26938:	cmp	r0, #0
   2693c:	bne	26b38 <flatcc_builder_create_buffer@@Base+0x2a4>
   26940:	cmn	r9, #1
   26944:	beq	26af4 <flatcc_builder_create_buffer@@Base+0x260>
   26948:	ldrh	r3, [r6, #128]	; 0x80
   2694c:	ldr	r0, [r6, #136]	; 0x88
   26950:	uxtb	lr, r7
   26954:	cmp	r3, r4
   26958:	strhcc	r4, [r6, #128]	; 0x80
   2695c:	cmp	r8, #0
   26960:	ldreq	r1, [sp, #20]
   26964:	ldrne	r1, [r8]
   26968:	ldrne	r3, [r8]
   2696c:	strne	r3, [sp, #20]
   26970:	cmp	r1, #0
   26974:	movne	r1, #4
   26978:	moveq	r1, #0
   2697c:	ands	r5, r5, #2
   26980:	bne	26aa4 <flatcc_builder_create_buffer@@Base+0x210>
   26984:	sub	r3, r4, #1
   26988:	sub	r4, r0, #4
   2698c:	cmp	lr, #0
   26990:	sub	r4, r4, r1
   26994:	and	r4, r4, r3
   26998:	moveq	r8, #3
   2699c:	moveq	ip, #2
   269a0:	moveq	r2, #1
   269a4:	moveq	r3, #4
   269a8:	bne	26ab4 <flatcc_builder_create_buffer@@Base+0x220>
   269ac:	add	r5, r5, #1
   269b0:	add	r9, sp, #96	; 0x60
   269b4:	add	r5, r9, r5, lsl #3
   269b8:	add	fp, sp, #12
   269bc:	mov	r9, #4
   269c0:	cmp	r1, #0
   269c4:	str	r3, [sp, #24]
   269c8:	str	fp, [r5, #-72]	; 0xffffffb8
   269cc:	str	r9, [r5, #-68]	; 0xffffffbc
   269d0:	str	r2, [sp, #28]
   269d4:	beq	26a04 <flatcc_builder_create_buffer@@Base+0x170>
   269d8:	add	r2, r2, #1
   269dc:	add	r5, sp, #96	; 0x60
   269e0:	add	r2, r5, r2, lsl #3
   269e4:	add	r3, r3, r1
   269e8:	add	r5, sp, #20
   269ec:	str	r3, [sp, #24]
   269f0:	str	r1, [r2, #-68]	; 0xffffffbc
   269f4:	str	r5, [r2, #-72]	; 0xffffffb8
   269f8:	mov	r2, ip
   269fc:	str	ip, [sp, #28]
   26a00:	mov	ip, r8
   26a04:	cmp	r4, #0
   26a08:	beq	26a34 <flatcc_builder_create_buffer@@Base+0x1a0>
   26a0c:	add	r2, r2, #1
   26a10:	add	r1, sp, #96	; 0x60
   26a14:	add	r1, r1, r2, lsl #3
   26a18:	ldr	r5, [pc, #300]	; 26b4c <flatcc_builder_create_buffer@@Base+0x2b8>
   26a1c:	mov	r2, ip
   26a20:	add	r3, r3, r4
   26a24:	str	r3, [sp, #24]
   26a28:	str	r4, [r1, #-68]	; 0xffffffbc
   26a2c:	str	r5, [r1, #-72]	; 0xffffffb8
   26a30:	str	ip, [sp, #28]
   26a34:	sub	r4, r0, r3
   26a38:	cmp	lr, #0
   26a3c:	mov	r1, r4
   26a40:	beq	26ae8 <flatcc_builder_create_buffer@@Base+0x254>
   26a44:	cmp	r7, #0
   26a48:	add	r1, r4, #4
   26a4c:	beq	26ae8 <flatcc_builder_create_buffer@@Base+0x254>
   26a50:	ldr	ip, [r6, #144]	; 0x90
   26a54:	sub	ip, ip, r1
   26a58:	sub	sl, sl, r1
   26a5c:	cmp	r4, r0
   26a60:	str	sl, [sp, #12]
   26a64:	str	ip, [sp, #16]
   26a68:	bge	26b08 <flatcc_builder_create_buffer@@Base+0x274>
   26a6c:	ldr	r0, [r6, #36]	; 0x24
   26a70:	add	r1, sp, #32
   26a74:	str	r3, [sp]
   26a78:	mov	r3, r4
   26a7c:	ldr	r5, [r6, #44]	; 0x2c
   26a80:	blx	r5
   26a84:	cmp	r0, #0
   26a88:	bne	26b0c <flatcc_builder_create_buffer@@Base+0x278>
   26a8c:	cmp	r4, #0
   26a90:	str	r4, [r6, #136]	; 0x88
   26a94:	beq	26b20 <flatcc_builder_create_buffer@@Base+0x28c>
   26a98:	mov	r0, r4
   26a9c:	add	sp, sp, #100	; 0x64
   26aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26aa4:	sub	r3, r0, #8
   26aa8:	sub	r4, r4, #1
   26aac:	sub	r3, r3, r1
   26ab0:	and	r4, r4, r3
   26ab4:	add	r3, sp, #16
   26ab8:	mov	r8, #4
   26abc:	mov	r5, #1
   26ac0:	str	r3, [sp, #32]
   26ac4:	str	r8, [sp, #36]	; 0x24
   26ac8:	mov	lr, r5
   26acc:	mov	ip, #3
   26ad0:	mov	r2, #2
   26ad4:	mov	r3, #8
   26ad8:	b	269ac <flatcc_builder_create_buffer@@Base+0x118>
   26adc:	cmp	r4, #4
   26ae0:	movcc	r4, #4
   26ae4:	b	26948 <flatcc_builder_create_buffer@@Base+0xb4>
   26ae8:	ldr	ip, [r6, #140]	; 0x8c
   26aec:	sub	ip, ip, r1
   26af0:	b	26a58 <flatcc_builder_create_buffer@@Base+0x1c4>
   26af4:	add	r3, fp, #608	; 0x260
   26af8:	ldr	r2, [pc, #80]	; 26b50 <flatcc_builder_create_buffer@@Base+0x2bc>
   26afc:	ldr	r1, [pc, #80]	; 26b54 <flatcc_builder_create_buffer@@Base+0x2c0>
   26b00:	ldr	r0, [pc, #80]	; 26b58 <flatcc_builder_create_buffer@@Base+0x2c4>
   26b04:	bl	14618 <__assert_fail@plt>
   26b08:	bl	147e8 <__assert_fail@plt+0x1d0>
   26b0c:	ldr	r3, [pc, #72]	; 26b5c <flatcc_builder_create_buffer@@Base+0x2c8>
   26b10:	ldr	r2, [pc, #72]	; 26b60 <flatcc_builder_create_buffer@@Base+0x2cc>
   26b14:	ldr	r1, [pc, #56]	; 26b54 <flatcc_builder_create_buffer@@Base+0x2c0>
   26b18:	ldr	r0, [pc, #56]	; 26b58 <flatcc_builder_create_buffer@@Base+0x2c4>
   26b1c:	bl	14618 <__assert_fail@plt>
   26b20:	ldr	r3, [pc, #60]	; 26b64 <flatcc_builder_create_buffer@@Base+0x2d0>
   26b24:	mov	r2, #772	; 0x304
   26b28:	ldr	r1, [pc, #36]	; 26b54 <flatcc_builder_create_buffer@@Base+0x2c0>
   26b2c:	ldr	r0, [pc, #36]	; 26b58 <flatcc_builder_create_buffer@@Base+0x2c4>
   26b30:	bl	14618 <__assert_fail@plt>
   26b34:	bl	147c0 <__assert_fail@plt+0x1a8>
   26b38:	ldr	r3, [pc, #40]	; 26b68 <flatcc_builder_create_buffer@@Base+0x2d4>
   26b3c:	ldr	r2, [pc, #40]	; 26b6c <flatcc_builder_create_buffer@@Base+0x2d8>
   26b40:	ldr	r1, [pc, #12]	; 26b54 <flatcc_builder_create_buffer@@Base+0x2c0>
   26b44:	ldr	r0, [pc, #12]	; 26b58 <flatcc_builder_create_buffer@@Base+0x2c4>
   26b48:	bl	14618 <__assert_fail@plt>
   26b4c:	muleq	r4, ip, r7
   26b50:			; <UNDEFINED> instruction: 0x000002be
   26b54:	andeq	r5, r4, r4, asr lr
   26b58:	andeq	r5, r4, r4, lsl pc
   26b5c:	andeq	r5, r4, r0, lsr #14
   26b60:	andeq	r0, r0, fp, lsl #5
   26b64:	andeq	r5, r4, ip, lsl #20
   26b68:	andeq	r5, r4, r4, lsl r7
   26b6c:	andeq	r0, r0, r5, lsr #5

00026b70 <flatcc_builder_create_struct@@Base>:
   26b70:	cmp	r3, #0
   26b74:	push	{r4, r5, r6, lr}
   26b78:	sub	sp, sp, #80	; 0x50
   26b7c:	beq	26c68 <flatcc_builder_create_struct@@Base+0xf8>
   26b80:	mov	ip, r2
   26b84:	ldrh	r2, [r0, #128]	; 0x80
   26b88:	mov	r5, r0
   26b8c:	cmp	r2, r3
   26b90:	strhcc	r3, [r0, #128]	; 0x80
   26b94:	ldr	r0, [r0, #136]	; 0x88
   26b98:	mov	r2, #0
   26b9c:	sub	r3, r3, #1
   26ba0:	sub	r4, r0, ip
   26ba4:	cmp	ip, #0
   26ba8:	and	r3, r3, r4
   26bac:	str	r2, [sp, #8]
   26bb0:	str	r2, [sp, #12]
   26bb4:	bne	26c28 <flatcc_builder_create_struct@@Base+0xb8>
   26bb8:	cmp	r3, #0
   26bbc:	movne	r2, #1
   26bc0:	movne	r1, ip
   26bc4:	beq	26c50 <flatcc_builder_create_struct@@Base+0xe0>
   26bc8:	add	r1, r1, #1
   26bcc:	add	r4, sp, #80	; 0x50
   26bd0:	add	ip, ip, r3
   26bd4:	add	r1, r4, r1, lsl #3
   26bd8:	ldr	lr, [pc, #156]	; 26c7c <flatcc_builder_create_struct@@Base+0x10c>
   26bdc:	sub	r4, r0, ip
   26be0:	str	r3, [r1, #-68]	; 0xffffffbc
   26be4:	str	ip, [sp, #8]
   26be8:	str	r2, [sp, #12]
   26bec:	str	lr, [r1, #-72]	; 0xffffffb8
   26bf0:	cmp	r0, r4
   26bf4:	ble	26c50 <flatcc_builder_create_struct@@Base+0xe0>
   26bf8:	ldr	r0, [r5, #36]	; 0x24
   26bfc:	mov	r3, r4
   26c00:	str	ip, [sp]
   26c04:	add	r1, sp, #16
   26c08:	ldr	r6, [r5, #44]	; 0x2c
   26c0c:	blx	r6
   26c10:	cmp	r0, #0
   26c14:	bne	26c54 <flatcc_builder_create_struct@@Base+0xe4>
   26c18:	mov	r0, r4
   26c1c:	str	r4, [r5, #136]	; 0x88
   26c20:	add	sp, sp, #80	; 0x50
   26c24:	pop	{r4, r5, r6, pc}
   26c28:	cmp	r3, r2
   26c2c:	mov	r2, #1
   26c30:	str	r1, [sp, #16]
   26c34:	str	r2, [sp, #12]
   26c38:	movne	r1, r2
   26c3c:	str	ip, [sp, #8]
   26c40:	str	ip, [sp, #20]
   26c44:	movne	r2, #2
   26c48:	beq	26bf0 <flatcc_builder_create_struct@@Base+0x80>
   26c4c:	b	26bc8 <flatcc_builder_create_struct@@Base+0x58>
   26c50:	bl	147e8 <__assert_fail@plt+0x1d0>
   26c54:	ldr	r3, [pc, #36]	; 26c80 <flatcc_builder_create_struct@@Base+0x110>
   26c58:	ldr	r2, [pc, #36]	; 26c84 <flatcc_builder_create_struct@@Base+0x114>
   26c5c:	ldr	r1, [pc, #36]	; 26c88 <flatcc_builder_create_struct@@Base+0x118>
   26c60:	ldr	r0, [pc, #36]	; 26c8c <flatcc_builder_create_struct@@Base+0x11c>
   26c64:	bl	14618 <__assert_fail@plt>
   26c68:	ldr	r3, [pc, #32]	; 26c90 <flatcc_builder_create_struct@@Base+0x120>
   26c6c:	ldr	r2, [pc, #32]	; 26c94 <flatcc_builder_create_struct@@Base+0x124>
   26c70:	ldr	r1, [pc, #16]	; 26c88 <flatcc_builder_create_struct@@Base+0x118>
   26c74:	ldr	r0, [pc, #28]	; 26c98 <flatcc_builder_create_struct@@Base+0x128>
   26c78:	bl	14618 <__assert_fail@plt>
   26c7c:	muleq	r4, ip, r7
   26c80:	andeq	r5, r4, r0, lsr #14
   26c84:	andeq	r0, r0, fp, lsl #5
   26c88:	andeq	r5, r4, r4, asr lr
   26c8c:	andeq	r5, r4, r4, lsl pc
   26c90:	andeq	r5, r4, ip, lsr #20
   26c94:	andeq	r0, r0, pc, lsl #6
   26c98:	andeq	r5, r4, ip, asr pc

00026c9c <flatcc_builder_start_buffer@@Base>:
   26c9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26ca0:	mov	r4, r0
   26ca4:	ldr	r0, [r0, #156]	; 0x9c
   26ca8:	ldr	ip, [r4, #160]	; 0xa0
   26cac:	mov	r5, r1
   26cb0:	add	r1, r0, #1
   26cb4:	cmp	r1, ip
   26cb8:	sub	sp, sp, #8
   26cbc:	mov	r7, r2
   26cc0:	mov	r6, r3
   26cc4:	str	r1, [r4, #156]	; 0x9c
   26cc8:	ldrh	r8, [r4, #128]	; 0x80
   26ccc:	ble	26d3c <flatcc_builder_start_buffer@@Base+0xa0>
   26cd0:	ldr	r3, [r4, #176]	; 0xb0
   26cd4:	cmp	r3, #0
   26cd8:	cmpgt	r1, r3
   26cdc:	movgt	r3, #1
   26ce0:	movle	r3, #0
   26ce4:	bgt	26e18 <flatcc_builder_start_buffer@@Base+0x17c>
   26ce8:	add	r0, r0, r0, lsl #3
   26cec:	ldr	r1, [r4, #88]	; 0x58
   26cf0:	lsl	r9, r0, #2
   26cf4:	add	r2, r9, #36	; 0x24
   26cf8:	cmp	r2, r1
   26cfc:	bhi	26df4 <flatcc_builder_start_buffer@@Base+0x158>
   26d00:	ldr	r3, [r4, #84]	; 0x54
   26d04:	add	r3, r3, r9
   26d08:	cmp	r3, #0
   26d0c:	str	r3, [r4, #32]
   26d10:	beq	26e18 <flatcc_builder_start_buffer@@Base+0x17c>
   26d14:	ldr	r2, [r4, #88]	; 0x58
   26d18:	ldr	r0, [pc, #256]	; 26e20 <flatcc_builder_start_buffer@@Base+0x184>
   26d1c:	ldr	r1, [r4, #176]	; 0xb0
   26d20:	umull	r0, r2, r0, r2
   26d24:	lsr	r2, r2, #3
   26d28:	cmp	r1, #0
   26d2c:	cmpgt	r2, r1
   26d30:	str	r2, [r4, #160]	; 0xa0
   26d34:	strgt	r1, [r4, #160]	; 0xa0
   26d38:	b	26d48 <flatcc_builder_start_buffer@@Base+0xac>
   26d3c:	ldr	r3, [r4, #32]
   26d40:	add	r3, r3, #36	; 0x24
   26d44:	str	r3, [r4, #32]
   26d48:	ldr	r0, [r4, #20]
   26d4c:	ldr	r1, [r4, #28]
   26d50:	ldrh	lr, [r4, #130]	; 0x82
   26d54:	ldrh	ip, [r4, #132]	; 0x84
   26d58:	add	r2, r0, r1
   26d5c:	add	r2, r2, #7
   26d60:	str	r0, [r3, #8]
   26d64:	strh	lr, [r3, #12]
   26d68:	bic	r2, r2, #7
   26d6c:	strh	r8, [r4, #130]	; 0x82
   26d70:	mvn	lr, #3
   26d74:	str	r1, [r3]
   26d78:	mov	r0, #0
   26d7c:	mov	r1, #1
   26d80:	str	lr, [r3, #4]
   26d84:	str	r2, [r4, #28]
   26d88:	str	r0, [r4, #20]
   26d8c:	strh	r1, [r4, #128]	; 0x80
   26d90:	strh	ip, [r3, #34]	; 0x22
   26d94:	ldrh	r2, [r4, #164]	; 0xa4
   26d98:	strh	r7, [r4, #132]	; 0x84
   26d9c:	ldr	ip, [pc, #128]	; 26e24 <flatcc_builder_start_buffer@@Base+0x188>
   26da0:	strh	r2, [r3, #32]
   26da4:	ldr	r2, [r4, #144]	; 0x90
   26da8:	strh	r6, [r4, #164]	; 0xa4
   26dac:	str	r2, [r3, #20]
   26db0:	ldr	r2, [r4, #152]	; 0x98
   26db4:	cmp	r5, r0
   26db8:	str	r2, [r3, #28]
   26dbc:	ldr	r2, [r4, #148]	; 0x94
   26dc0:	ldr	lr, [r4, #136]	; 0x88
   26dc4:	moveq	r5, ip
   26dc8:	ldr	ip, [r4, #168]	; 0xa8
   26dcc:	add	r6, r2, r1
   26dd0:	str	r2, [r4, #152]	; 0x98
   26dd4:	str	r6, [r4, #148]	; 0x94
   26dd8:	str	lr, [r4, #144]	; 0x90
   26ddc:	str	ip, [r3, #16]
   26de0:	ldr	r2, [r5]
   26de4:	str	r2, [r4, #168]	; 0xa8
   26de8:	strh	r1, [r3, #14]
   26dec:	add	sp, sp, #8
   26df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26df4:	mov	r1, #4
   26df8:	ldr	r0, [r4, #40]	; 0x28
   26dfc:	str	r1, [sp]
   26e00:	add	r1, r4, #84	; 0x54
   26e04:	ldr	sl, [r4, #48]	; 0x30
   26e08:	blx	sl
   26e0c:	cmp	r0, #0
   26e10:	beq	26d00 <flatcc_builder_start_buffer@@Base+0x64>
   26e14:	bl	1479c <__assert_fail@plt+0x184>
   26e18:	mvn	r0, #0
   26e1c:	b	26dec <flatcc_builder_start_buffer@@Base+0x150>
   26e20:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   26e24:	muleq	r4, ip, r7

00026e28 <flatcc_builder_end_buffer@@Base>:
   26e28:	ldr	r3, [r0, #32]
   26e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e30:	sub	sp, sp, #100	; 0x64
   26e34:	ldrh	r5, [r0, #164]	; 0xa4
   26e38:	ldrh	r3, [r3, #14]
   26e3c:	ldr	r2, [r0, #152]	; 0x98
   26e40:	and	r5, r5, #2
   26e44:	cmp	r2, #0
   26e48:	orrne	r5, r5, #1
   26e4c:	cmp	r3, #1
   26e50:	bne	2713c <flatcc_builder_end_buffer@@Base+0x314>
   26e54:	ldrh	r3, [r0, #132]	; 0x84
   26e58:	ldrh	r2, [r0, #128]	; 0x80
   26e5c:	mov	r9, r1
   26e60:	mov	r1, #0
   26e64:	cmp	r3, r2
   26e68:	movhi	r2, r3
   26e6c:	strhhi	r3, [r0, #128]	; 0x80
   26e70:	cmp	r3, #0
   26e74:	mov	r4, r0
   26e78:	str	r1, [sp, #20]
   26e7c:	and	r7, r5, #1
   26e80:	beq	270e8 <flatcc_builder_end_buffer@@Base+0x2c0>
   26e84:	cmp	r3, #4
   26e88:	movcc	r6, #4
   26e8c:	movcs	r6, r3
   26e90:	cmp	r6, r2
   26e94:	movcc	r6, r2
   26e98:	cmp	r7, r1
   26e9c:	bne	26f04 <flatcc_builder_end_buffer@@Base+0xdc>
   26ea0:	ldr	r8, [r0, #140]	; 0x8c
   26ea4:	sub	r3, r3, #1
   26ea8:	ands	r3, r3, r8
   26eac:	beq	26f04 <flatcc_builder_end_buffer@@Base+0xdc>
   26eb0:	add	r1, r8, r3
   26eb4:	ldr	sl, [pc, #748]	; 271a8 <flatcc_builder_end_buffer@@Base+0x380>
   26eb8:	mov	r2, #1
   26ebc:	cmp	r8, r1
   26ec0:	str	r3, [sp, #24]
   26ec4:	str	r3, [sp, #36]	; 0x24
   26ec8:	str	sl, [sp, #32]
   26ecc:	str	r1, [r0, #140]	; 0x8c
   26ed0:	str	r2, [sp, #28]
   26ed4:	bgt	27190 <flatcc_builder_end_buffer@@Base+0x368>
   26ed8:	ldr	r0, [r0, #36]	; 0x24
   26edc:	add	r1, sp, #32
   26ee0:	str	r3, [sp]
   26ee4:	mov	r3, r8
   26ee8:	ldr	fp, [r4, #44]	; 0x2c
   26eec:	blx	fp
   26ef0:	cmp	r0, #0
   26ef4:	bne	27194 <flatcc_builder_end_buffer@@Base+0x36c>
   26ef8:	cmn	r8, #1
   26efc:	beq	2717c <flatcc_builder_end_buffer@@Base+0x354>
   26f00:	ldrh	r2, [r4, #128]	; 0x80
   26f04:	ldr	r3, [r4, #168]	; 0xa8
   26f08:	cmp	r2, r6
   26f0c:	strhcc	r6, [r4, #128]	; 0x80
   26f10:	cmp	r3, #0
   26f14:	movne	r1, #4
   26f18:	moveq	r1, #0
   26f1c:	ands	r5, r5, #2
   26f20:	uxtb	ip, r7
   26f24:	str	r3, [sp, #20]
   26f28:	ldr	r0, [r4, #136]	; 0x88
   26f2c:	bne	270f8 <flatcc_builder_end_buffer@@Base+0x2d0>
   26f30:	sub	r3, r6, #1
   26f34:	sub	r6, r0, #4
   26f38:	cmp	ip, #0
   26f3c:	sub	r6, r6, r1
   26f40:	and	r6, r6, r3
   26f44:	moveq	r8, #3
   26f48:	moveq	lr, #2
   26f4c:	moveq	r2, #1
   26f50:	moveq	r3, #4
   26f54:	bne	27108 <flatcc_builder_end_buffer@@Base+0x2e0>
   26f58:	add	r5, r5, #1
   26f5c:	add	sl, sp, #96	; 0x60
   26f60:	add	r5, sl, r5, lsl #3
   26f64:	add	fp, sp, #12
   26f68:	mov	sl, #4
   26f6c:	cmp	r1, #0
   26f70:	str	r3, [sp, #24]
   26f74:	str	fp, [r5, #-72]	; 0xffffffb8
   26f78:	str	sl, [r5, #-68]	; 0xffffffbc
   26f7c:	str	r2, [sp, #28]
   26f80:	beq	26fb0 <flatcc_builder_end_buffer@@Base+0x188>
   26f84:	add	r2, r2, #1
   26f88:	add	r5, sp, #96	; 0x60
   26f8c:	add	r2, r5, r2, lsl #3
   26f90:	add	r3, r3, r1
   26f94:	add	r5, sp, #20
   26f98:	str	r3, [sp, #24]
   26f9c:	str	r1, [r2, #-68]	; 0xffffffbc
   26fa0:	str	r5, [r2, #-72]	; 0xffffffb8
   26fa4:	mov	r2, lr
   26fa8:	str	lr, [sp, #28]
   26fac:	mov	lr, r8
   26fb0:	cmp	r6, #0
   26fb4:	beq	26fe0 <flatcc_builder_end_buffer@@Base+0x1b8>
   26fb8:	add	r2, r2, #1
   26fbc:	add	r1, sp, #96	; 0x60
   26fc0:	add	r1, r1, r2, lsl #3
   26fc4:	ldr	r5, [pc, #476]	; 271a8 <flatcc_builder_end_buffer@@Base+0x380>
   26fc8:	mov	r2, lr
   26fcc:	add	r3, r3, r6
   26fd0:	str	r3, [sp, #24]
   26fd4:	str	r6, [r1, #-68]	; 0xffffffbc
   26fd8:	str	r5, [r1, #-72]	; 0xffffffb8
   26fdc:	str	lr, [sp, #28]
   26fe0:	sub	r5, r0, r3
   26fe4:	cmp	ip, #0
   26fe8:	mov	r1, r5
   26fec:	beq	27130 <flatcc_builder_end_buffer@@Base+0x308>
   26ff0:	cmp	r7, #0
   26ff4:	add	r1, r5, #4
   26ff8:	beq	27130 <flatcc_builder_end_buffer@@Base+0x308>
   26ffc:	ldr	ip, [r4, #144]	; 0x90
   27000:	sub	ip, ip, r1
   27004:	sub	r9, r9, r1
   27008:	cmp	r5, r0
   2700c:	str	r9, [sp, #12]
   27010:	str	ip, [sp, #16]
   27014:	bge	27150 <flatcc_builder_end_buffer@@Base+0x328>
   27018:	ldr	r0, [r4, #36]	; 0x24
   2701c:	add	r1, sp, #32
   27020:	str	r3, [sp]
   27024:	mov	r3, r5
   27028:	ldr	r6, [r4, #44]	; 0x2c
   2702c:	blx	r6
   27030:	subs	r1, r0, #0
   27034:	bne	27154 <flatcc_builder_end_buffer@@Base+0x32c>
   27038:	cmp	r5, #0
   2703c:	str	r5, [r4, #136]	; 0x88
   27040:	beq	27168 <flatcc_builder_end_buffer@@Base+0x340>
   27044:	ldr	r3, [r4, #32]
   27048:	ldr	r2, [r4, #20]
   2704c:	ldr	r0, [r4, #16]
   27050:	ldr	ip, [r3, #20]
   27054:	str	ip, [r4, #144]	; 0x90
   27058:	ldr	ip, [r3, #28]
   2705c:	str	ip, [r4, #152]	; 0x98
   27060:	ldr	ip, [r3, #16]
   27064:	str	ip, [r4, #168]	; 0xa8
   27068:	ldrh	r3, [r3, #32]
   2706c:	strh	r3, [r4, #164]	; 0xa4
   27070:	bl	145c4 <memset@plt>
   27074:	ldr	r3, [r4, #32]
   27078:	ldr	r2, [r4, #64]	; 0x40
   2707c:	ldrh	lr, [r4, #130]	; 0x82
   27080:	ldr	ip, [r3]
   27084:	ldr	r1, [r3, #4]
   27088:	ldrh	r0, [r4, #128]	; 0x80
   2708c:	sub	r2, r2, ip
   27090:	cmp	r2, r1
   27094:	movcs	r2, r1
   27098:	cmp	r0, lr
   2709c:	ldr	r0, [r4, #60]	; 0x3c
   270a0:	ldr	r6, [r3, #8]
   270a4:	str	r2, [r4, #24]
   270a8:	add	r2, r0, ip
   270ac:	str	r2, [r4, #16]
   270b0:	str	r6, [r4, #20]
   270b4:	ldr	r2, [r4, #156]	; 0x9c
   270b8:	str	ip, [r4, #28]
   270bc:	str	r1, [r3, #4]
   270c0:	strhcc	lr, [r4, #128]	; 0x80
   270c4:	ldrh	r1, [r3, #12]
   270c8:	sub	r2, r2, #1
   270cc:	sub	r3, r3, #36	; 0x24
   270d0:	mov	r0, r5
   270d4:	str	r2, [r4, #156]	; 0x9c
   270d8:	strh	r1, [r4, #130]	; 0x82
   270dc:	str	r3, [r4, #32]
   270e0:	add	sp, sp, #100	; 0x64
   270e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270e8:	cmp	r2, #4
   270ec:	movcs	r6, r2
   270f0:	movcc	r6, #4
   270f4:	b	26f04 <flatcc_builder_end_buffer@@Base+0xdc>
   270f8:	sub	r3, r0, #8
   270fc:	sub	r6, r6, #1
   27100:	sub	r3, r3, r1
   27104:	and	r6, r6, r3
   27108:	add	r3, sp, #16
   2710c:	mov	r8, #4
   27110:	mov	r5, #1
   27114:	str	r3, [sp, #32]
   27118:	str	r8, [sp, #36]	; 0x24
   2711c:	mov	ip, r5
   27120:	mov	lr, #3
   27124:	mov	r2, #2
   27128:	mov	r3, #8
   2712c:	b	26f58 <flatcc_builder_end_buffer@@Base+0x130>
   27130:	ldr	ip, [r4, #140]	; 0x8c
   27134:	sub	ip, ip, r1
   27138:	b	27004 <flatcc_builder_end_buffer@@Base+0x1dc>
   2713c:	ldr	r3, [pc, #104]	; 271ac <flatcc_builder_end_buffer@@Base+0x384>
   27140:	ldr	r2, [pc, #104]	; 271b0 <flatcc_builder_end_buffer@@Base+0x388>
   27144:	ldr	r1, [pc, #104]	; 271b4 <flatcc_builder_end_buffer@@Base+0x38c>
   27148:	ldr	r0, [pc, #104]	; 271b8 <flatcc_builder_end_buffer@@Base+0x390>
   2714c:	bl	14618 <__assert_fail@plt>
   27150:	bl	147e8 <__assert_fail@plt+0x1d0>
   27154:	ldr	r3, [pc, #96]	; 271bc <flatcc_builder_end_buffer@@Base+0x394>
   27158:	ldr	r2, [pc, #96]	; 271c0 <flatcc_builder_end_buffer@@Base+0x398>
   2715c:	ldr	r1, [pc, #80]	; 271b4 <flatcc_builder_end_buffer@@Base+0x38c>
   27160:	ldr	r0, [pc, #92]	; 271c4 <flatcc_builder_end_buffer@@Base+0x39c>
   27164:	bl	14618 <__assert_fail@plt>
   27168:	ldr	r3, [pc, #88]	; 271c8 <flatcc_builder_end_buffer@@Base+0x3a0>
   2716c:	mov	r2, #772	; 0x304
   27170:	ldr	r1, [pc, #60]	; 271b4 <flatcc_builder_end_buffer@@Base+0x38c>
   27174:	ldr	r0, [pc, #72]	; 271c4 <flatcc_builder_end_buffer@@Base+0x39c>
   27178:	bl	14618 <__assert_fail@plt>
   2717c:	add	r3, sl, #608	; 0x260
   27180:	ldr	r2, [pc, #68]	; 271cc <flatcc_builder_end_buffer@@Base+0x3a4>
   27184:	ldr	r1, [pc, #40]	; 271b4 <flatcc_builder_end_buffer@@Base+0x38c>
   27188:	ldr	r0, [pc, #52]	; 271c4 <flatcc_builder_end_buffer@@Base+0x39c>
   2718c:	bl	14618 <__assert_fail@plt>
   27190:	bl	147c0 <__assert_fail@plt+0x1a8>
   27194:	ldr	r3, [pc, #52]	; 271d0 <flatcc_builder_end_buffer@@Base+0x3a8>
   27198:	ldr	r2, [pc, #52]	; 271d4 <flatcc_builder_end_buffer@@Base+0x3ac>
   2719c:	ldr	r1, [pc, #16]	; 271b4 <flatcc_builder_end_buffer@@Base+0x38c>
   271a0:	ldr	r0, [pc, #28]	; 271c4 <flatcc_builder_end_buffer@@Base+0x39c>
   271a4:	bl	14618 <__assert_fail@plt>
   271a8:	muleq	r4, ip, r7
   271ac:	andeq	r5, r4, ip, asr #20
   271b0:	andeq	r0, r0, r6, asr #6
   271b4:	andeq	r5, r4, r4, asr lr
   271b8:	andeq	r5, r4, r8, ror #30
   271bc:	andeq	r5, r4, r0, lsr #14
   271c0:	andeq	r0, r0, fp, lsl #5
   271c4:	andeq	r5, r4, r4, lsl pc
   271c8:	andeq	r5, r4, ip, lsl #20
   271cc:			; <UNDEFINED> instruction: 0x000002be
   271d0:	andeq	r5, r4, r4, lsl r7
   271d4:	andeq	r0, r0, r5, lsr #5

000271d8 <flatcc_builder_start_struct@@Base>:
   271d8:	push	{r4, r5, r6, r7, r8, lr}
   271dc:	mov	r4, r0
   271e0:	ldr	r0, [r0, #156]	; 0x9c
   271e4:	ldr	r3, [r4, #160]	; 0xa0
   271e8:	mov	r6, r1
   271ec:	add	r1, r0, #1
   271f0:	cmp	r1, r3
   271f4:	sub	sp, sp, #8
   271f8:	mov	r5, r2
   271fc:	str	r1, [r4, #156]	; 0x9c
   27200:	ble	27270 <flatcc_builder_start_struct@@Base+0x98>
   27204:	ldr	r3, [r4, #176]	; 0xb0
   27208:	cmp	r3, #0
   2720c:	cmpgt	r1, r3
   27210:	movgt	r3, #1
   27214:	movle	r3, #0
   27218:	bgt	27380 <flatcc_builder_start_struct@@Base+0x1a8>
   2721c:	add	r0, r0, r0, lsl #3
   27220:	ldr	r1, [r4, #88]	; 0x58
   27224:	lsl	r7, r0, #2
   27228:	add	r2, r7, #36	; 0x24
   2722c:	cmp	r2, r1
   27230:	bhi	2735c <flatcc_builder_start_struct@@Base+0x184>
   27234:	ldr	r3, [r4, #84]	; 0x54
   27238:	add	r3, r3, r7
   2723c:	cmp	r3, #0
   27240:	str	r3, [r4, #32]
   27244:	beq	27380 <flatcc_builder_start_struct@@Base+0x1a8>
   27248:	ldr	r2, [r4, #88]	; 0x58
   2724c:	ldr	r0, [pc, #308]	; 27388 <flatcc_builder_start_struct@@Base+0x1b0>
   27250:	ldr	r1, [r4, #176]	; 0xb0
   27254:	umull	r0, r2, r0, r2
   27258:	lsr	r2, r2, #3
   2725c:	cmp	r1, #0
   27260:	cmpgt	r2, r1
   27264:	str	r2, [r4, #160]	; 0xa0
   27268:	strgt	r1, [r4, #160]	; 0xa0
   2726c:	b	2727c <flatcc_builder_start_struct@@Base+0xa4>
   27270:	ldr	r3, [r4, #32]
   27274:	add	r3, r3, #36	; 0x24
   27278:	str	r3, [r4, #32]
   2727c:	ldr	lr, [r4, #20]
   27280:	ldr	ip, [r4, #28]
   27284:	ldr	r1, [r4, #64]	; 0x40
   27288:	add	r2, lr, ip
   2728c:	add	r2, r2, #7
   27290:	ldrh	r7, [r4, #130]	; 0x82
   27294:	bic	r2, r2, #7
   27298:	sub	r1, r1, r2
   2729c:	ldr	r0, [r4, #60]	; 0x3c
   272a0:	cmn	r1, #4
   272a4:	str	lr, [r3, #8]
   272a8:	mvn	lr, #3
   272ac:	strh	r7, [r3, #12]
   272b0:	movhi	r1, lr
   272b4:	strh	r5, [r4, #130]	; 0x82
   272b8:	str	ip, [r3]
   272bc:	mov	r5, #0
   272c0:	mov	ip, #2
   272c4:	str	lr, [r3, #4]
   272c8:	add	r0, r0, r2
   272cc:	str	r5, [r4, #20]
   272d0:	str	r2, [r4, #28]
   272d4:	mvn	r5, #3
   272d8:	strh	ip, [r3, #14]
   272dc:	strls	r1, [r4, #24]
   272e0:	strhi	lr, [r4, #24]
   272e4:	cmp	r6, r1
   272e8:	str	r0, [r4, #16]
   272ec:	str	r5, [r3, #4]
   272f0:	str	r6, [r4, #20]
   272f4:	bcs	27300 <flatcc_builder_start_struct@@Base+0x128>
   272f8:	add	sp, sp, #8
   272fc:	pop	{r4, r5, r6, r7, r8, pc}
   27300:	add	r6, r6, #1
   27304:	mov	r3, #1
   27308:	ldr	r0, [r4, #40]	; 0x28
   2730c:	add	r2, r6, r2
   27310:	str	r3, [sp]
   27314:	add	r1, r4, #60	; 0x3c
   27318:	ldr	r6, [r4, #48]	; 0x30
   2731c:	blx	r6
   27320:	cmp	r0, #0
   27324:	bne	27380 <flatcc_builder_start_struct@@Base+0x1a8>
   27328:	ldr	r2, [r4, #28]
   2732c:	ldr	r3, [r4, #64]	; 0x40
   27330:	ldr	r0, [r4, #60]	; 0x3c
   27334:	sub	r3, r3, r2
   27338:	ldr	r1, [r4, #32]
   2733c:	cmp	r3, r5
   27340:	add	r0, r0, r2
   27344:	movhi	r3, r5
   27348:	str	r3, [r4, #24]
   2734c:	str	r0, [r4, #16]
   27350:	str	r5, [r1, #4]
   27354:	add	sp, sp, #8
   27358:	pop	{r4, r5, r6, r7, r8, pc}
   2735c:	mov	r1, #4
   27360:	ldr	r0, [r4, #40]	; 0x28
   27364:	str	r1, [sp]
   27368:	add	r1, r4, #84	; 0x54
   2736c:	ldr	r8, [r4, #48]	; 0x30
   27370:	blx	r8
   27374:	cmp	r0, #0
   27378:	beq	27234 <flatcc_builder_start_struct@@Base+0x5c>
   2737c:	bl	1479c <__assert_fail@plt+0x184>
   27380:	mov	r0, #0
   27384:	b	272f8 <flatcc_builder_start_struct@@Base+0x120>
   27388:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0002738c <flatcc_builder_struct_edit@@Base>:
   2738c:	ldr	r0, [r0, #16]
   27390:	bx	lr

00027394 <flatcc_builder_end_struct@@Base>:
   27394:	ldr	r3, [r0, #32]
   27398:	push	{r4, r5, r6, lr}
   2739c:	sub	sp, sp, #80	; 0x50
   273a0:	ldrh	r3, [r3, #14]
   273a4:	cmp	r3, #2
   273a8:	bne	27534 <flatcc_builder_end_struct@@Base+0x1a0>
   273ac:	ldrh	r3, [r0, #130]	; 0x82
   273b0:	mov	r4, r0
   273b4:	ldr	r0, [r0, #16]
   273b8:	cmp	r3, #0
   273bc:	ldr	r1, [r4, #20]
   273c0:	beq	27520 <flatcc_builder_end_struct@@Base+0x18c>
   273c4:	ldrh	r2, [r4, #128]	; 0x80
   273c8:	ldr	ip, [r4, #136]	; 0x88
   273cc:	cmp	r2, r3
   273d0:	strhcc	r3, [r4, #128]	; 0x80
   273d4:	mov	r2, #0
   273d8:	sub	r3, r3, #1
   273dc:	sub	r5, ip, r1
   273e0:	cmp	r1, #0
   273e4:	and	r3, r3, r5
   273e8:	str	r2, [sp, #8]
   273ec:	str	r2, [sp, #12]
   273f0:	bne	274e0 <flatcc_builder_end_struct@@Base+0x14c>
   273f4:	cmp	r3, #0
   273f8:	movne	r2, #1
   273fc:	movne	r0, r1
   27400:	beq	27508 <flatcc_builder_end_struct@@Base+0x174>
   27404:	add	r0, r0, #1
   27408:	add	r5, sp, #80	; 0x50
   2740c:	add	r1, r1, r3
   27410:	add	r0, r5, r0, lsl #3
   27414:	ldr	lr, [pc, #300]	; 27548 <flatcc_builder_end_struct@@Base+0x1b4>
   27418:	sub	r5, ip, r1
   2741c:	str	r3, [r0, #-68]	; 0xffffffbc
   27420:	str	r1, [sp, #8]
   27424:	str	r2, [sp, #12]
   27428:	str	lr, [r0, #-72]	; 0xffffffb8
   2742c:	cmp	ip, r5
   27430:	ble	27508 <flatcc_builder_end_struct@@Base+0x174>
   27434:	ldr	r0, [r4, #36]	; 0x24
   27438:	mov	r3, r5
   2743c:	str	r1, [sp]
   27440:	add	r1, sp, #16
   27444:	ldr	r6, [r4, #44]	; 0x2c
   27448:	blx	r6
   2744c:	subs	r1, r0, #0
   27450:	bne	2750c <flatcc_builder_end_struct@@Base+0x178>
   27454:	cmp	r5, #0
   27458:	str	r5, [r4, #136]	; 0x88
   2745c:	beq	274d4 <flatcc_builder_end_struct@@Base+0x140>
   27460:	ldr	r2, [r4, #20]
   27464:	ldr	r0, [r4, #16]
   27468:	bl	145c4 <memset@plt>
   2746c:	ldr	r3, [r4, #32]
   27470:	ldr	r2, [r4, #64]	; 0x40
   27474:	ldrh	lr, [r4, #130]	; 0x82
   27478:	ldr	ip, [r3]
   2747c:	ldr	r1, [r3, #4]
   27480:	ldrh	r0, [r4, #128]	; 0x80
   27484:	sub	r2, r2, ip
   27488:	cmp	r2, r1
   2748c:	movcs	r2, r1
   27490:	cmp	r0, lr
   27494:	ldr	r0, [r4, #60]	; 0x3c
   27498:	ldr	r6, [r3, #8]
   2749c:	str	r2, [r4, #24]
   274a0:	add	r2, r0, ip
   274a4:	str	r2, [r4, #16]
   274a8:	str	r6, [r4, #20]
   274ac:	ldr	r2, [r4, #156]	; 0x9c
   274b0:	str	ip, [r4, #28]
   274b4:	str	r1, [r3, #4]
   274b8:	strhcc	lr, [r4, #128]	; 0x80
   274bc:	ldrh	r1, [r3, #12]
   274c0:	sub	r2, r2, #1
   274c4:	sub	r3, r3, #36	; 0x24
   274c8:	str	r2, [r4, #156]	; 0x9c
   274cc:	strh	r1, [r4, #130]	; 0x82
   274d0:	str	r3, [r4, #32]
   274d4:	mov	r0, r5
   274d8:	add	sp, sp, #80	; 0x50
   274dc:	pop	{r4, r5, r6, pc}
   274e0:	cmp	r3, r2
   274e4:	mov	r2, #1
   274e8:	str	r0, [sp, #16]
   274ec:	str	r2, [sp, #12]
   274f0:	movne	r0, r2
   274f4:	str	r1, [sp, #8]
   274f8:	str	r1, [sp, #20]
   274fc:	movne	r2, #2
   27500:	beq	2742c <flatcc_builder_end_struct@@Base+0x98>
   27504:	b	27404 <flatcc_builder_end_struct@@Base+0x70>
   27508:	bl	147e8 <__assert_fail@plt+0x1d0>
   2750c:	ldr	r3, [pc, #56]	; 2754c <flatcc_builder_end_struct@@Base+0x1b8>
   27510:	ldr	r2, [pc, #56]	; 27550 <flatcc_builder_end_struct@@Base+0x1bc>
   27514:	ldr	r1, [pc, #56]	; 27554 <flatcc_builder_end_struct@@Base+0x1c0>
   27518:	ldr	r0, [pc, #56]	; 27558 <flatcc_builder_end_struct@@Base+0x1c4>
   2751c:	bl	14618 <__assert_fail@plt>
   27520:	ldr	r3, [pc, #52]	; 2755c <flatcc_builder_end_struct@@Base+0x1c8>
   27524:	ldr	r2, [pc, #52]	; 27560 <flatcc_builder_end_struct@@Base+0x1cc>
   27528:	ldr	r1, [pc, #36]	; 27554 <flatcc_builder_end_struct@@Base+0x1c0>
   2752c:	ldr	r0, [pc, #48]	; 27564 <flatcc_builder_end_struct@@Base+0x1d0>
   27530:	bl	14618 <__assert_fail@plt>
   27534:	ldr	r3, [pc, #44]	; 27568 <flatcc_builder_end_struct@@Base+0x1d4>
   27538:	mov	r2, #872	; 0x368
   2753c:	ldr	r1, [pc, #16]	; 27554 <flatcc_builder_end_struct@@Base+0x1c0>
   27540:	ldr	r0, [pc, #36]	; 2756c <flatcc_builder_end_struct@@Base+0x1d8>
   27544:	bl	14618 <__assert_fail@plt>
   27548:	muleq	r4, ip, r7
   2754c:	andeq	r5, r4, r0, lsr #14
   27550:	andeq	r0, r0, fp, lsl #5
   27554:	andeq	r5, r4, r4, asr lr
   27558:	andeq	r5, r4, r4, lsl pc
   2755c:	andeq	r5, r4, ip, lsr #20
   27560:	andeq	r0, r0, pc, lsl #6
   27564:	andeq	r5, r4, ip, asr pc
   27568:	andeq	r5, r4, r8, ror #20
   2756c:	muleq	r4, r4, pc	; <UNPREDICTABLE>

00027570 <flatcc_builder_extend_vector@@Base>:
   27570:	ldr	r3, [r0, #32]
   27574:	push	{r4, r5, r6, r7, lr}
   27578:	mov	r5, r0
   2757c:	ldr	r0, [r3, #20]
   27580:	ldr	r4, [r3, #24]
   27584:	add	ip, r1, r0
   27588:	cmp	r0, ip
   2758c:	movls	r0, #0
   27590:	movhi	r0, #1
   27594:	cmp	r4, ip
   27598:	movcs	r4, r0
   2759c:	orrcc	r4, r0, #1
   275a0:	cmp	r4, #0
   275a4:	sub	sp, sp, #12
   275a8:	bne	27644 <flatcc_builder_extend_vector@@Base+0xd4>
   275ac:	ldr	r2, [r3, #16]
   275b0:	str	ip, [r3, #20]
   275b4:	ldr	r6, [r5, #20]
   275b8:	ldr	r3, [r5, #24]
   275bc:	mla	r1, r2, r1, r6
   275c0:	cmp	r1, r3
   275c4:	str	r1, [r5, #20]
   275c8:	bcs	275dc <flatcc_builder_extend_vector@@Base+0x6c>
   275cc:	ldr	r0, [r5, #16]
   275d0:	add	r0, r0, r6
   275d4:	add	sp, sp, #12
   275d8:	pop	{r4, r5, r6, r7, pc}
   275dc:	ldr	r2, [r5, #28]
   275e0:	mov	r3, #1
   275e4:	add	r2, r2, #1
   275e8:	ldr	r0, [r5, #40]	; 0x28
   275ec:	add	r2, r2, r1
   275f0:	str	r3, [sp]
   275f4:	add	r1, r5, #60	; 0x3c
   275f8:	ldr	r7, [r5, #48]	; 0x30
   275fc:	blx	r7
   27600:	cmp	r0, #0
   27604:	bne	2763c <flatcc_builder_extend_vector@@Base+0xcc>
   27608:	ldr	r2, [r5, #28]
   2760c:	ldr	r3, [r5, #64]	; 0x40
   27610:	ldr	r0, [r5, #60]	; 0x3c
   27614:	sub	r3, r3, r2
   27618:	cmn	r3, #4
   2761c:	mvnhi	r3, #3
   27620:	str	r3, [r5, #24]
   27624:	ldr	r3, [r5, #32]
   27628:	add	r0, r0, r2
   2762c:	mvn	r2, #3
   27630:	str	r0, [r5, #16]
   27634:	str	r2, [r3, #4]
   27638:	b	275d0 <flatcc_builder_extend_vector@@Base+0x60>
   2763c:	mov	r0, r4
   27640:	b	275d4 <flatcc_builder_extend_vector@@Base+0x64>
   27644:	bl	14810 <__assert_fail@plt+0x1f8>

00027648 <flatcc_builder_vector_push@@Base>:
   27648:	ldr	r3, [r0, #32]
   2764c:	push	{r4, r5, r6, r7, r8, lr}
   27650:	sub	sp, sp, #8
   27654:	ldrh	r2, [r3, #14]
   27658:	cmp	r2, #4
   2765c:	bne	27744 <flatcc_builder_vector_push@@Base+0xfc>
   27660:	mov	r5, r1
   27664:	ldr	r2, [r3, #20]
   27668:	ldr	r1, [r3, #24]
   2766c:	cmp	r2, r1
   27670:	bhi	27730 <flatcc_builder_vector_push@@Base+0xe8>
   27674:	add	r2, r2, #1
   27678:	str	r2, [r3, #20]
   2767c:	ldr	r7, [r3, #16]
   27680:	ldr	r6, [r0, #20]
   27684:	ldr	r3, [r0, #24]
   27688:	add	r1, r7, r6
   2768c:	cmp	r1, r3
   27690:	mov	r4, r0
   27694:	str	r1, [r0, #20]
   27698:	bcs	276c8 <flatcc_builder_vector_push@@Base+0x80>
   2769c:	ldr	r3, [r0, #16]
   276a0:	adds	r3, r3, r6
   276a4:	beq	276bc <flatcc_builder_vector_push@@Base+0x74>
   276a8:	mov	r0, r3
   276ac:	mov	r2, r7
   276b0:	mov	r1, r5
   276b4:	bl	1454c <memcpy@plt>
   276b8:	mov	r3, r0
   276bc:	mov	r0, r3
   276c0:	add	sp, sp, #8
   276c4:	pop	{r4, r5, r6, r7, r8, pc}
   276c8:	ldr	r2, [r0, #28]
   276cc:	mov	r3, #1
   276d0:	add	r2, r2, #1
   276d4:	ldr	r0, [r0, #40]	; 0x28
   276d8:	add	r2, r2, r1
   276dc:	str	r3, [sp]
   276e0:	add	r1, r4, #60	; 0x3c
   276e4:	ldr	r8, [r4, #48]	; 0x30
   276e8:	blx	r8
   276ec:	cmp	r0, #0
   276f0:	bne	27728 <flatcc_builder_vector_push@@Base+0xe0>
   276f4:	ldr	r1, [r4, #28]
   276f8:	ldr	r2, [r4, #64]	; 0x40
   276fc:	ldr	r3, [r4, #60]	; 0x3c
   27700:	sub	r2, r2, r1
   27704:	cmn	r2, #4
   27708:	mvnhi	r2, #3
   2770c:	str	r2, [r4, #24]
   27710:	ldr	r2, [r4, #32]
   27714:	add	r3, r3, r1
   27718:	mvn	r1, #3
   2771c:	str	r3, [r4, #16]
   27720:	str	r1, [r2, #4]
   27724:	b	276a0 <flatcc_builder_vector_push@@Base+0x58>
   27728:	mov	r3, #0
   2772c:	b	276bc <flatcc_builder_vector_push@@Base+0x74>
   27730:	ldr	r3, [pc, #32]	; 27758 <flatcc_builder_vector_push@@Base+0x110>
   27734:	mov	r2, #908	; 0x38c
   27738:	ldr	r1, [pc, #28]	; 2775c <flatcc_builder_vector_push@@Base+0x114>
   2773c:	ldr	r0, [pc, #28]	; 27760 <flatcc_builder_vector_push@@Base+0x118>
   27740:	bl	14618 <__assert_fail@plt>
   27744:	ldr	r3, [pc, #12]	; 27758 <flatcc_builder_vector_push@@Base+0x110>
   27748:	ldr	r2, [pc, #20]	; 27764 <flatcc_builder_vector_push@@Base+0x11c>
   2774c:	ldr	r1, [pc, #8]	; 2775c <flatcc_builder_vector_push@@Base+0x114>
   27750:	ldr	r0, [pc, #16]	; 27768 <flatcc_builder_vector_push@@Base+0x120>
   27754:	bl	14618 <__assert_fail@plt>
   27758:	andeq	r5, r4, r4, lsl #21
   2775c:	andeq	r5, r4, r4, asr lr
   27760:	andeq	r5, r4, ip, ror #31
   27764:	andeq	r0, r0, fp, lsl #7
   27768:	andeq	r5, r4, r0, asr #31

0002776c <flatcc_builder_append_vector@@Base>:
   2776c:	push	{r4, r5, r6, r7, r8, r9, lr}
   27770:	mov	r5, r1
   27774:	ldr	r1, [r0, #32]
   27778:	sub	sp, sp, #12
   2777c:	ldrh	r3, [r1, #14]
   27780:	cmp	r3, #4
   27784:	bne	27874 <flatcc_builder_append_vector@@Base+0x108>
   27788:	ldr	r3, [r1, #20]
   2778c:	mov	r6, r0
   27790:	add	r0, r2, r3
   27794:	cmp	r3, r0
   27798:	ldr	r4, [r1, #24]
   2779c:	movls	r3, #0
   277a0:	movhi	r3, #1
   277a4:	cmp	r4, r0
   277a8:	movcs	r4, r3
   277ac:	orrcc	r4, r3, #1
   277b0:	cmp	r4, #0
   277b4:	bne	27870 <flatcc_builder_append_vector@@Base+0x104>
   277b8:	ldr	r7, [r1, #16]
   277bc:	str	r0, [r1, #20]
   277c0:	ldr	r8, [r6, #20]
   277c4:	mul	r7, r7, r2
   277c8:	ldr	r3, [r6, #24]
   277cc:	add	r1, r7, r8
   277d0:	cmp	r1, r3
   277d4:	str	r1, [r6, #20]
   277d8:	bcs	27808 <flatcc_builder_append_vector@@Base+0x9c>
   277dc:	ldr	r3, [r6, #16]
   277e0:	adds	r3, r3, r8
   277e4:	beq	277fc <flatcc_builder_append_vector@@Base+0x90>
   277e8:	mov	r0, r3
   277ec:	mov	r2, r7
   277f0:	mov	r1, r5
   277f4:	bl	1454c <memcpy@plt>
   277f8:	mov	r3, r0
   277fc:	mov	r0, r3
   27800:	add	sp, sp, #12
   27804:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27808:	ldr	r2, [r6, #28]
   2780c:	mov	r3, #1
   27810:	add	r2, r2, #1
   27814:	ldr	r0, [r6, #40]	; 0x28
   27818:	add	r2, r2, r1
   2781c:	str	r3, [sp]
   27820:	add	r1, r6, #60	; 0x3c
   27824:	ldr	r9, [r6, #48]	; 0x30
   27828:	blx	r9
   2782c:	cmp	r0, #0
   27830:	bne	27868 <flatcc_builder_append_vector@@Base+0xfc>
   27834:	ldr	r1, [r6, #28]
   27838:	ldr	r2, [r6, #64]	; 0x40
   2783c:	ldr	r3, [r6, #60]	; 0x3c
   27840:	sub	r2, r2, r1
   27844:	cmn	r2, #4
   27848:	mvnhi	r2, #3
   2784c:	str	r2, [r6, #24]
   27850:	ldr	r2, [r6, #32]
   27854:	add	r3, r3, r1
   27858:	mvn	r1, #3
   2785c:	str	r3, [r6, #16]
   27860:	str	r1, [r2, #4]
   27864:	b	277e0 <flatcc_builder_append_vector@@Base+0x74>
   27868:	mov	r3, r4
   2786c:	b	277fc <flatcc_builder_append_vector@@Base+0x90>
   27870:	bl	14810 <__assert_fail@plt+0x1f8>
   27874:	ldr	r3, [pc, #12]	; 27888 <flatcc_builder_append_vector@@Base+0x11c>
   27878:	ldr	r2, [pc, #12]	; 2788c <flatcc_builder_append_vector@@Base+0x120>
   2787c:	ldr	r1, [pc, #12]	; 27890 <flatcc_builder_append_vector@@Base+0x124>
   27880:	ldr	r0, [pc, #12]	; 27894 <flatcc_builder_append_vector@@Base+0x128>
   27884:	bl	14618 <__assert_fail@plt>
   27888:	andeq	r5, r4, r0, lsr #21
   2788c:	muleq	r0, r3, r3
   27890:	andeq	r5, r4, r4, asr lr
   27894:	andeq	r5, r4, r0, asr #31

00027898 <flatcc_builder_extend_offset_vector@@Base>:
   27898:	ldr	ip, [r0, #32]
   2789c:	push	{r4, r5, r6, r7, lr}
   278a0:	mov	r4, r0
   278a4:	ldr	r3, [ip, #20]
   278a8:	sub	sp, sp, #12
   278ac:	adds	r3, r1, r3
   278b0:	movcs	r2, #1
   278b4:	movcc	r2, #0
   278b8:	cmn	r3, #-1073741823	; 0xc0000001
   278bc:	movls	r0, #0
   278c0:	movhi	r0, #1
   278c4:	orrs	r5, r2, r0
   278c8:	bne	27960 <flatcc_builder_extend_offset_vector@@Base+0xc8>
   278cc:	str	r3, [ip, #20]
   278d0:	ldr	r6, [r4, #20]
   278d4:	ldr	r3, [r4, #24]
   278d8:	add	r1, r6, r1, lsl #2
   278dc:	cmp	r1, r3
   278e0:	str	r1, [r4, #20]
   278e4:	bcs	278f8 <flatcc_builder_extend_offset_vector@@Base+0x60>
   278e8:	ldr	r0, [r4, #16]
   278ec:	add	r0, r0, r6
   278f0:	add	sp, sp, #12
   278f4:	pop	{r4, r5, r6, r7, pc}
   278f8:	ldr	r2, [r4, #28]
   278fc:	mov	r3, #1
   27900:	add	r2, r2, #1
   27904:	ldr	r0, [r4, #40]	; 0x28
   27908:	add	r2, r2, r1
   2790c:	str	r3, [sp]
   27910:	add	r1, r4, #60	; 0x3c
   27914:	ldr	r7, [r4, #48]	; 0x30
   27918:	blx	r7
   2791c:	cmp	r0, #0
   27920:	bne	27958 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   27924:	ldr	r2, [r4, #28]
   27928:	ldr	r3, [r4, #64]	; 0x40
   2792c:	ldr	r0, [r4, #60]	; 0x3c
   27930:	sub	r3, r3, r2
   27934:	cmn	r3, #4
   27938:	mvnhi	r3, #3
   2793c:	str	r3, [r4, #24]
   27940:	ldr	r3, [r4, #32]
   27944:	add	r0, r0, r2
   27948:	mvn	r2, #3
   2794c:	str	r0, [r4, #16]
   27950:	str	r2, [r3, #4]
   27954:	b	278ec <flatcc_builder_extend_offset_vector@@Base+0x54>
   27958:	mov	r0, r5
   2795c:	b	278f0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   27960:	bl	14810 <__assert_fail@plt+0x1f8>

00027964 <flatcc_builder_offset_vector_push@@Base>:
   27964:	ldr	r2, [r0, #32]
   27968:	push	{r4, r5, r6, r7, lr}
   2796c:	sub	sp, sp, #12
   27970:	ldrh	r3, [r2, #14]
   27974:	cmp	r3, #5
   27978:	bne	27a30 <flatcc_builder_offset_vector_push@@Base+0xcc>
   2797c:	ldr	r3, [r2, #20]
   27980:	cmn	r3, #-1073741823	; 0xc0000001
   27984:	beq	27a24 <flatcc_builder_offset_vector_push@@Base+0xc0>
   27988:	add	r3, r3, #1
   2798c:	str	r3, [r2, #20]
   27990:	ldr	r5, [r0, #20]
   27994:	ldr	r2, [r0, #24]
   27998:	add	r3, r5, #4
   2799c:	cmp	r3, r2
   279a0:	mov	r4, r0
   279a4:	mov	r6, r1
   279a8:	str	r3, [r0, #20]
   279ac:	bcs	279c4 <flatcc_builder_offset_vector_push@@Base+0x60>
   279b0:	ldr	r3, [r0, #16]
   279b4:	adds	r0, r3, r5
   279b8:	strne	r6, [r3, r5]
   279bc:	add	sp, sp, #12
   279c0:	pop	{r4, r5, r6, r7, pc}
   279c4:	ldr	r2, [r0, #28]
   279c8:	mov	r3, #1
   279cc:	add	r2, r5, r2
   279d0:	ldr	r0, [r0, #40]	; 0x28
   279d4:	add	r2, r2, #5
   279d8:	str	r3, [sp]
   279dc:	add	r1, r4, #60	; 0x3c
   279e0:	ldr	r7, [r4, #48]	; 0x30
   279e4:	blx	r7
   279e8:	cmp	r0, #0
   279ec:	bne	27a24 <flatcc_builder_offset_vector_push@@Base+0xc0>
   279f0:	ldr	r1, [r4, #28]
   279f4:	ldr	r2, [r4, #64]	; 0x40
   279f8:	ldr	r3, [r4, #60]	; 0x3c
   279fc:	sub	r2, r2, r1
   27a00:	cmn	r2, #4
   27a04:	mvnhi	r2, #3
   27a08:	str	r2, [r4, #24]
   27a0c:	ldr	r2, [r4, #32]
   27a10:	add	r3, r3, r1
   27a14:	mvn	r1, #3
   27a18:	str	r3, [r4, #16]
   27a1c:	str	r1, [r2, #4]
   27a20:	b	279b4 <flatcc_builder_offset_vector_push@@Base+0x50>
   27a24:	mov	r0, #0
   27a28:	add	sp, sp, #12
   27a2c:	pop	{r4, r5, r6, r7, pc}
   27a30:	ldr	r3, [pc, #12]	; 27a44 <flatcc_builder_offset_vector_push@@Base+0xe0>
   27a34:	ldr	r2, [pc, #12]	; 27a48 <flatcc_builder_offset_vector_push@@Base+0xe4>
   27a38:	ldr	r1, [pc, #12]	; 27a4c <flatcc_builder_offset_vector_push@@Base+0xe8>
   27a3c:	ldr	r0, [pc, #12]	; 27a50 <flatcc_builder_offset_vector_push@@Base+0xec>
   27a40:	bl	14618 <__assert_fail@plt>
   27a44:	andeq	r5, r4, r0, asr #21
   27a48:	andeq	r0, r0, r6, lsr #7
   27a4c:	andeq	r5, r4, r4, asr lr
   27a50:	andeq	r6, r4, ip, lsr #32

00027a54 <flatcc_builder_append_offset_vector@@Base>:
   27a54:	push	{r4, r5, r6, r7, r8, r9, lr}
   27a58:	mov	r5, r0
   27a5c:	ldr	r0, [r0, #32]
   27a60:	sub	sp, sp, #12
   27a64:	ldrh	r3, [r0, #14]
   27a68:	cmp	r3, #5
   27a6c:	bne	27b50 <flatcc_builder_append_offset_vector@@Base+0xfc>
   27a70:	mov	r7, r1
   27a74:	ldr	r1, [r0, #20]
   27a78:	adds	r1, r2, r1
   27a7c:	movcs	r4, #1
   27a80:	movcc	r4, #0
   27a84:	cmn	r1, #-1073741823	; 0xc0000001
   27a88:	movls	r3, #0
   27a8c:	movhi	r3, #1
   27a90:	orrs	r4, r4, r3
   27a94:	bne	27b4c <flatcc_builder_append_offset_vector@@Base+0xf8>
   27a98:	str	r1, [r0, #20]
   27a9c:	ldr	r8, [r5, #20]
   27aa0:	lsl	r6, r2, #2
   27aa4:	ldr	r3, [r5, #24]
   27aa8:	add	r1, r6, r8
   27aac:	cmp	r1, r3
   27ab0:	str	r1, [r5, #20]
   27ab4:	bcs	27ae4 <flatcc_builder_append_offset_vector@@Base+0x90>
   27ab8:	ldr	r3, [r5, #16]
   27abc:	adds	r3, r3, r8
   27ac0:	beq	27ad8 <flatcc_builder_append_offset_vector@@Base+0x84>
   27ac4:	mov	r0, r3
   27ac8:	mov	r2, r6
   27acc:	mov	r1, r7
   27ad0:	bl	1454c <memcpy@plt>
   27ad4:	mov	r3, r0
   27ad8:	mov	r0, r3
   27adc:	add	sp, sp, #12
   27ae0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27ae4:	ldr	r2, [r5, #28]
   27ae8:	mov	r3, #1
   27aec:	add	r2, r2, #1
   27af0:	ldr	r0, [r5, #40]	; 0x28
   27af4:	add	r2, r2, r1
   27af8:	str	r3, [sp]
   27afc:	add	r1, r5, #60	; 0x3c
   27b00:	ldr	r9, [r5, #48]	; 0x30
   27b04:	blx	r9
   27b08:	cmp	r0, #0
   27b0c:	bne	27b44 <flatcc_builder_append_offset_vector@@Base+0xf0>
   27b10:	ldr	r1, [r5, #28]
   27b14:	ldr	r2, [r5, #64]	; 0x40
   27b18:	ldr	r3, [r5, #60]	; 0x3c
   27b1c:	sub	r2, r2, r1
   27b20:	cmn	r2, #4
   27b24:	mvnhi	r2, #3
   27b28:	str	r2, [r5, #24]
   27b2c:	ldr	r2, [r5, #32]
   27b30:	add	r3, r3, r1
   27b34:	mvn	r1, #3
   27b38:	str	r3, [r5, #16]
   27b3c:	str	r1, [r2, #4]
   27b40:	b	27abc <flatcc_builder_append_offset_vector@@Base+0x68>
   27b44:	mov	r3, r4
   27b48:	b	27ad8 <flatcc_builder_append_offset_vector@@Base+0x84>
   27b4c:	bl	14810 <__assert_fail@plt+0x1f8>
   27b50:	ldr	r3, [pc, #12]	; 27b64 <flatcc_builder_append_offset_vector@@Base+0x110>
   27b54:	mov	r2, #948	; 0x3b4
   27b58:	ldr	r1, [pc, #8]	; 27b68 <flatcc_builder_append_offset_vector@@Base+0x114>
   27b5c:	ldr	r0, [pc, #8]	; 27b6c <flatcc_builder_append_offset_vector@@Base+0x118>
   27b60:	bl	14618 <__assert_fail@plt>
   27b64:	andeq	r5, r4, r4, ror #21
   27b68:	andeq	r5, r4, r4, asr lr
   27b6c:	andeq	r6, r4, ip, lsr #32

00027b70 <flatcc_builder_extend_string@@Base>:
   27b70:	ldr	r2, [r0, #32]
   27b74:	push	{r4, r5, r6, lr}
   27b78:	sub	sp, sp, #8
   27b7c:	ldrh	r3, [r2, #14]
   27b80:	cmp	r3, #6
   27b84:	bne	27c30 <flatcc_builder_extend_string@@Base+0xc0>
   27b88:	ldr	r3, [r2, #20]
   27b8c:	adds	r3, r1, r3
   27b90:	bcs	27c2c <flatcc_builder_extend_string@@Base+0xbc>
   27b94:	str	r3, [r2, #20]
   27b98:	ldr	r5, [r0, #20]
   27b9c:	ldr	r3, [r0, #24]
   27ba0:	add	r1, r1, r5
   27ba4:	cmp	r1, r3
   27ba8:	mov	r4, r0
   27bac:	str	r1, [r0, #20]
   27bb0:	bcs	27bc4 <flatcc_builder_extend_string@@Base+0x54>
   27bb4:	ldr	r0, [r0, #16]
   27bb8:	add	r0, r0, r5
   27bbc:	add	sp, sp, #8
   27bc0:	pop	{r4, r5, r6, pc}
   27bc4:	ldr	r2, [r0, #28]
   27bc8:	mov	r3, #1
   27bcc:	add	r2, r2, #1
   27bd0:	ldr	r0, [r0, #40]	; 0x28
   27bd4:	add	r2, r2, r1
   27bd8:	str	r3, [sp]
   27bdc:	add	r1, r4, #60	; 0x3c
   27be0:	ldr	r6, [r4, #48]	; 0x30
   27be4:	blx	r6
   27be8:	cmp	r0, #0
   27bec:	bne	27c24 <flatcc_builder_extend_string@@Base+0xb4>
   27bf0:	ldr	r2, [r4, #28]
   27bf4:	ldr	r3, [r4, #64]	; 0x40
   27bf8:	ldr	r0, [r4, #60]	; 0x3c
   27bfc:	sub	r3, r3, r2
   27c00:	cmn	r3, #4
   27c04:	mvnhi	r3, #3
   27c08:	str	r3, [r4, #24]
   27c0c:	ldr	r3, [r4, #32]
   27c10:	add	r0, r0, r2
   27c14:	mvn	r2, #3
   27c18:	str	r0, [r4, #16]
   27c1c:	str	r2, [r3, #4]
   27c20:	b	27bb8 <flatcc_builder_extend_string@@Base+0x48>
   27c24:	mov	r0, #0
   27c28:	b	27bbc <flatcc_builder_extend_string@@Base+0x4c>
   27c2c:	bl	14810 <__assert_fail@plt+0x1f8>
   27c30:	ldr	r3, [pc, #12]	; 27c44 <flatcc_builder_extend_string@@Base+0xd4>
   27c34:	ldr	r2, [pc, #12]	; 27c48 <flatcc_builder_extend_string@@Base+0xd8>
   27c38:	ldr	r1, [pc, #12]	; 27c4c <flatcc_builder_extend_string@@Base+0xdc>
   27c3c:	ldr	r0, [pc, #12]	; 27c50 <flatcc_builder_extend_string@@Base+0xe0>
   27c40:	bl	14618 <__assert_fail@plt>
   27c44:	andeq	r5, r4, r8, lsl #22
   27c48:			; <UNDEFINED> instruction: 0x000003bd
   27c4c:	andeq	r5, r4, r4, asr lr
   27c50:	ldrdeq	r5, [r4], -r4

00027c54 <flatcc_builder_append_string@@Base>:
   27c54:	push	{r4, r5, r6, r7, r8, lr}
   27c58:	mov	r6, r1
   27c5c:	ldr	r1, [r0, #32]
   27c60:	sub	sp, sp, #8
   27c64:	ldrh	r3, [r1, #14]
   27c68:	cmp	r3, #6
   27c6c:	bne	27d38 <flatcc_builder_append_string@@Base+0xe4>
   27c70:	ldr	r3, [r1, #20]
   27c74:	mov	r5, r2
   27c78:	adds	r3, r2, r3
   27c7c:	bcs	27d34 <flatcc_builder_append_string@@Base+0xe0>
   27c80:	str	r3, [r1, #20]
   27c84:	ldr	r7, [r0, #20]
   27c88:	ldr	r3, [r0, #24]
   27c8c:	add	r1, r2, r7
   27c90:	cmp	r1, r3
   27c94:	mov	r4, r0
   27c98:	str	r1, [r0, #20]
   27c9c:	bcs	27ccc <flatcc_builder_append_string@@Base+0x78>
   27ca0:	ldr	r3, [r0, #16]
   27ca4:	adds	r3, r3, r7
   27ca8:	beq	27cc0 <flatcc_builder_append_string@@Base+0x6c>
   27cac:	mov	r0, r3
   27cb0:	mov	r2, r5
   27cb4:	mov	r1, r6
   27cb8:	bl	1454c <memcpy@plt>
   27cbc:	mov	r3, r0
   27cc0:	mov	r0, r3
   27cc4:	add	sp, sp, #8
   27cc8:	pop	{r4, r5, r6, r7, r8, pc}
   27ccc:	ldr	r2, [r0, #28]
   27cd0:	mov	r3, #1
   27cd4:	add	r2, r2, #1
   27cd8:	ldr	r0, [r0, #40]	; 0x28
   27cdc:	add	r2, r2, r1
   27ce0:	str	r3, [sp]
   27ce4:	add	r1, r4, #60	; 0x3c
   27ce8:	ldr	r8, [r4, #48]	; 0x30
   27cec:	blx	r8
   27cf0:	cmp	r0, #0
   27cf4:	bne	27d2c <flatcc_builder_append_string@@Base+0xd8>
   27cf8:	ldr	r1, [r4, #28]
   27cfc:	ldr	r2, [r4, #64]	; 0x40
   27d00:	ldr	r3, [r4, #60]	; 0x3c
   27d04:	sub	r2, r2, r1
   27d08:	cmn	r2, #4
   27d0c:	mvnhi	r2, #3
   27d10:	str	r2, [r4, #24]
   27d14:	ldr	r2, [r4, #32]
   27d18:	add	r3, r3, r1
   27d1c:	mvn	r1, #3
   27d20:	str	r3, [r4, #16]
   27d24:	str	r1, [r2, #4]
   27d28:	b	27ca4 <flatcc_builder_append_string@@Base+0x50>
   27d2c:	mov	r3, #0
   27d30:	b	27cc0 <flatcc_builder_append_string@@Base+0x6c>
   27d34:	bl	14810 <__assert_fail@plt+0x1f8>
   27d38:	bl	1485c <__assert_fail@plt+0x244>

00027d3c <flatcc_builder_append_string_str@@Base>:
   27d3c:	push	{r4, r5, r6, r7, r8, lr}
   27d40:	mov	r4, r0
   27d44:	sub	sp, sp, #8
   27d48:	mov	r0, r1
   27d4c:	mov	r6, r1
   27d50:	bl	145a0 <strlen@plt>
   27d54:	ldr	r2, [r4, #32]
   27d58:	ldrh	r3, [r2, #14]
   27d5c:	cmp	r3, #6
   27d60:	bne	27e28 <flatcc_builder_append_string_str@@Base+0xec>
   27d64:	ldr	r3, [r2, #20]
   27d68:	mov	r5, r0
   27d6c:	adds	r3, r0, r3
   27d70:	bcs	27e24 <flatcc_builder_append_string_str@@Base+0xe8>
   27d74:	str	r3, [r2, #20]
   27d78:	ldr	r7, [r4, #20]
   27d7c:	ldr	r3, [r4, #24]
   27d80:	add	r1, r0, r7
   27d84:	cmp	r1, r3
   27d88:	str	r1, [r4, #20]
   27d8c:	bcs	27dbc <flatcc_builder_append_string_str@@Base+0x80>
   27d90:	ldr	r3, [r4, #16]
   27d94:	adds	r3, r3, r7
   27d98:	beq	27db0 <flatcc_builder_append_string_str@@Base+0x74>
   27d9c:	mov	r0, r3
   27da0:	mov	r2, r5
   27da4:	mov	r1, r6
   27da8:	bl	1454c <memcpy@plt>
   27dac:	mov	r3, r0
   27db0:	mov	r0, r3
   27db4:	add	sp, sp, #8
   27db8:	pop	{r4, r5, r6, r7, r8, pc}
   27dbc:	ldr	r2, [r4, #28]
   27dc0:	mov	r3, #1
   27dc4:	add	r2, r2, #1
   27dc8:	ldr	r0, [r4, #40]	; 0x28
   27dcc:	add	r2, r2, r1
   27dd0:	str	r3, [sp]
   27dd4:	add	r1, r4, #60	; 0x3c
   27dd8:	ldr	r8, [r4, #48]	; 0x30
   27ddc:	blx	r8
   27de0:	cmp	r0, #0
   27de4:	bne	27e1c <flatcc_builder_append_string_str@@Base+0xe0>
   27de8:	ldr	r1, [r4, #28]
   27dec:	ldr	r2, [r4, #64]	; 0x40
   27df0:	ldr	r3, [r4, #60]	; 0x3c
   27df4:	sub	r2, r2, r1
   27df8:	cmn	r2, #4
   27dfc:	mvnhi	r2, #3
   27e00:	str	r2, [r4, #24]
   27e04:	ldr	r2, [r4, #32]
   27e08:	add	r3, r3, r1
   27e0c:	mvn	r1, #3
   27e10:	str	r3, [r4, #16]
   27e14:	str	r1, [r2, #4]
   27e18:	b	27d94 <flatcc_builder_append_string_str@@Base+0x58>
   27e1c:	mov	r3, #0
   27e20:	b	27db0 <flatcc_builder_append_string_str@@Base+0x74>
   27e24:	bl	14810 <__assert_fail@plt+0x1f8>
   27e28:	bl	1485c <__assert_fail@plt+0x244>

00027e2c <flatcc_builder_append_string_strn@@Base>:
   27e2c:	push	{r4, r5, r6, r7, r8, lr}
   27e30:	mov	r6, r1
   27e34:	mov	r4, r0
   27e38:	sub	sp, sp, #8
   27e3c:	mov	r1, #0
   27e40:	mov	r0, r6
   27e44:	mov	r5, r2
   27e48:	bl	145e8 <memchr@plt>
   27e4c:	ldr	r2, [r4, #32]
   27e50:	ldrh	r3, [r2, #14]
   27e54:	cmp	r0, #0
   27e58:	subne	r5, r0, r6
   27e5c:	cmp	r3, #6
   27e60:	bne	27f24 <flatcc_builder_append_string_strn@@Base+0xf8>
   27e64:	ldr	r3, [r2, #20]
   27e68:	adds	r3, r5, r3
   27e6c:	bcs	27f20 <flatcc_builder_append_string_strn@@Base+0xf4>
   27e70:	str	r3, [r2, #20]
   27e74:	ldr	r7, [r4, #20]
   27e78:	ldr	r3, [r4, #24]
   27e7c:	add	r1, r5, r7
   27e80:	cmp	r1, r3
   27e84:	str	r1, [r4, #20]
   27e88:	bcs	27eb8 <flatcc_builder_append_string_strn@@Base+0x8c>
   27e8c:	ldr	r3, [r4, #16]
   27e90:	adds	r3, r3, r7
   27e94:	beq	27eac <flatcc_builder_append_string_strn@@Base+0x80>
   27e98:	mov	r0, r3
   27e9c:	mov	r2, r5
   27ea0:	mov	r1, r6
   27ea4:	bl	1454c <memcpy@plt>
   27ea8:	mov	r3, r0
   27eac:	mov	r0, r3
   27eb0:	add	sp, sp, #8
   27eb4:	pop	{r4, r5, r6, r7, r8, pc}
   27eb8:	ldr	r2, [r4, #28]
   27ebc:	mov	r3, #1
   27ec0:	add	r2, r2, #1
   27ec4:	ldr	r0, [r4, #40]	; 0x28
   27ec8:	add	r2, r2, r1
   27ecc:	str	r3, [sp]
   27ed0:	add	r1, r4, #60	; 0x3c
   27ed4:	ldr	r8, [r4, #48]	; 0x30
   27ed8:	blx	r8
   27edc:	cmp	r0, #0
   27ee0:	bne	27f18 <flatcc_builder_append_string_strn@@Base+0xec>
   27ee4:	ldr	r1, [r4, #28]
   27ee8:	ldr	r2, [r4, #64]	; 0x40
   27eec:	ldr	r3, [r4, #60]	; 0x3c
   27ef0:	sub	r2, r2, r1
   27ef4:	cmn	r2, #4
   27ef8:	mvnhi	r2, #3
   27efc:	str	r2, [r4, #24]
   27f00:	ldr	r2, [r4, #32]
   27f04:	add	r3, r3, r1
   27f08:	mvn	r1, #3
   27f0c:	str	r3, [r4, #16]
   27f10:	str	r1, [r2, #4]
   27f14:	b	27e90 <flatcc_builder_append_string_strn@@Base+0x64>
   27f18:	mov	r3, #0
   27f1c:	b	27eac <flatcc_builder_append_string_strn@@Base+0x80>
   27f20:	bl	14810 <__assert_fail@plt+0x1f8>
   27f24:	bl	1485c <__assert_fail@plt+0x244>

00027f28 <flatcc_builder_truncate_vector@@Base>:
   27f28:	ldr	r3, [r0, #32]
   27f2c:	push	{r4, lr}
   27f30:	ldrh	r2, [r3, #14]
   27f34:	cmp	r2, #4
   27f38:	bne	27f7c <flatcc_builder_truncate_vector@@Base+0x54>
   27f3c:	ldr	ip, [r3, #20]
   27f40:	cmp	ip, r1
   27f44:	bcc	27f90 <flatcc_builder_truncate_vector@@Base+0x68>
   27f48:	ldr	r2, [r3, #16]
   27f4c:	sub	ip, ip, r1
   27f50:	str	ip, [r3, #20]
   27f54:	mul	r2, r2, r1
   27f58:	ldr	r3, [r0, #20]
   27f5c:	ldr	r1, [r0, #16]
   27f60:	sub	r3, r3, r2
   27f64:	str	r3, [r0, #20]
   27f68:	add	r0, r1, r3
   27f6c:	mov	r1, #0
   27f70:	bl	145c4 <memset@plt>
   27f74:	mov	r0, #0
   27f78:	pop	{r4, pc}
   27f7c:	ldr	r3, [pc, #32]	; 27fa4 <flatcc_builder_truncate_vector@@Base+0x7c>
   27f80:	ldr	r2, [pc, #32]	; 27fa8 <flatcc_builder_truncate_vector@@Base+0x80>
   27f84:	ldr	r1, [pc, #32]	; 27fac <flatcc_builder_truncate_vector@@Base+0x84>
   27f88:	ldr	r0, [pc, #32]	; 27fb0 <flatcc_builder_truncate_vector@@Base+0x88>
   27f8c:	bl	14618 <__assert_fail@plt>
   27f90:	ldr	r3, [pc, #12]	; 27fa4 <flatcc_builder_truncate_vector@@Base+0x7c>
   27f94:	ldr	r2, [pc, #24]	; 27fb4 <flatcc_builder_truncate_vector@@Base+0x8c>
   27f98:	ldr	r1, [pc, #12]	; 27fac <flatcc_builder_truncate_vector@@Base+0x84>
   27f9c:	ldr	r0, [pc, #20]	; 27fb8 <flatcc_builder_truncate_vector@@Base+0x90>
   27fa0:	bl	14618 <__assert_fail@plt>
   27fa4:	andeq	r5, r4, r8, lsr #22
   27fa8:	ldrdeq	r0, [r0], -r9
   27fac:	andeq	r5, r4, r4, asr lr
   27fb0:	andeq	r5, r4, r0, asr #31
   27fb4:	ldrdeq	r0, [r0], -sl
   27fb8:	andeq	r6, r4, r0, rrx

00027fbc <flatcc_builder_truncate_offset_vector@@Base>:
   27fbc:	ldr	r3, [r0, #32]
   27fc0:	push	{r4, lr}
   27fc4:	ldrh	r2, [r3, #14]
   27fc8:	cmp	r2, #5
   27fcc:	bne	28010 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   27fd0:	ldr	ip, [r3, #20]
   27fd4:	cmp	ip, r1
   27fd8:	bcc	28024 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   27fdc:	ldr	r2, [r3, #16]
   27fe0:	sub	ip, ip, r1
   27fe4:	str	ip, [r3, #20]
   27fe8:	mul	r2, r2, r1
   27fec:	ldr	r3, [r0, #20]
   27ff0:	ldr	r1, [r0, #16]
   27ff4:	sub	r3, r3, r2
   27ff8:	str	r3, [r0, #20]
   27ffc:	add	r0, r1, r3
   28000:	mov	r1, #0
   28004:	bl	145c4 <memset@plt>
   28008:	mov	r0, #0
   2800c:	pop	{r4, pc}
   28010:	ldr	r3, [pc, #32]	; 28038 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   28014:	ldr	r2, [pc, #32]	; 2803c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   28018:	ldr	r1, [pc, #32]	; 28040 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   2801c:	ldr	r0, [pc, #32]	; 28044 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   28020:	bl	14618 <__assert_fail@plt>
   28024:	ldr	r3, [pc, #12]	; 28038 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   28028:	ldr	r2, [pc, #24]	; 28048 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   2802c:	ldr	r1, [pc, #12]	; 28040 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   28030:	ldr	r0, [pc, #20]	; 2804c <flatcc_builder_truncate_offset_vector@@Base+0x90>
   28034:	bl	14618 <__assert_fail@plt>
   28038:	andeq	r5, r4, r8, asr #22
   2803c:	andeq	r0, r0, r2, ror #7
   28040:	andeq	r5, r4, r4, asr lr
   28044:	andeq	r6, r4, ip, lsr #32
   28048:	andeq	r0, r0, r3, ror #7
   2804c:	andeq	r6, r4, r4, lsl #1

00028050 <flatcc_builder_truncate_string@@Base>:
   28050:	ldr	r2, [r0, #32]
   28054:	push	{r4, lr}
   28058:	ldrh	r3, [r2, #14]
   2805c:	cmp	r3, #6
   28060:	bne	280a0 <flatcc_builder_truncate_string@@Base+0x50>
   28064:	ldr	r3, [r2, #20]
   28068:	cmp	r3, r1
   2806c:	bcc	280b4 <flatcc_builder_truncate_string@@Base+0x64>
   28070:	sub	r3, r3, r1
   28074:	str	r3, [r2, #20]
   28078:	ldr	r3, [r0, #20]
   2807c:	ldr	r2, [r0, #16]
   28080:	sub	r3, r3, r1
   28084:	str	r3, [r0, #20]
   28088:	add	r0, r2, r3
   2808c:	mov	r2, r1
   28090:	mov	r1, #0
   28094:	bl	145c4 <memset@plt>
   28098:	mov	r0, #0
   2809c:	pop	{r4, pc}
   280a0:	ldr	r3, [pc, #32]	; 280c8 <flatcc_builder_truncate_string@@Base+0x78>
   280a4:	ldr	r2, [pc, #32]	; 280cc <flatcc_builder_truncate_string@@Base+0x7c>
   280a8:	ldr	r1, [pc, #32]	; 280d0 <flatcc_builder_truncate_string@@Base+0x80>
   280ac:	ldr	r0, [pc, #32]	; 280d4 <flatcc_builder_truncate_string@@Base+0x84>
   280b0:	bl	14618 <__assert_fail@plt>
   280b4:	ldr	r3, [pc, #12]	; 280c8 <flatcc_builder_truncate_string@@Base+0x78>
   280b8:	mov	r2, #1004	; 0x3ec
   280bc:	ldr	r1, [pc, #12]	; 280d0 <flatcc_builder_truncate_string@@Base+0x80>
   280c0:	ldr	r0, [pc, #16]	; 280d8 <flatcc_builder_truncate_string@@Base+0x88>
   280c4:	bl	14618 <__assert_fail@plt>
   280c8:	andeq	r5, r4, r0, ror fp
   280cc:	andeq	r0, r0, fp, ror #7
   280d0:	andeq	r5, r4, r4, asr lr
   280d4:	ldrdeq	r5, [r4], -r4
   280d8:	andeq	r6, r4, r0, asr #1

000280dc <flatcc_builder_start_vector@@Base>:
   280dc:	ldr	ip, [r0, #156]	; 0x9c
   280e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   280e4:	cmp	r2, #4
   280e8:	ldr	lr, [r0, #160]	; 0xa0
   280ec:	mov	r4, r0
   280f0:	add	r0, ip, #1
   280f4:	movcs	r7, r2
   280f8:	movcc	r7, #4
   280fc:	cmp	r0, lr
   28100:	sub	sp, sp, #12
   28104:	mov	r6, r1
   28108:	mov	r5, r3
   2810c:	str	r0, [r4, #156]	; 0x9c
   28110:	ble	28180 <flatcc_builder_start_vector@@Base+0xa4>
   28114:	ldr	r3, [r4, #176]	; 0xb0
   28118:	cmp	r3, #0
   2811c:	cmpgt	r0, r3
   28120:	movgt	r3, #1
   28124:	movle	r3, #0
   28128:	bgt	28228 <flatcc_builder_start_vector@@Base+0x14c>
   2812c:	add	ip, ip, ip, lsl #3
   28130:	ldr	r1, [r4, #88]	; 0x58
   28134:	lsl	r8, ip, #2
   28138:	add	r2, r8, #36	; 0x24
   2813c:	cmp	r2, r1
   28140:	bhi	28204 <flatcc_builder_start_vector@@Base+0x128>
   28144:	ldr	r3, [r4, #84]	; 0x54
   28148:	add	r3, r3, r8
   2814c:	cmp	r3, #0
   28150:	str	r3, [r4, #32]
   28154:	beq	28228 <flatcc_builder_start_vector@@Base+0x14c>
   28158:	ldr	r2, [r4, #88]	; 0x58
   2815c:	ldr	r0, [pc, #204]	; 28230 <flatcc_builder_start_vector@@Base+0x154>
   28160:	ldr	r1, [r4, #176]	; 0xb0
   28164:	umull	r0, r2, r0, r2
   28168:	lsr	r2, r2, #3
   2816c:	cmp	r1, #0
   28170:	cmpgt	r2, r1
   28174:	str	r2, [r4, #160]	; 0xa0
   28178:	strgt	r1, [r4, #160]	; 0xa0
   2817c:	b	2818c <flatcc_builder_start_vector@@Base+0xb0>
   28180:	ldr	r3, [r4, #32]
   28184:	add	r3, r3, #36	; 0x24
   28188:	str	r3, [r4, #32]
   2818c:	ldr	r0, [r4, #20]
   28190:	ldr	r1, [r4, #28]
   28194:	ldrh	ip, [r4, #130]	; 0x82
   28198:	add	r2, r0, r1
   2819c:	add	r2, r2, #7
   281a0:	str	r0, [r3, #8]
   281a4:	bic	r2, r2, #7
   281a8:	mov	r0, #0
   281ac:	strh	ip, [r3, #12]
   281b0:	strh	r7, [r4, #130]	; 0x82
   281b4:	str	r1, [r3]
   281b8:	str	r2, [r4, #28]
   281bc:	str	r0, [r4, #20]
   281c0:	str	r0, [r3, #20]
   281c4:	str	r6, [r3, #16]
   281c8:	str	r5, [r3, #24]
   281cc:	ldr	r1, [r4, #64]	; 0x40
   281d0:	ldr	ip, [r4, #60]	; 0x3c
   281d4:	sub	r1, r1, r2
   281d8:	mvn	lr, #3
   281dc:	cmp	r1, lr
   281e0:	add	r2, ip, r2
   281e4:	movhi	r1, lr
   281e8:	mov	ip, #4
   281ec:	strh	ip, [r3, #14]
   281f0:	str	r2, [r4, #16]
   281f4:	str	r1, [r4, #24]
   281f8:	str	lr, [r3, #4]
   281fc:	add	sp, sp, #12
   28200:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28204:	mov	r1, #4
   28208:	ldr	r0, [r4, #40]	; 0x28
   2820c:	str	r1, [sp]
   28210:	add	r1, r4, #84	; 0x54
   28214:	ldr	r9, [r4, #48]	; 0x30
   28218:	blx	r9
   2821c:	cmp	r0, #0
   28220:	beq	28144 <flatcc_builder_start_vector@@Base+0x68>
   28224:	bl	1479c <__assert_fail@plt+0x184>
   28228:	mvn	r0, #0
   2822c:	b	281fc <flatcc_builder_start_vector@@Base+0x120>
   28230:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00028234 <flatcc_builder_start_offset_vector@@Base>:
   28234:	ldr	r1, [r0, #156]	; 0x9c
   28238:	ldr	r3, [r0, #160]	; 0xa0
   2823c:	add	r2, r1, #1
   28240:	cmp	r2, r3
   28244:	push	{r4, r5, r6, lr}
   28248:	mov	r4, r0
   2824c:	sub	sp, sp, #8
   28250:	str	r2, [r0, #156]	; 0x9c
   28254:	ble	282c4 <flatcc_builder_start_offset_vector@@Base+0x90>
   28258:	ldr	r3, [r0, #176]	; 0xb0
   2825c:	cmp	r3, #0
   28260:	cmpgt	r2, r3
   28264:	movgt	r3, #1
   28268:	movle	r3, #0
   2826c:	bgt	2836c <flatcc_builder_start_offset_vector@@Base+0x138>
   28270:	add	r1, r1, r1, lsl #3
   28274:	ldr	r0, [r0, #88]	; 0x58
   28278:	lsl	r5, r1, #2
   2827c:	add	r2, r5, #36	; 0x24
   28280:	cmp	r2, r0
   28284:	bhi	28348 <flatcc_builder_start_offset_vector@@Base+0x114>
   28288:	ldr	r3, [r4, #84]	; 0x54
   2828c:	add	r3, r3, r5
   28290:	cmp	r3, #0
   28294:	str	r3, [r4, #32]
   28298:	beq	2836c <flatcc_builder_start_offset_vector@@Base+0x138>
   2829c:	ldr	r2, [r4, #88]	; 0x58
   282a0:	ldr	r0, [pc, #204]	; 28374 <flatcc_builder_start_offset_vector@@Base+0x140>
   282a4:	ldr	r1, [r4, #176]	; 0xb0
   282a8:	umull	r0, r2, r0, r2
   282ac:	lsr	r2, r2, #3
   282b0:	cmp	r1, #0
   282b4:	cmpgt	r2, r1
   282b8:	str	r2, [r4, #160]	; 0xa0
   282bc:	strgt	r1, [r4, #160]	; 0xa0
   282c0:	b	282d0 <flatcc_builder_start_offset_vector@@Base+0x9c>
   282c4:	ldr	r3, [r0, #32]
   282c8:	add	r3, r3, #36	; 0x24
   282cc:	str	r3, [r0, #32]
   282d0:	ldr	lr, [r4, #20]
   282d4:	ldr	ip, [r4, #28]
   282d8:	ldrh	r5, [r4, #130]	; 0x82
   282dc:	add	r2, lr, ip
   282e0:	add	r2, r2, #7
   282e4:	bic	r2, r2, #7
   282e8:	mov	r1, #4
   282ec:	mov	r0, #0
   282f0:	str	lr, [r3, #8]
   282f4:	strh	r5, [r3, #12]
   282f8:	strh	r1, [r4, #130]	; 0x82
   282fc:	str	ip, [r3]
   28300:	str	r2, [r4, #28]
   28304:	str	r0, [r4, #20]
   28308:	str	r1, [r3, #16]
   2830c:	str	r0, [r3, #20]
   28310:	ldr	r1, [r4, #64]	; 0x40
   28314:	ldr	ip, [r4, #60]	; 0x3c
   28318:	sub	r1, r1, r2
   2831c:	mvn	lr, #3
   28320:	cmp	r1, lr
   28324:	add	r2, ip, r2
   28328:	movhi	r1, lr
   2832c:	mov	ip, #5
   28330:	strh	ip, [r3, #14]
   28334:	str	r2, [r4, #16]
   28338:	str	r1, [r4, #24]
   2833c:	str	lr, [r3, #4]
   28340:	add	sp, sp, #8
   28344:	pop	{r4, r5, r6, pc}
   28348:	mov	r1, #4
   2834c:	ldr	r0, [r4, #40]	; 0x28
   28350:	str	r1, [sp]
   28354:	add	r1, r4, #84	; 0x54
   28358:	ldr	r6, [r4, #48]	; 0x30
   2835c:	blx	r6
   28360:	cmp	r0, #0
   28364:	beq	28288 <flatcc_builder_start_offset_vector@@Base+0x54>
   28368:	bl	1479c <__assert_fail@plt+0x184>
   2836c:	mvn	r0, #0
   28370:	b	28340 <flatcc_builder_start_offset_vector@@Base+0x10c>
   28374:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00028378 <flatcc_builder_create_offset_vector@@Base>:
   28378:	push	{r4, r5, r6, r7, r8, lr}
   2837c:	mov	r4, r0
   28380:	ldr	r0, [r0, #156]	; 0x9c
   28384:	ldr	r3, [r4, #160]	; 0xa0
   28388:	mov	r7, r1
   2838c:	add	r1, r0, #1
   28390:	cmp	r1, r3
   28394:	sub	sp, sp, #8
   28398:	mov	r5, r2
   2839c:	str	r1, [r4, #156]	; 0x9c
   283a0:	ble	28410 <flatcc_builder_create_offset_vector@@Base+0x98>
   283a4:	ldr	r3, [r4, #176]	; 0xb0
   283a8:	cmp	r1, r3
   283ac:	cmpgt	r3, #0
   283b0:	movgt	r3, #1
   283b4:	movle	r3, #0
   283b8:	bgt	284e0 <flatcc_builder_create_offset_vector@@Base+0x168>
   283bc:	add	r0, r0, r0, lsl #3
   283c0:	ldr	r1, [r4, #88]	; 0x58
   283c4:	lsl	r6, r0, #2
   283c8:	add	r2, r6, #36	; 0x24
   283cc:	cmp	r2, r1
   283d0:	bhi	28548 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   283d4:	ldr	r3, [r4, #84]	; 0x54
   283d8:	add	r3, r3, r6
   283dc:	cmp	r3, #0
   283e0:	str	r3, [r4, #32]
   283e4:	beq	284e0 <flatcc_builder_create_offset_vector@@Base+0x168>
   283e8:	ldr	r2, [r4, #88]	; 0x58
   283ec:	ldr	r0, [pc, #552]	; 2861c <flatcc_builder_create_offset_vector@@Base+0x2a4>
   283f0:	ldr	r1, [r4, #176]	; 0xb0
   283f4:	umull	r0, r2, r0, r2
   283f8:	lsr	r2, r2, #3
   283fc:	cmp	r1, #0
   28400:	cmpgt	r2, r1
   28404:	str	r2, [r4, #160]	; 0xa0
   28408:	strgt	r1, [r4, #160]	; 0xa0
   2840c:	b	2841c <flatcc_builder_create_offset_vector@@Base+0xa4>
   28410:	ldr	r3, [r4, #32]
   28414:	add	r3, r3, #36	; 0x24
   28418:	str	r3, [r4, #32]
   2841c:	ldr	r2, [r4, #20]
   28420:	ldr	ip, [r4, #28]
   28424:	ldrh	r6, [r4, #130]	; 0x82
   28428:	add	r1, r2, ip
   2842c:	mvn	lr, #3
   28430:	add	r1, r1, #7
   28434:	str	r2, [r3, #8]
   28438:	bic	r1, r1, #7
   2843c:	mov	r0, #4
   28440:	mov	r2, #0
   28444:	strh	r6, [r3, #12]
   28448:	strh	r0, [r4, #130]	; 0x82
   2844c:	stm	r3, {ip, lr}
   28450:	str	r2, [r4, #20]
   28454:	str	r1, [r4, #28]
   28458:	str	r0, [r3, #16]
   2845c:	str	r2, [r3, #20]
   28460:	ldr	r2, [r4, #64]	; 0x40
   28464:	ldr	r0, [r4, #60]	; 0x3c
   28468:	sub	r2, r2, r1
   2846c:	cmp	r2, lr
   28470:	mov	ip, #5
   28474:	strh	ip, [r3, #14]
   28478:	add	r0, r0, r1
   2847c:	strls	r2, [r4, #24]
   28480:	strhi	lr, [r4, #24]
   28484:	movhi	r2, lr
   28488:	mvn	r6, #3
   2848c:	cmn	r5, #-1073741823	; 0xc0000001
   28490:	str	r0, [r4, #16]
   28494:	str	r6, [r3, #4]
   28498:	bhi	28604 <flatcc_builder_create_offset_vector@@Base+0x28c>
   2849c:	lsl	r8, r5, #2
   284a0:	cmp	r8, r2
   284a4:	str	r5, [r3, #20]
   284a8:	str	r8, [r4, #20]
   284ac:	bcs	284f0 <flatcc_builder_create_offset_vector@@Base+0x178>
   284b0:	cmp	r0, #0
   284b4:	beq	284e0 <flatcc_builder_create_offset_vector@@Base+0x168>
   284b8:	mov	r2, r8
   284bc:	mov	r1, r7
   284c0:	bl	1454c <memcpy@plt>
   284c4:	ldr	r3, [r4, #32]
   284c8:	ldrh	r2, [r3, #14]
   284cc:	cmp	r2, #5
   284d0:	bne	28608 <flatcc_builder_create_offset_vector@@Base+0x290>
   284d4:	ldr	r2, [r3, #20]
   284d8:	cmn	r2, #-1073741823	; 0xc0000001
   284dc:	bls	2856c <flatcc_builder_create_offset_vector@@Base+0x1f4>
   284e0:	mov	r5, #0
   284e4:	mov	r0, r5
   284e8:	add	sp, sp, #8
   284ec:	pop	{r4, r5, r6, r7, r8, pc}
   284f0:	mov	r3, #1
   284f4:	add	r2, r8, #1
   284f8:	ldr	r0, [r4, #40]	; 0x28
   284fc:	add	r2, r2, r1
   28500:	str	r3, [sp]
   28504:	add	r1, r4, #60	; 0x3c
   28508:	ldr	r5, [r4, #48]	; 0x30
   2850c:	blx	r5
   28510:	cmp	r0, #0
   28514:	bne	284e0 <flatcc_builder_create_offset_vector@@Base+0x168>
   28518:	ldr	r2, [r4, #28]
   2851c:	ldr	r3, [r4, #64]	; 0x40
   28520:	ldr	r0, [r4, #60]	; 0x3c
   28524:	sub	r3, r3, r2
   28528:	ldr	r1, [r4, #32]
   2852c:	cmn	r3, #4
   28530:	movhi	r3, r6
   28534:	add	r0, r0, r2
   28538:	str	r3, [r4, #24]
   2853c:	str	r0, [r4, #16]
   28540:	str	r6, [r1, #4]
   28544:	b	284b0 <flatcc_builder_create_offset_vector@@Base+0x138>
   28548:	mov	r1, #4
   2854c:	ldr	r0, [r4, #40]	; 0x28
   28550:	str	r1, [sp]
   28554:	add	r1, r4, #84	; 0x54
   28558:	ldr	r8, [r4, #48]	; 0x30
   2855c:	blx	r8
   28560:	cmp	r0, #0
   28564:	beq	283d4 <flatcc_builder_create_offset_vector@@Base+0x5c>
   28568:	bl	1479c <__assert_fail@plt+0x184>
   2856c:	ldr	r1, [r4, #16]
   28570:	mov	r0, r4
   28574:	bl	25f9c <flatcc_builder_default_alloc@@Base+0x2fc>
   28578:	subs	r5, r0, #0
   2857c:	beq	284e0 <flatcc_builder_create_offset_vector@@Base+0x168>
   28580:	ldr	r2, [r4, #20]
   28584:	mov	r1, #0
   28588:	ldr	r0, [r4, #16]
   2858c:	bl	145c4 <memset@plt>
   28590:	ldr	r3, [r4, #32]
   28594:	ldr	r2, [r4, #64]	; 0x40
   28598:	ldrh	lr, [r4, #130]	; 0x82
   2859c:	ldr	ip, [r3]
   285a0:	ldr	r1, [r3, #4]
   285a4:	ldrh	r0, [r4, #128]	; 0x80
   285a8:	sub	r2, r2, ip
   285ac:	cmp	r2, r1
   285b0:	movcs	r2, r1
   285b4:	cmp	r0, lr
   285b8:	ldr	r0, [r4, #60]	; 0x3c
   285bc:	ldr	r6, [r3, #8]
   285c0:	str	r2, [r4, #24]
   285c4:	add	r2, r0, ip
   285c8:	str	r2, [r4, #16]
   285cc:	str	r6, [r4, #20]
   285d0:	ldr	r2, [r4, #156]	; 0x9c
   285d4:	str	ip, [r4, #28]
   285d8:	str	r1, [r3, #4]
   285dc:	strhcc	lr, [r4, #128]	; 0x80
   285e0:	ldrh	r1, [r3, #12]
   285e4:	sub	r2, r2, #1
   285e8:	sub	r3, r3, #36	; 0x24
   285ec:	mov	r0, r5
   285f0:	str	r2, [r4, #156]	; 0x9c
   285f4:	strh	r1, [r4, #130]	; 0x82
   285f8:	str	r3, [r4, #32]
   285fc:	add	sp, sp, #8
   28600:	pop	{r4, r5, r6, r7, r8, pc}
   28604:	bl	14810 <__assert_fail@plt+0x1f8>
   28608:	ldr	r3, [pc, #16]	; 28620 <flatcc_builder_create_offset_vector@@Base+0x2a8>
   2860c:	ldr	r2, [pc, #16]	; 28624 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   28610:	ldr	r1, [pc, #16]	; 28628 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   28614:	ldr	r0, [pc, #16]	; 2862c <flatcc_builder_create_offset_vector@@Base+0x2b4>
   28618:	bl	14618 <__assert_fail@plt>
   2861c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   28620:	muleq	r4, r0, fp
   28624:	andeq	r0, r0, r8, asr #11
   28628:	andeq	r5, r4, r4, asr lr
   2862c:	andeq	r6, r4, ip, lsr #32

00028630 <flatcc_builder_start_string@@Base>:
   28630:	ldr	r1, [r0, #156]	; 0x9c
   28634:	ldr	r3, [r0, #160]	; 0xa0
   28638:	add	r2, r1, #1
   2863c:	cmp	r2, r3
   28640:	push	{r4, r5, r6, lr}
   28644:	mov	r4, r0
   28648:	sub	sp, sp, #8
   2864c:	str	r2, [r0, #156]	; 0x9c
   28650:	ble	286c0 <flatcc_builder_start_string@@Base+0x90>
   28654:	ldr	r3, [r0, #176]	; 0xb0
   28658:	cmp	r3, #0
   2865c:	cmpgt	r2, r3
   28660:	movgt	r3, #1
   28664:	movle	r3, #0
   28668:	bgt	28768 <flatcc_builder_start_string@@Base+0x138>
   2866c:	add	r1, r1, r1, lsl #3
   28670:	ldr	r0, [r0, #88]	; 0x58
   28674:	lsl	r5, r1, #2
   28678:	add	r2, r5, #36	; 0x24
   2867c:	cmp	r2, r0
   28680:	bhi	28744 <flatcc_builder_start_string@@Base+0x114>
   28684:	ldr	r3, [r4, #84]	; 0x54
   28688:	add	r3, r3, r5
   2868c:	cmp	r3, #0
   28690:	str	r3, [r4, #32]
   28694:	beq	28768 <flatcc_builder_start_string@@Base+0x138>
   28698:	ldr	r2, [r4, #88]	; 0x58
   2869c:	ldr	r0, [pc, #204]	; 28770 <flatcc_builder_start_string@@Base+0x140>
   286a0:	ldr	r1, [r4, #176]	; 0xb0
   286a4:	umull	r0, r2, r0, r2
   286a8:	lsr	r2, r2, #3
   286ac:	cmp	r1, #0
   286b0:	cmpgt	r2, r1
   286b4:	str	r2, [r4, #160]	; 0xa0
   286b8:	strgt	r1, [r4, #160]	; 0xa0
   286bc:	b	286cc <flatcc_builder_start_string@@Base+0x9c>
   286c0:	ldr	r3, [r0, #32]
   286c4:	add	r3, r3, #36	; 0x24
   286c8:	str	r3, [r0, #32]
   286cc:	ldr	lr, [r4, #20]
   286d0:	ldr	ip, [r4, #28]
   286d4:	ldrh	r5, [r4, #130]	; 0x82
   286d8:	add	r2, lr, ip
   286dc:	add	r2, r2, #7
   286e0:	bic	r2, r2, #7
   286e4:	mov	r1, #1
   286e8:	mov	r0, #0
   286ec:	str	lr, [r3, #8]
   286f0:	strh	r5, [r3, #12]
   286f4:	strh	r1, [r4, #130]	; 0x82
   286f8:	str	ip, [r3]
   286fc:	str	r2, [r4, #28]
   28700:	str	r0, [r4, #20]
   28704:	str	r1, [r3, #16]
   28708:	str	r0, [r3, #20]
   2870c:	ldr	r1, [r4, #64]	; 0x40
   28710:	ldr	ip, [r4, #60]	; 0x3c
   28714:	sub	r1, r1, r2
   28718:	mvn	lr, #3
   2871c:	cmp	r1, lr
   28720:	add	r2, ip, r2
   28724:	movhi	r1, lr
   28728:	mov	ip, #6
   2872c:	strh	ip, [r3, #14]
   28730:	str	r2, [r4, #16]
   28734:	str	r1, [r4, #24]
   28738:	str	lr, [r3, #4]
   2873c:	add	sp, sp, #8
   28740:	pop	{r4, r5, r6, pc}
   28744:	mov	r1, #4
   28748:	ldr	r0, [r4, #40]	; 0x28
   2874c:	str	r1, [sp]
   28750:	add	r1, r4, #84	; 0x54
   28754:	ldr	r6, [r4, #48]	; 0x30
   28758:	blx	r6
   2875c:	cmp	r0, #0
   28760:	beq	28684 <flatcc_builder_start_string@@Base+0x54>
   28764:	bl	1479c <__assert_fail@plt+0x184>
   28768:	mvn	r0, #0
   2876c:	b	2873c <flatcc_builder_start_string@@Base+0x10c>
   28770:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00028774 <flatcc_builder_reserve_table@@Base>:
   28774:	cmp	r1, #0
   28778:	push	{r4, r5, r6, r7, lr}
   2877c:	sub	sp, sp, #12
   28780:	blt	28858 <flatcc_builder_reserve_table@@Base+0xe4>
   28784:	ldr	r2, [r0, #32]
   28788:	add	r1, r1, #2
   2878c:	mov	r5, r0
   28790:	ldrh	r6, [r2, #28]
   28794:	ldr	r3, [r2, #16]
   28798:	ldr	r0, [r0, #56]	; 0x38
   2879c:	lsl	r4, r1, #1
   287a0:	add	r6, r3, r6, lsl #1
   287a4:	add	r2, r6, r4
   287a8:	cmp	r2, r0
   287ac:	bhi	28808 <flatcc_builder_reserve_table@@Base+0x94>
   287b0:	ldr	r3, [r5, #52]	; 0x34
   287b4:	adds	r3, r3, r6
   287b8:	streq	r3, [r5, #4]
   287bc:	mvneq	r0, #0
   287c0:	beq	28800 <flatcc_builder_reserve_table@@Base+0x8c>
   287c4:	ldr	r2, [r5, #32]
   287c8:	add	r3, r3, #4
   287cc:	str	r3, [r5, #4]
   287d0:	ldr	r6, [r2, #20]
   287d4:	ldr	r3, [r5, #80]	; 0x50
   287d8:	add	r2, r4, r6
   287dc:	sub	r2, r2, #3
   287e0:	cmp	r2, r3
   287e4:	bhi	28830 <flatcc_builder_reserve_table@@Base+0xbc>
   287e8:	ldr	r3, [r5, #76]	; 0x4c
   287ec:	add	r3, r3, r6
   287f0:	cmp	r3, #0
   287f4:	movne	r0, #0
   287f8:	mvneq	r0, #0
   287fc:	str	r3, [r5]
   28800:	add	sp, sp, #12
   28804:	pop	{r4, r5, r6, r7, pc}
   28808:	mov	r3, #0
   2880c:	ldr	r0, [r5, #40]	; 0x28
   28810:	add	r1, r5, #52	; 0x34
   28814:	str	r3, [sp]
   28818:	mov	r3, #1
   2881c:	ldr	r7, [r5, #48]	; 0x30
   28820:	blx	r7
   28824:	cmp	r0, #0
   28828:	beq	287b0 <flatcc_builder_reserve_table@@Base+0x3c>
   2882c:	bl	1479c <__assert_fail@plt+0x184>
   28830:	mov	r3, #3
   28834:	ldr	r0, [r5, #40]	; 0x28
   28838:	add	r1, r5, #76	; 0x4c
   2883c:	str	r3, [sp]
   28840:	mov	r3, #0
   28844:	ldr	r4, [r5, #48]	; 0x30
   28848:	blx	r4
   2884c:	cmp	r0, #0
   28850:	beq	287e8 <flatcc_builder_reserve_table@@Base+0x74>
   28854:	b	2882c <flatcc_builder_reserve_table@@Base+0xb8>
   28858:	ldr	r3, [pc, #12]	; 2886c <flatcc_builder_reserve_table@@Base+0xf8>
   2885c:	ldr	r2, [pc, #12]	; 28870 <flatcc_builder_reserve_table@@Base+0xfc>
   28860:	ldr	r1, [pc, #12]	; 28874 <flatcc_builder_reserve_table@@Base+0x100>
   28864:	ldr	r0, [pc, #12]	; 28878 <flatcc_builder_reserve_table@@Base+0x104>
   28868:	bl	14618 <__assert_fail@plt>
   2886c:			; <UNDEFINED> instruction: 0x00045bb4
   28870:	andeq	r0, r0, r9, lsr #8
   28874:	andeq	r5, r4, r4, asr lr
   28878:	andeq	r6, r4, r4, ror #1

0002887c <flatcc_builder_start_table@@Base>:
   2887c:	push	{r4, r5, r6, r7, lr}
   28880:	mov	r5, r1
   28884:	ldr	r1, [r0, #156]	; 0x9c
   28888:	ldr	r3, [r0, #160]	; 0xa0
   2888c:	add	r2, r1, #1
   28890:	cmp	r2, r3
   28894:	sub	sp, sp, #12
   28898:	mov	r4, r0
   2889c:	str	r2, [r0, #156]	; 0x9c
   288a0:	ble	28910 <flatcc_builder_start_table@@Base+0x94>
   288a4:	ldr	r3, [r0, #176]	; 0xb0
   288a8:	cmp	r3, #0
   288ac:	cmpgt	r2, r3
   288b0:	movgt	r3, #1
   288b4:	movle	r3, #0
   288b8:	bgt	28ab0 <flatcc_builder_start_table@@Base+0x234>
   288bc:	add	r1, r1, r1, lsl #3
   288c0:	ldr	r0, [r0, #88]	; 0x58
   288c4:	lsl	r6, r1, #2
   288c8:	add	r2, r6, #36	; 0x24
   288cc:	cmp	r2, r0
   288d0:	bhi	28a8c <flatcc_builder_start_table@@Base+0x210>
   288d4:	ldr	r3, [r4, #84]	; 0x54
   288d8:	add	r3, r3, r6
   288dc:	cmp	r3, #0
   288e0:	str	r3, [r4, #32]
   288e4:	beq	28ab0 <flatcc_builder_start_table@@Base+0x234>
   288e8:	ldr	r2, [r4, #88]	; 0x58
   288ec:	ldr	r0, [pc, #452]	; 28ab8 <flatcc_builder_start_table@@Base+0x23c>
   288f0:	ldr	r1, [r4, #176]	; 0xb0
   288f4:	umull	r0, r2, r0, r2
   288f8:	lsr	r2, r2, #3
   288fc:	cmp	r2, r1
   28900:	cmpgt	r1, #0
   28904:	str	r2, [r4, #160]	; 0xa0
   28908:	strgt	r1, [r4, #160]	; 0xa0
   2890c:	b	2891c <flatcc_builder_start_table@@Base+0xa0>
   28910:	ldr	r3, [r0, #32]
   28914:	add	r3, r3, #36	; 0x24
   28918:	str	r3, [r0, #32]
   2891c:	ldr	ip, [r4, #20]
   28920:	ldr	lr, [r4, #28]
   28924:	ldrh	r7, [r4, #130]	; 0x82
   28928:	ldr	r6, [r4, #4]
   2892c:	ldr	r0, [r4, #52]	; 0x34
   28930:	add	r2, ip, lr
   28934:	str	ip, [r3, #8]
   28938:	add	r2, r2, #7
   2893c:	mov	ip, #4
   28940:	strh	r7, [r3, #12]
   28944:	sub	r1, r6, r0
   28948:	strh	ip, [r4, #130]	; 0x82
   2894c:	bic	r2, r2, #7
   28950:	mvn	r6, #3
   28954:	mov	ip, #0
   28958:	str	lr, [r3]
   2895c:	str	r6, [r3, #4]
   28960:	str	r2, [r4, #28]
   28964:	str	ip, [r4, #20]
   28968:	str	r1, [r3, #16]
   2896c:	ldr	lr, [r4, #76]	; 0x4c
   28970:	ldr	r2, [r4]
   28974:	add	r5, r5, #2
   28978:	sub	r2, r2, lr
   2897c:	str	r2, [r3, #20]
   28980:	ldr	r2, [r4, #12]
   28984:	lsl	r5, r5, #1
   28988:	str	r2, [r3, #24]
   2898c:	ldrh	r6, [r4, #8]
   28990:	ldr	lr, [pc, #292]	; 28abc <flatcc_builder_start_table@@Base+0x240>
   28994:	strh	r6, [r3, #28]
   28998:	add	r6, r1, r6, lsl #1
   2899c:	ldr	r1, [r4, #56]	; 0x38
   289a0:	add	r2, r6, r5
   289a4:	cmp	r2, r1
   289a8:	mov	r1, #3
   289ac:	strh	ip, [r4, #8]
   289b0:	str	lr, [r4, #12]
   289b4:	strh	r1, [r3, #14]
   289b8:	bhi	28a3c <flatcc_builder_start_table@@Base+0x1c0>
   289bc:	adds	r6, r6, r0
   289c0:	streq	r6, [r4, #4]
   289c4:	beq	28ab0 <flatcc_builder_start_table@@Base+0x234>
   289c8:	ldr	r3, [r4, #32]
   289cc:	add	r6, r6, #4
   289d0:	str	r6, [r4, #4]
   289d4:	ldr	r6, [r3, #20]
   289d8:	sub	r2, r5, #3
   289dc:	ldr	r3, [r4, #80]	; 0x50
   289e0:	add	r2, r2, r6
   289e4:	cmp	r2, r3
   289e8:	bhi	28a64 <flatcc_builder_start_table@@Base+0x1e8>
   289ec:	ldr	r3, [r4, #76]	; 0x4c
   289f0:	add	r3, r3, r6
   289f4:	cmp	r3, #0
   289f8:	str	r3, [r4]
   289fc:	beq	28ab0 <flatcc_builder_start_table@@Base+0x234>
   28a00:	ldr	ip, [r4, #28]
   28a04:	ldr	r3, [r4, #64]	; 0x40
   28a08:	ldr	r2, [pc, #176]	; 28ac0 <flatcc_builder_start_table@@Base+0x244>
   28a0c:	sub	r3, r3, ip
   28a10:	ldr	r1, [r4, #60]	; 0x3c
   28a14:	ldr	lr, [r4, #32]
   28a18:	cmp	r3, r2
   28a1c:	mov	r0, #0
   28a20:	add	r1, r1, ip
   28a24:	movcs	r3, r2
   28a28:	str	r1, [r4, #16]
   28a2c:	str	r3, [r4, #24]
   28a30:	str	r2, [lr, #4]
   28a34:	add	sp, sp, #12
   28a38:	pop	{r4, r5, r6, r7, pc}
   28a3c:	ldr	r0, [r4, #40]	; 0x28
   28a40:	mov	r3, #1
   28a44:	str	ip, [sp]
   28a48:	add	r1, r4, #52	; 0x34
   28a4c:	ldr	r7, [r4, #48]	; 0x30
   28a50:	blx	r7
   28a54:	cmp	r0, #0
   28a58:	bne	28a88 <flatcc_builder_start_table@@Base+0x20c>
   28a5c:	ldr	r0, [r4, #52]	; 0x34
   28a60:	b	289bc <flatcc_builder_start_table@@Base+0x140>
   28a64:	mov	r3, #3
   28a68:	ldr	r0, [r4, #40]	; 0x28
   28a6c:	add	r1, r4, #76	; 0x4c
   28a70:	str	r3, [sp]
   28a74:	mov	r3, #0
   28a78:	ldr	r5, [r4, #48]	; 0x30
   28a7c:	blx	r5
   28a80:	cmp	r0, #0
   28a84:	beq	289ec <flatcc_builder_start_table@@Base+0x170>
   28a88:	bl	1479c <__assert_fail@plt+0x184>
   28a8c:	mov	r1, #4
   28a90:	ldr	r0, [r4, #40]	; 0x28
   28a94:	str	r1, [sp]
   28a98:	add	r1, r4, #84	; 0x54
   28a9c:	ldr	r7, [r4, #48]	; 0x30
   28aa0:	blx	r7
   28aa4:	cmp	r0, #0
   28aa8:	beq	288d4 <flatcc_builder_start_table@@Base+0x58>
   28aac:	b	28a88 <flatcc_builder_start_table@@Base+0x20c>
   28ab0:	mvn	r0, #0
   28ab4:	b	28a34 <flatcc_builder_start_table@@Base+0x1b8>
   28ab8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   28abc:	svccs	0x00693b52
   28ac0:	strdeq	pc, [r0], -ip

00028ac4 <flatcc_builder_create_vtable@@Base>:
   28ac4:	push	{r4, r5, r6, lr}
   28ac8:	sub	sp, sp, #80	; 0x50
   28acc:	mov	r3, #0
   28ad0:	cmp	r2, #0
   28ad4:	str	r3, [sp, #8]
   28ad8:	str	r3, [sp, #12]
   28adc:	mov	r4, r0
   28ae0:	ldr	r3, [r0, #152]	; 0x98
   28ae4:	beq	28b58 <flatcc_builder_create_vtable@@Base+0x94>
   28ae8:	mov	r0, #1
   28aec:	cmp	r3, #0
   28af0:	str	r1, [sp, #16]
   28af4:	str	r2, [sp, #8]
   28af8:	str	r2, [sp, #20]
   28afc:	str	r0, [sp, #12]
   28b00:	mov	r1, r2
   28b04:	beq	28b70 <flatcc_builder_create_vtable@@Base+0xac>
   28b08:	ldr	r3, [r4, #136]	; 0x88
   28b0c:	sub	r5, r3, r2
   28b10:	cmp	r3, r5
   28b14:	ble	28b6c <flatcc_builder_create_vtable@@Base+0xa8>
   28b18:	ldr	r0, [r4, #36]	; 0x24
   28b1c:	mov	r3, r5
   28b20:	str	r2, [sp]
   28b24:	add	r1, sp, #16
   28b28:	ldr	r6, [r4, #44]	; 0x2c
   28b2c:	mov	r2, #1
   28b30:	blx	r6
   28b34:	cmp	r0, #0
   28b38:	bne	28bd4 <flatcc_builder_create_vtable@@Base+0x110>
   28b3c:	cmp	r5, #0
   28b40:	str	r5, [r4, #136]	; 0x88
   28b44:	beq	28b4c <flatcc_builder_create_vtable@@Base+0x88>
   28b48:	add	r5, r5, #1
   28b4c:	mov	r0, r5
   28b50:	add	sp, sp, #80	; 0x50
   28b54:	pop	{r4, r5, r6, pc}
   28b58:	cmp	r3, #0
   28b5c:	bne	28b6c <flatcc_builder_create_vtable@@Base+0xa8>
   28b60:	ldr	r2, [r0, #180]	; 0xb4
   28b64:	cmp	r2, #0
   28b68:	beq	28bc8 <flatcc_builder_create_vtable@@Base+0x104>
   28b6c:	bl	147e8 <__assert_fail@plt+0x1d0>
   28b70:	ldr	r3, [r4, #180]	; 0xb4
   28b74:	cmp	r3, #0
   28b78:	bne	28b08 <flatcc_builder_create_vtable@@Base+0x44>
   28b7c:	ldr	r5, [r4, #140]	; 0x8c
   28b80:	add	r3, r5, r2
   28b84:	cmp	r5, r3
   28b88:	str	r3, [r4, #140]	; 0x8c
   28b8c:	movle	r2, r0
   28b90:	bgt	28be8 <flatcc_builder_create_vtable@@Base+0x124>
   28b94:	ldr	r0, [r4, #36]	; 0x24
   28b98:	mov	r3, r5
   28b9c:	str	r1, [sp]
   28ba0:	add	r1, sp, #16
   28ba4:	ldr	r4, [r4, #44]	; 0x2c
   28ba8:	blx	r4
   28bac:	cmp	r0, #0
   28bb0:	beq	28b48 <flatcc_builder_create_vtable@@Base+0x84>
   28bb4:	ldr	r3, [pc, #48]	; 28bec <flatcc_builder_create_vtable@@Base+0x128>
   28bb8:	ldr	r2, [pc, #48]	; 28bf0 <flatcc_builder_create_vtable@@Base+0x12c>
   28bbc:	ldr	r1, [pc, #48]	; 28bf4 <flatcc_builder_create_vtable@@Base+0x130>
   28bc0:	ldr	r0, [pc, #48]	; 28bf8 <flatcc_builder_create_vtable@@Base+0x134>
   28bc4:	bl	14618 <__assert_fail@plt>
   28bc8:	ldr	r5, [r4, #140]	; 0x8c
   28bcc:	mov	r1, r2
   28bd0:	b	28b94 <flatcc_builder_create_vtable@@Base+0xd0>
   28bd4:	ldr	r3, [pc, #32]	; 28bfc <flatcc_builder_create_vtable@@Base+0x138>
   28bd8:	ldr	r2, [pc, #32]	; 28c00 <flatcc_builder_create_vtable@@Base+0x13c>
   28bdc:	ldr	r1, [pc, #16]	; 28bf4 <flatcc_builder_create_vtable@@Base+0x130>
   28be0:	ldr	r0, [pc, #16]	; 28bf8 <flatcc_builder_create_vtable@@Base+0x134>
   28be4:	bl	14618 <__assert_fail@plt>
   28be8:	bl	147c0 <__assert_fail@plt+0x1a8>
   28bec:	andeq	r5, r4, r4, lsl r7
   28bf0:	andeq	r0, r0, r5, lsr #5
   28bf4:	andeq	r5, r4, r4, asr lr
   28bf8:	andeq	r5, r4, r4, lsl pc
   28bfc:	andeq	r5, r4, r0, lsr #14
   28c00:	andeq	r0, r0, fp, lsl #5

00028c04 <flatcc_builder_create_cached_vtable@@Base>:
   28c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c08:	sub	sp, sp, #28
   28c0c:	ldr	r4, [r0, #116]	; 0x74
   28c10:	mov	sl, r3
   28c14:	cmp	r4, #0
   28c18:	mov	r8, r0
   28c1c:	str	r1, [sp, #8]
   28c20:	mov	r7, r2
   28c24:	rsbne	r3, r4, #32
   28c28:	beq	28d80 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   28c2c:	lsr	sl, sl, r3
   28c30:	ldr	r3, [r8, #92]	; 0x5c
   28c34:	adds	r2, r3, sl, lsl #2
   28c38:	str	r3, [sp, #16]
   28c3c:	str	r2, [sp, #20]
   28c40:	beq	28d74 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28c44:	ldr	r5, [r3, sl, lsl #2]
   28c48:	cmp	r5, #0
   28c4c:	beq	28e70 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   28c50:	mov	r3, #0
   28c54:	ldr	fp, [r8, #100]	; 0x64
   28c58:	ldr	r6, [r8, #68]	; 0x44
   28c5c:	mov	r9, r2
   28c60:	str	r3, [sp, #12]
   28c64:	b	28c78 <flatcc_builder_create_cached_vtable@@Base+0x74>
   28c68:	ldr	r5, [r4, #12]
   28c6c:	add	r9, r4, #12
   28c70:	cmp	r5, #0
   28c74:	beq	28cc8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   28c78:	add	r4, fp, r5
   28c7c:	ldr	r2, [r4, #8]
   28c80:	add	r1, r6, r2
   28c84:	ldrh	r2, [r6, r2]
   28c88:	cmp	r2, r7
   28c8c:	bne	28c68 <flatcc_builder_create_cached_vtable@@Base+0x64>
   28c90:	mov	r2, r7
   28c94:	ldr	r0, [sp, #8]
   28c98:	bl	14558 <memcmp@plt>
   28c9c:	cmp	r0, #0
   28ca0:	bne	28c68 <flatcc_builder_create_cached_vtable@@Base+0x64>
   28ca4:	ldr	r1, [r4, #4]
   28ca8:	ldr	r2, [r8, #152]	; 0x98
   28cac:	cmp	r1, r2
   28cb0:	beq	28d44 <flatcc_builder_create_cached_vtable@@Base+0x140>
   28cb4:	ldr	r5, [r4, #12]
   28cb8:	add	r9, r4, #12
   28cbc:	cmp	r5, #0
   28cc0:	str	r4, [sp, #12]
   28cc4:	bne	28c78 <flatcc_builder_create_cached_vtable@@Base+0x74>
   28cc8:	ldr	r4, [r8, #124]	; 0x7c
   28ccc:	ldr	r3, [r8, #104]	; 0x68
   28cd0:	add	r2, r4, #16
   28cd4:	cmp	r2, r3
   28cd8:	bhi	28e48 <flatcc_builder_create_cached_vtable@@Base+0x244>
   28cdc:	ldr	r5, [r8, #100]	; 0x64
   28ce0:	adds	r6, r5, r4
   28ce4:	beq	28d74 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28ce8:	ldr	r3, [r8, #124]	; 0x7c
   28cec:	ldr	r0, [sp, #16]
   28cf0:	ldr	r2, [r8, #152]	; 0x98
   28cf4:	add	r1, r3, #16
   28cf8:	str	r1, [r8, #124]	; 0x7c
   28cfc:	str	r2, [r6, #4]
   28d00:	ldr	r1, [r0, sl, lsl #2]
   28d04:	mov	r2, r7
   28d08:	str	r1, [r6, #12]
   28d0c:	str	r3, [r0, sl, lsl #2]
   28d10:	ldr	r1, [sp, #8]
   28d14:	mov	r0, r8
   28d18:	bl	28ac4 <flatcc_builder_create_vtable@@Base>
   28d1c:	cmp	r0, #0
   28d20:	str	r0, [r5, r4]
   28d24:	beq	28d74 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28d28:	ldr	r3, [sp, #12]
   28d2c:	cmp	r3, #0
   28d30:	beq	28e78 <flatcc_builder_create_cached_vtable@@Base+0x274>
   28d34:	ldr	r3, [r3, #8]
   28d38:	str	r3, [r6, #8]
   28d3c:	add	sp, sp, #28
   28d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d44:	ldr	r3, [sp, #20]
   28d48:	cmp	r3, r9
   28d4c:	beq	28d68 <flatcc_builder_create_cached_vtable@@Base+0x164>
   28d50:	ldr	r2, [sp, #16]
   28d54:	ldr	r3, [r4, #12]
   28d58:	str	r3, [r9]
   28d5c:	ldr	r3, [r2, sl, lsl #2]
   28d60:	str	r3, [r4, #12]
   28d64:	str	r5, [r2, sl, lsl #2]
   28d68:	ldr	r0, [r4]
   28d6c:	add	sp, sp, #28
   28d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d74:	mov	r0, #0
   28d78:	add	sp, sp, #28
   28d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d80:	ldr	r3, [r0, #124]	; 0x7c
   28d84:	add	r5, r0, #92	; 0x5c
   28d88:	cmp	r3, #0
   28d8c:	bne	28f3c <flatcc_builder_create_cached_vtable@@Base+0x338>
   28d90:	ldr	r3, [r0, #104]	; 0x68
   28d94:	cmp	r3, #15
   28d98:	bls	28e1c <flatcc_builder_create_cached_vtable@@Base+0x218>
   28d9c:	ldr	r3, [r8, #100]	; 0x64
   28da0:	cmp	r3, #0
   28da4:	beq	28d74 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28da8:	mov	r2, #16
   28dac:	mov	r3, #5
   28db0:	str	r2, [r8, #124]	; 0x7c
   28db4:	ldr	r0, [r8, #40]	; 0x28
   28db8:	mov	r1, r5
   28dbc:	str	r3, [sp]
   28dc0:	mov	r2, #256	; 0x100
   28dc4:	ldr	r5, [r8, #48]	; 0x30
   28dc8:	mov	r3, #1
   28dcc:	blx	r5
   28dd0:	cmp	r0, #0
   28dd4:	bne	28d74 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28dd8:	ldr	r1, [r8, #96]	; 0x60
   28ddc:	mov	r3, #256	; 0x100
   28de0:	b	28de8 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   28de4:	mov	r3, r2
   28de8:	lsl	r2, r3, #1
   28dec:	cmp	r2, r1
   28df0:	bls	28de4 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   28df4:	lsr	r3, r3, #2
   28df8:	cmp	r3, #1
   28dfc:	bls	28ec8 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   28e00:	mov	r2, #1
   28e04:	add	r4, r4, #1
   28e08:	cmp	r3, r2, lsl r4
   28e0c:	bhi	28e04 <flatcc_builder_create_cached_vtable@@Base+0x200>
   28e10:	rsb	r3, r4, #32
   28e14:	str	r4, [r8, #116]	; 0x74
   28e18:	b	28c2c <flatcc_builder_create_cached_vtable@@Base+0x28>
   28e1c:	mov	r3, #6
   28e20:	ldr	r0, [r0, #40]	; 0x28
   28e24:	mov	r2, #16
   28e28:	str	r3, [sp]
   28e2c:	add	r1, r8, #100	; 0x64
   28e30:	ldr	r6, [r8, #48]	; 0x30
   28e34:	mov	r3, r4
   28e38:	blx	r6
   28e3c:	cmp	r0, #0
   28e40:	beq	28d9c <flatcc_builder_create_cached_vtable@@Base+0x198>
   28e44:	b	28f30 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   28e48:	mov	r3, #6
   28e4c:	ldr	r0, [r8, #40]	; 0x28
   28e50:	add	r1, r8, #100	; 0x64
   28e54:	str	r3, [sp]
   28e58:	mov	r3, #0
   28e5c:	ldr	r5, [r8, #48]	; 0x30
   28e60:	blx	r5
   28e64:	cmp	r0, #0
   28e68:	beq	28cdc <flatcc_builder_create_cached_vtable@@Base+0xd8>
   28e6c:	b	28f30 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   28e70:	str	r5, [sp, #12]
   28e74:	b	28cc8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   28e78:	ldr	r3, [r8, #172]	; 0xac
   28e7c:	ldr	r9, [r8, #120]	; 0x78
   28e80:	cmp	r3, #0
   28e84:	add	r2, r9, r7
   28e88:	beq	28ed0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   28e8c:	cmp	r3, r2
   28e90:	bcs	28ed0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   28e94:	ldr	r3, [r8, #116]	; 0x74
   28e98:	cmp	r3, #0
   28e9c:	beq	28d3c <flatcc_builder_create_cached_vtable@@Base+0x138>
   28ea0:	ldr	r6, [sp, #12]
   28ea4:	ldr	r2, [r8, #96]	; 0x60
   28ea8:	mov	r1, r6
   28eac:	ldr	r0, [r8, #92]	; 0x5c
   28eb0:	bl	145c4 <memset@plt>
   28eb4:	mov	r3, #16
   28eb8:	ldr	r0, [r5, r4]
   28ebc:	str	r6, [r8, #120]	; 0x78
   28ec0:	str	r3, [r8, #124]	; 0x7c
   28ec4:	b	28d3c <flatcc_builder_create_cached_vtable@@Base+0x138>
   28ec8:	mov	r3, #32
   28ecc:	b	28e14 <flatcc_builder_create_cached_vtable@@Base+0x210>
   28ed0:	ldr	r3, [r8, #72]	; 0x48
   28ed4:	cmp	r3, r2
   28ed8:	bcc	28f0c <flatcc_builder_create_cached_vtable@@Base+0x308>
   28edc:	ldr	r3, [r8, #68]	; 0x44
   28ee0:	adds	r0, r3, r9
   28ee4:	beq	28f34 <flatcc_builder_create_cached_vtable@@Base+0x330>
   28ee8:	ldr	r3, [r8, #120]	; 0x78
   28eec:	ldr	r1, [sp, #8]
   28ef0:	add	ip, r3, r7
   28ef4:	str	r3, [r6, #8]
   28ef8:	mov	r2, r7
   28efc:	str	ip, [r8, #120]	; 0x78
   28f00:	bl	1454c <memcpy@plt>
   28f04:	ldr	r0, [r5, r4]
   28f08:	b	28d3c <flatcc_builder_create_cached_vtable@@Base+0x138>
   28f0c:	mov	r3, #2
   28f10:	ldr	r0, [r8, #40]	; 0x28
   28f14:	add	r1, r8, #68	; 0x44
   28f18:	str	r3, [sp]
   28f1c:	mov	r3, #0
   28f20:	ldr	sl, [r8, #48]	; 0x30
   28f24:	blx	sl
   28f28:	cmp	r0, #0
   28f2c:	beq	28edc <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   28f30:	bl	1479c <__assert_fail@plt+0x184>
   28f34:	mvn	r0, #0
   28f38:	b	28d3c <flatcc_builder_create_cached_vtable@@Base+0x138>
   28f3c:	ldr	r3, [pc, #12]	; 28f50 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   28f40:	ldr	r2, [pc, #12]	; 28f54 <flatcc_builder_create_cached_vtable@@Base+0x350>
   28f44:	ldr	r1, [pc, #12]	; 28f58 <flatcc_builder_create_cached_vtable@@Base+0x354>
   28f48:	ldr	r0, [pc, #12]	; 28f5c <flatcc_builder_create_cached_vtable@@Base+0x358>
   28f4c:	bl	14618 <__assert_fail@plt>
   28f50:	ldrdeq	r5, [r4], -r4
   28f54:	andeq	r0, r0, r6, asr r1
   28f58:	andeq	r5, r4, r4, asr lr
   28f5c:	strdeq	r6, [r4], -r0

00028f60 <flatcc_builder_create_table@@Base>:
   28f60:	push	{r4, r5, r6, r7, r8, lr}
   28f64:	sub	sp, sp, #88	; 0x58
   28f68:	ldr	r4, [sp, #116]	; 0x74
   28f6c:	ldr	lr, [sp, #120]	; 0x78
   28f70:	cmp	r4, #0
   28f74:	blt	290ac <flatcc_builder_create_table@@Base+0x14c>
   28f78:	mov	r8, r2
   28f7c:	ands	r2, lr, #1
   28f80:	beq	290d8 <flatcc_builder_create_table@@Base+0x178>
   28f84:	mov	r5, r0
   28f88:	ldrh	r0, [r0, #128]	; 0x80
   28f8c:	cmp	r3, #4
   28f90:	movcc	r3, #4
   28f94:	ldr	ip, [r5, #136]	; 0x88
   28f98:	cmp	r0, r3
   28f9c:	mvn	r0, #3
   28fa0:	strhcc	r3, [r5, #128]	; 0x80
   28fa4:	sub	r7, ip, r8
   28fa8:	sub	r3, r3, #1
   28fac:	sub	r0, r0, r8
   28fb0:	and	r7, r7, r3
   28fb4:	add	r0, r0, ip
   28fb8:	sub	lr, lr, #1
   28fbc:	sub	r0, r0, r7
   28fc0:	sub	lr, r0, lr
   28fc4:	cmp	r4, #0
   28fc8:	str	lr, [sp, #12]
   28fcc:	beq	29000 <flatcc_builder_create_table@@Base+0xa0>
   28fd0:	ldr	ip, [sp, #112]	; 0x70
   28fd4:	mvn	r6, #3
   28fd8:	add	r4, ip, r4, lsl #1
   28fdc:	sub	r6, r6, r0
   28fe0:	ldrh	r3, [ip], #2
   28fe4:	sub	lr, r6, r3
   28fe8:	ldr	r0, [r1, r3]
   28fec:	cmp	r4, ip
   28ff0:	add	r0, r0, lr
   28ff4:	str	r0, [r1, r3]
   28ff8:	bne	28fe0 <flatcc_builder_create_table@@Base+0x80>
   28ffc:	ldr	ip, [r5, #136]	; 0x88
   29000:	cmp	r8, #0
   29004:	mov	r3, #4
   29008:	mov	r0, #1
   2900c:	str	r3, [sp, #16]
   29010:	movne	r2, #2
   29014:	str	r3, [sp, #28]
   29018:	addne	r3, r8, r3
   2901c:	str	r0, [sp, #20]
   29020:	add	lr, sp, #12
   29024:	strne	r1, [sp, #32]
   29028:	strne	r8, [sp, #36]	; 0x24
   2902c:	strne	r3, [sp, #16]
   29030:	strne	r2, [sp, #20]
   29034:	movne	r0, #3
   29038:	moveq	r0, #2
   2903c:	cmp	r7, #0
   29040:	str	lr, [sp, #24]
   29044:	beq	29070 <flatcc_builder_create_table@@Base+0x110>
   29048:	add	r2, r2, #1
   2904c:	add	r1, sp, #88	; 0x58
   29050:	add	r1, r1, r2, lsl #3
   29054:	ldr	lr, [pc, #144]	; 290ec <flatcc_builder_create_table@@Base+0x18c>
   29058:	mov	r2, r0
   2905c:	add	r3, r3, r7
   29060:	str	r7, [r1, #-68]	; 0xffffffbc
   29064:	str	r3, [sp, #16]
   29068:	str	r0, [sp, #20]
   2906c:	str	lr, [r1, #-72]	; 0xffffffb8
   29070:	sub	r4, ip, r3
   29074:	cmp	r4, ip
   29078:	bge	290d4 <flatcc_builder_create_table@@Base+0x174>
   2907c:	ldr	r0, [r5, #36]	; 0x24
   29080:	add	r1, sp, #24
   29084:	str	r3, [sp]
   29088:	mov	r3, r4
   2908c:	ldr	r6, [r5, #44]	; 0x2c
   29090:	blx	r6
   29094:	cmp	r0, #0
   29098:	bne	290c0 <flatcc_builder_create_table@@Base+0x160>
   2909c:	mov	r0, r4
   290a0:	str	r4, [r5, #136]	; 0x88
   290a4:	add	sp, sp, #88	; 0x58
   290a8:	pop	{r4, r5, r6, r7, r8, pc}
   290ac:	ldr	r3, [pc, #60]	; 290f0 <flatcc_builder_create_table@@Base+0x190>
   290b0:	ldr	r2, [pc, #60]	; 290f4 <flatcc_builder_create_table@@Base+0x194>
   290b4:	ldr	r1, [pc, #60]	; 290f8 <flatcc_builder_create_table@@Base+0x198>
   290b8:	ldr	r0, [pc, #60]	; 290fc <flatcc_builder_create_table@@Base+0x19c>
   290bc:	bl	14618 <__assert_fail@plt>
   290c0:	ldr	r3, [pc, #56]	; 29100 <flatcc_builder_create_table@@Base+0x1a0>
   290c4:	ldr	r2, [pc, #56]	; 29104 <flatcc_builder_create_table@@Base+0x1a4>
   290c8:	ldr	r1, [pc, #40]	; 290f8 <flatcc_builder_create_table@@Base+0x198>
   290cc:	ldr	r0, [pc, #52]	; 29108 <flatcc_builder_create_table@@Base+0x1a8>
   290d0:	bl	14618 <__assert_fail@plt>
   290d4:	bl	147e8 <__assert_fail@plt+0x1d0>
   290d8:	ldr	r3, [pc, #16]	; 290f0 <flatcc_builder_create_table@@Base+0x190>
   290dc:	ldr	r2, [pc, #40]	; 2910c <flatcc_builder_create_table@@Base+0x1ac>
   290e0:	ldr	r1, [pc, #16]	; 290f8 <flatcc_builder_create_table@@Base+0x198>
   290e4:	ldr	r0, [pc, #36]	; 29110 <flatcc_builder_create_table@@Base+0x1b0>
   290e8:	bl	14618 <__assert_fail@plt>
   290ec:	muleq	r4, ip, r7
   290f0:	andeq	r5, r4, r0, ror #23
   290f4:	ldrdeq	r0, [r0], -r5
   290f8:	andeq	r5, r4, r4, asr lr
   290fc:	andeq	r6, r4, r0, lsl #2
   29100:	andeq	r5, r4, r0, lsr #14
   29104:	andeq	r0, r0, fp, lsl #5
   29108:	andeq	r5, r4, r4, lsl pc
   2910c:	ldrdeq	r0, [r0], -fp
   29110:	andeq	r6, r4, r4, lsl r1

00029114 <flatcc_builder_check_required_field@@Base>:
   29114:	ldr	r3, [r0, #32]
   29118:	ldrh	r3, [r3, #14]
   2911c:	cmp	r3, #3
   29120:	bne	2914c <flatcc_builder_check_required_field@@Base+0x38>
   29124:	ldrh	r3, [r0, #8]
   29128:	cmp	r3, r1
   2912c:	movls	r0, #0
   29130:	bls	29148 <flatcc_builder_check_required_field@@Base+0x34>
   29134:	ldr	r3, [r0, #4]
   29138:	lsl	r1, r1, #1
   2913c:	ldrh	r0, [r3, r1]
   29140:	adds	r0, r0, #0
   29144:	movne	r0, #1
   29148:	bx	lr
   2914c:	push	{r4, lr}
   29150:	ldr	r3, [pc, #12]	; 29164 <flatcc_builder_check_required_field@@Base+0x50>
   29154:	ldr	r2, [pc, #12]	; 29168 <flatcc_builder_check_required_field@@Base+0x54>
   29158:	ldr	r1, [pc, #12]	; 2916c <flatcc_builder_check_required_field@@Base+0x58>
   2915c:	ldr	r0, [pc, #12]	; 29170 <flatcc_builder_check_required_field@@Base+0x5c>
   29160:	bl	14618 <__assert_fail@plt>
   29164:	strdeq	r5, [r4], -ip
   29168:	strdeq	r0, [r0], -r8
   2916c:	andeq	r5, r4, r4, asr lr
   29170:	andeq	r6, r4, r0, lsr #2

00029174 <flatcc_builder_check_union_field@@Base>:
   29174:	ldr	r3, [r0, #32]
   29178:	ldrh	r3, [r3, #14]
   2917c:	cmp	r3, #3
   29180:	bne	291fc <flatcc_builder_check_union_field@@Base+0x88>
   29184:	cmp	r1, #0
   29188:	beq	291d4 <flatcc_builder_check_union_field@@Base+0x60>
   2918c:	ldrh	r3, [r0, #8]
   29190:	cmp	r3, r1
   29194:	bls	291d4 <flatcc_builder_check_union_field@@Base+0x60>
   29198:	sub	r1, r1, #-2147483647	; 0x80000001
   2919c:	ldr	r3, [r0, #4]
   291a0:	lsl	r1, r1, #1
   291a4:	ldrh	r2, [r3, r1]
   291a8:	cmp	r2, #0
   291ac:	beq	291e8 <flatcc_builder_check_union_field@@Base+0x74>
   291b0:	ldr	r0, [r0, #16]
   291b4:	add	r1, r3, r1
   291b8:	ldrb	r2, [r0, r2]
   291bc:	ldrh	r1, [r1, #2]
   291c0:	cmp	r2, #0
   291c4:	bne	291dc <flatcc_builder_check_union_field@@Base+0x68>
   291c8:	clz	r0, r1
   291cc:	lsr	r0, r0, #5
   291d0:	bx	lr
   291d4:	mov	r0, #0
   291d8:	bx	lr
   291dc:	adds	r0, r1, #0
   291e0:	movne	r0, #1
   291e4:	b	291d8 <flatcc_builder_check_union_field@@Base+0x64>
   291e8:	add	r1, r3, r1
   291ec:	ldrh	r1, [r1, #2]
   291f0:	clz	r0, r1
   291f4:	lsr	r0, r0, #5
   291f8:	bx	lr
   291fc:	push	{r4, lr}
   29200:	ldr	r3, [pc, #12]	; 29214 <flatcc_builder_check_union_field@@Base+0xa0>
   29204:	ldr	r2, [pc, #12]	; 29218 <flatcc_builder_check_union_field@@Base+0xa4>
   29208:	ldr	r1, [pc, #12]	; 2921c <flatcc_builder_check_union_field@@Base+0xa8>
   2920c:	ldr	r0, [pc, #12]	; 29220 <flatcc_builder_check_union_field@@Base+0xac>
   29210:	bl	14618 <__assert_fail@plt>
   29214:	andeq	r5, r4, r0, lsr #24
   29218:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2921c:	andeq	r5, r4, r4, asr lr
   29220:	andeq	r6, r4, r0, lsr #2

00029224 <flatcc_builder_check_required@@Base>:
   29224:	ldr	r3, [r0, #32]
   29228:	ldrh	r3, [r3, #14]
   2922c:	cmp	r3, #3
   29230:	bne	29294 <flatcc_builder_check_required@@Base+0x70>
   29234:	ldrh	r3, [r0, #8]
   29238:	cmp	r3, r2
   2923c:	movlt	r0, #0
   29240:	blt	29290 <flatcc_builder_check_required@@Base+0x6c>
   29244:	cmp	r2, #0
   29248:	ble	2928c <flatcc_builder_check_required@@Base+0x68>
   2924c:	ldrh	r3, [r1]
   29250:	ldr	ip, [r0, #4]
   29254:	lsl	r3, r3, #1
   29258:	ldrh	r0, [ip, r3]
   2925c:	cmp	r0, #0
   29260:	beq	29290 <flatcc_builder_check_required@@Base+0x6c>
   29264:	add	r2, r1, r2, lsl #1
   29268:	add	r1, r1, #2
   2926c:	b	29284 <flatcc_builder_check_required@@Base+0x60>
   29270:	ldrh	r3, [r1], #2
   29274:	lsl	r3, r3, #1
   29278:	ldrh	r0, [ip, r3]
   2927c:	cmp	r0, #0
   29280:	beq	29290 <flatcc_builder_check_required@@Base+0x6c>
   29284:	cmp	r1, r2
   29288:	bne	29270 <flatcc_builder_check_required@@Base+0x4c>
   2928c:	mov	r0, #1
   29290:	bx	lr
   29294:	push	{r4, lr}
   29298:	ldr	r3, [pc, #12]	; 292ac <flatcc_builder_check_required@@Base+0x88>
   2929c:	ldr	r2, [pc, #12]	; 292b0 <flatcc_builder_check_required@@Base+0x8c>
   292a0:	ldr	r1, [pc, #12]	; 292b4 <flatcc_builder_check_required@@Base+0x90>
   292a4:	ldr	r0, [pc, #12]	; 292b8 <flatcc_builder_check_required@@Base+0x94>
   292a8:	bl	14618 <__assert_fail@plt>
   292ac:	andeq	r5, r4, r4, asr #24
   292b0:	andeq	r0, r0, r1, lsl r5
   292b4:	andeq	r5, r4, r4, asr lr
   292b8:	andeq	r6, r4, r0, lsr #2

000292bc <flatcc_builder_end_table@@Base>:
   292bc:	ldr	r3, [r0, #32]
   292c0:	push	{r4, r5, r6, r7, lr}
   292c4:	sub	sp, sp, #20
   292c8:	ldrh	r3, [r3, #14]
   292cc:	cmp	r3, #3
   292d0:	bne	29454 <flatcc_builder_end_table@@Base+0x198>
   292d4:	ldrh	r5, [r0, #8]
   292d8:	ldr	r3, [r0, #12]
   292dc:	ldr	r1, [pc, #388]	; 29468 <flatcc_builder_end_table@@Base+0x1ac>
   292e0:	add	r5, r5, #2
   292e4:	ldr	r2, [r0, #20]
   292e8:	lsl	r5, r5, #1
   292ec:	add	r2, r2, #4
   292f0:	uxth	r5, r5
   292f4:	eor	r3, r3, r5
   292f8:	uxth	r2, r2
   292fc:	mul	r3, r1, r3
   29300:	ldr	ip, [r0, #4]
   29304:	eor	r3, r3, r2
   29308:	sub	r6, ip, #4
   2930c:	mul	r1, r1, r3
   29310:	strh	r2, [ip, #-2]
   29314:	strh	r5, [ip, #-4]
   29318:	mov	r3, r1
   2931c:	str	r1, [r0, #12]
   29320:	mov	r2, r5
   29324:	mov	r1, r6
   29328:	mov	r4, r0
   2932c:	bl	28c04 <flatcc_builder_create_cached_vtable@@Base>
   29330:	subs	r7, r0, #0
   29334:	bne	29348 <flatcc_builder_end_table@@Base+0x8c>
   29338:	mov	r5, #0
   2933c:	mov	r0, r5
   29340:	add	sp, sp, #20
   29344:	pop	{r4, r5, r6, r7, pc}
   29348:	mov	r2, r5
   2934c:	mov	r1, #0
   29350:	mov	r0, r6
   29354:	bl	145c4 <memset@plt>
   29358:	ldr	r3, [r4, #32]
   2935c:	ldr	ip, [r4, #76]	; 0x4c
   29360:	ldr	r0, [r4]
   29364:	ldr	r2, [r3, #20]
   29368:	ldr	r1, [r4, #16]
   2936c:	add	ip, ip, r2
   29370:	sub	r0, r0, ip
   29374:	ldrh	r3, [r4, #130]	; 0x82
   29378:	asr	r0, r0, #1
   2937c:	ldr	r2, [r4, #20]
   29380:	str	r0, [sp, #4]
   29384:	str	r7, [sp, #8]
   29388:	str	ip, [sp]
   2938c:	mov	r0, r4
   29390:	bl	28f60 <flatcc_builder_create_table@@Base>
   29394:	subs	r5, r0, #0
   29398:	beq	29338 <flatcc_builder_end_table@@Base+0x7c>
   2939c:	ldr	r3, [r4, #32]
   293a0:	ldr	r0, [r4, #52]	; 0x34
   293a4:	ldr	ip, [r4, #76]	; 0x4c
   293a8:	ldr	r1, [r3, #24]
   293ac:	ldr	r2, [r4, #20]
   293b0:	str	r1, [r4, #12]
   293b4:	ldrh	lr, [r3, #28]
   293b8:	mov	r1, #0
   293bc:	strh	lr, [r4, #8]
   293c0:	ldr	lr, [r3, #16]
   293c4:	add	r0, r0, lr
   293c8:	str	r0, [r4, #4]
   293cc:	ldr	r3, [r3, #20]
   293d0:	ldr	r0, [r4, #16]
   293d4:	add	r3, ip, r3
   293d8:	str	r3, [r4]
   293dc:	bl	145c4 <memset@plt>
   293e0:	ldr	r3, [r4, #32]
   293e4:	ldr	r2, [r4, #64]	; 0x40
   293e8:	ldrh	lr, [r4, #130]	; 0x82
   293ec:	ldr	ip, [r3]
   293f0:	ldr	r1, [r3, #4]
   293f4:	ldrh	r0, [r4, #128]	; 0x80
   293f8:	sub	r2, r2, ip
   293fc:	cmp	r2, r1
   29400:	movcs	r2, r1
   29404:	cmp	r0, lr
   29408:	ldr	r0, [r4, #60]	; 0x3c
   2940c:	ldr	r6, [r3, #8]
   29410:	str	r2, [r4, #24]
   29414:	add	r2, r0, ip
   29418:	str	r2, [r4, #16]
   2941c:	str	r6, [r4, #20]
   29420:	ldr	r2, [r4, #156]	; 0x9c
   29424:	str	ip, [r4, #28]
   29428:	str	r1, [r3, #4]
   2942c:	strhcc	lr, [r4, #128]	; 0x80
   29430:	ldrh	r1, [r3, #12]
   29434:	sub	r2, r2, #1
   29438:	sub	r3, r3, #36	; 0x24
   2943c:	mov	r0, r5
   29440:	str	r2, [r4, #156]	; 0x9c
   29444:	strh	r1, [r4, #130]	; 0x82
   29448:	str	r3, [r4, #32]
   2944c:	add	sp, sp, #20
   29450:	pop	{r4, r5, r6, r7, pc}
   29454:	ldr	r3, [pc, #16]	; 2946c <flatcc_builder_end_table@@Base+0x1b0>
   29458:	ldr	r2, [pc, #16]	; 29470 <flatcc_builder_end_table@@Base+0x1b4>
   2945c:	ldr	r1, [pc, #16]	; 29474 <flatcc_builder_end_table@@Base+0x1b8>
   29460:	ldr	r0, [pc, #16]	; 29478 <flatcc_builder_end_table@@Base+0x1bc>
   29464:	bl	14618 <__assert_fail@plt>
   29468:			; <UNDEFINED> instruction: 0x9e3779b1
   2946c:	andeq	r5, r4, r4, ror #24
   29470:	andeq	r0, r0, r5, lsr #10
   29474:	andeq	r5, r4, r4, asr lr
   29478:	andeq	r6, r4, r0, lsr #2

0002947c <flatcc_builder_create_vector@@Base>:
   2947c:	push	{r4, r5, r6, lr}
   29480:	sub	sp, sp, #88	; 0x58
   29484:	mov	r4, r0
   29488:	ldr	ip, [sp, #108]	; 0x6c
   2948c:	ldrh	r0, [sp, #104]	; 0x68
   29490:	cmp	r2, ip
   29494:	bhi	29570 <flatcc_builder_create_vector@@Base+0xf4>
   29498:	ldrh	ip, [r4, #128]	; 0x80
   2949c:	mul	r3, r3, r2
   294a0:	cmp	r0, #4
   294a4:	movcc	r0, #4
   294a8:	ldr	lr, [r4, #136]	; 0x88
   294ac:	cmp	ip, r0
   294b0:	sub	r6, lr, r3
   294b4:	mov	ip, #4
   294b8:	strhcc	r0, [r4, #128]	; 0x80
   294bc:	str	r2, [sp, #12]
   294c0:	cmp	r3, #0
   294c4:	mov	r2, #1
   294c8:	sub	r0, r0, #1
   294cc:	str	ip, [sp, #16]
   294d0:	str	r2, [sp, #20]
   294d4:	and	r0, r0, r6
   294d8:	movne	r2, #2
   294dc:	str	ip, [sp, #28]
   294e0:	addne	ip, r3, ip
   294e4:	strne	r3, [sp, #36]	; 0x24
   294e8:	add	r5, sp, #12
   294ec:	strne	r1, [sp, #32]
   294f0:	strne	ip, [sp, #16]
   294f4:	strne	r2, [sp, #20]
   294f8:	movne	r3, #3
   294fc:	moveq	r3, #2
   29500:	cmp	r0, #0
   29504:	str	r5, [sp, #24]
   29508:	beq	29534 <flatcc_builder_create_vector@@Base+0xb8>
   2950c:	add	r2, r2, #1
   29510:	add	r1, sp, #88	; 0x58
   29514:	add	r1, r1, r2, lsl #3
   29518:	ldr	r5, [pc, #124]	; 2959c <flatcc_builder_create_vector@@Base+0x120>
   2951c:	mov	r2, r3
   29520:	add	ip, ip, r0
   29524:	str	r0, [r1, #-68]	; 0xffffffbc
   29528:	str	ip, [sp, #16]
   2952c:	str	r3, [sp, #20]
   29530:	str	r5, [r1, #-72]	; 0xffffffb8
   29534:	sub	r5, lr, ip
   29538:	cmp	lr, r5
   2953c:	ble	29598 <flatcc_builder_create_vector@@Base+0x11c>
   29540:	ldr	r0, [r4, #36]	; 0x24
   29544:	mov	r3, r5
   29548:	str	ip, [sp]
   2954c:	add	r1, sp, #24
   29550:	ldr	r6, [r4, #44]	; 0x2c
   29554:	blx	r6
   29558:	cmp	r0, #0
   2955c:	bne	29584 <flatcc_builder_create_vector@@Base+0x108>
   29560:	mov	r0, r5
   29564:	str	r5, [r4, #136]	; 0x88
   29568:	add	sp, sp, #88	; 0x58
   2956c:	pop	{r4, r5, r6, pc}
   29570:	ldr	r3, [pc, #40]	; 295a0 <flatcc_builder_create_vector@@Base+0x124>
   29574:	ldr	r2, [pc, #40]	; 295a4 <flatcc_builder_create_vector@@Base+0x128>
   29578:	ldr	r1, [pc, #40]	; 295a8 <flatcc_builder_create_vector@@Base+0x12c>
   2957c:	ldr	r0, [pc, #40]	; 295ac <flatcc_builder_create_vector@@Base+0x130>
   29580:	bl	14618 <__assert_fail@plt>
   29584:	ldr	r3, [pc, #36]	; 295b0 <flatcc_builder_create_vector@@Base+0x134>
   29588:	ldr	r2, [pc, #36]	; 295b4 <flatcc_builder_create_vector@@Base+0x138>
   2958c:	ldr	r1, [pc, #20]	; 295a8 <flatcc_builder_create_vector@@Base+0x12c>
   29590:	ldr	r0, [pc, #32]	; 295b8 <flatcc_builder_create_vector@@Base+0x13c>
   29594:	bl	14618 <__assert_fail@plt>
   29598:	bl	147e8 <__assert_fail@plt+0x1d0>
   2959c:	muleq	r4, ip, r7
   295a0:	andeq	r5, r4, r0, lsl #25
   295a4:	andeq	r0, r0, r5, asr r5
   295a8:	andeq	r5, r4, r4, asr lr
   295ac:	andeq	r6, r4, ip, asr #2
   295b0:	andeq	r5, r4, r0, lsr #14
   295b4:	andeq	r0, r0, fp, lsl #5
   295b8:	andeq	r5, r4, r4, lsl pc

000295bc <flatcc_builder_end_vector@@Base>:
   295bc:	ldr	r3, [r0, #32]
   295c0:	push	{r4, r5, r6, lr}
   295c4:	sub	sp, sp, #88	; 0x58
   295c8:	ldrh	r2, [r3, #14]
   295cc:	cmp	r2, #4
   295d0:	bne	29774 <flatcc_builder_end_vector@@Base+0x1b8>
   295d4:	ldr	lr, [r3, #20]
   295d8:	ldr	r2, [r3, #24]
   295dc:	ldr	r1, [r3, #16]
   295e0:	cmp	lr, r2
   295e4:	mov	r4, r0
   295e8:	ldr	r5, [r0, #16]
   295ec:	ldrh	r3, [r0, #130]	; 0x82
   295f0:	bhi	29760 <flatcc_builder_end_vector@@Base+0x1a4>
   295f4:	ldrh	r2, [r0, #128]	; 0x80
   295f8:	mul	r1, r1, lr
   295fc:	cmp	r3, #4
   29600:	movcc	r3, #4
   29604:	ldr	ip, [r0, #136]	; 0x88
   29608:	cmp	r2, r3
   2960c:	strhcc	r3, [r0, #128]	; 0x80
   29610:	sub	r2, r3, #1
   29614:	sub	r0, ip, r1
   29618:	cmp	r1, #0
   2961c:	mov	r3, #4
   29620:	and	r0, r0, r2
   29624:	mov	r2, #1
   29628:	str	r3, [sp, #16]
   2962c:	str	r2, [sp, #20]
   29630:	str	r3, [sp, #28]
   29634:	movne	r2, #2
   29638:	addne	r3, r1, r3
   2963c:	strne	r1, [sp, #36]	; 0x24
   29640:	str	lr, [sp, #12]
   29644:	strne	r5, [sp, #32]
   29648:	add	lr, sp, #12
   2964c:	strne	r3, [sp, #16]
   29650:	strne	r2, [sp, #20]
   29654:	movne	r1, #3
   29658:	moveq	r1, #2
   2965c:	cmp	r0, #0
   29660:	str	lr, [sp, #24]
   29664:	beq	29690 <flatcc_builder_end_vector@@Base+0xd4>
   29668:	add	r2, r2, #1
   2966c:	add	lr, sp, #88	; 0x58
   29670:	add	lr, lr, r2, lsl #3
   29674:	ldr	r5, [pc, #268]	; 29788 <flatcc_builder_end_vector@@Base+0x1cc>
   29678:	mov	r2, r1
   2967c:	add	r3, r3, r0
   29680:	str	r0, [lr, #-68]	; 0xffffffbc
   29684:	str	r3, [sp, #16]
   29688:	str	r1, [sp, #20]
   2968c:	str	r5, [lr, #-72]	; 0xffffffb8
   29690:	sub	r5, ip, r3
   29694:	cmp	ip, r5
   29698:	ble	2975c <flatcc_builder_end_vector@@Base+0x1a0>
   2969c:	ldr	r0, [r4, #36]	; 0x24
   296a0:	add	r1, sp, #24
   296a4:	str	r3, [sp]
   296a8:	mov	r3, r5
   296ac:	ldr	r6, [r4, #44]	; 0x2c
   296b0:	blx	r6
   296b4:	subs	r1, r0, #0
   296b8:	bne	29748 <flatcc_builder_end_vector@@Base+0x18c>
   296bc:	cmp	r5, #0
   296c0:	str	r5, [r4, #136]	; 0x88
   296c4:	beq	2973c <flatcc_builder_end_vector@@Base+0x180>
   296c8:	ldr	r2, [r4, #20]
   296cc:	ldr	r0, [r4, #16]
   296d0:	bl	145c4 <memset@plt>
   296d4:	ldr	r3, [r4, #32]
   296d8:	ldr	r2, [r4, #64]	; 0x40
   296dc:	ldrh	lr, [r4, #130]	; 0x82
   296e0:	ldr	ip, [r3]
   296e4:	ldr	r1, [r3, #4]
   296e8:	ldrh	r0, [r4, #128]	; 0x80
   296ec:	sub	r2, r2, ip
   296f0:	cmp	r2, r1
   296f4:	movcs	r2, r1
   296f8:	cmp	r0, lr
   296fc:	ldr	r0, [r4, #60]	; 0x3c
   29700:	ldr	r6, [r3, #8]
   29704:	str	r2, [r4, #24]
   29708:	add	r2, r0, ip
   2970c:	str	r2, [r4, #16]
   29710:	str	r6, [r4, #20]
   29714:	ldr	r2, [r4, #156]	; 0x9c
   29718:	str	ip, [r4, #28]
   2971c:	str	r1, [r3, #4]
   29720:	strhcc	lr, [r4, #128]	; 0x80
   29724:	ldrh	r1, [r3, #12]
   29728:	sub	r2, r2, #1
   2972c:	sub	r3, r3, #36	; 0x24
   29730:	str	r2, [r4, #156]	; 0x9c
   29734:	strh	r1, [r4, #130]	; 0x82
   29738:	str	r3, [r4, #32]
   2973c:	mov	r0, r5
   29740:	add	sp, sp, #88	; 0x58
   29744:	pop	{r4, r5, r6, pc}
   29748:	ldr	r3, [pc, #60]	; 2978c <flatcc_builder_end_vector@@Base+0x1d0>
   2974c:	ldr	r2, [pc, #60]	; 29790 <flatcc_builder_end_vector@@Base+0x1d4>
   29750:	ldr	r1, [pc, #60]	; 29794 <flatcc_builder_end_vector@@Base+0x1d8>
   29754:	ldr	r0, [pc, #60]	; 29798 <flatcc_builder_end_vector@@Base+0x1dc>
   29758:	bl	14618 <__assert_fail@plt>
   2975c:	bl	147e8 <__assert_fail@plt+0x1d0>
   29760:	ldr	r3, [pc, #52]	; 2979c <flatcc_builder_end_vector@@Base+0x1e0>
   29764:	ldr	r2, [pc, #52]	; 297a0 <flatcc_builder_end_vector@@Base+0x1e4>
   29768:	ldr	r1, [pc, #36]	; 29794 <flatcc_builder_end_vector@@Base+0x1d8>
   2976c:	ldr	r0, [pc, #48]	; 297a4 <flatcc_builder_end_vector@@Base+0x1e8>
   29770:	bl	14618 <__assert_fail@plt>
   29774:	ldr	r3, [pc, #44]	; 297a8 <flatcc_builder_end_vector@@Base+0x1ec>
   29778:	ldr	r2, [pc, #44]	; 297ac <flatcc_builder_end_vector@@Base+0x1f0>
   2977c:	ldr	r1, [pc, #16]	; 29794 <flatcc_builder_end_vector@@Base+0x1d8>
   29780:	ldr	r0, [pc, #40]	; 297b0 <flatcc_builder_end_vector@@Base+0x1f4>
   29784:	bl	14618 <__assert_fail@plt>
   29788:	muleq	r4, ip, r7
   2978c:	andeq	r5, r4, r0, lsr #14
   29790:	andeq	r0, r0, fp, lsl #5
   29794:	andeq	r5, r4, r4, asr lr
   29798:	andeq	r5, r4, r4, lsl pc
   2979c:	andeq	r5, r4, r0, lsl #25
   297a0:	andeq	r0, r0, r5, asr r5
   297a4:	andeq	r6, r4, ip, asr #2
   297a8:	andeq	r5, r4, r0, lsr #25
   297ac:	andeq	r0, r0, r8, ror r5
   297b0:	andeq	r5, r4, r0, asr #31

000297b4 <flatcc_builder_vector_count@@Base>:
   297b4:	ldr	r3, [r0, #32]
   297b8:	ldr	r0, [r3, #20]
   297bc:	bx	lr

000297c0 <flatcc_builder_vector_edit@@Base>:
   297c0:	ldr	r0, [r0, #16]
   297c4:	bx	lr

000297c8 <flatcc_builder_create_offset_vector_direct@@Base>:
   297c8:	cmn	r2, #-1073741823	; 0xc0000001
   297cc:	bls	297d8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   297d0:	mov	r0, #0
   297d4:	bx	lr
   297d8:	b	25f9c <flatcc_builder_default_alloc@@Base+0x2fc>

000297dc <flatcc_builder_end_offset_vector@@Base>:
   297dc:	ldr	r3, [r0, #32]
   297e0:	push	{r4, r5, r6, lr}
   297e4:	ldrh	r2, [r3, #14]
   297e8:	cmp	r2, #5
   297ec:	bne	2989c <flatcc_builder_end_offset_vector@@Base+0xc0>
   297f0:	ldr	r2, [r3, #20]
   297f4:	cmn	r2, #-1073741823	; 0xc0000001
   297f8:	bls	29808 <flatcc_builder_end_offset_vector@@Base+0x2c>
   297fc:	mov	r5, #0
   29800:	mov	r0, r5
   29804:	pop	{r4, r5, r6, pc}
   29808:	ldr	r1, [r0, #16]
   2980c:	mov	r4, r0
   29810:	bl	25f9c <flatcc_builder_default_alloc@@Base+0x2fc>
   29814:	subs	r5, r0, #0
   29818:	beq	297fc <flatcc_builder_end_offset_vector@@Base+0x20>
   2981c:	ldr	r2, [r4, #20]
   29820:	mov	r1, #0
   29824:	ldr	r0, [r4, #16]
   29828:	bl	145c4 <memset@plt>
   2982c:	ldr	r3, [r4, #32]
   29830:	ldr	r2, [r4, #64]	; 0x40
   29834:	ldrh	lr, [r4, #130]	; 0x82
   29838:	ldr	ip, [r3]
   2983c:	ldr	r1, [r3, #4]
   29840:	ldrh	r0, [r4, #128]	; 0x80
   29844:	sub	r2, r2, ip
   29848:	cmp	r2, r1
   2984c:	movcs	r2, r1
   29850:	cmp	r0, lr
   29854:	ldr	r0, [r4, #60]	; 0x3c
   29858:	ldr	r6, [r3, #8]
   2985c:	str	r2, [r4, #24]
   29860:	add	r2, r0, ip
   29864:	str	r2, [r4, #16]
   29868:	str	r6, [r4, #20]
   2986c:	ldr	r2, [r4, #156]	; 0x9c
   29870:	str	ip, [r4, #28]
   29874:	str	r1, [r3, #4]
   29878:	strhcc	lr, [r4, #128]	; 0x80
   2987c:	ldrh	r1, [r3, #12]
   29880:	sub	r2, r2, #1
   29884:	sub	r3, r3, #36	; 0x24
   29888:	str	r2, [r4, #156]	; 0x9c
   2988c:	strh	r1, [r4, #130]	; 0x82
   29890:	str	r3, [r4, #32]
   29894:	mov	r0, r5
   29898:	pop	{r4, r5, r6, pc}
   2989c:	ldr	r3, [pc, #12]	; 298b0 <flatcc_builder_end_offset_vector@@Base+0xd4>
   298a0:	ldr	r2, [pc, #12]	; 298b4 <flatcc_builder_end_offset_vector@@Base+0xd8>
   298a4:	ldr	r1, [pc, #12]	; 298b8 <flatcc_builder_end_offset_vector@@Base+0xdc>
   298a8:	ldr	r0, [pc, #12]	; 298bc <flatcc_builder_end_offset_vector@@Base+0xe0>
   298ac:	bl	14618 <__assert_fail@plt>
   298b0:	muleq	r4, r0, fp
   298b4:	andeq	r0, r0, r8, asr #11
   298b8:	andeq	r5, r4, r4, asr lr
   298bc:	andeq	r6, r4, ip, lsr #32

000298c0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   298c0:	ldr	r2, [r0, #32]
   298c4:	push	{r4, r5, r6, lr}
   298c8:	ldrh	ip, [r2, #14]
   298cc:	cmp	ip, #5
   298d0:	bne	29984 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   298d4:	ldr	r2, [r2, #20]
   298d8:	cmn	r2, #-1073741823	; 0xc0000001
   298dc:	bls	298ec <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   298e0:	mov	r5, #0
   298e4:	mov	r0, r5
   298e8:	pop	{r4, r5, r6, pc}
   298ec:	mov	r3, r1
   298f0:	ldr	r1, [r0, #16]
   298f4:	mov	r4, r0
   298f8:	bl	25dac <flatcc_builder_default_alloc@@Base+0x10c>
   298fc:	subs	r5, r0, #0
   29900:	beq	298e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   29904:	ldr	r2, [r4, #20]
   29908:	mov	r1, #0
   2990c:	ldr	r0, [r4, #16]
   29910:	bl	145c4 <memset@plt>
   29914:	ldr	r3, [r4, #32]
   29918:	ldr	r2, [r4, #64]	; 0x40
   2991c:	ldrh	lr, [r4, #130]	; 0x82
   29920:	ldr	ip, [r3]
   29924:	ldr	r1, [r3, #4]
   29928:	ldrh	r0, [r4, #128]	; 0x80
   2992c:	sub	r2, r2, ip
   29930:	cmp	r2, r1
   29934:	movcs	r2, r1
   29938:	cmp	r0, lr
   2993c:	ldr	r0, [r4, #60]	; 0x3c
   29940:	ldr	r6, [r3, #8]
   29944:	str	r2, [r4, #24]
   29948:	add	r2, r0, ip
   2994c:	str	r2, [r4, #16]
   29950:	str	r6, [r4, #20]
   29954:	ldr	r2, [r4, #156]	; 0x9c
   29958:	str	ip, [r4, #28]
   2995c:	str	r1, [r3, #4]
   29960:	strhcc	lr, [r4, #128]	; 0x80
   29964:	ldrh	r1, [r3, #12]
   29968:	sub	r2, r2, #1
   2996c:	sub	r3, r3, #36	; 0x24
   29970:	str	r2, [r4, #156]	; 0x9c
   29974:	strh	r1, [r4, #130]	; 0x82
   29978:	str	r3, [r4, #32]
   2997c:	mov	r0, r5
   29980:	pop	{r4, r5, r6, pc}
   29984:	ldr	r3, [pc, #12]	; 29998 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   29988:	ldr	r2, [pc, #12]	; 2999c <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   2998c:	ldr	r1, [pc, #12]	; 299a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   29990:	ldr	r0, [pc, #12]	; 299a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   29994:	bl	14618 <__assert_fail@plt>
   29998:			; <UNDEFINED> instruction: 0x00045cbc
   2999c:	ldrdeq	r0, [r0], -r5
   299a0:	andeq	r5, r4, r4, asr lr
   299a4:	andeq	r6, r4, ip, lsr #32

000299a8 <flatcc_builder_offset_vector_edit@@Base>:
   299a8:	ldr	r0, [r0, #16]
   299ac:	bx	lr

000299b0 <flatcc_builder_offset_vector_count@@Base>:
   299b0:	ldr	r3, [r0, #32]
   299b4:	ldr	r0, [r3, #20]
   299b8:	bx	lr

000299bc <flatcc_builder_create_union_vector@@Base>:
   299bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   299c0:	mov	r6, r0
   299c4:	ldr	r0, [r1, #156]	; 0x9c
   299c8:	ldr	ip, [r1, #160]	; 0xa0
   299cc:	mov	r4, r1
   299d0:	add	r1, r0, #1
   299d4:	cmp	r1, ip
   299d8:	sub	sp, sp, #12
   299dc:	mov	r5, r2
   299e0:	mov	r7, r3
   299e4:	str	r1, [r4, #156]	; 0x9c
   299e8:	ble	29a70 <flatcc_builder_create_union_vector@@Base+0xb4>
   299ec:	ldr	r3, [r4, #176]	; 0xb0
   299f0:	cmp	r1, r3
   299f4:	cmpgt	r3, #0
   299f8:	movgt	r3, #1
   299fc:	movle	r3, #0
   29a00:	bgt	29a58 <flatcc_builder_create_union_vector@@Base+0x9c>
   29a04:	add	r0, r0, r0, lsl #3
   29a08:	ldr	r1, [r4, #88]	; 0x58
   29a0c:	lsl	r8, r0, #2
   29a10:	add	r2, r8, #36	; 0x24
   29a14:	cmp	r2, r1
   29a18:	bhi	29c8c <flatcc_builder_create_union_vector@@Base+0x2d0>
   29a1c:	ldr	r3, [r4, #84]	; 0x54
   29a20:	add	r3, r3, r8
   29a24:	cmp	r3, #0
   29a28:	str	r3, [r4, #32]
   29a2c:	beq	29a58 <flatcc_builder_create_union_vector@@Base+0x9c>
   29a30:	ldr	r2, [r4, #88]	; 0x58
   29a34:	ldr	r0, [pc, #732]	; 29d18 <flatcc_builder_create_union_vector@@Base+0x35c>
   29a38:	ldr	r1, [r4, #176]	; 0xb0
   29a3c:	umull	r0, r2, r0, r2
   29a40:	lsr	r2, r2, #3
   29a44:	cmp	r1, #0
   29a48:	cmpgt	r2, r1
   29a4c:	str	r2, [r4, #160]	; 0xa0
   29a50:	strgt	r1, [r4, #160]	; 0xa0
   29a54:	b	29a7c <flatcc_builder_create_union_vector@@Base+0xc0>
   29a58:	mov	r3, #0
   29a5c:	mov	r0, r6
   29a60:	str	r3, [r6]
   29a64:	str	r3, [r6, #4]
   29a68:	add	sp, sp, #12
   29a6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29a70:	ldr	r3, [r4, #32]
   29a74:	add	r3, r3, #36	; 0x24
   29a78:	str	r3, [r4, #32]
   29a7c:	ldr	r1, [r4, #20]
   29a80:	ldr	ip, [r4, #28]
   29a84:	ldrh	r8, [r4, #130]	; 0x82
   29a88:	add	r2, r1, ip
   29a8c:	mvn	lr, #3
   29a90:	add	r2, r2, #7
   29a94:	str	r1, [r3, #8]
   29a98:	bic	r2, r2, #7
   29a9c:	mov	r0, #4
   29aa0:	mov	r1, #0
   29aa4:	strh	r8, [r3, #12]
   29aa8:	strh	r0, [r4, #130]	; 0x82
   29aac:	stm	r3, {ip, lr}
   29ab0:	str	r1, [r4, #20]
   29ab4:	str	r2, [r4, #28]
   29ab8:	str	r0, [r3, #16]
   29abc:	str	r1, [r3, #20]
   29ac0:	ldr	r0, [r4, #64]	; 0x40
   29ac4:	ldr	r1, [r4, #60]	; 0x3c
   29ac8:	sub	r0, r0, r2
   29acc:	cmp	r0, lr
   29ad0:	mov	ip, #5
   29ad4:	strh	ip, [r3, #14]
   29ad8:	add	r1, r1, r2
   29adc:	strls	r0, [r4, #24]
   29ae0:	strhi	lr, [r4, #24]
   29ae4:	movhi	r0, lr
   29ae8:	mvn	r8, #3
   29aec:	cmn	r7, #-1073741823	; 0xc0000001
   29af0:	str	r1, [r4, #16]
   29af4:	str	r8, [r3, #4]
   29af8:	bhi	29d0c <flatcc_builder_create_union_vector@@Base+0x350>
   29afc:	lsl	ip, r7, #2
   29b00:	cmp	ip, r0
   29b04:	str	r7, [r3, #20]
   29b08:	str	ip, [r4, #20]
   29b0c:	bcs	29c34 <flatcc_builder_create_union_vector@@Base+0x278>
   29b10:	cmp	r1, #0
   29b14:	beq	29a58 <flatcc_builder_create_union_vector@@Base+0x9c>
   29b18:	ldr	r8, [r4, #20]
   29b1c:	ldr	r0, [r4, #24]
   29b20:	add	r3, r7, r8
   29b24:	cmp	r3, r0
   29b28:	str	r3, [r4, #20]
   29b2c:	bcs	29cb0 <flatcc_builder_create_union_vector@@Base+0x2f4>
   29b30:	adds	r8, r1, r8
   29b34:	beq	29a58 <flatcc_builder_create_union_vector@@Base+0x9c>
   29b38:	cmp	r7, #0
   29b3c:	movne	r2, r5
   29b40:	addne	lr, r2, r7, lsl #3
   29b44:	subne	r0, r8, #1
   29b48:	subne	r3, r1, #4
   29b4c:	beq	29b6c <flatcc_builder_create_union_vector@@Base+0x1b0>
   29b50:	ldrb	ip, [r2]
   29b54:	add	r2, r2, #8
   29b58:	strb	ip, [r0, #1]!
   29b5c:	ldr	ip, [r2, #-4]
   29b60:	cmp	lr, r2
   29b64:	str	ip, [r3, #4]!
   29b68:	bne	29b50 <flatcc_builder_create_union_vector@@Base+0x194>
   29b6c:	mov	r3, r8
   29b70:	mov	r2, r7
   29b74:	mov	r0, r4
   29b78:	bl	25dac <flatcc_builder_default_alloc@@Base+0x10c>
   29b7c:	subs	r5, r0, #0
   29b80:	beq	29d10 <flatcc_builder_create_union_vector@@Base+0x354>
   29b84:	mvn	r0, #0
   29b88:	mov	r3, #1
   29b8c:	mov	r2, r7
   29b90:	str	r0, [sp, #4]
   29b94:	mov	r1, r8
   29b98:	str	r3, [sp]
   29b9c:	mov	r0, r4
   29ba0:	bl	2947c <flatcc_builder_create_vector@@Base>
   29ba4:	mov	r7, r0
   29ba8:	ldr	r2, [r4, #20]
   29bac:	mov	r1, #0
   29bb0:	ldr	r0, [r4, #16]
   29bb4:	bl	145c4 <memset@plt>
   29bb8:	ldr	r3, [r4, #32]
   29bbc:	ldr	r2, [r4, #64]	; 0x40
   29bc0:	ldrh	lr, [r4, #130]	; 0x82
   29bc4:	ldr	ip, [r3]
   29bc8:	ldr	r1, [r3, #4]
   29bcc:	ldrh	r0, [r4, #128]	; 0x80
   29bd0:	sub	r2, r2, ip
   29bd4:	cmp	r2, r1
   29bd8:	movcs	r2, r1
   29bdc:	cmp	r0, lr
   29be0:	ldr	r0, [r4, #60]	; 0x3c
   29be4:	ldr	r8, [r3, #8]
   29be8:	str	r2, [r4, #24]
   29bec:	add	r2, r0, ip
   29bf0:	str	r2, [r4, #16]
   29bf4:	str	r8, [r4, #20]
   29bf8:	ldr	r2, [r4, #156]	; 0x9c
   29bfc:	str	ip, [r4, #28]
   29c00:	str	r1, [r3, #4]
   29c04:	strhcc	lr, [r4, #128]	; 0x80
   29c08:	ldrh	r1, [r3, #12]
   29c0c:	sub	r2, r2, #1
   29c10:	sub	r3, r3, #36	; 0x24
   29c14:	mov	r0, r6
   29c18:	str	r7, [r6]
   29c1c:	str	r5, [r6, #4]
   29c20:	str	r2, [r4, #156]	; 0x9c
   29c24:	strh	r1, [r4, #130]	; 0x82
   29c28:	str	r3, [r4, #32]
   29c2c:	add	sp, sp, #12
   29c30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29c34:	add	ip, ip, #1
   29c38:	mov	r3, #1
   29c3c:	ldr	r0, [r4, #40]	; 0x28
   29c40:	add	r2, ip, r2
   29c44:	str	r3, [sp]
   29c48:	add	r1, r4, #60	; 0x3c
   29c4c:	ldr	r9, [r4, #48]	; 0x30
   29c50:	blx	r9
   29c54:	cmp	r0, #0
   29c58:	bne	29a58 <flatcc_builder_create_union_vector@@Base+0x9c>
   29c5c:	ldr	r2, [r4, #28]
   29c60:	ldr	r3, [r4, #64]	; 0x40
   29c64:	ldr	r1, [r4, #60]	; 0x3c
   29c68:	sub	r3, r3, r2
   29c6c:	ldr	r0, [r4, #32]
   29c70:	cmn	r3, #4
   29c74:	movhi	r3, r8
   29c78:	add	r1, r1, r2
   29c7c:	str	r3, [r4, #24]
   29c80:	str	r1, [r4, #16]
   29c84:	str	r8, [r0, #4]
   29c88:	b	29b10 <flatcc_builder_create_union_vector@@Base+0x154>
   29c8c:	mov	r1, #4
   29c90:	ldr	r0, [r4, #40]	; 0x28
   29c94:	str	r1, [sp]
   29c98:	add	r1, r4, #84	; 0x54
   29c9c:	ldr	r9, [r4, #48]	; 0x30
   29ca0:	blx	r9
   29ca4:	cmp	r0, #0
   29ca8:	beq	29a1c <flatcc_builder_create_union_vector@@Base+0x60>
   29cac:	bl	1479c <__assert_fail@plt+0x184>
   29cb0:	add	r1, r3, #1
   29cb4:	mov	r3, #1
   29cb8:	ldr	r0, [r4, #40]	; 0x28
   29cbc:	add	r2, r1, r2
   29cc0:	str	r3, [sp]
   29cc4:	add	r1, r4, #60	; 0x3c
   29cc8:	ldr	r9, [r4, #48]	; 0x30
   29ccc:	blx	r9
   29cd0:	cmp	r0, #0
   29cd4:	bne	29a58 <flatcc_builder_create_union_vector@@Base+0x9c>
   29cd8:	ldr	r2, [r4, #28]
   29cdc:	ldr	r3, [r4, #64]	; 0x40
   29ce0:	ldr	r1, [r4, #60]	; 0x3c
   29ce4:	sub	r3, r3, r2
   29ce8:	cmn	r3, #4
   29cec:	mvnhi	r3, #3
   29cf0:	str	r3, [r4, #24]
   29cf4:	ldr	r3, [r4, #32]
   29cf8:	add	r1, r1, r2
   29cfc:	mvn	r2, #3
   29d00:	str	r1, [r4, #16]
   29d04:	str	r2, [r3, #4]
   29d08:	b	29b30 <flatcc_builder_create_union_vector@@Base+0x174>
   29d0c:	bl	14810 <__assert_fail@plt+0x1f8>
   29d10:	mov	r7, r5
   29d14:	b	29ba8 <flatcc_builder_create_union_vector@@Base+0x1ec>
   29d18:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00029d1c <flatcc_builder_create_union_vector_direct@@Base>:
   29d1c:	push	{r4, r5, r6, r7, r8, lr}
   29d20:	sub	sp, sp, #88	; 0x58
   29d24:	mov	r4, r0
   29d28:	ldr	r5, [sp, #112]	; 0x70
   29d2c:	cmn	r5, #-1073741823	; 0xc0000001
   29d30:	bls	29d4c <flatcc_builder_create_union_vector_direct@@Base+0x30>
   29d34:	mov	r3, #0
   29d38:	mov	r0, r4
   29d3c:	str	r3, [r4]
   29d40:	str	r3, [r4, #4]
   29d44:	add	sp, sp, #88	; 0x58
   29d48:	pop	{r4, r5, r6, r7, r8, pc}
   29d4c:	mov	r6, r1
   29d50:	mov	r8, r2
   29d54:	mov	r1, r3
   29d58:	mov	r0, r6
   29d5c:	mov	r3, r2
   29d60:	mov	r2, r5
   29d64:	bl	25dac <flatcc_builder_default_alloc@@Base+0x10c>
   29d68:	subs	r7, r0, #0
   29d6c:	beq	29d34 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   29d70:	ldrh	r3, [r6, #128]	; 0x80
   29d74:	ldr	r0, [r6, #136]	; 0x88
   29d78:	mov	r2, #1
   29d7c:	cmp	r3, #3
   29d80:	movls	r3, #4
   29d84:	strhls	r3, [r6, #128]	; 0x80
   29d88:	sub	r1, r0, r5
   29d8c:	cmp	r5, #0
   29d90:	mov	r3, #4
   29d94:	add	ip, sp, #12
   29d98:	str	r3, [sp, #16]
   29d9c:	str	r2, [sp, #20]
   29da0:	and	r1, r1, #3
   29da4:	movne	r2, #2
   29da8:	str	r3, [sp, #28]
   29dac:	addne	r3, r5, r3
   29db0:	str	ip, [sp, #24]
   29db4:	strne	r8, [sp, #32]
   29db8:	strne	r5, [sp, #36]	; 0x24
   29dbc:	strne	r3, [sp, #16]
   29dc0:	strne	r2, [sp, #20]
   29dc4:	movne	ip, #3
   29dc8:	moveq	ip, #2
   29dcc:	cmp	r1, #0
   29dd0:	str	r5, [sp, #12]
   29dd4:	beq	29e00 <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   29dd8:	add	r2, r2, #1
   29ddc:	add	lr, sp, #88	; 0x58
   29de0:	add	lr, lr, r2, lsl #3
   29de4:	ldr	r5, [pc, #108]	; 29e58 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   29de8:	mov	r2, ip
   29dec:	add	r3, r3, r1
   29df0:	str	r1, [lr, #-68]	; 0xffffffbc
   29df4:	str	r3, [sp, #16]
   29df8:	str	ip, [sp, #20]
   29dfc:	str	r5, [lr, #-72]	; 0xffffffb8
   29e00:	sub	r5, r0, r3
   29e04:	cmp	r0, r5
   29e08:	ble	29e40 <flatcc_builder_create_union_vector_direct@@Base+0x124>
   29e0c:	ldr	r0, [r6, #36]	; 0x24
   29e10:	add	r1, sp, #24
   29e14:	str	r3, [sp]
   29e18:	mov	r3, r5
   29e1c:	ldr	r8, [r6, #44]	; 0x2c
   29e20:	blx	r8
   29e24:	cmp	r0, #0
   29e28:	bne	29e44 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   29e2c:	mov	r0, r4
   29e30:	str	r5, [r6, #136]	; 0x88
   29e34:	stm	r4, {r5, r7}
   29e38:	add	sp, sp, #88	; 0x58
   29e3c:	pop	{r4, r5, r6, r7, r8, pc}
   29e40:	bl	147e8 <__assert_fail@plt+0x1d0>
   29e44:	ldr	r3, [pc, #16]	; 29e5c <flatcc_builder_create_union_vector_direct@@Base+0x140>
   29e48:	ldr	r2, [pc, #16]	; 29e60 <flatcc_builder_create_union_vector_direct@@Base+0x144>
   29e4c:	ldr	r1, [pc, #16]	; 29e64 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   29e50:	ldr	r0, [pc, #16]	; 29e68 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   29e54:	bl	14618 <__assert_fail@plt>
   29e58:	muleq	r4, ip, r7
   29e5c:	andeq	r5, r4, r0, lsr #14
   29e60:	andeq	r0, r0, fp, lsl #5
   29e64:	andeq	r5, r4, r4, asr lr
   29e68:	andeq	r5, r4, r4, lsl pc

00029e6c <flatcc_builder_start_union_vector@@Base>:
   29e6c:	ldr	r1, [r0, #156]	; 0x9c
   29e70:	ldr	r3, [r0, #160]	; 0xa0
   29e74:	add	r2, r1, #1
   29e78:	cmp	r2, r3
   29e7c:	push	{r4, r5, r6, lr}
   29e80:	mov	r4, r0
   29e84:	sub	sp, sp, #8
   29e88:	str	r2, [r0, #156]	; 0x9c
   29e8c:	ble	29efc <flatcc_builder_start_union_vector@@Base+0x90>
   29e90:	ldr	r3, [r0, #176]	; 0xb0
   29e94:	cmp	r3, #0
   29e98:	cmpgt	r2, r3
   29e9c:	movgt	r3, #1
   29ea0:	movle	r3, #0
   29ea4:	bgt	29fa8 <flatcc_builder_start_union_vector@@Base+0x13c>
   29ea8:	add	r1, r1, r1, lsl #3
   29eac:	ldr	r0, [r0, #88]	; 0x58
   29eb0:	lsl	r5, r1, #2
   29eb4:	add	r2, r5, #36	; 0x24
   29eb8:	cmp	r2, r0
   29ebc:	bhi	29f84 <flatcc_builder_start_union_vector@@Base+0x118>
   29ec0:	ldr	r3, [r4, #84]	; 0x54
   29ec4:	add	r3, r3, r5
   29ec8:	cmp	r3, #0
   29ecc:	str	r3, [r4, #32]
   29ed0:	beq	29fa8 <flatcc_builder_start_union_vector@@Base+0x13c>
   29ed4:	ldr	r2, [r4, #88]	; 0x58
   29ed8:	ldr	r0, [pc, #208]	; 29fb0 <flatcc_builder_start_union_vector@@Base+0x144>
   29edc:	ldr	r1, [r4, #176]	; 0xb0
   29ee0:	umull	r0, r2, r0, r2
   29ee4:	lsr	r2, r2, #3
   29ee8:	cmp	r1, #0
   29eec:	cmpgt	r2, r1
   29ef0:	str	r2, [r4, #160]	; 0xa0
   29ef4:	strgt	r1, [r4, #160]	; 0xa0
   29ef8:	b	29f08 <flatcc_builder_start_union_vector@@Base+0x9c>
   29efc:	ldr	r3, [r0, #32]
   29f00:	add	r3, r3, #36	; 0x24
   29f04:	str	r3, [r0, #32]
   29f08:	ldr	ip, [r4, #20]
   29f0c:	ldr	r1, [r4, #28]
   29f10:	ldrh	r5, [r4, #130]	; 0x82
   29f14:	add	r2, ip, r1
   29f18:	add	r2, r2, #7
   29f1c:	str	ip, [r3, #8]
   29f20:	bic	r2, r2, #7
   29f24:	mov	lr, #4
   29f28:	mov	r0, #0
   29f2c:	mov	ip, #8
   29f30:	strh	r5, [r3, #12]
   29f34:	strh	lr, [r4, #130]	; 0x82
   29f38:	str	r1, [r3]
   29f3c:	str	r2, [r4, #28]
   29f40:	str	r0, [r4, #20]
   29f44:	str	r0, [r3, #20]
   29f48:	str	ip, [r3, #16]
   29f4c:	ldr	r1, [r4, #64]	; 0x40
   29f50:	ldr	ip, [r4, #60]	; 0x3c
   29f54:	sub	r1, r1, r2
   29f58:	mvn	lr, #3
   29f5c:	cmp	r1, lr
   29f60:	add	r2, ip, r2
   29f64:	movhi	r1, lr
   29f68:	mov	ip, #7
   29f6c:	strh	ip, [r3, #14]
   29f70:	str	r2, [r4, #16]
   29f74:	str	r1, [r4, #24]
   29f78:	str	lr, [r3, #4]
   29f7c:	add	sp, sp, #8
   29f80:	pop	{r4, r5, r6, pc}
   29f84:	mov	r1, #4
   29f88:	ldr	r0, [r4, #40]	; 0x28
   29f8c:	str	r1, [sp]
   29f90:	add	r1, r4, #84	; 0x54
   29f94:	ldr	r6, [r4, #48]	; 0x30
   29f98:	blx	r6
   29f9c:	cmp	r0, #0
   29fa0:	beq	29ec0 <flatcc_builder_start_union_vector@@Base+0x54>
   29fa4:	bl	1479c <__assert_fail@plt+0x184>
   29fa8:	mvn	r0, #0
   29fac:	b	29f7c <flatcc_builder_start_union_vector@@Base+0x110>
   29fb0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00029fb4 <flatcc_builder_end_union_vector@@Base>:
   29fb4:	ldr	r3, [r1, #32]
   29fb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   29fbc:	sub	sp, sp, #12
   29fc0:	ldrh	r2, [r3, #14]
   29fc4:	cmp	r2, #7
   29fc8:	bne	2a188 <flatcc_builder_end_union_vector@@Base+0x1d4>
   29fcc:	ldr	r5, [r3, #20]
   29fd0:	ldr	r8, [r1, #20]
   29fd4:	ldr	r3, [r1, #24]
   29fd8:	lsl	r7, r5, #2
   29fdc:	add	r2, r7, r5
   29fe0:	add	r2, r2, r8
   29fe4:	cmp	r2, r3
   29fe8:	mov	r4, r1
   29fec:	mov	r6, r0
   29ff0:	str	r2, [r1, #20]
   29ff4:	bcs	2a0d0 <flatcc_builder_end_union_vector@@Base+0x11c>
   29ff8:	ldr	r3, [r1, #16]
   29ffc:	adds	r1, r3, r8
   2a000:	beq	2a170 <flatcc_builder_end_union_vector@@Base+0x1bc>
   2a004:	cmp	r5, #0
   2a008:	add	r7, r1, r7
   2a00c:	addne	lr, r3, r5, lsl #3
   2a010:	subne	r0, r7, #1
   2a014:	subne	r2, r1, #4
   2a018:	beq	2a130 <flatcc_builder_end_union_vector@@Base+0x17c>
   2a01c:	ldrb	ip, [r3]
   2a020:	add	r3, r3, #8
   2a024:	strb	ip, [r0, #1]!
   2a028:	ldr	ip, [r3, #-4]
   2a02c:	cmp	lr, r3
   2a030:	str	ip, [r2, #4]!
   2a034:	bne	2a01c <flatcc_builder_end_union_vector@@Base+0x68>
   2a038:	cmn	r5, #-1073741823	; 0xc0000001
   2a03c:	bls	2a130 <flatcc_builder_end_union_vector@@Base+0x17c>
   2a040:	mov	r8, #0
   2a044:	mov	r5, r8
   2a048:	ldr	r2, [r4, #20]
   2a04c:	mov	r1, #0
   2a050:	ldr	r0, [r4, #16]
   2a054:	bl	145c4 <memset@plt>
   2a058:	ldr	r3, [r4, #32]
   2a05c:	ldr	r2, [r4, #64]	; 0x40
   2a060:	ldrh	lr, [r4, #130]	; 0x82
   2a064:	ldr	ip, [r3]
   2a068:	ldr	r1, [r3, #4]
   2a06c:	ldrh	r0, [r4, #128]	; 0x80
   2a070:	sub	r2, r2, ip
   2a074:	cmp	r2, r1
   2a078:	movcs	r2, r1
   2a07c:	cmp	r0, lr
   2a080:	ldr	r0, [r4, #60]	; 0x3c
   2a084:	ldr	r7, [r3, #8]
   2a088:	str	r2, [r4, #24]
   2a08c:	add	r2, r0, ip
   2a090:	str	r2, [r4, #16]
   2a094:	str	r7, [r4, #20]
   2a098:	ldr	r2, [r4, #156]	; 0x9c
   2a09c:	str	ip, [r4, #28]
   2a0a0:	str	r1, [r3, #4]
   2a0a4:	strhcc	lr, [r4, #128]	; 0x80
   2a0a8:	ldrh	r1, [r3, #12]
   2a0ac:	sub	r2, r2, #1
   2a0b0:	sub	r3, r3, #36	; 0x24
   2a0b4:	mov	r0, r6
   2a0b8:	stm	r6, {r5, r8}
   2a0bc:	str	r2, [r4, #156]	; 0x9c
   2a0c0:	strh	r1, [r4, #130]	; 0x82
   2a0c4:	str	r3, [r4, #32]
   2a0c8:	add	sp, sp, #12
   2a0cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a0d0:	ldr	r1, [r1, #28]
   2a0d4:	mov	r3, #1
   2a0d8:	add	r1, r1, #1
   2a0dc:	ldr	r0, [r4, #40]	; 0x28
   2a0e0:	add	r2, r1, r2
   2a0e4:	str	r3, [sp]
   2a0e8:	add	r1, r4, #60	; 0x3c
   2a0ec:	ldr	r9, [r4, #48]	; 0x30
   2a0f0:	blx	r9
   2a0f4:	cmp	r0, #0
   2a0f8:	bne	2a170 <flatcc_builder_end_union_vector@@Base+0x1bc>
   2a0fc:	ldr	r1, [r4, #28]
   2a100:	ldr	r2, [r4, #64]	; 0x40
   2a104:	ldr	r3, [r4, #60]	; 0x3c
   2a108:	sub	r2, r2, r1
   2a10c:	cmn	r2, #4
   2a110:	mvnhi	r2, #3
   2a114:	str	r2, [r4, #24]
   2a118:	ldr	r2, [r4, #32]
   2a11c:	add	r3, r3, r1
   2a120:	mvn	r1, #3
   2a124:	str	r3, [r4, #16]
   2a128:	str	r1, [r2, #4]
   2a12c:	b	29ffc <flatcc_builder_end_union_vector@@Base+0x48>
   2a130:	mov	r3, r7
   2a134:	mov	r2, r5
   2a138:	mov	r0, r4
   2a13c:	bl	25dac <flatcc_builder_default_alloc@@Base+0x10c>
   2a140:	subs	r8, r0, #0
   2a144:	beq	2a040 <flatcc_builder_end_union_vector@@Base+0x8c>
   2a148:	mvn	r0, #0
   2a14c:	mov	r3, #1
   2a150:	mov	r2, r5
   2a154:	str	r0, [sp, #4]
   2a158:	mov	r1, r7
   2a15c:	str	r3, [sp]
   2a160:	mov	r0, r4
   2a164:	bl	2947c <flatcc_builder_create_vector@@Base>
   2a168:	mov	r5, r0
   2a16c:	b	2a048 <flatcc_builder_end_union_vector@@Base+0x94>
   2a170:	mov	r3, #0
   2a174:	mov	r0, r6
   2a178:	str	r3, [r6]
   2a17c:	str	r3, [r6, #4]
   2a180:	add	sp, sp, #12
   2a184:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a188:	ldr	r3, [pc, #12]	; 2a19c <flatcc_builder_end_union_vector@@Base+0x1e8>
   2a18c:	ldr	r2, [pc, #12]	; 2a1a0 <flatcc_builder_end_union_vector@@Base+0x1ec>
   2a190:	ldr	r1, [pc, #12]	; 2a1a4 <flatcc_builder_end_union_vector@@Base+0x1f0>
   2a194:	ldr	r0, [pc, #12]	; 2a1a8 <flatcc_builder_end_union_vector@@Base+0x1f4>
   2a198:	bl	14618 <__assert_fail@plt>
   2a19c:	andeq	r5, r4, r8, ror #25
   2a1a0:	andeq	r0, r0, r1, asr r6
   2a1a4:	andeq	r5, r4, r4, asr lr
   2a1a8:	andeq	r6, r4, r0, ror #2

0002a1ac <flatcc_builder_union_vector_edit@@Base>:
   2a1ac:	ldr	r0, [r0, #16]
   2a1b0:	bx	lr

0002a1b4 <flatcc_builder_union_vector_count@@Base>:
   2a1b4:	ldr	r3, [r0, #32]
   2a1b8:	ldr	r0, [r3, #20]
   2a1bc:	bx	lr

0002a1c0 <flatcc_builder_extend_union_vector@@Base>:
   2a1c0:	ldr	ip, [r0, #32]
   2a1c4:	push	{r4, r5, r6, r7, lr}
   2a1c8:	mov	r4, r0
   2a1cc:	ldr	r3, [ip, #20]
   2a1d0:	sub	sp, sp, #12
   2a1d4:	adds	r3, r1, r3
   2a1d8:	movcs	r2, #1
   2a1dc:	movcc	r2, #0
   2a1e0:	cmn	r3, #-536870911	; 0xe0000001
   2a1e4:	movls	r0, #0
   2a1e8:	movhi	r0, #1
   2a1ec:	orrs	r5, r2, r0
   2a1f0:	bne	2a288 <flatcc_builder_extend_union_vector@@Base+0xc8>
   2a1f4:	str	r3, [ip, #20]
   2a1f8:	ldr	r6, [r4, #20]
   2a1fc:	ldr	r3, [r4, #24]
   2a200:	add	r1, r6, r1, lsl #3
   2a204:	cmp	r1, r3
   2a208:	str	r1, [r4, #20]
   2a20c:	bcs	2a220 <flatcc_builder_extend_union_vector@@Base+0x60>
   2a210:	ldr	r0, [r4, #16]
   2a214:	add	r0, r0, r6
   2a218:	add	sp, sp, #12
   2a21c:	pop	{r4, r5, r6, r7, pc}
   2a220:	ldr	r2, [r4, #28]
   2a224:	mov	r3, #1
   2a228:	add	r2, r2, #1
   2a22c:	ldr	r0, [r4, #40]	; 0x28
   2a230:	add	r2, r2, r1
   2a234:	str	r3, [sp]
   2a238:	add	r1, r4, #60	; 0x3c
   2a23c:	ldr	r7, [r4, #48]	; 0x30
   2a240:	blx	r7
   2a244:	cmp	r0, #0
   2a248:	bne	2a280 <flatcc_builder_extend_union_vector@@Base+0xc0>
   2a24c:	ldr	r2, [r4, #28]
   2a250:	ldr	r3, [r4, #64]	; 0x40
   2a254:	ldr	r0, [r4, #60]	; 0x3c
   2a258:	sub	r3, r3, r2
   2a25c:	cmn	r3, #4
   2a260:	mvnhi	r3, #3
   2a264:	str	r3, [r4, #24]
   2a268:	ldr	r3, [r4, #32]
   2a26c:	add	r0, r0, r2
   2a270:	mvn	r2, #3
   2a274:	str	r0, [r4, #16]
   2a278:	str	r2, [r3, #4]
   2a27c:	b	2a214 <flatcc_builder_extend_union_vector@@Base+0x54>
   2a280:	mov	r0, r5
   2a284:	b	2a218 <flatcc_builder_extend_union_vector@@Base+0x58>
   2a288:	bl	14810 <__assert_fail@plt+0x1f8>

0002a28c <flatcc_builder_truncate_union_vector@@Base>:
   2a28c:	ldr	r3, [r0, #32]
   2a290:	push	{r4, lr}
   2a294:	ldrh	r2, [r3, #14]
   2a298:	cmp	r2, #7
   2a29c:	bne	2a2e0 <flatcc_builder_truncate_union_vector@@Base+0x54>
   2a2a0:	ldr	ip, [r3, #20]
   2a2a4:	cmp	ip, r1
   2a2a8:	bcc	2a2f4 <flatcc_builder_truncate_union_vector@@Base+0x68>
   2a2ac:	ldr	r2, [r3, #16]
   2a2b0:	sub	ip, ip, r1
   2a2b4:	str	ip, [r3, #20]
   2a2b8:	mul	r2, r2, r1
   2a2bc:	ldr	r3, [r0, #20]
   2a2c0:	ldr	r1, [r0, #16]
   2a2c4:	sub	r3, r3, r2
   2a2c8:	str	r3, [r0, #20]
   2a2cc:	add	r0, r1, r3
   2a2d0:	mov	r1, #0
   2a2d4:	bl	145c4 <memset@plt>
   2a2d8:	mov	r0, #0
   2a2dc:	pop	{r4, pc}
   2a2e0:	ldr	r3, [pc, #32]	; 2a308 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   2a2e4:	ldr	r2, [pc, #32]	; 2a30c <flatcc_builder_truncate_union_vector@@Base+0x80>
   2a2e8:	ldr	r1, [pc, #32]	; 2a310 <flatcc_builder_truncate_union_vector@@Base+0x84>
   2a2ec:	ldr	r0, [pc, #32]	; 2a314 <flatcc_builder_truncate_union_vector@@Base+0x88>
   2a2f0:	bl	14618 <__assert_fail@plt>
   2a2f4:	ldr	r3, [pc, #12]	; 2a308 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   2a2f8:	ldr	r2, [pc, #24]	; 2a318 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   2a2fc:	ldr	r1, [pc, #12]	; 2a310 <flatcc_builder_truncate_union_vector@@Base+0x84>
   2a300:	ldr	r0, [pc, #20]	; 2a31c <flatcc_builder_truncate_union_vector@@Base+0x90>
   2a304:	bl	14618 <__assert_fail@plt>
   2a308:	andeq	r5, r4, r8, lsl #26
   2a30c:	andeq	r0, r0, r1, lsl #13
   2a310:	andeq	r5, r4, r4, asr lr
   2a314:	andeq	r6, r4, r0, ror #2
   2a318:	andeq	r0, r0, r2, lsl #13
   2a31c:	andeq	r6, r4, r4, lsl #1

0002a320 <flatcc_builder_union_vector_push@@Base>:
   2a320:	push	{r4, r5, r6, r7, lr}
   2a324:	mov	r4, r0
   2a328:	ldr	r0, [r0, #32]
   2a32c:	sub	sp, sp, #20
   2a330:	add	r5, sp, #8
   2a334:	ldrh	r3, [r0, #14]
   2a338:	stm	r5, {r1, r2}
   2a33c:	cmp	r3, #7
   2a340:	bne	2a404 <flatcc_builder_union_vector_push@@Base+0xe4>
   2a344:	ldr	r3, [r0, #20]
   2a348:	cmn	r3, #-536870911	; 0xe0000001
   2a34c:	beq	2a3f4 <flatcc_builder_union_vector_push@@Base+0xd4>
   2a350:	add	r3, r3, #1
   2a354:	str	r3, [r0, #20]
   2a358:	ldr	r6, [r4, #20]
   2a35c:	ldr	r2, [r4, #24]
   2a360:	add	r3, r6, #8
   2a364:	cmp	r3, r2
   2a368:	str	r3, [r4, #20]
   2a36c:	bcs	2a394 <flatcc_builder_union_vector_push@@Base+0x74>
   2a370:	ldr	r3, [r4, #16]
   2a374:	adds	r3, r3, r6
   2a378:	movne	r2, r3
   2a37c:	ldmne	r5, {r0, r1}
   2a380:	moveq	r2, r3
   2a384:	stmne	r3, {r0, r1}
   2a388:	mov	r0, r2
   2a38c:	add	sp, sp, #20
   2a390:	pop	{r4, r5, r6, r7, pc}
   2a394:	ldr	r2, [r4, #28]
   2a398:	mov	r3, #1
   2a39c:	add	r2, r6, r2
   2a3a0:	ldr	r0, [r4, #40]	; 0x28
   2a3a4:	add	r2, r2, #9
   2a3a8:	str	r3, [sp]
   2a3ac:	add	r1, r4, #60	; 0x3c
   2a3b0:	ldr	r7, [r4, #48]	; 0x30
   2a3b4:	blx	r7
   2a3b8:	cmp	r0, #0
   2a3bc:	bne	2a3f4 <flatcc_builder_union_vector_push@@Base+0xd4>
   2a3c0:	ldr	r1, [r4, #28]
   2a3c4:	ldr	r2, [r4, #64]	; 0x40
   2a3c8:	ldr	r3, [r4, #60]	; 0x3c
   2a3cc:	sub	r2, r2, r1
   2a3d0:	cmn	r2, #4
   2a3d4:	mvnhi	r2, #3
   2a3d8:	str	r2, [r4, #24]
   2a3dc:	ldr	r2, [r4, #32]
   2a3e0:	add	r3, r3, r1
   2a3e4:	mvn	r1, #3
   2a3e8:	str	r3, [r4, #16]
   2a3ec:	str	r1, [r2, #4]
   2a3f0:	b	2a374 <flatcc_builder_union_vector_push@@Base+0x54>
   2a3f4:	mov	r2, #0
   2a3f8:	mov	r0, r2
   2a3fc:	add	sp, sp, #20
   2a400:	pop	{r4, r5, r6, r7, pc}
   2a404:	ldr	r3, [pc, #12]	; 2a418 <flatcc_builder_union_vector_push@@Base+0xf8>
   2a408:	ldr	r2, [pc, #12]	; 2a41c <flatcc_builder_union_vector_push@@Base+0xfc>
   2a40c:	ldr	r1, [pc, #12]	; 2a420 <flatcc_builder_union_vector_push@@Base+0x100>
   2a410:	ldr	r0, [pc, #12]	; 2a424 <flatcc_builder_union_vector_push@@Base+0x104>
   2a414:	bl	14618 <__assert_fail@plt>
   2a418:	andeq	r5, r4, r0, lsr sp
   2a41c:	andeq	r0, r0, sp, lsl #13
   2a420:	andeq	r5, r4, r4, asr lr
   2a424:	andeq	r6, r4, r0, ror #2

0002a428 <flatcc_builder_append_union_vector@@Base>:
   2a428:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a42c:	mov	r5, r0
   2a430:	ldr	r0, [r0, #32]
   2a434:	sub	sp, sp, #12
   2a438:	ldrh	r3, [r0, #14]
   2a43c:	cmp	r3, #7
   2a440:	bne	2a524 <flatcc_builder_append_union_vector@@Base+0xfc>
   2a444:	mov	r7, r1
   2a448:	ldr	r1, [r0, #20]
   2a44c:	adds	r1, r2, r1
   2a450:	movcs	r4, #1
   2a454:	movcc	r4, #0
   2a458:	cmn	r1, #-536870911	; 0xe0000001
   2a45c:	movls	r3, #0
   2a460:	movhi	r3, #1
   2a464:	orrs	r4, r4, r3
   2a468:	bne	2a520 <flatcc_builder_append_union_vector@@Base+0xf8>
   2a46c:	str	r1, [r0, #20]
   2a470:	ldr	r8, [r5, #20]
   2a474:	lsl	r6, r2, #3
   2a478:	ldr	r3, [r5, #24]
   2a47c:	add	r1, r6, r8
   2a480:	cmp	r1, r3
   2a484:	str	r1, [r5, #20]
   2a488:	bcs	2a4b8 <flatcc_builder_append_union_vector@@Base+0x90>
   2a48c:	ldr	r3, [r5, #16]
   2a490:	adds	r3, r3, r8
   2a494:	beq	2a4ac <flatcc_builder_append_union_vector@@Base+0x84>
   2a498:	mov	r0, r3
   2a49c:	mov	r2, r6
   2a4a0:	mov	r1, r7
   2a4a4:	bl	1454c <memcpy@plt>
   2a4a8:	mov	r3, r0
   2a4ac:	mov	r0, r3
   2a4b0:	add	sp, sp, #12
   2a4b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a4b8:	ldr	r2, [r5, #28]
   2a4bc:	mov	r3, #1
   2a4c0:	add	r2, r2, #1
   2a4c4:	ldr	r0, [r5, #40]	; 0x28
   2a4c8:	add	r2, r2, r1
   2a4cc:	str	r3, [sp]
   2a4d0:	add	r1, r5, #60	; 0x3c
   2a4d4:	ldr	r9, [r5, #48]	; 0x30
   2a4d8:	blx	r9
   2a4dc:	cmp	r0, #0
   2a4e0:	bne	2a518 <flatcc_builder_append_union_vector@@Base+0xf0>
   2a4e4:	ldr	r1, [r5, #28]
   2a4e8:	ldr	r2, [r5, #64]	; 0x40
   2a4ec:	ldr	r3, [r5, #60]	; 0x3c
   2a4f0:	sub	r2, r2, r1
   2a4f4:	cmn	r2, #4
   2a4f8:	mvnhi	r2, #3
   2a4fc:	str	r2, [r5, #24]
   2a500:	ldr	r2, [r5, #32]
   2a504:	add	r3, r3, r1
   2a508:	mvn	r1, #3
   2a50c:	str	r3, [r5, #16]
   2a510:	str	r1, [r2, #4]
   2a514:	b	2a490 <flatcc_builder_append_union_vector@@Base+0x68>
   2a518:	mov	r3, r4
   2a51c:	b	2a4ac <flatcc_builder_append_union_vector@@Base+0x84>
   2a520:	bl	14810 <__assert_fail@plt+0x1f8>
   2a524:	ldr	r3, [pc, #12]	; 2a538 <flatcc_builder_append_union_vector@@Base+0x110>
   2a528:	ldr	r2, [pc, #12]	; 2a53c <flatcc_builder_append_union_vector@@Base+0x114>
   2a52c:	ldr	r1, [pc, #12]	; 2a540 <flatcc_builder_append_union_vector@@Base+0x118>
   2a530:	ldr	r0, [pc, #12]	; 2a544 <flatcc_builder_append_union_vector@@Base+0x11c>
   2a534:	bl	14618 <__assert_fail@plt>
   2a538:	andeq	r5, r4, r4, asr sp
   2a53c:	muleq	r0, ip, r6
   2a540:	andeq	r5, r4, r4, asr lr
   2a544:	andeq	r6, r4, r0, ror #2

0002a548 <flatcc_builder_create_string@@Base>:
   2a548:	push	{r4, r5, r6, lr}
   2a54c:	sub	sp, sp, #88	; 0x58
   2a550:	ldr	lr, [r0, #136]	; 0x88
   2a554:	mov	r4, r0
   2a558:	add	r0, sp, #88	; 0x58
   2a55c:	cmp	r2, #0
   2a560:	sub	r3, lr, r2
   2a564:	str	r2, [r0, #-76]!	; 0xffffffb4
   2a568:	sub	r3, r3, #1
   2a56c:	str	r0, [sp, #24]
   2a570:	moveq	r0, #1
   2a574:	strne	r1, [sp, #32]
   2a578:	mov	ip, #4
   2a57c:	moveq	r1, r0
   2a580:	movne	r1, #2
   2a584:	and	r3, r3, #3
   2a588:	str	ip, [sp, #28]
   2a58c:	add	r3, r3, #1
   2a590:	addne	ip, r2, ip
   2a594:	add	r1, r1, #1
   2a598:	add	ip, ip, r3
   2a59c:	add	r0, sp, #88	; 0x58
   2a5a0:	add	r1, r0, r1, lsl #3
   2a5a4:	sub	r5, lr, ip
   2a5a8:	ldr	r0, [pc, #104]	; 2a618 <flatcc_builder_create_string@@Base+0xd0>
   2a5ac:	strne	r2, [sp, #36]	; 0x24
   2a5b0:	moveq	r2, #2
   2a5b4:	movne	r2, #3
   2a5b8:	cmp	lr, r5
   2a5bc:	str	r3, [r1, #-68]	; 0xffffffbc
   2a5c0:	str	ip, [sp, #16]
   2a5c4:	str	r2, [sp, #20]
   2a5c8:	str	r0, [r1, #-72]	; 0xffffffb8
   2a5cc:	ble	2a600 <flatcc_builder_create_string@@Base+0xb8>
   2a5d0:	ldr	r0, [r4, #36]	; 0x24
   2a5d4:	mov	r3, r5
   2a5d8:	str	ip, [sp]
   2a5dc:	add	r1, sp, #24
   2a5e0:	ldr	r6, [r4, #44]	; 0x2c
   2a5e4:	blx	r6
   2a5e8:	cmp	r0, #0
   2a5ec:	bne	2a604 <flatcc_builder_create_string@@Base+0xbc>
   2a5f0:	mov	r0, r5
   2a5f4:	str	r5, [r4, #136]	; 0x88
   2a5f8:	add	sp, sp, #88	; 0x58
   2a5fc:	pop	{r4, r5, r6, pc}
   2a600:	bl	147e8 <__assert_fail@plt+0x1d0>
   2a604:	ldr	r3, [pc, #16]	; 2a61c <flatcc_builder_create_string@@Base+0xd4>
   2a608:	ldr	r2, [pc, #16]	; 2a620 <flatcc_builder_create_string@@Base+0xd8>
   2a60c:	ldr	r1, [pc, #16]	; 2a624 <flatcc_builder_create_string@@Base+0xdc>
   2a610:	ldr	r0, [pc, #16]	; 2a628 <flatcc_builder_create_string@@Base+0xe0>
   2a614:	bl	14618 <__assert_fail@plt>
   2a618:	muleq	r4, ip, r7
   2a61c:	andeq	r5, r4, r0, lsr #14
   2a620:	andeq	r0, r0, fp, lsl #5
   2a624:	andeq	r5, r4, r4, asr lr
   2a628:	andeq	r5, r4, r4, lsl pc

0002a62c <flatcc_builder_create_string_str@@Base>:
   2a62c:	push	{r4, r5, r6, lr}
   2a630:	mov	r4, r0
   2a634:	sub	sp, sp, #88	; 0x58
   2a638:	mov	r0, r1
   2a63c:	mov	r5, r1
   2a640:	bl	145a0 <strlen@plt>
   2a644:	ldr	lr, [r4, #136]	; 0x88
   2a648:	add	r2, sp, #88	; 0x58
   2a64c:	sub	r3, lr, #1
   2a650:	mov	ip, #4
   2a654:	str	ip, [sp, #28]
   2a658:	cmp	r0, #0
   2a65c:	str	r0, [r2, #-76]!	; 0xffffffb4
   2a660:	sub	r3, r3, r0
   2a664:	str	r2, [sp, #24]
   2a668:	moveq	r2, #1
   2a66c:	moveq	r1, r2
   2a670:	movne	r1, #2
   2a674:	and	r3, r3, #3
   2a678:	addne	ip, r0, ip
   2a67c:	add	r3, r3, #1
   2a680:	add	r1, r1, #1
   2a684:	strne	r0, [sp, #36]	; 0x24
   2a688:	add	ip, ip, r3
   2a68c:	add	r0, sp, #88	; 0x58
   2a690:	strne	r5, [sp, #32]
   2a694:	add	r1, r0, r1, lsl #3
   2a698:	sub	r5, lr, ip
   2a69c:	ldr	r0, [pc, #100]	; 2a708 <flatcc_builder_create_string_str@@Base+0xdc>
   2a6a0:	movne	r2, #3
   2a6a4:	moveq	r2, #2
   2a6a8:	cmp	lr, r5
   2a6ac:	str	r3, [r1, #-68]	; 0xffffffbc
   2a6b0:	str	ip, [sp, #16]
   2a6b4:	str	r2, [sp, #20]
   2a6b8:	str	r0, [r1, #-72]	; 0xffffffb8
   2a6bc:	ble	2a6f0 <flatcc_builder_create_string_str@@Base+0xc4>
   2a6c0:	ldr	r0, [r4, #36]	; 0x24
   2a6c4:	mov	r3, r5
   2a6c8:	str	ip, [sp]
   2a6cc:	add	r1, sp, #24
   2a6d0:	ldr	r6, [r4, #44]	; 0x2c
   2a6d4:	blx	r6
   2a6d8:	cmp	r0, #0
   2a6dc:	bne	2a6f4 <flatcc_builder_create_string_str@@Base+0xc8>
   2a6e0:	mov	r0, r5
   2a6e4:	str	r5, [r4, #136]	; 0x88
   2a6e8:	add	sp, sp, #88	; 0x58
   2a6ec:	pop	{r4, r5, r6, pc}
   2a6f0:	bl	147e8 <__assert_fail@plt+0x1d0>
   2a6f4:	ldr	r3, [pc, #16]	; 2a70c <flatcc_builder_create_string_str@@Base+0xe0>
   2a6f8:	ldr	r2, [pc, #16]	; 2a710 <flatcc_builder_create_string_str@@Base+0xe4>
   2a6fc:	ldr	r1, [pc, #16]	; 2a714 <flatcc_builder_create_string_str@@Base+0xe8>
   2a700:	ldr	r0, [pc, #16]	; 2a718 <flatcc_builder_create_string_str@@Base+0xec>
   2a704:	bl	14618 <__assert_fail@plt>
   2a708:	muleq	r4, ip, r7
   2a70c:	andeq	r5, r4, r0, lsr #14
   2a710:	andeq	r0, r0, fp, lsl #5
   2a714:	andeq	r5, r4, r4, asr lr
   2a718:	andeq	r5, r4, r4, lsl pc

0002a71c <flatcc_builder_create_string_strn@@Base>:
   2a71c:	push	{r4, r5, r6, lr}
   2a720:	mov	r6, r1
   2a724:	sub	sp, sp, #88	; 0x58
   2a728:	mov	r4, r0
   2a72c:	mov	r1, #0
   2a730:	mov	r0, r6
   2a734:	mov	r5, r2
   2a738:	bl	145e8 <memchr@plt>
   2a73c:	mov	ip, #4
   2a740:	mov	r1, #1
   2a744:	add	r2, sp, #88	; 0x58
   2a748:	str	ip, [sp, #28]
   2a74c:	add	lr, sp, #88	; 0x58
   2a750:	cmp	r0, #0
   2a754:	subne	r5, r0, r6
   2a758:	ldr	r0, [r4, #136]	; 0x88
   2a75c:	cmp	r5, #0
   2a760:	sub	r3, r0, #1
   2a764:	sub	r3, r3, r5
   2a768:	movne	r1, #2
   2a76c:	and	r3, r3, #3
   2a770:	addne	ip, r5, ip
   2a774:	add	r3, r3, #1
   2a778:	add	r1, r1, #1
   2a77c:	add	ip, r3, ip
   2a780:	str	r5, [r2, #-76]!	; 0xffffffb4
   2a784:	strne	r5, [sp, #36]	; 0x24
   2a788:	add	r1, lr, r1, lsl #3
   2a78c:	sub	r5, r0, ip
   2a790:	ldr	lr, [pc, #108]	; 2a804 <flatcc_builder_create_string_strn@@Base+0xe8>
   2a794:	str	r2, [sp, #24]
   2a798:	strne	r6, [sp, #32]
   2a79c:	movne	r2, #3
   2a7a0:	moveq	r2, #2
   2a7a4:	cmp	r0, r5
   2a7a8:	str	r3, [r1, #-68]	; 0xffffffbc
   2a7ac:	str	ip, [sp, #16]
   2a7b0:	str	r2, [sp, #20]
   2a7b4:	str	lr, [r1, #-72]	; 0xffffffb8
   2a7b8:	ble	2a7ec <flatcc_builder_create_string_strn@@Base+0xd0>
   2a7bc:	ldr	r0, [r4, #36]	; 0x24
   2a7c0:	mov	r3, r5
   2a7c4:	str	ip, [sp]
   2a7c8:	add	r1, sp, #24
   2a7cc:	ldr	r6, [r4, #44]	; 0x2c
   2a7d0:	blx	r6
   2a7d4:	cmp	r0, #0
   2a7d8:	bne	2a7f0 <flatcc_builder_create_string_strn@@Base+0xd4>
   2a7dc:	mov	r0, r5
   2a7e0:	str	r5, [r4, #136]	; 0x88
   2a7e4:	add	sp, sp, #88	; 0x58
   2a7e8:	pop	{r4, r5, r6, pc}
   2a7ec:	bl	147e8 <__assert_fail@plt+0x1d0>
   2a7f0:	ldr	r3, [pc, #16]	; 2a808 <flatcc_builder_create_string_strn@@Base+0xec>
   2a7f4:	ldr	r2, [pc, #16]	; 2a80c <flatcc_builder_create_string_strn@@Base+0xf0>
   2a7f8:	ldr	r1, [pc, #16]	; 2a810 <flatcc_builder_create_string_strn@@Base+0xf4>
   2a7fc:	ldr	r0, [pc, #16]	; 2a814 <flatcc_builder_create_string_strn@@Base+0xf8>
   2a800:	bl	14618 <__assert_fail@plt>
   2a804:	muleq	r4, ip, r7
   2a808:	andeq	r5, r4, r0, lsr #14
   2a80c:	andeq	r0, r0, fp, lsl #5
   2a810:	andeq	r5, r4, r4, asr lr
   2a814:	andeq	r5, r4, r4, lsl pc

0002a818 <flatcc_builder_end_string@@Base>:
   2a818:	ldr	r3, [r0, #32]
   2a81c:	push	{r4, r5, r6, lr}
   2a820:	sub	sp, sp, #88	; 0x58
   2a824:	ldrh	r2, [r3, #14]
   2a828:	cmp	r2, #6
   2a82c:	bne	2a998 <flatcc_builder_end_string@@Base+0x180>
   2a830:	ldr	r2, [r3, #20]
   2a834:	ldr	r3, [r0, #20]
   2a838:	mov	r4, r0
   2a83c:	cmp	r2, r3
   2a840:	bne	2a984 <flatcc_builder_end_string@@Base+0x16c>
   2a844:	ldr	r0, [r0, #136]	; 0x88
   2a848:	add	r1, sp, #88	; 0x58
   2a84c:	sub	r3, r0, #1
   2a850:	cmp	r2, #0
   2a854:	sub	r3, r3, r2
   2a858:	str	r2, [r1, #-76]!	; 0xffffffb4
   2a85c:	mov	ip, #4
   2a860:	str	r1, [sp, #24]
   2a864:	ldr	lr, [r4, #16]
   2a868:	mov	r1, #1
   2a86c:	and	r3, r3, #3
   2a870:	movne	r1, #2
   2a874:	str	ip, [sp, #28]
   2a878:	add	r3, r3, #1
   2a87c:	addne	ip, r2, ip
   2a880:	add	r1, r1, #1
   2a884:	strne	lr, [sp, #32]
   2a888:	add	ip, ip, r3
   2a88c:	add	lr, sp, #88	; 0x58
   2a890:	add	r1, lr, r1, lsl #3
   2a894:	sub	r5, r0, ip
   2a898:	ldr	lr, [pc, #268]	; 2a9ac <flatcc_builder_end_string@@Base+0x194>
   2a89c:	strne	r2, [sp, #36]	; 0x24
   2a8a0:	moveq	r2, #2
   2a8a4:	movne	r2, #3
   2a8a8:	cmp	r0, r5
   2a8ac:	str	r3, [r1, #-68]	; 0xffffffbc
   2a8b0:	str	ip, [sp, #16]
   2a8b4:	str	r2, [sp, #20]
   2a8b8:	str	lr, [r1, #-72]	; 0xffffffb8
   2a8bc:	ble	2a980 <flatcc_builder_end_string@@Base+0x168>
   2a8c0:	ldr	r0, [r4, #36]	; 0x24
   2a8c4:	add	r1, sp, #24
   2a8c8:	str	ip, [sp]
   2a8cc:	mov	r3, r5
   2a8d0:	ldr	r6, [r4, #44]	; 0x2c
   2a8d4:	blx	r6
   2a8d8:	subs	r1, r0, #0
   2a8dc:	bne	2a96c <flatcc_builder_end_string@@Base+0x154>
   2a8e0:	cmp	r5, #0
   2a8e4:	str	r5, [r4, #136]	; 0x88
   2a8e8:	beq	2a960 <flatcc_builder_end_string@@Base+0x148>
   2a8ec:	ldr	r2, [r4, #20]
   2a8f0:	ldr	r0, [r4, #16]
   2a8f4:	bl	145c4 <memset@plt>
   2a8f8:	ldr	r3, [r4, #32]
   2a8fc:	ldr	r2, [r4, #64]	; 0x40
   2a900:	ldrh	lr, [r4, #130]	; 0x82
   2a904:	ldr	ip, [r3]
   2a908:	ldr	r1, [r3, #4]
   2a90c:	ldrh	r0, [r4, #128]	; 0x80
   2a910:	sub	r2, r2, ip
   2a914:	cmp	r2, r1
   2a918:	movcs	r2, r1
   2a91c:	cmp	r0, lr
   2a920:	ldr	r0, [r4, #60]	; 0x3c
   2a924:	ldr	r6, [r3, #8]
   2a928:	str	r2, [r4, #24]
   2a92c:	add	r2, r0, ip
   2a930:	str	r2, [r4, #16]
   2a934:	str	r6, [r4, #20]
   2a938:	ldr	r2, [r4, #156]	; 0x9c
   2a93c:	str	ip, [r4, #28]
   2a940:	str	r1, [r3, #4]
   2a944:	strhcc	lr, [r4, #128]	; 0x80
   2a948:	ldrh	r1, [r3, #12]
   2a94c:	sub	r2, r2, #1
   2a950:	sub	r3, r3, #36	; 0x24
   2a954:	str	r2, [r4, #156]	; 0x9c
   2a958:	strh	r1, [r4, #130]	; 0x82
   2a95c:	str	r3, [r4, #32]
   2a960:	mov	r0, r5
   2a964:	add	sp, sp, #88	; 0x58
   2a968:	pop	{r4, r5, r6, pc}
   2a96c:	ldr	r3, [pc, #60]	; 2a9b0 <flatcc_builder_end_string@@Base+0x198>
   2a970:	ldr	r2, [pc, #60]	; 2a9b4 <flatcc_builder_end_string@@Base+0x19c>
   2a974:	ldr	r1, [pc, #60]	; 2a9b8 <flatcc_builder_end_string@@Base+0x1a0>
   2a978:	ldr	r0, [pc, #60]	; 2a9bc <flatcc_builder_end_string@@Base+0x1a4>
   2a97c:	bl	14618 <__assert_fail@plt>
   2a980:	bl	147e8 <__assert_fail@plt+0x1d0>
   2a984:	ldr	r3, [pc, #52]	; 2a9c0 <flatcc_builder_end_string@@Base+0x1a8>
   2a988:	ldr	r2, [pc, #52]	; 2a9c4 <flatcc_builder_end_string@@Base+0x1ac>
   2a98c:	ldr	r1, [pc, #36]	; 2a9b8 <flatcc_builder_end_string@@Base+0x1a0>
   2a990:	ldr	r0, [pc, #48]	; 2a9c8 <flatcc_builder_end_string@@Base+0x1b0>
   2a994:	bl	14618 <__assert_fail@plt>
   2a998:	ldr	r3, [pc, #32]	; 2a9c0 <flatcc_builder_end_string@@Base+0x1a8>
   2a99c:	ldr	r2, [pc, #40]	; 2a9cc <flatcc_builder_end_string@@Base+0x1b4>
   2a9a0:	ldr	r1, [pc, #16]	; 2a9b8 <flatcc_builder_end_string@@Base+0x1a0>
   2a9a4:	ldr	r0, [pc, #36]	; 2a9d0 <flatcc_builder_end_string@@Base+0x1b8>
   2a9a8:	bl	14618 <__assert_fail@plt>
   2a9ac:	muleq	r4, ip, r7
   2a9b0:	andeq	r5, r4, r0, lsr #14
   2a9b4:	andeq	r0, r0, fp, lsl #5
   2a9b8:	andeq	r5, r4, r4, asr lr
   2a9bc:	andeq	r5, r4, r4, lsl pc
   2a9c0:	andeq	r5, r4, r8, ror sp
   2a9c4:	andeq	r0, r0, r5, asr #13
   2a9c8:	muleq	r4, r4, r1
   2a9cc:	andeq	r0, r0, r4, asr #13
   2a9d0:	ldrdeq	r5, [r4], -r4

0002a9d4 <flatcc_builder_string_edit@@Base>:
   2a9d4:	ldr	r0, [r0, #16]
   2a9d8:	bx	lr

0002a9dc <flatcc_builder_string_len@@Base>:
   2a9dc:	ldr	r3, [r0, #32]
   2a9e0:	ldr	r0, [r3, #20]
   2a9e4:	bx	lr

0002a9e8 <flatcc_builder_table_add@@Base>:
   2a9e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a9ec:	mov	r4, r0
   2a9f0:	ldr	r0, [r0, #32]
   2a9f4:	sub	sp, sp, #12
   2a9f8:	ldrh	r0, [r0, #14]
   2a9fc:	cmp	r0, #3
   2aa00:	bne	2ab3c <flatcc_builder_table_add@@Base+0x154>
   2aa04:	ldr	r0, [pc, #324]	; 2ab50 <flatcc_builder_table_add@@Base+0x168>
   2aa08:	cmp	r1, r0
   2aa0c:	bhi	2ab28 <flatcc_builder_table_add@@Base+0x140>
   2aa10:	ldrh	r0, [r4, #130]	; 0x82
   2aa14:	lsl	r7, r1, #1
   2aa18:	cmp	r0, r3
   2aa1c:	ldr	r0, [r4, #4]
   2aa20:	strhcc	r3, [r4, #130]	; 0x82
   2aa24:	add	lr, r0, r7
   2aa28:	ldrh	r6, [r0, r7]
   2aa2c:	cmp	r6, #0
   2aa30:	bne	2ab14 <flatcc_builder_table_add@@Base+0x12c>
   2aa34:	ldr	ip, [r4, #12]
   2aa38:	ldr	r9, [pc, #276]	; 2ab54 <flatcc_builder_table_add@@Base+0x16c>
   2aa3c:	eor	ip, ip, r1
   2aa40:	uxth	r5, r1
   2aa44:	mul	r1, r9, ip
   2aa48:	ldr	r0, [r4, #20]
   2aa4c:	eor	r1, r1, r2
   2aa50:	sub	r8, r3, #1
   2aa54:	add	r8, r8, r0
   2aa58:	rsb	r3, r3, #0
   2aa5c:	and	r8, r8, r3
   2aa60:	mul	r1, r9, r1
   2aa64:	ldr	r3, [r4, #24]
   2aa68:	add	r2, r2, r8
   2aa6c:	cmp	r2, r3
   2aa70:	str	r1, [r4, #12]
   2aa74:	str	r2, [r4, #20]
   2aa78:	bcs	2aaa4 <flatcc_builder_table_add@@Base+0xbc>
   2aa7c:	ldr	r0, [r4, #16]
   2aa80:	add	r3, r8, #4
   2aa84:	strh	r3, [lr]
   2aa88:	ldrh	r3, [r4, #8]
   2aa8c:	add	r0, r0, r8
   2aa90:	cmp	r3, r5
   2aa94:	addls	r5, r5, #1
   2aa98:	strhls	r5, [r4, #8]
   2aa9c:	add	sp, sp, #12
   2aaa0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2aaa4:	ldr	r1, [r4, #28]
   2aaa8:	mov	r3, #1
   2aaac:	add	r1, r1, #1
   2aab0:	ldr	r0, [r4, #40]	; 0x28
   2aab4:	add	r2, r1, r2
   2aab8:	str	r3, [sp]
   2aabc:	add	r1, r4, #60	; 0x3c
   2aac0:	ldr	r9, [r4, #48]	; 0x30
   2aac4:	blx	r9
   2aac8:	cmp	r0, #0
   2aacc:	bne	2ab0c <flatcc_builder_table_add@@Base+0x124>
   2aad0:	ldr	r6, [r4, #28]
   2aad4:	ldr	r3, [r4, #64]	; 0x40
   2aad8:	ldr	r2, [pc, #120]	; 2ab58 <flatcc_builder_table_add@@Base+0x170>
   2aadc:	sub	r3, r3, r6
   2aae0:	ldr	r0, [r4, #60]	; 0x3c
   2aae4:	ldr	r1, [r4, #32]
   2aae8:	ldr	lr, [r4, #4]
   2aaec:	cmp	r3, r2
   2aaf0:	add	r0, r0, r6
   2aaf4:	movcs	r3, r2
   2aaf8:	str	r0, [r4, #16]
   2aafc:	str	r3, [r4, #24]
   2ab00:	add	lr, lr, r7
   2ab04:	str	r2, [r1, #4]
   2ab08:	b	2aa80 <flatcc_builder_table_add@@Base+0x98>
   2ab0c:	mov	r0, r6
   2ab10:	b	2aa9c <flatcc_builder_table_add@@Base+0xb4>
   2ab14:	ldr	r3, [pc, #64]	; 2ab5c <flatcc_builder_table_add@@Base+0x174>
   2ab18:	ldr	r2, [pc, #64]	; 2ab60 <flatcc_builder_table_add@@Base+0x178>
   2ab1c:	ldr	r1, [pc, #64]	; 2ab64 <flatcc_builder_table_add@@Base+0x17c>
   2ab20:	ldr	r0, [pc, #64]	; 2ab68 <flatcc_builder_table_add@@Base+0x180>
   2ab24:	bl	14618 <__assert_fail@plt>
   2ab28:	ldr	r3, [pc, #44]	; 2ab5c <flatcc_builder_table_add@@Base+0x174>
   2ab2c:	ldr	r2, [pc, #56]	; 2ab6c <flatcc_builder_table_add@@Base+0x184>
   2ab30:	ldr	r1, [pc, #44]	; 2ab64 <flatcc_builder_table_add@@Base+0x17c>
   2ab34:	ldr	r0, [pc, #52]	; 2ab70 <flatcc_builder_table_add@@Base+0x188>
   2ab38:	bl	14618 <__assert_fail@plt>
   2ab3c:	ldr	r3, [pc, #24]	; 2ab5c <flatcc_builder_table_add@@Base+0x174>
   2ab40:	ldr	r2, [pc, #44]	; 2ab74 <flatcc_builder_table_add@@Base+0x18c>
   2ab44:	ldr	r1, [pc, #24]	; 2ab64 <flatcc_builder_table_add@@Base+0x17c>
   2ab48:	ldr	r0, [pc, #40]	; 2ab78 <flatcc_builder_table_add@@Base+0x190>
   2ab4c:	bl	14618 <__assert_fail@plt>
   2ab50:	strdeq	r7, [r0], -ip
   2ab54:			; <UNDEFINED> instruction: 0x9e3779b1
   2ab58:	strdeq	pc, [r0], -ip
   2ab5c:	muleq	r4, r4, sp
   2ab60:	strdeq	r0, [r0], -r8
   2ab64:	andeq	r5, r4, r4, asr lr
   2ab68:	andeq	r5, r4, r4, lsl pc
   2ab6c:	andeq	r0, r0, lr, ror #13
   2ab70:			; <UNDEFINED> instruction: 0x000461b8
   2ab74:	andeq	r0, r0, sp, ror #13
   2ab78:	andeq	r6, r4, r0, lsr #2

0002ab7c <flatcc_builder_table_edit@@Base>:
   2ab7c:	ldr	r3, [r0, #32]
   2ab80:	ldrh	r3, [r3, #14]
   2ab84:	cmp	r3, #3
   2ab88:	bne	2aba0 <flatcc_builder_table_edit@@Base+0x24>
   2ab8c:	ldr	r3, [r0, #20]
   2ab90:	ldr	r0, [r0, #16]
   2ab94:	sub	r1, r3, r1
   2ab98:	add	r0, r0, r1
   2ab9c:	bx	lr
   2aba0:	push	{r4, lr}
   2aba4:	ldr	r3, [pc, #12]	; 2abb8 <flatcc_builder_table_edit@@Base+0x3c>
   2aba8:	ldr	r2, [pc, #12]	; 2abbc <flatcc_builder_table_edit@@Base+0x40>
   2abac:	ldr	r1, [pc, #12]	; 2abc0 <flatcc_builder_table_edit@@Base+0x44>
   2abb0:	ldr	r0, [pc, #12]	; 2abc4 <flatcc_builder_table_edit@@Base+0x48>
   2abb4:	bl	14618 <__assert_fail@plt>
   2abb8:			; <UNDEFINED> instruction: 0x00045db0
   2abbc:	andeq	r0, r0, r2, lsl #14
   2abc0:	andeq	r5, r4, r4, asr lr
   2abc4:	andeq	r6, r4, r0, lsr #2

0002abc8 <flatcc_builder_table_add_copy@@Base>:
   2abc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abcc:	mov	r4, r0
   2abd0:	ldr	r0, [r0, #32]
   2abd4:	mov	r7, r3
   2abd8:	sub	sp, sp, #12
   2abdc:	ldrh	r3, [r0, #14]
   2abe0:	ldrh	ip, [sp, #48]	; 0x30
   2abe4:	cmp	r3, #3
   2abe8:	bne	2ad44 <flatcc_builder_table_add_copy@@Base+0x17c>
   2abec:	ldr	r3, [pc, #356]	; 2ad58 <flatcc_builder_table_add_copy@@Base+0x190>
   2abf0:	cmp	r1, r3
   2abf4:	bhi	2ad30 <flatcc_builder_table_add_copy@@Base+0x168>
   2abf8:	ldrh	r3, [r4, #130]	; 0x82
   2abfc:	lsl	sl, r1, #1
   2ac00:	mov	r8, r2
   2ac04:	cmp	r3, ip
   2ac08:	ldr	r3, [r4, #4]
   2ac0c:	strhcc	ip, [r4, #130]	; 0x82
   2ac10:	add	r0, r3, sl
   2ac14:	ldrh	r5, [r3, sl]
   2ac18:	cmp	r5, #0
   2ac1c:	bne	2ad1c <flatcc_builder_table_add_copy@@Base+0x154>
   2ac20:	ldr	r2, [r4, #12]
   2ac24:	ldr	lr, [pc, #304]	; 2ad5c <flatcc_builder_table_add_copy@@Base+0x194>
   2ac28:	eor	r2, r2, r1
   2ac2c:	ldr	r6, [r4, #20]
   2ac30:	mul	r2, lr, r2
   2ac34:	sub	r3, ip, #1
   2ac38:	eor	r2, r2, r7
   2ac3c:	add	r3, r3, r6
   2ac40:	rsb	ip, ip, #0
   2ac44:	and	r6, r3, ip
   2ac48:	mul	lr, lr, r2
   2ac4c:	ldr	r3, [r4, #24]
   2ac50:	uxth	r9, r1
   2ac54:	add	r1, r7, r6
   2ac58:	cmp	r1, r3
   2ac5c:	str	lr, [r4, #12]
   2ac60:	str	r1, [r4, #20]
   2ac64:	bcs	2acac <flatcc_builder_table_add_copy@@Base+0xe4>
   2ac68:	ldr	r3, [r4, #16]
   2ac6c:	add	r2, r6, #4
   2ac70:	strh	r2, [r0]
   2ac74:	ldrh	r2, [r4, #8]
   2ac78:	cmp	r2, r9
   2ac7c:	addls	r9, r9, #1
   2ac80:	strhls	r9, [r4, #8]
   2ac84:	adds	r3, r3, r6
   2ac88:	beq	2aca0 <flatcc_builder_table_add_copy@@Base+0xd8>
   2ac8c:	mov	r0, r3
   2ac90:	mov	r2, r7
   2ac94:	mov	r1, r8
   2ac98:	bl	1454c <memcpy@plt>
   2ac9c:	mov	r3, r0
   2aca0:	mov	r0, r3
   2aca4:	add	sp, sp, #12
   2aca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acac:	ldr	r2, [r4, #28]
   2acb0:	mov	r3, #1
   2acb4:	add	r2, r2, #1
   2acb8:	ldr	r0, [r4, #40]	; 0x28
   2acbc:	add	r2, r2, r1
   2acc0:	str	r3, [sp]
   2acc4:	add	r1, r4, #60	; 0x3c
   2acc8:	ldr	fp, [r4, #48]	; 0x30
   2accc:	blx	fp
   2acd0:	cmp	r0, #0
   2acd4:	bne	2ad14 <flatcc_builder_table_add_copy@@Base+0x14c>
   2acd8:	ldr	r0, [r4, #28]
   2acdc:	ldr	r2, [r4, #64]	; 0x40
   2ace0:	ldr	r1, [pc, #120]	; 2ad60 <flatcc_builder_table_add_copy@@Base+0x198>
   2ace4:	ldr	r3, [r4, #60]	; 0x3c
   2ace8:	sub	r2, r2, r0
   2acec:	ldr	ip, [r4, #32]
   2acf0:	add	r3, r3, r0
   2acf4:	cmp	r2, r1
   2acf8:	ldr	r0, [r4, #4]
   2acfc:	movcs	r2, r1
   2ad00:	str	r3, [r4, #16]
   2ad04:	str	r2, [r4, #24]
   2ad08:	add	r0, r0, sl
   2ad0c:	str	r1, [ip, #4]
   2ad10:	b	2ac6c <flatcc_builder_table_add_copy@@Base+0xa4>
   2ad14:	mov	r3, r5
   2ad18:	b	2aca0 <flatcc_builder_table_add_copy@@Base+0xd8>
   2ad1c:	ldr	r3, [pc, #64]	; 2ad64 <flatcc_builder_table_add_copy@@Base+0x19c>
   2ad20:	ldr	r2, [pc, #64]	; 2ad68 <flatcc_builder_table_add_copy@@Base+0x1a0>
   2ad24:	ldr	r1, [pc, #64]	; 2ad6c <flatcc_builder_table_add_copy@@Base+0x1a4>
   2ad28:	ldr	r0, [pc, #64]	; 2ad70 <flatcc_builder_table_add_copy@@Base+0x1a8>
   2ad2c:	bl	14618 <__assert_fail@plt>
   2ad30:	ldr	r3, [pc, #44]	; 2ad64 <flatcc_builder_table_add_copy@@Base+0x19c>
   2ad34:	ldr	r2, [pc, #56]	; 2ad74 <flatcc_builder_table_add_copy@@Base+0x1ac>
   2ad38:	ldr	r1, [pc, #44]	; 2ad6c <flatcc_builder_table_add_copy@@Base+0x1a4>
   2ad3c:	ldr	r0, [pc, #52]	; 2ad78 <flatcc_builder_table_add_copy@@Base+0x1b0>
   2ad40:	bl	14618 <__assert_fail@plt>
   2ad44:	ldr	r3, [pc, #24]	; 2ad64 <flatcc_builder_table_add_copy@@Base+0x19c>
   2ad48:	ldr	r2, [pc, #44]	; 2ad7c <flatcc_builder_table_add_copy@@Base+0x1b4>
   2ad4c:	ldr	r1, [pc, #24]	; 2ad6c <flatcc_builder_table_add_copy@@Base+0x1a4>
   2ad50:	ldr	r0, [pc, #40]	; 2ad80 <flatcc_builder_table_add_copy@@Base+0x1b8>
   2ad54:	bl	14618 <__assert_fail@plt>
   2ad58:	strdeq	r7, [r0], -ip
   2ad5c:			; <UNDEFINED> instruction: 0x9e3779b1
   2ad60:	strdeq	pc, [r0], -ip
   2ad64:	muleq	r4, r4, sp
   2ad68:	strdeq	r0, [r0], -r8
   2ad6c:	andeq	r5, r4, r4, asr lr
   2ad70:	andeq	r5, r4, r4, lsl pc
   2ad74:	andeq	r0, r0, lr, ror #13
   2ad78:			; <UNDEFINED> instruction: 0x000461b8
   2ad7c:	andeq	r0, r0, sp, ror #13
   2ad80:	andeq	r6, r4, r0, lsr #2

0002ad84 <flatcc_builder_table_add_offset@@Base>:
   2ad84:	ldr	r3, [r0, #32]
   2ad88:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ad8c:	sub	sp, sp, #12
   2ad90:	ldrh	r3, [r3, #14]
   2ad94:	cmp	r3, #3
   2ad98:	bne	2aed4 <flatcc_builder_table_add_offset@@Base+0x150>
   2ad9c:	ldr	r3, [pc, #324]	; 2aee8 <flatcc_builder_table_add_offset@@Base+0x164>
   2ada0:	cmp	r1, r3
   2ada4:	bhi	2aec0 <flatcc_builder_table_add_offset@@Base+0x13c>
   2ada8:	ldr	r3, [r0, #4]
   2adac:	lsl	r7, r1, #1
   2adb0:	mov	r4, r0
   2adb4:	ldrh	r6, [r3, r7]
   2adb8:	add	ip, r3, r7
   2adbc:	cmp	r6, #0
   2adc0:	bne	2aeac <flatcc_builder_table_add_offset@@Base+0x128>
   2adc4:	ldr	r3, [r0, #12]
   2adc8:	ldr	r2, [pc, #284]	; 2aeec <flatcc_builder_table_add_offset@@Base+0x168>
   2adcc:	eor	r3, r3, r1
   2add0:	ldr	r5, [r0, #20]
   2add4:	mul	r3, r2, r3
   2add8:	add	r5, r5, #3
   2addc:	eor	r3, r3, #4
   2ade0:	ldr	r0, [r0, #24]
   2ade4:	mul	r3, r2, r3
   2ade8:	bic	r5, r5, #3
   2adec:	add	r2, r5, #4
   2adf0:	cmp	r2, r0
   2adf4:	uxth	r8, r1
   2adf8:	str	r3, [r4, #12]
   2adfc:	str	r2, [r4, #20]
   2ae00:	bhi	2ae40 <flatcc_builder_table_add_offset@@Base+0xbc>
   2ae04:	ldr	r0, [r4, #16]
   2ae08:	uxth	r2, r5
   2ae0c:	add	r3, r2, #4
   2ae10:	strh	r3, [ip]
   2ae14:	ldrh	r3, [r4, #8]
   2ae18:	add	r0, r0, r5
   2ae1c:	cmp	r3, r8
   2ae20:	ldr	r3, [r4]
   2ae24:	addls	r1, r8, #1
   2ae28:	strhls	r1, [r4, #8]
   2ae2c:	add	r1, r3, #2
   2ae30:	str	r1, [r4]
   2ae34:	strh	r2, [r3]
   2ae38:	add	sp, sp, #12
   2ae3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ae40:	ldr	r1, [r4, #28]
   2ae44:	mov	r3, #1
   2ae48:	ldr	r0, [r4, #40]	; 0x28
   2ae4c:	add	r2, r2, r1
   2ae50:	str	r3, [sp]
   2ae54:	add	r1, r4, #60	; 0x3c
   2ae58:	ldr	r9, [r4, #48]	; 0x30
   2ae5c:	blx	r9
   2ae60:	cmp	r0, #0
   2ae64:	bne	2aea4 <flatcc_builder_table_add_offset@@Base+0x120>
   2ae68:	ldr	r6, [r4, #28]
   2ae6c:	ldr	r3, [r4, #64]	; 0x40
   2ae70:	ldr	r2, [pc, #120]	; 2aef0 <flatcc_builder_table_add_offset@@Base+0x16c>
   2ae74:	sub	r3, r3, r6
   2ae78:	ldr	r0, [r4, #60]	; 0x3c
   2ae7c:	ldr	r1, [r4, #32]
   2ae80:	ldr	ip, [r4, #4]
   2ae84:	cmp	r3, r2
   2ae88:	add	r0, r0, r6
   2ae8c:	movcs	r3, r2
   2ae90:	str	r0, [r4, #16]
   2ae94:	str	r3, [r4, #24]
   2ae98:	add	ip, ip, r7
   2ae9c:	str	r2, [r1, #4]
   2aea0:	b	2ae08 <flatcc_builder_table_add_offset@@Base+0x84>
   2aea4:	mov	r0, r6
   2aea8:	b	2ae38 <flatcc_builder_table_add_offset@@Base+0xb4>
   2aeac:	ldr	r3, [pc, #64]	; 2aef4 <flatcc_builder_table_add_offset@@Base+0x170>
   2aeb0:	ldr	r2, [pc, #64]	; 2aef8 <flatcc_builder_table_add_offset@@Base+0x174>
   2aeb4:	ldr	r1, [pc, #64]	; 2aefc <flatcc_builder_table_add_offset@@Base+0x178>
   2aeb8:	ldr	r0, [pc, #64]	; 2af00 <flatcc_builder_table_add_offset@@Base+0x17c>
   2aebc:	bl	14618 <__assert_fail@plt>
   2aec0:	ldr	r3, [pc, #44]	; 2aef4 <flatcc_builder_table_add_offset@@Base+0x170>
   2aec4:	ldr	r2, [pc, #56]	; 2af04 <flatcc_builder_table_add_offset@@Base+0x180>
   2aec8:	ldr	r1, [pc, #44]	; 2aefc <flatcc_builder_table_add_offset@@Base+0x178>
   2aecc:	ldr	r0, [pc, #52]	; 2af08 <flatcc_builder_table_add_offset@@Base+0x184>
   2aed0:	bl	14618 <__assert_fail@plt>
   2aed4:	ldr	r3, [pc, #24]	; 2aef4 <flatcc_builder_table_add_offset@@Base+0x170>
   2aed8:	ldr	r2, [pc, #44]	; 2af0c <flatcc_builder_table_add_offset@@Base+0x188>
   2aedc:	ldr	r1, [pc, #24]	; 2aefc <flatcc_builder_table_add_offset@@Base+0x178>
   2aee0:	ldr	r0, [pc, #40]	; 2af10 <flatcc_builder_table_add_offset@@Base+0x18c>
   2aee4:	bl	14618 <__assert_fail@plt>
   2aee8:	strdeq	r7, [r0], -ip
   2aeec:			; <UNDEFINED> instruction: 0x9e3779b1
   2aef0:	strdeq	pc, [r0], -ip
   2aef4:	andeq	r5, r4, ip, asr #27
   2aef8:	andeq	r0, r0, fp, lsl r7
   2aefc:	andeq	r5, r4, r4, asr lr
   2af00:	andeq	r5, r4, r4, lsl pc
   2af04:	andeq	r0, r0, r4, lsl r7
   2af08:			; <UNDEFINED> instruction: 0x000461b8
   2af0c:	andeq	r0, r0, r3, lsl r7
   2af10:	andeq	r6, r4, r0, lsr #2

0002af14 <flatcc_builder_table_add_union@@Base>:
   2af14:	push	{r4, r5, r6, r7, r8, r9, lr}
   2af18:	sub	sp, sp, #20
   2af1c:	add	ip, sp, #16
   2af20:	stmdb	ip, {r2, r3}
   2af24:	ldr	r3, [r0, #32]
   2af28:	ldrb	r6, [sp, #8]
   2af2c:	ldr	r5, [sp, #12]
   2af30:	ldrh	r3, [r3, #14]
   2af34:	cmp	r3, #3
   2af38:	bne	2b0c4 <flatcc_builder_table_add_union@@Base+0x1b0>
   2af3c:	cmp	r6, #0
   2af40:	mov	r4, r0
   2af44:	mov	r7, r1
   2af48:	beq	2b018 <flatcc_builder_table_add_union@@Base+0x104>
   2af4c:	cmp	r5, #0
   2af50:	beq	2af74 <flatcc_builder_table_add_union@@Base+0x60>
   2af54:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   2af58:	cmp	r0, #0
   2af5c:	beq	2b100 <flatcc_builder_table_add_union@@Base+0x1ec>
   2af60:	ldr	r3, [r4, #32]
   2af64:	str	r5, [r0]
   2af68:	ldrh	r3, [r3, #14]
   2af6c:	cmp	r3, #3
   2af70:	bne	2b0d8 <flatcc_builder_table_add_union@@Base+0x1c4>
   2af74:	ldr	r3, [pc, #408]	; 2b114 <flatcc_builder_table_add_union@@Base+0x200>
   2af78:	sub	r1, r7, #1
   2af7c:	cmp	r1, r3
   2af80:	bhi	2b0ec <flatcc_builder_table_add_union@@Base+0x1d8>
   2af84:	ldrh	r3, [r4, #130]	; 0x82
   2af88:	lsl	r5, r1, #1
   2af8c:	cmp	r3, #0
   2af90:	moveq	r3, #1
   2af94:	strheq	r3, [r4, #130]	; 0x82
   2af98:	ldr	r3, [r4, #4]
   2af9c:	add	r0, r3, r5
   2afa0:	ldrh	r3, [r3, r5]
   2afa4:	cmp	r3, #0
   2afa8:	bne	2b0b0 <flatcc_builder_table_add_union@@Base+0x19c>
   2afac:	ldr	r3, [r4, #12]
   2afb0:	ldr	r2, [pc, #352]	; 2b118 <flatcc_builder_table_add_union@@Base+0x204>
   2afb4:	eor	r3, r3, r1
   2afb8:	ldr	r7, [r4, #20]
   2afbc:	mul	r3, r2, r3
   2afc0:	uxth	r8, r1
   2afc4:	eor	r3, r3, #1
   2afc8:	ldr	r1, [r4, #24]
   2afcc:	mul	r3, r2, r3
   2afd0:	add	r2, r7, #1
   2afd4:	cmp	r2, r1
   2afd8:	str	r3, [r4, #12]
   2afdc:	str	r2, [r4, #20]
   2afe0:	bcs	2b034 <flatcc_builder_table_add_union@@Base+0x120>
   2afe4:	ldr	r3, [r4, #16]
   2afe8:	add	r2, r7, #4
   2afec:	strh	r2, [r0]
   2aff0:	ldrh	r2, [r4, #8]
   2aff4:	cmp	r2, r8
   2aff8:	addls	r1, r8, #1
   2affc:	strhls	r1, [r4, #8]
   2b000:	cmn	r3, r7
   2b004:	beq	2b09c <flatcc_builder_table_add_union@@Base+0x188>
   2b008:	mov	r0, #0
   2b00c:	strb	r6, [r3, r7]
   2b010:	add	sp, sp, #20
   2b014:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b018:	cmp	r5, #0
   2b01c:	beq	2af74 <flatcc_builder_table_add_union@@Base+0x60>
   2b020:	ldr	r3, [pc, #244]	; 2b11c <flatcc_builder_table_add_union@@Base+0x208>
   2b024:	ldr	r2, [pc, #244]	; 2b120 <flatcc_builder_table_add_union@@Base+0x20c>
   2b028:	ldr	r1, [pc, #244]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b02c:	ldr	r0, [pc, #244]	; 2b128 <flatcc_builder_table_add_union@@Base+0x214>
   2b030:	bl	14618 <__assert_fail@plt>
   2b034:	ldr	r2, [r4, #28]
   2b038:	mov	r3, #1
   2b03c:	add	r2, r7, r2
   2b040:	ldr	r0, [r4, #40]	; 0x28
   2b044:	add	r2, r2, #2
   2b048:	str	r3, [sp]
   2b04c:	add	r1, r4, #60	; 0x3c
   2b050:	ldr	r9, [r4, #48]	; 0x30
   2b054:	blx	r9
   2b058:	cmp	r0, #0
   2b05c:	bne	2b09c <flatcc_builder_table_add_union@@Base+0x188>
   2b060:	ldr	r0, [r4, #28]
   2b064:	ldr	r2, [r4, #64]	; 0x40
   2b068:	ldr	r1, [pc, #188]	; 2b12c <flatcc_builder_table_add_union@@Base+0x218>
   2b06c:	ldr	r3, [r4, #60]	; 0x3c
   2b070:	sub	r2, r2, r0
   2b074:	ldr	ip, [r4, #32]
   2b078:	add	r3, r3, r0
   2b07c:	cmp	r2, r1
   2b080:	ldr	r0, [r4, #4]
   2b084:	movcs	r2, r1
   2b088:	str	r3, [r4, #16]
   2b08c:	str	r2, [r4, #24]
   2b090:	add	r0, r0, r5
   2b094:	str	r1, [ip, #4]
   2b098:	b	2afe8 <flatcc_builder_table_add_union@@Base+0xd4>
   2b09c:	ldr	r3, [pc, #120]	; 2b11c <flatcc_builder_table_add_union@@Base+0x208>
   2b0a0:	ldr	r2, [pc, #136]	; 2b130 <flatcc_builder_table_add_union@@Base+0x21c>
   2b0a4:	ldr	r1, [pc, #120]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b0a8:	ldr	r0, [pc, #132]	; 2b134 <flatcc_builder_table_add_union@@Base+0x220>
   2b0ac:	bl	14618 <__assert_fail@plt>
   2b0b0:	ldr	r3, [pc, #128]	; 2b138 <flatcc_builder_table_add_union@@Base+0x224>
   2b0b4:	ldr	r2, [pc, #128]	; 2b13c <flatcc_builder_table_add_union@@Base+0x228>
   2b0b8:	ldr	r1, [pc, #100]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b0bc:	ldr	r0, [pc, #124]	; 2b140 <flatcc_builder_table_add_union@@Base+0x22c>
   2b0c0:	bl	14618 <__assert_fail@plt>
   2b0c4:	ldr	r3, [pc, #80]	; 2b11c <flatcc_builder_table_add_union@@Base+0x208>
   2b0c8:	ldr	r2, [pc, #116]	; 2b144 <flatcc_builder_table_add_union@@Base+0x230>
   2b0cc:	ldr	r1, [pc, #80]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b0d0:	ldr	r0, [pc, #112]	; 2b148 <flatcc_builder_table_add_union@@Base+0x234>
   2b0d4:	bl	14618 <__assert_fail@plt>
   2b0d8:	ldr	r3, [pc, #88]	; 2b138 <flatcc_builder_table_add_union@@Base+0x224>
   2b0dc:	ldr	r2, [pc, #104]	; 2b14c <flatcc_builder_table_add_union@@Base+0x238>
   2b0e0:	ldr	r1, [pc, #60]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b0e4:	ldr	r0, [pc, #92]	; 2b148 <flatcc_builder_table_add_union@@Base+0x234>
   2b0e8:	bl	14618 <__assert_fail@plt>
   2b0ec:	ldr	r3, [pc, #68]	; 2b138 <flatcc_builder_table_add_union@@Base+0x224>
   2b0f0:	ldr	r2, [pc, #88]	; 2b150 <flatcc_builder_table_add_union@@Base+0x23c>
   2b0f4:	ldr	r1, [pc, #40]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b0f8:	ldr	r0, [pc, #84]	; 2b154 <flatcc_builder_table_add_union@@Base+0x240>
   2b0fc:	bl	14618 <__assert_fail@plt>
   2b100:	ldr	r3, [pc, #20]	; 2b11c <flatcc_builder_table_add_union@@Base+0x208>
   2b104:	ldr	r2, [pc, #76]	; 2b158 <flatcc_builder_table_add_union@@Base+0x244>
   2b108:	ldr	r1, [pc, #20]	; 2b124 <flatcc_builder_table_add_union@@Base+0x210>
   2b10c:	ldr	r0, [pc, #72]	; 2b15c <flatcc_builder_table_add_union@@Base+0x248>
   2b110:	bl	14618 <__assert_fail@plt>
   2b114:	strdeq	r7, [r0], -ip
   2b118:			; <UNDEFINED> instruction: 0x9e3779b1
   2b11c:	andeq	r5, r4, ip, ror #27
   2b120:	andeq	r0, r0, pc, ror #11
   2b124:	andeq	r5, r4, r4, asr lr
   2b128:	strdeq	r6, [r4], -ip
   2b12c:	strdeq	pc, [r0], -ip
   2b130:	strdeq	r0, [r0], -r6
   2b134:	andeq	r6, r4, ip, lsr #4
   2b138:	muleq	r4, r4, sp
   2b13c:	strdeq	r0, [r0], -r8
   2b140:	andeq	r5, r4, r4, lsl pc
   2b144:	andeq	r0, r0, lr, ror #11
   2b148:	andeq	r6, r4, r0, lsr #2
   2b14c:	andeq	r0, r0, sp, ror #13
   2b150:	andeq	r0, r0, lr, ror #13
   2b154:			; <UNDEFINED> instruction: 0x000461b8
   2b158:	strdeq	r0, [r0], -r2
   2b15c:	andeq	r6, r4, r0, lsr #4

0002b160 <flatcc_builder_table_add_union_vector@@Base>:
   2b160:	push	{r4, r5, r6, r7, lr}
   2b164:	sub	sp, sp, #12
   2b168:	add	ip, sp, #8
   2b16c:	stmdb	ip, {r2, r3}
   2b170:	ldr	r3, [r0, #32]
   2b174:	ldr	r4, [sp]
   2b178:	ldr	r6, [sp, #4]
   2b17c:	ldrh	r3, [r3, #14]
   2b180:	cmp	r3, #3
   2b184:	bne	2b214 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   2b188:	clz	r3, r6
   2b18c:	clz	r2, r4
   2b190:	lsr	r3, r3, #5
   2b194:	lsr	r2, r2, #5
   2b198:	cmp	r2, r3
   2b19c:	beq	2b1bc <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2b1a0:	adds	r4, r4, #0
   2b1a4:	movne	r4, #1
   2b1a8:	cmp	r4, r3
   2b1ac:	mvnne	r0, #0
   2b1b0:	beq	2b228 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   2b1b4:	add	sp, sp, #12
   2b1b8:	pop	{r4, r5, r6, r7, pc}
   2b1bc:	cmp	r4, #0
   2b1c0:	moveq	r0, r4
   2b1c4:	beq	2b1b4 <flatcc_builder_table_add_union_vector@@Base+0x54>
   2b1c8:	mov	r7, r1
   2b1cc:	sub	r1, r1, #1
   2b1d0:	mov	r5, r0
   2b1d4:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   2b1d8:	cmp	r0, #0
   2b1dc:	beq	2b23c <flatcc_builder_table_add_union_vector@@Base+0xdc>
   2b1e0:	str	r4, [r0]
   2b1e4:	mov	r1, r7
   2b1e8:	mov	r0, r5
   2b1ec:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   2b1f0:	cmp	r0, #0
   2b1f4:	strne	r6, [r0]
   2b1f8:	movne	r0, #0
   2b1fc:	bne	2b1b4 <flatcc_builder_table_add_union_vector@@Base+0x54>
   2b200:	ldr	r3, [pc, #72]	; 2b250 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2b204:	ldr	r2, [pc, #72]	; 2b254 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   2b208:	ldr	r1, [pc, #72]	; 2b258 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2b20c:	ldr	r0, [pc, #72]	; 2b25c <flatcc_builder_table_add_union_vector@@Base+0xfc>
   2b210:	bl	14618 <__assert_fail@plt>
   2b214:	ldr	r3, [pc, #52]	; 2b250 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2b218:	mov	r2, #1536	; 0x600
   2b21c:	ldr	r1, [pc, #52]	; 2b258 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2b220:	ldr	r0, [pc, #56]	; 2b260 <flatcc_builder_table_add_union_vector@@Base+0x100>
   2b224:	bl	14618 <__assert_fail@plt>
   2b228:	ldr	r3, [pc, #32]	; 2b250 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2b22c:	ldr	r2, [pc, #48]	; 2b264 <flatcc_builder_table_add_union_vector@@Base+0x104>
   2b230:	ldr	r1, [pc, #32]	; 2b258 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2b234:	ldr	r0, [pc, #44]	; 2b268 <flatcc_builder_table_add_union_vector@@Base+0x108>
   2b238:	bl	14618 <__assert_fail@plt>
   2b23c:	ldr	r3, [pc, #12]	; 2b250 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2b240:	ldr	r2, [pc, #36]	; 2b26c <flatcc_builder_table_add_union_vector@@Base+0x10c>
   2b244:	ldr	r1, [pc, #12]	; 2b258 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2b248:	ldr	r0, [pc, #12]	; 2b25c <flatcc_builder_table_add_union_vector@@Base+0xfc>
   2b24c:	bl	14618 <__assert_fail@plt>
   2b250:	andeq	r5, r4, ip, lsl #28
   2b254:	andeq	r0, r0, r8, lsl #12
   2b258:	andeq	r5, r4, r4, asr lr
   2b25c:	andeq	r6, r4, r0, lsr #4
   2b260:	andeq	r6, r4, r0, lsr #2
   2b264:	andeq	r0, r0, r1, lsl #12
   2b268:	andeq	r6, r4, r8, lsr r2
   2b26c:	andeq	r0, r0, r4, lsl #12

0002b270 <flatcc_builder_push_buffer_alignment@@Base>:
   2b270:	mov	r3, r0
   2b274:	mov	r2, #4
   2b278:	ldrh	r0, [r0, #128]	; 0x80
   2b27c:	strh	r2, [r3, #128]	; 0x80
   2b280:	bx	lr

0002b284 <flatcc_builder_pop_buffer_alignment@@Base>:
   2b284:	ldrh	r3, [r0, #128]	; 0x80
   2b288:	cmp	r3, r1
   2b28c:	strhcc	r1, [r0, #128]	; 0x80
   2b290:	bx	lr

0002b294 <flatcc_builder_get_buffer_alignment@@Base>:
   2b294:	ldrh	r0, [r0, #128]	; 0x80
   2b298:	bx	lr

0002b29c <flatcc_builder_set_vtable_clustering@@Base>:
   2b29c:	clz	r1, r1
   2b2a0:	lsr	r1, r1, #5
   2b2a4:	str	r1, [r0, #180]	; 0xb4
   2b2a8:	bx	lr

0002b2ac <flatcc_builder_set_block_align@@Base>:
   2b2ac:	strh	r1, [r0, #132]	; 0x84
   2b2b0:	bx	lr

0002b2b4 <flatcc_builder_get_level@@Base>:
   2b2b4:	ldr	r0, [r0, #156]	; 0x9c
   2b2b8:	bx	lr

0002b2bc <flatcc_builder_set_max_level@@Base>:
   2b2bc:	ldr	r3, [r0, #160]	; 0xa0
   2b2c0:	str	r1, [r0, #176]	; 0xb0
   2b2c4:	cmp	r1, r3
   2b2c8:	strgt	r1, [r0, #160]	; 0xa0
   2b2cc:	bx	lr

0002b2d0 <flatcc_builder_get_buffer_size@@Base>:
   2b2d0:	ldr	r2, [r0, #140]	; 0x8c
   2b2d4:	ldr	r0, [r0, #136]	; 0x88
   2b2d8:	sub	r0, r2, r0
   2b2dc:	bx	lr

0002b2e0 <flatcc_builder_get_buffer_start@@Base>:
   2b2e0:	ldr	r0, [r0, #136]	; 0x88
   2b2e4:	bx	lr

0002b2e8 <flatcc_builder_get_buffer_end@@Base>:
   2b2e8:	ldr	r0, [r0, #140]	; 0x8c
   2b2ec:	bx	lr

0002b2f0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   2b2f0:	str	r1, [r0, #172]	; 0xac
   2b2f4:	bx	lr

0002b2f8 <flatcc_builder_set_identifier@@Base>:
   2b2f8:	ldr	r3, [pc, #16]	; 2b310 <flatcc_builder_set_identifier@@Base+0x18>
   2b2fc:	cmp	r1, #0
   2b300:	moveq	r1, r3
   2b304:	ldr	r3, [r1]
   2b308:	str	r3, [r0, #168]	; 0xa8
   2b30c:	bx	lr
   2b310:	muleq	r4, ip, r7

0002b314 <flatcc_builder_get_type@@Base>:
   2b314:	ldr	r0, [r0, #32]
   2b318:	cmp	r0, #0
   2b31c:	ldrhne	r0, [r0, #14]
   2b320:	bx	lr

0002b324 <flatcc_builder_get_type_at@@Base>:
   2b324:	cmp	r1, #0
   2b328:	ble	2b350 <flatcc_builder_get_type_at@@Base+0x2c>
   2b32c:	ldr	r3, [r0, #156]	; 0x9c
   2b330:	cmp	r1, r3
   2b334:	bgt	2b350 <flatcc_builder_get_type_at@@Base+0x2c>
   2b338:	sub	r1, r1, r3
   2b33c:	ldr	r3, [r0, #32]
   2b340:	add	r1, r1, r1, lsl #3
   2b344:	add	r1, r3, r1, lsl #2
   2b348:	ldrh	r0, [r1, #14]
   2b34c:	bx	lr
   2b350:	mov	r0, #0
   2b354:	bx	lr

0002b358 <flatcc_builder_get_direct_buffer@@Base>:
   2b358:	ldr	r3, [r0, #184]	; 0xb8
   2b35c:	cmp	r3, #0
   2b360:	beq	2b374 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   2b364:	ldr	r2, [r0, #188]	; 0xbc
   2b368:	ldr	r3, [r0, #192]	; 0xc0
   2b36c:	cmp	r2, r3
   2b370:	beq	2b388 <flatcc_builder_get_direct_buffer@@Base+0x30>
   2b374:	cmp	r1, #0
   2b378:	movne	r0, #0
   2b37c:	strne	r0, [r1]
   2b380:	moveq	r0, r1
   2b384:	bx	lr
   2b388:	cmp	r1, #0
   2b38c:	ldrne	r3, [r0, #212]	; 0xd4
   2b390:	ldr	r0, [r0, #196]	; 0xc4
   2b394:	strne	r3, [r1]
   2b398:	bx	lr

0002b39c <flatcc_builder_copy_buffer@@Base>:
   2b39c:	ldr	r3, [r0, #184]	; 0xb8
   2b3a0:	cmp	r3, #0
   2b3a4:	beq	2b3c0 <flatcc_builder_copy_buffer@@Base+0x24>
   2b3a8:	push	{r4, lr}
   2b3ac:	add	r0, r0, #188	; 0xbc
   2b3b0:	bl	2ba74 <flatcc_emitter_copy_buffer@@Base>
   2b3b4:	cmp	r0, #0
   2b3b8:	popne	{r4, pc}
   2b3bc:	bl	14884 <__assert_fail@plt+0x26c>
   2b3c0:	mov	r0, r3
   2b3c4:	bx	lr

0002b3c8 <flatcc_builder_finalize_buffer@@Base>:
   2b3c8:	push	{r4, r5, r6, lr}
   2b3cc:	cmp	r1, #0
   2b3d0:	ldr	r4, [r0, #140]	; 0x8c
   2b3d4:	ldr	r2, [r0, #136]	; 0x88
   2b3d8:	mov	r5, r0
   2b3dc:	sub	r4, r4, r2
   2b3e0:	strne	r4, [r1]
   2b3e4:	mov	r0, r4
   2b3e8:	bl	1457c <malloc@plt>
   2b3ec:	subs	r6, r0, #0
   2b3f0:	beq	2b434 <flatcc_builder_finalize_buffer@@Base+0x6c>
   2b3f4:	ldr	r3, [r5, #184]	; 0xb8
   2b3f8:	cmp	r3, #0
   2b3fc:	beq	2b420 <flatcc_builder_finalize_buffer@@Base+0x58>
   2b400:	mov	r2, r4
   2b404:	add	r0, r5, #188	; 0xbc
   2b408:	mov	r1, r6
   2b40c:	bl	2ba74 <flatcc_emitter_copy_buffer@@Base>
   2b410:	cmp	r0, #0
   2b414:	beq	2b448 <flatcc_builder_finalize_buffer@@Base+0x80>
   2b418:	mov	r0, r6
   2b41c:	pop	{r4, r5, r6, pc}
   2b420:	ldr	r3, [pc, #36]	; 2b44c <flatcc_builder_finalize_buffer@@Base+0x84>
   2b424:	ldr	r2, [pc, #36]	; 2b450 <flatcc_builder_finalize_buffer@@Base+0x88>
   2b428:	ldr	r1, [pc, #36]	; 2b454 <flatcc_builder_finalize_buffer@@Base+0x8c>
   2b42c:	ldr	r0, [pc, #36]	; 2b458 <flatcc_builder_finalize_buffer@@Base+0x90>
   2b430:	bl	14618 <__assert_fail@plt>
   2b434:	ldr	r3, [pc, #16]	; 2b44c <flatcc_builder_finalize_buffer@@Base+0x84>
   2b438:	ldr	r2, [pc, #28]	; 2b45c <flatcc_builder_finalize_buffer@@Base+0x94>
   2b43c:	ldr	r1, [pc, #16]	; 2b454 <flatcc_builder_finalize_buffer@@Base+0x8c>
   2b440:	ldr	r0, [pc, #16]	; 2b458 <flatcc_builder_finalize_buffer@@Base+0x90>
   2b444:	bl	14618 <__assert_fail@plt>
   2b448:	bl	14884 <__assert_fail@plt+0x26c>
   2b44c:	andeq	r5, r4, r4, lsr lr
   2b450:	muleq	r0, ip, r7
   2b454:	andeq	r5, r4, r4, asr lr
   2b458:	andeq	r5, r4, r4, lsl pc
   2b45c:	muleq	r0, r8, r7

0002b460 <flatcc_builder_finalize_aligned_buffer@@Base>:
   2b460:	push	{r4, r5, r6, r7, lr}
   2b464:	subs	r7, r1, #0
   2b468:	ldrh	r1, [r0, #128]	; 0x80
   2b46c:	ldr	r4, [r0, #140]	; 0x8c
   2b470:	ldr	r3, [r0, #136]	; 0x88
   2b474:	sub	sp, sp, #12
   2b478:	sub	r3, r4, r3
   2b47c:	sub	r4, r1, #1
   2b480:	strne	r3, [r7]
   2b484:	add	r4, r4, r3
   2b488:	mov	r5, r0
   2b48c:	rsb	r3, r1, #0
   2b490:	add	r0, sp, #8
   2b494:	cmp	r1, #4
   2b498:	mov	ip, #0
   2b49c:	and	r4, r4, r3
   2b4a0:	movcc	r1, #4
   2b4a4:	mov	r2, r4
   2b4a8:	str	ip, [r0, #-4]!
   2b4ac:	bl	145b8 <posix_memalign@plt>
   2b4b0:	cmp	r0, #0
   2b4b4:	beq	2b4e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   2b4b8:	ldr	r0, [sp, #4]
   2b4bc:	cmp	r0, #0
   2b4c0:	beq	2b4c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   2b4c4:	bl	14540 <free@plt>
   2b4c8:	cmp	r7, #0
   2b4cc:	moveq	r6, r7
   2b4d0:	movne	r6, #0
   2b4d4:	strne	r6, [r7]
   2b4d8:	mov	r0, r6
   2b4dc:	add	sp, sp, #12
   2b4e0:	pop	{r4, r5, r6, r7, pc}
   2b4e4:	ldr	r6, [sp, #4]
   2b4e8:	cmp	r6, #0
   2b4ec:	beq	2b4c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   2b4f0:	ldr	r3, [r5, #184]	; 0xb8
   2b4f4:	cmp	r3, #0
   2b4f8:	beq	2b518 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   2b4fc:	mov	r2, r4
   2b500:	add	r0, r5, #188	; 0xbc
   2b504:	mov	r1, r6
   2b508:	bl	2ba74 <flatcc_emitter_copy_buffer@@Base>
   2b50c:	cmp	r0, #0
   2b510:	bne	2b4d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   2b514:	bl	14884 <__assert_fail@plt+0x26c>
   2b518:	mov	r0, r6
   2b51c:	b	2b4c4 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

0002b520 <flatcc_builder_aligned_alloc@@Base>:
   2b520:	push	{r4, lr}
   2b524:	sub	sp, sp, #8
   2b528:	add	r3, sp, #8
   2b52c:	cmp	r0, #4
   2b530:	mov	r4, #0
   2b534:	mov	r2, r1
   2b538:	str	r4, [r3, #-4]!
   2b53c:	movcs	r1, r0
   2b540:	movcc	r1, #4
   2b544:	mov	r0, r3
   2b548:	bl	145b8 <posix_memalign@plt>
   2b54c:	cmp	r0, r4
   2b550:	ldr	r0, [sp, #4]
   2b554:	beq	2b568 <flatcc_builder_aligned_alloc@@Base+0x48>
   2b558:	cmp	r0, #0
   2b55c:	beq	2b568 <flatcc_builder_aligned_alloc@@Base+0x48>
   2b560:	bl	14540 <free@plt>
   2b564:	mov	r0, r4
   2b568:	add	sp, sp, #8
   2b56c:	pop	{r4, pc}

0002b570 <flatcc_builder_aligned_free@@Base>:
   2b570:	b	14540 <free@plt>

0002b574 <flatcc_builder_get_emit_context@@Base>:
   2b574:	ldr	r0, [r0, #36]	; 0x24
   2b578:	bx	lr

0002b57c <flatcc_emitter_recycle_page@@Base>:
   2b57c:	ldr	r3, [r0]
   2b580:	cmp	r3, r1
   2b584:	beq	2b5cc <flatcc_emitter_recycle_page@@Base+0x50>
   2b588:	ldr	r2, [r0, #4]
   2b58c:	cmp	r1, r2
   2b590:	beq	2b5cc <flatcc_emitter_recycle_page@@Base+0x50>
   2b594:	ldr	ip, [r1, #2944]	; 0xb80
   2b598:	ldr	r2, [r1, #2948]	; 0xb84
   2b59c:	push	{lr}		; (str lr, [sp, #-4]!)
   2b5a0:	mov	r0, #0
   2b5a4:	str	r2, [ip, #2948]	; 0xb84
   2b5a8:	ldr	r2, [r3, #2948]	; 0xb84
   2b5ac:	ldr	lr, [r1, #2948]	; 0xb84
   2b5b0:	str	ip, [lr, #2944]	; 0xb80
   2b5b4:	str	r3, [r1, #2944]	; 0xb80
   2b5b8:	str	r2, [r1, #2948]	; 0xb84
   2b5bc:	str	r1, [r2, #2944]	; 0xb80
   2b5c0:	ldr	r3, [r1, #2944]	; 0xb80
   2b5c4:	str	r1, [r3, #2948]	; 0xb84
   2b5c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b5cc:	mvn	r0, #0
   2b5d0:	bx	lr

0002b5d4 <flatcc_emitter_reset@@Base>:
   2b5d4:	ldr	r2, [r0]
   2b5d8:	cmp	r2, #0
   2b5dc:	bxeq	lr
   2b5e0:	ldr	r3, [r0, #32]
   2b5e4:	mov	r1, #1472	; 0x5c0
   2b5e8:	push	{r4, lr}
   2b5ec:	cmp	r3, #0
   2b5f0:	str	r1, [r0, #12]
   2b5f4:	str	r1, [r0, #20]
   2b5f8:	ldr	r1, [r0, #24]
   2b5fc:	add	ip, r2, #1472	; 0x5c0
   2b600:	moveq	r3, r1
   2b604:	stmib	r0, {r2, ip}
   2b608:	str	ip, [r0, #16]
   2b60c:	add	ip, r3, r3, lsl #1
   2b610:	lsr	r3, r1, #2
   2b614:	add	r3, r3, ip, lsr #2
   2b618:	ldr	ip, [r0, #28]
   2b61c:	ldr	lr, [pc, #104]	; 2b68c <flatcc_emitter_reset@@Base+0xb8>
   2b620:	cmp	ip, r3, lsl #1
   2b624:	mov	r1, #0
   2b628:	str	lr, [r2, #2952]	; 0xb88
   2b62c:	str	r3, [r0, #32]
   2b630:	str	r1, [r0, #24]
   2b634:	popls	{r4, pc}
   2b638:	ldr	r3, [r2, #2944]	; 0xb80
   2b63c:	mov	r4, r0
   2b640:	cmp	r2, r3
   2b644:	popeq	{r4, pc}
   2b648:	ldr	r1, [r3, #2944]	; 0xb80
   2b64c:	mov	r0, r3
   2b650:	str	r1, [r2, #2944]	; 0xb80
   2b654:	ldr	r3, [r3, #2944]	; 0xb80
   2b658:	str	r2, [r3, #2948]	; 0xb84
   2b65c:	bl	14540 <free@plt>
   2b660:	ldr	r3, [r4, #28]
   2b664:	ldr	r2, [r4, #32]
   2b668:	sub	r3, r3, #2944	; 0xb80
   2b66c:	str	r3, [r4, #28]
   2b670:	cmp	r3, r2, lsl #1
   2b674:	popls	{r4, pc}
   2b678:	ldm	r4, {r1, r2}
   2b67c:	ldr	r3, [r2, #2944]	; 0xb80
   2b680:	cmp	r3, r1
   2b684:	bne	2b648 <flatcc_emitter_reset@@Base+0x74>
   2b688:	pop	{r4, pc}
   2b68c:			; <UNDEFINED> instruction: 0xfffffa40

0002b690 <flatcc_emitter_clear@@Base>:
   2b690:	ldr	r3, [r0]
   2b694:	cmp	r3, #0
   2b698:	bxeq	lr
   2b69c:	ldr	r2, [r3, #2948]	; 0xb84
   2b6a0:	mov	r1, #0
   2b6a4:	push	{r4, r5, r6, lr}
   2b6a8:	mov	r5, r0
   2b6ac:	str	r1, [r2, #2944]	; 0xb80
   2b6b0:	ldr	r4, [r3, #2944]	; 0xb80
   2b6b4:	cmp	r4, r1
   2b6b8:	bne	2b6c4 <flatcc_emitter_clear@@Base+0x34>
   2b6bc:	b	2b6f4 <flatcc_emitter_clear@@Base+0x64>
   2b6c0:	mov	r4, r3
   2b6c4:	ldr	r0, [r4, #2948]	; 0xb84
   2b6c8:	bl	14540 <free@plt>
   2b6cc:	ldr	r3, [r4, #2944]	; 0xb80
   2b6d0:	cmp	r3, #0
   2b6d4:	bne	2b6c0 <flatcc_emitter_clear@@Base+0x30>
   2b6d8:	mov	r0, r4
   2b6dc:	bl	14540 <free@plt>
   2b6e0:	mov	r0, r5
   2b6e4:	mov	r2, #36	; 0x24
   2b6e8:	mov	r1, #0
   2b6ec:	pop	{r4, r5, r6, lr}
   2b6f0:	b	145c4 <memset@plt>
   2b6f4:	mov	r4, r3
   2b6f8:	b	2b6d8 <flatcc_emitter_clear@@Base+0x48>

0002b6fc <flatcc_emitter@@Base>:
   2b6fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b700:	sub	sp, sp, #12
   2b704:	mov	r5, r0
   2b708:	ldr	ip, [sp, #48]	; 0x30
   2b70c:	ldr	r0, [r0, #24]
   2b710:	cmp	r3, #0
   2b714:	add	r0, r0, ip
   2b718:	str	r0, [r5, #24]
   2b71c:	blt	2b8e4 <flatcc_emitter@@Base+0x1e8>
   2b720:	ldr	r0, [r5, #20]
   2b724:	cmp	ip, r0
   2b728:	bls	2b7b8 <flatcc_emitter@@Base+0xbc>
   2b72c:	cmp	r2, #0
   2b730:	addne	r7, r1, #8
   2b734:	movne	r8, r2
   2b738:	movne	r9, #2944	; 0xb80
   2b73c:	beq	2b7ac <flatcc_emitter@@Base+0xb0>
   2b740:	ldr	r6, [r7, #-4]
   2b744:	ldr	sl, [r7, #-8]
   2b748:	cmp	r6, #0
   2b74c:	movne	r4, r0
   2b750:	beq	2b7a0 <flatcc_emitter@@Base+0xa4>
   2b754:	cmp	r6, r4
   2b758:	bls	2b800 <flatcc_emitter@@Base+0x104>
   2b75c:	cmp	r4, #0
   2b760:	beq	2b80c <flatcc_emitter@@Base+0x110>
   2b764:	sub	r6, r6, r4
   2b768:	mov	r2, r4
   2b76c:	mov	r1, sl
   2b770:	ldr	r0, [r5, #16]
   2b774:	bl	1454c <memcpy@plt>
   2b778:	ldr	r0, [r5, #20]
   2b77c:	ldr	r3, [r5, #16]
   2b780:	add	sl, sl, r4
   2b784:	add	r3, r3, r4
   2b788:	cmp	r6, #0
   2b78c:	sub	r4, r0, r4
   2b790:	str	r3, [r5, #16]
   2b794:	str	r4, [r5, #20]
   2b798:	mov	r0, r4
   2b79c:	bne	2b754 <flatcc_emitter@@Base+0x58>
   2b7a0:	subs	r8, r8, #1
   2b7a4:	add	r7, r7, #8
   2b7a8:	bne	2b740 <flatcc_emitter@@Base+0x44>
   2b7ac:	mov	r0, #0
   2b7b0:	add	sp, sp, #12
   2b7b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7b8:	ldr	r3, [r5, #16]
   2b7bc:	sub	r0, r0, ip
   2b7c0:	add	ip, r3, ip
   2b7c4:	str	r0, [r5, #20]
   2b7c8:	str	ip, [r5, #16]
   2b7cc:	cmp	r2, #0
   2b7d0:	addne	r4, r1, #8
   2b7d4:	movne	r7, r2
   2b7d8:	beq	2b7ac <flatcc_emitter@@Base+0xb0>
   2b7dc:	ldmdb	r4, {r1, r2}
   2b7e0:	mov	r0, r3
   2b7e4:	bl	1454c <memcpy@plt>
   2b7e8:	ldr	r2, [r4, #-4]
   2b7ec:	subs	r7, r7, #1
   2b7f0:	add	r4, r4, #8
   2b7f4:	add	r3, r0, r2
   2b7f8:	bne	2b7dc <flatcc_emitter@@Base+0xe0>
   2b7fc:	b	2b7ac <flatcc_emitter@@Base+0xb0>
   2b800:	mov	r4, r6
   2b804:	mov	r6, #0
   2b808:	b	2b768 <flatcc_emitter@@Base+0x6c>
   2b80c:	ldr	r4, [r5, #4]
   2b810:	cmp	r4, #0
   2b814:	beq	2b884 <flatcc_emitter@@Base+0x188>
   2b818:	ldr	fp, [r4, #2944]	; 0xb80
   2b81c:	ldr	r3, [r5]
   2b820:	cmp	fp, r3
   2b824:	beq	2b84c <flatcc_emitter@@Base+0x150>
   2b828:	str	fp, [r5, #4]
   2b82c:	ldr	r3, [fp, #2948]	; 0xb84
   2b830:	mov	r4, #2944	; 0xb80
   2b834:	str	fp, [r5, #16]
   2b838:	ldr	r3, [r3, #2952]	; 0xb88
   2b83c:	str	r9, [r5, #20]
   2b840:	add	r3, r3, r4
   2b844:	str	r3, [fp, #2952]	; 0xb88
   2b848:	b	2b754 <flatcc_emitter@@Base+0x58>
   2b84c:	ldr	r0, [pc, #540]	; 2ba70 <flatcc_emitter@@Base+0x374>
   2b850:	bl	1457c <malloc@plt>
   2b854:	cmp	r0, #0
   2b858:	beq	2b894 <flatcc_emitter@@Base+0x198>
   2b85c:	ldr	r3, [r5, #28]
   2b860:	str	fp, [r0, #2944]	; 0xb80
   2b864:	add	r3, r3, #2944	; 0xb80
   2b868:	str	r4, [r0, #2948]	; 0xb84
   2b86c:	str	r3, [r5, #28]
   2b870:	str	r0, [fp, #2948]	; 0xb84
   2b874:	str	r0, [r4, #2944]	; 0xb80
   2b878:	mov	fp, r0
   2b87c:	str	r0, [r5, #4]
   2b880:	b	2b82c <flatcc_emitter@@Base+0x130>
   2b884:	ldr	r0, [pc, #484]	; 2ba70 <flatcc_emitter@@Base+0x374>
   2b888:	bl	1457c <malloc@plt>
   2b88c:	cmp	r0, #0
   2b890:	bne	2b8a0 <flatcc_emitter@@Base+0x1a4>
   2b894:	mvn	r0, #0
   2b898:	add	sp, sp, #12
   2b89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8a0:	mov	r2, #1472	; 0x5c0
   2b8a4:	ldr	r3, [r5, #28]
   2b8a8:	str	r2, [r5, #12]
   2b8ac:	str	r2, [r5, #20]
   2b8b0:	sub	r2, r2, #2944	; 0xb80
   2b8b4:	str	r2, [r0, #2952]	; 0xb88
   2b8b8:	str	r0, [r5]
   2b8bc:	add	r3, r3, #2944	; 0xb80
   2b8c0:	str	r0, [r5, #4]
   2b8c4:	str	r0, [r0, #2944]	; 0xb80
   2b8c8:	str	r0, [r0, #2948]	; 0xb84
   2b8cc:	add	r0, r0, #1472	; 0x5c0
   2b8d0:	str	r0, [r5, #8]
   2b8d4:	str	r0, [r5, #16]
   2b8d8:	str	r3, [r5, #28]
   2b8dc:	mov	r4, #1472	; 0x5c0
   2b8e0:	b	2b754 <flatcc_emitter@@Base+0x58>
   2b8e4:	ldr	r0, [r5, #12]
   2b8e8:	cmp	ip, r0
   2b8ec:	bls	2b96c <flatcc_emitter@@Base+0x270>
   2b8f0:	add	r6, r1, r2, lsl #3
   2b8f4:	mov	r7, r2
   2b8f8:	mov	r9, #2944	; 0xb80
   2b8fc:	mov	r8, #0
   2b900:	cmp	r7, #0
   2b904:	beq	2b7ac <flatcc_emitter@@Base+0xb0>
   2b908:	ldr	r4, [r6, #-4]
   2b90c:	ldr	sl, [r6, #-8]
   2b910:	cmp	r4, #0
   2b914:	add	sl, sl, r4
   2b918:	beq	2b960 <flatcc_emitter@@Base+0x264>
   2b91c:	ldr	r2, [r5, #12]
   2b920:	cmp	r2, r4
   2b924:	bcs	2b984 <flatcc_emitter@@Base+0x288>
   2b928:	cmp	r2, #0
   2b92c:	beq	2b994 <flatcc_emitter@@Base+0x298>
   2b930:	sub	r4, r4, r2
   2b934:	mov	r1, r8
   2b938:	ldr	r0, [r5, #8]
   2b93c:	rsb	r3, r2, #0
   2b940:	add	r0, r0, r3
   2b944:	add	sl, sl, r3
   2b948:	str	r1, [r5, #12]
   2b94c:	str	r0, [r5, #8]
   2b950:	mov	r1, sl
   2b954:	bl	1454c <memcpy@plt>
   2b958:	cmp	r4, #0
   2b95c:	bne	2b91c <flatcc_emitter@@Base+0x220>
   2b960:	sub	r6, r6, #8
   2b964:	sub	r7, r7, #1
   2b968:	b	2b900 <flatcc_emitter@@Base+0x204>
   2b96c:	ldr	r3, [r5, #8]
   2b970:	sub	r0, r0, ip
   2b974:	sub	r3, r3, ip
   2b978:	str	r0, [r5, #12]
   2b97c:	str	r3, [r5, #8]
   2b980:	b	2b7cc <flatcc_emitter@@Base+0xd0>
   2b984:	sub	r1, r2, r4
   2b988:	mov	r2, r4
   2b98c:	mov	r4, #0
   2b990:	b	2b938 <flatcc_emitter@@Base+0x23c>
   2b994:	ldr	r3, [r5]
   2b998:	cmp	r3, #0
   2b99c:	beq	2ba20 <flatcc_emitter@@Base+0x324>
   2b9a0:	ldr	fp, [r3, #2948]	; 0xb84
   2b9a4:	ldr	r2, [r5, #4]
   2b9a8:	cmp	fp, r2
   2b9ac:	beq	2b9e0 <flatcc_emitter@@Base+0x2e4>
   2b9b0:	ldr	r3, [r3, #2952]	; 0xb88
   2b9b4:	sub	r3, r3, #2944	; 0xb80
   2b9b8:	str	r3, [fp, #2952]	; 0xb88
   2b9bc:	str	fp, [r5]
   2b9c0:	ldr	r3, [fp, #2944]	; 0xb80
   2b9c4:	add	r2, fp, #2944	; 0xb80
   2b9c8:	str	r9, [r5, #12]
   2b9cc:	ldr	r3, [r3, #2952]	; 0xb88
   2b9d0:	str	r2, [r5, #8]
   2b9d4:	sub	r3, r3, #2944	; 0xb80
   2b9d8:	str	r3, [fp, #2952]	; 0xb88
   2b9dc:	b	2b91c <flatcc_emitter@@Base+0x220>
   2b9e0:	ldr	r0, [pc, #136]	; 2ba70 <flatcc_emitter@@Base+0x374>
   2b9e4:	str	r3, [sp, #4]
   2b9e8:	bl	1457c <malloc@plt>
   2b9ec:	ldr	r3, [sp, #4]
   2b9f0:	cmp	r0, #0
   2b9f4:	beq	2b894 <flatcc_emitter@@Base+0x198>
   2b9f8:	ldr	r2, [r5, #28]
   2b9fc:	str	fp, [r0, #2948]	; 0xb84
   2ba00:	add	r2, r2, #2944	; 0xb80
   2ba04:	str	r3, [r0, #2944]	; 0xb80
   2ba08:	str	r2, [r5, #28]
   2ba0c:	str	r0, [r3, #2948]	; 0xb84
   2ba10:	str	r0, [fp, #2944]	; 0xb80
   2ba14:	str	r0, [r5]
   2ba18:	mov	fp, r0
   2ba1c:	b	2b9c0 <flatcc_emitter@@Base+0x2c4>
   2ba20:	ldr	r0, [pc, #72]	; 2ba70 <flatcc_emitter@@Base+0x374>
   2ba24:	bl	1457c <malloc@plt>
   2ba28:	cmp	r0, #0
   2ba2c:	beq	2b894 <flatcc_emitter@@Base+0x198>
   2ba30:	mov	r2, #1472	; 0x5c0
   2ba34:	ldr	r3, [r5, #28]
   2ba38:	str	r2, [r5, #12]
   2ba3c:	str	r2, [r5, #20]
   2ba40:	sub	r2, r2, #2944	; 0xb80
   2ba44:	str	r2, [r0, #2952]	; 0xb88
   2ba48:	str	r0, [r5]
   2ba4c:	add	r3, r3, #2944	; 0xb80
   2ba50:	str	r0, [r5, #4]
   2ba54:	str	r0, [r0, #2944]	; 0xb80
   2ba58:	str	r0, [r0, #2948]	; 0xb84
   2ba5c:	add	r0, r0, #1472	; 0x5c0
   2ba60:	str	r0, [r5, #8]
   2ba64:	str	r0, [r5, #16]
   2ba68:	str	r3, [r5, #28]
   2ba6c:	b	2b91c <flatcc_emitter@@Base+0x220>
   2ba70:	andeq	r0, r0, ip, lsl #23

0002ba74 <flatcc_emitter_copy_buffer@@Base>:
   2ba74:	ldr	ip, [r0, #24]
   2ba78:	cmp	ip, r2
   2ba7c:	bhi	2bb18 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2ba80:	ldr	r2, [r0]
   2ba84:	cmp	r2, #0
   2ba88:	beq	2bb18 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2ba8c:	mov	r3, r1
   2ba90:	ldr	r1, [r0, #4]
   2ba94:	push	{r4, r5, r6, lr}
   2ba98:	cmp	r2, r1
   2ba9c:	mov	r5, r0
   2baa0:	beq	2bb24 <flatcc_emitter_copy_buffer@@Base+0xb0>
   2baa4:	ldr	r4, [r0, #12]
   2baa8:	ldr	r1, [r5, #8]
   2baac:	rsb	r4, r4, #2944	; 0xb80
   2bab0:	mov	r2, r4
   2bab4:	mov	r0, r3
   2bab8:	bl	1454c <memcpy@plt>
   2babc:	ldr	r2, [r5]
   2bac0:	ldr	r1, [r5, #4]
   2bac4:	add	r3, r0, r4
   2bac8:	ldr	r4, [r2, #2944]	; 0xb80
   2bacc:	cmp	r4, r1
   2bad0:	beq	2bafc <flatcc_emitter_copy_buffer@@Base+0x88>
   2bad4:	mov	r6, #2944	; 0xb80
   2bad8:	mov	r1, r4
   2badc:	mov	r0, r3
   2bae0:	mov	r2, r6
   2bae4:	bl	1454c <memcpy@plt>
   2bae8:	ldr	r4, [r4, #2944]	; 0xb80
   2baec:	ldr	r1, [r5, #4]
   2baf0:	cmp	r1, r4
   2baf4:	add	r3, r0, #2944	; 0xb80
   2baf8:	bne	2bad8 <flatcc_emitter_copy_buffer@@Base+0x64>
   2bafc:	ldr	r2, [r5, #20]
   2bb00:	mov	r0, r3
   2bb04:	rsb	r2, r2, #2944	; 0xb80
   2bb08:	bl	1454c <memcpy@plt>
   2bb0c:	mov	r3, r0
   2bb10:	mov	r0, r3
   2bb14:	pop	{r4, r5, r6, pc}
   2bb18:	mov	r3, #0
   2bb1c:	mov	r0, r3
   2bb20:	bx	lr
   2bb24:	ldr	r1, [r0, #8]
   2bb28:	mov	r2, ip
   2bb2c:	mov	r0, r3
   2bb30:	bl	1454c <memcpy@plt>
   2bb34:	mov	r3, r0
   2bb38:	b	2bb10 <flatcc_emitter_copy_buffer@@Base+0x9c>

0002bb3c <flatcc_verify_error_string@@Base>:
   2bb3c:	cmp	r0, #36	; 0x24
   2bb40:	ldrls	r3, [pc, #8]	; 2bb50 <flatcc_verify_error_string@@Base+0x14>
   2bb44:	ldrls	r0, [r3, r0, lsl #2]
   2bb48:	ldrhi	r0, [pc, #4]	; 2bb54 <flatcc_verify_error_string@@Base+0x18>
   2bb4c:	bx	lr
   2bb50:	andeq	r6, r4, r0, ror #4
   2bb54:	strdeq	r6, [r4], -r4

0002bb58 <flatcc_verify_field@@Base>:
   2bb58:	add	r1, r1, #2
   2bb5c:	ldrh	ip, [r0, #22]
   2bb60:	lsl	r1, r1, #1
   2bb64:	uxth	r1, r1
   2bb68:	cmp	ip, r1
   2bb6c:	bls	2bba0 <flatcc_verify_field@@Base+0x48>
   2bb70:	ldr	ip, [r0, #12]
   2bb74:	ldrh	r1, [ip, r1]
   2bb78:	cmp	r1, #0
   2bb7c:	beq	2bba0 <flatcc_verify_field@@Base+0x48>
   2bb80:	push	{lr}		; (str lr, [sp, #-4]!)
   2bb84:	add	r2, r2, r1
   2bb88:	ldrh	lr, [r0, #20]
   2bb8c:	ldr	ip, [r0]
   2bb90:	cmp	r2, lr
   2bb94:	bls	2bba8 <flatcc_verify_field@@Base+0x50>
   2bb98:	mov	r0, #13
   2bb9c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bba0:	mov	r0, #0
   2bba4:	bx	lr
   2bba8:	ldr	r0, [r0, #16]
   2bbac:	sub	r3, r3, #1
   2bbb0:	add	r0, ip, r0
   2bbb4:	add	r0, r0, r1
   2bbb8:	tst	r0, r3
   2bbbc:	moveq	r0, #0
   2bbc0:	movne	r0, #12
   2bbc4:	pop	{pc}		; (ldr pc, [sp], #4)

0002bbc8 <flatcc_verify_string_field@@Base>:
   2bbc8:	add	r1, r1, #2
   2bbcc:	ldrh	r3, [r0, #22]
   2bbd0:	lsl	r1, r1, #1
   2bbd4:	uxth	r1, r1
   2bbd8:	cmp	r3, r1
   2bbdc:	bls	2bc08 <flatcc_verify_string_field@@Base+0x40>
   2bbe0:	ldr	r3, [r0, #12]
   2bbe4:	ldrh	r3, [r3, r1]
   2bbe8:	cmp	r3, #0
   2bbec:	beq	2bc08 <flatcc_verify_string_field@@Base+0x40>
   2bbf0:	ldrh	r2, [r0, #20]
   2bbf4:	add	r1, r3, #4
   2bbf8:	cmp	r1, r2
   2bbfc:	bls	2bc18 <flatcc_verify_string_field@@Base+0x50>
   2bc00:	mov	r0, #13
   2bc04:	bx	lr
   2bc08:	cmp	r2, #0
   2bc0c:	movne	r0, #4
   2bc10:	moveq	r0, #0
   2bc14:	bx	lr
   2bc18:	ldr	r2, [r0, #16]
   2bc1c:	add	r2, r3, r2
   2bc20:	tst	r2, #3
   2bc24:	beq	2bc30 <flatcc_verify_string_field@@Base+0x68>
   2bc28:	mov	r0, #12
   2bc2c:	bx	lr
   2bc30:	cmp	r2, #0
   2bc34:	beq	2bc88 <flatcc_verify_string_field@@Base+0xc0>
   2bc38:	ldr	r1, [r0]
   2bc3c:	ldr	r3, [r1, r2]
   2bc40:	add	r3, r2, r3
   2bc44:	cmp	r2, r3
   2bc48:	bcs	2bc80 <flatcc_verify_string_field@@Base+0xb8>
   2bc4c:	ldr	r2, [r0, #4]
   2bc50:	add	r0, r3, #4
   2bc54:	cmp	r2, r0
   2bc58:	bcc	2bc80 <flatcc_verify_string_field@@Base+0xb8>
   2bc5c:	tst	r3, #3
   2bc60:	bne	2bc80 <flatcc_verify_string_field@@Base+0xb8>
   2bc64:	ldr	r3, [r1, r3]
   2bc68:	sub	r2, r2, r0
   2bc6c:	add	ip, r3, #1
   2bc70:	cmp	r2, ip
   2bc74:	bcs	2bc90 <flatcc_verify_string_field@@Base+0xc8>
   2bc78:	mov	r0, #8
   2bc7c:	bx	lr
   2bc80:	mov	r0, #17
   2bc84:	bx	lr
   2bc88:	mov	r0, r2
   2bc8c:	bx	lr
   2bc90:	add	r1, r1, r0
   2bc94:	ldrb	r0, [r1, r3]
   2bc98:	cmp	r0, #0
   2bc9c:	movne	r0, #7
   2bca0:	moveq	r0, #0
   2bca4:	bx	lr

0002bca8 <flatcc_verify_vector_field@@Base>:
   2bca8:	add	r1, r1, #2
   2bcac:	ldrh	ip, [r0, #22]
   2bcb0:	lsl	r1, r1, #1
   2bcb4:	push	{lr}		; (str lr, [sp, #-4]!)
   2bcb8:	uxth	r1, r1
   2bcbc:	cmp	ip, r1
   2bcc0:	ldrh	ip, [sp, #4]
   2bcc4:	bls	2bcf0 <flatcc_verify_vector_field@@Base+0x48>
   2bcc8:	ldr	lr, [r0, #12]
   2bccc:	ldrh	r1, [lr, r1]
   2bcd0:	cmp	r1, #0
   2bcd4:	beq	2bcf0 <flatcc_verify_vector_field@@Base+0x48>
   2bcd8:	ldrh	r2, [r0, #20]
   2bcdc:	add	lr, r1, #4
   2bce0:	cmp	lr, r2
   2bce4:	bls	2bd00 <flatcc_verify_vector_field@@Base+0x58>
   2bce8:	mov	r0, #13
   2bcec:	pop	{pc}		; (ldr pc, [sp], #4)
   2bcf0:	cmp	r2, #0
   2bcf4:	movne	r0, #4
   2bcf8:	moveq	r0, #0
   2bcfc:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd00:	ldr	r2, [r0, #16]
   2bd04:	add	r2, r1, r2
   2bd08:	tst	r2, #3
   2bd0c:	beq	2bd18 <flatcc_verify_vector_field@@Base+0x70>
   2bd10:	mov	r0, #12
   2bd14:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd18:	cmp	r2, #0
   2bd1c:	beq	2bd7c <flatcc_verify_vector_field@@Base+0xd4>
   2bd20:	ldr	lr, [r0]
   2bd24:	ldr	r1, [lr, r2]
   2bd28:	add	r1, r2, r1
   2bd2c:	cmp	r1, r2
   2bd30:	bls	2bd74 <flatcc_verify_vector_field@@Base+0xcc>
   2bd34:	ldr	r2, [r0, #4]
   2bd38:	add	r0, r1, #4
   2bd3c:	cmp	r2, r0
   2bd40:	bcc	2bd74 <flatcc_verify_vector_field@@Base+0xcc>
   2bd44:	cmp	ip, #4
   2bd48:	movcc	ip, #4
   2bd4c:	sub	ip, ip, #1
   2bd50:	orr	ip, ip, #3
   2bd54:	tst	ip, r0
   2bd58:	bne	2bd74 <flatcc_verify_vector_field@@Base+0xcc>
   2bd5c:	ldr	r1, [lr, r1]
   2bd60:	ldr	ip, [sp, #8]
   2bd64:	cmp	ip, r1
   2bd68:	bcs	2bd84 <flatcc_verify_vector_field@@Base+0xdc>
   2bd6c:	mov	r0, #25
   2bd70:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd74:	mov	r0, #16
   2bd78:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd7c:	mov	r0, r2
   2bd80:	pop	{pc}		; (ldr pc, [sp], #4)
   2bd84:	mul	r3, r1, r3
   2bd88:	sub	r2, r2, r0
   2bd8c:	cmp	r2, r3
   2bd90:	movcc	r0, #26
   2bd94:	movcs	r0, #0
   2bd98:	pop	{pc}		; (ldr pc, [sp], #4)

0002bd9c <flatcc_verify_string_vector_field@@Base>:
   2bd9c:	add	r1, r1, #2
   2bda0:	ldrh	r3, [r0, #22]
   2bda4:	lsl	r1, r1, #1
   2bda8:	uxth	r1, r1
   2bdac:	cmp	r3, r1
   2bdb0:	bls	2bddc <flatcc_verify_string_vector_field@@Base+0x40>
   2bdb4:	ldr	r3, [r0, #12]
   2bdb8:	ldrh	r3, [r3, r1]
   2bdbc:	cmp	r3, #0
   2bdc0:	beq	2bddc <flatcc_verify_string_vector_field@@Base+0x40>
   2bdc4:	ldrh	r2, [r0, #20]
   2bdc8:	add	r1, r3, #4
   2bdcc:	cmp	r1, r2
   2bdd0:	bls	2bdec <flatcc_verify_string_vector_field@@Base+0x50>
   2bdd4:	mov	r0, #13
   2bdd8:	bx	lr
   2bddc:	cmp	r2, #0
   2bde0:	movne	r0, #4
   2bde4:	moveq	r0, #0
   2bde8:	bx	lr
   2bdec:	ldr	r2, [r0, #16]
   2bdf0:	add	r2, r3, r2
   2bdf4:	tst	r2, #3
   2bdf8:	beq	2be04 <flatcc_verify_string_vector_field@@Base+0x68>
   2bdfc:	mov	r0, #12
   2be00:	bx	lr
   2be04:	cmp	r2, #0
   2be08:	beq	2bec8 <flatcc_verify_string_vector_field@@Base+0x12c>
   2be0c:	push	{r4, r5, r6, lr}
   2be10:	ldr	lr, [r0]
   2be14:	ldr	r1, [lr, r2]
   2be18:	add	r1, r2, r1
   2be1c:	cmp	r2, r1
   2be20:	bcs	2be5c <flatcc_verify_string_vector_field@@Base+0xc0>
   2be24:	ldr	r5, [r0, #4]
   2be28:	add	r3, r1, #4
   2be2c:	cmp	r5, r3
   2be30:	bcc	2be5c <flatcc_verify_string_vector_field@@Base+0xc0>
   2be34:	tst	r3, #3
   2be38:	bne	2be5c <flatcc_verify_string_vector_field@@Base+0xc0>
   2be3c:	ldr	r0, [lr, r1]
   2be40:	cmn	r0, #-1073741823	; 0xc0000001
   2be44:	bls	2be64 <flatcc_verify_string_vector_field@@Base+0xc8>
   2be48:	ldr	r2, [lr, r1]
   2be4c:	cmn	r2, #-1073741823	; 0xc0000001
   2be50:	bls	2bed0 <flatcc_verify_string_vector_field@@Base+0x134>
   2be54:	mov	r0, #25
   2be58:	pop	{r4, r5, r6, pc}
   2be5c:	mov	r0, #16
   2be60:	pop	{r4, r5, r6, pc}
   2be64:	lsl	r4, r0, #2
   2be68:	sub	r2, r5, r3
   2be6c:	cmp	r2, r4
   2be70:	bcc	2be48 <flatcc_verify_string_vector_field@@Base+0xac>
   2be74:	cmp	r0, #0
   2be78:	popeq	{r4, r5, r6, pc}
   2be7c:	ldr	r2, [lr, r3]
   2be80:	add	ip, lr, r3
   2be84:	add	r2, r3, r2
   2be88:	cmp	r3, r2
   2be8c:	bcs	2bec0 <flatcc_verify_string_vector_field@@Base+0x124>
   2be90:	add	r1, r2, #4
   2be94:	cmp	r5, r1
   2be98:	bcc	2bec0 <flatcc_verify_string_vector_field@@Base+0x124>
   2be9c:	tst	r2, #3
   2bea0:	bne	2bec0 <flatcc_verify_string_vector_field@@Base+0x124>
   2bea4:	ldr	r2, [lr, r2]
   2bea8:	sub	r0, r5, r1
   2beac:	add	r6, r2, #1
   2beb0:	cmp	r6, r0
   2beb4:	bls	2bee4 <flatcc_verify_string_vector_field@@Base+0x148>
   2beb8:	mov	r0, #8
   2bebc:	pop	{r4, r5, r6, pc}
   2bec0:	mov	r0, #17
   2bec4:	pop	{r4, r5, r6, pc}
   2bec8:	mov	r0, r2
   2becc:	bx	lr
   2bed0:	sub	r3, r5, r3
   2bed4:	cmp	r3, r2, lsl #2
   2bed8:	movcs	r0, #0
   2bedc:	movcc	r0, #26
   2bee0:	pop	{r4, r5, r6, pc}
   2bee4:	add	r4, r3, r4
   2bee8:	add	r1, lr, r1
   2beec:	ldrb	r0, [r1, r2]
   2bef0:	cmp	r0, #0
   2bef4:	beq	2bf00 <flatcc_verify_string_vector_field@@Base+0x164>
   2bef8:	mov	r0, #7
   2befc:	pop	{r4, r5, r6, pc}
   2bf00:	add	r3, r3, #4
   2bf04:	cmp	r4, r3
   2bf08:	beq	2bf4c <flatcc_verify_string_vector_field@@Base+0x1b0>
   2bf0c:	ldr	r2, [ip, #4]!
   2bf10:	add	r2, r3, r2
   2bf14:	cmp	r3, r2
   2bf18:	add	r1, r2, #4
   2bf1c:	bcs	2bec0 <flatcc_verify_string_vector_field@@Base+0x124>
   2bf20:	cmp	r5, r1
   2bf24:	bcc	2bec0 <flatcc_verify_string_vector_field@@Base+0x124>
   2bf28:	tst	r2, #3
   2bf2c:	sub	r6, r5, r1
   2bf30:	bne	2bec0 <flatcc_verify_string_vector_field@@Base+0x124>
   2bf34:	ldr	r2, [lr, r2]
   2bf38:	add	r0, r2, #1
   2bf3c:	cmp	r6, r0
   2bf40:	bcs	2bee8 <flatcc_verify_string_vector_field@@Base+0x14c>
   2bf44:	mov	r0, #8
   2bf48:	pop	{r4, r5, r6, pc}
   2bf4c:	pop	{r4, r5, r6, pc}

0002bf50 <flatcc_verify_table_field@@Base>:
   2bf50:	add	r1, r1, #2
   2bf54:	ldrh	ip, [r0, #22]
   2bf58:	lsl	r1, r1, #1
   2bf5c:	uxth	r1, r1
   2bf60:	cmp	ip, r1
   2bf64:	bls	2bf90 <flatcc_verify_table_field@@Base+0x40>
   2bf68:	ldr	ip, [r0, #12]
   2bf6c:	ldrh	r1, [ip, r1]
   2bf70:	cmp	r1, #0
   2bf74:	beq	2bf90 <flatcc_verify_table_field@@Base+0x40>
   2bf78:	ldrh	r2, [r0, #20]
   2bf7c:	add	ip, r1, #4
   2bf80:	cmp	ip, r2
   2bf84:	bls	2bfa0 <flatcc_verify_table_field@@Base+0x50>
   2bf88:	mov	r0, #13
   2bf8c:	bx	lr
   2bf90:	cmp	r2, #0
   2bf94:	movne	r0, #4
   2bf98:	moveq	r0, #0
   2bf9c:	bx	lr
   2bfa0:	ldr	r2, [r0, #16]
   2bfa4:	add	r2, r1, r2
   2bfa8:	tst	r2, #3
   2bfac:	beq	2bfb8 <flatcc_verify_table_field@@Base+0x68>
   2bfb0:	mov	r0, #12
   2bfb4:	bx	lr
   2bfb8:	cmp	r2, #0
   2bfbc:	beq	2bff4 <flatcc_verify_table_field@@Base+0xa4>
   2bfc0:	ldr	r1, [r0, #8]
   2bfc4:	ldr	ip, [r0]
   2bfc8:	push	{r4, r5, lr}
   2bfcc:	sub	r1, r1, #1
   2bfd0:	sub	sp, sp, #28
   2bfd4:	cmp	r1, #0
   2bfd8:	ldr	lr, [r0, #4]
   2bfdc:	ldr	r0, [ip, r2]
   2bfe0:	str	r1, [sp, #8]
   2bfe4:	moveq	r0, #3
   2bfe8:	bne	2bffc <flatcc_verify_table_field@@Base+0xac>
   2bfec:	add	sp, sp, #28
   2bff0:	pop	{r4, r5, pc}
   2bff4:	mov	r0, r2
   2bff8:	bx	lr
   2bffc:	add	r1, r0, r2
   2c000:	cmp	r2, r1
   2c004:	bcs	2c09c <flatcc_verify_table_field@@Base+0x14c>
   2c008:	add	r2, r1, #4
   2c00c:	cmp	lr, r2
   2c010:	bcc	2c09c <flatcc_verify_table_field@@Base+0x14c>
   2c014:	tst	r1, #3
   2c018:	bne	2c09c <flatcc_verify_table_field@@Base+0x14c>
   2c01c:	str	r1, [sp, #16]
   2c020:	ldr	r2, [ip, r1]
   2c024:	subs	r2, r1, r2
   2c028:	bmi	2c0a4 <flatcc_verify_table_field@@Base+0x154>
   2c02c:	tst	r2, #1
   2c030:	bne	2c0a4 <flatcc_verify_table_field@@Base+0x154>
   2c034:	add	r0, r2, #2
   2c038:	cmp	lr, r0
   2c03c:	movcc	r0, #27
   2c040:	bcc	2bfec <flatcc_verify_table_field@@Base+0x9c>
   2c044:	ldrh	r4, [ip, r2]
   2c048:	add	r5, ip, r2
   2c04c:	add	r2, r4, r2
   2c050:	cmp	lr, r2
   2c054:	strh	r4, [sp, #22]
   2c058:	bcc	2c0ac <flatcc_verify_table_field@@Base+0x15c>
   2c05c:	tst	r4, #1
   2c060:	bne	2c0ac <flatcc_verify_table_field@@Base+0x15c>
   2c064:	cmp	r4, #3
   2c068:	movls	r0, #28
   2c06c:	bls	2bfec <flatcc_verify_table_field@@Base+0x9c>
   2c070:	ldrh	r2, [ip, r0]
   2c074:	sub	r1, lr, r1
   2c078:	cmp	r1, r2
   2c07c:	strh	r2, [sp, #20]
   2c080:	movcc	r0, #20
   2c084:	bcc	2bfec <flatcc_verify_table_field@@Base+0x9c>
   2c088:	mov	r0, sp
   2c08c:	str	r5, [sp, #12]
   2c090:	stm	sp, {ip, lr}
   2c094:	blx	r3
   2c098:	b	2bfec <flatcc_verify_table_field@@Base+0x9c>
   2c09c:	mov	r0, #15
   2c0a0:	b	2bfec <flatcc_verify_table_field@@Base+0x9c>
   2c0a4:	mov	r0, #29
   2c0a8:	b	2bfec <flatcc_verify_table_field@@Base+0x9c>
   2c0ac:	mov	r0, #30
   2c0b0:	b	2bfec <flatcc_verify_table_field@@Base+0x9c>

0002c0b4 <flatcc_verify_table_vector_field@@Base>:
   2c0b4:	add	r1, r1, #2
   2c0b8:	ldrh	ip, [r0, #22]
   2c0bc:	lsl	r1, r1, #1
   2c0c0:	uxth	r1, r1
   2c0c4:	cmp	ip, r1
   2c0c8:	bls	2c0f4 <flatcc_verify_table_vector_field@@Base+0x40>
   2c0cc:	ldr	ip, [r0, #12]
   2c0d0:	ldrh	r1, [ip, r1]
   2c0d4:	cmp	r1, #0
   2c0d8:	beq	2c0f4 <flatcc_verify_table_vector_field@@Base+0x40>
   2c0dc:	ldrh	r2, [r0, #20]
   2c0e0:	add	ip, r1, #4
   2c0e4:	cmp	ip, r2
   2c0e8:	bls	2c10c <flatcc_verify_table_vector_field@@Base+0x58>
   2c0ec:	mov	r0, #13
   2c0f0:	bx	lr
   2c0f4:	cmp	r2, #0
   2c0f8:	beq	2c104 <flatcc_verify_table_vector_field@@Base+0x50>
   2c0fc:	mov	r0, #4
   2c100:	bx	lr
   2c104:	mov	r0, #0
   2c108:	bx	lr
   2c10c:	ldr	r2, [r0, #16]
   2c110:	add	r1, r1, r2
   2c114:	tst	r1, #3
   2c118:	beq	2c124 <flatcc_verify_table_vector_field@@Base+0x70>
   2c11c:	mov	r0, #12
   2c120:	bx	lr
   2c124:	cmp	r1, #0
   2c128:	beq	2c104 <flatcc_verify_table_vector_field@@Base+0x50>
   2c12c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c130:	sub	sp, sp, #32
   2c134:	ldr	r7, [r0, #8]
   2c138:	cmp	r7, #0
   2c13c:	ble	2c1b0 <flatcc_verify_table_vector_field@@Base+0xfc>
   2c140:	ldr	r8, [r0]
   2c144:	ldr	ip, [r8, r1]
   2c148:	add	ip, r1, ip
   2c14c:	cmp	r1, ip
   2c150:	bcs	2c1a4 <flatcc_verify_table_vector_field@@Base+0xf0>
   2c154:	ldr	r9, [r0, #4]
   2c158:	add	r4, ip, #4
   2c15c:	cmp	r9, r4
   2c160:	bcc	2c1a4 <flatcc_verify_table_vector_field@@Base+0xf0>
   2c164:	tst	r4, #3
   2c168:	bne	2c1a4 <flatcc_verify_table_vector_field@@Base+0xf0>
   2c16c:	ldr	r2, [r8, ip]
   2c170:	cmn	r2, #-1073741823	; 0xc0000001
   2c174:	bls	2c1bc <flatcc_verify_table_vector_field@@Base+0x108>
   2c178:	ldr	r3, [r8, ip]
   2c17c:	cmn	r3, #-1073741823	; 0xc0000001
   2c180:	movhi	r0, #25
   2c184:	bhi	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c188:	sub	r4, r9, r4
   2c18c:	cmp	r4, r3, lsl #2
   2c190:	movcc	r0, #26
   2c194:	bcc	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c198:	mov	r0, #0
   2c19c:	add	sp, sp, #32
   2c1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c1a4:	mov	r0, #16
   2c1a8:	add	sp, sp, #32
   2c1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c1b0:	mov	r0, #3
   2c1b4:	add	sp, sp, #32
   2c1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c1bc:	lsl	r6, r2, #2
   2c1c0:	sub	r1, r9, r4
   2c1c4:	cmp	r1, r6
   2c1c8:	bcc	2c178 <flatcc_verify_table_vector_field@@Base+0xc4>
   2c1cc:	cmp	r2, #0
   2c1d0:	beq	2c198 <flatcc_verify_table_vector_field@@Base+0xe4>
   2c1d4:	sub	r7, r7, #2
   2c1d8:	cmp	r7, #0
   2c1dc:	ldr	r2, [r8, r4]
   2c1e0:	add	r1, r8, r4
   2c1e4:	str	r7, [sp, #16]
   2c1e8:	beq	2c1b0 <flatcc_verify_table_vector_field@@Base+0xfc>
   2c1ec:	add	r2, r4, r2
   2c1f0:	cmp	r2, r4
   2c1f4:	bls	2c380 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2c1f8:	add	r0, r2, #4
   2c1fc:	cmp	r9, r0
   2c200:	bcc	2c380 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2c204:	tst	r2, #3
   2c208:	bne	2c380 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2c20c:	add	ip, ip, #8
   2c210:	add	r5, r8, ip
   2c214:	mov	sl, r1
   2c218:	add	r6, r4, r6
   2c21c:	str	r2, [sp, #24]
   2c220:	ldr	r1, [r8, r2]
   2c224:	subs	r1, r2, r1
   2c228:	bmi	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c22c:	tst	r1, #1
   2c230:	beq	2c2e0 <flatcc_verify_table_vector_field@@Base+0x22c>
   2c234:	ldr	r2, [sl]
   2c238:	str	r7, [sp, #16]
   2c23c:	add	r2, r4, r2
   2c240:	cmp	r2, r4
   2c244:	bls	2c38c <flatcc_verify_table_vector_field@@Base+0x2d8>
   2c248:	add	r1, r2, #4
   2c24c:	cmp	r9, r1
   2c250:	bcc	2c38c <flatcc_verify_table_vector_field@@Base+0x2d8>
   2c254:	tst	r2, #3
   2c258:	bne	2c38c <flatcc_verify_table_vector_field@@Base+0x2d8>
   2c25c:	str	r2, [sp, #24]
   2c260:	ldr	r1, [r8, r2]
   2c264:	subs	r1, r2, r1
   2c268:	bmi	2c394 <flatcc_verify_table_vector_field@@Base+0x2e0>
   2c26c:	tst	r1, #1
   2c270:	bne	2c394 <flatcc_verify_table_vector_field@@Base+0x2e0>
   2c274:	add	ip, r1, #2
   2c278:	cmp	r9, ip
   2c27c:	movcc	r0, #27
   2c280:	bcc	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c284:	ldrh	r0, [r8, r1]
   2c288:	add	lr, r8, r1
   2c28c:	add	r1, r0, r1
   2c290:	cmp	r9, r1
   2c294:	strh	r0, [sp, #30]
   2c298:	bcc	2c39c <flatcc_verify_table_vector_field@@Base+0x2e8>
   2c29c:	tst	r0, #1
   2c2a0:	bne	2c39c <flatcc_verify_table_vector_field@@Base+0x2e8>
   2c2a4:	cmp	r0, #3
   2c2a8:	movls	r0, #28
   2c2ac:	bls	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c2b0:	ldrh	r1, [r8, ip]
   2c2b4:	sub	r2, r9, r2
   2c2b8:	cmp	r2, r1
   2c2bc:	strh	r1, [sp, #28]
   2c2c0:	movcc	r0, #20
   2c2c4:	bcc	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c2c8:	add	r0, sp, #8
   2c2cc:	str	lr, [sp, #20]
   2c2d0:	str	r8, [sp, #8]
   2c2d4:	str	r9, [sp, #12]
   2c2d8:	blx	r3
   2c2dc:	b	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c2e0:	add	r0, r1, #2
   2c2e4:	cmp	r9, r0
   2c2e8:	bcc	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c2ec:	ldrh	lr, [r8, r1]
   2c2f0:	add	ip, r8, r1
   2c2f4:	add	r1, lr, r1
   2c2f8:	cmp	r9, r1
   2c2fc:	strh	lr, [sp, #30]
   2c300:	bcc	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c304:	tst	lr, #1
   2c308:	bne	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c30c:	cmp	lr, #3
   2c310:	bls	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c314:	ldrh	r1, [r8, r0]
   2c318:	sub	r2, r9, r2
   2c31c:	cmp	r2, r1
   2c320:	strh	r1, [sp, #28]
   2c324:	bcc	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c328:	add	r0, sp, #8
   2c32c:	stmib	sp, {r3, r8, r9}
   2c330:	str	ip, [sp, #20]
   2c334:	blx	r3
   2c338:	ldr	r3, [sp, #4]
   2c33c:	cmp	r0, #0
   2c340:	bne	2c234 <flatcc_verify_table_vector_field@@Base+0x180>
   2c344:	add	r4, r4, #4
   2c348:	cmp	r6, r4
   2c34c:	beq	2c198 <flatcc_verify_table_vector_field@@Base+0xe4>
   2c350:	mov	r1, r5
   2c354:	ldr	r2, [r5], #4
   2c358:	str	r7, [sp, #16]
   2c35c:	add	r2, r2, r4
   2c360:	cmp	r4, r2
   2c364:	bcs	2c380 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2c368:	add	r0, r2, #4
   2c36c:	cmp	r9, r0
   2c370:	bcc	2c380 <flatcc_verify_table_vector_field@@Base+0x2cc>
   2c374:	tst	r2, #3
   2c378:	add	sl, sl, #4
   2c37c:	beq	2c21c <flatcc_verify_table_vector_field@@Base+0x168>
   2c380:	ldr	r2, [r1]
   2c384:	str	r7, [sp, #16]
   2c388:	b	2c23c <flatcc_verify_table_vector_field@@Base+0x188>
   2c38c:	mov	r0, #15
   2c390:	b	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c394:	mov	r0, #29
   2c398:	b	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>
   2c39c:	mov	r0, #30
   2c3a0:	b	2c1a8 <flatcc_verify_table_vector_field@@Base+0xf4>

0002c3a4 <flatcc_verify_union_table@@Base>:
   2c3a4:	ldr	r3, [r0, #8]
   2c3a8:	push	{r4, r5, lr}
   2c3ac:	sub	r3, r3, #1
   2c3b0:	sub	sp, sp, #28
   2c3b4:	cmp	r3, #0
   2c3b8:	ldr	lr, [r0]
   2c3bc:	str	r3, [sp, #8]
   2c3c0:	ldr	ip, [r0, #4]
   2c3c4:	ldr	r2, [r0, #16]
   2c3c8:	ldr	r3, [r0, #20]
   2c3cc:	moveq	r0, #3
   2c3d0:	bne	2c3dc <flatcc_verify_union_table@@Base+0x38>
   2c3d4:	add	sp, sp, #28
   2c3d8:	pop	{r4, r5, pc}
   2c3dc:	add	r3, r2, r3
   2c3e0:	cmp	r2, r3
   2c3e4:	bcs	2c480 <flatcc_verify_union_table@@Base+0xdc>
   2c3e8:	add	r2, r3, #4
   2c3ec:	cmp	ip, r2
   2c3f0:	bcc	2c480 <flatcc_verify_union_table@@Base+0xdc>
   2c3f4:	tst	r3, #3
   2c3f8:	bne	2c480 <flatcc_verify_union_table@@Base+0xdc>
   2c3fc:	str	r3, [sp, #16]
   2c400:	ldr	r2, [lr, r3]
   2c404:	subs	r2, r3, r2
   2c408:	bmi	2c48c <flatcc_verify_union_table@@Base+0xe8>
   2c40c:	tst	r2, #1
   2c410:	bne	2c48c <flatcc_verify_union_table@@Base+0xe8>
   2c414:	add	r0, r2, #2
   2c418:	cmp	ip, r0
   2c41c:	movcc	r0, #27
   2c420:	bcc	2c3d4 <flatcc_verify_union_table@@Base+0x30>
   2c424:	ldrh	r4, [lr, r2]
   2c428:	add	r5, lr, r2
   2c42c:	add	r2, r4, r2
   2c430:	cmp	ip, r2
   2c434:	strh	r4, [sp, #22]
   2c438:	bcc	2c494 <flatcc_verify_union_table@@Base+0xf0>
   2c43c:	tst	r4, #1
   2c440:	bne	2c494 <flatcc_verify_union_table@@Base+0xf0>
   2c444:	cmp	r4, #3
   2c448:	movls	r0, #28
   2c44c:	bls	2c3d4 <flatcc_verify_union_table@@Base+0x30>
   2c450:	ldrh	r2, [lr, r0]
   2c454:	sub	r3, ip, r3
   2c458:	cmp	r3, r2
   2c45c:	strh	r2, [sp, #20]
   2c460:	movcc	r0, #20
   2c464:	bcc	2c3d4 <flatcc_verify_union_table@@Base+0x30>
   2c468:	mov	r0, sp
   2c46c:	str	r5, [sp, #12]
   2c470:	str	lr, [sp]
   2c474:	str	ip, [sp, #4]
   2c478:	blx	r1
   2c47c:	b	2c3d4 <flatcc_verify_union_table@@Base+0x30>
   2c480:	mov	r0, #15
   2c484:	add	sp, sp, #28
   2c488:	pop	{r4, r5, pc}
   2c48c:	mov	r0, #29
   2c490:	b	2c3d4 <flatcc_verify_union_table@@Base+0x30>
   2c494:	mov	r0, #30
   2c498:	b	2c3d4 <flatcc_verify_union_table@@Base+0x30>

0002c49c <flatcc_verify_union_struct@@Base>:
   2c49c:	ldr	r3, [r0, #20]
   2c4a0:	ldr	ip, [r0, #4]
   2c4a4:	cmp	r3, #0
   2c4a8:	ldr	r0, [r0, #16]
   2c4ac:	bne	2c4b8 <flatcc_verify_union_struct@@Base+0x1c>
   2c4b0:	mov	r0, #18
   2c4b4:	bx	lr
   2c4b8:	add	r3, r0, r3
   2c4bc:	cmp	ip, r3
   2c4c0:	bcc	2c4b0 <flatcc_verify_union_struct@@Base+0x14>
   2c4c4:	adds	r1, r1, r3
   2c4c8:	bcc	2c4d4 <flatcc_verify_union_struct@@Base+0x38>
   2c4cc:	mov	r0, #10
   2c4d0:	bx	lr
   2c4d4:	cmp	ip, r1
   2c4d8:	bcs	2c4e4 <flatcc_verify_union_struct@@Base+0x48>
   2c4dc:	mov	r0, #9
   2c4e0:	bx	lr
   2c4e4:	sub	r2, r2, #1
   2c4e8:	tst	r2, r3
   2c4ec:	movne	r0, #11
   2c4f0:	moveq	r0, #0
   2c4f4:	bx	lr

0002c4f8 <flatcc_verify_union_string@@Base>:
   2c4f8:	ldr	r2, [r0, #16]
   2c4fc:	ldr	r3, [r0, #20]
   2c500:	add	r3, r2, r3
   2c504:	cmp	r2, r3
   2c508:	bcs	2c544 <flatcc_verify_union_string@@Base+0x4c>
   2c50c:	ldr	r2, [r0, #4]
   2c510:	add	r1, r3, #4
   2c514:	cmp	r2, r1
   2c518:	bcc	2c544 <flatcc_verify_union_string@@Base+0x4c>
   2c51c:	tst	r3, #3
   2c520:	bne	2c544 <flatcc_verify_union_string@@Base+0x4c>
   2c524:	ldr	r0, [r0]
   2c528:	sub	r2, r2, r1
   2c52c:	ldr	r3, [r0, r3]
   2c530:	add	ip, r3, #1
   2c534:	cmp	r2, ip
   2c538:	bcs	2c54c <flatcc_verify_union_string@@Base+0x54>
   2c53c:	mov	r0, #8
   2c540:	bx	lr
   2c544:	mov	r0, #17
   2c548:	bx	lr
   2c54c:	add	r1, r0, r1
   2c550:	ldrb	r0, [r1, r3]
   2c554:	cmp	r0, #0
   2c558:	movne	r0, #7
   2c55c:	moveq	r0, #0
   2c560:	bx	lr

0002c564 <flatcc_verify_buffer_header@@Base>:
   2c564:	ands	r3, r0, #3
   2c568:	beq	2c574 <flatcc_verify_buffer_header@@Base+0x10>
   2c56c:	mov	r0, #5
   2c570:	bx	lr
   2c574:	cmn	r1, #9
   2c578:	bls	2c584 <flatcc_verify_buffer_header@@Base+0x20>
   2c57c:	mov	r0, #6
   2c580:	bx	lr
   2c584:	cmp	r1, #7
   2c588:	bls	2c5d4 <flatcc_verify_buffer_header@@Base+0x70>
   2c58c:	cmp	r2, #0
   2c590:	beq	2c5dc <flatcc_verify_buffer_header@@Base+0x78>
   2c594:	push	{r4, lr}
   2c598:	sub	sp, sp, #8
   2c59c:	mov	r4, r0
   2c5a0:	add	r0, sp, #8
   2c5a4:	mov	r1, r2
   2c5a8:	str	r3, [r0, #-4]!
   2c5ac:	mov	r2, #4
   2c5b0:	bl	145d0 <strncpy@plt>
   2c5b4:	ldr	r2, [r4, #4]
   2c5b8:	ldr	r3, [sp, #4]
   2c5bc:	cmp	r3, #0
   2c5c0:	cmpne	r2, r3
   2c5c4:	moveq	r0, #0
   2c5c8:	movne	r0, #2
   2c5cc:	add	sp, sp, #8
   2c5d0:	pop	{r4, pc}
   2c5d4:	mov	r0, #1
   2c5d8:	bx	lr
   2c5dc:	mov	r0, #0
   2c5e0:	bx	lr

0002c5e4 <flatcc_verify_typed_buffer_header@@Base>:
   2c5e4:	tst	r0, #3
   2c5e8:	beq	2c5f4 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2c5ec:	mov	r0, #5
   2c5f0:	bx	lr
   2c5f4:	cmn	r1, #9
   2c5f8:	bls	2c604 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2c5fc:	mov	r0, #6
   2c600:	bx	lr
   2c604:	cmp	r1, #7
   2c608:	bls	2c630 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2c60c:	cmp	r2, #0
   2c610:	beq	2c628 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2c614:	ldr	r0, [r0, #4]
   2c618:	cmp	r2, r0
   2c61c:	movne	r0, #2
   2c620:	moveq	r0, #0
   2c624:	bx	lr
   2c628:	mov	r0, r2
   2c62c:	bx	lr
   2c630:	mov	r0, #1
   2c634:	bx	lr

0002c638 <flatcc_verify_struct_as_root@@Base>:
   2c638:	cmn	r1, #9
   2c63c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c640:	mov	r6, r1
   2c644:	movls	r5, #0
   2c648:	movhi	r5, #1
   2c64c:	ands	r1, r0, #3
   2c650:	movne	r1, #1
   2c654:	orr	r5, r5, r1
   2c658:	sub	sp, sp, #16
   2c65c:	cmp	r6, #7
   2c660:	movhi	r7, r5
   2c664:	orrls	r7, r5, #1
   2c668:	cmp	r7, #0
   2c66c:	mov	r4, r0
   2c670:	mov	sl, r2
   2c674:	and	r9, r0, #3
   2c678:	ldrh	r8, [sp, #48]	; 0x30
   2c67c:	bne	2c6b8 <flatcc_verify_struct_as_root@@Base+0x80>
   2c680:	cmp	r2, #0
   2c684:	beq	2c714 <flatcc_verify_struct_as_root@@Base+0xdc>
   2c688:	add	r0, sp, #16
   2c68c:	mov	r2, #4
   2c690:	mov	r1, sl
   2c694:	str	r7, [r0, #-4]!
   2c698:	str	r3, [sp, #4]
   2c69c:	bl	145d0 <strncpy@plt>
   2c6a0:	ldr	r2, [sp, #12]
   2c6a4:	ldr	r1, [r4, #4]
   2c6a8:	ldr	r3, [sp, #4]
   2c6ac:	cmp	r2, #0
   2c6b0:	cmpne	r1, r2
   2c6b4:	beq	2c714 <flatcc_verify_struct_as_root@@Base+0xdc>
   2c6b8:	cmp	r9, #0
   2c6bc:	movne	r0, #5
   2c6c0:	bne	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c6c4:	cmp	r5, #0
   2c6c8:	movne	r0, #6
   2c6cc:	bne	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c6d0:	cmp	r7, #0
   2c6d4:	movne	r0, #1
   2c6d8:	bne	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c6dc:	cmp	sl, #0
   2c6e0:	beq	2c764 <flatcc_verify_struct_as_root@@Base+0x12c>
   2c6e4:	add	r0, sp, #16
   2c6e8:	mov	r2, #4
   2c6ec:	mov	r1, sl
   2c6f0:	str	r7, [r0, #-4]!
   2c6f4:	bl	145d0 <strncpy@plt>
   2c6f8:	ldr	r2, [r4, #4]
   2c6fc:	ldr	r3, [sp, #12]
   2c700:	cmp	r3, #0
   2c704:	cmpne	r2, r3
   2c708:	movne	r0, #2
   2c70c:	bne	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c710:	b	2c764 <flatcc_verify_struct_as_root@@Base+0x12c>
   2c714:	ldr	r1, [r4]
   2c718:	clz	r2, r1
   2c71c:	lsr	r2, r2, #5
   2c720:	cmp	r6, r1
   2c724:	orrcc	r2, r2, #1
   2c728:	cmp	r2, #0
   2c72c:	movne	r0, #18
   2c730:	beq	2c73c <flatcc_verify_struct_as_root@@Base+0x104>
   2c734:	add	sp, sp, #16
   2c738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c73c:	adds	r3, r3, r1
   2c740:	movcs	r0, #10
   2c744:	bcs	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c748:	cmp	r6, r3
   2c74c:	movcc	r0, #9
   2c750:	bcc	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c754:	sub	r8, r8, #1
   2c758:	tst	r8, r1
   2c75c:	movne	r0, #11
   2c760:	bne	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>
   2c764:	mov	r0, #0
   2c768:	b	2c734 <flatcc_verify_struct_as_root@@Base+0xfc>

0002c76c <flatcc_verify_struct_as_typed_root@@Base>:
   2c76c:	push	{lr}		; (str lr, [sp, #-4]!)
   2c770:	sub	lr, r1, #8
   2c774:	cmn	lr, #17
   2c778:	movls	lr, #0
   2c77c:	movhi	lr, #1
   2c780:	ands	ip, r0, #3
   2c784:	movne	ip, #1
   2c788:	orrs	ip, lr, ip
   2c78c:	ldrh	lr, [sp, #4]
   2c790:	bne	2c7e0 <flatcc_verify_struct_as_typed_root@@Base+0x74>
   2c794:	cmp	r2, #0
   2c798:	beq	2c7b8 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   2c79c:	ldr	ip, [r0, #4]
   2c7a0:	cmp	r2, ip
   2c7a4:	beq	2c7b8 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   2c7a8:	cmn	r1, #9
   2c7ac:	bls	2c804 <flatcc_verify_struct_as_typed_root@@Base+0x98>
   2c7b0:	mov	r0, #6
   2c7b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2c7b8:	ldr	r0, [r0]
   2c7bc:	cmp	r1, r0
   2c7c0:	movcs	r2, #0
   2c7c4:	movcc	r2, #1
   2c7c8:	cmp	r0, #0
   2c7cc:	orreq	r2, r2, #1
   2c7d0:	cmp	r2, #0
   2c7d4:	beq	2c7f4 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2c7d8:	mov	r0, #18
   2c7dc:	pop	{pc}		; (ldr pc, [sp], #4)
   2c7e0:	and	ip, r0, #3
   2c7e4:	cmp	ip, #0
   2c7e8:	beq	2c7a8 <flatcc_verify_struct_as_typed_root@@Base+0x3c>
   2c7ec:	mov	r0, #5
   2c7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   2c7f4:	adds	r3, r3, r0
   2c7f8:	bcc	2c830 <flatcc_verify_struct_as_typed_root@@Base+0xc4>
   2c7fc:	mov	r0, #10
   2c800:	pop	{pc}		; (ldr pc, [sp], #4)
   2c804:	cmp	r1, #7
   2c808:	bls	2c828 <flatcc_verify_struct_as_typed_root@@Base+0xbc>
   2c80c:	cmp	r2, #0
   2c810:	beq	2c840 <flatcc_verify_struct_as_typed_root@@Base+0xd4>
   2c814:	ldr	r0, [r0, #4]
   2c818:	cmp	r2, r0
   2c81c:	movne	r0, #2
   2c820:	moveq	r0, #0
   2c824:	pop	{pc}		; (ldr pc, [sp], #4)
   2c828:	mov	r0, #1
   2c82c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c830:	cmp	r1, r3
   2c834:	bcs	2c848 <flatcc_verify_struct_as_typed_root@@Base+0xdc>
   2c838:	mov	r0, #9
   2c83c:	pop	{pc}		; (ldr pc, [sp], #4)
   2c840:	mov	r0, r2
   2c844:	pop	{pc}		; (ldr pc, [sp], #4)
   2c848:	sub	lr, lr, #1
   2c84c:	tst	lr, r0
   2c850:	moveq	r0, #0
   2c854:	movne	r0, #11
   2c858:	pop	{pc}		; (ldr pc, [sp], #4)

0002c85c <flatcc_verify_table_as_root@@Base>:
   2c85c:	push	{r4, r5, r6, lr}
   2c860:	mov	r5, r1
   2c864:	sub	r1, r1, #8
   2c868:	cmn	r1, #17
   2c86c:	movls	r1, #0
   2c870:	movhi	r1, #1
   2c874:	mov	r4, r0
   2c878:	ands	r0, r0, #3
   2c87c:	movne	r0, #1
   2c880:	orrs	r1, r1, r0
   2c884:	sub	sp, sp, #32
   2c888:	mov	r6, r2
   2c88c:	bne	2c9cc <flatcc_verify_table_as_root@@Base+0x170>
   2c890:	cmp	r2, #0
   2c894:	beq	2c920 <flatcc_verify_table_as_root@@Base+0xc4>
   2c898:	add	r0, sp, #32
   2c89c:	mov	r2, #4
   2c8a0:	str	r1, [r0, #-24]!	; 0xffffffe8
   2c8a4:	mov	r1, r6
   2c8a8:	str	r3, [sp, #4]
   2c8ac:	bl	145d0 <strncpy@plt>
   2c8b0:	ldr	r2, [sp, #8]
   2c8b4:	ldr	r1, [r4, #4]
   2c8b8:	ldr	r3, [sp, #4]
   2c8bc:	cmp	r2, #0
   2c8c0:	cmpne	r1, r2
   2c8c4:	beq	2c920 <flatcc_verify_table_as_root@@Base+0xc4>
   2c8c8:	cmn	r5, #9
   2c8cc:	movhi	r0, #6
   2c8d0:	bhi	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c8d4:	cmp	r5, #7
   2c8d8:	movls	r0, #1
   2c8dc:	bls	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c8e0:	cmp	r6, #0
   2c8e4:	beq	2c918 <flatcc_verify_table_as_root@@Base+0xbc>
   2c8e8:	add	r0, sp, #32
   2c8ec:	mov	r3, #0
   2c8f0:	str	r3, [r0, #-24]!	; 0xffffffe8
   2c8f4:	mov	r2, #4
   2c8f8:	mov	r1, r6
   2c8fc:	bl	145d0 <strncpy@plt>
   2c900:	ldr	r2, [r4, #4]
   2c904:	ldr	r3, [sp, #8]
   2c908:	cmp	r3, #0
   2c90c:	cmpne	r2, r3
   2c910:	movne	r0, #2
   2c914:	bne	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c918:	mov	r0, #0
   2c91c:	b	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c920:	ldr	r2, [r4]
   2c924:	mov	r1, #99	; 0x63
   2c928:	cmp	r2, #0
   2c92c:	str	r1, [sp, #16]
   2c930:	beq	2c9e4 <flatcc_verify_table_as_root@@Base+0x188>
   2c934:	add	r1, r2, #4
   2c938:	cmp	r5, r1
   2c93c:	bcc	2c9e4 <flatcc_verify_table_as_root@@Base+0x188>
   2c940:	tst	r2, #3
   2c944:	bne	2c9e4 <flatcc_verify_table_as_root@@Base+0x188>
   2c948:	ldr	r1, [r4, r2]
   2c94c:	str	r2, [sp, #24]
   2c950:	subs	r1, r2, r1
   2c954:	bmi	2c9f0 <flatcc_verify_table_as_root@@Base+0x194>
   2c958:	tst	r1, #1
   2c95c:	bne	2c9f0 <flatcc_verify_table_as_root@@Base+0x194>
   2c960:	add	r0, r1, #2
   2c964:	cmp	r5, r0
   2c968:	movcc	r0, #27
   2c96c:	bcc	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c970:	ldrh	ip, [r4, r1]
   2c974:	add	lr, r4, r1
   2c978:	add	r1, ip, r1
   2c97c:	cmp	r5, r1
   2c980:	strh	ip, [sp, #30]
   2c984:	bcc	2c9f8 <flatcc_verify_table_as_root@@Base+0x19c>
   2c988:	tst	ip, #1
   2c98c:	bne	2c9f8 <flatcc_verify_table_as_root@@Base+0x19c>
   2c990:	cmp	ip, #3
   2c994:	movls	r0, #28
   2c998:	bls	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c99c:	ldrh	r1, [r4, r0]
   2c9a0:	sub	r2, r5, r2
   2c9a4:	cmp	r2, r1
   2c9a8:	strh	r1, [sp, #28]
   2c9ac:	movcc	r0, #20
   2c9b0:	bcc	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c9b4:	add	r0, sp, #8
   2c9b8:	str	lr, [sp, #20]
   2c9bc:	str	r4, [sp, #8]
   2c9c0:	str	r5, [sp, #12]
   2c9c4:	blx	r3
   2c9c8:	b	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c9cc:	and	r2, r4, #3
   2c9d0:	cmp	r2, #0
   2c9d4:	movne	r0, #5
   2c9d8:	beq	2c8c8 <flatcc_verify_table_as_root@@Base+0x6c>
   2c9dc:	add	sp, sp, #32
   2c9e0:	pop	{r4, r5, r6, pc}
   2c9e4:	mov	r0, #15
   2c9e8:	add	sp, sp, #32
   2c9ec:	pop	{r4, r5, r6, pc}
   2c9f0:	mov	r0, #29
   2c9f4:	b	2c9dc <flatcc_verify_table_as_root@@Base+0x180>
   2c9f8:	mov	r0, #30
   2c9fc:	b	2c9dc <flatcc_verify_table_as_root@@Base+0x180>

0002ca00 <flatcc_verify_table_as_typed_root@@Base>:
   2ca00:	push	{r4, r5, lr}
   2ca04:	sub	lr, r1, #8
   2ca08:	cmn	lr, #17
   2ca0c:	movls	lr, #0
   2ca10:	movhi	lr, #1
   2ca14:	ands	ip, r0, #3
   2ca18:	movne	ip, #1
   2ca1c:	orrs	ip, lr, ip
   2ca20:	sub	sp, sp, #28
   2ca24:	bne	2ca74 <flatcc_verify_table_as_typed_root@@Base+0x74>
   2ca28:	cmp	r2, #0
   2ca2c:	beq	2ca8c <flatcc_verify_table_as_typed_root@@Base+0x8c>
   2ca30:	ldr	ip, [r0, #4]
   2ca34:	cmp	r2, ip
   2ca38:	beq	2ca8c <flatcc_verify_table_as_typed_root@@Base+0x8c>
   2ca3c:	cmn	r1, #9
   2ca40:	movhi	r0, #6
   2ca44:	bhi	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2ca48:	cmp	r1, #7
   2ca4c:	movls	r0, #1
   2ca50:	bls	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2ca54:	cmp	r2, #0
   2ca58:	moveq	r0, r2
   2ca5c:	beq	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2ca60:	ldr	r0, [r0, #4]
   2ca64:	cmp	r2, r0
   2ca68:	movne	r0, #2
   2ca6c:	moveq	r0, #0
   2ca70:	b	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2ca74:	and	ip, r0, #3
   2ca78:	cmp	ip, #0
   2ca7c:	movne	r0, #5
   2ca80:	beq	2ca3c <flatcc_verify_table_as_typed_root@@Base+0x3c>
   2ca84:	add	sp, sp, #28
   2ca88:	pop	{r4, r5, pc}
   2ca8c:	ldr	r2, [r0]
   2ca90:	mov	ip, #99	; 0x63
   2ca94:	cmp	r2, #0
   2ca98:	str	ip, [sp, #8]
   2ca9c:	beq	2cb3c <flatcc_verify_table_as_typed_root@@Base+0x13c>
   2caa0:	add	ip, r2, #4
   2caa4:	cmp	r1, ip
   2caa8:	bcc	2cb3c <flatcc_verify_table_as_typed_root@@Base+0x13c>
   2caac:	tst	r2, #3
   2cab0:	bne	2cb3c <flatcc_verify_table_as_typed_root@@Base+0x13c>
   2cab4:	ldr	ip, [r0, r2]
   2cab8:	str	r2, [sp, #16]
   2cabc:	subs	ip, r2, ip
   2cac0:	bmi	2cb48 <flatcc_verify_table_as_typed_root@@Base+0x148>
   2cac4:	tst	ip, #1
   2cac8:	bne	2cb48 <flatcc_verify_table_as_typed_root@@Base+0x148>
   2cacc:	add	lr, ip, #2
   2cad0:	cmp	r1, lr
   2cad4:	movcc	r0, #27
   2cad8:	bcc	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2cadc:	ldrh	r4, [r0, ip]
   2cae0:	add	r5, r0, ip
   2cae4:	add	ip, r4, ip
   2cae8:	cmp	r1, ip
   2caec:	strh	r4, [sp, #22]
   2caf0:	bcc	2cb50 <flatcc_verify_table_as_typed_root@@Base+0x150>
   2caf4:	tst	r4, #1
   2caf8:	bne	2cb50 <flatcc_verify_table_as_typed_root@@Base+0x150>
   2cafc:	cmp	r4, #3
   2cb00:	movls	r0, #28
   2cb04:	bls	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2cb08:	ldrh	ip, [r0, lr]
   2cb0c:	sub	r2, r1, r2
   2cb10:	cmp	r2, ip
   2cb14:	strh	ip, [sp, #20]
   2cb18:	movcc	r0, #20
   2cb1c:	bcc	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2cb20:	mov	r2, r0
   2cb24:	mov	r0, sp
   2cb28:	str	r5, [sp, #12]
   2cb2c:	str	r2, [sp]
   2cb30:	str	r1, [sp, #4]
   2cb34:	blx	r3
   2cb38:	b	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2cb3c:	mov	r0, #15
   2cb40:	add	sp, sp, #28
   2cb44:	pop	{r4, r5, pc}
   2cb48:	mov	r0, #29
   2cb4c:	b	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2cb50:	mov	r0, #30
   2cb54:	b	2ca84 <flatcc_verify_table_as_typed_root@@Base+0x84>

0002cb58 <flatcc_verify_struct_as_nested_root@@Base>:
   2cb58:	add	ip, r1, #2
   2cb5c:	push	{r4, r5, r6, r7, r8, lr}
   2cb60:	lsl	ip, ip, #1
   2cb64:	ldrh	lr, [r0, #22]
   2cb68:	sub	sp, sp, #16
   2cb6c:	uxth	ip, ip
   2cb70:	cmp	lr, ip
   2cb74:	ldr	r5, [sp, #40]	; 0x28
   2cb78:	ldrh	r4, [sp, #44]	; 0x2c
   2cb7c:	bls	2cbc0 <flatcc_verify_struct_as_nested_root@@Base+0x68>
   2cb80:	ldr	lr, [r0, #12]
   2cb84:	ldrh	ip, [lr, ip]
   2cb88:	cmp	ip, #0
   2cb8c:	beq	2cbc0 <flatcc_verify_struct_as_nested_root@@Base+0x68>
   2cb90:	ldrh	lr, [r0, #20]
   2cb94:	add	r6, ip, #4
   2cb98:	cmp	r6, lr
   2cb9c:	bls	2cbd4 <flatcc_verify_struct_as_nested_root@@Base+0x7c>
   2cba0:	mvn	lr, #0
   2cba4:	mov	ip, #1
   2cba8:	mov	r3, r4
   2cbac:	str	lr, [sp, #44]	; 0x2c
   2cbb0:	str	ip, [sp, #40]	; 0x28
   2cbb4:	add	sp, sp, #16
   2cbb8:	pop	{r4, r5, r6, r7, r8, lr}
   2cbbc:	b	2bca8 <flatcc_verify_vector_field@@Base>
   2cbc0:	cmp	r2, #0
   2cbc4:	bne	2cba0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2cbc8:	mov	r0, #0
   2cbcc:	add	sp, sp, #16
   2cbd0:	pop	{r4, r5, r6, r7, r8, pc}
   2cbd4:	ldr	lr, [r0, #16]
   2cbd8:	add	ip, ip, lr
   2cbdc:	tst	ip, #3
   2cbe0:	bne	2cba0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2cbe4:	cmp	ip, #0
   2cbe8:	beq	2cce4 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   2cbec:	ldr	r7, [r0]
   2cbf0:	add	lr, r7, ip
   2cbf4:	ldr	r6, [r7, ip]
   2cbf8:	add	r6, ip, r6
   2cbfc:	cmp	r6, ip
   2cc00:	bls	2cba0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2cc04:	ldr	ip, [r0, #4]
   2cc08:	add	r8, r6, #4
   2cc0c:	cmp	ip, r8
   2cc10:	bcc	2cba0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2cc14:	tst	r8, #3
   2cc18:	bne	2cba0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2cc1c:	ldr	r6, [r7, r6]
   2cc20:	sub	ip, ip, r8
   2cc24:	mul	r6, r6, r4
   2cc28:	cmp	ip, r6
   2cc2c:	bcc	2cba0 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2cc30:	ldr	r2, [lr]
   2cc34:	add	r6, lr, r2
   2cc38:	ldr	r7, [lr, r2]
   2cc3c:	and	r0, r6, #3
   2cc40:	sub	r2, r7, #8
   2cc44:	cmn	r2, #17
   2cc48:	movls	r2, #0
   2cc4c:	movhi	r2, #1
   2cc50:	ands	r1, r6, #3
   2cc54:	movne	r1, #1
   2cc58:	orrs	r1, r2, r1
   2cc5c:	bne	2ccf4 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   2cc60:	cmp	r3, #0
   2cc64:	beq	2cc98 <flatcc_verify_struct_as_nested_root@@Base+0x140>
   2cc68:	add	r0, sp, #16
   2cc6c:	mov	r2, #4
   2cc70:	str	r1, [r0, #-4]!
   2cc74:	mov	r1, r3
   2cc78:	str	r3, [sp, #4]
   2cc7c:	bl	145d0 <strncpy@plt>
   2cc80:	ldr	r2, [sp, #12]
   2cc84:	ldr	r1, [r6, #8]
   2cc88:	ldr	r3, [sp, #4]
   2cc8c:	cmp	r2, #0
   2cc90:	cmpne	r1, r2
   2cc94:	bne	2cd00 <flatcc_verify_struct_as_nested_root@@Base+0x1a8>
   2cc98:	ldr	r2, [r6, #4]
   2cc9c:	clz	r3, r2
   2cca0:	lsr	r3, r3, #5
   2cca4:	cmp	r7, r2
   2cca8:	orrcc	r3, r3, #1
   2ccac:	cmp	r3, #0
   2ccb0:	movne	r0, #18
   2ccb4:	bne	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2ccb8:	adds	r5, r5, r2
   2ccbc:	movcs	r0, #10
   2ccc0:	bcs	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2ccc4:	cmp	r7, r5
   2ccc8:	movcc	r0, #9
   2cccc:	bcc	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2ccd0:	sub	r4, r4, #1
   2ccd4:	tst	r4, r2
   2ccd8:	movne	r0, #11
   2ccdc:	bne	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2cce0:	b	2cbc8 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   2cce4:	ldr	lr, [r0]
   2cce8:	cmp	lr, #0
   2ccec:	bne	2cc30 <flatcc_verify_struct_as_nested_root@@Base+0xd8>
   2ccf0:	b	2cbc8 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   2ccf4:	cmp	r0, #0
   2ccf8:	movne	r0, #5
   2ccfc:	bne	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2cd00:	cmn	r7, #9
   2cd04:	movhi	r0, #6
   2cd08:	bhi	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2cd0c:	cmp	r7, #7
   2cd10:	movls	r0, #1
   2cd14:	bls	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2cd18:	cmp	r3, #0
   2cd1c:	beq	2cbc8 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   2cd20:	add	r0, sp, #16
   2cd24:	mov	r2, #0
   2cd28:	mov	r1, r3
   2cd2c:	str	r2, [r0, #-4]!
   2cd30:	mov	r2, #4
   2cd34:	bl	145d0 <strncpy@plt>
   2cd38:	ldr	r2, [r6, #8]
   2cd3c:	ldr	r3, [sp, #12]
   2cd40:	cmp	r3, #0
   2cd44:	cmpne	r2, r3
   2cd48:	movne	r0, #2
   2cd4c:	bne	2cbcc <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2cd50:	b	2cbc8 <flatcc_verify_struct_as_nested_root@@Base+0x70>

0002cd54 <flatcc_verify_table_as_nested_root@@Base>:
   2cd54:	push	{r4, r5, r6, r7, lr}
   2cd58:	mov	r4, r0
   2cd5c:	add	r0, r1, #2
   2cd60:	ldrh	ip, [r4, #22]
   2cd64:	lsl	r0, r0, #1
   2cd68:	sub	sp, sp, #44	; 0x2c
   2cd6c:	uxth	r0, r0
   2cd70:	cmp	ip, r0
   2cd74:	ldrh	r5, [sp, #64]	; 0x40
   2cd78:	bls	2cdbc <flatcc_verify_table_as_nested_root@@Base+0x68>
   2cd7c:	ldr	ip, [r4, #12]
   2cd80:	ldrh	r0, [ip, r0]
   2cd84:	cmp	r0, #0
   2cd88:	beq	2cdbc <flatcc_verify_table_as_nested_root@@Base+0x68>
   2cd8c:	ldrh	ip, [r4, #20]
   2cd90:	add	lr, r0, #4
   2cd94:	cmp	lr, ip
   2cd98:	bls	2cdd0 <flatcc_verify_table_as_nested_root@@Base+0x7c>
   2cd9c:	mvn	lr, #0
   2cda0:	mov	ip, #1
   2cda4:	mov	r3, r5
   2cda8:	mov	r0, r4
   2cdac:	stm	sp, {ip, lr}
   2cdb0:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   2cdb4:	add	sp, sp, #44	; 0x2c
   2cdb8:	pop	{r4, r5, r6, r7, pc}
   2cdbc:	cmp	r2, #0
   2cdc0:	bne	2cd9c <flatcc_verify_table_as_nested_root@@Base+0x48>
   2cdc4:	mov	r0, #0
   2cdc8:	add	sp, sp, #44	; 0x2c
   2cdcc:	pop	{r4, r5, r6, r7, pc}
   2cdd0:	ldr	ip, [r4, #16]
   2cdd4:	add	r0, r0, ip
   2cdd8:	tst	r0, #3
   2cddc:	bne	2cd9c <flatcc_verify_table_as_nested_root@@Base+0x48>
   2cde0:	cmp	r0, #0
   2cde4:	beq	2cf64 <flatcc_verify_table_as_nested_root@@Base+0x210>
   2cde8:	ldr	r6, [r4]
   2cdec:	add	ip, r6, r0
   2cdf0:	ldr	lr, [r6, r0]
   2cdf4:	add	lr, r0, lr
   2cdf8:	cmp	lr, r0
   2cdfc:	bls	2cd9c <flatcc_verify_table_as_nested_root@@Base+0x48>
   2ce00:	ldr	r0, [r4, #4]
   2ce04:	add	r7, lr, #4
   2ce08:	cmp	r0, r7
   2ce0c:	bcc	2cd9c <flatcc_verify_table_as_nested_root@@Base+0x48>
   2ce10:	tst	r7, #3
   2ce14:	bne	2cd9c <flatcc_verify_table_as_nested_root@@Base+0x48>
   2ce18:	ldr	lr, [r6, lr]
   2ce1c:	sub	r0, r0, r7
   2ce20:	mul	lr, lr, r5
   2ce24:	cmp	r0, lr
   2ce28:	bcc	2cd9c <flatcc_verify_table_as_nested_root@@Base+0x48>
   2ce2c:	ldr	r2, [ip]
   2ce30:	add	r6, ip, r2
   2ce34:	ldr	r7, [ip, r2]
   2ce38:	add	r5, r6, #4
   2ce3c:	sub	r2, r7, #8
   2ce40:	cmn	r2, #17
   2ce44:	movls	r2, #0
   2ce48:	movhi	r2, #1
   2ce4c:	ands	r1, r5, #3
   2ce50:	movne	r1, #1
   2ce54:	orrs	r1, r2, r1
   2ce58:	and	r2, r5, #3
   2ce5c:	bne	2cf74 <flatcc_verify_table_as_nested_root@@Base+0x220>
   2ce60:	cmp	r3, #0
   2ce64:	beq	2ce98 <flatcc_verify_table_as_nested_root@@Base+0x144>
   2ce68:	add	r0, sp, #40	; 0x28
   2ce6c:	mov	r2, #4
   2ce70:	str	r1, [r0, #-24]!	; 0xffffffe8
   2ce74:	mov	r1, r3
   2ce78:	str	r3, [sp, #12]
   2ce7c:	bl	145d0 <strncpy@plt>
   2ce80:	ldr	r2, [sp, #16]
   2ce84:	ldr	r1, [r6, #8]
   2ce88:	ldr	r3, [sp, #12]
   2ce8c:	cmp	r2, #0
   2ce90:	cmpne	r1, r2
   2ce94:	bne	2cf80 <flatcc_verify_table_as_nested_root@@Base+0x22c>
   2ce98:	ldr	r3, [r4, #8]
   2ce9c:	ldr	r2, [r6, #4]
   2cea0:	sub	r3, r3, #1
   2cea4:	cmp	r3, #0
   2cea8:	str	r3, [sp, #24]
   2ceac:	moveq	r0, #3
   2ceb0:	beq	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2ceb4:	cmp	r2, #0
   2ceb8:	beq	2cf58 <flatcc_verify_table_as_nested_root@@Base+0x204>
   2cebc:	add	r3, r2, #4
   2cec0:	cmp	r7, r3
   2cec4:	bcc	2cf58 <flatcc_verify_table_as_nested_root@@Base+0x204>
   2cec8:	tst	r2, #3
   2cecc:	bne	2cf58 <flatcc_verify_table_as_nested_root@@Base+0x204>
   2ced0:	str	r2, [sp, #32]
   2ced4:	ldr	r3, [r5, r2]
   2ced8:	subs	r3, r2, r3
   2cedc:	bmi	2cfd4 <flatcc_verify_table_as_nested_root@@Base+0x280>
   2cee0:	tst	r3, #1
   2cee4:	bne	2cfd4 <flatcc_verify_table_as_nested_root@@Base+0x280>
   2cee8:	add	r1, r3, #2
   2ceec:	cmp	r7, r1
   2cef0:	movcc	r0, #27
   2cef4:	bcc	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cef8:	ldrh	r0, [r5, r3]
   2cefc:	add	ip, r5, r3
   2cf00:	add	r3, r0, r3
   2cf04:	cmp	r7, r3
   2cf08:	strh	r0, [sp, #38]	; 0x26
   2cf0c:	bcc	2cfdc <flatcc_verify_table_as_nested_root@@Base+0x288>
   2cf10:	tst	r0, #1
   2cf14:	bne	2cfdc <flatcc_verify_table_as_nested_root@@Base+0x288>
   2cf18:	cmp	r0, #3
   2cf1c:	movls	r0, #28
   2cf20:	bls	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cf24:	ldrh	r3, [r5, r1]
   2cf28:	sub	r2, r7, r2
   2cf2c:	cmp	r2, r3
   2cf30:	strh	r3, [sp, #36]	; 0x24
   2cf34:	movcc	r0, #20
   2cf38:	bcc	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cf3c:	add	r0, sp, #16
   2cf40:	ldr	r3, [sp, #68]	; 0x44
   2cf44:	str	ip, [sp, #28]
   2cf48:	str	r5, [sp, #16]
   2cf4c:	str	r7, [sp, #20]
   2cf50:	blx	r3
   2cf54:	b	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cf58:	mov	r0, #15
   2cf5c:	add	sp, sp, #44	; 0x2c
   2cf60:	pop	{r4, r5, r6, r7, pc}
   2cf64:	ldr	ip, [r4]
   2cf68:	cmp	ip, #0
   2cf6c:	bne	2ce2c <flatcc_verify_table_as_nested_root@@Base+0xd8>
   2cf70:	b	2cdc4 <flatcc_verify_table_as_nested_root@@Base+0x70>
   2cf74:	cmp	r2, #0
   2cf78:	movne	r0, #5
   2cf7c:	bne	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cf80:	cmn	r7, #9
   2cf84:	movhi	r0, #6
   2cf88:	bhi	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cf8c:	cmp	r7, #7
   2cf90:	movls	r0, #1
   2cf94:	bls	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cf98:	cmp	r3, #0
   2cf9c:	beq	2cdc4 <flatcc_verify_table_as_nested_root@@Base+0x70>
   2cfa0:	add	r0, sp, #40	; 0x28
   2cfa4:	mov	r2, #0
   2cfa8:	mov	r1, r3
   2cfac:	str	r2, [r0, #-24]!	; 0xffffffe8
   2cfb0:	mov	r2, #4
   2cfb4:	bl	145d0 <strncpy@plt>
   2cfb8:	ldr	r2, [r6, #8]
   2cfbc:	ldr	r3, [sp, #16]
   2cfc0:	cmp	r3, #0
   2cfc4:	cmpne	r2, r3
   2cfc8:	movne	r0, #2
   2cfcc:	bne	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cfd0:	b	2cdc4 <flatcc_verify_table_as_nested_root@@Base+0x70>
   2cfd4:	mov	r0, #29
   2cfd8:	b	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2cfdc:	mov	r0, #30
   2cfe0:	b	2cdb4 <flatcc_verify_table_as_nested_root@@Base+0x60>

0002cfe4 <flatcc_verify_union_field@@Base>:
   2cfe4:	sub	ip, r1, #1
   2cfe8:	push	{r4, r5, r6, r7, lr}
   2cfec:	uxth	ip, ip
   2cff0:	add	ip, ip, #2
   2cff4:	ldrh	lr, [r0, #22]
   2cff8:	lsl	ip, ip, #1
   2cffc:	sub	sp, sp, #28
   2d000:	uxth	ip, ip
   2d004:	cmp	ip, lr
   2d008:	ldr	r4, [r0, #12]
   2d00c:	bcs	2d038 <flatcc_verify_union_field@@Base+0x54>
   2d010:	ldrh	ip, [r4, ip]
   2d014:	cmp	ip, #0
   2d018:	beq	2d038 <flatcc_verify_union_field@@Base+0x54>
   2d01c:	ldrh	r5, [r0, #20]
   2d020:	add	r6, ip, #1
   2d024:	cmp	r6, r5
   2d028:	bls	2d078 <flatcc_verify_union_field@@Base+0x94>
   2d02c:	mov	r0, #13
   2d030:	add	sp, sp, #28
   2d034:	pop	{r4, r5, r6, r7, pc}
   2d038:	add	r1, r1, #2
   2d03c:	lsl	r1, r1, #1
   2d040:	uxth	r1, r1
   2d044:	cmp	lr, r1
   2d048:	bhi	2d060 <flatcc_verify_union_field@@Base+0x7c>
   2d04c:	cmp	r2, #0
   2d050:	movne	r0, #21
   2d054:	moveq	r0, #0
   2d058:	add	sp, sp, #28
   2d05c:	pop	{r4, r5, r6, r7, pc}
   2d060:	ldrh	r3, [r4, r1]
   2d064:	cmp	r3, #0
   2d068:	movne	r0, #23
   2d06c:	beq	2d04c <flatcc_verify_union_field@@Base+0x68>
   2d070:	add	sp, sp, #28
   2d074:	pop	{r4, r5, r6, r7, pc}
   2d078:	add	r1, r1, #2
   2d07c:	ldr	r6, [r0]
   2d080:	lsl	r1, r1, #1
   2d084:	uxth	r1, r1
   2d088:	cmp	lr, r1
   2d08c:	bls	2d0c4 <flatcc_verify_union_field@@Base+0xe0>
   2d090:	ldr	r7, [r0, #16]
   2d094:	ldrh	r4, [r4, r1]
   2d098:	add	ip, r7, ip
   2d09c:	ldrb	r1, [r6, ip]
   2d0a0:	adds	lr, r1, #0
   2d0a4:	movne	lr, #1
   2d0a8:	cmp	r4, #0
   2d0ac:	orreq	lr, lr, #1
   2d0b0:	cmp	lr, #0
   2d0b4:	bne	2d0e8 <flatcc_verify_union_field@@Base+0x104>
   2d0b8:	mov	r0, #24
   2d0bc:	add	sp, sp, #28
   2d0c0:	pop	{r4, r5, r6, r7, pc}
   2d0c4:	ldr	r3, [r0, #16]
   2d0c8:	add	ip, r6, ip
   2d0cc:	ldrb	r0, [ip, r3]
   2d0d0:	cmp	r0, #0
   2d0d4:	beq	2d030 <flatcc_verify_union_field@@Base+0x4c>
   2d0d8:	cmp	r2, #0
   2d0dc:	movne	r0, #4
   2d0e0:	moveq	r0, #0
   2d0e4:	b	2d030 <flatcc_verify_union_field@@Base+0x4c>
   2d0e8:	cmp	r1, #0
   2d0ec:	beq	2d148 <flatcc_verify_union_field@@Base+0x164>
   2d0f0:	cmp	r4, #0
   2d0f4:	beq	2d0d8 <flatcc_verify_union_field@@Base+0xf4>
   2d0f8:	add	r2, r4, #4
   2d0fc:	cmp	r5, r2
   2d100:	bcc	2d02c <flatcc_verify_union_field@@Base+0x48>
   2d104:	add	r7, r7, r4
   2d108:	tst	r7, #3
   2d10c:	movne	r0, #12
   2d110:	bne	2d030 <flatcc_verify_union_field@@Base+0x4c>
   2d114:	cmp	r7, #0
   2d118:	beq	2d148 <flatcc_verify_union_field@@Base+0x164>
   2d11c:	ldmib	r0, {r1, r2}
   2d120:	str	r7, [sp, #16]
   2d124:	mov	r0, sp
   2d128:	stmib	sp, {r1, r2}
   2d12c:	ldr	r2, [r6, r7]
   2d130:	str	r6, [sp]
   2d134:	str	r2, [sp, #20]
   2d138:	ldrb	r2, [r6, ip]
   2d13c:	strb	r2, [sp, #12]
   2d140:	blx	r3
   2d144:	b	2d030 <flatcc_verify_union_field@@Base+0x4c>
   2d148:	mov	r0, #0
   2d14c:	b	2d030 <flatcc_verify_union_field@@Base+0x4c>

0002d150 <flatcc_verify_union_vector_field@@Base>:
   2d150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d154:	sub	r4, r1, #1
   2d158:	ldrh	lr, [r0, #22]
   2d15c:	uxth	r4, r4
   2d160:	add	ip, r4, #2
   2d164:	sub	sp, sp, #44	; 0x2c
   2d168:	lsl	ip, ip, #1
   2d16c:	ldr	r5, [r0, #12]
   2d170:	uxth	ip, ip
   2d174:	cmp	ip, lr
   2d178:	bcs	2d2a8 <flatcc_verify_union_vector_field@@Base+0x158>
   2d17c:	ldrh	ip, [r5, ip]
   2d180:	cmp	ip, #0
   2d184:	beq	2d2a8 <flatcc_verify_union_vector_field@@Base+0x158>
   2d188:	ldrh	r7, [r0, #20]
   2d18c:	add	r6, ip, #4
   2d190:	cmp	r6, r7
   2d194:	bhi	2d2d0 <flatcc_verify_union_vector_field@@Base+0x180>
   2d198:	ldr	r8, [r0, #16]
   2d19c:	add	ip, ip, r8
   2d1a0:	tst	ip, #3
   2d1a4:	bne	2d2d0 <flatcc_verify_union_vector_field@@Base+0x180>
   2d1a8:	cmp	ip, #0
   2d1ac:	beq	2d3e4 <flatcc_verify_union_vector_field@@Base+0x294>
   2d1b0:	ldr	r6, [r0]
   2d1b4:	ldr	r9, [r6, ip]
   2d1b8:	add	r9, ip, r9
   2d1bc:	cmp	r9, ip
   2d1c0:	bls	2d2d0 <flatcc_verify_union_vector_field@@Base+0x180>
   2d1c4:	ldr	sl, [r0, #4]
   2d1c8:	add	fp, r9, #4
   2d1cc:	cmp	sl, fp
   2d1d0:	bcc	2d2d0 <flatcc_verify_union_vector_field@@Base+0x180>
   2d1d4:	tst	fp, #3
   2d1d8:	bne	2d2d0 <flatcc_verify_union_vector_field@@Base+0x180>
   2d1dc:	ldr	r9, [r6, r9]
   2d1e0:	sub	sl, sl, fp
   2d1e4:	cmp	r9, sl
   2d1e8:	bhi	2d2d0 <flatcc_verify_union_vector_field@@Base+0x180>
   2d1ec:	adds	ip, r6, ip
   2d1f0:	beq	2d29c <flatcc_verify_union_vector_field@@Base+0x14c>
   2d1f4:	add	r1, r1, #2
   2d1f8:	lsl	r1, r1, #1
   2d1fc:	uxth	r1, r1
   2d200:	cmp	lr, r1
   2d204:	bls	2d300 <flatcc_verify_union_vector_field@@Base+0x1b0>
   2d208:	ldrh	r1, [r5, r1]
   2d20c:	cmp	r1, #0
   2d210:	beq	2d300 <flatcc_verify_union_vector_field@@Base+0x1b0>
   2d214:	add	r2, r1, #4
   2d218:	cmp	r2, r7
   2d21c:	movhi	r0, #13
   2d220:	bhi	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d224:	add	r2, r1, r8
   2d228:	tst	r2, #3
   2d22c:	movne	r0, #12
   2d230:	bne	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d234:	cmp	r2, #0
   2d238:	beq	2d29c <flatcc_verify_union_vector_field@@Base+0x14c>
   2d23c:	ldr	lr, [r0, #8]
   2d240:	cmp	lr, #0
   2d244:	movle	r0, #3
   2d248:	ble	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d24c:	ldr	r1, [r6, r2]
   2d250:	add	r1, r2, r1
   2d254:	cmp	r2, r1
   2d258:	bcs	2d314 <flatcc_verify_union_vector_field@@Base+0x1c4>
   2d25c:	ldr	r9, [r0, #4]
   2d260:	add	r4, r1, #4
   2d264:	cmp	r9, r4
   2d268:	bcc	2d314 <flatcc_verify_union_vector_field@@Base+0x1c4>
   2d26c:	ands	r2, r4, #3
   2d270:	beq	2d31c <flatcc_verify_union_vector_field@@Base+0x1cc>
   2d274:	cmp	r2, #0
   2d278:	bne	2d314 <flatcc_verify_union_vector_field@@Base+0x1c4>
   2d27c:	ldr	r3, [r6, r1]
   2d280:	cmn	r3, #-1073741823	; 0xc0000001
   2d284:	movhi	r0, #25
   2d288:	bhi	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d28c:	sub	r4, r9, r4
   2d290:	cmp	r4, r3, lsl #2
   2d294:	movcc	r0, #26
   2d298:	bcc	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d29c:	mov	r0, #0
   2d2a0:	add	sp, sp, #44	; 0x2c
   2d2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2a8:	add	r3, r1, #2
   2d2ac:	lsl	r3, r3, #1
   2d2b0:	uxth	r3, r3
   2d2b4:	cmp	lr, r3
   2d2b8:	bls	2d2ec <flatcc_verify_union_vector_field@@Base+0x19c>
   2d2bc:	ldrh	r3, [r5, r3]
   2d2c0:	cmp	r3, #0
   2d2c4:	beq	2d2ec <flatcc_verify_union_vector_field@@Base+0x19c>
   2d2c8:	cmp	r2, #0
   2d2cc:	beq	2d29c <flatcc_verify_union_vector_field@@Base+0x14c>
   2d2d0:	mvn	ip, #0
   2d2d4:	mov	r3, #1
   2d2d8:	mov	r1, r4
   2d2dc:	stm	sp, {r3, ip}
   2d2e0:	bl	2bca8 <flatcc_verify_vector_field@@Base>
   2d2e4:	add	sp, sp, #44	; 0x2c
   2d2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2ec:	cmp	r2, #0
   2d2f0:	movne	r0, #22
   2d2f4:	moveq	r0, #0
   2d2f8:	add	sp, sp, #44	; 0x2c
   2d2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d300:	cmp	r2, #0
   2d304:	movne	r0, #4
   2d308:	moveq	r0, #0
   2d30c:	add	sp, sp, #44	; 0x2c
   2d310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d314:	mov	r0, #16
   2d318:	b	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d31c:	ldr	r7, [r6, r1]
   2d320:	add	r2, r6, r1
   2d324:	cmn	r7, #-1073741823	; 0xc0000001
   2d328:	bhi	2d27c <flatcc_verify_union_vector_field@@Base+0x12c>
   2d32c:	lsl	r0, r7, #2
   2d330:	sub	r5, r9, r4
   2d334:	cmp	r5, r0
   2d338:	bcc	2d27c <flatcc_verify_union_vector_field@@Base+0x12c>
   2d33c:	ldr	r8, [ip]
   2d340:	add	r5, ip, r8
   2d344:	ldr	ip, [ip, r8]
   2d348:	cmp	ip, r7
   2d34c:	movne	r0, #34	; 0x22
   2d350:	bne	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d354:	sub	lr, lr, #1
   2d358:	cmp	ip, #0
   2d35c:	str	lr, [sp, #24]
   2d360:	str	r6, [sp, #16]
   2d364:	str	r9, [sp, #20]
   2d368:	beq	2d29c <flatcc_verify_union_vector_field@@Base+0x14c>
   2d36c:	add	r1, r1, r0
   2d370:	add	r7, r6, r1
   2d374:	add	r5, r5, #4
   2d378:	mov	r6, r2
   2d37c:	b	2d39c <flatcc_verify_union_vector_field@@Base+0x24c>
   2d380:	ldrb	r2, [r5]
   2d384:	cmp	r2, #0
   2d388:	bne	2d3ec <flatcc_verify_union_vector_field@@Base+0x29c>
   2d38c:	cmp	r7, r6
   2d390:	add	r4, r4, #4
   2d394:	add	r5, r5, #1
   2d398:	beq	2d29c <flatcc_verify_union_vector_field@@Base+0x14c>
   2d39c:	ldr	r2, [r6, #4]!
   2d3a0:	add	r0, sp, #16
   2d3a4:	cmp	r2, #0
   2d3a8:	beq	2d380 <flatcc_verify_union_vector_field@@Base+0x230>
   2d3ac:	ldrb	r1, [r5]
   2d3b0:	cmp	r1, #0
   2d3b4:	beq	2d3f4 <flatcc_verify_union_vector_field@@Base+0x2a4>
   2d3b8:	str	r3, [sp, #12]
   2d3bc:	strb	r1, [sp, #28]
   2d3c0:	str	r4, [sp, #32]
   2d3c4:	str	r2, [sp, #36]	; 0x24
   2d3c8:	blx	r3
   2d3cc:	ldr	r3, [sp, #12]
   2d3d0:	cmp	r0, #0
   2d3d4:	beq	2d38c <flatcc_verify_union_vector_field@@Base+0x23c>
   2d3d8:	add	r0, sp, #16
   2d3dc:	blx	r3
   2d3e0:	b	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d3e4:	ldr	r6, [r0]
   2d3e8:	b	2d1ec <flatcc_verify_union_vector_field@@Base+0x9c>
   2d3ec:	mov	r0, #32
   2d3f0:	b	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d3f4:	mov	r0, #33	; 0x21
   2d3f8:	b	2d2e4 <flatcc_verify_union_vector_field@@Base+0x194>
   2d3fc:	andeq	r0, r0, r0
   2d400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d404:	sub	sp, sp, #36	; 0x24
   2d408:	mov	r5, r2
   2d40c:	ldr	r7, [sp, #72]	; 0x48
   2d410:	cmp	r1, r2
   2d414:	mov	r2, #0
   2d418:	mov	r8, r0
   2d41c:	mov	fp, r3
   2d420:	strb	r2, [r7]
   2d424:	beq	2d580 <flatcc_verify_union_vector_field@@Base+0x430>
   2d428:	ldrb	r3, [r1]
   2d42c:	mov	r6, r1
   2d430:	cmp	r3, #34	; 0x22
   2d434:	beq	2d6c8 <flatcc_verify_union_vector_field@@Base+0x578>
   2d438:	cmp	r3, #46	; 0x2e
   2d43c:	movne	r3, #1
   2d440:	strne	r3, [r0, #12]
   2d444:	beq	2d558 <flatcc_verify_union_vector_field@@Base+0x408>
   2d448:	add	sl, sp, #20
   2d44c:	add	r9, sp, #24
   2d450:	mov	r4, fp
   2d454:	b	2d46c <flatcc_verify_union_vector_field@@Base+0x31c>
   2d458:	cmp	r6, r0
   2d45c:	bne	2d49c <flatcc_verify_union_vector_field@@Base+0x34c>
   2d460:	ldr	r3, [r4, #4]!
   2d464:	cmp	r3, #0
   2d468:	beq	2d4dc <flatcc_verify_union_vector_field@@Base+0x38c>
   2d46c:	stm	sp, {r9, sl}
   2d470:	add	r3, sp, #16
   2d474:	mov	r2, r5
   2d478:	mov	r1, r6
   2d47c:	mov	r0, r8
   2d480:	ldr	ip, [r4]
   2d484:	blx	ip
   2d488:	cmp	r5, r0
   2d48c:	bne	2d458 <flatcc_verify_union_vector_field@@Base+0x308>
   2d490:	mov	r0, r5
   2d494:	add	sp, sp, #36	; 0x24
   2d498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d49c:	ldr	r3, [sp, #16]
   2d4a0:	cmp	r3, #0
   2d4a4:	beq	2d508 <flatcc_verify_union_vector_field@@Base+0x3b8>
   2d4a8:	ldr	r3, [r8, #24]
   2d4ac:	cmp	r3, #0
   2d4b0:	bne	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d4b4:	ldr	r3, [r8, #4]
   2d4b8:	mov	r2, #8
   2d4bc:	sub	r3, r0, r3
   2d4c0:	add	r3, r3, #1
   2d4c4:	str	r0, [r8, #36]	; 0x24
   2d4c8:	str	r3, [r8, #20]
   2d4cc:	mov	r0, r5
   2d4d0:	str	r2, [r8, #24]
   2d4d4:	add	sp, sp, #36	; 0x24
   2d4d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4dc:	ldr	r3, [r8, #24]
   2d4e0:	cmp	r3, #0
   2d4e4:	bne	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d4e8:	ldr	r3, [r8, #4]
   2d4ec:	mov	r2, #23
   2d4f0:	sub	r3, r6, r3
   2d4f4:	add	r3, r3, #1
   2d4f8:	str	r6, [r8, #36]	; 0x24
   2d4fc:	str	r3, [r8, #20]
   2d500:	str	r2, [r8, #24]
   2d504:	b	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d508:	ldrd	r2, [sp, #24]
   2d50c:	cmp	r3, #0
   2d510:	cmpeq	r2, #255	; 0xff
   2d514:	strd	r2, [sp, #8]
   2d518:	bhi	2d540 <flatcc_verify_union_vector_field@@Base+0x3f0>
   2d51c:	ldrb	r3, [r7]
   2d520:	ldr	r1, [sp, #20]
   2d524:	ldr	r2, [sp, #8]
   2d528:	cmp	r1, #0
   2d52c:	add	r3, r3, r2
   2d530:	strb	r3, [r7]
   2d534:	beq	2d718 <flatcc_verify_union_vector_field@@Base+0x5c8>
   2d538:	mov	r6, r0
   2d53c:	b	2d450 <flatcc_verify_union_vector_field@@Base+0x300>
   2d540:	ldr	r3, [r8, #24]
   2d544:	cmp	r3, #0
   2d548:	bne	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d54c:	ldr	r3, [r8, #4]
   2d550:	mov	r2, #7
   2d554:	b	2d4bc <flatcc_verify_union_vector_field@@Base+0x36c>
   2d558:	ldr	r3, [r0, #24]
   2d55c:	cmp	r3, #0
   2d560:	bne	2d580 <flatcc_verify_union_vector_field@@Base+0x430>
   2d564:	ldr	r3, [r0, #4]
   2d568:	mov	r2, #5
   2d56c:	sub	r3, r1, r3
   2d570:	add	r3, r3, #1
   2d574:	str	r1, [r8, #36]	; 0x24
   2d578:	str	r3, [r0, #20]
   2d57c:	str	r2, [r0, #24]
   2d580:	ldr	r3, [r8, #12]
   2d584:	cmp	r3, #0
   2d588:	moveq	r1, r5
   2d58c:	bne	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d590:	mov	r0, #0
   2d594:	cmp	r5, r1
   2d598:	beq	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d59c:	ldrb	r2, [r1]
   2d5a0:	cmp	r2, #32
   2d5a4:	bne	2d5cc <flatcc_verify_union_vector_field@@Base+0x47c>
   2d5a8:	add	r3, r1, #1
   2d5ac:	b	2d5bc <flatcc_verify_union_vector_field@@Base+0x46c>
   2d5b0:	ldrb	r2, [r3], #1
   2d5b4:	cmp	r2, #32
   2d5b8:	bne	2d5cc <flatcc_verify_union_vector_field@@Base+0x47c>
   2d5bc:	cmp	r3, r5
   2d5c0:	mov	r1, r3
   2d5c4:	bne	2d5b0 <flatcc_verify_union_vector_field@@Base+0x460>
   2d5c8:	b	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d5cc:	cmp	r2, #32
   2d5d0:	bhi	2d68c <flatcc_verify_union_vector_field@@Base+0x53c>
   2d5d4:	sub	r2, r2, #9
   2d5d8:	cmp	r2, #23
   2d5dc:	ldrls	pc, [pc, r2, lsl #2]
   2d5e0:	b	2d69c <flatcc_verify_union_vector_field@@Base+0x54c>
   2d5e4:	muleq	r2, r4, r6
   2d5e8:	andeq	sp, r2, r4, ror #12
   2d5ec:	muleq	r2, ip, r6
   2d5f0:	muleq	r2, ip, r6
   2d5f4:	andeq	sp, r2, r4, asr #12
   2d5f8:	muleq	r2, ip, r6
   2d5fc:	muleq	r2, ip, r6
   2d600:	muleq	r2, ip, r6
   2d604:	muleq	r2, ip, r6
   2d608:	muleq	r2, ip, r6
   2d60c:	muleq	r2, ip, r6
   2d610:	muleq	r2, ip, r6
   2d614:	muleq	r2, ip, r6
   2d618:	muleq	r2, ip, r6
   2d61c:	muleq	r2, ip, r6
   2d620:	muleq	r2, ip, r6
   2d624:	muleq	r2, ip, r6
   2d628:	muleq	r2, ip, r6
   2d62c:	muleq	r2, ip, r6
   2d630:	muleq	r2, ip, r6
   2d634:	muleq	r2, ip, r6
   2d638:	muleq	r2, ip, r6
   2d63c:	muleq	r2, ip, r6
   2d640:	muleq	r2, r4, r5
   2d644:	sub	r3, r5, r1
   2d648:	cmp	r3, #1
   2d64c:	movle	r3, r0
   2d650:	ldrbgt	r3, [r1, #1]
   2d654:	subgt	r3, r3, #10
   2d658:	clzgt	r3, r3
   2d65c:	lsrgt	r3, r3, #5
   2d660:	add	r1, r1, r3
   2d664:	ldr	r3, [r8, #16]
   2d668:	add	r1, r1, #1
   2d66c:	add	r3, r3, #1
   2d670:	str	r1, [r8, #4]
   2d674:	str	r3, [r8, #16]
   2d678:	cmp	r5, r1
   2d67c:	beq	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d680:	ldrb	r2, [r1]
   2d684:	cmp	r2, #32
   2d688:	bls	2d5d4 <flatcc_verify_union_vector_field@@Base+0x484>
   2d68c:	mov	r6, r1
   2d690:	b	2d448 <flatcc_verify_union_vector_field@@Base+0x2f8>
   2d694:	add	r1, r1, #1
   2d698:	b	2d678 <flatcc_verify_union_vector_field@@Base+0x528>
   2d69c:	ldr	r3, [r8, #24]
   2d6a0:	cmp	r3, #0
   2d6a4:	bne	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d6a8:	ldr	r3, [r8, #4]
   2d6ac:	mov	r2, #5
   2d6b0:	sub	r3, r1, r3
   2d6b4:	add	r3, r3, #1
   2d6b8:	str	r1, [r8, #36]	; 0x24
   2d6bc:	str	r3, [r8, #20]
   2d6c0:	str	r2, [r8, #24]
   2d6c4:	b	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d6c8:	add	r1, r1, #1
   2d6cc:	sub	r3, r5, r1
   2d6d0:	cmp	r3, #1
   2d6d4:	str	r2, [r0, #12]
   2d6d8:	ble	2d590 <flatcc_verify_union_vector_field@@Base+0x440>
   2d6dc:	ldrb	r3, [r6, #1]
   2d6e0:	cmp	r3, #32
   2d6e4:	bhi	2d708 <flatcc_verify_union_vector_field@@Base+0x5b8>
   2d6e8:	bne	2d590 <flatcc_verify_union_vector_field@@Base+0x440>
   2d6ec:	ldrb	r3, [r6, #2]
   2d6f0:	cmp	r3, #32
   2d6f4:	addhi	r6, r6, #2
   2d6f8:	bls	2d590 <flatcc_verify_union_vector_field@@Base+0x440>
   2d6fc:	cmp	r5, r6
   2d700:	bne	2d448 <flatcc_verify_union_vector_field@@Base+0x2f8>
   2d704:	b	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d708:	mov	r6, r1
   2d70c:	cmp	r5, r6
   2d710:	bne	2d448 <flatcc_verify_union_vector_field@@Base+0x2f8>
   2d714:	b	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d718:	mov	r5, r0
   2d71c:	b	2d490 <flatcc_verify_union_vector_field@@Base+0x340>
   2d720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d724:	sub	sp, sp, #28
   2d728:	mov	r9, r3
   2d72c:	ldrh	r3, [sp, #68]	; 0x44
   2d730:	mov	ip, #0
   2d734:	mov	r6, r0
   2d738:	ldr	r0, [r0]
   2d73c:	mov	r4, r1
   2d740:	mov	r5, r2
   2d744:	str	ip, [sp, #20]
   2d748:	str	r3, [sp, #12]
   2d74c:	bl	28234 <flatcc_builder_start_offset_vector@@Base>
   2d750:	cmp	r0, #0
   2d754:	beq	2d798 <flatcc_verify_union_vector_field@@Base+0x648>
   2d758:	ldr	r3, [r6, #24]
   2d75c:	cmp	r3, #0
   2d760:	beq	2d770 <flatcc_verify_union_vector_field@@Base+0x620>
   2d764:	mov	r0, r5
   2d768:	add	sp, sp, #28
   2d76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d770:	ldr	r3, [r6, #4]
   2d774:	mov	r2, #33	; 0x21
   2d778:	sub	r3, r4, r3
   2d77c:	add	r3, r3, #1
   2d780:	mov	r0, r5
   2d784:	str	r4, [r6, #36]	; 0x24
   2d788:	str	r3, [r6, #20]
   2d78c:	str	r2, [r6, #24]
   2d790:	add	sp, sp, #28
   2d794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d798:	cmp	r4, r5
   2d79c:	beq	2d7ac <flatcc_verify_union_vector_field@@Base+0x65c>
   2d7a0:	ldrb	r3, [r4]
   2d7a4:	cmp	r3, #91	; 0x5b
   2d7a8:	beq	2d834 <flatcc_verify_union_vector_field@@Base+0x6e4>
   2d7ac:	ldr	r7, [r6, #24]
   2d7b0:	cmp	r7, #0
   2d7b4:	beq	2d814 <flatcc_verify_union_vector_field@@Base+0x6c4>
   2d7b8:	mov	r7, #0
   2d7bc:	ldr	r3, [sp, #64]	; 0x40
   2d7c0:	cmp	r3, r7
   2d7c4:	moveq	r4, r5
   2d7c8:	bne	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2d7cc:	mov	r1, r9
   2d7d0:	ldr	r0, [r6]
   2d7d4:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   2d7d8:	mov	r1, r0
   2d7dc:	ldr	r0, [r6]
   2d7e0:	bl	298c0 <flatcc_builder_end_offset_vector_for_unions@@Base>
   2d7e4:	cmp	r0, #0
   2d7e8:	str	r0, [sp, #20]
   2d7ec:	beq	2d758 <flatcc_verify_union_vector_field@@Base+0x608>
   2d7f0:	ldr	r1, [sp, #12]
   2d7f4:	ldr	r0, [r6]
   2d7f8:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   2d7fc:	cmp	r0, #0
   2d800:	beq	2d758 <flatcc_verify_union_vector_field@@Base+0x608>
   2d804:	ldr	r3, [sp, #20]
   2d808:	mov	r5, r4
   2d80c:	str	r3, [r0]
   2d810:	b	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2d814:	ldr	r3, [r6, #4]
   2d818:	mov	r2, #22
   2d81c:	sub	r3, r4, r3
   2d820:	add	r3, r3, #1
   2d824:	str	r4, [r6, #36]	; 0x24
   2d828:	str	r3, [r6, #20]
   2d82c:	str	r2, [r6, #24]
   2d830:	b	2d7bc <flatcc_verify_union_vector_field@@Base+0x66c>
   2d834:	add	r8, r4, #1
   2d838:	sub	r3, r5, r8
   2d83c:	cmp	r3, #1
   2d840:	ble	2d854 <flatcc_verify_union_vector_field@@Base+0x704>
   2d844:	ldrb	r1, [r4, #1]
   2d848:	cmp	r1, #32
   2d84c:	bhi	2e0b4 <flatcc_verify_union_vector_field@@Base+0xf64>
   2d850:	beq	2e0a4 <flatcc_verify_union_vector_field@@Base+0xf54>
   2d854:	mov	r0, #0
   2d858:	cmp	r5, r8
   2d85c:	beq	2e108 <flatcc_verify_union_vector_field@@Base+0xfb8>
   2d860:	ldrb	r1, [r8]
   2d864:	cmp	r1, #32
   2d868:	bne	2df54 <flatcc_verify_union_vector_field@@Base+0xe04>
   2d86c:	add	r3, r8, #1
   2d870:	b	2d880 <flatcc_verify_union_vector_field@@Base+0x730>
   2d874:	ldrb	r1, [r3], #1
   2d878:	cmp	r1, #32
   2d87c:	bne	2df54 <flatcc_verify_union_vector_field@@Base+0xe04>
   2d880:	cmp	r3, r5
   2d884:	mov	r8, r3
   2d888:	bne	2d874 <flatcc_verify_union_vector_field@@Base+0x724>
   2d88c:	ldr	r3, [sp, #64]	; 0x40
   2d890:	cmp	r3, #0
   2d894:	beq	2dca8 <flatcc_verify_union_vector_field@@Base+0xb58>
   2d898:	mov	r7, #0
   2d89c:	add	sl, sp, #20
   2d8a0:	mov	fp, #1
   2d8a4:	mov	r1, r9
   2d8a8:	ldr	r0, [r6]
   2d8ac:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   2d8b0:	mov	r1, r8
   2d8b4:	mov	r2, r5
   2d8b8:	ldr	ip, [sp, #72]	; 0x48
   2d8bc:	ldrb	r3, [r0, r7]
   2d8c0:	str	sl, [sp]
   2d8c4:	mov	r0, r6
   2d8c8:	blx	ip
   2d8cc:	cmp	r5, r0
   2d8d0:	mov	r4, r0
   2d8d4:	beq	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2d8d8:	mov	r1, fp
   2d8dc:	ldr	r0, [r6]
   2d8e0:	bl	27898 <flatcc_builder_extend_offset_vector@@Base>
   2d8e4:	cmp	r0, #0
   2d8e8:	beq	2d758 <flatcc_verify_union_vector_field@@Base+0x608>
   2d8ec:	sub	r2, r5, r4
   2d8f0:	ldr	r3, [sp, #20]
   2d8f4:	cmp	r2, #1
   2d8f8:	str	r3, [r0]
   2d8fc:	ldrb	r2, [r4]
   2d900:	ble	2da78 <flatcc_verify_union_vector_field@@Base+0x928>
   2d904:	cmp	r2, #32
   2d908:	bhi	2d9d0 <flatcc_verify_union_vector_field@@Base+0x880>
   2d90c:	beq	2daa8 <flatcc_verify_union_vector_field@@Base+0x958>
   2d910:	cmp	r2, #32
   2d914:	bhi	2d9d0 <flatcc_verify_union_vector_field@@Base+0x880>
   2d918:	sub	r2, r2, #9
   2d91c:	cmp	r2, #23
   2d920:	ldrls	pc, [pc, r2, lsl #2]
   2d924:	b	2da64 <flatcc_verify_union_vector_field@@Base+0x914>
   2d928:	strdeq	sp, [r2], -r4
   2d92c:	andeq	sp, r2, r8, lsr #19
   2d930:	andeq	sp, r2, r4, ror #20
   2d934:	andeq	sp, r2, r4, ror #20
   2d938:	andeq	sp, r2, r8, lsl #19
   2d93c:	andeq	sp, r2, r4, ror #20
   2d940:	andeq	sp, r2, r4, ror #20
   2d944:	andeq	sp, r2, r4, ror #20
   2d948:	andeq	sp, r2, r4, ror #20
   2d94c:	andeq	sp, r2, r4, ror #20
   2d950:	andeq	sp, r2, r4, ror #20
   2d954:	andeq	sp, r2, r4, ror #20
   2d958:	andeq	sp, r2, r4, ror #20
   2d95c:	andeq	sp, r2, r4, ror #20
   2d960:	andeq	sp, r2, r4, ror #20
   2d964:	andeq	sp, r2, r4, ror #20
   2d968:	andeq	sp, r2, r4, ror #20
   2d96c:	andeq	sp, r2, r4, ror #20
   2d970:	andeq	sp, r2, r4, ror #20
   2d974:	andeq	sp, r2, r4, ror #20
   2d978:	andeq	sp, r2, r4, ror #20
   2d97c:	andeq	sp, r2, r4, ror #20
   2d980:	andeq	sp, r2, r4, ror #20
   2d984:	strdeq	sp, [r2], -ip
   2d988:	sub	r3, r5, r4
   2d98c:	cmp	r3, #1
   2d990:	movle	r3, #0
   2d994:	ldrbgt	r3, [r4, #1]
   2d998:	subgt	r3, r3, #10
   2d99c:	clzgt	r3, r3
   2d9a0:	lsrgt	r3, r3, #5
   2d9a4:	add	r4, r4, r3
   2d9a8:	ldr	r3, [r6, #16]
   2d9ac:	add	r4, r4, #1
   2d9b0:	add	r3, r3, #1
   2d9b4:	str	r4, [r6, #4]
   2d9b8:	str	r3, [r6, #16]
   2d9bc:	cmp	r5, r4
   2d9c0:	beq	2da70 <flatcc_verify_union_vector_field@@Base+0x920>
   2d9c4:	ldrb	r2, [r4]
   2d9c8:	cmp	r2, #32
   2d9cc:	bls	2d918 <flatcc_verify_union_vector_field@@Base+0x7c8>
   2d9d0:	cmp	r2, #44	; 0x2c
   2d9d4:	beq	2dac8 <flatcc_verify_union_vector_field@@Base+0x978>
   2d9d8:	cmp	r2, #93	; 0x5d
   2d9dc:	beq	2db70 <flatcc_verify_union_vector_field@@Base+0xa20>
   2d9e0:	ldr	r3, [r6, #24]
   2d9e4:	cmp	r3, #0
   2d9e8:	beq	2da84 <flatcc_verify_union_vector_field@@Base+0x934>
   2d9ec:	add	r7, r7, #1
   2d9f0:	b	2d7bc <flatcc_verify_union_vector_field@@Base+0x66c>
   2d9f4:	add	r4, r4, #1
   2d9f8:	b	2d9bc <flatcc_verify_union_vector_field@@Base+0x86c>
   2d9fc:	cmp	r5, r4
   2da00:	beq	2da70 <flatcc_verify_union_vector_field@@Base+0x920>
   2da04:	add	r3, r4, #1
   2da08:	b	2da18 <flatcc_verify_union_vector_field@@Base+0x8c8>
   2da0c:	ldrb	r2, [r3], #1
   2da10:	cmp	r2, #32
   2da14:	bne	2d910 <flatcc_verify_union_vector_field@@Base+0x7c0>
   2da18:	cmp	r5, r3
   2da1c:	mov	r4, r3
   2da20:	bne	2da0c <flatcc_verify_union_vector_field@@Base+0x8bc>
   2da24:	add	r7, r7, #1
   2da28:	mov	r1, r4
   2da2c:	ldr	r3, [sp, #64]	; 0x40
   2da30:	cmp	r3, r7
   2da34:	beq	2e100 <flatcc_verify_union_vector_field@@Base+0xfb0>
   2da38:	ldr	r3, [r6, #24]
   2da3c:	cmp	r3, #0
   2da40:	bne	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2da44:	ldr	r3, [r6, #4]
   2da48:	mov	r2, #30
   2da4c:	sub	r3, r1, r3
   2da50:	add	r3, r3, #1
   2da54:	str	r1, [r6, #36]	; 0x24
   2da58:	str	r3, [r6, #20]
   2da5c:	str	r2, [r6, #24]
   2da60:	b	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2da64:	ldr	r3, [r6, #24]
   2da68:	cmp	r3, #0
   2da6c:	beq	2db4c <flatcc_verify_union_vector_field@@Base+0x9fc>
   2da70:	mov	r4, r5
   2da74:	b	2da24 <flatcc_verify_union_vector_field@@Base+0x8d4>
   2da78:	cmp	r2, #32
   2da7c:	beq	2da04 <flatcc_verify_union_vector_field@@Base+0x8b4>
   2da80:	b	2d910 <flatcc_verify_union_vector_field@@Base+0x7c0>
   2da84:	ldr	r3, [r6, #4]
   2da88:	str	r4, [r6, #36]	; 0x24
   2da8c:	sub	r4, r4, r3
   2da90:	add	r4, r4, #1
   2da94:	mov	r3, #9
   2da98:	add	r7, r7, #1
   2da9c:	str	r4, [r6, #20]
   2daa0:	str	r3, [r6, #24]
   2daa4:	b	2d7bc <flatcc_verify_union_vector_field@@Base+0x66c>
   2daa8:	ldrb	r2, [r4, #1]
   2daac:	cmp	r2, #32
   2dab0:	bls	2da04 <flatcc_verify_union_vector_field@@Base+0x8b4>
   2dab4:	add	r4, r4, #1
   2dab8:	cmp	r5, r4
   2dabc:	beq	2da70 <flatcc_verify_union_vector_field@@Base+0x920>
   2dac0:	cmp	r2, #44	; 0x2c
   2dac4:	bne	2d9d8 <flatcc_verify_union_vector_field@@Base+0x888>
   2dac8:	add	r8, r4, #1
   2dacc:	sub	r3, r5, r8
   2dad0:	cmp	r3, #1
   2dad4:	ble	2dae8 <flatcc_verify_union_vector_field@@Base+0x998>
   2dad8:	ldrb	r1, [r4, #1]
   2dadc:	cmp	r1, #32
   2dae0:	bhi	2dd18 <flatcc_verify_union_vector_field@@Base+0xbc8>
   2dae4:	beq	2dd08 <flatcc_verify_union_vector_field@@Base+0xbb8>
   2dae8:	cmp	r5, r8
   2daec:	beq	2dd20 <flatcc_verify_union_vector_field@@Base+0xbd0>
   2daf0:	ldrb	r1, [r8]
   2daf4:	cmp	r1, #32
   2daf8:	bne	2dbd0 <flatcc_verify_union_vector_field@@Base+0xa80>
   2dafc:	add	r3, r8, #1
   2db00:	b	2db10 <flatcc_verify_union_vector_field@@Base+0x9c0>
   2db04:	ldrb	r1, [r3], #1
   2db08:	cmp	r1, #32
   2db0c:	bne	2dbd0 <flatcc_verify_union_vector_field@@Base+0xa80>
   2db10:	cmp	r3, r5
   2db14:	mov	r8, r3
   2db18:	bne	2db04 <flatcc_verify_union_vector_field@@Base+0x9b4>
   2db1c:	ldr	r3, [r6, #24]
   2db20:	cmp	r3, #0
   2db24:	bne	2d9ec <flatcc_verify_union_vector_field@@Base+0x89c>
   2db28:	ldr	r3, [r6, #4]
   2db2c:	mov	r2, #9
   2db30:	sub	r3, r8, r3
   2db34:	add	r3, r3, #1
   2db38:	str	r8, [r6, #36]	; 0x24
   2db3c:	add	r7, r7, #1
   2db40:	str	r3, [r6, #20]
   2db44:	str	r2, [r6, #24]
   2db48:	b	2d7bc <flatcc_verify_union_vector_field@@Base+0x66c>
   2db4c:	ldr	r3, [r6, #4]
   2db50:	mov	r2, #5
   2db54:	sub	r3, r4, r3
   2db58:	add	r3, r3, #1
   2db5c:	str	r4, [r6, #36]	; 0x24
   2db60:	str	r3, [r6, #20]
   2db64:	str	r2, [r6, #24]
   2db68:	mov	r4, r5
   2db6c:	b	2da24 <flatcc_verify_union_vector_field@@Base+0x8d4>
   2db70:	add	r1, r4, #1
   2db74:	sub	r3, r5, r1
   2db78:	cmp	r3, #1
   2db7c:	ble	2db90 <flatcc_verify_union_vector_field@@Base+0xa40>
   2db80:	ldrb	r3, [r4, #1]
   2db84:	cmp	r3, #32
   2db88:	bhi	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2db8c:	beq	2de24 <flatcc_verify_union_vector_field@@Base+0xcd4>
   2db90:	mov	r0, #0
   2db94:	cmp	r5, r1
   2db98:	beq	2e0c0 <flatcc_verify_union_vector_field@@Base+0xf70>
   2db9c:	ldrb	r2, [r1]
   2dba0:	cmp	r2, #32
   2dba4:	bne	2dd28 <flatcc_verify_union_vector_field@@Base+0xbd8>
   2dba8:	add	r3, r1, #1
   2dbac:	b	2dbbc <flatcc_verify_union_vector_field@@Base+0xa6c>
   2dbb0:	ldrb	r2, [r3], #1
   2dbb4:	cmp	r2, #32
   2dbb8:	bne	2dd28 <flatcc_verify_union_vector_field@@Base+0xbd8>
   2dbbc:	cmp	r3, r5
   2dbc0:	mov	r1, r3
   2dbc4:	bne	2dbb0 <flatcc_verify_union_vector_field@@Base+0xa60>
   2dbc8:	add	r7, r7, #1
   2dbcc:	b	2da2c <flatcc_verify_union_vector_field@@Base+0x8dc>
   2dbd0:	cmp	r1, #32
   2dbd4:	bhi	2dc90 <flatcc_verify_union_vector_field@@Base+0xb40>
   2dbd8:	sub	r1, r1, #9
   2dbdc:	cmp	r1, #23
   2dbe0:	ldrls	pc, [pc, r1, lsl #2]
   2dbe4:	b	2dcdc <flatcc_verify_union_vector_field@@Base+0xb8c>
   2dbe8:	ldrdeq	sp, [r2], -r4
   2dbec:	andeq	sp, r2, r8, ror #24
   2dbf0:	ldrdeq	sp, [r2], -ip
   2dbf4:	ldrdeq	sp, [r2], -ip
   2dbf8:	andeq	sp, r2, r8, asr #24
   2dbfc:	ldrdeq	sp, [r2], -ip
   2dc00:	ldrdeq	sp, [r2], -ip
   2dc04:	ldrdeq	sp, [r2], -ip
   2dc08:	ldrdeq	sp, [r2], -ip
   2dc0c:	ldrdeq	sp, [r2], -ip
   2dc10:	ldrdeq	sp, [r2], -ip
   2dc14:	ldrdeq	sp, [r2], -ip
   2dc18:	ldrdeq	sp, [r2], -ip
   2dc1c:	ldrdeq	sp, [r2], -ip
   2dc20:	ldrdeq	sp, [r2], -ip
   2dc24:	ldrdeq	sp, [r2], -ip
   2dc28:	ldrdeq	sp, [r2], -ip
   2dc2c:	ldrdeq	sp, [r2], -ip
   2dc30:	ldrdeq	sp, [r2], -ip
   2dc34:	ldrdeq	sp, [r2], -ip
   2dc38:	ldrdeq	sp, [r2], -ip
   2dc3c:	ldrdeq	sp, [r2], -ip
   2dc40:	ldrdeq	sp, [r2], -ip
   2dc44:	andeq	sp, r2, r8, ror #21
   2dc48:	sub	r3, r5, r8
   2dc4c:	cmp	r3, #1
   2dc50:	movle	r3, #0
   2dc54:	ldrbgt	r3, [r8, #1]
   2dc58:	subgt	r3, r3, #10
   2dc5c:	clzgt	r3, r3
   2dc60:	lsrgt	r3, r3, #5
   2dc64:	add	r8, r8, r3
   2dc68:	ldr	r3, [r6, #16]
   2dc6c:	add	r8, r8, #1
   2dc70:	add	r3, r3, #1
   2dc74:	str	r8, [r6, #4]
   2dc78:	str	r3, [r6, #16]
   2dc7c:	cmp	r5, r8
   2dc80:	beq	2dd20 <flatcc_verify_union_vector_field@@Base+0xbd0>
   2dc84:	ldrb	r1, [r8]
   2dc88:	cmp	r1, #32
   2dc8c:	bls	2dbd8 <flatcc_verify_union_vector_field@@Base+0xa88>
   2dc90:	cmp	r1, #93	; 0x5d
   2dc94:	beq	2de38 <flatcc_verify_union_vector_field@@Base+0xce8>
   2dc98:	ldr	r3, [sp, #64]	; 0x40
   2dc9c:	add	r7, r7, #1
   2dca0:	cmp	r3, r7
   2dca4:	bne	2d8a4 <flatcc_verify_union_vector_field@@Base+0x754>
   2dca8:	ldr	r3, [r6, #24]
   2dcac:	cmp	r3, #0
   2dcb0:	bne	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2dcb4:	ldr	r3, [r6, #4]
   2dcb8:	mov	r1, #30
   2dcbc:	sub	r3, r8, r3
   2dcc0:	add	r3, r3, #1
   2dcc4:	str	r8, [r6, #36]	; 0x24
   2dcc8:	str	r3, [r6, #20]
   2dccc:	str	r1, [r6, #24]
   2dcd0:	b	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2dcd4:	add	r8, r8, #1
   2dcd8:	b	2dc7c <flatcc_verify_union_vector_field@@Base+0xb2c>
   2dcdc:	ldr	r3, [r6, #24]
   2dce0:	cmp	r3, #0
   2dce4:	bne	2d9ec <flatcc_verify_union_vector_field@@Base+0x89c>
   2dce8:	ldr	r3, [r6, #4]
   2dcec:	mov	r2, #5
   2dcf0:	sub	r3, r8, r3
   2dcf4:	add	r3, r3, #1
   2dcf8:	str	r8, [r6, #36]	; 0x24
   2dcfc:	str	r3, [r6, #20]
   2dd00:	str	r2, [r6, #24]
   2dd04:	b	2d9ec <flatcc_verify_union_vector_field@@Base+0x89c>
   2dd08:	ldrb	r1, [r4, #2]
   2dd0c:	cmp	r1, #32
   2dd10:	addhi	r8, r4, #2
   2dd14:	bls	2dae8 <flatcc_verify_union_vector_field@@Base+0x998>
   2dd18:	cmp	r5, r8
   2dd1c:	bne	2dc90 <flatcc_verify_union_vector_field@@Base+0xb40>
   2dd20:	mov	r8, r5
   2dd24:	b	2db1c <flatcc_verify_union_vector_field@@Base+0x9cc>
   2dd28:	cmp	r2, #32
   2dd2c:	bhi	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2dd30:	sub	r2, r2, #9
   2dd34:	cmp	r2, #23
   2dd38:	ldrls	pc, [pc, r2, lsl #2]
   2dd3c:	b	2ddf4 <flatcc_verify_union_vector_field@@Base+0xca4>
   2dd40:	andeq	sp, r2, ip, ror #27
   2dd44:	andeq	sp, r2, r0, asr #27
   2dd48:	strdeq	sp, [r2], -r4
   2dd4c:	strdeq	sp, [r2], -r4
   2dd50:	andeq	sp, r2, r0, lsr #27
   2dd54:	strdeq	sp, [r2], -r4
   2dd58:	strdeq	sp, [r2], -r4
   2dd5c:	strdeq	sp, [r2], -r4
   2dd60:	strdeq	sp, [r2], -r4
   2dd64:	strdeq	sp, [r2], -r4
   2dd68:	strdeq	sp, [r2], -r4
   2dd6c:	strdeq	sp, [r2], -r4
   2dd70:	strdeq	sp, [r2], -r4
   2dd74:	strdeq	sp, [r2], -r4
   2dd78:	strdeq	sp, [r2], -r4
   2dd7c:	strdeq	sp, [r2], -r4
   2dd80:	strdeq	sp, [r2], -r4
   2dd84:	strdeq	sp, [r2], -r4
   2dd88:	strdeq	sp, [r2], -r4
   2dd8c:	strdeq	sp, [r2], -r4
   2dd90:	strdeq	sp, [r2], -r4
   2dd94:	strdeq	sp, [r2], -r4
   2dd98:	strdeq	sp, [r2], -r4
   2dd9c:	muleq	r2, r4, fp
   2dda0:	sub	r3, r5, r1
   2dda4:	cmp	r3, #1
   2dda8:	movle	r3, r0
   2ddac:	ldrbgt	r3, [r1, #1]
   2ddb0:	subgt	r3, r3, #10
   2ddb4:	clzgt	r3, r3
   2ddb8:	lsrgt	r3, r3, #5
   2ddbc:	add	r1, r1, r3
   2ddc0:	ldr	r3, [r6, #16]
   2ddc4:	add	r1, r1, #1
   2ddc8:	add	r3, r3, #1
   2ddcc:	str	r1, [r6, #4]
   2ddd0:	str	r3, [r6, #16]
   2ddd4:	cmp	r5, r1
   2ddd8:	beq	2e0c0 <flatcc_verify_union_vector_field@@Base+0xf70>
   2dddc:	ldrb	r2, [r1]
   2dde0:	cmp	r2, #32
   2dde4:	bls	2dd30 <flatcc_verify_union_vector_field@@Base+0xbe0>
   2dde8:	b	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2ddec:	add	r1, r1, #1
   2ddf0:	b	2ddd4 <flatcc_verify_union_vector_field@@Base+0xc84>
   2ddf4:	ldr	r3, [r6, #24]
   2ddf8:	cmp	r3, #0
   2ddfc:	bne	2d9ec <flatcc_verify_union_vector_field@@Base+0x89c>
   2de00:	ldr	r3, [r6, #4]
   2de04:	mov	r2, #5
   2de08:	sub	r3, r1, r3
   2de0c:	add	r3, r3, #1
   2de10:	str	r1, [r6, #36]	; 0x24
   2de14:	add	r7, r7, #1
   2de18:	str	r3, [r6, #20]
   2de1c:	str	r2, [r6, #24]
   2de20:	b	2d7bc <flatcc_verify_union_vector_field@@Base+0x66c>
   2de24:	ldrb	r3, [r4, #2]
   2de28:	cmp	r3, #32
   2de2c:	bls	2db90 <flatcc_verify_union_vector_field@@Base+0xa40>
   2de30:	add	r1, r4, #2
   2de34:	b	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2de38:	add	r1, r8, #1
   2de3c:	sub	r3, r5, r1
   2de40:	cmp	r3, #1
   2de44:	ble	2de58 <flatcc_verify_union_vector_field@@Base+0xd08>
   2de48:	ldrb	r3, [r8, #1]
   2de4c:	cmp	r3, #32
   2de50:	bhi	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2de54:	beq	2e0c8 <flatcc_verify_union_vector_field@@Base+0xf78>
   2de58:	mov	r0, #0
   2de5c:	cmp	r5, r1
   2de60:	beq	2e0c0 <flatcc_verify_union_vector_field@@Base+0xf70>
   2de64:	ldrb	r2, [r1]
   2de68:	cmp	r2, #32
   2de6c:	bne	2ded4 <flatcc_verify_union_vector_field@@Base+0xd84>
   2de70:	add	r3, r1, #1
   2de74:	b	2de84 <flatcc_verify_union_vector_field@@Base+0xd34>
   2de78:	ldrb	r2, [r3], #1
   2de7c:	cmp	r2, #32
   2de80:	bne	2ded4 <flatcc_verify_union_vector_field@@Base+0xd84>
   2de84:	cmp	r5, r3
   2de88:	mov	r1, r3
   2de8c:	bne	2de78 <flatcc_verify_union_vector_field@@Base+0xd28>
   2de90:	b	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2de94:	sub	r3, r5, r1
   2de98:	cmp	r3, #1
   2de9c:	movle	r3, r0
   2dea0:	ldrbgt	r3, [r1, #1]
   2dea4:	subgt	r3, r3, #10
   2dea8:	clzgt	r3, r3
   2deac:	lsrgt	r3, r3, #5
   2deb0:	add	r1, r1, r3
   2deb4:	ldr	r3, [r6, #16]
   2deb8:	add	r1, r1, #1
   2debc:	add	r3, r3, #1
   2dec0:	str	r1, [r6, #4]
   2dec4:	str	r3, [r6, #16]
   2dec8:	cmp	r5, r1
   2decc:	beq	2e0c0 <flatcc_verify_union_vector_field@@Base+0xf70>
   2ded0:	ldrb	r2, [r1]
   2ded4:	cmp	r2, #32
   2ded8:	bhi	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2dedc:	sub	r2, r2, #9
   2dee0:	cmp	r2, #23
   2dee4:	ldrls	pc, [pc, r2, lsl #2]
   2dee8:	b	2ddf4 <flatcc_verify_union_vector_field@@Base+0xca4>
   2deec:	andeq	sp, r2, ip, asr #30
   2def0:			; <UNDEFINED> instruction: 0x0002deb4
   2def4:	strdeq	sp, [r2], -r4
   2def8:	strdeq	sp, [r2], -r4
   2defc:	muleq	r2, r4, lr
   2df00:	strdeq	sp, [r2], -r4
   2df04:	strdeq	sp, [r2], -r4
   2df08:	strdeq	sp, [r2], -r4
   2df0c:	strdeq	sp, [r2], -r4
   2df10:	strdeq	sp, [r2], -r4
   2df14:	strdeq	sp, [r2], -r4
   2df18:	strdeq	sp, [r2], -r4
   2df1c:	strdeq	sp, [r2], -r4
   2df20:	strdeq	sp, [r2], -r4
   2df24:	strdeq	sp, [r2], -r4
   2df28:	strdeq	sp, [r2], -r4
   2df2c:	strdeq	sp, [r2], -r4
   2df30:	strdeq	sp, [r2], -r4
   2df34:	strdeq	sp, [r2], -r4
   2df38:	strdeq	sp, [r2], -r4
   2df3c:	strdeq	sp, [r2], -r4
   2df40:	strdeq	sp, [r2], -r4
   2df44:	strdeq	sp, [r2], -r4
   2df48:	andeq	sp, r2, ip, asr lr
   2df4c:	add	r1, r1, #1
   2df50:	b	2dec8 <flatcc_verify_union_vector_field@@Base+0xd78>
   2df54:	cmp	r1, #32
   2df58:	bhi	2e014 <flatcc_verify_union_vector_field@@Base+0xec4>
   2df5c:	sub	r1, r1, #9
   2df60:	cmp	r1, #23
   2df64:	ldrls	pc, [pc, r1, lsl #2]
   2df68:	b	2e084 <flatcc_verify_union_vector_field@@Base+0xf34>
   2df6c:	andeq	lr, r2, ip, ror r0
   2df70:	andeq	sp, r2, ip, ror #31
   2df74:	andeq	lr, r2, r4, lsl #1
   2df78:	andeq	lr, r2, r4, lsl #1
   2df7c:	andeq	sp, r2, ip, asr #31
   2df80:	andeq	lr, r2, r4, lsl #1
   2df84:	andeq	lr, r2, r4, lsl #1
   2df88:	andeq	lr, r2, r4, lsl #1
   2df8c:	andeq	lr, r2, r4, lsl #1
   2df90:	andeq	lr, r2, r4, lsl #1
   2df94:	andeq	lr, r2, r4, lsl #1
   2df98:	andeq	lr, r2, r4, lsl #1
   2df9c:	andeq	lr, r2, r4, lsl #1
   2dfa0:	andeq	lr, r2, r4, lsl #1
   2dfa4:	andeq	lr, r2, r4, lsl #1
   2dfa8:	andeq	lr, r2, r4, lsl #1
   2dfac:	andeq	lr, r2, r4, lsl #1
   2dfb0:	andeq	lr, r2, r4, lsl #1
   2dfb4:	andeq	lr, r2, r4, lsl #1
   2dfb8:	andeq	lr, r2, r4, lsl #1
   2dfbc:	andeq	lr, r2, r4, lsl #1
   2dfc0:	andeq	lr, r2, r4, lsl #1
   2dfc4:	andeq	lr, r2, r4, lsl #1
   2dfc8:	andeq	sp, r2, r8, asr r8
   2dfcc:	sub	r3, r5, r8
   2dfd0:	cmp	r3, #1
   2dfd4:	movle	r3, r0
   2dfd8:	ldrbgt	r3, [r8, #1]
   2dfdc:	subgt	r3, r3, #10
   2dfe0:	clzgt	r3, r3
   2dfe4:	lsrgt	r3, r3, #5
   2dfe8:	add	r8, r8, r3
   2dfec:	ldr	r3, [r6, #16]
   2dff0:	add	r8, r8, #1
   2dff4:	add	r3, r3, #1
   2dff8:	str	r8, [r6, #4]
   2dffc:	str	r3, [r6, #16]
   2e000:	cmp	r5, r8
   2e004:	beq	2e108 <flatcc_verify_union_vector_field@@Base+0xfb8>
   2e008:	ldrb	r1, [r8]
   2e00c:	cmp	r1, #32
   2e010:	bls	2df5c <flatcc_verify_union_vector_field@@Base+0xe0c>
   2e014:	cmp	r1, #93	; 0x5d
   2e018:	bne	2d88c <flatcc_verify_union_vector_field@@Base+0x73c>
   2e01c:	add	r1, r8, #1
   2e020:	sub	r3, r5, r1
   2e024:	cmp	r3, #1
   2e028:	ble	2e03c <flatcc_verify_union_vector_field@@Base+0xeec>
   2e02c:	ldrb	r3, [r8, #1]
   2e030:	cmp	r3, #32
   2e034:	bhi	2e074 <flatcc_verify_union_vector_field@@Base+0xf24>
   2e038:	beq	2e110 <flatcc_verify_union_vector_field@@Base+0xfc0>
   2e03c:	mov	r0, #0
   2e040:	cmp	r5, r1
   2e044:	beq	2e220 <flatcc_verify_union_vector_field@@Base+0x10d0>
   2e048:	ldrb	r3, [r1]
   2e04c:	cmp	r3, #32
   2e050:	bne	2e128 <flatcc_verify_union_vector_field@@Base+0xfd8>
   2e054:	add	r2, r1, #1
   2e058:	b	2e068 <flatcc_verify_union_vector_field@@Base+0xf18>
   2e05c:	ldrb	r3, [r2], #1
   2e060:	cmp	r3, #32
   2e064:	bne	2e128 <flatcc_verify_union_vector_field@@Base+0xfd8>
   2e068:	cmp	r2, r5
   2e06c:	mov	r1, r2
   2e070:	bne	2e05c <flatcc_verify_union_vector_field@@Base+0xf0c>
   2e074:	mov	r7, #0
   2e078:	b	2da2c <flatcc_verify_union_vector_field@@Base+0x8dc>
   2e07c:	add	r8, r8, #1
   2e080:	b	2e000 <flatcc_verify_union_vector_field@@Base+0xeb0>
   2e084:	ldr	r3, [r6, #24]
   2e088:	cmp	r3, #0
   2e08c:	beq	2e0e0 <flatcc_verify_union_vector_field@@Base+0xf90>
   2e090:	ldr	r3, [sp, #64]	; 0x40
   2e094:	cmp	r3, #0
   2e098:	beq	2d764 <flatcc_verify_union_vector_field@@Base+0x614>
   2e09c:	mov	r8, r5
   2e0a0:	b	2d898 <flatcc_verify_union_vector_field@@Base+0x748>
   2e0a4:	ldrb	r1, [r4, #2]
   2e0a8:	cmp	r1, #32
   2e0ac:	addhi	r8, r4, #2
   2e0b0:	bls	2d854 <flatcc_verify_union_vector_field@@Base+0x704>
   2e0b4:	cmp	r5, r8
   2e0b8:	bne	2e014 <flatcc_verify_union_vector_field@@Base+0xec4>
   2e0bc:	b	2d88c <flatcc_verify_union_vector_field@@Base+0x73c>
   2e0c0:	mov	r1, r5
   2e0c4:	b	2dbc8 <flatcc_verify_union_vector_field@@Base+0xa78>
   2e0c8:	ldrb	r3, [r8, #2]
   2e0cc:	cmp	r3, #32
   2e0d0:	addhi	r1, r8, #2
   2e0d4:	addhi	r7, r7, #1
   2e0d8:	bls	2de58 <flatcc_verify_union_vector_field@@Base+0xd08>
   2e0dc:	b	2da2c <flatcc_verify_union_vector_field@@Base+0x8dc>
   2e0e0:	ldr	r3, [r6, #4]
   2e0e4:	mov	r2, #5
   2e0e8:	sub	r3, r8, r3
   2e0ec:	add	r3, r3, #1
   2e0f0:	str	r8, [r6, #36]	; 0x24
   2e0f4:	str	r3, [r6, #20]
   2e0f8:	str	r2, [r6, #24]
   2e0fc:	b	2e090 <flatcc_verify_union_vector_field@@Base+0xf40>
   2e100:	mov	r4, r1
   2e104:	b	2d7cc <flatcc_verify_union_vector_field@@Base+0x67c>
   2e108:	mov	r8, r5
   2e10c:	b	2d88c <flatcc_verify_union_vector_field@@Base+0x73c>
   2e110:	ldrb	r3, [r8, #2]
   2e114:	cmp	r3, #32
   2e118:	addhi	r1, r8, #2
   2e11c:	movhi	r7, #0
   2e120:	bls	2e03c <flatcc_verify_union_vector_field@@Base+0xeec>
   2e124:	b	2da2c <flatcc_verify_union_vector_field@@Base+0x8dc>
   2e128:	cmp	r3, #32
   2e12c:	bhi	2e074 <flatcc_verify_union_vector_field@@Base+0xf24>
   2e130:	sub	r3, r3, #9
   2e134:	cmp	r3, #23
   2e138:	ldrls	pc, [pc, r3, lsl #2]
   2e13c:	b	2e1f4 <flatcc_verify_union_vector_field@@Base+0x10a4>
   2e140:	andeq	lr, r2, ip, ror #3
   2e144:	andeq	lr, r2, r0, asr #3
   2e148:	strdeq	lr, [r2], -r4
   2e14c:	strdeq	lr, [r2], -r4
   2e150:	andeq	lr, r2, r0, lsr #3
   2e154:	strdeq	lr, [r2], -r4
   2e158:	strdeq	lr, [r2], -r4
   2e15c:	strdeq	lr, [r2], -r4
   2e160:	strdeq	lr, [r2], -r4
   2e164:	strdeq	lr, [r2], -r4
   2e168:	strdeq	lr, [r2], -r4
   2e16c:	strdeq	lr, [r2], -r4
   2e170:	strdeq	lr, [r2], -r4
   2e174:	strdeq	lr, [r2], -r4
   2e178:	strdeq	lr, [r2], -r4
   2e17c:	strdeq	lr, [r2], -r4
   2e180:	strdeq	lr, [r2], -r4
   2e184:	strdeq	lr, [r2], -r4
   2e188:	strdeq	lr, [r2], -r4
   2e18c:	strdeq	lr, [r2], -r4
   2e190:	strdeq	lr, [r2], -r4
   2e194:	strdeq	lr, [r2], -r4
   2e198:	strdeq	lr, [r2], -r4
   2e19c:	andeq	lr, r2, r0, asr #32
   2e1a0:	sub	r3, r5, r1
   2e1a4:	cmp	r3, #1
   2e1a8:	movle	r3, r0
   2e1ac:	ldrbgt	r3, [r1, #1]
   2e1b0:	subgt	r3, r3, #10
   2e1b4:	clzgt	r3, r3
   2e1b8:	lsrgt	r3, r3, #5
   2e1bc:	add	r1, r1, r3
   2e1c0:	ldr	r3, [r6, #16]
   2e1c4:	add	r1, r1, #1
   2e1c8:	add	r3, r3, #1
   2e1cc:	str	r1, [r6, #4]
   2e1d0:	str	r3, [r6, #16]
   2e1d4:	cmp	r5, r1
   2e1d8:	beq	2e220 <flatcc_verify_union_vector_field@@Base+0x10d0>
   2e1dc:	ldrb	r3, [r1]
   2e1e0:	cmp	r3, #32
   2e1e4:	bls	2e130 <flatcc_verify_union_vector_field@@Base+0xfe0>
   2e1e8:	b	2e074 <flatcc_verify_union_vector_field@@Base+0xf24>
   2e1ec:	add	r1, r1, #1
   2e1f0:	b	2e1d4 <flatcc_verify_union_vector_field@@Base+0x1084>
   2e1f4:	ldr	r7, [r6, #24]
   2e1f8:	cmp	r7, #0
   2e1fc:	bne	2d7b8 <flatcc_verify_union_vector_field@@Base+0x668>
   2e200:	ldr	r3, [r6, #4]
   2e204:	mov	r2, #5
   2e208:	sub	r3, r1, r3
   2e20c:	add	r3, r3, #1
   2e210:	str	r1, [r6, #36]	; 0x24
   2e214:	str	r3, [r6, #20]
   2e218:	str	r2, [r6, #24]
   2e21c:	b	2d7bc <flatcc_verify_union_vector_field@@Base+0x66c>
   2e220:	mov	r1, r5
   2e224:	b	2e074 <flatcc_verify_union_vector_field@@Base+0xf24>

0002e228 <grisu3_diy_fp_encode_double@@Base>:
   2e228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e22c:	sub	sp, sp, #60	; 0x3c
   2e230:	mov	sl, r0
   2e234:	ldr	lr, [sp, #96]	; 0x60
   2e238:	mov	fp, r1
   2e23c:	cmp	lr, #0
   2e240:	mov	r6, r3
   2e244:	movne	lr, #4
   2e248:	orrs	r3, sl, fp
   2e24c:	sub	r2, r2, r6
   2e250:	beq	2e778 <grisu3_diy_fp_encode_double@@Base+0x550>
   2e254:	ldr	r1, [pc, #1312]	; 2e77c <grisu3_diy_fp_encode_double@@Base+0x554>
   2e258:	mov	r0, #0
   2e25c:	and	r0, r0, sl
   2e260:	and	r1, r1, fp
   2e264:	orrs	r3, r0, r1
   2e268:	movne	ip, #0
   2e26c:	bne	2e2a8 <grisu3_diy_fp_encode_double@@Base+0x80>
   2e270:	mvn	r4, #9
   2e274:	lsl	r3, fp, #10
   2e278:	lsl	r1, sl, #10
   2e27c:	orr	r3, r3, sl, lsr #22
   2e280:	mov	sl, r1
   2e284:	ldr	r1, [pc, #1264]	; 2e77c <grisu3_diy_fp_encode_double@@Base+0x554>
   2e288:	mov	r0, #0
   2e28c:	and	r0, r0, sl
   2e290:	and	r1, r1, r3
   2e294:	mov	fp, r3
   2e298:	orrs	r3, r0, r1
   2e29c:	mov	ip, r4
   2e2a0:	sub	r4, r4, #10
   2e2a4:	beq	2e274 <grisu3_diy_fp_encode_double@@Base+0x4c>
   2e2a8:	cmp	sl, #0
   2e2ac:	sbcs	r3, fp, #0
   2e2b0:	blt	2e2cc <grisu3_diy_fp_encode_double@@Base+0xa4>
   2e2b4:	adds	sl, sl, sl
   2e2b8:	adc	fp, fp, fp
   2e2bc:	cmp	sl, #0
   2e2c0:	sbcs	r3, fp, #0
   2e2c4:	sub	ip, ip, #1
   2e2c8:	bge	2e2b4 <grisu3_diy_fp_encode_double@@Base+0x8c>
   2e2cc:	rsb	r3, ip, #0
   2e2d0:	cmn	r2, #348	; 0x15c
   2e2d4:	lsl	r3, lr, r3
   2e2d8:	str	r3, [sp, #20]
   2e2dc:	blt	2e764 <grisu3_diy_fp_encode_double@@Base+0x53c>
   2e2e0:	cmp	r2, #348	; 0x15c
   2e2e4:	bge	2e750 <grisu3_diy_fp_encode_double@@Base+0x528>
   2e2e8:	add	r1, r2, #348	; 0x15c
   2e2ec:	ldr	r3, [pc, #1164]	; 2e780 <grisu3_diy_fp_encode_double@@Base+0x558>
   2e2f0:	asr	r1, r1, #3
   2e2f4:	add	r1, r3, r1, lsl #4
   2e2f8:	ldrsh	r7, [r1, #66]	; 0x42
   2e2fc:	ldrd	r4, [r1, #56]	; 0x38
   2e300:	ldrsh	r1, [r1, #64]	; 0x40
   2e304:	cmp	r2, r7
   2e308:	strd	r4, [sp]
   2e30c:	str	r1, [sp, #40]	; 0x28
   2e310:	blt	2e73c <grisu3_diy_fp_encode_double@@Base+0x514>
   2e314:	add	r1, r7, #7
   2e318:	cmp	r2, r1
   2e31c:	bgt	2e728 <grisu3_diy_fp_encode_double@@Base+0x500>
   2e320:	cmp	r2, r7
   2e324:	beq	2e410 <grisu3_diy_fp_encode_double@@Base+0x1e8>
   2e328:	sub	r2, r2, r7
   2e32c:	sub	r7, r2, #1
   2e330:	cmp	r7, #6
   2e334:	bhi	2e714 <grisu3_diy_fp_encode_double@@Base+0x4ec>
   2e338:	ldr	r0, [pc, #1092]	; 2e784 <grisu3_diy_fp_encode_double@@Base+0x55c>
   2e33c:	lsl	r1, r7, #4
   2e340:	mov	r3, #0
   2e344:	ldrd	r4, [r0, r1]
   2e348:	add	r1, r0, r1
   2e34c:	str	r1, [sp, #44]	; 0x2c
   2e350:	mov	r8, r4
   2e354:	mov	r0, r4
   2e358:	strd	r4, [sp, #24]
   2e35c:	umull	r4, r5, sl, r5
   2e360:	mov	r1, #0
   2e364:	strd	r4, [sp, #32]
   2e368:	umull	r4, r5, fp, r8
   2e36c:	mul	lr, sl, r1
   2e370:	mla	r2, fp, r1, r5
   2e374:	mla	lr, r8, r3, lr
   2e378:	ldr	r1, [sp, #28]
   2e37c:	umull	r8, r9, sl, r0
   2e380:	ldr	r0, [sp, #36]	; 0x24
   2e384:	strd	r4, [sp, #48]	; 0x30
   2e388:	mla	r3, r1, r3, r0
   2e38c:	add	r0, lr, r9
   2e390:	mov	lr, #0
   2e394:	str	r0, [sp, #8]
   2e398:	str	lr, [sp, #12]
   2e39c:	mov	r4, r2
   2e3a0:	mov	r0, r3
   2e3a4:	ldrd	r2, [sp, #8]
   2e3a8:	ldr	r8, [sp, #48]	; 0x30
   2e3ac:	add	r6, r6, #1
   2e3b0:	adds	r2, r2, r8
   2e3b4:	adc	r3, r3, #0
   2e3b8:	adds	r0, r0, r4
   2e3bc:	ldr	r4, [sp, #28]
   2e3c0:	adc	r1, lr, lr
   2e3c4:	adds	r2, r2, #-2147483648	; 0x80000000
   2e3c8:	umlal	r0, r1, r4, fp
   2e3cc:	mov	fp, r1
   2e3d0:	ldr	r1, [sp, #44]	; 0x2c
   2e3d4:	adc	r3, r3, #0
   2e3d8:	mov	sl, r0
   2e3dc:	ldr	r4, [r1, #8]
   2e3e0:	ldr	r1, [sp, #32]
   2e3e4:	add	r7, r6, r7
   2e3e8:	adds	r2, r2, r1
   2e3ec:	adc	r3, r3, #0
   2e3f0:	adds	sl, sl, r3
   2e3f4:	adc	fp, fp, lr
   2e3f8:	cmp	r7, #19
   2e3fc:	add	ip, ip, r4
   2e400:	ldrgt	r3, [sp, #20]
   2e404:	add	ip, ip, #64	; 0x40
   2e408:	addgt	r3, r3, #4
   2e40c:	strgt	r3, [sp, #20]
   2e410:	ldrd	r0, [sp]
   2e414:	mov	r3, #0
   2e418:	mov	r5, #0
   2e41c:	mov	r2, r0
   2e420:	umull	r6, r7, sl, r1
   2e424:	umull	r8, r9, fp, r2
   2e428:	mul	lr, sl, r3
   2e42c:	mla	r9, fp, r3, r9
   2e430:	ldr	r3, [sp, #4]
   2e434:	umull	r0, r1, sl, r2
   2e438:	mla	r0, r2, r5, lr
   2e43c:	mla	lr, r3, r5, r7
   2e440:	add	r2, r0, r1
   2e444:	adds	r2, r2, r8
   2e448:	mov	r0, lr
   2e44c:	ldr	r4, [sp, #4]
   2e450:	mov	lr, #0
   2e454:	adc	r3, lr, #0
   2e458:	adds	r0, r0, r9
   2e45c:	adc	r1, lr, lr
   2e460:	umlal	r0, r1, r4, fp
   2e464:	adds	r2, r2, #-2147483648	; 0x80000000
   2e468:	adc	r3, r3, #0
   2e46c:	adds	r2, r2, r6
   2e470:	adc	r3, r3, #0
   2e474:	adds	r6, r3, r0
   2e478:	ldr	r3, [sp, #40]	; 0x28
   2e47c:	adc	r7, lr, r1
   2e480:	add	ip, ip, r3
   2e484:	ldr	r3, [sp, #20]
   2e488:	cmp	r3, lr
   2e48c:	moveq	r2, #8
   2e490:	movne	r2, #9
   2e494:	orrs	r1, r6, r7
   2e498:	add	r2, r3, r2
   2e49c:	add	lr, ip, #64	; 0x40
   2e4a0:	beq	2e778 <grisu3_diy_fp_encode_double@@Base+0x550>
   2e4a4:	ldr	r1, [pc, #720]	; 2e77c <grisu3_diy_fp_encode_double@@Base+0x554>
   2e4a8:	mov	r0, #0
   2e4ac:	and	r0, r0, r6
   2e4b0:	and	r1, r1, r7
   2e4b4:	orrs	r3, r0, r1
   2e4b8:	bne	2e6ec <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2e4bc:	add	ip, ip, #54	; 0x36
   2e4c0:	lsl	r3, r7, #10
   2e4c4:	lsl	r1, r6, #10
   2e4c8:	orr	r3, r3, r6, lsr #22
   2e4cc:	mov	r6, r1
   2e4d0:	ldr	r1, [pc, #676]	; 2e77c <grisu3_diy_fp_encode_double@@Base+0x554>
   2e4d4:	mov	r0, #0
   2e4d8:	and	r1, r1, r3
   2e4dc:	and	r0, r0, r6
   2e4e0:	mov	r7, r3
   2e4e4:	orrs	r3, r0, r1
   2e4e8:	mov	r3, ip
   2e4ec:	sub	ip, ip, #10
   2e4f0:	beq	2e4c0 <grisu3_diy_fp_encode_double@@Base+0x298>
   2e4f4:	cmp	r6, #0
   2e4f8:	sbcs	r1, r7, #0
   2e4fc:	blt	2e518 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   2e500:	adds	r6, r6, r6
   2e504:	adc	r7, r7, r7
   2e508:	cmp	r6, #0
   2e50c:	sbcs	r1, r7, #0
   2e510:	sub	r3, r3, #1
   2e514:	bge	2e500 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   2e518:	ldr	r0, [pc, #616]	; 2e788 <grisu3_diy_fp_encode_double@@Base+0x560>
   2e51c:	sub	lr, lr, r3
   2e520:	add	r1, r3, #64	; 0x40
   2e524:	cmp	r1, r0
   2e528:	lsl	r2, r2, lr
   2e52c:	blt	2e670 <grisu3_diy_fp_encode_double@@Base+0x448>
   2e530:	mov	r1, #0
   2e534:	mov	lr, r1
   2e538:	mov	r0, #4
   2e53c:	lsr	r4, r6, lr
   2e540:	rsb	r6, lr, #32
   2e544:	sub	ip, lr, #32
   2e548:	orr	r4, r4, r7, lsl r6
   2e54c:	orr	r4, r4, r7, lsr ip
   2e550:	add	ip, r2, r0
   2e554:	cmp	lr, ip
   2e558:	add	r3, lr, r3
   2e55c:	lsr	r5, r7, lr
   2e560:	blt	2e588 <grisu3_diy_fp_encode_double@@Base+0x360>
   2e564:	adds	r4, r4, #1
   2e568:	adc	r5, r5, #0
   2e56c:	mov	r6, #0
   2e570:	and	r7, r5, #2097152	; 0x200000
   2e574:	orrs	lr, r6, r7
   2e578:	beq	2e588 <grisu3_diy_fp_encode_double@@Base+0x360>
   2e57c:	lsrs	r5, r5, #1
   2e580:	rrx	r4, r4
   2e584:	add	r3, r3, #1
   2e588:	ldr	r7, [pc, #508]	; 2e78c <grisu3_diy_fp_encode_double@@Base+0x564>
   2e58c:	mvn	r6, #0
   2e590:	cmp	r5, r7
   2e594:	cmpeq	r4, r6
   2e598:	bls	2e5b4 <grisu3_diy_fp_encode_double@@Base+0x38c>
   2e59c:	lsrs	r5, r5, #1
   2e5a0:	rrx	r4, r4
   2e5a4:	cmp	r5, r7
   2e5a8:	cmpeq	r4, r6
   2e5ac:	add	r3, r3, #1
   2e5b0:	bhi	2e59c <grisu3_diy_fp_encode_double@@Base+0x374>
   2e5b4:	ldr	r8, [pc, #468]	; 2e790 <grisu3_diy_fp_encode_double@@Base+0x568>
   2e5b8:	cmp	r3, r8
   2e5bc:	movlt	r8, #0
   2e5c0:	movlt	r9, #0
   2e5c4:	blt	2e644 <grisu3_diy_fp_encode_double@@Base+0x41c>
   2e5c8:	beq	2e618 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   2e5cc:	mov	r6, #0
   2e5d0:	and	r7, r5, #1048576	; 0x100000
   2e5d4:	orrs	lr, r6, r7
   2e5d8:	addne	r3, r3, #1072	; 0x430
   2e5dc:	addne	r3, r3, #3
   2e5e0:	movne	r8, #0
   2e5e4:	lslne	r9, r3, #20
   2e5e8:	beq	2e604 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2e5ec:	b	2e62c <grisu3_diy_fp_encode_double@@Base+0x404>
   2e5f0:	mov	r6, #0
   2e5f4:	and	r7, r5, #1048576	; 0x100000
   2e5f8:	orrs	r6, r6, r7
   2e5fc:	bne	2e6d0 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   2e600:	mov	r3, lr
   2e604:	adds	r4, r4, r4
   2e608:	sub	lr, r3, #1
   2e60c:	adc	r5, r5, r5
   2e610:	cmp	lr, r8
   2e614:	bne	2e5f0 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2e618:	mov	r8, #0
   2e61c:	and	r9, r5, #1048576	; 0x100000
   2e620:	orrs	r3, r8, r9
   2e624:	movne	r8, #0
   2e628:	movne	r9, #1048576	; 0x100000
   2e62c:	ldr	r7, [pc, #352]	; 2e794 <grisu3_diy_fp_encode_double@@Base+0x56c>
   2e630:	mvn	r6, #0
   2e634:	and	r4, r4, r6
   2e638:	and	r5, r5, r7
   2e63c:	orr	r8, r8, r4
   2e640:	orr	r9, r9, r5
   2e644:	ldr	r3, [sp, #100]	; 0x64
   2e648:	cmp	ip, r1
   2e64c:	sub	r0, r0, r2
   2e650:	movgt	ip, #0
   2e654:	movle	ip, #1
   2e658:	cmp	r0, r1
   2e65c:	movlt	r0, ip
   2e660:	orrge	r0, ip, #1
   2e664:	strd	r8, [r3]
   2e668:	add	sp, sp, #60	; 0x3c
   2e66c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e670:	mvn	r0, #1072	; 0x430
   2e674:	cmp	r1, r0
   2e678:	blt	2e6e4 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   2e67c:	add	r1, r3, #1136	; 0x470
   2e680:	add	r1, r1, #2
   2e684:	rsb	lr, r1, #64	; 0x40
   2e688:	cmp	lr, #60	; 0x3c
   2e68c:	rsbgt	r1, r1, #2
   2e690:	ble	2e6f4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2e694:	rsb	r0, r1, #32
   2e698:	lsr	ip, r6, r1
   2e69c:	orr	ip, ip, r7, lsl r0
   2e6a0:	sub	r0, r1, #32
   2e6a4:	lsr	lr, r7, r1
   2e6a8:	orr	ip, ip, r7, lsr r0
   2e6ac:	asr	r2, r2, r1
   2e6b0:	add	r3, r3, r1
   2e6b4:	mov	r1, #0
   2e6b8:	mov	r7, lr
   2e6bc:	mov	r6, ip
   2e6c0:	add	r2, r2, #9
   2e6c4:	mov	r0, r1
   2e6c8:	mov	lr, #62	; 0x3e
   2e6cc:	b	2e53c <grisu3_diy_fp_encode_double@@Base+0x314>
   2e6d0:	add	r3, r3, #1072	; 0x430
   2e6d4:	add	r3, r3, #2
   2e6d8:	mov	r8, #0
   2e6dc:	lsl	r9, r3, #20
   2e6e0:	b	2e62c <grisu3_diy_fp_encode_double@@Base+0x404>
   2e6e4:	mov	r1, #2
   2e6e8:	b	2e694 <grisu3_diy_fp_encode_double@@Base+0x46c>
   2e6ec:	mov	r3, lr
   2e6f0:	b	2e4f4 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   2e6f4:	rsb	r1, r1, #63	; 0x3f
   2e6f8:	mov	ip, #1
   2e6fc:	mov	r0, #8
   2e700:	lsl	r4, ip, r1
   2e704:	and	r4, r4, r6
   2e708:	lsl	r0, r0, r1
   2e70c:	lsl	r1, r4, #3
   2e710:	b	2e53c <grisu3_diy_fp_encode_double@@Base+0x314>
   2e714:	ldr	r3, [pc, #124]	; 2e798 <grisu3_diy_fp_encode_double@@Base+0x570>
   2e718:	mov	r2, #185	; 0xb9
   2e71c:	ldr	r1, [pc, #120]	; 2e79c <grisu3_diy_fp_encode_double@@Base+0x574>
   2e720:	ldr	r0, [pc, #120]	; 2e7a0 <grisu3_diy_fp_encode_double@@Base+0x578>
   2e724:	bl	14618 <__assert_fail@plt>
   2e728:	add	r3, r3, #24
   2e72c:	mov	r2, #89	; 0x59
   2e730:	ldr	r1, [pc, #100]	; 2e79c <grisu3_diy_fp_encode_double@@Base+0x574>
   2e734:	ldr	r0, [pc, #104]	; 2e7a4 <grisu3_diy_fp_encode_double@@Base+0x57c>
   2e738:	bl	14618 <__assert_fail@plt>
   2e73c:	add	r3, r3, #24
   2e740:	mov	r2, #88	; 0x58
   2e744:	ldr	r1, [pc, #80]	; 2e79c <grisu3_diy_fp_encode_double@@Base+0x574>
   2e748:	ldr	r0, [pc, #88]	; 2e7a8 <grisu3_diy_fp_encode_double@@Base+0x580>
   2e74c:	bl	14618 <__assert_fail@plt>
   2e750:	ldr	r3, [pc, #84]	; 2e7ac <grisu3_diy_fp_encode_double@@Base+0x584>
   2e754:	mov	r2, #81	; 0x51
   2e758:	ldr	r1, [pc, #60]	; 2e79c <grisu3_diy_fp_encode_double@@Base+0x574>
   2e75c:	ldr	r0, [pc, #76]	; 2e7b0 <grisu3_diy_fp_encode_double@@Base+0x588>
   2e760:	bl	14618 <__assert_fail@plt>
   2e764:	ldr	r3, [pc, #64]	; 2e7ac <grisu3_diy_fp_encode_double@@Base+0x584>
   2e768:	mov	r2, #80	; 0x50
   2e76c:	ldr	r1, [pc, #40]	; 2e79c <grisu3_diy_fp_encode_double@@Base+0x574>
   2e770:	ldr	r0, [pc, #60]	; 2e7b4 <grisu3_diy_fp_encode_double@@Base+0x58c>
   2e774:	bl	14618 <__assert_fail@plt>
   2e778:	bl	148ac <__assert_fail@plt+0x294>
   2e77c:			; <UNDEFINED> instruction: 0xffc00000
   2e780:	andeq	r6, r4, r8, lsl #15
   2e784:	andeq	r8, r5, r0, asr #6
   2e788:			; <UNDEFINED> instruction: 0xfffffc0e
   2e78c:			; <UNDEFINED> instruction: 0x001fffff
   2e790:			; <UNDEFINED> instruction: 0xfffffbce
   2e794:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2e798:	andeq	r6, r4, r0, lsr sp
   2e79c:	andeq	r7, r4, r4, lsl #1
   2e7a0:	andeq	r7, r4, r4, asr r1
   2e7a4:	andeq	r7, r4, r8, lsr r1
   2e7a8:	andeq	r7, r4, r8, lsr #2
   2e7ac:	andeq	r6, r4, r0, lsr #15
   2e7b0:	strdeq	r7, [r4], -ip
   2e7b4:	ldrdeq	r7, [r4], -ip
   2e7b8:	cmp	r1, #1000	; 0x3e8
   2e7bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e7c0:	addle	r1, r1, #1
   2e7c4:	addgt	lr, r0, #1000	; 0x3e8
   2e7c8:	mov	r4, #0
   2e7cc:	mov	r5, #0
   2e7d0:	addle	lr, r0, r1
   2e7d4:	addgt	lr, lr, #1
   2e7d8:	cmp	lr, r0
   2e7dc:	sub	sp, sp, #44	; 0x2c
   2e7e0:	mov	fp, r2
   2e7e4:	mov	sl, r0
   2e7e8:	strd	r4, [r2]
   2e7ec:	beq	2ed2c <grisu3_diy_fp_encode_double@@Base+0xb04>
   2e7f0:	ldrb	r0, [r0]
   2e7f4:	cmp	r0, #45	; 0x2d
   2e7f8:	movne	r2, #0
   2e7fc:	movne	r3, sl
   2e800:	strne	r2, [sp, #16]
   2e804:	beq	2ebb8 <grisu3_diy_fp_encode_double@@Base+0x990>
   2e808:	cmp	r0, #48	; 0x30
   2e80c:	beq	2ebd8 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2e810:	sub	r2, r0, #49	; 0x31
   2e814:	cmp	r2, #8
   2e818:	bhi	2e918 <grisu3_diy_fp_encode_double@@Base+0x6f0>
   2e81c:	add	r9, r3, #1
   2e820:	sub	r0, r0, #48	; 0x30
   2e824:	cmp	lr, r9
   2e828:	asr	r1, r0, #31
   2e82c:	beq	2f18c <grisu3_diy_fp_encode_double@@Base+0xf64>
   2e830:	ldrb	ip, [r3, #1]
   2e834:	sub	r3, ip, #48	; 0x30
   2e838:	cmp	r3, #9
   2e83c:	movhi	r4, r9
   2e840:	movhi	r9, #0
   2e844:	bhi	2e8a8 <grisu3_diy_fp_encode_double@@Base+0x680>
   2e848:	add	r5, r9, #1
   2e84c:	mov	r8, #10
   2e850:	add	r7, pc, #992	; 0x3e0
   2e854:	ldrd	r6, [r7]
   2e858:	b	2e86c <grisu3_diy_fp_encode_double@@Base+0x644>
   2e85c:	cmp	r1, r7
   2e860:	cmpeq	r0, r6
   2e864:	bhi	2e934 <grisu3_diy_fp_encode_double@@Base+0x70c>
   2e868:	mov	r5, r3
   2e86c:	umull	r2, r3, r0, r8
   2e870:	mla	r3, r8, r1, r3
   2e874:	adds	r0, r2, ip
   2e878:	adc	r1, r3, #0
   2e87c:	subs	r0, r0, #48	; 0x30
   2e880:	sbc	r1, r1, #0
   2e884:	cmp	lr, r5
   2e888:	mov	r4, r5
   2e88c:	beq	2efc0 <grisu3_diy_fp_encode_double@@Base+0xd98>
   2e890:	ldrb	ip, [r5]
   2e894:	add	r3, r5, #1
   2e898:	sub	r2, ip, #48	; 0x30
   2e89c:	cmp	r2, #9
   2e8a0:	bls	2e85c <grisu3_diy_fp_encode_double@@Base+0x634>
   2e8a4:	sub	r9, r5, r9
   2e8a8:	mov	r8, #0
   2e8ac:	mov	r2, r8
   2e8b0:	sub	r3, ip, #49	; 0x31
   2e8b4:	cmp	r3, #8
   2e8b8:	bhi	2eaf4 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   2e8bc:	add	r6, r4, #1
   2e8c0:	cmp	lr, r6
   2e8c4:	add	r5, r2, #1
   2e8c8:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2e8cc:	ldrb	ip, [r4, #1]
   2e8d0:	sub	r3, ip, #48	; 0x30
   2e8d4:	cmp	r3, #9
   2e8d8:	bhi	2eae8 <grisu3_diy_fp_encode_double@@Base+0x8c0>
   2e8dc:	sub	r2, r2, r4
   2e8e0:	add	r4, r4, #2
   2e8e4:	b	2e8f8 <grisu3_diy_fp_encode_double@@Base+0x6d0>
   2e8e8:	ldrb	ip, [r4], #1
   2e8ec:	sub	r3, ip, #48	; 0x30
   2e8f0:	cmp	r3, #9
   2e8f4:	bhi	2eae8 <grisu3_diy_fp_encode_double@@Base+0x8c0>
   2e8f8:	cmp	r4, lr
   2e8fc:	add	r5, r2, r4
   2e900:	mov	r6, r4
   2e904:	bne	2e8e8 <grisu3_diy_fp_encode_double@@Base+0x6c0>
   2e908:	add	r5, r5, r9
   2e90c:	mov	r4, lr
   2e910:	mov	r8, #1
   2e914:	b	2e988 <grisu3_diy_fp_encode_double@@Base+0x760>
   2e918:	ldr	r3, [sp, #16]
   2e91c:	cmp	r3, #0
   2e920:	moveq	r4, sl
   2e924:	movne	r4, #0
   2e928:	mov	r0, r4
   2e92c:	add	sp, sp, #44	; 0x2c
   2e930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e934:	cmp	ip, #52	; 0x34
   2e938:	movls	r2, #0
   2e93c:	movhi	r2, #1
   2e940:	adds	r0, r0, r2
   2e944:	adc	r1, r1, #0
   2e948:	cmp	ip, #48	; 0x30
   2e94c:	sub	r9, r4, r9
   2e950:	movne	r8, #1
   2e954:	movne	r2, #0
   2e958:	beq	2e970 <grisu3_diy_fp_encode_double@@Base+0x748>
   2e95c:	b	2e8b0 <grisu3_diy_fp_encode_double@@Base+0x688>
   2e960:	ldrb	ip, [r3]
   2e964:	add	r3, r3, #1
   2e968:	cmp	ip, #48	; 0x30
   2e96c:	bne	2ec2c <grisu3_diy_fp_encode_double@@Base+0xa04>
   2e970:	cmp	lr, r3
   2e974:	mov	r4, r3
   2e978:	sub	r2, r3, r5
   2e97c:	bne	2e960 <grisu3_diy_fp_encode_double@@Base+0x738>
   2e980:	add	r5, r2, r9
   2e984:	mov	r8, #1
   2e988:	cmp	lr, r4
   2e98c:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2e990:	orrs	r3, r0, r1
   2e994:	moveq	r2, #1
   2e998:	movne	r2, #0
   2e99c:	cmn	r5, #324	; 0x144
   2e9a0:	movge	r3, #0
   2e9a4:	movlt	r3, #1
   2e9a8:	orrs	r3, r2, r3
   2e9ac:	bne	2eac4 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2e9b0:	ldr	r3, [pc, #656]	; 2ec48 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2e9b4:	cmp	r5, r3
   2e9b8:	bgt	2ec58 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2e9bc:	ldr	r3, [pc, #648]	; 2ec4c <grisu3_diy_fp_encode_double@@Base+0xa24>
   2e9c0:	mvn	r2, #0
   2e9c4:	cmp	r1, r3
   2e9c8:	cmpeq	r0, r2
   2e9cc:	movls	r3, #1
   2e9d0:	movhi	r3, #0
   2e9d4:	cmp	r5, #22
   2e9d8:	movhi	r3, #0
   2e9dc:	andls	r3, r3, #1
   2e9e0:	cmp	r3, #0
   2e9e4:	beq	2ed54 <grisu3_diy_fp_encode_double@@Base+0xb2c>
   2e9e8:	bl	4149c <flatcc_json_printer_clear@@Base+0x588>
   2e9ec:	sub	r9, r5, r9
   2e9f0:	add	r3, r9, #22
   2e9f4:	vmov	d7, r0, r1
   2e9f8:	cmp	r3, #44	; 0x2c
   2e9fc:	ldrls	pc, [pc, r3, lsl #2]
   2ea00:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ea04:			; <UNDEFINED> instruction: 0x0002eeb8
   2ea08:	andeq	lr, r2, r4, asr #29
   2ea0c:	andeq	lr, r2, ip, lsr #29
   2ea10:	andeq	lr, r2, r4, lsl #31
   2ea14:	andeq	lr, r2, r8, ror pc
   2ea18:	andeq	lr, r2, ip, ror #30
   2ea1c:	andeq	lr, r2, r0, ror #30
   2ea20:	andeq	lr, r2, r4, asr pc
   2ea24:	andeq	lr, r2, r8, asr #30
   2ea28:	andeq	lr, r2, ip, lsr pc
   2ea2c:	andeq	lr, r2, r0, lsr pc
   2ea30:	andeq	lr, r2, r4, lsr #30
   2ea34:	andeq	lr, r2, r8, lsl pc
   2ea38:	andeq	lr, r2, ip, lsl #30
   2ea3c:	andeq	lr, r2, r0, lsl #30
   2ea40:	strdeq	lr, [r2], -r4
   2ea44:	andeq	lr, r2, r8, ror #29
   2ea48:	ldrdeq	lr, [r2], -ip
   2ea4c:	ldrdeq	lr, [r2], -r0
   2ea50:	andeq	lr, r2, r4, lsr lr
   2ea54:	andeq	lr, r2, r8, lsr #28
   2ea58:	andeq	lr, r2, ip, lsl lr
   2ea5c:	andeq	lr, r2, r0, asr #21
   2ea60:	andeq	lr, r2, r4, lsl #28
   2ea64:	strdeq	lr, [r2], -r8
   2ea68:	andeq	lr, r2, ip, ror #27
   2ea6c:	andeq	lr, r2, r0, ror #27
   2ea70:	ldrdeq	lr, [r2], -r4
   2ea74:	andeq	lr, r2, r8, asr #27
   2ea78:			; <UNDEFINED> instruction: 0x0002edbc
   2ea7c:			; <UNDEFINED> instruction: 0x0002edb0
   2ea80:	andeq	lr, r2, r4, lsr #27
   2ea84:	muleq	r2, r8, sp
   2ea88:	andeq	lr, r2, ip, lsl #27
   2ea8c:			; <UNDEFINED> instruction: 0x0002eab8
   2ea90:	muleq	r2, r4, lr
   2ea94:	andeq	lr, r2, r8, lsl #29
   2ea98:	andeq	lr, r2, ip, ror lr
   2ea9c:	andeq	lr, r2, r0, ror lr
   2eaa0:	andeq	lr, r2, r4, ror #28
   2eaa4:	andeq	lr, r2, r8, asr lr
   2eaa8:	andeq	lr, r2, ip, asr #28
   2eaac:	andeq	lr, r2, r0, asr #28
   2eab0:	andeq	lr, r2, r0, lsr #29
   2eab4:	andeq	lr, r2, r0, lsl lr
   2eab8:	vldr	d6, [pc, #384]	; 2ec40 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2eabc:	vmul.f64	d7, d7, d6
   2eac0:	vstr	d7, [fp]
   2eac4:	ldr	r3, [sp, #16]
   2eac8:	cmp	r3, #0
   2eacc:	beq	2e928 <grisu3_diy_fp_encode_double@@Base+0x700>
   2ead0:	vldr	d7, [fp]
   2ead4:	mov	r0, r4
   2ead8:	vneg.f64	d7, d7
   2eadc:	vstr	d7, [fp]
   2eae0:	add	sp, sp, #44	; 0x2c
   2eae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eae8:	mov	r2, r5
   2eaec:	mov	r4, r6
   2eaf0:	mov	r8, #1
   2eaf4:	cmp	ip, #46	; 0x2e
   2eaf8:	beq	2ec70 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2eafc:	cmp	lr, r4
   2eb00:	add	r5, r2, r9
   2eb04:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2eb08:	orr	ip, ip, #32
   2eb0c:	cmp	ip, #101	; 0x65
   2eb10:	bne	2e990 <grisu3_diy_fp_encode_double@@Base+0x768>
   2eb14:	sub	r3, lr, r4
   2eb18:	cmp	r3, #1
   2eb1c:	ble	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2eb20:	ldrb	r2, [r4, #1]
   2eb24:	cmp	r2, #43	; 0x2b
   2eb28:	beq	2efa4 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   2eb2c:	cmp	r2, #45	; 0x2d
   2eb30:	beq	2f168 <grisu3_diy_fp_encode_double@@Base+0xf40>
   2eb34:	add	ip, r4, #1
   2eb38:	mov	r3, #0
   2eb3c:	str	r3, [sp, #8]
   2eb40:	sub	r2, r2, #48	; 0x30
   2eb44:	uxtb	r3, r2
   2eb48:	cmp	r3, #9
   2eb4c:	bhi	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2eb50:	add	r4, ip, #1
   2eb54:	cmp	lr, r4
   2eb58:	beq	2eba4 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2eb5c:	ldrb	r3, [ip, #1]
   2eb60:	sub	r6, r3, #48	; 0x30
   2eb64:	cmp	r6, #9
   2eb68:	bhi	2ef90 <grisu3_diy_fp_encode_double@@Base+0xd68>
   2eb6c:	ldr	r7, [pc, #220]	; 2ec50 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2eb70:	add	ip, ip, #2
   2eb74:	b	2eb88 <grisu3_diy_fp_encode_double@@Base+0x960>
   2eb78:	ldrb	r3, [ip], #1
   2eb7c:	sub	r6, r3, #48	; 0x30
   2eb80:	cmp	r6, #9
   2eb84:	bhi	2ef90 <grisu3_diy_fp_encode_double@@Base+0xd68>
   2eb88:	add	r4, r2, r2, lsl #2
   2eb8c:	cmp	r2, r7
   2eb90:	add	r4, r3, r4, lsl #1
   2eb94:	suble	r2, r4, #48	; 0x30
   2eb98:	cmp	lr, ip
   2eb9c:	mov	r4, ip
   2eba0:	bne	2eb78 <grisu3_diy_fp_encode_double@@Base+0x950>
   2eba4:	ldr	r3, [sp, #8]
   2eba8:	cmp	r3, #0
   2ebac:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2ebb0:	sub	r5, r5, r2
   2ebb4:	b	2e988 <grisu3_diy_fp_encode_double@@Base+0x760>
   2ebb8:	add	r3, sl, #1
   2ebbc:	cmp	lr, r3
   2ebc0:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2ebc4:	ldrb	r0, [sl, #1]
   2ebc8:	mov	r2, #1
   2ebcc:	str	r2, [sp, #16]
   2ebd0:	cmp	r0, #48	; 0x30
   2ebd4:	bne	2e810 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   2ebd8:	add	r4, r3, #1
   2ebdc:	cmp	lr, r4
   2ebe0:	beq	2ed3c <grisu3_diy_fp_encode_double@@Base+0xb14>
   2ebe4:	ldrb	ip, [r3, #1]
   2ebe8:	orr	r2, ip, #32
   2ebec:	cmp	r2, #120	; 0x78
   2ebf0:	moveq	r4, sl
   2ebf4:	beq	2e928 <grisu3_diy_fp_encode_double@@Base+0x700>
   2ebf8:	cmp	ip, #48	; 0x30
   2ebfc:	bne	2ec1c <grisu3_diy_fp_encode_double@@Base+0x9f4>
   2ec00:	add	r3, r3, #2
   2ec04:	cmp	lr, r3
   2ec08:	mov	r4, r3
   2ec0c:	beq	2ed3c <grisu3_diy_fp_encode_double@@Base+0xb14>
   2ec10:	ldrb	ip, [r3], #1
   2ec14:	cmp	ip, #48	; 0x30
   2ec18:	beq	2ec04 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2ec1c:	mov	r9, r4
   2ec20:	mov	r0, #0
   2ec24:	mov	r1, #0
   2ec28:	b	2e834 <grisu3_diy_fp_encode_double@@Base+0x60c>
   2ec2c:	mov	r8, #1
   2ec30:	b	2e8b0 <grisu3_diy_fp_encode_double@@Base+0x688>
   2ec34:	nop			; (mov r0, r0)
   2ec38:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2ec3c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2ec40:	andge	r0, r0, #0
   2ec44:	rsbmi	r1, sp, #148, 20	; 0x94000
   2ec48:	andeq	r0, r0, r6, lsr r1
   2ec4c:			; <UNDEFINED> instruction: 0x001fffff
   2ec50:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2ec54:	svcvc	0x00f00000	; IMB
   2ec58:	ldr	r3, [pc, #-12]	; 2ec54 <grisu3_diy_fp_encode_double@@Base+0xa2c>
   2ec5c:	mov	r2, #0
   2ec60:	strd	r2, [fp]
   2ec64:	b	2eac4 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2ec68:	mov	r4, #0
   2ec6c:	b	2e928 <grisu3_diy_fp_encode_double@@Base+0x700>
   2ec70:	ldrb	r3, [r4, #1]
   2ec74:	add	ip, r4, #1
   2ec78:	mov	r5, ip
   2ec7c:	str	ip, [sp, #20]
   2ec80:	sub	ip, r3, #48	; 0x30
   2ec84:	cmp	ip, #9
   2ec88:	bhi	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2ec8c:	cmp	lr, r5
   2ec90:	beq	2f1a8 <grisu3_diy_fp_encode_double@@Base+0xf80>
   2ec94:	add	r7, pc, #980	; 0x3d4
   2ec98:	ldrd	r6, [r7]
   2ec9c:	cmp	r1, r7
   2eca0:	cmpeq	r0, r6
   2eca4:	bhi	2f198 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2eca8:	add	r4, r4, #2
   2ecac:	strd	r6, [sp, #8]
   2ecb0:	mov	ip, #10
   2ecb4:	str	r9, [sp, #24]
   2ecb8:	str	r8, [sp, #28]
   2ecbc:	b	2ece4 <grisu3_diy_fp_encode_double@@Base+0xabc>
   2ecc0:	ldrb	r3, [r4]
   2ecc4:	add	r4, r4, #1
   2ecc8:	sub	r5, r3, #48	; 0x30
   2eccc:	cmp	r5, #9
   2ecd0:	bhi	2efc8 <grisu3_diy_fp_encode_double@@Base+0xda0>
   2ecd4:	ldrd	r8, [sp, #8]
   2ecd8:	cmp	r1, r9
   2ecdc:	cmpeq	r0, r8
   2ece0:	bhi	2f128 <grisu3_diy_fp_encode_double@@Base+0xf00>
   2ece4:	umull	r6, r7, r0, ip
   2ece8:	mla	r7, ip, r1, r7
   2ecec:	adds	r0, r6, r3
   2ecf0:	adc	r1, r7, #0
   2ecf4:	subs	r0, r0, #48	; 0x30
   2ecf8:	sbc	r1, r1, #0
   2ecfc:	cmp	lr, r4
   2ed00:	sub	r2, r2, #1
   2ed04:	mov	r6, r4
   2ed08:	bne	2ecc0 <grisu3_diy_fp_encode_double@@Base+0xa98>
   2ed0c:	ldr	r3, [sp, #20]
   2ed10:	ldr	r9, [sp, #24]
   2ed14:	ldr	r8, [sp, #28]
   2ed18:	sub	r3, lr, r3
   2ed1c:	mov	r4, lr
   2ed20:	add	r9, r9, r3
   2ed24:	add	r5, r2, r9
   2ed28:	b	2e988 <grisu3_diy_fp_encode_double@@Base+0x760>
   2ed2c:	mov	r4, lr
   2ed30:	mov	r0, r4
   2ed34:	add	sp, sp, #44	; 0x2c
   2ed38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed3c:	mov	r9, #0
   2ed40:	mov	r0, #0
   2ed44:	mov	r1, #0
   2ed48:	mov	r5, r9
   2ed4c:	mov	r8, #0
   2ed50:	b	2e988 <grisu3_diy_fp_encode_double@@Base+0x760>
   2ed54:	stm	sp, {r8, fp}
   2ed58:	mov	r3, r9
   2ed5c:	mov	r2, r5
   2ed60:	bl	2e228 <grisu3_diy_fp_encode_double@@Base>
   2ed64:	cmp	r0, #0
   2ed68:	bne	2eac4 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2ed6c:	mov	r0, sl
   2ed70:	add	r1, sp, #36	; 0x24
   2ed74:	bl	145dc <strtod@plt>
   2ed78:	ldr	r3, [sp, #36]	; 0x24
   2ed7c:	cmp	r4, r3
   2ed80:	movcs	r4, r3
   2ed84:	vstr	d0, [fp]
   2ed88:	b	2e928 <grisu3_diy_fp_encode_double@@Base+0x700>
   2ed8c:	vldr	d6, [pc, #740]	; 2f078 <grisu3_diy_fp_encode_double@@Base+0xe50>
   2ed90:	vmul.f64	d7, d7, d6
   2ed94:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ed98:	vldr	d6, [pc, #736]	; 2f080 <grisu3_diy_fp_encode_double@@Base+0xe58>
   2ed9c:	vmul.f64	d7, d7, d6
   2eda0:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eda4:	vldr	d6, [pc, #732]	; 2f088 <grisu3_diy_fp_encode_double@@Base+0xe60>
   2eda8:	vmul.f64	d7, d7, d6
   2edac:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2edb0:	vldr	d6, [pc, #728]	; 2f090 <grisu3_diy_fp_encode_double@@Base+0xe68>
   2edb4:	vmul.f64	d7, d7, d6
   2edb8:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2edbc:	vldr	d6, [pc, #724]	; 2f098 <grisu3_diy_fp_encode_double@@Base+0xe70>
   2edc0:	vmul.f64	d7, d7, d6
   2edc4:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2edc8:	vldr	d6, [pc, #720]	; 2f0a0 <grisu3_diy_fp_encode_double@@Base+0xe78>
   2edcc:	vmul.f64	d7, d7, d6
   2edd0:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2edd4:	vldr	d6, [pc, #716]	; 2f0a8 <grisu3_diy_fp_encode_double@@Base+0xe80>
   2edd8:	vmul.f64	d7, d7, d6
   2eddc:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ede0:	vldr	d6, [pc, #712]	; 2f0b0 <grisu3_diy_fp_encode_double@@Base+0xe88>
   2ede4:	vmul.f64	d7, d7, d6
   2ede8:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2edec:	vldr	d6, [pc, #708]	; 2f0b8 <grisu3_diy_fp_encode_double@@Base+0xe90>
   2edf0:	vmul.f64	d7, d7, d6
   2edf4:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2edf8:	vldr	d6, [pc, #704]	; 2f0c0 <grisu3_diy_fp_encode_double@@Base+0xe98>
   2edfc:	vmul.f64	d7, d7, d6
   2ee00:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee04:	vldr	d6, [pc, #700]	; 2f0c8 <grisu3_diy_fp_encode_double@@Base+0xea0>
   2ee08:	vmul.f64	d7, d7, d6
   2ee0c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee10:	vldr	d6, [pc, #696]	; 2f0d0 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2ee14:	vmul.f64	d7, d7, d6
   2ee18:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee1c:	vldr	d6, [pc, #676]	; 2f0c8 <grisu3_diy_fp_encode_double@@Base+0xea0>
   2ee20:	vdiv.f64	d7, d7, d6
   2ee24:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee28:	vldr	d6, [pc, #656]	; 2f0c0 <grisu3_diy_fp_encode_double@@Base+0xe98>
   2ee2c:	vdiv.f64	d7, d7, d6
   2ee30:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee34:	vldr	d6, [pc, #636]	; 2f0b8 <grisu3_diy_fp_encode_double@@Base+0xe90>
   2ee38:	vdiv.f64	d7, d7, d6
   2ee3c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee40:	vldr	d6, [pc, #656]	; 2f0d8 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2ee44:	vmul.f64	d7, d7, d6
   2ee48:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee4c:	vldr	d6, [pc, #652]	; 2f0e0 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   2ee50:	vmul.f64	d7, d7, d6
   2ee54:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee58:	vldr	d6, [pc, #648]	; 2f0e8 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2ee5c:	vmul.f64	d7, d7, d6
   2ee60:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee64:	vldr	d6, [pc, #644]	; 2f0f0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2ee68:	vmul.f64	d7, d7, d6
   2ee6c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee70:	vldr	d6, [pc, #640]	; 2f0f8 <grisu3_diy_fp_encode_double@@Base+0xed0>
   2ee74:	vmul.f64	d7, d7, d6
   2ee78:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee7c:	vldr	d6, [pc, #636]	; 2f100 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2ee80:	vmul.f64	d7, d7, d6
   2ee84:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee88:	vldr	d6, [pc, #632]	; 2f108 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2ee8c:	vmul.f64	d7, d7, d6
   2ee90:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ee94:	vldr	d6, [pc, #628]	; 2f110 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2ee98:	vmul.f64	d7, d7, d6
   2ee9c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eea0:	vldr	d6, [pc, #624]	; 2f118 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2eea4:	vmul.f64	d7, d7, d6
   2eea8:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eeac:	vldr	d6, [pc, #548]	; 2f0d8 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   2eeb0:	vdiv.f64	d7, d7, d6
   2eeb4:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eeb8:	vldr	d6, [pc, #528]	; 2f0d0 <grisu3_diy_fp_encode_double@@Base+0xea8>
   2eebc:	vdiv.f64	d7, d7, d6
   2eec0:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eec4:	vldr	d6, [pc, #588]	; 2f118 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2eec8:	vdiv.f64	d7, d7, d6
   2eecc:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eed0:	vldr	d6, [pc, #472]	; 2f0b0 <grisu3_diy_fp_encode_double@@Base+0xe88>
   2eed4:	vdiv.f64	d7, d7, d6
   2eed8:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eedc:	vldr	d6, [pc, #452]	; 2f0a8 <grisu3_diy_fp_encode_double@@Base+0xe80>
   2eee0:	vdiv.f64	d7, d7, d6
   2eee4:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eee8:	vldr	d6, [pc, #432]	; 2f0a0 <grisu3_diy_fp_encode_double@@Base+0xe78>
   2eeec:	vdiv.f64	d7, d7, d6
   2eef0:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2eef4:	vldr	d6, [pc, #412]	; 2f098 <grisu3_diy_fp_encode_double@@Base+0xe70>
   2eef8:	vdiv.f64	d7, d7, d6
   2eefc:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef00:	vldr	d6, [pc, #392]	; 2f090 <grisu3_diy_fp_encode_double@@Base+0xe68>
   2ef04:	vdiv.f64	d7, d7, d6
   2ef08:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef0c:	vldr	d6, [pc, #372]	; 2f088 <grisu3_diy_fp_encode_double@@Base+0xe60>
   2ef10:	vdiv.f64	d7, d7, d6
   2ef14:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef18:	vldr	d6, [pc, #352]	; 2f080 <grisu3_diy_fp_encode_double@@Base+0xe58>
   2ef1c:	vdiv.f64	d7, d7, d6
   2ef20:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef24:	vldr	d6, [pc, #332]	; 2f078 <grisu3_diy_fp_encode_double@@Base+0xe50>
   2ef28:	vdiv.f64	d7, d7, d6
   2ef2c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef30:	vldr	d6, [pc, #488]	; 2f120 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2ef34:	vdiv.f64	d7, d7, d6
   2ef38:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef3c:	vldr	d6, [pc, #460]	; 2f110 <grisu3_diy_fp_encode_double@@Base+0xee8>
   2ef40:	vdiv.f64	d7, d7, d6
   2ef44:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef48:	vldr	d6, [pc, #440]	; 2f108 <grisu3_diy_fp_encode_double@@Base+0xee0>
   2ef4c:	vdiv.f64	d7, d7, d6
   2ef50:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef54:	vldr	d6, [pc, #420]	; 2f100 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2ef58:	vdiv.f64	d7, d7, d6
   2ef5c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef60:	vldr	d6, [pc, #400]	; 2f0f8 <grisu3_diy_fp_encode_double@@Base+0xed0>
   2ef64:	vdiv.f64	d7, d7, d6
   2ef68:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef6c:	vldr	d6, [pc, #380]	; 2f0f0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2ef70:	vdiv.f64	d7, d7, d6
   2ef74:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef78:	vldr	d6, [pc, #360]	; 2f0e8 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2ef7c:	vdiv.f64	d7, d7, d6
   2ef80:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef84:	vldr	d6, [pc, #340]	; 2f0e0 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   2ef88:	vdiv.f64	d7, d7, d6
   2ef8c:	b	2eac0 <grisu3_diy_fp_encode_double@@Base+0x898>
   2ef90:	ldr	r3, [sp, #8]
   2ef94:	cmp	r3, #0
   2ef98:	bne	2ebb0 <grisu3_diy_fp_encode_double@@Base+0x988>
   2ef9c:	add	r5, r5, r2
   2efa0:	b	2e990 <grisu3_diy_fp_encode_double@@Base+0x768>
   2efa4:	add	ip, r4, #2
   2efa8:	cmp	lr, ip
   2efac:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2efb0:	mov	r3, #0
   2efb4:	ldrb	r2, [r4, #2]
   2efb8:	str	r3, [sp, #8]
   2efbc:	b	2eb40 <grisu3_diy_fp_encode_double@@Base+0x918>
   2efc0:	sub	r9, lr, r9
   2efc4:	b	2ed48 <grisu3_diy_fp_encode_double@@Base+0xb20>
   2efc8:	ldr	r3, [sp, #20]
   2efcc:	ldr	r9, [sp, #24]
   2efd0:	sub	r3, r6, r3
   2efd4:	ldr	r8, [sp, #28]
   2efd8:	add	r9, r9, r3
   2efdc:	ldrb	ip, [r6]
   2efe0:	cmp	ip, #48	; 0x30
   2efe4:	bne	2f184 <grisu3_diy_fp_encode_double@@Base+0xf5c>
   2efe8:	sub	r3, r2, r6
   2efec:	add	r6, r6, #1
   2eff0:	cmp	r6, lr
   2eff4:	mov	r4, r6
   2eff8:	add	r2, r3, r6
   2effc:	beq	2ed24 <grisu3_diy_fp_encode_double@@Base+0xafc>
   2f000:	ldrb	ip, [r6], #1
   2f004:	cmp	ip, #48	; 0x30
   2f008:	beq	2eff0 <grisu3_diy_fp_encode_double@@Base+0xdc8>
   2f00c:	sub	r3, ip, #49	; 0x31
   2f010:	cmp	r3, #8
   2f014:	bhi	2f068 <grisu3_diy_fp_encode_double@@Base+0xe40>
   2f018:	add	r3, r4, #1
   2f01c:	cmp	lr, r3
   2f020:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2f024:	ldrb	ip, [r4, #1]
   2f028:	sub	r5, ip, #48	; 0x30
   2f02c:	cmp	r5, #9
   2f030:	bhi	2f060 <grisu3_diy_fp_encode_double@@Base+0xe38>
   2f034:	add	r3, r4, #2
   2f038:	b	2f050 <grisu3_diy_fp_encode_double@@Base+0xe28>
   2f03c:	ldrb	ip, [r3]
   2f040:	add	r3, r3, #1
   2f044:	sub	r5, ip, #48	; 0x30
   2f048:	cmp	r5, #9
   2f04c:	bhi	2f064 <grisu3_diy_fp_encode_double@@Base+0xe3c>
   2f050:	cmp	r3, lr
   2f054:	mov	r4, r3
   2f058:	bne	2f03c <grisu3_diy_fp_encode_double@@Base+0xe14>
   2f05c:	b	2e980 <grisu3_diy_fp_encode_double@@Base+0x758>
   2f060:	mov	r4, r3
   2f064:	mov	r8, #1
   2f068:	add	r5, r2, r9
   2f06c:	b	2eb08 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   2f070:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2f074:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2f078:	stmda	r0, {}	; <UNPREDICTABLE>
   2f07c:	eorsmi	r4, r7, #7733248	; 0x760000
   2f080:	andcs	r0, r0, r0
   2f084:	andmi	sl, r2, #95	; 0x5f
   2f088:	andeq	r0, r0, r0
   2f08c:	bicmi	ip, sp, r5, ror #26
   2f090:	andeq	r0, r0, r0
   2f094:	orrsmi	sp, r7, r4, lsl #15
   2f098:	andeq	r0, r0, r0
   2f09c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2f0a0:	andeq	r0, r0, r0
   2f0a4:	smlawbmi	lr, r0, r4, r8
   2f0a8:	andeq	r0, r0, r0
   2f0ac:	rscsmi	r6, r8, r0, lsl #20
   2f0b0:	andeq	r0, r0, r0
   2f0b4:	sbcmi	r8, r3, r0, lsl #16
   2f0b8:	andeq	r0, r0, r0
   2f0bc:	addmi	r4, pc, r0
   2f0c0:	andeq	r0, r0, r0
   2f0c4:	subsmi	r0, r9, r0
   2f0c8:	andeq	r0, r0, r0
   2f0cc:	eormi	r0, r4, r0
   2f0d0:			; <UNDEFINED> instruction: 0x064dd592
   2f0d4:	strmi	pc, [r0], #207	; 0xcf
   2f0d8:	ldmvc	r5!, {r6, sl, fp, pc}
   2f0dc:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2f0e0:	addsvs	r3, r1, r0, lsl #26
   2f0e4:	mvnmi	r5, #228, 16	; 0xe40000
   2f0e8:	strbvs	ip, [lr, -r0, lsl #16]
   2f0ec:			; <UNDEFINED> instruction: 0x43abc16d
   2f0f0:	ldrbhi	sl, [r8]
   2f0f4:	cmnmi	r6, #1459617792	; 0x57000000
   2f0f8:	strbcc	r8, [r0, r0]!
   2f0fc:	movtmi	ip, #4985	; 0x1379
   2f100:	ldrtcs	r0, [r4], -r0
   2f104:	movwmi	r6, #52213	; 0xcbf5
   2f108:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2f10c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2f110:	strb	r0, [r0, #-0]
   2f114:	adcmi	r3, r2, #156	; 0x9c
   2f118:	usatle	lr, #2, r0, asr #30
   2f11c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2f120:	andge	r0, r0, #0
   2f124:	rsbmi	r1, sp, #148, 20	; 0x94000
   2f128:	ldr	r8, [sp, #28]
   2f12c:	ldr	ip, [sp, #20]
   2f130:	cmp	r8, #0
   2f134:	ldr	r9, [sp, #24]
   2f138:	sub	r8, r6, ip
   2f13c:	bne	2f154 <grisu3_diy_fp_encode_double@@Base+0xf2c>
   2f140:	cmp	r3, #52	; 0x34
   2f144:	movls	r3, #0
   2f148:	movhi	r3, #1
   2f14c:	adds	r0, r0, r3
   2f150:	adc	r1, r1, #0
   2f154:	cmp	lr, r6
   2f158:	add	r9, r9, r8
   2f15c:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2f160:	mov	r8, #1
   2f164:	b	2efdc <grisu3_diy_fp_encode_double@@Base+0xdb4>
   2f168:	add	ip, r4, #2
   2f16c:	cmp	lr, ip
   2f170:	beq	2ec68 <grisu3_diy_fp_encode_double@@Base+0xa40>
   2f174:	mov	r3, #1
   2f178:	ldrb	r2, [r4, #2]
   2f17c:	str	r3, [sp, #8]
   2f180:	b	2eb40 <grisu3_diy_fp_encode_double@@Base+0x918>
   2f184:	mov	r4, r6
   2f188:	b	2f00c <grisu3_diy_fp_encode_double@@Base+0xde4>
   2f18c:	mov	r4, lr
   2f190:	mov	r9, #0
   2f194:	b	2ed48 <grisu3_diy_fp_encode_double@@Base+0xb20>
   2f198:	cmp	r8, #0
   2f19c:	bne	2f1b4 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   2f1a0:	mov	r6, r5
   2f1a4:	b	2f140 <grisu3_diy_fp_encode_double@@Base+0xf18>
   2f1a8:	mov	r4, lr
   2f1ac:	mov	r3, #0
   2f1b0:	b	2ed20 <grisu3_diy_fp_encode_double@@Base+0xaf8>
   2f1b4:	mov	r6, r5
   2f1b8:	b	2efdc <grisu3_diy_fp_encode_double@@Base+0xdb4>

0002f1bc <flatcc_json_parser_error_string@@Base>:
   2f1bc:	cmp	r0, #34	; 0x22
   2f1c0:	ldrls	r3, [pc, #12]	; 2f1d4 <flatcc_json_parser_error_string@@Base+0x18>
   2f1c4:	addls	r0, r3, r0, lsl #2
   2f1c8:	ldrls	r0, [r0, #1476]	; 0x5c4
   2f1cc:	ldrhi	r0, [pc, #4]	; 2f1d8 <flatcc_json_parser_error_string@@Base+0x1c>
   2f1d0:	bx	lr
   2f1d4:	andeq	r6, r4, r8, lsl #15
   2f1d8:	strdeq	r6, [r4], -r4

0002f1dc <flatcc_json_parser_set_error@@Base>:
   2f1dc:	ldr	ip, [r0, #24]
   2f1e0:	cmp	ip, #0
   2f1e4:	bne	2f200 <flatcc_json_parser_set_error@@Base+0x24>
   2f1e8:	ldr	ip, [r0, #4]
   2f1ec:	str	r3, [r0, #24]
   2f1f0:	sub	r3, r1, ip
   2f1f4:	add	r3, r3, #1
   2f1f8:	str	r1, [r0, #36]	; 0x24
   2f1fc:	str	r3, [r0, #20]
   2f200:	mov	r0, r2
   2f204:	bx	lr

0002f208 <flatcc_json_parser_string_part@@Base>:
   2f208:	cmp	r1, r2
   2f20c:	push	{lr}		; (str lr, [sp, #-4]!)
   2f210:	beq	2f278 <flatcc_json_parser_string_part@@Base+0x70>
   2f214:	ldrb	r3, [r1]
   2f218:	cmp	r3, #34	; 0x22
   2f21c:	cmpne	r3, #31
   2f220:	movhi	ip, #1
   2f224:	movls	ip, #0
   2f228:	cmp	r3, #92	; 0x5c
   2f22c:	moveq	ip, #0
   2f230:	andne	ip, ip, #1
   2f234:	cmp	ip, #0
   2f238:	beq	2f28c <flatcc_json_parser_string_part@@Base+0x84>
   2f23c:	add	ip, r1, #1
   2f240:	b	2f26c <flatcc_json_parser_string_part@@Base+0x64>
   2f244:	ldrb	r3, [ip], #1
   2f248:	cmp	r3, #34	; 0x22
   2f24c:	cmpne	r3, #31
   2f250:	movhi	lr, #1
   2f254:	movls	lr, #0
   2f258:	cmp	r3, #92	; 0x5c
   2f25c:	moveq	lr, #0
   2f260:	andne	lr, lr, #1
   2f264:	cmp	lr, #0
   2f268:	beq	2f28c <flatcc_json_parser_string_part@@Base+0x84>
   2f26c:	cmp	ip, r2
   2f270:	mov	r1, ip
   2f274:	bne	2f244 <flatcc_json_parser_string_part@@Base+0x3c>
   2f278:	ldr	r3, [r0, #24]
   2f27c:	cmp	r3, #0
   2f280:	beq	2f2d0 <flatcc_json_parser_string_part@@Base+0xc8>
   2f284:	mov	r0, r2
   2f288:	pop	{pc}		; (ldr pc, [sp], #4)
   2f28c:	cmp	r3, #31
   2f290:	bhi	2f2c4 <flatcc_json_parser_string_part@@Base+0xbc>
   2f294:	ldr	r3, [r0, #24]
   2f298:	cmp	r3, #0
   2f29c:	bne	2f284 <flatcc_json_parser_string_part@@Base+0x7c>
   2f2a0:	ldr	r3, [r0, #4]
   2f2a4:	mov	ip, #17
   2f2a8:	sub	r3, r1, r3
   2f2ac:	add	r3, r3, #1
   2f2b0:	str	r1, [r0, #36]	; 0x24
   2f2b4:	str	r3, [r0, #20]
   2f2b8:	str	ip, [r0, #24]
   2f2bc:	mov	r0, r2
   2f2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   2f2c4:	mov	r2, r1
   2f2c8:	mov	r0, r2
   2f2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   2f2d0:	ldr	r3, [r0, #4]
   2f2d4:	mov	ip, #20
   2f2d8:	b	2f2a8 <flatcc_json_parser_string_part@@Base+0xa0>

0002f2dc <flatcc_json_parser_space_ext@@Base>:
   2f2dc:	push	{lr}		; (str lr, [sp, #-4]!)
   2f2e0:	mov	lr, #0
   2f2e4:	cmp	r1, r2
   2f2e8:	beq	2f3f8 <flatcc_json_parser_space_ext@@Base+0x11c>
   2f2ec:	ldrb	ip, [r1]
   2f2f0:	cmp	ip, #32
   2f2f4:	bne	2f320 <flatcc_json_parser_space_ext@@Base+0x44>
   2f2f8:	add	r3, r1, #1
   2f2fc:	b	2f30c <flatcc_json_parser_space_ext@@Base+0x30>
   2f300:	ldrb	ip, [r3], #1
   2f304:	cmp	ip, #32
   2f308:	bne	2f320 <flatcc_json_parser_space_ext@@Base+0x44>
   2f30c:	cmp	r3, r2
   2f310:	mov	r1, r3
   2f314:	bne	2f300 <flatcc_json_parser_space_ext@@Base+0x24>
   2f318:	mov	r0, r1
   2f31c:	pop	{pc}		; (ldr pc, [sp], #4)
   2f320:	cmp	ip, #32
   2f324:	bhi	2f318 <flatcc_json_parser_space_ext@@Base+0x3c>
   2f328:	sub	ip, ip, #9
   2f32c:	cmp	ip, #23
   2f330:	ldrls	pc, [pc, ip, lsl #2]
   2f334:	b	2f3ec <flatcc_json_parser_space_ext@@Base+0x110>
   2f338:	andeq	pc, r2, r4, ror #7
   2f33c:			; <UNDEFINED> instruction: 0x0002f3b8
   2f340:	andeq	pc, r2, ip, ror #7
   2f344:	andeq	pc, r2, ip, ror #7
   2f348:	muleq	r2, r8, r3
   2f34c:	andeq	pc, r2, ip, ror #7
   2f350:	andeq	pc, r2, ip, ror #7
   2f354:	andeq	pc, r2, ip, ror #7
   2f358:	andeq	pc, r2, ip, ror #7
   2f35c:	andeq	pc, r2, ip, ror #7
   2f360:	andeq	pc, r2, ip, ror #7
   2f364:	andeq	pc, r2, ip, ror #7
   2f368:	andeq	pc, r2, ip, ror #7
   2f36c:	andeq	pc, r2, ip, ror #7
   2f370:	andeq	pc, r2, ip, ror #7
   2f374:	andeq	pc, r2, ip, ror #7
   2f378:	andeq	pc, r2, ip, ror #7
   2f37c:	andeq	pc, r2, ip, ror #7
   2f380:	andeq	pc, r2, ip, ror #7
   2f384:	andeq	pc, r2, ip, ror #7
   2f388:	andeq	pc, r2, ip, ror #7
   2f38c:	andeq	pc, r2, ip, ror #7
   2f390:	andeq	pc, r2, ip, ror #7
   2f394:	andeq	pc, r2, r4, ror #5
   2f398:	sub	r3, r2, r1
   2f39c:	cmp	r3, #1
   2f3a0:	movle	r3, lr
   2f3a4:	ldrbgt	r3, [r1, #1]
   2f3a8:	subgt	r3, r3, #10
   2f3ac:	clzgt	r3, r3
   2f3b0:	lsrgt	r3, r3, #5
   2f3b4:	add	r1, r1, r3
   2f3b8:	ldr	r3, [r0, #16]
   2f3bc:	add	r1, r1, #1
   2f3c0:	add	r3, r3, #1
   2f3c4:	str	r1, [r0, #4]
   2f3c8:	str	r3, [r0, #16]
   2f3cc:	cmp	r2, r1
   2f3d0:	beq	2f3f8 <flatcc_json_parser_space_ext@@Base+0x11c>
   2f3d4:	ldrb	ip, [r1]
   2f3d8:	cmp	ip, #32
   2f3dc:	bls	2f328 <flatcc_json_parser_space_ext@@Base+0x4c>
   2f3e0:	b	2f318 <flatcc_json_parser_space_ext@@Base+0x3c>
   2f3e4:	add	r1, r1, #1
   2f3e8:	b	2f3cc <flatcc_json_parser_space_ext@@Base+0xf0>
   2f3ec:	ldr	r3, [r0, #24]
   2f3f0:	cmp	r3, #0
   2f3f4:	beq	2f404 <flatcc_json_parser_space_ext@@Base+0x128>
   2f3f8:	mov	r1, r2
   2f3fc:	mov	r0, r1
   2f400:	pop	{pc}		; (ldr pc, [sp], #4)
   2f404:	ldr	r3, [r0, #4]
   2f408:	str	r1, [r0, #36]	; 0x24
   2f40c:	sub	r3, r1, r3
   2f410:	mov	ip, #5
   2f414:	add	r3, r3, #1
   2f418:	mov	r1, r2
   2f41c:	str	r3, [r0, #20]
   2f420:	str	ip, [r0, #24]
   2f424:	mov	r0, r1
   2f428:	pop	{pc}		; (ldr pc, [sp], #4)

0002f42c <flatcc_json_parser_string_escape@@Base>:
   2f42c:	push	{r4, r5, lr}
   2f430:	sub	lr, r2, r1
   2f434:	cmp	lr, #1
   2f438:	mov	ip, r0
   2f43c:	ble	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f440:	ldrb	r0, [r1]
   2f444:	cmp	r0, #92	; 0x5c
   2f448:	beq	2f48c <flatcc_json_parser_string_escape@@Base+0x60>
   2f44c:	mov	r0, #0
   2f450:	strb	r0, [r3]
   2f454:	ldr	r3, [ip, #24]
   2f458:	cmp	r3, r0
   2f45c:	beq	2f468 <flatcc_json_parser_string_escape@@Base+0x3c>
   2f460:	mov	r0, r2
   2f464:	pop	{r4, r5, pc}
   2f468:	ldr	r3, [ip, #4]
   2f46c:	mov	lr, #18
   2f470:	sub	r3, r1, r3
   2f474:	add	r3, r3, #1
   2f478:	str	r1, [ip, #36]	; 0x24
   2f47c:	mov	r0, r2
   2f480:	str	r3, [ip, #20]
   2f484:	str	lr, [ip, #24]
   2f488:	pop	{r4, r5, pc}
   2f48c:	ldrb	r0, [r1, #1]
   2f490:	sub	r0, r0, #34	; 0x22
   2f494:	cmp	r0, #86	; 0x56
   2f498:	ldrls	pc, [pc, r0, lsl #2]
   2f49c:	b	2f818 <flatcc_json_parser_string_escape@@Base+0x3ec>
   2f4a0:	andeq	pc, r2, r4, lsl #13
   2f4a4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4a8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4ac:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4b0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4b4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4b8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4bc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4c0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4c4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4c8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4cc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4d0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4d4:	muleq	r2, ip, r6
   2f4d8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4dc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4e0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4e4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4e8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4ec:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4f0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4f4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4f8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f4fc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f500:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f504:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f508:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f50c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f510:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f514:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f518:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f51c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f520:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f524:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f528:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f52c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f530:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f534:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f538:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f53c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f540:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f544:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f548:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f54c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f550:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f554:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f558:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f55c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f560:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f564:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f568:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f56c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f570:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f574:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f578:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f57c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f580:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f584:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f588:			; <UNDEFINED> instruction: 0x0002f6b4
   2f58c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f590:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f594:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f598:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f59c:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5a0:	andeq	pc, r2, ip, asr #13
   2f5a4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5a8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5ac:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5b0:	andeq	pc, r2, r4, ror #13
   2f5b4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5b8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5bc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5c0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5c4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5c8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5cc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5d0:	strdeq	pc, [r2], -ip
   2f5d4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5d8:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5dc:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5e0:	andeq	pc, r2, r4, lsl r7	; <UNPREDICTABLE>
   2f5e4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5e8:	andeq	pc, r2, ip, lsr #14
   2f5ec:	andeq	pc, r2, r4, asr #14
   2f5f0:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5f4:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f5f8:	strdeq	pc, [r2], -ip
   2f5fc:	mov	r0, #1
   2f600:	cmp	lr, #3
   2f604:	strb	r0, [r3]
   2f608:	ble	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f60c:	ldrb	r0, [r1, #2]
   2f610:	sub	lr, r0, #48	; 0x30
   2f614:	uxtb	r4, lr
   2f618:	cmp	r4, #9
   2f61c:	lslls	r0, lr, #4
   2f620:	uxtbls	r0, r0
   2f624:	bls	2f644 <flatcc_json_parser_string_escape@@Base+0x218>
   2f628:	orr	r0, r0, #32
   2f62c:	sub	lr, r0, #97	; 0x61
   2f630:	cmp	lr, #5
   2f634:	bhi	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f638:	sub	r0, r0, #87	; 0x57
   2f63c:	lsl	r0, r0, #4
   2f640:	uxtb	r0, r0
   2f644:	ldrb	lr, [r1, #3]
   2f648:	sub	r4, lr, #48	; 0x30
   2f64c:	uxtb	r4, r4
   2f650:	cmp	r4, #9
   2f654:	orrls	r0, r4, r0
   2f658:	bls	2f678 <flatcc_json_parser_string_escape@@Base+0x24c>
   2f65c:	orr	lr, lr, #32
   2f660:	sub	r4, lr, #97	; 0x61
   2f664:	cmp	r4, #5
   2f668:	bhi	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f66c:	sub	lr, lr, #87	; 0x57
   2f670:	orr	r0, lr, r0
   2f674:	uxtb	r0, r0
   2f678:	strb	r0, [r3, #1]
   2f67c:	add	r0, r1, #4
   2f680:	pop	{r4, r5, pc}
   2f684:	mov	ip, #1
   2f688:	mov	r2, #34	; 0x22
   2f68c:	add	r0, r1, #2
   2f690:	strb	ip, [r3]
   2f694:	strb	r2, [r3, #1]
   2f698:	pop	{r4, r5, pc}
   2f69c:	mov	ip, #1
   2f6a0:	mov	r2, #47	; 0x2f
   2f6a4:	add	r0, r1, #2
   2f6a8:	strb	ip, [r3]
   2f6ac:	strb	r2, [r3, #1]
   2f6b0:	pop	{r4, r5, pc}
   2f6b4:	mov	ip, #1
   2f6b8:	mov	r2, #92	; 0x5c
   2f6bc:	add	r0, r1, #2
   2f6c0:	strb	ip, [r3]
   2f6c4:	strb	r2, [r3, #1]
   2f6c8:	pop	{r4, r5, pc}
   2f6cc:	mov	ip, #1
   2f6d0:	mov	r2, #8
   2f6d4:	add	r0, r1, #2
   2f6d8:	strb	ip, [r3]
   2f6dc:	strb	r2, [r3, #1]
   2f6e0:	pop	{r4, r5, pc}
   2f6e4:	mov	ip, #1
   2f6e8:	mov	r2, #12
   2f6ec:	add	r0, r1, #2
   2f6f0:	strb	ip, [r3]
   2f6f4:	strb	r2, [r3, #1]
   2f6f8:	pop	{r4, r5, pc}
   2f6fc:	mov	ip, #1
   2f700:	mov	r2, #10
   2f704:	add	r0, r1, #2
   2f708:	strb	ip, [r3]
   2f70c:	strb	r2, [r3, #1]
   2f710:	pop	{r4, r5, pc}
   2f714:	mov	ip, #1
   2f718:	mov	r2, #13
   2f71c:	add	r0, r1, #2
   2f720:	strb	ip, [r3]
   2f724:	strb	r2, [r3, #1]
   2f728:	pop	{r4, r5, pc}
   2f72c:	mov	ip, #1
   2f730:	mov	r2, #9
   2f734:	add	r0, r1, #2
   2f738:	strb	ip, [r3]
   2f73c:	strb	r2, [r3, #1]
   2f740:	pop	{r4, r5, pc}
   2f744:	cmp	lr, #5
   2f748:	ble	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f74c:	ldrb	r0, [r1, #2]
   2f750:	sub	lr, r0, #48	; 0x30
   2f754:	uxtb	r4, lr
   2f758:	cmp	r4, #9
   2f75c:	lslls	r0, lr, #12
   2f760:	uxthls	r0, r0
   2f764:	bls	2f784 <flatcc_json_parser_string_escape@@Base+0x358>
   2f768:	orr	r0, r0, #32
   2f76c:	sub	lr, r0, #97	; 0x61
   2f770:	cmp	lr, #5
   2f774:	bhi	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f778:	sub	r0, r0, #87	; 0x57
   2f77c:	lsl	r0, r0, #12
   2f780:	and	r0, r0, #61440	; 0xf000
   2f784:	ldrb	lr, [r1, #3]
   2f788:	sub	r4, lr, #48	; 0x30
   2f78c:	uxtb	r5, r4
   2f790:	cmp	r5, #9
   2f794:	bhi	2f850 <flatcc_json_parser_string_escape@@Base+0x424>
   2f798:	uxth	r4, r4
   2f79c:	orr	r0, r0, r4, lsl #8
   2f7a0:	and	r0, r0, #65280	; 0xff00
   2f7a4:	ldrb	lr, [r1, #4]
   2f7a8:	sub	r4, lr, #48	; 0x30
   2f7ac:	uxtb	r5, r4
   2f7b0:	cmp	r5, #9
   2f7b4:	bhi	2f874 <flatcc_json_parser_string_escape@@Base+0x448>
   2f7b8:	uxth	r4, r4
   2f7bc:	orr	r0, r0, r4, lsl #4
   2f7c0:	uxth	r0, r0
   2f7c4:	ldrb	lr, [r1, #5]
   2f7c8:	sub	r4, lr, #48	; 0x30
   2f7cc:	uxtb	r5, r4
   2f7d0:	cmp	r5, #9
   2f7d4:	orrls	r2, r0, r4
   2f7d8:	uxthls	r2, r2
   2f7dc:	bls	2f7fc <flatcc_json_parser_string_escape@@Base+0x3d0>
   2f7e0:	orr	lr, lr, #32
   2f7e4:	sub	r4, lr, #97	; 0x61
   2f7e8:	cmp	r4, #5
   2f7ec:	bhi	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f7f0:	sub	r2, lr, #87	; 0x57
   2f7f4:	orr	r2, r0, r2
   2f7f8:	uxth	r2, r2
   2f7fc:	cmp	r2, #127	; 0x7f
   2f800:	bhi	2f898 <flatcc_json_parser_string_escape@@Base+0x46c>
   2f804:	mov	r0, #1
   2f808:	strb	r2, [r3, #1]
   2f80c:	strb	r0, [r3]
   2f810:	add	r0, r1, #6
   2f814:	pop	{r4, r5, pc}
   2f818:	mov	r0, #0
   2f81c:	strb	r0, [r3]
   2f820:	ldr	r3, [ip, #24]
   2f824:	cmp	r3, r0
   2f828:	bne	2f460 <flatcc_json_parser_string_escape@@Base+0x34>
   2f82c:	ldr	r3, [ip, #4]
   2f830:	mov	r0, r2
   2f834:	sub	r3, r1, r3
   2f838:	add	r3, r3, #1
   2f83c:	mov	r2, #18
   2f840:	str	r1, [ip, #36]	; 0x24
   2f844:	str	r3, [ip, #20]
   2f848:	str	r2, [ip, #24]
   2f84c:	pop	{r4, r5, pc}
   2f850:	orr	lr, lr, #32
   2f854:	sub	r4, lr, #97	; 0x61
   2f858:	cmp	r4, #5
   2f85c:	bhi	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f860:	sub	lr, lr, #87	; 0x57
   2f864:	uxth	lr, lr
   2f868:	orr	r0, r0, lr, lsl #8
   2f86c:	and	r0, r0, #65280	; 0xff00
   2f870:	b	2f7a4 <flatcc_json_parser_string_escape@@Base+0x378>
   2f874:	orr	lr, lr, #32
   2f878:	sub	r4, lr, #97	; 0x61
   2f87c:	cmp	r4, #5
   2f880:	bhi	2f44c <flatcc_json_parser_string_escape@@Base+0x20>
   2f884:	sub	lr, lr, #87	; 0x57
   2f888:	uxth	lr, lr
   2f88c:	orr	r0, r0, lr, lsl #4
   2f890:	uxth	r0, r0
   2f894:	b	2f7c4 <flatcc_json_parser_string_escape@@Base+0x398>
   2f898:	cmp	r2, #2048	; 0x800
   2f89c:	bcs	2f8c8 <flatcc_json_parser_string_escape@@Base+0x49c>
   2f8a0:	and	r0, r2, #63	; 0x3f
   2f8a4:	mvn	ip, #63	; 0x3f
   2f8a8:	mvn	r0, r0, lsl #25
   2f8ac:	orr	r2, ip, r2, lsr #6
   2f8b0:	mvn	r0, r0, lsr #25
   2f8b4:	mov	ip, #2
   2f8b8:	strb	r0, [r3, #2]
   2f8bc:	strb	r2, [r3, #1]
   2f8c0:	strb	ip, [r3]
   2f8c4:	b	2f810 <flatcc_json_parser_string_escape@@Base+0x3e4>
   2f8c8:	lsl	lr, r2, #20
   2f8cc:	mvn	r4, #127	; 0x7f
   2f8d0:	and	ip, r2, #63	; 0x3f
   2f8d4:	mvn	r0, #31
   2f8d8:	orr	r2, r0, r2, lsr #12
   2f8dc:	orr	lr, r4, lr, lsr #26
   2f8e0:	orr	ip, ip, r4
   2f8e4:	mov	r0, #3
   2f8e8:	strb	lr, [r3, #2]
   2f8ec:	strb	ip, [r3, #3]
   2f8f0:	strb	r2, [r3, #1]
   2f8f4:	strb	r0, [r3]
   2f8f8:	b	2f810 <flatcc_json_parser_string_escape@@Base+0x3e4>

0002f8fc <flatcc_json_parser_skip_constant@@Base>:
   2f8fc:	cmp	r1, r2
   2f900:	beq	2fae0 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   2f904:	push	{r4, lr}
   2f908:	mov	r4, r0
   2f90c:	ldrb	r3, [r1]
   2f910:	b	2f928 <flatcc_json_parser_skip_constant@@Base+0x2c>
   2f914:	add	ip, r1, #1
   2f918:	cmp	r2, ip
   2f91c:	beq	2fa9c <flatcc_json_parser_skip_constant@@Base+0x1a0>
   2f920:	ldrb	r3, [r1, #1]
   2f924:	mov	r1, ip
   2f928:	sub	ip, r3, #95	; 0x5f
   2f92c:	clz	ip, ip
   2f930:	lsr	ip, ip, #5
   2f934:	orrs	r0, ip, r3, lsr #7
   2f938:	bne	2f914 <flatcc_json_parser_skip_constant@@Base+0x18>
   2f93c:	sub	ip, r3, #48	; 0x30
   2f940:	cmp	r3, #46	; 0x2e
   2f944:	cmpne	ip, #9
   2f948:	movls	lr, #1
   2f94c:	movhi	lr, #0
   2f950:	bls	2f914 <flatcc_json_parser_skip_constant@@Base+0x18>
   2f954:	orr	ip, r3, #32
   2f958:	sub	ip, ip, #97	; 0x61
   2f95c:	cmp	ip, #25
   2f960:	bls	2f914 <flatcc_json_parser_skip_constant@@Base+0x18>
   2f964:	sub	r0, r2, r1
   2f968:	cmp	r0, #1
   2f96c:	ble	2f97c <flatcc_json_parser_skip_constant@@Base+0x80>
   2f970:	cmp	r3, #32
   2f974:	bhi	2faa4 <flatcc_json_parser_skip_constant@@Base+0x1a8>
   2f978:	beq	2faac <flatcc_json_parser_skip_constant@@Base+0x1b0>
   2f97c:	mov	r0, r1
   2f980:	cmp	r2, r0
   2f984:	popeq	{r4, pc}
   2f988:	ldrb	r3, [r0]
   2f98c:	cmp	r3, #32
   2f990:	bne	2f9b0 <flatcc_json_parser_skip_constant@@Base+0xb4>
   2f994:	add	ip, r0, #1
   2f998:	cmp	ip, r2
   2f99c:	mov	r0, ip
   2f9a0:	popeq	{r4, pc}
   2f9a4:	ldrb	r3, [ip], #1
   2f9a8:	cmp	r3, #32
   2f9ac:	beq	2f998 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2f9b0:	cmp	r3, #32
   2f9b4:	bhi	2fa70 <flatcc_json_parser_skip_constant@@Base+0x174>
   2f9b8:	sub	r3, r3, #9
   2f9bc:	cmp	r3, #23
   2f9c0:	ldrls	pc, [pc, r3, lsl #2]
   2f9c4:	b	2fa90 <flatcc_json_parser_skip_constant@@Base+0x194>
   2f9c8:	andeq	pc, r2, r0, lsl #21
   2f9cc:	andeq	pc, r2, r8, asr #20
   2f9d0:	muleq	r2, r0, sl
   2f9d4:	muleq	r2, r0, sl
   2f9d8:	andeq	pc, r2, r8, lsr #20
   2f9dc:	muleq	r2, r0, sl
   2f9e0:	muleq	r2, r0, sl
   2f9e4:	muleq	r2, r0, sl
   2f9e8:	muleq	r2, r0, sl
   2f9ec:	muleq	r2, r0, sl
   2f9f0:	muleq	r2, r0, sl
   2f9f4:	muleq	r2, r0, sl
   2f9f8:	muleq	r2, r0, sl
   2f9fc:	muleq	r2, r0, sl
   2fa00:	muleq	r2, r0, sl
   2fa04:	muleq	r2, r0, sl
   2fa08:	muleq	r2, r0, sl
   2fa0c:	muleq	r2, r0, sl
   2fa10:	muleq	r2, r0, sl
   2fa14:	muleq	r2, r0, sl
   2fa18:	muleq	r2, r0, sl
   2fa1c:	muleq	r2, r0, sl
   2fa20:	muleq	r2, r0, sl
   2fa24:	andeq	pc, r2, r0, lsl #19
   2fa28:	sub	r3, r2, r0
   2fa2c:	cmp	r3, #1
   2fa30:	movle	r3, lr
   2fa34:	ldrbgt	r3, [r0, #1]
   2fa38:	subgt	r3, r3, #10
   2fa3c:	clzgt	r3, r3
   2fa40:	lsrgt	r3, r3, #5
   2fa44:	add	r0, r0, r3
   2fa48:	ldr	r3, [r4, #16]
   2fa4c:	add	r0, r0, #1
   2fa50:	cmp	r2, r0
   2fa54:	add	r3, r3, #1
   2fa58:	str	r0, [r4, #4]
   2fa5c:	str	r3, [r4, #16]
   2fa60:	popeq	{r4, pc}
   2fa64:	ldrb	r3, [r0]
   2fa68:	cmp	r3, #32
   2fa6c:	bls	2f9b8 <flatcc_json_parser_skip_constant@@Base+0xbc>
   2fa70:	cmp	r0, r1
   2fa74:	popeq	{r4, pc}
   2fa78:	mov	r1, r0
   2fa7c:	b	2f928 <flatcc_json_parser_skip_constant@@Base+0x2c>
   2fa80:	add	r0, r0, #1
   2fa84:	cmp	r2, r0
   2fa88:	bne	2fa64 <flatcc_json_parser_skip_constant@@Base+0x168>
   2fa8c:	pop	{r4, pc}
   2fa90:	ldr	r3, [r4, #24]
   2fa94:	cmp	r3, #0
   2fa98:	beq	2fabc <flatcc_json_parser_skip_constant@@Base+0x1c0>
   2fa9c:	mov	r0, r2
   2faa0:	pop	{r4, pc}
   2faa4:	mov	r0, r1
   2faa8:	pop	{r4, pc}
   2faac:	ldrb	r3, [r1, #1]
   2fab0:	cmp	r3, #32
   2fab4:	bls	2f97c <flatcc_json_parser_skip_constant@@Base+0x80>
   2fab8:	b	2f914 <flatcc_json_parser_skip_constant@@Base+0x18>
   2fabc:	ldr	r3, [r4, #4]
   2fac0:	mov	r1, #5
   2fac4:	sub	r3, r0, r3
   2fac8:	add	r3, r3, #1
   2facc:	str	r0, [r4, #36]	; 0x24
   2fad0:	str	r3, [r4, #20]
   2fad4:	mov	r0, r2
   2fad8:	str	r1, [r4, #24]
   2fadc:	pop	{r4, pc}
   2fae0:	mov	r0, r1
   2fae4:	bx	lr

0002fae8 <flatcc_json_parser_match_constant@@Base>:
   2fae8:	sub	ip, r2, r1
   2faec:	push	{r4, r5, r6, lr}
   2faf0:	cmp	r3, ip
   2faf4:	ldr	r4, [sp, #16]
   2faf8:	bge	2fb48 <flatcc_json_parser_match_constant@@Base+0x60>
   2fafc:	ldr	ip, [r0, #12]
   2fb00:	add	r5, r1, r3
   2fb04:	cmp	ip, #0
   2fb08:	bne	2fb5c <flatcc_json_parser_match_constant@@Base+0x74>
   2fb0c:	ldrb	r3, [r1, r3]
   2fb10:	cmp	r3, #32
   2fb14:	beq	2fcfc <flatcc_json_parser_match_constant@@Base+0x214>
   2fb18:	cmp	r3, #34	; 0x22
   2fb1c:	beq	2fd44 <flatcc_json_parser_match_constant@@Base+0x25c>
   2fb20:	cmp	r3, #92	; 0x5c
   2fb24:	str	ip, [r4]
   2fb28:	movne	r3, r1
   2fb2c:	bne	2fb40 <flatcc_json_parser_match_constant@@Base+0x58>
   2fb30:	ldr	r3, [r0, #24]
   2fb34:	cmp	r3, #0
   2fb38:	movne	r3, r2
   2fb3c:	beq	2fecc <flatcc_json_parser_match_constant@@Base+0x3e4>
   2fb40:	mov	r0, r3
   2fb44:	pop	{r4, r5, r6, pc}
   2fb48:	mov	r2, #0
   2fb4c:	mov	r3, r1
   2fb50:	str	r2, [r4]
   2fb54:	mov	r0, r3
   2fb58:	pop	{r4, r5, r6, pc}
   2fb5c:	sub	ip, r2, r5
   2fb60:	cmp	ip, #1
   2fb64:	ble	2fb78 <flatcc_json_parser_match_constant@@Base+0x90>
   2fb68:	ldrb	r3, [r1, r3]
   2fb6c:	cmp	r3, #32
   2fb70:	bhi	2febc <flatcc_json_parser_match_constant@@Base+0x3d4>
   2fb74:	beq	2fc98 <flatcc_json_parser_match_constant@@Base+0x1b0>
   2fb78:	mov	r3, r5
   2fb7c:	mov	r6, #0
   2fb80:	cmp	r2, r3
   2fb84:	beq	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fb88:	ldrb	lr, [r3]
   2fb8c:	cmp	lr, #32
   2fb90:	bne	2fc04 <flatcc_json_parser_match_constant@@Base+0x11c>
   2fb94:	add	ip, r3, #1
   2fb98:	b	2fba8 <flatcc_json_parser_match_constant@@Base+0xc0>
   2fb9c:	ldrb	lr, [ip], #1
   2fba0:	cmp	lr, #32
   2fba4:	bne	2fc04 <flatcc_json_parser_match_constant@@Base+0x11c>
   2fba8:	cmp	ip, r2
   2fbac:	mov	r3, ip
   2fbb0:	bne	2fb9c <flatcc_json_parser_match_constant@@Base+0xb4>
   2fbb4:	mov	r2, #0
   2fbb8:	str	r2, [r4]
   2fbbc:	mov	r0, r3
   2fbc0:	pop	{r4, r5, r6, pc}
   2fbc4:	sub	ip, r2, r3
   2fbc8:	cmp	ip, #1
   2fbcc:	movle	ip, r6
   2fbd0:	ldrbgt	ip, [r3, #1]
   2fbd4:	subgt	ip, ip, #10
   2fbd8:	clzgt	ip, ip
   2fbdc:	lsrgt	ip, ip, #5
   2fbe0:	add	r3, r3, ip
   2fbe4:	ldr	ip, [r0, #16]
   2fbe8:	add	r3, r3, #1
   2fbec:	add	ip, ip, #1
   2fbf0:	str	r3, [r0, #4]
   2fbf4:	str	ip, [r0, #16]
   2fbf8:	cmp	r2, r3
   2fbfc:	beq	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fc00:	ldrb	lr, [r3]
   2fc04:	cmp	lr, #32
   2fc08:	bhi	2fcb0 <flatcc_json_parser_match_constant@@Base+0x1c8>
   2fc0c:	sub	lr, lr, #9
   2fc10:	cmp	lr, #23
   2fc14:	ldrls	pc, [pc, lr, lsl #2]
   2fc18:	b	2fc84 <flatcc_json_parser_match_constant@@Base+0x19c>
   2fc1c:	andeq	pc, r2, ip, ror ip	; <UNPREDICTABLE>
   2fc20:	andeq	pc, r2, r4, ror #23
   2fc24:	andeq	pc, r2, r4, lsl #25
   2fc28:	andeq	pc, r2, r4, lsl #25
   2fc2c:	andeq	pc, r2, r4, asr #23
   2fc30:	andeq	pc, r2, r4, lsl #25
   2fc34:	andeq	pc, r2, r4, lsl #25
   2fc38:	andeq	pc, r2, r4, lsl #25
   2fc3c:	andeq	pc, r2, r4, lsl #25
   2fc40:	andeq	pc, r2, r4, lsl #25
   2fc44:	andeq	pc, r2, r4, lsl #25
   2fc48:	andeq	pc, r2, r4, lsl #25
   2fc4c:	andeq	pc, r2, r4, lsl #25
   2fc50:	andeq	pc, r2, r4, lsl #25
   2fc54:	andeq	pc, r2, r4, lsl #25
   2fc58:	andeq	pc, r2, r4, lsl #25
   2fc5c:	andeq	pc, r2, r4, lsl #25
   2fc60:	andeq	pc, r2, r4, lsl #25
   2fc64:	andeq	pc, r2, r4, lsl #25
   2fc68:	andeq	pc, r2, r4, lsl #25
   2fc6c:	andeq	pc, r2, r4, lsl #25
   2fc70:	andeq	pc, r2, r4, lsl #25
   2fc74:	andeq	pc, r2, r4, lsl #25
   2fc78:	andeq	pc, r2, r0, lsl #23
   2fc7c:	add	r3, r3, #1
   2fc80:	b	2fbf8 <flatcc_json_parser_match_constant@@Base+0x110>
   2fc84:	ldr	r1, [r0, #24]
   2fc88:	cmp	r1, #0
   2fc8c:	beq	2fe70 <flatcc_json_parser_match_constant@@Base+0x388>
   2fc90:	mov	r3, r2
   2fc94:	b	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fc98:	ldrb	lr, [r5, #1]
   2fc9c:	cmp	lr, #32
   2fca0:	bls	2fb78 <flatcc_json_parser_match_constant@@Base+0x90>
   2fca4:	add	r3, r5, #1
   2fca8:	cmp	r2, r3
   2fcac:	beq	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fcb0:	cmp	r5, r3
   2fcb4:	beq	2fcdc <flatcc_json_parser_match_constant@@Base+0x1f4>
   2fcb8:	sub	r2, lr, #95	; 0x5f
   2fcbc:	clz	r2, r2
   2fcc0:	lsr	r2, r2, #5
   2fcc4:	orrs	r2, r2, lr, lsr #7
   2fcc8:	bne	2feb0 <flatcc_json_parser_match_constant@@Base+0x3c8>
   2fccc:	orr	lr, lr, #32
   2fcd0:	sub	lr, lr, #97	; 0x61
   2fcd4:	cmp	lr, #25
   2fcd8:	bls	2feb0 <flatcc_json_parser_match_constant@@Base+0x3c8>
   2fcdc:	mov	r2, #0
   2fce0:	str	r2, [r4]
   2fce4:	ldrb	r2, [r3]
   2fce8:	and	r0, r2, #223	; 0xdf
   2fcec:	cmp	r2, #44	; 0x2c
   2fcf0:	cmpne	r0, #93	; 0x5d
   2fcf4:	movne	r3, r1
   2fcf8:	b	2fb40 <flatcc_json_parser_match_constant@@Base+0x58>
   2fcfc:	add	r3, r5, #1
   2fd00:	cmp	r2, r3
   2fd04:	beq	2ff04 <flatcc_json_parser_match_constant@@Base+0x41c>
   2fd08:	ldrb	r1, [r5, #1]
   2fd0c:	cmp	r1, #32
   2fd10:	bne	2fe94 <flatcc_json_parser_match_constant@@Base+0x3ac>
   2fd14:	add	r3, r5, #2
   2fd18:	b	2fd28 <flatcc_json_parser_match_constant@@Base+0x240>
   2fd1c:	ldrb	r1, [r3], #1
   2fd20:	cmp	r1, #32
   2fd24:	bne	2fe98 <flatcc_json_parser_match_constant@@Base+0x3b0>
   2fd28:	cmp	r2, r3
   2fd2c:	mov	r5, r3
   2fd30:	bne	2fd1c <flatcc_json_parser_match_constant@@Base+0x234>
   2fd34:	mov	r2, #0
   2fd38:	mov	r3, r5
   2fd3c:	str	r2, [r4]
   2fd40:	b	2fb40 <flatcc_json_parser_match_constant@@Base+0x58>
   2fd44:	add	r3, r5, #1
   2fd48:	cmn	r3, #1
   2fd4c:	bge	2fd60 <flatcc_json_parser_match_constant@@Base+0x278>
   2fd50:	ldrb	r2, [r5, #1]
   2fd54:	cmp	r2, #32
   2fd58:	bhi	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fd5c:	beq	2fef0 <flatcc_json_parser_match_constant@@Base+0x408>
   2fd60:	mov	ip, #0
   2fd64:	cmp	r3, #0
   2fd68:	beq	2fd98 <flatcc_json_parser_match_constant@@Base+0x2b0>
   2fd6c:	ldrb	r1, [r3]
   2fd70:	cmp	r1, #32
   2fd74:	bne	2fde4 <flatcc_json_parser_match_constant@@Base+0x2fc>
   2fd78:	add	r2, r3, #1
   2fd7c:	b	2fd8c <flatcc_json_parser_match_constant@@Base+0x2a4>
   2fd80:	ldrb	r1, [r2], #1
   2fd84:	cmp	r1, #32
   2fd88:	bne	2fde4 <flatcc_json_parser_match_constant@@Base+0x2fc>
   2fd8c:	cmp	r2, #0
   2fd90:	mov	r3, r2
   2fd94:	bne	2fd80 <flatcc_json_parser_match_constant@@Base+0x298>
   2fd98:	mov	r2, #0
   2fd9c:	mov	r3, #0
   2fda0:	str	r2, [r4]
   2fda4:	b	2fbbc <flatcc_json_parser_match_constant@@Base+0xd4>
   2fda8:	cmn	r3, #1
   2fdac:	movge	r2, ip
   2fdb0:	ldrblt	r2, [r3, #1]
   2fdb4:	sublt	r2, r2, #10
   2fdb8:	clzlt	r2, r2
   2fdbc:	lsrlt	r2, r2, #5
   2fdc0:	add	r3, r3, r2
   2fdc4:	ldr	r2, [r0, #16]
   2fdc8:	add	r3, r3, #1
   2fdcc:	add	r2, r2, #1
   2fdd0:	str	r3, [r0, #4]
   2fdd4:	str	r2, [r0, #16]
   2fdd8:	cmp	r3, #0
   2fddc:	beq	2fd98 <flatcc_json_parser_match_constant@@Base+0x2b0>
   2fde0:	ldrb	r1, [r3]
   2fde4:	cmp	r1, #32
   2fde8:	bhi	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fdec:	sub	r1, r1, #9
   2fdf0:	cmp	r1, #23
   2fdf4:	ldrls	pc, [pc, r1, lsl #2]
   2fdf8:	b	2fe64 <flatcc_json_parser_match_constant@@Base+0x37c>
   2fdfc:	andeq	pc, r2, ip, asr lr	; <UNPREDICTABLE>
   2fe00:	andeq	pc, r2, r4, asr #27
   2fe04:	andeq	pc, r2, r4, ror #28
   2fe08:	andeq	pc, r2, r4, ror #28
   2fe0c:	andeq	pc, r2, r8, lsr #27
   2fe10:	andeq	pc, r2, r4, ror #28
   2fe14:	andeq	pc, r2, r4, ror #28
   2fe18:	andeq	pc, r2, r4, ror #28
   2fe1c:	andeq	pc, r2, r4, ror #28
   2fe20:	andeq	pc, r2, r4, ror #28
   2fe24:	andeq	pc, r2, r4, ror #28
   2fe28:	andeq	pc, r2, r4, ror #28
   2fe2c:	andeq	pc, r2, r4, ror #28
   2fe30:	andeq	pc, r2, r4, ror #28
   2fe34:	andeq	pc, r2, r4, ror #28
   2fe38:	andeq	pc, r2, r4, ror #28
   2fe3c:	andeq	pc, r2, r4, ror #28
   2fe40:	andeq	pc, r2, r4, ror #28
   2fe44:	andeq	pc, r2, r4, ror #28
   2fe48:	andeq	pc, r2, r4, ror #28
   2fe4c:	andeq	pc, r2, r4, ror #28
   2fe50:	andeq	pc, r2, r4, ror #28
   2fe54:	andeq	pc, r2, r4, ror #28
   2fe58:	andeq	pc, r2, r4, ror #26
   2fe5c:	add	r3, r3, #1
   2fe60:	b	2fdd8 <flatcc_json_parser_match_constant@@Base+0x2f0>
   2fe64:	ldr	r2, [r0, #24]
   2fe68:	cmp	r2, #0
   2fe6c:	bne	2fd98 <flatcc_json_parser_match_constant@@Base+0x2b0>
   2fe70:	ldr	r1, [r0, #4]
   2fe74:	mov	ip, #5
   2fe78:	sub	r1, r3, r1
   2fe7c:	add	r1, r1, #1
   2fe80:	str	r3, [r0, #36]	; 0x24
   2fe84:	str	r1, [r0, #20]
   2fe88:	mov	r3, r2
   2fe8c:	str	ip, [r0, #24]
   2fe90:	b	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2fe94:	mov	r5, r3
   2fe98:	cmp	r1, #34	; 0x22
   2fe9c:	beq	2fd44 <flatcc_json_parser_match_constant@@Base+0x25c>
   2fea0:	mov	r2, #1
   2fea4:	mov	r3, r5
   2fea8:	str	r2, [r4]
   2feac:	b	2fb40 <flatcc_json_parser_match_constant@@Base+0x58>
   2feb0:	mov	r2, #1
   2feb4:	str	r2, [r4]
   2feb8:	b	2fb40 <flatcc_json_parser_match_constant@@Base+0x58>
   2febc:	cmp	r5, r2
   2fec0:	movne	r3, r5
   2fec4:	beq	2fc90 <flatcc_json_parser_match_constant@@Base+0x1a8>
   2fec8:	b	2fcdc <flatcc_json_parser_match_constant@@Base+0x1f4>
   2fecc:	ldr	r1, [r0, #4]
   2fed0:	mov	ip, #18
   2fed4:	sub	r1, r5, r1
   2fed8:	add	r1, r1, #1
   2fedc:	str	r5, [r0, #36]	; 0x24
   2fee0:	mov	r3, r2
   2fee4:	str	r1, [r0, #20]
   2fee8:	str	ip, [r0, #24]
   2feec:	b	2fb40 <flatcc_json_parser_match_constant@@Base+0x58>
   2fef0:	ldrb	r2, [r5, #2]
   2fef4:	cmp	r2, #32
   2fef8:	addhi	r3, r5, #2
   2fefc:	bls	2fd60 <flatcc_json_parser_match_constant@@Base+0x278>
   2ff00:	b	2fbb4 <flatcc_json_parser_match_constant@@Base+0xcc>
   2ff04:	mov	r5, r2
   2ff08:	b	2fd34 <flatcc_json_parser_match_constant@@Base+0x24c>

0002ff0c <flatcc_json_parser_double@@Base>:
   2ff0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ff10:	mov	r8, #0
   2ff14:	mov	r9, #0
   2ff18:	cmp	r1, r2
   2ff1c:	mov	r5, r2
   2ff20:	strd	r8, [r3]
   2ff24:	beq	2ffe8 <flatcc_json_parser_double@@Base+0xdc>
   2ff28:	mov	r6, r3
   2ff2c:	ldrb	r3, [r1]
   2ff30:	mov	r4, r1
   2ff34:	mov	r7, r0
   2ff38:	cmp	r3, #45	; 0x2d
   2ff3c:	addeq	r3, r1, #1
   2ff40:	movne	r3, r1
   2ff44:	sub	r2, r2, r3
   2ff48:	cmp	r2, #1
   2ff4c:	ble	2ff64 <flatcc_json_parser_double@@Base+0x58>
   2ff50:	ldrb	r2, [r3]
   2ff54:	cmp	r2, #46	; 0x2e
   2ff58:	beq	2ffdc <flatcc_json_parser_double@@Base+0xd0>
   2ff5c:	cmp	r2, #48	; 0x30
   2ff60:	beq	2ffd0 <flatcc_json_parser_double@@Base+0xc4>
   2ff64:	mov	r2, r6
   2ff68:	sub	r1, r5, r4
   2ff6c:	mov	r0, r4
   2ff70:	bl	2e7b8 <grisu3_diy_fp_encode_double@@Base+0x590>
   2ff74:	cmp	r4, r0
   2ff78:	cmpne	r0, #0
   2ff7c:	mov	r3, r0
   2ff80:	bne	2ffc8 <flatcc_json_parser_double@@Base+0xbc>
   2ff84:	vldr	d7, [r6]
   2ff88:	vldr	d6, [pc, #112]	; 30000 <flatcc_json_parser_double@@Base+0xf4>
   2ff8c:	vabs.f64	d7, d7
   2ff90:	vcmp.f64	d7, d6
   2ff94:	vmrs	APSR_nzcv, fpscr
   2ff98:	ble	2ffdc <flatcc_json_parser_double@@Base+0xd0>
   2ff9c:	ldr	r3, [r7, #24]
   2ffa0:	cmp	r3, #0
   2ffa4:	bne	2ffe8 <flatcc_json_parser_double@@Base+0xdc>
   2ffa8:	ldr	r2, [r7, #4]
   2ffac:	mov	r1, #7
   2ffb0:	sub	r2, r4, r2
   2ffb4:	mov	r3, r5
   2ffb8:	add	r2, r2, #1
   2ffbc:	str	r4, [r7, #36]	; 0x24
   2ffc0:	str	r2, [r7, #20]
   2ffc4:	str	r1, [r7, #24]
   2ffc8:	mov	r0, r3
   2ffcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ffd0:	ldrb	r3, [r3, #1]
   2ffd4:	cmp	r3, #48	; 0x30
   2ffd8:	bne	2ff64 <flatcc_json_parser_double@@Base+0x58>
   2ffdc:	ldr	r3, [r7, #24]
   2ffe0:	cmp	r3, #0
   2ffe4:	beq	2fff4 <flatcc_json_parser_double@@Base+0xe8>
   2ffe8:	mov	r3, r5
   2ffec:	mov	r0, r3
   2fff0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fff4:	ldr	r2, [r7, #4]
   2fff8:	mov	r1, #6
   2fffc:	b	2ffb0 <flatcc_json_parser_double@@Base+0xa4>
   30000:			; <UNDEFINED> instruction: 0xffffffff
   30004:	svcvc	0x00efffff

00030008 <flatcc_json_parser_float@@Base>:
   30008:	mov	ip, #0
   3000c:	cmp	r1, r2
   30010:	push	{r4, r5, r6, r7, lr}
   30014:	mov	r5, r2
   30018:	sub	sp, sp, #12
   3001c:	str	ip, [r3]
   30020:	beq	300b4 <flatcc_json_parser_float@@Base+0xac>
   30024:	mov	r6, r3
   30028:	ldrb	r3, [r1]
   3002c:	mov	r4, r1
   30030:	mov	r7, r0
   30034:	cmp	r3, #45	; 0x2d
   30038:	addeq	r3, r1, #1
   3003c:	movne	r3, r1
   30040:	sub	r2, r2, r3
   30044:	cmp	r2, #1
   30048:	ble	30060 <flatcc_json_parser_float@@Base+0x58>
   3004c:	ldrb	r2, [r3]
   30050:	cmp	r2, #46	; 0x2e
   30054:	beq	300cc <flatcc_json_parser_float@@Base+0xc4>
   30058:	cmp	r2, #48	; 0x30
   3005c:	beq	30100 <flatcc_json_parser_float@@Base+0xf8>
   30060:	mov	r2, sp
   30064:	sub	r1, r5, r4
   30068:	mov	r0, r4
   3006c:	bl	2e7b8 <grisu3_diy_fp_encode_double@@Base+0x590>
   30070:	vldr	d6, [sp]
   30074:	vldr	s14, [pc, #160]	; 3011c <flatcc_json_parser_float@@Base+0x114>
   30078:	vcvt.f32.f64	s15, d6
   3007c:	vabs.f32	s11, s15
   30080:	vstr	s15, [r6]
   30084:	vcmp.f32	s11, s14
   30088:	vmrs	APSR_nzcv, fpscr
   3008c:	ble	300c0 <flatcc_json_parser_float@@Base+0xb8>
   30090:	vcmpe.f64	d6, #0.0
   30094:	vldr	s15, [pc, #132]	; 30120 <flatcc_json_parser_float@@Base+0x118>
   30098:	vldr	s14, [pc, #132]	; 30124 <flatcc_json_parser_float@@Base+0x11c>
   3009c:	ldr	r3, [r7, #24]
   300a0:	vmrs	APSR_nzcv, fpscr
   300a4:	vmovpl.f32	s15, s14
   300a8:	cmp	r3, #0
   300ac:	vstr	s15, [r6]
   300b0:	beq	30110 <flatcc_json_parser_float@@Base+0x108>
   300b4:	mov	r0, r5
   300b8:	add	sp, sp, #12
   300bc:	pop	{r4, r5, r6, r7, pc}
   300c0:	cmp	r4, r0
   300c4:	cmpne	r0, #0
   300c8:	bne	300b8 <flatcc_json_parser_float@@Base+0xb0>
   300cc:	ldr	r3, [r7, #24]
   300d0:	cmp	r3, #0
   300d4:	bne	300b4 <flatcc_json_parser_float@@Base+0xac>
   300d8:	ldr	r3, [r7, #4]
   300dc:	mov	r2, #6
   300e0:	sub	r3, r4, r3
   300e4:	add	r3, r3, #1
   300e8:	mov	r0, r5
   300ec:	str	r4, [r7, #36]	; 0x24
   300f0:	str	r3, [r7, #20]
   300f4:	str	r2, [r7, #24]
   300f8:	add	sp, sp, #12
   300fc:	pop	{r4, r5, r6, r7, pc}
   30100:	ldrb	r3, [r3, #1]
   30104:	cmp	r3, #48	; 0x30
   30108:	bne	30060 <flatcc_json_parser_float@@Base+0x58>
   3010c:	b	300cc <flatcc_json_parser_float@@Base+0xc4>
   30110:	ldr	r3, [r7, #4]
   30114:	mov	r2, #7
   30118:	b	300e0 <flatcc_json_parser_float@@Base+0xd8>
   3011c:	svcvc	0x007fffff
   30120:			; <UNDEFINED> instruction: 0xff800000
   30124:	svcvc	0x00800000

00030128 <flatcc_json_parser_generic_json@@Base>:
   30128:	cmp	r1, r2
   3012c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30130:	mov	r4, r2
   30134:	sub	sp, sp, #532	; 0x214
   30138:	beq	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   3013c:	ldrb	r2, [r1]
   30140:	add	r7, sp, #16
   30144:	mov	r3, r1
   30148:	mov	r5, r0
   3014c:	mov	r6, r7
   30150:	mov	fp, #125	; 0x7d
   30154:	mov	r8, #0
   30158:	mov	sl, #93	; 0x5d
   3015c:	mov	r9, #17
   30160:	cmp	r6, r7
   30164:	beq	30264 <flatcc_json_parser_generic_json@@Base+0x13c>
   30168:	ldrb	r1, [r6, #-1]
   3016c:	cmp	r1, #125	; 0x7d
   30170:	beq	30e28 <flatcc_json_parser_generic_json@@Base+0xd00>
   30174:	cmp	r2, #57	; 0x39
   30178:	bls	3026c <flatcc_json_parser_generic_json@@Base+0x144>
   3017c:	cmp	r2, #91	; 0x5b
   30180:	beq	3033c <flatcc_json_parser_generic_json@@Base+0x214>
   30184:	cmp	r2, #123	; 0x7b
   30188:	bne	30500 <flatcc_json_parser_generic_json@@Base+0x3d8>
   3018c:	add	r2, sp, #528	; 0x210
   30190:	cmp	r6, r2
   30194:	beq	31904 <flatcc_json_parser_generic_json@@Base+0x17dc>
   30198:	add	r0, r3, #1
   3019c:	sub	r2, r4, r0
   301a0:	cmp	r2, #1
   301a4:	strb	fp, [r6]
   301a8:	ble	301bc <flatcc_json_parser_generic_json@@Base+0x94>
   301ac:	ldrb	r2, [r3, #1]
   301b0:	cmp	r2, #32
   301b4:	bhi	31118 <flatcc_json_parser_generic_json@@Base+0xff0>
   301b8:	beq	31108 <flatcc_json_parser_generic_json@@Base+0xfe0>
   301bc:	cmp	r4, r0
   301c0:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   301c4:	ldrb	r2, [r0]
   301c8:	cmp	r2, #32
   301cc:	bne	301ec <flatcc_json_parser_generic_json@@Base+0xc4>
   301d0:	add	r3, r0, #1
   301d4:	cmp	r3, r4
   301d8:	mov	r0, r3
   301dc:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   301e0:	ldrb	r2, [r3], #1
   301e4:	cmp	r2, #32
   301e8:	beq	301d4 <flatcc_json_parser_generic_json@@Base+0xac>
   301ec:	cmp	r2, #32
   301f0:	bhi	31a1c <flatcc_json_parser_generic_json@@Base+0x18f4>
   301f4:	sub	r2, r2, #9
   301f8:	cmp	r2, #23
   301fc:	ldrls	pc, [pc, r2, lsl #2]
   30200:	b	304ac <flatcc_json_parser_generic_json@@Base+0x384>
   30204:	andeq	r0, r3, ip, asr #31
   30208:	andeq	r0, r3, r0, lsl #9
   3020c:	andeq	r0, r3, ip, lsr #9
   30210:	andeq	r0, r3, ip, lsr #9
   30214:	andeq	r0, r3, r0, ror #8
   30218:	andeq	r0, r3, ip, lsr #9
   3021c:	andeq	r0, r3, ip, lsr #9
   30220:	andeq	r0, r3, ip, lsr #9
   30224:	andeq	r0, r3, ip, lsr #9
   30228:	andeq	r0, r3, ip, lsr #9
   3022c:	andeq	r0, r3, ip, lsr #9
   30230:	andeq	r0, r3, ip, lsr #9
   30234:	andeq	r0, r3, ip, lsr #9
   30238:	andeq	r0, r3, ip, lsr #9
   3023c:	andeq	r0, r3, ip, lsr #9
   30240:	andeq	r0, r3, ip, lsr #9
   30244:	andeq	r0, r3, ip, lsr #9
   30248:	andeq	r0, r3, ip, lsr #9
   3024c:	andeq	r0, r3, ip, lsr #9
   30250:	andeq	r0, r3, ip, lsr #9
   30254:	andeq	r0, r3, ip, lsr #9
   30258:	andeq	r0, r3, ip, lsr #9
   3025c:	andeq	r0, r3, ip, lsr #9
   30260:			; <UNDEFINED> instruction: 0x000301bc
   30264:	cmp	r2, #57	; 0x39
   30268:	bhi	30fdc <flatcc_json_parser_generic_json@@Base+0xeb4>
   3026c:	cmp	r2, #48	; 0x30
   30270:	bcs	30284 <flatcc_json_parser_generic_json@@Base+0x15c>
   30274:	cmp	r2, #34	; 0x22
   30278:	beq	30f20 <flatcc_json_parser_generic_json@@Base+0xdf8>
   3027c:	cmp	r2, #45	; 0x2d
   30280:	bne	30500 <flatcc_json_parser_generic_json@@Base+0x3d8>
   30284:	cmp	r4, r3
   30288:	beq	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   3028c:	cmp	r2, #45	; 0x2d
   30290:	beq	314b4 <flatcc_json_parser_generic_json@@Base+0x138c>
   30294:	cmp	r2, #48	; 0x30
   30298:	beq	31044 <flatcc_json_parser_generic_json@@Base+0xf1c>
   3029c:	sub	r2, r2, #49	; 0x31
   302a0:	uxtb	r2, r2
   302a4:	cmp	r2, #8
   302a8:	bhi	31094 <flatcc_json_parser_generic_json@@Base+0xf6c>
   302ac:	add	r0, r3, #1
   302b0:	cmp	r4, r0
   302b4:	beq	31a44 <flatcc_json_parser_generic_json@@Base+0x191c>
   302b8:	ldrb	r2, [r3, #1]
   302bc:	sub	r1, r2, #48	; 0x30
   302c0:	cmp	r1, #9
   302c4:	bhi	31054 <flatcc_json_parser_generic_json@@Base+0xf2c>
   302c8:	add	r3, r3, #2
   302cc:	b	302e0 <flatcc_json_parser_generic_json@@Base+0x1b8>
   302d0:	ldrb	r2, [r3], #1
   302d4:	sub	r1, r2, #48	; 0x30
   302d8:	cmp	r1, #9
   302dc:	bhi	31054 <flatcc_json_parser_generic_json@@Base+0xf2c>
   302e0:	cmp	r3, r4
   302e4:	mov	r0, r3
   302e8:	bne	302d0 <flatcc_json_parser_generic_json@@Base+0x1a8>
   302ec:	ldr	r3, [r5, #24]
   302f0:	cmp	r3, #0
   302f4:	beq	317e0 <flatcc_json_parser_generic_json@@Base+0x16b8>
   302f8:	mov	r1, r6
   302fc:	mov	r0, r4
   30300:	cmp	r1, r7
   30304:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   30308:	ldrb	r2, [r1, #-1]
   3030c:	ldr	r3, [r5, #24]
   30310:	cmp	r2, #93	; 0x5d
   30314:	movne	r2, #10
   30318:	moveq	r2, #9
   3031c:	cmp	r3, #0
   30320:	beq	310c0 <flatcc_json_parser_generic_json@@Base+0xf98>
   30324:	mov	r0, r4
   30328:	add	sp, sp, #532	; 0x214
   3032c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30330:	cmp	r2, #91	; 0x5b
   30334:	bne	31800 <flatcc_json_parser_generic_json@@Base+0x16d8>
   30338:	mov	r3, r4
   3033c:	add	r2, sp, #528	; 0x210
   30340:	cmp	r6, r2
   30344:	beq	31904 <flatcc_json_parser_generic_json@@Base+0x17dc>
   30348:	add	r0, r3, #1
   3034c:	sub	r2, r4, r0
   30350:	cmp	r2, #1
   30354:	strb	sl, [r6]
   30358:	ble	3036c <flatcc_json_parser_generic_json@@Base+0x244>
   3035c:	ldrb	r2, [r3, #1]
   30360:	cmp	r2, #32
   30364:	bhi	310ec <flatcc_json_parser_generic_json@@Base+0xfc4>
   30368:	beq	310dc <flatcc_json_parser_generic_json@@Base+0xfb4>
   3036c:	cmp	r4, r0
   30370:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   30374:	ldrb	r2, [r0]
   30378:	cmp	r2, #32
   3037c:	bne	3039c <flatcc_json_parser_generic_json@@Base+0x274>
   30380:	add	r3, r0, #1
   30384:	cmp	r3, r4
   30388:	mov	r0, r3
   3038c:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   30390:	ldrb	r2, [r3], #1
   30394:	cmp	r2, #32
   30398:	beq	30384 <flatcc_json_parser_generic_json@@Base+0x25c>
   3039c:	cmp	r2, #32
   303a0:	bhi	31a84 <flatcc_json_parser_generic_json@@Base+0x195c>
   303a4:	sub	r2, r2, #9
   303a8:	cmp	r2, #23
   303ac:	ldrls	pc, [pc, r2, lsl #2]
   303b0:	b	304ac <flatcc_json_parser_generic_json@@Base+0x384>
   303b4:	ldrdeq	r0, [r3], -r4
   303b8:	andeq	r0, r3, r4, lsr r4
   303bc:	andeq	r0, r3, ip, lsr #9
   303c0:	andeq	r0, r3, ip, lsr #9
   303c4:	andeq	r0, r3, r4, lsl r4
   303c8:	andeq	r0, r3, ip, lsr #9
   303cc:	andeq	r0, r3, ip, lsr #9
   303d0:	andeq	r0, r3, ip, lsr #9
   303d4:	andeq	r0, r3, ip, lsr #9
   303d8:	andeq	r0, r3, ip, lsr #9
   303dc:	andeq	r0, r3, ip, lsr #9
   303e0:	andeq	r0, r3, ip, lsr #9
   303e4:	andeq	r0, r3, ip, lsr #9
   303e8:	andeq	r0, r3, ip, lsr #9
   303ec:	andeq	r0, r3, ip, lsr #9
   303f0:	andeq	r0, r3, ip, lsr #9
   303f4:	andeq	r0, r3, ip, lsr #9
   303f8:	andeq	r0, r3, ip, lsr #9
   303fc:	andeq	r0, r3, ip, lsr #9
   30400:	andeq	r0, r3, ip, lsr #9
   30404:	andeq	r0, r3, ip, lsr #9
   30408:	andeq	r0, r3, ip, lsr #9
   3040c:	andeq	r0, r3, ip, lsr #9
   30410:	andeq	r0, r3, ip, ror #6
   30414:	sub	r3, r4, r0
   30418:	cmp	r3, #1
   3041c:	movle	r3, r8
   30420:	ldrbgt	r3, [r0, #1]
   30424:	subgt	r3, r3, #10
   30428:	clzgt	r3, r3
   3042c:	lsrgt	r3, r3, #5
   30430:	add	r0, r0, r3
   30434:	ldr	r3, [r5, #16]
   30438:	add	r0, r0, #1
   3043c:	add	r3, r3, #1
   30440:	str	r0, [r5, #4]
   30444:	str	r3, [r5, #16]
   30448:	cmp	r4, r0
   3044c:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   30450:	ldrb	r2, [r0]
   30454:	cmp	r2, #32
   30458:	bls	303a4 <flatcc_json_parser_generic_json@@Base+0x27c>
   3045c:	b	310f4 <flatcc_json_parser_generic_json@@Base+0xfcc>
   30460:	sub	r3, r4, r0
   30464:	cmp	r3, #1
   30468:	movle	r3, r8
   3046c:	ldrbgt	r3, [r0, #1]
   30470:	subgt	r3, r3, #10
   30474:	clzgt	r3, r3
   30478:	lsrgt	r3, r3, #5
   3047c:	add	r0, r0, r3
   30480:	ldr	r3, [r5, #16]
   30484:	add	r0, r0, #1
   30488:	add	r3, r3, #1
   3048c:	str	r0, [r5, #4]
   30490:	str	r3, [r5, #16]
   30494:	cmp	r4, r0
   30498:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   3049c:	ldrb	r2, [r0]
   304a0:	cmp	r2, #32
   304a4:	bls	301f4 <flatcc_json_parser_generic_json@@Base+0xcc>
   304a8:	b	31120 <flatcc_json_parser_generic_json@@Base+0xff8>
   304ac:	ldr	r3, [r5, #24]
   304b0:	cmp	r3, #0
   304b4:	bne	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   304b8:	ldr	r3, [r5, #4]
   304bc:	mov	r2, #5
   304c0:	sub	r3, r0, r3
   304c4:	add	r3, r3, #1
   304c8:	str	r0, [r5, #36]	; 0x24
   304cc:	str	r3, [r5, #20]
   304d0:	mov	r0, r4
   304d4:	str	r2, [r5, #24]
   304d8:	add	sp, sp, #532	; 0x214
   304dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   304e0:	cmp	r2, #57	; 0x39
   304e4:	bls	31a9c <flatcc_json_parser_generic_json@@Base+0x1974>
   304e8:	cmp	r2, #91	; 0x5b
   304ec:	beq	31a94 <flatcc_json_parser_generic_json@@Base+0x196c>
   304f0:	cmp	r2, #123	; 0x7b
   304f4:	moveq	r3, r1
   304f8:	beq	3018c <flatcc_json_parser_generic_json@@Base+0x64>
   304fc:	mov	r3, r1
   30500:	mov	r1, r3
   30504:	mov	r2, r4
   30508:	mov	r0, r5
   3050c:	str	r3, [sp, #4]
   30510:	bl	2f8fc <flatcc_json_parser_skip_constant@@Base>
   30514:	ldr	r3, [sp, #4]
   30518:	cmp	r0, r3
   3051c:	beq	319a4 <flatcc_json_parser_generic_json@@Base+0x187c>
   30520:	cmp	r4, r0
   30524:	beq	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   30528:	cmp	r6, r7
   3052c:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   30530:	ldrb	r3, [r6, #-1]
   30534:	sub	r1, r6, #1
   30538:	cmp	r3, #93	; 0x5d
   3053c:	sub	r3, r4, r0
   30540:	beq	30724 <flatcc_json_parser_generic_json@@Base+0x5fc>
   30544:	cmp	r3, #1
   30548:	ble	3055c <flatcc_json_parser_generic_json@@Base+0x434>
   3054c:	ldrb	r2, [r0]
   30550:	cmp	r2, #32
   30554:	bhi	306bc <flatcc_json_parser_generic_json@@Base+0x594>
   30558:	beq	306ac <flatcc_json_parser_generic_json@@Base+0x584>
   3055c:	cmp	r4, r0
   30560:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30564:	ldrb	r2, [r0]
   30568:	cmp	r2, #32
   3056c:	bne	3058c <flatcc_json_parser_generic_json@@Base+0x464>
   30570:	add	r3, r0, #1
   30574:	cmp	r3, r4
   30578:	mov	r0, r3
   3057c:	beq	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   30580:	ldrb	r2, [r3], #1
   30584:	cmp	r2, #32
   30588:	beq	30574 <flatcc_json_parser_generic_json@@Base+0x44c>
   3058c:	cmp	r2, #32
   30590:	bhi	3064c <flatcc_json_parser_generic_json@@Base+0x524>
   30594:	sub	r2, r2, #9
   30598:	cmp	r2, #23
   3059c:	ldrls	pc, [pc, r2, lsl #2]
   305a0:	b	3067c <flatcc_json_parser_generic_json@@Base+0x554>
   305a4:	andeq	r0, r3, r4, ror r6
   305a8:	andeq	r0, r3, r4, lsr #12
   305ac:	andeq	r0, r3, ip, ror r6
   305b0:	andeq	r0, r3, ip, ror r6
   305b4:	andeq	r0, r3, r4, lsl #12
   305b8:	andeq	r0, r3, ip, ror r6
   305bc:	andeq	r0, r3, ip, ror r6
   305c0:	andeq	r0, r3, ip, ror r6
   305c4:	andeq	r0, r3, ip, ror r6
   305c8:	andeq	r0, r3, ip, ror r6
   305cc:	andeq	r0, r3, ip, ror r6
   305d0:	andeq	r0, r3, ip, ror r6
   305d4:	andeq	r0, r3, ip, ror r6
   305d8:	andeq	r0, r3, ip, ror r6
   305dc:	andeq	r0, r3, ip, ror r6
   305e0:	andeq	r0, r3, ip, ror r6
   305e4:	andeq	r0, r3, ip, ror r6
   305e8:	andeq	r0, r3, ip, ror r6
   305ec:	andeq	r0, r3, ip, ror r6
   305f0:	andeq	r0, r3, ip, ror r6
   305f4:	andeq	r0, r3, ip, ror r6
   305f8:	andeq	r0, r3, ip, ror r6
   305fc:	andeq	r0, r3, ip, ror r6
   30600:	andeq	r0, r3, ip, asr r5
   30604:	sub	r3, r4, r0
   30608:	cmp	r3, #1
   3060c:	movle	r3, r8
   30610:	ldrbgt	r3, [r0, #1]
   30614:	subgt	r3, r3, #10
   30618:	clzgt	r3, r3
   3061c:	lsrgt	r3, r3, #5
   30620:	add	r0, r0, r3
   30624:	ldr	r3, [r5, #16]
   30628:	add	r0, r0, #1
   3062c:	add	r3, r3, #1
   30630:	str	r0, [r5, #4]
   30634:	str	r3, [r5, #16]
   30638:	cmp	r4, r0
   3063c:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30640:	ldrb	r2, [r0]
   30644:	cmp	r2, #32
   30648:	bls	30594 <flatcc_json_parser_generic_json@@Base+0x46c>
   3064c:	cmp	r2, #44	; 0x2c
   30650:	beq	306cc <flatcc_json_parser_generic_json@@Base+0x5a4>
   30654:	cmp	r2, #125	; 0x7d
   30658:	beq	308e8 <flatcc_json_parser_generic_json@@Base+0x7c0>
   3065c:	ldr	r3, [r5, #24]
   30660:	cmp	r3, #0
   30664:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30668:	ldr	r3, [r5, #4]
   3066c:	mov	r2, #10
   30670:	b	30690 <flatcc_json_parser_generic_json@@Base+0x568>
   30674:	add	r0, r0, #1
   30678:	b	30638 <flatcc_json_parser_generic_json@@Base+0x510>
   3067c:	ldr	r3, [r5, #24]
   30680:	cmp	r3, #0
   30684:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30688:	ldr	r3, [r5, #4]
   3068c:	mov	r2, #5
   30690:	sub	r3, r0, r3
   30694:	add	r3, r3, #1
   30698:	str	r0, [r5, #36]	; 0x24
   3069c:	str	r3, [r5, #20]
   306a0:	str	r2, [r5, #24]
   306a4:	mov	r0, r4
   306a8:	b	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   306ac:	ldrb	r2, [r0, #1]
   306b0:	cmp	r2, #32
   306b4:	addhi	r0, r0, #1
   306b8:	bls	3055c <flatcc_json_parser_generic_json@@Base+0x434>
   306bc:	cmp	r4, r0
   306c0:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   306c4:	cmp	r2, #44	; 0x2c
   306c8:	bne	30654 <flatcc_json_parser_generic_json@@Base+0x52c>
   306cc:	add	r3, r0, #1
   306d0:	sub	r2, r4, r3
   306d4:	cmp	r2, #1
   306d8:	ble	306ec <flatcc_json_parser_generic_json@@Base+0x5c4>
   306dc:	ldrb	r2, [r0, #1]
   306e0:	cmp	r2, #32
   306e4:	bhi	30b58 <flatcc_json_parser_generic_json@@Base+0xa30>
   306e8:	beq	30b48 <flatcc_json_parser_generic_json@@Base+0xa20>
   306ec:	cmp	r4, r3
   306f0:	beq	30b60 <flatcc_json_parser_generic_json@@Base+0xa38>
   306f4:	ldrb	r2, [r3]
   306f8:	cmp	r2, #32
   306fc:	bne	30a40 <flatcc_json_parser_generic_json@@Base+0x918>
   30700:	add	r0, r3, #1
   30704:	b	30714 <flatcc_json_parser_generic_json@@Base+0x5ec>
   30708:	ldrb	r2, [r0], #1
   3070c:	cmp	r2, #32
   30710:	bne	30a40 <flatcc_json_parser_generic_json@@Base+0x918>
   30714:	cmp	r0, r4
   30718:	mov	r3, r0
   3071c:	bne	30708 <flatcc_json_parser_generic_json@@Base+0x5e0>
   30720:	b	30b64 <flatcc_json_parser_generic_json@@Base+0xa3c>
   30724:	cmp	r3, #1
   30728:	ble	3073c <flatcc_json_parser_generic_json@@Base+0x614>
   3072c:	ldrb	r2, [r0]
   30730:	cmp	r2, #32
   30734:	bhi	3086c <flatcc_json_parser_generic_json@@Base+0x744>
   30738:	beq	3085c <flatcc_json_parser_generic_json@@Base+0x734>
   3073c:	cmp	r4, r0
   30740:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30744:	ldrb	r2, [r0]
   30748:	cmp	r2, #32
   3074c:	bne	3076c <flatcc_json_parser_generic_json@@Base+0x644>
   30750:	add	r3, r0, #1
   30754:	cmp	r3, r4
   30758:	mov	r0, r3
   3075c:	beq	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   30760:	ldrb	r2, [r3], #1
   30764:	cmp	r2, #32
   30768:	beq	30754 <flatcc_json_parser_generic_json@@Base+0x62c>
   3076c:	cmp	r2, #32
   30770:	bhi	3082c <flatcc_json_parser_generic_json@@Base+0x704>
   30774:	sub	r2, r2, #9
   30778:	cmp	r2, #23
   3077c:	ldrls	pc, [pc, r2, lsl #2]
   30780:	b	3067c <flatcc_json_parser_generic_json@@Base+0x554>
   30784:	andeq	r0, r3, r4, asr r8
   30788:	andeq	r0, r3, r4, lsl #16
   3078c:	andeq	r0, r3, ip, ror r6
   30790:	andeq	r0, r3, ip, ror r6
   30794:	andeq	r0, r3, r4, ror #15
   30798:	andeq	r0, r3, ip, ror r6
   3079c:	andeq	r0, r3, ip, ror r6
   307a0:	andeq	r0, r3, ip, ror r6
   307a4:	andeq	r0, r3, ip, ror r6
   307a8:	andeq	r0, r3, ip, ror r6
   307ac:	andeq	r0, r3, ip, ror r6
   307b0:	andeq	r0, r3, ip, ror r6
   307b4:	andeq	r0, r3, ip, ror r6
   307b8:	andeq	r0, r3, ip, ror r6
   307bc:	andeq	r0, r3, ip, ror r6
   307c0:	andeq	r0, r3, ip, ror r6
   307c4:	andeq	r0, r3, ip, ror r6
   307c8:	andeq	r0, r3, ip, ror r6
   307cc:	andeq	r0, r3, ip, ror r6
   307d0:	andeq	r0, r3, ip, ror r6
   307d4:	andeq	r0, r3, ip, ror r6
   307d8:	andeq	r0, r3, ip, ror r6
   307dc:	andeq	r0, r3, ip, ror r6
   307e0:	andeq	r0, r3, ip, lsr r7
   307e4:	sub	r3, r4, r0
   307e8:	cmp	r3, #1
   307ec:	movle	r3, r8
   307f0:	ldrbgt	r3, [r0, #1]
   307f4:	subgt	r3, r3, #10
   307f8:	clzgt	r3, r3
   307fc:	lsrgt	r3, r3, #5
   30800:	add	r0, r0, r3
   30804:	ldr	r3, [r5, #16]
   30808:	add	r0, r0, #1
   3080c:	add	r3, r3, #1
   30810:	str	r0, [r5, #4]
   30814:	str	r3, [r5, #16]
   30818:	cmp	r4, r0
   3081c:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30820:	ldrb	r2, [r0]
   30824:	cmp	r2, #32
   30828:	bls	30774 <flatcc_json_parser_generic_json@@Base+0x64c>
   3082c:	cmp	r2, #44	; 0x2c
   30830:	beq	3087c <flatcc_json_parser_generic_json@@Base+0x754>
   30834:	cmp	r2, #93	; 0x5d
   30838:	beq	30b94 <flatcc_json_parser_generic_json@@Base+0xa6c>
   3083c:	ldr	r3, [r5, #24]
   30840:	cmp	r3, #0
   30844:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30848:	ldr	r3, [r5, #4]
   3084c:	mov	r2, #9
   30850:	b	30690 <flatcc_json_parser_generic_json@@Base+0x568>
   30854:	add	r0, r0, #1
   30858:	b	30818 <flatcc_json_parser_generic_json@@Base+0x6f0>
   3085c:	ldrb	r2, [r0, #1]
   30860:	cmp	r2, #32
   30864:	addhi	r0, r0, #1
   30868:	bls	3073c <flatcc_json_parser_generic_json@@Base+0x614>
   3086c:	cmp	r4, r0
   30870:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30874:	cmp	r2, #44	; 0x2c
   30878:	bne	30834 <flatcc_json_parser_generic_json@@Base+0x70c>
   3087c:	add	r3, r0, #1
   30880:	sub	r2, r4, r3
   30884:	cmp	r2, #1
   30888:	ble	3089c <flatcc_json_parser_generic_json@@Base+0x774>
   3088c:	ldrb	r2, [r0, #1]
   30890:	cmp	r2, #32
   30894:	bhi	30e18 <flatcc_json_parser_generic_json@@Base+0xcf0>
   30898:	beq	30e08 <flatcc_json_parser_generic_json@@Base+0xce0>
   3089c:	cmp	r4, r3
   308a0:	beq	30e20 <flatcc_json_parser_generic_json@@Base+0xcf8>
   308a4:	ldrb	r2, [r3]
   308a8:	cmp	r2, #32
   308ac:	bne	30c6c <flatcc_json_parser_generic_json@@Base+0xb44>
   308b0:	add	r0, r3, #1
   308b4:	b	308c4 <flatcc_json_parser_generic_json@@Base+0x79c>
   308b8:	ldrb	r2, [r0], #1
   308bc:	cmp	r2, #32
   308c0:	bne	30c6c <flatcc_json_parser_generic_json@@Base+0xb44>
   308c4:	cmp	r0, r4
   308c8:	mov	r3, r0
   308cc:	bne	308b8 <flatcc_json_parser_generic_json@@Base+0x790>
   308d0:	ldr	r2, [r5, #24]
   308d4:	cmp	r2, #0
   308d8:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   308dc:	ldr	r2, [r5, #4]
   308e0:	mov	r0, #9
   308e4:	b	30b78 <flatcc_json_parser_generic_json@@Base+0xa50>
   308e8:	add	r2, r0, #1
   308ec:	sub	r3, r4, r2
   308f0:	cmp	r3, #1
   308f4:	ble	30908 <flatcc_json_parser_generic_json@@Base+0x7e0>
   308f8:	ldrb	r3, [r0, #1]
   308fc:	cmp	r3, #32
   30900:	bhi	3119c <flatcc_json_parser_generic_json@@Base+0x1074>
   30904:	beq	3118c <flatcc_json_parser_generic_json@@Base+0x1064>
   30908:	cmp	r4, r2
   3090c:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30910:	ldrb	ip, [r2]
   30914:	cmp	ip, #32
   30918:	bne	317d8 <flatcc_json_parser_generic_json@@Base+0x16b0>
   3091c:	add	r3, r2, #1
   30920:	cmp	r3, r4
   30924:	mov	r0, r3
   30928:	beq	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   3092c:	ldrb	ip, [r3], #1
   30930:	cmp	ip, #32
   30934:	beq	30920 <flatcc_json_parser_generic_json@@Base+0x7f8>
   30938:	cmp	ip, #32
   3093c:	mov	r2, r0
   30940:	bhi	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   30944:	sub	ip, ip, #9
   30948:	cmp	ip, #23
   3094c:	ldrls	pc, [pc, ip, lsl #2]
   30950:	b	30a10 <flatcc_json_parser_generic_json@@Base+0x8e8>
   30954:	andeq	r0, r3, r8, lsl #20
   30958:	ldrdeq	r0, [r3], -r4
   3095c:	andeq	r0, r3, r0, lsl sl
   30960:	andeq	r0, r3, r0, lsl sl
   30964:			; <UNDEFINED> instruction: 0x000309b4
   30968:	andeq	r0, r3, r0, lsl sl
   3096c:	andeq	r0, r3, r0, lsl sl
   30970:	andeq	r0, r3, r0, lsl sl
   30974:	andeq	r0, r3, r0, lsl sl
   30978:	andeq	r0, r3, r0, lsl sl
   3097c:	andeq	r0, r3, r0, lsl sl
   30980:	andeq	r0, r3, r0, lsl sl
   30984:	andeq	r0, r3, r0, lsl sl
   30988:	andeq	r0, r3, r0, lsl sl
   3098c:	andeq	r0, r3, r0, lsl sl
   30990:	andeq	r0, r3, r0, lsl sl
   30994:	andeq	r0, r3, r0, lsl sl
   30998:	andeq	r0, r3, r0, lsl sl
   3099c:	andeq	r0, r3, r0, lsl sl
   309a0:	andeq	r0, r3, r0, lsl sl
   309a4:	andeq	r0, r3, r0, lsl sl
   309a8:	andeq	r0, r3, r0, lsl sl
   309ac:	andeq	r0, r3, r0, lsl sl
   309b0:	andeq	r0, r3, r8, lsl #18
   309b4:	sub	r3, r4, r2
   309b8:	cmp	r3, #1
   309bc:	movle	r3, r8
   309c0:	ldrbgt	r3, [r2, #1]
   309c4:	subgt	r3, r3, #10
   309c8:	clzgt	r3, r3
   309cc:	lsrgt	r3, r3, #5
   309d0:	add	r2, r2, r3
   309d4:	ldr	r3, [r5, #16]
   309d8:	add	r2, r2, #1
   309dc:	add	r3, r3, #1
   309e0:	str	r2, [r5, #4]
   309e4:	str	r3, [r5, #16]
   309e8:	cmp	r4, r2
   309ec:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   309f0:	ldrb	ip, [r2]
   309f4:	cmp	ip, #32
   309f8:	bls	30944 <flatcc_json_parser_generic_json@@Base+0x81c>
   309fc:	mov	r0, r2
   30a00:	mov	r6, r1
   30a04:	b	30528 <flatcc_json_parser_generic_json@@Base+0x400>
   30a08:	add	r2, r2, #1
   30a0c:	b	309e8 <flatcc_json_parser_generic_json@@Base+0x8c0>
   30a10:	ldr	r3, [r5, #24]
   30a14:	cmp	r3, #0
   30a18:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30a1c:	ldr	r3, [r5, #4]
   30a20:	mov	r0, #5
   30a24:	sub	r3, r2, r3
   30a28:	add	r3, r3, #1
   30a2c:	str	r0, [r5, #24]
   30a30:	str	r2, [r5, #36]	; 0x24
   30a34:	str	r3, [r5, #20]
   30a38:	mov	r0, r4
   30a3c:	b	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   30a40:	cmp	r2, #32
   30a44:	bhi	30b00 <flatcc_json_parser_generic_json@@Base+0x9d8>
   30a48:	sub	r2, r2, #9
   30a4c:	cmp	r2, #23
   30a50:	ldrls	pc, [pc, r2, lsl #2]
   30a54:	b	30b1c <flatcc_json_parser_generic_json@@Base+0x9f4>
   30a58:	andeq	r0, r3, r4, lsl fp
   30a5c:	ldrdeq	r0, [r3], -r8
   30a60:	andeq	r0, r3, ip, lsl fp
   30a64:	andeq	r0, r3, ip, lsl fp
   30a68:			; <UNDEFINED> instruction: 0x00030ab8
   30a6c:	andeq	r0, r3, ip, lsl fp
   30a70:	andeq	r0, r3, ip, lsl fp
   30a74:	andeq	r0, r3, ip, lsl fp
   30a78:	andeq	r0, r3, ip, lsl fp
   30a7c:	andeq	r0, r3, ip, lsl fp
   30a80:	andeq	r0, r3, ip, lsl fp
   30a84:	andeq	r0, r3, ip, lsl fp
   30a88:	andeq	r0, r3, ip, lsl fp
   30a8c:	andeq	r0, r3, ip, lsl fp
   30a90:	andeq	r0, r3, ip, lsl fp
   30a94:	andeq	r0, r3, ip, lsl fp
   30a98:	andeq	r0, r3, ip, lsl fp
   30a9c:	andeq	r0, r3, ip, lsl fp
   30aa0:	andeq	r0, r3, ip, lsl fp
   30aa4:	andeq	r0, r3, ip, lsl fp
   30aa8:	andeq	r0, r3, ip, lsl fp
   30aac:	andeq	r0, r3, ip, lsl fp
   30ab0:	andeq	r0, r3, ip, lsl fp
   30ab4:	andeq	r0, r3, ip, ror #13
   30ab8:	sub	r2, r4, r3
   30abc:	cmp	r2, #1
   30ac0:	movle	r2, r8
   30ac4:	ldrbgt	r2, [r3, #1]
   30ac8:	subgt	r2, r2, #10
   30acc:	clzgt	r2, r2
   30ad0:	lsrgt	r2, r2, #5
   30ad4:	add	r3, r3, r2
   30ad8:	ldr	r2, [r5, #16]
   30adc:	add	r3, r3, #1
   30ae0:	add	r2, r2, #1
   30ae4:	str	r3, [r5, #4]
   30ae8:	str	r2, [r5, #16]
   30aec:	cmp	r4, r3
   30af0:	beq	30b60 <flatcc_json_parser_generic_json@@Base+0xa38>
   30af4:	ldrb	r2, [r3]
   30af8:	cmp	r2, #32
   30afc:	bls	30a48 <flatcc_json_parser_generic_json@@Base+0x920>
   30b00:	cmp	r2, #125	; 0x7d
   30b04:	beq	31518 <flatcc_json_parser_generic_json@@Base+0x13f0>
   30b08:	cmp	r4, r3
   30b0c:	bne	30160 <flatcc_json_parser_generic_json@@Base+0x38>
   30b10:	b	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30b14:	add	r3, r3, #1
   30b18:	b	30aec <flatcc_json_parser_generic_json@@Base+0x9c4>
   30b1c:	ldr	r2, [r5, #24]
   30b20:	cmp	r2, #0
   30b24:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30b28:	ldr	r2, [r5, #4]
   30b2c:	mov	r0, #5
   30b30:	sub	r2, r3, r2
   30b34:	add	r2, r2, #1
   30b38:	str	r3, [r5, #36]	; 0x24
   30b3c:	str	r2, [r5, #20]
   30b40:	str	r0, [r5, #24]
   30b44:	b	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30b48:	ldrb	r2, [r0, #2]
   30b4c:	cmp	r2, #32
   30b50:	addhi	r3, r0, #2
   30b54:	bls	306ec <flatcc_json_parser_generic_json@@Base+0x5c4>
   30b58:	cmp	r4, r3
   30b5c:	bne	30b00 <flatcc_json_parser_generic_json@@Base+0x9d8>
   30b60:	mov	r3, r4
   30b64:	ldr	r2, [r5, #24]
   30b68:	cmp	r2, #0
   30b6c:	bne	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30b70:	ldr	r2, [r5, #4]
   30b74:	mov	r0, #10
   30b78:	sub	r2, r3, r2
   30b7c:	add	r2, r2, #1
   30b80:	str	r0, [r5, #24]
   30b84:	str	r3, [r5, #36]	; 0x24
   30b88:	str	r2, [r5, #20]
   30b8c:	mov	r0, r4
   30b90:	b	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   30b94:	add	r2, r0, #1
   30b98:	sub	r3, r4, r2
   30b9c:	cmp	r3, #1
   30ba0:	ble	30bc0 <flatcc_json_parser_generic_json@@Base+0xa98>
   30ba4:	ldrb	r3, [r0, #1]
   30ba8:	cmp	r3, #32
   30bac:	bhi	3119c <flatcc_json_parser_generic_json@@Base+0x1074>
   30bb0:	bne	30bc0 <flatcc_json_parser_generic_json@@Base+0xa98>
   30bb4:	ldrb	r3, [r0, #2]
   30bb8:	cmp	r3, #32
   30bbc:	bhi	31198 <flatcc_json_parser_generic_json@@Base+0x1070>
   30bc0:	cmp	r4, r2
   30bc4:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30bc8:	ldrb	ip, [r2]
   30bcc:	cmp	ip, #32
   30bd0:	bne	319bc <flatcc_json_parser_generic_json@@Base+0x1894>
   30bd4:	add	r3, r2, #1
   30bd8:	cmp	r3, r4
   30bdc:	mov	r0, r3
   30be0:	beq	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   30be4:	ldrb	ip, [r3], #1
   30be8:	cmp	ip, #32
   30bec:	beq	30bd8 <flatcc_json_parser_generic_json@@Base+0xab0>
   30bf0:	cmp	ip, #32
   30bf4:	mov	r2, r0
   30bf8:	bhi	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   30bfc:	sub	ip, ip, #9
   30c00:	cmp	ip, #23
   30c04:	ldrls	pc, [pc, ip, lsl #2]
   30c08:	b	30a10 <flatcc_json_parser_generic_json@@Base+0x8e8>
   30c0c:	andeq	r1, r3, ip, lsr r0
   30c10:	andeq	r1, r3, r0, lsl r0
   30c14:	andeq	r0, r3, r0, lsl sl
   30c18:	andeq	r0, r3, r0, lsl sl
   30c1c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30c20:	andeq	r0, r3, r0, lsl sl
   30c24:	andeq	r0, r3, r0, lsl sl
   30c28:	andeq	r0, r3, r0, lsl sl
   30c2c:	andeq	r0, r3, r0, lsl sl
   30c30:	andeq	r0, r3, r0, lsl sl
   30c34:	andeq	r0, r3, r0, lsl sl
   30c38:	andeq	r0, r3, r0, lsl sl
   30c3c:	andeq	r0, r3, r0, lsl sl
   30c40:	andeq	r0, r3, r0, lsl sl
   30c44:	andeq	r0, r3, r0, lsl sl
   30c48:	andeq	r0, r3, r0, lsl sl
   30c4c:	andeq	r0, r3, r0, lsl sl
   30c50:	andeq	r0, r3, r0, lsl sl
   30c54:	andeq	r0, r3, r0, lsl sl
   30c58:	andeq	r0, r3, r0, lsl sl
   30c5c:	andeq	r0, r3, r0, lsl sl
   30c60:	andeq	r0, r3, r0, lsl sl
   30c64:	andeq	r0, r3, r0, lsl sl
   30c68:	andeq	r0, r3, r0, asr #23
   30c6c:	cmp	r2, #32
   30c70:	bhi	30d2c <flatcc_json_parser_generic_json@@Base+0xc04>
   30c74:	sub	r2, r2, #9
   30c78:	cmp	r2, #23
   30c7c:	ldrls	pc, [pc, r2, lsl #2]
   30c80:	b	30b1c <flatcc_json_parser_generic_json@@Base+0x9f4>
   30c84:	andeq	r0, r3, r0, lsl #28
   30c88:	andeq	r0, r3, r4, lsl #26
   30c8c:	andeq	r0, r3, ip, lsl fp
   30c90:	andeq	r0, r3, ip, lsl fp
   30c94:	andeq	r0, r3, r4, ror #25
   30c98:	andeq	r0, r3, ip, lsl fp
   30c9c:	andeq	r0, r3, ip, lsl fp
   30ca0:	andeq	r0, r3, ip, lsl fp
   30ca4:	andeq	r0, r3, ip, lsl fp
   30ca8:	andeq	r0, r3, ip, lsl fp
   30cac:	andeq	r0, r3, ip, lsl fp
   30cb0:	andeq	r0, r3, ip, lsl fp
   30cb4:	andeq	r0, r3, ip, lsl fp
   30cb8:	andeq	r0, r3, ip, lsl fp
   30cbc:	andeq	r0, r3, ip, lsl fp
   30cc0:	andeq	r0, r3, ip, lsl fp
   30cc4:	andeq	r0, r3, ip, lsl fp
   30cc8:	andeq	r0, r3, ip, lsl fp
   30ccc:	andeq	r0, r3, ip, lsl fp
   30cd0:	andeq	r0, r3, ip, lsl fp
   30cd4:	andeq	r0, r3, ip, lsl fp
   30cd8:	andeq	r0, r3, ip, lsl fp
   30cdc:	andeq	r0, r3, ip, lsl fp
   30ce0:	muleq	r3, ip, r8
   30ce4:	sub	r2, r4, r3
   30ce8:	cmp	r2, #1
   30cec:	movle	r2, r8
   30cf0:	ldrbgt	r2, [r3, #1]
   30cf4:	subgt	r2, r2, #10
   30cf8:	clzgt	r2, r2
   30cfc:	lsrgt	r2, r2, #5
   30d00:	add	r3, r3, r2
   30d04:	ldr	r2, [r5, #16]
   30d08:	add	r3, r3, #1
   30d0c:	add	r2, r2, #1
   30d10:	str	r3, [r5, #4]
   30d14:	str	r2, [r5, #16]
   30d18:	cmp	r4, r3
   30d1c:	beq	30e20 <flatcc_json_parser_generic_json@@Base+0xcf8>
   30d20:	ldrb	r2, [r3]
   30d24:	cmp	r2, #32
   30d28:	bls	30c74 <flatcc_json_parser_generic_json@@Base+0xb4c>
   30d2c:	cmp	r2, #93	; 0x5d
   30d30:	bne	30b08 <flatcc_json_parser_generic_json@@Base+0x9e0>
   30d34:	add	r2, r3, #1
   30d38:	sub	r0, r4, r2
   30d3c:	cmp	r0, #1
   30d40:	ble	30d54 <flatcc_json_parser_generic_json@@Base+0xc2c>
   30d44:	ldrb	r0, [r3, #1]
   30d48:	cmp	r0, #32
   30d4c:	bhi	3119c <flatcc_json_parser_generic_json@@Base+0x1074>
   30d50:	beq	319f4 <flatcc_json_parser_generic_json@@Base+0x18cc>
   30d54:	mov	r0, r2
   30d58:	cmp	r4, r0
   30d5c:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   30d60:	ldrb	r3, [r0]
   30d64:	cmp	r3, #32
   30d68:	bne	30d88 <flatcc_json_parser_generic_json@@Base+0xc60>
   30d6c:	add	r2, r0, #1
   30d70:	cmp	r2, r4
   30d74:	mov	r0, r2
   30d78:	beq	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   30d7c:	ldrb	r3, [r2], #1
   30d80:	cmp	r3, #32
   30d84:	beq	30d70 <flatcc_json_parser_generic_json@@Base+0xc48>
   30d88:	cmp	r3, #32
   30d8c:	bhi	31888 <flatcc_json_parser_generic_json@@Base+0x1760>
   30d90:	sub	r3, r3, #9
   30d94:	cmp	r3, #23
   30d98:	ldrls	pc, [pc, r3, lsl #2]
   30d9c:	b	3067c <flatcc_json_parser_generic_json@@Base+0x554>
   30da0:	muleq	r3, r0, r8
   30da4:	andeq	r1, r3, r0, ror #16
   30da8:	andeq	r0, r3, ip, ror r6
   30dac:	andeq	r0, r3, ip, ror r6
   30db0:	andeq	r1, r3, r0, asr #16
   30db4:	andeq	r0, r3, ip, ror r6
   30db8:	andeq	r0, r3, ip, ror r6
   30dbc:	andeq	r0, r3, ip, ror r6
   30dc0:	andeq	r0, r3, ip, ror r6
   30dc4:	andeq	r0, r3, ip, ror r6
   30dc8:	andeq	r0, r3, ip, ror r6
   30dcc:	andeq	r0, r3, ip, ror r6
   30dd0:	andeq	r0, r3, ip, ror r6
   30dd4:	andeq	r0, r3, ip, ror r6
   30dd8:	andeq	r0, r3, ip, ror r6
   30ddc:	andeq	r0, r3, ip, ror r6
   30de0:	andeq	r0, r3, ip, ror r6
   30de4:	andeq	r0, r3, ip, ror r6
   30de8:	andeq	r0, r3, ip, ror r6
   30dec:	andeq	r0, r3, ip, ror r6
   30df0:	andeq	r0, r3, ip, ror r6
   30df4:	andeq	r0, r3, ip, ror r6
   30df8:	andeq	r0, r3, ip, ror r6
   30dfc:	andeq	r0, r3, r8, asr sp
   30e00:	add	r3, r3, #1
   30e04:	b	30d18 <flatcc_json_parser_generic_json@@Base+0xbf0>
   30e08:	ldrb	r2, [r0, #2]
   30e0c:	cmp	r2, #32
   30e10:	addhi	r3, r0, #2
   30e14:	bls	3089c <flatcc_json_parser_generic_json@@Base+0x774>
   30e18:	cmp	r4, r3
   30e1c:	bne	30d2c <flatcc_json_parser_generic_json@@Base+0xc04>
   30e20:	mov	r3, r4
   30e24:	b	308d0 <flatcc_json_parser_generic_json@@Base+0x7a8>
   30e28:	cmp	r2, #34	; 0x22
   30e2c:	beq	31130 <flatcc_json_parser_generic_json@@Base+0x1008>
   30e30:	cmp	r2, #46	; 0x2e
   30e34:	beq	3166c <flatcc_json_parser_generic_json@@Base+0x1544>
   30e38:	mov	r2, #1
   30e3c:	cmp	r4, r3
   30e40:	str	r2, [r5, #12]
   30e44:	beq	319dc <flatcc_json_parser_generic_json@@Base+0x18b4>
   30e48:	ldrb	r2, [r3]
   30e4c:	cmp	r2, #32
   30e50:	addhi	r3, r3, #1
   30e54:	bls	31a04 <flatcc_json_parser_generic_json@@Base+0x18dc>
   30e58:	cmp	r2, #46	; 0x2e
   30e5c:	cmpne	r2, #95	; 0x5f
   30e60:	sub	r1, r3, #1
   30e64:	beq	311ec <flatcc_json_parser_generic_json@@Base+0x10c4>
   30e68:	sub	r0, r2, #48	; 0x30
   30e6c:	tst	r2, #128	; 0x80
   30e70:	uxtb	r0, r0
   30e74:	bne	311ec <flatcc_json_parser_generic_json@@Base+0x10c4>
   30e78:	orr	ip, r2, #32
   30e7c:	sub	ip, ip, #97	; 0x61
   30e80:	cmp	r0, #9
   30e84:	uxtb	ip, ip
   30e88:	bls	311ec <flatcc_json_parser_generic_json@@Base+0x10c4>
   30e8c:	cmp	ip, #25
   30e90:	bls	311ec <flatcc_json_parser_generic_json@@Base+0x10c4>
   30e94:	mov	r0, r4
   30e98:	sub	r3, r4, r1
   30e9c:	cmp	r3, #1
   30ea0:	ble	30eb8 <flatcc_json_parser_generic_json@@Base+0xd90>
   30ea4:	ldrb	r2, [r1]
   30ea8:	cmp	r2, #32
   30eac:	bhi	316b4 <flatcc_json_parser_generic_json@@Base+0x158c>
   30eb0:	cmp	r2, #32
   30eb4:	beq	316a4 <flatcc_json_parser_generic_json@@Base+0x157c>
   30eb8:	cmp	r4, r1
   30ebc:	beq	316bc <flatcc_json_parser_generic_json@@Base+0x1594>
   30ec0:	ldrb	r2, [r1]
   30ec4:	cmp	r2, #32
   30ec8:	bne	31230 <flatcc_json_parser_generic_json@@Base+0x1108>
   30ecc:	add	r3, r1, #1
   30ed0:	b	30ee0 <flatcc_json_parser_generic_json@@Base+0xdb8>
   30ed4:	ldrb	r2, [r3], #1
   30ed8:	cmp	r2, #32
   30edc:	bne	31230 <flatcc_json_parser_generic_json@@Base+0x1108>
   30ee0:	cmp	r4, r3
   30ee4:	mov	r1, r3
   30ee8:	bne	30ed4 <flatcc_json_parser_generic_json@@Base+0xdac>
   30eec:	ldr	r3, [r5, #24]
   30ef0:	cmp	r3, #0
   30ef4:	bne	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30ef8:	ldr	r3, [r5, #4]
   30efc:	mov	r2, #10
   30f00:	sub	r3, r1, r3
   30f04:	add	r3, r3, #1
   30f08:	str	r1, [r5, #36]	; 0x24
   30f0c:	mov	r0, r4
   30f10:	str	r3, [r5, #20]
   30f14:	str	r2, [r5, #24]
   30f18:	b	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   30f1c:	mov	r3, r1
   30f20:	add	r0, r3, #1
   30f24:	cmp	r4, r0
   30f28:	beq	31a6c <flatcc_json_parser_generic_json@@Base+0x1944>
   30f2c:	ldrb	r3, [r3, #1]
   30f30:	cmp	r3, #34	; 0x22
   30f34:	beq	30fc4 <flatcc_json_parser_generic_json@@Base+0xe9c>
   30f38:	cmp	r4, r0
   30f3c:	beq	30f8c <flatcc_json_parser_generic_json@@Base+0xe64>
   30f40:	cmp	r3, #92	; 0x5c
   30f44:	cmpne	r3, #31
   30f48:	addhi	r1, r0, #1
   30f4c:	bhi	30f80 <flatcc_json_parser_generic_json@@Base+0xe58>
   30f50:	b	316c4 <flatcc_json_parser_generic_json@@Base+0x159c>
   30f54:	ldrb	r3, [r1]
   30f58:	add	r1, r1, #1
   30f5c:	cmp	r3, #34	; 0x22
   30f60:	cmpne	r3, #31
   30f64:	movhi	r2, #1
   30f68:	movls	r2, #0
   30f6c:	cmp	r3, #92	; 0x5c
   30f70:	moveq	r2, #0
   30f74:	andne	r2, r2, #1
   30f78:	cmp	r2, #0
   30f7c:	beq	311a8 <flatcc_json_parser_generic_json@@Base+0x1080>
   30f80:	cmp	r1, r4
   30f84:	mov	r0, r1
   30f88:	bne	30f54 <flatcc_json_parser_generic_json@@Base+0xe2c>
   30f8c:	ldr	r3, [r5, #24]
   30f90:	cmp	r3, #0
   30f94:	beq	3120c <flatcc_json_parser_generic_json@@Base+0x10e4>
   30f98:	mov	r0, r4
   30f9c:	mov	r1, r0
   30fa0:	add	r3, sp, #12
   30fa4:	mov	r2, r4
   30fa8:	mov	r0, r5
   30fac:	bl	2f42c <flatcc_json_parser_string_escape@@Base>
   30fb0:	cmp	r4, r0
   30fb4:	beq	31a6c <flatcc_json_parser_generic_json@@Base+0x1944>
   30fb8:	ldrb	r3, [r0]
   30fbc:	cmp	r3, #34	; 0x22
   30fc0:	bne	30f38 <flatcc_json_parser_generic_json@@Base+0xe10>
   30fc4:	add	r0, r0, #1
   30fc8:	b	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   30fcc:	add	r0, r0, #1
   30fd0:	b	30494 <flatcc_json_parser_generic_json@@Base+0x36c>
   30fd4:	add	r0, r0, #1
   30fd8:	b	30448 <flatcc_json_parser_generic_json@@Base+0x320>
   30fdc:	cmp	r2, #91	; 0x5b
   30fe0:	beq	3033c <flatcc_json_parser_generic_json@@Base+0x214>
   30fe4:	cmp	r2, #123	; 0x7b
   30fe8:	beq	30198 <flatcc_json_parser_generic_json@@Base+0x70>
   30fec:	b	30500 <flatcc_json_parser_generic_json@@Base+0x3d8>
   30ff0:	sub	r3, r4, r2
   30ff4:	cmp	r3, #1
   30ff8:	movle	r3, r8
   30ffc:	ldrbgt	r3, [r2, #1]
   31000:	subgt	r3, r3, #10
   31004:	clzgt	r3, r3
   31008:	lsrgt	r3, r3, #5
   3100c:	add	r2, r2, r3
   31010:	ldr	r3, [r5, #16]
   31014:	add	r2, r2, #1
   31018:	add	r3, r3, #1
   3101c:	str	r2, [r5, #4]
   31020:	str	r3, [r5, #16]
   31024:	cmp	r4, r2
   31028:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   3102c:	ldrb	ip, [r2]
   31030:	cmp	ip, #32
   31034:	bls	30bfc <flatcc_json_parser_generic_json@@Base+0xad4>
   31038:	b	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   3103c:	add	r2, r2, #1
   31040:	b	31024 <flatcc_json_parser_generic_json@@Base+0xefc>
   31044:	add	r0, r3, #1
   31048:	cmp	r4, r0
   3104c:	beq	31a44 <flatcc_json_parser_generic_json@@Base+0x191c>
   31050:	ldrb	r2, [r3, #1]
   31054:	cmp	r2, #46	; 0x2e
   31058:	beq	316fc <flatcc_json_parser_generic_json@@Base+0x15d4>
   3105c:	and	r3, r2, #223	; 0xdf
   31060:	cmp	r3, #69	; 0x45
   31064:	bne	316d0 <flatcc_json_parser_generic_json@@Base+0x15a8>
   31068:	add	r3, r0, #1
   3106c:	cmp	r4, r3
   31070:	beq	31934 <flatcc_json_parser_generic_json@@Base+0x180c>
   31074:	ldrb	r2, [r0, #1]
   31078:	sub	r1, r2, #43	; 0x2b
   3107c:	tst	r1, #253	; 0xfd
   31080:	bne	31754 <flatcc_json_parser_generic_json@@Base+0x162c>
   31084:	add	r3, r0, #2
   31088:	cmp	r4, r3
   3108c:	bne	31750 <flatcc_json_parser_generic_json@@Base+0x1628>
   31090:	mov	r3, r4
   31094:	ldr	r2, [r5, #24]
   31098:	cmp	r2, #0
   3109c:	bne	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   310a0:	ldr	r2, [r5, #4]
   310a4:	mov	r1, #6
   310a8:	sub	r2, r3, r2
   310ac:	add	r2, r2, #1
   310b0:	str	r3, [r5, #36]	; 0x24
   310b4:	str	r2, [r5, #20]
   310b8:	str	r1, [r5, #24]
   310bc:	b	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   310c0:	ldr	r3, [r5, #4]
   310c4:	str	r0, [r5, #36]	; 0x24
   310c8:	sub	r3, r0, r3
   310cc:	add	r3, r3, #1
   310d0:	str	r2, [r5, #24]
   310d4:	str	r3, [r5, #20]
   310d8:	b	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   310dc:	ldrb	r2, [r3, #2]
   310e0:	cmp	r2, #32
   310e4:	addhi	r0, r3, #2
   310e8:	bls	3036c <flatcc_json_parser_generic_json@@Base+0x244>
   310ec:	cmp	r4, r0
   310f0:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   310f4:	cmp	r2, #93	; 0x5d
   310f8:	add	r6, r6, #1
   310fc:	beq	30528 <flatcc_json_parser_generic_json@@Base+0x400>
   31100:	mov	r3, r0
   31104:	b	30160 <flatcc_json_parser_generic_json@@Base+0x38>
   31108:	ldrb	r2, [r3, #2]
   3110c:	cmp	r2, #32
   31110:	addhi	r0, r3, #2
   31114:	bls	301bc <flatcc_json_parser_generic_json@@Base+0x94>
   31118:	cmp	r4, r0
   3111c:	beq	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   31120:	cmp	r2, #125	; 0x7d
   31124:	add	r6, r6, #1
   31128:	bne	31100 <flatcc_json_parser_generic_json@@Base+0xfd8>
   3112c:	b	30528 <flatcc_json_parser_generic_json@@Base+0x400>
   31130:	add	r1, r3, #1
   31134:	cmp	r4, r1
   31138:	str	r8, [r5, #12]
   3113c:	beq	31688 <flatcc_json_parser_generic_json@@Base+0x1560>
   31140:	ldrb	r2, [r3, #1]
   31144:	cmp	r2, #34	; 0x22
   31148:	movne	r0, r4
   3114c:	bne	3116c <flatcc_json_parser_generic_json@@Base+0x1044>
   31150:	b	317a4 <flatcc_json_parser_generic_json@@Base+0x167c>
   31154:	add	r1, r3, #1
   31158:	cmp	r4, r1
   3115c:	beq	317b4 <flatcc_json_parser_generic_json@@Base+0x168c>
   31160:	ldrb	r2, [r3, #1]
   31164:	cmp	r2, #34	; 0x22
   31168:	beq	317a8 <flatcc_json_parser_generic_json@@Base+0x1680>
   3116c:	cmp	r2, #92	; 0x5c
   31170:	mov	r3, r1
   31174:	bne	31154 <flatcc_json_parser_generic_json@@Base+0x102c>
   31178:	sub	r3, r4, r1
   3117c:	cmp	r3, #1
   31180:	ble	31690 <flatcc_json_parser_generic_json@@Base+0x1568>
   31184:	add	r3, r1, #1
   31188:	b	31154 <flatcc_json_parser_generic_json@@Base+0x102c>
   3118c:	ldrb	r3, [r0, #2]
   31190:	cmp	r3, #32
   31194:	bls	30908 <flatcc_json_parser_generic_json@@Base+0x7e0>
   31198:	add	r2, r0, #2
   3119c:	cmp	r4, r2
   311a0:	bne	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   311a4:	b	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   311a8:	cmp	r3, #31
   311ac:	bhi	311dc <flatcc_json_parser_generic_json@@Base+0x10b4>
   311b0:	ldr	r3, [r5, #24]
   311b4:	cmp	r3, #0
   311b8:	bne	30f98 <flatcc_json_parser_generic_json@@Base+0xe70>
   311bc:	ldr	r3, [r5, #4]
   311c0:	str	r0, [r5, #36]	; 0x24
   311c4:	sub	r3, r0, r3
   311c8:	add	r3, r3, #1
   311cc:	str	r9, [r5, #24]
   311d0:	str	r3, [r5, #20]
   311d4:	mov	r0, r4
   311d8:	b	30f9c <flatcc_json_parser_generic_json@@Base+0xe74>
   311dc:	cmp	r3, #34	; 0x22
   311e0:	bne	30f9c <flatcc_json_parser_generic_json@@Base+0xe74>
   311e4:	add	r0, r0, #1
   311e8:	b	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   311ec:	cmp	r4, r3
   311f0:	mov	r1, r3
   311f4:	beq	318c8 <flatcc_json_parser_generic_json@@Base+0x17a0>
   311f8:	ldrb	r0, [r3], #1
   311fc:	cmp	r0, #32
   31200:	bls	318cc <flatcc_json_parser_generic_json@@Base+0x17a4>
   31204:	mov	r2, r0
   31208:	b	30e58 <flatcc_json_parser_generic_json@@Base+0xd30>
   3120c:	ldr	r3, [r5, #4]
   31210:	mov	r2, #20
   31214:	sub	r3, r0, r3
   31218:	add	r3, r3, #1
   3121c:	str	r0, [r5, #36]	; 0x24
   31220:	str	r2, [r5, #24]
   31224:	str	r3, [r5, #20]
   31228:	mov	r0, r4
   3122c:	b	30f9c <flatcc_json_parser_generic_json@@Base+0xe74>
   31230:	cmp	r2, #32
   31234:	bhi	312f0 <flatcc_json_parser_generic_json@@Base+0x11c8>
   31238:	sub	r2, r2, #9
   3123c:	cmp	r2, #23
   31240:	ldrls	pc, [pc, r2, lsl #2]
   31244:	b	313a0 <flatcc_json_parser_generic_json@@Base+0x1278>
   31248:	muleq	r3, r8, r3
   3124c:	andeq	r1, r3, r8, asr #5
   31250:	andeq	r1, r3, r0, lsr #7
   31254:	andeq	r1, r3, r0, lsr #7
   31258:	andeq	r1, r3, r8, lsr #5
   3125c:	andeq	r1, r3, r0, lsr #7
   31260:	andeq	r1, r3, r0, lsr #7
   31264:	andeq	r1, r3, r0, lsr #7
   31268:	andeq	r1, r3, r0, lsr #7
   3126c:	andeq	r1, r3, r0, lsr #7
   31270:	andeq	r1, r3, r0, lsr #7
   31274:	andeq	r1, r3, r0, lsr #7
   31278:	andeq	r1, r3, r0, lsr #7
   3127c:	andeq	r1, r3, r0, lsr #7
   31280:	andeq	r1, r3, r0, lsr #7
   31284:	andeq	r1, r3, r0, lsr #7
   31288:	andeq	r1, r3, r0, lsr #7
   3128c:	andeq	r1, r3, r0, lsr #7
   31290:	andeq	r1, r3, r0, lsr #7
   31294:	andeq	r1, r3, r0, lsr #7
   31298:	andeq	r1, r3, r0, lsr #7
   3129c:	andeq	r1, r3, r0, lsr #7
   312a0:	andeq	r1, r3, r0, lsr #7
   312a4:			; <UNDEFINED> instruction: 0x00030eb8
   312a8:	sub	r3, r0, r1
   312ac:	cmp	r3, #1
   312b0:	movle	r3, r8
   312b4:	ldrbgt	r3, [r1, #1]
   312b8:	subgt	r3, r3, #10
   312bc:	clzgt	r3, r3
   312c0:	lsrgt	r3, r3, #5
   312c4:	add	r1, r1, r3
   312c8:	ldr	r3, [r5, #16]
   312cc:	add	r1, r1, #1
   312d0:	add	r3, r3, #1
   312d4:	str	r1, [r5, #4]
   312d8:	str	r3, [r5, #16]
   312dc:	cmp	r4, r1
   312e0:	beq	316bc <flatcc_json_parser_generic_json@@Base+0x1594>
   312e4:	ldrb	r2, [r1]
   312e8:	cmp	r2, #32
   312ec:	bls	31238 <flatcc_json_parser_generic_json@@Base+0x1110>
   312f0:	cmp	r2, #58	; 0x3a
   312f4:	bne	31a54 <flatcc_json_parser_generic_json@@Base+0x192c>
   312f8:	add	r3, r1, #1
   312fc:	sub	r2, r0, r3
   31300:	cmp	r2, #1
   31304:	ldrble	ip, [r1, #1]
   31308:	ble	31320 <flatcc_json_parser_generic_json@@Base+0x11f8>
   3130c:	ldrb	r2, [r1, #1]
   31310:	cmp	r2, #32
   31314:	mov	ip, r2
   31318:	bhi	31648 <flatcc_json_parser_generic_json@@Base+0x1520>
   3131c:	beq	31638 <flatcc_json_parser_generic_json@@Base+0x1510>
   31320:	cmp	r4, r3
   31324:	mov	r2, ip
   31328:	beq	31354 <flatcc_json_parser_generic_json@@Base+0x122c>
   3132c:	cmp	ip, #32
   31330:	beq	31344 <flatcc_json_parser_generic_json@@Base+0x121c>
   31334:	b	313cc <flatcc_json_parser_generic_json@@Base+0x12a4>
   31338:	cmp	r2, #32
   3133c:	mov	r3, r1
   31340:	bne	313d0 <flatcc_json_parser_generic_json@@Base+0x12a8>
   31344:	add	r1, r3, #1
   31348:	cmp	r4, r1
   3134c:	ldrb	r2, [r3, #1]
   31350:	bne	31338 <flatcc_json_parser_generic_json@@Base+0x1210>
   31354:	cmp	r2, #57	; 0x39
   31358:	bhi	30330 <flatcc_json_parser_generic_json@@Base+0x208>
   3135c:	cmp	r2, #48	; 0x30
   31360:	bcs	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31364:	cmp	r2, #34	; 0x22
   31368:	bne	3196c <flatcc_json_parser_generic_json@@Base+0x1844>
   3136c:	ldr	r3, [r5, #24]
   31370:	cmp	r3, #0
   31374:	bne	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31378:	ldr	r3, [r5, #4]
   3137c:	mov	r2, #16
   31380:	sub	r3, r4, r3
   31384:	add	r3, r3, #1
   31388:	str	r4, [r5, #36]	; 0x24
   3138c:	str	r3, [r5, #20]
   31390:	str	r2, [r5, #24]
   31394:	b	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31398:	add	r1, r1, #1
   3139c:	b	312dc <flatcc_json_parser_generic_json@@Base+0x11b4>
   313a0:	ldr	r3, [r5, #24]
   313a4:	cmp	r3, #0
   313a8:	bne	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   313ac:	ldr	r3, [r5, #4]
   313b0:	mov	r2, #5
   313b4:	sub	r3, r1, r3
   313b8:	add	r3, r3, #1
   313bc:	str	r1, [r5, #36]	; 0x24
   313c0:	str	r3, [r5, #20]
   313c4:	str	r2, [r5, #24]
   313c8:	b	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   313cc:	mov	r1, r3
   313d0:	cmp	r2, #32
   313d4:	movls	r3, r1
   313d8:	bhi	304e0 <flatcc_json_parser_generic_json@@Base+0x3b8>
   313dc:	sub	r2, r2, #9
   313e0:	cmp	r2, #23
   313e4:	ldrls	pc, [pc, r2, lsl #2]
   313e8:	b	314e4 <flatcc_json_parser_generic_json@@Base+0x13bc>
   313ec:	andeq	r1, r3, ip, asr #9
   313f0:	andeq	r1, r3, ip, ror #8
   313f4:	andeq	r1, r3, r4, ror #9
   313f8:	andeq	r1, r3, r4, ror #9
   313fc:	andeq	r1, r3, ip, asr #8
   31400:	andeq	r1, r3, r4, ror #9
   31404:	andeq	r1, r3, r4, ror #9
   31408:	andeq	r1, r3, r4, ror #9
   3140c:	andeq	r1, r3, r4, ror #9
   31410:	andeq	r1, r3, r4, ror #9
   31414:	andeq	r1, r3, r4, ror #9
   31418:	andeq	r1, r3, r4, ror #9
   3141c:	andeq	r1, r3, r4, ror #9
   31420:	andeq	r1, r3, r4, ror #9
   31424:	andeq	r1, r3, r4, ror #9
   31428:	andeq	r1, r3, r4, ror #9
   3142c:	andeq	r1, r3, r4, ror #9
   31430:	andeq	r1, r3, r4, ror #9
   31434:	andeq	r1, r3, r4, ror #9
   31438:	andeq	r1, r3, r4, ror #9
   3143c:	andeq	r1, r3, r4, ror #9
   31440:	andeq	r1, r3, r4, ror #9
   31444:	andeq	r1, r3, r4, ror #9
   31448:	ldrdeq	r1, [r3], -r4
   3144c:	sub	r2, r0, r3
   31450:	cmp	r2, #1
   31454:	movle	r2, r8
   31458:	ldrbgt	r2, [r3, #1]
   3145c:	subgt	r2, r2, #10
   31460:	clzgt	r2, r2
   31464:	lsrgt	r2, r2, #5
   31468:	add	r3, r3, r2
   3146c:	ldr	r2, [r5, #16]
   31470:	add	r3, r3, #1
   31474:	add	r2, r2, #1
   31478:	str	r3, [r5, #4]
   3147c:	str	r2, [r5, #16]
   31480:	cmp	r4, r3
   31484:	beq	31a4c <flatcc_json_parser_generic_json@@Base+0x1924>
   31488:	ldrb	r2, [r3]
   3148c:	cmp	r2, #32
   31490:	bls	313dc <flatcc_json_parser_generic_json@@Base+0x12b4>
   31494:	cmp	r2, #57	; 0x39
   31498:	bhi	3017c <flatcc_json_parser_generic_json@@Base+0x54>
   3149c:	cmp	r2, #48	; 0x30
   314a0:	bcs	3028c <flatcc_json_parser_generic_json@@Base+0x164>
   314a4:	cmp	r2, #34	; 0x22
   314a8:	beq	30f20 <flatcc_json_parser_generic_json@@Base+0xdf8>
   314ac:	cmp	r2, #45	; 0x2d
   314b0:	bne	30500 <flatcc_json_parser_generic_json@@Base+0x3d8>
   314b4:	add	r1, r3, #1
   314b8:	cmp	r4, r1
   314bc:	beq	31934 <flatcc_json_parser_generic_json@@Base+0x180c>
   314c0:	ldrb	r2, [r3, #1]
   314c4:	mov	r3, r1
   314c8:	b	30294 <flatcc_json_parser_generic_json@@Base+0x16c>
   314cc:	add	r3, r3, #1
   314d0:	b	31480 <flatcc_json_parser_generic_json@@Base+0x1358>
   314d4:	cmp	r4, r3
   314d8:	bne	31344 <flatcc_json_parser_generic_json@@Base+0x121c>
   314dc:	mov	r3, r4
   314e0:	b	30500 <flatcc_json_parser_generic_json@@Base+0x3d8>
   314e4:	ldr	r2, [r5, #24]
   314e8:	cmp	r2, #0
   314ec:	beq	3194c <flatcc_json_parser_generic_json@@Base+0x1824>
   314f0:	ldrb	r3, [r4]
   314f4:	cmp	r3, #57	; 0x39
   314f8:	bhi	31a30 <flatcc_json_parser_generic_json@@Base+0x1908>
   314fc:	cmp	r3, #48	; 0x30
   31500:	bcs	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31504:	cmp	r3, #34	; 0x22
   31508:	beq	3136c <flatcc_json_parser_generic_json@@Base+0x1244>
   3150c:	cmp	r3, #45	; 0x2d
   31510:	beq	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31514:	b	314dc <flatcc_json_parser_generic_json@@Base+0x13b4>
   31518:	add	r2, r3, #1
   3151c:	sub	r0, r4, r2
   31520:	cmp	r0, #1
   31524:	ble	31538 <flatcc_json_parser_generic_json@@Base+0x1410>
   31528:	ldrb	r0, [r3, #1]
   3152c:	cmp	r0, #32
   31530:	bhi	3119c <flatcc_json_parser_generic_json@@Base+0x1074>
   31534:	beq	319c4 <flatcc_json_parser_generic_json@@Base+0x189c>
   31538:	cmp	r4, r2
   3153c:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   31540:	ldrb	ip, [r2]
   31544:	cmp	ip, #32
   31548:	bne	319ec <flatcc_json_parser_generic_json@@Base+0x18c4>
   3154c:	add	r3, r2, #1
   31550:	cmp	r4, r3
   31554:	mov	r0, r3
   31558:	beq	30300 <flatcc_json_parser_generic_json@@Base+0x1d8>
   3155c:	ldrb	ip, [r3], #1
   31560:	cmp	ip, #32
   31564:	beq	31550 <flatcc_json_parser_generic_json@@Base+0x1428>
   31568:	cmp	ip, #32
   3156c:	mov	r2, r0
   31570:	bhi	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   31574:	sub	ip, ip, #9
   31578:	cmp	ip, #23
   3157c:	ldrls	pc, [pc, ip, lsl #2]
   31580:	b	30a10 <flatcc_json_parser_generic_json@@Base+0x8e8>
   31584:	andeq	r1, r3, r0, lsr r6
   31588:	andeq	r1, r3, r4, lsl #12
   3158c:	andeq	r0, r3, r0, lsl sl
   31590:	andeq	r0, r3, r0, lsl sl
   31594:	andeq	r1, r3, r4, ror #11
   31598:	andeq	r0, r3, r0, lsl sl
   3159c:	andeq	r0, r3, r0, lsl sl
   315a0:	andeq	r0, r3, r0, lsl sl
   315a4:	andeq	r0, r3, r0, lsl sl
   315a8:	andeq	r0, r3, r0, lsl sl
   315ac:	andeq	r0, r3, r0, lsl sl
   315b0:	andeq	r0, r3, r0, lsl sl
   315b4:	andeq	r0, r3, r0, lsl sl
   315b8:	andeq	r0, r3, r0, lsl sl
   315bc:	andeq	r0, r3, r0, lsl sl
   315c0:	andeq	r0, r3, r0, lsl sl
   315c4:	andeq	r0, r3, r0, lsl sl
   315c8:	andeq	r0, r3, r0, lsl sl
   315cc:	andeq	r0, r3, r0, lsl sl
   315d0:	andeq	r0, r3, r0, lsl sl
   315d4:	andeq	r0, r3, r0, lsl sl
   315d8:	andeq	r0, r3, r0, lsl sl
   315dc:	andeq	r0, r3, r0, lsl sl
   315e0:	andeq	r1, r3, r8, lsr r5
   315e4:	sub	r3, r4, r2
   315e8:	cmp	r3, #1
   315ec:	movle	r3, r8
   315f0:	ldrbgt	r3, [r2, #1]
   315f4:	subgt	r3, r3, #10
   315f8:	clzgt	r3, r3
   315fc:	lsrgt	r3, r3, #5
   31600:	add	r2, r2, r3
   31604:	ldr	r3, [r5, #16]
   31608:	add	r2, r2, #1
   3160c:	add	r3, r3, #1
   31610:	str	r2, [r5, #4]
   31614:	str	r3, [r5, #16]
   31618:	cmp	r4, r2
   3161c:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   31620:	ldrb	ip, [r2]
   31624:	cmp	ip, #32
   31628:	bls	31574 <flatcc_json_parser_generic_json@@Base+0x144c>
   3162c:	b	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   31630:	add	r2, r2, #1
   31634:	b	31618 <flatcc_json_parser_generic_json@@Base+0x14f0>
   31638:	ldrb	r2, [r1, #2]
   3163c:	cmp	r2, #32
   31640:	bls	31320 <flatcc_json_parser_generic_json@@Base+0x11f8>
   31644:	add	r3, r1, #2
   31648:	cmp	r2, #57	; 0x39
   3164c:	bhi	3017c <flatcc_json_parser_generic_json@@Base+0x54>
   31650:	cmp	r2, #48	; 0x30
   31654:	bcs	30284 <flatcc_json_parser_generic_json@@Base+0x15c>
   31658:	cmp	r2, #34	; 0x22
   3165c:	bne	3027c <flatcc_json_parser_generic_json@@Base+0x154>
   31660:	cmp	r3, r4
   31664:	beq	3136c <flatcc_json_parser_generic_json@@Base+0x1244>
   31668:	b	30f20 <flatcc_json_parser_generic_json@@Base+0xdf8>
   3166c:	ldr	r2, [r5, #24]
   31670:	cmp	r2, #0
   31674:	beq	31984 <flatcc_json_parser_generic_json@@Base+0x185c>
   31678:	ldr	r3, [r5, #12]
   3167c:	cmp	r3, #0
   31680:	bne	319d8 <flatcc_json_parser_generic_json@@Base+0x18b0>
   31684:	mov	r1, r4
   31688:	mov	r0, r1
   3168c:	mov	r1, r4
   31690:	ldr	r3, [r5, #24]
   31694:	cmp	r3, #0
   31698:	beq	318a4 <flatcc_json_parser_generic_json@@Base+0x177c>
   3169c:	mov	r1, r4
   316a0:	b	30eb8 <flatcc_json_parser_generic_json@@Base+0xd90>
   316a4:	ldrb	r2, [r1, #1]
   316a8:	cmp	r2, #32
   316ac:	addhi	r1, r1, #1
   316b0:	bls	30eb8 <flatcc_json_parser_generic_json@@Base+0xd90>
   316b4:	cmp	r4, r1
   316b8:	bne	312f0 <flatcc_json_parser_generic_json@@Base+0x11c8>
   316bc:	mov	r1, r4
   316c0:	b	30eec <flatcc_json_parser_generic_json@@Base+0xdc4>
   316c4:	cmp	r3, #31
   316c8:	bls	311b0 <flatcc_json_parser_generic_json@@Base+0x1088>
   316cc:	b	30f9c <flatcc_json_parser_generic_json@@Base+0xe74>
   316d0:	cmp	r2, #32
   316d4:	beq	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   316d8:	bls	317bc <flatcc_json_parser_generic_json@@Base+0x1694>
   316dc:	cmp	r2, #58	; 0x3a
   316e0:	beq	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   316e4:	bls	31898 <flatcc_json_parser_generic_json@@Base+0x1770>
   316e8:	cmp	r2, #93	; 0x5d
   316ec:	beq	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   316f0:	cmp	r2, #125	; 0x7d
   316f4:	bne	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   316f8:	b	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   316fc:	ldrb	r3, [r0, #1]
   31700:	sub	r3, r3, #48	; 0x30
   31704:	cmp	r3, #9
   31708:	bhi	31810 <flatcc_json_parser_generic_json@@Base+0x16e8>
   3170c:	add	r3, r0, #2
   31710:	cmp	r4, r3
   31714:	beq	31a44 <flatcc_json_parser_generic_json@@Base+0x191c>
   31718:	ldrb	r2, [r0, #2]
   3171c:	sub	r1, r2, #48	; 0x30
   31720:	cmp	r1, #9
   31724:	bhi	3197c <flatcc_json_parser_generic_json@@Base+0x1854>
   31728:	add	r3, r0, #3
   3172c:	b	31740 <flatcc_json_parser_generic_json@@Base+0x1618>
   31730:	ldrb	r2, [r3], #1
   31734:	sub	r1, r2, #48	; 0x30
   31738:	cmp	r1, #9
   3173c:	bhi	31978 <flatcc_json_parser_generic_json@@Base+0x1850>
   31740:	cmp	r3, r4
   31744:	mov	r0, r3
   31748:	bne	31730 <flatcc_json_parser_generic_json@@Base+0x1608>
   3174c:	b	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   31750:	ldrb	r2, [r0, #2]
   31754:	sub	r2, r2, #48	; 0x30
   31758:	cmp	r2, #9
   3175c:	bhi	31094 <flatcc_json_parser_generic_json@@Base+0xf6c>
   31760:	add	r0, r3, #1
   31764:	cmp	r4, r0
   31768:	beq	31a44 <flatcc_json_parser_generic_json@@Base+0x191c>
   3176c:	ldrb	r2, [r3, #1]
   31770:	sub	r1, r2, #48	; 0x30
   31774:	cmp	r1, #9
   31778:	bhi	316d0 <flatcc_json_parser_generic_json@@Base+0x15a8>
   3177c:	add	r3, r3, #2
   31780:	b	31794 <flatcc_json_parser_generic_json@@Base+0x166c>
   31784:	ldrb	r2, [r3], #1
   31788:	sub	r1, r2, #48	; 0x30
   3178c:	cmp	r1, #9
   31790:	bhi	316d0 <flatcc_json_parser_generic_json@@Base+0x15a8>
   31794:	cmp	r4, r3
   31798:	mov	r0, r3
   3179c:	bne	31784 <flatcc_json_parser_generic_json@@Base+0x165c>
   317a0:	b	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   317a4:	mov	r0, r4
   317a8:	add	r1, r1, #1
   317ac:	sub	r3, r4, r1
   317b0:	b	30e9c <flatcc_json_parser_generic_json@@Base+0xd74>
   317b4:	mov	r1, r4
   317b8:	b	31690 <flatcc_json_parser_generic_json@@Base+0x1568>
   317bc:	cmp	r2, #9
   317c0:	bcc	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   317c4:	cmp	r2, #11
   317c8:	bls	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   317cc:	cmp	r2, #13
   317d0:	bne	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   317d4:	b	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   317d8:	mov	r0, r2
   317dc:	b	30938 <flatcc_json_parser_generic_json@@Base+0x810>
   317e0:	ldr	r3, [r5, #4]
   317e4:	mov	r2, #6
   317e8:	sub	r3, r0, r3
   317ec:	add	r3, r3, #1
   317f0:	str	r0, [r5, #36]	; 0x24
   317f4:	str	r3, [r5, #20]
   317f8:	str	r2, [r5, #24]
   317fc:	b	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31800:	cmp	r2, #123	; 0x7b
   31804:	bne	314dc <flatcc_json_parser_generic_json@@Base+0x13b4>
   31808:	mov	r3, r4
   3180c:	b	3018c <flatcc_json_parser_generic_json@@Base+0x64>
   31810:	ldr	r3, [r5, #24]
   31814:	cmp	r3, #0
   31818:	bne	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   3181c:	ldr	r3, [r5, #4]
   31820:	add	r0, r0, #1
   31824:	sub	r3, r0, r3
   31828:	add	r3, r3, #1
   3182c:	mov	r2, #6
   31830:	str	r0, [r5, #36]	; 0x24
   31834:	str	r3, [r5, #20]
   31838:	str	r2, [r5, #24]
   3183c:	b	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31840:	sub	r3, r4, r0
   31844:	cmp	r3, #1
   31848:	movle	r3, r8
   3184c:	ldrbgt	r3, [r0, #1]
   31850:	subgt	r3, r3, #10
   31854:	clzgt	r3, r3
   31858:	lsrgt	r3, r3, #5
   3185c:	add	r0, r0, r3
   31860:	ldr	r3, [r5, #16]
   31864:	add	r0, r0, #1
   31868:	add	r3, r3, #1
   3186c:	str	r0, [r5, #4]
   31870:	str	r3, [r5, #16]
   31874:	cmp	r4, r0
   31878:	beq	302fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   3187c:	ldrb	r3, [r0]
   31880:	cmp	r3, #32
   31884:	bls	30d90 <flatcc_json_parser_generic_json@@Base+0xc68>
   31888:	mov	r2, r0
   3188c:	b	309fc <flatcc_json_parser_generic_json@@Base+0x8d4>
   31890:	add	r0, r0, #1
   31894:	b	31874 <flatcc_json_parser_generic_json@@Base+0x174c>
   31898:	cmp	r2, #44	; 0x2c
   3189c:	bne	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   318a0:	b	30520 <flatcc_json_parser_generic_json@@Base+0x3f8>
   318a4:	ldr	r3, [r5, #4]
   318a8:	mov	r2, #20
   318ac:	sub	r3, r1, r3
   318b0:	add	r3, r3, #1
   318b4:	str	r1, [r5, #36]	; 0x24
   318b8:	str	r2, [r5, #24]
   318bc:	str	r3, [r5, #20]
   318c0:	mov	r1, r4
   318c4:	b	30eb8 <flatcc_json_parser_generic_json@@Base+0xd90>
   318c8:	mov	r1, r4
   318cc:	cmp	r2, #46	; 0x2e
   318d0:	bne	30e94 <flatcc_json_parser_generic_json@@Base+0xd6c>
   318d4:	ldr	r3, [r5, #24]
   318d8:	cmp	r3, #0
   318dc:	bne	318fc <flatcc_json_parser_generic_json@@Base+0x17d4>
   318e0:	ldr	r3, [r5, #4]
   318e4:	mov	r2, #5
   318e8:	sub	r3, r1, r3
   318ec:	add	r3, r3, #1
   318f0:	str	r1, [r5, #36]	; 0x24
   318f4:	str	r3, [r5, #20]
   318f8:	str	r2, [r5, #24]
   318fc:	mov	r0, r4
   31900:	b	3169c <flatcc_json_parser_generic_json@@Base+0x1574>
   31904:	ldr	r2, [r5, #24]
   31908:	cmp	r2, #0
   3190c:	bne	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   31910:	ldr	r2, [r5, #4]
   31914:	mov	r1, #2
   31918:	sub	r2, r3, r2
   3191c:	add	r2, r2, #1
   31920:	str	r3, [r5, #36]	; 0x24
   31924:	mov	r0, r4
   31928:	str	r2, [r5, #20]
   3192c:	str	r1, [r5, #24]
   31930:	b	30328 <flatcc_json_parser_generic_json@@Base+0x200>
   31934:	ldr	r3, [r5, #24]
   31938:	cmp	r3, #0
   3193c:	bne	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31940:	ldr	r3, [r5, #4]
   31944:	mov	r2, #6
   31948:	b	31380 <flatcc_json_parser_generic_json@@Base+0x1258>
   3194c:	ldr	r2, [r5, #4]
   31950:	str	r3, [r5, #36]	; 0x24
   31954:	sub	r3, r3, r2
   31958:	add	r3, r3, #1
   3195c:	mov	r2, #5
   31960:	str	r3, [r5, #20]
   31964:	str	r2, [r5, #24]
   31968:	b	314f0 <flatcc_json_parser_generic_json@@Base+0x13c8>
   3196c:	cmp	r2, #45	; 0x2d
   31970:	beq	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31974:	b	314dc <flatcc_json_parser_generic_json@@Base+0x13b4>
   31978:	mov	r3, r0
   3197c:	mov	r0, r3
   31980:	b	3105c <flatcc_json_parser_generic_json@@Base+0xf34>
   31984:	ldr	r2, [r5, #4]
   31988:	str	r3, [r5, #36]	; 0x24
   3198c:	sub	r3, r3, r2
   31990:	add	r3, r3, #1
   31994:	mov	r2, #5
   31998:	str	r3, [r5, #20]
   3199c:	str	r2, [r5, #24]
   319a0:	b	31678 <flatcc_json_parser_generic_json@@Base+0x1550>
   319a4:	ldr	r2, [r5, #24]
   319a8:	cmp	r2, #0
   319ac:	bne	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   319b0:	ldr	r2, [r5, #4]
   319b4:	mov	r1, #5
   319b8:	b	31918 <flatcc_json_parser_generic_json@@Base+0x17f0>
   319bc:	mov	r0, r2
   319c0:	b	30bf0 <flatcc_json_parser_generic_json@@Base+0xac8>
   319c4:	ldrb	r0, [r3, #2]
   319c8:	cmp	r0, #32
   319cc:	bls	31538 <flatcc_json_parser_generic_json@@Base+0x1410>
   319d0:	add	r2, r3, #2
   319d4:	b	3119c <flatcc_json_parser_generic_json@@Base+0x1074>
   319d8:	mov	r3, r4
   319dc:	mov	r0, r3
   319e0:	mov	r1, r4
   319e4:	sub	r3, r3, r4
   319e8:	b	30e9c <flatcc_json_parser_generic_json@@Base+0xd74>
   319ec:	mov	r0, r2
   319f0:	b	31568 <flatcc_json_parser_generic_json@@Base+0x1440>
   319f4:	ldrb	r0, [r3, #2]
   319f8:	cmp	r0, #32
   319fc:	bls	30d54 <flatcc_json_parser_generic_json@@Base+0xc2c>
   31a00:	b	319d0 <flatcc_json_parser_generic_json@@Base+0x18a8>
   31a04:	sub	r1, r4, r3
   31a08:	cmp	r1, #1
   31a0c:	mov	r0, r4
   31a10:	mov	r1, r3
   31a14:	bgt	30eb0 <flatcc_json_parser_generic_json@@Base+0xd88>
   31a18:	b	30eb8 <flatcc_json_parser_generic_json@@Base+0xd90>
   31a1c:	cmp	r2, #125	; 0x7d
   31a20:	add	r6, r6, #1
   31a24:	beq	30528 <flatcc_json_parser_generic_json@@Base+0x400>
   31a28:	mov	r3, r0
   31a2c:	b	30b08 <flatcc_json_parser_generic_json@@Base+0x9e0>
   31a30:	cmp	r3, #91	; 0x5b
   31a34:	beq	30338 <flatcc_json_parser_generic_json@@Base+0x210>
   31a38:	cmp	r3, #123	; 0x7b
   31a3c:	beq	31808 <flatcc_json_parser_generic_json@@Base+0x16e0>
   31a40:	b	314dc <flatcc_json_parser_generic_json@@Base+0x13b4>
   31a44:	mov	r0, r4
   31a48:	b	302ec <flatcc_json_parser_generic_json@@Base+0x1c4>
   31a4c:	ldrb	r2, [r4]
   31a50:	b	31354 <flatcc_json_parser_generic_json@@Base+0x122c>
   31a54:	ldr	r3, [r5, #24]
   31a58:	cmp	r3, #0
   31a5c:	bne	30324 <flatcc_json_parser_generic_json@@Base+0x1fc>
   31a60:	ldr	r3, [r5, #4]
   31a64:	mov	r2, #4
   31a68:	b	30f00 <flatcc_json_parser_generic_json@@Base+0xdd8>
   31a6c:	ldr	r3, [r5, #24]
   31a70:	cmp	r3, #0
   31a74:	bne	302f8 <flatcc_json_parser_generic_json@@Base+0x1d0>
   31a78:	ldr	r3, [r5, #4]
   31a7c:	mov	r2, #20
   31a80:	b	31380 <flatcc_json_parser_generic_json@@Base+0x1258>
   31a84:	cmp	r2, #93	; 0x5d
   31a88:	add	r6, r6, #1
   31a8c:	bne	31a28 <flatcc_json_parser_generic_json@@Base+0x1900>
   31a90:	b	30528 <flatcc_json_parser_generic_json@@Base+0x400>
   31a94:	mov	r3, r1
   31a98:	b	3033c <flatcc_json_parser_generic_json@@Base+0x214>
   31a9c:	cmp	r2, #48	; 0x30
   31aa0:	bcs	31ab4 <flatcc_json_parser_generic_json@@Base+0x198c>
   31aa4:	cmp	r2, #34	; 0x22
   31aa8:	beq	30f1c <flatcc_json_parser_generic_json@@Base+0xdf4>
   31aac:	cmp	r2, #45	; 0x2d
   31ab0:	bne	304fc <flatcc_json_parser_generic_json@@Base+0x3d4>
   31ab4:	mov	r3, r1
   31ab8:	b	30284 <flatcc_json_parser_generic_json@@Base+0x15c>

00031abc <flatcc_json_parser_unmatched_symbol@@Base>:
   31abc:	ldr	r3, [r0, #8]
   31ac0:	tst	r3, #1
   31ac4:	bne	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x44>
   31ac8:	ldr	r3, [r0, #24]
   31acc:	cmp	r3, #0
   31ad0:	beq	31adc <flatcc_json_parser_unmatched_symbol@@Base+0x20>
   31ad4:	mov	r0, r2
   31ad8:	bx	lr
   31adc:	ldr	r3, [r0, #4]
   31ae0:	mov	ip, #13
   31ae4:	sub	r3, r1, r3
   31ae8:	add	r3, r3, #1
   31aec:	str	r1, [r0, #36]	; 0x24
   31af0:	str	r3, [r0, #20]
   31af4:	str	ip, [r0, #24]
   31af8:	mov	r0, r2
   31afc:	bx	lr
   31b00:	ldr	r3, [r0, #12]
   31b04:	push	{r4, lr}
   31b08:	cmp	r3, #0
   31b0c:	beq	31bec <flatcc_json_parser_unmatched_symbol@@Base+0x130>
   31b10:	cmp	r1, r2
   31b14:	beq	31b64 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   31b18:	ldrb	ip, [r1]
   31b1c:	cmp	ip, #32
   31b20:	bls	31b64 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   31b24:	add	r3, r1, #1
   31b28:	cmp	ip, #46	; 0x2e
   31b2c:	cmpne	ip, #95	; 0x5f
   31b30:	sub	r1, r3, #1
   31b34:	beq	31c40 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   31b38:	sub	lr, ip, #48	; 0x30
   31b3c:	tst	ip, #128	; 0x80
   31b40:	uxtb	lr, lr
   31b44:	bne	31c40 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   31b48:	orr	r4, ip, #32
   31b4c:	sub	r4, r4, #97	; 0x61
   31b50:	cmp	lr, #9
   31b54:	uxtb	r4, r4
   31b58:	bls	31c40 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   31b5c:	cmp	r4, #25
   31b60:	bls	31c40 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   31b64:	mov	lr, r2
   31b68:	sub	r3, r2, r1
   31b6c:	cmp	r3, #1
   31b70:	ble	31b84 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   31b74:	ldrb	ip, [r1]
   31b78:	cmp	ip, #32
   31b7c:	bhi	31dbc <flatcc_json_parser_unmatched_symbol@@Base+0x300>
   31b80:	beq	31dac <flatcc_json_parser_unmatched_symbol@@Base+0x2f0>
   31b84:	mov	r4, #0
   31b88:	cmp	r2, r1
   31b8c:	beq	31e58 <flatcc_json_parser_unmatched_symbol@@Base+0x39c>
   31b90:	ldrb	ip, [r1]
   31b94:	cmp	ip, #32
   31b98:	bne	31c60 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   31b9c:	add	r3, r1, #1
   31ba0:	b	31bb0 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   31ba4:	ldrb	ip, [r3], #1
   31ba8:	cmp	ip, #32
   31bac:	bne	31c60 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   31bb0:	cmp	r3, r2
   31bb4:	mov	r1, r3
   31bb8:	bne	31ba4 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   31bbc:	ldr	r3, [r0, #24]
   31bc0:	cmp	r3, #0
   31bc4:	bne	31be4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   31bc8:	ldr	r3, [r0, #4]
   31bcc:	mov	ip, #4
   31bd0:	sub	r3, r1, r3
   31bd4:	add	r3, r3, #1
   31bd8:	str	r1, [r0, #36]	; 0x24
   31bdc:	str	r3, [r0, #20]
   31be0:	str	ip, [r0, #24]
   31be4:	mov	r0, r2
   31be8:	pop	{r4, pc}
   31bec:	cmp	r1, r2
   31bf0:	beq	31f40 <flatcc_json_parser_unmatched_symbol@@Base+0x484>
   31bf4:	ldrb	ip, [r1]
   31bf8:	cmp	ip, #34	; 0x22
   31bfc:	movne	lr, r2
   31c00:	bne	31c20 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   31c04:	b	31de8 <flatcc_json_parser_unmatched_symbol@@Base+0x32c>
   31c08:	add	r1, r3, #1
   31c0c:	cmp	r2, r1
   31c10:	beq	31dd0 <flatcc_json_parser_unmatched_symbol@@Base+0x314>
   31c14:	ldrb	ip, [r3, #1]
   31c18:	cmp	ip, #34	; 0x22
   31c1c:	beq	31dec <flatcc_json_parser_unmatched_symbol@@Base+0x330>
   31c20:	cmp	ip, #92	; 0x5c
   31c24:	mov	r3, r1
   31c28:	bne	31c08 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   31c2c:	sub	r3, r2, r1
   31c30:	cmp	r3, #1
   31c34:	ble	31dd4 <flatcc_json_parser_unmatched_symbol@@Base+0x318>
   31c38:	add	r3, r1, #1
   31c3c:	b	31c08 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   31c40:	cmp	r2, r3
   31c44:	mov	r1, r3
   31c48:	beq	31df8 <flatcc_json_parser_unmatched_symbol@@Base+0x33c>
   31c4c:	ldrb	lr, [r3], #1
   31c50:	cmp	lr, #32
   31c54:	bls	31dfc <flatcc_json_parser_unmatched_symbol@@Base+0x340>
   31c58:	mov	ip, lr
   31c5c:	b	31b28 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>
   31c60:	cmp	ip, #32
   31c64:	bhi	31d20 <flatcc_json_parser_unmatched_symbol@@Base+0x264>
   31c68:	sub	ip, ip, #9
   31c6c:	cmp	ip, #23
   31c70:	ldrls	pc, [pc, ip, lsl #2]
   31c74:	b	31d94 <flatcc_json_parser_unmatched_symbol@@Base+0x2d8>
   31c78:	andeq	r1, r3, ip, lsl #27
   31c7c:	strdeq	r1, [r3], -r8
   31c80:	muleq	r3, r4, sp
   31c84:	muleq	r3, r4, sp
   31c88:	ldrdeq	r1, [r3], -r8
   31c8c:	muleq	r3, r4, sp
   31c90:	muleq	r3, r4, sp
   31c94:	muleq	r3, r4, sp
   31c98:	muleq	r3, r4, sp
   31c9c:	muleq	r3, r4, sp
   31ca0:	muleq	r3, r4, sp
   31ca4:	muleq	r3, r4, sp
   31ca8:	muleq	r3, r4, sp
   31cac:	muleq	r3, r4, sp
   31cb0:	muleq	r3, r4, sp
   31cb4:	muleq	r3, r4, sp
   31cb8:	muleq	r3, r4, sp
   31cbc:	muleq	r3, r4, sp
   31cc0:	muleq	r3, r4, sp
   31cc4:	muleq	r3, r4, sp
   31cc8:	muleq	r3, r4, sp
   31ccc:	muleq	r3, r4, sp
   31cd0:	muleq	r3, r4, sp
   31cd4:	andeq	r1, r3, r8, lsl #23
   31cd8:	sub	r3, lr, r1
   31cdc:	cmp	r3, #1
   31ce0:	movle	r3, r4
   31ce4:	ldrbgt	r3, [r1, #1]
   31ce8:	subgt	r3, r3, #10
   31cec:	clzgt	r3, r3
   31cf0:	lsrgt	r3, r3, #5
   31cf4:	add	r1, r1, r3
   31cf8:	ldr	r3, [r0, #16]
   31cfc:	add	r1, r1, #1
   31d00:	add	r3, r3, #1
   31d04:	str	r1, [r0, #4]
   31d08:	str	r3, [r0, #16]
   31d0c:	cmp	r2, r1
   31d10:	beq	31e58 <flatcc_json_parser_unmatched_symbol@@Base+0x39c>
   31d14:	ldrb	ip, [r1]
   31d18:	cmp	ip, #32
   31d1c:	bls	31c68 <flatcc_json_parser_unmatched_symbol@@Base+0x1ac>
   31d20:	cmp	ip, #58	; 0x3a
   31d24:	bne	31bbc <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   31d28:	add	r4, r1, #1
   31d2c:	sub	r3, lr, r4
   31d30:	cmp	r3, #1
   31d34:	ble	31d48 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   31d38:	ldrb	r3, [r1, #1]
   31d3c:	cmp	r3, #32
   31d40:	bhi	31d80 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   31d44:	beq	31f48 <flatcc_json_parser_unmatched_symbol@@Base+0x48c>
   31d48:	mov	r1, #0
   31d4c:	cmp	r2, r4
   31d50:	beq	31f38 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   31d54:	ldrb	ip, [r4]
   31d58:	cmp	ip, #32
   31d5c:	bne	31e60 <flatcc_json_parser_unmatched_symbol@@Base+0x3a4>
   31d60:	add	r3, r4, #1
   31d64:	b	31d74 <flatcc_json_parser_unmatched_symbol@@Base+0x2b8>
   31d68:	ldrb	ip, [r3], #1
   31d6c:	cmp	ip, #32
   31d70:	bne	31e60 <flatcc_json_parser_unmatched_symbol@@Base+0x3a4>
   31d74:	cmp	r3, r2
   31d78:	mov	r4, r3
   31d7c:	bne	31d68 <flatcc_json_parser_unmatched_symbol@@Base+0x2ac>
   31d80:	mov	r1, r4
   31d84:	pop	{r4, lr}
   31d88:	b	30128 <flatcc_json_parser_generic_json@@Base>
   31d8c:	add	r1, r1, #1
   31d90:	b	31d0c <flatcc_json_parser_unmatched_symbol@@Base+0x250>
   31d94:	ldr	r3, [r0, #24]
   31d98:	cmp	r3, #0
   31d9c:	bne	31be4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   31da0:	ldr	r3, [r0, #4]
   31da4:	mov	ip, #5
   31da8:	b	31bd0 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   31dac:	ldrb	ip, [r1, #1]
   31db0:	cmp	ip, #32
   31db4:	addhi	r1, r1, #1
   31db8:	bls	31b84 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   31dbc:	cmp	r2, r1
   31dc0:	beq	31bbc <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   31dc4:	cmp	ip, #58	; 0x3a
   31dc8:	bne	31bbc <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   31dcc:	b	31d28 <flatcc_json_parser_unmatched_symbol@@Base+0x26c>
   31dd0:	mov	r1, r2
   31dd4:	ldr	r3, [r0, #24]
   31dd8:	cmp	r3, #0
   31ddc:	beq	31e38 <flatcc_json_parser_unmatched_symbol@@Base+0x37c>
   31de0:	mov	r1, r2
   31de4:	b	31b84 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   31de8:	mov	lr, r2
   31dec:	add	r1, r1, #1
   31df0:	sub	r3, r2, r1
   31df4:	b	31b6c <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   31df8:	mov	r1, r2
   31dfc:	cmp	ip, #46	; 0x2e
   31e00:	bne	31b64 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   31e04:	ldr	r3, [r0, #24]
   31e08:	cmp	r3, #0
   31e0c:	beq	31e18 <flatcc_json_parser_unmatched_symbol@@Base+0x35c>
   31e10:	mov	lr, r2
   31e14:	b	31de0 <flatcc_json_parser_unmatched_symbol@@Base+0x324>
   31e18:	ldr	r3, [r0, #4]
   31e1c:	mov	ip, #5
   31e20:	sub	r3, r1, r3
   31e24:	add	r3, r3, #1
   31e28:	str	r1, [r0, #36]	; 0x24
   31e2c:	str	r3, [r0, #20]
   31e30:	str	ip, [r0, #24]
   31e34:	b	31e10 <flatcc_json_parser_unmatched_symbol@@Base+0x354>
   31e38:	ldr	r3, [r0, #4]
   31e3c:	mov	ip, #20
   31e40:	sub	r3, r1, r3
   31e44:	add	r3, r3, #1
   31e48:	str	r1, [r0, #36]	; 0x24
   31e4c:	str	r3, [r0, #20]
   31e50:	str	ip, [r0, #24]
   31e54:	b	31de0 <flatcc_json_parser_unmatched_symbol@@Base+0x324>
   31e58:	mov	r1, r2
   31e5c:	b	31bbc <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   31e60:	cmp	ip, #32
   31e64:	bhi	31d80 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   31e68:	sub	ip, ip, #9
   31e6c:	cmp	ip, #23
   31e70:	ldrls	pc, [pc, ip, lsl #2]
   31e74:	b	31f2c <flatcc_json_parser_unmatched_symbol@@Base+0x470>
   31e78:	andeq	r1, r3, r4, lsr #30
   31e7c:	strdeq	r1, [r3], -r8
   31e80:	andeq	r1, r3, ip, lsr #30
   31e84:	andeq	r1, r3, ip, lsr #30
   31e88:	ldrdeq	r1, [r3], -r8
   31e8c:	andeq	r1, r3, ip, lsr #30
   31e90:	andeq	r1, r3, ip, lsr #30
   31e94:	andeq	r1, r3, ip, lsr #30
   31e98:	andeq	r1, r3, ip, lsr #30
   31e9c:	andeq	r1, r3, ip, lsr #30
   31ea0:	andeq	r1, r3, ip, lsr #30
   31ea4:	andeq	r1, r3, ip, lsr #30
   31ea8:	andeq	r1, r3, ip, lsr #30
   31eac:	andeq	r1, r3, ip, lsr #30
   31eb0:	andeq	r1, r3, ip, lsr #30
   31eb4:	andeq	r1, r3, ip, lsr #30
   31eb8:	andeq	r1, r3, ip, lsr #30
   31ebc:	andeq	r1, r3, ip, lsr #30
   31ec0:	andeq	r1, r3, ip, lsr #30
   31ec4:	andeq	r1, r3, ip, lsr #30
   31ec8:	andeq	r1, r3, ip, lsr #30
   31ecc:	andeq	r1, r3, ip, lsr #30
   31ed0:	andeq	r1, r3, ip, lsr #30
   31ed4:	andeq	r1, r3, ip, asr #26
   31ed8:	sub	r3, lr, r4
   31edc:	cmp	r3, #1
   31ee0:	movle	r3, r1
   31ee4:	ldrbgt	r3, [r4, #1]
   31ee8:	subgt	r3, r3, #10
   31eec:	clzgt	r3, r3
   31ef0:	lsrgt	r3, r3, #5
   31ef4:	add	r4, r4, r3
   31ef8:	ldr	r3, [r0, #16]
   31efc:	add	r4, r4, #1
   31f00:	add	r3, r3, #1
   31f04:	str	r4, [r0, #4]
   31f08:	str	r3, [r0, #16]
   31f0c:	cmp	r2, r4
   31f10:	beq	31f38 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   31f14:	ldrb	ip, [r4]
   31f18:	cmp	ip, #32
   31f1c:	bls	31e68 <flatcc_json_parser_unmatched_symbol@@Base+0x3ac>
   31f20:	b	31d80 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   31f24:	add	r4, r4, #1
   31f28:	b	31f0c <flatcc_json_parser_unmatched_symbol@@Base+0x450>
   31f2c:	ldr	r3, [r0, #24]
   31f30:	cmp	r3, #0
   31f34:	beq	31f5c <flatcc_json_parser_unmatched_symbol@@Base+0x4a0>
   31f38:	mov	r4, r2
   31f3c:	b	31d80 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   31f40:	mov	lr, r1
   31f44:	b	31dd4 <flatcc_json_parser_unmatched_symbol@@Base+0x318>
   31f48:	ldrb	r3, [r1, #2]
   31f4c:	cmp	r3, #32
   31f50:	addhi	r4, r1, #2
   31f54:	bls	31d48 <flatcc_json_parser_unmatched_symbol@@Base+0x28c>
   31f58:	b	31d80 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>
   31f5c:	ldr	r3, [r0, #4]
   31f60:	mov	r1, #5
   31f64:	sub	r3, r4, r3
   31f68:	add	r3, r3, #1
   31f6c:	str	r4, [r0, #36]	; 0x24
   31f70:	str	r3, [r0, #20]
   31f74:	str	r1, [r0, #24]
   31f78:	mov	r4, r2
   31f7c:	b	31d80 <flatcc_json_parser_unmatched_symbol@@Base+0x2c4>

00031f80 <flatcc_json_parser_integer@@Base>:
   31f80:	cmp	r1, r2
   31f84:	beq	320a4 <flatcc_json_parser_integer@@Base+0x124>
   31f88:	push	{r4, r5, r6, r7, r8, r9, lr}
   31f8c:	mov	r8, r0
   31f90:	ldrb	ip, [r1]
   31f94:	sub	ip, ip, #45	; 0x2d
   31f98:	clz	ip, ip
   31f9c:	lsr	ip, ip, #5
   31fa0:	add	r0, r1, ip
   31fa4:	cmp	r2, r0
   31fa8:	str	ip, [r3]
   31fac:	beq	320b0 <flatcc_json_parser_integer@@Base+0x130>
   31fb0:	ldrb	ip, [r1, ip]
   31fb4:	sub	r3, ip, #48	; 0x30
   31fb8:	cmp	r3, #9
   31fbc:	bhi	32034 <flatcc_json_parser_integer@@Base+0xb4>
   31fc0:	uxtb	r6, ip
   31fc4:	mov	r7, #0
   31fc8:	subs	r6, r6, #48	; 0x30
   31fcc:	add	r3, r0, #1
   31fd0:	sbc	r7, r7, #0
   31fd4:	mov	lr, #10
   31fd8:	b	32014 <flatcc_json_parser_integer@@Base+0x94>
   31fdc:	ldrb	ip, [r3]
   31fe0:	add	r3, r3, #1
   31fe4:	sub	r9, ip, #48	; 0x30
   31fe8:	cmp	r9, #9
   31fec:	bhi	3203c <flatcc_json_parser_integer@@Base+0xbc>
   31ff0:	subs	r4, r4, #48	; 0x30
   31ff4:	sbc	r5, r5, #0
   31ff8:	adds	r4, r4, ip
   31ffc:	adc	r5, r5, #0
   32000:	cmp	r5, r7
   32004:	cmpeq	r4, r6
   32008:	mov	r7, r5
   3200c:	mov	r6, r4
   32010:	bcc	32068 <flatcc_json_parser_integer@@Base+0xe8>
   32014:	umull	r4, r5, r6, lr
   32018:	cmp	r3, r2
   3201c:	mla	r5, lr, r7, r5
   32020:	mov	r0, r3
   32024:	bne	31fdc <flatcc_json_parser_integer@@Base+0x5c>
   32028:	ldr	r3, [sp, #28]
   3202c:	strd	r6, [r3]
   32030:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32034:	mov	r6, #0
   32038:	mov	r7, #0
   3203c:	cmp	r1, r0
   32040:	beq	320ac <flatcc_json_parser_integer@@Base+0x12c>
   32044:	and	r3, ip, #223	; 0xdf
   32048:	cmp	ip, #46	; 0x2e
   3204c:	cmpne	r3, #69	; 0x45
   32050:	bne	32028 <flatcc_json_parser_integer@@Base+0xa8>
   32054:	ldr	r3, [r8, #24]
   32058:	cmp	r3, #0
   3205c:	beq	32098 <flatcc_json_parser_integer@@Base+0x118>
   32060:	mov	r0, r2
   32064:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32068:	ldr	r3, [r8, #24]
   3206c:	cmp	r3, #0
   32070:	bne	32060 <flatcc_json_parser_integer@@Base+0xe0>
   32074:	ldr	r3, [r8, #4]
   32078:	mov	r1, #8
   3207c:	sub	r3, r0, r3
   32080:	add	r3, r3, #1
   32084:	str	r0, [r8, #36]	; 0x24
   32088:	str	r3, [r8, #20]
   3208c:	mov	r0, r2
   32090:	str	r1, [r8, #24]
   32094:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32098:	ldr	r3, [r8, #4]
   3209c:	mov	r1, #12
   320a0:	b	3207c <flatcc_json_parser_integer@@Base+0xfc>
   320a4:	mov	r0, r2
   320a8:	bx	lr
   320ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   320b0:	mov	r6, #0
   320b4:	mov	r7, #0
   320b8:	b	32028 <flatcc_json_parser_integer@@Base+0xa8>

000320bc <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   320bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   320c0:	sub	sp, sp, #36	; 0x24
   320c4:	mov	r4, r2
   320c8:	ldr	r7, [sp, #72]	; 0x48
   320cc:	mov	r6, r0
   320d0:	adds	r9, r7, #0
   320d4:	movne	r9, #1
   320d8:	cmp	r1, r2
   320dc:	mov	r8, r3
   320e0:	beq	320f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   320e4:	ldrb	r3, [r1]
   320e8:	cmp	r3, #34	; 0x22
   320ec:	beq	32150 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   320f0:	ldr	r3, [r6, #24]
   320f4:	cmp	r3, #0
   320f8:	beq	32274 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   320fc:	mov	r5, r4
   32100:	mov	r3, #0
   32104:	str	r3, [r8]
   32108:	ldr	r3, [r6, #24]
   3210c:	cmp	r7, #0
   32110:	moveq	r7, #31
   32114:	movne	r7, #32
   32118:	cmp	r3, #0
   3211c:	beq	3212c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   32120:	mov	r0, r4
   32124:	add	sp, sp, #36	; 0x24
   32128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3212c:	ldr	r3, [r6, #4]
   32130:	mov	r0, r4
   32134:	sub	r3, r5, r3
   32138:	add	r3, r3, #1
   3213c:	str	r7, [r6, #24]
   32140:	str	r5, [r6, #36]	; 0x24
   32144:	str	r3, [r6, #20]
   32148:	add	sp, sp, #36	; 0x24
   3214c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32150:	add	fp, r1, #1
   32154:	cmp	r2, fp
   32158:	beq	3253c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x480>
   3215c:	ldrb	r3, [r1, #1]
   32160:	cmp	r3, #34	; 0x22
   32164:	cmpne	r3, #31
   32168:	movhi	r2, #1
   3216c:	movls	r2, #0
   32170:	cmp	r3, #92	; 0x5c
   32174:	moveq	r2, #0
   32178:	andne	r2, r2, #1
   3217c:	cmp	r2, #0
   32180:	beq	324b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
   32184:	add	r1, r1, #2
   32188:	cmp	r4, r1
   3218c:	mov	r5, r1
   32190:	beq	32540 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x484>
   32194:	ldrb	r3, [r1], #1
   32198:	cmp	r3, #34	; 0x22
   3219c:	cmpne	r3, #31
   321a0:	movhi	r2, #1
   321a4:	movls	r2, #0
   321a8:	cmp	r3, #92	; 0x5c
   321ac:	moveq	r2, #0
   321b0:	andne	r2, r2, #1
   321b4:	cmp	r2, #0
   321b8:	bne	32188 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xcc>
   321bc:	cmp	r3, #31
   321c0:	bhi	321f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   321c4:	ldr	r3, [r6, #24]
   321c8:	cmp	r3, #0
   321cc:	bne	320fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   321d0:	ldr	r3, [r6, #4]
   321d4:	mov	r2, #17
   321d8:	sub	r3, r5, r3
   321dc:	add	r3, r3, #1
   321e0:	str	r5, [r6, #36]	; 0x24
   321e4:	str	r3, [r6, #20]
   321e8:	str	r2, [r6, #24]
   321ec:	b	320fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   321f0:	cmp	r3, #34	; 0x22
   321f4:	bne	32100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   321f8:	sub	sl, r5, fp
   321fc:	and	r2, sl, #3
   32200:	lsr	r3, sl, #2
   32204:	cmp	r2, #2
   32208:	add	r3, r3, r3, lsl #1
   3220c:	str	r3, [sp]
   32210:	beq	32294 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d8>
   32214:	cmp	r2, #3
   32218:	addeq	r3, r3, #2
   3221c:	streq	r3, [sp]
   32220:	mov	r2, #1
   32224:	mov	r1, r2
   32228:	mvn	r3, #0
   3222c:	ldr	r0, [r6]
   32230:	bl	280dc <flatcc_builder_start_vector@@Base>
   32234:	cmp	r0, #0
   32238:	beq	322a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   3223c:	mov	r3, #0
   32240:	str	r3, [r8]
   32244:	ldr	r3, [r6, #24]
   32248:	cmp	r3, #0
   3224c:	bne	32120 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   32250:	ldr	r3, [r6, #4]
   32254:	mov	r2, #33	; 0x21
   32258:	sub	r3, r5, r3
   3225c:	add	r3, r3, #1
   32260:	str	r5, [r6, #36]	; 0x24
   32264:	mov	r0, r4
   32268:	str	r3, [r6, #20]
   3226c:	str	r2, [r6, #24]
   32270:	b	32124 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   32274:	ldr	r3, [r6, #4]
   32278:	mov	r2, #16
   3227c:	sub	r3, r1, r3
   32280:	add	r3, r3, #1
   32284:	str	r1, [r6, #36]	; 0x24
   32288:	str	r3, [r6, #20]
   3228c:	str	r2, [r6, #24]
   32290:	b	320fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   32294:	add	r3, r3, #1
   32298:	str	r3, [sp]
   3229c:	b	32220 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   322a0:	ldr	r1, [sp]
   322a4:	ldr	r0, [r6]
   322a8:	bl	27570 <flatcc_builder_extend_vector@@Base>
   322ac:	subs	r2, r0, #0
   322b0:	mov	lr, r2
   322b4:	str	r2, [sp, #8]
   322b8:	beq	3223c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   322bc:	ldr	r3, [pc, #660]	; 32558 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x49c>
   322c0:	cmp	r9, #0
   322c4:	add	r2, r3, #256	; 0x100
   322c8:	movne	r9, r3
   322cc:	ldr	r3, [sp]
   322d0:	moveq	r9, r2
   322d4:	cmp	r3, #0
   322d8:	mvneq	r3, #0
   322dc:	str	r3, [sp, #12]
   322e0:	mov	ip, fp
   322e4:	mov	r3, sl
   322e8:	str	sl, [sp, #4]
   322ec:	cmp	r3, #0
   322f0:	beq	323ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   322f4:	mov	r2, #0
   322f8:	ldrb	r1, [ip, r2]
   322fc:	ldrb	r0, [r9, r1]
   32300:	add	r1, sp, #32
   32304:	add	r1, r1, r2
   32308:	cmp	r0, #63	; 0x3f
   3230c:	strb	r0, [r1, #-4]
   32310:	bls	32360 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   32314:	cmp	r0, #65	; 0x41
   32318:	beq	32354 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x298>
   3231c:	cmp	r0, #66	; 0x42
   32320:	movne	r1, r2
   32324:	beq	32410 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x354>
   32328:	sub	r3, r3, r1
   3232c:	cmp	r2, #2
   32330:	beq	3237c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   32334:	cmp	r2, #3
   32338:	beq	32464 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   3233c:	cmp	r2, #0
   32340:	beq	3239c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   32344:	ldr	r3, [sp, #4]
   32348:	sub	lr, sl, r3
   3234c:	add	r5, fp, lr
   32350:	b	32100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   32354:	add	ip, ip, #1
   32358:	sub	r3, r3, #1
   3235c:	sub	r2, r2, #1
   32360:	add	r2, r2, #1
   32364:	cmp	r2, #3
   32368:	bhi	324bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x400>
   3236c:	cmp	r2, r3
   32370:	bne	322f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   32374:	mov	r3, #0
   32378:	b	3232c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
   3237c:	ldrb	r2, [sp, #29]
   32380:	lsl	r1, r2, #4
   32384:	tst	r1, #240	; 0xf0
   32388:	bne	32344 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   3238c:	ldrb	r1, [sp, #28]
   32390:	lsr	r2, r2, #4
   32394:	orr	r2, r2, r1, lsl #2
   32398:	strb	r2, [lr], #1
   3239c:	sub	r3, sl, r3
   323a0:	cmp	sl, r3
   323a4:	addne	r5, fp, r3
   323a8:	bne	32100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   323ac:	ldr	r3, [sp, #8]
   323b0:	sub	r1, lr, r3
   323b4:	ldr	r3, [sp]
   323b8:	cmp	r3, r1
   323bc:	bls	323d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   323c0:	sub	r1, r3, r1
   323c4:	ldr	r0, [r6]
   323c8:	bl	27f28 <flatcc_builder_truncate_vector@@Base>
   323cc:	cmp	r0, #0
   323d0:	bne	3223c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   323d4:	ldr	r0, [r6]
   323d8:	bl	295bc <flatcc_builder_end_vector@@Base>
   323dc:	cmp	r0, #0
   323e0:	str	r0, [r8]
   323e4:	beq	3223c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   323e8:	ldrb	r3, [r5]
   323ec:	cmp	r3, #34	; 0x22
   323f0:	addeq	r0, r5, #1
   323f4:	beq	32124 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   323f8:	ldr	r3, [r6, #24]
   323fc:	cmp	r3, #0
   32400:	bne	32120 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   32404:	ldr	r3, [r6, #4]
   32408:	mov	r2, #20
   3240c:	b	32258 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   32410:	add	r1, r2, #1
   32414:	cmp	r1, #7
   32418:	cmpls	r1, r3
   3241c:	bcs	32328 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32420:	ldrb	r0, [ip, r1]
   32424:	add	ip, ip, r1
   32428:	ldrb	r0, [r9, r0]
   3242c:	sub	r0, r0, #65	; 0x41
   32430:	cmp	r0, #1
   32434:	bls	32450 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   32438:	b	32328 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   3243c:	ldrb	r0, [ip, #1]!
   32440:	ldrb	r0, [r9, r0]
   32444:	sub	r0, r0, #65	; 0x41
   32448:	cmp	r0, #1
   3244c:	bhi	32328 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32450:	add	r1, r1, #1
   32454:	cmp	r1, #7
   32458:	cmpls	r1, r3
   3245c:	bcc	3243c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   32460:	b	32328 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32464:	ldrb	r2, [sp, #30]
   32468:	ldr	r0, [sp, #12]
   3246c:	lsl	r1, r2, #6
   32470:	tst	r1, #192	; 0xc0
   32474:	movne	r1, #1
   32478:	moveq	r1, #0
   3247c:	cmp	r0, #1
   32480:	orreq	r1, r1, #1
   32484:	cmp	r1, #0
   32488:	bne	32344 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   3248c:	ldrb	r1, [sp, #29]
   32490:	ldrb	r0, [sp, #28]
   32494:	lsr	r2, r2, #2
   32498:	add	lr, lr, #2
   3249c:	orr	r2, r2, r1, lsl #4
   324a0:	lsr	r1, r1, #4
   324a4:	orr	r0, r1, r0, lsl #2
   324a8:	strb	r2, [lr, #-1]
   324ac:	strb	r0, [lr, #-2]
   324b0:	b	3239c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   324b4:	mov	r5, fp
   324b8:	b	321bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x100>
   324bc:	ldr	r2, [sp, #12]
   324c0:	cmp	r2, #2
   324c4:	bls	32344 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   324c8:	ldrb	r1, [sp, #29]
   324cc:	subs	r2, r2, #3
   324d0:	str	r2, [sp, #12]
   324d4:	mov	r0, r1
   324d8:	ldrb	r1, [sp, #30]
   324dc:	str	r0, [sp, #4]
   324e0:	lsr	r0, r0, #4
   324e4:	str	r1, [sp, #16]
   324e8:	ldrb	r1, [sp, #28]
   324ec:	add	ip, ip, #4
   324f0:	sub	r3, r3, #4
   324f4:	str	r1, [sp, #20]
   324f8:	ldr	r2, [sp, #20]
   324fc:	ldrb	r1, [sp, #31]
   32500:	add	lr, lr, #3
   32504:	orr	r0, r0, r2, lsl #2
   32508:	ldr	r2, [sp, #16]
   3250c:	strb	r0, [lr, #-3]
   32510:	orr	r1, r1, r2, lsl #6
   32514:	str	r1, [sp, #16]
   32518:	ldr	r1, [sp, #4]
   3251c:	lsr	r2, r2, #2
   32520:	orr	r2, r2, r1, lsl #4
   32524:	strb	r2, [lr, #-2]
   32528:	ldrb	r2, [sp, #16]
   3252c:	strb	r2, [lr, #-1]
   32530:	beq	3239c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   32534:	str	r3, [sp, #4]
   32538:	b	322ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   3253c:	mov	r5, r2
   32540:	ldr	r3, [r6, #24]
   32544:	cmp	r3, #0
   32548:	bne	320fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   3254c:	ldr	r3, [r6, #4]
   32550:	mov	r2, #20
   32554:	b	321d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   32558:	ldrdeq	r6, [r4], -r8

0003255c <flatcc_json_parser_build_string@@Base>:
   3255c:	cmp	r1, r2
   32560:	push	{r4, r5, r6, r7, r8, lr}
   32564:	mov	r5, r2
   32568:	sub	sp, sp, #8
   3256c:	mov	r6, r0
   32570:	mov	r7, r3
   32574:	beq	32584 <flatcc_json_parser_build_string@@Base+0x28>
   32578:	ldrb	r3, [r1]
   3257c:	cmp	r3, #34	; 0x22
   32580:	beq	32728 <flatcc_json_parser_build_string@@Base+0x1cc>
   32584:	ldr	r3, [r6, #24]
   32588:	cmp	r3, #0
   3258c:	beq	327e0 <flatcc_json_parser_build_string@@Base+0x284>
   32590:	mov	r4, r5
   32594:	mov	r8, r5
   32598:	ldr	r0, [r6]
   3259c:	bl	28630 <flatcc_builder_start_string@@Base>
   325a0:	cmp	r0, #0
   325a4:	beq	325bc <flatcc_json_parser_build_string@@Base+0x60>
   325a8:	mov	r3, #0
   325ac:	str	r3, [r7]
   325b0:	mov	r0, r4
   325b4:	add	sp, sp, #8
   325b8:	pop	{r4, r5, r6, r7, r8, pc}
   325bc:	sub	r2, r4, r8
   325c0:	mov	r1, r8
   325c4:	ldr	r0, [r6]
   325c8:	bl	27c54 <flatcc_builder_append_string@@Base>
   325cc:	cmp	r0, #0
   325d0:	beq	325a8 <flatcc_json_parser_build_string@@Base+0x4c>
   325d4:	cmp	r5, r4
   325d8:	beq	32850 <flatcc_json_parser_build_string@@Base+0x2f4>
   325dc:	ldrb	r3, [r4]
   325e0:	cmp	r3, #34	; 0x22
   325e4:	beq	32830 <flatcc_json_parser_build_string@@Base+0x2d4>
   325e8:	mov	r1, r4
   325ec:	add	r3, sp, #4
   325f0:	mov	r2, r5
   325f4:	mov	r0, r6
   325f8:	bl	2f42c <flatcc_json_parser_string_escape@@Base>
   325fc:	ldrb	r2, [sp, #4]
   32600:	add	r1, sp, #5
   32604:	mov	r8, r0
   32608:	ldr	r0, [r6]
   3260c:	bl	27c54 <flatcc_builder_append_string@@Base>
   32610:	cmp	r0, #0
   32614:	beq	32848 <flatcc_json_parser_build_string@@Base+0x2ec>
   32618:	cmp	r5, r8
   3261c:	beq	32840 <flatcc_json_parser_build_string@@Base+0x2e4>
   32620:	ldrb	r3, [r8]
   32624:	cmp	r3, #34	; 0x22
   32628:	cmpne	r3, #31
   3262c:	movhi	r2, #1
   32630:	movls	r2, #0
   32634:	cmp	r3, #92	; 0x5c
   32638:	moveq	r2, #0
   3263c:	andne	r2, r2, #1
   32640:	cmp	r2, #0
   32644:	beq	326d4 <flatcc_json_parser_build_string@@Base+0x178>
   32648:	add	r2, r8, #1
   3264c:	b	32678 <flatcc_json_parser_build_string@@Base+0x11c>
   32650:	ldrb	r3, [r2], #1
   32654:	cmp	r3, #34	; 0x22
   32658:	cmpne	r3, #31
   3265c:	movhi	r1, #1
   32660:	movls	r1, #0
   32664:	cmp	r3, #92	; 0x5c
   32668:	moveq	r1, #0
   3266c:	andne	r1, r1, #1
   32670:	cmp	r1, #0
   32674:	beq	326d8 <flatcc_json_parser_build_string@@Base+0x17c>
   32678:	cmp	r5, r2
   3267c:	mov	r4, r2
   32680:	bne	32650 <flatcc_json_parser_build_string@@Base+0xf4>
   32684:	ldr	r3, [r6, #24]
   32688:	cmp	r3, #0
   3268c:	beq	32824 <flatcc_json_parser_build_string@@Base+0x2c8>
   32690:	ldr	r0, [r6]
   32694:	bl	2a818 <flatcc_builder_end_string@@Base>
   32698:	mov	r4, r5
   3269c:	str	r0, [r7]
   326a0:	ldr	r3, [r6, #24]
   326a4:	cmp	r3, #0
   326a8:	movne	r4, r5
   326ac:	bne	325b0 <flatcc_json_parser_build_string@@Base+0x54>
   326b0:	ldr	r3, [r6, #4]
   326b4:	mov	r2, #20
   326b8:	sub	r3, r4, r3
   326bc:	add	r3, r3, #1
   326c0:	str	r4, [r6, #36]	; 0x24
   326c4:	str	r3, [r6, #20]
   326c8:	mov	r4, r5
   326cc:	str	r2, [r6, #24]
   326d0:	b	325b0 <flatcc_json_parser_build_string@@Base+0x54>
   326d4:	mov	r4, r8
   326d8:	cmp	r3, #31
   326dc:	bhi	3270c <flatcc_json_parser_build_string@@Base+0x1b0>
   326e0:	ldr	r3, [r6, #24]
   326e4:	cmp	r3, #0
   326e8:	bne	32690 <flatcc_json_parser_build_string@@Base+0x134>
   326ec:	ldr	r3, [r6, #4]
   326f0:	mov	r2, #17
   326f4:	sub	r3, r4, r3
   326f8:	add	r3, r3, #1
   326fc:	str	r4, [r6, #36]	; 0x24
   32700:	str	r3, [r6, #20]
   32704:	str	r2, [r6, #24]
   32708:	b	32690 <flatcc_json_parser_build_string@@Base+0x134>
   3270c:	sub	r2, r4, r8
   32710:	mov	r1, r8
   32714:	ldr	r0, [r6]
   32718:	bl	27c54 <flatcc_builder_append_string@@Base>
   3271c:	cmp	r0, #0
   32720:	bne	325dc <flatcc_json_parser_build_string@@Base+0x80>
   32724:	b	325a8 <flatcc_json_parser_build_string@@Base+0x4c>
   32728:	add	r8, r1, #1
   3272c:	cmp	r2, r8
   32730:	beq	32868 <flatcc_json_parser_build_string@@Base+0x30c>
   32734:	ldrb	r2, [r1, #1]
   32738:	cmp	r2, #34	; 0x22
   3273c:	cmpne	r2, #31
   32740:	movhi	r3, #1
   32744:	movls	r3, #0
   32748:	cmp	r2, #92	; 0x5c
   3274c:	moveq	r3, #0
   32750:	andne	r3, r3, #1
   32754:	cmp	r3, #0
   32758:	beq	32860 <flatcc_json_parser_build_string@@Base+0x304>
   3275c:	add	r3, r1, #2
   32760:	cmp	r5, r3
   32764:	mov	r4, r3
   32768:	beq	3286c <flatcc_json_parser_build_string@@Base+0x310>
   3276c:	ldrb	r2, [r3], #1
   32770:	cmp	r2, #34	; 0x22
   32774:	cmpne	r2, #31
   32778:	movhi	r0, #1
   3277c:	movls	r0, #0
   32780:	cmp	r2, #92	; 0x5c
   32784:	moveq	r0, #0
   32788:	andne	r0, r0, #1
   3278c:	cmp	r0, #0
   32790:	bne	32760 <flatcc_json_parser_build_string@@Base+0x204>
   32794:	cmp	r2, #31
   32798:	bhi	327b0 <flatcc_json_parser_build_string@@Base+0x254>
   3279c:	ldr	r3, [r6, #24]
   327a0:	cmp	r3, #0
   327a4:	beq	32800 <flatcc_json_parser_build_string@@Base+0x2a4>
   327a8:	mov	r4, r5
   327ac:	b	32598 <flatcc_json_parser_build_string@@Base+0x3c>
   327b0:	cmp	r2, #34	; 0x22
   327b4:	bne	32598 <flatcc_json_parser_build_string@@Base+0x3c>
   327b8:	sub	r2, r4, r8
   327bc:	mov	r1, r8
   327c0:	ldr	r0, [r6]
   327c4:	bl	2a548 <flatcc_builder_create_string@@Base>
   327c8:	str	r0, [r7]
   327cc:	ldrb	r3, [r4]
   327d0:	cmp	r3, #34	; 0x22
   327d4:	addeq	r4, r4, #1
   327d8:	bne	326a0 <flatcc_json_parser_build_string@@Base+0x144>
   327dc:	b	325b0 <flatcc_json_parser_build_string@@Base+0x54>
   327e0:	ldr	r3, [r6, #4]
   327e4:	mov	r2, #16
   327e8:	sub	r3, r1, r3
   327ec:	add	r3, r3, #1
   327f0:	str	r1, [r6, #36]	; 0x24
   327f4:	str	r3, [r6, #20]
   327f8:	str	r2, [r6, #24]
   327fc:	b	32590 <flatcc_json_parser_build_string@@Base+0x34>
   32800:	ldr	r3, [r6, #4]
   32804:	mov	r2, #17
   32808:	sub	r3, r4, r3
   3280c:	add	r3, r3, #1
   32810:	str	r4, [r6, #36]	; 0x24
   32814:	str	r3, [r6, #20]
   32818:	str	r2, [r6, #24]
   3281c:	mov	r4, r5
   32820:	b	32598 <flatcc_json_parser_build_string@@Base+0x3c>
   32824:	ldr	r3, [r6, #4]
   32828:	mov	r2, #20
   3282c:	b	326f4 <flatcc_json_parser_build_string@@Base+0x198>
   32830:	ldr	r0, [r6]
   32834:	bl	2a818 <flatcc_builder_end_string@@Base>
   32838:	str	r0, [r7]
   3283c:	b	327cc <flatcc_json_parser_build_string@@Base+0x270>
   32840:	mov	r4, r5
   32844:	b	32684 <flatcc_json_parser_build_string@@Base+0x128>
   32848:	mov	r4, r8
   3284c:	b	325a8 <flatcc_json_parser_build_string@@Base+0x4c>
   32850:	ldr	r0, [r6]
   32854:	bl	2a818 <flatcc_builder_end_string@@Base>
   32858:	str	r0, [r7]
   3285c:	b	326a0 <flatcc_json_parser_build_string@@Base+0x144>
   32860:	mov	r4, r8
   32864:	b	32794 <flatcc_json_parser_build_string@@Base+0x238>
   32868:	mov	r4, r2
   3286c:	ldr	r3, [r6, #24]
   32870:	cmp	r3, #0
   32874:	bne	327a8 <flatcc_json_parser_build_string@@Base+0x24c>
   32878:	ldr	r3, [r6, #4]
   3287c:	mov	r2, #20
   32880:	b	32808 <flatcc_json_parser_build_string@@Base+0x2ac>

00032884 <flatcc_json_parser_prepare_unions@@Base>:
   32884:	push	{r4, r5, r6, r7, r8, lr}
   32888:	mov	r4, r0
   3288c:	add	r0, r3, r3, lsl #1
   32890:	mov	r8, r1
   32894:	lsl	r1, r0, #3
   32898:	add	r1, r1, #8
   3289c:	ldr	r0, [r4]
   328a0:	ldr	r7, [sp, #24]
   328a4:	mov	r5, r3
   328a8:	mov	r6, r2
   328ac:	bl	26528 <flatcc_builder_enter_user_frame@@Base>
   328b0:	cmp	r0, #0
   328b4:	str	r0, [r7]
   328b8:	bne	328d0 <flatcc_json_parser_prepare_unions@@Base+0x4c>
   328bc:	ldr	r3, [r4, #24]
   328c0:	cmp	r3, #0
   328c4:	beq	328ec <flatcc_json_parser_prepare_unions@@Base+0x68>
   328c8:	mov	r0, r6
   328cc:	pop	{r4, r5, r6, r7, r8, pc}
   328d0:	mov	r1, r0
   328d4:	ldr	r0, [r4]
   328d8:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   328dc:	mov	r6, r8
   328e0:	str	r5, [r0]
   328e4:	mov	r0, r6
   328e8:	pop	{r4, r5, r6, r7, r8, pc}
   328ec:	ldr	r3, [r4, #4]
   328f0:	mov	r2, #33	; 0x21
   328f4:	sub	r3, r8, r3
   328f8:	add	r3, r3, #1
   328fc:	str	r8, [r4, #36]	; 0x24
   32900:	str	r3, [r4, #20]
   32904:	str	r2, [r4, #24]
   32908:	mov	r0, r6
   3290c:	pop	{r4, r5, r6, r7, r8, pc}

00032910 <flatcc_json_parser_finalize_unions@@Base>:
   32910:	push	{r4, r5, r6, r7, r8, lr}
   32914:	mov	r5, r1
   32918:	mov	r4, r0
   3291c:	mov	r1, r3
   32920:	ldr	r0, [r0]
   32924:	mov	r6, r3
   32928:	mov	r7, r2
   3292c:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   32930:	ldr	r3, [r0, #4]
   32934:	cmp	r3, #0
   32938:	moveq	r7, r5
   3293c:	beq	3294c <flatcc_json_parser_finalize_unions@@Base+0x3c>
   32940:	ldr	r3, [r4, #24]
   32944:	cmp	r3, #0
   32948:	beq	32960 <flatcc_json_parser_finalize_unions@@Base+0x50>
   3294c:	mov	r1, r6
   32950:	ldr	r0, [r4]
   32954:	bl	265ec <flatcc_builder_exit_user_frame_at@@Base>
   32958:	mov	r0, r7
   3295c:	pop	{r4, r5, r6, r7, r8, pc}
   32960:	ldr	r3, [r4, #4]
   32964:	mov	r2, #27
   32968:	sub	r3, r5, r3
   3296c:	add	r3, r3, #1
   32970:	str	r5, [r4, #36]	; 0x24
   32974:	str	r3, [r4, #20]
   32978:	str	r2, [r4, #24]
   3297c:	b	3294c <flatcc_json_parser_finalize_unions@@Base+0x3c>

00032980 <flatcc_json_parser_union@@Base>:
   32980:	push	{r4, r5, r6, r7, r8, lr}
   32984:	sub	sp, sp, #16
   32988:	mov	r5, r0
   3298c:	mov	r8, r1
   32990:	ldr	r0, [r0]
   32994:	ldr	r1, [sp, #44]	; 0x2c
   32998:	mov	r4, r3
   3299c:	mov	r6, r2
   329a0:	ldrh	r7, [sp, #40]	; 0x28
   329a4:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   329a8:	add	r4, r4, r4, lsl #1
   329ac:	add	r4, r0, r4, lsl #3
   329b0:	ldr	r3, [r4, #8]
   329b4:	cmp	r3, #0
   329b8:	beq	32a04 <flatcc_json_parser_union@@Base+0x84>
   329bc:	ldr	r3, [r5, #24]
   329c0:	cmp	r3, #0
   329c4:	beq	329d8 <flatcc_json_parser_union@@Base+0x58>
   329c8:	mov	r4, r6
   329cc:	mov	r0, r4
   329d0:	add	sp, sp, #16
   329d4:	pop	{r4, r5, r6, r7, r8, pc}
   329d8:	ldr	r3, [r5, #4]
   329dc:	mov	r2, #28
   329e0:	sub	r3, r8, r3
   329e4:	add	r3, r3, #1
   329e8:	mov	r4, r6
   329ec:	mov	r0, r4
   329f0:	str	r8, [r5, #36]	; 0x24
   329f4:	str	r3, [r5, #20]
   329f8:	str	r2, [r5, #24]
   329fc:	add	sp, sp, #16
   32a00:	pop	{r4, r5, r6, r7, r8, pc}
   32a04:	ldrb	r3, [r4, #20]
   32a08:	cmp	r3, #0
   32a0c:	beq	32ab8 <flatcc_json_parser_union@@Base+0x138>
   32a10:	ldrb	r3, [r4, #21]
   32a14:	cmp	r3, #0
   32a18:	strb	r3, [sp, #8]
   32a1c:	bne	32a38 <flatcc_json_parser_union@@Base+0xb8>
   32a20:	ldr	r3, [r5, #24]
   32a24:	cmp	r3, #0
   32a28:	bne	329c8 <flatcc_json_parser_union@@Base+0x48>
   32a2c:	ldr	r3, [r5, #4]
   32a30:	mov	r2, #25
   32a34:	b	329e0 <flatcc_json_parser_union@@Base+0x60>
   32a38:	ldr	r2, [r0, #4]
   32a3c:	add	ip, sp, #12
   32a40:	sub	r2, r2, #1
   32a44:	str	r2, [r0, #4]
   32a48:	mov	r1, r8
   32a4c:	str	ip, [sp]
   32a50:	mov	r2, r6
   32a54:	mov	r0, r5
   32a58:	ldr	ip, [sp, #48]	; 0x30
   32a5c:	blx	ip
   32a60:	add	r3, sp, #8
   32a64:	cmp	r6, r0
   32a68:	mov	r4, r0
   32a6c:	beq	329cc <flatcc_json_parser_union@@Base+0x4c>
   32a70:	mov	r1, r7
   32a74:	ldm	r3, {r2, r3}
   32a78:	ldr	r0, [r5]
   32a7c:	bl	2af14 <flatcc_builder_table_add_union@@Base>
   32a80:	cmp	r0, #0
   32a84:	beq	329cc <flatcc_json_parser_union@@Base+0x4c>
   32a88:	ldr	r3, [r5, #24]
   32a8c:	cmp	r3, #0
   32a90:	bne	329c8 <flatcc_json_parser_union@@Base+0x48>
   32a94:	ldr	r3, [r5, #4]
   32a98:	mov	r2, #28
   32a9c:	sub	r3, r4, r3
   32aa0:	add	r3, r3, #1
   32aa4:	str	r4, [r5, #36]	; 0x24
   32aa8:	str	r3, [r5, #20]
   32aac:	mov	r4, r6
   32ab0:	str	r2, [r5, #24]
   32ab4:	b	329cc <flatcc_json_parser_union@@Base+0x4c>
   32ab8:	ldr	r3, [r0, #4]
   32abc:	ldr	lr, [r5, #16]
   32ac0:	ldr	ip, [r5, #4]
   32ac4:	add	r3, r3, #1
   32ac8:	str	r3, [r0, #4]
   32acc:	mov	r2, r6
   32ad0:	str	lr, [r4, #16]
   32ad4:	str	ip, [r4, #12]
   32ad8:	str	r8, [r4, #8]
   32adc:	mov	r1, r8
   32ae0:	mov	r0, r5
   32ae4:	bl	30128 <flatcc_json_parser_generic_json@@Base>
   32ae8:	mov	r4, r0
   32aec:	b	329cc <flatcc_json_parser_union@@Base+0x4c>

00032af0 <flatcc_json_parser_union_type@@Base>:
   32af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32af4:	sub	sp, sp, #36	; 0x24
   32af8:	mov	sl, r3
   32afc:	ldrh	r3, [sp, #72]	; 0x48
   32b00:	mov	r4, r0
   32b04:	mov	r9, r1
   32b08:	ldr	r0, [r0]
   32b0c:	ldr	r1, [sp, #76]	; 0x4c
   32b10:	mov	r5, r2
   32b14:	str	r3, [sp, #16]
   32b18:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   32b1c:	add	sl, sl, sl, lsl #1
   32b20:	lsl	r2, sl, #3
   32b24:	str	r2, [sp, #12]
   32b28:	add	r3, r0, #8
   32b2c:	add	r6, r3, r2
   32b30:	str	r3, [sp, #8]
   32b34:	ldrb	r3, [r6, #12]
   32b38:	cmp	r3, #0
   32b3c:	beq	32b5c <flatcc_json_parser_union_type@@Base+0x6c>
   32b40:	ldr	r3, [r4, #24]
   32b44:	cmp	r3, #0
   32b48:	beq	32d14 <flatcc_json_parser_union_type@@Base+0x224>
   32b4c:	mov	r7, r5
   32b50:	mov	r0, r7
   32b54:	add	sp, sp, #36	; 0x24
   32b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b5c:	mov	r2, #1
   32b60:	cmp	r9, r5
   32b64:	mov	r8, r0
   32b68:	strb	r3, [r6, #13]
   32b6c:	strb	r2, [r6, #12]
   32b70:	beq	32d40 <flatcc_json_parser_union_type@@Base+0x250>
   32b74:	ldrb	r3, [r9]
   32b78:	str	r3, [sp, #20]
   32b7c:	sub	r3, r3, #45	; 0x2d
   32b80:	clz	r3, r3
   32b84:	lsr	r3, r3, #5
   32b88:	add	r7, r9, r3
   32b8c:	cmp	r5, r7
   32b90:	beq	32de4 <flatcc_json_parser_union_type@@Base+0x2f4>
   32b94:	ldrb	ip, [r9, r3]
   32b98:	sub	r3, ip, #48	; 0x30
   32b9c:	cmp	r3, #9
   32ba0:	bhi	32d68 <flatcc_json_parser_union_type@@Base+0x278>
   32ba4:	uxtb	sl, ip
   32ba8:	mov	fp, #0
   32bac:	subs	sl, sl, #48	; 0x30
   32bb0:	add	r1, r7, r2
   32bb4:	sbc	fp, fp, #0
   32bb8:	mov	lr, #10
   32bbc:	b	32c04 <flatcc_json_parser_union_type@@Base+0x114>
   32bc0:	mov	r0, r1
   32bc4:	ldrb	ip, [r0], #1
   32bc8:	sub	r3, ip, #48	; 0x30
   32bcc:	cmp	r3, #9
   32bd0:	bhi	32d70 <flatcc_json_parser_union_type@@Base+0x280>
   32bd4:	umull	r2, r3, sl, lr
   32bd8:	mla	r3, lr, fp, r3
   32bdc:	subs	r2, r2, #48	; 0x30
   32be0:	sbc	r3, r3, #0
   32be4:	adds	r2, r2, ip
   32be8:	adc	r3, r3, #0
   32bec:	cmp	r3, fp
   32bf0:	cmpeq	r2, sl
   32bf4:	bcc	32df0 <flatcc_json_parser_union_type@@Base+0x300>
   32bf8:	mov	r1, r0
   32bfc:	mov	sl, r2
   32c00:	mov	fp, r3
   32c04:	cmp	r1, r5
   32c08:	mov	r7, r1
   32c0c:	bne	32bc0 <flatcc_json_parser_union_type@@Base+0xd0>
   32c10:	ldr	r3, [sp, #20]
   32c14:	cmp	r3, #45	; 0x2d
   32c18:	beq	32da8 <flatcc_json_parser_union_type@@Base+0x2b8>
   32c1c:	cmp	fp, #0
   32c20:	cmpeq	sl, #255	; 0xff
   32c24:	bls	32e10 <flatcc_json_parser_union_type@@Base+0x320>
   32c28:	ldr	r3, [r4, #24]
   32c2c:	cmp	r3, #0
   32c30:	bne	32da0 <flatcc_json_parser_union_type@@Base+0x2b0>
   32c34:	ldr	r3, [r4, #4]
   32c38:	str	r7, [r4, #36]	; 0x24
   32c3c:	sub	r3, r7, r3
   32c40:	mov	r7, r5
   32c44:	add	r3, r3, #1
   32c48:	mov	r2, #7
   32c4c:	str	r3, [r4, #20]
   32c50:	str	r2, [r4, #24]
   32c54:	ldr	r3, [sp, #8]
   32c58:	ldr	r2, [sp, #12]
   32c5c:	ldr	r1, [r3, r2]
   32c60:	cmp	r1, #0
   32c64:	beq	32e20 <flatcc_json_parser_union_type@@Base+0x330>
   32c68:	ldr	r3, [r8, #4]
   32c6c:	cmp	r3, #0
   32c70:	beq	32e78 <flatcc_json_parser_union_type@@Base+0x388>
   32c74:	ldr	r0, [r6, #8]
   32c78:	ldr	r2, [r6, #4]
   32c7c:	sub	r3, r3, #1
   32c80:	str	r3, [r8, #4]
   32c84:	ldr	r9, [r4, #16]
   32c88:	ldr	r8, [r4, #4]
   32c8c:	str	r0, [r4, #16]
   32c90:	str	r2, [r4, #4]
   32c94:	ldrb	ip, [r6, #13]
   32c98:	add	r6, sp, #32
   32c9c:	add	r2, sp, #28
   32ca0:	str	r2, [sp]
   32ca4:	mov	r3, ip
   32ca8:	strb	ip, [r6, #-8]!
   32cac:	mov	r2, r5
   32cb0:	mov	r0, r4
   32cb4:	ldr	ip, [sp, #84]	; 0x54
   32cb8:	blx	ip
   32cbc:	cmp	r5, r0
   32cc0:	beq	32b4c <flatcc_json_parser_union_type@@Base+0x5c>
   32cc4:	ldr	r1, [sp, #16]
   32cc8:	ldm	r6, {r2, r3}
   32ccc:	ldr	r0, [r4]
   32cd0:	bl	2af14 <flatcc_builder_table_add_union@@Base>
   32cd4:	cmp	r0, #0
   32cd8:	streq	r9, [r4, #16]
   32cdc:	streq	r8, [r4, #4]
   32ce0:	beq	32b50 <flatcc_json_parser_union_type@@Base+0x60>
   32ce4:	ldr	r3, [r4, #24]
   32ce8:	cmp	r3, #0
   32cec:	bne	32b4c <flatcc_json_parser_union_type@@Base+0x5c>
   32cf0:	ldr	r3, [r4, #4]
   32cf4:	mov	r2, #28
   32cf8:	sub	r3, r7, r3
   32cfc:	add	r3, r3, #1
   32d00:	str	r7, [r4, #36]	; 0x24
   32d04:	str	r3, [r4, #20]
   32d08:	mov	r7, r5
   32d0c:	str	r2, [r4, #24]
   32d10:	b	32b50 <flatcc_json_parser_union_type@@Base+0x60>
   32d14:	ldr	r3, [r4, #4]
   32d18:	mov	r2, #28
   32d1c:	sub	r3, r9, r3
   32d20:	add	r3, r3, #1
   32d24:	mov	r7, r5
   32d28:	mov	r0, r7
   32d2c:	str	r9, [r4, #36]	; 0x24
   32d30:	str	r3, [r4, #20]
   32d34:	str	r2, [r4, #24]
   32d38:	add	sp, sp, #36	; 0x24
   32d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d40:	mov	r7, r5
   32d44:	add	r3, r6, #13
   32d48:	mov	r1, r7
   32d4c:	str	r3, [sp]
   32d50:	mov	r2, r5
   32d54:	ldr	r3, [sp, #80]	; 0x50
   32d58:	mov	r0, r4
   32d5c:	bl	2d400 <flatcc_verify_union_vector_field@@Base+0x2b0>
   32d60:	mov	r7, r0
   32d64:	b	32c54 <flatcc_json_parser_union_type@@Base+0x164>
   32d68:	mov	sl, #0
   32d6c:	mov	fp, #0
   32d70:	cmp	r9, r7
   32d74:	beq	32d44 <flatcc_json_parser_union_type@@Base+0x254>
   32d78:	and	r3, ip, #223	; 0xdf
   32d7c:	cmp	ip, #46	; 0x2e
   32d80:	cmpne	r3, #69	; 0x45
   32d84:	bne	32c10 <flatcc_json_parser_union_type@@Base+0x120>
   32d88:	ldr	r3, [r4, #24]
   32d8c:	cmp	r3, #0
   32d90:	beq	32e38 <flatcc_json_parser_union_type@@Base+0x348>
   32d94:	ldr	r3, [sp, #20]
   32d98:	cmp	r3, #45	; 0x2d
   32d9c:	bne	32dd4 <flatcc_json_parser_union_type@@Base+0x2e4>
   32da0:	mov	r7, r5
   32da4:	b	32c54 <flatcc_json_parser_union_type@@Base+0x164>
   32da8:	ldr	r3, [r4, #24]
   32dac:	cmp	r3, #0
   32db0:	bne	32da0 <flatcc_json_parser_union_type@@Base+0x2b0>
   32db4:	ldr	r3, [r4, #4]
   32db8:	mov	r2, #8
   32dbc:	sub	r3, r7, r3
   32dc0:	add	r3, r3, #1
   32dc4:	str	r7, [r4, #36]	; 0x24
   32dc8:	str	r3, [r4, #20]
   32dcc:	str	r2, [r4, #24]
   32dd0:	b	32da0 <flatcc_json_parser_union_type@@Base+0x2b0>
   32dd4:	mov	r3, #0
   32dd8:	strb	r3, [r6, #13]
   32ddc:	mov	r7, r5
   32de0:	b	32c54 <flatcc_json_parser_union_type@@Base+0x164>
   32de4:	mov	sl, #0
   32de8:	mov	fp, #0
   32dec:	b	32c10 <flatcc_json_parser_union_type@@Base+0x120>
   32df0:	ldr	r3, [r4, #24]
   32df4:	cmp	r3, #0
   32df8:	beq	32e58 <flatcc_json_parser_union_type@@Base+0x368>
   32dfc:	ldr	r3, [sp, #20]
   32e00:	cmp	r3, #45	; 0x2d
   32e04:	movne	r7, r5
   32e08:	movne	sl, #0
   32e0c:	beq	32da0 <flatcc_json_parser_union_type@@Base+0x2b0>
   32e10:	cmp	r9, r7
   32e14:	strb	sl, [r6, #13]
   32e18:	bne	32c54 <flatcc_json_parser_union_type@@Base+0x164>
   32e1c:	b	32d44 <flatcc_json_parser_union_type@@Base+0x254>
   32e20:	ldrb	r2, [r6, #13]
   32e24:	ldr	r3, [r8, #4]
   32e28:	cmp	r2, #0
   32e2c:	addne	r3, r3, #1
   32e30:	str	r3, [r8, #4]
   32e34:	b	32b50 <flatcc_json_parser_union_type@@Base+0x60>
   32e38:	ldr	r3, [r4, #4]
   32e3c:	mov	r2, #12
   32e40:	sub	r3, r7, r3
   32e44:	add	r3, r3, #1
   32e48:	str	r7, [r4, #36]	; 0x24
   32e4c:	str	r3, [r4, #20]
   32e50:	str	r2, [r4, #24]
   32e54:	b	32dfc <flatcc_json_parser_union_type@@Base+0x30c>
   32e58:	ldr	r3, [r4, #4]
   32e5c:	mov	r2, #8
   32e60:	sub	r3, r1, r3
   32e64:	add	r3, r3, #1
   32e68:	str	r1, [r4, #36]	; 0x24
   32e6c:	str	r3, [r4, #20]
   32e70:	str	r2, [r4, #24]
   32e74:	b	32dfc <flatcc_json_parser_union_type@@Base+0x30c>
   32e78:	ldr	r3, [pc, #12]	; 32e8c <flatcc_json_parser_union_type@@Base+0x39c>
   32e7c:	ldr	r2, [pc, #12]	; 32e90 <flatcc_json_parser_union_type@@Base+0x3a0>
   32e80:	ldr	r1, [pc, #12]	; 32e94 <flatcc_json_parser_union_type@@Base+0x3a4>
   32e84:	ldr	r0, [pc, #12]	; 32e98 <flatcc_json_parser_union_type@@Base+0x3a8>
   32e88:	bl	14618 <__assert_fail@plt>
   32e8c:	ldrdeq	r6, [r4], -r8
   32e90:	andeq	r0, r0, r5, asr #7
   32e94:	andeq	r7, r4, r0, ror r1
   32e98:			; <UNDEFINED> instruction: 0x000471bc

00032e9c <flatcc_json_parser_union_vector@@Base>:
   32e9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32ea0:	mov	r5, r0
   32ea4:	mov	r6, r1
   32ea8:	ldr	r0, [r0]
   32eac:	ldr	r1, [sp, #36]	; 0x24
   32eb0:	mov	r4, r3
   32eb4:	mov	r9, r2
   32eb8:	ldrh	r7, [sp, #32]
   32ebc:	ldr	r8, [sp, #40]	; 0x28
   32ec0:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   32ec4:	add	r3, r4, r4, lsl #1
   32ec8:	lsl	r3, r3, #3
   32ecc:	add	ip, r0, #8
   32ed0:	add	r1, ip, r3
   32ed4:	ldr	r2, [ip, r3]
   32ed8:	cmp	r2, #0
   32edc:	beq	32f18 <flatcc_json_parser_union_vector@@Base+0x7c>
   32ee0:	ldr	r3, [r5, #24]
   32ee4:	cmp	r3, #0
   32ee8:	beq	32ef4 <flatcc_json_parser_union_vector@@Base+0x58>
   32eec:	mov	r0, r9
   32ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32ef4:	ldr	r3, [r5, #4]
   32ef8:	mov	r2, #28
   32efc:	sub	r3, r6, r3
   32f00:	add	r3, r3, #1
   32f04:	str	r6, [r5, #36]	; 0x24
   32f08:	str	r3, [r5, #20]
   32f0c:	str	r2, [r5, #24]
   32f10:	mov	r0, r9
   32f14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32f18:	ldrb	r2, [r1, #12]
   32f1c:	cmp	r2, #0
   32f20:	beq	32f58 <flatcc_json_parser_union_vector@@Base+0xbc>
   32f24:	ldr	r3, [r0, #4]
   32f28:	mov	r2, r9
   32f2c:	sub	r3, r3, #1
   32f30:	str	r3, [r0, #4]
   32f34:	ldr	r3, [r1, #20]
   32f38:	str	r8, [sp, #40]	; 0x28
   32f3c:	str	r7, [sp, #36]	; 0x24
   32f40:	ldr	ip, [r1, #16]
   32f44:	mov	r0, r5
   32f48:	mov	r1, r6
   32f4c:	str	ip, [sp, #32]
   32f50:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   32f54:	b	2d720 <flatcc_verify_union_vector_field@@Base+0x5d0>
   32f58:	ldr	lr, [r0, #4]
   32f5c:	ldr	r4, [r5, #16]
   32f60:	add	lr, lr, #1
   32f64:	str	lr, [r0, #4]
   32f68:	ldr	r0, [r5, #4]
   32f6c:	mov	r2, r9
   32f70:	stmib	r1, {r0, r4}
   32f74:	mov	r1, r6
   32f78:	str	r6, [ip, r3]
   32f7c:	mov	r0, r5
   32f80:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   32f84:	b	30128 <flatcc_json_parser_generic_json@@Base>

00032f88 <flatcc_json_parser_union_type_vector@@Base>:
   32f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f8c:	sub	sp, sp, #44	; 0x2c
   32f90:	mov	r4, r3
   32f94:	ldrh	r3, [sp, #80]	; 0x50
   32f98:	mov	sl, r0
   32f9c:	mov	fp, r1
   32fa0:	ldr	r0, [r0]
   32fa4:	ldr	r1, [sp, #84]	; 0x54
   32fa8:	str	r3, [sp, #24]
   32fac:	mov	r9, r2
   32fb0:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   32fb4:	add	r4, r4, r4, lsl #1
   32fb8:	lsl	r3, r4, #3
   32fbc:	str	r3, [sp, #28]
   32fc0:	add	r0, r0, #8
   32fc4:	add	r3, r0, r3
   32fc8:	str	r3, [sp, #20]
   32fcc:	ldrb	r3, [r3, #12]
   32fd0:	cmp	r3, #0
   32fd4:	beq	32ff4 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   32fd8:	ldr	r3, [sl, #24]
   32fdc:	cmp	r3, #0
   32fe0:	beq	33030 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   32fe4:	mov	r8, r9
   32fe8:	mov	r0, r8
   32fec:	add	sp, sp, #44	; 0x2c
   32ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ff4:	ldr	r3, [sp, #20]
   32ff8:	mov	r2, #1
   32ffc:	mov	r1, r2
   33000:	strb	r2, [r3, #12]
   33004:	mvn	r3, #0
   33008:	ldr	r0, [sl]
   3300c:	bl	280dc <flatcc_builder_start_vector@@Base>
   33010:	cmp	r0, #0
   33014:	beq	3305c <flatcc_json_parser_union_type_vector@@Base+0xd4>
   33018:	ldr	r3, [sl, #24]
   3301c:	cmp	r3, #0
   33020:	bne	32fe4 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   33024:	ldr	r3, [sl, #4]
   33028:	mov	r2, #33	; 0x21
   3302c:	b	33038 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   33030:	ldr	r3, [sl, #4]
   33034:	mov	r2, #28
   33038:	sub	r3, fp, r3
   3303c:	add	r3, r3, #1
   33040:	mov	r8, r9
   33044:	mov	r0, r8
   33048:	str	fp, [sl, #36]	; 0x24
   3304c:	str	r3, [sl, #20]
   33050:	str	r2, [sl, #24]
   33054:	add	sp, sp, #44	; 0x2c
   33058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3305c:	cmp	fp, r9
   33060:	beq	33070 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   33064:	ldrb	r3, [fp]
   33068:	cmp	r3, #91	; 0x5b
   3306c:	beq	331b4 <flatcc_json_parser_union_type_vector@@Base+0x22c>
   33070:	ldr	r3, [sl, #24]
   33074:	cmp	r3, #0
   33078:	beq	33190 <flatcc_json_parser_union_type_vector@@Base+0x208>
   3307c:	mov	r8, r9
   33080:	ldr	r0, [sl]
   33084:	bl	297b4 <flatcc_builder_vector_count@@Base>
   33088:	ldr	r3, [sp, #20]
   3308c:	mov	r1, r0
   33090:	str	r0, [r3, #16]
   33094:	mov	r4, r0
   33098:	ldr	r0, [sl]
   3309c:	bl	26528 <flatcc_builder_enter_user_frame@@Base>
   330a0:	mov	r1, r0
   330a4:	mov	r5, r0
   330a8:	ldr	r0, [sl]
   330ac:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   330b0:	mov	r6, r0
   330b4:	ldr	r0, [sl]
   330b8:	bl	297c0 <flatcc_builder_vector_edit@@Base>
   330bc:	mov	r2, r4
   330c0:	mov	r1, r0
   330c4:	mov	r0, r6
   330c8:	bl	1454c <memcpy@plt>
   330cc:	ldr	r0, [sl]
   330d0:	bl	295bc <flatcc_builder_end_vector@@Base>
   330d4:	subs	r6, r0, #0
   330d8:	bne	330e4 <flatcc_json_parser_union_type_vector@@Base+0x15c>
   330dc:	mov	fp, r8
   330e0:	b	33018 <flatcc_json_parser_union_type_vector@@Base+0x90>
   330e4:	ldr	r3, [sp, #24]
   330e8:	ldr	r0, [sl]
   330ec:	sub	r1, r3, #1
   330f0:	bl	2ad84 <flatcc_builder_table_add_offset@@Base>
   330f4:	cmp	r0, #0
   330f8:	beq	330dc <flatcc_json_parser_union_type_vector@@Base+0x154>
   330fc:	str	r6, [r0]
   33100:	ldr	r1, [sp, #84]	; 0x54
   33104:	ldr	r0, [sl]
   33108:	bl	26658 <flatcc_builder_get_user_frame_ptr@@Base>
   3310c:	ldr	r1, [sp, #28]
   33110:	add	r3, r0, #8
   33114:	add	r2, r3, r1
   33118:	ldr	r1, [r3, r1]
   3311c:	ldr	r3, [r0, #4]
   33120:	cmp	r1, #0
   33124:	addeq	r3, r3, #1
   33128:	str	r5, [r2, #20]
   3312c:	streq	r3, [r0, #4]
   33130:	beq	32fe8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   33134:	cmp	r3, #0
   33138:	beq	33c9c <flatcc_json_parser_union_type_vector@@Base+0xd14>
   3313c:	sub	r3, r3, #1
   33140:	ldmib	r2, {r2, ip}
   33144:	str	r3, [r0, #4]
   33148:	ldr	r0, [sp, #92]	; 0x5c
   3314c:	str	r4, [sp]
   33150:	str	r0, [sp, #8]
   33154:	ldr	r0, [sp, #24]
   33158:	mov	r3, r5
   3315c:	str	r0, [sp, #4]
   33160:	mov	r0, sl
   33164:	ldr	r5, [sl, #16]
   33168:	ldr	r4, [sl, #4]
   3316c:	str	ip, [sl, #16]
   33170:	str	r2, [sl, #4]
   33174:	mov	r2, r9
   33178:	bl	2d720 <flatcc_verify_union_vector_field@@Base+0x5d0>
   3317c:	cmp	r9, r0
   33180:	beq	32fe4 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   33184:	str	r5, [sl, #16]
   33188:	str	r4, [sl, #4]
   3318c:	b	32fe8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   33190:	ldr	r3, [sl, #4]
   33194:	mov	r2, #22
   33198:	sub	r3, fp, r3
   3319c:	add	r3, r3, #1
   331a0:	str	fp, [sl, #36]	; 0x24
   331a4:	str	r3, [sl, #20]
   331a8:	str	r2, [sl, #24]
   331ac:	mov	r8, r9
   331b0:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   331b4:	add	r3, fp, #1
   331b8:	sub	r2, r9, r3
   331bc:	cmp	r2, #1
   331c0:	ble	331d4 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   331c4:	ldrb	r2, [fp, #1]
   331c8:	cmp	r2, #32
   331cc:	bhi	33c28 <flatcc_json_parser_union_type_vector@@Base+0xca0>
   331d0:	beq	33c5c <flatcc_json_parser_union_type_vector@@Base+0xcd4>
   331d4:	mov	r1, #0
   331d8:	cmp	r9, r3
   331dc:	beq	33c20 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   331e0:	ldrb	r2, [r3]
   331e4:	cmp	r2, #32
   331e8:	bne	33a6c <flatcc_json_parser_union_type_vector@@Base+0xae4>
   331ec:	add	r3, r3, #1
   331f0:	b	33200 <flatcc_json_parser_union_type_vector@@Base+0x278>
   331f4:	ldrb	r2, [r3], #1
   331f8:	cmp	r2, #32
   331fc:	bne	33a70 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   33200:	cmp	r9, r3
   33204:	mov	fp, r3
   33208:	bne	331f4 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   3320c:	mov	r5, #0
   33210:	mov	r1, #1
   33214:	ldr	r0, [sl]
   33218:	bl	27570 <flatcc_builder_extend_vector@@Base>
   3321c:	subs	r3, r0, #0
   33220:	str	r3, [sp, #16]
   33224:	beq	33018 <flatcc_json_parser_union_type_vector@@Base+0x90>
   33228:	cmp	r9, fp
   3322c:	strb	r5, [sp, #39]	; 0x27
   33230:	beq	3364c <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   33234:	ldrb	r4, [fp]
   33238:	sub	r3, r4, #45	; 0x2d
   3323c:	clz	r3, r3
   33240:	lsr	r3, r3, #5
   33244:	add	r8, fp, r3
   33248:	cmp	r9, r8
   3324c:	beq	3358c <flatcc_json_parser_union_type_vector@@Base+0x604>
   33250:	ldrb	ip, [fp, r3]
   33254:	sub	r3, ip, #48	; 0x30
   33258:	cmp	r3, #9
   3325c:	bhi	33548 <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   33260:	uxtb	r6, ip
   33264:	mov	r7, #0
   33268:	subs	r6, r6, #48	; 0x30
   3326c:	add	r1, r8, #1
   33270:	sbc	r7, r7, #0
   33274:	mov	lr, #10
   33278:	b	332c0 <flatcc_json_parser_union_type_vector@@Base+0x338>
   3327c:	mov	r0, r1
   33280:	ldrb	ip, [r0], #1
   33284:	sub	r3, ip, #48	; 0x30
   33288:	cmp	r3, #9
   3328c:	bhi	33550 <flatcc_json_parser_union_type_vector@@Base+0x5c8>
   33290:	umull	r2, r3, r6, lr
   33294:	mla	r3, lr, r7, r3
   33298:	subs	r2, r2, #48	; 0x30
   3329c:	sbc	r3, r3, #0
   332a0:	adds	r2, r2, ip
   332a4:	adc	r3, r3, #0
   332a8:	cmp	r3, r7
   332ac:	cmpeq	r2, r6
   332b0:	bcc	335ec <flatcc_json_parser_union_type_vector@@Base+0x664>
   332b4:	mov	r1, r0
   332b8:	mov	r6, r2
   332bc:	mov	r7, r3
   332c0:	cmp	r1, r9
   332c4:	mov	r8, r1
   332c8:	bne	3327c <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   332cc:	cmp	r4, #45	; 0x2d
   332d0:	beq	33598 <flatcc_json_parser_union_type_vector@@Base+0x610>
   332d4:	cmp	r7, #0
   332d8:	cmpeq	r6, #255	; 0xff
   332dc:	bhi	33620 <flatcc_json_parser_union_type_vector@@Base+0x698>
   332e0:	uxtb	r0, r6
   332e4:	cmp	r8, fp
   332e8:	strb	r0, [sp, #39]	; 0x27
   332ec:	beq	3364c <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   332f0:	ldr	r3, [sp, #96]	; 0x60
   332f4:	blx	r3
   332f8:	cmp	r0, #0
   332fc:	ldrbne	r2, [sp, #39]	; 0x27
   33300:	bne	33318 <flatcc_json_parser_union_type_vector@@Base+0x390>
   33304:	ldr	r3, [sl, #8]
   33308:	tst	r3, #1
   3330c:	beq	33a20 <flatcc_json_parser_union_type_vector@@Base+0xa98>
   33310:	mov	r2, #0
   33314:	strb	r5, [sp, #39]	; 0x27
   33318:	sub	r3, r9, r8
   3331c:	cmp	r3, #1
   33320:	ldr	r3, [sp, #16]
   33324:	strb	r2, [r3]
   33328:	ble	3333c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   3332c:	ldrb	r2, [r8]
   33330:	cmp	r2, #32
   33334:	bhi	334b4 <flatcc_json_parser_union_type_vector@@Base+0x52c>
   33338:	beq	334a4 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   3333c:	cmp	r9, r8
   33340:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33344:	ldrb	r2, [r8]
   33348:	cmp	r2, #32
   3334c:	bne	3336c <flatcc_json_parser_union_type_vector@@Base+0x3e4>
   33350:	add	r3, r8, #1
   33354:	cmp	r9, r3
   33358:	mov	r8, r3
   3335c:	beq	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33360:	ldrb	r2, [r3], #1
   33364:	cmp	r2, #32
   33368:	beq	33354 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   3336c:	cmp	r2, #32
   33370:	bhi	3342c <flatcc_json_parser_union_type_vector@@Base+0x4a4>
   33374:	sub	r2, r2, #9
   33378:	cmp	r2, #23
   3337c:	ldrls	pc, [pc, r2, lsl #2]
   33380:	b	33474 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   33384:	andeq	r3, r3, ip, ror #8
   33388:	andeq	r3, r3, r4, lsl #8
   3338c:	andeq	r3, r3, r4, ror r4
   33390:	andeq	r3, r3, r4, ror r4
   33394:	andeq	r3, r3, r4, ror #7
   33398:	andeq	r3, r3, r4, ror r4
   3339c:	andeq	r3, r3, r4, ror r4
   333a0:	andeq	r3, r3, r4, ror r4
   333a4:	andeq	r3, r3, r4, ror r4
   333a8:	andeq	r3, r3, r4, ror r4
   333ac:	andeq	r3, r3, r4, ror r4
   333b0:	andeq	r3, r3, r4, ror r4
   333b4:	andeq	r3, r3, r4, ror r4
   333b8:	andeq	r3, r3, r4, ror r4
   333bc:	andeq	r3, r3, r4, ror r4
   333c0:	andeq	r3, r3, r4, ror r4
   333c4:	andeq	r3, r3, r4, ror r4
   333c8:	andeq	r3, r3, r4, ror r4
   333cc:	andeq	r3, r3, r4, ror r4
   333d0:	andeq	r3, r3, r4, ror r4
   333d4:	andeq	r3, r3, r4, ror r4
   333d8:	andeq	r3, r3, r4, ror r4
   333dc:	andeq	r3, r3, r4, ror r4
   333e0:	andeq	r3, r3, ip, lsr r3
   333e4:	sub	r3, r9, r8
   333e8:	cmp	r3, #1
   333ec:	movle	r3, r5
   333f0:	ldrbgt	r3, [r8, #1]
   333f4:	subgt	r3, r3, #10
   333f8:	clzgt	r3, r3
   333fc:	lsrgt	r3, r3, #5
   33400:	add	r8, r8, r3
   33404:	ldr	r3, [sl, #16]
   33408:	add	r8, r8, #1
   3340c:	add	r3, r3, #1
   33410:	str	r8, [sl, #4]
   33414:	str	r3, [sl, #16]
   33418:	cmp	r9, r8
   3341c:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33420:	ldrb	r2, [r8]
   33424:	cmp	r2, #32
   33428:	bls	33374 <flatcc_json_parser_union_type_vector@@Base+0x3ec>
   3342c:	cmp	r2, #44	; 0x2c
   33430:	beq	334c4 <flatcc_json_parser_union_type_vector@@Base+0x53c>
   33434:	cmp	r2, #93	; 0x5d
   33438:	beq	336a8 <flatcc_json_parser_union_type_vector@@Base+0x720>
   3343c:	ldr	r3, [sl, #24]
   33440:	cmp	r3, #0
   33444:	bne	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33448:	ldr	r3, [sl, #4]
   3344c:	str	r8, [sl, #36]	; 0x24
   33450:	sub	r8, r8, r3
   33454:	add	r8, r8, #1
   33458:	mov	r3, #9
   3345c:	str	r8, [sl, #20]
   33460:	str	r3, [sl, #24]
   33464:	mov	r8, r9
   33468:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   3346c:	add	r8, r8, #1
   33470:	b	33418 <flatcc_json_parser_union_type_vector@@Base+0x490>
   33474:	ldr	r3, [sl, #24]
   33478:	cmp	r3, #0
   3347c:	bne	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33480:	ldr	r3, [sl, #4]
   33484:	str	r8, [sl, #36]	; 0x24
   33488:	sub	r3, r8, r3
   3348c:	add	r3, r3, #1
   33490:	mov	r2, #5
   33494:	str	r3, [sl, #20]
   33498:	str	r2, [sl, #24]
   3349c:	mov	r8, r9
   334a0:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   334a4:	ldrb	r2, [r8, #1]
   334a8:	cmp	r2, #32
   334ac:	addhi	r8, r8, #1
   334b0:	bls	3333c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   334b4:	cmp	r9, r8
   334b8:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   334bc:	cmp	r2, #44	; 0x2c
   334c0:	bne	33434 <flatcc_json_parser_union_type_vector@@Base+0x4ac>
   334c4:	add	fp, r8, #1
   334c8:	sub	r3, r9, fp
   334cc:	cmp	r3, #1
   334d0:	ble	334e4 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   334d4:	ldrb	r2, [r8, #1]
   334d8:	cmp	r2, #32
   334dc:	bhi	33a10 <flatcc_json_parser_union_type_vector@@Base+0xa88>
   334e0:	beq	33a00 <flatcc_json_parser_union_type_vector@@Base+0xa78>
   334e4:	cmp	r9, fp
   334e8:	beq	33a18 <flatcc_json_parser_union_type_vector@@Base+0xa90>
   334ec:	ldrb	r2, [fp]
   334f0:	cmp	r2, #32
   334f4:	bne	337ec <flatcc_json_parser_union_type_vector@@Base+0x864>
   334f8:	add	r3, fp, #1
   334fc:	b	3350c <flatcc_json_parser_union_type_vector@@Base+0x584>
   33500:	ldrb	r2, [r3], #1
   33504:	cmp	r2, #32
   33508:	bne	337ec <flatcc_json_parser_union_type_vector@@Base+0x864>
   3350c:	cmp	r3, r9
   33510:	mov	fp, r3
   33514:	bne	33500 <flatcc_json_parser_union_type_vector@@Base+0x578>
   33518:	ldr	r3, [sl, #24]
   3351c:	cmp	r3, #0
   33520:	bne	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33524:	ldr	r3, [sl, #4]
   33528:	mov	r2, #9
   3352c:	sub	r3, fp, r3
   33530:	add	r3, r3, #1
   33534:	str	fp, [sl, #36]	; 0x24
   33538:	str	r3, [sl, #20]
   3353c:	str	r2, [sl, #24]
   33540:	mov	r8, r9
   33544:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33548:	mov	r6, #0
   3354c:	mov	r7, r6
   33550:	cmp	r8, fp
   33554:	beq	3364c <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   33558:	and	r3, ip, #223	; 0xdf
   3355c:	cmp	ip, #46	; 0x2e
   33560:	cmpne	r3, #69	; 0x45
   33564:	bne	332cc <flatcc_json_parser_union_type_vector@@Base+0x344>
   33568:	ldr	r3, [sl, #24]
   3356c:	cmp	r3, #0
   33570:	beq	33680 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   33574:	cmp	r4, #45	; 0x2d
   33578:	beq	335c0 <flatcc_json_parser_union_type_vector@@Base+0x638>
   3357c:	strb	r5, [sp, #39]	; 0x27
   33580:	mov	r8, r9
   33584:	mov	r0, #0
   33588:	b	332f0 <flatcc_json_parser_union_type_vector@@Base+0x368>
   3358c:	cmp	r4, #45	; 0x2d
   33590:	movne	r6, #0
   33594:	bne	332e0 <flatcc_json_parser_union_type_vector@@Base+0x358>
   33598:	ldr	r3, [sl, #24]
   3359c:	cmp	r3, #0
   335a0:	bne	335c0 <flatcc_json_parser_union_type_vector@@Base+0x638>
   335a4:	ldr	r3, [sl, #4]
   335a8:	mov	r2, #8
   335ac:	sub	r3, r8, r3
   335b0:	add	r3, r3, #1
   335b4:	str	r2, [sl, #24]
   335b8:	str	r8, [sl, #36]	; 0x24
   335bc:	str	r3, [sl, #20]
   335c0:	mov	r0, r5
   335c4:	ldr	r3, [sp, #96]	; 0x60
   335c8:	blx	r3
   335cc:	cmp	r0, #0
   335d0:	moveq	r8, r9
   335d4:	beq	33304 <flatcc_json_parser_union_type_vector@@Base+0x37c>
   335d8:	ldrb	r3, [sp, #39]	; 0x27
   335dc:	ldr	r2, [sp, #16]
   335e0:	mov	r8, r9
   335e4:	strb	r3, [r2]
   335e8:	b	3333c <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   335ec:	ldr	r3, [sl, #24]
   335f0:	cmp	r3, #0
   335f4:	bne	33574 <flatcc_json_parser_union_type_vector@@Base+0x5ec>
   335f8:	ldr	r3, [sl, #4]
   335fc:	mov	r2, #8
   33600:	sub	r3, r1, r3
   33604:	add	r3, r3, #1
   33608:	cmp	r4, #45	; 0x2d
   3360c:	str	r2, [sl, #24]
   33610:	str	r1, [sl, #36]	; 0x24
   33614:	str	r3, [sl, #20]
   33618:	beq	335c0 <flatcc_json_parser_union_type_vector@@Base+0x638>
   3361c:	b	3357c <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   33620:	ldr	r3, [sl, #24]
   33624:	cmp	r3, #0
   33628:	bne	335c0 <flatcc_json_parser_union_type_vector@@Base+0x638>
   3362c:	ldr	r3, [sl, #4]
   33630:	mov	r2, #7
   33634:	sub	r3, r8, r3
   33638:	add	r3, r3, #1
   3363c:	str	r8, [sl, #36]	; 0x24
   33640:	str	r3, [sl, #20]
   33644:	str	r2, [sl, #24]
   33648:	b	335c0 <flatcc_json_parser_union_type_vector@@Base+0x638>
   3364c:	add	r3, sp, #39	; 0x27
   33650:	str	r3, [sp]
   33654:	mov	r2, r9
   33658:	ldr	r3, [sp, #88]	; 0x58
   3365c:	mov	r1, fp
   33660:	mov	r0, sl
   33664:	bl	2d400 <flatcc_verify_union_vector_field@@Base+0x2b0>
   33668:	cmp	r9, r0
   3366c:	cmpne	r0, fp
   33670:	mov	r8, r0
   33674:	beq	330dc <flatcc_json_parser_union_type_vector@@Base+0x154>
   33678:	ldrb	r0, [sp, #39]	; 0x27
   3367c:	b	332f0 <flatcc_json_parser_union_type_vector@@Base+0x368>
   33680:	ldr	r3, [sl, #4]
   33684:	mov	r2, #12
   33688:	sub	r3, r8, r3
   3368c:	add	r3, r3, #1
   33690:	cmp	r4, #45	; 0x2d
   33694:	str	r2, [sl, #24]
   33698:	str	r8, [sl, #36]	; 0x24
   3369c:	str	r3, [sl, #20]
   336a0:	beq	335c0 <flatcc_json_parser_union_type_vector@@Base+0x638>
   336a4:	b	3357c <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   336a8:	add	r3, r8, #1
   336ac:	sub	r2, r9, r3
   336b0:	cmp	r2, #1
   336b4:	ble	336c8 <flatcc_json_parser_union_type_vector@@Base+0x740>
   336b8:	ldrb	r2, [r8, #1]
   336bc:	cmp	r2, #32
   336c0:	bhi	337c0 <flatcc_json_parser_union_type_vector@@Base+0x838>
   336c4:	beq	33a50 <flatcc_json_parser_union_type_vector@@Base+0xac8>
   336c8:	mov	r1, #0
   336cc:	cmp	r9, r3
   336d0:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   336d4:	ldrb	r2, [r3]
   336d8:	cmp	r2, #32
   336dc:	bne	33a64 <flatcc_json_parser_union_type_vector@@Base+0xadc>
   336e0:	add	r3, r3, #1
   336e4:	cmp	r3, r9
   336e8:	mov	r8, r3
   336ec:	beq	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   336f0:	ldrb	r2, [r3], #1
   336f4:	cmp	r2, #32
   336f8:	beq	336e4 <flatcc_json_parser_union_type_vector@@Base+0x75c>
   336fc:	cmp	r2, #32
   33700:	bhi	33c70 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   33704:	mov	r3, r8
   33708:	sub	r2, r2, #9
   3370c:	cmp	r2, #23
   33710:	ldrls	pc, [pc, r2, lsl #2]
   33714:	b	337d0 <flatcc_json_parser_union_type_vector@@Base+0x848>
   33718:	andeq	r3, r3, r8, asr #15
   3371c:	muleq	r3, r8, r7
   33720:	ldrdeq	r3, [r3], -r0
   33724:	ldrdeq	r3, [r3], -r0
   33728:	andeq	r3, r3, r8, ror r7
   3372c:	ldrdeq	r3, [r3], -r0
   33730:	ldrdeq	r3, [r3], -r0
   33734:	ldrdeq	r3, [r3], -r0
   33738:	ldrdeq	r3, [r3], -r0
   3373c:	ldrdeq	r3, [r3], -r0
   33740:	ldrdeq	r3, [r3], -r0
   33744:	ldrdeq	r3, [r3], -r0
   33748:	ldrdeq	r3, [r3], -r0
   3374c:	ldrdeq	r3, [r3], -r0
   33750:	ldrdeq	r3, [r3], -r0
   33754:	ldrdeq	r3, [r3], -r0
   33758:	ldrdeq	r3, [r3], -r0
   3375c:	ldrdeq	r3, [r3], -r0
   33760:	ldrdeq	r3, [r3], -r0
   33764:	ldrdeq	r3, [r3], -r0
   33768:	ldrdeq	r3, [r3], -r0
   3376c:	ldrdeq	r3, [r3], -r0
   33770:	ldrdeq	r3, [r3], -r0
   33774:	andeq	r3, r3, ip, asr #13
   33778:	sub	r2, r9, r3
   3377c:	cmp	r2, #1
   33780:	movle	r2, r1
   33784:	ldrbgt	r2, [r3, #1]
   33788:	subgt	r2, r2, #10
   3378c:	clzgt	r2, r2
   33790:	lsrgt	r2, r2, #5
   33794:	add	r3, r3, r2
   33798:	ldr	r2, [sl, #16]
   3379c:	add	r3, r3, #1
   337a0:	add	r2, r2, #1
   337a4:	str	r3, [sl, #4]
   337a8:	str	r2, [sl, #16]
   337ac:	cmp	r9, r3
   337b0:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   337b4:	ldrb	r2, [r3]
   337b8:	cmp	r2, #32
   337bc:	bls	33708 <flatcc_json_parser_union_type_vector@@Base+0x780>
   337c0:	mov	r8, r3
   337c4:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   337c8:	add	r3, r3, #1
   337cc:	b	337ac <flatcc_json_parser_union_type_vector@@Base+0x824>
   337d0:	ldr	r2, [sl, #24]
   337d4:	cmp	r2, #0
   337d8:	bne	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   337dc:	ldr	r2, [sl, #4]
   337e0:	str	r3, [sl, #36]	; 0x24
   337e4:	sub	r3, r3, r2
   337e8:	b	3348c <flatcc_json_parser_union_type_vector@@Base+0x504>
   337ec:	cmp	r2, #32
   337f0:	bhi	338ac <flatcc_json_parser_union_type_vector@@Base+0x924>
   337f4:	sub	r3, r2, #9
   337f8:	cmp	r3, #23
   337fc:	ldrls	pc, [pc, r3, lsl #2]
   33800:	b	33988 <flatcc_json_parser_union_type_vector@@Base+0xa00>
   33804:	andeq	r3, r3, r0, lsl #19
   33808:	andeq	r3, r3, r4, lsl #17
   3380c:	andeq	r3, r3, r8, lsl #19
   33810:	andeq	r3, r3, r8, lsl #19
   33814:	andeq	r3, r3, r4, ror #16
   33818:	andeq	r3, r3, r8, lsl #19
   3381c:	andeq	r3, r3, r8, lsl #19
   33820:	andeq	r3, r3, r8, lsl #19
   33824:	andeq	r3, r3, r8, lsl #19
   33828:	andeq	r3, r3, r8, lsl #19
   3382c:	andeq	r3, r3, r8, lsl #19
   33830:	andeq	r3, r3, r8, lsl #19
   33834:	andeq	r3, r3, r8, lsl #19
   33838:	andeq	r3, r3, r8, lsl #19
   3383c:	andeq	r3, r3, r8, lsl #19
   33840:	andeq	r3, r3, r8, lsl #19
   33844:	andeq	r3, r3, r8, lsl #19
   33848:	andeq	r3, r3, r8, lsl #19
   3384c:	andeq	r3, r3, r8, lsl #19
   33850:	andeq	r3, r3, r8, lsl #19
   33854:	andeq	r3, r3, r8, lsl #19
   33858:	andeq	r3, r3, r8, lsl #19
   3385c:	andeq	r3, r3, r8, lsl #19
   33860:	andeq	r3, r3, r4, ror #9
   33864:	sub	r3, r9, fp
   33868:	cmp	r3, #1
   3386c:	movle	r3, r5
   33870:	ldrbgt	r3, [fp, #1]
   33874:	subgt	r3, r3, #10
   33878:	clzgt	r3, r3
   3387c:	lsrgt	r3, r3, #5
   33880:	add	fp, fp, r3
   33884:	ldr	r3, [sl, #16]
   33888:	add	fp, fp, #1
   3388c:	add	r3, r3, #1
   33890:	str	fp, [sl, #4]
   33894:	str	r3, [sl, #16]
   33898:	cmp	r9, fp
   3389c:	beq	33a18 <flatcc_json_parser_union_type_vector@@Base+0xa90>
   338a0:	ldrb	r2, [fp]
   338a4:	cmp	r2, #32
   338a8:	bls	337f4 <flatcc_json_parser_union_type_vector@@Base+0x86c>
   338ac:	cmp	r2, #93	; 0x5d
   338b0:	bne	33210 <flatcc_json_parser_union_type_vector@@Base+0x288>
   338b4:	add	r8, fp, #1
   338b8:	sub	r3, r9, r8
   338bc:	cmp	r3, #1
   338c0:	ble	338d4 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   338c4:	ldrb	r3, [fp, #1]
   338c8:	cmp	r3, #32
   338cc:	bhi	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   338d0:	beq	33c78 <flatcc_json_parser_union_type_vector@@Base+0xcf0>
   338d4:	mov	r1, #0
   338d8:	cmp	r9, r8
   338dc:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   338e0:	ldrb	r2, [r8]
   338e4:	cmp	r2, #32
   338e8:	bne	33908 <flatcc_json_parser_union_type_vector@@Base+0x980>
   338ec:	add	r3, r8, #1
   338f0:	cmp	r3, r9
   338f4:	mov	r8, r3
   338f8:	beq	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   338fc:	ldrb	r2, [r3], #1
   33900:	cmp	r2, #32
   33904:	beq	338f0 <flatcc_json_parser_union_type_vector@@Base+0x968>
   33908:	cmp	r2, #32
   3390c:	bhi	33c70 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   33910:	sub	r2, r2, #9
   33914:	cmp	r2, #23
   33918:	ldrls	pc, [pc, r2, lsl #2]
   3391c:	b	33474 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   33920:	strdeq	r3, [r3], -r8
   33924:	ldrdeq	r3, [r3], -r4
   33928:	andeq	r3, r3, r4, ror r4
   3392c:	andeq	r3, r3, r4, ror r4
   33930:			; <UNDEFINED> instruction: 0x000339b4
   33934:	andeq	r3, r3, r4, ror r4
   33938:	andeq	r3, r3, r4, ror r4
   3393c:	andeq	r3, r3, r4, ror r4
   33940:	andeq	r3, r3, r4, ror r4
   33944:	andeq	r3, r3, r4, ror r4
   33948:	andeq	r3, r3, r4, ror r4
   3394c:	andeq	r3, r3, r4, ror r4
   33950:	andeq	r3, r3, r4, ror r4
   33954:	andeq	r3, r3, r4, ror r4
   33958:	andeq	r3, r3, r4, ror r4
   3395c:	andeq	r3, r3, r4, ror r4
   33960:	andeq	r3, r3, r4, ror r4
   33964:	andeq	r3, r3, r4, ror r4
   33968:	andeq	r3, r3, r4, ror r4
   3396c:	andeq	r3, r3, r4, ror r4
   33970:	andeq	r3, r3, r4, ror r4
   33974:	andeq	r3, r3, r4, ror r4
   33978:	andeq	r3, r3, r4, ror r4
   3397c:	ldrdeq	r3, [r3], -r8
   33980:	add	fp, fp, #1
   33984:	b	33898 <flatcc_json_parser_union_type_vector@@Base+0x910>
   33988:	ldr	r3, [sl, #24]
   3398c:	cmp	r3, #0
   33990:	bne	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33994:	ldr	r3, [sl, #4]
   33998:	mov	r2, #5
   3399c:	sub	r3, fp, r3
   339a0:	add	r3, r3, #1
   339a4:	str	fp, [sl, #36]	; 0x24
   339a8:	str	r3, [sl, #20]
   339ac:	str	r2, [sl, #24]
   339b0:	b	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   339b4:	sub	r3, r9, r8
   339b8:	cmp	r3, #1
   339bc:	movle	r3, r1
   339c0:	ldrbgt	r3, [r8, #1]
   339c4:	subgt	r3, r3, #10
   339c8:	clzgt	r3, r3
   339cc:	lsrgt	r3, r3, #5
   339d0:	add	r8, r8, r3
   339d4:	ldr	r3, [sl, #16]
   339d8:	add	r8, r8, #1
   339dc:	add	r3, r3, #1
   339e0:	str	r8, [sl, #4]
   339e4:	str	r3, [sl, #16]
   339e8:	cmp	r9, r8
   339ec:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   339f0:	ldrb	r2, [r8]
   339f4:	b	33908 <flatcc_json_parser_union_type_vector@@Base+0x980>
   339f8:	add	r8, r8, #1
   339fc:	b	339e8 <flatcc_json_parser_union_type_vector@@Base+0xa60>
   33a00:	ldrb	r2, [r8, #2]
   33a04:	cmp	r2, #32
   33a08:	addhi	fp, r8, #2
   33a0c:	bls	334e4 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   33a10:	cmp	r9, fp
   33a14:	bne	338ac <flatcc_json_parser_union_type_vector@@Base+0x924>
   33a18:	mov	fp, r9
   33a1c:	b	33518 <flatcc_json_parser_union_type_vector@@Base+0x590>
   33a20:	ldr	r3, [sl, #24]
   33a24:	cmp	r3, #0
   33a28:	bne	32fe4 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   33a2c:	ldr	r3, [sl, #4]
   33a30:	mov	r2, #15
   33a34:	sub	r3, r8, r3
   33a38:	add	r3, r3, #1
   33a3c:	str	r8, [sl, #36]	; 0x24
   33a40:	str	r3, [sl, #20]
   33a44:	mov	r8, r9
   33a48:	str	r2, [sl, #24]
   33a4c:	b	32fe8 <flatcc_json_parser_union_type_vector@@Base+0x60>
   33a50:	ldrb	r2, [r8, #2]
   33a54:	cmp	r2, #32
   33a58:	addhi	r8, r8, #2
   33a5c:	bls	336c8 <flatcc_json_parser_union_type_vector@@Base+0x740>
   33a60:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33a64:	mov	r8, r3
   33a68:	b	336fc <flatcc_json_parser_union_type_vector@@Base+0x774>
   33a6c:	mov	fp, r3
   33a70:	cmp	r2, #32
   33a74:	bhi	33b38 <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   33a78:	mov	r3, fp
   33a7c:	sub	r2, r2, #9
   33a80:	cmp	r2, #23
   33a84:	ldrls	pc, [pc, r2, lsl #2]
   33a88:	b	33c14 <flatcc_json_parser_union_type_vector@@Base+0xc8c>
   33a8c:	andeq	r3, r3, ip, lsl #24
   33a90:	andeq	r3, r3, ip, lsl #22
   33a94:	andeq	r3, r3, r4, lsl ip
   33a98:	andeq	r3, r3, r4, lsl ip
   33a9c:	andeq	r3, r3, ip, ror #21
   33aa0:	andeq	r3, r3, r4, lsl ip
   33aa4:	andeq	r3, r3, r4, lsl ip
   33aa8:	andeq	r3, r3, r4, lsl ip
   33aac:	andeq	r3, r3, r4, lsl ip
   33ab0:	andeq	r3, r3, r4, lsl ip
   33ab4:	andeq	r3, r3, r4, lsl ip
   33ab8:	andeq	r3, r3, r4, lsl ip
   33abc:	andeq	r3, r3, r4, lsl ip
   33ac0:	andeq	r3, r3, r4, lsl ip
   33ac4:	andeq	r3, r3, r4, lsl ip
   33ac8:	andeq	r3, r3, r4, lsl ip
   33acc:	andeq	r3, r3, r4, lsl ip
   33ad0:	andeq	r3, r3, r4, lsl ip
   33ad4:	andeq	r3, r3, r4, lsl ip
   33ad8:	andeq	r3, r3, r4, lsl ip
   33adc:	andeq	r3, r3, r4, lsl ip
   33ae0:	andeq	r3, r3, r4, lsl ip
   33ae4:	andeq	r3, r3, r4, lsl ip
   33ae8:	ldrdeq	r3, [r3], -r8
   33aec:	sub	r2, r9, r3
   33af0:	cmp	r2, #1
   33af4:	movle	r2, r1
   33af8:	ldrbgt	r2, [r3, #1]
   33afc:	subgt	r2, r2, #10
   33b00:	clzgt	r2, r2
   33b04:	lsrgt	r2, r2, #5
   33b08:	add	r3, r3, r2
   33b0c:	ldr	r2, [sl, #16]
   33b10:	add	r3, r3, #1
   33b14:	add	r2, r2, #1
   33b18:	str	r3, [sl, #4]
   33b1c:	str	r2, [sl, #16]
   33b20:	cmp	r9, r3
   33b24:	beq	33c20 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   33b28:	ldrb	r2, [r3]
   33b2c:	cmp	r2, #32
   33b30:	bls	33a7c <flatcc_json_parser_union_type_vector@@Base+0xaf4>
   33b34:	mov	fp, r3
   33b38:	cmp	r2, #93	; 0x5d
   33b3c:	bne	3320c <flatcc_json_parser_union_type_vector@@Base+0x284>
   33b40:	add	r8, fp, #1
   33b44:	sub	r3, r9, r8
   33b48:	cmp	r3, #1
   33b4c:	ble	33b60 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   33b50:	ldrb	r3, [fp, #1]
   33b54:	cmp	r3, #32
   33b58:	bhi	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33b5c:	beq	33c8c <flatcc_json_parser_union_type_vector@@Base+0xd04>
   33b60:	mov	r1, #0
   33b64:	cmp	r9, r8
   33b68:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33b6c:	ldrb	r3, [r8]
   33b70:	cmp	r3, #32
   33b74:	bne	33b94 <flatcc_json_parser_union_type_vector@@Base+0xc0c>
   33b78:	add	r2, r8, #1
   33b7c:	cmp	r2, r9
   33b80:	mov	r8, r2
   33b84:	beq	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33b88:	ldrb	r3, [r2], #1
   33b8c:	cmp	r3, #32
   33b90:	beq	33b7c <flatcc_json_parser_union_type_vector@@Base+0xbf4>
   33b94:	cmp	r3, #32
   33b98:	bhi	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33b9c:	sub	r3, r3, #9
   33ba0:	cmp	r3, #23
   33ba4:	ldrls	pc, [pc, r3, lsl #2]
   33ba8:	b	33474 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   33bac:	strdeq	r3, [r3], -ip
   33bb0:	ldrdeq	r3, [r3], -r0
   33bb4:	andeq	r3, r3, r4, ror r4
   33bb8:	andeq	r3, r3, r4, ror r4
   33bbc:			; <UNDEFINED> instruction: 0x00033cb0
   33bc0:	andeq	r3, r3, r4, ror r4
   33bc4:	andeq	r3, r3, r4, ror r4
   33bc8:	andeq	r3, r3, r4, ror r4
   33bcc:	andeq	r3, r3, r4, ror r4
   33bd0:	andeq	r3, r3, r4, ror r4
   33bd4:	andeq	r3, r3, r4, ror r4
   33bd8:	andeq	r3, r3, r4, ror r4
   33bdc:	andeq	r3, r3, r4, ror r4
   33be0:	andeq	r3, r3, r4, ror r4
   33be4:	andeq	r3, r3, r4, ror r4
   33be8:	andeq	r3, r3, r4, ror r4
   33bec:	andeq	r3, r3, r4, ror r4
   33bf0:	andeq	r3, r3, r4, ror r4
   33bf4:	andeq	r3, r3, r4, ror r4
   33bf8:	andeq	r3, r3, r4, ror r4
   33bfc:	andeq	r3, r3, r4, ror r4
   33c00:	andeq	r3, r3, r4, ror r4
   33c04:	andeq	r3, r3, r4, ror r4
   33c08:	andeq	r3, r3, r4, ror #22
   33c0c:	add	r3, r3, #1
   33c10:	b	33b20 <flatcc_json_parser_union_type_vector@@Base+0xb98>
   33c14:	ldr	r2, [sl, #24]
   33c18:	cmp	r2, #0
   33c1c:	beq	33c38 <flatcc_json_parser_union_type_vector@@Base+0xcb0>
   33c20:	mov	fp, r9
   33c24:	b	3320c <flatcc_json_parser_union_type_vector@@Base+0x284>
   33c28:	mov	fp, r3
   33c2c:	cmp	r9, fp
   33c30:	bne	33b38 <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   33c34:	b	3320c <flatcc_json_parser_union_type_vector@@Base+0x284>
   33c38:	ldr	r2, [sl, #4]
   33c3c:	str	r3, [sl, #36]	; 0x24
   33c40:	sub	r3, r3, r2
   33c44:	add	r3, r3, #1
   33c48:	mov	r2, #5
   33c4c:	str	r3, [sl, #20]
   33c50:	str	r2, [sl, #24]
   33c54:	mov	fp, r9
   33c58:	b	3320c <flatcc_json_parser_union_type_vector@@Base+0x284>
   33c5c:	ldrb	r2, [fp, #2]
   33c60:	cmp	r2, #32
   33c64:	addhi	fp, fp, #2
   33c68:	bls	331d4 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   33c6c:	b	33c2c <flatcc_json_parser_union_type_vector@@Base+0xca4>
   33c70:	mov	r3, r8
   33c74:	b	337c0 <flatcc_json_parser_union_type_vector@@Base+0x838>
   33c78:	ldrb	r3, [fp, #2]
   33c7c:	cmp	r3, #32
   33c80:	bls	338d4 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   33c84:	add	r8, fp, #2
   33c88:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33c8c:	ldrb	r3, [fp, #2]
   33c90:	cmp	r3, #32
   33c94:	bls	33b60 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   33c98:	b	33c84 <flatcc_json_parser_union_type_vector@@Base+0xcfc>
   33c9c:	ldr	r3, [pc, #96]	; 33d04 <flatcc_json_parser_union_type_vector@@Base+0xd7c>
   33ca0:	ldr	r2, [pc, #96]	; 33d08 <flatcc_json_parser_union_type_vector@@Base+0xd80>
   33ca4:	ldr	r1, [pc, #96]	; 33d0c <flatcc_json_parser_union_type_vector@@Base+0xd84>
   33ca8:	ldr	r0, [pc, #96]	; 33d10 <flatcc_json_parser_union_type_vector@@Base+0xd88>
   33cac:	bl	14618 <__assert_fail@plt>
   33cb0:	sub	r3, r9, r8
   33cb4:	cmp	r3, #1
   33cb8:	movle	r3, r1
   33cbc:	ldrbgt	r3, [r8, #1]
   33cc0:	subgt	r3, r3, #10
   33cc4:	clzgt	r3, r3
   33cc8:	lsrgt	r3, r3, #5
   33ccc:	add	r8, r8, r3
   33cd0:	ldr	r3, [sl, #16]
   33cd4:	add	r8, r8, #1
   33cd8:	add	r3, r3, #1
   33cdc:	str	r8, [sl, #4]
   33ce0:	str	r3, [sl, #16]
   33ce4:	cmp	r9, r8
   33ce8:	beq	3307c <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33cec:	ldrb	r3, [r8]
   33cf0:	cmp	r3, #32
   33cf4:	bls	33b9c <flatcc_json_parser_union_type_vector@@Base+0xc14>
   33cf8:	b	33080 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33cfc:	add	r8, r8, #1
   33d00:	b	33ce4 <flatcc_json_parser_union_type_vector@@Base+0xd5c>
   33d04:	strdeq	r6, [r4], -r8
   33d08:	andeq	r0, r0, r2, ror #8
   33d0c:	andeq	r7, r4, r0, ror r1
   33d10:			; <UNDEFINED> instruction: 0x000471bc

00033d14 <flatcc_json_parser_table_as_root@@Base>:
   33d14:	push	{r4, r5, r6, r7, r8, r9, lr}
   33d18:	sub	sp, sp, #52	; 0x34
   33d1c:	mov	r5, r2
   33d20:	ldr	r8, [sp, #80]	; 0x50
   33d24:	mov	r9, r0
   33d28:	ands	r7, r8, #4
   33d2c:	movne	r7, #2
   33d30:	subs	r4, r1, #0
   33d34:	addeq	r4, sp, #4
   33d38:	mov	r2, #44	; 0x2c
   33d3c:	mov	r1, #0
   33d40:	mov	r0, r4
   33d44:	add	r6, r5, r3
   33d48:	bl	145c4 <memset@plt>
   33d4c:	mov	r2, #1
   33d50:	str	r2, [r4, #16]
   33d54:	str	r6, [r4, #32]
   33d58:	str	r9, [r4]
   33d5c:	stmib	r4, {r5, r8}
   33d60:	str	r5, [r4, #28]
   33d64:	str	r5, [r4, #36]	; 0x24
   33d68:	mov	r3, r7
   33d6c:	mov	r2, #0
   33d70:	ldr	r1, [sp, #84]	; 0x54
   33d74:	mov	r0, r9
   33d78:	bl	26c9c <flatcc_builder_start_buffer@@Base>
   33d7c:	cmp	r0, #0
   33d80:	bne	33dd8 <flatcc_json_parser_table_as_root@@Base+0xc4>
   33d84:	mov	r2, r6
   33d88:	mov	r3, sp
   33d8c:	mov	r1, r5
   33d90:	mov	r0, r4
   33d94:	ldr	ip, [sp, #88]	; 0x58
   33d98:	blx	ip
   33d9c:	ldr	r6, [r4, #24]
   33da0:	cmp	r6, #0
   33da4:	beq	33db4 <flatcc_json_parser_table_as_root@@Base+0xa0>
   33da8:	mov	r0, r6
   33dac:	add	sp, sp, #52	; 0x34
   33db0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33db4:	mov	r0, r9
   33db8:	ldr	r1, [sp]
   33dbc:	bl	26e28 <flatcc_builder_end_buffer@@Base>
   33dc0:	cmp	r0, #0
   33dc4:	beq	33dd8 <flatcc_json_parser_table_as_root@@Base+0xc4>
   33dc8:	mov	r0, r6
   33dcc:	str	r5, [r4, #40]	; 0x28
   33dd0:	add	sp, sp, #52	; 0x34
   33dd4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33dd8:	mvn	r6, #0
   33ddc:	mov	r0, r6
   33de0:	add	sp, sp, #52	; 0x34
   33de4:	pop	{r4, r5, r6, r7, r8, r9, pc}

00033de8 <flatcc_json_parser_struct_as_root@@Base>:
   33de8:	push	{r4, r5, r6, r7, r8, r9, lr}
   33dec:	sub	sp, sp, #52	; 0x34
   33df0:	mov	r5, r2
   33df4:	ldr	r8, [sp, #80]	; 0x50
   33df8:	mov	r9, r0
   33dfc:	ands	r7, r8, #4
   33e00:	movne	r7, #2
   33e04:	subs	r4, r1, #0
   33e08:	addeq	r4, sp, #4
   33e0c:	mov	r2, #44	; 0x2c
   33e10:	mov	r1, #0
   33e14:	mov	r0, r4
   33e18:	add	r6, r5, r3
   33e1c:	bl	145c4 <memset@plt>
   33e20:	mov	r2, #1
   33e24:	str	r2, [r4, #16]
   33e28:	str	r6, [r4, #32]
   33e2c:	str	r9, [r4]
   33e30:	stmib	r4, {r5, r8}
   33e34:	str	r5, [r4, #28]
   33e38:	str	r5, [r4, #36]	; 0x24
   33e3c:	mov	r3, r7
   33e40:	mov	r2, #0
   33e44:	ldr	r1, [sp, #84]	; 0x54
   33e48:	mov	r0, r9
   33e4c:	bl	26c9c <flatcc_builder_start_buffer@@Base>
   33e50:	cmp	r0, #0
   33e54:	bne	33eac <flatcc_json_parser_struct_as_root@@Base+0xc4>
   33e58:	mov	r2, r6
   33e5c:	mov	r3, sp
   33e60:	mov	r1, r5
   33e64:	mov	r0, r4
   33e68:	ldr	ip, [sp, #88]	; 0x58
   33e6c:	blx	ip
   33e70:	ldr	r6, [r4, #24]
   33e74:	cmp	r6, #0
   33e78:	beq	33e88 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   33e7c:	mov	r0, r6
   33e80:	add	sp, sp, #52	; 0x34
   33e84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33e88:	mov	r0, r9
   33e8c:	ldr	r1, [sp]
   33e90:	bl	26e28 <flatcc_builder_end_buffer@@Base>
   33e94:	cmp	r0, #0
   33e98:	beq	33eac <flatcc_json_parser_struct_as_root@@Base+0xc4>
   33e9c:	mov	r0, r6
   33ea0:	str	r5, [r4, #40]	; 0x28
   33ea4:	add	sp, sp, #52	; 0x34
   33ea8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33eac:	mvn	r6, #0
   33eb0:	mov	r0, r6
   33eb4:	add	sp, sp, #52	; 0x34
   33eb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33ebc:	andeq	r0, r0, r0
   33ec0:	cmp	r0, #1000	; 0x3e8
   33ec4:	push	{r4, r5, lr}
   33ec8:	mov	r3, r0
   33ecc:	bcc	33f3c <flatcc_json_parser_struct_as_root@@Base+0x154>
   33ed0:	ldr	r2, [pc, #324]	; 3401c <flatcc_json_parser_struct_as_root@@Base+0x234>
   33ed4:	cmp	r0, r2
   33ed8:	bhi	33f9c <flatcc_json_parser_struct_as_root@@Base+0x1b4>
   33edc:	ldr	lr, [pc, #316]	; 34020 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33ee0:	mov	ip, #100	; 0x64
   33ee4:	ldr	r2, [pc, #312]	; 34024 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   33ee8:	umull	r0, lr, lr, r3
   33eec:	mov	r0, #0
   33ef0:	lsr	lr, lr, #5
   33ef4:	strb	r0, [r1, #4]
   33ef8:	mul	ip, ip, lr
   33efc:	add	r4, r1, #2
   33f00:	sub	r3, r3, ip
   33f04:	mov	r0, #4
   33f08:	uxth	ip, r3
   33f0c:	uxth	r3, lr
   33f10:	ldrb	lr, [r2, ip, lsl #1]
   33f14:	add	ip, r2, ip, lsl #1
   33f18:	strb	lr, [r1, #2]
   33f1c:	ldrb	ip, [ip, #1]
   33f20:	strb	ip, [r1, #3]
   33f24:	ldrb	r1, [r2, r3, lsl #1]
   33f28:	add	r3, r2, r3, lsl #1
   33f2c:	strb	r1, [r4, #-2]
   33f30:	ldrb	r3, [r3, #1]
   33f34:	strb	r3, [r4, #-1]
   33f38:	pop	{r4, r5, pc}
   33f3c:	cmp	r0, #99	; 0x63
   33f40:	bls	33fe8 <flatcc_json_parser_struct_as_root@@Base+0x200>
   33f44:	mov	r2, #0
   33f48:	strb	r2, [r1, #3]
   33f4c:	ldr	r2, [pc, #208]	; 34024 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   33f50:	add	lr, r1, #3
   33f54:	mov	r0, #3
   33f58:	ldr	r4, [pc, #192]	; 34020 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33f5c:	mov	ip, #100	; 0x64
   33f60:	sub	r1, lr, #2
   33f64:	umull	r5, r4, r4, r3
   33f68:	lsr	r4, r4, #5
   33f6c:	mul	ip, ip, r4
   33f70:	sub	ip, r3, ip
   33f74:	uxth	r3, r4
   33f78:	uxth	ip, ip
   33f7c:	ldrb	r4, [r2, ip, lsl #1]
   33f80:	add	r2, r2, ip, lsl #1
   33f84:	strb	r4, [lr, #-2]
   33f88:	ldrb	r2, [r2, #1]
   33f8c:	strb	r2, [lr, #-1]
   33f90:	add	r3, r3, #48	; 0x30
   33f94:	strb	r3, [r1, #-1]
   33f98:	pop	{r4, r5, pc}
   33f9c:	ldr	r4, [pc, #124]	; 34020 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33fa0:	mov	ip, #100	; 0x64
   33fa4:	ldr	r2, [pc, #120]	; 34024 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   33fa8:	umull	r0, r4, r4, r3
   33fac:	mov	r0, #0
   33fb0:	lsr	r4, r4, #5
   33fb4:	strb	r0, [r1, #5]
   33fb8:	mul	ip, ip, r4
   33fbc:	add	lr, r1, #3
   33fc0:	sub	r3, r3, ip
   33fc4:	mov	r0, #5
   33fc8:	uxth	ip, r3
   33fcc:	uxth	r3, r4
   33fd0:	ldrb	r4, [r2, ip, lsl #1]
   33fd4:	add	ip, r2, ip, lsl #1
   33fd8:	strb	r4, [r1, #3]
   33fdc:	ldrb	ip, [ip, #1]
   33fe0:	strb	ip, [r1, #4]
   33fe4:	b	33f58 <flatcc_json_parser_struct_as_root@@Base+0x170>
   33fe8:	cmp	r0, #9
   33fec:	bls	34008 <flatcc_json_parser_struct_as_root@@Base+0x220>
   33ff0:	mov	r2, #0
   33ff4:	strb	r2, [r1, #2]
   33ff8:	add	r4, r1, #2
   33ffc:	mov	r0, #2
   34000:	ldr	r2, [pc, #28]	; 34024 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   34004:	b	33f24 <flatcc_json_parser_struct_as_root@@Base+0x13c>
   34008:	mov	r2, #0
   3400c:	strb	r2, [r1, #1]
   34010:	mov	r0, #1
   34014:	add	r1, r1, #1
   34018:	b	33f90 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   3401c:	andeq	r2, r0, pc, lsl #14
   34020:	mvnpl	r8, pc, lsl r5
   34024:	andeq	r7, r4, r0, asr r4
   34028:	ldr	r2, [pc, #768]	; 34330 <flatcc_json_parser_struct_as_root@@Base+0x548>
   3402c:	push	{r4, r5, lr}
   34030:	cmp	r0, r2
   34034:	mov	r3, r0
   34038:	bls	3414c <flatcc_json_parser_struct_as_root@@Base+0x364>
   3403c:	ldr	r2, [pc, #752]	; 34334 <flatcc_json_parser_struct_as_root@@Base+0x54c>
   34040:	cmp	r0, r2
   34044:	bls	34194 <flatcc_json_parser_struct_as_root@@Base+0x3ac>
   34048:	ldr	r2, [pc, #744]	; 34338 <flatcc_json_parser_struct_as_root@@Base+0x550>
   3404c:	cmp	r0, r2
   34050:	bls	34288 <flatcc_json_parser_struct_as_root@@Base+0x4a0>
   34054:	ldr	lr, [pc, #736]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   34058:	mov	r0, #100	; 0x64
   3405c:	ldr	r2, [pc, #732]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   34060:	umull	ip, lr, lr, r3
   34064:	mov	ip, #0
   34068:	lsr	lr, lr, #5
   3406c:	strb	ip, [r1, #10]
   34070:	mul	r0, r0, lr
   34074:	add	r4, r1, #8
   34078:	sub	r3, r3, r0
   3407c:	mov	r0, #10
   34080:	ldrb	r5, [r2, r3, lsl #1]
   34084:	add	ip, r2, r3, lsl #1
   34088:	mov	r3, lr
   3408c:	strb	r5, [r1, #8]
   34090:	ldrb	ip, [ip, #1]
   34094:	strb	ip, [r1, #9]
   34098:	ldr	lr, [pc, #668]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   3409c:	mov	ip, #100	; 0x64
   340a0:	sub	r1, r4, #2
   340a4:	umull	r5, lr, lr, r3
   340a8:	lsr	lr, lr, #5
   340ac:	mul	ip, ip, lr
   340b0:	sub	ip, r3, ip
   340b4:	mov	r3, lr
   340b8:	ldrb	lr, [r2, ip, lsl #1]
   340bc:	add	ip, r2, ip, lsl #1
   340c0:	strb	lr, [r4, #-2]
   340c4:	ldrb	ip, [ip, #1]
   340c8:	strb	ip, [r4, #-1]
   340cc:	ldr	lr, [pc, #616]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   340d0:	mov	ip, #100	; 0x64
   340d4:	sub	r4, r1, #2
   340d8:	umull	r5, lr, lr, r3
   340dc:	lsr	lr, lr, #5
   340e0:	mul	ip, ip, lr
   340e4:	sub	ip, r3, ip
   340e8:	mov	r3, lr
   340ec:	ldrb	lr, [r2, ip, lsl #1]
   340f0:	add	ip, r2, ip, lsl #1
   340f4:	strb	lr, [r1, #-2]
   340f8:	ldrb	ip, [ip, #1]
   340fc:	strb	ip, [r1, #-1]
   34100:	ldr	lr, [pc, #564]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   34104:	mov	ip, #100	; 0x64
   34108:	sub	r1, r4, #2
   3410c:	umull	r5, lr, lr, r3
   34110:	lsr	lr, lr, #5
   34114:	mul	ip, ip, lr
   34118:	sub	ip, r3, ip
   3411c:	mov	r3, lr
   34120:	ldrb	lr, [r2, ip, lsl #1]
   34124:	add	ip, r2, ip, lsl #1
   34128:	strb	lr, [r4, #-2]
   3412c:	ldrb	ip, [ip, #1]
   34130:	strb	ip, [r4, #-1]
   34134:	ldrb	ip, [r2, r3, lsl #1]
   34138:	add	r3, r2, r3, lsl #1
   3413c:	strb	ip, [r1, #-2]
   34140:	ldrb	r3, [r3, #1]
   34144:	strb	r3, [r1, #-1]
   34148:	pop	{r4, r5, pc}
   3414c:	cmp	r0, #99	; 0x63
   34150:	bls	34174 <flatcc_json_parser_struct_as_root@@Base+0x38c>
   34154:	cmp	r0, #1000	; 0x3e8
   34158:	bcc	3425c <flatcc_json_parser_struct_as_root@@Base+0x474>
   3415c:	mov	r2, #0
   34160:	strb	r2, [r1, #4]
   34164:	add	r4, r1, #4
   34168:	mov	r0, #4
   3416c:	ldr	r2, [pc, #460]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   34170:	b	34100 <flatcc_json_parser_struct_as_root@@Base+0x318>
   34174:	cmp	r0, #9
   34178:	bls	34274 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   3417c:	mov	r2, #0
   34180:	strb	r2, [r1, #2]
   34184:	mov	r0, #2
   34188:	add	r1, r1, #2
   3418c:	ldr	r2, [pc, #428]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   34190:	b	34134 <flatcc_json_parser_struct_as_root@@Base+0x34c>
   34194:	ldr	r2, [pc, #424]	; 34344 <flatcc_json_parser_struct_as_root@@Base+0x55c>
   34198:	cmp	r0, r2
   3419c:	bls	342dc <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   341a0:	mov	r2, #0
   341a4:	strb	r2, [r1, #7]
   341a8:	ldr	r2, [pc, #400]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   341ac:	add	r4, r1, #7
   341b0:	mov	r0, #7
   341b4:	ldr	lr, [pc, #384]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   341b8:	mov	ip, #100	; 0x64
   341bc:	sub	r1, r4, #2
   341c0:	umull	r5, lr, lr, r3
   341c4:	lsr	lr, lr, #5
   341c8:	mul	ip, ip, lr
   341cc:	sub	ip, r3, ip
   341d0:	mov	r3, lr
   341d4:	ldrb	lr, [r2, ip, lsl #1]
   341d8:	add	ip, r2, ip, lsl #1
   341dc:	strb	lr, [r4, #-2]
   341e0:	ldrb	ip, [ip, #1]
   341e4:	strb	ip, [r4, #-1]
   341e8:	ldr	lr, [pc, #332]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   341ec:	mov	ip, #100	; 0x64
   341f0:	sub	r4, r1, #2
   341f4:	umull	r5, lr, lr, r3
   341f8:	lsr	lr, lr, #5
   341fc:	mul	ip, ip, lr
   34200:	sub	ip, r3, ip
   34204:	mov	r3, lr
   34208:	ldrb	lr, [r2, ip, lsl #1]
   3420c:	add	ip, r2, ip, lsl #1
   34210:	strb	lr, [r1, #-2]
   34214:	ldrb	ip, [ip, #1]
   34218:	strb	ip, [r1, #-1]
   3421c:	ldr	lr, [pc, #280]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   34220:	mov	ip, #100	; 0x64
   34224:	sub	r1, r4, #2
   34228:	umull	r5, lr, lr, r3
   3422c:	lsr	lr, lr, #5
   34230:	mul	ip, ip, lr
   34234:	sub	ip, r3, ip
   34238:	mov	r3, lr
   3423c:	ldrb	lr, [r2, ip, lsl #1]
   34240:	add	r2, r2, ip, lsl #1
   34244:	strb	lr, [r4, #-2]
   34248:	ldrb	r2, [r2, #1]
   3424c:	strb	r2, [r4, #-1]
   34250:	add	r3, r3, #48	; 0x30
   34254:	strb	r3, [r1, #-1]
   34258:	pop	{r4, r5, pc}
   3425c:	mov	r2, #0
   34260:	strb	r2, [r1, #3]
   34264:	add	r4, r1, #3
   34268:	mov	r0, #3
   3426c:	ldr	r2, [pc, #204]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   34270:	b	3421c <flatcc_json_parser_struct_as_root@@Base+0x434>
   34274:	mov	r2, #0
   34278:	strb	r2, [r1, #1]
   3427c:	mov	r0, #1
   34280:	add	r1, r1, #1
   34284:	b	34250 <flatcc_json_parser_struct_as_root@@Base+0x468>
   34288:	ldr	r2, [pc, #184]	; 34348 <flatcc_json_parser_struct_as_root@@Base+0x560>
   3428c:	cmp	r0, r2
   34290:	bls	34318 <flatcc_json_parser_struct_as_root@@Base+0x530>
   34294:	ldr	lr, [pc, #160]	; 3433c <flatcc_json_parser_struct_as_root@@Base+0x554>
   34298:	mov	r0, #100	; 0x64
   3429c:	ldr	r2, [pc, #156]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   342a0:	umull	ip, lr, lr, r3
   342a4:	mov	ip, #0
   342a8:	lsr	lr, lr, #5
   342ac:	strb	ip, [r1, #9]
   342b0:	mul	r0, r0, lr
   342b4:	add	r4, r1, #7
   342b8:	sub	r3, r3, r0
   342bc:	mov	r0, #9
   342c0:	ldrb	r5, [r2, r3, lsl #1]
   342c4:	add	ip, r2, r3, lsl #1
   342c8:	mov	r3, lr
   342cc:	strb	r5, [r1, #7]
   342d0:	ldrb	ip, [ip, #1]
   342d4:	strb	ip, [r1, #8]
   342d8:	b	341b4 <flatcc_json_parser_struct_as_root@@Base+0x3cc>
   342dc:	ldr	r2, [pc, #104]	; 3434c <flatcc_json_parser_struct_as_root@@Base+0x564>
   342e0:	cmp	r0, r2
   342e4:	bls	34300 <flatcc_json_parser_struct_as_root@@Base+0x518>
   342e8:	mov	r2, #0
   342ec:	strb	r2, [r1, #6]
   342f0:	mov	r0, #6
   342f4:	add	r1, r1, #6
   342f8:	ldr	r2, [pc, #64]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   342fc:	b	340cc <flatcc_json_parser_struct_as_root@@Base+0x2e4>
   34300:	mov	r2, #0
   34304:	strb	r2, [r1, #5]
   34308:	mov	r0, #5
   3430c:	add	r1, r1, #5
   34310:	ldr	r2, [pc, #40]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   34314:	b	341e8 <flatcc_json_parser_struct_as_root@@Base+0x400>
   34318:	mov	r2, #0
   3431c:	strb	r2, [r1, #8]
   34320:	add	r4, r1, #8
   34324:	mov	r0, #8
   34328:	ldr	r2, [pc, #16]	; 34340 <flatcc_json_parser_struct_as_root@@Base+0x558>
   3432c:	b	34098 <flatcc_json_parser_struct_as_root@@Base+0x2b0>
   34330:	andeq	r2, r0, pc, lsl #14
   34334:	addseq	r9, r8, pc, ror r6
   34338:	blcc	fe6e6b3c <__bss_end__@@Base+0xfe68e780>
   3433c:	mvnpl	r8, pc, lsl r5
   34340:	andeq	r7, r4, r0, asr r4
   34344:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   34348:	ldrbeq	lr, [r5, #255]!	; 0xff
   3434c:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   34350:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34354:	mov	r6, r0
   34358:	add	r9, pc, #944	; 0x3b0
   3435c:	ldrd	r8, [r9]
   34360:	mov	r5, r2
   34364:	cmp	r1, r9
   34368:	cmpeq	r0, r8
   3436c:	bls	34704 <flatcc_json_parser_struct_as_root@@Base+0x91c>
   34370:	add	r3, pc, #928	; 0x3a0
   34374:	ldrd	r2, [r3]
   34378:	mov	r7, r1
   3437c:	cmp	r1, r3
   34380:	cmpeq	r0, r2
   34384:	bls	34598 <flatcc_json_parser_struct_as_root@@Base+0x7b0>
   34388:	add	r3, pc, #912	; 0x390
   3438c:	ldrd	r2, [r3]
   34390:	cmp	r1, r3
   34394:	cmpeq	r0, r2
   34398:	bls	34754 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   3439c:	add	r3, pc, #900	; 0x384
   343a0:	ldrd	r2, [r3]
   343a4:	cmp	r1, r3
   343a8:	cmpeq	r0, r2
   343ac:	bls	34914 <flatcc_json_parser_struct_as_root@@Base+0xb2c>
   343b0:	add	r3, pc, #888	; 0x378
   343b4:	ldrd	r2, [r3]
   343b8:	cmp	r1, r3
   343bc:	cmpeq	r0, r2
   343c0:	bls	3480c <flatcc_json_parser_struct_as_root@@Base+0xa24>
   343c4:	mov	r3, #0
   343c8:	strb	r3, [r5, #20]
   343cc:	mov	r2, #100	; 0x64
   343d0:	mov	r3, #0
   343d4:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   343d8:	mov	r0, r6
   343dc:	mov	r1, r7
   343e0:	mov	r3, #0
   343e4:	ldr	r4, [pc, #860]	; 34748 <flatcc_json_parser_struct_as_root@@Base+0x960>
   343e8:	mov	r9, #20
   343ec:	mov	r8, r2
   343f0:	mov	r2, #100	; 0x64
   343f4:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   343f8:	ldrb	r2, [r4, r8, lsl #1]
   343fc:	add	r3, r4, r8, lsl #1
   34400:	add	r8, r5, #18
   34404:	strb	r2, [r5, #18]
   34408:	ldrb	r3, [r3, #1]
   3440c:	strb	r3, [r5, #19]
   34410:	mov	r6, r0
   34414:	mov	r7, r1
   34418:	mov	r0, r6
   3441c:	mov	r1, r7
   34420:	mov	r2, #100	; 0x64
   34424:	mov	r3, #0
   34428:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   3442c:	mov	r0, r6
   34430:	mov	r1, r7
   34434:	mov	r3, #0
   34438:	mov	r5, r2
   3443c:	mov	r2, #100	; 0x64
   34440:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34444:	ldrb	r2, [r4, r5, lsl #1]
   34448:	add	r3, r4, r5, lsl #1
   3444c:	sub	r5, r8, #2
   34450:	strb	r2, [r8, #-2]
   34454:	ldrb	r3, [r3, #1]
   34458:	strb	r3, [r8, #-1]
   3445c:	mov	r6, r0
   34460:	mov	r7, r1
   34464:	mov	r0, r6
   34468:	mov	r1, r7
   3446c:	mov	r2, #100	; 0x64
   34470:	mov	r3, #0
   34474:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34478:	mov	r0, r6
   3447c:	mov	r1, r7
   34480:	mov	r3, #0
   34484:	sub	fp, r5, #2
   34488:	mov	r8, r2
   3448c:	mov	r2, #100	; 0x64
   34490:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34494:	ldrb	r3, [r4, r8, lsl #1]
   34498:	add	r8, r4, r8, lsl #1
   3449c:	strb	r3, [r5, #-2]
   344a0:	ldrb	r3, [r8, #1]
   344a4:	strb	r3, [r5, #-1]
   344a8:	mov	r6, r0
   344ac:	mov	r7, r1
   344b0:	mov	r0, r6
   344b4:	mov	r1, r7
   344b8:	mov	r2, #100	; 0x64
   344bc:	mov	r3, #0
   344c0:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   344c4:	mov	r0, r6
   344c8:	mov	r1, r7
   344cc:	mov	r3, #0
   344d0:	sub	sl, fp, #2
   344d4:	mov	r8, r2
   344d8:	mov	r2, #100	; 0x64
   344dc:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   344e0:	ldrb	r3, [r4, r8, lsl #1]
   344e4:	add	r8, r4, r8, lsl #1
   344e8:	strb	r3, [fp, #-2]
   344ec:	ldrb	r3, [r8, #1]
   344f0:	strb	r3, [fp, #-1]
   344f4:	mov	r6, r0
   344f8:	mov	r7, r1
   344fc:	mov	r0, r6
   34500:	mov	r1, r7
   34504:	mov	r2, #100	; 0x64
   34508:	mov	r3, #0
   3450c:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34510:	mov	r0, r6
   34514:	mov	r1, r7
   34518:	mov	r3, #0
   3451c:	sub	r5, sl, #2
   34520:	mov	r8, r2
   34524:	mov	r2, #100	; 0x64
   34528:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   3452c:	ldrb	r3, [r4, r8, lsl #1]
   34530:	add	r8, r4, r8, lsl #1
   34534:	strb	r3, [sl, #-2]
   34538:	ldrb	r3, [r8, #1]
   3453c:	strb	r3, [sl, #-1]
   34540:	mov	r6, r0
   34544:	mov	r7, r1
   34548:	mov	r0, r6
   3454c:	mov	r1, r7
   34550:	mov	r2, #100	; 0x64
   34554:	mov	r3, #0
   34558:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   3455c:	mov	r0, r6
   34560:	mov	r1, r7
   34564:	mov	r3, #0
   34568:	mov	r8, r2
   3456c:	mov	r2, #100	; 0x64
   34570:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34574:	ldrb	r2, [r4, r8, lsl #1]
   34578:	add	r3, r4, r8, lsl #1
   3457c:	sub	r8, r5, #2
   34580:	strb	r2, [r5, #-2]
   34584:	ldrb	r3, [r3, #1]
   34588:	strb	r3, [r5, #-1]
   3458c:	mov	r6, r0
   34590:	mov	r7, r1
   34594:	b	34644 <flatcc_json_parser_struct_as_root@@Base+0x85c>
   34598:	add	r3, pc, #408	; 0x198
   3459c:	ldrd	r2, [r3]
   345a0:	cmp	r1, r3
   345a4:	cmpeq	r0, r2
   345a8:	bhi	34794 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   345ac:	add	r3, pc, #396	; 0x18c
   345b0:	ldrd	r2, [r3]
   345b4:	cmp	r1, r3
   345b8:	cmpeq	r0, r2
   345bc:	bls	34940 <flatcc_json_parser_struct_as_root@@Base+0xb58>
   345c0:	mov	r3, #0
   345c4:	ldr	r4, [pc, #380]	; 34748 <flatcc_json_parser_struct_as_root@@Base+0x960>
   345c8:	strb	r3, [r5, #11]
   345cc:	mov	r9, #11
   345d0:	add	r5, r5, #11
   345d4:	mov	r0, r6
   345d8:	mov	r1, r7
   345dc:	mov	r2, #100	; 0x64
   345e0:	mov	r3, #0
   345e4:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   345e8:	mov	r0, r6
   345ec:	sub	r8, r5, #3
   345f0:	ldrb	r3, [r4, r2, lsl #1]
   345f4:	add	r2, r4, r2, lsl #1
   345f8:	strb	r3, [r5, #-2]
   345fc:	ldrb	r1, [r2, #1]
   34600:	mov	r3, #0
   34604:	mov	r2, #100	; 0x64
   34608:	strb	r1, [r5, #-1]
   3460c:	mov	r1, r7
   34610:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34614:	mov	r2, #10
   34618:	mov	r3, #0
   3461c:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34620:	mov	r0, r6
   34624:	mov	r1, r7
   34628:	mov	r3, #0
   3462c:	add	r2, r2, #48	; 0x30
   34630:	strb	r2, [r5, #-3]
   34634:	mov	r2, #1000	; 0x3e8
   34638:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   3463c:	mov	r6, r0
   34640:	mov	r7, r1
   34644:	mov	r0, r6
   34648:	mov	r1, r7
   3464c:	mov	r2, #100	; 0x64
   34650:	mov	r3, #0
   34654:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34658:	mov	r0, r6
   3465c:	ldrb	r3, [r4, r2, lsl #1]
   34660:	add	r2, r4, r2, lsl #1
   34664:	strb	r3, [r8, #-2]
   34668:	ldrb	r1, [r2, #1]
   3466c:	mov	r3, #0
   34670:	mov	r2, #100	; 0x64
   34674:	strb	r1, [r8, #-1]
   34678:	mov	r1, r7
   3467c:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34680:	mov	r2, #100	; 0x64
   34684:	mov	r3, #0
   34688:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   3468c:	mov	r0, r6
   34690:	ldrb	r3, [r4, r2, lsl #1]
   34694:	add	r2, r4, r2, lsl #1
   34698:	strb	r3, [r8, #-4]
   3469c:	ldrb	r1, [r2, #1]
   346a0:	mov	r3, #0
   346a4:	ldr	r2, [pc, #160]	; 3474c <flatcc_json_parser_struct_as_root@@Base+0x964>
   346a8:	strb	r1, [r8, #-3]
   346ac:	mov	r1, r7
   346b0:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   346b4:	mov	r2, #100	; 0x64
   346b8:	mov	r3, #0
   346bc:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   346c0:	mov	r0, r6
   346c4:	mov	r1, r7
   346c8:	mov	r3, #0
   346cc:	ldrb	lr, [r4, r2, lsl #1]
   346d0:	add	ip, r4, r2, lsl #1
   346d4:	ldr	r2, [pc, #116]	; 34750 <flatcc_json_parser_struct_as_root@@Base+0x968>
   346d8:	strb	lr, [r8, #-6]
   346dc:	ldrb	ip, [ip, #1]
   346e0:	strb	ip, [r8, #-5]
   346e4:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   346e8:	ldrb	r3, [r4, r0, lsl #1]
   346ec:	add	r0, r4, r0, lsl #1
   346f0:	strb	r3, [r8, #-8]
   346f4:	ldrb	r3, [r0, #1]
   346f8:	mov	r0, r9
   346fc:	strb	r3, [r8, #-7]
   34700:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34704:	mov	r1, r2
   34708:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3470c:	b	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   34710:	blcc	fe6e6f14 <__bss_end__@@Base+0xfe68eb58>
   34714:	andeq	r0, r0, r0
   34718:	mrcmi	15, 3, r9, cr2, cr15, {7}
   3471c:	andeq	r0, r0, r8, lsl r9
   34720:	svcvs	0x00c0ffff
   34724:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   34728:			; <UNDEFINED> instruction: 0xa763ffff
   3472c:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   34730:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   34734:	bhi	ff1fd34c <__bss_end__@@Base+0xff1a4f90>
   34738:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   3473c:	andeq	r0, r0, r7, lsl r0
   34740:	strpl	lr, [fp], #-1023	; 0xfffffc01
   34744:	andeq	r0, r0, r2
   34748:	andeq	r7, r4, r0, asr r4
   3474c:	andeq	r2, r0, r0, lsl r7
   34750:	andeq	r4, pc, r0, asr #4
   34754:	add	r3, pc, #580	; 0x244
   34758:	ldrd	r2, [r3]
   3475c:	cmp	r1, r3
   34760:	cmpeq	r0, r2
   34764:	bhi	348fc <flatcc_json_parser_struct_as_root@@Base+0xb14>
   34768:	add	r3, pc, #568	; 0x238
   3476c:	ldrd	r2, [r3]
   34770:	cmp	r1, r3
   34774:	cmpeq	r0, r2
   34778:	bls	34988 <flatcc_json_parser_struct_as_root@@Base+0xba0>
   3477c:	mov	r3, #0
   34780:	strb	r3, [r5, #15]
   34784:	mov	r9, #15
   34788:	add	r5, r5, #15
   3478c:	ldr	r4, [pc, #556]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   34790:	b	348ac <flatcc_json_parser_struct_as_root@@Base+0xac4>
   34794:	add	r3, pc, #532	; 0x214
   34798:	ldrd	r2, [r3]
   3479c:	cmp	r1, r3
   347a0:	cmpeq	r0, r2
   347a4:	bls	34958 <flatcc_json_parser_struct_as_root@@Base+0xb70>
   347a8:	ldr	r4, [pc, #528]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   347ac:	add	sl, r5, #13
   347b0:	mov	r9, #13
   347b4:	mov	r3, #0
   347b8:	strb	r3, [r5, #13]
   347bc:	mov	r0, r6
   347c0:	mov	r1, r7
   347c4:	mov	r2, #100	; 0x64
   347c8:	mov	r3, #0
   347cc:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   347d0:	mov	r0, r6
   347d4:	mov	r1, r7
   347d8:	mov	r3, #0
   347dc:	sub	r5, sl, #2
   347e0:	mov	r8, r2
   347e4:	mov	r2, #100	; 0x64
   347e8:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   347ec:	ldrb	r3, [r4, r8, lsl #1]
   347f0:	add	r8, r4, r8, lsl #1
   347f4:	strb	r3, [sl, #-2]
   347f8:	ldrb	r3, [r8, #1]
   347fc:	strb	r3, [sl, #-1]
   34800:	mov	r6, r0
   34804:	mov	r7, r1
   34808:	b	345d4 <flatcc_json_parser_struct_as_root@@Base+0x7ec>
   3480c:	mov	r3, #0
   34810:	strb	r3, [r5, #19]
   34814:	mov	r2, #100	; 0x64
   34818:	mov	r3, #0
   3481c:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34820:	mov	r0, r6
   34824:	mov	r1, r7
   34828:	mov	r3, #0
   3482c:	ldr	r4, [pc, #396]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   34830:	mov	r9, #19
   34834:	mov	r8, r2
   34838:	mov	r2, #100	; 0x64
   3483c:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34840:	ldrb	r2, [r4, r8, lsl #1]
   34844:	add	r3, r4, r8, lsl #1
   34848:	add	r8, r5, #17
   3484c:	strb	r2, [r5, #17]
   34850:	ldrb	r3, [r3, #1]
   34854:	strb	r3, [r5, #18]
   34858:	mov	r6, r0
   3485c:	mov	r7, r1
   34860:	mov	r0, r6
   34864:	mov	r1, r7
   34868:	mov	r2, #100	; 0x64
   3486c:	mov	r3, #0
   34870:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   34874:	mov	r0, r6
   34878:	mov	r1, r7
   3487c:	mov	r3, #0
   34880:	mov	r5, r2
   34884:	mov	r2, #100	; 0x64
   34888:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   3488c:	ldrb	r2, [r4, r5, lsl #1]
   34890:	add	r3, r4, r5, lsl #1
   34894:	sub	r5, r8, #2
   34898:	strb	r2, [r8, #-2]
   3489c:	ldrb	r3, [r3, #1]
   348a0:	strb	r3, [r8, #-1]
   348a4:	mov	r6, r0
   348a8:	mov	r7, r1
   348ac:	mov	r0, r6
   348b0:	mov	r1, r7
   348b4:	mov	r2, #100	; 0x64
   348b8:	mov	r3, #0
   348bc:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   348c0:	mov	r0, r6
   348c4:	mov	r1, r7
   348c8:	mov	r3, #0
   348cc:	sub	sl, r5, #2
   348d0:	mov	r8, r2
   348d4:	mov	r2, #100	; 0x64
   348d8:	bl	41760 <flatcc_json_printer_clear@@Base+0x84c>
   348dc:	ldrb	r3, [r4, r8, lsl #1]
   348e0:	add	r8, r4, r8, lsl #1
   348e4:	strb	r3, [r5, #-2]
   348e8:	ldrb	r3, [r8, #1]
   348ec:	strb	r3, [r5, #-1]
   348f0:	mov	r6, r0
   348f4:	mov	r7, r1
   348f8:	b	347bc <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   348fc:	mov	r3, #0
   34900:	strb	r3, [r5, #16]
   34904:	mov	r9, #16
   34908:	add	r5, r5, #16
   3490c:	ldr	r4, [pc, #172]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   34910:	b	34464 <flatcc_json_parser_struct_as_root@@Base+0x67c>
   34914:	add	r3, pc, #156	; 0x9c
   34918:	ldrd	r2, [r3]
   3491c:	cmp	r1, r3
   34920:	cmpeq	r0, r2
   34924:	bls	34970 <flatcc_json_parser_struct_as_root@@Base+0xb88>
   34928:	mov	r3, #0
   3492c:	strb	r3, [r5, #18]
   34930:	add	r8, r5, #18
   34934:	mov	r9, #18
   34938:	ldr	r4, [pc, #128]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   3493c:	b	34418 <flatcc_json_parser_struct_as_root@@Base+0x630>
   34940:	mov	r3, #0
   34944:	strb	r3, [r5, #10]
   34948:	mov	r9, #10
   3494c:	add	r5, r5, #10
   34950:	ldr	r4, [pc, #104]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   34954:	b	34548 <flatcc_json_parser_struct_as_root@@Base+0x760>
   34958:	mov	r3, #0
   3495c:	strb	r3, [r5, #12]
   34960:	add	sl, r5, #12
   34964:	mov	r9, #12
   34968:	ldr	r4, [pc, #80]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   3496c:	b	344fc <flatcc_json_parser_struct_as_root@@Base+0x714>
   34970:	mov	r3, #0
   34974:	strb	r3, [r5, #17]
   34978:	add	r8, r5, #17
   3497c:	mov	r9, #17
   34980:	ldr	r4, [pc, #56]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   34984:	b	34860 <flatcc_json_parser_struct_as_root@@Base+0xa78>
   34988:	mov	r3, #0
   3498c:	strb	r3, [r5, #14]
   34990:	add	fp, r5, #14
   34994:	mov	r9, #14
   34998:	ldr	r4, [pc, #32]	; 349c0 <flatcc_json_parser_struct_as_root@@Base+0xbd8>
   3499c:	b	344b0 <flatcc_json_parser_struct_as_root@@Base+0x6c8>
   349a0:	strbge	r7, [r6], #4095	; 0xfff
   349a4:	andeq	r8, r3, lr, ror sp
   349a8:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   349ac:	strdeq	r5, [r0], -r3
   349b0:	strtle	r0, [r5], #4095	; 0xfff
   349b4:	andeq	r0, r0, r8, ror #1
   349b8:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   349bc:	smceq	13400	; 0x3458
   349c0:	andeq	r7, r4, r0, asr r4
   349c4:	ldr	r3, [r0, #20]
   349c8:	ldr	r2, [r0, #16]
   349cc:	cmp	r3, r2
   349d0:	bcc	34a00 <flatcc_json_parser_struct_as_root@@Base+0xc18>
   349d4:	ldr	r2, [r0, #36]	; 0x24
   349d8:	mov	r1, r3
   349dc:	cmp	r2, #0
   349e0:	moveq	r2, #3
   349e4:	ldr	r3, [r0]
   349e8:	streq	r2, [r0, #36]	; 0x24
   349ec:	ldr	r2, [r0, #12]
   349f0:	sub	r1, r1, r3
   349f4:	add	r2, r2, r1
   349f8:	str	r3, [r0, #20]
   349fc:	str	r2, [r0, #12]
   34a00:	mov	r2, #0
   34a04:	strb	r2, [r3]
   34a08:	bx	lr
   34a0c:	push	{r4, r5, r6, r7, r8, lr}
   34a10:	mov	r4, r0
   34a14:	ldrb	r2, [r0, #25]
   34a18:	ldr	r6, [r0, #32]
   34a1c:	ldr	r3, [r0, #20]
   34a20:	ldr	r5, [r0, #16]
   34a24:	mul	r6, r6, r2
   34a28:	add	r2, r3, r6
   34a2c:	cmp	r5, r2
   34a30:	bcc	34a54 <flatcc_json_parser_struct_as_root@@Base+0xc6c>
   34a34:	mov	r0, r3
   34a38:	mov	r2, r6
   34a3c:	mov	r1, #32
   34a40:	bl	145c4 <memset@plt>
   34a44:	ldr	r3, [r4, #20]
   34a48:	add	r6, r3, r6
   34a4c:	str	r6, [r4, #20]
   34a50:	pop	{r4, r5, r6, r7, r8, pc}
   34a54:	cmp	r3, r5
   34a58:	bcs	34ab8 <flatcc_json_parser_struct_as_root@@Base+0xcd0>
   34a5c:	sub	r5, r5, r3
   34a60:	cmp	r6, r5
   34a64:	bls	34a34 <flatcc_json_parser_struct_as_root@@Base+0xc4c>
   34a68:	mov	r8, #32
   34a6c:	mov	r7, #0
   34a70:	mov	r2, r5
   34a74:	mov	r0, r3
   34a78:	mov	r1, r8
   34a7c:	bl	145c4 <memset@plt>
   34a80:	ldr	r3, [r4, #20]
   34a84:	ldr	r2, [r4, #44]	; 0x2c
   34a88:	add	r3, r3, r5
   34a8c:	str	r3, [r4, #20]
   34a90:	mov	r1, r7
   34a94:	mov	r0, r4
   34a98:	blx	r2
   34a9c:	ldr	r3, [r4, #20]
   34aa0:	ldr	r2, [r4, #16]
   34aa4:	sub	r6, r6, r5
   34aa8:	sub	r5, r2, r3
   34aac:	cmp	r6, r5
   34ab0:	bhi	34a70 <flatcc_json_parser_struct_as_root@@Base+0xc88>
   34ab4:	b	34a34 <flatcc_json_parser_struct_as_root@@Base+0xc4c>
   34ab8:	ldr	r3, [r0, #44]	; 0x2c
   34abc:	mov	r1, #0
   34ac0:	blx	r3
   34ac4:	ldr	r5, [r4, #16]
   34ac8:	ldr	r3, [r4, #20]
   34acc:	b	34a5c <flatcc_json_parser_struct_as_root@@Base+0xc74>
   34ad0:	cmp	r1, #0
   34ad4:	push	{r4, r5, r6, lr}
   34ad8:	mov	r4, r0
   34adc:	ldr	ip, [r0, #20]
   34ae0:	bne	34af0 <flatcc_json_parser_struct_as_root@@Base+0xd08>
   34ae4:	ldr	r5, [r0, #16]
   34ae8:	cmp	ip, r5
   34aec:	bcs	34b28 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   34af0:	ldr	r0, [r4]
   34af4:	ldr	r3, [r4, #40]	; 0x28
   34af8:	sub	r5, ip, r0
   34afc:	mov	r1, r5
   34b00:	mov	r2, #1
   34b04:	bl	14570 <fwrite@plt>
   34b08:	ldr	ip, [r4, #12]
   34b0c:	ldr	r3, [r4]
   34b10:	add	ip, ip, r5
   34b14:	str	ip, [r4, #12]
   34b18:	str	r3, [r4, #20]
   34b1c:	mov	r2, #0
   34b20:	strb	r2, [r3]
   34b24:	pop	{r4, r5, r6, pc}
   34b28:	ldr	r3, [r0, #40]	; 0x28
   34b2c:	ldr	r1, [r0, #8]
   34b30:	mov	r2, #1
   34b34:	ldr	r0, [r0]
   34b38:	sub	r5, ip, r5
   34b3c:	bl	14570 <fwrite@plt>
   34b40:	ldr	r0, [r4]
   34b44:	ldr	r1, [r4, #8]
   34b48:	mov	r2, r5
   34b4c:	add	r1, r0, r1
   34b50:	bl	1454c <memcpy@plt>
   34b54:	ldr	r2, [r4, #12]
   34b58:	ldr	r3, [r4]
   34b5c:	ldr	r1, [r4, #8]
   34b60:	add	r3, r3, r5
   34b64:	add	r2, r2, r1
   34b68:	str	r3, [r4, #20]
   34b6c:	str	r2, [r4, #12]
   34b70:	b	34b1c <flatcc_json_parser_struct_as_root@@Base+0xd34>
   34b74:	ldr	r3, [r0, #20]
   34b78:	mov	r2, #0
   34b7c:	push	{r4, r5, r6, lr}
   34b80:	ldr	r5, [r0]
   34b84:	strb	r2, [r3]
   34b88:	ldr	r1, [r0, #20]
   34b8c:	ldr	r2, [r0, #16]
   34b90:	cmp	r1, r2
   34b94:	popcc	{r4, r5, r6, pc}
   34b98:	mov	r4, r0
   34b9c:	ldm	r0, {r0, r1}
   34ba0:	sub	r5, r3, r5
   34ba4:	lsl	r1, r1, #1
   34ba8:	bl	14564 <realloc@plt>
   34bac:	cmp	r0, #0
   34bb0:	beq	34be4 <flatcc_json_parser_struct_as_root@@Base+0xdfc>
   34bb4:	ldr	r3, [r4, #4]
   34bb8:	add	r2, r0, r5
   34bbc:	str	r2, [r4, #20]
   34bc0:	lsl	r3, r3, #1
   34bc4:	sub	r1, r3, #64	; 0x40
   34bc8:	add	ip, r0, r1
   34bcc:	stm	r4, {r0, r3}
   34bd0:	str	ip, [r4, #16]
   34bd4:	str	r1, [r4, #8]
   34bd8:	mov	r3, #0
   34bdc:	strb	r3, [r2]
   34be0:	pop	{r4, r5, r6, pc}
   34be4:	ldr	r3, [r4, #36]	; 0x24
   34be8:	ldr	r2, [r4]
   34bec:	cmp	r3, #0
   34bf0:	moveq	r3, #3
   34bf4:	streq	r3, [r4, #36]	; 0x24
   34bf8:	ldr	r3, [r4, #12]
   34bfc:	str	r2, [r4, #20]
   34c00:	add	r3, r3, r5
   34c04:	str	r3, [r4, #12]
   34c08:	b	34bd8 <flatcc_json_parser_struct_as_root@@Base+0xdf0>
   34c0c:	cmp	r0, #99	; 0x63
   34c10:	mov	r3, r0
   34c14:	bls	34c68 <flatcc_json_parser_struct_as_root@@Base+0xe80>
   34c18:	ldr	r2, [pc, #148]	; 34cb4 <flatcc_json_parser_struct_as_root@@Base+0xecc>
   34c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   34c20:	mov	r0, #100	; 0x64
   34c24:	umull	lr, r2, r2, r3
   34c28:	ldr	ip, [pc, #136]	; 34cb8 <flatcc_json_parser_struct_as_root@@Base+0xed0>
   34c2c:	mov	lr, #0
   34c30:	lsr	r2, r2, #5
   34c34:	strb	lr, [r1, #3]
   34c38:	mul	r0, r0, r2
   34c3c:	add	r2, r2, #48	; 0x30
   34c40:	sub	r3, r3, r0
   34c44:	mov	r0, #3
   34c48:	uxtb	r3, r3
   34c4c:	ldrb	lr, [ip, r3, lsl #1]
   34c50:	add	r3, ip, r3, lsl #1
   34c54:	strb	lr, [r1, #1]
   34c58:	ldrb	r3, [r3, #1]
   34c5c:	strb	r2, [r1]
   34c60:	strb	r3, [r1, #2]
   34c64:	pop	{pc}		; (ldr pc, [sp], #4)
   34c68:	cmp	r0, #9
   34c6c:	bls	34c9c <flatcc_json_parser_struct_as_root@@Base+0xeb4>
   34c70:	ldr	r2, [pc, #64]	; 34cb8 <flatcc_json_parser_struct_as_root@@Base+0xed0>
   34c74:	sxth	r3, r0
   34c78:	mov	r0, #0
   34c7c:	strb	r0, [r1, #2]
   34c80:	ldrb	ip, [r2, r3, lsl #1]
   34c84:	add	r3, r2, r3, lsl #1
   34c88:	mov	r0, #2
   34c8c:	strb	ip, [r1]
   34c90:	ldrb	r3, [r3, #1]
   34c94:	strb	r3, [r1, #1]
   34c98:	bx	lr
   34c9c:	add	r3, r3, #48	; 0x30
   34ca0:	mov	r2, #0
   34ca4:	mov	r0, #1
   34ca8:	strb	r3, [r1]
   34cac:	strb	r2, [r1, #1]
   34cb0:	bx	lr
   34cb4:	mvnpl	r8, pc, lsl r5
   34cb8:	andeq	r7, r4, r0, asr r4
   34cbc:	push	{r4, lr}
   34cc0:	mov	r2, #239	; 0xef
   34cc4:	ldr	r3, [pc, #8]	; 34cd4 <flatcc_json_parser_struct_as_root@@Base+0xeec>
   34cc8:	ldr	r1, [pc, #8]	; 34cd8 <flatcc_json_parser_struct_as_root@@Base+0xef0>
   34ccc:	ldr	r0, [pc, #8]	; 34cdc <flatcc_json_parser_struct_as_root@@Base+0xef4>
   34cd0:	bl	14618 <__assert_fail@plt>
   34cd4:	andeq	r7, r4, r4, lsr r5
   34cd8:	andeq	r7, r4, r0, lsr #32
   34cdc:	andeq	r7, r4, r0, lsr #23
   34ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ce4:	mov	sl, r1
   34ce8:	sub	sp, sp, #12
   34cec:	ldr	r1, [r0, #20]
   34cf0:	str	r2, [sp, #4]
   34cf4:	mov	r5, r0
   34cf8:	add	r2, r1, #1
   34cfc:	mov	fp, #0
   34d00:	str	r2, [r0, #20]
   34d04:	mov	r2, #34	; 0x22
   34d08:	strb	r2, [r1]
   34d0c:	ldrb	r4, [sl]
   34d10:	mov	r7, sl
   34d14:	cmp	r4, #34	; 0x22
   34d18:	cmpne	r4, #31
   34d1c:	bls	34fa4 <flatcc_json_parser_struct_as_root@@Base+0x11bc>
   34d20:	cmp	r4, #92	; 0x5c
   34d24:	bne	34d34 <flatcc_json_parser_struct_as_root@@Base+0xf4c>
   34d28:	b	34fa4 <flatcc_json_parser_struct_as_root@@Base+0x11bc>
   34d2c:	cmp	r4, #92	; 0x5c
   34d30:	beq	34d44 <flatcc_json_parser_struct_as_root@@Base+0xf5c>
   34d34:	ldrb	r4, [r7, #1]!
   34d38:	cmp	r4, #34	; 0x22
   34d3c:	cmpne	r4, #31
   34d40:	bhi	34d2c <flatcc_json_parser_struct_as_root@@Base+0xf44>
   34d44:	sub	r9, r7, sl
   34d48:	ldr	r0, [r5, #20]
   34d4c:	ldr	r6, [r5, #16]
   34d50:	add	r3, r0, r9
   34d54:	cmp	r6, r3
   34d58:	bls	34e78 <flatcc_json_parser_struct_as_root@@Base+0x1090>
   34d5c:	mov	r2, r9
   34d60:	mov	r1, sl
   34d64:	bl	1454c <memcpy@plt>
   34d68:	ldr	r3, [r5, #20]
   34d6c:	ldr	r2, [sp, #4]
   34d70:	add	r3, r3, r9
   34d74:	subs	r8, r2, r9
   34d78:	str	r3, [r5, #20]
   34d7c:	beq	34ef8 <flatcc_json_parser_struct_as_root@@Base+0x1110>
   34d80:	add	r2, r3, #1
   34d84:	str	r2, [r5, #20]
   34d88:	cmp	r4, #12
   34d8c:	mov	r2, #92	; 0x5c
   34d90:	strb	r2, [r3]
   34d94:	beq	34f28 <flatcc_json_parser_struct_as_root@@Base+0x1140>
   34d98:	bhi	34e48 <flatcc_json_parser_struct_as_root@@Base+0x1060>
   34d9c:	cmp	r4, #9
   34da0:	beq	34f70 <flatcc_json_parser_struct_as_root@@Base+0x1188>
   34da4:	cmp	r4, #10
   34da8:	beq	34f58 <flatcc_json_parser_struct_as_root@@Base+0x1170>
   34dac:	cmp	r4, #8
   34db0:	beq	34f40 <flatcc_json_parser_struct_as_root@@Base+0x1158>
   34db4:	ldr	r3, [r5, #20]
   34db8:	lsr	r1, r4, #4
   34dbc:	add	r2, r3, #1
   34dc0:	str	r2, [r5, #20]
   34dc4:	mov	r2, #117	; 0x75
   34dc8:	strb	r2, [r3]
   34dcc:	ldr	r3, [r5, #20]
   34dd0:	cmp	r1, #9
   34dd4:	add	r2, r3, #1
   34dd8:	str	r2, [r5, #20]
   34ddc:	mov	r2, #48	; 0x30
   34de0:	strb	r2, [r3]
   34de4:	ldr	r2, [r5, #20]
   34de8:	movhi	r3, #87	; 0x57
   34dec:	add	r0, r2, #1
   34df0:	str	r0, [r5, #20]
   34df4:	mov	r0, #48	; 0x30
   34df8:	strb	r0, [r2]
   34dfc:	ldr	r2, [r5, #20]
   34e00:	movls	r3, #48	; 0x30
   34e04:	add	r3, r3, r1
   34e08:	and	r4, r4, #15
   34e0c:	add	r1, r2, #1
   34e10:	str	r1, [r5, #20]
   34e14:	cmp	r4, #9
   34e18:	strb	r3, [r2]
   34e1c:	ldr	r2, [r5, #20]
   34e20:	movhi	r3, #87	; 0x57
   34e24:	movls	r3, #48	; 0x30
   34e28:	add	r1, r2, #1
   34e2c:	add	r3, r3, r4
   34e30:	str	r1, [r5, #20]
   34e34:	strb	r3, [r2]
   34e38:	sub	r3, r8, #1
   34e3c:	str	r3, [sp, #4]
   34e40:	add	sl, r7, #1
   34e44:	b	34d0c <flatcc_json_parser_struct_as_root@@Base+0xf24>
   34e48:	cmp	r4, #34	; 0x22
   34e4c:	beq	34f14 <flatcc_json_parser_struct_as_root@@Base+0x112c>
   34e50:	cmp	r4, #92	; 0x5c
   34e54:	beq	34f14 <flatcc_json_parser_struct_as_root@@Base+0x112c>
   34e58:	cmp	r4, #13
   34e5c:	bne	34db4 <flatcc_json_parser_struct_as_root@@Base+0xfcc>
   34e60:	ldr	r3, [r5, #20]
   34e64:	add	r2, r3, #1
   34e68:	str	r2, [r5, #20]
   34e6c:	mov	r2, #114	; 0x72
   34e70:	strb	r2, [r3]
   34e74:	b	34e38 <flatcc_json_parser_struct_as_root@@Base+0x1050>
   34e78:	cmp	r0, r6
   34e7c:	bcs	34f88 <flatcc_json_parser_struct_as_root@@Base+0x11a0>
   34e80:	sub	r6, r6, r0
   34e84:	cmp	r6, r9
   34e88:	mov	r8, r9
   34e8c:	bcs	34ed4 <flatcc_json_parser_struct_as_root@@Base+0x10ec>
   34e90:	mov	r2, r6
   34e94:	mov	r1, sl
   34e98:	bl	1454c <memcpy@plt>
   34e9c:	ldr	r3, [r5, #20]
   34ea0:	mov	r0, r5
   34ea4:	add	r3, r3, r6
   34ea8:	str	r3, [r5, #20]
   34eac:	ldr	r2, [r5, #44]	; 0x2c
   34eb0:	mov	r1, fp
   34eb4:	blx	r2
   34eb8:	ldr	r0, [r5, #20]
   34ebc:	ldr	r3, [r5, #16]
   34ec0:	sub	r8, r8, r6
   34ec4:	add	sl, sl, r6
   34ec8:	sub	r6, r3, r0
   34ecc:	cmp	r8, r6
   34ed0:	bhi	34e90 <flatcc_json_parser_struct_as_root@@Base+0x10a8>
   34ed4:	mov	r2, r8
   34ed8:	mov	r1, sl
   34edc:	bl	1454c <memcpy@plt>
   34ee0:	ldr	r2, [r5, #20]
   34ee4:	add	r3, r2, r8
   34ee8:	ldr	r2, [sp, #4]
   34eec:	str	r3, [r5, #20]
   34ef0:	subs	r8, r2, r9
   34ef4:	bne	34d80 <flatcc_json_parser_struct_as_root@@Base+0xf98>
   34ef8:	mov	r8, r3
   34efc:	add	r2, r3, #1
   34f00:	mov	r3, #34	; 0x22
   34f04:	str	r2, [r5, #20]
   34f08:	strb	r3, [r8]
   34f0c:	add	sp, sp, #12
   34f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f14:	ldr	r3, [r5, #20]
   34f18:	add	r2, r3, #1
   34f1c:	str	r2, [r5, #20]
   34f20:	strb	r4, [r3]
   34f24:	b	34e38 <flatcc_json_parser_struct_as_root@@Base+0x1050>
   34f28:	ldr	r3, [r5, #20]
   34f2c:	add	r2, r3, #1
   34f30:	str	r2, [r5, #20]
   34f34:	mov	r2, #102	; 0x66
   34f38:	strb	r2, [r3]
   34f3c:	b	34e38 <flatcc_json_parser_struct_as_root@@Base+0x1050>
   34f40:	ldr	r3, [r5, #20]
   34f44:	mov	r2, #98	; 0x62
   34f48:	add	r1, r3, #1
   34f4c:	str	r1, [r5, #20]
   34f50:	strb	r2, [r3]
   34f54:	b	34e38 <flatcc_json_parser_struct_as_root@@Base+0x1050>
   34f58:	ldr	r3, [r5, #20]
   34f5c:	mov	r2, #110	; 0x6e
   34f60:	add	r1, r3, #1
   34f64:	str	r1, [r5, #20]
   34f68:	strb	r2, [r3]
   34f6c:	b	34e38 <flatcc_json_parser_struct_as_root@@Base+0x1050>
   34f70:	ldr	r3, [r5, #20]
   34f74:	mov	r2, #116	; 0x74
   34f78:	add	r1, r3, #1
   34f7c:	str	r1, [r5, #20]
   34f80:	strb	r2, [r3]
   34f84:	b	34e38 <flatcc_json_parser_struct_as_root@@Base+0x1050>
   34f88:	mov	r0, r5
   34f8c:	ldr	r3, [r5, #44]	; 0x2c
   34f90:	mov	r1, fp
   34f94:	blx	r3
   34f98:	ldr	r6, [r5, #16]
   34f9c:	ldr	r0, [r5, #20]
   34fa0:	b	34e80 <flatcc_json_parser_struct_as_root@@Base+0x1098>
   34fa4:	mov	r9, fp
   34fa8:	b	34d48 <flatcc_json_parser_struct_as_root@@Base+0xf60>
   34fac:	push	{r4, r5, r6, r7, r8, lr}
   34fb0:	mov	r7, r1
   34fb4:	ldrb	r1, [r0, #25]
   34fb8:	mov	r4, r0
   34fbc:	mov	r6, r2
   34fc0:	cmp	r1, #0
   34fc4:	ldr	r3, [r0, #20]
   34fc8:	bne	350d8 <flatcc_json_parser_struct_as_root@@Base+0x12f0>
   34fcc:	ldr	r2, [r0, #16]
   34fd0:	cmp	r3, r2
   34fd4:	bcs	350c8 <flatcc_json_parser_struct_as_root@@Base+0x12e0>
   34fd8:	mov	r2, #34	; 0x22
   34fdc:	strb	r2, [r3]
   34fe0:	ldrb	r3, [r4, #26]
   34fe4:	ldr	r0, [r4, #20]
   34fe8:	ldr	r5, [r4, #16]
   34fec:	cmp	r3, #0
   34ff0:	addeq	r0, r0, #1
   34ff4:	add	r3, r0, r6
   34ff8:	cmp	r5, r3
   34ffc:	str	r0, [r4, #20]
   35000:	bhi	35060 <flatcc_json_parser_struct_as_root@@Base+0x1278>
   35004:	cmp	r0, r5
   35008:	bcs	350f4 <flatcc_json_parser_struct_as_root@@Base+0x130c>
   3500c:	sub	r5, r5, r0
   35010:	cmp	r6, r5
   35014:	bls	35060 <flatcc_json_parser_struct_as_root@@Base+0x1278>
   35018:	mov	r8, #0
   3501c:	mov	r2, r5
   35020:	mov	r1, r7
   35024:	bl	1454c <memcpy@plt>
   35028:	ldr	r3, [r4, #20]
   3502c:	mov	r0, r4
   35030:	add	r3, r3, r5
   35034:	str	r3, [r4, #20]
   35038:	ldr	r2, [r4, #44]	; 0x2c
   3503c:	mov	r1, r8
   35040:	blx	r2
   35044:	ldr	r0, [r4, #20]
   35048:	ldr	r3, [r4, #16]
   3504c:	sub	r6, r6, r5
   35050:	add	r7, r7, r5
   35054:	sub	r5, r3, r0
   35058:	cmp	r6, r5
   3505c:	bhi	3501c <flatcc_json_parser_struct_as_root@@Base+0x1234>
   35060:	mov	r2, r6
   35064:	mov	r1, r7
   35068:	bl	1454c <memcpy@plt>
   3506c:	ldr	r3, [r4, #20]
   35070:	mov	r0, #58	; 0x3a
   35074:	add	r6, r3, r6
   35078:	mov	r3, #34	; 0x22
   3507c:	str	r6, [r4, #20]
   35080:	strb	r3, [r6]
   35084:	ldr	r1, [r4, #20]
   35088:	ldrb	r3, [r4, #26]
   3508c:	clz	r3, r3
   35090:	lsr	r3, r3, #5
   35094:	add	r2, r1, r3
   35098:	add	r2, r2, #1
   3509c:	str	r2, [r4, #20]
   350a0:	strb	r0, [r1, r3]
   350a4:	ldr	r3, [r4, #20]
   350a8:	mov	r2, #32
   350ac:	strb	r2, [r3]
   350b0:	ldrb	r2, [r4, #25]
   350b4:	ldr	r3, [r4, #20]
   350b8:	cmp	r2, #0
   350bc:	addne	r3, r3, #1
   350c0:	str	r3, [r4, #20]
   350c4:	pop	{r4, r5, r6, r7, r8, pc}
   350c8:	ldr	r3, [r0, #44]	; 0x2c
   350cc:	blx	r3
   350d0:	ldr	r3, [r4, #20]
   350d4:	b	34fd8 <flatcc_json_parser_struct_as_root@@Base+0x11f0>
   350d8:	add	r1, r3, #1
   350dc:	mov	r2, #10
   350e0:	str	r1, [r0, #20]
   350e4:	strb	r2, [r3]
   350e8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   350ec:	ldr	r3, [r4, #20]
   350f0:	b	34fd8 <flatcc_json_parser_struct_as_root@@Base+0x11f0>
   350f4:	mov	r0, r4
   350f8:	ldr	r3, [r4, #44]	; 0x2c
   350fc:	mov	r1, #0
   35100:	blx	r3
   35104:	ldr	r5, [r4, #16]
   35108:	ldr	r0, [r4, #20]
   3510c:	b	3500c <flatcc_json_parser_struct_as_root@@Base+0x1224>
   35110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35114:	sub	sp, sp, #148	; 0x94
   35118:	subs	r1, r0, #0
   3511c:	vstr	d0, [sp, #56]	; 0x38
   35120:	str	r1, [sp, #96]	; 0x60
   35124:	beq	360f8 <flatcc_json_parser_struct_as_root@@Base+0x2310>
   35128:	vmov	r2, r3, d0
   3512c:	vmov	r4, s0
   35130:	adds	r6, r2, r2
   35134:	adc	r7, r3, r3
   35138:	mov	r5, r3
   3513c:	ldr	r3, [pc, #1356]	; 35690 <flatcc_json_parser_struct_as_root@@Base+0x18a8>
   35140:	mov	r2, #0
   35144:	cmp	r7, r3
   35148:	cmpeq	r6, r2
   3514c:	bhi	35b88 <flatcc_json_parser_struct_as_root@@Base+0x1da0>
   35150:	cmp	r4, #0
   35154:	sbcs	r3, r5, #0
   35158:	movlt	r2, r1
   3515c:	vldrlt	d7, [sp, #56]	; 0x38
   35160:	movlt	r3, #45	; 0x2d
   35164:	strblt	r3, [r2]
   35168:	movge	r3, r1
   3516c:	vneglt.f64	d7, d7
   35170:	addlt	r3, r2, #1
   35174:	addlt	r5, r5, #-2147483648	; 0x80000000
   35178:	str	r3, [sp, #12]
   3517c:	vstrlt	d7, [sp, #56]	; 0x38
   35180:	orrs	r3, r4, r5
   35184:	beq	35b60 <flatcc_json_parser_struct_as_root@@Base+0x1d78>
   35188:	ldr	r3, [pc, #1284]	; 35694 <flatcc_json_parser_struct_as_root@@Base+0x18ac>
   3518c:	mov	r2, #0
   35190:	cmp	r5, r3
   35194:	cmpeq	r4, r2
   35198:	beq	35c9c <flatcc_json_parser_struct_as_root@@Base+0x1eb4>
   3519c:	ldrd	r4, [sp, #56]	; 0x38
   351a0:	and	r0, r4, r2
   351a4:	and	r1, r5, r3
   351a8:	orrs	r3, r0, r1
   351ac:	strd	r0, [sp, #24]
   351b0:	beq	35ba0 <flatcc_json_parser_struct_as_root@@Base+0x1db8>
   351b4:	ldr	r6, [pc, #1244]	; 35698 <flatcc_json_parser_struct_as_root@@Base+0x18b0>
   351b8:	ldr	r9, [pc, #1264]	; 356b0 <flatcc_json_parser_struct_as_root@@Base+0x18c8>
   351bc:	mvn	r8, #0
   351c0:	and	r6, r6, r5, lsr #20
   351c4:	and	r3, r9, r5
   351c8:	sub	r6, r6, #1072	; 0x430
   351cc:	and	r2, r8, r4
   351d0:	mov	r1, r3
   351d4:	mov	r8, r2
   351d8:	mov	r9, r3
   351dc:	adds	r2, r2, #0
   351e0:	sub	r3, r6, #3
   351e4:	str	r3, [sp, #16]
   351e8:	adc	r3, r1, #1048576	; 0x100000
   351ec:	mov	fp, r3
   351f0:	ldr	r3, [sp, #16]
   351f4:	sub	r7, r6, #4
   351f8:	mov	sl, r2
   351fc:	sub	lr, r3, #10
   35200:	mov	r2, sl
   35204:	mov	r3, fp
   35208:	lsl	r1, r3, #10
   3520c:	orr	r1, r1, r2, lsr #22
   35210:	lsl	r0, r2, #10
   35214:	mov	r3, r1
   35218:	ldr	r1, [pc, #1148]	; 3569c <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   3521c:	mov	r2, r0
   35220:	mov	r0, #0
   35224:	and	r4, r0, r2
   35228:	and	r5, r1, r3
   3522c:	orrs	r1, r4, r5
   35230:	mov	ip, lr
   35234:	sub	lr, lr, #10
   35238:	beq	35208 <flatcc_json_parser_struct_as_root@@Base+0x1420>
   3523c:	mov	r5, r3
   35240:	mov	r4, r2
   35244:	cmp	r2, #0
   35248:	sbcs	r3, r3, #0
   3524c:	strd	r4, [sp]
   35250:	blt	3527c <flatcc_json_parser_struct_as_root@@Base+0x1494>
   35254:	sub	r1, ip, #1
   35258:	mov	r3, r5
   3525c:	adds	r2, r2, r2
   35260:	adc	r3, r3, r3
   35264:	cmp	r2, #0
   35268:	sbcs	r0, r3, #0
   3526c:	mov	ip, r1
   35270:	sub	r1, r1, #1
   35274:	bge	3525c <flatcc_json_parser_struct_as_root@@Base+0x1474>
   35278:	strd	r2, [sp]
   3527c:	adds	r2, sl, sl
   35280:	adc	r3, fp, fp
   35284:	adds	r0, r2, #1
   35288:	adc	r1, r3, #0
   3528c:	sub	r6, r7, #10
   35290:	strd	r2, [sp, #40]	; 0x28
   35294:	lsl	lr, r1, #10
   35298:	lsl	r4, r0, #10
   3529c:	ldr	r5, [pc, #1016]	; 3569c <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   352a0:	orr	lr, lr, r0, lsr #22
   352a4:	mov	r0, r4
   352a8:	mov	r4, #0
   352ac:	and	r3, r5, lr
   352b0:	and	r2, r4, r0
   352b4:	mov	r4, r2
   352b8:	mov	r5, r3
   352bc:	mov	r1, lr
   352c0:	orrs	lr, r4, r5
   352c4:	mov	lr, r6
   352c8:	sub	r6, r6, #10
   352cc:	beq	35294 <flatcc_json_parser_struct_as_root@@Base+0x14ac>
   352d0:	cmp	r0, #0
   352d4:	sbcs	r3, r1, #0
   352d8:	strd	r0, [sp, #32]
   352dc:	blt	3530c <flatcc_json_parser_struct_as_root@@Base+0x1524>
   352e0:	ldrd	r2, [sp]
   352e4:	sub	r4, lr, #1
   352e8:	adds	r0, r0, r0
   352ec:	adc	r1, r1, r1
   352f0:	cmp	r0, #0
   352f4:	sbcs	lr, r1, #0
   352f8:	mov	lr, r4
   352fc:	sub	r4, r4, #1
   35300:	bge	352e8 <flatcc_json_parser_struct_as_root@@Base+0x1500>
   35304:	strd	r2, [sp]
   35308:	strd	r0, [sp, #32]
   3530c:	vldr	d7, [sp, #56]	; 0x38
   35310:	vcmpe.f64	d7, #0.0
   35314:	vmrs	APSR_nzcv, fpscr
   35318:	ble	36110 <flatcc_json_parser_struct_as_root@@Base+0x2328>
   3531c:	vmov.f64	d6, d7
   35320:	vldr	d7, [pc, #848]	; 35678 <flatcc_json_parser_struct_as_root@@Base+0x1890>
   35324:	vcmpe.f64	d6, d7
   35328:	vmrs	APSR_nzcv, fpscr
   3532c:	bhi	36110 <flatcc_json_parser_struct_as_root@@Base+0x2328>
   35330:	ldr	r5, [sp, #28]
   35334:	orr	r4, r8, r9
   35338:	adds	r5, r5, #0
   3533c:	movne	r5, #1
   35340:	cmp	r4, #0
   35344:	movne	r5, #0
   35348:	cmp	r5, #0
   3534c:	bne	35f80 <flatcc_json_parser_struct_as_root@@Base+0x2198>
   35350:	ldrd	r4, [sp, #40]	; 0x28
   35354:	subs	r4, r4, #1
   35358:	sbc	r5, r5, #0
   3535c:	mov	r2, r4
   35360:	mov	r3, r5
   35364:	mvn	r6, #60	; 0x3c
   35368:	sub	r6, r6, ip
   3536c:	vldr	d5, [pc, #780]	; 35680 <flatcc_json_parser_struct_as_root@@Base+0x1898>
   35370:	vmov	s15, r6
   35374:	vldr	d6, [pc, #780]	; 35688 <flatcc_json_parser_struct_as_root@@Base+0x18a0>
   35378:	sub	r6, r7, lr
   3537c:	sub	r7, r6, #32
   35380:	vcvt.f64.s32	d7, s15
   35384:	lsl	fp, r3, r6
   35388:	rsb	r5, r6, #32
   3538c:	orr	fp, fp, r2, lsl r7
   35390:	lsl	sl, r2, r6
   35394:	vmul.f64	d7, d7, d5
   35398:	orr	fp, fp, r2, lsr r5
   3539c:	vcmpe.f64	d7, d6
   353a0:	vcvt.s32.f64	s11, d7
   353a4:	vmrs	APSR_nzcv, fpscr
   353a8:	vmov	r4, s11
   353ac:	bmi	353c4 <flatcc_json_parser_struct_as_root@@Base+0x15dc>
   353b0:	vcvt.f64.s32	d5, s11
   353b4:	vsub.f64	d7, d7, d5
   353b8:	vcmp.f64	d7, d6
   353bc:	vmrs	APSR_nzcv, fpscr
   353c0:	addne	r4, r4, #1
   353c4:	add	r4, r4, #344	; 0x158
   353c8:	adds	r8, r4, #3
   353cc:	addmi	r8, r4, #10
   353d0:	ldr	r3, [pc, #712]	; 356a0 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   353d4:	asr	r8, r8, #3
   353d8:	add	r8, r8, #1
   353dc:	add	r4, r3, #304	; 0x130
   353e0:	lsl	r3, r8, #4
   353e4:	add	r4, r4, r3
   353e8:	str	r3, [sp, #100]	; 0x64
   353ec:	mov	r3, #0
   353f0:	mov	r1, r3
   353f4:	ldrd	r2, [r4, #-8]
   353f8:	ldrd	r6, [sp]
   353fc:	mov	r7, #0
   35400:	mov	r8, r2
   35404:	mov	r9, r3
   35408:	ldrd	r2, [sp, #32]
   3540c:	mov	r3, #0
   35410:	mov	r5, r3
   35414:	mov	r4, r2
   35418:	mul	r2, r8, r1
   3541c:	strd	r4, [sp, #24]
   35420:	mov	r4, sl
   35424:	mov	r5, r1
   35428:	ldr	r1, [sp, #28]
   3542c:	strd	r4, [sp, #80]	; 0x50
   35430:	strd	r6, [sp, #40]	; 0x28
   35434:	mul	r0, r8, r1
   35438:	ldr	r1, [sp, #80]	; 0x50
   3543c:	mov	r7, #0
   35440:	ldr	r3, [sp, #4]
   35444:	mla	r2, r1, r7, r2
   35448:	ldr	r1, [sp, #24]
   3544c:	umull	r4, r5, r8, sl
   35450:	mla	r1, r1, r7, r0
   35454:	mov	r6, r8
   35458:	str	r1, [sp, #124]	; 0x7c
   3545c:	umull	r0, r1, r3, r8
   35460:	add	r3, r2, r5
   35464:	ldrd	r4, [sp, #40]	; 0x28
   35468:	strd	r0, [sp, #72]	; 0x48
   3546c:	umull	r0, r1, r8, fp
   35470:	str	r3, [sp, #48]	; 0x30
   35474:	umull	r2, r3, r4, r9
   35478:	strd	r0, [sp, #88]	; 0x58
   3547c:	mov	r0, r8
   35480:	strd	r2, [sp, #64]	; 0x40
   35484:	ldr	r3, [sp, #92]	; 0x5c
   35488:	mov	r1, r9
   3548c:	mla	r2, fp, r7, r3
   35490:	umull	sl, fp, r9, fp
   35494:	ldr	r9, [pc, #516]	; 356a0 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   35498:	ldr	r3, [sp, #100]	; 0x64
   3549c:	strd	sl, [sp, #112]	; 0x70
   354a0:	mov	fp, r5
   354a4:	mul	r5, r4, r7
   354a8:	strd	r0, [sp, #16]
   354ac:	add	r0, r9, #296	; 0x128
   354b0:	mla	r9, r8, fp, r5
   354b4:	add	r3, r0, r3
   354b8:	mov	r0, #0
   354bc:	str	r0, [sp, #52]	; 0x34
   354c0:	str	r9, [sp, #120]	; 0x78
   354c4:	ldrd	r8, [sp, #48]	; 0x30
   354c8:	str	r3, [sp, #100]	; 0x64
   354cc:	ldr	r3, [sp, #88]	; 0x58
   354d0:	str	r2, [sp, #48]	; 0x30
   354d4:	adds	r8, r8, r3
   354d8:	adc	r9, r9, #0
   354dc:	adds	sl, r8, #-2147483648	; 0x80000000
   354e0:	adc	fp, r9, #0
   354e4:	ldr	r3, [sp, #36]	; 0x24
   354e8:	strd	sl, [sp, #104]	; 0x68
   354ec:	ldr	fp, [sp, #24]
   354f0:	umull	r8, r9, r6, r3
   354f4:	umull	r4, r5, r6, fp
   354f8:	strd	r8, [sp, #88]	; 0x58
   354fc:	strd	r4, [sp, #128]	; 0x80
   35500:	ldrd	sl, [sp, #112]	; 0x70
   35504:	str	r0, [sp, #52]	; 0x34
   35508:	ldrd	r8, [sp, #80]	; 0x50
   3550c:	subs	sl, sl, #1
   35510:	sbc	fp, fp, #0
   35514:	mov	r4, sl
   35518:	mov	r5, fp
   3551c:	ldrd	sl, [sp, #48]	; 0x30
   35520:	ldrd	r2, [sp, #16]
   35524:	adds	sl, sl, r4
   35528:	adc	fp, fp, r5
   3552c:	umull	r4, r5, r3, r8
   35530:	mov	r8, r9
   35534:	mla	r2, r3, r8, r5
   35538:	ldrd	r8, [sp, #104]	; 0x68
   3553c:	adds	r8, r8, r4
   35540:	adc	r9, r9, #0
   35544:	adds	r2, sl, r2
   35548:	adc	r3, fp, r0
   3554c:	ldrd	r4, [sp, #32]
   35550:	strd	r2, [sp, #80]	; 0x50
   35554:	ldrd	r2, [sp, #16]
   35558:	mov	sl, r9
   3555c:	ldr	r9, [sp, #92]	; 0x5c
   35560:	mla	r1, r5, r7, r9
   35564:	umull	r4, r5, r3, r5
   35568:	strd	r4, [sp, #32]
   3556c:	ldrd	r4, [sp, #24]
   35570:	str	r0, [sp, #28]
   35574:	umull	r8, r9, r3, r4
   35578:	mla	r2, r3, r5, r9
   3557c:	ldrd	r4, [sp, #32]
   35580:	strd	r8, [sp, #48]	; 0x30
   35584:	ldrd	r8, [sp, #80]	; 0x50
   35588:	adds	r4, r4, #1
   3558c:	adc	r5, r5, #0
   35590:	adds	r8, r8, sl
   35594:	adc	r9, r9, r0
   35598:	adds	sl, r1, r4
   3559c:	mov	r4, r2
   355a0:	ldrd	r2, [sp, #40]	; 0x28
   355a4:	strd	r8, [sp, #32]
   355a8:	ldr	r1, [sp, #76]	; 0x4c
   355ac:	umull	r8, r9, r2, r6
   355b0:	ldr	r2, [sp, #68]	; 0x44
   355b4:	adc	fp, r0, r5
   355b8:	strd	r8, [sp, #40]	; 0x28
   355bc:	ldr	r8, [sp, #4]
   355c0:	adds	r6, sl, r4
   355c4:	ldr	r5, [sp, #124]	; 0x7c
   355c8:	mla	r1, r8, r7, r1
   355cc:	ldr	r7, [sp, #20]
   355d0:	ldr	sl, [sp, #88]	; 0x58
   355d4:	mla	r2, r7, r3, r2
   355d8:	adc	r7, fp, r0
   355dc:	strd	r6, [sp, #80]	; 0x50
   355e0:	ldr	r7, [sp, #132]	; 0x84
   355e4:	add	r3, r5, r7
   355e8:	adds	r6, r3, sl
   355ec:	ldr	r5, [sp, #120]	; 0x78
   355f0:	ldr	r3, [sp, #44]	; 0x2c
   355f4:	adc	r7, r0, #0
   355f8:	adds	r8, r6, #-2147483648	; 0x80000000
   355fc:	adc	r9, r7, #0
   35600:	add	r3, r5, r3
   35604:	str	r3, [sp, #24]
   35608:	ldr	r7, [sp, #72]	; 0x48
   3560c:	strd	r8, [sp, #40]	; 0x28
   35610:	ldrd	r4, [sp, #24]
   35614:	ldrd	r8, [sp, #40]	; 0x28
   35618:	ldr	sl, [sp, #48]	; 0x30
   3561c:	adds	r4, r4, r7
   35620:	adc	r5, r5, #0
   35624:	adds	r6, r2, r1
   35628:	adc	r7, r0, r0
   3562c:	adds	r8, r8, sl
   35630:	adc	r9, r9, #0
   35634:	adds	r2, r4, #-2147483648	; 0x80000000
   35638:	adc	r3, r5, #0
   3563c:	ldr	r5, [sp, #20]
   35640:	strd	r2, [sp, #24]
   35644:	ldr	r3, [sp, #4]
   35648:	ldr	r2, [sp, #64]	; 0x40
   3564c:	ldr	r1, [sp, #100]	; 0x64
   35650:	umlal	r6, r7, r5, r3
   35654:	ldrd	r4, [sp, #24]
   35658:	ldrsh	r3, [r1, #8]
   3565c:	strd	r6, [sp]
   35660:	adds	r4, r4, r2
   35664:	adc	r5, r5, #0
   35668:	mov	r6, r5
   3566c:	ldrd	r4, [sp, #80]	; 0x50
   35670:	b	356d8 <flatcc_json_parser_struct_as_root@@Base+0x18f0>
   35674:	nop			; (mov r0, r0)
   35678:			; <UNDEFINED> instruction: 0xffffffff
   3567c:	svcvc	0x00efffff
   35680:			; <UNDEFINED> instruction: 0x509f79fe
   35684:	svccc	0x00d34413
	...
   35690:			; <UNDEFINED> instruction: 0xffe00000
   35694:	svcvc	0x00f00000	; IMB
   35698:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3569c:			; <UNDEFINED> instruction: 0xffc00000
   356a0:	andeq	r7, r4, r0, asr r4
   356a4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   356a8:			; <UNDEFINED> instruction: 0x00047cb8
   356ac:	andeq	r7, r4, r0, lsl #25
   356b0:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   356b4:			; <UNDEFINED> instruction: 0xfffffbce
   356b8:			; <UNDEFINED> instruction: 0xfffffbcd
   356bc:	rsbeq	r6, r6, r9, ror #28
   356c0:	strbtvs	r6, [r6], -r7, ror #12
   356c4:	andeq	r7, r4, r8, asr r5
   356c8:	andeq	r7, r4, ip, ror ip
   356cc:	andeq	r7, r4, ip, ror #10
   356d0:	andeq	r7, r4, r4, lsr #24
   356d4:	muleq	r4, r0, ip
   356d8:	add	lr, lr, r3
   356dc:	add	ip, r3, ip
   356e0:	adds	r4, r4, r9
   356e4:	adc	r5, r5, r0
   356e8:	mov	sl, r4
   356ec:	mov	fp, r5
   356f0:	ldrd	r4, [sp, #32]
   356f4:	ldrd	r8, [sp]
   356f8:	add	r3, lr, #64	; 0x40
   356fc:	subs	r4, sl, r4
   35700:	sbc	r5, fp, r5
   35704:	str	r3, [sp, #120]	; 0x78
   35708:	strd	r4, [sp, #16]
   3570c:	ldrd	r4, [sp, #32]
   35710:	ldrsh	r3, [r1, #10]
   35714:	adds	r8, r8, r6
   35718:	adc	r9, r9, r0
   3571c:	cmp	r5, fp
   35720:	str	r3, [sp, #104]	; 0x68
   35724:	cmpeq	r4, sl
   35728:	add	r3, ip, #64	; 0x40
   3572c:	strd	sl, [sp, #80]	; 0x50
   35730:	strd	r8, [sp, #88]	; 0x58
   35734:	str	r3, [sp, #100]	; 0x64
   35738:	bhi	3610c <flatcc_json_parser_struct_as_root@@Base+0x2324>
   3573c:	add	r3, ip, #129	; 0x81
   35740:	mvn	r8, #63	; 0x3f
   35744:	add	r1, r3, r3, lsl #4
   35748:	sub	r8, r8, ip
   3574c:	add	r3, r3, r1, lsl #3
   35750:	sub	lr, r8, #32
   35754:	mov	r1, #1
   35758:	add	r3, r3, r3, lsl #3
   3575c:	mov	r4, #0
   35760:	asr	ip, r3, #12
   35764:	mov	r5, #0
   35768:	lsl	r3, r1, lr
   3576c:	strd	r4, [sp, #64]	; 0x40
   35770:	str	r3, [sp, #68]	; 0x44
   35774:	rsb	r9, r8, #32
   35778:	ldrd	r2, [sp, #80]	; 0x50
   3577c:	ldr	r4, [sp, #68]	; 0x44
   35780:	add	r6, ip, r1
   35784:	ldr	r0, [pc, #-236]	; 356a0 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   35788:	orr	r4, r4, r1, lsr r9
   3578c:	lsl	r1, r1, r8
   35790:	add	r0, r0, r6, lsl #2
   35794:	lsr	r5, r2, r8
   35798:	str	r4, [sp, #68]	; 0x44
   3579c:	str	r1, [sp, #64]	; 0x40
   357a0:	ldr	r4, [r0, #1688]	; 0x698
   357a4:	orr	r5, r5, r3, lsl r9
   357a8:	ldrd	r0, [sp, #64]	; 0x40
   357ac:	orr	r5, r5, r3, lsr lr
   357b0:	subs	r0, r0, #1
   357b4:	sbc	r1, r1, #0
   357b8:	cmp	r5, r4
   357bc:	strd	r0, [sp, #72]	; 0x48
   357c0:	and	r3, r3, r1
   357c4:	ldrcc	r1, [pc, #-300]	; 356a0 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   357c8:	movcc	r6, ip
   357cc:	addcc	r1, r1, ip, lsl #2
   357d0:	str	lr, [sp]
   357d4:	ldrcc	r4, [r1, #1688]	; 0x698
   357d8:	cmp	r6, #0
   357dc:	and	r2, r2, r0
   357e0:	ble	360c4 <flatcc_json_parser_struct_as_root@@Base+0x22dc>
   357e4:	mov	r1, r4
   357e8:	mov	r0, r5
   357ec:	strd	r2, [sp, #24]
   357f0:	bl	40f4c <flatcc_json_printer_clear@@Base+0x38>
   357f4:	ldr	r3, [sp, #12]
   357f8:	mov	r1, r4
   357fc:	sub	r6, r6, #1
   35800:	add	r0, r0, #48	; 0x30
   35804:	strb	r0, [r3]
   35808:	mov	r0, r5
   3580c:	bl	41138 <flatcc_json_printer_clear@@Base+0x224>
   35810:	ldr	r3, [sp]
   35814:	mov	ip, #0
   35818:	mov	r5, r1
   3581c:	lsl	r1, r1, r3
   35820:	ldrd	r2, [sp, #24]
   35824:	lsl	r0, r5, r8
   35828:	orr	r1, r1, r5, lsr r9
   3582c:	adds	sl, r0, r2
   35830:	adc	fp, r1, r3
   35834:	ldrd	r0, [sp, #16]
   35838:	strd	sl, [sp, #40]	; 0x28
   3583c:	cmp	r1, fp
   35840:	cmpeq	r0, sl
   35844:	bhi	360cc <flatcc_json_parser_struct_as_root@@Base+0x22e4>
   35848:	ldr	fp, [pc, #-428]	; 356a4 <flatcc_json_parser_struct_as_root@@Base+0x18bc>
   3584c:	str	ip, [sp, #48]	; 0x30
   35850:	ldr	sl, [sp, #12]
   35854:	mov	r7, #1
   35858:	str	r8, [sp, #24]
   3585c:	strd	r2, [sp, #40]	; 0x28
   35860:	str	r9, [sp, #32]
   35864:	b	358c8 <flatcc_json_parser_struct_as_root@@Base+0x1ae0>
   35868:	mov	r1, r4
   3586c:	mov	r0, r5
   35870:	bl	40f4c <flatcc_json_printer_clear@@Base+0x38>
   35874:	mov	r1, r4
   35878:	add	r7, r7, #1
   3587c:	sub	r6, r6, #1
   35880:	add	r0, r0, #48	; 0x30
   35884:	strb	r0, [sl, #1]!
   35888:	mov	r0, r5
   3588c:	bl	41138 <flatcc_json_printer_clear@@Base+0x224>
   35890:	ldr	r3, [sp]
   35894:	lsl	r9, r1, r3
   35898:	ldr	r3, [sp, #32]
   3589c:	mov	r5, r1
   358a0:	orr	r9, r9, r1, lsr r3
   358a4:	ldr	r3, [sp, #24]
   358a8:	lsl	r8, r1, r3
   358ac:	ldrd	r0, [sp, #40]	; 0x28
   358b0:	ldrd	r2, [sp, #16]
   358b4:	adds	r0, r0, r8
   358b8:	adc	r1, r1, r9
   358bc:	cmp	r3, r1
   358c0:	cmpeq	r2, r0
   358c4:	bhi	35cb8 <flatcc_json_parser_struct_as_root@@Base+0x1ed0>
   358c8:	umull	r3, r4, fp, r4
   358cc:	cmp	r6, #0
   358d0:	lsr	r4, r4, #3
   358d4:	bne	35868 <flatcc_json_parser_struct_as_root@@Base+0x1a80>
   358d8:	ldr	r8, [sp, #24]
   358dc:	ldrd	r2, [sp, #40]	; 0x28
   358e0:	ldr	r9, [sp, #32]
   358e4:	ldr	r1, [sp, #12]
   358e8:	str	r8, [sp, #24]
   358ec:	add	r4, r1, r7
   358f0:	str	r9, [sp, #32]
   358f4:	ldrd	r8, [sp, #16]
   358f8:	mov	sl, #1
   358fc:	mov	fp, #0
   35900:	mov	lr, #10
   35904:	mov	r0, r4
   35908:	umull	r4, r5, r2, lr
   3590c:	mul	r1, lr, r9
   35910:	mla	r5, lr, r3, r5
   35914:	ldr	r3, [sp, #24]
   35918:	str	r1, [sp, #16]
   3591c:	umull	r8, r9, r8, lr
   35920:	lsr	r1, r4, r3
   35924:	ldr	r3, [sp, #32]
   35928:	mul	ip, lr, fp
   3592c:	orr	r1, r1, r5, lsl r3
   35930:	ldr	r3, [sp]
   35934:	umull	sl, fp, sl, lr
   35938:	orr	r1, r1, r5, lsr r3
   3593c:	ldrd	r2, [sp, #72]	; 0x48
   35940:	add	r1, r1, #48	; 0x30
   35944:	add	r7, r7, #1
   35948:	and	r2, r2, r4
   3594c:	ldr	r4, [sp, #16]
   35950:	and	r3, r3, r5
   35954:	add	r9, r4, r9
   35958:	cmp	r9, r3
   3595c:	cmpeq	r8, r2
   35960:	sub	r6, r6, #1
   35964:	strb	r1, [r0], #1
   35968:	add	fp, ip, fp
   3596c:	bls	35908 <flatcc_json_parser_struct_as_root@@Base+0x1b20>
   35970:	ldrd	r4, [sp, #88]	; 0x58
   35974:	ldrd	r0, [sp, #80]	; 0x50
   35978:	strd	r8, [sp, #16]
   3597c:	subs	r0, r0, r4
   35980:	sbc	r1, r1, r5
   35984:	strd	r0, [sp]
   35988:	ldrd	r0, [sp, #80]	; 0x50
   3598c:	cmp	r5, r1
   35990:	cmpeq	r4, r0
   35994:	ldr	r1, [sp, #100]	; 0x64
   35998:	ldr	r0, [sp, #120]	; 0x78
   3599c:	movhi	lr, #1
   359a0:	movls	lr, #0
   359a4:	cmp	r1, r0
   359a8:	orrne	lr, lr, #1
   359ac:	cmp	lr, #0
   359b0:	bne	3610c <flatcc_json_parser_struct_as_root@@Base+0x2324>
   359b4:	ldrd	r4, [sp]
   359b8:	ldr	r0, [sp]
   359bc:	mul	r1, sl, r5
   359c0:	umull	r4, r5, sl, r4
   359c4:	mla	r0, r0, fp, r1
   359c8:	strd	r4, [sp, #32]
   359cc:	add	r1, r0, r5
   359d0:	str	r1, [sp, #36]	; 0x24
   359d4:	ldrd	r0, [sp, #32]
   359d8:	subs	r0, r0, sl
   359dc:	sbc	r1, r1, fp
   359e0:	cmp	r3, r1
   359e4:	cmpeq	r2, r0
   359e8:	strd	r0, [sp]
   359ec:	bcs	360b0 <flatcc_json_parser_struct_as_root@@Base+0x22c8>
   359f0:	subs	r0, r8, r2
   359f4:	sbc	r1, r9, r3
   359f8:	mov	r4, r8
   359fc:	mov	r5, r9
   35a00:	ldrd	r8, [sp, #64]	; 0x40
   35a04:	cmp	r9, r1
   35a08:	cmpeq	r8, r0
   35a0c:	bhi	360dc <flatcc_json_parser_struct_as_root@@Base+0x22f4>
   35a10:	subs	r4, r4, r8
   35a14:	ldr	r0, [sp, #12]
   35a18:	sbc	r5, r5, r9
   35a1c:	sub	r1, r7, #1
   35a20:	subs	r4, r4, r2
   35a24:	strd	sl, [sp, #24]
   35a28:	sbc	r5, r5, r3
   35a2c:	add	lr, r0, r1
   35a30:	mov	ip, r7
   35a34:	mov	fp, r6
   35a38:	ldrd	r6, [sp]
   35a3c:	adds	r0, r8, r2
   35a40:	adc	r1, r9, r3
   35a44:	cmp	r7, r1
   35a48:	cmpeq	r6, r0
   35a4c:	bhi	35c68 <flatcc_json_parser_struct_as_root@@Base+0x1e80>
   35a50:	mov	r4, r6
   35a54:	mov	r5, r7
   35a58:	subs	r8, r4, r2
   35a5c:	sbc	r9, r5, r3
   35a60:	subs	r4, r0, r4
   35a64:	sbc	r5, r1, r5
   35a68:	cmp	r9, r5
   35a6c:	cmpeq	r8, r4
   35a70:	mov	r6, fp
   35a74:	mov	r7, ip
   35a78:	ldrd	sl, [sp, #24]
   35a7c:	bcc	360b0 <flatcc_json_parser_struct_as_root@@Base+0x22c8>
   35a80:	ldr	r3, [sp, #12]
   35a84:	sub	ip, ip, #1
   35a88:	ldrb	r2, [r3, ip]
   35a8c:	sub	r2, r2, #1
   35a90:	strb	r2, [r3, ip]
   35a94:	ldrd	r8, [sp, #32]
   35a98:	adds	r8, r8, sl
   35a9c:	adc	r9, r9, fp
   35aa0:	cmp	r9, r1
   35aa4:	cmpeq	r8, r0
   35aa8:	bls	35b00 <flatcc_json_parser_struct_as_root@@Base+0x1d18>
   35aac:	ldrd	r4, [sp, #16]
   35ab0:	ldrd	r2, [sp, #64]	; 0x40
   35ab4:	subs	r4, r4, r0
   35ab8:	sbc	r5, r5, r1
   35abc:	cmp	r3, r5
   35ac0:	cmpeq	r2, r4
   35ac4:	bhi	35b00 <flatcc_json_parser_struct_as_root@@Base+0x1d18>
   35ac8:	adds	r2, r2, r0
   35acc:	adc	r3, r3, r1
   35ad0:	mov	r5, r3
   35ad4:	mov	r4, r2
   35ad8:	cmp	r9, r5
   35adc:	cmpeq	r8, r4
   35ae0:	bhi	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35ae4:	subs	r2, r4, r8
   35ae8:	sbc	r3, r5, r9
   35aec:	subs	r8, r8, r0
   35af0:	sbc	r9, r9, r1
   35af4:	cmp	r9, r3
   35af8:	cmpeq	r8, r2
   35afc:	bhi	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35b00:	adds	r4, sl, sl
   35b04:	adc	r5, fp, fp
   35b08:	cmp	r5, r1
   35b0c:	cmpeq	r4, r0
   35b10:	bhi	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35b14:	ldrd	r2, [sp, #16]
   35b18:	lsl	r5, fp, #2
   35b1c:	lsl	r4, sl, #2
   35b20:	subs	r2, r2, r4
   35b24:	orr	r5, r5, sl, lsr #30
   35b28:	sbc	r3, r3, r5
   35b2c:	cmp	r3, r1
   35b30:	cmpeq	r2, r0
   35b34:	bcs	35c04 <flatcc_json_parser_struct_as_root@@Base+0x1e1c>
   35b38:	ldr	r4, [sp, #12]
   35b3c:	ldrd	r2, [sp, #56]	; 0x38
   35b40:	ldr	r1, [pc, #-1184]	; 356a8 <flatcc_json_parser_struct_as_root@@Base+0x18c0>
   35b44:	mov	r0, r4
   35b48:	bl	14600 <sprintf@plt>
   35b4c:	ldr	r3, [sp, #96]	; 0x60
   35b50:	sub	r3, r4, r3
   35b54:	add	r0, r3, r0
   35b58:	add	sp, sp, #148	; 0x94
   35b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b60:	ldr	r1, [sp, #12]
   35b64:	mov	r2, #48	; 0x30
   35b68:	mov	r0, r1
   35b6c:	mov	r3, #0
   35b70:	strb	r2, [r1]
   35b74:	strb	r3, [r0, #1]!
   35b78:	ldr	r3, [sp, #96]	; 0x60
   35b7c:	sub	r0, r0, r3
   35b80:	add	sp, sp, #148	; 0x94
   35b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b88:	vmov	r3, s0
   35b8c:	mov	r2, r5
   35b90:	ldr	r1, [pc, #-1260]	; 356ac <flatcc_json_parser_struct_as_root@@Base+0x18c4>
   35b94:	add	sp, sp, #148	; 0x94
   35b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b9c:	b	14600 <sprintf@plt>
   35ba0:	ldr	fp, [pc, #-1272]	; 356b0 <flatcc_json_parser_struct_as_root@@Base+0x18c8>
   35ba4:	mvn	sl, #0
   35ba8:	and	r3, fp, r5
   35bac:	and	r2, sl, r4
   35bb0:	mov	r1, r3
   35bb4:	mov	fp, r3
   35bb8:	orrs	r3, r2, r3
   35bbc:	mov	sl, r2
   35bc0:	beq	36124 <flatcc_json_parser_struct_as_root@@Base+0x233c>
   35bc4:	ldr	r3, [pc, #-1304]	; 356b4 <flatcc_json_parser_struct_as_root@@Base+0x18cc>
   35bc8:	mov	r8, r2
   35bcc:	mov	r9, r1
   35bd0:	ldr	r7, [pc, #-1312]	; 356b8 <flatcc_json_parser_struct_as_root@@Base+0x18d0>
   35bd4:	str	r3, [sp, #16]
   35bd8:	b	351fc <flatcc_json_parser_struct_as_root@@Base+0x1414>
   35bdc:	mov	r7, lr
   35be0:	cmp	fp, #0
   35be4:	cmpeq	sl, #1
   35be8:	bls	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35bec:	ldrd	r4, [sp, #16]
   35bf0:	subs	r4, r4, #4
   35bf4:	sbc	r5, r5, #0
   35bf8:	cmp	r5, fp
   35bfc:	cmpeq	r4, sl
   35c00:	bcc	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35c04:	ldr	r3, [sp, #104]	; 0x68
   35c08:	cmp	r7, #2
   35c0c:	sub	r6, r6, r3
   35c10:	movle	r2, #1
   35c14:	subgt	r2, r7, #1
   35c18:	cmp	r6, #0
   35c1c:	blt	35e7c <flatcc_json_parser_struct_as_root@@Base+0x2094>
   35c20:	cmp	r6, #2
   35c24:	bgt	36094 <flatcc_json_parser_struct_as_root@@Base+0x22ac>
   35c28:	cmp	r6, #0
   35c2c:	ble	360d4 <flatcc_json_parser_struct_as_root@@Base+0x22ec>
   35c30:	ldr	r3, [sp, #12]
   35c34:	mov	r2, r6
   35c38:	mov	r1, #48	; 0x30
   35c3c:	add	r0, r3, r7
   35c40:	bl	145c4 <memset@plt>
   35c44:	add	ip, r6, r7
   35c48:	ldr	r2, [sp, #12]
   35c4c:	ldr	r1, [sp, #96]	; 0x60
   35c50:	add	r0, r2, ip
   35c54:	mov	r3, #0
   35c58:	sub	r0, r0, r1
   35c5c:	strb	r3, [r2, ip]
   35c60:	add	sp, sp, #148	; 0x94
   35c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c68:	ldrb	r3, [lr]
   35c6c:	subs	r6, r4, r8
   35c70:	sbc	r7, r5, r9
   35c74:	cmp	r9, r5
   35c78:	sub	r3, r3, #1
   35c7c:	cmpeq	r8, r4
   35c80:	strb	r3, [lr]
   35c84:	mov	r2, r0
   35c88:	mov	r3, r1
   35c8c:	bhi	35fa0 <flatcc_json_parser_struct_as_root@@Base+0x21b8>
   35c90:	mov	r4, r6
   35c94:	mov	r5, r7
   35c98:	b	35a38 <flatcc_json_parser_struct_as_root@@Base+0x1c50>
   35c9c:	ldr	r0, [sp, #12]
   35ca0:	ldr	r3, [pc, #-1516]	; 356bc <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   35ca4:	str	r3, [r0], #3
   35ca8:	ldr	r3, [sp, #96]	; 0x60
   35cac:	sub	r0, r0, r3
   35cb0:	add	sp, sp, #148	; 0x94
   35cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35cb8:	ldr	r8, [sp, #24]
   35cbc:	ldr	r9, [sp, #32]
   35cc0:	strd	r0, [sp, #40]	; 0x28
   35cc4:	ldrd	r0, [sp, #80]	; 0x50
   35cc8:	ldrd	sl, [sp, #88]	; 0x58
   35ccc:	subs	r2, r0, sl
   35cd0:	sbc	r3, r1, fp
   35cd4:	cmp	fp, r1
   35cd8:	cmpeq	sl, r0
   35cdc:	ldr	r1, [sp, #100]	; 0x64
   35ce0:	ldr	r0, [sp, #120]	; 0x78
   35ce4:	movhi	lr, #1
   35ce8:	movls	lr, #0
   35cec:	cmp	r1, r0
   35cf0:	orrne	lr, lr, #1
   35cf4:	cmp	lr, #0
   35cf8:	strd	r2, [sp, #32]
   35cfc:	bne	3610c <flatcc_json_parser_struct_as_root@@Base+0x2324>
   35d00:	ldr	r1, [sp]
   35d04:	subs	r2, r2, #1
   35d08:	ldrd	sl, [sp, #40]	; 0x28
   35d0c:	sbc	r3, r3, #0
   35d10:	lsl	r1, r4, r1
   35d14:	cmp	r3, fp
   35d18:	strd	r2, [sp]
   35d1c:	orr	r1, r1, r4, lsr r9
   35d20:	lsl	r3, r4, r8
   35d24:	cmpeq	r2, sl
   35d28:	str	r1, [sp, #28]
   35d2c:	str	r3, [sp, #24]
   35d30:	bls	35dd8 <flatcc_json_parser_struct_as_root@@Base+0x1ff0>
   35d34:	ldrd	r4, [sp, #16]
   35d38:	ldrd	r8, [sp, #24]
   35d3c:	subs	r2, r4, sl
   35d40:	sbc	r3, r5, fp
   35d44:	mov	r5, r3
   35d48:	mov	r4, r2
   35d4c:	cmp	r9, r5
   35d50:	cmpeq	r8, r4
   35d54:	mov	r2, r8
   35d58:	bhi	35be0 <flatcc_json_parser_struct_as_root@@Base+0x1df8>
   35d5c:	ldr	r3, [sp, #12]
   35d60:	subs	r0, r4, r8
   35d64:	sub	r2, r7, #1
   35d68:	sbc	r1, r5, r9
   35d6c:	add	r2, r3, r2
   35d70:	mov	r4, r0
   35d74:	mov	r5, r1
   35d78:	mov	r0, sl
   35d7c:	mov	r1, fp
   35d80:	mov	lr, r7
   35d84:	mov	ip, r2
   35d88:	ldrd	r2, [sp]
   35d8c:	adds	sl, r0, r8
   35d90:	adc	fp, r1, r9
   35d94:	cmp	r3, fp
   35d98:	cmpeq	r2, sl
   35d9c:	bhi	35e48 <flatcc_json_parser_struct_as_root@@Base+0x2060>
   35da0:	strd	r0, [sp, #40]	; 0x28
   35da4:	subs	r0, r2, r0
   35da8:	sbc	r1, r3, r1
   35dac:	subs	r4, sl, r2
   35db0:	sbc	r5, fp, r3
   35db4:	cmp	r1, r5
   35db8:	cmpeq	r0, r4
   35dbc:	mov	r7, lr
   35dc0:	bcc	360bc <flatcc_json_parser_struct_as_root@@Base+0x22d4>
   35dc4:	ldr	r3, [sp, #12]
   35dc8:	sub	r1, lr, #1
   35dcc:	ldrb	r2, [r3, r1]
   35dd0:	sub	r2, r2, #1
   35dd4:	strb	r2, [r3, r1]
   35dd8:	ldrd	r4, [sp, #32]
   35ddc:	adds	r4, r4, #1
   35de0:	adc	r5, r5, #0
   35de4:	cmp	r5, fp
   35de8:	cmpeq	r4, sl
   35dec:	bls	35be0 <flatcc_json_parser_struct_as_root@@Base+0x1df8>
   35df0:	ldrd	r0, [sp, #16]
   35df4:	ldrd	r2, [sp, #24]
   35df8:	subs	r0, r0, sl
   35dfc:	sbc	r1, r1, fp
   35e00:	cmp	r3, r1
   35e04:	cmpeq	r2, r0
   35e08:	bhi	35be0 <flatcc_json_parser_struct_as_root@@Base+0x1df8>
   35e0c:	adds	r8, r2, sl
   35e10:	adc	r9, r3, fp
   35e14:	cmp	r5, r9
   35e18:	cmpeq	r4, r8
   35e1c:	mov	r2, r8
   35e20:	mov	r3, r9
   35e24:	bhi	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35e28:	subs	r8, r2, r4
   35e2c:	sbc	r9, r3, r5
   35e30:	subs	r4, r4, sl
   35e34:	sbc	r5, r5, fp
   35e38:	cmp	r5, r9
   35e3c:	cmpeq	r4, r8
   35e40:	bls	35be0 <flatcc_json_parser_struct_as_root@@Base+0x1df8>
   35e44:	b	35b38 <flatcc_json_parser_struct_as_root@@Base+0x1d50>
   35e48:	ldrb	r1, [ip]
   35e4c:	subs	r2, r4, r8
   35e50:	sbc	r3, r5, r9
   35e54:	cmp	r9, r5
   35e58:	sub	r1, r1, #1
   35e5c:	cmpeq	r8, r4
   35e60:	strb	r1, [ip]
   35e64:	mov	r0, sl
   35e68:	mov	r1, fp
   35e6c:	bhi	35bdc <flatcc_json_parser_struct_as_root@@Base+0x1df4>
   35e70:	mov	r4, r2
   35e74:	mov	r5, r3
   35e78:	b	35d88 <flatcc_json_parser_struct_as_root@@Base+0x1fa0>
   35e7c:	rsb	r4, r6, #0
   35e80:	add	r1, r7, r6
   35e84:	cmp	r4, r7
   35e88:	cmnge	r1, #2
   35e8c:	bge	35fb0 <flatcc_json_parser_struct_as_root@@Base+0x21c8>
   35e90:	cmp	r7, #1
   35e94:	beq	35ffc <flatcc_json_parser_struct_as_root@@Base+0x2214>
   35e98:	cmp	r2, r4
   35e9c:	movlt	r4, r2
   35ea0:	cmp	r4, #0
   35ea4:	add	r5, r7, #1
   35ea8:	ble	360e8 <flatcc_json_parser_struct_as_root@@Base+0x2300>
   35eac:	ldr	r3, [sp, #12]
   35eb0:	sub	r0, r5, r4
   35eb4:	sub	r8, r7, r4
   35eb8:	add	r0, r3, r0
   35ebc:	add	r1, r3, r8
   35ec0:	mov	r2, r4
   35ec4:	bl	14534 <memmove@plt>
   35ec8:	ldr	r3, [sp, #12]
   35ecc:	add	r6, r4, r6
   35ed0:	mov	r2, #46	; 0x2e
   35ed4:	cmp	r6, #0
   35ed8:	strb	r2, [r3, r8]
   35edc:	mov	ip, r5
   35ee0:	beq	35c48 <flatcc_json_parser_struct_as_root@@Base+0x1e60>
   35ee4:	mov	r1, r3
   35ee8:	add	r3, r7, #2
   35eec:	mov	r2, #101	; 0x65
   35ef0:	add	lr, r1, r3
   35ef4:	strb	r2, [r1, r5]
   35ef8:	addlt	ip, lr, #1
   35efc:	movge	ip, lr
   35f00:	ldr	r5, [pc, #-2120]	; 356c0 <flatcc_json_parser_struct_as_root@@Base+0x18d8>
   35f04:	rsblt	r6, r6, #0
   35f08:	mov	r0, ip
   35f0c:	mvn	r4, #9
   35f10:	movlt	r2, #45	; 0x2d
   35f14:	strblt	r2, [r1, r3]
   35f18:	smull	r2, r1, r5, r6
   35f1c:	asr	r2, r6, #31
   35f20:	rsb	r2, r2, r1, asr #2
   35f24:	mla	r1, r4, r2, r6
   35f28:	subs	r6, r2, #0
   35f2c:	add	r2, r1, #48	; 0x30
   35f30:	strb	r2, [r0], #1
   35f34:	bne	35f18 <flatcc_json_parser_struct_as_root@@Base+0x2130>
   35f38:	sub	r5, r0, ip
   35f3c:	strb	r6, [r0]
   35f40:	add	r5, r5, r5, lsr #31
   35f44:	asr	r5, r5, #1
   35f48:	cmp	r5, #0
   35f4c:	movgt	r2, ip
   35f50:	addgt	r5, r2, r5
   35f54:	movgt	r1, r0
   35f58:	ble	35f74 <flatcc_json_parser_struct_as_root@@Base+0x218c>
   35f5c:	ldrb	r4, [r1, #-1]
   35f60:	ldrb	ip, [r2]
   35f64:	strb	r4, [r2], #1
   35f68:	cmp	r2, r5
   35f6c:	strb	ip, [r1, #-1]!
   35f70:	bne	35f5c <flatcc_json_parser_struct_as_root@@Base+0x2174>
   35f74:	sub	ip, r0, lr
   35f78:	add	ip, ip, r3
   35f7c:	b	35c48 <flatcc_json_parser_struct_as_root@@Base+0x1e60>
   35f80:	ldr	r3, [sp, #16]
   35f84:	lsl	r5, fp, #2
   35f88:	lsl	r4, sl, #2
   35f8c:	orr	r5, r5, sl, lsr #30
   35f90:	subs	r2, r4, #1
   35f94:	sub	r7, r3, #2
   35f98:	sbc	r3, r5, #0
   35f9c:	b	35364 <flatcc_json_parser_struct_as_root@@Base+0x157c>
   35fa0:	mov	r6, fp
   35fa4:	mov	r7, ip
   35fa8:	ldrd	sl, [sp, #24]
   35fac:	b	35b00 <flatcc_json_parser_struct_as_root@@Base+0x1d18>
   35fb0:	ldr	r4, [sp, #12]
   35fb4:	rsb	r0, r7, #2
   35fb8:	sub	r0, r0, r6
   35fbc:	rsb	r6, r6, #2
   35fc0:	mov	r2, r7
   35fc4:	mov	r1, r4
   35fc8:	add	r0, r4, r0
   35fcc:	sub	r6, r6, r7
   35fd0:	bl	14534 <memmove@plt>
   35fd4:	mov	r1, #48	; 0x30
   35fd8:	mov	r2, #46	; 0x2e
   35fdc:	cmp	r6, #2
   35fe0:	strb	r1, [r4]
   35fe4:	strb	r2, [r4, #1]
   35fe8:	ble	360f0 <flatcc_json_parser_struct_as_root@@Base+0x2308>
   35fec:	sub	r2, r6, #2
   35ff0:	add	r0, r4, #2
   35ff4:	bl	145c4 <memset@plt>
   35ff8:	b	35c44 <flatcc_json_parser_struct_as_root@@Base+0x1e5c>
   35ffc:	ldr	r1, [sp, #12]
   36000:	mov	r6, r4
   36004:	add	lr, r1, #2
   36008:	add	r0, r1, #3
   3600c:	mov	ip, #2
   36010:	mov	r2, #101	; 0x65
   36014:	mov	r3, #45	; 0x2d
   36018:	strb	r2, [r1, #1]
   3601c:	strb	r3, [r1, #2]
   36020:	ldr	r5, [pc, #-2408]	; 356c0 <flatcc_json_parser_struct_as_root@@Base+0x18d8>
   36024:	mov	r1, r0
   36028:	mvn	r4, #9
   3602c:	smull	r3, r2, r5, r6
   36030:	asr	r3, r6, #31
   36034:	rsb	r3, r3, r2, asr #2
   36038:	mla	r2, r4, r3, r6
   3603c:	subs	r6, r3, #0
   36040:	add	r3, r2, #48	; 0x30
   36044:	strb	r3, [r1], #1
   36048:	bne	3602c <flatcc_json_parser_struct_as_root@@Base+0x2244>
   3604c:	sub	r3, r1, r0
   36050:	strb	r6, [r1]
   36054:	add	r3, r3, r3, lsr #31
   36058:	asr	r2, r3, #1
   3605c:	cmp	r2, #0
   36060:	movgt	r3, r0
   36064:	addgt	r0, r3, r2
   36068:	movgt	r2, r1
   3606c:	ble	36088 <flatcc_json_parser_struct_as_root@@Base+0x22a0>
   36070:	ldrb	r5, [r2, #-1]
   36074:	ldrb	r4, [r3]
   36078:	strb	r5, [r3], #1
   3607c:	cmp	r3, r0
   36080:	strb	r4, [r2, #-1]!
   36084:	bne	36070 <flatcc_json_parser_struct_as_root@@Base+0x2288>
   36088:	sub	r1, r1, lr
   3608c:	add	ip, r1, ip
   36090:	b	35c48 <flatcc_json_parser_struct_as_root@@Base+0x1e60>
   36094:	ldr	r3, [sp, #12]
   36098:	add	ip, r7, #1
   3609c:	add	r0, r3, ip
   360a0:	mov	r2, #101	; 0x65
   360a4:	mov	lr, r0
   360a8:	strb	r2, [r3, r7]
   360ac:	b	36020 <flatcc_json_parser_struct_as_root@@Base+0x2238>
   360b0:	mov	r0, r2
   360b4:	mov	r1, r3
   360b8:	b	35a94 <flatcc_json_parser_struct_as_root@@Base+0x1cac>
   360bc:	ldrd	sl, [sp, #40]	; 0x28
   360c0:	b	35dd8 <flatcc_json_parser_struct_as_root@@Base+0x1ff0>
   360c4:	mov	r7, #0
   360c8:	b	358e4 <flatcc_json_parser_struct_as_root@@Base+0x1afc>
   360cc:	mov	r7, #1
   360d0:	b	35cc4 <flatcc_json_parser_struct_as_root@@Base+0x1edc>
   360d4:	mov	ip, r7
   360d8:	b	35c48 <flatcc_json_parser_struct_as_root@@Base+0x1e60>
   360dc:	mov	r0, r2
   360e0:	mov	r1, r3
   360e4:	b	35b00 <flatcc_json_parser_struct_as_root@@Base+0x1d18>
   360e8:	sub	r8, r7, r4
   360ec:	b	35ec8 <flatcc_json_parser_struct_as_root@@Base+0x20e0>
   360f0:	mov	r6, #2
   360f4:	b	35c44 <flatcc_json_parser_struct_as_root@@Base+0x1e5c>
   360f8:	ldr	r3, [pc, #-2620]	; 356c4 <flatcc_json_parser_struct_as_root@@Base+0x18dc>
   360fc:	mov	r2, #189	; 0xbd
   36100:	ldr	r1, [pc, #-2616]	; 356d0 <flatcc_json_parser_struct_as_root@@Base+0x18e8>
   36104:	ldr	r0, [pc, #-2628]	; 356c8 <flatcc_json_parser_struct_as_root@@Base+0x18e0>
   36108:	bl	14618 <__assert_fail@plt>
   3610c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0xed4>
   36110:	ldr	r3, [pc, #-2636]	; 356cc <flatcc_json_parser_struct_as_root@@Base+0x18e4>
   36114:	mov	r2, #138	; 0x8a
   36118:	ldr	r1, [pc, #-2640]	; 356d0 <flatcc_json_parser_struct_as_root@@Base+0x18e8>
   3611c:	ldr	r0, [pc, #-2640]	; 356d4 <flatcc_json_parser_struct_as_root@@Base+0x18ec>
   36120:	bl	14618 <__assert_fail@plt>
   36124:	bl	148d0 <__assert_fail@plt+0x2b8>

00036128 <flatcc_json_printer_error_string@@Base>:
   36128:	cmp	r0, #3
   3612c:	ldrls	r3, [pc, #12]	; 36140 <flatcc_json_printer_error_string@@Base+0x18>
   36130:	addls	r0, r3, r0, lsl #2
   36134:	ldrls	r0, [r0, #1732]	; 0x6c4
   36138:	ldrhi	r0, [pc, #4]	; 36144 <flatcc_json_printer_error_string@@Base+0x1c>
   3613c:	bx	lr
   36140:	andeq	r7, r4, r0, asr r4
   36144:	strdeq	r6, [r4], -r4

00036148 <flatcc_json_printer_fmt_float@@Base>:
   36148:	vcvt.f64.f32	d0, s0
   3614c:	b	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>

00036150 <flatcc_json_printer_fmt_double@@Base>:
   36150:	b	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>

00036154 <flatcc_json_printer_fmt_bool@@Base>:
   36154:	cmp	r1, #0
   36158:	mov	r3, r0
   3615c:	ldreq	r1, [pc, #36]	; 36188 <flatcc_json_printer_fmt_bool@@Base+0x34>
   36160:	ldrne	r1, [pc, #36]	; 3618c <flatcc_json_printer_fmt_bool@@Base+0x38>
   36164:	movne	r2, #4
   36168:	ldrbeq	ip, [r1, #4]
   3616c:	ldrne	r0, [r1]
   36170:	ldreq	r0, [r1]
   36174:	moveq	r2, #5
   36178:	str	r0, [r3]
   3617c:	strbeq	ip, [r3, #4]
   36180:	mov	r0, r2
   36184:	bx	lr
   36188:	andeq	r1, r4, ip, lsr pc
   3618c:	andeq	r1, r4, r4, lsr pc

00036190 <flatcc_json_printer_string@@Base>:
   36190:	b	34ce0 <flatcc_json_parser_struct_as_root@@Base+0xef8>

00036194 <flatcc_json_printer_write@@Base>:
   36194:	ldr	r3, [r0, #20]
   36198:	push	{r4, r5, r6, r7, r8, lr}
   3619c:	add	ip, r3, r2
   361a0:	ldr	r5, [r0, #16]
   361a4:	mov	r4, r0
   361a8:	cmp	r5, ip
   361ac:	mov	r6, r2
   361b0:	bls	361cc <flatcc_json_printer_write@@Base+0x38>
   361b4:	mov	r0, r3
   361b8:	bl	1454c <memcpy@plt>
   361bc:	ldr	r3, [r4, #20]
   361c0:	add	r6, r3, r6
   361c4:	str	r6, [r4, #20]
   361c8:	pop	{r4, r5, r6, r7, r8, pc}
   361cc:	cmp	r3, r5
   361d0:	mov	r7, r1
   361d4:	bcs	36250 <flatcc_json_printer_write@@Base+0xbc>
   361d8:	sub	r5, r5, r3
   361dc:	cmp	r6, r5
   361e0:	bls	36230 <flatcc_json_printer_write@@Base+0x9c>
   361e4:	mov	r8, #0
   361e8:	mov	r2, r5
   361ec:	mov	r1, r7
   361f0:	mov	r0, r3
   361f4:	bl	1454c <memcpy@plt>
   361f8:	ldr	r3, [r4, #20]
   361fc:	ldr	r2, [r4, #44]	; 0x2c
   36200:	add	r3, r3, r5
   36204:	str	r3, [r4, #20]
   36208:	mov	r1, r8
   3620c:	mov	r0, r4
   36210:	blx	r2
   36214:	ldr	r3, [r4, #20]
   36218:	ldr	r2, [r4, #16]
   3621c:	sub	r6, r6, r5
   36220:	add	r7, r7, r5
   36224:	sub	r5, r2, r3
   36228:	cmp	r6, r5
   3622c:	bhi	361e8 <flatcc_json_printer_write@@Base+0x54>
   36230:	mov	r0, r3
   36234:	mov	r2, r6
   36238:	mov	r1, r7
   3623c:	bl	1454c <memcpy@plt>
   36240:	ldr	r3, [r4, #20]
   36244:	add	r6, r3, r6
   36248:	str	r6, [r4, #20]
   3624c:	pop	{r4, r5, r6, r7, r8, pc}
   36250:	ldr	r3, [r0, #44]	; 0x2c
   36254:	mov	r1, #0
   36258:	blx	r3
   3625c:	ldr	r5, [r4, #16]
   36260:	ldr	r3, [r4, #20]
   36264:	b	361d8 <flatcc_json_printer_write@@Base+0x44>

00036268 <flatcc_json_printer_nl@@Base>:
   36268:	ldr	r2, [r0, #20]
   3626c:	mov	r1, #10
   36270:	add	ip, r2, #1
   36274:	str	ip, [r0, #20]
   36278:	strb	r1, [r2]
   3627c:	ldr	r1, [r0, #20]
   36280:	ldr	r2, [r0, #16]
   36284:	cmp	r1, r2
   36288:	bxcc	lr
   3628c:	ldr	r3, [r0, #44]	; 0x2c
   36290:	mov	r1, #0
   36294:	bx	r3

00036298 <flatcc_json_printer_char@@Base>:
   36298:	ldr	r3, [r0, #20]
   3629c:	add	r2, r3, #1
   362a0:	str	r2, [r0, #20]
   362a4:	strb	r1, [r3]
   362a8:	bx	lr

000362ac <flatcc_json_printer_indent@@Base>:
   362ac:	push	{r4, r5, r6, r7, r8, lr}
   362b0:	mov	r4, r0
   362b4:	ldrb	r2, [r0, #25]
   362b8:	ldr	r6, [r0, #32]
   362bc:	ldr	r3, [r0, #20]
   362c0:	ldr	r5, [r0, #16]
   362c4:	mul	r6, r6, r2
   362c8:	add	r2, r3, r6
   362cc:	cmp	r5, r2
   362d0:	bcc	362f4 <flatcc_json_printer_indent@@Base+0x48>
   362d4:	mov	r0, r3
   362d8:	mov	r2, r6
   362dc:	mov	r1, #32
   362e0:	bl	145c4 <memset@plt>
   362e4:	ldr	r3, [r4, #20]
   362e8:	add	r6, r3, r6
   362ec:	str	r6, [r4, #20]
   362f0:	pop	{r4, r5, r6, r7, r8, pc}
   362f4:	cmp	r3, r5
   362f8:	bcs	36358 <flatcc_json_printer_indent@@Base+0xac>
   362fc:	sub	r5, r5, r3
   36300:	cmp	r6, r5
   36304:	bls	362d4 <flatcc_json_printer_indent@@Base+0x28>
   36308:	mov	r8, #32
   3630c:	mov	r7, #0
   36310:	mov	r2, r5
   36314:	mov	r0, r3
   36318:	mov	r1, r8
   3631c:	bl	145c4 <memset@plt>
   36320:	ldr	r3, [r4, #20]
   36324:	ldr	r2, [r4, #44]	; 0x2c
   36328:	add	r3, r3, r5
   3632c:	str	r3, [r4, #20]
   36330:	mov	r1, r7
   36334:	mov	r0, r4
   36338:	blx	r2
   3633c:	ldr	r3, [r4, #20]
   36340:	ldr	r2, [r4, #16]
   36344:	sub	r6, r6, r5
   36348:	sub	r5, r2, r3
   3634c:	cmp	r6, r5
   36350:	bhi	36310 <flatcc_json_printer_indent@@Base+0x64>
   36354:	b	362d4 <flatcc_json_printer_indent@@Base+0x28>
   36358:	ldr	r3, [r0, #44]	; 0x2c
   3635c:	mov	r1, #0
   36360:	blx	r3
   36364:	ldr	r5, [r4, #16]
   36368:	ldr	r3, [r4, #20]
   3636c:	b	362fc <flatcc_json_printer_indent@@Base+0x50>

00036370 <flatcc_json_printer_add_level@@Base>:
   36370:	ldr	r3, [r0, #32]
   36374:	add	r1, r3, r1
   36378:	str	r1, [r0, #32]
   3637c:	bx	lr

00036380 <flatcc_json_printer_get_level@@Base>:
   36380:	ldr	r0, [r0, #32]
   36384:	bx	lr

00036388 <flatcc_json_printer_uint8@@Base>:
   36388:	cmp	r1, #99	; 0x63
   3638c:	push	{r4, lr}
   36390:	ldr	r2, [r0, #20]
   36394:	bls	363f0 <flatcc_json_printer_uint8@@Base+0x68>
   36398:	ldr	r3, [pc, #156]	; 3643c <flatcc_json_printer_uint8@@Base+0xb4>
   3639c:	mov	lr, #100	; 0x64
   363a0:	ldr	ip, [pc, #152]	; 36440 <flatcc_json_printer_uint8@@Base+0xb8>
   363a4:	umull	r4, r3, r3, r1
   363a8:	mov	r4, #0
   363ac:	lsr	r3, r3, #5
   363b0:	strb	r4, [r2, #3]
   363b4:	mul	lr, lr, r3
   363b8:	add	r3, r3, #48	; 0x30
   363bc:	sub	r1, r1, lr
   363c0:	mov	lr, #3
   363c4:	uxtb	r1, r1
   363c8:	ldrb	r4, [ip, r1, lsl #1]
   363cc:	add	r1, ip, r1, lsl #1
   363d0:	strb	r4, [r2, #1]
   363d4:	ldrb	r1, [r1, #1]
   363d8:	strb	r3, [r2]
   363dc:	strb	r1, [r2, #2]
   363e0:	ldr	r3, [r0, #20]
   363e4:	add	r3, r3, lr
   363e8:	str	r3, [r0, #20]
   363ec:	pop	{r4, pc}
   363f0:	cmp	r1, #9
   363f4:	bls	36424 <flatcc_json_printer_uint8@@Base+0x9c>
   363f8:	ldr	r3, [pc, #64]	; 36440 <flatcc_json_printer_uint8@@Base+0xb8>
   363fc:	sxth	r1, r1
   36400:	mov	ip, #0
   36404:	strb	ip, [r2, #2]
   36408:	ldrb	ip, [r3, r1, lsl #1]
   3640c:	add	r1, r3, r1, lsl #1
   36410:	mov	lr, #2
   36414:	strb	ip, [r2]
   36418:	ldrb	r3, [r1, #1]
   3641c:	strb	r3, [r2, #1]
   36420:	b	363e0 <flatcc_json_printer_uint8@@Base+0x58>
   36424:	add	r1, r1, #48	; 0x30
   36428:	mov	r3, #0
   3642c:	mov	lr, #1
   36430:	strb	r1, [r2]
   36434:	strb	r3, [r2, #1]
   36438:	b	363e0 <flatcc_json_printer_uint8@@Base+0x58>
   3643c:	mvnpl	r8, pc, lsl r5
   36440:	andeq	r7, r4, r0, asr r4

00036444 <flatcc_json_printer_uint16@@Base>:
   36444:	push	{r4, lr}
   36448:	mov	r4, r0
   3644c:	mov	r0, r1
   36450:	ldr	r1, [r4, #20]
   36454:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   36458:	ldr	r3, [r4, #20]
   3645c:	add	r0, r3, r0
   36460:	str	r0, [r4, #20]
   36464:	pop	{r4, pc}

00036468 <flatcc_json_printer_uint32@@Base>:
   36468:	push	{r4, lr}
   3646c:	mov	r4, r0
   36470:	mov	r0, r1
   36474:	ldr	r1, [r4, #20]
   36478:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3647c:	ldr	r3, [r4, #20]
   36480:	add	r0, r3, r0
   36484:	str	r0, [r4, #20]
   36488:	pop	{r4, pc}

0003648c <flatcc_json_printer_uint64@@Base>:
   3648c:	push	{r4, lr}
   36490:	mov	r4, r0
   36494:	mov	r1, r3
   36498:	mov	r0, r2
   3649c:	ldr	r2, [r4, #20]
   364a0:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   364a4:	ldr	r3, [r4, #20]
   364a8:	add	r0, r3, r0
   364ac:	str	r0, [r4, #20]
   364b0:	pop	{r4, pc}

000364b4 <flatcc_json_printer_int8@@Base>:
   364b4:	cmp	r1, #0
   364b8:	lsr	ip, r1, #31
   364bc:	rsblt	r1, r1, #0
   364c0:	ldr	r3, [r0, #20]
   364c4:	sxtblt	r1, r1
   364c8:	movlt	r2, #45	; 0x2d
   364cc:	uxtb	r1, r1
   364d0:	push	{r4, r5, lr}
   364d4:	strblt	r2, [r3]
   364d8:	addlt	r3, r3, #1
   364dc:	cmp	r1, #99	; 0x63
   364e0:	bls	36540 <flatcc_json_printer_int8@@Base+0x8c>
   364e4:	ldr	r2, [pc, #160]	; 3658c <flatcc_json_printer_int8@@Base+0xd8>
   364e8:	mov	r4, #100	; 0x64
   364ec:	ldr	lr, [pc, #156]	; 36590 <flatcc_json_printer_int8@@Base+0xdc>
   364f0:	umull	r5, r2, r2, r1
   364f4:	mov	r5, #0
   364f8:	lsr	r2, r2, #5
   364fc:	strb	r5, [r3, #3]
   36500:	mul	r2, r4, r2
   36504:	mov	r4, #49	; 0x31
   36508:	sub	r1, r1, r2
   3650c:	mov	r2, #3
   36510:	uxtb	r1, r1
   36514:	ldrb	r5, [lr, r1, lsl #1]
   36518:	add	r1, lr, r1, lsl #1
   3651c:	strb	r5, [r3, #1]
   36520:	ldrb	r1, [r1, #1]
   36524:	strb	r4, [r3]
   36528:	strb	r1, [r3, #2]
   3652c:	ldr	r3, [r0, #20]
   36530:	add	r2, ip, r2
   36534:	add	r3, r3, r2
   36538:	str	r3, [r0, #20]
   3653c:	pop	{r4, r5, pc}
   36540:	cmp	r1, #9
   36544:	bls	36574 <flatcc_json_printer_int8@@Base+0xc0>
   36548:	ldr	r2, [pc, #64]	; 36590 <flatcc_json_printer_int8@@Base+0xdc>
   3654c:	sxth	r1, r1
   36550:	mov	lr, #0
   36554:	strb	lr, [r3, #2]
   36558:	ldrb	lr, [r2, r1, lsl #1]
   3655c:	add	r1, r2, r1, lsl #1
   36560:	mov	r2, #2
   36564:	strb	lr, [r3]
   36568:	ldrb	r1, [r1, #1]
   3656c:	strb	r1, [r3, #1]
   36570:	b	3652c <flatcc_json_printer_int8@@Base+0x78>
   36574:	add	r1, r1, #48	; 0x30
   36578:	mov	lr, #0
   3657c:	mov	r2, #1
   36580:	strb	r1, [r3]
   36584:	strb	lr, [r3, #1]
   36588:	b	3652c <flatcc_json_printer_int8@@Base+0x78>
   3658c:	mvnpl	r8, pc, lsl r5
   36590:	andeq	r7, r4, r0, asr r4

00036594 <flatcc_json_printer_int16@@Base>:
   36594:	push	{r4, r5, r6, lr}
   36598:	mov	r4, r0
   3659c:	subs	r0, r1, #0
   365a0:	ldr	r1, [r4, #20]
   365a4:	lsr	r5, r0, #31
   365a8:	rsblt	r0, r0, #0
   365ac:	movlt	r3, #45	; 0x2d
   365b0:	sxthlt	r0, r0
   365b4:	strblt	r3, [r1]
   365b8:	uxth	r0, r0
   365bc:	addlt	r1, r1, #1
   365c0:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   365c4:	ldr	r3, [r4, #20]
   365c8:	add	r0, r5, r0
   365cc:	add	r3, r3, r0
   365d0:	str	r3, [r4, #20]
   365d4:	pop	{r4, r5, r6, pc}

000365d8 <flatcc_json_printer_int32@@Base>:
   365d8:	push	{r4, r5, r6, lr}
   365dc:	mov	r4, r0
   365e0:	subs	r0, r1, #0
   365e4:	ldr	r1, [r4, #20]
   365e8:	movlt	r3, #45	; 0x2d
   365ec:	lsr	r5, r0, #31
   365f0:	strblt	r3, [r1]
   365f4:	rsblt	r0, r0, #0
   365f8:	addlt	r1, r1, #1
   365fc:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   36600:	ldr	r3, [r4, #20]
   36604:	add	r0, r5, r0
   36608:	add	r3, r3, r0
   3660c:	str	r3, [r4, #20]
   36610:	pop	{r4, r5, r6, pc}

00036614 <flatcc_json_printer_int64@@Base>:
   36614:	push	{r4, r5, r6, lr}
   36618:	mov	r1, r3
   3661c:	mov	r4, r0
   36620:	cmp	r2, #0
   36624:	sbcs	r3, r3, #0
   36628:	mov	r0, r2
   3662c:	lsr	r5, r1, #31
   36630:	ldr	r2, [r4, #20]
   36634:	bge	3664c <flatcc_json_printer_int64@@Base+0x38>
   36638:	mov	r3, #45	; 0x2d
   3663c:	rsbs	r0, r0, #0
   36640:	strb	r3, [r2]
   36644:	rsc	r1, r1, #0
   36648:	add	r2, r2, #1
   3664c:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   36650:	ldr	r3, [r4, #20]
   36654:	add	r0, r5, r0
   36658:	add	r3, r3, r0
   3665c:	str	r3, [r4, #20]
   36660:	pop	{r4, r5, r6, pc}

00036664 <flatcc_json_printer_float@@Base>:
   36664:	push	{r4, lr}
   36668:	vcvt.f64.f32	d0, s0
   3666c:	mov	r4, r0
   36670:	ldr	r0, [r0, #20]
   36674:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   36678:	ldr	r3, [r4, #20]
   3667c:	add	r0, r3, r0
   36680:	str	r0, [r4, #20]
   36684:	pop	{r4, pc}

00036688 <flatcc_json_printer_double@@Base>:
   36688:	push	{r4, lr}
   3668c:	mov	r4, r0
   36690:	ldr	r0, [r0, #20]
   36694:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   36698:	ldr	r3, [r4, #20]
   3669c:	add	r0, r3, r0
   366a0:	str	r0, [r4, #20]
   366a4:	pop	{r4, pc}

000366a8 <flatcc_json_printer_enum@@Base>:
   366a8:	ldr	r3, [r0, #20]
   366ac:	mov	ip, #34	; 0x22
   366b0:	push	{r4, r5, r6, r7, r8, lr}
   366b4:	mov	r4, r0
   366b8:	strb	ip, [r3]
   366bc:	ldrb	ip, [r0, #26]
   366c0:	ldr	r3, [r0, #20]
   366c4:	ldr	r5, [r0, #16]
   366c8:	cmp	ip, #0
   366cc:	addeq	r3, r3, #1
   366d0:	add	ip, r3, r2
   366d4:	cmp	r5, ip
   366d8:	mov	r6, r2
   366dc:	str	r3, [r0, #20]
   366e0:	bhi	36784 <flatcc_json_printer_enum@@Base+0xdc>
   366e4:	cmp	r3, r5
   366e8:	mov	r7, r1
   366ec:	bcs	3679c <flatcc_json_printer_enum@@Base+0xf4>
   366f0:	sub	r5, r5, r3
   366f4:	cmp	r6, r5
   366f8:	bls	36748 <flatcc_json_printer_enum@@Base+0xa0>
   366fc:	mov	r8, #0
   36700:	mov	r2, r5
   36704:	mov	r1, r7
   36708:	mov	r0, r3
   3670c:	bl	1454c <memcpy@plt>
   36710:	ldr	r3, [r4, #20]
   36714:	ldr	r2, [r4, #44]	; 0x2c
   36718:	add	r3, r3, r5
   3671c:	str	r3, [r4, #20]
   36720:	mov	r1, r8
   36724:	mov	r0, r4
   36728:	blx	r2
   3672c:	ldr	r3, [r4, #20]
   36730:	ldr	r2, [r4, #16]
   36734:	sub	r6, r6, r5
   36738:	add	r7, r7, r5
   3673c:	sub	r5, r2, r3
   36740:	cmp	r6, r5
   36744:	bhi	36700 <flatcc_json_printer_enum@@Base+0x58>
   36748:	mov	r0, r3
   3674c:	mov	r2, r6
   36750:	mov	r1, r7
   36754:	bl	1454c <memcpy@plt>
   36758:	ldr	r3, [r4, #20]
   3675c:	add	r6, r3, r6
   36760:	str	r6, [r4, #20]
   36764:	mov	r3, #34	; 0x22
   36768:	strb	r3, [r6]
   3676c:	ldrb	r2, [r4, #26]
   36770:	ldr	r3, [r4, #20]
   36774:	cmp	r2, #0
   36778:	addeq	r3, r3, #1
   3677c:	str	r3, [r4, #20]
   36780:	pop	{r4, r5, r6, r7, r8, pc}
   36784:	mov	r0, r3
   36788:	bl	1454c <memcpy@plt>
   3678c:	ldr	r3, [r4, #20]
   36790:	add	r6, r3, r6
   36794:	str	r6, [r4, #20]
   36798:	b	36764 <flatcc_json_printer_enum@@Base+0xbc>
   3679c:	ldr	r3, [r0, #44]	; 0x2c
   367a0:	mov	r1, #0
   367a4:	blx	r3
   367a8:	ldr	r5, [r4, #16]
   367ac:	ldr	r3, [r4, #20]
   367b0:	b	366f0 <flatcc_json_printer_enum@@Base+0x48>

000367b4 <flatcc_json_printer_delimit_enum_flags@@Base>:
   367b4:	ldr	r3, [r0, #20]
   367b8:	ldrb	r2, [r0, #26]
   367bc:	adds	r1, r1, #0
   367c0:	mov	ip, #34	; 0x22
   367c4:	strb	ip, [r3]
   367c8:	movne	r1, #1
   367cc:	ldr	r3, [r0, #20]
   367d0:	cmp	r2, #0
   367d4:	orreq	r1, r1, #1
   367d8:	add	r1, r3, r1
   367dc:	str	r1, [r0, #20]
   367e0:	bx	lr

000367e4 <flatcc_json_printer_enum_flag@@Base>:
   367e4:	ldr	ip, [r0, #20]
   367e8:	push	{r4, r5, r6, r7, r8, lr}
   367ec:	mov	lr, #32
   367f0:	strb	lr, [ip]
   367f4:	mov	r6, r2
   367f8:	ldr	r2, [r0, #20]
   367fc:	ldr	r5, [r0, #16]
   36800:	cmp	r1, #0
   36804:	addgt	r2, r2, #1
   36808:	mov	r8, r3
   3680c:	add	r3, r2, r3
   36810:	cmp	r5, r3
   36814:	mov	r4, r0
   36818:	str	r2, [r0, #20]
   3681c:	bls	36840 <flatcc_json_printer_enum_flag@@Base+0x5c>
   36820:	mov	r0, r2
   36824:	mov	r1, r6
   36828:	mov	r2, r8
   3682c:	bl	1454c <memcpy@plt>
   36830:	ldr	r3, [r4, #20]
   36834:	add	r8, r3, r8
   36838:	str	r8, [r4, #20]
   3683c:	pop	{r4, r5, r6, r7, r8, pc}
   36840:	cmp	r2, r5
   36844:	mov	r7, r8
   36848:	bcs	368c4 <flatcc_json_printer_enum_flag@@Base+0xe0>
   3684c:	sub	r5, r5, r2
   36850:	cmp	r8, r5
   36854:	bls	368a4 <flatcc_json_printer_enum_flag@@Base+0xc0>
   36858:	mov	r8, #0
   3685c:	mov	r1, r6
   36860:	mov	r0, r2
   36864:	mov	r2, r5
   36868:	bl	1454c <memcpy@plt>
   3686c:	ldr	r3, [r4, #20]
   36870:	ldr	r2, [r4, #44]	; 0x2c
   36874:	add	r3, r3, r5
   36878:	str	r3, [r4, #20]
   3687c:	mov	r1, r8
   36880:	mov	r0, r4
   36884:	blx	r2
   36888:	ldr	r2, [r4, #20]
   3688c:	ldr	r3, [r4, #16]
   36890:	sub	r7, r7, r5
   36894:	add	r6, r6, r5
   36898:	sub	r5, r3, r2
   3689c:	cmp	r7, r5
   368a0:	bhi	3685c <flatcc_json_printer_enum_flag@@Base+0x78>
   368a4:	mov	r0, r2
   368a8:	mov	r1, r6
   368ac:	mov	r2, r7
   368b0:	bl	1454c <memcpy@plt>
   368b4:	ldr	r3, [r4, #20]
   368b8:	add	r7, r3, r7
   368bc:	str	r7, [r4, #20]
   368c0:	pop	{r4, r5, r6, r7, r8, pc}
   368c4:	ldr	r3, [r0, #44]	; 0x2c
   368c8:	mov	r1, #0
   368cc:	blx	r3
   368d0:	ldr	r5, [r4, #16]
   368d4:	ldr	r2, [r4, #20]
   368d8:	b	3684c <flatcc_json_printer_enum_flag@@Base+0x68>

000368dc <flatcc_json_printer_string_field@@Base>:
   368dc:	add	r2, r2, #2
   368e0:	ldr	ip, [r1, #8]
   368e4:	lsl	r2, r2, #1
   368e8:	cmp	r2, ip
   368ec:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   368f0:	ldr	r8, [sp, #40]	; 0x28
   368f4:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   368f8:	mov	r6, r3
   368fc:	ldr	r3, [r1, #4]
   36900:	ldrh	r7, [r3, r2]
   36904:	cmp	r7, #0
   36908:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3690c:	ldr	sl, [r1]
   36910:	adds	r9, sl, r7
   36914:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36918:	ldr	r3, [r1, #16]
   3691c:	mov	r4, r0
   36920:	cmp	r3, #0
   36924:	add	r3, r3, #1
   36928:	str	r3, [r1, #16]
   3692c:	ldrne	r3, [r0, #20]
   36930:	movne	r2, #44	; 0x2c
   36934:	addne	r1, r3, #1
   36938:	strne	r1, [r0, #20]
   3693c:	strbne	r2, [r3]
   36940:	ldrb	r1, [r0, #25]
   36944:	mov	fp, r8
   36948:	ldr	r3, [r0, #20]
   3694c:	cmp	r1, #0
   36950:	bne	36aac <flatcc_json_printer_string_field@@Base+0x1d0>
   36954:	ldr	r2, [r0, #16]
   36958:	cmp	r3, r2
   3695c:	bcc	3696c <flatcc_json_printer_string_field@@Base+0x90>
   36960:	ldr	r3, [r0, #44]	; 0x2c
   36964:	blx	r3
   36968:	ldr	r3, [r4, #20]
   3696c:	mov	r2, #34	; 0x22
   36970:	strb	r2, [r3]
   36974:	ldrb	r3, [r4, #26]
   36978:	ldr	r0, [r4, #20]
   3697c:	ldr	r5, [r4, #16]
   36980:	cmp	r3, #0
   36984:	addeq	r0, r0, #1
   36988:	add	r3, r0, r8
   3698c:	cmp	r5, r3
   36990:	str	r0, [r4, #20]
   36994:	bhi	36a74 <flatcc_json_printer_string_field@@Base+0x198>
   36998:	cmp	r0, r5
   3699c:	bcs	36a90 <flatcc_json_printer_string_field@@Base+0x1b4>
   369a0:	sub	r5, r5, r0
   369a4:	cmp	r8, r5
   369a8:	bls	369f4 <flatcc_json_printer_string_field@@Base+0x118>
   369ac:	mov	r8, #0
   369b0:	mov	r2, r5
   369b4:	mov	r1, r6
   369b8:	bl	1454c <memcpy@plt>
   369bc:	ldr	r3, [r4, #20]
   369c0:	mov	r0, r4
   369c4:	add	r3, r3, r5
   369c8:	str	r3, [r4, #20]
   369cc:	ldr	r2, [r4, #44]	; 0x2c
   369d0:	mov	r1, r8
   369d4:	blx	r2
   369d8:	ldr	r0, [r4, #20]
   369dc:	ldr	r3, [r4, #16]
   369e0:	sub	fp, fp, r5
   369e4:	add	r6, r6, r5
   369e8:	sub	r5, r3, r0
   369ec:	cmp	fp, r5
   369f0:	bhi	369b0 <flatcc_json_printer_string_field@@Base+0xd4>
   369f4:	mov	r1, r6
   369f8:	mov	r2, fp
   369fc:	bl	1454c <memcpy@plt>
   36a00:	ldr	r8, [r4, #20]
   36a04:	add	r8, r8, fp
   36a08:	str	r8, [r4, #20]
   36a0c:	mov	r3, #34	; 0x22
   36a10:	strb	r3, [r8]
   36a14:	ldr	r1, [r4, #20]
   36a18:	ldrb	r3, [r4, #26]
   36a1c:	clz	r3, r3
   36a20:	lsr	r3, r3, #5
   36a24:	add	r2, r1, r3
   36a28:	add	r2, r2, #1
   36a2c:	mov	r0, #58	; 0x3a
   36a30:	str	r2, [r4, #20]
   36a34:	strb	r0, [r1, r3]
   36a38:	ldr	r3, [r4, #20]
   36a3c:	mov	r2, #32
   36a40:	mov	r0, r4
   36a44:	strb	r2, [r3]
   36a48:	ldrb	ip, [r4, #25]
   36a4c:	ldr	r2, [sl, r7]
   36a50:	ldr	r3, [r4, #20]
   36a54:	add	r1, r9, r2
   36a58:	cmp	ip, #0
   36a5c:	addne	r3, r3, #1
   36a60:	ldr	r2, [r9, r2]
   36a64:	add	r1, r1, #4
   36a68:	str	r3, [r4, #20]
   36a6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36a70:	b	34ce0 <flatcc_json_parser_struct_as_root@@Base+0xef8>
   36a74:	mov	r2, r8
   36a78:	mov	r1, r6
   36a7c:	bl	1454c <memcpy@plt>
   36a80:	ldr	fp, [r4, #20]
   36a84:	add	r8, fp, r8
   36a88:	str	r8, [r4, #20]
   36a8c:	b	36a0c <flatcc_json_printer_string_field@@Base+0x130>
   36a90:	mov	r0, r4
   36a94:	ldr	r3, [r4, #44]	; 0x2c
   36a98:	mov	r1, #0
   36a9c:	blx	r3
   36aa0:	ldr	r5, [r4, #16]
   36aa4:	ldr	r0, [r4, #20]
   36aa8:	b	369a0 <flatcc_json_printer_string_field@@Base+0xc4>
   36aac:	add	r1, r3, #1
   36ab0:	mov	r2, #10
   36ab4:	str	r1, [r0, #20]
   36ab8:	strb	r2, [r3]
   36abc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   36ac0:	ldr	r3, [r4, #20]
   36ac4:	b	3696c <flatcc_json_printer_string_field@@Base+0x90>

00036ac8 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   36ac8:	add	r2, r2, #2
   36acc:	ldr	ip, [r1, #8]
   36ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36ad4:	lsl	r2, r2, #1
   36ad8:	sub	sp, sp, #12
   36adc:	cmp	r2, ip
   36ae0:	ldr	r9, [sp, #48]	; 0x30
   36ae4:	bge	36f18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x450>
   36ae8:	mov	r7, r3
   36aec:	ldr	r3, [r1, #4]
   36af0:	ldrh	sl, [r3, r2]
   36af4:	cmp	sl, #0
   36af8:	beq	36f18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x450>
   36afc:	ldr	r3, [sp, #52]	; 0x34
   36b00:	ldr	fp, [r1]
   36b04:	adds	r3, r3, #0
   36b08:	movne	r3, #1
   36b0c:	adds	r5, fp, sl
   36b10:	str	r3, [sp, #4]
   36b14:	beq	36f18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x450>
   36b18:	ldr	r3, [r1, #16]
   36b1c:	mov	r4, r0
   36b20:	cmp	r3, #0
   36b24:	add	r3, r3, #1
   36b28:	str	r3, [r1, #16]
   36b2c:	ldrne	r3, [r0, #20]
   36b30:	movne	r2, #44	; 0x2c
   36b34:	addne	r1, r3, #1
   36b38:	strne	r1, [r0, #20]
   36b3c:	strbne	r2, [r3]
   36b40:	ldrb	r1, [r0, #25]
   36b44:	mov	r8, r9
   36b48:	ldr	r3, [r0, #20]
   36b4c:	cmp	r1, #0
   36b50:	bne	36fd8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x510>
   36b54:	ldr	r2, [r0, #16]
   36b58:	cmp	r3, r2
   36b5c:	bcc	36b6c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   36b60:	ldr	r3, [r0, #44]	; 0x2c
   36b64:	blx	r3
   36b68:	ldr	r3, [r4, #20]
   36b6c:	mov	r2, #34	; 0x22
   36b70:	strb	r2, [r3]
   36b74:	ldrb	r3, [r4, #26]
   36b78:	ldr	r0, [r4, #20]
   36b7c:	ldr	r6, [r4, #16]
   36b80:	cmp	r3, #0
   36b84:	addeq	r0, r0, #1
   36b88:	add	r3, r0, r9
   36b8c:	cmp	r6, r3
   36b90:	str	r0, [r4, #20]
   36b94:	bhi	36f50 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x488>
   36b98:	cmp	r0, r6
   36b9c:	bcs	36fbc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4f4>
   36ba0:	sub	r6, r6, r0
   36ba4:	cmp	r9, r6
   36ba8:	bls	36bf4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x12c>
   36bac:	mov	r9, #0
   36bb0:	mov	r2, r6
   36bb4:	mov	r1, r7
   36bb8:	bl	1454c <memcpy@plt>
   36bbc:	ldr	r3, [r4, #20]
   36bc0:	mov	r0, r4
   36bc4:	add	r3, r3, r6
   36bc8:	str	r3, [r4, #20]
   36bcc:	ldr	r2, [r4, #44]	; 0x2c
   36bd0:	mov	r1, r9
   36bd4:	blx	r2
   36bd8:	ldr	r0, [r4, #20]
   36bdc:	ldr	r3, [r4, #16]
   36be0:	sub	r8, r8, r6
   36be4:	add	r7, r7, r6
   36be8:	sub	r6, r3, r0
   36bec:	cmp	r8, r6
   36bf0:	bhi	36bb0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xe8>
   36bf4:	mov	r2, r8
   36bf8:	mov	r1, r7
   36bfc:	bl	1454c <memcpy@plt>
   36c00:	ldr	r9, [r4, #20]
   36c04:	add	r8, r9, r8
   36c08:	str	r8, [r4, #20]
   36c0c:	mov	r1, #34	; 0x22
   36c10:	strb	r1, [r8]
   36c14:	ldr	r0, [r4, #20]
   36c18:	ldrb	r3, [r4, #26]
   36c1c:	clz	r3, r3
   36c20:	lsr	r3, r3, #5
   36c24:	add	r2, r0, r3
   36c28:	add	r2, r2, #1
   36c2c:	mov	ip, #58	; 0x3a
   36c30:	str	r2, [r4, #20]
   36c34:	strb	ip, [r0, r3]
   36c38:	ldr	r3, [r4, #20]
   36c3c:	mov	r2, #32
   36c40:	ldr	ip, [pc, #940]	; 36ff4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x52c>
   36c44:	strb	r2, [r3]
   36c48:	ldr	r2, [fp, sl]
   36c4c:	ldrb	r3, [r4, #25]
   36c50:	ldr	lr, [r4, #20]
   36c54:	ldr	r6, [r5, r2]
   36c58:	adds	r3, r3, #0
   36c5c:	movne	r3, #1
   36c60:	lsl	r7, r6, #2
   36c64:	add	r0, lr, r3
   36c68:	umull	ip, r7, ip, r7
   36c6c:	add	r0, r0, #1
   36c70:	lsr	r7, r7, #1
   36c74:	str	r0, [r4, #20]
   36c78:	add	r7, r7, #3
   36c7c:	strb	r1, [lr, r3]
   36c80:	ldr	ip, [r4, #20]
   36c84:	bic	r7, r7, #3
   36c88:	ldr	r3, [r4, #16]
   36c8c:	add	r1, ip, r7
   36c90:	add	r5, r5, r2
   36c94:	cmp	r1, r3
   36c98:	add	r5, r5, #4
   36c9c:	bcs	36f6c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4a4>
   36ca0:	cmp	r3, r1
   36ca4:	bcs	36e18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x350>
   36ca8:	sub	r3, r3, ip
   36cac:	bic	r9, r3, #3
   36cb0:	add	r8, r9, r9, lsl #1
   36cb4:	lsrs	r8, r8, #2
   36cb8:	ldrne	fp, [pc, #824]	; 36ff8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x530>
   36cbc:	beq	36e04 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x33c>
   36cc0:	ldr	r3, [sp, #4]
   36cc4:	ldr	lr, [pc, #816]	; 36ffc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x534>
   36cc8:	cmp	r3, #0
   36ccc:	movne	lr, fp
   36cd0:	cmp	r8, #2
   36cd4:	bls	36f44 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x47c>
   36cd8:	add	r0, ip, #4
   36cdc:	add	r1, r5, #3
   36ce0:	mov	r7, r8
   36ce4:	ldrb	r3, [r1, #-3]
   36ce8:	sub	r7, r7, #3
   36cec:	cmp	r7, #2
   36cf0:	mov	sl, r1
   36cf4:	ldrb	r3, [lr, r3, lsr #2]
   36cf8:	mov	ip, r0
   36cfc:	add	r1, r1, #3
   36d00:	strb	r3, [r0, #-4]
   36d04:	ldrb	r3, [r1, #-6]
   36d08:	ldrb	r2, [r1, #-5]
   36d0c:	add	r0, r0, #4
   36d10:	lsl	r3, r3, #4
   36d14:	and	r3, r3, #48	; 0x30
   36d18:	orr	r3, r3, r2, lsr #4
   36d1c:	ldrb	r3, [lr, r3]
   36d20:	strb	r3, [r0, #-7]
   36d24:	ldrb	r3, [r1, #-5]
   36d28:	ldrb	r2, [r1, #-4]
   36d2c:	lsl	r3, r3, #2
   36d30:	and	r3, r3, #60	; 0x3c
   36d34:	orr	r3, r3, r2, lsr #6
   36d38:	ldrb	r3, [lr, r3]
   36d3c:	strb	r3, [r0, #-6]
   36d40:	ldrb	r3, [r1, #-4]
   36d44:	and	r3, r3, #63	; 0x3f
   36d48:	ldrb	r3, [lr, r3]
   36d4c:	strb	r3, [r0, #-5]
   36d50:	bhi	36ce4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x21c>
   36d54:	cmp	r7, #1
   36d58:	beq	36f20 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x458>
   36d5c:	cmp	r7, #2
   36d60:	bne	36da0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2d8>
   36d64:	ldrb	r3, [sl]
   36d68:	ldrb	r3, [lr, r3, lsr #2]
   36d6c:	strb	r3, [ip]
   36d70:	ldrb	r3, [sl]
   36d74:	ldrb	r2, [sl, #1]
   36d78:	lsl	r3, r3, #4
   36d7c:	and	r3, r3, #48	; 0x30
   36d80:	orr	r3, r3, r2, lsr #4
   36d84:	ldrb	r3, [lr, r3]
   36d88:	strb	r3, [ip, #1]
   36d8c:	ldrb	r3, [sl, #1]
   36d90:	lsl	r3, r3, #2
   36d94:	and	r3, r3, #60	; 0x3c
   36d98:	ldrb	r3, [lr, r3]
   36d9c:	strb	r3, [ip, #2]
   36da0:	ldr	r3, [r4, #20]
   36da4:	sub	r6, r6, r8
   36da8:	add	r9, r3, r9
   36dac:	str	r9, [r4, #20]
   36db0:	ldr	r3, [r4, #44]	; 0x2c
   36db4:	mov	r1, #0
   36db8:	mov	r0, r4
   36dbc:	blx	r3
   36dc0:	ldr	r3, [pc, #556]	; 36ff4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x52c>
   36dc4:	lsl	r7, r6, #2
   36dc8:	ldr	ip, [r4, #20]
   36dcc:	umull	r3, r7, r3, r7
   36dd0:	ldr	r9, [r4, #16]
   36dd4:	add	r5, r5, r8
   36dd8:	lsr	r7, r7, #1
   36ddc:	add	r7, r7, #3
   36de0:	bic	r7, r7, #3
   36de4:	add	r3, ip, r7
   36de8:	cmp	r9, r3
   36dec:	bcs	36e18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x350>
   36df0:	sub	r9, r9, ip
   36df4:	bic	r9, r9, #3
   36df8:	add	r8, r9, r9, lsl #1
   36dfc:	lsrs	r8, r8, #2
   36e00:	bne	36cc0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1f8>
   36e04:	ldr	r3, [pc, #500]	; 37000 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x538>
   36e08:	ldr	r2, [pc, #500]	; 37004 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x53c>
   36e0c:	ldr	r1, [pc, #500]	; 37008 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x540>
   36e10:	ldr	r0, [pc, #500]	; 3700c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x544>
   36e14:	bl	14618 <__assert_fail@plt>
   36e18:	ldr	r2, [sp, #4]
   36e1c:	ldr	r3, [pc, #472]	; 36ffc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x534>
   36e20:	cmp	r2, #0
   36e24:	ldr	lr, [pc, #460]	; 36ff8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x530>
   36e28:	moveq	lr, r3
   36e2c:	cmp	r6, #2
   36e30:	bls	36eac <flatcc_json_printer_uint8_vector_base64_field@@Base+0x3e4>
   36e34:	add	r0, ip, #4
   36e38:	add	r1, r5, #3
   36e3c:	ldrb	r3, [r1, #-3]
   36e40:	sub	r6, r6, #3
   36e44:	cmp	r6, #2
   36e48:	mov	r5, r1
   36e4c:	ldrb	r3, [lr, r3, lsr #2]
   36e50:	mov	ip, r0
   36e54:	add	r1, r1, #3
   36e58:	strb	r3, [r0, #-4]
   36e5c:	ldrb	r3, [r1, #-6]
   36e60:	ldrb	r2, [r1, #-5]
   36e64:	add	r0, r0, #4
   36e68:	lsl	r3, r3, #4
   36e6c:	and	r3, r3, #48	; 0x30
   36e70:	orr	r3, r3, r2, lsr #4
   36e74:	ldrb	r3, [lr, r3]
   36e78:	strb	r3, [r0, #-7]
   36e7c:	ldrb	r3, [r1, #-5]
   36e80:	ldrb	r2, [r1, #-4]
   36e84:	lsl	r3, r3, #2
   36e88:	and	r3, r3, #60	; 0x3c
   36e8c:	orr	r3, r3, r2, lsr #6
   36e90:	ldrb	r3, [lr, r3]
   36e94:	strb	r3, [r0, #-6]
   36e98:	ldrb	r3, [r1, #-4]
   36e9c:	and	r3, r3, #63	; 0x3f
   36ea0:	ldrb	r3, [lr, r3]
   36ea4:	strb	r3, [r0, #-5]
   36ea8:	bhi	36e3c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x374>
   36eac:	cmp	r6, #1
   36eb0:	beq	36f8c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c4>
   36eb4:	cmp	r6, #2
   36eb8:	bne	36f00 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36ebc:	ldrb	r3, [r5]
   36ec0:	mov	r2, #61	; 0x3d
   36ec4:	ldrb	r3, [lr, r3, lsr #2]
   36ec8:	strb	r3, [ip]
   36ecc:	ldrb	r3, [r5]
   36ed0:	ldrb	r1, [r5, #1]
   36ed4:	lsl	r3, r3, #4
   36ed8:	and	r3, r3, #48	; 0x30
   36edc:	orr	r3, r3, r1, lsr #4
   36ee0:	ldrb	r3, [lr, r3]
   36ee4:	strb	r3, [ip, #1]
   36ee8:	ldrb	r3, [r5, #1]
   36eec:	strb	r2, [ip, #3]
   36ef0:	lsl	r3, r3, #2
   36ef4:	and	r3, r3, #60	; 0x3c
   36ef8:	ldrb	r3, [lr, r3]
   36efc:	strb	r3, [ip, #2]
   36f00:	ldr	r2, [r4, #20]
   36f04:	mov	r1, #34	; 0x22
   36f08:	add	r3, r2, r7
   36f0c:	add	r3, r3, #1
   36f10:	str	r3, [r4, #20]
   36f14:	strb	r1, [r2, r7]
   36f18:	add	sp, sp, #12
   36f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f20:	ldrb	r3, [sl]
   36f24:	ldrb	r3, [lr, r3, lsr #2]
   36f28:	strb	r3, [ip]
   36f2c:	ldrb	r3, [sl]
   36f30:	lsl	r3, r3, #4
   36f34:	and	r3, r3, #48	; 0x30
   36f38:	ldrb	r3, [lr, r3]
   36f3c:	strb	r3, [ip, #1]
   36f40:	b	36da0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2d8>
   36f44:	mov	r7, r8
   36f48:	mov	sl, r5
   36f4c:	b	36d54 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x28c>
   36f50:	mov	r1, r7
   36f54:	mov	r2, r9
   36f58:	bl	1454c <memcpy@plt>
   36f5c:	ldr	r8, [r4, #20]
   36f60:	add	r8, r8, r9
   36f64:	str	r8, [r4, #20]
   36f68:	b	36c0c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x144>
   36f6c:	ldr	r3, [r4, #44]	; 0x2c
   36f70:	mov	r1, #0
   36f74:	mov	r0, r4
   36f78:	blx	r3
   36f7c:	ldr	ip, [r4, #20]
   36f80:	ldr	r3, [r4, #16]
   36f84:	add	r1, ip, r7
   36f88:	b	36ca0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1d8>
   36f8c:	ldrb	r3, [r5]
   36f90:	mov	r2, #61	; 0x3d
   36f94:	ldrb	r3, [lr, r3, lsr #2]
   36f98:	strb	r3, [ip]
   36f9c:	ldrb	r3, [r5]
   36fa0:	strb	r2, [ip, #2]
   36fa4:	strb	r2, [ip, #3]
   36fa8:	lsl	r3, r3, #4
   36fac:	and	r3, r3, #48	; 0x30
   36fb0:	ldrb	r3, [lr, r3]
   36fb4:	strb	r3, [ip, #1]
   36fb8:	b	36f00 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36fbc:	mov	r0, r4
   36fc0:	ldr	r3, [r4, #44]	; 0x2c
   36fc4:	mov	r1, #0
   36fc8:	blx	r3
   36fcc:	ldr	r6, [r4, #16]
   36fd0:	ldr	r0, [r4, #20]
   36fd4:	b	36ba0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xd8>
   36fd8:	add	r1, r3, #1
   36fdc:	mov	r2, #10
   36fe0:	str	r1, [r0, #20]
   36fe4:	strb	r2, [r3]
   36fe8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   36fec:	ldr	r3, [r4, #20]
   36ff0:	b	36b6c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   36ff4:	bge	feae1aa8 <__bss_end__@@Base+0xfea896ec>
   36ff8:	andeq	r7, r4, r4, lsl #26
   36ffc:	andeq	r7, r4, r0, asr #25
   37000:	andeq	r7, r4, r4, lsr #22
   37004:	andeq	r0, r0, r5, lsl r1
   37008:			; <UNDEFINED> instruction: 0x00047bbc
   3700c:	andeq	r7, r4, r8, asr #26

00037010 <flatcc_json_printer_uint8_field@@Base>:
   37010:	add	r2, r2, #2
   37014:	ldr	ip, [r1, #8]
   37018:	lsl	r2, r2, #1
   3701c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37020:	cmp	r2, ip
   37024:	mov	r4, r0
   37028:	mov	r6, r3
   3702c:	ldr	r9, [sp, #32]
   37030:	ldrb	r0, [sp, #36]	; 0x24
   37034:	blt	3704c <flatcc_json_printer_uint8_field@@Base+0x3c>
   37038:	ldrb	r3, [r4, #29]
   3703c:	cmp	r3, #0
   37040:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37044:	mov	r8, r0
   37048:	b	37074 <flatcc_json_printer_uint8_field@@Base+0x64>
   3704c:	ldr	r3, [r1, #4]
   37050:	ldrh	r3, [r3, r2]
   37054:	cmp	r3, #0
   37058:	beq	37038 <flatcc_json_printer_uint8_field@@Base+0x28>
   3705c:	ldr	r2, [r1]
   37060:	cmn	r2, r3
   37064:	beq	37038 <flatcc_json_printer_uint8_field@@Base+0x28>
   37068:	ldrb	r8, [r2, r3]
   3706c:	cmp	r0, r8
   37070:	beq	37268 <flatcc_json_printer_uint8_field@@Base+0x258>
   37074:	ldr	r3, [r1, #16]
   37078:	mov	r7, r9
   3707c:	cmp	r3, #0
   37080:	add	r3, r3, #1
   37084:	str	r3, [r1, #16]
   37088:	ldrne	r3, [r4, #20]
   3708c:	movne	r2, #44	; 0x2c
   37090:	addne	r1, r3, #1
   37094:	strne	r1, [r4, #20]
   37098:	strbne	r2, [r3]
   3709c:	ldrb	r1, [r4, #25]
   370a0:	ldr	r3, [r4, #20]
   370a4:	cmp	r1, #0
   370a8:	bne	372ac <flatcc_json_printer_uint8_field@@Base+0x29c>
   370ac:	ldr	r2, [r4, #16]
   370b0:	cmp	r3, r2
   370b4:	bcc	370c8 <flatcc_json_printer_uint8_field@@Base+0xb8>
   370b8:	ldr	r3, [r4, #44]	; 0x2c
   370bc:	mov	r0, r4
   370c0:	blx	r3
   370c4:	ldr	r3, [r4, #20]
   370c8:	mov	r2, #34	; 0x22
   370cc:	strb	r2, [r3]
   370d0:	ldrb	r3, [r4, #26]
   370d4:	ldr	r0, [r4, #20]
   370d8:	ldr	r5, [r4, #16]
   370dc:	cmp	r3, #0
   370e0:	addeq	r0, r0, #1
   370e4:	add	r3, r0, r9
   370e8:	cmp	r5, r3
   370ec:	str	r0, [r4, #20]
   370f0:	bhi	37218 <flatcc_json_printer_uint8_field@@Base+0x208>
   370f4:	cmp	r0, r5
   370f8:	bcs	37290 <flatcc_json_printer_uint8_field@@Base+0x280>
   370fc:	sub	r5, r5, r0
   37100:	cmp	r9, r5
   37104:	bls	37150 <flatcc_json_printer_uint8_field@@Base+0x140>
   37108:	mov	r9, #0
   3710c:	mov	r2, r5
   37110:	mov	r1, r6
   37114:	bl	1454c <memcpy@plt>
   37118:	ldr	r2, [r4, #20]
   3711c:	ldr	r3, [r4, #44]	; 0x2c
   37120:	add	r2, r2, r5
   37124:	mov	r0, r4
   37128:	str	r2, [r4, #20]
   3712c:	mov	r1, r9
   37130:	blx	r3
   37134:	ldr	r0, [r4, #20]
   37138:	ldr	r3, [r4, #16]
   3713c:	sub	r7, r7, r5
   37140:	add	r6, r6, r5
   37144:	sub	r5, r3, r0
   37148:	cmp	r7, r5
   3714c:	bhi	3710c <flatcc_json_printer_uint8_field@@Base+0xfc>
   37150:	mov	r1, r6
   37154:	mov	r2, r7
   37158:	bl	1454c <memcpy@plt>
   3715c:	ldr	r9, [r4, #20]
   37160:	add	r9, r9, r7
   37164:	str	r9, [r4, #20]
   37168:	mov	r3, #34	; 0x22
   3716c:	strb	r3, [r9]
   37170:	ldr	r1, [r4, #20]
   37174:	ldrb	r3, [r4, #26]
   37178:	clz	r3, r3
   3717c:	lsr	r3, r3, #5
   37180:	add	r2, r1, r3
   37184:	add	r2, r2, #1
   37188:	mov	r0, #58	; 0x3a
   3718c:	str	r2, [r4, #20]
   37190:	strb	r0, [r1, r3]
   37194:	ldr	r3, [r4, #20]
   37198:	mov	r2, #32
   3719c:	strb	r2, [r3]
   371a0:	ldrb	r1, [r4, #25]
   371a4:	ldr	ip, [r4, #20]
   371a8:	adds	r1, r1, #0
   371ac:	movne	r1, #1
   371b0:	add	r0, ip, r1
   371b4:	cmp	r8, #99	; 0x63
   371b8:	str	r0, [r4, #20]
   371bc:	bls	37234 <flatcc_json_printer_uint8_field@@Base+0x224>
   371c0:	ldr	r3, [pc, #260]	; 372cc <flatcc_json_printer_uint8_field@@Base+0x2bc>
   371c4:	mov	r2, #100	; 0x64
   371c8:	ldr	lr, [pc, #256]	; 372d0 <flatcc_json_printer_uint8_field@@Base+0x2c0>
   371cc:	umull	r5, r3, r3, r8
   371d0:	mov	r5, #0
   371d4:	lsr	r3, r3, #5
   371d8:	strb	r5, [r0, #3]
   371dc:	mul	r2, r2, r3
   371e0:	add	r3, r3, #48	; 0x30
   371e4:	sub	r8, r8, r2
   371e8:	mov	r2, #3
   371ec:	uxtb	r8, r8
   371f0:	ldrb	r5, [lr, r8, lsl #1]
   371f4:	add	r8, lr, r8, lsl #1
   371f8:	strb	r5, [r0, #1]
   371fc:	ldrb	lr, [r8, #1]
   37200:	strb	lr, [r0, #2]
   37204:	strb	r3, [ip, r1]
   37208:	ldr	r3, [r4, #20]
   3720c:	add	r3, r3, r2
   37210:	str	r3, [r4, #20]
   37214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37218:	mov	r2, r9
   3721c:	mov	r1, r6
   37220:	bl	1454c <memcpy@plt>
   37224:	ldr	r7, [r4, #20]
   37228:	add	r9, r7, r9
   3722c:	str	r9, [r4, #20]
   37230:	b	37168 <flatcc_json_printer_uint8_field@@Base+0x158>
   37234:	cmp	r8, #9
   37238:	bls	37278 <flatcc_json_printer_uint8_field@@Base+0x268>
   3723c:	ldr	r3, [pc, #140]	; 372d0 <flatcc_json_printer_uint8_field@@Base+0x2c0>
   37240:	sxth	r8, r8
   37244:	mov	r2, #0
   37248:	strb	r2, [r0, #2]
   3724c:	ldrb	lr, [r3, r8, lsl #1]
   37250:	add	r3, r3, r8, lsl #1
   37254:	mov	r2, #2
   37258:	strb	lr, [ip, r1]
   3725c:	ldrb	r3, [r3, #1]
   37260:	strb	r3, [r0, #1]
   37264:	b	37208 <flatcc_json_printer_uint8_field@@Base+0x1f8>
   37268:	ldrb	r3, [r4, #28]
   3726c:	cmp	r3, #0
   37270:	beq	37074 <flatcc_json_printer_uint8_field@@Base+0x64>
   37274:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37278:	add	r8, r8, #48	; 0x30
   3727c:	mov	r3, #0
   37280:	strb	r3, [r0, #1]
   37284:	mov	r2, #1
   37288:	strb	r8, [ip, r1]
   3728c:	b	37208 <flatcc_json_printer_uint8_field@@Base+0x1f8>
   37290:	mov	r0, r4
   37294:	ldr	r3, [r4, #44]	; 0x2c
   37298:	mov	r1, #0
   3729c:	blx	r3
   372a0:	ldr	r5, [r4, #16]
   372a4:	ldr	r0, [r4, #20]
   372a8:	b	370fc <flatcc_json_printer_uint8_field@@Base+0xec>
   372ac:	add	r1, r3, #1
   372b0:	mov	r2, #10
   372b4:	str	r1, [r4, #20]
   372b8:	mov	r0, r4
   372bc:	strb	r2, [r3]
   372c0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   372c4:	ldr	r3, [r4, #20]
   372c8:	b	370c8 <flatcc_json_printer_uint8_field@@Base+0xb8>
   372cc:	mvnpl	r8, pc, lsl r5
   372d0:	andeq	r7, r4, r0, asr r4

000372d4 <flatcc_json_printer_uint16_field@@Base>:
   372d4:	add	r2, r2, #2
   372d8:	ldr	ip, [r1, #8]
   372dc:	lsl	r2, r2, #1
   372e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   372e4:	cmp	r2, ip
   372e8:	mov	r4, r0
   372ec:	mov	r6, r3
   372f0:	ldr	r9, [sp, #32]
   372f4:	ldrh	r0, [sp, #36]	; 0x24
   372f8:	blt	37310 <flatcc_json_printer_uint16_field@@Base+0x3c>
   372fc:	ldrb	r3, [r4, #29]
   37300:	cmp	r3, #0
   37304:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37308:	mov	r8, r0
   3730c:	b	37338 <flatcc_json_printer_uint16_field@@Base+0x64>
   37310:	ldr	r3, [r1, #4]
   37314:	ldrh	r3, [r3, r2]
   37318:	cmp	r3, #0
   3731c:	beq	372fc <flatcc_json_printer_uint16_field@@Base+0x28>
   37320:	ldr	r2, [r1]
   37324:	cmn	r2, r3
   37328:	beq	372fc <flatcc_json_printer_uint16_field@@Base+0x28>
   3732c:	ldrh	r8, [r2, r3]
   37330:	cmp	r0, r8
   37334:	beq	374ac <flatcc_json_printer_uint16_field@@Base+0x1d8>
   37338:	ldr	r3, [r1, #16]
   3733c:	mov	r7, r9
   37340:	cmp	r3, #0
   37344:	add	r3, r3, #1
   37348:	str	r3, [r1, #16]
   3734c:	ldrne	r3, [r4, #20]
   37350:	movne	r2, #44	; 0x2c
   37354:	addne	r1, r3, #1
   37358:	strne	r1, [r4, #20]
   3735c:	strbne	r2, [r3]
   37360:	ldrb	r1, [r4, #25]
   37364:	ldr	r3, [r4, #20]
   37368:	cmp	r1, #0
   3736c:	bne	374d8 <flatcc_json_printer_uint16_field@@Base+0x204>
   37370:	ldr	r2, [r4, #16]
   37374:	cmp	r3, r2
   37378:	bcc	3738c <flatcc_json_printer_uint16_field@@Base+0xb8>
   3737c:	ldr	r3, [r4, #44]	; 0x2c
   37380:	mov	r0, r4
   37384:	blx	r3
   37388:	ldr	r3, [r4, #20]
   3738c:	mov	r2, #34	; 0x22
   37390:	strb	r2, [r3]
   37394:	ldrb	r3, [r4, #26]
   37398:	ldr	r0, [r4, #20]
   3739c:	ldr	r5, [r4, #16]
   373a0:	cmp	r3, #0
   373a4:	addeq	r0, r0, #1
   373a8:	add	r3, r0, r9
   373ac:	cmp	r5, r3
   373b0:	str	r0, [r4, #20]
   373b4:	bhi	37490 <flatcc_json_printer_uint16_field@@Base+0x1bc>
   373b8:	cmp	r0, r5
   373bc:	bcs	374bc <flatcc_json_printer_uint16_field@@Base+0x1e8>
   373c0:	sub	r5, r5, r0
   373c4:	cmp	r9, r5
   373c8:	bls	37414 <flatcc_json_printer_uint16_field@@Base+0x140>
   373cc:	mov	r9, #0
   373d0:	mov	r2, r5
   373d4:	mov	r1, r6
   373d8:	bl	1454c <memcpy@plt>
   373dc:	ldr	r2, [r4, #20]
   373e0:	ldr	r3, [r4, #44]	; 0x2c
   373e4:	add	r2, r2, r5
   373e8:	mov	r0, r4
   373ec:	str	r2, [r4, #20]
   373f0:	mov	r1, r9
   373f4:	blx	r3
   373f8:	ldr	r0, [r4, #20]
   373fc:	ldr	r3, [r4, #16]
   37400:	sub	r7, r7, r5
   37404:	add	r6, r6, r5
   37408:	sub	r5, r3, r0
   3740c:	cmp	r7, r5
   37410:	bhi	373d0 <flatcc_json_printer_uint16_field@@Base+0xfc>
   37414:	mov	r1, r6
   37418:	mov	r2, r7
   3741c:	bl	1454c <memcpy@plt>
   37420:	ldr	r9, [r4, #20]
   37424:	add	r9, r9, r7
   37428:	str	r9, [r4, #20]
   3742c:	mov	r3, #34	; 0x22
   37430:	strb	r3, [r9]
   37434:	ldr	r1, [r4, #20]
   37438:	ldrb	r3, [r4, #26]
   3743c:	clz	r3, r3
   37440:	lsr	r3, r3, #5
   37444:	add	r2, r1, r3
   37448:	add	r2, r2, #1
   3744c:	mov	r0, #58	; 0x3a
   37450:	str	r2, [r4, #20]
   37454:	strb	r0, [r1, r3]
   37458:	ldr	r3, [r4, #20]
   3745c:	mov	r2, #32
   37460:	mov	r0, r8
   37464:	strb	r2, [r3]
   37468:	ldrb	r3, [r4, #25]
   3746c:	ldr	r1, [r4, #20]
   37470:	cmp	r3, #0
   37474:	addne	r1, r1, #1
   37478:	str	r1, [r4, #20]
   3747c:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   37480:	ldr	r3, [r4, #20]
   37484:	add	r0, r3, r0
   37488:	str	r0, [r4, #20]
   3748c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37490:	mov	r2, r9
   37494:	mov	r1, r6
   37498:	bl	1454c <memcpy@plt>
   3749c:	ldr	r7, [r4, #20]
   374a0:	add	r9, r7, r9
   374a4:	str	r9, [r4, #20]
   374a8:	b	3742c <flatcc_json_printer_uint16_field@@Base+0x158>
   374ac:	ldrb	r3, [r4, #28]
   374b0:	cmp	r3, #0
   374b4:	beq	37338 <flatcc_json_printer_uint16_field@@Base+0x64>
   374b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   374bc:	mov	r0, r4
   374c0:	ldr	r3, [r4, #44]	; 0x2c
   374c4:	mov	r1, #0
   374c8:	blx	r3
   374cc:	ldr	r5, [r4, #16]
   374d0:	ldr	r0, [r4, #20]
   374d4:	b	373c0 <flatcc_json_printer_uint16_field@@Base+0xec>
   374d8:	add	r1, r3, #1
   374dc:	mov	r2, #10
   374e0:	str	r1, [r4, #20]
   374e4:	mov	r0, r4
   374e8:	strb	r2, [r3]
   374ec:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   374f0:	ldr	r3, [r4, #20]
   374f4:	b	3738c <flatcc_json_printer_uint16_field@@Base+0xb8>

000374f8 <flatcc_json_printer_uint32_field@@Base>:
   374f8:	add	r2, r2, #2
   374fc:	ldr	ip, [r1, #8]
   37500:	lsl	r2, r2, #1
   37504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37508:	cmp	r2, ip
   3750c:	mov	r4, r0
   37510:	mov	r6, r3
   37514:	ldr	r9, [sp, #32]
   37518:	blt	37530 <flatcc_json_printer_uint32_field@@Base+0x38>
   3751c:	ldrb	r3, [r4, #29]
   37520:	cmp	r3, #0
   37524:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37528:	ldr	r8, [sp, #36]	; 0x24
   3752c:	b	3755c <flatcc_json_printer_uint32_field@@Base+0x64>
   37530:	ldr	r3, [r1, #4]
   37534:	ldrh	r3, [r3, r2]
   37538:	cmp	r3, #0
   3753c:	beq	3751c <flatcc_json_printer_uint32_field@@Base+0x24>
   37540:	ldr	r2, [r1]
   37544:	cmn	r2, r3
   37548:	beq	3751c <flatcc_json_printer_uint32_field@@Base+0x24>
   3754c:	ldr	r8, [r2, r3]
   37550:	ldr	r3, [sp, #36]	; 0x24
   37554:	cmp	r3, r8
   37558:	beq	376d0 <flatcc_json_printer_uint32_field@@Base+0x1d8>
   3755c:	ldr	r3, [r1, #16]
   37560:	mov	r7, r9
   37564:	cmp	r3, #0
   37568:	add	r3, r3, #1
   3756c:	str	r3, [r1, #16]
   37570:	ldrne	r3, [r4, #20]
   37574:	movne	r2, #44	; 0x2c
   37578:	addne	r1, r3, #1
   3757c:	strne	r1, [r4, #20]
   37580:	strbne	r2, [r3]
   37584:	ldrb	r1, [r4, #25]
   37588:	ldr	r3, [r4, #20]
   3758c:	cmp	r1, #0
   37590:	bne	376fc <flatcc_json_printer_uint32_field@@Base+0x204>
   37594:	ldr	r2, [r4, #16]
   37598:	cmp	r3, r2
   3759c:	bcc	375b0 <flatcc_json_printer_uint32_field@@Base+0xb8>
   375a0:	ldr	r3, [r4, #44]	; 0x2c
   375a4:	mov	r0, r4
   375a8:	blx	r3
   375ac:	ldr	r3, [r4, #20]
   375b0:	mov	r2, #34	; 0x22
   375b4:	strb	r2, [r3]
   375b8:	ldrb	r3, [r4, #26]
   375bc:	ldr	r0, [r4, #20]
   375c0:	ldr	r5, [r4, #16]
   375c4:	cmp	r3, #0
   375c8:	addeq	r0, r0, #1
   375cc:	add	r3, r0, r9
   375d0:	cmp	r5, r3
   375d4:	str	r0, [r4, #20]
   375d8:	bhi	376b4 <flatcc_json_printer_uint32_field@@Base+0x1bc>
   375dc:	cmp	r0, r5
   375e0:	bcs	376e0 <flatcc_json_printer_uint32_field@@Base+0x1e8>
   375e4:	sub	r5, r5, r0
   375e8:	cmp	r9, r5
   375ec:	bls	37638 <flatcc_json_printer_uint32_field@@Base+0x140>
   375f0:	mov	r9, #0
   375f4:	mov	r2, r5
   375f8:	mov	r1, r6
   375fc:	bl	1454c <memcpy@plt>
   37600:	ldr	r2, [r4, #20]
   37604:	ldr	r3, [r4, #44]	; 0x2c
   37608:	add	r2, r2, r5
   3760c:	mov	r0, r4
   37610:	str	r2, [r4, #20]
   37614:	mov	r1, r9
   37618:	blx	r3
   3761c:	ldr	r0, [r4, #20]
   37620:	ldr	r3, [r4, #16]
   37624:	sub	r7, r7, r5
   37628:	add	r6, r6, r5
   3762c:	sub	r5, r3, r0
   37630:	cmp	r7, r5
   37634:	bhi	375f4 <flatcc_json_printer_uint32_field@@Base+0xfc>
   37638:	mov	r1, r6
   3763c:	mov	r2, r7
   37640:	bl	1454c <memcpy@plt>
   37644:	ldr	r9, [r4, #20]
   37648:	add	r9, r9, r7
   3764c:	str	r9, [r4, #20]
   37650:	mov	r3, #34	; 0x22
   37654:	strb	r3, [r9]
   37658:	ldr	r1, [r4, #20]
   3765c:	ldrb	r3, [r4, #26]
   37660:	clz	r3, r3
   37664:	lsr	r3, r3, #5
   37668:	add	r2, r1, r3
   3766c:	add	r2, r2, #1
   37670:	mov	r0, #58	; 0x3a
   37674:	str	r2, [r4, #20]
   37678:	strb	r0, [r1, r3]
   3767c:	ldr	r3, [r4, #20]
   37680:	mov	r2, #32
   37684:	mov	r0, r8
   37688:	strb	r2, [r3]
   3768c:	ldrb	r3, [r4, #25]
   37690:	ldr	r1, [r4, #20]
   37694:	cmp	r3, #0
   37698:	addne	r1, r1, #1
   3769c:	str	r1, [r4, #20]
   376a0:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   376a4:	ldr	r3, [r4, #20]
   376a8:	add	r0, r3, r0
   376ac:	str	r0, [r4, #20]
   376b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   376b4:	mov	r2, r9
   376b8:	mov	r1, r6
   376bc:	bl	1454c <memcpy@plt>
   376c0:	ldr	r7, [r4, #20]
   376c4:	add	r9, r7, r9
   376c8:	str	r9, [r4, #20]
   376cc:	b	37650 <flatcc_json_printer_uint32_field@@Base+0x158>
   376d0:	ldrb	r3, [r0, #28]
   376d4:	cmp	r3, #0
   376d8:	beq	3755c <flatcc_json_printer_uint32_field@@Base+0x64>
   376dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   376e0:	mov	r0, r4
   376e4:	ldr	r3, [r4, #44]	; 0x2c
   376e8:	mov	r1, #0
   376ec:	blx	r3
   376f0:	ldr	r5, [r4, #16]
   376f4:	ldr	r0, [r4, #20]
   376f8:	b	375e4 <flatcc_json_printer_uint32_field@@Base+0xec>
   376fc:	add	r1, r3, #1
   37700:	mov	r2, #10
   37704:	str	r1, [r4, #20]
   37708:	mov	r0, r4
   3770c:	strb	r2, [r3]
   37710:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   37714:	ldr	r3, [r4, #20]
   37718:	b	375b0 <flatcc_json_printer_uint32_field@@Base+0xb8>

0003771c <flatcc_json_printer_uint64_field@@Base>:
   3771c:	add	r2, r2, #2
   37720:	ldr	ip, [r1, #8]
   37724:	lsl	r2, r2, #1
   37728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3772c:	cmp	r2, ip
   37730:	mov	r4, r0
   37734:	mov	r8, r3
   37738:	ldr	r9, [sp, #32]
   3773c:	blt	37754 <flatcc_json_printer_uint64_field@@Base+0x38>
   37740:	ldrb	r3, [r4, #29]
   37744:	cmp	r3, #0
   37748:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3774c:	ldrd	r6, [sp, #40]	; 0x28
   37750:	b	37784 <flatcc_json_printer_uint64_field@@Base+0x68>
   37754:	ldr	r3, [r1, #4]
   37758:	ldrh	r3, [r3, r2]
   3775c:	cmp	r3, #0
   37760:	beq	37740 <flatcc_json_printer_uint64_field@@Base+0x24>
   37764:	ldr	r2, [r1]
   37768:	cmn	r2, r3
   3776c:	beq	37740 <flatcc_json_printer_uint64_field@@Base+0x24>
   37770:	ldrd	r6, [r2, r3]
   37774:	ldrd	r2, [sp, #40]	; 0x28
   37778:	cmp	r3, r7
   3777c:	cmpeq	r2, r6
   37780:	beq	378fc <flatcc_json_printer_uint64_field@@Base+0x1e0>
   37784:	ldr	r3, [r1, #16]
   37788:	mov	sl, r9
   3778c:	cmp	r3, #0
   37790:	add	r3, r3, #1
   37794:	str	r3, [r1, #16]
   37798:	ldrne	r3, [r4, #20]
   3779c:	movne	r2, #44	; 0x2c
   377a0:	addne	r1, r3, #1
   377a4:	strne	r1, [r4, #20]
   377a8:	strbne	r2, [r3]
   377ac:	ldrb	r1, [r4, #25]
   377b0:	ldr	r3, [r4, #20]
   377b4:	cmp	r1, #0
   377b8:	bne	37928 <flatcc_json_printer_uint64_field@@Base+0x20c>
   377bc:	ldr	r2, [r4, #16]
   377c0:	cmp	r3, r2
   377c4:	bcc	377d8 <flatcc_json_printer_uint64_field@@Base+0xbc>
   377c8:	ldr	r3, [r4, #44]	; 0x2c
   377cc:	mov	r0, r4
   377d0:	blx	r3
   377d4:	ldr	r3, [r4, #20]
   377d8:	mov	r2, #34	; 0x22
   377dc:	strb	r2, [r3]
   377e0:	ldrb	r3, [r4, #26]
   377e4:	ldr	r0, [r4, #20]
   377e8:	ldr	r5, [r4, #16]
   377ec:	cmp	r3, #0
   377f0:	addeq	r0, r0, #1
   377f4:	add	r3, r0, r9
   377f8:	cmp	r5, r3
   377fc:	str	r0, [r4, #20]
   37800:	bhi	378e0 <flatcc_json_printer_uint64_field@@Base+0x1c4>
   37804:	cmp	r0, r5
   37808:	bcs	3790c <flatcc_json_printer_uint64_field@@Base+0x1f0>
   3780c:	sub	r5, r5, r0
   37810:	cmp	r9, r5
   37814:	bls	37860 <flatcc_json_printer_uint64_field@@Base+0x144>
   37818:	mov	r9, #0
   3781c:	mov	r2, r5
   37820:	mov	r1, r8
   37824:	bl	1454c <memcpy@plt>
   37828:	ldr	r3, [r4, #20]
   3782c:	mov	r0, r4
   37830:	add	r3, r3, r5
   37834:	str	r3, [r4, #20]
   37838:	ldr	r2, [r4, #44]	; 0x2c
   3783c:	mov	r1, r9
   37840:	blx	r2
   37844:	ldr	r0, [r4, #20]
   37848:	ldr	r3, [r4, #16]
   3784c:	sub	sl, sl, r5
   37850:	add	r8, r8, r5
   37854:	sub	r5, r3, r0
   37858:	cmp	sl, r5
   3785c:	bhi	3781c <flatcc_json_printer_uint64_field@@Base+0x100>
   37860:	mov	r1, r8
   37864:	mov	r2, sl
   37868:	bl	1454c <memcpy@plt>
   3786c:	ldr	r9, [r4, #20]
   37870:	add	r9, r9, sl
   37874:	str	r9, [r4, #20]
   37878:	mov	r3, #34	; 0x22
   3787c:	strb	r3, [r9]
   37880:	ldr	r1, [r4, #20]
   37884:	ldrb	r3, [r4, #26]
   37888:	clz	r3, r3
   3788c:	lsr	r3, r3, #5
   37890:	add	r2, r1, r3
   37894:	add	r2, r2, #1
   37898:	mov	r0, #58	; 0x3a
   3789c:	str	r2, [r4, #20]
   378a0:	strb	r0, [r1, r3]
   378a4:	ldr	r3, [r4, #20]
   378a8:	mov	r2, #32
   378ac:	mov	r0, r6
   378b0:	strb	r2, [r3]
   378b4:	ldrb	r3, [r4, #25]
   378b8:	ldr	r2, [r4, #20]
   378bc:	mov	r1, r7
   378c0:	cmp	r3, #0
   378c4:	addne	r2, r2, #1
   378c8:	str	r2, [r4, #20]
   378cc:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   378d0:	ldr	r3, [r4, #20]
   378d4:	add	r0, r3, r0
   378d8:	str	r0, [r4, #20]
   378dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   378e0:	mov	r2, r9
   378e4:	mov	r1, r8
   378e8:	bl	1454c <memcpy@plt>
   378ec:	ldr	sl, [r4, #20]
   378f0:	add	r9, sl, r9
   378f4:	str	r9, [r4, #20]
   378f8:	b	37878 <flatcc_json_printer_uint64_field@@Base+0x15c>
   378fc:	ldrb	r3, [r0, #28]
   37900:	cmp	r3, #0
   37904:	beq	37784 <flatcc_json_printer_uint64_field@@Base+0x68>
   37908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3790c:	mov	r0, r4
   37910:	ldr	r3, [r4, #44]	; 0x2c
   37914:	mov	r1, #0
   37918:	blx	r3
   3791c:	ldr	r5, [r4, #16]
   37920:	ldr	r0, [r4, #20]
   37924:	b	3780c <flatcc_json_printer_uint64_field@@Base+0xf0>
   37928:	add	r1, r3, #1
   3792c:	mov	r2, #10
   37930:	str	r1, [r4, #20]
   37934:	mov	r0, r4
   37938:	strb	r2, [r3]
   3793c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   37940:	ldr	r3, [r4, #20]
   37944:	b	377d8 <flatcc_json_printer_uint64_field@@Base+0xbc>

00037948 <flatcc_json_printer_int8_field@@Base>:
   37948:	add	r2, r2, #2
   3794c:	ldr	ip, [r1, #8]
   37950:	lsl	r2, r2, #1
   37954:	cmp	r2, ip
   37958:	push	{r4, r5, r6, lr}
   3795c:	ldrsb	ip, [sp, #20]
   37960:	blt	37978 <flatcc_json_printer_int8_field@@Base+0x30>
   37964:	ldrb	r2, [r0, #29]
   37968:	cmp	r2, #0
   3796c:	popeq	{r4, r5, r6, pc}
   37970:	mov	r4, ip
   37974:	b	379a0 <flatcc_json_printer_int8_field@@Base+0x58>
   37978:	ldr	lr, [r1, #4]
   3797c:	ldrh	r2, [lr, r2]
   37980:	cmp	r2, #0
   37984:	beq	37964 <flatcc_json_printer_int8_field@@Base+0x1c>
   37988:	ldr	lr, [r1]
   3798c:	cmn	lr, r2
   37990:	beq	37964 <flatcc_json_printer_int8_field@@Base+0x1c>
   37994:	ldrsb	r4, [lr, r2]
   37998:	cmp	ip, r4
   3799c:	beq	37a90 <flatcc_json_printer_int8_field@@Base+0x148>
   379a0:	ldr	r2, [r1, #16]
   379a4:	mov	r5, r0
   379a8:	cmp	r2, #0
   379ac:	add	r2, r2, #1
   379b0:	str	r2, [r1, #16]
   379b4:	ldrne	r2, [r0, #20]
   379b8:	movne	r1, #44	; 0x2c
   379bc:	addne	ip, r2, #1
   379c0:	strne	ip, [r0, #20]
   379c4:	strbne	r1, [r2]
   379c8:	mov	r1, r3
   379cc:	ldr	r2, [sp, #16]
   379d0:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   379d4:	cmp	r4, #0
   379d8:	lsr	r1, r4, #31
   379dc:	rsblt	r4, r4, #0
   379e0:	ldr	r3, [r5, #20]
   379e4:	sxtblt	r4, r4
   379e8:	movlt	r2, #45	; 0x2d
   379ec:	uxtb	r4, r4
   379f0:	strblt	r2, [r3]
   379f4:	addlt	r3, r3, #1
   379f8:	cmp	r4, #99	; 0x63
   379fc:	bls	37a5c <flatcc_json_printer_int8_field@@Base+0x114>
   37a00:	ldr	r2, [pc, #176]	; 37ab8 <flatcc_json_printer_int8_field@@Base+0x170>
   37a04:	mov	ip, #100	; 0x64
   37a08:	ldr	r0, [pc, #172]	; 37abc <flatcc_json_printer_int8_field@@Base+0x174>
   37a0c:	umull	lr, r2, r2, r4
   37a10:	mov	lr, #0
   37a14:	lsr	r2, r2, #5
   37a18:	strb	lr, [r3, #3]
   37a1c:	mul	r2, ip, r2
   37a20:	mov	ip, #49	; 0x31
   37a24:	sub	r4, r4, r2
   37a28:	mov	r2, #3
   37a2c:	uxtb	r4, r4
   37a30:	ldrb	lr, [r0, r4, lsl #1]
   37a34:	add	r4, r0, r4, lsl #1
   37a38:	strb	lr, [r3, #1]
   37a3c:	ldrb	r0, [r4, #1]
   37a40:	strb	ip, [r3]
   37a44:	strb	r0, [r3, #2]
   37a48:	ldr	r3, [r5, #20]
   37a4c:	add	r2, r1, r2
   37a50:	add	r3, r3, r2
   37a54:	str	r3, [r5, #20]
   37a58:	pop	{r4, r5, r6, pc}
   37a5c:	cmp	r4, #9
   37a60:	bls	37aa0 <flatcc_json_printer_int8_field@@Base+0x158>
   37a64:	ldr	r2, [pc, #80]	; 37abc <flatcc_json_printer_int8_field@@Base+0x174>
   37a68:	sxth	r4, r4
   37a6c:	mov	r0, #0
   37a70:	strb	r0, [r3, #2]
   37a74:	ldrb	r0, [r2, r4, lsl #1]
   37a78:	add	r4, r2, r4, lsl #1
   37a7c:	mov	r2, #2
   37a80:	strb	r0, [r3]
   37a84:	ldrb	r0, [r4, #1]
   37a88:	strb	r0, [r3, #1]
   37a8c:	b	37a48 <flatcc_json_printer_int8_field@@Base+0x100>
   37a90:	ldrb	r2, [r0, #28]
   37a94:	cmp	r2, #0
   37a98:	beq	379a0 <flatcc_json_printer_int8_field@@Base+0x58>
   37a9c:	pop	{r4, r5, r6, pc}
   37aa0:	add	r4, r4, #48	; 0x30
   37aa4:	mov	r0, #0
   37aa8:	mov	r2, #1
   37aac:	strb	r4, [r3]
   37ab0:	strb	r0, [r3, #1]
   37ab4:	b	37a48 <flatcc_json_printer_int8_field@@Base+0x100>
   37ab8:	mvnpl	r8, pc, lsl r5
   37abc:	andeq	r7, r4, r0, asr r4

00037ac0 <flatcc_json_printer_int16_field@@Base>:
   37ac0:	add	r2, r2, #2
   37ac4:	ldr	ip, [r1, #8]
   37ac8:	lsl	r2, r2, #1
   37acc:	cmp	r2, ip
   37ad0:	push	{r4, r5, r6, lr}
   37ad4:	ldrsh	ip, [sp, #20]
   37ad8:	blt	37af0 <flatcc_json_printer_int16_field@@Base+0x30>
   37adc:	ldrb	r2, [r0, #29]
   37ae0:	cmp	r2, #0
   37ae4:	popeq	{r4, r5, r6, pc}
   37ae8:	mov	r5, ip
   37aec:	b	37b18 <flatcc_json_printer_int16_field@@Base+0x58>
   37af0:	ldr	lr, [r1, #4]
   37af4:	ldrh	r2, [lr, r2]
   37af8:	cmp	r2, #0
   37afc:	beq	37adc <flatcc_json_printer_int16_field@@Base+0x1c>
   37b00:	ldr	lr, [r1]
   37b04:	cmn	lr, r2
   37b08:	beq	37adc <flatcc_json_printer_int16_field@@Base+0x1c>
   37b0c:	ldrsh	r5, [lr, r2]
   37b10:	cmp	ip, r5
   37b14:	beq	37b88 <flatcc_json_printer_int16_field@@Base+0xc8>
   37b18:	ldr	r2, [r1, #16]
   37b1c:	mov	r4, r0
   37b20:	cmp	r2, #0
   37b24:	add	r2, r2, #1
   37b28:	str	r2, [r1, #16]
   37b2c:	ldrne	r2, [r0, #20]
   37b30:	movne	r1, #44	; 0x2c
   37b34:	addne	ip, r2, #1
   37b38:	strne	ip, [r0, #20]
   37b3c:	strbne	r1, [r2]
   37b40:	mov	r1, r3
   37b44:	ldr	r2, [sp, #16]
   37b48:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   37b4c:	cmp	r5, #0
   37b50:	lsr	r6, r5, #31
   37b54:	rsblt	r5, r5, #0
   37b58:	ldr	r1, [r4, #20]
   37b5c:	sxthlt	r5, r5
   37b60:	movlt	r3, #45	; 0x2d
   37b64:	uxth	r0, r5
   37b68:	strblt	r3, [r1]
   37b6c:	addlt	r1, r1, #1
   37b70:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   37b74:	ldr	r3, [r4, #20]
   37b78:	add	r0, r6, r0
   37b7c:	add	r3, r3, r0
   37b80:	str	r3, [r4, #20]
   37b84:	pop	{r4, r5, r6, pc}
   37b88:	ldrb	r2, [r0, #28]
   37b8c:	cmp	r2, #0
   37b90:	beq	37b18 <flatcc_json_printer_int16_field@@Base+0x58>
   37b94:	pop	{r4, r5, r6, pc}

00037b98 <flatcc_json_printer_int32_field@@Base>:
   37b98:	add	r2, r2, #2
   37b9c:	ldr	ip, [r1, #8]
   37ba0:	lsl	r2, r2, #1
   37ba4:	cmp	r2, ip
   37ba8:	push	{r4, r5, r6, lr}
   37bac:	blt	37bc4 <flatcc_json_printer_int32_field@@Base+0x2c>
   37bb0:	ldrb	r2, [r0, #29]
   37bb4:	cmp	r2, #0
   37bb8:	popeq	{r4, r5, r6, pc}
   37bbc:	ldr	r5, [sp, #20]
   37bc0:	b	37bf0 <flatcc_json_printer_int32_field@@Base+0x58>
   37bc4:	ldr	ip, [r1, #4]
   37bc8:	ldrh	r2, [ip, r2]
   37bcc:	cmp	r2, #0
   37bd0:	beq	37bb0 <flatcc_json_printer_int32_field@@Base+0x18>
   37bd4:	ldr	ip, [r1]
   37bd8:	cmn	ip, r2
   37bdc:	beq	37bb0 <flatcc_json_printer_int32_field@@Base+0x18>
   37be0:	ldr	r5, [ip, r2]
   37be4:	ldr	r2, [sp, #20]
   37be8:	cmp	r2, r5
   37bec:	beq	37c5c <flatcc_json_printer_int32_field@@Base+0xc4>
   37bf0:	ldr	r2, [r1, #16]
   37bf4:	mov	r4, r0
   37bf8:	cmp	r2, #0
   37bfc:	add	r2, r2, #1
   37c00:	str	r2, [r1, #16]
   37c04:	ldrne	r2, [r0, #20]
   37c08:	movne	r1, #44	; 0x2c
   37c0c:	addne	ip, r2, #1
   37c10:	strne	ip, [r0, #20]
   37c14:	strbne	r1, [r2]
   37c18:	mov	r1, r3
   37c1c:	ldr	r2, [sp, #16]
   37c20:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   37c24:	ldr	r1, [r4, #20]
   37c28:	cmp	r5, #0
   37c2c:	movlt	r3, #45	; 0x2d
   37c30:	lsr	r6, r5, #31
   37c34:	rsblt	r5, r5, #0
   37c38:	mov	r0, r5
   37c3c:	strblt	r3, [r1]
   37c40:	addlt	r1, r1, #1
   37c44:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   37c48:	ldr	r3, [r4, #20]
   37c4c:	add	r0, r6, r0
   37c50:	add	r3, r3, r0
   37c54:	str	r3, [r4, #20]
   37c58:	pop	{r4, r5, r6, pc}
   37c5c:	ldrb	r2, [r0, #28]
   37c60:	cmp	r2, #0
   37c64:	beq	37bf0 <flatcc_json_printer_int32_field@@Base+0x58>
   37c68:	pop	{r4, r5, r6, pc}

00037c6c <flatcc_json_printer_int64_field@@Base>:
   37c6c:	add	r2, r2, #2
   37c70:	ldr	ip, [r1, #8]
   37c74:	lsl	r2, r2, #1
   37c78:	cmp	r2, ip
   37c7c:	push	{r4, r5, r6, r7, r8, lr}
   37c80:	blt	37c98 <flatcc_json_printer_int64_field@@Base+0x2c>
   37c84:	ldrb	r2, [r0, #29]
   37c88:	cmp	r2, #0
   37c8c:	popeq	{r4, r5, r6, r7, r8, pc}
   37c90:	ldrd	r6, [sp, #32]
   37c94:	b	37cc8 <flatcc_json_printer_int64_field@@Base+0x5c>
   37c98:	ldr	ip, [r1, #4]
   37c9c:	ldrh	r2, [ip, r2]
   37ca0:	cmp	r2, #0
   37ca4:	beq	37c84 <flatcc_json_printer_int64_field@@Base+0x18>
   37ca8:	ldr	ip, [r1]
   37cac:	cmn	ip, r2
   37cb0:	beq	37c84 <flatcc_json_printer_int64_field@@Base+0x18>
   37cb4:	ldrd	r6, [ip, r2]
   37cb8:	ldrd	r4, [sp, #32]
   37cbc:	cmp	r5, r7
   37cc0:	cmpeq	r4, r6
   37cc4:	beq	37d30 <flatcc_json_printer_int64_field@@Base+0xc4>
   37cc8:	ldr	r2, [r1, #16]
   37ccc:	mov	r4, r0
   37cd0:	cmp	r2, #0
   37cd4:	add	r2, r2, #1
   37cd8:	str	r2, [r1, #16]
   37cdc:	ldrne	r2, [r0, #20]
   37ce0:	movne	r1, #44	; 0x2c
   37ce4:	addne	ip, r2, #1
   37ce8:	strne	ip, [r0, #20]
   37cec:	strbne	r1, [r2]
   37cf0:	mov	r1, r3
   37cf4:	ldr	r2, [sp, #24]
   37cf8:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   37cfc:	cmp	r6, #0
   37d00:	sbcs	r3, r7, #0
   37d04:	ldr	r2, [r4, #20]
   37d08:	lsr	r5, r7, #31
   37d0c:	blt	37d40 <flatcc_json_printer_int64_field@@Base+0xd4>
   37d10:	mov	r0, r6
   37d14:	mov	r1, r7
   37d18:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   37d1c:	ldr	r3, [r4, #20]
   37d20:	add	r0, r5, r0
   37d24:	add	r3, r3, r0
   37d28:	str	r3, [r4, #20]
   37d2c:	pop	{r4, r5, r6, r7, r8, pc}
   37d30:	ldrb	r2, [r0, #28]
   37d34:	cmp	r2, #0
   37d38:	beq	37cc8 <flatcc_json_printer_int64_field@@Base+0x5c>
   37d3c:	pop	{r4, r5, r6, r7, r8, pc}
   37d40:	mov	r3, #45	; 0x2d
   37d44:	rsbs	r6, r6, #0
   37d48:	strb	r3, [r2]
   37d4c:	rsc	r7, r7, #0
   37d50:	add	r2, r2, #1
   37d54:	b	37d10 <flatcc_json_printer_int64_field@@Base+0xa4>

00037d58 <flatcc_json_printer_bool_field@@Base>:
   37d58:	add	r2, r2, #2
   37d5c:	ldr	ip, [r1, #8]
   37d60:	lsl	r2, r2, #1
   37d64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37d68:	cmp	r2, ip
   37d6c:	mov	r4, r0
   37d70:	mov	r6, r3
   37d74:	ldr	r9, [sp, #32]
   37d78:	ldrb	r0, [sp, #36]	; 0x24
   37d7c:	blt	37d94 <flatcc_json_printer_bool_field@@Base+0x3c>
   37d80:	ldrb	r3, [r4, #29]
   37d84:	cmp	r3, #0
   37d88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37d8c:	mov	r8, r0
   37d90:	b	37dbc <flatcc_json_printer_bool_field@@Base+0x64>
   37d94:	ldr	r3, [r1, #4]
   37d98:	ldrh	r3, [r3, r2]
   37d9c:	cmp	r3, #0
   37da0:	beq	37d80 <flatcc_json_printer_bool_field@@Base+0x28>
   37da4:	ldr	r2, [r1]
   37da8:	cmn	r2, r3
   37dac:	beq	37d80 <flatcc_json_printer_bool_field@@Base+0x28>
   37db0:	ldrb	r8, [r2, r3]
   37db4:	cmp	r0, r8
   37db8:	beq	37f68 <flatcc_json_printer_bool_field@@Base+0x210>
   37dbc:	ldr	r3, [r1, #16]
   37dc0:	mov	r7, r9
   37dc4:	cmp	r3, #0
   37dc8:	add	r3, r3, #1
   37dcc:	str	r3, [r1, #16]
   37dd0:	ldrne	r3, [r4, #20]
   37dd4:	movne	r2, #44	; 0x2c
   37dd8:	addne	r1, r3, #1
   37ddc:	strne	r1, [r4, #20]
   37de0:	strbne	r2, [r3]
   37de4:	ldrb	r1, [r4, #25]
   37de8:	ldr	r3, [r4, #20]
   37dec:	cmp	r1, #0
   37df0:	bne	37f94 <flatcc_json_printer_bool_field@@Base+0x23c>
   37df4:	ldr	r2, [r4, #16]
   37df8:	cmp	r3, r2
   37dfc:	bcc	37e10 <flatcc_json_printer_bool_field@@Base+0xb8>
   37e00:	ldr	r3, [r4, #44]	; 0x2c
   37e04:	mov	r0, r4
   37e08:	blx	r3
   37e0c:	ldr	r3, [r4, #20]
   37e10:	mov	r2, #34	; 0x22
   37e14:	strb	r2, [r3]
   37e18:	ldrb	r3, [r4, #26]
   37e1c:	ldr	r0, [r4, #20]
   37e20:	ldr	r5, [r4, #16]
   37e24:	cmp	r3, #0
   37e28:	addeq	r0, r0, #1
   37e2c:	add	r3, r0, r9
   37e30:	cmp	r5, r3
   37e34:	str	r0, [r4, #20]
   37e38:	bhi	37f34 <flatcc_json_printer_bool_field@@Base+0x1dc>
   37e3c:	cmp	r0, r5
   37e40:	bcs	37f78 <flatcc_json_printer_bool_field@@Base+0x220>
   37e44:	sub	r5, r5, r0
   37e48:	cmp	r9, r5
   37e4c:	bls	37e98 <flatcc_json_printer_bool_field@@Base+0x140>
   37e50:	mov	r9, #0
   37e54:	mov	r2, r5
   37e58:	mov	r1, r6
   37e5c:	bl	1454c <memcpy@plt>
   37e60:	ldr	r2, [r4, #20]
   37e64:	ldr	r3, [r4, #44]	; 0x2c
   37e68:	add	r2, r2, r5
   37e6c:	mov	r0, r4
   37e70:	str	r2, [r4, #20]
   37e74:	mov	r1, r9
   37e78:	blx	r3
   37e7c:	ldr	r0, [r4, #20]
   37e80:	ldr	r3, [r4, #16]
   37e84:	sub	r7, r7, r5
   37e88:	add	r6, r6, r5
   37e8c:	sub	r5, r3, r0
   37e90:	cmp	r7, r5
   37e94:	bhi	37e54 <flatcc_json_printer_bool_field@@Base+0xfc>
   37e98:	mov	r1, r6
   37e9c:	mov	r2, r7
   37ea0:	bl	1454c <memcpy@plt>
   37ea4:	ldr	r9, [r4, #20]
   37ea8:	add	r9, r9, r7
   37eac:	str	r9, [r4, #20]
   37eb0:	mov	r3, #34	; 0x22
   37eb4:	strb	r3, [r9]
   37eb8:	ldr	r1, [r4, #20]
   37ebc:	ldrb	r3, [r4, #26]
   37ec0:	clz	r3, r3
   37ec4:	lsr	r3, r3, #5
   37ec8:	add	r2, r1, r3
   37ecc:	add	r2, r2, #1
   37ed0:	mov	r0, #58	; 0x3a
   37ed4:	str	r2, [r4, #20]
   37ed8:	strb	r0, [r1, r3]
   37edc:	ldr	r3, [r4, #20]
   37ee0:	mov	r2, #32
   37ee4:	ldr	r0, [pc, #200]	; 37fb4 <flatcc_json_printer_bool_field@@Base+0x25c>
   37ee8:	strb	r2, [r3]
   37eec:	ldrb	r3, [r4, #25]
   37ef0:	ldr	r1, [r4, #20]
   37ef4:	adds	r3, r3, #0
   37ef8:	movne	r3, #1
   37efc:	add	r2, r1, r3
   37f00:	cmp	r8, #0
   37f04:	str	r2, [r4, #20]
   37f08:	bne	37f50 <flatcc_json_printer_bool_field@@Base+0x1f8>
   37f0c:	add	lr, r0, #1792	; 0x700
   37f10:	mov	ip, #5
   37f14:	ldrh	lr, [lr, #4]
   37f18:	ldr	r0, [r0, #1792]	; 0x700
   37f1c:	str	r0, [r1, r3]
   37f20:	strh	lr, [r2, #4]
   37f24:	ldr	r3, [r4, #20]
   37f28:	add	r3, r3, ip
   37f2c:	str	r3, [r4, #20]
   37f30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f34:	mov	r2, r9
   37f38:	mov	r1, r6
   37f3c:	bl	1454c <memcpy@plt>
   37f40:	ldr	r7, [r4, #20]
   37f44:	add	r9, r7, r9
   37f48:	str	r9, [r4, #20]
   37f4c:	b	37eb0 <flatcc_json_printer_bool_field@@Base+0x158>
   37f50:	ldrb	lr, [r0, #1788]	; 0x6fc
   37f54:	ldr	r0, [r0, #1784]	; 0x6f8
   37f58:	mov	ip, #4
   37f5c:	str	r0, [r1, r3]
   37f60:	strb	lr, [r2, #4]
   37f64:	b	37f24 <flatcc_json_printer_bool_field@@Base+0x1cc>
   37f68:	ldrb	r3, [r4, #28]
   37f6c:	cmp	r3, #0
   37f70:	beq	37dbc <flatcc_json_printer_bool_field@@Base+0x64>
   37f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f78:	mov	r0, r4
   37f7c:	ldr	r3, [r4, #44]	; 0x2c
   37f80:	mov	r1, #0
   37f84:	blx	r3
   37f88:	ldr	r5, [r4, #16]
   37f8c:	ldr	r0, [r4, #20]
   37f90:	b	37e44 <flatcc_json_printer_bool_field@@Base+0xec>
   37f94:	add	r1, r3, #1
   37f98:	mov	r2, #10
   37f9c:	str	r1, [r4, #20]
   37fa0:	mov	r0, r4
   37fa4:	strb	r2, [r3]
   37fa8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   37fac:	ldr	r3, [r4, #20]
   37fb0:	b	37e10 <flatcc_json_printer_bool_field@@Base+0xb8>
   37fb4:	andeq	r7, r4, r0, asr r4

00037fb8 <flatcc_json_printer_float_field@@Base>:
   37fb8:	add	r2, r2, #2
   37fbc:	ldr	ip, [r1, #8]
   37fc0:	lsl	r2, r2, #1
   37fc4:	cmp	r2, ip
   37fc8:	push	{r4, lr}
   37fcc:	vpush	{d8}
   37fd0:	blt	37fe8 <flatcc_json_printer_float_field@@Base+0x30>
   37fd4:	ldrb	r2, [r0, #29]
   37fd8:	cmp	r2, #0
   37fdc:	beq	3806c <flatcc_json_printer_float_field@@Base+0xb4>
   37fe0:	vmov.f32	s16, s0
   37fe4:	b	38020 <flatcc_json_printer_float_field@@Base+0x68>
   37fe8:	ldr	ip, [r1, #4]
   37fec:	ldrh	ip, [ip, r2]
   37ff0:	cmp	ip, #0
   37ff4:	beq	37fd4 <flatcc_json_printer_float_field@@Base+0x1c>
   37ff8:	ldr	r2, [r1]
   37ffc:	adds	r2, r2, ip
   38000:	beq	37fd4 <flatcc_json_printer_float_field@@Base+0x1c>
   38004:	vldr	s16, [r2]
   38008:	vcmp.f32	s0, s16
   3800c:	vmrs	APSR_nzcv, fpscr
   38010:	bne	38020 <flatcc_json_printer_float_field@@Base+0x68>
   38014:	ldrb	r2, [r0, #28]
   38018:	cmp	r2, #0
   3801c:	bne	3806c <flatcc_json_printer_float_field@@Base+0xb4>
   38020:	ldr	r2, [r1, #16]
   38024:	mov	r4, r0
   38028:	cmp	r2, #0
   3802c:	add	r2, r2, #1
   38030:	str	r2, [r1, #16]
   38034:	ldrne	r2, [r0, #20]
   38038:	movne	r1, #44	; 0x2c
   3803c:	addne	ip, r2, #1
   38040:	strne	ip, [r0, #20]
   38044:	strbne	r1, [r2]
   38048:	mov	r1, r3
   3804c:	ldr	r2, [sp, #16]
   38050:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   38054:	ldr	r0, [r4, #20]
   38058:	vcvt.f64.f32	d0, s16
   3805c:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   38060:	ldr	r3, [r4, #20]
   38064:	add	r0, r3, r0
   38068:	str	r0, [r4, #20]
   3806c:	vpop	{d8}
   38070:	pop	{r4, pc}

00038074 <flatcc_json_printer_double_field@@Base>:
   38074:	add	r2, r2, #2
   38078:	ldr	ip, [r1, #8]
   3807c:	lsl	r2, r2, #1
   38080:	cmp	r2, ip
   38084:	push	{r4, lr}
   38088:	vpush	{d8}
   3808c:	blt	380a4 <flatcc_json_printer_double_field@@Base+0x30>
   38090:	ldrb	r2, [r0, #29]
   38094:	cmp	r2, #0
   38098:	beq	38128 <flatcc_json_printer_double_field@@Base+0xb4>
   3809c:	vmov.f64	d8, d0
   380a0:	b	380dc <flatcc_json_printer_double_field@@Base+0x68>
   380a4:	ldr	ip, [r1, #4]
   380a8:	ldrh	ip, [ip, r2]
   380ac:	cmp	ip, #0
   380b0:	beq	38090 <flatcc_json_printer_double_field@@Base+0x1c>
   380b4:	ldr	r2, [r1]
   380b8:	adds	r2, r2, ip
   380bc:	beq	38090 <flatcc_json_printer_double_field@@Base+0x1c>
   380c0:	vldr	d8, [r2]
   380c4:	vcmp.f64	d0, d8
   380c8:	vmrs	APSR_nzcv, fpscr
   380cc:	bne	380dc <flatcc_json_printer_double_field@@Base+0x68>
   380d0:	ldrb	r2, [r0, #28]
   380d4:	cmp	r2, #0
   380d8:	bne	38128 <flatcc_json_printer_double_field@@Base+0xb4>
   380dc:	ldr	r2, [r1, #16]
   380e0:	mov	r4, r0
   380e4:	cmp	r2, #0
   380e8:	add	r2, r2, #1
   380ec:	str	r2, [r1, #16]
   380f0:	ldrne	r2, [r0, #20]
   380f4:	movne	r1, #44	; 0x2c
   380f8:	addne	ip, r2, #1
   380fc:	strne	ip, [r0, #20]
   38100:	strbne	r1, [r2]
   38104:	mov	r1, r3
   38108:	ldr	r2, [sp, #16]
   3810c:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   38110:	vmov.f64	d0, d8
   38114:	ldr	r0, [r4, #20]
   38118:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   3811c:	ldr	r3, [r4, #20]
   38120:	add	r0, r3, r0
   38124:	str	r0, [r4, #20]
   38128:	vpop	{d8}
   3812c:	pop	{r4, pc}

00038130 <flatcc_json_printer_uint8_enum_field@@Base>:
   38130:	add	r2, r2, #2
   38134:	push	{r4, r5, r6, lr}
   38138:	lsl	ip, r2, #1
   3813c:	ldr	lr, [r1, #8]
   38140:	ldr	r2, [sp, #16]
   38144:	cmp	ip, lr
   38148:	ldr	r5, [sp, #24]
   3814c:	ldrb	lr, [sp, #20]
   38150:	blt	38168 <flatcc_json_printer_uint8_enum_field@@Base+0x38>
   38154:	ldrb	ip, [r0, #29]
   38158:	cmp	ip, #0
   3815c:	popeq	{r4, r5, r6, pc}
   38160:	mov	r6, lr
   38164:	b	38190 <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   38168:	ldr	r4, [r1, #4]
   3816c:	ldrh	ip, [r4, ip]
   38170:	cmp	ip, #0
   38174:	beq	38154 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   38178:	ldr	r4, [r1]
   3817c:	cmn	r4, ip
   38180:	beq	38154 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   38184:	ldrb	r6, [r4, ip]
   38188:	cmp	lr, r6
   3818c:	beq	381fc <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   38190:	ldr	ip, [r1, #16]
   38194:	mov	r4, r0
   38198:	cmp	ip, #0
   3819c:	add	ip, ip, #1
   381a0:	str	ip, [r1, #16]
   381a4:	ldrne	r1, [r0, #20]
   381a8:	movne	ip, #44	; 0x2c
   381ac:	addne	lr, r1, #1
   381b0:	strne	lr, [r0, #20]
   381b4:	strbne	ip, [r1]
   381b8:	mov	r1, r3
   381bc:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   381c0:	ldrb	r3, [r4, #27]
   381c4:	cmp	r3, #0
   381c8:	bne	381e0 <flatcc_json_printer_uint8_enum_field@@Base+0xb0>
   381cc:	mov	r1, r6
   381d0:	mov	r0, r4
   381d4:	mov	r3, r5
   381d8:	pop	{r4, r5, r6, lr}
   381dc:	bx	r3
   381e0:	mov	r0, r6
   381e4:	ldr	r1, [r4, #20]
   381e8:	bl	34c0c <flatcc_json_parser_struct_as_root@@Base+0xe24>
   381ec:	ldr	r3, [r4, #20]
   381f0:	add	r0, r3, r0
   381f4:	str	r0, [r4, #20]
   381f8:	pop	{r4, r5, r6, pc}
   381fc:	ldrb	ip, [r0, #28]
   38200:	cmp	ip, #0
   38204:	beq	38190 <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   38208:	pop	{r4, r5, r6, pc}

0003820c <flatcc_json_printer_uint16_enum_field@@Base>:
   3820c:	add	r2, r2, #2
   38210:	push	{r4, r5, r6, lr}
   38214:	lsl	ip, r2, #1
   38218:	ldr	lr, [r1, #8]
   3821c:	ldr	r2, [sp, #16]
   38220:	cmp	ip, lr
   38224:	ldr	r5, [sp, #24]
   38228:	ldrh	lr, [sp, #20]
   3822c:	blt	38244 <flatcc_json_printer_uint16_enum_field@@Base+0x38>
   38230:	ldrb	ip, [r0, #29]
   38234:	cmp	ip, #0
   38238:	popeq	{r4, r5, r6, pc}
   3823c:	mov	r6, lr
   38240:	b	3826c <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   38244:	ldr	r4, [r1, #4]
   38248:	ldrh	ip, [r4, ip]
   3824c:	cmp	ip, #0
   38250:	beq	38230 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   38254:	ldr	r4, [r1]
   38258:	cmn	r4, ip
   3825c:	beq	38230 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   38260:	ldrh	r6, [r4, ip]
   38264:	cmp	lr, r6
   38268:	beq	382d8 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   3826c:	ldr	ip, [r1, #16]
   38270:	mov	r4, r0
   38274:	cmp	ip, #0
   38278:	add	ip, ip, #1
   3827c:	str	ip, [r1, #16]
   38280:	ldrne	r1, [r0, #20]
   38284:	movne	ip, #44	; 0x2c
   38288:	addne	lr, r1, #1
   3828c:	strne	lr, [r0, #20]
   38290:	strbne	ip, [r1]
   38294:	mov	r1, r3
   38298:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3829c:	ldrb	r3, [r4, #27]
   382a0:	cmp	r3, #0
   382a4:	bne	382bc <flatcc_json_printer_uint16_enum_field@@Base+0xb0>
   382a8:	mov	r1, r6
   382ac:	mov	r0, r4
   382b0:	mov	r3, r5
   382b4:	pop	{r4, r5, r6, lr}
   382b8:	bx	r3
   382bc:	mov	r0, r6
   382c0:	ldr	r1, [r4, #20]
   382c4:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   382c8:	ldr	r3, [r4, #20]
   382cc:	add	r0, r3, r0
   382d0:	str	r0, [r4, #20]
   382d4:	pop	{r4, r5, r6, pc}
   382d8:	ldrb	ip, [r0, #28]
   382dc:	cmp	ip, #0
   382e0:	beq	3826c <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   382e4:	pop	{r4, r5, r6, pc}

000382e8 <flatcc_json_printer_uint32_enum_field@@Base>:
   382e8:	add	r2, r2, #2
   382ec:	push	{r4, r5, r6, lr}
   382f0:	lsl	ip, r2, #1
   382f4:	ldr	lr, [r1, #8]
   382f8:	ldr	r2, [sp, #16]
   382fc:	cmp	ip, lr
   38300:	ldr	r5, [sp, #24]
   38304:	ldr	lr, [sp, #20]
   38308:	blt	38320 <flatcc_json_printer_uint32_enum_field@@Base+0x38>
   3830c:	ldrb	ip, [r0, #29]
   38310:	cmp	ip, #0
   38314:	popeq	{r4, r5, r6, pc}
   38318:	mov	r6, lr
   3831c:	b	38348 <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   38320:	ldr	r4, [r1, #4]
   38324:	ldrh	ip, [r4, ip]
   38328:	cmp	ip, #0
   3832c:	beq	3830c <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   38330:	ldr	r4, [r1]
   38334:	cmn	r4, ip
   38338:	beq	3830c <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   3833c:	ldr	r6, [r4, ip]
   38340:	cmp	lr, r6
   38344:	beq	383b4 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   38348:	ldr	ip, [r1, #16]
   3834c:	mov	r4, r0
   38350:	cmp	ip, #0
   38354:	add	ip, ip, #1
   38358:	str	ip, [r1, #16]
   3835c:	ldrne	r1, [r0, #20]
   38360:	movne	ip, #44	; 0x2c
   38364:	addne	lr, r1, #1
   38368:	strne	lr, [r0, #20]
   3836c:	strbne	ip, [r1]
   38370:	mov	r1, r3
   38374:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   38378:	ldrb	r3, [r4, #27]
   3837c:	cmp	r3, #0
   38380:	bne	38398 <flatcc_json_printer_uint32_enum_field@@Base+0xb0>
   38384:	mov	r1, r6
   38388:	mov	r0, r4
   3838c:	mov	r3, r5
   38390:	pop	{r4, r5, r6, lr}
   38394:	bx	r3
   38398:	mov	r0, r6
   3839c:	ldr	r1, [r4, #20]
   383a0:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   383a4:	ldr	r3, [r4, #20]
   383a8:	add	r0, r3, r0
   383ac:	str	r0, [r4, #20]
   383b0:	pop	{r4, r5, r6, pc}
   383b4:	ldrb	ip, [r0, #28]
   383b8:	cmp	ip, #0
   383bc:	beq	38348 <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   383c0:	pop	{r4, r5, r6, pc}

000383c4 <flatcc_json_printer_uint64_enum_field@@Base>:
   383c4:	add	r2, r2, #2
   383c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   383cc:	lsl	ip, r2, #1
   383d0:	ldr	lr, [r1, #8]
   383d4:	ldr	r2, [sp, #32]
   383d8:	cmp	ip, lr
   383dc:	ldrd	r8, [sp, #40]	; 0x28
   383e0:	ldr	r5, [sp, #48]	; 0x30
   383e4:	blt	38400 <flatcc_json_printer_uint64_enum_field@@Base+0x3c>
   383e8:	ldrb	ip, [r0, #29]
   383ec:	cmp	ip, #0
   383f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   383f4:	mov	r6, r8
   383f8:	mov	r7, r9
   383fc:	b	3842c <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   38400:	ldr	lr, [r1, #4]
   38404:	ldrh	ip, [lr, ip]
   38408:	cmp	ip, #0
   3840c:	beq	383e8 <flatcc_json_printer_uint64_enum_field@@Base+0x24>
   38410:	ldr	lr, [r1]
   38414:	cmn	lr, ip
   38418:	beq	383e8 <flatcc_json_printer_uint64_enum_field@@Base+0x24>
   3841c:	ldrd	r6, [lr, ip]
   38420:	cmp	r9, r7
   38424:	cmpeq	r8, r6
   38428:	beq	384a0 <flatcc_json_printer_uint64_enum_field@@Base+0xdc>
   3842c:	ldr	ip, [r1, #16]
   38430:	mov	r4, r0
   38434:	cmp	ip, #0
   38438:	add	ip, ip, #1
   3843c:	str	ip, [r1, #16]
   38440:	ldrne	r1, [r0, #20]
   38444:	movne	ip, #44	; 0x2c
   38448:	addne	lr, r1, #1
   3844c:	strne	lr, [r0, #20]
   38450:	strbne	ip, [r1]
   38454:	mov	r1, r3
   38458:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3845c:	ldrb	r3, [r4, #27]
   38460:	cmp	r3, #0
   38464:	bne	38480 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   38468:	mov	r2, r6
   3846c:	mov	r3, r7
   38470:	mov	r0, r4
   38474:	mov	r1, r5
   38478:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3847c:	bx	r1
   38480:	mov	r0, r6
   38484:	mov	r1, r7
   38488:	ldr	r2, [r4, #20]
   3848c:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   38490:	ldr	r3, [r4, #20]
   38494:	add	r0, r3, r0
   38498:	str	r0, [r4, #20]
   3849c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   384a0:	ldrb	ip, [r0, #28]
   384a4:	cmp	ip, #0
   384a8:	beq	3842c <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   384ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000384b0 <flatcc_json_printer_int8_enum_field@@Base>:
   384b0:	add	r2, r2, #2
   384b4:	push	{r4, r5, r6, lr}
   384b8:	lsl	ip, r2, #1
   384bc:	ldr	lr, [r1, #8]
   384c0:	ldr	r2, [sp, #16]
   384c4:	cmp	ip, lr
   384c8:	ldr	r6, [sp, #24]
   384cc:	ldrsb	lr, [sp, #20]
   384d0:	blt	384e8 <flatcc_json_printer_int8_enum_field@@Base+0x38>
   384d4:	ldrb	ip, [r0, #29]
   384d8:	cmp	ip, #0
   384dc:	popeq	{r4, r5, r6, pc}
   384e0:	mov	r4, lr
   384e4:	b	38510 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   384e8:	ldr	r4, [r1, #4]
   384ec:	ldrh	ip, [r4, ip]
   384f0:	cmp	ip, #0
   384f4:	beq	384d4 <flatcc_json_printer_int8_enum_field@@Base+0x24>
   384f8:	ldr	r4, [r1]
   384fc:	cmn	r4, ip
   38500:	beq	384d4 <flatcc_json_printer_int8_enum_field@@Base+0x24>
   38504:	ldrsb	r4, [r4, ip]
   38508:	cmp	lr, r4
   3850c:	beq	385e8 <flatcc_json_printer_int8_enum_field@@Base+0x138>
   38510:	ldr	ip, [r1, #16]
   38514:	mov	r5, r0
   38518:	cmp	ip, #0
   3851c:	add	ip, ip, #1
   38520:	str	ip, [r1, #16]
   38524:	ldrne	r1, [r0, #20]
   38528:	movne	ip, #44	; 0x2c
   3852c:	addne	lr, r1, #1
   38530:	strne	lr, [r0, #20]
   38534:	strbne	ip, [r1]
   38538:	mov	r1, r3
   3853c:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   38540:	ldrb	r3, [r5, #27]
   38544:	cmp	r3, #0
   38548:	beq	385d4 <flatcc_json_printer_int8_enum_field@@Base+0x124>
   3854c:	cmp	r4, #0
   38550:	lsr	r1, r4, #31
   38554:	rsblt	r4, r4, #0
   38558:	ldr	r3, [r5, #20]
   3855c:	sxtblt	r4, r4
   38560:	movlt	r2, #45	; 0x2d
   38564:	uxtb	r4, r4
   38568:	strblt	r2, [r3]
   3856c:	addlt	r3, r3, #1
   38570:	cmp	r4, #99	; 0x63
   38574:	bls	385f8 <flatcc_json_printer_int8_enum_field@@Base+0x148>
   38578:	ldr	r2, [pc, #196]	; 38644 <flatcc_json_printer_int8_enum_field@@Base+0x194>
   3857c:	mov	ip, #100	; 0x64
   38580:	ldr	r0, [pc, #192]	; 38648 <flatcc_json_printer_int8_enum_field@@Base+0x198>
   38584:	umull	lr, r2, r2, r4
   38588:	mov	lr, #0
   3858c:	lsr	r2, r2, #5
   38590:	strb	lr, [r3, #3]
   38594:	mul	r2, ip, r2
   38598:	mov	ip, #49	; 0x31
   3859c:	sub	r4, r4, r2
   385a0:	mov	r2, #3
   385a4:	uxtb	r4, r4
   385a8:	ldrb	lr, [r0, r4, lsl #1]
   385ac:	add	r4, r0, r4, lsl #1
   385b0:	strb	lr, [r3, #1]
   385b4:	ldrb	r0, [r4, #1]
   385b8:	strb	ip, [r3]
   385bc:	strb	r0, [r3, #2]
   385c0:	ldr	r3, [r5, #20]
   385c4:	add	r2, r1, r2
   385c8:	add	r3, r3, r2
   385cc:	str	r3, [r5, #20]
   385d0:	pop	{r4, r5, r6, pc}
   385d4:	mov	r1, r4
   385d8:	mov	r0, r5
   385dc:	mov	r3, r6
   385e0:	pop	{r4, r5, r6, lr}
   385e4:	bx	r3
   385e8:	ldrb	ip, [r0, #28]
   385ec:	cmp	ip, #0
   385f0:	beq	38510 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   385f4:	pop	{r4, r5, r6, pc}
   385f8:	cmp	r4, #9
   385fc:	bls	3862c <flatcc_json_printer_int8_enum_field@@Base+0x17c>
   38600:	ldr	r2, [pc, #64]	; 38648 <flatcc_json_printer_int8_enum_field@@Base+0x198>
   38604:	sxth	r4, r4
   38608:	mov	r0, #0
   3860c:	strb	r0, [r3, #2]
   38610:	ldrb	r0, [r2, r4, lsl #1]
   38614:	add	r4, r2, r4, lsl #1
   38618:	mov	r2, #2
   3861c:	strb	r0, [r3]
   38620:	ldrb	r0, [r4, #1]
   38624:	strb	r0, [r3, #1]
   38628:	b	385c0 <flatcc_json_printer_int8_enum_field@@Base+0x110>
   3862c:	add	r4, r4, #48	; 0x30
   38630:	mov	r0, #0
   38634:	mov	r2, #1
   38638:	strb	r4, [r3]
   3863c:	strb	r0, [r3, #1]
   38640:	b	385c0 <flatcc_json_printer_int8_enum_field@@Base+0x110>
   38644:	mvnpl	r8, pc, lsl r5
   38648:	andeq	r7, r4, r0, asr r4

0003864c <flatcc_json_printer_int16_enum_field@@Base>:
   3864c:	add	r2, r2, #2
   38650:	push	{r4, r5, r6, lr}
   38654:	lsl	ip, r2, #1
   38658:	ldr	lr, [r1, #8]
   3865c:	ldr	r2, [sp, #16]
   38660:	cmp	ip, lr
   38664:	ldr	r5, [sp, #24]
   38668:	ldrsh	lr, [sp, #20]
   3866c:	blt	38684 <flatcc_json_printer_int16_enum_field@@Base+0x38>
   38670:	ldrb	ip, [r0, #29]
   38674:	cmp	ip, #0
   38678:	popeq	{r4, r5, r6, pc}
   3867c:	mov	r6, lr
   38680:	b	386ac <flatcc_json_printer_int16_enum_field@@Base+0x60>
   38684:	ldr	r4, [r1, #4]
   38688:	ldrh	ip, [r4, ip]
   3868c:	cmp	ip, #0
   38690:	beq	38670 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   38694:	ldr	r4, [r1]
   38698:	cmn	r4, ip
   3869c:	beq	38670 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   386a0:	ldrsh	r6, [r4, ip]
   386a4:	cmp	lr, r6
   386a8:	beq	38738 <flatcc_json_printer_int16_enum_field@@Base+0xec>
   386ac:	ldr	ip, [r1, #16]
   386b0:	mov	r4, r0
   386b4:	cmp	ip, #0
   386b8:	add	ip, ip, #1
   386bc:	str	ip, [r1, #16]
   386c0:	ldrne	r1, [r0, #20]
   386c4:	movne	ip, #44	; 0x2c
   386c8:	addne	lr, r1, #1
   386cc:	strne	lr, [r0, #20]
   386d0:	strbne	ip, [r1]
   386d4:	mov	r1, r3
   386d8:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   386dc:	ldrb	r3, [r4, #27]
   386e0:	cmp	r3, #0
   386e4:	beq	38724 <flatcc_json_printer_int16_enum_field@@Base+0xd8>
   386e8:	cmp	r6, #0
   386ec:	lsr	r5, r6, #31
   386f0:	rsblt	r6, r6, #0
   386f4:	ldr	r1, [r4, #20]
   386f8:	sxthlt	r6, r6
   386fc:	movlt	r3, #45	; 0x2d
   38700:	strblt	r3, [r1]
   38704:	uxth	r0, r6
   38708:	addlt	r1, r1, #1
   3870c:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   38710:	ldr	r3, [r4, #20]
   38714:	add	r0, r5, r0
   38718:	add	r3, r3, r0
   3871c:	str	r3, [r4, #20]
   38720:	pop	{r4, r5, r6, pc}
   38724:	mov	r1, r6
   38728:	mov	r0, r4
   3872c:	mov	r3, r5
   38730:	pop	{r4, r5, r6, lr}
   38734:	bx	r3
   38738:	ldrb	ip, [r0, #28]
   3873c:	cmp	ip, #0
   38740:	beq	386ac <flatcc_json_printer_int16_enum_field@@Base+0x60>
   38744:	pop	{r4, r5, r6, pc}

00038748 <flatcc_json_printer_int32_enum_field@@Base>:
   38748:	add	r2, r2, #2
   3874c:	push	{r4, r5, r6, lr}
   38750:	lsl	ip, r2, #1
   38754:	ldr	lr, [r1, #8]
   38758:	ldr	r2, [sp, #16]
   3875c:	cmp	ip, lr
   38760:	ldr	r5, [sp, #24]
   38764:	ldr	lr, [sp, #20]
   38768:	blt	38780 <flatcc_json_printer_int32_enum_field@@Base+0x38>
   3876c:	ldrb	ip, [r0, #29]
   38770:	cmp	ip, #0
   38774:	popeq	{r4, r5, r6, pc}
   38778:	mov	r6, lr
   3877c:	b	387a8 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   38780:	ldr	r4, [r1, #4]
   38784:	ldrh	ip, [r4, ip]
   38788:	cmp	ip, #0
   3878c:	beq	3876c <flatcc_json_printer_int32_enum_field@@Base+0x24>
   38790:	ldr	r4, [r1]
   38794:	cmn	r4, ip
   38798:	beq	3876c <flatcc_json_printer_int32_enum_field@@Base+0x24>
   3879c:	ldr	r6, [r4, ip]
   387a0:	cmp	lr, r6
   387a4:	beq	38830 <flatcc_json_printer_int32_enum_field@@Base+0xe8>
   387a8:	ldr	ip, [r1, #16]
   387ac:	mov	r4, r0
   387b0:	cmp	ip, #0
   387b4:	add	ip, ip, #1
   387b8:	str	ip, [r1, #16]
   387bc:	ldrne	r1, [r0, #20]
   387c0:	movne	ip, #44	; 0x2c
   387c4:	addne	lr, r1, #1
   387c8:	strne	lr, [r0, #20]
   387cc:	strbne	ip, [r1]
   387d0:	mov	r1, r3
   387d4:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   387d8:	ldrb	r3, [r4, #27]
   387dc:	cmp	r3, #0
   387e0:	beq	3881c <flatcc_json_printer_int32_enum_field@@Base+0xd4>
   387e4:	ldr	r1, [r4, #20]
   387e8:	cmp	r6, #0
   387ec:	movlt	r3, #45	; 0x2d
   387f0:	lsr	r5, r6, #31
   387f4:	rsblt	r6, r6, #0
   387f8:	strblt	r3, [r1]
   387fc:	mov	r0, r6
   38800:	addlt	r1, r1, #1
   38804:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   38808:	ldr	r3, [r4, #20]
   3880c:	add	r0, r5, r0
   38810:	add	r3, r3, r0
   38814:	str	r3, [r4, #20]
   38818:	pop	{r4, r5, r6, pc}
   3881c:	mov	r1, r6
   38820:	mov	r0, r4
   38824:	mov	r3, r5
   38828:	pop	{r4, r5, r6, lr}
   3882c:	bx	r3
   38830:	ldrb	ip, [r0, #28]
   38834:	cmp	ip, #0
   38838:	beq	387a8 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   3883c:	pop	{r4, r5, r6, pc}

00038840 <flatcc_json_printer_int64_enum_field@@Base>:
   38840:	add	r2, r2, #2
   38844:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38848:	lsl	ip, r2, #1
   3884c:	ldr	lr, [r1, #8]
   38850:	ldr	r2, [sp, #32]
   38854:	cmp	ip, lr
   38858:	ldrd	r8, [sp, #40]	; 0x28
   3885c:	ldr	r5, [sp, #48]	; 0x30
   38860:	blt	3887c <flatcc_json_printer_int64_enum_field@@Base+0x3c>
   38864:	ldrb	ip, [r0, #29]
   38868:	cmp	ip, #0
   3886c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38870:	mov	r6, r8
   38874:	mov	r7, r9
   38878:	b	388a8 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   3887c:	ldr	lr, [r1, #4]
   38880:	ldrh	ip, [lr, ip]
   38884:	cmp	ip, #0
   38888:	beq	38864 <flatcc_json_printer_int64_enum_field@@Base+0x24>
   3888c:	ldr	lr, [r1]
   38890:	cmn	lr, ip
   38894:	beq	38864 <flatcc_json_printer_int64_enum_field@@Base+0x24>
   38898:	ldrd	r6, [lr, ip]
   3889c:	cmp	r9, r7
   388a0:	cmpeq	r8, r6
   388a4:	beq	38944 <flatcc_json_printer_int64_enum_field@@Base+0x104>
   388a8:	ldr	ip, [r1, #16]
   388ac:	mov	r4, r0
   388b0:	cmp	ip, #0
   388b4:	add	ip, ip, #1
   388b8:	str	ip, [r1, #16]
   388bc:	ldrne	r1, [r0, #20]
   388c0:	movne	ip, #44	; 0x2c
   388c4:	addne	lr, r1, #1
   388c8:	strne	lr, [r0, #20]
   388cc:	strbne	ip, [r1]
   388d0:	mov	r1, r3
   388d4:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   388d8:	ldrb	r3, [r4, #27]
   388dc:	cmp	r3, #0
   388e0:	beq	3892c <flatcc_json_printer_int64_enum_field@@Base+0xec>
   388e4:	cmp	r6, #0
   388e8:	sbcs	r3, r7, #0
   388ec:	ldr	r2, [r4, #20]
   388f0:	lsr	r5, r7, #31
   388f4:	bge	3890c <flatcc_json_printer_int64_enum_field@@Base+0xcc>
   388f8:	mov	r3, #45	; 0x2d
   388fc:	rsbs	r6, r6, #0
   38900:	strb	r3, [r2]
   38904:	rsc	r7, r7, #0
   38908:	add	r2, r2, #1
   3890c:	mov	r0, r6
   38910:	mov	r1, r7
   38914:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   38918:	ldr	r3, [r4, #20]
   3891c:	add	r0, r5, r0
   38920:	add	r3, r3, r0
   38924:	str	r3, [r4, #20]
   38928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3892c:	mov	r2, r6
   38930:	mov	r3, r7
   38934:	mov	r0, r4
   38938:	mov	r1, r5
   3893c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   38940:	bx	r1
   38944:	ldrb	ip, [r0, #28]
   38948:	cmp	ip, #0
   3894c:	beq	388a8 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   38950:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00038954 <flatcc_json_printer_bool_enum_field@@Base>:
   38954:	add	r2, r2, #2
   38958:	push	{r4, r5, r6, lr}
   3895c:	lsl	ip, r2, #1
   38960:	ldr	lr, [r1, #8]
   38964:	ldr	r2, [sp, #16]
   38968:	cmp	ip, lr
   3896c:	ldr	r5, [sp, #24]
   38970:	ldrb	lr, [sp, #20]
   38974:	blt	3898c <flatcc_json_printer_bool_enum_field@@Base+0x38>
   38978:	ldrb	ip, [r0, #29]
   3897c:	cmp	ip, #0
   38980:	popeq	{r4, r5, r6, pc}
   38984:	mov	r6, lr
   38988:	b	389b4 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   3898c:	ldr	r4, [r1, #4]
   38990:	ldrh	ip, [r4, ip]
   38994:	cmp	ip, #0
   38998:	beq	38978 <flatcc_json_printer_bool_enum_field@@Base+0x24>
   3899c:	ldr	r4, [r1]
   389a0:	cmn	r4, ip
   389a4:	beq	38978 <flatcc_json_printer_bool_enum_field@@Base+0x24>
   389a8:	ldrb	r6, [r4, ip]
   389ac:	cmp	lr, r6
   389b0:	beq	38a3c <flatcc_json_printer_bool_enum_field@@Base+0xe8>
   389b4:	ldr	ip, [r1, #16]
   389b8:	mov	r4, r0
   389bc:	cmp	ip, #0
   389c0:	add	ip, ip, #1
   389c4:	str	ip, [r1, #16]
   389c8:	ldrne	r1, [r0, #20]
   389cc:	movne	ip, #44	; 0x2c
   389d0:	addne	lr, r1, #1
   389d4:	strne	lr, [r0, #20]
   389d8:	strbne	ip, [r1]
   389dc:	mov	r1, r3
   389e0:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   389e4:	ldrb	r3, [r4, #27]
   389e8:	cmp	r3, #0
   389ec:	bne	38a04 <flatcc_json_printer_bool_enum_field@@Base+0xb0>
   389f0:	mov	r1, r6
   389f4:	mov	r0, r4
   389f8:	mov	r3, r5
   389fc:	pop	{r4, r5, r6, lr}
   38a00:	bx	r3
   38a04:	cmp	r6, #0
   38a08:	ldr	r3, [pc, #84]	; 38a64 <flatcc_json_printer_bool_enum_field@@Base+0x110>
   38a0c:	ldr	r2, [r4, #20]
   38a10:	bne	38a4c <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   38a14:	add	ip, r3, #1792	; 0x700
   38a18:	ldr	r0, [r3, #1792]	; 0x700
   38a1c:	ldrh	r3, [ip, #4]
   38a20:	mov	r1, #5
   38a24:	str	r0, [r2]
   38a28:	strh	r3, [r2, #4]
   38a2c:	ldr	r3, [r4, #20]
   38a30:	add	r3, r3, r1
   38a34:	str	r3, [r4, #20]
   38a38:	pop	{r4, r5, r6, pc}
   38a3c:	ldrb	ip, [r0, #28]
   38a40:	cmp	ip, #0
   38a44:	beq	389b4 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   38a48:	pop	{r4, r5, r6, pc}
   38a4c:	ldrb	ip, [r3, #1788]	; 0x6fc
   38a50:	ldr	r0, [r3, #1784]	; 0x6f8
   38a54:	mov	r1, #4
   38a58:	strb	ip, [r2, #4]
   38a5c:	str	r0, [r2]
   38a60:	b	38a2c <flatcc_json_printer_bool_enum_field@@Base+0xd8>
   38a64:	andeq	r7, r4, r0, asr r4

00038a68 <flatcc_json_printer_uint8_struct_field@@Base>:
   38a68:	cmp	r1, #0
   38a6c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38a70:	mov	r4, r0
   38a74:	ldrb	r8, [r2, r3]
   38a78:	ldrne	r3, [r0, #20]
   38a7c:	movne	r2, #44	; 0x2c
   38a80:	addne	r1, r3, #1
   38a84:	strne	r1, [r0, #20]
   38a88:	strbne	r2, [r3]
   38a8c:	ldrb	r1, [r0, #25]
   38a90:	ldr	r9, [sp, #44]	; 0x2c
   38a94:	ldr	r6, [sp, #40]	; 0x28
   38a98:	cmp	r1, #0
   38a9c:	mov	r7, r9
   38aa0:	bne	38c64 <flatcc_json_printer_uint8_struct_field@@Base+0x1fc>
   38aa4:	ldr	r5, [r0, #20]
   38aa8:	ldr	r3, [r0, #16]
   38aac:	cmp	r5, r3
   38ab0:	bcs	38c04 <flatcc_json_printer_uint8_struct_field@@Base+0x19c>
   38ab4:	mov	r3, #34	; 0x22
   38ab8:	strb	r3, [r5]
   38abc:	ldrb	r3, [r4, #26]
   38ac0:	ldr	r0, [r4, #20]
   38ac4:	ldr	r5, [r4, #16]
   38ac8:	cmp	r3, #0
   38acc:	addeq	r0, r0, #1
   38ad0:	add	r3, r0, r9
   38ad4:	cmp	r5, r3
   38ad8:	str	r0, [r4, #20]
   38adc:	bhi	38c14 <flatcc_json_printer_uint8_struct_field@@Base+0x1ac>
   38ae0:	cmp	r0, r5
   38ae4:	bcs	38d10 <flatcc_json_printer_uint8_struct_field@@Base+0x2a8>
   38ae8:	sub	r5, r5, r0
   38aec:	cmp	r9, r5
   38af0:	bls	38b3c <flatcc_json_printer_uint8_struct_field@@Base+0xd4>
   38af4:	mov	r9, #0
   38af8:	mov	r2, r5
   38afc:	mov	r1, r6
   38b00:	bl	1454c <memcpy@plt>
   38b04:	ldr	r3, [r4, #20]
   38b08:	mov	r0, r4
   38b0c:	add	r3, r3, r5
   38b10:	str	r3, [r4, #20]
   38b14:	ldr	r2, [r4, #44]	; 0x2c
   38b18:	mov	r1, r9
   38b1c:	blx	r2
   38b20:	ldr	r0, [r4, #20]
   38b24:	ldr	r3, [r4, #16]
   38b28:	sub	r7, r7, r5
   38b2c:	add	r6, r6, r5
   38b30:	sub	r5, r3, r0
   38b34:	cmp	r7, r5
   38b38:	bhi	38af8 <flatcc_json_printer_uint8_struct_field@@Base+0x90>
   38b3c:	mov	r1, r6
   38b40:	mov	r2, r7
   38b44:	bl	1454c <memcpy@plt>
   38b48:	ldr	r9, [r4, #20]
   38b4c:	add	r9, r9, r7
   38b50:	str	r9, [r4, #20]
   38b54:	mov	r3, #34	; 0x22
   38b58:	strb	r3, [r9]
   38b5c:	ldr	r1, [r4, #20]
   38b60:	ldrb	r3, [r4, #26]
   38b64:	clz	r3, r3
   38b68:	lsr	r3, r3, #5
   38b6c:	add	r2, r1, r3
   38b70:	add	r2, r2, #1
   38b74:	mov	r0, #58	; 0x3a
   38b78:	str	r2, [r4, #20]
   38b7c:	strb	r0, [r1, r3]
   38b80:	ldr	r3, [r4, #20]
   38b84:	mov	r2, #32
   38b88:	strb	r2, [r3]
   38b8c:	ldrb	r1, [r4, #25]
   38b90:	ldr	ip, [r4, #20]
   38b94:	adds	r1, r1, #0
   38b98:	movne	r1, #1
   38b9c:	add	r0, ip, r1
   38ba0:	cmp	r8, #99	; 0x63
   38ba4:	str	r0, [r4, #20]
   38ba8:	bls	38c30 <flatcc_json_printer_uint8_struct_field@@Base+0x1c8>
   38bac:	ldr	r3, [pc, #428]	; 38d60 <flatcc_json_printer_uint8_struct_field@@Base+0x2f8>
   38bb0:	mov	r2, #100	; 0x64
   38bb4:	ldr	lr, [pc, #424]	; 38d64 <flatcc_json_printer_uint8_struct_field@@Base+0x2fc>
   38bb8:	umull	r5, r3, r3, r8
   38bbc:	mov	r5, #0
   38bc0:	lsr	r3, r3, #5
   38bc4:	strb	r5, [r0, #3]
   38bc8:	mul	r2, r2, r3
   38bcc:	add	r3, r3, #48	; 0x30
   38bd0:	sub	r8, r8, r2
   38bd4:	mov	r2, #3
   38bd8:	uxtb	r8, r8
   38bdc:	ldrb	r5, [lr, r8, lsl #1]
   38be0:	add	r8, lr, r8, lsl #1
   38be4:	strb	r5, [r0, #1]
   38be8:	ldrb	lr, [r8, #1]
   38bec:	strb	lr, [r0, #2]
   38bf0:	strb	r3, [ip, r1]
   38bf4:	ldr	r3, [r4, #20]
   38bf8:	add	r3, r3, r2
   38bfc:	str	r3, [r4, #20]
   38c00:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c04:	ldr	r3, [r0, #44]	; 0x2c
   38c08:	blx	r3
   38c0c:	ldr	r5, [r4, #20]
   38c10:	b	38ab4 <flatcc_json_printer_uint8_struct_field@@Base+0x4c>
   38c14:	mov	r2, r9
   38c18:	mov	r1, r6
   38c1c:	bl	1454c <memcpy@plt>
   38c20:	ldr	r7, [r4, #20]
   38c24:	add	r9, r7, r9
   38c28:	str	r9, [r4, #20]
   38c2c:	b	38b54 <flatcc_json_printer_uint8_struct_field@@Base+0xec>
   38c30:	cmp	r8, #9
   38c34:	bls	38d2c <flatcc_json_printer_uint8_struct_field@@Base+0x2c4>
   38c38:	ldr	r3, [pc, #292]	; 38d64 <flatcc_json_printer_uint8_struct_field@@Base+0x2fc>
   38c3c:	sxth	r8, r8
   38c40:	mov	r2, #0
   38c44:	strb	r2, [r0, #2]
   38c48:	ldrb	lr, [r3, r8, lsl #1]
   38c4c:	add	r3, r3, r8, lsl #1
   38c50:	mov	r2, #2
   38c54:	strb	lr, [ip, r1]
   38c58:	ldrb	r3, [r3, #1]
   38c5c:	strb	r3, [r0, #1]
   38c60:	b	38bf4 <flatcc_json_printer_uint8_struct_field@@Base+0x18c>
   38c64:	ldr	r3, [r0, #20]
   38c68:	mov	r2, #10
   38c6c:	add	r1, r3, #1
   38c70:	str	r1, [r0, #20]
   38c74:	strb	r2, [r3]
   38c78:	ldrb	r2, [r0, #25]
   38c7c:	ldr	r5, [r0, #32]
   38c80:	ldr	r0, [r0, #20]
   38c84:	ldr	r3, [r4, #16]
   38c88:	mul	r5, r5, r2
   38c8c:	add	r2, r0, r5
   38c90:	cmp	r3, r2
   38c94:	bcc	38cb4 <flatcc_json_printer_uint8_struct_field@@Base+0x24c>
   38c98:	mov	r2, r5
   38c9c:	mov	r1, #32
   38ca0:	bl	145c4 <memset@plt>
   38ca4:	ldr	r3, [r4, #20]
   38ca8:	add	r5, r3, r5
   38cac:	str	r5, [r4, #20]
   38cb0:	b	38ab4 <flatcc_json_printer_uint8_struct_field@@Base+0x4c>
   38cb4:	cmp	r0, r3
   38cb8:	bcs	38d44 <flatcc_json_printer_uint8_struct_field@@Base+0x2dc>
   38cbc:	sub	sl, r3, r0
   38cc0:	cmp	r5, sl
   38cc4:	bls	38c98 <flatcc_json_printer_uint8_struct_field@@Base+0x230>
   38cc8:	mov	fp, #32
   38ccc:	mov	r2, sl
   38cd0:	mov	r1, fp
   38cd4:	bl	145c4 <memset@plt>
   38cd8:	ldr	r1, [r4, #20]
   38cdc:	ldr	r2, [r4, #44]	; 0x2c
   38ce0:	add	r1, r1, sl
   38ce4:	str	r1, [r4, #20]
   38ce8:	mov	r0, r4
   38cec:	mov	r1, #0
   38cf0:	blx	r2
   38cf4:	ldr	r0, [r4, #20]
   38cf8:	ldr	r2, [r4, #16]
   38cfc:	sub	r5, r5, sl
   38d00:	sub	sl, r2, r0
   38d04:	cmp	r5, sl
   38d08:	bhi	38ccc <flatcc_json_printer_uint8_struct_field@@Base+0x264>
   38d0c:	b	38c98 <flatcc_json_printer_uint8_struct_field@@Base+0x230>
   38d10:	mov	r0, r4
   38d14:	ldr	r3, [r4, #44]	; 0x2c
   38d18:	mov	r1, #0
   38d1c:	blx	r3
   38d20:	ldr	r5, [r4, #16]
   38d24:	ldr	r0, [r4, #20]
   38d28:	b	38ae8 <flatcc_json_printer_uint8_struct_field@@Base+0x80>
   38d2c:	add	r8, r8, #48	; 0x30
   38d30:	mov	r3, #0
   38d34:	strb	r3, [r0, #1]
   38d38:	mov	r2, #1
   38d3c:	strb	r8, [ip, r1]
   38d40:	b	38bf4 <flatcc_json_printer_uint8_struct_field@@Base+0x18c>
   38d44:	ldr	r3, [r4, #44]	; 0x2c
   38d48:	mov	r0, r4
   38d4c:	mov	r1, #0
   38d50:	blx	r3
   38d54:	ldr	r3, [r4, #16]
   38d58:	ldr	r0, [r4, #20]
   38d5c:	b	38cbc <flatcc_json_printer_uint8_struct_field@@Base+0x254>
   38d60:	mvnpl	r8, pc, lsl r5
   38d64:	andeq	r7, r4, r0, asr r4

00038d68 <flatcc_json_printer_uint16_struct_field@@Base>:
   38d68:	cmp	r1, #0
   38d6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38d70:	mov	r4, r0
   38d74:	ldrh	r8, [r2, r3]
   38d78:	ldrne	r3, [r0, #20]
   38d7c:	movne	r2, #44	; 0x2c
   38d80:	addne	r1, r3, #1
   38d84:	strne	r1, [r0, #20]
   38d88:	strbne	r2, [r3]
   38d8c:	ldrb	r1, [r0, #25]
   38d90:	ldr	r9, [sp, #36]	; 0x24
   38d94:	ldr	r6, [sp, #32]
   38d98:	cmp	r1, #0
   38d9c:	mov	r7, r9
   38da0:	ldr	r3, [r0, #20]
   38da4:	bne	38ee4 <flatcc_json_printer_uint16_struct_field@@Base+0x17c>
   38da8:	ldr	r2, [r0, #16]
   38dac:	cmp	r3, r2
   38db0:	bcs	38eb8 <flatcc_json_printer_uint16_struct_field@@Base+0x150>
   38db4:	mov	r2, #34	; 0x22
   38db8:	strb	r2, [r3]
   38dbc:	ldrb	r3, [r4, #26]
   38dc0:	ldr	r0, [r4, #20]
   38dc4:	ldr	r5, [r4, #16]
   38dc8:	cmp	r3, #0
   38dcc:	addeq	r0, r0, #1
   38dd0:	add	r3, r0, r9
   38dd4:	cmp	r5, r3
   38dd8:	str	r0, [r4, #20]
   38ddc:	bhi	38ec8 <flatcc_json_printer_uint16_struct_field@@Base+0x160>
   38de0:	cmp	r0, r5
   38de4:	bcs	38f00 <flatcc_json_printer_uint16_struct_field@@Base+0x198>
   38de8:	sub	r5, r5, r0
   38dec:	cmp	r9, r5
   38df0:	bls	38e3c <flatcc_json_printer_uint16_struct_field@@Base+0xd4>
   38df4:	mov	r9, #0
   38df8:	mov	r2, r5
   38dfc:	mov	r1, r6
   38e00:	bl	1454c <memcpy@plt>
   38e04:	ldr	r3, [r4, #20]
   38e08:	mov	r0, r4
   38e0c:	add	r3, r3, r5
   38e10:	str	r3, [r4, #20]
   38e14:	ldr	r2, [r4, #44]	; 0x2c
   38e18:	mov	r1, r9
   38e1c:	blx	r2
   38e20:	ldr	r0, [r4, #20]
   38e24:	ldr	r3, [r4, #16]
   38e28:	sub	r7, r7, r5
   38e2c:	add	r6, r6, r5
   38e30:	sub	r5, r3, r0
   38e34:	cmp	r7, r5
   38e38:	bhi	38df8 <flatcc_json_printer_uint16_struct_field@@Base+0x90>
   38e3c:	mov	r1, r6
   38e40:	mov	r2, r7
   38e44:	bl	1454c <memcpy@plt>
   38e48:	ldr	r9, [r4, #20]
   38e4c:	add	r9, r9, r7
   38e50:	str	r9, [r4, #20]
   38e54:	mov	r3, #34	; 0x22
   38e58:	strb	r3, [r9]
   38e5c:	ldr	r1, [r4, #20]
   38e60:	ldrb	r3, [r4, #26]
   38e64:	clz	r3, r3
   38e68:	lsr	r3, r3, #5
   38e6c:	add	r2, r1, r3
   38e70:	add	r2, r2, #1
   38e74:	mov	r0, #58	; 0x3a
   38e78:	str	r2, [r4, #20]
   38e7c:	strb	r0, [r1, r3]
   38e80:	ldr	r3, [r4, #20]
   38e84:	mov	r2, #32
   38e88:	mov	r0, r8
   38e8c:	strb	r2, [r3]
   38e90:	ldrb	r3, [r4, #25]
   38e94:	ldr	r1, [r4, #20]
   38e98:	cmp	r3, #0
   38e9c:	addne	r1, r1, #1
   38ea0:	str	r1, [r4, #20]
   38ea4:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   38ea8:	ldr	r3, [r4, #20]
   38eac:	add	r0, r3, r0
   38eb0:	str	r0, [r4, #20]
   38eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38eb8:	ldr	r3, [r0, #44]	; 0x2c
   38ebc:	blx	r3
   38ec0:	ldr	r3, [r4, #20]
   38ec4:	b	38db4 <flatcc_json_printer_uint16_struct_field@@Base+0x4c>
   38ec8:	mov	r2, r9
   38ecc:	mov	r1, r6
   38ed0:	bl	1454c <memcpy@plt>
   38ed4:	ldr	r7, [r4, #20]
   38ed8:	add	r9, r7, r9
   38edc:	str	r9, [r4, #20]
   38ee0:	b	38e54 <flatcc_json_printer_uint16_struct_field@@Base+0xec>
   38ee4:	add	r1, r3, #1
   38ee8:	mov	r2, #10
   38eec:	str	r1, [r0, #20]
   38ef0:	strb	r2, [r3]
   38ef4:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   38ef8:	ldr	r3, [r4, #20]
   38efc:	b	38db4 <flatcc_json_printer_uint16_struct_field@@Base+0x4c>
   38f00:	mov	r0, r4
   38f04:	ldr	r3, [r4, #44]	; 0x2c
   38f08:	mov	r1, #0
   38f0c:	blx	r3
   38f10:	ldr	r5, [r4, #16]
   38f14:	ldr	r0, [r4, #20]
   38f18:	b	38de8 <flatcc_json_printer_uint16_struct_field@@Base+0x80>

00038f1c <flatcc_json_printer_uint32_struct_field@@Base>:
   38f1c:	cmp	r1, #0
   38f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38f24:	mov	r4, r0
   38f28:	ldr	r8, [r2, r3]
   38f2c:	ldrne	r3, [r0, #20]
   38f30:	movne	r2, #44	; 0x2c
   38f34:	addne	r1, r3, #1
   38f38:	strne	r1, [r0, #20]
   38f3c:	strbne	r2, [r3]
   38f40:	ldrb	r1, [r0, #25]
   38f44:	ldr	r9, [sp, #36]	; 0x24
   38f48:	ldr	r6, [sp, #32]
   38f4c:	cmp	r1, #0
   38f50:	mov	r7, r9
   38f54:	ldr	r3, [r0, #20]
   38f58:	bne	39098 <flatcc_json_printer_uint32_struct_field@@Base+0x17c>
   38f5c:	ldr	r2, [r0, #16]
   38f60:	cmp	r3, r2
   38f64:	bcs	3906c <flatcc_json_printer_uint32_struct_field@@Base+0x150>
   38f68:	mov	r2, #34	; 0x22
   38f6c:	strb	r2, [r3]
   38f70:	ldrb	r3, [r4, #26]
   38f74:	ldr	r0, [r4, #20]
   38f78:	ldr	r5, [r4, #16]
   38f7c:	cmp	r3, #0
   38f80:	addeq	r0, r0, #1
   38f84:	add	r3, r0, r9
   38f88:	cmp	r5, r3
   38f8c:	str	r0, [r4, #20]
   38f90:	bhi	3907c <flatcc_json_printer_uint32_struct_field@@Base+0x160>
   38f94:	cmp	r0, r5
   38f98:	bcs	390b4 <flatcc_json_printer_uint32_struct_field@@Base+0x198>
   38f9c:	sub	r5, r5, r0
   38fa0:	cmp	r9, r5
   38fa4:	bls	38ff0 <flatcc_json_printer_uint32_struct_field@@Base+0xd4>
   38fa8:	mov	r9, #0
   38fac:	mov	r2, r5
   38fb0:	mov	r1, r6
   38fb4:	bl	1454c <memcpy@plt>
   38fb8:	ldr	r3, [r4, #20]
   38fbc:	mov	r0, r4
   38fc0:	add	r3, r3, r5
   38fc4:	str	r3, [r4, #20]
   38fc8:	ldr	r2, [r4, #44]	; 0x2c
   38fcc:	mov	r1, r9
   38fd0:	blx	r2
   38fd4:	ldr	r0, [r4, #20]
   38fd8:	ldr	r3, [r4, #16]
   38fdc:	sub	r7, r7, r5
   38fe0:	add	r6, r6, r5
   38fe4:	sub	r5, r3, r0
   38fe8:	cmp	r7, r5
   38fec:	bhi	38fac <flatcc_json_printer_uint32_struct_field@@Base+0x90>
   38ff0:	mov	r1, r6
   38ff4:	mov	r2, r7
   38ff8:	bl	1454c <memcpy@plt>
   38ffc:	ldr	r9, [r4, #20]
   39000:	add	r9, r9, r7
   39004:	str	r9, [r4, #20]
   39008:	mov	r3, #34	; 0x22
   3900c:	strb	r3, [r9]
   39010:	ldr	r1, [r4, #20]
   39014:	ldrb	r3, [r4, #26]
   39018:	clz	r3, r3
   3901c:	lsr	r3, r3, #5
   39020:	add	r2, r1, r3
   39024:	add	r2, r2, #1
   39028:	mov	r0, #58	; 0x3a
   3902c:	str	r2, [r4, #20]
   39030:	strb	r0, [r1, r3]
   39034:	ldr	r3, [r4, #20]
   39038:	mov	r2, #32
   3903c:	mov	r0, r8
   39040:	strb	r2, [r3]
   39044:	ldrb	r3, [r4, #25]
   39048:	ldr	r1, [r4, #20]
   3904c:	cmp	r3, #0
   39050:	addne	r1, r1, #1
   39054:	str	r1, [r4, #20]
   39058:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3905c:	ldr	r3, [r4, #20]
   39060:	add	r0, r3, r0
   39064:	str	r0, [r4, #20]
   39068:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3906c:	ldr	r3, [r0, #44]	; 0x2c
   39070:	blx	r3
   39074:	ldr	r3, [r4, #20]
   39078:	b	38f68 <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
   3907c:	mov	r2, r9
   39080:	mov	r1, r6
   39084:	bl	1454c <memcpy@plt>
   39088:	ldr	r7, [r4, #20]
   3908c:	add	r9, r7, r9
   39090:	str	r9, [r4, #20]
   39094:	b	39008 <flatcc_json_printer_uint32_struct_field@@Base+0xec>
   39098:	add	r1, r3, #1
   3909c:	mov	r2, #10
   390a0:	str	r1, [r0, #20]
   390a4:	strb	r2, [r3]
   390a8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   390ac:	ldr	r3, [r4, #20]
   390b0:	b	38f68 <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
   390b4:	mov	r0, r4
   390b8:	ldr	r3, [r4, #44]	; 0x2c
   390bc:	mov	r1, #0
   390c0:	blx	r3
   390c4:	ldr	r5, [r4, #16]
   390c8:	ldr	r0, [r4, #20]
   390cc:	b	38f9c <flatcc_json_printer_uint32_struct_field@@Base+0x80>

000390d0 <flatcc_json_printer_uint64_struct_field@@Base>:
   390d0:	cmp	r1, #0
   390d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   390d8:	mov	r4, r0
   390dc:	ldrd	r6, [r2, r3]
   390e0:	ldrne	r3, [r0, #20]
   390e4:	movne	r2, #44	; 0x2c
   390e8:	addne	r1, r3, #1
   390ec:	strne	r1, [r0, #20]
   390f0:	strbne	r2, [r3]
   390f4:	ldrb	r1, [r0, #25]
   390f8:	ldr	sl, [sp, #36]	; 0x24
   390fc:	ldr	r8, [sp, #32]
   39100:	cmp	r1, #0
   39104:	mov	r9, sl
   39108:	ldr	r3, [r0, #20]
   3910c:	bne	39250 <flatcc_json_printer_uint64_struct_field@@Base+0x180>
   39110:	ldr	r2, [r0, #16]
   39114:	cmp	r3, r2
   39118:	bcs	39224 <flatcc_json_printer_uint64_struct_field@@Base+0x154>
   3911c:	mov	r2, #34	; 0x22
   39120:	strb	r2, [r3]
   39124:	ldrb	r3, [r4, #26]
   39128:	ldr	r0, [r4, #20]
   3912c:	ldr	r5, [r4, #16]
   39130:	cmp	r3, #0
   39134:	addeq	r0, r0, #1
   39138:	add	r3, r0, sl
   3913c:	cmp	r5, r3
   39140:	str	r0, [r4, #20]
   39144:	bhi	39234 <flatcc_json_printer_uint64_struct_field@@Base+0x164>
   39148:	cmp	r0, r5
   3914c:	bcs	3926c <flatcc_json_printer_uint64_struct_field@@Base+0x19c>
   39150:	sub	r5, r5, r0
   39154:	cmp	sl, r5
   39158:	bls	391a4 <flatcc_json_printer_uint64_struct_field@@Base+0xd4>
   3915c:	mov	sl, #0
   39160:	mov	r2, r5
   39164:	mov	r1, r8
   39168:	bl	1454c <memcpy@plt>
   3916c:	ldr	r3, [r4, #20]
   39170:	mov	r0, r4
   39174:	add	r3, r3, r5
   39178:	str	r3, [r4, #20]
   3917c:	ldr	r2, [r4, #44]	; 0x2c
   39180:	mov	r1, sl
   39184:	blx	r2
   39188:	ldr	r0, [r4, #20]
   3918c:	ldr	r3, [r4, #16]
   39190:	sub	r9, r9, r5
   39194:	add	r8, r8, r5
   39198:	sub	r5, r3, r0
   3919c:	cmp	r9, r5
   391a0:	bhi	39160 <flatcc_json_printer_uint64_struct_field@@Base+0x90>
   391a4:	mov	r1, r8
   391a8:	mov	r2, r9
   391ac:	bl	1454c <memcpy@plt>
   391b0:	ldr	sl, [r4, #20]
   391b4:	add	sl, sl, r9
   391b8:	str	sl, [r4, #20]
   391bc:	mov	r3, #34	; 0x22
   391c0:	strb	r3, [sl]
   391c4:	ldr	r1, [r4, #20]
   391c8:	ldrb	r3, [r4, #26]
   391cc:	clz	r3, r3
   391d0:	lsr	r3, r3, #5
   391d4:	add	r2, r1, r3
   391d8:	add	r2, r2, #1
   391dc:	mov	r0, #58	; 0x3a
   391e0:	str	r2, [r4, #20]
   391e4:	strb	r0, [r1, r3]
   391e8:	ldr	r3, [r4, #20]
   391ec:	mov	r2, #32
   391f0:	mov	r0, r6
   391f4:	strb	r2, [r3]
   391f8:	ldrb	r3, [r4, #25]
   391fc:	ldr	r2, [r4, #20]
   39200:	mov	r1, r7
   39204:	cmp	r3, #0
   39208:	addne	r2, r2, #1
   3920c:	str	r2, [r4, #20]
   39210:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   39214:	ldr	r3, [r4, #20]
   39218:	add	r0, r3, r0
   3921c:	str	r0, [r4, #20]
   39220:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39224:	ldr	r3, [r0, #44]	; 0x2c
   39228:	blx	r3
   3922c:	ldr	r3, [r4, #20]
   39230:	b	3911c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
   39234:	mov	r2, sl
   39238:	mov	r1, r8
   3923c:	bl	1454c <memcpy@plt>
   39240:	ldr	r9, [r4, #20]
   39244:	add	sl, r9, sl
   39248:	str	sl, [r4, #20]
   3924c:	b	391bc <flatcc_json_printer_uint64_struct_field@@Base+0xec>
   39250:	add	r1, r3, #1
   39254:	mov	r2, #10
   39258:	str	r1, [r0, #20]
   3925c:	strb	r2, [r3]
   39260:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   39264:	ldr	r3, [r4, #20]
   39268:	b	3911c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
   3926c:	mov	r0, r4
   39270:	ldr	r3, [r4, #44]	; 0x2c
   39274:	mov	r1, #0
   39278:	blx	r3
   3927c:	ldr	r5, [r4, #16]
   39280:	ldr	r0, [r4, #20]
   39284:	b	39150 <flatcc_json_printer_uint64_struct_field@@Base+0x80>

00039288 <flatcc_json_printer_int8_struct_field@@Base>:
   39288:	cmp	r1, #0
   3928c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39290:	mov	r4, r0
   39294:	ldrsb	r6, [r2, r3]
   39298:	ldrne	r3, [r0, #20]
   3929c:	movne	r2, #44	; 0x2c
   392a0:	addne	r1, r3, #1
   392a4:	strne	r1, [r0, #20]
   392a8:	strbne	r2, [r3]
   392ac:	ldrb	r1, [r0, #25]
   392b0:	ldr	r9, [sp, #36]	; 0x24
   392b4:	ldr	r7, [sp, #32]
   392b8:	cmp	r1, #0
   392bc:	mov	r8, r9
   392c0:	ldr	r3, [r0, #20]
   392c4:	bne	394a8 <flatcc_json_printer_int8_struct_field@@Base+0x220>
   392c8:	ldr	r2, [r0, #16]
   392cc:	cmp	r3, r2
   392d0:	bcs	39448 <flatcc_json_printer_int8_struct_field@@Base+0x1c0>
   392d4:	mov	r2, #34	; 0x22
   392d8:	strb	r2, [r3]
   392dc:	ldrb	r3, [r4, #26]
   392e0:	ldr	r0, [r4, #20]
   392e4:	ldr	r5, [r4, #16]
   392e8:	cmp	r3, #0
   392ec:	addeq	r0, r0, #1
   392f0:	add	r3, r0, r9
   392f4:	cmp	r5, r3
   392f8:	str	r0, [r4, #20]
   392fc:	bhi	39458 <flatcc_json_printer_int8_struct_field@@Base+0x1d0>
   39300:	cmp	r0, r5
   39304:	bcs	394c4 <flatcc_json_printer_int8_struct_field@@Base+0x23c>
   39308:	sub	r5, r5, r0
   3930c:	cmp	r9, r5
   39310:	bls	3935c <flatcc_json_printer_int8_struct_field@@Base+0xd4>
   39314:	mov	r9, #0
   39318:	mov	r2, r5
   3931c:	mov	r1, r7
   39320:	bl	1454c <memcpy@plt>
   39324:	ldr	r3, [r4, #20]
   39328:	mov	r0, r4
   3932c:	add	r3, r3, r5
   39330:	str	r3, [r4, #20]
   39334:	ldr	r2, [r4, #44]	; 0x2c
   39338:	mov	r1, r9
   3933c:	blx	r2
   39340:	ldr	r0, [r4, #20]
   39344:	ldr	r3, [r4, #16]
   39348:	sub	r8, r8, r5
   3934c:	add	r7, r7, r5
   39350:	sub	r5, r3, r0
   39354:	cmp	r8, r5
   39358:	bhi	39318 <flatcc_json_printer_int8_struct_field@@Base+0x90>
   3935c:	mov	r1, r7
   39360:	mov	r2, r8
   39364:	bl	1454c <memcpy@plt>
   39368:	ldr	r9, [r4, #20]
   3936c:	add	r9, r9, r8
   39370:	str	r9, [r4, #20]
   39374:	mov	r3, #34	; 0x22
   39378:	strb	r3, [r9]
   3937c:	ldr	r1, [r4, #20]
   39380:	ldrb	r3, [r4, #26]
   39384:	clz	r3, r3
   39388:	lsr	r3, r3, #5
   3938c:	add	r2, r1, r3
   39390:	add	r2, r2, #1
   39394:	mov	r0, #58	; 0x3a
   39398:	str	r2, [r4, #20]
   3939c:	strb	r0, [r1, r3]
   393a0:	ldr	r3, [r4, #20]
   393a4:	mov	r2, #32
   393a8:	lsr	r1, r6, #31
   393ac:	strb	r2, [r3]
   393b0:	ldrb	r2, [r4, #25]
   393b4:	ldr	r0, [r4, #20]
   393b8:	adds	r2, r2, #0
   393bc:	movne	r2, #1
   393c0:	cmp	r6, #0
   393c4:	rsblt	r6, r6, #0
   393c8:	add	r3, r0, r2
   393cc:	sxtblt	r6, r6
   393d0:	movlt	ip, #45	; 0x2d
   393d4:	uxtb	r6, r6
   393d8:	str	r3, [r4, #20]
   393dc:	addlt	r3, r3, #1
   393e0:	strblt	ip, [r0, r2]
   393e4:	cmp	r6, #99	; 0x63
   393e8:	bls	39474 <flatcc_json_printer_int8_struct_field@@Base+0x1ec>
   393ec:	ldr	r2, [pc, #260]	; 394f8 <flatcc_json_printer_int8_struct_field@@Base+0x270>
   393f0:	mov	ip, #100	; 0x64
   393f4:	ldr	r0, [pc, #256]	; 394fc <flatcc_json_printer_int8_struct_field@@Base+0x274>
   393f8:	umull	lr, r2, r2, r6
   393fc:	mov	lr, #0
   39400:	lsr	r2, r2, #5
   39404:	strb	lr, [r3, #3]
   39408:	mul	r2, ip, r2
   3940c:	mov	ip, #49	; 0x31
   39410:	sub	r6, r6, r2
   39414:	mov	r2, #3
   39418:	uxtb	r6, r6
   3941c:	ldrb	lr, [r0, r6, lsl #1]
   39420:	add	r6, r0, r6, lsl #1
   39424:	strb	lr, [r3, #1]
   39428:	ldrb	r0, [r6, #1]
   3942c:	strb	ip, [r3]
   39430:	strb	r0, [r3, #2]
   39434:	ldr	r3, [r4, #20]
   39438:	add	r1, r1, r2
   3943c:	add	r3, r3, r1
   39440:	str	r3, [r4, #20]
   39444:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39448:	ldr	r3, [r0, #44]	; 0x2c
   3944c:	blx	r3
   39450:	ldr	r3, [r4, #20]
   39454:	b	392d4 <flatcc_json_printer_int8_struct_field@@Base+0x4c>
   39458:	mov	r2, r9
   3945c:	mov	r1, r7
   39460:	bl	1454c <memcpy@plt>
   39464:	ldr	r8, [r4, #20]
   39468:	add	r9, r8, r9
   3946c:	str	r9, [r4, #20]
   39470:	b	39374 <flatcc_json_printer_int8_struct_field@@Base+0xec>
   39474:	cmp	r6, #9
   39478:	bls	394e0 <flatcc_json_printer_int8_struct_field@@Base+0x258>
   3947c:	ldr	r2, [pc, #120]	; 394fc <flatcc_json_printer_int8_struct_field@@Base+0x274>
   39480:	sxth	r6, r6
   39484:	mov	r0, #0
   39488:	strb	r0, [r3, #2]
   3948c:	ldrb	r0, [r2, r6, lsl #1]
   39490:	add	r6, r2, r6, lsl #1
   39494:	mov	r2, #2
   39498:	strb	r0, [r3]
   3949c:	ldrb	r0, [r6, #1]
   394a0:	strb	r0, [r3, #1]
   394a4:	b	39434 <flatcc_json_printer_int8_struct_field@@Base+0x1ac>
   394a8:	add	r1, r3, #1
   394ac:	mov	r2, #10
   394b0:	str	r1, [r0, #20]
   394b4:	strb	r2, [r3]
   394b8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   394bc:	ldr	r3, [r4, #20]
   394c0:	b	392d4 <flatcc_json_printer_int8_struct_field@@Base+0x4c>
   394c4:	mov	r0, r4
   394c8:	ldr	r3, [r4, #44]	; 0x2c
   394cc:	mov	r1, #0
   394d0:	blx	r3
   394d4:	ldr	r5, [r4, #16]
   394d8:	ldr	r0, [r4, #20]
   394dc:	b	39308 <flatcc_json_printer_int8_struct_field@@Base+0x80>
   394e0:	add	r6, r6, #48	; 0x30
   394e4:	mov	r0, #0
   394e8:	mov	r2, #1
   394ec:	strb	r6, [r3]
   394f0:	strb	r0, [r3, #1]
   394f4:	b	39434 <flatcc_json_printer_int8_struct_field@@Base+0x1ac>
   394f8:	mvnpl	r8, pc, lsl r5
   394fc:	andeq	r7, r4, r0, asr r4

00039500 <flatcc_json_printer_int16_struct_field@@Base>:
   39500:	cmp	r1, #0
   39504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39508:	mov	r4, r0
   3950c:	ldrsh	r8, [r2, r3]
   39510:	ldrne	r3, [r0, #20]
   39514:	movne	r2, #44	; 0x2c
   39518:	addne	r1, r3, #1
   3951c:	strne	r1, [r0, #20]
   39520:	strbne	r2, [r3]
   39524:	ldrb	r1, [r0, #25]
   39528:	ldr	r9, [sp, #36]	; 0x24
   3952c:	ldr	r6, [sp, #32]
   39530:	cmp	r1, #0
   39534:	mov	r7, r9
   39538:	ldr	r3, [r0, #20]
   3953c:	bne	396a0 <flatcc_json_printer_int16_struct_field@@Base+0x1a0>
   39540:	ldr	r2, [r0, #16]
   39544:	cmp	r3, r2
   39548:	bcs	39674 <flatcc_json_printer_int16_struct_field@@Base+0x174>
   3954c:	mov	r2, #34	; 0x22
   39550:	strb	r2, [r3]
   39554:	ldrb	r3, [r4, #26]
   39558:	ldr	r0, [r4, #20]
   3955c:	ldr	r5, [r4, #16]
   39560:	cmp	r3, #0
   39564:	addeq	r0, r0, #1
   39568:	add	r3, r0, r9
   3956c:	cmp	r5, r3
   39570:	str	r0, [r4, #20]
   39574:	bhi	39684 <flatcc_json_printer_int16_struct_field@@Base+0x184>
   39578:	cmp	r0, r5
   3957c:	bcs	396bc <flatcc_json_printer_int16_struct_field@@Base+0x1bc>
   39580:	sub	r5, r5, r0
   39584:	cmp	r9, r5
   39588:	bls	395d4 <flatcc_json_printer_int16_struct_field@@Base+0xd4>
   3958c:	mov	r9, #0
   39590:	mov	r2, r5
   39594:	mov	r1, r6
   39598:	bl	1454c <memcpy@plt>
   3959c:	ldr	r3, [r4, #20]
   395a0:	mov	r0, r4
   395a4:	add	r3, r3, r5
   395a8:	str	r3, [r4, #20]
   395ac:	ldr	r2, [r4, #44]	; 0x2c
   395b0:	mov	r1, r9
   395b4:	blx	r2
   395b8:	ldr	r0, [r4, #20]
   395bc:	ldr	r3, [r4, #16]
   395c0:	sub	r7, r7, r5
   395c4:	add	r6, r6, r5
   395c8:	sub	r5, r3, r0
   395cc:	cmp	r7, r5
   395d0:	bhi	39590 <flatcc_json_printer_int16_struct_field@@Base+0x90>
   395d4:	mov	r1, r6
   395d8:	mov	r2, r7
   395dc:	bl	1454c <memcpy@plt>
   395e0:	ldr	r9, [r4, #20]
   395e4:	add	r9, r9, r7
   395e8:	str	r9, [r4, #20]
   395ec:	mov	r3, #34	; 0x22
   395f0:	strb	r3, [r9]
   395f4:	ldr	r1, [r4, #20]
   395f8:	ldrb	r3, [r4, #26]
   395fc:	clz	r3, r3
   39600:	lsr	r3, r3, #5
   39604:	add	r2, r1, r3
   39608:	mov	r0, #58	; 0x3a
   3960c:	add	r2, r2, #1
   39610:	str	r2, [r4, #20]
   39614:	strb	r0, [r1, r3]
   39618:	ldr	r3, [r4, #20]
   3961c:	mov	r2, #32
   39620:	lsr	r5, r8, #31
   39624:	strb	r2, [r3]
   39628:	ldrb	r3, [r4, #25]
   3962c:	ldr	r2, [r4, #20]
   39630:	adds	r3, r3, #0
   39634:	movne	r3, #1
   39638:	cmp	r8, #0
   3963c:	rsblt	r8, r8, #0
   39640:	add	r1, r2, r3
   39644:	sxthlt	r8, r8
   39648:	movlt	r0, #45	; 0x2d
   3964c:	str	r1, [r4, #20]
   39650:	strblt	r0, [r2, r3]
   39654:	addlt	r1, r1, #1
   39658:	uxth	r0, r8
   3965c:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   39660:	ldr	r3, [r4, #20]
   39664:	add	r0, r5, r0
   39668:	add	r3, r3, r0
   3966c:	str	r3, [r4, #20]
   39670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39674:	ldr	r3, [r0, #44]	; 0x2c
   39678:	blx	r3
   3967c:	ldr	r3, [r4, #20]
   39680:	b	3954c <flatcc_json_printer_int16_struct_field@@Base+0x4c>
   39684:	mov	r2, r9
   39688:	mov	r1, r6
   3968c:	bl	1454c <memcpy@plt>
   39690:	ldr	r7, [r4, #20]
   39694:	add	r9, r7, r9
   39698:	str	r9, [r4, #20]
   3969c:	b	395ec <flatcc_json_printer_int16_struct_field@@Base+0xec>
   396a0:	add	r1, r3, #1
   396a4:	mov	r2, #10
   396a8:	str	r1, [r0, #20]
   396ac:	strb	r2, [r3]
   396b0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   396b4:	ldr	r3, [r4, #20]
   396b8:	b	3954c <flatcc_json_printer_int16_struct_field@@Base+0x4c>
   396bc:	mov	r0, r4
   396c0:	ldr	r3, [r4, #44]	; 0x2c
   396c4:	mov	r1, #0
   396c8:	blx	r3
   396cc:	ldr	r5, [r4, #16]
   396d0:	ldr	r0, [r4, #20]
   396d4:	b	39580 <flatcc_json_printer_int16_struct_field@@Base+0x80>

000396d8 <flatcc_json_printer_int32_struct_field@@Base>:
   396d8:	cmp	r1, #0
   396dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   396e0:	mov	r4, r0
   396e4:	ldr	r8, [r2, r3]
   396e8:	ldrne	r3, [r0, #20]
   396ec:	movne	r2, #44	; 0x2c
   396f0:	addne	r1, r3, #1
   396f4:	strne	r1, [r0, #20]
   396f8:	strbne	r2, [r3]
   396fc:	ldrb	r1, [r0, #25]
   39700:	ldr	r9, [sp, #36]	; 0x24
   39704:	ldr	r6, [sp, #32]
   39708:	cmp	r1, #0
   3970c:	mov	r7, r9
   39710:	ldr	r3, [r0, #20]
   39714:	bne	39874 <flatcc_json_printer_int32_struct_field@@Base+0x19c>
   39718:	ldr	r2, [r0, #16]
   3971c:	cmp	r3, r2
   39720:	bcs	39848 <flatcc_json_printer_int32_struct_field@@Base+0x170>
   39724:	mov	r2, #34	; 0x22
   39728:	strb	r2, [r3]
   3972c:	ldrb	r3, [r4, #26]
   39730:	ldr	r0, [r4, #20]
   39734:	ldr	r5, [r4, #16]
   39738:	cmp	r3, #0
   3973c:	addeq	r0, r0, #1
   39740:	add	r3, r0, r9
   39744:	cmp	r5, r3
   39748:	str	r0, [r4, #20]
   3974c:	bhi	39858 <flatcc_json_printer_int32_struct_field@@Base+0x180>
   39750:	cmp	r0, r5
   39754:	bcs	39890 <flatcc_json_printer_int32_struct_field@@Base+0x1b8>
   39758:	sub	r5, r5, r0
   3975c:	cmp	r9, r5
   39760:	bls	397ac <flatcc_json_printer_int32_struct_field@@Base+0xd4>
   39764:	mov	r9, #0
   39768:	mov	r2, r5
   3976c:	mov	r1, r6
   39770:	bl	1454c <memcpy@plt>
   39774:	ldr	r3, [r4, #20]
   39778:	mov	r0, r4
   3977c:	add	r3, r3, r5
   39780:	str	r3, [r4, #20]
   39784:	ldr	r2, [r4, #44]	; 0x2c
   39788:	mov	r1, r9
   3978c:	blx	r2
   39790:	ldr	r0, [r4, #20]
   39794:	ldr	r3, [r4, #16]
   39798:	sub	r7, r7, r5
   3979c:	add	r6, r6, r5
   397a0:	sub	r5, r3, r0
   397a4:	cmp	r7, r5
   397a8:	bhi	39768 <flatcc_json_printer_int32_struct_field@@Base+0x90>
   397ac:	mov	r1, r6
   397b0:	mov	r2, r7
   397b4:	bl	1454c <memcpy@plt>
   397b8:	ldr	r9, [r4, #20]
   397bc:	add	r9, r9, r7
   397c0:	str	r9, [r4, #20]
   397c4:	mov	r3, #34	; 0x22
   397c8:	strb	r3, [r9]
   397cc:	ldr	r1, [r4, #20]
   397d0:	ldrb	r3, [r4, #26]
   397d4:	clz	r3, r3
   397d8:	lsr	r3, r3, #5
   397dc:	add	r2, r1, r3
   397e0:	mov	r0, #58	; 0x3a
   397e4:	add	r2, r2, #1
   397e8:	str	r2, [r4, #20]
   397ec:	strb	r0, [r1, r3]
   397f0:	ldr	r3, [r4, #20]
   397f4:	mov	r2, #32
   397f8:	lsr	r5, r8, #31
   397fc:	strb	r2, [r3]
   39800:	ldrb	r3, [r4, #25]
   39804:	ldr	r2, [r4, #20]
   39808:	adds	r3, r3, #0
   3980c:	movne	r3, #1
   39810:	cmp	r8, #0
   39814:	add	r1, r2, r3
   39818:	movlt	r0, #45	; 0x2d
   3981c:	rsblt	r8, r8, #0
   39820:	str	r1, [r4, #20]
   39824:	strblt	r0, [r2, r3]
   39828:	addlt	r1, r1, #1
   3982c:	mov	r0, r8
   39830:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   39834:	ldr	r3, [r4, #20]
   39838:	add	r0, r5, r0
   3983c:	add	r3, r3, r0
   39840:	str	r3, [r4, #20]
   39844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39848:	ldr	r3, [r0, #44]	; 0x2c
   3984c:	blx	r3
   39850:	ldr	r3, [r4, #20]
   39854:	b	39724 <flatcc_json_printer_int32_struct_field@@Base+0x4c>
   39858:	mov	r2, r9
   3985c:	mov	r1, r6
   39860:	bl	1454c <memcpy@plt>
   39864:	ldr	r7, [r4, #20]
   39868:	add	r9, r7, r9
   3986c:	str	r9, [r4, #20]
   39870:	b	397c4 <flatcc_json_printer_int32_struct_field@@Base+0xec>
   39874:	add	r1, r3, #1
   39878:	mov	r2, #10
   3987c:	str	r1, [r0, #20]
   39880:	strb	r2, [r3]
   39884:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   39888:	ldr	r3, [r4, #20]
   3988c:	b	39724 <flatcc_json_printer_int32_struct_field@@Base+0x4c>
   39890:	mov	r0, r4
   39894:	ldr	r3, [r4, #44]	; 0x2c
   39898:	mov	r1, #0
   3989c:	blx	r3
   398a0:	ldr	r5, [r4, #16]
   398a4:	ldr	r0, [r4, #20]
   398a8:	b	39758 <flatcc_json_printer_int32_struct_field@@Base+0x80>

000398ac <flatcc_json_printer_int64_struct_field@@Base>:
   398ac:	cmp	r1, #0
   398b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   398b4:	mov	r4, r0
   398b8:	ldrd	r6, [r2, r3]
   398bc:	ldrne	r3, [r0, #20]
   398c0:	movne	r2, #44	; 0x2c
   398c4:	addne	r1, r3, #1
   398c8:	strne	r1, [r0, #20]
   398cc:	strbne	r2, [r3]
   398d0:	ldrb	r1, [r0, #25]
   398d4:	ldr	sl, [sp, #36]	; 0x24
   398d8:	ldr	r8, [sp, #32]
   398dc:	cmp	r1, #0
   398e0:	mov	r9, sl
   398e4:	ldr	r3, [r0, #20]
   398e8:	bne	39a58 <flatcc_json_printer_int64_struct_field@@Base+0x1ac>
   398ec:	ldr	r2, [r0, #16]
   398f0:	cmp	r3, r2
   398f4:	bcs	39a2c <flatcc_json_printer_int64_struct_field@@Base+0x180>
   398f8:	mov	r2, #34	; 0x22
   398fc:	strb	r2, [r3]
   39900:	ldrb	r3, [r4, #26]
   39904:	ldr	r0, [r4, #20]
   39908:	ldr	r5, [r4, #16]
   3990c:	cmp	r3, #0
   39910:	addeq	r0, r0, #1
   39914:	add	r3, r0, sl
   39918:	cmp	r5, r3
   3991c:	str	r0, [r4, #20]
   39920:	bhi	39a3c <flatcc_json_printer_int64_struct_field@@Base+0x190>
   39924:	cmp	r0, r5
   39928:	bcs	39a74 <flatcc_json_printer_int64_struct_field@@Base+0x1c8>
   3992c:	sub	r5, r5, r0
   39930:	cmp	sl, r5
   39934:	bls	39980 <flatcc_json_printer_int64_struct_field@@Base+0xd4>
   39938:	mov	sl, #0
   3993c:	mov	r2, r5
   39940:	mov	r1, r8
   39944:	bl	1454c <memcpy@plt>
   39948:	ldr	r3, [r4, #20]
   3994c:	mov	r0, r4
   39950:	add	r3, r3, r5
   39954:	str	r3, [r4, #20]
   39958:	ldr	r2, [r4, #44]	; 0x2c
   3995c:	mov	r1, sl
   39960:	blx	r2
   39964:	ldr	r0, [r4, #20]
   39968:	ldr	r3, [r4, #16]
   3996c:	sub	r9, r9, r5
   39970:	add	r8, r8, r5
   39974:	sub	r5, r3, r0
   39978:	cmp	r9, r5
   3997c:	bhi	3993c <flatcc_json_printer_int64_struct_field@@Base+0x90>
   39980:	mov	r1, r8
   39984:	mov	r2, r9
   39988:	bl	1454c <memcpy@plt>
   3998c:	ldr	sl, [r4, #20]
   39990:	add	sl, sl, r9
   39994:	str	sl, [r4, #20]
   39998:	mov	r3, #34	; 0x22
   3999c:	strb	r3, [sl]
   399a0:	ldr	r1, [r4, #20]
   399a4:	ldrb	r3, [r4, #26]
   399a8:	clz	r3, r3
   399ac:	lsr	r3, r3, #5
   399b0:	add	r2, r1, r3
   399b4:	add	r2, r2, #1
   399b8:	mov	r0, #58	; 0x3a
   399bc:	str	r2, [r4, #20]
   399c0:	strb	r0, [r1, r3]
   399c4:	ldr	r3, [r4, #20]
   399c8:	mov	r2, #32
   399cc:	lsr	r5, r7, #31
   399d0:	strb	r2, [r3]
   399d4:	ldrb	r3, [r4, #25]
   399d8:	ldr	r1, [r4, #20]
   399dc:	adds	r3, r3, #0
   399e0:	movne	r3, #1
   399e4:	cmp	r6, #0
   399e8:	add	r2, r1, r3
   399ec:	sbcs	r0, r7, #0
   399f0:	str	r2, [r4, #20]
   399f4:	bge	39a0c <flatcc_json_printer_int64_struct_field@@Base+0x160>
   399f8:	rsbs	r6, r6, #0
   399fc:	rsc	r7, r7, #0
   39a00:	add	r2, r2, #1
   39a04:	mov	r0, #45	; 0x2d
   39a08:	strb	r0, [r1, r3]
   39a0c:	mov	r0, r6
   39a10:	mov	r1, r7
   39a14:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   39a18:	ldr	r3, [r4, #20]
   39a1c:	add	r0, r5, r0
   39a20:	add	r3, r3, r0
   39a24:	str	r3, [r4, #20]
   39a28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39a2c:	ldr	r3, [r0, #44]	; 0x2c
   39a30:	blx	r3
   39a34:	ldr	r3, [r4, #20]
   39a38:	b	398f8 <flatcc_json_printer_int64_struct_field@@Base+0x4c>
   39a3c:	mov	r2, sl
   39a40:	mov	r1, r8
   39a44:	bl	1454c <memcpy@plt>
   39a48:	ldr	r9, [r4, #20]
   39a4c:	add	sl, r9, sl
   39a50:	str	sl, [r4, #20]
   39a54:	b	39998 <flatcc_json_printer_int64_struct_field@@Base+0xec>
   39a58:	add	r1, r3, #1
   39a5c:	mov	r2, #10
   39a60:	str	r1, [r0, #20]
   39a64:	strb	r2, [r3]
   39a68:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   39a6c:	ldr	r3, [r4, #20]
   39a70:	b	398f8 <flatcc_json_printer_int64_struct_field@@Base+0x4c>
   39a74:	mov	r0, r4
   39a78:	ldr	r3, [r4, #44]	; 0x2c
   39a7c:	mov	r1, #0
   39a80:	blx	r3
   39a84:	ldr	r5, [r4, #16]
   39a88:	ldr	r0, [r4, #20]
   39a8c:	b	3992c <flatcc_json_printer_int64_struct_field@@Base+0x80>

00039a90 <flatcc_json_printer_bool_struct_field@@Base>:
   39a90:	cmp	r1, #0
   39a94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39a98:	mov	r4, r0
   39a9c:	ldrb	r8, [r2, r3]
   39aa0:	ldrne	r3, [r0, #20]
   39aa4:	movne	r2, #44	; 0x2c
   39aa8:	addne	r1, r3, #1
   39aac:	strne	r1, [r0, #20]
   39ab0:	strbne	r2, [r3]
   39ab4:	ldrb	r1, [r0, #25]
   39ab8:	ldr	r9, [sp, #36]	; 0x24
   39abc:	ldr	r6, [sp, #32]
   39ac0:	cmp	r1, #0
   39ac4:	mov	r7, r9
   39ac8:	ldr	r3, [r0, #20]
   39acc:	bne	39c44 <flatcc_json_printer_bool_struct_field@@Base+0x1b4>
   39ad0:	ldr	r2, [r0, #16]
   39ad4:	cmp	r3, r2
   39ad8:	bcs	39c00 <flatcc_json_printer_bool_struct_field@@Base+0x170>
   39adc:	mov	r2, #34	; 0x22
   39ae0:	strb	r2, [r3]
   39ae4:	ldrb	r3, [r4, #26]
   39ae8:	ldr	r0, [r4, #20]
   39aec:	ldr	r5, [r4, #16]
   39af0:	cmp	r3, #0
   39af4:	addeq	r0, r0, #1
   39af8:	add	r3, r0, r9
   39afc:	cmp	r5, r3
   39b00:	str	r0, [r4, #20]
   39b04:	bhi	39c10 <flatcc_json_printer_bool_struct_field@@Base+0x180>
   39b08:	cmp	r0, r5
   39b0c:	bcs	39c60 <flatcc_json_printer_bool_struct_field@@Base+0x1d0>
   39b10:	sub	r5, r5, r0
   39b14:	cmp	r9, r5
   39b18:	bls	39b64 <flatcc_json_printer_bool_struct_field@@Base+0xd4>
   39b1c:	mov	r9, #0
   39b20:	mov	r2, r5
   39b24:	mov	r1, r6
   39b28:	bl	1454c <memcpy@plt>
   39b2c:	ldr	r3, [r4, #20]
   39b30:	mov	r0, r4
   39b34:	add	r3, r3, r5
   39b38:	str	r3, [r4, #20]
   39b3c:	ldr	r2, [r4, #44]	; 0x2c
   39b40:	mov	r1, r9
   39b44:	blx	r2
   39b48:	ldr	r0, [r4, #20]
   39b4c:	ldr	r3, [r4, #16]
   39b50:	sub	r7, r7, r5
   39b54:	add	r6, r6, r5
   39b58:	sub	r5, r3, r0
   39b5c:	cmp	r7, r5
   39b60:	bhi	39b20 <flatcc_json_printer_bool_struct_field@@Base+0x90>
   39b64:	mov	r1, r6
   39b68:	mov	r2, r7
   39b6c:	bl	1454c <memcpy@plt>
   39b70:	ldr	r9, [r4, #20]
   39b74:	add	r9, r9, r7
   39b78:	str	r9, [r4, #20]
   39b7c:	mov	r3, #34	; 0x22
   39b80:	strb	r3, [r9]
   39b84:	ldr	r1, [r4, #20]
   39b88:	ldrb	r3, [r4, #26]
   39b8c:	clz	r3, r3
   39b90:	lsr	r3, r3, #5
   39b94:	add	r2, r1, r3
   39b98:	add	r2, r2, #1
   39b9c:	mov	r0, #58	; 0x3a
   39ba0:	str	r2, [r4, #20]
   39ba4:	strb	r0, [r1, r3]
   39ba8:	ldr	r3, [r4, #20]
   39bac:	mov	r2, #32
   39bb0:	ldr	r0, [pc, #196]	; 39c7c <flatcc_json_printer_bool_struct_field@@Base+0x1ec>
   39bb4:	strb	r2, [r3]
   39bb8:	ldrb	r3, [r4, #25]
   39bbc:	ldr	r1, [r4, #20]
   39bc0:	adds	r3, r3, #0
   39bc4:	movne	r3, #1
   39bc8:	add	r2, r1, r3
   39bcc:	cmp	r8, #0
   39bd0:	str	r2, [r4, #20]
   39bd4:	bne	39c2c <flatcc_json_printer_bool_struct_field@@Base+0x19c>
   39bd8:	add	lr, r0, #1792	; 0x700
   39bdc:	mov	ip, #5
   39be0:	ldrh	lr, [lr, #4]
   39be4:	ldr	r0, [r0, #1792]	; 0x700
   39be8:	str	r0, [r1, r3]
   39bec:	strh	lr, [r2, #4]
   39bf0:	ldr	r3, [r4, #20]
   39bf4:	add	r3, r3, ip
   39bf8:	str	r3, [r4, #20]
   39bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39c00:	ldr	r3, [r0, #44]	; 0x2c
   39c04:	blx	r3
   39c08:	ldr	r3, [r4, #20]
   39c0c:	b	39adc <flatcc_json_printer_bool_struct_field@@Base+0x4c>
   39c10:	mov	r2, r9
   39c14:	mov	r1, r6
   39c18:	bl	1454c <memcpy@plt>
   39c1c:	ldr	r7, [r4, #20]
   39c20:	add	r9, r7, r9
   39c24:	str	r9, [r4, #20]
   39c28:	b	39b7c <flatcc_json_printer_bool_struct_field@@Base+0xec>
   39c2c:	ldrb	lr, [r0, #1788]	; 0x6fc
   39c30:	ldr	r0, [r0, #1784]	; 0x6f8
   39c34:	mov	ip, #4
   39c38:	str	r0, [r1, r3]
   39c3c:	strb	lr, [r2, #4]
   39c40:	b	39bf0 <flatcc_json_printer_bool_struct_field@@Base+0x160>
   39c44:	add	r1, r3, #1
   39c48:	mov	r2, #10
   39c4c:	str	r1, [r0, #20]
   39c50:	strb	r2, [r3]
   39c54:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   39c58:	ldr	r3, [r4, #20]
   39c5c:	b	39adc <flatcc_json_printer_bool_struct_field@@Base+0x4c>
   39c60:	mov	r0, r4
   39c64:	ldr	r3, [r4, #44]	; 0x2c
   39c68:	mov	r1, #0
   39c6c:	blx	r3
   39c70:	ldr	r5, [r4, #16]
   39c74:	ldr	r0, [r4, #20]
   39c78:	b	39b10 <flatcc_json_printer_bool_struct_field@@Base+0x80>
   39c7c:	andeq	r7, r4, r0, asr r4

00039c80 <flatcc_json_printer_float_struct_field@@Base>:
   39c80:	cmp	r1, #0
   39c84:	add	r3, r2, r3
   39c88:	push	{r4, r5, r6, r7, r8, lr}
   39c8c:	vpush	{d8}
   39c90:	vldr	s16, [r3]
   39c94:	ldrne	r3, [r0, #20]
   39c98:	movne	r2, #44	; 0x2c
   39c9c:	addne	r1, r3, #1
   39ca0:	strne	r1, [r0, #20]
   39ca4:	strbne	r2, [r3]
   39ca8:	ldrb	r1, [r0, #25]
   39cac:	ldr	r8, [sp, #36]	; 0x24
   39cb0:	mov	r4, r0
   39cb4:	cmp	r1, #0
   39cb8:	ldr	r6, [sp, #32]
   39cbc:	mov	r7, r8
   39cc0:	ldr	r3, [r0, #20]
   39cc4:	bne	39e08 <flatcc_json_printer_float_struct_field@@Base+0x188>
   39cc8:	ldr	r2, [r0, #16]
   39ccc:	cmp	r3, r2
   39cd0:	bcs	39ddc <flatcc_json_printer_float_struct_field@@Base+0x15c>
   39cd4:	mov	r2, #34	; 0x22
   39cd8:	strb	r2, [r3]
   39cdc:	ldrb	r3, [r4, #26]
   39ce0:	ldr	r0, [r4, #20]
   39ce4:	ldr	r5, [r4, #16]
   39ce8:	cmp	r3, #0
   39cec:	addeq	r0, r0, #1
   39cf0:	add	r3, r0, r8
   39cf4:	cmp	r5, r3
   39cf8:	str	r0, [r4, #20]
   39cfc:	bhi	39dec <flatcc_json_printer_float_struct_field@@Base+0x16c>
   39d00:	cmp	r0, r5
   39d04:	bcs	39e24 <flatcc_json_printer_float_struct_field@@Base+0x1a4>
   39d08:	sub	r5, r5, r0
   39d0c:	cmp	r8, r5
   39d10:	bls	39d5c <flatcc_json_printer_float_struct_field@@Base+0xdc>
   39d14:	mov	r8, #0
   39d18:	mov	r2, r5
   39d1c:	mov	r1, r6
   39d20:	bl	1454c <memcpy@plt>
   39d24:	ldr	r3, [r4, #20]
   39d28:	mov	r0, r4
   39d2c:	add	r3, r3, r5
   39d30:	str	r3, [r4, #20]
   39d34:	ldr	r2, [r4, #44]	; 0x2c
   39d38:	mov	r1, r8
   39d3c:	blx	r2
   39d40:	ldr	r0, [r4, #20]
   39d44:	ldr	r3, [r4, #16]
   39d48:	sub	r7, r7, r5
   39d4c:	add	r6, r6, r5
   39d50:	sub	r5, r3, r0
   39d54:	cmp	r7, r5
   39d58:	bhi	39d18 <flatcc_json_printer_float_struct_field@@Base+0x98>
   39d5c:	mov	r1, r6
   39d60:	mov	r2, r7
   39d64:	bl	1454c <memcpy@plt>
   39d68:	ldr	r8, [r4, #20]
   39d6c:	add	r8, r8, r7
   39d70:	str	r8, [r4, #20]
   39d74:	mov	r3, #34	; 0x22
   39d78:	strb	r3, [r8]
   39d7c:	ldr	r1, [r4, #20]
   39d80:	ldrb	r3, [r4, #26]
   39d84:	clz	r3, r3
   39d88:	lsr	r3, r3, #5
   39d8c:	add	r2, r1, r3
   39d90:	add	r2, r2, #1
   39d94:	mov	r0, #58	; 0x3a
   39d98:	str	r2, [r4, #20]
   39d9c:	strb	r0, [r1, r3]
   39da0:	ldr	r3, [r4, #20]
   39da4:	mov	r2, #32
   39da8:	vcvt.f64.f32	d0, s16
   39dac:	strb	r2, [r3]
   39db0:	ldrb	r3, [r4, #25]
   39db4:	ldr	r0, [r4, #20]
   39db8:	cmp	r3, #0
   39dbc:	addne	r0, r0, #1
   39dc0:	str	r0, [r4, #20]
   39dc4:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   39dc8:	vpop	{d8}
   39dcc:	ldr	r3, [r4, #20]
   39dd0:	add	r0, r3, r0
   39dd4:	str	r0, [r4, #20]
   39dd8:	pop	{r4, r5, r6, r7, r8, pc}
   39ddc:	ldr	r3, [r0, #44]	; 0x2c
   39de0:	blx	r3
   39de4:	ldr	r3, [r4, #20]
   39de8:	b	39cd4 <flatcc_json_printer_float_struct_field@@Base+0x54>
   39dec:	mov	r2, r8
   39df0:	mov	r1, r6
   39df4:	bl	1454c <memcpy@plt>
   39df8:	ldr	r7, [r4, #20]
   39dfc:	add	r8, r7, r8
   39e00:	str	r8, [r4, #20]
   39e04:	b	39d74 <flatcc_json_printer_float_struct_field@@Base+0xf4>
   39e08:	add	r1, r3, #1
   39e0c:	mov	r2, #10
   39e10:	str	r1, [r0, #20]
   39e14:	strb	r2, [r3]
   39e18:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   39e1c:	ldr	r3, [r4, #20]
   39e20:	b	39cd4 <flatcc_json_printer_float_struct_field@@Base+0x54>
   39e24:	mov	r0, r4
   39e28:	ldr	r3, [r4, #44]	; 0x2c
   39e2c:	mov	r1, #0
   39e30:	blx	r3
   39e34:	ldr	r5, [r4, #16]
   39e38:	ldr	r0, [r4, #20]
   39e3c:	b	39d08 <flatcc_json_printer_float_struct_field@@Base+0x88>

00039e40 <flatcc_json_printer_double_struct_field@@Base>:
   39e40:	cmp	r1, #0
   39e44:	add	r3, r2, r3
   39e48:	push	{r4, r5, r6, r7, r8, lr}
   39e4c:	vpush	{d8}
   39e50:	vldr	d8, [r3]
   39e54:	ldrne	r3, [r0, #20]
   39e58:	movne	r2, #44	; 0x2c
   39e5c:	addne	r1, r3, #1
   39e60:	strne	r1, [r0, #20]
   39e64:	strbne	r2, [r3]
   39e68:	ldrb	r1, [r0, #25]
   39e6c:	ldr	r8, [sp, #36]	; 0x24
   39e70:	mov	r4, r0
   39e74:	cmp	r1, #0
   39e78:	ldr	r6, [sp, #32]
   39e7c:	mov	r7, r8
   39e80:	ldr	r3, [r0, #20]
   39e84:	bne	39fc8 <flatcc_json_printer_double_struct_field@@Base+0x188>
   39e88:	ldr	r2, [r0, #16]
   39e8c:	cmp	r3, r2
   39e90:	bcs	39f9c <flatcc_json_printer_double_struct_field@@Base+0x15c>
   39e94:	mov	r2, #34	; 0x22
   39e98:	strb	r2, [r3]
   39e9c:	ldrb	r3, [r4, #26]
   39ea0:	ldr	r0, [r4, #20]
   39ea4:	ldr	r5, [r4, #16]
   39ea8:	cmp	r3, #0
   39eac:	addeq	r0, r0, #1
   39eb0:	add	r3, r0, r8
   39eb4:	cmp	r5, r3
   39eb8:	str	r0, [r4, #20]
   39ebc:	bhi	39fac <flatcc_json_printer_double_struct_field@@Base+0x16c>
   39ec0:	cmp	r0, r5
   39ec4:	bcs	39fe4 <flatcc_json_printer_double_struct_field@@Base+0x1a4>
   39ec8:	sub	r5, r5, r0
   39ecc:	cmp	r8, r5
   39ed0:	bls	39f1c <flatcc_json_printer_double_struct_field@@Base+0xdc>
   39ed4:	mov	r8, #0
   39ed8:	mov	r2, r5
   39edc:	mov	r1, r6
   39ee0:	bl	1454c <memcpy@plt>
   39ee4:	ldr	r3, [r4, #20]
   39ee8:	mov	r0, r4
   39eec:	add	r3, r3, r5
   39ef0:	str	r3, [r4, #20]
   39ef4:	ldr	r2, [r4, #44]	; 0x2c
   39ef8:	mov	r1, r8
   39efc:	blx	r2
   39f00:	ldr	r0, [r4, #20]
   39f04:	ldr	r3, [r4, #16]
   39f08:	sub	r7, r7, r5
   39f0c:	add	r6, r6, r5
   39f10:	sub	r5, r3, r0
   39f14:	cmp	r7, r5
   39f18:	bhi	39ed8 <flatcc_json_printer_double_struct_field@@Base+0x98>
   39f1c:	mov	r1, r6
   39f20:	mov	r2, r7
   39f24:	bl	1454c <memcpy@plt>
   39f28:	ldr	r8, [r4, #20]
   39f2c:	add	r8, r8, r7
   39f30:	str	r8, [r4, #20]
   39f34:	mov	r3, #34	; 0x22
   39f38:	strb	r3, [r8]
   39f3c:	ldr	r1, [r4, #20]
   39f40:	ldrb	r3, [r4, #26]
   39f44:	clz	r3, r3
   39f48:	lsr	r3, r3, #5
   39f4c:	add	r2, r1, r3
   39f50:	add	r2, r2, #1
   39f54:	mov	r0, #58	; 0x3a
   39f58:	str	r2, [r4, #20]
   39f5c:	strb	r0, [r1, r3]
   39f60:	ldr	r3, [r4, #20]
   39f64:	mov	r2, #32
   39f68:	vmov.f64	d0, d8
   39f6c:	strb	r2, [r3]
   39f70:	ldrb	r3, [r4, #25]
   39f74:	ldr	r0, [r4, #20]
   39f78:	cmp	r3, #0
   39f7c:	addne	r0, r0, #1
   39f80:	str	r0, [r4, #20]
   39f84:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   39f88:	vpop	{d8}
   39f8c:	ldr	r3, [r4, #20]
   39f90:	add	r0, r3, r0
   39f94:	str	r0, [r4, #20]
   39f98:	pop	{r4, r5, r6, r7, r8, pc}
   39f9c:	ldr	r3, [r0, #44]	; 0x2c
   39fa0:	blx	r3
   39fa4:	ldr	r3, [r4, #20]
   39fa8:	b	39e94 <flatcc_json_printer_double_struct_field@@Base+0x54>
   39fac:	mov	r2, r8
   39fb0:	mov	r1, r6
   39fb4:	bl	1454c <memcpy@plt>
   39fb8:	ldr	r7, [r4, #20]
   39fbc:	add	r8, r7, r8
   39fc0:	str	r8, [r4, #20]
   39fc4:	b	39f34 <flatcc_json_printer_double_struct_field@@Base+0xf4>
   39fc8:	add	r1, r3, #1
   39fcc:	mov	r2, #10
   39fd0:	str	r1, [r0, #20]
   39fd4:	strb	r2, [r3]
   39fd8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   39fdc:	ldr	r3, [r4, #20]
   39fe0:	b	39e94 <flatcc_json_printer_double_struct_field@@Base+0x54>
   39fe4:	mov	r0, r4
   39fe8:	ldr	r3, [r4, #44]	; 0x2c
   39fec:	mov	r1, #0
   39ff0:	blx	r3
   39ff4:	ldr	r5, [r4, #16]
   39ff8:	ldr	r0, [r4, #20]
   39ffc:	b	39ec8 <flatcc_json_printer_double_struct_field@@Base+0x88>

0003a000 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   3a000:	cmp	r1, #0
   3a004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a008:	mov	r4, r0
   3a00c:	ldrb	r8, [r2, r3]
   3a010:	ldrne	r3, [r0, #20]
   3a014:	movne	r2, #44	; 0x2c
   3a018:	addne	r1, r3, #1
   3a01c:	strne	r1, [r0, #20]
   3a020:	strbne	r2, [r3]
   3a024:	ldrb	r1, [r0, #25]
   3a028:	ldr	sl, [sp, #36]	; 0x24
   3a02c:	ldr	r6, [sp, #32]
   3a030:	cmp	r1, #0
   3a034:	ldr	r9, [sp, #40]	; 0x28
   3a038:	mov	r7, sl
   3a03c:	ldr	r3, [r0, #20]
   3a040:	bne	3a1ec <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1ec>
   3a044:	ldr	r2, [r0, #16]
   3a048:	cmp	r3, r2
   3a04c:	bcs	3a160 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x160>
   3a050:	mov	r2, #34	; 0x22
   3a054:	strb	r2, [r3]
   3a058:	ldrb	r3, [r4, #26]
   3a05c:	ldr	r0, [r4, #20]
   3a060:	ldr	r5, [r4, #16]
   3a064:	cmp	r3, #0
   3a068:	addeq	r0, r0, #1
   3a06c:	add	r3, r0, sl
   3a070:	cmp	r5, r3
   3a074:	str	r0, [r4, #20]
   3a078:	bhi	3a170 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x170>
   3a07c:	cmp	r0, r5
   3a080:	bcs	3a208 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x208>
   3a084:	sub	r5, r5, r0
   3a088:	cmp	sl, r5
   3a08c:	bls	3a0d8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xd8>
   3a090:	mov	sl, #0
   3a094:	mov	r2, r5
   3a098:	mov	r1, r6
   3a09c:	bl	1454c <memcpy@plt>
   3a0a0:	ldr	r3, [r4, #20]
   3a0a4:	mov	r0, r4
   3a0a8:	add	r3, r3, r5
   3a0ac:	str	r3, [r4, #20]
   3a0b0:	ldr	r2, [r4, #44]	; 0x2c
   3a0b4:	mov	r1, sl
   3a0b8:	blx	r2
   3a0bc:	ldr	r0, [r4, #20]
   3a0c0:	ldr	r3, [r4, #16]
   3a0c4:	sub	r7, r7, r5
   3a0c8:	add	r6, r6, r5
   3a0cc:	sub	r5, r3, r0
   3a0d0:	cmp	r7, r5
   3a0d4:	bhi	3a094 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x94>
   3a0d8:	mov	r1, r6
   3a0dc:	mov	r2, r7
   3a0e0:	bl	1454c <memcpy@plt>
   3a0e4:	ldr	sl, [r4, #20]
   3a0e8:	add	sl, sl, r7
   3a0ec:	str	sl, [r4, #20]
   3a0f0:	mov	r3, #34	; 0x22
   3a0f4:	strb	r3, [sl]
   3a0f8:	ldr	r1, [r4, #20]
   3a0fc:	ldrb	r3, [r4, #26]
   3a100:	clz	r3, r3
   3a104:	lsr	r3, r3, #5
   3a108:	add	r2, r1, r3
   3a10c:	add	r2, r2, #1
   3a110:	mov	r0, #58	; 0x3a
   3a114:	str	r2, [r4, #20]
   3a118:	strb	r0, [r1, r3]
   3a11c:	ldr	r3, [r4, #20]
   3a120:	mov	r2, #32
   3a124:	strb	r2, [r3]
   3a128:	ldrb	r3, [r4, #25]
   3a12c:	ldrb	r0, [r4, #27]
   3a130:	ldr	r1, [r4, #20]
   3a134:	adds	r3, r3, #0
   3a138:	movne	r3, #1
   3a13c:	add	r2, r1, r3
   3a140:	cmp	r0, #0
   3a144:	str	r2, [r4, #20]
   3a148:	bne	3a18c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x18c>
   3a14c:	mov	r1, r8
   3a150:	mov	r0, r4
   3a154:	mov	r3, r9
   3a158:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a15c:	bx	r3
   3a160:	ldr	r3, [r0, #44]	; 0x2c
   3a164:	blx	r3
   3a168:	ldr	r3, [r4, #20]
   3a16c:	b	3a050 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x50>
   3a170:	mov	r2, sl
   3a174:	mov	r1, r6
   3a178:	bl	1454c <memcpy@plt>
   3a17c:	ldr	r7, [r4, #20]
   3a180:	add	sl, r7, sl
   3a184:	str	sl, [r4, #20]
   3a188:	b	3a0f0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf0>
   3a18c:	cmp	r8, #99	; 0x63
   3a190:	bls	3a224 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x224>
   3a194:	ldr	r0, [pc, #212]	; 3a270 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x270>
   3a198:	mov	ip, #100	; 0x64
   3a19c:	ldr	lr, [pc, #208]	; 3a274 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x274>
   3a1a0:	umull	r5, r0, r0, r8
   3a1a4:	mov	r5, #0
   3a1a8:	lsr	r0, r0, #5
   3a1ac:	strb	r5, [r2, #3]
   3a1b0:	mul	ip, ip, r0
   3a1b4:	add	r0, r0, #48	; 0x30
   3a1b8:	sub	r8, r8, ip
   3a1bc:	mov	ip, #3
   3a1c0:	uxtb	r8, r8
   3a1c4:	ldrb	r5, [lr, r8, lsl #1]
   3a1c8:	add	r8, lr, r8, lsl #1
   3a1cc:	strb	r5, [r2, #1]
   3a1d0:	ldrb	lr, [r8, #1]
   3a1d4:	strb	lr, [r2, #2]
   3a1d8:	strb	r0, [r1, r3]
   3a1dc:	ldr	r3, [r4, #20]
   3a1e0:	add	r3, r3, ip
   3a1e4:	str	r3, [r4, #20]
   3a1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a1ec:	add	r1, r3, #1
   3a1f0:	mov	r2, #10
   3a1f4:	str	r1, [r0, #20]
   3a1f8:	strb	r2, [r3]
   3a1fc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3a200:	ldr	r3, [r4, #20]
   3a204:	b	3a050 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x50>
   3a208:	mov	r0, r4
   3a20c:	ldr	r3, [r4, #44]	; 0x2c
   3a210:	mov	r1, #0
   3a214:	blx	r3
   3a218:	ldr	r5, [r4, #16]
   3a21c:	ldr	r0, [r4, #20]
   3a220:	b	3a084 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x84>
   3a224:	cmp	r8, #9
   3a228:	bls	3a258 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x258>
   3a22c:	ldr	r0, [pc, #64]	; 3a274 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x274>
   3a230:	sxth	r8, r8
   3a234:	mov	ip, #0
   3a238:	strb	ip, [r2, #2]
   3a23c:	ldrb	lr, [r0, r8, lsl #1]
   3a240:	add	r0, r0, r8, lsl #1
   3a244:	mov	ip, #2
   3a248:	strb	lr, [r1, r3]
   3a24c:	ldrb	r3, [r0, #1]
   3a250:	strb	r3, [r2, #1]
   3a254:	b	3a1dc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1dc>
   3a258:	add	r8, r8, #48	; 0x30
   3a25c:	mov	r0, #0
   3a260:	strb	r0, [r2, #1]
   3a264:	mov	ip, #1
   3a268:	strb	r8, [r1, r3]
   3a26c:	b	3a1dc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1dc>
   3a270:	mvnpl	r8, pc, lsl r5
   3a274:	andeq	r7, r4, r0, asr r4

0003a278 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   3a278:	cmp	r1, #0
   3a27c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a280:	mov	r4, r0
   3a284:	ldrh	r8, [r2, r3]
   3a288:	ldrne	r3, [r0, #20]
   3a28c:	movne	r2, #44	; 0x2c
   3a290:	addne	r1, r3, #1
   3a294:	strne	r1, [r0, #20]
   3a298:	strbne	r2, [r3]
   3a29c:	ldrb	r1, [r0, #25]
   3a2a0:	ldr	sl, [sp, #36]	; 0x24
   3a2a4:	ldr	r6, [sp, #32]
   3a2a8:	cmp	r1, #0
   3a2ac:	ldr	r9, [sp, #40]	; 0x28
   3a2b0:	mov	r7, sl
   3a2b4:	ldr	r3, [r0, #20]
   3a2b8:	bne	3a418 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1a0>
   3a2bc:	ldr	r2, [r0, #16]
   3a2c0:	cmp	r3, r2
   3a2c4:	bcs	3a3d4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x15c>
   3a2c8:	mov	r2, #34	; 0x22
   3a2cc:	strb	r2, [r3]
   3a2d0:	ldrb	r3, [r4, #26]
   3a2d4:	ldr	r0, [r4, #20]
   3a2d8:	ldr	r5, [r4, #16]
   3a2dc:	cmp	r3, #0
   3a2e0:	addeq	r0, r0, #1
   3a2e4:	add	r3, r0, sl
   3a2e8:	cmp	r5, r3
   3a2ec:	str	r0, [r4, #20]
   3a2f0:	bhi	3a3e4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x16c>
   3a2f4:	cmp	r0, r5
   3a2f8:	bcs	3a434 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1bc>
   3a2fc:	sub	r5, r5, r0
   3a300:	cmp	sl, r5
   3a304:	bls	3a350 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xd8>
   3a308:	mov	sl, #0
   3a30c:	mov	r2, r5
   3a310:	mov	r1, r6
   3a314:	bl	1454c <memcpy@plt>
   3a318:	ldr	r3, [r4, #20]
   3a31c:	mov	r0, r4
   3a320:	add	r3, r3, r5
   3a324:	str	r3, [r4, #20]
   3a328:	ldr	r2, [r4, #44]	; 0x2c
   3a32c:	mov	r1, sl
   3a330:	blx	r2
   3a334:	ldr	r0, [r4, #20]
   3a338:	ldr	r3, [r4, #16]
   3a33c:	sub	r7, r7, r5
   3a340:	add	r6, r6, r5
   3a344:	sub	r5, r3, r0
   3a348:	cmp	r7, r5
   3a34c:	bhi	3a30c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x94>
   3a350:	mov	r1, r6
   3a354:	mov	r2, r7
   3a358:	bl	1454c <memcpy@plt>
   3a35c:	ldr	sl, [r4, #20]
   3a360:	add	sl, sl, r7
   3a364:	str	sl, [r4, #20]
   3a368:	mov	r3, #34	; 0x22
   3a36c:	strb	r3, [sl]
   3a370:	ldr	r1, [r4, #20]
   3a374:	ldrb	r3, [r4, #26]
   3a378:	clz	r3, r3
   3a37c:	lsr	r3, r3, #5
   3a380:	add	r2, r1, r3
   3a384:	add	r2, r2, #1
   3a388:	mov	r0, #58	; 0x3a
   3a38c:	str	r2, [r4, #20]
   3a390:	strb	r0, [r1, r3]
   3a394:	ldr	r3, [r4, #20]
   3a398:	mov	r2, #32
   3a39c:	strb	r2, [r3]
   3a3a0:	ldrb	r2, [r4, #25]
   3a3a4:	ldrb	r3, [r4, #27]
   3a3a8:	ldr	r1, [r4, #20]
   3a3ac:	cmp	r2, #0
   3a3b0:	addne	r1, r1, #1
   3a3b4:	cmp	r3, #0
   3a3b8:	str	r1, [r4, #20]
   3a3bc:	bne	3a400 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x188>
   3a3c0:	mov	r1, r8
   3a3c4:	mov	r0, r4
   3a3c8:	mov	r3, r9
   3a3cc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a3d0:	bx	r3
   3a3d4:	ldr	r3, [r0, #44]	; 0x2c
   3a3d8:	blx	r3
   3a3dc:	ldr	r3, [r4, #20]
   3a3e0:	b	3a2c8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x50>
   3a3e4:	mov	r2, sl
   3a3e8:	mov	r1, r6
   3a3ec:	bl	1454c <memcpy@plt>
   3a3f0:	ldr	r7, [r4, #20]
   3a3f4:	add	sl, r7, sl
   3a3f8:	str	sl, [r4, #20]
   3a3fc:	b	3a368 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf0>
   3a400:	mov	r0, r8
   3a404:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3a408:	ldr	r3, [r4, #20]
   3a40c:	add	r0, r3, r0
   3a410:	str	r0, [r4, #20]
   3a414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a418:	add	r1, r3, #1
   3a41c:	mov	r2, #10
   3a420:	str	r1, [r0, #20]
   3a424:	strb	r2, [r3]
   3a428:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3a42c:	ldr	r3, [r4, #20]
   3a430:	b	3a2c8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x50>
   3a434:	mov	r0, r4
   3a438:	ldr	r3, [r4, #44]	; 0x2c
   3a43c:	mov	r1, #0
   3a440:	blx	r3
   3a444:	ldr	r5, [r4, #16]
   3a448:	ldr	r0, [r4, #20]
   3a44c:	b	3a2fc <flatcc_json_printer_uint16_enum_struct_field@@Base+0x84>

0003a450 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   3a450:	cmp	r1, #0
   3a454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a458:	mov	r4, r0
   3a45c:	ldr	r8, [r2, r3]
   3a460:	ldrne	r3, [r0, #20]
   3a464:	movne	r2, #44	; 0x2c
   3a468:	addne	r1, r3, #1
   3a46c:	strne	r1, [r0, #20]
   3a470:	strbne	r2, [r3]
   3a474:	ldrb	r1, [r0, #25]
   3a478:	ldr	sl, [sp, #36]	; 0x24
   3a47c:	ldr	r6, [sp, #32]
   3a480:	cmp	r1, #0
   3a484:	ldr	r9, [sp, #40]	; 0x28
   3a488:	mov	r7, sl
   3a48c:	ldr	r3, [r0, #20]
   3a490:	bne	3a5f0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1a0>
   3a494:	ldr	r2, [r0, #16]
   3a498:	cmp	r3, r2
   3a49c:	bcs	3a5ac <flatcc_json_printer_uint32_enum_struct_field@@Base+0x15c>
   3a4a0:	mov	r2, #34	; 0x22
   3a4a4:	strb	r2, [r3]
   3a4a8:	ldrb	r3, [r4, #26]
   3a4ac:	ldr	r0, [r4, #20]
   3a4b0:	ldr	r5, [r4, #16]
   3a4b4:	cmp	r3, #0
   3a4b8:	addeq	r0, r0, #1
   3a4bc:	add	r3, r0, sl
   3a4c0:	cmp	r5, r3
   3a4c4:	str	r0, [r4, #20]
   3a4c8:	bhi	3a5bc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x16c>
   3a4cc:	cmp	r0, r5
   3a4d0:	bcs	3a60c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1bc>
   3a4d4:	sub	r5, r5, r0
   3a4d8:	cmp	sl, r5
   3a4dc:	bls	3a528 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xd8>
   3a4e0:	mov	sl, #0
   3a4e4:	mov	r2, r5
   3a4e8:	mov	r1, r6
   3a4ec:	bl	1454c <memcpy@plt>
   3a4f0:	ldr	r3, [r4, #20]
   3a4f4:	mov	r0, r4
   3a4f8:	add	r3, r3, r5
   3a4fc:	str	r3, [r4, #20]
   3a500:	ldr	r2, [r4, #44]	; 0x2c
   3a504:	mov	r1, sl
   3a508:	blx	r2
   3a50c:	ldr	r0, [r4, #20]
   3a510:	ldr	r3, [r4, #16]
   3a514:	sub	r7, r7, r5
   3a518:	add	r6, r6, r5
   3a51c:	sub	r5, r3, r0
   3a520:	cmp	r7, r5
   3a524:	bhi	3a4e4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x94>
   3a528:	mov	r1, r6
   3a52c:	mov	r2, r7
   3a530:	bl	1454c <memcpy@plt>
   3a534:	ldr	sl, [r4, #20]
   3a538:	add	sl, sl, r7
   3a53c:	str	sl, [r4, #20]
   3a540:	mov	r3, #34	; 0x22
   3a544:	strb	r3, [sl]
   3a548:	ldr	r1, [r4, #20]
   3a54c:	ldrb	r3, [r4, #26]
   3a550:	clz	r3, r3
   3a554:	lsr	r3, r3, #5
   3a558:	add	r2, r1, r3
   3a55c:	add	r2, r2, #1
   3a560:	mov	r0, #58	; 0x3a
   3a564:	str	r2, [r4, #20]
   3a568:	strb	r0, [r1, r3]
   3a56c:	ldr	r3, [r4, #20]
   3a570:	mov	r2, #32
   3a574:	strb	r2, [r3]
   3a578:	ldrb	r2, [r4, #25]
   3a57c:	ldrb	r3, [r4, #27]
   3a580:	ldr	r1, [r4, #20]
   3a584:	cmp	r2, #0
   3a588:	addne	r1, r1, #1
   3a58c:	cmp	r3, #0
   3a590:	str	r1, [r4, #20]
   3a594:	bne	3a5d8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x188>
   3a598:	mov	r1, r8
   3a59c:	mov	r0, r4
   3a5a0:	mov	r3, r9
   3a5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a5a8:	bx	r3
   3a5ac:	ldr	r3, [r0, #44]	; 0x2c
   3a5b0:	blx	r3
   3a5b4:	ldr	r3, [r4, #20]
   3a5b8:	b	3a4a0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x50>
   3a5bc:	mov	r2, sl
   3a5c0:	mov	r1, r6
   3a5c4:	bl	1454c <memcpy@plt>
   3a5c8:	ldr	r7, [r4, #20]
   3a5cc:	add	sl, r7, sl
   3a5d0:	str	sl, [r4, #20]
   3a5d4:	b	3a540 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf0>
   3a5d8:	mov	r0, r8
   3a5dc:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3a5e0:	ldr	r3, [r4, #20]
   3a5e4:	add	r0, r3, r0
   3a5e8:	str	r0, [r4, #20]
   3a5ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a5f0:	add	r1, r3, #1
   3a5f4:	mov	r2, #10
   3a5f8:	str	r1, [r0, #20]
   3a5fc:	strb	r2, [r3]
   3a600:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3a604:	ldr	r3, [r4, #20]
   3a608:	b	3a4a0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x50>
   3a60c:	mov	r0, r4
   3a610:	ldr	r3, [r4, #44]	; 0x2c
   3a614:	mov	r1, #0
   3a618:	blx	r3
   3a61c:	ldr	r5, [r4, #16]
   3a620:	ldr	r0, [r4, #20]
   3a624:	b	3a4d4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x84>

0003a628 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   3a628:	cmp	r1, #0
   3a62c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a630:	sub	sp, sp, #4
   3a634:	ldrd	r6, [r2, r3]
   3a638:	ldrne	r3, [r0, #20]
   3a63c:	add	r8, sp, #40	; 0x28
   3a640:	addne	r1, r3, #1
   3a644:	movne	r2, #44	; 0x2c
   3a648:	strne	r1, [r0, #20]
   3a64c:	ldm	r8, {r8, r9, sl}
   3a650:	mov	r4, r0
   3a654:	strbne	r2, [r3]
   3a658:	ldrb	r1, [r0, #25]
   3a65c:	mov	fp, r9
   3a660:	ldr	r3, [r0, #20]
   3a664:	cmp	r1, #0
   3a668:	bne	3a7d8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1b0>
   3a66c:	ldr	r2, [r0, #16]
   3a670:	cmp	r3, r2
   3a674:	bcs	3a78c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x164>
   3a678:	mov	r2, #34	; 0x22
   3a67c:	strb	r2, [r3]
   3a680:	ldrb	r3, [r4, #26]
   3a684:	ldr	r0, [r4, #20]
   3a688:	ldr	r5, [r4, #16]
   3a68c:	cmp	r3, #0
   3a690:	addeq	r0, r0, #1
   3a694:	add	r3, r0, r9
   3a698:	cmp	r5, r3
   3a69c:	str	r0, [r4, #20]
   3a6a0:	bhi	3a79c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x174>
   3a6a4:	cmp	r0, r5
   3a6a8:	bcs	3a7f4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1cc>
   3a6ac:	sub	r5, r5, r0
   3a6b0:	cmp	r9, r5
   3a6b4:	bls	3a700 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xd8>
   3a6b8:	mov	r9, #0
   3a6bc:	mov	r2, r5
   3a6c0:	mov	r1, r8
   3a6c4:	bl	1454c <memcpy@plt>
   3a6c8:	ldr	r3, [r4, #20]
   3a6cc:	mov	r0, r4
   3a6d0:	add	r3, r3, r5
   3a6d4:	str	r3, [r4, #20]
   3a6d8:	ldr	r2, [r4, #44]	; 0x2c
   3a6dc:	mov	r1, r9
   3a6e0:	blx	r2
   3a6e4:	ldr	r0, [r4, #20]
   3a6e8:	ldr	r3, [r4, #16]
   3a6ec:	sub	fp, fp, r5
   3a6f0:	add	r8, r8, r5
   3a6f4:	sub	r5, r3, r0
   3a6f8:	cmp	fp, r5
   3a6fc:	bhi	3a6bc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x94>
   3a700:	mov	r1, r8
   3a704:	mov	r2, fp
   3a708:	bl	1454c <memcpy@plt>
   3a70c:	ldr	r9, [r4, #20]
   3a710:	add	r9, r9, fp
   3a714:	str	r9, [r4, #20]
   3a718:	mov	r3, #34	; 0x22
   3a71c:	strb	r3, [r9]
   3a720:	ldr	r1, [r4, #20]
   3a724:	ldrb	r3, [r4, #26]
   3a728:	clz	r3, r3
   3a72c:	lsr	r3, r3, #5
   3a730:	add	r2, r1, r3
   3a734:	add	r2, r2, #1
   3a738:	mov	r0, #58	; 0x3a
   3a73c:	str	r2, [r4, #20]
   3a740:	strb	r0, [r1, r3]
   3a744:	ldr	r3, [r4, #20]
   3a748:	mov	r2, #32
   3a74c:	strb	r2, [r3]
   3a750:	ldrb	r1, [r4, #25]
   3a754:	ldrb	r3, [r4, #27]
   3a758:	ldr	r2, [r4, #20]
   3a75c:	cmp	r1, #0
   3a760:	addne	r2, r2, #1
   3a764:	cmp	r3, #0
   3a768:	str	r2, [r4, #20]
   3a76c:	bne	3a7b8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x190>
   3a770:	mov	r2, r6
   3a774:	mov	r3, r7
   3a778:	mov	r0, r4
   3a77c:	mov	r1, sl
   3a780:	add	sp, sp, #4
   3a784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a788:	bx	r1
   3a78c:	ldr	r3, [r0, #44]	; 0x2c
   3a790:	blx	r3
   3a794:	ldr	r3, [r4, #20]
   3a798:	b	3a678 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x50>
   3a79c:	mov	r2, r9
   3a7a0:	mov	r1, r8
   3a7a4:	bl	1454c <memcpy@plt>
   3a7a8:	ldr	fp, [r4, #20]
   3a7ac:	add	r9, fp, r9
   3a7b0:	str	r9, [r4, #20]
   3a7b4:	b	3a718 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xf0>
   3a7b8:	mov	r0, r6
   3a7bc:	mov	r1, r7
   3a7c0:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   3a7c4:	ldr	r3, [r4, #20]
   3a7c8:	add	r0, r3, r0
   3a7cc:	str	r0, [r4, #20]
   3a7d0:	add	sp, sp, #4
   3a7d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a7d8:	add	r1, r3, #1
   3a7dc:	mov	r2, #10
   3a7e0:	str	r1, [r0, #20]
   3a7e4:	strb	r2, [r3]
   3a7e8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3a7ec:	ldr	r3, [r4, #20]
   3a7f0:	b	3a678 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x50>
   3a7f4:	mov	r0, r4
   3a7f8:	ldr	r3, [r4, #44]	; 0x2c
   3a7fc:	mov	r1, #0
   3a800:	blx	r3
   3a804:	ldr	r5, [r4, #16]
   3a808:	ldr	r0, [r4, #20]
   3a80c:	b	3a6ac <flatcc_json_printer_uint64_enum_struct_field@@Base+0x84>

0003a810 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   3a810:	cmp	r1, #0
   3a814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a818:	mov	r4, r0
   3a81c:	ldrsb	r6, [r2, r3]
   3a820:	ldrne	r3, [r0, #20]
   3a824:	movne	r2, #44	; 0x2c
   3a828:	addne	r1, r3, #1
   3a82c:	strne	r1, [r0, #20]
   3a830:	strbne	r2, [r3]
   3a834:	ldrb	r1, [r0, #25]
   3a838:	ldr	sl, [sp, #36]	; 0x24
   3a83c:	ldr	r7, [sp, #32]
   3a840:	cmp	r1, #0
   3a844:	ldr	r9, [sp, #40]	; 0x28
   3a848:	mov	r8, sl
   3a84c:	ldr	r3, [r0, #20]
   3a850:	bne	3aa54 <flatcc_json_printer_int8_enum_struct_field@@Base+0x244>
   3a854:	ldr	r2, [r0, #16]
   3a858:	cmp	r3, r2
   3a85c:	bcs	3a9e0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1d0>
   3a860:	mov	r2, #34	; 0x22
   3a864:	strb	r2, [r3]
   3a868:	ldrb	r3, [r4, #26]
   3a86c:	ldr	r0, [r4, #20]
   3a870:	ldr	r5, [r4, #16]
   3a874:	cmp	r3, #0
   3a878:	addeq	r0, r0, #1
   3a87c:	add	r3, r0, sl
   3a880:	cmp	r5, r3
   3a884:	str	r0, [r4, #20]
   3a888:	bhi	3a9f0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1e0>
   3a88c:	cmp	r0, r5
   3a890:	bcs	3aa88 <flatcc_json_printer_int8_enum_struct_field@@Base+0x278>
   3a894:	sub	r5, r5, r0
   3a898:	cmp	sl, r5
   3a89c:	bls	3a8e8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xd8>
   3a8a0:	mov	sl, #0
   3a8a4:	mov	r2, r5
   3a8a8:	mov	r1, r7
   3a8ac:	bl	1454c <memcpy@plt>
   3a8b0:	ldr	r3, [r4, #20]
   3a8b4:	mov	r0, r4
   3a8b8:	add	r3, r3, r5
   3a8bc:	str	r3, [r4, #20]
   3a8c0:	ldr	r2, [r4, #44]	; 0x2c
   3a8c4:	mov	r1, sl
   3a8c8:	blx	r2
   3a8cc:	ldr	r0, [r4, #20]
   3a8d0:	ldr	r3, [r4, #16]
   3a8d4:	sub	r8, r8, r5
   3a8d8:	add	r7, r7, r5
   3a8dc:	sub	r5, r3, r0
   3a8e0:	cmp	r8, r5
   3a8e4:	bhi	3a8a4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x94>
   3a8e8:	mov	r1, r7
   3a8ec:	mov	r2, r8
   3a8f0:	bl	1454c <memcpy@plt>
   3a8f4:	ldr	sl, [r4, #20]
   3a8f8:	add	sl, sl, r8
   3a8fc:	str	sl, [r4, #20]
   3a900:	mov	r3, #34	; 0x22
   3a904:	strb	r3, [sl]
   3a908:	ldr	r1, [r4, #20]
   3a90c:	ldrb	r3, [r4, #26]
   3a910:	clz	r3, r3
   3a914:	lsr	r3, r3, #5
   3a918:	add	r2, r1, r3
   3a91c:	add	r2, r2, #1
   3a920:	mov	r0, #58	; 0x3a
   3a924:	str	r2, [r4, #20]
   3a928:	strb	r0, [r1, r3]
   3a92c:	ldr	r3, [r4, #20]
   3a930:	mov	r2, #32
   3a934:	strb	r2, [r3]
   3a938:	ldrb	r2, [r4, #25]
   3a93c:	ldrb	r1, [r4, #27]
   3a940:	ldr	r0, [r4, #20]
   3a944:	adds	r2, r2, #0
   3a948:	movne	r2, #1
   3a94c:	add	r3, r0, r2
   3a950:	cmp	r1, #0
   3a954:	str	r3, [r4, #20]
   3a958:	beq	3aa0c <flatcc_json_printer_int8_enum_struct_field@@Base+0x1fc>
   3a95c:	cmp	r6, #0
   3a960:	lsr	r1, r6, #31
   3a964:	rsblt	r6, r6, #0
   3a968:	movlt	ip, #45	; 0x2d
   3a96c:	sxtblt	r6, r6
   3a970:	addlt	r3, r3, #1
   3a974:	uxtb	r6, r6
   3a978:	strblt	ip, [r0, r2]
   3a97c:	cmp	r6, #99	; 0x63
   3a980:	bls	3aa20 <flatcc_json_printer_int8_enum_struct_field@@Base+0x210>
   3a984:	ldr	r2, [pc, #280]	; 3aaa4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x294>
   3a988:	mov	ip, #100	; 0x64
   3a98c:	ldr	r0, [pc, #276]	; 3aaa8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x298>
   3a990:	umull	lr, r2, r2, r6
   3a994:	mov	lr, #0
   3a998:	lsr	r2, r2, #5
   3a99c:	strb	lr, [r3, #3]
   3a9a0:	mul	r2, ip, r2
   3a9a4:	mov	ip, #49	; 0x31
   3a9a8:	sub	r6, r6, r2
   3a9ac:	mov	r2, #3
   3a9b0:	uxtb	r6, r6
   3a9b4:	ldrb	lr, [r0, r6, lsl #1]
   3a9b8:	add	r6, r0, r6, lsl #1
   3a9bc:	strb	lr, [r3, #1]
   3a9c0:	ldrb	r0, [r6, #1]
   3a9c4:	strb	ip, [r3]
   3a9c8:	strb	r0, [r3, #2]
   3a9cc:	ldr	r3, [r4, #20]
   3a9d0:	add	r2, r1, r2
   3a9d4:	add	r3, r3, r2
   3a9d8:	str	r3, [r4, #20]
   3a9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a9e0:	ldr	r3, [r0, #44]	; 0x2c
   3a9e4:	blx	r3
   3a9e8:	ldr	r3, [r4, #20]
   3a9ec:	b	3a860 <flatcc_json_printer_int8_enum_struct_field@@Base+0x50>
   3a9f0:	mov	r2, sl
   3a9f4:	mov	r1, r7
   3a9f8:	bl	1454c <memcpy@plt>
   3a9fc:	ldr	r8, [r4, #20]
   3aa00:	add	sl, r8, sl
   3aa04:	str	sl, [r4, #20]
   3aa08:	b	3a900 <flatcc_json_printer_int8_enum_struct_field@@Base+0xf0>
   3aa0c:	mov	r1, r6
   3aa10:	mov	r0, r4
   3aa14:	mov	r3, r9
   3aa18:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3aa1c:	bx	r3
   3aa20:	cmp	r6, #9
   3aa24:	bls	3aa70 <flatcc_json_printer_int8_enum_struct_field@@Base+0x260>
   3aa28:	ldr	r2, [pc, #120]	; 3aaa8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x298>
   3aa2c:	sxth	r6, r6
   3aa30:	mov	r0, #0
   3aa34:	strb	r0, [r3, #2]
   3aa38:	ldrb	r0, [r2, r6, lsl #1]
   3aa3c:	add	r6, r2, r6, lsl #1
   3aa40:	mov	r2, #2
   3aa44:	strb	r0, [r3]
   3aa48:	ldrb	r0, [r6, #1]
   3aa4c:	strb	r0, [r3, #1]
   3aa50:	b	3a9cc <flatcc_json_printer_int8_enum_struct_field@@Base+0x1bc>
   3aa54:	add	r1, r3, #1
   3aa58:	mov	r2, #10
   3aa5c:	str	r1, [r0, #20]
   3aa60:	strb	r2, [r3]
   3aa64:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3aa68:	ldr	r3, [r4, #20]
   3aa6c:	b	3a860 <flatcc_json_printer_int8_enum_struct_field@@Base+0x50>
   3aa70:	add	r6, r6, #48	; 0x30
   3aa74:	mov	r0, #0
   3aa78:	mov	r2, #1
   3aa7c:	strb	r6, [r3]
   3aa80:	strb	r0, [r3, #1]
   3aa84:	b	3a9cc <flatcc_json_printer_int8_enum_struct_field@@Base+0x1bc>
   3aa88:	mov	r0, r4
   3aa8c:	ldr	r3, [r4, #44]	; 0x2c
   3aa90:	mov	r1, #0
   3aa94:	blx	r3
   3aa98:	ldr	r5, [r4, #16]
   3aa9c:	ldr	r0, [r4, #20]
   3aaa0:	b	3a894 <flatcc_json_printer_int8_enum_struct_field@@Base+0x84>
   3aaa4:	mvnpl	r8, pc, lsl r5
   3aaa8:	andeq	r7, r4, r0, asr r4

0003aaac <flatcc_json_printer_int16_enum_struct_field@@Base>:
   3aaac:	cmp	r1, #0
   3aab0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3aab4:	mov	r4, r0
   3aab8:	ldrsh	r8, [r2, r3]
   3aabc:	ldrne	r3, [r0, #20]
   3aac0:	movne	r2, #44	; 0x2c
   3aac4:	addne	r1, r3, #1
   3aac8:	strne	r1, [r0, #20]
   3aacc:	strbne	r2, [r3]
   3aad0:	ldrb	r1, [r0, #25]
   3aad4:	ldr	sl, [sp, #36]	; 0x24
   3aad8:	ldr	r6, [sp, #32]
   3aadc:	cmp	r1, #0
   3aae0:	ldr	r9, [sp, #40]	; 0x28
   3aae4:	mov	r7, sl
   3aae8:	ldr	r3, [r0, #20]
   3aaec:	bne	3ac70 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1c4>
   3aaf0:	ldr	r2, [r0, #16]
   3aaf4:	cmp	r3, r2
   3aaf8:	bcs	3ac30 <flatcc_json_printer_int16_enum_struct_field@@Base+0x184>
   3aafc:	mov	r2, #34	; 0x22
   3ab00:	strb	r2, [r3]
   3ab04:	ldrb	r3, [r4, #26]
   3ab08:	ldr	r0, [r4, #20]
   3ab0c:	ldr	r5, [r4, #16]
   3ab10:	cmp	r3, #0
   3ab14:	addeq	r0, r0, #1
   3ab18:	add	r3, r0, sl
   3ab1c:	cmp	r5, r3
   3ab20:	str	r0, [r4, #20]
   3ab24:	bhi	3ac40 <flatcc_json_printer_int16_enum_struct_field@@Base+0x194>
   3ab28:	cmp	r0, r5
   3ab2c:	bcs	3ac8c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1e0>
   3ab30:	sub	r5, r5, r0
   3ab34:	cmp	sl, r5
   3ab38:	bls	3ab84 <flatcc_json_printer_int16_enum_struct_field@@Base+0xd8>
   3ab3c:	mov	sl, #0
   3ab40:	mov	r2, r5
   3ab44:	mov	r1, r6
   3ab48:	bl	1454c <memcpy@plt>
   3ab4c:	ldr	r3, [r4, #20]
   3ab50:	mov	r0, r4
   3ab54:	add	r3, r3, r5
   3ab58:	str	r3, [r4, #20]
   3ab5c:	ldr	r2, [r4, #44]	; 0x2c
   3ab60:	mov	r1, sl
   3ab64:	blx	r2
   3ab68:	ldr	r0, [r4, #20]
   3ab6c:	ldr	r3, [r4, #16]
   3ab70:	sub	r7, r7, r5
   3ab74:	add	r6, r6, r5
   3ab78:	sub	r5, r3, r0
   3ab7c:	cmp	r7, r5
   3ab80:	bhi	3ab40 <flatcc_json_printer_int16_enum_struct_field@@Base+0x94>
   3ab84:	mov	r1, r6
   3ab88:	mov	r2, r7
   3ab8c:	bl	1454c <memcpy@plt>
   3ab90:	ldr	sl, [r4, #20]
   3ab94:	add	sl, sl, r7
   3ab98:	str	sl, [r4, #20]
   3ab9c:	mov	r3, #34	; 0x22
   3aba0:	strb	r3, [sl]
   3aba4:	ldr	r1, [r4, #20]
   3aba8:	ldrb	r3, [r4, #26]
   3abac:	clz	r3, r3
   3abb0:	lsr	r3, r3, #5
   3abb4:	add	r2, r1, r3
   3abb8:	add	r2, r2, #1
   3abbc:	mov	r0, #58	; 0x3a
   3abc0:	str	r2, [r4, #20]
   3abc4:	strb	r0, [r1, r3]
   3abc8:	ldr	r3, [r4, #20]
   3abcc:	mov	r2, #32
   3abd0:	strb	r2, [r3]
   3abd4:	ldrb	r3, [r4, #25]
   3abd8:	ldrb	r0, [r4, #27]
   3abdc:	ldr	r2, [r4, #20]
   3abe0:	adds	r3, r3, #0
   3abe4:	movne	r3, #1
   3abe8:	add	r1, r2, r3
   3abec:	cmp	r0, #0
   3abf0:	str	r1, [r4, #20]
   3abf4:	beq	3ac5c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1b0>
   3abf8:	cmp	r8, #0
   3abfc:	lsr	r5, r8, #31
   3ac00:	rsblt	r8, r8, #0
   3ac04:	movlt	r0, #45	; 0x2d
   3ac08:	sxthlt	r8, r8
   3ac0c:	strblt	r0, [r2, r3]
   3ac10:	addlt	r1, r1, #1
   3ac14:	uxth	r0, r8
   3ac18:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3ac1c:	ldr	r3, [r4, #20]
   3ac20:	add	r0, r5, r0
   3ac24:	add	r3, r3, r0
   3ac28:	str	r3, [r4, #20]
   3ac2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ac30:	ldr	r3, [r0, #44]	; 0x2c
   3ac34:	blx	r3
   3ac38:	ldr	r3, [r4, #20]
   3ac3c:	b	3aafc <flatcc_json_printer_int16_enum_struct_field@@Base+0x50>
   3ac40:	mov	r2, sl
   3ac44:	mov	r1, r6
   3ac48:	bl	1454c <memcpy@plt>
   3ac4c:	ldr	r7, [r4, #20]
   3ac50:	add	sl, r7, sl
   3ac54:	str	sl, [r4, #20]
   3ac58:	b	3ab9c <flatcc_json_printer_int16_enum_struct_field@@Base+0xf0>
   3ac5c:	mov	r1, r8
   3ac60:	mov	r0, r4
   3ac64:	mov	r3, r9
   3ac68:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ac6c:	bx	r3
   3ac70:	add	r1, r3, #1
   3ac74:	mov	r2, #10
   3ac78:	str	r1, [r0, #20]
   3ac7c:	strb	r2, [r3]
   3ac80:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3ac84:	ldr	r3, [r4, #20]
   3ac88:	b	3aafc <flatcc_json_printer_int16_enum_struct_field@@Base+0x50>
   3ac8c:	mov	r0, r4
   3ac90:	ldr	r3, [r4, #44]	; 0x2c
   3ac94:	mov	r1, #0
   3ac98:	blx	r3
   3ac9c:	ldr	r5, [r4, #16]
   3aca0:	ldr	r0, [r4, #20]
   3aca4:	b	3ab30 <flatcc_json_printer_int16_enum_struct_field@@Base+0x84>

0003aca8 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   3aca8:	cmp	r1, #0
   3acac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3acb0:	mov	r4, r0
   3acb4:	ldr	r8, [r2, r3]
   3acb8:	ldrne	r3, [r0, #20]
   3acbc:	movne	r2, #44	; 0x2c
   3acc0:	addne	r1, r3, #1
   3acc4:	strne	r1, [r0, #20]
   3acc8:	strbne	r2, [r3]
   3accc:	ldrb	r1, [r0, #25]
   3acd0:	ldr	sl, [sp, #36]	; 0x24
   3acd4:	ldr	r6, [sp, #32]
   3acd8:	cmp	r1, #0
   3acdc:	ldr	r9, [sp, #40]	; 0x28
   3ace0:	mov	r7, sl
   3ace4:	ldr	r3, [r0, #20]
   3ace8:	bne	3ae68 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1c0>
   3acec:	ldr	r2, [r0, #16]
   3acf0:	cmp	r3, r2
   3acf4:	bcs	3ae28 <flatcc_json_printer_int32_enum_struct_field@@Base+0x180>
   3acf8:	mov	r2, #34	; 0x22
   3acfc:	strb	r2, [r3]
   3ad00:	ldrb	r3, [r4, #26]
   3ad04:	ldr	r0, [r4, #20]
   3ad08:	ldr	r5, [r4, #16]
   3ad0c:	cmp	r3, #0
   3ad10:	addeq	r0, r0, #1
   3ad14:	add	r3, r0, sl
   3ad18:	cmp	r5, r3
   3ad1c:	str	r0, [r4, #20]
   3ad20:	bhi	3ae38 <flatcc_json_printer_int32_enum_struct_field@@Base+0x190>
   3ad24:	cmp	r0, r5
   3ad28:	bcs	3ae84 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1dc>
   3ad2c:	sub	r5, r5, r0
   3ad30:	cmp	sl, r5
   3ad34:	bls	3ad80 <flatcc_json_printer_int32_enum_struct_field@@Base+0xd8>
   3ad38:	mov	sl, #0
   3ad3c:	mov	r2, r5
   3ad40:	mov	r1, r6
   3ad44:	bl	1454c <memcpy@plt>
   3ad48:	ldr	r3, [r4, #20]
   3ad4c:	mov	r0, r4
   3ad50:	add	r3, r3, r5
   3ad54:	str	r3, [r4, #20]
   3ad58:	ldr	r2, [r4, #44]	; 0x2c
   3ad5c:	mov	r1, sl
   3ad60:	blx	r2
   3ad64:	ldr	r0, [r4, #20]
   3ad68:	ldr	r3, [r4, #16]
   3ad6c:	sub	r7, r7, r5
   3ad70:	add	r6, r6, r5
   3ad74:	sub	r5, r3, r0
   3ad78:	cmp	r7, r5
   3ad7c:	bhi	3ad3c <flatcc_json_printer_int32_enum_struct_field@@Base+0x94>
   3ad80:	mov	r1, r6
   3ad84:	mov	r2, r7
   3ad88:	bl	1454c <memcpy@plt>
   3ad8c:	ldr	sl, [r4, #20]
   3ad90:	add	sl, sl, r7
   3ad94:	str	sl, [r4, #20]
   3ad98:	mov	r3, #34	; 0x22
   3ad9c:	strb	r3, [sl]
   3ada0:	ldr	r1, [r4, #20]
   3ada4:	ldrb	r3, [r4, #26]
   3ada8:	clz	r3, r3
   3adac:	lsr	r3, r3, #5
   3adb0:	add	r2, r1, r3
   3adb4:	add	r2, r2, #1
   3adb8:	mov	r0, #58	; 0x3a
   3adbc:	str	r2, [r4, #20]
   3adc0:	strb	r0, [r1, r3]
   3adc4:	ldr	r3, [r4, #20]
   3adc8:	mov	r2, #32
   3adcc:	strb	r2, [r3]
   3add0:	ldrb	r3, [r4, #25]
   3add4:	ldrb	r0, [r4, #27]
   3add8:	ldr	r2, [r4, #20]
   3addc:	adds	r3, r3, #0
   3ade0:	movne	r3, #1
   3ade4:	add	r1, r2, r3
   3ade8:	cmp	r0, #0
   3adec:	str	r1, [r4, #20]
   3adf0:	beq	3ae54 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1ac>
   3adf4:	cmp	r8, #0
   3adf8:	movlt	r0, #45	; 0x2d
   3adfc:	lsr	r5, r8, #31
   3ae00:	rsblt	r8, r8, #0
   3ae04:	strblt	r0, [r2, r3]
   3ae08:	addlt	r1, r1, #1
   3ae0c:	mov	r0, r8
   3ae10:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3ae14:	ldr	r3, [r4, #20]
   3ae18:	add	r0, r5, r0
   3ae1c:	add	r3, r3, r0
   3ae20:	str	r3, [r4, #20]
   3ae24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ae28:	ldr	r3, [r0, #44]	; 0x2c
   3ae2c:	blx	r3
   3ae30:	ldr	r3, [r4, #20]
   3ae34:	b	3acf8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x50>
   3ae38:	mov	r2, sl
   3ae3c:	mov	r1, r6
   3ae40:	bl	1454c <memcpy@plt>
   3ae44:	ldr	r7, [r4, #20]
   3ae48:	add	sl, r7, sl
   3ae4c:	str	sl, [r4, #20]
   3ae50:	b	3ad98 <flatcc_json_printer_int32_enum_struct_field@@Base+0xf0>
   3ae54:	mov	r1, r8
   3ae58:	mov	r0, r4
   3ae5c:	mov	r3, r9
   3ae60:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ae64:	bx	r3
   3ae68:	add	r1, r3, #1
   3ae6c:	mov	r2, #10
   3ae70:	str	r1, [r0, #20]
   3ae74:	strb	r2, [r3]
   3ae78:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3ae7c:	ldr	r3, [r4, #20]
   3ae80:	b	3acf8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x50>
   3ae84:	mov	r0, r4
   3ae88:	ldr	r3, [r4, #44]	; 0x2c
   3ae8c:	mov	r1, #0
   3ae90:	blx	r3
   3ae94:	ldr	r5, [r4, #16]
   3ae98:	ldr	r0, [r4, #20]
   3ae9c:	b	3ad2c <flatcc_json_printer_int32_enum_struct_field@@Base+0x84>

0003aea0 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   3aea0:	cmp	r1, #0
   3aea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aea8:	sub	sp, sp, #4
   3aeac:	ldrd	r6, [r2, r3]
   3aeb0:	ldrne	r3, [r0, #20]
   3aeb4:	add	r8, sp, #40	; 0x28
   3aeb8:	addne	r1, r3, #1
   3aebc:	movne	r2, #44	; 0x2c
   3aec0:	strne	r1, [r0, #20]
   3aec4:	ldm	r8, {r8, r9, sl}
   3aec8:	mov	r4, r0
   3aecc:	strbne	r2, [r3]
   3aed0:	ldrb	r1, [r0, #25]
   3aed4:	mov	fp, r9
   3aed8:	ldr	r3, [r0, #20]
   3aedc:	cmp	r1, #0
   3aee0:	bne	3b07c <flatcc_json_printer_int64_enum_struct_field@@Base+0x1dc>
   3aee4:	ldr	r2, [r0, #16]
   3aee8:	cmp	r3, r2
   3aeec:	bcs	3b034 <flatcc_json_printer_int64_enum_struct_field@@Base+0x194>
   3aef0:	mov	r2, #34	; 0x22
   3aef4:	strb	r2, [r3]
   3aef8:	ldrb	r3, [r4, #26]
   3aefc:	ldr	r0, [r4, #20]
   3af00:	ldr	r5, [r4, #16]
   3af04:	cmp	r3, #0
   3af08:	addeq	r0, r0, #1
   3af0c:	add	r3, r0, r9
   3af10:	cmp	r5, r3
   3af14:	str	r0, [r4, #20]
   3af18:	bhi	3b044 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1a4>
   3af1c:	cmp	r0, r5
   3af20:	bcs	3b098 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1f8>
   3af24:	sub	r5, r5, r0
   3af28:	cmp	r9, r5
   3af2c:	bls	3af78 <flatcc_json_printer_int64_enum_struct_field@@Base+0xd8>
   3af30:	mov	r9, #0
   3af34:	mov	r2, r5
   3af38:	mov	r1, r8
   3af3c:	bl	1454c <memcpy@plt>
   3af40:	ldr	r3, [r4, #20]
   3af44:	mov	r0, r4
   3af48:	add	r3, r3, r5
   3af4c:	str	r3, [r4, #20]
   3af50:	ldr	r2, [r4, #44]	; 0x2c
   3af54:	mov	r1, r9
   3af58:	blx	r2
   3af5c:	ldr	r0, [r4, #20]
   3af60:	ldr	r3, [r4, #16]
   3af64:	sub	fp, fp, r5
   3af68:	add	r8, r8, r5
   3af6c:	sub	r5, r3, r0
   3af70:	cmp	fp, r5
   3af74:	bhi	3af34 <flatcc_json_printer_int64_enum_struct_field@@Base+0x94>
   3af78:	mov	r1, r8
   3af7c:	mov	r2, fp
   3af80:	bl	1454c <memcpy@plt>
   3af84:	ldr	r9, [r4, #20]
   3af88:	add	r9, r9, fp
   3af8c:	str	r9, [r4, #20]
   3af90:	mov	r3, #34	; 0x22
   3af94:	strb	r3, [r9]
   3af98:	ldr	r1, [r4, #20]
   3af9c:	ldrb	r3, [r4, #26]
   3afa0:	clz	r3, r3
   3afa4:	lsr	r3, r3, #5
   3afa8:	add	r2, r1, r3
   3afac:	add	r2, r2, #1
   3afb0:	mov	r0, #58	; 0x3a
   3afb4:	str	r2, [r4, #20]
   3afb8:	strb	r0, [r1, r3]
   3afbc:	ldr	r3, [r4, #20]
   3afc0:	mov	r2, #32
   3afc4:	strb	r2, [r3]
   3afc8:	ldrb	r3, [r4, #25]
   3afcc:	ldrb	r0, [r4, #27]
   3afd0:	ldr	r1, [r4, #20]
   3afd4:	adds	r3, r3, #0
   3afd8:	movne	r3, #1
   3afdc:	add	r2, r1, r3
   3afe0:	cmp	r0, #0
   3afe4:	str	r2, [r4, #20]
   3afe8:	beq	3b060 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1c0>
   3afec:	cmp	r6, #0
   3aff0:	sbcs	r0, r7, #0
   3aff4:	lsr	r5, r7, #31
   3aff8:	bge	3b010 <flatcc_json_printer_int64_enum_struct_field@@Base+0x170>
   3affc:	rsbs	r6, r6, #0
   3b000:	rsc	r7, r7, #0
   3b004:	add	r2, r2, #1
   3b008:	mov	r0, #45	; 0x2d
   3b00c:	strb	r0, [r1, r3]
   3b010:	mov	r0, r6
   3b014:	mov	r1, r7
   3b018:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   3b01c:	ldr	r3, [r4, #20]
   3b020:	add	r0, r5, r0
   3b024:	add	r3, r3, r0
   3b028:	str	r3, [r4, #20]
   3b02c:	add	sp, sp, #4
   3b030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b034:	ldr	r3, [r0, #44]	; 0x2c
   3b038:	blx	r3
   3b03c:	ldr	r3, [r4, #20]
   3b040:	b	3aef0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x50>
   3b044:	mov	r2, r9
   3b048:	mov	r1, r8
   3b04c:	bl	1454c <memcpy@plt>
   3b050:	ldr	fp, [r4, #20]
   3b054:	add	r9, fp, r9
   3b058:	str	r9, [r4, #20]
   3b05c:	b	3af90 <flatcc_json_printer_int64_enum_struct_field@@Base+0xf0>
   3b060:	mov	r2, r6
   3b064:	mov	r3, r7
   3b068:	mov	r0, r4
   3b06c:	mov	r1, sl
   3b070:	add	sp, sp, #4
   3b074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b078:	bx	r1
   3b07c:	add	r1, r3, #1
   3b080:	mov	r2, #10
   3b084:	str	r1, [r0, #20]
   3b088:	strb	r2, [r3]
   3b08c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3b090:	ldr	r3, [r4, #20]
   3b094:	b	3aef0 <flatcc_json_printer_int64_enum_struct_field@@Base+0x50>
   3b098:	mov	r0, r4
   3b09c:	ldr	r3, [r4, #44]	; 0x2c
   3b0a0:	mov	r1, #0
   3b0a4:	blx	r3
   3b0a8:	ldr	r5, [r4, #16]
   3b0ac:	ldr	r0, [r4, #20]
   3b0b0:	b	3af24 <flatcc_json_printer_int64_enum_struct_field@@Base+0x84>

0003b0b4 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   3b0b4:	cmp	r1, #0
   3b0b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b0bc:	mov	r4, r0
   3b0c0:	ldrb	r8, [r2, r3]
   3b0c4:	ldrne	r3, [r0, #20]
   3b0c8:	movne	r2, #44	; 0x2c
   3b0cc:	addne	r1, r3, #1
   3b0d0:	strne	r1, [r0, #20]
   3b0d4:	strbne	r2, [r3]
   3b0d8:	ldrb	r1, [r0, #25]
   3b0dc:	ldr	sl, [sp, #36]	; 0x24
   3b0e0:	ldr	r6, [sp, #32]
   3b0e4:	cmp	r1, #0
   3b0e8:	ldr	r9, [sp, #40]	; 0x28
   3b0ec:	mov	r7, sl
   3b0f0:	ldr	r3, [r0, #20]
   3b0f4:	bne	3b274 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1c0>
   3b0f8:	ldr	r2, [r0, #16]
   3b0fc:	cmp	r3, r2
   3b100:	bcs	3b214 <flatcc_json_printer_bool_enum_struct_field@@Base+0x160>
   3b104:	mov	r2, #34	; 0x22
   3b108:	strb	r2, [r3]
   3b10c:	ldrb	r3, [r4, #26]
   3b110:	ldr	r0, [r4, #20]
   3b114:	ldr	r5, [r4, #16]
   3b118:	cmp	r3, #0
   3b11c:	addeq	r0, r0, #1
   3b120:	add	r3, r0, sl
   3b124:	cmp	r5, r3
   3b128:	str	r0, [r4, #20]
   3b12c:	bhi	3b224 <flatcc_json_printer_bool_enum_struct_field@@Base+0x170>
   3b130:	cmp	r0, r5
   3b134:	bcs	3b290 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1dc>
   3b138:	sub	r5, r5, r0
   3b13c:	cmp	sl, r5
   3b140:	bls	3b18c <flatcc_json_printer_bool_enum_struct_field@@Base+0xd8>
   3b144:	mov	sl, #0
   3b148:	mov	r2, r5
   3b14c:	mov	r1, r6
   3b150:	bl	1454c <memcpy@plt>
   3b154:	ldr	r3, [r4, #20]
   3b158:	mov	r0, r4
   3b15c:	add	r3, r3, r5
   3b160:	str	r3, [r4, #20]
   3b164:	ldr	r2, [r4, #44]	; 0x2c
   3b168:	mov	r1, sl
   3b16c:	blx	r2
   3b170:	ldr	r0, [r4, #20]
   3b174:	ldr	r3, [r4, #16]
   3b178:	sub	r7, r7, r5
   3b17c:	add	r6, r6, r5
   3b180:	sub	r5, r3, r0
   3b184:	cmp	r7, r5
   3b188:	bhi	3b148 <flatcc_json_printer_bool_enum_struct_field@@Base+0x94>
   3b18c:	mov	r1, r6
   3b190:	mov	r2, r7
   3b194:	bl	1454c <memcpy@plt>
   3b198:	ldr	sl, [r4, #20]
   3b19c:	add	sl, sl, r7
   3b1a0:	str	sl, [r4, #20]
   3b1a4:	mov	r3, #34	; 0x22
   3b1a8:	strb	r3, [sl]
   3b1ac:	ldr	r1, [r4, #20]
   3b1b0:	ldrb	r3, [r4, #26]
   3b1b4:	clz	r3, r3
   3b1b8:	lsr	r3, r3, #5
   3b1bc:	add	r2, r1, r3
   3b1c0:	add	r2, r2, #1
   3b1c4:	mov	r0, #58	; 0x3a
   3b1c8:	str	r2, [r4, #20]
   3b1cc:	strb	r0, [r1, r3]
   3b1d0:	ldr	r3, [r4, #20]
   3b1d4:	mov	r2, #32
   3b1d8:	strb	r2, [r3]
   3b1dc:	ldrb	r3, [r4, #25]
   3b1e0:	ldrb	r0, [r4, #27]
   3b1e4:	ldr	r1, [r4, #20]
   3b1e8:	adds	r3, r3, #0
   3b1ec:	movne	r3, #1
   3b1f0:	add	r2, r1, r3
   3b1f4:	cmp	r0, #0
   3b1f8:	str	r2, [r4, #20]
   3b1fc:	bne	3b240 <flatcc_json_printer_bool_enum_struct_field@@Base+0x18c>
   3b200:	mov	r1, r8
   3b204:	mov	r0, r4
   3b208:	mov	r3, r9
   3b20c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b210:	bx	r3
   3b214:	ldr	r3, [r0, #44]	; 0x2c
   3b218:	blx	r3
   3b21c:	ldr	r3, [r4, #20]
   3b220:	b	3b104 <flatcc_json_printer_bool_enum_struct_field@@Base+0x50>
   3b224:	mov	r2, sl
   3b228:	mov	r1, r6
   3b22c:	bl	1454c <memcpy@plt>
   3b230:	ldr	r7, [r4, #20]
   3b234:	add	sl, r7, sl
   3b238:	str	sl, [r4, #20]
   3b23c:	b	3b1a4 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf0>
   3b240:	cmp	r8, #0
   3b244:	ldr	r0, [pc, #120]	; 3b2c4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x210>
   3b248:	bne	3b2ac <flatcc_json_printer_bool_enum_struct_field@@Base+0x1f8>
   3b24c:	add	lr, r0, #1792	; 0x700
   3b250:	mov	ip, #5
   3b254:	ldrh	lr, [lr, #4]
   3b258:	ldr	r0, [r0, #1792]	; 0x700
   3b25c:	str	r0, [r1, r3]
   3b260:	strh	lr, [r2, #4]
   3b264:	ldr	r3, [r4, #20]
   3b268:	add	r3, r3, ip
   3b26c:	str	r3, [r4, #20]
   3b270:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b274:	add	r1, r3, #1
   3b278:	mov	r2, #10
   3b27c:	str	r1, [r0, #20]
   3b280:	strb	r2, [r3]
   3b284:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3b288:	ldr	r3, [r4, #20]
   3b28c:	b	3b104 <flatcc_json_printer_bool_enum_struct_field@@Base+0x50>
   3b290:	mov	r0, r4
   3b294:	ldr	r3, [r4, #44]	; 0x2c
   3b298:	mov	r1, #0
   3b29c:	blx	r3
   3b2a0:	ldr	r5, [r4, #16]
   3b2a4:	ldr	r0, [r4, #20]
   3b2a8:	b	3b138 <flatcc_json_printer_bool_enum_struct_field@@Base+0x84>
   3b2ac:	ldrb	lr, [r0, #1788]	; 0x6fc
   3b2b0:	ldr	r0, [r0, #1784]	; 0x6f8
   3b2b4:	mov	ip, #4
   3b2b8:	str	r0, [r1, r3]
   3b2bc:	strb	lr, [r2, #4]
   3b2c0:	b	3b264 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1b0>
   3b2c4:	andeq	r7, r4, r0, asr r4

0003b2c8 <flatcc_json_printer_uint8_vector_field@@Base>:
   3b2c8:	add	r2, r2, #2
   3b2cc:	ldr	ip, [r1, #8]
   3b2d0:	lsl	r2, r2, #1
   3b2d4:	cmp	ip, r2
   3b2d8:	bxle	lr
   3b2dc:	ldr	ip, [r1, #4]
   3b2e0:	ldrh	ip, [ip, r2]
   3b2e4:	cmp	ip, #0
   3b2e8:	bxeq	lr
   3b2ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b2f0:	sub	sp, sp, #12
   3b2f4:	ldr	r5, [r1]
   3b2f8:	adds	lr, r5, ip
   3b2fc:	beq	3b388 <flatcc_json_printer_uint8_vector_field@@Base+0xc0>
   3b300:	ldr	r2, [r1, #16]
   3b304:	cmp	r2, #0
   3b308:	add	r2, r2, #1
   3b30c:	str	r2, [r1, #16]
   3b310:	ldrne	r2, [r0, #20]
   3b314:	movne	r1, #44	; 0x2c
   3b318:	addne	r4, r2, #1
   3b31c:	strne	r4, [r0, #20]
   3b320:	strbne	r1, [r2]
   3b324:	mov	r1, r3
   3b328:	ldr	r3, [r5, ip]
   3b32c:	mov	r4, r0
   3b330:	ldr	r2, [sp, #48]	; 0x30
   3b334:	ldr	sl, [lr, r3]
   3b338:	add	fp, lr, r3
   3b33c:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3b340:	ldr	r3, [r4, #32]
   3b344:	ldr	r2, [r4, #20]
   3b348:	add	r3, r3, #1
   3b34c:	add	r0, r2, #1
   3b350:	mov	r1, #91	; 0x5b
   3b354:	cmp	sl, #0
   3b358:	str	r3, [r4, #32]
   3b35c:	str	r0, [r4, #20]
   3b360:	strb	r1, [r2]
   3b364:	bne	3b390 <flatcc_json_printer_uint8_vector_field@@Base+0xc8>
   3b368:	ldr	r0, [r4, #20]
   3b36c:	ldrb	r3, [r4, #25]
   3b370:	cmp	r3, #0
   3b374:	bne	3b590 <flatcc_json_printer_uint8_vector_field@@Base+0x2c8>
   3b378:	add	r2, r0, #1
   3b37c:	mov	r3, #93	; 0x5d
   3b380:	str	r2, [r4, #20]
   3b384:	strb	r3, [r0]
   3b388:	add	sp, sp, #12
   3b38c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b390:	ldrb	r3, [r4, #25]
   3b394:	cmp	r3, #0
   3b398:	bne	3b5bc <flatcc_json_printer_uint8_vector_field@@Base+0x2f4>
   3b39c:	ldr	r1, [r4, #20]
   3b3a0:	ldr	r2, [r4, #16]
   3b3a4:	cmp	r1, r2
   3b3a8:	bcs	3b5e0 <flatcc_json_printer_uint8_vector_field@@Base+0x318>
   3b3ac:	ldrb	r0, [fp, #4]
   3b3b0:	bl	34c0c <flatcc_json_parser_struct_as_root@@Base+0xe24>
   3b3b4:	ldr	r3, [r4, #20]
   3b3b8:	cmp	sl, #1
   3b3bc:	add	r6, fp, #4
   3b3c0:	add	r0, r3, r0
   3b3c4:	str	r0, [r4, #20]
   3b3c8:	beq	3b36c <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
   3b3cc:	add	r3, sl, #3
   3b3d0:	ldr	r8, [pc, #544]	; 3b5f8 <flatcc_json_printer_uint8_vector_field@@Base+0x330>
   3b3d4:	str	r3, [sp, #4]
   3b3d8:	mov	r7, #0
   3b3dc:	mov	r9, #32
   3b3e0:	b	3b440 <flatcc_json_printer_uint8_vector_field@@Base+0x178>
   3b3e4:	ldr	r2, [pc, #528]	; 3b5fc <flatcc_json_printer_uint8_vector_field@@Base+0x334>
   3b3e8:	strb	r7, [r3, #3]
   3b3ec:	umull	r2, r0, r2, ip
   3b3f0:	mov	r2, #100	; 0x64
   3b3f4:	lsr	r0, r0, #5
   3b3f8:	add	r1, r0, #48	; 0x30
   3b3fc:	mul	r2, r2, r0
   3b400:	mov	r0, #3
   3b404:	sub	r2, ip, r2
   3b408:	uxtb	r2, r2
   3b40c:	ldrb	ip, [r8, r2, lsl #1]
   3b410:	add	r2, r8, r2, lsl #1
   3b414:	strb	ip, [r3, #1]
   3b418:	ldrb	r2, [r2, #1]
   3b41c:	strb	r1, [r3]
   3b420:	strb	r2, [r3, #2]
   3b424:	ldr	r2, [sp, #4]
   3b428:	ldr	r3, [r4, #20]
   3b42c:	sub	r2, r2, r6
   3b430:	add	r0, r3, r0
   3b434:	cmn	fp, r2
   3b438:	str	r0, [r4, #20]
   3b43c:	beq	3b36c <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
   3b440:	add	r3, r0, #1
   3b444:	str	r3, [r4, #20]
   3b448:	mov	r3, #44	; 0x2c
   3b44c:	strb	r3, [r0]
   3b450:	ldrb	r3, [r4, #25]
   3b454:	cmp	r3, #0
   3b458:	ldr	r3, [r4, #20]
   3b45c:	bne	3b4a4 <flatcc_json_printer_uint8_vector_field@@Base+0x1dc>
   3b460:	ldr	r2, [r4, #16]
   3b464:	cmp	r3, r2
   3b468:	bcs	3b4f0 <flatcc_json_printer_uint8_vector_field@@Base+0x228>
   3b46c:	ldrb	ip, [r6, #1]!
   3b470:	cmp	ip, #99	; 0x63
   3b474:	bhi	3b3e4 <flatcc_json_printer_uint8_vector_field@@Base+0x11c>
   3b478:	cmp	ip, #9
   3b47c:	bls	3b560 <flatcc_json_printer_uint8_vector_field@@Base+0x298>
   3b480:	sxth	r2, ip
   3b484:	strb	r7, [r3, #2]
   3b488:	ldrb	r1, [r8, r2, lsl #1]
   3b48c:	add	r2, r8, r2, lsl #1
   3b490:	mov	r0, #2
   3b494:	strb	r1, [r3]
   3b498:	ldrb	r2, [r2, #1]
   3b49c:	strb	r2, [r3, #1]
   3b4a0:	b	3b424 <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
   3b4a4:	add	r2, r3, #1
   3b4a8:	str	r2, [r4, #20]
   3b4ac:	mov	r2, #10
   3b4b0:	strb	r2, [r3]
   3b4b4:	ldrb	r3, [r4, #25]
   3b4b8:	ldr	r2, [r4, #32]
   3b4bc:	ldr	r0, [r4, #20]
   3b4c0:	ldr	sl, [r4, #16]
   3b4c4:	mul	r5, r2, r3
   3b4c8:	add	r2, r0, r5
   3b4cc:	cmp	sl, r2
   3b4d0:	bcc	3b508 <flatcc_json_printer_uint8_vector_field@@Base+0x240>
   3b4d4:	mov	r2, r5
   3b4d8:	mov	r1, r9
   3b4dc:	bl	145c4 <memset@plt>
   3b4e0:	ldr	r2, [r4, #20]
   3b4e4:	add	r3, r2, r5
   3b4e8:	str	r3, [r4, #20]
   3b4ec:	b	3b46c <flatcc_json_printer_uint8_vector_field@@Base+0x1a4>
   3b4f0:	ldr	r3, [r4, #44]	; 0x2c
   3b4f4:	mov	r1, r7
   3b4f8:	mov	r0, r4
   3b4fc:	blx	r3
   3b500:	ldr	r3, [r4, #20]
   3b504:	b	3b46c <flatcc_json_printer_uint8_vector_field@@Base+0x1a4>
   3b508:	cmp	r0, sl
   3b50c:	bcs	3b574 <flatcc_json_printer_uint8_vector_field@@Base+0x2ac>
   3b510:	sub	sl, sl, r0
   3b514:	cmp	r5, sl
   3b518:	bls	3b4d4 <flatcc_json_printer_uint8_vector_field@@Base+0x20c>
   3b51c:	mov	r2, sl
   3b520:	mov	r1, r9
   3b524:	bl	145c4 <memset@plt>
   3b528:	ldr	r3, [r4, #20]
   3b52c:	mov	r0, r4
   3b530:	add	r3, r3, sl
   3b534:	str	r3, [r4, #20]
   3b538:	ldr	r2, [r4, #44]	; 0x2c
   3b53c:	mov	r1, r7
   3b540:	blx	r2
   3b544:	ldr	r0, [r4, #20]
   3b548:	ldr	r3, [r4, #16]
   3b54c:	sub	r5, r5, sl
   3b550:	sub	sl, r3, r0
   3b554:	cmp	r5, sl
   3b558:	bhi	3b51c <flatcc_json_printer_uint8_vector_field@@Base+0x254>
   3b55c:	b	3b4d4 <flatcc_json_printer_uint8_vector_field@@Base+0x20c>
   3b560:	add	r2, ip, #48	; 0x30
   3b564:	mov	r0, #1
   3b568:	strb	r2, [r3]
   3b56c:	strb	r7, [r3, #1]
   3b570:	b	3b424 <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
   3b574:	mov	r0, r4
   3b578:	ldr	r2, [r4, #44]	; 0x2c
   3b57c:	mov	r1, r7
   3b580:	blx	r2
   3b584:	ldr	sl, [r4, #16]
   3b588:	ldr	r0, [r4, #20]
   3b58c:	b	3b510 <flatcc_json_printer_uint8_vector_field@@Base+0x248>
   3b590:	add	r2, r0, #1
   3b594:	mov	r3, #10
   3b598:	str	r2, [r4, #20]
   3b59c:	strb	r3, [r0]
   3b5a0:	ldr	r3, [r4, #32]
   3b5a4:	mov	r0, r4
   3b5a8:	sub	r3, r3, #1
   3b5ac:	str	r3, [r4, #32]
   3b5b0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3b5b4:	ldr	r0, [r4, #20]
   3b5b8:	b	3b378 <flatcc_json_printer_uint8_vector_field@@Base+0xb0>
   3b5bc:	ldr	r3, [r4, #20]
   3b5c0:	mov	r2, #10
   3b5c4:	add	r1, r3, #1
   3b5c8:	str	r1, [r4, #20]
   3b5cc:	mov	r0, r4
   3b5d0:	strb	r2, [r3]
   3b5d4:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3b5d8:	ldr	r1, [r4, #20]
   3b5dc:	b	3b3ac <flatcc_json_printer_uint8_vector_field@@Base+0xe4>
   3b5e0:	mov	r1, r3
   3b5e4:	mov	r0, r4
   3b5e8:	ldr	r3, [r4, #44]	; 0x2c
   3b5ec:	blx	r3
   3b5f0:	ldr	r1, [r4, #20]
   3b5f4:	b	3b3ac <flatcc_json_printer_uint8_vector_field@@Base+0xe4>
   3b5f8:	andeq	r7, r4, r0, asr r4
   3b5fc:	mvnpl	r8, pc, lsl r5

0003b600 <flatcc_json_printer_utype_vector_field@@Base>:
   3b600:	b	3b2c8 <flatcc_json_printer_uint8_vector_field@@Base>

0003b604 <flatcc_json_printer_uint16_vector_field@@Base>:
   3b604:	add	r2, r2, #2
   3b608:	ldr	ip, [r1, #8]
   3b60c:	lsl	r2, r2, #1
   3b610:	cmp	ip, r2
   3b614:	bxle	lr
   3b618:	ldr	ip, [r1, #4]
   3b61c:	ldrh	ip, [ip, r2]
   3b620:	cmp	ip, #0
   3b624:	bxeq	lr
   3b628:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b62c:	ldr	r5, [r1]
   3b630:	adds	lr, r5, ip
   3b634:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b638:	ldr	r2, [r1, #16]
   3b63c:	cmp	r2, #0
   3b640:	add	r2, r2, #1
   3b644:	str	r2, [r1, #16]
   3b648:	ldrne	r2, [r0, #20]
   3b64c:	movne	r1, #44	; 0x2c
   3b650:	addne	r4, r2, #1
   3b654:	strne	r4, [r0, #20]
   3b658:	strbne	r1, [r2]
   3b65c:	mov	r1, r3
   3b660:	ldr	r3, [r5, ip]
   3b664:	mov	r4, r0
   3b668:	ldr	r2, [sp, #40]	; 0x28
   3b66c:	ldr	r6, [lr, r3]
   3b670:	add	r8, lr, r3
   3b674:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3b678:	ldr	r3, [r4, #32]
   3b67c:	ldr	r2, [r4, #20]
   3b680:	add	r3, r3, #1
   3b684:	add	r0, r2, #1
   3b688:	mov	r1, #91	; 0x5b
   3b68c:	cmp	r6, #0
   3b690:	str	r3, [r4, #32]
   3b694:	str	r0, [r4, #20]
   3b698:	strb	r1, [r2]
   3b69c:	bne	3b6c4 <flatcc_json_printer_uint16_vector_field@@Base+0xc0>
   3b6a0:	ldr	r0, [r4, #20]
   3b6a4:	ldrb	r3, [r4, #25]
   3b6a8:	cmp	r3, #0
   3b6ac:	bne	3b964 <flatcc_json_printer_uint16_vector_field@@Base+0x360>
   3b6b0:	add	r2, r0, #1
   3b6b4:	mov	r3, #93	; 0x5d
   3b6b8:	str	r2, [r4, #20]
   3b6bc:	strb	r3, [r0]
   3b6c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6c4:	ldrb	r3, [r4, #25]
   3b6c8:	cmp	r3, #0
   3b6cc:	bne	3b990 <flatcc_json_printer_uint16_vector_field@@Base+0x38c>
   3b6d0:	ldr	r1, [r4, #20]
   3b6d4:	ldr	r2, [r4, #16]
   3b6d8:	cmp	r1, r2
   3b6dc:	bcs	3b9b4 <flatcc_json_printer_uint16_vector_field@@Base+0x3b0>
   3b6e0:	ldrh	r0, [r8, #4]
   3b6e4:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3b6e8:	ldr	r3, [r4, #20]
   3b6ec:	cmp	r6, #1
   3b6f0:	add	r8, r8, #4
   3b6f4:	sub	r6, r6, #2
   3b6f8:	add	r0, r3, r0
   3b6fc:	str	r0, [r4, #20]
   3b700:	beq	3b6a4 <flatcc_json_printer_uint16_vector_field@@Base+0xa0>
   3b704:	mov	r7, #0
   3b708:	ldr	r9, [pc, #700]	; 3b9cc <flatcc_json_printer_uint16_vector_field@@Base+0x3c8>
   3b70c:	b	3b7b4 <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   3b710:	ldr	r1, [pc, #696]	; 3b9d0 <flatcc_json_printer_uint16_vector_field@@Base+0x3cc>
   3b714:	cmp	r3, r1
   3b718:	bls	3b880 <flatcc_json_printer_uint16_vector_field@@Base+0x27c>
   3b71c:	ldr	r1, [pc, #688]	; 3b9d4 <flatcc_json_printer_uint16_vector_field@@Base+0x3d0>
   3b720:	strb	r7, [r2, #5]
   3b724:	add	ip, r2, #3
   3b728:	umull	r1, r0, r1, r3
   3b72c:	mov	r1, #100	; 0x64
   3b730:	lsr	r0, r0, #5
   3b734:	mov	lr, #5
   3b738:	mul	r1, r1, r0
   3b73c:	sub	r1, r3, r1
   3b740:	uxth	r3, r0
   3b744:	uxth	r1, r1
   3b748:	ldrb	r0, [r9, r1, lsl #1]
   3b74c:	add	r1, r9, r1, lsl #1
   3b750:	strb	r0, [r2, #3]
   3b754:	ldrb	r1, [r1, #1]
   3b758:	strb	r1, [r2, #4]
   3b75c:	ldr	r2, [pc, #624]	; 3b9d4 <flatcc_json_printer_uint16_vector_field@@Base+0x3d0>
   3b760:	mov	r1, #100	; 0x64
   3b764:	umull	r2, r0, r2, r3
   3b768:	sub	r2, ip, #2
   3b76c:	lsr	r0, r0, #5
   3b770:	mul	r1, r1, r0
   3b774:	sub	r1, r3, r1
   3b778:	uxth	r3, r0
   3b77c:	uxth	r1, r1
   3b780:	ldrb	r0, [r9, r1, lsl #1]
   3b784:	add	r1, r9, r1, lsl #1
   3b788:	strb	r0, [ip, #-2]
   3b78c:	ldrb	r1, [r1, #1]
   3b790:	strb	r1, [ip, #-1]
   3b794:	add	r3, r3, #48	; 0x30
   3b798:	strb	r3, [r2, #-1]
   3b79c:	ldr	r0, [r4, #20]
   3b7a0:	cmp	r6, #0
   3b7a4:	add	r0, r0, lr
   3b7a8:	sub	r6, r6, #1
   3b7ac:	str	r0, [r4, #20]
   3b7b0:	beq	3b6a4 <flatcc_json_printer_uint16_vector_field@@Base+0xa0>
   3b7b4:	add	r3, r0, #1
   3b7b8:	str	r3, [r4, #20]
   3b7bc:	mov	r3, #44	; 0x2c
   3b7c0:	strb	r3, [r0]
   3b7c4:	ldrb	r3, [r4, #25]
   3b7c8:	cmp	r3, #0
   3b7cc:	bne	3b830 <flatcc_json_printer_uint16_vector_field@@Base+0x22c>
   3b7d0:	ldr	r2, [r4, #20]
   3b7d4:	ldr	r3, [r4, #16]
   3b7d8:	cmp	r2, r3
   3b7dc:	bcs	3b8c4 <flatcc_json_printer_uint16_vector_field@@Base+0x2c0>
   3b7e0:	ldrh	r3, [r8, #2]!
   3b7e4:	ldr	r1, [pc, #492]	; 3b9d8 <flatcc_json_printer_uint16_vector_field@@Base+0x3d4>
   3b7e8:	cmp	r3, r1
   3b7ec:	bhi	3b710 <flatcc_json_printer_uint16_vector_field@@Base+0x10c>
   3b7f0:	cmp	r3, #99	; 0x63
   3b7f4:	strbhi	r7, [r2, #3]
   3b7f8:	addhi	ip, r2, #3
   3b7fc:	movhi	lr, #3
   3b800:	bhi	3b75c <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   3b804:	cmp	r3, #9
   3b808:	strbhi	r7, [r2, #2]
   3b80c:	addhi	r0, r2, #2
   3b810:	movhi	lr, #2
   3b814:	bls	3b938 <flatcc_json_printer_uint16_vector_field@@Base+0x334>
   3b818:	ldrb	r2, [r9, r3, lsl #1]
   3b81c:	add	r3, r9, r3, lsl #1
   3b820:	strb	r2, [r0, #-2]
   3b824:	ldrb	r3, [r3, #1]
   3b828:	strb	r3, [r0, #-1]
   3b82c:	b	3b79c <flatcc_json_printer_uint16_vector_field@@Base+0x198>
   3b830:	ldr	r3, [r4, #20]
   3b834:	mov	r2, #10
   3b838:	add	r1, r3, #1
   3b83c:	str	r1, [r4, #20]
   3b840:	strb	r2, [r3]
   3b844:	ldrb	r3, [r4, #25]
   3b848:	ldr	r2, [r4, #32]
   3b84c:	ldr	r0, [r4, #20]
   3b850:	ldr	r5, [r4, #16]
   3b854:	mul	sl, r2, r3
   3b858:	add	r3, r0, sl
   3b85c:	cmp	r5, r3
   3b860:	bcc	3b8dc <flatcc_json_printer_uint16_vector_field@@Base+0x2d8>
   3b864:	mov	r2, sl
   3b868:	mov	r1, #32
   3b86c:	bl	145c4 <memset@plt>
   3b870:	ldr	r2, [r4, #20]
   3b874:	add	r2, r2, sl
   3b878:	str	r2, [r4, #20]
   3b87c:	b	3b7e0 <flatcc_json_printer_uint16_vector_field@@Base+0x1dc>
   3b880:	ldr	r1, [pc, #332]	; 3b9d4 <flatcc_json_printer_uint16_vector_field@@Base+0x3d0>
   3b884:	strb	r7, [r2, #4]
   3b888:	add	r0, r2, #2
   3b88c:	umull	r1, ip, r1, r3
   3b890:	mov	r1, #100	; 0x64
   3b894:	lsr	ip, ip, #5
   3b898:	mov	lr, #4
   3b89c:	mul	r1, r1, ip
   3b8a0:	sub	r1, r3, r1
   3b8a4:	uxth	r3, ip
   3b8a8:	uxth	r1, r1
   3b8ac:	ldrb	ip, [r9, r1, lsl #1]
   3b8b0:	add	r1, r9, r1, lsl #1
   3b8b4:	strb	ip, [r2, #2]
   3b8b8:	ldrb	r1, [r1, #1]
   3b8bc:	strb	r1, [r2, #3]
   3b8c0:	b	3b818 <flatcc_json_printer_uint16_vector_field@@Base+0x214>
   3b8c4:	ldr	r3, [r4, #44]	; 0x2c
   3b8c8:	mov	r1, r7
   3b8cc:	mov	r0, r4
   3b8d0:	blx	r3
   3b8d4:	ldr	r2, [r4, #20]
   3b8d8:	b	3b7e0 <flatcc_json_printer_uint16_vector_field@@Base+0x1dc>
   3b8dc:	cmp	r0, r5
   3b8e0:	bcs	3b948 <flatcc_json_printer_uint16_vector_field@@Base+0x344>
   3b8e4:	sub	r5, r5, r0
   3b8e8:	cmp	sl, r5
   3b8ec:	bls	3b864 <flatcc_json_printer_uint16_vector_field@@Base+0x260>
   3b8f0:	mov	fp, #32
   3b8f4:	mov	r2, r5
   3b8f8:	mov	r1, fp
   3b8fc:	bl	145c4 <memset@plt>
   3b900:	ldr	r3, [r4, #20]
   3b904:	mov	r0, r4
   3b908:	add	r3, r3, r5
   3b90c:	str	r3, [r4, #20]
   3b910:	ldr	r2, [r4, #44]	; 0x2c
   3b914:	mov	r1, r7
   3b918:	blx	r2
   3b91c:	ldr	r0, [r4, #20]
   3b920:	ldr	r3, [r4, #16]
   3b924:	sub	sl, sl, r5
   3b928:	sub	r5, r3, r0
   3b92c:	cmp	sl, r5
   3b930:	bhi	3b8f4 <flatcc_json_printer_uint16_vector_field@@Base+0x2f0>
   3b934:	b	3b864 <flatcc_json_printer_uint16_vector_field@@Base+0x260>
   3b938:	strb	r7, [r2, #1]
   3b93c:	mov	lr, #1
   3b940:	add	r2, r2, #1
   3b944:	b	3b794 <flatcc_json_printer_uint16_vector_field@@Base+0x190>
   3b948:	mov	r0, r4
   3b94c:	ldr	r3, [r4, #44]	; 0x2c
   3b950:	mov	r1, r7
   3b954:	blx	r3
   3b958:	ldr	r5, [r4, #16]
   3b95c:	ldr	r0, [r4, #20]
   3b960:	b	3b8e4 <flatcc_json_printer_uint16_vector_field@@Base+0x2e0>
   3b964:	add	r2, r0, #1
   3b968:	mov	r3, #10
   3b96c:	str	r2, [r4, #20]
   3b970:	strb	r3, [r0]
   3b974:	ldr	r3, [r4, #32]
   3b978:	mov	r0, r4
   3b97c:	sub	r3, r3, #1
   3b980:	str	r3, [r4, #32]
   3b984:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3b988:	ldr	r0, [r4, #20]
   3b98c:	b	3b6b0 <flatcc_json_printer_uint16_vector_field@@Base+0xac>
   3b990:	ldr	r3, [r4, #20]
   3b994:	mov	r2, #10
   3b998:	add	r1, r3, #1
   3b99c:	str	r1, [r4, #20]
   3b9a0:	mov	r0, r4
   3b9a4:	strb	r2, [r3]
   3b9a8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3b9ac:	ldr	r1, [r4, #20]
   3b9b0:	b	3b6e0 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   3b9b4:	mov	r1, r3
   3b9b8:	mov	r0, r4
   3b9bc:	ldr	r3, [r4, #44]	; 0x2c
   3b9c0:	blx	r3
   3b9c4:	ldr	r1, [r4, #20]
   3b9c8:	b	3b6e0 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   3b9cc:	andeq	r7, r4, r0, asr r4
   3b9d0:	andeq	r2, r0, pc, lsl #14
   3b9d4:	mvnpl	r8, pc, lsl r5
   3b9d8:	andeq	r0, r0, r7, ror #7

0003b9dc <flatcc_json_printer_uint32_vector_field@@Base>:
   3b9dc:	add	r2, r2, #2
   3b9e0:	ldr	ip, [r1, #8]
   3b9e4:	lsl	r2, r2, #1
   3b9e8:	cmp	ip, r2
   3b9ec:	bxle	lr
   3b9f0:	ldr	ip, [r1, #4]
   3b9f4:	ldrh	ip, [ip, r2]
   3b9f8:	cmp	ip, #0
   3b9fc:	bxeq	lr
   3ba00:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba04:	ldr	lr, [r1]
   3ba08:	adds	r5, lr, ip
   3ba0c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba10:	ldr	r2, [r1, #16]
   3ba14:	cmp	r2, #0
   3ba18:	add	r2, r2, #1
   3ba1c:	str	r2, [r1, #16]
   3ba20:	ldrne	r2, [r0, #20]
   3ba24:	movne	r1, #44	; 0x2c
   3ba28:	addne	r4, r2, #1
   3ba2c:	strne	r4, [r0, #20]
   3ba30:	strbne	r1, [r2]
   3ba34:	mov	r1, r3
   3ba38:	ldr	r3, [lr, ip]
   3ba3c:	mov	r4, r0
   3ba40:	ldr	r2, [sp, #40]	; 0x28
   3ba44:	ldr	r6, [r5, r3]
   3ba48:	add	r7, r5, r3
   3ba4c:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3ba50:	ldr	r3, [r4, #32]
   3ba54:	ldr	r2, [r4, #20]
   3ba58:	add	r3, r3, #1
   3ba5c:	add	r0, r2, #1
   3ba60:	mov	r1, #91	; 0x5b
   3ba64:	cmp	r6, #0
   3ba68:	str	r3, [r4, #32]
   3ba6c:	str	r0, [r4, #20]
   3ba70:	strb	r1, [r2]
   3ba74:	bne	3ba9c <flatcc_json_printer_uint32_vector_field@@Base+0xc0>
   3ba78:	ldr	r0, [r4, #20]
   3ba7c:	ldrb	r3, [r4, #25]
   3ba80:	cmp	r3, #0
   3ba84:	bne	3bc10 <flatcc_json_printer_uint32_vector_field@@Base+0x234>
   3ba88:	add	r2, r0, #1
   3ba8c:	mov	r3, #93	; 0x5d
   3ba90:	str	r2, [r4, #20]
   3ba94:	strb	r3, [r0]
   3ba98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba9c:	ldrb	r3, [r4, #25]
   3baa0:	cmp	r3, #0
   3baa4:	bne	3bc3c <flatcc_json_printer_uint32_vector_field@@Base+0x260>
   3baa8:	ldr	r1, [r4, #20]
   3baac:	ldr	r2, [r4, #16]
   3bab0:	cmp	r1, r2
   3bab4:	bcs	3bc60 <flatcc_json_printer_uint32_vector_field@@Base+0x284>
   3bab8:	ldr	r0, [r7, #4]
   3babc:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3bac0:	ldr	r3, [r4, #20]
   3bac4:	cmp	r6, #1
   3bac8:	add	r7, r7, #8
   3bacc:	sub	r6, r6, #2
   3bad0:	add	r0, r3, r0
   3bad4:	str	r0, [r4, #20]
   3bad8:	beq	3ba7c <flatcc_json_printer_uint32_vector_field@@Base+0xa0>
   3badc:	mov	sl, #44	; 0x2c
   3bae0:	mov	r9, #0
   3bae4:	mov	r8, #32
   3bae8:	b	3bb1c <flatcc_json_printer_uint32_vector_field@@Base+0x140>
   3baec:	ldr	r1, [r4, #20]
   3baf0:	ldr	r3, [r4, #16]
   3baf4:	cmp	r1, r3
   3baf8:	bcs	3bb84 <flatcc_json_printer_uint32_vector_field@@Base+0x1a8>
   3bafc:	ldr	r0, [r7], #4
   3bb00:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3bb04:	ldr	r3, [r4, #20]
   3bb08:	cmp	r6, #0
   3bb0c:	sub	r6, r6, #1
   3bb10:	add	r0, r3, r0
   3bb14:	str	r0, [r4, #20]
   3bb18:	beq	3ba7c <flatcc_json_printer_uint32_vector_field@@Base+0xa0>
   3bb1c:	add	r3, r0, #1
   3bb20:	str	r3, [r4, #20]
   3bb24:	strb	sl, [r0]
   3bb28:	ldrb	r3, [r4, #25]
   3bb2c:	cmp	r3, #0
   3bb30:	beq	3baec <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   3bb34:	ldr	r3, [r4, #20]
   3bb38:	add	r2, r3, #1
   3bb3c:	str	r2, [r4, #20]
   3bb40:	mov	r2, #10
   3bb44:	strb	r2, [r3]
   3bb48:	ldrb	r1, [r4, #25]
   3bb4c:	ldr	r5, [r4, #32]
   3bb50:	ldr	r0, [r4, #20]
   3bb54:	ldr	r3, [r4, #16]
   3bb58:	mul	r5, r5, r1
   3bb5c:	add	r2, r0, r5
   3bb60:	cmp	r3, r2
   3bb64:	bcc	3bb9c <flatcc_json_printer_uint32_vector_field@@Base+0x1c0>
   3bb68:	mov	r1, r8
   3bb6c:	mov	r2, r5
   3bb70:	bl	145c4 <memset@plt>
   3bb74:	ldr	r1, [r4, #20]
   3bb78:	add	r1, r1, r5
   3bb7c:	str	r1, [r4, #20]
   3bb80:	b	3bafc <flatcc_json_printer_uint32_vector_field@@Base+0x120>
   3bb84:	mov	r1, r9
   3bb88:	ldr	r3, [r4, #44]	; 0x2c
   3bb8c:	mov	r0, r4
   3bb90:	blx	r3
   3bb94:	ldr	r1, [r4, #20]
   3bb98:	b	3bafc <flatcc_json_printer_uint32_vector_field@@Base+0x120>
   3bb9c:	cmp	r0, r3
   3bba0:	bcs	3bbf4 <flatcc_json_printer_uint32_vector_field@@Base+0x218>
   3bba4:	sub	fp, r3, r0
   3bba8:	cmp	r5, fp
   3bbac:	bls	3bb68 <flatcc_json_printer_uint32_vector_field@@Base+0x18c>
   3bbb0:	mov	r2, fp
   3bbb4:	mov	r1, r8
   3bbb8:	bl	145c4 <memset@plt>
   3bbbc:	ldr	r1, [r4, #20]
   3bbc0:	ldr	r2, [r4, #44]	; 0x2c
   3bbc4:	add	r1, r1, fp
   3bbc8:	str	r1, [r4, #20]
   3bbcc:	mov	r0, r4
   3bbd0:	mov	r1, r9
   3bbd4:	blx	r2
   3bbd8:	ldr	r0, [r4, #20]
   3bbdc:	ldr	r2, [r4, #16]
   3bbe0:	sub	r5, r5, fp
   3bbe4:	sub	fp, r2, r0
   3bbe8:	cmp	r5, fp
   3bbec:	bhi	3bbb0 <flatcc_json_printer_uint32_vector_field@@Base+0x1d4>
   3bbf0:	b	3bb68 <flatcc_json_printer_uint32_vector_field@@Base+0x18c>
   3bbf4:	ldr	r3, [r4, #44]	; 0x2c
   3bbf8:	mov	r0, r4
   3bbfc:	mov	r1, r9
   3bc00:	blx	r3
   3bc04:	ldr	r3, [r4, #16]
   3bc08:	ldr	r0, [r4, #20]
   3bc0c:	b	3bba4 <flatcc_json_printer_uint32_vector_field@@Base+0x1c8>
   3bc10:	add	r2, r0, #1
   3bc14:	mov	r3, #10
   3bc18:	str	r2, [r4, #20]
   3bc1c:	strb	r3, [r0]
   3bc20:	ldr	r3, [r4, #32]
   3bc24:	mov	r0, r4
   3bc28:	sub	r3, r3, #1
   3bc2c:	str	r3, [r4, #32]
   3bc30:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3bc34:	ldr	r0, [r4, #20]
   3bc38:	b	3ba88 <flatcc_json_printer_uint32_vector_field@@Base+0xac>
   3bc3c:	ldr	r3, [r4, #20]
   3bc40:	mov	r2, #10
   3bc44:	add	r1, r3, #1
   3bc48:	str	r1, [r4, #20]
   3bc4c:	mov	r0, r4
   3bc50:	strb	r2, [r3]
   3bc54:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3bc58:	ldr	r1, [r4, #20]
   3bc5c:	b	3bab8 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   3bc60:	mov	r1, r3
   3bc64:	mov	r0, r4
   3bc68:	ldr	r3, [r4, #44]	; 0x2c
   3bc6c:	blx	r3
   3bc70:	ldr	r1, [r4, #20]
   3bc74:	b	3bab8 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>

0003bc78 <flatcc_json_printer_uint64_vector_field@@Base>:
   3bc78:	add	r2, r2, #2
   3bc7c:	ldr	ip, [r1, #8]
   3bc80:	lsl	r2, r2, #1
   3bc84:	cmp	ip, r2
   3bc88:	bxle	lr
   3bc8c:	ldr	ip, [r1, #4]
   3bc90:	ldrh	ip, [ip, r2]
   3bc94:	cmp	ip, #0
   3bc98:	bxeq	lr
   3bc9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bca0:	ldr	lr, [r1]
   3bca4:	adds	r5, lr, ip
   3bca8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bcac:	ldr	r2, [r1, #16]
   3bcb0:	cmp	r2, #0
   3bcb4:	add	r2, r2, #1
   3bcb8:	str	r2, [r1, #16]
   3bcbc:	ldrne	r2, [r0, #20]
   3bcc0:	movne	r1, #44	; 0x2c
   3bcc4:	addne	r4, r2, #1
   3bcc8:	strne	r4, [r0, #20]
   3bccc:	strbne	r1, [r2]
   3bcd0:	mov	r1, r3
   3bcd4:	ldr	r3, [lr, ip]
   3bcd8:	mov	r4, r0
   3bcdc:	ldr	r2, [sp, #40]	; 0x28
   3bce0:	ldr	r6, [r5, r3]
   3bce4:	add	r7, r5, r3
   3bce8:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3bcec:	ldr	r3, [r4, #32]
   3bcf0:	ldr	r2, [r4, #20]
   3bcf4:	add	r3, r3, #1
   3bcf8:	add	r0, r2, #1
   3bcfc:	mov	r1, #91	; 0x5b
   3bd00:	cmp	r6, #0
   3bd04:	str	r3, [r4, #32]
   3bd08:	str	r0, [r4, #20]
   3bd0c:	strb	r1, [r2]
   3bd10:	bne	3bd38 <flatcc_json_printer_uint64_vector_field@@Base+0xc0>
   3bd14:	ldr	r0, [r4, #20]
   3bd18:	ldrb	r3, [r4, #25]
   3bd1c:	cmp	r3, #0
   3bd20:	bne	3beac <flatcc_json_printer_uint64_vector_field@@Base+0x234>
   3bd24:	add	r2, r0, #1
   3bd28:	mov	r3, #93	; 0x5d
   3bd2c:	str	r2, [r4, #20]
   3bd30:	strb	r3, [r0]
   3bd34:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bd38:	ldrb	r1, [r4, #25]
   3bd3c:	cmp	r1, #0
   3bd40:	bne	3bed8 <flatcc_json_printer_uint64_vector_field@@Base+0x260>
   3bd44:	ldr	r2, [r4, #20]
   3bd48:	ldr	r3, [r4, #16]
   3bd4c:	cmp	r2, r3
   3bd50:	bcs	3befc <flatcc_json_printer_uint64_vector_field@@Base+0x284>
   3bd54:	ldrd	r0, [r7, #4]
   3bd58:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   3bd5c:	ldr	r3, [r4, #20]
   3bd60:	cmp	r6, #1
   3bd64:	add	r7, r7, #12
   3bd68:	sub	r6, r6, #2
   3bd6c:	add	r0, r3, r0
   3bd70:	str	r0, [r4, #20]
   3bd74:	beq	3bd18 <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   3bd78:	mov	sl, #44	; 0x2c
   3bd7c:	mov	r9, #0
   3bd80:	mov	r8, #32
   3bd84:	b	3bdb8 <flatcc_json_printer_uint64_vector_field@@Base+0x140>
   3bd88:	ldr	r2, [r4, #20]
   3bd8c:	ldr	r3, [r4, #16]
   3bd90:	cmp	r2, r3
   3bd94:	bcs	3be20 <flatcc_json_printer_uint64_vector_field@@Base+0x1a8>
   3bd98:	ldrd	r0, [r7], #8
   3bd9c:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   3bda0:	ldr	r3, [r4, #20]
   3bda4:	cmp	r6, #0
   3bda8:	sub	r6, r6, #1
   3bdac:	add	r0, r3, r0
   3bdb0:	str	r0, [r4, #20]
   3bdb4:	beq	3bd18 <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   3bdb8:	add	r3, r0, #1
   3bdbc:	str	r3, [r4, #20]
   3bdc0:	strb	sl, [r0]
   3bdc4:	ldrb	r3, [r4, #25]
   3bdc8:	cmp	r3, #0
   3bdcc:	beq	3bd88 <flatcc_json_printer_uint64_vector_field@@Base+0x110>
   3bdd0:	ldr	r3, [r4, #20]
   3bdd4:	add	r2, r3, #1
   3bdd8:	str	r2, [r4, #20]
   3bddc:	mov	r2, #10
   3bde0:	strb	r2, [r3]
   3bde4:	ldrb	r2, [r4, #25]
   3bde8:	ldr	r5, [r4, #32]
   3bdec:	ldr	r0, [r4, #20]
   3bdf0:	ldr	r3, [r4, #16]
   3bdf4:	mul	r5, r5, r2
   3bdf8:	add	r2, r0, r5
   3bdfc:	cmp	r3, r2
   3be00:	bcc	3be38 <flatcc_json_printer_uint64_vector_field@@Base+0x1c0>
   3be04:	mov	r2, r5
   3be08:	mov	r1, r8
   3be0c:	bl	145c4 <memset@plt>
   3be10:	ldr	r2, [r4, #20]
   3be14:	add	r2, r2, r5
   3be18:	str	r2, [r4, #20]
   3be1c:	b	3bd98 <flatcc_json_printer_uint64_vector_field@@Base+0x120>
   3be20:	ldr	r3, [r4, #44]	; 0x2c
   3be24:	mov	r1, r9
   3be28:	mov	r0, r4
   3be2c:	blx	r3
   3be30:	ldr	r2, [r4, #20]
   3be34:	b	3bd98 <flatcc_json_printer_uint64_vector_field@@Base+0x120>
   3be38:	cmp	r0, r3
   3be3c:	bcs	3be90 <flatcc_json_printer_uint64_vector_field@@Base+0x218>
   3be40:	sub	fp, r3, r0
   3be44:	cmp	r5, fp
   3be48:	bls	3be04 <flatcc_json_printer_uint64_vector_field@@Base+0x18c>
   3be4c:	mov	r2, fp
   3be50:	mov	r1, r8
   3be54:	bl	145c4 <memset@plt>
   3be58:	ldr	r1, [r4, #20]
   3be5c:	ldr	r2, [r4, #44]	; 0x2c
   3be60:	add	r1, r1, fp
   3be64:	str	r1, [r4, #20]
   3be68:	mov	r0, r4
   3be6c:	mov	r1, r9
   3be70:	blx	r2
   3be74:	ldr	r0, [r4, #20]
   3be78:	ldr	r2, [r4, #16]
   3be7c:	sub	r5, r5, fp
   3be80:	sub	fp, r2, r0
   3be84:	cmp	r5, fp
   3be88:	bhi	3be4c <flatcc_json_printer_uint64_vector_field@@Base+0x1d4>
   3be8c:	b	3be04 <flatcc_json_printer_uint64_vector_field@@Base+0x18c>
   3be90:	ldr	r3, [r4, #44]	; 0x2c
   3be94:	mov	r0, r4
   3be98:	mov	r1, r9
   3be9c:	blx	r3
   3bea0:	ldr	r3, [r4, #16]
   3bea4:	ldr	r0, [r4, #20]
   3bea8:	b	3be40 <flatcc_json_printer_uint64_vector_field@@Base+0x1c8>
   3beac:	add	r2, r0, #1
   3beb0:	mov	r3, #10
   3beb4:	str	r2, [r4, #20]
   3beb8:	strb	r3, [r0]
   3bebc:	ldr	r3, [r4, #32]
   3bec0:	mov	r0, r4
   3bec4:	sub	r3, r3, #1
   3bec8:	str	r3, [r4, #32]
   3becc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3bed0:	ldr	r0, [r4, #20]
   3bed4:	b	3bd24 <flatcc_json_printer_uint64_vector_field@@Base+0xac>
   3bed8:	ldr	r3, [r4, #20]
   3bedc:	mov	r2, #10
   3bee0:	add	r1, r3, #1
   3bee4:	str	r1, [r4, #20]
   3bee8:	mov	r0, r4
   3beec:	strb	r2, [r3]
   3bef0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3bef4:	ldr	r2, [r4, #20]
   3bef8:	b	3bd54 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3befc:	ldr	r3, [r4, #44]	; 0x2c
   3bf00:	mov	r0, r4
   3bf04:	blx	r3
   3bf08:	ldr	r2, [r4, #20]
   3bf0c:	b	3bd54 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>

0003bf10 <flatcc_json_printer_int8_vector_field@@Base>:
   3bf10:	add	r2, r2, #2
   3bf14:	ldr	ip, [r1, #8]
   3bf18:	lsl	r2, r2, #1
   3bf1c:	cmp	ip, r2
   3bf20:	bxle	lr
   3bf24:	ldr	ip, [r1, #4]
   3bf28:	ldrh	ip, [ip, r2]
   3bf2c:	cmp	ip, #0
   3bf30:	bxeq	lr
   3bf34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bf38:	sub	sp, sp, #12
   3bf3c:	ldr	r5, [r1]
   3bf40:	adds	lr, r5, ip
   3bf44:	beq	3bfd0 <flatcc_json_printer_int8_vector_field@@Base+0xc0>
   3bf48:	ldr	r2, [r1, #16]
   3bf4c:	cmp	r2, #0
   3bf50:	add	r2, r2, #1
   3bf54:	str	r2, [r1, #16]
   3bf58:	ldrne	r2, [r0, #20]
   3bf5c:	movne	r1, #44	; 0x2c
   3bf60:	addne	r4, r2, #1
   3bf64:	strne	r4, [r0, #20]
   3bf68:	strbne	r1, [r2]
   3bf6c:	mov	r1, r3
   3bf70:	ldr	r3, [r5, ip]
   3bf74:	mov	r4, r0
   3bf78:	ldr	r2, [sp, #48]	; 0x30
   3bf7c:	ldr	sl, [lr, r3]
   3bf80:	add	fp, lr, r3
   3bf84:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3bf88:	ldr	r3, [r4, #32]
   3bf8c:	ldr	r2, [r4, #20]
   3bf90:	add	r3, r3, #1
   3bf94:	add	r0, r2, #1
   3bf98:	mov	r1, #91	; 0x5b
   3bf9c:	cmp	sl, #0
   3bfa0:	str	r3, [r4, #32]
   3bfa4:	str	r0, [r4, #20]
   3bfa8:	strb	r1, [r2]
   3bfac:	bne	3bfd8 <flatcc_json_printer_int8_vector_field@@Base+0xc8>
   3bfb0:	ldr	r2, [r4, #20]
   3bfb4:	ldrb	r3, [r4, #25]
   3bfb8:	cmp	r3, #0
   3bfbc:	bne	3c220 <flatcc_json_printer_int8_vector_field@@Base+0x310>
   3bfc0:	add	r1, r2, #1
   3bfc4:	mov	r3, #93	; 0x5d
   3bfc8:	str	r1, [r4, #20]
   3bfcc:	strb	r3, [r2]
   3bfd0:	add	sp, sp, #12
   3bfd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bfd8:	ldrb	r3, [r4, #25]
   3bfdc:	cmp	r3, #0
   3bfe0:	bne	3c24c <flatcc_json_printer_int8_vector_field@@Base+0x33c>
   3bfe4:	ldr	r1, [r4, #20]
   3bfe8:	ldr	r2, [r4, #16]
   3bfec:	cmp	r1, r2
   3bff0:	bcs	3c270 <flatcc_json_printer_int8_vector_field@@Base+0x360>
   3bff4:	ldrsb	r0, [fp, #4]
   3bff8:	add	r6, fp, #4
   3bffc:	cmp	r0, #0
   3c000:	lsr	r5, r0, #31
   3c004:	rsblt	r0, r0, #0
   3c008:	movlt	r3, #45	; 0x2d
   3c00c:	sxtblt	r0, r0
   3c010:	strblt	r3, [r1]
   3c014:	uxtb	r0, r0
   3c018:	addlt	r1, r1, #1
   3c01c:	bl	34c0c <flatcc_json_parser_struct_as_root@@Base+0xe24>
   3c020:	ldr	r2, [r4, #20]
   3c024:	cmp	sl, #1
   3c028:	add	r0, r5, r0
   3c02c:	add	r2, r2, r0
   3c030:	str	r2, [r4, #20]
   3c034:	beq	3bfb4 <flatcc_json_printer_int8_vector_field@@Base+0xa4>
   3c038:	add	r3, sl, #3
   3c03c:	ldr	r8, [pc, #580]	; 3c288 <flatcc_json_printer_int8_vector_field@@Base+0x378>
   3c040:	str	r3, [sp, #4]
   3c044:	mov	r7, #0
   3c048:	mov	r9, #32
   3c04c:	b	3c0b0 <flatcc_json_printer_int8_vector_field@@Base+0x1a0>
   3c050:	ldr	r2, [pc, #564]	; 3c28c <flatcc_json_printer_int8_vector_field@@Base+0x37c>
   3c054:	strb	r7, [r3, #3]
   3c058:	mov	ip, #49	; 0x31
   3c05c:	umull	r2, r0, r2, lr
   3c060:	mov	r2, #100	; 0x64
   3c064:	lsr	r0, r0, #5
   3c068:	mul	r2, r2, r0
   3c06c:	mov	r0, #3
   3c070:	sub	r2, lr, r2
   3c074:	uxtb	r2, r2
   3c078:	ldrb	lr, [r8, r2, lsl #1]
   3c07c:	add	r2, r8, r2, lsl #1
   3c080:	strb	lr, [r3, #1]
   3c084:	ldrb	r2, [r2, #1]
   3c088:	strb	ip, [r3]
   3c08c:	strb	r2, [r3, #2]
   3c090:	ldr	r3, [sp, #4]
   3c094:	ldr	r2, [r4, #20]
   3c098:	add	r1, r1, r0
   3c09c:	sub	r3, r3, r6
   3c0a0:	add	r2, r2, r1
   3c0a4:	cmn	fp, r3
   3c0a8:	str	r2, [r4, #20]
   3c0ac:	beq	3bfb4 <flatcc_json_printer_int8_vector_field@@Base+0xa4>
   3c0b0:	add	r3, r2, #1
   3c0b4:	str	r3, [r4, #20]
   3c0b8:	mov	r3, #44	; 0x2c
   3c0bc:	strb	r3, [r2]
   3c0c0:	ldrb	r3, [r4, #25]
   3c0c4:	cmp	r3, #0
   3c0c8:	ldr	r3, [r4, #20]
   3c0cc:	bne	3c134 <flatcc_json_printer_int8_vector_field@@Base+0x224>
   3c0d0:	ldr	r2, [r4, #16]
   3c0d4:	cmp	r3, r2
   3c0d8:	bcs	3c180 <flatcc_json_printer_int8_vector_field@@Base+0x270>
   3c0dc:	ldrsb	r2, [r6, #1]!
   3c0e0:	cmp	r2, #0
   3c0e4:	lsr	r1, r2, #31
   3c0e8:	rsblt	r2, r2, #0
   3c0ec:	movlt	r0, #45	; 0x2d
   3c0f0:	sxtblt	r2, r2
   3c0f4:	strblt	r0, [r3]
   3c0f8:	uxtb	lr, r2
   3c0fc:	addlt	r3, r3, #1
   3c100:	cmp	lr, #99	; 0x63
   3c104:	bhi	3c050 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   3c108:	cmp	lr, #9
   3c10c:	bls	3c1f0 <flatcc_json_printer_int8_vector_field@@Base+0x2e0>
   3c110:	sxth	r2, lr
   3c114:	strb	r7, [r3, #2]
   3c118:	ldrb	ip, [r8, r2, lsl #1]
   3c11c:	add	r2, r8, r2, lsl #1
   3c120:	mov	r0, #2
   3c124:	strb	ip, [r3]
   3c128:	ldrb	r2, [r2, #1]
   3c12c:	strb	r2, [r3, #1]
   3c130:	b	3c090 <flatcc_json_printer_int8_vector_field@@Base+0x180>
   3c134:	add	r2, r3, #1
   3c138:	str	r2, [r4, #20]
   3c13c:	mov	r2, #10
   3c140:	strb	r2, [r3]
   3c144:	ldrb	r3, [r4, #25]
   3c148:	ldr	r2, [r4, #32]
   3c14c:	ldr	r0, [r4, #20]
   3c150:	ldr	sl, [r4, #16]
   3c154:	mul	r5, r2, r3
   3c158:	add	r2, r0, r5
   3c15c:	cmp	sl, r2
   3c160:	bcc	3c198 <flatcc_json_printer_int8_vector_field@@Base+0x288>
   3c164:	mov	r2, r5
   3c168:	mov	r1, r9
   3c16c:	bl	145c4 <memset@plt>
   3c170:	ldr	r2, [r4, #20]
   3c174:	add	r3, r2, r5
   3c178:	str	r3, [r4, #20]
   3c17c:	b	3c0dc <flatcc_json_printer_int8_vector_field@@Base+0x1cc>
   3c180:	ldr	r3, [r4, #44]	; 0x2c
   3c184:	mov	r1, r7
   3c188:	mov	r0, r4
   3c18c:	blx	r3
   3c190:	ldr	r3, [r4, #20]
   3c194:	b	3c0dc <flatcc_json_printer_int8_vector_field@@Base+0x1cc>
   3c198:	cmp	r0, sl
   3c19c:	bcs	3c204 <flatcc_json_printer_int8_vector_field@@Base+0x2f4>
   3c1a0:	sub	sl, sl, r0
   3c1a4:	cmp	r5, sl
   3c1a8:	bls	3c164 <flatcc_json_printer_int8_vector_field@@Base+0x254>
   3c1ac:	mov	r2, sl
   3c1b0:	mov	r1, r9
   3c1b4:	bl	145c4 <memset@plt>
   3c1b8:	ldr	r3, [r4, #20]
   3c1bc:	mov	r0, r4
   3c1c0:	add	r3, r3, sl
   3c1c4:	str	r3, [r4, #20]
   3c1c8:	ldr	r2, [r4, #44]	; 0x2c
   3c1cc:	mov	r1, r7
   3c1d0:	blx	r2
   3c1d4:	ldr	r0, [r4, #20]
   3c1d8:	ldr	r3, [r4, #16]
   3c1dc:	sub	r5, r5, sl
   3c1e0:	sub	sl, r3, r0
   3c1e4:	cmp	r5, sl
   3c1e8:	bhi	3c1ac <flatcc_json_printer_int8_vector_field@@Base+0x29c>
   3c1ec:	b	3c164 <flatcc_json_printer_int8_vector_field@@Base+0x254>
   3c1f0:	add	r2, lr, #48	; 0x30
   3c1f4:	mov	r0, #1
   3c1f8:	strb	r2, [r3]
   3c1fc:	strb	r7, [r3, #1]
   3c200:	b	3c090 <flatcc_json_printer_int8_vector_field@@Base+0x180>
   3c204:	mov	r0, r4
   3c208:	ldr	r2, [r4, #44]	; 0x2c
   3c20c:	mov	r1, r7
   3c210:	blx	r2
   3c214:	ldr	sl, [r4, #16]
   3c218:	ldr	r0, [r4, #20]
   3c21c:	b	3c1a0 <flatcc_json_printer_int8_vector_field@@Base+0x290>
   3c220:	add	r1, r2, #1
   3c224:	mov	r3, #10
   3c228:	str	r1, [r4, #20]
   3c22c:	strb	r3, [r2]
   3c230:	ldr	r3, [r4, #32]
   3c234:	mov	r0, r4
   3c238:	sub	r3, r3, #1
   3c23c:	str	r3, [r4, #32]
   3c240:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3c244:	ldr	r2, [r4, #20]
   3c248:	b	3bfc0 <flatcc_json_printer_int8_vector_field@@Base+0xb0>
   3c24c:	ldr	r3, [r4, #20]
   3c250:	mov	r2, #10
   3c254:	add	r1, r3, #1
   3c258:	str	r1, [r4, #20]
   3c25c:	mov	r0, r4
   3c260:	strb	r2, [r3]
   3c264:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3c268:	ldr	r1, [r4, #20]
   3c26c:	b	3bff4 <flatcc_json_printer_int8_vector_field@@Base+0xe4>
   3c270:	mov	r1, r3
   3c274:	mov	r0, r4
   3c278:	ldr	r3, [r4, #44]	; 0x2c
   3c27c:	blx	r3
   3c280:	ldr	r1, [r4, #20]
   3c284:	b	3bff4 <flatcc_json_printer_int8_vector_field@@Base+0xe4>
   3c288:	andeq	r7, r4, r0, asr r4
   3c28c:	mvnpl	r8, pc, lsl r5

0003c290 <flatcc_json_printer_int16_vector_field@@Base>:
   3c290:	add	r2, r2, #2
   3c294:	ldr	ip, [r1, #8]
   3c298:	lsl	r2, r2, #1
   3c29c:	cmp	ip, r2
   3c2a0:	bxle	lr
   3c2a4:	ldr	ip, [r1, #4]
   3c2a8:	ldrh	ip, [ip, r2]
   3c2ac:	cmp	ip, #0
   3c2b0:	bxeq	lr
   3c2b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c2b8:	ldr	r5, [r1]
   3c2bc:	adds	lr, r5, ip
   3c2c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c2c4:	ldr	r2, [r1, #16]
   3c2c8:	cmp	r2, #0
   3c2cc:	add	r2, r2, #1
   3c2d0:	str	r2, [r1, #16]
   3c2d4:	ldrne	r2, [r0, #20]
   3c2d8:	movne	r1, #44	; 0x2c
   3c2dc:	addne	r4, r2, #1
   3c2e0:	strne	r4, [r0, #20]
   3c2e4:	strbne	r1, [r2]
   3c2e8:	mov	r1, r3
   3c2ec:	ldr	r3, [r5, ip]
   3c2f0:	mov	r4, r0
   3c2f4:	ldr	r2, [sp, #40]	; 0x28
   3c2f8:	ldr	r6, [lr, r3]
   3c2fc:	add	r8, lr, r3
   3c300:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3c304:	ldr	r3, [r4, #32]
   3c308:	ldr	r2, [r4, #20]
   3c30c:	add	r3, r3, #1
   3c310:	add	r0, r2, #1
   3c314:	mov	r1, #91	; 0x5b
   3c318:	cmp	r6, #0
   3c31c:	str	r3, [r4, #32]
   3c320:	str	r0, [r4, #20]
   3c324:	strb	r1, [r2]
   3c328:	bne	3c350 <flatcc_json_printer_int16_vector_field@@Base+0xc0>
   3c32c:	ldr	r2, [r4, #20]
   3c330:	ldrb	r3, [r4, #25]
   3c334:	cmp	r3, #0
   3c338:	bne	3c638 <flatcc_json_printer_int16_vector_field@@Base+0x3a8>
   3c33c:	add	r1, r2, #1
   3c340:	mov	r3, #93	; 0x5d
   3c344:	str	r1, [r4, #20]
   3c348:	strb	r3, [r2]
   3c34c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c350:	ldrb	r3, [r4, #25]
   3c354:	cmp	r3, #0
   3c358:	bne	3c664 <flatcc_json_printer_int16_vector_field@@Base+0x3d4>
   3c35c:	ldr	r1, [r4, #20]
   3c360:	ldr	r2, [r4, #16]
   3c364:	cmp	r1, r2
   3c368:	bcs	3c688 <flatcc_json_printer_int16_vector_field@@Base+0x3f8>
   3c36c:	ldrsh	r0, [r8, #4]
   3c370:	add	r8, r8, #4
   3c374:	cmp	r0, #0
   3c378:	lsr	r5, r0, #31
   3c37c:	rsblt	r0, r0, #0
   3c380:	movlt	r3, #45	; 0x2d
   3c384:	sxthlt	r0, r0
   3c388:	strblt	r3, [r1]
   3c38c:	uxth	r0, r0
   3c390:	addlt	r1, r1, #1
   3c394:	bl	33ec0 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3c398:	ldr	r2, [r4, #20]
   3c39c:	cmp	r6, #1
   3c3a0:	sub	r6, r6, #2
   3c3a4:	add	r0, r5, r0
   3c3a8:	add	r2, r2, r0
   3c3ac:	str	r2, [r4, #20]
   3c3b0:	beq	3c330 <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   3c3b4:	mov	r7, #0
   3c3b8:	ldr	r9, [pc, #736]	; 3c6a0 <flatcc_json_printer_int16_vector_field@@Base+0x410>
   3c3bc:	b	3c468 <flatcc_json_printer_int16_vector_field@@Base+0x1d8>
   3c3c0:	ldr	r2, [pc, #732]	; 3c6a4 <flatcc_json_printer_int16_vector_field@@Base+0x414>
   3c3c4:	cmp	r3, r2
   3c3c8:	bls	3c554 <flatcc_json_printer_int16_vector_field@@Base+0x2c4>
   3c3cc:	ldr	r2, [pc, #724]	; 3c6a8 <flatcc_json_printer_int16_vector_field@@Base+0x418>
   3c3d0:	strb	r7, [r1, #5]
   3c3d4:	add	ip, r1, #3
   3c3d8:	umull	r2, r0, r2, r3
   3c3dc:	mov	r2, #100	; 0x64
   3c3e0:	lsr	r0, r0, #5
   3c3e4:	mul	r2, r2, r0
   3c3e8:	sub	r2, r3, r2
   3c3ec:	uxth	r3, r0
   3c3f0:	uxth	r2, r2
   3c3f4:	ldrb	r0, [r9, r2, lsl #1]
   3c3f8:	add	r2, r9, r2, lsl #1
   3c3fc:	strb	r0, [r1, #3]
   3c400:	ldrb	r2, [r2, #1]
   3c404:	mov	r0, #5
   3c408:	strb	r2, [r1, #4]
   3c40c:	ldr	r2, [pc, #660]	; 3c6a8 <flatcc_json_printer_int16_vector_field@@Base+0x418>
   3c410:	sub	r1, ip, #2
   3c414:	umull	r2, r5, r2, r3
   3c418:	mov	r2, #100	; 0x64
   3c41c:	lsr	r5, r5, #5
   3c420:	mul	r2, r2, r5
   3c424:	sub	r2, r3, r2
   3c428:	uxth	r3, r5
   3c42c:	uxth	r2, r2
   3c430:	ldrb	r5, [r9, r2, lsl #1]
   3c434:	add	r2, r9, r2, lsl #1
   3c438:	strb	r5, [ip, #-2]
   3c43c:	ldrb	r2, [r2, #1]
   3c440:	strb	r2, [ip, #-1]
   3c444:	add	r3, r3, #48	; 0x30
   3c448:	strb	r3, [r1, #-1]
   3c44c:	ldr	r2, [r4, #20]
   3c450:	add	r0, lr, r0
   3c454:	cmp	r6, #0
   3c458:	add	r2, r2, r0
   3c45c:	sub	r6, r6, #1
   3c460:	str	r2, [r4, #20]
   3c464:	beq	3c330 <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   3c468:	add	r3, r2, #1
   3c46c:	str	r3, [r4, #20]
   3c470:	mov	r3, #44	; 0x2c
   3c474:	strb	r3, [r2]
   3c478:	ldrb	r3, [r4, #25]
   3c47c:	cmp	r3, #0
   3c480:	bne	3c504 <flatcc_json_printer_int16_vector_field@@Base+0x274>
   3c484:	ldr	r1, [r4, #20]
   3c488:	ldr	r3, [r4, #16]
   3c48c:	cmp	r1, r3
   3c490:	bcs	3c598 <flatcc_json_printer_int16_vector_field@@Base+0x308>
   3c494:	ldrsh	r3, [r8, #2]!
   3c498:	cmp	r3, #0
   3c49c:	lsr	lr, r3, #31
   3c4a0:	rsblt	r3, r3, #0
   3c4a4:	movlt	r2, #45	; 0x2d
   3c4a8:	sxthlt	r3, r3
   3c4ac:	strblt	r2, [r1]
   3c4b0:	ldr	r2, [pc, #500]	; 3c6ac <flatcc_json_printer_int16_vector_field@@Base+0x41c>
   3c4b4:	uxth	r3, r3
   3c4b8:	addlt	r1, r1, #1
   3c4bc:	cmp	r3, r2
   3c4c0:	bhi	3c3c0 <flatcc_json_printer_int16_vector_field@@Base+0x130>
   3c4c4:	cmp	r3, #99	; 0x63
   3c4c8:	strbhi	r7, [r1, #3]
   3c4cc:	addhi	ip, r1, #3
   3c4d0:	movhi	r0, #3
   3c4d4:	bhi	3c40c <flatcc_json_printer_int16_vector_field@@Base+0x17c>
   3c4d8:	cmp	r3, #9
   3c4dc:	strbhi	r7, [r1, #2]
   3c4e0:	addhi	r2, r1, #2
   3c4e4:	movhi	r0, #2
   3c4e8:	bls	3c60c <flatcc_json_printer_int16_vector_field@@Base+0x37c>
   3c4ec:	ldrb	r1, [r9, r3, lsl #1]
   3c4f0:	add	r3, r9, r3, lsl #1
   3c4f4:	strb	r1, [r2, #-2]
   3c4f8:	ldrb	r3, [r3, #1]
   3c4fc:	strb	r3, [r2, #-1]
   3c500:	b	3c44c <flatcc_json_printer_int16_vector_field@@Base+0x1bc>
   3c504:	ldr	r3, [r4, #20]
   3c508:	mov	r2, #10
   3c50c:	add	r1, r3, #1
   3c510:	str	r1, [r4, #20]
   3c514:	strb	r2, [r3]
   3c518:	ldrb	r3, [r4, #25]
   3c51c:	ldr	r1, [r4, #32]
   3c520:	ldr	r0, [r4, #20]
   3c524:	ldr	r5, [r4, #16]
   3c528:	mul	sl, r1, r3
   3c52c:	add	r3, r0, sl
   3c530:	cmp	r5, r3
   3c534:	bcc	3c5b0 <flatcc_json_printer_int16_vector_field@@Base+0x320>
   3c538:	mov	r1, #32
   3c53c:	mov	r2, sl
   3c540:	bl	145c4 <memset@plt>
   3c544:	ldr	r1, [r4, #20]
   3c548:	add	r1, r1, sl
   3c54c:	str	r1, [r4, #20]
   3c550:	b	3c494 <flatcc_json_printer_int16_vector_field@@Base+0x204>
   3c554:	ldr	r2, [pc, #332]	; 3c6a8 <flatcc_json_printer_int16_vector_field@@Base+0x418>
   3c558:	mov	ip, #100	; 0x64
   3c55c:	strb	r7, [r1, #4]
   3c560:	umull	r2, r0, r2, r3
   3c564:	add	r2, r1, #2
   3c568:	lsr	r0, r0, #5
   3c56c:	mul	ip, ip, r0
   3c570:	sub	ip, r3, ip
   3c574:	uxth	r3, r0
   3c578:	uxth	ip, ip
   3c57c:	ldrb	r0, [r9, ip, lsl #1]
   3c580:	add	ip, r9, ip, lsl #1
   3c584:	strb	r0, [r1, #2]
   3c588:	ldrb	ip, [ip, #1]
   3c58c:	mov	r0, #4
   3c590:	strb	ip, [r1, #3]
   3c594:	b	3c4ec <flatcc_json_printer_int16_vector_field@@Base+0x25c>
   3c598:	mov	r1, r7
   3c59c:	ldr	r3, [r4, #44]	; 0x2c
   3c5a0:	mov	r0, r4
   3c5a4:	blx	r3
   3c5a8:	ldr	r1, [r4, #20]
   3c5ac:	b	3c494 <flatcc_json_printer_int16_vector_field@@Base+0x204>
   3c5b0:	cmp	r0, r5
   3c5b4:	bcs	3c61c <flatcc_json_printer_int16_vector_field@@Base+0x38c>
   3c5b8:	sub	r5, r5, r0
   3c5bc:	cmp	sl, r5
   3c5c0:	bls	3c538 <flatcc_json_printer_int16_vector_field@@Base+0x2a8>
   3c5c4:	mov	fp, #32
   3c5c8:	mov	r2, r5
   3c5cc:	mov	r1, fp
   3c5d0:	bl	145c4 <memset@plt>
   3c5d4:	ldr	r3, [r4, #20]
   3c5d8:	mov	r0, r4
   3c5dc:	add	r3, r3, r5
   3c5e0:	str	r3, [r4, #20]
   3c5e4:	ldr	r2, [r4, #44]	; 0x2c
   3c5e8:	mov	r1, r7
   3c5ec:	blx	r2
   3c5f0:	ldr	r0, [r4, #20]
   3c5f4:	ldr	r3, [r4, #16]
   3c5f8:	sub	sl, sl, r5
   3c5fc:	sub	r5, r3, r0
   3c600:	cmp	sl, r5
   3c604:	bhi	3c5c8 <flatcc_json_printer_int16_vector_field@@Base+0x338>
   3c608:	b	3c538 <flatcc_json_printer_int16_vector_field@@Base+0x2a8>
   3c60c:	strb	r7, [r1, #1]
   3c610:	mov	r0, #1
   3c614:	add	r1, r1, #1
   3c618:	b	3c444 <flatcc_json_printer_int16_vector_field@@Base+0x1b4>
   3c61c:	mov	r0, r4
   3c620:	ldr	r3, [r4, #44]	; 0x2c
   3c624:	mov	r1, r7
   3c628:	blx	r3
   3c62c:	ldr	r5, [r4, #16]
   3c630:	ldr	r0, [r4, #20]
   3c634:	b	3c5b8 <flatcc_json_printer_int16_vector_field@@Base+0x328>
   3c638:	add	r1, r2, #1
   3c63c:	mov	r3, #10
   3c640:	str	r1, [r4, #20]
   3c644:	strb	r3, [r2]
   3c648:	ldr	r3, [r4, #32]
   3c64c:	mov	r0, r4
   3c650:	sub	r3, r3, #1
   3c654:	str	r3, [r4, #32]
   3c658:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3c65c:	ldr	r2, [r4, #20]
   3c660:	b	3c33c <flatcc_json_printer_int16_vector_field@@Base+0xac>
   3c664:	ldr	r3, [r4, #20]
   3c668:	mov	r2, #10
   3c66c:	add	r1, r3, #1
   3c670:	str	r1, [r4, #20]
   3c674:	mov	r0, r4
   3c678:	strb	r2, [r3]
   3c67c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3c680:	ldr	r1, [r4, #20]
   3c684:	b	3c36c <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   3c688:	mov	r1, r3
   3c68c:	mov	r0, r4
   3c690:	ldr	r3, [r4, #44]	; 0x2c
   3c694:	blx	r3
   3c698:	ldr	r1, [r4, #20]
   3c69c:	b	3c36c <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   3c6a0:	andeq	r7, r4, r0, asr r4
   3c6a4:	andeq	r2, r0, pc, lsl #14
   3c6a8:	mvnpl	r8, pc, lsl r5
   3c6ac:	andeq	r0, r0, r7, ror #7

0003c6b0 <flatcc_json_printer_int32_vector_field@@Base>:
   3c6b0:	add	r2, r2, #2
   3c6b4:	ldr	ip, [r1, #8]
   3c6b8:	lsl	r2, r2, #1
   3c6bc:	cmp	ip, r2
   3c6c0:	bxle	lr
   3c6c4:	ldr	ip, [r1, #4]
   3c6c8:	ldrh	ip, [ip, r2]
   3c6cc:	cmp	ip, #0
   3c6d0:	bxeq	lr
   3c6d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c6d8:	ldr	r5, [r1]
   3c6dc:	adds	lr, r5, ip
   3c6e0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c6e4:	ldr	r2, [r1, #16]
   3c6e8:	cmp	r2, #0
   3c6ec:	add	r2, r2, #1
   3c6f0:	str	r2, [r1, #16]
   3c6f4:	ldrne	r2, [r0, #20]
   3c6f8:	movne	r1, #44	; 0x2c
   3c6fc:	addne	r4, r2, #1
   3c700:	strne	r4, [r0, #20]
   3c704:	strbne	r1, [r2]
   3c708:	mov	r1, r3
   3c70c:	ldr	r3, [r5, ip]
   3c710:	mov	r4, r0
   3c714:	ldr	r2, [sp, #40]	; 0x28
   3c718:	ldr	r6, [lr, r3]
   3c71c:	add	r7, lr, r3
   3c720:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3c724:	ldr	r3, [r4, #32]
   3c728:	ldr	r2, [r4, #20]
   3c72c:	add	r3, r3, #1
   3c730:	add	r0, r2, #1
   3c734:	mov	r1, #91	; 0x5b
   3c738:	cmp	r6, #0
   3c73c:	str	r3, [r4, #32]
   3c740:	str	r0, [r4, #20]
   3c744:	strb	r1, [r2]
   3c748:	bne	3c770 <flatcc_json_printer_int32_vector_field@@Base+0xc0>
   3c74c:	ldr	r0, [r4, #20]
   3c750:	ldrb	r3, [r4, #25]
   3c754:	cmp	r3, #0
   3c758:	bne	3c91c <flatcc_json_printer_int32_vector_field@@Base+0x26c>
   3c75c:	add	r2, r0, #1
   3c760:	mov	r3, #93	; 0x5d
   3c764:	str	r2, [r4, #20]
   3c768:	strb	r3, [r0]
   3c76c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c770:	ldrb	r3, [r4, #25]
   3c774:	cmp	r3, #0
   3c778:	bne	3c948 <flatcc_json_printer_int32_vector_field@@Base+0x298>
   3c77c:	ldr	r1, [r4, #20]
   3c780:	ldr	r2, [r4, #16]
   3c784:	cmp	r1, r2
   3c788:	bcs	3c96c <flatcc_json_printer_int32_vector_field@@Base+0x2bc>
   3c78c:	ldr	r0, [r7, #4]
   3c790:	add	r7, r7, #4
   3c794:	cmp	r0, #0
   3c798:	movlt	r3, #45	; 0x2d
   3c79c:	strblt	r3, [r1]
   3c7a0:	lsr	r5, r0, #31
   3c7a4:	addlt	r1, r1, #1
   3c7a8:	rsblt	r0, r0, #0
   3c7ac:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3c7b0:	ldr	r3, [r4, #20]
   3c7b4:	cmp	r6, #1
   3c7b8:	sub	r6, r6, #2
   3c7bc:	add	r0, r5, r0
   3c7c0:	add	r0, r3, r0
   3c7c4:	str	r0, [r4, #20]
   3c7c8:	beq	3c750 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   3c7cc:	mov	sl, #44	; 0x2c
   3c7d0:	mov	r9, #0
   3c7d4:	mov	r8, #32
   3c7d8:	b	3c828 <flatcc_json_printer_int32_vector_field@@Base+0x178>
   3c7dc:	ldr	r1, [r4, #20]
   3c7e0:	ldr	r3, [r4, #16]
   3c7e4:	cmp	r1, r3
   3c7e8:	bcs	3c890 <flatcc_json_printer_int32_vector_field@@Base+0x1e0>
   3c7ec:	ldr	r0, [r7, #4]!
   3c7f0:	cmp	r0, #0
   3c7f4:	movlt	r3, #45	; 0x2d
   3c7f8:	strblt	r3, [r1]
   3c7fc:	lsr	r5, r0, #31
   3c800:	addlt	r1, r1, #1
   3c804:	rsblt	r0, r0, #0
   3c808:	bl	34028 <flatcc_json_parser_struct_as_root@@Base+0x240>
   3c80c:	ldr	r3, [r4, #20]
   3c810:	cmp	r6, #0
   3c814:	sub	r6, r6, #1
   3c818:	add	r0, r5, r0
   3c81c:	add	r0, r3, r0
   3c820:	str	r0, [r4, #20]
   3c824:	beq	3c750 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   3c828:	add	r3, r0, #1
   3c82c:	str	r3, [r4, #20]
   3c830:	strb	sl, [r0]
   3c834:	ldrb	r3, [r4, #25]
   3c838:	cmp	r3, #0
   3c83c:	beq	3c7dc <flatcc_json_printer_int32_vector_field@@Base+0x12c>
   3c840:	ldr	r3, [r4, #20]
   3c844:	add	r2, r3, #1
   3c848:	str	r2, [r4, #20]
   3c84c:	mov	r2, #10
   3c850:	strb	r2, [r3]
   3c854:	ldrb	r1, [r4, #25]
   3c858:	ldr	r5, [r4, #32]
   3c85c:	ldr	r0, [r4, #20]
   3c860:	ldr	fp, [r4, #16]
   3c864:	mul	r5, r5, r1
   3c868:	add	r3, r0, r5
   3c86c:	cmp	fp, r3
   3c870:	bcc	3c8a8 <flatcc_json_printer_int32_vector_field@@Base+0x1f8>
   3c874:	mov	r1, r8
   3c878:	mov	r2, r5
   3c87c:	bl	145c4 <memset@plt>
   3c880:	ldr	r1, [r4, #20]
   3c884:	add	r1, r1, r5
   3c888:	str	r1, [r4, #20]
   3c88c:	b	3c7ec <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   3c890:	mov	r1, r9
   3c894:	ldr	r3, [r4, #44]	; 0x2c
   3c898:	mov	r0, r4
   3c89c:	blx	r3
   3c8a0:	ldr	r1, [r4, #20]
   3c8a4:	b	3c7ec <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   3c8a8:	cmp	r0, fp
   3c8ac:	bcs	3c900 <flatcc_json_printer_int32_vector_field@@Base+0x250>
   3c8b0:	sub	fp, fp, r0
   3c8b4:	cmp	r5, fp
   3c8b8:	bls	3c874 <flatcc_json_printer_int32_vector_field@@Base+0x1c4>
   3c8bc:	mov	r2, fp
   3c8c0:	mov	r1, r8
   3c8c4:	bl	145c4 <memset@plt>
   3c8c8:	ldr	r3, [r4, #20]
   3c8cc:	mov	r0, r4
   3c8d0:	add	r3, r3, fp
   3c8d4:	str	r3, [r4, #20]
   3c8d8:	ldr	r2, [r4, #44]	; 0x2c
   3c8dc:	mov	r1, r9
   3c8e0:	blx	r2
   3c8e4:	ldr	r0, [r4, #20]
   3c8e8:	ldr	r3, [r4, #16]
   3c8ec:	sub	r5, r5, fp
   3c8f0:	sub	fp, r3, r0
   3c8f4:	cmp	r5, fp
   3c8f8:	bhi	3c8bc <flatcc_json_printer_int32_vector_field@@Base+0x20c>
   3c8fc:	b	3c874 <flatcc_json_printer_int32_vector_field@@Base+0x1c4>
   3c900:	mov	r0, r4
   3c904:	ldr	r3, [r4, #44]	; 0x2c
   3c908:	mov	r1, r9
   3c90c:	blx	r3
   3c910:	ldr	fp, [r4, #16]
   3c914:	ldr	r0, [r4, #20]
   3c918:	b	3c8b0 <flatcc_json_printer_int32_vector_field@@Base+0x200>
   3c91c:	add	r2, r0, #1
   3c920:	mov	r3, #10
   3c924:	str	r2, [r4, #20]
   3c928:	strb	r3, [r0]
   3c92c:	ldr	r3, [r4, #32]
   3c930:	mov	r0, r4
   3c934:	sub	r3, r3, #1
   3c938:	str	r3, [r4, #32]
   3c93c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3c940:	ldr	r0, [r4, #20]
   3c944:	b	3c75c <flatcc_json_printer_int32_vector_field@@Base+0xac>
   3c948:	ldr	r3, [r4, #20]
   3c94c:	mov	r2, #10
   3c950:	add	r1, r3, #1
   3c954:	str	r1, [r4, #20]
   3c958:	mov	r0, r4
   3c95c:	strb	r2, [r3]
   3c960:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3c964:	ldr	r1, [r4, #20]
   3c968:	b	3c78c <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   3c96c:	mov	r1, r3
   3c970:	mov	r0, r4
   3c974:	ldr	r3, [r4, #44]	; 0x2c
   3c978:	blx	r3
   3c97c:	ldr	r1, [r4, #20]
   3c980:	b	3c78c <flatcc_json_printer_int32_vector_field@@Base+0xdc>

0003c984 <flatcc_json_printer_int64_vector_field@@Base>:
   3c984:	add	r2, r2, #2
   3c988:	ldr	ip, [r1, #8]
   3c98c:	lsl	r2, r2, #1
   3c990:	cmp	ip, r2
   3c994:	bxle	lr
   3c998:	ldr	ip, [r1, #4]
   3c99c:	ldrh	ip, [ip, r2]
   3c9a0:	cmp	ip, #0
   3c9a4:	bxeq	lr
   3c9a8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c9ac:	ldr	r5, [r1]
   3c9b0:	adds	lr, r5, ip
   3c9b4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c9b8:	ldr	r2, [r1, #16]
   3c9bc:	cmp	r2, #0
   3c9c0:	add	r2, r2, #1
   3c9c4:	str	r2, [r1, #16]
   3c9c8:	ldrne	r2, [r0, #20]
   3c9cc:	movne	r1, #44	; 0x2c
   3c9d0:	addne	r4, r2, #1
   3c9d4:	strne	r4, [r0, #20]
   3c9d8:	strbne	r1, [r2]
   3c9dc:	mov	r1, r3
   3c9e0:	ldr	r3, [r5, ip]
   3c9e4:	mov	r4, r0
   3c9e8:	ldr	r2, [sp, #40]	; 0x28
   3c9ec:	ldr	r6, [lr, r3]
   3c9f0:	add	r7, lr, r3
   3c9f4:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3c9f8:	ldr	r3, [r4, #32]
   3c9fc:	ldr	r2, [r4, #20]
   3ca00:	add	r3, r3, #1
   3ca04:	add	r0, r2, #1
   3ca08:	mov	r1, #91	; 0x5b
   3ca0c:	cmp	r6, #0
   3ca10:	str	r3, [r4, #32]
   3ca14:	str	r0, [r4, #20]
   3ca18:	strb	r1, [r2]
   3ca1c:	bne	3ca44 <flatcc_json_printer_int64_vector_field@@Base+0xc0>
   3ca20:	ldr	r0, [r4, #20]
   3ca24:	ldrb	r3, [r4, #25]
   3ca28:	cmp	r3, #0
   3ca2c:	bne	3cbf8 <flatcc_json_printer_int64_vector_field@@Base+0x274>
   3ca30:	add	r2, r0, #1
   3ca34:	mov	r3, #93	; 0x5d
   3ca38:	str	r2, [r4, #20]
   3ca3c:	strb	r3, [r0]
   3ca40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ca44:	ldrb	r1, [r4, #25]
   3ca48:	cmp	r1, #0
   3ca4c:	bne	3cc24 <flatcc_json_printer_int64_vector_field@@Base+0x2a0>
   3ca50:	ldr	r2, [r4, #20]
   3ca54:	ldr	r3, [r4, #16]
   3ca58:	cmp	r2, r3
   3ca5c:	bcs	3cc60 <flatcc_json_printer_int64_vector_field@@Base+0x2dc>
   3ca60:	ldrd	r0, [r7, #4]
   3ca64:	add	r7, r7, #4
   3ca68:	cmp	r0, #0
   3ca6c:	sbcs	r3, r1, #0
   3ca70:	lsr	r5, r1, #31
   3ca74:	blt	3cc48 <flatcc_json_printer_int64_vector_field@@Base+0x2c4>
   3ca78:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   3ca7c:	ldr	r3, [r4, #20]
   3ca80:	cmp	r6, #1
   3ca84:	sub	r6, r6, #2
   3ca88:	add	r0, r5, r0
   3ca8c:	add	r0, r3, r0
   3ca90:	str	r0, [r4, #20]
   3ca94:	beq	3ca24 <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   3ca98:	mov	sl, #44	; 0x2c
   3ca9c:	mov	r9, #0
   3caa0:	mov	r8, #32
   3caa4:	b	3caec <flatcc_json_printer_int64_vector_field@@Base+0x168>
   3caa8:	ldr	r2, [r4, #20]
   3caac:	ldr	r3, [r4, #16]
   3cab0:	cmp	r2, r3
   3cab4:	bcs	3cb6c <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   3cab8:	ldrd	r0, [r7, #8]!
   3cabc:	cmp	r0, #0
   3cac0:	sbcs	r3, r1, #0
   3cac4:	lsr	fp, r1, #31
   3cac8:	blt	3cb54 <flatcc_json_printer_int64_vector_field@@Base+0x1d0>
   3cacc:	bl	34350 <flatcc_json_parser_struct_as_root@@Base+0x568>
   3cad0:	ldr	r3, [r4, #20]
   3cad4:	cmp	r6, #0
   3cad8:	sub	r6, r6, #1
   3cadc:	add	r0, fp, r0
   3cae0:	add	r0, r3, r0
   3cae4:	str	r0, [r4, #20]
   3cae8:	beq	3ca24 <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   3caec:	add	r3, r0, #1
   3caf0:	str	r3, [r4, #20]
   3caf4:	strb	sl, [r0]
   3caf8:	ldrb	r3, [r4, #25]
   3cafc:	cmp	r3, #0
   3cb00:	beq	3caa8 <flatcc_json_printer_int64_vector_field@@Base+0x124>
   3cb04:	ldr	r3, [r4, #20]
   3cb08:	add	r2, r3, #1
   3cb0c:	str	r2, [r4, #20]
   3cb10:	mov	r2, #10
   3cb14:	strb	r2, [r3]
   3cb18:	ldrb	r2, [r4, #25]
   3cb1c:	ldr	r5, [r4, #32]
   3cb20:	ldr	r0, [r4, #20]
   3cb24:	ldr	fp, [r4, #16]
   3cb28:	mul	r5, r5, r2
   3cb2c:	add	r3, r0, r5
   3cb30:	cmp	fp, r3
   3cb34:	bcc	3cb84 <flatcc_json_printer_int64_vector_field@@Base+0x200>
   3cb38:	mov	r2, r5
   3cb3c:	mov	r1, r8
   3cb40:	bl	145c4 <memset@plt>
   3cb44:	ldr	r2, [r4, #20]
   3cb48:	add	r2, r2, r5
   3cb4c:	str	r2, [r4, #20]
   3cb50:	b	3cab8 <flatcc_json_printer_int64_vector_field@@Base+0x134>
   3cb54:	mov	r3, #45	; 0x2d
   3cb58:	rsbs	r0, r0, #0
   3cb5c:	strb	r3, [r2]
   3cb60:	rsc	r1, r1, #0
   3cb64:	add	r2, r2, #1
   3cb68:	b	3cacc <flatcc_json_printer_int64_vector_field@@Base+0x148>
   3cb6c:	ldr	r3, [r4, #44]	; 0x2c
   3cb70:	mov	r1, r9
   3cb74:	mov	r0, r4
   3cb78:	blx	r3
   3cb7c:	ldr	r2, [r4, #20]
   3cb80:	b	3cab8 <flatcc_json_printer_int64_vector_field@@Base+0x134>
   3cb84:	cmp	r0, fp
   3cb88:	bcs	3cbdc <flatcc_json_printer_int64_vector_field@@Base+0x258>
   3cb8c:	sub	fp, fp, r0
   3cb90:	cmp	r5, fp
   3cb94:	bls	3cb38 <flatcc_json_printer_int64_vector_field@@Base+0x1b4>
   3cb98:	mov	r2, fp
   3cb9c:	mov	r1, r8
   3cba0:	bl	145c4 <memset@plt>
   3cba4:	ldr	r3, [r4, #20]
   3cba8:	mov	r0, r4
   3cbac:	add	r3, r3, fp
   3cbb0:	str	r3, [r4, #20]
   3cbb4:	ldr	r2, [r4, #44]	; 0x2c
   3cbb8:	mov	r1, r9
   3cbbc:	blx	r2
   3cbc0:	ldr	r0, [r4, #20]
   3cbc4:	ldr	r3, [r4, #16]
   3cbc8:	sub	r5, r5, fp
   3cbcc:	sub	fp, r3, r0
   3cbd0:	cmp	r5, fp
   3cbd4:	bhi	3cb98 <flatcc_json_printer_int64_vector_field@@Base+0x214>
   3cbd8:	b	3cb38 <flatcc_json_printer_int64_vector_field@@Base+0x1b4>
   3cbdc:	mov	r0, r4
   3cbe0:	ldr	r3, [r4, #44]	; 0x2c
   3cbe4:	mov	r1, r9
   3cbe8:	blx	r3
   3cbec:	ldr	fp, [r4, #16]
   3cbf0:	ldr	r0, [r4, #20]
   3cbf4:	b	3cb8c <flatcc_json_printer_int64_vector_field@@Base+0x208>
   3cbf8:	add	r2, r0, #1
   3cbfc:	mov	r3, #10
   3cc00:	str	r2, [r4, #20]
   3cc04:	strb	r3, [r0]
   3cc08:	ldr	r3, [r4, #32]
   3cc0c:	mov	r0, r4
   3cc10:	sub	r3, r3, #1
   3cc14:	str	r3, [r4, #32]
   3cc18:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3cc1c:	ldr	r0, [r4, #20]
   3cc20:	b	3ca30 <flatcc_json_printer_int64_vector_field@@Base+0xac>
   3cc24:	ldr	r3, [r4, #20]
   3cc28:	mov	r2, #10
   3cc2c:	add	r1, r3, #1
   3cc30:	str	r1, [r4, #20]
   3cc34:	mov	r0, r4
   3cc38:	strb	r2, [r3]
   3cc3c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3cc40:	ldr	r2, [r4, #20]
   3cc44:	b	3ca60 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   3cc48:	mov	r3, #45	; 0x2d
   3cc4c:	rsbs	r0, r0, #0
   3cc50:	strb	r3, [r2]
   3cc54:	rsc	r1, r1, #0
   3cc58:	add	r2, r2, #1
   3cc5c:	b	3ca78 <flatcc_json_printer_int64_vector_field@@Base+0xf4>
   3cc60:	ldr	r3, [r4, #44]	; 0x2c
   3cc64:	mov	r0, r4
   3cc68:	blx	r3
   3cc6c:	ldr	r2, [r4, #20]
   3cc70:	b	3ca60 <flatcc_json_printer_int64_vector_field@@Base+0xdc>

0003cc74 <flatcc_json_printer_bool_vector_field@@Base>:
   3cc74:	add	r2, r2, #2
   3cc78:	ldr	ip, [r1, #8]
   3cc7c:	lsl	r2, r2, #1
   3cc80:	cmp	ip, r2
   3cc84:	bxle	lr
   3cc88:	ldr	ip, [r1, #4]
   3cc8c:	ldrh	ip, [ip, r2]
   3cc90:	cmp	ip, #0
   3cc94:	bxeq	lr
   3cc98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cc9c:	sub	sp, sp, #12
   3cca0:	ldr	lr, [r1]
   3cca4:	adds	r5, lr, ip
   3cca8:	beq	3cd34 <flatcc_json_printer_bool_vector_field@@Base+0xc0>
   3ccac:	ldr	r2, [r1, #16]
   3ccb0:	cmp	r2, #0
   3ccb4:	add	r2, r2, #1
   3ccb8:	str	r2, [r1, #16]
   3ccbc:	ldrne	r2, [r0, #20]
   3ccc0:	movne	r1, #44	; 0x2c
   3ccc4:	addne	r4, r2, #1
   3ccc8:	strne	r4, [r0, #20]
   3cccc:	strbne	r1, [r2]
   3ccd0:	mov	r1, r3
   3ccd4:	ldr	r3, [lr, ip]
   3ccd8:	mov	r4, r0
   3ccdc:	ldr	r2, [sp, #48]	; 0x30
   3cce0:	ldr	r8, [r5, r3]
   3cce4:	add	fp, r5, r3
   3cce8:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3ccec:	ldr	r3, [r4, #32]
   3ccf0:	ldr	r2, [r4, #20]
   3ccf4:	add	r3, r3, #1
   3ccf8:	add	r0, r2, #1
   3ccfc:	mov	r1, #91	; 0x5b
   3cd00:	cmp	r8, #0
   3cd04:	str	r3, [r4, #32]
   3cd08:	str	r0, [r4, #20]
   3cd0c:	strb	r1, [r2]
   3cd10:	bne	3cd3c <flatcc_json_printer_bool_vector_field@@Base+0xc8>
   3cd14:	ldr	r3, [r4, #20]
   3cd18:	ldrb	r2, [r4, #25]
   3cd1c:	cmp	r2, #0
   3cd20:	bne	3cf2c <flatcc_json_printer_bool_vector_field@@Base+0x2b8>
   3cd24:	add	r1, r3, #1
   3cd28:	mov	r2, #93	; 0x5d
   3cd2c:	str	r1, [r4, #20]
   3cd30:	strb	r2, [r3]
   3cd34:	add	sp, sp, #12
   3cd38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd3c:	ldrb	r1, [r4, #25]
   3cd40:	cmp	r1, #0
   3cd44:	bne	3cf70 <flatcc_json_printer_bool_vector_field@@Base+0x2fc>
   3cd48:	ldr	r2, [r4, #20]
   3cd4c:	ldr	r3, [r4, #16]
   3cd50:	cmp	r2, r3
   3cd54:	bcs	3cf94 <flatcc_json_printer_bool_vector_field@@Base+0x320>
   3cd58:	ldrb	r3, [fp, #4]
   3cd5c:	add	r6, fp, #4
   3cd60:	ldr	r1, [pc, #576]	; 3cfa8 <flatcc_json_printer_bool_vector_field@@Base+0x334>
   3cd64:	cmp	r3, #0
   3cd68:	bne	3cf58 <flatcc_json_printer_bool_vector_field@@Base+0x2e4>
   3cd6c:	add	ip, r1, #1792	; 0x700
   3cd70:	ldr	r0, [r1, #1792]	; 0x700
   3cd74:	ldrh	r1, [ip, #4]
   3cd78:	mov	r3, #5
   3cd7c:	str	r0, [r2]
   3cd80:	strh	r1, [r2, #4]
   3cd84:	ldr	r2, [r4, #20]
   3cd88:	cmp	r8, #1
   3cd8c:	add	r3, r2, r3
   3cd90:	str	r3, [r4, #20]
   3cd94:	beq	3cd18 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
   3cd98:	ldr	r9, [pc, #524]	; 3cfac <flatcc_json_printer_bool_vector_field@@Base+0x338>
   3cd9c:	add	r2, r8, #3
   3cda0:	mov	r7, #0
   3cda4:	str	r2, [sp]
   3cda8:	sub	r2, r9, #8
   3cdac:	str	r2, [sp, #4]
   3cdb0:	add	r2, r3, #1
   3cdb4:	str	r2, [r4, #20]
   3cdb8:	mov	r2, #44	; 0x2c
   3cdbc:	strb	r2, [r3]
   3cdc0:	ldrb	r3, [r4, #25]
   3cdc4:	cmp	r3, #0
   3cdc8:	bne	3ce4c <flatcc_json_printer_bool_vector_field@@Base+0x1d8>
   3cdcc:	ldr	r8, [r4, #20]
   3cdd0:	ldr	r3, [r4, #16]
   3cdd4:	cmp	r8, r3
   3cdd8:	bcs	3ce9c <flatcc_json_printer_bool_vector_field@@Base+0x228>
   3cddc:	ldrb	r3, [r6, #1]!
   3cde0:	cmp	r3, #0
   3cde4:	bne	3ce18 <flatcc_json_printer_bool_vector_field@@Base+0x1a4>
   3cde8:	ldrh	r3, [r9, #4]
   3cdec:	ldr	r0, [r9]
   3cdf0:	ldr	r2, [sp]
   3cdf4:	strh	r3, [r8, #4]
   3cdf8:	str	r0, [r8]
   3cdfc:	ldr	r3, [r4, #20]
   3ce00:	sub	r2, r2, r6
   3ce04:	add	r3, r3, #5
   3ce08:	cmn	fp, r2
   3ce0c:	str	r3, [r4, #20]
   3ce10:	bne	3cdb0 <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   3ce14:	b	3cd18 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
   3ce18:	ldr	r2, [sp, #4]
   3ce1c:	ldrb	r3, [r2, #4]
   3ce20:	ldr	r0, [r2]
   3ce24:	ldr	r2, [sp]
   3ce28:	strb	r3, [r8, #4]
   3ce2c:	str	r0, [r8]
   3ce30:	ldr	r3, [r4, #20]
   3ce34:	sub	r2, r2, r6
   3ce38:	add	r3, r3, #4
   3ce3c:	cmn	fp, r2
   3ce40:	str	r3, [r4, #20]
   3ce44:	bne	3cdb0 <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   3ce48:	b	3cd18 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
   3ce4c:	ldr	r3, [r4, #20]
   3ce50:	add	r2, r3, #1
   3ce54:	str	r2, [r4, #20]
   3ce58:	mov	r2, #10
   3ce5c:	strb	r2, [r3]
   3ce60:	ldrb	r3, [r4, #25]
   3ce64:	ldr	r8, [r4, #32]
   3ce68:	ldr	r0, [r4, #20]
   3ce6c:	ldr	r5, [r4, #16]
   3ce70:	mul	r8, r8, r3
   3ce74:	add	r3, r0, r8
   3ce78:	cmp	r5, r3
   3ce7c:	bcc	3ceb4 <flatcc_json_printer_bool_vector_field@@Base+0x240>
   3ce80:	mov	r2, r8
   3ce84:	mov	r1, #32
   3ce88:	bl	145c4 <memset@plt>
   3ce8c:	ldr	r3, [r4, #20]
   3ce90:	add	r8, r3, r8
   3ce94:	str	r8, [r4, #20]
   3ce98:	b	3cddc <flatcc_json_printer_bool_vector_field@@Base+0x168>
   3ce9c:	ldr	r3, [r4, #44]	; 0x2c
   3cea0:	mov	r1, r7
   3cea4:	mov	r0, r4
   3cea8:	blx	r3
   3ceac:	ldr	r8, [r4, #20]
   3ceb0:	b	3cddc <flatcc_json_printer_bool_vector_field@@Base+0x168>
   3ceb4:	cmp	r0, r5
   3ceb8:	bcs	3cf10 <flatcc_json_printer_bool_vector_field@@Base+0x29c>
   3cebc:	sub	r5, r5, r0
   3cec0:	cmp	r8, r5
   3cec4:	bls	3ce80 <flatcc_json_printer_bool_vector_field@@Base+0x20c>
   3cec8:	mov	sl, #32
   3cecc:	mov	r2, r5
   3ced0:	mov	r1, sl
   3ced4:	bl	145c4 <memset@plt>
   3ced8:	ldr	r3, [r4, #20]
   3cedc:	mov	r0, r4
   3cee0:	add	r3, r3, r5
   3cee4:	str	r3, [r4, #20]
   3cee8:	ldr	r2, [r4, #44]	; 0x2c
   3ceec:	mov	r1, r7
   3cef0:	blx	r2
   3cef4:	ldr	r0, [r4, #20]
   3cef8:	ldr	r3, [r4, #16]
   3cefc:	sub	r8, r8, r5
   3cf00:	sub	r5, r3, r0
   3cf04:	cmp	r8, r5
   3cf08:	bhi	3cecc <flatcc_json_printer_bool_vector_field@@Base+0x258>
   3cf0c:	b	3ce80 <flatcc_json_printer_bool_vector_field@@Base+0x20c>
   3cf10:	mov	r0, r4
   3cf14:	ldr	r3, [r4, #44]	; 0x2c
   3cf18:	mov	r1, r7
   3cf1c:	blx	r3
   3cf20:	ldr	r5, [r4, #16]
   3cf24:	ldr	r0, [r4, #20]
   3cf28:	b	3cebc <flatcc_json_printer_bool_vector_field@@Base+0x248>
   3cf2c:	add	r1, r3, #1
   3cf30:	mov	r2, #10
   3cf34:	str	r1, [r4, #20]
   3cf38:	strb	r2, [r3]
   3cf3c:	ldr	r3, [r4, #32]
   3cf40:	mov	r0, r4
   3cf44:	sub	r3, r3, #1
   3cf48:	str	r3, [r4, #32]
   3cf4c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3cf50:	ldr	r3, [r4, #20]
   3cf54:	b	3cd24 <flatcc_json_printer_bool_vector_field@@Base+0xb0>
   3cf58:	ldrb	ip, [r1, #1788]	; 0x6fc
   3cf5c:	ldr	r0, [r1, #1784]	; 0x6f8
   3cf60:	mov	r3, #4
   3cf64:	strb	ip, [r2, #4]
   3cf68:	str	r0, [r2]
   3cf6c:	b	3cd84 <flatcc_json_printer_bool_vector_field@@Base+0x110>
   3cf70:	ldr	r3, [r4, #20]
   3cf74:	mov	r2, #10
   3cf78:	add	r1, r3, #1
   3cf7c:	str	r1, [r4, #20]
   3cf80:	mov	r0, r4
   3cf84:	strb	r2, [r3]
   3cf88:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3cf8c:	ldr	r2, [r4, #20]
   3cf90:	b	3cd58 <flatcc_json_printer_bool_vector_field@@Base+0xe4>
   3cf94:	ldr	r3, [r4, #44]	; 0x2c
   3cf98:	mov	r0, r4
   3cf9c:	blx	r3
   3cfa0:	ldr	r2, [r4, #20]
   3cfa4:	b	3cd58 <flatcc_json_printer_bool_vector_field@@Base+0xe4>
   3cfa8:	andeq	r7, r4, r0, asr r4
   3cfac:	andeq	r7, r4, r0, asr fp

0003cfb0 <flatcc_json_printer_float_vector_field@@Base>:
   3cfb0:	add	r2, r2, #2
   3cfb4:	ldr	ip, [r1, #8]
   3cfb8:	lsl	r2, r2, #1
   3cfbc:	cmp	ip, r2
   3cfc0:	bxle	lr
   3cfc4:	ldr	ip, [r1, #4]
   3cfc8:	ldrh	ip, [ip, r2]
   3cfcc:	cmp	ip, #0
   3cfd0:	bxeq	lr
   3cfd4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cfd8:	ldr	lr, [r1]
   3cfdc:	adds	r5, lr, ip
   3cfe0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cfe4:	ldr	r2, [r1, #16]
   3cfe8:	cmp	r2, #0
   3cfec:	add	r2, r2, #1
   3cff0:	str	r2, [r1, #16]
   3cff4:	ldrne	r2, [r0, #20]
   3cff8:	movne	r1, #44	; 0x2c
   3cffc:	addne	r4, r2, #1
   3d000:	strne	r4, [r0, #20]
   3d004:	strbne	r1, [r2]
   3d008:	mov	r1, r3
   3d00c:	ldr	r3, [lr, ip]
   3d010:	mov	r4, r0
   3d014:	ldr	r2, [sp, #40]	; 0x28
   3d018:	add	r7, r5, r3
   3d01c:	ldr	r5, [r5, r3]
   3d020:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3d024:	ldr	r3, [r4, #32]
   3d028:	ldr	r2, [r4, #20]
   3d02c:	add	r3, r3, #1
   3d030:	add	r0, r2, #1
   3d034:	mov	r1, #91	; 0x5b
   3d038:	cmp	r5, #0
   3d03c:	str	r3, [r4, #32]
   3d040:	str	r0, [r4, #20]
   3d044:	strb	r1, [r2]
   3d048:	bne	3d070 <flatcc_json_printer_float_vector_field@@Base+0xc0>
   3d04c:	ldr	r0, [r4, #20]
   3d050:	ldrb	r3, [r4, #25]
   3d054:	cmp	r3, #0
   3d058:	bne	3d1ec <flatcc_json_printer_float_vector_field@@Base+0x23c>
   3d05c:	add	r2, r0, #1
   3d060:	mov	r3, #93	; 0x5d
   3d064:	str	r2, [r4, #20]
   3d068:	strb	r3, [r0]
   3d06c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d070:	ldrb	r1, [r4, #25]
   3d074:	cmp	r1, #0
   3d078:	bne	3d218 <flatcc_json_printer_float_vector_field@@Base+0x268>
   3d07c:	ldr	r0, [r4, #20]
   3d080:	ldr	r3, [r4, #16]
   3d084:	cmp	r0, r3
   3d088:	bcs	3d23c <flatcc_json_printer_float_vector_field@@Base+0x28c>
   3d08c:	vldr	s0, [r7, #4]
   3d090:	sub	r6, r5, #2
   3d094:	add	r7, r7, #8
   3d098:	vcvt.f64.f32	d0, s0
   3d09c:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   3d0a0:	ldr	r3, [r4, #20]
   3d0a4:	cmp	r5, #1
   3d0a8:	add	r0, r3, r0
   3d0ac:	str	r0, [r4, #20]
   3d0b0:	beq	3d050 <flatcc_json_printer_float_vector_field@@Base+0xa0>
   3d0b4:	mov	sl, #44	; 0x2c
   3d0b8:	mov	r9, #0
   3d0bc:	mov	r8, #32
   3d0c0:	b	3d0f8 <flatcc_json_printer_float_vector_field@@Base+0x148>
   3d0c4:	ldr	r0, [r4, #20]
   3d0c8:	ldr	r3, [r4, #16]
   3d0cc:	cmp	r0, r3
   3d0d0:	bcs	3d160 <flatcc_json_printer_float_vector_field@@Base+0x1b0>
   3d0d4:	vldmia	r7!, {s0}
   3d0d8:	vcvt.f64.f32	d0, s0
   3d0dc:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   3d0e0:	ldr	r3, [r4, #20]
   3d0e4:	cmp	r6, #0
   3d0e8:	sub	r6, r6, #1
   3d0ec:	add	r0, r3, r0
   3d0f0:	str	r0, [r4, #20]
   3d0f4:	beq	3d050 <flatcc_json_printer_float_vector_field@@Base+0xa0>
   3d0f8:	add	r3, r0, #1
   3d0fc:	str	r3, [r4, #20]
   3d100:	strb	sl, [r0]
   3d104:	ldrb	r3, [r4, #25]
   3d108:	cmp	r3, #0
   3d10c:	beq	3d0c4 <flatcc_json_printer_float_vector_field@@Base+0x114>
   3d110:	ldr	r3, [r4, #20]
   3d114:	add	r2, r3, #1
   3d118:	str	r2, [r4, #20]
   3d11c:	mov	r2, #10
   3d120:	strb	r2, [r3]
   3d124:	ldrb	r2, [r4, #25]
   3d128:	ldr	r5, [r4, #32]
   3d12c:	ldr	r0, [r4, #20]
   3d130:	ldr	r3, [r4, #16]
   3d134:	mul	r5, r5, r2
   3d138:	add	r2, r0, r5
   3d13c:	cmp	r3, r2
   3d140:	bcc	3d178 <flatcc_json_printer_float_vector_field@@Base+0x1c8>
   3d144:	mov	r2, r5
   3d148:	mov	r1, r8
   3d14c:	bl	145c4 <memset@plt>
   3d150:	ldr	r0, [r4, #20]
   3d154:	add	r0, r0, r5
   3d158:	str	r0, [r4, #20]
   3d15c:	b	3d0d4 <flatcc_json_printer_float_vector_field@@Base+0x124>
   3d160:	mov	r0, r4
   3d164:	ldr	r3, [r4, #44]	; 0x2c
   3d168:	mov	r1, r9
   3d16c:	blx	r3
   3d170:	ldr	r0, [r4, #20]
   3d174:	b	3d0d4 <flatcc_json_printer_float_vector_field@@Base+0x124>
   3d178:	cmp	r0, r3
   3d17c:	bcs	3d1d0 <flatcc_json_printer_float_vector_field@@Base+0x220>
   3d180:	sub	fp, r3, r0
   3d184:	cmp	r5, fp
   3d188:	bls	3d144 <flatcc_json_printer_float_vector_field@@Base+0x194>
   3d18c:	mov	r2, fp
   3d190:	mov	r1, r8
   3d194:	bl	145c4 <memset@plt>
   3d198:	ldr	r1, [r4, #20]
   3d19c:	ldr	r2, [r4, #44]	; 0x2c
   3d1a0:	add	r1, r1, fp
   3d1a4:	str	r1, [r4, #20]
   3d1a8:	mov	r0, r4
   3d1ac:	mov	r1, r9
   3d1b0:	blx	r2
   3d1b4:	ldr	r0, [r4, #20]
   3d1b8:	ldr	r2, [r4, #16]
   3d1bc:	sub	r5, r5, fp
   3d1c0:	sub	fp, r2, r0
   3d1c4:	cmp	r5, fp
   3d1c8:	bhi	3d18c <flatcc_json_printer_float_vector_field@@Base+0x1dc>
   3d1cc:	b	3d144 <flatcc_json_printer_float_vector_field@@Base+0x194>
   3d1d0:	ldr	r3, [r4, #44]	; 0x2c
   3d1d4:	mov	r0, r4
   3d1d8:	mov	r1, r9
   3d1dc:	blx	r3
   3d1e0:	ldr	r3, [r4, #16]
   3d1e4:	ldr	r0, [r4, #20]
   3d1e8:	b	3d180 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
   3d1ec:	add	r2, r0, #1
   3d1f0:	mov	r3, #10
   3d1f4:	str	r2, [r4, #20]
   3d1f8:	strb	r3, [r0]
   3d1fc:	ldr	r3, [r4, #32]
   3d200:	mov	r0, r4
   3d204:	sub	r3, r3, #1
   3d208:	str	r3, [r4, #32]
   3d20c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3d210:	ldr	r0, [r4, #20]
   3d214:	b	3d05c <flatcc_json_printer_float_vector_field@@Base+0xac>
   3d218:	ldr	r3, [r4, #20]
   3d21c:	mov	r2, #10
   3d220:	add	r1, r3, #1
   3d224:	str	r1, [r4, #20]
   3d228:	mov	r0, r4
   3d22c:	strb	r2, [r3]
   3d230:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3d234:	ldr	r0, [r4, #20]
   3d238:	b	3d08c <flatcc_json_printer_float_vector_field@@Base+0xdc>
   3d23c:	mov	r0, r4
   3d240:	ldr	r3, [r4, #44]	; 0x2c
   3d244:	blx	r3
   3d248:	ldr	r0, [r4, #20]
   3d24c:	b	3d08c <flatcc_json_printer_float_vector_field@@Base+0xdc>

0003d250 <flatcc_json_printer_double_vector_field@@Base>:
   3d250:	add	r2, r2, #2
   3d254:	ldr	ip, [r1, #8]
   3d258:	lsl	r2, r2, #1
   3d25c:	cmp	ip, r2
   3d260:	bxle	lr
   3d264:	ldr	ip, [r1, #4]
   3d268:	ldrh	ip, [ip, r2]
   3d26c:	cmp	ip, #0
   3d270:	bxeq	lr
   3d274:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d278:	ldr	lr, [r1]
   3d27c:	adds	r5, lr, ip
   3d280:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d284:	ldr	r2, [r1, #16]
   3d288:	cmp	r2, #0
   3d28c:	add	r2, r2, #1
   3d290:	str	r2, [r1, #16]
   3d294:	ldrne	r2, [r0, #20]
   3d298:	movne	r1, #44	; 0x2c
   3d29c:	addne	r4, r2, #1
   3d2a0:	strne	r4, [r0, #20]
   3d2a4:	strbne	r1, [r2]
   3d2a8:	mov	r1, r3
   3d2ac:	ldr	r3, [lr, ip]
   3d2b0:	mov	r4, r0
   3d2b4:	ldr	r2, [sp, #40]	; 0x28
   3d2b8:	ldr	r6, [r5, r3]
   3d2bc:	add	r7, r5, r3
   3d2c0:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3d2c4:	ldr	r3, [r4, #32]
   3d2c8:	ldr	r2, [r4, #20]
   3d2cc:	add	r3, r3, #1
   3d2d0:	add	r0, r2, #1
   3d2d4:	mov	r1, #91	; 0x5b
   3d2d8:	cmp	r6, #0
   3d2dc:	str	r3, [r4, #32]
   3d2e0:	str	r0, [r4, #20]
   3d2e4:	strb	r1, [r2]
   3d2e8:	bne	3d310 <flatcc_json_printer_double_vector_field@@Base+0xc0>
   3d2ec:	ldr	r0, [r4, #20]
   3d2f0:	ldrb	r3, [r4, #25]
   3d2f4:	cmp	r3, #0
   3d2f8:	bne	3d484 <flatcc_json_printer_double_vector_field@@Base+0x234>
   3d2fc:	add	r2, r0, #1
   3d300:	mov	r3, #93	; 0x5d
   3d304:	str	r2, [r4, #20]
   3d308:	strb	r3, [r0]
   3d30c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d310:	ldrb	r1, [r4, #25]
   3d314:	cmp	r1, #0
   3d318:	bne	3d4b0 <flatcc_json_printer_double_vector_field@@Base+0x260>
   3d31c:	ldr	r0, [r4, #20]
   3d320:	ldr	r3, [r4, #16]
   3d324:	cmp	r0, r3
   3d328:	bcs	3d4d4 <flatcc_json_printer_double_vector_field@@Base+0x284>
   3d32c:	vldr	d0, [r7, #4]
   3d330:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   3d334:	ldr	r3, [r4, #20]
   3d338:	cmp	r6, #1
   3d33c:	add	r7, r7, #12
   3d340:	sub	r6, r6, #2
   3d344:	add	r0, r3, r0
   3d348:	str	r0, [r4, #20]
   3d34c:	beq	3d2f0 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   3d350:	mov	sl, #44	; 0x2c
   3d354:	mov	r9, #0
   3d358:	mov	r8, #32
   3d35c:	b	3d390 <flatcc_json_printer_double_vector_field@@Base+0x140>
   3d360:	ldr	r0, [r4, #20]
   3d364:	ldr	r3, [r4, #16]
   3d368:	cmp	r0, r3
   3d36c:	bcs	3d3f8 <flatcc_json_printer_double_vector_field@@Base+0x1a8>
   3d370:	vldmia	r7!, {d0}
   3d374:	bl	35110 <flatcc_json_parser_struct_as_root@@Base+0x1328>
   3d378:	ldr	r3, [r4, #20]
   3d37c:	cmp	r6, #0
   3d380:	sub	r6, r6, #1
   3d384:	add	r0, r3, r0
   3d388:	str	r0, [r4, #20]
   3d38c:	beq	3d2f0 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   3d390:	add	r3, r0, #1
   3d394:	str	r3, [r4, #20]
   3d398:	strb	sl, [r0]
   3d39c:	ldrb	r3, [r4, #25]
   3d3a0:	cmp	r3, #0
   3d3a4:	beq	3d360 <flatcc_json_printer_double_vector_field@@Base+0x110>
   3d3a8:	ldr	r3, [r4, #20]
   3d3ac:	add	r2, r3, #1
   3d3b0:	str	r2, [r4, #20]
   3d3b4:	mov	r2, #10
   3d3b8:	strb	r2, [r3]
   3d3bc:	ldrb	r2, [r4, #25]
   3d3c0:	ldr	r5, [r4, #32]
   3d3c4:	ldr	r0, [r4, #20]
   3d3c8:	ldr	r3, [r4, #16]
   3d3cc:	mul	r5, r5, r2
   3d3d0:	add	r2, r0, r5
   3d3d4:	cmp	r3, r2
   3d3d8:	bcc	3d410 <flatcc_json_printer_double_vector_field@@Base+0x1c0>
   3d3dc:	mov	r2, r5
   3d3e0:	mov	r1, r8
   3d3e4:	bl	145c4 <memset@plt>
   3d3e8:	ldr	r0, [r4, #20]
   3d3ec:	add	r0, r0, r5
   3d3f0:	str	r0, [r4, #20]
   3d3f4:	b	3d370 <flatcc_json_printer_double_vector_field@@Base+0x120>
   3d3f8:	mov	r0, r4
   3d3fc:	ldr	r3, [r4, #44]	; 0x2c
   3d400:	mov	r1, r9
   3d404:	blx	r3
   3d408:	ldr	r0, [r4, #20]
   3d40c:	b	3d370 <flatcc_json_printer_double_vector_field@@Base+0x120>
   3d410:	cmp	r0, r3
   3d414:	bcs	3d468 <flatcc_json_printer_double_vector_field@@Base+0x218>
   3d418:	sub	fp, r3, r0
   3d41c:	cmp	r5, fp
   3d420:	bls	3d3dc <flatcc_json_printer_double_vector_field@@Base+0x18c>
   3d424:	mov	r2, fp
   3d428:	mov	r1, r8
   3d42c:	bl	145c4 <memset@plt>
   3d430:	ldr	r1, [r4, #20]
   3d434:	ldr	r2, [r4, #44]	; 0x2c
   3d438:	add	r1, r1, fp
   3d43c:	str	r1, [r4, #20]
   3d440:	mov	r0, r4
   3d444:	mov	r1, r9
   3d448:	blx	r2
   3d44c:	ldr	r0, [r4, #20]
   3d450:	ldr	r2, [r4, #16]
   3d454:	sub	r5, r5, fp
   3d458:	sub	fp, r2, r0
   3d45c:	cmp	r5, fp
   3d460:	bhi	3d424 <flatcc_json_printer_double_vector_field@@Base+0x1d4>
   3d464:	b	3d3dc <flatcc_json_printer_double_vector_field@@Base+0x18c>
   3d468:	ldr	r3, [r4, #44]	; 0x2c
   3d46c:	mov	r0, r4
   3d470:	mov	r1, r9
   3d474:	blx	r3
   3d478:	ldr	r3, [r4, #16]
   3d47c:	ldr	r0, [r4, #20]
   3d480:	b	3d418 <flatcc_json_printer_double_vector_field@@Base+0x1c8>
   3d484:	add	r2, r0, #1
   3d488:	mov	r3, #10
   3d48c:	str	r2, [r4, #20]
   3d490:	strb	r3, [r0]
   3d494:	ldr	r3, [r4, #32]
   3d498:	mov	r0, r4
   3d49c:	sub	r3, r3, #1
   3d4a0:	str	r3, [r4, #32]
   3d4a4:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3d4a8:	ldr	r0, [r4, #20]
   3d4ac:	b	3d2fc <flatcc_json_printer_double_vector_field@@Base+0xac>
   3d4b0:	ldr	r3, [r4, #20]
   3d4b4:	mov	r2, #10
   3d4b8:	add	r1, r3, #1
   3d4bc:	str	r1, [r4, #20]
   3d4c0:	mov	r0, r4
   3d4c4:	strb	r2, [r3]
   3d4c8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3d4cc:	ldr	r0, [r4, #20]
   3d4d0:	b	3d32c <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3d4d4:	mov	r0, r4
   3d4d8:	ldr	r3, [r4, #44]	; 0x2c
   3d4dc:	blx	r3
   3d4e0:	ldr	r0, [r4, #20]
   3d4e4:	b	3d32c <flatcc_json_printer_double_vector_field@@Base+0xdc>

0003d4e8 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   3d4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d4ec:	sub	sp, sp, #12
   3d4f0:	ldrb	r5, [r0, #27]
   3d4f4:	ldr	fp, [sp, #52]	; 0x34
   3d4f8:	cmp	r5, #0
   3d4fc:	ldr	r5, [sp, #48]	; 0x30
   3d500:	bne	3d694 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1ac>
   3d504:	mov	r6, r3
   3d508:	add	r3, r2, #2
   3d50c:	ldr	r2, [r1, #8]
   3d510:	lsl	r3, r3, #1
   3d514:	cmp	r2, r3
   3d518:	mov	lr, r1
   3d51c:	bgt	3d528 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x40>
   3d520:	add	sp, sp, #12
   3d524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d528:	ldr	r2, [r1, #4]
   3d52c:	ldrh	r2, [r2, r3]
   3d530:	cmp	r2, #0
   3d534:	beq	3d520 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   3d538:	mov	r4, r0
   3d53c:	ldr	r0, [r1]
   3d540:	adds	ip, r0, r2
   3d544:	beq	3d520 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   3d548:	ldr	r3, [r1, #16]
   3d54c:	cmp	r3, #0
   3d550:	add	r3, r3, #1
   3d554:	str	r3, [r1, #16]
   3d558:	ldrne	r3, [r4, #20]
   3d55c:	movne	r1, #44	; 0x2c
   3d560:	addne	lr, r3, #1
   3d564:	strne	lr, [r4, #20]
   3d568:	strbne	r1, [r3]
   3d56c:	ldr	r3, [r0, r2]
   3d570:	mov	r1, r6
   3d574:	mov	r2, r5
   3d578:	mov	r0, r4
   3d57c:	ldr	r9, [ip, r3]
   3d580:	add	sl, ip, r3
   3d584:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3d588:	ldr	r3, [r4, #32]
   3d58c:	ldr	r2, [r4, #20]
   3d590:	add	r3, r3, #1
   3d594:	add	r0, r2, #1
   3d598:	mov	r1, #91	; 0x5b
   3d59c:	cmp	r9, #0
   3d5a0:	str	r3, [r4, #32]
   3d5a4:	str	r0, [r4, #20]
   3d5a8:	strb	r1, [r2]
   3d5ac:	beq	3d70c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3d5b0:	ldrb	r1, [r4, #25]
   3d5b4:	cmp	r1, #0
   3d5b8:	bne	3d77c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x294>
   3d5bc:	ldr	r2, [r4, #20]
   3d5c0:	ldr	r3, [r4, #16]
   3d5c4:	cmp	r2, r3
   3d5c8:	bcs	3d79c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x2b4>
   3d5cc:	ldrb	r1, [sl, #4]
   3d5d0:	mov	r0, r4
   3d5d4:	blx	fp
   3d5d8:	cmp	r9, #1
   3d5dc:	add	r6, sl, #5
   3d5e0:	beq	3d70c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3d5e4:	add	r3, r9, #4
   3d5e8:	str	r3, [sp, #4]
   3d5ec:	mov	r8, #0
   3d5f0:	mov	r7, #32
   3d5f4:	b	3d624 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x13c>
   3d5f8:	ldr	r2, [r4, #20]
   3d5fc:	ldr	r3, [r4, #16]
   3d600:	cmp	r2, r3
   3d604:	bcs	3d6a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3d608:	ldrb	r1, [r6], #1
   3d60c:	mov	r0, r4
   3d610:	blx	fp
   3d614:	ldr	r3, [sp, #4]
   3d618:	sub	r3, r3, r6
   3d61c:	cmn	sl, r3
   3d620:	beq	3d70c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3d624:	ldr	r3, [r4, #20]
   3d628:	add	r2, r3, #1
   3d62c:	str	r2, [r4, #20]
   3d630:	mov	r2, #44	; 0x2c
   3d634:	strb	r2, [r3]
   3d638:	ldrb	r3, [r4, #25]
   3d63c:	cmp	r3, #0
   3d640:	beq	3d5f8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x110>
   3d644:	ldr	r3, [r4, #20]
   3d648:	add	r2, r3, #1
   3d64c:	str	r2, [r4, #20]
   3d650:	mov	r2, #10
   3d654:	strb	r2, [r3]
   3d658:	ldrb	r3, [r4, #25]
   3d65c:	ldr	r2, [r4, #32]
   3d660:	ldr	r0, [r4, #20]
   3d664:	ldr	r5, [r4, #16]
   3d668:	mul	r9, r2, r3
   3d66c:	add	r2, r0, r9
   3d670:	cmp	r5, r2
   3d674:	bcc	3d6b4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>
   3d678:	mov	r2, r9
   3d67c:	mov	r1, r7
   3d680:	bl	145c4 <memset@plt>
   3d684:	ldr	r2, [r4, #20]
   3d688:	add	r3, r2, r9
   3d68c:	str	r3, [r4, #20]
   3d690:	b	3d608 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x120>
   3d694:	add	sp, sp, #12
   3d698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d69c:	b	3b2c8 <flatcc_json_printer_uint8_vector_field@@Base>
   3d6a0:	ldr	r3, [r4, #44]	; 0x2c
   3d6a4:	mov	r1, r8
   3d6a8:	mov	r0, r4
   3d6ac:	blx	r3
   3d6b0:	b	3d608 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x120>
   3d6b4:	cmp	r0, r5
   3d6b8:	bcs	3d734 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x24c>
   3d6bc:	sub	r5, r5, r0
   3d6c0:	cmp	r9, r5
   3d6c4:	bls	3d678 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x190>
   3d6c8:	mov	r2, r5
   3d6cc:	mov	r1, r7
   3d6d0:	bl	145c4 <memset@plt>
   3d6d4:	ldr	r3, [r4, #20]
   3d6d8:	mov	r0, r4
   3d6dc:	add	r3, r3, r5
   3d6e0:	str	r3, [r4, #20]
   3d6e4:	ldr	r2, [r4, #44]	; 0x2c
   3d6e8:	mov	r1, r8
   3d6ec:	blx	r2
   3d6f0:	ldr	r0, [r4, #20]
   3d6f4:	ldr	r3, [r4, #16]
   3d6f8:	sub	r9, r9, r5
   3d6fc:	sub	r5, r3, r0
   3d700:	cmp	r9, r5
   3d704:	bhi	3d6c8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e0>
   3d708:	b	3d678 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x190>
   3d70c:	ldrb	r3, [r4, #25]
   3d710:	cmp	r3, #0
   3d714:	bne	3d750 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x268>
   3d718:	ldr	r3, [r4, #20]
   3d71c:	mov	r2, #93	; 0x5d
   3d720:	add	r1, r3, #1
   3d724:	str	r1, [r4, #20]
   3d728:	strb	r2, [r3]
   3d72c:	add	sp, sp, #12
   3d730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d734:	mov	r0, r4
   3d738:	ldr	r2, [r4, #44]	; 0x2c
   3d73c:	mov	r1, r8
   3d740:	blx	r2
   3d744:	ldr	r5, [r4, #16]
   3d748:	ldr	r0, [r4, #20]
   3d74c:	b	3d6bc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d4>
   3d750:	ldr	r3, [r4, #20]
   3d754:	mov	r2, #10
   3d758:	add	r1, r3, #1
   3d75c:	str	r1, [r4, #20]
   3d760:	strb	r2, [r3]
   3d764:	ldr	r3, [r4, #32]
   3d768:	mov	r0, r4
   3d76c:	sub	r3, r3, #1
   3d770:	str	r3, [r4, #32]
   3d774:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3d778:	b	3d718 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x230>
   3d77c:	ldr	r3, [r4, #20]
   3d780:	mov	r2, #10
   3d784:	add	r1, r3, #1
   3d788:	str	r1, [r4, #20]
   3d78c:	mov	r0, r4
   3d790:	strb	r2, [r3]
   3d794:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3d798:	b	3d5cc <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>
   3d79c:	ldr	r3, [r4, #44]	; 0x2c
   3d7a0:	mov	r0, r4
   3d7a4:	blx	r3
   3d7a8:	b	3d5cc <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>

0003d7ac <flatcc_json_printer_utype_enum_vector_field@@Base>:
   3d7ac:	b	3d4e8 <flatcc_json_printer_uint8_enum_vector_field@@Base>

0003d7b0 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   3d7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d7b4:	sub	sp, sp, #4
   3d7b8:	ldrb	r5, [r0, #27]
   3d7bc:	ldr	sl, [sp, #44]	; 0x2c
   3d7c0:	cmp	r5, #0
   3d7c4:	ldr	r5, [sp, #40]	; 0x28
   3d7c8:	bne	3d954 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a4>
   3d7cc:	mov	r6, r3
   3d7d0:	add	r3, r2, #2
   3d7d4:	ldr	r2, [r1, #8]
   3d7d8:	lsl	r3, r3, #1
   3d7dc:	cmp	r2, r3
   3d7e0:	mov	lr, r1
   3d7e4:	bgt	3d7f0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x40>
   3d7e8:	add	sp, sp, #4
   3d7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d7f0:	ldr	r2, [r1, #4]
   3d7f4:	ldrh	r2, [r2, r3]
   3d7f8:	cmp	r2, #0
   3d7fc:	beq	3d7e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   3d800:	mov	r4, r0
   3d804:	ldr	r0, [r1]
   3d808:	adds	ip, r0, r2
   3d80c:	beq	3d7e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   3d810:	ldr	r3, [r1, #16]
   3d814:	cmp	r3, #0
   3d818:	add	r3, r3, #1
   3d81c:	str	r3, [r1, #16]
   3d820:	ldrne	r3, [r4, #20]
   3d824:	movne	r1, #44	; 0x2c
   3d828:	addne	lr, r3, #1
   3d82c:	strne	lr, [r4, #20]
   3d830:	strbne	r1, [r3]
   3d834:	ldr	r3, [r0, r2]
   3d838:	mov	r1, r6
   3d83c:	mov	r2, r5
   3d840:	mov	r0, r4
   3d844:	ldr	r6, [ip, r3]
   3d848:	add	r7, ip, r3
   3d84c:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3d850:	ldr	r3, [r4, #32]
   3d854:	ldr	r2, [r4, #20]
   3d858:	add	r3, r3, #1
   3d85c:	add	r0, r2, #1
   3d860:	mov	r1, #91	; 0x5b
   3d864:	cmp	r6, #0
   3d868:	str	r3, [r4, #32]
   3d86c:	str	r0, [r4, #20]
   3d870:	strb	r1, [r2]
   3d874:	beq	3d9cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x21c>
   3d878:	ldrb	r1, [r4, #25]
   3d87c:	cmp	r1, #0
   3d880:	bne	3da3c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x28c>
   3d884:	ldr	r2, [r4, #20]
   3d888:	ldr	r3, [r4, #16]
   3d88c:	cmp	r2, r3
   3d890:	bcs	3da5c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x2ac>
   3d894:	ldrh	r1, [r7, #4]
   3d898:	mov	r0, r4
   3d89c:	blx	sl
   3d8a0:	cmp	r6, #1
   3d8a4:	add	r7, r7, #6
   3d8a8:	sub	r6, r6, #2
   3d8ac:	beq	3d9cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x21c>
   3d8b0:	mov	r9, #0
   3d8b4:	mov	r8, #32
   3d8b8:	b	3d8e4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   3d8bc:	ldr	r2, [r4, #20]
   3d8c0:	ldr	r3, [r4, #16]
   3d8c4:	cmp	r2, r3
   3d8c8:	bcs	3d960 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b0>
   3d8cc:	ldrh	r1, [r7], #2
   3d8d0:	mov	r0, r4
   3d8d4:	blx	sl
   3d8d8:	cmp	r6, #0
   3d8dc:	sub	r6, r6, #1
   3d8e0:	beq	3d9cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x21c>
   3d8e4:	ldr	r3, [r4, #20]
   3d8e8:	add	r2, r3, #1
   3d8ec:	str	r2, [r4, #20]
   3d8f0:	mov	r2, #44	; 0x2c
   3d8f4:	strb	r2, [r3]
   3d8f8:	ldrb	r3, [r4, #25]
   3d8fc:	cmp	r3, #0
   3d900:	beq	3d8bc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x10c>
   3d904:	ldr	r3, [r4, #20]
   3d908:	add	r2, r3, #1
   3d90c:	str	r2, [r4, #20]
   3d910:	mov	r2, #10
   3d914:	strb	r2, [r3]
   3d918:	ldrb	r3, [r4, #25]
   3d91c:	ldr	fp, [r4, #32]
   3d920:	ldr	r0, [r4, #20]
   3d924:	ldr	r5, [r4, #16]
   3d928:	mul	fp, fp, r3
   3d92c:	add	r3, r0, fp
   3d930:	cmp	r5, r3
   3d934:	bcc	3d974 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c4>
   3d938:	mov	r2, fp
   3d93c:	mov	r1, r8
   3d940:	bl	145c4 <memset@plt>
   3d944:	ldr	r3, [r4, #20]
   3d948:	add	fp, r3, fp
   3d94c:	str	fp, [r4, #20]
   3d950:	b	3d8cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3d954:	add	sp, sp, #4
   3d958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d95c:	b	3b604 <flatcc_json_printer_uint16_vector_field@@Base>
   3d960:	ldr	r3, [r4, #44]	; 0x2c
   3d964:	mov	r1, r9
   3d968:	mov	r0, r4
   3d96c:	blx	r3
   3d970:	b	3d8cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3d974:	cmp	r0, r5
   3d978:	bcs	3d9f4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x244>
   3d97c:	sub	r5, r5, r0
   3d980:	cmp	fp, r5
   3d984:	bls	3d938 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   3d988:	mov	r2, r5
   3d98c:	mov	r1, r8
   3d990:	bl	145c4 <memset@plt>
   3d994:	ldr	r3, [r4, #20]
   3d998:	mov	r0, r4
   3d99c:	add	r3, r3, r5
   3d9a0:	str	r3, [r4, #20]
   3d9a4:	ldr	r2, [r4, #44]	; 0x2c
   3d9a8:	mov	r1, r9
   3d9ac:	blx	r2
   3d9b0:	ldr	r0, [r4, #20]
   3d9b4:	ldr	r3, [r4, #16]
   3d9b8:	sub	fp, fp, r5
   3d9bc:	sub	r5, r3, r0
   3d9c0:	cmp	fp, r5
   3d9c4:	bhi	3d988 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d8>
   3d9c8:	b	3d938 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   3d9cc:	ldrb	r3, [r4, #25]
   3d9d0:	cmp	r3, #0
   3d9d4:	bne	3da10 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x260>
   3d9d8:	ldr	r3, [r4, #20]
   3d9dc:	mov	r2, #93	; 0x5d
   3d9e0:	add	r1, r3, #1
   3d9e4:	str	r1, [r4, #20]
   3d9e8:	strb	r2, [r3]
   3d9ec:	add	sp, sp, #4
   3d9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d9f4:	mov	r0, r4
   3d9f8:	ldr	r3, [r4, #44]	; 0x2c
   3d9fc:	mov	r1, r9
   3da00:	blx	r3
   3da04:	ldr	r5, [r4, #16]
   3da08:	ldr	r0, [r4, #20]
   3da0c:	b	3d97c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1cc>
   3da10:	ldr	r3, [r4, #20]
   3da14:	mov	r2, #10
   3da18:	add	r1, r3, #1
   3da1c:	str	r1, [r4, #20]
   3da20:	strb	r2, [r3]
   3da24:	ldr	r3, [r4, #32]
   3da28:	mov	r0, r4
   3da2c:	sub	r3, r3, #1
   3da30:	str	r3, [r4, #32]
   3da34:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3da38:	b	3d9d8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x228>
   3da3c:	ldr	r3, [r4, #20]
   3da40:	mov	r2, #10
   3da44:	add	r1, r3, #1
   3da48:	str	r1, [r4, #20]
   3da4c:	mov	r0, r4
   3da50:	strb	r2, [r3]
   3da54:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3da58:	b	3d894 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>
   3da5c:	ldr	r3, [r4, #44]	; 0x2c
   3da60:	mov	r0, r4
   3da64:	blx	r3
   3da68:	b	3d894 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>

0003da6c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3da6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da70:	sub	sp, sp, #4
   3da74:	ldrb	r5, [r0, #27]
   3da78:	ldr	sl, [sp, #44]	; 0x2c
   3da7c:	cmp	r5, #0
   3da80:	ldr	r5, [sp, #40]	; 0x28
   3da84:	bne	3dc10 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a4>
   3da88:	mov	r6, r3
   3da8c:	add	r3, r2, #2
   3da90:	ldr	r2, [r1, #8]
   3da94:	lsl	r3, r3, #1
   3da98:	cmp	r2, r3
   3da9c:	mov	lr, r1
   3daa0:	bgt	3daac <flatcc_json_printer_uint32_enum_vector_field@@Base+0x40>
   3daa4:	add	sp, sp, #4
   3daa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3daac:	ldr	r2, [r1, #4]
   3dab0:	ldrh	r2, [r2, r3]
   3dab4:	cmp	r2, #0
   3dab8:	beq	3daa4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   3dabc:	mov	r4, r0
   3dac0:	ldr	r0, [r1]
   3dac4:	adds	ip, r0, r2
   3dac8:	beq	3daa4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   3dacc:	ldr	r3, [r1, #16]
   3dad0:	cmp	r3, #0
   3dad4:	add	r3, r3, #1
   3dad8:	str	r3, [r1, #16]
   3dadc:	ldrne	r3, [r4, #20]
   3dae0:	movne	r1, #44	; 0x2c
   3dae4:	addne	lr, r3, #1
   3dae8:	strne	lr, [r4, #20]
   3daec:	strbne	r1, [r3]
   3daf0:	ldr	r3, [r0, r2]
   3daf4:	mov	r1, r6
   3daf8:	mov	r2, r5
   3dafc:	mov	r0, r4
   3db00:	ldr	r6, [ip, r3]
   3db04:	add	r7, ip, r3
   3db08:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3db0c:	ldr	r3, [r4, #32]
   3db10:	ldr	r2, [r4, #20]
   3db14:	add	r3, r3, #1
   3db18:	add	r0, r2, #1
   3db1c:	mov	r1, #91	; 0x5b
   3db20:	cmp	r6, #0
   3db24:	str	r3, [r4, #32]
   3db28:	str	r0, [r4, #20]
   3db2c:	strb	r1, [r2]
   3db30:	beq	3dc88 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x21c>
   3db34:	ldrb	r1, [r4, #25]
   3db38:	cmp	r1, #0
   3db3c:	bne	3dcf8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x28c>
   3db40:	ldr	r2, [r4, #20]
   3db44:	ldr	r3, [r4, #16]
   3db48:	cmp	r2, r3
   3db4c:	bcs	3dd18 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x2ac>
   3db50:	ldr	r1, [r7, #4]
   3db54:	mov	r0, r4
   3db58:	blx	sl
   3db5c:	cmp	r6, #1
   3db60:	add	r7, r7, #8
   3db64:	sub	r6, r6, #2
   3db68:	beq	3dc88 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x21c>
   3db6c:	mov	r9, #0
   3db70:	mov	r8, #32
   3db74:	b	3dba0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   3db78:	ldr	r2, [r4, #20]
   3db7c:	ldr	r3, [r4, #16]
   3db80:	cmp	r2, r3
   3db84:	bcs	3dc1c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b0>
   3db88:	ldr	r1, [r7], #4
   3db8c:	mov	r0, r4
   3db90:	blx	sl
   3db94:	cmp	r6, #0
   3db98:	sub	r6, r6, #1
   3db9c:	beq	3dc88 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x21c>
   3dba0:	ldr	r3, [r4, #20]
   3dba4:	add	r2, r3, #1
   3dba8:	str	r2, [r4, #20]
   3dbac:	mov	r2, #44	; 0x2c
   3dbb0:	strb	r2, [r3]
   3dbb4:	ldrb	r3, [r4, #25]
   3dbb8:	cmp	r3, #0
   3dbbc:	beq	3db78 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x10c>
   3dbc0:	ldr	r3, [r4, #20]
   3dbc4:	add	r2, r3, #1
   3dbc8:	str	r2, [r4, #20]
   3dbcc:	mov	r2, #10
   3dbd0:	strb	r2, [r3]
   3dbd4:	ldrb	r3, [r4, #25]
   3dbd8:	ldr	fp, [r4, #32]
   3dbdc:	ldr	r0, [r4, #20]
   3dbe0:	ldr	r5, [r4, #16]
   3dbe4:	mul	fp, fp, r3
   3dbe8:	add	r3, r0, fp
   3dbec:	cmp	r5, r3
   3dbf0:	bcc	3dc30 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c4>
   3dbf4:	mov	r2, fp
   3dbf8:	mov	r1, r8
   3dbfc:	bl	145c4 <memset@plt>
   3dc00:	ldr	r3, [r4, #20]
   3dc04:	add	fp, r3, fp
   3dc08:	str	fp, [r4, #20]
   3dc0c:	b	3db88 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3dc10:	add	sp, sp, #4
   3dc14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dc18:	b	3b9dc <flatcc_json_printer_uint32_vector_field@@Base>
   3dc1c:	ldr	r3, [r4, #44]	; 0x2c
   3dc20:	mov	r1, r9
   3dc24:	mov	r0, r4
   3dc28:	blx	r3
   3dc2c:	b	3db88 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3dc30:	cmp	r0, r5
   3dc34:	bcs	3dcb0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x244>
   3dc38:	sub	r5, r5, r0
   3dc3c:	cmp	fp, r5
   3dc40:	bls	3dbf4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   3dc44:	mov	r2, r5
   3dc48:	mov	r1, r8
   3dc4c:	bl	145c4 <memset@plt>
   3dc50:	ldr	r3, [r4, #20]
   3dc54:	mov	r0, r4
   3dc58:	add	r3, r3, r5
   3dc5c:	str	r3, [r4, #20]
   3dc60:	ldr	r2, [r4, #44]	; 0x2c
   3dc64:	mov	r1, r9
   3dc68:	blx	r2
   3dc6c:	ldr	r0, [r4, #20]
   3dc70:	ldr	r3, [r4, #16]
   3dc74:	sub	fp, fp, r5
   3dc78:	sub	r5, r3, r0
   3dc7c:	cmp	fp, r5
   3dc80:	bhi	3dc44 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d8>
   3dc84:	b	3dbf4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   3dc88:	ldrb	r3, [r4, #25]
   3dc8c:	cmp	r3, #0
   3dc90:	bne	3dccc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x260>
   3dc94:	ldr	r3, [r4, #20]
   3dc98:	mov	r2, #93	; 0x5d
   3dc9c:	add	r1, r3, #1
   3dca0:	str	r1, [r4, #20]
   3dca4:	strb	r2, [r3]
   3dca8:	add	sp, sp, #4
   3dcac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dcb0:	mov	r0, r4
   3dcb4:	ldr	r3, [r4, #44]	; 0x2c
   3dcb8:	mov	r1, r9
   3dcbc:	blx	r3
   3dcc0:	ldr	r5, [r4, #16]
   3dcc4:	ldr	r0, [r4, #20]
   3dcc8:	b	3dc38 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1cc>
   3dccc:	ldr	r3, [r4, #20]
   3dcd0:	mov	r2, #10
   3dcd4:	add	r1, r3, #1
   3dcd8:	str	r1, [r4, #20]
   3dcdc:	strb	r2, [r3]
   3dce0:	ldr	r3, [r4, #32]
   3dce4:	mov	r0, r4
   3dce8:	sub	r3, r3, #1
   3dcec:	str	r3, [r4, #32]
   3dcf0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3dcf4:	b	3dc94 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x228>
   3dcf8:	ldr	r3, [r4, #20]
   3dcfc:	mov	r2, #10
   3dd00:	add	r1, r3, #1
   3dd04:	str	r1, [r4, #20]
   3dd08:	mov	r0, r4
   3dd0c:	strb	r2, [r3]
   3dd10:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3dd14:	b	3db50 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>
   3dd18:	ldr	r3, [r4, #44]	; 0x2c
   3dd1c:	mov	r0, r4
   3dd20:	blx	r3
   3dd24:	b	3db50 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>

0003dd28 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3dd28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd2c:	sub	sp, sp, #4
   3dd30:	ldrb	r5, [r0, #27]
   3dd34:	ldr	sl, [sp, #44]	; 0x2c
   3dd38:	cmp	r5, #0
   3dd3c:	ldr	r5, [sp, #40]	; 0x28
   3dd40:	bne	3decc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a4>
   3dd44:	mov	r6, r3
   3dd48:	add	r3, r2, #2
   3dd4c:	ldr	r2, [r1, #8]
   3dd50:	lsl	r3, r3, #1
   3dd54:	cmp	r2, r3
   3dd58:	mov	lr, r1
   3dd5c:	bgt	3dd68 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x40>
   3dd60:	add	sp, sp, #4
   3dd64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dd68:	ldr	r2, [r1, #4]
   3dd6c:	ldrh	r2, [r2, r3]
   3dd70:	cmp	r2, #0
   3dd74:	beq	3dd60 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3dd78:	mov	r4, r0
   3dd7c:	ldr	r0, [r1]
   3dd80:	adds	ip, r0, r2
   3dd84:	beq	3dd60 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3dd88:	ldr	r3, [r1, #16]
   3dd8c:	cmp	r3, #0
   3dd90:	add	r3, r3, #1
   3dd94:	str	r3, [r1, #16]
   3dd98:	ldrne	r3, [r4, #20]
   3dd9c:	movne	r1, #44	; 0x2c
   3dda0:	addne	lr, r3, #1
   3dda4:	strne	lr, [r4, #20]
   3dda8:	strbne	r1, [r3]
   3ddac:	ldr	r3, [r0, r2]
   3ddb0:	mov	r1, r6
   3ddb4:	mov	r2, r5
   3ddb8:	mov	r0, r4
   3ddbc:	ldr	r6, [ip, r3]
   3ddc0:	add	r7, ip, r3
   3ddc4:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3ddc8:	ldr	r3, [r4, #32]
   3ddcc:	ldr	r2, [r4, #20]
   3ddd0:	add	r3, r3, #1
   3ddd4:	add	r0, r2, #1
   3ddd8:	mov	r1, #91	; 0x5b
   3dddc:	cmp	r6, #0
   3dde0:	str	r3, [r4, #32]
   3dde4:	str	r0, [r4, #20]
   3dde8:	strb	r1, [r2]
   3ddec:	beq	3df44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x21c>
   3ddf0:	ldrb	r1, [r4, #25]
   3ddf4:	cmp	r1, #0
   3ddf8:	bne	3dfb4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x28c>
   3ddfc:	ldr	r2, [r4, #20]
   3de00:	ldr	r3, [r4, #16]
   3de04:	cmp	r2, r3
   3de08:	bcs	3dfd4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x2ac>
   3de0c:	ldrd	r2, [r7, #4]
   3de10:	mov	r0, r4
   3de14:	blx	sl
   3de18:	cmp	r6, #1
   3de1c:	add	r7, r7, #12
   3de20:	sub	r6, r6, #2
   3de24:	beq	3df44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x21c>
   3de28:	mov	r9, #0
   3de2c:	mov	r8, #32
   3de30:	b	3de5c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   3de34:	ldr	r2, [r4, #20]
   3de38:	ldr	r3, [r4, #16]
   3de3c:	cmp	r2, r3
   3de40:	bcs	3ded8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b0>
   3de44:	ldrd	r2, [r7], #8
   3de48:	mov	r0, r4
   3de4c:	blx	sl
   3de50:	cmp	r6, #0
   3de54:	sub	r6, r6, #1
   3de58:	beq	3df44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x21c>
   3de5c:	ldr	r3, [r4, #20]
   3de60:	add	r2, r3, #1
   3de64:	str	r2, [r4, #20]
   3de68:	mov	r2, #44	; 0x2c
   3de6c:	strb	r2, [r3]
   3de70:	ldrb	r3, [r4, #25]
   3de74:	cmp	r3, #0
   3de78:	beq	3de34 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x10c>
   3de7c:	ldr	r3, [r4, #20]
   3de80:	add	r2, r3, #1
   3de84:	str	r2, [r4, #20]
   3de88:	mov	r2, #10
   3de8c:	strb	r2, [r3]
   3de90:	ldrb	r3, [r4, #25]
   3de94:	ldr	fp, [r4, #32]
   3de98:	ldr	r0, [r4, #20]
   3de9c:	ldr	r5, [r4, #16]
   3dea0:	mul	fp, fp, r3
   3dea4:	add	r3, r0, fp
   3dea8:	cmp	r5, r3
   3deac:	bcc	3deec <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c4>
   3deb0:	mov	r2, fp
   3deb4:	mov	r1, r8
   3deb8:	bl	145c4 <memset@plt>
   3debc:	ldr	r3, [r4, #20]
   3dec0:	add	fp, r3, fp
   3dec4:	str	fp, [r4, #20]
   3dec8:	b	3de44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3decc:	add	sp, sp, #4
   3ded0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ded4:	b	3bc78 <flatcc_json_printer_uint64_vector_field@@Base>
   3ded8:	ldr	r3, [r4, #44]	; 0x2c
   3dedc:	mov	r1, r9
   3dee0:	mov	r0, r4
   3dee4:	blx	r3
   3dee8:	b	3de44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3deec:	cmp	r0, r5
   3def0:	bcs	3df6c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x244>
   3def4:	sub	r5, r5, r0
   3def8:	cmp	fp, r5
   3defc:	bls	3deb0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   3df00:	mov	r2, r5
   3df04:	mov	r1, r8
   3df08:	bl	145c4 <memset@plt>
   3df0c:	ldr	r3, [r4, #20]
   3df10:	mov	r0, r4
   3df14:	add	r3, r3, r5
   3df18:	str	r3, [r4, #20]
   3df1c:	ldr	r2, [r4, #44]	; 0x2c
   3df20:	mov	r1, r9
   3df24:	blx	r2
   3df28:	ldr	r0, [r4, #20]
   3df2c:	ldr	r3, [r4, #16]
   3df30:	sub	fp, fp, r5
   3df34:	sub	r5, r3, r0
   3df38:	cmp	fp, r5
   3df3c:	bhi	3df00 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d8>
   3df40:	b	3deb0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   3df44:	ldrb	r3, [r4, #25]
   3df48:	cmp	r3, #0
   3df4c:	bne	3df88 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x260>
   3df50:	ldr	r3, [r4, #20]
   3df54:	mov	r2, #93	; 0x5d
   3df58:	add	r1, r3, #1
   3df5c:	str	r1, [r4, #20]
   3df60:	strb	r2, [r3]
   3df64:	add	sp, sp, #4
   3df68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df6c:	mov	r0, r4
   3df70:	ldr	r3, [r4, #44]	; 0x2c
   3df74:	mov	r1, r9
   3df78:	blx	r3
   3df7c:	ldr	r5, [r4, #16]
   3df80:	ldr	r0, [r4, #20]
   3df84:	b	3def4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1cc>
   3df88:	ldr	r3, [r4, #20]
   3df8c:	mov	r2, #10
   3df90:	add	r1, r3, #1
   3df94:	str	r1, [r4, #20]
   3df98:	strb	r2, [r3]
   3df9c:	ldr	r3, [r4, #32]
   3dfa0:	mov	r0, r4
   3dfa4:	sub	r3, r3, #1
   3dfa8:	str	r3, [r4, #32]
   3dfac:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3dfb0:	b	3df50 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x228>
   3dfb4:	ldr	r3, [r4, #20]
   3dfb8:	mov	r2, #10
   3dfbc:	add	r1, r3, #1
   3dfc0:	str	r1, [r4, #20]
   3dfc4:	mov	r0, r4
   3dfc8:	strb	r2, [r3]
   3dfcc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3dfd0:	b	3de0c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>
   3dfd4:	ldr	r3, [r4, #44]	; 0x2c
   3dfd8:	mov	r0, r4
   3dfdc:	blx	r3
   3dfe0:	b	3de0c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>

0003dfe4 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3dfe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dfe8:	sub	sp, sp, #12
   3dfec:	ldrb	r5, [r0, #27]
   3dff0:	ldr	fp, [sp, #52]	; 0x34
   3dff4:	cmp	r5, #0
   3dff8:	ldr	r5, [sp, #48]	; 0x30
   3dffc:	bne	3e190 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1ac>
   3e000:	mov	r6, r3
   3e004:	add	r3, r2, #2
   3e008:	ldr	r2, [r1, #8]
   3e00c:	lsl	r3, r3, #1
   3e010:	cmp	r2, r3
   3e014:	mov	lr, r1
   3e018:	bgt	3e024 <flatcc_json_printer_int8_enum_vector_field@@Base+0x40>
   3e01c:	add	sp, sp, #12
   3e020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e024:	ldr	r2, [r1, #4]
   3e028:	ldrh	r2, [r2, r3]
   3e02c:	cmp	r2, #0
   3e030:	beq	3e01c <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3e034:	mov	r4, r0
   3e038:	ldr	r0, [r1]
   3e03c:	adds	ip, r0, r2
   3e040:	beq	3e01c <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3e044:	ldr	r3, [r1, #16]
   3e048:	cmp	r3, #0
   3e04c:	add	r3, r3, #1
   3e050:	str	r3, [r1, #16]
   3e054:	ldrne	r3, [r4, #20]
   3e058:	movne	r1, #44	; 0x2c
   3e05c:	addne	lr, r3, #1
   3e060:	strne	lr, [r4, #20]
   3e064:	strbne	r1, [r3]
   3e068:	ldr	r3, [r0, r2]
   3e06c:	mov	r1, r6
   3e070:	mov	r2, r5
   3e074:	mov	r0, r4
   3e078:	ldr	r9, [ip, r3]
   3e07c:	add	sl, ip, r3
   3e080:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3e084:	ldr	r3, [r4, #32]
   3e088:	ldr	r2, [r4, #20]
   3e08c:	add	r3, r3, #1
   3e090:	add	r0, r2, #1
   3e094:	mov	r1, #91	; 0x5b
   3e098:	cmp	r9, #0
   3e09c:	str	r3, [r4, #32]
   3e0a0:	str	r0, [r4, #20]
   3e0a4:	strb	r1, [r2]
   3e0a8:	beq	3e208 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3e0ac:	ldrb	r1, [r4, #25]
   3e0b0:	cmp	r1, #0
   3e0b4:	bne	3e278 <flatcc_json_printer_int8_enum_vector_field@@Base+0x294>
   3e0b8:	ldr	r2, [r4, #20]
   3e0bc:	ldr	r3, [r4, #16]
   3e0c0:	cmp	r2, r3
   3e0c4:	bcs	3e298 <flatcc_json_printer_int8_enum_vector_field@@Base+0x2b4>
   3e0c8:	ldrsb	r1, [sl, #4]
   3e0cc:	mov	r0, r4
   3e0d0:	blx	fp
   3e0d4:	cmp	r9, #1
   3e0d8:	add	r6, sl, #5
   3e0dc:	beq	3e208 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3e0e0:	add	r3, r9, #4
   3e0e4:	str	r3, [sp, #4]
   3e0e8:	mov	r8, #0
   3e0ec:	mov	r7, #32
   3e0f0:	b	3e120 <flatcc_json_printer_int8_enum_vector_field@@Base+0x13c>
   3e0f4:	ldr	r2, [r4, #20]
   3e0f8:	ldr	r3, [r4, #16]
   3e0fc:	cmp	r2, r3
   3e100:	bcs	3e19c <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3e104:	ldrsb	r1, [r6], #1
   3e108:	mov	r0, r4
   3e10c:	blx	fp
   3e110:	ldr	r3, [sp, #4]
   3e114:	sub	r3, r3, r6
   3e118:	cmn	sl, r3
   3e11c:	beq	3e208 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3e120:	ldr	r3, [r4, #20]
   3e124:	add	r2, r3, #1
   3e128:	str	r2, [r4, #20]
   3e12c:	mov	r2, #44	; 0x2c
   3e130:	strb	r2, [r3]
   3e134:	ldrb	r3, [r4, #25]
   3e138:	cmp	r3, #0
   3e13c:	beq	3e0f4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x110>
   3e140:	ldr	r3, [r4, #20]
   3e144:	add	r2, r3, #1
   3e148:	str	r2, [r4, #20]
   3e14c:	mov	r2, #10
   3e150:	strb	r2, [r3]
   3e154:	ldrb	r3, [r4, #25]
   3e158:	ldr	r2, [r4, #32]
   3e15c:	ldr	r0, [r4, #20]
   3e160:	ldr	r5, [r4, #16]
   3e164:	mul	r9, r2, r3
   3e168:	add	r2, r0, r9
   3e16c:	cmp	r5, r2
   3e170:	bcc	3e1b0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>
   3e174:	mov	r2, r9
   3e178:	mov	r1, r7
   3e17c:	bl	145c4 <memset@plt>
   3e180:	ldr	r2, [r4, #20]
   3e184:	add	r3, r2, r9
   3e188:	str	r3, [r4, #20]
   3e18c:	b	3e104 <flatcc_json_printer_int8_enum_vector_field@@Base+0x120>
   3e190:	add	sp, sp, #12
   3e194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e198:	b	3bf10 <flatcc_json_printer_int8_vector_field@@Base>
   3e19c:	ldr	r3, [r4, #44]	; 0x2c
   3e1a0:	mov	r1, r8
   3e1a4:	mov	r0, r4
   3e1a8:	blx	r3
   3e1ac:	b	3e104 <flatcc_json_printer_int8_enum_vector_field@@Base+0x120>
   3e1b0:	cmp	r0, r5
   3e1b4:	bcs	3e230 <flatcc_json_printer_int8_enum_vector_field@@Base+0x24c>
   3e1b8:	sub	r5, r5, r0
   3e1bc:	cmp	r9, r5
   3e1c0:	bls	3e174 <flatcc_json_printer_int8_enum_vector_field@@Base+0x190>
   3e1c4:	mov	r2, r5
   3e1c8:	mov	r1, r7
   3e1cc:	bl	145c4 <memset@plt>
   3e1d0:	ldr	r3, [r4, #20]
   3e1d4:	mov	r0, r4
   3e1d8:	add	r3, r3, r5
   3e1dc:	str	r3, [r4, #20]
   3e1e0:	ldr	r2, [r4, #44]	; 0x2c
   3e1e4:	mov	r1, r8
   3e1e8:	blx	r2
   3e1ec:	ldr	r0, [r4, #20]
   3e1f0:	ldr	r3, [r4, #16]
   3e1f4:	sub	r9, r9, r5
   3e1f8:	sub	r5, r3, r0
   3e1fc:	cmp	r9, r5
   3e200:	bhi	3e1c4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e0>
   3e204:	b	3e174 <flatcc_json_printer_int8_enum_vector_field@@Base+0x190>
   3e208:	ldrb	r3, [r4, #25]
   3e20c:	cmp	r3, #0
   3e210:	bne	3e24c <flatcc_json_printer_int8_enum_vector_field@@Base+0x268>
   3e214:	ldr	r3, [r4, #20]
   3e218:	mov	r2, #93	; 0x5d
   3e21c:	add	r1, r3, #1
   3e220:	str	r1, [r4, #20]
   3e224:	strb	r2, [r3]
   3e228:	add	sp, sp, #12
   3e22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e230:	mov	r0, r4
   3e234:	ldr	r2, [r4, #44]	; 0x2c
   3e238:	mov	r1, r8
   3e23c:	blx	r2
   3e240:	ldr	r5, [r4, #16]
   3e244:	ldr	r0, [r4, #20]
   3e248:	b	3e1b8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d4>
   3e24c:	ldr	r3, [r4, #20]
   3e250:	mov	r2, #10
   3e254:	add	r1, r3, #1
   3e258:	str	r1, [r4, #20]
   3e25c:	strb	r2, [r3]
   3e260:	ldr	r3, [r4, #32]
   3e264:	mov	r0, r4
   3e268:	sub	r3, r3, #1
   3e26c:	str	r3, [r4, #32]
   3e270:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3e274:	b	3e214 <flatcc_json_printer_int8_enum_vector_field@@Base+0x230>
   3e278:	ldr	r3, [r4, #20]
   3e27c:	mov	r2, #10
   3e280:	add	r1, r3, #1
   3e284:	str	r1, [r4, #20]
   3e288:	mov	r0, r4
   3e28c:	strb	r2, [r3]
   3e290:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3e294:	b	3e0c8 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>
   3e298:	ldr	r3, [r4, #44]	; 0x2c
   3e29c:	mov	r0, r4
   3e2a0:	blx	r3
   3e2a4:	b	3e0c8 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>

0003e2a8 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3e2a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2ac:	sub	sp, sp, #4
   3e2b0:	ldrb	r5, [r0, #27]
   3e2b4:	ldr	sl, [sp, #44]	; 0x2c
   3e2b8:	cmp	r5, #0
   3e2bc:	ldr	r5, [sp, #40]	; 0x28
   3e2c0:	bne	3e44c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a4>
   3e2c4:	mov	r6, r3
   3e2c8:	add	r3, r2, #2
   3e2cc:	ldr	r2, [r1, #8]
   3e2d0:	lsl	r3, r3, #1
   3e2d4:	cmp	r2, r3
   3e2d8:	mov	lr, r1
   3e2dc:	bgt	3e2e8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x40>
   3e2e0:	add	sp, sp, #4
   3e2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e2e8:	ldr	r2, [r1, #4]
   3e2ec:	ldrh	r2, [r2, r3]
   3e2f0:	cmp	r2, #0
   3e2f4:	beq	3e2e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3e2f8:	mov	r4, r0
   3e2fc:	ldr	r0, [r1]
   3e300:	adds	ip, r0, r2
   3e304:	beq	3e2e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3e308:	ldr	r3, [r1, #16]
   3e30c:	cmp	r3, #0
   3e310:	add	r3, r3, #1
   3e314:	str	r3, [r1, #16]
   3e318:	ldrne	r3, [r4, #20]
   3e31c:	movne	r1, #44	; 0x2c
   3e320:	addne	lr, r3, #1
   3e324:	strne	lr, [r4, #20]
   3e328:	strbne	r1, [r3]
   3e32c:	ldr	r3, [r0, r2]
   3e330:	mov	r1, r6
   3e334:	mov	r2, r5
   3e338:	mov	r0, r4
   3e33c:	ldr	r6, [ip, r3]
   3e340:	add	r7, ip, r3
   3e344:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3e348:	ldr	r3, [r4, #32]
   3e34c:	ldr	r2, [r4, #20]
   3e350:	add	r3, r3, #1
   3e354:	add	r0, r2, #1
   3e358:	mov	r1, #91	; 0x5b
   3e35c:	cmp	r6, #0
   3e360:	str	r3, [r4, #32]
   3e364:	str	r0, [r4, #20]
   3e368:	strb	r1, [r2]
   3e36c:	beq	3e4c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x21c>
   3e370:	ldrb	r1, [r4, #25]
   3e374:	cmp	r1, #0
   3e378:	bne	3e534 <flatcc_json_printer_int16_enum_vector_field@@Base+0x28c>
   3e37c:	ldr	r2, [r4, #20]
   3e380:	ldr	r3, [r4, #16]
   3e384:	cmp	r2, r3
   3e388:	bcs	3e554 <flatcc_json_printer_int16_enum_vector_field@@Base+0x2ac>
   3e38c:	ldrsh	r1, [r7, #4]
   3e390:	mov	r0, r4
   3e394:	blx	sl
   3e398:	cmp	r6, #1
   3e39c:	add	r7, r7, #6
   3e3a0:	sub	r6, r6, #2
   3e3a4:	beq	3e4c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x21c>
   3e3a8:	mov	r9, #0
   3e3ac:	mov	r8, #32
   3e3b0:	b	3e3dc <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   3e3b4:	ldr	r2, [r4, #20]
   3e3b8:	ldr	r3, [r4, #16]
   3e3bc:	cmp	r2, r3
   3e3c0:	bcs	3e458 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b0>
   3e3c4:	ldrsh	r1, [r7], #2
   3e3c8:	mov	r0, r4
   3e3cc:	blx	sl
   3e3d0:	cmp	r6, #0
   3e3d4:	sub	r6, r6, #1
   3e3d8:	beq	3e4c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x21c>
   3e3dc:	ldr	r3, [r4, #20]
   3e3e0:	add	r2, r3, #1
   3e3e4:	str	r2, [r4, #20]
   3e3e8:	mov	r2, #44	; 0x2c
   3e3ec:	strb	r2, [r3]
   3e3f0:	ldrb	r3, [r4, #25]
   3e3f4:	cmp	r3, #0
   3e3f8:	beq	3e3b4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x10c>
   3e3fc:	ldr	r3, [r4, #20]
   3e400:	add	r2, r3, #1
   3e404:	str	r2, [r4, #20]
   3e408:	mov	r2, #10
   3e40c:	strb	r2, [r3]
   3e410:	ldrb	r3, [r4, #25]
   3e414:	ldr	fp, [r4, #32]
   3e418:	ldr	r0, [r4, #20]
   3e41c:	ldr	r5, [r4, #16]
   3e420:	mul	fp, fp, r3
   3e424:	add	r3, r0, fp
   3e428:	cmp	r5, r3
   3e42c:	bcc	3e46c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c4>
   3e430:	mov	r2, fp
   3e434:	mov	r1, r8
   3e438:	bl	145c4 <memset@plt>
   3e43c:	ldr	r3, [r4, #20]
   3e440:	add	fp, r3, fp
   3e444:	str	fp, [r4, #20]
   3e448:	b	3e3c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3e44c:	add	sp, sp, #4
   3e450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e454:	b	3c290 <flatcc_json_printer_int16_vector_field@@Base>
   3e458:	ldr	r3, [r4, #44]	; 0x2c
   3e45c:	mov	r1, r9
   3e460:	mov	r0, r4
   3e464:	blx	r3
   3e468:	b	3e3c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3e46c:	cmp	r0, r5
   3e470:	bcs	3e4ec <flatcc_json_printer_int16_enum_vector_field@@Base+0x244>
   3e474:	sub	r5, r5, r0
   3e478:	cmp	fp, r5
   3e47c:	bls	3e430 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   3e480:	mov	r2, r5
   3e484:	mov	r1, r8
   3e488:	bl	145c4 <memset@plt>
   3e48c:	ldr	r3, [r4, #20]
   3e490:	mov	r0, r4
   3e494:	add	r3, r3, r5
   3e498:	str	r3, [r4, #20]
   3e49c:	ldr	r2, [r4, #44]	; 0x2c
   3e4a0:	mov	r1, r9
   3e4a4:	blx	r2
   3e4a8:	ldr	r0, [r4, #20]
   3e4ac:	ldr	r3, [r4, #16]
   3e4b0:	sub	fp, fp, r5
   3e4b4:	sub	r5, r3, r0
   3e4b8:	cmp	fp, r5
   3e4bc:	bhi	3e480 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d8>
   3e4c0:	b	3e430 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   3e4c4:	ldrb	r3, [r4, #25]
   3e4c8:	cmp	r3, #0
   3e4cc:	bne	3e508 <flatcc_json_printer_int16_enum_vector_field@@Base+0x260>
   3e4d0:	ldr	r3, [r4, #20]
   3e4d4:	mov	r2, #93	; 0x5d
   3e4d8:	add	r1, r3, #1
   3e4dc:	str	r1, [r4, #20]
   3e4e0:	strb	r2, [r3]
   3e4e4:	add	sp, sp, #4
   3e4e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e4ec:	mov	r0, r4
   3e4f0:	ldr	r3, [r4, #44]	; 0x2c
   3e4f4:	mov	r1, r9
   3e4f8:	blx	r3
   3e4fc:	ldr	r5, [r4, #16]
   3e500:	ldr	r0, [r4, #20]
   3e504:	b	3e474 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1cc>
   3e508:	ldr	r3, [r4, #20]
   3e50c:	mov	r2, #10
   3e510:	add	r1, r3, #1
   3e514:	str	r1, [r4, #20]
   3e518:	strb	r2, [r3]
   3e51c:	ldr	r3, [r4, #32]
   3e520:	mov	r0, r4
   3e524:	sub	r3, r3, #1
   3e528:	str	r3, [r4, #32]
   3e52c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3e530:	b	3e4d0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x228>
   3e534:	ldr	r3, [r4, #20]
   3e538:	mov	r2, #10
   3e53c:	add	r1, r3, #1
   3e540:	str	r1, [r4, #20]
   3e544:	mov	r0, r4
   3e548:	strb	r2, [r3]
   3e54c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3e550:	b	3e38c <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>
   3e554:	ldr	r3, [r4, #44]	; 0x2c
   3e558:	mov	r0, r4
   3e55c:	blx	r3
   3e560:	b	3e38c <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>

0003e564 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3e564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e568:	sub	sp, sp, #4
   3e56c:	ldrb	r5, [r0, #27]
   3e570:	ldr	sl, [sp, #44]	; 0x2c
   3e574:	cmp	r5, #0
   3e578:	ldr	r5, [sp, #40]	; 0x28
   3e57c:	bne	3e708 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a4>
   3e580:	mov	r6, r3
   3e584:	add	r3, r2, #2
   3e588:	ldr	r2, [r1, #8]
   3e58c:	lsl	r3, r3, #1
   3e590:	cmp	r2, r3
   3e594:	mov	lr, r1
   3e598:	bgt	3e5a4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x40>
   3e59c:	add	sp, sp, #4
   3e5a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e5a4:	ldr	r2, [r1, #4]
   3e5a8:	ldrh	r2, [r2, r3]
   3e5ac:	cmp	r2, #0
   3e5b0:	beq	3e59c <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3e5b4:	mov	r4, r0
   3e5b8:	ldr	r0, [r1]
   3e5bc:	adds	ip, r0, r2
   3e5c0:	beq	3e59c <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3e5c4:	ldr	r3, [r1, #16]
   3e5c8:	cmp	r3, #0
   3e5cc:	add	r3, r3, #1
   3e5d0:	str	r3, [r1, #16]
   3e5d4:	ldrne	r3, [r4, #20]
   3e5d8:	movne	r1, #44	; 0x2c
   3e5dc:	addne	lr, r3, #1
   3e5e0:	strne	lr, [r4, #20]
   3e5e4:	strbne	r1, [r3]
   3e5e8:	ldr	r3, [r0, r2]
   3e5ec:	mov	r1, r6
   3e5f0:	mov	r2, r5
   3e5f4:	mov	r0, r4
   3e5f8:	ldr	r6, [ip, r3]
   3e5fc:	add	r7, ip, r3
   3e600:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3e604:	ldr	r3, [r4, #32]
   3e608:	ldr	r2, [r4, #20]
   3e60c:	add	r3, r3, #1
   3e610:	add	r0, r2, #1
   3e614:	mov	r1, #91	; 0x5b
   3e618:	cmp	r6, #0
   3e61c:	str	r3, [r4, #32]
   3e620:	str	r0, [r4, #20]
   3e624:	strb	r1, [r2]
   3e628:	beq	3e780 <flatcc_json_printer_int32_enum_vector_field@@Base+0x21c>
   3e62c:	ldrb	r1, [r4, #25]
   3e630:	cmp	r1, #0
   3e634:	bne	3e7f0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x28c>
   3e638:	ldr	r2, [r4, #20]
   3e63c:	ldr	r3, [r4, #16]
   3e640:	cmp	r2, r3
   3e644:	bcs	3e810 <flatcc_json_printer_int32_enum_vector_field@@Base+0x2ac>
   3e648:	ldr	r1, [r7, #4]
   3e64c:	mov	r0, r4
   3e650:	blx	sl
   3e654:	cmp	r6, #1
   3e658:	add	r7, r7, #8
   3e65c:	sub	r6, r6, #2
   3e660:	beq	3e780 <flatcc_json_printer_int32_enum_vector_field@@Base+0x21c>
   3e664:	mov	r9, #0
   3e668:	mov	r8, #32
   3e66c:	b	3e698 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   3e670:	ldr	r2, [r4, #20]
   3e674:	ldr	r3, [r4, #16]
   3e678:	cmp	r2, r3
   3e67c:	bcs	3e714 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b0>
   3e680:	ldr	r1, [r7], #4
   3e684:	mov	r0, r4
   3e688:	blx	sl
   3e68c:	cmp	r6, #0
   3e690:	sub	r6, r6, #1
   3e694:	beq	3e780 <flatcc_json_printer_int32_enum_vector_field@@Base+0x21c>
   3e698:	ldr	r3, [r4, #20]
   3e69c:	add	r2, r3, #1
   3e6a0:	str	r2, [r4, #20]
   3e6a4:	mov	r2, #44	; 0x2c
   3e6a8:	strb	r2, [r3]
   3e6ac:	ldrb	r3, [r4, #25]
   3e6b0:	cmp	r3, #0
   3e6b4:	beq	3e670 <flatcc_json_printer_int32_enum_vector_field@@Base+0x10c>
   3e6b8:	ldr	r3, [r4, #20]
   3e6bc:	add	r2, r3, #1
   3e6c0:	str	r2, [r4, #20]
   3e6c4:	mov	r2, #10
   3e6c8:	strb	r2, [r3]
   3e6cc:	ldrb	r3, [r4, #25]
   3e6d0:	ldr	fp, [r4, #32]
   3e6d4:	ldr	r0, [r4, #20]
   3e6d8:	ldr	r5, [r4, #16]
   3e6dc:	mul	fp, fp, r3
   3e6e0:	add	r3, r0, fp
   3e6e4:	cmp	r5, r3
   3e6e8:	bcc	3e728 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c4>
   3e6ec:	mov	r2, fp
   3e6f0:	mov	r1, r8
   3e6f4:	bl	145c4 <memset@plt>
   3e6f8:	ldr	r3, [r4, #20]
   3e6fc:	add	fp, r3, fp
   3e700:	str	fp, [r4, #20]
   3e704:	b	3e680 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3e708:	add	sp, sp, #4
   3e70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e710:	b	3c6b0 <flatcc_json_printer_int32_vector_field@@Base>
   3e714:	ldr	r3, [r4, #44]	; 0x2c
   3e718:	mov	r1, r9
   3e71c:	mov	r0, r4
   3e720:	blx	r3
   3e724:	b	3e680 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3e728:	cmp	r0, r5
   3e72c:	bcs	3e7a8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x244>
   3e730:	sub	r5, r5, r0
   3e734:	cmp	fp, r5
   3e738:	bls	3e6ec <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   3e73c:	mov	r2, r5
   3e740:	mov	r1, r8
   3e744:	bl	145c4 <memset@plt>
   3e748:	ldr	r3, [r4, #20]
   3e74c:	mov	r0, r4
   3e750:	add	r3, r3, r5
   3e754:	str	r3, [r4, #20]
   3e758:	ldr	r2, [r4, #44]	; 0x2c
   3e75c:	mov	r1, r9
   3e760:	blx	r2
   3e764:	ldr	r0, [r4, #20]
   3e768:	ldr	r3, [r4, #16]
   3e76c:	sub	fp, fp, r5
   3e770:	sub	r5, r3, r0
   3e774:	cmp	fp, r5
   3e778:	bhi	3e73c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d8>
   3e77c:	b	3e6ec <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   3e780:	ldrb	r3, [r4, #25]
   3e784:	cmp	r3, #0
   3e788:	bne	3e7c4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x260>
   3e78c:	ldr	r3, [r4, #20]
   3e790:	mov	r2, #93	; 0x5d
   3e794:	add	r1, r3, #1
   3e798:	str	r1, [r4, #20]
   3e79c:	strb	r2, [r3]
   3e7a0:	add	sp, sp, #4
   3e7a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e7a8:	mov	r0, r4
   3e7ac:	ldr	r3, [r4, #44]	; 0x2c
   3e7b0:	mov	r1, r9
   3e7b4:	blx	r3
   3e7b8:	ldr	r5, [r4, #16]
   3e7bc:	ldr	r0, [r4, #20]
   3e7c0:	b	3e730 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1cc>
   3e7c4:	ldr	r3, [r4, #20]
   3e7c8:	mov	r2, #10
   3e7cc:	add	r1, r3, #1
   3e7d0:	str	r1, [r4, #20]
   3e7d4:	strb	r2, [r3]
   3e7d8:	ldr	r3, [r4, #32]
   3e7dc:	mov	r0, r4
   3e7e0:	sub	r3, r3, #1
   3e7e4:	str	r3, [r4, #32]
   3e7e8:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3e7ec:	b	3e78c <flatcc_json_printer_int32_enum_vector_field@@Base+0x228>
   3e7f0:	ldr	r3, [r4, #20]
   3e7f4:	mov	r2, #10
   3e7f8:	add	r1, r3, #1
   3e7fc:	str	r1, [r4, #20]
   3e800:	mov	r0, r4
   3e804:	strb	r2, [r3]
   3e808:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3e80c:	b	3e648 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>
   3e810:	ldr	r3, [r4, #44]	; 0x2c
   3e814:	mov	r0, r4
   3e818:	blx	r3
   3e81c:	b	3e648 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>

0003e820 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3e820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e824:	sub	sp, sp, #4
   3e828:	ldrb	r5, [r0, #27]
   3e82c:	ldr	sl, [sp, #44]	; 0x2c
   3e830:	cmp	r5, #0
   3e834:	ldr	r5, [sp, #40]	; 0x28
   3e838:	bne	3e9c4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a4>
   3e83c:	mov	r6, r3
   3e840:	add	r3, r2, #2
   3e844:	ldr	r2, [r1, #8]
   3e848:	lsl	r3, r3, #1
   3e84c:	cmp	r2, r3
   3e850:	mov	lr, r1
   3e854:	bgt	3e860 <flatcc_json_printer_int64_enum_vector_field@@Base+0x40>
   3e858:	add	sp, sp, #4
   3e85c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e860:	ldr	r2, [r1, #4]
   3e864:	ldrh	r2, [r2, r3]
   3e868:	cmp	r2, #0
   3e86c:	beq	3e858 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3e870:	mov	r4, r0
   3e874:	ldr	r0, [r1]
   3e878:	adds	ip, r0, r2
   3e87c:	beq	3e858 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3e880:	ldr	r3, [r1, #16]
   3e884:	cmp	r3, #0
   3e888:	add	r3, r3, #1
   3e88c:	str	r3, [r1, #16]
   3e890:	ldrne	r3, [r4, #20]
   3e894:	movne	r1, #44	; 0x2c
   3e898:	addne	lr, r3, #1
   3e89c:	strne	lr, [r4, #20]
   3e8a0:	strbne	r1, [r3]
   3e8a4:	ldr	r3, [r0, r2]
   3e8a8:	mov	r1, r6
   3e8ac:	mov	r2, r5
   3e8b0:	mov	r0, r4
   3e8b4:	ldr	r6, [ip, r3]
   3e8b8:	add	r7, ip, r3
   3e8bc:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3e8c0:	ldr	r3, [r4, #32]
   3e8c4:	ldr	r2, [r4, #20]
   3e8c8:	add	r3, r3, #1
   3e8cc:	add	r0, r2, #1
   3e8d0:	mov	r1, #91	; 0x5b
   3e8d4:	cmp	r6, #0
   3e8d8:	str	r3, [r4, #32]
   3e8dc:	str	r0, [r4, #20]
   3e8e0:	strb	r1, [r2]
   3e8e4:	beq	3ea3c <flatcc_json_printer_int64_enum_vector_field@@Base+0x21c>
   3e8e8:	ldrb	r1, [r4, #25]
   3e8ec:	cmp	r1, #0
   3e8f0:	bne	3eaac <flatcc_json_printer_int64_enum_vector_field@@Base+0x28c>
   3e8f4:	ldr	r2, [r4, #20]
   3e8f8:	ldr	r3, [r4, #16]
   3e8fc:	cmp	r2, r3
   3e900:	bcs	3eacc <flatcc_json_printer_int64_enum_vector_field@@Base+0x2ac>
   3e904:	ldrd	r2, [r7, #4]
   3e908:	mov	r0, r4
   3e90c:	blx	sl
   3e910:	cmp	r6, #1
   3e914:	add	r7, r7, #12
   3e918:	sub	r6, r6, #2
   3e91c:	beq	3ea3c <flatcc_json_printer_int64_enum_vector_field@@Base+0x21c>
   3e920:	mov	r9, #0
   3e924:	mov	r8, #32
   3e928:	b	3e954 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   3e92c:	ldr	r2, [r4, #20]
   3e930:	ldr	r3, [r4, #16]
   3e934:	cmp	r2, r3
   3e938:	bcs	3e9d0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b0>
   3e93c:	ldrd	r2, [r7], #8
   3e940:	mov	r0, r4
   3e944:	blx	sl
   3e948:	cmp	r6, #0
   3e94c:	sub	r6, r6, #1
   3e950:	beq	3ea3c <flatcc_json_printer_int64_enum_vector_field@@Base+0x21c>
   3e954:	ldr	r3, [r4, #20]
   3e958:	add	r2, r3, #1
   3e95c:	str	r2, [r4, #20]
   3e960:	mov	r2, #44	; 0x2c
   3e964:	strb	r2, [r3]
   3e968:	ldrb	r3, [r4, #25]
   3e96c:	cmp	r3, #0
   3e970:	beq	3e92c <flatcc_json_printer_int64_enum_vector_field@@Base+0x10c>
   3e974:	ldr	r3, [r4, #20]
   3e978:	add	r2, r3, #1
   3e97c:	str	r2, [r4, #20]
   3e980:	mov	r2, #10
   3e984:	strb	r2, [r3]
   3e988:	ldrb	r3, [r4, #25]
   3e98c:	ldr	fp, [r4, #32]
   3e990:	ldr	r0, [r4, #20]
   3e994:	ldr	r5, [r4, #16]
   3e998:	mul	fp, fp, r3
   3e99c:	add	r3, r0, fp
   3e9a0:	cmp	r5, r3
   3e9a4:	bcc	3e9e4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c4>
   3e9a8:	mov	r2, fp
   3e9ac:	mov	r1, r8
   3e9b0:	bl	145c4 <memset@plt>
   3e9b4:	ldr	r3, [r4, #20]
   3e9b8:	add	fp, r3, fp
   3e9bc:	str	fp, [r4, #20]
   3e9c0:	b	3e93c <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3e9c4:	add	sp, sp, #4
   3e9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e9cc:	b	3c984 <flatcc_json_printer_int64_vector_field@@Base>
   3e9d0:	ldr	r3, [r4, #44]	; 0x2c
   3e9d4:	mov	r1, r9
   3e9d8:	mov	r0, r4
   3e9dc:	blx	r3
   3e9e0:	b	3e93c <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3e9e4:	cmp	r0, r5
   3e9e8:	bcs	3ea64 <flatcc_json_printer_int64_enum_vector_field@@Base+0x244>
   3e9ec:	sub	r5, r5, r0
   3e9f0:	cmp	fp, r5
   3e9f4:	bls	3e9a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   3e9f8:	mov	r2, r5
   3e9fc:	mov	r1, r8
   3ea00:	bl	145c4 <memset@plt>
   3ea04:	ldr	r3, [r4, #20]
   3ea08:	mov	r0, r4
   3ea0c:	add	r3, r3, r5
   3ea10:	str	r3, [r4, #20]
   3ea14:	ldr	r2, [r4, #44]	; 0x2c
   3ea18:	mov	r1, r9
   3ea1c:	blx	r2
   3ea20:	ldr	r0, [r4, #20]
   3ea24:	ldr	r3, [r4, #16]
   3ea28:	sub	fp, fp, r5
   3ea2c:	sub	r5, r3, r0
   3ea30:	cmp	fp, r5
   3ea34:	bhi	3e9f8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d8>
   3ea38:	b	3e9a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   3ea3c:	ldrb	r3, [r4, #25]
   3ea40:	cmp	r3, #0
   3ea44:	bne	3ea80 <flatcc_json_printer_int64_enum_vector_field@@Base+0x260>
   3ea48:	ldr	r3, [r4, #20]
   3ea4c:	mov	r2, #93	; 0x5d
   3ea50:	add	r1, r3, #1
   3ea54:	str	r1, [r4, #20]
   3ea58:	strb	r2, [r3]
   3ea5c:	add	sp, sp, #4
   3ea60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ea64:	mov	r0, r4
   3ea68:	ldr	r3, [r4, #44]	; 0x2c
   3ea6c:	mov	r1, r9
   3ea70:	blx	r3
   3ea74:	ldr	r5, [r4, #16]
   3ea78:	ldr	r0, [r4, #20]
   3ea7c:	b	3e9ec <flatcc_json_printer_int64_enum_vector_field@@Base+0x1cc>
   3ea80:	ldr	r3, [r4, #20]
   3ea84:	mov	r2, #10
   3ea88:	add	r1, r3, #1
   3ea8c:	str	r1, [r4, #20]
   3ea90:	strb	r2, [r3]
   3ea94:	ldr	r3, [r4, #32]
   3ea98:	mov	r0, r4
   3ea9c:	sub	r3, r3, #1
   3eaa0:	str	r3, [r4, #32]
   3eaa4:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3eaa8:	b	3ea48 <flatcc_json_printer_int64_enum_vector_field@@Base+0x228>
   3eaac:	ldr	r3, [r4, #20]
   3eab0:	mov	r2, #10
   3eab4:	add	r1, r3, #1
   3eab8:	str	r1, [r4, #20]
   3eabc:	mov	r0, r4
   3eac0:	strb	r2, [r3]
   3eac4:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3eac8:	b	3e904 <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>
   3eacc:	ldr	r3, [r4, #44]	; 0x2c
   3ead0:	mov	r0, r4
   3ead4:	blx	r3
   3ead8:	b	3e904 <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>

0003eadc <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3eadc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eae0:	sub	sp, sp, #12
   3eae4:	ldrb	r5, [r0, #27]
   3eae8:	ldr	fp, [sp, #52]	; 0x34
   3eaec:	cmp	r5, #0
   3eaf0:	ldr	r5, [sp, #48]	; 0x30
   3eaf4:	bne	3ec88 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1ac>
   3eaf8:	mov	r6, r3
   3eafc:	add	r3, r2, #2
   3eb00:	ldr	r2, [r1, #8]
   3eb04:	lsl	r3, r3, #1
   3eb08:	cmp	r2, r3
   3eb0c:	mov	lr, r1
   3eb10:	bgt	3eb1c <flatcc_json_printer_bool_enum_vector_field@@Base+0x40>
   3eb14:	add	sp, sp, #12
   3eb18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eb1c:	ldr	r2, [r1, #4]
   3eb20:	ldrh	r2, [r2, r3]
   3eb24:	cmp	r2, #0
   3eb28:	beq	3eb14 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3eb2c:	mov	r4, r0
   3eb30:	ldr	r0, [r1]
   3eb34:	adds	ip, r0, r2
   3eb38:	beq	3eb14 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3eb3c:	ldr	r3, [r1, #16]
   3eb40:	cmp	r3, #0
   3eb44:	add	r3, r3, #1
   3eb48:	str	r3, [r1, #16]
   3eb4c:	ldrne	r3, [r4, #20]
   3eb50:	movne	r1, #44	; 0x2c
   3eb54:	addne	lr, r3, #1
   3eb58:	strne	lr, [r4, #20]
   3eb5c:	strbne	r1, [r3]
   3eb60:	ldr	r3, [r0, r2]
   3eb64:	mov	r1, r6
   3eb68:	mov	r2, r5
   3eb6c:	mov	r0, r4
   3eb70:	ldr	r9, [ip, r3]
   3eb74:	add	sl, ip, r3
   3eb78:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3eb7c:	ldr	r3, [r4, #32]
   3eb80:	ldr	r2, [r4, #20]
   3eb84:	add	r3, r3, #1
   3eb88:	add	r0, r2, #1
   3eb8c:	mov	r1, #91	; 0x5b
   3eb90:	cmp	r9, #0
   3eb94:	str	r3, [r4, #32]
   3eb98:	str	r0, [r4, #20]
   3eb9c:	strb	r1, [r2]
   3eba0:	beq	3ed00 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3eba4:	ldrb	r1, [r4, #25]
   3eba8:	cmp	r1, #0
   3ebac:	bne	3ed70 <flatcc_json_printer_bool_enum_vector_field@@Base+0x294>
   3ebb0:	ldr	r2, [r4, #20]
   3ebb4:	ldr	r3, [r4, #16]
   3ebb8:	cmp	r2, r3
   3ebbc:	bcs	3ed90 <flatcc_json_printer_bool_enum_vector_field@@Base+0x2b4>
   3ebc0:	ldrb	r1, [sl, #4]
   3ebc4:	mov	r0, r4
   3ebc8:	blx	fp
   3ebcc:	cmp	r9, #1
   3ebd0:	add	r6, sl, #5
   3ebd4:	beq	3ed00 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3ebd8:	add	r3, r9, #4
   3ebdc:	str	r3, [sp, #4]
   3ebe0:	mov	r8, #0
   3ebe4:	mov	r7, #32
   3ebe8:	b	3ec18 <flatcc_json_printer_bool_enum_vector_field@@Base+0x13c>
   3ebec:	ldr	r2, [r4, #20]
   3ebf0:	ldr	r3, [r4, #16]
   3ebf4:	cmp	r2, r3
   3ebf8:	bcs	3ec94 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3ebfc:	ldrb	r1, [r6], #1
   3ec00:	mov	r0, r4
   3ec04:	blx	fp
   3ec08:	ldr	r3, [sp, #4]
   3ec0c:	sub	r3, r3, r6
   3ec10:	cmn	sl, r3
   3ec14:	beq	3ed00 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3ec18:	ldr	r3, [r4, #20]
   3ec1c:	add	r2, r3, #1
   3ec20:	str	r2, [r4, #20]
   3ec24:	mov	r2, #44	; 0x2c
   3ec28:	strb	r2, [r3]
   3ec2c:	ldrb	r3, [r4, #25]
   3ec30:	cmp	r3, #0
   3ec34:	beq	3ebec <flatcc_json_printer_bool_enum_vector_field@@Base+0x110>
   3ec38:	ldr	r3, [r4, #20]
   3ec3c:	add	r2, r3, #1
   3ec40:	str	r2, [r4, #20]
   3ec44:	mov	r2, #10
   3ec48:	strb	r2, [r3]
   3ec4c:	ldrb	r3, [r4, #25]
   3ec50:	ldr	r2, [r4, #32]
   3ec54:	ldr	r0, [r4, #20]
   3ec58:	ldr	r5, [r4, #16]
   3ec5c:	mul	r9, r2, r3
   3ec60:	add	r2, r0, r9
   3ec64:	cmp	r5, r2
   3ec68:	bcc	3eca8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>
   3ec6c:	mov	r2, r9
   3ec70:	mov	r1, r7
   3ec74:	bl	145c4 <memset@plt>
   3ec78:	ldr	r2, [r4, #20]
   3ec7c:	add	r3, r2, r9
   3ec80:	str	r3, [r4, #20]
   3ec84:	b	3ebfc <flatcc_json_printer_bool_enum_vector_field@@Base+0x120>
   3ec88:	add	sp, sp, #12
   3ec8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ec90:	b	3cc74 <flatcc_json_printer_bool_vector_field@@Base>
   3ec94:	ldr	r3, [r4, #44]	; 0x2c
   3ec98:	mov	r1, r8
   3ec9c:	mov	r0, r4
   3eca0:	blx	r3
   3eca4:	b	3ebfc <flatcc_json_printer_bool_enum_vector_field@@Base+0x120>
   3eca8:	cmp	r0, r5
   3ecac:	bcs	3ed28 <flatcc_json_printer_bool_enum_vector_field@@Base+0x24c>
   3ecb0:	sub	r5, r5, r0
   3ecb4:	cmp	r9, r5
   3ecb8:	bls	3ec6c <flatcc_json_printer_bool_enum_vector_field@@Base+0x190>
   3ecbc:	mov	r2, r5
   3ecc0:	mov	r1, r7
   3ecc4:	bl	145c4 <memset@plt>
   3ecc8:	ldr	r3, [r4, #20]
   3eccc:	mov	r0, r4
   3ecd0:	add	r3, r3, r5
   3ecd4:	str	r3, [r4, #20]
   3ecd8:	ldr	r2, [r4, #44]	; 0x2c
   3ecdc:	mov	r1, r8
   3ece0:	blx	r2
   3ece4:	ldr	r0, [r4, #20]
   3ece8:	ldr	r3, [r4, #16]
   3ecec:	sub	r9, r9, r5
   3ecf0:	sub	r5, r3, r0
   3ecf4:	cmp	r9, r5
   3ecf8:	bhi	3ecbc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e0>
   3ecfc:	b	3ec6c <flatcc_json_printer_bool_enum_vector_field@@Base+0x190>
   3ed00:	ldrb	r3, [r4, #25]
   3ed04:	cmp	r3, #0
   3ed08:	bne	3ed44 <flatcc_json_printer_bool_enum_vector_field@@Base+0x268>
   3ed0c:	ldr	r3, [r4, #20]
   3ed10:	mov	r2, #93	; 0x5d
   3ed14:	add	r1, r3, #1
   3ed18:	str	r1, [r4, #20]
   3ed1c:	strb	r2, [r3]
   3ed20:	add	sp, sp, #12
   3ed24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ed28:	mov	r0, r4
   3ed2c:	ldr	r2, [r4, #44]	; 0x2c
   3ed30:	mov	r1, r8
   3ed34:	blx	r2
   3ed38:	ldr	r5, [r4, #16]
   3ed3c:	ldr	r0, [r4, #20]
   3ed40:	b	3ecb0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d4>
   3ed44:	ldr	r3, [r4, #20]
   3ed48:	mov	r2, #10
   3ed4c:	add	r1, r3, #1
   3ed50:	str	r1, [r4, #20]
   3ed54:	strb	r2, [r3]
   3ed58:	ldr	r3, [r4, #32]
   3ed5c:	mov	r0, r4
   3ed60:	sub	r3, r3, #1
   3ed64:	str	r3, [r4, #32]
   3ed68:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3ed6c:	b	3ed0c <flatcc_json_printer_bool_enum_vector_field@@Base+0x230>
   3ed70:	ldr	r3, [r4, #20]
   3ed74:	mov	r2, #10
   3ed78:	add	r1, r3, #1
   3ed7c:	str	r1, [r4, #20]
   3ed80:	mov	r0, r4
   3ed84:	strb	r2, [r3]
   3ed88:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3ed8c:	b	3ebc0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>
   3ed90:	ldr	r3, [r4, #44]	; 0x2c
   3ed94:	mov	r0, r4
   3ed98:	blx	r3
   3ed9c:	b	3ebc0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>

0003eda0 <flatcc_json_printer_struct_vector_field@@Base>:
   3eda0:	add	r2, r2, #2
   3eda4:	ldr	ip, [r1, #8]
   3eda8:	lsl	r2, r2, #1
   3edac:	cmp	r2, ip
   3edb0:	bxge	lr
   3edb4:	ldr	ip, [r1, #4]
   3edb8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3edbc:	ldrh	lr, [ip, r2]
   3edc0:	cmp	lr, #0
   3edc4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3edc8:	ldr	r5, [r1]
   3edcc:	adds	ip, r5, lr
   3edd0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3edd4:	ldr	r2, [r1, #16]
   3edd8:	cmp	r2, #0
   3eddc:	add	r2, r2, #1
   3ede0:	str	r2, [r1, #16]
   3ede4:	ldrne	r2, [r0, #20]
   3ede8:	movne	r1, #44	; 0x2c
   3edec:	addne	r4, r2, #1
   3edf0:	strne	r4, [r0, #20]
   3edf4:	strbne	r1, [r2]
   3edf8:	mov	r1, r3
   3edfc:	ldr	r3, [r5, lr]
   3ee00:	mov	r4, r0
   3ee04:	ldr	r2, [sp, #40]	; 0x28
   3ee08:	ldr	r6, [ip, r3]
   3ee0c:	add	r7, ip, r3
   3ee10:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3ee14:	ldr	r3, [r4, #32]
   3ee18:	ldr	r2, [r4, #20]
   3ee1c:	add	r3, r3, #1
   3ee20:	add	r0, r2, #1
   3ee24:	mov	r1, #91	; 0x5b
   3ee28:	cmp	r6, #0
   3ee2c:	str	r3, [r4, #32]
   3ee30:	str	r0, [r4, #20]
   3ee34:	strb	r1, [r2]
   3ee38:	beq	3f0a4 <flatcc_json_printer_struct_vector_field@@Base+0x304>
   3ee3c:	ldrb	r1, [r4, #25]
   3ee40:	cmp	r1, #0
   3ee44:	bne	3f12c <flatcc_json_printer_struct_vector_field@@Base+0x38c>
   3ee48:	ldr	r2, [r4, #20]
   3ee4c:	ldr	r3, [r4, #16]
   3ee50:	cmp	r2, r3
   3ee54:	bcs	3f17c <flatcc_json_printer_struct_vector_field@@Base+0x3dc>
   3ee58:	ldr	r3, [r4, #32]
   3ee5c:	add	r1, r2, #1
   3ee60:	add	r3, r3, #1
   3ee64:	mov	r0, #123	; 0x7b
   3ee68:	add	r7, r7, #4
   3ee6c:	str	r3, [r4, #32]
   3ee70:	str	r1, [r4, #20]
   3ee74:	ldr	r3, [sp, #48]	; 0x30
   3ee78:	strb	r0, [r2]
   3ee7c:	mov	r1, r7
   3ee80:	mov	r0, r4
   3ee84:	blx	r3
   3ee88:	ldrb	r3, [r4, #25]
   3ee8c:	cmp	r3, #0
   3ee90:	bne	3f150 <flatcc_json_printer_struct_vector_field@@Base+0x3b0>
   3ee94:	ldr	r3, [r4, #20]
   3ee98:	cmp	r6, #1
   3ee9c:	add	r2, r3, #1
   3eea0:	mov	sl, #125	; 0x7d
   3eea4:	str	r2, [r4, #20]
   3eea8:	sub	r6, r6, #2
   3eeac:	strb	sl, [r3]
   3eeb0:	beq	3f0a4 <flatcc_json_printer_struct_vector_field@@Base+0x304>
   3eeb4:	mov	r9, #0
   3eeb8:	mov	r8, #32
   3eebc:	b	3ef24 <flatcc_json_printer_struct_vector_field@@Base+0x184>
   3eec0:	ldr	r5, [r4, #20]
   3eec4:	ldr	r3, [r4, #16]
   3eec8:	cmp	r5, r3
   3eecc:	bcs	3efec <flatcc_json_printer_struct_vector_field@@Base+0x24c>
   3eed0:	ldr	r3, [r4, #32]
   3eed4:	add	r2, r5, #1
   3eed8:	add	r3, r3, #1
   3eedc:	str	r3, [r4, #32]
   3eee0:	mov	r3, #123	; 0x7b
   3eee4:	str	r2, [r4, #20]
   3eee8:	mov	r1, r7
   3eeec:	strb	r3, [r5]
   3eef0:	mov	r0, r4
   3eef4:	ldr	r3, [sp, #48]	; 0x30
   3eef8:	blx	r3
   3eefc:	ldrb	r3, [r4, #25]
   3ef00:	cmp	r3, #0
   3ef04:	bne	3ef98 <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3ef08:	ldr	r5, [r4, #20]
   3ef0c:	cmp	r6, #0
   3ef10:	add	r3, r5, #1
   3ef14:	str	r3, [r4, #20]
   3ef18:	sub	r6, r6, #1
   3ef1c:	strb	sl, [r5]
   3ef20:	beq	3f0a4 <flatcc_json_printer_struct_vector_field@@Base+0x304>
   3ef24:	ldr	r3, [r4, #20]
   3ef28:	ldr	r2, [sp, #44]	; 0x2c
   3ef2c:	add	r7, r7, r2
   3ef30:	add	r2, r3, #1
   3ef34:	str	r2, [r4, #20]
   3ef38:	mov	r2, #44	; 0x2c
   3ef3c:	strb	r2, [r3]
   3ef40:	ldrb	r3, [r4, #25]
   3ef44:	cmp	r3, #0
   3ef48:	beq	3eec0 <flatcc_json_printer_struct_vector_field@@Base+0x120>
   3ef4c:	ldr	r3, [r4, #20]
   3ef50:	add	r2, r3, #1
   3ef54:	str	r2, [r4, #20]
   3ef58:	mov	r2, #10
   3ef5c:	strb	r2, [r3]
   3ef60:	ldrb	r2, [r4, #25]
   3ef64:	ldr	r5, [r4, #32]
   3ef68:	ldr	r0, [r4, #20]
   3ef6c:	ldr	r3, [r4, #16]
   3ef70:	mul	r5, r5, r2
   3ef74:	add	r2, r0, r5
   3ef78:	cmp	r3, r2
   3ef7c:	bcc	3f004 <flatcc_json_printer_struct_vector_field@@Base+0x264>
   3ef80:	mov	r2, r5
   3ef84:	mov	r1, r8
   3ef88:	bl	145c4 <memset@plt>
   3ef8c:	ldr	r3, [r4, #20]
   3ef90:	add	r5, r3, r5
   3ef94:	b	3eed0 <flatcc_json_printer_struct_vector_field@@Base+0x130>
   3ef98:	ldr	r3, [r4, #20]
   3ef9c:	add	r2, r3, #1
   3efa0:	str	r2, [r4, #20]
   3efa4:	mov	r2, #10
   3efa8:	strb	r2, [r3]
   3efac:	ldr	r2, [r4, #32]
   3efb0:	ldrb	r5, [r4, #25]
   3efb4:	sub	r2, r2, #1
   3efb8:	ldr	r0, [r4, #20]
   3efbc:	ldr	r3, [r4, #16]
   3efc0:	mul	r5, r2, r5
   3efc4:	str	r2, [r4, #32]
   3efc8:	add	r2, r0, r5
   3efcc:	cmp	r3, r2
   3efd0:	bcc	3f054 <flatcc_json_printer_struct_vector_field@@Base+0x2b4>
   3efd4:	mov	r2, r5
   3efd8:	mov	r1, r8
   3efdc:	bl	145c4 <memset@plt>
   3efe0:	ldr	r3, [r4, #20]
   3efe4:	add	r5, r3, r5
   3efe8:	b	3ef0c <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3efec:	ldr	r3, [r4, #44]	; 0x2c
   3eff0:	mov	r1, r9
   3eff4:	mov	r0, r4
   3eff8:	blx	r3
   3effc:	ldr	r5, [r4, #20]
   3f000:	b	3eed0 <flatcc_json_printer_struct_vector_field@@Base+0x130>
   3f004:	cmp	r0, r3
   3f008:	bcc	3f044 <flatcc_json_printer_struct_vector_field@@Base+0x2a4>
   3f00c:	b	3f0c8 <flatcc_json_printer_struct_vector_field@@Base+0x328>
   3f010:	mov	r2, fp
   3f014:	mov	r1, r8
   3f018:	bl	145c4 <memset@plt>
   3f01c:	ldr	r3, [r4, #20]
   3f020:	mov	r0, r4
   3f024:	add	r3, r3, fp
   3f028:	str	r3, [r4, #20]
   3f02c:	ldr	r2, [r4, #44]	; 0x2c
   3f030:	mov	r1, r9
   3f034:	blx	r2
   3f038:	ldr	r0, [r4, #20]
   3f03c:	ldr	r3, [r4, #16]
   3f040:	sub	r5, r5, fp
   3f044:	sub	fp, r3, r0
   3f048:	cmp	r5, fp
   3f04c:	bhi	3f010 <flatcc_json_printer_struct_vector_field@@Base+0x270>
   3f050:	b	3ef80 <flatcc_json_printer_struct_vector_field@@Base+0x1e0>
   3f054:	cmp	r0, r3
   3f058:	bcc	3f094 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3f05c:	b	3f0e4 <flatcc_json_printer_struct_vector_field@@Base+0x344>
   3f060:	mov	r2, fp
   3f064:	mov	r1, r8
   3f068:	bl	145c4 <memset@plt>
   3f06c:	ldr	r3, [r4, #20]
   3f070:	mov	r0, r4
   3f074:	add	r3, r3, fp
   3f078:	str	r3, [r4, #20]
   3f07c:	ldr	r2, [r4, #44]	; 0x2c
   3f080:	mov	r1, r9
   3f084:	blx	r2
   3f088:	ldr	r0, [r4, #20]
   3f08c:	ldr	r3, [r4, #16]
   3f090:	sub	r5, r5, fp
   3f094:	sub	fp, r3, r0
   3f098:	cmp	r5, fp
   3f09c:	bhi	3f060 <flatcc_json_printer_struct_vector_field@@Base+0x2c0>
   3f0a0:	b	3efd4 <flatcc_json_printer_struct_vector_field@@Base+0x234>
   3f0a4:	ldrb	r3, [r4, #25]
   3f0a8:	cmp	r3, #0
   3f0ac:	bne	3f100 <flatcc_json_printer_struct_vector_field@@Base+0x360>
   3f0b0:	ldr	r3, [r4, #20]
   3f0b4:	mov	r2, #93	; 0x5d
   3f0b8:	add	r1, r3, #1
   3f0bc:	str	r1, [r4, #20]
   3f0c0:	strb	r2, [r3]
   3f0c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f0c8:	ldr	r3, [r4, #44]	; 0x2c
   3f0cc:	mov	r0, r4
   3f0d0:	mov	r1, r9
   3f0d4:	blx	r3
   3f0d8:	ldr	r3, [r4, #16]
   3f0dc:	ldr	r0, [r4, #20]
   3f0e0:	b	3f044 <flatcc_json_printer_struct_vector_field@@Base+0x2a4>
   3f0e4:	ldr	r3, [r4, #44]	; 0x2c
   3f0e8:	mov	r0, r4
   3f0ec:	mov	r1, r9
   3f0f0:	blx	r3
   3f0f4:	ldr	r3, [r4, #16]
   3f0f8:	ldr	r0, [r4, #20]
   3f0fc:	b	3f094 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3f100:	ldr	r3, [r4, #20]
   3f104:	mov	r2, #10
   3f108:	add	r1, r3, #1
   3f10c:	str	r1, [r4, #20]
   3f110:	strb	r2, [r3]
   3f114:	ldr	r3, [r4, #32]
   3f118:	mov	r0, r4
   3f11c:	sub	r3, r3, #1
   3f120:	str	r3, [r4, #32]
   3f124:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f128:	b	3f0b0 <flatcc_json_printer_struct_vector_field@@Base+0x310>
   3f12c:	ldr	r3, [r4, #20]
   3f130:	mov	r2, #10
   3f134:	add	r1, r3, #1
   3f138:	str	r1, [r4, #20]
   3f13c:	mov	r0, r4
   3f140:	strb	r2, [r3]
   3f144:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f148:	ldr	r2, [r4, #20]
   3f14c:	b	3ee58 <flatcc_json_printer_struct_vector_field@@Base+0xb8>
   3f150:	ldr	r3, [r4, #20]
   3f154:	mov	r2, #10
   3f158:	add	r1, r3, #1
   3f15c:	str	r1, [r4, #20]
   3f160:	strb	r2, [r3]
   3f164:	ldr	r3, [r4, #32]
   3f168:	mov	r0, r4
   3f16c:	sub	r3, r3, #1
   3f170:	str	r3, [r4, #32]
   3f174:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f178:	b	3ee94 <flatcc_json_printer_struct_vector_field@@Base+0xf4>
   3f17c:	ldr	r3, [r4, #44]	; 0x2c
   3f180:	mov	r0, r4
   3f184:	blx	r3
   3f188:	ldr	r2, [r4, #20]
   3f18c:	b	3ee58 <flatcc_json_printer_struct_vector_field@@Base+0xb8>

0003f190 <flatcc_json_printer_string_vector_field@@Base>:
   3f190:	add	r2, r2, #2
   3f194:	ldr	ip, [r1, #8]
   3f198:	lsl	r2, r2, #1
   3f19c:	cmp	ip, r2
   3f1a0:	bxle	lr
   3f1a4:	ldr	ip, [r1, #4]
   3f1a8:	ldrh	ip, [ip, r2]
   3f1ac:	cmp	ip, #0
   3f1b0:	bxeq	lr
   3f1b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f1b8:	ldr	r5, [r1]
   3f1bc:	adds	lr, r5, ip
   3f1c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f1c4:	ldr	r2, [r1, #16]
   3f1c8:	cmp	r2, #0
   3f1cc:	add	r2, r2, #1
   3f1d0:	str	r2, [r1, #16]
   3f1d4:	ldrne	r2, [r0, #20]
   3f1d8:	movne	r1, #44	; 0x2c
   3f1dc:	addne	r4, r2, #1
   3f1e0:	strne	r4, [r0, #20]
   3f1e4:	strbne	r1, [r2]
   3f1e8:	mov	r1, r3
   3f1ec:	ldr	r3, [r5, ip]
   3f1f0:	mov	r4, r0
   3f1f4:	ldr	r2, [sp, #40]	; 0x28
   3f1f8:	ldr	r7, [lr, r3]
   3f1fc:	add	r8, lr, r3
   3f200:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3f204:	ldr	r3, [r4, #32]
   3f208:	ldr	r2, [r4, #20]
   3f20c:	add	r3, r3, #1
   3f210:	add	r0, r2, #1
   3f214:	mov	r1, #91	; 0x5b
   3f218:	cmp	r7, #0
   3f21c:	str	r3, [r4, #32]
   3f220:	str	r0, [r4, #20]
   3f224:	strb	r1, [r2]
   3f228:	beq	3f398 <flatcc_json_printer_string_vector_field@@Base+0x208>
   3f22c:	ldrb	r1, [r4, #25]
   3f230:	cmp	r1, #0
   3f234:	bne	3f404 <flatcc_json_printer_string_vector_field@@Base+0x274>
   3f238:	ldr	r2, [r4, #20]
   3f23c:	ldr	r3, [r4, #16]
   3f240:	cmp	r2, r3
   3f244:	bcs	3f424 <flatcc_json_printer_string_vector_field@@Base+0x294>
   3f248:	ldr	r3, [r8, #4]
   3f24c:	mov	r0, r4
   3f250:	add	r3, r3, #4
   3f254:	add	r1, r8, r3
   3f258:	add	r1, r1, #4
   3f25c:	ldr	r2, [r8, r3]
   3f260:	bl	34ce0 <flatcc_json_parser_struct_as_root@@Base+0xef8>
   3f264:	cmp	r7, #1
   3f268:	sub	r7, r7, #2
   3f26c:	beq	3f398 <flatcc_json_printer_string_vector_field@@Base+0x208>
   3f270:	add	r8, r8, #8
   3f274:	mov	sl, #0
   3f278:	mov	r9, #32
   3f27c:	b	3f2b8 <flatcc_json_printer_string_vector_field@@Base+0x128>
   3f280:	ldr	r2, [r4, #20]
   3f284:	ldr	r3, [r4, #16]
   3f288:	cmp	r2, r3
   3f28c:	bcs	3f32c <flatcc_json_printer_string_vector_field@@Base+0x19c>
   3f290:	ldr	r3, [fp]
   3f294:	mov	r0, r4
   3f298:	add	r1, fp, r3
   3f29c:	add	r1, r1, #4
   3f2a0:	ldr	r2, [fp, r3]
   3f2a4:	bl	34ce0 <flatcc_json_parser_struct_as_root@@Base+0xef8>
   3f2a8:	cmp	r7, #0
   3f2ac:	add	r8, r8, #4
   3f2b0:	sub	r7, r7, #1
   3f2b4:	beq	3f398 <flatcc_json_printer_string_vector_field@@Base+0x208>
   3f2b8:	ldr	r3, [r4, #20]
   3f2bc:	mov	fp, r8
   3f2c0:	add	r2, r3, #1
   3f2c4:	str	r2, [r4, #20]
   3f2c8:	mov	r2, #44	; 0x2c
   3f2cc:	strb	r2, [r3]
   3f2d0:	ldrb	r3, [r4, #25]
   3f2d4:	cmp	r3, #0
   3f2d8:	beq	3f280 <flatcc_json_printer_string_vector_field@@Base+0xf0>
   3f2dc:	ldr	r3, [r4, #20]
   3f2e0:	add	r2, r3, #1
   3f2e4:	str	r2, [r4, #20]
   3f2e8:	mov	r2, #10
   3f2ec:	strb	r2, [r3]
   3f2f0:	ldrb	r3, [r4, #25]
   3f2f4:	ldr	r6, [r4, #32]
   3f2f8:	ldr	r0, [r4, #20]
   3f2fc:	ldr	r5, [r4, #16]
   3f300:	mul	r6, r6, r3
   3f304:	add	r3, r0, r6
   3f308:	cmp	r5, r3
   3f30c:	bcc	3f340 <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3f310:	mov	r2, r6
   3f314:	mov	r1, r9
   3f318:	bl	145c4 <memset@plt>
   3f31c:	ldr	r3, [r4, #20]
   3f320:	add	r6, r3, r6
   3f324:	str	r6, [r4, #20]
   3f328:	b	3f290 <flatcc_json_printer_string_vector_field@@Base+0x100>
   3f32c:	ldr	r3, [r4, #44]	; 0x2c
   3f330:	mov	r1, sl
   3f334:	mov	r0, r4
   3f338:	blx	r3
   3f33c:	b	3f290 <flatcc_json_printer_string_vector_field@@Base+0x100>
   3f340:	cmp	r0, r5
   3f344:	bcs	3f3bc <flatcc_json_printer_string_vector_field@@Base+0x22c>
   3f348:	sub	r5, r5, r0
   3f34c:	cmp	r6, r5
   3f350:	bls	3f310 <flatcc_json_printer_string_vector_field@@Base+0x180>
   3f354:	mov	r2, r5
   3f358:	mov	r1, r9
   3f35c:	bl	145c4 <memset@plt>
   3f360:	ldr	r3, [r4, #20]
   3f364:	mov	r0, r4
   3f368:	add	r3, r3, r5
   3f36c:	str	r3, [r4, #20]
   3f370:	ldr	r2, [r4, #44]	; 0x2c
   3f374:	mov	r1, sl
   3f378:	blx	r2
   3f37c:	ldr	r0, [r4, #20]
   3f380:	ldr	r3, [r4, #16]
   3f384:	sub	r6, r6, r5
   3f388:	sub	r5, r3, r0
   3f38c:	cmp	r6, r5
   3f390:	bhi	3f354 <flatcc_json_printer_string_vector_field@@Base+0x1c4>
   3f394:	b	3f310 <flatcc_json_printer_string_vector_field@@Base+0x180>
   3f398:	ldrb	r3, [r4, #25]
   3f39c:	cmp	r3, #0
   3f3a0:	bne	3f3d8 <flatcc_json_printer_string_vector_field@@Base+0x248>
   3f3a4:	ldr	r3, [r4, #20]
   3f3a8:	mov	r2, #93	; 0x5d
   3f3ac:	add	r1, r3, #1
   3f3b0:	str	r1, [r4, #20]
   3f3b4:	strb	r2, [r3]
   3f3b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f3bc:	mov	r0, r4
   3f3c0:	ldr	r3, [r4, #44]	; 0x2c
   3f3c4:	mov	r1, sl
   3f3c8:	blx	r3
   3f3cc:	ldr	r5, [r4, #16]
   3f3d0:	ldr	r0, [r4, #20]
   3f3d4:	b	3f348 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3f3d8:	ldr	r3, [r4, #20]
   3f3dc:	mov	r2, #10
   3f3e0:	add	r1, r3, #1
   3f3e4:	str	r1, [r4, #20]
   3f3e8:	strb	r2, [r3]
   3f3ec:	ldr	r3, [r4, #32]
   3f3f0:	mov	r0, r4
   3f3f4:	sub	r3, r3, #1
   3f3f8:	str	r3, [r4, #32]
   3f3fc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f400:	b	3f3a4 <flatcc_json_printer_string_vector_field@@Base+0x214>
   3f404:	ldr	r3, [r4, #20]
   3f408:	mov	r2, #10
   3f40c:	add	r1, r3, #1
   3f410:	str	r1, [r4, #20]
   3f414:	mov	r0, r4
   3f418:	strb	r2, [r3]
   3f41c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f420:	b	3f248 <flatcc_json_printer_string_vector_field@@Base+0xb8>
   3f424:	ldr	r3, [r4, #44]	; 0x2c
   3f428:	mov	r0, r4
   3f42c:	blx	r3
   3f430:	b	3f248 <flatcc_json_printer_string_vector_field@@Base+0xb8>

0003f434 <flatcc_json_printer_table_vector_field@@Base>:
   3f434:	add	r2, r2, #2
   3f438:	ldr	ip, [r1, #8]
   3f43c:	lsl	r2, r2, #1
   3f440:	cmp	ip, r2
   3f444:	bxle	lr
   3f448:	ldr	ip, [r1, #4]
   3f44c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f450:	sub	sp, sp, #44	; 0x2c
   3f454:	ldrh	lr, [ip, r2]
   3f458:	cmp	lr, #0
   3f45c:	beq	3f4f8 <flatcc_json_printer_table_vector_field@@Base+0xc4>
   3f460:	ldr	r5, [r1]
   3f464:	adds	ip, r5, lr
   3f468:	beq	3f4f8 <flatcc_json_printer_table_vector_field@@Base+0xc4>
   3f46c:	ldr	r2, [r1, #16]
   3f470:	mov	fp, r1
   3f474:	cmp	r2, #0
   3f478:	add	r2, r2, #1
   3f47c:	str	r2, [r1, #16]
   3f480:	ldrne	r2, [r0, #20]
   3f484:	movne	r4, #44	; 0x2c
   3f488:	addne	r6, r2, #1
   3f48c:	strne	r6, [r0, #20]
   3f490:	strbne	r4, [r2]
   3f494:	ldr	lr, [r5, lr]
   3f498:	mov	r4, r0
   3f49c:	mov	r1, r3
   3f4a0:	ldr	r2, [sp, #80]	; 0x50
   3f4a4:	ldr	r5, [ip, lr]
   3f4a8:	add	r7, ip, lr
   3f4ac:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3f4b0:	ldr	r2, [r4, #32]
   3f4b4:	ldr	r1, [r4, #20]
   3f4b8:	add	r2, r2, #1
   3f4bc:	add	ip, r1, #1
   3f4c0:	mov	r0, #91	; 0x5b
   3f4c4:	cmp	r5, #0
   3f4c8:	str	r2, [r4, #32]
   3f4cc:	str	ip, [r4, #20]
   3f4d0:	strb	r0, [r1]
   3f4d4:	bne	3f500 <flatcc_json_printer_table_vector_field@@Base+0xcc>
   3f4d8:	ldrb	r3, [r4, #25]
   3f4dc:	cmp	r3, #0
   3f4e0:	bne	3f570 <flatcc_json_printer_table_vector_field@@Base+0x13c>
   3f4e4:	ldr	r3, [r4, #20]
   3f4e8:	mov	r2, #93	; 0x5d
   3f4ec:	add	r1, r3, #1
   3f4f0:	str	r1, [r4, #20]
   3f4f4:	strb	r2, [r3]
   3f4f8:	add	sp, sp, #44	; 0x2c
   3f4fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f500:	ldr	r2, [fp, #12]
   3f504:	add	r6, r7, #4
   3f508:	subs	r2, r2, #1
   3f50c:	bne	3f59c <flatcc_json_printer_table_vector_field@@Base+0x168>
   3f510:	ldr	r2, [r4, #36]	; 0x24
   3f514:	cmp	r2, #0
   3f518:	moveq	r2, #2
   3f51c:	streq	r2, [r4, #36]	; 0x24
   3f520:	sub	r5, r5, #1
   3f524:	mov	r9, #44	; 0x2c
   3f528:	mov	sl, #0
   3f52c:	subs	r5, r5, #1
   3f530:	bcc	3f4d8 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3f534:	ldr	r3, [r4, #20]
   3f538:	add	r6, r6, #4
   3f53c:	add	r2, r3, #1
   3f540:	str	r2, [r4, #20]
   3f544:	strb	r9, [r3]
   3f548:	ldr	r3, [fp, #12]
   3f54c:	subs	r3, r3, #1
   3f550:	bne	3f614 <flatcc_json_printer_table_vector_field@@Base+0x1e0>
   3f554:	ldr	r3, [r4, #36]	; 0x24
   3f558:	cmp	r3, #0
   3f55c:	moveq	r3, #2
   3f560:	streq	r3, [r4, #36]	; 0x24
   3f564:	subs	r5, r5, #1
   3f568:	bcs	3f534 <flatcc_json_printer_table_vector_field@@Base+0x100>
   3f56c:	b	3f4d8 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3f570:	ldr	r3, [r4, #20]
   3f574:	mov	r2, #10
   3f578:	add	r1, r3, #1
   3f57c:	str	r1, [r4, #20]
   3f580:	strb	r2, [r3]
   3f584:	ldr	r3, [r4, #32]
   3f588:	mov	r0, r4
   3f58c:	sub	r3, r3, #1
   3f590:	str	r3, [r4, #32]
   3f594:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f598:	b	3f4e4 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3f59c:	ldr	r0, [r4, #32]
   3f5a0:	ldr	r1, [r7, #4]
   3f5a4:	ldr	ip, [r4, #20]
   3f5a8:	add	r0, r0, #1
   3f5ac:	str	r0, [r4, #32]
   3f5b0:	add	r7, ip, #1
   3f5b4:	mov	lr, #123	; 0x7b
   3f5b8:	mov	r0, #0
   3f5bc:	str	r7, [r4, #20]
   3f5c0:	strb	lr, [ip]
   3f5c4:	str	r2, [sp, #12]
   3f5c8:	str	r0, [sp, #16]
   3f5cc:	ldr	ip, [r6, r1]
   3f5d0:	add	r2, r6, r1
   3f5d4:	sub	ip, r2, ip
   3f5d8:	mov	r1, sp
   3f5dc:	ldrh	lr, [ip]
   3f5e0:	mov	r0, r4
   3f5e4:	ldr	r3, [sp, #84]	; 0x54
   3f5e8:	stm	sp, {r2, ip, lr}
   3f5ec:	blx	r3
   3f5f0:	ldrb	r2, [r4, #25]
   3f5f4:	cmp	r2, #0
   3f5f8:	bne	3f750 <flatcc_json_printer_table_vector_field@@Base+0x31c>
   3f5fc:	ldr	r2, [r4, #20]
   3f600:	mov	r1, #125	; 0x7d
   3f604:	add	r0, r2, #1
   3f608:	str	r0, [r4, #20]
   3f60c:	strb	r1, [r2]
   3f610:	b	3f520 <flatcc_json_printer_table_vector_field@@Base+0xec>
   3f614:	ldr	r1, [r4, #32]
   3f618:	ldr	r2, [r6]
   3f61c:	ldr	r0, [r4, #20]
   3f620:	add	r1, r1, #1
   3f624:	str	r1, [r4, #32]
   3f628:	add	ip, r0, #1
   3f62c:	mov	r1, #123	; 0x7b
   3f630:	str	ip, [r4, #20]
   3f634:	strb	r1, [r0]
   3f638:	str	r3, [sp, #32]
   3f63c:	str	sl, [sp, #36]	; 0x24
   3f640:	ldr	r1, [r6, r2]
   3f644:	add	r3, r6, r2
   3f648:	sub	r2, r3, r1
   3f64c:	mov	r0, r4
   3f650:	ldrh	ip, [r2]
   3f654:	add	r1, sp, #20
   3f658:	str	r3, [sp, #20]
   3f65c:	ldr	r3, [sp, #84]	; 0x54
   3f660:	str	r2, [sp, #24]
   3f664:	str	ip, [sp, #28]
   3f668:	blx	r3
   3f66c:	ldrb	r3, [r4, #25]
   3f670:	cmp	r3, #0
   3f674:	bne	3f690 <flatcc_json_printer_table_vector_field@@Base+0x25c>
   3f678:	ldr	r7, [r4, #20]
   3f67c:	add	r3, r7, #1
   3f680:	str	r3, [r4, #20]
   3f684:	mov	r3, #125	; 0x7d
   3f688:	strb	r3, [r7]
   3f68c:	b	3f52c <flatcc_json_printer_table_vector_field@@Base+0xf8>
   3f690:	ldr	r3, [r4, #20]
   3f694:	add	r2, r3, #1
   3f698:	str	r2, [r4, #20]
   3f69c:	mov	r2, #10
   3f6a0:	strb	r2, [r3]
   3f6a4:	ldr	r2, [r4, #32]
   3f6a8:	ldrb	r7, [r4, #25]
   3f6ac:	sub	r2, r2, #1
   3f6b0:	ldr	r0, [r4, #20]
   3f6b4:	ldr	r3, [r4, #16]
   3f6b8:	mul	r7, r2, r7
   3f6bc:	str	r2, [r4, #32]
   3f6c0:	add	r2, r0, r7
   3f6c4:	cmp	r3, r2
   3f6c8:	bcc	3f6e4 <flatcc_json_printer_table_vector_field@@Base+0x2b0>
   3f6cc:	mov	r2, r7
   3f6d0:	mov	r1, #32
   3f6d4:	bl	145c4 <memset@plt>
   3f6d8:	ldr	r3, [r4, #20]
   3f6dc:	add	r7, r3, r7
   3f6e0:	b	3f67c <flatcc_json_printer_table_vector_field@@Base+0x248>
   3f6e4:	cmp	r0, r3
   3f6e8:	bcc	3f724 <flatcc_json_printer_table_vector_field@@Base+0x2f0>
   3f6ec:	b	3f734 <flatcc_json_printer_table_vector_field@@Base+0x300>
   3f6f0:	mov	r2, r8
   3f6f4:	mov	r1, #32
   3f6f8:	bl	145c4 <memset@plt>
   3f6fc:	ldr	r3, [r4, #20]
   3f700:	mov	r0, r4
   3f704:	add	r3, r3, r8
   3f708:	str	r3, [r4, #20]
   3f70c:	ldr	r2, [r4, #44]	; 0x2c
   3f710:	mov	r1, sl
   3f714:	blx	r2
   3f718:	ldr	r0, [r4, #20]
   3f71c:	ldr	r3, [r4, #16]
   3f720:	sub	r7, r7, r8
   3f724:	sub	r8, r3, r0
   3f728:	cmp	r7, r8
   3f72c:	bhi	3f6f0 <flatcc_json_printer_table_vector_field@@Base+0x2bc>
   3f730:	b	3f6cc <flatcc_json_printer_table_vector_field@@Base+0x298>
   3f734:	ldr	r3, [r4, #44]	; 0x2c
   3f738:	mov	r0, r4
   3f73c:	mov	r1, sl
   3f740:	blx	r3
   3f744:	ldr	r3, [r4, #16]
   3f748:	ldr	r0, [r4, #20]
   3f74c:	b	3f724 <flatcc_json_printer_table_vector_field@@Base+0x2f0>
   3f750:	ldr	r2, [r4, #20]
   3f754:	mov	r1, #10
   3f758:	add	r0, r2, #1
   3f75c:	str	r0, [r4, #20]
   3f760:	strb	r1, [r2]
   3f764:	ldr	r2, [r4, #32]
   3f768:	mov	r0, r4
   3f76c:	sub	r2, r2, #1
   3f770:	str	r2, [r4, #32]
   3f774:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3f778:	b	3f5fc <flatcc_json_printer_table_vector_field@@Base+0x1c8>

0003f77c <flatcc_json_printer_union_vector_field@@Base>:
   3f77c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f780:	mov	r8, r2
   3f784:	add	r2, r2, #1
   3f788:	mov	r5, r1
   3f78c:	ldr	r1, [r1, #8]
   3f790:	sub	sp, sp, #140	; 0x8c
   3f794:	lsl	r2, r2, #1
   3f798:	cmp	r2, r1
   3f79c:	mov	r4, r0
   3f7a0:	mov	r9, r3
   3f7a4:	ldr	r6, [sp, #176]	; 0xb0
   3f7a8:	movge	r7, #0
   3f7ac:	bge	3f7c4 <flatcc_json_printer_union_vector_field@@Base+0x48>
   3f7b0:	ldr	r3, [r5, #4]
   3f7b4:	ldrh	r7, [r3, r2]
   3f7b8:	cmp	r7, #0
   3f7bc:	ldrne	r3, [r5]
   3f7c0:	addne	r7, r3, r7
   3f7c4:	add	r2, r2, #2
   3f7c8:	cmp	r2, r1
   3f7cc:	bge	3f9e0 <flatcc_json_printer_union_vector_field@@Base+0x264>
   3f7d0:	ldr	r3, [r5, #4]
   3f7d4:	ldrh	sl, [r3, r2]
   3f7d8:	cmp	sl, #0
   3f7dc:	beq	3f9e0 <flatcc_json_printer_union_vector_field@@Base+0x264>
   3f7e0:	ldr	r3, [r5]
   3f7e4:	cmp	r6, #100	; 0x64
   3f7e8:	mov	r2, r3
   3f7ec:	str	r3, [sp, #12]
   3f7f0:	ldr	r3, [r5, #12]
   3f7f4:	add	fp, r2, sl
   3f7f8:	str	r3, [sp, #20]
   3f7fc:	bgt	3fa14 <flatcc_json_printer_union_vector_field@@Base+0x298>
   3f800:	add	r3, sp, #28
   3f804:	mov	r0, r3
   3f808:	mov	r2, r6
   3f80c:	mov	r1, r9
   3f810:	bl	1454c <memcpy@plt>
   3f814:	ldr	r2, [pc, #612]	; 3fa80 <flatcc_json_printer_union_vector_field@@Base+0x304>
   3f818:	cmp	fp, #0
   3f81c:	cmpne	r7, #0
   3f820:	ldrb	ip, [r2, #4]
   3f824:	mov	r3, r0
   3f828:	add	r1, r0, r6
   3f82c:	ldr	r0, [r2]
   3f830:	str	r0, [r3, r6]
   3f834:	strb	ip, [r1, #4]
   3f838:	beq	3f9f0 <flatcc_json_printer_union_vector_field@@Base+0x274>
   3f83c:	ldr	r2, [sp, #180]	; 0xb4
   3f840:	add	r1, r6, #5
   3f844:	str	r2, [sp, #4]
   3f848:	str	r1, [sp]
   3f84c:	sub	r2, r8, #1
   3f850:	mov	r1, r5
   3f854:	mov	r0, r4
   3f858:	bl	3d4e8 <flatcc_json_printer_uint8_enum_vector_field@@Base>
   3f85c:	ldr	r3, [r5, #16]
   3f860:	mov	r0, r4
   3f864:	cmp	r3, #0
   3f868:	add	r3, r3, #1
   3f86c:	str	r3, [r5, #16]
   3f870:	ldrne	r3, [r4, #20]
   3f874:	movne	r2, #44	; 0x2c
   3f878:	addne	r1, r3, #1
   3f87c:	strne	r1, [r4, #20]
   3f880:	strbne	r2, [r3]
   3f884:	ldr	r3, [sp, #12]
   3f888:	mov	r2, r6
   3f88c:	mov	r1, r9
   3f890:	ldr	r3, [r3, sl]
   3f894:	ldr	r6, [r7]
   3f898:	add	r5, fp, r3
   3f89c:	ldr	r8, [fp, r3]
   3f8a0:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3f8a4:	ldr	r3, [r4, #32]
   3f8a8:	ldr	r2, [r4, #20]
   3f8ac:	add	r3, r3, #1
   3f8b0:	add	r0, r2, #1
   3f8b4:	mov	r1, #91	; 0x5b
   3f8b8:	cmp	r8, #0
   3f8bc:	str	r3, [r4, #32]
   3f8c0:	str	r0, [r4, #20]
   3f8c4:	strb	r1, [r2]
   3f8c8:	beq	3f9b8 <flatcc_json_printer_union_vector_field@@Base+0x23c>
   3f8cc:	add	r7, r7, r6
   3f8d0:	add	r5, r5, #4
   3f8d4:	ldrb	r3, [r7, #4]
   3f8d8:	cmp	r3, #0
   3f8dc:	bne	3fa64 <flatcc_json_printer_union_vector_field@@Base+0x2e8>
   3f8e0:	ldr	r3, [r4, #20]
   3f8e4:	mov	r2, #110	; 0x6e
   3f8e8:	add	r1, r3, #1
   3f8ec:	str	r1, [r4, #20]
   3f8f0:	strb	r2, [r3]
   3f8f4:	ldr	r3, [r4, #20]
   3f8f8:	mov	r2, #117	; 0x75
   3f8fc:	add	r1, r3, #1
   3f900:	str	r1, [r4, #20]
   3f904:	strb	r2, [r3]
   3f908:	ldr	r3, [r4, #20]
   3f90c:	mov	r2, #108	; 0x6c
   3f910:	add	r1, r3, #1
   3f914:	str	r1, [r4, #20]
   3f918:	strb	r2, [r3]
   3f91c:	ldr	r3, [r4, #20]
   3f920:	add	r1, r3, #1
   3f924:	str	r1, [r4, #20]
   3f928:	strb	r2, [r3]
   3f92c:	add	r8, r8, #3
   3f930:	add	r8, r7, r8
   3f934:	mov	r9, #44	; 0x2c
   3f938:	add	r7, r7, #4
   3f93c:	mov	fp, #110	; 0x6e
   3f940:	mov	sl, #117	; 0x75
   3f944:	mov	r6, #108	; 0x6c
   3f948:	cmp	r7, r8
   3f94c:	beq	3f9b8 <flatcc_json_printer_union_vector_field@@Base+0x23c>
   3f950:	ldrb	r2, [r7, #1]!
   3f954:	ldr	r3, [r4, #20]
   3f958:	add	r5, r5, #4
   3f95c:	add	r1, r3, #1
   3f960:	cmp	r2, #0
   3f964:	str	r1, [r4, #20]
   3f968:	strb	r9, [r3]
   3f96c:	bne	3f9f8 <flatcc_json_printer_union_vector_field@@Base+0x27c>
   3f970:	ldr	r3, [r4, #20]
   3f974:	cmp	r7, r8
   3f978:	add	r2, r3, #1
   3f97c:	str	r2, [r4, #20]
   3f980:	strb	fp, [r3]
   3f984:	ldr	r3, [r4, #20]
   3f988:	add	r2, r3, #1
   3f98c:	str	r2, [r4, #20]
   3f990:	strb	sl, [r3]
   3f994:	ldr	r3, [r4, #20]
   3f998:	add	r2, r3, #1
   3f99c:	str	r2, [r4, #20]
   3f9a0:	strb	r6, [r3]
   3f9a4:	ldr	r3, [r4, #20]
   3f9a8:	add	r2, r3, #1
   3f9ac:	str	r2, [r4, #20]
   3f9b0:	strb	r6, [r3]
   3f9b4:	bne	3f950 <flatcc_json_printer_union_vector_field@@Base+0x1d4>
   3f9b8:	ldrb	r3, [r4, #25]
   3f9bc:	cmp	r3, #0
   3f9c0:	bne	3fa38 <flatcc_json_printer_union_vector_field@@Base+0x2bc>
   3f9c4:	ldr	r3, [r4, #20]
   3f9c8:	mov	r2, #93	; 0x5d
   3f9cc:	add	r1, r3, #1
   3f9d0:	str	r1, [r4, #20]
   3f9d4:	strb	r2, [r3]
   3f9d8:	add	sp, sp, #140	; 0x8c
   3f9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9e0:	ldr	r3, [r5, #12]
   3f9e4:	cmp	r6, #100	; 0x64
   3f9e8:	str	r3, [sp, #20]
   3f9ec:	bgt	3fa14 <flatcc_json_printer_union_vector_field@@Base+0x298>
   3f9f0:	add	sp, sp, #140	; 0x8c
   3f9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9f8:	add	r1, sp, #16
   3f9fc:	mov	r0, r4
   3fa00:	ldr	r3, [sp, #184]	; 0xb8
   3fa04:	strb	r2, [sp, #24]
   3fa08:	str	r5, [sp, #16]
   3fa0c:	blx	r3
   3fa10:	b	3f948 <flatcc_json_printer_union_vector_field@@Base+0x1cc>
   3fa14:	ldr	r3, [r4, #36]	; 0x24
   3fa18:	ldr	r2, [pc, #100]	; 3fa84 <flatcc_json_printer_union_vector_field@@Base+0x308>
   3fa1c:	cmp	r3, #0
   3fa20:	moveq	r3, #1
   3fa24:	streq	r3, [r4, #36]	; 0x24
   3fa28:	ldr	r1, [pc, #88]	; 3fa88 <flatcc_json_printer_union_vector_field@@Base+0x30c>
   3fa2c:	ldr	r3, [pc, #88]	; 3fa8c <flatcc_json_printer_union_vector_field@@Base+0x310>
   3fa30:	ldr	r0, [pc, #88]	; 3fa90 <flatcc_json_printer_union_vector_field@@Base+0x314>
   3fa34:	bl	14618 <__assert_fail@plt>
   3fa38:	ldr	r3, [r4, #20]
   3fa3c:	mov	r2, #10
   3fa40:	add	r1, r3, #1
   3fa44:	str	r1, [r4, #20]
   3fa48:	strb	r2, [r3]
   3fa4c:	ldr	r3, [r4, #32]
   3fa50:	mov	r0, r4
   3fa54:	sub	r3, r3, #1
   3fa58:	str	r3, [r4, #32]
   3fa5c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3fa60:	b	3f9c4 <flatcc_json_printer_union_vector_field@@Base+0x248>
   3fa64:	add	r1, sp, #136	; 0x88
   3fa68:	strb	r3, [sp, #24]
   3fa6c:	mov	r0, r4
   3fa70:	str	r5, [r1, #-120]!	; 0xffffff88
   3fa74:	ldr	r3, [sp, #184]	; 0xb8
   3fa78:	blx	r3
   3fa7c:	b	3f92c <flatcc_json_printer_union_vector_field@@Base+0x1b0>
   3fa80:	andeq	r7, r4, ip, ror #26
   3fa84:	andeq	r0, r0, fp, asr #6
   3fa88:			; <UNDEFINED> instruction: 0x00047bbc
   3fa8c:	andeq	r7, r4, r8, asr fp
   3fa90:	andeq	r7, r4, r0, asr sp

0003fa94 <flatcc_json_printer_table_field@@Base>:
   3fa94:	add	r2, r2, #2
   3fa98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa9c:	mov	r8, r1
   3faa0:	ldr	r1, [r1, #8]
   3faa4:	sub	sp, sp, #36	; 0x24
   3faa8:	lsl	r2, r2, #1
   3faac:	cmp	r2, r1
   3fab0:	ldr	r9, [sp, #72]	; 0x48
   3fab4:	bge	3fc3c <flatcc_json_printer_table_field@@Base+0x1a8>
   3fab8:	mov	r6, r3
   3fabc:	ldr	r3, [r8, #4]
   3fac0:	ldrh	sl, [r3, r2]
   3fac4:	cmp	sl, #0
   3fac8:	beq	3fc3c <flatcc_json_printer_table_field@@Base+0x1a8>
   3facc:	ldr	r3, [r8]
   3fad0:	adds	fp, r3, sl
   3fad4:	str	r3, [sp, #4]
   3fad8:	beq	3fc3c <flatcc_json_printer_table_field@@Base+0x1a8>
   3fadc:	ldr	r3, [r8, #16]
   3fae0:	mov	r4, r0
   3fae4:	cmp	r3, #0
   3fae8:	add	r3, r3, #1
   3faec:	str	r3, [r8, #16]
   3faf0:	ldrne	r3, [r0, #20]
   3faf4:	movne	r2, #44	; 0x2c
   3faf8:	addne	r1, r3, #1
   3fafc:	strne	r1, [r0, #20]
   3fb00:	strbne	r2, [r3]
   3fb04:	ldrb	r1, [r0, #25]
   3fb08:	mov	r7, r9
   3fb0c:	ldr	r3, [r0, #20]
   3fb10:	cmp	r1, #0
   3fb14:	bne	3fd2c <flatcc_json_printer_table_field@@Base+0x298>
   3fb18:	ldr	r2, [r0, #16]
   3fb1c:	cmp	r3, r2
   3fb20:	bcc	3fb30 <flatcc_json_printer_table_field@@Base+0x9c>
   3fb24:	ldr	r3, [r0, #44]	; 0x2c
   3fb28:	blx	r3
   3fb2c:	ldr	r3, [r4, #20]
   3fb30:	mov	r2, #34	; 0x22
   3fb34:	strb	r2, [r3]
   3fb38:	ldrb	r3, [r4, #26]
   3fb3c:	ldr	r0, [r4, #20]
   3fb40:	ldr	r5, [r4, #16]
   3fb44:	cmp	r3, #0
   3fb48:	addeq	r0, r0, #1
   3fb4c:	add	r3, r0, r9
   3fb50:	cmp	r5, r3
   3fb54:	str	r0, [r4, #20]
   3fb58:	bhi	3fc44 <flatcc_json_printer_table_field@@Base+0x1b0>
   3fb5c:	cmp	r0, r5
   3fb60:	bcs	3fd10 <flatcc_json_printer_table_field@@Base+0x27c>
   3fb64:	sub	r5, r5, r0
   3fb68:	cmp	r9, r5
   3fb6c:	bls	3fbb8 <flatcc_json_printer_table_field@@Base+0x124>
   3fb70:	mov	r9, #0
   3fb74:	mov	r2, r5
   3fb78:	mov	r1, r6
   3fb7c:	bl	1454c <memcpy@plt>
   3fb80:	ldr	r2, [r4, #20]
   3fb84:	ldr	r3, [r4, #44]	; 0x2c
   3fb88:	add	r2, r2, r5
   3fb8c:	mov	r0, r4
   3fb90:	str	r2, [r4, #20]
   3fb94:	mov	r1, r9
   3fb98:	blx	r3
   3fb9c:	ldr	r0, [r4, #20]
   3fba0:	ldr	r3, [r4, #16]
   3fba4:	sub	r7, r7, r5
   3fba8:	add	r6, r6, r5
   3fbac:	sub	r5, r3, r0
   3fbb0:	cmp	r7, r5
   3fbb4:	bhi	3fb74 <flatcc_json_printer_table_field@@Base+0xe0>
   3fbb8:	mov	r1, r6
   3fbbc:	mov	r2, r7
   3fbc0:	bl	1454c <memcpy@plt>
   3fbc4:	ldr	r9, [r4, #20]
   3fbc8:	add	r9, r9, r7
   3fbcc:	str	r9, [r4, #20]
   3fbd0:	mov	r3, #34	; 0x22
   3fbd4:	strb	r3, [r9]
   3fbd8:	ldr	r1, [r4, #20]
   3fbdc:	ldrb	r3, [r4, #26]
   3fbe0:	clz	r3, r3
   3fbe4:	lsr	r3, r3, #5
   3fbe8:	add	r2, r1, r3
   3fbec:	add	r2, r2, #1
   3fbf0:	mov	r0, #58	; 0x3a
   3fbf4:	str	r2, [r4, #20]
   3fbf8:	strb	r0, [r1, r3]
   3fbfc:	ldr	r3, [r4, #20]
   3fc00:	mov	r2, #32
   3fc04:	strb	r2, [r3]
   3fc08:	ldrb	r2, [r4, #25]
   3fc0c:	ldr	r3, [r8, #12]
   3fc10:	ldr	r0, [r4, #20]
   3fc14:	adds	r2, r2, #0
   3fc18:	movne	r2, #1
   3fc1c:	add	r1, r0, r2
   3fc20:	subs	r3, r3, #1
   3fc24:	str	r1, [r4, #20]
   3fc28:	bne	3fc60 <flatcc_json_printer_table_field@@Base+0x1cc>
   3fc2c:	ldr	r3, [r4, #36]	; 0x24
   3fc30:	cmp	r3, #0
   3fc34:	moveq	r3, #2
   3fc38:	streq	r3, [r4, #36]	; 0x24
   3fc3c:	add	sp, sp, #36	; 0x24
   3fc40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fc44:	mov	r2, r9
   3fc48:	mov	r1, r6
   3fc4c:	bl	1454c <memcpy@plt>
   3fc50:	ldr	r7, [r4, #20]
   3fc54:	add	r9, r7, r9
   3fc58:	str	r9, [r4, #20]
   3fc5c:	b	3fbd0 <flatcc_json_printer_table_field@@Base+0x13c>
   3fc60:	ldr	ip, [sp, #4]
   3fc64:	add	r1, r1, #1
   3fc68:	mov	r5, #123	; 0x7b
   3fc6c:	ldr	lr, [ip, sl]
   3fc70:	ldr	ip, [r4, #32]
   3fc74:	str	r1, [r4, #20]
   3fc78:	add	ip, ip, #1
   3fc7c:	mov	r1, #0
   3fc80:	str	ip, [r4, #32]
   3fc84:	strb	r5, [r0, r2]
   3fc88:	str	r1, [sp, #28]
   3fc8c:	str	r3, [sp, #24]
   3fc90:	ldr	r3, [fp, lr]
   3fc94:	add	fp, fp, lr
   3fc98:	sub	r3, fp, r3
   3fc9c:	add	r1, sp, #12
   3fca0:	ldrh	r2, [r3]
   3fca4:	mov	r0, r4
   3fca8:	str	r3, [sp, #16]
   3fcac:	ldr	r3, [sp, #76]	; 0x4c
   3fcb0:	str	r2, [sp, #20]
   3fcb4:	str	fp, [sp, #12]
   3fcb8:	blx	r3
   3fcbc:	ldrb	r3, [r4, #25]
   3fcc0:	cmp	r3, #0
   3fcc4:	bne	3fce4 <flatcc_json_printer_table_field@@Base+0x250>
   3fcc8:	ldr	r3, [r4, #20]
   3fccc:	mov	r2, #125	; 0x7d
   3fcd0:	add	r1, r3, #1
   3fcd4:	str	r1, [r4, #20]
   3fcd8:	strb	r2, [r3]
   3fcdc:	add	sp, sp, #36	; 0x24
   3fce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fce4:	ldr	r3, [r4, #20]
   3fce8:	mov	r2, #10
   3fcec:	add	r1, r3, #1
   3fcf0:	str	r1, [r4, #20]
   3fcf4:	strb	r2, [r3]
   3fcf8:	ldr	r3, [r4, #32]
   3fcfc:	mov	r0, r4
   3fd00:	sub	r3, r3, #1
   3fd04:	str	r3, [r4, #32]
   3fd08:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3fd0c:	b	3fcc8 <flatcc_json_printer_table_field@@Base+0x234>
   3fd10:	mov	r0, r4
   3fd14:	ldr	r3, [r4, #44]	; 0x2c
   3fd18:	mov	r1, #0
   3fd1c:	blx	r3
   3fd20:	ldr	r5, [r4, #16]
   3fd24:	ldr	r0, [r4, #20]
   3fd28:	b	3fb64 <flatcc_json_printer_table_field@@Base+0xd0>
   3fd2c:	add	r1, r3, #1
   3fd30:	mov	r2, #10
   3fd34:	str	r1, [r0, #20]
   3fd38:	strb	r2, [r3]
   3fd3c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   3fd40:	ldr	r3, [r4, #20]
   3fd44:	b	3fb30 <flatcc_json_printer_table_field@@Base+0x9c>

0003fd48 <flatcc_json_printer_union_field@@Base>:
   3fd48:	add	r2, r2, #1
   3fd4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fd50:	lsl	r2, r2, #1
   3fd54:	ldr	lr, [r1, #8]
   3fd58:	sub	sp, sp, #28
   3fd5c:	cmp	r2, lr
   3fd60:	movge	ip, #0
   3fd64:	bge	3fd7c <flatcc_json_printer_union_field@@Base+0x34>
   3fd68:	ldr	ip, [r1, #4]
   3fd6c:	ldrh	ip, [ip, r2]
   3fd70:	cmp	ip, #0
   3fd74:	ldrne	r4, [r1]
   3fd78:	addne	ip, r4, ip
   3fd7c:	add	r2, r2, #2
   3fd80:	cmp	r2, lr
   3fd84:	bge	3ffc8 <flatcc_json_printer_union_field@@Base+0x280>
   3fd88:	ldr	lr, [r1, #4]
   3fd8c:	ldrh	r2, [lr, r2]
   3fd90:	cmp	r2, #0
   3fd94:	beq	3ffc8 <flatcc_json_printer_union_field@@Base+0x280>
   3fd98:	ldr	fp, [r1]
   3fd9c:	adds	r2, fp, r2
   3fda0:	str	r2, [sp, #4]
   3fda4:	moveq	r2, #1
   3fda8:	movne	r2, #0
   3fdac:	cmp	ip, #0
   3fdb0:	orreq	r2, r2, #1
   3fdb4:	cmp	r2, #0
   3fdb8:	bne	3ffc8 <flatcc_json_printer_union_field@@Base+0x280>
   3fdbc:	ldr	r2, [r1, #16]
   3fdc0:	ldrb	sl, [ip]
   3fdc4:	cmp	r2, #0
   3fdc8:	add	r2, r2, #1
   3fdcc:	str	r2, [r1, #16]
   3fdd0:	ldrne	r2, [r0, #20]
   3fdd4:	movne	ip, #44	; 0x2c
   3fdd8:	addne	lr, r2, #1
   3fddc:	strne	lr, [r0, #20]
   3fde0:	mov	r7, r1
   3fde4:	strbne	ip, [r2]
   3fde8:	ldrb	r1, [r0, #25]
   3fdec:	mov	r8, r3
   3fdf0:	mov	r4, r0
   3fdf4:	cmp	r1, #0
   3fdf8:	ldr	r3, [r0, #20]
   3fdfc:	bne	4006c <flatcc_json_printer_union_field@@Base+0x324>
   3fe00:	ldr	r2, [r0, #16]
   3fe04:	cmp	r3, r2
   3fe08:	bcs	40088 <flatcc_json_printer_union_field@@Base+0x340>
   3fe0c:	mov	r2, #34	; 0x22
   3fe10:	strb	r2, [r3]
   3fe14:	ldrb	r3, [r4, #26]
   3fe18:	ldr	r0, [r4, #20]
   3fe1c:	ldr	r5, [r4, #16]
   3fe20:	cmp	r3, #0
   3fe24:	addeq	r0, r0, #1
   3fe28:	ldr	r3, [sp, #64]	; 0x40
   3fe2c:	str	r0, [r4, #20]
   3fe30:	add	r3, r0, r3
   3fe34:	cmp	r5, r3
   3fe38:	bhi	3fec0 <flatcc_json_printer_union_field@@Base+0x178>
   3fe3c:	cmp	r0, r5
   3fe40:	bcs	400b4 <flatcc_json_printer_union_field@@Base+0x36c>
   3fe44:	ldr	r3, [sp, #64]	; 0x40
   3fe48:	sub	r5, r5, r0
   3fe4c:	cmp	r3, r5
   3fe50:	mov	r6, r3
   3fe54:	mov	fp, r8
   3fe58:	bls	3fea4 <flatcc_json_printer_union_field@@Base+0x15c>
   3fe5c:	mov	r9, #0
   3fe60:	mov	r2, r5
   3fe64:	mov	r1, fp
   3fe68:	bl	1454c <memcpy@plt>
   3fe6c:	ldr	r1, [r4, #20]
   3fe70:	ldr	r2, [r4, #44]	; 0x2c
   3fe74:	add	r1, r1, r5
   3fe78:	str	r1, [r4, #20]
   3fe7c:	mov	r0, r4
   3fe80:	mov	r1, r9
   3fe84:	blx	r2
   3fe88:	ldr	r0, [r4, #20]
   3fe8c:	ldr	r2, [r4, #16]
   3fe90:	sub	r6, r6, r5
   3fe94:	add	fp, fp, r5
   3fe98:	sub	r5, r2, r0
   3fe9c:	cmp	r6, r5
   3fea0:	bhi	3fe60 <flatcc_json_printer_union_field@@Base+0x118>
   3fea4:	mov	r2, r6
   3fea8:	mov	r1, fp
   3feac:	bl	1454c <memcpy@plt>
   3feb0:	ldr	r2, [r4, #20]
   3feb4:	add	r2, r2, r6
   3feb8:	str	r2, [r4, #20]
   3febc:	b	3fedc <flatcc_json_printer_union_field@@Base+0x194>
   3fec0:	ldr	r2, [sp, #64]	; 0x40
   3fec4:	mov	r1, r8
   3fec8:	bl	1454c <memcpy@plt>
   3fecc:	ldr	r2, [r4, #20]
   3fed0:	ldr	r3, [sp, #64]	; 0x40
   3fed4:	add	r2, r2, r3
   3fed8:	str	r2, [r4, #20]
   3fedc:	ldr	r5, [r4, #16]
   3fee0:	add	r3, r2, #5
   3fee4:	cmp	r5, r3
   3fee8:	bls	3ffe4 <flatcc_json_printer_union_field@@Base+0x29c>
   3feec:	ldr	r3, [pc, #476]	; 400d0 <flatcc_json_printer_union_field@@Base+0x388>
   3fef0:	ldrb	r1, [r3, #4]
   3fef4:	ldr	r0, [r3]
   3fef8:	strb	r1, [r2, #4]
   3fefc:	str	r0, [r2]
   3ff00:	ldr	r6, [r4, #20]
   3ff04:	add	r6, r6, #5
   3ff08:	str	r6, [r4, #20]
   3ff0c:	mov	r3, #34	; 0x22
   3ff10:	strb	r3, [r6]
   3ff14:	ldr	r1, [r4, #20]
   3ff18:	ldrb	r3, [r4, #26]
   3ff1c:	clz	r3, r3
   3ff20:	lsr	r3, r3, #5
   3ff24:	add	r2, r1, r3
   3ff28:	add	r2, r2, #1
   3ff2c:	mov	r0, #58	; 0x3a
   3ff30:	str	r2, [r4, #20]
   3ff34:	strb	r0, [r1, r3]
   3ff38:	ldr	r3, [r4, #20]
   3ff3c:	mov	r2, #32
   3ff40:	strb	r2, [r3]
   3ff44:	ldrb	r2, [r4, #25]
   3ff48:	ldrb	r3, [r4, #27]
   3ff4c:	ldr	r1, [r4, #20]
   3ff50:	cmp	r2, #0
   3ff54:	addne	r1, r1, #1
   3ff58:	cmp	r3, #0
   3ff5c:	str	r1, [r4, #20]
   3ff60:	beq	3ffd0 <flatcc_json_printer_union_field@@Base+0x288>
   3ff64:	mov	r0, sl
   3ff68:	bl	34c0c <flatcc_json_parser_struct_as_root@@Base+0xe24>
   3ff6c:	ldr	r3, [r4, #20]
   3ff70:	add	r0, r3, r0
   3ff74:	str	r0, [r4, #20]
   3ff78:	cmp	sl, #0
   3ff7c:	beq	3ffc8 <flatcc_json_printer_union_field@@Base+0x280>
   3ff80:	ldr	r3, [r4, #20]
   3ff84:	mov	r2, #44	; 0x2c
   3ff88:	add	r0, r3, #1
   3ff8c:	str	r0, [r4, #20]
   3ff90:	mov	r1, r8
   3ff94:	strb	r2, [r3]
   3ff98:	mov	r0, r4
   3ff9c:	ldr	r2, [sp, #64]	; 0x40
   3ffa0:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   3ffa4:	ldr	r3, [r7, #12]
   3ffa8:	add	r1, sp, #24
   3ffac:	ldr	r2, [sp, #4]
   3ffb0:	str	r3, [sp, #16]
   3ffb4:	mov	r0, r4
   3ffb8:	str	r2, [r1, #-12]!
   3ffbc:	ldr	r3, [sp, #72]	; 0x48
   3ffc0:	strb	sl, [sp, #20]
   3ffc4:	blx	r3
   3ffc8:	add	sp, sp, #28
   3ffcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ffd0:	mov	r1, sl
   3ffd4:	mov	r0, r4
   3ffd8:	ldr	r3, [sp, #68]	; 0x44
   3ffdc:	blx	r3
   3ffe0:	b	3ff78 <flatcc_json_printer_union_field@@Base+0x230>
   3ffe4:	cmp	r5, r2
   3ffe8:	bls	40098 <flatcc_json_printer_union_field@@Base+0x350>
   3ffec:	sub	r5, r5, r2
   3fff0:	cmp	r5, #4
   3fff4:	ldr	fp, [pc, #212]	; 400d0 <flatcc_json_printer_union_field@@Base+0x388>
   3fff8:	mov	r6, #5
   3fffc:	bhi	4004c <flatcc_json_printer_union_field@@Base+0x304>
   40000:	mov	r9, #0
   40004:	mov	r1, fp
   40008:	mov	r0, r2
   4000c:	mov	r2, r5
   40010:	bl	1454c <memcpy@plt>
   40014:	ldr	r1, [r4, #20]
   40018:	ldr	r2, [r4, #44]	; 0x2c
   4001c:	add	r1, r1, r5
   40020:	str	r1, [r4, #20]
   40024:	mov	r0, r4
   40028:	mov	r1, r9
   4002c:	blx	r2
   40030:	ldr	r2, [r4, #20]
   40034:	ldr	r1, [r4, #16]
   40038:	sub	r6, r6, r5
   4003c:	add	fp, fp, r5
   40040:	sub	r5, r1, r2
   40044:	cmp	r6, r5
   40048:	bhi	40004 <flatcc_json_printer_union_field@@Base+0x2bc>
   4004c:	mov	r0, r2
   40050:	mov	r1, fp
   40054:	mov	r2, r6
   40058:	bl	1454c <memcpy@plt>
   4005c:	ldr	r3, [r4, #20]
   40060:	add	r6, r3, r6
   40064:	str	r6, [r4, #20]
   40068:	b	3ff0c <flatcc_json_printer_union_field@@Base+0x1c4>
   4006c:	add	r1, r3, #1
   40070:	mov	r2, #10
   40074:	str	r1, [r0, #20]
   40078:	strb	r2, [r3]
   4007c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   40080:	ldr	r3, [r4, #20]
   40084:	b	3fe0c <flatcc_json_printer_union_field@@Base+0xc4>
   40088:	ldr	r3, [r0, #44]	; 0x2c
   4008c:	blx	r3
   40090:	ldr	r3, [r4, #20]
   40094:	b	3fe0c <flatcc_json_printer_union_field@@Base+0xc4>
   40098:	ldr	r3, [r4, #44]	; 0x2c
   4009c:	mov	r1, #0
   400a0:	mov	r0, r4
   400a4:	blx	r3
   400a8:	ldr	r5, [r4, #16]
   400ac:	ldr	r2, [r4, #20]
   400b0:	b	3ffec <flatcc_json_printer_union_field@@Base+0x2a4>
   400b4:	mov	r0, r4
   400b8:	ldr	r3, [r4, #44]	; 0x2c
   400bc:	mov	r1, #0
   400c0:	blx	r3
   400c4:	ldr	r5, [r4, #16]
   400c8:	ldr	r0, [r4, #20]
   400cc:	b	3fe44 <flatcc_json_printer_union_field@@Base+0xfc>
   400d0:	andeq	r7, r4, ip, ror #26

000400d4 <flatcc_json_printer_union_table@@Base>:
   400d4:	ldr	r3, [r1, #4]
   400d8:	push	{r4, r5, r6, r7, lr}
   400dc:	subs	r3, r3, #1
   400e0:	sub	sp, sp, #28
   400e4:	mov	r4, r0
   400e8:	bne	40104 <flatcc_json_printer_union_table@@Base+0x30>
   400ec:	ldr	r3, [r0, #36]	; 0x24
   400f0:	cmp	r3, #0
   400f4:	moveq	r3, #2
   400f8:	streq	r3, [r0, #36]	; 0x24
   400fc:	add	sp, sp, #28
   40100:	pop	{r4, r5, r6, r7, pc}
   40104:	ldr	r1, [r1]
   40108:	ldr	ip, [r0, #32]
   4010c:	ldr	r5, [r0, #20]
   40110:	ldr	lr, [r1]
   40114:	add	ip, ip, #1
   40118:	str	ip, [r0, #32]
   4011c:	add	r7, r5, #1
   40120:	mov	ip, #0
   40124:	mov	r6, #123	; 0x7b
   40128:	str	r7, [r0, #20]
   4012c:	strb	r6, [r5]
   40130:	str	r3, [sp, #16]
   40134:	str	ip, [sp, #20]
   40138:	ldr	ip, [r1, lr]
   4013c:	add	r3, r1, lr
   40140:	sub	ip, r3, ip
   40144:	add	r1, sp, #4
   40148:	ldrh	lr, [ip]
   4014c:	stmib	sp, {r3, ip, lr}
   40150:	blx	r2
   40154:	ldrb	r3, [r4, #25]
   40158:	cmp	r3, #0
   4015c:	bne	4017c <flatcc_json_printer_union_table@@Base+0xa8>
   40160:	ldr	r3, [r4, #20]
   40164:	mov	r2, #125	; 0x7d
   40168:	add	r1, r3, #1
   4016c:	str	r1, [r4, #20]
   40170:	strb	r2, [r3]
   40174:	add	sp, sp, #28
   40178:	pop	{r4, r5, r6, r7, pc}
   4017c:	ldr	r3, [r4, #20]
   40180:	mov	r2, #10
   40184:	add	r1, r3, #1
   40188:	str	r1, [r4, #20]
   4018c:	strb	r2, [r3]
   40190:	ldr	r3, [r4, #32]
   40194:	mov	r0, r4
   40198:	sub	r3, r3, #1
   4019c:	str	r3, [r4, #32]
   401a0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   401a4:	b	40160 <flatcc_json_printer_union_table@@Base+0x8c>

000401a8 <flatcc_json_printer_union_struct@@Base>:
   401a8:	ldr	r3, [r0, #32]
   401ac:	ldr	ip, [r0, #20]
   401b0:	push	{r4, r5, r6, r7, r8, lr}
   401b4:	add	r3, r3, #1
   401b8:	mov	lr, #123	; 0x7b
   401bc:	add	r5, ip, #1
   401c0:	str	r3, [r0, #32]
   401c4:	str	r5, [r0, #20]
   401c8:	strb	lr, [ip]
   401cc:	ldr	r3, [r1]
   401d0:	mov	r4, r0
   401d4:	ldr	r1, [r3]
   401d8:	add	r1, r3, r1
   401dc:	blx	r2
   401e0:	ldrb	r3, [r4, #25]
   401e4:	cmp	r3, #0
   401e8:	bne	40204 <flatcc_json_printer_union_struct@@Base+0x5c>
   401ec:	ldr	r5, [r4, #20]
   401f0:	add	r2, r5, #1
   401f4:	mov	r3, #125	; 0x7d
   401f8:	str	r2, [r4, #20]
   401fc:	strb	r3, [r5]
   40200:	pop	{r4, r5, r6, r7, r8, pc}
   40204:	ldr	r3, [r4, #20]
   40208:	mov	r2, #10
   4020c:	add	r1, r3, #1
   40210:	str	r1, [r4, #20]
   40214:	strb	r2, [r3]
   40218:	ldr	r3, [r4, #32]
   4021c:	ldrb	r5, [r4, #25]
   40220:	sub	r3, r3, #1
   40224:	ldr	r0, [r4, #20]
   40228:	ldr	r6, [r4, #16]
   4022c:	mul	r5, r3, r5
   40230:	str	r3, [r4, #32]
   40234:	add	r3, r0, r5
   40238:	cmp	r6, r3
   4023c:	bcc	40258 <flatcc_json_printer_union_struct@@Base+0xb0>
   40240:	mov	r2, r5
   40244:	mov	r1, #32
   40248:	bl	145c4 <memset@plt>
   4024c:	ldr	r3, [r4, #20]
   40250:	add	r5, r3, r5
   40254:	b	401f0 <flatcc_json_printer_union_struct@@Base+0x48>
   40258:	cmp	r0, r6
   4025c:	bcs	402b8 <flatcc_json_printer_union_struct@@Base+0x110>
   40260:	sub	r6, r6, r0
   40264:	cmp	r5, r6
   40268:	bls	40240 <flatcc_json_printer_union_struct@@Base+0x98>
   4026c:	mov	r8, #32
   40270:	mov	r7, #0
   40274:	mov	r2, r6
   40278:	mov	r1, r8
   4027c:	bl	145c4 <memset@plt>
   40280:	ldr	r3, [r4, #20]
   40284:	mov	r0, r4
   40288:	add	r3, r3, r6
   4028c:	str	r3, [r4, #20]
   40290:	ldr	r2, [r4, #44]	; 0x2c
   40294:	mov	r1, r7
   40298:	blx	r2
   4029c:	ldr	r0, [r4, #20]
   402a0:	ldr	r3, [r4, #16]
   402a4:	sub	r5, r5, r6
   402a8:	sub	r6, r3, r0
   402ac:	cmp	r5, r6
   402b0:	bhi	40274 <flatcc_json_printer_union_struct@@Base+0xcc>
   402b4:	b	40240 <flatcc_json_printer_union_struct@@Base+0x98>
   402b8:	mov	r0, r4
   402bc:	ldr	r3, [r4, #44]	; 0x2c
   402c0:	mov	r1, #0
   402c4:	blx	r3
   402c8:	ldr	r6, [r4, #16]
   402cc:	ldr	r0, [r4, #20]
   402d0:	b	40260 <flatcc_json_printer_union_struct@@Base+0xb8>

000402d4 <flatcc_json_printer_union_string@@Base>:
   402d4:	ldr	r3, [r1]
   402d8:	ldr	r2, [r3]
   402dc:	add	r1, r3, r2
   402e0:	add	r1, r1, #4
   402e4:	ldr	r2, [r3, r2]
   402e8:	b	34ce0 <flatcc_json_parser_struct_as_root@@Base+0xef8>

000402ec <flatcc_json_printer_embedded_struct_field@@Base>:
   402ec:	cmp	r1, #0
   402f0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   402f4:	mov	r9, r3
   402f8:	ldrne	r3, [r0, #20]
   402fc:	add	r6, sp, #40	; 0x28
   40300:	addne	r1, r3, #1
   40304:	mov	sl, r2
   40308:	movne	r2, #44	; 0x2c
   4030c:	strne	r1, [r0, #20]
   40310:	ldm	r6, {r6, r7, r8}
   40314:	mov	r4, r0
   40318:	strbne	r2, [r3]
   4031c:	ldrb	r1, [r0, #25]
   40320:	mov	fp, r7
   40324:	ldr	r3, [r0, #20]
   40328:	cmp	r1, #0
   4032c:	bne	404f4 <flatcc_json_printer_embedded_struct_field@@Base+0x208>
   40330:	ldr	r2, [r0, #16]
   40334:	cmp	r3, r2
   40338:	bcs	40474 <flatcc_json_printer_embedded_struct_field@@Base+0x188>
   4033c:	mov	r2, #34	; 0x22
   40340:	strb	r2, [r3]
   40344:	ldrb	r3, [r4, #26]
   40348:	ldr	r0, [r4, #20]
   4034c:	ldr	r5, [r4, #16]
   40350:	cmp	r3, #0
   40354:	addeq	r0, r0, #1
   40358:	add	r3, r0, r7
   4035c:	cmp	r5, r3
   40360:	str	r0, [r4, #20]
   40364:	bhi	40484 <flatcc_json_printer_embedded_struct_field@@Base+0x198>
   40368:	cmp	r0, r5
   4036c:	bcs	40510 <flatcc_json_printer_embedded_struct_field@@Base+0x224>
   40370:	sub	r5, r5, r0
   40374:	cmp	r7, r5
   40378:	bls	403c4 <flatcc_json_printer_embedded_struct_field@@Base+0xd8>
   4037c:	mov	r7, #0
   40380:	mov	r2, r5
   40384:	mov	r1, r6
   40388:	bl	1454c <memcpy@plt>
   4038c:	ldr	r3, [r4, #20]
   40390:	mov	r0, r4
   40394:	add	r3, r3, r5
   40398:	str	r3, [r4, #20]
   4039c:	ldr	r2, [r4, #44]	; 0x2c
   403a0:	mov	r1, r7
   403a4:	blx	r2
   403a8:	ldr	r0, [r4, #20]
   403ac:	ldr	r3, [r4, #16]
   403b0:	sub	fp, fp, r5
   403b4:	add	r6, r6, r5
   403b8:	sub	r5, r3, r0
   403bc:	cmp	fp, r5
   403c0:	bhi	40380 <flatcc_json_printer_embedded_struct_field@@Base+0x94>
   403c4:	mov	r1, r6
   403c8:	mov	r2, fp
   403cc:	bl	1454c <memcpy@plt>
   403d0:	ldr	r7, [r4, #20]
   403d4:	add	r7, r7, fp
   403d8:	str	r7, [r4, #20]
   403dc:	mov	r3, #34	; 0x22
   403e0:	strb	r3, [r7]
   403e4:	ldr	r1, [r4, #20]
   403e8:	ldrb	r3, [r4, #26]
   403ec:	clz	r3, r3
   403f0:	lsr	r3, r3, #5
   403f4:	add	r2, r1, r3
   403f8:	add	r2, r2, #1
   403fc:	mov	r0, #58	; 0x3a
   40400:	str	r2, [r4, #20]
   40404:	strb	r0, [r1, r3]
   40408:	ldr	r3, [r4, #20]
   4040c:	mov	r7, #32
   40410:	add	r1, sl, r9
   40414:	strb	r7, [r3]
   40418:	ldrb	r3, [r4, #25]
   4041c:	ldr	ip, [r4, #20]
   40420:	ldr	r2, [r4, #32]
   40424:	adds	r3, r3, #0
   40428:	movne	r3, #1
   4042c:	add	r0, ip, r3
   40430:	add	r0, r0, #1
   40434:	str	r0, [r4, #20]
   40438:	add	r2, r2, #1
   4043c:	mov	r0, #123	; 0x7b
   40440:	str	r2, [r4, #32]
   40444:	strb	r0, [ip, r3]
   40448:	mov	r0, r4
   4044c:	blx	r8
   40450:	ldrb	r3, [r4, #25]
   40454:	cmp	r3, #0
   40458:	bne	404a0 <flatcc_json_printer_embedded_struct_field@@Base+0x1b4>
   4045c:	ldr	r5, [r4, #20]
   40460:	add	r2, r5, #1
   40464:	mov	r3, #125	; 0x7d
   40468:	str	r2, [r4, #20]
   4046c:	strb	r3, [r5]
   40470:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40474:	ldr	r3, [r0, #44]	; 0x2c
   40478:	blx	r3
   4047c:	ldr	r3, [r4, #20]
   40480:	b	4033c <flatcc_json_printer_embedded_struct_field@@Base+0x50>
   40484:	mov	r2, r7
   40488:	mov	r1, r6
   4048c:	bl	1454c <memcpy@plt>
   40490:	ldr	fp, [r4, #20]
   40494:	add	r7, fp, r7
   40498:	str	r7, [r4, #20]
   4049c:	b	403dc <flatcc_json_printer_embedded_struct_field@@Base+0xf0>
   404a0:	ldr	r3, [r4, #20]
   404a4:	mov	r2, #10
   404a8:	add	r1, r3, #1
   404ac:	str	r1, [r4, #20]
   404b0:	strb	r2, [r3]
   404b4:	ldr	r3, [r4, #32]
   404b8:	ldrb	r5, [r4, #25]
   404bc:	sub	r3, r3, #1
   404c0:	ldr	r0, [r4, #20]
   404c4:	ldr	r6, [r4, #16]
   404c8:	mul	r5, r3, r5
   404cc:	str	r3, [r4, #32]
   404d0:	add	r3, r0, r5
   404d4:	cmp	r6, r3
   404d8:	bcc	4052c <flatcc_json_printer_embedded_struct_field@@Base+0x240>
   404dc:	mov	r2, r5
   404e0:	mov	r1, r7
   404e4:	bl	145c4 <memset@plt>
   404e8:	ldr	r3, [r4, #20]
   404ec:	add	r5, r3, r5
   404f0:	b	40460 <flatcc_json_printer_embedded_struct_field@@Base+0x174>
   404f4:	add	r1, r3, #1
   404f8:	mov	r2, #10
   404fc:	str	r1, [r0, #20]
   40500:	strb	r2, [r3]
   40504:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   40508:	ldr	r3, [r4, #20]
   4050c:	b	4033c <flatcc_json_printer_embedded_struct_field@@Base+0x50>
   40510:	mov	r0, r4
   40514:	ldr	r3, [r4, #44]	; 0x2c
   40518:	mov	r1, #0
   4051c:	blx	r3
   40520:	ldr	r5, [r4, #16]
   40524:	ldr	r0, [r4, #20]
   40528:	b	40370 <flatcc_json_printer_embedded_struct_field@@Base+0x84>
   4052c:	cmp	r0, r6
   40530:	bcs	405a0 <flatcc_json_printer_embedded_struct_field@@Base+0x2b4>
   40534:	sub	r6, r6, r0
   40538:	cmp	r5, r6
   4053c:	bls	40588 <flatcc_json_printer_embedded_struct_field@@Base+0x29c>
   40540:	mov	r8, #32
   40544:	mov	r7, #0
   40548:	mov	r2, r6
   4054c:	mov	r1, r8
   40550:	bl	145c4 <memset@plt>
   40554:	ldr	r3, [r4, #20]
   40558:	mov	r0, r4
   4055c:	add	r3, r3, r6
   40560:	str	r3, [r4, #20]
   40564:	ldr	r2, [r4, #44]	; 0x2c
   40568:	mov	r1, r7
   4056c:	blx	r2
   40570:	ldr	r0, [r4, #20]
   40574:	ldr	r3, [r4, #16]
   40578:	sub	r5, r5, r6
   4057c:	sub	r6, r3, r0
   40580:	cmp	r5, r6
   40584:	bhi	40548 <flatcc_json_printer_embedded_struct_field@@Base+0x25c>
   40588:	mov	r2, r5
   4058c:	mov	r1, #32
   40590:	bl	145c4 <memset@plt>
   40594:	ldr	r3, [r4, #20]
   40598:	add	r5, r3, r5
   4059c:	b	40460 <flatcc_json_printer_embedded_struct_field@@Base+0x174>
   405a0:	mov	r0, r4
   405a4:	ldr	r3, [r4, #44]	; 0x2c
   405a8:	mov	r1, #0
   405ac:	blx	r3
   405b0:	ldr	r6, [r4, #16]
   405b4:	ldr	r0, [r4, #20]
   405b8:	b	40534 <flatcc_json_printer_embedded_struct_field@@Base+0x248>

000405bc <flatcc_json_printer_struct_field@@Base>:
   405bc:	add	r2, r2, #2
   405c0:	ldr	ip, [r1, #8]
   405c4:	lsl	r2, r2, #1
   405c8:	cmp	r2, ip
   405cc:	bxge	lr
   405d0:	ldr	ip, [r1, #4]
   405d4:	ldrh	r2, [ip, r2]
   405d8:	cmp	r2, #0
   405dc:	bxeq	lr
   405e0:	push	{r4, r5, r6, lr}
   405e4:	ldr	r5, [r1]
   405e8:	adds	r5, r5, r2
   405ec:	popeq	{r4, r5, r6, pc}
   405f0:	ldr	r2, [r1, #16]
   405f4:	mov	r4, r0
   405f8:	cmp	r2, #0
   405fc:	add	r2, r2, #1
   40600:	str	r2, [r1, #16]
   40604:	ldrne	r2, [r0, #20]
   40608:	movne	r1, #44	; 0x2c
   4060c:	addne	ip, r2, #1
   40610:	strne	ip, [r0, #20]
   40614:	strbne	r1, [r2]
   40618:	mov	r1, r3
   4061c:	ldr	r2, [sp, #16]
   40620:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   40624:	ldr	r3, [r4, #32]
   40628:	ldr	r2, [r4, #20]
   4062c:	add	r3, r3, #1
   40630:	add	r0, r2, #1
   40634:	mov	ip, #123	; 0x7b
   40638:	str	r3, [r4, #32]
   4063c:	str	r0, [r4, #20]
   40640:	ldr	r3, [sp, #20]
   40644:	mov	r1, r5
   40648:	mov	r0, r4
   4064c:	strb	ip, [r2]
   40650:	blx	r3
   40654:	ldrb	r3, [r4, #25]
   40658:	cmp	r3, #0
   4065c:	bne	40678 <flatcc_json_printer_struct_field@@Base+0xbc>
   40660:	ldr	r3, [r4, #20]
   40664:	mov	r2, #125	; 0x7d
   40668:	add	r1, r3, #1
   4066c:	str	r1, [r4, #20]
   40670:	strb	r2, [r3]
   40674:	pop	{r4, r5, r6, pc}
   40678:	ldr	r3, [r4, #20]
   4067c:	mov	r2, #10
   40680:	add	r1, r3, #1
   40684:	str	r1, [r4, #20]
   40688:	strb	r2, [r3]
   4068c:	ldr	r3, [r4, #32]
   40690:	mov	r0, r4
   40694:	sub	r3, r3, #1
   40698:	str	r3, [r4, #32]
   4069c:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   406a0:	b	40660 <flatcc_json_printer_struct_field@@Base+0xa4>

000406a4 <flatcc_json_printer_struct_as_root@@Base>:
   406a4:	push	{r4, r5, lr}
   406a8:	sub	sp, sp, #12
   406ac:	cmp	r1, #0
   406b0:	cmpne	r2, #7
   406b4:	mov	r2, #0
   406b8:	mov	r4, r0
   406bc:	str	r2, [sp, #4]
   406c0:	bls	407d4 <flatcc_json_printer_struct_as_root@@Base+0x130>
   406c4:	cmp	r3, #0
   406c8:	mov	r5, r1
   406cc:	beq	406f4 <flatcc_json_printer_struct_as_root@@Base+0x50>
   406d0:	mov	r2, #4
   406d4:	mov	r1, r3
   406d8:	add	r0, sp, r2
   406dc:	bl	145d0 <strncpy@plt>
   406e0:	ldr	r3, [sp, #4]
   406e4:	ldr	r2, [r5, #4]
   406e8:	cmp	r2, r3
   406ec:	cmpne	r3, #0
   406f0:	bne	407f8 <flatcc_json_printer_struct_as_root@@Base+0x154>
   406f4:	ldr	r3, [r4, #32]
   406f8:	ldr	r2, [r4, #20]
   406fc:	add	r3, r3, #1
   40700:	add	r0, r2, #1
   40704:	mov	r1, #123	; 0x7b
   40708:	str	r3, [r4, #32]
   4070c:	str	r0, [r4, #20]
   40710:	strb	r1, [r2]
   40714:	ldr	r1, [r5]
   40718:	ldr	r3, [sp, #24]
   4071c:	mov	r0, r4
   40720:	add	r1, r5, r1
   40724:	blx	r3
   40728:	ldrb	r3, [r4, #25]
   4072c:	cmp	r3, #0
   40730:	bne	407a8 <flatcc_json_printer_struct_as_root@@Base+0x104>
   40734:	ldr	r3, [r4, #20]
   40738:	mov	r2, #125	; 0x7d
   4073c:	add	r1, r3, #1
   40740:	str	r1, [r4, #20]
   40744:	strb	r2, [r3]
   40748:	ldrb	r3, [r4, #25]
   4074c:	cmp	r3, #0
   40750:	beq	40770 <flatcc_json_printer_struct_as_root@@Base+0xcc>
   40754:	ldr	r3, [r4, #32]
   40758:	cmp	r3, #0
   4075c:	moveq	r2, #10
   40760:	ldreq	r3, [r4, #20]
   40764:	addeq	r1, r3, #1
   40768:	streq	r1, [r4, #20]
   4076c:	strbeq	r2, [r3]
   40770:	mov	r0, r4
   40774:	ldr	r3, [r4, #44]	; 0x2c
   40778:	mov	r1, #1
   4077c:	blx	r3
   40780:	ldr	r3, [r4, #36]	; 0x24
   40784:	cmp	r3, #0
   40788:	mvnne	r0, #0
   4078c:	ldreq	r0, [r4, #20]
   40790:	ldreq	r2, [r4]
   40794:	ldreq	r3, [r4, #12]
   40798:	subeq	r0, r0, r2
   4079c:	addeq	r0, r0, r3
   407a0:	add	sp, sp, #12
   407a4:	pop	{r4, r5, pc}
   407a8:	ldr	r3, [r4, #20]
   407ac:	mov	r2, #10
   407b0:	add	r1, r3, #1
   407b4:	str	r1, [r4, #20]
   407b8:	strb	r2, [r3]
   407bc:	ldr	r3, [r4, #32]
   407c0:	mov	r0, r4
   407c4:	sub	r3, r3, #1
   407c8:	str	r3, [r4, #32]
   407cc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   407d0:	b	40734 <flatcc_json_printer_struct_as_root@@Base+0x90>
   407d4:	ldr	r3, [r0, #36]	; 0x24
   407d8:	ldr	r1, [pc, #32]	; 40800 <flatcc_json_printer_struct_as_root@@Base+0x15c>
   407dc:	cmp	r3, r2
   407e0:	moveq	r3, #1
   407e4:	streq	r3, [r0, #36]	; 0x24
   407e8:	ldr	r2, [pc, #20]	; 40804 <flatcc_json_printer_struct_as_root@@Base+0x160>
   407ec:	ldr	r3, [pc, #20]	; 40808 <flatcc_json_printer_struct_as_root@@Base+0x164>
   407f0:	ldr	r0, [pc, #20]	; 4080c <flatcc_json_printer_struct_as_root@@Base+0x168>
   407f4:	bl	14618 <__assert_fail@plt>
   407f8:	mov	r0, r4
   407fc:	bl	148f4 <__assert_fail@plt+0x2dc>
   40800:			; <UNDEFINED> instruction: 0x00047bbc
   40804:	strdeq	r0, [r0], -fp
   40808:	andeq	r7, r4, r8, asr #10
   4080c:	andeq	r7, r4, r4, ror sp

00040810 <flatcc_json_printer_table_as_root@@Base>:
   40810:	push	{r4, r5, r6, lr}
   40814:	sub	sp, sp, #24
   40818:	cmp	r1, #0
   4081c:	cmpne	r2, #7
   40820:	mov	r2, #0
   40824:	mov	r4, r0
   40828:	str	r2, [sp, #4]
   4082c:	bls	40970 <flatcc_json_printer_table_as_root@@Base+0x160>
   40830:	cmp	r3, #0
   40834:	mov	r5, r1
   40838:	add	r6, sp, #4
   4083c:	beq	40864 <flatcc_json_printer_table_as_root@@Base+0x54>
   40840:	mov	r1, r3
   40844:	mov	r2, #4
   40848:	mov	r0, r6
   4084c:	bl	145d0 <strncpy@plt>
   40850:	ldr	r3, [sp, #4]
   40854:	ldr	r2, [r5, #4]
   40858:	cmp	r2, r3
   4085c:	cmpne	r3, #0
   40860:	bne	40994 <flatcc_json_printer_table_as_root@@Base+0x184>
   40864:	ldr	r2, [r5]
   40868:	ldr	r1, [r4, #20]
   4086c:	ldr	r3, [r4, #32]
   40870:	add	ip, r1, #1
   40874:	add	r3, r3, #1
   40878:	mov	r0, #123	; 0x7b
   4087c:	str	r3, [r4, #32]
   40880:	str	ip, [r4, #20]
   40884:	strb	r0, [r1]
   40888:	ldr	r3, [r5, r2]
   4088c:	add	r5, r5, r2
   40890:	sub	r3, r5, r3
   40894:	mov	ip, #0
   40898:	ldrh	lr, [r3]
   4089c:	mov	r2, #99	; 0x63
   408a0:	str	r3, [sp, #8]
   408a4:	mov	r1, r6
   408a8:	ldr	r3, [sp, #40]	; 0x28
   408ac:	mov	r0, r4
   408b0:	str	lr, [sp, #12]
   408b4:	str	r5, [sp, #4]
   408b8:	str	ip, [sp, #20]
   408bc:	str	r2, [sp, #16]
   408c0:	blx	r3
   408c4:	ldrb	r3, [r4, #25]
   408c8:	cmp	r3, #0
   408cc:	bne	40944 <flatcc_json_printer_table_as_root@@Base+0x134>
   408d0:	ldr	r3, [r4, #20]
   408d4:	mov	r2, #125	; 0x7d
   408d8:	add	r1, r3, #1
   408dc:	str	r1, [r4, #20]
   408e0:	strb	r2, [r3]
   408e4:	ldrb	r3, [r4, #25]
   408e8:	cmp	r3, #0
   408ec:	beq	4090c <flatcc_json_printer_table_as_root@@Base+0xfc>
   408f0:	ldr	r3, [r4, #32]
   408f4:	cmp	r3, #0
   408f8:	moveq	r2, #10
   408fc:	ldreq	r3, [r4, #20]
   40900:	addeq	r1, r3, #1
   40904:	streq	r1, [r4, #20]
   40908:	strbeq	r2, [r3]
   4090c:	mov	r0, r4
   40910:	ldr	r3, [r4, #44]	; 0x2c
   40914:	mov	r1, #1
   40918:	blx	r3
   4091c:	ldr	r3, [r4, #36]	; 0x24
   40920:	cmp	r3, #0
   40924:	mvnne	r0, #0
   40928:	ldreq	r0, [r4, #20]
   4092c:	ldreq	r2, [r4]
   40930:	ldreq	r3, [r4, #12]
   40934:	subeq	r0, r0, r2
   40938:	addeq	r0, r0, r3
   4093c:	add	sp, sp, #24
   40940:	pop	{r4, r5, r6, pc}
   40944:	ldr	r3, [r4, #20]
   40948:	mov	r2, #10
   4094c:	add	r1, r3, #1
   40950:	str	r1, [r4, #20]
   40954:	strb	r2, [r3]
   40958:	ldr	r3, [r4, #32]
   4095c:	mov	r0, r4
   40960:	sub	r3, r3, #1
   40964:	str	r3, [r4, #32]
   40968:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   4096c:	b	408d0 <flatcc_json_printer_table_as_root@@Base+0xc0>
   40970:	ldr	r3, [r0, #36]	; 0x24
   40974:	ldr	r1, [pc, #32]	; 4099c <flatcc_json_printer_table_as_root@@Base+0x18c>
   40978:	cmp	r3, r2
   4097c:	moveq	r3, #1
   40980:	streq	r3, [r0, #36]	; 0x24
   40984:	ldr	r2, [pc, #20]	; 409a0 <flatcc_json_printer_table_as_root@@Base+0x190>
   40988:	ldr	r3, [pc, #20]	; 409a4 <flatcc_json_printer_table_as_root@@Base+0x194>
   4098c:	ldr	r0, [pc, #20]	; 409a8 <flatcc_json_printer_table_as_root@@Base+0x198>
   40990:	bl	14618 <__assert_fail@plt>
   40994:	mov	r0, r4
   40998:	bl	148f4 <__assert_fail@plt+0x2dc>
   4099c:			; <UNDEFINED> instruction: 0x00047bbc
   409a0:	strdeq	r0, [r0], -fp
   409a4:	andeq	r7, r4, r8, asr #10
   409a8:	andeq	r7, r4, r4, ror sp

000409ac <flatcc_json_printer_struct_as_nested_root@@Base>:
   409ac:	add	r2, r2, #2
   409b0:	ldr	ip, [r1, #8]
   409b4:	lsl	r2, r2, #1
   409b8:	cmp	r2, ip
   409bc:	bxge	lr
   409c0:	ldr	ip, [r1, #4]
   409c4:	ldrh	r2, [ip, r2]
   409c8:	cmp	r2, #0
   409cc:	bxeq	lr
   409d0:	ldr	ip, [r1]
   409d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   409d8:	adds	r8, ip, r2
   409dc:	sub	sp, sp, #12
   409e0:	beq	40ac4 <flatcc_json_printer_struct_as_nested_root@@Base+0x118>
   409e4:	ldr	r7, [ip, r2]
   409e8:	mov	r6, r3
   409ec:	mov	r3, #0
   409f0:	str	r3, [sp, #4]
   409f4:	ldr	r3, [r8, r7]
   409f8:	mov	r4, r0
   409fc:	cmp	r3, #7
   40a00:	mov	r5, r1
   40a04:	add	r9, r8, r7
   40a08:	bls	40af8 <flatcc_json_printer_struct_as_nested_root@@Base+0x14c>
   40a0c:	ldr	r3, [sp, #44]	; 0x2c
   40a10:	cmp	r3, #0
   40a14:	beq	40a3c <flatcc_json_printer_struct_as_nested_root@@Base+0x90>
   40a18:	mov	r2, #4
   40a1c:	mov	r1, r3
   40a20:	add	r0, sp, r2
   40a24:	bl	145d0 <strncpy@plt>
   40a28:	ldr	r3, [sp, #4]
   40a2c:	ldr	r2, [r9, #4]
   40a30:	cmp	r2, r3
   40a34:	cmpne	r3, #0
   40a38:	bne	40b1c <flatcc_json_printer_struct_as_nested_root@@Base+0x170>
   40a3c:	ldr	r2, [r5, #16]
   40a40:	mov	r0, r4
   40a44:	cmp	r2, #0
   40a48:	add	r2, r2, #1
   40a4c:	ldrne	r3, [r4, #20]
   40a50:	str	r2, [r5, #16]
   40a54:	addne	r1, r3, #1
   40a58:	movne	r2, #44	; 0x2c
   40a5c:	strne	r1, [r4, #20]
   40a60:	strbne	r2, [r3]
   40a64:	mov	r1, r6
   40a68:	ldr	r2, [sp, #40]	; 0x28
   40a6c:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   40a70:	ldr	r3, [r4, #32]
   40a74:	ldr	r2, [r4, #20]
   40a78:	add	r3, r3, #1
   40a7c:	add	r0, r2, #1
   40a80:	mov	r1, #123	; 0x7b
   40a84:	str	r3, [r4, #32]
   40a88:	str	r0, [r4, #20]
   40a8c:	strb	r1, [r2]
   40a90:	ldr	r1, [r8, r7]
   40a94:	ldr	r3, [sp, #48]	; 0x30
   40a98:	mov	r0, r4
   40a9c:	add	r1, r9, r1
   40aa0:	blx	r3
   40aa4:	ldrb	r3, [r4, #25]
   40aa8:	cmp	r3, #0
   40aac:	bne	40acc <flatcc_json_printer_struct_as_nested_root@@Base+0x120>
   40ab0:	ldr	r3, [r4, #20]
   40ab4:	mov	r2, #125	; 0x7d
   40ab8:	add	r1, r3, #1
   40abc:	str	r1, [r4, #20]
   40ac0:	strb	r2, [r3]
   40ac4:	add	sp, sp, #12
   40ac8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   40acc:	ldr	r3, [r4, #20]
   40ad0:	mov	r2, #10
   40ad4:	add	r1, r3, #1
   40ad8:	str	r1, [r4, #20]
   40adc:	strb	r2, [r3]
   40ae0:	ldr	r3, [r4, #32]
   40ae4:	mov	r0, r4
   40ae8:	sub	r3, r3, #1
   40aec:	str	r3, [r4, #32]
   40af0:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   40af4:	b	40ab0 <flatcc_json_printer_struct_as_nested_root@@Base+0x104>
   40af8:	ldr	r3, [r0, #36]	; 0x24
   40afc:	ldr	r2, [pc, #32]	; 40b24 <flatcc_json_printer_struct_as_nested_root@@Base+0x178>
   40b00:	cmp	r3, #0
   40b04:	moveq	r3, #1
   40b08:	streq	r3, [r0, #36]	; 0x24
   40b0c:	ldr	r1, [pc, #20]	; 40b28 <flatcc_json_printer_struct_as_nested_root@@Base+0x17c>
   40b10:	ldr	r3, [pc, #20]	; 40b2c <flatcc_json_printer_struct_as_nested_root@@Base+0x180>
   40b14:	ldr	r0, [pc, #20]	; 40b30 <flatcc_json_printer_struct_as_nested_root@@Base+0x184>
   40b18:	bl	14618 <__assert_fail@plt>
   40b1c:	mov	r0, r4
   40b20:	bl	148f4 <__assert_fail@plt+0x2dc>
   40b24:	strdeq	r0, [r0], -fp
   40b28:			; <UNDEFINED> instruction: 0x00047bbc
   40b2c:	andeq	r7, r4, r8, asr #10
   40b30:	andeq	r7, r4, r4, ror sp

00040b34 <flatcc_json_printer_table_as_nested_root@@Base>:
   40b34:	add	r2, r2, #2
   40b38:	ldr	ip, [r1, #8]
   40b3c:	lsl	r2, r2, #1
   40b40:	cmp	r2, ip
   40b44:	bxge	lr
   40b48:	ldr	ip, [r1, #4]
   40b4c:	ldrh	r2, [ip, r2]
   40b50:	cmp	r2, #0
   40b54:	bxeq	lr
   40b58:	push	{r4, r5, r6, r7, r8, lr}
   40b5c:	sub	sp, sp, #24
   40b60:	ldr	lr, [r1]
   40b64:	adds	ip, lr, r2
   40b68:	beq	40c1c <flatcc_json_printer_table_as_nested_root@@Base+0xe8>
   40b6c:	mov	r7, r3
   40b70:	ldr	r3, [lr, r2]
   40b74:	mov	r2, #0
   40b78:	add	r6, ip, r3
   40b7c:	ldr	r3, [ip, r3]
   40b80:	mov	r5, r0
   40b84:	cmn	r6, #4
   40b88:	cmpne	r3, #7
   40b8c:	mov	r4, r1
   40b90:	add	r8, r6, #4
   40b94:	str	r2, [sp, #4]
   40b98:	bls	40cd4 <flatcc_json_printer_table_as_nested_root@@Base+0x1a0>
   40b9c:	ldr	r3, [sp, #52]	; 0x34
   40ba0:	cmp	r3, #0
   40ba4:	beq	40bcc <flatcc_json_printer_table_as_nested_root@@Base+0x98>
   40ba8:	mov	r2, #4
   40bac:	mov	r1, r3
   40bb0:	add	r0, sp, r2
   40bb4:	bl	145d0 <strncpy@plt>
   40bb8:	ldr	r3, [sp, #4]
   40bbc:	ldr	r2, [r6, #8]
   40bc0:	cmp	r2, r3
   40bc4:	cmpne	r3, #0
   40bc8:	bne	40cf8 <flatcc_json_printer_table_as_nested_root@@Base+0x1c4>
   40bcc:	ldr	r2, [r4, #16]
   40bd0:	mov	r0, r5
   40bd4:	cmp	r2, #0
   40bd8:	add	r2, r2, #1
   40bdc:	ldrne	r3, [r5, #20]
   40be0:	str	r2, [r4, #16]
   40be4:	addne	r1, r3, #1
   40be8:	movne	r2, #44	; 0x2c
   40bec:	strne	r1, [r5, #20]
   40bf0:	strbne	r2, [r3]
   40bf4:	mov	r1, r7
   40bf8:	ldr	r2, [sp, #48]	; 0x30
   40bfc:	bl	34fac <flatcc_json_parser_struct_as_root@@Base+0x11c4>
   40c00:	ldr	r3, [r4, #12]
   40c04:	subs	r3, r3, #1
   40c08:	bne	40c24 <flatcc_json_printer_table_as_nested_root@@Base+0xf0>
   40c0c:	ldr	r3, [r5, #36]	; 0x24
   40c10:	cmp	r3, #0
   40c14:	moveq	r3, #2
   40c18:	streq	r3, [r5, #36]	; 0x24
   40c1c:	add	sp, sp, #24
   40c20:	pop	{r4, r5, r6, r7, r8, pc}
   40c24:	ldr	r2, [r5, #32]
   40c28:	ldr	r1, [r6, #4]
   40c2c:	ldr	r0, [r5, #20]
   40c30:	add	r2, r2, #1
   40c34:	str	r2, [r5, #32]
   40c38:	add	lr, r0, #1
   40c3c:	mov	ip, #123	; 0x7b
   40c40:	mov	r2, #0
   40c44:	str	lr, [r5, #20]
   40c48:	strb	ip, [r0]
   40c4c:	str	r2, [sp, #20]
   40c50:	str	r3, [sp, #16]
   40c54:	ldr	r3, [r8, r1]
   40c58:	add	r8, r8, r1
   40c5c:	sub	r3, r8, r3
   40c60:	add	r1, sp, #4
   40c64:	ldrh	r2, [r3]
   40c68:	mov	r0, r5
   40c6c:	str	r3, [sp, #8]
   40c70:	ldr	r3, [sp, #56]	; 0x38
   40c74:	str	r2, [sp, #12]
   40c78:	str	r8, [sp, #4]
   40c7c:	blx	r3
   40c80:	ldrb	r3, [r5, #25]
   40c84:	cmp	r3, #0
   40c88:	bne	40ca8 <flatcc_json_printer_table_as_nested_root@@Base+0x174>
   40c8c:	ldr	r3, [r5, #20]
   40c90:	mov	r2, #125	; 0x7d
   40c94:	add	r1, r3, #1
   40c98:	str	r1, [r5, #20]
   40c9c:	strb	r2, [r3]
   40ca0:	add	sp, sp, #24
   40ca4:	pop	{r4, r5, r6, r7, r8, pc}
   40ca8:	ldr	r3, [r5, #20]
   40cac:	mov	r2, #10
   40cb0:	add	r1, r3, #1
   40cb4:	str	r1, [r5, #20]
   40cb8:	strb	r2, [r3]
   40cbc:	ldr	r3, [r5, #32]
   40cc0:	mov	r0, r5
   40cc4:	sub	r3, r3, #1
   40cc8:	str	r3, [r5, #32]
   40ccc:	bl	34a0c <flatcc_json_parser_struct_as_root@@Base+0xc24>
   40cd0:	b	40c8c <flatcc_json_printer_table_as_nested_root@@Base+0x158>
   40cd4:	ldr	r3, [r0, #36]	; 0x24
   40cd8:	ldr	r1, [pc, #32]	; 40d00 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   40cdc:	cmp	r3, r2
   40ce0:	moveq	r3, #1
   40ce4:	streq	r3, [r0, #36]	; 0x24
   40ce8:	ldr	r2, [pc, #20]	; 40d04 <flatcc_json_printer_table_as_nested_root@@Base+0x1d0>
   40cec:	ldr	r3, [pc, #20]	; 40d08 <flatcc_json_printer_table_as_nested_root@@Base+0x1d4>
   40cf0:	ldr	r0, [pc, #20]	; 40d0c <flatcc_json_printer_table_as_nested_root@@Base+0x1d8>
   40cf4:	bl	14618 <__assert_fail@plt>
   40cf8:	mov	r0, r5
   40cfc:	bl	148f4 <__assert_fail@plt+0x2dc>
   40d00:			; <UNDEFINED> instruction: 0x00047bbc
   40d04:	strdeq	r0, [r0], -fp
   40d08:	andeq	r7, r4, r8, asr #10
   40d0c:	andeq	r7, r4, r4, ror sp

00040d10 <flatcc_json_printer_init@@Base>:
   40d10:	push	{r4, r5, r6, lr}
   40d14:	mov	r2, #48	; 0x30
   40d18:	mov	r5, r1
   40d1c:	mov	r1, #0
   40d20:	mov	r4, r0
   40d24:	bl	145c4 <memset@plt>
   40d28:	cmp	r5, #0
   40d2c:	ldr	r6, [pc, #76]	; 40d80 <flatcc_json_printer_init@@Base+0x70>
   40d30:	ldreq	r3, [pc, #76]	; 40d84 <flatcc_json_printer_init@@Base+0x74>
   40d34:	mov	r0, r6
   40d38:	ldreq	r5, [r3]
   40d3c:	ldr	r3, [pc, #68]	; 40d88 <flatcc_json_printer_init@@Base+0x78>
   40d40:	str	r5, [r4, #40]	; 0x28
   40d44:	str	r3, [r4, #44]	; 0x2c
   40d48:	bl	1457c <malloc@plt>
   40d4c:	cmp	r0, #0
   40d50:	addne	r1, r0, #16384	; 0x4000
   40d54:	movne	r2, #1
   40d58:	movne	r3, #16384	; 0x4000
   40d5c:	str	r0, [r4]
   40d60:	strne	r0, [r4, #20]
   40d64:	strne	r6, [r4, #4]
   40d68:	movne	r0, #0
   40d6c:	strne	r1, [r4, #16]
   40d70:	strbne	r2, [r4, #24]
   40d74:	strne	r3, [r4, #8]
   40d78:	mvneq	r0, #0
   40d7c:	pop	{r4, r5, r6, pc}
   40d80:	andeq	r4, r0, r0, asr #32
   40d84:			; <UNDEFINED> instruction: 0x000583b4
   40d88:	ldrdeq	r4, [r3], -r0

00040d8c <flatcc_json_printer_init_buffer@@Base>:
   40d8c:	cmp	r2, #63	; 0x3f
   40d90:	push	{r4, r5, r6, lr}
   40d94:	bls	40ddc <flatcc_json_printer_init_buffer@@Base+0x50>
   40d98:	mov	r6, r1
   40d9c:	mov	r5, r2
   40da0:	mov	r1, #0
   40da4:	mov	r2, #48	; 0x30
   40da8:	mov	r4, r0
   40dac:	bl	145c4 <memset@plt>
   40db0:	sub	r3, r5, #64	; 0x40
   40db4:	ldr	r2, [pc, #52]	; 40df0 <flatcc_json_printer_init_buffer@@Base+0x64>
   40db8:	add	r1, r6, r3
   40dbc:	str	r6, [r4]
   40dc0:	str	r5, [r4, #4]
   40dc4:	str	r3, [r4, #8]
   40dc8:	str	r1, [r4, #16]
   40dcc:	str	r6, [r4, #20]
   40dd0:	str	r2, [r4, #44]	; 0x2c
   40dd4:	mov	r0, #0
   40dd8:	pop	{r4, r5, r6, pc}
   40ddc:	ldr	r3, [pc, #16]	; 40df4 <flatcc_json_printer_init_buffer@@Base+0x68>
   40de0:	ldr	r2, [pc, #16]	; 40df8 <flatcc_json_printer_init_buffer@@Base+0x6c>
   40de4:	ldr	r1, [pc, #16]	; 40dfc <flatcc_json_printer_init_buffer@@Base+0x70>
   40de8:	ldr	r0, [pc, #16]	; 40e00 <flatcc_json_printer_init_buffer@@Base+0x74>
   40dec:	bl	14618 <__assert_fail@plt>
   40df0:	andeq	r4, r3, r4, asr #19
   40df4:	andeq	r7, r4, r0, lsl #23
   40df8:	andeq	r0, r0, sp, lsl #9
   40dfc:			; <UNDEFINED> instruction: 0x00047bbc
   40e00:	muleq	r4, r4, sp

00040e04 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   40e04:	cmp	r1, #0
   40e08:	push	{r4, r5, r6, lr}
   40e0c:	mov	r4, r0
   40e10:	moveq	r6, #4032	; 0xfc0
   40e14:	moveq	r5, #4096	; 0x1000
   40e18:	beq	40e2c <flatcc_json_printer_init_dynamic_buffer@@Base+0x28>
   40e1c:	cmp	r1, #64	; 0x40
   40e20:	movcs	r5, r1
   40e24:	movcc	r5, #64	; 0x40
   40e28:	sub	r6, r5, #64	; 0x40
   40e2c:	mov	r2, #48	; 0x30
   40e30:	mov	r1, #0
   40e34:	mov	r0, r4
   40e38:	bl	145c4 <memset@plt>
   40e3c:	mov	r0, r5
   40e40:	bl	1457c <malloc@plt>
   40e44:	ldr	r2, [pc, #80]	; 40e9c <flatcc_json_printer_init_dynamic_buffer@@Base+0x98>
   40e48:	mov	r3, #1
   40e4c:	stmib	r4, {r5, r6}
   40e50:	str	r2, [r4, #44]	; 0x2c
   40e54:	strb	r3, [r4, #24]
   40e58:	add	r1, r0, r6
   40e5c:	cmp	r0, #0
   40e60:	str	r0, [r4]
   40e64:	str	r0, [r4, #20]
   40e68:	str	r1, [r4, #16]
   40e6c:	beq	40e78 <flatcc_json_printer_init_dynamic_buffer@@Base+0x74>
   40e70:	mov	r0, #0
   40e74:	pop	{r4, r5, r6, pc}
   40e78:	ldr	r3, [r4, #36]	; 0x24
   40e7c:	cmp	r3, #0
   40e80:	bne	40e94 <flatcc_json_printer_init_dynamic_buffer@@Base+0x90>
   40e84:	mov	r3, #3
   40e88:	str	r3, [r4, #36]	; 0x24
   40e8c:	mvn	r0, #0
   40e90:	pop	{r4, r5, r6, pc}
   40e94:	mvn	r0, #0
   40e98:	pop	{r4, r5, r6, pc}
   40e9c:	andeq	r4, r3, r4, ror fp

00040ea0 <flatcc_json_printer_get_buffer@@Base>:
   40ea0:	ldr	r3, [r0, #44]	; 0x2c
   40ea4:	push	{r4, r5, r6, lr}
   40ea8:	mov	r5, r1
   40eac:	mov	r1, #0
   40eb0:	mov	r4, r0
   40eb4:	blx	r3
   40eb8:	cmp	r5, #0
   40ebc:	ldr	r0, [r4]
   40ec0:	ldrne	r3, [r4, #20]
   40ec4:	subne	r3, r3, r0
   40ec8:	strne	r3, [r5]
   40ecc:	pop	{r4, r5, r6, pc}

00040ed0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   40ed0:	ldr	r3, [r0, #44]	; 0x2c
   40ed4:	push	{r4, r5, r6, lr}
   40ed8:	mov	r5, r1
   40edc:	mov	r1, #0
   40ee0:	mov	r4, r0
   40ee4:	blx	r3
   40ee8:	cmp	r5, #0
   40eec:	ldr	r6, [r4]
   40ef0:	ldrne	r3, [r4, #20]
   40ef4:	mov	r0, r4
   40ef8:	mov	r2, #48	; 0x30
   40efc:	mov	r1, #0
   40f00:	subne	r3, r3, r6
   40f04:	strne	r3, [r5]
   40f08:	bl	145c4 <memset@plt>
   40f0c:	mov	r0, r6
   40f10:	pop	{r4, r5, r6, pc}

00040f14 <flatcc_json_printer_clear@@Base>:
   40f14:	push	{r4, lr}
   40f18:	mov	r4, r0
   40f1c:	ldrb	r3, [r0, #24]
   40f20:	cmp	r3, #0
   40f24:	beq	40f38 <flatcc_json_printer_clear@@Base+0x24>
   40f28:	ldr	r0, [r0]
   40f2c:	cmp	r0, #0
   40f30:	beq	40f38 <flatcc_json_printer_clear@@Base+0x24>
   40f34:	bl	14540 <free@plt>
   40f38:	mov	r0, r4
   40f3c:	mov	r2, #48	; 0x30
   40f40:	mov	r1, #0
   40f44:	pop	{r4, lr}
   40f48:	b	145c4 <memset@plt>
   40f4c:	subs	r2, r1, #1
   40f50:	bxeq	lr
   40f54:	bcc	4112c <flatcc_json_printer_clear@@Base+0x218>
   40f58:	cmp	r0, r1
   40f5c:	bls	41110 <flatcc_json_printer_clear@@Base+0x1fc>
   40f60:	tst	r1, r2
   40f64:	beq	4111c <flatcc_json_printer_clear@@Base+0x208>
   40f68:	clz	r3, r0
   40f6c:	clz	r2, r1
   40f70:	sub	r3, r2, r3
   40f74:	rsbs	r3, r3, #31
   40f78:	addne	r3, r3, r3, lsl #1
   40f7c:	mov	r2, #0
   40f80:	addne	pc, pc, r3, lsl #2
   40f84:	nop			; (mov r0, r0)
   40f88:	cmp	r0, r1, lsl #31
   40f8c:	adc	r2, r2, r2
   40f90:	subcs	r0, r0, r1, lsl #31
   40f94:	cmp	r0, r1, lsl #30
   40f98:	adc	r2, r2, r2
   40f9c:	subcs	r0, r0, r1, lsl #30
   40fa0:	cmp	r0, r1, lsl #29
   40fa4:	adc	r2, r2, r2
   40fa8:	subcs	r0, r0, r1, lsl #29
   40fac:	cmp	r0, r1, lsl #28
   40fb0:	adc	r2, r2, r2
   40fb4:	subcs	r0, r0, r1, lsl #28
   40fb8:	cmp	r0, r1, lsl #27
   40fbc:	adc	r2, r2, r2
   40fc0:	subcs	r0, r0, r1, lsl #27
   40fc4:	cmp	r0, r1, lsl #26
   40fc8:	adc	r2, r2, r2
   40fcc:	subcs	r0, r0, r1, lsl #26
   40fd0:	cmp	r0, r1, lsl #25
   40fd4:	adc	r2, r2, r2
   40fd8:	subcs	r0, r0, r1, lsl #25
   40fdc:	cmp	r0, r1, lsl #24
   40fe0:	adc	r2, r2, r2
   40fe4:	subcs	r0, r0, r1, lsl #24
   40fe8:	cmp	r0, r1, lsl #23
   40fec:	adc	r2, r2, r2
   40ff0:	subcs	r0, r0, r1, lsl #23
   40ff4:	cmp	r0, r1, lsl #22
   40ff8:	adc	r2, r2, r2
   40ffc:	subcs	r0, r0, r1, lsl #22
   41000:	cmp	r0, r1, lsl #21
   41004:	adc	r2, r2, r2
   41008:	subcs	r0, r0, r1, lsl #21
   4100c:	cmp	r0, r1, lsl #20
   41010:	adc	r2, r2, r2
   41014:	subcs	r0, r0, r1, lsl #20
   41018:	cmp	r0, r1, lsl #19
   4101c:	adc	r2, r2, r2
   41020:	subcs	r0, r0, r1, lsl #19
   41024:	cmp	r0, r1, lsl #18
   41028:	adc	r2, r2, r2
   4102c:	subcs	r0, r0, r1, lsl #18
   41030:	cmp	r0, r1, lsl #17
   41034:	adc	r2, r2, r2
   41038:	subcs	r0, r0, r1, lsl #17
   4103c:	cmp	r0, r1, lsl #16
   41040:	adc	r2, r2, r2
   41044:	subcs	r0, r0, r1, lsl #16
   41048:	cmp	r0, r1, lsl #15
   4104c:	adc	r2, r2, r2
   41050:	subcs	r0, r0, r1, lsl #15
   41054:	cmp	r0, r1, lsl #14
   41058:	adc	r2, r2, r2
   4105c:	subcs	r0, r0, r1, lsl #14
   41060:	cmp	r0, r1, lsl #13
   41064:	adc	r2, r2, r2
   41068:	subcs	r0, r0, r1, lsl #13
   4106c:	cmp	r0, r1, lsl #12
   41070:	adc	r2, r2, r2
   41074:	subcs	r0, r0, r1, lsl #12
   41078:	cmp	r0, r1, lsl #11
   4107c:	adc	r2, r2, r2
   41080:	subcs	r0, r0, r1, lsl #11
   41084:	cmp	r0, r1, lsl #10
   41088:	adc	r2, r2, r2
   4108c:	subcs	r0, r0, r1, lsl #10
   41090:	cmp	r0, r1, lsl #9
   41094:	adc	r2, r2, r2
   41098:	subcs	r0, r0, r1, lsl #9
   4109c:	cmp	r0, r1, lsl #8
   410a0:	adc	r2, r2, r2
   410a4:	subcs	r0, r0, r1, lsl #8
   410a8:	cmp	r0, r1, lsl #7
   410ac:	adc	r2, r2, r2
   410b0:	subcs	r0, r0, r1, lsl #7
   410b4:	cmp	r0, r1, lsl #6
   410b8:	adc	r2, r2, r2
   410bc:	subcs	r0, r0, r1, lsl #6
   410c0:	cmp	r0, r1, lsl #5
   410c4:	adc	r2, r2, r2
   410c8:	subcs	r0, r0, r1, lsl #5
   410cc:	cmp	r0, r1, lsl #4
   410d0:	adc	r2, r2, r2
   410d4:	subcs	r0, r0, r1, lsl #4
   410d8:	cmp	r0, r1, lsl #3
   410dc:	adc	r2, r2, r2
   410e0:	subcs	r0, r0, r1, lsl #3
   410e4:	cmp	r0, r1, lsl #2
   410e8:	adc	r2, r2, r2
   410ec:	subcs	r0, r0, r1, lsl #2
   410f0:	cmp	r0, r1, lsl #1
   410f4:	adc	r2, r2, r2
   410f8:	subcs	r0, r0, r1, lsl #1
   410fc:	cmp	r0, r1
   41100:	adc	r2, r2, r2
   41104:	subcs	r0, r0, r1
   41108:	mov	r0, r2
   4110c:	bx	lr
   41110:	moveq	r0, #1
   41114:	movne	r0, #0
   41118:	bx	lr
   4111c:	clz	r2, r1
   41120:	rsb	r2, r2, #31
   41124:	lsr	r0, r0, r2
   41128:	bx	lr
   4112c:	cmp	r0, #0
   41130:	mvnne	r0, #0
   41134:	b	4179c <flatcc_json_printer_clear@@Base+0x888>
   41138:	cmp	r1, #0
   4113c:	beq	4112c <flatcc_json_printer_clear@@Base+0x218>
   41140:	push	{r0, r1, lr}
   41144:	bl	40f4c <flatcc_json_printer_clear@@Base+0x38>
   41148:	pop	{r1, r2, lr}
   4114c:	mul	r3, r2, r0
   41150:	sub	r1, r1, r3
   41154:	bx	lr
   41158:	eor	r1, r1, #-2147483648	; 0x80000000
   4115c:	b	41164 <flatcc_json_printer_clear@@Base+0x250>
   41160:	eor	r3, r3, #-2147483648	; 0x80000000
   41164:	push	{r4, r5, lr}
   41168:	lsl	r4, r1, #1
   4116c:	lsl	r5, r3, #1
   41170:	teq	r4, r5
   41174:	teqeq	r0, r2
   41178:	orrsne	ip, r4, r0
   4117c:	orrsne	ip, r5, r2
   41180:	mvnsne	ip, r4, asr #21
   41184:	mvnsne	ip, r5, asr #21
   41188:	beq	41374 <flatcc_json_printer_clear@@Base+0x460>
   4118c:	lsr	r4, r4, #21
   41190:	rsbs	r5, r4, r5, lsr #21
   41194:	rsblt	r5, r5, #0
   41198:	ble	411b8 <flatcc_json_printer_clear@@Base+0x2a4>
   4119c:	add	r4, r4, r5
   411a0:	eor	r2, r0, r2
   411a4:	eor	r3, r1, r3
   411a8:	eor	r0, r2, r0
   411ac:	eor	r1, r3, r1
   411b0:	eor	r2, r0, r2
   411b4:	eor	r3, r1, r3
   411b8:	cmp	r5, #54	; 0x36
   411bc:	pophi	{r4, r5, pc}
   411c0:	tst	r1, #-2147483648	; 0x80000000
   411c4:	lsl	r1, r1, #12
   411c8:	mov	ip, #1048576	; 0x100000
   411cc:	orr	r1, ip, r1, lsr #12
   411d0:	beq	411dc <flatcc_json_printer_clear@@Base+0x2c8>
   411d4:	rsbs	r0, r0, #0
   411d8:	rsc	r1, r1, #0
   411dc:	tst	r3, #-2147483648	; 0x80000000
   411e0:	lsl	r3, r3, #12
   411e4:	orr	r3, ip, r3, lsr #12
   411e8:	beq	411f4 <flatcc_json_printer_clear@@Base+0x2e0>
   411ec:	rsbs	r2, r2, #0
   411f0:	rsc	r3, r3, #0
   411f4:	teq	r4, r5
   411f8:	beq	4135c <flatcc_json_printer_clear@@Base+0x448>
   411fc:	sub	r4, r4, #1
   41200:	rsbs	lr, r5, #32
   41204:	blt	41220 <flatcc_json_printer_clear@@Base+0x30c>
   41208:	lsl	ip, r2, lr
   4120c:	adds	r0, r0, r2, lsr r5
   41210:	adc	r1, r1, #0
   41214:	adds	r0, r0, r3, lsl lr
   41218:	adcs	r1, r1, r3, asr r5
   4121c:	b	4123c <flatcc_json_printer_clear@@Base+0x328>
   41220:	sub	r5, r5, #32
   41224:	add	lr, lr, #32
   41228:	cmp	r2, #1
   4122c:	lsl	ip, r3, lr
   41230:	orrcs	ip, ip, #2
   41234:	adds	r0, r0, r3, asr r5
   41238:	adcs	r1, r1, r3, asr #31
   4123c:	and	r5, r1, #-2147483648	; 0x80000000
   41240:	bpl	41250 <flatcc_json_printer_clear@@Base+0x33c>
   41244:	rsbs	ip, ip, #0
   41248:	rscs	r0, r0, #0
   4124c:	rsc	r1, r1, #0
   41250:	cmp	r1, #1048576	; 0x100000
   41254:	bcc	41294 <flatcc_json_printer_clear@@Base+0x380>
   41258:	cmp	r1, #2097152	; 0x200000
   4125c:	bcc	4127c <flatcc_json_printer_clear@@Base+0x368>
   41260:	lsrs	r1, r1, #1
   41264:	rrxs	r0, r0
   41268:	rrx	ip, ip
   4126c:	add	r4, r4, #1
   41270:	lsl	r2, r4, #21
   41274:	cmn	r2, #4194304	; 0x400000
   41278:	bcs	413d4 <flatcc_json_printer_clear@@Base+0x4c0>
   4127c:	cmp	ip, #-2147483648	; 0x80000000
   41280:	lsrseq	ip, r0, #1
   41284:	adcs	r0, r0, #0
   41288:	adc	r1, r1, r4, lsl #20
   4128c:	orr	r1, r1, r5
   41290:	pop	{r4, r5, pc}
   41294:	lsls	ip, ip, #1
   41298:	adcs	r0, r0, r0
   4129c:	adc	r1, r1, r1
   412a0:	tst	r1, #1048576	; 0x100000
   412a4:	sub	r4, r4, #1
   412a8:	bne	4127c <flatcc_json_printer_clear@@Base+0x368>
   412ac:	teq	r1, #0
   412b0:	moveq	r1, r0
   412b4:	moveq	r0, #0
   412b8:	clz	r3, r1
   412bc:	addeq	r3, r3, #32
   412c0:	sub	r3, r3, #11
   412c4:	subs	r2, r3, #32
   412c8:	bge	412ec <flatcc_json_printer_clear@@Base+0x3d8>
   412cc:	adds	r2, r2, #12
   412d0:	ble	412e8 <flatcc_json_printer_clear@@Base+0x3d4>
   412d4:	add	ip, r2, #20
   412d8:	rsb	r2, r2, #12
   412dc:	lsl	r0, r1, ip
   412e0:	lsr	r1, r1, r2
   412e4:	b	412fc <flatcc_json_printer_clear@@Base+0x3e8>
   412e8:	add	r2, r2, #20
   412ec:	rsble	ip, r2, #32
   412f0:	lsl	r1, r1, r2
   412f4:	orrle	r1, r1, r0, lsr ip
   412f8:	lslle	r0, r0, r2
   412fc:	subs	r4, r4, r3
   41300:	addge	r1, r1, r4, lsl #20
   41304:	orrge	r1, r1, r5
   41308:	popge	{r4, r5, pc}
   4130c:	mvn	r4, r4
   41310:	subs	r4, r4, #31
   41314:	bge	41350 <flatcc_json_printer_clear@@Base+0x43c>
   41318:	adds	r4, r4, #12
   4131c:	bgt	41338 <flatcc_json_printer_clear@@Base+0x424>
   41320:	add	r4, r4, #20
   41324:	rsb	r2, r4, #32
   41328:	lsr	r0, r0, r4
   4132c:	orr	r0, r0, r1, lsl r2
   41330:	orr	r1, r5, r1, lsr r4
   41334:	pop	{r4, r5, pc}
   41338:	rsb	r4, r4, #12
   4133c:	rsb	r2, r4, #32
   41340:	lsr	r0, r0, r2
   41344:	orr	r0, r0, r1, lsl r4
   41348:	mov	r1, r5
   4134c:	pop	{r4, r5, pc}
   41350:	lsr	r0, r1, r4
   41354:	mov	r1, r5
   41358:	pop	{r4, r5, pc}
   4135c:	teq	r4, #0
   41360:	eor	r3, r3, #1048576	; 0x100000
   41364:	eoreq	r1, r1, #1048576	; 0x100000
   41368:	addeq	r4, r4, #1
   4136c:	subne	r5, r5, #1
   41370:	b	411fc <flatcc_json_printer_clear@@Base+0x2e8>
   41374:	mvns	ip, r4, asr #21
   41378:	mvnsne	ip, r5, asr #21
   4137c:	beq	413e4 <flatcc_json_printer_clear@@Base+0x4d0>
   41380:	teq	r4, r5
   41384:	teqeq	r0, r2
   41388:	beq	4139c <flatcc_json_printer_clear@@Base+0x488>
   4138c:	orrs	ip, r4, r0
   41390:	moveq	r1, r3
   41394:	moveq	r0, r2
   41398:	pop	{r4, r5, pc}
   4139c:	teq	r1, r3
   413a0:	movne	r1, #0
   413a4:	movne	r0, #0
   413a8:	popne	{r4, r5, pc}
   413ac:	lsrs	ip, r4, #21
   413b0:	bne	413c4 <flatcc_json_printer_clear@@Base+0x4b0>
   413b4:	lsls	r0, r0, #1
   413b8:	adcs	r1, r1, r1
   413bc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   413c0:	pop	{r4, r5, pc}
   413c4:	adds	r4, r4, #4194304	; 0x400000
   413c8:	addcc	r1, r1, #1048576	; 0x100000
   413cc:	popcc	{r4, r5, pc}
   413d0:	and	r5, r1, #-2147483648	; 0x80000000
   413d4:	orr	r1, r5, #2130706432	; 0x7f000000
   413d8:	orr	r1, r1, #15728640	; 0xf00000
   413dc:	mov	r0, #0
   413e0:	pop	{r4, r5, pc}
   413e4:	mvns	ip, r4, asr #21
   413e8:	movne	r1, r3
   413ec:	movne	r0, r2
   413f0:	mvnseq	ip, r5, asr #21
   413f4:	movne	r3, r1
   413f8:	movne	r2, r0
   413fc:	orrs	r4, r0, r1, lsl #12
   41400:	orrseq	r5, r2, r3, lsl #12
   41404:	teqeq	r1, r3
   41408:	orrne	r1, r1, #524288	; 0x80000
   4140c:	pop	{r4, r5, pc}
   41410:	teq	r0, #0
   41414:	moveq	r1, #0
   41418:	bxeq	lr
   4141c:	push	{r4, r5, lr}
   41420:	mov	r4, #1024	; 0x400
   41424:	add	r4, r4, #50	; 0x32
   41428:	mov	r5, #0
   4142c:	mov	r1, #0
   41430:	b	412ac <flatcc_json_printer_clear@@Base+0x398>
   41434:	teq	r0, #0
   41438:	moveq	r1, #0
   4143c:	bxeq	lr
   41440:	push	{r4, r5, lr}
   41444:	mov	r4, #1024	; 0x400
   41448:	add	r4, r4, #50	; 0x32
   4144c:	ands	r5, r0, #-2147483648	; 0x80000000
   41450:	rsbmi	r0, r0, #0
   41454:	mov	r1, #0
   41458:	b	412ac <flatcc_json_printer_clear@@Base+0x398>
   4145c:	lsls	r2, r0, #1
   41460:	asr	r1, r2, #3
   41464:	rrx	r1, r1
   41468:	lsl	r0, r2, #28
   4146c:	andsne	r3, r2, #-16777216	; 0xff000000
   41470:	teqne	r3, #-16777216	; 0xff000000
   41474:	eorne	r1, r1, #939524096	; 0x38000000
   41478:	bxne	lr
   4147c:	teq	r2, #0
   41480:	teqne	r3, #-16777216	; 0xff000000
   41484:	bxeq	lr
   41488:	push	{r4, r5, lr}
   4148c:	mov	r4, #896	; 0x380
   41490:	and	r5, r1, #-2147483648	; 0x80000000
   41494:	bic	r1, r1, #-2147483648	; 0x80000000
   41498:	b	412ac <flatcc_json_printer_clear@@Base+0x398>
   4149c:	orrs	r2, r0, r1
   414a0:	bxeq	lr
   414a4:	push	{r4, r5, lr}
   414a8:	mov	r5, #0
   414ac:	b	414cc <flatcc_json_printer_clear@@Base+0x5b8>
   414b0:	orrs	r2, r0, r1
   414b4:	bxeq	lr
   414b8:	push	{r4, r5, lr}
   414bc:	ands	r5, r1, #-2147483648	; 0x80000000
   414c0:	bpl	414cc <flatcc_json_printer_clear@@Base+0x5b8>
   414c4:	rsbs	r0, r0, #0
   414c8:	rsc	r1, r1, #0
   414cc:	mov	r4, #1024	; 0x400
   414d0:	add	r4, r4, #50	; 0x32
   414d4:	lsrs	ip, r1, #22
   414d8:	beq	41250 <flatcc_json_printer_clear@@Base+0x33c>
   414dc:	mov	r2, #3
   414e0:	lsrs	ip, ip, #3
   414e4:	addne	r2, r2, #3
   414e8:	lsrs	ip, ip, #3
   414ec:	addne	r2, r2, #3
   414f0:	add	r2, r2, ip, lsr #3
   414f4:	rsb	r3, r2, #32
   414f8:	lsl	ip, r0, r3
   414fc:	lsr	r0, r0, r2
   41500:	orr	r0, r0, r1, lsl r3
   41504:	lsr	r1, r1, r2
   41508:	add	r4, r4, r2
   4150c:	b	41250 <flatcc_json_printer_clear@@Base+0x33c>
   41510:	eor	r0, r0, #-2147483648	; 0x80000000
   41514:	b	4151c <flatcc_json_printer_clear@@Base+0x608>
   41518:	eor	r1, r1, #-2147483648	; 0x80000000
   4151c:	lsls	r2, r0, #1
   41520:	lslsne	r3, r1, #1
   41524:	teqne	r2, r3
   41528:	mvnsne	ip, r2, asr #24
   4152c:	mvnsne	ip, r3, asr #24
   41530:	beq	41628 <flatcc_json_printer_clear@@Base+0x714>
   41534:	lsr	r2, r2, #24
   41538:	rsbs	r3, r2, r3, lsr #24
   4153c:	addgt	r2, r2, r3
   41540:	eorgt	r1, r0, r1
   41544:	eorgt	r0, r1, r0
   41548:	eorgt	r1, r0, r1
   4154c:	rsblt	r3, r3, #0
   41550:	cmp	r3, #25
   41554:	bxhi	lr
   41558:	tst	r0, #-2147483648	; 0x80000000
   4155c:	orr	r0, r0, #8388608	; 0x800000
   41560:	bic	r0, r0, #-16777216	; 0xff000000
   41564:	rsbne	r0, r0, #0
   41568:	tst	r1, #-2147483648	; 0x80000000
   4156c:	orr	r1, r1, #8388608	; 0x800000
   41570:	bic	r1, r1, #-16777216	; 0xff000000
   41574:	rsbne	r1, r1, #0
   41578:	teq	r2, r3
   4157c:	beq	41610 <flatcc_json_printer_clear@@Base+0x6fc>
   41580:	sub	r2, r2, #1
   41584:	adds	r0, r0, r1, asr r3
   41588:	rsb	r3, r3, #32
   4158c:	lsl	r1, r1, r3
   41590:	and	r3, r0, #-2147483648	; 0x80000000
   41594:	bpl	415a0 <flatcc_json_printer_clear@@Base+0x68c>
   41598:	rsbs	r1, r1, #0
   4159c:	rsc	r0, r0, #0
   415a0:	cmp	r0, #8388608	; 0x800000
   415a4:	bcc	415d8 <flatcc_json_printer_clear@@Base+0x6c4>
   415a8:	cmp	r0, #16777216	; 0x1000000
   415ac:	bcc	415c4 <flatcc_json_printer_clear@@Base+0x6b0>
   415b0:	lsrs	r0, r0, #1
   415b4:	rrx	r1, r1
   415b8:	add	r2, r2, #1
   415bc:	cmp	r2, #254	; 0xfe
   415c0:	bcs	4167c <flatcc_json_printer_clear@@Base+0x768>
   415c4:	cmp	r1, #-2147483648	; 0x80000000
   415c8:	adc	r0, r0, r2, lsl #23
   415cc:	biceq	r0, r0, #1
   415d0:	orr	r0, r0, r3
   415d4:	bx	lr
   415d8:	lsls	r1, r1, #1
   415dc:	adc	r0, r0, r0
   415e0:	tst	r0, #8388608	; 0x800000
   415e4:	sub	r2, r2, #1
   415e8:	bne	415c4 <flatcc_json_printer_clear@@Base+0x6b0>
   415ec:	clz	ip, r0
   415f0:	sub	ip, ip, #8
   415f4:	subs	r2, r2, ip
   415f8:	lsl	r0, r0, ip
   415fc:	addge	r0, r0, r2, lsl #23
   41600:	rsblt	r2, r2, #0
   41604:	orrge	r0, r0, r3
   41608:	orrlt	r0, r3, r0, lsr r2
   4160c:	bx	lr
   41610:	teq	r2, #0
   41614:	eor	r1, r1, #8388608	; 0x800000
   41618:	eoreq	r0, r0, #8388608	; 0x800000
   4161c:	addeq	r2, r2, #1
   41620:	subne	r3, r3, #1
   41624:	b	41580 <flatcc_json_printer_clear@@Base+0x66c>
   41628:	lsl	r3, r1, #1
   4162c:	mvns	ip, r2, asr #24
   41630:	mvnsne	ip, r3, asr #24
   41634:	beq	41688 <flatcc_json_printer_clear@@Base+0x774>
   41638:	teq	r2, r3
   4163c:	beq	4164c <flatcc_json_printer_clear@@Base+0x738>
   41640:	teq	r2, #0
   41644:	moveq	r0, r1
   41648:	bx	lr
   4164c:	teq	r0, r1
   41650:	movne	r0, #0
   41654:	bxne	lr
   41658:	tst	r2, #-16777216	; 0xff000000
   4165c:	bne	4166c <flatcc_json_printer_clear@@Base+0x758>
   41660:	lsls	r0, r0, #1
   41664:	orrcs	r0, r0, #-2147483648	; 0x80000000
   41668:	bx	lr
   4166c:	adds	r2, r2, #33554432	; 0x2000000
   41670:	addcc	r0, r0, #8388608	; 0x800000
   41674:	bxcc	lr
   41678:	and	r3, r0, #-2147483648	; 0x80000000
   4167c:	orr	r0, r3, #2130706432	; 0x7f000000
   41680:	orr	r0, r0, #8388608	; 0x800000
   41684:	bx	lr
   41688:	mvns	r2, r2, asr #24
   4168c:	movne	r0, r1
   41690:	mvnseq	r3, r3, asr #24
   41694:	movne	r1, r0
   41698:	lsls	r2, r0, #9
   4169c:	lslseq	r3, r1, #9
   416a0:	teqeq	r0, r1
   416a4:	orrne	r0, r0, #4194304	; 0x400000
   416a8:	bx	lr
   416ac:	mov	r3, #0
   416b0:	b	416bc <flatcc_json_printer_clear@@Base+0x7a8>
   416b4:	ands	r3, r0, #-2147483648	; 0x80000000
   416b8:	rsbmi	r0, r0, #0
   416bc:	movs	ip, r0
   416c0:	bxeq	lr
   416c4:	orr	r3, r3, #1258291200	; 0x4b000000
   416c8:	mov	r1, r0
   416cc:	mov	r0, #0
   416d0:	b	41714 <flatcc_json_printer_clear@@Base+0x800>
   416d4:	orrs	r2, r0, r1
   416d8:	bxeq	lr
   416dc:	mov	r3, #0
   416e0:	b	416fc <flatcc_json_printer_clear@@Base+0x7e8>
   416e4:	orrs	r2, r0, r1
   416e8:	bxeq	lr
   416ec:	ands	r3, r1, #-2147483648	; 0x80000000
   416f0:	bpl	416fc <flatcc_json_printer_clear@@Base+0x7e8>
   416f4:	rsbs	r0, r0, #0
   416f8:	rsc	r1, r1, #0
   416fc:	movs	ip, r1
   41700:	moveq	ip, r0
   41704:	moveq	r1, r0
   41708:	moveq	r0, #0
   4170c:	orr	r3, r3, #1526726656	; 0x5b000000
   41710:	subeq	r3, r3, #268435456	; 0x10000000
   41714:	sub	r3, r3, #8388608	; 0x800000
   41718:	clz	r2, ip
   4171c:	subs	r2, r2, #8
   41720:	sub	r3, r3, r2, lsl #23
   41724:	blt	41744 <flatcc_json_printer_clear@@Base+0x830>
   41728:	add	r3, r3, r1, lsl r2
   4172c:	lsl	ip, r0, r2
   41730:	rsb	r2, r2, #32
   41734:	cmp	ip, #-2147483648	; 0x80000000
   41738:	adc	r0, r3, r0, lsr r2
   4173c:	biceq	r0, r0, #1
   41740:	bx	lr
   41744:	add	r2, r2, #32
   41748:	lsl	ip, r1, r2
   4174c:	rsb	r2, r2, #32
   41750:	orrs	r0, r0, ip, lsl #1
   41754:	adc	r0, r3, r1, lsr r2
   41758:	biceq	r0, r0, ip, lsr #31
   4175c:	bx	lr
   41760:	cmp	r3, #0
   41764:	cmpeq	r2, #0
   41768:	bne	41780 <flatcc_json_printer_clear@@Base+0x86c>
   4176c:	cmp	r1, #0
   41770:	cmpeq	r0, #0
   41774:	mvnne	r1, #0
   41778:	mvnne	r0, #0
   4177c:	b	4179c <flatcc_json_printer_clear@@Base+0x888>
   41780:	sub	sp, sp, #8
   41784:	push	{sp, lr}
   41788:	bl	417ac <flatcc_json_printer_clear@@Base+0x898>
   4178c:	ldr	lr, [sp, #4]
   41790:	add	sp, sp, #8
   41794:	pop	{r2, r3}
   41798:	bx	lr
   4179c:	push	{r1, lr}
   417a0:	mov	r0, #8
   417a4:	bl	1451c <raise@plt>
   417a8:	pop	{r1, pc}
   417ac:	cmp	r1, r3
   417b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   417b4:	cmpeq	r0, r2
   417b8:	mov	r4, r0
   417bc:	mov	r5, r1
   417c0:	ldr	r9, [sp, #28]
   417c4:	movcc	r0, #0
   417c8:	movcc	r1, #0
   417cc:	bcc	418c4 <flatcc_json_printer_clear@@Base+0x9b0>
   417d0:	cmp	r3, #0
   417d4:	clzeq	ip, r2
   417d8:	clzne	ip, r3
   417dc:	addeq	ip, ip, #32
   417e0:	cmp	r5, #0
   417e4:	clzeq	r1, r4
   417e8:	addeq	r1, r1, #32
   417ec:	clzne	r1, r5
   417f0:	sub	ip, ip, r1
   417f4:	sub	lr, ip, #32
   417f8:	lsl	r7, r3, ip
   417fc:	rsb	r8, ip, #32
   41800:	orr	r7, r7, r2, lsl lr
   41804:	orr	r7, r7, r2, lsr r8
   41808:	lsl	r6, r2, ip
   4180c:	cmp	r5, r7
   41810:	cmpeq	r4, r6
   41814:	movcc	r0, #0
   41818:	movcc	r1, #0
   4181c:	bcc	41838 <flatcc_json_printer_clear@@Base+0x924>
   41820:	mov	r3, #1
   41824:	subs	r4, r4, r6
   41828:	lsl	r1, r3, lr
   4182c:	lsl	r0, r3, ip
   41830:	orr	r1, r1, r3, lsr r8
   41834:	sbc	r5, r5, r7
   41838:	cmp	ip, #0
   4183c:	beq	418c4 <flatcc_json_printer_clear@@Base+0x9b0>
   41840:	lsrs	r3, r7, #1
   41844:	rrx	r2, r6
   41848:	mov	r6, ip
   4184c:	b	41870 <flatcc_json_printer_clear@@Base+0x95c>
   41850:	subs	r4, r4, r2
   41854:	sbc	r5, r5, r3
   41858:	adds	r4, r4, r4
   4185c:	adc	r5, r5, r5
   41860:	adds	r4, r4, #1
   41864:	adc	r5, r5, #0
   41868:	subs	r6, r6, #1
   4186c:	beq	4188c <flatcc_json_printer_clear@@Base+0x978>
   41870:	cmp	r5, r3
   41874:	cmpeq	r4, r2
   41878:	bcs	41850 <flatcc_json_printer_clear@@Base+0x93c>
   4187c:	adds	r4, r4, r4
   41880:	adc	r5, r5, r5
   41884:	subs	r6, r6, #1
   41888:	bne	41870 <flatcc_json_printer_clear@@Base+0x95c>
   4188c:	lsr	r6, r4, ip
   41890:	lsr	r7, r5, ip
   41894:	orr	r6, r6, r5, lsl r8
   41898:	adds	r2, r0, r4
   4189c:	orr	r6, r6, r5, lsr lr
   418a0:	adc	r3, r1, r5
   418a4:	lsl	r1, r7, ip
   418a8:	orr	r1, r1, r6, lsl lr
   418ac:	lsl	r0, r6, ip
   418b0:	orr	r1, r1, r6, lsr r8
   418b4:	subs	r0, r2, r0
   418b8:	mov	r4, r6
   418bc:	mov	r5, r7
   418c0:	sbc	r1, r3, r1
   418c4:	cmp	r9, #0
   418c8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   418cc:	strd	r4, [r9]
   418d0:	pop	{r4, r5, r6, r7, r8, r9, pc}

000418d4 <__libc_csu_init@@Base>:
   418d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   418d8:	mov	r7, r0
   418dc:	ldr	r6, [pc, #72]	; 4192c <__libc_csu_init@@Base+0x58>
   418e0:	ldr	r5, [pc, #72]	; 41930 <__libc_csu_init@@Base+0x5c>
   418e4:	add	r6, pc, r6
   418e8:	add	r5, pc, r5
   418ec:	sub	r6, r6, r5
   418f0:	mov	r8, r1
   418f4:	mov	r9, r2
   418f8:	bl	144fc <raise@plt-0x20>
   418fc:	asrs	r6, r6, #2
   41900:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   41904:	mov	r4, #0
   41908:	add	r4, r4, #1
   4190c:	ldr	r3, [r5], #4
   41910:	mov	r2, r9
   41914:	mov	r1, r8
   41918:	mov	r0, r7
   4191c:	blx	r3
   41920:	cmp	r6, r4
   41924:	bne	41908 <__libc_csu_init@@Base+0x34>
   41928:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4192c:	andeq	r6, r1, r4, lsr #12
   41930:	andeq	r6, r1, ip, lsl r6

00041934 <__libc_csu_fini@@Base>:
   41934:	bx	lr

Disassembly of section .fini:

00041938 <.fini>:
   41938:	push	{r3, lr}
   4193c:	pop	{r3, pc}
