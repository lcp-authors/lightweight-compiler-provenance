
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000e58 <.init>:
 e58:	push	{r3, lr}
 e5c:	bl	1050 <o_strchr@plt+0x10>
 e60:	pop	{r3, pc}

Disassembly of section .plt:

00000e64 <strstr@plt-0x14>:
     e64:	push	{lr}		; (str lr, [sp, #-4]!)
     e68:	ldr	lr, [pc, #4]	; e74 <strstr@plt-0x4>
     e6c:	add	lr, pc, lr
     e70:	ldr	pc, [lr, #8]!
     e74:	andeq	r2, r1, ip, lsl #3

00000e78 <strstr@plt>:
     e78:	add	ip, pc, #0, 12
     e7c:	add	ip, ip, #73728	; 0x12000
     e80:	ldr	pc, [ip, #396]!	; 0x18c

00000e84 <pointer_list_get_at@plt>:
     e84:	add	ip, pc, #0, 12
     e88:	add	ip, ip, #73728	; 0x12000
     e8c:	ldr	pc, [ip, #388]!	; 0x184

00000e90 <o_strncasecmp@plt>:
     e90:	add	ip, pc, #0, 12
     e94:	add	ip, ip, #73728	; 0x12000
     e98:	ldr	pc, [ip, #380]!	; 0x17c

00000e9c <strcasestr@plt>:
     e9c:	add	ip, pc, #0, 12
     ea0:	add	ip, ip, #73728	; 0x12000
     ea4:	ldr	pc, [ip, #372]!	; 0x174

00000ea8 <strcmp@plt>:
     ea8:	add	ip, pc, #0, 12
     eac:	add	ip, ip, #73728	; 0x12000
     eb0:	ldr	pc, [ip, #364]!	; 0x16c

00000eb4 <__cxa_finalize@plt>:
     eb4:	add	ip, pc, #0, 12
     eb8:	add	ip, ip, #73728	; 0x12000
     ebc:	ldr	pc, [ip, #356]!	; 0x164

00000ec0 <o_strndup@plt>:
     ec0:	add	ip, pc, #0, 12
     ec4:	add	ip, ip, #73728	; 0x12000
     ec8:	ldr	pc, [ip, #348]!	; 0x15c

00000ecc <trunc@plt>:
     ecc:	add	ip, pc, #0, 12
     ed0:	add	ip, ip, #73728	; 0x12000
     ed4:	ldr	pc, [ip, #340]!	; 0x154

00000ed8 <o_free@plt>:
     ed8:	add	ip, pc, #0, 12
     edc:	add	ip, ip, #73728	; 0x12000
     ee0:	ldr	pc, [ip, #332]!	; 0x14c

00000ee4 <pointer_list_remove_at@plt>:
     ee4:	add	ip, pc, #0, 12
     ee8:	add	ip, ip, #73728	; 0x12000
     eec:	ldr	pc, [ip, #324]!	; 0x144

00000ef0 <memcpy@plt>:
     ef0:	add	ip, pc, #0, 12
     ef4:	add	ip, ip, #73728	; 0x12000
     ef8:	ldr	pc, [ip, #316]!	; 0x13c

00000efc <o_strdup@plt>:
     efc:	add	ip, pc, #0, 12
     f00:	add	ip, ip, #73728	; 0x12000
     f04:	ldr	pc, [ip, #308]!	; 0x134

00000f08 <o_base64_encode@plt>:
     f08:	add	ip, pc, #0, 12
     f0c:	add	ip, ip, #73728	; 0x12000
     f10:	ldr	pc, [ip, #300]!	; 0x12c

00000f14 <strcasecmp@plt>:
     f14:	add	ip, pc, #0, 12
     f18:	add	ip, ip, #73728	; 0x12000
     f1c:	ldr	pc, [ip, #292]!	; 0x124

00000f20 <o_strcmp@plt>:
     f20:	add	ip, pc, #0, 12
     f24:	add	ip, ip, #73728	; 0x12000
     f28:	ldr	pc, [ip, #284]!	; 0x11c

00000f2c <trimwhitespace@plt>:
     f2c:	add	ip, pc, #0, 12
     f30:	add	ip, ip, #73728	; 0x12000
     f34:	ldr	pc, [ip, #276]!	; 0x114

00000f38 <strcpy@plt>:
     f38:	add	ip, pc, #0, 12
     f3c:	add	ip, ip, #73728	; 0x12000
     f40:	ldr	pc, [ip, #268]!	; 0x10c

00000f44 <o_strlen@plt>:
     f44:	add	ip, pc, #0, 12
     f48:	add	ip, ip, #73728	; 0x12000
     f4c:	ldr	pc, [ip, #260]!	; 0x104

00000f50 <o_strcasecmp@plt>:
     f50:	add	ip, pc, #0, 12
     f54:	add	ip, ip, #73728	; 0x12000
     f58:	ldr	pc, [ip, #252]!	; 0xfc

00000f5c <o_realloc@plt>:
     f5c:	add	ip, pc, #0, 12
     f60:	add	ip, ip, #73728	; 0x12000
     f64:	ldr	pc, [ip, #244]!	; 0xf4

00000f68 <str_replace@plt>:
     f68:	add	ip, pc, #0, 12
     f6c:	add	ip, ip, #73728	; 0x12000
     f70:	ldr	pc, [ip, #236]!	; 0xec

00000f74 <__gmon_start__@plt>:
     f74:	add	ip, pc, #0, 12
     f78:	add	ip, ip, #73728	; 0x12000
     f7c:	ldr	pc, [ip, #228]!	; 0xe4

00000f80 <__ctype_b_loc@plt>:
     f80:	add	ip, pc, #0, 12
     f84:	add	ip, ip, #73728	; 0x12000
     f88:	ldr	pc, [ip, #220]!	; 0xdc

00000f8c <strlen@plt>:
     f8c:	add	ip, pc, #0, 12
     f90:	add	ip, ip, #73728	; 0x12000
     f94:	ldr	pc, [ip, #212]!	; 0xd4

00000f98 <strchr@plt>:
     f98:	add	ip, pc, #0, 12
     f9c:	add	ip, ip, #73728	; 0x12000
     fa0:	ldr	pc, [ip, #204]!	; 0xcc

00000fa4 <strncasecmp@plt>:
     fa4:	add	ip, pc, #0, 12
     fa8:	add	ip, ip, #73728	; 0x12000
     fac:	ldr	pc, [ip, #196]!	; 0xc4

00000fb0 <snprintf@plt>:
     fb0:	add	ip, pc, #0, 12
     fb4:	add	ip, ip, #73728	; 0x12000
     fb8:	ldr	pc, [ip, #188]!	; 0xbc

00000fbc <o_malloc@plt>:
     fbc:	add	ip, pc, #0, 12
     fc0:	add	ip, ip, #73728	; 0x12000
     fc4:	ldr	pc, [ip, #180]!	; 0xb4

00000fc8 <memset@plt>:
     fc8:	add	ip, pc, #0, 12
     fcc:	add	ip, ip, #73728	; 0x12000
     fd0:	ldr	pc, [ip, #172]!	; 0xac

00000fd4 <strncpy@plt>:
     fd4:	add	ip, pc, #0, 12
     fd8:	add	ip, ip, #73728	; 0x12000
     fdc:	ldr	pc, [ip, #164]!	; 0xa4

00000fe0 <pointer_list_size@plt>:
     fe0:	add	ip, pc, #0, 12
     fe4:	add	ip, ip, #73728	; 0x12000
     fe8:	ldr	pc, [ip, #156]!	; 0x9c

00000fec <msprintf@plt>:
     fec:	add	ip, pc, #0, 12
     ff0:	add	ip, ip, #73728	; 0x12000
     ff4:	ldr	pc, [ip, #148]!	; 0x94

00000ff8 <o_base64url_2_base64@plt>:
     ff8:	add	ip, pc, #0, 12
     ffc:	add	ip, ip, #73728	; 0x12000
    1000:	ldr	pc, [ip, #140]!	; 0x8c

00001004 <strrchr@plt>:
    1004:	add	ip, pc, #0, 12
    1008:	add	ip, ip, #73728	; 0x12000
    100c:	ldr	pc, [ip, #132]!	; 0x84

00001010 <o_base64_decode@plt>:
    1010:	add	ip, pc, #0, 12
    1014:	add	ip, ip, #73728	; 0x12000
    1018:	ldr	pc, [ip, #124]!	; 0x7c

0000101c <vsnprintf@plt>:
    101c:	add	ip, pc, #0, 12
    1020:	add	ip, ip, #73728	; 0x12000
    1024:	ldr	pc, [ip, #116]!	; 0x74

00001028 <o_strncmp@plt>:
    1028:	add	ip, pc, #0, 12
    102c:	add	ip, ip, #73728	; 0x12000
    1030:	ldr	pc, [ip, #108]!	; 0x6c

00001034 <strncmp@plt>:
    1034:	add	ip, pc, #0, 12
    1038:	add	ip, ip, #73728	; 0x12000
    103c:	ldr	pc, [ip, #100]!	; 0x64

00001040 <o_strchr@plt>:
    1040:	add	ip, pc, #0, 12
    1044:	add	ip, ip, #73728	; 0x12000
    1048:	ldr	pc, [ip, #92]!	; 0x5c

Disassembly of section .text:

00001050 <o_base64_encode@@Base-0x178>:
    1050:	ldr	r3, [pc, #20]	; 106c <o_strchr@plt+0x2c>
    1054:	ldr	r2, [pc, #20]	; 1070 <o_strchr@plt+0x30>
    1058:	add	r3, pc, r3
    105c:	ldr	r2, [r3, r2]
    1060:	cmp	r2, #0
    1064:	bxeq	lr
    1068:	b	f74 <__gmon_start__@plt>
    106c:	andeq	r1, r1, r0, lsr #31
    1070:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1074:	ldr	r3, [pc, #52]	; 10b0 <o_strchr@plt+0x70>
    1078:	ldr	r0, [pc, #52]	; 10b4 <o_strchr@plt+0x74>
    107c:	add	r3, pc, r3
    1080:	add	r0, pc, r0
    1084:	add	r3, r3, #3
    1088:	sub	r3, r3, r0
    108c:	cmp	r3, #6
    1090:	ldr	r3, [pc, #32]	; 10b8 <o_strchr@plt+0x78>
    1094:	add	r3, pc, r3
    1098:	bxls	lr
    109c:	ldr	r2, [pc, #24]	; 10bc <o_strchr@plt+0x7c>
    10a0:	ldr	r3, [r3, r2]
    10a4:	cmp	r3, #0
    10a8:	bxeq	lr
    10ac:	bx	r3
    10b0:	andeq	r2, r1, r8, asr #32
    10b4:	andeq	r2, r1, r4, asr #32
    10b8:	andeq	r1, r1, r4, ror #30
    10bc:	andeq	r0, r0, ip, lsr #1
    10c0:	ldr	r1, [pc, #56]	; 1100 <o_strchr@plt+0xc0>
    10c4:	ldr	r0, [pc, #56]	; 1104 <o_strchr@plt+0xc4>
    10c8:	add	r1, pc, r1
    10cc:	add	r0, pc, r0
    10d0:	sub	r1, r1, r0
    10d4:	ldr	r3, [pc, #44]	; 1108 <o_strchr@plt+0xc8>
    10d8:	asr	r1, r1, #2
    10dc:	add	r3, pc, r3
    10e0:	add	r1, r1, r1, lsr #31
    10e4:	asrs	r1, r1, #1
    10e8:	bxeq	lr
    10ec:	ldr	r2, [pc, #24]	; 110c <o_strchr@plt+0xcc>
    10f0:	ldr	r3, [r3, r2]
    10f4:	cmp	r3, #0
    10f8:	bxeq	lr
    10fc:	bx	r3
    1100:	strdeq	r1, [r1], -ip
    1104:	strdeq	r1, [r1], -r8
    1108:	andeq	r1, r1, ip, lsl pc
    110c:	strheq	r0, [r0], -r8
    1110:	ldr	r3, [pc, #76]	; 1164 <o_strchr@plt+0x124>
    1114:	ldr	r2, [pc, #76]	; 1168 <o_strchr@plt+0x128>
    1118:	add	r3, pc, r3
    111c:	add	r2, pc, r2
    1120:	ldrb	r3, [r3]
    1124:	cmp	r3, #0
    1128:	bxne	lr
    112c:	ldr	r3, [pc, #56]	; 116c <o_strchr@plt+0x12c>
    1130:	push	{r4, lr}
    1134:	ldr	r3, [r2, r3]
    1138:	cmp	r3, #0
    113c:	beq	114c <o_strchr@plt+0x10c>
    1140:	ldr	r3, [pc, #40]	; 1170 <o_strchr@plt+0x130>
    1144:	ldr	r0, [pc, r3]
    1148:	bl	eb4 <__cxa_finalize@plt>
    114c:	bl	1074 <o_strchr@plt+0x34>
    1150:	ldr	r3, [pc, #28]	; 1174 <o_strchr@plt+0x134>
    1154:	mov	r2, #1
    1158:	add	r3, pc, r3
    115c:	strb	r2, [r3]
    1160:	pop	{r4, pc}
    1164:	andeq	r1, r1, ip, lsr #31
    1168:	ldrdeq	r1, [r1], -ip
    116c:	andeq	r0, r0, r8, lsr #1
    1170:	andeq	r1, r1, r0, ror pc
    1174:	andeq	r1, r1, ip, ror #30
    1178:	ldr	r0, [pc, #56]	; 11b8 <o_strchr@plt+0x178>
    117c:	ldr	r3, [pc, #56]	; 11bc <o_strchr@plt+0x17c>
    1180:	add	r0, pc, r0
    1184:	ldr	r2, [r0]
    1188:	add	r3, pc, r3
    118c:	cmp	r2, #0
    1190:	bne	1198 <o_strchr@plt+0x158>
    1194:	b	10c0 <o_strchr@plt+0x80>
    1198:	ldr	r2, [pc, #32]	; 11c0 <o_strchr@plt+0x180>
    119c:	ldr	r3, [r3, r2]
    11a0:	cmp	r3, #0
    11a4:	beq	1194 <o_strchr@plt+0x154>
    11a8:	push	{r4, lr}
    11ac:	blx	r3
    11b0:	pop	{r4, lr}
    11b4:	b	10c0 <o_strchr@plt+0x80>
    11b8:	andeq	r1, r1, r4, lsl #27
    11bc:	andeq	r1, r1, r0, ror lr
    11c0:	strheq	r0, [r0], -r4
    11c4:	andeq	r0, r0, r0

000011c8 <o_base64_encode@@Base>:
    11c8:	push	{r4, r5, r6, lr}
    11cc:	lsl	ip, r1, #2
    11d0:	ldr	lr, [pc, #540]	; 13f4 <o_base64_encode@@Base+0x22c>
    11d4:	umull	lr, ip, lr, ip
    11d8:	lsr	ip, ip, #1
    11dc:	add	r4, ip, #4
    11e0:	ldr	lr, [pc, #528]	; 13f8 <o_base64_encode@@Base+0x230>
    11e4:	umull	lr, r4, lr, r4
    11e8:	add	ip, ip, #5
    11ec:	add	r4, ip, r4, lsr #4
    11f0:	mov	lr, r3
    11f4:	cmp	r3, #0
    11f8:	cmpne	r0, #0
    11fc:	moveq	r3, #1
    1200:	movne	r3, #0
    1204:	cmp	r1, r4
    1208:	movls	r4, r3
    120c:	orrhi	r4, r3, #1
    1210:	cmp	r4, #0
    1214:	bne	13c4 <o_base64_encode@@Base+0x1fc>
    1218:	mov	ip, r0
    121c:	mov	r3, #0
    1220:	str	r3, [lr]
    1224:	add	r3, r0, #3
    1228:	add	r5, r0, r1
    122c:	ldr	r4, [pc, #456]	; 13fc <o_base64_encode@@Base+0x234>
    1230:	add	r4, pc, r4
    1234:	b	1250 <o_base64_encode@@Base+0x88>
    1238:	ldr	r0, [lr]
    123c:	add	r0, r0, #4
    1240:	str	r0, [lr]
    1244:	add	ip, ip, #3
    1248:	add	r3, r3, #3
    124c:	sub	r1, r1, #3
    1250:	mov	r6, r1
    1254:	cmp	r1, #2
    1258:	ble	12c0 <o_base64_encode@@Base+0xf8>
    125c:	cmp	r2, #0
    1260:	beq	1238 <o_base64_encode@@Base+0x70>
    1264:	ldrb	r0, [r3, #-3]
    1268:	ldrb	r0, [r4, r0, lsr #2]
    126c:	strb	r0, [r2]
    1270:	ldrb	r0, [r3, #-3]
    1274:	lsl	r0, r0, #4
    1278:	and	r0, r0, #48	; 0x30
    127c:	ldrb	r6, [r3, #-2]
    1280:	orr	r0, r0, r6, lsr #4
    1284:	ldrb	r0, [r4, r0]
    1288:	strb	r0, [r2, #1]
    128c:	ldrb	r0, [r3, #-2]
    1290:	lsl	r0, r0, #2
    1294:	and	r0, r0, #60	; 0x3c
    1298:	ldrb	r6, [r3, #-1]
    129c:	orr	r0, r0, r6, lsr #6
    12a0:	ldrb	r0, [r4, r0]
    12a4:	strb	r0, [r2, #2]
    12a8:	ldrb	r0, [r3, #-1]
    12ac:	and	r0, r0, #63	; 0x3f
    12b0:	ldrb	r0, [r4, r0]
    12b4:	strb	r0, [r2, #3]
    12b8:	add	r2, r2, #4
    12bc:	b	1238 <o_base64_encode@@Base+0x70>
    12c0:	cmp	ip, r5
    12c4:	beq	136c <o_base64_encode@@Base+0x1a4>
    12c8:	cmp	r2, #0
    12cc:	beq	13d4 <o_base64_encode@@Base+0x20c>
    12d0:	add	r3, r2, #1
    12d4:	ldrb	r0, [ip]
    12d8:	ldr	r1, [pc, #288]	; 1400 <o_base64_encode@@Base+0x238>
    12dc:	add	r1, pc, r1
    12e0:	ldrb	r1, [r1, r0, lsr #2]
    12e4:	strb	r1, [r2]
    12e8:	ldr	r1, [lr]
    12ec:	add	r1, r1, #1
    12f0:	str	r1, [lr]
    12f4:	cmp	r6, #1
    12f8:	beq	1384 <o_base64_encode@@Base+0x1bc>
    12fc:	cmp	r3, #0
    1300:	beq	1340 <o_base64_encode@@Base+0x178>
    1304:	ldr	r0, [pc, #248]	; 1404 <o_base64_encode@@Base+0x23c>
    1308:	add	r0, pc, r0
    130c:	ldrb	r3, [ip]
    1310:	lsl	r3, r3, #4
    1314:	and	r3, r3, #48	; 0x30
    1318:	ldrb	r1, [ip, #1]
    131c:	orr	r3, r3, r1, lsr #4
    1320:	ldrb	r3, [r0, r3]
    1324:	strb	r3, [r2, #1]
    1328:	add	r3, r2, #3
    132c:	ldrb	r1, [ip, #1]
    1330:	lsl	r1, r1, #2
    1334:	and	r1, r1, #60	; 0x3c
    1338:	ldrb	r1, [r0, r1]
    133c:	strb	r1, [r2, #2]
    1340:	ldr	r2, [lr]
    1344:	add	r2, r2, #2
    1348:	str	r2, [lr]
    134c:	cmp	r3, #0
    1350:	addne	r2, r3, #1
    1354:	movne	r1, #61	; 0x3d
    1358:	strbne	r1, [r3]
    135c:	moveq	r2, r3
    1360:	ldr	r3, [lr]
    1364:	add	r3, r3, #1
    1368:	str	r3, [lr]
    136c:	cmp	r2, #0
    1370:	beq	13cc <o_base64_encode@@Base+0x204>
    1374:	mov	r3, #0
    1378:	strb	r3, [r2]
    137c:	mov	r0, #1
    1380:	pop	{r4, r5, r6, pc}
    1384:	cmp	r3, #0
    1388:	beq	13b4 <o_base64_encode@@Base+0x1ec>
    138c:	ldrb	r3, [ip]
    1390:	lsl	r3, r3, #4
    1394:	and	r3, r3, #48	; 0x30
    1398:	ldr	r1, [pc, #104]	; 1408 <o_base64_encode@@Base+0x240>
    139c:	add	r1, pc, r1
    13a0:	ldrb	r3, [r1, r3]
    13a4:	strb	r3, [r2, #1]
    13a8:	add	r3, r2, #3
    13ac:	mov	r1, #61	; 0x3d
    13b0:	strb	r1, [r2, #2]
    13b4:	ldr	r2, [lr]
    13b8:	add	r2, r2, #2
    13bc:	str	r2, [lr]
    13c0:	b	134c <o_base64_encode@@Base+0x184>
    13c4:	mov	r0, #0
    13c8:	pop	{r4, r5, r6, pc}
    13cc:	mov	r0, #1
    13d0:	pop	{r4, r5, r6, pc}
    13d4:	ldr	r3, [lr]
    13d8:	add	r3, r3, #1
    13dc:	str	r3, [lr]
    13e0:	cmp	r1, #1
    13e4:	movne	r3, r2
    13e8:	bne	1340 <o_base64_encode@@Base+0x178>
    13ec:	mov	r3, r2
    13f0:	b	13b4 <o_base64_encode@@Base+0x1ec>
    13f4:	bge	feaabea8 <pointer_list_remove_pointer_free@@Base+0xfeaa93a8>
    13f8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
    13fc:	andeq	r1, r0, ip, asr #18
    1400:	andeq	r1, r0, r0, lsr #17
    1404:	andeq	r1, r0, r4, ror r8
    1408:	andeq	r1, r0, r0, ror #15

0000140c <o_base64_decode@@Base>:
    140c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1410:	sub	sp, sp, #276	; 0x114
    1414:	mov	fp, r3
    1418:	cmp	r3, #0
    141c:	cmpne	r1, #0
    1420:	moveq	r3, #1
    1424:	movne	r3, #0
    1428:	cmp	r0, #0
    142c:	orreq	r3, r3, #1
    1430:	cmp	r3, #0
    1434:	movne	r9, #0
    1438:	bne	160c <o_base64_decode@@Base+0x200>
    143c:	mov	r8, r2
    1440:	mov	r6, r1
    1444:	mov	r5, r0
    1448:	mov	r2, #256	; 0x100
    144c:	mov	r1, #128	; 0x80
    1450:	add	r0, sp, #16
    1454:	bl	fc8 <memset@plt>
    1458:	ldr	r1, [pc, #448]	; 1620 <o_base64_decode@@Base+0x214>
    145c:	add	r1, pc, r1
    1460:	sub	r1, r1, #1
    1464:	mov	r3, #0
    1468:	ldrb	r2, [r1, #1]!
    146c:	add	r0, sp, #272	; 0x110
    1470:	add	r2, r0, r2
    1474:	strb	r3, [r2, #-256]	; 0xffffff00
    1478:	add	r3, r3, #1
    147c:	cmp	r3, #64	; 0x40
    1480:	bne	1468 <o_base64_decode@@Base+0x5c>
    1484:	mov	r3, #0
    1488:	strb	r3, [sp, #77]	; 0x4d
    148c:	cmp	r6, r3
    1490:	beq	1618 <o_base64_decode@@Base+0x20c>
    1494:	mov	r4, r5
    1498:	add	r6, r5, r6
    149c:	mov	r2, r3
    14a0:	ldrb	r3, [r5], #1
    14a4:	add	r1, sp, #272	; 0x110
    14a8:	add	r3, r1, r3
    14ac:	ldrb	r3, [r3, #-256]	; 0xffffff00
    14b0:	cmp	r3, #128	; 0x80
    14b4:	addne	r2, r2, #1
    14b8:	cmp	r6, r5
    14bc:	bne	14a0 <o_base64_decode@@Base+0x94>
    14c0:	cmp	r2, #0
    14c4:	moveq	r9, #0
    14c8:	beq	160c <o_base64_decode@@Base+0x200>
    14cc:	ands	r3, r2, #3
    14d0:	str	r3, [sp, #4]
    14d4:	movne	r9, #0
    14d8:	bne	160c <o_base64_decode@@Base+0x200>
    14dc:	mov	r9, #0
    14e0:	str	r9, [fp]
    14e4:	mov	r6, r3
    14e8:	ldr	sl, [pc, #308]	; 1624 <o_base64_decode@@Base+0x218>
    14ec:	add	sl, pc, sl
    14f0:	b	1584 <o_base64_decode@@Base+0x178>
    14f4:	ldrb	r3, [r4]
    14f8:	cmp	r3, #61	; 0x3d
    14fc:	cmpne	r3, #32
    1500:	movne	r2, #1
    1504:	moveq	r2, #0
    1508:	sub	r3, r3, #9
    150c:	uxtb	r3, r3
    1510:	cmp	r3, #1
    1514:	movls	r3, #0
    1518:	andhi	r3, r2, #1
    151c:	cmp	r3, #0
    1520:	beq	159c <o_base64_decode@@Base+0x190>
    1524:	mov	r9, #0
    1528:	b	160c <o_base64_decode@@Base+0x200>
    152c:	ldrb	r0, [sp, #13]
    1530:	ldrb	r2, [sp, #12]
    1534:	lsr	r3, r0, #4
    1538:	orr	r3, r3, r2, lsl #2
    153c:	strb	r3, [r8]
    1540:	ldrb	r1, [sp, #14]
    1544:	lsr	r2, r1, #2
    1548:	orr	r2, r2, r0, lsl #4
    154c:	strb	r2, [r8, #1]
    1550:	ldrb	r3, [sp, #15]
    1554:	orr	r3, r3, r1, lsl #6
    1558:	strb	r3, [r8, #2]
    155c:	add	r8, r8, #3
    1560:	ldr	r3, [fp]
    1564:	add	r2, r3, #3
    1568:	str	r2, [fp]
    156c:	cmp	r9, #0
    1570:	bne	15e0 <o_base64_decode@@Base+0x1d4>
    1574:	ldr	r6, [sp, #4]
    1578:	add	r4, r4, #1
    157c:	cmp	r5, r4
    1580:	beq	1608 <o_base64_decode@@Base+0x1fc>
    1584:	mov	r7, r4
    1588:	ldrb	r1, [r4]
    158c:	mov	r0, sl
    1590:	bl	1040 <o_strchr@plt>
    1594:	cmp	r0, #0
    1598:	beq	14f4 <o_base64_decode@@Base+0xe8>
    159c:	ldrb	r2, [r7]
    15a0:	add	r3, sp, #272	; 0x110
    15a4:	add	r3, r3, r2
    15a8:	ldrb	r3, [r3, #-256]	; 0xffffff00
    15ac:	cmp	r3, #128	; 0x80
    15b0:	beq	1578 <o_base64_decode@@Base+0x16c>
    15b4:	cmp	r2, #61	; 0x3d
    15b8:	addeq	r9, r9, #1
    15bc:	add	r2, sp, #272	; 0x110
    15c0:	add	r2, r2, r6
    15c4:	strb	r3, [r2, #-260]	; 0xfffffefc
    15c8:	add	r6, r6, #1
    15cc:	cmp	r6, #4
    15d0:	bne	1578 <o_base64_decode@@Base+0x16c>
    15d4:	cmp	r8, #0
    15d8:	bne	152c <o_base64_decode@@Base+0x120>
    15dc:	b	1560 <o_base64_decode@@Base+0x154>
    15e0:	cmp	r9, #1
    15e4:	addeq	r3, r3, #2
    15e8:	streq	r3, [fp]
    15ec:	beq	160c <o_base64_decode@@Base+0x200>
    15f0:	cmp	r9, #2
    15f4:	addeq	r3, r3, #1
    15f8:	streq	r3, [fp]
    15fc:	moveq	r9, #1
    1600:	movne	r9, #0
    1604:	b	160c <o_base64_decode@@Base+0x200>
    1608:	mov	r9, #1
    160c:	mov	r0, r9
    1610:	add	sp, sp, #276	; 0x114
    1614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	mov	r9, #0
    161c:	b	160c <o_base64_decode@@Base+0x200>
    1620:	andeq	r1, r0, r0, lsr #14
    1624:	muleq	r0, r0, r6

00001628 <o_base64url_encode@@Base>:
    1628:	push	{r4, r5, r6, lr}
    162c:	vpush	{d8}
    1630:	mov	r5, r3
    1634:	subs	r4, r2, #0
    1638:	beq	16fc <o_base64url_encode@@Base+0xd4>
    163c:	mov	r2, r4
    1640:	bl	f08 <o_base64_encode@plt>
    1644:	cmp	r0, #0
    1648:	beq	1748 <o_base64url_encode@@Base+0x120>
    164c:	ldr	r3, [r5]
    1650:	cmp	r3, #1
    1654:	bls	1668 <o_base64url_encode@@Base+0x40>
    1658:	sub	r2, r3, #2
    165c:	ldrb	r1, [r4, r2]
    1660:	cmp	r1, #61	; 0x3d
    1664:	beq	1698 <o_base64url_encode@@Base+0x70>
    1668:	cmp	r3, #0
    166c:	beq	1748 <o_base64url_encode@@Base+0x120>
    1670:	sub	r3, r3, #1
    1674:	ldrb	r2, [r4, r3]
    1678:	cmp	r2, #61	; 0x3d
    167c:	bne	16b8 <o_base64url_encode@@Base+0x90>
    1680:	mov	r2, #0
    1684:	strb	r2, [r4, r3]
    1688:	ldr	r3, [r5]
    168c:	sub	r3, r3, #1
    1690:	str	r3, [r5]
    1694:	b	16ac <o_base64url_encode@@Base+0x84>
    1698:	mov	r3, #0
    169c:	strb	r3, [r4, r2]
    16a0:	ldr	r3, [r5]
    16a4:	sub	r3, r3, #2
    16a8:	str	r3, [r5]
    16ac:	ldr	r3, [r5]
    16b0:	cmp	r3, #0
    16b4:	beq	1748 <o_base64url_encode@@Base+0x120>
    16b8:	mov	r2, r4
    16bc:	mov	r3, #0
    16c0:	mov	r4, #95	; 0x5f
    16c4:	mov	lr, #45	; 0x2d
    16c8:	b	16e0 <o_base64url_encode@@Base+0xb8>
    16cc:	add	r3, r3, #1
    16d0:	add	r2, r2, #1
    16d4:	ldr	r1, [r5]
    16d8:	cmp	r1, r3
    16dc:	bls	1748 <o_base64url_encode@@Base+0x120>
    16e0:	ldrb	r1, [r2]
    16e4:	cmp	r1, #43	; 0x2b
    16e8:	strbeq	lr, [r2]
    16ec:	beq	16cc <o_base64url_encode@@Base+0xa4>
    16f0:	cmp	r1, #47	; 0x2f
    16f4:	strbeq	r4, [r2]
    16f8:	b	16cc <o_base64url_encode@@Base+0xa4>
    16fc:	cmp	r1, #0
    1700:	cmpne	r3, #0
    1704:	moveq	r0, #0
    1708:	beq	1748 <o_base64url_encode@@Base+0x120>
    170c:	vmov	s15, r1
    1710:	vcvt.f64.u32	d7, s15
    1714:	vldr	d6, [pc, #52]	; 1750 <o_base64url_encode@@Base+0x128>
    1718:	vmul.f64	d7, d7, d6
    171c:	vldr	d6, [pc, #52]	; 1758 <o_base64url_encode@@Base+0x130>
    1720:	vdiv.f64	d8, d7, d6
    1724:	vmov.f64	d0, d8
    1728:	bl	ecc <trunc@plt>
    172c:	vcmp.f64	d8, d0
    1730:	vmrs	APSR_nzcv, fpscr
    1734:	vldrne	d8, [pc, #36]	; 1760 <o_base64url_encode@@Base+0x138>
    1738:	vaddne.f64	d8, d0, d8
    173c:	vcvt.u32.f64	s16, d8
    1740:	vstr	s16, [r5]
    1744:	mov	r0, #1
    1748:	vpop	{d8}
    174c:	pop	{r4, r5, r6, pc}
    1750:	andeq	r0, r0, r0
    1754:	andsmi	r0, r0, r0
    1758:	andeq	r0, r0, r0
    175c:	andmi	r0, r8, r0
    1760:	andeq	r0, r0, r0
    1764:	svccc	0x00f00000	; IMB

00001768 <o_base64url_2_base64@@Base>:
    1768:	cmp	r0, #0
    176c:	beq	1834 <o_base64url_2_base64@@Base+0xcc>
    1770:	push	{r4, r5, r6, r7, r8, lr}
    1774:	mov	r7, r3
    1778:	mov	r6, r2
    177c:	mov	r5, r1
    1780:	mov	r2, r1
    1784:	mov	r1, r0
    1788:	mov	r0, r6
    178c:	bl	ef0 <memcpy@plt>
    1790:	str	r5, [r7]
    1794:	cmp	r5, #0
    1798:	beq	183c <o_base64url_2_base64@@Base+0xd4>
    179c:	mov	r0, r6
    17a0:	add	r4, r6, r5
    17a4:	mov	r2, #47	; 0x2f
    17a8:	mov	r3, #43	; 0x2b
    17ac:	b	17bc <o_base64url_2_base64@@Base+0x54>
    17b0:	add	r0, r0, #1
    17b4:	cmp	r0, r4
    17b8:	beq	17dc <o_base64url_2_base64@@Base+0x74>
    17bc:	mov	lr, r0
    17c0:	ldrb	ip, [r0]
    17c4:	cmp	ip, #45	; 0x2d
    17c8:	strbeq	r3, [r0]
    17cc:	beq	17b0 <o_base64url_2_base64@@Base+0x48>
    17d0:	cmp	ip, #95	; 0x5f
    17d4:	strbeq	r2, [r0]
    17d8:	b	17b0 <o_base64url_2_base64@@Base+0x48>
    17dc:	and	r3, r5, #3
    17e0:	cmp	r3, #2
    17e4:	beq	17f8 <o_base64url_2_base64@@Base+0x90>
    17e8:	cmp	r3, #3
    17ec:	beq	1818 <o_base64url_2_base64@@Base+0xb0>
    17f0:	mov	r0, #1
    17f4:	pop	{r4, r5, r6, r7, r8, pc}
    17f8:	mov	r3, #61	; 0x3d
    17fc:	strb	r3, [r6, r5]!
    1800:	strb	r3, [r6, #1]
    1804:	ldr	r3, [r7]
    1808:	add	r3, r3, #2
    180c:	str	r3, [r7]
    1810:	mov	r0, #1
    1814:	pop	{r4, r5, r6, r7, r8, pc}
    1818:	mov	r3, #61	; 0x3d
    181c:	strb	r3, [r6, r5]
    1820:	ldr	r3, [r7]
    1824:	add	r3, r3, #1
    1828:	str	r3, [r7]
    182c:	mov	r0, #1
    1830:	pop	{r4, r5, r6, r7, r8, pc}
    1834:	mov	r0, #0
    1838:	bx	lr
    183c:	mov	r0, #1
    1840:	pop	{r4, r5, r6, r7, r8, pc}

00001844 <o_base64url_decode@@Base>:
    1844:	push	{r4, r5, r6, r7, r8, lr}
    1848:	sub	sp, sp, #8
    184c:	subs	r5, r0, #0
    1850:	moveq	r4, #0
    1854:	beq	18a0 <o_base64url_decode@@Base+0x5c>
    1858:	mov	r7, r3
    185c:	mov	r6, r2
    1860:	mov	r4, r1
    1864:	add	r0, r1, #3
    1868:	bl	fbc <o_malloc@plt>
    186c:	subs	r8, r0, #0
    1870:	moveq	r4, #0
    1874:	beq	18a0 <o_base64url_decode@@Base+0x5c>
    1878:	add	r3, sp, #4
    187c:	mov	r2, r8
    1880:	mov	r1, r4
    1884:	mov	r0, r5
    1888:	bl	ff8 <o_base64url_2_base64@plt>
    188c:	cmp	r0, #0
    1890:	moveq	r4, #1
    1894:	bne	18ac <o_base64url_decode@@Base+0x68>
    1898:	mov	r0, r8
    189c:	bl	ed8 <o_free@plt>
    18a0:	mov	r0, r4
    18a4:	add	sp, sp, #8
    18a8:	pop	{r4, r5, r6, r7, r8, pc}
    18ac:	mov	r3, r7
    18b0:	mov	r2, r6
    18b4:	ldr	r1, [sp, #4]
    18b8:	mov	r0, r8
    18bc:	bl	1010 <o_base64_decode@plt>
    18c0:	mov	r4, r0
    18c4:	b	1898 <o_base64url_decode@@Base+0x54>

000018c8 <o_base64_2_base64url@@Base>:
    18c8:	cmp	r0, #0
    18cc:	beq	196c <o_base64_2_base64url@@Base+0xa4>
    18d0:	push	{r4, r5, r6, lr}
    18d4:	mov	r5, r3
    18d8:	mov	r4, r2
    18dc:	mov	r6, r1
    18e0:	mov	r2, r1
    18e4:	mov	r1, r0
    18e8:	mov	r0, r4
    18ec:	bl	ef0 <memcpy@plt>
    18f0:	str	r6, [r5]
    18f4:	cmp	r6, #0
    18f8:	beq	1938 <o_base64_2_base64url@@Base+0x70>
    18fc:	mov	r0, r4
    1900:	add	r1, r4, r6
    1904:	mov	lr, #95	; 0x5f
    1908:	mov	r2, #45	; 0x2d
    190c:	b	191c <o_base64_2_base64url@@Base+0x54>
    1910:	add	r0, r0, #1
    1914:	cmp	r0, r1
    1918:	beq	1938 <o_base64_2_base64url@@Base+0x70>
    191c:	ldrb	ip, [r0]
    1920:	cmp	ip, #43	; 0x2b
    1924:	strbeq	r2, [r0]
    1928:	beq	1910 <o_base64_2_base64url@@Base+0x48>
    192c:	cmp	ip, #47	; 0x2f
    1930:	strbeq	lr, [r0]
    1934:	b	1910 <o_base64_2_base64url@@Base+0x48>
    1938:	ldr	r3, [r5]
    193c:	sub	r3, r3, #1
    1940:	add	r1, r4, r3
    1944:	ldrb	r3, [r4, r3]
    1948:	cmp	r3, #61	; 0x3d
    194c:	bne	1974 <o_base64_2_base64url@@Base+0xac>
    1950:	sub	r0, r1, r4
    1954:	str	r0, [r5]
    1958:	ldrb	r0, [r1, #-1]!
    195c:	cmp	r0, #61	; 0x3d
    1960:	beq	1950 <o_base64_2_base64url@@Base+0x88>
    1964:	mov	r0, #1
    1968:	pop	{r4, r5, r6, pc}
    196c:	mov	r0, #0
    1970:	bx	lr
    1974:	mov	r0, #1
    1978:	pop	{r4, r5, r6, pc}

0000197c <o_malloc@@Base>:
    197c:	cmp	r0, #0
    1980:	beq	199c <o_malloc@@Base+0x20>
    1984:	push	{r4, lr}
    1988:	ldr	r3, [pc, #20]	; 19a4 <o_malloc@@Base+0x28>
    198c:	add	r3, pc, r3
    1990:	ldr	r3, [r3]
    1994:	blx	r3
    1998:	pop	{r4, pc}
    199c:	mov	r0, #0
    19a0:	bx	lr
    19a4:	andeq	r1, r1, ip, lsr #14

000019a8 <o_realloc@@Base>:
    19a8:	cmp	r1, #0
    19ac:	beq	19c8 <o_realloc@@Base+0x20>
    19b0:	push	{r4, lr}
    19b4:	ldr	r3, [pc, #20]	; 19d0 <o_realloc@@Base+0x28>
    19b8:	add	r3, pc, r3
    19bc:	ldr	r3, [r3, #4]
    19c0:	blx	r3
    19c4:	pop	{r4, pc}
    19c8:	mov	r0, #0
    19cc:	bx	lr
    19d0:	andeq	r1, r1, r0, lsl #14

000019d4 <o_free@@Base>:
    19d4:	cmp	r0, #0
    19d8:	bxeq	lr
    19dc:	push	{r4, lr}
    19e0:	ldr	r3, [pc, #12]	; 19f4 <o_free@@Base+0x20>
    19e4:	add	r3, pc, r3
    19e8:	ldr	r3, [r3, #8]
    19ec:	blx	r3
    19f0:	pop	{r4, pc}
    19f4:	ldrdeq	r1, [r1], -r4

000019f8 <o_set_alloc_funcs@@Base>:
    19f8:	ldr	r3, [pc, #16]	; 1a10 <o_set_alloc_funcs@@Base+0x18>
    19fc:	add	r3, pc, r3
    1a00:	str	r0, [r3]
    1a04:	str	r1, [r3, #4]
    1a08:	str	r2, [r3, #8]
    1a0c:	bx	lr
    1a10:			; <UNDEFINED> instruction: 0x000116bc

00001a14 <o_get_alloc_funcs@@Base>:
    1a14:	cmp	r0, #0
    1a18:	ldrne	r3, [pc, #52]	; 1a54 <o_get_alloc_funcs@@Base+0x40>
    1a1c:	addne	r3, pc, r3
    1a20:	ldrne	r3, [r3]
    1a24:	strne	r3, [r0]
    1a28:	cmp	r1, #0
    1a2c:	ldrne	r3, [pc, #36]	; 1a58 <o_get_alloc_funcs@@Base+0x44>
    1a30:	addne	r3, pc, r3
    1a34:	ldrne	r3, [r3, #4]
    1a38:	strne	r3, [r1]
    1a3c:	cmp	r2, #0
    1a40:	ldrne	r3, [pc, #20]	; 1a5c <o_get_alloc_funcs@@Base+0x48>
    1a44:	addne	r3, pc, r3
    1a48:	ldrne	r3, [r3, #8]
    1a4c:	strne	r3, [r2]
    1a50:	bx	lr
    1a54:	muleq	r1, ip, r6
    1a58:	andeq	r1, r1, r8, lsl #13
    1a5c:	andeq	r1, r1, r4, ror r6

00001a60 <msprintf@@Base>:
    1a60:	push	{r0, r1, r2, r3}
    1a64:	push	{r4, r5, r6, lr}
    1a68:	sub	sp, sp, #8
    1a6c:	ldr	r4, [sp, #24]
    1a70:	cmp	r4, #0
    1a74:	beq	1ad0 <msprintf@@Base+0x70>
    1a78:	add	r3, sp, #28
    1a7c:	str	r3, [sp, #4]
    1a80:	str	r3, [sp]
    1a84:	mov	r2, r4
    1a88:	mov	r1, #0
    1a8c:	mov	r0, r1
    1a90:	bl	101c <vsnprintf@plt>
    1a94:	add	r6, r0, #1
    1a98:	mov	r0, r6
    1a9c:	bl	fbc <o_malloc@plt>
    1aa0:	subs	r5, r0, #0
    1aa4:	beq	1abc <msprintf@@Base+0x5c>
    1aa8:	ldr	r3, [sp]
    1aac:	mov	r2, r4
    1ab0:	mov	r1, r6
    1ab4:	mov	r0, r5
    1ab8:	bl	101c <vsnprintf@plt>
    1abc:	mov	r0, r5
    1ac0:	add	sp, sp, #8
    1ac4:	pop	{r4, r5, r6, lr}
    1ac8:	add	sp, sp, #16
    1acc:	bx	lr
    1ad0:	mov	r5, #0
    1ad4:	b	1abc <msprintf@@Base+0x5c>

00001ad8 <mstrcatf@@Base>:
    1ad8:	push	{r1, r2, r3}
    1adc:	push	{r4, r5, r6, r7, lr}
    1ae0:	sub	sp, sp, #8
    1ae4:	ldr	r5, [sp, #28]
    1ae8:	cmp	r5, #0
    1aec:	beq	1bc8 <mstrcatf@@Base+0xf0>
    1af0:	mov	r4, r0
    1af4:	cmp	r0, #0
    1af8:	beq	1b80 <mstrcatf@@Base+0xa8>
    1afc:	add	r3, sp, #32
    1b00:	str	r3, [sp, #4]
    1b04:	str	r3, [sp]
    1b08:	mov	r2, r5
    1b0c:	mov	r1, #0
    1b10:	mov	r0, r1
    1b14:	bl	101c <vsnprintf@plt>
    1b18:	add	r7, r0, #1
    1b1c:	mov	r0, r7
    1b20:	bl	fbc <o_malloc@plt>
    1b24:	subs	r6, r0, #0
    1b28:	moveq	r7, r6
    1b2c:	beq	1b6c <mstrcatf@@Base+0x94>
    1b30:	ldr	r3, [sp]
    1b34:	mov	r2, r5
    1b38:	mov	r1, r7
    1b3c:	mov	r0, r6
    1b40:	bl	101c <vsnprintf@plt>
    1b44:	mov	r2, r6
    1b48:	mov	r1, r4
    1b4c:	ldr	r0, [pc, #124]	; 1bd0 <mstrcatf@@Base+0xf8>
    1b50:	add	r0, pc, r0
    1b54:	bl	fec <msprintf@plt>
    1b58:	mov	r7, r0
    1b5c:	mov	r0, r6
    1b60:	bl	ed8 <o_free@plt>
    1b64:	mov	r0, r4
    1b68:	bl	ed8 <o_free@plt>
    1b6c:	mov	r0, r7
    1b70:	add	sp, sp, #8
    1b74:	pop	{r4, r5, r6, r7, lr}
    1b78:	add	sp, sp, #12
    1b7c:	bx	lr
    1b80:	add	r3, sp, #32
    1b84:	str	r3, [sp, #4]
    1b88:	str	r3, [sp]
    1b8c:	mov	r2, r5
    1b90:	mov	r1, #0
    1b94:	mov	r0, r1
    1b98:	bl	101c <vsnprintf@plt>
    1b9c:	add	r4, r0, #1
    1ba0:	mov	r0, r4
    1ba4:	bl	fbc <o_malloc@plt>
    1ba8:	subs	r7, r0, #0
    1bac:	beq	1b6c <mstrcatf@@Base+0x94>
    1bb0:	ldr	r3, [sp]
    1bb4:	mov	r2, r5
    1bb8:	mov	r1, r4
    1bbc:	mov	r0, r7
    1bc0:	bl	101c <vsnprintf@plt>
    1bc4:	b	1b6c <mstrcatf@@Base+0x94>
    1bc8:	mov	r7, #0
    1bcc:	b	1b6c <mstrcatf@@Base+0x94>
    1bd0:	andeq	r1, r0, r0, ror r0

00001bd4 <o_strndup@@Base>:
    1bd4:	push	{r4, r5, r6, lr}
    1bd8:	subs	r6, r0, #0
    1bdc:	beq	1c14 <o_strndup@@Base+0x40>
    1be0:	mov	r4, r1
    1be4:	add	r0, r1, #1
    1be8:	bl	fbc <o_malloc@plt>
    1bec:	subs	r5, r0, #0
    1bf0:	beq	1c0c <o_strndup@@Base+0x38>
    1bf4:	mov	r2, r4
    1bf8:	mov	r1, r6
    1bfc:	mov	r0, r5
    1c00:	bl	ef0 <memcpy@plt>
    1c04:	mov	r3, #0
    1c08:	strb	r3, [r5, r4]
    1c0c:	mov	r0, r5
    1c10:	pop	{r4, r5, r6, pc}
    1c14:	mov	r5, #0
    1c18:	b	1c0c <o_strndup@@Base+0x38>

00001c1c <o_strdup@@Base>:
    1c1c:	push	{r4, lr}
    1c20:	subs	r4, r0, #0
    1c24:	beq	1c40 <o_strdup@@Base+0x24>
    1c28:	mov	r0, r4
    1c2c:	bl	f8c <strlen@plt>
    1c30:	mov	r1, r0
    1c34:	mov	r0, r4
    1c38:	bl	ec0 <o_strndup@plt>
    1c3c:	pop	{r4, pc}
    1c40:	mov	r0, #0
    1c44:	pop	{r4, pc}

00001c48 <str_replace@@Base>:
    1c48:	push	{r4, r5, r6, r7, r8, r9, lr}
    1c4c:	sub	sp, sp, #12
    1c50:	mov	r7, r2
    1c54:	cmp	r2, #0
    1c58:	cmpne	r1, #0
    1c5c:	moveq	r2, #1
    1c60:	movne	r2, #0
    1c64:	cmp	r0, #0
    1c68:	orreq	r2, r2, #1
    1c6c:	cmp	r2, #0
    1c70:	bne	1dac <str_replace@@Base+0x164>
    1c74:	mov	r6, r1
    1c78:	mov	r4, r0
    1c7c:	bl	e78 <strstr@plt>
    1c80:	cmp	r0, #0
    1c84:	beq	1d58 <str_replace@@Base+0x110>
    1c88:	sub	r8, r0, r4
    1c8c:	add	r5, r8, #1
    1c90:	mov	r0, r5
    1c94:	bl	fbc <o_malloc@plt>
    1c98:	subs	r9, r0, #0
    1c9c:	beq	1db4 <str_replace@@Base+0x16c>
    1ca0:	mov	r2, r8
    1ca4:	mov	r1, r4
    1ca8:	mov	r0, r9
    1cac:	bl	ef0 <memcpy@plt>
    1cb0:	mov	r3, #0
    1cb4:	strb	r3, [r9, r8]
    1cb8:	mov	r0, r9
    1cbc:	bl	f8c <strlen@plt>
    1cc0:	mov	r8, r0
    1cc4:	mov	r0, r6
    1cc8:	bl	f8c <strlen@plt>
    1ccc:	add	r0, r8, r0
    1cd0:	mov	r2, r7
    1cd4:	mov	r1, r6
    1cd8:	add	r0, r4, r0
    1cdc:	bl	f68 <str_replace@plt>
    1ce0:	subs	r4, r0, #0
    1ce4:	beq	1d68 <str_replace@@Base+0x120>
    1ce8:	mov	r0, r7
    1cec:	bl	f8c <strlen@plt>
    1cf0:	mov	r6, r0
    1cf4:	mov	r0, r4
    1cf8:	bl	f8c <strlen@plt>
    1cfc:	add	r5, r5, r6
    1d00:	add	r5, r5, r0
    1d04:	mov	r0, r5
    1d08:	bl	fbc <o_malloc@plt>
    1d0c:	subs	r6, r0, #0
    1d10:	beq	1d78 <str_replace@@Base+0x130>
    1d14:	str	r4, [sp, #4]
    1d18:	str	r7, [sp]
    1d1c:	mov	r3, r9
    1d20:	ldr	r2, [pc, #148]	; 1dbc <str_replace@@Base+0x174>
    1d24:	add	r2, pc, r2
    1d28:	mov	r1, r5
    1d2c:	mov	r0, r6
    1d30:	bl	fb0 <snprintf@plt>
    1d34:	cmp	r0, #0
    1d38:	blt	1d8c <str_replace@@Base+0x144>
    1d3c:	mov	r0, r9
    1d40:	bl	ed8 <o_free@plt>
    1d44:	mov	r0, r4
    1d48:	bl	ed8 <o_free@plt>
    1d4c:	mov	r0, r6
    1d50:	add	sp, sp, #12
    1d54:	pop	{r4, r5, r6, r7, r8, r9, pc}
    1d58:	mov	r0, r4
    1d5c:	bl	efc <o_strdup@plt>
    1d60:	mov	r6, r0
    1d64:	b	1d4c <str_replace@@Base+0x104>
    1d68:	mov	r0, r9
    1d6c:	bl	ed8 <o_free@plt>
    1d70:	mov	r6, r4
    1d74:	b	1d4c <str_replace@@Base+0x104>
    1d78:	mov	r0, r9
    1d7c:	bl	ed8 <o_free@plt>
    1d80:	mov	r0, r4
    1d84:	bl	ed8 <o_free@plt>
    1d88:	b	1d4c <str_replace@@Base+0x104>
    1d8c:	mov	r0, r9
    1d90:	bl	ed8 <o_free@plt>
    1d94:	mov	r0, r4
    1d98:	bl	ed8 <o_free@plt>
    1d9c:	mov	r0, r6
    1da0:	bl	ed8 <o_free@plt>
    1da4:	mov	r6, #0
    1da8:	b	1d4c <str_replace@@Base+0x104>
    1dac:	mov	r6, #0
    1db0:	b	1d4c <str_replace@@Base+0x104>
    1db4:	mov	r6, r9
    1db8:	b	1d4c <str_replace@@Base+0x104>
    1dbc:	andeq	r0, r0, r4, lsr #29

00001dc0 <o_strcmp@@Base>:
    1dc0:	cmp	r0, #0
    1dc4:	cmpeq	r1, #0
    1dc8:	beq	1dfc <o_strcmp@@Base+0x3c>
    1dcc:	clz	r3, r1
    1dd0:	lsr	r3, r3, #5
    1dd4:	cmp	r0, #0
    1dd8:	moveq	r3, #0
    1ddc:	andne	r3, r3, #1
    1de0:	cmp	r3, #0
    1de4:	bne	1e04 <o_strcmp@@Base+0x44>
    1de8:	cmp	r0, #0
    1dec:	beq	1e0c <o_strcmp@@Base+0x4c>
    1df0:	push	{r4, lr}
    1df4:	bl	ea8 <strcmp@plt>
    1df8:	pop	{r4, pc}
    1dfc:	mov	r0, #0
    1e00:	bx	lr
    1e04:	mvn	r0, #0
    1e08:	bx	lr
    1e0c:	mov	r0, #1
    1e10:	bx	lr

00001e14 <o_strncmp@@Base>:
    1e14:	push	{r4, lr}
    1e18:	mov	lr, r1
    1e1c:	clz	r1, r1
    1e20:	lsr	r1, r1, #5
    1e24:	mov	ip, r0
    1e28:	cmp	r0, #0
    1e2c:	movne	r0, #0
    1e30:	andeq	r0, r1, #1
    1e34:	mov	r4, r2
    1e38:	cmp	r2, #0
    1e3c:	movne	r2, r0
    1e40:	orreq	r2, r0, #1
    1e44:	cmp	r2, #0
    1e48:	bne	1e7c <o_strncmp@@Base+0x68>
    1e4c:	cmp	ip, #0
    1e50:	moveq	r3, #0
    1e54:	andne	r3, r1, #1
    1e58:	cmp	r3, #0
    1e5c:	bne	1e84 <o_strncmp@@Base+0x70>
    1e60:	cmp	ip, #0
    1e64:	beq	1e8c <o_strncmp@@Base+0x78>
    1e68:	mov	r2, r4
    1e6c:	mov	r0, ip
    1e70:	mov	r1, lr
    1e74:	bl	1034 <strncmp@plt>
    1e78:	pop	{r4, pc}
    1e7c:	mov	r0, #0
    1e80:	pop	{r4, pc}
    1e84:	mvn	r0, #0
    1e88:	pop	{r4, pc}
    1e8c:	mov	r0, #1
    1e90:	pop	{r4, pc}

00001e94 <o_strcpy@@Base>:
    1e94:	cmp	r1, #0
    1e98:	cmpne	r0, #0
    1e9c:	beq	1eac <o_strcpy@@Base+0x18>
    1ea0:	push	{r4, lr}
    1ea4:	bl	f38 <strcpy@plt>
    1ea8:	pop	{r4, pc}
    1eac:	mov	r0, #0
    1eb0:	bx	lr

00001eb4 <o_strncpy@@Base>:
    1eb4:	cmp	r1, #0
    1eb8:	cmpne	r0, #0
    1ebc:	beq	1ecc <o_strncpy@@Base+0x18>
    1ec0:	push	{r4, lr}
    1ec4:	bl	fd4 <strncpy@plt>
    1ec8:	pop	{r4, pc}
    1ecc:	mov	r0, #0
    1ed0:	bx	lr

00001ed4 <o_strcasecmp@@Base>:
    1ed4:	mov	r3, r0
    1ed8:	clz	r0, r0
    1edc:	lsr	r0, r0, #5
    1ee0:	mov	r2, r1
    1ee4:	clz	r1, r1
    1ee8:	lsr	r1, r1, #5
    1eec:	tst	r0, r1
    1ef0:	bne	1f30 <o_strcasecmp@@Base+0x5c>
    1ef4:	cmp	r3, #0
    1ef8:	moveq	r1, #0
    1efc:	andne	r1, r1, #1
    1f00:	cmp	r1, #0
    1f04:	bne	1f38 <o_strcasecmp@@Base+0x64>
    1f08:	cmp	r2, #0
    1f0c:	moveq	r0, #0
    1f10:	andne	r0, r0, #1
    1f14:	cmp	r0, #0
    1f18:	bne	1f40 <o_strcasecmp@@Base+0x6c>
    1f1c:	push	{r4, lr}
    1f20:	mov	r1, r2
    1f24:	mov	r0, r3
    1f28:	bl	f14 <strcasecmp@plt>
    1f2c:	pop	{r4, pc}
    1f30:	mov	r0, #0
    1f34:	bx	lr
    1f38:	mvn	r0, #0
    1f3c:	bx	lr
    1f40:	mov	r0, #1
    1f44:	bx	lr

00001f48 <o_strncasecmp@@Base>:
    1f48:	push	{r4, lr}
    1f4c:	mov	ip, r0
    1f50:	clz	r0, r0
    1f54:	lsr	r0, r0, #5
    1f58:	mov	lr, r1
    1f5c:	clz	r1, r1
    1f60:	lsr	r1, r1, #5
    1f64:	and	r3, r0, r1
    1f68:	cmp	r2, #0
    1f6c:	orreq	r3, r3, #1
    1f70:	cmp	r3, #0
    1f74:	bne	1fb4 <o_strncasecmp@@Base+0x6c>
    1f78:	mov	r4, r2
    1f7c:	cmp	ip, #0
    1f80:	moveq	r1, #0
    1f84:	andne	r1, r1, #1
    1f88:	cmp	r1, #0
    1f8c:	bne	1fbc <o_strncasecmp@@Base+0x74>
    1f90:	cmp	lr, #0
    1f94:	moveq	r0, #0
    1f98:	andne	r0, r0, #1
    1f9c:	cmp	r0, #0
    1fa0:	bne	1fc4 <o_strncasecmp@@Base+0x7c>
    1fa4:	mov	r1, lr
    1fa8:	mov	r0, ip
    1fac:	bl	fa4 <strncasecmp@plt>
    1fb0:	pop	{r4, pc}
    1fb4:	mov	r0, #0
    1fb8:	pop	{r4, pc}
    1fbc:	mvn	r0, #0
    1fc0:	pop	{r4, pc}
    1fc4:	mov	r0, #1
    1fc8:	pop	{r4, pc}

00001fcc <o_strstr@@Base>:
    1fcc:	cmp	r1, #0
    1fd0:	cmpne	r0, #0
    1fd4:	beq	1fe4 <o_strstr@@Base+0x18>
    1fd8:	push	{r4, lr}
    1fdc:	bl	e78 <strstr@plt>
    1fe0:	pop	{r4, pc}
    1fe4:	mov	r0, #0
    1fe8:	bx	lr

00001fec <o_strchr@@Base>:
    1fec:	cmp	r0, #0
    1ff0:	beq	2000 <o_strchr@@Base+0x14>
    1ff4:	push	{r4, lr}
    1ff8:	bl	f98 <strchr@plt>
    1ffc:	pop	{r4, pc}
    2000:	mov	r0, #0
    2004:	bx	lr

00002008 <o_strrchr@@Base>:
    2008:	cmp	r0, #0
    200c:	beq	201c <o_strrchr@@Base+0x14>
    2010:	push	{r4, lr}
    2014:	bl	1004 <strrchr@plt>
    2018:	pop	{r4, pc}
    201c:	mov	r0, #0
    2020:	bx	lr

00002024 <o_strnstr@@Base>:
    2024:	cmp	r1, #0
    2028:	cmpne	r0, #0
    202c:	beq	20ac <o_strnstr@@Base+0x88>
    2030:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    2034:	mov	r4, r0
    2038:	mov	r9, r1
    203c:	mov	r6, r2
    2040:	mov	r0, r1
    2044:	bl	f8c <strlen@plt>
    2048:	subs	sl, r0, #0
    204c:	beq	20b4 <o_strnstr@@Base+0x90>
    2050:	subs	r6, r6, sl
    2054:	bmi	20bc <o_strnstr@@Base+0x98>
    2058:	ldrb	r7, [r9]
    205c:	mov	r8, r4
    2060:	b	2070 <o_strnstr@@Base+0x4c>
    2064:	sub	r3, r4, r8
    2068:	cmp	r3, r6
    206c:	bgt	20a4 <o_strnstr@@Base+0x80>
    2070:	mov	r5, r4
    2074:	add	r4, r4, #1
    2078:	ldrb	r3, [r5]
    207c:	cmp	r3, r7
    2080:	bne	2064 <o_strnstr@@Base+0x40>
    2084:	mov	r2, sl
    2088:	mov	r1, r9
    208c:	mov	r0, r5
    2090:	bl	1034 <strncmp@plt>
    2094:	cmp	r0, #0
    2098:	bne	2064 <o_strnstr@@Base+0x40>
    209c:	mov	r0, r5
    20a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    20a4:	mov	r0, #0
    20a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    20ac:	mov	r0, #0
    20b0:	bx	lr
    20b4:	mov	r0, r4
    20b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    20bc:	mov	r0, #0
    20c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000020c4 <o_strcasestr@@Base>:
    20c4:	cmp	r1, #0
    20c8:	cmpne	r0, #0
    20cc:	beq	20dc <o_strcasestr@@Base+0x18>
    20d0:	push	{r4, lr}
    20d4:	bl	e9c <strcasestr@plt>
    20d8:	pop	{r4, pc}
    20dc:	mov	r0, #0
    20e0:	bx	lr

000020e4 <o_strlen@@Base>:
    20e4:	cmp	r0, #0
    20e8:	beq	20f8 <o_strlen@@Base+0x14>
    20ec:	push	{r4, lr}
    20f0:	bl	f8c <strlen@plt>
    20f4:	pop	{r4, pc}
    20f8:	mov	r0, #0
    20fc:	bx	lr

00002100 <o_strnchr@@Base>:
    2100:	push	{r4, r5, r6, r7, r8, lr}
    2104:	subs	r6, r0, #0
    2108:	beq	2164 <o_strnchr@@Base+0x64>
    210c:	cmp	r1, #0
    2110:	beq	216c <o_strnchr@@Base+0x6c>
    2114:	mov	r8, r2
    2118:	mov	r7, r1
    211c:	mov	r5, r6
    2120:	mov	r4, #0
    2124:	mov	r0, r6
    2128:	bl	f44 <o_strlen@plt>
    212c:	cmp	r0, r4
    2130:	bls	215c <o_strnchr@@Base+0x5c>
    2134:	mov	r0, r5
    2138:	add	r5, r5, #1
    213c:	ldrb	r3, [r0]
    2140:	cmp	r3, r8
    2144:	popeq	{r4, r5, r6, r7, r8, pc}
    2148:	add	r4, r4, #1
    214c:	cmp	r7, r4
    2150:	bne	2124 <o_strnchr@@Base+0x24>
    2154:	mov	r0, #0
    2158:	pop	{r4, r5, r6, r7, r8, pc}
    215c:	mov	r0, #0
    2160:	pop	{r4, r5, r6, r7, r8, pc}
    2164:	mov	r0, r6
    2168:	pop	{r4, r5, r6, r7, r8, pc}
    216c:	mov	r0, #0
    2170:	pop	{r4, r5, r6, r7, r8, pc}

00002174 <o_strrnchr@@Base>:
    2174:	cmp	r0, #0
    2178:	cmpne	r1, #0
    217c:	beq	21ec <o_strrnchr@@Base+0x78>
    2180:	push	{r4, r5, r6, r7, r8, lr}
    2184:	mov	r6, r0
    2188:	mov	r7, r1
    218c:	mov	r8, r2
    2190:	bl	f44 <o_strlen@plt>
    2194:	sub	r0, r0, #1
    2198:	mov	r4, r0
    219c:	cmp	r0, #0
    21a0:	blt	21f4 <o_strrnchr@@Base+0x80>
    21a4:	add	r5, r6, r0
    21a8:	mov	r0, r6
    21ac:	bl	f44 <o_strlen@plt>
    21b0:	sub	r0, r0, #1
    21b4:	sub	r0, r0, r4
    21b8:	cmp	r7, r0
    21bc:	bls	21e4 <o_strrnchr@@Base+0x70>
    21c0:	mov	r0, r5
    21c4:	sub	r5, r5, #1
    21c8:	ldrb	r3, [r0]
    21cc:	cmp	r3, r8
    21d0:	popeq	{r4, r5, r6, r7, r8, pc}
    21d4:	subs	r4, r4, #1
    21d8:	bpl	21a8 <o_strrnchr@@Base+0x34>
    21dc:	mov	r0, #0
    21e0:	pop	{r4, r5, r6, r7, r8, pc}
    21e4:	mov	r0, #0
    21e8:	pop	{r4, r5, r6, r7, r8, pc}
    21ec:	mov	r0, #0
    21f0:	bx	lr
    21f4:	mov	r0, #0
    21f8:	pop	{r4, r5, r6, r7, r8, pc}

000021fc <split_string@@Base>:
    21fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2200:	sub	sp, sp, #12
    2204:	str	r1, [sp, #4]
    2208:	cmp	r0, #0
    220c:	cmpne	r1, #0
    2210:	moveq	r7, #0
    2214:	beq	2304 <split_string@@Base+0x108>
    2218:	mov	r4, r2
    221c:	mov	r5, r0
    2220:	cmp	r2, #0
    2224:	beq	2318 <split_string@@Base+0x11c>
    2228:	mov	r3, #0
    222c:	str	r3, [r2]
    2230:	bl	e78 <strstr@plt>
    2234:	subs	r8, r0, #0
    2238:	beq	2310 <split_string@@Base+0x114>
    223c:	mov	r6, #8
    2240:	mov	r7, #1
    2244:	mov	fp, #0
    2248:	b	2274 <split_string@@Base+0x78>
    224c:	add	r7, r7, #1
    2250:	ldr	r0, [sp, #4]
    2254:	bl	f8c <strlen@plt>
    2258:	add	r5, r8, r0
    225c:	ldr	r1, [sp, #4]
    2260:	mov	r0, r5
    2264:	bl	e78 <strstr@plt>
    2268:	add	r6, r6, #4
    226c:	subs	r8, r0, #0
    2270:	beq	22b8 <split_string@@Base+0xbc>
    2274:	cmp	r4, #0
    2278:	beq	224c <split_string@@Base+0x50>
    227c:	mov	r1, r6
    2280:	ldr	r0, [r4]
    2284:	bl	f5c <o_realloc@plt>
    2288:	mov	r9, r0
    228c:	str	r0, [r4]
    2290:	cmp	r0, #0
    2294:	beq	224c <split_string@@Base+0x50>
    2298:	sub	sl, r6, #8
    229c:	sub	r1, r8, r5
    22a0:	mov	r0, r5
    22a4:	bl	ec0 <o_strndup@plt>
    22a8:	str	r0, [r9, sl]
    22ac:	ldr	r3, [r4]
    22b0:	str	fp, [r3, r7, lsl #2]
    22b4:	b	224c <split_string@@Base+0x50>
    22b8:	cmp	r4, #0
    22bc:	beq	2304 <split_string@@Base+0x108>
    22c0:	add	r6, r7, #1
    22c4:	lsl	r6, r6, #2
    22c8:	mov	r1, r6
    22cc:	ldr	r0, [r4]
    22d0:	bl	f5c <o_realloc@plt>
    22d4:	mov	r8, r0
    22d8:	str	r0, [r4]
    22dc:	cmp	r0, #0
    22e0:	beq	2304 <split_string@@Base+0x108>
    22e4:	sub	r9, r6, #8
    22e8:	mov	r0, r5
    22ec:	bl	efc <o_strdup@plt>
    22f0:	str	r0, [r8, r9]
    22f4:	ldr	r3, [r4]
    22f8:	add	r6, r3, r6
    22fc:	mov	r3, #0
    2300:	str	r3, [r6, #-4]
    2304:	mov	r0, r7
    2308:	add	sp, sp, #12
    230c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2310:	mov	r7, #1
    2314:	b	22c0 <split_string@@Base+0xc4>
    2318:	ldr	r1, [sp, #4]
    231c:	bl	e78 <strstr@plt>
    2320:	subs	r8, r0, #0
    2324:	bne	223c <split_string@@Base+0x40>
    2328:	mov	r7, #1
    232c:	b	2304 <split_string@@Base+0x108>

00002330 <free_string_array@@Base>:
    2330:	push	{r4, r5, r6, lr}
    2334:	subs	r6, r0, #0
    2338:	popeq	{r4, r5, r6, pc}
    233c:	ldr	r0, [r6]
    2340:	cmp	r0, #0
    2344:	beq	2364 <free_string_array@@Base+0x34>
    2348:	mov	r4, r6
    234c:	mov	r5, #0
    2350:	bl	ed8 <o_free@plt>
    2354:	str	r5, [r4]
    2358:	ldr	r0, [r4, #4]!
    235c:	cmp	r0, #0
    2360:	bne	2350 <free_string_array@@Base+0x20>
    2364:	mov	r0, r6
    2368:	bl	ed8 <o_free@plt>
    236c:	pop	{r4, r5, r6, pc}

00002370 <string_array_size@@Base>:
    2370:	subs	r3, r0, #0
    2374:	beq	239c <string_array_size@@Base+0x2c>
    2378:	ldr	r2, [r3]
    237c:	cmp	r2, #0
    2380:	beq	23a4 <string_array_size@@Base+0x34>
    2384:	mov	r0, #0
    2388:	add	r0, r0, #1
    238c:	ldr	r2, [r3, #4]!
    2390:	cmp	r2, #0
    2394:	bne	2388 <string_array_size@@Base+0x18>
    2398:	bx	lr
    239c:	mov	r0, #0
    23a0:	bx	lr
    23a4:	mov	r0, #0
    23a8:	bx	lr

000023ac <string_array_join@@Base>:
    23ac:	push	{r4, r5, r6, r7, r8, lr}
    23b0:	cmp	r0, #0
    23b4:	cmpne	r1, #0
    23b8:	beq	2424 <string_array_join@@Base+0x78>
    23bc:	mov	r5, r0
    23c0:	mov	r7, r1
    23c4:	ldr	r3, [r0]
    23c8:	cmp	r3, #0
    23cc:	beq	2430 <string_array_join@@Base+0x84>
    23d0:	mov	r4, #0
    23d4:	ldr	r8, [pc, #92]	; 2438 <string_array_join@@Base+0x8c>
    23d8:	add	r8, pc, r8
    23dc:	b	23f8 <string_array_join@@Base+0x4c>
    23e0:	mov	r0, r3
    23e4:	bl	efc <o_strdup@plt>
    23e8:	mov	r4, r0
    23ec:	ldr	r3, [r5, #4]!
    23f0:	cmp	r3, #0
    23f4:	beq	2428 <string_array_join@@Base+0x7c>
    23f8:	cmp	r4, #0
    23fc:	beq	23e0 <string_array_join@@Base+0x34>
    2400:	mov	r2, r7
    2404:	mov	r1, r4
    2408:	mov	r0, r8
    240c:	bl	fec <msprintf@plt>
    2410:	mov	r6, r0
    2414:	mov	r0, r4
    2418:	bl	ed8 <o_free@plt>
    241c:	mov	r4, r6
    2420:	b	23ec <string_array_join@@Base+0x40>
    2424:	mov	r4, #0
    2428:	mov	r0, r4
    242c:	pop	{r4, r5, r6, r7, r8, pc}
    2430:	mov	r4, #0
    2434:	b	2428 <string_array_join@@Base+0x7c>
    2438:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>

0000243c <trimwhitespace@@Base>:
    243c:	push	{r4, r5, r6, lr}
    2440:	subs	r5, r0, #0
    2444:	beq	24e8 <trimwhitespace@@Base+0xac>
    2448:	ldrb	r3, [r5]
    244c:	cmp	r3, #0
    2450:	beq	24e8 <trimwhitespace@@Base+0xac>
    2454:	bl	f80 <__ctype_b_loc@plt>
    2458:	mov	r6, r0
    245c:	ldr	r1, [r0]
    2460:	mov	r4, r5
    2464:	b	246c <trimwhitespace@@Base+0x30>
    2468:	mov	r4, r2
    246c:	mov	r5, r4
    2470:	add	r2, r4, #1
    2474:	ldrb	r3, [r4]
    2478:	lsl	r3, r3, #1
    247c:	ldrh	r3, [r1, r3]
    2480:	tst	r3, #8192	; 0x2000
    2484:	bne	2468 <trimwhitespace@@Base+0x2c>
    2488:	mov	r0, r4
    248c:	bl	f44 <o_strlen@plt>
    2490:	sub	r0, r0, #1
    2494:	add	r1, r4, r0
    2498:	cmp	r4, r1
    249c:	bcs	24e0 <trimwhitespace@@Base+0xa4>
    24a0:	ldr	ip, [r6]
    24a4:	ldrb	r3, [r4, r0]
    24a8:	lsl	r3, r3, #1
    24ac:	ldrh	r3, [ip, r3]
    24b0:	tst	r3, #8192	; 0x2000
    24b4:	beq	24e0 <trimwhitespace@@Base+0xa4>
    24b8:	sub	r3, r1, #1
    24bc:	mov	r1, r3
    24c0:	cmp	r3, r4
    24c4:	beq	24e0 <trimwhitespace@@Base+0xa4>
    24c8:	sub	r3, r3, #1
    24cc:	ldrb	r2, [r1]
    24d0:	lsl	r2, r2, #1
    24d4:	ldrh	r2, [ip, r2]
    24d8:	tst	r2, #8192	; 0x2000
    24dc:	bne	24bc <trimwhitespace@@Base+0x80>
    24e0:	mov	r3, #0
    24e4:	strb	r3, [r1, #1]
    24e8:	mov	r0, r5
    24ec:	pop	{r4, r5, r6, pc}

000024f0 <trimcharacter@@Base>:
    24f0:	push	{r4, r5, r6, lr}
    24f4:	subs	r4, r0, #0
    24f8:	beq	2578 <trimcharacter@@Base+0x88>
    24fc:	mov	r5, r1
    2500:	ldrb	r2, [r4]
    2504:	cmp	r2, #0
    2508:	beq	2580 <trimcharacter@@Base+0x90>
    250c:	cmp	r2, r1
    2510:	bne	2520 <trimcharacter@@Base+0x30>
    2514:	ldrb	r3, [r4, #1]!
    2518:	cmp	r3, r2
    251c:	beq	2514 <trimcharacter@@Base+0x24>
    2520:	mov	r0, r4
    2524:	bl	f44 <o_strlen@plt>
    2528:	sub	r0, r0, #1
    252c:	add	r2, r4, r0
    2530:	cmp	r2, r4
    2534:	bls	2568 <trimcharacter@@Base+0x78>
    2538:	ldrb	r3, [r4, r0]
    253c:	cmp	r3, r5
    2540:	bne	2568 <trimcharacter@@Base+0x78>
    2544:	sub	r3, r2, #1
    2548:	mov	r0, r4
    254c:	mov	r2, r3
    2550:	cmp	r3, r0
    2554:	beq	2568 <trimcharacter@@Base+0x78>
    2558:	sub	r3, r3, #1
    255c:	ldrb	r1, [r2]
    2560:	cmp	r1, r5
    2564:	beq	254c <trimcharacter@@Base+0x5c>
    2568:	mov	r3, #0
    256c:	strb	r3, [r2, #1]
    2570:	mov	r0, r4
    2574:	pop	{r4, r5, r6, pc}
    2578:	mov	r0, r4
    257c:	pop	{r4, r5, r6, pc}
    2580:	mov	r0, r4
    2584:	pop	{r4, r5, r6, pc}

00002588 <string_array_has_value@@Base>:
    2588:	cmp	r0, #0
    258c:	cmpne	r1, #0
    2590:	beq	25cc <string_array_has_value@@Base+0x44>
    2594:	push	{r4, r5, r6, lr}
    2598:	mov	r4, r0
    259c:	mov	r5, r1
    25a0:	ldr	r0, [r0]
    25a4:	cmp	r0, #0
    25a8:	beq	25d4 <string_array_has_value@@Base+0x4c>
    25ac:	mov	r1, r5
    25b0:	bl	f20 <o_strcmp@plt>
    25b4:	cmp	r0, #0
    25b8:	beq	25dc <string_array_has_value@@Base+0x54>
    25bc:	ldr	r0, [r4, #4]!
    25c0:	cmp	r0, #0
    25c4:	bne	25ac <string_array_has_value@@Base+0x24>
    25c8:	pop	{r4, r5, r6, pc}
    25cc:	mov	r0, #0
    25d0:	bx	lr
    25d4:	mov	r0, #0
    25d8:	pop	{r4, r5, r6, pc}
    25dc:	mov	r0, #1
    25e0:	pop	{r4, r5, r6, pc}

000025e4 <string_array_has_value_case@@Base>:
    25e4:	cmp	r0, #0
    25e8:	cmpne	r1, #0
    25ec:	beq	2628 <string_array_has_value_case@@Base+0x44>
    25f0:	push	{r4, r5, r6, lr}
    25f4:	mov	r4, r0
    25f8:	mov	r5, r1
    25fc:	ldr	r0, [r0]
    2600:	cmp	r0, #0
    2604:	beq	2630 <string_array_has_value_case@@Base+0x4c>
    2608:	mov	r1, r5
    260c:	bl	f50 <o_strcasecmp@plt>
    2610:	cmp	r0, #0
    2614:	beq	2638 <string_array_has_value_case@@Base+0x54>
    2618:	ldr	r0, [r4, #4]!
    261c:	cmp	r0, #0
    2620:	bne	2608 <string_array_has_value_case@@Base+0x24>
    2624:	pop	{r4, r5, r6, pc}
    2628:	mov	r0, #0
    262c:	bx	lr
    2630:	mov	r0, #0
    2634:	pop	{r4, r5, r6, pc}
    2638:	mov	r0, #1
    263c:	pop	{r4, r5, r6, pc}

00002640 <string_array_has_value_n@@Base>:
    2640:	cmp	r0, #0
    2644:	cmpne	r1, #0
    2648:	beq	268c <string_array_has_value_n@@Base+0x4c>
    264c:	push	{r4, r5, r6, lr}
    2650:	mov	r4, r0
    2654:	mov	r6, r1
    2658:	ldr	r0, [r0]
    265c:	cmp	r0, #0
    2660:	beq	2694 <string_array_has_value_n@@Base+0x54>
    2664:	mov	r5, r2
    2668:	mov	r2, r5
    266c:	mov	r1, r6
    2670:	bl	1028 <o_strncmp@plt>
    2674:	cmp	r0, #0
    2678:	beq	269c <string_array_has_value_n@@Base+0x5c>
    267c:	ldr	r0, [r4, #4]!
    2680:	cmp	r0, #0
    2684:	bne	2668 <string_array_has_value_n@@Base+0x28>
    2688:	pop	{r4, r5, r6, pc}
    268c:	mov	r0, #0
    2690:	bx	lr
    2694:	mov	r0, #0
    2698:	pop	{r4, r5, r6, pc}
    269c:	mov	r0, #1
    26a0:	pop	{r4, r5, r6, pc}

000026a4 <string_array_has_value_ncase@@Base>:
    26a4:	cmp	r0, #0
    26a8:	cmpne	r1, #0
    26ac:	beq	26f0 <string_array_has_value_ncase@@Base+0x4c>
    26b0:	push	{r4, r5, r6, lr}
    26b4:	mov	r4, r0
    26b8:	mov	r6, r1
    26bc:	ldr	r0, [r0]
    26c0:	cmp	r0, #0
    26c4:	beq	26f8 <string_array_has_value_ncase@@Base+0x54>
    26c8:	mov	r5, r2
    26cc:	mov	r2, r5
    26d0:	mov	r1, r6
    26d4:	bl	e90 <o_strncasecmp@plt>
    26d8:	cmp	r0, #0
    26dc:	beq	2700 <string_array_has_value_ncase@@Base+0x5c>
    26e0:	ldr	r0, [r4, #4]!
    26e4:	cmp	r0, #0
    26e8:	bne	26cc <string_array_has_value_ncase@@Base+0x28>
    26ec:	pop	{r4, r5, r6, pc}
    26f0:	mov	r0, #0
    26f4:	bx	lr
    26f8:	mov	r0, #0
    26fc:	pop	{r4, r5, r6, pc}
    2700:	mov	r0, #1
    2704:	pop	{r4, r5, r6, pc}

00002708 <string_array_has_trimmed_value@@Base>:
    2708:	push	{r4, r5, r6, r7, r8, lr}
    270c:	cmp	r0, #0
    2710:	cmpne	r1, #0
    2714:	moveq	r4, #0
    2718:	bne	2724 <string_array_has_trimmed_value@@Base+0x1c>
    271c:	mov	r0, r4
    2720:	pop	{r4, r5, r6, r7, r8, pc}
    2724:	mov	r5, r0
    2728:	mov	r0, r1
    272c:	bl	efc <o_strdup@plt>
    2730:	subs	r7, r0, #0
    2734:	moveq	r4, #0
    2738:	beq	27a0 <string_array_has_trimmed_value@@Base+0x98>
    273c:	mov	r0, r7
    2740:	bl	f2c <trimwhitespace@plt>
    2744:	mov	r6, r0
    2748:	ldr	r0, [r5]
    274c:	cmp	r0, #0
    2750:	bne	2770 <string_array_has_trimmed_value@@Base+0x68>
    2754:	mov	r4, #0
    2758:	b	27a0 <string_array_has_trimmed_value@@Base+0x98>
    275c:	mov	r0, r4
    2760:	bl	ed8 <o_free@plt>
    2764:	ldr	r0, [r5, #4]!
    2768:	cmp	r0, #0
    276c:	beq	27ac <string_array_has_trimmed_value@@Base+0xa4>
    2770:	bl	efc <o_strdup@plt>
    2774:	subs	r4, r0, #0
    2778:	beq	27b4 <string_array_has_trimmed_value@@Base+0xac>
    277c:	mov	r0, r4
    2780:	bl	f2c <trimwhitespace@plt>
    2784:	mov	r1, r6
    2788:	bl	f20 <o_strcmp@plt>
    278c:	cmp	r0, #0
    2790:	bne	275c <string_array_has_trimmed_value@@Base+0x54>
    2794:	mov	r0, r4
    2798:	bl	ed8 <o_free@plt>
    279c:	mov	r4, #1
    27a0:	mov	r0, r7
    27a4:	bl	ed8 <o_free@plt>
    27a8:	b	271c <string_array_has_trimmed_value@@Base+0x14>
    27ac:	mov	r4, #0
    27b0:	b	27a0 <string_array_has_trimmed_value@@Base+0x98>
    27b4:	mov	r4, #0
    27b8:	b	27a0 <string_array_has_trimmed_value@@Base+0x98>

000027bc <pointer_list_init@@Base>:
    27bc:	cmp	r0, #0
    27c0:	movne	r3, #0
    27c4:	strne	r3, [r0]
    27c8:	strne	r3, [r0, #4]
    27cc:	bx	lr

000027d0 <pointer_list_size@@Base>:
    27d0:	cmp	r0, #0
    27d4:	ldrne	r0, [r0]
    27d8:	moveq	r0, #0
    27dc:	bx	lr

000027e0 <pointer_list_append@@Base>:
    27e0:	push	{r4, r5, r6, lr}
    27e4:	subs	r4, r0, #0
    27e8:	beq	2840 <pointer_list_append@@Base+0x60>
    27ec:	mov	r5, r1
    27f0:	ldr	r1, [r4]
    27f4:	add	r1, r1, #1
    27f8:	lsl	r1, r1, #2
    27fc:	ldr	r0, [r4, #4]
    2800:	bl	f5c <o_realloc@plt>
    2804:	str	r0, [r4, #4]
    2808:	cmp	r0, #0
    280c:	beq	282c <pointer_list_append@@Base+0x4c>
    2810:	ldr	r3, [r4]
    2814:	str	r5, [r0, r3, lsl #2]
    2818:	ldr	r3, [r4]
    281c:	add	r3, r3, #1
    2820:	str	r3, [r4]
    2824:	mov	r0, #1
    2828:	pop	{r4, r5, r6, pc}
    282c:	mov	r0, #0
    2830:	bl	ed8 <o_free@plt>
    2834:	mov	r0, #0
    2838:	str	r0, [r4, #4]
    283c:	pop	{r4, r5, r6, pc}
    2840:	mov	r0, #0
    2844:	pop	{r4, r5, r6, pc}

00002848 <pointer_list_get_at@@Base>:
    2848:	cmp	r0, #0
    284c:	beq	2868 <pointer_list_get_at@@Base+0x20>
    2850:	ldr	r3, [r0]
    2854:	cmp	r3, r1
    2858:	bls	2870 <pointer_list_get_at@@Base+0x28>
    285c:	ldr	r3, [r0, #4]
    2860:	ldr	r0, [r3, r1, lsl #2]
    2864:	bx	lr
    2868:	mov	r0, #0
    286c:	bx	lr
    2870:	mov	r0, #0
    2874:	bx	lr

00002878 <pointer_list_remove_at@@Base>:
    2878:	push	{r4, lr}
    287c:	subs	r4, r0, #0
    2880:	beq	2910 <pointer_list_remove_at@@Base+0x98>
    2884:	ldr	ip, [r4]
    2888:	cmp	ip, r1
    288c:	bls	2918 <pointer_list_remove_at@@Base+0xa0>
    2890:	sub	r3, ip, #1
    2894:	cmp	r1, r3
    2898:	bcs	28cc <pointer_list_remove_at@@Base+0x54>
    289c:	lsl	r3, r1, #2
    28a0:	ldr	ip, [r4, #4]
    28a4:	add	r2, r1, #1
    28a8:	add	r0, r3, #4
    28ac:	ldr	r1, [ip, r0]
    28b0:	str	r1, [ip, r3]
    28b4:	ldr	ip, [r4]
    28b8:	mov	r1, r2
    28bc:	mov	r3, r0
    28c0:	sub	r0, ip, #1
    28c4:	cmp	r0, r2
    28c8:	bhi	28a0 <pointer_list_remove_at@@Base+0x28>
    28cc:	cmp	ip, #1
    28d0:	bls	28fc <pointer_list_remove_at@@Base+0x84>
    28d4:	sub	r1, ip, #-1073741823	; 0xc0000001
    28d8:	lsl	r1, r1, #2
    28dc:	ldr	r0, [r4, #4]
    28e0:	bl	f5c <o_realloc@plt>
    28e4:	str	r0, [r4, #4]
    28e8:	ldr	r3, [r4]
    28ec:	sub	r3, r3, #1
    28f0:	str	r3, [r4]
    28f4:	mov	r0, #1
    28f8:	pop	{r4, pc}
    28fc:	ldr	r0, [r4, #4]
    2900:	bl	ed8 <o_free@plt>
    2904:	mov	r3, #0
    2908:	str	r3, [r4, #4]
    290c:	b	28e8 <pointer_list_remove_at@@Base+0x70>
    2910:	mov	r0, #0
    2914:	pop	{r4, pc}
    2918:	mov	r0, #0
    291c:	pop	{r4, pc}

00002920 <pointer_list_clean@@Base>:
    2920:	push	{r4, r5, r6, lr}
    2924:	subs	r5, r0, #0
    2928:	popeq	{r4, r5, r6, pc}
    292c:	mov	r0, r5
    2930:	bl	fe0 <pointer_list_size@plt>
    2934:	subs	r4, r0, #0
    2938:	popeq	{r4, r5, r6, pc}
    293c:	sub	r4, r4, #1
    2940:	mov	r1, r4
    2944:	mov	r0, r5
    2948:	bl	ee4 <pointer_list_remove_at@plt>
    294c:	cmp	r4, #0
    2950:	bne	293c <pointer_list_clean@@Base+0x1c>
    2954:	pop	{r4, r5, r6, pc}

00002958 <pointer_list_clean_free@@Base>:
    2958:	push	{r4, r5, r6, lr}
    295c:	subs	r5, r0, #0
    2960:	popeq	{r4, r5, r6, pc}
    2964:	mov	r6, r1
    2968:	mov	r0, r5
    296c:	bl	fe0 <pointer_list_size@plt>
    2970:	subs	r4, r0, #0
    2974:	popeq	{r4, r5, r6, pc}
    2978:	sub	r4, r4, #1
    297c:	mov	r1, r4
    2980:	mov	r0, r5
    2984:	bl	e84 <pointer_list_get_at@plt>
    2988:	blx	r6
    298c:	mov	r1, r4
    2990:	mov	r0, r5
    2994:	bl	ee4 <pointer_list_remove_at@plt>
    2998:	cmp	r4, #0
    299c:	bne	2978 <pointer_list_clean_free@@Base+0x20>
    29a0:	pop	{r4, r5, r6, pc}

000029a4 <pointer_list_remove_at_free@@Base>:
    29a4:	push	{r4, r5, r6, lr}
    29a8:	subs	r4, r0, #0
    29ac:	beq	29e8 <pointer_list_remove_at_free@@Base+0x44>
    29b0:	ldr	r3, [r4]
    29b4:	cmp	r3, r1
    29b8:	bhi	29c4 <pointer_list_remove_at_free@@Base+0x20>
    29bc:	mov	r0, #0
    29c0:	pop	{r4, r5, r6, pc}
    29c4:	mov	r6, r2
    29c8:	mov	r5, r1
    29cc:	mov	r0, r4
    29d0:	bl	e84 <pointer_list_get_at@plt>
    29d4:	blx	r6
    29d8:	mov	r1, r5
    29dc:	mov	r0, r4
    29e0:	bl	ee4 <pointer_list_remove_at@plt>
    29e4:	pop	{r4, r5, r6, pc}
    29e8:	mov	r0, #0
    29ec:	pop	{r4, r5, r6, pc}

000029f0 <pointer_list_insert_at@@Base>:
    29f0:	push	{r4, r5, r6, lr}
    29f4:	subs	r4, r0, #0
    29f8:	beq	2a80 <pointer_list_insert_at@@Base+0x90>
    29fc:	ldr	r3, [r4]
    2a00:	cmp	r3, r2
    2a04:	bcs	2a10 <pointer_list_insert_at@@Base+0x20>
    2a08:	mov	r0, #0
    2a0c:	pop	{r4, r5, r6, pc}
    2a10:	mov	r5, r2
    2a14:	mov	r6, r1
    2a18:	add	r1, r3, #1
    2a1c:	lsl	r1, r1, #2
    2a20:	ldr	r0, [r4, #4]
    2a24:	bl	f5c <o_realloc@plt>
    2a28:	str	r0, [r4, #4]
    2a2c:	cmp	r0, #0
    2a30:	beq	2a88 <pointer_list_insert_at@@Base+0x98>
    2a34:	ldr	ip, [r4]
    2a38:	cmp	r5, ip
    2a3c:	bcs	2a64 <pointer_list_insert_at@@Base+0x74>
    2a40:	lsl	r3, ip, #2
    2a44:	ldr	lr, [r4, #4]
    2a48:	add	r2, lr, r3
    2a4c:	ldr	r2, [r2, #-4]
    2a50:	str	r2, [lr, r3]
    2a54:	sub	ip, ip, #1
    2a58:	sub	r3, r3, #4
    2a5c:	cmp	r5, ip
    2a60:	bne	2a44 <pointer_list_insert_at@@Base+0x54>
    2a64:	ldr	r3, [r4, #4]
    2a68:	str	r6, [r3, r5, lsl #2]
    2a6c:	ldr	r3, [r4]
    2a70:	add	r3, r3, #1
    2a74:	str	r3, [r4]
    2a78:	mov	r0, #1
    2a7c:	pop	{r4, r5, r6, pc}
    2a80:	mov	r0, #0
    2a84:	pop	{r4, r5, r6, pc}
    2a88:	mov	r0, #0
    2a8c:	pop	{r4, r5, r6, pc}

00002a90 <pointer_list_remove_pointer@@Base>:
    2a90:	cmp	r0, #0
    2a94:	beq	2af0 <pointer_list_remove_pointer@@Base+0x60>
    2a98:	push	{r4, lr}
    2a9c:	ldr	lr, [r0]
    2aa0:	cmp	lr, #0
    2aa4:	beq	2af8 <pointer_list_remove_pointer@@Base+0x68>
    2aa8:	ldr	r2, [r0, #4]
    2aac:	ldr	r3, [r2]
    2ab0:	cmp	r1, r3
    2ab4:	movne	r3, #0
    2ab8:	beq	2ae0 <pointer_list_remove_pointer@@Base+0x50>
    2abc:	add	r3, r3, #1
    2ac0:	cmp	r3, lr
    2ac4:	beq	2ae8 <pointer_list_remove_pointer@@Base+0x58>
    2ac8:	ldr	ip, [r2, #4]!
    2acc:	cmp	ip, r1
    2ad0:	bne	2abc <pointer_list_remove_pointer@@Base+0x2c>
    2ad4:	mov	r1, r3
    2ad8:	bl	ee4 <pointer_list_remove_at@plt>
    2adc:	pop	{r4, pc}
    2ae0:	mov	r3, #0
    2ae4:	b	2ad4 <pointer_list_remove_pointer@@Base+0x44>
    2ae8:	mov	r0, #0
    2aec:	pop	{r4, pc}
    2af0:	mov	r0, #0
    2af4:	bx	lr
    2af8:	mov	r0, #0
    2afc:	pop	{r4, pc}

00002b00 <pointer_list_remove_pointer_free@@Base>:
    2b00:	push	{r4, r5, r6, lr}
    2b04:	subs	r5, r0, #0
    2b08:	beq	2b6c <pointer_list_remove_pointer_free@@Base+0x6c>
    2b0c:	ldr	lr, [r5]
    2b10:	cmp	lr, #0
    2b14:	beq	2b74 <pointer_list_remove_pointer_free@@Base+0x74>
    2b18:	ldr	r3, [r5, #4]
    2b1c:	ldr	ip, [r3]
    2b20:	cmp	r1, ip
    2b24:	movne	r4, #0
    2b28:	beq	2b5c <pointer_list_remove_pointer_free@@Base+0x5c>
    2b2c:	add	r4, r4, #1
    2b30:	cmp	r4, lr
    2b34:	beq	2b64 <pointer_list_remove_pointer_free@@Base+0x64>
    2b38:	ldr	ip, [r3, #4]!
    2b3c:	cmp	ip, r1
    2b40:	bne	2b2c <pointer_list_remove_pointer_free@@Base+0x2c>
    2b44:	mov	r0, r1
    2b48:	blx	r2
    2b4c:	mov	r1, r4
    2b50:	mov	r0, r5
    2b54:	bl	ee4 <pointer_list_remove_at@plt>
    2b58:	pop	{r4, r5, r6, pc}
    2b5c:	mov	r4, #0
    2b60:	b	2b44 <pointer_list_remove_pointer_free@@Base+0x44>
    2b64:	mov	r0, #0
    2b68:	pop	{r4, r5, r6, pc}
    2b6c:	mov	r0, #0
    2b70:	pop	{r4, r5, r6, pc}
    2b74:	mov	r0, #0
    2b78:	pop	{r4, r5, r6, pc}

Disassembly of section .fini:

00002b7c <.fini>:
    2b7c:	push	{r3, lr}
    2b80:	pop	{r3, pc}
