
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #24, 20	; 0x18000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #24, 20	; 0x18000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <realloc@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #24, 20	; 0x18000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <malloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #24, 20	; 0x18000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <__libc_start_main@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #24, 20	; 0x18000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__gmon_start__@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #24, 20	; 0x18000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <bcmp@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #24, 20	; 0x18000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #24, 20	; 0x18000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #24, 20	; 0x18000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #24, 20	; 0x18000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #24, 20	; 0x18000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #24, 20	; 0x18000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #24, 20	; 0x18000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #24, 20	; 0x18000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	1273c <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	r8, r1, r8, lsl #17
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r8, r1, r8, lsr #16
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12748 <__gmon_start__@plt>
   1280c:	andeq	r8, r1, r0, lsl #16
   12810:	andeq	r0, r0, r4, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	fp, r2, r0, asr r0
   12838:	andeq	fp, r2, r0, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	fp, r2, r0, asr r0
   12870:	andeq	fp, r2, r0, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	fp, r2, r0, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	134b8 <flatcc_builder_init@@Base>
   128bc:	movw	r1, #34978	; 0x88a2
   128c0:	mov	r0, r4
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	movt	r1, #1
   128d0:	bl	13e84 <flatcc_builder_start_buffer@@Base>
   128d4:	cmp	r0, #0
   128d8:	bne	128e8 <main@@Base+0x44>
   128dc:	add	r0, sp, #4
   128e0:	mov	r1, #36	; 0x24
   128e4:	bl	14ee0 <flatcc_builder_start_table@@Base>
   128e8:	movw	r1, #34968	; 0x8898
   128ec:	add	r0, sp, #4
   128f0:	movt	r1, #1
   128f4:	bl	16aa4 <flatcc_builder_create_string_str@@Base>
   128f8:	cmp	r0, #0
   128fc:	beq	12918 <main@@Base+0x74>
   12900:	mov	r4, r0
   12904:	add	r0, sp, #4
   12908:	mov	r1, #3
   1290c:	bl	16000 <flatcc_builder_table_add_offset@@Base>
   12910:	cmp	r0, #0
   12914:	strne	r4, [r0]
   12918:	movw	r1, #35324	; 0x89fc
   1291c:	add	r0, sp, #4
   12920:	mov	r2, #1
   12924:	movt	r1, #1
   12928:	bl	157c0 <flatcc_builder_check_required@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12988 <main@@Base+0xe4>
   12934:	add	r4, sp, #4
   12938:	mov	r0, r4
   1293c:	bl	15840 <flatcc_builder_end_table@@Base>
   12940:	mov	r1, r0
   12944:	mov	r0, r4
   12948:	bl	14074 <flatcc_builder_end_buffer@@Base>
   1294c:	sub	r1, fp, #20
   12950:	mov	r0, r4
   12954:	bl	16d8c <flatcc_builder_get_direct_buffer@@Base>
   12958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1295c:	movw	r2, #34978	; 0x88a2
   12960:	movw	r3, #10664	; 0x29a8
   12964:	movt	r2, #1
   12968:	movt	r3, #1
   1296c:	bl	18020 <flatcc_verify_table_as_root@@Base>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	13658 <flatcc_builder_clear@@Base>
   1297c:	mov	r0, r5
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, r7, fp, pc}
   12988:	movw	r0, #34983	; 0x88a7
   1298c:	movw	r1, #35145	; 0x8949
   12990:	movw	r3, #35241	; 0x89a9
   12994:	movw	r2, #2398	; 0x95e
   12998:	movt	r0, #1
   1299c:	movt	r1, #1
   129a0:	movt	r3, #1
   129a4:	bl	127a8 <__assert_fail@plt>
   129a8:	push	{r4, r5, r6, r7, fp, lr}
   129ac:	add	fp, sp, #16
   129b0:	sub	sp, sp, #8
   129b4:	mov	r1, #0
   129b8:	mov	r2, #32
   129bc:	mov	r3, #16
   129c0:	mov	r4, r0
   129c4:	bl	175b4 <flatcc_verify_field@@Base>
   129c8:	cmp	r0, #0
   129cc:	bne	12dd4 <main@@Base+0x530>
   129d0:	mov	r0, r4
   129d4:	mov	r1, #2
   129d8:	mov	r2, #2
   129dc:	mov	r3, #2
   129e0:	bl	175b4 <flatcc_verify_field@@Base>
   129e4:	cmp	r0, #0
   129e8:	bne	12dd4 <main@@Base+0x530>
   129ec:	mov	r0, r4
   129f0:	mov	r1, #1
   129f4:	mov	r2, #2
   129f8:	mov	r3, #2
   129fc:	bl	175b4 <flatcc_verify_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	12dd4 <main@@Base+0x530>
   12a08:	mov	r0, r4
   12a0c:	mov	r1, #3
   12a10:	mov	r2, #1
   12a14:	bl	1762c <flatcc_verify_string_field@@Base>
   12a18:	cmp	r0, #0
   12a1c:	bne	12dd4 <main@@Base+0x530>
   12a20:	mov	r0, r4
   12a24:	mov	r1, #6
   12a28:	mov	r2, #1
   12a2c:	mov	r3, #1
   12a30:	mov	r5, #1
   12a34:	bl	175b4 <flatcc_verify_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12dd4 <main@@Base+0x530>
   12a40:	mvn	r0, #0
   12a44:	mov	r1, #5
   12a48:	mov	r2, #0
   12a4c:	mov	r3, #1
   12a50:	str	r5, [sp]
   12a54:	str	r0, [sp, #4]
   12a58:	mov	r0, r4
   12a5c:	bl	17738 <flatcc_verify_vector_field@@Base>
   12a60:	cmp	r0, #0
   12a64:	bne	12dd4 <main@@Base+0x530>
   12a68:	movw	r3, #10664	; 0x29a8
   12a6c:	mov	r0, r4
   12a70:	mov	r1, #11
   12a74:	mov	r2, #0
   12a78:	movt	r3, #1
   12a7c:	bl	17a14 <flatcc_verify_table_vector_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	12dd4 <main@@Base+0x530>
   12a88:	mov	r0, r4
   12a8c:	mov	r1, #10
   12a90:	mov	r2, #0
   12a94:	bl	177e0 <flatcc_verify_string_vector_field@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	12dd4 <main@@Base+0x530>
   12aa0:	mov	r0, r4
   12aa4:	mov	r1, #28
   12aa8:	mov	r2, #0
   12aac:	bl	177e0 <flatcc_verify_string_vector_field@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12dd4 <main@@Base+0x530>
   12ab8:	mvn	r0, #0
   12abc:	mov	r1, #1
   12ac0:	mov	r2, #0
   12ac4:	mov	r3, #1
   12ac8:	str	r1, [sp]
   12acc:	str	r0, [sp, #4]
   12ad0:	mov	r0, r4
   12ad4:	mov	r1, #24
   12ad8:	bl	17738 <flatcc_verify_vector_field@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	12dd4 <main@@Base+0x530>
   12ae4:	mvn	r0, #-536870912	; 0xe0000000
   12ae8:	mov	r1, #4
   12aec:	mov	r2, #0
   12af0:	mov	r3, #8
   12af4:	str	r1, [sp]
   12af8:	str	r0, [sp, #4]
   12afc:	mov	r0, r4
   12b00:	mov	r1, #29
   12b04:	bl	17738 <flatcc_verify_vector_field@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12dd4 <main@@Base+0x530>
   12b10:	movw	r5, #10664	; 0x29a8
   12b14:	mov	r0, r4
   12b18:	mov	r1, #12
   12b1c:	mov	r2, #0
   12b20:	movt	r5, #1
   12b24:	mov	r3, r5
   12b28:	bl	17914 <flatcc_verify_table_field@@Base>
   12b2c:	cmp	r0, #0
   12b30:	bne	12dd4 <main@@Base+0x530>
   12b34:	movw	r3, #11772	; 0x2dfc
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #8
   12b40:	mov	r2, #0
   12b44:	movt	r3, #1
   12b48:	bl	18498 <flatcc_verify_union_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12dd4 <main@@Base+0x530>
   12b54:	mvn	r6, #-1073741824	; 0xc0000000
   12b58:	mov	r7, #2
   12b5c:	mov	r0, r4
   12b60:	mov	r1, #9
   12b64:	mov	r2, #0
   12b68:	mov	r3, #4
   12b6c:	str	r7, [sp]
   12b70:	str	r6, [sp, #4]
   12b74:	bl	17738 <flatcc_verify_vector_field@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12dd4 <main@@Base+0x530>
   12b80:	mov	r0, r4
   12b84:	mov	r1, #31
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #4
   12b90:	str	r7, [sp]
   12b94:	str	r6, [sp, #4]
   12b98:	bl	17738 <flatcc_verify_vector_field@@Base>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12dd4 <main@@Base+0x530>
   12ba4:	mov	r0, #1
   12ba8:	mov	r1, #13
   12bac:	mov	r2, #0
   12bb0:	mov	r3, #0
   12bb4:	stm	sp, {r0, r5}
   12bb8:	mov	r0, r4
   12bbc:	bl	182e8 <flatcc_verify_table_as_nested_root@@Base>
   12bc0:	cmp	r0, #0
   12bc4:	bne	12dd4 <main@@Base+0x530>
   12bc8:	movw	r3, #11816	; 0x2e28
   12bcc:	mov	r0, r4
   12bd0:	mov	r1, #14
   12bd4:	mov	r2, #0
   12bd8:	movt	r3, #1
   12bdc:	bl	17914 <flatcc_verify_table_field@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12dd4 <main@@Base+0x530>
   12be8:	mov	r0, r4
   12bec:	mov	r1, #15
   12bf0:	mov	r2, #1
   12bf4:	mov	r3, #1
   12bf8:	bl	175b4 <flatcc_verify_field@@Base>
   12bfc:	cmp	r0, #0
   12c00:	bne	12dd4 <main@@Base+0x530>
   12c04:	mov	r0, r4
   12c08:	mov	r1, #16
   12c0c:	mov	r2, #4
   12c10:	mov	r3, #4
   12c14:	bl	175b4 <flatcc_verify_field@@Base>
   12c18:	cmp	r0, #0
   12c1c:	bne	12dd4 <main@@Base+0x530>
   12c20:	mov	r0, r4
   12c24:	mov	r1, #17
   12c28:	mov	r2, #4
   12c2c:	mov	r3, #4
   12c30:	bl	175b4 <flatcc_verify_field@@Base>
   12c34:	cmp	r0, #0
   12c38:	bne	12dd4 <main@@Base+0x530>
   12c3c:	mov	r0, r4
   12c40:	mov	r1, #18
   12c44:	mov	r2, #8
   12c48:	mov	r3, #8
   12c4c:	bl	175b4 <flatcc_verify_field@@Base>
   12c50:	cmp	r0, #0
   12c54:	bne	12dd4 <main@@Base+0x530>
   12c58:	mov	r0, r4
   12c5c:	mov	r1, #19
   12c60:	mov	r2, #8
   12c64:	mov	r3, #8
   12c68:	bl	175b4 <flatcc_verify_field@@Base>
   12c6c:	cmp	r0, #0
   12c70:	bne	12dd4 <main@@Base+0x530>
   12c74:	mov	r0, r4
   12c78:	mov	r1, #20
   12c7c:	mov	r2, #4
   12c80:	mov	r3, #4
   12c84:	bl	175b4 <flatcc_verify_field@@Base>
   12c88:	cmp	r0, #0
   12c8c:	bne	12dd4 <main@@Base+0x530>
   12c90:	mov	r0, r4
   12c94:	mov	r1, #21
   12c98:	mov	r2, #4
   12c9c:	mov	r3, #4
   12ca0:	bl	175b4 <flatcc_verify_field@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	bne	12dd4 <main@@Base+0x530>
   12cac:	mov	r0, r4
   12cb0:	mov	r1, #22
   12cb4:	mov	r2, #8
   12cb8:	mov	r3, #8
   12cbc:	bl	175b4 <flatcc_verify_field@@Base>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12dd4 <main@@Base+0x530>
   12cc8:	mov	r0, r4
   12ccc:	mov	r1, #23
   12cd0:	mov	r2, #8
   12cd4:	mov	r3, #8
   12cd8:	bl	175b4 <flatcc_verify_field@@Base>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12dd4 <main@@Base+0x530>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #25
   12cec:	mov	r2, #4
   12cf0:	mov	r3, #4
   12cf4:	bl	175b4 <flatcc_verify_field@@Base>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12dd4 <main@@Base+0x530>
   12d00:	mov	r0, r4
   12d04:	mov	r1, #26
   12d08:	mov	r2, #4
   12d0c:	mov	r3, #4
   12d10:	bl	175b4 <flatcc_verify_field@@Base>
   12d14:	cmp	r0, #0
   12d18:	bne	12dd4 <main@@Base+0x530>
   12d1c:	mov	r0, r4
   12d20:	mov	r1, #27
   12d24:	mov	r2, #4
   12d28:	mov	r3, #4
   12d2c:	bl	175b4 <flatcc_verify_field@@Base>
   12d30:	cmp	r0, #0
   12d34:	bne	12dd4 <main@@Base+0x530>
   12d38:	mvn	r0, #0
   12d3c:	mov	r1, #1
   12d40:	mov	r2, #0
   12d44:	mov	r3, #1
   12d48:	str	r1, [sp]
   12d4c:	str	r0, [sp, #4]
   12d50:	mov	r0, r4
   12d54:	mov	r1, #30
   12d58:	bl	17738 <flatcc_verify_vector_field@@Base>
   12d5c:	cmp	r0, #0
   12d60:	bne	12dd4 <main@@Base+0x530>
   12d64:	mvn	r5, #-536870912	; 0xe0000000
   12d68:	mov	r6, #8
   12d6c:	mov	r0, r4
   12d70:	mov	r1, #32
   12d74:	mov	r2, #0
   12d78:	mov	r3, #8
   12d7c:	str	r6, [sp]
   12d80:	str	r5, [sp, #4]
   12d84:	bl	17738 <flatcc_verify_vector_field@@Base>
   12d88:	cmp	r0, #0
   12d8c:	bne	12dd4 <main@@Base+0x530>
   12d90:	mov	r0, r4
   12d94:	mov	r1, #33	; 0x21
   12d98:	mov	r2, #0
   12d9c:	mov	r3, #8
   12da0:	str	r6, [sp]
   12da4:	str	r5, [sp, #4]
   12da8:	bl	17738 <flatcc_verify_vector_field@@Base>
   12dac:	cmp	r0, #0
   12db0:	bne	12dd4 <main@@Base+0x530>
   12db4:	movw	r3, #11904	; 0x2e80
   12db8:	mov	r0, r4
   12dbc:	mov	r1, #34	; 0x22
   12dc0:	mov	r2, #0
   12dc4:	movt	r3, #1
   12dc8:	bl	17914 <flatcc_verify_table_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12ddc <main@@Base+0x538>
   12dd4:	sub	sp, fp, #16
   12dd8:	pop	{r4, r5, r6, r7, fp, pc}
   12ddc:	movw	r3, #11912	; 0x2e88
   12de0:	mov	r0, r4
   12de4:	mov	r1, #35	; 0x23
   12de8:	mov	r2, #0
   12dec:	movt	r3, #1
   12df0:	sub	sp, fp, #16
   12df4:	pop	{r4, r5, r6, r7, fp, lr}
   12df8:	b	17914 <flatcc_verify_table_field@@Base>
   12dfc:	ldrb	r1, [r0, #12]
   12e00:	sub	r1, r1, #1
   12e04:	uxtb	r2, r1
   12e08:	cmp	r2, #3
   12e0c:	movhi	r0, #0
   12e10:	bxhi	lr
   12e14:	movw	r2, #35328	; 0x8a00
   12e18:	sxtb	r1, r1
   12e1c:	movt	r2, #1
   12e20:	ldr	r1, [r2, r1, lsl #2]
   12e24:	b	17cac <flatcc_verify_union_table@@Base>
   12e28:	push	{r4, sl, fp, lr}
   12e2c:	add	fp, sp, #8
   12e30:	mov	r1, #0
   12e34:	mov	r2, #0
   12e38:	mov	r4, r0
   12e3c:	bl	1762c <flatcc_verify_string_field@@Base>
   12e40:	cmp	r0, #0
   12e44:	popne	{r4, sl, fp, pc}
   12e48:	mov	r0, r4
   12e4c:	mov	r1, #1
   12e50:	mov	r2, #8
   12e54:	mov	r3, #8
   12e58:	bl	175b4 <flatcc_verify_field@@Base>
   12e5c:	cmp	r0, #0
   12e60:	beq	12e68 <main@@Base+0x5c4>
   12e64:	pop	{r4, sl, fp, pc}
   12e68:	mov	r0, r4
   12e6c:	mov	r1, #2
   12e70:	mov	r2, #2
   12e74:	mov	r3, #2
   12e78:	pop	{r4, sl, fp, lr}
   12e7c:	b	175b4 <flatcc_verify_field@@Base>
   12e80:	mov	r0, #0
   12e84:	bx	lr
   12e88:	push	{r4, r5, r6, sl, fp, lr}
   12e8c:	add	fp, sp, #16
   12e90:	sub	sp, sp, #8
   12e94:	mvn	r5, #0
   12e98:	mov	r6, #1
   12e9c:	mov	r1, #0
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, #1
   12ea8:	mov	r4, r0
   12eac:	str	r6, [sp]
   12eb0:	str	r5, [sp, #4]
   12eb4:	bl	17738 <flatcc_verify_vector_field@@Base>
   12eb8:	cmp	r0, #0
   12ebc:	bne	12f0c <main@@Base+0x668>
   12ec0:	mov	r0, r4
   12ec4:	mov	r1, #1
   12ec8:	mov	r2, #0
   12ecc:	mov	r3, #1
   12ed0:	str	r6, [sp]
   12ed4:	str	r5, [sp, #4]
   12ed8:	bl	17738 <flatcc_verify_vector_field@@Base>
   12edc:	cmp	r0, #0
   12ee0:	bne	12f0c <main@@Base+0x668>
   12ee4:	movw	r0, #10664	; 0x29a8
   12ee8:	mov	r1, #1
   12eec:	mov	r2, #0
   12ef0:	mov	r3, #0
   12ef4:	movt	r0, #1
   12ef8:	str	r1, [sp]
   12efc:	mov	r1, #2
   12f00:	str	r0, [sp, #4]
   12f04:	mov	r0, r4
   12f08:	bl	182e8 <flatcc_verify_table_as_nested_root@@Base>
   12f0c:	sub	sp, fp, #16
   12f10:	pop	{r4, r5, r6, sl, fp, pc}
   12f14:	push	{r4, sl, fp, lr}
   12f18:	add	fp, sp, #8
   12f1c:	mov	r1, #0
   12f20:	mov	r2, #1
   12f24:	mov	r3, #1
   12f28:	mov	r4, r0
   12f2c:	bl	175b4 <flatcc_verify_field@@Base>
   12f30:	cmp	r0, #0
   12f34:	bne	12f70 <main@@Base+0x6cc>
   12f38:	mov	r0, r4
   12f3c:	mov	r1, #1
   12f40:	mov	r2, #1
   12f44:	mov	r3, #1
   12f48:	bl	175b4 <flatcc_verify_field@@Base>
   12f4c:	cmp	r0, #0
   12f50:	popne	{r4, sl, fp, pc}
   12f54:	mov	r0, r4
   12f58:	mov	r1, #2
   12f5c:	mov	r2, #1
   12f60:	mov	r3, #1
   12f64:	bl	175b4 <flatcc_verify_field@@Base>
   12f68:	cmp	r0, #0
   12f6c:	beq	12f74 <main@@Base+0x6d0>
   12f70:	pop	{r4, sl, fp, pc}
   12f74:	mov	r0, r4
   12f78:	mov	r1, #3
   12f7c:	mov	r2, #1
   12f80:	mov	r3, #1
   12f84:	pop	{r4, sl, fp, lr}
   12f88:	b	175b4 <flatcc_verify_field@@Base>
   12f8c:	mov	r0, #0
   12f90:	bx	lr
   12f94:	push	{r4, sl, fp, lr}
   12f98:	add	fp, sp, #8
   12f9c:	movw	r3, #12284	; 0x2ffc
   12fa0:	mov	r1, #0
   12fa4:	mov	r2, #0
   12fa8:	mov	r4, r0
   12fac:	movt	r3, #1
   12fb0:	bl	17914 <flatcc_verify_table_field@@Base>
   12fb4:	cmp	r0, #0
   12fb8:	popne	{r4, sl, fp, pc}
   12fbc:	movw	r3, #12388	; 0x3064
   12fc0:	mov	r0, r4
   12fc4:	mov	r1, #1
   12fc8:	mov	r2, #0
   12fcc:	movt	r3, #1
   12fd0:	bl	17914 <flatcc_verify_table_field@@Base>
   12fd4:	cmp	r0, #0
   12fd8:	beq	12fe0 <main@@Base+0x73c>
   12fdc:	pop	{r4, sl, fp, pc}
   12fe0:	movw	r3, #11772	; 0x2dfc
   12fe4:	mov	r0, r4
   12fe8:	mov	r1, #3
   12fec:	mov	r2, #0
   12ff0:	movt	r3, #1
   12ff4:	pop	{r4, sl, fp, lr}
   12ff8:	b	185c4 <flatcc_verify_union_vector_field@@Base>
   12ffc:	push	{r4, sl, fp, lr}
   13000:	add	fp, sp, #8
   13004:	movw	r3, #12556	; 0x310c
   13008:	mov	r1, #0
   1300c:	mov	r2, #0
   13010:	mov	r4, r0
   13014:	movt	r3, #1
   13018:	bl	17914 <flatcc_verify_table_field@@Base>
   1301c:	cmp	r0, #0
   13020:	popne	{r4, sl, fp, pc}
   13024:	movw	r3, #12804	; 0x3204
   13028:	mov	r0, r4
   1302c:	mov	r1, #1
   13030:	mov	r2, #0
   13034:	movt	r3, #1
   13038:	bl	17914 <flatcc_verify_table_field@@Base>
   1303c:	cmp	r0, #0
   13040:	beq	13048 <main@@Base+0x7a4>
   13044:	pop	{r4, sl, fp, pc}
   13048:	movw	r3, #12864	; 0x3240
   1304c:	mov	r0, r4
   13050:	mov	r1, #2
   13054:	mov	r2, #0
   13058:	movt	r3, #1
   1305c:	pop	{r4, sl, fp, lr}
   13060:	b	17914 <flatcc_verify_table_field@@Base>
   13064:	push	{r4, sl, fp, lr}
   13068:	add	fp, sp, #8
   1306c:	movw	r3, #12924	; 0x327c
   13070:	mov	r1, #1
   13074:	mov	r2, #0
   13078:	mov	r4, r0
   1307c:	movt	r3, #1
   13080:	bl	18498 <flatcc_verify_union_field@@Base>
   13084:	cmp	r0, #0
   13088:	bne	130ec <main@@Base+0x848>
   1308c:	movw	r3, #12924	; 0x327c
   13090:	mov	r0, r4
   13094:	mov	r1, #3
   13098:	mov	r2, #0
   1309c:	movt	r3, #1
   130a0:	bl	18498 <flatcc_verify_union_field@@Base>
   130a4:	cmp	r0, #0
   130a8:	bne	130ec <main@@Base+0x848>
   130ac:	movw	r3, #12924	; 0x327c
   130b0:	mov	r0, r4
   130b4:	mov	r1, #5
   130b8:	mov	r2, #0
   130bc:	movt	r3, #1
   130c0:	bl	18498 <flatcc_verify_union_field@@Base>
   130c4:	cmp	r0, #0
   130c8:	popne	{r4, sl, fp, pc}
   130cc:	movw	r3, #12924	; 0x327c
   130d0:	mov	r0, r4
   130d4:	mov	r1, #7
   130d8:	mov	r2, #0
   130dc:	movt	r3, #1
   130e0:	bl	18498 <flatcc_verify_union_field@@Base>
   130e4:	cmp	r0, #0
   130e8:	beq	130f0 <main@@Base+0x84c>
   130ec:	pop	{r4, sl, fp, pc}
   130f0:	movw	r3, #12924	; 0x327c
   130f4:	mov	r0, r4
   130f8:	mov	r1, #9
   130fc:	mov	r2, #0
   13100:	movt	r3, #1
   13104:	pop	{r4, sl, fp, lr}
   13108:	b	185c4 <flatcc_verify_union_vector_field@@Base>
   1310c:	push	{r4, sl, fp, lr}
   13110:	add	fp, sp, #8
   13114:	mov	r1, #0
   13118:	mov	r2, #0
   1311c:	mov	r4, r0
   13120:	bl	1762c <flatcc_verify_string_field@@Base>
   13124:	cmp	r0, #0
   13128:	bne	131e8 <main@@Base+0x944>
   1312c:	mov	r0, r4
   13130:	mov	r1, #1
   13134:	mov	r2, #4
   13138:	mov	r3, #4
   1313c:	bl	175b4 <flatcc_verify_field@@Base>
   13140:	cmp	r0, #0
   13144:	bne	131e8 <main@@Base+0x944>
   13148:	mov	r0, r4
   1314c:	mov	r1, #2
   13150:	mov	r2, #0
   13154:	bl	1762c <flatcc_verify_string_field@@Base>
   13158:	cmp	r0, #0
   1315c:	bne	131e8 <main@@Base+0x944>
   13160:	mov	r0, r4
   13164:	mov	r1, #3
   13168:	mov	r2, #8
   1316c:	mov	r3, #8
   13170:	bl	175b4 <flatcc_verify_field@@Base>
   13174:	cmp	r0, #0
   13178:	bne	131e8 <main@@Base+0x944>
   1317c:	mov	r0, r4
   13180:	mov	r1, #4
   13184:	mov	r2, #0
   13188:	bl	1762c <flatcc_verify_string_field@@Base>
   1318c:	cmp	r0, #0
   13190:	bne	131e8 <main@@Base+0x944>
   13194:	mov	r0, r4
   13198:	mov	r1, #5
   1319c:	mov	r2, #8
   131a0:	mov	r3, #8
   131a4:	bl	175b4 <flatcc_verify_field@@Base>
   131a8:	cmp	r0, #0
   131ac:	bne	131e8 <main@@Base+0x944>
   131b0:	mov	r0, r4
   131b4:	mov	r1, #6
   131b8:	mov	r2, #4
   131bc:	mov	r3, #4
   131c0:	bl	175b4 <flatcc_verify_field@@Base>
   131c4:	cmp	r0, #0
   131c8:	popne	{r4, sl, fp, pc}
   131cc:	mov	r0, r4
   131d0:	mov	r1, #7
   131d4:	mov	r2, #8
   131d8:	mov	r3, #8
   131dc:	bl	175b4 <flatcc_verify_field@@Base>
   131e0:	cmp	r0, #0
   131e4:	beq	131ec <main@@Base+0x948>
   131e8:	pop	{r4, sl, fp, pc}
   131ec:	mov	r0, r4
   131f0:	mov	r1, #8
   131f4:	mov	r2, #4
   131f8:	mov	r3, #4
   131fc:	pop	{r4, sl, fp, lr}
   13200:	b	175b4 <flatcc_verify_field@@Base>
   13204:	push	{r4, sl, fp, lr}
   13208:	add	fp, sp, #8
   1320c:	mov	r1, #0
   13210:	mov	r2, #8
   13214:	mov	r3, #8
   13218:	mov	r4, r0
   1321c:	bl	175b4 <flatcc_verify_field@@Base>
   13220:	cmp	r0, #0
   13224:	popne	{r4, sl, fp, pc}
   13228:	mov	r0, r4
   1322c:	mov	r1, #1
   13230:	mov	r2, #4
   13234:	mov	r3, #4
   13238:	pop	{r4, sl, fp, lr}
   1323c:	b	175b4 <flatcc_verify_field@@Base>
   13240:	push	{r4, sl, fp, lr}
   13244:	add	fp, sp, #8
   13248:	mov	r1, #0
   1324c:	mov	r2, #8
   13250:	mov	r3, #8
   13254:	mov	r4, r0
   13258:	bl	175b4 <flatcc_verify_field@@Base>
   1325c:	cmp	r0, #0
   13260:	popne	{r4, sl, fp, pc}
   13264:	mov	r0, r4
   13268:	mov	r1, #1
   1326c:	mov	r2, #4
   13270:	mov	r3, #4
   13274:	pop	{r4, sl, fp, lr}
   13278:	b	175b4 <flatcc_verify_field@@Base>
   1327c:	ldrb	r2, [r0, #12]
   13280:	sub	r1, r2, #2
   13284:	cmp	r1, #9
   13288:	bhi	132c8 <main@@Base+0xa24>
   1328c:	add	r2, pc, #0
   13290:	ldr	pc, [r2, r1, lsl #2]
   13294:	ldrdeq	r3, [r1], -ip
   13298:	ldrdeq	r3, [r1], -r4
   1329c:	ldrdeq	r3, [r1], -r4
   132a0:	ldrdeq	r3, [r1], -r4
   132a4:	ldrdeq	r3, [r1], -r4
   132a8:	ldrdeq	r3, [r1], -r4
   132ac:	andeq	r3, r1, r8, ror #5
   132b0:			; <UNDEFINED> instruction: 0x000132bc
   132b4:			; <UNDEFINED> instruction: 0x000132bc
   132b8:	ldrdeq	r3, [r1], -r0
   132bc:	mov	r1, #4
   132c0:	mov	r2, #4
   132c4:	b	17d94 <flatcc_verify_union_struct@@Base>
   132c8:	cmp	r2, #255	; 0xff
   132cc:	bne	132d4 <main@@Base+0xa30>
   132d0:	b	17dec <flatcc_verify_union_string@@Base>
   132d4:	mov	r0, #0
   132d8:	bx	lr
   132dc:	movw	r1, #13044	; 0x32f4
   132e0:	movt	r1, #1
   132e4:	b	17cac <flatcc_verify_union_table@@Base>
   132e8:	mov	r1, #2
   132ec:	mov	r2, #2
   132f0:	b	17d94 <flatcc_verify_union_struct@@Base>
   132f4:	mov	r1, #0
   132f8:	mov	r2, #4
   132fc:	mov	r3, #4
   13300:	b	175b4 <flatcc_verify_field@@Base>

00013304 <flatcc_builder_default_alloc@@Base>:
   13304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13308:	add	fp, sp, #24
   1330c:	mov	r4, r1
   13310:	cmp	r2, #0
   13314:	beq	1335c <flatcc_builder_default_alloc@@Base+0x58>
   13318:	ldr	r0, [fp, #8]
   1331c:	mov	r8, r3
   13320:	sub	r1, r0, #1
   13324:	cmp	r1, #6
   13328:	bhi	13384 <flatcc_builder_default_alloc@@Base+0x80>
   1332c:	add	r3, pc, #4
   13330:	mov	r0, #256	; 0x100
   13334:	ldr	pc, [r3, r1, lsl #2]
   13338:	muleq	r1, r8, r3
   1333c:	andeq	r3, r1, r4, lsl #7
   13340:	andeq	r3, r1, r4, lsl #7
   13344:	andeq	r3, r1, r4, asr r3
   13348:	andeq	r3, r1, ip, lsl #7
   1334c:	andeq	r3, r1, r4, lsl #7
   13350:	muleq	r1, r4, r3
   13354:	mov	r0, #288	; 0x120
   13358:	b	13398 <flatcc_builder_default_alloc@@Base+0x94>
   1335c:	ldr	r0, [r4]
   13360:	cmp	r0, #0
   13364:	beq	1337c <flatcc_builder_default_alloc@@Base+0x78>
   13368:	bl	1270c <free@plt>
   1336c:	mov	r6, #0
   13370:	str	r6, [r4]
   13374:	str	r6, [r4, #4]
   13378:	b	13408 <flatcc_builder_default_alloc@@Base+0x104>
   1337c:	mov	r6, #0
   13380:	b	13408 <flatcc_builder_default_alloc@@Base+0x104>
   13384:	mov	r0, #32
   13388:	b	13398 <flatcc_builder_default_alloc@@Base+0x94>
   1338c:	mov	r0, r2
   13390:	b	13398 <flatcc_builder_default_alloc@@Base+0x94>
   13394:	mov	r0, #64	; 0x40
   13398:	mov	r7, r0
   1339c:	lsl	r0, r0, #1
   133a0:	cmp	r7, r2
   133a4:	bcc	13398 <flatcc_builder_default_alloc@@Base+0x94>
   133a8:	ldr	r0, [r4, #4]
   133ac:	mov	r6, #0
   133b0:	cmp	r0, r2
   133b4:	lsrcs	r0, r0, #1
   133b8:	cmpcs	r0, r7
   133bc:	bcs	13408 <flatcc_builder_default_alloc@@Base+0x104>
   133c0:	ldr	r0, [r4]
   133c4:	mov	r1, r7
   133c8:	bl	12724 <realloc@plt>
   133cc:	cmp	r0, #0
   133d0:	beq	13404 <flatcc_builder_default_alloc@@Base+0x100>
   133d4:	mov	r5, r0
   133d8:	cmp	r8, #0
   133dc:	beq	133fc <flatcc_builder_default_alloc@@Base+0xf8>
   133e0:	ldr	r1, [r4, #4]
   133e4:	cmp	r7, r1
   133e8:	bls	133fc <flatcc_builder_default_alloc@@Base+0xf8>
   133ec:	add	r0, r5, r1
   133f0:	sub	r2, r7, r1
   133f4:	mov	r1, #0
   133f8:	bl	12778 <memset@plt>
   133fc:	stm	r4, {r5, r7}
   13400:	b	13408 <flatcc_builder_default_alloc@@Base+0x104>
   13404:	mvn	r6, #0
   13408:	mov	r0, r6
   1340c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013410 <flatcc_builder_flush_vtable_cache@@Base>:
   13410:	push	{r4, r5, fp, lr}
   13414:	add	fp, sp, #8
   13418:	mov	r4, r0
   1341c:	ldr	r0, [r0, #116]	; 0x74
   13420:	cmp	r0, #0
   13424:	popeq	{r4, r5, fp, pc}
   13428:	ldr	r0, [r4, #92]	; 0x5c
   1342c:	ldr	r2, [r4, #96]	; 0x60
   13430:	mov	r1, #0
   13434:	mov	r5, #0
   13438:	bl	12778 <memset@plt>
   1343c:	mov	r0, #16
   13440:	str	r5, [r4, #120]	; 0x78
   13444:	str	r0, [r4, #124]	; 0x7c
   13448:	pop	{r4, r5, fp, pc}

0001344c <flatcc_builder_custom_init@@Base>:
   1344c:	push	{r4, r5, r6, r7, fp, lr}
   13450:	add	fp, sp, #16
   13454:	mov	r6, r2
   13458:	mov	r7, r1
   1345c:	mov	r1, #0
   13460:	mov	r2, #232	; 0xe8
   13464:	mov	r5, r3
   13468:	mov	r4, r0
   1346c:	bl	12778 <memset@plt>
   13470:	ldr	r0, [fp, #8]
   13474:	cmp	r7, #0
   13478:	bne	13490 <flatcc_builder_custom_init@@Base+0x44>
   1347c:	movw	r7, #29112	; 0x71b8
   13480:	mov	r1, #1
   13484:	add	r6, r4, #188	; 0xbc
   13488:	movt	r7, #1
   1348c:	str	r1, [r4, #184]	; 0xb8
   13490:	movw	r1, #13060	; 0x3304
   13494:	cmp	r5, #0
   13498:	str	r6, [r4, #36]	; 0x24
   1349c:	str	r0, [r4, #40]	; 0x28
   134a0:	mov	r0, #0
   134a4:	str	r7, [r4, #44]	; 0x2c
   134a8:	movt	r1, #1
   134ac:	movne	r1, r5
   134b0:	str	r1, [r4, #48]	; 0x30
   134b4:	pop	{r4, r5, r6, r7, fp, pc}

000134b8 <flatcc_builder_init@@Base>:
   134b8:	push	{r4, r5, fp, lr}
   134bc:	add	fp, sp, #8
   134c0:	mov	r1, #0
   134c4:	mov	r2, #232	; 0xe8
   134c8:	mov	r4, r0
   134cc:	mov	r5, #0
   134d0:	bl	12778 <memset@plt>
   134d4:	mov	r0, #1
   134d8:	movw	r1, #29112	; 0x71b8
   134dc:	add	r2, r4, #188	; 0xbc
   134e0:	str	r0, [r4, #184]	; 0xb8
   134e4:	movw	r0, #13060	; 0x3304
   134e8:	movt	r1, #1
   134ec:	str	r2, [r4, #36]	; 0x24
   134f0:	str	r5, [r4, #40]	; 0x28
   134f4:	movt	r0, #1
   134f8:	str	r1, [r4, #44]	; 0x2c
   134fc:	str	r0, [r4, #48]	; 0x30
   13500:	mov	r0, #0
   13504:	pop	{r4, r5, fp, pc}

00013508 <flatcc_builder_custom_reset@@Base>:
   13508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1350c:	add	fp, sp, #28
   13510:	sub	sp, sp, #4
   13514:	mov	r9, r2
   13518:	mov	r8, r1
   1351c:	mov	sl, r0
   13520:	add	r7, r0, #52	; 0x34
   13524:	mov	r5, #0
   13528:	add	r6, sl, r5, lsl #3
   1352c:	ldr	r0, [r6, #52]	; 0x34
   13530:	cmp	r0, #0
   13534:	beq	1357c <flatcc_builder_custom_reset@@Base+0x74>
   13538:	cmp	r9, #0
   1353c:	cmpne	r5, #5
   13540:	beq	1356c <flatcc_builder_custom_reset@@Base+0x64>
   13544:	ldr	r0, [sl, #40]	; 0x28
   13548:	ldr	r4, [sl, #48]	; 0x30
   1354c:	mov	r1, r7
   13550:	mov	r2, #1
   13554:	mov	r3, #1
   13558:	str	r5, [sp]
   1355c:	blx	r4
   13560:	cmp	r0, #0
   13564:	bne	1361c <flatcc_builder_custom_reset@@Base+0x114>
   13568:	ldr	r0, [r6, #52]	; 0x34
   1356c:	ldr	r2, [r6, #56]	; 0x38
   13570:	mov	r1, #0
   13574:	bl	12778 <memset@plt>
   13578:	b	13588 <flatcc_builder_custom_reset@@Base+0x80>
   1357c:	ldr	r0, [r6, #56]	; 0x38
   13580:	cmp	r0, #0
   13584:	bne	1362c <flatcc_builder_custom_reset@@Base+0x124>
   13588:	add	r5, r5, #1
   1358c:	add	r7, r7, #8
   13590:	cmp	r5, #8
   13594:	bne	13528 <flatcc_builder_custom_reset@@Base+0x20>
   13598:	mov	r0, #0
   1359c:	vmov.i32	q8, #0	; 0x00000000
   135a0:	mov	r5, #0
   135a4:	str	r0, [sl, #120]	; 0x78
   135a8:	ldr	r1, [sl, #124]	; 0x7c
   135ac:	cmp	r1, #0
   135b0:	movne	r1, #16
   135b4:	strne	r1, [sl, #124]	; 0x7c
   135b8:	add	r1, sl, #148	; 0x94
   135bc:	str	r0, [sl, #136]	; 0x88
   135c0:	str	r0, [sl, #140]	; 0x8c
   135c4:	strh	r0, [sl, #128]	; 0x80
   135c8:	str	r0, [sl, #32]
   135cc:	cmp	r8, #0
   135d0:	vst1.32	{d16-d17}, [r1]
   135d4:	ldr	r2, [sl, #60]	; 0x3c
   135d8:	ldr	r1, [sl, #52]	; 0x34
   135dc:	ldr	r3, [sl, #76]	; 0x4c
   135e0:	str	r2, [sl, #16]
   135e4:	str	r0, [sl, #20]
   135e8:	str	r0, [sl, #24]
   135ec:	movne	r0, #0
   135f0:	str	r3, [sl]
   135f4:	str	r1, [sl, #4]
   135f8:	strne	r0, [sl, #172]	; 0xac
   135fc:	strne	r0, [sl, #176]	; 0xb0
   13600:	strne	r0, [sl, #180]	; 0xb4
   13604:	ldr	r0, [sl, #184]	; 0xb8
   13608:	cmp	r0, #0
   1360c:	beq	13620 <flatcc_builder_custom_reset@@Base+0x118>
   13610:	add	r0, sl, #188	; 0xbc
   13614:	bl	17088 <flatcc_emitter_reset@@Base>
   13618:	b	13620 <flatcc_builder_custom_reset@@Base+0x118>
   1361c:	mvn	r5, #0
   13620:	mov	r0, r5
   13624:	sub	sp, fp, #28
   13628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1362c:	movw	r0, #35856	; 0x8c10
   13630:	movw	r1, #35874	; 0x8c22
   13634:	movw	r3, #35944	; 0x8c68
   13638:	movw	r2, #434	; 0x1b2
   1363c:	movt	r0, #1
   13640:	movt	r1, #1
   13644:	movt	r3, #1
   13648:	bl	127a8 <__assert_fail@plt>

0001364c <flatcc_builder_reset@@Base>:
   1364c:	mov	r1, #0
   13650:	mov	r2, #0
   13654:	b	13508 <flatcc_builder_custom_reset@@Base>

00013658 <flatcc_builder_clear@@Base>:
   13658:	push	{r4, r5, r6, r7, fp, lr}
   1365c:	add	fp, sp, #16
   13660:	sub	sp, sp, #8
   13664:	mov	r7, r0
   13668:	add	r5, r0, #52	; 0x34
   1366c:	mov	r6, #0
   13670:	ldr	r0, [r7, #40]	; 0x28
   13674:	ldr	r4, [r7, #48]	; 0x30
   13678:	mov	r1, r5
   1367c:	mov	r2, #0
   13680:	mov	r3, #0
   13684:	str	r6, [sp]
   13688:	blx	r4
   1368c:	add	r6, r6, #1
   13690:	add	r5, r5, #8
   13694:	cmp	r6, #8
   13698:	bne	13670 <flatcc_builder_clear@@Base+0x18>
   1369c:	ldr	r0, [r7, #184]	; 0xb8
   136a0:	cmp	r0, #0
   136a4:	beq	136b0 <flatcc_builder_clear@@Base+0x58>
   136a8:	add	r0, r7, #188	; 0xbc
   136ac:	bl	17154 <flatcc_emitter_clear@@Base>
   136b0:	mov	r0, r7
   136b4:	mov	r1, #0
   136b8:	mov	r2, #232	; 0xe8
   136bc:	sub	sp, fp, #16
   136c0:	pop	{r4, r5, r6, r7, fp, lr}
   136c4:	b	12778 <memset@plt>

000136c8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   136c8:	push	{r4, r5, r6, r7, fp, lr}
   136cc:	add	fp, sp, #16
   136d0:	sub	sp, sp, #8
   136d4:	mov	r4, r0
   136d8:	ldr	r0, [r0, #112]	; 0x70
   136dc:	add	r1, r1, #7
   136e0:	ldr	r7, [r4, #228]	; 0xe4
   136e4:	bic	r5, r1, #3
   136e8:	add	r6, r4, #108	; 0x6c
   136ec:	add	r2, r7, r5
   136f0:	cmp	r2, r0
   136f4:	bls	1371c <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   136f8:	ldr	r0, [r4, #40]	; 0x28
   136fc:	ldr	ip, [r4, #48]	; 0x30
   13700:	mov	r1, #7
   13704:	mov	r3, #0
   13708:	str	r1, [sp]
   1370c:	mov	r1, r6
   13710:	blx	ip
   13714:	cmp	r0, #0
   13718:	bne	13768 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   1371c:	ldr	r0, [r6]
   13720:	adds	r6, r0, r7
   13724:	beq	13758 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13728:	mov	r0, r6
   1372c:	mov	r1, #0
   13730:	mov	r2, r5
   13734:	bl	12778 <memset@plt>
   13738:	ldr	r0, [r4, #224]	; 0xe0
   1373c:	str	r0, [r6], #4
   13740:	ldr	r0, [r4, #228]	; 0xe4
   13744:	add	r1, r0, #4
   13748:	add	r0, r0, r5
   1374c:	str	r1, [r4, #224]	; 0xe0
   13750:	str	r0, [r4, #228]	; 0xe4
   13754:	b	1375c <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13758:	mov	r6, #0
   1375c:	mov	r0, r6
   13760:	sub	sp, fp, #16
   13764:	pop	{r4, r5, r6, r7, fp, pc}
   13768:	movw	r0, #40392	; 0x9dc8
   1376c:	movw	r1, #35874	; 0x8c22
   13770:	movw	r3, #39938	; 0x9c02
   13774:	mov	r2, #308	; 0x134
   13778:	movt	r0, #1
   1377c:	movt	r1, #1
   13780:	movt	r3, #1
   13784:	bl	127a8 <__assert_fail@plt>

00013788 <flatcc_builder_enter_user_frame@@Base>:
   13788:	push	{r4, r5, r6, r7, fp, lr}
   1378c:	add	fp, sp, #16
   13790:	sub	sp, sp, #8
   13794:	mov	r4, r0
   13798:	ldr	r0, [r0, #112]	; 0x70
   1379c:	add	r1, r1, #7
   137a0:	ldr	r7, [r4, #228]	; 0xe4
   137a4:	bic	r5, r1, #3
   137a8:	add	r6, r4, #108	; 0x6c
   137ac:	add	r2, r7, r5
   137b0:	cmp	r2, r0
   137b4:	bls	137dc <flatcc_builder_enter_user_frame@@Base+0x54>
   137b8:	ldr	r0, [r4, #40]	; 0x28
   137bc:	ldr	ip, [r4, #48]	; 0x30
   137c0:	mov	r1, #7
   137c4:	mov	r3, #0
   137c8:	str	r1, [sp]
   137cc:	mov	r1, r6
   137d0:	blx	ip
   137d4:	cmp	r0, #0
   137d8:	bne	13824 <flatcc_builder_enter_user_frame@@Base+0x9c>
   137dc:	ldr	r0, [r6]
   137e0:	adds	r6, r0, r7
   137e4:	beq	13818 <flatcc_builder_enter_user_frame@@Base+0x90>
   137e8:	mov	r0, r6
   137ec:	mov	r1, #0
   137f0:	mov	r2, r5
   137f4:	bl	12778 <memset@plt>
   137f8:	ldr	r0, [r4, #224]	; 0xe0
   137fc:	str	r0, [r6]
   13800:	ldr	r1, [r4, #228]	; 0xe4
   13804:	add	r0, r1, #4
   13808:	add	r1, r1, r5
   1380c:	str	r0, [r4, #224]	; 0xe0
   13810:	str	r1, [r4, #228]	; 0xe4
   13814:	b	1381c <flatcc_builder_enter_user_frame@@Base+0x94>
   13818:	mov	r0, #0
   1381c:	sub	sp, fp, #16
   13820:	pop	{r4, r5, r6, r7, fp, pc}
   13824:	movw	r0, #40392	; 0x9dc8
   13828:	movw	r1, #35874	; 0x8c22
   1382c:	movw	r3, #39938	; 0x9c02
   13830:	mov	r2, #308	; 0x134
   13834:	movt	r0, #1
   13838:	movt	r1, #1
   1383c:	movt	r3, #1
   13840:	bl	127a8 <__assert_fail@plt>

00013844 <flatcc_builder_exit_user_frame@@Base>:
   13844:	push	{fp, lr}
   13848:	mov	fp, sp
   1384c:	ldr	r1, [r0, #224]	; 0xe0
   13850:	cmp	r1, #0
   13854:	subne	r2, r1, #4
   13858:	strne	r2, [r0, #228]	; 0xe4
   1385c:	ldrne	r2, [r0, #108]	; 0x6c
   13860:	addne	r1, r2, r1
   13864:	ldrne	r1, [r1, #-4]
   13868:	strne	r1, [r0, #224]	; 0xe0
   1386c:	movne	r0, r1
   13870:	popne	{fp, pc}
   13874:	movw	r0, #36006	; 0x8ca6
   13878:	movw	r1, #35874	; 0x8c22
   1387c:	movw	r3, #36031	; 0x8cbf
   13880:	movw	r2, #542	; 0x21e
   13884:	movt	r0, #1
   13888:	movt	r1, #1
   1388c:	movt	r3, #1
   13890:	bl	127a8 <__assert_fail@plt>

00013894 <flatcc_builder_exit_user_frame_at@@Base>:
   13894:	push	{fp, lr}
   13898:	mov	fp, sp
   1389c:	ldr	r2, [r0, #224]	; 0xe0
   138a0:	cmp	r2, r1
   138a4:	bcc	138b4 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   138a8:	str	r1, [r0, #224]	; 0xe0
   138ac:	pop	{fp, lr}
   138b0:	b	13844 <flatcc_builder_exit_user_frame@@Base>
   138b4:	movw	r0, #36089	; 0x8cf9
   138b8:	movw	r1, #35874	; 0x8c22
   138bc:	movw	r3, #36120	; 0x8d18
   138c0:	movw	r2, #551	; 0x227
   138c4:	movt	r0, #1
   138c8:	movt	r1, #1
   138cc:	movt	r3, #1
   138d0:	bl	127a8 <__assert_fail@plt>

000138d4 <flatcc_builder_get_current_user_frame@@Base>:
   138d4:	ldr	r0, [r0, #224]	; 0xe0
   138d8:	bx	lr

000138dc <flatcc_builder_get_user_frame_ptr@@Base>:
   138dc:	ldr	r0, [r0, #108]	; 0x6c
   138e0:	add	r0, r0, r1
   138e4:	bx	lr

000138e8 <flatcc_builder_embed_buffer@@Base>:
   138e8:	push	{r4, r5, r6, r7, fp, lr}
   138ec:	add	fp, sp, #16
   138f0:	sub	sp, sp, #88	; 0x58
   138f4:	mov	r4, r0
   138f8:	ldr	r0, [fp, #8]
   138fc:	mov	r5, r3
   13900:	mov	r7, r2
   13904:	mov	r2, r1
   13908:	sub	r1, fp, #18
   1390c:	strh	r0, [fp, #-18]	; 0xffffffee
   13910:	mov	r0, r4
   13914:	ldr	r3, [r4, #152]	; 0x98
   13918:	cmp	r3, #0
   1391c:	movwne	r3, #1
   13920:	bl	13a4c <flatcc_builder_embed_buffer@@Base+0x164>
   13924:	ldr	r1, [fp, #12]
   13928:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1392c:	ldr	r0, [r4, #136]	; 0x88
   13930:	mov	r2, #0
   13934:	str	r2, [sp, #12]
   13938:	str	r2, [sp, #8]
   1393c:	and	r1, r1, #2
   13940:	sub	r3, r3, #1
   13944:	add	r1, r5, r1, lsl #1
   13948:	sub	r1, r0, r1
   1394c:	and	r3, r1, r3
   13950:	add	r1, r3, r5
   13954:	str	r1, [fp, #-24]	; 0xffffffe8
   13958:	ldr	r1, [r4, #152]	; 0x98
   1395c:	cmp	r1, #0
   13960:	mov	r1, #0
   13964:	beq	13984 <flatcc_builder_embed_buffer@@Base+0x9c>
   13968:	mov	r1, #4
   1396c:	sub	r2, fp, #24
   13970:	str	r1, [sp, #20]
   13974:	str	r2, [sp, #16]
   13978:	mov	r2, #1
   1397c:	str	r1, [sp, #8]
   13980:	str	r2, [sp, #12]
   13984:	cmp	r5, #0
   13988:	beq	139ac <flatcc_builder_embed_buffer@@Base+0xc4>
   1398c:	add	r6, sp, #8
   13990:	add	r1, r1, r5
   13994:	add	r6, r6, r2, lsl #3
   13998:	add	r2, r2, #1
   1399c:	str	r1, [sp, #8]
   139a0:	str	r7, [r6, #8]
   139a4:	str	r5, [r6, #12]
   139a8:	str	r2, [sp, #12]
   139ac:	cmp	r3, #0
   139b0:	beq	139dc <flatcc_builder_embed_buffer@@Base+0xf4>
   139b4:	add	r7, sp, #8
   139b8:	movw	r6, #35344	; 0x8a10
   139bc:	add	r1, r1, r3
   139c0:	add	r7, r7, r2, lsl #3
   139c4:	movt	r6, #1
   139c8:	add	r2, r2, #1
   139cc:	str	r1, [sp, #8]
   139d0:	str	r6, [r7, #8]
   139d4:	str	r3, [r7, #12]
   139d8:	str	r2, [sp, #12]
   139dc:	cmp	r1, #0
   139e0:	ble	13a38 <flatcc_builder_embed_buffer@@Base+0x150>
   139e4:	sub	r5, r0, r1
   139e8:	ldr	r0, [r4, #36]	; 0x24
   139ec:	ldr	r7, [r4, #44]	; 0x2c
   139f0:	str	r1, [sp]
   139f4:	add	r1, sp, #8
   139f8:	add	r1, r1, #8
   139fc:	mov	r3, r5
   13a00:	blx	r7
   13a04:	cmp	r0, #0
   13a08:	streq	r5, [r4, #136]	; 0x88
   13a0c:	moveq	r0, r5
   13a10:	subeq	sp, fp, #16
   13a14:	popeq	{r4, r5, r6, r7, fp, pc}
   13a18:	movw	r0, #40392	; 0x9dc8
   13a1c:	movw	r1, #35874	; 0x8c22
   13a20:	movw	r3, #40071	; 0x9c87
   13a24:	movw	r2, #651	; 0x28b
   13a28:	movt	r0, #1
   13a2c:	movt	r1, #1
   13a30:	movt	r3, #1
   13a34:	bl	127a8 <__assert_fail@plt>
   13a38:	movw	r0, #40392	; 0x9dc8
   13a3c:	movw	r1, #35874	; 0x8c22
   13a40:	movw	r3, #40071	; 0x9c87
   13a44:	movw	r2, #647	; 0x287
   13a48:	b	13a28 <flatcc_builder_embed_buffer@@Base+0x140>
   13a4c:	push	{r4, sl, fp, lr}
   13a50:	add	fp, sp, #8
   13a54:	sub	sp, sp, #80	; 0x50
   13a58:	cmp	r2, #0
   13a5c:	bne	13a6c <flatcc_builder_embed_buffer@@Base+0x184>
   13a60:	ldrh	r2, [r0, #132]	; 0x84
   13a64:	cmp	r2, #0
   13a68:	movweq	r2, #1
   13a6c:	ldrh	r4, [r1]
   13a70:	cmp	r4, #4
   13a74:	movwcc	r4, #4
   13a78:	cmpcs	r4, r2
   13a7c:	bcs	13a8c <flatcc_builder_embed_buffer@@Base+0x1a4>
   13a80:	cmp	r4, r2
   13a84:	movcc	r4, r2
   13a88:	strh	r4, [r1]
   13a8c:	cmp	r3, #0
   13a90:	bne	13b04 <flatcc_builder_embed_buffer@@Base+0x21c>
   13a94:	ldr	r4, [r0, #140]	; 0x8c
   13a98:	sub	r1, r2, #1
   13a9c:	ands	r1, r4, r1
   13aa0:	beq	13b04 <flatcc_builder_embed_buffer@@Base+0x21c>
   13aa4:	movw	r2, #35344	; 0x8a10
   13aa8:	str	r1, [sp, #20]
   13aac:	cmn	r1, #1
   13ab0:	movt	r2, #1
   13ab4:	str	r2, [sp, #16]
   13ab8:	mov	r2, #1
   13abc:	str	r1, [sp, #8]
   13ac0:	str	r2, [sp, #12]
   13ac4:	add	r2, r1, r4
   13ac8:	str	r2, [r0, #140]	; 0x8c
   13acc:	ble	13b0c <flatcc_builder_embed_buffer@@Base+0x224>
   13ad0:	ldr	r2, [r0, #36]	; 0x24
   13ad4:	ldr	ip, [r0, #44]	; 0x2c
   13ad8:	add	r0, sp, #8
   13adc:	str	r1, [sp]
   13ae0:	mov	r3, r4
   13ae4:	add	r1, r0, #8
   13ae8:	mov	r0, r2
   13aec:	mov	r2, #1
   13af0:	blx	ip
   13af4:	cmp	r0, #0
   13af8:	bne	13b20 <flatcc_builder_embed_buffer@@Base+0x238>
   13afc:	cmn	r4, #1
   13b00:	beq	13b40 <flatcc_builder_embed_buffer@@Base+0x258>
   13b04:	sub	sp, fp, #8
   13b08:	pop	{r4, sl, fp, pc}
   13b0c:	movw	r0, #40392	; 0x9dc8
   13b10:	movw	r1, #35874	; 0x8c22
   13b14:	movw	r3, #40259	; 0x9d43
   13b18:	movw	r2, #673	; 0x2a1
   13b1c:	b	13b30 <flatcc_builder_embed_buffer@@Base+0x248>
   13b20:	movw	r0, #40392	; 0x9dc8
   13b24:	movw	r1, #35874	; 0x8c22
   13b28:	movw	r3, #40259	; 0x9d43
   13b2c:	movw	r2, #677	; 0x2a5
   13b30:	movt	r0, #1
   13b34:	movt	r1, #1
   13b38:	movt	r3, #1
   13b3c:	bl	127a8 <__assert_fail@plt>
   13b40:	movw	r0, #40392	; 0x9dc8
   13b44:	movw	r1, #35874	; 0x8c22
   13b48:	movw	r3, #40005	; 0x9c45
   13b4c:	movw	r2, #702	; 0x2be
   13b50:	movt	r0, #1
   13b54:	movt	r1, #1
   13b58:	movt	r3, #1
   13b5c:	bl	127a8 <__assert_fail@plt>

00013b60 <flatcc_builder_create_buffer@@Base>:
   13b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b64:	add	fp, sp, #28
   13b68:	sub	sp, sp, #100	; 0x64
   13b6c:	ldr	sl, [fp, #12]
   13b70:	mov	r4, r0
   13b74:	ldr	r0, [fp, #8]
   13b78:	mov	r7, r1
   13b7c:	mov	r5, #0
   13b80:	mov	r6, r3
   13b84:	sub	r1, fp, #30
   13b88:	str	r5, [sp, #12]
   13b8c:	and	r9, sl, #1
   13b90:	strh	r0, [fp, #-30]	; 0xffffffe2
   13b94:	mov	r0, r4
   13b98:	mov	r3, r9
   13b9c:	bl	13a4c <flatcc_builder_embed_buffer@@Base+0x164>
   13ba0:	ldrh	r0, [r4, #128]	; 0x80
   13ba4:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13ba8:	str	r6, [sp, #8]
   13bac:	cmp	r0, r1
   13bb0:	strhcc	r1, [r4, #128]	; 0x80
   13bb4:	cmp	r7, #0
   13bb8:	beq	13bd4 <flatcc_builder_create_buffer@@Base+0x74>
   13bbc:	ldr	r5, [r7]
   13bc0:	cmp	r5, #0
   13bc4:	str	r5, [sp, #12]
   13bc8:	movwne	r5, #1
   13bcc:	lsl	r7, r5, #2
   13bd0:	b	13bd8 <flatcc_builder_create_buffer@@Base+0x78>
   13bd4:	mov	r7, #0
   13bd8:	ldr	r0, [r4, #136]	; 0x88
   13bdc:	and	r2, sl, #2
   13be0:	mov	r3, #0
   13be4:	sub	r6, r1, #1
   13be8:	ands	ip, sl, #3
   13bec:	mov	sl, #4
   13bf0:	mov	r1, #4
   13bf4:	str	r3, [sp, #20]
   13bf8:	str	r3, [sp, #16]
   13bfc:	sub	r2, r0, r2, lsl #1
   13c00:	sub	r2, r2, r7
   13c04:	sub	r2, r2, #4
   13c08:	beq	13c2c <flatcc_builder_create_buffer@@Base+0xcc>
   13c0c:	mov	r1, #4
   13c10:	sub	r3, fp, #40	; 0x28
   13c14:	str	r1, [sp, #28]
   13c18:	str	r3, [sp, #24]
   13c1c:	str	r1, [sp, #16]
   13c20:	mov	r3, #1
   13c24:	mov	r1, #8
   13c28:	str	r3, [sp, #20]
   13c2c:	add	lr, sp, #16
   13c30:	and	r6, r2, r6
   13c34:	sub	r8, fp, #36	; 0x24
   13c38:	str	r1, [sp, #16]
   13c3c:	cmp	r5, #0
   13c40:	add	r2, lr, r3, lsl #3
   13c44:	str	r8, [r2, #8]
   13c48:	str	sl, [r2, #12]
   13c4c:	add	r2, r3, #1
   13c50:	str	r2, [sp, #20]
   13c54:	beq	13c78 <flatcc_builder_create_buffer@@Base+0x118>
   13c58:	add	r2, lr, r2, lsl #3
   13c5c:	add	r1, r1, r7
   13c60:	add	r5, sp, #12
   13c64:	str	r1, [sp, #16]
   13c68:	str	r5, [r2, #8]
   13c6c:	str	r7, [r2, #12]
   13c70:	orr	r2, r3, #2
   13c74:	str	r2, [sp, #20]
   13c78:	cmp	r6, #0
   13c7c:	beq	13ca4 <flatcc_builder_create_buffer@@Base+0x144>
   13c80:	movw	r5, #35344	; 0x8a10
   13c84:	add	r3, lr, r2, lsl #3
   13c88:	add	r1, r1, r6
   13c8c:	add	r2, r2, #1
   13c90:	movt	r5, #1
   13c94:	str	r1, [sp, #16]
   13c98:	str	r5, [r3, #8]
   13c9c:	str	r6, [r3, #12]
   13ca0:	str	r2, [sp, #20]
   13ca4:	sub	r7, r0, r1
   13ca8:	cmp	ip, #0
   13cac:	mov	r6, #144	; 0x90
   13cb0:	ldr	r3, [sp, #8]
   13cb4:	mov	r0, r7
   13cb8:	addne	r0, r0, #4
   13cbc:	cmp	r9, #0
   13cc0:	movweq	r6, #140	; 0x8c
   13cc4:	cmp	r1, #0
   13cc8:	ldr	r6, [r4, r6]
   13ccc:	sub	r3, r3, r0
   13cd0:	str	r3, [fp, #-36]	; 0xffffffdc
   13cd4:	sub	r0, r6, r0
   13cd8:	str	r0, [fp, #-40]	; 0xffffffd8
   13cdc:	ble	13d34 <flatcc_builder_create_buffer@@Base+0x1d4>
   13ce0:	ldr	r0, [r4, #36]	; 0x24
   13ce4:	ldr	r6, [r4, #44]	; 0x2c
   13ce8:	str	r1, [sp]
   13cec:	add	r1, lr, #8
   13cf0:	mov	r3, r7
   13cf4:	blx	r6
   13cf8:	cmp	r0, #0
   13cfc:	bne	13d48 <flatcc_builder_create_buffer@@Base+0x1e8>
   13d00:	cmp	r7, #0
   13d04:	str	r7, [r4, #136]	; 0x88
   13d08:	movne	r0, r7
   13d0c:	subne	sp, fp, #28
   13d10:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d14:	movw	r0, #40392	; 0x9dc8
   13d18:	movw	r1, #35874	; 0x8c22
   13d1c:	movw	r3, #36189	; 0x8d5d
   13d20:	mov	r2, #772	; 0x304
   13d24:	movt	r0, #1
   13d28:	movt	r1, #1
   13d2c:	movt	r3, #1
   13d30:	bl	127a8 <__assert_fail@plt>
   13d34:	movw	r0, #40392	; 0x9dc8
   13d38:	movw	r1, #35874	; 0x8c22
   13d3c:	movw	r3, #40071	; 0x9c87
   13d40:	movw	r2, #647	; 0x287
   13d44:	b	13d58 <flatcc_builder_create_buffer@@Base+0x1f8>
   13d48:	movw	r0, #40392	; 0x9dc8
   13d4c:	movw	r1, #35874	; 0x8c22
   13d50:	movw	r3, #40071	; 0x9c87
   13d54:	movw	r2, #651	; 0x28b
   13d58:	movt	r0, #1
   13d5c:	movt	r1, #1
   13d60:	movt	r3, #1
   13d64:	bl	127a8 <__assert_fail@plt>

00013d68 <flatcc_builder_create_struct@@Base>:
   13d68:	push	{r4, r5, r6, sl, fp, lr}
   13d6c:	add	fp, sp, #16
   13d70:	sub	sp, sp, #80	; 0x50
   13d74:	cmp	r3, #0
   13d78:	beq	13e50 <flatcc_builder_create_struct@@Base+0xe8>
   13d7c:	mov	r5, r0
   13d80:	ldrh	r0, [r0, #128]	; 0x80
   13d84:	mov	r4, #0
   13d88:	cmp	r0, r3
   13d8c:	strhcc	r3, [r5, #128]	; 0x80
   13d90:	sub	r3, r3, #1
   13d94:	cmp	r2, #0
   13d98:	ldr	r0, [r5, #136]	; 0x88
   13d9c:	str	r4, [sp, #12]
   13da0:	str	r4, [sp, #8]
   13da4:	movne	r4, #1
   13da8:	strne	r2, [sp, #20]
   13dac:	strne	r1, [sp, #16]
   13db0:	strne	r2, [sp, #8]
   13db4:	strne	r4, [sp, #12]
   13db8:	sub	r6, r0, r2
   13dbc:	and	r3, r6, r3
   13dc0:	cmp	r3, #0
   13dc4:	beq	13df0 <flatcc_builder_create_struct@@Base+0x88>
   13dc8:	add	r1, sp, #8
   13dcc:	movw	r6, #35344	; 0x8a10
   13dd0:	add	r2, r3, r2
   13dd4:	add	r1, r1, r4, lsl #3
   13dd8:	movt	r6, #1
   13ddc:	add	r4, r4, #1
   13de0:	str	r2, [sp, #8]
   13de4:	str	r6, [r1, #8]
   13de8:	str	r3, [r1, #12]
   13dec:	str	r4, [sp, #12]
   13df0:	cmp	r2, #0
   13df4:	ble	13e70 <flatcc_builder_create_struct@@Base+0x108>
   13df8:	sub	r6, r0, r2
   13dfc:	ldr	r0, [r5, #36]	; 0x24
   13e00:	ldr	ip, [r5, #44]	; 0x2c
   13e04:	add	r1, sp, #8
   13e08:	str	r2, [sp]
   13e0c:	mov	r2, r4
   13e10:	add	r1, r1, #8
   13e14:	mov	r3, r6
   13e18:	blx	ip
   13e1c:	cmp	r0, #0
   13e20:	streq	r6, [r5, #136]	; 0x88
   13e24:	moveq	r0, r6
   13e28:	subeq	sp, fp, #16
   13e2c:	popeq	{r4, r5, r6, sl, fp, pc}
   13e30:	movw	r0, #40392	; 0x9dc8
   13e34:	movw	r1, #35874	; 0x8c22
   13e38:	movw	r3, #40071	; 0x9c87
   13e3c:	movw	r2, #651	; 0x28b
   13e40:	movt	r0, #1
   13e44:	movt	r1, #1
   13e48:	movt	r3, #1
   13e4c:	bl	127a8 <__assert_fail@plt>
   13e50:	movw	r0, #36320	; 0x8de0
   13e54:	movw	r1, #35874	; 0x8c22
   13e58:	movw	r3, #36331	; 0x8deb
   13e5c:	movw	r2, #783	; 0x30f
   13e60:	movt	r0, #1
   13e64:	movt	r1, #1
   13e68:	movt	r3, #1
   13e6c:	bl	127a8 <__assert_fail@plt>
   13e70:	movw	r0, #40392	; 0x9dc8
   13e74:	movw	r1, #35874	; 0x8c22
   13e78:	movw	r3, #40071	; 0x9c87
   13e7c:	movw	r2, #647	; 0x287
   13e80:	b	13e40 <flatcc_builder_create_struct@@Base+0xd8>

00013e84 <flatcc_builder_start_buffer@@Base>:
   13e84:	push	{r4, r5, r6, r7, fp, lr}
   13e88:	add	fp, sp, #16
   13e8c:	mov	r5, r1
   13e90:	ldrh	r1, [r0, #128]	; 0x80
   13e94:	mov	r6, r3
   13e98:	mov	r7, r2
   13e9c:	mov	r4, r0
   13ea0:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   13ea4:	mov	r1, r0
   13ea8:	mvn	r0, #0
   13eac:	cmp	r1, #0
   13eb0:	popne	{r4, r5, r6, r7, fp, pc}
   13eb4:	mov	r0, #1
   13eb8:	cmp	r5, #0
   13ebc:	strh	r0, [r4, #128]	; 0x80
   13ec0:	ldrh	r1, [r4, #132]	; 0x84
   13ec4:	ldr	r2, [r4, #32]
   13ec8:	strh	r1, [r2, #34]	; 0x22
   13ecc:	strh	r7, [r4, #132]	; 0x84
   13ed0:	ldrh	r1, [r4, #164]	; 0xa4
   13ed4:	ldr	r2, [r4, #32]
   13ed8:	strh	r1, [r2, #32]
   13edc:	strh	r6, [r4, #164]	; 0xa4
   13ee0:	ldr	r1, [r4, #32]
   13ee4:	ldr	r2, [r4, #144]	; 0x90
   13ee8:	str	r2, [r1, #20]
   13eec:	ldr	r1, [r4, #32]
   13ef0:	ldr	r2, [r4, #152]	; 0x98
   13ef4:	str	r2, [r1, #28]
   13ef8:	ldr	r3, [r4, #148]	; 0x94
   13efc:	ldr	r1, [r4, #32]
   13f00:	ldr	r2, [r4, #136]	; 0x88
   13f04:	ldr	r7, [r4, #168]	; 0xa8
   13f08:	add	r6, r3, #1
   13f0c:	str	r2, [r4, #144]	; 0x90
   13f10:	str	r6, [r4, #148]	; 0x94
   13f14:	str	r3, [r4, #152]	; 0x98
   13f18:	str	r7, [r1, #16]
   13f1c:	movw	r1, #35344	; 0x8a10
   13f20:	movt	r1, #1
   13f24:	movne	r1, r5
   13f28:	ldr	r1, [r1]
   13f2c:	str	r1, [r4, #168]	; 0xa8
   13f30:	ldr	r1, [r4, #32]
   13f34:	strh	r0, [r1, #14]
   13f38:	mov	r0, #0
   13f3c:	pop	{r4, r5, r6, r7, fp, pc}
   13f40:	push	{r4, r5, r6, r7, fp, lr}
   13f44:	add	fp, sp, #16
   13f48:	sub	sp, sp, #8
   13f4c:	mov	r5, r1
   13f50:	ldr	r1, [r0, #156]	; 0x9c
   13f54:	ldr	r2, [r0, #160]	; 0xa0
   13f58:	mov	r4, r0
   13f5c:	add	r0, r1, #1
   13f60:	cmp	r1, r2
   13f64:	str	r0, [r4, #156]	; 0x9c
   13f68:	bge	13f7c <flatcc_builder_start_buffer@@Base+0xf8>
   13f6c:	ldr	r0, [r4, #32]
   13f70:	add	r0, r0, #36	; 0x24
   13f74:	str	r0, [r4, #32]
   13f78:	b	14010 <flatcc_builder_start_buffer@@Base+0x18c>
   13f7c:	ldr	r2, [r4, #176]	; 0xb0
   13f80:	mvn	r6, #0
   13f84:	cmp	r2, #1
   13f88:	cmpge	r1, r2
   13f8c:	bge	14048 <flatcc_builder_start_buffer@@Base+0x1c4>
   13f90:	add	r7, r0, r0, lsl #3
   13f94:	ldr	r0, [r4, #88]	; 0x58
   13f98:	lsl	r2, r7, #2
   13f9c:	cmp	r2, r0
   13fa0:	bls	13fc8 <flatcc_builder_start_buffer@@Base+0x144>
   13fa4:	ldr	r0, [r4, #40]	; 0x28
   13fa8:	ldr	ip, [r4, #48]	; 0x30
   13fac:	mov	r3, #4
   13fb0:	add	r1, r4, #84	; 0x54
   13fb4:	str	r3, [sp]
   13fb8:	mov	r3, #0
   13fbc:	blx	ip
   13fc0:	cmp	r0, #0
   13fc4:	bne	14054 <flatcc_builder_start_buffer@@Base+0x1d0>
   13fc8:	ldr	r1, [r4, #84]	; 0x54
   13fcc:	mvn	r0, #35	; 0x23
   13fd0:	add	r0, r0, r7, lsl #2
   13fd4:	adds	r0, r0, r1
   13fd8:	str	r0, [r4, #32]
   13fdc:	beq	14048 <flatcc_builder_start_buffer@@Base+0x1c4>
   13fe0:	ldr	r1, [r4, #88]	; 0x58
   13fe4:	movw	r3, #36409	; 0x8e39
   13fe8:	ldr	r2, [r4, #176]	; 0xb0
   13fec:	movt	r3, #14563	; 0x38e3
   13ff0:	umull	r1, r3, r1, r3
   13ff4:	cmp	r2, r3, lsr #3
   13ff8:	lsr	r1, r3, #3
   13ffc:	mov	r3, r1
   14000:	movlt	r3, r2
   14004:	cmp	r2, #0
   14008:	movle	r3, r1
   1400c:	str	r3, [r4, #160]	; 0xa0
   14010:	ldr	r1, [r4, #20]
   14014:	mvn	r3, #3
   14018:	mov	r6, #0
   1401c:	str	r1, [r0, #8]
   14020:	ldrh	r2, [r4, #130]	; 0x82
   14024:	strh	r2, [r0, #12]
   14028:	strh	r5, [r4, #130]	; 0x82
   1402c:	ldr	r2, [r4, #28]
   14030:	stm	r0, {r2, r3}
   14034:	add	r0, r1, r2
   14038:	str	r6, [r4, #20]
   1403c:	add	r0, r0, #7
   14040:	bic	r0, r0, #7
   14044:	str	r0, [r4, #28]
   14048:	mov	r0, r6
   1404c:	sub	sp, fp, #16
   14050:	pop	{r4, r5, r6, r7, fp, pc}
   14054:	movw	r0, #40392	; 0x9dc8
   14058:	movw	r1, #35874	; 0x8c22
   1405c:	movw	r3, #39938	; 0x9c02
   14060:	mov	r2, #308	; 0x134
   14064:	movt	r0, #1
   14068:	movt	r1, #1
   1406c:	movt	r3, #1
   14070:	bl	127a8 <__assert_fail@plt>

00014074 <flatcc_builder_end_buffer@@Base>:
   14074:	push	{r4, r5, r6, sl, fp, lr}
   14078:	add	fp, sp, #16
   1407c:	sub	sp, sp, #8
   14080:	mov	r4, r0
   14084:	ldr	r0, [r0, #32]
   14088:	ldrh	r0, [r0, #14]
   1408c:	cmp	r0, #1
   14090:	bne	14184 <flatcc_builder_end_buffer@@Base+0x110>
   14094:	mov	r3, r1
   14098:	ldr	r1, [r4, #152]	; 0x98
   1409c:	ldrh	r0, [r4, #164]	; 0xa4
   140a0:	ldrh	r2, [r4, #132]	; 0x84
   140a4:	cmp	r1, #0
   140a8:	ldrh	r1, [r4, #128]	; 0x80
   140ac:	and	r0, r0, #2
   140b0:	orrne	r0, r0, #1
   140b4:	cmp	r1, r2
   140b8:	movcc	r1, r2
   140bc:	strhcc	r2, [r4, #128]	; 0x80
   140c0:	str	r0, [sp, #4]
   140c4:	mov	r0, r4
   140c8:	str	r1, [sp]
   140cc:	add	r1, r4, #168	; 0xa8
   140d0:	bl	13b60 <flatcc_builder_create_buffer@@Base>
   140d4:	mov	r6, r0
   140d8:	cmp	r0, #0
   140dc:	beq	14178 <flatcc_builder_end_buffer@@Base+0x104>
   140e0:	ldr	r1, [r4, #32]
   140e4:	ldr	r0, [r4, #16]
   140e8:	ldr	r2, [r4, #20]
   140ec:	ldr	r3, [r1, #20]
   140f0:	str	r3, [r4, #144]	; 0x90
   140f4:	ldr	r3, [r1, #28]
   140f8:	str	r3, [r4, #152]	; 0x98
   140fc:	ldr	r3, [r1, #16]
   14100:	str	r3, [r4, #168]	; 0xa8
   14104:	ldrh	r1, [r1, #32]
   14108:	strh	r1, [r4, #164]	; 0xa4
   1410c:	mov	r1, #0
   14110:	bl	12778 <memset@plt>
   14114:	ldr	r0, [r4, #32]
   14118:	ldr	r1, [r4, #60]	; 0x3c
   1411c:	ldr	r2, [r4, #64]	; 0x40
   14120:	ldr	r3, [r0, #8]
   14124:	str	r3, [r4, #20]
   14128:	ldr	r3, [r0]
   1412c:	str	r3, [r4, #28]
   14130:	add	r1, r1, r3
   14134:	ldr	r5, [r0, #4]
   14138:	str	r1, [r4, #16]
   1413c:	sub	r1, r2, r3
   14140:	cmp	r1, r5
   14144:	movhi	r1, r5
   14148:	str	r1, [r4, #24]
   1414c:	ldrh	r1, [r4, #130]	; 0x82
   14150:	ldrh	r2, [r4, #128]	; 0x80
   14154:	cmp	r2, r1
   14158:	strhcc	r1, [r4, #128]	; 0x80
   1415c:	ldrh	r1, [r0, #12]
   14160:	sub	r0, r0, #36	; 0x24
   14164:	str	r0, [r4, #32]
   14168:	strh	r1, [r4, #130]	; 0x82
   1416c:	ldr	r0, [r4, #156]	; 0x9c
   14170:	sub	r0, r0, #1
   14174:	str	r0, [r4, #156]	; 0x9c
   14178:	mov	r0, r6
   1417c:	sub	sp, fp, #16
   14180:	pop	{r4, r5, r6, sl, fp, pc}
   14184:	movw	r0, #36433	; 0x8e51
   14188:	movw	r1, #35874	; 0x8c22
   1418c:	movw	r3, #36477	; 0x8e7d
   14190:	movw	r2, #838	; 0x346
   14194:	movt	r0, #1
   14198:	movt	r1, #1
   1419c:	movt	r3, #1
   141a0:	bl	127a8 <__assert_fail@plt>

000141a4 <flatcc_builder_start_struct@@Base>:
   141a4:	push	{r4, r5, r6, r7, fp, lr}
   141a8:	add	fp, sp, #16
   141ac:	mov	r6, r1
   141b0:	mov	r1, r2
   141b4:	mov	r4, r0
   141b8:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   141bc:	mov	r5, #0
   141c0:	cmp	r0, #0
   141c4:	bne	14234 <flatcc_builder_start_struct@@Base+0x90>
   141c8:	ldr	r1, [r4, #32]
   141cc:	mov	r0, #2
   141d0:	strh	r0, [r1, #14]
   141d4:	ldr	r2, [r4, #28]
   141d8:	ldr	r0, [r4, #60]	; 0x3c
   141dc:	ldr	r3, [r4, #64]	; 0x40
   141e0:	add	r0, r0, r2
   141e4:	sub	r2, r3, r2
   141e8:	mvn	r3, #3
   141ec:	cmn	r2, #4
   141f0:	str	r0, [r4, #16]
   141f4:	movcs	r2, r3
   141f8:	str	r2, [r4, #24]
   141fc:	str	r3, [r1, #4]
   14200:	ldr	r7, [r4, #20]
   14204:	add	r1, r7, r6
   14208:	cmp	r1, r2
   1420c:	str	r1, [r4, #20]
   14210:	bcc	14230 <flatcc_builder_start_struct@@Base+0x8c>
   14214:	add	r1, r1, #1
   14218:	mov	r0, r4
   1421c:	mvn	r2, #3
   14220:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   14224:	cmp	r0, #0
   14228:	bne	14234 <flatcc_builder_start_struct@@Base+0x90>
   1422c:	ldr	r0, [r4, #16]
   14230:	add	r5, r0, r7
   14234:	mov	r0, r5
   14238:	pop	{r4, r5, r6, r7, fp, pc}

0001423c <flatcc_builder_struct_edit@@Base>:
   1423c:	ldr	r0, [r0, #16]
   14240:	bx	lr

00014244 <flatcc_builder_end_struct@@Base>:
   14244:	push	{r4, r5, fp, lr}
   14248:	add	fp, sp, #8
   1424c:	mov	r4, r0
   14250:	ldr	r0, [r0, #32]
   14254:	ldrh	r0, [r0, #14]
   14258:	cmp	r0, #2
   1425c:	bne	142fc <flatcc_builder_end_struct@@Base+0xb8>
   14260:	ldrh	r3, [r4, #130]	; 0x82
   14264:	ldr	r1, [r4, #16]
   14268:	ldr	r2, [r4, #20]
   1426c:	mov	r0, r4
   14270:	bl	13d68 <flatcc_builder_create_struct@@Base>
   14274:	mov	r5, r0
   14278:	cmp	r0, #0
   1427c:	beq	142f4 <flatcc_builder_end_struct@@Base+0xb0>
   14280:	ldr	r0, [r4, #16]
   14284:	ldr	r2, [r4, #20]
   14288:	mov	r1, #0
   1428c:	bl	12778 <memset@plt>
   14290:	ldr	r0, [r4, #32]
   14294:	ldr	r1, [r4, #60]	; 0x3c
   14298:	ldr	ip, [r4, #64]	; 0x40
   1429c:	ldr	r3, [r0, #8]
   142a0:	str	r3, [r4, #20]
   142a4:	ldr	r3, [r0]
   142a8:	str	r3, [r4, #28]
   142ac:	add	r1, r1, r3
   142b0:	ldr	r2, [r0, #4]
   142b4:	str	r1, [r4, #16]
   142b8:	sub	r1, ip, r3
   142bc:	cmp	r1, r2
   142c0:	movhi	r1, r2
   142c4:	str	r1, [r4, #24]
   142c8:	ldrh	r1, [r4, #130]	; 0x82
   142cc:	ldrh	r2, [r4, #128]	; 0x80
   142d0:	cmp	r2, r1
   142d4:	strhcc	r1, [r4, #128]	; 0x80
   142d8:	ldrh	r1, [r0, #12]
   142dc:	sub	r0, r0, #36	; 0x24
   142e0:	str	r0, [r4, #32]
   142e4:	strh	r1, [r4, #130]	; 0x82
   142e8:	ldr	r0, [r4, #156]	; 0x9c
   142ec:	sub	r0, r0, #1
   142f0:	str	r0, [r4, #156]	; 0x9c
   142f4:	mov	r0, r5
   142f8:	pop	{r4, r5, fp, pc}
   142fc:	movw	r0, #36566	; 0x8ed6
   14300:	movw	r1, #35874	; 0x8c22
   14304:	movw	r3, #36610	; 0x8f02
   14308:	mov	r2, #872	; 0x368
   1430c:	movt	r0, #1
   14310:	movt	r1, #1
   14314:	movt	r3, #1
   14318:	bl	127a8 <__assert_fail@plt>

0001431c <flatcc_builder_extend_vector@@Base>:
   1431c:	push	{r4, r5, fp, lr}
   14320:	add	fp, sp, #8
   14324:	mov	r4, r0
   14328:	ldr	r0, [r0, #32]
   1432c:	ldr	r2, [r0, #20]
   14330:	adds	r2, r2, r1
   14334:	bcs	14394 <flatcc_builder_extend_vector@@Base+0x78>
   14338:	ldr	r3, [r0, #24]
   1433c:	cmp	r2, r3
   14340:	bhi	14394 <flatcc_builder_extend_vector@@Base+0x78>
   14344:	str	r2, [r0, #20]
   14348:	ldr	r0, [r4, #32]
   1434c:	ldr	r5, [r4, #20]
   14350:	ldr	r2, [r4, #24]
   14354:	ldr	r0, [r0, #16]
   14358:	mla	r0, r0, r1, r5
   1435c:	cmp	r0, r2
   14360:	str	r0, [r4, #20]
   14364:	bcc	14388 <flatcc_builder_extend_vector@@Base+0x6c>
   14368:	add	r1, r0, #1
   1436c:	mov	r0, r4
   14370:	mvn	r2, #3
   14374:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   14378:	mov	r1, r0
   1437c:	mov	r0, #0
   14380:	cmp	r1, #0
   14384:	popne	{r4, r5, fp, pc}
   14388:	ldr	r0, [r4, #16]
   1438c:	add	r0, r0, r5
   14390:	pop	{r4, r5, fp, pc}
   14394:	movw	r0, #40145	; 0x9cd1
   14398:	movw	r1, #35874	; 0x8c22
   1439c:	movw	r3, #40172	; 0x9cec
   143a0:	mov	r2, #892	; 0x37c
   143a4:	movt	r0, #1
   143a8:	movt	r1, #1
   143ac:	movt	r3, #1
   143b0:	bl	127a8 <__assert_fail@plt>

000143b4 <flatcc_builder_vector_push@@Base>:
   143b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143b8:	add	fp, sp, #24
   143bc:	mov	r5, r0
   143c0:	ldr	r0, [r0, #32]
   143c4:	mov	r8, r1
   143c8:	ldrh	r1, [r0, #14]
   143cc:	cmp	r1, #4
   143d0:	bne	14454 <flatcc_builder_vector_push@@Base+0xa0>
   143d4:	ldr	r1, [r0, #20]
   143d8:	ldr	r2, [r0, #24]
   143dc:	cmp	r1, r2
   143e0:	bhi	1446c <flatcc_builder_vector_push@@Base+0xb8>
   143e4:	add	r1, r1, #1
   143e8:	str	r1, [r0, #20]
   143ec:	ldr	r0, [r5, #32]
   143f0:	ldr	r4, [r5, #20]
   143f4:	ldr	r1, [r5, #24]
   143f8:	ldr	r6, [r0, #16]
   143fc:	add	r0, r4, r6
   14400:	cmp	r0, r1
   14404:	str	r0, [r5, #20]
   14408:	bcc	14428 <flatcc_builder_vector_push@@Base+0x74>
   1440c:	add	r1, r0, #1
   14410:	mov	r0, r5
   14414:	mvn	r2, #3
   14418:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   1441c:	mov	r7, #0
   14420:	cmp	r0, #0
   14424:	bne	1444c <flatcc_builder_vector_push@@Base+0x98>
   14428:	ldr	r0, [r5, #16]
   1442c:	adds	r7, r0, r4
   14430:	beq	14448 <flatcc_builder_vector_push@@Base+0x94>
   14434:	mov	r0, r7
   14438:	mov	r1, r8
   1443c:	mov	r2, r6
   14440:	bl	12718 <memcpy@plt>
   14444:	b	1444c <flatcc_builder_vector_push@@Base+0x98>
   14448:	mov	r7, #0
   1444c:	mov	r0, r7
   14450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14454:	movw	r0, #36677	; 0x8f45
   14458:	movw	r1, #35874	; 0x8c22
   1445c:	movw	r3, #36721	; 0x8f71
   14460:	movw	r2, #907	; 0x38b
   14464:	movt	r0, #1
   14468:	b	14480 <flatcc_builder_vector_push@@Base+0xcc>
   1446c:	movw	r0, #36788	; 0x8fb4
   14470:	movw	r1, #35874	; 0x8c22
   14474:	movw	r3, #36721	; 0x8f71
   14478:	mov	r2, #908	; 0x38c
   1447c:	movt	r0, #1
   14480:	movt	r1, #1
   14484:	movt	r3, #1
   14488:	bl	127a8 <__assert_fail@plt>

0001448c <flatcc_builder_append_vector@@Base>:
   1448c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14490:	add	fp, sp, #24
   14494:	mov	r6, r0
   14498:	ldr	r0, [r0, #32]
   1449c:	mov	r8, r1
   144a0:	ldrh	r1, [r0, #14]
   144a4:	cmp	r1, #4
   144a8:	bne	14554 <flatcc_builder_append_vector@@Base+0xc8>
   144ac:	ldr	r1, [r0, #20]
   144b0:	mov	r9, r2
   144b4:	adds	r1, r1, r2
   144b8:	bcs	14534 <flatcc_builder_append_vector@@Base+0xa8>
   144bc:	ldr	r2, [r0, #24]
   144c0:	cmp	r1, r2
   144c4:	bhi	14534 <flatcc_builder_append_vector@@Base+0xa8>
   144c8:	str	r1, [r0, #20]
   144cc:	ldr	r0, [r6, #32]
   144d0:	ldr	r4, [r6, #20]
   144d4:	ldr	r1, [r6, #24]
   144d8:	ldr	r5, [r0, #16]
   144dc:	mla	r0, r5, r9, r4
   144e0:	cmp	r0, r1
   144e4:	str	r0, [r6, #20]
   144e8:	bcc	14508 <flatcc_builder_append_vector@@Base+0x7c>
   144ec:	add	r1, r0, #1
   144f0:	mov	r0, r6
   144f4:	mvn	r2, #3
   144f8:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   144fc:	mov	r7, #0
   14500:	cmp	r0, #0
   14504:	bne	1452c <flatcc_builder_append_vector@@Base+0xa0>
   14508:	ldr	r0, [r6, #16]
   1450c:	adds	r7, r0, r4
   14510:	beq	14528 <flatcc_builder_append_vector@@Base+0x9c>
   14514:	mul	r2, r5, r9
   14518:	mov	r0, r7
   1451c:	mov	r1, r8
   14520:	bl	12718 <memcpy@plt>
   14524:	b	1452c <flatcc_builder_append_vector@@Base+0xa0>
   14528:	mov	r7, #0
   1452c:	mov	r0, r7
   14530:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14534:	movw	r0, #40145	; 0x9cd1
   14538:	movw	r1, #35874	; 0x8c22
   1453c:	movw	r3, #40172	; 0x9cec
   14540:	mov	r2, #892	; 0x37c
   14544:	movt	r0, #1
   14548:	movt	r1, #1
   1454c:	movt	r3, #1
   14550:	bl	127a8 <__assert_fail@plt>
   14554:	movw	r0, #36677	; 0x8f45
   14558:	movw	r1, #35874	; 0x8c22
   1455c:	movw	r3, #36849	; 0x8ff1
   14560:	movw	r2, #915	; 0x393
   14564:	movt	r0, #1
   14568:	movt	r1, #1
   1456c:	movt	r3, #1
   14570:	bl	127a8 <__assert_fail@plt>

00014574 <flatcc_builder_extend_offset_vector@@Base>:
   14574:	push	{r4, r5, fp, lr}
   14578:	add	fp, sp, #8
   1457c:	mov	r4, r0
   14580:	ldr	r0, [r0, #32]
   14584:	ldr	r2, [r0, #20]
   14588:	adds	r2, r2, r1
   1458c:	cmpcc	r2, #1073741824	; 0x40000000
   14590:	bcc	145b4 <flatcc_builder_extend_offset_vector@@Base+0x40>
   14594:	movw	r0, #40145	; 0x9cd1
   14598:	movw	r1, #35874	; 0x8c22
   1459c:	movw	r3, #40172	; 0x9cec
   145a0:	mov	r2, #892	; 0x37c
   145a4:	movt	r0, #1
   145a8:	movt	r1, #1
   145ac:	movt	r3, #1
   145b0:	bl	127a8 <__assert_fail@plt>
   145b4:	str	r2, [r0, #20]
   145b8:	ldr	r5, [r4, #20]
   145bc:	ldr	r2, [r4, #24]
   145c0:	add	r0, r5, r1, lsl #2
   145c4:	cmp	r0, r2
   145c8:	str	r0, [r4, #20]
   145cc:	bcc	145f0 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   145d0:	add	r1, r0, #1
   145d4:	mov	r0, r4
   145d8:	mvn	r2, #3
   145dc:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   145e0:	mov	r1, r0
   145e4:	mov	r0, #0
   145e8:	cmp	r1, #0
   145ec:	popne	{r4, r5, fp, pc}
   145f0:	ldr	r0, [r4, #16]
   145f4:	add	r0, r0, r5
   145f8:	pop	{r4, r5, fp, pc}

000145fc <flatcc_builder_offset_vector_push@@Base>:
   145fc:	push	{r4, r5, r6, r7, fp, lr}
   14600:	add	fp, sp, #16
   14604:	mov	r6, r0
   14608:	ldr	r0, [r0, #32]
   1460c:	mov	r4, r1
   14610:	ldrh	r1, [r0, #14]
   14614:	cmp	r1, #5
   14618:	bne	1467c <flatcc_builder_offset_vector_push@@Base+0x80>
   1461c:	ldr	r1, [r0, #20]
   14620:	mov	r5, #0
   14624:	cmn	r1, #-1073741823	; 0xc0000001
   14628:	beq	14674 <flatcc_builder_offset_vector_push@@Base+0x78>
   1462c:	add	r1, r1, #1
   14630:	str	r1, [r0, #20]
   14634:	ldr	r7, [r6, #20]
   14638:	ldr	r0, [r6, #24]
   1463c:	add	r1, r7, #4
   14640:	cmp	r1, r0
   14644:	str	r1, [r6, #20]
   14648:	bcc	14664 <flatcc_builder_offset_vector_push@@Base+0x68>
   1464c:	add	r1, r7, #5
   14650:	mov	r0, r6
   14654:	mvn	r2, #3
   14658:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   1465c:	cmp	r0, #0
   14660:	bne	14674 <flatcc_builder_offset_vector_push@@Base+0x78>
   14664:	ldr	r0, [r6, #16]
   14668:	adds	r0, r0, r7
   1466c:	movne	r5, r0
   14670:	strne	r4, [r0]
   14674:	mov	r0, r5
   14678:	pop	{r4, r5, r6, r7, fp, pc}
   1467c:	movw	r0, #36926	; 0x903e
   14680:	movw	r1, #35874	; 0x8c22
   14684:	movw	r3, #36977	; 0x9071
   14688:	movw	r2, #934	; 0x3a6
   1468c:	movt	r0, #1
   14690:	movt	r1, #1
   14694:	movt	r3, #1
   14698:	bl	127a8 <__assert_fail@plt>

0001469c <flatcc_builder_append_offset_vector@@Base>:
   1469c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146a0:	add	fp, sp, #24
   146a4:	mov	r6, r0
   146a8:	ldr	r0, [r0, #32]
   146ac:	mov	r8, r1
   146b0:	ldrh	r1, [r0, #14]
   146b4:	cmp	r1, #5
   146b8:	bne	14754 <flatcc_builder_append_offset_vector@@Base+0xb8>
   146bc:	ldr	r1, [r0, #20]
   146c0:	mov	r5, r2
   146c4:	adds	r1, r1, r2
   146c8:	cmpcc	r1, #1073741824	; 0x40000000
   146cc:	bcc	146f0 <flatcc_builder_append_offset_vector@@Base+0x54>
   146d0:	movw	r0, #40145	; 0x9cd1
   146d4:	movw	r1, #35874	; 0x8c22
   146d8:	movw	r3, #40172	; 0x9cec
   146dc:	mov	r2, #892	; 0x37c
   146e0:	movt	r0, #1
   146e4:	movt	r1, #1
   146e8:	movt	r3, #1
   146ec:	bl	127a8 <__assert_fail@plt>
   146f0:	str	r1, [r0, #20]
   146f4:	ldr	r4, [r6, #20]
   146f8:	ldr	r1, [r6, #24]
   146fc:	add	r0, r4, r5, lsl #2
   14700:	cmp	r0, r1
   14704:	str	r0, [r6, #20]
   14708:	bcc	14728 <flatcc_builder_append_offset_vector@@Base+0x8c>
   1470c:	add	r1, r0, #1
   14710:	mov	r0, r6
   14714:	mvn	r2, #3
   14718:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   1471c:	mov	r7, #0
   14720:	cmp	r0, #0
   14724:	bne	1474c <flatcc_builder_append_offset_vector@@Base+0xb0>
   14728:	ldr	r0, [r6, #16]
   1472c:	adds	r7, r0, r4
   14730:	beq	14748 <flatcc_builder_append_offset_vector@@Base+0xac>
   14734:	lsl	r2, r5, #2
   14738:	mov	r0, r7
   1473c:	mov	r1, r8
   14740:	bl	12718 <memcpy@plt>
   14744:	b	1474c <flatcc_builder_append_offset_vector@@Base+0xb0>
   14748:	mov	r7, #0
   1474c:	mov	r0, r7
   14750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14754:	movw	r0, #36926	; 0x903e
   14758:	movw	r1, #35874	; 0x8c22
   1475c:	movw	r3, #37075	; 0x90d3
   14760:	mov	r2, #948	; 0x3b4
   14764:	movt	r0, #1
   14768:	movt	r1, #1
   1476c:	movt	r3, #1
   14770:	bl	127a8 <__assert_fail@plt>

00014774 <flatcc_builder_extend_string@@Base>:
   14774:	push	{r4, r5, fp, lr}
   14778:	add	fp, sp, #8
   1477c:	mov	r4, r0
   14780:	ldr	r0, [r0, #32]
   14784:	ldrh	r2, [r0, #14]
   14788:	cmp	r2, #6
   1478c:	bne	147e4 <flatcc_builder_extend_string@@Base+0x70>
   14790:	ldr	r2, [r0, #20]
   14794:	adds	r2, r2, r1
   14798:	bcs	14804 <flatcc_builder_extend_string@@Base+0x90>
   1479c:	str	r2, [r0, #20]
   147a0:	ldr	r5, [r4, #20]
   147a4:	ldr	r2, [r4, #24]
   147a8:	add	r0, r5, r1
   147ac:	cmp	r0, r2
   147b0:	str	r0, [r4, #20]
   147b4:	bcc	147d8 <flatcc_builder_extend_string@@Base+0x64>
   147b8:	add	r1, r0, #1
   147bc:	mov	r0, r4
   147c0:	mvn	r2, #3
   147c4:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   147c8:	mov	r1, r0
   147cc:	mov	r0, #0
   147d0:	cmp	r1, #0
   147d4:	popne	{r4, r5, fp, pc}
   147d8:	ldr	r0, [r4, #16]
   147dc:	add	r0, r0, r5
   147e0:	pop	{r4, r5, fp, pc}
   147e4:	movw	r0, #37191	; 0x9147
   147e8:	movw	r1, #35874	; 0x8c22
   147ec:	movw	r3, #37235	; 0x9173
   147f0:	movw	r2, #957	; 0x3bd
   147f4:	movt	r0, #1
   147f8:	movt	r1, #1
   147fc:	movt	r3, #1
   14800:	bl	127a8 <__assert_fail@plt>
   14804:	movw	r0, #40145	; 0x9cd1
   14808:	movw	r1, #35874	; 0x8c22
   1480c:	movw	r3, #40172	; 0x9cec
   14810:	mov	r2, #892	; 0x37c
   14814:	movt	r0, #1
   14818:	movt	r1, #1
   1481c:	movt	r3, #1
   14820:	bl	127a8 <__assert_fail@plt>

00014824 <flatcc_builder_append_string@@Base>:
   14824:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14828:	add	fp, sp, #24
   1482c:	mov	r6, r0
   14830:	ldr	r0, [r0, #32]
   14834:	mov	r8, r1
   14838:	ldrh	r1, [r0, #14]
   1483c:	cmp	r1, #6
   14840:	bne	148b8 <flatcc_builder_append_string@@Base+0x94>
   14844:	ldr	r1, [r0, #20]
   14848:	mov	r4, r2
   1484c:	adds	r1, r1, r2
   14850:	bcs	148d8 <flatcc_builder_append_string@@Base+0xb4>
   14854:	str	r1, [r0, #20]
   14858:	ldr	r5, [r6, #20]
   1485c:	ldr	r1, [r6, #24]
   14860:	add	r0, r5, r4
   14864:	cmp	r0, r1
   14868:	str	r0, [r6, #20]
   1486c:	bcc	1488c <flatcc_builder_append_string@@Base+0x68>
   14870:	add	r1, r0, #1
   14874:	mov	r0, r6
   14878:	mvn	r2, #3
   1487c:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   14880:	mov	r7, #0
   14884:	cmp	r0, #0
   14888:	bne	148b0 <flatcc_builder_append_string@@Base+0x8c>
   1488c:	ldr	r0, [r6, #16]
   14890:	adds	r7, r0, r5
   14894:	beq	148ac <flatcc_builder_append_string@@Base+0x88>
   14898:	mov	r0, r7
   1489c:	mov	r1, r8
   148a0:	mov	r2, r4
   148a4:	bl	12718 <memcpy@plt>
   148a8:	b	148b0 <flatcc_builder_append_string@@Base+0x8c>
   148ac:	mov	r7, #0
   148b0:	mov	r0, r7
   148b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148b8:	movw	r0, #37191	; 0x9147
   148bc:	movw	r1, #35874	; 0x8c22
   148c0:	movw	r3, #37298	; 0x91b2
   148c4:	movw	r2, #966	; 0x3c6
   148c8:	movt	r0, #1
   148cc:	movt	r1, #1
   148d0:	movt	r3, #1
   148d4:	bl	127a8 <__assert_fail@plt>
   148d8:	movw	r0, #40145	; 0x9cd1
   148dc:	movw	r1, #35874	; 0x8c22
   148e0:	movw	r3, #40172	; 0x9cec
   148e4:	mov	r2, #892	; 0x37c
   148e8:	movt	r0, #1
   148ec:	movt	r1, #1
   148f0:	movt	r3, #1
   148f4:	bl	127a8 <__assert_fail@plt>

000148f8 <flatcc_builder_append_string_str@@Base>:
   148f8:	push	{r4, r5, fp, lr}
   148fc:	add	fp, sp, #8
   14900:	mov	r5, r0
   14904:	mov	r0, r1
   14908:	mov	r4, r1
   1490c:	bl	12760 <strlen@plt>
   14910:	mov	r2, r0
   14914:	mov	r0, r5
   14918:	mov	r1, r4
   1491c:	pop	{r4, r5, fp, lr}
   14920:	b	14824 <flatcc_builder_append_string@@Base>

00014924 <flatcc_builder_append_string_strn@@Base>:
   14924:	push	{r4, r5, r6, sl, fp, lr}
   14928:	add	fp, sp, #16
   1492c:	mov	r6, r0
   14930:	mov	r5, r1
   14934:	mov	r0, r1
   14938:	mov	r1, #0
   1493c:	mov	r4, r2
   14940:	bl	12790 <memchr@plt>
   14944:	cmp	r0, #0
   14948:	mov	r1, r5
   1494c:	subne	r4, r0, r5
   14950:	mov	r0, r6
   14954:	mov	r2, r4
   14958:	pop	{r4, r5, r6, sl, fp, lr}
   1495c:	b	14824 <flatcc_builder_append_string@@Base>

00014960 <flatcc_builder_truncate_vector@@Base>:
   14960:	push	{fp, lr}
   14964:	mov	fp, sp
   14968:	ldr	r2, [r0, #32]
   1496c:	ldrh	r3, [r2, #14]
   14970:	cmp	r3, #4
   14974:	bne	149bc <flatcc_builder_truncate_vector@@Base+0x5c>
   14978:	ldr	r3, [r2, #20]
   1497c:	cmp	r3, r1
   14980:	bcc	149d4 <flatcc_builder_truncate_vector@@Base+0x74>
   14984:	sub	r3, r3, r1
   14988:	str	r3, [r2, #20]
   1498c:	ldr	r2, [r0, #32]
   14990:	ldr	r3, [r0, #20]
   14994:	ldr	ip, [r0, #16]
   14998:	ldr	r2, [r2, #16]
   1499c:	mls	r3, r2, r1, r3
   149a0:	mul	r2, r2, r1
   149a4:	mov	r1, #0
   149a8:	str	r3, [r0, #20]
   149ac:	add	r0, ip, r3
   149b0:	bl	12778 <memset@plt>
   149b4:	mov	r0, #0
   149b8:	pop	{fp, pc}
   149bc:	movw	r0, #36677	; 0x8f45
   149c0:	movw	r1, #35874	; 0x8c22
   149c4:	movw	r3, #37375	; 0x91ff
   149c8:	movw	r2, #985	; 0x3d9
   149cc:	movt	r0, #1
   149d0:	b	149e8 <flatcc_builder_truncate_vector@@Base+0x88>
   149d4:	movw	r0, #37438	; 0x923e
   149d8:	movw	r1, #35874	; 0x8c22
   149dc:	movw	r3, #37375	; 0x91ff
   149e0:	movw	r2, #986	; 0x3da
   149e4:	movt	r0, #1
   149e8:	movt	r1, #1
   149ec:	movt	r3, #1
   149f0:	bl	127a8 <__assert_fail@plt>

000149f4 <flatcc_builder_truncate_offset_vector@@Base>:
   149f4:	push	{fp, lr}
   149f8:	mov	fp, sp
   149fc:	ldr	r2, [r0, #32]
   14a00:	ldrh	r3, [r2, #14]
   14a04:	cmp	r3, #5
   14a08:	bne	14a50 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14a0c:	ldr	r3, [r2, #20]
   14a10:	cmp	r3, r1
   14a14:	bcc	14a68 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   14a18:	sub	r3, r3, r1
   14a1c:	str	r3, [r2, #20]
   14a20:	ldr	r2, [r0, #32]
   14a24:	ldr	r3, [r0, #20]
   14a28:	ldr	ip, [r0, #16]
   14a2c:	ldr	r2, [r2, #16]
   14a30:	mls	r3, r2, r1, r3
   14a34:	mul	r2, r2, r1
   14a38:	mov	r1, #0
   14a3c:	str	r3, [r0, #20]
   14a40:	add	r0, ip, r3
   14a44:	bl	12778 <memset@plt>
   14a48:	mov	r0, #0
   14a4c:	pop	{fp, pc}
   14a50:	movw	r0, #36926	; 0x903e
   14a54:	movw	r1, #35874	; 0x8c22
   14a58:	movw	r3, #37474	; 0x9262
   14a5c:	movw	r2, #994	; 0x3e2
   14a60:	movt	r0, #1
   14a64:	b	14a7c <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14a68:	movw	r0, #37544	; 0x92a8
   14a6c:	movw	r1, #35874	; 0x8c22
   14a70:	movw	r3, #37474	; 0x9262
   14a74:	movw	r2, #995	; 0x3e3
   14a78:	movt	r0, #1
   14a7c:	movt	r1, #1
   14a80:	movt	r3, #1
   14a84:	bl	127a8 <__assert_fail@plt>

00014a88 <flatcc_builder_truncate_string@@Base>:
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	mov	r2, r1
   14a94:	ldr	r1, [r0, #32]
   14a98:	ldrh	r3, [r1, #14]
   14a9c:	cmp	r3, #6
   14aa0:	bne	14adc <flatcc_builder_truncate_string@@Base+0x54>
   14aa4:	ldr	r3, [r1, #20]
   14aa8:	cmp	r3, r2
   14aac:	bcc	14af4 <flatcc_builder_truncate_string@@Base+0x6c>
   14ab0:	sub	r3, r3, r2
   14ab4:	str	r3, [r1, #20]
   14ab8:	ldr	r3, [r0, #20]
   14abc:	ldr	r1, [r0, #16]
   14ac0:	sub	r3, r3, r2
   14ac4:	str	r3, [r0, #20]
   14ac8:	add	r0, r1, r3
   14acc:	mov	r1, #0
   14ad0:	bl	12778 <memset@plt>
   14ad4:	mov	r0, #0
   14ad8:	pop	{fp, pc}
   14adc:	movw	r0, #37191	; 0x9147
   14ae0:	movw	r1, #35874	; 0x8c22
   14ae4:	movw	r3, #37603	; 0x92e3
   14ae8:	movw	r2, #1003	; 0x3eb
   14aec:	movt	r0, #1
   14af0:	b	14b08 <flatcc_builder_truncate_string@@Base+0x80>
   14af4:	movw	r0, #37666	; 0x9322
   14af8:	movw	r1, #35874	; 0x8c22
   14afc:	movw	r3, #37603	; 0x92e3
   14b00:	mov	r2, #1004	; 0x3ec
   14b04:	movt	r0, #1
   14b08:	movt	r1, #1
   14b0c:	movt	r3, #1
   14b10:	bl	127a8 <__assert_fail@plt>

00014b14 <flatcc_builder_start_vector@@Base>:
   14b14:	push	{r4, r5, r6, r7, fp, lr}
   14b18:	add	fp, sp, #16
   14b1c:	mov	r7, #4
   14b20:	cmp	r2, #4
   14b24:	mov	r6, r1
   14b28:	mov	r5, r3
   14b2c:	mov	r4, r0
   14b30:	movls	r2, r7
   14b34:	mov	r1, r2
   14b38:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   14b3c:	mov	r1, r0
   14b40:	mvn	r0, #0
   14b44:	cmp	r1, #0
   14b48:	popne	{r4, r5, r6, r7, fp, pc}
   14b4c:	ldr	r0, [r4, #32]
   14b50:	str	r6, [r0, #16]
   14b54:	mov	r0, #0
   14b58:	ldr	r1, [r4, #32]
   14b5c:	str	r0, [r1, #20]
   14b60:	ldr	r1, [r4, #32]
   14b64:	str	r5, [r1, #24]
   14b68:	ldr	r1, [r4, #32]
   14b6c:	strh	r7, [r1, #14]
   14b70:	ldr	r2, [r4, #28]
   14b74:	ldr	r3, [r4, #60]	; 0x3c
   14b78:	ldr	r7, [r4, #64]	; 0x40
   14b7c:	add	r3, r3, r2
   14b80:	sub	r2, r7, r2
   14b84:	str	r3, [r4, #16]
   14b88:	mvn	r3, #3
   14b8c:	cmn	r2, #4
   14b90:	movcs	r2, r3
   14b94:	str	r2, [r4, #24]
   14b98:	str	r3, [r1, #4]
   14b9c:	pop	{r4, r5, r6, r7, fp, pc}

00014ba0 <flatcc_builder_start_offset_vector@@Base>:
   14ba0:	push	{r4, r5, fp, lr}
   14ba4:	add	fp, sp, #8
   14ba8:	mov	r1, #4
   14bac:	mov	r4, r0
   14bb0:	mov	r5, #4
   14bb4:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   14bb8:	mov	r1, r0
   14bbc:	mvn	r0, #0
   14bc0:	cmp	r1, #0
   14bc4:	popne	{r4, r5, fp, pc}
   14bc8:	ldr	r0, [r4, #32]
   14bcc:	mov	r2, #5
   14bd0:	str	r5, [r0, #16]
   14bd4:	mov	r0, #0
   14bd8:	ldr	r1, [r4, #32]
   14bdc:	str	r0, [r1, #20]
   14be0:	ldr	r1, [r4, #32]
   14be4:	strh	r2, [r1, #14]
   14be8:	ldr	r2, [r4, #28]
   14bec:	ldr	r3, [r4, #60]	; 0x3c
   14bf0:	ldr	r5, [r4, #64]	; 0x40
   14bf4:	add	r3, r3, r2
   14bf8:	sub	r2, r5, r2
   14bfc:	str	r3, [r4, #16]
   14c00:	mvn	r3, #3
   14c04:	cmn	r2, #4
   14c08:	movcs	r2, r3
   14c0c:	str	r2, [r4, #24]
   14c10:	str	r3, [r1, #4]
   14c14:	pop	{r4, r5, fp, pc}

00014c18 <flatcc_builder_create_offset_vector@@Base>:
   14c18:	push	{r4, r5, r6, sl, fp, lr}
   14c1c:	add	fp, sp, #16
   14c20:	mov	r6, r2
   14c24:	mov	r5, r1
   14c28:	mov	r4, r0
   14c2c:	bl	14ba0 <flatcc_builder_start_offset_vector@@Base>
   14c30:	cmp	r0, #0
   14c34:	beq	14c40 <flatcc_builder_create_offset_vector@@Base+0x28>
   14c38:	mov	r0, #0
   14c3c:	pop	{r4, r5, r6, sl, fp, pc}
   14c40:	mov	r0, r4
   14c44:	mov	r1, r6
   14c48:	bl	14574 <flatcc_builder_extend_offset_vector@@Base>
   14c4c:	cmp	r0, #0
   14c50:	beq	14c38 <flatcc_builder_create_offset_vector@@Base+0x20>
   14c54:	lsl	r2, r6, #2
   14c58:	mov	r1, r5
   14c5c:	bl	12718 <memcpy@plt>
   14c60:	mov	r0, r4
   14c64:	pop	{r4, r5, r6, sl, fp, lr}
   14c68:	b	14c6c <flatcc_builder_end_offset_vector@@Base>

00014c6c <flatcc_builder_end_offset_vector@@Base>:
   14c6c:	push	{r4, r5, fp, lr}
   14c70:	add	fp, sp, #8
   14c74:	mov	r4, r0
   14c78:	ldr	r0, [r0, #32]
   14c7c:	ldrh	r1, [r0, #14]
   14c80:	cmp	r1, #5
   14c84:	bne	14d24 <flatcc_builder_end_offset_vector@@Base+0xb8>
   14c88:	ldr	r2, [r0, #20]
   14c8c:	ldr	r1, [r4, #16]
   14c90:	mov	r0, r4
   14c94:	mov	r3, #0
   14c98:	bl	15c4c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14c9c:	mov	r5, r0
   14ca0:	cmp	r0, #0
   14ca4:	beq	14d1c <flatcc_builder_end_offset_vector@@Base+0xb0>
   14ca8:	ldr	r0, [r4, #16]
   14cac:	ldr	r2, [r4, #20]
   14cb0:	mov	r1, #0
   14cb4:	bl	12778 <memset@plt>
   14cb8:	ldr	r0, [r4, #32]
   14cbc:	ldr	r1, [r4, #60]	; 0x3c
   14cc0:	ldr	ip, [r4, #64]	; 0x40
   14cc4:	ldr	r3, [r0, #8]
   14cc8:	str	r3, [r4, #20]
   14ccc:	ldr	r3, [r0]
   14cd0:	str	r3, [r4, #28]
   14cd4:	add	r1, r1, r3
   14cd8:	ldr	r2, [r0, #4]
   14cdc:	str	r1, [r4, #16]
   14ce0:	sub	r1, ip, r3
   14ce4:	cmp	r1, r2
   14ce8:	movhi	r1, r2
   14cec:	str	r1, [r4, #24]
   14cf0:	ldrh	r1, [r4, #130]	; 0x82
   14cf4:	ldrh	r2, [r4, #128]	; 0x80
   14cf8:	cmp	r2, r1
   14cfc:	strhcc	r1, [r4, #128]	; 0x80
   14d00:	ldrh	r1, [r0, #12]
   14d04:	sub	r0, r0, #36	; 0x24
   14d08:	str	r0, [r4, #32]
   14d0c:	strh	r1, [r4, #130]	; 0x82
   14d10:	ldr	r0, [r4, #156]	; 0x9c
   14d14:	sub	r0, r0, #1
   14d18:	str	r0, [r4, #156]	; 0x9c
   14d1c:	mov	r0, r5
   14d20:	pop	{r4, r5, fp, pc}
   14d24:	movw	r0, #36926	; 0x903e
   14d28:	movw	r1, #35874	; 0x8c22
   14d2c:	movw	r3, #38509	; 0x966d
   14d30:	movw	r2, #1480	; 0x5c8
   14d34:	movt	r0, #1
   14d38:	movt	r1, #1
   14d3c:	movt	r3, #1
   14d40:	bl	127a8 <__assert_fail@plt>

00014d44 <flatcc_builder_start_string@@Base>:
   14d44:	push	{r4, r5, fp, lr}
   14d48:	add	fp, sp, #8
   14d4c:	mov	r1, #1
   14d50:	mov	r4, r0
   14d54:	mov	r5, #1
   14d58:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   14d5c:	mov	r1, r0
   14d60:	mvn	r0, #0
   14d64:	cmp	r1, #0
   14d68:	popne	{r4, r5, fp, pc}
   14d6c:	ldr	r0, [r4, #32]
   14d70:	mov	r2, #6
   14d74:	str	r5, [r0, #16]
   14d78:	mov	r0, #0
   14d7c:	ldr	r1, [r4, #32]
   14d80:	str	r0, [r1, #20]
   14d84:	ldr	r1, [r4, #32]
   14d88:	strh	r2, [r1, #14]
   14d8c:	ldr	r2, [r4, #28]
   14d90:	ldr	r3, [r4, #60]	; 0x3c
   14d94:	ldr	r5, [r4, #64]	; 0x40
   14d98:	add	r3, r3, r2
   14d9c:	sub	r2, r5, r2
   14da0:	str	r3, [r4, #16]
   14da4:	mvn	r3, #3
   14da8:	cmn	r2, #4
   14dac:	movcs	r2, r3
   14db0:	str	r2, [r4, #24]
   14db4:	str	r3, [r1, #4]
   14db8:	pop	{r4, r5, fp, pc}

00014dbc <flatcc_builder_reserve_table@@Base>:
   14dbc:	push	{r4, r5, r6, sl, fp, lr}
   14dc0:	add	fp, sp, #16
   14dc4:	sub	sp, sp, #8
   14dc8:	cmn	r1, #1
   14dcc:	ble	14ea0 <flatcc_builder_reserve_table@@Base+0xe4>
   14dd0:	mov	r4, r0
   14dd4:	ldr	r0, [r0, #32]
   14dd8:	mov	r5, r1
   14ddc:	ldr	r1, [r4, #56]	; 0x38
   14de0:	ldrh	r2, [r0, #28]
   14de4:	ldr	r0, [r0, #16]
   14de8:	add	r6, r0, r2, lsl #1
   14dec:	add	r0, r6, r5, lsl #1
   14df0:	add	r2, r0, #4
   14df4:	cmp	r2, r1
   14df8:	bls	14e20 <flatcc_builder_reserve_table@@Base+0x64>
   14dfc:	ldr	r0, [r4, #40]	; 0x28
   14e00:	ldr	ip, [r4, #48]	; 0x30
   14e04:	mov	r3, #0
   14e08:	add	r1, r4, #52	; 0x34
   14e0c:	str	r3, [sp]
   14e10:	mov	r3, #1
   14e14:	blx	ip
   14e18:	cmp	r0, #0
   14e1c:	bne	14ec0 <flatcc_builder_reserve_table@@Base+0x104>
   14e20:	ldr	r0, [r4, #52]	; 0x34
   14e24:	adds	r0, r0, r6
   14e28:	str	r0, [r4, #4]
   14e2c:	beq	14e94 <flatcc_builder_reserve_table@@Base+0xd8>
   14e30:	add	r0, r0, #4
   14e34:	lsl	r1, r5, #1
   14e38:	str	r0, [r4, #4]
   14e3c:	ldr	r0, [r4, #32]
   14e40:	ldr	r3, [r4, #80]	; 0x50
   14e44:	ldr	r5, [r0, #20]
   14e48:	orr	r0, r1, #1
   14e4c:	add	r2, r5, r0
   14e50:	cmp	r2, r3
   14e54:	bls	14e7c <flatcc_builder_reserve_table@@Base+0xc0>
   14e58:	ldr	r0, [r4, #40]	; 0x28
   14e5c:	ldr	r6, [r4, #48]	; 0x30
   14e60:	mov	r3, #3
   14e64:	add	r1, r4, #76	; 0x4c
   14e68:	str	r3, [sp]
   14e6c:	mov	r3, #0
   14e70:	blx	r6
   14e74:	cmp	r0, #0
   14e78:	bne	14ec0 <flatcc_builder_reserve_table@@Base+0x104>
   14e7c:	ldr	r0, [r4, #76]	; 0x4c
   14e80:	adds	r0, r0, r5
   14e84:	str	r0, [r4]
   14e88:	mov	r0, #0
   14e8c:	mvneq	r0, #0
   14e90:	b	14e98 <flatcc_builder_reserve_table@@Base+0xdc>
   14e94:	mvn	r0, #0
   14e98:	sub	sp, fp, #16
   14e9c:	pop	{r4, r5, r6, sl, fp, pc}
   14ea0:	movw	r0, #37765	; 0x9385
   14ea4:	movw	r1, #35874	; 0x8c22
   14ea8:	movw	r3, #37700	; 0x9344
   14eac:	movw	r2, #1065	; 0x429
   14eb0:	movt	r0, #1
   14eb4:	movt	r1, #1
   14eb8:	movt	r3, #1
   14ebc:	bl	127a8 <__assert_fail@plt>
   14ec0:	movw	r0, #40392	; 0x9dc8
   14ec4:	movw	r1, #35874	; 0x8c22
   14ec8:	movw	r3, #39938	; 0x9c02
   14ecc:	mov	r2, #308	; 0x134
   14ed0:	movt	r0, #1
   14ed4:	movt	r1, #1
   14ed8:	movt	r3, #1
   14edc:	bl	127a8 <__assert_fail@plt>

00014ee0 <flatcc_builder_start_table@@Base>:
   14ee0:	push	{r4, r5, r6, r7, fp, lr}
   14ee4:	add	fp, sp, #16
   14ee8:	sub	sp, sp, #8
   14eec:	mov	r6, r1
   14ef0:	mov	r1, #4
   14ef4:	mov	r4, r0
   14ef8:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   14efc:	mvn	r5, #0
   14f00:	cmp	r0, #0
   14f04:	beq	14f14 <flatcc_builder_start_table@@Base+0x34>
   14f08:	mov	r0, r5
   14f0c:	sub	sp, fp, #16
   14f10:	pop	{r4, r5, r6, r7, fp, pc}
   14f14:	mov	r1, r4
   14f18:	ldr	r2, [r4, #4]
   14f1c:	ldr	r3, [r4, #32]
   14f20:	ldr	r0, [r1, #52]!	; 0x34
   14f24:	sub	r0, r2, r0
   14f28:	str	r0, [r3, #16]
   14f2c:	ldr	r0, [r4]
   14f30:	ldr	r3, [r4, #76]	; 0x4c
   14f34:	ldr	r2, [r4, #32]
   14f38:	sub	r0, r0, r3
   14f3c:	mov	r3, #0
   14f40:	str	r0, [r2, #20]
   14f44:	ldr	r0, [r4, #12]
   14f48:	ldr	r2, [r4, #32]
   14f4c:	str	r0, [r2, #24]
   14f50:	ldr	r0, [r4, #32]
   14f54:	ldrh	r2, [r4, #8]
   14f58:	strh	r2, [r0, #28]
   14f5c:	movw	r0, #15186	; 0x3b52
   14f60:	strh	r3, [r4, #8]
   14f64:	mov	r2, #3
   14f68:	movt	r0, #12137	; 0x2f69
   14f6c:	str	r0, [r4, #12]
   14f70:	ldr	r0, [r4, #32]
   14f74:	strh	r2, [r0, #14]
   14f78:	ldrh	r2, [r0, #28]
   14f7c:	ldr	r0, [r0, #16]
   14f80:	add	r7, r0, r2, lsl #1
   14f84:	add	r0, r7, r6, lsl #1
   14f88:	add	r2, r0, #4
   14f8c:	ldr	r0, [r4, #56]	; 0x38
   14f90:	cmp	r2, r0
   14f94:	bls	14fb4 <flatcc_builder_start_table@@Base+0xd4>
   14f98:	ldr	r0, [r4, #40]	; 0x28
   14f9c:	ldr	ip, [r4, #48]	; 0x30
   14fa0:	str	r3, [sp]
   14fa4:	mov	r3, #1
   14fa8:	blx	ip
   14fac:	cmp	r0, #0
   14fb0:	bne	15058 <flatcc_builder_start_table@@Base+0x178>
   14fb4:	ldr	r0, [r4, #52]	; 0x34
   14fb8:	adds	r0, r0, r7
   14fbc:	str	r0, [r4, #4]
   14fc0:	beq	14f08 <flatcc_builder_start_table@@Base+0x28>
   14fc4:	add	r0, r0, #4
   14fc8:	lsl	r1, r6, #1
   14fcc:	str	r0, [r4, #4]
   14fd0:	ldr	r0, [r4, #32]
   14fd4:	ldr	r3, [r4, #80]	; 0x50
   14fd8:	ldr	r6, [r0, #20]
   14fdc:	orr	r0, r1, #1
   14fe0:	add	r2, r6, r0
   14fe4:	cmp	r2, r3
   14fe8:	bls	15010 <flatcc_builder_start_table@@Base+0x130>
   14fec:	ldr	r0, [r4, #40]	; 0x28
   14ff0:	ldr	r7, [r4, #48]	; 0x30
   14ff4:	mov	r3, #3
   14ff8:	add	r1, r4, #76	; 0x4c
   14ffc:	str	r3, [sp]
   15000:	mov	r3, #0
   15004:	blx	r7
   15008:	cmp	r0, #0
   1500c:	bne	15058 <flatcc_builder_start_table@@Base+0x178>
   15010:	ldr	r0, [r4, #76]	; 0x4c
   15014:	adds	r0, r0, r6
   15018:	str	r0, [r4]
   1501c:	beq	14f08 <flatcc_builder_start_table@@Base+0x28>
   15020:	ldr	r0, [r4, #28]
   15024:	ldr	r2, [r4, #60]	; 0x3c
   15028:	ldr	r3, [r4, #64]	; 0x40
   1502c:	ldr	r1, [r4, #32]
   15030:	mov	r5, #0
   15034:	add	r2, r2, r0
   15038:	sub	r0, r3, r0
   1503c:	str	r2, [r4, #16]
   15040:	movw	r2, #65532	; 0xfffc
   15044:	cmp	r0, r2
   15048:	movcs	r0, r2
   1504c:	str	r0, [r4, #24]
   15050:	str	r2, [r1, #4]
   15054:	b	14f08 <flatcc_builder_start_table@@Base+0x28>
   15058:	movw	r0, #40392	; 0x9dc8
   1505c:	movw	r1, #35874	; 0x8c22
   15060:	movw	r3, #39938	; 0x9c02
   15064:	mov	r2, #308	; 0x134
   15068:	movt	r0, #1
   1506c:	movt	r1, #1
   15070:	movt	r3, #1
   15074:	bl	127a8 <__assert_fail@plt>

00015078 <flatcc_builder_create_vtable@@Base>:
   15078:	push	{r4, r5, fp, lr}
   1507c:	add	fp, sp, #8
   15080:	sub	sp, sp, #80	; 0x50
   15084:	mov	r3, r2
   15088:	mov	r2, #0
   1508c:	mov	r4, r0
   15090:	cmp	r3, #0
   15094:	str	r2, [sp, #12]
   15098:	str	r2, [sp, #8]
   1509c:	movne	r2, #1
   150a0:	strne	r3, [sp, #20]
   150a4:	strne	r1, [sp, #16]
   150a8:	strne	r3, [sp, #8]
   150ac:	strne	r2, [sp, #12]
   150b0:	ldr	r0, [r4, #152]	; 0x98
   150b4:	cmp	r0, #0
   150b8:	bne	150c8 <flatcc_builder_create_vtable@@Base+0x50>
   150bc:	ldr	r0, [r4, #180]	; 0xb4
   150c0:	cmp	r0, #0
   150c4:	beq	1511c <flatcc_builder_create_vtable@@Base+0xa4>
   150c8:	cmp	r3, #0
   150cc:	beq	15160 <flatcc_builder_create_vtable@@Base+0xe8>
   150d0:	ldr	r0, [r4, #136]	; 0x88
   150d4:	ldr	ip, [r4, #44]	; 0x2c
   150d8:	add	r1, sp, #8
   150dc:	add	r1, r1, #8
   150e0:	sub	r5, r0, r3
   150e4:	ldr	r0, [r4, #36]	; 0x24
   150e8:	str	r3, [sp]
   150ec:	mov	r3, r5
   150f0:	blx	ip
   150f4:	cmp	r0, #0
   150f8:	bne	15174 <flatcc_builder_create_vtable@@Base+0xfc>
   150fc:	cmp	r5, #0
   15100:	str	r5, [r4, #136]	; 0x88
   15104:	beq	15114 <flatcc_builder_create_vtable@@Base+0x9c>
   15108:	add	r1, r5, #1
   1510c:	mov	r0, r1
   15110:	b	15158 <flatcc_builder_create_vtable@@Base+0xe0>
   15114:	mov	r0, #0
   15118:	b	15158 <flatcc_builder_create_vtable@@Base+0xe0>
   1511c:	ldr	r5, [r4, #140]	; 0x8c
   15120:	ldr	r0, [r4, #36]	; 0x24
   15124:	ldr	ip, [r4, #44]	; 0x2c
   15128:	add	r1, r5, r3
   1512c:	str	r1, [r4, #140]	; 0x8c
   15130:	add	r1, sp, #8
   15134:	str	r3, [sp]
   15138:	mov	r3, r5
   1513c:	add	r1, r1, #8
   15140:	blx	ip
   15144:	cmp	r0, #0
   15148:	bne	15194 <flatcc_builder_create_vtable@@Base+0x11c>
   1514c:	adds	r1, r5, #1
   15150:	mov	r0, #0
   15154:	movcc	r0, r1
   15158:	sub	sp, fp, #8
   1515c:	pop	{r4, r5, fp, pc}
   15160:	movw	r0, #40392	; 0x9dc8
   15164:	movw	r1, #35874	; 0x8c22
   15168:	movw	r3, #40071	; 0x9c87
   1516c:	movw	r2, #647	; 0x287
   15170:	b	15184 <flatcc_builder_create_vtable@@Base+0x10c>
   15174:	movw	r0, #40392	; 0x9dc8
   15178:	movw	r1, #35874	; 0x8c22
   1517c:	movw	r3, #40071	; 0x9c87
   15180:	movw	r2, #651	; 0x28b
   15184:	movt	r0, #1
   15188:	movt	r1, #1
   1518c:	movt	r3, #1
   15190:	bl	127a8 <__assert_fail@plt>
   15194:	movw	r0, #40392	; 0x9dc8
   15198:	movw	r1, #35874	; 0x8c22
   1519c:	movw	r3, #40259	; 0x9d43
   151a0:	movw	r2, #677	; 0x2a5
   151a4:	movt	r0, #1
   151a8:	movt	r1, #1
   151ac:	movt	r3, #1
   151b0:	bl	127a8 <__assert_fail@plt>

000151b4 <flatcc_builder_create_cached_vtable@@Base>:
   151b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151b8:	add	fp, sp, #28
   151bc:	sub	sp, sp, #20
   151c0:	mov	sl, r0
   151c4:	ldr	r0, [r0, #116]	; 0x74
   151c8:	mov	r8, r3
   151cc:	mov	r5, r2
   151d0:	str	r1, [sp, #16]
   151d4:	cmp	r0, #0
   151d8:	beq	1527c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   151dc:	ldr	r1, [sl, #92]	; 0x5c
   151e0:	rsb	r0, r0, #32
   151e4:	lsr	r0, r8, r0
   151e8:	add	r6, r1, r0, lsl #2
   151ec:	cmp	r6, #0
   151f0:	beq	15340 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   151f4:	ldr	r7, [r6]
   151f8:	str	r6, [sp, #12]
   151fc:	cmp	r7, #0
   15200:	beq	15348 <flatcc_builder_create_cached_vtable@@Base+0x194>
   15204:	ldr	r4, [sl, #68]	; 0x44
   15208:	ldr	r8, [sl, #100]	; 0x64
   1520c:	mov	r0, #0
   15210:	str	r0, [sp, #8]
   15214:	add	r9, r8, r7
   15218:	mov	r1, r4
   1521c:	ldr	r0, [r9, #8]
   15220:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15224:	cmp	r0, r5
   15228:	bne	15240 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   1522c:	ldr	r0, [sp, #16]
   15230:	mov	r2, r5
   15234:	bl	12754 <bcmp@plt>
   15238:	cmp	r0, #0
   1523c:	beq	15254 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15240:	ldr	r7, [r9, #12]!
   15244:	mov	r6, r9
   15248:	cmp	r7, #0
   1524c:	bne	15214 <flatcc_builder_create_cached_vtable@@Base+0x60>
   15250:	b	15338 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15254:	ldr	r0, [sl, #152]	; 0x98
   15258:	ldr	r1, [r9, #4]
   1525c:	cmp	r1, r0
   15260:	beq	154ac <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15264:	mov	r6, r9
   15268:	mov	r0, r9
   1526c:	ldr	r7, [r6, #12]!
   15270:	cmp	r7, #0
   15274:	bne	15210 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15278:	b	1534c <flatcc_builder_create_cached_vtable@@Base+0x198>
   1527c:	ldr	r0, [sl, #124]	; 0x7c
   15280:	cmp	r0, #0
   15284:	bne	154f8 <flatcc_builder_create_cached_vtable@@Base+0x344>
   15288:	ldr	r0, [sl, #104]	; 0x68
   1528c:	add	r7, sl, #100	; 0x64
   15290:	cmp	r0, #15
   15294:	bhi	152c0 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15298:	ldr	r0, [sl, #40]	; 0x28
   1529c:	ldr	r6, [sl, #48]	; 0x30
   152a0:	mov	r1, #6
   152a4:	mov	r2, #16
   152a8:	mov	r3, #0
   152ac:	str	r1, [sp]
   152b0:	mov	r1, r7
   152b4:	blx	r6
   152b8:	cmp	r0, #0
   152bc:	bne	154d8 <flatcc_builder_create_cached_vtable@@Base+0x324>
   152c0:	ldr	r0, [r7]
   152c4:	mov	r7, #0
   152c8:	cmp	r0, #0
   152cc:	beq	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   152d0:	mov	r0, #16
   152d4:	mov	r2, #5
   152d8:	add	r1, sl, #92	; 0x5c
   152dc:	mov	r3, #1
   152e0:	mov	r4, #256	; 0x100
   152e4:	str	r0, [sl, #124]	; 0x7c
   152e8:	ldr	r0, [sl, #40]	; 0x28
   152ec:	ldr	r6, [sl, #48]	; 0x30
   152f0:	str	r2, [sp]
   152f4:	mov	r2, #256	; 0x100
   152f8:	blx	r6
   152fc:	cmp	r0, #0
   15300:	bne	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   15304:	ldr	r0, [sl, #96]	; 0x60
   15308:	mov	r1, r4
   1530c:	lsl	r4, r4, #1
   15310:	cmp	r0, r1, lsl #1
   15314:	bcs	15308 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15318:	lsr	r1, r1, #2
   1531c:	mvn	r0, #0
   15320:	mov	r2, #1
   15324:	add	r0, r0, #1
   15328:	cmp	r1, r2, lsl r0
   1532c:	bhi	15324 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15330:	str	r0, [sl, #116]	; 0x74
   15334:	b	151dc <flatcc_builder_create_cached_vtable@@Base+0x28>
   15338:	ldr	r9, [sp, #8]
   1533c:	b	1534c <flatcc_builder_create_cached_vtable@@Base+0x198>
   15340:	mov	r7, #0
   15344:	b	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   15348:	mov	r9, #0
   1534c:	ldr	r4, [sl, #124]	; 0x7c
   15350:	ldr	r0, [sl, #104]	; 0x68
   15354:	add	r7, sl, #100	; 0x64
   15358:	add	r2, r4, #16
   1535c:	cmp	r2, r0
   15360:	bls	15388 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   15364:	ldr	r0, [sl, #40]	; 0x28
   15368:	ldr	r6, [sl, #48]	; 0x30
   1536c:	mov	r1, #6
   15370:	mov	r3, #0
   15374:	str	r1, [sp]
   15378:	mov	r1, r7
   1537c:	blx	r6
   15380:	cmp	r0, #0
   15384:	bne	154d8 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15388:	ldr	r0, [r7]
   1538c:	mov	r7, #0
   15390:	adds	r4, r0, r4
   15394:	beq	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   15398:	ldr	r0, [sl, #124]	; 0x7c
   1539c:	ldr	r1, [sl, #152]	; 0x98
   153a0:	add	r2, r0, #16
   153a4:	str	r2, [sl, #124]	; 0x7c
   153a8:	ldr	r2, [sp, #12]
   153ac:	str	r1, [r4, #4]
   153b0:	ldr	r1, [r2]
   153b4:	str	r1, [r4, #12]
   153b8:	ldr	r1, [sp, #16]
   153bc:	str	r0, [r2]
   153c0:	mov	r0, sl
   153c4:	mov	r2, r5
   153c8:	bl	15078 <flatcc_builder_create_vtable@@Base>
   153cc:	cmp	r0, #0
   153d0:	str	r0, [r4]
   153d4:	beq	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   153d8:	cmp	r9, #0
   153dc:	beq	153f8 <flatcc_builder_create_cached_vtable@@Base+0x244>
   153e0:	ldr	r0, [r9, #8]
   153e4:	str	r0, [r4, #8]
   153e8:	ldr	r7, [r4]
   153ec:	mov	r0, r7
   153f0:	sub	sp, fp, #28
   153f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153f8:	ldr	r6, [sl, #120]	; 0x78
   153fc:	ldr	r0, [sl, #172]	; 0xac
   15400:	add	r2, r6, r5
   15404:	cmp	r0, #0
   15408:	beq	15444 <flatcc_builder_create_cached_vtable@@Base+0x290>
   1540c:	cmp	r0, r2
   15410:	bcs	15444 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15414:	ldr	r0, [sl, #116]	; 0x74
   15418:	cmp	r0, #0
   1541c:	beq	153e8 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15420:	ldr	r0, [sl, #92]	; 0x5c
   15424:	ldr	r2, [sl, #96]	; 0x60
   15428:	mov	r1, #0
   1542c:	mov	r5, #0
   15430:	bl	12778 <memset@plt>
   15434:	mov	r0, #16
   15438:	str	r5, [sl, #120]	; 0x78
   1543c:	str	r0, [sl, #124]	; 0x7c
   15440:	b	153e8 <flatcc_builder_create_cached_vtable@@Base+0x234>
   15444:	ldr	r0, [sl, #72]	; 0x48
   15448:	add	r7, sl, #68	; 0x44
   1544c:	cmp	r2, r0
   15450:	bls	15478 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15454:	ldr	r0, [sl, #40]	; 0x28
   15458:	ldr	ip, [sl, #48]	; 0x30
   1545c:	mov	r1, #2
   15460:	mov	r3, #0
   15464:	str	r1, [sp]
   15468:	mov	r1, r7
   1546c:	blx	ip
   15470:	cmp	r0, #0
   15474:	bne	154d8 <flatcc_builder_create_cached_vtable@@Base+0x324>
   15478:	ldr	r0, [r7]
   1547c:	adds	r0, r0, r6
   15480:	beq	154a4 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   15484:	ldr	r1, [sl, #120]	; 0x78
   15488:	mov	r2, r5
   1548c:	str	r1, [r4, #8]
   15490:	add	r1, r1, r5
   15494:	str	r1, [sl, #120]	; 0x78
   15498:	ldr	r1, [sp, #16]
   1549c:	bl	12718 <memcpy@plt>
   154a0:	b	153e8 <flatcc_builder_create_cached_vtable@@Base+0x234>
   154a4:	mvn	r7, #0
   154a8:	b	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   154ac:	ldr	r0, [sp, #12]
   154b0:	cmp	r6, r0
   154b4:	beq	154d0 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   154b8:	mov	r1, r0
   154bc:	ldr	r0, [r9, #12]
   154c0:	str	r0, [r6]
   154c4:	ldr	r0, [r1]
   154c8:	str	r0, [r9, #12]
   154cc:	str	r7, [r1]
   154d0:	ldr	r7, [r9]
   154d4:	b	153ec <flatcc_builder_create_cached_vtable@@Base+0x238>
   154d8:	movw	r0, #40392	; 0x9dc8
   154dc:	movw	r1, #35874	; 0x8c22
   154e0:	movw	r3, #39938	; 0x9c02
   154e4:	mov	r2, #308	; 0x134
   154e8:	movt	r0, #1
   154ec:	movt	r1, #1
   154f0:	movt	r3, #1
   154f4:	bl	127a8 <__assert_fail@plt>
   154f8:	movw	r0, #40332	; 0x9d8c
   154fc:	movw	r1, #35874	; 0x8c22
   15500:	movw	r3, #40347	; 0x9d9b
   15504:	movw	r2, #342	; 0x156
   15508:	movt	r0, #1
   1550c:	movt	r1, #1
   15510:	movt	r3, #1
   15514:	bl	127a8 <__assert_fail@plt>

00015518 <flatcc_builder_create_table@@Base>:
   15518:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1551c:	add	fp, sp, #24
   15520:	sub	sp, sp, #80	; 0x50
   15524:	ldr	r5, [fp, #12]
   15528:	cmn	r5, #1
   1552c:	ble	15678 <flatcc_builder_create_table@@Base+0x160>
   15530:	ldr	ip, [fp, #16]
   15534:	tst	ip, #1
   15538:	beq	15690 <flatcc_builder_create_table@@Base+0x178>
   1553c:	mov	r8, r0
   15540:	ldrh	r0, [r0, #128]	; 0x80
   15544:	cmp	r3, #4
   15548:	movls	r3, #4
   1554c:	cmp	r0, r3
   15550:	strhcc	r3, [r8, #128]	; 0x80
   15554:	cmp	r5, #1
   15558:	ldr	r0, [r8, #136]	; 0x88
   1555c:	sub	r4, r0, r2
   15560:	sub	r0, r3, #1
   15564:	and	r0, r4, r0
   15568:	sub	r4, r4, #4
   1556c:	add	r3, ip, r0
   15570:	sub	r3, r4, r3
   15574:	add	r3, r3, #1
   15578:	str	r3, [fp, #-28]	; 0xffffffe4
   1557c:	blt	155ac <flatcc_builder_create_table@@Base+0x94>
   15580:	ldr	r3, [fp, #8]
   15584:	sub	ip, r4, r0
   15588:	mvn	r4, #3
   1558c:	sub	r4, r4, ip
   15590:	ldrh	r6, [r3], #2
   15594:	subs	r5, r5, #1
   15598:	ldr	r7, [r6, r1]
   1559c:	add	r7, r4, r7
   155a0:	sub	r7, r7, r6
   155a4:	str	r7, [r6, r1]
   155a8:	bne	15590 <flatcc_builder_create_table@@Base+0x78>
   155ac:	mov	r4, #4
   155b0:	sub	r3, fp, #28
   155b4:	cmp	r2, #0
   155b8:	str	r4, [sp, #16]
   155bc:	str	r3, [sp, #12]
   155c0:	mov	r3, #1
   155c4:	str	r4, [sp, #4]
   155c8:	addne	r4, r2, #4
   155cc:	str	r3, [sp, #8]
   155d0:	movne	r3, #2
   155d4:	strne	r2, [sp, #24]
   155d8:	strne	r1, [sp, #20]
   155dc:	strne	r3, [sp, #8]
   155e0:	strne	r4, [sp, #4]
   155e4:	cmp	r0, #0
   155e8:	beq	15614 <flatcc_builder_create_table@@Base+0xfc>
   155ec:	add	r1, sp, #4
   155f0:	movw	r2, #35344	; 0x8a10
   155f4:	add	r4, r4, r0
   155f8:	add	r1, r1, r3, lsl #3
   155fc:	movt	r2, #1
   15600:	add	r3, r3, #1
   15604:	str	r4, [sp, #4]
   15608:	str	r2, [r1, #8]
   1560c:	str	r0, [r1, #12]
   15610:	str	r3, [sp, #8]
   15614:	cmp	r4, #0
   15618:	ble	156b0 <flatcc_builder_create_table@@Base+0x198>
   1561c:	ldr	r0, [r8, #136]	; 0x88
   15620:	ldr	r7, [r8, #44]	; 0x2c
   15624:	add	r1, sp, #4
   15628:	mov	r2, r3
   1562c:	add	r1, r1, #8
   15630:	sub	r5, r0, r4
   15634:	ldr	r0, [r8, #36]	; 0x24
   15638:	str	r4, [sp]
   1563c:	mov	r3, r5
   15640:	blx	r7
   15644:	cmp	r0, #0
   15648:	streq	r5, [r8, #136]	; 0x88
   1564c:	moveq	r0, r5
   15650:	subeq	sp, fp, #24
   15654:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15658:	movw	r0, #40392	; 0x9dc8
   1565c:	movw	r1, #35874	; 0x8c22
   15660:	movw	r3, #40071	; 0x9c87
   15664:	movw	r2, #651	; 0x28b
   15668:	movt	r0, #1
   1566c:	movt	r1, #1
   15670:	movt	r3, #1
   15674:	bl	127a8 <__assert_fail@plt>
   15678:	movw	r0, #37758	; 0x937e
   1567c:	movw	r1, #35874	; 0x8c22
   15680:	movw	r3, #37776	; 0x9390
   15684:	movw	r2, #1237	; 0x4d5
   15688:	movt	r0, #1
   1568c:	b	156a4 <flatcc_builder_create_table@@Base+0x18c>
   15690:	movw	r0, #37932	; 0x942c
   15694:	movw	r1, #35874	; 0x8c22
   15698:	movw	r3, #37776	; 0x9390
   1569c:	movw	r2, #1243	; 0x4db
   156a0:	movt	r0, #1
   156a4:	movt	r1, #1
   156a8:	movt	r3, #1
   156ac:	bl	127a8 <__assert_fail@plt>
   156b0:	movw	r0, #40392	; 0x9dc8
   156b4:	movw	r1, #35874	; 0x8c22
   156b8:	movw	r3, #40071	; 0x9c87
   156bc:	movw	r2, #647	; 0x287
   156c0:	b	15668 <flatcc_builder_create_table@@Base+0x150>

000156c4 <flatcc_builder_check_required_field@@Base>:
   156c4:	push	{fp, lr}
   156c8:	mov	fp, sp
   156cc:	ldr	r2, [r0, #32]
   156d0:	ldrh	r2, [r2, #14]
   156d4:	cmp	r2, #3
   156d8:	bne	15708 <flatcc_builder_check_required_field@@Base+0x44>
   156dc:	ldrh	r3, [r0, #8]
   156e0:	mov	r2, #0
   156e4:	cmp	r3, r1
   156e8:	bls	15700 <flatcc_builder_check_required_field@@Base+0x3c>
   156ec:	ldr	r0, [r0, #4]
   156f0:	add	r0, r0, r1, lsl #1
   156f4:	ldrh	r2, [r0]
   156f8:	cmp	r2, #0
   156fc:	movwne	r2, #1
   15700:	mov	r0, r2
   15704:	pop	{fp, pc}
   15708:	movw	r0, #37943	; 0x9437
   1570c:	movw	r1, #35874	; 0x8c22
   15710:	movw	r3, #37986	; 0x9462
   15714:	movw	r2, #1272	; 0x4f8
   15718:	movt	r0, #1
   1571c:	movt	r1, #1
   15720:	movt	r3, #1
   15724:	bl	127a8 <__assert_fail@plt>

00015728 <flatcc_builder_check_union_field@@Base>:
   15728:	push	{fp, lr}
   1572c:	mov	fp, sp
   15730:	mov	r2, r0
   15734:	ldr	r0, [r0, #32]
   15738:	ldrh	r0, [r0, #14]
   1573c:	cmp	r0, #3
   15740:	bne	157a0 <flatcc_builder_check_union_field@@Base+0x78>
   15744:	mov	r0, #0
   15748:	cmp	r1, #0
   1574c:	beq	1578c <flatcc_builder_check_union_field@@Base+0x64>
   15750:	ldrh	r3, [r2, #8]
   15754:	cmp	r3, r1
   15758:	popls	{fp, pc}
   1575c:	ldr	r0, [r2, #4]
   15760:	add	r0, r0, r1, lsl #1
   15764:	ldrh	r1, [r0, #-2]
   15768:	cmp	r1, #0
   1576c:	beq	15790 <flatcc_builder_check_union_field@@Base+0x68>
   15770:	ldr	r2, [r2, #16]
   15774:	ldrh	r0, [r0]
   15778:	ldrb	r1, [r2, r1]
   1577c:	cmp	r1, #0
   15780:	beq	15794 <flatcc_builder_check_union_field@@Base+0x6c>
   15784:	cmp	r0, #0
   15788:	movwne	r0, #1
   1578c:	pop	{fp, pc}
   15790:	ldrh	r0, [r0]
   15794:	clz	r0, r0
   15798:	lsr	r0, r0, #5
   1579c:	pop	{fp, pc}
   157a0:	movw	r0, #37943	; 0x9437
   157a4:	movw	r1, #35874	; 0x8c22
   157a8:	movw	r3, #38069	; 0x94b5
   157ac:	movw	r2, #1279	; 0x4ff
   157b0:	movt	r0, #1
   157b4:	movt	r1, #1
   157b8:	movt	r3, #1
   157bc:	bl	127a8 <__assert_fail@plt>

000157c0 <flatcc_builder_check_required@@Base>:
   157c0:	push	{fp, lr}
   157c4:	mov	fp, sp
   157c8:	mov	r3, r0
   157cc:	ldr	r0, [r0, #32]
   157d0:	ldrh	r0, [r0, #14]
   157d4:	cmp	r0, #3
   157d8:	bne	15820 <flatcc_builder_check_required@@Base+0x60>
   157dc:	ldrh	ip, [r3, #8]
   157e0:	mov	r0, #0
   157e4:	cmp	ip, r2
   157e8:	poplt	{fp, pc}
   157ec:	cmp	r2, #1
   157f0:	blt	15818 <flatcc_builder_check_required@@Base+0x58>
   157f4:	ldr	ip, [r3, #4]
   157f8:	ldrh	r3, [r1]
   157fc:	add	r3, ip, r3, lsl #1
   15800:	ldrh	r3, [r3]
   15804:	cmp	r3, #0
   15808:	beq	1581c <flatcc_builder_check_required@@Base+0x5c>
   1580c:	add	r1, r1, #2
   15810:	subs	r2, r2, #1
   15814:	bne	157f8 <flatcc_builder_check_required@@Base+0x38>
   15818:	mov	r0, #1
   1581c:	pop	{fp, pc}
   15820:	movw	r0, #37943	; 0x9437
   15824:	movw	r1, #35874	; 0x8c22
   15828:	movw	r3, #38149	; 0x9505
   1582c:	movw	r2, #1297	; 0x511
   15830:	movt	r0, #1
   15834:	movt	r1, #1
   15838:	movt	r3, #1
   1583c:	bl	127a8 <__assert_fail@plt>

00015840 <flatcc_builder_end_table@@Base>:
   15840:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15844:	add	fp, sp, #24
   15848:	sub	sp, sp, #16
   1584c:	mov	r4, r0
   15850:	ldr	r0, [r0, #32]
   15854:	ldrh	r0, [r0, #14]
   15858:	cmp	r0, #3
   1585c:	bne	159d8 <flatcc_builder_end_table@@Base+0x198>
   15860:	ldrh	r0, [r4, #8]
   15864:	ldr	r5, [r4, #4]
   15868:	mov	r1, #4
   1586c:	movw	r2, #31153	; 0x79b1
   15870:	movt	r2, #40503	; 0x9e37
   15874:	add	r0, r1, r0, lsl #1
   15878:	strh	r0, [r5, #-4]!
   1587c:	ldrh	r1, [r4, #20]
   15880:	uxth	r6, r0
   15884:	add	r1, r1, #4
   15888:	strh	r1, [r5, #2]
   1588c:	uxth	r1, r1
   15890:	ldr	r0, [r4, #12]
   15894:	eor	r0, r0, r6
   15898:	mul	r0, r0, r2
   1589c:	eor	r0, r0, r1
   158a0:	mov	r1, r5
   158a4:	mul	r3, r0, r2
   158a8:	mov	r0, r4
   158ac:	mov	r2, r6
   158b0:	str	r3, [r4, #12]
   158b4:	bl	151b4 <flatcc_builder_create_cached_vtable@@Base>
   158b8:	cmp	r0, #0
   158bc:	beq	159c8 <flatcc_builder_end_table@@Base+0x188>
   158c0:	mov	r7, r0
   158c4:	mov	r0, r5
   158c8:	mov	r1, #0
   158cc:	mov	r2, r6
   158d0:	mov	r8, #0
   158d4:	bl	12778 <memset@plt>
   158d8:	ldr	r5, [r4, #32]
   158dc:	ldr	r0, [r4, #76]	; 0x4c
   158e0:	ldr	r6, [r4]
   158e4:	ldrh	r3, [r4, #130]	; 0x82
   158e8:	ldr	r1, [r4, #16]
   158ec:	ldr	r2, [r4, #20]
   158f0:	ldr	r5, [r5, #20]
   158f4:	add	r0, r0, r5
   158f8:	sub	r6, r6, r0
   158fc:	asr	r6, r6, #1
   15900:	stm	sp, {r0, r6, r7}
   15904:	mov	r0, r4
   15908:	bl	15518 <flatcc_builder_create_table@@Base>
   1590c:	cmp	r0, #0
   15910:	beq	159cc <flatcc_builder_end_table@@Base+0x18c>
   15914:	ldr	r1, [r4, #32]
   15918:	mov	r5, r0
   1591c:	ldr	r0, [r4, #16]
   15920:	ldr	r2, [r4, #20]
   15924:	ldr	r3, [r4, #52]	; 0x34
   15928:	ldr	r7, [r1, #24]
   1592c:	str	r7, [r4, #12]
   15930:	ldrh	r7, [r1, #28]
   15934:	strh	r7, [r4, #8]
   15938:	ldr	r7, [r1, #16]
   1593c:	add	r3, r3, r7
   15940:	str	r3, [r4, #4]
   15944:	ldr	r3, [r4, #76]	; 0x4c
   15948:	ldr	r1, [r1, #20]
   1594c:	add	r1, r3, r1
   15950:	str	r1, [r4]
   15954:	mov	r1, #0
   15958:	bl	12778 <memset@plt>
   1595c:	ldr	r0, [r4, #32]
   15960:	ldr	r1, [r4, #60]	; 0x3c
   15964:	ldr	r2, [r4, #64]	; 0x40
   15968:	mov	r8, r5
   1596c:	ldr	r3, [r0, #8]
   15970:	str	r3, [r4, #20]
   15974:	ldr	r3, [r0]
   15978:	str	r3, [r4, #28]
   1597c:	add	r1, r1, r3
   15980:	ldr	r7, [r0, #4]
   15984:	str	r1, [r4, #16]
   15988:	sub	r1, r2, r3
   1598c:	cmp	r1, r7
   15990:	movhi	r1, r7
   15994:	str	r1, [r4, #24]
   15998:	ldrh	r1, [r4, #130]	; 0x82
   1599c:	ldrh	r2, [r4, #128]	; 0x80
   159a0:	cmp	r2, r1
   159a4:	strhcc	r1, [r4, #128]	; 0x80
   159a8:	ldrh	r1, [r0, #12]
   159ac:	sub	r0, r0, #36	; 0x24
   159b0:	str	r0, [r4, #32]
   159b4:	strh	r1, [r4, #130]	; 0x82
   159b8:	ldr	r0, [r4, #156]	; 0x9c
   159bc:	sub	r0, r0, #1
   159c0:	str	r0, [r4, #156]	; 0x9c
   159c4:	b	159cc <flatcc_builder_end_table@@Base+0x18c>
   159c8:	mov	r8, #0
   159cc:	mov	r0, r8
   159d0:	sub	sp, fp, #24
   159d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159d8:	movw	r0, #37943	; 0x9437
   159dc:	movw	r1, #35874	; 0x8c22
   159e0:	movw	r3, #38239	; 0x955f
   159e4:	movw	r2, #1317	; 0x525
   159e8:	movt	r0, #1
   159ec:	movt	r1, #1
   159f0:	movt	r3, #1
   159f4:	bl	127a8 <__assert_fail@plt>

000159f8 <flatcc_builder_create_vector@@Base>:
   159f8:	push	{r4, r5, r6, r7, fp, lr}
   159fc:	add	fp, sp, #16
   15a00:	sub	sp, sp, #80	; 0x50
   15a04:	mov	r7, r0
   15a08:	ldr	r0, [fp, #12]
   15a0c:	cmp	r2, r0
   15a10:	bhi	15b0c <flatcc_builder_create_vector@@Base+0x114>
   15a14:	ldr	r0, [fp, #8]
   15a18:	mov	r4, r2
   15a1c:	ldrh	r2, [r7, #128]	; 0x80
   15a20:	mov	r5, #4
   15a24:	cmp	r0, #4
   15a28:	movls	r0, r5
   15a2c:	cmp	r2, r0
   15a30:	sub	r2, fp, #20
   15a34:	strhcc	r0, [r7, #128]	; 0x80
   15a38:	str	r4, [fp, #-20]	; 0xffffffec
   15a3c:	sub	r0, r0, #1
   15a40:	ldr	ip, [r7, #136]	; 0x88
   15a44:	str	r5, [sp, #16]
   15a48:	str	r2, [sp, #12]
   15a4c:	mov	r2, #1
   15a50:	str	r5, [sp, #4]
   15a54:	str	r2, [sp, #8]
   15a58:	mls	r6, r3, r4, ip
   15a5c:	mul	r3, r3, r4
   15a60:	cmp	r3, #0
   15a64:	and	r0, r6, r0
   15a68:	movne	r2, #2
   15a6c:	addne	r5, r3, #4
   15a70:	strne	r3, [sp, #24]
   15a74:	strne	r1, [sp, #20]
   15a78:	strne	r2, [sp, #8]
   15a7c:	strne	r5, [sp, #4]
   15a80:	cmp	r0, #0
   15a84:	beq	15ab0 <flatcc_builder_create_vector@@Base+0xb8>
   15a88:	add	r1, sp, #4
   15a8c:	movw	r3, #35344	; 0x8a10
   15a90:	add	r5, r5, r0
   15a94:	add	r1, r1, r2, lsl #3
   15a98:	movt	r3, #1
   15a9c:	add	r2, r2, #1
   15aa0:	str	r5, [sp, #4]
   15aa4:	str	r3, [r1, #8]
   15aa8:	str	r0, [r1, #12]
   15aac:	str	r2, [sp, #8]
   15ab0:	cmp	r5, #0
   15ab4:	ble	15b2c <flatcc_builder_create_vector@@Base+0x134>
   15ab8:	ldr	r0, [r7, #36]	; 0x24
   15abc:	ldr	r6, [r7, #44]	; 0x2c
   15ac0:	add	r1, sp, #4
   15ac4:	sub	r4, ip, r5
   15ac8:	str	r5, [sp]
   15acc:	add	r1, r1, #8
   15ad0:	mov	r3, r4
   15ad4:	blx	r6
   15ad8:	cmp	r0, #0
   15adc:	streq	r4, [r7, #136]	; 0x88
   15ae0:	moveq	r0, r4
   15ae4:	subeq	sp, fp, #16
   15ae8:	popeq	{r4, r5, r6, r7, fp, pc}
   15aec:	movw	r0, #40392	; 0x9dc8
   15af0:	movw	r1, #35874	; 0x8c22
   15af4:	movw	r3, #40071	; 0x9c87
   15af8:	movw	r2, #651	; 0x28b
   15afc:	movt	r0, #1
   15b00:	movt	r1, #1
   15b04:	movt	r3, #1
   15b08:	bl	127a8 <__assert_fail@plt>
   15b0c:	movw	r0, #38305	; 0x95a1
   15b10:	movw	r1, #35874	; 0x8c22
   15b14:	movw	r3, #38324	; 0x95b4
   15b18:	movw	r2, #1365	; 0x555
   15b1c:	movt	r0, #1
   15b20:	movt	r1, #1
   15b24:	movt	r3, #1
   15b28:	bl	127a8 <__assert_fail@plt>
   15b2c:	movw	r0, #40392	; 0x9dc8
   15b30:	movw	r1, #35874	; 0x8c22
   15b34:	movw	r3, #40071	; 0x9c87
   15b38:	movw	r2, #647	; 0x287
   15b3c:	b	15afc <flatcc_builder_create_vector@@Base+0x104>

00015b40 <flatcc_builder_end_vector@@Base>:
   15b40:	push	{r4, r5, fp, lr}
   15b44:	add	fp, sp, #8
   15b48:	sub	sp, sp, #8
   15b4c:	mov	r4, r0
   15b50:	ldr	r0, [r0, #32]
   15b54:	ldrh	r1, [r0, #14]
   15b58:	cmp	r1, #4
   15b5c:	bne	15c10 <flatcc_builder_end_vector@@Base+0xd0>
   15b60:	ldr	r3, [r0, #16]
   15b64:	ldr	r2, [r0, #20]
   15b68:	ldr	r0, [r0, #24]
   15b6c:	ldr	r1, [r4, #16]
   15b70:	ldrh	r5, [r4, #130]	; 0x82
   15b74:	str	r0, [sp, #4]
   15b78:	mov	r0, r4
   15b7c:	str	r5, [sp]
   15b80:	bl	159f8 <flatcc_builder_create_vector@@Base>
   15b84:	mov	r5, r0
   15b88:	cmp	r0, #0
   15b8c:	beq	15c04 <flatcc_builder_end_vector@@Base+0xc4>
   15b90:	ldr	r0, [r4, #16]
   15b94:	ldr	r2, [r4, #20]
   15b98:	mov	r1, #0
   15b9c:	bl	12778 <memset@plt>
   15ba0:	ldr	r0, [r4, #32]
   15ba4:	ldr	r1, [r4, #60]	; 0x3c
   15ba8:	ldr	ip, [r4, #64]	; 0x40
   15bac:	ldr	r3, [r0, #8]
   15bb0:	str	r3, [r4, #20]
   15bb4:	ldr	r3, [r0]
   15bb8:	str	r3, [r4, #28]
   15bbc:	add	r1, r1, r3
   15bc0:	ldr	r2, [r0, #4]
   15bc4:	str	r1, [r4, #16]
   15bc8:	sub	r1, ip, r3
   15bcc:	cmp	r1, r2
   15bd0:	movhi	r1, r2
   15bd4:	str	r1, [r4, #24]
   15bd8:	ldrh	r1, [r4, #130]	; 0x82
   15bdc:	ldrh	r2, [r4, #128]	; 0x80
   15be0:	cmp	r2, r1
   15be4:	strhcc	r1, [r4, #128]	; 0x80
   15be8:	ldrh	r1, [r0, #12]
   15bec:	sub	r0, r0, #36	; 0x24
   15bf0:	str	r0, [r4, #32]
   15bf4:	strh	r1, [r4, #130]	; 0x82
   15bf8:	ldr	r0, [r4, #156]	; 0x9c
   15bfc:	sub	r0, r0, #1
   15c00:	str	r0, [r4, #156]	; 0x9c
   15c04:	mov	r0, r5
   15c08:	sub	sp, fp, #8
   15c0c:	pop	{r4, r5, fp, pc}
   15c10:	movw	r0, #36677	; 0x8f45
   15c14:	movw	r1, #35874	; 0x8c22
   15c18:	movw	r3, #38442	; 0x962a
   15c1c:	movw	r2, #1400	; 0x578
   15c20:	movt	r0, #1
   15c24:	movt	r1, #1
   15c28:	movt	r3, #1
   15c2c:	bl	127a8 <__assert_fail@plt>

00015c30 <flatcc_builder_vector_count@@Base>:
   15c30:	ldr	r0, [r0, #32]
   15c34:	ldr	r0, [r0, #20]
   15c38:	bx	lr

00015c3c <flatcc_builder_vector_edit@@Base>:
   15c3c:	ldr	r0, [r0, #16]
   15c40:	bx	lr

00015c44 <flatcc_builder_create_offset_vector_direct@@Base>:
   15c44:	mov	r3, #0
   15c48:	b	15c4c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15c4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c50:	add	fp, sp, #24
   15c54:	sub	sp, sp, #80	; 0x50
   15c58:	mov	r6, #0
   15c5c:	cmn	r2, #-1073741823	; 0xc0000001
   15c60:	bhi	15d9c <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15c64:	mov	r8, r0
   15c68:	ldrh	r0, [r0, #128]	; 0x80
   15c6c:	mov	r5, #4
   15c70:	sub	r7, fp, #28
   15c74:	mov	r4, #1
   15c78:	cmp	r0, #3
   15c7c:	movls	r0, #4
   15c80:	strhls	r0, [r8, #128]	; 0x80
   15c84:	str	r2, [fp, #-28]	; 0xffffffe4
   15c88:	ldr	ip, [r8, #136]	; 0x88
   15c8c:	str	r5, [sp, #16]
   15c90:	str	r7, [sp, #12]
   15c94:	mov	r7, #0
   15c98:	str	r5, [sp, #4]
   15c9c:	str	r4, [sp, #8]
   15ca0:	cmp	r7, r2, lsl #2
   15ca4:	and	r6, ip, #3
   15ca8:	beq	15cc8 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   15cac:	lsl	r7, r2, #2
   15cb0:	mov	r4, #2
   15cb4:	add	r5, r7, #4
   15cb8:	str	r7, [sp, #24]
   15cbc:	str	r1, [sp, #20]
   15cc0:	str	r4, [sp, #8]
   15cc4:	str	r5, [sp, #4]
   15cc8:	cmp	r6, #0
   15ccc:	beq	15cf8 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   15cd0:	add	r7, sp, #4
   15cd4:	movw	r0, #35344	; 0x8a10
   15cd8:	add	r5, r5, r6
   15cdc:	add	r7, r7, r4, lsl #3
   15ce0:	movt	r0, #1
   15ce4:	add	r4, r4, #1
   15ce8:	str	r5, [sp, #4]
   15cec:	str	r0, [r7, #8]
   15cf0:	str	r6, [r7, #12]
   15cf4:	str	r4, [sp, #8]
   15cf8:	cmp	r2, #0
   15cfc:	beq	15d64 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15d00:	sub	r0, r5, ip
   15d04:	mov	r6, r3
   15d08:	sub	r0, r0, #4
   15d0c:	ldr	r7, [r1]
   15d10:	cmp	r7, #0
   15d14:	beq	15d38 <flatcc_builder_create_offset_vector_direct@@Base+0xf4>
   15d18:	add	r7, r0, r7
   15d1c:	cmp	r3, #0
   15d20:	str	r7, [r1]
   15d24:	beq	15d4c <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15d28:	ldrb	r7, [r6]
   15d2c:	cmp	r7, #0
   15d30:	bne	15d4c <flatcc_builder_create_offset_vector_direct@@Base+0x108>
   15d34:	b	15da8 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15d38:	cmp	r3, #0
   15d3c:	beq	15dd8 <flatcc_builder_create_offset_vector_direct@@Base+0x194>
   15d40:	ldrb	r7, [r6]
   15d44:	cmp	r7, #0
   15d48:	bne	15dc0 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   15d4c:	sub	r0, r0, #4
   15d50:	add	r1, r1, #4
   15d54:	add	r6, r6, #1
   15d58:	subs	r2, r2, #1
   15d5c:	bne	15d0c <flatcc_builder_create_offset_vector_direct@@Base+0xc8>
   15d60:	ldr	ip, [r8, #136]	; 0x88
   15d64:	cmp	r5, #0
   15d68:	ble	15df8 <flatcc_builder_create_offset_vector_direct@@Base+0x1b4>
   15d6c:	ldr	r0, [r8, #36]	; 0x24
   15d70:	ldr	r7, [r8, #44]	; 0x2c
   15d74:	add	r1, sp, #4
   15d78:	sub	r6, ip, r5
   15d7c:	mov	r2, r4
   15d80:	str	r5, [sp]
   15d84:	add	r1, r1, #8
   15d88:	mov	r3, r6
   15d8c:	blx	r7
   15d90:	cmp	r0, #0
   15d94:	bne	15e0c <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   15d98:	str	r6, [r8, #136]	; 0x88
   15d9c:	mov	r0, r6
   15da0:	sub	sp, fp, #24
   15da4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15da8:	movw	r0, #40380	; 0x9dbc
   15dac:	movw	r1, #35874	; 0x8c22
   15db0:	movw	r3, #40394	; 0x9dca
   15db4:	movw	r2, #1457	; 0x5b1
   15db8:	movt	r0, #1
   15dbc:	b	15dec <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   15dc0:	movw	r0, #40525	; 0x9e4d
   15dc4:	movw	r1, #35874	; 0x8c22
   15dc8:	movw	r3, #40394	; 0x9dca
   15dcc:	movw	r2, #1461	; 0x5b5
   15dd0:	movt	r0, #1
   15dd4:	b	15dec <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   15dd8:	movw	r0, #40392	; 0x9dc8
   15ddc:	movw	r1, #35874	; 0x8c22
   15de0:	movw	r3, #40394	; 0x9dca
   15de4:	movw	r2, #1463	; 0x5b7
   15de8:	movt	r0, #1
   15dec:	movt	r1, #1
   15df0:	movt	r3, #1
   15df4:	bl	127a8 <__assert_fail@plt>
   15df8:	movw	r0, #40392	; 0x9dc8
   15dfc:	movw	r1, #35874	; 0x8c22
   15e00:	movw	r3, #40071	; 0x9c87
   15e04:	movw	r2, #647	; 0x287
   15e08:	b	15e1c <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   15e0c:	movw	r0, #40392	; 0x9dc8
   15e10:	movw	r1, #35874	; 0x8c22
   15e14:	movw	r3, #40071	; 0x9c87
   15e18:	movw	r2, #651	; 0x28b
   15e1c:	movt	r0, #1
   15e20:	movt	r1, #1
   15e24:	movt	r3, #1
   15e28:	bl	127a8 <__assert_fail@plt>

00015e2c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15e2c:	push	{r4, r5, fp, lr}
   15e30:	add	fp, sp, #8
   15e34:	mov	r4, r0
   15e38:	ldr	r0, [r0, #32]
   15e3c:	mov	r3, r1
   15e40:	ldrh	r1, [r0, #14]
   15e44:	cmp	r1, #5
   15e48:	bne	15ee4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15e4c:	ldr	r2, [r0, #20]
   15e50:	ldr	r1, [r4, #16]
   15e54:	mov	r0, r4
   15e58:	bl	15c4c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15e5c:	mov	r5, r0
   15e60:	cmp	r0, #0
   15e64:	beq	15edc <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   15e68:	ldr	r0, [r4, #16]
   15e6c:	ldr	r2, [r4, #20]
   15e70:	mov	r1, #0
   15e74:	bl	12778 <memset@plt>
   15e78:	ldr	r0, [r4, #32]
   15e7c:	ldr	r1, [r4, #60]	; 0x3c
   15e80:	ldr	ip, [r4, #64]	; 0x40
   15e84:	ldr	r3, [r0, #8]
   15e88:	str	r3, [r4, #20]
   15e8c:	ldr	r3, [r0]
   15e90:	str	r3, [r4, #28]
   15e94:	add	r1, r1, r3
   15e98:	ldr	r2, [r0, #4]
   15e9c:	str	r1, [r4, #16]
   15ea0:	sub	r1, ip, r3
   15ea4:	cmp	r1, r2
   15ea8:	movhi	r1, r2
   15eac:	str	r1, [r4, #24]
   15eb0:	ldrh	r1, [r4, #130]	; 0x82
   15eb4:	ldrh	r2, [r4, #128]	; 0x80
   15eb8:	cmp	r2, r1
   15ebc:	strhcc	r1, [r4, #128]	; 0x80
   15ec0:	ldrh	r1, [r0, #12]
   15ec4:	sub	r0, r0, #36	; 0x24
   15ec8:	str	r0, [r4, #32]
   15ecc:	strh	r1, [r4, #130]	; 0x82
   15ed0:	ldr	r0, [r4, #156]	; 0x9c
   15ed4:	sub	r0, r0, #1
   15ed8:	str	r0, [r4, #156]	; 0x9c
   15edc:	mov	r0, r5
   15ee0:	pop	{r4, r5, fp, pc}
   15ee4:	movw	r0, #36926	; 0x903e
   15ee8:	movw	r1, #35874	; 0x8c22
   15eec:	movw	r3, #38583	; 0x96b7
   15ef0:	movw	r2, #1493	; 0x5d5
   15ef4:	movt	r0, #1
   15ef8:	movt	r1, #1
   15efc:	movt	r3, #1
   15f00:	bl	127a8 <__assert_fail@plt>

00015f04 <flatcc_builder_offset_vector_edit@@Base>:
   15f04:	ldr	r0, [r0, #16]
   15f08:	bx	lr

00015f0c <flatcc_builder_offset_vector_count@@Base>:
   15f0c:	ldr	r0, [r0, #32]
   15f10:	ldr	r0, [r0, #20]
   15f14:	bx	lr

00015f18 <flatcc_builder_table_add_union@@Base>:
   15f18:	push	{r4, r5, r6, r7, fp, lr}
   15f1c:	add	fp, sp, #16
   15f20:	mov	r5, r0
   15f24:	ldr	r0, [r0, #32]
   15f28:	ldrh	r0, [r0, #14]
   15f2c:	cmp	r0, #3
   15f30:	bne	15fb8 <flatcc_builder_table_add_union@@Base+0xa0>
   15f34:	mov	r7, r3
   15f38:	mov	r4, r2
   15f3c:	mov	r6, r1
   15f40:	cmp	r3, #0
   15f44:	beq	15f54 <flatcc_builder_table_add_union@@Base+0x3c>
   15f48:	uxtb	r0, r4
   15f4c:	cmp	r0, #0
   15f50:	beq	15fd0 <flatcc_builder_table_add_union@@Base+0xb8>
   15f54:	cmp	r7, #0
   15f58:	beq	15f74 <flatcc_builder_table_add_union@@Base+0x5c>
   15f5c:	mov	r0, r5
   15f60:	mov	r1, r6
   15f64:	bl	16000 <flatcc_builder_table_add_offset@@Base>
   15f68:	cmp	r0, #0
   15f6c:	beq	15fe8 <flatcc_builder_table_add_union@@Base+0xd0>
   15f70:	str	r7, [r0]
   15f74:	sub	r1, r6, #1
   15f78:	mov	r0, r5
   15f7c:	mov	r2, #1
   15f80:	mov	r3, #1
   15f84:	bl	1612c <flatcc_builder_table_add@@Base>
   15f88:	cmp	r0, #0
   15f8c:	strbne	r4, [r0]
   15f90:	movne	r0, #0
   15f94:	popne	{r4, r5, r6, r7, fp, pc}
   15f98:	movw	r0, #38829	; 0x97ad
   15f9c:	movw	r1, #35874	; 0x8c22
   15fa0:	movw	r3, #38697	; 0x9729
   15fa4:	movw	r2, #1526	; 0x5f6
   15fa8:	movt	r0, #1
   15fac:	movt	r1, #1
   15fb0:	movt	r3, #1
   15fb4:	bl	127a8 <__assert_fail@plt>
   15fb8:	movw	r0, #37943	; 0x9437
   15fbc:	movw	r1, #35874	; 0x8c22
   15fc0:	movw	r3, #38697	; 0x9729
   15fc4:	movw	r2, #1518	; 0x5ee
   15fc8:	movt	r0, #1
   15fcc:	b	15fac <flatcc_builder_table_add_union@@Base+0x94>
   15fd0:	movw	r0, #38785	; 0x9781
   15fd4:	movw	r1, #35874	; 0x8c22
   15fd8:	movw	r3, #38697	; 0x9729
   15fdc:	movw	r2, #1519	; 0x5ef
   15fe0:	movt	r0, #1
   15fe4:	b	15fac <flatcc_builder_table_add_union@@Base+0x94>
   15fe8:	movw	r0, #38819	; 0x97a3
   15fec:	movw	r1, #35874	; 0x8c22
   15ff0:	movw	r3, #38697	; 0x9729
   15ff4:	movw	r2, #1522	; 0x5f2
   15ff8:	movt	r0, #1
   15ffc:	b	15fac <flatcc_builder_table_add_union@@Base+0x94>

00016000 <flatcc_builder_table_add_offset@@Base>:
   16000:	push	{r4, r5, r6, r7, fp, lr}
   16004:	add	fp, sp, #16
   16008:	mov	r4, r0
   1600c:	ldr	r0, [r0, #32]
   16010:	ldrh	r0, [r0, #14]
   16014:	cmp	r0, #3
   16018:	bne	160dc <flatcc_builder_table_add_offset@@Base+0xdc>
   1601c:	movw	r0, #32765	; 0x7ffd
   16020:	mov	r5, r1
   16024:	cmp	r1, r0
   16028:	bcs	160f4 <flatcc_builder_table_add_offset@@Base+0xf4>
   1602c:	ldr	r0, [r4, #4]
   16030:	add	r1, r0, r5, lsl #1
   16034:	ldrh	r1, [r1]
   16038:	cmp	r1, #0
   1603c:	bne	1610c <flatcc_builder_table_add_offset@@Base+0x10c>
   16040:	ldr	r2, [r4, #20]
   16044:	ldr	r1, [r4, #12]
   16048:	ldr	r3, [r4, #24]
   1604c:	add	r2, r2, #3
   16050:	eor	r1, r1, r5
   16054:	bic	r7, r2, #3
   16058:	movw	r2, #31153	; 0x79b1
   1605c:	movt	r2, #40503	; 0x9e37
   16060:	add	r6, r7, #4
   16064:	cmp	r6, r3
   16068:	str	r6, [r4, #20]
   1606c:	mul	r1, r1, r2
   16070:	eor	r1, r1, #4
   16074:	mul	r1, r1, r2
   16078:	str	r1, [r4, #12]
   1607c:	bls	160a4 <flatcc_builder_table_add_offset@@Base+0xa4>
   16080:	mov	r0, r4
   16084:	mov	r1, r6
   16088:	movw	r2, #65532	; 0xfffc
   1608c:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   16090:	mov	r1, r0
   16094:	mov	r0, #0
   16098:	cmp	r1, #0
   1609c:	popne	{r4, r5, r6, r7, fp, pc}
   160a0:	ldr	r0, [r4, #4]
   160a4:	uxth	r1, r5
   160a8:	add	r0, r0, r1, lsl #1
   160ac:	strh	r6, [r0]
   160b0:	ldrh	r0, [r4, #8]
   160b4:	cmp	r0, r1
   160b8:	addls	r0, r5, #1
   160bc:	strhls	r0, [r4, #8]
   160c0:	ldr	r0, [r4]
   160c4:	add	r1, r0, #2
   160c8:	str	r1, [r4]
   160cc:	strh	r7, [r0]
   160d0:	ldr	r0, [r4, #16]
   160d4:	add	r0, r0, r7
   160d8:	pop	{r4, r5, r6, r7, fp, pc}
   160dc:	movw	r0, #37943	; 0x9437
   160e0:	movw	r1, #35874	; 0x8c22
   160e4:	movw	r3, #39723	; 0x9b2b
   160e8:	movw	r2, #1811	; 0x713
   160ec:	movt	r0, #1
   160f0:	b	16120 <flatcc_builder_table_add_offset@@Base+0x120>
   160f4:	movw	r0, #39595	; 0x9aab
   160f8:	movw	r1, #35874	; 0x8c22
   160fc:	movw	r3, #39723	; 0x9b2b
   16100:	movw	r2, #1812	; 0x714
   16104:	movt	r0, #1
   16108:	b	16120 <flatcc_builder_table_add_offset@@Base+0x120>
   1610c:	movw	r0, #40392	; 0x9dc8
   16110:	movw	r1, #35874	; 0x8c22
   16114:	movw	r3, #39723	; 0x9b2b
   16118:	movw	r2, #1819	; 0x71b
   1611c:	movt	r0, #1
   16120:	movt	r1, #1
   16124:	movt	r3, #1
   16128:	bl	127a8 <__assert_fail@plt>

0001612c <flatcc_builder_table_add@@Base>:
   1612c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16130:	add	fp, sp, #24
   16134:	mov	r4, r0
   16138:	ldr	r0, [r0, #32]
   1613c:	ldrh	r0, [r0, #14]
   16140:	cmp	r0, #3
   16144:	bne	16214 <flatcc_builder_table_add@@Base+0xe8>
   16148:	movw	r0, #32765	; 0x7ffd
   1614c:	mov	r8, r1
   16150:	cmp	r1, r0
   16154:	bcs	1622c <flatcc_builder_table_add@@Base+0x100>
   16158:	ldrh	r0, [r4, #130]	; 0x82
   1615c:	cmp	r0, r3
   16160:	strhcc	r3, [r4, #130]	; 0x82
   16164:	ldr	r0, [r4, #4]
   16168:	add	r1, r0, r8, lsl #1
   1616c:	ldrh	r1, [r1]
   16170:	cmp	r1, #0
   16174:	bne	16244 <flatcc_builder_table_add@@Base+0x118>
   16178:	ldr	r1, [r4, #12]
   1617c:	movw	r7, #31153	; 0x79b1
   16180:	ldr	r6, [r4, #20]
   16184:	ldr	r5, [r4, #24]
   16188:	movt	r7, #40503	; 0x9e37
   1618c:	eor	r1, r1, r8
   16190:	mul	r1, r1, r7
   16194:	eor	r1, r1, r2
   16198:	mul	r1, r1, r7
   1619c:	str	r1, [r4, #12]
   161a0:	add	r1, r3, r6
   161a4:	rsb	r3, r3, #0
   161a8:	sub	r1, r1, #1
   161ac:	and	r6, r1, r3
   161b0:	add	r1, r6, r2
   161b4:	cmp	r1, r5
   161b8:	str	r1, [r4, #20]
   161bc:	bcc	161e8 <flatcc_builder_table_add@@Base+0xbc>
   161c0:	add	r1, r1, #1
   161c4:	mov	r0, r4
   161c8:	movw	r2, #65532	; 0xfffc
   161cc:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   161d0:	mov	r1, r0
   161d4:	mov	r0, #0
   161d8:	cmp	r1, #0
   161dc:	beq	161e4 <flatcc_builder_table_add@@Base+0xb8>
   161e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161e4:	ldr	r0, [r4, #4]
   161e8:	uxth	r1, r8
   161ec:	add	r2, r6, #4
   161f0:	add	r0, r0, r1, lsl #1
   161f4:	strh	r2, [r0]
   161f8:	ldrh	r0, [r4, #8]
   161fc:	cmp	r0, r1
   16200:	addls	r0, r8, #1
   16204:	strhls	r0, [r4, #8]
   16208:	ldr	r0, [r4, #16]
   1620c:	add	r0, r0, r6
   16210:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16214:	movw	r0, #37943	; 0x9437
   16218:	movw	r1, #35874	; 0x8c22
   1621c:	movw	r3, #39521	; 0x9a61
   16220:	movw	r2, #1773	; 0x6ed
   16224:	movt	r0, #1
   16228:	b	16258 <flatcc_builder_table_add@@Base+0x12c>
   1622c:	movw	r0, #39595	; 0x9aab
   16230:	movw	r1, #35874	; 0x8c22
   16234:	movw	r3, #39521	; 0x9a61
   16238:	movw	r2, #1774	; 0x6ee
   1623c:	movt	r0, #1
   16240:	b	16258 <flatcc_builder_table_add@@Base+0x12c>
   16244:	movw	r0, #40392	; 0x9dc8
   16248:	movw	r1, #35874	; 0x8c22
   1624c:	movw	r3, #39521	; 0x9a61
   16250:	movw	r2, #1784	; 0x6f8
   16254:	movt	r0, #1
   16258:	movt	r1, #1
   1625c:	movt	r3, #1
   16260:	bl	127a8 <__assert_fail@plt>

00016264 <flatcc_builder_table_add_union_vector@@Base>:
   16264:	push	{r4, r5, r6, r7, fp, lr}
   16268:	add	fp, sp, #16
   1626c:	mov	r6, r0
   16270:	ldr	r0, [r0, #32]
   16274:	ldrh	r0, [r0, #14]
   16278:	cmp	r0, #3
   1627c:	bne	162e8 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16280:	mov	r5, r1
   16284:	clz	r1, r3
   16288:	cmp	r2, #0
   1628c:	mov	r0, r2
   16290:	mov	r4, r3
   16294:	mov	r7, r2
   16298:	movwne	r0, #1
   1629c:	lsr	r1, r1, #5
   162a0:	teq	r1, r0
   162a4:	beq	16300 <flatcc_builder_table_add_union_vector@@Base+0x9c>
   162a8:	cmp	r7, #0
   162ac:	beq	162e0 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   162b0:	sub	r1, r5, #1
   162b4:	mov	r0, r6
   162b8:	bl	16000 <flatcc_builder_table_add_offset@@Base>
   162bc:	cmp	r0, #0
   162c0:	beq	16318 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   162c4:	str	r7, [r0]
   162c8:	mov	r0, r6
   162cc:	mov	r1, r5
   162d0:	bl	16000 <flatcc_builder_table_add_offset@@Base>
   162d4:	cmp	r0, #0
   162d8:	beq	1632c <flatcc_builder_table_add_union_vector@@Base+0xc8>
   162dc:	str	r4, [r0]
   162e0:	mov	r0, #0
   162e4:	pop	{r4, r5, r6, r7, fp, pc}
   162e8:	movw	r0, #37943	; 0x9437
   162ec:	movw	r1, #35874	; 0x8c22
   162f0:	movw	r3, #38841	; 0x97b9
   162f4:	mov	r2, #1536	; 0x600
   162f8:	movt	r0, #1
   162fc:	b	16340 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   16300:	movw	r0, #38940	; 0x981c
   16304:	movw	r1, #35874	; 0x8c22
   16308:	movw	r3, #38841	; 0x97b9
   1630c:	movw	r2, #1537	; 0x601
   16310:	movt	r0, #1
   16314:	b	16340 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   16318:	movw	r0, #38819	; 0x97a3
   1631c:	movw	r1, #35874	; 0x8c22
   16320:	movw	r3, #38841	; 0x97b9
   16324:	movw	r2, #1540	; 0x604
   16328:	b	1633c <flatcc_builder_table_add_union_vector@@Base+0xd8>
   1632c:	movw	r0, #38819	; 0x97a3
   16330:	movw	r1, #35874	; 0x8c22
   16334:	movw	r3, #38841	; 0x97b9
   16338:	movw	r2, #1544	; 0x608
   1633c:	movt	r0, #1
   16340:	movt	r1, #1
   16344:	movt	r3, #1
   16348:	bl	127a8 <__assert_fail@plt>

0001634c <flatcc_builder_create_union_vector@@Base>:
   1634c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16350:	add	fp, sp, #28
   16354:	sub	sp, sp, #20
   16358:	mov	sl, r0
   1635c:	mov	r0, #0
   16360:	mov	r9, r3
   16364:	mov	r7, r2
   16368:	mov	r4, r1
   1636c:	str	r0, [sl]
   16370:	str	r0, [sl, #4]
   16374:	mov	r0, r1
   16378:	bl	14ba0 <flatcc_builder_start_offset_vector@@Base>
   1637c:	cmp	r0, #0
   16380:	beq	1638c <flatcc_builder_create_union_vector@@Base+0x40>
   16384:	sub	sp, fp, #28
   16388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1638c:	mov	r0, r4
   16390:	mov	r1, r9
   16394:	bl	14574 <flatcc_builder_extend_offset_vector@@Base>
   16398:	cmp	r0, #0
   1639c:	beq	16384 <flatcc_builder_create_union_vector@@Base+0x38>
   163a0:	ldr	r8, [r4, #20]
   163a4:	ldr	r1, [r4, #24]
   163a8:	add	r0, r8, r9
   163ac:	cmp	r0, r1
   163b0:	str	r0, [r4, #20]
   163b4:	bcc	163d0 <flatcc_builder_create_union_vector@@Base+0x84>
   163b8:	add	r1, r0, #1
   163bc:	mov	r0, r4
   163c0:	mvn	r2, #3
   163c4:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   163c8:	cmp	r0, #0
   163cc:	bne	16384 <flatcc_builder_create_union_vector@@Base+0x38>
   163d0:	ldr	r3, [r4, #16]
   163d4:	adds	r2, r3, r8
   163d8:	beq	16384 <flatcc_builder_create_union_vector@@Base+0x38>
   163dc:	cmp	r9, #0
   163e0:	beq	16410 <flatcc_builder_create_union_vector@@Base+0xc4>
   163e4:	add	r0, r7, #4
   163e8:	mov	r1, r2
   163ec:	mov	r7, r3
   163f0:	mov	r6, r9
   163f4:	ldrb	r5, [r0, #-4]
   163f8:	subs	r6, r6, #1
   163fc:	strb	r5, [r1], #1
   16400:	ldr	r5, [r0]
   16404:	add	r0, r0, #8
   16408:	str	r5, [r7], #4
   1640c:	bne	163f4 <flatcc_builder_create_union_vector@@Base+0xa8>
   16410:	add	r0, sp, #8
   16414:	mov	r1, r4
   16418:	str	r9, [sp]
   1641c:	bl	164a4 <flatcc_builder_create_union_vector_direct@@Base>
   16420:	ldr	r0, [sp, #8]
   16424:	ldr	r1, [sp, #12]
   16428:	stm	sl, {r0, r1}
   1642c:	mov	r1, #0
   16430:	ldr	r0, [r4, #16]
   16434:	ldr	r2, [r4, #20]
   16438:	bl	12778 <memset@plt>
   1643c:	ldr	r0, [r4, #32]
   16440:	ldr	r1, [r4, #60]	; 0x3c
   16444:	ldr	r2, [r4, #64]	; 0x40
   16448:	ldr	r3, [r0, #8]
   1644c:	str	r3, [r4, #20]
   16450:	ldr	r3, [r0]
   16454:	str	r3, [r4, #28]
   16458:	add	r1, r1, r3
   1645c:	ldr	r7, [r0, #4]
   16460:	str	r1, [r4, #16]
   16464:	sub	r1, r2, r3
   16468:	cmp	r1, r7
   1646c:	movhi	r1, r7
   16470:	str	r1, [r4, #24]
   16474:	ldrh	r1, [r4, #130]	; 0x82
   16478:	ldrh	r2, [r4, #128]	; 0x80
   1647c:	cmp	r2, r1
   16480:	strhcc	r1, [r4, #128]	; 0x80
   16484:	ldrh	r1, [r0, #12]
   16488:	sub	r0, r0, #36	; 0x24
   1648c:	str	r0, [r4, #32]
   16490:	strh	r1, [r4, #130]	; 0x82
   16494:	ldr	r0, [r4, #156]	; 0x9c
   16498:	sub	r0, r0, #1
   1649c:	str	r0, [r4, #156]	; 0x9c
   164a0:	b	16384 <flatcc_builder_create_union_vector@@Base+0x38>

000164a4 <flatcc_builder_create_union_vector_direct@@Base>:
   164a4:	push	{r4, r5, r6, r7, fp, lr}
   164a8:	add	fp, sp, #16
   164ac:	sub	sp, sp, #8
   164b0:	ldr	r7, [fp, #8]
   164b4:	mov	r5, r2
   164b8:	mov	r4, r0
   164bc:	mov	r0, #0
   164c0:	mov	r6, r1
   164c4:	str	r0, [r4]
   164c8:	str	r0, [r4, #4]
   164cc:	mov	r0, r1
   164d0:	mov	r1, r3
   164d4:	mov	r3, r5
   164d8:	mov	r2, r7
   164dc:	bl	15c4c <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   164e0:	cmp	r0, #0
   164e4:	str	r0, [r4, #4]
   164e8:	beq	16514 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   164ec:	mvn	r0, #0
   164f0:	mov	r1, #1
   164f4:	mov	r2, r7
   164f8:	mov	r3, #1
   164fc:	str	r1, [sp]
   16500:	str	r0, [sp, #4]
   16504:	mov	r0, r6
   16508:	mov	r1, r5
   1650c:	bl	159f8 <flatcc_builder_create_vector@@Base>
   16510:	str	r0, [r4]
   16514:	sub	sp, fp, #16
   16518:	pop	{r4, r5, r6, r7, fp, pc}

0001651c <flatcc_builder_start_union_vector@@Base>:
   1651c:	push	{r4, sl, fp, lr}
   16520:	add	fp, sp, #8
   16524:	mov	r1, #4
   16528:	mov	r4, r0
   1652c:	bl	13f40 <flatcc_builder_start_buffer@@Base+0xbc>
   16530:	mov	r1, r0
   16534:	mvn	r0, #0
   16538:	cmp	r1, #0
   1653c:	popne	{r4, sl, fp, pc}
   16540:	ldr	r0, [r4, #32]
   16544:	mov	r1, #8
   16548:	mov	r2, #7
   1654c:	str	r1, [r0, #16]
   16550:	mov	r0, #0
   16554:	ldr	r1, [r4, #32]
   16558:	str	r0, [r1, #20]
   1655c:	ldr	r1, [r4, #32]
   16560:	strh	r2, [r1, #14]
   16564:	ldr	r2, [r4, #28]
   16568:	ldr	r3, [r4, #60]	; 0x3c
   1656c:	ldr	ip, [r4, #64]	; 0x40
   16570:	add	r3, r3, r2
   16574:	sub	r2, ip, r2
   16578:	str	r3, [r4, #16]
   1657c:	mvn	r3, #3
   16580:	cmn	r2, #4
   16584:	movcs	r2, r3
   16588:	str	r2, [r4, #24]
   1658c:	str	r3, [r1, #4]
   16590:	pop	{r4, sl, fp, pc}

00016594 <flatcc_builder_end_union_vector@@Base>:
   16594:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16598:	add	fp, sp, #24
   1659c:	sub	sp, sp, #16
   165a0:	mov	r8, r0
   165a4:	mov	r0, #0
   165a8:	mov	r4, r1
   165ac:	str	r0, [r8]
   165b0:	str	r0, [r8, #4]
   165b4:	ldr	r0, [r1, #32]
   165b8:	ldrh	r1, [r0, #14]
   165bc:	cmp	r1, #7
   165c0:	bne	166d8 <flatcc_builder_end_union_vector@@Base+0x144>
   165c4:	ldr	r9, [r0, #20]
   165c8:	ldr	r7, [r4, #20]
   165cc:	ldr	r1, [r4, #24]
   165d0:	add	r0, r9, r9, lsl #2
   165d4:	add	r0, r7, r0
   165d8:	cmp	r0, r1
   165dc:	str	r0, [r4, #20]
   165e0:	bcc	165fc <flatcc_builder_end_union_vector@@Base+0x68>
   165e4:	add	r1, r0, #1
   165e8:	mov	r0, r4
   165ec:	mvn	r2, #3
   165f0:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   165f4:	cmp	r0, #0
   165f8:	bne	166d0 <flatcc_builder_end_union_vector@@Base+0x13c>
   165fc:	ldr	r0, [r4, #16]
   16600:	adds	r3, r0, r7
   16604:	beq	166d0 <flatcc_builder_end_union_vector@@Base+0x13c>
   16608:	add	r2, r3, r9, lsl #2
   1660c:	cmp	r9, #0
   16610:	beq	16640 <flatcc_builder_end_union_vector@@Base+0xac>
   16614:	add	r0, r0, #4
   16618:	mov	r1, r2
   1661c:	mov	r7, r3
   16620:	mov	r6, r9
   16624:	ldrb	r5, [r0, #-4]
   16628:	subs	r6, r6, #1
   1662c:	strb	r5, [r1], #1
   16630:	ldr	r5, [r0]
   16634:	add	r0, r0, #8
   16638:	str	r5, [r7], #4
   1663c:	bne	16624 <flatcc_builder_end_union_vector@@Base+0x90>
   16640:	add	r0, sp, #8
   16644:	mov	r1, r4
   16648:	str	r9, [sp]
   1664c:	bl	164a4 <flatcc_builder_create_union_vector_direct@@Base>
   16650:	ldr	r0, [sp, #8]
   16654:	ldr	r1, [sp, #12]
   16658:	stm	r8, {r0, r1}
   1665c:	mov	r1, #0
   16660:	ldr	r0, [r4, #16]
   16664:	ldr	r2, [r4, #20]
   16668:	bl	12778 <memset@plt>
   1666c:	ldr	r0, [r4, #32]
   16670:	ldr	r1, [r4, #60]	; 0x3c
   16674:	ldr	r2, [r4, #64]	; 0x40
   16678:	ldr	r3, [r0, #8]
   1667c:	str	r3, [r4, #20]
   16680:	ldr	r3, [r0]
   16684:	str	r3, [r4, #28]
   16688:	add	r1, r1, r3
   1668c:	ldr	r7, [r0, #4]
   16690:	str	r1, [r4, #16]
   16694:	sub	r1, r2, r3
   16698:	cmp	r1, r7
   1669c:	movhi	r1, r7
   166a0:	str	r1, [r4, #24]
   166a4:	ldrh	r1, [r4, #130]	; 0x82
   166a8:	ldrh	r2, [r4, #128]	; 0x80
   166ac:	cmp	r2, r1
   166b0:	strhcc	r1, [r4, #128]	; 0x80
   166b4:	ldrh	r1, [r0, #12]
   166b8:	sub	r0, r0, #36	; 0x24
   166bc:	str	r0, [r4, #32]
   166c0:	strh	r1, [r4, #130]	; 0x82
   166c4:	ldr	r0, [r4, #156]	; 0x9c
   166c8:	sub	r0, r0, #1
   166cc:	str	r0, [r4, #156]	; 0x9c
   166d0:	sub	sp, fp, #24
   166d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   166d8:	movw	r0, #38980	; 0x9844
   166dc:	movw	r1, #35874	; 0x8c22
   166e0:	movw	r3, #39030	; 0x9876
   166e4:	movw	r2, #1617	; 0x651
   166e8:	movt	r0, #1
   166ec:	movt	r1, #1
   166f0:	movt	r3, #1
   166f4:	bl	127a8 <__assert_fail@plt>

000166f8 <flatcc_builder_union_vector_count@@Base>:
   166f8:	ldr	r0, [r0, #32]
   166fc:	ldr	r0, [r0, #20]
   16700:	bx	lr

00016704 <flatcc_builder_union_vector_edit@@Base>:
   16704:	ldr	r0, [r0, #16]
   16708:	bx	lr

0001670c <flatcc_builder_extend_union_vector@@Base>:
   1670c:	push	{r4, r5, fp, lr}
   16710:	add	fp, sp, #8
   16714:	mov	r4, r0
   16718:	ldr	r0, [r0, #32]
   1671c:	ldr	r2, [r0, #20]
   16720:	adds	r2, r2, r1
   16724:	cmpcc	r2, #536870912	; 0x20000000
   16728:	bcc	1674c <flatcc_builder_extend_union_vector@@Base+0x40>
   1672c:	movw	r0, #40145	; 0x9cd1
   16730:	movw	r1, #35874	; 0x8c22
   16734:	movw	r3, #40172	; 0x9cec
   16738:	mov	r2, #892	; 0x37c
   1673c:	movt	r0, #1
   16740:	movt	r1, #1
   16744:	movt	r3, #1
   16748:	bl	127a8 <__assert_fail@plt>
   1674c:	str	r2, [r0, #20]
   16750:	ldr	r5, [r4, #20]
   16754:	ldr	r2, [r4, #24]
   16758:	add	r0, r5, r1, lsl #3
   1675c:	cmp	r0, r2
   16760:	str	r0, [r4, #20]
   16764:	bcc	16788 <flatcc_builder_extend_union_vector@@Base+0x7c>
   16768:	add	r1, r0, #1
   1676c:	mov	r0, r4
   16770:	mvn	r2, #3
   16774:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   16778:	mov	r1, r0
   1677c:	mov	r0, #0
   16780:	cmp	r1, #0
   16784:	popne	{r4, r5, fp, pc}
   16788:	ldr	r0, [r4, #16]
   1678c:	add	r0, r0, r5
   16790:	pop	{r4, r5, fp, pc}

00016794 <flatcc_builder_truncate_union_vector@@Base>:
   16794:	push	{fp, lr}
   16798:	mov	fp, sp
   1679c:	ldr	r2, [r0, #32]
   167a0:	ldrh	r3, [r2, #14]
   167a4:	cmp	r3, #7
   167a8:	bne	167f0 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   167ac:	ldr	r3, [r2, #20]
   167b0:	cmp	r3, r1
   167b4:	bcc	16808 <flatcc_builder_truncate_union_vector@@Base+0x74>
   167b8:	sub	r3, r3, r1
   167bc:	str	r3, [r2, #20]
   167c0:	ldr	r2, [r0, #32]
   167c4:	ldr	r3, [r0, #20]
   167c8:	ldr	ip, [r0, #16]
   167cc:	ldr	r2, [r2, #16]
   167d0:	mls	r3, r2, r1, r3
   167d4:	mul	r2, r2, r1
   167d8:	mov	r1, #0
   167dc:	str	r3, [r0, #20]
   167e0:	add	r0, ip, r3
   167e4:	bl	12778 <memset@plt>
   167e8:	mov	r0, #0
   167ec:	pop	{fp, pc}
   167f0:	movw	r0, #38980	; 0x9844
   167f4:	movw	r1, #35874	; 0x8c22
   167f8:	movw	r3, #39113	; 0x98c9
   167fc:	movw	r2, #1665	; 0x681
   16800:	movt	r0, #1
   16804:	b	1681c <flatcc_builder_truncate_union_vector@@Base+0x88>
   16808:	movw	r0, #37544	; 0x92a8
   1680c:	movw	r1, #35874	; 0x8c22
   16810:	movw	r3, #39113	; 0x98c9
   16814:	movw	r2, #1666	; 0x682
   16818:	movt	r0, #1
   1681c:	movt	r1, #1
   16820:	movt	r3, #1
   16824:	bl	127a8 <__assert_fail@plt>

00016828 <flatcc_builder_union_vector_push@@Base>:
   16828:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1682c:	add	fp, sp, #24
   16830:	mov	r7, r0
   16834:	ldr	r0, [r0, #32]
   16838:	mov	r5, r1
   1683c:	ldrh	r1, [r0, #14]
   16840:	cmp	r1, #7
   16844:	bne	168ac <flatcc_builder_union_vector_push@@Base+0x84>
   16848:	ldr	r1, [r0, #20]
   1684c:	mov	r6, #0
   16850:	cmn	r1, #-536870911	; 0xe0000001
   16854:	beq	168a4 <flatcc_builder_union_vector_push@@Base+0x7c>
   16858:	add	r1, r1, #1
   1685c:	mov	r8, r2
   16860:	str	r1, [r0, #20]
   16864:	ldr	r4, [r7, #20]
   16868:	ldr	r0, [r7, #24]
   1686c:	add	r1, r4, #8
   16870:	cmp	r1, r0
   16874:	str	r1, [r7, #20]
   16878:	bcc	16894 <flatcc_builder_union_vector_push@@Base+0x6c>
   1687c:	add	r1, r4, #9
   16880:	mov	r0, r7
   16884:	mvn	r2, #3
   16888:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   1688c:	cmp	r0, #0
   16890:	bne	168a4 <flatcc_builder_union_vector_push@@Base+0x7c>
   16894:	ldr	r0, [r7, #16]
   16898:	adds	r0, r0, r4
   1689c:	movne	r6, r0
   168a0:	stmne	r0, {r5, r8}
   168a4:	mov	r0, r6
   168a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168ac:	movw	r0, #38980	; 0x9844
   168b0:	movw	r1, #35874	; 0x8c22
   168b4:	movw	r3, #39182	; 0x990e
   168b8:	movw	r2, #1677	; 0x68d
   168bc:	movt	r0, #1
   168c0:	movt	r1, #1
   168c4:	movt	r3, #1
   168c8:	bl	127a8 <__assert_fail@plt>

000168cc <flatcc_builder_append_union_vector@@Base>:
   168cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   168d0:	add	fp, sp, #24
   168d4:	mov	r6, r0
   168d8:	ldr	r0, [r0, #32]
   168dc:	mov	r8, r1
   168e0:	ldrh	r1, [r0, #14]
   168e4:	cmp	r1, #7
   168e8:	bne	16984 <flatcc_builder_append_union_vector@@Base+0xb8>
   168ec:	ldr	r1, [r0, #20]
   168f0:	mov	r5, r2
   168f4:	adds	r1, r1, r2
   168f8:	cmpcc	r1, #536870912	; 0x20000000
   168fc:	bcc	16920 <flatcc_builder_append_union_vector@@Base+0x54>
   16900:	movw	r0, #40145	; 0x9cd1
   16904:	movw	r1, #35874	; 0x8c22
   16908:	movw	r3, #40172	; 0x9cec
   1690c:	mov	r2, #892	; 0x37c
   16910:	movt	r0, #1
   16914:	movt	r1, #1
   16918:	movt	r3, #1
   1691c:	bl	127a8 <__assert_fail@plt>
   16920:	str	r1, [r0, #20]
   16924:	ldr	r4, [r6, #20]
   16928:	ldr	r1, [r6, #24]
   1692c:	add	r0, r4, r5, lsl #3
   16930:	cmp	r0, r1
   16934:	str	r0, [r6, #20]
   16938:	bcc	16958 <flatcc_builder_append_union_vector@@Base+0x8c>
   1693c:	add	r1, r0, #1
   16940:	mov	r0, r6
   16944:	mvn	r2, #3
   16948:	bl	16fb4 <flatcc_builder_get_emit_context@@Base+0x8>
   1694c:	mov	r7, #0
   16950:	cmp	r0, #0
   16954:	bne	1697c <flatcc_builder_append_union_vector@@Base+0xb0>
   16958:	ldr	r0, [r6, #16]
   1695c:	adds	r7, r0, r4
   16960:	beq	16978 <flatcc_builder_append_union_vector@@Base+0xac>
   16964:	lsl	r2, r5, #3
   16968:	mov	r0, r7
   1696c:	mov	r1, r8
   16970:	bl	12718 <memcpy@plt>
   16974:	b	1697c <flatcc_builder_append_union_vector@@Base+0xb0>
   16978:	mov	r7, #0
   1697c:	mov	r0, r7
   16980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16984:	movw	r0, #38980	; 0x9844
   16988:	movw	r1, #35874	; 0x8c22
   1698c:	movw	r3, #39291	; 0x997b
   16990:	movw	r2, #1692	; 0x69c
   16994:	movt	r0, #1
   16998:	movt	r1, #1
   1699c:	movt	r3, #1
   169a0:	bl	127a8 <__assert_fail@plt>

000169a4 <flatcc_builder_create_string@@Base>:
   169a4:	push	{r4, r5, r6, sl, fp, lr}
   169a8:	add	fp, sp, #16
   169ac:	sub	sp, sp, #80	; 0x50
   169b0:	str	r2, [fp, #-20]	; 0xffffffec
   169b4:	mvn	r5, r2
   169b8:	mov	r6, r0
   169bc:	sub	r3, fp, #20
   169c0:	cmp	r2, #0
   169c4:	add	lr, sp, #4
   169c8:	ldr	ip, [r0, #136]	; 0x88
   169cc:	mov	r0, #4
   169d0:	str	r0, [sp, #16]
   169d4:	str	r3, [sp, #12]
   169d8:	mov	r3, #1
   169dc:	str	r0, [sp, #4]
   169e0:	addne	r0, r2, #4
   169e4:	str	r3, [sp, #8]
   169e8:	strne	r2, [sp, #24]
   169ec:	movw	r2, #35344	; 0x8a10
   169f0:	movne	r3, #2
   169f4:	strne	r1, [sp, #20]
   169f8:	strne	r3, [sp, #8]
   169fc:	strne	r0, [sp, #4]
   16a00:	movt	r2, #1
   16a04:	add	r5, ip, r5
   16a08:	and	r5, r5, #3
   16a0c:	add	r5, r5, #1
   16a10:	add	r1, r0, r5
   16a14:	add	r0, lr, r3, lsl #3
   16a18:	str	r1, [sp, #4]
   16a1c:	cmp	r1, #0
   16a20:	str	r2, [r0, #8]
   16a24:	add	r2, r3, #1
   16a28:	str	r5, [r0, #12]
   16a2c:	str	r2, [sp, #8]
   16a30:	ble	16a84 <flatcc_builder_create_string@@Base+0xe0>
   16a34:	ldr	r0, [r6, #36]	; 0x24
   16a38:	ldr	r4, [r6, #44]	; 0x2c
   16a3c:	sub	r5, ip, r1
   16a40:	str	r1, [sp]
   16a44:	add	r1, lr, #8
   16a48:	mov	r3, r5
   16a4c:	blx	r4
   16a50:	cmp	r0, #0
   16a54:	streq	r5, [r6, #136]	; 0x88
   16a58:	moveq	r0, r5
   16a5c:	subeq	sp, fp, #16
   16a60:	popeq	{r4, r5, r6, sl, fp, pc}
   16a64:	movw	r0, #40392	; 0x9dc8
   16a68:	movw	r1, #35874	; 0x8c22
   16a6c:	movw	r3, #40071	; 0x9c87
   16a70:	movw	r2, #651	; 0x28b
   16a74:	movt	r0, #1
   16a78:	movt	r1, #1
   16a7c:	movt	r3, #1
   16a80:	bl	127a8 <__assert_fail@plt>
   16a84:	movw	r0, #40392	; 0x9dc8
   16a88:	movw	r1, #35874	; 0x8c22
   16a8c:	movw	r3, #40071	; 0x9c87
   16a90:	movw	r2, #647	; 0x287
   16a94:	movt	r0, #1
   16a98:	movt	r1, #1
   16a9c:	movt	r3, #1
   16aa0:	bl	127a8 <__assert_fail@plt>

00016aa4 <flatcc_builder_create_string_str@@Base>:
   16aa4:	push	{r4, r5, fp, lr}
   16aa8:	add	fp, sp, #8
   16aac:	mov	r5, r0
   16ab0:	mov	r0, r1
   16ab4:	mov	r4, r1
   16ab8:	bl	12760 <strlen@plt>
   16abc:	mov	r2, r0
   16ac0:	mov	r0, r5
   16ac4:	mov	r1, r4
   16ac8:	pop	{r4, r5, fp, lr}
   16acc:	b	169a4 <flatcc_builder_create_string@@Base>

00016ad0 <flatcc_builder_create_string_strn@@Base>:
   16ad0:	push	{r4, r5, r6, sl, fp, lr}
   16ad4:	add	fp, sp, #16
   16ad8:	mov	r6, r0
   16adc:	mov	r5, r1
   16ae0:	mov	r0, r1
   16ae4:	mov	r1, #0
   16ae8:	mov	r4, r2
   16aec:	bl	12790 <memchr@plt>
   16af0:	cmp	r0, #0
   16af4:	mov	r1, r5
   16af8:	subne	r4, r0, r5
   16afc:	mov	r0, r6
   16b00:	mov	r2, r4
   16b04:	pop	{r4, r5, r6, sl, fp, lr}
   16b08:	b	169a4 <flatcc_builder_create_string@@Base>

00016b0c <flatcc_builder_end_string@@Base>:
   16b0c:	push	{r4, r5, fp, lr}
   16b10:	add	fp, sp, #8
   16b14:	mov	r4, r0
   16b18:	ldr	r0, [r0, #32]
   16b1c:	ldrh	r1, [r0, #14]
   16b20:	cmp	r1, #6
   16b24:	bne	16bcc <flatcc_builder_end_string@@Base+0xc0>
   16b28:	ldr	r2, [r0, #20]
   16b2c:	ldr	r0, [r4, #20]
   16b30:	cmp	r2, r0
   16b34:	bne	16be4 <flatcc_builder_end_string@@Base+0xd8>
   16b38:	ldr	r1, [r4, #16]
   16b3c:	mov	r0, r4
   16b40:	bl	169a4 <flatcc_builder_create_string@@Base>
   16b44:	mov	r5, r0
   16b48:	cmp	r0, #0
   16b4c:	beq	16bc4 <flatcc_builder_end_string@@Base+0xb8>
   16b50:	ldr	r0, [r4, #16]
   16b54:	ldr	r2, [r4, #20]
   16b58:	mov	r1, #0
   16b5c:	bl	12778 <memset@plt>
   16b60:	ldr	r0, [r4, #32]
   16b64:	ldr	r1, [r4, #60]	; 0x3c
   16b68:	ldr	ip, [r4, #64]	; 0x40
   16b6c:	ldr	r3, [r0, #8]
   16b70:	str	r3, [r4, #20]
   16b74:	ldr	r3, [r0]
   16b78:	str	r3, [r4, #28]
   16b7c:	add	r1, r1, r3
   16b80:	ldr	r2, [r0, #4]
   16b84:	str	r1, [r4, #16]
   16b88:	sub	r1, ip, r3
   16b8c:	cmp	r1, r2
   16b90:	movhi	r1, r2
   16b94:	str	r1, [r4, #24]
   16b98:	ldrh	r1, [r4, #130]	; 0x82
   16b9c:	ldrh	r2, [r4, #128]	; 0x80
   16ba0:	cmp	r2, r1
   16ba4:	strhcc	r1, [r4, #128]	; 0x80
   16ba8:	ldrh	r1, [r0, #12]
   16bac:	sub	r0, r0, #36	; 0x24
   16bb0:	str	r0, [r4, #32]
   16bb4:	strh	r1, [r4, #130]	; 0x82
   16bb8:	ldr	r0, [r4, #156]	; 0x9c
   16bbc:	sub	r0, r0, #1
   16bc0:	str	r0, [r4, #156]	; 0x9c
   16bc4:	mov	r0, r5
   16bc8:	pop	{r4, r5, fp, pc}
   16bcc:	movw	r0, #37191	; 0x9147
   16bd0:	movw	r1, #35874	; 0x8c22
   16bd4:	movw	r3, #39418	; 0x99fa
   16bd8:	movw	r2, #1732	; 0x6c4
   16bdc:	movt	r0, #1
   16be0:	b	16bf8 <flatcc_builder_end_string@@Base+0xec>
   16be4:	movw	r0, #39485	; 0x9a3d
   16be8:	movw	r1, #35874	; 0x8c22
   16bec:	movw	r3, #39418	; 0x99fa
   16bf0:	movw	r2, #1733	; 0x6c5
   16bf4:	movt	r0, #1
   16bf8:	movt	r1, #1
   16bfc:	movt	r3, #1
   16c00:	bl	127a8 <__assert_fail@plt>

00016c04 <flatcc_builder_string_edit@@Base>:
   16c04:	ldr	r0, [r0, #16]
   16c08:	bx	lr

00016c0c <flatcc_builder_string_len@@Base>:
   16c0c:	ldr	r0, [r0, #32]
   16c10:	ldr	r0, [r0, #20]
   16c14:	bx	lr

00016c18 <flatcc_builder_table_edit@@Base>:
   16c18:	push	{fp, lr}
   16c1c:	mov	fp, sp
   16c20:	ldr	r2, [r0, #32]
   16c24:	ldrh	r2, [r2, #14]
   16c28:	cmp	r2, #3
   16c2c:	ldreq	r2, [r0, #16]
   16c30:	ldreq	r0, [r0, #20]
   16c34:	addeq	r0, r2, r0
   16c38:	subeq	r0, r0, r1
   16c3c:	popeq	{fp, pc}
   16c40:	movw	r0, #37943	; 0x9437
   16c44:	movw	r1, #35874	; 0x8c22
   16c48:	movw	r3, #39663	; 0x9aef
   16c4c:	movw	r2, #1794	; 0x702
   16c50:	movt	r0, #1
   16c54:	movt	r1, #1
   16c58:	movt	r3, #1
   16c5c:	bl	127a8 <__assert_fail@plt>

00016c60 <flatcc_builder_table_add_copy@@Base>:
   16c60:	push	{r4, r5, r6, sl, fp, lr}
   16c64:	add	fp, sp, #16
   16c68:	mov	r4, r3
   16c6c:	ldr	r3, [fp, #8]
   16c70:	mov	r5, r2
   16c74:	mov	r2, r4
   16c78:	bl	1612c <flatcc_builder_table_add@@Base>
   16c7c:	mov	r6, r0
   16c80:	cmp	r0, #0
   16c84:	beq	16c98 <flatcc_builder_table_add_copy@@Base+0x38>
   16c88:	mov	r0, r6
   16c8c:	mov	r1, r5
   16c90:	mov	r2, r4
   16c94:	bl	12718 <memcpy@plt>
   16c98:	mov	r0, r6
   16c9c:	pop	{r4, r5, r6, sl, fp, pc}

00016ca0 <flatcc_builder_push_buffer_alignment@@Base>:
   16ca0:	ldrh	r1, [r0, #128]	; 0x80
   16ca4:	mov	r2, #4
   16ca8:	strh	r2, [r0, #128]	; 0x80
   16cac:	mov	r0, r1
   16cb0:	bx	lr

00016cb4 <flatcc_builder_pop_buffer_alignment@@Base>:
   16cb4:	ldrh	r2, [r0, #128]	; 0x80
   16cb8:	cmp	r2, r1
   16cbc:	strhcc	r1, [r0, #128]	; 0x80
   16cc0:	bx	lr

00016cc4 <flatcc_builder_get_buffer_alignment@@Base>:
   16cc4:	ldrh	r0, [r0, #128]	; 0x80
   16cc8:	bx	lr

00016ccc <flatcc_builder_set_vtable_clustering@@Base>:
   16ccc:	clz	r1, r1
   16cd0:	lsr	r1, r1, #5
   16cd4:	str	r1, [r0, #180]	; 0xb4
   16cd8:	bx	lr

00016cdc <flatcc_builder_set_block_align@@Base>:
   16cdc:	strh	r1, [r0, #132]	; 0x84
   16ce0:	bx	lr

00016ce4 <flatcc_builder_get_level@@Base>:
   16ce4:	ldr	r0, [r0, #156]	; 0x9c
   16ce8:	bx	lr

00016cec <flatcc_builder_set_max_level@@Base>:
   16cec:	str	r1, [r0, #176]	; 0xb0
   16cf0:	ldr	r2, [r0, #160]	; 0xa0
   16cf4:	cmp	r2, r1
   16cf8:	strlt	r1, [r0, #160]	; 0xa0
   16cfc:	bx	lr

00016d00 <flatcc_builder_get_buffer_size@@Base>:
   16d00:	ldr	r1, [r0, #136]	; 0x88
   16d04:	ldr	r0, [r0, #140]	; 0x8c
   16d08:	sub	r0, r0, r1
   16d0c:	bx	lr

00016d10 <flatcc_builder_get_buffer_start@@Base>:
   16d10:	ldr	r0, [r0, #136]	; 0x88
   16d14:	bx	lr

00016d18 <flatcc_builder_get_buffer_end@@Base>:
   16d18:	ldr	r0, [r0, #140]	; 0x8c
   16d1c:	bx	lr

00016d20 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16d20:	str	r1, [r0, #172]	; 0xac
   16d24:	bx	lr

00016d28 <flatcc_builder_set_identifier@@Base>:
   16d28:	movw	r2, #35344	; 0x8a10
   16d2c:	cmp	r1, #0
   16d30:	movt	r2, #1
   16d34:	movne	r2, r1
   16d38:	ldr	r1, [r2]
   16d3c:	str	r1, [r0, #168]	; 0xa8
   16d40:	bx	lr

00016d44 <flatcc_builder_get_type@@Base>:
   16d44:	ldr	r0, [r0, #32]
   16d48:	cmp	r0, #0
   16d4c:	ldrhne	r0, [r0, #14]
   16d50:	moveq	r0, #0
   16d54:	bx	lr

00016d58 <flatcc_builder_get_type_at@@Base>:
   16d58:	mov	r2, r0
   16d5c:	mov	r0, #0
   16d60:	cmp	r1, #1
   16d64:	blt	16d88 <flatcc_builder_get_type_at@@Base+0x30>
   16d68:	ldr	r3, [r2, #156]	; 0x9c
   16d6c:	cmp	r3, r1
   16d70:	bxlt	lr
   16d74:	sub	r0, r1, r3
   16d78:	ldr	r1, [r2, #32]
   16d7c:	add	r0, r0, r0, lsl #3
   16d80:	add	r0, r1, r0, lsl #2
   16d84:	ldrh	r0, [r0, #14]
   16d88:	bx	lr

00016d8c <flatcc_builder_get_direct_buffer@@Base>:
   16d8c:	ldr	r2, [r0, #184]	; 0xb8
   16d90:	cmp	r2, #0
   16d94:	beq	16da8 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16d98:	ldr	r2, [r0, #188]	; 0xbc
   16d9c:	ldr	r3, [r0, #192]	; 0xc0
   16da0:	cmp	r2, r3
   16da4:	beq	16db8 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   16da8:	mov	r0, #0
   16dac:	cmp	r1, #0
   16db0:	strne	r0, [r1]
   16db4:	bx	lr
   16db8:	cmp	r1, #0
   16dbc:	ldrne	r2, [r0, #212]	; 0xd4
   16dc0:	strne	r2, [r1]
   16dc4:	ldr	r0, [r0, #196]	; 0xc4
   16dc8:	bx	lr

00016dcc <flatcc_builder_copy_buffer@@Base>:
   16dcc:	push	{fp, lr}
   16dd0:	mov	fp, sp
   16dd4:	ldr	r3, [r0, #184]	; 0xb8
   16dd8:	cmp	r3, #0
   16ddc:	beq	16e10 <flatcc_builder_copy_buffer@@Base+0x44>
   16de0:	add	r0, r0, #188	; 0xbc
   16de4:	bl	174d8 <flatcc_emitter_copy_buffer@@Base>
   16de8:	cmp	r0, #0
   16dec:	popne	{fp, pc}
   16df0:	movw	r0, #36470	; 0x8e76
   16df4:	movw	r1, #35874	; 0x8c22
   16df8:	movw	r3, #39802	; 0x9b7a
   16dfc:	movw	r2, #1926	; 0x786
   16e00:	movt	r0, #1
   16e04:	movt	r1, #1
   16e08:	movt	r3, #1
   16e0c:	bl	127a8 <__assert_fail@plt>
   16e10:	mov	r0, #0
   16e14:	pop	{fp, pc}

00016e18 <flatcc_builder_finalize_buffer@@Base>:
   16e18:	push	{r4, r5, r6, sl, fp, lr}
   16e1c:	add	fp, sp, #16
   16e20:	mov	r4, r0
   16e24:	ldr	r0, [r0, #136]	; 0x88
   16e28:	cmp	r1, #0
   16e2c:	ldr	r2, [r4, #140]	; 0x8c
   16e30:	sub	r5, r2, r0
   16e34:	mov	r0, r5
   16e38:	strne	r5, [r1]
   16e3c:	bl	12730 <malloc@plt>
   16e40:	cmp	r0, #0
   16e44:	beq	16e88 <flatcc_builder_finalize_buffer@@Base+0x70>
   16e48:	mov	r6, r0
   16e4c:	mov	r0, r4
   16e50:	mov	r2, r5
   16e54:	mov	r1, r6
   16e58:	bl	16dcc <flatcc_builder_copy_buffer@@Base>
   16e5c:	cmp	r0, #0
   16e60:	movne	r0, r6
   16e64:	popne	{r4, r5, r6, sl, fp, pc}
   16e68:	movw	r0, #40392	; 0x9dc8
   16e6c:	movw	r1, #35874	; 0x8c22
   16e70:	movw	r3, #39871	; 0x9bbf
   16e74:	movw	r2, #1948	; 0x79c
   16e78:	movt	r0, #1
   16e7c:	movt	r1, #1
   16e80:	movt	r3, #1
   16e84:	bl	127a8 <__assert_fail@plt>
   16e88:	movw	r0, #40392	; 0x9dc8
   16e8c:	movw	r1, #35874	; 0x8c22
   16e90:	movw	r3, #39871	; 0x9bbf
   16e94:	movw	r2, #1944	; 0x798
   16e98:	movt	r0, #1
   16e9c:	movt	r1, #1
   16ea0:	movt	r3, #1
   16ea4:	bl	127a8 <__assert_fail@plt>

00016ea8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16ea8:	push	{r4, r5, r6, r7, fp, lr}
   16eac:	add	fp, sp, #16
   16eb0:	sub	sp, sp, #8
   16eb4:	mov	r5, r0
   16eb8:	mov	r4, r1
   16ebc:	ldr	r0, [r0, #136]	; 0x88
   16ec0:	ldr	r1, [r5, #140]	; 0x8c
   16ec4:	cmp	r4, #0
   16ec8:	sub	r0, r1, r0
   16ecc:	mov	r1, #0
   16ed0:	strne	r0, [r4]
   16ed4:	ldrh	r2, [r5, #128]	; 0x80
   16ed8:	str	r1, [sp, #4]
   16edc:	add	r0, r0, r2
   16ee0:	cmp	r2, #4
   16ee4:	mov	r1, r2
   16ee8:	rsb	r2, r2, #0
   16eec:	sub	r0, r0, #1
   16ef0:	movls	r1, #4
   16ef4:	and	r7, r0, r2
   16ef8:	add	r0, sp, #4
   16efc:	mov	r2, r7
   16f00:	bl	1276c <posix_memalign@plt>
   16f04:	ldr	r6, [sp, #4]
   16f08:	cmp	r0, #0
   16f0c:	cmpne	r6, #0
   16f10:	bne	16f34 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   16f14:	cmp	r6, #0
   16f18:	beq	16f3c <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   16f1c:	mov	r0, r5
   16f20:	mov	r1, r6
   16f24:	mov	r2, r7
   16f28:	bl	16dcc <flatcc_builder_copy_buffer@@Base>
   16f2c:	cmp	r0, #0
   16f30:	bne	16f48 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   16f34:	mov	r0, r6
   16f38:	bl	1270c <free@plt>
   16f3c:	mov	r6, #0
   16f40:	cmp	r4, #0
   16f44:	strne	r6, [r4]
   16f48:	mov	r0, r6
   16f4c:	sub	sp, fp, #16
   16f50:	pop	{r4, r5, r6, r7, fp, pc}

00016f54 <flatcc_builder_aligned_alloc@@Base>:
   16f54:	push	{fp, lr}
   16f58:	mov	fp, sp
   16f5c:	sub	sp, sp, #8
   16f60:	mov	r2, r1
   16f64:	mov	r1, r0
   16f68:	mov	r0, #0
   16f6c:	cmp	r1, #4
   16f70:	str	r0, [sp, #4]
   16f74:	add	r0, sp, #4
   16f78:	movls	r1, #4
   16f7c:	bl	1276c <posix_memalign@plt>
   16f80:	mov	r1, r0
   16f84:	ldr	r0, [sp, #4]
   16f88:	cmp	r1, #0
   16f8c:	cmpne	r0, #0
   16f90:	beq	16fa0 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16f94:	bl	1270c <free@plt>
   16f98:	mov	r0, #0
   16f9c:	str	r0, [sp, #4]
   16fa0:	mov	sp, fp
   16fa4:	pop	{fp, pc}

00016fa8 <flatcc_builder_aligned_free@@Base>:
   16fa8:	b	1270c <free@plt>

00016fac <flatcc_builder_get_emit_context@@Base>:
   16fac:	ldr	r0, [r0, #36]	; 0x24
   16fb0:	bx	lr
   16fb4:	push	{r4, r5, r6, sl, fp, lr}
   16fb8:	add	fp, sp, #16
   16fbc:	sub	sp, sp, #8
   16fc0:	mov	r6, r2
   16fc4:	ldr	r2, [r0, #28]
   16fc8:	mov	r5, r0
   16fcc:	ldr	r0, [r0, #40]	; 0x28
   16fd0:	mov	r3, #1
   16fd4:	ldr	r4, [r5, #48]	; 0x30
   16fd8:	str	r3, [sp]
   16fdc:	mov	r3, #1
   16fe0:	add	r2, r2, r1
   16fe4:	add	r1, r5, #60	; 0x3c
   16fe8:	blx	r4
   16fec:	mov	r1, r0
   16ff0:	mvn	r0, #0
   16ff4:	cmp	r1, #0
   16ff8:	bne	1702c <flatcc_builder_get_emit_context@@Base+0x80>
   16ffc:	ldr	r0, [r5, #28]
   17000:	ldr	r2, [r5, #60]	; 0x3c
   17004:	ldr	r3, [r5, #64]	; 0x40
   17008:	ldr	r1, [r5, #32]
   1700c:	add	r2, r2, r0
   17010:	sub	r0, r3, r0
   17014:	cmp	r0, r6
   17018:	str	r2, [r5, #16]
   1701c:	movhi	r0, r6
   17020:	str	r0, [r5, #24]
   17024:	mov	r0, #0
   17028:	str	r6, [r1, #4]
   1702c:	sub	sp, fp, #16
   17030:	pop	{r4, r5, r6, sl, fp, pc}

00017034 <flatcc_emitter_recycle_page@@Base>:
   17034:	ldr	r3, [r0]
   17038:	mov	r2, r0
   1703c:	mvn	r0, #0
   17040:	cmp	r3, r1
   17044:	beq	17084 <flatcc_emitter_recycle_page@@Base+0x50>
   17048:	ldr	r2, [r2, #4]
   1704c:	cmp	r2, r1
   17050:	bxeq	lr
   17054:	ldr	r0, [r1, #2944]	; 0xb80
   17058:	ldr	r2, [r1, #2948]	; 0xb84
   1705c:	str	r2, [r0, #2948]	; 0xb84
   17060:	ldr	r2, [r1, #2948]	; 0xb84
   17064:	str	r0, [r2, #2944]	; 0xb80
   17068:	ldr	r0, [r3, #2948]	; 0xb84
   1706c:	str	r3, [r1, #2944]	; 0xb80
   17070:	str	r0, [r1, #2948]	; 0xb84
   17074:	str	r1, [r0, #2944]	; 0xb80
   17078:	ldr	r0, [r1, #2944]	; 0xb80
   1707c:	str	r1, [r0, #2948]	; 0xb84
   17080:	mov	r0, #0
   17084:	bx	lr

00017088 <flatcc_emitter_reset@@Base>:
   17088:	push	{r4, sl, fp, lr}
   1708c:	add	fp, sp, #8
   17090:	ldr	r1, [r0]
   17094:	cmp	r1, #0
   17098:	beq	17150 <flatcc_emitter_reset@@Base+0xc8>
   1709c:	mov	r4, r0
   170a0:	add	r2, r1, #1472	; 0x5c0
   170a4:	mov	r0, #1472	; 0x5c0
   170a8:	mov	r3, #0
   170ac:	stmib	r4, {r1, r2}
   170b0:	str	r0, [r4, #12]
   170b4:	str	r2, [r4, #16]
   170b8:	str	r0, [r4, #20]
   170bc:	movw	r0, #64064	; 0xfa40
   170c0:	movt	r0, #65535	; 0xffff
   170c4:	str	r0, [r1, #2952]	; 0xb88
   170c8:	ldr	r2, [r4, #32]
   170cc:	ldr	r0, [r4, #24]
   170d0:	cmp	r2, #0
   170d4:	moveq	r2, r0
   170d8:	streq	r0, [r4, #32]
   170dc:	str	r3, [r4, #24]
   170e0:	add	r2, r2, r2, lsl #1
   170e4:	lsr	r2, r2, #2
   170e8:	add	r0, r2, r0, lsr #2
   170ec:	str	r0, [r4, #32]
   170f0:	ldr	r2, [r4, #28]
   170f4:	cmp	r2, r0, lsl #1
   170f8:	bls	17150 <flatcc_emitter_reset@@Base+0xc8>
   170fc:	mov	r2, r1
   17100:	ldr	r0, [r2, #2944]!	; 0xb80
   17104:	cmp	r0, r1
   17108:	popeq	{r4, sl, fp, pc}
   1710c:	ldr	r3, [r0, #2944]	; 0xb80
   17110:	str	r3, [r2]
   17114:	ldr	r2, [r0, #2944]	; 0xb80
   17118:	str	r1, [r2, #2948]	; 0xb84
   1711c:	bl	1270c <free@plt>
   17120:	ldr	r0, [r4, #28]
   17124:	ldr	r1, [r4, #32]
   17128:	sub	r0, r0, #2944	; 0xb80
   1712c:	cmp	r0, r1, lsl #1
   17130:	str	r0, [r4, #28]
   17134:	bls	17150 <flatcc_emitter_reset@@Base+0xc8>
   17138:	ldr	r1, [r4, #4]
   1713c:	ldr	r3, [r4]
   17140:	mov	r2, r1
   17144:	ldr	r0, [r2, #2944]!	; 0xb80
   17148:	cmp	r0, r3
   1714c:	bne	1710c <flatcc_emitter_reset@@Base+0x84>
   17150:	pop	{r4, sl, fp, pc}

00017154 <flatcc_emitter_clear@@Base>:
   17154:	push	{r4, r5, r6, sl, fp, lr}
   17158:	add	fp, sp, #16
   1715c:	ldr	r5, [r0]
   17160:	cmp	r5, #0
   17164:	beq	171b4 <flatcc_emitter_clear@@Base+0x60>
   17168:	mov	r4, r0
   1716c:	ldr	r0, [r5, #2948]	; 0xb84
   17170:	mov	r6, #0
   17174:	str	r6, [r0, #2944]	; 0xb80
   17178:	ldr	r0, [r5, #2944]	; 0xb80
   1717c:	cmp	r0, #0
   17180:	beq	17194 <flatcc_emitter_clear@@Base+0x40>
   17184:	mov	r5, r0
   17188:	ldr	r0, [r0, #2948]	; 0xb84
   1718c:	bl	1270c <free@plt>
   17190:	b	17178 <flatcc_emitter_clear@@Base+0x24>
   17194:	mov	r0, r5
   17198:	bl	1270c <free@plt>
   1719c:	vmov.i32	q8, #0	; 0x00000000
   171a0:	add	r0, r4, #16
   171a4:	vst1.32	{d16-d17}, [r0]
   171a8:	mov	r0, #32
   171ac:	vst1.32	{d16-d17}, [r4], r0
   171b0:	str	r6, [r4]
   171b4:	pop	{r4, r5, r6, sl, fp, pc}

000171b8 <flatcc_emitter@@Base>:
   171b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171bc:	add	fp, sp, #28
   171c0:	sub	sp, sp, #4
   171c4:	mov	r6, r0
   171c8:	mov	r7, r1
   171cc:	ldr	r0, [r0, #24]
   171d0:	ldr	r1, [fp, #8]
   171d4:	mov	r4, r2
   171d8:	cmn	r3, #1
   171dc:	mov	r9, r6
   171e0:	add	r0, r0, r1
   171e4:	str	r0, [r6, #24]
   171e8:	ble	17324 <flatcc_emitter@@Base+0x16c>
   171ec:	ldr	r0, [r9, #20]!
   171f0:	cmp	r0, r1
   171f4:	bcs	17474 <flatcc_emitter@@Base+0x2bc>
   171f8:	mov	r8, #0
   171fc:	cmp	r4, #0
   17200:	beq	174cc <flatcc_emitter@@Base+0x314>
   17204:	movw	sl, #64064	; 0xfa40
   17208:	movt	sl, #65535	; 0xffff
   1720c:	ldr	r8, [r7, #4]
   17210:	cmp	r8, #0
   17214:	beq	17310 <flatcc_emitter@@Base+0x158>
   17218:	ldr	r9, [r7]
   1721c:	cmp	r8, r0
   17220:	mov	r5, r8
   17224:	bls	172dc <flatcc_emitter@@Base+0x124>
   17228:	mov	r5, r0
   1722c:	cmp	r5, #0
   17230:	bne	172dc <flatcc_emitter@@Base+0x124>
   17234:	ldr	r5, [r6, #4]
   17238:	cmp	r5, #0
   1723c:	beq	17250 <flatcc_emitter@@Base+0x98>
   17240:	ldr	r0, [r5, #2944]	; 0xb80
   17244:	ldr	r1, [r6]
   17248:	cmp	r0, r1
   1724c:	bne	17288 <flatcc_emitter@@Base+0xd0>
   17250:	movw	r0, #2956	; 0xb8c
   17254:	bl	12730 <malloc@plt>
   17258:	cmp	r0, #0
   1725c:	beq	17484 <flatcc_emitter@@Base+0x2cc>
   17260:	ldr	r1, [r6, #28]
   17264:	cmp	r5, #0
   17268:	add	r1, r1, #2944	; 0xb80
   1726c:	str	r1, [r6, #28]
   17270:	beq	172ac <flatcc_emitter@@Base+0xf4>
   17274:	ldr	r1, [r6]
   17278:	str	r1, [r0, #2944]	; 0xb80
   1727c:	str	r5, [r0, #2948]	; 0xb84
   17280:	str	r0, [r1, #2948]	; 0xb84
   17284:	str	r0, [r5, #2944]	; 0xb80
   17288:	mov	r5, #2944	; 0xb80
   1728c:	str	r0, [r6, #4]
   17290:	str	r0, [r6, #16]
   17294:	str	r5, [r6, #20]
   17298:	ldr	r1, [r0, #2948]	; 0xb84
   1729c:	ldr	r1, [r1, #2952]	; 0xb88
   172a0:	add	r1, r1, #2944	; 0xb80
   172a4:	str	r1, [r0, #2952]	; 0xb88
   172a8:	b	172d0 <flatcc_emitter@@Base+0x118>
   172ac:	mov	r5, #1472	; 0x5c0
   172b0:	add	r1, r0, #1472	; 0x5c0
   172b4:	str	r0, [r6]
   172b8:	stmib	r6, {r0, r1, r5}
   172bc:	str	r1, [r6, #16]
   172c0:	str	r5, [r6, #20]
   172c4:	str	r0, [r0, #2944]	; 0xb80
   172c8:	str	r0, [r0, #2948]	; 0xb84
   172cc:	str	sl, [r0, #2952]	; 0xb88
   172d0:	cmp	r8, r5
   172d4:	bhi	1722c <flatcc_emitter@@Base+0x74>
   172d8:	mov	r5, r8
   172dc:	ldr	r0, [r6, #16]
   172e0:	mov	r1, r9
   172e4:	mov	r2, r5
   172e8:	bl	12718 <memcpy@plt>
   172ec:	ldr	r0, [r6, #16]
   172f0:	ldr	r1, [r6, #20]
   172f4:	add	r9, r9, r5
   172f8:	subs	r8, r8, r5
   172fc:	add	r2, r0, r5
   17300:	sub	r0, r1, r5
   17304:	str	r2, [r6, #16]
   17308:	str	r0, [r6, #20]
   1730c:	bne	1721c <flatcc_emitter@@Base+0x64>
   17310:	subs	r4, r4, #1
   17314:	add	r7, r7, #8
   17318:	bne	1720c <flatcc_emitter@@Base+0x54>
   1731c:	mov	r8, #0
   17320:	b	174cc <flatcc_emitter@@Base+0x314>
   17324:	ldr	r0, [r9, #12]!
   17328:	cmp	r0, r1
   1732c:	bcs	1748c <flatcc_emitter@@Base+0x2d4>
   17330:	mov	r8, #0
   17334:	cmp	r4, #0
   17338:	beq	174cc <flatcc_emitter@@Base+0x314>
   1733c:	add	r0, r7, r4, lsl #3
   17340:	ldr	sl, [r0, #-4]
   17344:	sub	r1, r0, #8
   17348:	str	r1, [sp]
   1734c:	cmp	sl, #0
   17350:	beq	17464 <flatcc_emitter@@Base+0x2ac>
   17354:	ldr	r0, [sp]
   17358:	ldr	r0, [r0]
   1735c:	add	r7, r0, sl
   17360:	ldr	r1, [r9]
   17364:	cmp	sl, r1
   17368:	bls	17434 <flatcc_emitter@@Base+0x27c>
   1736c:	cmp	r1, #0
   17370:	mov	r5, r1
   17374:	bne	17438 <flatcc_emitter@@Base+0x280>
   17378:	ldr	r5, [r6]
   1737c:	cmp	r5, #0
   17380:	beq	173a4 <flatcc_emitter@@Base+0x1ec>
   17384:	ldr	r0, [r5, #2948]	; 0xb84
   17388:	ldr	r1, [r6, #4]
   1738c:	cmp	r0, r1
   17390:	beq	173a4 <flatcc_emitter@@Base+0x1ec>
   17394:	ldr	r1, [r5, #2952]	; 0xb88
   17398:	sub	r1, r1, #2944	; 0xb80
   1739c:	str	r1, [r0, #2952]	; 0xb88
   173a0:	b	173dc <flatcc_emitter@@Base+0x224>
   173a4:	movw	r0, #2956	; 0xb8c
   173a8:	bl	12730 <malloc@plt>
   173ac:	cmp	r0, #0
   173b0:	beq	17484 <flatcc_emitter@@Base+0x2cc>
   173b4:	ldr	r1, [r6, #28]
   173b8:	cmp	r5, #0
   173bc:	add	r1, r1, #2944	; 0xb80
   173c0:	str	r1, [r6, #28]
   173c4:	beq	17400 <flatcc_emitter@@Base+0x248>
   173c8:	ldr	r1, [r6, #4]
   173cc:	str	r5, [r0, #2944]	; 0xb80
   173d0:	str	r1, [r0, #2948]	; 0xb84
   173d4:	str	r0, [r5, #2948]	; 0xb84
   173d8:	str	r0, [r1, #2944]	; 0xb80
   173dc:	mov	r1, #2944	; 0xb80
   173e0:	add	r2, r0, #2944	; 0xb80
   173e4:	str	r0, [r6]
   173e8:	str	r2, [r6, #8]
   173ec:	str	r1, [r6, #12]
   173f0:	ldr	r2, [r0, #2944]	; 0xb80
   173f4:	ldr	r2, [r2, #2952]	; 0xb88
   173f8:	sub	r2, r2, #2944	; 0xb80
   173fc:	b	1742c <flatcc_emitter@@Base+0x274>
   17400:	add	r2, r0, #1472	; 0x5c0
   17404:	mov	r1, #1472	; 0x5c0
   17408:	str	r0, [r6]
   1740c:	stmib	r6, {r0, r2}
   17410:	str	r1, [r6, #12]
   17414:	str	r2, [r6, #16]
   17418:	movw	r2, #64064	; 0xfa40
   1741c:	str	r1, [r6, #20]
   17420:	str	r0, [r0, #2944]	; 0xb80
   17424:	str	r0, [r0, #2948]	; 0xb84
   17428:	movt	r2, #65535	; 0xffff
   1742c:	str	r2, [r0, #2952]	; 0xb88
   17430:	b	17364 <flatcc_emitter@@Base+0x1ac>
   17434:	mov	r5, sl
   17438:	sub	r0, r1, r5
   1743c:	sub	r7, r7, r5
   17440:	mov	r2, r5
   17444:	str	r0, [r6, #12]
   17448:	mov	r1, r7
   1744c:	ldr	r0, [r6, #8]
   17450:	sub	r0, r0, r5
   17454:	str	r0, [r6, #8]
   17458:	bl	12718 <memcpy@plt>
   1745c:	subs	sl, sl, r5
   17460:	bne	17360 <flatcc_emitter@@Base+0x1a8>
   17464:	ldr	r0, [sp]
   17468:	subs	r4, r4, #1
   1746c:	bne	17340 <flatcc_emitter@@Base+0x188>
   17470:	b	174cc <flatcc_emitter@@Base+0x314>
   17474:	ldr	r5, [r6, #16]
   17478:	add	r2, r5, r1
   1747c:	str	r2, [r6, #16]
   17480:	b	17498 <flatcc_emitter@@Base+0x2e0>
   17484:	mvn	r8, #0
   17488:	b	174cc <flatcc_emitter@@Base+0x314>
   1748c:	ldr	r2, [r6, #8]
   17490:	sub	r5, r2, r1
   17494:	str	r5, [r6, #8]
   17498:	sub	r0, r0, r1
   1749c:	mov	r8, #0
   174a0:	cmp	r4, #0
   174a4:	str	r0, [r9]
   174a8:	beq	174cc <flatcc_emitter@@Base+0x314>
   174ac:	ldm	r7, {r1, r2}
   174b0:	mov	r0, r5
   174b4:	bl	12718 <memcpy@plt>
   174b8:	ldr	r0, [r7, #4]
   174bc:	add	r7, r7, #8
   174c0:	subs	r4, r4, #1
   174c4:	add	r5, r5, r0
   174c8:	bne	174ac <flatcc_emitter@@Base+0x2f4>
   174cc:	mov	r0, r8
   174d0:	sub	sp, fp, #28
   174d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000174d8 <flatcc_emitter_copy_buffer@@Base>:
   174d8:	push	{r4, r5, r6, sl, fp, lr}
   174dc:	add	fp, sp, #16
   174e0:	mov	r3, r2
   174e4:	ldr	r2, [r0, #24]
   174e8:	mov	r5, #0
   174ec:	cmp	r2, r3
   174f0:	bhi	1758c <flatcc_emitter_copy_buffer@@Base+0xb4>
   174f4:	mov	r4, r0
   174f8:	ldr	r0, [r0]
   174fc:	cmp	r0, #0
   17500:	beq	1758c <flatcc_emitter_copy_buffer@@Base+0xb4>
   17504:	mov	r6, r1
   17508:	ldr	r1, [r4, #4]
   1750c:	cmp	r0, r1
   17510:	beq	1757c <flatcc_emitter_copy_buffer@@Base+0xa4>
   17514:	ldr	r0, [r4, #12]
   17518:	ldr	r1, [r4, #8]
   1751c:	rsb	r5, r0, #2944	; 0xb80
   17520:	mov	r0, r6
   17524:	mov	r2, r5
   17528:	bl	12718 <memcpy@plt>
   1752c:	ldm	r4, {r0, r1}
   17530:	add	r5, r6, r5
   17534:	ldr	r6, [r0, #2944]	; 0xb80
   17538:	cmp	r6, r1
   1753c:	beq	17564 <flatcc_emitter_copy_buffer@@Base+0x8c>
   17540:	mov	r0, r5
   17544:	mov	r1, r6
   17548:	mov	r2, #2944	; 0xb80
   1754c:	bl	12718 <memcpy@plt>
   17550:	ldr	r6, [r6, #2944]	; 0xb80
   17554:	ldr	r0, [r4, #4]
   17558:	add	r5, r5, #2944	; 0xb80
   1755c:	cmp	r6, r0
   17560:	bne	17540 <flatcc_emitter_copy_buffer@@Base+0x68>
   17564:	ldr	r0, [r4, #20]
   17568:	mov	r1, r6
   1756c:	rsb	r2, r0, #2944	; 0xb80
   17570:	mov	r0, r5
   17574:	bl	12718 <memcpy@plt>
   17578:	b	1758c <flatcc_emitter_copy_buffer@@Base+0xb4>
   1757c:	ldr	r1, [r4, #8]
   17580:	mov	r0, r6
   17584:	bl	12718 <memcpy@plt>
   17588:	mov	r5, r6
   1758c:	mov	r0, r5
   17590:	pop	{r4, r5, r6, sl, fp, pc}

00017594 <flatcc_verify_error_string@@Base>:
   17594:	cmp	r0, #36	; 0x24
   17598:	movwhi	r0, #41606	; 0xa286
   1759c:	movthi	r0, #1
   175a0:	bxhi	lr
   175a4:	movw	r1, #41616	; 0xa290
   175a8:	movt	r1, #1
   175ac:	ldr	r0, [r1, r0, lsl #2]
   175b0:	bx	lr

000175b4 <flatcc_verify_field@@Base>:
   175b4:	b	175b8 <flatcc_verify_field@@Base+0x4>
   175b8:	push	{r4, sl, fp, lr}
   175bc:	add	fp, sp, #8
   175c0:	mov	ip, #4
   175c4:	ldrh	r4, [r0, #22]
   175c8:	mov	lr, #0
   175cc:	add	r1, ip, r1, lsl #1
   175d0:	uxth	ip, r1
   175d4:	cmp	ip, r4
   175d8:	bcs	17604 <flatcc_verify_field@@Base+0x50>
   175dc:	ldr	r4, [r0, #12]
   175e0:	uxtah	r1, r4, r1
   175e4:	ldrh	ip, [r1]
   175e8:	cmp	ip, #0
   175ec:	beq	17604 <flatcc_verify_field@@Base+0x50>
   175f0:	add	r1, ip, r2
   175f4:	ldrh	r2, [r0, #20]
   175f8:	mov	lr, #13
   175fc:	cmp	r1, r2
   17600:	bls	1760c <flatcc_verify_field@@Base+0x58>
   17604:	mov	r0, lr
   17608:	pop	{r4, sl, fp, pc}
   1760c:	ldr	r1, [r0]
   17610:	ldr	r0, [r0, #16]
   17614:	add	r1, r1, ip
   17618:	add	r0, r1, r0
   1761c:	sub	r1, r3, #1
   17620:	ands	r0, r0, r1
   17624:	movwne	r0, #12
   17628:	pop	{r4, sl, fp, pc}

0001762c <flatcc_verify_string_field@@Base>:
   1762c:	push	{r4, sl, fp, lr}
   17630:	add	fp, sp, #8
   17634:	sub	sp, sp, #8
   17638:	add	r3, sp, #4
   1763c:	mov	r4, r0
   17640:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   17644:	cmp	r0, #0
   17648:	bne	176b0 <flatcc_verify_string_field@@Base+0x84>
   1764c:	ldr	r3, [sp, #4]
   17650:	cmp	r3, #0
   17654:	beq	176b0 <flatcc_verify_string_field@@Base+0x84>
   17658:	ldr	r1, [r4]
   1765c:	ldr	r0, [r1, r3]
   17660:	add	r2, r0, r3
   17664:	mov	r0, #17
   17668:	tst	r2, #3
   1766c:	bne	176b0 <flatcc_verify_string_field@@Base+0x84>
   17670:	cmp	r2, r3
   17674:	bls	176b0 <flatcc_verify_string_field@@Base+0x84>
   17678:	ldr	r4, [r4, #4]
   1767c:	add	r3, r2, #4
   17680:	cmp	r4, r3
   17684:	bcc	176b0 <flatcc_verify_string_field@@Base+0x84>
   17688:	ldr	r2, [r1, r2]
   1768c:	sub	ip, r4, r3
   17690:	mov	r0, #8
   17694:	add	r4, r2, #1
   17698:	cmp	ip, r4
   1769c:	bcc	176b0 <flatcc_verify_string_field@@Base+0x84>
   176a0:	add	r0, r1, r3
   176a4:	ldrb	r0, [r0, r2]
   176a8:	cmp	r0, #0
   176ac:	movwne	r0, #7
   176b0:	sub	sp, fp, #8
   176b4:	pop	{r4, sl, fp, pc}
   176b8:	push	{fp, lr}
   176bc:	mov	fp, sp
   176c0:	mov	ip, #4
   176c4:	add	lr, ip, r1, lsl #1
   176c8:	ldrh	r1, [r0, #22]
   176cc:	uxth	ip, lr
   176d0:	cmp	ip, r1
   176d4:	bcs	1771c <flatcc_verify_string_field@@Base+0xf0>
   176d8:	ldr	r1, [r0, #12]
   176dc:	uxtah	r1, r1, lr
   176e0:	ldrh	ip, [r1]
   176e4:	cmp	ip, #0
   176e8:	beq	1771c <flatcc_verify_string_field@@Base+0xf0>
   176ec:	ldrh	lr, [r0, #20]
   176f0:	add	r2, ip, #4
   176f4:	mov	r1, #13
   176f8:	cmp	r2, lr
   176fc:	bhi	17730 <flatcc_verify_string_field@@Base+0x104>
   17700:	ldr	r0, [r0, #16]
   17704:	mov	r1, #12
   17708:	add	r0, r0, ip
   1770c:	tst	r0, #3
   17710:	moveq	r1, #0
   17714:	streq	r0, [r3]
   17718:	b	17730 <flatcc_verify_string_field@@Base+0x104>
   1771c:	cmp	r2, #0
   17720:	mov	r0, #0
   17724:	movwne	r2, #1
   17728:	str	r0, [r3]
   1772c:	lsl	r1, r2, #2
   17730:	mov	r0, r1
   17734:	pop	{fp, pc}

00017738 <flatcc_verify_vector_field@@Base>:
   17738:	push	{r4, r5, r6, sl, fp, lr}
   1773c:	add	fp, sp, #16
   17740:	sub	sp, sp, #8
   17744:	mov	r6, r3
   17748:	add	r3, sp, #4
   1774c:	mov	r5, r0
   17750:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   17754:	cmp	r0, #0
   17758:	bne	177d8 <flatcc_verify_vector_field@@Base+0xa0>
   1775c:	ldr	r4, [sp, #4]
   17760:	cmp	r4, #0
   17764:	beq	177d8 <flatcc_verify_vector_field@@Base+0xa0>
   17768:	ldr	r3, [r5]
   1776c:	ldr	r2, [fp, #8]
   17770:	ldr	r0, [r3, r4]
   17774:	cmp	r2, #4
   17778:	movls	r2, #4
   1777c:	add	r1, r0, r4
   17780:	mov	r0, #16
   17784:	cmp	r1, r4
   17788:	bls	177d8 <flatcc_verify_vector_field@@Base+0xa0>
   1778c:	ldr	r5, [r5, #4]
   17790:	add	r4, r1, #4
   17794:	cmp	r4, r5
   17798:	bhi	177d8 <flatcc_verify_vector_field@@Base+0xa0>
   1779c:	sub	r2, r2, #1
   177a0:	orr	r2, r2, #3
   177a4:	tst	r4, r2
   177a8:	bne	177d8 <flatcc_verify_vector_field@@Base+0xa0>
   177ac:	ldr	r4, [fp, #12]
   177b0:	ldr	r2, [r3, r1]
   177b4:	mov	r0, #25
   177b8:	cmp	r2, r4
   177bc:	bhi	177d8 <flatcc_verify_vector_field@@Base+0xa0>
   177c0:	mul	r2, r2, r6
   177c4:	sub	r0, r5, r1
   177c8:	sub	r1, r0, #4
   177cc:	mov	r0, #0
   177d0:	cmp	r1, r2
   177d4:	movwcc	r0, #26
   177d8:	sub	sp, fp, #16
   177dc:	pop	{r4, r5, r6, sl, fp, pc}

000177e0 <flatcc_verify_string_vector_field@@Base>:
   177e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   177e4:	add	fp, sp, #24
   177e8:	sub	sp, sp, #8
   177ec:	add	r3, sp, #4
   177f0:	mov	r4, r0
   177f4:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   177f8:	cmp	r0, #0
   177fc:	bne	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17800:	ldr	r1, [sp, #4]
   17804:	cmp	r1, #0
   17808:	beq	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   1780c:	ldr	r3, [r4]
   17810:	mov	r0, #16
   17814:	ldr	r2, [r3, r1]
   17818:	add	r5, r2, r1
   1781c:	cmp	r5, r1
   17820:	bls	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17824:	ldr	ip, [r4, #4]
   17828:	add	r7, r5, #4
   1782c:	cmp	r7, ip
   17830:	bhi	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17834:	ands	r7, r7, #3
   17838:	bne	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   1783c:	ldr	lr, [r3, r5]
   17840:	mov	r0, #25
   17844:	cmn	lr, #-1073741823	; 0xc0000001
   17848:	bhi	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   1784c:	sub	r0, ip, r5
   17850:	sub	r4, r0, #4
   17854:	mov	r0, #26
   17858:	cmp	r4, lr, lsl #2
   1785c:	bcc	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17860:	cmp	lr, #0
   17864:	beq	178f8 <flatcc_verify_string_vector_field@@Base+0x118>
   17868:	sub	r0, ip, r2
   1786c:	add	r3, r3, r2
   17870:	sub	r0, r0, r1
   17874:	sub	r8, r0, #8
   17878:	add	r0, r3, r1
   1787c:	add	r7, r1, r2
   17880:	ldr	r5, [r0, #4]
   17884:	mov	r0, #17
   17888:	add	r6, r7, r5
   1788c:	add	r4, r6, #4
   17890:	tst	r4, #3
   17894:	bne	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17898:	add	r7, r7, #4
   1789c:	cmp	r4, r7
   178a0:	bls	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   178a4:	add	r4, r6, #8
   178a8:	cmp	ip, r4
   178ac:	bcc	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   178b0:	add	r0, r1, r5
   178b4:	sub	r4, r8, r5
   178b8:	add	r0, r3, r0
   178bc:	ldr	r0, [r0, #4]
   178c0:	add	r6, r0, #1
   178c4:	cmp	r4, r6
   178c8:	bcc	17900 <flatcc_verify_string_vector_field@@Base+0x120>
   178cc:	add	r0, r5, r0
   178d0:	add	r0, r1, r0
   178d4:	add	r0, r3, r0
   178d8:	ldrb	r0, [r0, #8]
   178dc:	cmp	r0, #0
   178e0:	bne	17908 <flatcc_verify_string_vector_field@@Base+0x128>
   178e4:	subs	lr, lr, #1
   178e8:	sub	r8, r8, #4
   178ec:	add	r2, r2, #4
   178f0:	add	r3, r3, #4
   178f4:	bne	17878 <flatcc_verify_string_vector_field@@Base+0x98>
   178f8:	mov	r0, #0
   178fc:	b	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17900:	mov	r0, #8
   17904:	b	1790c <flatcc_verify_string_vector_field@@Base+0x12c>
   17908:	mov	r0, #7
   1790c:	sub	sp, fp, #24
   17910:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00017914 <flatcc_verify_table_field@@Base>:
   17914:	push	{r4, r5, r6, sl, fp, lr}
   17918:	add	fp, sp, #16
   1791c:	sub	sp, sp, #32
   17920:	mov	r6, r3
   17924:	add	r3, sp, #4
   17928:	mov	r5, r0
   1792c:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   17930:	cmp	r0, #0
   17934:	bne	17a0c <flatcc_verify_table_field@@Base+0xf8>
   17938:	ldr	r4, [sp, #4]
   1793c:	cmp	r4, #0
   17940:	beq	17a0c <flatcc_verify_table_field@@Base+0xf8>
   17944:	ldm	r5, {r1, r2, r3}
   17948:	subs	r3, r3, #1
   1794c:	ldr	r0, [r1, r4]
   17950:	str	r3, [sp, #16]
   17954:	beq	17a08 <flatcc_verify_table_field@@Base+0xf4>
   17958:	add	r3, r0, r4
   1795c:	mov	r0, #15
   17960:	tst	r3, #3
   17964:	bne	17a0c <flatcc_verify_table_field@@Base+0xf8>
   17968:	cmp	r3, r4
   1796c:	bls	17a0c <flatcc_verify_table_field@@Base+0xf8>
   17970:	add	r5, r3, #4
   17974:	cmp	r5, r2
   17978:	bhi	17a0c <flatcc_verify_table_field@@Base+0xf8>
   1797c:	str	r3, [sp, #24]
   17980:	ldr	r0, [r1, r3]
   17984:	sub	r5, r3, r0
   17988:	mov	r0, #29
   1798c:	tst	r5, #-2147483647	; 0x80000001
   17990:	bne	17a0c <flatcc_verify_table_field@@Base+0xf8>
   17994:	add	lr, r5, #2
   17998:	mov	r0, #27
   1799c:	cmp	lr, r2
   179a0:	bhi	17a0c <flatcc_verify_table_field@@Base+0xf8>
   179a4:	mov	ip, r1
   179a8:	mov	r0, #30
   179ac:	ldrh	r4, [ip, r5]!
   179b0:	tst	r4, #1
   179b4:	strh	r4, [sp, #30]
   179b8:	bne	17a0c <flatcc_verify_table_field@@Base+0xf8>
   179bc:	add	r5, r5, r4
   179c0:	cmp	r5, r2
   179c4:	bhi	17a0c <flatcc_verify_table_field@@Base+0xf8>
   179c8:	mov	r0, #28
   179cc:	cmp	r4, #4
   179d0:	bcc	17a0c <flatcc_verify_table_field@@Base+0xf8>
   179d4:	add	r0, r1, lr
   179d8:	sub	r3, r2, r3
   179dc:	ldrh	r5, [r0]
   179e0:	mov	r0, #20
   179e4:	cmp	r3, r5
   179e8:	strh	r5, [sp, #28]
   179ec:	bcc	17a0c <flatcc_verify_table_field@@Base+0xf8>
   179f0:	add	r0, sp, #8
   179f4:	str	r2, [sp, #12]
   179f8:	str	r1, [sp, #8]
   179fc:	str	ip, [sp, #20]
   17a00:	blx	r6
   17a04:	b	17a0c <flatcc_verify_table_field@@Base+0xf8>
   17a08:	mov	r0, #3
   17a0c:	sub	sp, fp, #16
   17a10:	pop	{r4, r5, r6, sl, fp, pc}

00017a14 <flatcc_verify_table_vector_field@@Base>:
   17a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a18:	add	fp, sp, #28
   17a1c:	sub	sp, sp, #44	; 0x2c
   17a20:	mov	r9, r3
   17a24:	add	r3, sp, #16
   17a28:	mov	r6, r0
   17a2c:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   17a30:	mov	r5, r0
   17a34:	cmp	r0, #0
   17a38:	bne	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17a3c:	ldr	r0, [sp, #16]
   17a40:	cmp	r0, #0
   17a44:	beq	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17a48:	ldr	r1, [r6, #8]
   17a4c:	cmp	r1, #1
   17a50:	blt	17c84 <flatcc_verify_table_vector_field@@Base+0x270>
   17a54:	ldr	r8, [r6]
   17a58:	mov	r5, #16
   17a5c:	ldr	r2, [r8, r0]
   17a60:	add	r3, r2, r0
   17a64:	cmp	r3, r0
   17a68:	bls	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17a6c:	ldr	r4, [r6, #4]
   17a70:	add	r6, r3, #4
   17a74:	cmp	r6, r4
   17a78:	bhi	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17a7c:	str	r4, [sp, #12]
   17a80:	ands	r4, r6, #3
   17a84:	bne	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17a88:	ldr	sl, [r8, r3]
   17a8c:	mov	r5, #25
   17a90:	cmn	sl, #-1073741823	; 0xc0000001
   17a94:	bhi	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17a98:	ldr	r5, [sp, #12]
   17a9c:	sub	r3, r5, r3
   17aa0:	mov	r5, #26
   17aa4:	sub	r3, r3, #4
   17aa8:	cmp	r3, sl, lsl #2
   17aac:	bcc	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17ab0:	mov	r5, #0
   17ab4:	cmp	sl, #0
   17ab8:	beq	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17abc:	ldr	r4, [sp, #12]
   17ac0:	sub	r2, r4, r2
   17ac4:	sub	r0, r2, r0
   17ac8:	sub	r0, r0, #4
   17acc:	str	r0, [sp, #8]
   17ad0:	sub	r0, r1, #2
   17ad4:	str	r0, [sp, #4]
   17ad8:	ldr	r0, [sp, #4]
   17adc:	ldr	r2, [r8, r6]
   17ae0:	cmp	r0, #0
   17ae4:	str	r0, [sp, #28]
   17ae8:	beq	17c7c <flatcc_verify_table_vector_field@@Base+0x268>
   17aec:	add	lr, r6, r2
   17af0:	add	r7, lr, #4
   17af4:	tst	lr, #3
   17af8:	bne	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17afc:	cmp	lr, r6
   17b00:	bls	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b04:	cmp	r7, r4
   17b08:	bhi	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b0c:	str	lr, [sp, #36]	; 0x24
   17b10:	add	r0, r8, r2
   17b14:	ldr	r1, [r0, r6]
   17b18:	sub	r0, r2, r1
   17b1c:	add	r3, r6, r0
   17b20:	tst	r3, #-2147483647	; 0x80000001
   17b24:	bne	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b28:	ldr	ip, [sp, #12]
   17b2c:	add	r4, r3, #2
   17b30:	cmp	r4, ip
   17b34:	ldr	r4, [sp, #12]
   17b38:	bhi	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b3c:	add	r0, r8, r0
   17b40:	add	r0, r0, r6
   17b44:	ldrh	r0, [r0]
   17b48:	cmp	r0, #4
   17b4c:	strh	r0, [sp, #42]	; 0x2a
   17b50:	bcc	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b54:	ands	r4, r0, #1
   17b58:	ldr	r4, [sp, #12]
   17b5c:	bne	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b60:	add	r0, r2, r0
   17b64:	sub	r0, r0, r1
   17b68:	add	r0, r6, r0
   17b6c:	cmp	r0, r4
   17b70:	bhi	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b74:	add	r0, r8, r3
   17b78:	ldr	r3, [sp, #8]
   17b7c:	ldrh	r1, [r0, #2]
   17b80:	sub	r2, r3, r2
   17b84:	cmp	r2, r1
   17b88:	strh	r1, [sp, #40]	; 0x28
   17b8c:	bcc	17bc8 <flatcc_verify_table_vector_field@@Base+0x1b4>
   17b90:	str	r4, [sp, #24]
   17b94:	str	r8, [sp, #20]
   17b98:	str	r0, [sp, #32]
   17b9c:	add	r0, sp, #20
   17ba0:	blx	r9
   17ba4:	cmp	r0, #0
   17ba8:	bne	17c94 <flatcc_verify_table_vector_field@@Base+0x280>
   17bac:	ldr	r0, [sp, #8]
   17bb0:	subs	sl, sl, #1
   17bb4:	add	r6, r6, #4
   17bb8:	sub	r0, r0, #4
   17bbc:	str	r0, [sp, #8]
   17bc0:	bne	17ad8 <flatcc_verify_table_vector_field@@Base+0xc4>
   17bc4:	b	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17bc8:	ldr	r0, [sp, #4]
   17bcc:	str	r0, [sp, #28]
   17bd0:	mov	r5, #15
   17bd4:	tst	lr, #3
   17bd8:	bne	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17bdc:	cmp	lr, r6
   17be0:	bls	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17be4:	cmp	r7, r4
   17be8:	bhi	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17bec:	str	lr, [sp, #36]	; 0x24
   17bf0:	mov	r5, #29
   17bf4:	ldr	r0, [r8, lr]
   17bf8:	sub	r3, lr, r0
   17bfc:	tst	r3, #-2147483647	; 0x80000001
   17c00:	bne	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c04:	add	r2, r3, #2
   17c08:	mov	r5, #27
   17c0c:	cmp	r2, r4
   17c10:	bhi	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c14:	mov	r1, r8
   17c18:	mov	r5, #30
   17c1c:	ldrh	r6, [r1, r3]!
   17c20:	tst	r6, #1
   17c24:	strh	r6, [sp, #42]	; 0x2a
   17c28:	bne	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c2c:	add	r0, r3, r6
   17c30:	cmp	r0, r4
   17c34:	bhi	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c38:	mov	r5, #28
   17c3c:	cmp	r6, #4
   17c40:	bcc	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c44:	add	r0, r8, r2
   17c48:	sub	r2, r4, lr
   17c4c:	mov	r5, #20
   17c50:	ldrh	r0, [r0]
   17c54:	cmp	r2, r0
   17c58:	strh	r0, [sp, #40]	; 0x28
   17c5c:	bcc	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c60:	add	r0, sp, #20
   17c64:	str	r4, [sp, #24]
   17c68:	str	r8, [sp, #20]
   17c6c:	str	r1, [sp, #32]
   17c70:	blx	r9
   17c74:	mov	r5, r0
   17c78:	b	17c88 <flatcc_verify_table_vector_field@@Base+0x274>
   17c7c:	mov	r0, #0
   17c80:	str	r0, [sp, #28]
   17c84:	mov	r5, #3
   17c88:	mov	r0, r5
   17c8c:	sub	sp, fp, #28
   17c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c94:	ldr	r0, [r8, r6]
   17c98:	ldr	r1, [sp, #4]
   17c9c:	add	lr, r0, r6
   17ca0:	str	r1, [sp, #28]
   17ca4:	add	r7, lr, #4
   17ca8:	b	17bd0 <flatcc_verify_table_vector_field@@Base+0x1bc>

00017cac <flatcc_verify_union_table@@Base>:
   17cac:	push	{r4, r5, r6, sl, fp, lr}
   17cb0:	add	fp, sp, #16
   17cb4:	sub	sp, sp, #24
   17cb8:	ldr	r5, [r0, #16]
   17cbc:	ldr	r2, [r0, #20]
   17cc0:	ldr	ip, [r0]
   17cc4:	ldr	r3, [r0, #4]
   17cc8:	ldr	r0, [r0, #8]
   17ccc:	subs	r0, r0, #1
   17cd0:	str	r0, [sp, #8]
   17cd4:	beq	17d88 <flatcc_verify_union_table@@Base+0xdc>
   17cd8:	add	r2, r2, r5
   17cdc:	mov	r0, #15
   17ce0:	tst	r2, #3
   17ce4:	bne	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17ce8:	cmp	r2, r5
   17cec:	bls	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17cf0:	add	r6, r2, #4
   17cf4:	cmp	r6, r3
   17cf8:	bhi	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17cfc:	str	r2, [sp, #16]
   17d00:	ldr	r0, [ip, r2]
   17d04:	sub	r5, r2, r0
   17d08:	mov	r0, #29
   17d0c:	tst	r5, #-2147483647	; 0x80000001
   17d10:	bne	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d14:	add	r4, r5, #2
   17d18:	mov	r0, #27
   17d1c:	cmp	r4, r3
   17d20:	bhi	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d24:	mov	lr, ip
   17d28:	mov	r0, #30
   17d2c:	ldrh	r6, [lr, r5]!
   17d30:	tst	r6, #1
   17d34:	strh	r6, [sp, #22]
   17d38:	bne	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d3c:	add	r5, r5, r6
   17d40:	cmp	r5, r3
   17d44:	bhi	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d48:	mov	r0, #28
   17d4c:	cmp	r6, #4
   17d50:	bcc	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d54:	add	r0, ip, r4
   17d58:	sub	r2, r3, r2
   17d5c:	ldrh	r4, [r0]
   17d60:	mov	r0, #20
   17d64:	cmp	r2, r4
   17d68:	strh	r4, [sp, #20]
   17d6c:	bcc	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d70:	mov	r0, sp
   17d74:	str	r3, [sp, #4]
   17d78:	str	ip, [sp]
   17d7c:	str	lr, [sp, #12]
   17d80:	blx	r1
   17d84:	b	17d8c <flatcc_verify_union_table@@Base+0xe0>
   17d88:	mov	r0, #3
   17d8c:	sub	sp, fp, #16
   17d90:	pop	{r4, r5, r6, sl, fp, pc}

00017d94 <flatcc_verify_union_struct@@Base>:
   17d94:	push	{fp, lr}
   17d98:	mov	fp, sp
   17d9c:	ldr	lr, [r0, #20]
   17da0:	mov	r3, r0
   17da4:	mov	r0, #18
   17da8:	cmp	lr, #0
   17dac:	beq	17de8 <flatcc_verify_union_struct@@Base+0x54>
   17db0:	ldr	ip, [r3, #4]
   17db4:	ldr	r3, [r3, #16]
   17db8:	add	r3, r3, lr
   17dbc:	cmp	r3, ip
   17dc0:	bhi	17de8 <flatcc_verify_union_struct@@Base+0x54>
   17dc4:	adds	r1, r3, r1
   17dc8:	mov	r0, #10
   17dcc:	bcs	17de8 <flatcc_verify_union_struct@@Base+0x54>
   17dd0:	mov	r0, #9
   17dd4:	cmp	r1, ip
   17dd8:	pophi	{fp, pc}
   17ddc:	sub	r0, r2, #1
   17de0:	ands	r0, r3, r0
   17de4:	movwne	r0, #11
   17de8:	pop	{fp, pc}

00017dec <flatcc_verify_union_string@@Base>:
   17dec:	push	{fp, lr}
   17df0:	mov	fp, sp
   17df4:	mov	r1, r0
   17df8:	ldr	r3, [r0, #16]
   17dfc:	ldr	r0, [r0, #20]
   17e00:	add	r2, r0, r3
   17e04:	mov	r0, #17
   17e08:	tst	r2, #3
   17e0c:	bne	17e54 <flatcc_verify_union_string@@Base+0x68>
   17e10:	cmp	r2, r3
   17e14:	bls	17e54 <flatcc_verify_union_string@@Base+0x68>
   17e18:	ldr	r3, [r1, #4]
   17e1c:	add	ip, r2, #4
   17e20:	cmp	r3, ip
   17e24:	bcc	17e54 <flatcc_verify_union_string@@Base+0x68>
   17e28:	ldr	r1, [r1]
   17e2c:	sub	lr, r3, ip
   17e30:	mov	r0, #8
   17e34:	ldr	r2, [r1, r2]
   17e38:	add	r3, r2, #1
   17e3c:	cmp	lr, r3
   17e40:	popcc	{fp, pc}
   17e44:	add	r0, r1, ip
   17e48:	ldrb	r0, [r0, r2]
   17e4c:	cmp	r0, #0
   17e50:	movwne	r0, #7
   17e54:	pop	{fp, pc}

00017e58 <flatcc_verify_buffer_header@@Base>:
   17e58:	push	{r4, sl, fp, lr}
   17e5c:	add	fp, sp, #8
   17e60:	sub	sp, sp, #8
   17e64:	mov	r4, r0
   17e68:	mov	r0, #5
   17e6c:	tst	r4, #3
   17e70:	bne	17ecc <flatcc_verify_buffer_header@@Base+0x74>
   17e74:	mov	r0, #6
   17e78:	cmn	r1, #9
   17e7c:	bhi	17ecc <flatcc_verify_buffer_header@@Base+0x74>
   17e80:	mov	r0, #1
   17e84:	cmp	r1, #8
   17e88:	bcc	17ecc <flatcc_verify_buffer_header@@Base+0x74>
   17e8c:	cmp	r2, #0
   17e90:	beq	17ec8 <flatcc_verify_buffer_header@@Base+0x70>
   17e94:	mov	r0, #0
   17e98:	mov	r1, r2
   17e9c:	mov	r2, #4
   17ea0:	str	r0, [sp, #4]
   17ea4:	add	r0, sp, #4
   17ea8:	bl	12784 <strncpy@plt>
   17eac:	ldr	r1, [sp, #4]
   17eb0:	cmp	r1, #0
   17eb4:	ldrne	r2, [r4, #4]
   17eb8:	movne	r0, #2
   17ebc:	cmpne	r2, r1
   17ec0:	moveq	r0, #0
   17ec4:	b	17ecc <flatcc_verify_buffer_header@@Base+0x74>
   17ec8:	mov	r0, #0
   17ecc:	sub	sp, fp, #8
   17ed0:	pop	{r4, sl, fp, pc}

00017ed4 <flatcc_verify_typed_buffer_header@@Base>:
   17ed4:	mov	r3, r0
   17ed8:	mov	r0, #5
   17edc:	tst	r3, #3
   17ee0:	bne	17f14 <flatcc_verify_typed_buffer_header@@Base+0x40>
   17ee4:	mov	r0, #6
   17ee8:	cmn	r1, #9
   17eec:	bhi	17f14 <flatcc_verify_typed_buffer_header@@Base+0x40>
   17ef0:	mov	r0, #1
   17ef4:	cmp	r1, #8
   17ef8:	bxcc	lr
   17efc:	cmp	r2, #0
   17f00:	beq	17f18 <flatcc_verify_typed_buffer_header@@Base+0x44>
   17f04:	ldr	r1, [r3, #4]
   17f08:	mov	r0, #2
   17f0c:	cmp	r1, r2
   17f10:	moveq	r0, #0
   17f14:	bx	lr
   17f18:	mov	r0, #0
   17f1c:	bx	lr

00017f20 <flatcc_verify_struct_as_root@@Base>:
   17f20:	push	{r4, r5, r6, r7, fp, lr}
   17f24:	add	fp, sp, #16
   17f28:	mov	r5, r3
   17f2c:	mov	r6, r2
   17f30:	mov	r4, r1
   17f34:	mov	r7, r0
   17f38:	bl	17e58 <flatcc_verify_buffer_header@@Base>
   17f3c:	cmp	r0, #0
   17f40:	beq	17f58 <flatcc_verify_struct_as_root@@Base+0x38>
   17f44:	mov	r0, r7
   17f48:	mov	r1, r4
   17f4c:	mov	r2, r6
   17f50:	pop	{r4, r5, r6, r7, fp, lr}
   17f54:	b	17e58 <flatcc_verify_buffer_header@@Base>
   17f58:	ldr	r1, [r7]
   17f5c:	mov	r0, #18
   17f60:	sub	r2, r1, #1
   17f64:	cmp	r2, r4
   17f68:	bcs	17f94 <flatcc_verify_struct_as_root@@Base+0x74>
   17f6c:	adds	r2, r1, r5
   17f70:	mov	r0, #10
   17f74:	bcs	17f94 <flatcc_verify_struct_as_root@@Base+0x74>
   17f78:	mov	r0, #9
   17f7c:	cmp	r2, r4
   17f80:	bhi	17f94 <flatcc_verify_struct_as_root@@Base+0x74>
   17f84:	ldr	r0, [fp, #8]
   17f88:	sub	r0, r0, #1
   17f8c:	ands	r0, r1, r0
   17f90:	movwne	r0, #11
   17f94:	pop	{r4, r5, r6, r7, fp, pc}

00017f98 <flatcc_verify_struct_as_typed_root@@Base>:
   17f98:	push	{fp, lr}
   17f9c:	mov	fp, sp
   17fa0:	mov	ip, r0
   17fa4:	mov	r0, #5
   17fa8:	tst	ip, #3
   17fac:	bne	1801c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   17fb0:	mov	r0, #6
   17fb4:	cmn	r1, #9
   17fb8:	bhi	1801c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   17fbc:	mov	r0, #1
   17fc0:	cmp	r1, #8
   17fc4:	bcc	1801c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   17fc8:	cmp	r2, #0
   17fcc:	beq	17fe0 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   17fd0:	ldr	lr, [ip, #4]
   17fd4:	mov	r0, #2
   17fd8:	cmp	lr, r2
   17fdc:	bne	1801c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   17fe0:	ldr	ip, [ip]
   17fe4:	mov	r0, #18
   17fe8:	sub	r2, ip, #1
   17fec:	cmp	r2, r1
   17ff0:	bcs	1801c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   17ff4:	adds	r3, ip, r3
   17ff8:	mov	r0, #10
   17ffc:	bcs	1801c <flatcc_verify_struct_as_typed_root@@Base+0x84>
   18000:	mov	r0, #9
   18004:	cmp	r3, r1
   18008:	pophi	{fp, pc}
   1800c:	ldr	r0, [fp, #8]
   18010:	sub	r0, r0, #1
   18014:	ands	r0, ip, r0
   18018:	movwne	r0, #11
   1801c:	pop	{fp, pc}

00018020 <flatcc_verify_table_as_root@@Base>:
   18020:	push	{r4, r5, r6, r7, fp, lr}
   18024:	add	fp, sp, #16
   18028:	sub	sp, sp, #24
   1802c:	mov	r4, r3
   18030:	mov	r7, r2
   18034:	mov	r5, r1
   18038:	mov	r6, r0
   1803c:	bl	17e58 <flatcc_verify_buffer_header@@Base>
   18040:	cmp	r0, #0
   18044:	beq	18060 <flatcc_verify_table_as_root@@Base+0x40>
   18048:	mov	r0, r6
   1804c:	mov	r1, r5
   18050:	mov	r2, r7
   18054:	sub	sp, fp, #16
   18058:	pop	{r4, r5, r6, r7, fp, lr}
   1805c:	b	17e58 <flatcc_verify_buffer_header@@Base>
   18060:	ldr	r1, [r6]
   18064:	mov	r0, #99	; 0x63
   18068:	str	r0, [sp, #8]
   1806c:	mov	r0, #15
   18070:	tst	r1, #3
   18074:	bne	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   18078:	cmp	r1, #0
   1807c:	beq	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   18080:	add	r2, r1, #4
   18084:	cmp	r2, r5
   18088:	bhi	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   1808c:	str	r1, [sp, #16]
   18090:	ldr	r0, [r6, r1]
   18094:	sub	r7, r1, r0
   18098:	mov	r0, #29
   1809c:	tst	r7, #-2147483647	; 0x80000001
   180a0:	bne	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   180a4:	add	r3, r7, #2
   180a8:	mov	r0, #27
   180ac:	cmp	r3, r5
   180b0:	bhi	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   180b4:	mov	ip, r6
   180b8:	mov	r0, #30
   180bc:	ldrh	r2, [ip, r7]!
   180c0:	tst	r2, #1
   180c4:	strh	r2, [sp, #22]
   180c8:	bne	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   180cc:	add	r7, r7, r2
   180d0:	cmp	r7, r5
   180d4:	bhi	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   180d8:	mov	r0, #28
   180dc:	cmp	r2, #4
   180e0:	bcc	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   180e4:	add	r0, r6, r3
   180e8:	sub	r1, r5, r1
   180ec:	ldrh	r2, [r0]
   180f0:	mov	r0, #20
   180f4:	cmp	r1, r2
   180f8:	strh	r2, [sp, #20]
   180fc:	bcc	18114 <flatcc_verify_table_as_root@@Base+0xf4>
   18100:	mov	r0, sp
   18104:	str	r5, [sp, #4]
   18108:	str	r6, [sp]
   1810c:	str	ip, [sp, #12]
   18110:	blx	r4
   18114:	sub	sp, fp, #16
   18118:	pop	{r4, r5, r6, r7, fp, pc}

0001811c <flatcc_verify_table_as_typed_root@@Base>:
   1811c:	push	{r4, r5, r6, sl, fp, lr}
   18120:	add	fp, sp, #16
   18124:	sub	sp, sp, #24
   18128:	mov	ip, #5
   1812c:	tst	r0, #3
   18130:	bne	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18134:	mov	ip, #6
   18138:	cmn	r1, #9
   1813c:	bhi	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18140:	mov	ip, #1
   18144:	cmp	r1, #8
   18148:	bcc	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1814c:	cmp	r2, #0
   18150:	beq	18164 <flatcc_verify_table_as_typed_root@@Base+0x48>
   18154:	ldr	r6, [r0, #4]
   18158:	mov	ip, #2
   1815c:	cmp	r6, r2
   18160:	bne	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18164:	ldr	r2, [r0]
   18168:	mov	r6, #99	; 0x63
   1816c:	mov	ip, #15
   18170:	str	r6, [sp, #8]
   18174:	tst	r2, #3
   18178:	bne	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1817c:	cmp	r2, #0
   18180:	beq	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18184:	add	r6, r2, #4
   18188:	cmp	r6, r1
   1818c:	bhi	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18190:	str	r2, [sp, #16]
   18194:	mov	ip, #29
   18198:	ldr	r6, [r0, r2]
   1819c:	sub	r5, r2, r6
   181a0:	tst	r5, #-2147483647	; 0x80000001
   181a4:	bne	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   181a8:	add	r4, r5, #2
   181ac:	mov	ip, #27
   181b0:	cmp	r4, r1
   181b4:	bhi	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   181b8:	mov	lr, r0
   181bc:	mov	ip, #30
   181c0:	ldrh	r6, [lr, r5]!
   181c4:	tst	r6, #1
   181c8:	strh	r6, [sp, #22]
   181cc:	bne	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   181d0:	add	r5, r5, r6
   181d4:	cmp	r5, r1
   181d8:	bhi	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   181dc:	mov	ip, #28
   181e0:	cmp	r6, #4
   181e4:	bcc	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   181e8:	add	r6, r0, r4
   181ec:	sub	r2, r1, r2
   181f0:	mov	ip, #20
   181f4:	ldrh	r4, [r6]
   181f8:	cmp	r2, r4
   181fc:	strh	r4, [sp, #20]
   18200:	bcc	18218 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18204:	stm	sp, {r0, r1}
   18208:	mov	r0, sp
   1820c:	str	lr, [sp, #12]
   18210:	blx	r3
   18214:	mov	ip, r0
   18218:	mov	r0, ip
   1821c:	sub	sp, fp, #16
   18220:	pop	{r4, r5, r6, sl, fp, pc}

00018224 <flatcc_verify_struct_as_nested_root@@Base>:
   18224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18228:	add	fp, sp, #28
   1822c:	sub	sp, sp, #12
   18230:	ldr	r9, [fp, #12]
   18234:	mov	r8, r3
   18238:	mov	r5, #1
   1823c:	mvn	sl, #0
   18240:	mov	r4, r2
   18244:	mov	r7, r1
   18248:	mov	r6, r0
   1824c:	stm	sp, {r5, sl}
   18250:	mov	r3, r9
   18254:	bl	17738 <flatcc_verify_vector_field@@Base>
   18258:	cmp	r0, #0
   1825c:	beq	1827c <flatcc_verify_struct_as_nested_root@@Base+0x58>
   18260:	mov	r0, r6
   18264:	mov	r1, r7
   18268:	mov	r2, r4
   1826c:	mov	r3, r9
   18270:	stm	sp, {r5, sl}
   18274:	bl	17738 <flatcc_verify_vector_field@@Base>
   18278:	b	182e0 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   1827c:	mov	r0, #4
   18280:	ldrh	r2, [r6, #22]
   18284:	add	r0, r0, r7, lsl #1
   18288:	uxth	r1, r0
   1828c:	cmp	r1, r2
   18290:	bcs	182dc <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   18294:	ldr	r1, [r6, #12]
   18298:	uxtah	r0, r1, r0
   1829c:	ldrh	r0, [r0]
   182a0:	cmp	r0, #0
   182a4:	beq	182dc <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   182a8:	ldr	r1, [r6]
   182ac:	ldr	r2, [r6, #16]
   182b0:	add	r1, r1, r2
   182b4:	adds	r0, r1, r0
   182b8:	beq	182dc <flatcc_verify_struct_as_nested_root@@Base+0xb8>
   182bc:	ldr	r2, [r0]
   182c0:	ldr	r3, [fp, #8]
   182c4:	ldr	r1, [r2, r0]!
   182c8:	str	r9, [sp]
   182cc:	add	r0, r2, #4
   182d0:	mov	r2, r8
   182d4:	bl	17f20 <flatcc_verify_struct_as_root@@Base>
   182d8:	b	182e0 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   182dc:	mov	r0, #0
   182e0:	sub	sp, fp, #28
   182e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000182e8 <flatcc_verify_table_as_nested_root@@Base>:
   182e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182ec:	add	fp, sp, #28
   182f0:	sub	sp, sp, #36	; 0x24
   182f4:	mvn	r9, #0
   182f8:	mov	sl, #1
   182fc:	mov	r8, r3
   18300:	mov	r5, r2
   18304:	mov	r4, r1
   18308:	mov	r6, r0
   1830c:	str	sl, [sp]
   18310:	str	r9, [sp, #4]
   18314:	ldr	r7, [fp, #8]
   18318:	mov	r3, r7
   1831c:	bl	17738 <flatcc_verify_vector_field@@Base>
   18320:	cmp	r0, #0
   18324:	beq	18348 <flatcc_verify_table_as_nested_root@@Base+0x60>
   18328:	mov	r0, r6
   1832c:	mov	r1, r4
   18330:	mov	r2, r5
   18334:	mov	r3, r7
   18338:	str	sl, [sp]
   1833c:	str	r9, [sp, #4]
   18340:	bl	17738 <flatcc_verify_vector_field@@Base>
   18344:	b	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18348:	mov	r0, #4
   1834c:	ldrh	r3, [r6, #22]
   18350:	add	r1, r0, r4, lsl #1
   18354:	mov	r0, #0
   18358:	uxth	r2, r1
   1835c:	cmp	r2, r3
   18360:	bcs	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18364:	ldr	r2, [r6, #12]
   18368:	uxtah	r1, r2, r1
   1836c:	ldrh	r1, [r1]
   18370:	cmp	r1, #0
   18374:	beq	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18378:	ldr	r2, [r6]
   1837c:	ldr	r3, [r6, #16]
   18380:	add	r2, r2, r3
   18384:	adds	r1, r2, r1
   18388:	beq	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   1838c:	ldr	r0, [r1]
   18390:	ldr	r7, [fp, #12]
   18394:	mov	r2, r8
   18398:	ldr	r4, [r0, r1]!
   1839c:	add	r5, r0, #4
   183a0:	mov	r0, r5
   183a4:	mov	r1, r4
   183a8:	bl	17e58 <flatcc_verify_buffer_header@@Base>
   183ac:	cmp	r0, #0
   183b0:	beq	183cc <flatcc_verify_table_as_nested_root@@Base+0xe4>
   183b4:	mov	r0, r5
   183b8:	mov	r1, r4
   183bc:	mov	r2, r8
   183c0:	sub	sp, fp, #28
   183c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183c8:	b	17e58 <flatcc_verify_buffer_header@@Base>
   183cc:	ldr	r0, [r6, #8]
   183d0:	ldr	r1, [r5]
   183d4:	subs	r0, r0, #1
   183d8:	str	r0, [sp, #20]
   183dc:	beq	1848c <flatcc_verify_table_as_nested_root@@Base+0x1a4>
   183e0:	mov	r0, #15
   183e4:	tst	r1, #3
   183e8:	bne	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   183ec:	cmp	r1, #0
   183f0:	beq	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   183f4:	add	r2, r1, #4
   183f8:	cmp	r2, r4
   183fc:	bhi	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18400:	str	r1, [sp, #28]
   18404:	ldr	r0, [r5, r1]
   18408:	sub	r6, r1, r0
   1840c:	mov	r0, #29
   18410:	tst	r6, #-2147483647	; 0x80000001
   18414:	bne	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18418:	add	r3, r6, #2
   1841c:	mov	r0, #27
   18420:	cmp	r3, r4
   18424:	bhi	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18428:	mov	ip, r5
   1842c:	mov	r0, #30
   18430:	ldrh	r2, [ip, r6]!
   18434:	tst	r2, #1
   18438:	strh	r2, [sp, #34]	; 0x22
   1843c:	bne	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18440:	add	r6, r6, r2
   18444:	cmp	r6, r4
   18448:	bhi	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   1844c:	mov	r0, #28
   18450:	cmp	r2, #4
   18454:	bcc	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18458:	add	r0, r5, r3
   1845c:	sub	r1, r4, r1
   18460:	ldrh	r2, [r0]
   18464:	mov	r0, #20
   18468:	cmp	r1, r2
   1846c:	strh	r2, [sp, #32]
   18470:	bcc	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   18474:	add	r0, sp, #12
   18478:	str	r4, [sp, #16]
   1847c:	str	r5, [sp, #12]
   18480:	str	ip, [sp, #24]
   18484:	blx	r7
   18488:	b	18490 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   1848c:	mov	r0, #3
   18490:	sub	sp, fp, #28
   18494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018498 <flatcc_verify_union_field@@Base>:
   18498:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1849c:	add	fp, sp, #24
   184a0:	sub	sp, sp, #32
   184a4:	mov	r5, r0
   184a8:	mov	r0, #2
   184ac:	mov	r8, r3
   184b0:	lsl	r4, r1, #1
   184b4:	add	r0, r0, r1, lsl #1
   184b8:	ldrh	r3, [r5, #22]
   184bc:	uxth	r7, r0
   184c0:	cmp	r7, r3
   184c4:	bcs	18580 <flatcc_verify_union_field@@Base+0xe8>
   184c8:	ldr	r7, [r5, #12]
   184cc:	uxtah	r0, r7, r0
   184d0:	ldrh	r9, [r0]
   184d4:	cmp	r9, #0
   184d8:	beq	18580 <flatcc_verify_union_field@@Base+0xe8>
   184dc:	ldrh	r6, [r5, #20]
   184e0:	mov	r0, #13
   184e4:	cmp	r9, r6
   184e8:	bcs	185b4 <flatcc_verify_union_field@@Base+0x11c>
   184ec:	add	r4, r4, #4
   184f0:	mov	r0, #1
   184f4:	uxth	r6, r4
   184f8:	cmp	r6, r3
   184fc:	bcs	18510 <flatcc_verify_union_field@@Base+0x78>
   18500:	uxtah	r0, r7, r4
   18504:	ldrh	r0, [r0]
   18508:	clz	r0, r0
   1850c:	lsr	r0, r0, #5
   18510:	ldr	r3, [r5]
   18514:	ldr	r7, [r5, #16]
   18518:	cmp	r0, #0
   1851c:	moveq	r0, #24
   18520:	add	r7, r3, r7
   18524:	ldrb	r3, [r7, r9]
   18528:	cmpeq	r3, #0
   1852c:	beq	185b4 <flatcc_verify_union_field@@Base+0x11c>
   18530:	cmp	r3, #0
   18534:	beq	185bc <flatcc_verify_union_field@@Base+0x124>
   18538:	add	r3, sp, #28
   1853c:	mov	r0, r5
   18540:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   18544:	cmp	r0, #0
   18548:	bne	185b4 <flatcc_verify_union_field@@Base+0x11c>
   1854c:	ldr	r1, [sp, #28]
   18550:	cmp	r1, #0
   18554:	beq	185b4 <flatcc_verify_union_field@@Base+0x11c>
   18558:	ldm	r5, {r0, r2, r3}
   1855c:	str	r1, [sp, #20]
   18560:	stmib	sp, {r0, r2, r3}
   18564:	ldr	r0, [r0, r1]
   18568:	str	r0, [sp, #24]
   1856c:	ldrb	r0, [r7, r9]
   18570:	strb	r0, [sp, #16]
   18574:	add	r0, sp, #4
   18578:	blx	r8
   1857c:	b	185b4 <flatcc_verify_union_field@@Base+0x11c>
   18580:	add	r0, r4, #4
   18584:	uxth	r1, r0
   18588:	cmp	r1, r3
   1858c:	bcs	185a8 <flatcc_verify_union_field@@Base+0x110>
   18590:	ldr	r1, [r5, #12]
   18594:	uxtah	r0, r1, r0
   18598:	ldrh	r1, [r0]
   1859c:	mov	r0, #23
   185a0:	cmp	r1, #0
   185a4:	bne	185b4 <flatcc_verify_union_field@@Base+0x11c>
   185a8:	cmp	r2, #0
   185ac:	movwne	r2, #21
   185b0:	mov	r0, r2
   185b4:	sub	sp, fp, #24
   185b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   185bc:	mov	r0, #0
   185c0:	b	185b4 <flatcc_verify_union_field@@Base+0x11c>

000185c4 <flatcc_verify_union_vector_field@@Base>:
   185c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185c8:	add	fp, sp, #28
   185cc:	sub	sp, sp, #44	; 0x2c
   185d0:	mov	r6, r0
   185d4:	mov	sl, r1
   185d8:	sub	r0, r1, #1
   185dc:	mov	r1, #4
   185e0:	mov	r9, r2
   185e4:	add	r7, r1, r0, lsl #1
   185e8:	ldrh	r2, [r6, #22]
   185ec:	uxth	r4, r7
   185f0:	cmp	r4, r2
   185f4:	bcs	1860c <flatcc_verify_union_vector_field@@Base+0x48>
   185f8:	ldr	r5, [r6, #12]
   185fc:	uxtah	r5, r5, r7
   18600:	ldrh	r5, [r5]
   18604:	cmp	r5, #0
   18608:	bne	1864c <flatcc_verify_union_vector_field@@Base+0x88>
   1860c:	add	r1, r1, sl, lsl #1
   18610:	uxth	r5, r1
   18614:	cmp	r5, r2
   18618:	bcs	18640 <flatcc_verify_union_vector_field@@Base+0x7c>
   1861c:	cmp	r9, #0
   18620:	beq	1864c <flatcc_verify_union_vector_field@@Base+0x88>
   18624:	ldr	r2, [r6, #12]
   18628:	mov	r5, #22
   1862c:	uxtah	r1, r2, r1
   18630:	ldrh	r1, [r1]
   18634:	cmp	r1, #0
   18638:	beq	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   1863c:	b	1864c <flatcc_verify_union_vector_field@@Base+0x88>
   18640:	mov	r5, #22
   18644:	cmp	r9, #0
   18648:	bne	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   1864c:	uxth	r5, r0
   18650:	mvn	r1, #0
   18654:	str	r3, [sp, #12]
   18658:	mov	r8, #1
   1865c:	mov	r0, r6
   18660:	mov	r2, r9
   18664:	mov	r3, #1
   18668:	str	r1, [sp, #4]
   1866c:	str	r8, [sp]
   18670:	mov	r1, r5
   18674:	bl	17738 <flatcc_verify_vector_field@@Base>
   18678:	cmp	r0, #0
   1867c:	beq	186a8 <flatcc_verify_union_vector_field@@Base+0xe4>
   18680:	mvn	r0, #0
   18684:	mov	r1, r5
   18688:	mov	r2, r9
   1868c:	mov	r3, #1
   18690:	str	r8, [sp]
   18694:	str	r0, [sp, #4]
   18698:	mov	r0, r6
   1869c:	bl	17738 <flatcc_verify_vector_field@@Base>
   186a0:	mov	r5, r0
   186a4:	b	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   186a8:	ldrh	r0, [r6, #22]
   186ac:	mov	r5, #0
   186b0:	cmp	r4, r0
   186b4:	bcs	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   186b8:	ldr	r0, [r6, #12]
   186bc:	uxtah	r0, r0, r7
   186c0:	ldrh	r0, [r0]
   186c4:	cmp	r0, #0
   186c8:	beq	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   186cc:	ldr	r1, [r6]
   186d0:	ldr	r2, [r6, #16]
   186d4:	ldr	r7, [sp, #12]
   186d8:	add	r1, r1, r2
   186dc:	adds	r0, r1, r0
   186e0:	beq	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   186e4:	ldr	r4, [r0]
   186e8:	add	r3, sp, #16
   186ec:	mov	r1, sl
   186f0:	mov	r2, r9
   186f4:	ldr	r8, [r4, r0]!
   186f8:	mov	r0, r6
   186fc:	bl	176b8 <flatcc_verify_string_field@@Base+0x8c>
   18700:	mov	r5, r0
   18704:	cmp	r0, #0
   18708:	bne	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   1870c:	ldr	r1, [sp, #16]
   18710:	cmp	r1, #0
   18714:	beq	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   18718:	ldr	r0, [r6, #8]
   1871c:	cmp	r0, #1
   18720:	blt	187fc <flatcc_verify_union_vector_field@@Base+0x238>
   18724:	ldr	sl, [r6]
   18728:	mov	r5, #16
   1872c:	ldr	r2, [sl, r1]
   18730:	add	r2, r2, r1
   18734:	cmp	r2, r1
   18738:	bls	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   1873c:	ldr	r1, [r6, #4]
   18740:	add	r6, r2, #4
   18744:	cmp	r6, r1
   18748:	bhi	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   1874c:	ands	r3, r6, #3
   18750:	bne	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   18754:	ldr	r3, [sl, r2]
   18758:	mov	r5, #25
   1875c:	cmn	r3, #-1073741823	; 0xc0000001
   18760:	bhi	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   18764:	sub	r2, r1, r2
   18768:	mov	r5, #26
   1876c:	sub	r2, r2, #4
   18770:	cmp	r2, r3, lsl #2
   18774:	bcc	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   18778:	mov	r5, #34	; 0x22
   1877c:	cmp	r3, r8
   18780:	bne	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   18784:	sub	r0, r0, #1
   18788:	mov	r5, #0
   1878c:	cmp	r8, #0
   18790:	str	r0, [sp, #28]
   18794:	str	r1, [sp, #24]
   18798:	str	sl, [sp, #20]
   1879c:	beq	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   187a0:	add	r4, r4, #4
   187a4:	add	r9, sp, #20
   187a8:	ldr	r1, [sl, r6]
   187ac:	ldrb	r0, [r4]
   187b0:	cmp	r1, #0
   187b4:	beq	187e0 <flatcc_verify_union_vector_field@@Base+0x21c>
   187b8:	cmp	r0, #0
   187bc:	beq	1880c <flatcc_verify_union_vector_field@@Base+0x248>
   187c0:	str	r1, [sp, #40]	; 0x28
   187c4:	str	r6, [sp, #36]	; 0x24
   187c8:	strb	r0, [sp, #32]
   187cc:	mov	r0, r9
   187d0:	blx	r7
   187d4:	cmp	r0, #0
   187d8:	beq	187e8 <flatcc_verify_union_vector_field@@Base+0x224>
   187dc:	b	18814 <flatcc_verify_union_vector_field@@Base+0x250>
   187e0:	cmp	r0, #0
   187e4:	bne	18820 <flatcc_verify_union_vector_field@@Base+0x25c>
   187e8:	add	r4, r4, #1
   187ec:	subs	r8, r8, #1
   187f0:	add	r6, r6, #4
   187f4:	bne	187a8 <flatcc_verify_union_vector_field@@Base+0x1e4>
   187f8:	b	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   187fc:	mov	r5, #3
   18800:	mov	r0, r5
   18804:	sub	sp, fp, #28
   18808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1880c:	mov	r5, #33	; 0x21
   18810:	b	18800 <flatcc_verify_union_vector_field@@Base+0x23c>
   18814:	add	r0, sp, #20
   18818:	blx	r7
   1881c:	b	186a0 <flatcc_verify_union_vector_field@@Base+0xdc>
   18820:	mov	r5, #32
   18824:	b	18800 <flatcc_verify_union_vector_field@@Base+0x23c>

00018828 <__libc_csu_init@@Base>:
   18828:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1882c:	mov	r7, r0
   18830:	ldr	r6, [pc, #72]	; 18880 <__libc_csu_init@@Base+0x58>
   18834:	ldr	r5, [pc, #72]	; 18884 <__libc_csu_init@@Base+0x5c>
   18838:	add	r6, pc, r6
   1883c:	add	r5, pc, r5
   18840:	sub	r6, r6, r5
   18844:	mov	r8, r1
   18848:	mov	r9, r2
   1884c:	bl	126ec <free@plt-0x20>
   18850:	asrs	r6, r6, #2
   18854:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18858:	mov	r4, #0
   1885c:	add	r4, r4, #1
   18860:	ldr	r3, [r5], #4
   18864:	mov	r2, r9
   18868:	mov	r1, r8
   1886c:	mov	r0, r7
   18870:	blx	r3
   18874:	cmp	r6, r4
   18878:	bne	1885c <__libc_csu_init@@Base+0x34>
   1887c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18880:	andeq	r2, r1, ip, asr #13
   18884:	andeq	r2, r1, r4, asr #13

00018888 <__libc_csu_fini@@Base>:
   18888:	bx	lr

Disassembly of section .fini:

0001888c <.fini>:
   1888c:	push	{r3, lr}
   18890:	pop	{r3, pc}
