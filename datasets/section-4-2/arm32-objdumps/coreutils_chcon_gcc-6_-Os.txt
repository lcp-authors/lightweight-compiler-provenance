
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011238 <.init>:
   11238:	push	{r3, lr}
   1123c:	bl	1239c <__assert_fail@plt+0xd60>
   11240:	pop	{r3, pc}

Disassembly of section .plt:

00011244 <fstatfs64@plt-0x14>:
   11244:	push	{lr}		; (str lr, [sp, #-4]!)
   11248:	ldr	lr, [pc, #4]	; 11254 <fstatfs64@plt-0x4>
   1124c:	add	lr, pc, lr
   11250:	ldr	pc, [lr, #8]!
   11254:	andeq	r9, r1, ip, lsr #27

00011258 <fstatfs64@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3500]!	; 0xdac

00011264 <calloc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3492]!	; 0xda4

00011270 <fputs_unlocked@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3484]!	; 0xd9c

0001127c <raise@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3476]!	; 0xd94

00011288 <is_selinux_enabled@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3468]!	; 0xd8c

00011294 <strcmp@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3460]!	; 0xd84

000112a0 <fflush@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112ac <lsetfilecon@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3444]!	; 0xd74

000112b8 <memmove@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112c4 <free@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3428]!	; 0xd64

000112d0 <_exit@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3420]!	; 0xd5c

000112dc <memcpy@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3412]!	; 0xd54

000112e8 <mbsinit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3404]!	; 0xd4c

000112f4 <context_new@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3396]!	; 0xd44

00011300 <memcmp@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3388]!	; 0xd3c

0001130c <fputc_unlocked@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3380]!	; 0xd34

00011318 <context_role_set@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3372]!	; 0xd2c

00011324 <dcgettext@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3364]!	; 0xd24

00011330 <context_type_set@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3356]!	; 0xd1c

0001133c <realloc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3348]!	; 0xd14

00011348 <fgetfilecon@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3340]!	; 0xd0c

00011354 <textdomain@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3332]!	; 0xd04

00011360 <chdir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3324]!	; 0xcfc

0001136c <__fxstatat64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3316]!	; 0xcf4

00011378 <iswprint@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3308]!	; 0xcec

00011384 <__fxstat64@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3300]!	; 0xce4

00011390 <lseek64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3292]!	; 0xcdc

0001139c <__ctype_get_mb_cur_max@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113a8 <strcpy@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3276]!	; 0xccc

000113b4 <__fpending@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3268]!	; 0xcc4

000113c0 <ferror_unlocked@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113cc <mbrtowc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3252]!	; 0xcb4

000113d8 <error@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3244]!	; 0xcac

000113e4 <security_check_context@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3236]!	; 0xca4

000113f0 <open64@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3228]!	; 0xc9c

000113fc <lgetfilecon@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3220]!	; 0xc94

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3212]!	; 0xc8c

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3204]!	; 0xc84

00011420 <__freading@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3196]!	; 0xc7c

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3188]!	; 0xc74

00011438 <context_free@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3180]!	; 0xc6c

00011444 <getopt_long@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3172]!	; 0xc64

00011450 <__ctype_b_loc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3164]!	; 0xc5c

0001145c <getcwd@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3156]!	; 0xc54

00011468 <exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3148]!	; 0xc4c

00011474 <context_user_set@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3140]!	; 0xc44

00011480 <getfilecon@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3132]!	; 0xc3c

0001148c <strlen@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3124]!	; 0xc34

00011498 <openat64@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114a4 <memrchr@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3108]!	; 0xc24

000114b0 <__errno_location@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114bc <__sprintf_chk@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #3092]!	; 0xc14

000114c8 <__cxa_atexit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #3084]!	; 0xc0c

000114d4 <memset@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #3076]!	; 0xc04

000114e0 <__printf_chk@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #3068]!	; 0xbfc

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #102400	; 0x19000
   114f4:	ldr	pc, [ip, #3060]!	; 0xbf4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #102400	; 0x19000
   11500:	ldr	pc, [ip, #3052]!	; 0xbec

00011504 <memchr@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #102400	; 0x19000
   1150c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011510 <setfilecon@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #102400	; 0x19000
   11518:	ldr	pc, [ip, #3036]!	; 0xbdc

0001151c <access@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #102400	; 0x19000
   11524:	ldr	pc, [ip, #3028]!	; 0xbd4

00011528 <fclose@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #102400	; 0x19000
   11530:	ldr	pc, [ip, #3020]!	; 0xbcc

00011534 <fseeko64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #102400	; 0x19000
   1153c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011540 <fcntl64@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #102400	; 0x19000
   11548:	ldr	pc, [ip, #3004]!	; 0xbbc

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #102400	; 0x19000
   11554:	ldr	pc, [ip, #2996]!	; 0xbb4

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #102400	; 0x19000
   11560:	ldr	pc, [ip, #2988]!	; 0xbac

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #102400	; 0x19000
   1156c:	ldr	pc, [ip, #2980]!	; 0xba4

00011570 <readdir64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #102400	; 0x19000
   11578:	ldr	pc, [ip, #2972]!	; 0xb9c

0001157c <fdopendir@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #102400	; 0x19000
   11584:	ldr	pc, [ip, #2964]!	; 0xb94

00011588 <dirfd@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #102400	; 0x19000
   11590:	ldr	pc, [ip, #2956]!	; 0xb8c

00011594 <fchdir@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #102400	; 0x19000
   1159c:	ldr	pc, [ip, #2948]!	; 0xb84

000115a0 <qsort@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #102400	; 0x19000
   115a8:	ldr	pc, [ip, #2940]!	; 0xb7c

000115ac <freecon@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #102400	; 0x19000
   115b4:	ldr	pc, [ip, #2932]!	; 0xb74

000115b8 <bindtextdomain@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #102400	; 0x19000
   115c0:	ldr	pc, [ip, #2924]!	; 0xb6c

000115c4 <context_range_set@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #102400	; 0x19000
   115cc:	ldr	pc, [ip, #2916]!	; 0xb64

000115d0 <context_str@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #102400	; 0x19000
   115d8:	ldr	pc, [ip, #2908]!	; 0xb5c

000115dc <__xstat64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #102400	; 0x19000
   115e4:	ldr	pc, [ip, #2900]!	; 0xb54

000115e8 <fputs@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #102400	; 0x19000
   115f0:	ldr	pc, [ip, #2892]!	; 0xb4c

000115f4 <strncmp@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #102400	; 0x19000
   115fc:	ldr	pc, [ip, #2884]!	; 0xb44

00011600 <abort@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #102400	; 0x19000
   11608:	ldr	pc, [ip, #2876]!	; 0xb3c

0001160c <close@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #102400	; 0x19000
   11614:	ldr	pc, [ip, #2868]!	; 0xb34

00011618 <__lxstat64@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #102400	; 0x19000
   11620:	ldr	pc, [ip, #2860]!	; 0xb2c

00011624 <closedir@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #102400	; 0x19000
   1162c:	ldr	pc, [ip, #2852]!	; 0xb24

00011630 <strspn@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #102400	; 0x19000
   11638:	ldr	pc, [ip, #2844]!	; 0xb1c

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #102400	; 0x19000
   11644:	ldr	pc, [ip, #2836]!	; 0xb14

Disassembly of section .text:

00011648 <.text>:
   11648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1164c:	sub	sp, sp, #44	; 0x2c
   11650:	mov	sl, r1
   11654:	str	r0, [sp, #20]
   11658:	ldr	r0, [r1]
   1165c:	bl	154c8 <__assert_fail@plt+0x3e8c>
   11660:	ldr	r1, [pc, #3140]	; 122ac <__assert_fail@plt+0xc70>
   11664:	mov	r0, #6
   11668:	bl	1154c <setlocale@plt>
   1166c:	mov	r7, #0
   11670:	ldr	r1, [pc, #3128]	; 122b0 <__assert_fail@plt+0xc74>
   11674:	ldr	r0, [pc, #3128]	; 122b4 <__assert_fail@plt+0xc78>
   11678:	ldr	r9, [pc, #3128]	; 122b8 <__assert_fail@plt+0xc7c>
   1167c:	ldr	fp, [pc, #3128]	; 122bc <__assert_fail@plt+0xc80>
   11680:	bl	115b8 <bindtextdomain@plt>
   11684:	mov	r5, r7
   11688:	ldr	r0, [pc, #3108]	; 122b4 <__assert_fail@plt+0xc78>
   1168c:	mvn	r4, #0
   11690:	mov	r8, #16
   11694:	bl	11354 <textdomain@plt>
   11698:	ldr	r0, [pc, #3104]	; 122c0 <__assert_fail@plt+0xc84>
   1169c:	bl	18f7c <__assert_fail@plt+0x7940>
   116a0:	str	r7, [sp, #24]
   116a4:	mov	r6, #0
   116a8:	str	r6, [sp]
   116ac:	ldr	r3, [pc, #3088]	; 122c4 <__assert_fail@plt+0xc88>
   116b0:	ldr	r2, [pc, #3088]	; 122c8 <__assert_fail@plt+0xc8c>
   116b4:	mov	r1, sl
   116b8:	ldr	r0, [sp, #20]
   116bc:	bl	11444 <getopt_long@plt>
   116c0:	cmn	r0, #1
   116c4:	bne	1170c <__assert_fail@plt+0xd0>
   116c8:	ldr	fp, [pc, #3048]	; 122b8 <__assert_fail@plt+0xc7c>
   116cc:	ldrb	r3, [fp]
   116d0:	cmp	r3, r6
   116d4:	beq	118b4 <__assert_fail@plt+0x278>
   116d8:	cmp	r8, #16
   116dc:	bne	11888 <__assert_fail@plt+0x24c>
   116e0:	cmp	r4, #1
   116e4:	strbne	r6, [fp, #20]
   116e8:	bne	118c4 <__assert_fail@plt+0x288>
   116ec:	mov	r2, #5
   116f0:	ldr	r1, [pc, #3028]	; 122cc <__assert_fail@plt+0xc90>
   116f4:	mov	r0, r6
   116f8:	bl	11324 <dcgettext@plt>
   116fc:	mov	r1, r6
   11700:	mov	r2, r0
   11704:	mov	r0, #1
   11708:	bl	113d8 <error@plt>
   1170c:	cmp	r0, #108	; 0x6c
   11710:	beq	1186c <__assert_fail@plt+0x230>
   11714:	bgt	117a8 <__assert_fail@plt+0x16c>
   11718:	cmp	r0, #76	; 0x4c
   1171c:	beq	11880 <__assert_fail@plt+0x244>
   11720:	bgt	11774 <__assert_fail@plt+0x138>
   11724:	cmn	r0, #2
   11728:	beq	11878 <__assert_fail@plt+0x23c>
   1172c:	cmp	r0, #72	; 0x48
   11730:	beq	11814 <__assert_fail@plt+0x1d8>
   11734:	cmn	r0, #3
   11738:	bne	11788 <__assert_fail@plt+0x14c>
   1173c:	ldr	r3, [pc, #2956]	; 122d0 <__assert_fail@plt+0xc94>
   11740:	ldr	r0, [pc, #2956]	; 122d4 <__assert_fail@plt+0xc98>
   11744:	str	r3, [sp, #4]
   11748:	ldr	r3, [pc, #2952]	; 122d8 <__assert_fail@plt+0xc9c>
   1174c:	str	r6, [sp, #8]
   11750:	str	r3, [sp]
   11754:	ldr	r3, [pc, #2944]	; 122dc <__assert_fail@plt+0xca0>
   11758:	ldr	r0, [r0]
   1175c:	ldr	r2, [pc, #2940]	; 122e0 <__assert_fail@plt+0xca4>
   11760:	ldr	r3, [r3]
   11764:	ldr	r1, [pc, #2936]	; 122e4 <__assert_fail@plt+0xca8>
   11768:	bl	176c0 <__assert_fail@plt+0x6084>
   1176c:	mov	r0, r6
   11770:	bl	11468 <exit@plt>
   11774:	cmp	r0, #82	; 0x52
   11778:	beq	11838 <__assert_fail@plt+0x1fc>
   1177c:	bgt	11790 <__assert_fail@plt+0x154>
   11780:	cmp	r0, #80	; 0x50
   11784:	beq	1181c <__assert_fail@plt+0x1e0>
   11788:	mov	r0, #1
   1178c:	b	1187c <__assert_fail@plt+0x240>
   11790:	cmp	r0, #102	; 0x66
   11794:	beq	116a4 <__assert_fail@plt+0x68>
   11798:	cmp	r0, #104	; 0x68
   1179c:	bne	11788 <__assert_fail@plt+0x14c>
   117a0:	mov	r4, r6
   117a4:	b	116a4 <__assert_fail@plt+0x68>
   117a8:	cmp	r0, #118	; 0x76
   117ac:	beq	11844 <__assert_fail@plt+0x208>
   117b0:	bgt	117d4 <__assert_fail@plt+0x198>
   117b4:	cmp	r0, #116	; 0x74
   117b8:	beq	11860 <__assert_fail@plt+0x224>
   117bc:	bgt	11850 <__assert_fail@plt+0x214>
   117c0:	cmp	r0, #114	; 0x72
   117c4:	bne	11788 <__assert_fail@plt+0x14c>
   117c8:	ldr	r3, [fp]
   117cc:	str	r3, [r9, #8]
   117d0:	b	11858 <__assert_fail@plt+0x21c>
   117d4:	ldr	r3, [pc, #2828]	; 122e8 <__assert_fail@plt+0xcac>
   117d8:	cmp	r0, r3
   117dc:	beq	11824 <__assert_fail@plt+0x1e8>
   117e0:	bgt	117f4 <__assert_fail@plt+0x1b8>
   117e4:	cmp	r0, #256	; 0x100
   117e8:	bne	11788 <__assert_fail@plt+0x14c>
   117ec:	mov	r4, #1
   117f0:	b	116a4 <__assert_fail@plt+0x68>
   117f4:	ldr	r3, [pc, #2800]	; 122ec <__assert_fail@plt+0xcb0>
   117f8:	cmp	r0, r3
   117fc:	beq	1182c <__assert_fail@plt+0x1f0>
   11800:	add	r3, r3, #1
   11804:	cmp	r0, r3
   11808:	bne	11788 <__assert_fail@plt+0x14c>
   1180c:	ldr	r7, [fp]
   11810:	b	116a4 <__assert_fail@plt+0x68>
   11814:	mov	r8, #17
   11818:	b	116a4 <__assert_fail@plt+0x68>
   1181c:	mov	r8, #16
   11820:	b	116a4 <__assert_fail@plt+0x68>
   11824:	str	r6, [sp, #24]
   11828:	b	116a4 <__assert_fail@plt+0x68>
   1182c:	mov	r3, #1
   11830:	str	r3, [sp, #24]
   11834:	b	116a4 <__assert_fail@plt+0x68>
   11838:	mov	r3, #1
   1183c:	strb	r3, [r9]
   11840:	b	116a4 <__assert_fail@plt+0x68>
   11844:	mov	r3, #1
   11848:	strb	r3, [r9, #1]
   1184c:	b	116a4 <__assert_fail@plt+0x68>
   11850:	ldr	r3, [fp]
   11854:	str	r3, [r9, #4]
   11858:	mov	r5, #1
   1185c:	b	116a4 <__assert_fail@plt+0x68>
   11860:	ldr	r3, [fp]
   11864:	str	r3, [r9, #12]
   11868:	b	11858 <__assert_fail@plt+0x21c>
   1186c:	ldr	r3, [fp]
   11870:	str	r3, [r9, #16]
   11874:	b	11858 <__assert_fail@plt+0x21c>
   11878:	mov	r0, r6
   1187c:	bl	12488 <__assert_fail@plt+0xe4c>
   11880:	mov	r8, #2
   11884:	b	116a4 <__assert_fail@plt+0x68>
   11888:	cmp	r4, #0
   1188c:	movne	r3, #1
   11890:	strbne	r3, [fp, #20]
   11894:	bne	118c4 <__assert_fail@plt+0x288>
   11898:	mov	r2, #5
   1189c:	ldr	r1, [pc, #2636]	; 122f0 <__assert_fail@plt+0xcb4>
   118a0:	mov	r0, r4
   118a4:	bl	11324 <dcgettext@plt>
   118a8:	mov	r1, r4
   118ac:	mov	r2, r0
   118b0:	b	11704 <__assert_fail@plt+0xc8>
   118b4:	adds	r4, r4, #0
   118b8:	mov	r8, #16
   118bc:	movne	r4, #1
   118c0:	strb	r4, [fp, #20]
   118c4:	ldr	r2, [pc, #2600]	; 122f4 <__assert_fail@plt+0xcb8>
   118c8:	adds	r4, r7, #0
   118cc:	ldr	r1, [sp, #20]
   118d0:	ldr	r3, [r2]
   118d4:	movne	r4, #1
   118d8:	orrs	r0, r5, r4
   118dc:	sub	r1, r1, r3
   118e0:	moveq	r0, #2
   118e4:	movne	r0, #1
   118e8:	cmp	r0, r1
   118ec:	mov	r6, r2
   118f0:	ble	11940 <__assert_fail@plt+0x304>
   118f4:	ldr	r2, [sp, #20]
   118f8:	cmp	r2, r3
   118fc:	mov	r2, #5
   11900:	ldrle	r1, [pc, #2544]	; 122f8 <__assert_fail@plt+0xcbc>
   11904:	ble	11a1c <__assert_fail@plt+0x3e0>
   11908:	ldr	r1, [pc, #2540]	; 122fc <__assert_fail@plt+0xcc0>
   1190c:	mov	r0, #0
   11910:	bl	11324 <dcgettext@plt>
   11914:	ldr	r3, [sp, #20]
   11918:	sub	r3, r3, #-1073741823	; 0xc0000001
   1191c:	mov	r4, r0
   11920:	ldr	r0, [sl, r3, lsl #2]
   11924:	bl	16af8 <__assert_fail@plt+0x54bc>
   11928:	mov	r1, #0
   1192c:	mov	r2, r4
   11930:	mov	r3, r0
   11934:	mov	r0, r1
   11938:	bl	113d8 <error@plt>
   1193c:	b	11788 <__assert_fail@plt+0x14c>
   11940:	cmp	r7, #0
   11944:	beq	119a8 <__assert_fail@plt+0x36c>
   11948:	add	r1, sp, #40	; 0x28
   1194c:	mov	r9, #0
   11950:	str	r9, [r1, #-4]!
   11954:	mov	r0, r7
   11958:	bl	171f8 <__assert_fail@plt+0x5bbc>
   1195c:	cmp	r0, r9
   11960:	ldrge	r3, [sp, #36]	; 0x24
   11964:	strge	r3, [fp, #24]
   11968:	bge	11a08 <__assert_fail@plt+0x3cc>
   1196c:	bl	114b0 <__errno_location@plt>
   11970:	ldr	r1, [pc, #2440]	; 12300 <__assert_fail@plt+0xcc4>
   11974:	mov	r2, #5
   11978:	ldr	r4, [r0]
   1197c:	mov	r0, r9
   11980:	bl	11324 <dcgettext@plt>
   11984:	mov	r1, r7
   11988:	mov	r5, r0
   1198c:	mov	r0, #4
   11990:	bl	16914 <__assert_fail@plt+0x52d8>
   11994:	mov	r3, r0
   11998:	mov	r2, r5
   1199c:	mov	r1, r4
   119a0:	mov	r0, #1
   119a4:	bl	113d8 <error@plt>
   119a8:	cmp	r5, #0
   119ac:	strne	r7, [fp, #24]
   119b0:	bne	11a08 <__assert_fail@plt+0x3cc>
   119b4:	add	r1, r3, #1
   119b8:	ldr	r3, [sl, r3, lsl #2]
   119bc:	str	r1, [r2]
   119c0:	str	r3, [fp, #24]
   119c4:	bl	11288 <is_selinux_enabled@plt>
   119c8:	cmp	r0, #0
   119cc:	ble	11a08 <__assert_fail@plt+0x3cc>
   119d0:	ldr	r0, [fp, #24]
   119d4:	bl	113e4 <security_check_context@plt>
   119d8:	cmp	r0, #0
   119dc:	bge	11a08 <__assert_fail@plt+0x3cc>
   119e0:	bl	114b0 <__errno_location@plt>
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #2324]	; 12304 <__assert_fail@plt+0xcc8>
   119ec:	ldr	r4, [r0]
   119f0:	mov	r0, r5
   119f4:	bl	11324 <dcgettext@plt>
   119f8:	mov	r5, r0
   119fc:	ldr	r0, [fp, #24]
   11a00:	bl	16af8 <__assert_fail@plt+0x54bc>
   11a04:	b	11994 <__assert_fail@plt+0x358>
   11a08:	ands	r3, r5, r4
   11a0c:	str	r3, [sp, #20]
   11a10:	beq	11a38 <__assert_fail@plt+0x3fc>
   11a14:	ldr	r1, [pc, #2284]	; 12308 <__assert_fail@plt+0xccc>
   11a18:	mov	r2, #5
   11a1c:	mov	r0, #0
   11a20:	bl	11324 <dcgettext@plt>
   11a24:	mov	r1, #0
   11a28:	mov	r2, r0
   11a2c:	mov	r0, r1
   11a30:	bl	113d8 <error@plt>
   11a34:	b	11788 <__assert_fail@plt+0x14c>
   11a38:	ldrb	r3, [fp]
   11a3c:	ldr	r2, [sp, #24]
   11a40:	tst	r2, r3
   11a44:	ldreq	r3, [sp, #20]
   11a48:	streq	r3, [fp, #48]	; 0x30
   11a4c:	beq	11aa0 <__assert_fail@plt+0x464>
   11a50:	ldr	r0, [pc, #2228]	; 1230c <__assert_fail@plt+0xcd0>
   11a54:	bl	16b04 <__assert_fail@plt+0x54c8>
   11a58:	cmp	r0, #0
   11a5c:	mov	r4, r0
   11a60:	str	r0, [fp, #48]	; 0x30
   11a64:	bne	11aa0 <__assert_fail@plt+0x464>
   11a68:	bl	114b0 <__errno_location@plt>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #2200]	; 12310 <__assert_fail@plt+0xcd4>
   11a74:	ldr	r5, [r0]
   11a78:	mov	r0, r4
   11a7c:	bl	11324 <dcgettext@plt>
   11a80:	ldr	r1, [pc, #2188]	; 12314 <__assert_fail@plt+0xcd8>
   11a84:	mov	r4, r0
   11a88:	mov	r0, #4
   11a8c:	bl	16914 <__assert_fail@plt+0x52d8>
   11a90:	mov	r2, r4
   11a94:	mov	r1, r5
   11a98:	mov	r3, r0
   11a9c:	b	119a0 <__assert_fail@plt+0x364>
   11aa0:	ldr	r0, [r6]
   11aa4:	mov	r2, #0
   11aa8:	orr	r1, r8, #8
   11aac:	add	r0, sl, r0, lsl #2
   11ab0:	bl	17c5c <__assert_fail@plt+0x6620>
   11ab4:	mov	r5, #0
   11ab8:	mov	r3, #1
   11abc:	str	r3, [sp, #28]
   11ac0:	mov	sl, r0
   11ac4:	mov	r0, sl
   11ac8:	bl	13ec4 <__assert_fail@plt+0x2888>
   11acc:	subs	r8, r0, #0
   11ad0:	bne	11b5c <__assert_fail@plt+0x520>
   11ad4:	bl	114b0 <__errno_location@plt>
   11ad8:	ldr	r5, [r0]
   11adc:	mov	r4, r0
   11ae0:	cmp	r5, #0
   11ae4:	beq	11b10 <__assert_fail@plt+0x4d4>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #2084]	; 12318 <__assert_fail@plt+0xcdc>
   11af0:	mov	r0, r8
   11af4:	bl	11324 <dcgettext@plt>
   11af8:	mov	r1, r5
   11afc:	mov	r2, r0
   11b00:	mov	r0, r8
   11b04:	bl	113d8 <error@plt>
   11b08:	ldr	r3, [sp, #20]
   11b0c:	str	r3, [sp, #28]
   11b10:	mov	r0, sl
   11b14:	bl	13dac <__assert_fail@plt+0x2770>
   11b18:	cmp	r0, #0
   11b1c:	beq	11b4c <__assert_fail@plt+0x510>
   11b20:	mov	r2, #5
   11b24:	ldr	r1, [pc, #2032]	; 1231c <__assert_fail@plt+0xce0>
   11b28:	mov	r0, #0
   11b2c:	ldr	r4, [r4]
   11b30:	bl	11324 <dcgettext@plt>
   11b34:	mov	r1, r4
   11b38:	mov	r2, r0
   11b3c:	mov	r0, #0
   11b40:	bl	113d8 <error@plt>
   11b44:	ldr	r3, [sp, #20]
   11b48:	str	r3, [sp, #28]
   11b4c:	ldr	r3, [sp, #28]
   11b50:	eor	r0, r3, #1
   11b54:	add	sp, sp, #44	; 0x2c
   11b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b5c:	ldr	r3, [r8, #24]
   11b60:	ldr	r4, [r8, #28]
   11b64:	str	r3, [sp, #24]
   11b68:	ldrh	r3, [r8, #56]	; 0x38
   11b6c:	sub	r3, r3, #1
   11b70:	cmp	r3, #9
   11b74:	ldrls	pc, [pc, r3, lsl #2]
   11b78:	b	11e6c <__assert_fail@plt+0x830>
   11b7c:	andeq	r1, r1, r4, lsr #23
   11b80:	andeq	r1, r1, ip, lsl lr
   11b84:	andeq	r1, r1, ip, ror #28
   11b88:	andeq	r1, r1, ip, lsl #28
   11b8c:	andeq	r1, r1, ip, ror #28
   11b90:	andeq	r1, r1, r4, asr #25
   11b94:	ldrdeq	r1, [r1], -ip
   11b98:	andeq	r1, r1, ip, ror #28
   11b9c:	andeq	r1, r1, ip, ror #28
   11ba0:	andeq	r1, r1, r8, lsl #27
   11ba4:	ldrb	r9, [fp]
   11ba8:	cmp	r9, #0
   11bac:	beq	11e6c <__assert_fail@plt+0x830>
   11bb0:	ldr	r3, [fp, #48]	; 0x30
   11bb4:	cmp	r3, #0
   11bb8:	beq	11c64 <__assert_fail@plt+0x628>
   11bbc:	ldrd	r6, [r8, #160]	; 0xa0
   11bc0:	ldrd	r0, [r3]
   11bc4:	cmp	r7, r1
   11bc8:	cmpeq	r6, r0
   11bcc:	bne	11c64 <__assert_fail@plt+0x628>
   11bd0:	ldrd	r0, [r8, #64]	; 0x40
   11bd4:	ldrd	r2, [r3, #8]
   11bd8:	cmp	r1, r3
   11bdc:	cmpeq	r0, r2
   11be0:	bne	11c64 <__assert_fail@plt+0x628>
   11be4:	ldr	r1, [pc, #1832]	; 12314 <__assert_fail@plt+0xcd8>
   11be8:	mov	r0, r4
   11bec:	bl	11294 <strcmp@plt>
   11bf0:	mov	r2, #5
   11bf4:	subs	r6, r0, #0
   11bf8:	bne	11c74 <__assert_fail@plt+0x638>
   11bfc:	ldr	r1, [pc, #1820]	; 12320 <__assert_fail@plt+0xce4>
   11c00:	bl	11324 <dcgettext@plt>
   11c04:	mov	r1, r4
   11c08:	mov	r7, r0
   11c0c:	mov	r0, #4
   11c10:	bl	16914 <__assert_fail@plt+0x52d8>
   11c14:	mov	r2, r7
   11c18:	mov	r1, r5
   11c1c:	mov	r3, r0
   11c20:	mov	r0, r6
   11c24:	bl	113d8 <error@plt>
   11c28:	mov	r2, #5
   11c2c:	ldr	r1, [pc, #1776]	; 12324 <__assert_fail@plt+0xce8>
   11c30:	mov	r0, r5
   11c34:	bl	11324 <dcgettext@plt>
   11c38:	mov	r1, r5
   11c3c:	mov	r2, r0
   11c40:	mov	r0, #0
   11c44:	bl	113d8 <error@plt>
   11c48:	mov	r2, #4
   11c4c:	mov	r1, r8
   11c50:	mov	r0, sl
   11c54:	bl	1448c <__assert_fail@plt+0x2e50>
   11c58:	mov	r0, sl
   11c5c:	bl	13ec4 <__assert_fail@plt+0x2888>
   11c60:	ldr	r9, [sp, #20]
   11c64:	ldr	r3, [sp, #28]
   11c68:	and	r3, r3, r9
   11c6c:	str	r3, [sp, #28]
   11c70:	b	11ac4 <__assert_fail@plt+0x488>
   11c74:	ldr	r1, [pc, #1708]	; 12328 <__assert_fail@plt+0xcec>
   11c78:	mov	r0, r5
   11c7c:	bl	11324 <dcgettext@plt>
   11c80:	mov	r2, r4
   11c84:	mov	r1, #4
   11c88:	mov	r6, r0
   11c8c:	mov	r0, r5
   11c90:	bl	168a8 <__assert_fail@plt+0x526c>
   11c94:	ldr	r2, [pc, #1656]	; 12314 <__assert_fail@plt+0xcd8>
   11c98:	mov	r1, #4
   11c9c:	mov	r4, r0
   11ca0:	mov	r0, #1
   11ca4:	bl	168a8 <__assert_fail@plt+0x526c>
   11ca8:	mov	r3, r4
   11cac:	mov	r2, r6
   11cb0:	mov	r1, r5
   11cb4:	str	r0, [sp]
   11cb8:	mov	r0, #0
   11cbc:	bl	113d8 <error@plt>
   11cc0:	b	11c28 <__assert_fail@plt+0x5ec>
   11cc4:	ldrb	r9, [fp]
   11cc8:	cmp	r9, #0
   11ccc:	moveq	r9, #1
   11cd0:	beq	11c64 <__assert_fail@plt+0x628>
   11cd4:	ldrh	r3, [r8, #56]	; 0x38
   11cd8:	cmp	r3, #6
   11cdc:	bne	11ec4 <__assert_fail@plt+0x888>
   11ce0:	cmp	r9, #0
   11ce4:	beq	12024 <__assert_fail@plt+0x9e8>
   11ce8:	ldr	ip, [fp, #48]	; 0x30
   11cec:	cmp	ip, #0
   11cf0:	beq	11ecc <__assert_fail@plt+0x890>
   11cf4:	ldrd	r0, [r8, #160]	; 0xa0
   11cf8:	ldrd	r2, [ip]
   11cfc:	cmp	r1, r3
   11d00:	cmpeq	r0, r2
   11d04:	bne	11ecc <__assert_fail@plt+0x890>
   11d08:	ldrd	r2, [r8, #64]	; 0x40
   11d0c:	ldrd	r0, [ip, #8]
   11d10:	cmp	r3, r1
   11d14:	cmpeq	r2, r0
   11d18:	bne	11ecc <__assert_fail@plt+0x890>
   11d1c:	ldr	r1, [pc, #1520]	; 12314 <__assert_fail@plt+0xcd8>
   11d20:	mov	r0, r4
   11d24:	bl	11294 <strcmp@plt>
   11d28:	mov	r2, #5
   11d2c:	subs	r6, r0, #0
   11d30:	bne	11e74 <__assert_fail@plt+0x838>
   11d34:	ldr	r1, [pc, #1508]	; 12320 <__assert_fail@plt+0xce4>
   11d38:	bl	11324 <dcgettext@plt>
   11d3c:	mov	r1, r4
   11d40:	mov	r7, r0
   11d44:	mov	r0, #4
   11d48:	bl	16914 <__assert_fail@plt+0x52d8>
   11d4c:	mov	r2, r7
   11d50:	mov	r1, r5
   11d54:	mov	r3, r0
   11d58:	mov	r0, r6
   11d5c:	bl	113d8 <error@plt>
   11d60:	mov	r2, #5
   11d64:	ldr	r1, [pc, #1464]	; 12324 <__assert_fail@plt+0xce8>
   11d68:	mov	r0, r5
   11d6c:	bl	11324 <dcgettext@plt>
   11d70:	mov	r1, r5
   11d74:	mov	r2, r0
   11d78:	mov	r0, #0
   11d7c:	bl	113d8 <error@plt>
   11d80:	ldr	r9, [sp, #20]
   11d84:	b	12024 <__assert_fail@plt+0x9e8>
   11d88:	ldr	r3, [r8, #48]	; 0x30
   11d8c:	cmp	r3, #0
   11d90:	bne	11dac <__assert_fail@plt+0x770>
   11d94:	ldr	r3, [r8, #16]
   11d98:	cmp	r3, #0
   11d9c:	moveq	r9, #1
   11da0:	streq	r9, [r8, #16]
   11da4:	moveq	r2, r9
   11da8:	beq	12034 <__assert_fail@plt+0x9f8>
   11dac:	ldr	r6, [r8, #32]
   11db0:	ldr	r1, [pc, #1396]	; 1232c <__assert_fail@plt+0xcf0>
   11db4:	mov	r2, #5
   11db8:	mov	r0, r5
   11dbc:	bl	11324 <dcgettext@plt>
   11dc0:	mov	r1, r4
   11dc4:	mov	r7, r0
   11dc8:	mov	r0, #4
   11dcc:	bl	16914 <__assert_fail@plt+0x52d8>
   11dd0:	mov	r2, r7
   11dd4:	mov	r3, r0
   11dd8:	b	11df8 <__assert_fail@plt+0x7bc>
   11ddc:	mov	r2, r4
   11de0:	mov	r1, #3
   11de4:	mov	r0, r5
   11de8:	ldr	r6, [r8, #32]
   11dec:	bl	169b8 <__assert_fail@plt+0x537c>
   11df0:	ldr	r2, [pc, #1336]	; 12330 <__assert_fail@plt+0xcf4>
   11df4:	mov	r3, r0
   11df8:	mov	r1, r6
   11dfc:	mov	r0, r5
   11e00:	bl	113d8 <error@plt>
   11e04:	ldr	r9, [sp, #20]
   11e08:	b	11cd4 <__assert_fail@plt+0x698>
   11e0c:	ldr	r6, [r8, #32]
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #1304]	; 12334 <__assert_fail@plt+0xcf8>
   11e18:	b	11db8 <__assert_fail@plt+0x77c>
   11e1c:	mov	r1, r8
   11e20:	mov	r0, sl
   11e24:	bl	17ca4 <__assert_fail@plt+0x6668>
   11e28:	cmp	r0, #0
   11e2c:	beq	11e6c <__assert_fail@plt+0x830>
   11e30:	mov	r2, #5
   11e34:	ldr	r1, [pc, #1276]	; 12338 <__assert_fail@plt+0xcfc>
   11e38:	mov	r0, r5
   11e3c:	bl	11324 <dcgettext@plt>
   11e40:	mov	r2, r4
   11e44:	mov	r1, #3
   11e48:	mov	r6, r0
   11e4c:	mov	r0, r5
   11e50:	bl	169b8 <__assert_fail@plt+0x537c>
   11e54:	mov	r2, r6
   11e58:	mov	r1, r5
   11e5c:	mov	r3, r0
   11e60:	mov	r0, #0
   11e64:	bl	113d8 <error@plt>
   11e68:	b	11c60 <__assert_fail@plt+0x624>
   11e6c:	mov	r9, #1
   11e70:	b	11cd4 <__assert_fail@plt+0x698>
   11e74:	ldr	r1, [pc, #1196]	; 12328 <__assert_fail@plt+0xcec>
   11e78:	mov	r0, r5
   11e7c:	bl	11324 <dcgettext@plt>
   11e80:	mov	r2, r4
   11e84:	mov	r1, #4
   11e88:	mov	r6, r0
   11e8c:	mov	r0, r5
   11e90:	bl	168a8 <__assert_fail@plt+0x526c>
   11e94:	ldr	r2, [pc, #1144]	; 12314 <__assert_fail@plt+0xcd8>
   11e98:	mov	r1, #4
   11e9c:	mov	r4, r0
   11ea0:	mov	r0, #1
   11ea4:	bl	168a8 <__assert_fail@plt+0x526c>
   11ea8:	mov	r3, r4
   11eac:	mov	r2, r6
   11eb0:	mov	r1, r5
   11eb4:	str	r0, [sp]
   11eb8:	mov	r0, #0
   11ebc:	bl	113d8 <error@plt>
   11ec0:	b	11d60 <__assert_fail@plt+0x724>
   11ec4:	cmp	r9, #0
   11ec8:	beq	12024 <__assert_fail@plt+0x9e8>
   11ecc:	ldrb	r3, [fp, #1]
   11ed0:	cmp	r3, #0
   11ed4:	beq	11f08 <__assert_fail@plt+0x8cc>
   11ed8:	mov	r2, #5
   11edc:	ldr	r1, [pc, #1112]	; 1233c <__assert_fail@plt+0xd00>
   11ee0:	mov	r0, r5
   11ee4:	bl	11324 <dcgettext@plt>
   11ee8:	mov	r1, r4
   11eec:	mov	r6, r0
   11ef0:	mov	r0, #4
   11ef4:	bl	16914 <__assert_fail@plt+0x52d8>
   11ef8:	mov	r1, r6
   11efc:	mov	r2, r0
   11f00:	mov	r0, #1
   11f04:	bl	114e0 <__printf_chk@plt>
   11f08:	ldr	r6, [fp, #24]
   11f0c:	ldr	r7, [sl, #32]
   11f10:	cmp	r6, #0
   11f14:	str	r5, [sp, #36]	; 0x24
   11f18:	movne	r4, r5
   11f1c:	bne	121e4 <__assert_fail@plt+0xba8>
   11f20:	ldrb	r3, [fp, #20]
   11f24:	add	r2, sp, #36	; 0x24
   11f28:	ldr	r1, [sp, #24]
   11f2c:	cmp	r3, #0
   11f30:	mov	r0, r7
   11f34:	beq	11f8c <__assert_fail@plt+0x950>
   11f38:	bl	16b44 <__assert_fail@plt+0x5508>
   11f3c:	cmp	r0, #0
   11f40:	bge	11f94 <__assert_fail@plt+0x958>
   11f44:	bl	114b0 <__errno_location@plt>
   11f48:	ldr	r4, [r0]
   11f4c:	cmp	r4, #61	; 0x3d
   11f50:	beq	11f94 <__assert_fail@plt+0x958>
   11f54:	mov	r2, #5
   11f58:	ldr	r1, [pc, #928]	; 12300 <__assert_fail@plt+0xcc4>
   11f5c:	mov	r0, r5
   11f60:	bl	11324 <dcgettext@plt>
   11f64:	ldr	r1, [sp, #24]
   11f68:	mov	r6, r0
   11f6c:	mov	r0, #4
   11f70:	bl	16914 <__assert_fail@plt+0x52d8>
   11f74:	mov	r2, r6
   11f78:	mov	r1, r4
   11f7c:	mov	r3, r0
   11f80:	mov	r0, r5
   11f84:	bl	113d8 <error@plt>
   11f88:	b	11d80 <__assert_fail@plt+0x744>
   11f8c:	bl	16cd8 <__assert_fail@plt+0x569c>
   11f90:	b	11f3c <__assert_fail@plt+0x900>
   11f94:	ldr	r6, [sp, #36]	; 0x24
   11f98:	cmp	r6, #0
   11f9c:	bne	11fd4 <__assert_fail@plt+0x998>
   11fa0:	mov	r2, #5
   11fa4:	ldr	r1, [pc, #916]	; 12340 <__assert_fail@plt+0xd04>
   11fa8:	mov	r0, r5
   11fac:	bl	11324 <dcgettext@plt>
   11fb0:	ldr	r1, [sp, #24]
   11fb4:	mov	r4, r0
   11fb8:	mov	r0, #4
   11fbc:	bl	16914 <__assert_fail@plt+0x52d8>
   11fc0:	mov	r2, r4
   11fc4:	mov	r1, r5
   11fc8:	mov	r3, r0
   11fcc:	mov	r0, r6
   11fd0:	b	11f84 <__assert_fail@plt+0x948>
   11fd4:	mov	r0, r6
   11fd8:	bl	112f4 <context_new@plt>
   11fdc:	subs	r4, r0, #0
   11fe0:	bne	12044 <__assert_fail@plt+0xa08>
   11fe4:	bl	114b0 <__errno_location@plt>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #848]	; 12344 <__assert_fail@plt+0xd08>
   11ff0:	ldr	r4, [r0]
   11ff4:	mov	r0, r5
   11ff8:	bl	11324 <dcgettext@plt>
   11ffc:	mov	r7, r0
   12000:	mov	r0, r6
   12004:	bl	16af8 <__assert_fail@plt+0x54bc>
   12008:	mov	r2, r7
   1200c:	mov	r1, r4
   12010:	mov	r3, r0
   12014:	mov	r0, r5
   12018:	bl	113d8 <error@plt>
   1201c:	mov	r9, #1
   12020:	eor	r9, r9, #1
   12024:	ldrb	r3, [fp]
   12028:	cmp	r3, #0
   1202c:	bne	11c64 <__assert_fail@plt+0x628>
   12030:	mov	r2, #4
   12034:	mov	r1, r8
   12038:	mov	r0, sl
   1203c:	bl	1448c <__assert_fail@plt+0x2e50>
   12040:	b	11c64 <__assert_fail@plt+0x628>
   12044:	ldr	r1, [fp, #4]
   12048:	cmp	r1, #0
   1204c:	bne	12180 <__assert_fail@plt+0xb44>
   12050:	mov	r6, #1
   12054:	ldr	r1, [fp, #16]
   12058:	cmp	r1, #0
   1205c:	beq	120b0 <__assert_fail@plt+0xa74>
   12060:	mov	r0, r4
   12064:	bl	115c4 <context_range_set@plt>
   12068:	cmp	r0, #0
   1206c:	beq	120b0 <__assert_fail@plt+0xa74>
   12070:	bl	114b0 <__errno_location@plt>
   12074:	mov	r2, #5
   12078:	ldr	r1, [pc, #712]	; 12348 <__assert_fail@plt+0xd0c>
   1207c:	ldr	r6, [r0]
   12080:	mov	r0, r5
   12084:	bl	11324 <dcgettext@plt>
   12088:	mov	r9, r0
   1208c:	ldr	r0, [fp, #16]
   12090:	bl	16af8 <__assert_fail@plt+0x54bc>
   12094:	mov	r1, r6
   12098:	ldr	r3, [pc, #684]	; 1234c <__assert_fail@plt+0xd10>
   1209c:	mov	r2, r9
   120a0:	str	r0, [sp]
   120a4:	mov	r0, r5
   120a8:	bl	113d8 <error@plt>
   120ac:	ldr	r6, [sp, #20]
   120b0:	ldr	r1, [fp, #8]
   120b4:	cmp	r1, #0
   120b8:	beq	1210c <__assert_fail@plt+0xad0>
   120bc:	mov	r0, r4
   120c0:	bl	11318 <context_role_set@plt>
   120c4:	cmp	r0, #0
   120c8:	beq	1210c <__assert_fail@plt+0xad0>
   120cc:	bl	114b0 <__errno_location@plt>
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #620]	; 12348 <__assert_fail@plt+0xd0c>
   120d8:	ldr	r6, [r0]
   120dc:	mov	r0, r5
   120e0:	bl	11324 <dcgettext@plt>
   120e4:	mov	r9, r0
   120e8:	ldr	r0, [fp, #8]
   120ec:	bl	16af8 <__assert_fail@plt+0x54bc>
   120f0:	mov	r1, r6
   120f4:	ldr	r3, [pc, #596]	; 12350 <__assert_fail@plt+0xd14>
   120f8:	mov	r2, r9
   120fc:	str	r0, [sp]
   12100:	mov	r0, r5
   12104:	bl	113d8 <error@plt>
   12108:	ldr	r6, [sp, #20]
   1210c:	ldr	r1, [fp, #12]
   12110:	cmp	r1, #0
   12114:	beq	121d0 <__assert_fail@plt+0xb94>
   12118:	mov	r0, r4
   1211c:	bl	11330 <context_type_set@plt>
   12120:	cmp	r0, #0
   12124:	beq	121d0 <__assert_fail@plt+0xb94>
   12128:	bl	114b0 <__errno_location@plt>
   1212c:	mov	r2, #5
   12130:	ldr	r1, [pc, #528]	; 12348 <__assert_fail@plt+0xd0c>
   12134:	ldr	r6, [r0]
   12138:	mov	r0, r5
   1213c:	bl	11324 <dcgettext@plt>
   12140:	mov	r7, r0
   12144:	ldr	r0, [fp, #12]
   12148:	bl	16af8 <__assert_fail@plt+0x54bc>
   1214c:	ldr	r3, [pc, #512]	; 12354 <__assert_fail@plt+0xd18>
   12150:	mov	r2, r7
   12154:	mov	r1, r6
   12158:	str	r0, [sp]
   1215c:	mov	r0, r5
   12160:	bl	113d8 <error@plt>
   12164:	bl	114b0 <__errno_location@plt>
   12168:	ldr	r7, [r0]
   1216c:	mov	r6, r0
   12170:	mov	r0, r4
   12174:	bl	11438 <context_free@plt>
   12178:	str	r7, [r6]
   1217c:	b	1201c <__assert_fail@plt+0x9e0>
   12180:	bl	11474 <context_user_set@plt>
   12184:	cmp	r0, #0
   12188:	beq	12050 <__assert_fail@plt+0xa14>
   1218c:	bl	114b0 <__errno_location@plt>
   12190:	mov	r2, #5
   12194:	ldr	r1, [pc, #428]	; 12348 <__assert_fail@plt+0xd0c>
   12198:	ldr	r6, [r0]
   1219c:	mov	r0, r5
   121a0:	bl	11324 <dcgettext@plt>
   121a4:	mov	r9, r0
   121a8:	ldr	r0, [fp, #4]
   121ac:	bl	16af8 <__assert_fail@plt+0x54bc>
   121b0:	mov	r1, r6
   121b4:	ldr	r3, [pc, #412]	; 12358 <__assert_fail@plt+0xd1c>
   121b8:	mov	r2, r9
   121bc:	str	r0, [sp]
   121c0:	mov	r0, r5
   121c4:	bl	113d8 <error@plt>
   121c8:	ldr	r6, [sp, #20]
   121cc:	b	12054 <__assert_fail@plt+0xa18>
   121d0:	cmp	r6, #0
   121d4:	beq	12164 <__assert_fail@plt+0xb28>
   121d8:	mov	r0, r4
   121dc:	bl	115d0 <context_str@plt>
   121e0:	mov	r6, r0
   121e4:	ldr	r1, [sp, #36]	; 0x24
   121e8:	cmp	r1, #0
   121ec:	beq	12224 <__assert_fail@plt+0xbe8>
   121f0:	mov	r0, r6
   121f4:	bl	11294 <strcmp@plt>
   121f8:	cmp	r0, #0
   121fc:	bne	12224 <__assert_fail@plt+0xbe8>
   12200:	mov	r9, r5
   12204:	ldr	r3, [fp, #24]
   12208:	cmp	r3, #0
   1220c:	bne	12020 <__assert_fail@plt+0x9e4>
   12210:	mov	r0, r4
   12214:	bl	11438 <context_free@plt>
   12218:	ldr	r0, [sp, #36]	; 0x24
   1221c:	bl	115ac <freecon@plt>
   12220:	b	12020 <__assert_fail@plt+0x9e4>
   12224:	ldrb	r3, [fp, #20]
   12228:	mov	r2, r6
   1222c:	ldr	r1, [sp, #24]
   12230:	cmp	r3, #0
   12234:	mov	r0, r7
   12238:	beq	122a4 <__assert_fail@plt+0xc68>
   1223c:	bl	16e6c <__assert_fail@plt+0x5830>
   12240:	cmp	r0, #0
   12244:	beq	12200 <__assert_fail@plt+0xbc4>
   12248:	bl	114b0 <__errno_location@plt>
   1224c:	mov	r2, #5
   12250:	ldr	r1, [pc, #260]	; 1235c <__assert_fail@plt+0xd20>
   12254:	ldr	r7, [r0]
   12258:	mov	r0, r5
   1225c:	bl	11324 <dcgettext@plt>
   12260:	ldr	r2, [sp, #24]
   12264:	mov	r1, #4
   12268:	mov	r9, r0
   1226c:	mov	r0, r5
   12270:	bl	168a8 <__assert_fail@plt+0x526c>
   12274:	mov	r1, r6
   12278:	str	r0, [sp, #24]
   1227c:	mov	r0, #1
   12280:	bl	16af0 <__assert_fail@plt+0x54b4>
   12284:	mov	r2, r9
   12288:	ldr	r3, [sp, #24]
   1228c:	mov	r1, r7
   12290:	mov	r9, #1
   12294:	str	r0, [sp]
   12298:	mov	r0, r5
   1229c:	bl	113d8 <error@plt>
   122a0:	b	12204 <__assert_fail@plt+0xbc8>
   122a4:	bl	17000 <__assert_fail@plt+0x59c4>
   122a8:	b	12240 <__assert_fail@plt+0xc04>
   122ac:	andeq	r9, r1, r8, lsl #16
   122b0:	andeq	r9, r1, r2, asr r9
   122b4:	andeq	r9, r1, pc, lsr #17
   122b8:	ldrdeq	fp, [r2], -r0
   122bc:	andeq	fp, r2, r8, asr #3
   122c0:			; <UNDEFINED> instruction: 0x000127b8
   122c4:	andeq	r9, r1, r0, lsr r0
   122c8:	andeq	r9, r1, r5, lsl #19
   122cc:	muleq	r1, r4, r9
   122d0:	andeq	r9, r1, sl, ror #18
   122d4:	andeq	fp, r2, r4, asr #3
   122d8:	andeq	r9, r1, r7, ror r9
   122dc:	andeq	fp, r2, r8, ror #2
   122e0:	andeq	r9, r1, fp, lsr #17
   122e4:	andeq	r9, r1, r0, lsl r1
   122e8:	andeq	r0, r0, r1, lsl #2
   122ec:	andeq	r0, r0, r2, lsl #2
   122f0:			; <UNDEFINED> instruction: 0x000199be
   122f4:			; <UNDEFINED> instruction: 0x0002b1b8
   122f8:	ldrdeq	r9, [r1], -r0
   122fc:	andeq	r9, r1, r0, ror #19
   12300:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   12304:	andeq	r9, r1, lr, lsl sl
   12308:	andeq	r9, r1, r2, lsr sl
   1230c:	strdeq	fp, [r2], -r0
   12310:	andeq	r9, r1, r0, ror #20
   12314:	ldrdeq	sl, [r1], -r8
   12318:	andeq	r9, r1, pc, ror sl
   1231c:	andeq	r9, r1, pc, ror #25
   12320:	andeq	r9, r1, pc, lsl #21
   12324:	strdeq	r9, [r1], -r6
   12328:			; <UNDEFINED> instruction: 0x00019abc
   1232c:	andeq	r9, r1, r7, lsr #22
   12330:			; <UNDEFINED> instruction: 0x00019dbd
   12334:	andeq	r9, r1, r8, lsr fp
   12338:	andeq	r9, r1, r1, asr fp
   1233c:	andeq	r9, r1, fp, lsl #24
   12340:	andeq	r9, r1, ip, lsr #24
   12344:	andeq	r9, r1, sp, asr ip
   12348:	andeq	r9, r1, r3, lsl #25
   1234c:			; <UNDEFINED> instruction: 0x00019cba
   12350:	andeq	r9, r1, r0, asr #25
   12354:	andeq	r9, r1, r5, asr #25
   12358:			; <UNDEFINED> instruction: 0x00019cb5
   1235c:	andeq	r9, r1, sl, asr #25
   12360:	mov	fp, #0
   12364:	mov	lr, #0
   12368:	pop	{r1}		; (ldr r1, [sp], #4)
   1236c:	mov	r2, sp
   12370:	push	{r2}		; (str r2, [sp, #-4]!)
   12374:	push	{r0}		; (str r0, [sp, #-4]!)
   12378:	ldr	ip, [pc, #16]	; 12390 <__assert_fail@plt+0xd54>
   1237c:	push	{ip}		; (str ip, [sp, #-4]!)
   12380:	ldr	r0, [pc, #12]	; 12394 <__assert_fail@plt+0xd58>
   12384:	ldr	r3, [pc, #12]	; 12398 <__assert_fail@plt+0xd5c>
   12388:	bl	11414 <__libc_start_main@plt>
   1238c:	bl	11600 <abort@plt>
   12390:	andeq	r8, r1, r8, ror pc
   12394:	andeq	r1, r1, r8, asr #12
   12398:	andeq	r8, r1, r8, lsl pc
   1239c:	ldr	r3, [pc, #20]	; 123b8 <__assert_fail@plt+0xd7c>
   123a0:	ldr	r2, [pc, #20]	; 123bc <__assert_fail@plt+0xd80>
   123a4:	add	r3, pc, r3
   123a8:	ldr	r2, [r3, r2]
   123ac:	cmp	r2, #0
   123b0:	bxeq	lr
   123b4:	b	1142c <__gmon_start__@plt>
   123b8:	andeq	r8, r1, r4, asr ip
   123bc:	andeq	r0, r0, ip, asr r1
   123c0:	ldr	r3, [pc, #28]	; 123e4 <__assert_fail@plt+0xda8>
   123c4:	ldr	r0, [pc, #28]	; 123e8 <__assert_fail@plt+0xdac>
   123c8:	sub	r3, r3, r0
   123cc:	cmp	r3, #6
   123d0:	bxls	lr
   123d4:	ldr	r3, [pc, #16]	; 123ec <__assert_fail@plt+0xdb0>
   123d8:	cmp	r3, #0
   123dc:	bxeq	lr
   123e0:	bx	r3
   123e4:			; <UNDEFINED> instruction: 0x0002b1b3
   123e8:			; <UNDEFINED> instruction: 0x0002b1b0
   123ec:	andeq	r0, r0, r0
   123f0:	ldr	r1, [pc, #36]	; 1241c <__assert_fail@plt+0xde0>
   123f4:	ldr	r0, [pc, #36]	; 12420 <__assert_fail@plt+0xde4>
   123f8:	sub	r1, r1, r0
   123fc:	asr	r1, r1, #2
   12400:	add	r1, r1, r1, lsr #31
   12404:	asrs	r1, r1, #1
   12408:	bxeq	lr
   1240c:	ldr	r3, [pc, #16]	; 12424 <__assert_fail@plt+0xde8>
   12410:	cmp	r3, #0
   12414:	bxeq	lr
   12418:	bx	r3
   1241c:			; <UNDEFINED> instruction: 0x0002b1b0
   12420:			; <UNDEFINED> instruction: 0x0002b1b0
   12424:	andeq	r0, r0, r0
   12428:	push	{r4, lr}
   1242c:	ldr	r4, [pc, #24]	; 1244c <__assert_fail@plt+0xe10>
   12430:	ldrb	r3, [r4]
   12434:	cmp	r3, #0
   12438:	popne	{r4, pc}
   1243c:	bl	123c0 <__assert_fail@plt+0xd84>
   12440:	mov	r3, #1
   12444:	strb	r3, [r4]
   12448:	pop	{r4, pc}
   1244c:	andeq	fp, r2, ip, asr #3
   12450:	ldr	r0, [pc, #40]	; 12480 <__assert_fail@plt+0xe44>
   12454:	ldr	r3, [r0]
   12458:	cmp	r3, #0
   1245c:	bne	12464 <__assert_fail@plt+0xe28>
   12460:	b	123f0 <__assert_fail@plt+0xdb4>
   12464:	ldr	r3, [pc, #24]	; 12484 <__assert_fail@plt+0xe48>
   12468:	cmp	r3, #0
   1246c:	beq	12460 <__assert_fail@plt+0xe24>
   12470:	push	{r4, lr}
   12474:	blx	r3
   12478:	pop	{r4, lr}
   1247c:	b	123f0 <__assert_fail@plt+0xdb4>
   12480:	andeq	sl, r2, ip, lsl #30
   12484:	andeq	r0, r0, r0
   12488:	subs	r5, r0, #0
   1248c:	push	{r7, lr}
   12490:	sub	sp, sp, #64	; 0x40
   12494:	ldr	r4, [pc, #656]	; 1272c <__assert_fail@plt+0x10f0>
   12498:	beq	124d0 <__assert_fail@plt+0xe94>
   1249c:	ldr	r3, [pc, #652]	; 12730 <__assert_fail@plt+0x10f4>
   124a0:	mov	r2, #5
   124a4:	ldr	r1, [pc, #648]	; 12734 <__assert_fail@plt+0x10f8>
   124a8:	mov	r0, #0
   124ac:	ldr	r6, [r3]
   124b0:	bl	11324 <dcgettext@plt>
   124b4:	ldr	r3, [r4]
   124b8:	mov	r1, #1
   124bc:	mov	r2, r0
   124c0:	mov	r0, r6
   124c4:	bl	114f8 <__fprintf_chk@plt>
   124c8:	mov	r0, r5
   124cc:	bl	11468 <exit@plt>
   124d0:	mov	r2, #5
   124d4:	ldr	r1, [pc, #604]	; 12738 <__assert_fail@plt+0x10fc>
   124d8:	bl	11324 <dcgettext@plt>
   124dc:	ldr	r3, [r4]
   124e0:	ldr	r4, [pc, #596]	; 1273c <__assert_fail@plt+0x1100>
   124e4:	mov	r2, r3
   124e8:	str	r3, [sp]
   124ec:	ldr	r9, [pc, #588]	; 12740 <__assert_fail@plt+0x1104>
   124f0:	mov	r6, r5
   124f4:	add	r7, sp, #8
   124f8:	mov	r1, r0
   124fc:	mov	r0, #1
   12500:	bl	114e0 <__printf_chk@plt>
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #564]	; 12744 <__assert_fail@plt+0x1108>
   1250c:	mov	r0, r5
   12510:	bl	11324 <dcgettext@plt>
   12514:	ldr	r1, [r4]
   12518:	bl	11270 <fputs_unlocked@plt>
   1251c:	mov	r2, #5
   12520:	ldr	r1, [pc, #544]	; 12748 <__assert_fail@plt+0x110c>
   12524:	mov	r0, r5
   12528:	bl	11324 <dcgettext@plt>
   1252c:	ldr	r1, [r4]
   12530:	bl	11270 <fputs_unlocked@plt>
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #524]	; 1274c <__assert_fail@plt+0x1110>
   1253c:	mov	r0, r5
   12540:	bl	11324 <dcgettext@plt>
   12544:	ldr	r1, [r4]
   12548:	bl	11270 <fputs_unlocked@plt>
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #504]	; 12750 <__assert_fail@plt+0x1114>
   12554:	mov	r0, r5
   12558:	bl	11324 <dcgettext@plt>
   1255c:	ldr	r1, [r4]
   12560:	bl	11270 <fputs_unlocked@plt>
   12564:	mov	r2, #5
   12568:	ldr	r1, [pc, #484]	; 12754 <__assert_fail@plt+0x1118>
   1256c:	mov	r0, r5
   12570:	bl	11324 <dcgettext@plt>
   12574:	ldr	r1, [r4]
   12578:	bl	11270 <fputs_unlocked@plt>
   1257c:	mov	r2, #5
   12580:	ldr	r1, [pc, #464]	; 12758 <__assert_fail@plt+0x111c>
   12584:	mov	r0, r5
   12588:	bl	11324 <dcgettext@plt>
   1258c:	ldr	r1, [r4]
   12590:	bl	11270 <fputs_unlocked@plt>
   12594:	mov	r2, #5
   12598:	ldr	r1, [pc, #444]	; 1275c <__assert_fail@plt+0x1120>
   1259c:	mov	r0, r5
   125a0:	bl	11324 <dcgettext@plt>
   125a4:	ldr	r1, [r4]
   125a8:	bl	11270 <fputs_unlocked@plt>
   125ac:	mov	r2, #5
   125b0:	ldr	r1, [pc, #424]	; 12760 <__assert_fail@plt+0x1124>
   125b4:	mov	r0, r5
   125b8:	bl	11324 <dcgettext@plt>
   125bc:	ldr	r1, [r4]
   125c0:	bl	11270 <fputs_unlocked@plt>
   125c4:	mov	r2, #5
   125c8:	ldr	r1, [pc, #404]	; 12764 <__assert_fail@plt+0x1128>
   125cc:	mov	r0, r5
   125d0:	bl	11324 <dcgettext@plt>
   125d4:	ldr	r1, [r4]
   125d8:	bl	11270 <fputs_unlocked@plt>
   125dc:	mov	r2, #5
   125e0:	ldr	r1, [pc, #384]	; 12768 <__assert_fail@plt+0x112c>
   125e4:	mov	r0, r5
   125e8:	bl	11324 <dcgettext@plt>
   125ec:	ldr	r1, [r4]
   125f0:	bl	11270 <fputs_unlocked@plt>
   125f4:	mov	r2, #5
   125f8:	ldr	r1, [pc, #364]	; 1276c <__assert_fail@plt+0x1130>
   125fc:	mov	r0, r5
   12600:	bl	11324 <dcgettext@plt>
   12604:	ldr	r1, [r4]
   12608:	bl	11270 <fputs_unlocked@plt>
   1260c:	ldr	lr, [pc, #348]	; 12770 <__assert_fail@plt+0x1134>
   12610:	add	ip, sp, #8
   12614:	ldm	lr!, {r0, r1, r2, r3}
   12618:	stmia	ip!, {r0, r1, r2, r3}
   1261c:	ldm	lr!, {r0, r1, r2, r3}
   12620:	stmia	ip!, {r0, r1, r2, r3}
   12624:	ldm	lr!, {r0, r1, r2, r3}
   12628:	stmia	ip!, {r0, r1, r2, r3}
   1262c:	ldm	lr, {r0, r1}
   12630:	stm	ip, {r0, r1}
   12634:	ldr	r1, [r7, r6]
   12638:	add	r8, r7, r6
   1263c:	cmp	r1, #0
   12640:	bne	126e4 <__assert_fail@plt+0x10a8>
   12644:	ldr	r6, [r8, #4]
   12648:	ldr	r7, [pc, #240]	; 12740 <__assert_fail@plt+0x1104>
   1264c:	cmp	r6, #0
   12650:	mov	r2, #5
   12654:	ldr	r1, [pc, #280]	; 12774 <__assert_fail@plt+0x1138>
   12658:	mov	r0, #0
   1265c:	moveq	r6, r7
   12660:	bl	11324 <dcgettext@plt>
   12664:	ldr	r3, [pc, #268]	; 12778 <__assert_fail@plt+0x113c>
   12668:	ldr	r2, [pc, #268]	; 1277c <__assert_fail@plt+0x1140>
   1266c:	mov	r1, r0
   12670:	mov	r0, #1
   12674:	bl	114e0 <__printf_chk@plt>
   12678:	mov	r1, #0
   1267c:	mov	r0, #5
   12680:	bl	1154c <setlocale@plt>
   12684:	cmp	r0, #0
   12688:	bne	126fc <__assert_fail@plt+0x10c0>
   1268c:	mov	r2, #5
   12690:	ldr	r1, [pc, #232]	; 12780 <__assert_fail@plt+0x1144>
   12694:	mov	r0, #0
   12698:	bl	11324 <dcgettext@plt>
   1269c:	ldr	r3, [pc, #156]	; 12740 <__assert_fail@plt+0x1104>
   126a0:	ldr	r2, [pc, #208]	; 12778 <__assert_fail@plt+0x113c>
   126a4:	mov	r1, r0
   126a8:	mov	r0, #1
   126ac:	bl	114e0 <__printf_chk@plt>
   126b0:	mov	r2, #5
   126b4:	ldr	r1, [pc, #200]	; 12784 <__assert_fail@plt+0x1148>
   126b8:	mov	r0, #0
   126bc:	bl	11324 <dcgettext@plt>
   126c0:	ldr	r2, [pc, #192]	; 12788 <__assert_fail@plt+0x114c>
   126c4:	cmp	r6, r7
   126c8:	ldr	r3, [pc, #188]	; 1278c <__assert_fail@plt+0x1150>
   126cc:	moveq	r3, r2
   126d0:	mov	r2, r6
   126d4:	mov	r1, r0
   126d8:	mov	r0, #1
   126dc:	bl	114e0 <__printf_chk@plt>
   126e0:	b	124c8 <__assert_fail@plt+0xe8c>
   126e4:	mov	r0, r9
   126e8:	bl	11294 <strcmp@plt>
   126ec:	add	r6, r6, #8
   126f0:	cmp	r0, #0
   126f4:	bne	12634 <__assert_fail@plt+0xff8>
   126f8:	b	12644 <__assert_fail@plt+0x1008>
   126fc:	mov	r2, #3
   12700:	ldr	r1, [pc, #136]	; 12790 <__assert_fail@plt+0x1154>
   12704:	bl	115f4 <strncmp@plt>
   12708:	cmp	r0, #0
   1270c:	beq	1268c <__assert_fail@plt+0x1050>
   12710:	mov	r2, #5
   12714:	ldr	r1, [pc, #120]	; 12794 <__assert_fail@plt+0x1158>
   12718:	mov	r0, #0
   1271c:	bl	11324 <dcgettext@plt>
   12720:	ldr	r1, [r4]
   12724:	bl	11270 <fputs_unlocked@plt>
   12728:	b	1268c <__assert_fail@plt+0x1050>
   1272c:	andeq	fp, r2, ip, lsl #4
   12730:	andeq	fp, r2, r0, asr #3
   12734:	andeq	r9, r1, r6, lsl r1
   12738:	andeq	r9, r1, sp, lsr r1
   1273c:	andeq	fp, r2, r4, asr #3
   12740:	andeq	r9, r1, r0, lsl r1
   12744:	ldrdeq	r9, [r1], -fp
   12748:	andeq	r9, r1, r6, ror #4
   1274c:			; <UNDEFINED> instruction: 0x000192b1
   12750:	muleq	r1, r8, r3
   12754:			; <UNDEFINED> instruction: 0x000194b3
   12758:	andeq	r9, r1, r3, lsr r5
   1275c:	andeq	r9, r1, sl, lsr #11
   12760:	strdeq	r9, [r1], -r1
   12764:	andeq	r9, r1, r8, lsr r6
   12768:	andeq	r9, r1, r9, lsl #16
   1276c:	andeq	r9, r1, r6, lsr r8
   12770:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12774:	andeq	r9, r1, ip, ror #16
   12778:	andeq	r9, r1, r3, lsl #17
   1277c:	andeq	r9, r1, fp, lsr #17
   12780:	andeq	r9, r1, r4, lsl #18
   12784:	andeq	r9, r1, pc, lsl r9
   12788:	andeq	r9, r1, ip, lsl sp
   1278c:	andeq	r9, r1, r8, lsl #16
   12790:			; <UNDEFINED> instruction: 0x000198b9
   12794:			; <UNDEFINED> instruction: 0x000198bd
   12798:	ldr	r3, [pc, #4]	; 127a4 <__assert_fail@plt+0x1168>
   1279c:	str	r0, [r3]
   127a0:	bx	lr
   127a4:	andeq	fp, r2, r4, lsl #4
   127a8:	ldr	r3, [pc, #4]	; 127b4 <__assert_fail@plt+0x1178>
   127ac:	strb	r0, [r3, #4]
   127b0:	bx	lr
   127b4:	andeq	fp, r2, r4, lsl #4
   127b8:	ldr	r3, [pc, #192]	; 12880 <__assert_fail@plt+0x1244>
   127bc:	push	{r0, r1, r4, r5, r6, lr}
   127c0:	ldr	r0, [r3]
   127c4:	bl	17ec4 <__assert_fail@plt+0x6888>
   127c8:	cmp	r0, #0
   127cc:	beq	12864 <__assert_fail@plt+0x1228>
   127d0:	ldr	r3, [pc, #172]	; 12884 <__assert_fail@plt+0x1248>
   127d4:	mov	r4, r3
   127d8:	ldrb	r2, [r3, #4]
   127dc:	cmp	r2, #0
   127e0:	beq	127f4 <__assert_fail@plt+0x11b8>
   127e4:	bl	114b0 <__errno_location@plt>
   127e8:	ldr	r3, [r0]
   127ec:	cmp	r3, #32
   127f0:	beq	12864 <__assert_fail@plt+0x1228>
   127f4:	mov	r2, #5
   127f8:	ldr	r1, [pc, #136]	; 12888 <__assert_fail@plt+0x124c>
   127fc:	mov	r0, #0
   12800:	bl	11324 <dcgettext@plt>
   12804:	ldr	r4, [r4]
   12808:	cmp	r4, #0
   1280c:	mov	r5, r0
   12810:	beq	12848 <__assert_fail@plt+0x120c>
   12814:	bl	114b0 <__errno_location@plt>
   12818:	ldr	r6, [r0]
   1281c:	mov	r0, r4
   12820:	bl	169a8 <__assert_fail@plt+0x536c>
   12824:	str	r5, [sp]
   12828:	ldr	r2, [pc, #92]	; 1288c <__assert_fail@plt+0x1250>
   1282c:	mov	r1, r6
   12830:	mov	r3, r0
   12834:	mov	r0, #0
   12838:	bl	113d8 <error@plt>
   1283c:	ldr	r3, [pc, #76]	; 12890 <__assert_fail@plt+0x1254>
   12840:	ldr	r0, [r3]
   12844:	bl	112d0 <_exit@plt>
   12848:	bl	114b0 <__errno_location@plt>
   1284c:	mov	r3, r5
   12850:	ldr	r2, [pc, #60]	; 12894 <__assert_fail@plt+0x1258>
   12854:	ldr	r1, [r0]
   12858:	mov	r0, r4
   1285c:	bl	113d8 <error@plt>
   12860:	b	1283c <__assert_fail@plt+0x1200>
   12864:	ldr	r3, [pc, #44]	; 12898 <__assert_fail@plt+0x125c>
   12868:	ldr	r0, [r3]
   1286c:	bl	17ec4 <__assert_fail@plt+0x6888>
   12870:	cmp	r0, #0
   12874:	bne	1283c <__assert_fail@plt+0x1200>
   12878:	add	sp, sp, #8
   1287c:	pop	{r4, r5, r6, pc}
   12880:	andeq	fp, r2, r4, asr #3
   12884:	andeq	fp, r2, r4, lsl #4
   12888:	andeq	r9, r1, sp, lsr #27
   1288c:			; <UNDEFINED> instruction: 0x00019db9
   12890:	andeq	fp, r2, ip, ror #2
   12894:			; <UNDEFINED> instruction: 0x00019dbd
   12898:	andeq	fp, r2, r0, asr #3
   1289c:	ldrd	r2, [r1, #8]
   128a0:	push	{r4, r5, lr}
   128a4:	ldrd	r4, [r0, #8]
   128a8:	cmp	r5, r3
   128ac:	cmpeq	r4, r2
   128b0:	bne	128d0 <__assert_fail@plt+0x1294>
   128b4:	ldrd	r4, [r0]
   128b8:	ldrd	r2, [r1]
   128bc:	cmp	r5, r3
   128c0:	cmpeq	r4, r2
   128c4:	moveq	r0, #1
   128c8:	movne	r0, #0
   128cc:	pop	{r4, r5, pc}
   128d0:	mov	r0, #0
   128d4:	pop	{r4, r5, pc}
   128d8:	push	{r4, lr}
   128dc:	mov	r2, r1
   128e0:	mov	r3, #0
   128e4:	ldrd	r0, [r0, #8]
   128e8:	bl	18da4 <__assert_fail@plt+0x7768>
   128ec:	mov	r0, r2
   128f0:	pop	{r4, pc}
   128f4:	push	{r4, lr}
   128f8:	mov	r2, r1
   128fc:	mov	r3, #0
   12900:	ldrd	r0, [r0]
   12904:	bl	18da4 <__assert_fail@plt+0x7768>
   12908:	mov	r0, r2
   1290c:	pop	{r4, pc}
   12910:	ldrd	r2, [r1]
   12914:	push	{r4, r5, lr}
   12918:	ldrd	r4, [r0]
   1291c:	cmp	r5, r3
   12920:	cmpeq	r4, r2
   12924:	moveq	r0, #1
   12928:	movne	r0, #0
   1292c:	pop	{r4, r5, pc}
   12930:	ldr	r3, [r0]
   12934:	push	{r4, r5, lr}
   12938:	ldrd	r4, [r3, #160]	; 0xa0
   1293c:	ldr	r3, [r1]
   12940:	ldrd	r2, [r3, #160]	; 0xa0
   12944:	cmp	r5, r3
   12948:	cmpeq	r4, r2
   1294c:	movhi	r0, #1
   12950:	movls	r0, #0
   12954:	movcc	r3, #1
   12958:	movcs	r3, #0
   1295c:	sub	r0, r0, r3
   12960:	pop	{r4, r5, pc}
   12964:	ldr	r3, [r1, #48]	; 0x30
   12968:	push	{r4, r5, r6, lr}
   1296c:	cmp	r3, #0
   12970:	mov	r4, r1
   12974:	add	r5, r1, #64	; 0x40
   12978:	ldr	r3, [r0, #48]	; 0x30
   1297c:	bne	12988 <__assert_fail@plt+0x134c>
   12980:	tst	r3, #1
   12984:	movne	r2, #1
   12988:	lsl	r3, r3, #30
   1298c:	orrs	r3, r2, r3, lsr #31
   12990:	beq	129fc <__assert_fail@plt+0x13c0>
   12994:	mov	r1, r5
   12998:	ldr	r0, [r4, #24]
   1299c:	bl	18f94 <__assert_fail@plt+0x7958>
   129a0:	cmp	r0, #0
   129a4:	beq	12a24 <__assert_fail@plt+0x13e8>
   129a8:	bl	114b0 <__errno_location@plt>
   129ac:	ldr	r3, [r0]
   129b0:	mov	r6, r0
   129b4:	cmp	r3, #2
   129b8:	bne	129dc <__assert_fail@plt+0x13a0>
   129bc:	mov	r1, r5
   129c0:	ldr	r0, [r4, #24]
   129c4:	bl	18fb4 <__assert_fail@plt+0x7978>
   129c8:	cmp	r0, #0
   129cc:	bne	129dc <__assert_fail@plt+0x13a0>
   129d0:	str	r0, [r6]
   129d4:	mov	r0, #13
   129d8:	pop	{r4, r5, r6, pc}
   129dc:	ldr	r3, [r6]
   129e0:	str	r3, [r4, #32]
   129e4:	mov	r2, #104	; 0x68
   129e8:	mov	r1, #0
   129ec:	mov	r0, r5
   129f0:	bl	114d4 <memset@plt>
   129f4:	mov	r0, #10
   129f8:	pop	{r4, r5, r6, pc}
   129fc:	mov	r3, #256	; 0x100
   12a00:	mov	r2, r5
   12a04:	ldr	r1, [r4, #24]
   12a08:	ldr	r0, [r0, #32]
   12a0c:	bl	18fc4 <__assert_fail@plt+0x7988>
   12a10:	cmp	r0, #0
   12a14:	beq	12a24 <__assert_fail@plt+0x13e8>
   12a18:	bl	114b0 <__errno_location@plt>
   12a1c:	ldr	r3, [r0]
   12a20:	b	129e0 <__assert_fail@plt+0x13a4>
   12a24:	ldr	r0, [r4, #80]	; 0x50
   12a28:	and	r0, r0, #61440	; 0xf000
   12a2c:	cmp	r0, #16384	; 0x4000
   12a30:	bne	12a74 <__assert_fail@plt+0x1438>
   12a34:	ldrb	r3, [r4, #168]	; 0xa8
   12a38:	cmp	r3, #46	; 0x2e
   12a3c:	bne	12a8c <__assert_fail@plt+0x1450>
   12a40:	ldrb	r3, [r4, #169]	; 0xa9
   12a44:	cmp	r3, #0
   12a48:	beq	12a60 <__assert_fail@plt+0x1424>
   12a4c:	ldr	r3, [r4, #168]	; 0xa8
   12a50:	bic	r3, r3, #-16777216	; 0xff000000
   12a54:	bic	r3, r3, #255	; 0xff
   12a58:	cmp	r3, #11776	; 0x2e00
   12a5c:	bne	12a8c <__assert_fail@plt+0x1450>
   12a60:	ldr	r0, [r4, #48]	; 0x30
   12a64:	cmp	r0, #0
   12a68:	moveq	r0, #1
   12a6c:	movne	r0, #5
   12a70:	pop	{r4, r5, r6, pc}
   12a74:	cmp	r0, #40960	; 0xa000
   12a78:	beq	12a94 <__assert_fail@plt+0x1458>
   12a7c:	cmp	r0, #32768	; 0x8000
   12a80:	moveq	r0, #8
   12a84:	movne	r0, #3
   12a88:	pop	{r4, r5, r6, pc}
   12a8c:	mov	r0, #1
   12a90:	pop	{r4, r5, r6, pc}
   12a94:	mov	r0, #12
   12a98:	pop	{r4, r5, r6, pc}
   12a9c:	ldr	r3, [r0, #40]	; 0x28
   12aa0:	push	{r4, r5, r6, r7, r8, lr}
   12aa4:	cmp	r3, r2
   12aa8:	mov	r4, r0
   12aac:	mov	r6, r1
   12ab0:	mov	r5, r2
   12ab4:	ldr	r7, [r0, #44]	; 0x2c
   12ab8:	bcs	12b00 <__assert_fail@plt+0x14c4>
   12abc:	add	r1, r2, #40	; 0x28
   12ac0:	cmn	r1, #-1073741823	; 0xc0000001
   12ac4:	str	r1, [r0, #40]	; 0x28
   12ac8:	bls	12ae8 <__assert_fail@plt+0x14ac>
   12acc:	ldr	r0, [r4, #8]
   12ad0:	bl	182f0 <__assert_fail@plt+0x6cb4>
   12ad4:	mov	r3, #0
   12ad8:	str	r3, [r4, #8]
   12adc:	str	r3, [r4, #40]	; 0x28
   12ae0:	mov	r0, r6
   12ae4:	pop	{r4, r5, r6, r7, r8, pc}
   12ae8:	lsl	r1, r1, #2
   12aec:	ldr	r0, [r0, #8]
   12af0:	bl	17d64 <__assert_fail@plt+0x6728>
   12af4:	cmp	r0, #0
   12af8:	beq	12acc <__assert_fail@plt+0x1490>
   12afc:	str	r0, [r4, #8]
   12b00:	ldr	r0, [r4, #8]
   12b04:	mov	r2, r0
   12b08:	cmp	r6, #0
   12b0c:	bne	12b48 <__assert_fail@plt+0x150c>
   12b10:	mov	r3, r7
   12b14:	mov	r2, #4
   12b18:	mov	r1, r5
   12b1c:	bl	115a0 <qsort@plt>
   12b20:	ldr	r2, [r4, #8]
   12b24:	mov	r3, r5
   12b28:	mov	r1, r2
   12b2c:	ldr	r6, [r2]
   12b30:	subs	r3, r3, #1
   12b34:	bne	12b54 <__assert_fail@plt+0x1518>
   12b38:	sub	r5, r5, #-1073741823	; 0xc0000001
   12b3c:	ldr	r2, [r2, r5, lsl #2]
   12b40:	str	r3, [r2, #8]
   12b44:	b	12ae0 <__assert_fail@plt+0x14a4>
   12b48:	str	r6, [r2], #4
   12b4c:	ldr	r6, [r6, #8]
   12b50:	b	12b08 <__assert_fail@plt+0x14cc>
   12b54:	ldr	r0, [r1]
   12b58:	ldr	ip, [r1, #4]!
   12b5c:	str	ip, [r0, #8]
   12b60:	b	12b30 <__assert_fail@plt+0x14f4>
   12b64:	push	{r4, r5, r6, r7, r8, lr}
   12b68:	mov	r6, r0
   12b6c:	add	r0, r2, #176	; 0xb0
   12b70:	bic	r0, r0, #7
   12b74:	mov	r7, r1
   12b78:	mov	r5, r2
   12b7c:	bl	17d24 <__assert_fail@plt+0x66e8>
   12b80:	subs	r4, r0, #0
   12b84:	beq	12bd0 <__assert_fail@plt+0x1594>
   12b88:	mov	r2, r5
   12b8c:	mov	r1, r7
   12b90:	add	r0, r4, #168	; 0xa8
   12b94:	bl	112dc <memcpy@plt>
   12b98:	add	r2, r4, r5
   12b9c:	mov	r3, #0
   12ba0:	strb	r3, [r2, #168]	; 0xa8
   12ba4:	ldr	r2, [r6, #24]
   12ba8:	str	r5, [r4, #52]	; 0x34
   12bac:	str	r2, [r4, #28]
   12bb0:	mov	r2, #3
   12bb4:	str	r6, [r4, #44]	; 0x2c
   12bb8:	str	r3, [r4, #32]
   12bbc:	str	r3, [r4, #12]
   12bc0:	strh	r3, [r4, #58]	; 0x3a
   12bc4:	strh	r2, [r4, #60]	; 0x3c
   12bc8:	str	r3, [r4, #16]
   12bcc:	str	r3, [r4, #20]
   12bd0:	mov	r0, r4
   12bd4:	pop	{r4, r5, r6, r7, r8, pc}
   12bd8:	ldr	ip, [r0, #48]	; 0x30
   12bdc:	push	{lr}		; (str lr, [sp, #-4]!)
   12be0:	tst	ip, #16
   12be4:	ldr	lr, [pc, #40]	; 12c14 <__assert_fail@plt+0x15d8>
   12be8:	ldr	r2, [pc, #40]	; 12c18 <__assert_fail@plt+0x15dc>
   12bec:	moveq	r2, lr
   12bf0:	tst	ip, #512	; 0x200
   12bf4:	beq	12c04 <__assert_fail@plt+0x15c8>
   12bf8:	ldr	r0, [r0, #32]
   12bfc:	pop	{lr}		; (ldr lr, [sp], #4)
   12c00:	b	15444 <__assert_fail@plt+0x3e08>
   12c04:	mov	r0, r1
   12c08:	pop	{lr}		; (ldr lr, [sp], #4)
   12c0c:	mov	r1, r2
   12c10:	b	1826c <__assert_fail@plt+0x6c30>
   12c14:	andeq	r4, r8, r0, lsl #18
   12c18:	andeq	ip, r8, r0, lsl #18
   12c1c:	push	{r4, r5, r6, lr}
   12c20:	mov	r4, r0
   12c24:	cmp	r4, #0
   12c28:	bne	12c30 <__assert_fail@plt+0x15f4>
   12c2c:	pop	{r4, r5, r6, pc}
   12c30:	ldr	r0, [r4, #12]
   12c34:	ldr	r5, [r4, #8]
   12c38:	cmp	r0, #0
   12c3c:	beq	12c44 <__assert_fail@plt+0x1608>
   12c40:	bl	11624 <closedir@plt>
   12c44:	mov	r0, r4
   12c48:	bl	182f0 <__assert_fail@plt+0x6cb4>
   12c4c:	mov	r4, r5
   12c50:	b	12c24 <__assert_fail@plt+0x15e8>
   12c54:	ldr	r2, [r0, #48]	; 0x30
   12c58:	ldr	r3, [pc, #28]	; 12c7c <__assert_fail@plt+0x1640>
   12c5c:	ldr	r0, [r0, #56]	; 0x38
   12c60:	and	r3, r3, r2
   12c64:	cmp	r3, #0
   12c68:	beq	12c78 <__assert_fail@plt+0x163c>
   12c6c:	cmp	r0, #0
   12c70:	bxeq	lr
   12c74:	b	14ef0 <__assert_fail@plt+0x38b4>
   12c78:	b	182f0 <__assert_fail@plt+0x6cb4>
   12c7c:	andeq	r0, r0, r2, lsl #2
   12c80:	push	{r4, lr}
   12c84:	mov	r4, r0
   12c88:	mov	r0, r4
   12c8c:	bl	153b0 <__assert_fail@plt+0x3d74>
   12c90:	cmp	r0, #0
   12c94:	beq	12c9c <__assert_fail@plt+0x1660>
   12c98:	pop	{r4, pc}
   12c9c:	mov	r0, r4
   12ca0:	bl	153fc <__assert_fail@plt+0x3dc0>
   12ca4:	cmp	r0, #0
   12ca8:	blt	12c88 <__assert_fail@plt+0x164c>
   12cac:	bl	1160c <close@plt>
   12cb0:	b	12c88 <__assert_fail@plt+0x164c>
   12cb4:	push	{r4, r5, r6, r7, lr}
   12cb8:	sub	sp, sp, #100	; 0x64
   12cbc:	ldr	r5, [r0, #44]	; 0x2c
   12cc0:	ldr	r3, [r5, #48]	; 0x30
   12cc4:	tst	r3, #512	; 0x200
   12cc8:	bne	12cd8 <__assert_fail@plt+0x169c>
   12ccc:	mov	r0, #0
   12cd0:	add	sp, sp, #100	; 0x64
   12cd4:	pop	{r4, r5, r6, r7, pc}
   12cd8:	ldr	r4, [r5, #52]	; 0x34
   12cdc:	mov	r7, r1
   12ce0:	cmp	r4, #0
   12ce4:	mov	r6, r0
   12ce8:	bne	12d18 <__assert_fail@plt+0x16dc>
   12cec:	ldr	r3, [pc, #184]	; 12dac <__assert_fail@plt+0x1770>
   12cf0:	mov	r1, r4
   12cf4:	str	r3, [sp]
   12cf8:	ldr	r2, [pc, #176]	; 12db0 <__assert_fail@plt+0x1774>
   12cfc:	ldr	r3, [pc, #176]	; 12db4 <__assert_fail@plt+0x1778>
   12d00:	mov	r0, #13
   12d04:	bl	14d84 <__assert_fail@plt+0x3748>
   12d08:	cmp	r0, #0
   12d0c:	mov	r4, r0
   12d10:	str	r0, [r5, #52]	; 0x34
   12d14:	beq	12d38 <__assert_fail@plt+0x16fc>
   12d18:	ldrd	r2, [r6, #64]	; 0x40
   12d1c:	add	r1, sp, #96	; 0x60
   12d20:	mov	r0, r4
   12d24:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12d28:	bl	14b60 <__assert_fail@plt+0x3524>
   12d2c:	cmp	r0, #0
   12d30:	ldrne	r0, [r0, #8]
   12d34:	bne	12cd0 <__assert_fail@plt+0x1694>
   12d38:	cmp	r7, #0
   12d3c:	blt	12ccc <__assert_fail@plt+0x1690>
   12d40:	add	r1, sp, #8
   12d44:	mov	r0, r7
   12d48:	bl	11258 <fstatfs64@plt>
   12d4c:	cmp	r0, #0
   12d50:	bne	12ccc <__assert_fail@plt+0x1690>
   12d54:	cmp	r4, #0
   12d58:	beq	12da4 <__assert_fail@plt+0x1768>
   12d5c:	mov	r0, #16
   12d60:	bl	17d24 <__assert_fail@plt+0x66e8>
   12d64:	subs	r5, r0, #0
   12d68:	beq	12da4 <__assert_fail@plt+0x1768>
   12d6c:	ldrd	r2, [r6, #64]	; 0x40
   12d70:	mov	r1, r5
   12d74:	mov	r0, r4
   12d78:	strd	r2, [r5]
   12d7c:	ldr	r3, [sp, #8]
   12d80:	str	r3, [r5, #8]
   12d84:	bl	15258 <__assert_fail@plt+0x3c1c>
   12d88:	cmp	r0, #0
   12d8c:	beq	12d9c <__assert_fail@plt+0x1760>
   12d90:	cmp	r5, r0
   12d94:	beq	12da4 <__assert_fail@plt+0x1768>
   12d98:	bl	11600 <abort@plt>
   12d9c:	mov	r0, r5
   12da0:	bl	182f0 <__assert_fail@plt+0x6cb4>
   12da4:	ldr	r0, [sp, #8]
   12da8:	b	12cd0 <__assert_fail@plt+0x1694>
   12dac:	strdeq	r8, [r1], -r0
   12db0:	strdeq	r2, [r1], -r4
   12db4:	andeq	r2, r1, r0, lsl r9
   12db8:	push	{r4, r5, r6, lr}
   12dbc:	mov	r5, r1
   12dc0:	ldr	r1, [r0, #32]
   12dc4:	cmn	r1, #100	; 0x64
   12dc8:	sub	r3, r1, r5
   12dcc:	clz	r3, r3
   12dd0:	lsr	r3, r3, #5
   12dd4:	moveq	r3, #0
   12dd8:	cmp	r3, #0
   12ddc:	beq	12de4 <__assert_fail@plt+0x17a8>
   12de0:	bl	11600 <abort@plt>
   12de4:	cmp	r2, #0
   12de8:	mov	r4, r0
   12dec:	beq	12e0c <__assert_fail@plt+0x17d0>
   12df0:	add	r0, r0, #60	; 0x3c
   12df4:	bl	153b8 <__assert_fail@plt+0x3d7c>
   12df8:	cmp	r0, #0
   12dfc:	blt	12e04 <__assert_fail@plt+0x17c8>
   12e00:	bl	1160c <close@plt>
   12e04:	str	r5, [r4, #32]
   12e08:	pop	{r4, r5, r6, pc}
   12e0c:	ldr	r3, [r0, #48]	; 0x30
   12e10:	lsr	r3, r3, #2
   12e14:	eor	r3, r3, #1
   12e18:	cmp	r1, #0
   12e1c:	movlt	r3, #0
   12e20:	andge	r3, r3, #1
   12e24:	cmp	r3, #0
   12e28:	beq	12e04 <__assert_fail@plt+0x17c8>
   12e2c:	mov	r0, r1
   12e30:	b	12e00 <__assert_fail@plt+0x17c4>
   12e34:	ldr	r3, [r0, #48]	; 0x30
   12e38:	push	{r4, r5, r6, lr}
   12e3c:	ands	r4, r3, #4
   12e40:	mov	r5, r0
   12e44:	movne	r4, #0
   12e48:	bne	12e60 <__assert_fail@plt+0x1824>
   12e4c:	tst	r3, #512	; 0x200
   12e50:	beq	12e70 <__assert_fail@plt+0x1834>
   12e54:	mov	r2, #1
   12e58:	mvn	r1, #99	; 0x63
   12e5c:	bl	12db8 <__assert_fail@plt+0x177c>
   12e60:	add	r0, r5, #60	; 0x3c
   12e64:	bl	12c80 <__assert_fail@plt+0x1644>
   12e68:	mov	r0, r4
   12e6c:	pop	{r4, r5, r6, pc}
   12e70:	ldr	r0, [r0, #28]
   12e74:	bl	11594 <fchdir@plt>
   12e78:	adds	r4, r0, #0
   12e7c:	movne	r4, #1
   12e80:	b	12e60 <__assert_fail@plt+0x1824>
   12e84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e88:	subs	sl, r3, #0
   12e8c:	sub	sp, sp, #104	; 0x68
   12e90:	mov	r7, r0
   12e94:	mov	r8, r1
   12e98:	mov	r6, r2
   12e9c:	moveq	r9, sl
   12ea0:	beq	12eb8 <__assert_fail@plt+0x187c>
   12ea4:	ldr	r1, [pc, #368]	; 1301c <__assert_fail@plt+0x19e0>
   12ea8:	mov	r0, sl
   12eac:	bl	11294 <strcmp@plt>
   12eb0:	clz	r9, r0
   12eb4:	lsr	r9, r9, #5
   12eb8:	ldr	r3, [r7, #48]	; 0x30
   12ebc:	ands	r4, r3, #4
   12ec0:	beq	12eec <__assert_fail@plt+0x18b0>
   12ec4:	mvn	r4, r6
   12ec8:	lsr	r4, r4, #31
   12ecc:	ands	r4, r4, r3, lsr #9
   12ed0:	beq	12ee0 <__assert_fail@plt+0x18a4>
   12ed4:	mov	r0, r6
   12ed8:	bl	1160c <close@plt>
   12edc:	mov	r4, #0
   12ee0:	mov	r0, r4
   12ee4:	add	sp, sp, #104	; 0x68
   12ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12eec:	ands	r2, r9, r6, lsr #31
   12ef0:	beq	12fdc <__assert_fail@plt+0x19a0>
   12ef4:	tst	r3, #512	; 0x200
   12ef8:	bne	12f18 <__assert_fail@plt+0x18dc>
   12efc:	mov	r1, sl
   12f00:	mov	r0, r7
   12f04:	bl	12bd8 <__assert_fail@plt+0x159c>
   12f08:	subs	r5, r0, #0
   12f0c:	bge	12f44 <__assert_fail@plt+0x1908>
   12f10:	mvn	r4, #0
   12f14:	b	12ee0 <__assert_fail@plt+0x18a4>
   12f18:	add	r5, r7, #60	; 0x3c
   12f1c:	mov	r0, r5
   12f20:	bl	153b0 <__assert_fail@plt+0x3d74>
   12f24:	cmp	r0, #0
   12f28:	bne	12efc <__assert_fail@plt+0x18c0>
   12f2c:	mov	r0, r5
   12f30:	bl	153fc <__assert_fail@plt+0x3dc0>
   12f34:	subs	r5, r0, #0
   12f38:	movge	r6, r5
   12f3c:	movge	sl, r4
   12f40:	blt	12efc <__assert_fail@plt+0x18c0>
   12f44:	ldr	r3, [r7, #48]	; 0x30
   12f48:	tst	r3, #2
   12f4c:	bne	12f6c <__assert_fail@plt+0x1930>
   12f50:	cmp	sl, #0
   12f54:	beq	12fec <__assert_fail@plt+0x19b0>
   12f58:	ldr	r1, [pc, #188]	; 1301c <__assert_fail@plt+0x19e0>
   12f5c:	mov	r0, sl
   12f60:	bl	11294 <strcmp@plt>
   12f64:	cmp	r0, #0
   12f68:	bne	12fec <__assert_fail@plt+0x19b0>
   12f6c:	mov	r1, sp
   12f70:	mov	r0, r5
   12f74:	bl	18fa4 <__assert_fail@plt+0x7968>
   12f78:	cmp	r0, #0
   12f7c:	bne	12fb4 <__assert_fail@plt+0x1978>
   12f80:	ldrd	r0, [r8, #64]	; 0x40
   12f84:	ldrd	r2, [sp]
   12f88:	cmp	r1, r3
   12f8c:	cmpeq	r0, r2
   12f90:	bne	12fa8 <__assert_fail@plt+0x196c>
   12f94:	ldrd	r0, [r8, #160]	; 0xa0
   12f98:	ldrd	r2, [sp, #96]	; 0x60
   12f9c:	cmp	r1, r3
   12fa0:	cmpeq	r0, r2
   12fa4:	beq	12fec <__assert_fail@plt+0x19b0>
   12fa8:	bl	114b0 <__errno_location@plt>
   12fac:	mov	r3, #2
   12fb0:	str	r3, [r0]
   12fb4:	mvn	r4, #0
   12fb8:	cmp	r6, #0
   12fbc:	bge	12ee0 <__assert_fail@plt+0x18a4>
   12fc0:	bl	114b0 <__errno_location@plt>
   12fc4:	ldr	r7, [r0]
   12fc8:	mov	r6, r0
   12fcc:	mov	r0, r5
   12fd0:	bl	1160c <close@plt>
   12fd4:	str	r7, [r6]
   12fd8:	b	12ee0 <__assert_fail@plt+0x18a4>
   12fdc:	cmp	r6, #0
   12fe0:	movge	r5, r6
   12fe4:	bge	12f44 <__assert_fail@plt+0x1908>
   12fe8:	b	12efc <__assert_fail@plt+0x18c0>
   12fec:	ldr	r3, [r7, #48]	; 0x30
   12ff0:	tst	r3, #512	; 0x200
   12ff4:	beq	1300c <__assert_fail@plt+0x19d0>
   12ff8:	eor	r2, r9, #1
   12ffc:	mov	r1, r5
   13000:	mov	r0, r7
   13004:	bl	12db8 <__assert_fail@plt+0x177c>
   13008:	b	12ee0 <__assert_fail@plt+0x18a4>
   1300c:	mov	r0, r5
   13010:	bl	11594 <fchdir@plt>
   13014:	mov	r4, r0
   13018:	b	12fb8 <__assert_fail@plt+0x197c>
   1301c:	ldrdeq	r9, [r1], -r8
   13020:	ldr	r2, [r0, #48]	; 0x30
   13024:	ldr	r3, [pc, #164]	; 130d0 <__assert_fail@plt+0x1a94>
   13028:	push	{r4, r5, r6, r7, lr}
   1302c:	and	r3, r3, r2
   13030:	cmp	r3, #0
   13034:	sub	sp, sp, #28
   13038:	beq	13070 <__assert_fail@plt+0x1a34>
   1303c:	ldrd	r4, [r1, #64]	; 0x40
   13040:	ldrd	r2, [r1, #160]	; 0xa0
   13044:	ldr	r0, [r0, #56]	; 0x38
   13048:	mov	r1, sp
   1304c:	strd	r4, [sp]
   13050:	strd	r2, [sp, #8]
   13054:	bl	15288 <__assert_fail@plt+0x3c4c>
   13058:	cmp	r0, #0
   1305c:	bne	13064 <__assert_fail@plt+0x1a28>
   13060:	bl	11600 <abort@plt>
   13064:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13068:	add	sp, sp, #28
   1306c:	pop	{r4, r5, r6, r7, pc}
   13070:	ldr	ip, [r1, #4]
   13074:	cmp	ip, #0
   13078:	beq	13068 <__assert_fail@plt+0x1a2c>
   1307c:	ldr	r3, [ip, #48]	; 0x30
   13080:	cmp	r3, #0
   13084:	blt	13068 <__assert_fail@plt+0x1a2c>
   13088:	ldr	r3, [r0, #56]	; 0x38
   1308c:	ldrd	r4, [r3, #16]
   13090:	orrs	r2, r4, r5
   13094:	beq	13060 <__assert_fail@plt+0x1a24>
   13098:	ldrd	r4, [r3]
   1309c:	ldrd	r6, [r1, #160]	; 0xa0
   130a0:	cmp	r5, r7
   130a4:	cmpeq	r4, r6
   130a8:	bne	13068 <__assert_fail@plt+0x1a2c>
   130ac:	ldrd	r6, [r3, #8]
   130b0:	ldrd	r4, [r1, #64]	; 0x40
   130b4:	cmp	r7, r5
   130b8:	cmpeq	r6, r4
   130bc:	ldrdeq	r0, [ip, #64]	; 0x40
   130c0:	strdeq	r0, [r3, #8]
   130c4:	ldrdeq	r0, [ip, #160]	; 0xa0
   130c8:	strdeq	r0, [r3]
   130cc:	b	13068 <__assert_fail@plt+0x1a2c>
   130d0:	andeq	r0, r0, r2, lsl #2
   130d4:	ldr	r3, [r0, #36]	; 0x24
   130d8:	add	r1, r1, #256	; 0x100
   130dc:	adds	r1, r1, r3
   130e0:	push	{r4, r5, r6, lr}
   130e4:	mov	r5, r0
   130e8:	bcc	13110 <__assert_fail@plt+0x1ad4>
   130ec:	ldr	r0, [r0, #24]
   130f0:	mov	r4, #0
   130f4:	bl	182f0 <__assert_fail@plt+0x6cb4>
   130f8:	str	r4, [r5, #24]
   130fc:	bl	114b0 <__errno_location@plt>
   13100:	mov	r3, #36	; 0x24
   13104:	str	r3, [r0]
   13108:	mov	r0, r4
   1310c:	pop	{r4, r5, r6, pc}
   13110:	str	r1, [r0, #36]	; 0x24
   13114:	ldr	r0, [r0, #24]
   13118:	bl	17d64 <__assert_fail@plt+0x6728>
   1311c:	subs	r4, r0, #0
   13120:	bne	13134 <__assert_fail@plt+0x1af8>
   13124:	ldr	r0, [r5, #24]
   13128:	bl	182f0 <__assert_fail@plt+0x6cb4>
   1312c:	str	r4, [r5, #24]
   13130:	b	13108 <__assert_fail@plt+0x1acc>
   13134:	str	r4, [r5, #24]
   13138:	mov	r0, #1
   1313c:	pop	{r4, r5, r6, pc}
   13140:	ldr	r2, [r0, #48]	; 0x30
   13144:	ldr	r3, [pc, #96]	; 131ac <__assert_fail@plt+0x1b70>
   13148:	push	{r0, r1, r4, lr}
   1314c:	and	r3, r3, r2
   13150:	cmp	r3, #0
   13154:	mov	r4, r0
   13158:	beq	1318c <__assert_fail@plt+0x1b50>
   1315c:	ldr	r3, [pc, #76]	; 131b0 <__assert_fail@plt+0x1b74>
   13160:	ldr	r2, [pc, #76]	; 131b4 <__assert_fail@plt+0x1b78>
   13164:	str	r3, [sp]
   13168:	mov	r1, #0
   1316c:	ldr	r3, [pc, #68]	; 131b8 <__assert_fail@plt+0x1b7c>
   13170:	mov	r0, #31
   13174:	bl	14d84 <__assert_fail@plt+0x3748>
   13178:	str	r0, [r4, #56]	; 0x38
   1317c:	adds	r0, r0, #0
   13180:	movne	r0, #1
   13184:	add	sp, sp, #8
   13188:	pop	{r4, pc}
   1318c:	mov	r0, #32
   13190:	bl	17d24 <__assert_fail@plt+0x66e8>
   13194:	cmp	r0, #0
   13198:	str	r0, [r4, #56]	; 0x38
   1319c:	beq	13184 <__assert_fail@plt+0x1b48>
   131a0:	bl	17f34 <__assert_fail@plt+0x68f8>
   131a4:	mov	r0, #1
   131a8:	b	13184 <__assert_fail@plt+0x1b48>
   131ac:	andeq	r0, r0, r2, lsl #2
   131b0:	strdeq	r8, [r1], -r0
   131b4:	ldrdeq	r2, [r1], -r8
   131b8:	muleq	r1, ip, r8
   131bc:	ldr	r2, [r0, #48]	; 0x30
   131c0:	ldr	r3, [pc, #168]	; 13270 <__assert_fail@plt+0x1c34>
   131c4:	push	{r4, r5, r6, lr}
   131c8:	and	r3, r3, r2
   131cc:	cmp	r3, #0
   131d0:	mov	r6, r0
   131d4:	mov	r4, r1
   131d8:	beq	1324c <__assert_fail@plt+0x1c10>
   131dc:	mov	r0, #24
   131e0:	bl	17d24 <__assert_fail@plt+0x66e8>
   131e4:	subs	r5, r0, #0
   131e8:	bne	131f4 <__assert_fail@plt+0x1bb8>
   131ec:	mov	r0, #0
   131f0:	pop	{r4, r5, r6, pc}
   131f4:	ldrd	r2, [r4, #64]	; 0x40
   131f8:	ldr	r0, [r6, #56]	; 0x38
   131fc:	str	r4, [r5, #16]
   13200:	strd	r2, [r5]
   13204:	ldrd	r2, [r4, #160]	; 0xa0
   13208:	mov	r1, r5
   1320c:	strd	r2, [r5, #8]
   13210:	bl	15258 <__assert_fail@plt+0x3c1c>
   13214:	cmp	r5, r0
   13218:	mov	r6, r0
   1321c:	bne	13228 <__assert_fail@plt+0x1bec>
   13220:	mov	r0, #1
   13224:	pop	{r4, r5, r6, pc}
   13228:	mov	r0, r5
   1322c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13230:	cmp	r6, #0
   13234:	beq	131ec <__assert_fail@plt+0x1bb0>
   13238:	ldr	r3, [r6, #16]
   1323c:	str	r3, [r4]
   13240:	mov	r3, #2
   13244:	strh	r3, [r4, #56]	; 0x38
   13248:	b	13220 <__assert_fail@plt+0x1be4>
   1324c:	add	r1, r1, #64	; 0x40
   13250:	ldr	r0, [r0, #56]	; 0x38
   13254:	bl	17f50 <__assert_fail@plt+0x6914>
   13258:	cmp	r0, #0
   1325c:	beq	13220 <__assert_fail@plt+0x1be4>
   13260:	mov	r3, #2
   13264:	str	r4, [r4]
   13268:	strh	r3, [r4, #56]	; 0x38
   1326c:	pop	{r4, r5, r6, pc}
   13270:	andeq	r0, r0, r2, lsl #2
   13274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13278:	sub	sp, sp, #60	; 0x3c
   1327c:	ldr	r5, [r0]
   13280:	mov	r4, r0
   13284:	str	r1, [sp, #8]
   13288:	ldr	r3, [r5, #12]
   1328c:	cmp	r3, #0
   13290:	str	r3, [sp, #4]
   13294:	beq	132e8 <__assert_fail@plt+0x1cac>
   13298:	mov	r0, r3
   1329c:	bl	11588 <dirfd@plt>
   132a0:	cmp	r0, #0
   132a4:	str	r0, [sp, #52]	; 0x34
   132a8:	bge	1335c <__assert_fail@plt+0x1d20>
   132ac:	ldr	r0, [r5, #12]
   132b0:	mov	r6, #0
   132b4:	bl	11624 <closedir@plt>
   132b8:	str	r6, [r5, #12]
   132bc:	ldr	r3, [sp, #8]
   132c0:	cmp	r3, #3
   132c4:	bne	13488 <__assert_fail@plt+0x1e4c>
   132c8:	mov	r3, #4
   132cc:	strh	r3, [r5, #56]	; 0x38
   132d0:	bl	114b0 <__errno_location@plt>
   132d4:	ldr	r3, [r0]
   132d8:	str	r3, [r5, #32]
   132dc:	mov	r0, r6
   132e0:	add	sp, sp, #60	; 0x3c
   132e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132e8:	ldr	r3, [r0, #48]	; 0x30
   132ec:	ldr	r1, [r5, #24]
   132f0:	and	r2, r3, #516	; 0x204
   132f4:	cmp	r2, #512	; 0x200
   132f8:	mvnne	r0, #99	; 0x63
   132fc:	ldreq	r0, [r0, #32]
   13300:	ands	r2, r3, #16
   13304:	beq	13324 <__assert_fail@plt+0x1ce8>
   13308:	tst	r3, #1
   1330c:	moveq	r2, #32768	; 0x8000
   13310:	beq	13324 <__assert_fail@plt+0x1ce8>
   13314:	ldr	r2, [r5, #48]	; 0x30
   13318:	cmp	r2, #0
   1331c:	movne	r2, #32768	; 0x8000
   13320:	moveq	r2, #0
   13324:	add	r3, sp, #52	; 0x34
   13328:	bl	15478 <__assert_fail@plt+0x3e3c>
   1332c:	cmp	r0, #0
   13330:	mov	r6, r0
   13334:	str	r0, [r5, #12]
   13338:	beq	132bc <__assert_fail@plt+0x1c80>
   1333c:	ldrh	r3, [r5, #56]	; 0x38
   13340:	cmp	r3, #11
   13344:	bne	13490 <__assert_fail@plt+0x1e54>
   13348:	mov	r2, #0
   1334c:	mov	r1, r5
   13350:	mov	r0, r4
   13354:	bl	12964 <__assert_fail@plt+0x1328>
   13358:	strh	r0, [r5, #56]	; 0x38
   1335c:	ldr	r3, [r4, #44]	; 0x2c
   13360:	cmp	r3, #0
   13364:	ldr	r3, [pc, #1824]	; 13a8c <__assert_fail@plt+0x2450>
   13368:	mvnne	r3, #0
   1336c:	str	r3, [sp, #36]	; 0x24
   13370:	ldr	r3, [sp, #4]
   13374:	cmp	r3, #0
   13378:	beq	134dc <__assert_fail@plt+0x1ea0>
   1337c:	mov	r3, #1
   13380:	str	r3, [sp, #20]
   13384:	ldr	fp, [r5, #40]	; 0x28
   13388:	ldr	r2, [r5, #28]
   1338c:	sub	r3, fp, #1
   13390:	mov	r9, #0
   13394:	ldrb	r2, [r2, r3]
   13398:	mov	r8, r9
   1339c:	mov	r6, r9
   133a0:	cmp	r2, #47	; 0x2f
   133a4:	moveq	fp, r3
   133a8:	ldr	r3, [r4, #48]	; 0x30
   133ac:	str	r9, [sp, #24]
   133b0:	ands	r3, r3, #4
   133b4:	streq	r3, [sp]
   133b8:	ldrne	r3, [r4, #24]
   133bc:	str	r9, [sp, #32]
   133c0:	addne	r2, r3, fp
   133c4:	addne	r2, r2, #1
   133c8:	strne	r2, [sp]
   133cc:	movne	r2, #47	; 0x2f
   133d0:	strbne	r2, [r3, fp]
   133d4:	add	r3, fp, #1
   133d8:	str	r3, [sp, #16]
   133dc:	ldr	r3, [r4, #36]	; 0x24
   133e0:	add	r2, fp, #1
   133e4:	sub	r3, r3, r2
   133e8:	str	r3, [sp, #28]
   133ec:	ldr	r3, [r5, #48]	; 0x30
   133f0:	add	r3, r3, #1
   133f4:	str	r3, [sp, #40]	; 0x28
   133f8:	ldr	r7, [r5, #12]
   133fc:	cmp	r7, #0
   13400:	bne	13620 <__assert_fail@plt+0x1fe4>
   13404:	ldr	r3, [sp, #24]
   13408:	cmp	r3, #0
   1340c:	bne	1394c <__assert_fail@plt+0x2310>
   13410:	ldr	r3, [r4, #48]	; 0x30
   13414:	tst	r3, #4
   13418:	bne	139c8 <__assert_fail@plt+0x238c>
   1341c:	ldr	r3, [sp, #20]
   13420:	ldr	r2, [sp, #4]
   13424:	cmp	r2, #0
   13428:	movne	r3, #0
   1342c:	andeq	r3, r3, #1
   13430:	cmp	r3, #0
   13434:	beq	13a0c <__assert_fail@plt+0x23d0>
   13438:	ldr	r3, [sp, #8]
   1343c:	cmp	r8, #0
   13440:	cmpne	r3, #1
   13444:	bne	13a38 <__assert_fail@plt+0x23fc>
   13448:	ldr	r3, [r5, #48]	; 0x30
   1344c:	cmp	r3, #0
   13450:	bne	139f4 <__assert_fail@plt+0x23b8>
   13454:	mov	r0, r4
   13458:	bl	12e34 <__assert_fail@plt+0x17f8>
   1345c:	adds	r0, r0, #0
   13460:	movne	r0, #1
   13464:	cmp	r0, #0
   13468:	beq	13a0c <__assert_fail@plt+0x23d0>
   1346c:	mov	r3, #7
   13470:	strh	r3, [r5, #56]	; 0x38
   13474:	ldr	r3, [r4, #48]	; 0x30
   13478:	orr	r3, r3, #8192	; 0x2000
   1347c:	str	r3, [r4, #48]	; 0x30
   13480:	mov	r0, r6
   13484:	bl	12c1c <__assert_fail@plt+0x15e0>
   13488:	mov	r6, #0
   1348c:	b	132dc <__assert_fail@plt+0x1ca0>
   13490:	ldr	r3, [r4, #48]	; 0x30
   13494:	tst	r3, #256	; 0x100
   13498:	beq	1335c <__assert_fail@plt+0x1d20>
   1349c:	mov	r1, r5
   134a0:	mov	r0, r4
   134a4:	bl	13020 <__assert_fail@plt+0x19e4>
   134a8:	mov	r2, #0
   134ac:	mov	r1, r5
   134b0:	mov	r0, r4
   134b4:	bl	12964 <__assert_fail@plt+0x1328>
   134b8:	mov	r1, r5
   134bc:	mov	r0, r4
   134c0:	bl	131bc <__assert_fail@plt+0x1b80>
   134c4:	subs	r6, r0, #0
   134c8:	bne	1335c <__assert_fail@plt+0x1d20>
   134cc:	bl	114b0 <__errno_location@plt>
   134d0:	mov	r3, #12
   134d4:	str	r3, [r0]
   134d8:	b	132dc <__assert_fail@plt+0x1ca0>
   134dc:	ldr	r3, [sp, #8]
   134e0:	cmp	r3, #2
   134e4:	beq	13534 <__assert_fail@plt+0x1ef8>
   134e8:	ldr	r3, [r4, #48]	; 0x30
   134ec:	and	r3, r3, #56	; 0x38
   134f0:	cmp	r3, #24
   134f4:	bne	135ec <__assert_fail@plt+0x1fb0>
   134f8:	ldr	r3, [r5, #84]	; 0x54
   134fc:	cmp	r3, #2
   13500:	bne	135ec <__assert_fail@plt+0x1fb0>
   13504:	ldr	r1, [sp, #52]	; 0x34
   13508:	mov	r0, r5
   1350c:	bl	12cb4 <__assert_fail@plt+0x1678>
   13510:	ldr	r3, [pc, #1400]	; 13a90 <__assert_fail@plt+0x2454>
   13514:	cmp	r0, r3
   13518:	beq	135ec <__assert_fail@plt+0x1fb0>
   1351c:	bgt	135d4 <__assert_fail@plt+0x1f98>
   13520:	ldr	r3, [pc, #1388]	; 13a94 <__assert_fail@plt+0x2458>
   13524:	cmp	r0, r3
   13528:	beq	135ec <__assert_fail@plt+0x1fb0>
   1352c:	cmp	r0, #0
   13530:	beq	135ec <__assert_fail@plt+0x1fb0>
   13534:	mov	r3, #0
   13538:	mov	r6, r3
   1353c:	ldr	r3, [sp, #8]
   13540:	sub	r7, r3, #3
   13544:	clz	r7, r7
   13548:	lsr	r7, r7, #5
   1354c:	orrs	r3, r6, r7
   13550:	str	r3, [sp, #20]
   13554:	beq	13384 <__assert_fail@plt+0x1d48>
   13558:	ldr	r3, [r4, #48]	; 0x30
   1355c:	tst	r3, #512	; 0x200
   13560:	beq	13578 <__assert_fail@plt+0x1f3c>
   13564:	mov	r2, #3
   13568:	ldr	r1, [pc, #1320]	; 13a98 <__assert_fail@plt+0x245c>
   1356c:	ldr	r0, [sp, #52]	; 0x34
   13570:	bl	180a8 <__assert_fail@plt+0x6a6c>
   13574:	str	r0, [sp, #52]	; 0x34
   13578:	ldr	r2, [sp, #52]	; 0x34
   1357c:	cmp	r2, #0
   13580:	bge	135f4 <__assert_fail@plt+0x1fb8>
   13584:	tst	r6, r7
   13588:	bne	13610 <__assert_fail@plt+0x1fd4>
   1358c:	ldrh	r3, [r5, #58]	; 0x3a
   13590:	ldr	r0, [r5, #12]
   13594:	orr	r3, r3, #1
   13598:	strh	r3, [r5, #58]	; 0x3a
   1359c:	bl	11624 <closedir@plt>
   135a0:	ldr	r2, [r4, #48]	; 0x30
   135a4:	mov	r3, #0
   135a8:	tst	r2, #512	; 0x200
   135ac:	str	r3, [r5, #12]
   135b0:	mov	r6, r3
   135b4:	beq	135c8 <__assert_fail@plt+0x1f8c>
   135b8:	ldr	r0, [sp, #52]	; 0x34
   135bc:	cmp	r0, r3
   135c0:	blt	135c8 <__assert_fail@plt+0x1f8c>
   135c4:	bl	1160c <close@plt>
   135c8:	str	r6, [r5, #12]
   135cc:	mov	r3, #0
   135d0:	b	13380 <__assert_fail@plt+0x1d44>
   135d4:	ldr	r3, [pc, #1216]	; 13a9c <__assert_fail@plt+0x2460>
   135d8:	cmp	r0, r3
   135dc:	beq	135ec <__assert_fail@plt+0x1fb0>
   135e0:	ldr	r3, [pc, #1208]	; 13aa0 <__assert_fail@plt+0x2464>
   135e4:	cmp	r0, r3
   135e8:	b	13530 <__assert_fail@plt+0x1ef4>
   135ec:	mov	r3, #1
   135f0:	b	13538 <__assert_fail@plt+0x1efc>
   135f4:	mov	r3, #0
   135f8:	mov	r1, r5
   135fc:	mov	r0, r4
   13600:	bl	12e84 <__assert_fail@plt+0x1848>
   13604:	cmp	r0, #0
   13608:	bne	13584 <__assert_fail@plt+0x1f48>
   1360c:	b	1337c <__assert_fail@plt+0x1d40>
   13610:	bl	114b0 <__errno_location@plt>
   13614:	ldr	r3, [r0]
   13618:	str	r3, [r5, #32]
   1361c:	b	1358c <__assert_fail@plt+0x1f50>
   13620:	bl	114b0 <__errno_location@plt>
   13624:	mov	r3, #0
   13628:	str	r0, [sp, #12]
   1362c:	str	r3, [r0]
   13630:	mov	r0, r7
   13634:	bl	11570 <readdir64@plt>
   13638:	subs	sl, r0, #0
   1363c:	bne	13688 <__assert_fail@plt+0x204c>
   13640:	ldr	r3, [sp, #12]
   13644:	ldr	r3, [r3]
   13648:	cmp	r3, #0
   1364c:	beq	1366c <__assert_fail@plt+0x2030>
   13650:	str	r3, [r5, #32]
   13654:	ldr	r3, [sp, #4]
   13658:	cmp	r8, #0
   1365c:	cmpeq	r3, #0
   13660:	moveq	r3, #4
   13664:	movne	r3, #7
   13668:	strh	r3, [r5, #56]	; 0x38
   1366c:	ldr	r0, [r5, #12]
   13670:	cmp	r0, #0
   13674:	beq	13404 <__assert_fail@plt+0x1dc8>
   13678:	bl	11624 <closedir@plt>
   1367c:	mov	r3, #0
   13680:	str	r3, [r5, #12]
   13684:	b	13404 <__assert_fail@plt+0x1dc8>
   13688:	ldr	r3, [r4, #48]	; 0x30
   1368c:	tst	r3, #32
   13690:	bne	136b8 <__assert_fail@plt+0x207c>
   13694:	ldrb	r3, [sl, #19]
   13698:	cmp	r3, #46	; 0x2e
   1369c:	bne	136b8 <__assert_fail@plt+0x207c>
   136a0:	ldrb	r3, [sl, #20]
   136a4:	cmp	r3, #0
   136a8:	beq	133f8 <__assert_fail@plt+0x1dbc>
   136ac:	ldrh	r3, [sl, #20]
   136b0:	cmp	r3, #46	; 0x2e
   136b4:	beq	133f8 <__assert_fail@plt+0x1dbc>
   136b8:	add	r7, sl, #19
   136bc:	mov	r0, r7
   136c0:	bl	1148c <strlen@plt>
   136c4:	mov	r1, r7
   136c8:	mov	r2, r0
   136cc:	str	r0, [sp, #44]	; 0x2c
   136d0:	mov	r0, r4
   136d4:	bl	12b64 <__assert_fail@plt+0x1528>
   136d8:	subs	r7, r0, #0
   136dc:	beq	1371c <__assert_fail@plt+0x20e0>
   136e0:	ldr	r2, [sp, #28]
   136e4:	ldr	r3, [sp, #44]	; 0x2c
   136e8:	cmp	r2, r3
   136ec:	bhi	1379c <__assert_fail@plt+0x2160>
   136f0:	ldr	r2, [r4, #24]
   136f4:	add	r1, fp, #2
   136f8:	add	r1, r1, r3
   136fc:	mov	r0, r4
   13700:	str	r2, [sp, #44]	; 0x2c
   13704:	str	r3, [sp, #28]
   13708:	bl	130d4 <__assert_fail@plt+0x1a98>
   1370c:	ldr	r3, [sp, #28]
   13710:	ldr	r2, [sp, #44]	; 0x2c
   13714:	cmp	r0, #0
   13718:	bne	13764 <__assert_fail@plt+0x2128>
   1371c:	ldr	r3, [sp, #12]
   13720:	mov	r0, r7
   13724:	ldr	r8, [r3]
   13728:	bl	182f0 <__assert_fail@plt+0x6cb4>
   1372c:	mov	r0, r6
   13730:	bl	12c1c <__assert_fail@plt+0x15e0>
   13734:	ldr	r0, [r5, #12]
   13738:	bl	11624 <closedir@plt>
   1373c:	mov	r3, #7
   13740:	strh	r3, [r5, #56]	; 0x38
   13744:	ldr	r3, [r4, #48]	; 0x30
   13748:	mov	r6, #0
   1374c:	orr	r3, r3, #8192	; 0x2000
   13750:	str	r6, [r5, #12]
   13754:	str	r3, [r4, #48]	; 0x30
   13758:	ldr	r3, [sp, #12]
   1375c:	str	r8, [r3]
   13760:	b	132dc <__assert_fail@plt+0x1ca0>
   13764:	ldr	r1, [r4, #24]
   13768:	cmp	r2, r1
   1376c:	ldreq	r0, [sp, #24]
   13770:	beq	13788 <__assert_fail@plt+0x214c>
   13774:	ldr	r2, [r4, #48]	; 0x30
   13778:	tst	r2, #4
   1377c:	ldrne	r2, [sp, #16]
   13780:	addne	r2, r1, r2
   13784:	strne	r2, [sp]
   13788:	ldr	r2, [r4, #36]	; 0x24
   1378c:	ldr	r1, [sp, #16]
   13790:	str	r0, [sp, #24]
   13794:	sub	r2, r2, r1
   13798:	str	r2, [sp, #28]
   1379c:	ldr	r2, [sp, #16]
   137a0:	adds	r3, r2, r3
   137a4:	bcc	137ec <__assert_fail@plt+0x21b0>
   137a8:	mov	r0, r7
   137ac:	bl	182f0 <__assert_fail@plt+0x6cb4>
   137b0:	mov	r0, r6
   137b4:	bl	12c1c <__assert_fail@plt+0x15e0>
   137b8:	ldr	r0, [r5, #12]
   137bc:	bl	11624 <closedir@plt>
   137c0:	mov	r3, #7
   137c4:	strh	r3, [r5, #56]	; 0x38
   137c8:	ldr	r3, [r4, #48]	; 0x30
   137cc:	ldr	r2, [sp, #12]
   137d0:	orr	r3, r3, #8192	; 0x2000
   137d4:	mov	r6, #0
   137d8:	str	r6, [r5, #12]
   137dc:	str	r3, [r4, #48]	; 0x30
   137e0:	mov	r3, #36	; 0x24
   137e4:	str	r3, [r2]
   137e8:	b	132dc <__assert_fail@plt+0x1ca0>
   137ec:	ldr	r2, [sp, #40]	; 0x28
   137f0:	str	r2, [r7, #48]	; 0x30
   137f4:	ldr	r2, [r4]
   137f8:	str	r3, [r7, #40]	; 0x28
   137fc:	str	r2, [r7, #4]
   13800:	ldrd	r2, [sl]
   13804:	strd	r2, [r7, #160]	; 0xa0
   13808:	ldr	r3, [r4, #48]	; 0x30
   1380c:	tst	r3, #4
   13810:	addeq	r3, r7, #168	; 0xa8
   13814:	streq	r3, [r7, #24]
   13818:	beq	13838 <__assert_fail@plt+0x21fc>
   1381c:	ldr	r3, [r7, #28]
   13820:	ldr	r2, [r7, #52]	; 0x34
   13824:	str	r3, [r7, #24]
   13828:	add	r2, r2, #1
   1382c:	add	r1, r7, #168	; 0xa8
   13830:	ldr	r0, [sp]
   13834:	bl	112b8 <memmove@plt>
   13838:	ldr	r3, [r4, #44]	; 0x2c
   1383c:	cmp	r3, #0
   13840:	beq	13850 <__assert_fail@plt+0x2214>
   13844:	ldr	r2, [r4, #48]	; 0x30
   13848:	ands	r2, r2, #1024	; 0x400
   1384c:	beq	13938 <__assert_fail@plt+0x22fc>
   13850:	ldr	r3, [r4, #48]	; 0x30
   13854:	ands	r1, r3, #8
   13858:	beq	1387c <__assert_fail@plt+0x2240>
   1385c:	ldrb	r2, [sl, #18]
   13860:	ands	r1, r2, #251	; 0xfb
   13864:	beq	1387c <__assert_fail@plt+0x2240>
   13868:	lsr	r3, r3, #4
   1386c:	and	r3, r3, #1
   13870:	cmp	r2, #10
   13874:	moveq	r1, r3
   13878:	orrne	r1, r3, #1
   1387c:	mov	r3, #11
   13880:	strh	r3, [r7, #56]	; 0x38
   13884:	ldrb	r2, [sl, #18]
   13888:	sub	r2, r2, #1
   1388c:	cmp	r2, r3
   13890:	lslls	r2, r2, #1
   13894:	ldrls	r3, [pc, #520]	; 13aa4 <__assert_fail@plt+0x2468>
   13898:	movhi	r3, #0
   1389c:	ldrhls	r3, [r3, r2]
   138a0:	cmp	r1, #0
   138a4:	movne	r2, #1
   138a8:	str	r3, [r7, #80]	; 0x50
   138ac:	moveq	r2, #2
   138b0:	mov	r3, #0
   138b4:	strd	r2, [r7, #112]	; 0x70
   138b8:	mov	r3, #0
   138bc:	cmp	r6, r3
   138c0:	str	r3, [r7, #8]
   138c4:	ldrne	r3, [sp, #32]
   138c8:	moveq	r6, r7
   138cc:	strne	r7, [r3, #8]
   138d0:	ldr	r3, [pc, #464]	; 13aa8 <__assert_fail@plt+0x246c>
   138d4:	cmp	r8, r3
   138d8:	bne	13920 <__assert_fail@plt+0x22e4>
   138dc:	ldr	r3, [r4, #44]	; 0x2c
   138e0:	cmp	r3, #0
   138e4:	bne	13920 <__assert_fail@plt+0x22e4>
   138e8:	ldr	r1, [sp, #52]	; 0x34
   138ec:	mov	r0, r5
   138f0:	bl	12cb4 <__assert_fail@plt+0x1678>
   138f4:	ldr	r3, [pc, #404]	; 13a90 <__assert_fail@plt+0x2454>
   138f8:	cmp	r0, r3
   138fc:	beq	1391c <__assert_fail@plt+0x22e0>
   13900:	ldr	r3, [pc, #420]	; 13aac <__assert_fail@plt+0x2470>
   13904:	cmp	r0, r3
   13908:	beq	1391c <__assert_fail@plt+0x22e0>
   1390c:	ldr	r3, [pc, #384]	; 13a94 <__assert_fail@plt+0x2458>
   13910:	cmp	r0, r3
   13914:	movne	r9, #1
   13918:	bne	13920 <__assert_fail@plt+0x22e4>
   1391c:	mov	r9, #0
   13920:	ldr	r3, [sp, #36]	; 0x24
   13924:	add	r8, r8, #1
   13928:	cmp	r3, r8
   1392c:	bls	13404 <__assert_fail@plt+0x1dc8>
   13930:	str	r7, [sp, #32]
   13934:	b	133f8 <__assert_fail@plt+0x1dbc>
   13938:	mov	r1, r7
   1393c:	mov	r0, r4
   13940:	bl	12964 <__assert_fail@plt+0x1328>
   13944:	strh	r0, [r7, #56]	; 0x38
   13948:	b	138b8 <__assert_fail@plt+0x227c>
   1394c:	ldr	r1, [r4, #24]
   13950:	ldr	r3, [r4, #4]
   13954:	cmp	r3, #0
   13958:	bne	139a0 <__assert_fail@plt+0x2364>
   1395c:	mov	r3, r6
   13960:	ldr	r2, [r3, #48]	; 0x30
   13964:	cmp	r2, #0
   13968:	blt	13410 <__assert_fail@plt+0x1dd4>
   1396c:	ldr	r2, [r3, #24]
   13970:	add	r0, r3, #168	; 0xa8
   13974:	cmp	r2, r0
   13978:	ldrne	r0, [r3, #28]
   1397c:	str	r1, [r3, #28]
   13980:	subne	r2, r2, r0
   13984:	addne	r2, r1, r2
   13988:	strne	r2, [r3, #24]
   1398c:	ldr	r2, [r3, #8]
   13990:	cmp	r2, #0
   13994:	ldreq	r2, [r3, #4]
   13998:	mov	r3, r2
   1399c:	b	13960 <__assert_fail@plt+0x2324>
   139a0:	ldr	r2, [r3, #24]
   139a4:	add	r0, r3, #168	; 0xa8
   139a8:	cmp	r2, r0
   139ac:	ldrne	r0, [r3, #28]
   139b0:	str	r1, [r3, #28]
   139b4:	subne	r2, r2, r0
   139b8:	addne	r2, r1, r2
   139bc:	strne	r2, [r3, #24]
   139c0:	ldr	r3, [r3, #8]
   139c4:	b	13954 <__assert_fail@plt+0x2318>
   139c8:	ldr	r3, [r4, #36]	; 0x24
   139cc:	ldr	r2, [sp, #16]
   139d0:	cmp	r8, #0
   139d4:	cmpne	r3, r2
   139d8:	ldreq	r3, [sp]
   139dc:	subeq	r3, r3, #1
   139e0:	streq	r3, [sp]
   139e4:	ldr	r2, [sp]
   139e8:	mov	r3, #0
   139ec:	strb	r3, [r2]
   139f0:	b	1341c <__assert_fail@plt+0x1de0>
   139f4:	ldr	r3, [pc, #180]	; 13ab0 <__assert_fail@plt+0x2474>
   139f8:	mvn	r2, #0
   139fc:	ldr	r1, [r5, #4]
   13a00:	mov	r0, r4
   13a04:	bl	12e84 <__assert_fail@plt+0x1848>
   13a08:	b	1345c <__assert_fail@plt+0x1e20>
   13a0c:	cmp	r8, #0
   13a10:	bne	13a38 <__assert_fail@plt+0x23fc>
   13a14:	ldr	r3, [sp, #8]
   13a18:	cmp	r3, #3
   13a1c:	bne	13480 <__assert_fail@plt+0x1e44>
   13a20:	ldrh	r3, [r5, #56]	; 0x38
   13a24:	cmp	r3, #4
   13a28:	cmpne	r3, #7
   13a2c:	movne	r3, #6
   13a30:	strhne	r3, [r5, #56]	; 0x38
   13a34:	b	13480 <__assert_fail@plt+0x1e44>
   13a38:	cmp	r9, #0
   13a3c:	beq	13a64 <__assert_fail@plt+0x2428>
   13a40:	ldr	r3, [pc, #108]	; 13ab4 <__assert_fail@plt+0x2478>
   13a44:	mov	r1, r6
   13a48:	str	r3, [r4, #44]	; 0x2c
   13a4c:	mov	r2, r8
   13a50:	mov	r0, r4
   13a54:	bl	12a9c <__assert_fail@plt+0x1460>
   13a58:	mov	r3, #0
   13a5c:	str	r3, [r4, #44]	; 0x2c
   13a60:	mov	r6, r0
   13a64:	ldr	r3, [r4, #44]	; 0x2c
   13a68:	cmp	r3, #0
   13a6c:	cmpne	r8, #1
   13a70:	bls	132dc <__assert_fail@plt+0x1ca0>
   13a74:	mov	r1, r6
   13a78:	mov	r2, r8
   13a7c:	mov	r0, r4
   13a80:	bl	12a9c <__assert_fail@plt+0x1460>
   13a84:	mov	r6, r0
   13a88:	b	132dc <__assert_fail@plt+0x1ca0>
   13a8c:	andeq	r8, r1, r0, lsr #13
   13a90:	andeq	r6, r0, r9, ror #18
   13a94:			; <UNDEFINED> instruction: 0xff534d42
   13a98:	andeq	r0, r0, r6, lsl #8
   13a9c:	andeq	r9, r0, r0, lsr #31
   13aa0:	movtpl	r4, #24911	; 0x614f
   13aa4:	andeq	r9, r1, r0, asr #27
   13aa8:	andeq	r2, r0, r0, lsl r7
   13aac:			; <UNDEFINED> instruction: 0x01021994
   13ab0:	ldrdeq	r9, [r1], -r8
   13ab4:	andeq	r2, r1, r0, lsr r9
   13ab8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13abc:	bic	r4, r1, #4080	; 0xff0
   13ac0:	bic	r4, r4, #15
   13ac4:	cmp	r4, #0
   13ac8:	beq	13ae0 <__assert_fail@plt+0x24a4>
   13acc:	bl	114b0 <__errno_location@plt>
   13ad0:	mov	r3, #22
   13ad4:	str	r3, [r0]
   13ad8:	mov	r4, #0
   13adc:	b	13afc <__assert_fail@plt+0x24c0>
   13ae0:	and	r3, r1, #516	; 0x204
   13ae4:	cmp	r3, #516	; 0x204
   13ae8:	mov	r5, r1
   13aec:	bne	13b08 <__assert_fail@plt+0x24cc>
   13af0:	bl	114b0 <__errno_location@plt>
   13af4:	mov	r3, #22
   13af8:	str	r3, [r0]
   13afc:	mov	r0, r4
   13b00:	add	sp, sp, #12
   13b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b08:	ands	r4, r1, #18
   13b0c:	beq	13af0 <__assert_fail@plt+0x24b4>
   13b10:	mov	fp, r0
   13b14:	mov	r1, #96	; 0x60
   13b18:	mov	r0, #1
   13b1c:	mov	sl, r2
   13b20:	bl	17cdc <__assert_fail@plt+0x66a0>
   13b24:	subs	r4, r0, #0
   13b28:	beq	13afc <__assert_fail@plt+0x24c0>
   13b2c:	tst	r5, #2
   13b30:	bicne	r3, r5, #512	; 0x200
   13b34:	orrne	r3, r3, #4
   13b38:	sub	r7, fp, #4
   13b3c:	mov	r6, #0
   13b40:	strne	r3, [r4, #48]	; 0x30
   13b44:	mvn	r3, #99	; 0x63
   13b48:	str	sl, [r4, #44]	; 0x2c
   13b4c:	streq	r5, [r4, #48]	; 0x30
   13b50:	str	r3, [r4, #32]
   13b54:	ldr	r9, [r7, #4]!
   13b58:	cmp	r9, #0
   13b5c:	bne	13c84 <__assert_fail@plt+0x2648>
   13b60:	add	r1, r6, #1
   13b64:	cmp	r1, #4096	; 0x1000
   13b68:	movcc	r1, #4096	; 0x1000
   13b6c:	mov	r0, r4
   13b70:	bl	130d4 <__assert_fail@plt+0x1a98>
   13b74:	subs	r3, r0, #0
   13b78:	str	r3, [sp]
   13b7c:	beq	13d98 <__assert_fail@plt+0x275c>
   13b80:	ldr	r7, [fp]
   13b84:	cmp	r7, #0
   13b88:	beq	13bac <__assert_fail@plt+0x2570>
   13b8c:	mov	r2, r9
   13b90:	ldr	r1, [pc, #524]	; 13da4 <__assert_fail@plt+0x2768>
   13b94:	mov	r0, r4
   13b98:	bl	12b64 <__assert_fail@plt+0x1528>
   13b9c:	subs	r7, r0, #0
   13ba0:	beq	13d90 <__assert_fail@plt+0x2754>
   13ba4:	mvn	r3, #0
   13ba8:	str	r3, [r7, #48]	; 0x30
   13bac:	cmp	sl, #0
   13bb0:	lsr	r5, r5, #11
   13bb4:	ldrne	r8, [r4, #48]	; 0x30
   13bb8:	eor	r5, r5, #1
   13bbc:	lsrne	r8, r8, #10
   13bc0:	andne	r3, r8, #1
   13bc4:	mov	r8, #0
   13bc8:	mov	r9, r8
   13bcc:	mov	r6, r8
   13bd0:	strne	r3, [sp]
   13bd4:	and	r3, r5, #1
   13bd8:	str	r3, [sp, #4]
   13bdc:	ldr	r5, [fp, r9, lsl #2]
   13be0:	cmp	r5, #0
   13be4:	bne	13c98 <__assert_fail@plt+0x265c>
   13be8:	cmp	sl, #0
   13bec:	cmpne	r9, #1
   13bf0:	bls	13c08 <__assert_fail@plt+0x25cc>
   13bf4:	mov	r1, r6
   13bf8:	mov	r2, r9
   13bfc:	mov	r0, r4
   13c00:	bl	12a9c <__assert_fail@plt+0x1460>
   13c04:	mov	r6, r0
   13c08:	mov	r2, #0
   13c0c:	ldr	r1, [pc, #400]	; 13da4 <__assert_fail@plt+0x2768>
   13c10:	mov	r0, r4
   13c14:	bl	12b64 <__assert_fail@plt+0x1528>
   13c18:	cmp	r0, #0
   13c1c:	str	r0, [r4]
   13c20:	beq	13d80 <__assert_fail@plt+0x2744>
   13c24:	mov	r3, #9
   13c28:	strh	r3, [r0, #56]	; 0x38
   13c2c:	mov	r3, #1
   13c30:	str	r6, [r0, #8]
   13c34:	str	r3, [r0, #48]	; 0x30
   13c38:	mov	r0, r4
   13c3c:	bl	13140 <__assert_fail@plt+0x1b04>
   13c40:	cmp	r0, #0
   13c44:	beq	13d80 <__assert_fail@plt+0x2744>
   13c48:	ldr	r3, [r4, #48]	; 0x30
   13c4c:	tst	r3, #516	; 0x204
   13c50:	bne	13c74 <__assert_fail@plt+0x2638>
   13c54:	ldr	r1, [pc, #332]	; 13da8 <__assert_fail@plt+0x276c>
   13c58:	mov	r0, r4
   13c5c:	bl	12bd8 <__assert_fail@plt+0x159c>
   13c60:	cmp	r0, #0
   13c64:	str	r0, [r4, #28]
   13c68:	ldrlt	r3, [r4, #48]	; 0x30
   13c6c:	orrlt	r3, r3, #4
   13c70:	strlt	r3, [r4, #48]	; 0x30
   13c74:	mvn	r1, #0
   13c78:	add	r0, r4, #60	; 0x3c
   13c7c:	bl	15384 <__assert_fail@plt+0x3d48>
   13c80:	b	13afc <__assert_fail@plt+0x24c0>
   13c84:	mov	r0, r9
   13c88:	bl	1148c <strlen@plt>
   13c8c:	cmp	r6, r0
   13c90:	movcc	r6, r0
   13c94:	b	13b54 <__assert_fail@plt+0x2518>
   13c98:	mov	r0, r5
   13c9c:	bl	1148c <strlen@plt>
   13ca0:	ldr	r1, [sp, #4]
   13ca4:	cmp	r0, #2
   13ca8:	movls	r1, #0
   13cac:	andhi	r1, r1, #1
   13cb0:	cmp	r1, #0
   13cb4:	mov	r2, r0
   13cb8:	beq	13ce8 <__assert_fail@plt+0x26ac>
   13cbc:	sub	r0, r0, #1
   13cc0:	add	r1, r5, r0
   13cc4:	ldrb	r0, [r5, r0]
   13cc8:	cmp	r0, #47	; 0x2f
   13ccc:	bne	13ce8 <__assert_fail@plt+0x26ac>
   13cd0:	ldrb	r0, [r1, #-1]!
   13cd4:	cmp	r0, #47	; 0x2f
   13cd8:	bne	13ce8 <__assert_fail@plt+0x26ac>
   13cdc:	sub	r2, r2, #1
   13ce0:	cmp	r2, #1
   13ce4:	bne	13cd0 <__assert_fail@plt+0x2694>
   13ce8:	mov	r1, r5
   13cec:	mov	r0, r4
   13cf0:	bl	12b64 <__assert_fail@plt+0x1528>
   13cf4:	subs	r5, r0, #0
   13cf8:	beq	13d80 <__assert_fail@plt+0x2744>
   13cfc:	mov	r2, #0
   13d00:	str	r2, [r5, #48]	; 0x30
   13d04:	add	r2, r5, #168	; 0xa8
   13d08:	str	r2, [r5, #24]
   13d0c:	ldr	r2, [sp]
   13d10:	str	r7, [r5, #4]
   13d14:	cmp	r6, #0
   13d18:	moveq	r2, #0
   13d1c:	andne	r2, r2, #1
   13d20:	cmp	r2, #0
   13d24:	beq	13d6c <__assert_fail@plt+0x2730>
   13d28:	mov	r0, #2
   13d2c:	mov	r1, #0
   13d30:	mov	r2, #11
   13d34:	strh	r2, [r5, #56]	; 0x38
   13d38:	strd	r0, [r5, #112]	; 0x70
   13d3c:	cmp	sl, #0
   13d40:	strne	r6, [r5, #8]
   13d44:	bne	13d60 <__assert_fail@plt+0x2724>
   13d48:	cmp	r6, #0
   13d4c:	str	sl, [r5, #8]
   13d50:	moveq	r8, r5
   13d54:	strne	r5, [r8, #8]
   13d58:	movne	r8, r5
   13d5c:	movne	r5, r6
   13d60:	add	r9, r9, #1
   13d64:	mov	r6, r5
   13d68:	b	13bdc <__assert_fail@plt+0x25a0>
   13d6c:	mov	r1, r5
   13d70:	mov	r0, r4
   13d74:	bl	12964 <__assert_fail@plt+0x1328>
   13d78:	strh	r0, [r5, #56]	; 0x38
   13d7c:	b	13d3c <__assert_fail@plt+0x2700>
   13d80:	mov	r0, r6
   13d84:	bl	12c1c <__assert_fail@plt+0x15e0>
   13d88:	mov	r0, r7
   13d8c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13d90:	ldr	r0, [r4, #24]
   13d94:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13d98:	mov	r0, r4
   13d9c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13da0:	b	13ad8 <__assert_fail@plt+0x249c>
   13da4:	andeq	r9, r1, r8, lsl #16
   13da8:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   13dac:	push	{r4, r5, r6, lr}
   13db0:	mov	r4, r0
   13db4:	ldr	r0, [r0]
   13db8:	cmp	r0, #0
   13dbc:	bne	13e54 <__assert_fail@plt+0x2818>
   13dc0:	ldr	r0, [r4, #4]
   13dc4:	cmp	r0, #0
   13dc8:	beq	13dd0 <__assert_fail@plt+0x2794>
   13dcc:	bl	12c1c <__assert_fail@plt+0x15e0>
   13dd0:	ldr	r0, [r4, #8]
   13dd4:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13dd8:	ldr	r0, [r4, #24]
   13ddc:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13de0:	ldr	r3, [r4, #48]	; 0x30
   13de4:	tst	r3, #512	; 0x200
   13de8:	beq	13e80 <__assert_fail@plt+0x2844>
   13dec:	ldr	r0, [r4, #32]
   13df0:	cmp	r0, #0
   13df4:	bge	13e68 <__assert_fail@plt+0x282c>
   13df8:	mov	r5, #0
   13dfc:	add	r0, r4, #60	; 0x3c
   13e00:	bl	12c80 <__assert_fail@plt+0x1644>
   13e04:	ldr	r0, [r4, #52]	; 0x34
   13e08:	cmp	r0, #0
   13e0c:	beq	13e14 <__assert_fail@plt+0x27d8>
   13e10:	bl	14ef0 <__assert_fail@plt+0x38b4>
   13e14:	mov	r0, r4
   13e18:	bl	12c54 <__assert_fail@plt+0x1618>
   13e1c:	mov	r0, r4
   13e20:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13e24:	cmp	r5, #0
   13e28:	beq	13e38 <__assert_fail@plt+0x27fc>
   13e2c:	bl	114b0 <__errno_location@plt>
   13e30:	str	r5, [r0]
   13e34:	mvn	r5, #0
   13e38:	mov	r0, r5
   13e3c:	pop	{r4, r5, r6, pc}
   13e40:	ldr	r5, [r0, #8]
   13e44:	cmp	r5, #0
   13e48:	ldreq	r5, [r0, #4]
   13e4c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13e50:	mov	r0, r5
   13e54:	ldr	r3, [r0, #48]	; 0x30
   13e58:	cmp	r3, #0
   13e5c:	bge	13e40 <__assert_fail@plt+0x2804>
   13e60:	bl	182f0 <__assert_fail@plt+0x6cb4>
   13e64:	b	13dc0 <__assert_fail@plt+0x2784>
   13e68:	bl	1160c <close@plt>
   13e6c:	cmp	r0, #0
   13e70:	beq	13df8 <__assert_fail@plt+0x27bc>
   13e74:	bl	114b0 <__errno_location@plt>
   13e78:	ldr	r5, [r0]
   13e7c:	b	13dfc <__assert_fail@plt+0x27c0>
   13e80:	tst	r3, #4
   13e84:	bne	13df8 <__assert_fail@plt+0x27bc>
   13e88:	ldr	r0, [r4, #28]
   13e8c:	bl	11594 <fchdir@plt>
   13e90:	subs	r5, r0, #0
   13e94:	beq	13ea0 <__assert_fail@plt+0x2864>
   13e98:	bl	114b0 <__errno_location@plt>
   13e9c:	ldr	r5, [r0]
   13ea0:	ldr	r0, [r4, #28]
   13ea4:	bl	1160c <close@plt>
   13ea8:	clz	r3, r5
   13eac:	lsr	r3, r3, #5
   13eb0:	cmp	r0, #0
   13eb4:	moveq	r3, #0
   13eb8:	cmp	r3, #0
   13ebc:	beq	13dfc <__assert_fail@plt+0x27c0>
   13ec0:	b	13e74 <__assert_fail@plt+0x2838>
   13ec4:	push	{r4, r5, r6, r7, r8, lr}
   13ec8:	ldr	r4, [r0]
   13ecc:	cmp	r4, #0
   13ed0:	beq	141d0 <__assert_fail@plt+0x2b94>
   13ed4:	ldr	r1, [r0, #48]	; 0x30
   13ed8:	mov	r5, r0
   13edc:	ands	r2, r1, #8192	; 0x2000
   13ee0:	bne	141d0 <__assert_fail@plt+0x2b94>
   13ee4:	ldrh	r3, [r4, #60]	; 0x3c
   13ee8:	mov	ip, #3
   13eec:	strh	ip, [r4, #60]	; 0x3c
   13ef0:	cmp	r3, #1
   13ef4:	bne	13f0c <__assert_fail@plt+0x28d0>
   13ef8:	mov	r1, r4
   13efc:	bl	12964 <__assert_fail@plt+0x1328>
   13f00:	strh	r0, [r4, #56]	; 0x38
   13f04:	mov	r0, r4
   13f08:	pop	{r4, r5, r6, r7, r8, pc}
   13f0c:	cmp	r3, #2
   13f10:	ldrh	r2, [r4, #56]	; 0x38
   13f14:	bne	13ff4 <__assert_fail@plt+0x29b8>
   13f18:	sub	ip, r2, #12
   13f1c:	cmp	ip, #1
   13f20:	bhi	13ff4 <__assert_fail@plt+0x29b8>
   13f24:	mov	r2, #1
   13f28:	mov	r1, r4
   13f2c:	bl	12964 <__assert_fail@plt+0x1328>
   13f30:	cmp	r0, #1
   13f34:	strh	r0, [r4, #56]	; 0x38
   13f38:	bne	13f80 <__assert_fail@plt+0x2944>
   13f3c:	ldr	r3, [r5, #48]	; 0x30
   13f40:	tst	r3, #4
   13f44:	bne	13f80 <__assert_fail@plt+0x2944>
   13f48:	ldr	r1, [pc, #1332]	; 14484 <__assert_fail@plt+0x2e48>
   13f4c:	mov	r0, r5
   13f50:	bl	12bd8 <__assert_fail@plt+0x159c>
   13f54:	cmp	r0, #0
   13f58:	str	r0, [r4, #36]	; 0x24
   13f5c:	ldrhge	r3, [r4, #58]	; 0x3a
   13f60:	orrge	r3, r3, #2
   13f64:	strhge	r3, [r4, #58]	; 0x3a
   13f68:	bge	13f80 <__assert_fail@plt+0x2944>
   13f6c:	bl	114b0 <__errno_location@plt>
   13f70:	ldr	r3, [r0]
   13f74:	str	r3, [r4, #32]
   13f78:	mov	r3, #7
   13f7c:	strh	r3, [r4, #56]	; 0x38
   13f80:	ldrh	r3, [r4, #56]	; 0x38
   13f84:	str	r4, [r5]
   13f88:	cmp	r3, #11
   13f8c:	bne	13fb4 <__assert_fail@plt+0x2978>
   13f90:	ldrd	r2, [r4, #112]	; 0x70
   13f94:	cmp	r3, #0
   13f98:	cmpeq	r2, #2
   13f9c:	bne	14324 <__assert_fail@plt+0x2ce8>
   13fa0:	mov	r2, #0
   13fa4:	mov	r1, r4
   13fa8:	mov	r0, r5
   13fac:	bl	12964 <__assert_fail@plt+0x1328>
   13fb0:	strh	r0, [r4, #56]	; 0x38
   13fb4:	ldrh	r3, [r4, #56]	; 0x38
   13fb8:	cmp	r3, #1
   13fbc:	bne	13f04 <__assert_fail@plt+0x28c8>
   13fc0:	ldr	r3, [r4, #48]	; 0x30
   13fc4:	cmp	r3, #0
   13fc8:	ldrdeq	r2, [r4, #64]	; 0x40
   13fcc:	strdeq	r2, [r5, #16]
   13fd0:	mov	r0, r5
   13fd4:	mov	r1, r4
   13fd8:	bl	131bc <__assert_fail@plt+0x1b80>
   13fdc:	subs	r5, r0, #0
   13fe0:	bne	13f04 <__assert_fail@plt+0x28c8>
   13fe4:	bl	114b0 <__errno_location@plt>
   13fe8:	mov	r3, #12
   13fec:	str	r3, [r0]
   13ff0:	b	141d0 <__assert_fail@plt+0x2b94>
   13ff4:	cmp	r2, #1
   13ff8:	movne	r6, r4
   13ffc:	bne	14184 <__assert_fail@plt+0x2b48>
   14000:	cmp	r3, #4
   14004:	beq	14024 <__assert_fail@plt+0x29e8>
   14008:	tst	r1, #64	; 0x40
   1400c:	beq	14068 <__assert_fail@plt+0x2a2c>
   14010:	ldrd	r6, [r4, #64]	; 0x40
   14014:	ldrd	r2, [r5, #16]
   14018:	cmp	r7, r3
   1401c:	cmpeq	r6, r2
   14020:	beq	14068 <__assert_fail@plt+0x2a2c>
   14024:	ldrh	r3, [r4, #58]	; 0x3a
   14028:	tst	r3, #2
   1402c:	beq	14038 <__assert_fail@plt+0x29fc>
   14030:	ldr	r0, [r4, #36]	; 0x24
   14034:	bl	1160c <close@plt>
   14038:	ldr	r0, [r5, #4]
   1403c:	cmp	r0, #0
   14040:	beq	14050 <__assert_fail@plt+0x2a14>
   14044:	bl	12c1c <__assert_fail@plt+0x15e0>
   14048:	mov	r3, #0
   1404c:	str	r3, [r5, #4]
   14050:	mov	r3, #6
   14054:	strh	r3, [r4, #56]	; 0x38
   14058:	mov	r1, r4
   1405c:	mov	r0, r5
   14060:	bl	13020 <__assert_fail@plt+0x19e4>
   14064:	b	13f04 <__assert_fail@plt+0x28c8>
   14068:	ldr	r0, [r5, #4]
   1406c:	cmp	r0, #0
   14070:	beq	14090 <__assert_fail@plt+0x2a54>
   14074:	tst	r1, #4096	; 0x1000
   14078:	beq	14090 <__assert_fail@plt+0x2a54>
   1407c:	bic	r1, r1, #4096	; 0x1000
   14080:	str	r1, [r5, #48]	; 0x30
   14084:	bl	12c1c <__assert_fail@plt+0x15e0>
   14088:	mov	r3, #0
   1408c:	str	r3, [r5, #4]
   14090:	ldr	r3, [r5, #4]
   14094:	cmp	r3, #0
   14098:	beq	14140 <__assert_fail@plt+0x2b04>
   1409c:	ldr	r3, [r4, #24]
   140a0:	mvn	r2, #0
   140a4:	mov	r1, r4
   140a8:	mov	r0, r5
   140ac:	bl	12e84 <__assert_fail@plt+0x1848>
   140b0:	cmp	r0, #0
   140b4:	beq	140dc <__assert_fail@plt+0x2aa0>
   140b8:	bl	114b0 <__errno_location@plt>
   140bc:	ldr	r3, [r0]
   140c0:	str	r3, [r4, #32]
   140c4:	ldrh	r3, [r4, #58]	; 0x3a
   140c8:	orr	r3, r3, #1
   140cc:	strh	r3, [r4, #58]	; 0x3a
   140d0:	ldr	r3, [r5, #4]
   140d4:	cmp	r3, #0
   140d8:	bne	1412c <__assert_fail@plt+0x2af0>
   140dc:	mov	r3, #0
   140e0:	ldr	r4, [r5, #4]
   140e4:	str	r3, [r5, #4]
   140e8:	ldr	r0, [r4, #4]
   140ec:	ldr	r2, [r5, #24]
   140f0:	ldr	r1, [r0, #40]	; 0x28
   140f4:	ldr	r0, [r0, #28]
   140f8:	sub	r3, r1, #1
   140fc:	ldrb	r0, [r0, r3]
   14100:	cmp	r0, #47	; 0x2f
   14104:	movne	r3, r1
   14108:	mov	r1, #47	; 0x2f
   1410c:	add	r0, r2, r3
   14110:	strb	r1, [r2, r3]
   14114:	ldr	r2, [r4, #52]	; 0x34
   14118:	add	r1, r4, #168	; 0xa8
   1411c:	add	r2, r2, #1
   14120:	add	r0, r0, #1
   14124:	bl	112b8 <memmove@plt>
   14128:	b	13f80 <__assert_fail@plt+0x2944>
   1412c:	ldr	r2, [r3, #4]
   14130:	ldr	r2, [r2, #24]
   14134:	str	r2, [r3, #24]
   14138:	ldr	r3, [r3, #8]
   1413c:	b	140d4 <__assert_fail@plt+0x2a98>
   14140:	mov	r1, #3
   14144:	mov	r0, r5
   14148:	bl	13274 <__assert_fail@plt+0x1c38>
   1414c:	cmp	r0, #0
   14150:	str	r0, [r5, #4]
   14154:	bne	140dc <__assert_fail@plt+0x2aa0>
   14158:	ldr	r3, [r5, #48]	; 0x30
   1415c:	tst	r3, #8192	; 0x2000
   14160:	bne	141d0 <__assert_fail@plt+0x2b94>
   14164:	ldr	r3, [r4, #32]
   14168:	cmp	r3, #0
   1416c:	beq	14058 <__assert_fail@plt+0x2a1c>
   14170:	ldrh	r3, [r4, #56]	; 0x38
   14174:	cmp	r3, #4
   14178:	beq	14058 <__assert_fail@plt+0x2a1c>
   1417c:	mov	r3, #7
   14180:	b	14054 <__assert_fail@plt+0x2a18>
   14184:	ldr	r4, [r4, #8]
   14188:	cmp	r4, #0
   1418c:	bne	141e4 <__assert_fail@plt+0x2ba8>
   14190:	ldr	r3, [r6, #4]
   14194:	ldr	r2, [r3, #12]
   14198:	cmp	r2, #0
   1419c:	beq	14334 <__assert_fail@plt+0x2cf8>
   141a0:	str	r3, [r5]
   141a4:	ldr	r2, [r5, #24]
   141a8:	ldr	r3, [r3, #40]	; 0x28
   141ac:	mov	r1, #3
   141b0:	mov	r0, r5
   141b4:	strb	r4, [r2, r3]
   141b8:	bl	13274 <__assert_fail@plt+0x1c38>
   141bc:	subs	r4, r0, #0
   141c0:	bne	141d8 <__assert_fail@plt+0x2b9c>
   141c4:	ldr	r3, [r5, #48]	; 0x30
   141c8:	tst	r3, #8192	; 0x2000
   141cc:	beq	14334 <__assert_fail@plt+0x2cf8>
   141d0:	mov	r4, #0
   141d4:	b	13f04 <__assert_fail@plt+0x28c8>
   141d8:	mov	r0, r6
   141dc:	bl	182f0 <__assert_fail@plt+0x6cb4>
   141e0:	b	140e8 <__assert_fail@plt+0x2aac>
   141e4:	mov	r0, r6
   141e8:	str	r4, [r5]
   141ec:	bl	182f0 <__assert_fail@plt+0x6cb4>
   141f0:	ldr	r6, [r4, #48]	; 0x30
   141f4:	cmp	r6, #0
   141f8:	bne	142a0 <__assert_fail@plt+0x2c64>
   141fc:	mov	r0, r5
   14200:	bl	12e34 <__assert_fail@plt+0x17f8>
   14204:	cmp	r0, #0
   14208:	ldrne	r3, [r5, #48]	; 0x30
   1420c:	orrne	r3, r3, #8192	; 0x2000
   14210:	strne	r3, [r5, #48]	; 0x30
   14214:	bne	141d0 <__assert_fail@plt+0x2b94>
   14218:	mov	r0, r5
   1421c:	bl	12c54 <__assert_fail@plt+0x1618>
   14220:	ldr	r2, [r4, #52]	; 0x34
   14224:	add	r7, r4, #168	; 0xa8
   14228:	str	r2, [r4, #40]	; 0x28
   1422c:	mov	r1, r7
   14230:	add	r2, r2, #1
   14234:	ldr	r0, [r5, #24]
   14238:	bl	112b8 <memmove@plt>
   1423c:	mov	r1, #47	; 0x2f
   14240:	mov	r0, r7
   14244:	bl	11558 <strrchr@plt>
   14248:	cmp	r0, #0
   1424c:	beq	14288 <__assert_fail@plt+0x2c4c>
   14250:	cmp	r7, r0
   14254:	bne	14264 <__assert_fail@plt+0x2c28>
   14258:	ldrb	r3, [r4, #169]	; 0xa9
   1425c:	cmp	r3, #0
   14260:	beq	14288 <__assert_fail@plt+0x2c4c>
   14264:	add	r6, r0, #1
   14268:	mov	r0, r6
   1426c:	bl	1148c <strlen@plt>
   14270:	mov	r1, r6
   14274:	mov	r8, r0
   14278:	add	r2, r0, #1
   1427c:	mov	r0, r7
   14280:	bl	112b8 <memmove@plt>
   14284:	str	r8, [r4, #52]	; 0x34
   14288:	ldr	r3, [r5, #24]
   1428c:	mov	r0, r5
   14290:	str	r3, [r4, #28]
   14294:	str	r3, [r4, #24]
   14298:	bl	13140 <__assert_fail@plt+0x1b04>
   1429c:	b	13f80 <__assert_fail@plt+0x2944>
   142a0:	ldrh	r3, [r4, #60]	; 0x3c
   142a4:	mov	r6, r4
   142a8:	cmp	r3, #4
   142ac:	beq	14184 <__assert_fail@plt+0x2b48>
   142b0:	cmp	r3, #2
   142b4:	bne	140e8 <__assert_fail@plt+0x2aac>
   142b8:	mov	r2, #1
   142bc:	mov	r1, r4
   142c0:	mov	r0, r5
   142c4:	bl	12964 <__assert_fail@plt+0x1328>
   142c8:	cmp	r0, #1
   142cc:	strh	r0, [r4, #56]	; 0x38
   142d0:	bne	14318 <__assert_fail@plt+0x2cdc>
   142d4:	ldr	r3, [r5, #48]	; 0x30
   142d8:	tst	r3, #4
   142dc:	bne	14318 <__assert_fail@plt+0x2cdc>
   142e0:	ldr	r1, [pc, #412]	; 14484 <__assert_fail@plt+0x2e48>
   142e4:	mov	r0, r5
   142e8:	bl	12bd8 <__assert_fail@plt+0x159c>
   142ec:	cmp	r0, #0
   142f0:	str	r0, [r4, #36]	; 0x24
   142f4:	ldrhge	r3, [r4, #58]	; 0x3a
   142f8:	orrge	r3, r3, #2
   142fc:	strhge	r3, [r4, #58]	; 0x3a
   14300:	bge	14318 <__assert_fail@plt+0x2cdc>
   14304:	bl	114b0 <__errno_location@plt>
   14308:	ldr	r3, [r0]
   1430c:	str	r3, [r4, #32]
   14310:	mov	r3, #7
   14314:	strh	r3, [r4, #56]	; 0x38
   14318:	mov	r3, #3
   1431c:	strh	r3, [r4, #60]	; 0x3c
   14320:	b	140e8 <__assert_fail@plt+0x2aac>
   14324:	cmp	r3, #0
   14328:	cmpeq	r2, #1
   1432c:	beq	13fb4 <__assert_fail@plt+0x2978>
   14330:	bl	11600 <abort@plt>
   14334:	ldr	r4, [r6, #4]
   14338:	mov	r0, r6
   1433c:	str	r4, [r5]
   14340:	bl	182f0 <__assert_fail@plt+0x6cb4>
   14344:	ldr	r3, [r4, #48]	; 0x30
   14348:	cmn	r3, #1
   1434c:	bne	1436c <__assert_fail@plt+0x2d30>
   14350:	mov	r0, r4
   14354:	bl	182f0 <__assert_fail@plt+0x6cb4>
   14358:	bl	114b0 <__errno_location@plt>
   1435c:	mov	r4, #0
   14360:	str	r4, [r0]
   14364:	str	r4, [r5]
   14368:	b	13f04 <__assert_fail@plt+0x28c8>
   1436c:	ldrh	r3, [r4, #56]	; 0x38
   14370:	cmp	r3, #11
   14374:	beq	14330 <__assert_fail@plt+0x2cf4>
   14378:	ldr	r3, [r4, #40]	; 0x28
   1437c:	ldr	r2, [r5, #24]
   14380:	mov	r1, #0
   14384:	strb	r1, [r2, r3]
   14388:	ldr	r3, [r4, #48]	; 0x30
   1438c:	cmp	r3, r1
   14390:	bne	143c0 <__assert_fail@plt+0x2d84>
   14394:	mov	r0, r5
   14398:	bl	12e34 <__assert_fail@plt+0x17f8>
   1439c:	cmp	r0, #0
   143a0:	beq	143f8 <__assert_fail@plt+0x2dbc>
   143a4:	bl	114b0 <__errno_location@plt>
   143a8:	ldr	r3, [r0]
   143ac:	str	r3, [r4, #32]
   143b0:	ldr	r3, [r5, #48]	; 0x30
   143b4:	orr	r3, r3, #8192	; 0x2000
   143b8:	str	r3, [r5, #48]	; 0x30
   143bc:	b	143f8 <__assert_fail@plt+0x2dbc>
   143c0:	ldrh	r3, [r4, #58]	; 0x3a
   143c4:	tst	r3, #2
   143c8:	beq	14464 <__assert_fail@plt+0x2e28>
   143cc:	ldr	r3, [r5, #48]	; 0x30
   143d0:	tst	r3, #4
   143d4:	bne	143f0 <__assert_fail@plt+0x2db4>
   143d8:	tst	r3, #512	; 0x200
   143dc:	beq	14438 <__assert_fail@plt+0x2dfc>
   143e0:	mov	r2, #1
   143e4:	ldr	r1, [r4, #36]	; 0x24
   143e8:	mov	r0, r5
   143ec:	bl	12db8 <__assert_fail@plt+0x177c>
   143f0:	ldr	r0, [r4, #36]	; 0x24
   143f4:	bl	1160c <close@plt>
   143f8:	ldrh	r3, [r4, #56]	; 0x38
   143fc:	cmp	r3, #2
   14400:	beq	14428 <__assert_fail@plt+0x2dec>
   14404:	ldr	r3, [r4, #32]
   14408:	cmp	r3, #0
   1440c:	movne	r3, #7
   14410:	moveq	r3, #6
   14414:	strh	r3, [r4, #56]	; 0x38
   14418:	bne	14428 <__assert_fail@plt+0x2dec>
   1441c:	mov	r1, r4
   14420:	mov	r0, r5
   14424:	bl	13020 <__assert_fail@plt+0x19e4>
   14428:	ldr	r3, [r5, #48]	; 0x30
   1442c:	tst	r3, #8192	; 0x2000
   14430:	beq	13f04 <__assert_fail@plt+0x28c8>
   14434:	b	141d0 <__assert_fail@plt+0x2b94>
   14438:	ldr	r0, [r4, #36]	; 0x24
   1443c:	bl	11594 <fchdir@plt>
   14440:	cmp	r0, #0
   14444:	beq	143f0 <__assert_fail@plt+0x2db4>
   14448:	bl	114b0 <__errno_location@plt>
   1444c:	ldr	r3, [r0]
   14450:	str	r3, [r4, #32]
   14454:	ldr	r3, [r5, #48]	; 0x30
   14458:	orr	r3, r3, #8192	; 0x2000
   1445c:	str	r3, [r5, #48]	; 0x30
   14460:	b	143f0 <__assert_fail@plt+0x2db4>
   14464:	tst	r3, #1
   14468:	bne	143f8 <__assert_fail@plt+0x2dbc>
   1446c:	ldr	r3, [pc, #20]	; 14488 <__assert_fail@plt+0x2e4c>
   14470:	mvn	r2, #0
   14474:	ldr	r1, [r4, #4]
   14478:	mov	r0, r5
   1447c:	bl	12e84 <__assert_fail@plt+0x1848>
   14480:	b	1439c <__assert_fail@plt+0x2d60>
   14484:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   14488:	ldrdeq	r9, [r1], -r8
   1448c:	cmp	r2, #4
   14490:	bls	144ac <__assert_fail@plt+0x2e70>
   14494:	push	{r4, lr}
   14498:	bl	114b0 <__errno_location@plt>
   1449c:	mov	r3, #22
   144a0:	str	r3, [r0]
   144a4:	mov	r0, #1
   144a8:	pop	{r4, pc}
   144ac:	strh	r2, [r1, #60]	; 0x3c
   144b0:	mov	r0, #0
   144b4:	bx	lr
   144b8:	push	{r4, r5, r6, r7, r8, lr}
   144bc:	bics	r8, r1, #4096	; 0x1000
   144c0:	beq	144d8 <__assert_fail@plt+0x2e9c>
   144c4:	bl	114b0 <__errno_location@plt>
   144c8:	mov	r3, #22
   144cc:	str	r3, [r0]
   144d0:	mov	r0, #0
   144d4:	pop	{r4, r5, r6, r7, r8, pc}
   144d8:	mov	r5, r0
   144dc:	ldr	r4, [r0]
   144e0:	mov	r7, r1
   144e4:	bl	114b0 <__errno_location@plt>
   144e8:	mov	r6, r0
   144ec:	str	r8, [r0]
   144f0:	ldr	r0, [r5, #48]	; 0x30
   144f4:	ands	r0, r0, #8192	; 0x2000
   144f8:	bne	144d0 <__assert_fail@plt+0x2e94>
   144fc:	ldrh	r3, [r4, #56]	; 0x38
   14500:	cmp	r3, #9
   14504:	bne	14510 <__assert_fail@plt+0x2ed4>
   14508:	ldr	r0, [r4, #8]
   1450c:	pop	{r4, r5, r6, r7, r8, pc}
   14510:	cmp	r3, #1
   14514:	popne	{r4, r5, r6, r7, r8, pc}
   14518:	ldr	r0, [r5, #4]
   1451c:	cmp	r0, #0
   14520:	beq	14528 <__assert_fail@plt+0x2eec>
   14524:	bl	12c1c <__assert_fail@plt+0x15e0>
   14528:	cmp	r7, #4096	; 0x1000
   1452c:	moveq	r8, #2
   14530:	ldreq	r3, [r5, #48]	; 0x30
   14534:	movne	r8, #1
   14538:	orreq	r3, r3, #4096	; 0x1000
   1453c:	streq	r3, [r5, #48]	; 0x30
   14540:	ldr	r3, [r4, #48]	; 0x30
   14544:	cmp	r3, #0
   14548:	bne	14568 <__assert_fail@plt+0x2f2c>
   1454c:	ldr	r3, [r4, #24]
   14550:	ldrb	r3, [r3]
   14554:	cmp	r3, #47	; 0x2f
   14558:	beq	14568 <__assert_fail@plt+0x2f2c>
   1455c:	ldr	r0, [r5, #48]	; 0x30
   14560:	ands	r4, r0, #4
   14564:	beq	1457c <__assert_fail@plt+0x2f40>
   14568:	mov	r1, r8
   1456c:	mov	r0, r5
   14570:	bl	13274 <__assert_fail@plt+0x1c38>
   14574:	str	r0, [r5, #4]
   14578:	pop	{r4, r5, r6, r7, r8, pc}
   1457c:	ldr	r1, [pc, #116]	; 145f8 <__assert_fail@plt+0x2fbc>
   14580:	mov	r0, r5
   14584:	bl	12bd8 <__assert_fail@plt+0x159c>
   14588:	subs	r7, r0, #0
   1458c:	strlt	r4, [r5, #4]
   14590:	blt	144d0 <__assert_fail@plt+0x2e94>
   14594:	mov	r1, r8
   14598:	mov	r0, r5
   1459c:	bl	13274 <__assert_fail@plt+0x1c38>
   145a0:	str	r0, [r5, #4]
   145a4:	ldr	r0, [r5, #48]	; 0x30
   145a8:	ands	r4, r0, #512	; 0x200
   145ac:	beq	145c8 <__assert_fail@plt+0x2f8c>
   145b0:	mov	r2, #1
   145b4:	mov	r1, r7
   145b8:	mov	r0, r5
   145bc:	bl	12db8 <__assert_fail@plt+0x177c>
   145c0:	ldr	r0, [r5, #4]
   145c4:	pop	{r4, r5, r6, r7, r8, pc}
   145c8:	mov	r0, r7
   145cc:	bl	11594 <fchdir@plt>
   145d0:	cmp	r0, #0
   145d4:	beq	145ec <__assert_fail@plt+0x2fb0>
   145d8:	ldr	r5, [r6]
   145dc:	mov	r0, r7
   145e0:	bl	1160c <close@plt>
   145e4:	str	r5, [r6]
   145e8:	b	144d0 <__assert_fail@plt+0x2e94>
   145ec:	mov	r0, r7
   145f0:	bl	1160c <close@plt>
   145f4:	b	145c0 <__assert_fail@plt+0x2f84>
   145f8:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   145fc:	andeq	r0, r0, r0
   14600:	push	{r4, lr}
   14604:	ror	r0, r0, #3
   14608:	bl	18b44 <__assert_fail@plt+0x7508>
   1460c:	mov	r0, r1
   14610:	pop	{r4, pc}
   14614:	sub	r0, r1, r0
   14618:	clz	r0, r0
   1461c:	lsr	r0, r0, #5
   14620:	bx	lr
   14624:	push	{r4, lr}
   14628:	mov	r4, r0
   1462c:	mov	r0, r1
   14630:	ldr	r3, [r4, #24]
   14634:	ldr	r1, [r4, #8]
   14638:	blx	r3
   1463c:	ldr	r3, [r4, #8]
   14640:	cmp	r0, r3
   14644:	bcc	1464c <__assert_fail@plt+0x3010>
   14648:	bl	11600 <abort@plt>
   1464c:	ldr	r3, [r4]
   14650:	add	r0, r3, r0, lsl #3
   14654:	pop	{r4, pc}
   14658:	push	{r4, r5, r6, r7, r8, lr}
   1465c:	mov	r6, r1
   14660:	mov	r8, r2
   14664:	mov	r5, r0
   14668:	mov	r7, r3
   1466c:	bl	14624 <__assert_fail@plt+0x2fe8>
   14670:	str	r0, [r8]
   14674:	ldr	r1, [r0]
   14678:	cmp	r1, #0
   1467c:	bne	1468c <__assert_fail@plt+0x3050>
   14680:	mov	r2, #0
   14684:	mov	r0, r2
   14688:	pop	{r4, r5, r6, r7, r8, pc}
   1468c:	cmp	r6, r1
   14690:	mov	r4, r0
   14694:	bne	146d4 <__assert_fail@plt+0x3098>
   14698:	cmp	r7, #0
   1469c:	ldr	r2, [r4]
   146a0:	beq	14684 <__assert_fail@plt+0x3048>
   146a4:	ldr	r3, [r4, #4]
   146a8:	cmp	r3, #0
   146ac:	streq	r3, [r4]
   146b0:	beq	14684 <__assert_fail@plt+0x3048>
   146b4:	ldm	r3, {r0, r1}
   146b8:	stm	r4, {r0, r1}
   146bc:	mov	r1, #0
   146c0:	str	r1, [r3]
   146c4:	ldr	r1, [r5, #36]	; 0x24
   146c8:	str	r1, [r3, #4]
   146cc:	str	r3, [r5, #36]	; 0x24
   146d0:	b	14684 <__assert_fail@plt+0x3048>
   146d4:	ldr	r3, [r5, #28]
   146d8:	mov	r0, r6
   146dc:	blx	r3
   146e0:	cmp	r0, #0
   146e4:	bne	14698 <__assert_fail@plt+0x305c>
   146e8:	ldr	r3, [r4, #4]
   146ec:	cmp	r3, #0
   146f0:	beq	14680 <__assert_fail@plt+0x3044>
   146f4:	ldr	r1, [r3]
   146f8:	cmp	r6, r1
   146fc:	bne	1471c <__assert_fail@plt+0x30e0>
   14700:	ldr	r3, [r4, #4]
   14704:	cmp	r7, #0
   14708:	ldr	r2, [r3]
   1470c:	beq	14684 <__assert_fail@plt+0x3048>
   14710:	ldr	r1, [r3, #4]
   14714:	str	r1, [r4, #4]
   14718:	b	146bc <__assert_fail@plt+0x3080>
   1471c:	ldr	r3, [r5, #28]
   14720:	mov	r0, r6
   14724:	blx	r3
   14728:	cmp	r0, #0
   1472c:	bne	14700 <__assert_fail@plt+0x30c4>
   14730:	ldr	r4, [r4, #4]
   14734:	b	146e8 <__assert_fail@plt+0x30ac>
   14738:	push	{r4, r5, r6, lr}
   1473c:	ldrb	r4, [r1, #16]
   14740:	cmp	r4, #0
   14744:	bne	14770 <__assert_fail@plt+0x3134>
   14748:	vmov	s15, r0
   1474c:	vldr	s14, [r1, #8]
   14750:	vcvt.f32.u32	s13, s15
   14754:	vdiv.f32	s15, s13, s14
   14758:	vldr	s14, [pc, #156]	; 147fc <__assert_fail@plt+0x31c0>
   1475c:	vcmpe.f32	s15, s14
   14760:	vmrs	APSR_nzcv, fpscr
   14764:	bge	147c8 <__assert_fail@plt+0x318c>
   14768:	vcvt.u32.f32	s15, s15
   1476c:	vmov	r0, s15
   14770:	cmp	r0, #10
   14774:	movcc	r0, #10
   14778:	orr	r4, r0, #1
   1477c:	cmn	r4, #1
   14780:	beq	147a8 <__assert_fail@plt+0x316c>
   14784:	mov	r6, #9
   14788:	mov	r5, #3
   1478c:	cmp	r4, r6
   14790:	bhi	147d8 <__assert_fail@plt+0x319c>
   14794:	mov	r1, r5
   14798:	mov	r0, r4
   1479c:	bl	18b44 <__assert_fail@plt+0x7508>
   147a0:	cmp	r1, #0
   147a4:	beq	147d0 <__assert_fail@plt+0x3194>
   147a8:	lsrs	r3, r4, #30
   147ac:	movne	r3, #1
   147b0:	moveq	r3, #0
   147b4:	tst	r4, #536870912	; 0x20000000
   147b8:	bne	147c4 <__assert_fail@plt+0x3188>
   147bc:	cmp	r3, #0
   147c0:	beq	147c8 <__assert_fail@plt+0x318c>
   147c4:	mov	r4, #0
   147c8:	mov	r0, r4
   147cc:	pop	{r4, r5, r6, pc}
   147d0:	add	r4, r4, #2
   147d4:	b	1477c <__assert_fail@plt+0x3140>
   147d8:	mov	r1, r5
   147dc:	mov	r0, r4
   147e0:	bl	18b44 <__assert_fail@plt+0x7508>
   147e4:	cmp	r1, #0
   147e8:	beq	14794 <__assert_fail@plt+0x3158>
   147ec:	add	r3, r5, #1
   147f0:	add	r5, r5, #2
   147f4:	add	r6, r6, r3, lsl #2
   147f8:	b	1478c <__assert_fail@plt+0x3150>
   147fc:	svcmi	0x00800000
   14800:	ldr	r3, [r0]
   14804:	ldr	r2, [pc, #160]	; 148ac <__assert_fail@plt+0x3270>
   14808:	cmp	r3, r2
   1480c:	beq	14894 <__assert_fail@plt+0x3258>
   14810:	vldr	s14, [r3, #8]
   14814:	vldr	s13, [pc, #128]	; 1489c <__assert_fail@plt+0x3260>
   14818:	vcmpe.f32	s14, s13
   1481c:	vmrs	APSR_nzcv, fpscr
   14820:	ble	14888 <__assert_fail@plt+0x324c>
   14824:	vldr	s15, [pc, #116]	; 148a0 <__assert_fail@plt+0x3264>
   14828:	vcmpe.f32	s14, s15
   1482c:	vmrs	APSR_nzcv, fpscr
   14830:	bpl	14888 <__assert_fail@plt+0x324c>
   14834:	vldr	s12, [r3, #12]
   14838:	vldr	s15, [pc, #100]	; 148a4 <__assert_fail@plt+0x3268>
   1483c:	vcmpe.f32	s12, s15
   14840:	vmrs	APSR_nzcv, fpscr
   14844:	ble	14888 <__assert_fail@plt+0x324c>
   14848:	vldr	s15, [r3]
   1484c:	vcmpe.f32	s15, #0.0
   14850:	vmrs	APSR_nzcv, fpscr
   14854:	blt	14888 <__assert_fail@plt+0x324c>
   14858:	vadd.f32	s15, s15, s13
   1485c:	vldr	s13, [r3, #4]
   14860:	vcmpe.f32	s15, s13
   14864:	vmrs	APSR_nzcv, fpscr
   14868:	bpl	14888 <__assert_fail@plt+0x324c>
   1486c:	vldr	s12, [pc, #52]	; 148a8 <__assert_fail@plt+0x326c>
   14870:	vcmpe.f32	s13, s12
   14874:	vmrs	APSR_nzcv, fpscr
   14878:	bhi	14888 <__assert_fail@plt+0x324c>
   1487c:	vcmpe.f32	s14, s15
   14880:	vmrs	APSR_nzcv, fpscr
   14884:	bgt	14894 <__assert_fail@plt+0x3258>
   14888:	str	r2, [r0]
   1488c:	mov	r0, #0
   14890:	bx	lr
   14894:	mov	r0, #1
   14898:	bx	lr
   1489c:	stclcc	12, cr12, [ip, #820]	; 0x334
   148a0:	svccc	0x00666666
   148a4:	svccc	0x008ccccd
   148a8:	svccc	0x00800000
   148ac:	ldrdeq	r9, [r1], -ip
   148b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b4:	mov	r5, r0
   148b8:	ldr	r4, [r1]
   148bc:	mov	r7, r1
   148c0:	mov	r8, r2
   148c4:	add	r4, r4, #8
   148c8:	mov	r9, #0
   148cc:	mov	sl, #8
   148d0:	ldr	r2, [r7, #4]
   148d4:	sub	r3, r4, #8
   148d8:	cmp	r2, r3
   148dc:	bhi	148ec <__assert_fail@plt+0x32b0>
   148e0:	mov	r8, #1
   148e4:	mov	r0, r8
   148e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ec:	ldr	r3, [r4, #-8]
   148f0:	cmp	r3, #0
   148f4:	ldrne	r6, [r4, #-4]
   148f8:	bne	14950 <__assert_fail@plt+0x3314>
   148fc:	add	r4, r4, #8
   14900:	b	148d0 <__assert_fail@plt+0x3294>
   14904:	ldr	fp, [r6]
   14908:	mov	r0, r5
   1490c:	mov	r1, fp
   14910:	bl	14624 <__assert_fail@plt+0x2fe8>
   14914:	ldr	r1, [r6, #4]
   14918:	ldr	r2, [r0]
   1491c:	cmp	r2, #0
   14920:	streq	fp, [r0]
   14924:	ldreq	r3, [r5, #12]
   14928:	ldrne	r3, [r0, #4]
   1492c:	addeq	r3, r3, #1
   14930:	streq	r3, [r5, #12]
   14934:	streq	r2, [r6]
   14938:	ldreq	r3, [r5, #36]	; 0x24
   1493c:	strne	r3, [r6, #4]
   14940:	streq	r3, [r6, #4]
   14944:	strne	r6, [r0, #4]
   14948:	streq	r6, [r5, #36]	; 0x24
   1494c:	mov	r6, r1
   14950:	cmp	r6, #0
   14954:	bne	14904 <__assert_fail@plt+0x32c8>
   14958:	cmp	r8, #0
   1495c:	ldr	fp, [r4, #-8]
   14960:	str	r6, [r4, #-4]
   14964:	bne	148fc <__assert_fail@plt+0x32c0>
   14968:	mov	r1, fp
   1496c:	mov	r0, r5
   14970:	bl	14624 <__assert_fail@plt+0x2fe8>
   14974:	ldr	r3, [r0]
   14978:	mov	r6, r0
   1497c:	cmp	r3, #0
   14980:	beq	149cc <__assert_fail@plt+0x3390>
   14984:	ldr	r0, [r5, #36]	; 0x24
   14988:	cmp	r0, #0
   1498c:	ldrne	r3, [r0, #4]
   14990:	strne	r3, [r5, #36]	; 0x24
   14994:	bne	149a8 <__assert_fail@plt+0x336c>
   14998:	mov	r0, sl
   1499c:	bl	17d24 <__assert_fail@plt+0x66e8>
   149a0:	cmp	r0, #0
   149a4:	beq	148e4 <__assert_fail@plt+0x32a8>
   149a8:	ldr	r3, [r6, #4]
   149ac:	str	fp, [r0]
   149b0:	str	r3, [r0, #4]
   149b4:	str	r0, [r6, #4]
   149b8:	ldr	r3, [r7, #12]
   149bc:	str	r9, [r4, #-8]
   149c0:	sub	r3, r3, #1
   149c4:	str	r3, [r7, #12]
   149c8:	b	148fc <__assert_fail@plt+0x32c0>
   149cc:	ldr	r3, [r5, #12]
   149d0:	str	fp, [r0]
   149d4:	add	r3, r3, #1
   149d8:	str	r3, [r5, #12]
   149dc:	b	149b8 <__assert_fail@plt+0x337c>
   149e0:	ldr	r0, [r0, #8]
   149e4:	bx	lr
   149e8:	ldr	r0, [r0, #12]
   149ec:	bx	lr
   149f0:	ldr	r0, [r0, #16]
   149f4:	bx	lr
   149f8:	ldm	r0, {r3, ip}
   149fc:	mov	r0, #0
   14a00:	cmp	r3, ip
   14a04:	bcc	14a0c <__assert_fail@plt+0x33d0>
   14a08:	bx	lr
   14a0c:	ldr	r2, [r3]
   14a10:	cmp	r2, #0
   14a14:	movne	r1, r3
   14a18:	movne	r2, #1
   14a1c:	bne	14a2c <__assert_fail@plt+0x33f0>
   14a20:	add	r3, r3, #8
   14a24:	b	14a00 <__assert_fail@plt+0x33c4>
   14a28:	add	r2, r2, #1
   14a2c:	ldr	r1, [r1, #4]
   14a30:	cmp	r1, #0
   14a34:	bne	14a28 <__assert_fail@plt+0x33ec>
   14a38:	cmp	r0, r2
   14a3c:	movcc	r0, r2
   14a40:	b	14a20 <__assert_fail@plt+0x33e4>
   14a44:	push	{lr}		; (str lr, [sp, #-4]!)
   14a48:	mov	r3, #0
   14a4c:	ldm	r0, {r2, lr}
   14a50:	mov	r1, r3
   14a54:	cmp	r2, lr
   14a58:	bcc	14a7c <__assert_fail@plt+0x3440>
   14a5c:	ldr	r2, [r0, #12]
   14a60:	cmp	r1, r2
   14a64:	ldreq	r0, [r0, #16]
   14a68:	subeq	r0, r0, r3
   14a6c:	clzeq	r0, r0
   14a70:	lsreq	r0, r0, #5
   14a74:	movne	r0, #0
   14a78:	pop	{pc}		; (ldr pc, [sp], #4)
   14a7c:	ldr	ip, [r2]
   14a80:	cmp	ip, #0
   14a84:	addne	r1, r1, #1
   14a88:	addne	r3, r3, #1
   14a8c:	movne	ip, r2
   14a90:	bne	14aa0 <__assert_fail@plt+0x3464>
   14a94:	add	r2, r2, #8
   14a98:	b	14a54 <__assert_fail@plt+0x3418>
   14a9c:	add	r3, r3, #1
   14aa0:	ldr	ip, [ip, #4]
   14aa4:	cmp	ip, #0
   14aa8:	bne	14a9c <__assert_fail@plt+0x3460>
   14aac:	b	14a94 <__assert_fail@plt+0x3458>
   14ab0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14ab4:	mov	r4, r1
   14ab8:	ldr	r5, [r0, #8]
   14abc:	ldr	r7, [r0, #12]
   14ac0:	mov	r6, r0
   14ac4:	bl	149f8 <__assert_fail@plt+0x33bc>
   14ac8:	ldr	r3, [r6, #16]
   14acc:	ldr	r2, [pc, #124]	; 14b50 <__assert_fail@plt+0x3514>
   14ad0:	mov	r1, #1
   14ad4:	mov	r8, r0
   14ad8:	mov	r0, r4
   14adc:	bl	114f8 <__fprintf_chk@plt>
   14ae0:	mov	r3, r5
   14ae4:	ldr	r2, [pc, #104]	; 14b54 <__assert_fail@plt+0x3518>
   14ae8:	mov	r1, #1
   14aec:	mov	r0, r4
   14af0:	bl	114f8 <__fprintf_chk@plt>
   14af4:	vmov	s15, r7
   14af8:	mov	r3, r7
   14afc:	ldr	r2, [pc, #84]	; 14b58 <__assert_fail@plt+0x351c>
   14b00:	mov	r1, #1
   14b04:	vcvt.f64.u32	d6, s15
   14b08:	vldr	d7, [pc, #56]	; 14b48 <__assert_fail@plt+0x350c>
   14b0c:	mov	r0, r4
   14b10:	vmul.f64	d6, d6, d7
   14b14:	vmov	s15, r5
   14b18:	vcvt.f64.u32	d7, s15
   14b1c:	vdiv.f64	d5, d6, d7
   14b20:	vstr	d5, [sp]
   14b24:	bl	114f8 <__fprintf_chk@plt>
   14b28:	mov	r3, r8
   14b2c:	ldr	r2, [pc, #40]	; 14b5c <__assert_fail@plt+0x3520>
   14b30:	mov	r1, #1
   14b34:	mov	r0, r4
   14b38:	add	sp, sp, #8
   14b3c:	pop	{r4, r5, r6, r7, r8, lr}
   14b40:	b	114f8 <__fprintf_chk@plt>
   14b44:	nop			; (mov r0, r0)
   14b48:	andeq	r0, r0, r0
   14b4c:	subsmi	r0, r9, r0
   14b50:	strdeq	r9, [r1], -r0
   14b54:	andeq	r9, r1, r8, lsl #28
   14b58:	andeq	r9, r1, r0, lsr #28
   14b5c:	andeq	r9, r1, r1, asr #28
   14b60:	push	{r4, r5, r6, lr}
   14b64:	mov	r6, r0
   14b68:	mov	r5, r1
   14b6c:	bl	14624 <__assert_fail@plt+0x2fe8>
   14b70:	ldr	r3, [r0]
   14b74:	cmp	r3, #0
   14b78:	movne	r4, r0
   14b7c:	bne	14ba8 <__assert_fail@plt+0x356c>
   14b80:	mov	r0, #0
   14b84:	pop	{r4, r5, r6, pc}
   14b88:	ldr	r3, [r6, #28]
   14b8c:	mov	r0, r5
   14b90:	blx	r3
   14b94:	cmp	r0, #0
   14b98:	bne	14bb4 <__assert_fail@plt+0x3578>
   14b9c:	ldr	r4, [r4, #4]
   14ba0:	cmp	r4, #0
   14ba4:	beq	14b80 <__assert_fail@plt+0x3544>
   14ba8:	ldr	r1, [r4]
   14bac:	cmp	r5, r1
   14bb0:	bne	14b88 <__assert_fail@plt+0x354c>
   14bb4:	ldr	r0, [r4]
   14bb8:	pop	{r4, r5, r6, pc}
   14bbc:	ldr	r3, [r0, #16]
   14bc0:	cmp	r3, #0
   14bc4:	beq	14bf4 <__assert_fail@plt+0x35b8>
   14bc8:	ldr	r3, [r0]
   14bcc:	ldr	r2, [r0, #4]
   14bd0:	cmp	r3, r2
   14bd4:	bcc	14be0 <__assert_fail@plt+0x35a4>
   14bd8:	push	{r4, lr}
   14bdc:	bl	11600 <abort@plt>
   14be0:	ldr	r0, [r3]
   14be4:	cmp	r0, #0
   14be8:	bne	14bf8 <__assert_fail@plt+0x35bc>
   14bec:	add	r3, r3, #8
   14bf0:	b	14bd0 <__assert_fail@plt+0x3594>
   14bf4:	mov	r0, r3
   14bf8:	bx	lr
   14bfc:	push	{r4, r5, r6, lr}
   14c00:	mov	r4, r0
   14c04:	mov	r5, r1
   14c08:	bl	14624 <__assert_fail@plt+0x2fe8>
   14c0c:	mov	r2, r0
   14c10:	mov	r3, r0
   14c14:	ldr	r1, [r3]
   14c18:	ldr	r3, [r3, #4]
   14c1c:	cmp	r5, r1
   14c20:	bne	14c34 <__assert_fail@plt+0x35f8>
   14c24:	cmp	r3, #0
   14c28:	beq	14c34 <__assert_fail@plt+0x35f8>
   14c2c:	ldr	r0, [r3]
   14c30:	pop	{r4, r5, r6, pc}
   14c34:	cmp	r3, #0
   14c38:	bne	14c14 <__assert_fail@plt+0x35d8>
   14c3c:	ldr	r3, [r4, #4]
   14c40:	add	r2, r2, #8
   14c44:	cmp	r2, r3
   14c48:	bcc	14c54 <__assert_fail@plt+0x3618>
   14c4c:	mov	r0, #0
   14c50:	pop	{r4, r5, r6, pc}
   14c54:	ldr	r0, [r2]
   14c58:	cmp	r0, #0
   14c5c:	beq	14c40 <__assert_fail@plt+0x3604>
   14c60:	pop	{r4, r5, r6, pc}
   14c64:	ldr	ip, [r0]
   14c68:	mov	r3, #0
   14c6c:	push	{r4, r5, lr}
   14c70:	ldr	lr, [r0, #4]
   14c74:	cmp	ip, lr
   14c78:	bcc	14c84 <__assert_fail@plt+0x3648>
   14c7c:	mov	r0, r3
   14c80:	pop	{r4, r5, pc}
   14c84:	ldr	lr, [ip]
   14c88:	cmp	lr, #0
   14c8c:	beq	14cb8 <__assert_fail@plt+0x367c>
   14c90:	add	r4, r1, r3, lsl #2
   14c94:	mov	lr, ip
   14c98:	cmp	r2, r3
   14c9c:	bls	14c7c <__assert_fail@plt+0x3640>
   14ca0:	ldr	r5, [lr]
   14ca4:	add	r3, r3, #1
   14ca8:	str	r5, [r4], #4
   14cac:	ldr	lr, [lr, #4]
   14cb0:	cmp	lr, #0
   14cb4:	bne	14c98 <__assert_fail@plt+0x365c>
   14cb8:	add	ip, ip, #8
   14cbc:	b	14c70 <__assert_fail@plt+0x3634>
   14cc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cc4:	mov	r7, r0
   14cc8:	ldr	r4, [r0]
   14ccc:	mov	r8, r1
   14cd0:	mov	r9, r2
   14cd4:	mov	r6, #0
   14cd8:	ldr	r3, [r7, #4]
   14cdc:	cmp	r4, r3
   14ce0:	bcc	14cec <__assert_fail@plt+0x36b0>
   14ce4:	mov	r0, r6
   14ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cec:	ldr	r3, [r4]
   14cf0:	cmp	r3, #0
   14cf4:	beq	14d20 <__assert_fail@plt+0x36e4>
   14cf8:	mov	r5, r4
   14cfc:	mov	r1, r9
   14d00:	ldr	r0, [r5]
   14d04:	blx	r8
   14d08:	cmp	r0, #0
   14d0c:	beq	14ce4 <__assert_fail@plt+0x36a8>
   14d10:	ldr	r5, [r5, #4]
   14d14:	add	r6, r6, #1
   14d18:	cmp	r5, #0
   14d1c:	bne	14cfc <__assert_fail@plt+0x36c0>
   14d20:	add	r4, r4, #8
   14d24:	b	14cd8 <__assert_fail@plt+0x369c>
   14d28:	push	{r4, r5, r6, lr}
   14d2c:	sub	r4, r0, #1
   14d30:	mov	r5, r1
   14d34:	mov	r0, #0
   14d38:	mov	r6, #31
   14d3c:	ldrb	r3, [r4, #1]!
   14d40:	cmp	r3, #0
   14d44:	bne	14d4c <__assert_fail@plt+0x3710>
   14d48:	pop	{r4, r5, r6, pc}
   14d4c:	mov	r1, r5
   14d50:	mla	r0, r6, r0, r3
   14d54:	bl	18b44 <__assert_fail@plt+0x7508>
   14d58:	mov	r0, r1
   14d5c:	b	14d3c <__assert_fail@plt+0x3700>
   14d60:	push	{lr}		; (str lr, [sp, #-4]!)
   14d64:	mov	ip, r0
   14d68:	ldr	lr, [pc, #16]	; 14d80 <__assert_fail@plt+0x3744>
   14d6c:	ldm	lr!, {r0, r1, r2, r3}
   14d70:	stmia	ip!, {r0, r1, r2, r3}
   14d74:	ldr	r3, [lr]
   14d78:	str	r3, [ip]
   14d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d80:	ldrdeq	r9, [r1], -ip
   14d84:	cmp	r2, #0
   14d88:	push	{r4, r5, r6, r7, r8, lr}
   14d8c:	mov	r8, r0
   14d90:	ldr	r7, [pc, #176]	; 14e48 <__assert_fail@plt+0x380c>
   14d94:	mov	r0, #40	; 0x28
   14d98:	movne	r7, r2
   14d9c:	cmp	r3, #0
   14da0:	mov	r5, r1
   14da4:	ldr	r6, [pc, #160]	; 14e4c <__assert_fail@plt+0x3810>
   14da8:	movne	r6, r3
   14dac:	bl	17d24 <__assert_fail@plt+0x66e8>
   14db0:	subs	r4, r0, #0
   14db4:	beq	14e30 <__assert_fail@plt+0x37f4>
   14db8:	ldr	r3, [pc, #144]	; 14e50 <__assert_fail@plt+0x3814>
   14dbc:	cmp	r5, #0
   14dc0:	mov	r0, r4
   14dc4:	moveq	r5, r3
   14dc8:	str	r5, [r0, #20]!
   14dcc:	bl	14800 <__assert_fail@plt+0x31c4>
   14dd0:	cmp	r0, #0
   14dd4:	beq	14e38 <__assert_fail@plt+0x37fc>
   14dd8:	mov	r1, r5
   14ddc:	mov	r0, r8
   14de0:	bl	14738 <__assert_fail@plt+0x30fc>
   14de4:	cmp	r0, #0
   14de8:	str	r0, [r4, #8]
   14dec:	beq	14e38 <__assert_fail@plt+0x37fc>
   14df0:	mov	r1, #8
   14df4:	bl	17cdc <__assert_fail@plt+0x66a0>
   14df8:	cmp	r0, #0
   14dfc:	str	r0, [r4]
   14e00:	beq	14e38 <__assert_fail@plt+0x37fc>
   14e04:	ldr	r3, [r4, #8]
   14e08:	ldr	r2, [sp, #24]
   14e0c:	str	r7, [r4, #24]
   14e10:	add	r0, r0, r3, lsl #3
   14e14:	mov	r3, #0
   14e18:	str	r0, [r4, #4]
   14e1c:	str	r3, [r4, #12]
   14e20:	str	r3, [r4, #16]
   14e24:	str	r6, [r4, #28]
   14e28:	str	r2, [r4, #32]
   14e2c:	str	r3, [r4, #36]	; 0x24
   14e30:	mov	r0, r4
   14e34:	pop	{r4, r5, r6, r7, r8, pc}
   14e38:	mov	r0, r4
   14e3c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   14e40:	mov	r4, #0
   14e44:	b	14e30 <__assert_fail@plt+0x37f4>
   14e48:	andeq	r4, r1, r0, lsl #12
   14e4c:	andeq	r4, r1, r4, lsl r6
   14e50:	ldrdeq	r9, [r1], -ip
   14e54:	push	{r4, r5, r6, r7, r8, lr}
   14e58:	mov	r5, r0
   14e5c:	ldr	r4, [r0]
   14e60:	mov	r7, #0
   14e64:	add	r4, r4, #8
   14e68:	ldr	r2, [r5, #4]
   14e6c:	sub	r3, r4, #8
   14e70:	cmp	r2, r3
   14e74:	bhi	14e88 <__assert_fail@plt+0x384c>
   14e78:	mov	r3, #0
   14e7c:	str	r3, [r5, #12]
   14e80:	str	r3, [r5, #16]
   14e84:	pop	{r4, r5, r6, r7, r8, pc}
   14e88:	ldr	r3, [r4, #-8]
   14e8c:	cmp	r3, #0
   14e90:	ldrne	r6, [r4, #-4]
   14e94:	bne	14ec8 <__assert_fail@plt+0x388c>
   14e98:	add	r4, r4, #8
   14e9c:	b	14e68 <__assert_fail@plt+0x382c>
   14ea0:	cmp	r3, #0
   14ea4:	beq	14eb0 <__assert_fail@plt+0x3874>
   14ea8:	ldr	r0, [r6]
   14eac:	blx	r3
   14eb0:	ldr	r3, [r6, #4]
   14eb4:	ldr	r2, [r5, #36]	; 0x24
   14eb8:	str	r7, [r6]
   14ebc:	str	r2, [r6, #4]
   14ec0:	str	r6, [r5, #36]	; 0x24
   14ec4:	mov	r6, r3
   14ec8:	cmp	r6, #0
   14ecc:	ldr	r3, [r5, #32]
   14ed0:	bne	14ea0 <__assert_fail@plt+0x3864>
   14ed4:	cmp	r3, #0
   14ed8:	beq	14ee4 <__assert_fail@plt+0x38a8>
   14edc:	ldr	r0, [r4, #-8]
   14ee0:	blx	r3
   14ee4:	str	r7, [r4, #-8]
   14ee8:	str	r7, [r4, #-4]
   14eec:	b	14e98 <__assert_fail@plt+0x385c>
   14ef0:	ldr	r3, [r0, #32]
   14ef4:	push	{r4, r5, r6, lr}
   14ef8:	cmp	r3, #0
   14efc:	mov	r4, r0
   14f00:	bne	14f34 <__assert_fail@plt+0x38f8>
   14f04:	ldr	r5, [r4]
   14f08:	ldr	r3, [r4, #4]
   14f0c:	cmp	r5, r3
   14f10:	bcc	14f84 <__assert_fail@plt+0x3948>
   14f14:	ldr	r0, [r4, #36]	; 0x24
   14f18:	cmp	r0, #0
   14f1c:	bne	14fa4 <__assert_fail@plt+0x3968>
   14f20:	ldr	r0, [r4]
   14f24:	bl	182f0 <__assert_fail@plt+0x6cb4>
   14f28:	mov	r0, r4
   14f2c:	pop	{r4, r5, r6, lr}
   14f30:	b	182f0 <__assert_fail@plt+0x6cb4>
   14f34:	ldr	r3, [r0, #16]
   14f38:	cmp	r3, #0
   14f3c:	ldrne	r5, [r0]
   14f40:	beq	14f04 <__assert_fail@plt+0x38c8>
   14f44:	ldr	r3, [r4, #4]
   14f48:	cmp	r5, r3
   14f4c:	bcs	14f04 <__assert_fail@plt+0x38c8>
   14f50:	ldr	r3, [r5]
   14f54:	cmp	r3, #0
   14f58:	movne	r6, r5
   14f5c:	bne	14f68 <__assert_fail@plt+0x392c>
   14f60:	add	r5, r5, #8
   14f64:	b	14f44 <__assert_fail@plt+0x3908>
   14f68:	ldr	r0, [r6]
   14f6c:	ldr	r3, [r4, #32]
   14f70:	blx	r3
   14f74:	ldr	r6, [r6, #4]
   14f78:	cmp	r6, #0
   14f7c:	bne	14f68 <__assert_fail@plt+0x392c>
   14f80:	b	14f60 <__assert_fail@plt+0x3924>
   14f84:	ldr	r0, [r5, #4]
   14f88:	cmp	r0, #0
   14f8c:	addeq	r5, r5, #8
   14f90:	beq	14f08 <__assert_fail@plt+0x38cc>
   14f94:	ldr	r6, [r0, #4]
   14f98:	bl	182f0 <__assert_fail@plt+0x6cb4>
   14f9c:	mov	r0, r6
   14fa0:	b	14f88 <__assert_fail@plt+0x394c>
   14fa4:	ldr	r5, [r0, #4]
   14fa8:	bl	182f0 <__assert_fail@plt+0x6cb4>
   14fac:	mov	r0, r5
   14fb0:	b	14f18 <__assert_fail@plt+0x38dc>
   14fb4:	push	{r4, r5, lr}
   14fb8:	mov	r4, r0
   14fbc:	sub	sp, sp, #44	; 0x2c
   14fc0:	mov	r0, r1
   14fc4:	ldr	r1, [r4, #20]
   14fc8:	bl	14738 <__assert_fail@plt+0x30fc>
   14fcc:	subs	r5, r0, #0
   14fd0:	bne	14fe4 <__assert_fail@plt+0x39a8>
   14fd4:	mov	r5, #0
   14fd8:	mov	r0, r5
   14fdc:	add	sp, sp, #44	; 0x2c
   14fe0:	pop	{r4, r5, pc}
   14fe4:	ldr	r3, [r4, #8]
   14fe8:	cmp	r5, r3
   14fec:	beq	150d4 <__assert_fail@plt+0x3a98>
   14ff0:	mov	r1, #8
   14ff4:	bl	17cdc <__assert_fail@plt+0x66a0>
   14ff8:	cmp	r0, #0
   14ffc:	str	r0, [sp]
   15000:	beq	14fd4 <__assert_fail@plt+0x3998>
   15004:	ldr	r3, [r4, #20]
   15008:	add	r0, r0, r5, lsl #3
   1500c:	str	r3, [sp, #20]
   15010:	ldr	r3, [r4, #24]
   15014:	mov	r2, #0
   15018:	str	r3, [sp, #24]
   1501c:	ldr	r3, [r4, #28]
   15020:	str	r0, [sp, #4]
   15024:	str	r3, [sp, #28]
   15028:	ldr	r3, [r4, #32]
   1502c:	mov	r1, r4
   15030:	str	r3, [sp, #32]
   15034:	ldr	r3, [r4, #36]	; 0x24
   15038:	mov	r0, sp
   1503c:	str	r5, [sp, #8]
   15040:	str	r2, [sp, #12]
   15044:	str	r2, [sp, #16]
   15048:	str	r3, [sp, #36]	; 0x24
   1504c:	bl	148b0 <__assert_fail@plt+0x3274>
   15050:	subs	r5, r0, #0
   15054:	beq	1508c <__assert_fail@plt+0x3a50>
   15058:	ldr	r0, [r4]
   1505c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   15060:	ldr	r3, [sp]
   15064:	str	r3, [r4]
   15068:	ldr	r3, [sp, #4]
   1506c:	str	r3, [r4, #4]
   15070:	ldr	r3, [sp, #8]
   15074:	str	r3, [r4, #8]
   15078:	ldr	r3, [sp, #12]
   1507c:	str	r3, [r4, #12]
   15080:	ldr	r3, [sp, #36]	; 0x24
   15084:	str	r3, [r4, #36]	; 0x24
   15088:	b	14fd8 <__assert_fail@plt+0x399c>
   1508c:	ldr	r3, [sp, #36]	; 0x24
   15090:	mov	r2, #1
   15094:	str	r3, [r4, #36]	; 0x24
   15098:	mov	r1, sp
   1509c:	mov	r0, r4
   150a0:	bl	148b0 <__assert_fail@plt+0x3274>
   150a4:	cmp	r0, #0
   150a8:	bne	150b0 <__assert_fail@plt+0x3a74>
   150ac:	bl	11600 <abort@plt>
   150b0:	mov	r2, r5
   150b4:	mov	r1, sp
   150b8:	mov	r0, r4
   150bc:	bl	148b0 <__assert_fail@plt+0x3274>
   150c0:	cmp	r0, #0
   150c4:	beq	150ac <__assert_fail@plt+0x3a70>
   150c8:	ldr	r0, [sp]
   150cc:	bl	182f0 <__assert_fail@plt+0x6cb4>
   150d0:	b	14fd8 <__assert_fail@plt+0x399c>
   150d4:	mov	r5, #1
   150d8:	b	14fd8 <__assert_fail@plt+0x399c>
   150dc:	push	{r0, r1, r4, r5, r6, lr}
   150e0:	subs	r6, r1, #0
   150e4:	bne	150ec <__assert_fail@plt+0x3ab0>
   150e8:	bl	11600 <abort@plt>
   150ec:	mov	r5, r2
   150f0:	mov	r3, #0
   150f4:	add	r2, sp, #4
   150f8:	mov	r4, r0
   150fc:	bl	14658 <__assert_fail@plt+0x301c>
   15100:	cmp	r0, #0
   15104:	beq	1511c <__assert_fail@plt+0x3ae0>
   15108:	cmp	r5, #0
   1510c:	strne	r0, [r5]
   15110:	movne	r0, #0
   15114:	moveq	r0, r5
   15118:	b	1519c <__assert_fail@plt+0x3b60>
   1511c:	vldr	s15, [r4, #12]
   15120:	ldr	r3, [r4, #20]
   15124:	vcvt.f32.u32	s14, s15
   15128:	vldr	s15, [r4, #8]
   1512c:	vldr	s13, [r3, #8]
   15130:	vcvt.f32.u32	s15, s15
   15134:	vmul.f32	s15, s15, s13
   15138:	vcmpe.f32	s14, s15
   1513c:	vmrs	APSR_nzcv, fpscr
   15140:	ble	151d8 <__assert_fail@plt+0x3b9c>
   15144:	add	r0, r4, #20
   15148:	bl	14800 <__assert_fail@plt+0x31c4>
   1514c:	vldr	s15, [r4, #8]
   15150:	ldr	r3, [r4, #20]
   15154:	vldr	s14, [r4, #12]
   15158:	vcvt.f32.u32	s15, s15
   1515c:	vldr	s13, [r3, #8]
   15160:	vcvt.f32.u32	s14, s14
   15164:	vmul.f32	s12, s13, s15
   15168:	vcmpe.f32	s14, s12
   1516c:	vmrs	APSR_nzcv, fpscr
   15170:	ble	151d8 <__assert_fail@plt+0x3b9c>
   15174:	vldr	s14, [r3, #12]
   15178:	ldrb	r2, [r3, #16]
   1517c:	vmul.f32	s15, s15, s14
   15180:	cmp	r2, #0
   15184:	vldr	s14, [pc, #200]	; 15254 <__assert_fail@plt+0x3c18>
   15188:	vmuleq.f32	s15, s15, s13
   1518c:	vcmpe.f32	s15, s14
   15190:	vmrs	APSR_nzcv, fpscr
   15194:	blt	151a4 <__assert_fail@plt+0x3b68>
   15198:	mvn	r0, #0
   1519c:	add	sp, sp, #8
   151a0:	pop	{r4, r5, r6, pc}
   151a4:	vcvt.u32.f32	s15, s15
   151a8:	mov	r0, r4
   151ac:	vmov	r1, s15
   151b0:	bl	14fb4 <__assert_fail@plt+0x3978>
   151b4:	cmp	r0, #0
   151b8:	beq	15198 <__assert_fail@plt+0x3b5c>
   151bc:	mov	r3, #0
   151c0:	add	r2, sp, #4
   151c4:	mov	r1, r6
   151c8:	mov	r0, r4
   151cc:	bl	14658 <__assert_fail@plt+0x301c>
   151d0:	cmp	r0, #0
   151d4:	bne	150e8 <__assert_fail@plt+0x3aac>
   151d8:	ldr	r3, [sp, #4]
   151dc:	ldr	r2, [r3]
   151e0:	cmp	r2, #0
   151e4:	beq	15234 <__assert_fail@plt+0x3bf8>
   151e8:	ldr	r0, [r4, #36]	; 0x24
   151ec:	cmp	r0, #0
   151f0:	ldrne	r3, [r0, #4]
   151f4:	strne	r3, [r4, #36]	; 0x24
   151f8:	bne	1520c <__assert_fail@plt+0x3bd0>
   151fc:	mov	r0, #8
   15200:	bl	17d24 <__assert_fail@plt+0x66e8>
   15204:	cmp	r0, #0
   15208:	beq	15198 <__assert_fail@plt+0x3b5c>
   1520c:	ldr	r3, [sp, #4]
   15210:	str	r6, [r0]
   15214:	ldr	r2, [r3, #4]
   15218:	str	r2, [r0, #4]
   1521c:	str	r0, [r3, #4]
   15220:	ldr	r3, [r4, #16]
   15224:	add	r3, r3, #1
   15228:	str	r3, [r4, #16]
   1522c:	mov	r0, #1
   15230:	b	1519c <__assert_fail@plt+0x3b60>
   15234:	str	r6, [r3]
   15238:	ldr	r3, [r4, #16]
   1523c:	add	r3, r3, #1
   15240:	str	r3, [r4, #16]
   15244:	ldr	r3, [r4, #12]
   15248:	add	r3, r3, #1
   1524c:	str	r3, [r4, #12]
   15250:	b	1522c <__assert_fail@plt+0x3bf0>
   15254:	svcmi	0x00800000
   15258:	push	{r0, r1, r4, lr}
   1525c:	add	r2, sp, #4
   15260:	mov	r4, r1
   15264:	bl	150dc <__assert_fail@plt+0x3aa0>
   15268:	cmn	r0, #1
   1526c:	moveq	r0, #0
   15270:	beq	15280 <__assert_fail@plt+0x3c44>
   15274:	cmp	r0, #0
   15278:	movne	r0, r4
   1527c:	ldreq	r0, [sp, #4]
   15280:	add	sp, sp, #8
   15284:	pop	{r4, pc}
   15288:	push	{r0, r1, r4, r5, r6, lr}
   1528c:	mov	r3, #1
   15290:	add	r2, sp, #4
   15294:	mov	r4, r0
   15298:	bl	14658 <__assert_fail@plt+0x301c>
   1529c:	subs	r5, r0, #0
   152a0:	beq	15358 <__assert_fail@plt+0x3d1c>
   152a4:	ldr	r3, [r4, #16]
   152a8:	sub	r3, r3, #1
   152ac:	str	r3, [r4, #16]
   152b0:	ldr	r3, [sp, #4]
   152b4:	ldr	r3, [r3]
   152b8:	cmp	r3, #0
   152bc:	bne	15358 <__assert_fail@plt+0x3d1c>
   152c0:	vldr	s14, [r4, #8]
   152c4:	ldr	r3, [r4, #12]
   152c8:	sub	r3, r3, #1
   152cc:	vcvt.f32.u32	s14, s14
   152d0:	vmov	s15, r3
   152d4:	str	r3, [r4, #12]
   152d8:	ldr	r3, [r4, #20]
   152dc:	vcvt.f32.u32	s15, s15
   152e0:	vldr	s13, [r3]
   152e4:	vmul.f32	s14, s14, s13
   152e8:	vcmpe.f32	s15, s14
   152ec:	vmrs	APSR_nzcv, fpscr
   152f0:	bpl	15358 <__assert_fail@plt+0x3d1c>
   152f4:	add	r0, r4, #20
   152f8:	bl	14800 <__assert_fail@plt+0x31c4>
   152fc:	vldr	s15, [r4, #8]
   15300:	vldr	s14, [r4, #12]
   15304:	ldr	r3, [r4, #20]
   15308:	vcvt.f32.u32	s15, s15
   1530c:	vcvt.f32.u32	s13, s14
   15310:	vldr	s14, [r3]
   15314:	vmul.f32	s14, s15, s14
   15318:	vcmpe.f32	s13, s14
   1531c:	vmrs	APSR_nzcv, fpscr
   15320:	bpl	15358 <__assert_fail@plt+0x3d1c>
   15324:	vldr	s14, [r3, #4]
   15328:	ldrb	r2, [r3, #16]
   1532c:	mov	r0, r4
   15330:	vmul.f32	s15, s15, s14
   15334:	cmp	r2, #0
   15338:	vldreq	s14, [r3, #8]
   1533c:	vmuleq.f32	s15, s15, s14
   15340:	vcvt.u32.f32	s15, s15
   15344:	vmov	r1, s15
   15348:	bl	14fb4 <__assert_fail@plt+0x3978>
   1534c:	cmp	r0, #0
   15350:	ldreq	r0, [r4, #36]	; 0x24
   15354:	beq	15370 <__assert_fail@plt+0x3d34>
   15358:	mov	r0, r5
   1535c:	add	sp, sp, #8
   15360:	pop	{r4, r5, r6, pc}
   15364:	ldr	r6, [r0, #4]
   15368:	bl	182f0 <__assert_fail@plt+0x6cb4>
   1536c:	mov	r0, r6
   15370:	cmp	r0, #0
   15374:	bne	15364 <__assert_fail@plt+0x3d28>
   15378:	str	r0, [r4, #36]	; 0x24
   1537c:	b	15358 <__assert_fail@plt+0x3d1c>
   15380:	b	15288 <__assert_fail@plt+0x3c4c>
   15384:	mov	r3, #1
   15388:	strb	r3, [r0, #28]
   1538c:	mov	r3, #0
   15390:	str	r3, [r0, #20]
   15394:	str	r3, [r0, #24]
   15398:	str	r1, [r0]
   1539c:	str	r1, [r0, #4]
   153a0:	str	r1, [r0, #8]
   153a4:	str	r1, [r0, #12]
   153a8:	str	r1, [r0, #16]
   153ac:	bx	lr
   153b0:	ldrb	r0, [r0, #28]
   153b4:	bx	lr
   153b8:	ldrb	ip, [r0, #28]
   153bc:	ldr	r3, [r0, #20]
   153c0:	mov	r2, r0
   153c4:	eor	ip, ip, #1
   153c8:	add	r3, ip, r3
   153cc:	and	r3, r3, #3
   153d0:	ldr	r0, [r0, r3, lsl #2]
   153d4:	str	r1, [r2, r3, lsl #2]
   153d8:	ldr	r1, [r2, #24]
   153dc:	str	r3, [r2, #20]
   153e0:	cmp	r3, r1
   153e4:	addeq	r3, ip, r3
   153e8:	andeq	r3, r3, #3
   153ec:	streq	r3, [r2, #24]
   153f0:	mov	r3, #0
   153f4:	strb	r3, [r2, #28]
   153f8:	bx	lr
   153fc:	ldrb	r2, [r0, #28]
   15400:	cmp	r2, #0
   15404:	beq	15410 <__assert_fail@plt+0x3dd4>
   15408:	push	{r4, lr}
   1540c:	bl	11600 <abort@plt>
   15410:	mov	r3, r0
   15414:	ldr	r2, [r0, #20]
   15418:	ldr	r1, [r3, #16]
   1541c:	ldr	r0, [r0, r2, lsl #2]
   15420:	str	r1, [r3, r2, lsl #2]
   15424:	ldr	r1, [r3, #24]
   15428:	cmp	r2, r1
   1542c:	addne	r2, r2, #3
   15430:	moveq	r2, #1
   15434:	andne	r2, r2, #3
   15438:	strbeq	r2, [r3, #28]
   1543c:	strne	r2, [r3, #20]
   15440:	bx	lr
   15444:	push	{r2, r3}
   15448:	push	{r0, r1, r2, lr}
   1544c:	ldr	r2, [sp, #16]
   15450:	ands	r3, r2, #64	; 0x40
   15454:	addne	r3, sp, #20
   15458:	strne	r3, [sp, #4]
   1545c:	ldrne	r3, [sp, #20]
   15460:	bl	11498 <openat64@plt>
   15464:	bl	17240 <__assert_fail@plt+0x5c04>
   15468:	add	sp, sp, #12
   1546c:	pop	{lr}		; (ldr lr, [sp], #4)
   15470:	add	sp, sp, #8
   15474:	bx	lr
   15478:	orr	r2, r2, #540672	; 0x84000
   1547c:	push	{r4, r5, r6, r7, r8, lr}
   15480:	orr	r2, r2, #2304	; 0x900
   15484:	mov	r5, r3
   15488:	bl	15444 <__assert_fail@plt+0x3e08>
   1548c:	subs	r6, r0, #0
   15490:	movlt	r4, #0
   15494:	blt	154c0 <__assert_fail@plt+0x3e84>
   15498:	bl	1157c <fdopendir@plt>
   1549c:	subs	r4, r0, #0
   154a0:	strne	r6, [r5]
   154a4:	bne	154c0 <__assert_fail@plt+0x3e84>
   154a8:	bl	114b0 <__errno_location@plt>
   154ac:	ldr	r7, [r0]
   154b0:	mov	r5, r0
   154b4:	mov	r0, r6
   154b8:	bl	1160c <close@plt>
   154bc:	str	r7, [r5]
   154c0:	mov	r0, r4
   154c4:	pop	{r4, r5, r6, r7, r8, pc}
   154c8:	push	{r4, r5, r6, lr}
   154cc:	subs	r5, r0, #0
   154d0:	bne	154e8 <__assert_fail@plt+0x3eac>
   154d4:	ldr	r3, [pc, #124]	; 15558 <__assert_fail@plt+0x3f1c>
   154d8:	ldr	r0, [pc, #124]	; 1555c <__assert_fail@plt+0x3f20>
   154dc:	ldr	r1, [r3]
   154e0:	bl	115e8 <fputs@plt>
   154e4:	bl	11600 <abort@plt>
   154e8:	mov	r1, #47	; 0x2f
   154ec:	bl	11558 <strrchr@plt>
   154f0:	cmp	r0, #0
   154f4:	addne	r4, r0, #1
   154f8:	moveq	r4, r5
   154fc:	sub	r3, r4, r5
   15500:	cmp	r3, #6
   15504:	ble	15544 <__assert_fail@plt+0x3f08>
   15508:	mov	r2, #7
   1550c:	ldr	r1, [pc, #76]	; 15560 <__assert_fail@plt+0x3f24>
   15510:	sub	r0, r4, #7
   15514:	bl	115f4 <strncmp@plt>
   15518:	cmp	r0, #0
   1551c:	bne	15544 <__assert_fail@plt+0x3f08>
   15520:	mov	r2, #3
   15524:	ldr	r1, [pc, #56]	; 15564 <__assert_fail@plt+0x3f28>
   15528:	mov	r0, r4
   1552c:	bl	115f4 <strncmp@plt>
   15530:	cmp	r0, #0
   15534:	movne	r5, r4
   15538:	ldreq	r3, [pc, #40]	; 15568 <__assert_fail@plt+0x3f2c>
   1553c:	addeq	r5, r4, #3
   15540:	streq	r5, [r3]
   15544:	ldr	r3, [pc, #32]	; 1556c <__assert_fail@plt+0x3f30>
   15548:	str	r5, [r3]
   1554c:	ldr	r3, [pc, #28]	; 15570 <__assert_fail@plt+0x3f34>
   15550:	str	r5, [r3]
   15554:	pop	{r4, r5, r6, pc}
   15558:	andeq	fp, r2, r0, asr #3
   1555c:	andeq	r9, r1, r9, asr lr
   15560:	muleq	r1, r1, lr
   15564:	muleq	r1, r9, lr
   15568:			; <UNDEFINED> instruction: 0x0002b1b0
   1556c:	andeq	fp, r2, ip, lsl #4
   15570:			; <UNDEFINED> instruction: 0x0002b1b4
   15574:	push	{r4, r5, r6, lr}
   15578:	mov	r2, #48	; 0x30
   1557c:	mov	r5, r1
   15580:	mov	r1, #0
   15584:	mov	r4, r0
   15588:	bl	114d4 <memset@plt>
   1558c:	cmp	r5, #10
   15590:	bne	15598 <__assert_fail@plt+0x3f5c>
   15594:	bl	11600 <abort@plt>
   15598:	str	r5, [r4]
   1559c:	mov	r0, r4
   155a0:	pop	{r4, r5, r6, pc}
   155a4:	push	{r4, r5, r6, lr}
   155a8:	mov	r4, r0
   155ac:	mov	r5, r1
   155b0:	bl	183d8 <__assert_fail@plt+0x6d9c>
   155b4:	ldrb	r3, [r0]
   155b8:	bic	r3, r3, #32
   155bc:	cmp	r3, #85	; 0x55
   155c0:	bne	15630 <__assert_fail@plt+0x3ff4>
   155c4:	ldrb	r3, [r0, #1]
   155c8:	bic	r3, r3, #32
   155cc:	cmp	r3, #84	; 0x54
   155d0:	bne	15608 <__assert_fail@plt+0x3fcc>
   155d4:	ldrb	r3, [r0, #2]
   155d8:	bic	r3, r3, #32
   155dc:	cmp	r3, #70	; 0x46
   155e0:	bne	15608 <__assert_fail@plt+0x3fcc>
   155e4:	ldrb	r3, [r0, #3]
   155e8:	cmp	r3, #45	; 0x2d
   155ec:	bne	15608 <__assert_fail@plt+0x3fcc>
   155f0:	ldrb	r3, [r0, #4]
   155f4:	cmp	r3, #56	; 0x38
   155f8:	bne	15608 <__assert_fail@plt+0x3fcc>
   155fc:	ldrb	r3, [r0, #5]
   15600:	cmp	r3, #0
   15604:	beq	1561c <__assert_fail@plt+0x3fe0>
   15608:	ldr	r1, [pc, #144]	; 156a0 <__assert_fail@plt+0x4064>
   1560c:	ldr	r0, [pc, #144]	; 156a4 <__assert_fail@plt+0x4068>
   15610:	cmp	r5, #9
   15614:	movne	r0, r1
   15618:	pop	{r4, r5, r6, pc}
   1561c:	ldrb	r3, [r4]
   15620:	ldr	r1, [pc, #128]	; 156a8 <__assert_fail@plt+0x406c>
   15624:	ldr	r0, [pc, #128]	; 156ac <__assert_fail@plt+0x4070>
   15628:	cmp	r3, #96	; 0x60
   1562c:	b	15614 <__assert_fail@plt+0x3fd8>
   15630:	cmp	r3, #71	; 0x47
   15634:	bne	15608 <__assert_fail@plt+0x3fcc>
   15638:	ldrb	r3, [r0, #1]
   1563c:	bic	r3, r3, #32
   15640:	cmp	r3, #66	; 0x42
   15644:	bne	15608 <__assert_fail@plt+0x3fcc>
   15648:	ldrb	r3, [r0, #2]
   1564c:	cmp	r3, #49	; 0x31
   15650:	bne	15608 <__assert_fail@plt+0x3fcc>
   15654:	ldrb	r3, [r0, #3]
   15658:	cmp	r3, #56	; 0x38
   1565c:	bne	15608 <__assert_fail@plt+0x3fcc>
   15660:	ldrb	r3, [r0, #4]
   15664:	cmp	r3, #48	; 0x30
   15668:	bne	15608 <__assert_fail@plt+0x3fcc>
   1566c:	ldrb	r3, [r0, #5]
   15670:	cmp	r3, #51	; 0x33
   15674:	bne	15608 <__assert_fail@plt+0x3fcc>
   15678:	ldrb	r3, [r0, #6]
   1567c:	cmp	r3, #48	; 0x30
   15680:	bne	15608 <__assert_fail@plt+0x3fcc>
   15684:	ldrb	r3, [r0, #7]
   15688:	cmp	r3, #0
   1568c:	bne	15608 <__assert_fail@plt+0x3fcc>
   15690:	ldrb	r3, [r4]
   15694:	ldr	r1, [pc, #20]	; 156b0 <__assert_fail@plt+0x4074>
   15698:	ldr	r0, [pc, #20]	; 156b4 <__assert_fail@plt+0x4078>
   1569c:	b	15628 <__assert_fail@plt+0x3fec>
   156a0:			; <UNDEFINED> instruction: 0x0001a3bf
   156a4:	andeq	r9, r1, r3, lsl #30
   156a8:	strdeq	r9, [r1], -r8
   156ac:	strdeq	r9, [r1], -r4
   156b0:	andeq	r9, r1, r0, lsl #30
   156b4:	strdeq	r9, [r1], -ip
   156b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156bc:	sub	sp, sp, #108	; 0x6c
   156c0:	mov	r8, r0
   156c4:	str	r3, [sp, #36]	; 0x24
   156c8:	mov	r5, r1
   156cc:	str	r2, [sp, #44]	; 0x2c
   156d0:	ldr	sl, [sp, #144]	; 0x90
   156d4:	bl	1139c <__ctype_get_mb_cur_max@plt>
   156d8:	ldr	r3, [sp, #148]	; 0x94
   156dc:	mov	r7, #0
   156e0:	str	r7, [sp, #48]	; 0x30
   156e4:	lsr	r6, r3, #1
   156e8:	and	r6, r6, #1
   156ec:	mov	r3, #1
   156f0:	str	r3, [sp, #72]	; 0x48
   156f4:	str	r7, [sp, #24]
   156f8:	str	r7, [sp, #32]
   156fc:	str	r7, [sp, #40]	; 0x28
   15700:	str	r7, [sp, #60]	; 0x3c
   15704:	str	r0, [sp, #76]	; 0x4c
   15708:	cmp	sl, #10
   1570c:	ldrls	pc, [pc, sl, lsl #2]
   15710:	b	1594c <__assert_fail@plt+0x4310>
   15714:	andeq	r5, r1, r0, asr #14
   15718:	ldrdeq	r6, [r1], -r4
   1571c:	andeq	r5, r1, r8, lsl r9
   15720:	andeq	r5, r1, r4, ror #18
   15724:	strdeq	r5, [r1], -r4
   15728:	andeq	r5, r1, ip, asr #14
   1572c:			; <UNDEFINED> instruction: 0x000163b4
   15730:	andeq	r5, r1, r0, asr r9
   15734:	andeq	r5, r1, r4, asr #16
   15738:	andeq	r5, r1, r4, asr #16
   1573c:	andeq	r5, r1, r4, asr #16
   15740:	mov	r6, #0
   15744:	mov	r4, #0
   15748:	b	15778 <__assert_fail@plt+0x413c>
   1574c:	cmp	r6, #0
   15750:	bne	15974 <__assert_fail@plt+0x4338>
   15754:	cmp	r5, #0
   15758:	movne	r3, #34	; 0x22
   1575c:	strbne	r3, [r8]
   15760:	mov	r3, #1
   15764:	str	r3, [sp, #24]
   15768:	str	r3, [sp, #32]
   1576c:	mov	r4, #1
   15770:	ldr	r3, [pc, #3172]	; 163dc <__assert_fail@plt+0x4da0>
   15774:	str	r3, [sp, #40]	; 0x28
   15778:	mov	r9, r5
   1577c:	mov	r3, #0
   15780:	str	r7, [sp, #68]	; 0x44
   15784:	str	r3, [sp, #28]
   15788:	ldr	r3, [sp, #36]	; 0x24
   1578c:	cmn	r3, #1
   15790:	bne	16320 <__assert_fail@plt+0x4ce4>
   15794:	ldr	r3, [sp, #44]	; 0x2c
   15798:	ldr	r2, [sp, #28]
   1579c:	ldrb	r3, [r3, r2]
   157a0:	adds	r3, r3, #0
   157a4:	movne	r3, #1
   157a8:	str	r3, [sp, #52]	; 0x34
   157ac:	ldr	r3, [sp, #52]	; 0x34
   157b0:	cmp	r3, #0
   157b4:	bne	1599c <__assert_fail@plt+0x4360>
   157b8:	sub	r2, sl, #2
   157bc:	clz	r2, r2
   157c0:	lsr	r2, r2, #5
   157c4:	and	r3, r6, r2
   157c8:	cmp	r4, #0
   157cc:	movne	r3, #0
   157d0:	andeq	r3, r3, #1
   157d4:	cmp	r3, #0
   157d8:	bne	15b64 <__assert_fail@plt+0x4528>
   157dc:	eor	r3, r6, #1
   157e0:	ands	r2, r2, r3
   157e4:	beq	16358 <__assert_fail@plt+0x4d1c>
   157e8:	ldr	r3, [sp, #68]	; 0x44
   157ec:	cmp	r3, #0
   157f0:	beq	16390 <__assert_fail@plt+0x4d54>
   157f4:	ldr	r3, [sp, #72]	; 0x48
   157f8:	cmp	r3, #0
   157fc:	beq	16334 <__assert_fail@plt+0x4cf8>
   15800:	ldr	r3, [sp, #160]	; 0xa0
   15804:	ldr	r2, [sp, #44]	; 0x2c
   15808:	str	r3, [sp, #16]
   1580c:	ldr	r3, [sp, #156]	; 0x9c
   15810:	ldr	r1, [sp, #60]	; 0x3c
   15814:	str	r3, [sp, #12]
   15818:	ldr	r3, [sp, #152]	; 0x98
   1581c:	str	r3, [sp, #8]
   15820:	ldr	r3, [sp, #148]	; 0x94
   15824:	str	r3, [sp, #4]
   15828:	mov	r3, #5
   1582c:	str	r3, [sp]
   15830:	ldr	r3, [sp, #36]	; 0x24
   15834:	mov	r0, r8
   15838:	bl	156b8 <__assert_fail@plt+0x407c>
   1583c:	mov	r4, r0
   15840:	b	16384 <__assert_fail@plt+0x4d48>
   15844:	cmp	sl, #10
   15848:	beq	158a4 <__assert_fail@plt+0x4268>
   1584c:	ldr	r4, [pc, #2956]	; 163e0 <__assert_fail@plt+0x4da4>
   15850:	mov	r2, #5
   15854:	mov	r1, r4
   15858:	mov	r0, #0
   1585c:	bl	11324 <dcgettext@plt>
   15860:	cmp	r0, r4
   15864:	str	r0, [sp, #156]	; 0x9c
   15868:	bne	15878 <__assert_fail@plt+0x423c>
   1586c:	mov	r1, sl
   15870:	bl	155a4 <__assert_fail@plt+0x3f68>
   15874:	str	r0, [sp, #156]	; 0x9c
   15878:	ldr	r4, [pc, #2916]	; 163e4 <__assert_fail@plt+0x4da8>
   1587c:	mov	r2, #5
   15880:	mov	r1, r4
   15884:	mov	r0, #0
   15888:	bl	11324 <dcgettext@plt>
   1588c:	cmp	r0, r4
   15890:	str	r0, [sp, #160]	; 0xa0
   15894:	bne	158a4 <__assert_fail@plt+0x4268>
   15898:	mov	r1, sl
   1589c:	bl	155a4 <__assert_fail@plt+0x3f68>
   158a0:	str	r0, [sp, #160]	; 0xa0
   158a4:	cmp	r6, #0
   158a8:	moveq	r4, r6
   158ac:	beq	158c4 <__assert_fail@plt+0x4288>
   158b0:	mov	r4, #0
   158b4:	b	158d4 <__assert_fail@plt+0x4298>
   158b8:	cmp	r5, r4
   158bc:	strbhi	r3, [r8, r4]
   158c0:	add	r4, r4, #1
   158c4:	ldr	r3, [sp, #156]	; 0x9c
   158c8:	ldrb	r3, [r3, r4]
   158cc:	cmp	r3, #0
   158d0:	bne	158b8 <__assert_fail@plt+0x427c>
   158d4:	ldr	r0, [sp, #160]	; 0xa0
   158d8:	bl	1148c <strlen@plt>
   158dc:	ldr	r3, [sp, #160]	; 0xa0
   158e0:	str	r3, [sp, #40]	; 0x28
   158e4:	mov	r3, #1
   158e8:	str	r3, [sp, #24]
   158ec:	str	r0, [sp, #32]
   158f0:	b	15778 <__assert_fail@plt+0x413c>
   158f4:	mov	r3, #1
   158f8:	cmp	r6, #0
   158fc:	streq	r3, [sp, #24]
   15900:	beq	15920 <__assert_fail@plt+0x42e4>
   15904:	str	r3, [sp, #32]
   15908:	ldr	r3, [pc, #2772]	; 163e4 <__assert_fail@plt+0x4da8>
   1590c:	mov	r4, #0
   15910:	str	r3, [sp, #40]	; 0x28
   15914:	b	15944 <__assert_fail@plt+0x4308>
   15918:	cmp	r6, #0
   1591c:	bne	1598c <__assert_fail@plt+0x4350>
   15920:	cmp	r5, #0
   15924:	movne	r3, #39	; 0x27
   15928:	strbne	r3, [r8]
   1592c:	mov	r3, #1
   15930:	str	r3, [sp, #32]
   15934:	mov	r6, #0
   15938:	ldr	r3, [pc, #2724]	; 163e4 <__assert_fail@plt+0x4da8>
   1593c:	mov	r4, #1
   15940:	str	r3, [sp, #40]	; 0x28
   15944:	mov	sl, #2
   15948:	b	15778 <__assert_fail@plt+0x413c>
   1594c:	bl	11600 <abort@plt>
   15950:	mov	r6, #0
   15954:	mov	r3, #1
   15958:	str	r3, [sp, #24]
   1595c:	mov	r4, r6
   15960:	b	15778 <__assert_fail@plt+0x413c>
   15964:	mov	r6, #1
   15968:	str	r6, [sp, #24]
   1596c:	str	r6, [sp, #32]
   15970:	b	15908 <__assert_fail@plt+0x42cc>
   15974:	mov	r3, #1
   15978:	str	r3, [sp, #32]
   1597c:	ldr	r3, [pc, #2648]	; 163dc <__assert_fail@plt+0x4da0>
   15980:	str	r6, [sp, #24]
   15984:	str	r3, [sp, #40]	; 0x28
   15988:	b	15744 <__assert_fail@plt+0x4108>
   1598c:	mov	r3, #1
   15990:	str	r3, [sp, #32]
   15994:	ldr	r3, [pc, #2632]	; 163e4 <__assert_fail@plt+0x4da8>
   15998:	b	15984 <__assert_fail@plt+0x4348>
   1599c:	ldr	r3, [sp, #32]
   159a0:	ldr	fp, [sp, #24]
   159a4:	cmp	sl, #2
   159a8:	moveq	fp, #0
   159ac:	andne	fp, fp, #1
   159b0:	adds	r5, r3, #0
   159b4:	movne	r5, #1
   159b8:	ands	r3, r5, fp
   159bc:	str	r3, [sp, #64]	; 0x40
   159c0:	beq	15a90 <__assert_fail@plt+0x4454>
   159c4:	ldr	r2, [sp, #32]
   159c8:	ldr	r3, [sp, #28]
   159cc:	add	r7, r3, r2
   159d0:	mov	r3, r2
   159d4:	ldr	r2, [sp, #36]	; 0x24
   159d8:	cmp	r3, #1
   159dc:	movls	r3, #0
   159e0:	movhi	r3, #1
   159e4:	cmn	r2, #1
   159e8:	movne	r3, #0
   159ec:	cmp	r3, #0
   159f0:	beq	15a00 <__assert_fail@plt+0x43c4>
   159f4:	ldr	r0, [sp, #44]	; 0x2c
   159f8:	bl	1148c <strlen@plt>
   159fc:	str	r0, [sp, #36]	; 0x24
   15a00:	ldr	r3, [sp, #36]	; 0x24
   15a04:	cmp	r3, r7
   15a08:	bcc	15a88 <__assert_fail@plt+0x444c>
   15a0c:	ldr	r3, [sp, #44]	; 0x2c
   15a10:	ldr	r0, [sp, #28]
   15a14:	ldr	r2, [sp, #32]
   15a18:	ldr	r1, [sp, #40]	; 0x28
   15a1c:	add	r0, r3, r0
   15a20:	bl	11300 <memcmp@plt>
   15a24:	cmp	r0, #0
   15a28:	bne	15a88 <__assert_fail@plt+0x444c>
   15a2c:	cmp	r6, #0
   15a30:	beq	15a90 <__assert_fail@plt+0x4454>
   15a34:	str	r6, [sp, #24]
   15a38:	ldr	r3, [sp, #24]
   15a3c:	ldr	r2, [sp, #44]	; 0x2c
   15a40:	cmp	sl, #2
   15a44:	movne	r3, #0
   15a48:	andeq	r3, r3, #1
   15a4c:	cmp	r3, #0
   15a50:	ldr	r3, [sp, #160]	; 0xa0
   15a54:	movne	sl, #4
   15a58:	str	r3, [sp, #16]
   15a5c:	ldr	r3, [sp, #156]	; 0x9c
   15a60:	str	sl, [sp]
   15a64:	str	r3, [sp, #12]
   15a68:	mov	r3, #0
   15a6c:	str	r3, [sp, #8]
   15a70:	ldr	r3, [sp, #148]	; 0x94
   15a74:	mov	r1, r9
   15a78:	bic	r3, r3, #2
   15a7c:	str	r3, [sp, #4]
   15a80:	ldr	r3, [sp, #36]	; 0x24
   15a84:	b	15834 <__assert_fail@plt+0x41f8>
   15a88:	mov	r3, #0
   15a8c:	str	r3, [sp, #64]	; 0x40
   15a90:	ldr	r2, [sp, #28]
   15a94:	ldr	r3, [sp, #44]	; 0x2c
   15a98:	add	r3, r3, r2
   15a9c:	str	r3, [sp, #80]	; 0x50
   15aa0:	ldr	r3, [sp, #44]	; 0x2c
   15aa4:	ldrb	r7, [r3, r2]
   15aa8:	cmp	r7, #58	; 0x3a
   15aac:	bhi	15c14 <__assert_fail@plt+0x45d8>
   15ab0:	cmp	r7, #43	; 0x2b
   15ab4:	bcs	15c68 <__assert_fail@plt+0x462c>
   15ab8:	cmp	r7, #32
   15abc:	beq	15cc0 <__assert_fail@plt+0x4684>
   15ac0:	bhi	15b6c <__assert_fail@plt+0x4530>
   15ac4:	cmp	r7, #9
   15ac8:	beq	15f74 <__assert_fail@plt+0x4938>
   15acc:	bhi	15b30 <__assert_fail@plt+0x44f4>
   15ad0:	cmp	r7, #7
   15ad4:	beq	16020 <__assert_fail@plt+0x49e4>
   15ad8:	bhi	15cdc <__assert_fail@plt+0x46a0>
   15adc:	cmp	r7, #0
   15ae0:	beq	15cf8 <__assert_fail@plt+0x46bc>
   15ae4:	ldr	r3, [sp, #76]	; 0x4c
   15ae8:	cmp	r3, #1
   15aec:	bne	16064 <__assert_fail@plt+0x4a28>
   15af0:	bl	11450 <__ctype_b_loc@plt>
   15af4:	sxth	r3, r7
   15af8:	lsl	r3, r3, #1
   15afc:	ldr	r2, [r0]
   15b00:	ldrh	r5, [r2, r3]
   15b04:	ldr	r3, [sp, #76]	; 0x4c
   15b08:	str	r3, [sp, #56]	; 0x38
   15b0c:	lsr	r5, r5, #14
   15b10:	and	r5, r5, #1
   15b14:	ldr	r3, [sp, #24]
   15b18:	eor	fp, r5, #1
   15b1c:	and	fp, fp, r3
   15b20:	ands	fp, fp, #255	; 0xff
   15b24:	beq	15eac <__assert_fail@plt+0x4870>
   15b28:	mov	r5, #0
   15b2c:	b	16110 <__assert_fail@plt+0x4ad4>
   15b30:	cmp	r7, #11
   15b34:	beq	15f7c <__assert_fail@plt+0x4940>
   15b38:	bcc	16018 <__assert_fail@plt+0x49dc>
   15b3c:	cmp	r7, #12
   15b40:	beq	16028 <__assert_fail@plt+0x49ec>
   15b44:	cmp	r7, #13
   15b48:	moveq	r3, #114	; 0x72
   15b4c:	bne	15ae4 <__assert_fail@plt+0x44a8>
   15b50:	cmp	sl, #2
   15b54:	movne	r2, #0
   15b58:	andeq	r2, r6, #1
   15b5c:	cmp	r2, #0
   15b60:	beq	15ce0 <__assert_fail@plt+0x46a4>
   15b64:	mov	sl, #2
   15b68:	b	15a38 <__assert_fail@plt+0x43fc>
   15b6c:	cmp	r7, #37	; 0x25
   15b70:	beq	15c68 <__assert_fail@plt+0x462c>
   15b74:	bhi	15b88 <__assert_fail@plt+0x454c>
   15b78:	cmp	r7, #35	; 0x23
   15b7c:	beq	15cb4 <__assert_fail@plt+0x4678>
   15b80:	mov	r5, #0
   15b84:	b	15cc4 <__assert_fail@plt+0x4688>
   15b88:	cmp	r7, #39	; 0x27
   15b8c:	bne	15b80 <__assert_fail@plt+0x4544>
   15b90:	cmp	sl, #2
   15b94:	ldrne	r5, [sp, #52]	; 0x34
   15b98:	movne	r3, r5
   15b9c:	strne	r3, [sp, #68]	; 0x44
   15ba0:	bne	15c6c <__assert_fail@plt+0x4630>
   15ba4:	cmp	r6, #0
   15ba8:	bne	15a38 <__assert_fail@plt+0x43fc>
   15bac:	ldr	r2, [sp, #60]	; 0x3c
   15bb0:	adds	r3, r9, #0
   15bb4:	movne	r3, #1
   15bb8:	cmp	r2, #0
   15bbc:	movne	r3, #0
   15bc0:	cmp	r3, #0
   15bc4:	strne	r9, [sp, #60]	; 0x3c
   15bc8:	movne	r9, #0
   15bcc:	bne	15bdc <__assert_fail@plt+0x45a0>
   15bd0:	cmp	r9, r4
   15bd4:	movhi	r3, #39	; 0x27
   15bd8:	strbhi	r3, [r8, r4]
   15bdc:	add	r3, r4, #1
   15be0:	cmp	r3, r9
   15be4:	movcc	r2, #92	; 0x5c
   15be8:	strbcc	r2, [r8, r3]
   15bec:	add	r3, r4, #2
   15bf0:	cmp	r3, r9
   15bf4:	ldr	r5, [sp, #52]	; 0x34
   15bf8:	movcc	r2, #39	; 0x27
   15bfc:	strbcc	r2, [r8, r3]
   15c00:	add	r4, r4, #3
   15c04:	mov	fp, r6
   15c08:	str	r5, [sp, #68]	; 0x44
   15c0c:	str	r6, [sp, #48]	; 0x30
   15c10:	b	15eac <__assert_fail@plt+0x4870>
   15c14:	cmp	r7, #94	; 0x5e
   15c18:	beq	15b80 <__assert_fail@plt+0x4544>
   15c1c:	bhi	15c74 <__assert_fail@plt+0x4638>
   15c20:	cmp	r7, #90	; 0x5a
   15c24:	bhi	15c5c <__assert_fail@plt+0x4620>
   15c28:	cmp	r7, #65	; 0x41
   15c2c:	bcs	15c68 <__assert_fail@plt+0x462c>
   15c30:	cmp	r7, #62	; 0x3e
   15c34:	bls	15b80 <__assert_fail@plt+0x4544>
   15c38:	cmp	r7, #63	; 0x3f
   15c3c:	bne	15ae4 <__assert_fail@plt+0x44a8>
   15c40:	cmp	sl, #2
   15c44:	beq	15de8 <__assert_fail@plt+0x47ac>
   15c48:	cmp	sl, #5
   15c4c:	beq	15df8 <__assert_fail@plt+0x47bc>
   15c50:	mov	fp, #0
   15c54:	mov	r5, fp
   15c58:	b	15eac <__assert_fail@plt+0x4870>
   15c5c:	cmp	r7, #92	; 0x5c
   15c60:	beq	15f84 <__assert_fail@plt+0x4948>
   15c64:	bls	15b80 <__assert_fail@plt+0x4544>
   15c68:	ldr	r5, [sp, #52]	; 0x34
   15c6c:	mov	fp, #0
   15c70:	b	15eac <__assert_fail@plt+0x4870>
   15c74:	cmp	r7, #122	; 0x7a
   15c78:	bhi	15c98 <__assert_fail@plt+0x465c>
   15c7c:	cmp	r7, #97	; 0x61
   15c80:	bcs	15c68 <__assert_fail@plt+0x462c>
   15c84:	cmp	r7, #95	; 0x5f
   15c88:	beq	15c68 <__assert_fail@plt+0x462c>
   15c8c:	cmp	r7, #96	; 0x60
   15c90:	bne	15ae4 <__assert_fail@plt+0x44a8>
   15c94:	b	15b80 <__assert_fail@plt+0x4544>
   15c98:	cmp	r7, #124	; 0x7c
   15c9c:	beq	15b80 <__assert_fail@plt+0x4544>
   15ca0:	bcc	16030 <__assert_fail@plt+0x49f4>
   15ca4:	cmp	r7, #125	; 0x7d
   15ca8:	beq	16030 <__assert_fail@plt+0x49f4>
   15cac:	cmp	r7, #126	; 0x7e
   15cb0:	bne	15ae4 <__assert_fail@plt+0x44a8>
   15cb4:	ldr	r3, [sp, #28]
   15cb8:	cmp	r3, #0
   15cbc:	bne	15df0 <__assert_fail@plt+0x47b4>
   15cc0:	ldr	r5, [sp, #52]	; 0x34
   15cc4:	cmp	sl, #2
   15cc8:	movne	fp, #0
   15ccc:	andeq	fp, r6, #1
   15cd0:	cmp	fp, #0
   15cd4:	beq	15eac <__assert_fail@plt+0x4870>
   15cd8:	b	15b64 <__assert_fail@plt+0x4528>
   15cdc:	mov	r3, #98	; 0x62
   15ce0:	ldr	r2, [sp, #24]
   15ce4:	cmp	r2, #0
   15ce8:	beq	15df0 <__assert_fail@plt+0x47b4>
   15cec:	mov	r7, r3
   15cf0:	mov	r5, #0
   15cf4:	b	15f04 <__assert_fail@plt+0x48c8>
   15cf8:	ldr	r3, [sp, #24]
   15cfc:	cmp	r3, #0
   15d00:	beq	15dcc <__assert_fail@plt+0x4790>
   15d04:	cmp	r6, #0
   15d08:	bne	15a34 <__assert_fail@plt+0x43f8>
   15d0c:	ldr	r3, [sp, #48]	; 0x30
   15d10:	eor	r2, r3, #1
   15d14:	cmp	sl, #2
   15d18:	movne	r2, #0
   15d1c:	andeq	r2, r2, #1
   15d20:	cmp	r2, #0
   15d24:	moveq	r3, r4
   15d28:	beq	15d60 <__assert_fail@plt+0x4724>
   15d2c:	cmp	r9, r4
   15d30:	movhi	r3, #39	; 0x27
   15d34:	strbhi	r3, [r8, r4]
   15d38:	add	r3, r4, #1
   15d3c:	cmp	r9, r3
   15d40:	movhi	r1, #36	; 0x24
   15d44:	strbhi	r1, [r8, r3]
   15d48:	add	r3, r4, #2
   15d4c:	cmp	r9, r3
   15d50:	movhi	r1, #39	; 0x27
   15d54:	strbhi	r1, [r8, r3]
   15d58:	add	r3, r4, #3
   15d5c:	str	r2, [sp, #48]	; 0x30
   15d60:	cmp	r9, r3
   15d64:	movhi	r2, #92	; 0x5c
   15d68:	strbhi	r2, [r8, r3]
   15d6c:	cmp	fp, #0
   15d70:	add	r4, r3, #1
   15d74:	beq	16304 <__assert_fail@plt+0x4cc8>
   15d78:	ldr	r2, [sp, #28]
   15d7c:	ldr	r1, [sp, #36]	; 0x24
   15d80:	add	r2, r2, #1
   15d84:	cmp	r1, r2
   15d88:	bls	15dc4 <__assert_fail@plt+0x4788>
   15d8c:	ldr	r1, [sp, #44]	; 0x2c
   15d90:	mov	r7, #48	; 0x30
   15d94:	ldrb	r2, [r1, r2]
   15d98:	sub	r2, r2, #48	; 0x30
   15d9c:	cmp	r2, #9
   15da0:	movhi	r5, r6
   15da4:	bhi	15eac <__assert_fail@plt+0x4870>
   15da8:	cmp	r9, r4
   15dac:	add	r2, r3, #2
   15db0:	strbhi	r7, [r8, r4]
   15db4:	cmp	r9, r2
   15db8:	add	r4, r3, #3
   15dbc:	movhi	r1, #48	; 0x30
   15dc0:	strbhi	r1, [r8, r2]
   15dc4:	mov	r5, r6
   15dc8:	b	1630c <__assert_fail@plt+0x4cd0>
   15dcc:	ldr	r3, [sp, #148]	; 0x94
   15dd0:	tst	r3, #1
   15dd4:	ldreq	r5, [sp, #24]
   15dd8:	beq	16318 <__assert_fail@plt+0x4cdc>
   15ddc:	ldr	r3, [sp, #28]
   15de0:	add	r3, r3, #1
   15de4:	b	15784 <__assert_fail@plt+0x4148>
   15de8:	cmp	r6, #0
   15dec:	bne	15a38 <__assert_fail@plt+0x43fc>
   15df0:	mov	r5, #0
   15df4:	b	15c6c <__assert_fail@plt+0x4630>
   15df8:	ldr	r3, [sp, #148]	; 0x94
   15dfc:	tst	r3, #4
   15e00:	beq	15df0 <__assert_fail@plt+0x47b4>
   15e04:	ldr	r3, [sp, #28]
   15e08:	add	r2, r3, #2
   15e0c:	ldr	r3, [sp, #36]	; 0x24
   15e10:	cmp	r3, r2
   15e14:	bls	15df0 <__assert_fail@plt+0x47b4>
   15e18:	ldr	r3, [sp, #44]	; 0x2c
   15e1c:	ldr	r1, [sp, #28]
   15e20:	add	r3, r3, r1
   15e24:	ldrb	r0, [r3, #1]
   15e28:	cmp	r0, #63	; 0x3f
   15e2c:	bne	15df0 <__assert_fail@plt+0x47b4>
   15e30:	ldr	r3, [sp, #44]	; 0x2c
   15e34:	ldrb	r1, [r3, r2]
   15e38:	sub	r3, r1, #33	; 0x21
   15e3c:	uxtb	r3, r3
   15e40:	cmp	r3, #29
   15e44:	bhi	16314 <__assert_fail@plt+0x4cd8>
   15e48:	mov	ip, #1
   15e4c:	ldr	r5, [pc, #1428]	; 163e8 <__assert_fail@plt+0x4dac>
   15e50:	ands	r5, r5, ip, lsl r3
   15e54:	beq	15c6c <__assert_fail@plt+0x4630>
   15e58:	cmp	r6, #0
   15e5c:	bne	15a38 <__assert_fail@plt+0x43fc>
   15e60:	add	r3, r4, #1
   15e64:	cmp	r9, r4
   15e68:	strbhi	r0, [r8, r4]
   15e6c:	cmp	r9, r3
   15e70:	movhi	r0, #34	; 0x22
   15e74:	strbhi	r0, [r8, r3]
   15e78:	add	r3, r4, #2
   15e7c:	cmp	r9, r3
   15e80:	movhi	r0, #34	; 0x22
   15e84:	strbhi	r0, [r8, r3]
   15e88:	add	r3, r4, #3
   15e8c:	cmp	r9, r3
   15e90:	add	r4, r4, #4
   15e94:	mov	r5, r6
   15e98:	mov	fp, r6
   15e9c:	mov	r7, r1
   15ea0:	movhi	r0, #63	; 0x3f
   15ea4:	strbhi	r0, [r8, r3]
   15ea8:	str	r2, [sp, #28]
   15eac:	ldr	r3, [sp, #24]
   15eb0:	eor	r3, r3, #1
   15eb4:	cmp	sl, #2
   15eb8:	orreq	r3, r3, #1
   15ebc:	eor	r3, r3, #1
   15ec0:	orr	r3, r6, r3
   15ec4:	tst	r3, #255	; 0xff
   15ec8:	beq	15ef8 <__assert_fail@plt+0x48bc>
   15ecc:	ldr	r3, [sp, #152]	; 0x98
   15ed0:	cmp	r3, #0
   15ed4:	beq	15ef8 <__assert_fail@plt+0x48bc>
   15ed8:	lsr	r2, r7, #5
   15edc:	ldr	r1, [sp, #152]	; 0x98
   15ee0:	uxtb	r2, r2
   15ee4:	and	r3, r7, #31
   15ee8:	ldr	r2, [r1, r2, lsl #2]
   15eec:	lsr	r3, r2, r3
   15ef0:	tst	r3, #1
   15ef4:	bne	15f04 <__assert_fail@plt+0x48c8>
   15ef8:	ldr	r3, [sp, #64]	; 0x40
   15efc:	cmp	r3, #0
   15f00:	beq	15f9c <__assert_fail@plt+0x4960>
   15f04:	cmp	r6, #0
   15f08:	bne	15a38 <__assert_fail@plt+0x43fc>
   15f0c:	ldr	r3, [sp, #48]	; 0x30
   15f10:	eor	r3, r3, #1
   15f14:	cmp	sl, #2
   15f18:	movne	r3, #0
   15f1c:	andeq	r3, r3, #1
   15f20:	cmp	r3, #0
   15f24:	beq	15f5c <__assert_fail@plt+0x4920>
   15f28:	cmp	r9, r4
   15f2c:	movhi	r2, #39	; 0x27
   15f30:	strbhi	r2, [r8, r4]
   15f34:	add	r2, r4, #1
   15f38:	cmp	r9, r2
   15f3c:	movhi	r1, #36	; 0x24
   15f40:	strbhi	r1, [r8, r2]
   15f44:	add	r2, r4, #2
   15f48:	cmp	r9, r2
   15f4c:	add	r4, r4, #3
   15f50:	movhi	r1, #39	; 0x27
   15f54:	strbhi	r1, [r8, r2]
   15f58:	str	r3, [sp, #48]	; 0x30
   15f5c:	cmp	r9, r4
   15f60:	movhi	r3, #92	; 0x5c
   15f64:	strbhi	r3, [r8, r4]
   15f68:	ldr	fp, [sp, #52]	; 0x34
   15f6c:	add	r4, r4, #1
   15f70:	b	15f9c <__assert_fail@plt+0x4960>
   15f74:	mov	r3, #116	; 0x74
   15f78:	b	15b50 <__assert_fail@plt+0x4514>
   15f7c:	mov	r3, #118	; 0x76
   15f80:	b	15ce0 <__assert_fail@plt+0x46a4>
   15f84:	cmp	sl, #2
   15f88:	bne	15ff8 <__assert_fail@plt+0x49bc>
   15f8c:	cmp	r6, #0
   15f90:	bne	15a38 <__assert_fail@plt+0x43fc>
   15f94:	mov	r5, r6
   15f98:	mov	fp, r6
   15f9c:	ldr	r3, [sp, #48]	; 0x30
   15fa0:	eor	fp, fp, #1
   15fa4:	and	fp, fp, r3
   15fa8:	tst	fp, #255	; 0xff
   15fac:	beq	15fd8 <__assert_fail@plt+0x499c>
   15fb0:	cmp	r9, r4
   15fb4:	movhi	r3, #39	; 0x27
   15fb8:	strbhi	r3, [r8, r4]
   15fbc:	add	r3, r4, #1
   15fc0:	cmp	r9, r3
   15fc4:	movhi	r2, #39	; 0x27
   15fc8:	add	r4, r4, #2
   15fcc:	strbhi	r2, [r8, r3]
   15fd0:	mov	r3, #0
   15fd4:	str	r3, [sp, #48]	; 0x30
   15fd8:	cmp	r9, r4
   15fdc:	strbhi	r7, [r8, r4]
   15fe0:	ldr	r3, [sp, #72]	; 0x48
   15fe4:	cmp	r5, #0
   15fe8:	moveq	r3, #0
   15fec:	add	r4, r4, #1
   15ff0:	str	r3, [sp, #72]	; 0x48
   15ff4:	b	15ddc <__assert_fail@plt+0x47a0>
   15ff8:	ldr	r3, [sp, #24]
   15ffc:	and	r3, r3, r6
   16000:	tst	r5, r3
   16004:	moveq	r3, r7
   16008:	beq	15b50 <__assert_fail@plt+0x4514>
   1600c:	mov	fp, #0
   16010:	mov	r5, fp
   16014:	b	15f9c <__assert_fail@plt+0x4960>
   16018:	mov	r3, #110	; 0x6e
   1601c:	b	15b50 <__assert_fail@plt+0x4514>
   16020:	mov	r3, #97	; 0x61
   16024:	b	15ce0 <__assert_fail@plt+0x46a4>
   16028:	mov	r3, #102	; 0x66
   1602c:	b	15ce0 <__assert_fail@plt+0x46a4>
   16030:	ldr	r3, [sp, #36]	; 0x24
   16034:	cmn	r3, #1
   16038:	bne	16058 <__assert_fail@plt+0x4a1c>
   1603c:	ldr	r3, [sp, #44]	; 0x2c
   16040:	ldrb	r3, [r3, #1]
   16044:	adds	r3, r3, #0
   16048:	movne	r3, #1
   1604c:	cmp	r3, #0
   16050:	bne	15df0 <__assert_fail@plt+0x47b4>
   16054:	b	15cb4 <__assert_fail@plt+0x4678>
   16058:	ldr	r3, [sp, #36]	; 0x24
   1605c:	subs	r3, r3, #1
   16060:	b	16048 <__assert_fail@plt+0x4a0c>
   16064:	mov	r3, #0
   16068:	str	r3, [sp, #96]	; 0x60
   1606c:	str	r3, [sp, #100]	; 0x64
   16070:	ldr	r3, [sp, #36]	; 0x24
   16074:	cmn	r3, #1
   16078:	bne	16088 <__assert_fail@plt+0x4a4c>
   1607c:	ldr	r0, [sp, #44]	; 0x2c
   16080:	bl	1148c <strlen@plt>
   16084:	str	r0, [sp, #36]	; 0x24
   16088:	ldr	r5, [sp, #52]	; 0x34
   1608c:	mov	r3, #0
   16090:	str	r3, [sp, #56]	; 0x38
   16094:	ldr	r3, [sp, #28]
   16098:	ldr	r2, [sp, #56]	; 0x38
   1609c:	ldr	r1, [sp, #36]	; 0x24
   160a0:	add	r2, r3, r2
   160a4:	ldr	r3, [sp, #44]	; 0x2c
   160a8:	add	r0, sp, #92	; 0x5c
   160ac:	add	fp, r3, r2
   160b0:	sub	r2, r1, r2
   160b4:	add	r3, sp, #96	; 0x60
   160b8:	mov	r1, fp
   160bc:	bl	1840c <__assert_fail@plt+0x6dd0>
   160c0:	subs	r2, r0, #0
   160c4:	beq	16104 <__assert_fail@plt+0x4ac8>
   160c8:	cmn	r2, #1
   160cc:	beq	162dc <__assert_fail@plt+0x4ca0>
   160d0:	cmn	r2, #2
   160d4:	bne	1624c <__assert_fail@plt+0x4c10>
   160d8:	ldr	r2, [sp, #56]	; 0x38
   160dc:	ldr	r3, [sp, #28]
   160e0:	add	r3, r3, r2
   160e4:	ldr	r2, [sp, #36]	; 0x24
   160e8:	cmp	r2, r3
   160ec:	bls	162dc <__assert_fail@plt+0x4ca0>
   160f0:	ldr	r3, [sp, #80]	; 0x50
   160f4:	ldr	r2, [sp, #56]	; 0x38
   160f8:	ldrb	r5, [r3, r2]
   160fc:	cmp	r5, #0
   16100:	bne	1623c <__assert_fail@plt+0x4c00>
   16104:	ldr	r3, [sp, #56]	; 0x38
   16108:	cmp	r3, #1
   1610c:	bls	15b14 <__assert_fail@plt+0x44d8>
   16110:	ldr	r2, [sp, #56]	; 0x38
   16114:	ldr	r3, [sp, #28]
   16118:	mov	fp, #0
   1611c:	add	r3, r3, r2
   16120:	ldr	r2, [sp, #24]
   16124:	str	r3, [sp, #52]	; 0x34
   16128:	eor	r3, r5, #1
   1612c:	and	r3, r3, r2
   16130:	mov	ip, #92	; 0x5c
   16134:	uxtb	r3, r3
   16138:	mov	r2, #39	; 0x27
   1613c:	cmp	r3, #0
   16140:	beq	162e4 <__assert_fail@plt+0x4ca8>
   16144:	cmp	r6, #0
   16148:	bne	15a34 <__assert_fail@plt+0x43f8>
   1614c:	ldr	r1, [sp, #48]	; 0x30
   16150:	eor	r1, r1, #1
   16154:	cmp	sl, #2
   16158:	movne	r1, #0
   1615c:	andeq	r1, r1, #1
   16160:	cmp	r1, #0
   16164:	beq	16194 <__assert_fail@plt+0x4b58>
   16168:	add	r0, r4, #1
   1616c:	cmp	r9, r4
   16170:	strbhi	r2, [r8, r4]
   16174:	cmp	r9, r0
   16178:	movhi	lr, #36	; 0x24
   1617c:	strbhi	lr, [r8, r0]
   16180:	add	r0, r4, #2
   16184:	add	r4, r4, #3
   16188:	cmp	r9, r0
   1618c:	strbhi	r2, [r8, r0]
   16190:	str	r1, [sp, #48]	; 0x30
   16194:	add	r0, r4, #1
   16198:	cmp	r9, r4
   1619c:	strbhi	ip, [r8, r4]
   161a0:	cmp	r9, r0
   161a4:	lsrhi	r1, r7, #6
   161a8:	addhi	r1, r1, #48	; 0x30
   161ac:	strbhi	r1, [r8, r0]
   161b0:	add	r0, r4, #2
   161b4:	cmp	r9, r0
   161b8:	lsrhi	r1, r7, #3
   161bc:	and	r7, r7, #7
   161c0:	andhi	r1, r1, #7
   161c4:	add	r4, r4, #3
   161c8:	add	r7, r7, #48	; 0x30
   161cc:	mov	fp, r3
   161d0:	addhi	r1, r1, #48	; 0x30
   161d4:	strbhi	r1, [r8, r0]
   161d8:	ldr	r1, [sp, #28]
   161dc:	ldr	r0, [sp, #52]	; 0x34
   161e0:	add	r1, r1, #1
   161e4:	cmp	r0, r1
   161e8:	bls	15f9c <__assert_fail@plt+0x4960>
   161ec:	ldr	lr, [sp, #48]	; 0x30
   161f0:	eor	r0, fp, #1
   161f4:	and	r0, r0, lr
   161f8:	tst	r0, #255	; 0xff
   161fc:	beq	16220 <__assert_fail@plt+0x4be4>
   16200:	add	r0, r4, #1
   16204:	cmp	r9, r4
   16208:	strbhi	r2, [r8, r4]
   1620c:	cmp	r9, r0
   16210:	add	r4, r4, #2
   16214:	strbhi	r2, [r8, r0]
   16218:	mov	r0, #0
   1621c:	str	r0, [sp, #48]	; 0x30
   16220:	ldr	r0, [sp, #44]	; 0x2c
   16224:	cmp	r9, r4
   16228:	strbhi	r7, [r8, r4]
   1622c:	str	r1, [sp, #28]
   16230:	add	r4, r4, #1
   16234:	ldrb	r7, [r0, r1]
   16238:	b	1613c <__assert_fail@plt+0x4b00>
   1623c:	ldr	r3, [sp, #56]	; 0x38
   16240:	add	r3, r3, #1
   16244:	str	r3, [sp, #56]	; 0x38
   16248:	b	160d8 <__assert_fail@plt+0x4a9c>
   1624c:	cmp	sl, #2
   16250:	movne	r3, #0
   16254:	andeq	r3, r6, #1
   16258:	cmp	r3, #0
   1625c:	movne	r1, #1
   16260:	bne	162bc <__assert_fail@plt+0x4c80>
   16264:	ldr	r0, [sp, #92]	; 0x5c
   16268:	str	r2, [sp, #84]	; 0x54
   1626c:	bl	11378 <iswprint@plt>
   16270:	ldr	r3, [sp, #56]	; 0x38
   16274:	ldr	r2, [sp, #84]	; 0x54
   16278:	add	r3, r3, r2
   1627c:	str	r3, [sp, #56]	; 0x38
   16280:	cmp	r0, #0
   16284:	add	r0, sp, #96	; 0x60
   16288:	moveq	r5, #0
   1628c:	bl	112e8 <mbsinit@plt>
   16290:	cmp	r0, #0
   16294:	beq	16094 <__assert_fail@plt+0x4a58>
   16298:	b	16104 <__assert_fail@plt+0x4ac8>
   1629c:	ldrb	r3, [fp, r1]
   162a0:	cmp	r3, #94	; 0x5e
   162a4:	beq	15b64 <__assert_fail@plt+0x4528>
   162a8:	bhi	162c8 <__assert_fail@plt+0x4c8c>
   162ac:	sub	r3, r3, #91	; 0x5b
   162b0:	cmp	r3, #1
   162b4:	bls	15b64 <__assert_fail@plt+0x4528>
   162b8:	add	r1, r1, #1
   162bc:	cmp	r1, r2
   162c0:	bne	1629c <__assert_fail@plt+0x4c60>
   162c4:	b	16264 <__assert_fail@plt+0x4c28>
   162c8:	cmp	r3, #96	; 0x60
   162cc:	beq	15b64 <__assert_fail@plt+0x4528>
   162d0:	cmp	r3, #124	; 0x7c
   162d4:	bne	162b8 <__assert_fail@plt+0x4c7c>
   162d8:	b	15b64 <__assert_fail@plt+0x4528>
   162dc:	mov	r5, #0
   162e0:	b	16104 <__assert_fail@plt+0x4ac8>
   162e4:	ldr	r1, [sp, #64]	; 0x40
   162e8:	cmp	r1, #0
   162ec:	beq	161d8 <__assert_fail@plt+0x4b9c>
   162f0:	cmp	r9, r4
   162f4:	strbhi	ip, [r8, r4]
   162f8:	str	r3, [sp, #64]	; 0x40
   162fc:	add	r4, r4, #1
   16300:	b	161d8 <__assert_fail@plt+0x4b9c>
   16304:	mov	r5, fp
   16308:	ldr	fp, [sp, #24]
   1630c:	mov	r7, #48	; 0x30
   16310:	b	15eac <__assert_fail@plt+0x4870>
   16314:	mov	r5, #0
   16318:	mov	fp, r5
   1631c:	b	15eac <__assert_fail@plt+0x4870>
   16320:	ldr	r3, [sp, #36]	; 0x24
   16324:	ldr	r2, [sp, #28]
   16328:	subs	r3, r3, r2
   1632c:	movne	r3, #1
   16330:	b	157a8 <__assert_fail@plt+0x416c>
   16334:	ldr	r3, [sp, #60]	; 0x3c
   16338:	clz	r7, r9
   1633c:	cmp	r3, #0
   16340:	lsr	r7, r7, #5
   16344:	moveq	r7, #0
   16348:	cmp	r7, #0
   1634c:	mov	r5, r3
   16350:	bne	15708 <__assert_fail@plt+0x40cc>
   16354:	ldr	r3, [sp, #68]	; 0x44
   16358:	ldr	r2, [sp, #40]	; 0x28
   1635c:	cmp	r2, #0
   16360:	moveq	r3, #0
   16364:	andne	r3, r3, #1
   16368:	cmp	r3, #0
   1636c:	movne	r3, r2
   16370:	subne	r2, r3, #1
   16374:	bne	163a4 <__assert_fail@plt+0x4d68>
   16378:	cmp	r9, r4
   1637c:	movhi	r3, #0
   16380:	strbhi	r3, [r8, r4]
   16384:	mov	r0, r4
   16388:	add	sp, sp, #108	; 0x6c
   1638c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16390:	mov	r3, r2
   16394:	b	16358 <__assert_fail@plt+0x4d1c>
   16398:	cmp	r9, r4
   1639c:	strbhi	r3, [r8, r4]
   163a0:	add	r4, r4, #1
   163a4:	ldrb	r3, [r2, #1]!
   163a8:	cmp	r3, #0
   163ac:	bne	16398 <__assert_fail@plt+0x4d5c>
   163b0:	b	16378 <__assert_fail@plt+0x4d3c>
   163b4:	ldr	r3, [pc, #32]	; 163dc <__assert_fail@plt+0x4da0>
   163b8:	mov	r6, #1
   163bc:	str	r6, [sp, #24]
   163c0:	str	r6, [sp, #32]
   163c4:	str	r3, [sp, #40]	; 0x28
   163c8:	mov	r4, #0
   163cc:	mov	sl, #5
   163d0:	b	15778 <__assert_fail@plt+0x413c>
   163d4:	mov	r6, #1
   163d8:	b	1596c <__assert_fail@plt+0x4330>
   163dc:	andeq	r9, r1, r3, lsl #30
   163e0:	andeq	r9, r1, r5, lsl #30
   163e4:			; <UNDEFINED> instruction: 0x0001a3bf
   163e8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   163ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163f0:	sub	sp, sp, #52	; 0x34
   163f4:	mov	r6, r0
   163f8:	mov	r5, r3
   163fc:	mov	r8, r1
   16400:	mov	r9, r2
   16404:	bl	114b0 <__errno_location@plt>
   16408:	ldr	r7, [pc, #380]	; 1658c <__assert_fail@plt+0x4f50>
   1640c:	cmn	r6, #-2147483647	; 0x80000001
   16410:	ldr	r4, [r7]
   16414:	ldr	r3, [r0]
   16418:	str	r0, [sp, #24]
   1641c:	str	r3, [sp, #32]
   16420:	movne	r3, #0
   16424:	moveq	r3, #1
   16428:	orrs	r3, r3, r6, lsr #31
   1642c:	beq	16434 <__assert_fail@plt+0x4df8>
   16430:	bl	11600 <abort@plt>
   16434:	ldr	r2, [r7, #4]
   16438:	cmp	r6, r2
   1643c:	blt	164ac <__assert_fail@plt+0x4e70>
   16440:	add	r1, sp, #48	; 0x30
   16444:	add	sl, r7, #8
   16448:	str	r2, [r1, #-4]!
   1644c:	cmp	r4, sl
   16450:	mov	r3, #8
   16454:	sub	r2, r6, r2
   16458:	movne	r0, r4
   1645c:	str	r3, [sp]
   16460:	add	r2, r2, #1
   16464:	mvn	r3, #-2147483648	; 0x80000000
   16468:	moveq	r0, #0
   1646c:	bl	178f8 <__assert_fail@plt+0x62bc>
   16470:	cmp	r4, sl
   16474:	ldr	r2, [sp, #44]	; 0x2c
   16478:	mov	fp, r0
   1647c:	str	r0, [r7]
   16480:	ldmeq	r4, {r0, r1}
   16484:	mov	r4, fp
   16488:	stmeq	fp, {r0, r1}
   1648c:	ldr	r0, [r7, #4]
   16490:	mov	r1, #0
   16494:	sub	r2, r2, r0
   16498:	add	r0, fp, r0, lsl #3
   1649c:	lsl	r2, r2, #3
   164a0:	bl	114d4 <memset@plt>
   164a4:	ldr	r3, [sp, #44]	; 0x2c
   164a8:	str	r3, [r7, #4]
   164ac:	ldr	r3, [r5, #4]
   164b0:	add	sl, r4, r6, lsl #3
   164b4:	orr	r3, r3, #1
   164b8:	str	r3, [sp, #28]
   164bc:	add	r3, r5, #8
   164c0:	str	r3, [sp, #36]	; 0x24
   164c4:	ldr	r3, [r5, #44]	; 0x2c
   164c8:	ldr	fp, [r4, r6, lsl #3]
   164cc:	ldr	r7, [sl, #4]
   164d0:	str	r3, [sp, #16]
   164d4:	ldr	r3, [r5, #40]	; 0x28
   164d8:	mov	r2, r8
   164dc:	str	r3, [sp, #12]
   164e0:	add	r3, r5, #8
   164e4:	str	r3, [sp, #8]
   164e8:	ldr	r3, [sp, #28]
   164ec:	mov	r1, fp
   164f0:	str	r3, [sp, #4]
   164f4:	ldr	r3, [r5]
   164f8:	mov	r0, r7
   164fc:	str	r3, [sp]
   16500:	mov	r3, r9
   16504:	bl	156b8 <__assert_fail@plt+0x407c>
   16508:	cmp	fp, r0
   1650c:	bhi	16574 <__assert_fail@plt+0x4f38>
   16510:	ldr	r3, [pc, #120]	; 16590 <__assert_fail@plt+0x4f54>
   16514:	add	fp, r0, #1
   16518:	cmp	r7, r3
   1651c:	str	fp, [r4, r6, lsl #3]
   16520:	beq	1652c <__assert_fail@plt+0x4ef0>
   16524:	mov	r0, r7
   16528:	bl	182f0 <__assert_fail@plt+0x6cb4>
   1652c:	mov	r0, fp
   16530:	bl	177b0 <__assert_fail@plt+0x6174>
   16534:	ldr	r3, [r5, #44]	; 0x2c
   16538:	mov	r2, r8
   1653c:	mov	r1, fp
   16540:	str	r0, [sl, #4]
   16544:	str	r3, [sp, #16]
   16548:	ldr	r3, [r5, #40]	; 0x28
   1654c:	mov	r7, r0
   16550:	str	r3, [sp, #12]
   16554:	add	r3, r5, #8
   16558:	str	r3, [sp, #8]
   1655c:	ldr	r3, [sp, #28]
   16560:	str	r3, [sp, #4]
   16564:	ldr	r3, [r5]
   16568:	str	r3, [sp]
   1656c:	mov	r3, r9
   16570:	bl	156b8 <__assert_fail@plt+0x407c>
   16574:	ldr	r3, [sp, #24]
   16578:	ldr	r2, [sp, #32]
   1657c:	mov	r0, r7
   16580:	str	r2, [r3]
   16584:	add	sp, sp, #52	; 0x34
   16588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1658c:	andeq	fp, r2, r0, ror r1
   16590:	andeq	fp, r2, r0, lsl r2
   16594:	push	{r4, r5, r6, lr}
   16598:	mov	r5, r0
   1659c:	bl	114b0 <__errno_location@plt>
   165a0:	cmp	r5, #0
   165a4:	mov	r1, #48	; 0x30
   165a8:	ldr	r6, [r0]
   165ac:	mov	r4, r0
   165b0:	ldr	r0, [pc, #12]	; 165c4 <__assert_fail@plt+0x4f88>
   165b4:	movne	r0, r5
   165b8:	bl	17b8c <__assert_fail@plt+0x6550>
   165bc:	str	r6, [r4]
   165c0:	pop	{r4, r5, r6, pc}
   165c4:	andeq	fp, r2, r0, lsl r3
   165c8:	ldr	r3, [pc, #12]	; 165dc <__assert_fail@plt+0x4fa0>
   165cc:	cmp	r0, #0
   165d0:	moveq	r0, r3
   165d4:	ldr	r0, [r0]
   165d8:	bx	lr
   165dc:	andeq	fp, r2, r0, lsl r3
   165e0:	ldr	r3, [pc, #12]	; 165f4 <__assert_fail@plt+0x4fb8>
   165e4:	cmp	r0, #0
   165e8:	moveq	r0, r3
   165ec:	str	r1, [r0]
   165f0:	bx	lr
   165f4:	andeq	fp, r2, r0, lsl r3
   165f8:	ldr	r3, [pc, #52]	; 16634 <__assert_fail@plt+0x4ff8>
   165fc:	cmp	r0, #0
   16600:	moveq	r0, r3
   16604:	add	r3, r0, #8
   16608:	push	{lr}		; (str lr, [sp, #-4]!)
   1660c:	lsr	lr, r1, #5
   16610:	and	r1, r1, #31
   16614:	ldr	ip, [r3, lr, lsl #2]
   16618:	lsr	r0, ip, r1
   1661c:	eor	r2, r2, r0
   16620:	and	r2, r2, #1
   16624:	and	r0, r0, #1
   16628:	eor	r1, ip, r2, lsl r1
   1662c:	str	r1, [r3, lr, lsl #2]
   16630:	pop	{pc}		; (ldr pc, [sp], #4)
   16634:	andeq	fp, r2, r0, lsl r3
   16638:	ldr	r3, [pc, #16]	; 16650 <__assert_fail@plt+0x5014>
   1663c:	cmp	r0, #0
   16640:	movne	r3, r0
   16644:	ldr	r0, [r3, #4]
   16648:	str	r1, [r3, #4]
   1664c:	bx	lr
   16650:	andeq	fp, r2, r0, lsl r3
   16654:	ldr	r3, [pc, #44]	; 16688 <__assert_fail@plt+0x504c>
   16658:	cmp	r0, #0
   1665c:	moveq	r0, r3
   16660:	mov	r3, #10
   16664:	cmp	r2, #0
   16668:	cmpne	r1, #0
   1666c:	str	r3, [r0]
   16670:	bne	1667c <__assert_fail@plt+0x5040>
   16674:	push	{r4, lr}
   16678:	bl	11600 <abort@plt>
   1667c:	str	r1, [r0, #40]	; 0x28
   16680:	str	r2, [r0, #44]	; 0x2c
   16684:	bx	lr
   16688:	andeq	fp, r2, r0, lsl r3
   1668c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16690:	sub	sp, sp, #24
   16694:	mov	sl, r3
   16698:	ldr	r4, [sp, #56]	; 0x38
   1669c:	ldr	r3, [pc, #100]	; 16708 <__assert_fail@plt+0x50cc>
   166a0:	cmp	r4, #0
   166a4:	moveq	r4, r3
   166a8:	mov	r7, r0
   166ac:	mov	r8, r1
   166b0:	mov	r9, r2
   166b4:	bl	114b0 <__errno_location@plt>
   166b8:	ldr	r3, [r4, #44]	; 0x2c
   166bc:	mov	r2, r9
   166c0:	mov	r1, r8
   166c4:	ldr	r6, [r0]
   166c8:	str	r3, [sp, #16]
   166cc:	ldr	r3, [r4, #40]	; 0x28
   166d0:	mov	r5, r0
   166d4:	str	r3, [sp, #12]
   166d8:	add	r3, r4, #8
   166dc:	str	r3, [sp, #8]
   166e0:	ldr	r3, [r4, #4]
   166e4:	mov	r0, r7
   166e8:	str	r3, [sp, #4]
   166ec:	ldr	r3, [r4]
   166f0:	str	r3, [sp]
   166f4:	mov	r3, sl
   166f8:	bl	156b8 <__assert_fail@plt+0x407c>
   166fc:	str	r6, [r5]
   16700:	add	sp, sp, #24
   16704:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16708:	andeq	fp, r2, r0, lsl r3
   1670c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16710:	cmp	r3, #0
   16714:	sub	sp, sp, #44	; 0x2c
   16718:	ldr	r4, [pc, #188]	; 167dc <__assert_fail@plt+0x51a0>
   1671c:	mov	r6, r2
   16720:	movne	r4, r3
   16724:	mov	sl, r1
   16728:	mov	r9, r0
   1672c:	bl	114b0 <__errno_location@plt>
   16730:	ldr	r5, [r4, #4]
   16734:	add	fp, r4, #8
   16738:	cmp	r6, #0
   1673c:	orreq	r5, r5, #1
   16740:	mov	r1, #0
   16744:	mov	r2, r9
   16748:	ldr	r3, [r0]
   1674c:	mov	r8, r0
   16750:	str	r3, [sp, #28]
   16754:	ldr	r3, [r4, #44]	; 0x2c
   16758:	mov	r0, r1
   1675c:	str	r3, [sp, #16]
   16760:	ldr	r3, [r4, #40]	; 0x28
   16764:	stmib	sp, {r5, fp}
   16768:	str	r3, [sp, #12]
   1676c:	ldr	r3, [r4]
   16770:	str	r3, [sp]
   16774:	mov	r3, sl
   16778:	bl	156b8 <__assert_fail@plt+0x407c>
   1677c:	add	r1, r0, #1
   16780:	mov	r7, r0
   16784:	mov	r0, r1
   16788:	str	r1, [sp, #36]	; 0x24
   1678c:	bl	177b0 <__assert_fail@plt+0x6174>
   16790:	ldr	r3, [r4, #44]	; 0x2c
   16794:	mov	r2, r9
   16798:	str	r3, [sp, #16]
   1679c:	ldr	r3, [r4, #40]	; 0x28
   167a0:	stmib	sp, {r5, fp}
   167a4:	str	r3, [sp, #12]
   167a8:	ldr	r3, [r4]
   167ac:	ldr	r1, [sp, #36]	; 0x24
   167b0:	str	r3, [sp]
   167b4:	mov	r3, sl
   167b8:	str	r0, [sp, #32]
   167bc:	bl	156b8 <__assert_fail@plt+0x407c>
   167c0:	ldr	r3, [sp, #28]
   167c4:	cmp	r6, #0
   167c8:	str	r3, [r8]
   167cc:	ldr	r0, [sp, #32]
   167d0:	strne	r7, [r6]
   167d4:	add	sp, sp, #44	; 0x2c
   167d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167dc:	andeq	fp, r2, r0, lsl r3
   167e0:	mov	r3, r2
   167e4:	mov	r2, #0
   167e8:	b	1670c <__assert_fail@plt+0x50d0>
   167ec:	push	{r4, r5, r6, r7, r8, lr}
   167f0:	mov	r6, #1
   167f4:	ldr	r4, [pc, #104]	; 16864 <__assert_fail@plt+0x5228>
   167f8:	ldr	r5, [r4]
   167fc:	add	r7, r5, #12
   16800:	ldr	r3, [r4, #4]
   16804:	add	r7, r7, #8
   16808:	cmp	r6, r3
   1680c:	blt	16854 <__assert_fail@plt+0x5218>
   16810:	ldr	r0, [r5, #4]
   16814:	ldr	r6, [pc, #76]	; 16868 <__assert_fail@plt+0x522c>
   16818:	cmp	r0, r6
   1681c:	beq	16830 <__assert_fail@plt+0x51f4>
   16820:	bl	182f0 <__assert_fail@plt+0x6cb4>
   16824:	mov	r3, #256	; 0x100
   16828:	str	r3, [r4, #8]
   1682c:	str	r6, [r4, #12]
   16830:	ldr	r6, [pc, #52]	; 1686c <__assert_fail@plt+0x5230>
   16834:	cmp	r5, r6
   16838:	beq	16848 <__assert_fail@plt+0x520c>
   1683c:	mov	r0, r5
   16840:	bl	182f0 <__assert_fail@plt+0x6cb4>
   16844:	str	r6, [r4]
   16848:	mov	r3, #1
   1684c:	str	r3, [r4, #4]
   16850:	pop	{r4, r5, r6, r7, r8, pc}
   16854:	ldr	r0, [r7, #-8]
   16858:	bl	182f0 <__assert_fail@plt+0x6cb4>
   1685c:	add	r6, r6, #1
   16860:	b	16800 <__assert_fail@plt+0x51c4>
   16864:	andeq	fp, r2, r0, ror r1
   16868:	andeq	fp, r2, r0, lsl r2
   1686c:	andeq	fp, r2, r8, ror r1
   16870:	ldr	r3, [pc, #4]	; 1687c <__assert_fail@plt+0x5240>
   16874:	mvn	r2, #0
   16878:	b	163ec <__assert_fail@plt+0x4db0>
   1687c:	andeq	fp, r2, r0, lsl r3
   16880:	ldr	r3, [pc]	; 16888 <__assert_fail@plt+0x524c>
   16884:	b	163ec <__assert_fail@plt+0x4db0>
   16888:	andeq	fp, r2, r0, lsl r3
   1688c:	mov	r1, r0
   16890:	mov	r0, #0
   16894:	b	16870 <__assert_fail@plt+0x5234>
   16898:	mov	r2, r1
   1689c:	mov	r1, r0
   168a0:	mov	r0, #0
   168a4:	b	16880 <__assert_fail@plt+0x5244>
   168a8:	push	{r4, r5, lr}
   168ac:	sub	sp, sp, #52	; 0x34
   168b0:	mov	r5, r2
   168b4:	mov	r4, r0
   168b8:	mov	r0, sp
   168bc:	bl	15574 <__assert_fail@plt+0x3f38>
   168c0:	mov	r3, sp
   168c4:	mvn	r2, #0
   168c8:	mov	r1, r5
   168cc:	mov	r0, r4
   168d0:	bl	163ec <__assert_fail@plt+0x4db0>
   168d4:	add	sp, sp, #52	; 0x34
   168d8:	pop	{r4, r5, pc}
   168dc:	push	{r4, r5, r6, lr}
   168e0:	sub	sp, sp, #48	; 0x30
   168e4:	mov	r5, r2
   168e8:	mov	r6, r3
   168ec:	mov	r4, r0
   168f0:	mov	r0, sp
   168f4:	bl	15574 <__assert_fail@plt+0x3f38>
   168f8:	mov	r3, sp
   168fc:	mov	r2, r6
   16900:	mov	r1, r5
   16904:	mov	r0, r4
   16908:	bl	163ec <__assert_fail@plt+0x4db0>
   1690c:	add	sp, sp, #48	; 0x30
   16910:	pop	{r4, r5, r6, pc}
   16914:	mov	r2, r1
   16918:	mov	r1, r0
   1691c:	mov	r0, #0
   16920:	b	168a8 <__assert_fail@plt+0x526c>
   16924:	mov	r3, r2
   16928:	mov	r2, r1
   1692c:	mov	r1, r0
   16930:	mov	r0, #0
   16934:	b	168dc <__assert_fail@plt+0x52a0>
   16938:	push	{r4, r5, r6, lr}
   1693c:	mov	r4, r0
   16940:	ldr	lr, [pc, #80]	; 16998 <__assert_fail@plt+0x535c>
   16944:	mov	r5, r1
   16948:	mov	r6, r2
   1694c:	ldm	lr!, {r0, r1, r2, r3}
   16950:	sub	sp, sp, #48	; 0x30
   16954:	mov	ip, sp
   16958:	stmia	ip!, {r0, r1, r2, r3}
   1695c:	ldm	lr!, {r0, r1, r2, r3}
   16960:	stmia	ip!, {r0, r1, r2, r3}
   16964:	ldm	lr, {r0, r1, r2, r3}
   16968:	stm	ip, {r0, r1, r2, r3}
   1696c:	mov	r1, r6
   16970:	mov	r2, #1
   16974:	mov	r0, sp
   16978:	bl	165f8 <__assert_fail@plt+0x4fbc>
   1697c:	mov	r3, sp
   16980:	mov	r2, r5
   16984:	mov	r1, r4
   16988:	mov	r0, #0
   1698c:	bl	163ec <__assert_fail@plt+0x4db0>
   16990:	add	sp, sp, #48	; 0x30
   16994:	pop	{r4, r5, r6, pc}
   16998:	andeq	fp, r2, r0, lsl r3
   1699c:	mov	r2, r1
   169a0:	mvn	r1, #0
   169a4:	b	16938 <__assert_fail@plt+0x52fc>
   169a8:	mov	r1, #58	; 0x3a
   169ac:	b	1699c <__assert_fail@plt+0x5360>
   169b0:	mov	r2, #58	; 0x3a
   169b4:	b	16938 <__assert_fail@plt+0x52fc>
   169b8:	push	{r4, r5, lr}
   169bc:	sub	sp, sp, #100	; 0x64
   169c0:	mov	r4, r0
   169c4:	mov	r0, sp
   169c8:	mov	r5, r2
   169cc:	bl	15574 <__assert_fail@plt+0x3f38>
   169d0:	mov	ip, sp
   169d4:	add	lr, sp, #48	; 0x30
   169d8:	ldm	ip!, {r0, r1, r2, r3}
   169dc:	stmia	lr!, {r0, r1, r2, r3}
   169e0:	ldm	ip!, {r0, r1, r2, r3}
   169e4:	stmia	lr!, {r0, r1, r2, r3}
   169e8:	ldm	ip, {r0, r1, r2, r3}
   169ec:	stm	lr, {r0, r1, r2, r3}
   169f0:	mov	r2, #1
   169f4:	mov	r1, #58	; 0x3a
   169f8:	add	r0, sp, #48	; 0x30
   169fc:	bl	165f8 <__assert_fail@plt+0x4fbc>
   16a00:	add	r3, sp, #48	; 0x30
   16a04:	mvn	r2, #0
   16a08:	mov	r1, r5
   16a0c:	mov	r0, r4
   16a10:	bl	163ec <__assert_fail@plt+0x4db0>
   16a14:	add	sp, sp, #100	; 0x64
   16a18:	pop	{r4, r5, pc}
   16a1c:	push	{r4, r5, r6, r7, lr}
   16a20:	mov	r4, r0
   16a24:	ldr	lr, [pc, #84]	; 16a80 <__assert_fail@plt+0x5444>
   16a28:	mov	r6, r1
   16a2c:	mov	r7, r2
   16a30:	mov	r5, r3
   16a34:	ldm	lr!, {r0, r1, r2, r3}
   16a38:	sub	sp, sp, #52	; 0x34
   16a3c:	mov	ip, sp
   16a40:	stmia	ip!, {r0, r1, r2, r3}
   16a44:	ldm	lr!, {r0, r1, r2, r3}
   16a48:	stmia	ip!, {r0, r1, r2, r3}
   16a4c:	ldm	lr, {r0, r1, r2, r3}
   16a50:	stm	ip, {r0, r1, r2, r3}
   16a54:	mov	r2, r7
   16a58:	mov	r1, r6
   16a5c:	mov	r0, sp
   16a60:	bl	16654 <__assert_fail@plt+0x5018>
   16a64:	mov	r3, sp
   16a68:	ldr	r2, [sp, #72]	; 0x48
   16a6c:	mov	r1, r5
   16a70:	mov	r0, r4
   16a74:	bl	163ec <__assert_fail@plt+0x4db0>
   16a78:	add	sp, sp, #52	; 0x34
   16a7c:	pop	{r4, r5, r6, r7, pc}
   16a80:	andeq	fp, r2, r0, lsl r3
   16a84:	mvn	ip, #0
   16a88:	push	{r0, r1, r2, lr}
   16a8c:	str	ip, [sp]
   16a90:	bl	16a1c <__assert_fail@plt+0x53e0>
   16a94:	add	sp, sp, #12
   16a98:	pop	{pc}		; (ldr pc, [sp], #4)
   16a9c:	mov	r3, r2
   16aa0:	mov	r2, r1
   16aa4:	mov	r1, r0
   16aa8:	mov	r0, #0
   16aac:	b	16a84 <__assert_fail@plt+0x5448>
   16ab0:	push	{r0, r1, r2, lr}
   16ab4:	str	r3, [sp]
   16ab8:	mov	r3, r2
   16abc:	mov	r2, r1
   16ac0:	mov	r1, r0
   16ac4:	mov	r0, #0
   16ac8:	bl	16a1c <__assert_fail@plt+0x53e0>
   16acc:	add	sp, sp, #12
   16ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad4:	ldr	r3, [pc]	; 16adc <__assert_fail@plt+0x54a0>
   16ad8:	b	163ec <__assert_fail@plt+0x4db0>
   16adc:	andeq	fp, r2, r0, lsl #3
   16ae0:	mov	r2, r1
   16ae4:	mov	r1, r0
   16ae8:	mov	r0, #0
   16aec:	b	16ad4 <__assert_fail@plt+0x5498>
   16af0:	mvn	r2, #0
   16af4:	b	16ad4 <__assert_fail@plt+0x5498>
   16af8:	mov	r1, r0
   16afc:	mov	r0, #0
   16b00:	b	16af0 <__assert_fail@plt+0x54b4>
   16b04:	push	{r4, lr}
   16b08:	sub	sp, sp, #104	; 0x68
   16b0c:	mov	r4, r0
   16b10:	mov	r1, sp
   16b14:	ldr	r0, [pc, #36]	; 16b40 <__assert_fail@plt+0x5504>
   16b18:	bl	18fb4 <__assert_fail@plt+0x7978>
   16b1c:	cmp	r0, #0
   16b20:	movne	r4, #0
   16b24:	ldrdeq	r2, [sp, #96]	; 0x60
   16b28:	strdeq	r2, [r4]
   16b2c:	ldrdeq	r2, [sp]
   16b30:	strdeq	r2, [r4, #8]
   16b34:	mov	r0, r4
   16b38:	add	sp, sp, #104	; 0x68
   16b3c:	pop	{r4, pc}
   16b40:	ldrdeq	sl, [r1], -r8
   16b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b48:	cmn	r0, #100	; 0x64
   16b4c:	sub	sp, sp, #4032	; 0xfc0
   16b50:	sub	sp, sp, #4
   16b54:	mov	r8, r1
   16b58:	mov	r9, r2
   16b5c:	beq	16b6c <__assert_fail@plt+0x5530>
   16b60:	ldrb	r3, [r1]
   16b64:	cmp	r3, #47	; 0x2f
   16b68:	bne	16b8c <__assert_fail@plt+0x5550>
   16b6c:	mov	r1, r9
   16b70:	mov	r0, r8
   16b74:	bl	171f8 <__assert_fail@plt+0x5bbc>
   16b78:	mov	r4, r0
   16b7c:	mov	r0, r4
   16b80:	add	sp, sp, #4032	; 0xfc0
   16b84:	add	sp, sp, #4
   16b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b8c:	mov	r2, r1
   16b90:	mov	r6, r0
   16b94:	mov	r1, r0
   16b98:	mov	r0, sp
   16b9c:	bl	17dc0 <__assert_fail@plt+0x6784>
   16ba0:	mov	r5, sp
   16ba4:	subs	fp, r0, #0
   16ba8:	beq	16c04 <__assert_fail@plt+0x55c8>
   16bac:	mov	r1, r9
   16bb0:	bl	171f8 <__assert_fail@plt+0x5bbc>
   16bb4:	mov	r4, r0
   16bb8:	bl	114b0 <__errno_location@plt>
   16bbc:	cmp	fp, r5
   16bc0:	mov	sl, r0
   16bc4:	ldr	r7, [r0]
   16bc8:	beq	16bd4 <__assert_fail@plt+0x5598>
   16bcc:	mov	r0, fp
   16bd0:	bl	182f0 <__assert_fail@plt+0x6cb4>
   16bd4:	cmn	r4, #1
   16bd8:	bne	16b7c <__assert_fail@plt+0x5540>
   16bdc:	cmp	r7, #20
   16be0:	bhi	16bf4 <__assert_fail@plt+0x55b8>
   16be4:	ldr	r3, [pc, #232]	; 16cd4 <__assert_fail@plt+0x5698>
   16be8:	mvn	r3, r3, lsr r7
   16bec:	tst	r3, #1
   16bf0:	beq	16c04 <__assert_fail@plt+0x55c8>
   16bf4:	cmp	r7, #38	; 0x26
   16bf8:	cmpne	r7, #95	; 0x5f
   16bfc:	strne	r7, [sl]
   16c00:	bne	16b7c <__assert_fail@plt+0x5540>
   16c04:	mov	r0, r5
   16c08:	bl	18520 <__assert_fail@plt+0x6ee4>
   16c0c:	cmp	r0, #0
   16c10:	beq	16c20 <__assert_fail@plt+0x55e4>
   16c14:	bl	114b0 <__errno_location@plt>
   16c18:	ldr	r0, [r0]
   16c1c:	bl	1845c <__assert_fail@plt+0x6e20>
   16c20:	cmp	r6, #0
   16c24:	blt	16c50 <__assert_fail@plt+0x5614>
   16c28:	ldr	r3, [sp]
   16c2c:	cmp	r6, r3
   16c30:	bne	16c50 <__assert_fail@plt+0x5614>
   16c34:	mov	r0, r5
   16c38:	bl	18590 <__assert_fail@plt+0x6f54>
   16c3c:	bl	114b0 <__errno_location@plt>
   16c40:	mov	r3, #9
   16c44:	str	r3, [r0]
   16c48:	mvn	r4, #0
   16c4c:	b	16b7c <__assert_fail@plt+0x5540>
   16c50:	mov	r0, r6
   16c54:	bl	11594 <fchdir@plt>
   16c58:	subs	r6, r0, #0
   16c5c:	beq	16c7c <__assert_fail@plt+0x5640>
   16c60:	bl	114b0 <__errno_location@plt>
   16c64:	ldr	r6, [r0]
   16c68:	mov	r4, r0
   16c6c:	mov	r0, r5
   16c70:	bl	18590 <__assert_fail@plt+0x6f54>
   16c74:	str	r6, [r4]
   16c78:	b	16c48 <__assert_fail@plt+0x560c>
   16c7c:	mov	r1, r9
   16c80:	mov	r0, r8
   16c84:	bl	171f8 <__assert_fail@plt+0x5bbc>
   16c88:	cmn	r0, #1
   16c8c:	mov	r4, r0
   16c90:	bne	16c9c <__assert_fail@plt+0x5660>
   16c94:	bl	114b0 <__errno_location@plt>
   16c98:	ldr	r6, [r0]
   16c9c:	mov	r0, r5
   16ca0:	bl	18574 <__assert_fail@plt+0x6f38>
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cb8 <__assert_fail@plt+0x567c>
   16cac:	bl	114b0 <__errno_location@plt>
   16cb0:	ldr	r0, [r0]
   16cb4:	bl	18498 <__assert_fail@plt+0x6e5c>
   16cb8:	mov	r0, r5
   16cbc:	bl	18590 <__assert_fail@plt+0x6f54>
   16cc0:	cmp	r6, #0
   16cc4:	beq	16b7c <__assert_fail@plt+0x5540>
   16cc8:	bl	114b0 <__errno_location@plt>
   16ccc:	str	r6, [r0]
   16cd0:	b	16b7c <__assert_fail@plt+0x5540>
   16cd4:	andseq	r2, r0, r6
   16cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cdc:	cmn	r0, #100	; 0x64
   16ce0:	sub	sp, sp, #4032	; 0xfc0
   16ce4:	sub	sp, sp, #4
   16ce8:	mov	r8, r1
   16cec:	mov	r9, r2
   16cf0:	beq	16d00 <__assert_fail@plt+0x56c4>
   16cf4:	ldrb	r3, [r1]
   16cf8:	cmp	r3, #47	; 0x2f
   16cfc:	bne	16d20 <__assert_fail@plt+0x56e4>
   16d00:	mov	r1, r9
   16d04:	mov	r0, r8
   16d08:	bl	17210 <__assert_fail@plt+0x5bd4>
   16d0c:	mov	r4, r0
   16d10:	mov	r0, r4
   16d14:	add	sp, sp, #4032	; 0xfc0
   16d18:	add	sp, sp, #4
   16d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d20:	mov	r2, r1
   16d24:	mov	r6, r0
   16d28:	mov	r1, r0
   16d2c:	mov	r0, sp
   16d30:	bl	17dc0 <__assert_fail@plt+0x6784>
   16d34:	mov	r5, sp
   16d38:	subs	fp, r0, #0
   16d3c:	beq	16d98 <__assert_fail@plt+0x575c>
   16d40:	mov	r1, r9
   16d44:	bl	17210 <__assert_fail@plt+0x5bd4>
   16d48:	mov	r4, r0
   16d4c:	bl	114b0 <__errno_location@plt>
   16d50:	cmp	fp, r5
   16d54:	mov	sl, r0
   16d58:	ldr	r7, [r0]
   16d5c:	beq	16d68 <__assert_fail@plt+0x572c>
   16d60:	mov	r0, fp
   16d64:	bl	182f0 <__assert_fail@plt+0x6cb4>
   16d68:	cmn	r4, #1
   16d6c:	bne	16d10 <__assert_fail@plt+0x56d4>
   16d70:	cmp	r7, #20
   16d74:	bhi	16d88 <__assert_fail@plt+0x574c>
   16d78:	ldr	r3, [pc, #232]	; 16e68 <__assert_fail@plt+0x582c>
   16d7c:	mvn	r3, r3, lsr r7
   16d80:	tst	r3, #1
   16d84:	beq	16d98 <__assert_fail@plt+0x575c>
   16d88:	cmp	r7, #38	; 0x26
   16d8c:	cmpne	r7, #95	; 0x5f
   16d90:	strne	r7, [sl]
   16d94:	bne	16d10 <__assert_fail@plt+0x56d4>
   16d98:	mov	r0, r5
   16d9c:	bl	18520 <__assert_fail@plt+0x6ee4>
   16da0:	cmp	r0, #0
   16da4:	beq	16db4 <__assert_fail@plt+0x5778>
   16da8:	bl	114b0 <__errno_location@plt>
   16dac:	ldr	r0, [r0]
   16db0:	bl	1845c <__assert_fail@plt+0x6e20>
   16db4:	cmp	r6, #0
   16db8:	blt	16de4 <__assert_fail@plt+0x57a8>
   16dbc:	ldr	r3, [sp]
   16dc0:	cmp	r6, r3
   16dc4:	bne	16de4 <__assert_fail@plt+0x57a8>
   16dc8:	mov	r0, r5
   16dcc:	bl	18590 <__assert_fail@plt+0x6f54>
   16dd0:	bl	114b0 <__errno_location@plt>
   16dd4:	mov	r3, #9
   16dd8:	str	r3, [r0]
   16ddc:	mvn	r4, #0
   16de0:	b	16d10 <__assert_fail@plt+0x56d4>
   16de4:	mov	r0, r6
   16de8:	bl	11594 <fchdir@plt>
   16dec:	subs	r6, r0, #0
   16df0:	beq	16e10 <__assert_fail@plt+0x57d4>
   16df4:	bl	114b0 <__errno_location@plt>
   16df8:	ldr	r6, [r0]
   16dfc:	mov	r4, r0
   16e00:	mov	r0, r5
   16e04:	bl	18590 <__assert_fail@plt+0x6f54>
   16e08:	str	r6, [r4]
   16e0c:	b	16ddc <__assert_fail@plt+0x57a0>
   16e10:	mov	r1, r9
   16e14:	mov	r0, r8
   16e18:	bl	17210 <__assert_fail@plt+0x5bd4>
   16e1c:	cmn	r0, #1
   16e20:	mov	r4, r0
   16e24:	bne	16e30 <__assert_fail@plt+0x57f4>
   16e28:	bl	114b0 <__errno_location@plt>
   16e2c:	ldr	r6, [r0]
   16e30:	mov	r0, r5
   16e34:	bl	18574 <__assert_fail@plt+0x6f38>
   16e38:	cmp	r0, #0
   16e3c:	beq	16e4c <__assert_fail@plt+0x5810>
   16e40:	bl	114b0 <__errno_location@plt>
   16e44:	ldr	r0, [r0]
   16e48:	bl	18498 <__assert_fail@plt+0x6e5c>
   16e4c:	mov	r0, r5
   16e50:	bl	18590 <__assert_fail@plt+0x6f54>
   16e54:	cmp	r6, #0
   16e58:	beq	16d10 <__assert_fail@plt+0x56d4>
   16e5c:	bl	114b0 <__errno_location@plt>
   16e60:	str	r6, [r0]
   16e64:	b	16d10 <__assert_fail@plt+0x56d4>
   16e68:	andseq	r2, r0, r6
   16e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e70:	cmn	r0, #100	; 0x64
   16e74:	sub	sp, sp, #4032	; 0xfc0
   16e78:	sub	sp, sp, #4
   16e7c:	mov	r8, r1
   16e80:	mov	r9, r2
   16e84:	beq	16e94 <__assert_fail@plt+0x5858>
   16e88:	ldrb	r3, [r1]
   16e8c:	cmp	r3, #47	; 0x2f
   16e90:	bne	16eb4 <__assert_fail@plt+0x5878>
   16e94:	mov	r1, r9
   16e98:	mov	r0, r8
   16e9c:	bl	11510 <setfilecon@plt>
   16ea0:	mov	r4, r0
   16ea4:	mov	r0, r4
   16ea8:	add	sp, sp, #4032	; 0xfc0
   16eac:	add	sp, sp, #4
   16eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eb4:	mov	r2, r1
   16eb8:	mov	r6, r0
   16ebc:	mov	r1, r0
   16ec0:	mov	r0, sp
   16ec4:	bl	17dc0 <__assert_fail@plt+0x6784>
   16ec8:	mov	r5, sp
   16ecc:	subs	fp, r0, #0
   16ed0:	beq	16f2c <__assert_fail@plt+0x58f0>
   16ed4:	mov	r1, r9
   16ed8:	bl	11510 <setfilecon@plt>
   16edc:	mov	r4, r0
   16ee0:	bl	114b0 <__errno_location@plt>
   16ee4:	cmp	fp, r5
   16ee8:	mov	sl, r0
   16eec:	ldr	r7, [r0]
   16ef0:	beq	16efc <__assert_fail@plt+0x58c0>
   16ef4:	mov	r0, fp
   16ef8:	bl	182f0 <__assert_fail@plt+0x6cb4>
   16efc:	cmn	r4, #1
   16f00:	bne	16ea4 <__assert_fail@plt+0x5868>
   16f04:	cmp	r7, #20
   16f08:	bhi	16f1c <__assert_fail@plt+0x58e0>
   16f0c:	ldr	r3, [pc, #232]	; 16ffc <__assert_fail@plt+0x59c0>
   16f10:	mvn	r3, r3, lsr r7
   16f14:	tst	r3, #1
   16f18:	beq	16f2c <__assert_fail@plt+0x58f0>
   16f1c:	cmp	r7, #38	; 0x26
   16f20:	cmpne	r7, #95	; 0x5f
   16f24:	strne	r7, [sl]
   16f28:	bne	16ea4 <__assert_fail@plt+0x5868>
   16f2c:	mov	r0, r5
   16f30:	bl	18520 <__assert_fail@plt+0x6ee4>
   16f34:	cmp	r0, #0
   16f38:	beq	16f48 <__assert_fail@plt+0x590c>
   16f3c:	bl	114b0 <__errno_location@plt>
   16f40:	ldr	r0, [r0]
   16f44:	bl	1845c <__assert_fail@plt+0x6e20>
   16f48:	cmp	r6, #0
   16f4c:	blt	16f78 <__assert_fail@plt+0x593c>
   16f50:	ldr	r3, [sp]
   16f54:	cmp	r6, r3
   16f58:	bne	16f78 <__assert_fail@plt+0x593c>
   16f5c:	mov	r0, r5
   16f60:	bl	18590 <__assert_fail@plt+0x6f54>
   16f64:	bl	114b0 <__errno_location@plt>
   16f68:	mov	r3, #9
   16f6c:	str	r3, [r0]
   16f70:	mvn	r4, #0
   16f74:	b	16ea4 <__assert_fail@plt+0x5868>
   16f78:	mov	r0, r6
   16f7c:	bl	11594 <fchdir@plt>
   16f80:	subs	r6, r0, #0
   16f84:	beq	16fa4 <__assert_fail@plt+0x5968>
   16f88:	bl	114b0 <__errno_location@plt>
   16f8c:	ldr	r6, [r0]
   16f90:	mov	r4, r0
   16f94:	mov	r0, r5
   16f98:	bl	18590 <__assert_fail@plt+0x6f54>
   16f9c:	str	r6, [r4]
   16fa0:	b	16f70 <__assert_fail@plt+0x5934>
   16fa4:	mov	r1, r9
   16fa8:	mov	r0, r8
   16fac:	bl	11510 <setfilecon@plt>
   16fb0:	cmn	r0, #1
   16fb4:	mov	r4, r0
   16fb8:	bne	16fc4 <__assert_fail@plt+0x5988>
   16fbc:	bl	114b0 <__errno_location@plt>
   16fc0:	ldr	r6, [r0]
   16fc4:	mov	r0, r5
   16fc8:	bl	18574 <__assert_fail@plt+0x6f38>
   16fcc:	cmp	r0, #0
   16fd0:	beq	16fe0 <__assert_fail@plt+0x59a4>
   16fd4:	bl	114b0 <__errno_location@plt>
   16fd8:	ldr	r0, [r0]
   16fdc:	bl	18498 <__assert_fail@plt+0x6e5c>
   16fe0:	mov	r0, r5
   16fe4:	bl	18590 <__assert_fail@plt+0x6f54>
   16fe8:	cmp	r6, #0
   16fec:	beq	16ea4 <__assert_fail@plt+0x5868>
   16ff0:	bl	114b0 <__errno_location@plt>
   16ff4:	str	r6, [r0]
   16ff8:	b	16ea4 <__assert_fail@plt+0x5868>
   16ffc:	andseq	r2, r0, r6
   17000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17004:	cmn	r0, #100	; 0x64
   17008:	sub	sp, sp, #4032	; 0xfc0
   1700c:	sub	sp, sp, #4
   17010:	mov	r8, r1
   17014:	mov	r9, r2
   17018:	beq	17028 <__assert_fail@plt+0x59ec>
   1701c:	ldrb	r3, [r1]
   17020:	cmp	r3, #47	; 0x2f
   17024:	bne	17048 <__assert_fail@plt+0x5a0c>
   17028:	mov	r1, r9
   1702c:	mov	r0, r8
   17030:	bl	112ac <lsetfilecon@plt>
   17034:	mov	r4, r0
   17038:	mov	r0, r4
   1703c:	add	sp, sp, #4032	; 0xfc0
   17040:	add	sp, sp, #4
   17044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17048:	mov	r2, r1
   1704c:	mov	r6, r0
   17050:	mov	r1, r0
   17054:	mov	r0, sp
   17058:	bl	17dc0 <__assert_fail@plt+0x6784>
   1705c:	mov	r5, sp
   17060:	subs	fp, r0, #0
   17064:	beq	170c0 <__assert_fail@plt+0x5a84>
   17068:	mov	r1, r9
   1706c:	bl	112ac <lsetfilecon@plt>
   17070:	mov	r4, r0
   17074:	bl	114b0 <__errno_location@plt>
   17078:	cmp	fp, r5
   1707c:	mov	sl, r0
   17080:	ldr	r7, [r0]
   17084:	beq	17090 <__assert_fail@plt+0x5a54>
   17088:	mov	r0, fp
   1708c:	bl	182f0 <__assert_fail@plt+0x6cb4>
   17090:	cmn	r4, #1
   17094:	bne	17038 <__assert_fail@plt+0x59fc>
   17098:	cmp	r7, #20
   1709c:	bhi	170b0 <__assert_fail@plt+0x5a74>
   170a0:	ldr	r3, [pc, #232]	; 17190 <__assert_fail@plt+0x5b54>
   170a4:	mvn	r3, r3, lsr r7
   170a8:	tst	r3, #1
   170ac:	beq	170c0 <__assert_fail@plt+0x5a84>
   170b0:	cmp	r7, #38	; 0x26
   170b4:	cmpne	r7, #95	; 0x5f
   170b8:	strne	r7, [sl]
   170bc:	bne	17038 <__assert_fail@plt+0x59fc>
   170c0:	mov	r0, r5
   170c4:	bl	18520 <__assert_fail@plt+0x6ee4>
   170c8:	cmp	r0, #0
   170cc:	beq	170dc <__assert_fail@plt+0x5aa0>
   170d0:	bl	114b0 <__errno_location@plt>
   170d4:	ldr	r0, [r0]
   170d8:	bl	1845c <__assert_fail@plt+0x6e20>
   170dc:	cmp	r6, #0
   170e0:	blt	1710c <__assert_fail@plt+0x5ad0>
   170e4:	ldr	r3, [sp]
   170e8:	cmp	r6, r3
   170ec:	bne	1710c <__assert_fail@plt+0x5ad0>
   170f0:	mov	r0, r5
   170f4:	bl	18590 <__assert_fail@plt+0x6f54>
   170f8:	bl	114b0 <__errno_location@plt>
   170fc:	mov	r3, #9
   17100:	str	r3, [r0]
   17104:	mvn	r4, #0
   17108:	b	17038 <__assert_fail@plt+0x59fc>
   1710c:	mov	r0, r6
   17110:	bl	11594 <fchdir@plt>
   17114:	subs	r6, r0, #0
   17118:	beq	17138 <__assert_fail@plt+0x5afc>
   1711c:	bl	114b0 <__errno_location@plt>
   17120:	ldr	r6, [r0]
   17124:	mov	r4, r0
   17128:	mov	r0, r5
   1712c:	bl	18590 <__assert_fail@plt+0x6f54>
   17130:	str	r6, [r4]
   17134:	b	17104 <__assert_fail@plt+0x5ac8>
   17138:	mov	r1, r9
   1713c:	mov	r0, r8
   17140:	bl	112ac <lsetfilecon@plt>
   17144:	cmn	r0, #1
   17148:	mov	r4, r0
   1714c:	bne	17158 <__assert_fail@plt+0x5b1c>
   17150:	bl	114b0 <__errno_location@plt>
   17154:	ldr	r6, [r0]
   17158:	mov	r0, r5
   1715c:	bl	18574 <__assert_fail@plt+0x6f38>
   17160:	cmp	r0, #0
   17164:	beq	17174 <__assert_fail@plt+0x5b38>
   17168:	bl	114b0 <__errno_location@plt>
   1716c:	ldr	r0, [r0]
   17170:	bl	18498 <__assert_fail@plt+0x6e5c>
   17174:	mov	r0, r5
   17178:	bl	18590 <__assert_fail@plt+0x6f54>
   1717c:	cmp	r6, #0
   17180:	beq	17038 <__assert_fail@plt+0x59fc>
   17184:	bl	114b0 <__errno_location@plt>
   17188:	str	r6, [r0]
   1718c:	b	17038 <__assert_fail@plt+0x59fc>
   17190:	andseq	r2, r0, r6
   17194:	push	{r4, r5, r6, r7, r8, lr}
   17198:	subs	r4, r0, #0
   1719c:	bne	171b8 <__assert_fail@plt+0x5b7c>
   171a0:	bl	114b0 <__errno_location@plt>
   171a4:	mov	r3, #95	; 0x5f
   171a8:	mvn	r4, #0
   171ac:	str	r3, [r0]
   171b0:	mov	r0, r4
   171b4:	pop	{r4, r5, r6, r7, r8, pc}
   171b8:	cmp	r4, #10
   171bc:	bne	171b0 <__assert_fail@plt+0x5b74>
   171c0:	ldr	r6, [r1]
   171c4:	mov	r5, r1
   171c8:	mov	r0, r6
   171cc:	ldr	r1, [pc, #32]	; 171f4 <__assert_fail@plt+0x5bb8>
   171d0:	bl	11294 <strcmp@plt>
   171d4:	subs	r7, r0, #0
   171d8:	bne	171b0 <__assert_fail@plt+0x5b74>
   171dc:	mov	r0, r6
   171e0:	bl	115ac <freecon@plt>
   171e4:	str	r7, [r5]
   171e8:	bl	114b0 <__errno_location@plt>
   171ec:	mov	r3, #61	; 0x3d
   171f0:	b	171a8 <__assert_fail@plt+0x5b6c>
   171f4:	andeq	r9, r1, r3, asr pc
   171f8:	push	{r4, lr}
   171fc:	mov	r4, r1
   17200:	bl	11480 <getfilecon@plt>
   17204:	mov	r1, r4
   17208:	pop	{r4, lr}
   1720c:	b	17194 <__assert_fail@plt+0x5b58>
   17210:	push	{r4, lr}
   17214:	mov	r4, r1
   17218:	bl	113fc <lgetfilecon@plt>
   1721c:	mov	r1, r4
   17220:	pop	{r4, lr}
   17224:	b	17194 <__assert_fail@plt+0x5b58>
   17228:	push	{r4, lr}
   1722c:	mov	r4, r1
   17230:	bl	11348 <fgetfilecon@plt>
   17234:	mov	r1, r4
   17238:	pop	{r4, lr}
   1723c:	b	17194 <__assert_fail@plt+0x5b58>
   17240:	cmp	r0, #2
   17244:	push	{r4, r5, r6, r7, r8, lr}
   17248:	mov	r4, r0
   1724c:	bhi	17274 <__assert_fail@plt+0x5c38>
   17250:	bl	185b4 <__assert_fail@plt+0x6f78>
   17254:	mov	r6, r0
   17258:	bl	114b0 <__errno_location@plt>
   1725c:	ldr	r7, [r0]
   17260:	mov	r5, r0
   17264:	mov	r0, r4
   17268:	mov	r4, r6
   1726c:	bl	1160c <close@plt>
   17270:	str	r7, [r5]
   17274:	mov	r0, r4
   17278:	pop	{r4, r5, r6, r7, r8, pc}
   1727c:	push	{r4, r5, r6, lr}
   17280:	sub	sp, sp, #32
   17284:	cmp	r1, #0
   17288:	mov	r5, r0
   1728c:	ldr	r4, [sp, #48]	; 0x30
   17290:	ldr	r6, [sp, #52]	; 0x34
   17294:	beq	17348 <__assert_fail@plt+0x5d0c>
   17298:	stm	sp, {r2, r3}
   1729c:	mov	r3, r1
   172a0:	ldr	r2, [pc, #860]	; 17604 <__assert_fail@plt+0x5fc8>
   172a4:	mov	r1, #1
   172a8:	bl	114f8 <__fprintf_chk@plt>
   172ac:	mov	r2, #5
   172b0:	ldr	r1, [pc, #848]	; 17608 <__assert_fail@plt+0x5fcc>
   172b4:	mov	r0, #0
   172b8:	bl	11324 <dcgettext@plt>
   172bc:	ldr	r3, [pc, #840]	; 1760c <__assert_fail@plt+0x5fd0>
   172c0:	ldr	r2, [pc, #840]	; 17610 <__assert_fail@plt+0x5fd4>
   172c4:	str	r3, [sp]
   172c8:	mov	r1, #1
   172cc:	mov	r3, r0
   172d0:	mov	r0, r5
   172d4:	bl	114f8 <__fprintf_chk@plt>
   172d8:	mov	r1, r5
   172dc:	mov	r0, #10
   172e0:	bl	1130c <fputc_unlocked@plt>
   172e4:	mov	r2, #5
   172e8:	ldr	r1, [pc, #804]	; 17614 <__assert_fail@plt+0x5fd8>
   172ec:	mov	r0, #0
   172f0:	bl	11324 <dcgettext@plt>
   172f4:	mov	r1, #1
   172f8:	ldr	r3, [pc, #792]	; 17618 <__assert_fail@plt+0x5fdc>
   172fc:	mov	r2, r0
   17300:	mov	r0, r5
   17304:	bl	114f8 <__fprintf_chk@plt>
   17308:	mov	r1, r5
   1730c:	mov	r0, #10
   17310:	bl	1130c <fputc_unlocked@plt>
   17314:	cmp	r6, #9
   17318:	ldrls	pc, [pc, r6, lsl #2]
   1731c:	b	175f8 <__assert_fail@plt+0x5fbc>
   17320:	andeq	r7, r1, r8, lsr r4
   17324:	andeq	r7, r1, r0, ror #6
   17328:	andeq	r7, r1, ip, lsl #7
   1732c:	andeq	r7, r1, r0, asr #7
   17330:	strdeq	r7, [r1], -ip
   17334:	andeq	r7, r1, r0, asr #8
   17338:	andeq	r7, r1, r8, lsl #9
   1733c:	ldrdeq	r7, [r1], -r8
   17340:	andeq	r7, r1, r0, lsr r5
   17344:	muleq	r1, r0, r5
   17348:	str	r3, [sp]
   1734c:	mov	r1, #1
   17350:	mov	r3, r2
   17354:	ldr	r2, [pc, #704]	; 1761c <__assert_fail@plt+0x5fe0>
   17358:	bl	114f8 <__fprintf_chk@plt>
   1735c:	b	172ac <__assert_fail@plt+0x5c70>
   17360:	mov	r2, #5
   17364:	ldr	r1, [pc, #692]	; 17620 <__assert_fail@plt+0x5fe4>
   17368:	mov	r0, #0
   1736c:	bl	11324 <dcgettext@plt>
   17370:	ldr	r3, [r4]
   17374:	mov	r1, #1
   17378:	mov	r2, r0
   1737c:	mov	r0, r5
   17380:	add	sp, sp, #32
   17384:	pop	{r4, r5, r6, lr}
   17388:	b	114f8 <__fprintf_chk@plt>
   1738c:	mov	r2, #5
   17390:	ldr	r1, [pc, #652]	; 17624 <__assert_fail@plt+0x5fe8>
   17394:	mov	r0, #0
   17398:	bl	11324 <dcgettext@plt>
   1739c:	ldr	r3, [r4, #4]
   173a0:	mov	r1, #1
   173a4:	str	r3, [sp, #48]	; 0x30
   173a8:	ldr	r3, [r4]
   173ac:	mov	r2, r0
   173b0:	mov	r0, r5
   173b4:	add	sp, sp, #32
   173b8:	pop	{r4, r5, r6, lr}
   173bc:	b	114f8 <__fprintf_chk@plt>
   173c0:	mov	r2, #5
   173c4:	ldr	r1, [pc, #604]	; 17628 <__assert_fail@plt+0x5fec>
   173c8:	mov	r0, #0
   173cc:	bl	11324 <dcgettext@plt>
   173d0:	ldr	r3, [r4, #8]
   173d4:	mov	r1, #1
   173d8:	str	r3, [sp, #52]	; 0x34
   173dc:	ldr	r3, [r4, #4]
   173e0:	str	r3, [sp, #48]	; 0x30
   173e4:	ldr	r3, [r4]
   173e8:	mov	r2, r0
   173ec:	mov	r0, r5
   173f0:	add	sp, sp, #32
   173f4:	pop	{r4, r5, r6, lr}
   173f8:	b	114f8 <__fprintf_chk@plt>
   173fc:	mov	r2, #5
   17400:	ldr	r1, [pc, #548]	; 1762c <__assert_fail@plt+0x5ff0>
   17404:	mov	r0, #0
   17408:	bl	11324 <dcgettext@plt>
   1740c:	ldr	r3, [r4, #12]
   17410:	mov	r1, #1
   17414:	str	r3, [sp, #8]
   17418:	ldr	r3, [r4, #8]
   1741c:	str	r3, [sp, #4]
   17420:	ldr	r3, [r4, #4]
   17424:	str	r3, [sp]
   17428:	ldr	r3, [r4]
   1742c:	mov	r2, r0
   17430:	mov	r0, r5
   17434:	bl	114f8 <__fprintf_chk@plt>
   17438:	add	sp, sp, #32
   1743c:	pop	{r4, r5, r6, pc}
   17440:	mov	r2, #5
   17444:	ldr	r1, [pc, #484]	; 17630 <__assert_fail@plt+0x5ff4>
   17448:	mov	r0, #0
   1744c:	bl	11324 <dcgettext@plt>
   17450:	ldr	r3, [r4, #16]
   17454:	mov	r1, #1
   17458:	str	r3, [sp, #12]
   1745c:	ldr	r3, [r4, #12]
   17460:	str	r3, [sp, #8]
   17464:	ldr	r3, [r4, #8]
   17468:	str	r3, [sp, #4]
   1746c:	ldr	r3, [r4, #4]
   17470:	str	r3, [sp]
   17474:	ldr	r3, [r4]
   17478:	mov	r2, r0
   1747c:	mov	r0, r5
   17480:	bl	114f8 <__fprintf_chk@plt>
   17484:	b	17438 <__assert_fail@plt+0x5dfc>
   17488:	mov	r2, #5
   1748c:	ldr	r1, [pc, #416]	; 17634 <__assert_fail@plt+0x5ff8>
   17490:	mov	r0, #0
   17494:	bl	11324 <dcgettext@plt>
   17498:	ldr	r3, [r4, #20]
   1749c:	mov	r1, #1
   174a0:	str	r3, [sp, #16]
   174a4:	ldr	r3, [r4, #16]
   174a8:	str	r3, [sp, #12]
   174ac:	ldr	r3, [r4, #12]
   174b0:	str	r3, [sp, #8]
   174b4:	ldr	r3, [r4, #8]
   174b8:	str	r3, [sp, #4]
   174bc:	ldr	r3, [r4, #4]
   174c0:	str	r3, [sp]
   174c4:	ldr	r3, [r4]
   174c8:	mov	r2, r0
   174cc:	mov	r0, r5
   174d0:	bl	114f8 <__fprintf_chk@plt>
   174d4:	b	17438 <__assert_fail@plt+0x5dfc>
   174d8:	mov	r2, #5
   174dc:	ldr	r1, [pc, #340]	; 17638 <__assert_fail@plt+0x5ffc>
   174e0:	mov	r0, #0
   174e4:	bl	11324 <dcgettext@plt>
   174e8:	ldr	r3, [r4, #24]
   174ec:	mov	r1, #1
   174f0:	str	r3, [sp, #20]
   174f4:	ldr	r3, [r4, #20]
   174f8:	str	r3, [sp, #16]
   174fc:	ldr	r3, [r4, #16]
   17500:	str	r3, [sp, #12]
   17504:	ldr	r3, [r4, #12]
   17508:	str	r3, [sp, #8]
   1750c:	ldr	r3, [r4, #8]
   17510:	str	r3, [sp, #4]
   17514:	ldr	r3, [r4, #4]
   17518:	str	r3, [sp]
   1751c:	ldr	r3, [r4]
   17520:	mov	r2, r0
   17524:	mov	r0, r5
   17528:	bl	114f8 <__fprintf_chk@plt>
   1752c:	b	17438 <__assert_fail@plt+0x5dfc>
   17530:	mov	r2, #5
   17534:	ldr	r1, [pc, #256]	; 1763c <__assert_fail@plt+0x6000>
   17538:	mov	r0, #0
   1753c:	bl	11324 <dcgettext@plt>
   17540:	ldr	r3, [r4, #28]
   17544:	mov	r1, #1
   17548:	str	r3, [sp, #24]
   1754c:	ldr	r3, [r4, #24]
   17550:	str	r3, [sp, #20]
   17554:	ldr	r3, [r4, #20]
   17558:	str	r3, [sp, #16]
   1755c:	ldr	r3, [r4, #16]
   17560:	str	r3, [sp, #12]
   17564:	ldr	r3, [r4, #12]
   17568:	str	r3, [sp, #8]
   1756c:	ldr	r3, [r4, #8]
   17570:	str	r3, [sp, #4]
   17574:	ldr	r3, [r4, #4]
   17578:	str	r3, [sp]
   1757c:	ldr	r3, [r4]
   17580:	mov	r2, r0
   17584:	mov	r0, r5
   17588:	bl	114f8 <__fprintf_chk@plt>
   1758c:	b	17438 <__assert_fail@plt+0x5dfc>
   17590:	ldr	r1, [pc, #168]	; 17640 <__assert_fail@plt+0x6004>
   17594:	mov	r2, #5
   17598:	mov	r0, #0
   1759c:	bl	11324 <dcgettext@plt>
   175a0:	ldr	r3, [r4, #32]
   175a4:	mov	r1, #1
   175a8:	str	r3, [sp, #28]
   175ac:	ldr	r3, [r4, #28]
   175b0:	str	r3, [sp, #24]
   175b4:	ldr	r3, [r4, #24]
   175b8:	str	r3, [sp, #20]
   175bc:	ldr	r3, [r4, #20]
   175c0:	str	r3, [sp, #16]
   175c4:	ldr	r3, [r4, #16]
   175c8:	str	r3, [sp, #12]
   175cc:	ldr	r3, [r4, #12]
   175d0:	str	r3, [sp, #8]
   175d4:	ldr	r3, [r4, #8]
   175d8:	str	r3, [sp, #4]
   175dc:	ldr	r3, [r4, #4]
   175e0:	str	r3, [sp]
   175e4:	ldr	r3, [r4]
   175e8:	mov	r2, r0
   175ec:	mov	r0, r5
   175f0:	bl	114f8 <__fprintf_chk@plt>
   175f4:	b	17438 <__assert_fail@plt+0x5dfc>
   175f8:	mov	r2, #5
   175fc:	ldr	r1, [pc, #64]	; 17644 <__assert_fail@plt+0x6008>
   17600:	b	17598 <__assert_fail@plt+0x5f5c>
   17604:	andeq	r9, r1, sp, asr pc
   17608:	andeq	r9, r1, r0, ror pc
   1760c:	andeq	r0, r0, r6, ror #15
   17610:	andeq	sl, r1, lr, lsr r2
   17614:	andeq	r9, r1, r4, ror pc
   17618:	andeq	sl, r1, pc, lsl r0
   1761c:	andeq	r9, r1, r9, ror #30
   17620:	andeq	sl, r1, r1, asr #32
   17624:	andeq	sl, r1, r1, asr r0
   17628:	andeq	sl, r1, r8, rrx
   1762c:	andeq	sl, r1, r4, lsl #1
   17630:	andeq	sl, r1, r4, lsr #1
   17634:	andeq	sl, r1, r8, asr #1
   17638:	strdeq	sl, [r1], -r0
   1763c:	andeq	sl, r1, ip, lsl r1
   17640:	andeq	sl, r1, ip, asr #2
   17644:	andeq	sl, r1, r0, lsl #3
   17648:	push	{r0, r1, r4, lr}
   1764c:	mov	ip, #0
   17650:	ldr	lr, [sp, #16]
   17654:	ldr	r4, [lr, ip, lsl #2]
   17658:	cmp	r4, #0
   1765c:	bne	17674 <__assert_fail@plt+0x6038>
   17660:	str	ip, [sp, #4]
   17664:	str	lr, [sp]
   17668:	bl	1727c <__assert_fail@plt+0x5c40>
   1766c:	add	sp, sp, #8
   17670:	pop	{r4, pc}
   17674:	add	ip, ip, #1
   17678:	b	17654 <__assert_fail@plt+0x6018>
   1767c:	push	{r4, r5, lr}
   17680:	sub	sp, sp, #52	; 0x34
   17684:	mov	ip, #0
   17688:	ldr	r5, [sp, #64]	; 0x40
   1768c:	add	lr, sp, #8
   17690:	ldr	r4, [r5, ip, lsl #2]
   17694:	cmp	r4, #0
   17698:	str	r4, [lr, ip, lsl #2]
   1769c:	beq	176ac <__assert_fail@plt+0x6070>
   176a0:	add	ip, ip, #1
   176a4:	cmp	ip, #10
   176a8:	bne	17690 <__assert_fail@plt+0x6054>
   176ac:	str	ip, [sp, #4]
   176b0:	str	lr, [sp]
   176b4:	bl	1727c <__assert_fail@plt+0x5c40>
   176b8:	add	sp, sp, #52	; 0x34
   176bc:	pop	{r4, r5, pc}
   176c0:	push	{r3}		; (str r3, [sp, #-4]!)
   176c4:	push	{r0, r1, r2, r3, lr}
   176c8:	add	r3, sp, #24
   176cc:	str	r3, [sp, #12]
   176d0:	str	r3, [sp]
   176d4:	ldr	r3, [sp, #20]
   176d8:	bl	1767c <__assert_fail@plt+0x6040>
   176dc:	add	sp, sp, #16
   176e0:	pop	{lr}		; (ldr lr, [sp], #4)
   176e4:	add	sp, sp, #4
   176e8:	bx	lr
   176ec:	ldr	r3, [pc, #116]	; 17768 <__assert_fail@plt+0x612c>
   176f0:	push	{r4, lr}
   176f4:	mov	r0, #10
   176f8:	ldr	r1, [r3]
   176fc:	bl	1130c <fputc_unlocked@plt>
   17700:	mov	r2, #5
   17704:	ldr	r1, [pc, #96]	; 1776c <__assert_fail@plt+0x6130>
   17708:	mov	r0, #0
   1770c:	bl	11324 <dcgettext@plt>
   17710:	ldr	r2, [pc, #88]	; 17770 <__assert_fail@plt+0x6134>
   17714:	mov	r1, r0
   17718:	mov	r0, #1
   1771c:	bl	114e0 <__printf_chk@plt>
   17720:	mov	r2, #5
   17724:	ldr	r1, [pc, #72]	; 17774 <__assert_fail@plt+0x6138>
   17728:	mov	r0, #0
   1772c:	bl	11324 <dcgettext@plt>
   17730:	ldr	r3, [pc, #64]	; 17778 <__assert_fail@plt+0x613c>
   17734:	ldr	r2, [pc, #64]	; 1777c <__assert_fail@plt+0x6140>
   17738:	mov	r1, r0
   1773c:	mov	r0, #1
   17740:	bl	114e0 <__printf_chk@plt>
   17744:	mov	r2, #5
   17748:	ldr	r1, [pc, #48]	; 17780 <__assert_fail@plt+0x6144>
   1774c:	mov	r0, #0
   17750:	bl	11324 <dcgettext@plt>
   17754:	ldr	r2, [pc, #40]	; 17784 <__assert_fail@plt+0x6148>
   17758:	pop	{r4, lr}
   1775c:	mov	r1, r0
   17760:	mov	r0, #1
   17764:	b	114e0 <__printf_chk@plt>
   17768:	andeq	fp, r2, r4, asr #3
   1776c:			; <UNDEFINED> instruction: 0x0001a1bc
   17770:	ldrdeq	sl, [r1], -r0
   17774:	andeq	sl, r1, r6, ror #3
   17778:	andeq	r9, r1, r3, lsl #17
   1777c:	andeq	r9, r1, fp, lsr #17
   17780:	strdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   17784:	andeq	sl, r1, r1, lsr #4
   17788:	push	{r4, lr}
   1778c:	bl	17d24 <__assert_fail@plt+0x66e8>
   17790:	cmp	r0, #0
   17794:	popne	{r4, pc}
   17798:	bl	17c1c <__assert_fail@plt+0x65e0>
   1779c:	push	{r4, lr}
   177a0:	bl	17d24 <__assert_fail@plt+0x66e8>
   177a4:	cmp	r0, #0
   177a8:	popne	{r4, pc}
   177ac:	bl	17c1c <__assert_fail@plt+0x65e0>
   177b0:	b	17788 <__assert_fail@plt+0x614c>
   177b4:	push	{r4, r5, r6, lr}
   177b8:	mov	r5, r0
   177bc:	mov	r4, r1
   177c0:	bl	17d64 <__assert_fail@plt+0x6728>
   177c4:	cmp	r0, #0
   177c8:	popne	{r4, r5, r6, pc}
   177cc:	adds	r4, r4, #0
   177d0:	movne	r4, #1
   177d4:	cmp	r5, #0
   177d8:	orreq	r4, r4, #1
   177dc:	cmp	r4, #0
   177e0:	popeq	{r4, r5, r6, pc}
   177e4:	bl	17c1c <__assert_fail@plt+0x65e0>
   177e8:	push	{r4, lr}
   177ec:	cmp	r1, #0
   177f0:	orreq	r1, r1, #1
   177f4:	bl	17d64 <__assert_fail@plt+0x6728>
   177f8:	cmp	r0, #0
   177fc:	popne	{r4, pc}
   17800:	bl	17c1c <__assert_fail@plt+0x65e0>
   17804:	push	{r4, r5, r6, lr}
   17808:	mov	r6, r0
   1780c:	mov	r5, r1
   17810:	mov	r4, r2
   17814:	bl	184d4 <__assert_fail@plt+0x6e98>
   17818:	cmp	r0, #0
   1781c:	popne	{r4, r5, r6, pc}
   17820:	cmp	r6, #0
   17824:	beq	17834 <__assert_fail@plt+0x61f8>
   17828:	cmp	r5, #0
   1782c:	cmpne	r4, #0
   17830:	popeq	{r4, r5, r6, pc}
   17834:	bl	17c1c <__assert_fail@plt+0x65e0>
   17838:	b	17804 <__assert_fail@plt+0x61c8>
   1783c:	cmp	r2, #0
   17840:	cmpne	r1, #0
   17844:	moveq	r2, #1
   17848:	moveq	r1, r2
   1784c:	push	{r4, lr}
   17850:	bl	184d4 <__assert_fail@plt+0x6e98>
   17854:	cmp	r0, #0
   17858:	popne	{r4, pc}
   1785c:	bl	17c1c <__assert_fail@plt+0x65e0>
   17860:	mov	r2, r1
   17864:	mov	r1, r0
   17868:	mov	r0, #0
   1786c:	b	17804 <__assert_fail@plt+0x61c8>
   17870:	mov	r2, r1
   17874:	mov	r1, r0
   17878:	mov	r0, #0
   1787c:	b	1783c <__assert_fail@plt+0x6200>
   17880:	push	{r4, r5, r6, r7, r8, lr}
   17884:	subs	r7, r0, #0
   17888:	mov	r5, r1
   1788c:	mov	r6, r2
   17890:	ldr	r4, [r1]
   17894:	bne	178d0 <__assert_fail@plt+0x6294>
   17898:	cmp	r4, #0
   1789c:	bne	178b8 <__assert_fail@plt+0x627c>
   178a0:	mov	r1, r2
   178a4:	mov	r0, #64	; 0x40
   178a8:	bl	18958 <__assert_fail@plt+0x731c>
   178ac:	cmp	r0, #0
   178b0:	movne	r4, r0
   178b4:	addeq	r4, r0, #1
   178b8:	mov	r2, r6
   178bc:	mov	r1, r4
   178c0:	mov	r0, r7
   178c4:	bl	17804 <__assert_fail@plt+0x61c8>
   178c8:	str	r4, [r5]
   178cc:	pop	{r4, r5, r6, r7, r8, pc}
   178d0:	lsr	r2, r4, #1
   178d4:	add	r3, r2, #1
   178d8:	mvn	r3, r3
   178dc:	cmp	r4, r3
   178e0:	addls	r4, r4, #1
   178e4:	addls	r4, r4, r2
   178e8:	bls	178b8 <__assert_fail@plt+0x627c>
   178ec:	bl	17c1c <__assert_fail@plt+0x65e0>
   178f0:	mov	r2, #1
   178f4:	b	17880 <__assert_fail@plt+0x6244>
   178f8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178fc:	mov	sl, r0
   17900:	ldr	r8, [r1]
   17904:	mov	fp, r1
   17908:	mov	r5, r2
   1790c:	asrs	r4, r8, #1
   17910:	mov	r9, r3
   17914:	ldr	r7, [sp, #48]	; 0x30
   17918:	bpl	179b4 <__assert_fail@plt+0x6378>
   1791c:	rsb	r2, r4, #-2147483648	; 0x80000000
   17920:	cmp	r8, r2
   17924:	movge	r2, #0
   17928:	movlt	r2, #1
   1792c:	mvn	r3, r9
   17930:	cmp	r2, #0
   17934:	lsr	r3, r3, #31
   17938:	addeq	r4, r4, r8
   1793c:	mvnne	r4, #-2147483648	; 0x80000000
   17940:	mov	r0, r3
   17944:	cmp	r9, r4
   17948:	movge	r0, #0
   1794c:	andlt	r0, r0, #1
   17950:	cmp	r0, #0
   17954:	str	r3, [sp, #4]
   17958:	bne	17b28 <__assert_fail@plt+0x64ec>
   1795c:	cmp	r7, #0
   17960:	bge	17a74 <__assert_fail@plt+0x6438>
   17964:	cmp	r4, #0
   17968:	bge	179cc <__assert_fail@plt+0x6390>
   1796c:	mov	r1, r7
   17970:	mvn	r0, #-2147483648	; 0x80000000
   17974:	bl	18b64 <__assert_fail@plt+0x7528>
   17978:	cmp	r0, r4
   1797c:	movle	r0, #0
   17980:	movgt	r0, #1
   17984:	cmp	r0, #0
   17988:	mvnne	r6, #-2147483648	; 0x80000000
   1798c:	beq	179dc <__assert_fail@plt+0x63a0>
   17990:	mov	r1, r7
   17994:	mov	r0, r6
   17998:	bl	18b64 <__assert_fail@plt+0x7528>
   1799c:	mov	r1, r7
   179a0:	mov	r4, r0
   179a4:	mov	r0, r6
   179a8:	bl	18d84 <__assert_fail@plt+0x7748>
   179ac:	sub	r1, r6, r1
   179b0:	b	179ec <__assert_fail@plt+0x63b0>
   179b4:	mvn	r2, #-2147483648	; 0x80000000
   179b8:	sub	r2, r2, r4
   179bc:	cmp	r8, r2
   179c0:	movle	r2, #0
   179c4:	movgt	r2, #1
   179c8:	b	1792c <__assert_fail@plt+0x62f0>
   179cc:	cmn	r7, #1
   179d0:	movne	r1, r7
   179d4:	movne	r0, #-2147483648	; 0x80000000
   179d8:	bne	17b40 <__assert_fail@plt+0x6504>
   179dc:	mul	r1, r7, r4
   179e0:	cmp	r1, #63	; 0x3f
   179e4:	movle	r6, #64	; 0x40
   179e8:	ble	17990 <__assert_fail@plt+0x6354>
   179ec:	cmp	sl, #0
   179f0:	sub	r2, r4, r8
   179f4:	streq	sl, [fp]
   179f8:	cmp	r2, r5
   179fc:	bge	17ad0 <__assert_fail@plt+0x6494>
   17a00:	cmp	r5, #0
   17a04:	bge	17a9c <__assert_fail@plt+0x6460>
   17a08:	rsb	r2, r5, #-2147483648	; 0x80000000
   17a0c:	cmp	r8, r2
   17a10:	movge	r2, #0
   17a14:	movlt	r2, #1
   17a18:	cmp	r2, #0
   17a1c:	bne	17a70 <__assert_fail@plt+0x6434>
   17a20:	ldr	r0, [sp, #4]
   17a24:	add	r5, r8, r5
   17a28:	cmp	r9, r5
   17a2c:	movge	r0, #0
   17a30:	andlt	r0, r0, #1
   17a34:	cmp	r0, #0
   17a38:	mov	r4, r5
   17a3c:	bne	17a70 <__assert_fail@plt+0x6434>
   17a40:	cmp	r7, #0
   17a44:	bge	17ae4 <__assert_fail@plt+0x64a8>
   17a48:	cmp	r5, #0
   17a4c:	bge	17abc <__assert_fail@plt+0x6480>
   17a50:	mov	r1, r7
   17a54:	mvn	r0, #-2147483648	; 0x80000000
   17a58:	bl	18b64 <__assert_fail@plt+0x7528>
   17a5c:	cmp	r5, r0
   17a60:	movge	r0, #0
   17a64:	movlt	r0, #1
   17a68:	cmp	r0, #0
   17a6c:	beq	17acc <__assert_fail@plt+0x6490>
   17a70:	bl	17c1c <__assert_fail@plt+0x65e0>
   17a74:	beq	179dc <__assert_fail@plt+0x63a0>
   17a78:	cmp	r4, #0
   17a7c:	bge	17b38 <__assert_fail@plt+0x64fc>
   17a80:	cmn	r4, #1
   17a84:	beq	179dc <__assert_fail@plt+0x63a0>
   17a88:	mov	r1, r4
   17a8c:	mov	r0, #-2147483648	; 0x80000000
   17a90:	bl	18b64 <__assert_fail@plt+0x7528>
   17a94:	cmp	r7, r0
   17a98:	b	1797c <__assert_fail@plt+0x6340>
   17a9c:	cmp	r8, #0
   17aa0:	blt	17a20 <__assert_fail@plt+0x63e4>
   17aa4:	mvn	r2, #-2147483648	; 0x80000000
   17aa8:	sub	r2, r2, r5
   17aac:	cmp	r8, r2
   17ab0:	movle	r2, #0
   17ab4:	movgt	r2, #1
   17ab8:	b	17a18 <__assert_fail@plt+0x63dc>
   17abc:	cmn	r7, #1
   17ac0:	movne	r1, r7
   17ac4:	movne	r0, #-2147483648	; 0x80000000
   17ac8:	bne	17b1c <__assert_fail@plt+0x64e0>
   17acc:	mul	r1, r5, r7
   17ad0:	mov	r0, sl
   17ad4:	bl	177b4 <__assert_fail@plt+0x6178>
   17ad8:	str	r4, [fp]
   17adc:	add	sp, sp, #12
   17ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ae4:	beq	17acc <__assert_fail@plt+0x6490>
   17ae8:	cmp	r5, #0
   17aec:	movge	r1, r7
   17af0:	mvnge	r0, #-2147483648	; 0x80000000
   17af4:	bge	17b1c <__assert_fail@plt+0x64e0>
   17af8:	cmn	r5, #1
   17afc:	beq	17acc <__assert_fail@plt+0x6490>
   17b00:	mov	r1, r5
   17b04:	mov	r0, #-2147483648	; 0x80000000
   17b08:	bl	18b64 <__assert_fail@plt+0x7528>
   17b0c:	cmp	r7, r0
   17b10:	movle	r0, #0
   17b14:	movgt	r0, #1
   17b18:	b	17a68 <__assert_fail@plt+0x642c>
   17b1c:	bl	18b64 <__assert_fail@plt+0x7528>
   17b20:	cmp	r5, r0
   17b24:	b	17b10 <__assert_fail@plt+0x64d4>
   17b28:	cmp	r7, #0
   17b2c:	mov	r4, r9
   17b30:	blt	179cc <__assert_fail@plt+0x6390>
   17b34:	beq	179dc <__assert_fail@plt+0x63a0>
   17b38:	mov	r1, r7
   17b3c:	mvn	r0, #-2147483648	; 0x80000000
   17b40:	bl	18b64 <__assert_fail@plt+0x7528>
   17b44:	cmp	r0, r4
   17b48:	movge	r0, #0
   17b4c:	movlt	r0, #1
   17b50:	b	17984 <__assert_fail@plt+0x6348>
   17b54:	push	{r4, lr}
   17b58:	bl	17cdc <__assert_fail@plt+0x66a0>
   17b5c:	cmp	r0, #0
   17b60:	popne	{r4, pc}
   17b64:	bl	17c1c <__assert_fail@plt+0x65e0>
   17b68:	mov	r1, #1
   17b6c:	b	17b54 <__assert_fail@plt+0x6518>
   17b70:	push	{r4, lr}
   17b74:	bl	17cdc <__assert_fail@plt+0x66a0>
   17b78:	cmp	r0, #0
   17b7c:	popne	{r4, pc}
   17b80:	bl	17c1c <__assert_fail@plt+0x65e0>
   17b84:	mov	r1, #1
   17b88:	b	17b70 <__assert_fail@plt+0x6534>
   17b8c:	push	{r4, r5, r6, lr}
   17b90:	mov	r4, r1
   17b94:	mov	r5, r0
   17b98:	mov	r0, r1
   17b9c:	bl	17788 <__assert_fail@plt+0x614c>
   17ba0:	mov	r2, r4
   17ba4:	mov	r1, r5
   17ba8:	pop	{r4, r5, r6, lr}
   17bac:	b	112dc <memcpy@plt>
   17bb0:	push	{r4, r5, r6, lr}
   17bb4:	mov	r4, r1
   17bb8:	mov	r5, r0
   17bbc:	mov	r0, r1
   17bc0:	bl	1779c <__assert_fail@plt+0x6160>
   17bc4:	mov	r2, r4
   17bc8:	mov	r1, r5
   17bcc:	pop	{r4, r5, r6, lr}
   17bd0:	b	112dc <memcpy@plt>
   17bd4:	push	{r4, r5, r6, lr}
   17bd8:	mov	r5, r0
   17bdc:	add	r0, r1, #1
   17be0:	mov	r4, r1
   17be4:	bl	1779c <__assert_fail@plt+0x6160>
   17be8:	mov	r2, #0
   17bec:	mov	r1, r5
   17bf0:	strb	r2, [r0, r4]
   17bf4:	mov	r2, r4
   17bf8:	pop	{r4, r5, r6, lr}
   17bfc:	b	112dc <memcpy@plt>
   17c00:	push	{r4, lr}
   17c04:	mov	r4, r0
   17c08:	bl	1148c <strlen@plt>
   17c0c:	add	r1, r0, #1
   17c10:	mov	r0, r4
   17c14:	pop	{r4, lr}
   17c18:	b	17b8c <__assert_fail@plt+0x6550>
   17c1c:	ldr	r3, [pc, #44]	; 17c50 <__assert_fail@plt+0x6614>
   17c20:	push	{r4, lr}
   17c24:	mov	r2, #5
   17c28:	ldr	r1, [pc, #36]	; 17c54 <__assert_fail@plt+0x6618>
   17c2c:	mov	r0, #0
   17c30:	ldr	r4, [r3]
   17c34:	bl	11324 <dcgettext@plt>
   17c38:	ldr	r2, [pc, #24]	; 17c58 <__assert_fail@plt+0x661c>
   17c3c:	mov	r1, #0
   17c40:	mov	r3, r0
   17c44:	mov	r0, r4
   17c48:	bl	113d8 <error@plt>
   17c4c:	bl	11600 <abort@plt>
   17c50:	andeq	fp, r2, ip, ror #2
   17c54:	andeq	sl, r1, sp, ror #4
   17c58:			; <UNDEFINED> instruction: 0x00019dbd
   17c5c:	push	{r4, lr}
   17c60:	orr	r1, r1, #512	; 0x200
   17c64:	bl	13ab8 <__assert_fail@plt+0x247c>
   17c68:	cmp	r0, #0
   17c6c:	popne	{r4, pc}
   17c70:	bl	114b0 <__errno_location@plt>
   17c74:	ldr	r3, [r0]
   17c78:	cmp	r3, #22
   17c7c:	bne	17c94 <__assert_fail@plt+0x6658>
   17c80:	ldr	r3, [pc, #16]	; 17c98 <__assert_fail@plt+0x665c>
   17c84:	mov	r2, #41	; 0x29
   17c88:	ldr	r1, [pc, #12]	; 17c9c <__assert_fail@plt+0x6660>
   17c8c:	ldr	r0, [pc, #12]	; 17ca0 <__assert_fail@plt+0x6664>
   17c90:	bl	1163c <__assert_fail@plt>
   17c94:	bl	17c1c <__assert_fail@plt+0x65e0>
   17c98:	andeq	sl, r1, lr, ror r2
   17c9c:	andeq	sl, r1, r8, lsl #5
   17ca0:	muleq	r1, r3, r2
   17ca4:	ldr	r3, [r0, #48]	; 0x30
   17ca8:	and	r3, r3, #17
   17cac:	cmp	r3, #16
   17cb0:	beq	17ccc <__assert_fail@plt+0x6690>
   17cb4:	cmp	r3, #17
   17cb8:	bne	17cd4 <__assert_fail@plt+0x6698>
   17cbc:	ldr	r0, [r1, #48]	; 0x30
   17cc0:	adds	r0, r0, #0
   17cc4:	movne	r0, #1
   17cc8:	bx	lr
   17ccc:	mov	r0, #1
   17cd0:	bx	lr
   17cd4:	mov	r0, #0
   17cd8:	bx	lr
   17cdc:	cmp	r1, #0
   17ce0:	cmpne	r0, #0
   17ce4:	moveq	r1, #1
   17ce8:	moveq	r0, r1
   17cec:	umull	r2, r3, r0, r1
   17cf0:	adds	r3, r3, #0
   17cf4:	movne	r3, #1
   17cf8:	cmp	r2, #0
   17cfc:	blt	17d0c <__assert_fail@plt+0x66d0>
   17d00:	cmp	r3, #0
   17d04:	bne	17d0c <__assert_fail@plt+0x66d0>
   17d08:	b	11264 <calloc@plt>
   17d0c:	push	{r4, lr}
   17d10:	bl	114b0 <__errno_location@plt>
   17d14:	mov	r3, #12
   17d18:	str	r3, [r0]
   17d1c:	mov	r0, #0
   17d20:	pop	{r4, pc}
   17d24:	cmp	r0, #0
   17d28:	mov	r3, #0
   17d2c:	moveq	r0, #1
   17d30:	adds	r3, r3, #0
   17d34:	movne	r3, #1
   17d38:	cmp	r0, #0
   17d3c:	blt	17d4c <__assert_fail@plt+0x6710>
   17d40:	cmp	r3, #0
   17d44:	bne	17d4c <__assert_fail@plt+0x6710>
   17d48:	b	11408 <malloc@plt>
   17d4c:	push	{r4, lr}
   17d50:	bl	114b0 <__errno_location@plt>
   17d54:	mov	r3, #12
   17d58:	str	r3, [r0]
   17d5c:	mov	r0, #0
   17d60:	pop	{r4, pc}
   17d64:	cmp	r0, #0
   17d68:	push	{r4, lr}
   17d6c:	mov	r4, r1
   17d70:	bne	17d80 <__assert_fail@plt+0x6744>
   17d74:	mov	r0, r1
   17d78:	pop	{r4, lr}
   17d7c:	b	17d24 <__assert_fail@plt+0x66e8>
   17d80:	cmp	r1, #0
   17d84:	bne	17d94 <__assert_fail@plt+0x6758>
   17d88:	bl	182f0 <__assert_fail@plt+0x6cb4>
   17d8c:	mov	r0, #0
   17d90:	pop	{r4, pc}
   17d94:	cmp	r1, #0
   17d98:	blt	17da8 <__assert_fail@plt+0x676c>
   17d9c:	mov	r3, #0
   17da0:	cmp	r3, r3
   17da4:	beq	17db8 <__assert_fail@plt+0x677c>
   17da8:	bl	114b0 <__errno_location@plt>
   17dac:	mov	r3, #12
   17db0:	str	r3, [r0]
   17db4:	b	17d8c <__assert_fail@plt+0x6750>
   17db8:	pop	{r4, lr}
   17dbc:	b	1133c <realloc@plt>
   17dc0:	push	{r4, r5, r6, r7, r8, r9, lr}
   17dc4:	mov	r4, r0
   17dc8:	ldrb	r3, [r2]
   17dcc:	sub	sp, sp, #44	; 0x2c
   17dd0:	cmp	r3, #0
   17dd4:	strbeq	r3, [r0]
   17dd8:	beq	17e5c <__assert_fail@plt+0x6820>
   17ddc:	ldr	r5, [pc, #204]	; 17eb0 <__assert_fail@plt+0x6874>
   17de0:	mov	r9, r1
   17de4:	mov	r6, r2
   17de8:	ldr	r8, [r5]
   17dec:	cmp	r8, #0
   17df0:	bne	17e4c <__assert_fail@plt+0x6810>
   17df4:	ldr	r1, [pc, #184]	; 17eb4 <__assert_fail@plt+0x6878>
   17df8:	ldr	r0, [pc, #184]	; 17eb8 <__assert_fail@plt+0x687c>
   17dfc:	bl	113f0 <open64@plt>
   17e00:	subs	r7, r0, #0
   17e04:	mvnlt	r3, #0
   17e08:	strlt	r3, [r5]
   17e0c:	blt	17e4c <__assert_fail@plt+0x6810>
   17e10:	ldr	r3, [pc, #164]	; 17ebc <__assert_fail@plt+0x6880>
   17e14:	mov	r2, #32
   17e18:	mov	r1, #1
   17e1c:	str	r7, [sp]
   17e20:	add	r0, sp, #8
   17e24:	bl	114bc <__sprintf_chk@plt>
   17e28:	mov	r1, r8
   17e2c:	add	r0, sp, #8
   17e30:	bl	1151c <access@plt>
   17e34:	cmp	r0, #0
   17e38:	mvnne	r3, #0
   17e3c:	moveq	r3, #1
   17e40:	mov	r0, r7
   17e44:	str	r3, [r5]
   17e48:	bl	1160c <close@plt>
   17e4c:	ldr	r3, [r5]
   17e50:	cmp	r3, #0
   17e54:	bge	17e68 <__assert_fail@plt+0x682c>
   17e58:	mov	r4, #0
   17e5c:	mov	r0, r4
   17e60:	add	sp, sp, #44	; 0x2c
   17e64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e68:	mov	r0, r6
   17e6c:	bl	1148c <strlen@plt>
   17e70:	add	r0, r0, #27
   17e74:	cmp	r0, #4032	; 0xfc0
   17e78:	bls	17e88 <__assert_fail@plt+0x684c>
   17e7c:	bl	17d24 <__assert_fail@plt+0x66e8>
   17e80:	subs	r4, r0, #0
   17e84:	beq	17e58 <__assert_fail@plt+0x681c>
   17e88:	str	r9, [sp]
   17e8c:	ldr	r3, [pc, #44]	; 17ec0 <__assert_fail@plt+0x6884>
   17e90:	mvn	r2, #0
   17e94:	mov	r1, #1
   17e98:	mov	r0, r4
   17e9c:	bl	114bc <__sprintf_chk@plt>
   17ea0:	mov	r1, r6
   17ea4:	add	r0, r4, r0
   17ea8:	bl	113a8 <strcpy@plt>
   17eac:	b	17e5c <__assert_fail@plt+0x6820>
   17eb0:	andeq	fp, r2, r0, asr #6
   17eb4:	andeq	r4, r8, r0, lsl #18
   17eb8:	andeq	sl, r1, r3, lsr #5
   17ebc:			; <UNDEFINED> instruction: 0x0001a2b1
   17ec0:	andeq	sl, r1, r8, asr #5
   17ec4:	push	{r4, r5, r6, lr}
   17ec8:	mov	r4, r0
   17ecc:	bl	113b4 <__fpending@plt>
   17ed0:	mov	r5, r0
   17ed4:	mov	r0, r4
   17ed8:	bl	113c0 <ferror_unlocked@plt>
   17edc:	mov	r6, r0
   17ee0:	mov	r0, r4
   17ee4:	bl	18000 <__assert_fail@plt+0x69c4>
   17ee8:	cmp	r6, #0
   17eec:	mov	r4, r0
   17ef0:	bne	17f1c <__assert_fail@plt+0x68e0>
   17ef4:	cmp	r0, #0
   17ef8:	beq	17f14 <__assert_fail@plt+0x68d8>
   17efc:	cmp	r5, #0
   17f00:	bne	17f2c <__assert_fail@plt+0x68f0>
   17f04:	bl	114b0 <__errno_location@plt>
   17f08:	ldr	r4, [r0]
   17f0c:	subs	r4, r4, #9
   17f10:	mvnne	r4, #0
   17f14:	mov	r0, r4
   17f18:	pop	{r4, r5, r6, pc}
   17f1c:	cmp	r0, #0
   17f20:	bne	17f2c <__assert_fail@plt+0x68f0>
   17f24:	bl	114b0 <__errno_location@plt>
   17f28:	str	r4, [r0]
   17f2c:	mvn	r4, #0
   17f30:	b	17f14 <__assert_fail@plt+0x68d8>
   17f34:	mov	r3, #0
   17f38:	mov	r2, #0
   17f3c:	strd	r2, [r0, #16]
   17f40:	ldr	r3, [pc, #4]	; 17f4c <__assert_fail@plt+0x6910>
   17f44:	str	r3, [r0, #24]
   17f48:	bx	lr
   17f4c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17f50:	ldr	r2, [r0, #24]
   17f54:	ldr	r3, [pc, #148]	; 17ff0 <__assert_fail@plt+0x69b4>
   17f58:	push	{r4, r5, r6, r7, r8, lr}
   17f5c:	cmp	r2, r3
   17f60:	beq	17f78 <__assert_fail@plt+0x693c>
   17f64:	ldr	r3, [pc, #136]	; 17ff4 <__assert_fail@plt+0x69b8>
   17f68:	mov	r2, #60	; 0x3c
   17f6c:	ldr	r1, [pc, #132]	; 17ff8 <__assert_fail@plt+0x69bc>
   17f70:	ldr	r0, [pc, #132]	; 17ffc <__assert_fail@plt+0x69c0>
   17f74:	bl	1163c <__assert_fail@plt>
   17f78:	ldrd	r6, [r0, #16]
   17f7c:	orrs	r3, r6, r7
   17f80:	beq	17fb4 <__assert_fail@plt+0x6978>
   17f84:	ldrd	r4, [r1, #96]	; 0x60
   17f88:	ldrd	r2, [r0]
   17f8c:	cmp	r5, r3
   17f90:	cmpeq	r4, r2
   17f94:	bne	17fb4 <__assert_fail@plt+0x6978>
   17f98:	ldrd	r4, [r1]
   17f9c:	ldrd	r2, [r0, #8]
   17fa0:	cmp	r5, r3
   17fa4:	cmpeq	r4, r2
   17fa8:	bne	17fb4 <__assert_fail@plt+0x6978>
   17fac:	mov	r0, #1
   17fb0:	pop	{r4, r5, r6, r7, r8, pc}
   17fb4:	adds	r2, r6, #1
   17fb8:	adc	r3, r7, #0
   17fbc:	and	r6, r6, r2
   17fc0:	and	r7, r7, r3
   17fc4:	orrs	ip, r6, r7
   17fc8:	strd	r2, [r0, #16]
   17fcc:	bne	17fe8 <__assert_fail@plt+0x69ac>
   17fd0:	orrs	r3, r2, r3
   17fd4:	beq	17fac <__assert_fail@plt+0x6970>
   17fd8:	ldrd	r2, [r1]
   17fdc:	strd	r2, [r0, #8]
   17fe0:	ldrd	r2, [r1, #96]	; 0x60
   17fe4:	strd	r2, [r0]
   17fe8:	mov	r0, #0
   17fec:	pop	{r4, r5, r6, r7, r8, pc}
   17ff0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17ff4:	ldrdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   17ff8:	andeq	sl, r1, r6, ror #5
   17ffc:	strdeq	sl, [r1], -r8
   18000:	push	{r0, r1, r2, r4, r5, lr}
   18004:	mov	r4, r0
   18008:	bl	114ec <fileno@plt>
   1800c:	cmp	r0, #0
   18010:	mov	r0, r4
   18014:	bge	18024 <__assert_fail@plt+0x69e8>
   18018:	add	sp, sp, #12
   1801c:	pop	{r4, r5, lr}
   18020:	b	11528 <fclose@plt>
   18024:	bl	11420 <__freading@plt>
   18028:	cmp	r0, #0
   1802c:	bne	18068 <__assert_fail@plt+0x6a2c>
   18030:	mov	r0, r4
   18034:	bl	182a0 <__assert_fail@plt+0x6c64>
   18038:	cmp	r0, #0
   1803c:	bne	1809c <__assert_fail@plt+0x6a60>
   18040:	mov	r5, #0
   18044:	mov	r0, r4
   18048:	bl	11528 <fclose@plt>
   1804c:	cmp	r5, #0
   18050:	beq	18060 <__assert_fail@plt+0x6a24>
   18054:	bl	114b0 <__errno_location@plt>
   18058:	str	r5, [r0]
   1805c:	mvn	r0, #0
   18060:	add	sp, sp, #12
   18064:	pop	{r4, r5, pc}
   18068:	mov	r0, r4
   1806c:	bl	114ec <fileno@plt>
   18070:	mov	r3, #1
   18074:	str	r3, [sp]
   18078:	mov	r2, #0
   1807c:	mov	r3, #0
   18080:	bl	11390 <lseek64@plt>
   18084:	mvn	r3, #0
   18088:	mvn	r2, #0
   1808c:	cmp	r1, r3
   18090:	cmpeq	r0, r2
   18094:	bne	18030 <__assert_fail@plt+0x69f4>
   18098:	b	18040 <__assert_fail@plt+0x6a04>
   1809c:	bl	114b0 <__errno_location@plt>
   180a0:	ldr	r5, [r0]
   180a4:	b	18044 <__assert_fail@plt+0x6a08>
   180a8:	push	{r1, r2, r3}
   180ac:	push	{r0, r1, r4, r5, r6, r7, lr}
   180b0:	add	r2, sp, #32
   180b4:	ldr	r1, [sp, #28]
   180b8:	str	r2, [sp, #4]
   180bc:	cmp	r1, #0
   180c0:	beq	18104 <__assert_fail@plt+0x6ac8>
   180c4:	ldr	r3, [pc, #396]	; 18258 <__assert_fail@plt+0x6c1c>
   180c8:	mov	r6, r0
   180cc:	cmp	r1, r3
   180d0:	beq	18110 <__assert_fail@plt+0x6ad4>
   180d4:	cmp	r1, #11
   180d8:	beq	180f4 <__assert_fail@plt+0x6ab8>
   180dc:	bgt	18220 <__assert_fail@plt+0x6be4>
   180e0:	cmp	r1, #3
   180e4:	beq	180f4 <__assert_fail@plt+0x6ab8>
   180e8:	bgt	181fc <__assert_fail@plt+0x6bc0>
   180ec:	cmp	r1, #1
   180f0:	bne	18208 <__assert_fail@plt+0x6bcc>
   180f4:	mov	r0, r6
   180f8:	bl	11540 <fcntl64@plt>
   180fc:	mov	r4, r0
   18100:	b	181bc <__assert_fail@plt+0x6b80>
   18104:	ldr	r2, [sp, #32]
   18108:	bl	11540 <fcntl64@plt>
   1810c:	b	180fc <__assert_fail@plt+0x6ac0>
   18110:	ldr	r5, [pc, #324]	; 1825c <__assert_fail@plt+0x6c20>
   18114:	add	r3, sp, #36	; 0x24
   18118:	str	r3, [sp, #4]
   1811c:	ldr	r3, [r5]
   18120:	ldr	r7, [r2]
   18124:	cmp	r3, #0
   18128:	mov	r2, r7
   1812c:	blt	181d0 <__assert_fail@plt+0x6b94>
   18130:	bl	11540 <fcntl64@plt>
   18134:	subs	r4, r0, #0
   18138:	bge	1814c <__assert_fail@plt+0x6b10>
   1813c:	bl	114b0 <__errno_location@plt>
   18140:	ldr	r3, [r0]
   18144:	cmp	r3, #22
   18148:	beq	1819c <__assert_fail@plt+0x6b60>
   1814c:	mov	r3, #1
   18150:	str	r3, [r5]
   18154:	cmp	r4, #0
   18158:	blt	181bc <__assert_fail@plt+0x6b80>
   1815c:	ldr	r5, [r5]
   18160:	cmn	r5, #1
   18164:	bne	181bc <__assert_fail@plt+0x6b80>
   18168:	mov	r1, #1
   1816c:	mov	r0, r4
   18170:	bl	11540 <fcntl64@plt>
   18174:	subs	r2, r0, #0
   18178:	bge	181e0 <__assert_fail@plt+0x6ba4>
   1817c:	bl	114b0 <__errno_location@plt>
   18180:	ldr	r7, [r0]
   18184:	mov	r6, r0
   18188:	mov	r0, r4
   1818c:	bl	1160c <close@plt>
   18190:	mov	r4, r5
   18194:	str	r7, [r6]
   18198:	b	181bc <__assert_fail@plt+0x6b80>
   1819c:	mov	r2, r7
   181a0:	mov	r1, #0
   181a4:	mov	r0, r6
   181a8:	bl	11540 <fcntl64@plt>
   181ac:	subs	r4, r0, #0
   181b0:	mvnge	r3, #0
   181b4:	strge	r3, [r5]
   181b8:	bge	1815c <__assert_fail@plt+0x6b20>
   181bc:	mov	r0, r4
   181c0:	add	sp, sp, #8
   181c4:	pop	{r4, r5, r6, r7, lr}
   181c8:	add	sp, sp, #12
   181cc:	bx	lr
   181d0:	mov	r1, #0
   181d4:	bl	11540 <fcntl64@plt>
   181d8:	mov	r4, r0
   181dc:	b	18154 <__assert_fail@plt+0x6b18>
   181e0:	orr	r2, r2, #1
   181e4:	mov	r1, #2
   181e8:	mov	r0, r4
   181ec:	bl	11540 <fcntl64@plt>
   181f0:	cmn	r0, #1
   181f4:	bne	181bc <__assert_fail@plt+0x6b80>
   181f8:	b	1817c <__assert_fail@plt+0x6b40>
   181fc:	cmp	r1, #8
   18200:	beq	18208 <__assert_fail@plt+0x6bcc>
   18204:	bgt	18218 <__assert_fail@plt+0x6bdc>
   18208:	ldr	r3, [sp, #4]
   1820c:	mov	r0, r6
   18210:	ldr	r2, [r3]
   18214:	b	18108 <__assert_fail@plt+0x6acc>
   18218:	cmp	r1, #9
   1821c:	b	180f0 <__assert_fail@plt+0x6ab4>
   18220:	ldr	r2, [pc, #56]	; 18260 <__assert_fail@plt+0x6c24>
   18224:	cmp	r1, r2
   18228:	bgt	18240 <__assert_fail@plt+0x6c04>
   1822c:	cmp	r1, r3
   18230:	ldrlt	r3, [pc, #44]	; 18264 <__assert_fail@plt+0x6c28>
   18234:	bge	18208 <__assert_fail@plt+0x6bcc>
   18238:	cmp	r1, r3
   1823c:	b	180f0 <__assert_fail@plt+0x6ab4>
   18240:	ldr	r3, [pc, #32]	; 18268 <__assert_fail@plt+0x6c2c>
   18244:	cmp	r1, r3
   18248:	beq	18208 <__assert_fail@plt+0x6bcc>
   1824c:	blt	180f4 <__assert_fail@plt+0x6ab8>
   18250:	add	r3, r3, #1
   18254:	b	18238 <__assert_fail@plt+0x6bfc>
   18258:	andeq	r0, r0, r6, lsl #8
   1825c:	andeq	fp, r2, r4, asr #6
   18260:	andeq	r0, r0, r7, lsl #8
   18264:	andeq	r0, r0, r1, lsl #8
   18268:	andeq	r0, r0, r9, lsl #8
   1826c:	push	{r1, r2, r3}
   18270:	push	{r0, r1, lr}
   18274:	ldr	r1, [sp, #12]
   18278:	ands	r2, r1, #64	; 0x40
   1827c:	addne	r3, sp, #16
   18280:	ldrne	r2, [sp, #16]
   18284:	strne	r3, [sp, #4]
   18288:	bl	113f0 <open64@plt>
   1828c:	bl	17240 <__assert_fail@plt+0x5c04>
   18290:	add	sp, sp, #8
   18294:	pop	{lr}		; (ldr lr, [sp], #4)
   18298:	add	sp, sp, #12
   1829c:	bx	lr
   182a0:	push	{r0, r1, r4, lr}
   182a4:	subs	r4, r0, #0
   182a8:	bne	182bc <__assert_fail@plt+0x6c80>
   182ac:	mov	r0, r4
   182b0:	add	sp, sp, #8
   182b4:	pop	{r4, lr}
   182b8:	b	112a0 <fflush@plt>
   182bc:	bl	11420 <__freading@plt>
   182c0:	cmp	r0, #0
   182c4:	beq	182ac <__assert_fail@plt+0x6c70>
   182c8:	ldr	r3, [r4]
   182cc:	tst	r3, #256	; 0x100
   182d0:	beq	182ac <__assert_fail@plt+0x6c70>
   182d4:	mov	r3, #1
   182d8:	str	r3, [sp]
   182dc:	mov	r2, #0
   182e0:	mov	r3, #0
   182e4:	mov	r0, r4
   182e8:	bl	18344 <__assert_fail@plt+0x6d08>
   182ec:	b	182ac <__assert_fail@plt+0x6c70>
   182f0:	push	{r0, r1, r2, r4, r5, lr}
   182f4:	mov	r5, r0
   182f8:	bl	114b0 <__errno_location@plt>
   182fc:	ldr	r3, [r0]
   18300:	mov	r4, r0
   18304:	str	r3, [sp]
   18308:	str	r3, [sp, #4]
   1830c:	mov	r3, #0
   18310:	str	r3, [r0]
   18314:	mov	r0, r5
   18318:	bl	112c4 <free@plt>
   1831c:	ldr	r3, [r4]
   18320:	add	r2, sp, #8
   18324:	cmp	r3, #0
   18328:	moveq	r3, #4
   1832c:	movne	r3, #0
   18330:	add	r3, r2, r3
   18334:	ldr	r3, [r3, #-8]
   18338:	str	r3, [r4]
   1833c:	add	sp, sp, #12
   18340:	pop	{r4, r5, pc}
   18344:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18348:	mov	r4, r0
   1834c:	ldmib	r0, {ip, lr}
   18350:	ldr	r8, [sp, #32]
   18354:	cmp	lr, ip
   18358:	bne	183c4 <__assert_fail@plt+0x6d88>
   1835c:	ldr	lr, [r0, #20]
   18360:	ldr	ip, [r0, #16]
   18364:	cmp	lr, ip
   18368:	bne	183c4 <__assert_fail@plt+0x6d88>
   1836c:	ldr	r5, [r0, #36]	; 0x24
   18370:	cmp	r5, #0
   18374:	bne	183c4 <__assert_fail@plt+0x6d88>
   18378:	mov	r6, r2
   1837c:	mov	r7, r3
   18380:	bl	114ec <fileno@plt>
   18384:	mov	r2, r6
   18388:	mov	r3, r7
   1838c:	str	r8, [sp]
   18390:	bl	11390 <lseek64@plt>
   18394:	mvn	r3, #0
   18398:	mvn	r2, #0
   1839c:	cmp	r1, r3
   183a0:	cmpeq	r0, r2
   183a4:	mvneq	r0, #0
   183a8:	ldrne	r3, [r4]
   183ac:	strdne	r0, [r4, #80]	; 0x50
   183b0:	movne	r0, r5
   183b4:	bicne	r3, r3, #16
   183b8:	strne	r3, [r4]
   183bc:	add	sp, sp, #8
   183c0:	pop	{r4, r5, r6, r7, r8, pc}
   183c4:	str	r8, [sp, #32]
   183c8:	mov	r0, r4
   183cc:	add	sp, sp, #8
   183d0:	pop	{r4, r5, r6, r7, r8, lr}
   183d4:	b	11534 <fseeko64@plt>
   183d8:	push	{r4, lr}
   183dc:	mov	r0, #14
   183e0:	bl	11564 <nl_langinfo@plt>
   183e4:	ldr	r3, [pc, #24]	; 18404 <__assert_fail@plt+0x6dc8>
   183e8:	cmp	r0, #0
   183ec:	moveq	r0, r3
   183f0:	ldr	r3, [pc, #16]	; 18408 <__assert_fail@plt+0x6dcc>
   183f4:	ldrb	r2, [r0]
   183f8:	cmp	r2, #0
   183fc:	moveq	r0, r3
   18400:	pop	{r4, pc}
   18404:	andeq	r9, r1, r8, lsl #16
   18408:	andeq	sl, r1, r0, lsl r3
   1840c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18410:	subs	r5, r0, #0
   18414:	addeq	r5, sp, #4
   18418:	mov	r0, r5
   1841c:	mov	r7, r2
   18420:	mov	r6, r1
   18424:	bl	113cc <mbrtowc@plt>
   18428:	cmp	r7, #0
   1842c:	cmnne	r0, #3
   18430:	mov	r4, r0
   18434:	bls	18450 <__assert_fail@plt+0x6e14>
   18438:	mov	r0, #0
   1843c:	bl	18878 <__assert_fail@plt+0x723c>
   18440:	cmp	r0, #0
   18444:	moveq	r4, #1
   18448:	ldrbeq	r3, [r6]
   1844c:	streq	r3, [r5]
   18450:	mov	r0, r4
   18454:	add	sp, sp, #12
   18458:	pop	{r4, r5, r6, r7, pc}
   1845c:	ldr	r3, [pc, #44]	; 18490 <__assert_fail@plt+0x6e54>
   18460:	push	{r4, lr}
   18464:	mov	r5, r0
   18468:	mov	r2, #5
   1846c:	ldr	r1, [pc, #32]	; 18494 <__assert_fail@plt+0x6e58>
   18470:	mov	r0, #0
   18474:	ldr	r4, [r3]
   18478:	bl	11324 <dcgettext@plt>
   1847c:	mov	r1, r5
   18480:	mov	r2, r0
   18484:	mov	r0, r4
   18488:	bl	113d8 <error@plt>
   1848c:	bl	11600 <abort@plt>
   18490:	andeq	fp, r2, ip, ror #2
   18494:	andeq	sl, r1, r6, lsl r3
   18498:	ldr	r3, [pc, #44]	; 184cc <__assert_fail@plt+0x6e90>
   1849c:	push	{r4, lr}
   184a0:	mov	r5, r0
   184a4:	mov	r2, #5
   184a8:	ldr	r1, [pc, #32]	; 184d0 <__assert_fail@plt+0x6e94>
   184ac:	mov	r0, #0
   184b0:	ldr	r4, [r3]
   184b4:	bl	11324 <dcgettext@plt>
   184b8:	mov	r1, r5
   184bc:	mov	r2, r0
   184c0:	mov	r0, r4
   184c4:	bl	113d8 <error@plt>
   184c8:	bl	11600 <abort@plt>
   184cc:	andeq	fp, r2, ip, ror #2
   184d0:	andeq	sl, r1, r1, asr #6
   184d4:	push	{r4, r5, r6, lr}
   184d8:	subs	r4, r2, #0
   184dc:	mov	r6, r0
   184e0:	mov	r5, r1
   184e4:	beq	184fc <__assert_fail@plt+0x6ec0>
   184e8:	mov	r1, r4
   184ec:	mvn	r0, #0
   184f0:	bl	18958 <__assert_fail@plt+0x731c>
   184f4:	cmp	r0, r5
   184f8:	bcc	1850c <__assert_fail@plt+0x6ed0>
   184fc:	mul	r1, r5, r4
   18500:	mov	r0, r6
   18504:	pop	{r4, r5, r6, lr}
   18508:	b	17d64 <__assert_fail@plt+0x6728>
   1850c:	bl	114b0 <__errno_location@plt>
   18510:	mov	r3, #12
   18514:	str	r3, [r0]
   18518:	mov	r0, #0
   1851c:	pop	{r4, r5, r6, pc}
   18520:	push	{r4, r5, r6, lr}
   18524:	mov	r4, #0
   18528:	mov	r5, r0
   1852c:	str	r4, [r0, #4]
   18530:	mov	r1, #524288	; 0x80000
   18534:	ldr	r0, [pc, #52]	; 18570 <__assert_fail@plt+0x6f34>
   18538:	bl	1826c <__assert_fail@plt+0x6c30>
   1853c:	cmp	r0, r4
   18540:	str	r0, [r5]
   18544:	bge	18568 <__assert_fail@plt+0x6f2c>
   18548:	mov	r1, r4
   1854c:	mov	r0, r4
   18550:	bl	1145c <getcwd@plt>
   18554:	cmp	r0, r4
   18558:	str	r0, [r5, #4]
   1855c:	movne	r0, #0
   18560:	mvneq	r0, #0
   18564:	pop	{r4, r5, r6, pc}
   18568:	mov	r0, r4
   1856c:	pop	{r4, r5, r6, pc}
   18570:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   18574:	mov	r3, r0
   18578:	ldr	r0, [r0]
   1857c:	cmp	r0, #0
   18580:	blt	18588 <__assert_fail@plt+0x6f4c>
   18584:	b	11594 <fchdir@plt>
   18588:	ldr	r0, [r3, #4]
   1858c:	b	18634 <__assert_fail@plt+0x6ff8>
   18590:	push	{r4, lr}
   18594:	mov	r4, r0
   18598:	ldr	r0, [r0]
   1859c:	cmp	r0, #0
   185a0:	blt	185a8 <__assert_fail@plt+0x6f6c>
   185a4:	bl	1160c <close@plt>
   185a8:	ldr	r0, [r4, #4]
   185ac:	pop	{r4, lr}
   185b0:	b	182f0 <__assert_fail@plt+0x6cb4>
   185b4:	mov	r2, #3
   185b8:	mov	r1, #0
   185bc:	b	180a8 <__assert_fail@plt+0x6a6c>
   185c0:	ldr	r0, [r0]
   185c4:	cmp	r0, #0
   185c8:	bxlt	lr
   185cc:	push	{r4, lr}
   185d0:	bl	1160c <close@plt>
   185d4:	cmp	r0, #0
   185d8:	popeq	{r4, pc}
   185dc:	ldr	r3, [pc, #12]	; 185f0 <__assert_fail@plt+0x6fb4>
   185e0:	mov	r2, #64	; 0x40
   185e4:	ldr	r1, [pc, #8]	; 185f4 <__assert_fail@plt+0x6fb8>
   185e8:	ldr	r0, [pc, #8]	; 185f8 <__assert_fail@plt+0x6fbc>
   185ec:	bl	1163c <__assert_fail@plt>
   185f0:	andeq	sl, r1, pc, ror #6
   185f4:	andeq	sl, r1, r3, lsl #7
   185f8:	muleq	r1, r4, r3
   185fc:	push	{r4, r5, r6, lr}
   18600:	mov	r2, #18688	; 0x4900
   18604:	mov	r4, r0
   18608:	ldr	r0, [r0]
   1860c:	bl	11498 <openat64@plt>
   18610:	subs	r5, r0, #0
   18614:	blt	1862c <__assert_fail@plt+0x6ff0>
   18618:	mov	r0, r4
   1861c:	bl	185c0 <__assert_fail@plt+0x6f84>
   18620:	str	r5, [r4]
   18624:	mov	r0, #0
   18628:	pop	{r4, r5, r6, pc}
   1862c:	mvn	r0, #0
   18630:	pop	{r4, r5, r6, pc}
   18634:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18638:	mov	r7, r0
   1863c:	bl	11360 <chdir@plt>
   18640:	subs	r4, r0, #0
   18644:	beq	18830 <__assert_fail@plt+0x71f4>
   18648:	bl	114b0 <__errno_location@plt>
   1864c:	ldr	r8, [r0]
   18650:	mov	r6, r0
   18654:	cmp	r8, #36	; 0x24
   18658:	bne	18830 <__assert_fail@plt+0x71f4>
   1865c:	mov	r0, r7
   18660:	bl	1148c <strlen@plt>
   18664:	mvn	r3, #99	; 0x63
   18668:	str	r3, [sp, #4]
   1866c:	subs	r5, r0, #0
   18670:	bne	18688 <__assert_fail@plt+0x704c>
   18674:	ldr	r3, [pc, #472]	; 18854 <__assert_fail@plt+0x7218>
   18678:	ldr	r1, [pc, #472]	; 18858 <__assert_fail@plt+0x721c>
   1867c:	ldr	r0, [pc, #472]	; 1885c <__assert_fail@plt+0x7220>
   18680:	mov	r2, #126	; 0x7e
   18684:	bl	1163c <__assert_fail@plt>
   18688:	cmp	r5, #4096	; 0x1000
   1868c:	ldrcc	r3, [pc, #448]	; 18854 <__assert_fail@plt+0x7218>
   18690:	movcc	r2, #127	; 0x7f
   18694:	ldrcc	r1, [pc, #444]	; 18858 <__assert_fail@plt+0x721c>
   18698:	ldrcc	r0, [pc, #448]	; 18860 <__assert_fail@plt+0x7224>
   1869c:	bcc	18684 <__assert_fail@plt+0x7048>
   186a0:	ldr	r1, [pc, #444]	; 18864 <__assert_fail@plt+0x7228>
   186a4:	mov	r0, r7
   186a8:	bl	11630 <strspn@plt>
   186ac:	cmp	r0, #2
   186b0:	mov	r4, r0
   186b4:	bne	1872c <__assert_fail@plt+0x70f0>
   186b8:	sub	r2, r5, #3
   186bc:	mov	r1, #47	; 0x2f
   186c0:	add	r0, r7, #3
   186c4:	bl	11504 <memchr@plt>
   186c8:	subs	r4, r0, #0
   186cc:	streq	r8, [r6]
   186d0:	beq	187ac <__assert_fail@plt+0x7170>
   186d4:	mov	r3, #0
   186d8:	strb	r3, [r4]
   186dc:	mov	r1, r7
   186e0:	add	r0, sp, #4
   186e4:	bl	185fc <__assert_fail@plt+0x6fc0>
   186e8:	mov	r3, #47	; 0x2f
   186ec:	strb	r3, [r4]
   186f0:	cmp	r0, #0
   186f4:	bne	18750 <__assert_fail@plt+0x7114>
   186f8:	add	r4, r4, #1
   186fc:	mov	r0, r4
   18700:	ldr	r1, [pc, #348]	; 18864 <__assert_fail@plt+0x7228>
   18704:	bl	11630 <strspn@plt>
   18708:	add	r4, r4, r0
   1870c:	ldrb	r3, [r4]
   18710:	cmp	r3, #47	; 0x2f
   18714:	bne	18764 <__assert_fail@plt+0x7128>
   18718:	ldr	r3, [pc, #308]	; 18854 <__assert_fail@plt+0x7218>
   1871c:	mov	r2, #162	; 0xa2
   18720:	ldr	r1, [pc, #304]	; 18858 <__assert_fail@plt+0x721c>
   18724:	ldr	r0, [pc, #316]	; 18868 <__assert_fail@plt+0x722c>
   18728:	b	18684 <__assert_fail@plt+0x7048>
   1872c:	cmp	r0, #0
   18730:	moveq	r4, r7
   18734:	beq	1870c <__assert_fail@plt+0x70d0>
   18738:	ldr	r1, [pc, #292]	; 18864 <__assert_fail@plt+0x7228>
   1873c:	add	r0, sp, #4
   18740:	bl	185fc <__assert_fail@plt+0x6fc0>
   18744:	cmp	r0, #0
   18748:	addeq	r4, r7, r4
   1874c:	beq	1870c <__assert_fail@plt+0x70d0>
   18750:	ldr	r4, [r6]
   18754:	add	r0, sp, #4
   18758:	bl	185c0 <__assert_fail@plt+0x6f84>
   1875c:	str	r4, [r6]
   18760:	b	187ac <__assert_fail@plt+0x7170>
   18764:	add	r7, r7, r5
   18768:	cmp	r4, r7
   1876c:	movls	r9, #0
   18770:	ldrls	r8, [pc, #244]	; 1886c <__assert_fail@plt+0x7230>
   18774:	bls	18804 <__assert_fail@plt+0x71c8>
   18778:	ldr	r3, [pc, #212]	; 18854 <__assert_fail@plt+0x7218>
   1877c:	mov	r2, #163	; 0xa3
   18780:	ldr	r1, [pc, #208]	; 18858 <__assert_fail@plt+0x721c>
   18784:	ldr	r0, [pc, #228]	; 18870 <__assert_fail@plt+0x7234>
   18788:	b	18684 <__assert_fail@plt+0x7048>
   1878c:	mov	r2, #4096	; 0x1000
   18790:	mov	r1, #47	; 0x2f
   18794:	mov	r0, r4
   18798:	bl	114a4 <memrchr@plt>
   1879c:	subs	r5, r0, #0
   187a0:	bne	187b4 <__assert_fail@plt+0x7178>
   187a4:	mov	r3, #36	; 0x24
   187a8:	str	r3, [r6]
   187ac:	mvn	r4, #0
   187b0:	b	18830 <__assert_fail@plt+0x71f4>
   187b4:	sub	r3, r5, r4
   187b8:	cmp	r3, r8
   187bc:	strb	r9, [r5]
   187c0:	ldrgt	r3, [pc, #140]	; 18854 <__assert_fail@plt+0x7218>
   187c4:	movgt	r2, #179	; 0xb3
   187c8:	ldrgt	r1, [pc, #136]	; 18858 <__assert_fail@plt+0x721c>
   187cc:	ldrgt	r0, [pc, #160]	; 18874 <__assert_fail@plt+0x7238>
   187d0:	bgt	18684 <__assert_fail@plt+0x7048>
   187d4:	mov	r1, r4
   187d8:	add	r0, sp, #4
   187dc:	bl	185fc <__assert_fail@plt+0x6fc0>
   187e0:	mov	r3, #47	; 0x2f
   187e4:	strb	r3, [r5]
   187e8:	cmp	r0, #0
   187ec:	bne	18750 <__assert_fail@plt+0x7114>
   187f0:	add	r4, r5, #1
   187f4:	mov	r0, r4
   187f8:	ldr	r1, [pc, #100]	; 18864 <__assert_fail@plt+0x7228>
   187fc:	bl	11630 <strspn@plt>
   18800:	add	r4, r4, r0
   18804:	sub	r3, r7, r4
   18808:	cmp	r3, r8
   1880c:	bgt	1878c <__assert_fail@plt+0x7150>
   18810:	cmp	r4, r7
   18814:	bcc	1883c <__assert_fail@plt+0x7200>
   18818:	ldr	r0, [sp, #4]
   1881c:	bl	11594 <fchdir@plt>
   18820:	subs	r4, r0, #0
   18824:	bne	18750 <__assert_fail@plt+0x7114>
   18828:	add	r0, sp, #4
   1882c:	bl	185c0 <__assert_fail@plt+0x6f84>
   18830:	mov	r0, r4
   18834:	add	sp, sp, #12
   18838:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1883c:	mov	r1, r4
   18840:	add	r0, sp, #4
   18844:	bl	185fc <__assert_fail@plt+0x6fc0>
   18848:	cmp	r0, #0
   1884c:	bne	18750 <__assert_fail@plt+0x7114>
   18850:	b	18818 <__assert_fail@plt+0x71dc>
   18854:	andeq	sl, r1, r8, ror r3
   18858:	andeq	sl, r1, r3, lsl #7
   1885c:	andeq	sl, r1, r1, lsr #7
   18860:	andeq	sl, r1, r9, lsr #7
   18864:	ldrdeq	sl, [r1], -r8
   18868:			; <UNDEFINED> instruction: 0x0001a3b5
   1886c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18870:	andeq	sl, r1, r1, asr #7
   18874:	ldrdeq	sl, [r1], -r0
   18878:	push	{lr}		; (str lr, [sp, #-4]!)
   1887c:	sub	sp, sp, #268	; 0x10c
   18880:	ldr	r2, [pc, #64]	; 188c8 <__assert_fail@plt+0x728c>
   18884:	add	r1, sp, #4
   18888:	bl	188d4 <__assert_fail@plt+0x7298>
   1888c:	cmp	r0, #0
   18890:	movne	r0, #0
   18894:	bne	188c0 <__assert_fail@plt+0x7284>
   18898:	ldr	r1, [pc, #44]	; 188cc <__assert_fail@plt+0x7290>
   1889c:	add	r0, sp, #4
   188a0:	bl	11294 <strcmp@plt>
   188a4:	cmp	r0, #0
   188a8:	beq	188c0 <__assert_fail@plt+0x7284>
   188ac:	ldr	r1, [pc, #28]	; 188d0 <__assert_fail@plt+0x7294>
   188b0:	add	r0, sp, #4
   188b4:	bl	11294 <strcmp@plt>
   188b8:	adds	r0, r0, #0
   188bc:	movne	r0, #1
   188c0:	add	sp, sp, #268	; 0x10c
   188c4:	pop	{pc}		; (ldr pc, [sp], #4)
   188c8:	andeq	r0, r0, r1, lsl #2
   188cc:	andeq	sl, r1, r3, ror #7
   188d0:	andeq	sl, r1, r5, ror #7
   188d4:	push	{r4, r5, r6, lr}
   188d8:	mov	r5, r1
   188dc:	mov	r1, #0
   188e0:	mov	r4, r2
   188e4:	bl	1154c <setlocale@plt>
   188e8:	subs	r6, r0, #0
   188ec:	bne	18900 <__assert_fail@plt+0x72c4>
   188f0:	cmp	r4, #0
   188f4:	strbne	r6, [r5]
   188f8:	mov	r0, #22
   188fc:	pop	{r4, r5, r6, pc}
   18900:	bl	1148c <strlen@plt>
   18904:	cmp	r4, r0
   18908:	bls	18924 <__assert_fail@plt+0x72e8>
   1890c:	add	r2, r0, #1
   18910:	mov	r1, r6
   18914:	mov	r0, r5
   18918:	bl	112dc <memcpy@plt>
   1891c:	mov	r0, #0
   18920:	pop	{r4, r5, r6, pc}
   18924:	cmp	r4, #0
   18928:	beq	18948 <__assert_fail@plt+0x730c>
   1892c:	sub	r4, r4, #1
   18930:	mov	r2, r4
   18934:	mov	r1, r6
   18938:	mov	r0, r5
   1893c:	bl	112dc <memcpy@plt>
   18940:	mov	r3, #0
   18944:	strb	r3, [r5, r4]
   18948:	mov	r0, #34	; 0x22
   1894c:	pop	{r4, r5, r6, pc}
   18950:	mov	r1, #0
   18954:	b	1154c <setlocale@plt>
   18958:	subs	r2, r1, #1
   1895c:	bxeq	lr
   18960:	bcc	18b38 <__assert_fail@plt+0x74fc>
   18964:	cmp	r0, r1
   18968:	bls	18b1c <__assert_fail@plt+0x74e0>
   1896c:	tst	r1, r2
   18970:	beq	18b28 <__assert_fail@plt+0x74ec>
   18974:	clz	r3, r0
   18978:	clz	r2, r1
   1897c:	sub	r3, r2, r3
   18980:	rsbs	r3, r3, #31
   18984:	addne	r3, r3, r3, lsl #1
   18988:	mov	r2, #0
   1898c:	addne	pc, pc, r3, lsl #2
   18990:	nop			; (mov r0, r0)
   18994:	cmp	r0, r1, lsl #31
   18998:	adc	r2, r2, r2
   1899c:	subcs	r0, r0, r1, lsl #31
   189a0:	cmp	r0, r1, lsl #30
   189a4:	adc	r2, r2, r2
   189a8:	subcs	r0, r0, r1, lsl #30
   189ac:	cmp	r0, r1, lsl #29
   189b0:	adc	r2, r2, r2
   189b4:	subcs	r0, r0, r1, lsl #29
   189b8:	cmp	r0, r1, lsl #28
   189bc:	adc	r2, r2, r2
   189c0:	subcs	r0, r0, r1, lsl #28
   189c4:	cmp	r0, r1, lsl #27
   189c8:	adc	r2, r2, r2
   189cc:	subcs	r0, r0, r1, lsl #27
   189d0:	cmp	r0, r1, lsl #26
   189d4:	adc	r2, r2, r2
   189d8:	subcs	r0, r0, r1, lsl #26
   189dc:	cmp	r0, r1, lsl #25
   189e0:	adc	r2, r2, r2
   189e4:	subcs	r0, r0, r1, lsl #25
   189e8:	cmp	r0, r1, lsl #24
   189ec:	adc	r2, r2, r2
   189f0:	subcs	r0, r0, r1, lsl #24
   189f4:	cmp	r0, r1, lsl #23
   189f8:	adc	r2, r2, r2
   189fc:	subcs	r0, r0, r1, lsl #23
   18a00:	cmp	r0, r1, lsl #22
   18a04:	adc	r2, r2, r2
   18a08:	subcs	r0, r0, r1, lsl #22
   18a0c:	cmp	r0, r1, lsl #21
   18a10:	adc	r2, r2, r2
   18a14:	subcs	r0, r0, r1, lsl #21
   18a18:	cmp	r0, r1, lsl #20
   18a1c:	adc	r2, r2, r2
   18a20:	subcs	r0, r0, r1, lsl #20
   18a24:	cmp	r0, r1, lsl #19
   18a28:	adc	r2, r2, r2
   18a2c:	subcs	r0, r0, r1, lsl #19
   18a30:	cmp	r0, r1, lsl #18
   18a34:	adc	r2, r2, r2
   18a38:	subcs	r0, r0, r1, lsl #18
   18a3c:	cmp	r0, r1, lsl #17
   18a40:	adc	r2, r2, r2
   18a44:	subcs	r0, r0, r1, lsl #17
   18a48:	cmp	r0, r1, lsl #16
   18a4c:	adc	r2, r2, r2
   18a50:	subcs	r0, r0, r1, lsl #16
   18a54:	cmp	r0, r1, lsl #15
   18a58:	adc	r2, r2, r2
   18a5c:	subcs	r0, r0, r1, lsl #15
   18a60:	cmp	r0, r1, lsl #14
   18a64:	adc	r2, r2, r2
   18a68:	subcs	r0, r0, r1, lsl #14
   18a6c:	cmp	r0, r1, lsl #13
   18a70:	adc	r2, r2, r2
   18a74:	subcs	r0, r0, r1, lsl #13
   18a78:	cmp	r0, r1, lsl #12
   18a7c:	adc	r2, r2, r2
   18a80:	subcs	r0, r0, r1, lsl #12
   18a84:	cmp	r0, r1, lsl #11
   18a88:	adc	r2, r2, r2
   18a8c:	subcs	r0, r0, r1, lsl #11
   18a90:	cmp	r0, r1, lsl #10
   18a94:	adc	r2, r2, r2
   18a98:	subcs	r0, r0, r1, lsl #10
   18a9c:	cmp	r0, r1, lsl #9
   18aa0:	adc	r2, r2, r2
   18aa4:	subcs	r0, r0, r1, lsl #9
   18aa8:	cmp	r0, r1, lsl #8
   18aac:	adc	r2, r2, r2
   18ab0:	subcs	r0, r0, r1, lsl #8
   18ab4:	cmp	r0, r1, lsl #7
   18ab8:	adc	r2, r2, r2
   18abc:	subcs	r0, r0, r1, lsl #7
   18ac0:	cmp	r0, r1, lsl #6
   18ac4:	adc	r2, r2, r2
   18ac8:	subcs	r0, r0, r1, lsl #6
   18acc:	cmp	r0, r1, lsl #5
   18ad0:	adc	r2, r2, r2
   18ad4:	subcs	r0, r0, r1, lsl #5
   18ad8:	cmp	r0, r1, lsl #4
   18adc:	adc	r2, r2, r2
   18ae0:	subcs	r0, r0, r1, lsl #4
   18ae4:	cmp	r0, r1, lsl #3
   18ae8:	adc	r2, r2, r2
   18aec:	subcs	r0, r0, r1, lsl #3
   18af0:	cmp	r0, r1, lsl #2
   18af4:	adc	r2, r2, r2
   18af8:	subcs	r0, r0, r1, lsl #2
   18afc:	cmp	r0, r1, lsl #1
   18b00:	adc	r2, r2, r2
   18b04:	subcs	r0, r0, r1, lsl #1
   18b08:	cmp	r0, r1
   18b0c:	adc	r2, r2, r2
   18b10:	subcs	r0, r0, r1
   18b14:	mov	r0, r2
   18b18:	bx	lr
   18b1c:	moveq	r0, #1
   18b20:	movne	r0, #0
   18b24:	bx	lr
   18b28:	clz	r2, r1
   18b2c:	rsb	r2, r2, #31
   18b30:	lsr	r0, r0, r2
   18b34:	bx	lr
   18b38:	cmp	r0, #0
   18b3c:	mvnne	r0, #0
   18b40:	b	18de0 <__assert_fail@plt+0x77a4>
   18b44:	cmp	r1, #0
   18b48:	beq	18b38 <__assert_fail@plt+0x74fc>
   18b4c:	push	{r0, r1, lr}
   18b50:	bl	18958 <__assert_fail@plt+0x731c>
   18b54:	pop	{r1, r2, lr}
   18b58:	mul	r3, r2, r0
   18b5c:	sub	r1, r1, r3
   18b60:	bx	lr
   18b64:	cmp	r1, #0
   18b68:	beq	18d74 <__assert_fail@plt+0x7738>
   18b6c:	eor	ip, r0, r1
   18b70:	rsbmi	r1, r1, #0
   18b74:	subs	r2, r1, #1
   18b78:	beq	18d40 <__assert_fail@plt+0x7704>
   18b7c:	movs	r3, r0
   18b80:	rsbmi	r3, r0, #0
   18b84:	cmp	r3, r1
   18b88:	bls	18d4c <__assert_fail@plt+0x7710>
   18b8c:	tst	r1, r2
   18b90:	beq	18d5c <__assert_fail@plt+0x7720>
   18b94:	clz	r2, r3
   18b98:	clz	r0, r1
   18b9c:	sub	r2, r0, r2
   18ba0:	rsbs	r2, r2, #31
   18ba4:	addne	r2, r2, r2, lsl #1
   18ba8:	mov	r0, #0
   18bac:	addne	pc, pc, r2, lsl #2
   18bb0:	nop			; (mov r0, r0)
   18bb4:	cmp	r3, r1, lsl #31
   18bb8:	adc	r0, r0, r0
   18bbc:	subcs	r3, r3, r1, lsl #31
   18bc0:	cmp	r3, r1, lsl #30
   18bc4:	adc	r0, r0, r0
   18bc8:	subcs	r3, r3, r1, lsl #30
   18bcc:	cmp	r3, r1, lsl #29
   18bd0:	adc	r0, r0, r0
   18bd4:	subcs	r3, r3, r1, lsl #29
   18bd8:	cmp	r3, r1, lsl #28
   18bdc:	adc	r0, r0, r0
   18be0:	subcs	r3, r3, r1, lsl #28
   18be4:	cmp	r3, r1, lsl #27
   18be8:	adc	r0, r0, r0
   18bec:	subcs	r3, r3, r1, lsl #27
   18bf0:	cmp	r3, r1, lsl #26
   18bf4:	adc	r0, r0, r0
   18bf8:	subcs	r3, r3, r1, lsl #26
   18bfc:	cmp	r3, r1, lsl #25
   18c00:	adc	r0, r0, r0
   18c04:	subcs	r3, r3, r1, lsl #25
   18c08:	cmp	r3, r1, lsl #24
   18c0c:	adc	r0, r0, r0
   18c10:	subcs	r3, r3, r1, lsl #24
   18c14:	cmp	r3, r1, lsl #23
   18c18:	adc	r0, r0, r0
   18c1c:	subcs	r3, r3, r1, lsl #23
   18c20:	cmp	r3, r1, lsl #22
   18c24:	adc	r0, r0, r0
   18c28:	subcs	r3, r3, r1, lsl #22
   18c2c:	cmp	r3, r1, lsl #21
   18c30:	adc	r0, r0, r0
   18c34:	subcs	r3, r3, r1, lsl #21
   18c38:	cmp	r3, r1, lsl #20
   18c3c:	adc	r0, r0, r0
   18c40:	subcs	r3, r3, r1, lsl #20
   18c44:	cmp	r3, r1, lsl #19
   18c48:	adc	r0, r0, r0
   18c4c:	subcs	r3, r3, r1, lsl #19
   18c50:	cmp	r3, r1, lsl #18
   18c54:	adc	r0, r0, r0
   18c58:	subcs	r3, r3, r1, lsl #18
   18c5c:	cmp	r3, r1, lsl #17
   18c60:	adc	r0, r0, r0
   18c64:	subcs	r3, r3, r1, lsl #17
   18c68:	cmp	r3, r1, lsl #16
   18c6c:	adc	r0, r0, r0
   18c70:	subcs	r3, r3, r1, lsl #16
   18c74:	cmp	r3, r1, lsl #15
   18c78:	adc	r0, r0, r0
   18c7c:	subcs	r3, r3, r1, lsl #15
   18c80:	cmp	r3, r1, lsl #14
   18c84:	adc	r0, r0, r0
   18c88:	subcs	r3, r3, r1, lsl #14
   18c8c:	cmp	r3, r1, lsl #13
   18c90:	adc	r0, r0, r0
   18c94:	subcs	r3, r3, r1, lsl #13
   18c98:	cmp	r3, r1, lsl #12
   18c9c:	adc	r0, r0, r0
   18ca0:	subcs	r3, r3, r1, lsl #12
   18ca4:	cmp	r3, r1, lsl #11
   18ca8:	adc	r0, r0, r0
   18cac:	subcs	r3, r3, r1, lsl #11
   18cb0:	cmp	r3, r1, lsl #10
   18cb4:	adc	r0, r0, r0
   18cb8:	subcs	r3, r3, r1, lsl #10
   18cbc:	cmp	r3, r1, lsl #9
   18cc0:	adc	r0, r0, r0
   18cc4:	subcs	r3, r3, r1, lsl #9
   18cc8:	cmp	r3, r1, lsl #8
   18ccc:	adc	r0, r0, r0
   18cd0:	subcs	r3, r3, r1, lsl #8
   18cd4:	cmp	r3, r1, lsl #7
   18cd8:	adc	r0, r0, r0
   18cdc:	subcs	r3, r3, r1, lsl #7
   18ce0:	cmp	r3, r1, lsl #6
   18ce4:	adc	r0, r0, r0
   18ce8:	subcs	r3, r3, r1, lsl #6
   18cec:	cmp	r3, r1, lsl #5
   18cf0:	adc	r0, r0, r0
   18cf4:	subcs	r3, r3, r1, lsl #5
   18cf8:	cmp	r3, r1, lsl #4
   18cfc:	adc	r0, r0, r0
   18d00:	subcs	r3, r3, r1, lsl #4
   18d04:	cmp	r3, r1, lsl #3
   18d08:	adc	r0, r0, r0
   18d0c:	subcs	r3, r3, r1, lsl #3
   18d10:	cmp	r3, r1, lsl #2
   18d14:	adc	r0, r0, r0
   18d18:	subcs	r3, r3, r1, lsl #2
   18d1c:	cmp	r3, r1, lsl #1
   18d20:	adc	r0, r0, r0
   18d24:	subcs	r3, r3, r1, lsl #1
   18d28:	cmp	r3, r1
   18d2c:	adc	r0, r0, r0
   18d30:	subcs	r3, r3, r1
   18d34:	cmp	ip, #0
   18d38:	rsbmi	r0, r0, #0
   18d3c:	bx	lr
   18d40:	teq	ip, r0
   18d44:	rsbmi	r0, r0, #0
   18d48:	bx	lr
   18d4c:	movcc	r0, #0
   18d50:	asreq	r0, ip, #31
   18d54:	orreq	r0, r0, #1
   18d58:	bx	lr
   18d5c:	clz	r2, r1
   18d60:	rsb	r2, r2, #31
   18d64:	cmp	ip, #0
   18d68:	lsr	r0, r3, r2
   18d6c:	rsbmi	r0, r0, #0
   18d70:	bx	lr
   18d74:	cmp	r0, #0
   18d78:	mvngt	r0, #-2147483648	; 0x80000000
   18d7c:	movlt	r0, #-2147483648	; 0x80000000
   18d80:	b	18de0 <__assert_fail@plt+0x77a4>
   18d84:	cmp	r1, #0
   18d88:	beq	18d74 <__assert_fail@plt+0x7738>
   18d8c:	push	{r0, r1, lr}
   18d90:	bl	18b6c <__assert_fail@plt+0x7530>
   18d94:	pop	{r1, r2, lr}
   18d98:	mul	r3, r2, r0
   18d9c:	sub	r1, r1, r3
   18da0:	bx	lr
   18da4:	cmp	r3, #0
   18da8:	cmpeq	r2, #0
   18dac:	bne	18dc4 <__assert_fail@plt+0x7788>
   18db0:	cmp	r1, #0
   18db4:	cmpeq	r0, #0
   18db8:	mvnne	r1, #0
   18dbc:	mvnne	r0, #0
   18dc0:	b	18de0 <__assert_fail@plt+0x77a4>
   18dc4:	sub	sp, sp, #8
   18dc8:	push	{sp, lr}
   18dcc:	bl	18df0 <__assert_fail@plt+0x77b4>
   18dd0:	ldr	lr, [sp, #4]
   18dd4:	add	sp, sp, #8
   18dd8:	pop	{r2, r3}
   18ddc:	bx	lr
   18de0:	push	{r1, lr}
   18de4:	mov	r0, #8
   18de8:	bl	1127c <raise@plt>
   18dec:	pop	{r1, pc}
   18df0:	cmp	r1, r3
   18df4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18df8:	cmpeq	r0, r2
   18dfc:	mov	r4, r0
   18e00:	mov	r5, r1
   18e04:	ldr	r9, [sp, #28]
   18e08:	movcc	r0, #0
   18e0c:	movcc	r1, #0
   18e10:	bcc	18f08 <__assert_fail@plt+0x78cc>
   18e14:	cmp	r3, #0
   18e18:	clzeq	ip, r2
   18e1c:	clzne	ip, r3
   18e20:	addeq	ip, ip, #32
   18e24:	cmp	r5, #0
   18e28:	clzeq	r1, r4
   18e2c:	addeq	r1, r1, #32
   18e30:	clzne	r1, r5
   18e34:	sub	ip, ip, r1
   18e38:	sub	lr, ip, #32
   18e3c:	lsl	r7, r3, ip
   18e40:	rsb	r8, ip, #32
   18e44:	orr	r7, r7, r2, lsl lr
   18e48:	orr	r7, r7, r2, lsr r8
   18e4c:	lsl	r6, r2, ip
   18e50:	cmp	r5, r7
   18e54:	cmpeq	r4, r6
   18e58:	movcc	r0, #0
   18e5c:	movcc	r1, #0
   18e60:	bcc	18e7c <__assert_fail@plt+0x7840>
   18e64:	mov	r3, #1
   18e68:	subs	r4, r4, r6
   18e6c:	lsl	r1, r3, lr
   18e70:	lsl	r0, r3, ip
   18e74:	orr	r1, r1, r3, lsr r8
   18e78:	sbc	r5, r5, r7
   18e7c:	cmp	ip, #0
   18e80:	beq	18f08 <__assert_fail@plt+0x78cc>
   18e84:	lsrs	r3, r7, #1
   18e88:	rrx	r2, r6
   18e8c:	mov	r6, ip
   18e90:	b	18eb4 <__assert_fail@plt+0x7878>
   18e94:	subs	r4, r4, r2
   18e98:	sbc	r5, r5, r3
   18e9c:	adds	r4, r4, r4
   18ea0:	adc	r5, r5, r5
   18ea4:	adds	r4, r4, #1
   18ea8:	adc	r5, r5, #0
   18eac:	subs	r6, r6, #1
   18eb0:	beq	18ed0 <__assert_fail@plt+0x7894>
   18eb4:	cmp	r5, r3
   18eb8:	cmpeq	r4, r2
   18ebc:	bcs	18e94 <__assert_fail@plt+0x7858>
   18ec0:	adds	r4, r4, r4
   18ec4:	adc	r5, r5, r5
   18ec8:	subs	r6, r6, #1
   18ecc:	bne	18eb4 <__assert_fail@plt+0x7878>
   18ed0:	lsr	r6, r4, ip
   18ed4:	lsr	r7, r5, ip
   18ed8:	orr	r6, r6, r5, lsl r8
   18edc:	adds	r2, r0, r4
   18ee0:	orr	r6, r6, r5, lsr lr
   18ee4:	adc	r3, r1, r5
   18ee8:	lsl	r1, r7, ip
   18eec:	orr	r1, r1, r6, lsl lr
   18ef0:	lsl	r0, r6, ip
   18ef4:	orr	r1, r1, r6, lsr r8
   18ef8:	subs	r0, r2, r0
   18efc:	mov	r4, r6
   18f00:	mov	r5, r7
   18f04:	sbc	r1, r3, r1
   18f08:	cmp	r9, #0
   18f0c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18f10:	strd	r4, [r9]
   18f14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f1c:	mov	r7, r0
   18f20:	ldr	r6, [pc, #72]	; 18f70 <__assert_fail@plt+0x7934>
   18f24:	ldr	r5, [pc, #72]	; 18f74 <__assert_fail@plt+0x7938>
   18f28:	add	r6, pc, r6
   18f2c:	add	r5, pc, r5
   18f30:	sub	r6, r6, r5
   18f34:	mov	r8, r1
   18f38:	mov	r9, r2
   18f3c:	bl	11238 <fstatfs64@plt-0x20>
   18f40:	asrs	r6, r6, #2
   18f44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f48:	mov	r4, #0
   18f4c:	add	r4, r4, #1
   18f50:	ldr	r3, [r5], #4
   18f54:	mov	r2, r9
   18f58:	mov	r1, r8
   18f5c:	mov	r0, r7
   18f60:	blx	r3
   18f64:	cmp	r6, r4
   18f68:	bne	18f4c <__assert_fail@plt+0x7910>
   18f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f70:	ldrdeq	r1, [r1], -r8
   18f74:	ldrdeq	r1, [r1], -r0
   18f78:	bx	lr
   18f7c:	ldr	r3, [pc, #12]	; 18f90 <__assert_fail@plt+0x7954>
   18f80:	mov	r1, #0
   18f84:	add	r3, pc, r3
   18f88:	ldr	r2, [r3]
   18f8c:	b	114c8 <__cxa_atexit@plt>
   18f90:	ldrdeq	r2, [r1], -r8
   18f94:	mov	r2, r1
   18f98:	mov	r1, r0
   18f9c:	mov	r0, #3
   18fa0:	b	115dc <__xstat64@plt>
   18fa4:	mov	r2, r1
   18fa8:	mov	r1, r0
   18fac:	mov	r0, #3
   18fb0:	b	11384 <__fxstat64@plt>
   18fb4:	mov	r2, r1
   18fb8:	mov	r1, r0
   18fbc:	mov	r0, #3
   18fc0:	b	11618 <__lxstat64@plt>
   18fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   18fc8:	sub	sp, sp, #12
   18fcc:	str	r3, [sp]
   18fd0:	mov	r3, r2
   18fd4:	mov	r2, r1
   18fd8:	mov	r1, r0
   18fdc:	mov	r0, #3
   18fe0:	bl	1136c <__fxstatat64@plt>
   18fe4:	add	sp, sp, #12
   18fe8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018fec <.fini>:
   18fec:	push	{r3, lr}
   18ff0:	pop	{r3, pc}
