
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

00000584 <_init>:
 584:	push	{r3, lr}
 588:	bl	610 <call_weak_fn>
 58c:	pop	{r3, pc}

Disassembly of section .plt:

00000590 <.plt>:
 590:	push	{lr}		; (str lr, [sp, #-4]!)
 594:	ldr	lr, [pc, #4]	; 5a0 <.plt+0x10>
 598:	add	lr, pc, lr
 59c:	ldr	pc, [lr, #8]!
 5a0:	.word	0x00011a60

000005a4 <raise@plt>:
 5a4:	add	ip, pc, #0, 12
 5a8:	add	ip, ip, #69632	; 0x11000
 5ac:	ldr	pc, [ip, #2656]!	; 0xa60

000005b0 <__cxa_finalize@plt>:
 5b0:	add	ip, pc, #0, 12
 5b4:	add	ip, ip, #69632	; 0x11000
 5b8:	ldr	pc, [ip, #2648]!	; 0xa58

000005bc <__gmon_start__@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #69632	; 0x11000
 5c4:	ldr	pc, [ip, #2640]!	; 0xa50

000005c8 <sendto_one_numeric@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #69632	; 0x11000
 5d0:	ldr	pc, [ip, #2632]!	; 0xa48

000005d4 <strlen@plt>:
 5d4:	add	ip, pc, #0, 12
 5d8:	add	ip, ip, #69632	; 0x11000
 5dc:	ldr	pc, [ip, #2624]!	; 0xa40

000005e0 <snprintf@plt>:
 5e0:	add	ip, pc, #0, 12
 5e4:	add	ip, ip, #69632	; 0x11000
 5e8:	ldr	pc, [ip, #2616]!	; 0xa38

000005ec <scache_send_missing@plt>:
 5ec:	add	ip, pc, #0, 12
 5f0:	add	ip, ip, #69632	; 0x11000
 5f4:	ldr	pc, [ip, #2608]!	; 0xa30

000005f8 <rb_strlcpy@plt>:
 5f8:	add	ip, pc, #0, 12
 5fc:	add	ip, ip, #69632	; 0x11000
 600:	ldr	pc, [ip, #2600]!	; 0xa28

00000604 <rb_strlcat@plt>:
 604:	add	ip, pc, #0, 12
 608:	add	ip, ip, #69632	; 0x11000
 60c:	ldr	pc, [ip, #2592]!	; 0xa20

Disassembly of section .text:

00000610 <call_weak_fn>:
 610:	ldr	r3, [pc, #20]	; 62c <call_weak_fn+0x1c>
 614:	ldr	r2, [pc, #20]	; 630 <call_weak_fn+0x20>
 618:	add	r3, pc, r3
 61c:	ldr	r2, [r3, r2]
 620:	cmp	r2, #0
 624:	bxeq	lr
 628:	b	5bc <__gmon_start__@plt>
 62c:	.word	0x000119e0
 630:	.word	0x00000044

00000634 <deregister_tm_clones>:
 634:	ldr	r3, [pc, #52]	; 670 <deregister_tm_clones+0x3c>
 638:	ldr	r0, [pc, #52]	; 674 <deregister_tm_clones+0x40>
 63c:	add	r3, pc, r3
 640:	add	r0, pc, r0
 644:	add	r3, r3, #3
 648:	sub	r3, r3, r0
 64c:	cmp	r3, #6
 650:	ldr	r3, [pc, #32]	; 678 <deregister_tm_clones+0x44>
 654:	add	r3, pc, r3
 658:	bxls	lr
 65c:	ldr	r2, [pc, #24]	; 67c <deregister_tm_clones+0x48>
 660:	ldr	r3, [r3, r2]
 664:	cmp	r3, #0
 668:	bxeq	lr
 66c:	bx	r3
 670:	.word	0x00011a8c
 674:	.word	0x00011a88
 678:	.word	0x000119a4
 67c:	.word	0x00000038

00000680 <register_tm_clones>:
 680:	ldr	r1, [pc, #56]	; 6c0 <register_tm_clones+0x40>
 684:	ldr	r0, [pc, #56]	; 6c4 <register_tm_clones+0x44>
 688:	add	r1, pc, r1
 68c:	add	r0, pc, r0
 690:	sub	r1, r1, r0
 694:	ldr	r3, [pc, #44]	; 6c8 <register_tm_clones+0x48>
 698:	asr	r1, r1, #2
 69c:	add	r3, pc, r3
 6a0:	add	r1, r1, r1, lsr #31
 6a4:	asrs	r1, r1, #1
 6a8:	bxeq	lr
 6ac:	ldr	r2, [pc, #24]	; 6cc <register_tm_clones+0x4c>
 6b0:	ldr	r3, [r3, r2]
 6b4:	cmp	r3, #0
 6b8:	bxeq	lr
 6bc:	bx	r3
 6c0:	.word	0x00011a40
 6c4:	.word	0x00011a3c
 6c8:	.word	0x0001195c
 6cc:	.word	0x0000004c

000006d0 <__do_global_dtors_aux>:
 6d0:	ldr	r3, [pc, #76]	; 724 <__do_global_dtors_aux+0x54>
 6d4:	ldr	r2, [pc, #76]	; 728 <__do_global_dtors_aux+0x58>
 6d8:	add	r3, pc, r3
 6dc:	add	r2, pc, r2
 6e0:	ldrb	r3, [r3]
 6e4:	cmp	r3, #0
 6e8:	bxne	lr
 6ec:	ldr	r3, [pc, #56]	; 72c <__do_global_dtors_aux+0x5c>
 6f0:	push	{r4, lr}
 6f4:	ldr	r3, [r2, r3]
 6f8:	cmp	r3, #0
 6fc:	beq	70c <__do_global_dtors_aux+0x3c>
 700:	ldr	r3, [pc, #40]	; 730 <__do_global_dtors_aux+0x60>
 704:	ldr	r0, [pc, r3]
 708:	bl	5b0 <__cxa_finalize@plt>
 70c:	bl	634 <deregister_tm_clones>
 710:	ldr	r3, [pc, #28]	; 734 <__do_global_dtors_aux+0x64>
 714:	mov	r2, #1
 718:	add	r3, pc, r3
 71c:	strb	r2, [r3]
 720:	pop	{r4, pc}
 724:	.word	0x000119f0
 728:	.word	0x0001191c
 72c:	.word	0x00000034
 730:	.word	0x0001194c
 734:	.word	0x000119b0

00000738 <frame_dummy>:
 738:	ldr	r0, [pc, #56]	; 778 <frame_dummy+0x40>
 73c:	ldr	r3, [pc, #56]	; 77c <frame_dummy+0x44>
 740:	add	r0, pc, r0
 744:	ldr	r2, [r0]
 748:	add	r3, pc, r3
 74c:	cmp	r2, #0
 750:	bne	758 <frame_dummy+0x20>
 754:	b	680 <register_tm_clones>
 758:	ldr	r2, [pc, #32]	; 780 <frame_dummy+0x48>
 75c:	ldr	r3, [r3, r2]
 760:	cmp	r3, #0
 764:	beq	754 <frame_dummy+0x1c>
 768:	push	{r4, lr}
 76c:	blx	r3
 770:	pop	{r4, lr}
 774:	b	680 <register_tm_clones>
 778:	.word	0x000117b4
 77c:	.word	0x000118b0
 780:	.word	0x00000048

00000784 <dump_map>:
 784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 788:	sub	sp, sp, #20
 78c:	str	r0, [sp, #8]
 790:	mov	r6, r1
 794:	mov	r4, r2
 798:	ldr	r5, [pc, #480]	; 980 <dump_map+0x1fc>
 79c:	add	r5, pc, r5
 7a0:	mov	r3, #0
 7a4:	strb	r3, [r2]
 7a8:	mov	r2, #512	; 0x200
 7ac:	add	r1, r1, #88	; 0x58
 7b0:	mov	r0, r4
 7b4:	bl	604 <rb_strlcat@plt>
 7b8:	ldrb	r3, [r6, #396]	; 0x18c
 7bc:	cmp	r3, #0
 7c0:	bne	944 <dump_map+0x1c0>
 7c4:	ldr	r7, [pc, #440]	; 984 <dump_map+0x200>
 7c8:	add	r7, pc, r7
 7cc:	mov	r0, r7
 7d0:	bl	5d4 <strlen@plt>
 7d4:	mov	r3, #32
 7d8:	strb	r3, [r7, r0]
 7dc:	cmp	r0, #49	; 0x31
 7e0:	bgt	810 <dump_map+0x8c>
 7e4:	add	r3, r0, #1
 7e8:	cmp	r3, #49	; 0x31
 7ec:	bgt	810 <dump_map+0x8c>
 7f0:	ldr	r2, [pc, #400]	; 988 <dump_map+0x204>
 7f4:	add	r2, pc, r2
 7f8:	add	r3, r2, r0
 7fc:	add	r2, r2, #49	; 0x31
 800:	mov	r1, #45	; 0x2d
 804:	strb	r1, [r3, #1]!
 808:	cmp	r3, r2
 80c:	bne	804 <dump_map+0x80>
 810:	ldr	r3, [r6, #28]
 814:	ldr	r7, [r3, #56]	; 0x38
 818:	ldr	r3, [pc, #364]	; 98c <dump_map+0x208>
 81c:	ldr	r3, [r5, r3]
 820:	ldr	r1, [r3, #4]
 824:	add	r3, r1, r1, lsr #31
 828:	asr	r3, r3, #1
 82c:	mov	r0, #1000	; 0x3e8
 830:	mla	r0, r0, r7, r3
 834:	bl	d70 <__udivsi3>
 838:	ldr	r5, [pc, #336]	; 990 <dump_map+0x20c>
 83c:	add	r5, pc, r5
 840:	ldr	r2, [pc, #332]	; 994 <dump_map+0x210>
 844:	smull	r2, r3, r2, r0
 848:	asr	r2, r0, #31
 84c:	rsb	r2, r2, r3, asr #2
 850:	add	r3, r2, r2, lsl #2
 854:	sub	r0, r0, r3, lsl #1
 858:	str	r0, [sp, #4]
 85c:	str	r2, [sp]
 860:	mov	r3, r7
 864:	ldr	r2, [pc, #300]	; 998 <dump_map+0x214>
 868:	add	r2, pc, r2
 86c:	ldr	r1, [pc, #296]	; 99c <dump_map+0x218>
 870:	add	r0, r5, #50	; 0x32
 874:	bl	5e0 <snprintf@plt>
 878:	mov	r3, r5
 87c:	ldr	r2, [pc, #284]	; 9a0 <dump_map+0x21c>
 880:	add	r2, pc, r2
 884:	mov	r1, #15
 888:	ldr	r0, [sp, #8]
 88c:	bl	5c8 <sendto_one_numeric@plt>
 890:	ldr	r3, [r6, #28]
 894:	ldr	r5, [r3, #36]	; 0x24
 898:	cmp	r5, #0
 89c:	beq	93c <dump_map+0x1b8>
 8a0:	ldr	r7, [r3, #44]	; 0x2c
 8a4:	ldr	r3, [pc, #248]	; 9a4 <dump_map+0x220>
 8a8:	add	r3, pc, r3
 8ac:	add	r3, r3, #3
 8b0:	cmp	r7, #0
 8b4:	cmpne	r4, r3
 8b8:	bls	8e4 <dump_map+0x160>
 8bc:	mov	r3, #32
 8c0:	strb	r3, [r4, #-2]
 8c4:	ldrb	r3, [r4, #-3]
 8c8:	cmp	r3, #96	; 0x60
 8cc:	moveq	r3, #32
 8d0:	strbeq	r3, [r4, #-3]
 8d4:	ldr	r3, [r6, #28]
 8d8:	ldr	r5, [r3, #36]	; 0x24
 8dc:	cmp	r5, #0
 8e0:	beq	93c <dump_map+0x1b8>
 8e4:	mov	r6, #1
 8e8:	mov	r8, #32
 8ec:	mov	fp, #96	; 0x60
 8f0:	mov	sl, #124	; 0x7c
 8f4:	mov	r9, #45	; 0x2d
 8f8:	add	r3, r4, #4
 8fc:	str	r3, [sp, #12]
 900:	ldr	r1, [r5]
 904:	strb	r8, [r4]
 908:	cmp	r7, r6
 90c:	movle	r3, fp
 910:	movgt	r3, sl
 914:	strb	r3, [r4, #1]
 918:	strb	r9, [r4, #2]
 91c:	strb	r8, [r4, #3]
 920:	ldr	r2, [sp, #12]
 924:	ldr	r0, [sp, #8]
 928:	bl	784 <dump_map>
 92c:	add	r6, r6, #1
 930:	ldr	r5, [r5, #8]
 934:	cmp	r5, #0
 938:	bne	900 <dump_map+0x17c>
 93c:	add	sp, sp, #20
 940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 944:	mov	r2, #512	; 0x200
 948:	ldr	r1, [pc, #88]	; 9a8 <dump_map+0x224>
 94c:	add	r1, pc, r1
 950:	mov	r0, r4
 954:	bl	604 <rb_strlcat@plt>
 958:	mov	r2, #512	; 0x200
 95c:	add	r1, r6, #396	; 0x18c
 960:	mov	r0, r4
 964:	bl	604 <rb_strlcat@plt>
 968:	mov	r2, #512	; 0x200
 96c:	ldr	r1, [pc, #56]	; 9ac <dump_map+0x228>
 970:	add	r1, pc, r1
 974:	mov	r0, r4
 978:	bl	604 <rb_strlcat@plt>
 97c:	b	7c4 <dump_map+0x40>
 980:	.word	0x0001185c
 984:	.word	0x00011904
 988:	.word	0x000118d8
 98c:	.word	0x0000003c
 990:	.word	0x00011890
 994:	.word	0x66666667
 998:	.word	0x0000076c
 99c:	.word	0x000001ce
 9a0:	.word	0x00000770
 9a4:	.word	0x00011824
 9a8:	.word	0x00000680
 9ac:	.word	0x00000660

000009b0 <mo_map>:
 9b0:	push	{r4, lr}
 9b4:	sub	sp, sp, #8
 9b8:	mov	r4, r1
 9bc:	ldr	r3, [pc, #68]	; a08 <mo_map+0x58>
 9c0:	add	r3, pc, r3
 9c4:	ldr	r2, [pc, #64]	; a0c <mo_map+0x5c>
 9c8:	ldr	r3, [r3, r2]
 9cc:	str	r3, [sp, #4]
 9d0:	ldr	r2, [pc, #56]	; a10 <mo_map+0x60>
 9d4:	add	r2, pc, r2
 9d8:	mov	r1, r3
 9dc:	mov	r0, r4
 9e0:	bl	784 <dump_map>
 9e4:	mov	r0, r4
 9e8:	bl	5ec <scache_send_missing@plt>
 9ec:	ldr	r2, [pc, #32]	; a14 <mo_map+0x64>
 9f0:	add	r2, pc, r2
 9f4:	mov	r1, #17
 9f8:	mov	r0, r4
 9fc:	bl	5c8 <sendto_one_numeric@plt>
 a00:	add	sp, sp, #8
 a04:	pop	{r4, pc}
 a08:	.word	0x00011638
 a0c:	.word	0x00000050
 a10:	.word	0x000116f8
 a14:	.word	0x00000604

00000a18 <flattened_map>:
 a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 a1c:	vpush	{d8}
 a20:	sub	sp, sp, #532	; 0x214
 a24:	str	r0, [sp, #8]
 a28:	ldr	r8, [pc, #584]	; c78 <flattened_map+0x260>
 a2c:	add	r8, pc, r8
 a30:	ldr	r3, [pc, #580]	; c7c <flattened_map+0x264>
 a34:	ldr	r1, [r8, r3]
 a38:	mov	r2, #512	; 0x200
 a3c:	add	r1, r1, #88	; 0x58
 a40:	add	r4, sp, #16
 a44:	mov	r0, r4
 a48:	bl	5f8 <rb_strlcpy@plt>
 a4c:	mov	r0, r4
 a50:	bl	5d4 <strlen@plt>
 a54:	add	r3, sp, #528	; 0x210
 a58:	add	r3, r3, r0
 a5c:	mov	r2, #32
 a60:	strb	r2, [r3, #-512]	; 0xfffffe00
 a64:	cmp	r0, #49	; 0x31
 a68:	bgt	a94 <flattened_map+0x7c>
 a6c:	add	r3, r0, #1
 a70:	cmp	r3, #49	; 0x31
 a74:	bgt	a94 <flattened_map+0x7c>
 a78:	add	r2, sp, #16
 a7c:	add	r3, r2, r0
 a80:	add	r2, sp, #65	; 0x41
 a84:	mov	r1, #45	; 0x2d
 a88:	strb	r1, [r3, #1]!
 a8c:	cmp	r3, r2
 a90:	bne	a88 <flattened_map+0x70>
 a94:	ldr	r3, [pc, #480]	; c7c <flattened_map+0x264>
 a98:	ldr	r3, [r8, r3]
 a9c:	ldr	r3, [r3, #28]
 aa0:	ldr	r3, [r3, #56]	; 0x38
 aa4:	vmov	s15, r3
 aa8:	vcvt.f32.u32	s13, s15
 aac:	vldr	s15, [pc, #448]	; c74 <flattened_map+0x25c>
 ab0:	vmul.f32	s13, s13, s15
 ab4:	ldr	r2, [pc, #452]	; c80 <flattened_map+0x268>
 ab8:	ldr	r2, [r8, r2]
 abc:	vldr	s15, [r2, #4]
 ac0:	vcvt.f32.s32	s15, s15
 ac4:	vdiv.f32	s14, s13, s15
 ac8:	vcvt.f64.f32	d7, s14
 acc:	vstr	d7, [sp]
 ad0:	ldr	r2, [pc, #428]	; c84 <flattened_map+0x26c>
 ad4:	add	r2, pc, r2
 ad8:	ldr	r1, [pc, #424]	; c88 <flattened_map+0x270>
 adc:	add	r4, sp, #16
 ae0:	add	r0, sp, #66	; 0x42
 ae4:	bl	5e0 <snprintf@plt>
 ae8:	mov	r3, r4
 aec:	ldr	r2, [pc, #408]	; c8c <flattened_map+0x274>
 af0:	add	r2, pc, r2
 af4:	mov	r1, #15
 af8:	ldr	r0, [sp, #8]
 afc:	bl	5c8 <sendto_one_numeric@plt>
 b00:	ldr	r3, [pc, #392]	; c90 <flattened_map+0x278>
 b04:	ldr	r3, [r8, r3]
 b08:	ldr	r4, [r3]
 b0c:	cmp	r4, #0
 b10:	beq	c68 <flattened_map+0x250>
 b14:	mov	r7, #0
 b18:	ldr	fp, [pc, #372]	; c94 <flattened_map+0x27c>
 b1c:	add	fp, pc, fp
 b20:	vldr	s16, [pc, #332]	; c74 <flattened_map+0x25c>
 b24:	ldr	sl, [pc, #364]	; c98 <flattened_map+0x280>
 b28:	add	sl, pc, sl
 b2c:	ldr	r9, [pc, #360]	; c9c <flattened_map+0x284>
 b30:	add	r9, pc, r9
 b34:	ldr	r3, [pc, #356]	; ca0 <flattened_map+0x288>
 b38:	add	r3, pc, r3
 b3c:	str	r3, [sp, #12]
 b40:	b	c28 <flattened_map+0x210>
 b44:	ldr	r3, [pc, #324]	; c90 <flattened_map+0x278>
 b48:	ldr	r3, [r8, r3]
 b4c:	ldr	r3, [r3, #8]
 b50:	cmp	r7, r3
 b54:	mov	r2, #512	; 0x200
 b58:	ldreq	r1, [sp, #12]
 b5c:	movne	r1, r9
 b60:	add	r0, sp, #16
 b64:	bl	5f8 <rb_strlcpy@plt>
 b68:	mov	r2, #512	; 0x200
 b6c:	add	r1, r5, #88	; 0x58
 b70:	add	r6, sp, #16
 b74:	mov	r0, r6
 b78:	bl	604 <rb_strlcat@plt>
 b7c:	mov	r0, r6
 b80:	bl	5d4 <strlen@plt>
 b84:	add	r3, sp, #528	; 0x210
 b88:	add	r3, r3, r0
 b8c:	mov	r2, #32
 b90:	strb	r2, [r3, #-512]	; 0xfffffe00
 b94:	cmp	r0, #49	; 0x31
 b98:	bgt	bc4 <flattened_map+0x1ac>
 b9c:	add	r3, r0, #1
 ba0:	cmp	r3, #49	; 0x31
 ba4:	bgt	bc4 <flattened_map+0x1ac>
 ba8:	add	r2, sp, #16
 bac:	add	r3, r2, r0
 bb0:	add	r2, sp, #65	; 0x41
 bb4:	mov	r1, #45	; 0x2d
 bb8:	strb	r1, [r3, #1]!
 bbc:	cmp	r2, r3
 bc0:	bne	bb8 <flattened_map+0x1a0>
 bc4:	ldr	r3, [r5, #28]
 bc8:	ldr	r3, [r3, #56]	; 0x38
 bcc:	vmov	s15, r3
 bd0:	vcvt.f32.u32	s13, s15
 bd4:	vmul.f32	s13, s13, s16
 bd8:	ldr	r2, [pc, #160]	; c80 <flattened_map+0x268>
 bdc:	ldr	r2, [r8, r2]
 be0:	vldr	s15, [r2, #4]
 be4:	vcvt.f32.s32	s15, s15
 be8:	vdiv.f32	s14, s13, s15
 bec:	vcvt.f64.f32	d7, s14
 bf0:	vstr	d7, [sp]
 bf4:	mov	r2, fp
 bf8:	ldr	r1, [pc, #136]	; c88 <flattened_map+0x270>
 bfc:	add	r5, sp, #16
 c00:	add	r0, sp, #66	; 0x42
 c04:	bl	5e0 <snprintf@plt>
 c08:	mov	r3, r5
 c0c:	mov	r2, sl
 c10:	mov	r1, #15
 c14:	ldr	r0, [sp, #8]
 c18:	bl	5c8 <sendto_one_numeric@plt>
 c1c:	ldr	r4, [r4, #8]
 c20:	cmp	r4, #0
 c24:	beq	c68 <flattened_map+0x250>
 c28:	ldr	r5, [r4]
 c2c:	add	r7, r7, #1
 c30:	ldrh	r3, [r5, #80]	; 0x50
 c34:	cmp	r3, #4
 c38:	beq	c1c <flattened_map+0x204>
 c3c:	ldr	r3, [pc, #96]	; ca4 <flattened_map+0x28c>
 c40:	ldr	r3, [r8, r3]
 c44:	ldr	r3, [r3, #12]
 c48:	cmp	r3, #0
 c4c:	bne	b44 <flattened_map+0x12c>
 c50:	ldrd	r2, [r5, #64]	; 0x40
 c54:	and	r2, r2, #2048	; 0x800
 c58:	mov	r3, #0
 c5c:	orrs	r3, r2, r3
 c60:	bne	c1c <flattened_map+0x204>
 c64:	b	b44 <flattened_map+0x12c>
 c68:	add	sp, sp, #532	; 0x214
 c6c:	vpop	{d8}
 c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c74:	.word	0x42c80000
 c78:	.word	0x000115cc
 c7c:	.word	0x00000050
 c80:	.word	0x0000003c
 c84:	.word	0x00000530
 c88:	.word	0x000001ce
 c8c:	.word	0x00000500
 c90:	.word	0x00000030
 c94:	.word	0x000004e8
 c98:	.word	0x000004c8
 c9c:	.word	0x000004f8
 ca0:	.word	0x000004e8
 ca4:	.word	0x00000040

00000ca8 <m_map>:
 ca8:	push	{r4, lr}
 cac:	sub	sp, sp, #8
 cb0:	mov	r4, r1
 cb4:	ldr	r1, [pc, #152]	; d54 <m_map+0xac>
 cb8:	add	r1, pc, r1
 cbc:	ldrd	r2, [r2, #64]	; 0x40
 cc0:	and	r2, r2, #67108864	; 0x4000000
 cc4:	mov	r3, #0
 cc8:	orrs	r3, r2, r3
 ccc:	bne	ce4 <m_map+0x3c>
 cd0:	ldr	r3, [pc, #128]	; d58 <m_map+0xb0>
 cd4:	ldr	r3, [r1, r3]
 cd8:	ldr	r3, [r3]
 cdc:	cmp	r3, #0
 ce0:	bne	cf8 <m_map+0x50>
 ce4:	ldr	r3, [pc, #112]	; d5c <m_map+0xb4>
 ce8:	ldr	r3, [r1, r3]
 cec:	ldr	r3, [r3, #176]	; 0xb0
 cf0:	cmp	r3, #0
 cf4:	beq	d1c <m_map+0x74>
 cf8:	mov	r0, r4
 cfc:	bl	a18 <flattened_map>
 d00:	ldr	r2, [pc, #88]	; d60 <m_map+0xb8>
 d04:	add	r2, pc, r2
 d08:	mov	r1, #17
 d0c:	mov	r0, r4
 d10:	bl	5c8 <sendto_one_numeric@plt>
 d14:	add	sp, sp, #8
 d18:	pop	{r4, pc}
 d1c:	ldr	r3, [pc, #64]	; d64 <m_map+0xbc>
 d20:	ldr	r3, [r1, r3]
 d24:	str	r3, [sp, #4]
 d28:	ldr	r2, [pc, #56]	; d68 <m_map+0xc0>
 d2c:	add	r2, pc, r2
 d30:	mov	r1, r3
 d34:	mov	r0, r4
 d38:	bl	784 <dump_map>
 d3c:	ldr	r2, [pc, #40]	; d6c <m_map+0xc4>
 d40:	add	r2, pc, r2
 d44:	mov	r1, #17
 d48:	mov	r0, r4
 d4c:	bl	5c8 <sendto_one_numeric@plt>
 d50:	b	d14 <m_map+0x6c>
 d54:	.word	0x00011340
 d58:	.word	0x00000040
 d5c:	.word	0x00000054
 d60:	.word	0x000002f0
 d64:	.word	0x00000050
 d68:	.word	0x000113a0
 d6c:	.word	0x000002b4

00000d70 <__udivsi3>:
 d70:	subs	r2, r1, #1
 d74:	bxeq	lr
 d78:	bcc	f50 <__udivsi3+0x1e0>
 d7c:	cmp	r0, r1
 d80:	bls	f34 <__udivsi3+0x1c4>
 d84:	tst	r1, r2
 d88:	beq	f40 <__udivsi3+0x1d0>
 d8c:	clz	r3, r0
 d90:	clz	r2, r1
 d94:	sub	r3, r2, r3
 d98:	rsbs	r3, r3, #31
 d9c:	addne	r3, r3, r3, lsl #1
 da0:	mov	r2, #0
 da4:	addne	pc, pc, r3, lsl #2
 da8:	nop			; (mov r0, r0)
 dac:	cmp	r0, r1, lsl #31
 db0:	adc	r2, r2, r2
 db4:	subcs	r0, r0, r1, lsl #31
 db8:	cmp	r0, r1, lsl #30
 dbc:	adc	r2, r2, r2
 dc0:	subcs	r0, r0, r1, lsl #30
 dc4:	cmp	r0, r1, lsl #29
 dc8:	adc	r2, r2, r2
 dcc:	subcs	r0, r0, r1, lsl #29
 dd0:	cmp	r0, r1, lsl #28
 dd4:	adc	r2, r2, r2
 dd8:	subcs	r0, r0, r1, lsl #28
 ddc:	cmp	r0, r1, lsl #27
 de0:	adc	r2, r2, r2
 de4:	subcs	r0, r0, r1, lsl #27
 de8:	cmp	r0, r1, lsl #26
 dec:	adc	r2, r2, r2
 df0:	subcs	r0, r0, r1, lsl #26
 df4:	cmp	r0, r1, lsl #25
 df8:	adc	r2, r2, r2
 dfc:	subcs	r0, r0, r1, lsl #25
 e00:	cmp	r0, r1, lsl #24
 e04:	adc	r2, r2, r2
 e08:	subcs	r0, r0, r1, lsl #24
 e0c:	cmp	r0, r1, lsl #23
 e10:	adc	r2, r2, r2
 e14:	subcs	r0, r0, r1, lsl #23
 e18:	cmp	r0, r1, lsl #22
 e1c:	adc	r2, r2, r2
 e20:	subcs	r0, r0, r1, lsl #22
 e24:	cmp	r0, r1, lsl #21
 e28:	adc	r2, r2, r2
 e2c:	subcs	r0, r0, r1, lsl #21
 e30:	cmp	r0, r1, lsl #20
 e34:	adc	r2, r2, r2
 e38:	subcs	r0, r0, r1, lsl #20
 e3c:	cmp	r0, r1, lsl #19
 e40:	adc	r2, r2, r2
 e44:	subcs	r0, r0, r1, lsl #19
 e48:	cmp	r0, r1, lsl #18
 e4c:	adc	r2, r2, r2
 e50:	subcs	r0, r0, r1, lsl #18
 e54:	cmp	r0, r1, lsl #17
 e58:	adc	r2, r2, r2
 e5c:	subcs	r0, r0, r1, lsl #17
 e60:	cmp	r0, r1, lsl #16
 e64:	adc	r2, r2, r2
 e68:	subcs	r0, r0, r1, lsl #16
 e6c:	cmp	r0, r1, lsl #15
 e70:	adc	r2, r2, r2
 e74:	subcs	r0, r0, r1, lsl #15
 e78:	cmp	r0, r1, lsl #14
 e7c:	adc	r2, r2, r2
 e80:	subcs	r0, r0, r1, lsl #14
 e84:	cmp	r0, r1, lsl #13
 e88:	adc	r2, r2, r2
 e8c:	subcs	r0, r0, r1, lsl #13
 e90:	cmp	r0, r1, lsl #12
 e94:	adc	r2, r2, r2
 e98:	subcs	r0, r0, r1, lsl #12
 e9c:	cmp	r0, r1, lsl #11
 ea0:	adc	r2, r2, r2
 ea4:	subcs	r0, r0, r1, lsl #11
 ea8:	cmp	r0, r1, lsl #10
 eac:	adc	r2, r2, r2
 eb0:	subcs	r0, r0, r1, lsl #10
 eb4:	cmp	r0, r1, lsl #9
 eb8:	adc	r2, r2, r2
 ebc:	subcs	r0, r0, r1, lsl #9
 ec0:	cmp	r0, r1, lsl #8
 ec4:	adc	r2, r2, r2
 ec8:	subcs	r0, r0, r1, lsl #8
 ecc:	cmp	r0, r1, lsl #7
 ed0:	adc	r2, r2, r2
 ed4:	subcs	r0, r0, r1, lsl #7
 ed8:	cmp	r0, r1, lsl #6
 edc:	adc	r2, r2, r2
 ee0:	subcs	r0, r0, r1, lsl #6
 ee4:	cmp	r0, r1, lsl #5
 ee8:	adc	r2, r2, r2
 eec:	subcs	r0, r0, r1, lsl #5
 ef0:	cmp	r0, r1, lsl #4
 ef4:	adc	r2, r2, r2
 ef8:	subcs	r0, r0, r1, lsl #4
 efc:	cmp	r0, r1, lsl #3
 f00:	adc	r2, r2, r2
 f04:	subcs	r0, r0, r1, lsl #3
 f08:	cmp	r0, r1, lsl #2
 f0c:	adc	r2, r2, r2
 f10:	subcs	r0, r0, r1, lsl #2
 f14:	cmp	r0, r1, lsl #1
 f18:	adc	r2, r2, r2
 f1c:	subcs	r0, r0, r1, lsl #1
 f20:	cmp	r0, r1
 f24:	adc	r2, r2, r2
 f28:	subcs	r0, r0, r1
 f2c:	mov	r0, r2
 f30:	bx	lr
 f34:	moveq	r0, #1
 f38:	movne	r0, #0
 f3c:	bx	lr
 f40:	clz	r2, r1
 f44:	rsb	r2, r2, #31
 f48:	lsr	r0, r0, r2
 f4c:	bx	lr
 f50:	cmp	r0, #0
 f54:	mvnne	r0, #0
 f58:	b	f7c <__aeabi_idiv0>

00000f5c <__aeabi_uidivmod>:
 f5c:	cmp	r1, #0
 f60:	beq	f50 <__udivsi3+0x1e0>
 f64:	push	{r0, r1, lr}
 f68:	bl	d70 <__udivsi3>
 f6c:	pop	{r1, r2, lr}
 f70:	mul	r3, r2, r0
 f74:	sub	r1, r1, r3
 f78:	bx	lr

00000f7c <__aeabi_idiv0>:
 f7c:	push	{r1, lr}
 f80:	mov	r0, #8
 f84:	bl	5a4 <raise@plt>
 f88:	pop	{r1, pc}

Disassembly of section .fini:

00000f8c <_fini>:
 f8c:	push	{r3, lr}
 f90:	pop	{r3, pc}
