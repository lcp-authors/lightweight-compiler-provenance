
../repos/prog2/0.9:     file format elf32-littlearm


Disassembly of section .init:

00010664 <.init>:
   10664:	push	{r3, lr}
   10668:	bl	107e0 <_start@@Base+0x3c>
   1066c:	pop	{r3, pc}

Disassembly of section .plt:

00010670 <strcmp@plt-0x14>:
   10670:	push	{lr}		; (str lr, [sp, #-4]!)
   10674:	ldr	lr, [pc, #4]	; 10680 <strcmp@plt-0x4>
   10678:	add	lr, pc, lr
   1067c:	ldr	pc, [lr, #8]!
   10680:	andeq	r0, r1, r0, lsl #19

00010684 <strcmp@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2432]!	; 0x980

00010690 <printf@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2424]!	; 0x978

0001069c <strcat@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2416]!	; 0x970

000106a8 <__libc_start_main@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2408]!	; 0x968

000106b4 <__gmon_start__@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2400]!	; 0x960

000106c0 <memset@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2392]!	; 0x958

000106cc <__isoc99_scanf@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2384]!	; 0x950

000106d8 <abort@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

000106e4 <main@@Base>:
   106e4:	push	{r4, r5, r6, r7, r8, lr}
   106e8:	sub	sp, sp, #20736	; 0x5100
   106ec:	sub	sp, sp, #64	; 0x40
   106f0:	mov	r0, sp
   106f4:	bl	108cc <ler_albuns@@Base>
   106f8:	mov	r5, #0
   106fc:	ldr	r8, [pc, #144]	; 10794 <main@@Base+0xb0>
   10700:	mov	r6, sp
   10704:	mov	r7, r5
   10708:	mov	r1, r0
   1070c:	mov	r4, r0
   10710:	mov	r0, sp
   10714:	bl	10964 <lista_albuns@@Base>
   10718:	mov	r1, r4
   1071c:	ldr	r0, [pc, #116]	; 10798 <main@@Base+0xb4>
   10720:	bl	10690 <printf@plt>
   10724:	cmp	r4, r7
   10728:	bgt	10768 <main@@Base+0x84>
   1072c:	mov	r1, r5
   10730:	ldr	r0, [pc, #100]	; 1079c <main@@Base+0xb8>
   10734:	bl	10690 <printf@plt>
   10738:	mov	r3, #0
   1073c:	ldr	r2, [pc, #80]	; 10794 <main@@Base+0xb0>
   10740:	mov	r1, r4
   10744:	mov	r0, sp
   10748:	bl	109b4 <albuns_artista@@Base>
   1074c:	mov	r1, r0
   10750:	ldr	r0, [pc, #72]	; 107a0 <main@@Base+0xbc>
   10754:	bl	10690 <printf@plt>
   10758:	mov	r0, #0
   1075c:	add	sp, sp, #20736	; 0x5100
   10760:	add	sp, sp, #64	; 0x40
   10764:	pop	{r4, r5, r6, r7, r8, pc}
   10768:	mov	r1, r6
   1076c:	mov	r0, r8
   10770:	bl	10684 <strcmp@plt>
   10774:	cmp	r0, #0
   10778:	bne	10788 <main@@Base+0xa4>
   1077c:	ldr	r3, [r6, #204]	; 0xcc
   10780:	cmp	r3, #1
   10784:	addeq	r5, r5, #1
   10788:	add	r7, r7, #1
   1078c:	add	r6, r6, #208	; 0xd0
   10790:	b	10724 <main@@Base+0x40>
   10794:	andeq	r0, r1, r6, ror #21
   10798:	andeq	r0, r1, r6, asr #21
   1079c:	strdeq	r0, [r1], -r5
   107a0:	andeq	r0, r1, ip, lsr #22

000107a4 <_start@@Base>:
   107a4:	mov	fp, #0
   107a8:	mov	lr, #0
   107ac:	pop	{r1}		; (ldr r1, [sp], #4)
   107b0:	mov	r2, sp
   107b4:	push	{r2}		; (str r2, [sp, #-4]!)
   107b8:	push	{r0}		; (str r0, [sp, #-4]!)
   107bc:	ldr	ip, [pc, #16]	; 107d4 <_start@@Base+0x30>
   107c0:	push	{ip}		; (str ip, [sp, #-4]!)
   107c4:	ldr	r0, [pc, #12]	; 107d8 <_start@@Base+0x34>
   107c8:	ldr	r3, [pc, #12]	; 107dc <_start@@Base+0x38>
   107cc:	bl	106a8 <__libc_start_main@plt>
   107d0:	bl	106d8 <abort@plt>
   107d4:	muleq	r1, r8, sl
   107d8:	andeq	r0, r1, r4, ror #13
   107dc:	andeq	r0, r1, r8, lsr sl
   107e0:	ldr	r3, [pc, #20]	; 107fc <_start@@Base+0x58>
   107e4:	ldr	r2, [pc, #20]	; 10800 <_start@@Base+0x5c>
   107e8:	add	r3, pc, r3
   107ec:	ldr	r2, [r3, r2]
   107f0:	cmp	r2, #0
   107f4:	bxeq	lr
   107f8:	b	106b4 <__gmon_start__@plt>
   107fc:	andeq	r0, r1, r0, lsl r8
   10800:	andeq	r0, r0, ip, lsr #32
   10804:	ldr	r3, [pc, #28]	; 10828 <_start@@Base+0x84>
   10808:	ldr	r0, [pc, #28]	; 1082c <_start@@Base+0x88>
   1080c:	sub	r3, r3, r0
   10810:	cmp	r3, #6
   10814:	bxls	lr
   10818:	ldr	r3, [pc, #16]	; 10830 <_start@@Base+0x8c>
   1081c:	cmp	r3, #0
   10820:	bxeq	lr
   10824:	bx	r3
   10828:	andeq	r1, r2, fp, lsr r0
   1082c:	andeq	r1, r2, r8, lsr r0
   10830:	andeq	r0, r0, r0
   10834:	ldr	r1, [pc, #36]	; 10860 <_start@@Base+0xbc>
   10838:	ldr	r0, [pc, #36]	; 10864 <_start@@Base+0xc0>
   1083c:	sub	r1, r1, r0
   10840:	asr	r1, r1, #2
   10844:	add	r1, r1, r1, lsr #31
   10848:	asrs	r1, r1, #1
   1084c:	bxeq	lr
   10850:	ldr	r3, [pc, #16]	; 10868 <_start@@Base+0xc4>
   10854:	cmp	r3, #0
   10858:	bxeq	lr
   1085c:	bx	r3
   10860:	andeq	r1, r2, r8, lsr r0
   10864:	andeq	r1, r2, r8, lsr r0
   10868:	andeq	r0, r0, r0
   1086c:	push	{r4, lr}
   10870:	ldr	r4, [pc, #24]	; 10890 <_start@@Base+0xec>
   10874:	ldrb	r3, [r4]
   10878:	cmp	r3, #0
   1087c:	popne	{r4, pc}
   10880:	bl	10804 <_start@@Base+0x60>
   10884:	mov	r3, #1
   10888:	strb	r3, [r4]
   1088c:	pop	{r4, pc}
   10890:	andeq	r1, r2, r8, lsr r0
   10894:	ldr	r0, [pc, #40]	; 108c4 <_start@@Base+0x120>
   10898:	ldr	r3, [r0]
   1089c:	cmp	r3, #0
   108a0:	bne	108a8 <_start@@Base+0x104>
   108a4:	b	10834 <_start@@Base+0x90>
   108a8:	ldr	r3, [pc, #24]	; 108c8 <_start@@Base+0x124>
   108ac:	cmp	r3, #0
   108b0:	beq	108a4 <_start@@Base+0x100>
   108b4:	push	{r4, lr}
   108b8:	blx	r3
   108bc:	pop	{r4, lr}
   108c0:	b	10834 <_start@@Base+0x90>
   108c4:	andeq	r0, r2, r4, lsl pc
   108c8:	andeq	r0, r0, r0

000108cc <ler_albuns@@Base>:
   108cc:	push	{r4, r5, r6, r7, r8, lr}
   108d0:	sub	sp, sp, #24
   108d4:	mov	r4, r0
   108d8:	mov	r2, #15
   108dc:	mov	r1, #0
   108e0:	add	r0, sp, #8
   108e4:	bl	106c0 <memset@plt>
   108e8:	ldr	r7, [pc, #108]	; 1095c <ler_albuns@@Base+0x90>
   108ec:	ldr	r8, [pc, #108]	; 10960 <ler_albuns@@Base+0x94>
   108f0:	mov	r5, #0
   108f4:	add	r3, r4, #204	; 0xcc
   108f8:	str	r3, [sp, #4]
   108fc:	add	r3, r4, #200	; 0xc8
   10900:	str	r3, [sp]
   10904:	add	r2, sp, #8
   10908:	add	r3, r4, #100	; 0x64
   1090c:	mov	r1, r4
   10910:	mov	r0, r7
   10914:	bl	106cc <__isoc99_scanf@plt>
   10918:	mov	r6, r4
   1091c:	cmp	r0, #5
   10920:	bne	10930 <ler_albuns@@Base+0x64>
   10924:	cmp	r5, #100	; 0x64
   10928:	add	r4, r4, #208	; 0xd0
   1092c:	bne	1093c <ler_albuns@@Base+0x70>
   10930:	mov	r0, r5
   10934:	add	sp, sp, #24
   10938:	pop	{r4, r5, r6, r7, r8, pc}
   1093c:	mov	r1, r8
   10940:	mov	r0, r6
   10944:	bl	1069c <strcat@plt>
   10948:	add	r1, sp, #8
   1094c:	mov	r0, r6
   10950:	bl	1069c <strcat@plt>
   10954:	add	r5, r5, #1
   10958:	b	108f4 <ler_albuns@@Base+0x28>
   1095c:	andeq	r0, r1, sl, lsr #21
   10960:	andeq	r0, r1, r8, lsr #21

00010964 <lista_albuns@@Base>:
   10964:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10968:	mov	r6, r1
   1096c:	ldr	r7, [pc, #60]	; 109b0 <lista_albuns@@Base+0x4c>
   10970:	mov	r4, r0
   10974:	mov	r5, #0
   10978:	cmp	r5, r6
   1097c:	blt	10988 <lista_albuns@@Base+0x24>
   10980:	add	sp, sp, #12
   10984:	pop	{r4, r5, r6, r7, pc}
   10988:	ldr	r3, [r4, #204]	; 0xcc
   1098c:	add	r2, r4, #100	; 0x64
   10990:	str	r3, [sp]
   10994:	mov	r1, r4
   10998:	ldr	r3, [r4, #200]	; 0xc8
   1099c:	mov	r0, r7
   109a0:	bl	10690 <printf@plt>
   109a4:	add	r5, r5, #1
   109a8:	add	r4, r4, #208	; 0xd0
   109ac:	b	10978 <lista_albuns@@Base+0x14>
   109b0:			; <UNDEFINED> instruction: 0x00010ab9

000109b4 <albuns_artista@@Base>:
   109b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109b8:	subs	r6, r3, #0
   109bc:	movne	r4, #0
   109c0:	mov	r5, r0
   109c4:	mov	r8, r1
   109c8:	mov	r9, r2
   109cc:	moveq	r4, r6
   109d0:	moveq	r7, #208	; 0xd0
   109d4:	movne	r7, r4
   109d8:	bne	10a28 <albuns_artista@@Base+0x74>
   109dc:	cmp	r6, r8
   109e0:	bge	10a30 <albuns_artista@@Base+0x7c>
   109e4:	mla	r1, r7, r6, r5
   109e8:	mov	r0, r9
   109ec:	bl	10684 <strcmp@plt>
   109f0:	add	r6, r6, #1
   109f4:	cmp	r0, #0
   109f8:	addeq	r4, r4, #1
   109fc:	b	109dc <albuns_artista@@Base+0x28>
   10a00:	mov	r1, r5
   10a04:	mov	r0, r9
   10a08:	bl	10684 <strcmp@plt>
   10a0c:	cmp	r0, #0
   10a10:	bne	10a20 <albuns_artista@@Base+0x6c>
   10a14:	ldr	r3, [r5, #204]	; 0xcc
   10a18:	cmp	r6, r3
   10a1c:	addeq	r4, r4, #1
   10a20:	add	r7, r7, #1
   10a24:	add	r5, r5, #208	; 0xd0
   10a28:	cmp	r8, r7
   10a2c:	bgt	10a00 <albuns_artista@@Base+0x4c>
   10a30:	mov	r0, r4
   10a34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010a38 <__libc_csu_init@@Base>:
   10a38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a3c:	mov	r7, r0
   10a40:	ldr	r6, [pc, #72]	; 10a90 <__libc_csu_init@@Base+0x58>
   10a44:	ldr	r5, [pc, #72]	; 10a94 <__libc_csu_init@@Base+0x5c>
   10a48:	add	r6, pc, r6
   10a4c:	add	r5, pc, r5
   10a50:	sub	r6, r6, r5
   10a54:	mov	r8, r1
   10a58:	mov	r9, r2
   10a5c:	bl	10664 <strcmp@plt-0x20>
   10a60:	asrs	r6, r6, #2
   10a64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a68:	mov	r4, #0
   10a6c:	add	r4, r4, #1
   10a70:	ldr	r3, [r5], #4
   10a74:	mov	r2, r9
   10a78:	mov	r1, r8
   10a7c:	mov	r0, r7
   10a80:	blx	r3
   10a84:	cmp	r6, r4
   10a88:	bne	10a6c <__libc_csu_init@@Base+0x34>
   10a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a90:	andeq	r0, r1, r0, asr #9
   10a94:			; <UNDEFINED> instruction: 0x000104b8

00010a98 <__libc_csu_fini@@Base>:
   10a98:	bx	lr

Disassembly of section .fini:

00010a9c <.fini>:
   10a9c:	push	{r3, lr}
   10aa0:	pop	{r3, pc}
