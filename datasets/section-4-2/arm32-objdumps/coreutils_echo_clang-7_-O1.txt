
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010c28 <.init>:
   10c28:	push	{r3, lr}
   10c2c:	bl	10e94 <__assert_fail@plt+0x48>
   10c30:	pop	{r3, pc}

Disassembly of section .plt:

00010c34 <calloc@plt-0x14>:
   10c34:	push	{lr}		; (str lr, [sp, #-4]!)
   10c38:	ldr	lr, [pc, #4]	; 10c44 <calloc@plt-0x4>
   10c3c:	add	lr, pc, lr
   10c40:	ldr	pc, [lr, #8]!
   10c44:			; <UNDEFINED> instruction: 0x000153bc

00010c48 <calloc@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #86016	; 0x15000
   10c50:	ldr	pc, [ip, #956]!	; 0x3bc

00010c54 <fputs_unlocked@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #86016	; 0x15000
   10c5c:	ldr	pc, [ip, #948]!	; 0x3b4

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #86016	; 0x15000
   10c68:	ldr	pc, [ip, #940]!	; 0x3ac

00010c6c <fflush@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #86016	; 0x15000
   10c74:	ldr	pc, [ip, #932]!	; 0x3a4

00010c78 <free@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #86016	; 0x15000
   10c80:	ldr	pc, [ip, #924]!	; 0x39c

00010c84 <_exit@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #86016	; 0x15000
   10c8c:	ldr	pc, [ip, #916]!	; 0x394

00010c90 <memcpy@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #86016	; 0x15000
   10c98:	ldr	pc, [ip, #908]!	; 0x38c

00010c9c <mbsinit@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #86016	; 0x15000
   10ca4:	ldr	pc, [ip, #900]!	; 0x384

00010ca8 <memcmp@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #892]!	; 0x37c

00010cb4 <dcgettext@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #884]!	; 0x374

00010cc0 <realloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #876]!	; 0x36c

00010ccc <textdomain@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #868]!	; 0x364

00010cd8 <iswprint@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #860]!	; 0x35c

00010ce4 <fwrite@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #852]!	; 0x354

00010cf0 <lseek64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #844]!	; 0x34c

00010cfc <__ctype_get_mb_cur_max@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #836]!	; 0x344

00010d08 <__fpending@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #828]!	; 0x33c

00010d14 <ferror_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #820]!	; 0x334

00010d20 <mbrtowc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #812]!	; 0x32c

00010d2c <error@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #804]!	; 0x324

00010d38 <getenv@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #796]!	; 0x31c

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #788]!	; 0x314

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #780]!	; 0x30c

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #772]!	; 0x304

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #764]!	; 0x2fc

00010d74 <__ctype_b_loc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d80 <exit@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #748]!	; 0x2ec

00010d8c <strlen@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #740]!	; 0x2e4

00010d98 <__errno_location@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #732]!	; 0x2dc

00010da4 <__cxa_atexit@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #724]!	; 0x2d4

00010db0 <memset@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #716]!	; 0x2cc

00010dbc <__printf_chk@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #708]!	; 0x2c4

00010dc8 <fileno@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #700]!	; 0x2bc

00010dd4 <__fprintf_chk@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #692]!	; 0x2b4

00010de0 <fclose@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dec <fseeko64@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #676]!	; 0x2a4

00010df8 <setlocale@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #668]!	; 0x29c

00010e04 <strrchr@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #660]!	; 0x294

00010e10 <nl_langinfo@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #652]!	; 0x28c

00010e1c <bindtextdomain@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #644]!	; 0x284

00010e28 <strncmp@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #636]!	; 0x27c

00010e34 <abort@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #628]!	; 0x274

00010e40 <putchar_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #620]!	; 0x26c

00010e4c <__assert_fail@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #612]!	; 0x264

Disassembly of section .text:

00010e58 <.text>:
   10e58:	mov	fp, #0
   10e5c:	mov	lr, #0
   10e60:	pop	{r1}		; (ldr r1, [sp], #4)
   10e64:	mov	r2, sp
   10e68:	push	{r2}		; (str r2, [sp, #-4]!)
   10e6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e70:	ldr	ip, [pc, #16]	; 10e88 <__assert_fail@plt+0x3c>
   10e74:	push	{ip}		; (str ip, [sp, #-4]!)
   10e78:	ldr	r0, [pc, #12]	; 10e8c <__assert_fail@plt+0x40>
   10e7c:	ldr	r3, [pc, #12]	; 10e90 <__assert_fail@plt+0x44>
   10e80:	bl	10d50 <__libc_start_main@plt>
   10e84:	bl	10e34 <abort@plt>
   10e88:	andeq	r4, r1, r4, ror #14
   10e8c:	andeq	r1, r1, ip, asr #4
   10e90:	andeq	r4, r1, r4, lsl #14
   10e94:	ldr	r3, [pc, #20]	; 10eb0 <__assert_fail@plt+0x64>
   10e98:	ldr	r2, [pc, #20]	; 10eb4 <__assert_fail@plt+0x68>
   10e9c:	add	r3, pc, r3
   10ea0:	ldr	r2, [r3, r2]
   10ea4:	cmp	r2, #0
   10ea8:	bxeq	lr
   10eac:	b	10d68 <__gmon_start__@plt>
   10eb0:	andeq	r5, r1, ip, asr r1
   10eb4:	strheq	r0, [r0], -ip
   10eb8:	ldr	r0, [pc, #24]	; 10ed8 <__assert_fail@plt+0x8c>
   10ebc:	ldr	r3, [pc, #24]	; 10edc <__assert_fail@plt+0x90>
   10ec0:	cmp	r3, r0
   10ec4:	bxeq	lr
   10ec8:	ldr	r3, [pc, #16]	; 10ee0 <__assert_fail@plt+0x94>
   10ecc:	cmp	r3, #0
   10ed0:	bxeq	lr
   10ed4:	bx	r3
   10ed8:	andeq	r6, r2, r0, lsl r1
   10edc:	andeq	r6, r2, r0, lsl r1
   10ee0:	andeq	r0, r0, r0
   10ee4:	ldr	r0, [pc, #36]	; 10f10 <__assert_fail@plt+0xc4>
   10ee8:	ldr	r1, [pc, #36]	; 10f14 <__assert_fail@plt+0xc8>
   10eec:	sub	r1, r1, r0
   10ef0:	asr	r1, r1, #2
   10ef4:	add	r1, r1, r1, lsr #31
   10ef8:	asrs	r1, r1, #1
   10efc:	bxeq	lr
   10f00:	ldr	r3, [pc, #16]	; 10f18 <__assert_fail@plt+0xcc>
   10f04:	cmp	r3, #0
   10f08:	bxeq	lr
   10f0c:	bx	r3
   10f10:	andeq	r6, r2, r0, lsl r1
   10f14:	andeq	r6, r2, r0, lsl r1
   10f18:	andeq	r0, r0, r0
   10f1c:	push	{r4, lr}
   10f20:	ldr	r4, [pc, #24]	; 10f40 <__assert_fail@plt+0xf4>
   10f24:	ldrb	r3, [r4]
   10f28:	cmp	r3, #0
   10f2c:	popne	{r4, pc}
   10f30:	bl	10eb8 <__assert_fail@plt+0x6c>
   10f34:	mov	r3, #1
   10f38:	strb	r3, [r4]
   10f3c:	pop	{r4, pc}
   10f40:	andeq	r6, r2, r0, lsr #2
   10f44:	b	10ee4 <__assert_fail@plt+0x98>
   10f48:	push	{fp, lr}
   10f4c:	mov	fp, sp
   10f50:	cmp	r0, #0
   10f54:	bne	110a8 <__assert_fail@plt+0x25c>
   10f58:	mov	r4, r0
   10f5c:	movw	r1, #18366	; 0x47be
   10f60:	movt	r1, #1
   10f64:	mov	r0, #0
   10f68:	mov	r2, #5
   10f6c:	bl	10cb4 <dcgettext@plt>
   10f70:	mov	r1, r0
   10f74:	movw	r0, #24876	; 0x612c
   10f78:	movt	r0, #2
   10f7c:	ldr	r2, [r0]
   10f80:	mov	r0, #1
   10f84:	mov	r3, r2
   10f88:	bl	10dbc <__printf_chk@plt>
   10f8c:	movw	r1, #18429	; 0x47fd
   10f90:	movt	r1, #1
   10f94:	mov	r0, #0
   10f98:	mov	r2, #5
   10f9c:	bl	10cb4 <dcgettext@plt>
   10fa0:	movw	r5, #24860	; 0x611c
   10fa4:	movt	r5, #2
   10fa8:	ldr	r1, [r5]
   10fac:	bl	10c54 <fputs_unlocked@plt>
   10fb0:	movw	r1, #18522	; 0x485a
   10fb4:	movt	r1, #1
   10fb8:	mov	r0, #0
   10fbc:	mov	r2, #5
   10fc0:	bl	10cb4 <dcgettext@plt>
   10fc4:	ldr	r1, [r5]
   10fc8:	bl	10c54 <fputs_unlocked@plt>
   10fcc:	movw	r1, #18654	; 0x48de
   10fd0:	movt	r1, #1
   10fd4:	mov	r0, #0
   10fd8:	mov	r2, #5
   10fdc:	bl	10cb4 <dcgettext@plt>
   10fe0:	ldr	r1, [r5]
   10fe4:	bl	10c54 <fputs_unlocked@plt>
   10fe8:	movw	r1, #18699	; 0x490b
   10fec:	movt	r1, #1
   10ff0:	mov	r0, #0
   10ff4:	mov	r2, #5
   10ff8:	bl	10cb4 <dcgettext@plt>
   10ffc:	ldr	r1, [r5]
   11000:	bl	10c54 <fputs_unlocked@plt>
   11004:	movw	r1, #18753	; 0x4941
   11008:	movt	r1, #1
   1100c:	mov	r0, #0
   11010:	mov	r2, #5
   11014:	bl	10cb4 <dcgettext@plt>
   11018:	ldr	r1, [r5]
   1101c:	bl	10c54 <fputs_unlocked@plt>
   11020:	movw	r1, #18816	; 0x4980
   11024:	movt	r1, #1
   11028:	mov	r0, #0
   1102c:	mov	r2, #5
   11030:	bl	10cb4 <dcgettext@plt>
   11034:	ldr	r1, [r5]
   11038:	bl	10c54 <fputs_unlocked@plt>
   1103c:	movw	r1, #19045	; 0x4a65
   11040:	movt	r1, #1
   11044:	mov	r0, #0
   11048:	mov	r2, #5
   1104c:	bl	10cb4 <dcgettext@plt>
   11050:	ldr	r1, [r5]
   11054:	bl	10c54 <fputs_unlocked@plt>
   11058:	movw	r1, #19155	; 0x4ad3
   1105c:	movt	r1, #1
   11060:	mov	r0, #0
   11064:	mov	r2, #5
   11068:	bl	10cb4 <dcgettext@plt>
   1106c:	mov	r1, r0
   11070:	movw	r2, #19346	; 0x4b92
   11074:	movt	r2, #1
   11078:	mov	r0, #1
   1107c:	bl	10dbc <__printf_chk@plt>
   11080:	movw	r1, #19351	; 0x4b97
   11084:	movt	r1, #1
   11088:	mov	r0, #0
   1108c:	mov	r2, #5
   11090:	bl	10cb4 <dcgettext@plt>
   11094:	ldr	r1, [r5]
   11098:	bl	10c54 <fputs_unlocked@plt>
   1109c:	bl	110c8 <__assert_fail@plt+0x27c>
   110a0:	mov	r0, r4
   110a4:	bl	10d80 <exit@plt>
   110a8:	movw	r0, #18316	; 0x478c
   110ac:	movt	r0, #1
   110b0:	movw	r1, #18339	; 0x47a3
   110b4:	movt	r1, #1
   110b8:	movw	r3, #18350	; 0x47ae
   110bc:	movt	r3, #1
   110c0:	mov	r2, #40	; 0x28
   110c4:	bl	10e4c <__assert_fail@plt>
   110c8:	push	{r4, r5, fp, lr}
   110cc:	add	fp, sp, #8
   110d0:	sub	sp, sp, #56	; 0x38
   110d4:	movw	r0, #19864	; 0x4d98
   110d8:	movt	r0, #1
   110dc:	add	r1, r0, #32
   110e0:	mov	r5, sp
   110e4:	mov	r2, #48	; 0x30
   110e8:	vld1.64	{d16-d17}, [r1]
   110ec:	add	r1, r5, #32
   110f0:	add	r3, r0, #16
   110f4:	vld1.64	{d18-d19}, [r0], r2
   110f8:	vld1.64	{d20-d21}, [r3]
   110fc:	vldr	d22, [r0]
   11100:	vst1.64	{d16-d17}, [r1]
   11104:	add	r0, r5, #16
   11108:	vst1.64	{d20-d21}, [r0]
   1110c:	mov	r0, r5
   11110:	vst1.64	{d18-d19}, [r0], r2
   11114:	vstr	d22, [r0]
   11118:	ldr	r1, [sp]
   1111c:	cmp	r1, #0
   11120:	beq	11148 <__assert_fail@plt+0x2fc>
   11124:	mov	r5, sp
   11128:	movw	r4, #19346	; 0x4b92
   1112c:	movt	r4, #1
   11130:	mov	r0, r4
   11134:	bl	10c60 <strcmp@plt>
   11138:	cmp	r0, #0
   1113c:	ldrne	r1, [r5, #8]!
   11140:	cmpne	r1, #0
   11144:	bne	11130 <__assert_fail@plt+0x2e4>
   11148:	ldr	r4, [r5, #4]
   1114c:	movw	r1, #19646	; 0x4cbe
   11150:	movt	r1, #1
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	bl	10cb4 <dcgettext@plt>
   11160:	mov	r1, r0
   11164:	movw	r2, #19516	; 0x4c3c
   11168:	movt	r2, #1
   1116c:	movw	r3, #19669	; 0x4cd5
   11170:	movt	r3, #1
   11174:	mov	r0, #1
   11178:	bl	10dbc <__printf_chk@plt>
   1117c:	movw	r5, #19346	; 0x4b92
   11180:	movt	r5, #1
   11184:	cmp	r4, #0
   11188:	moveq	r4, r5
   1118c:	mov	r0, #5
   11190:	mov	r1, #0
   11194:	bl	10df8 <setlocale@plt>
   11198:	cmp	r0, #0
   1119c:	beq	111dc <__assert_fail@plt+0x390>
   111a0:	movw	r1, #19709	; 0x4cfd
   111a4:	movt	r1, #1
   111a8:	mov	r2, #3
   111ac:	bl	10e28 <strncmp@plt>
   111b0:	cmp	r0, #0
   111b4:	beq	111dc <__assert_fail@plt+0x390>
   111b8:	movw	r1, #19713	; 0x4d01
   111bc:	movt	r1, #1
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	bl	10cb4 <dcgettext@plt>
   111cc:	movw	r1, #24860	; 0x611c
   111d0:	movt	r1, #2
   111d4:	ldr	r1, [r1]
   111d8:	bl	10c54 <fputs_unlocked@plt>
   111dc:	movw	r1, #19784	; 0x4d48
   111e0:	movt	r1, #1
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	bl	10cb4 <dcgettext@plt>
   111f0:	mov	r1, r0
   111f4:	movw	r2, #19669	; 0x4cd5
   111f8:	movt	r2, #1
   111fc:	mov	r0, #1
   11200:	mov	r3, r5
   11204:	bl	10dbc <__printf_chk@plt>
   11208:	movw	r1, #19811	; 0x4d63
   1120c:	movt	r1, #1
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	bl	10cb4 <dcgettext@plt>
   1121c:	mov	r1, r0
   11220:	movw	r0, #19579	; 0x4c7b
   11224:	movt	r0, #1
   11228:	movw	r3, #18815	; 0x497f
   1122c:	movt	r3, #1
   11230:	cmp	r4, r5
   11234:	moveq	r3, r0
   11238:	mov	r0, #1
   1123c:	mov	r2, r4
   11240:	bl	10dbc <__printf_chk@plt>
   11244:	sub	sp, fp, #8
   11248:	pop	{r4, r5, fp, pc}
   1124c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11250:	add	fp, sp, #28
   11254:	sub	sp, sp, #20
   11258:	mov	r6, r1
   1125c:	mov	r5, r0
   11260:	movw	r0, #19456	; 0x4c00
   11264:	movt	r0, #1
   11268:	bl	10d38 <getenv@plt>
   1126c:	mov	sl, r0
   11270:	cmp	r0, #0
   11274:	beq	112a0 <__assert_fail@plt+0x454>
   11278:	mov	r4, #0
   1127c:	cmp	r5, #2
   11280:	blt	112a4 <__assert_fail@plt+0x458>
   11284:	ldr	r0, [r6, #4]
   11288:	movw	r1, #19472	; 0x4c10
   1128c:	movt	r1, #1
   11290:	bl	10c60 <strcmp@plt>
   11294:	clz	r0, r0
   11298:	lsr	r4, r0, #5
   1129c:	b	112a4 <__assert_fail@plt+0x458>
   112a0:	mov	r4, #1
   112a4:	ldr	r0, [r6]
   112a8:	bl	11978 <__assert_fail@plt+0xb2c>
   112ac:	movw	r1, #18815	; 0x497f
   112b0:	movt	r1, #1
   112b4:	mov	r0, #6
   112b8:	bl	10df8 <setlocale@plt>
   112bc:	movw	r7, #19520	; 0x4c40
   112c0:	movt	r7, #1
   112c4:	movw	r1, #19475	; 0x4c13
   112c8:	movt	r1, #1
   112cc:	mov	r0, r7
   112d0:	bl	10e1c <bindtextdomain@plt>
   112d4:	mov	r0, r7
   112d8:	bl	10ccc <textdomain@plt>
   112dc:	movw	r0, #6288	; 0x1890
   112e0:	movt	r0, #1
   112e4:	bl	14768 <__assert_fail@plt+0x391c>
   112e8:	cmp	r5, #2
   112ec:	bne	1132c <__assert_fail@plt+0x4e0>
   112f0:	cmp	r4, #0
   112f4:	beq	1132c <__assert_fail@plt+0x4e0>
   112f8:	ldr	r7, [r6, #4]
   112fc:	movw	r1, #19499	; 0x4c2b
   11300:	movt	r1, #1
   11304:	mov	r0, r7
   11308:	bl	10c60 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	beq	11784 <__assert_fail@plt+0x938>
   11314:	movw	r1, #19506	; 0x4c32
   11318:	movt	r1, #1
   1131c:	mov	r0, r7
   11320:	bl	10c60 <strcmp@plt>
   11324:	cmp	r0, #0
   11328:	beq	1172c <__assert_fail@plt+0x8e0>
   1132c:	mov	r1, #0
   11330:	cmp	r5, #2
   11334:	mov	r0, #0
   11338:	movwlt	r0, #1
   1133c:	eor	r2, r4, #1
   11340:	orrs	r0, r0, r2
   11344:	add	r6, r6, #4
   11348:	sub	r2, r5, #1
   1134c:	bne	11414 <__assert_fail@plt+0x5c8>
   11350:	mov	r1, #0
   11354:	mov	r0, #1
   11358:	mov	r9, r2
   1135c:	ldr	r2, [r6]
   11360:	ldrb	r3, [r2]
   11364:	cmp	r3, #45	; 0x2d
   11368:	bne	11424 <__assert_fail@plt+0x5d8>
   1136c:	add	r3, r2, #1
   11370:	mov	r7, #0
   11374:	b	1137c <__assert_fail@plt+0x530>
   11378:	sub	r7, r7, #1
   1137c:	ldrb	r5, [r3, -r7]
   11380:	cmp	r5, #100	; 0x64
   11384:	ble	11398 <__assert_fail@plt+0x54c>
   11388:	cmp	r5, #110	; 0x6e
   1138c:	cmpne	r5, #101	; 0x65
   11390:	beq	11378 <__assert_fail@plt+0x52c>
   11394:	b	11424 <__assert_fail@plt+0x5d8>
   11398:	cmp	r5, #69	; 0x45
   1139c:	beq	11378 <__assert_fail@plt+0x52c>
   113a0:	cmp	r5, #0
   113a4:	bne	11424 <__assert_fail@plt+0x5d8>
   113a8:	cmp	r7, #0
   113ac:	beq	11424 <__assert_fail@plt+0x5d8>
   113b0:	ldrb	r3, [r3]
   113b4:	cmp	r3, #0
   113b8:	beq	113f8 <__assert_fail@plt+0x5ac>
   113bc:	add	r2, r2, #2
   113c0:	uxtb	r3, r3
   113c4:	cmp	r3, #69	; 0x45
   113c8:	beq	113e8 <__assert_fail@plt+0x59c>
   113cc:	cmp	r3, #110	; 0x6e
   113d0:	beq	113e0 <__assert_fail@plt+0x594>
   113d4:	cmp	r3, #101	; 0x65
   113d8:	moveq	r1, #1
   113dc:	b	113ec <__assert_fail@plt+0x5a0>
   113e0:	mov	r0, #0
   113e4:	b	113ec <__assert_fail@plt+0x5a0>
   113e8:	mov	r1, #0
   113ec:	ldrb	r3, [r2], #1
   113f0:	cmp	r3, #0
   113f4:	bne	113c0 <__assert_fail@plt+0x574>
   113f8:	add	r6, r6, #4
   113fc:	sub	r2, r9, #1
   11400:	cmp	r9, #2
   11404:	bge	11358 <__assert_fail@plt+0x50c>
   11408:	and	r1, r1, #1
   1140c:	and	r0, r0, #1
   11410:	b	11418 <__assert_fail@plt+0x5cc>
   11414:	mov	r0, #1
   11418:	str	r0, [sp, #16]
   1141c:	mov	r9, r2
   11420:	b	11430 <__assert_fail@plt+0x5e4>
   11424:	and	r1, r1, #1
   11428:	and	r0, r0, #1
   1142c:	str	r0, [sp, #16]
   11430:	cmp	sl, #0
   11434:	cmpeq	r1, #0
   11438:	beq	116d4 <__assert_fail@plt+0x888>
   1143c:	cmp	r9, #1
   11440:	bge	11458 <__assert_fail@plt+0x60c>
   11444:	b	11714 <__assert_fail@plt+0x8c8>
   11448:	mov	r0, #32
   1144c:	bl	10e40 <putchar_unlocked@plt>
   11450:	sub	r9, r9, #1
   11454:	add	r6, r6, #4
   11458:	ldr	r7, [r6]
   1145c:	b	11468 <__assert_fail@plt+0x61c>
   11460:	uxtb	r0, r4
   11464:	bl	10e40 <putchar_unlocked@plt>
   11468:	mov	r5, r7
   1146c:	ldrb	r4, [r7], #1
   11470:	cmp	r4, #92	; 0x5c
   11474:	beq	11484 <__assert_fail@plt+0x638>
   11478:	cmp	r4, #0
   1147c:	bne	11460 <__assert_fail@plt+0x614>
   11480:	b	116c8 <__assert_fail@plt+0x87c>
   11484:	ldrb	r4, [r7]
   11488:	cmp	r4, #0
   1148c:	beq	11604 <__assert_fail@plt+0x7b8>
   11490:	add	r7, r5, #2
   11494:	sub	r0, r4, #48	; 0x30
   11498:	cmp	r0, #72	; 0x48
   1149c:	bhi	11680 <__assert_fail@plt+0x834>
   114a0:	add	r1, pc, #0
   114a4:	ldr	pc, [r1, r0, lsl #2]
   114a8:	andeq	r1, r1, r4, lsr r6
   114ac:	andeq	r1, r1, ip, asr #11
   114b0:	andeq	r1, r1, ip, asr #11
   114b4:	andeq	r1, r1, ip, asr #11
   114b8:	andeq	r1, r1, ip, asr #11
   114bc:	andeq	r1, r1, ip, asr #11
   114c0:	andeq	r1, r1, ip, asr #11
   114c4:	andeq	r1, r1, ip, asr #11
   114c8:	andeq	r1, r1, r0, lsl #13
   114cc:	andeq	r1, r1, r0, lsl #13
   114d0:	andeq	r1, r1, r0, lsl #13
   114d4:	andeq	r1, r1, r0, lsl #13
   114d8:	andeq	r1, r1, r0, lsl #13
   114dc:	andeq	r1, r1, r0, lsl #13
   114e0:	andeq	r1, r1, r0, lsl #13
   114e4:	andeq	r1, r1, r0, lsl #13
   114e8:	andeq	r1, r1, r0, lsl #13
   114ec:	andeq	r1, r1, r0, lsl #13
   114f0:	andeq	r1, r1, r0, lsl #13
   114f4:	andeq	r1, r1, r0, lsl #13
   114f8:	andeq	r1, r1, r0, lsl #13
   114fc:	andeq	r1, r1, r0, lsl #13
   11500:	andeq	r1, r1, r0, lsl #13
   11504:	andeq	r1, r1, r0, lsl #13
   11508:	andeq	r1, r1, r0, lsl #13
   1150c:	andeq	r1, r1, r0, lsl #13
   11510:	andeq	r1, r1, r0, lsl #13
   11514:	andeq	r1, r1, r0, lsl #13
   11518:	andeq	r1, r1, r0, lsl #13
   1151c:	andeq	r1, r1, r0, lsl #13
   11520:	andeq	r1, r1, r0, lsl #13
   11524:	andeq	r1, r1, r0, lsl #13
   11528:	andeq	r1, r1, r0, lsl #13
   1152c:	andeq	r1, r1, r0, lsl #13
   11530:	andeq	r1, r1, r0, lsl #13
   11534:	andeq	r1, r1, r0, lsl #13
   11538:	andeq	r1, r1, r0, lsl #13
   1153c:	andeq	r1, r1, r0, lsl #13
   11540:	andeq	r1, r1, r0, lsl #13
   11544:	andeq	r1, r1, r0, lsl #13
   11548:	andeq	r1, r1, r0, lsl #13
   1154c:	andeq	r1, r1, r0, lsl #13
   11550:	andeq	r1, r1, r0, lsl #13
   11554:	andeq	r1, r1, r0, lsl #13
   11558:	andeq	r1, r1, r0, ror #8
   1155c:	andeq	r1, r1, r0, lsl #13
   11560:	andeq	r1, r1, r0, lsl #13
   11564:	andeq	r1, r1, r0, lsl #13
   11568:	andeq	r1, r1, r0, lsl #13
   1156c:	andeq	r1, r1, ip, asr r6
   11570:	andeq	r1, r1, r4, lsr #12
   11574:	andeq	r1, r1, r8, ror r7
   11578:	andeq	r1, r1, r0, lsl #13
   1157c:	andeq	r1, r1, ip, lsl r6
   11580:	andeq	r1, r1, r4, lsl r6
   11584:	andeq	r1, r1, r0, lsl #13
   11588:	andeq	r1, r1, r0, lsl #13
   1158c:	andeq	r1, r1, r0, lsl #13
   11590:	andeq	r1, r1, r0, lsl #13
   11594:	andeq	r1, r1, r0, lsl #13
   11598:	andeq	r1, r1, r0, lsl #13
   1159c:	andeq	r1, r1, r0, lsl #13
   115a0:	andeq	r1, r1, ip, lsl #12
   115a4:	andeq	r1, r1, r0, lsl #13
   115a8:	andeq	r1, r1, r0, lsl #13
   115ac:	andeq	r1, r1, r0, lsl #13
   115b0:	andeq	r1, r1, ip, lsl #13
   115b4:	andeq	r1, r1, r0, lsl #13
   115b8:	andeq	r1, r1, r4, asr r6
   115bc:	andeq	r1, r1, r0, lsl #13
   115c0:	andeq	r1, r1, ip, lsr #12
   115c4:	andeq	r1, r1, r0, lsl #13
   115c8:	andeq	r1, r1, r4, ror #12
   115cc:	sub	r4, r4, #48	; 0x30
   115d0:	ldrb	r0, [r7]
   115d4:	and	r1, r0, #248	; 0xf8
   115d8:	cmp	r1, #48	; 0x30
   115dc:	addeq	r0, r0, r4, lsl #3
   115e0:	subeq	r4, r0, #48	; 0x30
   115e4:	addeq	r7, r7, #1
   115e8:	ldrb	r0, [r7]
   115ec:	and	r1, r0, #248	; 0xf8
   115f0:	cmp	r1, #48	; 0x30
   115f4:	addeq	r0, r0, r4, lsl #3
   115f8:	subeq	r4, r0, #48	; 0x30
   115fc:	addeq	r7, r7, #1
   11600:	b	11460 <__assert_fail@plt+0x614>
   11604:	mov	r4, #92	; 0x5c
   11608:	b	11460 <__assert_fail@plt+0x614>
   1160c:	mov	r4, #10
   11610:	b	11460 <__assert_fail@plt+0x614>
   11614:	mov	r4, #12
   11618:	b	11460 <__assert_fail@plt+0x614>
   1161c:	mov	r4, #27
   11620:	b	11460 <__assert_fail@plt+0x614>
   11624:	mov	r4, #8
   11628:	b	11460 <__assert_fail@plt+0x614>
   1162c:	mov	r4, #11
   11630:	b	11460 <__assert_fail@plt+0x614>
   11634:	ldrb	r0, [r7]
   11638:	and	r1, r0, #248	; 0xf8
   1163c:	mov	r4, #0
   11640:	cmp	r1, #48	; 0x30
   11644:	bne	11460 <__assert_fail@plt+0x614>
   11648:	add	r7, r5, #3
   1164c:	mov	r4, r0
   11650:	b	115cc <__assert_fail@plt+0x780>
   11654:	mov	r4, #9
   11658:	b	11460 <__assert_fail@plt+0x614>
   1165c:	mov	r4, #7
   11660:	b	11460 <__assert_fail@plt+0x614>
   11664:	ldrb	sl, [r7]
   11668:	bl	10d74 <__ctype_b_loc@plt>
   1166c:	ldr	r8, [r0]
   11670:	add	r0, r8, sl, lsl #1
   11674:	ldrb	r0, [r0, #1]
   11678:	tst	r0, #16
   1167c:	bne	11694 <__assert_fail@plt+0x848>
   11680:	mov	r0, #92	; 0x5c
   11684:	bl	10e40 <putchar_unlocked@plt>
   11688:	b	11460 <__assert_fail@plt+0x614>
   1168c:	mov	r4, #13
   11690:	b	11460 <__assert_fail@plt+0x614>
   11694:	mov	r0, sl
   11698:	bl	1178c <__assert_fail@plt+0x940>
   1169c:	mov	r4, r0
   116a0:	mov	r7, r5
   116a4:	ldrb	r0, [r7, #3]!
   116a8:	add	r1, r8, r0, lsl #1
   116ac:	ldrb	r1, [r1, #1]
   116b0:	tst	r1, #16
   116b4:	beq	11460 <__assert_fail@plt+0x614>
   116b8:	bl	1178c <__assert_fail@plt+0x940>
   116bc:	add	r4, r0, r4, lsl #4
   116c0:	add	r7, r5, #4
   116c4:	b	11460 <__assert_fail@plt+0x614>
   116c8:	cmp	r9, #2
   116cc:	bge	11448 <__assert_fail@plt+0x5fc>
   116d0:	b	11714 <__assert_fail@plt+0x8c8>
   116d4:	cmp	r9, #1
   116d8:	blt	11714 <__assert_fail@plt+0x8c8>
   116dc:	add	r4, r9, #1
   116e0:	movw	r5, #24860	; 0x611c
   116e4:	movt	r5, #2
   116e8:	ldr	r1, [r5]
   116ec:	ldr	r0, [r6]
   116f0:	bl	10c54 <fputs_unlocked@plt>
   116f4:	cmp	r4, #2
   116f8:	beq	11714 <__assert_fail@plt+0x8c8>
   116fc:	mov	r0, #32
   11700:	bl	10e40 <putchar_unlocked@plt>
   11704:	sub	r4, r4, #1
   11708:	add	r6, r6, #4
   1170c:	cmp	r4, #1
   11710:	bgt	116e8 <__assert_fail@plt+0x89c>
   11714:	ldr	r0, [sp, #16]
   11718:	cmp	r0, #0
   1171c:	beq	11778 <__assert_fail@plt+0x92c>
   11720:	mov	r0, #10
   11724:	bl	10e40 <putchar_unlocked@plt>
   11728:	b	11778 <__assert_fail@plt+0x92c>
   1172c:	movw	r0, #24776	; 0x60c8
   11730:	movt	r0, #2
   11734:	ldr	r3, [r0]
   11738:	movw	r0, #24860	; 0x611c
   1173c:	movt	r0, #2
   11740:	ldr	r0, [r0]
   11744:	mov	r1, #0
   11748:	movw	r2, #19540	; 0x4c54
   1174c:	movt	r2, #1
   11750:	movw	r7, #19530	; 0x4c4a
   11754:	movt	r7, #1
   11758:	str	r7, [sp]
   1175c:	str	r2, [sp, #4]
   11760:	str	r1, [sp, #8]
   11764:	movw	r1, #19346	; 0x4b92
   11768:	movt	r1, #1
   1176c:	movw	r2, #19516	; 0x4c3c
   11770:	movt	r2, #1
   11774:	bl	13980 <__assert_fail@plt+0x2b34>
   11778:	mov	r0, #0
   1177c:	sub	sp, fp, #28
   11780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11784:	mov	r0, #0
   11788:	bl	10f48 <__assert_fail@plt+0xfc>
   1178c:	mov	r1, r0
   11790:	sub	r2, r0, #65	; 0x41
   11794:	cmp	r2, #37	; 0x25
   11798:	bhi	11868 <__assert_fail@plt+0xa1c>
   1179c:	mov	r0, #10
   117a0:	add	r3, pc, #0
   117a4:	ldr	pc, [r3, r2, lsl #2]
   117a8:	andeq	r1, r1, r4, ror #16
   117ac:	andeq	r1, r1, r0, asr #16
   117b0:	andeq	r1, r1, r8, asr #16
   117b4:	andeq	r1, r1, r0, asr r8
   117b8:	andeq	r1, r1, r8, asr r8
   117bc:	andeq	r1, r1, r0, ror #16
   117c0:	andeq	r1, r1, r8, ror #16
   117c4:	andeq	r1, r1, r8, ror #16
   117c8:	andeq	r1, r1, r8, ror #16
   117cc:	andeq	r1, r1, r8, ror #16
   117d0:	andeq	r1, r1, r8, ror #16
   117d4:	andeq	r1, r1, r8, ror #16
   117d8:	andeq	r1, r1, r8, ror #16
   117dc:	andeq	r1, r1, r8, ror #16
   117e0:	andeq	r1, r1, r8, ror #16
   117e4:	andeq	r1, r1, r8, ror #16
   117e8:	andeq	r1, r1, r8, ror #16
   117ec:	andeq	r1, r1, r8, ror #16
   117f0:	andeq	r1, r1, r8, ror #16
   117f4:	andeq	r1, r1, r8, ror #16
   117f8:	andeq	r1, r1, r8, ror #16
   117fc:	andeq	r1, r1, r8, ror #16
   11800:	andeq	r1, r1, r8, ror #16
   11804:	andeq	r1, r1, r8, ror #16
   11808:	andeq	r1, r1, r8, ror #16
   1180c:	andeq	r1, r1, r8, ror #16
   11810:	andeq	r1, r1, r8, ror #16
   11814:	andeq	r1, r1, r8, ror #16
   11818:	andeq	r1, r1, r8, ror #16
   1181c:	andeq	r1, r1, r8, ror #16
   11820:	andeq	r1, r1, r8, ror #16
   11824:	andeq	r1, r1, r8, ror #16
   11828:	andeq	r1, r1, r4, ror #16
   1182c:	andeq	r1, r1, r0, asr #16
   11830:	andeq	r1, r1, r8, asr #16
   11834:	andeq	r1, r1, r0, asr r8
   11838:	andeq	r1, r1, r8, asr r8
   1183c:	andeq	r1, r1, r0, ror #16
   11840:	mov	r0, #11
   11844:	bx	lr
   11848:	mov	r0, #12
   1184c:	bx	lr
   11850:	mov	r0, #13
   11854:	bx	lr
   11858:	mov	r0, #14
   1185c:	bx	lr
   11860:	mov	r0, #15
   11864:	bx	lr
   11868:	sub	r0, r1, #48	; 0x30
   1186c:	bx	lr
   11870:	movw	r1, #24868	; 0x6124
   11874:	movt	r1, #2
   11878:	str	r0, [r1]
   1187c:	bx	lr
   11880:	movw	r1, #24872	; 0x6128
   11884:	movt	r1, #2
   11888:	strb	r0, [r1]
   1188c:	bx	lr
   11890:	push	{r4, r5, r6, sl, fp, lr}
   11894:	add	fp, sp, #16
   11898:	sub	sp, sp, #8
   1189c:	movw	r0, #24860	; 0x611c
   118a0:	movt	r0, #2
   118a4:	ldr	r0, [r0]
   118a8:	bl	14278 <__assert_fail@plt+0x342c>
   118ac:	cmp	r0, #0
   118b0:	beq	118d8 <__assert_fail@plt+0xa8c>
   118b4:	movw	r0, #24872	; 0x6128
   118b8:	movt	r0, #2
   118bc:	ldrb	r0, [r0]
   118c0:	cmp	r0, #0
   118c4:	beq	118f8 <__assert_fail@plt+0xaac>
   118c8:	bl	10d98 <__errno_location@plt>
   118cc:	ldr	r0, [r0]
   118d0:	cmp	r0, #32
   118d4:	bne	118f8 <__assert_fail@plt+0xaac>
   118d8:	movw	r0, #24856	; 0x6118
   118dc:	movt	r0, #2
   118e0:	ldr	r0, [r0]
   118e4:	bl	14278 <__assert_fail@plt+0x342c>
   118e8:	cmp	r0, #0
   118ec:	subeq	sp, fp, #16
   118f0:	popeq	{r4, r5, r6, sl, fp, pc}
   118f4:	b	11968 <__assert_fail@plt+0xb1c>
   118f8:	movw	r1, #19935	; 0x4ddf
   118fc:	movt	r1, #1
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	bl	10cb4 <dcgettext@plt>
   1190c:	mov	r4, r0
   11910:	movw	r0, #24868	; 0x6124
   11914:	movt	r0, #2
   11918:	ldr	r6, [r0]
   1191c:	bl	10d98 <__errno_location@plt>
   11920:	ldr	r5, [r0]
   11924:	cmp	r6, #0
   11928:	bne	11944 <__assert_fail@plt+0xaf8>
   1192c:	movw	r2, #19951	; 0x4def
   11930:	movt	r2, #1
   11934:	mov	r0, #0
   11938:	mov	r1, r5
   1193c:	mov	r3, r4
   11940:	b	11964 <__assert_fail@plt+0xb18>
   11944:	mov	r0, r6
   11948:	bl	13060 <__assert_fail@plt+0x2214>
   1194c:	mov	r3, r0
   11950:	str	r4, [sp]
   11954:	movw	r2, #19947	; 0x4deb
   11958:	movt	r2, #1
   1195c:	mov	r0, #0
   11960:	mov	r1, r5
   11964:	bl	10d2c <error@plt>
   11968:	movw	r0, #24780	; 0x60cc
   1196c:	movt	r0, #2
   11970:	ldr	r0, [r0]
   11974:	bl	10c84 <_exit@plt>
   11978:	push	{r4, r5, fp, lr}
   1197c:	add	fp, sp, #8
   11980:	cmp	r0, #0
   11984:	beq	11a18 <__assert_fail@plt+0xbcc>
   11988:	mov	r4, r0
   1198c:	mov	r1, #47	; 0x2f
   11990:	bl	10e04 <strrchr@plt>
   11994:	cmp	r0, #0
   11998:	mov	r5, r4
   1199c:	addne	r5, r0, #1
   119a0:	sub	r0, r5, r4
   119a4:	cmp	r0, #7
   119a8:	blt	119fc <__assert_fail@plt+0xbb0>
   119ac:	sub	r0, r5, #7
   119b0:	movw	r1, #20010	; 0x4e2a
   119b4:	movt	r1, #1
   119b8:	mov	r2, #7
   119bc:	bl	10e28 <strncmp@plt>
   119c0:	cmp	r0, #0
   119c4:	bne	119fc <__assert_fail@plt+0xbb0>
   119c8:	movw	r1, #20018	; 0x4e32
   119cc:	movt	r1, #1
   119d0:	mov	r0, r5
   119d4:	mov	r2, #3
   119d8:	bl	10e28 <strncmp@plt>
   119dc:	cmp	r0, #0
   119e0:	beq	119ec <__assert_fail@plt+0xba0>
   119e4:	mov	r4, r5
   119e8:	b	119fc <__assert_fail@plt+0xbb0>
   119ec:	add	r4, r5, #3
   119f0:	movw	r0, #24848	; 0x6110
   119f4:	movt	r0, #2
   119f8:	str	r4, [r0]
   119fc:	movw	r0, #24852	; 0x6114
   11a00:	movt	r0, #2
   11a04:	str	r4, [r0]
   11a08:	movw	r0, #24876	; 0x612c
   11a0c:	movt	r0, #2
   11a10:	str	r4, [r0]
   11a14:	pop	{r4, r5, fp, pc}
   11a18:	movw	r0, #24856	; 0x6118
   11a1c:	movt	r0, #2
   11a20:	ldr	r3, [r0]
   11a24:	movw	r0, #19954	; 0x4df2
   11a28:	movt	r0, #1
   11a2c:	mov	r1, #55	; 0x37
   11a30:	mov	r2, #1
   11a34:	bl	10ce4 <fwrite@plt>
   11a38:	bl	10e34 <abort@plt>
   11a3c:	push	{r4, r5, r6, sl, fp, lr}
   11a40:	add	fp, sp, #16
   11a44:	mov	r4, r0
   11a48:	movw	r0, #24880	; 0x6130
   11a4c:	movt	r0, #2
   11a50:	cmp	r4, #0
   11a54:	moveq	r4, r0
   11a58:	bl	10d98 <__errno_location@plt>
   11a5c:	mov	r5, r0
   11a60:	ldr	r6, [r0]
   11a64:	mov	r0, r4
   11a68:	mov	r1, #48	; 0x30
   11a6c:	bl	13d7c <__assert_fail@plt+0x2f30>
   11a70:	str	r6, [r5]
   11a74:	pop	{r4, r5, r6, sl, fp, pc}
   11a78:	movw	r1, #24880	; 0x6130
   11a7c:	movt	r1, #2
   11a80:	cmp	r0, #0
   11a84:	movne	r1, r0
   11a88:	ldr	r0, [r1]
   11a8c:	bx	lr
   11a90:	movw	r2, #24880	; 0x6130
   11a94:	movt	r2, #2
   11a98:	cmp	r0, #0
   11a9c:	movne	r2, r0
   11aa0:	str	r1, [r2]
   11aa4:	bx	lr
   11aa8:	movw	r3, #24880	; 0x6130
   11aac:	movt	r3, #2
   11ab0:	cmp	r0, #0
   11ab4:	movne	r3, r0
   11ab8:	ubfx	r0, r1, #5, #3
   11abc:	add	r0, r3, r0, lsl #2
   11ac0:	ldr	r3, [r0, #8]
   11ac4:	and	r1, r1, #31
   11ac8:	eor	r2, r2, r3, lsr r1
   11acc:	and	r2, r2, #1
   11ad0:	eor	r2, r3, r2, lsl r1
   11ad4:	str	r2, [r0, #8]
   11ad8:	mov	r0, #1
   11adc:	and	r0, r0, r3, lsr r1
   11ae0:	bx	lr
   11ae4:	movw	r2, #24880	; 0x6130
   11ae8:	movt	r2, #2
   11aec:	cmp	r0, #0
   11af0:	movne	r2, r0
   11af4:	ldr	r0, [r2, #4]
   11af8:	str	r1, [r2, #4]
   11afc:	bx	lr
   11b00:	movw	r3, #24880	; 0x6130
   11b04:	movt	r3, #2
   11b08:	cmp	r0, #0
   11b0c:	movne	r3, r0
   11b10:	mov	r0, #10
   11b14:	str	r0, [r3]
   11b18:	cmp	r1, #0
   11b1c:	cmpne	r2, #0
   11b20:	bne	11b30 <__assert_fail@plt+0xce4>
   11b24:	push	{fp, lr}
   11b28:	mov	fp, sp
   11b2c:	bl	10e34 <abort@plt>
   11b30:	str	r1, [r3, #40]	; 0x28
   11b34:	str	r2, [r3, #44]	; 0x2c
   11b38:	bx	lr
   11b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b40:	add	fp, sp, #28
   11b44:	sub	sp, sp, #20
   11b48:	mov	r8, r3
   11b4c:	mov	r9, r2
   11b50:	mov	sl, r1
   11b54:	mov	r7, r0
   11b58:	ldr	r0, [fp, #8]
   11b5c:	movw	r5, #24880	; 0x6130
   11b60:	movt	r5, #2
   11b64:	cmp	r0, #0
   11b68:	movne	r5, r0
   11b6c:	bl	10d98 <__errno_location@plt>
   11b70:	mov	r4, r0
   11b74:	ldm	r5, {r0, r1}
   11b78:	ldr	r2, [r5, #40]	; 0x28
   11b7c:	ldr	r3, [r5, #44]	; 0x2c
   11b80:	ldr	r6, [r4]
   11b84:	add	r5, r5, #8
   11b88:	stm	sp, {r0, r1, r5}
   11b8c:	str	r2, [sp, #12]
   11b90:	str	r3, [sp, #16]
   11b94:	mov	r0, r7
   11b98:	mov	r1, sl
   11b9c:	mov	r2, r9
   11ba0:	mov	r3, r8
   11ba4:	bl	11bb4 <__assert_fail@plt+0xd68>
   11ba8:	str	r6, [r4]
   11bac:	sub	sp, fp, #28
   11bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb8:	add	fp, sp, #28
   11bbc:	sub	sp, sp, #156	; 0x9c
   11bc0:	mov	r9, r3
   11bc4:	str	r2, [fp, #-84]	; 0xffffffac
   11bc8:	mov	r6, r1
   11bcc:	mov	r7, r0
   11bd0:	ldr	r0, [fp, #12]
   11bd4:	and	r1, r0, #4
   11bd8:	str	r1, [sp, #32]
   11bdc:	and	r1, r0, #1
   11be0:	str	r1, [sp, #36]	; 0x24
   11be4:	ubfx	sl, r0, #1, #1
   11be8:	bl	10cfc <__ctype_get_mb_cur_max@plt>
   11bec:	str	r0, [sp, #40]	; 0x28
   11bf0:	ldr	r0, [fp, #24]
   11bf4:	str	r0, [sp, #76]	; 0x4c
   11bf8:	ldr	r0, [fp, #20]
   11bfc:	str	r0, [sp, #68]	; 0x44
   11c00:	ldr	r0, [fp, #8]
   11c04:	str	r0, [fp, #-60]	; 0xffffffc4
   11c08:	mov	r0, #0
   11c0c:	str	r0, [sp, #72]	; 0x48
   11c10:	mov	r0, #0
   11c14:	str	r0, [sp, #92]	; 0x5c
   11c18:	mov	r0, #0
   11c1c:	str	r0, [fp, #-72]	; 0xffffffb8
   11c20:	mov	r0, #0
   11c24:	mov	r1, #0
   11c28:	str	r1, [fp, #-56]	; 0xffffffc8
   11c2c:	mov	r1, #0
   11c30:	str	r1, [sp, #56]	; 0x38
   11c34:	mov	r5, #1
   11c38:	str	r7, [sp, #80]	; 0x50
   11c3c:	mov	r4, r6
   11c40:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11c44:	cmp	r6, #10
   11c48:	bhi	12bb0 <__assert_fail@plt+0x1d64>
   11c4c:	add	r1, pc, #20
   11c50:	mov	r8, #0
   11c54:	mov	r2, #1
   11c58:	mov	r3, #0
   11c5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11c60:	mov	lr, r9
   11c64:	ldr	pc, [r1, r6, lsl #2]
   11c68:	andeq	r1, r1, r0, asr #26
   11c6c:	andeq	r1, r1, r0, ror sp
   11c70:	andeq	r1, r1, r0, lsr sp
   11c74:	andeq	r1, r1, r8, lsr #26
   11c78:	andeq	r1, r1, r4, ror #26
   11c7c:	andeq	r1, r1, r4, asr #27
   11c80:	andeq	r1, r1, r0, asr sp
   11c84:	andeq	r1, r1, r0, lsr #28
   11c88:	muleq	r1, r4, ip
   11c8c:	muleq	r1, r4, ip
   11c90:			; <UNDEFINED> instruction: 0x00011cbc
   11c94:	movw	r0, #20100	; 0x4e84
   11c98:	movt	r0, #1
   11c9c:	mov	r1, r6
   11ca0:	bl	131bc <__assert_fail@plt+0x2370>
   11ca4:	str	r0, [sp, #68]	; 0x44
   11ca8:	movw	r0, #20102	; 0x4e86
   11cac:	movt	r0, #1
   11cb0:	mov	r1, r6
   11cb4:	bl	131bc <__assert_fail@plt+0x2370>
   11cb8:	str	r0, [sp, #76]	; 0x4c
   11cbc:	mov	r8, #0
   11cc0:	tst	sl, #1
   11cc4:	bne	11cfc <__assert_fail@plt+0xeb0>
   11cc8:	ldr	r0, [sp, #68]	; 0x44
   11ccc:	ldrb	r0, [r0]
   11cd0:	cmp	r0, #0
   11cd4:	beq	11cfc <__assert_fail@plt+0xeb0>
   11cd8:	ldr	r1, [sp, #68]	; 0x44
   11cdc:	add	r1, r1, #1
   11ce0:	mov	r8, #0
   11ce4:	cmp	r8, r4
   11ce8:	strbcc	r0, [r7, r8]
   11cec:	ldrb	r0, [r1, r8]
   11cf0:	add	r8, r8, #1
   11cf4:	cmp	r0, #0
   11cf8:	bne	11ce4 <__assert_fail@plt+0xe98>
   11cfc:	ldr	r6, [sp, #76]	; 0x4c
   11d00:	mov	r0, r6
   11d04:	bl	10d8c <strlen@plt>
   11d08:	str	r0, [fp, #-72]	; 0xffffffb8
   11d0c:	str	r6, [sp, #92]	; 0x5c
   11d10:	mov	r2, #1
   11d14:	mov	r3, sl
   11d18:	ldr	ip, [fp, #-84]	; 0xffffffac
   11d1c:	mov	lr, r9
   11d20:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11d24:	b	11e20 <__assert_fail@plt+0xfd4>
   11d28:	mov	r0, #1
   11d2c:	b	11d70 <__assert_fail@plt+0xf24>
   11d30:	tst	sl, #1
   11d34:	bne	11d70 <__assert_fail@plt+0xf24>
   11d38:	mov	r2, r0
   11d3c:	b	11d98 <__assert_fail@plt+0xf4c>
   11d40:	mov	r6, #0
   11d44:	mov	r8, #0
   11d48:	mov	r2, r0
   11d4c:	b	11e1c <__assert_fail@plt+0xfd0>
   11d50:	mov	r0, #1
   11d54:	str	r0, [fp, #-72]	; 0xffffffb8
   11d58:	mov	r8, #0
   11d5c:	mov	r6, #5
   11d60:	b	11ddc <__assert_fail@plt+0xf90>
   11d64:	mov	r2, #1
   11d68:	tst	sl, #1
   11d6c:	beq	11d98 <__assert_fail@plt+0xf4c>
   11d70:	mov	r1, #1
   11d74:	str	r1, [fp, #-72]	; 0xffffffb8
   11d78:	mov	r8, #0
   11d7c:	mov	r6, #2
   11d80:	movw	r1, #20102	; 0x4e86
   11d84:	movt	r1, #1
   11d88:	str	r1, [sp, #92]	; 0x5c
   11d8c:	mov	r2, r0
   11d90:	mov	r3, #1
   11d94:	b	11e20 <__assert_fail@plt+0xfd4>
   11d98:	mov	r8, #1
   11d9c:	mov	r6, #2
   11da0:	cmp	r4, #0
   11da4:	movne	r0, #39	; 0x27
   11da8:	strbne	r0, [r7]
   11dac:	movw	r0, #20102	; 0x4e86
   11db0:	movt	r0, #1
   11db4:	str	r0, [sp, #92]	; 0x5c
   11db8:	mov	r0, #1
   11dbc:	str	r0, [fp, #-72]	; 0xffffffb8
   11dc0:	b	11e1c <__assert_fail@plt+0xfd0>
   11dc4:	mov	r6, #5
   11dc8:	tst	sl, #1
   11dcc:	beq	11df4 <__assert_fail@plt+0xfa8>
   11dd0:	mov	r0, #1
   11dd4:	str	r0, [fp, #-72]	; 0xffffffb8
   11dd8:	mov	r8, #0
   11ddc:	movw	r0, #20098	; 0x4e82
   11de0:	movt	r0, #1
   11de4:	str	r0, [sp, #92]	; 0x5c
   11de8:	mov	r2, #1
   11dec:	mov	r3, #1
   11df0:	b	11e20 <__assert_fail@plt+0xfd4>
   11df4:	cmp	r4, #0
   11df8:	movne	r0, #34	; 0x22
   11dfc:	strbne	r0, [r7]
   11e00:	mov	r8, #1
   11e04:	movw	r0, #20098	; 0x4e82
   11e08:	movt	r0, #1
   11e0c:	str	r0, [sp, #92]	; 0x5c
   11e10:	mov	r0, #1
   11e14:	str	r0, [fp, #-72]	; 0xffffffb8
   11e18:	mov	r2, #1
   11e1c:	mov	r3, #0
   11e20:	ldr	r0, [fp, #16]
   11e24:	cmp	r0, #0
   11e28:	movwne	r0, #1
   11e2c:	and	r0, r0, r3
   11e30:	str	r0, [fp, #-88]	; 0xffffffa8
   11e34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11e38:	cmp	r0, #0
   11e3c:	movwne	r0, #1
   11e40:	and	r1, r0, r3
   11e44:	and	r1, r2, r1
   11e48:	str	r1, [sp, #48]	; 0x30
   11e4c:	str	r6, [fp, #-60]	; 0xffffffc4
   11e50:	subs	r6, r6, #2
   11e54:	clz	r1, r6
   11e58:	lsr	r1, r1, #5
   11e5c:	and	r1, r1, r3
   11e60:	str	r1, [sp, #60]	; 0x3c
   11e64:	str	r6, [fp, #-80]	; 0xffffffb0
   11e68:	mov	r1, r6
   11e6c:	movwne	r1, #1
   11e70:	str	r3, [fp, #-76]	; 0xffffffb4
   11e74:	eor	r3, r3, #1
   11e78:	str	r3, [sp, #88]	; 0x58
   11e7c:	orr	r3, r1, r3
   11e80:	str	r3, [sp, #64]	; 0x40
   11e84:	and	r1, r1, r2
   11e88:	str	r1, [fp, #-68]	; 0xffffffbc
   11e8c:	and	r0, r0, r1
   11e90:	str	r0, [fp, #-64]	; 0xffffffc0
   11e94:	str	r2, [sp, #84]	; 0x54
   11e98:	eor	r0, r2, #1
   11e9c:	str	r0, [sp, #52]	; 0x34
   11ea0:	mov	r6, #0
   11ea4:	cmn	lr, #1
   11ea8:	beq	11eb8 <__assert_fail@plt+0x106c>
   11eac:	cmp	r6, lr
   11eb0:	bne	11ec4 <__assert_fail@plt+0x1078>
   11eb4:	b	12a30 <__assert_fail@plt+0x1be4>
   11eb8:	ldrb	r0, [ip, r6]
   11ebc:	cmp	r0, #0
   11ec0:	beq	12a30 <__assert_fail@plt+0x1be4>
   11ec4:	str	r5, [fp, #-48]	; 0xffffffd0
   11ec8:	mov	sl, #0
   11ecc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11ed0:	cmp	r0, #0
   11ed4:	beq	11f08 <__assert_fail@plt+0x10bc>
   11ed8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11edc:	add	r5, r6, r0
   11ee0:	cmp	r0, #2
   11ee4:	bcc	11f00 <__assert_fail@plt+0x10b4>
   11ee8:	cmn	lr, #1
   11eec:	bne	11f00 <__assert_fail@plt+0x10b4>
   11ef0:	mov	r0, ip
   11ef4:	bl	10d8c <strlen@plt>
   11ef8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11efc:	mov	lr, r0
   11f00:	cmp	r5, lr
   11f04:	bls	11f14 <__assert_fail@plt+0x10c8>
   11f08:	mov	r0, #0
   11f0c:	str	r0, [fp, #-52]	; 0xffffffcc
   11f10:	b	11f60 <__assert_fail@plt+0x1114>
   11f14:	mov	r5, r4
   11f18:	mov	r4, lr
   11f1c:	add	r0, ip, r6
   11f20:	ldr	r1, [sp, #92]	; 0x5c
   11f24:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11f28:	bl	10ca8 <memcmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	mov	r1, r0
   11f34:	movwne	r1, #1
   11f38:	ldr	r2, [sp, #88]	; 0x58
   11f3c:	orr	r1, r1, r2
   11f40:	tst	r1, #1
   11f44:	beq	12af4 <__assert_fail@plt+0x1ca8>
   11f48:	clz	r0, r0
   11f4c:	lsr	r0, r0, #5
   11f50:	str	r0, [fp, #-52]	; 0xffffffcc
   11f54:	ldr	ip, [fp, #-84]	; 0xffffffac
   11f58:	mov	lr, r4
   11f5c:	mov	r4, r5
   11f60:	ldrb	r5, [ip, r6]
   11f64:	cmp	r5, #126	; 0x7e
   11f68:	bhi	12324 <__assert_fail@plt+0x14d8>
   11f6c:	mov	r9, #1
   11f70:	mov	r2, #110	; 0x6e
   11f74:	mov	r0, #97	; 0x61
   11f78:	add	r3, pc, #4
   11f7c:	mov	r1, #0
   11f80:	ldr	pc, [r3, r5, lsl #2]
   11f84:	andeq	r2, r1, ip, lsl r2
   11f88:	andeq	r2, r1, r4, lsr #6
   11f8c:	andeq	r2, r1, r4, lsr #6
   11f90:	andeq	r2, r1, r4, lsr #6
   11f94:	andeq	r2, r1, r4, lsr #6
   11f98:	andeq	r2, r1, r4, lsr #6
   11f9c:	andeq	r2, r1, r4, lsr #6
   11fa0:	andeq	r2, r1, r8, ror #7
   11fa4:	strdeq	r2, [r1], -ip
   11fa8:	strdeq	r2, [r1], -r4
   11fac:	andeq	r2, r1, r8, lsl #4
   11fb0:	andeq	r2, r1, ip, lsl #5
   11fb4:	andeq	r2, r1, ip, ror #3
   11fb8:	andeq	r2, r1, r4, lsl #4
   11fbc:	andeq	r2, r1, r4, lsr #6
   11fc0:	andeq	r2, r1, r4, lsr #6
   11fc4:	andeq	r2, r1, r4, lsr #6
   11fc8:	andeq	r2, r1, r4, lsr #6
   11fcc:	andeq	r2, r1, r4, lsr #6
   11fd0:	andeq	r2, r1, r4, lsr #6
   11fd4:	andeq	r2, r1, r4, lsr #6
   11fd8:	andeq	r2, r1, r4, lsr #6
   11fdc:	andeq	r2, r1, r4, lsr #6
   11fe0:	andeq	r2, r1, r4, lsr #6
   11fe4:	andeq	r2, r1, r4, lsr #6
   11fe8:	andeq	r2, r1, r4, lsr #6
   11fec:	andeq	r2, r1, r4, lsr #6
   11ff0:	andeq	r2, r1, r4, lsr #6
   11ff4:	andeq	r2, r1, r4, lsr #6
   11ff8:	andeq	r2, r1, r4, lsr #6
   11ffc:	andeq	r2, r1, r4, lsr #6
   12000:	andeq	r2, r1, r4, lsr #6
   12004:	muleq	r1, r8, r3
   12008:	muleq	r1, ip, r3
   1200c:	muleq	r1, ip, r3
   12010:	muleq	r1, r4, r1
   12014:	muleq	r1, ip, r3
   12018:	andeq	r2, r1, r0, lsl #3
   1201c:	muleq	r1, ip, r3
   12020:	muleq	r1, r4, r2
   12024:	muleq	r1, ip, r3
   12028:	muleq	r1, ip, r3
   1202c:	muleq	r1, ip, r3
   12030:	andeq	r2, r1, r0, lsl #3
   12034:	andeq	r2, r1, r0, lsl #3
   12038:	andeq	r2, r1, r0, lsl #3
   1203c:	andeq	r2, r1, r0, lsl #3
   12040:	andeq	r2, r1, r0, lsl #3
   12044:	andeq	r2, r1, r0, lsl #3
   12048:	andeq	r2, r1, r0, lsl #3
   1204c:	andeq	r2, r1, r0, lsl #3
   12050:	andeq	r2, r1, r0, lsl #3
   12054:	andeq	r2, r1, r0, lsl #3
   12058:	andeq	r2, r1, r0, lsl #3
   1205c:	andeq	r2, r1, r0, lsl #3
   12060:	andeq	r2, r1, r0, lsl #3
   12064:	andeq	r2, r1, r0, lsl #3
   12068:	andeq	r2, r1, r0, lsl #3
   1206c:	andeq	r2, r1, r0, lsl #3
   12070:	muleq	r1, ip, r3
   12074:	muleq	r1, ip, r3
   12078:	muleq	r1, ip, r3
   1207c:	muleq	r1, ip, r3
   12080:	andeq	r2, r1, ip, asr r2
   12084:	andeq	r2, r1, r4, lsr #6
   12088:	andeq	r2, r1, r0, lsl #3
   1208c:	andeq	r2, r1, r0, lsl #3
   12090:	andeq	r2, r1, r0, lsl #3
   12094:	andeq	r2, r1, r0, lsl #3
   12098:	andeq	r2, r1, r0, lsl #3
   1209c:	andeq	r2, r1, r0, lsl #3
   120a0:	andeq	r2, r1, r0, lsl #3
   120a4:	andeq	r2, r1, r0, lsl #3
   120a8:	andeq	r2, r1, r0, lsl #3
   120ac:	andeq	r2, r1, r0, lsl #3
   120b0:	andeq	r2, r1, r0, lsl #3
   120b4:	andeq	r2, r1, r0, lsl #3
   120b8:	andeq	r2, r1, r0, lsl #3
   120bc:	andeq	r2, r1, r0, lsl #3
   120c0:	andeq	r2, r1, r0, lsl #3
   120c4:	andeq	r2, r1, r0, lsl #3
   120c8:	andeq	r2, r1, r0, lsl #3
   120cc:	andeq	r2, r1, r0, lsl #3
   120d0:	andeq	r2, r1, r0, lsl #3
   120d4:	andeq	r2, r1, r0, lsl #3
   120d8:	andeq	r2, r1, r0, lsl #3
   120dc:	andeq	r2, r1, r0, lsl #3
   120e0:	andeq	r2, r1, r0, lsl #3
   120e4:	andeq	r2, r1, r0, lsl #3
   120e8:	andeq	r2, r1, r0, lsl #3
   120ec:	andeq	r2, r1, r0, lsl #3
   120f0:	muleq	r1, ip, r3
   120f4:	andeq	r2, r1, r8, asr #3
   120f8:	andeq	r2, r1, r0, lsl #3
   120fc:	muleq	r1, ip, r3
   12100:	andeq	r2, r1, r0, lsl #3
   12104:	muleq	r1, ip, r3
   12108:	andeq	r2, r1, r0, lsl #3
   1210c:	andeq	r2, r1, r0, lsl #3
   12110:	andeq	r2, r1, r0, lsl #3
   12114:	andeq	r2, r1, r0, lsl #3
   12118:	andeq	r2, r1, r0, lsl #3
   1211c:	andeq	r2, r1, r0, lsl #3
   12120:	andeq	r2, r1, r0, lsl #3
   12124:	andeq	r2, r1, r0, lsl #3
   12128:	andeq	r2, r1, r0, lsl #3
   1212c:	andeq	r2, r1, r0, lsl #3
   12130:	andeq	r2, r1, r0, lsl #3
   12134:	andeq	r2, r1, r0, lsl #3
   12138:	andeq	r2, r1, r0, lsl #3
   1213c:	andeq	r2, r1, r0, lsl #3
   12140:	andeq	r2, r1, r0, lsl #3
   12144:	andeq	r2, r1, r0, lsl #3
   12148:	andeq	r2, r1, r0, lsl #3
   1214c:	andeq	r2, r1, r0, lsl #3
   12150:	andeq	r2, r1, r0, lsl #3
   12154:	andeq	r2, r1, r0, lsl #3
   12158:	andeq	r2, r1, r0, lsl #3
   1215c:	andeq	r2, r1, r0, lsl #3
   12160:	andeq	r2, r1, r0, lsl #3
   12164:	andeq	r2, r1, r0, lsl #3
   12168:	andeq	r2, r1, r0, lsl #3
   1216c:	andeq	r2, r1, r0, lsl #3
   12170:	andeq	r2, r1, r8, lsr #3
   12174:	muleq	r1, ip, r3
   12178:	andeq	r2, r1, r8, lsr #3
   1217c:	muleq	r1, r4, r1
   12180:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12184:	cmp	r0, #0
   12188:	beq	123fc <__assert_fail@plt+0x15b0>
   1218c:	ldr	r0, [fp, #16]
   12190:	b	12400 <__assert_fail@plt+0x15b4>
   12194:	mov	r9, #0
   12198:	cmp	r6, #0
   1219c:	beq	12398 <__assert_fail@plt+0x154c>
   121a0:	mov	sl, #0
   121a4:	b	12180 <__assert_fail@plt+0x1334>
   121a8:	mov	r9, #0
   121ac:	cmn	lr, #1
   121b0:	beq	1237c <__assert_fail@plt+0x1530>
   121b4:	cmp	r6, #0
   121b8:	bne	121a0 <__assert_fail@plt+0x1354>
   121bc:	cmp	lr, #1
   121c0:	beq	12398 <__assert_fail@plt+0x154c>
   121c4:	b	121a0 <__assert_fail@plt+0x1354>
   121c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   121cc:	cmp	r0, #2
   121d0:	bne	123c4 <__assert_fail@plt+0x1578>
   121d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121d8:	tst	r0, #1
   121dc:	bne	12b0c <__assert_fail@plt+0x1cc0>
   121e0:	mov	sl, #0
   121e4:	mov	r0, #92	; 0x5c
   121e8:	b	123d8 <__assert_fail@plt+0x158c>
   121ec:	mov	r0, #102	; 0x66
   121f0:	b	123e8 <__assert_fail@plt+0x159c>
   121f4:	mov	r2, #116	; 0x74
   121f8:	b	12208 <__assert_fail@plt+0x13bc>
   121fc:	mov	r0, #98	; 0x62
   12200:	b	123e8 <__assert_fail@plt+0x159c>
   12204:	mov	r2, #114	; 0x72
   12208:	ldr	r0, [sp, #64]	; 0x40
   1220c:	tst	r0, #1
   12210:	mov	r0, r2
   12214:	bne	123e8 <__assert_fail@plt+0x159c>
   12218:	b	12b0c <__assert_fail@plt+0x1cc0>
   1221c:	ldr	r0, [sp, #84]	; 0x54
   12220:	tst	r0, #1
   12224:	beq	124d8 <__assert_fail@plt+0x168c>
   12228:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1222c:	tst	r0, #1
   12230:	bne	12b0c <__assert_fail@plt+0x1cc0>
   12234:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12238:	cmp	r0, #2
   1223c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12240:	movwne	r0, #1
   12244:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12248:	orr	r0, r0, r2
   1224c:	tst	r0, #1
   12250:	beq	128cc <__assert_fail@plt+0x1a80>
   12254:	mov	r0, r8
   12258:	b	12900 <__assert_fail@plt+0x1ab4>
   1225c:	mov	sl, #0
   12260:	mov	r5, #63	; 0x3f
   12264:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12268:	cmp	r0, #5
   1226c:	beq	1268c <__assert_fail@plt+0x1840>
   12270:	cmp	r0, #2
   12274:	bne	1272c <__assert_fail@plt+0x18e0>
   12278:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1227c:	tst	r0, #1
   12280:	mov	r9, #0
   12284:	beq	12180 <__assert_fail@plt+0x1334>
   12288:	b	12b0c <__assert_fail@plt+0x1cc0>
   1228c:	mov	r0, #118	; 0x76
   12290:	b	123e8 <__assert_fail@plt+0x159c>
   12294:	mov	r5, #39	; 0x27
   12298:	mov	r0, #1
   1229c:	str	r0, [sp, #56]	; 0x38
   122a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   122a4:	cmp	r0, #2
   122a8:	bne	124f8 <__assert_fail@plt+0x16ac>
   122ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122b0:	tst	r0, #1
   122b4:	bne	12b0c <__assert_fail@plt+0x1cc0>
   122b8:	ldr	r2, [sp, #72]	; 0x48
   122bc:	cmp	r2, #0
   122c0:	mov	r0, r2
   122c4:	movwne	r0, #1
   122c8:	clz	r1, r4
   122cc:	lsr	r1, r1, #5
   122d0:	orrs	r0, r0, r1
   122d4:	moveq	r2, r4
   122d8:	str	r2, [sp, #72]	; 0x48
   122dc:	moveq	r4, r0
   122e0:	cmp	r8, r4
   122e4:	movcc	r0, #39	; 0x27
   122e8:	strbcc	r0, [r7, r8]
   122ec:	add	r0, r8, #1
   122f0:	cmp	r0, r4
   122f4:	movcc	r1, #92	; 0x5c
   122f8:	strbcc	r1, [r7, r0]
   122fc:	add	r0, r8, #2
   12300:	cmp	r0, r4
   12304:	movcc	r1, #39	; 0x27
   12308:	strbcc	r1, [r7, r0]
   1230c:	add	r8, r8, #3
   12310:	mov	r0, #0
   12314:	str	r0, [fp, #-56]	; 0xffffffc8
   12318:	mov	sl, #0
   1231c:	mov	r9, #1
   12320:	b	12180 <__assert_fail@plt+0x1334>
   12324:	str	r4, [sp, #24]
   12328:	ldr	r0, [sp, #40]	; 0x28
   1232c:	cmp	r0, #1
   12330:	bne	12500 <__assert_fail@plt+0x16b4>
   12334:	str	lr, [sp, #28]
   12338:	bl	10d74 <__ctype_b_loc@plt>
   1233c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12340:	ldr	r0, [r0]
   12344:	add	r0, r0, r5, lsl #1
   12348:	ldrb	r0, [r0, #1]
   1234c:	ubfx	r9, r0, #6, #1
   12350:	mov	r1, #1
   12354:	ldr	r4, [sp, #24]
   12358:	ldr	r0, [sp, #52]	; 0x34
   1235c:	orr	r0, r9, r0
   12360:	mov	r2, r1
   12364:	cmp	r1, #1
   12368:	bhi	12734 <__assert_fail@plt+0x18e8>
   1236c:	tst	r0, #1
   12370:	beq	12734 <__assert_fail@plt+0x18e8>
   12374:	ldr	lr, [sp, #28]
   12378:	b	12180 <__assert_fail@plt+0x1334>
   1237c:	cmp	r6, #0
   12380:	ldrbeq	r0, [ip, #1]
   12384:	cmpeq	r0, #0
   12388:	beq	12398 <__assert_fail@plt+0x154c>
   1238c:	mvn	lr, #0
   12390:	mov	sl, #0
   12394:	b	12180 <__assert_fail@plt+0x1334>
   12398:	mov	r1, #1
   1239c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   123a0:	cmp	r0, #2
   123a4:	bne	123bc <__assert_fail@plt+0x1570>
   123a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   123ac:	tst	r0, #1
   123b0:	mov	r9, r1
   123b4:	beq	12180 <__assert_fail@plt+0x1334>
   123b8:	b	12b0c <__assert_fail@plt+0x1cc0>
   123bc:	mov	r9, r1
   123c0:	b	12180 <__assert_fail@plt+0x1334>
   123c4:	mov	sl, #0
   123c8:	mov	r0, #92	; 0x5c
   123cc:	ldr	r1, [sp, #48]	; 0x30
   123d0:	cmp	r1, #0
   123d4:	beq	123e8 <__assert_fail@plt+0x159c>
   123d8:	mov	r9, #0
   123dc:	cmp	sl, #0
   123e0:	beq	12998 <__assert_fail@plt+0x1b4c>
   123e4:	b	129d4 <__assert_fail@plt+0x1b88>
   123e8:	mov	r9, #0
   123ec:	ldr	r1, [sp, #84]	; 0x54
   123f0:	tst	r1, #1
   123f4:	mov	sl, #0
   123f8:	bne	12438 <__assert_fail@plt+0x15ec>
   123fc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12400:	cmp	r0, #0
   12404:	mov	r0, r5
   12408:	beq	1242c <__assert_fail@plt+0x15e0>
   1240c:	ubfx	r0, r5, #5, #3
   12410:	ldr	r1, [fp, #16]
   12414:	ldr	r0, [r1, r0, lsl #2]
   12418:	and	r1, r5, #31
   1241c:	mov	r2, #1
   12420:	tst	r0, r2, lsl r1
   12424:	mov	r0, r5
   12428:	bne	12438 <__assert_fail@plt+0x15ec>
   1242c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12430:	cmp	r1, #0
   12434:	beq	12990 <__assert_fail@plt+0x1b44>
   12438:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1243c:	tst	r1, #1
   12440:	bne	12b0c <__assert_fail@plt+0x1cc0>
   12444:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12448:	cmp	r1, #2
   1244c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12450:	movwne	r1, #1
   12454:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12458:	orr	r1, r1, r2
   1245c:	tst	r1, #1
   12460:	beq	1246c <__assert_fail@plt+0x1620>
   12464:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12468:	b	124a8 <__assert_fail@plt+0x165c>
   1246c:	cmp	r8, r4
   12470:	movcc	r1, #39	; 0x27
   12474:	strbcc	r1, [r7, r8]
   12478:	add	r1, r8, #1
   1247c:	cmp	r1, r4
   12480:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12484:	movcc	r2, #36	; 0x24
   12488:	strbcc	r2, [r7, r1]
   1248c:	add	r1, r8, #2
   12490:	cmp	r1, r4
   12494:	movcc	r2, #39	; 0x27
   12498:	strbcc	r2, [r7, r1]
   1249c:	add	r8, r8, #3
   124a0:	mov	r1, #1
   124a4:	str	r1, [fp, #-56]	; 0xffffffc8
   124a8:	cmp	r8, r4
   124ac:	movcc	r1, #92	; 0x5c
   124b0:	strbcc	r1, [r7, r8]
   124b4:	add	r8, r8, #1
   124b8:	cmp	r8, r4
   124bc:	strbcc	r0, [r7, r8]
   124c0:	and	r5, r5, r9
   124c4:	add	r8, r8, #1
   124c8:	add	r6, r6, #1
   124cc:	cmn	lr, #1
   124d0:	bne	11eac <__assert_fail@plt+0x1060>
   124d4:	b	11eb8 <__assert_fail@plt+0x106c>
   124d8:	mov	r9, #0
   124dc:	ldr	r0, [sp, #36]	; 0x24
   124e0:	cmp	r0, #0
   124e4:	mov	sl, #0
   124e8:	mov	r5, #0
   124ec:	beq	123fc <__assert_fail@plt+0x15b0>
   124f0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   124f4:	b	124c8 <__assert_fail@plt+0x167c>
   124f8:	mov	r9, #1
   124fc:	b	12180 <__assert_fail@plt+0x1334>
   12500:	mov	r0, #0
   12504:	str	r0, [fp, #-36]	; 0xffffffdc
   12508:	str	r0, [fp, #-40]	; 0xffffffd8
   1250c:	cmn	lr, #1
   12510:	bne	12524 <__assert_fail@plt+0x16d8>
   12514:	mov	r0, ip
   12518:	bl	10d8c <strlen@plt>
   1251c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12520:	mov	lr, r0
   12524:	add	r0, ip, r6
   12528:	str	r0, [sp, #20]
   1252c:	mov	r9, #1
   12530:	mov	r7, #0
   12534:	sub	r4, fp, #40	; 0x28
   12538:	str	lr, [sp, #28]
   1253c:	str	r7, [sp, #44]	; 0x2c
   12540:	add	r7, r7, r6
   12544:	add	r1, ip, r7
   12548:	sub	r2, lr, r7
   1254c:	sub	r0, fp, #44	; 0x2c
   12550:	mov	r3, r4
   12554:	bl	1455c <__assert_fail@plt+0x3710>
   12558:	cmp	r0, #0
   1255c:	beq	12a1c <__assert_fail@plt+0x1bd0>
   12560:	cmn	r0, #1
   12564:	beq	129dc <__assert_fail@plt+0x1b90>
   12568:	cmn	r0, #2
   1256c:	ldr	lr, [sp, #28]
   12570:	beq	129e4 <__assert_fail@plt+0x1b98>
   12574:	cmp	r0, #2
   12578:	mov	r1, #0
   1257c:	movwcc	r1, #1
   12580:	ldr	r2, [sp, #60]	; 0x3c
   12584:	eor	r2, r2, #1
   12588:	orrs	r1, r2, r1
   1258c:	ldr	r4, [sp, #24]
   12590:	bne	12650 <__assert_fail@plt+0x1804>
   12594:	ldr	r1, [sp, #44]	; 0x2c
   12598:	ldr	r2, [sp, #20]
   1259c:	add	r1, r2, r1
   125a0:	mov	r2, #1
   125a4:	ldrb	r3, [r1, r2]
   125a8:	sub	r3, r3, #91	; 0x5b
   125ac:	cmp	r3, #33	; 0x21
   125b0:	bhi	12644 <__assert_fail@plt+0x17f8>
   125b4:	add	r7, pc, #0
   125b8:	ldr	pc, [r7, r3, lsl #2]
   125bc:	andeq	r2, r1, r4, lsl #22
   125c0:	andeq	r2, r1, r4, lsl #22
   125c4:	andeq	r2, r1, r4, asr #12
   125c8:	andeq	r2, r1, r4, lsl #22
   125cc:	andeq	r2, r1, r4, asr #12
   125d0:	andeq	r2, r1, r4, lsl #22
   125d4:	andeq	r2, r1, r4, asr #12
   125d8:	andeq	r2, r1, r4, asr #12
   125dc:	andeq	r2, r1, r4, asr #12
   125e0:	andeq	r2, r1, r4, asr #12
   125e4:	andeq	r2, r1, r4, asr #12
   125e8:	andeq	r2, r1, r4, asr #12
   125ec:	andeq	r2, r1, r4, asr #12
   125f0:	andeq	r2, r1, r4, asr #12
   125f4:	andeq	r2, r1, r4, asr #12
   125f8:	andeq	r2, r1, r4, asr #12
   125fc:	andeq	r2, r1, r4, asr #12
   12600:	andeq	r2, r1, r4, asr #12
   12604:	andeq	r2, r1, r4, asr #12
   12608:	andeq	r2, r1, r4, asr #12
   1260c:	andeq	r2, r1, r4, asr #12
   12610:	andeq	r2, r1, r4, asr #12
   12614:	andeq	r2, r1, r4, asr #12
   12618:	andeq	r2, r1, r4, asr #12
   1261c:	andeq	r2, r1, r4, asr #12
   12620:	andeq	r2, r1, r4, asr #12
   12624:	andeq	r2, r1, r4, asr #12
   12628:	andeq	r2, r1, r4, asr #12
   1262c:	andeq	r2, r1, r4, asr #12
   12630:	andeq	r2, r1, r4, asr #12
   12634:	andeq	r2, r1, r4, asr #12
   12638:	andeq	r2, r1, r4, asr #12
   1263c:	andeq	r2, r1, r4, asr #12
   12640:	andeq	r2, r1, r4, lsl #22
   12644:	add	r2, r2, #1
   12648:	cmp	r2, r0
   1264c:	bcc	125a4 <__assert_fail@plt+0x1758>
   12650:	ldr	r7, [sp, #44]	; 0x2c
   12654:	add	r7, r0, r7
   12658:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1265c:	bl	10cd8 <iswprint@plt>
   12660:	cmp	r0, #0
   12664:	movwne	r0, #1
   12668:	and	r9, r9, r0
   1266c:	sub	r4, fp, #40	; 0x28
   12670:	mov	r0, r4
   12674:	bl	10c9c <mbsinit@plt>
   12678:	ldr	lr, [sp, #28]
   1267c:	cmp	r0, #0
   12680:	ldr	ip, [fp, #-84]	; 0xffffffac
   12684:	beq	1253c <__assert_fail@plt+0x16f0>
   12688:	b	12a24 <__assert_fail@plt+0x1bd8>
   1268c:	ldr	r0, [sp, #32]
   12690:	cmp	r0, #0
   12694:	beq	1272c <__assert_fail@plt+0x18e0>
   12698:	add	r0, r6, #2
   1269c:	cmp	r0, lr
   126a0:	bcs	1272c <__assert_fail@plt+0x18e0>
   126a4:	add	r1, ip, r6
   126a8:	ldrb	r1, [r1, #1]
   126ac:	cmp	r1, #63	; 0x3f
   126b0:	bne	1272c <__assert_fail@plt+0x18e0>
   126b4:	ldrb	r9, [ip, r0]
   126b8:	sub	r2, r9, #33	; 0x21
   126bc:	cmp	r2, #29
   126c0:	bhi	1272c <__assert_fail@plt+0x18e0>
   126c4:	mov	r3, #1
   126c8:	movw	r1, #20929	; 0x51c1
   126cc:	movt	r1, #14336	; 0x3800
   126d0:	tst	r1, r3, lsl r2
   126d4:	beq	1272c <__assert_fail@plt+0x18e0>
   126d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126dc:	tst	r1, #1
   126e0:	bne	12b0c <__assert_fail@plt+0x1cc0>
   126e4:	cmp	r8, r4
   126e8:	movcc	r1, #63	; 0x3f
   126ec:	strbcc	r1, [r7, r8]
   126f0:	add	r2, r8, #1
   126f4:	cmp	r2, r4
   126f8:	movcc	r1, #34	; 0x22
   126fc:	strbcc	r1, [r7, r2]
   12700:	add	r2, r8, #2
   12704:	cmp	r2, r4
   12708:	movcc	r1, #34	; 0x22
   1270c:	strbcc	r1, [r7, r2]
   12710:	add	r2, r8, #3
   12714:	cmp	r2, r4
   12718:	movcc	r1, #63	; 0x3f
   1271c:	strbcc	r1, [r7, r2]
   12720:	add	r8, r8, #4
   12724:	mov	r6, r0
   12728:	mov	r5, r9
   1272c:	mov	r9, #0
   12730:	b	12180 <__assert_fail@plt+0x1334>
   12734:	add	r1, r2, r6
   12738:	str	r1, [sp, #44]	; 0x2c
   1273c:	add	r1, r6, #1
   12740:	mov	r3, #0
   12744:	ldr	lr, [sp, #28]
   12748:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1274c:	tst	r0, #1
   12750:	bne	12844 <__assert_fail@plt+0x19f8>
   12754:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12758:	tst	r2, #1
   1275c:	bne	12b0c <__assert_fail@plt+0x1cc0>
   12760:	cmp	r6, #2
   12764:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12768:	movwne	r3, #1
   1276c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12770:	orr	r3, r3, r2
   12774:	tst	r3, #1
   12778:	bne	127b4 <__assert_fail@plt+0x1968>
   1277c:	cmp	r8, r4
   12780:	movcc	r2, #39	; 0x27
   12784:	strbcc	r2, [r7, r8]
   12788:	add	r3, r8, #1
   1278c:	cmp	r3, r4
   12790:	movcc	r2, #36	; 0x24
   12794:	strbcc	r2, [r7, r3]
   12798:	add	r3, r8, #2
   1279c:	cmp	r3, r4
   127a0:	movcc	r2, #39	; 0x27
   127a4:	strbcc	r2, [r7, r3]
   127a8:	add	r8, r8, #3
   127ac:	mov	r2, #1
   127b0:	str	r2, [fp, #-56]	; 0xffffffc8
   127b4:	cmp	r8, r4
   127b8:	movcc	r2, #92	; 0x5c
   127bc:	strbcc	r2, [r7, r8]
   127c0:	add	r3, r8, #1
   127c4:	cmp	r3, r4
   127c8:	bcs	127e8 <__assert_fail@plt+0x199c>
   127cc:	and	r7, r5, #192	; 0xc0
   127d0:	mov	r2, #48	; 0x30
   127d4:	orr	r7, r2, r7, lsr #6
   127d8:	ldr	r6, [sp, #80]	; 0x50
   127dc:	strb	r7, [r6, r3]
   127e0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   127e4:	ldr	r7, [sp, #80]	; 0x50
   127e8:	add	r3, r8, #2
   127ec:	cmp	r3, r4
   127f0:	bcs	12810 <__assert_fail@plt+0x19c4>
   127f4:	lsr	r7, r5, #3
   127f8:	mov	r2, #6
   127fc:	bfi	r7, r2, #3, #29
   12800:	ldr	r6, [sp, #80]	; 0x50
   12804:	strb	r7, [r6, r3]
   12808:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1280c:	ldr	r7, [sp, #80]	; 0x50
   12810:	mov	r2, #6
   12814:	bfi	r5, r2, #3, #29
   12818:	add	r8, r8, #3
   1281c:	mov	r3, #1
   12820:	b	12868 <__assert_fail@plt+0x1a1c>
   12824:	ldr	r7, [sp, #80]	; 0x50
   12828:	cmp	r8, r4
   1282c:	strbcc	r5, [r7, r8]
   12830:	ldrb	r5, [ip, r1]
   12834:	add	r1, r1, #1
   12838:	add	r8, r8, #1
   1283c:	tst	r0, #1
   12840:	beq	12754 <__assert_fail@plt+0x1908>
   12844:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12848:	tst	r2, #1
   1284c:	beq	12860 <__assert_fail@plt+0x1a14>
   12850:	cmp	r8, r4
   12854:	movcc	r2, #92	; 0x5c
   12858:	strbcc	r2, [r7, r8]
   1285c:	add	r8, r8, #1
   12860:	mov	r2, #0
   12864:	str	r2, [fp, #-52]	; 0xffffffcc
   12868:	and	sl, r3, #1
   1286c:	ldr	r2, [sp, #44]	; 0x2c
   12870:	cmp	r2, r1
   12874:	bls	12980 <__assert_fail@plt+0x1b34>
   12878:	cmp	sl, #0
   1287c:	movwne	sl, #1
   12880:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12884:	mvn	r7, r2
   12888:	orr	r7, r7, sl
   1288c:	tst	r7, #1
   12890:	bne	12824 <__assert_fail@plt+0x19d8>
   12894:	cmp	r8, r4
   12898:	ldrcc	r7, [sp, #80]	; 0x50
   1289c:	movcc	r2, #39	; 0x27
   128a0:	strbcc	r2, [r7, r8]
   128a4:	add	r7, r8, #1
   128a8:	cmp	r7, r4
   128ac:	ldrcc	r6, [sp, #80]	; 0x50
   128b0:	movcc	r2, #39	; 0x27
   128b4:	strbcc	r2, [r6, r7]
   128b8:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   128bc:	add	r8, r8, #2
   128c0:	mov	r2, #0
   128c4:	str	r2, [fp, #-56]	; 0xffffffc8
   128c8:	b	12824 <__assert_fail@plt+0x19d8>
   128cc:	cmp	r8, r4
   128d0:	movcc	r0, #39	; 0x27
   128d4:	strbcc	r0, [r7, r8]
   128d8:	add	r0, r8, #1
   128dc:	cmp	r0, r4
   128e0:	movcc	r1, #36	; 0x24
   128e4:	strbcc	r1, [r7, r0]
   128e8:	add	r0, r8, #2
   128ec:	cmp	r0, r4
   128f0:	movcc	r1, #39	; 0x27
   128f4:	strbcc	r1, [r7, r0]
   128f8:	add	r0, r8, #3
   128fc:	mov	r2, #1
   12900:	cmp	r0, r4
   12904:	movcc	r1, #92	; 0x5c
   12908:	strbcc	r1, [r7, r0]
   1290c:	str	r2, [fp, #-56]	; 0xffffffc8
   12910:	add	r8, r0, #1
   12914:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12918:	cmp	r1, #2
   1291c:	beq	12970 <__assert_fail@plt+0x1b24>
   12920:	add	r1, r6, #1
   12924:	mov	r9, #0
   12928:	mov	sl, #1
   1292c:	mov	r5, #48	; 0x30
   12930:	cmp	r1, lr
   12934:	bcs	12180 <__assert_fail@plt+0x1334>
   12938:	ldrb	r1, [ip, r1]
   1293c:	sub	r1, r1, #48	; 0x30
   12940:	uxtb	r1, r1
   12944:	cmp	r1, #9
   12948:	bhi	12180 <__assert_fail@plt+0x1334>
   1294c:	cmp	r8, r4
   12950:	movcc	r1, #48	; 0x30
   12954:	strbcc	r1, [r7, r8]
   12958:	add	r1, r0, #2
   1295c:	cmp	r1, r4
   12960:	movcc	r2, #48	; 0x30
   12964:	strbcc	r2, [r7, r1]
   12968:	add	r8, r0, #3
   1296c:	b	12180 <__assert_fail@plt+0x1334>
   12970:	mov	r0, #48	; 0x30
   12974:	mov	sl, #1
   12978:	mov	r9, #0
   1297c:	b	1242c <__assert_fail@plt+0x15e0>
   12980:	sub	r6, r1, #1
   12984:	cmp	sl, #0
   12988:	movwne	sl, #1
   1298c:	mov	r0, r5
   12990:	cmp	sl, #0
   12994:	bne	129d4 <__assert_fail@plt+0x1b88>
   12998:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1299c:	tst	r1, #1
   129a0:	beq	129d4 <__assert_fail@plt+0x1b88>
   129a4:	cmp	r8, r4
   129a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   129ac:	movcc	r1, #39	; 0x27
   129b0:	strbcc	r1, [r7, r8]
   129b4:	add	r1, r8, #1
   129b8:	cmp	r1, r4
   129bc:	movcc	r2, #39	; 0x27
   129c0:	strbcc	r2, [r7, r1]
   129c4:	add	r8, r8, #2
   129c8:	mov	r1, #0
   129cc:	str	r1, [fp, #-56]	; 0xffffffc8
   129d0:	b	124b8 <__assert_fail@plt+0x166c>
   129d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   129d8:	b	124b8 <__assert_fail@plt+0x166c>
   129dc:	mov	r9, #0
   129e0:	b	12a1c <__assert_fail@plt+0x1bd0>
   129e4:	mov	r9, #0
   129e8:	cmp	r7, lr
   129ec:	bcs	12a1c <__assert_fail@plt+0x1bd0>
   129f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   129f4:	ldr	r7, [sp, #44]	; 0x2c
   129f8:	ldr	r0, [sp, #20]
   129fc:	ldrb	r0, [r0, r7]
   12a00:	cmp	r0, #0
   12a04:	beq	12a24 <__assert_fail@plt+0x1bd8>
   12a08:	add	r7, r7, #1
   12a0c:	add	r0, r6, r7
   12a10:	cmp	r0, lr
   12a14:	bcc	129f8 <__assert_fail@plt+0x1bac>
   12a18:	b	12a24 <__assert_fail@plt+0x1bd8>
   12a1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a20:	ldr	r7, [sp, #44]	; 0x2c
   12a24:	mov	r1, r7
   12a28:	ldr	r7, [sp, #80]	; 0x50
   12a2c:	b	12354 <__assert_fail@plt+0x1508>
   12a30:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12a34:	eor	r0, r1, #2
   12a38:	orr	r0, r0, r8
   12a3c:	clz	r0, r0
   12a40:	lsr	r0, r0, #5
   12a44:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12a48:	tst	r2, r0
   12a4c:	bne	12b0c <__assert_fail@plt+0x1cc0>
   12a50:	cmp	r1, #2
   12a54:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12a58:	movwne	r0, #1
   12a5c:	orr	r0, r2, r0
   12a60:	tst	r0, #1
   12a64:	ldreq	r0, [sp, #56]	; 0x38
   12a68:	eoreq	r0, r0, #1
   12a6c:	tsteq	r0, #1
   12a70:	bne	12aa4 <__assert_fail@plt+0x1c58>
   12a74:	mov	r9, lr
   12a78:	tst	r5, #1
   12a7c:	bne	12b74 <__assert_fail@plt+0x1d28>
   12a80:	ldr	r0, [sp, #72]	; 0x48
   12a84:	cmp	r0, #0
   12a88:	beq	12aa4 <__assert_fail@plt+0x1c58>
   12a8c:	mov	r5, #0
   12a90:	cmp	r4, #0
   12a94:	ldr	r0, [sp, #84]	; 0x54
   12a98:	mov	sl, r2
   12a9c:	ldr	r6, [sp, #72]	; 0x48
   12aa0:	beq	11c3c <__assert_fail@plt+0xdf0>
   12aa4:	ldr	r1, [sp, #92]	; 0x5c
   12aa8:	clz	r0, r1
   12aac:	lsr	r0, r0, #5
   12ab0:	orr	r0, r0, r2
   12ab4:	tst	r0, #1
   12ab8:	bne	12ae4 <__assert_fail@plt+0x1c98>
   12abc:	ldrb	r0, [r1]
   12ac0:	cmp	r0, #0
   12ac4:	beq	12ae4 <__assert_fail@plt+0x1c98>
   12ac8:	add	r1, r1, #1
   12acc:	cmp	r8, r4
   12ad0:	strbcc	r0, [r7, r8]
   12ad4:	add	r8, r8, #1
   12ad8:	ldrb	r0, [r1], #1
   12adc:	cmp	r0, #0
   12ae0:	bne	12acc <__assert_fail@plt+0x1c80>
   12ae4:	cmp	r8, r4
   12ae8:	movcc	r0, #0
   12aec:	strbcc	r0, [r7, r8]
   12af0:	b	12b68 <__assert_fail@plt+0x1d1c>
   12af4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12af8:	mov	lr, r4
   12afc:	mov	r4, r5
   12b00:	b	12b0c <__assert_fail@plt+0x1cc0>
   12b04:	ldr	r7, [sp, #80]	; 0x50
   12b08:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b0c:	mov	r0, #0
   12b10:	ldr	r1, [fp, #12]
   12b14:	bic	r1, r1, #2
   12b18:	ldr	r2, [sp, #84]	; 0x54
   12b1c:	tst	r2, #1
   12b20:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12b24:	mov	r2, r3
   12b28:	movwne	r2, #4
   12b2c:	cmp	r3, #2
   12b30:	movne	r2, r3
   12b34:	str	r2, [sp]
   12b38:	str	r1, [sp, #4]
   12b3c:	str	r0, [sp, #8]
   12b40:	ldr	r0, [sp, #68]	; 0x44
   12b44:	str	r0, [sp, #12]
   12b48:	ldr	r0, [sp, #76]	; 0x4c
   12b4c:	str	r0, [sp, #16]
   12b50:	mov	r0, r7
   12b54:	mov	r1, r4
   12b58:	mov	r2, ip
   12b5c:	mov	r3, lr
   12b60:	bl	11bb4 <__assert_fail@plt+0xd68>
   12b64:	mov	r8, r0
   12b68:	mov	r0, r8
   12b6c:	sub	sp, fp, #28
   12b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b74:	mov	r0, #5
   12b78:	str	r0, [sp]
   12b7c:	ldr	r0, [fp, #12]
   12b80:	str	r0, [sp, #4]
   12b84:	ldr	r0, [fp, #16]
   12b88:	str	r0, [sp, #8]
   12b8c:	ldr	r0, [sp, #68]	; 0x44
   12b90:	str	r0, [sp, #12]
   12b94:	ldr	r0, [sp, #76]	; 0x4c
   12b98:	str	r0, [sp, #16]
   12b9c:	mov	r0, r7
   12ba0:	ldr	r1, [sp, #72]	; 0x48
   12ba4:	ldr	r2, [fp, #-84]	; 0xffffffac
   12ba8:	mov	r3, r9
   12bac:	b	12b60 <__assert_fail@plt+0x1d14>
   12bb0:	bl	10e34 <abort@plt>
   12bb4:	mov	r3, r2
   12bb8:	mov	r2, #0
   12bbc:	b	12bc0 <__assert_fail@plt+0x1d74>
   12bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc4:	add	fp, sp, #28
   12bc8:	sub	sp, sp, #36	; 0x24
   12bcc:	mov	r4, r2
   12bd0:	str	r2, [sp, #24]
   12bd4:	mov	r5, r1
   12bd8:	mov	r6, r0
   12bdc:	str	r0, [sp, #20]
   12be0:	movw	r8, #24880	; 0x6130
   12be4:	movt	r8, #2
   12be8:	cmp	r3, #0
   12bec:	movne	r8, r3
   12bf0:	bl	10d98 <__errno_location@plt>
   12bf4:	str	r0, [sp, #28]
   12bf8:	ldm	r8, {r3, r9}
   12bfc:	ldr	r1, [r8, #40]	; 0x28
   12c00:	ldr	r2, [r8, #44]	; 0x2c
   12c04:	ldr	r7, [r0]
   12c08:	str	r7, [sp, #32]
   12c0c:	add	sl, r8, #8
   12c10:	cmp	r4, #0
   12c14:	orreq	r9, r9, #1
   12c18:	stm	sp, {r3, r9, sl}
   12c1c:	str	r1, [sp, #12]
   12c20:	str	r2, [sp, #16]
   12c24:	mov	r0, #0
   12c28:	mov	r1, #0
   12c2c:	mov	r2, r6
   12c30:	mov	r3, r5
   12c34:	mov	r7, r5
   12c38:	bl	11bb4 <__assert_fail@plt+0xd68>
   12c3c:	mov	r5, r0
   12c40:	add	r4, r0, #1
   12c44:	mov	r0, r4
   12c48:	bl	13ac4 <__assert_fail@plt+0x2c78>
   12c4c:	mov	r6, r0
   12c50:	ldr	r0, [r8]
   12c54:	ldr	r1, [r8, #40]	; 0x28
   12c58:	ldr	r2, [r8, #44]	; 0x2c
   12c5c:	stm	sp, {r0, r9, sl}
   12c60:	str	r1, [sp, #12]
   12c64:	str	r2, [sp, #16]
   12c68:	mov	r0, r6
   12c6c:	mov	r1, r4
   12c70:	ldr	r2, [sp, #20]
   12c74:	mov	r3, r7
   12c78:	bl	11bb4 <__assert_fail@plt+0xd68>
   12c7c:	ldr	r0, [sp, #24]
   12c80:	ldr	r1, [sp, #32]
   12c84:	ldr	r2, [sp, #28]
   12c88:	str	r1, [r2]
   12c8c:	cmp	r0, #0
   12c90:	strne	r5, [r0]
   12c94:	mov	r0, r6
   12c98:	sub	sp, fp, #28
   12c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ca0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ca4:	add	fp, sp, #24
   12ca8:	movw	r8, #24784	; 0x60d0
   12cac:	movt	r8, #2
   12cb0:	ldr	r4, [r8]
   12cb4:	movw	r5, #24788	; 0x60d4
   12cb8:	movt	r5, #2
   12cbc:	ldr	r0, [r5]
   12cc0:	cmp	r0, #2
   12cc4:	blt	12cf0 <__assert_fail@plt+0x1ea4>
   12cc8:	add	r7, r4, #12
   12ccc:	mov	r6, #0
   12cd0:	ldr	r0, [r7, r6, lsl #3]
   12cd4:	bl	14408 <__assert_fail@plt+0x35bc>
   12cd8:	add	r0, r6, #1
   12cdc:	ldr	r1, [r5]
   12ce0:	add	r2, r6, #2
   12ce4:	cmp	r2, r1
   12ce8:	mov	r6, r0
   12cec:	blt	12cd0 <__assert_fail@plt+0x1e84>
   12cf0:	ldr	r0, [r4, #4]
   12cf4:	movw	r7, #24928	; 0x6160
   12cf8:	movt	r7, #2
   12cfc:	cmp	r0, r7
   12d00:	beq	12d18 <__assert_fail@plt+0x1ecc>
   12d04:	bl	14408 <__assert_fail@plt+0x35bc>
   12d08:	movw	r0, #24792	; 0x60d8
   12d0c:	movt	r0, #2
   12d10:	mov	r6, #256	; 0x100
   12d14:	strd	r6, [r0]
   12d18:	movw	r6, #24792	; 0x60d8
   12d1c:	movt	r6, #2
   12d20:	cmp	r4, r6
   12d24:	beq	12d34 <__assert_fail@plt+0x1ee8>
   12d28:	mov	r0, r4
   12d2c:	bl	14408 <__assert_fail@plt+0x35bc>
   12d30:	str	r6, [r8]
   12d34:	mov	r0, #1
   12d38:	str	r0, [r5]
   12d3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d40:	movw	r3, #24880	; 0x6130
   12d44:	movt	r3, #2
   12d48:	mvn	r2, #0
   12d4c:	b	12d50 <__assert_fail@plt+0x1f04>
   12d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d54:	add	fp, sp, #28
   12d58:	sub	sp, sp, #44	; 0x2c
   12d5c:	mov	r7, r3
   12d60:	str	r2, [sp, #36]	; 0x24
   12d64:	str	r1, [sp, #32]
   12d68:	mov	r5, r0
   12d6c:	bl	10d98 <__errno_location@plt>
   12d70:	cmp	r5, #0
   12d74:	blt	12ee0 <__assert_fail@plt+0x2094>
   12d78:	cmn	r5, #-2147483647	; 0x80000001
   12d7c:	beq	12ee0 <__assert_fail@plt+0x2094>
   12d80:	movw	r4, #24784	; 0x60d0
   12d84:	movt	r4, #2
   12d88:	ldr	r6, [r4]
   12d8c:	str	r0, [sp, #28]
   12d90:	ldr	r0, [r0]
   12d94:	str	r0, [sp, #24]
   12d98:	movw	r8, #24788	; 0x60d4
   12d9c:	movt	r8, #2
   12da0:	ldr	r1, [r8]
   12da4:	cmp	r1, r5
   12da8:	ble	12db4 <__assert_fail@plt+0x1f68>
   12dac:	mov	sl, r6
   12db0:	b	12e1c <__assert_fail@plt+0x1fd0>
   12db4:	str	r1, [fp, #-32]	; 0xffffffe0
   12db8:	mov	r0, #8
   12dbc:	str	r0, [sp]
   12dc0:	movw	r9, #24792	; 0x60d8
   12dc4:	movt	r9, #2
   12dc8:	subs	r0, r6, r9
   12dcc:	movne	r0, r6
   12dd0:	add	r2, r5, #1
   12dd4:	sub	r2, r2, r1
   12dd8:	sub	r1, fp, #32
   12ddc:	mvn	r3, #-2147483648	; 0x80000000
   12de0:	bl	13bac <__assert_fail@plt+0x2d60>
   12de4:	mov	sl, r0
   12de8:	str	r0, [r4]
   12dec:	cmp	r6, r9
   12df0:	ldrdeq	r0, [r9]
   12df4:	stmeq	sl, {r0, r1}
   12df8:	ldr	r1, [r8]
   12dfc:	add	r0, sl, r1, lsl #3
   12e00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12e04:	sub	r1, r2, r1
   12e08:	lsl	r2, r1, #3
   12e0c:	mov	r1, #0
   12e10:	bl	10db0 <memset@plt>
   12e14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12e18:	str	r0, [r8]
   12e1c:	mov	r9, sl
   12e20:	ldr	r6, [r9, r5, lsl #3]!
   12e24:	ldr	r4, [r9, #4]!
   12e28:	ldm	r7, {r0, r1}
   12e2c:	ldr	r2, [r7, #40]	; 0x28
   12e30:	ldr	r3, [r7, #44]	; 0x2c
   12e34:	orr	r8, r1, #1
   12e38:	add	r1, r7, #8
   12e3c:	stm	sp, {r0, r8}
   12e40:	str	r1, [sp, #20]
   12e44:	add	r0, sp, #8
   12e48:	stm	r0, {r1, r2, r3}
   12e4c:	mov	r0, r4
   12e50:	mov	r1, r6
   12e54:	ldr	r2, [sp, #32]
   12e58:	ldr	r3, [sp, #36]	; 0x24
   12e5c:	bl	11bb4 <__assert_fail@plt+0xd68>
   12e60:	cmp	r6, r0
   12e64:	bhi	12ec8 <__assert_fail@plt+0x207c>
   12e68:	add	r6, r0, #1
   12e6c:	str	r6, [sl, r5, lsl #3]
   12e70:	movw	r0, #24928	; 0x6160
   12e74:	movt	r0, #2
   12e78:	cmp	r4, r0
   12e7c:	beq	12e88 <__assert_fail@plt+0x203c>
   12e80:	mov	r0, r4
   12e84:	bl	14408 <__assert_fail@plt+0x35bc>
   12e88:	mov	r0, r6
   12e8c:	bl	13ac4 <__assert_fail@plt+0x2c78>
   12e90:	mov	r4, r0
   12e94:	str	r0, [r9]
   12e98:	ldr	r0, [r7]
   12e9c:	ldr	r1, [r7, #40]	; 0x28
   12ea0:	ldr	r2, [r7, #44]	; 0x2c
   12ea4:	stm	sp, {r0, r8}
   12ea8:	ldr	r0, [sp, #20]
   12eac:	add	r3, sp, #8
   12eb0:	stm	r3, {r0, r1, r2}
   12eb4:	mov	r0, r4
   12eb8:	mov	r1, r6
   12ebc:	ldr	r2, [sp, #32]
   12ec0:	ldr	r3, [sp, #36]	; 0x24
   12ec4:	bl	11bb4 <__assert_fail@plt+0xd68>
   12ec8:	ldr	r0, [sp, #28]
   12ecc:	ldr	r1, [sp, #24]
   12ed0:	str	r1, [r0]
   12ed4:	mov	r0, r4
   12ed8:	sub	sp, fp, #28
   12edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee0:	bl	10e34 <abort@plt>
   12ee4:	movw	r3, #24880	; 0x6130
   12ee8:	movt	r3, #2
   12eec:	b	12d50 <__assert_fail@plt+0x1f04>
   12ef0:	mov	r1, r0
   12ef4:	mov	r0, #0
   12ef8:	b	12d40 <__assert_fail@plt+0x1ef4>
   12efc:	mov	r2, r1
   12f00:	mov	r1, r0
   12f04:	mov	r0, #0
   12f08:	b	12ee4 <__assert_fail@plt+0x2098>
   12f0c:	push	{r4, r5, r6, sl, fp, lr}
   12f10:	add	fp, sp, #16
   12f14:	sub	sp, sp, #48	; 0x30
   12f18:	mov	r4, r2
   12f1c:	mov	r5, r0
   12f20:	mov	r6, sp
   12f24:	mov	r0, r6
   12f28:	bl	12f48 <__assert_fail@plt+0x20fc>
   12f2c:	mov	r0, r5
   12f30:	mov	r1, r4
   12f34:	mvn	r2, #0
   12f38:	mov	r3, r6
   12f3c:	bl	12d50 <__assert_fail@plt+0x1f04>
   12f40:	sub	sp, fp, #16
   12f44:	pop	{r4, r5, r6, sl, fp, pc}
   12f48:	vmov.i32	q8, #0	; 0x00000000
   12f4c:	mov	r2, #32
   12f50:	mov	r3, r0
   12f54:	vst1.32	{d16-d17}, [r3], r2
   12f58:	vst1.32	{d16-d17}, [r3]
   12f5c:	add	r2, r0, #16
   12f60:	vst1.32	{d16-d17}, [r2]
   12f64:	cmp	r1, #10
   12f68:	strne	r1, [r0]
   12f6c:	bxne	lr
   12f70:	push	{fp, lr}
   12f74:	mov	fp, sp
   12f78:	bl	10e34 <abort@plt>
   12f7c:	push	{r4, r5, r6, r7, fp, lr}
   12f80:	add	fp, sp, #16
   12f84:	sub	sp, sp, #48	; 0x30
   12f88:	mov	r4, r3
   12f8c:	mov	r5, r2
   12f90:	mov	r6, r0
   12f94:	mov	r7, sp
   12f98:	mov	r0, r7
   12f9c:	bl	12f48 <__assert_fail@plt+0x20fc>
   12fa0:	mov	r0, r6
   12fa4:	mov	r1, r5
   12fa8:	mov	r2, r4
   12fac:	mov	r3, r7
   12fb0:	bl	12d50 <__assert_fail@plt+0x1f04>
   12fb4:	sub	sp, fp, #16
   12fb8:	pop	{r4, r5, r6, r7, fp, pc}
   12fbc:	mov	r2, r1
   12fc0:	mov	r1, r0
   12fc4:	mov	r0, #0
   12fc8:	b	12f0c <__assert_fail@plt+0x20c0>
   12fcc:	mov	r3, r2
   12fd0:	mov	r2, r1
   12fd4:	mov	r1, r0
   12fd8:	mov	r0, #0
   12fdc:	b	12f7c <__assert_fail@plt+0x2130>
   12fe0:	push	{r4, r5, r6, sl, fp, lr}
   12fe4:	add	fp, sp, #16
   12fe8:	sub	sp, sp, #48	; 0x30
   12fec:	mov	r4, r1
   12ff0:	mov	r5, r0
   12ff4:	mov	r0, #32
   12ff8:	movw	r1, #24880	; 0x6130
   12ffc:	movt	r1, #2
   13000:	add	r3, r1, #16
   13004:	vld1.64	{d16-d17}, [r1], r0
   13008:	mov	r6, sp
   1300c:	vld1.64	{d18-d19}, [r3]
   13010:	add	r3, r6, #16
   13014:	vld1.64	{d20-d21}, [r1]
   13018:	vst1.64	{d18-d19}, [r3]
   1301c:	mov	r1, r6
   13020:	vst1.64	{d16-d17}, [r1], r0
   13024:	vst1.64	{d20-d21}, [r1]
   13028:	mov	r0, r6
   1302c:	mov	r1, r2
   13030:	mov	r2, #1
   13034:	bl	11aa8 <__assert_fail@plt+0xc5c>
   13038:	mov	r0, #0
   1303c:	mov	r1, r5
   13040:	mov	r2, r4
   13044:	mov	r3, r6
   13048:	bl	12d50 <__assert_fail@plt+0x1f04>
   1304c:	sub	sp, fp, #16
   13050:	pop	{r4, r5, r6, sl, fp, pc}
   13054:	mov	r2, r1
   13058:	mvn	r1, #0
   1305c:	b	12fe0 <__assert_fail@plt+0x2194>
   13060:	mov	r1, #58	; 0x3a
   13064:	b	13054 <__assert_fail@plt+0x2208>
   13068:	mov	r2, #58	; 0x3a
   1306c:	b	12fe0 <__assert_fail@plt+0x2194>
   13070:	push	{r4, r5, r6, sl, fp, lr}
   13074:	add	fp, sp, #16
   13078:	sub	sp, sp, #48	; 0x30
   1307c:	mov	r4, r2
   13080:	mov	r5, r0
   13084:	mov	r6, sp
   13088:	mov	r0, r6
   1308c:	bl	12f48 <__assert_fail@plt+0x20fc>
   13090:	mov	r0, r6
   13094:	mov	r1, #58	; 0x3a
   13098:	mov	r2, #1
   1309c:	bl	11aa8 <__assert_fail@plt+0xc5c>
   130a0:	mov	r0, r5
   130a4:	mov	r1, r4
   130a8:	mvn	r2, #0
   130ac:	mov	r3, r6
   130b0:	bl	12d50 <__assert_fail@plt+0x1f04>
   130b4:	sub	sp, fp, #16
   130b8:	pop	{r4, r5, r6, sl, fp, pc}
   130bc:	push	{fp, lr}
   130c0:	mov	fp, sp
   130c4:	sub	sp, sp, #8
   130c8:	mvn	ip, #0
   130cc:	str	ip, [sp]
   130d0:	bl	130dc <__assert_fail@plt+0x2290>
   130d4:	mov	sp, fp
   130d8:	pop	{fp, pc}
   130dc:	push	{r4, r5, r6, r7, fp, lr}
   130e0:	add	fp, sp, #16
   130e4:	sub	sp, sp, #48	; 0x30
   130e8:	mov	r7, r3
   130ec:	mov	r5, r0
   130f0:	mov	r0, #32
   130f4:	movw	r3, #24880	; 0x6130
   130f8:	movt	r3, #2
   130fc:	add	r4, r3, #16
   13100:	vld1.64	{d16-d17}, [r3], r0
   13104:	mov	r6, sp
   13108:	vld1.64	{d18-d19}, [r4]
   1310c:	add	r4, r6, #16
   13110:	vld1.64	{d20-d21}, [r3]
   13114:	vst1.64	{d18-d19}, [r4]
   13118:	mov	r3, r6
   1311c:	vst1.64	{d16-d17}, [r3], r0
   13120:	vst1.64	{d20-d21}, [r3]
   13124:	mov	r0, r6
   13128:	bl	11b00 <__assert_fail@plt+0xcb4>
   1312c:	ldr	r2, [fp, #8]
   13130:	mov	r0, r5
   13134:	mov	r1, r7
   13138:	mov	r3, r6
   1313c:	bl	12d50 <__assert_fail@plt+0x1f04>
   13140:	sub	sp, fp, #16
   13144:	pop	{r4, r5, r6, r7, fp, pc}
   13148:	mov	r3, r2
   1314c:	mov	r2, r1
   13150:	mov	r1, r0
   13154:	mov	r0, #0
   13158:	b	130bc <__assert_fail@plt+0x2270>
   1315c:	push	{fp, lr}
   13160:	mov	fp, sp
   13164:	sub	sp, sp, #8
   13168:	mov	ip, r2
   1316c:	mov	r2, r1
   13170:	mov	r1, r0
   13174:	str	r3, [sp]
   13178:	mov	r0, #0
   1317c:	mov	r3, ip
   13180:	bl	130dc <__assert_fail@plt+0x2290>
   13184:	mov	sp, fp
   13188:	pop	{fp, pc}
   1318c:	movw	r3, #24800	; 0x60e0
   13190:	movt	r3, #2
   13194:	b	12d50 <__assert_fail@plt+0x1f04>
   13198:	mov	r2, r1
   1319c:	mov	r1, r0
   131a0:	mov	r0, #0
   131a4:	b	1318c <__assert_fail@plt+0x2340>
   131a8:	mvn	r2, #0
   131ac:	b	1318c <__assert_fail@plt+0x2340>
   131b0:	mov	r1, r0
   131b4:	mov	r0, #0
   131b8:	b	131a8 <__assert_fail@plt+0x235c>
   131bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131c0:	add	fp, sp, #24
   131c4:	sub	sp, sp, #16
   131c8:	mov	r4, r1
   131cc:	mov	r5, r0
   131d0:	mov	r7, #0
   131d4:	mov	r0, #0
   131d8:	mov	r1, r5
   131dc:	mov	r2, #5
   131e0:	bl	10cb4 <dcgettext@plt>
   131e4:	cmp	r0, r5
   131e8:	beq	131f4 <__assert_fail@plt+0x23a8>
   131ec:	sub	sp, fp, #24
   131f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131f4:	bl	14524 <__assert_fail@plt+0x36d8>
   131f8:	mov	r6, r0
   131fc:	mov	r8, #56	; 0x38
   13200:	mov	r0, #45	; 0x2d
   13204:	stm	sp, {r0, r8}
   13208:	str	r7, [sp, #8]
   1320c:	str	r7, [sp, #12]
   13210:	mov	r0, r6
   13214:	mov	r1, #85	; 0x55
   13218:	mov	r2, #84	; 0x54
   1321c:	mov	r3, #70	; 0x46
   13220:	bl	132b8 <__assert_fail@plt+0x246c>
   13224:	cmp	r0, #0
   13228:	beq	13244 <__assert_fail@plt+0x23f8>
   1322c:	ldrb	r1, [r5]
   13230:	movw	r2, #20104	; 0x4e88
   13234:	movt	r2, #1
   13238:	movw	r0, #20108	; 0x4e8c
   1323c:	movt	r0, #1
   13240:	b	13288 <__assert_fail@plt+0x243c>
   13244:	mov	r0, #48	; 0x30
   13248:	mov	r1, #51	; 0x33
   1324c:	str	r8, [sp]
   13250:	stmib	sp, {r0, r1}
   13254:	str	r0, [sp, #12]
   13258:	mov	r0, r6
   1325c:	mov	r1, #71	; 0x47
   13260:	mov	r2, #66	; 0x42
   13264:	mov	r3, #49	; 0x31
   13268:	bl	132b8 <__assert_fail@plt+0x246c>
   1326c:	cmp	r0, #0
   13270:	beq	13298 <__assert_fail@plt+0x244c>
   13274:	ldrb	r1, [r5]
   13278:	movw	r2, #20112	; 0x4e90
   1327c:	movt	r2, #1
   13280:	movw	r0, #20116	; 0x4e94
   13284:	movt	r0, #1
   13288:	cmp	r1, #96	; 0x60
   1328c:	moveq	r0, r2
   13290:	sub	sp, fp, #24
   13294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13298:	movw	r1, #20098	; 0x4e82
   1329c:	movt	r1, #1
   132a0:	movw	r0, #20102	; 0x4e86
   132a4:	movt	r0, #1
   132a8:	cmp	r4, #9
   132ac:	moveq	r0, r1
   132b0:	sub	sp, fp, #24
   132b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132b8:	push	{r4, r5, r6, r7, fp, lr}
   132bc:	add	fp, sp, #16
   132c0:	sub	sp, sp, #16
   132c4:	mov	r4, r3
   132c8:	mov	r5, r2
   132cc:	mov	r7, r1
   132d0:	mov	r6, r0
   132d4:	mov	r0, r1
   132d8:	bl	14208 <__assert_fail@plt+0x33bc>
   132dc:	ldrb	r1, [r6]
   132e0:	cmp	r0, #0
   132e4:	andne	r1, r1, #223	; 0xdf
   132e8:	mov	r0, #0
   132ec:	cmp	r1, r7
   132f0:	bne	13330 <__assert_fail@plt+0x24e4>
   132f4:	cmp	r7, #0
   132f8:	moveq	r0, #1
   132fc:	subeq	sp, fp, #16
   13300:	popeq	{r4, r5, r6, r7, fp, pc}
   13304:	ldr	r0, [fp, #20]
   13308:	ldr	r1, [fp, #16]
   1330c:	ldr	r2, [fp, #12]
   13310:	ldr	r3, [fp, #8]
   13314:	str	r2, [sp]
   13318:	str	r1, [sp, #4]
   1331c:	str	r0, [sp, #8]
   13320:	mov	r0, r6
   13324:	mov	r1, r5
   13328:	mov	r2, r4
   1332c:	bl	13338 <__assert_fail@plt+0x24ec>
   13330:	sub	sp, fp, #16
   13334:	pop	{r4, r5, r6, r7, fp, pc}
   13338:	push	{r4, r5, r6, r7, fp, lr}
   1333c:	add	fp, sp, #16
   13340:	sub	sp, sp, #8
   13344:	mov	r4, r3
   13348:	mov	r5, r2
   1334c:	mov	r7, r1
   13350:	mov	r6, r0
   13354:	mov	r0, r1
   13358:	bl	14208 <__assert_fail@plt+0x33bc>
   1335c:	ldrb	r1, [r6, #1]
   13360:	cmp	r0, #0
   13364:	andne	r1, r1, #223	; 0xdf
   13368:	mov	r0, #0
   1336c:	cmp	r1, r7
   13370:	bne	133a8 <__assert_fail@plt+0x255c>
   13374:	cmp	r7, #0
   13378:	moveq	r0, #1
   1337c:	subeq	sp, fp, #16
   13380:	popeq	{r4, r5, r6, r7, fp, pc}
   13384:	ldr	r0, [fp, #16]
   13388:	ldr	r1, [fp, #12]
   1338c:	ldr	r3, [fp, #8]
   13390:	str	r1, [sp]
   13394:	str	r0, [sp, #4]
   13398:	mov	r0, r6
   1339c:	mov	r1, r5
   133a0:	mov	r2, r4
   133a4:	bl	133b0 <__assert_fail@plt+0x2564>
   133a8:	sub	sp, fp, #16
   133ac:	pop	{r4, r5, r6, r7, fp, pc}
   133b0:	push	{r4, r5, r6, r7, fp, lr}
   133b4:	add	fp, sp, #16
   133b8:	sub	sp, sp, #8
   133bc:	mov	r4, r3
   133c0:	mov	r5, r2
   133c4:	mov	r7, r1
   133c8:	mov	r6, r0
   133cc:	mov	r0, r1
   133d0:	bl	14208 <__assert_fail@plt+0x33bc>
   133d4:	ldrb	r1, [r6, #2]
   133d8:	cmp	r0, #0
   133dc:	andne	r1, r1, #223	; 0xdf
   133e0:	mov	r0, #0
   133e4:	cmp	r1, r7
   133e8:	bne	13418 <__assert_fail@plt+0x25cc>
   133ec:	cmp	r7, #0
   133f0:	moveq	r0, #1
   133f4:	subeq	sp, fp, #16
   133f8:	popeq	{r4, r5, r6, r7, fp, pc}
   133fc:	ldr	r0, [fp, #12]
   13400:	ldr	r3, [fp, #8]
   13404:	str	r0, [sp]
   13408:	mov	r0, r6
   1340c:	mov	r1, r5
   13410:	mov	r2, r4
   13414:	bl	13420 <__assert_fail@plt+0x25d4>
   13418:	sub	sp, fp, #16
   1341c:	pop	{r4, r5, r6, r7, fp, pc}
   13420:	push	{r4, r5, r6, r7, fp, lr}
   13424:	add	fp, sp, #16
   13428:	mov	r4, r3
   1342c:	mov	r5, r2
   13430:	mov	r7, r1
   13434:	mov	r6, r0
   13438:	mov	r0, r1
   1343c:	bl	14208 <__assert_fail@plt+0x33bc>
   13440:	ldrb	r1, [r6, #3]
   13444:	ldr	r3, [fp, #8]
   13448:	cmp	r0, #0
   1344c:	andne	r1, r1, #223	; 0xdf
   13450:	mov	r0, #0
   13454:	cmp	r1, r7
   13458:	popne	{r4, r5, r6, r7, fp, pc}
   1345c:	cmp	r7, #0
   13460:	beq	13478 <__assert_fail@plt+0x262c>
   13464:	mov	r0, r6
   13468:	mov	r1, r5
   1346c:	mov	r2, r4
   13470:	pop	{r4, r5, r6, r7, fp, lr}
   13474:	b	13480 <__assert_fail@plt+0x2634>
   13478:	mov	r0, #1
   1347c:	pop	{r4, r5, r6, r7, fp, pc}
   13480:	push	{r4, r5, r6, r7, fp, lr}
   13484:	add	fp, sp, #16
   13488:	mov	r4, r3
   1348c:	mov	r5, r2
   13490:	mov	r7, r1
   13494:	mov	r6, r0
   13498:	mov	r0, r1
   1349c:	bl	14208 <__assert_fail@plt+0x33bc>
   134a0:	ldrb	r1, [r6, #4]
   134a4:	cmp	r0, #0
   134a8:	andne	r1, r1, #223	; 0xdf
   134ac:	mov	r0, #0
   134b0:	cmp	r1, r7
   134b4:	popne	{r4, r5, r6, r7, fp, pc}
   134b8:	cmp	r7, #0
   134bc:	beq	134d4 <__assert_fail@plt+0x2688>
   134c0:	mov	r0, r6
   134c4:	mov	r1, r5
   134c8:	mov	r2, r4
   134cc:	pop	{r4, r5, r6, r7, fp, lr}
   134d0:	b	134dc <__assert_fail@plt+0x2690>
   134d4:	mov	r0, #1
   134d8:	pop	{r4, r5, r6, r7, fp, pc}
   134dc:	push	{r4, r5, r6, sl, fp, lr}
   134e0:	add	fp, sp, #16
   134e4:	mov	r4, r2
   134e8:	mov	r6, r1
   134ec:	mov	r5, r0
   134f0:	mov	r0, r1
   134f4:	bl	14208 <__assert_fail@plt+0x33bc>
   134f8:	ldrb	r1, [r5, #5]
   134fc:	cmp	r0, #0
   13500:	andne	r1, r1, #223	; 0xdf
   13504:	mov	r0, #0
   13508:	cmp	r1, r6
   1350c:	popne	{r4, r5, r6, sl, fp, pc}
   13510:	cmp	r6, #0
   13514:	beq	13528 <__assert_fail@plt+0x26dc>
   13518:	mov	r0, r5
   1351c:	mov	r1, r4
   13520:	pop	{r4, r5, r6, sl, fp, lr}
   13524:	b	13530 <__assert_fail@plt+0x26e4>
   13528:	mov	r0, #1
   1352c:	pop	{r4, r5, r6, sl, fp, pc}
   13530:	push	{r4, r5, fp, lr}
   13534:	add	fp, sp, #8
   13538:	mov	r5, r1
   1353c:	mov	r4, r0
   13540:	mov	r0, r1
   13544:	bl	14208 <__assert_fail@plt+0x33bc>
   13548:	ldrb	r1, [r4, #6]
   1354c:	cmp	r0, #0
   13550:	andne	r1, r1, #223	; 0xdf
   13554:	mov	r0, #0
   13558:	cmp	r1, r5
   1355c:	popne	{r4, r5, fp, pc}
   13560:	cmp	r5, #0
   13564:	beq	13574 <__assert_fail@plt+0x2728>
   13568:	mov	r0, r4
   1356c:	pop	{r4, r5, fp, lr}
   13570:	b	1357c <__assert_fail@plt+0x2730>
   13574:	mov	r0, #1
   13578:	pop	{r4, r5, fp, pc}
   1357c:	push	{r4, sl, fp, lr}
   13580:	add	fp, sp, #8
   13584:	mov	r4, r0
   13588:	mov	r0, #0
   1358c:	bl	14208 <__assert_fail@plt+0x33bc>
   13590:	ldrb	r1, [r4, #7]
   13594:	cmp	r0, #0
   13598:	beq	135b0 <__assert_fail@plt+0x2764>
   1359c:	tst	r1, #223	; 0xdf
   135a0:	moveq	r0, #1
   135a4:	popeq	{r4, sl, fp, pc}
   135a8:	mov	r0, #0
   135ac:	pop	{r4, sl, fp, pc}
   135b0:	cmp	r1, #0
   135b4:	moveq	r0, #1
   135b8:	popeq	{r4, sl, fp, pc}
   135bc:	mov	r0, #0
   135c0:	pop	{r4, sl, fp, pc}
   135c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135c8:	add	fp, sp, #24
   135cc:	sub	sp, sp, #32
   135d0:	mov	r4, r2
   135d4:	mov	r8, r0
   135d8:	ldr	r6, [fp, #12]
   135dc:	ldr	r7, [fp, #8]
   135e0:	cmp	r1, #0
   135e4:	beq	1360c <__assert_fail@plt+0x27c0>
   135e8:	mov	r5, r1
   135ec:	str	r4, [sp]
   135f0:	str	r3, [sp, #4]
   135f4:	movw	r2, #20204	; 0x4eec
   135f8:	movt	r2, #1
   135fc:	mov	r0, r8
   13600:	mov	r1, #1
   13604:	mov	r3, r5
   13608:	b	13624 <__assert_fail@plt+0x27d8>
   1360c:	str	r3, [sp]
   13610:	movw	r2, #20216	; 0x4ef8
   13614:	movt	r2, #1
   13618:	mov	r0, r8
   1361c:	mov	r1, #1
   13620:	mov	r3, r4
   13624:	bl	10dd4 <__fprintf_chk@plt>
   13628:	movw	r1, #20223	; 0x4eff
   1362c:	movt	r1, #1
   13630:	mov	r0, #0
   13634:	mov	r2, #5
   13638:	bl	10cb4 <dcgettext@plt>
   1363c:	mov	r3, r0
   13640:	movw	r0, #2022	; 0x7e6
   13644:	str	r0, [sp]
   13648:	movw	r2, #20941	; 0x51cd
   1364c:	movt	r2, #1
   13650:	mov	r0, r8
   13654:	mov	r1, #1
   13658:	bl	10dd4 <__fprintf_chk@plt>
   1365c:	movw	r4, #18814	; 0x497e
   13660:	movt	r4, #1
   13664:	mov	r0, r4
   13668:	mov	r1, r8
   1366c:	bl	10c54 <fputs_unlocked@plt>
   13670:	movw	r1, #20227	; 0x4f03
   13674:	movt	r1, #1
   13678:	mov	r0, #0
   1367c:	mov	r2, #5
   13680:	bl	10cb4 <dcgettext@plt>
   13684:	mov	r2, r0
   13688:	movw	r3, #20398	; 0x4fae
   1368c:	movt	r3, #1
   13690:	mov	r0, r8
   13694:	mov	r1, #1
   13698:	bl	10dd4 <__fprintf_chk@plt>
   1369c:	mov	r0, r4
   136a0:	mov	r1, r8
   136a4:	bl	10c54 <fputs_unlocked@plt>
   136a8:	cmp	r6, #9
   136ac:	bhi	136e8 <__assert_fail@plt+0x289c>
   136b0:	add	r0, pc, #0
   136b4:	ldr	pc, [r0, r6, lsl #2]
   136b8:	andeq	r3, r1, r0, ror #13
   136bc:	strdeq	r3, [r1], -r4
   136c0:	andeq	r3, r1, r4, lsr #14
   136c4:	andeq	r3, r1, ip, asr #14
   136c8:	andeq	r3, r1, r4, ror r7
   136cc:	muleq	r1, ip, r7
   136d0:	andeq	r3, r1, r4, asr #15
   136d4:	strdeq	r3, [r1], -ip
   136d8:	muleq	r1, ip, r8
   136dc:	andeq	r3, r1, r4, asr #16
   136e0:	sub	sp, fp, #24
   136e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136e8:	movw	r1, #20751	; 0x510f
   136ec:	movt	r1, #1
   136f0:	b	1384c <__assert_fail@plt+0x2a00>
   136f4:	movw	r1, #20432	; 0x4fd0
   136f8:	movt	r1, #1
   136fc:	mov	r0, #0
   13700:	mov	r2, #5
   13704:	bl	10cb4 <dcgettext@plt>
   13708:	mov	r2, r0
   1370c:	ldr	r3, [r7]
   13710:	mov	r0, r8
   13714:	mov	r1, #1
   13718:	sub	sp, fp, #24
   1371c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13720:	b	10dd4 <__fprintf_chk@plt>
   13724:	movw	r1, #20448	; 0x4fe0
   13728:	movt	r1, #1
   1372c:	mov	r0, #0
   13730:	mov	r2, #5
   13734:	bl	10cb4 <dcgettext@plt>
   13738:	mov	r2, r0
   1373c:	ldr	r3, [r7]
   13740:	ldr	r0, [r7, #4]
   13744:	str	r0, [sp]
   13748:	b	13838 <__assert_fail@plt+0x29ec>
   1374c:	movw	r1, #20471	; 0x4ff7
   13750:	movt	r1, #1
   13754:	mov	r0, #0
   13758:	mov	r2, #5
   1375c:	bl	10cb4 <dcgettext@plt>
   13760:	mov	r2, r0
   13764:	ldr	r3, [r7]
   13768:	ldmib	r7, {r0, r1}
   1376c:	stm	sp, {r0, r1}
   13770:	b	13838 <__assert_fail@plt+0x29ec>
   13774:	movw	r1, #20499	; 0x5013
   13778:	movt	r1, #1
   1377c:	mov	r0, #0
   13780:	mov	r2, #5
   13784:	bl	10cb4 <dcgettext@plt>
   13788:	mov	r2, r0
   1378c:	ldr	r3, [r7]
   13790:	ldmib	r7, {r0, r1, r7}
   13794:	stm	sp, {r0, r1, r7}
   13798:	b	13838 <__assert_fail@plt+0x29ec>
   1379c:	movw	r1, #20531	; 0x5033
   137a0:	movt	r1, #1
   137a4:	mov	r0, #0
   137a8:	mov	r2, #5
   137ac:	bl	10cb4 <dcgettext@plt>
   137b0:	mov	r2, r0
   137b4:	ldr	r3, [r7]
   137b8:	ldmib	r7, {r0, r1, r6, r7}
   137bc:	stm	sp, {r0, r1, r6, r7}
   137c0:	b	13838 <__assert_fail@plt+0x29ec>
   137c4:	movw	r1, #20567	; 0x5057
   137c8:	movt	r1, #1
   137cc:	mov	r0, #0
   137d0:	mov	r2, #5
   137d4:	bl	10cb4 <dcgettext@plt>
   137d8:	mov	r2, r0
   137dc:	ldr	r3, [r7]
   137e0:	ldmib	r7, {r0, r1, r6}
   137e4:	ldr	r5, [r7, #16]
   137e8:	ldr	r7, [r7, #20]
   137ec:	stm	sp, {r0, r1, r6}
   137f0:	str	r5, [sp, #12]
   137f4:	str	r7, [sp, #16]
   137f8:	b	13838 <__assert_fail@plt+0x29ec>
   137fc:	movw	r1, #20607	; 0x507f
   13800:	movt	r1, #1
   13804:	mov	r0, #0
   13808:	mov	r2, #5
   1380c:	bl	10cb4 <dcgettext@plt>
   13810:	mov	r2, r0
   13814:	ldr	r3, [r7]
   13818:	ldmib	r7, {r0, r1, r6}
   1381c:	ldr	r5, [r7, #16]
   13820:	ldr	r4, [r7, #20]
   13824:	ldr	r7, [r7, #24]
   13828:	stm	sp, {r0, r1, r6}
   1382c:	str	r5, [sp, #12]
   13830:	str	r4, [sp, #16]
   13834:	str	r7, [sp, #20]
   13838:	mov	r0, r8
   1383c:	mov	r1, #1
   13840:	b	138ec <__assert_fail@plt+0x2aa0>
   13844:	movw	r1, #20699	; 0x50db
   13848:	movt	r1, #1
   1384c:	mov	r0, #0
   13850:	mov	r2, #5
   13854:	bl	10cb4 <dcgettext@plt>
   13858:	mov	ip, r0
   1385c:	ldr	r3, [r7]
   13860:	ldr	r0, [r7, #4]
   13864:	ldr	r1, [r7, #8]
   13868:	ldr	r6, [r7, #12]
   1386c:	ldr	r5, [r7, #16]
   13870:	ldr	r4, [r7, #20]
   13874:	ldr	r2, [r7, #24]
   13878:	ldr	lr, [r7, #28]
   1387c:	ldr	r7, [r7, #32]
   13880:	stm	sp, {r0, r1, r6}
   13884:	str	r5, [sp, #12]
   13888:	str	r4, [sp, #16]
   1388c:	str	r2, [sp, #20]
   13890:	str	lr, [sp, #24]
   13894:	str	r7, [sp, #28]
   13898:	b	138e0 <__assert_fail@plt+0x2a94>
   1389c:	movw	r1, #20651	; 0x50ab
   138a0:	movt	r1, #1
   138a4:	mov	r0, #0
   138a8:	mov	r2, #5
   138ac:	bl	10cb4 <dcgettext@plt>
   138b0:	mov	ip, r0
   138b4:	ldr	r3, [r7]
   138b8:	ldmib	r7, {r0, r1, r6}
   138bc:	ldr	r5, [r7, #16]
   138c0:	ldr	r4, [r7, #20]
   138c4:	ldr	r2, [r7, #24]
   138c8:	ldr	r7, [r7, #28]
   138cc:	stm	sp, {r0, r1, r6}
   138d0:	str	r5, [sp, #12]
   138d4:	str	r4, [sp, #16]
   138d8:	str	r2, [sp, #20]
   138dc:	str	r7, [sp, #24]
   138e0:	mov	r0, r8
   138e4:	mov	r1, #1
   138e8:	mov	r2, ip
   138ec:	bl	10dd4 <__fprintf_chk@plt>
   138f0:	sub	sp, fp, #24
   138f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138f8:	push	{r4, sl, fp, lr}
   138fc:	add	fp, sp, #8
   13900:	sub	sp, sp, #8
   13904:	mov	lr, #0
   13908:	ldr	ip, [fp, #8]
   1390c:	ldr	r4, [ip, lr, lsl #2]
   13910:	add	lr, lr, #1
   13914:	cmp	r4, #0
   13918:	bne	1390c <__assert_fail@plt+0x2ac0>
   1391c:	sub	r4, lr, #1
   13920:	str	ip, [sp]
   13924:	str	r4, [sp, #4]
   13928:	bl	135c4 <__assert_fail@plt+0x2778>
   1392c:	sub	sp, fp, #8
   13930:	pop	{r4, sl, fp, pc}
   13934:	push	{r4, r5, fp, lr}
   13938:	add	fp, sp, #8
   1393c:	sub	sp, sp, #48	; 0x30
   13940:	mov	ip, #0
   13944:	ldr	r4, [fp, #8]
   13948:	add	lr, sp, #8
   1394c:	ldr	r5, [r4]
   13950:	str	r5, [lr, ip, lsl #2]
   13954:	cmp	r5, #0
   13958:	beq	1396c <__assert_fail@plt+0x2b20>
   1395c:	add	ip, ip, #1
   13960:	add	r4, r4, #4
   13964:	cmp	ip, #10
   13968:	bcc	1394c <__assert_fail@plt+0x2b00>
   1396c:	str	lr, [sp]
   13970:	str	ip, [sp, #4]
   13974:	bl	135c4 <__assert_fail@plt+0x2778>
   13978:	sub	sp, fp, #8
   1397c:	pop	{r4, r5, fp, pc}
   13980:	push	{fp, lr}
   13984:	mov	fp, sp
   13988:	sub	sp, sp, #8
   1398c:	add	ip, fp, #8
   13990:	str	ip, [sp, #4]
   13994:	str	ip, [sp]
   13998:	bl	13934 <__assert_fail@plt+0x2ae8>
   1399c:	mov	sp, fp
   139a0:	pop	{fp, pc}
   139a4:	push	{fp, lr}
   139a8:	mov	fp, sp
   139ac:	movw	r0, #24860	; 0x611c
   139b0:	movt	r0, #2
   139b4:	ldr	r1, [r0]
   139b8:	movw	r0, #18814	; 0x497e
   139bc:	movt	r0, #1
   139c0:	bl	10c54 <fputs_unlocked@plt>
   139c4:	movw	r1, #20811	; 0x514b
   139c8:	movt	r1, #1
   139cc:	mov	r0, #0
   139d0:	mov	r2, #5
   139d4:	bl	10cb4 <dcgettext@plt>
   139d8:	mov	r1, r0
   139dc:	movw	r2, #20831	; 0x515f
   139e0:	movt	r2, #1
   139e4:	mov	r0, #1
   139e8:	bl	10dbc <__printf_chk@plt>
   139ec:	movw	r1, #20853	; 0x5175
   139f0:	movt	r1, #1
   139f4:	mov	r0, #0
   139f8:	mov	r2, #5
   139fc:	bl	10cb4 <dcgettext@plt>
   13a00:	mov	r1, r0
   13a04:	movw	r2, #19516	; 0x4c3c
   13a08:	movt	r2, #1
   13a0c:	movw	r3, #19669	; 0x4cd5
   13a10:	movt	r3, #1
   13a14:	mov	r0, #1
   13a18:	bl	10dbc <__printf_chk@plt>
   13a1c:	movw	r1, #20873	; 0x5189
   13a20:	movt	r1, #1
   13a24:	mov	r0, #0
   13a28:	mov	r2, #5
   13a2c:	bl	10cb4 <dcgettext@plt>
   13a30:	mov	r1, r0
   13a34:	movw	r2, #20912	; 0x51b0
   13a38:	movt	r2, #1
   13a3c:	mov	r0, #1
   13a40:	pop	{fp, lr}
   13a44:	b	10dbc <__printf_chk@plt>
   13a48:	b	13a4c <__assert_fail@plt+0x2c00>
   13a4c:	push	{r4, r5, r6, sl, fp, lr}
   13a50:	add	fp, sp, #16
   13a54:	mov	r4, r2
   13a58:	mov	r5, r1
   13a5c:	mov	r6, r0
   13a60:	bl	145bc <__assert_fail@plt+0x3770>
   13a64:	cmp	r0, #0
   13a68:	popne	{r4, r5, r6, sl, fp, pc}
   13a6c:	cmp	r6, #0
   13a70:	beq	13a84 <__assert_fail@plt+0x2c38>
   13a74:	cmp	r5, #0
   13a78:	cmpne	r4, #0
   13a7c:	bne	13a84 <__assert_fail@plt+0x2c38>
   13a80:	pop	{r4, r5, r6, sl, fp, pc}
   13a84:	bl	13e38 <__assert_fail@plt+0x2fec>
   13a88:	push	{fp, lr}
   13a8c:	mov	fp, sp
   13a90:	bl	13ed0 <__assert_fail@plt+0x3084>
   13a94:	bl	13a9c <__assert_fail@plt+0x2c50>
   13a98:	pop	{fp, pc}
   13a9c:	cmp	r0, #0
   13aa0:	bxne	lr
   13aa4:	push	{fp, lr}
   13aa8:	mov	fp, sp
   13aac:	bl	13e38 <__assert_fail@plt+0x2fec>
   13ab0:	push	{fp, lr}
   13ab4:	mov	fp, sp
   13ab8:	bl	144f0 <__assert_fail@plt+0x36a4>
   13abc:	bl	13a9c <__assert_fail@plt+0x2c50>
   13ac0:	pop	{fp, pc}
   13ac4:	b	13a88 <__assert_fail@plt+0x2c3c>
   13ac8:	push	{r4, r5, fp, lr}
   13acc:	add	fp, sp, #8
   13ad0:	mov	r4, r1
   13ad4:	mov	r5, r0
   13ad8:	bl	13f00 <__assert_fail@plt+0x30b4>
   13adc:	cmp	r0, #0
   13ae0:	popne	{r4, r5, fp, pc}
   13ae4:	cmp	r5, #0
   13ae8:	beq	13af8 <__assert_fail@plt+0x2cac>
   13aec:	cmp	r4, #0
   13af0:	bne	13af8 <__assert_fail@plt+0x2cac>
   13af4:	pop	{r4, r5, fp, pc}
   13af8:	bl	13e38 <__assert_fail@plt+0x2fec>
   13afc:	push	{fp, lr}
   13b00:	mov	fp, sp
   13b04:	bl	144f4 <__assert_fail@plt+0x36a8>
   13b08:	bl	13a9c <__assert_fail@plt+0x2c50>
   13b0c:	pop	{fp, pc}
   13b10:	push	{fp, lr}
   13b14:	mov	fp, sp
   13b18:	bl	14504 <__assert_fail@plt+0x36b8>
   13b1c:	bl	13a9c <__assert_fail@plt+0x2c50>
   13b20:	pop	{fp, pc}
   13b24:	push	{fp, lr}
   13b28:	mov	fp, sp
   13b2c:	mov	r2, r1
   13b30:	mov	r1, r0
   13b34:	mov	r0, #0
   13b38:	bl	13a4c <__assert_fail@plt+0x2c00>
   13b3c:	pop	{fp, pc}
   13b40:	mov	r2, r1
   13b44:	mov	r1, r0
   13b48:	mov	r0, #0
   13b4c:	b	13b10 <__assert_fail@plt+0x2cc4>
   13b50:	mov	r2, #1
   13b54:	b	13b58 <__assert_fail@plt+0x2d0c>
   13b58:	push	{r4, r5, fp, lr}
   13b5c:	add	fp, sp, #8
   13b60:	mov	r4, r1
   13b64:	ldr	r5, [r1]
   13b68:	cmp	r0, #0
   13b6c:	beq	13b84 <__assert_fail@plt+0x2d38>
   13b70:	mov	r1, #1
   13b74:	add	r1, r1, r5, lsr #1
   13b78:	adds	r5, r5, r1
   13b7c:	bcc	13b9c <__assert_fail@plt+0x2d50>
   13b80:	bl	13e38 <__assert_fail@plt+0x2fec>
   13b84:	cmp	r5, #0
   13b88:	bne	13b9c <__assert_fail@plt+0x2d50>
   13b8c:	mov	r1, #64	; 0x40
   13b90:	udiv	r5, r1, r2
   13b94:	cmp	r2, #64	; 0x40
   13b98:	addhi	r5, r5, #1
   13b9c:	mov	r1, r5
   13ba0:	bl	13a4c <__assert_fail@plt+0x2c00>
   13ba4:	str	r5, [r4]
   13ba8:	pop	{r4, r5, fp, pc}
   13bac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bb0:	add	fp, sp, #24
   13bb4:	mov	r8, r1
   13bb8:	ldr	r6, [r1]
   13bbc:	add	r1, r6, r6, asr #1
   13bc0:	cmp	r1, r6
   13bc4:	mvnvs	r1, #-2147483648	; 0x80000000
   13bc8:	cmp	r1, r3
   13bcc:	mov	r5, r1
   13bd0:	movgt	r5, r3
   13bd4:	cmn	r3, #1
   13bd8:	movle	r5, r1
   13bdc:	ldr	r4, [fp, #8]
   13be0:	cmn	r4, #1
   13be4:	ble	13c0c <__assert_fail@plt+0x2dc0>
   13be8:	cmp	r4, #0
   13bec:	beq	13c60 <__assert_fail@plt+0x2e14>
   13bf0:	cmn	r5, #1
   13bf4:	ble	13c34 <__assert_fail@plt+0x2de8>
   13bf8:	mvn	r7, #-2147483648	; 0x80000000
   13bfc:	udiv	r1, r7, r4
   13c00:	cmp	r1, r5
   13c04:	bge	13c60 <__assert_fail@plt+0x2e14>
   13c08:	b	13c70 <__assert_fail@plt+0x2e24>
   13c0c:	cmn	r5, #1
   13c10:	ble	13c50 <__assert_fail@plt+0x2e04>
   13c14:	cmn	r4, #1
   13c18:	beq	13c60 <__assert_fail@plt+0x2e14>
   13c1c:	mov	r1, #-2147483648	; 0x80000000
   13c20:	sdiv	r1, r1, r4
   13c24:	mvn	r7, #-2147483648	; 0x80000000
   13c28:	cmp	r1, r5
   13c2c:	bge	13c60 <__assert_fail@plt+0x2e14>
   13c30:	b	13c70 <__assert_fail@plt+0x2e24>
   13c34:	beq	13c60 <__assert_fail@plt+0x2e14>
   13c38:	mov	r1, #-2147483648	; 0x80000000
   13c3c:	sdiv	r1, r1, r5
   13c40:	mvn	r7, #-2147483648	; 0x80000000
   13c44:	cmp	r1, r4
   13c48:	bge	13c60 <__assert_fail@plt+0x2e14>
   13c4c:	b	13c70 <__assert_fail@plt+0x2e24>
   13c50:	mvn	r7, #-2147483648	; 0x80000000
   13c54:	sdiv	r1, r7, r4
   13c58:	cmp	r5, r1
   13c5c:	blt	13c70 <__assert_fail@plt+0x2e24>
   13c60:	mul	r1, r5, r4
   13c64:	mov	r7, #64	; 0x40
   13c68:	cmp	r1, #63	; 0x3f
   13c6c:	bgt	13c78 <__assert_fail@plt+0x2e2c>
   13c70:	sdiv	r5, r7, r4
   13c74:	mul	r1, r5, r4
   13c78:	cmp	r0, #0
   13c7c:	moveq	r7, #0
   13c80:	streq	r7, [r8]
   13c84:	sub	r7, r5, r6
   13c88:	cmp	r7, r2
   13c8c:	bge	13d38 <__assert_fail@plt+0x2eec>
   13c90:	add	r5, r6, r2
   13c94:	mov	r1, #0
   13c98:	cmp	r5, r3
   13c9c:	mov	r2, #0
   13ca0:	movwgt	r2, #1
   13ca4:	cmn	r3, #1
   13ca8:	movwgt	r1, #1
   13cac:	cmp	r5, r6
   13cb0:	bvs	13d20 <__assert_fail@plt+0x2ed4>
   13cb4:	ands	r1, r1, r2
   13cb8:	bne	13d20 <__assert_fail@plt+0x2ed4>
   13cbc:	cmn	r4, #1
   13cc0:	ble	13ce8 <__assert_fail@plt+0x2e9c>
   13cc4:	cmp	r4, #0
   13cc8:	beq	13d34 <__assert_fail@plt+0x2ee8>
   13ccc:	cmn	r5, #1
   13cd0:	ble	13d0c <__assert_fail@plt+0x2ec0>
   13cd4:	mvn	r1, #-2147483648	; 0x80000000
   13cd8:	udiv	r1, r1, r4
   13cdc:	cmp	r1, r5
   13ce0:	bge	13d34 <__assert_fail@plt+0x2ee8>
   13ce4:	b	13d20 <__assert_fail@plt+0x2ed4>
   13ce8:	cmn	r5, #1
   13cec:	ble	13d24 <__assert_fail@plt+0x2ed8>
   13cf0:	cmn	r4, #1
   13cf4:	beq	13d34 <__assert_fail@plt+0x2ee8>
   13cf8:	mov	r1, #-2147483648	; 0x80000000
   13cfc:	sdiv	r1, r1, r4
   13d00:	cmp	r1, r5
   13d04:	bge	13d34 <__assert_fail@plt+0x2ee8>
   13d08:	b	13d20 <__assert_fail@plt+0x2ed4>
   13d0c:	beq	13d34 <__assert_fail@plt+0x2ee8>
   13d10:	mov	r1, #-2147483648	; 0x80000000
   13d14:	sdiv	r1, r1, r5
   13d18:	cmp	r1, r4
   13d1c:	bge	13d34 <__assert_fail@plt+0x2ee8>
   13d20:	bl	13e38 <__assert_fail@plt+0x2fec>
   13d24:	mvn	r1, #-2147483648	; 0x80000000
   13d28:	sdiv	r1, r1, r4
   13d2c:	cmp	r5, r1
   13d30:	blt	13d20 <__assert_fail@plt+0x2ed4>
   13d34:	mul	r1, r5, r4
   13d38:	bl	13ac8 <__assert_fail@plt+0x2c7c>
   13d3c:	str	r5, [r8]
   13d40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d44:	mov	r1, #1
   13d48:	b	13d4c <__assert_fail@plt+0x2f00>
   13d4c:	push	{fp, lr}
   13d50:	mov	fp, sp
   13d54:	bl	13e7c <__assert_fail@plt+0x3030>
   13d58:	bl	13a9c <__assert_fail@plt+0x2c50>
   13d5c:	pop	{fp, pc}
   13d60:	mov	r1, #1
   13d64:	b	13d68 <__assert_fail@plt+0x2f1c>
   13d68:	push	{fp, lr}
   13d6c:	mov	fp, sp
   13d70:	bl	14500 <__assert_fail@plt+0x36b4>
   13d74:	bl	13a9c <__assert_fail@plt+0x2c50>
   13d78:	pop	{fp, pc}
   13d7c:	push	{r4, r5, r6, sl, fp, lr}
   13d80:	add	fp, sp, #16
   13d84:	mov	r4, r1
   13d88:	mov	r5, r0
   13d8c:	mov	r0, r1
   13d90:	bl	13a88 <__assert_fail@plt+0x2c3c>
   13d94:	mov	r6, r0
   13d98:	mov	r1, r5
   13d9c:	mov	r2, r4
   13da0:	bl	10c90 <memcpy@plt>
   13da4:	mov	r0, r6
   13da8:	pop	{r4, r5, r6, sl, fp, pc}
   13dac:	push	{r4, r5, r6, sl, fp, lr}
   13db0:	add	fp, sp, #16
   13db4:	mov	r4, r1
   13db8:	mov	r5, r0
   13dbc:	mov	r0, r1
   13dc0:	bl	13ab0 <__assert_fail@plt+0x2c64>
   13dc4:	mov	r6, r0
   13dc8:	mov	r1, r5
   13dcc:	mov	r2, r4
   13dd0:	bl	10c90 <memcpy@plt>
   13dd4:	mov	r0, r6
   13dd8:	pop	{r4, r5, r6, sl, fp, pc}
   13ddc:	push	{r4, r5, r6, sl, fp, lr}
   13de0:	add	fp, sp, #16
   13de4:	mov	r4, r1
   13de8:	mov	r5, r0
   13dec:	add	r0, r1, #1
   13df0:	bl	13ab0 <__assert_fail@plt+0x2c64>
   13df4:	mov	r6, r0
   13df8:	mov	r0, #0
   13dfc:	strb	r0, [r6, r4]
   13e00:	mov	r0, r6
   13e04:	mov	r1, r5
   13e08:	mov	r2, r4
   13e0c:	bl	10c90 <memcpy@plt>
   13e10:	mov	r0, r6
   13e14:	pop	{r4, r5, r6, sl, fp, pc}
   13e18:	push	{r4, sl, fp, lr}
   13e1c:	add	fp, sp, #8
   13e20:	mov	r4, r0
   13e24:	bl	10d8c <strlen@plt>
   13e28:	add	r1, r0, #1
   13e2c:	mov	r0, r4
   13e30:	pop	{r4, sl, fp, lr}
   13e34:	b	13d7c <__assert_fail@plt+0x2f30>
   13e38:	push	{fp, lr}
   13e3c:	mov	fp, sp
   13e40:	movw	r0, #24780	; 0x60cc
   13e44:	movt	r0, #2
   13e48:	ldr	r4, [r0]
   13e4c:	movw	r1, #20988	; 0x51fc
   13e50:	movt	r1, #1
   13e54:	mov	r0, #0
   13e58:	mov	r2, #5
   13e5c:	bl	10cb4 <dcgettext@plt>
   13e60:	mov	r3, r0
   13e64:	movw	r2, #19951	; 0x4def
   13e68:	movt	r2, #1
   13e6c:	mov	r0, r4
   13e70:	mov	r1, #0
   13e74:	bl	10d2c <error@plt>
   13e78:	bl	10e34 <abort@plt>
   13e7c:	clz	r2, r1
   13e80:	lsr	r2, r2, #5
   13e84:	clz	r3, r0
   13e88:	lsr	r3, r3, #5
   13e8c:	orrs	r2, r3, r2
   13e90:	movwne	r1, #1
   13e94:	movwne	r0, #1
   13e98:	cmp	r1, #0
   13e9c:	beq	13ecc <__assert_fail@plt+0x3080>
   13ea0:	mvn	r2, #-2147483648	; 0x80000000
   13ea4:	udiv	r2, r2, r1
   13ea8:	cmp	r2, r0
   13eac:	bcs	13ecc <__assert_fail@plt+0x3080>
   13eb0:	push	{fp, lr}
   13eb4:	mov	fp, sp
   13eb8:	bl	10d98 <__errno_location@plt>
   13ebc:	mov	r1, #12
   13ec0:	str	r1, [r0]
   13ec4:	mov	r0, #0
   13ec8:	pop	{fp, pc}
   13ecc:	b	10c48 <calloc@plt>
   13ed0:	cmp	r0, #0
   13ed4:	movweq	r0, #1
   13ed8:	cmn	r0, #1
   13edc:	ble	13ee4 <__assert_fail@plt+0x3098>
   13ee0:	b	10d44 <malloc@plt>
   13ee4:	push	{fp, lr}
   13ee8:	mov	fp, sp
   13eec:	bl	10d98 <__errno_location@plt>
   13ef0:	mov	r1, #12
   13ef4:	str	r1, [r0]
   13ef8:	mov	r0, #0
   13efc:	pop	{fp, pc}
   13f00:	push	{fp, lr}
   13f04:	mov	fp, sp
   13f08:	cmp	r0, #0
   13f0c:	beq	13f28 <__assert_fail@plt+0x30dc>
   13f10:	cmp	r1, #0
   13f14:	beq	13f34 <__assert_fail@plt+0x30e8>
   13f18:	cmn	r1, #1
   13f1c:	ble	13f40 <__assert_fail@plt+0x30f4>
   13f20:	pop	{fp, lr}
   13f24:	b	10cc0 <realloc@plt>
   13f28:	mov	r0, r1
   13f2c:	pop	{fp, lr}
   13f30:	b	13ed0 <__assert_fail@plt+0x3084>
   13f34:	bl	14408 <__assert_fail@plt+0x35bc>
   13f38:	mov	r0, #0
   13f3c:	pop	{fp, pc}
   13f40:	bl	10d98 <__errno_location@plt>
   13f44:	mov	r1, #12
   13f48:	str	r1, [r0]
   13f4c:	mov	r0, #0
   13f50:	pop	{fp, pc}
   13f54:	mov	r1, r0
   13f58:	sub	r2, r0, #65	; 0x41
   13f5c:	mov	r0, #1
   13f60:	cmp	r2, #26
   13f64:	subcs	r2, r1, #97	; 0x61
   13f68:	cmpcs	r2, #26
   13f6c:	bcs	13f74 <__assert_fail@plt+0x3128>
   13f70:	bx	lr
   13f74:	sub	r1, r1, #48	; 0x30
   13f78:	cmp	r1, #10
   13f7c:	movcs	r0, #0
   13f80:	bx	lr
   13f84:	mov	r1, r0
   13f88:	sub	r2, r0, #65	; 0x41
   13f8c:	mov	r0, #1
   13f90:	cmp	r2, #26
   13f94:	subcs	r1, r1, #97	; 0x61
   13f98:	cmpcs	r1, #26
   13f9c:	movcs	r0, #0
   13fa0:	bx	lr
   13fa4:	mov	r1, #0
   13fa8:	cmp	r0, #128	; 0x80
   13fac:	movwcc	r1, #1
   13fb0:	mov	r0, r1
   13fb4:	bx	lr
   13fb8:	sub	r1, r0, #9
   13fbc:	clz	r1, r1
   13fc0:	lsr	r1, r1, #5
   13fc4:	sub	r0, r0, #32
   13fc8:	clz	r0, r0
   13fcc:	lsr	r0, r0, #5
   13fd0:	orr	r0, r0, r1
   13fd4:	bx	lr
   13fd8:	mov	r1, r0
   13fdc:	mov	r0, #1
   13fe0:	cmp	r1, #32
   13fe4:	bxcc	lr
   13fe8:	cmp	r1, #127	; 0x7f
   13fec:	movne	r0, #0
   13ff0:	bx	lr
   13ff4:	sub	r1, r0, #48	; 0x30
   13ff8:	mov	r0, #0
   13ffc:	cmp	r1, #10
   14000:	movwcc	r0, #1
   14004:	bx	lr
   14008:	sub	r1, r0, #33	; 0x21
   1400c:	mov	r0, #0
   14010:	cmp	r1, #94	; 0x5e
   14014:	movwcc	r0, #1
   14018:	bx	lr
   1401c:	sub	r1, r0, #97	; 0x61
   14020:	mov	r0, #0
   14024:	cmp	r1, #26
   14028:	movwcc	r0, #1
   1402c:	bx	lr
   14030:	sub	r1, r0, #32
   14034:	mov	r0, #0
   14038:	cmp	r1, #95	; 0x5f
   1403c:	movwcc	r0, #1
   14040:	bx	lr
   14044:	sub	r1, r0, #33	; 0x21
   14048:	cmp	r1, #93	; 0x5d
   1404c:	bhi	141d8 <__assert_fail@plt+0x338c>
   14050:	mov	r0, #1
   14054:	add	r2, pc, #0
   14058:	ldr	pc, [r2, r1, lsl #2]
   1405c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14060:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14064:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14068:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1406c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14070:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14074:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14078:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1407c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14080:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14084:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14088:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1408c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14090:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14094:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14098:	ldrdeq	r4, [r1], -r8
   1409c:	ldrdeq	r4, [r1], -r8
   140a0:	ldrdeq	r4, [r1], -r8
   140a4:	ldrdeq	r4, [r1], -r8
   140a8:	ldrdeq	r4, [r1], -r8
   140ac:	ldrdeq	r4, [r1], -r8
   140b0:	ldrdeq	r4, [r1], -r8
   140b4:	ldrdeq	r4, [r1], -r8
   140b8:	ldrdeq	r4, [r1], -r8
   140bc:	ldrdeq	r4, [r1], -r8
   140c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140dc:	ldrdeq	r4, [r1], -r8
   140e0:	ldrdeq	r4, [r1], -r8
   140e4:	ldrdeq	r4, [r1], -r8
   140e8:	ldrdeq	r4, [r1], -r8
   140ec:	ldrdeq	r4, [r1], -r8
   140f0:	ldrdeq	r4, [r1], -r8
   140f4:	ldrdeq	r4, [r1], -r8
   140f8:	ldrdeq	r4, [r1], -r8
   140fc:	ldrdeq	r4, [r1], -r8
   14100:	ldrdeq	r4, [r1], -r8
   14104:	ldrdeq	r4, [r1], -r8
   14108:	ldrdeq	r4, [r1], -r8
   1410c:	ldrdeq	r4, [r1], -r8
   14110:	ldrdeq	r4, [r1], -r8
   14114:	ldrdeq	r4, [r1], -r8
   14118:	ldrdeq	r4, [r1], -r8
   1411c:	ldrdeq	r4, [r1], -r8
   14120:	ldrdeq	r4, [r1], -r8
   14124:	ldrdeq	r4, [r1], -r8
   14128:	ldrdeq	r4, [r1], -r8
   1412c:	ldrdeq	r4, [r1], -r8
   14130:	ldrdeq	r4, [r1], -r8
   14134:	ldrdeq	r4, [r1], -r8
   14138:	ldrdeq	r4, [r1], -r8
   1413c:	ldrdeq	r4, [r1], -r8
   14140:	ldrdeq	r4, [r1], -r8
   14144:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14148:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1414c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14150:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14154:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14158:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1415c:	ldrdeq	r4, [r1], -r8
   14160:	ldrdeq	r4, [r1], -r8
   14164:	ldrdeq	r4, [r1], -r8
   14168:	ldrdeq	r4, [r1], -r8
   1416c:	ldrdeq	r4, [r1], -r8
   14170:	ldrdeq	r4, [r1], -r8
   14174:	ldrdeq	r4, [r1], -r8
   14178:	ldrdeq	r4, [r1], -r8
   1417c:	ldrdeq	r4, [r1], -r8
   14180:	ldrdeq	r4, [r1], -r8
   14184:	ldrdeq	r4, [r1], -r8
   14188:	ldrdeq	r4, [r1], -r8
   1418c:	ldrdeq	r4, [r1], -r8
   14190:	ldrdeq	r4, [r1], -r8
   14194:	ldrdeq	r4, [r1], -r8
   14198:	ldrdeq	r4, [r1], -r8
   1419c:	ldrdeq	r4, [r1], -r8
   141a0:	ldrdeq	r4, [r1], -r8
   141a4:	ldrdeq	r4, [r1], -r8
   141a8:	ldrdeq	r4, [r1], -r8
   141ac:	ldrdeq	r4, [r1], -r8
   141b0:	ldrdeq	r4, [r1], -r8
   141b4:	ldrdeq	r4, [r1], -r8
   141b8:	ldrdeq	r4, [r1], -r8
   141bc:	ldrdeq	r4, [r1], -r8
   141c0:	ldrdeq	r4, [r1], -r8
   141c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141d4:	bx	lr
   141d8:	mov	r0, #0
   141dc:	bx	lr
   141e0:	sub	r0, r0, #9
   141e4:	cmp	r0, #23
   141e8:	movhi	r0, #0
   141ec:	bxhi	lr
   141f0:	bic	r0, r0, #-16777216	; 0xff000000
   141f4:	movw	r1, #31
   141f8:	movt	r1, #128	; 0x80
   141fc:	mov	r2, #1
   14200:	and	r0, r2, r1, lsr r0
   14204:	bx	lr
   14208:	sub	r1, r0, #65	; 0x41
   1420c:	mov	r0, #0
   14210:	cmp	r1, #26
   14214:	movwcc	r0, #1
   14218:	bx	lr
   1421c:	mov	r1, r0
   14220:	sub	r2, r0, #48	; 0x30
   14224:	mov	r0, #1
   14228:	cmp	r2, #22
   1422c:	bhi	14244 <__assert_fail@plt+0x33f8>
   14230:	mov	ip, #1
   14234:	movw	r3, #1023	; 0x3ff
   14238:	movt	r3, #126	; 0x7e
   1423c:	tst	r3, ip, lsl r2
   14240:	bxne	lr
   14244:	sub	r1, r1, #97	; 0x61
   14248:	cmp	r1, #6
   1424c:	movcs	r0, #0
   14250:	bxcs	lr
   14254:	bx	lr
   14258:	sub	r1, r0, #65	; 0x41
   1425c:	cmp	r1, #26
   14260:	addcc	r0, r0, #32
   14264:	bx	lr
   14268:	sub	r1, r0, #97	; 0x61
   1426c:	cmp	r1, #26
   14270:	subcc	r0, r0, #32
   14274:	bx	lr
   14278:	push	{r4, r5, r6, sl, fp, lr}
   1427c:	add	fp, sp, #16
   14280:	mov	r4, r0
   14284:	bl	10d08 <__fpending@plt>
   14288:	mov	r5, r0
   1428c:	mov	r0, r4
   14290:	bl	10d14 <ferror_unlocked@plt>
   14294:	mov	r6, r0
   14298:	mov	r0, r4
   1429c:	bl	14300 <__assert_fail@plt+0x34b4>
   142a0:	cmp	r6, #0
   142a4:	beq	142c4 <__assert_fail@plt+0x3478>
   142a8:	mvn	r4, #0
   142ac:	cmp	r0, #0
   142b0:	bne	142f8 <__assert_fail@plt+0x34ac>
   142b4:	bl	10d98 <__errno_location@plt>
   142b8:	mov	r1, #0
   142bc:	str	r1, [r0]
   142c0:	b	142f8 <__assert_fail@plt+0x34ac>
   142c4:	cmp	r0, #0
   142c8:	mov	r4, r0
   142cc:	mvnne	r4, #0
   142d0:	cmp	r5, #0
   142d4:	bne	142f8 <__assert_fail@plt+0x34ac>
   142d8:	cmp	r0, #0
   142dc:	beq	142f8 <__assert_fail@plt+0x34ac>
   142e0:	bl	10d98 <__errno_location@plt>
   142e4:	ldr	r0, [r0]
   142e8:	subs	r4, r0, #9
   142ec:	mvnne	r4, #0
   142f0:	mov	r0, r4
   142f4:	pop	{r4, r5, r6, sl, fp, pc}
   142f8:	mov	r0, r4
   142fc:	pop	{r4, r5, r6, sl, fp, pc}
   14300:	push	{r4, r5, fp, lr}
   14304:	add	fp, sp, #8
   14308:	sub	sp, sp, #8
   1430c:	mov	r4, r0
   14310:	bl	10dc8 <fileno@plt>
   14314:	cmn	r0, #1
   14318:	ble	14390 <__assert_fail@plt+0x3544>
   1431c:	mov	r0, r4
   14320:	bl	10d5c <__freading@plt>
   14324:	cmp	r0, #0
   14328:	beq	14354 <__assert_fail@plt+0x3508>
   1432c:	mov	r0, r4
   14330:	bl	10dc8 <fileno@plt>
   14334:	mov	r1, #1
   14338:	str	r1, [sp]
   1433c:	mov	r2, #0
   14340:	mov	r3, #0
   14344:	bl	10cf0 <lseek64@plt>
   14348:	and	r0, r0, r1
   1434c:	cmn	r0, #1
   14350:	beq	14390 <__assert_fail@plt+0x3544>
   14354:	mov	r0, r4
   14358:	bl	143a0 <__assert_fail@plt+0x3554>
   1435c:	cmp	r0, #0
   14360:	beq	14390 <__assert_fail@plt+0x3544>
   14364:	bl	10d98 <__errno_location@plt>
   14368:	ldr	r5, [r0]
   1436c:	mov	r0, r4
   14370:	bl	10de0 <fclose@plt>
   14374:	cmp	r5, #0
   14378:	beq	14388 <__assert_fail@plt+0x353c>
   1437c:	bl	10d98 <__errno_location@plt>
   14380:	str	r5, [r0]
   14384:	mvn	r0, #0
   14388:	sub	sp, fp, #8
   1438c:	pop	{r4, r5, fp, pc}
   14390:	mov	r0, r4
   14394:	sub	sp, fp, #8
   14398:	pop	{r4, r5, fp, lr}
   1439c:	b	10de0 <fclose@plt>
   143a0:	push	{r4, sl, fp, lr}
   143a4:	add	fp, sp, #8
   143a8:	mov	r4, r0
   143ac:	cmp	r0, #0
   143b0:	beq	143c8 <__assert_fail@plt+0x357c>
   143b4:	mov	r0, r4
   143b8:	bl	10d5c <__freading@plt>
   143bc:	cmp	r0, #0
   143c0:	movne	r0, r4
   143c4:	blne	143d4 <__assert_fail@plt+0x3588>
   143c8:	mov	r0, r4
   143cc:	pop	{r4, sl, fp, lr}
   143d0:	b	10c6c <fflush@plt>
   143d4:	ldrb	r1, [r0, #1]
   143d8:	tst	r1, #1
   143dc:	bxeq	lr
   143e0:	push	{fp, lr}
   143e4:	mov	fp, sp
   143e8:	sub	sp, sp, #8
   143ec:	mov	r1, #1
   143f0:	str	r1, [sp]
   143f4:	mov	r2, #0
   143f8:	mov	r3, #0
   143fc:	bl	14430 <__assert_fail@plt+0x35e4>
   14400:	mov	sp, fp
   14404:	pop	{fp, pc}
   14408:	push	{r4, r5, r6, sl, fp, lr}
   1440c:	add	fp, sp, #16
   14410:	mov	r4, r0
   14414:	bl	10d98 <__errno_location@plt>
   14418:	mov	r5, r0
   1441c:	ldr	r6, [r0]
   14420:	mov	r0, r4
   14424:	bl	10c78 <free@plt>
   14428:	str	r6, [r5]
   1442c:	pop	{r4, r5, r6, sl, fp, pc}
   14430:	push	{r4, r5, r6, r7, fp, lr}
   14434:	add	fp, sp, #16
   14438:	sub	sp, sp, #8
   1443c:	mov	r5, r3
   14440:	mov	r6, r2
   14444:	mov	r4, r0
   14448:	ldr	r0, [r0, #4]
   1444c:	ldr	r1, [r4, #8]
   14450:	cmp	r1, r0
   14454:	bne	14470 <__assert_fail@plt+0x3624>
   14458:	ldrd	r0, [r4, #16]
   1445c:	cmp	r1, r0
   14460:	bne	14470 <__assert_fail@plt+0x3624>
   14464:	ldr	r0, [r4, #36]	; 0x24
   14468:	cmp	r0, #0
   1446c:	beq	14488 <__assert_fail@plt+0x363c>
   14470:	mov	r0, r4
   14474:	mov	r2, r6
   14478:	mov	r3, r5
   1447c:	sub	sp, fp, #16
   14480:	pop	{r4, r5, r6, r7, fp, lr}
   14484:	b	10dec <fseeko64@plt>
   14488:	ldr	r7, [fp, #8]
   1448c:	mov	r0, r4
   14490:	bl	10dc8 <fileno@plt>
   14494:	str	r7, [sp]
   14498:	mov	r2, r6
   1449c:	mov	r3, r5
   144a0:	bl	10cf0 <lseek64@plt>
   144a4:	and	r2, r0, r1
   144a8:	cmn	r2, #1
   144ac:	mvneq	r0, #0
   144b0:	subeq	sp, fp, #16
   144b4:	popeq	{r4, r5, r6, r7, fp, pc}
   144b8:	strd	r0, [r4, #80]	; 0x50
   144bc:	ldr	r0, [r4]
   144c0:	bic	r0, r0, #16
   144c4:	str	r0, [r4]
   144c8:	mov	r0, #0
   144cc:	sub	sp, fp, #16
   144d0:	pop	{r4, r5, r6, r7, fp, pc}
   144d4:	push	{fp, lr}
   144d8:	mov	fp, sp
   144dc:	bl	10d98 <__errno_location@plt>
   144e0:	mov	r1, #12
   144e4:	str	r1, [r0]
   144e8:	mov	r0, #0
   144ec:	pop	{fp, pc}
   144f0:	b	13ed0 <__assert_fail@plt+0x3084>
   144f4:	cmp	r1, #0
   144f8:	orreq	r1, r1, #1
   144fc:	b	13f00 <__assert_fail@plt+0x30b4>
   14500:	b	13e7c <__assert_fail@plt+0x3030>
   14504:	clz	r3, r2
   14508:	lsr	ip, r3, #5
   1450c:	clz	r3, r1
   14510:	lsr	r3, r3, #5
   14514:	orrs	r3, r3, ip
   14518:	movwne	r1, #1
   1451c:	movwne	r2, #1
   14520:	b	145bc <__assert_fail@plt+0x3770>
   14524:	push	{fp, lr}
   14528:	mov	fp, sp
   1452c:	mov	r0, #14
   14530:	bl	10e10 <nl_langinfo@plt>
   14534:	movw	r1, #18815	; 0x497f
   14538:	movt	r1, #1
   1453c:	cmp	r0, #0
   14540:	movne	r1, r0
   14544:	ldrb	r2, [r1]
   14548:	movw	r0, #21005	; 0x520d
   1454c:	movt	r0, #1
   14550:	cmp	r2, #0
   14554:	movne	r0, r1
   14558:	pop	{fp, pc}
   1455c:	push	{r4, r5, r6, r7, fp, lr}
   14560:	add	fp, sp, #16
   14564:	sub	sp, sp, #8
   14568:	mov	r7, r2
   1456c:	mov	r4, r1
   14570:	add	r5, sp, #4
   14574:	cmp	r0, #0
   14578:	movne	r5, r0
   1457c:	mov	r0, r5
   14580:	bl	10d20 <mbrtowc@plt>
   14584:	mov	r6, r0
   14588:	cmp	r7, #0
   1458c:	beq	145b0 <__assert_fail@plt+0x3764>
   14590:	cmn	r6, #2
   14594:	bcc	145b0 <__assert_fail@plt+0x3764>
   14598:	mov	r0, #0
   1459c:	bl	145f8 <__assert_fail@plt+0x37ac>
   145a0:	cmp	r0, #0
   145a4:	ldrbeq	r0, [r4]
   145a8:	streq	r0, [r5]
   145ac:	moveq	r6, #1
   145b0:	mov	r0, r6
   145b4:	sub	sp, fp, #16
   145b8:	pop	{r4, r5, r6, r7, fp, pc}
   145bc:	cmp	r2, #0
   145c0:	beq	145f0 <__assert_fail@plt+0x37a4>
   145c4:	mvn	r3, #0
   145c8:	udiv	r3, r3, r2
   145cc:	cmp	r3, r1
   145d0:	bcs	145f0 <__assert_fail@plt+0x37a4>
   145d4:	push	{fp, lr}
   145d8:	mov	fp, sp
   145dc:	bl	10d98 <__errno_location@plt>
   145e0:	mov	r1, #12
   145e4:	str	r1, [r0]
   145e8:	mov	r0, #0
   145ec:	pop	{fp, pc}
   145f0:	mul	r1, r2, r1
   145f4:	b	13f00 <__assert_fail@plt+0x30b4>
   145f8:	push	{r4, sl, fp, lr}
   145fc:	add	fp, sp, #8
   14600:	sub	sp, sp, #264	; 0x108
   14604:	add	r1, sp, #7
   14608:	movw	r2, #257	; 0x101
   1460c:	bl	1465c <__assert_fail@plt+0x3810>
   14610:	mov	r4, #0
   14614:	cmp	r0, #0
   14618:	bne	14650 <__assert_fail@plt+0x3804>
   1461c:	add	r0, sp, #7
   14620:	movw	r1, #21011	; 0x5213
   14624:	movt	r1, #1
   14628:	bl	10c60 <strcmp@plt>
   1462c:	cmp	r0, #0
   14630:	beq	14650 <__assert_fail@plt+0x3804>
   14634:	add	r0, sp, #7
   14638:	movw	r1, #21013	; 0x5215
   1463c:	movt	r1, #1
   14640:	bl	10c60 <strcmp@plt>
   14644:	mov	r4, r0
   14648:	cmp	r0, #0
   1464c:	movwne	r4, #1
   14650:	mov	r0, r4
   14654:	sub	sp, fp, #8
   14658:	pop	{r4, sl, fp, pc}
   1465c:	b	14660 <__assert_fail@plt+0x3814>
   14660:	push	{r4, r5, r6, r7, fp, lr}
   14664:	add	fp, sp, #16
   14668:	mov	r6, r2
   1466c:	mov	r4, r1
   14670:	bl	146fc <__assert_fail@plt+0x38b0>
   14674:	cmp	r0, #0
   14678:	beq	146a8 <__assert_fail@plt+0x385c>
   1467c:	mov	r7, r0
   14680:	bl	10d8c <strlen@plt>
   14684:	cmp	r0, r6
   14688:	bcs	146c8 <__assert_fail@plt+0x387c>
   1468c:	add	r2, r0, #1
   14690:	mov	r0, r4
   14694:	mov	r1, r7
   14698:	bl	10c90 <memcpy@plt>
   1469c:	mov	r5, #0
   146a0:	mov	r0, r5
   146a4:	pop	{r4, r5, r6, r7, fp, pc}
   146a8:	mov	r5, #22
   146ac:	cmp	r6, #0
   146b0:	movne	r0, #0
   146b4:	strbne	r0, [r4]
   146b8:	movne	r0, r5
   146bc:	popne	{r4, r5, r6, r7, fp, pc}
   146c0:	mov	r0, r5
   146c4:	pop	{r4, r5, r6, r7, fp, pc}
   146c8:	mov	r5, #34	; 0x22
   146cc:	cmp	r6, #0
   146d0:	beq	146f0 <__assert_fail@plt+0x38a4>
   146d4:	sub	r6, r6, #1
   146d8:	mov	r0, r4
   146dc:	mov	r1, r7
   146e0:	mov	r2, r6
   146e4:	bl	10c90 <memcpy@plt>
   146e8:	mov	r0, #0
   146ec:	strb	r0, [r4, r6]
   146f0:	mov	r0, r5
   146f4:	pop	{r4, r5, r6, r7, fp, pc}
   146f8:	b	146fc <__assert_fail@plt+0x38b0>
   146fc:	mov	r1, #0
   14700:	b	10df8 <setlocale@plt>
   14704:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14708:	mov	r7, r0
   1470c:	ldr	r6, [pc, #72]	; 1475c <__assert_fail@plt+0x3910>
   14710:	ldr	r5, [pc, #72]	; 14760 <__assert_fail@plt+0x3914>
   14714:	add	r6, pc, r6
   14718:	add	r5, pc, r5
   1471c:	sub	r6, r6, r5
   14720:	mov	r8, r1
   14724:	mov	r9, r2
   14728:	bl	10c28 <calloc@plt-0x20>
   1472c:	asrs	r6, r6, #2
   14730:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14734:	mov	r4, #0
   14738:	add	r4, r4, #1
   1473c:	ldr	r3, [r5], #4
   14740:	mov	r2, r9
   14744:	mov	r1, r8
   14748:	mov	r0, r7
   1474c:	blx	r3
   14750:	cmp	r6, r4
   14754:	bne	14738 <__assert_fail@plt+0x38ec>
   14758:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1475c:	strdeq	r1, [r1], -r0
   14760:	andeq	r1, r1, r8, ror #15
   14764:	bx	lr
   14768:	ldr	r3, [pc, #12]	; 1477c <__assert_fail@plt+0x3930>
   1476c:	mov	r1, #0
   14770:	add	r3, pc, r3
   14774:	ldr	r2, [r3]
   14778:	b	10da4 <__cxa_atexit@plt>
   1477c:	andeq	r1, r1, ip, asr #18

Disassembly of section .fini:

00014780 <.fini>:
   14780:	push	{r3, lr}
   14784:	pop	{r3, pc}
