
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e74 <.init>:
   10e74:	push	{r3, lr}
   10e78:	bl	11164 <__assert_fail@plt+0x48>
   10e7c:	pop	{r3, pc}

Disassembly of section .plt:

00010e80 <calloc@plt-0x14>:
   10e80:	push	{lr}		; (str lr, [sp, #-4]!)
   10e84:	ldr	lr, [pc, #4]	; 10e90 <calloc@plt-0x4>
   10e88:	add	lr, pc, lr
   10e8c:	ldr	pc, [lr, #8]!
   10e90:	andeq	r6, r1, r0, ror r1

00010e94 <calloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #368]!	; 0x170

00010ea0 <fputs_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #360]!	; 0x168

00010eac <raise@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #352]!	; 0x160

00010eb8 <strcmp@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #344]!	; 0x158

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #336]!	; 0x150

00010ed0 <free@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #328]!	; 0x148

00010edc <_exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #320]!	; 0x140

00010ee8 <memcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #312]!	; 0x138

00010ef4 <execvp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #304]!	; 0x130

00010f00 <__strtoull_internal@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #296]!	; 0x128

00010f0c <mbsinit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #288]!	; 0x120

00010f18 <dcgettext@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #280]!	; 0x118

00010f24 <realloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #272]!	; 0x110

00010f30 <textdomain@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #264]!	; 0x108

00010f3c <iswprint@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #256]!	; 0x100

00010f48 <readlink@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #248]!	; 0xf8

00010f54 <fwrite@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #240]!	; 0xf0

00010f60 <lseek64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #232]!	; 0xe8

00010f6c <__ctype_get_mb_cur_max@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #224]!	; 0xe0

00010f78 <__fpending@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #216]!	; 0xd8

00010f84 <mbrtowc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #208]!	; 0xd0

00010f90 <error@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #200]!	; 0xc8

00010f9c <__asprintf_chk@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #192]!	; 0xc0

00010fa8 <getenv@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #184]!	; 0xb8

00010fb4 <malloc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #176]!	; 0xb0

00010fc0 <__libc_start_main@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #168]!	; 0xa8

00010fcc <__freading@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #160]!	; 0xa0

00010fd8 <__ctype_toupper_loc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #152]!	; 0x98

00010fe4 <__gmon_start__@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #144]!	; 0x90

00010ff0 <getopt_long@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #136]!	; 0x88

00010ffc <__ctype_b_loc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #128]!	; 0x80

00011008 <exit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #120]!	; 0x78

00011014 <bcmp@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #112]!	; 0x70

00011020 <strlen@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #104]!	; 0x68

0001102c <strchr@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #96]!	; 0x60

00011038 <__errno_location@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #88]!	; 0x58

00011044 <__cxa_atexit@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #80]!	; 0x50

00011050 <memset@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #72]!	; 0x48

0001105c <__printf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #64]!	; 0x40

00011068 <fileno@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #56]!	; 0x38

00011074 <__fprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #48]!	; 0x30

00011080 <access@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #40]!	; 0x28

0001108c <fclose@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #32]!

00011098 <fseeko64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #24]!

000110a4 <strtok@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #16]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #8]!

000110bc <putenv@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #0]!

000110c8 <strrchr@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #4088]!	; 0xff8

000110d4 <nl_langinfo@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #4080]!	; 0xff0

000110e0 <bindtextdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ec <__xstat64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110f8 <strncmp@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #4056]!	; 0xfd8

00011104 <abort@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011110 <__mempcpy_chk@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #4040]!	; 0xfc8

0001111c <__assert_fail@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #4032]!	; 0xfc0

Disassembly of section .text:

00011128 <.text>:
   11128:	mov	fp, #0
   1112c:	mov	lr, #0
   11130:	pop	{r1}		; (ldr r1, [sp], #4)
   11134:	mov	r2, sp
   11138:	push	{r2}		; (str r2, [sp, #-4]!)
   1113c:	push	{r0}		; (str r0, [sp, #-4]!)
   11140:	ldr	ip, [pc, #16]	; 11158 <__assert_fail@plt+0x3c>
   11144:	push	{ip}		; (str ip, [sp, #-4]!)
   11148:	ldr	r0, [pc, #12]	; 1115c <__assert_fail@plt+0x40>
   1114c:	ldr	r3, [pc, #12]	; 11160 <__assert_fail@plt+0x44>
   11150:	bl	10fc0 <__libc_start_main@plt>
   11154:	bl	11104 <abort@plt>
   11158:			; <UNDEFINED> instruction: 0x00015eb0
   1115c:	andeq	r1, r1, r4, lsl #10
   11160:	andeq	r5, r1, r0, asr lr
   11164:	ldr	r3, [pc, #20]	; 11180 <__assert_fail@plt+0x64>
   11168:	ldr	r2, [pc, #20]	; 11184 <__assert_fail@plt+0x68>
   1116c:	add	r3, pc, r3
   11170:	ldr	r2, [r3, r2]
   11174:	cmp	r2, #0
   11178:	bxeq	lr
   1117c:	b	10fe4 <__gmon_start__@plt>
   11180:	andeq	r5, r1, ip, lsl #29
   11184:	andeq	r0, r0, r8, ror #1
   11188:	ldr	r0, [pc, #24]	; 111a8 <__assert_fail@plt+0x8c>
   1118c:	ldr	r3, [pc, #24]	; 111ac <__assert_fail@plt+0x90>
   11190:	cmp	r3, r0
   11194:	bxeq	lr
   11198:	ldr	r3, [pc, #16]	; 111b0 <__assert_fail@plt+0x94>
   1119c:	cmp	r3, #0
   111a0:	bxeq	lr
   111a4:	bx	r3
   111a8:	andeq	r7, r2, r0, asr #2
   111ac:	andeq	r7, r2, r0, asr #2
   111b0:	andeq	r0, r0, r0
   111b4:	ldr	r0, [pc, #36]	; 111e0 <__assert_fail@plt+0xc4>
   111b8:	ldr	r1, [pc, #36]	; 111e4 <__assert_fail@plt+0xc8>
   111bc:	sub	r1, r1, r0
   111c0:	asr	r1, r1, #2
   111c4:	add	r1, r1, r1, lsr #31
   111c8:	asrs	r1, r1, #1
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0xcc>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r7, r2, r0, asr #2
   111e4:	andeq	r7, r2, r0, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	push	{r4, lr}
   111f0:	ldr	r4, [pc, #24]	; 11210 <__assert_fail@plt+0xf4>
   111f4:	ldrb	r3, [r4]
   111f8:	cmp	r3, #0
   111fc:	popne	{r4, pc}
   11200:	bl	11188 <__assert_fail@plt+0x6c>
   11204:	mov	r3, #1
   11208:	strb	r3, [r4]
   1120c:	pop	{r4, pc}
   11210:	andeq	r7, r2, ip, asr r1
   11214:	b	111b4 <__assert_fail@plt+0x98>
   11218:	push	{fp, lr}
   1121c:	mov	fp, sp
   11220:	sub	sp, sp, #56	; 0x38
   11224:	mov	r4, r0
   11228:	cmp	r0, #0
   1122c:	bne	114c0 <__assert_fail@plt+0x3a4>
   11230:	movw	r1, #24323	; 0x5f03
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10f18 <dcgettext@plt>
   11244:	mov	r1, r0
   11248:	movw	r0, #29072	; 0x7190
   1124c:	movt	r0, #2
   11250:	ldr	r2, [r0]
   11254:	mov	r0, #1
   11258:	bl	1105c <__printf_chk@plt>
   1125c:	movw	r1, #24352	; 0x5f20
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10f18 <dcgettext@plt>
   11270:	movw	r7, #29012	; 0x7154
   11274:	movt	r7, #2
   11278:	ldr	r1, [r7]
   1127c:	bl	10ea0 <fputs_unlocked@plt>
   11280:	movw	r1, #25684	; 0x6454
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10f18 <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10ea0 <fputs_unlocked@plt>
   1129c:	movw	r1, #24427	; 0x5f6b
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10f18 <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ea0 <fputs_unlocked@plt>
   112b8:	movw	r1, #24609	; 0x6021
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f18 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ea0 <fputs_unlocked@plt>
   112d4:	movw	r1, #24654	; 0x604e
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f18 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ea0 <fputs_unlocked@plt>
   112f0:	movw	r1, #24708	; 0x6084
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f18 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ea0 <fputs_unlocked@plt>
   1130c:	movw	r1, #24817	; 0x60f1
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f18 <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ea0 <fputs_unlocked@plt>
   11328:	movw	r1, #24879	; 0x612f
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f18 <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ea0 <fputs_unlocked@plt>
   11344:	movw	r1, #25191	; 0x6267
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f18 <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ea0 <fputs_unlocked@plt>
   11360:	movw	r0, #26384	; 0x6710
   11364:	mov	r2, #48	; 0x30
   11368:	mov	r6, sp
   1136c:	movw	r5, #25458	; 0x6372
   11370:	movt	r0, #1
   11374:	movt	r5, #1
   11378:	add	r1, r0, #32
   1137c:	add	r3, r0, #16
   11380:	vld1.64	{d18-d19}, [r0], r2
   11384:	vld1.64	{d16-d17}, [r1]
   11388:	vld1.64	{d20-d21}, [r3]
   1138c:	vldr	d22, [r0]
   11390:	add	r1, r6, #32
   11394:	add	r0, r6, #16
   11398:	vst1.64	{d16-d17}, [r1]
   1139c:	movw	r1, #25759	; 0x649f
   113a0:	vst1.64	{d20-d21}, [r0]
   113a4:	mov	r0, r6
   113a8:	movt	r1, #1
   113ac:	vst1.64	{d18-d19}, [r0], r2
   113b0:	vstr	d22, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10eb8 <strcmp@plt>
   113bc:	cmp	r0, #0
   113c0:	ldrne	r1, [r6, #8]!
   113c4:	cmpne	r1, #0
   113c8:	bne	113b4 <__assert_fail@plt+0x298>
   113cc:	movw	r1, #25854	; 0x64fe
   113d0:	ldr	r6, [r6, #4]
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f18 <dcgettext@plt>
   113e4:	movw	r2, #25549	; 0x63cd
   113e8:	movw	r3, #25877	; 0x6515
   113ec:	mov	r1, r0
   113f0:	mov	r0, #1
   113f4:	movt	r2, #1
   113f8:	movt	r3, #1
   113fc:	bl	1105c <__printf_chk@plt>
   11400:	cmp	r6, #0
   11404:	mov	r0, #5
   11408:	mov	r1, #0
   1140c:	moveq	r6, r5
   11410:	bl	110b0 <setlocale@plt>
   11414:	cmp	r0, #0
   11418:	beq	11450 <__assert_fail@plt+0x334>
   1141c:	movw	r1, #25917	; 0x653d
   11420:	mov	r2, #3
   11424:	movt	r1, #1
   11428:	bl	110f8 <strncmp@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11450 <__assert_fail@plt+0x334>
   11434:	movw	r1, #25921	; 0x6541
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10f18 <dcgettext@plt>
   11448:	ldr	r1, [r7]
   1144c:	bl	10ea0 <fputs_unlocked@plt>
   11450:	movw	r1, #25992	; 0x6588
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	movt	r1, #1
   11460:	bl	10f18 <dcgettext@plt>
   11464:	movw	r2, #25877	; 0x6515
   11468:	mov	r1, r0
   1146c:	mov	r0, #1
   11470:	mov	r3, r5
   11474:	movt	r2, #1
   11478:	bl	1105c <__printf_chk@plt>
   1147c:	movw	r1, #26019	; 0x65a3
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	10f18 <dcgettext@plt>
   11490:	mov	r1, r0
   11494:	movw	r0, #25787	; 0x64bb
   11498:	movw	r3, #26069	; 0x65d5
   1149c:	cmp	r6, r5
   114a0:	mov	r2, r6
   114a4:	movt	r0, #1
   114a8:	movt	r3, #1
   114ac:	moveq	r3, r0
   114b0:	mov	r0, #1
   114b4:	bl	1105c <__printf_chk@plt>
   114b8:	mov	r0, r4
   114bc:	bl	11008 <exit@plt>
   114c0:	movw	r0, #29008	; 0x7150
   114c4:	movw	r1, #24284	; 0x5edc
   114c8:	mov	r2, #5
   114cc:	movt	r0, #2
   114d0:	movt	r1, #1
   114d4:	ldr	r5, [r0]
   114d8:	mov	r0, #0
   114dc:	bl	10f18 <dcgettext@plt>
   114e0:	mov	r2, r0
   114e4:	movw	r0, #29072	; 0x7190
   114e8:	mov	r1, #1
   114ec:	movt	r0, #2
   114f0:	ldr	r3, [r0]
   114f4:	mov	r0, r5
   114f8:	bl	11074 <__fprintf_chk@plt>
   114fc:	mov	r0, r4
   11500:	bl	11008 <exit@plt>
   11504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11508:	add	fp, sp, #28
   1150c:	sub	sp, sp, #148	; 0x94
   11510:	mov	r5, r0
   11514:	ldr	r0, [r1]
   11518:	mov	r4, r1
   1151c:	bl	11ec8 <__assert_fail@plt+0xdac>
   11520:	movw	r1, #26069	; 0x65d5
   11524:	mov	r0, #6
   11528:	movt	r1, #1
   1152c:	bl	110b0 <setlocale@plt>
   11530:	movw	r6, #25553	; 0x63d1
   11534:	movw	r1, #25465	; 0x6379
   11538:	movt	r6, #1
   1153c:	movt	r1, #1
   11540:	mov	r0, r6
   11544:	bl	110e0 <bindtextdomain@plt>
   11548:	mov	r0, r6
   1154c:	bl	10f30 <textdomain@plt>
   11550:	movw	r0, #28924	; 0x70fc
   11554:	mov	r1, #125	; 0x7d
   11558:	movt	r0, #2
   1155c:	str	r1, [r0]
   11560:	movw	r0, #7116	; 0x1bcc
   11564:	movt	r0, #1
   11568:	bl	15eb4 <__assert_fail@plt+0x4d98>
   1156c:	movw	r9, #29024	; 0x7160
   11570:	movw	r8, #29016	; 0x7158
   11574:	mov	sl, #0
   11578:	movt	r9, #2
   1157c:	movt	r8, #2
   11580:	movw	r2, #25489	; 0x6391
   11584:	movw	r3, #26288	; 0x66b0
   11588:	mov	r0, r5
   1158c:	mov	r1, r4
   11590:	str	sl, [sp]
   11594:	movt	r2, #1
   11598:	movt	r3, #1
   1159c:	bl	10ff0 <getopt_long@plt>
   115a0:	cmp	r0, #100	; 0x64
   115a4:	ble	1168c <__assert_fail@plt+0x570>
   115a8:	cmp	r0, #101	; 0x65
   115ac:	beq	115c0 <__assert_fail@plt+0x4a4>
   115b0:	cmp	r0, #111	; 0x6f
   115b4:	bne	115c8 <__assert_fail@plt+0x4ac>
   115b8:	mov	r1, #1
   115bc:	b	115d4 <__assert_fail@plt+0x4b8>
   115c0:	mov	r1, #2
   115c4:	b	115d4 <__assert_fail@plt+0x4b8>
   115c8:	cmp	r0, #105	; 0x69
   115cc:	bne	11b3c <__assert_fail@plt+0xa20>
   115d0:	mov	r1, #0
   115d4:	add	r7, r1, r1, lsl #1
   115d8:	ldr	r6, [r8]
   115dc:	add	r1, r9, r7, lsl #2
   115e0:	str	r0, [r1, #4]
   115e4:	b	115f0 <__assert_fail@plt+0x4d4>
   115e8:	add	r6, r6, #1
   115ec:	str	r6, [r8]
   115f0:	ldrb	r2, [r6]
   115f4:	sub	r3, r2, #9
   115f8:	cmp	r3, #5
   115fc:	bcc	115e8 <__assert_fail@plt+0x4cc>
   11600:	cmp	r2, #32
   11604:	beq	115e8 <__assert_fail@plt+0x4cc>
   11608:	cmp	r0, #105	; 0x69
   1160c:	str	r6, [r1, #8]
   11610:	bne	11620 <__assert_fail@plt+0x504>
   11614:	ldrb	r0, [r6]
   11618:	cmp	r0, #76	; 0x4c
   1161c:	beq	11b1c <__assert_fail@plt+0xa00>
   11620:	movw	r1, #26112	; 0x6600
   11624:	mov	r0, r6
   11628:	movt	r1, #1
   1162c:	bl	10eb8 <strcmp@plt>
   11630:	cmp	r0, #0
   11634:	beq	11580 <__assert_fail@plt+0x464>
   11638:	movw	r0, #26096	; 0x65f0
   1163c:	mov	r1, #0
   11640:	mov	r2, #10
   11644:	add	r3, sp, #24
   11648:	movt	r0, #1
   1164c:	str	r0, [sp]
   11650:	mov	r0, r6
   11654:	bl	148d4 <__assert_fail@plt+0x37b8>
   11658:	ldr	r1, [sp, #28]
   1165c:	cmp	r1, #0
   11660:	mov	r1, r0
   11664:	movwne	r1, #1
   11668:	cmp	r0, #0
   1166c:	movne	r1, r0
   11670:	cmp	r1, #0
   11674:	bne	11b28 <__assert_fail@plt+0xa0c>
   11678:	ldr	r6, [sp, #24]
   1167c:	bl	11038 <__errno_location@plt>
   11680:	str	sl, [r0]
   11684:	str	r6, [r9, r7, lsl #2]
   11688:	b	11580 <__assert_fail@plt+0x464>
   1168c:	cmn	r0, #1
   11690:	bne	11abc <__assert_fail@plt+0x9a0>
   11694:	movw	r0, #29000	; 0x7148
   11698:	movt	r0, #2
   1169c:	ldr	r0, [r0]
   116a0:	cmp	r0, r5
   116a4:	bge	11b44 <__assert_fail@plt+0xa28>
   116a8:	add	r0, r4, r0, lsl #2
   116ac:	movw	r6, #26107	; 0x65fb
   116b0:	movw	r7, #26114	; 0x6602
   116b4:	movw	r4, #26123	; 0x660b
   116b8:	add	r5, sp, #24
   116bc:	mov	r8, #0
   116c0:	movt	r6, #1
   116c4:	movt	r7, #1
   116c8:	movt	r4, #1
   116cc:	str	r0, [sp, #20]
   116d0:	mov	r0, #0
   116d4:	b	116e4 <__assert_fail@plt+0x5c8>
   116d8:	add	r8, r8, #12
   116dc:	cmp	r8, #36	; 0x24
   116e0:	beq	11790 <__assert_fail@plt+0x674>
   116e4:	add	r2, r9, r8
   116e8:	ldr	r1, [r2, #8]
   116ec:	cmp	r1, #0
   116f0:	beq	116d8 <__assert_fail@plt+0x5bc>
   116f4:	ldr	sl, [r2, #4]
   116f8:	ldrb	r1, [r1]
   116fc:	add	r0, sl, #128	; 0x80
   11700:	cmp	r1, #76	; 0x4c
   11704:	lsr	r0, r0, #7
   11708:	bne	11734 <__assert_fail@plt+0x618>
   1170c:	cmp	r0, #2
   11710:	bhi	11720 <__assert_fail@plt+0x604>
   11714:	bl	10fd8 <__ctype_toupper_loc@plt>
   11718:	ldr	r0, [r0]
   1171c:	ldr	sl, [r0, sl, lsl #2]
   11720:	str	sl, [sp]
   11724:	mov	r0, r5
   11728:	mov	r1, #1
   1172c:	mov	r2, r6
   11730:	b	11768 <__assert_fail@plt+0x64c>
   11734:	cmp	r0, #2
   11738:	bhi	11748 <__assert_fail@plt+0x62c>
   1173c:	bl	10fd8 <__ctype_toupper_loc@plt>
   11740:	ldr	r0, [r0]
   11744:	ldr	sl, [r0, sl, lsl #2]
   11748:	ldr	r0, [r9, r8]
   1174c:	mov	r1, #1
   11750:	mov	r2, r4
   11754:	str	sl, [sp]
   11758:	str	r0, [sp, #8]
   1175c:	mov	r0, #0
   11760:	str	r0, [sp, #12]
   11764:	mov	r0, r5
   11768:	mov	r3, r7
   1176c:	bl	10f9c <__asprintf_chk@plt>
   11770:	cmn	r0, #1
   11774:	ble	11a44 <__assert_fail@plt+0x928>
   11778:	ldr	r0, [sp, #24]
   1177c:	bl	110bc <putenv@plt>
   11780:	cmp	r0, #0
   11784:	bne	11a48 <__assert_fail@plt+0x92c>
   11788:	mov	r0, #1
   1178c:	b	116d8 <__assert_fail@plt+0x5bc>
   11790:	tst	r0, #1
   11794:	beq	11b50 <__assert_fail@plt+0xa34>
   11798:	movw	r0, #29072	; 0x7190
   1179c:	mov	r1, #47	; 0x2f
   117a0:	movt	r0, #2
   117a4:	ldr	r4, [r0]
   117a8:	mov	r0, r4
   117ac:	bl	1102c <strchr@plt>
   117b0:	movw	r6, #29060	; 0x7184
   117b4:	cmp	r0, #0
   117b8:	movt	r6, #2
   117bc:	beq	117d4 <__assert_fail@plt+0x6b8>
   117c0:	mov	r0, r4
   117c4:	bl	11cb4 <__assert_fail@plt+0xb98>
   117c8:	mov	r5, r0
   117cc:	str	r0, [r6]
   117d0:	b	11808 <__assert_fail@plt+0x6ec>
   117d4:	movw	r0, #26174	; 0x663e
   117d8:	movt	r0, #1
   117dc:	bl	148a0 <__assert_fail@plt+0x3784>
   117e0:	cmp	r0, #0
   117e4:	beq	1199c <__assert_fail@plt+0x880>
   117e8:	mov	r5, r0
   117ec:	bl	11cb4 <__assert_fail@plt+0xb98>
   117f0:	str	r0, [r6]
   117f4:	mov	r0, r5
   117f8:	bl	11ea0 <__assert_fail@plt+0xd84>
   117fc:	ldr	r5, [r6]
   11800:	cmp	r5, #0
   11804:	beq	11a14 <__assert_fail@plt+0x8f8>
   11808:	movw	r0, #26194	; 0x6652
   1180c:	movt	r0, #1
   11810:	bl	10fa8 <getenv@plt>
   11814:	mov	r9, r0
   11818:	mov	r0, #0
   1181c:	str	r0, [fp, #-32]	; 0xffffffe0
   11820:	movw	r0, #26205	; 0x665d
   11824:	movt	r0, #1
   11828:	str	r0, [fp, #-36]	; 0xffffffdc
   1182c:	str	r5, [fp, #-40]	; 0xffffffd8
   11830:	ldrb	r0, [r5]
   11834:	cmp	r0, #0
   11838:	beq	118bc <__assert_fail@plt+0x7a0>
   1183c:	movw	sl, #26234	; 0x667a
   11840:	movw	r7, #26247	; 0x6687
   11844:	sub	r0, fp, #40	; 0x28
   11848:	sub	r8, fp, #44	; 0x2c
   1184c:	add	r4, sp, #24
   11850:	movt	sl, #1
   11854:	movt	r7, #1
   11858:	add	r6, r0, #4
   1185c:	mov	r0, r8
   11860:	mov	r1, #1
   11864:	mov	r2, r7
   11868:	mov	r3, r5
   1186c:	str	sl, [sp]
   11870:	bl	10f9c <__asprintf_chk@plt>
   11874:	cmn	r0, #1
   11878:	ble	11a44 <__assert_fail@plt+0x928>
   1187c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11880:	mov	r0, #3
   11884:	mov	r2, r4
   11888:	bl	110ec <__xstat64@plt>
   1188c:	mov	r1, r0
   11890:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11894:	cmp	r1, #0
   11898:	beq	118cc <__assert_fail@plt+0x7b0>
   1189c:	bl	11ea0 <__assert_fail@plt+0xd84>
   118a0:	ldr	r0, [r6]
   118a4:	cmp	r0, #0
   118a8:	beq	11a84 <__assert_fail@plt+0x968>
   118ac:	ldr	r5, [r6], #4
   118b0:	ldrb	r0, [r5]
   118b4:	cmp	r0, #0
   118b8:	bne	1185c <__assert_fail@plt+0x740>
   118bc:	movw	r0, #26234	; 0x667a
   118c0:	movt	r0, #1
   118c4:	bl	14824 <__assert_fail@plt+0x3708>
   118c8:	str	r0, [fp, #-44]	; 0xffffffd4
   118cc:	cmp	r9, #0
   118d0:	beq	118ec <__assert_fail@plt+0x7d0>
   118d4:	movw	r2, #26271	; 0x669f
   118d8:	str	r0, [sp, #4]
   118dc:	str	r9, [sp]
   118e0:	add	r0, sp, #24
   118e4:	movt	r2, #1
   118e8:	b	118fc <__assert_fail@plt+0x7e0>
   118ec:	movw	r2, #26280	; 0x66a8
   118f0:	str	r0, [sp]
   118f4:	add	r0, sp, #24
   118f8:	movt	r2, #1
   118fc:	movw	r3, #26194	; 0x6652
   11900:	mov	r1, #1
   11904:	movt	r3, #1
   11908:	bl	10f9c <__asprintf_chk@plt>
   1190c:	movw	r4, #29060	; 0x7184
   11910:	cmn	r0, #1
   11914:	movt	r4, #2
   11918:	ble	11a44 <__assert_fail@plt+0x928>
   1191c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11920:	bl	11ea0 <__assert_fail@plt+0xd84>
   11924:	ldr	r0, [sp, #24]
   11928:	bl	110bc <putenv@plt>
   1192c:	cmp	r0, #0
   11930:	bne	11a48 <__assert_fail@plt+0x92c>
   11934:	ldr	r0, [r4]
   11938:	bl	11ea0 <__assert_fail@plt+0xd84>
   1193c:	ldr	r6, [sp, #20]
   11940:	ldr	r0, [r6]
   11944:	mov	r1, r6
   11948:	bl	10ef4 <execvp@plt>
   1194c:	bl	11038 <__errno_location@plt>
   11950:	movw	r1, #25659	; 0x643b
   11954:	ldr	r4, [r0]
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #1
   11964:	bl	10f18 <dcgettext@plt>
   11968:	mov	r5, r0
   1196c:	ldr	r0, [r6]
   11970:	bl	13b1c <__assert_fail@plt+0x2a00>
   11974:	mov	r3, r0
   11978:	mov	r0, #0
   1197c:	mov	r1, r4
   11980:	mov	r2, r5
   11984:	bl	10f90 <error@plt>
   11988:	cmp	r4, #2
   1198c:	mov	r0, #126	; 0x7e
   11990:	movweq	r0, #127	; 0x7f
   11994:	sub	sp, fp, #28
   11998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	movw	r0, #26189	; 0x664d
   119a0:	movt	r0, #1
   119a4:	bl	10fa8 <getenv@plt>
   119a8:	cmp	r0, #0
   119ac:	beq	11a24 <__assert_fail@plt+0x908>
   119b0:	bl	14824 <__assert_fail@plt+0x3708>
   119b4:	movw	r1, #25495	; 0x6397
   119b8:	mov	r5, r0
   119bc:	movt	r1, #1
   119c0:	bl	110a4 <strtok@plt>
   119c4:	cmp	r0, #0
   119c8:	beq	117f4 <__assert_fail@plt+0x6d8>
   119cc:	movw	r8, #25495	; 0x6397
   119d0:	movt	r8, #1
   119d4:	mov	r1, r4
   119d8:	mov	r2, #0
   119dc:	bl	11da8 <__assert_fail@plt+0xc8c>
   119e0:	mov	r1, #1
   119e4:	mov	r7, r0
   119e8:	bl	11080 <access@plt>
   119ec:	cmp	r0, #0
   119f0:	beq	11a2c <__assert_fail@plt+0x910>
   119f4:	mov	r0, r7
   119f8:	bl	11ea0 <__assert_fail@plt+0xd84>
   119fc:	mov	r0, #0
   11a00:	mov	r1, r8
   11a04:	bl	110a4 <strtok@plt>
   11a08:	cmp	r0, #0
   11a0c:	bne	119d4 <__assert_fail@plt+0x8b8>
   11a10:	b	117f4 <__assert_fail@plt+0x6d8>
   11a14:	movw	r0, #25634	; 0x6422
   11a18:	movt	r0, #1
   11a1c:	bl	14824 <__assert_fail@plt+0x3708>
   11a20:	b	117c8 <__assert_fail@plt+0x6ac>
   11a24:	mov	r5, #0
   11a28:	b	117f4 <__assert_fail@plt+0x6d8>
   11a2c:	mov	r0, r7
   11a30:	bl	11cb4 <__assert_fail@plt+0xb98>
   11a34:	str	r0, [r6]
   11a38:	mov	r0, r7
   11a3c:	bl	11ea0 <__assert_fail@plt+0xd84>
   11a40:	b	117f4 <__assert_fail@plt+0x6d8>
   11a44:	bl	1485c <__assert_fail@plt+0x3740>
   11a48:	bl	11038 <__errno_location@plt>
   11a4c:	movw	r1, #26133	; 0x6615
   11a50:	ldr	r4, [r0]
   11a54:	mov	r0, #0
   11a58:	mov	r2, #5
   11a5c:	movt	r1, #1
   11a60:	bl	10f18 <dcgettext@plt>
   11a64:	mov	r5, r0
   11a68:	ldr	r0, [sp, #24]
   11a6c:	bl	13b1c <__assert_fail@plt+0x2a00>
   11a70:	mov	r3, r0
   11a74:	mov	r0, #125	; 0x7d
   11a78:	mov	r1, r4
   11a7c:	mov	r2, r5
   11a80:	bl	10f90 <error@plt>
   11a84:	movw	r1, #26253	; 0x668d
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	10f18 <dcgettext@plt>
   11a98:	mov	r4, r0
   11a9c:	movw	r0, #26234	; 0x667a
   11aa0:	movt	r0, #1
   11aa4:	bl	13b1c <__assert_fail@plt+0x2a00>
   11aa8:	mov	r3, r0
   11aac:	mov	r0, #125	; 0x7d
   11ab0:	mov	r1, #0
   11ab4:	mov	r2, r4
   11ab8:	bl	10f90 <error@plt>
   11abc:	cmn	r0, #3
   11ac0:	bne	11b0c <__assert_fail@plt+0x9f0>
   11ac4:	movw	r0, #28920	; 0x70f8
   11ac8:	movw	r2, #25563	; 0x63db
   11acc:	mov	r1, #0
   11ad0:	movt	r0, #2
   11ad4:	movt	r2, #1
   11ad8:	str	r1, [sp, #4]
   11adc:	movw	r1, #25458	; 0x6372
   11ae0:	movt	r1, #1
   11ae4:	ldr	r3, [r0]
   11ae8:	movw	r0, #29012	; 0x7154
   11aec:	str	r2, [sp]
   11af0:	movw	r2, #25549	; 0x63cd
   11af4:	movt	r0, #2
   11af8:	movt	r2, #1
   11afc:	ldr	r0, [r0]
   11b00:	bl	140ec <__assert_fail@plt+0x2fd0>
   11b04:	mov	r0, #0
   11b08:	bl	11008 <exit@plt>
   11b0c:	cmn	r0, #2
   11b10:	bne	11b3c <__assert_fail@plt+0xa20>
   11b14:	mov	r0, #0
   11b18:	bl	11218 <__assert_fail@plt+0xfc>
   11b1c:	movw	r1, #25497	; 0x6399
   11b20:	movt	r1, #1
   11b24:	b	11b58 <__assert_fail@plt+0xa3c>
   11b28:	cmp	r1, #1
   11b2c:	bne	11b7c <__assert_fail@plt+0xa60>
   11b30:	mov	r4, #75	; 0x4b
   11b34:	bl	11038 <__errno_location@plt>
   11b38:	b	11b84 <__assert_fail@plt+0xa68>
   11b3c:	mov	r0, #125	; 0x7d
   11b40:	bl	11218 <__assert_fail@plt+0xfc>
   11b44:	movw	r1, #25577	; 0x63e9
   11b48:	movt	r1, #1
   11b4c:	b	11b58 <__assert_fail@plt+0xa3c>
   11b50:	movw	r1, #25593	; 0x63f9
   11b54:	movt	r1, #1
   11b58:	mov	r0, #0
   11b5c:	mov	r2, #5
   11b60:	bl	10f18 <dcgettext@plt>
   11b64:	mov	r2, r0
   11b68:	mov	r0, #0
   11b6c:	mov	r1, #0
   11b70:	bl	10f90 <error@plt>
   11b74:	mov	r0, #125	; 0x7d
   11b78:	bl	11218 <__assert_fail@plt+0xfc>
   11b7c:	bl	11038 <__errno_location@plt>
   11b80:	ldr	r4, [r0]
   11b84:	str	r4, [r0]
   11b88:	movw	r1, #25533	; 0x63bd
   11b8c:	mov	r2, #5
   11b90:	ldr	r4, [r0]
   11b94:	movt	r1, #1
   11b98:	mov	r0, #0
   11b9c:	bl	10f18 <dcgettext@plt>
   11ba0:	mov	r5, r0
   11ba4:	ldr	r0, [r8]
   11ba8:	b	11a6c <__assert_fail@plt+0x950>
   11bac:	movw	r1, #29064	; 0x7188
   11bb0:	movt	r1, #2
   11bb4:	str	r0, [r1]
   11bb8:	bx	lr
   11bbc:	movw	r1, #29068	; 0x718c
   11bc0:	movt	r1, #2
   11bc4:	strb	r0, [r1]
   11bc8:	bx	lr
   11bcc:	push	{r4, r5, r6, sl, fp, lr}
   11bd0:	add	fp, sp, #16
   11bd4:	sub	sp, sp, #8
   11bd8:	movw	r0, #29012	; 0x7154
   11bdc:	movt	r0, #2
   11be0:	ldr	r0, [r0]
   11be4:	bl	158d4 <__assert_fail@plt+0x47b8>
   11be8:	cmp	r0, #0
   11bec:	beq	11c14 <__assert_fail@plt+0xaf8>
   11bf0:	movw	r0, #29068	; 0x718c
   11bf4:	movt	r0, #2
   11bf8:	ldrb	r0, [r0]
   11bfc:	cmp	r0, #0
   11c00:	beq	11c34 <__assert_fail@plt+0xb18>
   11c04:	bl	11038 <__errno_location@plt>
   11c08:	ldr	r0, [r0]
   11c0c:	cmp	r0, #32
   11c10:	bne	11c34 <__assert_fail@plt+0xb18>
   11c14:	movw	r0, #29008	; 0x7150
   11c18:	movt	r0, #2
   11c1c:	ldr	r0, [r0]
   11c20:	bl	158d4 <__assert_fail@plt+0x47b8>
   11c24:	cmp	r0, #0
   11c28:	subeq	sp, fp, #16
   11c2c:	popeq	{r4, r5, r6, sl, fp, pc}
   11c30:	b	11ca4 <__assert_fail@plt+0xb88>
   11c34:	movw	r1, #26455	; 0x6757
   11c38:	mov	r0, #0
   11c3c:	mov	r2, #5
   11c40:	movt	r1, #1
   11c44:	bl	10f18 <dcgettext@plt>
   11c48:	mov	r4, r0
   11c4c:	movw	r0, #29064	; 0x7188
   11c50:	movt	r0, #2
   11c54:	ldr	r6, [r0]
   11c58:	bl	11038 <__errno_location@plt>
   11c5c:	ldr	r5, [r0]
   11c60:	cmp	r6, #0
   11c64:	bne	11c80 <__assert_fail@plt+0xb64>
   11c68:	movw	r2, #26471	; 0x6767
   11c6c:	mov	r0, #0
   11c70:	mov	r1, r5
   11c74:	mov	r3, r4
   11c78:	movt	r2, #1
   11c7c:	b	11ca0 <__assert_fail@plt+0xb84>
   11c80:	mov	r0, r6
   11c84:	bl	13794 <__assert_fail@plt+0x2678>
   11c88:	movw	r2, #26467	; 0x6763
   11c8c:	mov	r3, r0
   11c90:	str	r4, [sp]
   11c94:	mov	r0, #0
   11c98:	mov	r1, r5
   11c9c:	movt	r2, #1
   11ca0:	bl	10f90 <error@plt>
   11ca4:	movw	r0, #28924	; 0x70fc
   11ca8:	movt	r0, #2
   11cac:	ldr	r0, [r0]
   11cb0:	bl	10edc <_exit@plt>
   11cb4:	push	{fp, lr}
   11cb8:	mov	fp, sp
   11cbc:	bl	11d14 <__assert_fail@plt+0xbf8>
   11cc0:	cmp	r0, #0
   11cc4:	popne	{fp, pc}
   11cc8:	bl	1485c <__assert_fail@plt+0x3740>
   11ccc:	push	{r4, r5, r6, sl, fp, lr}
   11cd0:	add	fp, sp, #16
   11cd4:	mov	r5, r0
   11cd8:	mov	r4, r0
   11cdc:	ldrb	r6, [r5], #-1
   11ce0:	bl	156ac <__assert_fail@plt+0x4590>
   11ce4:	sub	r2, r0, r4
   11ce8:	sub	r0, r6, #47	; 0x2f
   11cec:	clz	r0, r0
   11cf0:	lsr	r1, r0, #5
   11cf4:	mov	r0, r2
   11cf8:	cmp	r2, r1
   11cfc:	bls	11d10 <__assert_fail@plt+0xbf4>
   11d00:	ldrb	r3, [r5, r0]
   11d04:	sub	r2, r0, #1
   11d08:	cmp	r3, #47	; 0x2f
   11d0c:	beq	11cf4 <__assert_fail@plt+0xbd8>
   11d10:	pop	{r4, r5, r6, sl, fp, pc}
   11d14:	push	{r4, r5, r6, sl, fp, lr}
   11d18:	add	fp, sp, #16
   11d1c:	mov	r6, r0
   11d20:	mov	r4, r0
   11d24:	ldrb	r5, [r6], #-1
   11d28:	bl	156ac <__assert_fail@plt+0x4590>
   11d2c:	sub	r1, r0, r4
   11d30:	sub	r0, r5, #47	; 0x2f
   11d34:	clz	r0, r0
   11d38:	lsr	r0, r0, #5
   11d3c:	mov	r5, r1
   11d40:	cmp	r1, r0
   11d44:	bls	11d58 <__assert_fail@plt+0xc3c>
   11d48:	ldrb	r2, [r6, r5]
   11d4c:	sub	r1, r5, #1
   11d50:	cmp	r2, #47	; 0x2f
   11d54:	beq	11d3c <__assert_fail@plt+0xc20>
   11d58:	cmp	r5, #0
   11d5c:	mov	r0, r5
   11d60:	addeq	r0, r0, #1
   11d64:	add	r0, r0, #1
   11d68:	bl	155c8 <__assert_fail@plt+0x44ac>
   11d6c:	mov	r6, r0
   11d70:	cmp	r0, #0
   11d74:	beq	11da0 <__assert_fail@plt+0xc84>
   11d78:	mov	r0, r6
   11d7c:	mov	r1, r4
   11d80:	mov	r2, r5
   11d84:	bl	10ee8 <memcpy@plt>
   11d88:	cmp	r5, #0
   11d8c:	moveq	r0, #46	; 0x2e
   11d90:	moveq	r5, #1
   11d94:	strbeq	r0, [r6]
   11d98:	mov	r0, #0
   11d9c:	strb	r0, [r6, r5]
   11da0:	mov	r0, r6
   11da4:	pop	{r4, r5, r6, sl, fp, pc}
   11da8:	push	{fp, lr}
   11dac:	mov	fp, sp
   11db0:	bl	11dc0 <__assert_fail@plt+0xca4>
   11db4:	cmp	r0, #0
   11db8:	popne	{fp, pc}
   11dbc:	bl	1485c <__assert_fail@plt+0x3740>
   11dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc4:	add	fp, sp, #28
   11dc8:	push	{r2}		; (str r2, [sp, #-4]!)
   11dcc:	mov	sl, r1
   11dd0:	mov	r7, r0
   11dd4:	bl	156ac <__assert_fail@plt+0x4590>
   11dd8:	sub	r4, r0, r7
   11ddc:	bl	156f8 <__assert_fail@plt+0x45dc>
   11de0:	mov	r6, r0
   11de4:	add	r5, r4, r0
   11de8:	mov	r0, sl
   11dec:	bl	11020 <strlen@plt>
   11df0:	mov	r9, r0
   11df4:	cmp	r6, #0
   11df8:	beq	11e20 <__assert_fail@plt+0xd04>
   11dfc:	add	r0, r5, r7
   11e00:	mov	r4, #0
   11e04:	ldrb	r0, [r0, #-1]
   11e08:	cmp	r0, #47	; 0x2f
   11e0c:	beq	11e30 <__assert_fail@plt+0xd14>
   11e10:	ldrb	r0, [sl]
   11e14:	subs	r4, r0, #47	; 0x2f
   11e18:	movwne	r4, #47	; 0x2f
   11e1c:	b	11e30 <__assert_fail@plt+0xd14>
   11e20:	ldrb	r0, [sl]
   11e24:	mov	r4, #0
   11e28:	cmp	r0, #47	; 0x2f
   11e2c:	movweq	r4, #46	; 0x2e
   11e30:	uxtb	r8, r4
   11e34:	add	r0, r9, r5
   11e38:	cmp	r8, #0
   11e3c:	movwne	r8, #1
   11e40:	add	r0, r0, r8
   11e44:	add	r0, r0, #1
   11e48:	bl	155c8 <__assert_fail@plt+0x44ac>
   11e4c:	mov	r6, r0
   11e50:	cmp	r0, #0
   11e54:	beq	11e94 <__assert_fail@plt+0xd78>
   11e58:	mov	r0, r6
   11e5c:	mov	r1, r7
   11e60:	mov	r2, r5
   11e64:	mvn	r3, #0
   11e68:	bl	11110 <__mempcpy_chk@plt>
   11e6c:	ldr	r1, [sp]
   11e70:	strb	r4, [r0], r8
   11e74:	mov	r2, r9
   11e78:	mvn	r3, #0
   11e7c:	cmp	r1, #0
   11e80:	strne	r0, [r1]
   11e84:	mov	r1, sl
   11e88:	bl	11110 <__mempcpy_chk@plt>
   11e8c:	mov	r1, #0
   11e90:	strb	r1, [r0]
   11e94:	mov	r0, r6
   11e98:	sub	sp, fp, #28
   11e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea0:	push	{r4, r5, r6, sl, fp, lr}
   11ea4:	add	fp, sp, #16
   11ea8:	mov	r4, r0
   11eac:	bl	11038 <__errno_location@plt>
   11eb0:	ldr	r6, [r0]
   11eb4:	mov	r5, r0
   11eb8:	mov	r0, r4
   11ebc:	bl	10ed0 <free@plt>
   11ec0:	str	r6, [r5]
   11ec4:	pop	{r4, r5, r6, sl, fp, pc}
   11ec8:	push	{r4, r5, fp, lr}
   11ecc:	add	fp, sp, #8
   11ed0:	cmp	r0, #0
   11ed4:	beq	11f68 <__assert_fail@plt+0xe4c>
   11ed8:	mov	r1, #47	; 0x2f
   11edc:	mov	r4, r0
   11ee0:	bl	110c8 <strrchr@plt>
   11ee4:	cmp	r0, #0
   11ee8:	mov	r5, r4
   11eec:	addne	r5, r0, #1
   11ef0:	sub	r0, r5, r4
   11ef4:	cmp	r0, #7
   11ef8:	blt	11f4c <__assert_fail@plt+0xe30>
   11efc:	movw	r1, #26530	; 0x67a2
   11f00:	sub	r0, r5, #7
   11f04:	mov	r2, #7
   11f08:	movt	r1, #1
   11f0c:	bl	110f8 <strncmp@plt>
   11f10:	cmp	r0, #0
   11f14:	bne	11f4c <__assert_fail@plt+0xe30>
   11f18:	movw	r1, #26538	; 0x67aa
   11f1c:	mov	r0, r5
   11f20:	mov	r2, #3
   11f24:	movt	r1, #1
   11f28:	bl	110f8 <strncmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	beq	11f3c <__assert_fail@plt+0xe20>
   11f34:	mov	r4, r5
   11f38:	b	11f4c <__assert_fail@plt+0xe30>
   11f3c:	movw	r0, #28992	; 0x7140
   11f40:	add	r4, r5, #3
   11f44:	movt	r0, #2
   11f48:	str	r4, [r0]
   11f4c:	movw	r0, #28996	; 0x7144
   11f50:	movt	r0, #2
   11f54:	str	r4, [r0]
   11f58:	movw	r0, #29072	; 0x7190
   11f5c:	movt	r0, #2
   11f60:	str	r4, [r0]
   11f64:	pop	{r4, r5, fp, pc}
   11f68:	movw	r0, #29008	; 0x7150
   11f6c:	mov	r1, #55	; 0x37
   11f70:	mov	r2, #1
   11f74:	movt	r0, #2
   11f78:	ldr	r3, [r0]
   11f7c:	movw	r0, #26474	; 0x676a
   11f80:	movt	r0, #1
   11f84:	bl	10f54 <fwrite@plt>
   11f88:	bl	11104 <abort@plt>
   11f8c:	push	{r4, r5, r6, sl, fp, lr}
   11f90:	add	fp, sp, #16
   11f94:	mov	r4, r0
   11f98:	movw	r0, #29080	; 0x7198
   11f9c:	movt	r0, #2
   11fa0:	cmp	r4, #0
   11fa4:	moveq	r4, r0
   11fa8:	bl	11038 <__errno_location@plt>
   11fac:	ldr	r6, [r0]
   11fb0:	mov	r5, r0
   11fb4:	mov	r0, r4
   11fb8:	mov	r1, #48	; 0x30
   11fbc:	bl	14780 <__assert_fail@plt+0x3664>
   11fc0:	str	r6, [r5]
   11fc4:	pop	{r4, r5, r6, sl, fp, pc}
   11fc8:	movw	r1, #29080	; 0x7198
   11fcc:	cmp	r0, #0
   11fd0:	movt	r1, #2
   11fd4:	movne	r1, r0
   11fd8:	ldr	r0, [r1]
   11fdc:	bx	lr
   11fe0:	movw	r2, #29080	; 0x7198
   11fe4:	cmp	r0, #0
   11fe8:	movt	r2, #2
   11fec:	movne	r2, r0
   11ff0:	str	r1, [r2]
   11ff4:	bx	lr
   11ff8:	movw	r3, #29080	; 0x7198
   11ffc:	cmp	r0, #0
   12000:	and	r2, r2, #1
   12004:	movt	r3, #2
   12008:	movne	r3, r0
   1200c:	ubfx	r0, r1, #5, #3
   12010:	and	r1, r1, #31
   12014:	add	ip, r3, r0, lsl #2
   12018:	mov	r0, #1
   1201c:	ldr	r3, [ip, #8]
   12020:	and	r0, r0, r3, lsr r1
   12024:	eor	r2, r0, r2
   12028:	eor	r1, r3, r2, lsl r1
   1202c:	str	r1, [ip, #8]
   12030:	bx	lr
   12034:	movw	r2, #29080	; 0x7198
   12038:	cmp	r0, #0
   1203c:	movt	r2, #2
   12040:	movne	r2, r0
   12044:	ldr	r0, [r2, #4]
   12048:	str	r1, [r2, #4]
   1204c:	bx	lr
   12050:	push	{fp, lr}
   12054:	mov	fp, sp
   12058:	movw	r3, #29080	; 0x7198
   1205c:	cmp	r0, #0
   12060:	movt	r3, #2
   12064:	movne	r3, r0
   12068:	cmp	r1, #0
   1206c:	mov	r0, #10
   12070:	cmpne	r2, #0
   12074:	str	r0, [r3]
   12078:	bne	12080 <__assert_fail@plt+0xf64>
   1207c:	bl	11104 <abort@plt>
   12080:	str	r1, [r3, #40]	; 0x28
   12084:	str	r2, [r3, #44]	; 0x2c
   12088:	pop	{fp, pc}
   1208c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12090:	add	fp, sp, #28
   12094:	sub	sp, sp, #20
   12098:	mov	r7, r0
   1209c:	ldr	r0, [fp, #8]
   120a0:	movw	r5, #29080	; 0x7198
   120a4:	mov	r8, r3
   120a8:	mov	r9, r2
   120ac:	mov	sl, r1
   120b0:	movt	r5, #2
   120b4:	cmp	r0, #0
   120b8:	movne	r5, r0
   120bc:	bl	11038 <__errno_location@plt>
   120c0:	ldr	r2, [r5, #40]	; 0x28
   120c4:	ldr	r3, [r5, #44]	; 0x2c
   120c8:	mov	r4, r0
   120cc:	ldm	r5, {r0, r1}
   120d0:	add	r5, r5, #8
   120d4:	ldr	r6, [r4]
   120d8:	stm	sp, {r0, r1, r5}
   120dc:	mov	r0, r7
   120e0:	mov	r1, sl
   120e4:	str	r2, [sp, #12]
   120e8:	str	r3, [sp, #16]
   120ec:	mov	r2, r9
   120f0:	mov	r3, r8
   120f4:	bl	12104 <__assert_fail@plt+0xfe8>
   120f8:	str	r6, [r4]
   120fc:	sub	sp, fp, #28
   12100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12108:	add	fp, sp, #28
   1210c:	sub	sp, sp, #156	; 0x9c
   12110:	mov	r5, r0
   12114:	add	r0, r2, #1
   12118:	mov	r6, r1
   1211c:	mov	sl, r3
   12120:	str	r2, [fp, #-80]	; 0xffffffb0
   12124:	str	r0, [sp, #72]	; 0x48
   12128:	ldr	r0, [fp, #12]
   1212c:	and	r1, r0, #1
   12130:	str	r1, [sp, #36]	; 0x24
   12134:	and	r1, r0, #4
   12138:	str	r1, [sp, #32]
   1213c:	ubfx	r9, r0, #1, #1
   12140:	bl	10f6c <__ctype_get_mb_cur_max@plt>
   12144:	str	r0, [sp, #40]	; 0x28
   12148:	ldr	r0, [fp, #24]
   1214c:	ldr	r7, [fp, #8]
   12150:	mov	r1, #0
   12154:	str	r5, [fp, #-84]	; 0xffffffac
   12158:	str	r1, [fp, #-56]	; 0xffffffc8
   1215c:	mov	r1, #0
   12160:	str	r1, [sp, #60]	; 0x3c
   12164:	mov	r1, #1
   12168:	str	r1, [fp, #-48]	; 0xffffffd0
   1216c:	str	r0, [sp, #80]	; 0x50
   12170:	ldr	r0, [fp, #20]
   12174:	str	r0, [sp, #76]	; 0x4c
   12178:	mov	r0, #0
   1217c:	str	r0, [sp, #56]	; 0x38
   12180:	mov	r0, #0
   12184:	str	r0, [fp, #-88]	; 0xffffffa8
   12188:	mov	r0, #0
   1218c:	str	r0, [fp, #-72]	; 0xffffffb8
   12190:	mov	r0, #0
   12194:	cmp	r7, #10
   12198:	bhi	1312c <__assert_fail@plt+0x2010>
   1219c:	add	r1, pc, #24
   121a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   121a4:	mov	r4, r6
   121a8:	mov	r8, #0
   121ac:	mov	r2, #1
   121b0:	mov	r3, #0
   121b4:	mov	lr, sl
   121b8:	ldr	pc, [r1, r7, lsl #2]
   121bc:	andeq	r2, r1, r0, lsl #5
   121c0:	ldrdeq	r2, [r1], -r4
   121c4:	muleq	r1, r4, r2
   121c8:	andeq	r2, r1, r8, ror r2
   121cc:	andeq	r2, r1, r8, asr #5
   121d0:	strdeq	r2, [r1], -ip
   121d4:	andeq	r2, r1, r4, lsr #5
   121d8:	andeq	r2, r1, r0, lsl #7
   121dc:	andeq	r2, r1, r8, ror #3
   121e0:	andeq	r2, r1, r8, ror #3
   121e4:	andeq	r2, r1, r0, lsl r2
   121e8:	movw	r0, #26620	; 0x67fc
   121ec:	mov	r1, r7
   121f0:	movt	r0, #1
   121f4:	bl	13b34 <__assert_fail@plt+0x2a18>
   121f8:	str	r0, [sp, #76]	; 0x4c
   121fc:	movw	r0, #26622	; 0x67fe
   12200:	mov	r1, r7
   12204:	movt	r0, #1
   12208:	bl	13b34 <__assert_fail@plt+0x2a18>
   1220c:	str	r0, [sp, #80]	; 0x50
   12210:	mov	r8, #0
   12214:	tst	r9, #1
   12218:	bne	12250 <__assert_fail@plt+0x1134>
   1221c:	ldr	r0, [sp, #76]	; 0x4c
   12220:	ldrb	r0, [r0]
   12224:	cmp	r0, #0
   12228:	beq	12250 <__assert_fail@plt+0x1134>
   1222c:	ldr	r1, [sp, #76]	; 0x4c
   12230:	mov	r8, #0
   12234:	add	r1, r1, #1
   12238:	cmp	r8, r4
   1223c:	strbcc	r0, [r5, r8]
   12240:	ldrb	r0, [r1, r8]
   12244:	add	r8, r8, #1
   12248:	cmp	r0, #0
   1224c:	bne	12238 <__assert_fail@plt+0x111c>
   12250:	ldr	r6, [sp, #80]	; 0x50
   12254:	mov	r0, r6
   12258:	bl	11020 <strlen@plt>
   1225c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12260:	str	r0, [fp, #-72]	; 0xffffffb8
   12264:	str	r6, [fp, #-88]	; 0xffffffa8
   12268:	mov	r2, #1
   1226c:	mov	r3, r9
   12270:	mov	lr, sl
   12274:	b	12380 <__assert_fail@plt+0x1264>
   12278:	mov	r0, #1
   1227c:	b	122d4 <__assert_fail@plt+0x11b8>
   12280:	mov	r7, #0
   12284:	mov	r8, #0
   12288:	mov	r2, r0
   1228c:	mov	r3, #0
   12290:	b	12380 <__assert_fail@plt+0x1264>
   12294:	tst	r9, #1
   12298:	bne	122d4 <__assert_fail@plt+0x11b8>
   1229c:	mov	r2, r0
   122a0:	b	1232c <__assert_fail@plt+0x1210>
   122a4:	mov	r0, #1
   122a8:	mov	r8, #0
   122ac:	mov	r7, #5
   122b0:	mov	r2, #1
   122b4:	str	r0, [fp, #-72]	; 0xffffffb8
   122b8:	movw	r0, #26618	; 0x67fa
   122bc:	movt	r0, #1
   122c0:	str	r0, [fp, #-88]	; 0xffffffa8
   122c4:	b	122f4 <__assert_fail@plt+0x11d8>
   122c8:	mov	r2, #1
   122cc:	tst	r9, #1
   122d0:	beq	1232c <__assert_fail@plt+0x1210>
   122d4:	mov	r1, #1
   122d8:	mov	r8, #0
   122dc:	mov	r7, #2
   122e0:	mov	r2, r0
   122e4:	str	r1, [fp, #-72]	; 0xffffffb8
   122e8:	movw	r1, #26622	; 0x67fe
   122ec:	movt	r1, #1
   122f0:	str	r1, [fp, #-88]	; 0xffffffa8
   122f4:	mov	r3, #1
   122f8:	b	12380 <__assert_fail@plt+0x1264>
   122fc:	tst	r9, #1
   12300:	beq	12350 <__assert_fail@plt+0x1234>
   12304:	mov	r0, #1
   12308:	mov	r8, #0
   1230c:	mov	r2, #1
   12310:	mov	r3, #1
   12314:	mov	r7, #5
   12318:	str	r0, [fp, #-72]	; 0xffffffb8
   1231c:	movw	r0, #26618	; 0x67fa
   12320:	movt	r0, #1
   12324:	str	r0, [fp, #-88]	; 0xffffffa8
   12328:	b	12380 <__assert_fail@plt+0x1264>
   1232c:	cmp	r4, #0
   12330:	mov	r8, #1
   12334:	mov	r3, #0
   12338:	mov	r7, #2
   1233c:	movne	r0, #39	; 0x27
   12340:	strbne	r0, [r5]
   12344:	movw	r0, #26622	; 0x67fe
   12348:	movt	r0, #1
   1234c:	b	12374 <__assert_fail@plt+0x1258>
   12350:	cmp	r4, #0
   12354:	mov	r8, #1
   12358:	mov	r2, #1
   1235c:	mov	r7, #5
   12360:	mov	r3, #0
   12364:	movne	r0, #34	; 0x22
   12368:	strbne	r0, [r5]
   1236c:	movw	r0, #26618	; 0x67fa
   12370:	movt	r0, #1
   12374:	str	r0, [fp, #-88]	; 0xffffffa8
   12378:	mov	r0, #1
   1237c:	str	r0, [fp, #-72]	; 0xffffffb8
   12380:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12384:	eor	r6, r3, #1
   12388:	str	r7, [fp, #-68]	; 0xffffffbc
   1238c:	str	r3, [fp, #-76]	; 0xffffffb4
   12390:	str	r2, [sp, #84]	; 0x54
   12394:	str	r6, [sp, #92]	; 0x5c
   12398:	cmp	r0, #0
   1239c:	movwne	r0, #1
   123a0:	and	r1, r0, r3
   123a4:	and	r1, r2, r1
   123a8:	str	r1, [sp, #48]	; 0x30
   123ac:	sub	r1, r7, #2
   123b0:	clz	r1, r1
   123b4:	lsr	r1, r1, #5
   123b8:	and	r1, r1, r3
   123bc:	str	r1, [sp, #64]	; 0x40
   123c0:	subs	r1, r7, #2
   123c4:	mov	r7, #0
   123c8:	movwne	r1, #1
   123cc:	orr	r6, r1, r6
   123d0:	and	r1, r1, r2
   123d4:	and	r0, r0, r1
   123d8:	str	r6, [sp, #68]	; 0x44
   123dc:	str	r0, [fp, #-60]	; 0xffffffc4
   123e0:	orr	r0, r1, r3
   123e4:	ldr	r1, [fp, #16]
   123e8:	eor	r0, r0, #1
   123ec:	clz	r1, r1
   123f0:	lsr	r1, r1, #5
   123f4:	orr	r0, r1, r0
   123f8:	str	r0, [fp, #-64]	; 0xffffffc0
   123fc:	eor	r0, r2, #1
   12400:	str	r0, [sp, #52]	; 0x34
   12404:	cmn	lr, #1
   12408:	beq	12418 <__assert_fail@plt+0x12fc>
   1240c:	cmp	r7, lr
   12410:	bne	12424 <__assert_fail@plt+0x1308>
   12414:	b	12f6c <__assert_fail@plt+0x1e50>
   12418:	ldrb	r0, [ip, r7]
   1241c:	cmp	r0, #0
   12420:	beq	12f74 <__assert_fail@plt+0x1e58>
   12424:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12428:	mov	sl, #0
   1242c:	cmp	r0, #0
   12430:	beq	12468 <__assert_fail@plt+0x134c>
   12434:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12438:	add	r5, r7, r0
   1243c:	cmp	r0, #2
   12440:	bcc	1245c <__assert_fail@plt+0x1340>
   12444:	cmn	lr, #1
   12448:	bne	1245c <__assert_fail@plt+0x1340>
   1244c:	mov	r0, ip
   12450:	bl	11020 <strlen@plt>
   12454:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12458:	mov	lr, r0
   1245c:	cmp	r5, lr
   12460:	bls	12470 <__assert_fail@plt+0x1354>
   12464:	ldr	r5, [fp, #-84]	; 0xffffffac
   12468:	mov	r0, #0
   1246c:	b	124bc <__assert_fail@plt+0x13a0>
   12470:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12474:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12478:	add	r0, ip, r7
   1247c:	mov	r6, r4
   12480:	mov	r4, lr
   12484:	bl	11014 <bcmp@plt>
   12488:	ldr	r2, [sp, #92]	; 0x5c
   1248c:	cmp	r0, #0
   12490:	ldr	r5, [fp, #-84]	; 0xffffffac
   12494:	mov	r1, r0
   12498:	movwne	r1, #1
   1249c:	orr	r1, r1, r2
   124a0:	tst	r1, #1
   124a4:	beq	12ffc <__assert_fail@plt+0x1ee0>
   124a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124ac:	clz	r0, r0
   124b0:	mov	lr, r4
   124b4:	mov	r4, r6
   124b8:	lsr	r0, r0, #5
   124bc:	str	r0, [fp, #-52]	; 0xffffffcc
   124c0:	ldrb	r6, [ip, r7]
   124c4:	cmp	r6, #126	; 0x7e
   124c8:	bhi	129f8 <__assert_fail@plt+0x18dc>
   124cc:	add	r3, pc, #16
   124d0:	mov	r9, #1
   124d4:	mov	r2, #110	; 0x6e
   124d8:	mov	r0, #97	; 0x61
   124dc:	mov	r1, #0
   124e0:	ldr	pc, [r3, r6, lsl #2]
   124e4:	andeq	r2, r1, r8, asr r8
   124e8:	strdeq	r2, [r1], -r8
   124ec:	strdeq	r2, [r1], -r8
   124f0:	strdeq	r2, [r1], -r8
   124f4:	strdeq	r2, [r1], -r8
   124f8:	strdeq	r2, [r1], -r8
   124fc:	strdeq	r2, [r1], -r8
   12500:	ldrdeq	r2, [r1], -r4
   12504:	andeq	r2, r1, r8, lsr r8
   12508:	andeq	r2, r1, r0, lsr r8
   1250c:	andeq	r2, r1, r4, asr #16
   12510:	andeq	r2, r1, r0, ror #18
   12514:	andeq	r2, r1, r8, lsr #16
   12518:	andeq	r2, r1, r0, asr #16
   1251c:	strdeq	r2, [r1], -r8
   12520:	strdeq	r2, [r1], -r8
   12524:	strdeq	r2, [r1], -r8
   12528:	strdeq	r2, [r1], -r8
   1252c:	strdeq	r2, [r1], -r8
   12530:	strdeq	r2, [r1], -r8
   12534:	strdeq	r2, [r1], -r8
   12538:	strdeq	r2, [r1], -r8
   1253c:	strdeq	r2, [r1], -r8
   12540:	strdeq	r2, [r1], -r8
   12544:	strdeq	r2, [r1], -r8
   12548:	strdeq	r2, [r1], -r8
   1254c:	strdeq	r2, [r1], -r8
   12550:	strdeq	r2, [r1], -r8
   12554:	strdeq	r2, [r1], -r8
   12558:	strdeq	r2, [r1], -r8
   1255c:	strdeq	r2, [r1], -r8
   12560:	strdeq	r2, [r1], -r8
   12564:	ldrdeq	r2, [r1], -ip
   12568:	andeq	r2, r1, r0, ror #15
   1256c:	andeq	r2, r1, r0, ror #15
   12570:	andeq	r2, r1, r8, asr #15
   12574:	andeq	r2, r1, r0, ror #15
   12578:	andeq	r2, r1, r0, ror #13
   1257c:	andeq	r2, r1, r0, ror #15
   12580:	andeq	r2, r1, r8, ror #18
   12584:	andeq	r2, r1, r0, ror #15
   12588:	andeq	r2, r1, r0, ror #15
   1258c:	andeq	r2, r1, r0, ror #15
   12590:	andeq	r2, r1, r0, ror #13
   12594:	andeq	r2, r1, r0, ror #13
   12598:	andeq	r2, r1, r0, ror #13
   1259c:	andeq	r2, r1, r0, ror #13
   125a0:	andeq	r2, r1, r0, ror #13
   125a4:	andeq	r2, r1, r0, ror #13
   125a8:	andeq	r2, r1, r0, ror #13
   125ac:	andeq	r2, r1, r0, ror #13
   125b0:	andeq	r2, r1, r0, ror #13
   125b4:	andeq	r2, r1, r0, ror #13
   125b8:	andeq	r2, r1, r0, ror #13
   125bc:	andeq	r2, r1, r0, ror #13
   125c0:	andeq	r2, r1, r0, ror #13
   125c4:	andeq	r2, r1, r0, ror #13
   125c8:	andeq	r2, r1, r0, ror #13
   125cc:	andeq	r2, r1, r0, ror #13
   125d0:	andeq	r2, r1, r0, ror #15
   125d4:	andeq	r2, r1, r0, ror #15
   125d8:	andeq	r2, r1, r0, ror #15
   125dc:	andeq	r2, r1, r0, ror #15
   125e0:	andeq	r2, r1, r0, lsr r9
   125e4:	strdeq	r2, [r1], -r8
   125e8:	andeq	r2, r1, r0, ror #13
   125ec:	andeq	r2, r1, r0, ror #13
   125f0:	andeq	r2, r1, r0, ror #13
   125f4:	andeq	r2, r1, r0, ror #13
   125f8:	andeq	r2, r1, r0, ror #13
   125fc:	andeq	r2, r1, r0, ror #13
   12600:	andeq	r2, r1, r0, ror #13
   12604:	andeq	r2, r1, r0, ror #13
   12608:	andeq	r2, r1, r0, ror #13
   1260c:	andeq	r2, r1, r0, ror #13
   12610:	andeq	r2, r1, r0, ror #13
   12614:	andeq	r2, r1, r0, ror #13
   12618:	andeq	r2, r1, r0, ror #13
   1261c:	andeq	r2, r1, r0, ror #13
   12620:	andeq	r2, r1, r0, ror #13
   12624:	andeq	r2, r1, r0, ror #13
   12628:	andeq	r2, r1, r0, ror #13
   1262c:	andeq	r2, r1, r0, ror #13
   12630:	andeq	r2, r1, r0, ror #13
   12634:	andeq	r2, r1, r0, ror #13
   12638:	andeq	r2, r1, r0, ror #13
   1263c:	andeq	r2, r1, r0, ror #13
   12640:	andeq	r2, r1, r0, ror #13
   12644:	andeq	r2, r1, r0, ror #13
   12648:	andeq	r2, r1, r0, ror #13
   1264c:	andeq	r2, r1, r0, ror #13
   12650:	andeq	r2, r1, r0, ror #15
   12654:	andeq	r2, r1, r8, lsl #16
   12658:	andeq	r2, r1, r0, ror #13
   1265c:	andeq	r2, r1, r0, ror #15
   12660:	andeq	r2, r1, r0, ror #13
   12664:	andeq	r2, r1, r0, ror #15
   12668:	andeq	r2, r1, r0, ror #13
   1266c:	andeq	r2, r1, r0, ror #13
   12670:	andeq	r2, r1, r0, ror #13
   12674:	andeq	r2, r1, r0, ror #13
   12678:	andeq	r2, r1, r0, ror #13
   1267c:	andeq	r2, r1, r0, ror #13
   12680:	andeq	r2, r1, r0, ror #13
   12684:	andeq	r2, r1, r0, ror #13
   12688:	andeq	r2, r1, r0, ror #13
   1268c:	andeq	r2, r1, r0, ror #13
   12690:	andeq	r2, r1, r0, ror #13
   12694:	andeq	r2, r1, r0, ror #13
   12698:	andeq	r2, r1, r0, ror #13
   1269c:	andeq	r2, r1, r0, ror #13
   126a0:	andeq	r2, r1, r0, ror #13
   126a4:	andeq	r2, r1, r0, ror #13
   126a8:	andeq	r2, r1, r0, ror #13
   126ac:	andeq	r2, r1, r0, ror #13
   126b0:	andeq	r2, r1, r0, ror #13
   126b4:	andeq	r2, r1, r0, ror #13
   126b8:	andeq	r2, r1, r0, ror #13
   126bc:	andeq	r2, r1, r0, ror #13
   126c0:	andeq	r2, r1, r0, ror #13
   126c4:	andeq	r2, r1, r0, ror #13
   126c8:	andeq	r2, r1, r0, ror #13
   126cc:	andeq	r2, r1, r0, ror #13
   126d0:	muleq	r1, ip, r7
   126d4:	andeq	r2, r1, r0, ror #15
   126d8:	muleq	r1, ip, r7
   126dc:	andeq	r2, r1, r8, asr #15
   126e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126e4:	tst	r0, #1
   126e8:	bne	12714 <__assert_fail@plt+0x15f8>
   126ec:	ldr	r1, [fp, #16]
   126f0:	ubfx	r0, r6, #5, #3
   126f4:	mov	r2, #1
   126f8:	ldr	r0, [r1, r0, lsl #2]
   126fc:	and	r1, r6, #31
   12700:	tst	r0, r2, lsl r1
   12704:	beq	12714 <__assert_fail@plt+0x15f8>
   12708:	mov	r0, r6
   1270c:	mov	r1, r9
   12710:	b	12728 <__assert_fail@plt+0x160c>
   12714:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12718:	mov	r1, r9
   1271c:	cmp	r0, #0
   12720:	mov	r0, r6
   12724:	beq	12a68 <__assert_fail@plt+0x194c>
   12728:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1272c:	tst	r2, #1
   12730:	bne	13038 <__assert_fail@plt+0x1f1c>
   12734:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12738:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1273c:	subs	r2, r2, #2
   12740:	movwne	r2, #1
   12744:	orr	r2, r2, r3
   12748:	tst	r2, #1
   1274c:	bne	12788 <__assert_fail@plt+0x166c>
   12750:	cmp	r8, r4
   12754:	movcc	r2, #39	; 0x27
   12758:	strbcc	r2, [r5, r8]
   1275c:	add	r2, r8, #1
   12760:	cmp	r2, r4
   12764:	movcc	r3, #36	; 0x24
   12768:	strbcc	r3, [r5, r2]
   1276c:	add	r2, r8, #2
   12770:	add	r8, r8, #3
   12774:	cmp	r2, r4
   12778:	movcc	r3, #39	; 0x27
   1277c:	strbcc	r3, [r5, r2]
   12780:	mov	r2, #1
   12784:	str	r2, [fp, #-56]	; 0xffffffc8
   12788:	cmp	r8, r4
   1278c:	movcc	r2, #92	; 0x5c
   12790:	strbcc	r2, [r5, r8]
   12794:	add	r8, r8, #1
   12798:	b	12aac <__assert_fail@plt+0x1990>
   1279c:	cmp	lr, #1
   127a0:	beq	127c8 <__assert_fail@plt+0x16ac>
   127a4:	mov	r9, #0
   127a8:	cmn	lr, #1
   127ac:	bne	127d4 <__assert_fail@plt+0x16b8>
   127b0:	ldrb	r0, [ip, #1]
   127b4:	cmp	r0, #0
   127b8:	beq	127c8 <__assert_fail@plt+0x16ac>
   127bc:	mvn	lr, #0
   127c0:	mov	sl, #0
   127c4:	b	126e0 <__assert_fail@plt+0x15c4>
   127c8:	mov	r9, #0
   127cc:	cmp	r7, #0
   127d0:	beq	127dc <__assert_fail@plt+0x16c0>
   127d4:	mov	sl, #0
   127d8:	b	126e0 <__assert_fail@plt+0x15c4>
   127dc:	mov	r1, #1
   127e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127e4:	cmp	r0, #2
   127e8:	bne	12800 <__assert_fail@plt+0x16e4>
   127ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   127f0:	mov	r9, r1
   127f4:	tst	r0, #1
   127f8:	beq	126e0 <__assert_fail@plt+0x15c4>
   127fc:	b	13038 <__assert_fail@plt+0x1f1c>
   12800:	mov	r9, r1
   12804:	b	126e0 <__assert_fail@plt+0x15c4>
   12808:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1280c:	cmp	r0, #2
   12810:	bne	12a4c <__assert_fail@plt+0x1930>
   12814:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12818:	tst	r0, #1
   1281c:	bne	13038 <__assert_fail@plt+0x1f1c>
   12820:	mov	sl, #0
   12824:	b	12a60 <__assert_fail@plt+0x1944>
   12828:	mov	r0, #102	; 0x66
   1282c:	b	12ad4 <__assert_fail@plt+0x19b8>
   12830:	mov	r2, #116	; 0x74
   12834:	b	12844 <__assert_fail@plt+0x1728>
   12838:	mov	r0, #98	; 0x62
   1283c:	b	12ad4 <__assert_fail@plt+0x19b8>
   12840:	mov	r2, #114	; 0x72
   12844:	ldr	r0, [sp, #68]	; 0x44
   12848:	tst	r0, #1
   1284c:	mov	r0, r2
   12850:	bne	12ad4 <__assert_fail@plt+0x19b8>
   12854:	b	13038 <__assert_fail@plt+0x1f1c>
   12858:	ldr	r0, [sp, #84]	; 0x54
   1285c:	tst	r0, #1
   12860:	beq	12af0 <__assert_fail@plt+0x19d4>
   12864:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12868:	tst	r0, #1
   1286c:	bne	13124 <__assert_fail@plt+0x2008>
   12870:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12874:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12878:	subs	r0, r0, #2
   1287c:	movwne	r0, #1
   12880:	orr	r0, r0, r1
   12884:	tst	r0, #1
   12888:	bne	128c4 <__assert_fail@plt+0x17a8>
   1288c:	cmp	r8, r4
   12890:	movcc	r0, #39	; 0x27
   12894:	strbcc	r0, [r5, r8]
   12898:	add	r0, r8, #1
   1289c:	cmp	r0, r4
   128a0:	movcc	r1, #36	; 0x24
   128a4:	strbcc	r1, [r5, r0]
   128a8:	add	r0, r8, #2
   128ac:	add	r8, r8, #3
   128b0:	cmp	r0, r4
   128b4:	movcc	r1, #39	; 0x27
   128b8:	strbcc	r1, [r5, r0]
   128bc:	mov	r0, #1
   128c0:	str	r0, [fp, #-56]	; 0xffffffc8
   128c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128c8:	cmp	r8, r4
   128cc:	mov	r9, #0
   128d0:	mov	sl, #1
   128d4:	mov	r6, #48	; 0x30
   128d8:	movcc	r0, #92	; 0x5c
   128dc:	strbcc	r0, [r5, r8]
   128e0:	add	r0, r8, #1
   128e4:	cmp	r1, #2
   128e8:	beq	12cb8 <__assert_fail@plt+0x1b9c>
   128ec:	add	r1, r7, #1
   128f0:	cmp	r1, lr
   128f4:	bcs	12cb8 <__assert_fail@plt+0x1b9c>
   128f8:	ldrb	r1, [ip, r1]
   128fc:	sub	r1, r1, #48	; 0x30
   12900:	uxtb	r1, r1
   12904:	cmp	r1, #9
   12908:	bhi	12cb8 <__assert_fail@plt+0x1b9c>
   1290c:	cmp	r0, r4
   12910:	movcc	r1, #48	; 0x30
   12914:	strbcc	r1, [r5, r0]
   12918:	add	r0, r8, #2
   1291c:	add	r8, r8, #3
   12920:	cmp	r0, r4
   12924:	movcc	r1, #48	; 0x30
   12928:	strbcc	r1, [r5, r0]
   1292c:	b	126e0 <__assert_fail@plt+0x15c4>
   12930:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12934:	mov	sl, #0
   12938:	mov	r6, #63	; 0x3f
   1293c:	cmp	r0, #5
   12940:	beq	12cc0 <__assert_fail@plt+0x1ba4>
   12944:	cmp	r0, #2
   12948:	bne	12d68 <__assert_fail@plt+0x1c4c>
   1294c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12950:	mov	r9, #0
   12954:	tst	r0, #1
   12958:	beq	126e0 <__assert_fail@plt+0x15c4>
   1295c:	b	13038 <__assert_fail@plt+0x1f1c>
   12960:	mov	r0, #118	; 0x76
   12964:	b	12ad4 <__assert_fail@plt+0x19b8>
   12968:	mov	r0, #1
   1296c:	mov	r6, #39	; 0x27
   12970:	str	r0, [sp, #60]	; 0x3c
   12974:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12978:	cmp	r0, #2
   1297c:	bne	12b0c <__assert_fail@plt+0x19f0>
   12980:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12984:	tst	r0, #1
   12988:	bne	13038 <__assert_fail@plt+0x1f1c>
   1298c:	ldr	r2, [sp, #56]	; 0x38
   12990:	clz	r1, r4
   12994:	mov	sl, #0
   12998:	mov	r9, #1
   1299c:	lsr	r1, r1, #5
   129a0:	cmp	r2, #0
   129a4:	mov	r0, r2
   129a8:	movwne	r0, #1
   129ac:	orrs	r0, r0, r1
   129b0:	moveq	r2, r4
   129b4:	moveq	r4, r0
   129b8:	cmp	r8, r4
   129bc:	str	r2, [sp, #56]	; 0x38
   129c0:	movcc	r0, #39	; 0x27
   129c4:	strbcc	r0, [r5, r8]
   129c8:	add	r0, r8, #1
   129cc:	cmp	r0, r4
   129d0:	movcc	r1, #92	; 0x5c
   129d4:	strbcc	r1, [r5, r0]
   129d8:	add	r0, r8, #2
   129dc:	add	r8, r8, #3
   129e0:	cmp	r0, r4
   129e4:	movcc	r1, #39	; 0x27
   129e8:	strbcc	r1, [r5, r0]
   129ec:	mov	r0, #0
   129f0:	str	r0, [fp, #-56]	; 0xffffffc8
   129f4:	b	126e0 <__assert_fail@plt+0x15c4>
   129f8:	ldr	r0, [sp, #40]	; 0x28
   129fc:	str	r4, [sp, #88]	; 0x58
   12a00:	cmp	r0, #1
   12a04:	bne	12b14 <__assert_fail@plt+0x19f8>
   12a08:	str	lr, [sp, #28]
   12a0c:	bl	10ffc <__ctype_b_loc@plt>
   12a10:	ldr	r0, [r0]
   12a14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a18:	mov	r2, #1
   12a1c:	add	r0, r0, r6, lsl #1
   12a20:	ldrb	r0, [r0, #1]
   12a24:	ubfx	r9, r0, #6, #1
   12a28:	ldr	r0, [sp, #52]	; 0x34
   12a2c:	cmp	r2, #1
   12a30:	orr	r0, r9, r0
   12a34:	bhi	12d70 <__assert_fail@plt+0x1c54>
   12a38:	tst	r0, #1
   12a3c:	beq	12d70 <__assert_fail@plt+0x1c54>
   12a40:	ldr	lr, [sp, #28]
   12a44:	ldr	r4, [sp, #88]	; 0x58
   12a48:	b	126e0 <__assert_fail@plt+0x15c4>
   12a4c:	ldr	r1, [sp, #48]	; 0x30
   12a50:	mov	sl, #0
   12a54:	mov	r0, #92	; 0x5c
   12a58:	cmp	r1, #0
   12a5c:	beq	12ad4 <__assert_fail@plt+0x19b8>
   12a60:	mov	r6, #92	; 0x5c
   12a64:	mov	r9, #0
   12a68:	cmp	sl, #0
   12a6c:	bne	12aa4 <__assert_fail@plt+0x1988>
   12a70:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12a74:	tst	r0, #1
   12a78:	beq	12aa4 <__assert_fail@plt+0x1988>
   12a7c:	cmp	r8, r4
   12a80:	movcc	r0, #39	; 0x27
   12a84:	strbcc	r0, [r5, r8]
   12a88:	add	r0, r8, #1
   12a8c:	add	r8, r8, #2
   12a90:	cmp	r0, r4
   12a94:	movcc	r1, #39	; 0x27
   12a98:	strbcc	r1, [r5, r0]
   12a9c:	mov	r0, #0
   12aa0:	str	r0, [fp, #-56]	; 0xffffffc8
   12aa4:	mov	r1, r9
   12aa8:	mov	r0, r6
   12aac:	cmp	r8, r4
   12ab0:	strbcc	r0, [r5, r8]
   12ab4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12ab8:	add	r8, r8, #1
   12abc:	and	r0, r0, r1
   12ac0:	str	r0, [fp, #-48]	; 0xffffffd0
   12ac4:	add	r7, r7, #1
   12ac8:	cmn	lr, #1
   12acc:	bne	1240c <__assert_fail@plt+0x12f0>
   12ad0:	b	12418 <__assert_fail@plt+0x12fc>
   12ad4:	ldr	r1, [sp, #84]	; 0x54
   12ad8:	mov	sl, #0
   12adc:	mov	r9, #0
   12ae0:	tst	r1, #1
   12ae4:	mov	r1, #0
   12ae8:	beq	126e0 <__assert_fail@plt+0x15c4>
   12aec:	b	12728 <__assert_fail@plt+0x160c>
   12af0:	ldr	r0, [sp, #36]	; 0x24
   12af4:	mov	r6, #0
   12af8:	mov	sl, #0
   12afc:	mov	r9, #0
   12b00:	cmp	r0, #0
   12b04:	beq	126e0 <__assert_fail@plt+0x15c4>
   12b08:	b	12ac4 <__assert_fail@plt+0x19a8>
   12b0c:	mov	r9, #1
   12b10:	b	126e0 <__assert_fail@plt+0x15c4>
   12b14:	mov	r0, #0
   12b18:	cmn	lr, #1
   12b1c:	sub	r4, fp, #40	; 0x28
   12b20:	str	r0, [fp, #-36]	; 0xffffffdc
   12b24:	str	r0, [fp, #-40]	; 0xffffffd8
   12b28:	bne	12b3c <__assert_fail@plt+0x1a20>
   12b2c:	mov	r0, ip
   12b30:	bl	11020 <strlen@plt>
   12b34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b38:	mov	lr, r0
   12b3c:	ldr	r0, [sp, #72]	; 0x48
   12b40:	mov	r9, #1
   12b44:	mov	r2, #0
   12b48:	str	lr, [sp, #28]
   12b4c:	add	r0, r0, r7
   12b50:	str	r0, [sp, #20]
   12b54:	b	12b98 <__assert_fail@plt+0x1a7c>
   12b58:	ldr	r5, [sp, #44]	; 0x2c
   12b5c:	add	r5, r0, r5
   12b60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12b64:	bl	10f3c <iswprint@plt>
   12b68:	cmp	r0, #0
   12b6c:	sub	r4, fp, #40	; 0x28
   12b70:	movwne	r0, #1
   12b74:	and	r9, r9, r0
   12b78:	mov	r0, r4
   12b7c:	bl	10f0c <mbsinit@plt>
   12b80:	mov	r2, r5
   12b84:	ldr	lr, [sp, #28]
   12b88:	ldr	r5, [fp, #-84]	; 0xffffffac
   12b8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b90:	cmp	r0, #0
   12b94:	bne	12a28 <__assert_fail@plt+0x190c>
   12b98:	add	r0, r2, r7
   12b9c:	str	r2, [sp, #44]	; 0x2c
   12ba0:	mov	r3, r4
   12ba4:	add	r1, ip, r0
   12ba8:	str	r0, [sp, #24]
   12bac:	sub	r2, lr, r0
   12bb0:	sub	r0, fp, #44	; 0x2c
   12bb4:	bl	15b30 <__assert_fail@plt+0x4a14>
   12bb8:	cmp	r0, #0
   12bbc:	beq	12f60 <__assert_fail@plt+0x1e44>
   12bc0:	cmn	r0, #1
   12bc4:	beq	12f1c <__assert_fail@plt+0x1e00>
   12bc8:	ldr	lr, [sp, #28]
   12bcc:	cmn	r0, #2
   12bd0:	beq	12f24 <__assert_fail@plt+0x1e08>
   12bd4:	ldr	r2, [sp, #64]	; 0x40
   12bd8:	ldr	r4, [sp, #88]	; 0x58
   12bdc:	ldr	ip, [sp, #84]	; 0x54
   12be0:	cmp	r0, #2
   12be4:	mov	r1, #0
   12be8:	movwcc	r1, #1
   12bec:	eor	r2, r2, #1
   12bf0:	orrs	r1, r2, r1
   12bf4:	bne	12b58 <__assert_fail@plt+0x1a3c>
   12bf8:	ldr	r1, [sp, #44]	; 0x2c
   12bfc:	ldr	r2, [sp, #20]
   12c00:	add	r1, r2, r1
   12c04:	sub	r2, r0, #1
   12c08:	b	12c18 <__assert_fail@plt+0x1afc>
   12c0c:	add	r1, r1, #1
   12c10:	subs	r2, r2, #1
   12c14:	beq	12b58 <__assert_fail@plt+0x1a3c>
   12c18:	ldrb	r3, [r1]
   12c1c:	sub	r3, r3, #91	; 0x5b
   12c20:	cmp	r3, #33	; 0x21
   12c24:	bhi	12c0c <__assert_fail@plt+0x1af0>
   12c28:	add	r5, pc, #0
   12c2c:	ldr	pc, [r5, r3, lsl #2]
   12c30:	andeq	r3, r1, r4, lsl r0
   12c34:	andeq	r3, r1, r4, lsl r0
   12c38:	andeq	r2, r1, ip, lsl #24
   12c3c:	andeq	r3, r1, r4, lsl r0
   12c40:	andeq	r2, r1, ip, lsl #24
   12c44:	andeq	r3, r1, r4, lsl r0
   12c48:	andeq	r2, r1, ip, lsl #24
   12c4c:	andeq	r2, r1, ip, lsl #24
   12c50:	andeq	r2, r1, ip, lsl #24
   12c54:	andeq	r2, r1, ip, lsl #24
   12c58:	andeq	r2, r1, ip, lsl #24
   12c5c:	andeq	r2, r1, ip, lsl #24
   12c60:	andeq	r2, r1, ip, lsl #24
   12c64:	andeq	r2, r1, ip, lsl #24
   12c68:	andeq	r2, r1, ip, lsl #24
   12c6c:	andeq	r2, r1, ip, lsl #24
   12c70:	andeq	r2, r1, ip, lsl #24
   12c74:	andeq	r2, r1, ip, lsl #24
   12c78:	andeq	r2, r1, ip, lsl #24
   12c7c:	andeq	r2, r1, ip, lsl #24
   12c80:	andeq	r2, r1, ip, lsl #24
   12c84:	andeq	r2, r1, ip, lsl #24
   12c88:	andeq	r2, r1, ip, lsl #24
   12c8c:	andeq	r2, r1, ip, lsl #24
   12c90:	andeq	r2, r1, ip, lsl #24
   12c94:	andeq	r2, r1, ip, lsl #24
   12c98:	andeq	r2, r1, ip, lsl #24
   12c9c:	andeq	r2, r1, ip, lsl #24
   12ca0:	andeq	r2, r1, ip, lsl #24
   12ca4:	andeq	r2, r1, ip, lsl #24
   12ca8:	andeq	r2, r1, ip, lsl #24
   12cac:	andeq	r2, r1, ip, lsl #24
   12cb0:	andeq	r2, r1, ip, lsl #24
   12cb4:	andeq	r3, r1, r4, lsl r0
   12cb8:	mov	r8, r0
   12cbc:	b	126e0 <__assert_fail@plt+0x15c4>
   12cc0:	ldr	r0, [sp, #32]
   12cc4:	cmp	r0, #0
   12cc8:	beq	12d68 <__assert_fail@plt+0x1c4c>
   12ccc:	add	r0, r7, #2
   12cd0:	cmp	r0, lr
   12cd4:	bcs	12d68 <__assert_fail@plt+0x1c4c>
   12cd8:	add	r1, r7, ip
   12cdc:	ldrb	r1, [r1, #1]
   12ce0:	cmp	r1, #63	; 0x3f
   12ce4:	bne	12d68 <__assert_fail@plt+0x1c4c>
   12ce8:	ldrb	r9, [ip, r0]
   12cec:	sub	r2, r9, #33	; 0x21
   12cf0:	cmp	r2, #29
   12cf4:	bhi	12d68 <__assert_fail@plt+0x1c4c>
   12cf8:	movw	r1, #20929	; 0x51c1
   12cfc:	mov	r3, #1
   12d00:	movt	r1, #14336	; 0x3800
   12d04:	tst	r1, r3, lsl r2
   12d08:	beq	12d68 <__assert_fail@plt+0x1c4c>
   12d0c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12d10:	tst	r1, #1
   12d14:	bne	13038 <__assert_fail@plt+0x1f1c>
   12d18:	cmp	r8, r4
   12d1c:	add	r2, r8, #1
   12d20:	mov	r6, r9
   12d24:	mov	r7, r0
   12d28:	mov	r9, #0
   12d2c:	movcc	r1, #63	; 0x3f
   12d30:	strbcc	r1, [r5, r8]
   12d34:	cmp	r2, r4
   12d38:	movcc	r1, #34	; 0x22
   12d3c:	strbcc	r1, [r5, r2]
   12d40:	add	r2, r8, #2
   12d44:	cmp	r2, r4
   12d48:	movcc	r1, #34	; 0x22
   12d4c:	strbcc	r1, [r5, r2]
   12d50:	add	r2, r8, #3
   12d54:	add	r8, r8, #4
   12d58:	cmp	r2, r4
   12d5c:	movcc	r1, #63	; 0x3f
   12d60:	strbcc	r1, [r5, r2]
   12d64:	b	126e0 <__assert_fail@plt+0x15c4>
   12d68:	mov	r9, #0
   12d6c:	b	126e0 <__assert_fail@plt+0x15c4>
   12d70:	ldr	lr, [sp, #28]
   12d74:	ldr	r4, [fp, #-56]	; 0xffffffc8
   12d78:	add	r1, r2, r7
   12d7c:	mov	r2, #0
   12d80:	str	r1, [sp, #44]	; 0x2c
   12d84:	tst	r0, #1
   12d88:	bne	12ea4 <__assert_fail@plt+0x1d88>
   12d8c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12d90:	tst	r1, #1
   12d94:	bne	13034 <__assert_fail@plt+0x1f18>
   12d98:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12d9c:	subs	r2, r1, #2
   12da0:	movwne	r2, #1
   12da4:	orr	r2, r2, r4
   12da8:	tst	r2, #1
   12dac:	bne	12df0 <__assert_fail@plt+0x1cd4>
   12db0:	ldr	r1, [sp, #88]	; 0x58
   12db4:	add	r2, r8, #1
   12db8:	mov	r4, #1
   12dbc:	cmp	r8, r1
   12dc0:	movcc	r1, #39	; 0x27
   12dc4:	strbcc	r1, [r5, r8]
   12dc8:	ldr	r1, [sp, #88]	; 0x58
   12dcc:	cmp	r2, r1
   12dd0:	movcc	r1, #36	; 0x24
   12dd4:	strbcc	r1, [r5, r2]
   12dd8:	ldr	r1, [sp, #88]	; 0x58
   12ddc:	add	r2, r8, #2
   12de0:	add	r8, r8, #3
   12de4:	cmp	r2, r1
   12de8:	movcc	r1, #39	; 0x27
   12dec:	strbcc	r1, [r5, r2]
   12df0:	ldr	r1, [sp, #88]	; 0x58
   12df4:	add	r2, r8, #1
   12df8:	cmp	r8, r1
   12dfc:	movcc	r1, #92	; 0x5c
   12e00:	strbcc	r1, [r5, r8]
   12e04:	ldr	r1, [sp, #88]	; 0x58
   12e08:	cmp	r2, r1
   12e0c:	bcs	12e20 <__assert_fail@plt+0x1d04>
   12e10:	uxtb	r3, r6
   12e14:	mov	r1, #48	; 0x30
   12e18:	orr	r3, r1, r3, lsr #6
   12e1c:	strb	r3, [r5, r2]
   12e20:	ldr	r1, [sp, #88]	; 0x58
   12e24:	add	r2, r8, #2
   12e28:	add	r8, r8, #3
   12e2c:	cmp	r2, r1
   12e30:	lsrcc	r3, r6, #3
   12e34:	movcc	r1, #6
   12e38:	bficc	r3, r1, #3, #29
   12e3c:	mov	r1, #6
   12e40:	bfi	r6, r1, #3, #29
   12e44:	strbcc	r3, [r5, r2]
   12e48:	mov	r2, #1
   12e4c:	b	12ecc <__assert_fail@plt+0x1db0>
   12e50:	ldr	r1, [sp, #88]	; 0x58
   12e54:	ldr	r5, [fp, #-84]	; 0xffffffac
   12e58:	ldr	r4, [sp, #88]	; 0x58
   12e5c:	cmp	r8, r1
   12e60:	movcc	r1, #39	; 0x27
   12e64:	strbcc	r1, [r5, r8]
   12e68:	add	r1, r8, #1
   12e6c:	add	r8, r8, #2
   12e70:	cmp	r1, r4
   12e74:	movcc	r4, #39	; 0x27
   12e78:	strbcc	r4, [r5, r1]
   12e7c:	mov	r4, #0
   12e80:	ldr	r1, [sp, #88]	; 0x58
   12e84:	cmp	r8, r1
   12e88:	ldr	r1, [sp, #72]	; 0x48
   12e8c:	strbcc	r6, [r5, r8]
   12e90:	add	r8, r8, #1
   12e94:	ldrb	r6, [r1, r7]
   12e98:	mov	r7, r3
   12e9c:	tst	r0, #1
   12ea0:	beq	12d8c <__assert_fail@plt+0x1c70>
   12ea4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ea8:	tst	r1, #1
   12eac:	beq	12ec4 <__assert_fail@plt+0x1da8>
   12eb0:	ldr	r1, [sp, #88]	; 0x58
   12eb4:	cmp	r8, r1
   12eb8:	movcc	r1, #92	; 0x5c
   12ebc:	strbcc	r1, [r5, r8]
   12ec0:	add	r8, r8, #1
   12ec4:	mov	r1, #0
   12ec8:	str	r1, [fp, #-52]	; 0xffffffcc
   12ecc:	ldr	r1, [sp, #44]	; 0x2c
   12ed0:	add	r3, r7, #1
   12ed4:	and	sl, r2, #1
   12ed8:	cmp	r1, r3
   12edc:	bls	12f00 <__assert_fail@plt+0x1de4>
   12ee0:	cmp	sl, #0
   12ee4:	mvn	r5, r4
   12ee8:	movwne	sl, #1
   12eec:	orr	r5, r5, sl
   12ef0:	tst	r5, #1
   12ef4:	beq	12e50 <__assert_fail@plt+0x1d34>
   12ef8:	ldr	r5, [fp, #-84]	; 0xffffffac
   12efc:	b	12e80 <__assert_fail@plt+0x1d64>
   12f00:	str	r4, [fp, #-56]	; 0xffffffc8
   12f04:	ldr	r4, [sp, #88]	; 0x58
   12f08:	cmp	sl, #0
   12f0c:	movwne	sl, #1
   12f10:	cmp	sl, #0
   12f14:	beq	12a70 <__assert_fail@plt+0x1954>
   12f18:	b	12aa4 <__assert_fail@plt+0x1988>
   12f1c:	mov	r9, #0
   12f20:	b	12f60 <__assert_fail@plt+0x1e44>
   12f24:	ldr	r0, [sp, #24]
   12f28:	mov	r9, #0
   12f2c:	cmp	lr, r0
   12f30:	bls	12f60 <__assert_fail@plt+0x1e44>
   12f34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f38:	ldr	r2, [sp, #44]	; 0x2c
   12f3c:	add	r0, ip, r7
   12f40:	ldrb	r1, [r0, r2]
   12f44:	cmp	r1, #0
   12f48:	beq	12a28 <__assert_fail@plt+0x190c>
   12f4c:	add	r2, r2, #1
   12f50:	add	r1, r7, r2
   12f54:	cmp	r1, lr
   12f58:	bcc	12f40 <__assert_fail@plt+0x1e24>
   12f5c:	b	12a28 <__assert_fail@plt+0x190c>
   12f60:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f64:	ldr	r2, [sp, #44]	; 0x2c
   12f68:	b	12a28 <__assert_fail@plt+0x190c>
   12f6c:	mov	lr, r7
   12f70:	b	12f78 <__assert_fail@plt+0x1e5c>
   12f74:	mvn	lr, #0
   12f78:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12f7c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f80:	eor	r0, r1, #2
   12f84:	orr	r0, r0, r8
   12f88:	clz	r0, r0
   12f8c:	lsr	r0, r0, #5
   12f90:	tst	r2, r0
   12f94:	bne	13038 <__assert_fail@plt+0x1f1c>
   12f98:	subs	r0, r1, #2
   12f9c:	movwne	r0, #1
   12fa0:	orr	r0, r2, r0
   12fa4:	tst	r0, #1
   12fa8:	ldreq	r0, [sp, #60]	; 0x3c
   12fac:	eoreq	r0, r0, #1
   12fb0:	tsteq	r0, #1
   12fb4:	bne	130cc <__assert_fail@plt+0x1fb0>
   12fb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12fbc:	mov	sl, lr
   12fc0:	tst	r0, #1
   12fc4:	bne	13098 <__assert_fail@plt+0x1f7c>
   12fc8:	ldr	r6, [sp, #56]	; 0x38
   12fcc:	mov	r9, #0
   12fd0:	cmp	r6, #0
   12fd4:	beq	130c4 <__assert_fail@plt+0x1fa8>
   12fd8:	ldr	r0, [sp, #84]	; 0x54
   12fdc:	mov	r1, #0
   12fe0:	mov	r7, #2
   12fe4:	cmp	r4, #0
   12fe8:	str	r1, [fp, #-48]	; 0xffffffd0
   12fec:	mov	r1, #0
   12ff0:	str	r1, [fp, #-76]	; 0xffffffb4
   12ff4:	beq	12194 <__assert_fail@plt+0x1078>
   12ff8:	b	130cc <__assert_fail@plt+0x1fb0>
   12ffc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13000:	ldr	r1, [fp, #12]
   13004:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13008:	mov	lr, r4
   1300c:	mov	r4, r6
   13010:	b	13058 <__assert_fail@plt+0x1f3c>
   13014:	tst	ip, #1
   13018:	ldr	r5, [fp, #-84]	; 0xffffffac
   1301c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13020:	ldr	r1, [fp, #12]
   13024:	mov	r0, #2
   13028:	movwne	r0, #4
   1302c:	mov	r2, r0
   13030:	b	13058 <__assert_fail@plt+0x1f3c>
   13034:	ldr	r4, [sp, #88]	; 0x58
   13038:	ldr	r1, [sp, #84]	; 0x54
   1303c:	mov	r0, #2
   13040:	tst	r1, #1
   13044:	movwne	r0, #4
   13048:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1304c:	ldr	r1, [fp, #12]
   13050:	cmp	r2, #2
   13054:	moveq	r2, r0
   13058:	mov	r0, #0
   1305c:	bic	r1, r1, #2
   13060:	str	r2, [sp]
   13064:	mov	r2, ip
   13068:	mov	r3, lr
   1306c:	str	r0, [sp, #8]
   13070:	ldr	r0, [sp, #76]	; 0x4c
   13074:	str	r1, [sp, #4]
   13078:	mov	r1, r4
   1307c:	str	r0, [sp, #12]
   13080:	ldr	r0, [sp, #80]	; 0x50
   13084:	str	r0, [sp, #16]
   13088:	mov	r0, r5
   1308c:	bl	12104 <__assert_fail@plt+0xfe8>
   13090:	mov	r8, r0
   13094:	b	13118 <__assert_fail@plt+0x1ffc>
   13098:	mov	r0, #5
   1309c:	ldr	r1, [sp, #56]	; 0x38
   130a0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   130a4:	mov	r3, sl
   130a8:	str	r0, [sp]
   130ac:	ldr	r0, [fp, #12]
   130b0:	str	r0, [sp, #4]
   130b4:	ldr	r0, [fp, #16]
   130b8:	str	r0, [sp, #8]
   130bc:	ldr	r0, [sp, #76]	; 0x4c
   130c0:	b	1307c <__assert_fail@plt+0x1f60>
   130c4:	mov	r0, #0
   130c8:	str	r0, [fp, #-76]	; 0xffffffb4
   130cc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   130d0:	cmp	r1, #0
   130d4:	beq	1310c <__assert_fail@plt+0x1ff0>
   130d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130dc:	tst	r0, #1
   130e0:	bne	1310c <__assert_fail@plt+0x1ff0>
   130e4:	ldrb	r0, [r1]
   130e8:	cmp	r0, #0
   130ec:	beq	1310c <__assert_fail@plt+0x1ff0>
   130f0:	add	r1, r1, #1
   130f4:	cmp	r8, r4
   130f8:	strbcc	r0, [r5, r8]
   130fc:	add	r8, r8, #1
   13100:	ldrb	r0, [r1], #1
   13104:	cmp	r0, #0
   13108:	bne	130f4 <__assert_fail@plt+0x1fd8>
   1310c:	cmp	r8, r4
   13110:	movcc	r0, #0
   13114:	strbcc	r0, [r5, r8]
   13118:	mov	r0, r8
   1311c:	sub	sp, fp, #28
   13120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13124:	mov	r0, #4
   13128:	b	13048 <__assert_fail@plt+0x1f2c>
   1312c:	bl	11104 <abort@plt>
   13130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13134:	add	fp, sp, #28
   13138:	sub	sp, sp, #28
   1313c:	movw	r5, #29080	; 0x7198
   13140:	cmp	r2, #0
   13144:	mov	r4, r1
   13148:	mov	r7, r0
   1314c:	str	r0, [sp, #20]
   13150:	movt	r5, #2
   13154:	movne	r5, r2
   13158:	bl	11038 <__errno_location@plt>
   1315c:	mov	sl, r0
   13160:	ldr	r2, [r5, #40]	; 0x28
   13164:	ldr	r3, [r5, #44]	; 0x2c
   13168:	ldm	r5, {r0, r1}
   1316c:	orr	r8, r1, #1
   13170:	add	r9, r5, #8
   13174:	mov	r1, #0
   13178:	ldr	r6, [sl]
   1317c:	stm	sp, {r0, r8, r9}
   13180:	mov	r0, #0
   13184:	str	r2, [sp, #12]
   13188:	str	r3, [sp, #16]
   1318c:	mov	r2, r7
   13190:	mov	r3, r4
   13194:	str	r6, [sp, #24]
   13198:	mov	r6, r4
   1319c:	bl	12104 <__assert_fail@plt+0xfe8>
   131a0:	add	r7, r0, #1
   131a4:	mov	r0, r7
   131a8:	bl	14350 <__assert_fail@plt+0x3234>
   131ac:	mov	r4, r0
   131b0:	ldr	r0, [r5]
   131b4:	ldr	r2, [r5, #44]	; 0x2c
   131b8:	ldr	r1, [r5, #40]	; 0x28
   131bc:	mov	r3, r6
   131c0:	stm	sp, {r0, r8, r9}
   131c4:	str	r2, [sp, #16]
   131c8:	ldr	r2, [sp, #20]
   131cc:	str	r1, [sp, #12]
   131d0:	mov	r0, r4
   131d4:	mov	r1, r7
   131d8:	bl	12104 <__assert_fail@plt+0xfe8>
   131dc:	ldr	r0, [sp, #24]
   131e0:	str	r0, [sl]
   131e4:	mov	r0, r4
   131e8:	sub	sp, fp, #28
   131ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f4:	add	fp, sp, #28
   131f8:	sub	sp, sp, #36	; 0x24
   131fc:	movw	r8, #29080	; 0x7198
   13200:	cmp	r3, #0
   13204:	mov	r4, r2
   13208:	str	r2, [sp, #24]
   1320c:	mov	r5, r1
   13210:	mov	r6, r0
   13214:	str	r0, [sp, #20]
   13218:	movt	r8, #2
   1321c:	movne	r8, r3
   13220:	bl	11038 <__errno_location@plt>
   13224:	str	r0, [sp, #28]
   13228:	ldr	r1, [r8, #40]	; 0x28
   1322c:	ldr	r2, [r8, #44]	; 0x2c
   13230:	ldr	r7, [r0]
   13234:	cmp	r4, #0
   13238:	add	sl, r8, #8
   1323c:	mov	r0, #0
   13240:	ldm	r8, {r3, r9}
   13244:	orreq	r9, r9, #1
   13248:	stm	sp, {r3, r9, sl}
   1324c:	str	r1, [sp, #12]
   13250:	str	r2, [sp, #16]
   13254:	mov	r1, #0
   13258:	mov	r2, r6
   1325c:	mov	r3, r5
   13260:	str	r7, [sp, #32]
   13264:	mov	r7, r5
   13268:	bl	12104 <__assert_fail@plt+0xfe8>
   1326c:	add	r4, r0, #1
   13270:	mov	r5, r0
   13274:	mov	r0, r4
   13278:	bl	14350 <__assert_fail@plt+0x3234>
   1327c:	mov	r6, r0
   13280:	ldr	r0, [r8]
   13284:	ldr	r2, [r8, #44]	; 0x2c
   13288:	ldr	r1, [r8, #40]	; 0x28
   1328c:	mov	r3, r7
   13290:	stm	sp, {r0, r9, sl}
   13294:	str	r2, [sp, #16]
   13298:	ldr	r2, [sp, #20]
   1329c:	str	r1, [sp, #12]
   132a0:	mov	r0, r6
   132a4:	mov	r1, r4
   132a8:	bl	12104 <__assert_fail@plt+0xfe8>
   132ac:	ldr	r0, [sp, #24]
   132b0:	ldr	r1, [sp, #32]
   132b4:	ldr	r2, [sp, #28]
   132b8:	cmp	r0, #0
   132bc:	str	r1, [r2]
   132c0:	strne	r5, [r0]
   132c4:	mov	r0, r6
   132c8:	sub	sp, fp, #28
   132cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   132d4:	add	fp, sp, #24
   132d8:	movw	r5, #28932	; 0x7104
   132dc:	movw	r8, #28928	; 0x7100
   132e0:	movt	r5, #2
   132e4:	movt	r8, #2
   132e8:	ldr	r0, [r5]
   132ec:	ldr	r4, [r8]
   132f0:	cmp	r0, #2
   132f4:	blt	13320 <__assert_fail@plt+0x2204>
   132f8:	add	r7, r4, #12
   132fc:	mov	r6, #0
   13300:	ldr	r0, [r7, r6, lsl #3]
   13304:	bl	11ea0 <__assert_fail@plt+0xd84>
   13308:	ldr	r1, [r5]
   1330c:	add	r2, r6, #2
   13310:	add	r0, r6, #1
   13314:	mov	r6, r0
   13318:	cmp	r2, r1
   1331c:	blt	13300 <__assert_fail@plt+0x21e4>
   13320:	ldr	r0, [r4, #4]
   13324:	movw	r9, #29128	; 0x71c8
   13328:	movw	r7, #28936	; 0x7108
   1332c:	movt	r9, #2
   13330:	movt	r7, #2
   13334:	cmp	r0, r9
   13338:	beq	13348 <__assert_fail@plt+0x222c>
   1333c:	bl	11ea0 <__assert_fail@plt+0xd84>
   13340:	mov	r0, #256	; 0x100
   13344:	stm	r7, {r0, r9}
   13348:	cmp	r4, r7
   1334c:	beq	1335c <__assert_fail@plt+0x2240>
   13350:	mov	r0, r4
   13354:	bl	11ea0 <__assert_fail@plt+0xd84>
   13358:	str	r7, [r8]
   1335c:	mov	r0, #1
   13360:	str	r0, [r5]
   13364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13368:	movw	r3, #29080	; 0x7198
   1336c:	mvn	r2, #0
   13370:	movt	r3, #2
   13374:	b	13378 <__assert_fail@plt+0x225c>
   13378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1337c:	add	fp, sp, #28
   13380:	sub	sp, sp, #44	; 0x2c
   13384:	mov	r7, r3
   13388:	str	r2, [sp, #36]	; 0x24
   1338c:	str	r1, [sp, #32]
   13390:	mov	r5, r0
   13394:	bl	11038 <__errno_location@plt>
   13398:	cmp	r5, #0
   1339c:	bmi	1350c <__assert_fail@plt+0x23f0>
   133a0:	cmn	r5, #-2147483647	; 0x80000001
   133a4:	beq	1350c <__assert_fail@plt+0x23f0>
   133a8:	movw	r8, #28932	; 0x7104
   133ac:	movw	r4, #28928	; 0x7100
   133b0:	str	r0, [sp, #28]
   133b4:	ldr	r0, [r0]
   133b8:	movt	r8, #2
   133bc:	movt	r4, #2
   133c0:	ldr	r1, [r8]
   133c4:	ldr	r6, [r4]
   133c8:	str	r0, [sp, #24]
   133cc:	cmp	r1, r5
   133d0:	ble	133dc <__assert_fail@plt+0x22c0>
   133d4:	mov	sl, r6
   133d8:	b	13448 <__assert_fail@plt+0x232c>
   133dc:	movw	r9, #28936	; 0x7108
   133e0:	mov	r0, #8
   133e4:	str	r1, [fp, #-32]	; 0xffffffe0
   133e8:	sub	r1, r5, r1
   133ec:	mvn	r3, #-2147483648	; 0x80000000
   133f0:	movt	r9, #2
   133f4:	str	r0, [sp]
   133f8:	add	r2, r1, #1
   133fc:	sub	r1, fp, #32
   13400:	subs	r0, r6, r9
   13404:	movne	r0, r6
   13408:	bl	14550 <__assert_fail@plt+0x3434>
   1340c:	mov	sl, r0
   13410:	cmp	r6, r9
   13414:	str	r0, [r4]
   13418:	bne	13424 <__assert_fail@plt+0x2308>
   1341c:	ldrd	r0, [r9]
   13420:	stm	sl, {r0, r1}
   13424:	ldr	r1, [r8]
   13428:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1342c:	add	r0, sl, r1, lsl #3
   13430:	sub	r1, r2, r1
   13434:	lsl	r2, r1, #3
   13438:	mov	r1, #0
   1343c:	bl	11050 <memset@plt>
   13440:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13444:	str	r0, [r8]
   13448:	mov	r9, sl
   1344c:	ldm	r7, {r0, r1}
   13450:	orr	r8, r1, #1
   13454:	add	r1, r7, #8
   13458:	ldr	r2, [r7, #40]	; 0x28
   1345c:	ldr	r3, [r7, #44]	; 0x2c
   13460:	ldr	r6, [r9, r5, lsl #3]!
   13464:	str	r1, [sp, #20]
   13468:	ldr	r4, [r9, #4]!
   1346c:	stm	sp, {r0, r8}
   13470:	add	r0, sp, #8
   13474:	stm	r0, {r1, r2, r3}
   13478:	ldr	r2, [sp, #32]
   1347c:	ldr	r3, [sp, #36]	; 0x24
   13480:	mov	r1, r6
   13484:	mov	r0, r4
   13488:	bl	12104 <__assert_fail@plt+0xfe8>
   1348c:	cmp	r6, r0
   13490:	bhi	134f4 <__assert_fail@plt+0x23d8>
   13494:	add	r6, r0, #1
   13498:	movw	r0, #29128	; 0x71c8
   1349c:	movt	r0, #2
   134a0:	str	r6, [sl, r5, lsl #3]
   134a4:	cmp	r4, r0
   134a8:	beq	134b4 <__assert_fail@plt+0x2398>
   134ac:	mov	r0, r4
   134b0:	bl	11ea0 <__assert_fail@plt+0xd84>
   134b4:	mov	r0, r6
   134b8:	bl	14350 <__assert_fail@plt+0x3234>
   134bc:	str	r0, [r9]
   134c0:	mov	r4, r0
   134c4:	add	r3, sp, #8
   134c8:	ldr	r0, [r7]
   134cc:	ldr	r1, [r7, #40]	; 0x28
   134d0:	ldr	r2, [r7, #44]	; 0x2c
   134d4:	stm	sp, {r0, r8}
   134d8:	ldr	r0, [sp, #20]
   134dc:	stm	r3, {r0, r1, r2}
   134e0:	ldr	r2, [sp, #32]
   134e4:	ldr	r3, [sp, #36]	; 0x24
   134e8:	mov	r0, r4
   134ec:	mov	r1, r6
   134f0:	bl	12104 <__assert_fail@plt+0xfe8>
   134f4:	ldr	r0, [sp, #28]
   134f8:	ldr	r1, [sp, #24]
   134fc:	str	r1, [r0]
   13500:	mov	r0, r4
   13504:	sub	sp, fp, #28
   13508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1350c:	bl	11104 <abort@plt>
   13510:	movw	r3, #29080	; 0x7198
   13514:	movt	r3, #2
   13518:	b	13378 <__assert_fail@plt+0x225c>
   1351c:	movw	r3, #29080	; 0x7198
   13520:	mov	r1, r0
   13524:	mov	r0, #0
   13528:	mvn	r2, #0
   1352c:	movt	r3, #2
   13530:	b	13378 <__assert_fail@plt+0x225c>
   13534:	movw	r3, #29080	; 0x7198
   13538:	mov	r2, r1
   1353c:	mov	r1, r0
   13540:	mov	r0, #0
   13544:	movt	r3, #2
   13548:	b	13378 <__assert_fail@plt+0x225c>
   1354c:	push	{fp, lr}
   13550:	mov	fp, sp
   13554:	sub	sp, sp, #48	; 0x30
   13558:	vmov.i32	q8, #0	; 0x00000000
   1355c:	mov	ip, #32
   13560:	mov	r3, sp
   13564:	mov	lr, r2
   13568:	cmp	r1, #10
   1356c:	add	r2, r3, #16
   13570:	vst1.64	{d16-d17}, [r3], ip
   13574:	vst1.64	{d16-d17}, [r2]
   13578:	vst1.64	{d16-d17}, [r3]
   1357c:	beq	1359c <__assert_fail@plt+0x2480>
   13580:	str	r1, [sp]
   13584:	mov	r3, sp
   13588:	mov	r1, lr
   1358c:	mvn	r2, #0
   13590:	bl	13378 <__assert_fail@plt+0x225c>
   13594:	mov	sp, fp
   13598:	pop	{fp, pc}
   1359c:	bl	11104 <abort@plt>
   135a0:	push	{r4, sl, fp, lr}
   135a4:	add	fp, sp, #8
   135a8:	sub	sp, sp, #48	; 0x30
   135ac:	vmov.i32	q8, #0	; 0x00000000
   135b0:	mov	ip, r3
   135b4:	mov	r3, sp
   135b8:	mov	lr, #32
   135bc:	cmp	r1, #10
   135c0:	add	r4, r3, #16
   135c4:	vst1.64	{d16-d17}, [r3], lr
   135c8:	vst1.64	{d16-d17}, [r4]
   135cc:	vst1.64	{d16-d17}, [r3]
   135d0:	beq	135f0 <__assert_fail@plt+0x24d4>
   135d4:	str	r1, [sp]
   135d8:	mov	r1, r2
   135dc:	mov	r3, sp
   135e0:	mov	r2, ip
   135e4:	bl	13378 <__assert_fail@plt+0x225c>
   135e8:	sub	sp, fp, #8
   135ec:	pop	{r4, sl, fp, pc}
   135f0:	bl	11104 <abort@plt>
   135f4:	push	{fp, lr}
   135f8:	mov	fp, sp
   135fc:	sub	sp, sp, #48	; 0x30
   13600:	vmov.i32	q8, #0	; 0x00000000
   13604:	mov	r3, sp
   13608:	mov	ip, #32
   1360c:	cmp	r0, #10
   13610:	add	r2, r3, #16
   13614:	vst1.64	{d16-d17}, [r3], ip
   13618:	vst1.64	{d16-d17}, [r2]
   1361c:	vst1.64	{d16-d17}, [r3]
   13620:	beq	13640 <__assert_fail@plt+0x2524>
   13624:	str	r0, [sp]
   13628:	mov	r3, sp
   1362c:	mov	r0, #0
   13630:	mvn	r2, #0
   13634:	bl	13378 <__assert_fail@plt+0x225c>
   13638:	mov	sp, fp
   1363c:	pop	{fp, pc}
   13640:	bl	11104 <abort@plt>
   13644:	push	{fp, lr}
   13648:	mov	fp, sp
   1364c:	sub	sp, sp, #48	; 0x30
   13650:	vmov.i32	q8, #0	; 0x00000000
   13654:	mov	r3, sp
   13658:	mov	ip, #32
   1365c:	cmp	r0, #10
   13660:	add	lr, r3, #16
   13664:	vst1.64	{d16-d17}, [r3], ip
   13668:	vst1.64	{d16-d17}, [lr]
   1366c:	vst1.64	{d16-d17}, [r3]
   13670:	beq	1368c <__assert_fail@plt+0x2570>
   13674:	str	r0, [sp]
   13678:	mov	r3, sp
   1367c:	mov	r0, #0
   13680:	bl	13378 <__assert_fail@plt+0x225c>
   13684:	mov	sp, fp
   13688:	pop	{fp, pc}
   1368c:	bl	11104 <abort@plt>
   13690:	push	{r4, sl, fp, lr}
   13694:	add	fp, sp, #8
   13698:	sub	sp, sp, #48	; 0x30
   1369c:	mov	lr, r0
   136a0:	movw	r0, #29080	; 0x7198
   136a4:	mov	ip, r1
   136a8:	mov	r1, #32
   136ac:	mov	r4, #1
   136b0:	movt	r0, #2
   136b4:	add	r3, r0, #16
   136b8:	vld1.64	{d16-d17}, [r0], r1
   136bc:	vld1.64	{d20-d21}, [r0]
   136c0:	vld1.64	{d18-d19}, [r3]
   136c4:	mov	r3, sp
   136c8:	add	r0, r3, #32
   136cc:	add	r1, r3, #16
   136d0:	vst1.64	{d20-d21}, [r0]
   136d4:	mov	r0, #28
   136d8:	vst1.64	{d18-d19}, [r1]
   136dc:	mov	r1, r3
   136e0:	and	r0, r0, r2, lsr #3
   136e4:	and	r2, r2, #31
   136e8:	vst1.64	{d16-d17}, [r1], r0
   136ec:	ldr	r0, [r1, #8]
   136f0:	bic	r4, r4, r0, lsr r2
   136f4:	eor	r0, r0, r4, lsl r2
   136f8:	mov	r2, ip
   136fc:	str	r0, [r1, #8]
   13700:	mov	r0, #0
   13704:	mov	r1, lr
   13708:	bl	13378 <__assert_fail@plt+0x225c>
   1370c:	sub	sp, fp, #8
   13710:	pop	{r4, sl, fp, pc}
   13714:	push	{fp, lr}
   13718:	mov	fp, sp
   1371c:	sub	sp, sp, #48	; 0x30
   13720:	mov	ip, r0
   13724:	movw	r0, #29080	; 0x7198
   13728:	mov	r2, #32
   1372c:	movt	r0, #2
   13730:	add	r3, r0, #16
   13734:	vld1.64	{d16-d17}, [r0], r2
   13738:	vld1.64	{d20-d21}, [r0]
   1373c:	vld1.64	{d18-d19}, [r3]
   13740:	mov	r3, sp
   13744:	add	r0, r3, #32
   13748:	add	r2, r3, #16
   1374c:	vst1.64	{d20-d21}, [r0]
   13750:	mov	r0, #28
   13754:	vst1.64	{d18-d19}, [r2]
   13758:	mov	r2, r3
   1375c:	and	r0, r0, r1, lsr #3
   13760:	and	r1, r1, #31
   13764:	vst1.64	{d16-d17}, [r2], r0
   13768:	mov	r0, #1
   1376c:	ldr	lr, [r2, #8]
   13770:	bic	r0, r0, lr, lsr r1
   13774:	eor	r0, lr, r0, lsl r1
   13778:	mov	r1, ip
   1377c:	str	r0, [r2, #8]
   13780:	mov	r0, #0
   13784:	mvn	r2, #0
   13788:	bl	13378 <__assert_fail@plt+0x225c>
   1378c:	mov	sp, fp
   13790:	pop	{fp, pc}
   13794:	push	{fp, lr}
   13798:	mov	fp, sp
   1379c:	sub	sp, sp, #48	; 0x30
   137a0:	mov	r1, r0
   137a4:	movw	r0, #29080	; 0x7198
   137a8:	mov	r3, #32
   137ac:	movt	r0, #2
   137b0:	add	r2, r0, #16
   137b4:	vld1.64	{d16-d17}, [r0], r3
   137b8:	mov	r3, sp
   137bc:	vld1.64	{d18-d19}, [r2]
   137c0:	vld1.64	{d20-d21}, [r0]
   137c4:	add	r2, r3, #16
   137c8:	add	r0, r3, #32
   137cc:	vst1.64	{d18-d19}, [r2]
   137d0:	vst1.64	{d20-d21}, [r0]
   137d4:	mov	r0, #12
   137d8:	mov	r2, r3
   137dc:	vst1.64	{d16-d17}, [r2], r0
   137e0:	ldr	r0, [r2]
   137e4:	orr	r0, r0, #67108864	; 0x4000000
   137e8:	str	r0, [r2]
   137ec:	mov	r0, #0
   137f0:	mvn	r2, #0
   137f4:	bl	13378 <__assert_fail@plt+0x225c>
   137f8:	mov	sp, fp
   137fc:	pop	{fp, pc}
   13800:	push	{fp, lr}
   13804:	mov	fp, sp
   13808:	sub	sp, sp, #48	; 0x30
   1380c:	mov	ip, r1
   13810:	mov	r1, r0
   13814:	movw	r0, #29080	; 0x7198
   13818:	mov	r2, #32
   1381c:	movt	r0, #2
   13820:	add	r3, r0, #16
   13824:	vld1.64	{d16-d17}, [r0], r2
   13828:	vld1.64	{d18-d19}, [r3]
   1382c:	vld1.64	{d20-d21}, [r0]
   13830:	mov	r3, sp
   13834:	add	r2, r3, #16
   13838:	add	r0, r3, #32
   1383c:	vst1.64	{d18-d19}, [r2]
   13840:	vst1.64	{d20-d21}, [r0]
   13844:	mov	r0, #12
   13848:	mov	r2, r3
   1384c:	vst1.64	{d16-d17}, [r2], r0
   13850:	ldr	r0, [r2]
   13854:	orr	r0, r0, #67108864	; 0x4000000
   13858:	str	r0, [r2]
   1385c:	mov	r0, #0
   13860:	mov	r2, ip
   13864:	bl	13378 <__assert_fail@plt+0x225c>
   13868:	mov	sp, fp
   1386c:	pop	{fp, pc}
   13870:	push	{r4, sl, fp, lr}
   13874:	add	fp, sp, #8
   13878:	sub	sp, sp, #96	; 0x60
   1387c:	vmov.i32	q8, #0	; 0x00000000
   13880:	mov	ip, r2
   13884:	mov	r2, sp
   13888:	mov	r4, #28
   1388c:	cmp	r1, #10
   13890:	mov	r3, r2
   13894:	add	lr, r2, #16
   13898:	vst1.64	{d16-d17}, [r3], r4
   1389c:	vst1.64	{d16-d17}, [lr]
   138a0:	vst1.32	{d16-d17}, [r3]
   138a4:	beq	138f4 <__assert_fail@plt+0x27d8>
   138a8:	vld1.64	{d16-d17}, [r2], r4
   138ac:	vld1.64	{d18-d19}, [lr]
   138b0:	add	r3, sp, #48	; 0x30
   138b4:	vld1.32	{d20-d21}, [r2]
   138b8:	add	r2, r3, #20
   138bc:	add	r4, r3, #4
   138c0:	vst1.32	{d18-d19}, [r2]
   138c4:	add	r2, r3, #32
   138c8:	vst1.32	{d16-d17}, [r4]
   138cc:	vst1.32	{d20-d21}, [r2]
   138d0:	str	r1, [sp, #48]	; 0x30
   138d4:	mvn	r2, #0
   138d8:	ldr	r1, [sp, #60]	; 0x3c
   138dc:	orr	r1, r1, #67108864	; 0x4000000
   138e0:	str	r1, [sp, #60]	; 0x3c
   138e4:	mov	r1, ip
   138e8:	bl	13378 <__assert_fail@plt+0x225c>
   138ec:	sub	sp, fp, #8
   138f0:	pop	{r4, sl, fp, pc}
   138f4:	bl	11104 <abort@plt>
   138f8:	push	{r4, r5, r6, sl, fp, lr}
   138fc:	add	fp, sp, #16
   13900:	sub	sp, sp, #48	; 0x30
   13904:	mov	ip, r3
   13908:	movw	r3, #29080	; 0x7198
   1390c:	mov	r6, #32
   13910:	cmp	r1, #0
   13914:	mov	r4, sp
   13918:	movt	r3, #2
   1391c:	cmpne	r2, #0
   13920:	add	r5, r4, #16
   13924:	add	lr, r3, #16
   13928:	vld1.64	{d16-d17}, [r3], r6
   1392c:	vld1.64	{d18-d19}, [lr]
   13930:	vld1.64	{d20-d21}, [r3]
   13934:	mov	r3, #10
   13938:	vst1.64	{d16-d17}, [r4], r6
   1393c:	vst1.64	{d18-d19}, [r5]
   13940:	vst1.64	{d20-d21}, [r4]
   13944:	str	r3, [sp]
   13948:	bne	13950 <__assert_fail@plt+0x2834>
   1394c:	bl	11104 <abort@plt>
   13950:	str	r2, [sp, #44]	; 0x2c
   13954:	str	r1, [sp, #40]	; 0x28
   13958:	mov	r3, sp
   1395c:	mov	r1, ip
   13960:	mvn	r2, #0
   13964:	bl	13378 <__assert_fail@plt+0x225c>
   13968:	sub	sp, fp, #16
   1396c:	pop	{r4, r5, r6, sl, fp, pc}
   13970:	push	{r4, r5, r6, sl, fp, lr}
   13974:	add	fp, sp, #16
   13978:	sub	sp, sp, #48	; 0x30
   1397c:	mov	lr, r3
   13980:	movw	r3, #29080	; 0x7198
   13984:	mov	r6, #32
   13988:	cmp	r1, #0
   1398c:	mov	r4, sp
   13990:	movt	r3, #2
   13994:	cmpne	r2, #0
   13998:	add	r5, r4, #16
   1399c:	add	ip, r3, #16
   139a0:	vld1.64	{d16-d17}, [r3], r6
   139a4:	vld1.64	{d18-d19}, [ip]
   139a8:	vld1.64	{d20-d21}, [r3]
   139ac:	mov	r3, #10
   139b0:	vst1.64	{d16-d17}, [r4], r6
   139b4:	vst1.64	{d18-d19}, [r5]
   139b8:	vst1.64	{d20-d21}, [r4]
   139bc:	str	r3, [sp]
   139c0:	bne	139c8 <__assert_fail@plt+0x28ac>
   139c4:	bl	11104 <abort@plt>
   139c8:	ldr	ip, [fp, #8]
   139cc:	str	r2, [sp, #44]	; 0x2c
   139d0:	str	r1, [sp, #40]	; 0x28
   139d4:	mov	r3, sp
   139d8:	mov	r1, lr
   139dc:	mov	r2, ip
   139e0:	bl	13378 <__assert_fail@plt+0x225c>
   139e4:	sub	sp, fp, #16
   139e8:	pop	{r4, r5, r6, sl, fp, pc}
   139ec:	push	{r4, sl, fp, lr}
   139f0:	add	fp, sp, #8
   139f4:	sub	sp, sp, #48	; 0x30
   139f8:	movw	r3, #29080	; 0x7198
   139fc:	mov	lr, #32
   13a00:	mov	ip, r2
   13a04:	cmp	r0, #0
   13a08:	movt	r3, #2
   13a0c:	cmpne	r1, #0
   13a10:	add	r2, r3, #16
   13a14:	vld1.64	{d16-d17}, [r3], lr
   13a18:	vld1.64	{d20-d21}, [r3]
   13a1c:	vld1.64	{d18-d19}, [r2]
   13a20:	mov	r2, sp
   13a24:	add	r4, r2, #16
   13a28:	vst1.64	{d16-d17}, [r2], lr
   13a2c:	vst1.64	{d20-d21}, [r2]
   13a30:	mov	r2, #10
   13a34:	vst1.64	{d18-d19}, [r4]
   13a38:	str	r2, [sp]
   13a3c:	bne	13a44 <__assert_fail@plt+0x2928>
   13a40:	bl	11104 <abort@plt>
   13a44:	str	r1, [sp, #44]	; 0x2c
   13a48:	str	r0, [sp, #40]	; 0x28
   13a4c:	mov	r3, sp
   13a50:	mov	r0, #0
   13a54:	mov	r1, ip
   13a58:	mvn	r2, #0
   13a5c:	bl	13378 <__assert_fail@plt+0x225c>
   13a60:	sub	sp, fp, #8
   13a64:	pop	{r4, sl, fp, pc}
   13a68:	push	{r4, r5, fp, lr}
   13a6c:	add	fp, sp, #8
   13a70:	sub	sp, sp, #48	; 0x30
   13a74:	mov	ip, r3
   13a78:	movw	r3, #29080	; 0x7198
   13a7c:	mov	r4, #32
   13a80:	mov	lr, r2
   13a84:	cmp	r0, #0
   13a88:	movt	r3, #2
   13a8c:	cmpne	r1, #0
   13a90:	add	r2, r3, #16
   13a94:	vld1.64	{d16-d17}, [r3], r4
   13a98:	vld1.64	{d20-d21}, [r3]
   13a9c:	vld1.64	{d18-d19}, [r2]
   13aa0:	mov	r2, sp
   13aa4:	add	r5, r2, #16
   13aa8:	vst1.64	{d16-d17}, [r2], r4
   13aac:	vst1.64	{d20-d21}, [r2]
   13ab0:	mov	r2, #10
   13ab4:	vst1.64	{d18-d19}, [r5]
   13ab8:	str	r2, [sp]
   13abc:	bne	13ac4 <__assert_fail@plt+0x29a8>
   13ac0:	bl	11104 <abort@plt>
   13ac4:	str	r1, [sp, #44]	; 0x2c
   13ac8:	str	r0, [sp, #40]	; 0x28
   13acc:	mov	r3, sp
   13ad0:	mov	r0, #0
   13ad4:	mov	r1, lr
   13ad8:	mov	r2, ip
   13adc:	bl	13378 <__assert_fail@plt+0x225c>
   13ae0:	sub	sp, fp, #8
   13ae4:	pop	{r4, r5, fp, pc}
   13ae8:	movw	r3, #28944	; 0x7110
   13aec:	movt	r3, #2
   13af0:	b	13378 <__assert_fail@plt+0x225c>
   13af4:	movw	r3, #28944	; 0x7110
   13af8:	mov	r2, r1
   13afc:	mov	r1, r0
   13b00:	mov	r0, #0
   13b04:	movt	r3, #2
   13b08:	b	13378 <__assert_fail@plt+0x225c>
   13b0c:	movw	r3, #28944	; 0x7110
   13b10:	mvn	r2, #0
   13b14:	movt	r3, #2
   13b18:	b	13378 <__assert_fail@plt+0x225c>
   13b1c:	movw	r3, #28944	; 0x7110
   13b20:	mov	r1, r0
   13b24:	mov	r0, #0
   13b28:	mvn	r2, #0
   13b2c:	movt	r3, #2
   13b30:	b	13378 <__assert_fail@plt+0x225c>
   13b34:	push	{r4, r5, fp, lr}
   13b38:	add	fp, sp, #8
   13b3c:	mov	r5, r0
   13b40:	mov	r4, r1
   13b44:	mov	r0, #0
   13b48:	mov	r2, #5
   13b4c:	mov	r1, r5
   13b50:	bl	10f18 <dcgettext@plt>
   13b54:	cmp	r0, r5
   13b58:	popne	{r4, r5, fp, pc}
   13b5c:	bl	15af8 <__assert_fail@plt+0x49dc>
   13b60:	ldrb	r1, [r0]
   13b64:	and	r1, r1, #223	; 0xdf
   13b68:	cmp	r1, #71	; 0x47
   13b6c:	beq	13bd4 <__assert_fail@plt+0x2ab8>
   13b70:	cmp	r1, #85	; 0x55
   13b74:	bne	13c2c <__assert_fail@plt+0x2b10>
   13b78:	ldrb	r1, [r0, #1]
   13b7c:	and	r1, r1, #223	; 0xdf
   13b80:	cmp	r1, #84	; 0x54
   13b84:	bne	13c2c <__assert_fail@plt+0x2b10>
   13b88:	ldrb	r1, [r0, #2]
   13b8c:	and	r1, r1, #223	; 0xdf
   13b90:	cmp	r1, #70	; 0x46
   13b94:	bne	13c2c <__assert_fail@plt+0x2b10>
   13b98:	ldrb	r1, [r0, #3]
   13b9c:	cmp	r1, #45	; 0x2d
   13ba0:	bne	13c2c <__assert_fail@plt+0x2b10>
   13ba4:	ldrb	r1, [r0, #4]
   13ba8:	cmp	r1, #56	; 0x38
   13bac:	bne	13c2c <__assert_fail@plt+0x2b10>
   13bb0:	ldrb	r0, [r0, #5]
   13bb4:	cmp	r0, #0
   13bb8:	bne	13c2c <__assert_fail@plt+0x2b10>
   13bbc:	ldrb	r1, [r5]
   13bc0:	movw	r2, #26624	; 0x6800
   13bc4:	movw	r0, #26628	; 0x6804
   13bc8:	movt	r2, #1
   13bcc:	movt	r0, #1
   13bd0:	b	13c5c <__assert_fail@plt+0x2b40>
   13bd4:	ldrb	r1, [r0, #1]
   13bd8:	and	r1, r1, #223	; 0xdf
   13bdc:	cmp	r1, #66	; 0x42
   13be0:	bne	13c2c <__assert_fail@plt+0x2b10>
   13be4:	ldrb	r1, [r0, #2]
   13be8:	cmp	r1, #49	; 0x31
   13bec:	bne	13c2c <__assert_fail@plt+0x2b10>
   13bf0:	ldrb	r1, [r0, #3]
   13bf4:	cmp	r1, #56	; 0x38
   13bf8:	bne	13c2c <__assert_fail@plt+0x2b10>
   13bfc:	ldrb	r1, [r0, #4]
   13c00:	cmp	r1, #48	; 0x30
   13c04:	bne	13c2c <__assert_fail@plt+0x2b10>
   13c08:	ldrb	r1, [r0, #5]
   13c0c:	cmp	r1, #51	; 0x33
   13c10:	bne	13c2c <__assert_fail@plt+0x2b10>
   13c14:	ldrb	r1, [r0, #6]
   13c18:	cmp	r1, #48	; 0x30
   13c1c:	bne	13c2c <__assert_fail@plt+0x2b10>
   13c20:	ldrb	r0, [r0, #7]
   13c24:	cmp	r0, #0
   13c28:	beq	13c48 <__assert_fail@plt+0x2b2c>
   13c2c:	movw	r1, #26618	; 0x67fa
   13c30:	movw	r0, #26622	; 0x67fe
   13c34:	cmp	r4, #9
   13c38:	movt	r1, #1
   13c3c:	movt	r0, #1
   13c40:	moveq	r0, r1
   13c44:	pop	{r4, r5, fp, pc}
   13c48:	ldrb	r1, [r5]
   13c4c:	movw	r2, #26632	; 0x6808
   13c50:	movw	r0, #26636	; 0x680c
   13c54:	movt	r2, #1
   13c58:	movt	r0, #1
   13c5c:	cmp	r1, #96	; 0x60
   13c60:	moveq	r0, r2
   13c64:	pop	{r4, r5, fp, pc}
   13c68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c6c:	add	fp, sp, #24
   13c70:	sub	sp, sp, #32
   13c74:	ldr	r6, [fp, #12]
   13c78:	ldr	r7, [fp, #8]
   13c7c:	mov	r4, r2
   13c80:	mov	r8, r0
   13c84:	cmp	r1, #0
   13c88:	beq	13cb0 <__assert_fail@plt+0x2b94>
   13c8c:	movw	r2, #26724	; 0x6864
   13c90:	mov	r5, r1
   13c94:	str	r3, [sp, #4]
   13c98:	str	r4, [sp]
   13c9c:	mov	r0, r8
   13ca0:	mov	r1, #1
   13ca4:	movt	r2, #1
   13ca8:	mov	r3, r5
   13cac:	b	13cc8 <__assert_fail@plt+0x2bac>
   13cb0:	movw	r2, #26736	; 0x6870
   13cb4:	str	r3, [sp]
   13cb8:	mov	r0, r8
   13cbc:	mov	r1, #1
   13cc0:	mov	r3, r4
   13cc4:	movt	r2, #1
   13cc8:	bl	11074 <__fprintf_chk@plt>
   13ccc:	movw	r1, #26743	; 0x6877
   13cd0:	mov	r0, #0
   13cd4:	mov	r2, #5
   13cd8:	movt	r1, #1
   13cdc:	bl	10f18 <dcgettext@plt>
   13ce0:	movw	r2, #27461	; 0x6b45
   13ce4:	mov	r3, r0
   13ce8:	movw	r0, #2022	; 0x7e6
   13cec:	mov	r1, #1
   13cf0:	movt	r2, #1
   13cf4:	str	r0, [sp]
   13cf8:	mov	r0, r8
   13cfc:	bl	11074 <__fprintf_chk@plt>
   13d00:	movw	r4, #26068	; 0x65d4
   13d04:	mov	r1, r8
   13d08:	movt	r4, #1
   13d0c:	mov	r0, r4
   13d10:	bl	10ea0 <fputs_unlocked@plt>
   13d14:	movw	r1, #26747	; 0x687b
   13d18:	mov	r0, #0
   13d1c:	mov	r2, #5
   13d20:	movt	r1, #1
   13d24:	bl	10f18 <dcgettext@plt>
   13d28:	movw	r3, #26918	; 0x6926
   13d2c:	mov	r2, r0
   13d30:	mov	r0, r8
   13d34:	mov	r1, #1
   13d38:	movt	r3, #1
   13d3c:	bl	11074 <__fprintf_chk@plt>
   13d40:	mov	r0, r4
   13d44:	mov	r1, r8
   13d48:	bl	10ea0 <fputs_unlocked@plt>
   13d4c:	cmp	r6, #9
   13d50:	bhi	13d8c <__assert_fail@plt+0x2c70>
   13d54:	add	r0, pc, #0
   13d58:	ldr	pc, [r0, r6, lsl #2]
   13d5c:	andeq	r3, r1, r4, lsl #27
   13d60:	muleq	r1, r8, sp
   13d64:	andeq	r3, r1, r8, asr #27
   13d68:	strdeq	r3, [r1], -r0
   13d6c:	andeq	r3, r1, r8, lsl lr
   13d70:	andeq	r3, r1, r0, asr #28
   13d74:	andeq	r3, r1, r8, ror #28
   13d78:	andeq	r3, r1, r0, lsr #29
   13d7c:	andeq	r3, r1, r0, asr #30
   13d80:	andeq	r3, r1, r8, ror #29
   13d84:	sub	sp, fp, #24
   13d88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d8c:	movw	r1, #27271	; 0x6a87
   13d90:	movt	r1, #1
   13d94:	b	13ef0 <__assert_fail@plt+0x2dd4>
   13d98:	movw	r1, #26952	; 0x6948
   13d9c:	mov	r0, #0
   13da0:	mov	r2, #5
   13da4:	movt	r1, #1
   13da8:	bl	10f18 <dcgettext@plt>
   13dac:	ldr	r3, [r7]
   13db0:	mov	r2, r0
   13db4:	mov	r0, r8
   13db8:	mov	r1, #1
   13dbc:	sub	sp, fp, #24
   13dc0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13dc4:	b	11074 <__fprintf_chk@plt>
   13dc8:	movw	r1, #26968	; 0x6958
   13dcc:	mov	r0, #0
   13dd0:	mov	r2, #5
   13dd4:	movt	r1, #1
   13dd8:	bl	10f18 <dcgettext@plt>
   13ddc:	mov	r2, r0
   13de0:	ldr	r3, [r7]
   13de4:	ldr	r0, [r7, #4]
   13de8:	str	r0, [sp]
   13dec:	b	13edc <__assert_fail@plt+0x2dc0>
   13df0:	movw	r1, #26991	; 0x696f
   13df4:	mov	r0, #0
   13df8:	mov	r2, #5
   13dfc:	movt	r1, #1
   13e00:	bl	10f18 <dcgettext@plt>
   13e04:	mov	r2, r0
   13e08:	ldr	r3, [r7]
   13e0c:	ldmib	r7, {r0, r1}
   13e10:	stm	sp, {r0, r1}
   13e14:	b	13edc <__assert_fail@plt+0x2dc0>
   13e18:	movw	r1, #27019	; 0x698b
   13e1c:	mov	r0, #0
   13e20:	mov	r2, #5
   13e24:	movt	r1, #1
   13e28:	bl	10f18 <dcgettext@plt>
   13e2c:	ldr	r3, [r7]
   13e30:	mov	r2, r0
   13e34:	ldmib	r7, {r0, r1, r7}
   13e38:	stm	sp, {r0, r1, r7}
   13e3c:	b	13edc <__assert_fail@plt+0x2dc0>
   13e40:	movw	r1, #27051	; 0x69ab
   13e44:	mov	r0, #0
   13e48:	mov	r2, #5
   13e4c:	movt	r1, #1
   13e50:	bl	10f18 <dcgettext@plt>
   13e54:	ldr	r3, [r7]
   13e58:	mov	r2, r0
   13e5c:	ldmib	r7, {r0, r1, r6, r7}
   13e60:	stm	sp, {r0, r1, r6, r7}
   13e64:	b	13edc <__assert_fail@plt+0x2dc0>
   13e68:	movw	r1, #27087	; 0x69cf
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	movt	r1, #1
   13e78:	bl	10f18 <dcgettext@plt>
   13e7c:	mov	r2, r0
   13e80:	ldr	r3, [r7]
   13e84:	ldmib	r7, {r0, r1, r6}
   13e88:	ldr	r5, [r7, #16]
   13e8c:	ldr	r7, [r7, #20]
   13e90:	stm	sp, {r0, r1, r6}
   13e94:	str	r5, [sp, #12]
   13e98:	str	r7, [sp, #16]
   13e9c:	b	13edc <__assert_fail@plt+0x2dc0>
   13ea0:	movw	r1, #27127	; 0x69f7
   13ea4:	mov	r0, #0
   13ea8:	mov	r2, #5
   13eac:	movt	r1, #1
   13eb0:	bl	10f18 <dcgettext@plt>
   13eb4:	mov	r2, r0
   13eb8:	ldr	r3, [r7]
   13ebc:	ldmib	r7, {r0, r1, r6}
   13ec0:	ldr	r5, [r7, #16]
   13ec4:	ldr	r4, [r7, #20]
   13ec8:	ldr	r7, [r7, #24]
   13ecc:	stm	sp, {r0, r1, r6}
   13ed0:	str	r5, [sp, #12]
   13ed4:	str	r4, [sp, #16]
   13ed8:	str	r7, [sp, #20]
   13edc:	mov	r0, r8
   13ee0:	mov	r1, #1
   13ee4:	b	13f90 <__assert_fail@plt+0x2e74>
   13ee8:	movw	r1, #27219	; 0x6a53
   13eec:	movt	r1, #1
   13ef0:	mov	r0, #0
   13ef4:	mov	r2, #5
   13ef8:	bl	10f18 <dcgettext@plt>
   13efc:	mov	ip, r0
   13f00:	ldr	r3, [r7]
   13f04:	ldr	r0, [r7, #4]
   13f08:	ldr	r1, [r7, #8]
   13f0c:	ldr	r6, [r7, #12]
   13f10:	ldr	r5, [r7, #16]
   13f14:	ldr	r4, [r7, #20]
   13f18:	ldr	r2, [r7, #24]
   13f1c:	ldr	lr, [r7, #28]
   13f20:	ldr	r7, [r7, #32]
   13f24:	stm	sp, {r0, r1, r6}
   13f28:	str	r5, [sp, #12]
   13f2c:	str	r4, [sp, #16]
   13f30:	str	r2, [sp, #20]
   13f34:	str	lr, [sp, #24]
   13f38:	str	r7, [sp, #28]
   13f3c:	b	13f84 <__assert_fail@plt+0x2e68>
   13f40:	movw	r1, #27171	; 0x6a23
   13f44:	mov	r0, #0
   13f48:	mov	r2, #5
   13f4c:	movt	r1, #1
   13f50:	bl	10f18 <dcgettext@plt>
   13f54:	mov	ip, r0
   13f58:	ldr	r3, [r7]
   13f5c:	ldmib	r7, {r0, r1, r6}
   13f60:	ldr	r5, [r7, #16]
   13f64:	ldr	r4, [r7, #20]
   13f68:	ldr	r2, [r7, #24]
   13f6c:	ldr	r7, [r7, #28]
   13f70:	stm	sp, {r0, r1, r6}
   13f74:	str	r5, [sp, #12]
   13f78:	str	r4, [sp, #16]
   13f7c:	str	r2, [sp, #20]
   13f80:	str	r7, [sp, #24]
   13f84:	mov	r0, r8
   13f88:	mov	r1, #1
   13f8c:	mov	r2, ip
   13f90:	bl	11074 <__fprintf_chk@plt>
   13f94:	sub	sp, fp, #24
   13f98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f9c:	push	{r4, sl, fp, lr}
   13fa0:	add	fp, sp, #8
   13fa4:	sub	sp, sp, #8
   13fa8:	ldr	ip, [fp, #8]
   13fac:	mov	lr, #0
   13fb0:	ldr	r4, [ip, lr, lsl #2]
   13fb4:	add	lr, lr, #1
   13fb8:	cmp	r4, #0
   13fbc:	bne	13fb0 <__assert_fail@plt+0x2e94>
   13fc0:	sub	r4, lr, #1
   13fc4:	str	ip, [sp]
   13fc8:	str	r4, [sp, #4]
   13fcc:	bl	13c68 <__assert_fail@plt+0x2b4c>
   13fd0:	sub	sp, fp, #8
   13fd4:	pop	{r4, sl, fp, pc}
   13fd8:	push	{fp, lr}
   13fdc:	mov	fp, sp
   13fe0:	sub	sp, sp, #48	; 0x30
   13fe4:	ldr	ip, [fp, #8]
   13fe8:	ldr	lr, [ip]
   13fec:	cmp	lr, #0
   13ff0:	str	lr, [sp, #8]
   13ff4:	beq	14090 <__assert_fail@plt+0x2f74>
   13ff8:	ldr	lr, [ip, #4]
   13ffc:	cmp	lr, #0
   14000:	str	lr, [sp, #12]
   14004:	beq	14098 <__assert_fail@plt+0x2f7c>
   14008:	ldr	lr, [ip, #8]
   1400c:	cmp	lr, #0
   14010:	str	lr, [sp, #16]
   14014:	beq	140a0 <__assert_fail@plt+0x2f84>
   14018:	ldr	lr, [ip, #12]
   1401c:	cmp	lr, #0
   14020:	str	lr, [sp, #20]
   14024:	beq	140a8 <__assert_fail@plt+0x2f8c>
   14028:	ldr	lr, [ip, #16]
   1402c:	cmp	lr, #0
   14030:	str	lr, [sp, #24]
   14034:	beq	140b0 <__assert_fail@plt+0x2f94>
   14038:	ldr	lr, [ip, #20]
   1403c:	cmp	lr, #0
   14040:	str	lr, [sp, #28]
   14044:	beq	140b8 <__assert_fail@plt+0x2f9c>
   14048:	ldr	lr, [ip, #24]
   1404c:	cmp	lr, #0
   14050:	str	lr, [sp, #32]
   14054:	beq	140c0 <__assert_fail@plt+0x2fa4>
   14058:	ldr	lr, [ip, #28]
   1405c:	cmp	lr, #0
   14060:	str	lr, [sp, #36]	; 0x24
   14064:	beq	140c8 <__assert_fail@plt+0x2fac>
   14068:	ldr	lr, [ip, #32]
   1406c:	cmp	lr, #0
   14070:	str	lr, [sp, #40]	; 0x28
   14074:	beq	140d0 <__assert_fail@plt+0x2fb4>
   14078:	ldr	lr, [ip, #36]	; 0x24
   1407c:	mov	ip, #10
   14080:	cmp	lr, #0
   14084:	str	lr, [sp, #44]	; 0x2c
   14088:	movweq	ip, #9
   1408c:	b	140d4 <__assert_fail@plt+0x2fb8>
   14090:	mov	ip, #0
   14094:	b	140d4 <__assert_fail@plt+0x2fb8>
   14098:	mov	ip, #1
   1409c:	b	140d4 <__assert_fail@plt+0x2fb8>
   140a0:	mov	ip, #2
   140a4:	b	140d4 <__assert_fail@plt+0x2fb8>
   140a8:	mov	ip, #3
   140ac:	b	140d4 <__assert_fail@plt+0x2fb8>
   140b0:	mov	ip, #4
   140b4:	b	140d4 <__assert_fail@plt+0x2fb8>
   140b8:	mov	ip, #5
   140bc:	b	140d4 <__assert_fail@plt+0x2fb8>
   140c0:	mov	ip, #6
   140c4:	b	140d4 <__assert_fail@plt+0x2fb8>
   140c8:	mov	ip, #7
   140cc:	b	140d4 <__assert_fail@plt+0x2fb8>
   140d0:	mov	ip, #8
   140d4:	add	lr, sp, #8
   140d8:	str	ip, [sp, #4]
   140dc:	str	lr, [sp]
   140e0:	bl	13c68 <__assert_fail@plt+0x2b4c>
   140e4:	mov	sp, fp
   140e8:	pop	{fp, pc}
   140ec:	push	{fp, lr}
   140f0:	mov	fp, sp
   140f4:	sub	sp, sp, #56	; 0x38
   140f8:	add	ip, fp, #8
   140fc:	str	ip, [sp, #12]
   14100:	ldr	lr, [fp, #8]
   14104:	cmp	lr, #0
   14108:	str	lr, [sp, #16]
   1410c:	beq	141a8 <__assert_fail@plt+0x308c>
   14110:	ldr	lr, [ip, #4]
   14114:	cmp	lr, #0
   14118:	str	lr, [sp, #20]
   1411c:	beq	141b0 <__assert_fail@plt+0x3094>
   14120:	ldr	lr, [ip, #8]
   14124:	cmp	lr, #0
   14128:	str	lr, [sp, #24]
   1412c:	beq	141b8 <__assert_fail@plt+0x309c>
   14130:	ldr	lr, [ip, #12]
   14134:	cmp	lr, #0
   14138:	str	lr, [sp, #28]
   1413c:	beq	141c0 <__assert_fail@plt+0x30a4>
   14140:	ldr	lr, [ip, #16]
   14144:	cmp	lr, #0
   14148:	str	lr, [sp, #32]
   1414c:	beq	141c8 <__assert_fail@plt+0x30ac>
   14150:	ldr	lr, [ip, #20]
   14154:	cmp	lr, #0
   14158:	str	lr, [sp, #36]	; 0x24
   1415c:	beq	141d0 <__assert_fail@plt+0x30b4>
   14160:	ldr	lr, [ip, #24]
   14164:	cmp	lr, #0
   14168:	str	lr, [sp, #40]	; 0x28
   1416c:	beq	141d8 <__assert_fail@plt+0x30bc>
   14170:	ldr	lr, [ip, #28]
   14174:	cmp	lr, #0
   14178:	str	lr, [sp, #44]	; 0x2c
   1417c:	beq	141e0 <__assert_fail@plt+0x30c4>
   14180:	ldr	lr, [ip, #32]
   14184:	cmp	lr, #0
   14188:	str	lr, [sp, #48]	; 0x30
   1418c:	beq	141e8 <__assert_fail@plt+0x30cc>
   14190:	ldr	lr, [ip, #36]	; 0x24
   14194:	mov	ip, #10
   14198:	cmp	lr, #0
   1419c:	str	lr, [sp, #52]	; 0x34
   141a0:	movweq	ip, #9
   141a4:	b	141ec <__assert_fail@plt+0x30d0>
   141a8:	mov	ip, #0
   141ac:	b	141ec <__assert_fail@plt+0x30d0>
   141b0:	mov	ip, #1
   141b4:	b	141ec <__assert_fail@plt+0x30d0>
   141b8:	mov	ip, #2
   141bc:	b	141ec <__assert_fail@plt+0x30d0>
   141c0:	mov	ip, #3
   141c4:	b	141ec <__assert_fail@plt+0x30d0>
   141c8:	mov	ip, #4
   141cc:	b	141ec <__assert_fail@plt+0x30d0>
   141d0:	mov	ip, #5
   141d4:	b	141ec <__assert_fail@plt+0x30d0>
   141d8:	mov	ip, #6
   141dc:	b	141ec <__assert_fail@plt+0x30d0>
   141e0:	mov	ip, #7
   141e4:	b	141ec <__assert_fail@plt+0x30d0>
   141e8:	mov	ip, #8
   141ec:	add	lr, sp, #16
   141f0:	str	ip, [sp, #4]
   141f4:	str	lr, [sp]
   141f8:	bl	13c68 <__assert_fail@plt+0x2b4c>
   141fc:	mov	sp, fp
   14200:	pop	{fp, pc}
   14204:	push	{fp, lr}
   14208:	mov	fp, sp
   1420c:	movw	r0, #29012	; 0x7154
   14210:	movt	r0, #2
   14214:	ldr	r1, [r0]
   14218:	movw	r0, #26068	; 0x65d4
   1421c:	movt	r0, #1
   14220:	bl	10ea0 <fputs_unlocked@plt>
   14224:	movw	r1, #27331	; 0x6ac3
   14228:	mov	r0, #0
   1422c:	mov	r2, #5
   14230:	movt	r1, #1
   14234:	bl	10f18 <dcgettext@plt>
   14238:	movw	r2, #27351	; 0x6ad7
   1423c:	mov	r1, r0
   14240:	mov	r0, #1
   14244:	movt	r2, #1
   14248:	bl	1105c <__printf_chk@plt>
   1424c:	movw	r1, #27373	; 0x6aed
   14250:	mov	r0, #0
   14254:	mov	r2, #5
   14258:	movt	r1, #1
   1425c:	bl	10f18 <dcgettext@plt>
   14260:	movw	r2, #25549	; 0x63cd
   14264:	movw	r3, #25877	; 0x6515
   14268:	mov	r1, r0
   1426c:	mov	r0, #1
   14270:	movt	r2, #1
   14274:	movt	r3, #1
   14278:	bl	1105c <__printf_chk@plt>
   1427c:	movw	r1, #27393	; 0x6b01
   14280:	mov	r0, #0
   14284:	mov	r2, #5
   14288:	movt	r1, #1
   1428c:	bl	10f18 <dcgettext@plt>
   14290:	movw	r2, #27432	; 0x6b28
   14294:	mov	r1, r0
   14298:	mov	r0, #1
   1429c:	movt	r2, #1
   142a0:	pop	{fp, lr}
   142a4:	b	1105c <__printf_chk@plt>
   142a8:	push	{r4, r5, r6, sl, fp, lr}
   142ac:	add	fp, sp, #16
   142b0:	mov	r4, r2
   142b4:	mov	r5, r1
   142b8:	mov	r6, r0
   142bc:	bl	15b94 <__assert_fail@plt+0x4a78>
   142c0:	cmp	r0, #0
   142c4:	popne	{r4, r5, r6, sl, fp, pc}
   142c8:	cmp	r6, #0
   142cc:	beq	142e0 <__assert_fail@plt+0x31c4>
   142d0:	cmp	r5, #0
   142d4:	cmpne	r4, #0
   142d8:	bne	142e0 <__assert_fail@plt+0x31c4>
   142dc:	pop	{r4, r5, r6, sl, fp, pc}
   142e0:	bl	1485c <__assert_fail@plt+0x3740>
   142e4:	push	{r4, r5, r6, sl, fp, lr}
   142e8:	add	fp, sp, #16
   142ec:	mov	r4, r2
   142f0:	mov	r5, r1
   142f4:	mov	r6, r0
   142f8:	bl	15b94 <__assert_fail@plt+0x4a78>
   142fc:	cmp	r0, #0
   14300:	popne	{r4, r5, r6, sl, fp, pc}
   14304:	cmp	r6, #0
   14308:	beq	1431c <__assert_fail@plt+0x3200>
   1430c:	cmp	r5, #0
   14310:	cmpne	r4, #0
   14314:	bne	1431c <__assert_fail@plt+0x3200>
   14318:	pop	{r4, r5, r6, sl, fp, pc}
   1431c:	bl	1485c <__assert_fail@plt+0x3740>
   14320:	push	{fp, lr}
   14324:	mov	fp, sp
   14328:	bl	155c8 <__assert_fail@plt+0x44ac>
   1432c:	cmp	r0, #0
   14330:	popne	{fp, pc}
   14334:	bl	1485c <__assert_fail@plt+0x3740>
   14338:	push	{fp, lr}
   1433c:	mov	fp, sp
   14340:	bl	155c8 <__assert_fail@plt+0x44ac>
   14344:	cmp	r0, #0
   14348:	popne	{fp, pc}
   1434c:	bl	1485c <__assert_fail@plt+0x3740>
   14350:	push	{fp, lr}
   14354:	mov	fp, sp
   14358:	bl	155c8 <__assert_fail@plt+0x44ac>
   1435c:	cmp	r0, #0
   14360:	popne	{fp, pc}
   14364:	bl	1485c <__assert_fail@plt+0x3740>
   14368:	push	{r4, r5, fp, lr}
   1436c:	add	fp, sp, #8
   14370:	mov	r4, r1
   14374:	mov	r5, r0
   14378:	bl	155f8 <__assert_fail@plt+0x44dc>
   1437c:	cmp	r0, #0
   14380:	popne	{r4, r5, fp, pc}
   14384:	cmp	r5, #0
   14388:	beq	14398 <__assert_fail@plt+0x327c>
   1438c:	cmp	r4, #0
   14390:	bne	14398 <__assert_fail@plt+0x327c>
   14394:	pop	{r4, r5, fp, pc}
   14398:	bl	1485c <__assert_fail@plt+0x3740>
   1439c:	push	{fp, lr}
   143a0:	mov	fp, sp
   143a4:	cmp	r1, #0
   143a8:	orreq	r1, r1, #1
   143ac:	bl	155f8 <__assert_fail@plt+0x44dc>
   143b0:	cmp	r0, #0
   143b4:	popne	{fp, pc}
   143b8:	bl	1485c <__assert_fail@plt+0x3740>
   143bc:	push	{fp, lr}
   143c0:	mov	fp, sp
   143c4:	clz	r3, r2
   143c8:	lsr	ip, r3, #5
   143cc:	clz	r3, r1
   143d0:	lsr	r3, r3, #5
   143d4:	orrs	r3, r3, ip
   143d8:	movwne	r1, #1
   143dc:	movwne	r2, #1
   143e0:	bl	15b94 <__assert_fail@plt+0x4a78>
   143e4:	cmp	r0, #0
   143e8:	popne	{fp, pc}
   143ec:	bl	1485c <__assert_fail@plt+0x3740>
   143f0:	push	{fp, lr}
   143f4:	mov	fp, sp
   143f8:	mov	r2, r1
   143fc:	mov	r1, r0
   14400:	mov	r0, #0
   14404:	bl	15b94 <__assert_fail@plt+0x4a78>
   14408:	cmp	r0, #0
   1440c:	popne	{fp, pc}
   14410:	bl	1485c <__assert_fail@plt+0x3740>
   14414:	push	{fp, lr}
   14418:	mov	fp, sp
   1441c:	mov	r2, r1
   14420:	mov	r1, r0
   14424:	clz	r0, r2
   14428:	clz	r3, r1
   1442c:	lsr	r0, r0, #5
   14430:	lsr	r3, r3, #5
   14434:	orrs	r0, r3, r0
   14438:	mov	r0, #0
   1443c:	movwne	r1, #1
   14440:	movwne	r2, #1
   14444:	bl	15b94 <__assert_fail@plt+0x4a78>
   14448:	cmp	r0, #0
   1444c:	popne	{fp, pc}
   14450:	bl	1485c <__assert_fail@plt+0x3740>
   14454:	push	{r4, r5, r6, sl, fp, lr}
   14458:	add	fp, sp, #16
   1445c:	ldr	r5, [r1]
   14460:	mov	r4, r1
   14464:	mov	r6, r0
   14468:	cmp	r0, #0
   1446c:	beq	14484 <__assert_fail@plt+0x3368>
   14470:	mov	r0, #1
   14474:	add	r0, r0, r5, lsr #1
   14478:	adds	r5, r5, r0
   1447c:	bcc	1448c <__assert_fail@plt+0x3370>
   14480:	b	144c8 <__assert_fail@plt+0x33ac>
   14484:	cmp	r5, #0
   14488:	movweq	r5, #64	; 0x40
   1448c:	mov	r0, r6
   14490:	mov	r1, r5
   14494:	mov	r2, #1
   14498:	bl	15b94 <__assert_fail@plt+0x4a78>
   1449c:	cmp	r5, #0
   144a0:	mov	r1, r5
   144a4:	movwne	r1, #1
   144a8:	cmp	r0, #0
   144ac:	bne	144c0 <__assert_fail@plt+0x33a4>
   144b0:	clz	r2, r6
   144b4:	lsr	r2, r2, #5
   144b8:	orrs	r1, r2, r1
   144bc:	bne	144c8 <__assert_fail@plt+0x33ac>
   144c0:	str	r5, [r4]
   144c4:	pop	{r4, r5, r6, sl, fp, pc}
   144c8:	bl	1485c <__assert_fail@plt+0x3740>
   144cc:	push	{r4, r5, r6, r7, fp, lr}
   144d0:	add	fp, sp, #16
   144d4:	ldr	r5, [r1]
   144d8:	mov	r6, r2
   144dc:	mov	r4, r1
   144e0:	mov	r7, r0
   144e4:	cmp	r0, #0
   144e8:	beq	14500 <__assert_fail@plt+0x33e4>
   144ec:	mov	r0, #1
   144f0:	add	r0, r0, r5, lsr #1
   144f4:	adds	r5, r5, r0
   144f8:	bcc	14518 <__assert_fail@plt+0x33fc>
   144fc:	b	1454c <__assert_fail@plt+0x3430>
   14500:	cmp	r5, #0
   14504:	bne	14518 <__assert_fail@plt+0x33fc>
   14508:	mov	r0, #64	; 0x40
   1450c:	cmp	r6, #64	; 0x40
   14510:	udiv	r5, r0, r6
   14514:	addhi	r5, r5, #1
   14518:	mov	r0, r7
   1451c:	mov	r1, r5
   14520:	mov	r2, r6
   14524:	bl	15b94 <__assert_fail@plt+0x4a78>
   14528:	cmp	r0, #0
   1452c:	bne	14544 <__assert_fail@plt+0x3428>
   14530:	cmp	r7, #0
   14534:	beq	1454c <__assert_fail@plt+0x3430>
   14538:	cmp	r6, #0
   1453c:	cmpne	r5, #0
   14540:	bne	1454c <__assert_fail@plt+0x3430>
   14544:	str	r5, [r4]
   14548:	pop	{r4, r5, r6, r7, fp, pc}
   1454c:	bl	1485c <__assert_fail@plt+0x3740>
   14550:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14554:	add	fp, sp, #24
   14558:	mov	r8, r1
   1455c:	ldr	r1, [r1]
   14560:	mov	r5, r0
   14564:	add	r0, r1, r1, asr #1
   14568:	cmp	r0, r1
   1456c:	mvnvs	r0, #-2147483648	; 0x80000000
   14570:	cmp	r0, r3
   14574:	mov	r7, r0
   14578:	movgt	r7, r3
   1457c:	cmn	r3, #1
   14580:	movle	r7, r0
   14584:	ldr	r0, [fp, #8]
   14588:	cmn	r0, #1
   1458c:	ble	145b4 <__assert_fail@plt+0x3498>
   14590:	cmp	r0, #0
   14594:	beq	14608 <__assert_fail@plt+0x34ec>
   14598:	cmn	r7, #1
   1459c:	ble	145dc <__assert_fail@plt+0x34c0>
   145a0:	mvn	r4, #-2147483648	; 0x80000000
   145a4:	udiv	r6, r4, r0
   145a8:	cmp	r6, r7
   145ac:	bge	14608 <__assert_fail@plt+0x34ec>
   145b0:	b	14618 <__assert_fail@plt+0x34fc>
   145b4:	cmn	r7, #1
   145b8:	ble	145f8 <__assert_fail@plt+0x34dc>
   145bc:	cmn	r0, #1
   145c0:	beq	14608 <__assert_fail@plt+0x34ec>
   145c4:	mov	r6, #-2147483648	; 0x80000000
   145c8:	mvn	r4, #-2147483648	; 0x80000000
   145cc:	sdiv	r6, r6, r0
   145d0:	cmp	r6, r7
   145d4:	bge	14608 <__assert_fail@plt+0x34ec>
   145d8:	b	14618 <__assert_fail@plt+0x34fc>
   145dc:	beq	14608 <__assert_fail@plt+0x34ec>
   145e0:	mov	r6, #-2147483648	; 0x80000000
   145e4:	mvn	r4, #-2147483648	; 0x80000000
   145e8:	sdiv	r6, r6, r7
   145ec:	cmp	r6, r0
   145f0:	bge	14608 <__assert_fail@plt+0x34ec>
   145f4:	b	14618 <__assert_fail@plt+0x34fc>
   145f8:	mvn	r4, #-2147483648	; 0x80000000
   145fc:	sdiv	r6, r4, r0
   14600:	cmp	r7, r6
   14604:	blt	14618 <__assert_fail@plt+0x34fc>
   14608:	mul	r6, r7, r0
   1460c:	mov	r4, #64	; 0x40
   14610:	cmp	r6, #63	; 0x3f
   14614:	bgt	14620 <__assert_fail@plt+0x3504>
   14618:	sdiv	r7, r4, r0
   1461c:	mul	r6, r7, r0
   14620:	cmp	r5, #0
   14624:	moveq	r4, #0
   14628:	streq	r4, [r8]
   1462c:	sub	r4, r7, r1
   14630:	cmp	r4, r2
   14634:	bge	146e0 <__assert_fail@plt+0x35c4>
   14638:	add	r7, r1, r2
   1463c:	mov	r6, #0
   14640:	mov	r2, #0
   14644:	cmp	r7, r3
   14648:	movwgt	r6, #1
   1464c:	cmn	r3, #1
   14650:	movwgt	r2, #1
   14654:	cmp	r7, r1
   14658:	bvs	14714 <__assert_fail@plt+0x35f8>
   1465c:	ands	r1, r2, r6
   14660:	bne	14714 <__assert_fail@plt+0x35f8>
   14664:	cmn	r0, #1
   14668:	ble	14690 <__assert_fail@plt+0x3574>
   1466c:	cmp	r0, #0
   14670:	beq	146dc <__assert_fail@plt+0x35c0>
   14674:	cmn	r7, #1
   14678:	ble	146b4 <__assert_fail@plt+0x3598>
   1467c:	mvn	r1, #-2147483648	; 0x80000000
   14680:	udiv	r1, r1, r0
   14684:	cmp	r1, r7
   14688:	bge	146dc <__assert_fail@plt+0x35c0>
   1468c:	b	14714 <__assert_fail@plt+0x35f8>
   14690:	cmn	r7, #1
   14694:	ble	146cc <__assert_fail@plt+0x35b0>
   14698:	cmn	r0, #1
   1469c:	beq	146dc <__assert_fail@plt+0x35c0>
   146a0:	mov	r1, #-2147483648	; 0x80000000
   146a4:	sdiv	r1, r1, r0
   146a8:	cmp	r1, r7
   146ac:	bge	146dc <__assert_fail@plt+0x35c0>
   146b0:	b	14714 <__assert_fail@plt+0x35f8>
   146b4:	beq	146dc <__assert_fail@plt+0x35c0>
   146b8:	mov	r1, #-2147483648	; 0x80000000
   146bc:	sdiv	r1, r1, r7
   146c0:	cmp	r1, r0
   146c4:	bge	146dc <__assert_fail@plt+0x35c0>
   146c8:	b	14714 <__assert_fail@plt+0x35f8>
   146cc:	mvn	r1, #-2147483648	; 0x80000000
   146d0:	sdiv	r1, r1, r0
   146d4:	cmp	r7, r1
   146d8:	blt	14714 <__assert_fail@plt+0x35f8>
   146dc:	mul	r6, r7, r0
   146e0:	mov	r0, r5
   146e4:	mov	r1, r6
   146e8:	bl	155f8 <__assert_fail@plt+0x44dc>
   146ec:	cmp	r6, #0
   146f0:	movwne	r6, #1
   146f4:	cmp	r0, #0
   146f8:	bne	1470c <__assert_fail@plt+0x35f0>
   146fc:	clz	r1, r5
   14700:	lsr	r1, r1, #5
   14704:	orrs	r1, r1, r6
   14708:	bne	14714 <__assert_fail@plt+0x35f8>
   1470c:	str	r7, [r8]
   14710:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14714:	bl	1485c <__assert_fail@plt+0x3740>
   14718:	push	{fp, lr}
   1471c:	mov	fp, sp
   14720:	mov	r1, #1
   14724:	bl	15574 <__assert_fail@plt+0x4458>
   14728:	cmp	r0, #0
   1472c:	popne	{fp, pc}
   14730:	bl	1485c <__assert_fail@plt+0x3740>
   14734:	push	{fp, lr}
   14738:	mov	fp, sp
   1473c:	bl	15574 <__assert_fail@plt+0x4458>
   14740:	cmp	r0, #0
   14744:	popne	{fp, pc}
   14748:	bl	1485c <__assert_fail@plt+0x3740>
   1474c:	push	{fp, lr}
   14750:	mov	fp, sp
   14754:	mov	r1, #1
   14758:	bl	15574 <__assert_fail@plt+0x4458>
   1475c:	cmp	r0, #0
   14760:	popne	{fp, pc}
   14764:	bl	1485c <__assert_fail@plt+0x3740>
   14768:	push	{fp, lr}
   1476c:	mov	fp, sp
   14770:	bl	15574 <__assert_fail@plt+0x4458>
   14774:	cmp	r0, #0
   14778:	popne	{fp, pc}
   1477c:	bl	1485c <__assert_fail@plt+0x3740>
   14780:	push	{r4, r5, fp, lr}
   14784:	add	fp, sp, #8
   14788:	mov	r5, r0
   1478c:	mov	r0, r1
   14790:	mov	r4, r1
   14794:	bl	155c8 <__assert_fail@plt+0x44ac>
   14798:	cmp	r0, #0
   1479c:	beq	147b0 <__assert_fail@plt+0x3694>
   147a0:	mov	r1, r5
   147a4:	mov	r2, r4
   147a8:	pop	{r4, r5, fp, lr}
   147ac:	b	10ee8 <memcpy@plt>
   147b0:	bl	1485c <__assert_fail@plt+0x3740>
   147b4:	push	{r4, r5, fp, lr}
   147b8:	add	fp, sp, #8
   147bc:	mov	r5, r0
   147c0:	mov	r0, r1
   147c4:	mov	r4, r1
   147c8:	bl	155c8 <__assert_fail@plt+0x44ac>
   147cc:	cmp	r0, #0
   147d0:	beq	147e4 <__assert_fail@plt+0x36c8>
   147d4:	mov	r1, r5
   147d8:	mov	r2, r4
   147dc:	pop	{r4, r5, fp, lr}
   147e0:	b	10ee8 <memcpy@plt>
   147e4:	bl	1485c <__assert_fail@plt+0x3740>
   147e8:	push	{r4, r5, fp, lr}
   147ec:	add	fp, sp, #8
   147f0:	mov	r5, r0
   147f4:	add	r0, r1, #1
   147f8:	mov	r4, r1
   147fc:	bl	155c8 <__assert_fail@plt+0x44ac>
   14800:	cmp	r0, #0
   14804:	beq	14820 <__assert_fail@plt+0x3704>
   14808:	mov	r1, #0
   1480c:	mov	r2, r4
   14810:	strb	r1, [r0, r4]
   14814:	mov	r1, r5
   14818:	pop	{r4, r5, fp, lr}
   1481c:	b	10ee8 <memcpy@plt>
   14820:	bl	1485c <__assert_fail@plt+0x3740>
   14824:	push	{r4, r5, fp, lr}
   14828:	add	fp, sp, #8
   1482c:	mov	r4, r0
   14830:	bl	11020 <strlen@plt>
   14834:	add	r5, r0, #1
   14838:	mov	r0, r5
   1483c:	bl	155c8 <__assert_fail@plt+0x44ac>
   14840:	cmp	r0, #0
   14844:	beq	14858 <__assert_fail@plt+0x373c>
   14848:	mov	r1, r4
   1484c:	mov	r2, r5
   14850:	pop	{r4, r5, fp, lr}
   14854:	b	10ee8 <memcpy@plt>
   14858:	bl	1485c <__assert_fail@plt+0x3740>
   1485c:	push	{fp, lr}
   14860:	mov	fp, sp
   14864:	movw	r0, #28924	; 0x70fc
   14868:	movw	r1, #27508	; 0x6b74
   1486c:	mov	r2, #5
   14870:	movt	r0, #2
   14874:	movt	r1, #1
   14878:	ldr	r4, [r0]
   1487c:	mov	r0, #0
   14880:	bl	10f18 <dcgettext@plt>
   14884:	movw	r2, #26471	; 0x6767
   14888:	mov	r3, r0
   1488c:	mov	r0, r4
   14890:	mov	r1, #0
   14894:	movt	r2, #1
   14898:	bl	10f90 <error@plt>
   1489c:	bl	11104 <abort@plt>
   148a0:	push	{r4, sl, fp, lr}
   148a4:	add	fp, sp, #8
   148a8:	bl	1564c <__assert_fail@plt+0x4530>
   148ac:	mov	r4, r0
   148b0:	cmp	r0, #0
   148b4:	bne	148c8 <__assert_fail@plt+0x37ac>
   148b8:	bl	11038 <__errno_location@plt>
   148bc:	ldr	r0, [r0]
   148c0:	cmp	r0, #12
   148c4:	beq	148d0 <__assert_fail@plt+0x37b4>
   148c8:	mov	r0, r4
   148cc:	pop	{r4, sl, fp, pc}
   148d0:	bl	1485c <__assert_fail@plt+0x3740>
   148d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d8:	add	fp, sp, #28
   148dc:	sub	sp, sp, #44	; 0x2c
   148e0:	cmp	r2, #37	; 0x25
   148e4:	bcs	15554 <__assert_fail@plt+0x4438>
   148e8:	ldr	sl, [fp, #8]
   148ec:	mov	r6, r2
   148f0:	mov	r7, r1
   148f4:	mov	r4, r0
   148f8:	str	r3, [sp, #36]	; 0x24
   148fc:	bl	11038 <__errno_location@plt>
   14900:	mov	r5, r0
   14904:	mov	r0, #0
   14908:	str	r0, [r5]
   1490c:	bl	10ffc <__ctype_b_loc@plt>
   14910:	ldr	r1, [r0]
   14914:	mov	r2, r4
   14918:	ldrb	r0, [r2], #1
   1491c:	add	r3, r1, r0, lsl #1
   14920:	ldrb	r3, [r3, #1]
   14924:	tst	r3, #32
   14928:	bne	14918 <__assert_fail@plt+0x37fc>
   1492c:	cmp	r7, #0
   14930:	sub	r9, fp, #32
   14934:	mov	r8, #4
   14938:	movne	r9, r7
   1493c:	cmp	r0, #45	; 0x2d
   14940:	beq	15548 <__assert_fail@plt+0x442c>
   14944:	mov	r0, r4
   14948:	mov	r1, r9
   1494c:	mov	r2, r6
   14950:	mov	r3, #0
   14954:	bl	10f00 <__strtoull_internal@plt>
   14958:	mov	r7, r1
   1495c:	ldr	r1, [r9]
   14960:	cmp	r1, r4
   14964:	beq	14990 <__assert_fail@plt+0x3874>
   14968:	mov	r6, r0
   1496c:	ldr	r0, [r5]
   14970:	cmp	r0, #0
   14974:	beq	149cc <__assert_fail@plt+0x38b0>
   14978:	cmp	r0, #34	; 0x22
   1497c:	bne	15548 <__assert_fail@plt+0x442c>
   14980:	mov	r8, #1
   14984:	cmp	sl, #0
   14988:	bne	149d8 <__assert_fail@plt+0x38bc>
   1498c:	b	15540 <__assert_fail@plt+0x4424>
   14990:	cmp	sl, #0
   14994:	beq	15548 <__assert_fail@plt+0x442c>
   14998:	mov	r5, r1
   1499c:	ldrb	r1, [r4]
   149a0:	cmp	r1, #0
   149a4:	beq	15548 <__assert_fail@plt+0x442c>
   149a8:	mov	r0, sl
   149ac:	bl	1102c <strchr@plt>
   149b0:	cmp	r0, #0
   149b4:	beq	15548 <__assert_fail@plt+0x442c>
   149b8:	mov	r1, r5
   149bc:	mov	r8, #0
   149c0:	mov	r6, #1
   149c4:	mov	r7, #0
   149c8:	b	149d8 <__assert_fail@plt+0x38bc>
   149cc:	mov	r8, r0
   149d0:	cmp	sl, #0
   149d4:	beq	15540 <__assert_fail@plt+0x4424>
   149d8:	ldrb	r4, [r1]
   149dc:	cmp	r4, #0
   149e0:	beq	15540 <__assert_fail@plt+0x4424>
   149e4:	str	r1, [sp, #32]
   149e8:	mov	r0, sl
   149ec:	mov	r1, r4
   149f0:	bl	1102c <strchr@plt>
   149f4:	cmp	r0, #0
   149f8:	beq	14cc0 <__assert_fail@plt+0x3ba4>
   149fc:	sub	r0, r4, #69	; 0x45
   14a00:	mov	r1, #1
   14a04:	mov	r3, #0
   14a08:	mov	r5, #1024	; 0x400
   14a0c:	cmp	r0, #47	; 0x2f
   14a10:	str	r1, [sp, #28]
   14a14:	bhi	14b18 <__assert_fail@plt+0x39fc>
   14a18:	add	r1, pc, #0
   14a1c:	ldr	pc, [r1, r0, lsl #2]
   14a20:	andeq	r4, r1, r0, ror #21
   14a24:	andeq	r4, r1, r8, lsl fp
   14a28:	andeq	r4, r1, r0, ror #21
   14a2c:	andeq	r4, r1, r8, lsl fp
   14a30:	andeq	r4, r1, r8, lsl fp
   14a34:	andeq	r4, r1, r8, lsl fp
   14a38:	andeq	r4, r1, r0, ror #21
   14a3c:	andeq	r4, r1, r8, lsl fp
   14a40:	andeq	r4, r1, r0, ror #21
   14a44:	andeq	r4, r1, r8, lsl fp
   14a48:	andeq	r4, r1, r8, lsl fp
   14a4c:	andeq	r4, r1, r0, ror #21
   14a50:	andeq	r4, r1, r8, lsl fp
   14a54:	andeq	r4, r1, r8, lsl fp
   14a58:	andeq	r4, r1, r8, lsl fp
   14a5c:	andeq	r4, r1, r0, ror #21
   14a60:	andeq	r4, r1, r8, lsl fp
   14a64:	andeq	r4, r1, r8, lsl fp
   14a68:	andeq	r4, r1, r8, lsl fp
   14a6c:	andeq	r4, r1, r8, lsl fp
   14a70:	andeq	r4, r1, r0, ror #21
   14a74:	andeq	r4, r1, r0, ror #21
   14a78:	andeq	r4, r1, r8, lsl fp
   14a7c:	andeq	r4, r1, r8, lsl fp
   14a80:	andeq	r4, r1, r8, lsl fp
   14a84:	andeq	r4, r1, r8, lsl fp
   14a88:	andeq	r4, r1, r8, lsl fp
   14a8c:	andeq	r4, r1, r8, lsl fp
   14a90:	andeq	r4, r1, r8, lsl fp
   14a94:	andeq	r4, r1, r8, lsl fp
   14a98:	andeq	r4, r1, r8, lsl fp
   14a9c:	andeq	r4, r1, r8, lsl fp
   14aa0:	andeq	r4, r1, r8, lsl fp
   14aa4:	andeq	r4, r1, r8, lsl fp
   14aa8:	andeq	r4, r1, r0, ror #21
   14aac:	andeq	r4, r1, r8, lsl fp
   14ab0:	andeq	r4, r1, r8, lsl fp
   14ab4:	andeq	r4, r1, r8, lsl fp
   14ab8:	andeq	r4, r1, r0, ror #21
   14abc:	andeq	r4, r1, r8, lsl fp
   14ac0:	andeq	r4, r1, r0, ror #21
   14ac4:	andeq	r4, r1, r8, lsl fp
   14ac8:	andeq	r4, r1, r8, lsl fp
   14acc:	andeq	r4, r1, r8, lsl fp
   14ad0:	andeq	r4, r1, r8, lsl fp
   14ad4:	andeq	r4, r1, r8, lsl fp
   14ad8:	andeq	r4, r1, r8, lsl fp
   14adc:	andeq	r4, r1, r0, ror #21
   14ae0:	mov	r0, sl
   14ae4:	mov	r1, #48	; 0x30
   14ae8:	bl	1102c <strchr@plt>
   14aec:	cmp	r0, #0
   14af0:	beq	14b14 <__assert_fail@plt+0x39f8>
   14af4:	ldr	r1, [sp, #32]
   14af8:	ldrb	r0, [r1, #1]
   14afc:	cmp	r0, #66	; 0x42
   14b00:	cmpne	r0, #68	; 0x44
   14b04:	bne	14ccc <__assert_fail@plt+0x3bb0>
   14b08:	mov	r5, #1000	; 0x3e8
   14b0c:	mov	r0, #2
   14b10:	str	r0, [sp, #28]
   14b14:	mov	r3, #0
   14b18:	sub	r0, r4, #66	; 0x42
   14b1c:	cmp	r0, #53	; 0x35
   14b20:	bhi	14cc0 <__assert_fail@plt+0x3ba4>
   14b24:	add	r1, pc, #0
   14b28:	ldr	pc, [r1, r0, lsl #2]
   14b2c:	andeq	r5, r1, r8, asr #32
   14b30:	andeq	r4, r1, r0, asr #25
   14b34:	andeq	r4, r1, r0, asr #25
   14b38:	andeq	r5, r1, r0, ror r0
   14b3c:	andeq	r4, r1, r0, asr #25
   14b40:	andeq	r4, r1, r4, lsl #24
   14b44:	andeq	r4, r1, r0, asr #25
   14b48:	andeq	r4, r1, r0, asr #25
   14b4c:	andeq	r4, r1, r0, asr #25
   14b50:	strdeq	r4, [r1], -r0
   14b54:	andeq	r4, r1, r0, asr #25
   14b58:	andeq	r4, r1, r8, lsr sp
   14b5c:	andeq	r4, r1, r0, asr #25
   14b60:	andeq	r4, r1, r0, asr #25
   14b64:	andeq	r5, r1, r8, asr #3
   14b68:	andeq	r4, r1, r0, asr #25
   14b6c:	andeq	r4, r1, r0, asr #25
   14b70:	andeq	r4, r1, r0, asr #25
   14b74:	andeq	r4, r1, r4, asr #27
   14b78:	andeq	r4, r1, r0, asr #25
   14b7c:	andeq	r4, r1, r0, asr #25
   14b80:	andeq	r4, r1, r0, asr #25
   14b84:	andeq	r4, r1, r0, asr #25
   14b88:	strdeq	r5, [r1], -r0
   14b8c:	andeq	r4, r1, ip, lsr #29
   14b90:	andeq	r4, r1, r0, asr #25
   14b94:	andeq	r4, r1, r0, asr #25
   14b98:	andeq	r4, r1, r0, asr #25
   14b9c:	andeq	r4, r1, r0, asr #25
   14ba0:	andeq	r4, r1, r0, asr #25
   14ba4:	andeq	r4, r1, r0, asr #25
   14ba8:	andeq	r4, r1, r0, asr #25
   14bac:	andeq	r5, r1, r8, asr #9
   14bb0:	andeq	r5, r1, r0, lsr #10
   14bb4:	andeq	r4, r1, r0, asr #25
   14bb8:	andeq	r4, r1, r0, asr #25
   14bbc:	andeq	r4, r1, r0, asr #25
   14bc0:	andeq	r4, r1, r4, lsl #24
   14bc4:	andeq	r4, r1, r0, asr #25
   14bc8:	andeq	r4, r1, r0, asr #25
   14bcc:	andeq	r4, r1, r0, asr #25
   14bd0:	strdeq	r4, [r1], -r0
   14bd4:	andeq	r4, r1, r0, asr #25
   14bd8:	andeq	r4, r1, r8, lsr sp
   14bdc:	andeq	r4, r1, r0, asr #25
   14be0:	andeq	r4, r1, r0, asr #25
   14be4:	andeq	r4, r1, r0, asr #25
   14be8:	andeq	r4, r1, r0, asr #25
   14bec:	andeq	r4, r1, r0, asr #25
   14bf0:	andeq	r4, r1, r0, asr #25
   14bf4:	andeq	r4, r1, r4, asr #27
   14bf8:	andeq	r4, r1, r0, asr #25
   14bfc:	andeq	r4, r1, r0, asr #25
   14c00:	strdeq	r5, [r1], -ip
   14c04:	mvn	r0, #0
   14c08:	mvn	r1, #0
   14c0c:	mov	r2, r5
   14c10:	mov	sl, r3
   14c14:	bl	15cdc <__assert_fail@plt+0x4bc0>
   14c18:	subs	r3, r0, r6
   14c1c:	umull	r4, r2, r6, r5
   14c20:	mov	lr, #0
   14c24:	str	r1, [sp, #20]
   14c28:	sbcs	r3, r1, r7
   14c2c:	movwcc	lr, #1
   14c30:	mla	ip, r6, sl, r2
   14c34:	mov	r2, r1
   14c38:	mov	r2, #0
   14c3c:	cmp	lr, #0
   14c40:	mla	r7, r7, r5, ip
   14c44:	mvnne	r4, #0
   14c48:	mvnne	r7, #0
   14c4c:	subs	r6, r0, r4
   14c50:	sbcs	r6, r1, r7
   14c54:	umull	r3, r6, r4, r5
   14c58:	movwcc	r2, #1
   14c5c:	cmp	r2, #0
   14c60:	mvnne	r3, #0
   14c64:	cmp	r2, #0
   14c68:	str	r6, [sp, #16]
   14c6c:	umull	r6, ip, r3, r5
   14c70:	mla	r1, r3, sl, ip
   14c74:	ldr	ip, [sp, #16]
   14c78:	str	r1, [sp, #12]
   14c7c:	mla	r4, r4, sl, ip
   14c80:	mla	r4, r7, r5, r4
   14c84:	mvnne	r4, #0
   14c88:	subs	r0, r0, r3
   14c8c:	ldr	r0, [sp, #20]
   14c90:	ldr	r7, [sp, #12]
   14c94:	sbcs	r0, r0, r4
   14c98:	mov	r0, #0
   14c9c:	mla	r7, r4, r5, r7
   14ca0:	movwcc	r0, #1
   14ca4:	cmp	r0, #0
   14ca8:	mov	r1, r0
   14cac:	orr	r0, lr, r2
   14cb0:	mvnne	r7, #0
   14cb4:	mvnne	r6, #0
   14cb8:	orr	r3, r0, r1
   14cbc:	b	15520 <__assert_fail@plt+0x4404>
   14cc0:	ldr	r0, [sp, #36]	; 0x24
   14cc4:	orr	r8, r8, #2
   14cc8:	b	15544 <__assert_fail@plt+0x4428>
   14ccc:	cmp	r0, #105	; 0x69
   14cd0:	mov	r3, #0
   14cd4:	bne	14b18 <__assert_fail@plt+0x39fc>
   14cd8:	ldrb	r0, [r1, #2]
   14cdc:	mov	r1, #1
   14ce0:	cmp	r0, #66	; 0x42
   14ce4:	movweq	r1, #3
   14ce8:	str	r1, [sp, #28]
   14cec:	b	14b18 <__assert_fail@plt+0x39fc>
   14cf0:	mvn	r0, #0
   14cf4:	mvn	r1, #0
   14cf8:	mov	r2, r5
   14cfc:	mov	r4, r3
   14d00:	bl	15cdc <__assert_fail@plt+0x4bc0>
   14d04:	subs	r0, r0, r6
   14d08:	mov	r2, #0
   14d0c:	sbcs	r0, r1, r7
   14d10:	umull	r0, r1, r6, r5
   14d14:	movwcc	r2, #1
   14d18:	cmp	r2, #0
   14d1c:	mla	r1, r6, r4, r1
   14d20:	mov	r3, r2
   14d24:	mvnne	r0, #0
   14d28:	mla	r7, r7, r5, r1
   14d2c:	mvnne	r7, #0
   14d30:	mov	r6, r0
   14d34:	b	15520 <__assert_fail@plt+0x4404>
   14d38:	mvn	r0, #0
   14d3c:	mvn	r1, #0
   14d40:	mov	r2, r5
   14d44:	str	r3, [sp, #24]
   14d48:	bl	15cdc <__assert_fail@plt+0x4bc0>
   14d4c:	subs	r3, r0, r6
   14d50:	mov	ip, r0
   14d54:	umull	r4, r0, r6, r5
   14d58:	mov	sl, #0
   14d5c:	sbcs	r3, r1, r7
   14d60:	mov	r3, #0
   14d64:	movwcc	r3, #1
   14d68:	cmp	r3, #0
   14d6c:	str	r0, [sp, #20]
   14d70:	ldr	r0, [sp, #24]
   14d74:	mvnne	r4, #0
   14d78:	cmp	r3, #0
   14d7c:	umull	lr, r2, r4, r5
   14d80:	mla	r2, r4, r0, r2
   14d84:	str	r2, [sp, #16]
   14d88:	ldr	r2, [sp, #20]
   14d8c:	mla	r6, r6, r0, r2
   14d90:	ldr	r0, [sp, #16]
   14d94:	mla	r6, r7, r5, r6
   14d98:	mvnne	r6, #0
   14d9c:	mla	r7, r6, r5, r0
   14da0:	subs	r0, ip, r4
   14da4:	sbcs	r0, r1, r6
   14da8:	movwcc	sl, #1
   14dac:	cmp	sl, #0
   14db0:	orr	r3, r3, sl
   14db4:	mvnne	lr, #0
   14db8:	mvnne	r7, #0
   14dbc:	mov	r6, lr
   14dc0:	b	15520 <__assert_fail@plt+0x4404>
   14dc4:	mvn	r0, #0
   14dc8:	mvn	r1, #0
   14dcc:	mov	r2, r5
   14dd0:	mov	sl, r3
   14dd4:	bl	15cdc <__assert_fail@plt+0x4bc0>
   14dd8:	subs	r3, r0, r6
   14ddc:	mov	ip, r1
   14de0:	umull	r2, lr, r6, r5
   14de4:	str	r0, [sp, #20]
   14de8:	sbcs	r3, r1, r7
   14dec:	mov	r1, #0
   14df0:	str	ip, [sp, #16]
   14df4:	movwcc	r1, #1
   14df8:	mla	r6, r6, sl, lr
   14dfc:	mov	lr, #0
   14e00:	cmp	r1, #0
   14e04:	mla	r7, r7, r5, r6
   14e08:	mvnne	r2, #0
   14e0c:	cmp	r1, #0
   14e10:	umull	r3, r4, r2, r5
   14e14:	mvnne	r7, #0
   14e18:	mla	r4, r2, sl, r4
   14e1c:	subs	r2, r0, r2
   14e20:	sbcs	r2, ip, r7
   14e24:	mla	r4, r7, r5, r4
   14e28:	mov	r2, #0
   14e2c:	movwcc	lr, #1
   14e30:	cmp	lr, #0
   14e34:	mvnne	r3, #0
   14e38:	mvnne	r4, #0
   14e3c:	subs	r7, r0, r3
   14e40:	mov	r0, r5
   14e44:	sbcs	r7, ip, r4
   14e48:	umull	r5, r7, r3, r5
   14e4c:	movwcc	r2, #1
   14e50:	cmp	r2, #0
   14e54:	mla	r3, r3, sl, r7
   14e58:	mvnne	r5, #0
   14e5c:	cmp	r2, #0
   14e60:	mla	r3, r4, r0, r3
   14e64:	umull	r6, ip, r5, r0
   14e68:	mvnne	r3, #0
   14e6c:	mla	ip, r5, sl, ip
   14e70:	mla	r7, r3, r0, ip
   14e74:	ldr	r0, [sp, #20]
   14e78:	subs	r0, r0, r5
   14e7c:	ldr	r0, [sp, #16]
   14e80:	sbcs	r0, r0, r3
   14e84:	mov	r0, #0
   14e88:	movwcc	r0, #1
   14e8c:	cmp	r0, #0
   14e90:	mov	r3, r0
   14e94:	orr	r0, r1, lr
   14e98:	orr	r0, r0, r2
   14e9c:	mvnne	r7, #0
   14ea0:	mvnne	r6, #0
   14ea4:	orr	r3, r0, r3
   14ea8:	b	15520 <__assert_fail@plt+0x4404>
   14eac:	mvn	r0, #0
   14eb0:	mvn	r1, #0
   14eb4:	mov	r2, r5
   14eb8:	mov	r4, r3
   14ebc:	str	r3, [sp, #24]
   14ec0:	bl	15cdc <__assert_fail@plt+0x4bc0>
   14ec4:	umull	r3, r2, r6, r5
   14ec8:	mla	r2, r6, r4, r2
   14ecc:	subs	r6, r0, r6
   14ed0:	sbcs	r6, r1, r7
   14ed4:	mov	r6, #0
   14ed8:	mla	ip, r7, r5, r2
   14edc:	ldr	r2, [sp, #24]
   14ee0:	movwcc	r6, #1
   14ee4:	cmp	r6, #0
   14ee8:	str	r6, [sp, #20]
   14eec:	mov	r6, #0
   14ef0:	mvnne	r3, #0
   14ef4:	mvnne	ip, #0
   14ef8:	subs	r4, r0, r3
   14efc:	umull	r7, lr, r3, r5
   14f00:	sbcs	r4, r1, ip
   14f04:	movwcc	r6, #1
   14f08:	mla	r3, r3, r2, lr
   14f0c:	cmp	r6, #0
   14f10:	str	r6, [sp, #16]
   14f14:	mvnne	r7, #0
   14f18:	cmp	r6, #0
   14f1c:	umull	sl, r4, r7, r5
   14f20:	mla	r4, r7, r2, r4
   14f24:	mla	r2, ip, r5, r3
   14f28:	mvnne	r2, #0
   14f2c:	subs	r3, r0, r7
   14f30:	mov	ip, #0
   14f34:	mla	r6, r2, r5, r4
   14f38:	sbcs	r2, r1, r2
   14f3c:	mov	r4, r0
   14f40:	mov	r0, #0
   14f44:	movwcc	r0, #1
   14f48:	mov	r3, r4
   14f4c:	cmp	r0, #0
   14f50:	str	r0, [sp, #12]
   14f54:	mov	r0, r1
   14f58:	str	r3, [sp, #4]
   14f5c:	mvnne	sl, #0
   14f60:	mvnne	r6, #0
   14f64:	str	r0, [sp, #8]
   14f68:	subs	r2, r4, sl
   14f6c:	ldr	r4, [sp, #24]
   14f70:	sbcs	r2, r1, r6
   14f74:	umull	r7, r2, sl, r5
   14f78:	movwcc	ip, #1
   14f7c:	cmp	ip, #0
   14f80:	mvnne	r7, #0
   14f84:	mla	r2, sl, r4, r2
   14f88:	cmp	ip, #0
   14f8c:	mov	sl, #0
   14f90:	umull	r1, lr, r7, r5
   14f94:	mla	r2, r6, r5, r2
   14f98:	mvnne	r2, #0
   14f9c:	subs	r6, r3, r7
   14fa0:	mla	lr, r7, r4, lr
   14fa4:	mla	lr, r2, r5, lr
   14fa8:	sbcs	r2, r0, r2
   14fac:	mov	r2, #0
   14fb0:	movwcc	sl, #1
   14fb4:	cmp	sl, #0
   14fb8:	mvnne	r1, #0
   14fbc:	mvnne	lr, #0
   14fc0:	subs	r6, r3, r1
   14fc4:	ldr	r3, [sp, #24]
   14fc8:	sbcs	r6, r0, lr
   14fcc:	umull	r0, r7, r1, r5
   14fd0:	movwcc	r2, #1
   14fd4:	cmp	r2, #0
   14fd8:	mvnne	r0, #0
   14fdc:	mla	r1, r1, r3, r7
   14fe0:	cmp	r2, #0
   14fe4:	umull	r6, r4, r0, r5
   14fe8:	mla	r1, lr, r5, r1
   14fec:	mvnne	r1, #0
   14ff0:	mla	r4, r0, r3, r4
   14ff4:	ldr	r3, [sp, #4]
   14ff8:	mla	r7, r1, r5, r4
   14ffc:	ldr	r5, [sp, #16]
   15000:	subs	r0, r3, r0
   15004:	ldr	r0, [sp, #8]
   15008:	sbcs	r0, r0, r1
   1500c:	mov	r0, #0
   15010:	movwcc	r0, #1
   15014:	cmp	r0, #0
   15018:	mov	r1, r0
   1501c:	ldr	r0, [sp, #20]
   15020:	mvnne	r7, #0
   15024:	mvnne	r6, #0
   15028:	orr	r0, r0, r5
   1502c:	ldr	r5, [sp, #12]
   15030:	orr	r0, r0, r5
   15034:	orr	r0, r0, ip
   15038:	orr	r0, r0, sl
   1503c:	orr	r0, r0, r2
   15040:	orr	r0, r0, r1
   15044:	b	154c0 <__assert_fail@plt+0x43a4>
   15048:	mov	r1, #0
   1504c:	lsl	r2, r7, #10
   15050:	lsl	r0, r6, #10
   15054:	lsr	r3, r7, #22
   15058:	cmp	r1, r7, lsr #22
   1505c:	orr	r2, r2, r6, lsr #22
   15060:	mvnne	r0, #0
   15064:	movwne	r3, #1
   15068:	cmp	r1, r7, lsr #22
   1506c:	b	154ec <__assert_fail@plt+0x43d0>
   15070:	mvn	r0, #0
   15074:	mvn	r1, #0
   15078:	mov	r2, r5
   1507c:	mov	sl, r3
   15080:	bl	15cdc <__assert_fail@plt+0x4bc0>
   15084:	subs	r2, r0, r6
   15088:	mov	ip, r0
   1508c:	mov	r0, #0
   15090:	sbcs	r2, r1, r7
   15094:	umull	r4, r2, r6, r5
   15098:	movwcc	r0, #1
   1509c:	cmp	r0, #0
   150a0:	mla	r2, r6, sl, r2
   150a4:	str	r0, [sp, #20]
   150a8:	mvnne	r4, #0
   150ac:	cmp	r0, #0
   150b0:	mla	r2, r7, r5, r2
   150b4:	mov	r0, #0
   150b8:	umull	lr, r3, r4, r5
   150bc:	mvnne	r2, #0
   150c0:	mla	r3, r4, sl, r3
   150c4:	mla	r6, r2, r5, r3
   150c8:	subs	r3, ip, r4
   150cc:	mov	r3, r1
   150d0:	sbcs	r2, r1, r2
   150d4:	str	r3, [sp, #8]
   150d8:	movwcc	r0, #1
   150dc:	cmp	r0, #0
   150e0:	str	r0, [sp, #16]
   150e4:	mov	r0, ip
   150e8:	mvnne	lr, #0
   150ec:	mvnne	r6, #0
   150f0:	str	r0, [sp, #12]
   150f4:	subs	r2, ip, lr
   150f8:	umull	r7, r4, lr, r5
   150fc:	sbcs	r2, r1, r6
   15100:	mov	r2, #0
   15104:	movwcc	r2, #1
   15108:	mla	r4, lr, sl, r4
   1510c:	cmp	r2, #0
   15110:	mla	r6, r6, r5, r4
   15114:	mov	r4, #0
   15118:	mvnne	r7, #0
   1511c:	cmp	r2, #0
   15120:	umull	r1, ip, r7, r5
   15124:	mvnne	r6, #0
   15128:	mla	ip, r7, sl, ip
   1512c:	subs	r7, r0, r7
   15130:	sbcs	r7, r3, r6
   15134:	mla	lr, r6, r5, ip
   15138:	mov	ip, #0
   1513c:	movwcc	ip, #1
   15140:	cmp	ip, #0
   15144:	mvnne	r1, #0
   15148:	mvnne	lr, #0
   1514c:	subs	r7, r0, r1
   15150:	sbcs	r7, r3, lr
   15154:	umull	r0, r7, r1, r5
   15158:	movwcc	r4, #1
   1515c:	cmp	r4, #0
   15160:	mla	r1, r1, sl, r7
   15164:	mvnne	r0, #0
   15168:	cmp	r4, #0
   1516c:	mla	r1, lr, r5, r1
   15170:	umull	r6, r3, r0, r5
   15174:	mvnne	r1, #0
   15178:	mla	r3, r0, sl, r3
   1517c:	mla	r7, r1, r5, r3
   15180:	ldr	r3, [sp, #12]
   15184:	subs	r0, r3, r0
   15188:	ldr	r0, [sp, #8]
   1518c:	ldr	r3, [sp, #16]
   15190:	sbcs	r0, r0, r1
   15194:	mov	r0, #0
   15198:	movwcc	r0, #1
   1519c:	cmp	r0, #0
   151a0:	mov	r1, r0
   151a4:	ldr	r0, [sp, #20]
   151a8:	mvnne	r7, #0
   151ac:	mvnne	r6, #0
   151b0:	orr	r0, r0, r3
   151b4:	orr	r0, r0, r2
   151b8:	orr	r0, r0, ip
   151bc:	orr	r0, r0, r4
   151c0:	orr	r3, r0, r1
   151c4:	b	15520 <__assert_fail@plt+0x4404>
   151c8:	mvn	r0, #0
   151cc:	mvn	r1, #0
   151d0:	mov	r2, r5
   151d4:	mov	sl, r3
   151d8:	bl	15cdc <__assert_fail@plt+0x4bc0>
   151dc:	umull	r3, r2, r6, r5
   151e0:	mov	lr, r1
   151e4:	mov	r1, r0
   151e8:	mla	r2, r6, sl, r2
   151ec:	subs	r6, r0, r6
   151f0:	mov	r0, #0
   151f4:	sbcs	r6, lr, r7
   151f8:	mla	r2, r7, r5, r2
   151fc:	movwcc	r0, #1
   15200:	cmp	r0, #0
   15204:	str	r0, [sp, #20]
   15208:	mov	r0, r1
   1520c:	mvnne	r3, #0
   15210:	mvnne	r2, #0
   15214:	str	r0, [sp, #16]
   15218:	subs	r4, r1, r3
   1521c:	umull	r7, ip, r3, r5
   15220:	sbcs	r4, lr, r2
   15224:	mov	r4, #0
   15228:	movwcc	r4, #1
   1522c:	mla	r3, r3, sl, ip
   15230:	mov	ip, #0
   15234:	cmp	r4, #0
   15238:	mla	r2, r2, r5, r3
   1523c:	mvnne	r7, #0
   15240:	cmp	r4, #0
   15244:	umull	r1, r6, r7, r5
   15248:	mvnne	r2, #0
   1524c:	mla	r6, r7, sl, r6
   15250:	mla	r3, r2, r5, r6
   15254:	subs	r6, r0, r7
   15258:	sbcs	r2, lr, r2
   1525c:	mov	r2, #0
   15260:	movwcc	ip, #1
   15264:	cmp	ip, #0
   15268:	mvnne	r1, #0
   1526c:	mvnne	r3, #0
   15270:	subs	r6, r0, r1
   15274:	sbcs	r6, lr, r3
   15278:	umull	r0, r6, r1, r5
   1527c:	movwcc	r2, #1
   15280:	cmp	r2, #0
   15284:	mvnne	r0, #0
   15288:	cmp	r2, #0
   1528c:	str	r6, [sp, #12]
   15290:	umull	r6, r7, r0, r5
   15294:	mla	r7, r0, sl, r7
   15298:	str	r7, [sp, #8]
   1529c:	ldr	r7, [sp, #12]
   152a0:	mla	r1, r1, sl, r7
   152a4:	mla	r1, r3, r5, r1
   152a8:	ldr	r3, [sp, #8]
   152ac:	mvnne	r1, #0
   152b0:	mla	r7, r1, r5, r3
   152b4:	ldr	r3, [sp, #16]
   152b8:	subs	r0, r3, r0
   152bc:	sbcs	r0, lr, r1
   152c0:	mov	r0, #0
   152c4:	movwcc	r0, #1
   152c8:	cmp	r0, #0
   152cc:	mov	r1, r0
   152d0:	ldr	r0, [sp, #20]
   152d4:	mvnne	r7, #0
   152d8:	mvnne	r6, #0
   152dc:	orr	r0, r0, r4
   152e0:	orr	r0, r0, ip
   152e4:	orr	r0, r0, r2
   152e8:	orr	r3, r0, r1
   152ec:	b	15520 <__assert_fail@plt+0x4404>
   152f0:	mvn	r0, #0
   152f4:	mvn	r1, #0
   152f8:	mov	r2, r5
   152fc:	mov	sl, r3
   15300:	bl	15cdc <__assert_fail@plt+0x4bc0>
   15304:	mov	lr, r0
   15308:	subs	r0, r0, r6
   1530c:	mov	r2, #0
   15310:	mov	ip, r1
   15314:	str	sl, [sp, #24]
   15318:	sbcs	r0, r1, r7
   1531c:	umull	r3, r1, r6, r5
   15320:	str	lr, [sp, #4]
   15324:	movwcc	r2, #1
   15328:	cmp	r2, #0
   1532c:	mla	r6, r6, sl, r1
   15330:	mov	r1, #0
   15334:	str	r2, [sp, #20]
   15338:	mvnne	r3, #0
   1533c:	cmp	r2, #0
   15340:	mla	r7, r7, r5, r6
   15344:	mov	r2, #0
   15348:	umull	r0, r4, r3, r5
   1534c:	mvnne	r7, #0
   15350:	mla	r4, r3, sl, r4
   15354:	subs	r3, lr, r3
   15358:	sbcs	r3, ip, r7
   1535c:	mla	r4, r7, r5, r4
   15360:	movwcc	r1, #1
   15364:	cmp	r1, #0
   15368:	str	r1, [sp, #16]
   1536c:	mvnne	r0, #0
   15370:	mvnne	r4, #0
   15374:	subs	r3, lr, r0
   15378:	sbcs	r3, ip, r4
   1537c:	umull	r6, r3, r0, r5
   15380:	movwcc	r2, #1
   15384:	cmp	r2, #0
   15388:	mla	r0, r0, sl, r3
   1538c:	str	r2, [sp, #12]
   15390:	mvnne	r6, #0
   15394:	cmp	r2, #0
   15398:	mla	r0, r4, r5, r0
   1539c:	ldr	r4, [sp, #24]
   153a0:	umull	r1, r7, r6, r5
   153a4:	mvnne	r0, #0
   153a8:	subs	r3, lr, r6
   153ac:	mov	r3, ip
   153b0:	str	r3, [sp]
   153b4:	mla	r7, r6, sl, r7
   153b8:	mla	r7, r0, r5, r7
   153bc:	sbcs	r0, ip, r0
   153c0:	mov	r0, #0
   153c4:	movwcc	r0, #1
   153c8:	cmp	r0, #0
   153cc:	str	r0, [sp, #8]
   153d0:	mvnne	r1, #0
   153d4:	mvnne	r7, #0
   153d8:	subs	r0, lr, r1
   153dc:	sbcs	r0, ip, r7
   153e0:	mov	ip, #0
   153e4:	umull	r6, r0, r1, r5
   153e8:	movwcc	ip, #1
   153ec:	cmp	ip, #0
   153f0:	mla	r1, r1, r4, r0
   153f4:	mov	r0, lr
   153f8:	mvnne	r6, #0
   153fc:	cmp	ip, #0
   15400:	mla	r1, r7, r5, r1
   15404:	umull	r2, sl, r6, r5
   15408:	mvnne	r1, #0
   1540c:	mla	sl, r6, r4, sl
   15410:	subs	r6, lr, r6
   15414:	mov	lr, #0
   15418:	mla	r7, r1, r5, sl
   1541c:	sbcs	r1, r3, r1
   15420:	ldr	r1, [sp, #24]
   15424:	movwcc	lr, #1
   15428:	cmp	lr, #0
   1542c:	mvnne	r2, #0
   15430:	mvnne	r7, #0
   15434:	subs	r6, r0, r2
   15438:	umull	r0, sl, r2, r5
   1543c:	sbcs	r6, r3, r7
   15440:	mov	r3, #0
   15444:	movwcc	r3, #1
   15448:	mla	r2, r2, r1, sl
   1544c:	cmp	r3, #0
   15450:	mla	r2, r7, r5, r2
   15454:	mvnne	r0, #0
   15458:	cmp	r3, #0
   1545c:	umull	r6, r4, r0, r5
   15460:	mvnne	r2, #0
   15464:	mla	r4, r0, r1, r4
   15468:	ldr	r1, [sp, #4]
   1546c:	mla	r7, r2, r5, r4
   15470:	ldr	r5, [sp, #16]
   15474:	subs	r0, r1, r0
   15478:	ldr	r0, [sp]
   1547c:	sbcs	r0, r0, r2
   15480:	mov	r0, #0
   15484:	movwcc	r0, #1
   15488:	cmp	r0, #0
   1548c:	mov	r2, r0
   15490:	ldr	r0, [sp, #20]
   15494:	mvnne	r7, #0
   15498:	mvnne	r6, #0
   1549c:	orr	r0, r0, r5
   154a0:	ldr	r5, [sp, #12]
   154a4:	orr	r0, r0, r5
   154a8:	ldr	r5, [sp, #8]
   154ac:	orr	r0, r0, r5
   154b0:	orr	r0, r0, ip
   154b4:	orr	r0, r0, lr
   154b8:	orr	r0, r0, r3
   154bc:	orr	r0, r0, r2
   154c0:	and	r3, r0, #1
   154c4:	b	15520 <__assert_fail@plt+0x4404>
   154c8:	mov	r1, #0
   154cc:	lsl	r2, r7, #9
   154d0:	lsl	r0, r6, #9
   154d4:	lsr	r3, r7, #23
   154d8:	cmp	r1, r7, lsr #23
   154dc:	orr	r2, r2, r6, lsr #23
   154e0:	mvnne	r0, #0
   154e4:	movwne	r3, #1
   154e8:	cmp	r1, r7, lsr #23
   154ec:	mvnne	r2, #0
   154f0:	mov	r6, r0
   154f4:	mov	r7, r2
   154f8:	b	15520 <__assert_fail@plt+0x4404>
   154fc:	lsl	r1, r7, #1
   15500:	cmp	r7, #0
   15504:	lsl	r0, r6, #1
   15508:	lsr	r3, r7, #31
   1550c:	orr	r1, r1, r6, lsr #31
   15510:	mvnmi	r0, #0
   15514:	mvnmi	r1, #0
   15518:	mov	r6, r0
   1551c:	mov	r7, r1
   15520:	ldr	r1, [sp, #32]
   15524:	ldr	r2, [sp, #28]
   15528:	orr	r8, r3, r8
   1552c:	add	r0, r1, r2
   15530:	str	r0, [r9]
   15534:	ldrb	r0, [r1, r2]
   15538:	cmp	r0, #0
   1553c:	orrne	r8, r8, #2
   15540:	ldr	r0, [sp, #36]	; 0x24
   15544:	strd	r6, [r0]
   15548:	mov	r0, r8
   1554c:	sub	sp, fp, #28
   15550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15554:	movw	r0, #27525	; 0x6b85
   15558:	movw	r1, #27563	; 0x6bab
   1555c:	movw	r3, #27579	; 0x6bbb
   15560:	mov	r2, #85	; 0x55
   15564:	movt	r0, #1
   15568:	movt	r1, #1
   1556c:	movt	r3, #1
   15570:	bl	1111c <__assert_fail@plt>
   15574:	clz	r2, r1
   15578:	clz	r3, r0
   1557c:	lsr	r2, r2, #5
   15580:	lsr	r3, r3, #5
   15584:	orrs	r2, r3, r2
   15588:	movwne	r1, #1
   1558c:	movwne	r0, #1
   15590:	cmp	r1, #0
   15594:	beq	155c4 <__assert_fail@plt+0x44a8>
   15598:	mvn	r2, #-2147483648	; 0x80000000
   1559c:	udiv	r2, r2, r1
   155a0:	cmp	r2, r0
   155a4:	bcs	155c4 <__assert_fail@plt+0x44a8>
   155a8:	push	{fp, lr}
   155ac:	mov	fp, sp
   155b0:	bl	11038 <__errno_location@plt>
   155b4:	mov	r1, #12
   155b8:	str	r1, [r0]
   155bc:	mov	r0, #0
   155c0:	pop	{fp, pc}
   155c4:	b	10e94 <calloc@plt>
   155c8:	cmp	r0, #0
   155cc:	movweq	r0, #1
   155d0:	cmn	r0, #1
   155d4:	ble	155dc <__assert_fail@plt+0x44c0>
   155d8:	b	10fb4 <malloc@plt>
   155dc:	push	{fp, lr}
   155e0:	mov	fp, sp
   155e4:	bl	11038 <__errno_location@plt>
   155e8:	mov	r1, #12
   155ec:	str	r1, [r0]
   155f0:	mov	r0, #0
   155f4:	pop	{fp, pc}
   155f8:	push	{fp, lr}
   155fc:	mov	fp, sp
   15600:	cmp	r0, #0
   15604:	beq	15620 <__assert_fail@plt+0x4504>
   15608:	cmp	r1, #0
   1560c:	beq	1562c <__assert_fail@plt+0x4510>
   15610:	cmn	r1, #1
   15614:	ble	15638 <__assert_fail@plt+0x451c>
   15618:	pop	{fp, lr}
   1561c:	b	10f24 <realloc@plt>
   15620:	mov	r0, r1
   15624:	pop	{fp, lr}
   15628:	b	155c8 <__assert_fail@plt+0x44ac>
   1562c:	bl	11ea0 <__assert_fail@plt+0xd84>
   15630:	mov	r0, #0
   15634:	pop	{fp, pc}
   15638:	bl	11038 <__errno_location@plt>
   1563c:	mov	r1, #12
   15640:	str	r1, [r0]
   15644:	mov	r0, #0
   15648:	pop	{fp, pc}
   1564c:	push	{fp, lr}
   15650:	mov	fp, sp
   15654:	sub	sp, sp, #8
   15658:	mov	r1, r0
   1565c:	movw	r0, #22152	; 0x5688
   15660:	mov	r2, #0
   15664:	mov	r3, #0
   15668:	movt	r0, #1
   1566c:	str	r2, [sp]
   15670:	mov	r2, #0
   15674:	str	r0, [sp, #4]
   15678:	mvn	r0, #99	; 0x63
   1567c:	bl	15730 <__assert_fail@plt+0x4614>
   15680:	mov	sp, fp
   15684:	pop	{fp, pc}
   15688:	cmn	r0, #100	; 0x64
   1568c:	bne	156a0 <__assert_fail@plt+0x4584>
   15690:	mov	r0, r1
   15694:	mov	r1, r2
   15698:	mov	r2, r3
   1569c:	b	10f48 <readlink@plt>
   156a0:	push	{fp, lr}
   156a4:	mov	fp, sp
   156a8:	bl	11104 <abort@plt>
   156ac:	sub	r0, r0, #1
   156b0:	ldrb	r3, [r0, #1]!
   156b4:	cmp	r3, #47	; 0x2f
   156b8:	beq	156b0 <__assert_fail@plt+0x4594>
   156bc:	mov	r2, #0
   156c0:	mov	r1, r0
   156c4:	b	156d0 <__assert_fail@plt+0x45b4>
   156c8:	ldrb	r3, [r1, #1]!
   156cc:	mov	r2, #1
   156d0:	uxtb	r3, r3
   156d4:	cmp	r3, #47	; 0x2f
   156d8:	beq	156c8 <__assert_fail@plt+0x45ac>
   156dc:	cmp	r3, #0
   156e0:	bxeq	lr
   156e4:	tst	r2, #1
   156e8:	mov	r2, #0
   156ec:	movne	r0, r1
   156f0:	ldrb	r3, [r1, #1]!
   156f4:	b	156d0 <__assert_fail@plt+0x45b4>
   156f8:	push	{r4, sl, fp, lr}
   156fc:	add	fp, sp, #8
   15700:	mov	r4, r0
   15704:	bl	11020 <strlen@plt>
   15708:	mov	r1, r0
   1570c:	sub	r2, r4, #1
   15710:	mov	r0, r1
   15714:	cmp	r1, #2
   15718:	bcc	1572c <__assert_fail@plt+0x4610>
   1571c:	ldrb	r3, [r2, r0]
   15720:	sub	r1, r0, #1
   15724:	cmp	r3, #47	; 0x2f
   15728:	beq	15710 <__assert_fail@plt+0x45f4>
   1572c:	pop	{r4, sl, fp, pc}
   15730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15734:	add	fp, sp, #28
   15738:	sub	sp, sp, #4
   1573c:	sub	sp, sp, #1024	; 0x400
   15740:	mov	r9, r0
   15744:	mov	r0, sp
   15748:	cmp	r2, #0
   1574c:	mov	r5, r2
   15750:	mov	r4, r3
   15754:	ldr	sl, [fp, #12]
   15758:	movw	r7, #27664	; 0x6c10
   1575c:	mov	r8, r1
   15760:	moveq	r5, r0
   15764:	ldr	r0, [fp, #8]
   15768:	movweq	r4, #1024	; 0x400
   1576c:	movt	r7, #1
   15770:	cmn	r4, #-2147483647	; 0x80000001
   15774:	mov	r6, r5
   15778:	mvncs	r4, #-2147483648	; 0x80000000
   1577c:	cmp	r0, #0
   15780:	movne	r7, r0
   15784:	mov	r0, r9
   15788:	mov	r1, r8
   1578c:	mov	r2, r6
   15790:	mov	r3, r4
   15794:	blx	sl
   15798:	cmn	r0, #1
   1579c:	ble	15804 <__assert_fail@plt+0x46e8>
   157a0:	cmp	r0, r4
   157a4:	blt	15830 <__assert_fail@plt+0x4714>
   157a8:	cmp	r6, r5
   157ac:	beq	157bc <__assert_fail@plt+0x46a0>
   157b0:	ldr	r1, [r7, #8]
   157b4:	mov	r0, r6
   157b8:	blx	r1
   157bc:	cmn	r4, #-1073741823	; 0xc0000001
   157c0:	bge	15880 <__assert_fail@plt+0x4764>
   157c4:	mov	r0, #1
   157c8:	ldr	r1, [r7]
   157cc:	orr	r4, r0, r4, lsl #1
   157d0:	mov	r0, r4
   157d4:	blx	r1
   157d8:	mov	r6, r0
   157dc:	cmp	r0, #0
   157e0:	bne	15784 <__assert_fail@plt+0x4668>
   157e4:	ldr	r1, [r7, #12]
   157e8:	cmp	r1, #0
   157ec:	beq	157f8 <__assert_fail@plt+0x46dc>
   157f0:	mov	r0, r4
   157f4:	blx	r1
   157f8:	bl	11038 <__errno_location@plt>
   157fc:	mov	r1, #12
   15800:	b	15888 <__assert_fail@plt+0x476c>
   15804:	mov	r4, #0
   15808:	cmp	r6, r5
   1580c:	beq	15890 <__assert_fail@plt+0x4774>
   15810:	bl	11038 <__errno_location@plt>
   15814:	ldr	r1, [r7, #8]
   15818:	ldr	r8, [r0]
   1581c:	mov	r5, r0
   15820:	mov	r0, r6
   15824:	blx	r1
   15828:	str	r8, [r5]
   1582c:	b	15890 <__assert_fail@plt+0x4774>
   15830:	mov	r1, #0
   15834:	add	r8, r0, #1
   15838:	strb	r1, [r6, r0]
   1583c:	mov	r0, sp
   15840:	cmp	r6, r0
   15844:	beq	158a4 <__assert_fail@plt+0x4788>
   15848:	cmp	r6, r5
   1584c:	beq	1589c <__assert_fail@plt+0x4780>
   15850:	cmp	r8, r4
   15854:	bge	1589c <__assert_fail@plt+0x4780>
   15858:	ldr	r2, [r7, #4]
   1585c:	cmp	r2, #0
   15860:	beq	1589c <__assert_fail@plt+0x4780>
   15864:	mov	r0, r6
   15868:	mov	r1, r8
   1586c:	blx	r2
   15870:	cmp	r0, #0
   15874:	mov	r4, r0
   15878:	moveq	r4, r6
   1587c:	b	15890 <__assert_fail@plt+0x4774>
   15880:	bl	11038 <__errno_location@plt>
   15884:	mov	r1, #36	; 0x24
   15888:	mov	r4, #0
   1588c:	str	r1, [r0]
   15890:	mov	r0, r4
   15894:	sub	sp, fp, #28
   15898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1589c:	mov	r4, r6
   158a0:	b	15890 <__assert_fail@plt+0x4774>
   158a4:	ldr	r1, [r7]
   158a8:	mov	r0, r8
   158ac:	blx	r1
   158b0:	cmp	r0, #0
   158b4:	beq	158cc <__assert_fail@plt+0x47b0>
   158b8:	mov	r1, sp
   158bc:	mov	r2, r8
   158c0:	mov	r4, r0
   158c4:	bl	10ee8 <memcpy@plt>
   158c8:	b	15890 <__assert_fail@plt+0x4774>
   158cc:	mov	r4, r8
   158d0:	b	157e4 <__assert_fail@plt+0x46c8>
   158d4:	push	{r4, r5, r6, sl, fp, lr}
   158d8:	add	fp, sp, #16
   158dc:	mov	r4, r0
   158e0:	bl	10f78 <__fpending@plt>
   158e4:	ldr	r6, [r4]
   158e8:	mov	r5, r0
   158ec:	mov	r0, r4
   158f0:	bl	15958 <__assert_fail@plt+0x483c>
   158f4:	tst	r6, #32
   158f8:	bne	15930 <__assert_fail@plt+0x4814>
   158fc:	cmp	r0, #0
   15900:	mov	r4, r0
   15904:	mvnne	r4, #0
   15908:	cmp	r5, #0
   1590c:	bne	1593c <__assert_fail@plt+0x4820>
   15910:	cmp	r0, #0
   15914:	beq	1593c <__assert_fail@plt+0x4820>
   15918:	bl	11038 <__errno_location@plt>
   1591c:	ldr	r0, [r0]
   15920:	subs	r4, r0, #9
   15924:	mvnne	r4, #0
   15928:	mov	r0, r4
   1592c:	pop	{r4, r5, r6, sl, fp, pc}
   15930:	mvn	r4, #0
   15934:	cmp	r0, #0
   15938:	beq	15944 <__assert_fail@plt+0x4828>
   1593c:	mov	r0, r4
   15940:	pop	{r4, r5, r6, sl, fp, pc}
   15944:	bl	11038 <__errno_location@plt>
   15948:	mov	r1, #0
   1594c:	str	r1, [r0]
   15950:	mov	r0, r4
   15954:	pop	{r4, r5, r6, sl, fp, pc}
   15958:	push	{r4, r5, r6, sl, fp, lr}
   1595c:	add	fp, sp, #16
   15960:	sub	sp, sp, #8
   15964:	mov	r4, r0
   15968:	bl	11068 <fileno@plt>
   1596c:	cmn	r0, #1
   15970:	ble	159e4 <__assert_fail@plt+0x48c8>
   15974:	mov	r0, r4
   15978:	bl	10fcc <__freading@plt>
   1597c:	cmp	r0, #0
   15980:	beq	159ac <__assert_fail@plt+0x4890>
   15984:	mov	r0, r4
   15988:	bl	11068 <fileno@plt>
   1598c:	mov	r1, #1
   15990:	mov	r2, #0
   15994:	mov	r3, #0
   15998:	str	r1, [sp]
   1599c:	bl	10f60 <lseek64@plt>
   159a0:	and	r0, r0, r1
   159a4:	cmn	r0, #1
   159a8:	beq	159e4 <__assert_fail@plt+0x48c8>
   159ac:	mov	r0, r4
   159b0:	bl	159f4 <__assert_fail@plt+0x48d8>
   159b4:	cmp	r0, #0
   159b8:	beq	159e4 <__assert_fail@plt+0x48c8>
   159bc:	bl	11038 <__errno_location@plt>
   159c0:	ldr	r6, [r0]
   159c4:	mov	r5, r0
   159c8:	mov	r0, r4
   159cc:	bl	1108c <fclose@plt>
   159d0:	cmp	r6, #0
   159d4:	strne	r6, [r5]
   159d8:	mvnne	r0, #0
   159dc:	sub	sp, fp, #16
   159e0:	pop	{r4, r5, r6, sl, fp, pc}
   159e4:	mov	r0, r4
   159e8:	sub	sp, fp, #16
   159ec:	pop	{r4, r5, r6, sl, fp, lr}
   159f0:	b	1108c <fclose@plt>
   159f4:	push	{r4, sl, fp, lr}
   159f8:	add	fp, sp, #8
   159fc:	sub	sp, sp, #8
   15a00:	mov	r4, r0
   15a04:	cmp	r0, #0
   15a08:	beq	15a40 <__assert_fail@plt+0x4924>
   15a0c:	mov	r0, r4
   15a10:	bl	10fcc <__freading@plt>
   15a14:	cmp	r0, #0
   15a18:	beq	15a40 <__assert_fail@plt+0x4924>
   15a1c:	ldrb	r0, [r4, #1]
   15a20:	tst	r0, #1
   15a24:	beq	15a40 <__assert_fail@plt+0x4924>
   15a28:	mov	r0, #1
   15a2c:	mov	r2, #0
   15a30:	mov	r3, #0
   15a34:	str	r0, [sp]
   15a38:	mov	r0, r4
   15a3c:	bl	15a50 <__assert_fail@plt+0x4934>
   15a40:	mov	r0, r4
   15a44:	sub	sp, fp, #8
   15a48:	pop	{r4, sl, fp, lr}
   15a4c:	b	10ec4 <fflush@plt>
   15a50:	push	{r4, r5, r6, r7, fp, lr}
   15a54:	add	fp, sp, #16
   15a58:	sub	sp, sp, #8
   15a5c:	mov	r4, r0
   15a60:	ldr	r0, [r0, #4]
   15a64:	mov	r5, r3
   15a68:	mov	r6, r2
   15a6c:	ldr	r1, [r4, #8]
   15a70:	cmp	r1, r0
   15a74:	bne	15a90 <__assert_fail@plt+0x4974>
   15a78:	ldrd	r0, [r4, #16]
   15a7c:	cmp	r1, r0
   15a80:	bne	15a90 <__assert_fail@plt+0x4974>
   15a84:	ldr	r0, [r4, #36]	; 0x24
   15a88:	cmp	r0, #0
   15a8c:	beq	15aa8 <__assert_fail@plt+0x498c>
   15a90:	mov	r0, r4
   15a94:	mov	r2, r6
   15a98:	mov	r3, r5
   15a9c:	sub	sp, fp, #16
   15aa0:	pop	{r4, r5, r6, r7, fp, lr}
   15aa4:	b	11098 <fseeko64@plt>
   15aa8:	ldr	r7, [fp, #8]
   15aac:	mov	r0, r4
   15ab0:	bl	11068 <fileno@plt>
   15ab4:	mov	r2, r6
   15ab8:	mov	r3, r5
   15abc:	str	r7, [sp]
   15ac0:	bl	10f60 <lseek64@plt>
   15ac4:	and	r2, r0, r1
   15ac8:	cmn	r2, #1
   15acc:	beq	15aec <__assert_fail@plt+0x49d0>
   15ad0:	strd	r0, [r4, #80]	; 0x50
   15ad4:	ldr	r0, [r4]
   15ad8:	bic	r0, r0, #16
   15adc:	str	r0, [r4]
   15ae0:	mov	r0, #0
   15ae4:	sub	sp, fp, #16
   15ae8:	pop	{r4, r5, r6, r7, fp, pc}
   15aec:	mvn	r0, #0
   15af0:	sub	sp, fp, #16
   15af4:	pop	{r4, r5, r6, r7, fp, pc}
   15af8:	push	{fp, lr}
   15afc:	mov	fp, sp
   15b00:	mov	r0, #14
   15b04:	bl	110d4 <nl_langinfo@plt>
   15b08:	movw	r1, #26069	; 0x65d5
   15b0c:	cmp	r0, #0
   15b10:	movt	r1, #1
   15b14:	movne	r1, r0
   15b18:	movw	r0, #27658	; 0x6c0a
   15b1c:	ldrb	r2, [r1]
   15b20:	movt	r0, #1
   15b24:	cmp	r2, #0
   15b28:	movne	r0, r1
   15b2c:	pop	{fp, pc}
   15b30:	push	{r4, r5, r6, r7, fp, lr}
   15b34:	add	fp, sp, #16
   15b38:	sub	sp, sp, #8
   15b3c:	cmp	r0, #0
   15b40:	add	r5, sp, #4
   15b44:	mov	r7, r2
   15b48:	mov	r4, r1
   15b4c:	movne	r5, r0
   15b50:	mov	r0, r5
   15b54:	bl	10f84 <mbrtowc@plt>
   15b58:	mov	r6, r0
   15b5c:	cmp	r7, #0
   15b60:	beq	15b88 <__assert_fail@plt+0x4a6c>
   15b64:	cmn	r6, #2
   15b68:	bcc	15b88 <__assert_fail@plt+0x4a6c>
   15b6c:	mov	r0, #0
   15b70:	bl	15bd0 <__assert_fail@plt+0x4ab4>
   15b74:	cmp	r0, #0
   15b78:	bne	15b88 <__assert_fail@plt+0x4a6c>
   15b7c:	ldrb	r0, [r4]
   15b80:	mov	r6, #1
   15b84:	str	r0, [r5]
   15b88:	mov	r0, r6
   15b8c:	sub	sp, fp, #16
   15b90:	pop	{r4, r5, r6, r7, fp, pc}
   15b94:	cmp	r2, #0
   15b98:	beq	15bc8 <__assert_fail@plt+0x4aac>
   15b9c:	mvn	r3, #0
   15ba0:	udiv	r3, r3, r2
   15ba4:	cmp	r3, r1
   15ba8:	bcs	15bc8 <__assert_fail@plt+0x4aac>
   15bac:	push	{fp, lr}
   15bb0:	mov	fp, sp
   15bb4:	bl	11038 <__errno_location@plt>
   15bb8:	mov	r1, #12
   15bbc:	str	r1, [r0]
   15bc0:	mov	r0, #0
   15bc4:	pop	{fp, pc}
   15bc8:	mul	r1, r2, r1
   15bcc:	b	155f8 <__assert_fail@plt+0x44dc>
   15bd0:	push	{r4, sl, fp, lr}
   15bd4:	add	fp, sp, #8
   15bd8:	sub	sp, sp, #264	; 0x108
   15bdc:	add	r1, sp, #7
   15be0:	movw	r2, #257	; 0x101
   15be4:	bl	15c3c <__assert_fail@plt+0x4b20>
   15be8:	mov	r4, #0
   15bec:	cmp	r0, #0
   15bf0:	bne	15c30 <__assert_fail@plt+0x4b14>
   15bf4:	movw	r1, #27680	; 0x6c20
   15bf8:	add	r0, sp, #7
   15bfc:	mov	r2, #2
   15c00:	movt	r1, #1
   15c04:	bl	11014 <bcmp@plt>
   15c08:	cmp	r0, #0
   15c0c:	beq	15c30 <__assert_fail@plt+0x4b14>
   15c10:	movw	r1, #27682	; 0x6c22
   15c14:	add	r0, sp, #7
   15c18:	mov	r2, #6
   15c1c:	movt	r1, #1
   15c20:	bl	11014 <bcmp@plt>
   15c24:	cmp	r0, #0
   15c28:	mov	r4, r0
   15c2c:	movwne	r4, #1
   15c30:	mov	r0, r4
   15c34:	sub	sp, fp, #8
   15c38:	pop	{r4, sl, fp, pc}
   15c3c:	push	{r4, r5, r6, r7, fp, lr}
   15c40:	add	fp, sp, #16
   15c44:	mov	r4, r1
   15c48:	mov	r1, #0
   15c4c:	mov	r6, r2
   15c50:	bl	110b0 <setlocale@plt>
   15c54:	cmp	r0, #0
   15c58:	beq	15c88 <__assert_fail@plt+0x4b6c>
   15c5c:	mov	r7, r0
   15c60:	bl	11020 <strlen@plt>
   15c64:	cmp	r0, r6
   15c68:	bcs	15ca4 <__assert_fail@plt+0x4b88>
   15c6c:	add	r2, r0, #1
   15c70:	mov	r0, r4
   15c74:	mov	r1, r7
   15c78:	bl	10ee8 <memcpy@plt>
   15c7c:	mov	r5, #0
   15c80:	mov	r0, r5
   15c84:	pop	{r4, r5, r6, r7, fp, pc}
   15c88:	mov	r5, #22
   15c8c:	cmp	r6, #0
   15c90:	beq	15ccc <__assert_fail@plt+0x4bb0>
   15c94:	mov	r0, #0
   15c98:	strb	r0, [r4]
   15c9c:	mov	r0, r5
   15ca0:	pop	{r4, r5, r6, r7, fp, pc}
   15ca4:	mov	r5, #34	; 0x22
   15ca8:	cmp	r6, #0
   15cac:	beq	15ccc <__assert_fail@plt+0x4bb0>
   15cb0:	sub	r6, r6, #1
   15cb4:	mov	r0, r4
   15cb8:	mov	r1, r7
   15cbc:	mov	r2, r6
   15cc0:	bl	10ee8 <memcpy@plt>
   15cc4:	mov	r0, #0
   15cc8:	strb	r0, [r4, r6]
   15ccc:	mov	r0, r5
   15cd0:	pop	{r4, r5, r6, r7, fp, pc}
   15cd4:	mov	r1, #0
   15cd8:	b	110b0 <setlocale@plt>
   15cdc:	cmp	r3, #0
   15ce0:	cmpeq	r2, #0
   15ce4:	bne	15cfc <__assert_fail@plt+0x4be0>
   15ce8:	cmp	r1, #0
   15cec:	cmpeq	r0, #0
   15cf0:	mvnne	r1, #0
   15cf4:	mvnne	r0, #0
   15cf8:	b	15d18 <__assert_fail@plt+0x4bfc>
   15cfc:	sub	sp, sp, #8
   15d00:	push	{sp, lr}
   15d04:	bl	15d28 <__assert_fail@plt+0x4c0c>
   15d08:	ldr	lr, [sp, #4]
   15d0c:	add	sp, sp, #8
   15d10:	pop	{r2, r3}
   15d14:	bx	lr
   15d18:	push	{r1, lr}
   15d1c:	mov	r0, #8
   15d20:	bl	10eac <raise@plt>
   15d24:	pop	{r1, pc}
   15d28:	cmp	r1, r3
   15d2c:	cmpeq	r0, r2
   15d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d34:	mov	r4, r0
   15d38:	movcc	r0, #0
   15d3c:	mov	r5, r1
   15d40:	ldr	lr, [sp, #36]	; 0x24
   15d44:	movcc	r1, r0
   15d48:	bcc	15e44 <__assert_fail@plt+0x4d28>
   15d4c:	cmp	r3, #0
   15d50:	clzeq	ip, r2
   15d54:	clzne	ip, r3
   15d58:	addeq	ip, ip, #32
   15d5c:	cmp	r5, #0
   15d60:	clzeq	r1, r4
   15d64:	addeq	r1, r1, #32
   15d68:	clzne	r1, r5
   15d6c:	sub	ip, ip, r1
   15d70:	sub	sl, ip, #32
   15d74:	lsl	r9, r3, ip
   15d78:	rsb	fp, ip, #32
   15d7c:	orr	r9, r9, r2, lsl sl
   15d80:	orr	r9, r9, r2, lsr fp
   15d84:	lsl	r8, r2, ip
   15d88:	cmp	r5, r9
   15d8c:	cmpeq	r4, r8
   15d90:	movcc	r0, #0
   15d94:	movcc	r1, r0
   15d98:	bcc	15db4 <__assert_fail@plt+0x4c98>
   15d9c:	mov	r0, #1
   15da0:	subs	r4, r4, r8
   15da4:	lsl	r1, r0, sl
   15da8:	orr	r1, r1, r0, lsr fp
   15dac:	lsl	r0, r0, ip
   15db0:	sbc	r5, r5, r9
   15db4:	cmp	ip, #0
   15db8:	beq	15e44 <__assert_fail@plt+0x4d28>
   15dbc:	lsr	r6, r8, #1
   15dc0:	orr	r6, r6, r9, lsl #31
   15dc4:	lsr	r7, r9, #1
   15dc8:	mov	r2, ip
   15dcc:	b	15df0 <__assert_fail@plt+0x4cd4>
   15dd0:	subs	r3, r4, r6
   15dd4:	sbc	r8, r5, r7
   15dd8:	adds	r3, r3, r3
   15ddc:	adc	r8, r8, r8
   15de0:	adds	r4, r3, #1
   15de4:	adc	r5, r8, #0
   15de8:	subs	r2, r2, #1
   15dec:	beq	15e0c <__assert_fail@plt+0x4cf0>
   15df0:	cmp	r5, r7
   15df4:	cmpeq	r4, r6
   15df8:	bcs	15dd0 <__assert_fail@plt+0x4cb4>
   15dfc:	adds	r4, r4, r4
   15e00:	adc	r5, r5, r5
   15e04:	subs	r2, r2, #1
   15e08:	bne	15df0 <__assert_fail@plt+0x4cd4>
   15e0c:	lsr	r3, r4, ip
   15e10:	orr	r3, r3, r5, lsl fp
   15e14:	lsr	r2, r5, ip
   15e18:	orr	r3, r3, r5, lsr sl
   15e1c:	adds	r0, r0, r4
   15e20:	mov	r4, r3
   15e24:	lsl	r3, r2, ip
   15e28:	orr	r3, r3, r4, lsl sl
   15e2c:	lsl	ip, r4, ip
   15e30:	orr	r3, r3, r4, lsr fp
   15e34:	adc	r1, r1, r5
   15e38:	subs	r0, r0, ip
   15e3c:	mov	r5, r2
   15e40:	sbc	r1, r1, r3
   15e44:	cmp	lr, #0
   15e48:	strdne	r4, [lr]
   15e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e54:	mov	r7, r0
   15e58:	ldr	r6, [pc, #72]	; 15ea8 <__assert_fail@plt+0x4d8c>
   15e5c:	ldr	r5, [pc, #72]	; 15eac <__assert_fail@plt+0x4d90>
   15e60:	add	r6, pc, r6
   15e64:	add	r5, pc, r5
   15e68:	sub	r6, r6, r5
   15e6c:	mov	r8, r1
   15e70:	mov	r9, r2
   15e74:	bl	10e74 <calloc@plt-0x20>
   15e78:	asrs	r6, r6, #2
   15e7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e80:	mov	r4, #0
   15e84:	add	r4, r4, #1
   15e88:	ldr	r3, [r5], #4
   15e8c:	mov	r2, r9
   15e90:	mov	r1, r8
   15e94:	mov	r0, r7
   15e98:	blx	r3
   15e9c:	cmp	r6, r4
   15ea0:	bne	15e84 <__assert_fail@plt+0x4d68>
   15ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ea8:	andeq	r1, r1, r4, lsr #1
   15eac:	muleq	r1, ip, r0
   15eb0:	bx	lr
   15eb4:	ldr	r3, [pc, #12]	; 15ec8 <__assert_fail@plt+0x4dac>
   15eb8:	mov	r1, #0
   15ebc:	add	r3, pc, r3
   15ec0:	ldr	r2, [r3]
   15ec4:	b	11044 <__cxa_atexit@plt>
   15ec8:	andeq	r1, r1, r0, lsr r2

Disassembly of section .fini:

00015ecc <.fini>:
   15ecc:	push	{r3, lr}
   15ed0:	pop	{r3, pc}
