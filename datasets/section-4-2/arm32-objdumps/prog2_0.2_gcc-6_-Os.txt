
../repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

000105e8 <.init>:
   105e8:	push	{r3, lr}
   105ec:	bl	107c0 <_start@@Base+0x3c>
   105f0:	pop	{r3, pc}

Disassembly of section .plt:

000105f4 <printf@plt-0x14>:
   105f4:	push	{lr}		; (str lr, [sp, #-4]!)
   105f8:	ldr	lr, [pc, #4]	; 10604 <printf@plt-0x4>
   105fc:	add	lr, pc, lr
   10600:	ldr	pc, [lr, #8]!
   10604:	strdeq	r0, [r1], -ip

00010608 <printf@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2556]!	; 0x9fc

00010614 <puts@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2548]!	; 0x9f4

00010620 <__libc_start_main@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2540]!	; 0x9ec

0001062c <__gmon_start__@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2532]!	; 0x9e4

00010638 <memset@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2524]!	; 0x9dc

00010644 <putchar@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010650 <__isoc99_scanf@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2508]!	; 0x9cc

0001065c <abort@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2500]!	; 0x9c4

Disassembly of section .text:

00010668 <main@@Base>:
   10668:	push	{r4, r5, r6, r7, lr}
   1066c:	sub	sp, sp, #44	; 0x2c
   10670:	mov	r2, #20
   10674:	mov	r1, #0
   10678:	mov	r0, sp
   1067c:	add	r6, sp, #20
   10680:	bl	10638 <memset@plt>
   10684:	mov	r2, #20
   10688:	mov	r1, #0
   1068c:	mov	r0, r6
   10690:	bl	10638 <memset@plt>
   10694:	ldr	r0, [pc, #208]	; 1076c <main@@Base+0x104>
   10698:	bl	10614 <puts@plt>
   1069c:	ldr	r7, [pc, #204]	; 10770 <main@@Base+0x108>
   106a0:	ldr	r5, [pc, #204]	; 10774 <main@@Base+0x10c>
   106a4:	mov	r4, #0
   106a8:	add	r4, r4, #1
   106ac:	mov	r1, r4
   106b0:	mov	r0, r7
   106b4:	bl	10608 <printf@plt>
   106b8:	sub	r1, r4, #-1073741823	; 0xc0000001
   106bc:	mov	r0, r5
   106c0:	add	r1, sp, r1, lsl #2
   106c4:	bl	10650 <__isoc99_scanf@plt>
   106c8:	cmp	r4, #5
   106cc:	bne	106a8 <main@@Base+0x40>
   106d0:	ldr	r0, [pc, #160]	; 10778 <main@@Base+0x110>
   106d4:	bl	10614 <puts@plt>
   106d8:	ldr	r7, [pc, #144]	; 10770 <main@@Base+0x108>
   106dc:	ldr	r5, [pc, #144]	; 10774 <main@@Base+0x10c>
   106e0:	mov	r4, #0
   106e4:	add	r4, r4, #1
   106e8:	mov	r1, r4
   106ec:	mov	r0, r7
   106f0:	bl	10608 <printf@plt>
   106f4:	sub	r1, r4, #-1073741823	; 0xc0000001
   106f8:	mov	r0, r5
   106fc:	add	r1, r6, r1, lsl #2
   10700:	bl	10650 <__isoc99_scanf@plt>
   10704:	cmp	r4, #5
   10708:	bne	106e4 <main@@Base+0x7c>
   1070c:	mov	r0, #10
   10710:	bl	10644 <putchar@plt>
   10714:	ldr	r0, [pc, #96]	; 1077c <main@@Base+0x114>
   10718:	bl	10608 <printf@plt>
   1071c:	ldr	r7, [pc, #92]	; 10780 <main@@Base+0x118>
   10720:	mov	r5, #0
   10724:	mov	r4, #0
   10728:	ldr	r1, [sp, r5, lsl #2]
   1072c:	ldr	r3, [r6, r4, lsl #2]
   10730:	cmp	r1, r3
   10734:	bne	10740 <main@@Base+0xd8>
   10738:	mov	r0, r7
   1073c:	bl	10608 <printf@plt>
   10740:	add	r4, r4, #1
   10744:	cmp	r4, #5
   10748:	bne	10728 <main@@Base+0xc0>
   1074c:	add	r5, r5, #1
   10750:	cmp	r5, #5
   10754:	bne	10724 <main@@Base+0xbc>
   10758:	mov	r0, #10
   1075c:	bl	10644 <putchar@plt>
   10760:	mov	r0, #0
   10764:	add	sp, sp, #44	; 0x2c
   10768:	pop	{r4, r5, r6, r7, pc}
   1076c:	andeq	r0, r1, ip, lsl r9
   10770:	andeq	r0, r1, r5, lsr #18
   10774:	andeq	r0, r1, sp, asr #18
   10778:	andeq	r0, r1, fp, lsr r9
   1077c:	andeq	r0, r1, r4, asr #18
   10780:	andeq	r0, r1, ip, asr #18

00010784 <_start@@Base>:
   10784:	mov	fp, #0
   10788:	mov	lr, #0
   1078c:	pop	{r1}		; (ldr r1, [sp], #4)
   10790:	mov	r2, sp
   10794:	push	{r2}		; (str r2, [sp, #-4]!)
   10798:	push	{r0}		; (str r0, [sp, #-4]!)
   1079c:	ldr	ip, [pc, #16]	; 107b4 <_start@@Base+0x30>
   107a0:	push	{ip}		; (str ip, [sp, #-4]!)
   107a4:	ldr	r0, [pc, #12]	; 107b8 <_start@@Base+0x34>
   107a8:	ldr	r3, [pc, #12]	; 107bc <_start@@Base+0x38>
   107ac:	bl	10620 <__libc_start_main@plt>
   107b0:	bl	1065c <abort@plt>
   107b4:	andeq	r0, r1, ip, lsl #18
   107b8:	andeq	r0, r1, r8, ror #12
   107bc:	andeq	r0, r1, ip, lsr #17
   107c0:	ldr	r3, [pc, #20]	; 107dc <_start@@Base+0x58>
   107c4:	ldr	r2, [pc, #20]	; 107e0 <_start@@Base+0x5c>
   107c8:	add	r3, pc, r3
   107cc:	ldr	r2, [r3, r2]
   107d0:	cmp	r2, #0
   107d4:	bxeq	lr
   107d8:	b	1062c <__gmon_start__@plt>
   107dc:	andeq	r0, r1, r0, lsr r8
   107e0:	andeq	r0, r0, ip, lsr #32
   107e4:	ldr	r3, [pc, #28]	; 10808 <_start@@Base+0x84>
   107e8:	ldr	r0, [pc, #28]	; 1080c <_start@@Base+0x88>
   107ec:	sub	r3, r3, r0
   107f0:	cmp	r3, #6
   107f4:	bxls	lr
   107f8:	ldr	r3, [pc, #16]	; 10810 <_start@@Base+0x8c>
   107fc:	cmp	r3, #0
   10800:	bxeq	lr
   10804:	bx	r3
   10808:	andeq	r1, r2, fp, lsr r0
   1080c:	andeq	r1, r2, r8, lsr r0
   10810:	andeq	r0, r0, r0
   10814:	ldr	r1, [pc, #36]	; 10840 <_start@@Base+0xbc>
   10818:	ldr	r0, [pc, #36]	; 10844 <_start@@Base+0xc0>
   1081c:	sub	r1, r1, r0
   10820:	asr	r1, r1, #2
   10824:	add	r1, r1, r1, lsr #31
   10828:	asrs	r1, r1, #1
   1082c:	bxeq	lr
   10830:	ldr	r3, [pc, #16]	; 10848 <_start@@Base+0xc4>
   10834:	cmp	r3, #0
   10838:	bxeq	lr
   1083c:	bx	r3
   10840:	andeq	r1, r2, r8, lsr r0
   10844:	andeq	r1, r2, r8, lsr r0
   10848:	andeq	r0, r0, r0
   1084c:	push	{r4, lr}
   10850:	ldr	r4, [pc, #24]	; 10870 <_start@@Base+0xec>
   10854:	ldrb	r3, [r4]
   10858:	cmp	r3, #0
   1085c:	popne	{r4, pc}
   10860:	bl	107e4 <_start@@Base+0x60>
   10864:	mov	r3, #1
   10868:	strb	r3, [r4]
   1086c:	pop	{r4, pc}
   10870:	andeq	r1, r2, r8, lsr r0
   10874:	ldr	r0, [pc, #40]	; 108a4 <_start@@Base+0x120>
   10878:	ldr	r3, [r0]
   1087c:	cmp	r3, #0
   10880:	bne	10888 <_start@@Base+0x104>
   10884:	b	10814 <_start@@Base+0x90>
   10888:	ldr	r3, [pc, #24]	; 108a8 <_start@@Base+0x124>
   1088c:	cmp	r3, #0
   10890:	beq	10884 <_start@@Base+0x100>
   10894:	push	{r4, lr}
   10898:	blx	r3
   1089c:	pop	{r4, lr}
   108a0:	b	10814 <_start@@Base+0x90>
   108a4:	andeq	r0, r2, r4, lsl pc
   108a8:	andeq	r0, r0, r0

000108ac <__libc_csu_init@@Base>:
   108ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108b0:	mov	r7, r0
   108b4:	ldr	r6, [pc, #72]	; 10904 <__libc_csu_init@@Base+0x58>
   108b8:	ldr	r5, [pc, #72]	; 10908 <__libc_csu_init@@Base+0x5c>
   108bc:	add	r6, pc, r6
   108c0:	add	r5, pc, r5
   108c4:	sub	r6, r6, r5
   108c8:	mov	r8, r1
   108cc:	mov	r9, r2
   108d0:	bl	105e8 <printf@plt-0x20>
   108d4:	asrs	r6, r6, #2
   108d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108dc:	mov	r4, #0
   108e0:	add	r4, r4, #1
   108e4:	ldr	r3, [r5], #4
   108e8:	mov	r2, r9
   108ec:	mov	r1, r8
   108f0:	mov	r0, r7
   108f4:	blx	r3
   108f8:	cmp	r6, r4
   108fc:	bne	108e0 <__libc_csu_init@@Base+0x34>
   10900:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10904:	andeq	r0, r1, ip, asr #12
   10908:	andeq	r0, r1, r4, asr #12

0001090c <__libc_csu_fini@@Base>:
   1090c:	bx	lr

Disassembly of section .fini:

00010910 <.fini>:
   10910:	push	{r3, lr}
   10914:	pop	{r3, pc}
