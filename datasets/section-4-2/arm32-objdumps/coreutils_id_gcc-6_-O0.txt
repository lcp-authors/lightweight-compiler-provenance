
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010eec <.init>:
   10eec:	push	{r3, lr}
   10ef0:	bl	11254 <__assert_fail@plt+0x48>
   10ef4:	pop	{r3, pc}

Disassembly of section .plt:

00010ef8 <calloc@plt-0x14>:
   10ef8:	push	{lr}		; (str lr, [sp, #-4]!)
   10efc:	ldr	lr, [pc, #4]	; 10f08 <calloc@plt-0x4>
   10f00:	add	lr, pc, lr
   10f04:	ldr	pc, [lr, #8]!
   10f08:	strdeq	sl, [r1], -r8

00010f0c <calloc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #248]!	; 0xf8

00010f18 <endgrent@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #240]!	; 0xf0

00010f24 <fputs_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #232]!	; 0xe8

00010f30 <raise@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #224]!	; 0xe0

00010f3c <getpwnam@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #216]!	; 0xd8

00010f48 <is_selinux_enabled@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #208]!	; 0xd0

00010f54 <strcmp@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #200]!	; 0xc8

00010f60 <getpwuid@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #192]!	; 0xc0

00010f6c <printf@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #184]!	; 0xb8

00010f78 <fflush@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #176]!	; 0xb0

00010f84 <getuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #168]!	; 0xa8

00010f90 <free@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #160]!	; 0xa0

00010f9c <_exit@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #152]!	; 0x98

00010fa8 <memcpy@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #144]!	; 0x90

00010fb4 <mbsinit@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #136]!	; 0x88

00010fc0 <memcmp@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #128]!	; 0x80

00010fcc <fputc_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #120]!	; 0x78

00010fd8 <realloc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #112]!	; 0x70

00010fe4 <textdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #104]!	; 0x68

00010ff0 <geteuid@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #96]!	; 0x60

00010ffc <iswprint@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #88]!	; 0x58

00011008 <getegid@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #80]!	; 0x50

00011014 <fwrite@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #72]!	; 0x48

00011020 <lseek64@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #64]!	; 0x40

0001102c <__ctype_get_mb_cur_max@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #56]!	; 0x38

00011038 <getcon@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #48]!	; 0x30

00011044 <__fpending@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #40]!	; 0x28

00011050 <ferror_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #32]!

0001105c <mbrtowc@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #24]!

00011068 <error@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #16]!

00011074 <getenv@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #8]!

00011080 <malloc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #0]!

0001108c <__libc_start_main@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #102400	; 0x19000
   11094:	ldr	pc, [ip, #4088]!	; 0xff8

00011098 <__freading@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #102400	; 0x19000
   110a0:	ldr	pc, [ip, #4080]!	; 0xff0

000110a4 <__gmon_start__@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #102400	; 0x19000
   110ac:	ldr	pc, [ip, #4072]!	; 0xfe8

000110b0 <getopt_long@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110bc <__ctype_b_loc@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110c8 <exit@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #4048]!	; 0xfd0

000110d4 <gettext@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #4040]!	; 0xfc8

000110e0 <strtoul@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #4032]!	; 0xfc0

000110ec <strlen@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4024]!	; 0xfb8

000110f8 <strchr@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4016]!	; 0xfb0

00011104 <fprintf@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011110 <__errno_location@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #4000]!	; 0xfa0

0001111c <__cxa_atexit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #3992]!	; 0xf98

00011128 <getgid@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #3984]!	; 0xf90

00011134 <getgrouplist@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #3976]!	; 0xf88

00011140 <memset@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3968]!	; 0xf80

0001114c <setgrent@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3960]!	; 0xf78

00011158 <getgrent@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3952]!	; 0xf70

00011164 <fileno@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3944]!	; 0xf68

00011170 <fclose@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3936]!	; 0xf60

0001117c <fseeko64@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3928]!	; 0xf58

00011188 <setlocale@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3920]!	; 0xf50

00011194 <endpwent@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3912]!	; 0xf48

000111a0 <strrchr@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3904]!	; 0xf40

000111ac <nl_langinfo@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3896]!	; 0xf38

000111b8 <getgroups@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #102400	; 0x19000
   111c0:	ldr	pc, [ip, #3888]!	; 0xf30

000111c4 <bindtextdomain@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #102400	; 0x19000
   111cc:	ldr	pc, [ip, #3880]!	; 0xf28

000111d0 <strncmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #102400	; 0x19000
   111d8:	ldr	pc, [ip, #3872]!	; 0xf20

000111dc <abort@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #102400	; 0x19000
   111e4:	ldr	pc, [ip, #3864]!	; 0xf18

000111e8 <getgrgid@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #102400	; 0x19000
   111f0:	ldr	pc, [ip, #3856]!	; 0xf10

000111f4 <getgrnam@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #102400	; 0x19000
   111fc:	ldr	pc, [ip, #3848]!	; 0xf08

00011200 <putchar_unlocked@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #102400	; 0x19000
   11208:	ldr	pc, [ip, #3840]!	; 0xf00

0001120c <__assert_fail@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #102400	; 0x19000
   11214:	ldr	pc, [ip, #3832]!	; 0xef8

Disassembly of section .text:

00011218 <.text>:
   11218:	mov	fp, #0
   1121c:	mov	lr, #0
   11220:	pop	{r1}		; (ldr r1, [sp], #4)
   11224:	mov	r2, sp
   11228:	push	{r2}		; (str r2, [sp, #-4]!)
   1122c:	push	{r0}		; (str r0, [sp, #-4]!)
   11230:	ldr	ip, [pc, #16]	; 11248 <__assert_fail@plt+0x3c>
   11234:	push	{ip}		; (str ip, [sp, #-4]!)
   11238:	ldr	r0, [pc, #12]	; 1124c <__assert_fail@plt+0x40>
   1123c:	ldr	r3, [pc, #12]	; 11250 <__assert_fail@plt+0x44>
   11240:	bl	1108c <__libc_start_main@plt>
   11244:	bl	111dc <abort@plt>
   11248:	andeq	r9, r1, ip, lsr #4
   1124c:	andeq	r1, r1, r4, ror #12
   11250:	andeq	r9, r1, ip, asr #3
   11254:	ldr	r3, [pc, #20]	; 11270 <__assert_fail@plt+0x64>
   11258:	ldr	r2, [pc, #20]	; 11274 <__assert_fail@plt+0x68>
   1125c:	add	r3, pc, r3
   11260:	ldr	r2, [r3, r2]
   11264:	cmp	r2, #0
   11268:	bxeq	lr
   1126c:	b	110a4 <__gmon_start__@plt>
   11270:	muleq	r1, ip, sp
   11274:	andeq	r0, r0, r0, lsl r1
   11278:	ldr	r3, [pc, #28]	; 1129c <__assert_fail@plt+0x90>
   1127c:	ldr	r0, [pc, #28]	; 112a0 <__assert_fail@plt+0x94>
   11280:	sub	r3, r3, r0
   11284:	cmp	r3, #6
   11288:	bxls	lr
   1128c:	ldr	r3, [pc, #16]	; 112a4 <__assert_fail@plt+0x98>
   11290:	cmp	r3, #0
   11294:	bxeq	lr
   11298:	bx	r3
   1129c:	andeq	fp, r2, r7, ror r1
   112a0:	andeq	fp, r2, r4, ror r1
   112a4:	andeq	r0, r0, r0
   112a8:	ldr	r1, [pc, #36]	; 112d4 <__assert_fail@plt+0xc8>
   112ac:	ldr	r0, [pc, #36]	; 112d8 <__assert_fail@plt+0xcc>
   112b0:	sub	r1, r1, r0
   112b4:	asr	r1, r1, #2
   112b8:	add	r1, r1, r1, lsr #31
   112bc:	asrs	r1, r1, #1
   112c0:	bxeq	lr
   112c4:	ldr	r3, [pc, #16]	; 112dc <__assert_fail@plt+0xd0>
   112c8:	cmp	r3, #0
   112cc:	bxeq	lr
   112d0:	bx	r3
   112d4:	andeq	fp, r2, r4, ror r1
   112d8:	andeq	fp, r2, r4, ror r1
   112dc:	andeq	r0, r0, r0
   112e0:	push	{r4, lr}
   112e4:	ldr	r4, [pc, #24]	; 11304 <__assert_fail@plt+0xf8>
   112e8:	ldrb	r3, [r4]
   112ec:	cmp	r3, #0
   112f0:	popne	{r4, pc}
   112f4:	bl	11278 <__assert_fail@plt+0x6c>
   112f8:	mov	r3, #1
   112fc:	strb	r3, [r4]
   11300:	pop	{r4, pc}
   11304:	muleq	r2, r0, r1
   11308:	ldr	r0, [pc, #40]	; 11338 <__assert_fail@plt+0x12c>
   1130c:	ldr	r3, [r0]
   11310:	cmp	r3, #0
   11314:	bne	1131c <__assert_fail@plt+0x110>
   11318:	b	112a8 <__assert_fail@plt+0x9c>
   1131c:	ldr	r3, [pc, #24]	; 1133c <__assert_fail@plt+0x130>
   11320:	cmp	r3, #0
   11324:	beq	11318 <__assert_fail@plt+0x10c>
   11328:	push	{r4, lr}
   1132c:	blx	r3
   11330:	pop	{r4, lr}
   11334:	b	112a8 <__assert_fail@plt+0x9c>
   11338:	andeq	sl, r2, ip, lsl #30
   1133c:	andeq	r0, r0, r0
   11340:	push	{fp, lr}
   11344:	add	fp, sp, #4
   11348:	sub	sp, sp, #80	; 0x50
   1134c:	str	r0, [fp, #-80]	; 0xffffffb0
   11350:	ldr	r3, [pc, #348]	; 114b4 <__assert_fail@plt+0x2a8>
   11354:	sub	ip, fp, #72	; 0x48
   11358:	mov	lr, r3
   1135c:	ldm	lr!, {r0, r1, r2, r3}
   11360:	stmia	ip!, {r0, r1, r2, r3}
   11364:	ldm	lr!, {r0, r1, r2, r3}
   11368:	stmia	ip!, {r0, r1, r2, r3}
   1136c:	ldm	lr!, {r0, r1, r2, r3}
   11370:	stmia	ip!, {r0, r1, r2, r3}
   11374:	ldm	lr, {r0, r1}
   11378:	stm	ip, {r0, r1}
   1137c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11380:	str	r3, [fp, #-8]
   11384:	sub	r3, fp, #72	; 0x48
   11388:	str	r3, [fp, #-12]
   1138c:	b	1139c <__assert_fail@plt+0x190>
   11390:	ldr	r3, [fp, #-12]
   11394:	add	r3, r3, #8
   11398:	str	r3, [fp, #-12]
   1139c:	ldr	r3, [fp, #-12]
   113a0:	ldr	r3, [r3]
   113a4:	cmp	r3, #0
   113a8:	beq	113cc <__assert_fail@plt+0x1c0>
   113ac:	ldr	r3, [fp, #-12]
   113b0:	ldr	r3, [r3]
   113b4:	mov	r1, r3
   113b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   113bc:	bl	10f54 <strcmp@plt>
   113c0:	mov	r3, r0
   113c4:	cmp	r3, #0
   113c8:	bne	11390 <__assert_fail@plt+0x184>
   113cc:	ldr	r3, [fp, #-12]
   113d0:	ldr	r3, [r3, #4]
   113d4:	cmp	r3, #0
   113d8:	beq	113e8 <__assert_fail@plt+0x1dc>
   113dc:	ldr	r3, [fp, #-12]
   113e0:	ldr	r3, [r3, #4]
   113e4:	str	r3, [fp, #-8]
   113e8:	ldr	r0, [pc, #200]	; 114b8 <__assert_fail@plt+0x2ac>
   113ec:	bl	110d4 <gettext@plt>
   113f0:	mov	r3, r0
   113f4:	ldr	r2, [pc, #192]	; 114bc <__assert_fail@plt+0x2b0>
   113f8:	ldr	r1, [pc, #192]	; 114c0 <__assert_fail@plt+0x2b4>
   113fc:	mov	r0, r3
   11400:	bl	10f6c <printf@plt>
   11404:	mov	r1, #0
   11408:	mov	r0, #5
   1140c:	bl	11188 <setlocale@plt>
   11410:	str	r0, [fp, #-16]
   11414:	ldr	r3, [fp, #-16]
   11418:	cmp	r3, #0
   1141c:	beq	1145c <__assert_fail@plt+0x250>
   11420:	mov	r2, #3
   11424:	ldr	r1, [pc, #152]	; 114c4 <__assert_fail@plt+0x2b8>
   11428:	ldr	r0, [fp, #-16]
   1142c:	bl	111d0 <strncmp@plt>
   11430:	mov	r3, r0
   11434:	cmp	r3, #0
   11438:	beq	1145c <__assert_fail@plt+0x250>
   1143c:	ldr	r0, [pc, #132]	; 114c8 <__assert_fail@plt+0x2bc>
   11440:	bl	110d4 <gettext@plt>
   11444:	mov	r2, r0
   11448:	ldr	r3, [pc, #124]	; 114cc <__assert_fail@plt+0x2c0>
   1144c:	ldr	r3, [r3]
   11450:	mov	r1, r3
   11454:	mov	r0, r2
   11458:	bl	10f24 <fputs_unlocked@plt>
   1145c:	ldr	r0, [pc, #108]	; 114d0 <__assert_fail@plt+0x2c4>
   11460:	bl	110d4 <gettext@plt>
   11464:	mov	r3, r0
   11468:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1146c:	ldr	r1, [pc, #72]	; 114bc <__assert_fail@plt+0x2b0>
   11470:	mov	r0, r3
   11474:	bl	10f6c <printf@plt>
   11478:	ldr	r0, [pc, #84]	; 114d4 <__assert_fail@plt+0x2c8>
   1147c:	bl	110d4 <gettext@plt>
   11480:	ldr	r2, [fp, #-8]
   11484:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11488:	cmp	r2, r3
   1148c:	bne	11498 <__assert_fail@plt+0x28c>
   11490:	ldr	r3, [pc, #64]	; 114d8 <__assert_fail@plt+0x2cc>
   11494:	b	1149c <__assert_fail@plt+0x290>
   11498:	ldr	r3, [pc, #60]	; 114dc <__assert_fail@plt+0x2d0>
   1149c:	mov	r2, r3
   114a0:	ldr	r1, [fp, #-8]
   114a4:	bl	10f6c <printf@plt>
   114a8:	nop			; (mov r0, r0)
   114ac:	sub	sp, fp, #4
   114b0:	pop	{fp, pc}
   114b4:	andeq	r9, r1, r8, asr #7
   114b8:	andeq	r9, r1, r4, asr r2
   114bc:	andeq	r9, r1, ip, ror #4
   114c0:	muleq	r1, r4, r2
   114c4:	andeq	r9, r1, r4, lsr #5
   114c8:	andeq	r9, r1, r8, lsr #5
   114cc:	andeq	fp, r2, ip, lsl #3
   114d0:	strdeq	r9, [r1], -r0
   114d4:	andeq	r9, r1, ip, lsl #6
   114d8:	andeq	r9, r1, r0, asr #6
   114dc:	andeq	r9, r1, ip, asr #6
   114e0:	push	{fp}		; (str fp, [sp, #-4]!)
   114e4:	add	fp, sp, #0
   114e8:	sub	sp, sp, #12
   114ec:	str	r0, [fp, #-8]
   114f0:	mvn	r3, #0
   114f4:	mov	r0, r3
   114f8:	add	sp, fp, #0
   114fc:	pop	{fp}		; (ldr fp, [sp], #4)
   11500:	bx	lr
   11504:	push	{fp}		; (str fp, [sp, #-4]!)
   11508:	add	fp, sp, #0
   1150c:	mov	r3, #0
   11510:	mov	r0, r3
   11514:	add	sp, fp, #0
   11518:	pop	{fp}		; (ldr fp, [sp], #4)
   1151c:	bx	lr
   11520:	push	{r4, fp, lr}
   11524:	add	fp, sp, #8
   11528:	sub	sp, sp, #12
   1152c:	str	r0, [fp, #-16]
   11530:	ldr	r3, [fp, #-16]
   11534:	cmp	r3, #0
   11538:	beq	11568 <__assert_fail@plt+0x35c>
   1153c:	ldr	r3, [pc, #244]	; 11638 <__assert_fail@plt+0x42c>
   11540:	ldr	r4, [r3]
   11544:	ldr	r0, [pc, #240]	; 1163c <__assert_fail@plt+0x430>
   11548:	bl	110d4 <gettext@plt>
   1154c:	mov	r1, r0
   11550:	ldr	r3, [pc, #232]	; 11640 <__assert_fail@plt+0x434>
   11554:	ldr	r3, [r3]
   11558:	mov	r2, r3
   1155c:	mov	r0, r4
   11560:	bl	11104 <fprintf@plt>
   11564:	b	11630 <__assert_fail@plt+0x424>
   11568:	ldr	r0, [pc, #212]	; 11644 <__assert_fail@plt+0x438>
   1156c:	bl	110d4 <gettext@plt>
   11570:	mov	r2, r0
   11574:	ldr	r3, [pc, #196]	; 11640 <__assert_fail@plt+0x434>
   11578:	ldr	r3, [r3]
   1157c:	mov	r1, r3
   11580:	mov	r0, r2
   11584:	bl	10f6c <printf@plt>
   11588:	ldr	r0, [pc, #184]	; 11648 <__assert_fail@plt+0x43c>
   1158c:	bl	110d4 <gettext@plt>
   11590:	mov	r2, r0
   11594:	ldr	r3, [pc, #176]	; 1164c <__assert_fail@plt+0x440>
   11598:	ldr	r3, [r3]
   1159c:	mov	r1, r3
   115a0:	mov	r0, r2
   115a4:	bl	10f24 <fputs_unlocked@plt>
   115a8:	ldr	r0, [pc, #160]	; 11650 <__assert_fail@plt+0x444>
   115ac:	bl	110d4 <gettext@plt>
   115b0:	mov	r2, r0
   115b4:	ldr	r3, [pc, #144]	; 1164c <__assert_fail@plt+0x440>
   115b8:	ldr	r3, [r3]
   115bc:	mov	r1, r3
   115c0:	mov	r0, r2
   115c4:	bl	10f24 <fputs_unlocked@plt>
   115c8:	ldr	r0, [pc, #132]	; 11654 <__assert_fail@plt+0x448>
   115cc:	bl	110d4 <gettext@plt>
   115d0:	mov	r2, r0
   115d4:	ldr	r3, [pc, #112]	; 1164c <__assert_fail@plt+0x440>
   115d8:	ldr	r3, [r3]
   115dc:	mov	r1, r3
   115e0:	mov	r0, r2
   115e4:	bl	10f24 <fputs_unlocked@plt>
   115e8:	ldr	r0, [pc, #104]	; 11658 <__assert_fail@plt+0x44c>
   115ec:	bl	110d4 <gettext@plt>
   115f0:	mov	r2, r0
   115f4:	ldr	r3, [pc, #80]	; 1164c <__assert_fail@plt+0x440>
   115f8:	ldr	r3, [r3]
   115fc:	mov	r1, r3
   11600:	mov	r0, r2
   11604:	bl	10f24 <fputs_unlocked@plt>
   11608:	ldr	r0, [pc, #76]	; 1165c <__assert_fail@plt+0x450>
   1160c:	bl	110d4 <gettext@plt>
   11610:	mov	r2, r0
   11614:	ldr	r3, [pc, #48]	; 1164c <__assert_fail@plt+0x440>
   11618:	ldr	r3, [r3]
   1161c:	mov	r1, r3
   11620:	mov	r0, r2
   11624:	bl	10f24 <fputs_unlocked@plt>
   11628:	ldr	r0, [pc, #48]	; 11660 <__assert_fail@plt+0x454>
   1162c:	bl	11340 <__assert_fail@plt+0x134>
   11630:	ldr	r0, [fp, #-16]
   11634:	bl	110c8 <exit@plt>
   11638:	andeq	fp, r2, r8, lsl #3
   1163c:	andeq	r9, r1, r8, ror #9
   11640:	andeq	fp, r2, r0, lsl #4
   11644:	andeq	r9, r1, r0, lsl r5
   11648:	andeq	r9, r1, r4, lsr r5
   1164c:	andeq	fp, r2, ip, lsl #3
   11650:	andeq	r9, r1, r0, lsr #11
   11654:	andeq	r9, r1, ip, lsr #15
   11658:	ldrdeq	r9, [r1], -ip
   1165c:	andeq	r9, r1, r4, lsl r8
   11660:	andeq	r9, r1, ip, asr r8
   11664:	push	{r4, r5, fp, lr}
   11668:	add	fp, sp, #12
   1166c:	sub	sp, sp, #64	; 0x40
   11670:	str	r0, [fp, #-56]	; 0xffffffc8
   11674:	str	r1, [fp, #-60]	; 0xffffffc4
   11678:	bl	10f48 <is_selinux_enabled@plt>
   1167c:	mov	r3, r0
   11680:	cmp	r3, #0
   11684:	movgt	r3, #1
   11688:	movle	r3, #0
   1168c:	uxtb	r3, r3
   11690:	str	r3, [fp, #-20]	; 0xffffffec
   11694:	bl	11504 <__assert_fail@plt+0x2f8>
   11698:	mov	r3, r0
   1169c:	strb	r3, [fp, #-21]	; 0xffffffeb
   116a0:	mov	r3, #0
   116a4:	str	r3, [fp, #-28]	; 0xffffffe4
   116a8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116ac:	ldr	r3, [r3]
   116b0:	mov	r0, r3
   116b4:	bl	12dec <__assert_fail@plt+0x1be0>
   116b8:	ldr	r1, [pc, #2304]	; 11fc0 <__assert_fail@plt+0xdb4>
   116bc:	mov	r0, #6
   116c0:	bl	11188 <setlocale@plt>
   116c4:	ldr	r1, [pc, #2296]	; 11fc4 <__assert_fail@plt+0xdb8>
   116c8:	ldr	r0, [pc, #2296]	; 11fc8 <__assert_fail@plt+0xdbc>
   116cc:	bl	111c4 <bindtextdomain@plt>
   116d0:	ldr	r0, [pc, #2288]	; 11fc8 <__assert_fail@plt+0xdbc>
   116d4:	bl	10fe4 <textdomain@plt>
   116d8:	ldr	r0, [pc, #2284]	; 11fcc <__assert_fail@plt+0xdc0>
   116dc:	bl	19230 <__assert_fail@plt+0x8024>
   116e0:	b	11848 <__assert_fail@plt+0x63c>
   116e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   116e8:	cmp	r3, #97	; 0x61
   116ec:	beq	11848 <__assert_fail@plt+0x63c>
   116f0:	cmp	r3, #97	; 0x61
   116f4:	bgt	11728 <__assert_fail@plt+0x51c>
   116f8:	cmn	r3, #2
   116fc:	beq	117f8 <__assert_fail@plt+0x5ec>
   11700:	cmn	r3, #2
   11704:	bgt	11714 <__assert_fail@plt+0x508>
   11708:	cmn	r3, #3
   1170c:	beq	11800 <__assert_fail@plt+0x5f4>
   11710:	b	11840 <__assert_fail@plt+0x634>
   11714:	cmp	r3, #71	; 0x47
   11718:	beq	117e8 <__assert_fail@plt+0x5dc>
   1171c:	cmp	r3, #90	; 0x5a
   11720:	beq	11760 <__assert_fail@plt+0x554>
   11724:	b	11840 <__assert_fail@plt+0x634>
   11728:	cmp	r3, #114	; 0x72
   1172c:	beq	117b8 <__assert_fail@plt+0x5ac>
   11730:	cmp	r3, #114	; 0x72
   11734:	bgt	1174c <__assert_fail@plt+0x540>
   11738:	cmp	r3, #103	; 0x67
   1173c:	beq	11798 <__assert_fail@plt+0x58c>
   11740:	cmp	r3, #110	; 0x6e
   11744:	beq	117a8 <__assert_fail@plt+0x59c>
   11748:	b	11840 <__assert_fail@plt+0x634>
   1174c:	cmp	r3, #117	; 0x75
   11750:	beq	117c8 <__assert_fail@plt+0x5bc>
   11754:	cmp	r3, #122	; 0x7a
   11758:	beq	117d8 <__assert_fail@plt+0x5cc>
   1175c:	b	11840 <__assert_fail@plt+0x634>
   11760:	ldr	r3, [fp, #-20]	; 0xffffffec
   11764:	cmp	r3, #0
   11768:	bne	11788 <__assert_fail@plt+0x57c>
   1176c:	ldr	r0, [pc, #2140]	; 11fd0 <__assert_fail@plt+0xdc4>
   11770:	bl	110d4 <gettext@plt>
   11774:	mov	r3, r0
   11778:	mov	r2, r3
   1177c:	mov	r1, #0
   11780:	mov	r0, #1
   11784:	bl	11068 <error@plt>
   11788:	ldr	r3, [pc, #2116]	; 11fd4 <__assert_fail@plt+0xdc8>
   1178c:	mov	r2, #1
   11790:	strb	r2, [r3]
   11794:	b	11848 <__assert_fail@plt+0x63c>
   11798:	ldr	r3, [pc, #2104]	; 11fd8 <__assert_fail@plt+0xdcc>
   1179c:	mov	r2, #1
   117a0:	strb	r2, [r3]
   117a4:	b	11848 <__assert_fail@plt+0x63c>
   117a8:	ldr	r3, [pc, #2092]	; 11fdc <__assert_fail@plt+0xdd0>
   117ac:	mov	r2, #1
   117b0:	strb	r2, [r3]
   117b4:	b	11848 <__assert_fail@plt+0x63c>
   117b8:	ldr	r3, [pc, #2080]	; 11fe0 <__assert_fail@plt+0xdd4>
   117bc:	mov	r2, #1
   117c0:	strb	r2, [r3]
   117c4:	b	11848 <__assert_fail@plt+0x63c>
   117c8:	ldr	r3, [pc, #2068]	; 11fe4 <__assert_fail@plt+0xdd8>
   117cc:	mov	r2, #1
   117d0:	strb	r2, [r3]
   117d4:	b	11848 <__assert_fail@plt+0x63c>
   117d8:	ldr	r3, [pc, #2056]	; 11fe8 <__assert_fail@plt+0xddc>
   117dc:	mov	r2, #1
   117e0:	strb	r2, [r3]
   117e4:	b	11848 <__assert_fail@plt+0x63c>
   117e8:	ldr	r3, [pc, #2044]	; 11fec <__assert_fail@plt+0xde0>
   117ec:	mov	r2, #1
   117f0:	strb	r2, [r3]
   117f4:	b	11848 <__assert_fail@plt+0x63c>
   117f8:	mov	r0, #0
   117fc:	bl	11520 <__assert_fail@plt+0x314>
   11800:	ldr	r3, [pc, #2024]	; 11ff0 <__assert_fail@plt+0xde4>
   11804:	ldr	r0, [r3]
   11808:	ldr	r3, [pc, #2020]	; 11ff4 <__assert_fail@plt+0xde8>
   1180c:	ldr	r2, [r3]
   11810:	mov	r3, #0
   11814:	str	r3, [sp, #8]
   11818:	ldr	r3, [pc, #2008]	; 11ff8 <__assert_fail@plt+0xdec>
   1181c:	str	r3, [sp, #4]
   11820:	ldr	r3, [pc, #2004]	; 11ffc <__assert_fail@plt+0xdf0>
   11824:	str	r3, [sp]
   11828:	mov	r3, r2
   1182c:	ldr	r2, [pc, #1996]	; 12000 <__assert_fail@plt+0xdf4>
   11830:	ldr	r1, [pc, #1996]	; 12004 <__assert_fail@plt+0xdf8>
   11834:	bl	16104 <__assert_fail@plt+0x4ef8>
   11838:	mov	r0, #0
   1183c:	bl	110c8 <exit@plt>
   11840:	mov	r0, #1
   11844:	bl	11520 <__assert_fail@plt+0x314>
   11848:	mov	r3, #0
   1184c:	str	r3, [sp]
   11850:	ldr	r3, [pc, #1968]	; 12008 <__assert_fail@plt+0xdfc>
   11854:	ldr	r2, [pc, #1968]	; 1200c <__assert_fail@plt+0xe00>
   11858:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1185c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11860:	bl	110b0 <getopt_long@plt>
   11864:	str	r0, [fp, #-32]	; 0xffffffe0
   11868:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1186c:	cmn	r3, #1
   11870:	bne	116e4 <__assert_fail@plt+0x4d8>
   11874:	ldr	r3, [pc, #1940]	; 12010 <__assert_fail@plt+0xe04>
   11878:	ldr	r3, [r3]
   1187c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11880:	sub	r3, r2, r3
   11884:	str	r3, [fp, #-36]	; 0xffffffdc
   11888:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1188c:	cmp	r3, #0
   11890:	beq	118c0 <__assert_fail@plt+0x6b4>
   11894:	ldr	r3, [pc, #1848]	; 11fd4 <__assert_fail@plt+0xdc8>
   11898:	ldrb	r3, [r3]
   1189c:	cmp	r3, #0
   118a0:	beq	118c0 <__assert_fail@plt+0x6b4>
   118a4:	ldr	r0, [pc, #1896]	; 12014 <__assert_fail@plt+0xe08>
   118a8:	bl	110d4 <gettext@plt>
   118ac:	mov	r3, r0
   118b0:	mov	r2, r3
   118b4:	mov	r1, #0
   118b8:	mov	r0, #1
   118bc:	bl	11068 <error@plt>
   118c0:	ldr	r3, [pc, #1820]	; 11fe4 <__assert_fail@plt+0xdd8>
   118c4:	ldrb	r3, [r3]
   118c8:	mov	r2, r3
   118cc:	ldr	r3, [pc, #1796]	; 11fd8 <__assert_fail@plt+0xdcc>
   118d0:	ldrb	r3, [r3]
   118d4:	add	r3, r2, r3
   118d8:	ldr	r2, [pc, #1804]	; 11fec <__assert_fail@plt+0xde0>
   118dc:	ldrb	r2, [r2]
   118e0:	add	r3, r3, r2
   118e4:	ldr	r2, [pc, #1768]	; 11fd4 <__assert_fail@plt+0xdc8>
   118e8:	ldrb	r2, [r2]
   118ec:	add	r3, r3, r2
   118f0:	cmp	r3, #1
   118f4:	ble	11914 <__assert_fail@plt+0x708>
   118f8:	ldr	r0, [pc, #1816]	; 12018 <__assert_fail@plt+0xe0c>
   118fc:	bl	110d4 <gettext@plt>
   11900:	mov	r3, r0
   11904:	mov	r2, r3
   11908:	mov	r1, #0
   1190c:	mov	r0, #1
   11910:	bl	11068 <error@plt>
   11914:	ldr	r3, [pc, #1736]	; 11fe4 <__assert_fail@plt+0xdd8>
   11918:	ldrb	r3, [r3]
   1191c:	eor	r3, r3, #1
   11920:	uxtb	r3, r3
   11924:	cmp	r3, #0
   11928:	beq	1197c <__assert_fail@plt+0x770>
   1192c:	ldr	r3, [pc, #1700]	; 11fd8 <__assert_fail@plt+0xdcc>
   11930:	ldrb	r3, [r3]
   11934:	eor	r3, r3, #1
   11938:	uxtb	r3, r3
   1193c:	cmp	r3, #0
   11940:	beq	1197c <__assert_fail@plt+0x770>
   11944:	ldr	r3, [pc, #1696]	; 11fec <__assert_fail@plt+0xde0>
   11948:	ldrb	r3, [r3]
   1194c:	eor	r3, r3, #1
   11950:	uxtb	r3, r3
   11954:	cmp	r3, #0
   11958:	beq	1197c <__assert_fail@plt+0x770>
   1195c:	ldr	r3, [pc, #1648]	; 11fd4 <__assert_fail@plt+0xdc8>
   11960:	ldrb	r3, [r3]
   11964:	eor	r3, r3, #1
   11968:	uxtb	r3, r3
   1196c:	cmp	r3, #0
   11970:	beq	1197c <__assert_fail@plt+0x770>
   11974:	mov	r3, #1
   11978:	b	11980 <__assert_fail@plt+0x774>
   1197c:	mov	r3, #0
   11980:	strb	r3, [fp, #-37]	; 0xffffffdb
   11984:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11988:	and	r3, r3, #1
   1198c:	strb	r3, [fp, #-37]	; 0xffffffdb
   11990:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11994:	cmp	r3, #0
   11998:	beq	119d8 <__assert_fail@plt+0x7cc>
   1199c:	ldr	r3, [pc, #1596]	; 11fe0 <__assert_fail@plt+0xdd4>
   119a0:	ldrb	r3, [r3]
   119a4:	cmp	r3, #0
   119a8:	bne	119bc <__assert_fail@plt+0x7b0>
   119ac:	ldr	r3, [pc, #1576]	; 11fdc <__assert_fail@plt+0xdd0>
   119b0:	ldrb	r3, [r3]
   119b4:	cmp	r3, #0
   119b8:	beq	119d8 <__assert_fail@plt+0x7cc>
   119bc:	ldr	r0, [pc, #1624]	; 1201c <__assert_fail@plt+0xe10>
   119c0:	bl	110d4 <gettext@plt>
   119c4:	mov	r3, r0
   119c8:	mov	r2, r3
   119cc:	mov	r1, #0
   119d0:	mov	r0, #1
   119d4:	bl	11068 <error@plt>
   119d8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   119dc:	cmp	r3, #0
   119e0:	beq	11a10 <__assert_fail@plt+0x804>
   119e4:	ldr	r3, [pc, #1532]	; 11fe8 <__assert_fail@plt+0xddc>
   119e8:	ldrb	r3, [r3]
   119ec:	cmp	r3, #0
   119f0:	beq	11a10 <__assert_fail@plt+0x804>
   119f4:	ldr	r0, [pc, #1572]	; 12020 <__assert_fail@plt+0xe14>
   119f8:	bl	110d4 <gettext@plt>
   119fc:	mov	r3, r0
   11a00:	mov	r2, r3
   11a04:	mov	r1, #0
   11a08:	mov	r0, #1
   11a0c:	bl	11068 <error@plt>
   11a10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a14:	cmp	r3, #0
   11a18:	bne	11ac8 <__assert_fail@plt+0x8bc>
   11a1c:	ldr	r3, [pc, #1456]	; 11fd4 <__assert_fail@plt+0xdc8>
   11a20:	ldrb	r3, [r3]
   11a24:	cmp	r3, #0
   11a28:	bne	11a4c <__assert_fail@plt+0x840>
   11a2c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11a30:	cmp	r3, #0
   11a34:	beq	11ac8 <__assert_fail@plt+0x8bc>
   11a38:	ldr	r0, [pc, #1508]	; 12024 <__assert_fail@plt+0xe18>
   11a3c:	bl	11074 <getenv@plt>
   11a40:	mov	r3, r0
   11a44:	cmp	r3, #0
   11a48:	bne	11ac8 <__assert_fail@plt+0x8bc>
   11a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a50:	cmp	r3, #0
   11a54:	beq	11a7c <__assert_fail@plt+0x870>
   11a58:	ldr	r0, [pc, #1480]	; 12028 <__assert_fail@plt+0xe1c>
   11a5c:	bl	11038 <getcon@plt>
   11a60:	mov	r3, r0
   11a64:	cmp	r3, #0
   11a68:	beq	11a7c <__assert_fail@plt+0x870>
   11a6c:	ldr	r3, [pc, #1376]	; 11fd4 <__assert_fail@plt+0xdc8>
   11a70:	ldrb	r3, [r3]
   11a74:	cmp	r3, #0
   11a78:	bne	11aac <__assert_fail@plt+0x8a0>
   11a7c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11a80:	cmp	r3, #0
   11a84:	beq	11ac8 <__assert_fail@plt+0x8bc>
   11a88:	ldr	r0, [pc, #1432]	; 12028 <__assert_fail@plt+0xe1c>
   11a8c:	bl	114e0 <__assert_fail@plt+0x2d4>
   11a90:	mov	r3, r0
   11a94:	cmp	r3, #0
   11a98:	bge	11ac8 <__assert_fail@plt+0x8bc>
   11a9c:	ldr	r3, [pc, #1328]	; 11fd4 <__assert_fail@plt+0xdc8>
   11aa0:	ldrb	r3, [r3]
   11aa4:	cmp	r3, #0
   11aa8:	beq	11ac8 <__assert_fail@plt+0x8bc>
   11aac:	ldr	r0, [pc, #1400]	; 1202c <__assert_fail@plt+0xe20>
   11ab0:	bl	110d4 <gettext@plt>
   11ab4:	mov	r3, r0
   11ab8:	mov	r2, r3
   11abc:	mov	r1, #0
   11ac0:	mov	r0, #1
   11ac4:	bl	11068 <error@plt>
   11ac8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11acc:	cmp	r3, #0
   11ad0:	beq	11c7c <__assert_fail@plt+0xa70>
   11ad4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11ad8:	cmp	r3, #1
   11adc:	movhi	r3, #1
   11ae0:	movls	r3, #0
   11ae4:	uxtb	r2, r3
   11ae8:	ldr	r3, [pc, #1344]	; 12030 <__assert_fail@plt+0xe24>
   11aec:	strb	r2, [r3]
   11af0:	ldr	r3, [pc, #1304]	; 12010 <__assert_fail@plt+0xe04>
   11af4:	ldr	r3, [r3]
   11af8:	mov	r2, r3
   11afc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11b00:	add	r3, r3, r2
   11b04:	str	r3, [fp, #-36]	; 0xffffffdc
   11b08:	b	11c60 <__assert_fail@plt+0xa54>
   11b0c:	mov	r3, #0
   11b10:	str	r3, [fp, #-16]
   11b14:	ldr	r3, [pc, #1268]	; 12010 <__assert_fail@plt+0xe04>
   11b18:	ldr	r3, [r3]
   11b1c:	lsl	r3, r3, #2
   11b20:	ldr	r2, [fp, #-60]	; 0xffffffc4
   11b24:	add	r3, r2, r3
   11b28:	ldr	r3, [r3]
   11b2c:	str	r3, [fp, #-44]	; 0xffffffd4
   11b30:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11b34:	ldrb	r3, [r3]
   11b38:	cmp	r3, #0
   11b3c:	beq	11b7c <__assert_fail@plt+0x970>
   11b40:	mov	r3, #0
   11b44:	str	r3, [sp]
   11b48:	mov	r3, #0
   11b4c:	mov	r2, #0
   11b50:	ldr	r1, [pc, #1244]	; 12034 <__assert_fail@plt+0xe28>
   11b54:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11b58:	bl	15970 <__assert_fail@plt+0x4764>
   11b5c:	mov	r3, r0
   11b60:	cmp	r3, #0
   11b64:	bne	11b7c <__assert_fail@plt+0x970>
   11b68:	ldr	r3, [pc, #1220]	; 12034 <__assert_fail@plt+0xe28>
   11b6c:	ldr	r3, [r3]
   11b70:	mov	r0, r3
   11b74:	bl	10f60 <getpwuid@plt>
   11b78:	str	r0, [fp, #-16]
   11b7c:	ldr	r3, [fp, #-16]
   11b80:	cmp	r3, #0
   11b84:	bne	11be4 <__assert_fail@plt+0x9d8>
   11b88:	bl	11110 <__errno_location@plt>
   11b8c:	mov	r3, r0
   11b90:	ldr	r4, [r3]
   11b94:	ldr	r0, [pc, #1180]	; 12038 <__assert_fail@plt+0xe2c>
   11b98:	bl	110d4 <gettext@plt>
   11b9c:	mov	r5, r0
   11ba0:	ldr	r3, [pc, #1128]	; 12010 <__assert_fail@plt+0xe04>
   11ba4:	ldr	r3, [r3]
   11ba8:	lsl	r3, r3, #2
   11bac:	ldr	r2, [fp, #-60]	; 0xffffffc4
   11bb0:	add	r3, r2, r3
   11bb4:	ldr	r3, [r3]
   11bb8:	mov	r0, r3
   11bbc:	bl	1551c <__assert_fail@plt+0x4310>
   11bc0:	mov	r3, r0
   11bc4:	mov	r2, r5
   11bc8:	mov	r1, r4
   11bcc:	mov	r0, #0
   11bd0:	bl	11068 <error@plt>
   11bd4:	ldr	r3, [pc, #1120]	; 1203c <__assert_fail@plt+0xe30>
   11bd8:	mov	r2, #0
   11bdc:	strb	r2, [r3]
   11be0:	b	11c4c <__assert_fail@plt+0xa40>
   11be4:	ldr	r3, [fp, #-16]
   11be8:	ldr	r3, [r3]
   11bec:	mov	r0, r3
   11bf0:	bl	16d30 <__assert_fail@plt+0x5b24>
   11bf4:	mov	r3, r0
   11bf8:	str	r3, [fp, #-28]	; 0xffffffe4
   11bfc:	ldr	r3, [fp, #-16]
   11c00:	ldr	r3, [r3, #8]
   11c04:	ldr	r2, [pc, #1064]	; 12034 <__assert_fail@plt+0xe28>
   11c08:	str	r3, [r2]
   11c0c:	ldr	r3, [pc, #1056]	; 12034 <__assert_fail@plt+0xe28>
   11c10:	ldr	r3, [r3]
   11c14:	ldr	r2, [pc, #1060]	; 12040 <__assert_fail@plt+0xe34>
   11c18:	str	r3, [r2]
   11c1c:	ldr	r3, [fp, #-16]
   11c20:	ldr	r3, [r3, #12]
   11c24:	ldr	r2, [pc, #1048]	; 12044 <__assert_fail@plt+0xe38>
   11c28:	str	r3, [r2]
   11c2c:	ldr	r3, [pc, #1040]	; 12044 <__assert_fail@plt+0xe38>
   11c30:	ldr	r3, [r3]
   11c34:	ldr	r2, [pc, #1036]	; 12048 <__assert_fail@plt+0xe3c>
   11c38:	str	r3, [r2]
   11c3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c40:	bl	12584 <__assert_fail@plt+0x1378>
   11c44:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c48:	bl	12ccc <__assert_fail@plt+0x1ac0>
   11c4c:	ldr	r3, [pc, #956]	; 12010 <__assert_fail@plt+0xe04>
   11c50:	ldr	r3, [r3]
   11c54:	add	r3, r3, #1
   11c58:	ldr	r2, [pc, #944]	; 12010 <__assert_fail@plt+0xe04>
   11c5c:	str	r3, [r2]
   11c60:	ldr	r3, [pc, #936]	; 12010 <__assert_fail@plt+0xe04>
   11c64:	ldr	r3, [r3]
   11c68:	mov	r2, r3
   11c6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c70:	cmp	r2, r3
   11c74:	bcc	11b0c <__assert_fail@plt+0x900>
   11c78:	b	11fa4 <__assert_fail@plt+0xd98>
   11c7c:	mvn	r3, #0
   11c80:	str	r3, [fp, #-48]	; 0xffffffd0
   11c84:	mvn	r3, #0
   11c88:	str	r3, [fp, #-52]	; 0xffffffcc
   11c8c:	ldr	r3, [pc, #848]	; 11fe4 <__assert_fail@plt+0xdd8>
   11c90:	ldrb	r3, [r3]
   11c94:	cmp	r3, #0
   11c98:	beq	11cb0 <__assert_fail@plt+0xaa4>
   11c9c:	ldr	r3, [pc, #828]	; 11fe0 <__assert_fail@plt+0xdd4>
   11ca0:	ldrb	r3, [r3]
   11ca4:	eor	r3, r3, #1
   11ca8:	uxtb	r3, r3
   11cac:	b	11d0c <__assert_fail@plt+0xb00>
   11cb0:	ldr	r3, [pc, #800]	; 11fd8 <__assert_fail@plt+0xdcc>
   11cb4:	ldrb	r3, [r3]
   11cb8:	eor	r3, r3, #1
   11cbc:	uxtb	r3, r3
   11cc0:	cmp	r3, #0
   11cc4:	beq	11d00 <__assert_fail@plt+0xaf4>
   11cc8:	ldr	r3, [pc, #796]	; 11fec <__assert_fail@plt+0xde0>
   11ccc:	ldrb	r3, [r3]
   11cd0:	eor	r3, r3, #1
   11cd4:	uxtb	r3, r3
   11cd8:	cmp	r3, #0
   11cdc:	beq	11d00 <__assert_fail@plt+0xaf4>
   11ce0:	ldr	r3, [pc, #748]	; 11fd4 <__assert_fail@plt+0xdc8>
   11ce4:	ldrb	r3, [r3]
   11ce8:	eor	r3, r3, #1
   11cec:	uxtb	r3, r3
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d00 <__assert_fail@plt+0xaf4>
   11cf8:	mov	r3, #1
   11cfc:	b	11d04 <__assert_fail@plt+0xaf8>
   11d00:	mov	r3, #0
   11d04:	and	r3, r3, #1
   11d08:	uxtb	r3, r3
   11d0c:	cmp	r3, #0
   11d10:	beq	11d84 <__assert_fail@plt+0xb78>
   11d14:	bl	11110 <__errno_location@plt>
   11d18:	mov	r2, r0
   11d1c:	mov	r3, #0
   11d20:	str	r3, [r2]
   11d24:	bl	10ff0 <geteuid@plt>
   11d28:	mov	r2, r0
   11d2c:	ldr	r3, [pc, #768]	; 12034 <__assert_fail@plt+0xe28>
   11d30:	str	r2, [r3]
   11d34:	ldr	r3, [pc, #760]	; 12034 <__assert_fail@plt+0xe28>
   11d38:	ldr	r2, [r3]
   11d3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11d40:	cmp	r2, r3
   11d44:	bne	11d84 <__assert_fail@plt+0xb78>
   11d48:	bl	11110 <__errno_location@plt>
   11d4c:	mov	r3, r0
   11d50:	ldr	r3, [r3]
   11d54:	cmp	r3, #0
   11d58:	beq	11d84 <__assert_fail@plt+0xb78>
   11d5c:	bl	11110 <__errno_location@plt>
   11d60:	mov	r3, r0
   11d64:	ldr	r4, [r3]
   11d68:	ldr	r0, [pc, #732]	; 1204c <__assert_fail@plt+0xe40>
   11d6c:	bl	110d4 <gettext@plt>
   11d70:	mov	r3, r0
   11d74:	mov	r2, r3
   11d78:	mov	r1, r4
   11d7c:	mov	r0, #1
   11d80:	bl	11068 <error@plt>
   11d84:	ldr	r3, [pc, #600]	; 11fe4 <__assert_fail@plt+0xdd8>
   11d88:	ldrb	r3, [r3]
   11d8c:	cmp	r3, #0
   11d90:	beq	11da0 <__assert_fail@plt+0xb94>
   11d94:	ldr	r3, [pc, #580]	; 11fe0 <__assert_fail@plt+0xdd4>
   11d98:	ldrb	r3, [r3]
   11d9c:	b	11df4 <__assert_fail@plt+0xbe8>
   11da0:	ldr	r3, [pc, #560]	; 11fd8 <__assert_fail@plt+0xdcc>
   11da4:	ldrb	r3, [r3]
   11da8:	eor	r3, r3, #1
   11dac:	uxtb	r3, r3
   11db0:	cmp	r3, #0
   11db4:	beq	11de8 <__assert_fail@plt+0xbdc>
   11db8:	ldr	r3, [pc, #556]	; 11fec <__assert_fail@plt+0xde0>
   11dbc:	ldrb	r3, [r3]
   11dc0:	cmp	r3, #0
   11dc4:	bne	11de0 <__assert_fail@plt+0xbd4>
   11dc8:	ldr	r3, [pc, #516]	; 11fd4 <__assert_fail@plt+0xdc8>
   11dcc:	ldrb	r3, [r3]
   11dd0:	eor	r3, r3, #1
   11dd4:	uxtb	r3, r3
   11dd8:	cmp	r3, #0
   11ddc:	beq	11de8 <__assert_fail@plt+0xbdc>
   11de0:	mov	r3, #1
   11de4:	b	11dec <__assert_fail@plt+0xbe0>
   11de8:	mov	r3, #0
   11dec:	and	r3, r3, #1
   11df0:	uxtb	r3, r3
   11df4:	cmp	r3, #0
   11df8:	beq	11e6c <__assert_fail@plt+0xc60>
   11dfc:	bl	11110 <__errno_location@plt>
   11e00:	mov	r2, r0
   11e04:	mov	r3, #0
   11e08:	str	r3, [r2]
   11e0c:	bl	10f84 <getuid@plt>
   11e10:	mov	r2, r0
   11e14:	ldr	r3, [pc, #548]	; 12040 <__assert_fail@plt+0xe34>
   11e18:	str	r2, [r3]
   11e1c:	ldr	r3, [pc, #540]	; 12040 <__assert_fail@plt+0xe34>
   11e20:	ldr	r2, [r3]
   11e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11e28:	cmp	r2, r3
   11e2c:	bne	11e6c <__assert_fail@plt+0xc60>
   11e30:	bl	11110 <__errno_location@plt>
   11e34:	mov	r3, r0
   11e38:	ldr	r3, [r3]
   11e3c:	cmp	r3, #0
   11e40:	beq	11e6c <__assert_fail@plt+0xc60>
   11e44:	bl	11110 <__errno_location@plt>
   11e48:	mov	r3, r0
   11e4c:	ldr	r4, [r3]
   11e50:	ldr	r0, [pc, #504]	; 12050 <__assert_fail@plt+0xe44>
   11e54:	bl	110d4 <gettext@plt>
   11e58:	mov	r3, r0
   11e5c:	mov	r2, r3
   11e60:	mov	r1, r4
   11e64:	mov	r0, #1
   11e68:	bl	11068 <error@plt>
   11e6c:	ldr	r3, [pc, #368]	; 11fe4 <__assert_fail@plt+0xdd8>
   11e70:	ldrb	r3, [r3]
   11e74:	eor	r3, r3, #1
   11e78:	uxtb	r3, r3
   11e7c:	cmp	r3, #0
   11e80:	beq	11f9c <__assert_fail@plt+0xd90>
   11e84:	ldr	r3, [pc, #332]	; 11fd8 <__assert_fail@plt+0xdcc>
   11e88:	ldrb	r3, [r3]
   11e8c:	cmp	r3, #0
   11e90:	bne	11ebc <__assert_fail@plt+0xcb0>
   11e94:	ldr	r3, [pc, #336]	; 11fec <__assert_fail@plt+0xde0>
   11e98:	ldrb	r3, [r3]
   11e9c:	cmp	r3, #0
   11ea0:	bne	11ebc <__assert_fail@plt+0xcb0>
   11ea4:	ldr	r3, [pc, #296]	; 11fd4 <__assert_fail@plt+0xdc8>
   11ea8:	ldrb	r3, [r3]
   11eac:	eor	r3, r3, #1
   11eb0:	uxtb	r3, r3
   11eb4:	cmp	r3, #0
   11eb8:	beq	11f9c <__assert_fail@plt+0xd90>
   11ebc:	bl	11110 <__errno_location@plt>
   11ec0:	mov	r2, r0
   11ec4:	mov	r3, #0
   11ec8:	str	r3, [r2]
   11ecc:	bl	11008 <getegid@plt>
   11ed0:	mov	r2, r0
   11ed4:	ldr	r3, [pc, #360]	; 12044 <__assert_fail@plt+0xe38>
   11ed8:	str	r2, [r3]
   11edc:	ldr	r3, [pc, #352]	; 12044 <__assert_fail@plt+0xe38>
   11ee0:	ldr	r2, [r3]
   11ee4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11ee8:	cmp	r2, r3
   11eec:	bne	11f2c <__assert_fail@plt+0xd20>
   11ef0:	bl	11110 <__errno_location@plt>
   11ef4:	mov	r3, r0
   11ef8:	ldr	r3, [r3]
   11efc:	cmp	r3, #0
   11f00:	beq	11f2c <__assert_fail@plt+0xd20>
   11f04:	bl	11110 <__errno_location@plt>
   11f08:	mov	r3, r0
   11f0c:	ldr	r4, [r3]
   11f10:	ldr	r0, [pc, #316]	; 12054 <__assert_fail@plt+0xe48>
   11f14:	bl	110d4 <gettext@plt>
   11f18:	mov	r3, r0
   11f1c:	mov	r2, r3
   11f20:	mov	r1, r4
   11f24:	mov	r0, #1
   11f28:	bl	11068 <error@plt>
   11f2c:	bl	11110 <__errno_location@plt>
   11f30:	mov	r2, r0
   11f34:	mov	r3, #0
   11f38:	str	r3, [r2]
   11f3c:	bl	11128 <getgid@plt>
   11f40:	mov	r2, r0
   11f44:	ldr	r3, [pc, #252]	; 12048 <__assert_fail@plt+0xe3c>
   11f48:	str	r2, [r3]
   11f4c:	ldr	r3, [pc, #244]	; 12048 <__assert_fail@plt+0xe3c>
   11f50:	ldr	r2, [r3]
   11f54:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11f58:	cmp	r2, r3
   11f5c:	bne	11f9c <__assert_fail@plt+0xd90>
   11f60:	bl	11110 <__errno_location@plt>
   11f64:	mov	r3, r0
   11f68:	ldr	r3, [r3]
   11f6c:	cmp	r3, #0
   11f70:	beq	11f9c <__assert_fail@plt+0xd90>
   11f74:	bl	11110 <__errno_location@plt>
   11f78:	mov	r3, r0
   11f7c:	ldr	r4, [r3]
   11f80:	ldr	r0, [pc, #208]	; 12058 <__assert_fail@plt+0xe4c>
   11f84:	bl	110d4 <gettext@plt>
   11f88:	mov	r3, r0
   11f8c:	mov	r2, r3
   11f90:	mov	r1, r4
   11f94:	mov	r0, #1
   11f98:	bl	11068 <error@plt>
   11f9c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11fa0:	bl	12584 <__assert_fail@plt+0x1378>
   11fa4:	ldr	r3, [pc, #144]	; 1203c <__assert_fail@plt+0xe30>
   11fa8:	ldrb	r3, [r3]
   11fac:	eor	r3, r3, #1
   11fb0:	uxtb	r3, r3
   11fb4:	mov	r0, r3
   11fb8:	sub	sp, fp, #12
   11fbc:	pop	{r4, r5, fp, pc}
   11fc0:	andeq	r9, r1, ip, asr #6
   11fc4:	andeq	r9, r1, r0, ror #16
   11fc8:	andeq	r9, r1, r4, ror #6
   11fcc:	muleq	r1, r8, fp
   11fd0:	andeq	r9, r1, r8, ror r8
   11fd4:	muleq	r2, r4, r1
   11fd8:	muleq	r2, r7, r1
   11fdc:	muleq	r2, fp, r1
   11fe0:	muleq	r2, r8, r1
   11fe4:	muleq	r2, r9, r1
   11fe8:	muleq	r2, r5, r1
   11fec:	muleq	r2, r6, r1
   11ff0:	andeq	fp, r2, ip, lsl #3
   11ff4:	andeq	fp, r2, r0, lsr #2
   11ff8:			; <UNDEFINED> instruction: 0x000198b0
   11ffc:	andeq	r9, r1, r0, asr #17
   12000:	muleq	r1, r4, r2
   12004:	andeq	r9, r1, ip, asr r8
   12008:	andeq	r9, r1, r8, asr #8
   1200c:	ldrdeq	r9, [r1], -r0
   12010:	andeq	fp, r2, r0, lsl #3
   12014:	ldrdeq	r9, [r1], -ip
   12018:	andeq	r9, r1, r0, lsl r9
   1201c:	andeq	r9, r1, ip, lsr r9
   12020:	andeq	r9, r1, r4, ror r9
   12024:	andeq	r9, r1, r4, lsr #19
   12028:	andeq	fp, r2, ip, lsr #3
   1202c:			; <UNDEFINED> instruction: 0x000199b4
   12030:	muleq	r2, sl, r1
   12034:	andeq	fp, r2, r0, lsr #3
   12038:	ldrdeq	r9, [r1], -r0
   1203c:	andeq	fp, r2, ip, lsl r1
   12040:	muleq	r2, ip, r1
   12044:	andeq	fp, r2, r8, lsr #3
   12048:	andeq	fp, r2, r4, lsr #3
   1204c:	andeq	r9, r1, r4, ror #19
   12050:	andeq	r9, r1, r0, lsl #20
   12054:	andeq	r9, r1, r4, lsl sl
   12058:	andeq	r9, r1, r0, lsr sl
   1205c:	push	{fp, lr}
   12060:	add	fp, sp, #4
   12064:	sub	sp, sp, #8
   12068:	str	r0, [fp, #-8]
   1206c:	ldr	r3, [fp, #-8]
   12070:	ldr	r3, [r3]
   12074:	mov	r0, r3
   12078:	mov	r1, #0
   1207c:	ldr	r2, [pc, #16]	; 12094 <__assert_fail@plt+0xe88>
   12080:	bl	12d58 <__assert_fail@plt+0x1b4c>
   12084:	mov	r3, r0
   12088:	mov	r0, r3
   1208c:	sub	sp, fp, #4
   12090:	pop	{fp, pc}
   12094:			; <UNDEFINED> instruction: 0x0002b1b0
   12098:	push	{fp, lr}
   1209c:	add	fp, sp, #4
   120a0:	sub	sp, sp, #8
   120a4:	str	r0, [fp, #-8]
   120a8:	ldr	r3, [fp, #-8]
   120ac:	ldr	r3, [r3]
   120b0:	mov	r0, r3
   120b4:	mov	r1, #0
   120b8:	ldr	r2, [pc, #16]	; 120d0 <__assert_fail@plt+0xec4>
   120bc:	bl	12d58 <__assert_fail@plt+0x1b4c>
   120c0:	mov	r3, r0
   120c4:	mov	r0, r3
   120c8:	sub	sp, fp, #4
   120cc:	pop	{fp, pc}
   120d0:	andeq	fp, r2, r8, asr #3
   120d4:	push	{r4, fp, lr}
   120d8:	add	fp, sp, #8
   120dc:	sub	sp, sp, #20
   120e0:	str	r0, [fp, #-24]	; 0xffffffe8
   120e4:	mov	r3, #0
   120e8:	str	r3, [fp, #-16]
   120ec:	ldr	r3, [pc, #168]	; 1219c <__assert_fail@plt+0xf90>
   120f0:	ldrb	r3, [r3]
   120f4:	cmp	r3, #0
   120f8:	beq	12150 <__assert_fail@plt+0xf44>
   120fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12100:	mov	r0, r3
   12104:	bl	10f60 <getpwuid@plt>
   12108:	str	r0, [fp, #-16]
   1210c:	ldr	r3, [fp, #-16]
   12110:	cmp	r3, #0
   12114:	bne	12150 <__assert_fail@plt+0xf44>
   12118:	ldr	r0, [pc, #128]	; 121a0 <__assert_fail@plt+0xf94>
   1211c:	bl	110d4 <gettext@plt>
   12120:	mov	r4, r0
   12124:	sub	r3, fp, #24
   12128:	mov	r0, r3
   1212c:	bl	12098 <__assert_fail@plt+0xe8c>
   12130:	mov	r3, r0
   12134:	mov	r2, r4
   12138:	mov	r1, #0
   1213c:	mov	r0, #0
   12140:	bl	11068 <error@plt>
   12144:	ldr	r3, [pc, #88]	; 121a4 <__assert_fail@plt+0xf98>
   12148:	mov	r2, #0
   1214c:	strb	r2, [r3]
   12150:	ldr	r3, [fp, #-16]
   12154:	cmp	r3, #0
   12158:	beq	12168 <__assert_fail@plt+0xf5c>
   1215c:	ldr	r3, [fp, #-16]
   12160:	ldr	r3, [r3]
   12164:	b	12178 <__assert_fail@plt+0xf6c>
   12168:	sub	r3, fp, #24
   1216c:	mov	r0, r3
   12170:	bl	12098 <__assert_fail@plt+0xe8c>
   12174:	mov	r3, r0
   12178:	str	r3, [fp, #-20]	; 0xffffffec
   1217c:	ldr	r3, [pc, #36]	; 121a8 <__assert_fail@plt+0xf9c>
   12180:	ldr	r3, [r3]
   12184:	mov	r1, r3
   12188:	ldr	r0, [fp, #-20]	; 0xffffffec
   1218c:	bl	10f24 <fputs_unlocked@plt>
   12190:	nop			; (mov r0, r0)
   12194:	sub	sp, fp, #8
   12198:	pop	{r4, fp, pc}
   1219c:	muleq	r2, fp, r1
   121a0:	andeq	r9, r1, r4, asr #20
   121a4:	andeq	fp, r2, ip, lsl r1
   121a8:	andeq	fp, r2, ip, lsl #3
   121ac:	push	{r4, r5, fp, lr}
   121b0:	add	fp, sp, #12
   121b4:	sub	sp, sp, #32
   121b8:	str	r0, [fp, #-40]	; 0xffffffd8
   121bc:	ldr	r0, [pc, #896]	; 12544 <__assert_fail@plt+0x1338>
   121c0:	bl	110d4 <gettext@plt>
   121c4:	mov	r4, r0
   121c8:	ldr	r0, [pc, #888]	; 12548 <__assert_fail@plt+0x133c>
   121cc:	bl	12098 <__assert_fail@plt+0xe8c>
   121d0:	mov	r3, r0
   121d4:	mov	r1, r3
   121d8:	mov	r0, r4
   121dc:	bl	10f6c <printf@plt>
   121e0:	ldr	r3, [pc, #864]	; 12548 <__assert_fail@plt+0x133c>
   121e4:	ldr	r3, [r3]
   121e8:	mov	r0, r3
   121ec:	bl	10f60 <getpwuid@plt>
   121f0:	str	r0, [fp, #-16]
   121f4:	ldr	r3, [fp, #-16]
   121f8:	cmp	r3, #0
   121fc:	beq	12214 <__assert_fail@plt+0x1008>
   12200:	ldr	r3, [fp, #-16]
   12204:	ldr	r3, [r3]
   12208:	mov	r1, r3
   1220c:	ldr	r0, [pc, #824]	; 1254c <__assert_fail@plt+0x1340>
   12210:	bl	10f6c <printf@plt>
   12214:	ldr	r0, [pc, #820]	; 12550 <__assert_fail@plt+0x1344>
   12218:	bl	110d4 <gettext@plt>
   1221c:	mov	r4, r0
   12220:	ldr	r0, [pc, #812]	; 12554 <__assert_fail@plt+0x1348>
   12224:	bl	1205c <__assert_fail@plt+0xe50>
   12228:	mov	r3, r0
   1222c:	mov	r1, r3
   12230:	mov	r0, r4
   12234:	bl	10f6c <printf@plt>
   12238:	ldr	r3, [pc, #788]	; 12554 <__assert_fail@plt+0x1348>
   1223c:	ldr	r3, [r3]
   12240:	mov	r0, r3
   12244:	bl	111e8 <getgrgid@plt>
   12248:	str	r0, [fp, #-28]	; 0xffffffe4
   1224c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12250:	cmp	r3, #0
   12254:	beq	1226c <__assert_fail@plt+0x1060>
   12258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1225c:	ldr	r3, [r3]
   12260:	mov	r1, r3
   12264:	ldr	r0, [pc, #736]	; 1254c <__assert_fail@plt+0x1340>
   12268:	bl	10f6c <printf@plt>
   1226c:	ldr	r3, [pc, #740]	; 12558 <__assert_fail@plt+0x134c>
   12270:	ldr	r2, [r3]
   12274:	ldr	r3, [pc, #716]	; 12548 <__assert_fail@plt+0x133c>
   12278:	ldr	r3, [r3]
   1227c:	cmp	r2, r3
   12280:	beq	122dc <__assert_fail@plt+0x10d0>
   12284:	ldr	r0, [pc, #720]	; 1255c <__assert_fail@plt+0x1350>
   12288:	bl	110d4 <gettext@plt>
   1228c:	mov	r4, r0
   12290:	ldr	r0, [pc, #704]	; 12558 <__assert_fail@plt+0x134c>
   12294:	bl	12098 <__assert_fail@plt+0xe8c>
   12298:	mov	r3, r0
   1229c:	mov	r1, r3
   122a0:	mov	r0, r4
   122a4:	bl	10f6c <printf@plt>
   122a8:	ldr	r3, [pc, #680]	; 12558 <__assert_fail@plt+0x134c>
   122ac:	ldr	r3, [r3]
   122b0:	mov	r0, r3
   122b4:	bl	10f60 <getpwuid@plt>
   122b8:	str	r0, [fp, #-16]
   122bc:	ldr	r3, [fp, #-16]
   122c0:	cmp	r3, #0
   122c4:	beq	122dc <__assert_fail@plt+0x10d0>
   122c8:	ldr	r3, [fp, #-16]
   122cc:	ldr	r3, [r3]
   122d0:	mov	r1, r3
   122d4:	ldr	r0, [pc, #624]	; 1254c <__assert_fail@plt+0x1340>
   122d8:	bl	10f6c <printf@plt>
   122dc:	ldr	r3, [pc, #636]	; 12560 <__assert_fail@plt+0x1354>
   122e0:	ldr	r2, [r3]
   122e4:	ldr	r3, [pc, #616]	; 12554 <__assert_fail@plt+0x1348>
   122e8:	ldr	r3, [r3]
   122ec:	cmp	r2, r3
   122f0:	beq	1234c <__assert_fail@plt+0x1140>
   122f4:	ldr	r0, [pc, #616]	; 12564 <__assert_fail@plt+0x1358>
   122f8:	bl	110d4 <gettext@plt>
   122fc:	mov	r4, r0
   12300:	ldr	r0, [pc, #600]	; 12560 <__assert_fail@plt+0x1354>
   12304:	bl	1205c <__assert_fail@plt+0xe50>
   12308:	mov	r3, r0
   1230c:	mov	r1, r3
   12310:	mov	r0, r4
   12314:	bl	10f6c <printf@plt>
   12318:	ldr	r3, [pc, #576]	; 12560 <__assert_fail@plt+0x1354>
   1231c:	ldr	r3, [r3]
   12320:	mov	r0, r3
   12324:	bl	111e8 <getgrgid@plt>
   12328:	str	r0, [fp, #-28]	; 0xffffffe4
   1232c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12330:	cmp	r3, #0
   12334:	beq	1234c <__assert_fail@plt+0x1140>
   12338:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1233c:	ldr	r3, [r3]
   12340:	mov	r1, r3
   12344:	ldr	r0, [pc, #512]	; 1254c <__assert_fail@plt+0x1340>
   12348:	bl	10f6c <printf@plt>
   1234c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12350:	cmp	r3, #0
   12354:	beq	1237c <__assert_fail@plt+0x1170>
   12358:	ldr	r3, [fp, #-16]
   1235c:	cmp	r3, #0
   12360:	beq	12370 <__assert_fail@plt+0x1164>
   12364:	ldr	r3, [fp, #-16]
   12368:	ldr	r3, [r3, #12]
   1236c:	b	12374 <__assert_fail@plt+0x1168>
   12370:	mvn	r3, #0
   12374:	str	r3, [fp, #-20]	; 0xffffffec
   12378:	b	12388 <__assert_fail@plt+0x117c>
   1237c:	ldr	r3, [pc, #476]	; 12560 <__assert_fail@plt+0x1354>
   12380:	ldr	r3, [r3]
   12384:	str	r3, [fp, #-20]	; 0xffffffec
   12388:	sub	r3, fp, #36	; 0x24
   1238c:	mov	r2, r3
   12390:	ldr	r1, [fp, #-20]	; 0xffffffec
   12394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12398:	bl	16da8 <__assert_fail@plt+0x5b9c>
   1239c:	str	r0, [fp, #-32]	; 0xffffffe0
   123a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   123a4:	cmp	r3, #0
   123a8:	bge	12428 <__assert_fail@plt+0x121c>
   123ac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   123b0:	cmp	r3, #0
   123b4:	beq	123f0 <__assert_fail@plt+0x11e4>
   123b8:	bl	11110 <__errno_location@plt>
   123bc:	mov	r3, r0
   123c0:	ldr	r4, [r3]
   123c4:	ldr	r0, [pc, #412]	; 12568 <__assert_fail@plt+0x135c>
   123c8:	bl	110d4 <gettext@plt>
   123cc:	mov	r5, r0
   123d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   123d4:	bl	1551c <__assert_fail@plt+0x4310>
   123d8:	mov	r3, r0
   123dc:	mov	r2, r5
   123e0:	mov	r1, r4
   123e4:	mov	r0, #0
   123e8:	bl	11068 <error@plt>
   123ec:	b	12418 <__assert_fail@plt+0x120c>
   123f0:	bl	11110 <__errno_location@plt>
   123f4:	mov	r3, r0
   123f8:	ldr	r4, [r3]
   123fc:	ldr	r0, [pc, #360]	; 1256c <__assert_fail@plt+0x1360>
   12400:	bl	110d4 <gettext@plt>
   12404:	mov	r3, r0
   12408:	mov	r2, r3
   1240c:	mov	r1, r4
   12410:	mov	r0, #0
   12414:	bl	11068 <error@plt>
   12418:	ldr	r3, [pc, #336]	; 12570 <__assert_fail@plt+0x1364>
   1241c:	mov	r2, #0
   12420:	strb	r2, [r3]
   12424:	b	1253c <__assert_fail@plt+0x1330>
   12428:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1242c:	cmp	r3, #0
   12430:	ble	12454 <__assert_fail@plt+0x1248>
   12434:	ldr	r0, [pc, #312]	; 12574 <__assert_fail@plt+0x1368>
   12438:	bl	110d4 <gettext@plt>
   1243c:	mov	r2, r0
   12440:	ldr	r3, [pc, #304]	; 12578 <__assert_fail@plt+0x136c>
   12444:	ldr	r3, [r3]
   12448:	mov	r1, r3
   1244c:	mov	r0, r2
   12450:	bl	10f24 <fputs_unlocked@plt>
   12454:	mov	r3, #0
   12458:	str	r3, [fp, #-24]	; 0xffffffe8
   1245c:	b	124f0 <__assert_fail@plt+0x12e4>
   12460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12464:	cmp	r3, #0
   12468:	ble	12474 <__assert_fail@plt+0x1268>
   1246c:	mov	r0, #44	; 0x2c
   12470:	bl	11200 <putchar_unlocked@plt>
   12474:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12478:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1247c:	lsl	r3, r3, #2
   12480:	add	r3, r2, r3
   12484:	mov	r0, r3
   12488:	bl	1205c <__assert_fail@plt+0xe50>
   1248c:	mov	r2, r0
   12490:	ldr	r3, [pc, #224]	; 12578 <__assert_fail@plt+0x136c>
   12494:	ldr	r3, [r3]
   12498:	mov	r1, r3
   1249c:	mov	r0, r2
   124a0:	bl	10f24 <fputs_unlocked@plt>
   124a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   124a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124ac:	lsl	r3, r3, #2
   124b0:	add	r3, r2, r3
   124b4:	ldr	r3, [r3]
   124b8:	mov	r0, r3
   124bc:	bl	111e8 <getgrgid@plt>
   124c0:	str	r0, [fp, #-28]	; 0xffffffe4
   124c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124c8:	cmp	r3, #0
   124cc:	beq	124e4 <__assert_fail@plt+0x12d8>
   124d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124d4:	ldr	r3, [r3]
   124d8:	mov	r1, r3
   124dc:	ldr	r0, [pc, #104]	; 1254c <__assert_fail@plt+0x1340>
   124e0:	bl	10f6c <printf@plt>
   124e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124e8:	add	r3, r3, #1
   124ec:	str	r3, [fp, #-24]	; 0xffffffe8
   124f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   124f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124f8:	cmp	r2, r3
   124fc:	blt	12460 <__assert_fail@plt+0x1254>
   12500:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12504:	mov	r0, r3
   12508:	bl	12ccc <__assert_fail@plt+0x1ac0>
   1250c:	ldr	r3, [pc, #104]	; 1257c <__assert_fail@plt+0x1370>
   12510:	ldr	r3, [r3]
   12514:	cmp	r3, #0
   12518:	beq	1253c <__assert_fail@plt+0x1330>
   1251c:	ldr	r0, [pc, #92]	; 12580 <__assert_fail@plt+0x1374>
   12520:	bl	110d4 <gettext@plt>
   12524:	mov	r2, r0
   12528:	ldr	r3, [pc, #76]	; 1257c <__assert_fail@plt+0x1370>
   1252c:	ldr	r3, [r3]
   12530:	mov	r1, r3
   12534:	mov	r0, r2
   12538:	bl	10f6c <printf@plt>
   1253c:	sub	sp, fp, #12
   12540:	pop	{r4, r5, fp, pc}
   12544:	andeq	r9, r1, r4, ror #20
   12548:	muleq	r2, ip, r1
   1254c:	andeq	r9, r1, ip, ror #20
   12550:	andeq	r9, r1, r4, ror sl
   12554:	andeq	fp, r2, r4, lsr #3
   12558:	andeq	fp, r2, r0, lsr #3
   1255c:	andeq	r9, r1, ip, ror sl
   12560:	andeq	fp, r2, r8, lsr #3
   12564:	andeq	r9, r1, r8, lsl #21
   12568:	muleq	r1, r4, sl
   1256c:			; <UNDEFINED> instruction: 0x00019ab8
   12570:	andeq	fp, r2, ip, lsl r1
   12574:	andeq	r9, r1, r8, ror #21
   12578:	andeq	fp, r2, ip, lsl #3
   1257c:	andeq	fp, r2, ip, lsr #3
   12580:	strdeq	r9, [r1], -r4
   12584:	push	{fp, lr}
   12588:	add	fp, sp, #4
   1258c:	sub	sp, sp, #16
   12590:	str	r0, [fp, #-8]
   12594:	ldr	r3, [pc, #512]	; 1279c <__assert_fail@plt+0x1590>
   12598:	ldrb	r3, [r3]
   1259c:	cmp	r3, #0
   125a0:	beq	125d4 <__assert_fail@plt+0x13c8>
   125a4:	ldr	r3, [pc, #500]	; 127a0 <__assert_fail@plt+0x1594>
   125a8:	ldrb	r3, [r3]
   125ac:	cmp	r3, #0
   125b0:	beq	125c0 <__assert_fail@plt+0x13b4>
   125b4:	ldr	r3, [pc, #488]	; 127a4 <__assert_fail@plt+0x1598>
   125b8:	ldr	r3, [r3]
   125bc:	b	125c8 <__assert_fail@plt+0x13bc>
   125c0:	ldr	r3, [pc, #480]	; 127a8 <__assert_fail@plt+0x159c>
   125c4:	ldr	r3, [r3]
   125c8:	mov	r0, r3
   125cc:	bl	120d4 <__assert_fail@plt+0xec8>
   125d0:	b	12728 <__assert_fail@plt+0x151c>
   125d4:	ldr	r3, [pc, #464]	; 127ac <__assert_fail@plt+0x15a0>
   125d8:	ldrb	r3, [r3]
   125dc:	cmp	r3, #0
   125e0:	beq	12654 <__assert_fail@plt+0x1448>
   125e4:	ldr	r3, [pc, #436]	; 127a0 <__assert_fail@plt+0x1594>
   125e8:	ldrb	r3, [r3]
   125ec:	cmp	r3, #0
   125f0:	beq	12600 <__assert_fail@plt+0x13f4>
   125f4:	ldr	r3, [pc, #436]	; 127b0 <__assert_fail@plt+0x15a4>
   125f8:	ldr	r3, [r3]
   125fc:	b	12608 <__assert_fail@plt+0x13fc>
   12600:	ldr	r3, [pc, #428]	; 127b4 <__assert_fail@plt+0x15a8>
   12604:	ldr	r3, [r3]
   12608:	ldr	r2, [pc, #424]	; 127b8 <__assert_fail@plt+0x15ac>
   1260c:	ldrb	r2, [r2]
   12610:	mov	r1, r2
   12614:	mov	r0, r3
   12618:	bl	12a68 <__assert_fail@plt+0x185c>
   1261c:	mov	r3, r0
   12620:	mov	r1, r3
   12624:	ldr	r3, [pc, #400]	; 127bc <__assert_fail@plt+0x15b0>
   12628:	ldrb	r3, [r3]
   1262c:	mov	r2, r3
   12630:	mov	r3, r1
   12634:	and	r3, r3, r2
   12638:	cmp	r3, #0
   1263c:	movne	r3, #1
   12640:	moveq	r3, #0
   12644:	uxtb	r2, r3
   12648:	ldr	r3, [pc, #364]	; 127bc <__assert_fail@plt+0x15b0>
   1264c:	strb	r2, [r3]
   12650:	b	12728 <__assert_fail@plt+0x151c>
   12654:	ldr	r3, [pc, #356]	; 127c0 <__assert_fail@plt+0x15b4>
   12658:	ldrb	r3, [r3]
   1265c:	cmp	r3, #0
   12660:	beq	126f0 <__assert_fail@plt+0x14e4>
   12664:	ldr	r3, [pc, #312]	; 127a4 <__assert_fail@plt+0x1598>
   12668:	ldr	r1, [r3]
   1266c:	ldr	r3, [pc, #316]	; 127b0 <__assert_fail@plt+0x15a4>
   12670:	ldr	r0, [r3]
   12674:	ldr	r3, [pc, #312]	; 127b4 <__assert_fail@plt+0x15a8>
   12678:	ldr	ip, [r3]
   1267c:	ldr	r3, [pc, #308]	; 127b8 <__assert_fail@plt+0x15ac>
   12680:	ldrb	r3, [r3]
   12684:	ldr	r2, [pc, #312]	; 127c4 <__assert_fail@plt+0x15b8>
   12688:	ldrb	r2, [r2]
   1268c:	cmp	r2, #0
   12690:	beq	1269c <__assert_fail@plt+0x1490>
   12694:	mov	r2, #0
   12698:	b	126a0 <__assert_fail@plt+0x1494>
   1269c:	mov	r2, #32
   126a0:	str	r2, [sp, #4]
   126a4:	str	r3, [sp]
   126a8:	mov	r3, ip
   126ac:	mov	r2, r0
   126b0:	ldr	r0, [fp, #-8]
   126b4:	bl	127d8 <__assert_fail@plt+0x15cc>
   126b8:	mov	r3, r0
   126bc:	mov	r1, r3
   126c0:	ldr	r3, [pc, #244]	; 127bc <__assert_fail@plt+0x15b0>
   126c4:	ldrb	r3, [r3]
   126c8:	mov	r2, r3
   126cc:	mov	r3, r1
   126d0:	and	r3, r3, r2
   126d4:	cmp	r3, #0
   126d8:	movne	r3, #1
   126dc:	moveq	r3, #0
   126e0:	uxtb	r2, r3
   126e4:	ldr	r3, [pc, #208]	; 127bc <__assert_fail@plt+0x15b0>
   126e8:	strb	r2, [r3]
   126ec:	b	12728 <__assert_fail@plt+0x151c>
   126f0:	ldr	r3, [pc, #208]	; 127c8 <__assert_fail@plt+0x15bc>
   126f4:	ldrb	r3, [r3]
   126f8:	cmp	r3, #0
   126fc:	beq	12720 <__assert_fail@plt+0x1514>
   12700:	ldr	r3, [pc, #196]	; 127cc <__assert_fail@plt+0x15c0>
   12704:	ldr	r2, [r3]
   12708:	ldr	r3, [pc, #192]	; 127d0 <__assert_fail@plt+0x15c4>
   1270c:	ldr	r3, [r3]
   12710:	mov	r1, r3
   12714:	mov	r0, r2
   12718:	bl	10f24 <fputs_unlocked@plt>
   1271c:	b	12728 <__assert_fail@plt+0x151c>
   12720:	ldr	r0, [fp, #-8]
   12724:	bl	121ac <__assert_fail@plt+0xfa0>
   12728:	ldr	r3, [pc, #148]	; 127c4 <__assert_fail@plt+0x15b8>
   1272c:	ldrb	r3, [r3]
   12730:	cmp	r3, #0
   12734:	beq	1276c <__assert_fail@plt+0x1560>
   12738:	ldr	r3, [pc, #128]	; 127c0 <__assert_fail@plt+0x15b4>
   1273c:	ldrb	r3, [r3]
   12740:	cmp	r3, #0
   12744:	beq	1276c <__assert_fail@plt+0x1560>
   12748:	ldr	r3, [pc, #132]	; 127d4 <__assert_fail@plt+0x15c8>
   1274c:	ldrb	r3, [r3]
   12750:	cmp	r3, #0
   12754:	beq	1276c <__assert_fail@plt+0x1560>
   12758:	mov	r0, #0
   1275c:	bl	11200 <putchar_unlocked@plt>
   12760:	mov	r0, #0
   12764:	bl	11200 <putchar_unlocked@plt>
   12768:	b	12790 <__assert_fail@plt+0x1584>
   1276c:	ldr	r3, [pc, #80]	; 127c4 <__assert_fail@plt+0x15b8>
   12770:	ldrb	r3, [r3]
   12774:	cmp	r3, #0
   12778:	beq	12784 <__assert_fail@plt+0x1578>
   1277c:	mov	r3, #0
   12780:	b	12788 <__assert_fail@plt+0x157c>
   12784:	mov	r3, #10
   12788:	mov	r0, r3
   1278c:	bl	11200 <putchar_unlocked@plt>
   12790:	nop			; (mov r0, r0)
   12794:	sub	sp, fp, #4
   12798:	pop	{fp, pc}
   1279c:	muleq	r2, r9, r1
   127a0:	muleq	r2, r8, r1
   127a4:	muleq	r2, ip, r1
   127a8:	andeq	fp, r2, r0, lsr #3
   127ac:	muleq	r2, r7, r1
   127b0:	andeq	fp, r2, r4, lsr #3
   127b4:	andeq	fp, r2, r8, lsr #3
   127b8:	muleq	r2, fp, r1
   127bc:	andeq	fp, r2, ip, lsl r1
   127c0:	muleq	r2, r6, r1
   127c4:	muleq	r2, r5, r1
   127c8:	muleq	r2, r4, r1
   127cc:	andeq	fp, r2, ip, lsr #3
   127d0:	andeq	fp, r2, ip, lsl #3
   127d4:	muleq	r2, sl, r1
   127d8:	push	{r4, r5, fp, lr}
   127dc:	add	fp, sp, #12
   127e0:	sub	sp, sp, #40	; 0x28
   127e4:	str	r0, [fp, #-40]	; 0xffffffd8
   127e8:	str	r1, [fp, #-44]	; 0xffffffd4
   127ec:	str	r2, [fp, #-48]	; 0xffffffd0
   127f0:	str	r3, [fp, #-52]	; 0xffffffcc
   127f4:	mov	r3, #1
   127f8:	strb	r3, [fp, #-13]
   127fc:	mov	r3, #0
   12800:	str	r3, [fp, #-20]	; 0xffffffec
   12804:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12808:	cmp	r3, #0
   1280c:	beq	12830 <__assert_fail@plt+0x1624>
   12810:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12814:	bl	10f60 <getpwuid@plt>
   12818:	str	r0, [fp, #-20]	; 0xffffffec
   1281c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12820:	cmp	r3, #0
   12824:	bne	12830 <__assert_fail@plt+0x1624>
   12828:	mov	r3, #0
   1282c:	strb	r3, [fp, #-13]
   12830:	ldrb	r3, [fp, #4]
   12834:	mov	r1, r3
   12838:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1283c:	bl	12a68 <__assert_fail@plt+0x185c>
   12840:	mov	r3, r0
   12844:	eor	r3, r3, #1
   12848:	uxtb	r3, r3
   1284c:	cmp	r3, #0
   12850:	beq	1285c <__assert_fail@plt+0x1650>
   12854:	mov	r3, #0
   12858:	strb	r3, [fp, #-13]
   1285c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12860:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12864:	cmp	r2, r3
   12868:	beq	128a4 <__assert_fail@plt+0x1698>
   1286c:	ldrb	r3, [fp, #8]
   12870:	mov	r0, r3
   12874:	bl	11200 <putchar_unlocked@plt>
   12878:	ldrb	r3, [fp, #4]
   1287c:	mov	r1, r3
   12880:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12884:	bl	12a68 <__assert_fail@plt+0x185c>
   12888:	mov	r3, r0
   1288c:	eor	r3, r3, #1
   12890:	uxtb	r3, r3
   12894:	cmp	r3, #0
   12898:	beq	128a4 <__assert_fail@plt+0x1698>
   1289c:	mov	r3, #0
   128a0:	strb	r3, [fp, #-13]
   128a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   128a8:	cmp	r3, #0
   128ac:	beq	128bc <__assert_fail@plt+0x16b0>
   128b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   128b4:	ldr	r3, [r3, #12]
   128b8:	b	128c0 <__assert_fail@plt+0x16b4>
   128bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   128c0:	sub	r2, fp, #32
   128c4:	mov	r1, r3
   128c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   128cc:	bl	16da8 <__assert_fail@plt+0x5b9c>
   128d0:	str	r0, [fp, #-28]	; 0xffffffe4
   128d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   128d8:	cmp	r3, #0
   128dc:	bge	12954 <__assert_fail@plt+0x1748>
   128e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   128e4:	cmp	r3, #0
   128e8:	beq	12924 <__assert_fail@plt+0x1718>
   128ec:	bl	11110 <__errno_location@plt>
   128f0:	mov	r3, r0
   128f4:	ldr	r4, [r3]
   128f8:	ldr	r0, [pc, #292]	; 12a24 <__assert_fail@plt+0x1818>
   128fc:	bl	110d4 <gettext@plt>
   12900:	mov	r5, r0
   12904:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12908:	bl	1551c <__assert_fail@plt+0x4310>
   1290c:	mov	r3, r0
   12910:	mov	r2, r5
   12914:	mov	r1, r4
   12918:	mov	r0, #0
   1291c:	bl	11068 <error@plt>
   12920:	b	1294c <__assert_fail@plt+0x1740>
   12924:	bl	11110 <__errno_location@plt>
   12928:	mov	r3, r0
   1292c:	ldr	r4, [r3]
   12930:	ldr	r0, [pc, #240]	; 12a28 <__assert_fail@plt+0x181c>
   12934:	bl	110d4 <gettext@plt>
   12938:	mov	r3, r0
   1293c:	mov	r2, r3
   12940:	mov	r1, r4
   12944:	mov	r0, #0
   12948:	bl	11068 <error@plt>
   1294c:	mov	r3, #0
   12950:	b	12a18 <__assert_fail@plt+0x180c>
   12954:	mov	r3, #0
   12958:	str	r3, [fp, #-24]	; 0xffffffe8
   1295c:	b	129f8 <__assert_fail@plt+0x17ec>
   12960:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12964:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12968:	lsl	r3, r3, #2
   1296c:	add	r3, r2, r3
   12970:	ldr	r2, [r3]
   12974:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12978:	cmp	r2, r3
   1297c:	beq	129ec <__assert_fail@plt+0x17e0>
   12980:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12984:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12988:	lsl	r3, r3, #2
   1298c:	add	r3, r2, r3
   12990:	ldr	r2, [r3]
   12994:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12998:	cmp	r2, r3
   1299c:	beq	129ec <__assert_fail@plt+0x17e0>
   129a0:	ldrb	r3, [fp, #8]
   129a4:	mov	r0, r3
   129a8:	bl	11200 <putchar_unlocked@plt>
   129ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   129b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129b4:	lsl	r3, r3, #2
   129b8:	add	r3, r2, r3
   129bc:	ldr	r3, [r3]
   129c0:	ldrb	r2, [fp, #4]
   129c4:	mov	r1, r2
   129c8:	mov	r0, r3
   129cc:	bl	12a68 <__assert_fail@plt+0x185c>
   129d0:	mov	r3, r0
   129d4:	eor	r3, r3, #1
   129d8:	uxtb	r3, r3
   129dc:	cmp	r3, #0
   129e0:	beq	129ec <__assert_fail@plt+0x17e0>
   129e4:	mov	r3, #0
   129e8:	strb	r3, [fp, #-13]
   129ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129f0:	add	r3, r3, #1
   129f4:	str	r3, [fp, #-24]	; 0xffffffe8
   129f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   129fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a00:	cmp	r2, r3
   12a04:	blt	12960 <__assert_fail@plt+0x1754>
   12a08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a0c:	mov	r0, r3
   12a10:	bl	12ccc <__assert_fail@plt+0x1ac0>
   12a14:	ldrb	r3, [fp, #-13]
   12a18:	mov	r0, r3
   12a1c:	sub	sp, fp, #12
   12a20:	pop	{r4, r5, fp, pc}
   12a24:	andeq	r9, r1, r0, lsl #22
   12a28:	andeq	r9, r1, r4, lsr #22
   12a2c:	push	{fp, lr}
   12a30:	add	fp, sp, #4
   12a34:	sub	sp, sp, #8
   12a38:	str	r0, [fp, #-8]
   12a3c:	ldr	r3, [fp, #-8]
   12a40:	ldr	r3, [r3]
   12a44:	mov	r0, r3
   12a48:	mov	r1, #0
   12a4c:	ldr	r2, [pc, #16]	; 12a64 <__assert_fail@plt+0x1858>
   12a50:	bl	12d58 <__assert_fail@plt+0x1b4c>
   12a54:	mov	r3, r0
   12a58:	mov	r0, r3
   12a5c:	sub	sp, fp, #4
   12a60:	pop	{fp, pc}
   12a64:	andeq	fp, r2, r0, ror #3
   12a68:	push	{fp, lr}
   12a6c:	add	fp, sp, #4
   12a70:	sub	sp, sp, #24
   12a74:	str	r0, [fp, #-24]	; 0xffffffe8
   12a78:	mov	r3, r1
   12a7c:	strb	r3, [fp, #-25]	; 0xffffffe7
   12a80:	mov	r3, #0
   12a84:	str	r3, [fp, #-8]
   12a88:	mov	r3, #1
   12a8c:	strb	r3, [fp, #-9]
   12a90:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12a94:	cmp	r3, #0
   12a98:	beq	12adc <__assert_fail@plt+0x18d0>
   12a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12aa0:	mov	r0, r3
   12aa4:	bl	111e8 <getgrgid@plt>
   12aa8:	str	r0, [fp, #-8]
   12aac:	ldr	r3, [fp, #-8]
   12ab0:	cmp	r3, #0
   12ab4:	bne	12adc <__assert_fail@plt+0x18d0>
   12ab8:	ldr	r0, [pc, #108]	; 12b2c <__assert_fail@plt+0x1920>
   12abc:	bl	110d4 <gettext@plt>
   12ac0:	mov	r2, r0
   12ac4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ac8:	mov	r1, #0
   12acc:	mov	r0, #0
   12ad0:	bl	11068 <error@plt>
   12ad4:	mov	r3, #0
   12ad8:	strb	r3, [fp, #-9]
   12adc:	ldr	r3, [fp, #-8]
   12ae0:	cmp	r3, #0
   12ae4:	beq	12af4 <__assert_fail@plt+0x18e8>
   12ae8:	ldr	r3, [fp, #-8]
   12aec:	ldr	r3, [r3]
   12af0:	b	12b04 <__assert_fail@plt+0x18f8>
   12af4:	sub	r3, fp, #24
   12af8:	mov	r0, r3
   12afc:	bl	12a2c <__assert_fail@plt+0x1820>
   12b00:	mov	r3, r0
   12b04:	str	r3, [fp, #-16]
   12b08:	ldr	r3, [pc, #32]	; 12b30 <__assert_fail@plt+0x1924>
   12b0c:	ldr	r3, [r3]
   12b10:	mov	r1, r3
   12b14:	ldr	r0, [fp, #-16]
   12b18:	bl	10f24 <fputs_unlocked@plt>
   12b1c:	ldrb	r3, [fp, #-9]
   12b20:	mov	r0, r3
   12b24:	sub	sp, fp, #4
   12b28:	pop	{fp, pc}
   12b2c:	andeq	r9, r1, r4, asr fp
   12b30:	andeq	fp, r2, ip, lsl #3
   12b34:	push	{fp}		; (str fp, [sp, #-4]!)
   12b38:	add	fp, sp, #0
   12b3c:	sub	sp, sp, #12
   12b40:	str	r0, [fp, #-8]
   12b44:	ldr	r2, [pc, #20]	; 12b60 <__assert_fail@plt+0x1954>
   12b48:	ldr	r3, [fp, #-8]
   12b4c:	str	r3, [r2]
   12b50:	nop			; (mov r0, r0)
   12b54:	add	sp, fp, #0
   12b58:	pop	{fp}		; (ldr fp, [sp], #4)
   12b5c:	bx	lr
   12b60:	strdeq	fp, [r2], -r8
   12b64:	push	{fp}		; (str fp, [sp, #-4]!)
   12b68:	add	fp, sp, #0
   12b6c:	sub	sp, sp, #12
   12b70:	mov	r3, r0
   12b74:	strb	r3, [fp, #-5]
   12b78:	ldr	r2, [pc, #20]	; 12b94 <__assert_fail@plt+0x1988>
   12b7c:	ldrb	r3, [fp, #-5]
   12b80:	strb	r3, [r2]
   12b84:	nop			; (mov r0, r0)
   12b88:	add	sp, fp, #0
   12b8c:	pop	{fp}		; (ldr fp, [sp], #4)
   12b90:	bx	lr
   12b94:	strdeq	fp, [r2], -ip
   12b98:	push	{r4, fp, lr}
   12b9c:	add	fp, sp, #8
   12ba0:	sub	sp, sp, #20
   12ba4:	ldr	r3, [pc, #256]	; 12cac <__assert_fail@plt+0x1aa0>
   12ba8:	ldr	r3, [r3]
   12bac:	mov	r0, r3
   12bb0:	bl	17884 <__assert_fail@plt+0x6678>
   12bb4:	mov	r3, r0
   12bb8:	cmp	r3, #0
   12bbc:	beq	12c74 <__assert_fail@plt+0x1a68>
   12bc0:	ldr	r3, [pc, #232]	; 12cb0 <__assert_fail@plt+0x1aa4>
   12bc4:	ldrb	r3, [r3]
   12bc8:	eor	r3, r3, #1
   12bcc:	uxtb	r3, r3
   12bd0:	cmp	r3, #0
   12bd4:	bne	12bec <__assert_fail@plt+0x19e0>
   12bd8:	bl	11110 <__errno_location@plt>
   12bdc:	mov	r3, r0
   12be0:	ldr	r3, [r3]
   12be4:	cmp	r3, #32
   12be8:	beq	12c74 <__assert_fail@plt+0x1a68>
   12bec:	ldr	r0, [pc, #192]	; 12cb4 <__assert_fail@plt+0x1aa8>
   12bf0:	bl	110d4 <gettext@plt>
   12bf4:	str	r0, [fp, #-16]
   12bf8:	ldr	r3, [pc, #184]	; 12cb8 <__assert_fail@plt+0x1aac>
   12bfc:	ldr	r3, [r3]
   12c00:	cmp	r3, #0
   12c04:	beq	12c48 <__assert_fail@plt+0x1a3c>
   12c08:	bl	11110 <__errno_location@plt>
   12c0c:	mov	r3, r0
   12c10:	ldr	r4, [r3]
   12c14:	ldr	r3, [pc, #156]	; 12cb8 <__assert_fail@plt+0x1aac>
   12c18:	ldr	r3, [r3]
   12c1c:	mov	r0, r3
   12c20:	bl	1524c <__assert_fail@plt+0x4040>
   12c24:	mov	r2, r0
   12c28:	ldr	r3, [fp, #-16]
   12c2c:	str	r3, [sp]
   12c30:	mov	r3, r2
   12c34:	ldr	r2, [pc, #128]	; 12cbc <__assert_fail@plt+0x1ab0>
   12c38:	mov	r1, r4
   12c3c:	mov	r0, #0
   12c40:	bl	11068 <error@plt>
   12c44:	b	12c64 <__assert_fail@plt+0x1a58>
   12c48:	bl	11110 <__errno_location@plt>
   12c4c:	mov	r3, r0
   12c50:	ldr	r1, [r3]
   12c54:	ldr	r3, [fp, #-16]
   12c58:	ldr	r2, [pc, #96]	; 12cc0 <__assert_fail@plt+0x1ab4>
   12c5c:	mov	r0, #0
   12c60:	bl	11068 <error@plt>
   12c64:	ldr	r3, [pc, #88]	; 12cc4 <__assert_fail@plt+0x1ab8>
   12c68:	ldr	r3, [r3]
   12c6c:	mov	r0, r3
   12c70:	bl	10f9c <_exit@plt>
   12c74:	ldr	r3, [pc, #76]	; 12cc8 <__assert_fail@plt+0x1abc>
   12c78:	ldr	r3, [r3]
   12c7c:	mov	r0, r3
   12c80:	bl	17884 <__assert_fail@plt+0x6678>
   12c84:	mov	r3, r0
   12c88:	cmp	r3, #0
   12c8c:	beq	12ca0 <__assert_fail@plt+0x1a94>
   12c90:	ldr	r3, [pc, #44]	; 12cc4 <__assert_fail@plt+0x1ab8>
   12c94:	ldr	r3, [r3]
   12c98:	mov	r0, r3
   12c9c:	bl	10f9c <_exit@plt>
   12ca0:	nop			; (mov r0, r0)
   12ca4:	sub	sp, fp, #8
   12ca8:	pop	{r4, fp, pc}
   12cac:	andeq	fp, r2, ip, lsl #3
   12cb0:	strdeq	fp, [r2], -ip
   12cb4:	andeq	r9, r1, r8, lsl #23
   12cb8:	strdeq	fp, [r2], -r8
   12cbc:	muleq	r1, r4, fp
   12cc0:	muleq	r1, ip, fp
   12cc4:	andeq	fp, r2, r4, lsr #2
   12cc8:	andeq	fp, r2, r8, lsl #3
   12ccc:	push	{r4, fp, lr}
   12cd0:	add	fp, sp, #8
   12cd4:	sub	sp, sp, #20
   12cd8:	str	r0, [fp, #-24]	; 0xffffffe8
   12cdc:	bl	11110 <__errno_location@plt>
   12ce0:	mov	r3, r0
   12ce4:	ldr	r3, [r3]
   12ce8:	str	r3, [fp, #-20]	; 0xffffffec
   12cec:	bl	11110 <__errno_location@plt>
   12cf0:	mov	r3, r0
   12cf4:	ldr	r3, [r3]
   12cf8:	str	r3, [fp, #-16]
   12cfc:	bl	11110 <__errno_location@plt>
   12d00:	mov	r2, r0
   12d04:	mov	r3, #0
   12d08:	str	r3, [r2]
   12d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12d10:	bl	10f90 <free@plt>
   12d14:	bl	11110 <__errno_location@plt>
   12d18:	mov	r4, r0
   12d1c:	bl	11110 <__errno_location@plt>
   12d20:	mov	r3, r0
   12d24:	ldr	r3, [r3]
   12d28:	cmp	r3, #0
   12d2c:	moveq	r3, #1
   12d30:	movne	r3, #0
   12d34:	uxtb	r3, r3
   12d38:	lsl	r3, r3, #2
   12d3c:	sub	r2, fp, #12
   12d40:	add	r3, r2, r3
   12d44:	ldr	r3, [r3, #-8]
   12d48:	str	r3, [r4]
   12d4c:	nop			; (mov r0, r0)
   12d50:	sub	sp, fp, #8
   12d54:	pop	{r4, fp, pc}
   12d58:	push	{fp, lr}
   12d5c:	add	fp, sp, #4
   12d60:	sub	sp, sp, #24
   12d64:	strd	r0, [fp, #-20]	; 0xffffffec
   12d68:	str	r2, [fp, #-24]	; 0xffffffe8
   12d6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d70:	add	r3, r3, #20
   12d74:	str	r3, [fp, #-8]
   12d78:	ldr	r3, [fp, #-8]
   12d7c:	mov	r2, #0
   12d80:	strb	r2, [r3]
   12d84:	ldr	r3, [fp, #-8]
   12d88:	sub	r3, r3, #1
   12d8c:	str	r3, [fp, #-8]
   12d90:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12d94:	mov	r2, #10
   12d98:	mov	r3, #0
   12d9c:	bl	19058 <__assert_fail@plt+0x7e4c>
   12da0:	uxtb	r3, r2
   12da4:	add	r3, r3, #48	; 0x30
   12da8:	uxtb	r2, r3
   12dac:	ldr	r3, [fp, #-8]
   12db0:	strb	r2, [r3]
   12db4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12db8:	mov	r2, #10
   12dbc:	mov	r3, #0
   12dc0:	bl	19058 <__assert_fail@plt+0x7e4c>
   12dc4:	mov	r2, r0
   12dc8:	mov	r3, r1
   12dcc:	strd	r2, [fp, #-20]	; 0xffffffec
   12dd0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12dd4:	orrs	r3, r2, r3
   12dd8:	bne	12d84 <__assert_fail@plt+0x1b78>
   12ddc:	ldr	r3, [fp, #-8]
   12de0:	mov	r0, r3
   12de4:	sub	sp, fp, #4
   12de8:	pop	{fp, pc}
   12dec:	push	{fp, lr}
   12df0:	add	fp, sp, #4
   12df4:	sub	sp, sp, #16
   12df8:	str	r0, [fp, #-16]
   12dfc:	ldr	r3, [fp, #-16]
   12e00:	cmp	r3, #0
   12e04:	bne	12e24 <__assert_fail@plt+0x1c18>
   12e08:	ldr	r3, [pc, #220]	; 12eec <__assert_fail@plt+0x1ce0>
   12e0c:	ldr	r3, [r3]
   12e10:	mov	r2, #55	; 0x37
   12e14:	mov	r1, #1
   12e18:	ldr	r0, [pc, #208]	; 12ef0 <__assert_fail@plt+0x1ce4>
   12e1c:	bl	11014 <fwrite@plt>
   12e20:	bl	111dc <abort@plt>
   12e24:	mov	r1, #47	; 0x2f
   12e28:	ldr	r0, [fp, #-16]
   12e2c:	bl	111a0 <strrchr@plt>
   12e30:	str	r0, [fp, #-8]
   12e34:	ldr	r3, [fp, #-8]
   12e38:	cmp	r3, #0
   12e3c:	beq	12e4c <__assert_fail@plt+0x1c40>
   12e40:	ldr	r3, [fp, #-8]
   12e44:	add	r3, r3, #1
   12e48:	b	12e50 <__assert_fail@plt+0x1c44>
   12e4c:	ldr	r3, [fp, #-16]
   12e50:	str	r3, [fp, #-12]
   12e54:	ldr	r2, [fp, #-12]
   12e58:	ldr	r3, [fp, #-16]
   12e5c:	sub	r3, r2, r3
   12e60:	cmp	r3, #6
   12e64:	ble	12ec8 <__assert_fail@plt+0x1cbc>
   12e68:	ldr	r3, [fp, #-12]
   12e6c:	sub	r3, r3, #7
   12e70:	mov	r2, #7
   12e74:	ldr	r1, [pc, #120]	; 12ef4 <__assert_fail@plt+0x1ce8>
   12e78:	mov	r0, r3
   12e7c:	bl	111d0 <strncmp@plt>
   12e80:	mov	r3, r0
   12e84:	cmp	r3, #0
   12e88:	bne	12ec8 <__assert_fail@plt+0x1cbc>
   12e8c:	ldr	r3, [fp, #-12]
   12e90:	str	r3, [fp, #-16]
   12e94:	mov	r2, #3
   12e98:	ldr	r1, [pc, #88]	; 12ef8 <__assert_fail@plt+0x1cec>
   12e9c:	ldr	r0, [fp, #-12]
   12ea0:	bl	111d0 <strncmp@plt>
   12ea4:	mov	r3, r0
   12ea8:	cmp	r3, #0
   12eac:	bne	12ec8 <__assert_fail@plt+0x1cbc>
   12eb0:	ldr	r3, [fp, #-12]
   12eb4:	add	r3, r3, #3
   12eb8:	str	r3, [fp, #-16]
   12ebc:	ldr	r2, [pc, #56]	; 12efc <__assert_fail@plt+0x1cf0>
   12ec0:	ldr	r3, [fp, #-16]
   12ec4:	str	r3, [r2]
   12ec8:	ldr	r2, [pc, #48]	; 12f00 <__assert_fail@plt+0x1cf4>
   12ecc:	ldr	r3, [fp, #-16]
   12ed0:	str	r3, [r2]
   12ed4:	ldr	r2, [pc, #40]	; 12f04 <__assert_fail@plt+0x1cf8>
   12ed8:	ldr	r3, [fp, #-16]
   12edc:	str	r3, [r2]
   12ee0:	nop			; (mov r0, r0)
   12ee4:	sub	sp, fp, #4
   12ee8:	pop	{fp, pc}
   12eec:	andeq	fp, r2, r8, lsl #3
   12ef0:	andeq	r9, r1, r0, lsr #23
   12ef4:	ldrdeq	r9, [r1], -r8
   12ef8:	andeq	r9, r1, r0, ror #23
   12efc:	andeq	fp, r2, r8, ror r1
   12f00:	andeq	fp, r2, r0, lsl #4
   12f04:	andeq	fp, r2, ip, ror r1
   12f08:	push	{fp, lr}
   12f0c:	add	fp, sp, #4
   12f10:	sub	sp, sp, #16
   12f14:	str	r0, [fp, #-16]
   12f18:	bl	11110 <__errno_location@plt>
   12f1c:	mov	r3, r0
   12f20:	ldr	r3, [r3]
   12f24:	str	r3, [fp, #-8]
   12f28:	ldr	r3, [fp, #-16]
   12f2c:	cmp	r3, #0
   12f30:	beq	12f3c <__assert_fail@plt+0x1d30>
   12f34:	ldr	r3, [fp, #-16]
   12f38:	b	12f40 <__assert_fail@plt+0x1d34>
   12f3c:	ldr	r3, [pc, #48]	; 12f74 <__assert_fail@plt+0x1d68>
   12f40:	mov	r1, #48	; 0x30
   12f44:	mov	r0, r3
   12f48:	bl	16c48 <__assert_fail@plt+0x5a3c>
   12f4c:	mov	r3, r0
   12f50:	str	r3, [fp, #-12]
   12f54:	bl	11110 <__errno_location@plt>
   12f58:	mov	r2, r0
   12f5c:	ldr	r3, [fp, #-8]
   12f60:	str	r3, [r2]
   12f64:	ldr	r3, [fp, #-12]
   12f68:	mov	r0, r3
   12f6c:	sub	sp, fp, #4
   12f70:	pop	{fp, pc}
   12f74:	andeq	fp, r2, r4, lsl #4
   12f78:	push	{fp}		; (str fp, [sp, #-4]!)
   12f7c:	add	fp, sp, #0
   12f80:	sub	sp, sp, #12
   12f84:	str	r0, [fp, #-8]
   12f88:	ldr	r3, [fp, #-8]
   12f8c:	cmp	r3, #0
   12f90:	beq	12f9c <__assert_fail@plt+0x1d90>
   12f94:	ldr	r3, [fp, #-8]
   12f98:	b	12fa0 <__assert_fail@plt+0x1d94>
   12f9c:	ldr	r3, [pc, #16]	; 12fb4 <__assert_fail@plt+0x1da8>
   12fa0:	ldr	r3, [r3]
   12fa4:	mov	r0, r3
   12fa8:	add	sp, fp, #0
   12fac:	pop	{fp}		; (ldr fp, [sp], #4)
   12fb0:	bx	lr
   12fb4:	andeq	fp, r2, r4, lsl #4
   12fb8:	push	{fp}		; (str fp, [sp, #-4]!)
   12fbc:	add	fp, sp, #0
   12fc0:	sub	sp, sp, #12
   12fc4:	str	r0, [fp, #-8]
   12fc8:	str	r1, [fp, #-12]
   12fcc:	ldr	r3, [fp, #-8]
   12fd0:	cmp	r3, #0
   12fd4:	beq	12fe0 <__assert_fail@plt+0x1dd4>
   12fd8:	ldr	r3, [fp, #-8]
   12fdc:	b	12fe4 <__assert_fail@plt+0x1dd8>
   12fe0:	ldr	r3, [pc, #20]	; 12ffc <__assert_fail@plt+0x1df0>
   12fe4:	ldr	r2, [fp, #-12]
   12fe8:	str	r2, [r3]
   12fec:	nop			; (mov r0, r0)
   12ff0:	add	sp, fp, #0
   12ff4:	pop	{fp}		; (ldr fp, [sp], #4)
   12ff8:	bx	lr
   12ffc:	andeq	fp, r2, r4, lsl #4
   13000:	push	{fp}		; (str fp, [sp, #-4]!)
   13004:	add	fp, sp, #0
   13008:	sub	sp, sp, #36	; 0x24
   1300c:	str	r0, [fp, #-24]	; 0xffffffe8
   13010:	mov	r3, r1
   13014:	str	r2, [fp, #-32]	; 0xffffffe0
   13018:	strb	r3, [fp, #-25]	; 0xffffffe7
   1301c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13020:	strb	r3, [fp, #-5]
   13024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13028:	cmp	r3, #0
   1302c:	beq	13038 <__assert_fail@plt+0x1e2c>
   13030:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13034:	b	1303c <__assert_fail@plt+0x1e30>
   13038:	ldr	r3, [pc, #124]	; 130bc <__assert_fail@plt+0x1eb0>
   1303c:	add	r2, r3, #8
   13040:	ldrb	r3, [fp, #-5]
   13044:	lsr	r3, r3, #5
   13048:	uxtb	r3, r3
   1304c:	lsl	r3, r3, #2
   13050:	add	r3, r2, r3
   13054:	str	r3, [fp, #-12]
   13058:	ldrb	r3, [fp, #-5]
   1305c:	and	r3, r3, #31
   13060:	str	r3, [fp, #-16]
   13064:	ldr	r3, [fp, #-12]
   13068:	ldr	r2, [r3]
   1306c:	ldr	r3, [fp, #-16]
   13070:	lsr	r3, r2, r3
   13074:	and	r3, r3, #1
   13078:	str	r3, [fp, #-20]	; 0xffffffec
   1307c:	ldr	r3, [fp, #-12]
   13080:	ldr	r3, [r3]
   13084:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13088:	and	r1, r2, #1
   1308c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13090:	eor	r1, r1, r2
   13094:	ldr	r2, [fp, #-16]
   13098:	lsl	r2, r1, r2
   1309c:	eor	r2, r2, r3
   130a0:	ldr	r3, [fp, #-12]
   130a4:	str	r2, [r3]
   130a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130ac:	mov	r0, r3
   130b0:	add	sp, fp, #0
   130b4:	pop	{fp}		; (ldr fp, [sp], #4)
   130b8:	bx	lr
   130bc:	andeq	fp, r2, r4, lsl #4
   130c0:	push	{fp}		; (str fp, [sp, #-4]!)
   130c4:	add	fp, sp, #0
   130c8:	sub	sp, sp, #20
   130cc:	str	r0, [fp, #-16]
   130d0:	str	r1, [fp, #-20]	; 0xffffffec
   130d4:	ldr	r3, [fp, #-16]
   130d8:	cmp	r3, #0
   130dc:	bne	130e8 <__assert_fail@plt+0x1edc>
   130e0:	ldr	r3, [pc, #44]	; 13114 <__assert_fail@plt+0x1f08>
   130e4:	str	r3, [fp, #-16]
   130e8:	ldr	r3, [fp, #-16]
   130ec:	ldr	r3, [r3, #4]
   130f0:	str	r3, [fp, #-8]
   130f4:	ldr	r3, [fp, #-16]
   130f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   130fc:	str	r2, [r3, #4]
   13100:	ldr	r3, [fp, #-8]
   13104:	mov	r0, r3
   13108:	add	sp, fp, #0
   1310c:	pop	{fp}		; (ldr fp, [sp], #4)
   13110:	bx	lr
   13114:	andeq	fp, r2, r4, lsl #4
   13118:	push	{fp, lr}
   1311c:	add	fp, sp, #4
   13120:	sub	sp, sp, #16
   13124:	str	r0, [fp, #-8]
   13128:	str	r1, [fp, #-12]
   1312c:	str	r2, [fp, #-16]
   13130:	ldr	r3, [fp, #-8]
   13134:	cmp	r3, #0
   13138:	bne	13144 <__assert_fail@plt+0x1f38>
   1313c:	ldr	r3, [pc, #76]	; 13190 <__assert_fail@plt+0x1f84>
   13140:	str	r3, [fp, #-8]
   13144:	ldr	r3, [fp, #-8]
   13148:	mov	r2, #10
   1314c:	str	r2, [r3]
   13150:	ldr	r3, [fp, #-12]
   13154:	cmp	r3, #0
   13158:	beq	13168 <__assert_fail@plt+0x1f5c>
   1315c:	ldr	r3, [fp, #-16]
   13160:	cmp	r3, #0
   13164:	bne	1316c <__assert_fail@plt+0x1f60>
   13168:	bl	111dc <abort@plt>
   1316c:	ldr	r3, [fp, #-8]
   13170:	ldr	r2, [fp, #-12]
   13174:	str	r2, [r3, #40]	; 0x28
   13178:	ldr	r3, [fp, #-8]
   1317c:	ldr	r2, [fp, #-16]
   13180:	str	r2, [r3, #44]	; 0x2c
   13184:	nop			; (mov r0, r0)
   13188:	sub	sp, fp, #4
   1318c:	pop	{fp, pc}
   13190:	andeq	fp, r2, r4, lsl #4
   13194:	push	{fp, lr}
   13198:	add	fp, sp, #4
   1319c:	sub	sp, sp, #56	; 0x38
   131a0:	str	r0, [fp, #-56]	; 0xffffffc8
   131a4:	str	r1, [fp, #-60]	; 0xffffffc4
   131a8:	sub	r3, fp, #52	; 0x34
   131ac:	mov	r2, #48	; 0x30
   131b0:	mov	r1, #0
   131b4:	mov	r0, r3
   131b8:	bl	11140 <memset@plt>
   131bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   131c0:	cmp	r3, #10
   131c4:	bne	131cc <__assert_fail@plt+0x1fc0>
   131c8:	bl	111dc <abort@plt>
   131cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   131d0:	str	r3, [fp, #-52]	; 0xffffffcc
   131d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   131d8:	mov	lr, r3
   131dc:	sub	ip, fp, #52	; 0x34
   131e0:	ldm	ip!, {r0, r1, r2, r3}
   131e4:	stmia	lr!, {r0, r1, r2, r3}
   131e8:	ldm	ip!, {r0, r1, r2, r3}
   131ec:	stmia	lr!, {r0, r1, r2, r3}
   131f0:	ldm	ip, {r0, r1, r2, r3}
   131f4:	stm	lr, {r0, r1, r2, r3}
   131f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131fc:	sub	sp, fp, #4
   13200:	pop	{fp, pc}
   13204:	push	{fp, lr}
   13208:	add	fp, sp, #4
   1320c:	sub	sp, sp, #16
   13210:	str	r0, [fp, #-16]
   13214:	str	r1, [fp, #-20]	; 0xffffffec
   13218:	ldr	r0, [fp, #-16]
   1321c:	bl	110d4 <gettext@plt>
   13220:	str	r0, [fp, #-8]
   13224:	ldr	r2, [fp, #-8]
   13228:	ldr	r3, [fp, #-16]
   1322c:	cmp	r2, r3
   13230:	beq	1323c <__assert_fail@plt+0x2030>
   13234:	ldr	r3, [fp, #-8]
   13238:	b	132cc <__assert_fail@plt+0x20c0>
   1323c:	bl	17d1c <__assert_fail@plt+0x6b10>
   13240:	str	r0, [fp, #-12]
   13244:	ldr	r1, [pc, #140]	; 132d8 <__assert_fail@plt+0x20cc>
   13248:	ldr	r0, [fp, #-12]
   1324c:	bl	177ec <__assert_fail@plt+0x65e0>
   13250:	mov	r3, r0
   13254:	cmp	r3, #0
   13258:	bne	1327c <__assert_fail@plt+0x2070>
   1325c:	ldr	r3, [fp, #-16]
   13260:	ldrb	r3, [r3]
   13264:	cmp	r3, #96	; 0x60
   13268:	bne	13274 <__assert_fail@plt+0x2068>
   1326c:	ldr	r3, [pc, #104]	; 132dc <__assert_fail@plt+0x20d0>
   13270:	b	132cc <__assert_fail@plt+0x20c0>
   13274:	ldr	r3, [pc, #100]	; 132e0 <__assert_fail@plt+0x20d4>
   13278:	b	132cc <__assert_fail@plt+0x20c0>
   1327c:	ldr	r1, [pc, #96]	; 132e4 <__assert_fail@plt+0x20d8>
   13280:	ldr	r0, [fp, #-12]
   13284:	bl	177ec <__assert_fail@plt+0x65e0>
   13288:	mov	r3, r0
   1328c:	cmp	r3, #0
   13290:	bne	132b4 <__assert_fail@plt+0x20a8>
   13294:	ldr	r3, [fp, #-16]
   13298:	ldrb	r3, [r3]
   1329c:	cmp	r3, #96	; 0x60
   132a0:	bne	132ac <__assert_fail@plt+0x20a0>
   132a4:	ldr	r3, [pc, #60]	; 132e8 <__assert_fail@plt+0x20dc>
   132a8:	b	132cc <__assert_fail@plt+0x20c0>
   132ac:	ldr	r3, [pc, #56]	; 132ec <__assert_fail@plt+0x20e0>
   132b0:	b	132cc <__assert_fail@plt+0x20c0>
   132b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132b8:	cmp	r3, #9
   132bc:	bne	132c8 <__assert_fail@plt+0x20bc>
   132c0:	ldr	r3, [pc, #40]	; 132f0 <__assert_fail@plt+0x20e4>
   132c4:	b	132cc <__assert_fail@plt+0x20c0>
   132c8:	ldr	r3, [pc, #36]	; 132f4 <__assert_fail@plt+0x20e8>
   132cc:	mov	r0, r3
   132d0:	sub	sp, fp, #4
   132d4:	pop	{fp, pc}
   132d8:	andeq	r9, r1, r0, lsr #25
   132dc:	andeq	r9, r1, r8, lsr #25
   132e0:	andeq	r9, r1, ip, lsr #25
   132e4:			; <UNDEFINED> instruction: 0x00019cb0
   132e8:			; <UNDEFINED> instruction: 0x00019cb8
   132ec:			; <UNDEFINED> instruction: 0x00019cbc
   132f0:	andeq	r9, r1, r0, asr #25
   132f4:	andeq	r9, r1, r4, asr #25
   132f8:	push	{r4, fp, lr}
   132fc:	add	fp, sp, #8
   13300:	sub	sp, sp, #116	; 0x74
   13304:	str	r0, [fp, #-88]	; 0xffffffa8
   13308:	str	r1, [fp, #-92]	; 0xffffffa4
   1330c:	str	r2, [fp, #-96]	; 0xffffffa0
   13310:	str	r3, [fp, #-100]	; 0xffffff9c
   13314:	mov	r3, #0
   13318:	str	r3, [fp, #-20]	; 0xffffffec
   1331c:	mov	r3, #0
   13320:	str	r3, [fp, #-24]	; 0xffffffe8
   13324:	mov	r3, #0
   13328:	str	r3, [fp, #-28]	; 0xffffffe4
   1332c:	mov	r3, #0
   13330:	str	r3, [fp, #-32]	; 0xffffffe0
   13334:	mov	r3, #0
   13338:	strb	r3, [fp, #-33]	; 0xffffffdf
   1333c:	bl	1102c <__ctype_get_mb_cur_max@plt>
   13340:	mov	r3, r0
   13344:	cmp	r3, #1
   13348:	moveq	r3, #1
   1334c:	movne	r3, #0
   13350:	strb	r3, [fp, #-57]	; 0xffffffc7
   13354:	ldr	r3, [fp, #8]
   13358:	and	r3, r3, #2
   1335c:	cmp	r3, #0
   13360:	movne	r3, #1
   13364:	moveq	r3, #0
   13368:	strb	r3, [fp, #-34]	; 0xffffffde
   1336c:	mov	r3, #0
   13370:	strb	r3, [fp, #-35]	; 0xffffffdd
   13374:	mov	r3, #0
   13378:	strb	r3, [fp, #-36]	; 0xffffffdc
   1337c:	mov	r3, #1
   13380:	strb	r3, [fp, #-37]	; 0xffffffdb
   13384:	ldr	r3, [fp, #4]
   13388:	cmp	r3, #10
   1338c:	ldrls	pc, [pc, r3, lsl #2]
   13390:	b	13598 <__assert_fail@plt+0x238c>
   13394:	andeq	r3, r1, ip, lsl #11
   13398:	andeq	r3, r1, r8, lsl #10
   1339c:	andeq	r3, r1, ip, lsr #10
   133a0:	andeq	r3, r1, r0, lsl #10
   133a4:	andeq	r3, r1, r0, lsl r5
   133a8:	ldrdeq	r3, [r1], -r0
   133ac:	andeq	r3, r1, r0, asr #7
   133b0:	andeq	r3, r1, r0, lsr r4
   133b4:	andeq	r3, r1, r4, asr #8
   133b8:	andeq	r3, r1, r4, asr #8
   133bc:	andeq	r3, r1, r4, asr #8
   133c0:	mov	r3, #5
   133c4:	str	r3, [fp, #4]
   133c8:	mov	r3, #1
   133cc:	strb	r3, [fp, #-34]	; 0xffffffde
   133d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133d4:	eor	r3, r3, #1
   133d8:	uxtb	r3, r3
   133dc:	cmp	r3, #0
   133e0:	beq	13414 <__assert_fail@plt+0x2208>
   133e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   133e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133ec:	cmp	r2, r3
   133f0:	bcs	13408 <__assert_fail@plt+0x21fc>
   133f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133fc:	add	r3, r2, r3
   13400:	mov	r2, #34	; 0x22
   13404:	strb	r2, [r3]
   13408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1340c:	add	r3, r3, #1
   13410:	str	r3, [fp, #-20]	; 0xffffffec
   13414:	mov	r3, #1
   13418:	strb	r3, [fp, #-33]	; 0xffffffdf
   1341c:	ldr	r3, [pc, #3872]	; 14344 <__assert_fail@plt+0x3138>
   13420:	str	r3, [fp, #-28]	; 0xffffffe4
   13424:	mov	r3, #1
   13428:	str	r3, [fp, #-32]	; 0xffffffe0
   1342c:	b	1359c <__assert_fail@plt+0x2390>
   13430:	mov	r3, #1
   13434:	strb	r3, [fp, #-33]	; 0xffffffdf
   13438:	mov	r3, #0
   1343c:	strb	r3, [fp, #-34]	; 0xffffffde
   13440:	b	1359c <__assert_fail@plt+0x2390>
   13444:	ldr	r3, [fp, #4]
   13448:	cmp	r3, #10
   1344c:	beq	13470 <__assert_fail@plt+0x2264>
   13450:	ldr	r1, [fp, #4]
   13454:	ldr	r0, [pc, #3820]	; 14348 <__assert_fail@plt+0x313c>
   13458:	bl	13204 <__assert_fail@plt+0x1ff8>
   1345c:	str	r0, [fp, #16]
   13460:	ldr	r1, [fp, #4]
   13464:	ldr	r0, [pc, #3808]	; 1434c <__assert_fail@plt+0x3140>
   13468:	bl	13204 <__assert_fail@plt+0x1ff8>
   1346c:	str	r0, [fp, #20]
   13470:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13474:	eor	r3, r3, #1
   13478:	uxtb	r3, r3
   1347c:	cmp	r3, #0
   13480:	beq	134e0 <__assert_fail@plt+0x22d4>
   13484:	ldr	r3, [fp, #16]
   13488:	str	r3, [fp, #-28]	; 0xffffffe4
   1348c:	b	134d0 <__assert_fail@plt+0x22c4>
   13490:	ldr	r2, [fp, #-20]	; 0xffffffec
   13494:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13498:	cmp	r2, r3
   1349c:	bcs	134b8 <__assert_fail@plt+0x22ac>
   134a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134a8:	add	r3, r2, r3
   134ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   134b0:	ldrb	r2, [r2]
   134b4:	strb	r2, [r3]
   134b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134bc:	add	r3, r3, #1
   134c0:	str	r3, [fp, #-20]	; 0xffffffec
   134c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134c8:	add	r3, r3, #1
   134cc:	str	r3, [fp, #-28]	; 0xffffffe4
   134d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134d4:	ldrb	r3, [r3]
   134d8:	cmp	r3, #0
   134dc:	bne	13490 <__assert_fail@plt+0x2284>
   134e0:	mov	r3, #1
   134e4:	strb	r3, [fp, #-33]	; 0xffffffdf
   134e8:	ldr	r3, [fp, #20]
   134ec:	str	r3, [fp, #-28]	; 0xffffffe4
   134f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   134f4:	bl	110ec <strlen@plt>
   134f8:	str	r0, [fp, #-32]	; 0xffffffe0
   134fc:	b	1359c <__assert_fail@plt+0x2390>
   13500:	mov	r3, #1
   13504:	strb	r3, [fp, #-33]	; 0xffffffdf
   13508:	mov	r3, #1
   1350c:	strb	r3, [fp, #-34]	; 0xffffffde
   13510:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13514:	eor	r3, r3, #1
   13518:	uxtb	r3, r3
   1351c:	cmp	r3, #0
   13520:	beq	1352c <__assert_fail@plt+0x2320>
   13524:	mov	r3, #1
   13528:	strb	r3, [fp, #-33]	; 0xffffffdf
   1352c:	mov	r3, #2
   13530:	str	r3, [fp, #4]
   13534:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13538:	eor	r3, r3, #1
   1353c:	uxtb	r3, r3
   13540:	cmp	r3, #0
   13544:	beq	13578 <__assert_fail@plt+0x236c>
   13548:	ldr	r2, [fp, #-20]	; 0xffffffec
   1354c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13550:	cmp	r2, r3
   13554:	bcs	1356c <__assert_fail@plt+0x2360>
   13558:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1355c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13560:	add	r3, r2, r3
   13564:	mov	r2, #39	; 0x27
   13568:	strb	r2, [r3]
   1356c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13570:	add	r3, r3, #1
   13574:	str	r3, [fp, #-20]	; 0xffffffec
   13578:	ldr	r3, [pc, #3532]	; 1434c <__assert_fail@plt+0x3140>
   1357c:	str	r3, [fp, #-28]	; 0xffffffe4
   13580:	mov	r3, #1
   13584:	str	r3, [fp, #-32]	; 0xffffffe0
   13588:	b	1359c <__assert_fail@plt+0x2390>
   1358c:	mov	r3, #0
   13590:	strb	r3, [fp, #-34]	; 0xffffffde
   13594:	b	1359c <__assert_fail@plt+0x2390>
   13598:	bl	111dc <abort@plt>
   1359c:	mov	r3, #0
   135a0:	str	r3, [fp, #-16]
   135a4:	b	14734 <__assert_fail@plt+0x3528>
   135a8:	mov	r3, #0
   135ac:	strb	r3, [fp, #-40]	; 0xffffffd8
   135b0:	mov	r3, #0
   135b4:	strb	r3, [fp, #-41]	; 0xffffffd7
   135b8:	mov	r3, #0
   135bc:	strb	r3, [fp, #-42]	; 0xffffffd6
   135c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   135c4:	cmp	r3, #0
   135c8:	beq	13664 <__assert_fail@plt+0x2458>
   135cc:	ldr	r3, [fp, #4]
   135d0:	cmp	r3, #2
   135d4:	beq	13664 <__assert_fail@plt+0x2458>
   135d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135dc:	cmp	r3, #0
   135e0:	beq	13664 <__assert_fail@plt+0x2458>
   135e4:	ldr	r2, [fp, #-16]
   135e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135ec:	add	r4, r2, r3
   135f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   135f4:	cmn	r3, #1
   135f8:	bne	1361c <__assert_fail@plt+0x2410>
   135fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13600:	cmp	r3, #1
   13604:	bls	1361c <__assert_fail@plt+0x2410>
   13608:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1360c:	bl	110ec <strlen@plt>
   13610:	str	r0, [fp, #-100]	; 0xffffff9c
   13614:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13618:	b	13620 <__assert_fail@plt+0x2414>
   1361c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13620:	cmp	r4, r3
   13624:	bhi	13664 <__assert_fail@plt+0x2458>
   13628:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1362c:	ldr	r3, [fp, #-16]
   13630:	add	r3, r2, r3
   13634:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13638:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1363c:	mov	r0, r3
   13640:	bl	10fc0 <memcmp@plt>
   13644:	mov	r3, r0
   13648:	cmp	r3, #0
   1364c:	bne	13664 <__assert_fail@plt+0x2458>
   13650:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13654:	cmp	r3, #0
   13658:	bne	148f0 <__assert_fail@plt+0x36e4>
   1365c:	mov	r3, #1
   13660:	strb	r3, [fp, #-40]	; 0xffffffd8
   13664:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13668:	ldr	r3, [fp, #-16]
   1366c:	add	r3, r2, r3
   13670:	ldrb	r3, [r3]
   13674:	strb	r3, [fp, #-38]	; 0xffffffda
   13678:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1367c:	cmp	r3, #126	; 0x7e
   13680:	ldrls	pc, [pc, r3, lsl #2]
   13684:	b	13eb0 <__assert_fail@plt+0x2ca4>
   13688:	andeq	r3, r1, r4, lsl #17
   1368c:			; <UNDEFINED> instruction: 0x00013eb0
   13690:			; <UNDEFINED> instruction: 0x00013eb0
   13694:			; <UNDEFINED> instruction: 0x00013eb0
   13698:			; <UNDEFINED> instruction: 0x00013eb0
   1369c:			; <UNDEFINED> instruction: 0x00013eb0
   136a0:			; <UNDEFINED> instruction: 0x00013eb0
   136a4:	andeq	r3, r1, r4, ror ip
   136a8:	andeq	r3, r1, r0, lsl #25
   136ac:			; <UNDEFINED> instruction: 0x00013cb0
   136b0:	muleq	r1, r8, ip
   136b4:			; <UNDEFINED> instruction: 0x00013cbc
   136b8:	andeq	r3, r1, ip, lsl #25
   136bc:	andeq	r3, r1, r4, lsr #25
   136c0:			; <UNDEFINED> instruction: 0x00013eb0
   136c4:			; <UNDEFINED> instruction: 0x00013eb0
   136c8:			; <UNDEFINED> instruction: 0x00013eb0
   136cc:			; <UNDEFINED> instruction: 0x00013eb0
   136d0:			; <UNDEFINED> instruction: 0x00013eb0
   136d4:			; <UNDEFINED> instruction: 0x00013eb0
   136d8:			; <UNDEFINED> instruction: 0x00013eb0
   136dc:			; <UNDEFINED> instruction: 0x00013eb0
   136e0:			; <UNDEFINED> instruction: 0x00013eb0
   136e4:			; <UNDEFINED> instruction: 0x00013eb0
   136e8:			; <UNDEFINED> instruction: 0x00013eb0
   136ec:			; <UNDEFINED> instruction: 0x00013eb0
   136f0:			; <UNDEFINED> instruction: 0x00013eb0
   136f4:			; <UNDEFINED> instruction: 0x00013eb0
   136f8:			; <UNDEFINED> instruction: 0x00013eb0
   136fc:			; <UNDEFINED> instruction: 0x00013eb0
   13700:			; <UNDEFINED> instruction: 0x00013eb0
   13704:			; <UNDEFINED> instruction: 0x00013eb0
   13708:	muleq	r1, r4, sp
   1370c:	muleq	r1, ip, sp
   13710:	muleq	r1, ip, sp
   13714:	andeq	r3, r1, r8, lsl #27
   13718:	muleq	r1, ip, sp
   1371c:	andeq	r3, r1, r4, lsr #29
   13720:	muleq	r1, ip, sp
   13724:			; <UNDEFINED> instruction: 0x00013db8
   13728:	muleq	r1, ip, sp
   1372c:	muleq	r1, ip, sp
   13730:	muleq	r1, ip, sp
   13734:	andeq	r3, r1, r4, lsr #29
   13738:	andeq	r3, r1, r4, lsr #29
   1373c:	andeq	r3, r1, r4, lsr #29
   13740:	andeq	r3, r1, r4, lsr #29
   13744:	andeq	r3, r1, r4, lsr #29
   13748:	andeq	r3, r1, r4, lsr #29
   1374c:	andeq	r3, r1, r4, lsr #29
   13750:	andeq	r3, r1, r4, lsr #29
   13754:	andeq	r3, r1, r4, lsr #29
   13758:	andeq	r3, r1, r4, lsr #29
   1375c:	andeq	r3, r1, r4, lsr #29
   13760:	andeq	r3, r1, r4, lsr #29
   13764:	andeq	r3, r1, r4, lsr #29
   13768:	andeq	r3, r1, r4, lsr #29
   1376c:	andeq	r3, r1, r4, lsr #29
   13770:	andeq	r3, r1, r4, lsr #29
   13774:	muleq	r1, ip, sp
   13778:	muleq	r1, ip, sp
   1377c:	muleq	r1, ip, sp
   13780:	muleq	r1, ip, sp
   13784:	andeq	r3, r1, r4, ror #20
   13788:			; <UNDEFINED> instruction: 0x00013eb0
   1378c:	andeq	r3, r1, r4, lsr #29
   13790:	andeq	r3, r1, r4, lsr #29
   13794:	andeq	r3, r1, r4, lsr #29
   13798:	andeq	r3, r1, r4, lsr #29
   1379c:	andeq	r3, r1, r4, lsr #29
   137a0:	andeq	r3, r1, r4, lsr #29
   137a4:	andeq	r3, r1, r4, lsr #29
   137a8:	andeq	r3, r1, r4, lsr #29
   137ac:	andeq	r3, r1, r4, lsr #29
   137b0:	andeq	r3, r1, r4, lsr #29
   137b4:	andeq	r3, r1, r4, lsr #29
   137b8:	andeq	r3, r1, r4, lsr #29
   137bc:	andeq	r3, r1, r4, lsr #29
   137c0:	andeq	r3, r1, r4, lsr #29
   137c4:	andeq	r3, r1, r4, lsr #29
   137c8:	andeq	r3, r1, r4, lsr #29
   137cc:	andeq	r3, r1, r4, lsr #29
   137d0:	andeq	r3, r1, r4, lsr #29
   137d4:	andeq	r3, r1, r4, lsr #29
   137d8:	andeq	r3, r1, r4, lsr #29
   137dc:	andeq	r3, r1, r4, lsr #29
   137e0:	andeq	r3, r1, r4, lsr #29
   137e4:	andeq	r3, r1, r4, lsr #29
   137e8:	andeq	r3, r1, r4, lsr #29
   137ec:	andeq	r3, r1, r4, lsr #29
   137f0:	andeq	r3, r1, r4, lsr #29
   137f4:	muleq	r1, ip, sp
   137f8:	andeq	r3, r1, r8, asr #25
   137fc:	andeq	r3, r1, r4, lsr #29
   13800:	muleq	r1, ip, sp
   13804:	andeq	r3, r1, r4, lsr #29
   13808:	muleq	r1, ip, sp
   1380c:	andeq	r3, r1, r4, lsr #29
   13810:	andeq	r3, r1, r4, lsr #29
   13814:	andeq	r3, r1, r4, lsr #29
   13818:	andeq	r3, r1, r4, lsr #29
   1381c:	andeq	r3, r1, r4, lsr #29
   13820:	andeq	r3, r1, r4, lsr #29
   13824:	andeq	r3, r1, r4, lsr #29
   13828:	andeq	r3, r1, r4, lsr #29
   1382c:	andeq	r3, r1, r4, lsr #29
   13830:	andeq	r3, r1, r4, lsr #29
   13834:	andeq	r3, r1, r4, lsr #29
   13838:	andeq	r3, r1, r4, lsr #29
   1383c:	andeq	r3, r1, r4, lsr #29
   13840:	andeq	r3, r1, r4, lsr #29
   13844:	andeq	r3, r1, r4, lsr #29
   13848:	andeq	r3, r1, r4, lsr #29
   1384c:	andeq	r3, r1, r4, lsr #29
   13850:	andeq	r3, r1, r4, lsr #29
   13854:	andeq	r3, r1, r4, lsr #29
   13858:	andeq	r3, r1, r4, lsr #29
   1385c:	andeq	r3, r1, r4, lsr #29
   13860:	andeq	r3, r1, r4, lsr #29
   13864:	andeq	r3, r1, r4, lsr #29
   13868:	andeq	r3, r1, r4, lsr #29
   1386c:	andeq	r3, r1, r4, lsr #29
   13870:	andeq	r3, r1, r4, lsr #29
   13874:	andeq	r3, r1, r0, asr #26
   13878:	muleq	r1, ip, sp
   1387c:	andeq	r3, r1, r0, asr #26
   13880:	andeq	r3, r1, r8, lsl #27
   13884:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13888:	cmp	r3, #0
   1388c:	beq	13a50 <__assert_fail@plt+0x2844>
   13890:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13894:	cmp	r3, #0
   13898:	bne	148f8 <__assert_fail@plt+0x36ec>
   1389c:	mov	r3, #1
   138a0:	strb	r3, [fp, #-41]	; 0xffffffd7
   138a4:	ldr	r3, [fp, #4]
   138a8:	cmp	r3, #2
   138ac:	bne	1395c <__assert_fail@plt+0x2750>
   138b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   138b4:	eor	r3, r3, #1
   138b8:	uxtb	r3, r3
   138bc:	cmp	r3, #0
   138c0:	beq	1395c <__assert_fail@plt+0x2750>
   138c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   138c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138cc:	cmp	r2, r3
   138d0:	bcs	138e8 <__assert_fail@plt+0x26dc>
   138d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   138d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138dc:	add	r3, r2, r3
   138e0:	mov	r2, #39	; 0x27
   138e4:	strb	r2, [r3]
   138e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138ec:	add	r3, r3, #1
   138f0:	str	r3, [fp, #-20]	; 0xffffffec
   138f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   138f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   138fc:	cmp	r2, r3
   13900:	bcs	13918 <__assert_fail@plt+0x270c>
   13904:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13908:	ldr	r3, [fp, #-20]	; 0xffffffec
   1390c:	add	r3, r2, r3
   13910:	mov	r2, #36	; 0x24
   13914:	strb	r2, [r3]
   13918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1391c:	add	r3, r3, #1
   13920:	str	r3, [fp, #-20]	; 0xffffffec
   13924:	ldr	r2, [fp, #-20]	; 0xffffffec
   13928:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1392c:	cmp	r2, r3
   13930:	bcs	13948 <__assert_fail@plt+0x273c>
   13934:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13938:	ldr	r3, [fp, #-20]	; 0xffffffec
   1393c:	add	r3, r2, r3
   13940:	mov	r2, #39	; 0x27
   13944:	strb	r2, [r3]
   13948:	ldr	r3, [fp, #-20]	; 0xffffffec
   1394c:	add	r3, r3, #1
   13950:	str	r3, [fp, #-20]	; 0xffffffec
   13954:	mov	r3, #1
   13958:	strb	r3, [fp, #-35]	; 0xffffffdd
   1395c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13960:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13964:	cmp	r2, r3
   13968:	bcs	13980 <__assert_fail@plt+0x2774>
   1396c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13970:	ldr	r3, [fp, #-20]	; 0xffffffec
   13974:	add	r3, r2, r3
   13978:	mov	r2, #92	; 0x5c
   1397c:	strb	r2, [r3]
   13980:	ldr	r3, [fp, #-20]	; 0xffffffec
   13984:	add	r3, r3, #1
   13988:	str	r3, [fp, #-20]	; 0xffffffec
   1398c:	ldr	r3, [fp, #4]
   13990:	cmp	r3, #2
   13994:	beq	13a44 <__assert_fail@plt+0x2838>
   13998:	ldr	r3, [fp, #-16]
   1399c:	add	r2, r3, #1
   139a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   139a4:	cmp	r2, r3
   139a8:	bcs	13a44 <__assert_fail@plt+0x2838>
   139ac:	ldr	r3, [fp, #-16]
   139b0:	add	r3, r3, #1
   139b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   139b8:	add	r3, r2, r3
   139bc:	ldrb	r3, [r3]
   139c0:	cmp	r3, #47	; 0x2f
   139c4:	bls	13a44 <__assert_fail@plt+0x2838>
   139c8:	ldr	r3, [fp, #-16]
   139cc:	add	r3, r3, #1
   139d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   139d4:	add	r3, r2, r3
   139d8:	ldrb	r3, [r3]
   139dc:	cmp	r3, #57	; 0x39
   139e0:	bhi	13a44 <__assert_fail@plt+0x2838>
   139e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   139e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139ec:	cmp	r2, r3
   139f0:	bcs	13a08 <__assert_fail@plt+0x27fc>
   139f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139fc:	add	r3, r2, r3
   13a00:	mov	r2, #48	; 0x30
   13a04:	strb	r2, [r3]
   13a08:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a0c:	add	r3, r3, #1
   13a10:	str	r3, [fp, #-20]	; 0xffffffec
   13a14:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a1c:	cmp	r2, r3
   13a20:	bcs	13a38 <__assert_fail@plt+0x282c>
   13a24:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a28:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a2c:	add	r3, r2, r3
   13a30:	mov	r2, #48	; 0x30
   13a34:	strb	r2, [r3]
   13a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a3c:	add	r3, r3, #1
   13a40:	str	r3, [fp, #-20]	; 0xffffffec
   13a44:	mov	r3, #48	; 0x30
   13a48:	strb	r3, [fp, #-38]	; 0xffffffda
   13a4c:	b	1448c <__assert_fail@plt+0x3280>
   13a50:	ldr	r3, [fp, #8]
   13a54:	and	r3, r3, #1
   13a58:	cmp	r3, #0
   13a5c:	beq	1448c <__assert_fail@plt+0x3280>
   13a60:	b	14728 <__assert_fail@plt+0x351c>
   13a64:	ldr	r3, [fp, #4]
   13a68:	cmp	r3, #2
   13a6c:	beq	13a7c <__assert_fail@plt+0x2870>
   13a70:	cmp	r3, #5
   13a74:	beq	13a8c <__assert_fail@plt+0x2880>
   13a78:	b	13c70 <__assert_fail@plt+0x2a64>
   13a7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a80:	cmp	r3, #0
   13a84:	beq	13c64 <__assert_fail@plt+0x2a58>
   13a88:	b	14934 <__assert_fail@plt+0x3728>
   13a8c:	ldr	r3, [fp, #8]
   13a90:	and	r3, r3, #4
   13a94:	cmp	r3, #0
   13a98:	beq	13c6c <__assert_fail@plt+0x2a60>
   13a9c:	ldr	r3, [fp, #-16]
   13aa0:	add	r2, r3, #2
   13aa4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13aa8:	cmp	r2, r3
   13aac:	bcs	13c6c <__assert_fail@plt+0x2a60>
   13ab0:	ldr	r3, [fp, #-16]
   13ab4:	add	r3, r3, #1
   13ab8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13abc:	add	r3, r2, r3
   13ac0:	ldrb	r3, [r3]
   13ac4:	cmp	r3, #63	; 0x3f
   13ac8:	bne	13c6c <__assert_fail@plt+0x2a60>
   13acc:	ldr	r3, [fp, #-16]
   13ad0:	add	r3, r3, #2
   13ad4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13ad8:	add	r3, r2, r3
   13adc:	ldrb	r3, [r3]
   13ae0:	sub	r3, r3, #33	; 0x21
   13ae4:	cmp	r3, #29
   13ae8:	ldrls	pc, [pc, r3, lsl #2]
   13aec:	b	13c5c <__assert_fail@plt+0x2a50>
   13af0:	andeq	r3, r1, r8, ror #22
   13af4:	andeq	r3, r1, ip, asr ip
   13af8:	andeq	r3, r1, ip, asr ip
   13afc:	andeq	r3, r1, ip, asr ip
   13b00:	andeq	r3, r1, ip, asr ip
   13b04:	andeq	r3, r1, ip, asr ip
   13b08:	andeq	r3, r1, r8, ror #22
   13b0c:	andeq	r3, r1, r8, ror #22
   13b10:	andeq	r3, r1, r8, ror #22
   13b14:	andeq	r3, r1, ip, asr ip
   13b18:	andeq	r3, r1, ip, asr ip
   13b1c:	andeq	r3, r1, ip, asr ip
   13b20:	andeq	r3, r1, r8, ror #22
   13b24:	andeq	r3, r1, ip, asr ip
   13b28:	andeq	r3, r1, r8, ror #22
   13b2c:	andeq	r3, r1, ip, asr ip
   13b30:	andeq	r3, r1, ip, asr ip
   13b34:	andeq	r3, r1, ip, asr ip
   13b38:	andeq	r3, r1, ip, asr ip
   13b3c:	andeq	r3, r1, ip, asr ip
   13b40:	andeq	r3, r1, ip, asr ip
   13b44:	andeq	r3, r1, ip, asr ip
   13b48:	andeq	r3, r1, ip, asr ip
   13b4c:	andeq	r3, r1, ip, asr ip
   13b50:	andeq	r3, r1, ip, asr ip
   13b54:	andeq	r3, r1, ip, asr ip
   13b58:	andeq	r3, r1, ip, asr ip
   13b5c:	andeq	r3, r1, r8, ror #22
   13b60:	andeq	r3, r1, r8, ror #22
   13b64:	andeq	r3, r1, r8, ror #22
   13b68:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b6c:	cmp	r3, #0
   13b70:	bne	14900 <__assert_fail@plt+0x36f4>
   13b74:	ldr	r3, [fp, #-16]
   13b78:	add	r3, r3, #2
   13b7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13b80:	add	r3, r2, r3
   13b84:	ldrb	r3, [r3]
   13b88:	strb	r3, [fp, #-38]	; 0xffffffda
   13b8c:	ldr	r3, [fp, #-16]
   13b90:	add	r3, r3, #2
   13b94:	str	r3, [fp, #-16]
   13b98:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ba0:	cmp	r2, r3
   13ba4:	bcs	13bbc <__assert_fail@plt+0x29b0>
   13ba8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bb0:	add	r3, r2, r3
   13bb4:	mov	r2, #63	; 0x3f
   13bb8:	strb	r2, [r3]
   13bbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bc0:	add	r3, r3, #1
   13bc4:	str	r3, [fp, #-20]	; 0xffffffec
   13bc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bcc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bd0:	cmp	r2, r3
   13bd4:	bcs	13bec <__assert_fail@plt+0x29e0>
   13bd8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13be0:	add	r3, r2, r3
   13be4:	mov	r2, #34	; 0x22
   13be8:	strb	r2, [r3]
   13bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bf0:	add	r3, r3, #1
   13bf4:	str	r3, [fp, #-20]	; 0xffffffec
   13bf8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c00:	cmp	r2, r3
   13c04:	bcs	13c1c <__assert_fail@plt+0x2a10>
   13c08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c10:	add	r3, r2, r3
   13c14:	mov	r2, #34	; 0x22
   13c18:	strb	r2, [r3]
   13c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c20:	add	r3, r3, #1
   13c24:	str	r3, [fp, #-20]	; 0xffffffec
   13c28:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c30:	cmp	r2, r3
   13c34:	bcs	13c4c <__assert_fail@plt+0x2a40>
   13c38:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c40:	add	r3, r2, r3
   13c44:	mov	r2, #63	; 0x3f
   13c48:	strb	r2, [r3]
   13c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c50:	add	r3, r3, #1
   13c54:	str	r3, [fp, #-20]	; 0xffffffec
   13c58:	b	13c60 <__assert_fail@plt+0x2a54>
   13c5c:	nop			; (mov r0, r0)
   13c60:	b	13c6c <__assert_fail@plt+0x2a60>
   13c64:	nop			; (mov r0, r0)
   13c68:	b	144b8 <__assert_fail@plt+0x32ac>
   13c6c:	nop			; (mov r0, r0)
   13c70:	b	144b8 <__assert_fail@plt+0x32ac>
   13c74:	mov	r3, #97	; 0x61
   13c78:	strb	r3, [fp, #-39]	; 0xffffffd9
   13c7c:	b	13d28 <__assert_fail@plt+0x2b1c>
   13c80:	mov	r3, #98	; 0x62
   13c84:	strb	r3, [fp, #-39]	; 0xffffffd9
   13c88:	b	13d28 <__assert_fail@plt+0x2b1c>
   13c8c:	mov	r3, #102	; 0x66
   13c90:	strb	r3, [fp, #-39]	; 0xffffffd9
   13c94:	b	13d28 <__assert_fail@plt+0x2b1c>
   13c98:	mov	r3, #110	; 0x6e
   13c9c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13ca0:	b	13d10 <__assert_fail@plt+0x2b04>
   13ca4:	mov	r3, #114	; 0x72
   13ca8:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cac:	b	13d10 <__assert_fail@plt+0x2b04>
   13cb0:	mov	r3, #116	; 0x74
   13cb4:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cb8:	b	13d10 <__assert_fail@plt+0x2b04>
   13cbc:	mov	r3, #118	; 0x76
   13cc0:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cc4:	b	13d28 <__assert_fail@plt+0x2b1c>
   13cc8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ccc:	strb	r3, [fp, #-39]	; 0xffffffd9
   13cd0:	ldr	r3, [fp, #4]
   13cd4:	cmp	r3, #2
   13cd8:	bne	13cec <__assert_fail@plt+0x2ae0>
   13cdc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ce0:	cmp	r3, #0
   13ce4:	beq	14640 <__assert_fail@plt+0x3434>
   13ce8:	b	14934 <__assert_fail@plt+0x3728>
   13cec:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13cf0:	cmp	r3, #0
   13cf4:	beq	13d10 <__assert_fail@plt+0x2b04>
   13cf8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13cfc:	cmp	r3, #0
   13d00:	beq	13d10 <__assert_fail@plt+0x2b04>
   13d04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13d08:	cmp	r3, #0
   13d0c:	bne	14648 <__assert_fail@plt+0x343c>
   13d10:	ldr	r3, [fp, #4]
   13d14:	cmp	r3, #2
   13d18:	bne	13d28 <__assert_fail@plt+0x2b1c>
   13d1c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d20:	cmp	r3, #0
   13d24:	bne	14908 <__assert_fail@plt+0x36fc>
   13d28:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13d2c:	cmp	r3, #0
   13d30:	beq	14494 <__assert_fail@plt+0x3288>
   13d34:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13d38:	strb	r3, [fp, #-38]	; 0xffffffda
   13d3c:	b	14540 <__assert_fail@plt+0x3334>
   13d40:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d44:	cmn	r3, #1
   13d48:	bne	13d6c <__assert_fail@plt+0x2b60>
   13d4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13d50:	add	r3, r3, #1
   13d54:	ldrb	r3, [r3]
   13d58:	cmp	r3, #0
   13d5c:	movne	r3, #1
   13d60:	moveq	r3, #0
   13d64:	uxtb	r3, r3
   13d68:	b	13d80 <__assert_fail@plt+0x2b74>
   13d6c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d70:	cmp	r3, #1
   13d74:	movne	r3, #1
   13d78:	moveq	r3, #0
   13d7c:	uxtb	r3, r3
   13d80:	cmp	r3, #0
   13d84:	bne	1449c <__assert_fail@plt+0x3290>
   13d88:	ldr	r3, [fp, #-16]
   13d8c:	cmp	r3, #0
   13d90:	bne	144a4 <__assert_fail@plt+0x3298>
   13d94:	mov	r3, #1
   13d98:	strb	r3, [fp, #-42]	; 0xffffffd6
   13d9c:	ldr	r3, [fp, #4]
   13da0:	cmp	r3, #2
   13da4:	bne	144ac <__assert_fail@plt+0x32a0>
   13da8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13dac:	cmp	r3, #0
   13db0:	beq	144ac <__assert_fail@plt+0x32a0>
   13db4:	b	14934 <__assert_fail@plt+0x3728>
   13db8:	mov	r3, #1
   13dbc:	strb	r3, [fp, #-36]	; 0xffffffdc
   13dc0:	mov	r3, #1
   13dc4:	strb	r3, [fp, #-42]	; 0xffffffd6
   13dc8:	ldr	r3, [fp, #4]
   13dcc:	cmp	r3, #2
   13dd0:	bne	144b4 <__assert_fail@plt+0x32a8>
   13dd4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13dd8:	cmp	r3, #0
   13ddc:	bne	14910 <__assert_fail@plt+0x3704>
   13de0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13de4:	cmp	r3, #0
   13de8:	beq	13e08 <__assert_fail@plt+0x2bfc>
   13dec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13df0:	cmp	r3, #0
   13df4:	bne	13e08 <__assert_fail@plt+0x2bfc>
   13df8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13dfc:	str	r3, [fp, #-24]	; 0xffffffe8
   13e00:	mov	r3, #0
   13e04:	str	r3, [fp, #-92]	; 0xffffffa4
   13e08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e10:	cmp	r2, r3
   13e14:	bcs	13e2c <__assert_fail@plt+0x2c20>
   13e18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e20:	add	r3, r2, r3
   13e24:	mov	r2, #39	; 0x27
   13e28:	strb	r2, [r3]
   13e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e30:	add	r3, r3, #1
   13e34:	str	r3, [fp, #-20]	; 0xffffffec
   13e38:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e40:	cmp	r2, r3
   13e44:	bcs	13e5c <__assert_fail@plt+0x2c50>
   13e48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e50:	add	r3, r2, r3
   13e54:	mov	r2, #92	; 0x5c
   13e58:	strb	r2, [r3]
   13e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e60:	add	r3, r3, #1
   13e64:	str	r3, [fp, #-20]	; 0xffffffec
   13e68:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e70:	cmp	r2, r3
   13e74:	bcs	13e8c <__assert_fail@plt+0x2c80>
   13e78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e80:	add	r3, r2, r3
   13e84:	mov	r2, #39	; 0x27
   13e88:	strb	r2, [r3]
   13e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e90:	add	r3, r3, #1
   13e94:	str	r3, [fp, #-20]	; 0xffffffec
   13e98:	mov	r3, #0
   13e9c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ea0:	b	144b4 <__assert_fail@plt+0x32a8>
   13ea4:	mov	r3, #1
   13ea8:	strb	r3, [fp, #-42]	; 0xffffffd6
   13eac:	b	144b8 <__assert_fail@plt+0x32ac>
   13eb0:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13eb4:	cmp	r3, #0
   13eb8:	beq	13ef8 <__assert_fail@plt+0x2cec>
   13ebc:	mov	r3, #1
   13ec0:	str	r3, [fp, #-48]	; 0xffffffd0
   13ec4:	bl	110bc <__ctype_b_loc@plt>
   13ec8:	mov	r3, r0
   13ecc:	ldr	r2, [r3]
   13ed0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ed4:	lsl	r3, r3, #1
   13ed8:	add	r3, r2, r3
   13edc:	ldrh	r3, [r3]
   13ee0:	and	r3, r3, #16384	; 0x4000
   13ee4:	cmp	r3, #0
   13ee8:	movne	r3, #1
   13eec:	moveq	r3, #0
   13ef0:	strb	r3, [fp, #-49]	; 0xffffffcf
   13ef4:	b	14144 <__assert_fail@plt+0x2f38>
   13ef8:	sub	r3, fp, #76	; 0x4c
   13efc:	mov	r2, #8
   13f00:	mov	r1, #0
   13f04:	mov	r0, r3
   13f08:	bl	11140 <memset@plt>
   13f0c:	mov	r3, #0
   13f10:	str	r3, [fp, #-48]	; 0xffffffd0
   13f14:	mov	r3, #1
   13f18:	strb	r3, [fp, #-49]	; 0xffffffcf
   13f1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13f20:	cmn	r3, #1
   13f24:	bne	13f34 <__assert_fail@plt+0x2d28>
   13f28:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13f2c:	bl	110ec <strlen@plt>
   13f30:	str	r0, [fp, #-100]	; 0xffffff9c
   13f34:	ldr	r2, [fp, #-16]
   13f38:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f3c:	add	r3, r2, r3
   13f40:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f44:	add	r1, r2, r3
   13f48:	ldr	r2, [fp, #-16]
   13f4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f50:	add	r3, r2, r3
   13f54:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13f58:	sub	r2, r2, r3
   13f5c:	sub	r3, fp, #76	; 0x4c
   13f60:	sub	r0, fp, #80	; 0x50
   13f64:	bl	17d78 <__assert_fail@plt+0x6b6c>
   13f68:	str	r0, [fp, #-64]	; 0xffffffc0
   13f6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f70:	cmp	r3, #0
   13f74:	beq	14138 <__assert_fail@plt+0x2f2c>
   13f78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f7c:	cmn	r3, #1
   13f80:	bne	13f90 <__assert_fail@plt+0x2d84>
   13f84:	mov	r3, #0
   13f88:	strb	r3, [fp, #-49]	; 0xffffffcf
   13f8c:	b	14144 <__assert_fail@plt+0x2f38>
   13f90:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f94:	cmn	r3, #2
   13f98:	bne	13ff0 <__assert_fail@plt+0x2de4>
   13f9c:	mov	r3, #0
   13fa0:	strb	r3, [fp, #-49]	; 0xffffffcf
   13fa4:	b	13fb4 <__assert_fail@plt+0x2da8>
   13fa8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fac:	add	r3, r3, #1
   13fb0:	str	r3, [fp, #-48]	; 0xffffffd0
   13fb4:	ldr	r2, [fp, #-16]
   13fb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fbc:	add	r2, r2, r3
   13fc0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13fc4:	cmp	r2, r3
   13fc8:	bcs	14140 <__assert_fail@plt+0x2f34>
   13fcc:	ldr	r2, [fp, #-16]
   13fd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fd4:	add	r3, r2, r3
   13fd8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13fdc:	add	r3, r2, r3
   13fe0:	ldrb	r3, [r3]
   13fe4:	cmp	r3, #0
   13fe8:	bne	13fa8 <__assert_fail@plt+0x2d9c>
   13fec:	b	14140 <__assert_fail@plt+0x2f34>
   13ff0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ff4:	cmp	r3, #0
   13ff8:	beq	140ec <__assert_fail@plt+0x2ee0>
   13ffc:	ldr	r3, [fp, #4]
   14000:	cmp	r3, #2
   14004:	bne	140ec <__assert_fail@plt+0x2ee0>
   14008:	mov	r3, #1
   1400c:	str	r3, [fp, #-56]	; 0xffffffc8
   14010:	b	140dc <__assert_fail@plt+0x2ed0>
   14014:	ldr	r2, [fp, #-16]
   14018:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1401c:	add	r2, r2, r3
   14020:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14024:	add	r3, r2, r3
   14028:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1402c:	add	r3, r2, r3
   14030:	ldrb	r3, [r3]
   14034:	sub	r3, r3, #91	; 0x5b
   14038:	cmp	r3, #33	; 0x21
   1403c:	ldrls	pc, [pc, r3, lsl #2]
   14040:	b	140cc <__assert_fail@plt+0x2ec0>
   14044:	andeq	r4, r1, r8, lsl r9
   14048:	andeq	r4, r1, r8, lsl r9
   1404c:	andeq	r4, r1, ip, asr #1
   14050:	andeq	r4, r1, r8, lsl r9
   14054:	andeq	r4, r1, ip, asr #1
   14058:	andeq	r4, r1, r8, lsl r9
   1405c:	andeq	r4, r1, ip, asr #1
   14060:	andeq	r4, r1, ip, asr #1
   14064:	andeq	r4, r1, ip, asr #1
   14068:	andeq	r4, r1, ip, asr #1
   1406c:	andeq	r4, r1, ip, asr #1
   14070:	andeq	r4, r1, ip, asr #1
   14074:	andeq	r4, r1, ip, asr #1
   14078:	andeq	r4, r1, ip, asr #1
   1407c:	andeq	r4, r1, ip, asr #1
   14080:	andeq	r4, r1, ip, asr #1
   14084:	andeq	r4, r1, ip, asr #1
   14088:	andeq	r4, r1, ip, asr #1
   1408c:	andeq	r4, r1, ip, asr #1
   14090:	andeq	r4, r1, ip, asr #1
   14094:	andeq	r4, r1, ip, asr #1
   14098:	andeq	r4, r1, ip, asr #1
   1409c:	andeq	r4, r1, ip, asr #1
   140a0:	andeq	r4, r1, ip, asr #1
   140a4:	andeq	r4, r1, ip, asr #1
   140a8:	andeq	r4, r1, ip, asr #1
   140ac:	andeq	r4, r1, ip, asr #1
   140b0:	andeq	r4, r1, ip, asr #1
   140b4:	andeq	r4, r1, ip, asr #1
   140b8:	andeq	r4, r1, ip, asr #1
   140bc:	andeq	r4, r1, ip, asr #1
   140c0:	andeq	r4, r1, ip, asr #1
   140c4:	andeq	r4, r1, ip, asr #1
   140c8:	andeq	r4, r1, r8, lsl r9
   140cc:	nop			; (mov r0, r0)
   140d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   140d4:	add	r3, r3, #1
   140d8:	str	r3, [fp, #-56]	; 0xffffffc8
   140dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140e0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   140e4:	cmp	r2, r3
   140e8:	bcc	14014 <__assert_fail@plt+0x2e08>
   140ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   140f0:	mov	r0, r3
   140f4:	bl	10ffc <iswprint@plt>
   140f8:	mov	r3, r0
   140fc:	cmp	r3, #0
   14100:	bne	1410c <__assert_fail@plt+0x2f00>
   14104:	mov	r3, #0
   14108:	strb	r3, [fp, #-49]	; 0xffffffcf
   1410c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14110:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14114:	add	r3, r2, r3
   14118:	str	r3, [fp, #-48]	; 0xffffffd0
   1411c:	sub	r3, fp, #76	; 0x4c
   14120:	mov	r0, r3
   14124:	bl	10fb4 <mbsinit@plt>
   14128:	mov	r3, r0
   1412c:	cmp	r3, #0
   14130:	beq	13f34 <__assert_fail@plt+0x2d28>
   14134:	b	14144 <__assert_fail@plt+0x2f38>
   14138:	nop			; (mov r0, r0)
   1413c:	b	14144 <__assert_fail@plt+0x2f38>
   14140:	nop			; (mov r0, r0)
   14144:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14148:	strb	r3, [fp, #-42]	; 0xffffffd6
   1414c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14150:	cmp	r3, #1
   14154:	bhi	14178 <__assert_fail@plt+0x2f6c>
   14158:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1415c:	cmp	r3, #0
   14160:	beq	144b8 <__assert_fail@plt+0x32ac>
   14164:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14168:	eor	r3, r3, #1
   1416c:	uxtb	r3, r3
   14170:	cmp	r3, #0
   14174:	beq	144b8 <__assert_fail@plt+0x32ac>
   14178:	ldr	r2, [fp, #-16]
   1417c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14180:	add	r3, r2, r3
   14184:	str	r3, [fp, #-68]	; 0xffffffbc
   14188:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1418c:	cmp	r3, #0
   14190:	beq	14350 <__assert_fail@plt+0x3144>
   14194:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14198:	eor	r3, r3, #1
   1419c:	uxtb	r3, r3
   141a0:	cmp	r3, #0
   141a4:	beq	14350 <__assert_fail@plt+0x3144>
   141a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   141ac:	cmp	r3, #0
   141b0:	bne	14920 <__assert_fail@plt+0x3714>
   141b4:	mov	r3, #1
   141b8:	strb	r3, [fp, #-41]	; 0xffffffd7
   141bc:	ldr	r3, [fp, #4]
   141c0:	cmp	r3, #2
   141c4:	bne	14274 <__assert_fail@plt+0x3068>
   141c8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   141cc:	eor	r3, r3, #1
   141d0:	uxtb	r3, r3
   141d4:	cmp	r3, #0
   141d8:	beq	14274 <__assert_fail@plt+0x3068>
   141dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   141e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141e4:	cmp	r2, r3
   141e8:	bcs	14200 <__assert_fail@plt+0x2ff4>
   141ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141f4:	add	r3, r2, r3
   141f8:	mov	r2, #39	; 0x27
   141fc:	strb	r2, [r3]
   14200:	ldr	r3, [fp, #-20]	; 0xffffffec
   14204:	add	r3, r3, #1
   14208:	str	r3, [fp, #-20]	; 0xffffffec
   1420c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14210:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14214:	cmp	r2, r3
   14218:	bcs	14230 <__assert_fail@plt+0x3024>
   1421c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14220:	ldr	r3, [fp, #-20]	; 0xffffffec
   14224:	add	r3, r2, r3
   14228:	mov	r2, #36	; 0x24
   1422c:	strb	r2, [r3]
   14230:	ldr	r3, [fp, #-20]	; 0xffffffec
   14234:	add	r3, r3, #1
   14238:	str	r3, [fp, #-20]	; 0xffffffec
   1423c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14240:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14244:	cmp	r2, r3
   14248:	bcs	14260 <__assert_fail@plt+0x3054>
   1424c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14250:	ldr	r3, [fp, #-20]	; 0xffffffec
   14254:	add	r3, r2, r3
   14258:	mov	r2, #39	; 0x27
   1425c:	strb	r2, [r3]
   14260:	ldr	r3, [fp, #-20]	; 0xffffffec
   14264:	add	r3, r3, #1
   14268:	str	r3, [fp, #-20]	; 0xffffffec
   1426c:	mov	r3, #1
   14270:	strb	r3, [fp, #-35]	; 0xffffffdd
   14274:	ldr	r2, [fp, #-20]	; 0xffffffec
   14278:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1427c:	cmp	r2, r3
   14280:	bcs	14298 <__assert_fail@plt+0x308c>
   14284:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1428c:	add	r3, r2, r3
   14290:	mov	r2, #92	; 0x5c
   14294:	strb	r2, [r3]
   14298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1429c:	add	r3, r3, #1
   142a0:	str	r3, [fp, #-20]	; 0xffffffec
   142a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   142a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142ac:	cmp	r2, r3
   142b0:	bcs	142d8 <__assert_fail@plt+0x30cc>
   142b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   142bc:	add	r3, r2, r3
   142c0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   142c4:	lsr	r2, r2, #6
   142c8:	uxtb	r2, r2
   142cc:	add	r2, r2, #48	; 0x30
   142d0:	uxtb	r2, r2
   142d4:	strb	r2, [r3]
   142d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   142dc:	add	r3, r3, #1
   142e0:	str	r3, [fp, #-20]	; 0xffffffec
   142e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   142e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142ec:	cmp	r2, r3
   142f0:	bcs	14320 <__assert_fail@plt+0x3114>
   142f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   142fc:	add	r3, r2, r3
   14300:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14304:	lsr	r2, r2, #3
   14308:	uxtb	r2, r2
   1430c:	and	r2, r2, #7
   14310:	uxtb	r2, r2
   14314:	add	r2, r2, #48	; 0x30
   14318:	uxtb	r2, r2
   1431c:	strb	r2, [r3]
   14320:	ldr	r3, [fp, #-20]	; 0xffffffec
   14324:	add	r3, r3, #1
   14328:	str	r3, [fp, #-20]	; 0xffffffec
   1432c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14330:	and	r3, r3, #7
   14334:	uxtb	r3, r3
   14338:	add	r3, r3, #48	; 0x30
   1433c:	strb	r3, [fp, #-38]	; 0xffffffda
   14340:	b	14394 <__assert_fail@plt+0x3188>
   14344:	andeq	r9, r1, r0, asr #25
   14348:	andeq	r9, r1, r8, asr #25
   1434c:	andeq	r9, r1, r4, asr #25
   14350:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14354:	cmp	r3, #0
   14358:	beq	14394 <__assert_fail@plt+0x3188>
   1435c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14360:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14364:	cmp	r2, r3
   14368:	bcs	14380 <__assert_fail@plt+0x3174>
   1436c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14370:	ldr	r3, [fp, #-20]	; 0xffffffec
   14374:	add	r3, r2, r3
   14378:	mov	r2, #92	; 0x5c
   1437c:	strb	r2, [r3]
   14380:	ldr	r3, [fp, #-20]	; 0xffffffec
   14384:	add	r3, r3, #1
   14388:	str	r3, [fp, #-20]	; 0xffffffec
   1438c:	mov	r3, #0
   14390:	strb	r3, [fp, #-40]	; 0xffffffd8
   14394:	ldr	r3, [fp, #-16]
   14398:	add	r2, r3, #1
   1439c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   143a0:	cmp	r2, r3
   143a4:	bcs	14484 <__assert_fail@plt+0x3278>
   143a8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   143ac:	cmp	r3, #0
   143b0:	beq	14430 <__assert_fail@plt+0x3224>
   143b4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   143b8:	eor	r3, r3, #1
   143bc:	uxtb	r3, r3
   143c0:	cmp	r3, #0
   143c4:	beq	14430 <__assert_fail@plt+0x3224>
   143c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   143cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143d0:	cmp	r2, r3
   143d4:	bcs	143ec <__assert_fail@plt+0x31e0>
   143d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   143e0:	add	r3, r2, r3
   143e4:	mov	r2, #39	; 0x27
   143e8:	strb	r2, [r3]
   143ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   143f0:	add	r3, r3, #1
   143f4:	str	r3, [fp, #-20]	; 0xffffffec
   143f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   143fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14400:	cmp	r2, r3
   14404:	bcs	1441c <__assert_fail@plt+0x3210>
   14408:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1440c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14410:	add	r3, r2, r3
   14414:	mov	r2, #39	; 0x27
   14418:	strb	r2, [r3]
   1441c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14420:	add	r3, r3, #1
   14424:	str	r3, [fp, #-20]	; 0xffffffec
   14428:	mov	r3, #0
   1442c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14430:	ldr	r2, [fp, #-20]	; 0xffffffec
   14434:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14438:	cmp	r2, r3
   1443c:	bcs	14454 <__assert_fail@plt+0x3248>
   14440:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14444:	ldr	r3, [fp, #-20]	; 0xffffffec
   14448:	add	r3, r2, r3
   1444c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14450:	strb	r2, [r3]
   14454:	ldr	r3, [fp, #-20]	; 0xffffffec
   14458:	add	r3, r3, #1
   1445c:	str	r3, [fp, #-20]	; 0xffffffec
   14460:	ldr	r3, [fp, #-16]
   14464:	add	r3, r3, #1
   14468:	str	r3, [fp, #-16]
   1446c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14470:	ldr	r3, [fp, #-16]
   14474:	add	r3, r2, r3
   14478:	ldrb	r3, [r3]
   1447c:	strb	r3, [fp, #-38]	; 0xffffffda
   14480:	b	14188 <__assert_fail@plt+0x2f7c>
   14484:	nop			; (mov r0, r0)
   14488:	b	14654 <__assert_fail@plt+0x3448>
   1448c:	nop			; (mov r0, r0)
   14490:	b	144b8 <__assert_fail@plt+0x32ac>
   14494:	nop			; (mov r0, r0)
   14498:	b	144b8 <__assert_fail@plt+0x32ac>
   1449c:	nop			; (mov r0, r0)
   144a0:	b	144b8 <__assert_fail@plt+0x32ac>
   144a4:	nop			; (mov r0, r0)
   144a8:	b	144b8 <__assert_fail@plt+0x32ac>
   144ac:	nop			; (mov r0, r0)
   144b0:	b	144b8 <__assert_fail@plt+0x32ac>
   144b4:	nop			; (mov r0, r0)
   144b8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   144bc:	eor	r3, r3, #1
   144c0:	uxtb	r3, r3
   144c4:	cmp	r3, #0
   144c8:	bne	144d8 <__assert_fail@plt+0x32cc>
   144cc:	ldr	r3, [fp, #4]
   144d0:	cmp	r3, #2
   144d4:	bne	144ec <__assert_fail@plt+0x32e0>
   144d8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   144dc:	eor	r3, r3, #1
   144e0:	uxtb	r3, r3
   144e4:	cmp	r3, #0
   144e8:	bne	1452c <__assert_fail@plt+0x3320>
   144ec:	ldr	r3, [fp, #12]
   144f0:	cmp	r3, #0
   144f4:	beq	1452c <__assert_fail@plt+0x3320>
   144f8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   144fc:	lsr	r3, r3, #5
   14500:	uxtb	r3, r3
   14504:	lsl	r3, r3, #2
   14508:	ldr	r2, [fp, #12]
   1450c:	add	r3, r2, r3
   14510:	ldr	r2, [r3]
   14514:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14518:	and	r3, r3, #31
   1451c:	lsr	r3, r2, r3
   14520:	and	r3, r3, #1
   14524:	cmp	r3, #0
   14528:	bne	14540 <__assert_fail@plt+0x3334>
   1452c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14530:	eor	r3, r3, #1
   14534:	uxtb	r3, r3
   14538:	cmp	r3, #0
   1453c:	bne	14650 <__assert_fail@plt+0x3444>
   14540:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14544:	cmp	r3, #0
   14548:	bne	14928 <__assert_fail@plt+0x371c>
   1454c:	mov	r3, #1
   14550:	strb	r3, [fp, #-41]	; 0xffffffd7
   14554:	ldr	r3, [fp, #4]
   14558:	cmp	r3, #2
   1455c:	bne	1460c <__assert_fail@plt+0x3400>
   14560:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14564:	eor	r3, r3, #1
   14568:	uxtb	r3, r3
   1456c:	cmp	r3, #0
   14570:	beq	1460c <__assert_fail@plt+0x3400>
   14574:	ldr	r2, [fp, #-20]	; 0xffffffec
   14578:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1457c:	cmp	r2, r3
   14580:	bcs	14598 <__assert_fail@plt+0x338c>
   14584:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1458c:	add	r3, r2, r3
   14590:	mov	r2, #39	; 0x27
   14594:	strb	r2, [r3]
   14598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1459c:	add	r3, r3, #1
   145a0:	str	r3, [fp, #-20]	; 0xffffffec
   145a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   145a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145ac:	cmp	r2, r3
   145b0:	bcs	145c8 <__assert_fail@plt+0x33bc>
   145b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145bc:	add	r3, r2, r3
   145c0:	mov	r2, #36	; 0x24
   145c4:	strb	r2, [r3]
   145c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145cc:	add	r3, r3, #1
   145d0:	str	r3, [fp, #-20]	; 0xffffffec
   145d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   145d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145dc:	cmp	r2, r3
   145e0:	bcs	145f8 <__assert_fail@plt+0x33ec>
   145e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145ec:	add	r3, r2, r3
   145f0:	mov	r2, #39	; 0x27
   145f4:	strb	r2, [r3]
   145f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145fc:	add	r3, r3, #1
   14600:	str	r3, [fp, #-20]	; 0xffffffec
   14604:	mov	r3, #1
   14608:	strb	r3, [fp, #-35]	; 0xffffffdd
   1460c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14610:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14614:	cmp	r2, r3
   14618:	bcs	14630 <__assert_fail@plt+0x3424>
   1461c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14620:	ldr	r3, [fp, #-20]	; 0xffffffec
   14624:	add	r3, r2, r3
   14628:	mov	r2, #92	; 0x5c
   1462c:	strb	r2, [r3]
   14630:	ldr	r3, [fp, #-20]	; 0xffffffec
   14634:	add	r3, r3, #1
   14638:	str	r3, [fp, #-20]	; 0xffffffec
   1463c:	b	14654 <__assert_fail@plt+0x3448>
   14640:	nop			; (mov r0, r0)
   14644:	b	14654 <__assert_fail@plt+0x3448>
   14648:	nop			; (mov r0, r0)
   1464c:	b	14654 <__assert_fail@plt+0x3448>
   14650:	nop			; (mov r0, r0)
   14654:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14658:	cmp	r3, #0
   1465c:	beq	146dc <__assert_fail@plt+0x34d0>
   14660:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14664:	eor	r3, r3, #1
   14668:	uxtb	r3, r3
   1466c:	cmp	r3, #0
   14670:	beq	146dc <__assert_fail@plt+0x34d0>
   14674:	ldr	r2, [fp, #-20]	; 0xffffffec
   14678:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1467c:	cmp	r2, r3
   14680:	bcs	14698 <__assert_fail@plt+0x348c>
   14684:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1468c:	add	r3, r2, r3
   14690:	mov	r2, #39	; 0x27
   14694:	strb	r2, [r3]
   14698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1469c:	add	r3, r3, #1
   146a0:	str	r3, [fp, #-20]	; 0xffffffec
   146a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   146a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146ac:	cmp	r2, r3
   146b0:	bcs	146c8 <__assert_fail@plt+0x34bc>
   146b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146bc:	add	r3, r2, r3
   146c0:	mov	r2, #39	; 0x27
   146c4:	strb	r2, [r3]
   146c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146cc:	add	r3, r3, #1
   146d0:	str	r3, [fp, #-20]	; 0xffffffec
   146d4:	mov	r3, #0
   146d8:	strb	r3, [fp, #-35]	; 0xffffffdd
   146dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   146e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146e4:	cmp	r2, r3
   146e8:	bcs	14700 <__assert_fail@plt+0x34f4>
   146ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f4:	add	r3, r2, r3
   146f8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   146fc:	strb	r2, [r3]
   14700:	ldr	r3, [fp, #-20]	; 0xffffffec
   14704:	add	r3, r3, #1
   14708:	str	r3, [fp, #-20]	; 0xffffffec
   1470c:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   14710:	eor	r3, r3, #1
   14714:	uxtb	r3, r3
   14718:	cmp	r3, #0
   1471c:	beq	14728 <__assert_fail@plt+0x351c>
   14720:	mov	r3, #0
   14724:	strb	r3, [fp, #-37]	; 0xffffffdb
   14728:	ldr	r3, [fp, #-16]
   1472c:	add	r3, r3, #1
   14730:	str	r3, [fp, #-16]
   14734:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14738:	cmn	r3, #1
   1473c:	bne	14764 <__assert_fail@plt+0x3558>
   14740:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14744:	ldr	r3, [fp, #-16]
   14748:	add	r3, r2, r3
   1474c:	ldrb	r3, [r3]
   14750:	cmp	r3, #0
   14754:	movne	r3, #1
   14758:	moveq	r3, #0
   1475c:	uxtb	r3, r3
   14760:	b	1477c <__assert_fail@plt+0x3570>
   14764:	ldr	r2, [fp, #-16]
   14768:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1476c:	cmp	r2, r3
   14770:	movne	r3, #1
   14774:	moveq	r3, #0
   14778:	uxtb	r3, r3
   1477c:	cmp	r3, #0
   14780:	bne	135a8 <__assert_fail@plt+0x239c>
   14784:	ldr	r3, [fp, #-20]	; 0xffffffec
   14788:	cmp	r3, #0
   1478c:	bne	147a8 <__assert_fail@plt+0x359c>
   14790:	ldr	r3, [fp, #4]
   14794:	cmp	r3, #2
   14798:	bne	147a8 <__assert_fail@plt+0x359c>
   1479c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147a0:	cmp	r3, #0
   147a4:	bne	14930 <__assert_fail@plt+0x3724>
   147a8:	ldr	r3, [fp, #4]
   147ac:	cmp	r3, #2
   147b0:	bne	14850 <__assert_fail@plt+0x3644>
   147b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   147b8:	eor	r3, r3, #1
   147bc:	uxtb	r3, r3
   147c0:	cmp	r3, #0
   147c4:	beq	14850 <__assert_fail@plt+0x3644>
   147c8:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   147cc:	cmp	r3, #0
   147d0:	beq	14850 <__assert_fail@plt+0x3644>
   147d4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   147d8:	cmp	r3, #0
   147dc:	beq	14824 <__assert_fail@plt+0x3618>
   147e0:	ldr	r3, [fp, #20]
   147e4:	str	r3, [sp, #16]
   147e8:	ldr	r3, [fp, #16]
   147ec:	str	r3, [sp, #12]
   147f0:	ldr	r3, [fp, #12]
   147f4:	str	r3, [sp, #8]
   147f8:	ldr	r3, [fp, #8]
   147fc:	str	r3, [sp, #4]
   14800:	mov	r3, #5
   14804:	str	r3, [sp]
   14808:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1480c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14810:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14814:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14818:	bl	132f8 <__assert_fail@plt+0x20ec>
   1481c:	mov	r3, r0
   14820:	b	14998 <__assert_fail@plt+0x378c>
   14824:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14828:	cmp	r3, #0
   1482c:	bne	14850 <__assert_fail@plt+0x3644>
   14830:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14834:	cmp	r3, #0
   14838:	beq	14850 <__assert_fail@plt+0x3644>
   1483c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14840:	str	r3, [fp, #-92]	; 0xffffffa4
   14844:	mov	r3, #0
   14848:	str	r3, [fp, #-20]	; 0xffffffec
   1484c:	b	13384 <__assert_fail@plt+0x2178>
   14850:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14854:	cmp	r3, #0
   14858:	beq	148c4 <__assert_fail@plt+0x36b8>
   1485c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14860:	eor	r3, r3, #1
   14864:	uxtb	r3, r3
   14868:	cmp	r3, #0
   1486c:	beq	148c4 <__assert_fail@plt+0x36b8>
   14870:	b	148b4 <__assert_fail@plt+0x36a8>
   14874:	ldr	r2, [fp, #-20]	; 0xffffffec
   14878:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1487c:	cmp	r2, r3
   14880:	bcs	1489c <__assert_fail@plt+0x3690>
   14884:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1488c:	add	r3, r2, r3
   14890:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14894:	ldrb	r2, [r2]
   14898:	strb	r2, [r3]
   1489c:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a0:	add	r3, r3, #1
   148a4:	str	r3, [fp, #-20]	; 0xffffffec
   148a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148ac:	add	r3, r3, #1
   148b0:	str	r3, [fp, #-28]	; 0xffffffe4
   148b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   148b8:	ldrb	r3, [r3]
   148bc:	cmp	r3, #0
   148c0:	bne	14874 <__assert_fail@plt+0x3668>
   148c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   148c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   148cc:	cmp	r2, r3
   148d0:	bcs	148e8 <__assert_fail@plt+0x36dc>
   148d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148dc:	add	r3, r2, r3
   148e0:	mov	r2, #0
   148e4:	strb	r2, [r3]
   148e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148ec:	b	14998 <__assert_fail@plt+0x378c>
   148f0:	nop			; (mov r0, r0)
   148f4:	b	14934 <__assert_fail@plt+0x3728>
   148f8:	nop			; (mov r0, r0)
   148fc:	b	14934 <__assert_fail@plt+0x3728>
   14900:	nop			; (mov r0, r0)
   14904:	b	14934 <__assert_fail@plt+0x3728>
   14908:	nop			; (mov r0, r0)
   1490c:	b	14934 <__assert_fail@plt+0x3728>
   14910:	nop			; (mov r0, r0)
   14914:	b	14934 <__assert_fail@plt+0x3728>
   14918:	nop			; (mov r0, r0)
   1491c:	b	14934 <__assert_fail@plt+0x3728>
   14920:	nop			; (mov r0, r0)
   14924:	b	14934 <__assert_fail@plt+0x3728>
   14928:	nop			; (mov r0, r0)
   1492c:	b	14934 <__assert_fail@plt+0x3728>
   14930:	nop			; (mov r0, r0)
   14934:	ldr	r3, [fp, #4]
   14938:	cmp	r3, #2
   1493c:	bne	14954 <__assert_fail@plt+0x3748>
   14940:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14944:	cmp	r3, #0
   14948:	beq	14954 <__assert_fail@plt+0x3748>
   1494c:	mov	r3, #4
   14950:	str	r3, [fp, #4]
   14954:	ldr	r3, [fp, #8]
   14958:	bic	r3, r3, #2
   1495c:	ldr	r2, [fp, #20]
   14960:	str	r2, [sp, #16]
   14964:	ldr	r2, [fp, #16]
   14968:	str	r2, [sp, #12]
   1496c:	mov	r2, #0
   14970:	str	r2, [sp, #8]
   14974:	str	r3, [sp, #4]
   14978:	ldr	r3, [fp, #4]
   1497c:	str	r3, [sp]
   14980:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14984:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14988:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1498c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14990:	bl	132f8 <__assert_fail@plt+0x20ec>
   14994:	mov	r3, r0
   14998:	mov	r0, r3
   1499c:	sub	sp, fp, #8
   149a0:	pop	{r4, fp, pc}
   149a4:	push	{fp, lr}
   149a8:	add	fp, sp, #4
   149ac:	sub	sp, sp, #56	; 0x38
   149b0:	str	r0, [fp, #-24]	; 0xffffffe8
   149b4:	str	r1, [fp, #-28]	; 0xffffffe4
   149b8:	str	r2, [fp, #-32]	; 0xffffffe0
   149bc:	str	r3, [fp, #-36]	; 0xffffffdc
   149c0:	ldr	r3, [fp, #4]
   149c4:	cmp	r3, #0
   149c8:	beq	149d4 <__assert_fail@plt+0x37c8>
   149cc:	ldr	r3, [fp, #4]
   149d0:	b	149d8 <__assert_fail@plt+0x37cc>
   149d4:	ldr	r3, [pc, #132]	; 14a60 <__assert_fail@plt+0x3854>
   149d8:	str	r3, [fp, #-8]
   149dc:	bl	11110 <__errno_location@plt>
   149e0:	mov	r3, r0
   149e4:	ldr	r3, [r3]
   149e8:	str	r3, [fp, #-12]
   149ec:	ldr	r3, [fp, #-8]
   149f0:	ldr	r3, [r3]
   149f4:	ldr	r2, [fp, #-8]
   149f8:	ldr	r2, [r2, #4]
   149fc:	ldr	r1, [fp, #-8]
   14a00:	add	r1, r1, #8
   14a04:	ldr	r0, [fp, #-8]
   14a08:	ldr	r0, [r0, #40]	; 0x28
   14a0c:	ldr	ip, [fp, #-8]
   14a10:	ldr	ip, [ip, #44]	; 0x2c
   14a14:	str	ip, [sp, #16]
   14a18:	str	r0, [sp, #12]
   14a1c:	str	r1, [sp, #8]
   14a20:	str	r2, [sp, #4]
   14a24:	str	r3, [sp]
   14a28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a30:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14a34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a38:	bl	132f8 <__assert_fail@plt+0x20ec>
   14a3c:	str	r0, [fp, #-16]
   14a40:	bl	11110 <__errno_location@plt>
   14a44:	mov	r2, r0
   14a48:	ldr	r3, [fp, #-12]
   14a4c:	str	r3, [r2]
   14a50:	ldr	r3, [fp, #-16]
   14a54:	mov	r0, r3
   14a58:	sub	sp, fp, #4
   14a5c:	pop	{fp, pc}
   14a60:	andeq	fp, r2, r4, lsl #4
   14a64:	push	{fp, lr}
   14a68:	add	fp, sp, #4
   14a6c:	sub	sp, sp, #16
   14a70:	str	r0, [fp, #-8]
   14a74:	str	r1, [fp, #-12]
   14a78:	str	r2, [fp, #-16]
   14a7c:	ldr	r3, [fp, #-16]
   14a80:	mov	r2, #0
   14a84:	ldr	r1, [fp, #-12]
   14a88:	ldr	r0, [fp, #-8]
   14a8c:	bl	14aa0 <__assert_fail@plt+0x3894>
   14a90:	mov	r3, r0
   14a94:	mov	r0, r3
   14a98:	sub	sp, fp, #4
   14a9c:	pop	{fp, pc}
   14aa0:	push	{fp, lr}
   14aa4:	add	fp, sp, #4
   14aa8:	sub	sp, sp, #64	; 0x40
   14aac:	str	r0, [fp, #-32]	; 0xffffffe0
   14ab0:	str	r1, [fp, #-36]	; 0xffffffdc
   14ab4:	str	r2, [fp, #-40]	; 0xffffffd8
   14ab8:	str	r3, [fp, #-44]	; 0xffffffd4
   14abc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ac0:	cmp	r3, #0
   14ac4:	beq	14ad0 <__assert_fail@plt+0x38c4>
   14ac8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14acc:	b	14ad4 <__assert_fail@plt+0x38c8>
   14ad0:	ldr	r3, [pc, #292]	; 14bfc <__assert_fail@plt+0x39f0>
   14ad4:	str	r3, [fp, #-8]
   14ad8:	bl	11110 <__errno_location@plt>
   14adc:	mov	r3, r0
   14ae0:	ldr	r3, [r3]
   14ae4:	str	r3, [fp, #-12]
   14ae8:	ldr	r3, [fp, #-8]
   14aec:	ldr	r3, [r3, #4]
   14af0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14af4:	cmp	r2, #0
   14af8:	moveq	r2, #1
   14afc:	movne	r2, #0
   14b00:	uxtb	r2, r2
   14b04:	orr	r3, r3, r2
   14b08:	str	r3, [fp, #-16]
   14b0c:	ldr	r3, [fp, #-8]
   14b10:	ldr	r3, [r3]
   14b14:	ldr	r2, [fp, #-8]
   14b18:	add	r2, r2, #8
   14b1c:	ldr	r1, [fp, #-8]
   14b20:	ldr	r1, [r1, #40]	; 0x28
   14b24:	ldr	r0, [fp, #-8]
   14b28:	ldr	r0, [r0, #44]	; 0x2c
   14b2c:	str	r0, [sp, #16]
   14b30:	str	r1, [sp, #12]
   14b34:	str	r2, [sp, #8]
   14b38:	ldr	r2, [fp, #-16]
   14b3c:	str	r2, [sp, #4]
   14b40:	str	r3, [sp]
   14b44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14b48:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14b4c:	mov	r1, #0
   14b50:	mov	r0, #0
   14b54:	bl	132f8 <__assert_fail@plt+0x20ec>
   14b58:	mov	r3, r0
   14b5c:	add	r3, r3, #1
   14b60:	str	r3, [fp, #-20]	; 0xffffffec
   14b64:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b68:	bl	162b8 <__assert_fail@plt+0x50ac>
   14b6c:	mov	r3, r0
   14b70:	str	r3, [fp, #-24]	; 0xffffffe8
   14b74:	ldr	r3, [fp, #-8]
   14b78:	ldr	r3, [r3]
   14b7c:	ldr	r2, [fp, #-8]
   14b80:	add	r2, r2, #8
   14b84:	ldr	r1, [fp, #-8]
   14b88:	ldr	r1, [r1, #40]	; 0x28
   14b8c:	ldr	r0, [fp, #-8]
   14b90:	ldr	r0, [r0, #44]	; 0x2c
   14b94:	str	r0, [sp, #16]
   14b98:	str	r1, [sp, #12]
   14b9c:	str	r2, [sp, #8]
   14ba0:	ldr	r2, [fp, #-16]
   14ba4:	str	r2, [sp, #4]
   14ba8:	str	r3, [sp]
   14bac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14bb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14bb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14bbc:	bl	132f8 <__assert_fail@plt+0x20ec>
   14bc0:	bl	11110 <__errno_location@plt>
   14bc4:	mov	r2, r0
   14bc8:	ldr	r3, [fp, #-12]
   14bcc:	str	r3, [r2]
   14bd0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14bd4:	cmp	r3, #0
   14bd8:	beq	14bec <__assert_fail@plt+0x39e0>
   14bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14be0:	sub	r2, r3, #1
   14be4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14be8:	str	r2, [r3]
   14bec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bf0:	mov	r0, r3
   14bf4:	sub	sp, fp, #4
   14bf8:	pop	{fp, pc}
   14bfc:	andeq	fp, r2, r4, lsl #4
   14c00:	push	{fp, lr}
   14c04:	add	fp, sp, #4
   14c08:	sub	sp, sp, #8
   14c0c:	ldr	r3, [pc, #196]	; 14cd8 <__assert_fail@plt+0x3acc>
   14c10:	ldr	r3, [r3]
   14c14:	str	r3, [fp, #-12]
   14c18:	mov	r3, #1
   14c1c:	str	r3, [fp, #-8]
   14c20:	b	14c4c <__assert_fail@plt+0x3a40>
   14c24:	ldr	r3, [fp, #-8]
   14c28:	lsl	r3, r3, #3
   14c2c:	ldr	r2, [fp, #-12]
   14c30:	add	r3, r2, r3
   14c34:	ldr	r3, [r3, #4]
   14c38:	mov	r0, r3
   14c3c:	bl	12ccc <__assert_fail@plt+0x1ac0>
   14c40:	ldr	r3, [fp, #-8]
   14c44:	add	r3, r3, #1
   14c48:	str	r3, [fp, #-8]
   14c4c:	ldr	r3, [pc, #136]	; 14cdc <__assert_fail@plt+0x3ad0>
   14c50:	ldr	r3, [r3]
   14c54:	ldr	r2, [fp, #-8]
   14c58:	cmp	r2, r3
   14c5c:	blt	14c24 <__assert_fail@plt+0x3a18>
   14c60:	ldr	r3, [fp, #-12]
   14c64:	ldr	r3, [r3, #4]
   14c68:	ldr	r2, [pc, #112]	; 14ce0 <__assert_fail@plt+0x3ad4>
   14c6c:	cmp	r3, r2
   14c70:	beq	14c9c <__assert_fail@plt+0x3a90>
   14c74:	ldr	r3, [fp, #-12]
   14c78:	ldr	r3, [r3, #4]
   14c7c:	mov	r0, r3
   14c80:	bl	12ccc <__assert_fail@plt+0x1ac0>
   14c84:	ldr	r3, [pc, #88]	; 14ce4 <__assert_fail@plt+0x3ad8>
   14c88:	mov	r2, #256	; 0x100
   14c8c:	str	r2, [r3]
   14c90:	ldr	r3, [pc, #76]	; 14ce4 <__assert_fail@plt+0x3ad8>
   14c94:	ldr	r2, [pc, #68]	; 14ce0 <__assert_fail@plt+0x3ad4>
   14c98:	str	r2, [r3, #4]
   14c9c:	ldr	r3, [fp, #-12]
   14ca0:	ldr	r2, [pc, #60]	; 14ce4 <__assert_fail@plt+0x3ad8>
   14ca4:	cmp	r3, r2
   14ca8:	beq	14cc0 <__assert_fail@plt+0x3ab4>
   14cac:	ldr	r0, [fp, #-12]
   14cb0:	bl	12ccc <__assert_fail@plt+0x1ac0>
   14cb4:	ldr	r3, [pc, #28]	; 14cd8 <__assert_fail@plt+0x3acc>
   14cb8:	ldr	r2, [pc, #36]	; 14ce4 <__assert_fail@plt+0x3ad8>
   14cbc:	str	r2, [r3]
   14cc0:	ldr	r3, [pc, #20]	; 14cdc <__assert_fail@plt+0x3ad0>
   14cc4:	mov	r2, #1
   14cc8:	str	r2, [r3]
   14ccc:	nop			; (mov r0, r0)
   14cd0:	sub	sp, fp, #4
   14cd4:	pop	{fp, pc}
   14cd8:	andeq	fp, r2, r4, lsr r1
   14cdc:	andeq	fp, r2, r8, lsr #2
   14ce0:	andeq	fp, r2, r4, lsr r2
   14ce4:	andeq	fp, r2, ip, lsr #2
   14ce8:	push	{r4, fp, lr}
   14cec:	add	fp, sp, #8
   14cf0:	sub	sp, sp, #84	; 0x54
   14cf4:	str	r0, [fp, #-56]	; 0xffffffc8
   14cf8:	str	r1, [fp, #-60]	; 0xffffffc4
   14cfc:	str	r2, [fp, #-64]	; 0xffffffc0
   14d00:	str	r3, [fp, #-68]	; 0xffffffbc
   14d04:	bl	11110 <__errno_location@plt>
   14d08:	mov	r3, r0
   14d0c:	ldr	r3, [r3]
   14d10:	str	r3, [fp, #-24]	; 0xffffffe8
   14d14:	ldr	r3, [pc, #640]	; 14f9c <__assert_fail@plt+0x3d90>
   14d18:	ldr	r3, [r3]
   14d1c:	str	r3, [fp, #-16]
   14d20:	mvn	r3, #-2147483648	; 0x80000000
   14d24:	str	r3, [fp, #-28]	; 0xffffffe4
   14d28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14d2c:	cmp	r3, #0
   14d30:	blt	14d44 <__assert_fail@plt+0x3b38>
   14d34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d3c:	cmp	r2, r3
   14d40:	blt	14d48 <__assert_fail@plt+0x3b3c>
   14d44:	bl	111dc <abort@plt>
   14d48:	ldr	r3, [pc, #592]	; 14fa0 <__assert_fail@plt+0x3d94>
   14d4c:	ldr	r2, [r3]
   14d50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14d54:	cmp	r2, r3
   14d58:	bgt	14e2c <__assert_fail@plt+0x3c20>
   14d5c:	ldr	r3, [fp, #-16]
   14d60:	ldr	r2, [pc, #572]	; 14fa4 <__assert_fail@plt+0x3d98>
   14d64:	cmp	r3, r2
   14d68:	moveq	r3, #1
   14d6c:	movne	r3, #0
   14d70:	strb	r3, [fp, #-29]	; 0xffffffe3
   14d74:	ldr	r3, [pc, #548]	; 14fa0 <__assert_fail@plt+0x3d94>
   14d78:	ldr	r3, [r3]
   14d7c:	str	r3, [fp, #-48]	; 0xffffffd0
   14d80:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14d84:	cmp	r3, #0
   14d88:	beq	14d94 <__assert_fail@plt+0x3b88>
   14d8c:	mov	r0, #0
   14d90:	b	14d98 <__assert_fail@plt+0x3b8c>
   14d94:	ldr	r0, [fp, #-16]
   14d98:	ldr	r3, [pc, #512]	; 14fa0 <__assert_fail@plt+0x3d94>
   14d9c:	ldr	r3, [r3]
   14da0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14da4:	sub	r3, r2, r3
   14da8:	add	r2, r3, #1
   14dac:	sub	r1, fp, #48	; 0x30
   14db0:	mov	r3, #8
   14db4:	str	r3, [sp]
   14db8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14dbc:	bl	165d8 <__assert_fail@plt+0x53cc>
   14dc0:	str	r0, [fp, #-16]
   14dc4:	ldr	r2, [pc, #464]	; 14f9c <__assert_fail@plt+0x3d90>
   14dc8:	ldr	r3, [fp, #-16]
   14dcc:	str	r3, [r2]
   14dd0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14dd4:	cmp	r3, #0
   14dd8:	beq	14dec <__assert_fail@plt+0x3be0>
   14ddc:	ldr	r3, [fp, #-16]
   14de0:	ldr	r2, [pc, #444]	; 14fa4 <__assert_fail@plt+0x3d98>
   14de4:	ldm	r2, {r0, r1}
   14de8:	stm	r3, {r0, r1}
   14dec:	ldr	r3, [pc, #428]	; 14fa0 <__assert_fail@plt+0x3d94>
   14df0:	ldr	r3, [r3]
   14df4:	lsl	r3, r3, #3
   14df8:	ldr	r2, [fp, #-16]
   14dfc:	add	r0, r2, r3
   14e00:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14e04:	ldr	r3, [pc, #404]	; 14fa0 <__assert_fail@plt+0x3d94>
   14e08:	ldr	r3, [r3]
   14e0c:	sub	r3, r2, r3
   14e10:	lsl	r3, r3, #3
   14e14:	mov	r2, r3
   14e18:	mov	r1, #0
   14e1c:	bl	11140 <memset@plt>
   14e20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e24:	ldr	r2, [pc, #372]	; 14fa0 <__assert_fail@plt+0x3d94>
   14e28:	str	r3, [r2]
   14e2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e30:	lsl	r3, r3, #3
   14e34:	ldr	r2, [fp, #-16]
   14e38:	add	r3, r2, r3
   14e3c:	ldr	r3, [r3]
   14e40:	str	r3, [fp, #-36]	; 0xffffffdc
   14e44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e48:	lsl	r3, r3, #3
   14e4c:	ldr	r2, [fp, #-16]
   14e50:	add	r3, r2, r3
   14e54:	ldr	r3, [r3, #4]
   14e58:	str	r3, [fp, #-20]	; 0xffffffec
   14e5c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14e60:	ldr	r3, [r3, #4]
   14e64:	orr	r3, r3, #1
   14e68:	str	r3, [fp, #-40]	; 0xffffffd8
   14e6c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14e70:	ldr	r3, [r3]
   14e74:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14e78:	add	r2, r2, #8
   14e7c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14e80:	ldr	r1, [r1, #40]	; 0x28
   14e84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14e88:	ldr	r0, [r0, #44]	; 0x2c
   14e8c:	str	r0, [sp, #16]
   14e90:	str	r1, [sp, #12]
   14e94:	str	r2, [sp, #8]
   14e98:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14e9c:	str	r2, [sp, #4]
   14ea0:	str	r3, [sp]
   14ea4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14ea8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14eac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14eb0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14eb4:	bl	132f8 <__assert_fail@plt+0x20ec>
   14eb8:	str	r0, [fp, #-44]	; 0xffffffd4
   14ebc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14ec0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ec4:	cmp	r2, r3
   14ec8:	bhi	14f7c <__assert_fail@plt+0x3d70>
   14ecc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ed0:	lsl	r3, r3, #3
   14ed4:	ldr	r2, [fp, #-16]
   14ed8:	add	r3, r2, r3
   14edc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14ee0:	add	r2, r2, #1
   14ee4:	str	r2, [fp, #-36]	; 0xffffffdc
   14ee8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14eec:	str	r2, [r3]
   14ef0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ef4:	ldr	r2, [pc, #172]	; 14fa8 <__assert_fail@plt+0x3d9c>
   14ef8:	cmp	r3, r2
   14efc:	beq	14f08 <__assert_fail@plt+0x3cfc>
   14f00:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f04:	bl	12ccc <__assert_fail@plt+0x1ac0>
   14f08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14f0c:	lsl	r3, r3, #3
   14f10:	ldr	r2, [fp, #-16]
   14f14:	add	r4, r2, r3
   14f18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14f1c:	bl	162b8 <__assert_fail@plt+0x50ac>
   14f20:	mov	r3, r0
   14f24:	str	r3, [fp, #-20]	; 0xffffffec
   14f28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f2c:	str	r3, [r4, #4]
   14f30:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14f34:	ldr	r3, [r3]
   14f38:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14f3c:	add	r2, r2, #8
   14f40:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14f44:	ldr	r1, [r1, #40]	; 0x28
   14f48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f4c:	ldr	r0, [r0, #44]	; 0x2c
   14f50:	str	r0, [sp, #16]
   14f54:	str	r1, [sp, #12]
   14f58:	str	r2, [sp, #8]
   14f5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14f60:	str	r2, [sp, #4]
   14f64:	str	r3, [sp]
   14f68:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14f6c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14f70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14f74:	ldr	r0, [fp, #-20]	; 0xffffffec
   14f78:	bl	132f8 <__assert_fail@plt+0x20ec>
   14f7c:	bl	11110 <__errno_location@plt>
   14f80:	mov	r2, r0
   14f84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f88:	str	r3, [r2]
   14f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f90:	mov	r0, r3
   14f94:	sub	sp, fp, #8
   14f98:	pop	{r4, fp, pc}
   14f9c:	andeq	fp, r2, r4, lsr r1
   14fa0:	andeq	fp, r2, r8, lsr #2
   14fa4:	andeq	fp, r2, ip, lsr #2
   14fa8:	andeq	fp, r2, r4, lsr r2
   14fac:	push	{fp, lr}
   14fb0:	add	fp, sp, #4
   14fb4:	sub	sp, sp, #8
   14fb8:	str	r0, [fp, #-8]
   14fbc:	str	r1, [fp, #-12]
   14fc0:	ldr	r3, [pc, #28]	; 14fe4 <__assert_fail@plt+0x3dd8>
   14fc4:	mvn	r2, #0
   14fc8:	ldr	r1, [fp, #-12]
   14fcc:	ldr	r0, [fp, #-8]
   14fd0:	bl	14ce8 <__assert_fail@plt+0x3adc>
   14fd4:	mov	r3, r0
   14fd8:	mov	r0, r3
   14fdc:	sub	sp, fp, #4
   14fe0:	pop	{fp, pc}
   14fe4:	andeq	fp, r2, r4, lsl #4
   14fe8:	push	{fp, lr}
   14fec:	add	fp, sp, #4
   14ff0:	sub	sp, sp, #16
   14ff4:	str	r0, [fp, #-8]
   14ff8:	str	r1, [fp, #-12]
   14ffc:	str	r2, [fp, #-16]
   15000:	ldr	r3, [pc, #28]	; 15024 <__assert_fail@plt+0x3e18>
   15004:	ldr	r2, [fp, #-16]
   15008:	ldr	r1, [fp, #-12]
   1500c:	ldr	r0, [fp, #-8]
   15010:	bl	14ce8 <__assert_fail@plt+0x3adc>
   15014:	mov	r3, r0
   15018:	mov	r0, r3
   1501c:	sub	sp, fp, #4
   15020:	pop	{fp, pc}
   15024:	andeq	fp, r2, r4, lsl #4
   15028:	push	{fp, lr}
   1502c:	add	fp, sp, #4
   15030:	sub	sp, sp, #8
   15034:	str	r0, [fp, #-8]
   15038:	ldr	r1, [fp, #-8]
   1503c:	mov	r0, #0
   15040:	bl	14fac <__assert_fail@plt+0x3da0>
   15044:	mov	r3, r0
   15048:	mov	r0, r3
   1504c:	sub	sp, fp, #4
   15050:	pop	{fp, pc}
   15054:	push	{fp, lr}
   15058:	add	fp, sp, #4
   1505c:	sub	sp, sp, #8
   15060:	str	r0, [fp, #-8]
   15064:	str	r1, [fp, #-12]
   15068:	ldr	r2, [fp, #-12]
   1506c:	ldr	r1, [fp, #-8]
   15070:	mov	r0, #0
   15074:	bl	14fe8 <__assert_fail@plt+0x3ddc>
   15078:	mov	r3, r0
   1507c:	mov	r0, r3
   15080:	sub	sp, fp, #4
   15084:	pop	{fp, pc}
   15088:	push	{fp, lr}
   1508c:	add	fp, sp, #4
   15090:	sub	sp, sp, #64	; 0x40
   15094:	str	r0, [fp, #-56]	; 0xffffffc8
   15098:	str	r1, [fp, #-60]	; 0xffffffc4
   1509c:	str	r2, [fp, #-64]	; 0xffffffc0
   150a0:	sub	r3, fp, #52	; 0x34
   150a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   150a8:	mov	r0, r3
   150ac:	bl	13194 <__assert_fail@plt+0x1f88>
   150b0:	sub	r3, fp, #52	; 0x34
   150b4:	mvn	r2, #0
   150b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   150bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   150c0:	bl	14ce8 <__assert_fail@plt+0x3adc>
   150c4:	mov	r3, r0
   150c8:	mov	r0, r3
   150cc:	sub	sp, fp, #4
   150d0:	pop	{fp, pc}
   150d4:	push	{fp, lr}
   150d8:	add	fp, sp, #4
   150dc:	sub	sp, sp, #64	; 0x40
   150e0:	str	r0, [fp, #-56]	; 0xffffffc8
   150e4:	str	r1, [fp, #-60]	; 0xffffffc4
   150e8:	str	r2, [fp, #-64]	; 0xffffffc0
   150ec:	str	r3, [fp, #-68]	; 0xffffffbc
   150f0:	sub	r3, fp, #52	; 0x34
   150f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   150f8:	mov	r0, r3
   150fc:	bl	13194 <__assert_fail@plt+0x1f88>
   15100:	sub	r3, fp, #52	; 0x34
   15104:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15108:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1510c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15110:	bl	14ce8 <__assert_fail@plt+0x3adc>
   15114:	mov	r3, r0
   15118:	mov	r0, r3
   1511c:	sub	sp, fp, #4
   15120:	pop	{fp, pc}
   15124:	push	{fp, lr}
   15128:	add	fp, sp, #4
   1512c:	sub	sp, sp, #8
   15130:	str	r0, [fp, #-8]
   15134:	str	r1, [fp, #-12]
   15138:	ldr	r2, [fp, #-12]
   1513c:	ldr	r1, [fp, #-8]
   15140:	mov	r0, #0
   15144:	bl	15088 <__assert_fail@plt+0x3e7c>
   15148:	mov	r3, r0
   1514c:	mov	r0, r3
   15150:	sub	sp, fp, #4
   15154:	pop	{fp, pc}
   15158:	push	{fp, lr}
   1515c:	add	fp, sp, #4
   15160:	sub	sp, sp, #16
   15164:	str	r0, [fp, #-8]
   15168:	str	r1, [fp, #-12]
   1516c:	str	r2, [fp, #-16]
   15170:	ldr	r3, [fp, #-16]
   15174:	ldr	r2, [fp, #-12]
   15178:	ldr	r1, [fp, #-8]
   1517c:	mov	r0, #0
   15180:	bl	150d4 <__assert_fail@plt+0x3ec8>
   15184:	mov	r3, r0
   15188:	mov	r0, r3
   1518c:	sub	sp, fp, #4
   15190:	pop	{fp, pc}
   15194:	push	{fp, lr}
   15198:	add	fp, sp, #4
   1519c:	sub	sp, sp, #64	; 0x40
   151a0:	str	r0, [fp, #-56]	; 0xffffffc8
   151a4:	str	r1, [fp, #-60]	; 0xffffffc4
   151a8:	mov	r3, r2
   151ac:	strb	r3, [fp, #-61]	; 0xffffffc3
   151b0:	ldr	r3, [pc, #84]	; 1520c <__assert_fail@plt+0x4000>
   151b4:	sub	ip, fp, #52	; 0x34
   151b8:	mov	lr, r3
   151bc:	ldm	lr!, {r0, r1, r2, r3}
   151c0:	stmia	ip!, {r0, r1, r2, r3}
   151c4:	ldm	lr!, {r0, r1, r2, r3}
   151c8:	stmia	ip!, {r0, r1, r2, r3}
   151cc:	ldm	lr, {r0, r1, r2, r3}
   151d0:	stm	ip, {r0, r1, r2, r3}
   151d4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   151d8:	sub	r3, fp, #52	; 0x34
   151dc:	mov	r2, #1
   151e0:	mov	r0, r3
   151e4:	bl	13000 <__assert_fail@plt+0x1df4>
   151e8:	sub	r3, fp, #52	; 0x34
   151ec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   151f0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   151f4:	mov	r0, #0
   151f8:	bl	14ce8 <__assert_fail@plt+0x3adc>
   151fc:	mov	r3, r0
   15200:	mov	r0, r3
   15204:	sub	sp, fp, #4
   15208:	pop	{fp, pc}
   1520c:	andeq	fp, r2, r4, lsl #4
   15210:	push	{fp, lr}
   15214:	add	fp, sp, #4
   15218:	sub	sp, sp, #8
   1521c:	str	r0, [fp, #-8]
   15220:	mov	r3, r1
   15224:	strb	r3, [fp, #-9]
   15228:	ldrb	r3, [fp, #-9]
   1522c:	mov	r2, r3
   15230:	mvn	r1, #0
   15234:	ldr	r0, [fp, #-8]
   15238:	bl	15194 <__assert_fail@plt+0x3f88>
   1523c:	mov	r3, r0
   15240:	mov	r0, r3
   15244:	sub	sp, fp, #4
   15248:	pop	{fp, pc}
   1524c:	push	{fp, lr}
   15250:	add	fp, sp, #4
   15254:	sub	sp, sp, #8
   15258:	str	r0, [fp, #-8]
   1525c:	mov	r1, #58	; 0x3a
   15260:	ldr	r0, [fp, #-8]
   15264:	bl	15210 <__assert_fail@plt+0x4004>
   15268:	mov	r3, r0
   1526c:	mov	r0, r3
   15270:	sub	sp, fp, #4
   15274:	pop	{fp, pc}
   15278:	push	{fp, lr}
   1527c:	add	fp, sp, #4
   15280:	sub	sp, sp, #8
   15284:	str	r0, [fp, #-8]
   15288:	str	r1, [fp, #-12]
   1528c:	mov	r2, #58	; 0x3a
   15290:	ldr	r1, [fp, #-12]
   15294:	ldr	r0, [fp, #-8]
   15298:	bl	15194 <__assert_fail@plt+0x3f88>
   1529c:	mov	r3, r0
   152a0:	mov	r0, r3
   152a4:	sub	sp, fp, #4
   152a8:	pop	{fp, pc}
   152ac:	push	{fp, lr}
   152b0:	add	fp, sp, #4
   152b4:	sub	sp, sp, #112	; 0x70
   152b8:	str	r0, [fp, #-56]	; 0xffffffc8
   152bc:	str	r1, [fp, #-60]	; 0xffffffc4
   152c0:	str	r2, [fp, #-64]	; 0xffffffc0
   152c4:	sub	r3, fp, #116	; 0x74
   152c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   152cc:	mov	r0, r3
   152d0:	bl	13194 <__assert_fail@plt+0x1f88>
   152d4:	sub	ip, fp, #52	; 0x34
   152d8:	sub	lr, fp, #116	; 0x74
   152dc:	ldm	lr!, {r0, r1, r2, r3}
   152e0:	stmia	ip!, {r0, r1, r2, r3}
   152e4:	ldm	lr!, {r0, r1, r2, r3}
   152e8:	stmia	ip!, {r0, r1, r2, r3}
   152ec:	ldm	lr, {r0, r1, r2, r3}
   152f0:	stm	ip, {r0, r1, r2, r3}
   152f4:	sub	r3, fp, #52	; 0x34
   152f8:	mov	r2, #1
   152fc:	mov	r1, #58	; 0x3a
   15300:	mov	r0, r3
   15304:	bl	13000 <__assert_fail@plt+0x1df4>
   15308:	sub	r3, fp, #52	; 0x34
   1530c:	mvn	r2, #0
   15310:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15314:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15318:	bl	14ce8 <__assert_fail@plt+0x3adc>
   1531c:	mov	r3, r0
   15320:	mov	r0, r3
   15324:	sub	sp, fp, #4
   15328:	pop	{fp, pc}
   1532c:	push	{fp, lr}
   15330:	add	fp, sp, #4
   15334:	sub	sp, sp, #24
   15338:	str	r0, [fp, #-8]
   1533c:	str	r1, [fp, #-12]
   15340:	str	r2, [fp, #-16]
   15344:	str	r3, [fp, #-20]	; 0xffffffec
   15348:	mvn	r3, #0
   1534c:	str	r3, [sp]
   15350:	ldr	r3, [fp, #-20]	; 0xffffffec
   15354:	ldr	r2, [fp, #-16]
   15358:	ldr	r1, [fp, #-12]
   1535c:	ldr	r0, [fp, #-8]
   15360:	bl	15374 <__assert_fail@plt+0x4168>
   15364:	mov	r3, r0
   15368:	mov	r0, r3
   1536c:	sub	sp, fp, #4
   15370:	pop	{fp, pc}
   15374:	push	{fp, lr}
   15378:	add	fp, sp, #4
   1537c:	sub	sp, sp, #64	; 0x40
   15380:	str	r0, [fp, #-56]	; 0xffffffc8
   15384:	str	r1, [fp, #-60]	; 0xffffffc4
   15388:	str	r2, [fp, #-64]	; 0xffffffc0
   1538c:	str	r3, [fp, #-68]	; 0xffffffbc
   15390:	ldr	r3, [pc, #84]	; 153ec <__assert_fail@plt+0x41e0>
   15394:	sub	ip, fp, #52	; 0x34
   15398:	mov	lr, r3
   1539c:	ldm	lr!, {r0, r1, r2, r3}
   153a0:	stmia	ip!, {r0, r1, r2, r3}
   153a4:	ldm	lr!, {r0, r1, r2, r3}
   153a8:	stmia	ip!, {r0, r1, r2, r3}
   153ac:	ldm	lr, {r0, r1, r2, r3}
   153b0:	stm	ip, {r0, r1, r2, r3}
   153b4:	sub	r3, fp, #52	; 0x34
   153b8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   153bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   153c0:	mov	r0, r3
   153c4:	bl	13118 <__assert_fail@plt+0x1f0c>
   153c8:	sub	r3, fp, #52	; 0x34
   153cc:	ldr	r2, [fp, #4]
   153d0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   153d4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   153d8:	bl	14ce8 <__assert_fail@plt+0x3adc>
   153dc:	mov	r3, r0
   153e0:	mov	r0, r3
   153e4:	sub	sp, fp, #4
   153e8:	pop	{fp, pc}
   153ec:	andeq	fp, r2, r4, lsl #4
   153f0:	push	{fp, lr}
   153f4:	add	fp, sp, #4
   153f8:	sub	sp, sp, #16
   153fc:	str	r0, [fp, #-8]
   15400:	str	r1, [fp, #-12]
   15404:	str	r2, [fp, #-16]
   15408:	ldr	r3, [fp, #-16]
   1540c:	ldr	r2, [fp, #-12]
   15410:	ldr	r1, [fp, #-8]
   15414:	mov	r0, #0
   15418:	bl	1532c <__assert_fail@plt+0x4120>
   1541c:	mov	r3, r0
   15420:	mov	r0, r3
   15424:	sub	sp, fp, #4
   15428:	pop	{fp, pc}
   1542c:	push	{fp, lr}
   15430:	add	fp, sp, #4
   15434:	sub	sp, sp, #24
   15438:	str	r0, [fp, #-8]
   1543c:	str	r1, [fp, #-12]
   15440:	str	r2, [fp, #-16]
   15444:	str	r3, [fp, #-20]	; 0xffffffec
   15448:	ldr	r3, [fp, #-20]	; 0xffffffec
   1544c:	str	r3, [sp]
   15450:	ldr	r3, [fp, #-16]
   15454:	ldr	r2, [fp, #-12]
   15458:	ldr	r1, [fp, #-8]
   1545c:	mov	r0, #0
   15460:	bl	15374 <__assert_fail@plt+0x4168>
   15464:	mov	r3, r0
   15468:	mov	r0, r3
   1546c:	sub	sp, fp, #4
   15470:	pop	{fp, pc}
   15474:	push	{fp, lr}
   15478:	add	fp, sp, #4
   1547c:	sub	sp, sp, #16
   15480:	str	r0, [fp, #-8]
   15484:	str	r1, [fp, #-12]
   15488:	str	r2, [fp, #-16]
   1548c:	ldr	r3, [pc, #28]	; 154b0 <__assert_fail@plt+0x42a4>
   15490:	ldr	r2, [fp, #-16]
   15494:	ldr	r1, [fp, #-12]
   15498:	ldr	r0, [fp, #-8]
   1549c:	bl	14ce8 <__assert_fail@plt+0x3adc>
   154a0:	mov	r3, r0
   154a4:	mov	r0, r3
   154a8:	sub	sp, fp, #4
   154ac:	pop	{fp, pc}
   154b0:	andeq	fp, r2, r8, lsr r1
   154b4:	push	{fp, lr}
   154b8:	add	fp, sp, #4
   154bc:	sub	sp, sp, #8
   154c0:	str	r0, [fp, #-8]
   154c4:	str	r1, [fp, #-12]
   154c8:	ldr	r2, [fp, #-12]
   154cc:	ldr	r1, [fp, #-8]
   154d0:	mov	r0, #0
   154d4:	bl	15474 <__assert_fail@plt+0x4268>
   154d8:	mov	r3, r0
   154dc:	mov	r0, r3
   154e0:	sub	sp, fp, #4
   154e4:	pop	{fp, pc}
   154e8:	push	{fp, lr}
   154ec:	add	fp, sp, #4
   154f0:	sub	sp, sp, #8
   154f4:	str	r0, [fp, #-8]
   154f8:	str	r1, [fp, #-12]
   154fc:	mvn	r2, #0
   15500:	ldr	r1, [fp, #-12]
   15504:	ldr	r0, [fp, #-8]
   15508:	bl	15474 <__assert_fail@plt+0x4268>
   1550c:	mov	r3, r0
   15510:	mov	r0, r3
   15514:	sub	sp, fp, #4
   15518:	pop	{fp, pc}
   1551c:	push	{fp, lr}
   15520:	add	fp, sp, #4
   15524:	sub	sp, sp, #8
   15528:	str	r0, [fp, #-8]
   1552c:	ldr	r1, [fp, #-8]
   15530:	mov	r0, #0
   15534:	bl	154e8 <__assert_fail@plt+0x42dc>
   15538:	mov	r3, r0
   1553c:	mov	r0, r3
   15540:	sub	sp, fp, #4
   15544:	pop	{fp, pc}
   15548:	push	{fp, lr}
   1554c:	add	fp, sp, #4
   15550:	sub	sp, sp, #96	; 0x60
   15554:	str	r0, [fp, #-80]	; 0xffffffb0
   15558:	str	r1, [fp, #-84]	; 0xffffffac
   1555c:	str	r2, [fp, #-88]	; 0xffffffa8
   15560:	str	r3, [fp, #-92]	; 0xffffffa4
   15564:	mov	r3, #0
   15568:	str	r3, [fp, #-16]
   1556c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   15570:	ldr	r3, [r3]
   15574:	str	r3, [fp, #-20]	; 0xffffffec
   15578:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1557c:	cmp	r3, #0
   15580:	beq	15590 <__assert_fail@plt+0x4384>
   15584:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15588:	ldr	r3, [r3]
   1558c:	b	15594 <__assert_fail@plt+0x4388>
   15590:	mvn	r3, #0
   15594:	str	r3, [fp, #-24]	; 0xffffffe8
   15598:	mov	r3, #0
   1559c:	str	r3, [fp, #-8]
   155a0:	ldr	r3, [fp, #4]
   155a4:	cmp	r3, #0
   155a8:	beq	155b8 <__assert_fail@plt+0x43ac>
   155ac:	ldr	r3, [fp, #4]
   155b0:	mov	r2, #0
   155b4:	str	r2, [r3]
   155b8:	ldr	r3, [fp, #8]
   155bc:	cmp	r3, #0
   155c0:	beq	155d0 <__assert_fail@plt+0x43c4>
   155c4:	ldr	r3, [fp, #8]
   155c8:	mov	r2, #0
   155cc:	str	r2, [r3]
   155d0:	mov	r3, #0
   155d4:	str	r3, [fp, #-12]
   155d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   155dc:	cmp	r3, #0
   155e0:	bne	15608 <__assert_fail@plt+0x43fc>
   155e4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   155e8:	ldrb	r3, [r3]
   155ec:	cmp	r3, #0
   155f0:	beq	15654 <__assert_fail@plt+0x4448>
   155f4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   155f8:	bl	16d30 <__assert_fail@plt+0x5b24>
   155fc:	mov	r3, r0
   15600:	str	r3, [fp, #-12]
   15604:	b	15654 <__assert_fail@plt+0x4448>
   15608:	ldr	r2, [fp, #-84]	; 0xffffffac
   1560c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15610:	sub	r3, r2, r3
   15614:	str	r3, [fp, #-28]	; 0xffffffe4
   15618:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1561c:	cmp	r3, #0
   15620:	beq	15654 <__assert_fail@plt+0x4448>
   15624:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15628:	add	r3, r3, #1
   1562c:	mov	r1, r3
   15630:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15634:	bl	16c88 <__assert_fail@plt+0x5a7c>
   15638:	mov	r3, r0
   1563c:	str	r3, [fp, #-12]
   15640:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15644:	ldr	r2, [fp, #-12]
   15648:	add	r3, r2, r3
   1564c:	mov	r2, #0
   15650:	strb	r2, [r3]
   15654:	ldr	r3, [fp, #-84]	; 0xffffffac
   15658:	cmp	r3, #0
   1565c:	beq	15680 <__assert_fail@plt+0x4474>
   15660:	ldr	r3, [fp, #-84]	; 0xffffffac
   15664:	add	r3, r3, #1
   15668:	ldrb	r3, [r3]
   1566c:	cmp	r3, #0
   15670:	beq	15680 <__assert_fail@plt+0x4474>
   15674:	ldr	r3, [fp, #-84]	; 0xffffffac
   15678:	add	r3, r3, #1
   1567c:	b	15684 <__assert_fail@plt+0x4478>
   15680:	mov	r3, #0
   15684:	str	r3, [fp, #-32]	; 0xffffffe0
   15688:	ldr	r3, [fp, #-12]
   1568c:	cmp	r3, #0
   15690:	beq	157f4 <__assert_fail@plt+0x45e8>
   15694:	ldr	r3, [fp, #-12]
   15698:	ldrb	r3, [r3]
   1569c:	cmp	r3, #43	; 0x2b
   156a0:	beq	156b4 <__assert_fail@plt+0x44a8>
   156a4:	ldr	r0, [fp, #-12]
   156a8:	bl	10f3c <getpwnam@plt>
   156ac:	mov	r3, r0
   156b0:	b	156b8 <__assert_fail@plt+0x44ac>
   156b4:	mov	r3, #0
   156b8:	str	r3, [fp, #-36]	; 0xffffffdc
   156bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   156c0:	cmp	r3, #0
   156c4:	bne	1576c <__assert_fail@plt+0x4560>
   156c8:	ldr	r3, [fp, #-84]	; 0xffffffac
   156cc:	cmp	r3, #0
   156d0:	beq	156e8 <__assert_fail@plt+0x44dc>
   156d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   156d8:	cmp	r3, #0
   156dc:	bne	156e8 <__assert_fail@plt+0x44dc>
   156e0:	mov	r3, #1
   156e4:	b	156ec <__assert_fail@plt+0x44e0>
   156e8:	mov	r3, #0
   156ec:	strb	r3, [fp, #-37]	; 0xffffffdb
   156f0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   156f4:	and	r3, r3, #1
   156f8:	strb	r3, [fp, #-37]	; 0xffffffdb
   156fc:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15700:	cmp	r3, #0
   15704:	beq	15718 <__assert_fail@plt+0x450c>
   15708:	ldr	r3, [pc, #592]	; 15960 <__assert_fail@plt+0x4754>
   1570c:	ldr	r3, [r3]
   15710:	str	r3, [fp, #-8]
   15714:	b	157f0 <__assert_fail@plt+0x45e4>
   15718:	sub	r2, fp, #48	; 0x30
   1571c:	ldr	r3, [pc, #576]	; 15964 <__assert_fail@plt+0x4758>
   15720:	str	r3, [sp]
   15724:	mov	r3, r2
   15728:	mov	r2, #10
   1572c:	mov	r1, #0
   15730:	ldr	r0, [fp, #-12]
   15734:	bl	16f78 <__assert_fail@plt+0x5d6c>
   15738:	mov	r3, r0
   1573c:	cmp	r3, #0
   15740:	bne	1575c <__assert_fail@plt+0x4550>
   15744:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15748:	cmn	r3, #1
   1574c:	beq	1575c <__assert_fail@plt+0x4550>
   15750:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15754:	str	r3, [fp, #-20]	; 0xffffffec
   15758:	b	157f0 <__assert_fail@plt+0x45e4>
   1575c:	ldr	r3, [pc, #516]	; 15968 <__assert_fail@plt+0x475c>
   15760:	ldr	r3, [r3]
   15764:	str	r3, [fp, #-8]
   15768:	b	157f0 <__assert_fail@plt+0x45e4>
   1576c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15770:	ldr	r3, [r3, #8]
   15774:	str	r3, [fp, #-20]	; 0xffffffec
   15778:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1577c:	cmp	r3, #0
   15780:	bne	157f0 <__assert_fail@plt+0x45e4>
   15784:	ldr	r3, [fp, #-84]	; 0xffffffac
   15788:	cmp	r3, #0
   1578c:	beq	157f0 <__assert_fail@plt+0x45e4>
   15790:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15794:	ldr	r3, [r3, #12]
   15798:	str	r3, [fp, #-24]	; 0xffffffe8
   1579c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   157a0:	bl	111e8 <getgrgid@plt>
   157a4:	str	r0, [fp, #-44]	; 0xffffffd4
   157a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157ac:	cmp	r3, #0
   157b0:	beq	157c0 <__assert_fail@plt+0x45b4>
   157b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157b8:	ldr	r3, [r3]
   157bc:	b	157dc <__assert_fail@plt+0x45d0>
   157c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157c4:	mov	r0, r3
   157c8:	mov	r1, #0
   157cc:	sub	r3, fp, #72	; 0x48
   157d0:	mov	r2, r3
   157d4:	bl	12d58 <__assert_fail@plt+0x1b4c>
   157d8:	mov	r3, r0
   157dc:	mov	r0, r3
   157e0:	bl	16d30 <__assert_fail@plt+0x5b24>
   157e4:	mov	r3, r0
   157e8:	str	r3, [fp, #-16]
   157ec:	bl	10f18 <endgrent@plt>
   157f0:	bl	11194 <endpwent@plt>
   157f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157f8:	cmp	r3, #0
   157fc:	beq	158b4 <__assert_fail@plt+0x46a8>
   15800:	ldr	r3, [fp, #-8]
   15804:	cmp	r3, #0
   15808:	bne	158b4 <__assert_fail@plt+0x46a8>
   1580c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15810:	ldrb	r3, [r3]
   15814:	cmp	r3, #43	; 0x2b
   15818:	beq	1582c <__assert_fail@plt+0x4620>
   1581c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15820:	bl	111f4 <getgrnam@plt>
   15824:	mov	r3, r0
   15828:	b	15830 <__assert_fail@plt+0x4624>
   1582c:	mov	r3, #0
   15830:	str	r3, [fp, #-44]	; 0xffffffd4
   15834:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15838:	cmp	r3, #0
   1583c:	bne	15894 <__assert_fail@plt+0x4688>
   15840:	sub	r2, fp, #76	; 0x4c
   15844:	ldr	r3, [pc, #280]	; 15964 <__assert_fail@plt+0x4758>
   15848:	str	r3, [sp]
   1584c:	mov	r3, r2
   15850:	mov	r2, #10
   15854:	mov	r1, #0
   15858:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1585c:	bl	16f78 <__assert_fail@plt+0x5d6c>
   15860:	mov	r3, r0
   15864:	cmp	r3, #0
   15868:	bne	15884 <__assert_fail@plt+0x4678>
   1586c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15870:	cmn	r3, #1
   15874:	beq	15884 <__assert_fail@plt+0x4678>
   15878:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1587c:	str	r3, [fp, #-24]	; 0xffffffe8
   15880:	b	158a0 <__assert_fail@plt+0x4694>
   15884:	ldr	r3, [pc, #224]	; 1596c <__assert_fail@plt+0x4760>
   15888:	ldr	r3, [r3]
   1588c:	str	r3, [fp, #-8]
   15890:	b	158a0 <__assert_fail@plt+0x4694>
   15894:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15898:	ldr	r3, [r3, #8]
   1589c:	str	r3, [fp, #-24]	; 0xffffffe8
   158a0:	bl	10f18 <endgrent@plt>
   158a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   158a8:	bl	16d30 <__assert_fail@plt+0x5b24>
   158ac:	mov	r3, r0
   158b0:	str	r3, [fp, #-16]
   158b4:	ldr	r3, [fp, #-8]
   158b8:	cmp	r3, #0
   158bc:	bne	15924 <__assert_fail@plt+0x4718>
   158c0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   158c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   158c8:	str	r2, [r3]
   158cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158d0:	cmp	r3, #0
   158d4:	beq	158e4 <__assert_fail@plt+0x46d8>
   158d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   158e0:	str	r2, [r3]
   158e4:	ldr	r3, [fp, #4]
   158e8:	cmp	r3, #0
   158ec:	beq	15904 <__assert_fail@plt+0x46f8>
   158f0:	ldr	r3, [fp, #4]
   158f4:	ldr	r2, [fp, #-12]
   158f8:	str	r2, [r3]
   158fc:	mov	r3, #0
   15900:	str	r3, [fp, #-12]
   15904:	ldr	r3, [fp, #8]
   15908:	cmp	r3, #0
   1590c:	beq	15924 <__assert_fail@plt+0x4718>
   15910:	ldr	r3, [fp, #8]
   15914:	ldr	r2, [fp, #-16]
   15918:	str	r2, [r3]
   1591c:	mov	r3, #0
   15920:	str	r3, [fp, #-16]
   15924:	ldr	r0, [fp, #-12]
   15928:	bl	12ccc <__assert_fail@plt+0x1ac0>
   1592c:	ldr	r0, [fp, #-16]
   15930:	bl	12ccc <__assert_fail@plt+0x1ac0>
   15934:	ldr	r3, [fp, #-8]
   15938:	cmp	r3, #0
   1593c:	beq	15950 <__assert_fail@plt+0x4744>
   15940:	ldr	r0, [fp, #-8]
   15944:	bl	110d4 <gettext@plt>
   15948:	mov	r3, r0
   1594c:	b	15954 <__assert_fail@plt+0x4748>
   15950:	mov	r3, #0
   15954:	mov	r0, r3
   15958:	sub	sp, fp, #4
   1595c:	pop	{fp, pc}
   15960:	andeq	fp, r2, r8, ror #2
   15964:	andeq	r9, r1, ip, asr #25
   15968:	andeq	fp, r2, ip, ror #2
   1596c:	andeq	fp, r2, r0, ror r1
   15970:	push	{fp, lr}
   15974:	add	fp, sp, #4
   15978:	sub	sp, sp, #40	; 0x28
   1597c:	str	r0, [fp, #-24]	; 0xffffffe8
   15980:	str	r1, [fp, #-28]	; 0xffffffe4
   15984:	str	r2, [fp, #-32]	; 0xffffffe0
   15988:	str	r3, [fp, #-36]	; 0xffffffdc
   1598c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15990:	cmp	r3, #0
   15994:	beq	159ac <__assert_fail@plt+0x47a0>
   15998:	mov	r1, #58	; 0x3a
   1599c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159a0:	bl	110f8 <strchr@plt>
   159a4:	mov	r3, r0
   159a8:	b	159b0 <__assert_fail@plt+0x47a4>
   159ac:	mov	r3, #0
   159b0:	str	r3, [fp, #-12]
   159b4:	ldr	r3, [fp, #4]
   159b8:	str	r3, [sp, #4]
   159bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   159c0:	str	r3, [sp]
   159c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   159cc:	ldr	r1, [fp, #-12]
   159d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159d4:	bl	15548 <__assert_fail@plt+0x433c>
   159d8:	str	r0, [fp, #-8]
   159dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159e0:	cmp	r3, #0
   159e4:	beq	15a54 <__assert_fail@plt+0x4848>
   159e8:	ldr	r3, [fp, #-12]
   159ec:	cmp	r3, #0
   159f0:	bne	15a54 <__assert_fail@plt+0x4848>
   159f4:	ldr	r3, [fp, #-8]
   159f8:	cmp	r3, #0
   159fc:	beq	15a54 <__assert_fail@plt+0x4848>
   15a00:	mov	r1, #46	; 0x2e
   15a04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a08:	bl	110f8 <strchr@plt>
   15a0c:	str	r0, [fp, #-16]
   15a10:	ldr	r3, [fp, #-16]
   15a14:	cmp	r3, #0
   15a18:	beq	15a54 <__assert_fail@plt+0x4848>
   15a1c:	ldr	r3, [fp, #4]
   15a20:	str	r3, [sp, #4]
   15a24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a28:	str	r3, [sp]
   15a2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a30:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15a34:	ldr	r1, [fp, #-16]
   15a38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a3c:	bl	15548 <__assert_fail@plt+0x433c>
   15a40:	mov	r3, r0
   15a44:	cmp	r3, #0
   15a48:	bne	15a54 <__assert_fail@plt+0x4848>
   15a4c:	mov	r3, #0
   15a50:	str	r3, [fp, #-8]
   15a54:	ldr	r3, [fp, #-8]
   15a58:	mov	r0, r3
   15a5c:	sub	sp, fp, #4
   15a60:	pop	{fp, pc}
   15a64:	push	{r4, r5, r6, r7, fp, lr}
   15a68:	add	fp, sp, #20
   15a6c:	sub	sp, sp, #48	; 0x30
   15a70:	str	r0, [fp, #-24]	; 0xffffffe8
   15a74:	str	r1, [fp, #-28]	; 0xffffffe4
   15a78:	str	r2, [fp, #-32]	; 0xffffffe0
   15a7c:	str	r3, [fp, #-36]	; 0xffffffdc
   15a80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15a84:	cmp	r3, #0
   15a88:	beq	15aac <__assert_fail@plt+0x48a0>
   15a8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a90:	str	r3, [sp]
   15a94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a98:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15a9c:	ldr	r1, [pc, #1260]	; 15f90 <__assert_fail@plt+0x4d84>
   15aa0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15aa4:	bl	11104 <fprintf@plt>
   15aa8:	b	15ac0 <__assert_fail@plt+0x48b4>
   15aac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ab0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ab4:	ldr	r1, [pc, #1240]	; 15f94 <__assert_fail@plt+0x4d88>
   15ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15abc:	bl	11104 <fprintf@plt>
   15ac0:	ldr	r0, [pc, #1232]	; 15f98 <__assert_fail@plt+0x4d8c>
   15ac4:	bl	110d4 <gettext@plt>
   15ac8:	mov	r2, r0
   15acc:	ldr	r3, [pc, #1224]	; 15f9c <__assert_fail@plt+0x4d90>
   15ad0:	ldr	r1, [pc, #1224]	; 15fa0 <__assert_fail@plt+0x4d94>
   15ad4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ad8:	bl	11104 <fprintf@plt>
   15adc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15ae0:	mov	r0, #10
   15ae4:	bl	10fcc <fputc_unlocked@plt>
   15ae8:	ldr	r0, [pc, #1204]	; 15fa4 <__assert_fail@plt+0x4d98>
   15aec:	bl	110d4 <gettext@plt>
   15af0:	mov	r3, r0
   15af4:	ldr	r2, [pc, #1196]	; 15fa8 <__assert_fail@plt+0x4d9c>
   15af8:	mov	r1, r3
   15afc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b00:	bl	11104 <fprintf@plt>
   15b04:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15b08:	mov	r0, #10
   15b0c:	bl	10fcc <fputc_unlocked@plt>
   15b10:	ldr	r3, [fp, #8]
   15b14:	cmp	r3, #9
   15b18:	ldrls	pc, [pc, r3, lsl #2]
   15b1c:	b	15ed8 <__assert_fail@plt+0x4ccc>
   15b20:	andeq	r5, r1, r0, lsl #31
   15b24:	andeq	r5, r1, r8, asr #22
   15b28:	andeq	r5, r1, ip, ror #22
   15b2c:	muleq	r1, r8, fp
   15b30:	ldrdeq	r5, [r1], -r8
   15b34:	andeq	r5, r1, r0, lsr ip
   15b38:	muleq	r1, r8, ip
   15b3c:	andeq	r5, r1, r0, lsl sp
   15b40:	muleq	r1, r8, sp
   15b44:	andeq	r5, r1, r0, lsr lr
   15b48:	ldr	r0, [pc, #1116]	; 15fac <__assert_fail@plt+0x4da0>
   15b4c:	bl	110d4 <gettext@plt>
   15b50:	mov	r1, r0
   15b54:	ldr	r3, [fp, #4]
   15b58:	ldr	r3, [r3]
   15b5c:	mov	r2, r3
   15b60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b64:	bl	11104 <fprintf@plt>
   15b68:	b	15f84 <__assert_fail@plt+0x4d78>
   15b6c:	ldr	r0, [pc, #1084]	; 15fb0 <__assert_fail@plt+0x4da4>
   15b70:	bl	110d4 <gettext@plt>
   15b74:	mov	r1, r0
   15b78:	ldr	r3, [fp, #4]
   15b7c:	ldr	r2, [r3]
   15b80:	ldr	r3, [fp, #4]
   15b84:	add	r3, r3, #4
   15b88:	ldr	r3, [r3]
   15b8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b90:	bl	11104 <fprintf@plt>
   15b94:	b	15f84 <__assert_fail@plt+0x4d78>
   15b98:	ldr	r0, [pc, #1044]	; 15fb4 <__assert_fail@plt+0x4da8>
   15b9c:	bl	110d4 <gettext@plt>
   15ba0:	ldr	r3, [fp, #4]
   15ba4:	ldr	r2, [r3]
   15ba8:	ldr	r3, [fp, #4]
   15bac:	add	r3, r3, #4
   15bb0:	ldr	r1, [r3]
   15bb4:	ldr	r3, [fp, #4]
   15bb8:	add	r3, r3, #8
   15bbc:	ldr	r3, [r3]
   15bc0:	str	r3, [sp]
   15bc4:	mov	r3, r1
   15bc8:	mov	r1, r0
   15bcc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15bd0:	bl	11104 <fprintf@plt>
   15bd4:	b	15f84 <__assert_fail@plt+0x4d78>
   15bd8:	ldr	r0, [pc, #984]	; 15fb8 <__assert_fail@plt+0x4dac>
   15bdc:	bl	110d4 <gettext@plt>
   15be0:	mov	ip, r0
   15be4:	ldr	r3, [fp, #4]
   15be8:	ldr	r1, [r3]
   15bec:	ldr	r3, [fp, #4]
   15bf0:	add	r3, r3, #4
   15bf4:	ldr	r0, [r3]
   15bf8:	ldr	r3, [fp, #4]
   15bfc:	add	r3, r3, #8
   15c00:	ldr	r3, [r3]
   15c04:	ldr	r2, [fp, #4]
   15c08:	add	r2, r2, #12
   15c0c:	ldr	r2, [r2]
   15c10:	str	r2, [sp, #4]
   15c14:	str	r3, [sp]
   15c18:	mov	r3, r0
   15c1c:	mov	r2, r1
   15c20:	mov	r1, ip
   15c24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c28:	bl	11104 <fprintf@plt>
   15c2c:	b	15f84 <__assert_fail@plt+0x4d78>
   15c30:	ldr	r0, [pc, #900]	; 15fbc <__assert_fail@plt+0x4db0>
   15c34:	bl	110d4 <gettext@plt>
   15c38:	mov	lr, r0
   15c3c:	ldr	r3, [fp, #4]
   15c40:	ldr	r0, [r3]
   15c44:	ldr	r3, [fp, #4]
   15c48:	add	r3, r3, #4
   15c4c:	ldr	ip, [r3]
   15c50:	ldr	r3, [fp, #4]
   15c54:	add	r3, r3, #8
   15c58:	ldr	r3, [r3]
   15c5c:	ldr	r2, [fp, #4]
   15c60:	add	r2, r2, #12
   15c64:	ldr	r2, [r2]
   15c68:	ldr	r1, [fp, #4]
   15c6c:	add	r1, r1, #16
   15c70:	ldr	r1, [r1]
   15c74:	str	r1, [sp, #8]
   15c78:	str	r2, [sp, #4]
   15c7c:	str	r3, [sp]
   15c80:	mov	r3, ip
   15c84:	mov	r2, r0
   15c88:	mov	r1, lr
   15c8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c90:	bl	11104 <fprintf@plt>
   15c94:	b	15f84 <__assert_fail@plt+0x4d78>
   15c98:	ldr	r0, [pc, #800]	; 15fc0 <__assert_fail@plt+0x4db4>
   15c9c:	bl	110d4 <gettext@plt>
   15ca0:	mov	r4, r0
   15ca4:	ldr	r3, [fp, #4]
   15ca8:	ldr	ip, [r3]
   15cac:	ldr	r3, [fp, #4]
   15cb0:	add	r3, r3, #4
   15cb4:	ldr	lr, [r3]
   15cb8:	ldr	r3, [fp, #4]
   15cbc:	add	r3, r3, #8
   15cc0:	ldr	r3, [r3]
   15cc4:	ldr	r2, [fp, #4]
   15cc8:	add	r2, r2, #12
   15ccc:	ldr	r2, [r2]
   15cd0:	ldr	r1, [fp, #4]
   15cd4:	add	r1, r1, #16
   15cd8:	ldr	r1, [r1]
   15cdc:	ldr	r0, [fp, #4]
   15ce0:	add	r0, r0, #20
   15ce4:	ldr	r0, [r0]
   15ce8:	str	r0, [sp, #12]
   15cec:	str	r1, [sp, #8]
   15cf0:	str	r2, [sp, #4]
   15cf4:	str	r3, [sp]
   15cf8:	mov	r3, lr
   15cfc:	mov	r2, ip
   15d00:	mov	r1, r4
   15d04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d08:	bl	11104 <fprintf@plt>
   15d0c:	b	15f84 <__assert_fail@plt+0x4d78>
   15d10:	ldr	r0, [pc, #684]	; 15fc4 <__assert_fail@plt+0x4db8>
   15d14:	bl	110d4 <gettext@plt>
   15d18:	mov	r5, r0
   15d1c:	ldr	r3, [fp, #4]
   15d20:	ldr	lr, [r3]
   15d24:	ldr	r3, [fp, #4]
   15d28:	add	r3, r3, #4
   15d2c:	ldr	r4, [r3]
   15d30:	ldr	r3, [fp, #4]
   15d34:	add	r3, r3, #8
   15d38:	ldr	r3, [r3]
   15d3c:	ldr	r2, [fp, #4]
   15d40:	add	r2, r2, #12
   15d44:	ldr	r2, [r2]
   15d48:	ldr	r1, [fp, #4]
   15d4c:	add	r1, r1, #16
   15d50:	ldr	r1, [r1]
   15d54:	ldr	r0, [fp, #4]
   15d58:	add	r0, r0, #20
   15d5c:	ldr	r0, [r0]
   15d60:	ldr	ip, [fp, #4]
   15d64:	add	ip, ip, #24
   15d68:	ldr	ip, [ip]
   15d6c:	str	ip, [sp, #16]
   15d70:	str	r0, [sp, #12]
   15d74:	str	r1, [sp, #8]
   15d78:	str	r2, [sp, #4]
   15d7c:	str	r3, [sp]
   15d80:	mov	r3, r4
   15d84:	mov	r2, lr
   15d88:	mov	r1, r5
   15d8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d90:	bl	11104 <fprintf@plt>
   15d94:	b	15f84 <__assert_fail@plt+0x4d78>
   15d98:	ldr	r0, [pc, #552]	; 15fc8 <__assert_fail@plt+0x4dbc>
   15d9c:	bl	110d4 <gettext@plt>
   15da0:	mov	r6, r0
   15da4:	ldr	r3, [fp, #4]
   15da8:	ldr	r4, [r3]
   15dac:	ldr	r3, [fp, #4]
   15db0:	add	r3, r3, #4
   15db4:	ldr	r5, [r3]
   15db8:	ldr	r3, [fp, #4]
   15dbc:	add	r3, r3, #8
   15dc0:	ldr	r3, [r3]
   15dc4:	ldr	r2, [fp, #4]
   15dc8:	add	r2, r2, #12
   15dcc:	ldr	r2, [r2]
   15dd0:	ldr	r1, [fp, #4]
   15dd4:	add	r1, r1, #16
   15dd8:	ldr	r1, [r1]
   15ddc:	ldr	r0, [fp, #4]
   15de0:	add	r0, r0, #20
   15de4:	ldr	r0, [r0]
   15de8:	ldr	ip, [fp, #4]
   15dec:	add	ip, ip, #24
   15df0:	ldr	ip, [ip]
   15df4:	ldr	lr, [fp, #4]
   15df8:	add	lr, lr, #28
   15dfc:	ldr	lr, [lr]
   15e00:	str	lr, [sp, #20]
   15e04:	str	ip, [sp, #16]
   15e08:	str	r0, [sp, #12]
   15e0c:	str	r1, [sp, #8]
   15e10:	str	r2, [sp, #4]
   15e14:	str	r3, [sp]
   15e18:	mov	r3, r5
   15e1c:	mov	r2, r4
   15e20:	mov	r1, r6
   15e24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e28:	bl	11104 <fprintf@plt>
   15e2c:	b	15f84 <__assert_fail@plt+0x4d78>
   15e30:	ldr	r0, [pc, #404]	; 15fcc <__assert_fail@plt+0x4dc0>
   15e34:	bl	110d4 <gettext@plt>
   15e38:	mov	r7, r0
   15e3c:	ldr	r3, [fp, #4]
   15e40:	ldr	r5, [r3]
   15e44:	ldr	r3, [fp, #4]
   15e48:	add	r3, r3, #4
   15e4c:	ldr	r6, [r3]
   15e50:	ldr	r3, [fp, #4]
   15e54:	add	r3, r3, #8
   15e58:	ldr	r3, [r3]
   15e5c:	ldr	r2, [fp, #4]
   15e60:	add	r2, r2, #12
   15e64:	ldr	r2, [r2]
   15e68:	ldr	r1, [fp, #4]
   15e6c:	add	r1, r1, #16
   15e70:	ldr	r1, [r1]
   15e74:	ldr	r0, [fp, #4]
   15e78:	add	r0, r0, #20
   15e7c:	ldr	r0, [r0]
   15e80:	ldr	ip, [fp, #4]
   15e84:	add	ip, ip, #24
   15e88:	ldr	ip, [ip]
   15e8c:	ldr	lr, [fp, #4]
   15e90:	add	lr, lr, #28
   15e94:	ldr	lr, [lr]
   15e98:	ldr	r4, [fp, #4]
   15e9c:	add	r4, r4, #32
   15ea0:	ldr	r4, [r4]
   15ea4:	str	r4, [sp, #24]
   15ea8:	str	lr, [sp, #20]
   15eac:	str	ip, [sp, #16]
   15eb0:	str	r0, [sp, #12]
   15eb4:	str	r1, [sp, #8]
   15eb8:	str	r2, [sp, #4]
   15ebc:	str	r3, [sp]
   15ec0:	mov	r3, r6
   15ec4:	mov	r2, r5
   15ec8:	mov	r1, r7
   15ecc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ed0:	bl	11104 <fprintf@plt>
   15ed4:	b	15f84 <__assert_fail@plt+0x4d78>
   15ed8:	ldr	r0, [pc, #240]	; 15fd0 <__assert_fail@plt+0x4dc4>
   15edc:	bl	110d4 <gettext@plt>
   15ee0:	mov	r7, r0
   15ee4:	ldr	r3, [fp, #4]
   15ee8:	ldr	r5, [r3]
   15eec:	ldr	r3, [fp, #4]
   15ef0:	add	r3, r3, #4
   15ef4:	ldr	r6, [r3]
   15ef8:	ldr	r3, [fp, #4]
   15efc:	add	r3, r3, #8
   15f00:	ldr	r3, [r3]
   15f04:	ldr	r2, [fp, #4]
   15f08:	add	r2, r2, #12
   15f0c:	ldr	r2, [r2]
   15f10:	ldr	r1, [fp, #4]
   15f14:	add	r1, r1, #16
   15f18:	ldr	r1, [r1]
   15f1c:	ldr	r0, [fp, #4]
   15f20:	add	r0, r0, #20
   15f24:	ldr	r0, [r0]
   15f28:	ldr	ip, [fp, #4]
   15f2c:	add	ip, ip, #24
   15f30:	ldr	ip, [ip]
   15f34:	ldr	lr, [fp, #4]
   15f38:	add	lr, lr, #28
   15f3c:	ldr	lr, [lr]
   15f40:	ldr	r4, [fp, #4]
   15f44:	add	r4, r4, #32
   15f48:	ldr	r4, [r4]
   15f4c:	str	r4, [sp, #24]
   15f50:	str	lr, [sp, #20]
   15f54:	str	ip, [sp, #16]
   15f58:	str	r0, [sp, #12]
   15f5c:	str	r1, [sp, #8]
   15f60:	str	r2, [sp, #4]
   15f64:	str	r3, [sp]
   15f68:	mov	r3, r6
   15f6c:	mov	r2, r5
   15f70:	mov	r1, r7
   15f74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f78:	bl	11104 <fprintf@plt>
   15f7c:	b	15f84 <__assert_fail@plt+0x4d78>
   15f80:	nop			; (mov r0, r0)
   15f84:	nop			; (mov r0, r0)
   15f88:	sub	sp, fp, #20
   15f8c:	pop	{r4, r5, r6, r7, fp, pc}
   15f90:	andeq	r9, r1, r0, lsl #26
   15f94:	andeq	r9, r1, ip, lsl #26
   15f98:	andeq	r9, r1, r4, lsl sp
   15f9c:	andeq	r0, r0, r6, ror #15
   15fa0:	andeq	sl, r1, r4, lsr #32
   15fa4:	andeq	r9, r1, r8, lsl sp
   15fa8:	andeq	r9, r1, r4, asr #27
   15fac:	andeq	r9, r1, r8, ror #27
   15fb0:	strdeq	r9, [r1], -r8
   15fb4:	andeq	r9, r1, r0, lsl lr
   15fb8:	andeq	r9, r1, ip, lsr #28
   15fbc:	andeq	r9, r1, ip, asr #28
   15fc0:	andeq	r9, r1, r0, ror lr
   15fc4:	muleq	r1, r8, lr
   15fc8:	andeq	r9, r1, r4, asr #29
   15fcc:	strdeq	r9, [r1], -r4
   15fd0:	andeq	r9, r1, r8, lsr #30
   15fd4:	push	{fp, lr}
   15fd8:	add	fp, sp, #4
   15fdc:	sub	sp, sp, #32
   15fe0:	str	r0, [fp, #-16]
   15fe4:	str	r1, [fp, #-20]	; 0xffffffec
   15fe8:	str	r2, [fp, #-24]	; 0xffffffe8
   15fec:	str	r3, [fp, #-28]	; 0xffffffe4
   15ff0:	mov	r3, #0
   15ff4:	str	r3, [fp, #-8]
   15ff8:	b	16008 <__assert_fail@plt+0x4dfc>
   15ffc:	ldr	r3, [fp, #-8]
   16000:	add	r3, r3, #1
   16004:	str	r3, [fp, #-8]
   16008:	ldr	r3, [fp, #-8]
   1600c:	lsl	r3, r3, #2
   16010:	ldr	r2, [fp, #4]
   16014:	add	r3, r2, r3
   16018:	ldr	r3, [r3]
   1601c:	cmp	r3, #0
   16020:	bne	15ffc <__assert_fail@plt+0x4df0>
   16024:	ldr	r3, [fp, #-8]
   16028:	str	r3, [sp, #4]
   1602c:	ldr	r3, [fp, #4]
   16030:	str	r3, [sp]
   16034:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16038:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1603c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16040:	ldr	r0, [fp, #-16]
   16044:	bl	15a64 <__assert_fail@plt+0x4858>
   16048:	nop			; (mov r0, r0)
   1604c:	sub	sp, fp, #4
   16050:	pop	{fp, pc}
   16054:	push	{fp, lr}
   16058:	add	fp, sp, #4
   1605c:	sub	sp, sp, #72	; 0x48
   16060:	str	r0, [fp, #-56]	; 0xffffffc8
   16064:	str	r1, [fp, #-60]	; 0xffffffc4
   16068:	str	r2, [fp, #-64]	; 0xffffffc0
   1606c:	str	r3, [fp, #-68]	; 0xffffffbc
   16070:	mov	r3, #0
   16074:	str	r3, [fp, #-8]
   16078:	b	16088 <__assert_fail@plt+0x4e7c>
   1607c:	ldr	r3, [fp, #-8]
   16080:	add	r3, r3, #1
   16084:	str	r3, [fp, #-8]
   16088:	ldr	r3, [fp, #-8]
   1608c:	cmp	r3, #9
   16090:	bhi	160d4 <__assert_fail@plt+0x4ec8>
   16094:	ldr	r3, [fp, #4]
   16098:	add	r2, r3, #4
   1609c:	str	r2, [fp, #4]
   160a0:	ldr	r2, [r3]
   160a4:	ldr	r3, [fp, #-8]
   160a8:	lsl	r3, r3, #2
   160ac:	sub	r1, fp, #4
   160b0:	add	r3, r1, r3
   160b4:	str	r2, [r3, #-44]	; 0xffffffd4
   160b8:	ldr	r3, [fp, #-8]
   160bc:	lsl	r3, r3, #2
   160c0:	sub	r2, fp, #4
   160c4:	add	r3, r2, r3
   160c8:	ldr	r3, [r3, #-44]	; 0xffffffd4
   160cc:	cmp	r3, #0
   160d0:	bne	1607c <__assert_fail@plt+0x4e70>
   160d4:	ldr	r3, [fp, #-8]
   160d8:	str	r3, [sp, #4]
   160dc:	sub	r3, fp, #48	; 0x30
   160e0:	str	r3, [sp]
   160e4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   160e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   160ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   160f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   160f4:	bl	15a64 <__assert_fail@plt+0x4858>
   160f8:	nop			; (mov r0, r0)
   160fc:	sub	sp, fp, #4
   16100:	pop	{fp, pc}
   16104:	push	{r3}		; (str r3, [sp, #-4]!)
   16108:	push	{fp, lr}
   1610c:	add	fp, sp, #4
   16110:	sub	sp, sp, #36	; 0x24
   16114:	str	r0, [fp, #-20]	; 0xffffffec
   16118:	str	r1, [fp, #-24]	; 0xffffffe8
   1611c:	str	r2, [fp, #-28]	; 0xffffffe4
   16120:	add	r3, fp, #8
   16124:	str	r3, [fp, #-12]
   16128:	ldr	r3, [fp, #-12]
   1612c:	str	r3, [sp]
   16130:	ldr	r3, [fp, #4]
   16134:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16138:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1613c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16140:	bl	16054 <__assert_fail@plt+0x4e48>
   16144:	nop			; (mov r0, r0)
   16148:	sub	sp, fp, #4
   1614c:	pop	{fp, lr}
   16150:	add	sp, sp, #4
   16154:	bx	lr
   16158:	push	{fp, lr}
   1615c:	add	fp, sp, #4
   16160:	ldr	r3, [pc, #96]	; 161c8 <__assert_fail@plt+0x4fbc>
   16164:	ldr	r3, [r3]
   16168:	mov	r1, r3
   1616c:	mov	r0, #10
   16170:	bl	10fcc <fputc_unlocked@plt>
   16174:	ldr	r0, [pc, #80]	; 161cc <__assert_fail@plt+0x4fc0>
   16178:	bl	110d4 <gettext@plt>
   1617c:	mov	r3, r0
   16180:	ldr	r1, [pc, #72]	; 161d0 <__assert_fail@plt+0x4fc4>
   16184:	mov	r0, r3
   16188:	bl	10f6c <printf@plt>
   1618c:	ldr	r0, [pc, #64]	; 161d4 <__assert_fail@plt+0x4fc8>
   16190:	bl	110d4 <gettext@plt>
   16194:	mov	r3, r0
   16198:	ldr	r2, [pc, #56]	; 161d8 <__assert_fail@plt+0x4fcc>
   1619c:	ldr	r1, [pc, #56]	; 161dc <__assert_fail@plt+0x4fd0>
   161a0:	mov	r0, r3
   161a4:	bl	10f6c <printf@plt>
   161a8:	ldr	r0, [pc, #48]	; 161e0 <__assert_fail@plt+0x4fd4>
   161ac:	bl	110d4 <gettext@plt>
   161b0:	mov	r3, r0
   161b4:	ldr	r1, [pc, #40]	; 161e4 <__assert_fail@plt+0x4fd8>
   161b8:	mov	r0, r3
   161bc:	bl	10f6c <printf@plt>
   161c0:	nop			; (mov r0, r0)
   161c4:	pop	{fp, pc}
   161c8:	andeq	fp, r2, ip, lsl #3
   161cc:	andeq	r9, r1, r4, ror #30
   161d0:	andeq	r9, r1, r8, ror pc
   161d4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   161d8:	andeq	r9, r1, r4, lsr #31
   161dc:	andeq	r9, r1, ip, asr #31
   161e0:	ldrdeq	r9, [r1], -ip
   161e4:	andeq	sl, r1, r4
   161e8:	push	{fp, lr}
   161ec:	add	fp, sp, #4
   161f0:	sub	sp, sp, #16
   161f4:	str	r0, [fp, #-8]
   161f8:	str	r1, [fp, #-12]
   161fc:	str	r2, [fp, #-16]
   16200:	ldr	r2, [fp, #-16]
   16204:	ldr	r1, [fp, #-12]
   16208:	ldr	r0, [fp, #-8]
   1620c:	bl	16378 <__assert_fail@plt+0x516c>
   16210:	mov	r3, r0
   16214:	mov	r0, r3
   16218:	sub	sp, fp, #4
   1621c:	pop	{fp, pc}
   16220:	push	{fp, lr}
   16224:	add	fp, sp, #4
   16228:	sub	sp, sp, #8
   1622c:	str	r0, [fp, #-8]
   16230:	ldr	r3, [fp, #-8]
   16234:	cmp	r3, #0
   16238:	bne	16240 <__assert_fail@plt+0x5034>
   1623c:	bl	16d6c <__assert_fail@plt+0x5b60>
   16240:	ldr	r3, [fp, #-8]
   16244:	mov	r0, r3
   16248:	sub	sp, fp, #4
   1624c:	pop	{fp, pc}
   16250:	push	{fp, lr}
   16254:	add	fp, sp, #4
   16258:	sub	sp, sp, #8
   1625c:	str	r0, [fp, #-8]
   16260:	ldr	r0, [fp, #-8]
   16264:	bl	17674 <__assert_fail@plt+0x6468>
   16268:	mov	r3, r0
   1626c:	mov	r0, r3
   16270:	bl	16220 <__assert_fail@plt+0x5014>
   16274:	mov	r3, r0
   16278:	mov	r0, r3
   1627c:	sub	sp, fp, #4
   16280:	pop	{fp, pc}
   16284:	push	{fp, lr}
   16288:	add	fp, sp, #4
   1628c:	sub	sp, sp, #8
   16290:	str	r0, [fp, #-8]
   16294:	ldr	r0, [fp, #-8]
   16298:	bl	17c04 <__assert_fail@plt+0x69f8>
   1629c:	mov	r3, r0
   162a0:	mov	r0, r3
   162a4:	bl	16220 <__assert_fail@plt+0x5014>
   162a8:	mov	r3, r0
   162ac:	mov	r0, r3
   162b0:	sub	sp, fp, #4
   162b4:	pop	{fp, pc}
   162b8:	push	{fp, lr}
   162bc:	add	fp, sp, #4
   162c0:	sub	sp, sp, #8
   162c4:	str	r0, [fp, #-8]
   162c8:	ldr	r0, [fp, #-8]
   162cc:	bl	16250 <__assert_fail@plt+0x5044>
   162d0:	mov	r3, r0
   162d4:	mov	r0, r3
   162d8:	sub	sp, fp, #4
   162dc:	pop	{fp, pc}
   162e0:	push	{fp, lr}
   162e4:	add	fp, sp, #4
   162e8:	sub	sp, sp, #16
   162ec:	str	r0, [fp, #-16]
   162f0:	str	r1, [fp, #-20]	; 0xffffffec
   162f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   162f8:	ldr	r0, [fp, #-16]
   162fc:	bl	1771c <__assert_fail@plt+0x6510>
   16300:	str	r0, [fp, #-8]
   16304:	ldr	r3, [fp, #-8]
   16308:	cmp	r3, #0
   1630c:	bne	1632c <__assert_fail@plt+0x5120>
   16310:	ldr	r3, [fp, #-16]
   16314:	cmp	r3, #0
   16318:	beq	16328 <__assert_fail@plt+0x511c>
   1631c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16320:	cmp	r3, #0
   16324:	beq	1632c <__assert_fail@plt+0x5120>
   16328:	bl	16d6c <__assert_fail@plt+0x5b60>
   1632c:	ldr	r3, [fp, #-8]
   16330:	mov	r0, r3
   16334:	sub	sp, fp, #4
   16338:	pop	{fp, pc}
   1633c:	push	{fp, lr}
   16340:	add	fp, sp, #4
   16344:	sub	sp, sp, #8
   16348:	str	r0, [fp, #-8]
   1634c:	str	r1, [fp, #-12]
   16350:	ldr	r1, [fp, #-12]
   16354:	ldr	r0, [fp, #-8]
   16358:	bl	17c30 <__assert_fail@plt+0x6a24>
   1635c:	mov	r3, r0
   16360:	mov	r0, r3
   16364:	bl	16220 <__assert_fail@plt+0x5014>
   16368:	mov	r3, r0
   1636c:	mov	r0, r3
   16370:	sub	sp, fp, #4
   16374:	pop	{fp, pc}
   16378:	push	{fp, lr}
   1637c:	add	fp, sp, #4
   16380:	sub	sp, sp, #24
   16384:	str	r0, [fp, #-16]
   16388:	str	r1, [fp, #-20]	; 0xffffffec
   1638c:	str	r2, [fp, #-24]	; 0xffffffe8
   16390:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16394:	ldr	r1, [fp, #-20]	; 0xffffffec
   16398:	ldr	r0, [fp, #-16]
   1639c:	bl	18254 <__assert_fail@plt+0x7048>
   163a0:	str	r0, [fp, #-8]
   163a4:	ldr	r3, [fp, #-8]
   163a8:	cmp	r3, #0
   163ac:	bne	163d8 <__assert_fail@plt+0x51cc>
   163b0:	ldr	r3, [fp, #-16]
   163b4:	cmp	r3, #0
   163b8:	beq	163d4 <__assert_fail@plt+0x51c8>
   163bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   163c0:	cmp	r3, #0
   163c4:	beq	163d8 <__assert_fail@plt+0x51cc>
   163c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163cc:	cmp	r3, #0
   163d0:	beq	163d8 <__assert_fail@plt+0x51cc>
   163d4:	bl	16d6c <__assert_fail@plt+0x5b60>
   163d8:	ldr	r3, [fp, #-8]
   163dc:	mov	r0, r3
   163e0:	sub	sp, fp, #4
   163e4:	pop	{fp, pc}
   163e8:	push	{fp, lr}
   163ec:	add	fp, sp, #4
   163f0:	sub	sp, sp, #16
   163f4:	str	r0, [fp, #-8]
   163f8:	str	r1, [fp, #-12]
   163fc:	str	r2, [fp, #-16]
   16400:	ldr	r2, [fp, #-16]
   16404:	ldr	r1, [fp, #-12]
   16408:	ldr	r0, [fp, #-8]
   1640c:	bl	17cb8 <__assert_fail@plt+0x6aac>
   16410:	mov	r3, r0
   16414:	mov	r0, r3
   16418:	bl	16220 <__assert_fail@plt+0x5014>
   1641c:	mov	r3, r0
   16420:	mov	r0, r3
   16424:	sub	sp, fp, #4
   16428:	pop	{fp, pc}
   1642c:	push	{fp, lr}
   16430:	add	fp, sp, #4
   16434:	sub	sp, sp, #8
   16438:	str	r0, [fp, #-8]
   1643c:	str	r1, [fp, #-12]
   16440:	ldr	r2, [fp, #-12]
   16444:	ldr	r1, [fp, #-8]
   16448:	mov	r0, #0
   1644c:	bl	16378 <__assert_fail@plt+0x516c>
   16450:	mov	r3, r0
   16454:	mov	r0, r3
   16458:	sub	sp, fp, #4
   1645c:	pop	{fp, pc}
   16460:	push	{fp, lr}
   16464:	add	fp, sp, #4
   16468:	sub	sp, sp, #8
   1646c:	str	r0, [fp, #-8]
   16470:	str	r1, [fp, #-12]
   16474:	ldr	r2, [fp, #-12]
   16478:	ldr	r1, [fp, #-8]
   1647c:	mov	r0, #0
   16480:	bl	163e8 <__assert_fail@plt+0x51dc>
   16484:	mov	r3, r0
   16488:	mov	r0, r3
   1648c:	sub	sp, fp, #4
   16490:	pop	{fp, pc}
   16494:	push	{fp, lr}
   16498:	add	fp, sp, #4
   1649c:	sub	sp, sp, #8
   164a0:	str	r0, [fp, #-8]
   164a4:	str	r1, [fp, #-12]
   164a8:	mov	r2, #1
   164ac:	ldr	r1, [fp, #-12]
   164b0:	ldr	r0, [fp, #-8]
   164b4:	bl	164c8 <__assert_fail@plt+0x52bc>
   164b8:	mov	r3, r0
   164bc:	mov	r0, r3
   164c0:	sub	sp, fp, #4
   164c4:	pop	{fp, pc}
   164c8:	push	{fp, lr}
   164cc:	add	fp, sp, #4
   164d0:	sub	sp, sp, #24
   164d4:	str	r0, [fp, #-16]
   164d8:	str	r1, [fp, #-20]	; 0xffffffec
   164dc:	str	r2, [fp, #-24]	; 0xffffffe8
   164e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164e4:	ldr	r3, [r3]
   164e8:	str	r3, [fp, #-8]
   164ec:	ldr	r3, [fp, #-16]
   164f0:	cmp	r3, #0
   164f4:	bne	16540 <__assert_fail@plt+0x5334>
   164f8:	ldr	r3, [fp, #-8]
   164fc:	cmp	r3, #0
   16500:	bne	165a4 <__assert_fail@plt+0x5398>
   16504:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16508:	mov	r0, #64	; 0x40
   1650c:	bl	18c0c <__assert_fail@plt+0x7a00>
   16510:	mov	r3, r0
   16514:	str	r3, [fp, #-8]
   16518:	ldr	r3, [fp, #-8]
   1651c:	cmp	r3, #0
   16520:	moveq	r3, #1
   16524:	movne	r3, #0
   16528:	uxtb	r3, r3
   1652c:	mov	r2, r3
   16530:	ldr	r3, [fp, #-8]
   16534:	add	r3, r2, r3
   16538:	str	r3, [fp, #-8]
   1653c:	b	165a4 <__assert_fail@plt+0x5398>
   16540:	ldr	r3, [fp, #-8]
   16544:	lsr	r3, r3, #1
   16548:	add	r3, r3, #1
   1654c:	mvn	r2, r3
   16550:	ldr	r3, [fp, #-8]
   16554:	cmp	r2, r3
   16558:	bcs	1657c <__assert_fail@plt+0x5370>
   1655c:	ldr	r3, [fp, #-8]
   16560:	lsr	r2, r3, #1
   16564:	ldr	r3, [fp, #-8]
   16568:	add	r3, r2, r3
   1656c:	add	r3, r3, #1
   16570:	str	r3, [fp, #-8]
   16574:	mov	r3, #1
   16578:	b	16598 <__assert_fail@plt+0x538c>
   1657c:	ldr	r3, [fp, #-8]
   16580:	lsr	r2, r3, #1
   16584:	ldr	r3, [fp, #-8]
   16588:	add	r3, r2, r3
   1658c:	add	r3, r3, #1
   16590:	str	r3, [fp, #-8]
   16594:	mov	r3, #0
   16598:	cmp	r3, #0
   1659c:	beq	165a4 <__assert_fail@plt+0x5398>
   165a0:	bl	16d6c <__assert_fail@plt+0x5b60>
   165a4:	ldr	r3, [fp, #-8]
   165a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   165ac:	mov	r1, r3
   165b0:	ldr	r0, [fp, #-16]
   165b4:	bl	16378 <__assert_fail@plt+0x516c>
   165b8:	str	r0, [fp, #-16]
   165bc:	ldr	r2, [fp, #-8]
   165c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165c4:	str	r2, [r3]
   165c8:	ldr	r3, [fp, #-16]
   165cc:	mov	r0, r3
   165d0:	sub	sp, fp, #4
   165d4:	pop	{fp, pc}
   165d8:	push	{fp, lr}
   165dc:	add	fp, sp, #4
   165e0:	sub	sp, sp, #32
   165e4:	str	r0, [fp, #-24]	; 0xffffffe8
   165e8:	str	r1, [fp, #-28]	; 0xffffffe4
   165ec:	str	r2, [fp, #-32]	; 0xffffffe0
   165f0:	str	r3, [fp, #-36]	; 0xffffffdc
   165f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   165f8:	ldr	r3, [r3]
   165fc:	str	r3, [fp, #-8]
   16600:	ldr	r3, [fp, #-8]
   16604:	asr	r3, r3, #1
   16608:	cmp	r3, #0
   1660c:	bge	16634 <__assert_fail@plt+0x5428>
   16610:	ldr	r3, [fp, #-8]
   16614:	asr	r3, r3, #1
   16618:	rsb	r2, r3, #-2147483648	; 0x80000000
   1661c:	ldr	r3, [fp, #-8]
   16620:	cmp	r2, r3
   16624:	movgt	r3, #1
   16628:	movle	r3, #0
   1662c:	uxtb	r3, r3
   16630:	b	16688 <__assert_fail@plt+0x547c>
   16634:	ldr	r3, [fp, #-8]
   16638:	cmp	r3, #0
   1663c:	bge	16664 <__assert_fail@plt+0x5458>
   16640:	ldr	r3, [fp, #-8]
   16644:	asr	r2, r3, #1
   16648:	ldr	r3, [fp, #-8]
   1664c:	rsb	r3, r3, #-2147483648	; 0x80000000
   16650:	cmp	r2, r3
   16654:	movlt	r3, #1
   16658:	movge	r3, #0
   1665c:	uxtb	r3, r3
   16660:	b	16688 <__assert_fail@plt+0x547c>
   16664:	ldr	r3, [fp, #-8]
   16668:	asr	r2, r3, #1
   1666c:	mvn	r3, #-2147483648	; 0x80000000
   16670:	sub	r3, r3, r2
   16674:	ldr	r2, [fp, #-8]
   16678:	cmp	r3, r2
   1667c:	movlt	r3, #1
   16680:	movge	r3, #0
   16684:	uxtb	r3, r3
   16688:	cmp	r3, #0
   1668c:	beq	166b0 <__assert_fail@plt+0x54a4>
   16690:	ldr	r3, [fp, #-8]
   16694:	asr	r3, r3, #1
   16698:	mov	r2, r3
   1669c:	ldr	r3, [fp, #-8]
   166a0:	add	r3, r2, r3
   166a4:	str	r3, [fp, #-16]
   166a8:	mov	r3, #1
   166ac:	b	166cc <__assert_fail@plt+0x54c0>
   166b0:	ldr	r3, [fp, #-8]
   166b4:	asr	r3, r3, #1
   166b8:	mov	r2, r3
   166bc:	ldr	r3, [fp, #-8]
   166c0:	add	r3, r2, r3
   166c4:	str	r3, [fp, #-16]
   166c8:	mov	r3, #0
   166cc:	cmp	r3, #0
   166d0:	beq	166dc <__assert_fail@plt+0x54d0>
   166d4:	mvn	r3, #-2147483648	; 0x80000000
   166d8:	str	r3, [fp, #-16]
   166dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   166e0:	cmp	r3, #0
   166e4:	blt	16700 <__assert_fail@plt+0x54f4>
   166e8:	ldr	r3, [fp, #-16]
   166ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   166f0:	cmp	r2, r3
   166f4:	bge	16700 <__assert_fail@plt+0x54f4>
   166f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   166fc:	str	r3, [fp, #-16]
   16700:	ldr	r3, [fp, #4]
   16704:	cmp	r3, #0
   16708:	bge	16798 <__assert_fail@plt+0x558c>
   1670c:	ldr	r3, [fp, #-16]
   16710:	cmp	r3, #0
   16714:	bge	16744 <__assert_fail@plt+0x5538>
   16718:	ldr	r1, [fp, #4]
   1671c:	mvn	r0, #-2147483648	; 0x80000000
   16720:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16724:	mov	r3, r0
   16728:	mov	r2, r3
   1672c:	ldr	r3, [fp, #-16]
   16730:	cmp	r2, r3
   16734:	movgt	r3, #1
   16738:	movle	r3, #0
   1673c:	uxtb	r3, r3
   16740:	b	16838 <__assert_fail@plt+0x562c>
   16744:	ldr	r3, [fp, #4]
   16748:	cmn	r3, #1
   1674c:	bne	1676c <__assert_fail@plt+0x5560>
   16750:	ldr	r3, [fp, #-16]
   16754:	add	r3, r3, #-2147483648	; 0x80000000
   16758:	cmp	r3, #0
   1675c:	movgt	r3, #1
   16760:	movle	r3, #0
   16764:	uxtb	r3, r3
   16768:	b	16838 <__assert_fail@plt+0x562c>
   1676c:	ldr	r1, [fp, #4]
   16770:	mov	r0, #-2147483648	; 0x80000000
   16774:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16778:	mov	r3, r0
   1677c:	mov	r2, r3
   16780:	ldr	r3, [fp, #-16]
   16784:	cmp	r2, r3
   16788:	movlt	r3, #1
   1678c:	movge	r3, #0
   16790:	uxtb	r3, r3
   16794:	b	16838 <__assert_fail@plt+0x562c>
   16798:	ldr	r3, [fp, #4]
   1679c:	cmp	r3, #0
   167a0:	beq	16834 <__assert_fail@plt+0x5628>
   167a4:	ldr	r3, [fp, #-16]
   167a8:	cmp	r3, #0
   167ac:	bge	16808 <__assert_fail@plt+0x55fc>
   167b0:	ldr	r3, [fp, #-16]
   167b4:	cmn	r3, #1
   167b8:	bne	167d8 <__assert_fail@plt+0x55cc>
   167bc:	ldr	r3, [fp, #4]
   167c0:	add	r3, r3, #-2147483648	; 0x80000000
   167c4:	cmp	r3, #0
   167c8:	movgt	r3, #1
   167cc:	movle	r3, #0
   167d0:	uxtb	r3, r3
   167d4:	b	16838 <__assert_fail@plt+0x562c>
   167d8:	ldr	r3, [fp, #-16]
   167dc:	mov	r1, r3
   167e0:	mov	r0, #-2147483648	; 0x80000000
   167e4:	bl	18e18 <__assert_fail@plt+0x7c0c>
   167e8:	mov	r3, r0
   167ec:	mov	r2, r3
   167f0:	ldr	r3, [fp, #4]
   167f4:	cmp	r2, r3
   167f8:	movlt	r3, #1
   167fc:	movge	r3, #0
   16800:	uxtb	r3, r3
   16804:	b	16838 <__assert_fail@plt+0x562c>
   16808:	ldr	r1, [fp, #4]
   1680c:	mvn	r0, #-2147483648	; 0x80000000
   16810:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16814:	mov	r3, r0
   16818:	mov	r2, r3
   1681c:	ldr	r3, [fp, #-16]
   16820:	cmp	r2, r3
   16824:	movlt	r3, #1
   16828:	movge	r3, #0
   1682c:	uxtb	r3, r3
   16830:	b	16838 <__assert_fail@plt+0x562c>
   16834:	mov	r3, #0
   16838:	cmp	r3, #0
   1683c:	beq	1685c <__assert_fail@plt+0x5650>
   16840:	ldr	r3, [fp, #-16]
   16844:	mov	r2, r3
   16848:	ldr	r3, [fp, #4]
   1684c:	mul	r3, r3, r2
   16850:	str	r3, [fp, #-20]	; 0xffffffec
   16854:	mov	r3, #1
   16858:	b	16874 <__assert_fail@plt+0x5668>
   1685c:	ldr	r3, [fp, #-16]
   16860:	mov	r2, r3
   16864:	ldr	r3, [fp, #4]
   16868:	mul	r3, r3, r2
   1686c:	str	r3, [fp, #-20]	; 0xffffffec
   16870:	mov	r3, #0
   16874:	cmp	r3, #0
   16878:	beq	16884 <__assert_fail@plt+0x5678>
   1687c:	mvn	r3, #-2147483648	; 0x80000000
   16880:	b	1689c <__assert_fail@plt+0x5690>
   16884:	ldr	r3, [fp, #-20]	; 0xffffffec
   16888:	cmp	r3, #63	; 0x3f
   1688c:	bgt	16898 <__assert_fail@plt+0x568c>
   16890:	mov	r3, #64	; 0x40
   16894:	b	1689c <__assert_fail@plt+0x5690>
   16898:	mov	r3, #0
   1689c:	str	r3, [fp, #-12]
   168a0:	ldr	r3, [fp, #-12]
   168a4:	cmp	r3, #0
   168a8:	beq	168e4 <__assert_fail@plt+0x56d8>
   168ac:	ldr	r1, [fp, #4]
   168b0:	ldr	r0, [fp, #-12]
   168b4:	bl	18e18 <__assert_fail@plt+0x7c0c>
   168b8:	mov	r3, r0
   168bc:	str	r3, [fp, #-16]
   168c0:	ldr	r3, [fp, #-12]
   168c4:	ldr	r1, [fp, #4]
   168c8:	mov	r0, r3
   168cc:	bl	19038 <__assert_fail@plt+0x7e2c>
   168d0:	mov	r3, r1
   168d4:	mov	r2, r3
   168d8:	ldr	r3, [fp, #-12]
   168dc:	sub	r3, r3, r2
   168e0:	str	r3, [fp, #-20]	; 0xffffffec
   168e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168e8:	cmp	r3, #0
   168ec:	bne	168fc <__assert_fail@plt+0x56f0>
   168f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   168f4:	mov	r2, #0
   168f8:	str	r2, [r3]
   168fc:	ldr	r2, [fp, #-16]
   16900:	ldr	r3, [fp, #-8]
   16904:	sub	r2, r2, r3
   16908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1690c:	cmp	r2, r3
   16910:	bge	16b48 <__assert_fail@plt+0x593c>
   16914:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16918:	cmp	r3, #0
   1691c:	bge	16940 <__assert_fail@plt+0x5734>
   16920:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16924:	rsb	r2, r3, #-2147483648	; 0x80000000
   16928:	ldr	r3, [fp, #-8]
   1692c:	cmp	r2, r3
   16930:	movgt	r3, #1
   16934:	movle	r3, #0
   16938:	uxtb	r3, r3
   1693c:	b	1698c <__assert_fail@plt+0x5780>
   16940:	ldr	r3, [fp, #-8]
   16944:	cmp	r3, #0
   16948:	bge	1696c <__assert_fail@plt+0x5760>
   1694c:	ldr	r3, [fp, #-8]
   16950:	rsb	r2, r3, #-2147483648	; 0x80000000
   16954:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16958:	cmp	r2, r3
   1695c:	movgt	r3, #1
   16960:	movle	r3, #0
   16964:	uxtb	r3, r3
   16968:	b	1698c <__assert_fail@plt+0x5780>
   1696c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16970:	mvn	r3, #-2147483648	; 0x80000000
   16974:	sub	r3, r3, r2
   16978:	ldr	r2, [fp, #-8]
   1697c:	cmp	r3, r2
   16980:	movlt	r3, #1
   16984:	movge	r3, #0
   16988:	uxtb	r3, r3
   1698c:	cmp	r3, #0
   16990:	beq	169a8 <__assert_fail@plt+0x579c>
   16994:	ldr	r2, [fp, #-8]
   16998:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1699c:	add	r3, r2, r3
   169a0:	str	r3, [fp, #-16]
   169a4:	b	16b44 <__assert_fail@plt+0x5938>
   169a8:	ldr	r2, [fp, #-8]
   169ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   169b0:	add	r3, r2, r3
   169b4:	str	r3, [fp, #-16]
   169b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   169bc:	cmp	r3, #0
   169c0:	blt	169d4 <__assert_fail@plt+0x57c8>
   169c4:	ldr	r3, [fp, #-16]
   169c8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   169cc:	cmp	r2, r3
   169d0:	blt	16b44 <__assert_fail@plt+0x5938>
   169d4:	ldr	r3, [fp, #4]
   169d8:	cmp	r3, #0
   169dc:	bge	16a6c <__assert_fail@plt+0x5860>
   169e0:	ldr	r3, [fp, #-16]
   169e4:	cmp	r3, #0
   169e8:	bge	16a18 <__assert_fail@plt+0x580c>
   169ec:	ldr	r1, [fp, #4]
   169f0:	mvn	r0, #-2147483648	; 0x80000000
   169f4:	bl	18e18 <__assert_fail@plt+0x7c0c>
   169f8:	mov	r3, r0
   169fc:	mov	r2, r3
   16a00:	ldr	r3, [fp, #-16]
   16a04:	cmp	r2, r3
   16a08:	movgt	r3, #1
   16a0c:	movle	r3, #0
   16a10:	uxtb	r3, r3
   16a14:	b	16b0c <__assert_fail@plt+0x5900>
   16a18:	ldr	r3, [fp, #4]
   16a1c:	cmn	r3, #1
   16a20:	bne	16a40 <__assert_fail@plt+0x5834>
   16a24:	ldr	r3, [fp, #-16]
   16a28:	add	r3, r3, #-2147483648	; 0x80000000
   16a2c:	cmp	r3, #0
   16a30:	movgt	r3, #1
   16a34:	movle	r3, #0
   16a38:	uxtb	r3, r3
   16a3c:	b	16b0c <__assert_fail@plt+0x5900>
   16a40:	ldr	r1, [fp, #4]
   16a44:	mov	r0, #-2147483648	; 0x80000000
   16a48:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16a4c:	mov	r3, r0
   16a50:	mov	r2, r3
   16a54:	ldr	r3, [fp, #-16]
   16a58:	cmp	r2, r3
   16a5c:	movlt	r3, #1
   16a60:	movge	r3, #0
   16a64:	uxtb	r3, r3
   16a68:	b	16b0c <__assert_fail@plt+0x5900>
   16a6c:	ldr	r3, [fp, #4]
   16a70:	cmp	r3, #0
   16a74:	beq	16b08 <__assert_fail@plt+0x58fc>
   16a78:	ldr	r3, [fp, #-16]
   16a7c:	cmp	r3, #0
   16a80:	bge	16adc <__assert_fail@plt+0x58d0>
   16a84:	ldr	r3, [fp, #-16]
   16a88:	cmn	r3, #1
   16a8c:	bne	16aac <__assert_fail@plt+0x58a0>
   16a90:	ldr	r3, [fp, #4]
   16a94:	add	r3, r3, #-2147483648	; 0x80000000
   16a98:	cmp	r3, #0
   16a9c:	movgt	r3, #1
   16aa0:	movle	r3, #0
   16aa4:	uxtb	r3, r3
   16aa8:	b	16b0c <__assert_fail@plt+0x5900>
   16aac:	ldr	r3, [fp, #-16]
   16ab0:	mov	r1, r3
   16ab4:	mov	r0, #-2147483648	; 0x80000000
   16ab8:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16abc:	mov	r3, r0
   16ac0:	mov	r2, r3
   16ac4:	ldr	r3, [fp, #4]
   16ac8:	cmp	r2, r3
   16acc:	movlt	r3, #1
   16ad0:	movge	r3, #0
   16ad4:	uxtb	r3, r3
   16ad8:	b	16b0c <__assert_fail@plt+0x5900>
   16adc:	ldr	r1, [fp, #4]
   16ae0:	mvn	r0, #-2147483648	; 0x80000000
   16ae4:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16ae8:	mov	r3, r0
   16aec:	mov	r2, r3
   16af0:	ldr	r3, [fp, #-16]
   16af4:	cmp	r2, r3
   16af8:	movlt	r3, #1
   16afc:	movge	r3, #0
   16b00:	uxtb	r3, r3
   16b04:	b	16b0c <__assert_fail@plt+0x5900>
   16b08:	mov	r3, #0
   16b0c:	cmp	r3, #0
   16b10:	beq	16b2c <__assert_fail@plt+0x5920>
   16b14:	ldr	r3, [fp, #-16]
   16b18:	mov	r2, r3
   16b1c:	ldr	r3, [fp, #4]
   16b20:	mul	r3, r3, r2
   16b24:	str	r3, [fp, #-20]	; 0xffffffec
   16b28:	b	16b44 <__assert_fail@plt+0x5938>
   16b2c:	ldr	r3, [fp, #-16]
   16b30:	mov	r2, r3
   16b34:	ldr	r3, [fp, #4]
   16b38:	mul	r3, r3, r2
   16b3c:	str	r3, [fp, #-20]	; 0xffffffec
   16b40:	b	16b48 <__assert_fail@plt+0x593c>
   16b44:	bl	16d6c <__assert_fail@plt+0x5b60>
   16b48:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b4c:	mov	r1, r3
   16b50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16b54:	bl	162e0 <__assert_fail@plt+0x50d4>
   16b58:	str	r0, [fp, #-24]	; 0xffffffe8
   16b5c:	ldr	r2, [fp, #-16]
   16b60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b64:	str	r2, [r3]
   16b68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b6c:	mov	r0, r3
   16b70:	sub	sp, fp, #4
   16b74:	pop	{fp, pc}
   16b78:	push	{fp, lr}
   16b7c:	add	fp, sp, #4
   16b80:	sub	sp, sp, #8
   16b84:	str	r0, [fp, #-8]
   16b88:	mov	r1, #1
   16b8c:	ldr	r0, [fp, #-8]
   16b90:	bl	16bd0 <__assert_fail@plt+0x59c4>
   16b94:	mov	r3, r0
   16b98:	mov	r0, r3
   16b9c:	sub	sp, fp, #4
   16ba0:	pop	{fp, pc}
   16ba4:	push	{fp, lr}
   16ba8:	add	fp, sp, #4
   16bac:	sub	sp, sp, #8
   16bb0:	str	r0, [fp, #-8]
   16bb4:	mov	r1, #1
   16bb8:	ldr	r0, [fp, #-8]
   16bbc:	bl	16c0c <__assert_fail@plt+0x5a00>
   16bc0:	mov	r3, r0
   16bc4:	mov	r0, r3
   16bc8:	sub	sp, fp, #4
   16bcc:	pop	{fp, pc}
   16bd0:	push	{fp, lr}
   16bd4:	add	fp, sp, #4
   16bd8:	sub	sp, sp, #8
   16bdc:	str	r0, [fp, #-8]
   16be0:	str	r1, [fp, #-12]
   16be4:	ldr	r1, [fp, #-12]
   16be8:	ldr	r0, [fp, #-8]
   16bec:	bl	175b0 <__assert_fail@plt+0x63a4>
   16bf0:	mov	r3, r0
   16bf4:	mov	r0, r3
   16bf8:	bl	16220 <__assert_fail@plt+0x5014>
   16bfc:	mov	r3, r0
   16c00:	mov	r0, r3
   16c04:	sub	sp, fp, #4
   16c08:	pop	{fp, pc}
   16c0c:	push	{fp, lr}
   16c10:	add	fp, sp, #4
   16c14:	sub	sp, sp, #8
   16c18:	str	r0, [fp, #-8]
   16c1c:	str	r1, [fp, #-12]
   16c20:	ldr	r1, [fp, #-12]
   16c24:	ldr	r0, [fp, #-8]
   16c28:	bl	17c80 <__assert_fail@plt+0x6a74>
   16c2c:	mov	r3, r0
   16c30:	mov	r0, r3
   16c34:	bl	16220 <__assert_fail@plt+0x5014>
   16c38:	mov	r3, r0
   16c3c:	mov	r0, r3
   16c40:	sub	sp, fp, #4
   16c44:	pop	{fp, pc}
   16c48:	push	{fp, lr}
   16c4c:	add	fp, sp, #4
   16c50:	sub	sp, sp, #8
   16c54:	str	r0, [fp, #-8]
   16c58:	str	r1, [fp, #-12]
   16c5c:	ldr	r0, [fp, #-12]
   16c60:	bl	16250 <__assert_fail@plt+0x5044>
   16c64:	mov	r3, r0
   16c68:	ldr	r2, [fp, #-12]
   16c6c:	ldr	r1, [fp, #-8]
   16c70:	mov	r0, r3
   16c74:	bl	10fa8 <memcpy@plt>
   16c78:	mov	r3, r0
   16c7c:	mov	r0, r3
   16c80:	sub	sp, fp, #4
   16c84:	pop	{fp, pc}
   16c88:	push	{fp, lr}
   16c8c:	add	fp, sp, #4
   16c90:	sub	sp, sp, #8
   16c94:	str	r0, [fp, #-8]
   16c98:	str	r1, [fp, #-12]
   16c9c:	ldr	r0, [fp, #-12]
   16ca0:	bl	16284 <__assert_fail@plt+0x5078>
   16ca4:	mov	r3, r0
   16ca8:	mov	r0, r3
   16cac:	ldr	r3, [fp, #-12]
   16cb0:	mov	r2, r3
   16cb4:	ldr	r1, [fp, #-8]
   16cb8:	bl	10fa8 <memcpy@plt>
   16cbc:	mov	r3, r0
   16cc0:	mov	r0, r3
   16cc4:	sub	sp, fp, #4
   16cc8:	pop	{fp, pc}
   16ccc:	push	{fp, lr}
   16cd0:	add	fp, sp, #4
   16cd4:	sub	sp, sp, #16
   16cd8:	str	r0, [fp, #-16]
   16cdc:	str	r1, [fp, #-20]	; 0xffffffec
   16ce0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ce4:	add	r3, r3, #1
   16ce8:	mov	r0, r3
   16cec:	bl	16284 <__assert_fail@plt+0x5078>
   16cf0:	mov	r3, r0
   16cf4:	str	r3, [fp, #-8]
   16cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cfc:	ldr	r2, [fp, #-8]
   16d00:	add	r3, r2, r3
   16d04:	mov	r2, #0
   16d08:	strb	r2, [r3]
   16d0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d10:	mov	r2, r3
   16d14:	ldr	r1, [fp, #-16]
   16d18:	ldr	r0, [fp, #-8]
   16d1c:	bl	10fa8 <memcpy@plt>
   16d20:	mov	r3, r0
   16d24:	mov	r0, r3
   16d28:	sub	sp, fp, #4
   16d2c:	pop	{fp, pc}
   16d30:	push	{fp, lr}
   16d34:	add	fp, sp, #4
   16d38:	sub	sp, sp, #8
   16d3c:	str	r0, [fp, #-8]
   16d40:	ldr	r0, [fp, #-8]
   16d44:	bl	110ec <strlen@plt>
   16d48:	mov	r3, r0
   16d4c:	add	r3, r3, #1
   16d50:	mov	r1, r3
   16d54:	ldr	r0, [fp, #-8]
   16d58:	bl	16c48 <__assert_fail@plt+0x5a3c>
   16d5c:	mov	r3, r0
   16d60:	mov	r0, r3
   16d64:	sub	sp, fp, #4
   16d68:	pop	{fp, pc}
   16d6c:	push	{r4, r5, fp, lr}
   16d70:	add	fp, sp, #12
   16d74:	ldr	r3, [pc, #32]	; 16d9c <__assert_fail@plt+0x5b90>
   16d78:	ldr	r4, [r3]
   16d7c:	ldr	r0, [pc, #28]	; 16da0 <__assert_fail@plt+0x5b94>
   16d80:	bl	110d4 <gettext@plt>
   16d84:	mov	r3, r0
   16d88:	ldr	r2, [pc, #20]	; 16da4 <__assert_fail@plt+0x5b98>
   16d8c:	mov	r1, #0
   16d90:	mov	r0, r4
   16d94:	bl	11068 <error@plt>
   16d98:	bl	111dc <abort@plt>
   16d9c:	andeq	fp, r2, r4, lsr #2
   16da0:	andeq	sl, r1, r4, asr r0
   16da4:	andeq	sl, r1, r8, rrx
   16da8:	push	{fp, lr}
   16dac:	add	fp, sp, #4
   16db0:	sub	sp, sp, #24
   16db4:	str	r0, [fp, #-16]
   16db8:	str	r1, [fp, #-20]	; 0xffffffec
   16dbc:	str	r2, [fp, #-24]	; 0xffffffe8
   16dc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16dc4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dc8:	ldr	r0, [fp, #-16]
   16dcc:	bl	17ecc <__assert_fail@plt+0x6cc0>
   16dd0:	str	r0, [fp, #-8]
   16dd4:	ldr	r3, [fp, #-8]
   16dd8:	cmn	r3, #1
   16ddc:	bne	16df8 <__assert_fail@plt+0x5bec>
   16de0:	bl	11110 <__errno_location@plt>
   16de4:	mov	r3, r0
   16de8:	ldr	r3, [r3]
   16dec:	cmp	r3, #12
   16df0:	bne	16df8 <__assert_fail@plt+0x5bec>
   16df4:	bl	16d6c <__assert_fail@plt+0x5b60>
   16df8:	ldr	r3, [fp, #-8]
   16dfc:	mov	r0, r3
   16e00:	sub	sp, fp, #4
   16e04:	pop	{fp, pc}
   16e08:	push	{fp, lr}
   16e0c:	add	fp, sp, #4
   16e10:	sub	sp, sp, #16
   16e14:	str	r0, [fp, #-16]
   16e18:	str	r1, [fp, #-20]	; 0xffffffec
   16e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e20:	cmp	r3, #0
   16e24:	bge	16e58 <__assert_fail@plt+0x5c4c>
   16e28:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e2c:	mov	r0, #0
   16e30:	bl	18e18 <__assert_fail@plt+0x7c0c>
   16e34:	mov	r3, r0
   16e38:	mov	r2, r3
   16e3c:	ldr	r3, [fp, #-16]
   16e40:	ldr	r3, [r3]
   16e44:	cmp	r2, r3
   16e48:	movcc	r3, #1
   16e4c:	movcs	r3, #0
   16e50:	uxtb	r3, r3
   16e54:	b	16ea0 <__assert_fail@plt+0x5c94>
   16e58:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e5c:	cmp	r3, #0
   16e60:	beq	16e94 <__assert_fail@plt+0x5c88>
   16e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e68:	mov	r1, r3
   16e6c:	mvn	r0, #0
   16e70:	bl	18c0c <__assert_fail@plt+0x7a00>
   16e74:	mov	r3, r0
   16e78:	mov	r2, r3
   16e7c:	ldr	r3, [fp, #-16]
   16e80:	ldr	r3, [r3]
   16e84:	cmp	r2, r3
   16e88:	bcs	16e94 <__assert_fail@plt+0x5c88>
   16e8c:	mov	r3, #1
   16e90:	b	16e98 <__assert_fail@plt+0x5c8c>
   16e94:	mov	r3, #0
   16e98:	and	r3, r3, #1
   16e9c:	uxtb	r3, r3
   16ea0:	cmp	r3, #0
   16ea4:	beq	16ec4 <__assert_fail@plt+0x5cb8>
   16ea8:	ldr	r3, [fp, #-16]
   16eac:	ldr	r3, [r3]
   16eb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   16eb4:	mul	r3, r2, r3
   16eb8:	str	r3, [fp, #-8]
   16ebc:	mov	r3, #1
   16ec0:	b	16edc <__assert_fail@plt+0x5cd0>
   16ec4:	ldr	r3, [fp, #-16]
   16ec8:	ldr	r3, [r3]
   16ecc:	ldr	r2, [fp, #-20]	; 0xffffffec
   16ed0:	mul	r3, r2, r3
   16ed4:	str	r3, [fp, #-8]
   16ed8:	mov	r3, #0
   16edc:	cmp	r3, #0
   16ee0:	beq	16ef8 <__assert_fail@plt+0x5cec>
   16ee4:	ldr	r3, [fp, #-16]
   16ee8:	mvn	r2, #0
   16eec:	str	r2, [r3]
   16ef0:	mov	r3, #1
   16ef4:	b	16f08 <__assert_fail@plt+0x5cfc>
   16ef8:	ldr	r2, [fp, #-8]
   16efc:	ldr	r3, [fp, #-16]
   16f00:	str	r2, [r3]
   16f04:	mov	r3, #0
   16f08:	mov	r0, r3
   16f0c:	sub	sp, fp, #4
   16f10:	pop	{fp, pc}
   16f14:	push	{fp, lr}
   16f18:	add	fp, sp, #4
   16f1c:	sub	sp, sp, #24
   16f20:	str	r0, [fp, #-16]
   16f24:	str	r1, [fp, #-20]	; 0xffffffec
   16f28:	str	r2, [fp, #-24]	; 0xffffffe8
   16f2c:	mov	r3, #0
   16f30:	str	r3, [fp, #-8]
   16f34:	b	16f54 <__assert_fail@plt+0x5d48>
   16f38:	ldr	r1, [fp, #-20]	; 0xffffffec
   16f3c:	ldr	r0, [fp, #-16]
   16f40:	bl	16e08 <__assert_fail@plt+0x5bfc>
   16f44:	mov	r2, r0
   16f48:	ldr	r3, [fp, #-8]
   16f4c:	orr	r3, r3, r2
   16f50:	str	r3, [fp, #-8]
   16f54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f58:	sub	r2, r3, #1
   16f5c:	str	r2, [fp, #-24]	; 0xffffffe8
   16f60:	cmp	r3, #0
   16f64:	bne	16f38 <__assert_fail@plt+0x5d2c>
   16f68:	ldr	r3, [fp, #-8]
   16f6c:	mov	r0, r3
   16f70:	sub	sp, fp, #4
   16f74:	pop	{fp, pc}
   16f78:	push	{fp, lr}
   16f7c:	add	fp, sp, #4
   16f80:	sub	sp, sp, #56	; 0x38
   16f84:	str	r0, [fp, #-48]	; 0xffffffd0
   16f88:	str	r1, [fp, #-52]	; 0xffffffcc
   16f8c:	str	r2, [fp, #-56]	; 0xffffffc8
   16f90:	str	r3, [fp, #-60]	; 0xffffffc4
   16f94:	mov	r3, #0
   16f98:	str	r3, [fp, #-8]
   16f9c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16fa0:	cmp	r3, #0
   16fa4:	blt	16fb4 <__assert_fail@plt+0x5da8>
   16fa8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16fac:	cmp	r3, #36	; 0x24
   16fb0:	ble	16fc8 <__assert_fail@plt+0x5dbc>
   16fb4:	ldr	r3, [pc, #1512]	; 175a4 <__assert_fail@plt+0x6398>
   16fb8:	mov	r2, #85	; 0x55
   16fbc:	ldr	r1, [pc, #1508]	; 175a8 <__assert_fail@plt+0x639c>
   16fc0:	ldr	r0, [pc, #1508]	; 175ac <__assert_fail@plt+0x63a0>
   16fc4:	bl	1120c <__assert_fail@plt>
   16fc8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16fcc:	cmp	r3, #0
   16fd0:	bne	16fdc <__assert_fail@plt+0x5dd0>
   16fd4:	sub	r3, fp, #36	; 0x24
   16fd8:	b	16fe0 <__assert_fail@plt+0x5dd4>
   16fdc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16fe0:	str	r3, [fp, #-32]	; 0xffffffe0
   16fe4:	bl	11110 <__errno_location@plt>
   16fe8:	mov	r2, r0
   16fec:	mov	r3, #0
   16ff0:	str	r3, [r2]
   16ff4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16ff8:	str	r3, [fp, #-12]
   16ffc:	ldr	r3, [fp, #-12]
   17000:	ldrb	r3, [r3]
   17004:	strb	r3, [fp, #-13]
   17008:	b	17024 <__assert_fail@plt+0x5e18>
   1700c:	ldr	r3, [fp, #-12]
   17010:	add	r3, r3, #1
   17014:	str	r3, [fp, #-12]
   17018:	ldr	r3, [fp, #-12]
   1701c:	ldrb	r3, [r3]
   17020:	strb	r3, [fp, #-13]
   17024:	bl	110bc <__ctype_b_loc@plt>
   17028:	mov	r3, r0
   1702c:	ldr	r2, [r3]
   17030:	ldrb	r3, [fp, #-13]
   17034:	lsl	r3, r3, #1
   17038:	add	r3, r2, r3
   1703c:	ldrh	r3, [r3]
   17040:	and	r3, r3, #8192	; 0x2000
   17044:	cmp	r3, #0
   17048:	bne	1700c <__assert_fail@plt+0x5e00>
   1704c:	ldrb	r3, [fp, #-13]
   17050:	cmp	r3, #45	; 0x2d
   17054:	bne	17060 <__assert_fail@plt+0x5e54>
   17058:	mov	r3, #4
   1705c:	b	17598 <__assert_fail@plt+0x638c>
   17060:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17064:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17068:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1706c:	bl	110e0 <strtoul@plt>
   17070:	mov	r3, r0
   17074:	str	r3, [fp, #-40]	; 0xffffffd8
   17078:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1707c:	ldr	r2, [r3]
   17080:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17084:	cmp	r2, r3
   17088:	bne	170e4 <__assert_fail@plt+0x5ed8>
   1708c:	ldr	r3, [fp, #4]
   17090:	cmp	r3, #0
   17094:	beq	170dc <__assert_fail@plt+0x5ed0>
   17098:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1709c:	ldr	r3, [r3]
   170a0:	ldrb	r3, [r3]
   170a4:	cmp	r3, #0
   170a8:	beq	170dc <__assert_fail@plt+0x5ed0>
   170ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170b0:	ldr	r3, [r3]
   170b4:	ldrb	r3, [r3]
   170b8:	mov	r1, r3
   170bc:	ldr	r0, [fp, #4]
   170c0:	bl	110f8 <strchr@plt>
   170c4:	mov	r3, r0
   170c8:	cmp	r3, #0
   170cc:	beq	170dc <__assert_fail@plt+0x5ed0>
   170d0:	mov	r3, #1
   170d4:	str	r3, [fp, #-40]	; 0xffffffd8
   170d8:	b	1711c <__assert_fail@plt+0x5f10>
   170dc:	mov	r3, #4
   170e0:	b	17598 <__assert_fail@plt+0x638c>
   170e4:	bl	11110 <__errno_location@plt>
   170e8:	mov	r3, r0
   170ec:	ldr	r3, [r3]
   170f0:	cmp	r3, #0
   170f4:	beq	1711c <__assert_fail@plt+0x5f10>
   170f8:	bl	11110 <__errno_location@plt>
   170fc:	mov	r3, r0
   17100:	ldr	r3, [r3]
   17104:	cmp	r3, #34	; 0x22
   17108:	beq	17114 <__assert_fail@plt+0x5f08>
   1710c:	mov	r3, #4
   17110:	b	17598 <__assert_fail@plt+0x638c>
   17114:	mov	r3, #1
   17118:	str	r3, [fp, #-8]
   1711c:	ldr	r3, [fp, #4]
   17120:	cmp	r3, #0
   17124:	bne	1713c <__assert_fail@plt+0x5f30>
   17128:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1712c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17130:	str	r2, [r3]
   17134:	ldr	r3, [fp, #-8]
   17138:	b	17598 <__assert_fail@plt+0x638c>
   1713c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17140:	ldr	r3, [r3]
   17144:	ldrb	r3, [r3]
   17148:	cmp	r3, #0
   1714c:	beq	17588 <__assert_fail@plt+0x637c>
   17150:	mov	r3, #1024	; 0x400
   17154:	str	r3, [fp, #-20]	; 0xffffffec
   17158:	mov	r3, #1
   1715c:	str	r3, [fp, #-24]	; 0xffffffe8
   17160:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17164:	ldr	r3, [r3]
   17168:	ldrb	r3, [r3]
   1716c:	mov	r1, r3
   17170:	ldr	r0, [fp, #4]
   17174:	bl	110f8 <strchr@plt>
   17178:	mov	r3, r0
   1717c:	cmp	r3, #0
   17180:	bne	1719c <__assert_fail@plt+0x5f90>
   17184:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17188:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1718c:	str	r2, [r3]
   17190:	ldr	r3, [fp, #-8]
   17194:	orr	r3, r3, #2
   17198:	b	17598 <__assert_fail@plt+0x638c>
   1719c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171a0:	ldr	r3, [r3]
   171a4:	ldrb	r3, [r3]
   171a8:	sub	r3, r3, #69	; 0x45
   171ac:	cmp	r3, #47	; 0x2f
   171b0:	ldrls	pc, [pc, r3, lsl #2]
   171b4:	b	17300 <__assert_fail@plt+0x60f4>
   171b8:	andeq	r7, r1, r8, ror r2
   171bc:	andeq	r7, r1, r0, lsl #6
   171c0:	andeq	r7, r1, r8, ror r2
   171c4:	andeq	r7, r1, r0, lsl #6
   171c8:	andeq	r7, r1, r0, lsl #6
   171cc:	andeq	r7, r1, r0, lsl #6
   171d0:	andeq	r7, r1, r8, ror r2
   171d4:	andeq	r7, r1, r0, lsl #6
   171d8:	andeq	r7, r1, r8, ror r2
   171dc:	andeq	r7, r1, r0, lsl #6
   171e0:	andeq	r7, r1, r0, lsl #6
   171e4:	andeq	r7, r1, r8, ror r2
   171e8:	andeq	r7, r1, r0, lsl #6
   171ec:	andeq	r7, r1, r0, lsl #6
   171f0:	andeq	r7, r1, r0, lsl #6
   171f4:	andeq	r7, r1, r8, ror r2
   171f8:	andeq	r7, r1, r0, lsl #6
   171fc:	andeq	r7, r1, r0, lsl #6
   17200:	andeq	r7, r1, r0, lsl #6
   17204:	andeq	r7, r1, r0, lsl #6
   17208:	andeq	r7, r1, r8, ror r2
   1720c:	andeq	r7, r1, r8, ror r2
   17210:	andeq	r7, r1, r0, lsl #6
   17214:	andeq	r7, r1, r0, lsl #6
   17218:	andeq	r7, r1, r0, lsl #6
   1721c:	andeq	r7, r1, r0, lsl #6
   17220:	andeq	r7, r1, r0, lsl #6
   17224:	andeq	r7, r1, r0, lsl #6
   17228:	andeq	r7, r1, r0, lsl #6
   1722c:	andeq	r7, r1, r0, lsl #6
   17230:	andeq	r7, r1, r0, lsl #6
   17234:	andeq	r7, r1, r0, lsl #6
   17238:	andeq	r7, r1, r0, lsl #6
   1723c:	andeq	r7, r1, r0, lsl #6
   17240:	andeq	r7, r1, r8, ror r2
   17244:	andeq	r7, r1, r0, lsl #6
   17248:	andeq	r7, r1, r0, lsl #6
   1724c:	andeq	r7, r1, r0, lsl #6
   17250:	andeq	r7, r1, r8, ror r2
   17254:	andeq	r7, r1, r0, lsl #6
   17258:	andeq	r7, r1, r8, ror r2
   1725c:	andeq	r7, r1, r0, lsl #6
   17260:	andeq	r7, r1, r0, lsl #6
   17264:	andeq	r7, r1, r0, lsl #6
   17268:	andeq	r7, r1, r0, lsl #6
   1726c:	andeq	r7, r1, r0, lsl #6
   17270:	andeq	r7, r1, r0, lsl #6
   17274:	andeq	r7, r1, r8, ror r2
   17278:	mov	r1, #48	; 0x30
   1727c:	ldr	r0, [fp, #4]
   17280:	bl	110f8 <strchr@plt>
   17284:	mov	r3, r0
   17288:	cmp	r3, #0
   1728c:	beq	17300 <__assert_fail@plt+0x60f4>
   17290:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17294:	ldr	r3, [r3]
   17298:	add	r3, r3, #1
   1729c:	ldrb	r3, [r3]
   172a0:	cmp	r3, #68	; 0x44
   172a4:	beq	172e4 <__assert_fail@plt+0x60d8>
   172a8:	cmp	r3, #105	; 0x69
   172ac:	beq	172bc <__assert_fail@plt+0x60b0>
   172b0:	cmp	r3, #66	; 0x42
   172b4:	beq	172e4 <__assert_fail@plt+0x60d8>
   172b8:	b	17300 <__assert_fail@plt+0x60f4>
   172bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172c0:	ldr	r3, [r3]
   172c4:	add	r3, r3, #2
   172c8:	ldrb	r3, [r3]
   172cc:	cmp	r3, #66	; 0x42
   172d0:	bne	172fc <__assert_fail@plt+0x60f0>
   172d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172d8:	add	r3, r3, #2
   172dc:	str	r3, [fp, #-24]	; 0xffffffe8
   172e0:	b	172fc <__assert_fail@plt+0x60f0>
   172e4:	mov	r3, #1000	; 0x3e8
   172e8:	str	r3, [fp, #-20]	; 0xffffffec
   172ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172f0:	add	r3, r3, #1
   172f4:	str	r3, [fp, #-24]	; 0xffffffe8
   172f8:	b	17300 <__assert_fail@plt+0x60f4>
   172fc:	nop			; (mov r0, r0)
   17300:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17304:	ldr	r3, [r3]
   17308:	ldrb	r3, [r3]
   1730c:	sub	r3, r3, #66	; 0x42
   17310:	cmp	r3, #53	; 0x35
   17314:	ldrls	pc, [pc, r3, lsl #2]
   17318:	b	17528 <__assert_fail@plt+0x631c>
   1731c:	andeq	r7, r1, ip, lsl #8
   17320:	andeq	r7, r1, r8, lsr #10
   17324:	andeq	r7, r1, r8, lsr #10
   17328:	andeq	r7, r1, r0, lsr r4
   1732c:	andeq	r7, r1, r8, lsr #10
   17330:	andeq	r7, r1, ip, asr #8
   17334:	andeq	r7, r1, r8, lsr #10
   17338:	andeq	r7, r1, r8, lsr #10
   1733c:	andeq	r7, r1, r8, lsr #10
   17340:	andeq	r7, r1, r8, ror #8
   17344:	andeq	r7, r1, r8, lsr #10
   17348:	andeq	r7, r1, r4, lsl #9
   1734c:	andeq	r7, r1, r8, lsr #10
   17350:	andeq	r7, r1, r8, lsr #10
   17354:	andeq	r7, r1, r0, lsr #9
   17358:	andeq	r7, r1, r8, lsr #10
   1735c:	andeq	r7, r1, r8, lsr #10
   17360:	andeq	r7, r1, r8, lsr #10
   17364:			; <UNDEFINED> instruction: 0x000174bc
   17368:	andeq	r7, r1, r8, lsr #10
   1736c:	andeq	r7, r1, r8, lsr #10
   17370:	andeq	r7, r1, r8, lsr #10
   17374:	andeq	r7, r1, r8, lsr #10
   17378:	strdeq	r7, [r1], -r0
   1737c:	andeq	r7, r1, ip, lsl #10
   17380:	andeq	r7, r1, r8, lsr #10
   17384:	andeq	r7, r1, r8, lsr #10
   17388:	andeq	r7, r1, r8, lsr #10
   1738c:	andeq	r7, r1, r8, lsr #10
   17390:	andeq	r7, r1, r8, lsr #10
   17394:	andeq	r7, r1, r8, lsr #10
   17398:	andeq	r7, r1, r8, lsr #10
   1739c:	strdeq	r7, [r1], -r4
   173a0:	andeq	r7, r1, r4, lsr #8
   173a4:	andeq	r7, r1, r8, lsr #10
   173a8:	andeq	r7, r1, r8, lsr #10
   173ac:	andeq	r7, r1, r8, lsr #10
   173b0:	andeq	r7, r1, ip, asr #8
   173b4:	andeq	r7, r1, r8, lsr #10
   173b8:	andeq	r7, r1, r8, lsr #10
   173bc:	andeq	r7, r1, r8, lsr #10
   173c0:	andeq	r7, r1, r8, ror #8
   173c4:	andeq	r7, r1, r8, lsr #10
   173c8:	andeq	r7, r1, r4, lsl #9
   173cc:	andeq	r7, r1, r8, lsr #10
   173d0:	andeq	r7, r1, r8, lsr #10
   173d4:	andeq	r7, r1, r8, lsr #10
   173d8:	andeq	r7, r1, r8, lsr #10
   173dc:	andeq	r7, r1, r8, lsr #10
   173e0:	andeq	r7, r1, r8, lsr #10
   173e4:			; <UNDEFINED> instruction: 0x000174bc
   173e8:	andeq	r7, r1, r8, lsr #10
   173ec:	andeq	r7, r1, r8, lsr #10
   173f0:	ldrdeq	r7, [r1], -r8
   173f4:	sub	r3, fp, #40	; 0x28
   173f8:	mov	r1, #512	; 0x200
   173fc:	mov	r0, r3
   17400:	bl	16e08 <__assert_fail@plt+0x5bfc>
   17404:	str	r0, [fp, #-28]	; 0xffffffe4
   17408:	b	17540 <__assert_fail@plt+0x6334>
   1740c:	sub	r3, fp, #40	; 0x28
   17410:	mov	r1, #1024	; 0x400
   17414:	mov	r0, r3
   17418:	bl	16e08 <__assert_fail@plt+0x5bfc>
   1741c:	str	r0, [fp, #-28]	; 0xffffffe4
   17420:	b	17540 <__assert_fail@plt+0x6334>
   17424:	mov	r3, #0
   17428:	str	r3, [fp, #-28]	; 0xffffffe4
   1742c:	b	17540 <__assert_fail@plt+0x6334>
   17430:	sub	r3, fp, #40	; 0x28
   17434:	mov	r2, #6
   17438:	ldr	r1, [fp, #-20]	; 0xffffffec
   1743c:	mov	r0, r3
   17440:	bl	16f14 <__assert_fail@plt+0x5d08>
   17444:	str	r0, [fp, #-28]	; 0xffffffe4
   17448:	b	17540 <__assert_fail@plt+0x6334>
   1744c:	sub	r3, fp, #40	; 0x28
   17450:	mov	r2, #3
   17454:	ldr	r1, [fp, #-20]	; 0xffffffec
   17458:	mov	r0, r3
   1745c:	bl	16f14 <__assert_fail@plt+0x5d08>
   17460:	str	r0, [fp, #-28]	; 0xffffffe4
   17464:	b	17540 <__assert_fail@plt+0x6334>
   17468:	sub	r3, fp, #40	; 0x28
   1746c:	mov	r2, #1
   17470:	ldr	r1, [fp, #-20]	; 0xffffffec
   17474:	mov	r0, r3
   17478:	bl	16f14 <__assert_fail@plt+0x5d08>
   1747c:	str	r0, [fp, #-28]	; 0xffffffe4
   17480:	b	17540 <__assert_fail@plt+0x6334>
   17484:	sub	r3, fp, #40	; 0x28
   17488:	mov	r2, #2
   1748c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17490:	mov	r0, r3
   17494:	bl	16f14 <__assert_fail@plt+0x5d08>
   17498:	str	r0, [fp, #-28]	; 0xffffffe4
   1749c:	b	17540 <__assert_fail@plt+0x6334>
   174a0:	sub	r3, fp, #40	; 0x28
   174a4:	mov	r2, #5
   174a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   174ac:	mov	r0, r3
   174b0:	bl	16f14 <__assert_fail@plt+0x5d08>
   174b4:	str	r0, [fp, #-28]	; 0xffffffe4
   174b8:	b	17540 <__assert_fail@plt+0x6334>
   174bc:	sub	r3, fp, #40	; 0x28
   174c0:	mov	r2, #4
   174c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   174c8:	mov	r0, r3
   174cc:	bl	16f14 <__assert_fail@plt+0x5d08>
   174d0:	str	r0, [fp, #-28]	; 0xffffffe4
   174d4:	b	17540 <__assert_fail@plt+0x6334>
   174d8:	sub	r3, fp, #40	; 0x28
   174dc:	mov	r1, #2
   174e0:	mov	r0, r3
   174e4:	bl	16e08 <__assert_fail@plt+0x5bfc>
   174e8:	str	r0, [fp, #-28]	; 0xffffffe4
   174ec:	b	17540 <__assert_fail@plt+0x6334>
   174f0:	sub	r3, fp, #40	; 0x28
   174f4:	mov	r2, #8
   174f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   174fc:	mov	r0, r3
   17500:	bl	16f14 <__assert_fail@plt+0x5d08>
   17504:	str	r0, [fp, #-28]	; 0xffffffe4
   17508:	b	17540 <__assert_fail@plt+0x6334>
   1750c:	sub	r3, fp, #40	; 0x28
   17510:	mov	r2, #7
   17514:	ldr	r1, [fp, #-20]	; 0xffffffec
   17518:	mov	r0, r3
   1751c:	bl	16f14 <__assert_fail@plt+0x5d08>
   17520:	str	r0, [fp, #-28]	; 0xffffffe4
   17524:	b	17540 <__assert_fail@plt+0x6334>
   17528:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1752c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17530:	str	r2, [r3]
   17534:	ldr	r3, [fp, #-8]
   17538:	orr	r3, r3, #2
   1753c:	b	17598 <__assert_fail@plt+0x638c>
   17540:	ldr	r2, [fp, #-8]
   17544:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17548:	orr	r3, r2, r3
   1754c:	str	r3, [fp, #-8]
   17550:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17554:	ldr	r2, [r3]
   17558:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1755c:	add	r2, r2, r3
   17560:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17564:	str	r2, [r3]
   17568:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1756c:	ldr	r3, [r3]
   17570:	ldrb	r3, [r3]
   17574:	cmp	r3, #0
   17578:	beq	17588 <__assert_fail@plt+0x637c>
   1757c:	ldr	r3, [fp, #-8]
   17580:	orr	r3, r3, #2
   17584:	str	r3, [fp, #-8]
   17588:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1758c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17590:	str	r2, [r3]
   17594:	ldr	r3, [fp, #-8]
   17598:	mov	r0, r3
   1759c:	sub	sp, fp, #4
   175a0:	pop	{fp, pc}
   175a4:	andeq	sl, r1, r4, lsr #1
   175a8:	andeq	sl, r1, ip, rrx
   175ac:	andeq	sl, r1, ip, ror r0
   175b0:	push	{r4, r5, fp, lr}
   175b4:	add	fp, sp, #12
   175b8:	sub	sp, sp, #16
   175bc:	str	r0, [fp, #-24]	; 0xffffffe8
   175c0:	str	r1, [fp, #-28]	; 0xffffffe4
   175c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c8:	cmp	r3, #0
   175cc:	beq	175dc <__assert_fail@plt+0x63d0>
   175d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175d4:	cmp	r3, #0
   175d8:	bne	175ec <__assert_fail@plt+0x63e0>
   175dc:	mov	r3, #1
   175e0:	str	r3, [fp, #-28]	; 0xffffffe4
   175e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175e8:	str	r3, [fp, #-24]	; 0xffffffe8
   175ec:	mov	r1, #0
   175f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   175f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   175f8:	umull	r2, r3, r2, r3
   175fc:	mov	r4, r3
   17600:	mov	r5, #0
   17604:	cmp	r4, #0
   17608:	beq	17610 <__assert_fail@plt+0x6404>
   1760c:	mov	r1, #1
   17610:	cmp	r2, #0
   17614:	bge	1761c <__assert_fail@plt+0x6410>
   17618:	mov	r1, #1
   1761c:	mov	r3, r2
   17620:	str	r3, [fp, #-20]	; 0xffffffec
   17624:	mov	r3, r1
   17628:	and	r3, r3, #1
   1762c:	uxtb	r3, r3
   17630:	cmp	r3, #0
   17634:	beq	17650 <__assert_fail@plt+0x6444>
   17638:	bl	11110 <__errno_location@plt>
   1763c:	mov	r2, r0
   17640:	mov	r3, #12
   17644:	str	r3, [r2]
   17648:	mov	r3, #0
   1764c:	b	17668 <__assert_fail@plt+0x645c>
   17650:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17654:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17658:	bl	10f0c <calloc@plt>
   1765c:	mov	r3, r0
   17660:	str	r3, [fp, #-16]
   17664:	ldr	r3, [fp, #-16]
   17668:	mov	r0, r3
   1766c:	sub	sp, fp, #12
   17670:	pop	{r4, r5, fp, pc}
   17674:	push	{r4, r5, fp, lr}
   17678:	add	fp, sp, #12
   1767c:	sub	sp, sp, #16
   17680:	str	r0, [fp, #-24]	; 0xffffffe8
   17684:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17688:	cmp	r3, #0
   1768c:	bne	17698 <__assert_fail@plt+0x648c>
   17690:	mov	r3, #1
   17694:	str	r3, [fp, #-24]	; 0xffffffe8
   17698:	mov	r1, #0
   1769c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   176a0:	mov	r2, r3
   176a4:	mov	r3, #0
   176a8:	mov	r4, r3
   176ac:	mov	r5, #0
   176b0:	cmp	r4, #0
   176b4:	beq	176bc <__assert_fail@plt+0x64b0>
   176b8:	mov	r1, #1
   176bc:	cmp	r2, #0
   176c0:	bge	176c8 <__assert_fail@plt+0x64bc>
   176c4:	mov	r1, #1
   176c8:	mov	r3, r2
   176cc:	str	r3, [fp, #-20]	; 0xffffffec
   176d0:	mov	r3, r1
   176d4:	and	r3, r3, #1
   176d8:	uxtb	r3, r3
   176dc:	cmp	r3, #0
   176e0:	beq	176fc <__assert_fail@plt+0x64f0>
   176e4:	bl	11110 <__errno_location@plt>
   176e8:	mov	r2, r0
   176ec:	mov	r3, #12
   176f0:	str	r3, [r2]
   176f4:	mov	r3, #0
   176f8:	b	17710 <__assert_fail@plt+0x6504>
   176fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17700:	bl	11080 <malloc@plt>
   17704:	mov	r3, r0
   17708:	str	r3, [fp, #-16]
   1770c:	ldr	r3, [fp, #-16]
   17710:	mov	r0, r3
   17714:	sub	sp, fp, #12
   17718:	pop	{r4, r5, fp, pc}
   1771c:	push	{r4, r5, fp, lr}
   17720:	add	fp, sp, #12
   17724:	sub	sp, sp, #16
   17728:	str	r0, [fp, #-24]	; 0xffffffe8
   1772c:	str	r1, [fp, #-28]	; 0xffffffe4
   17730:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17734:	cmp	r3, #0
   17738:	bne	1774c <__assert_fail@plt+0x6540>
   1773c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17740:	bl	17674 <__assert_fail@plt+0x6468>
   17744:	mov	r3, r0
   17748:	b	177e0 <__assert_fail@plt+0x65d4>
   1774c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17750:	cmp	r3, #0
   17754:	bne	17768 <__assert_fail@plt+0x655c>
   17758:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1775c:	bl	12ccc <__assert_fail@plt+0x1ac0>
   17760:	mov	r3, #0
   17764:	b	177e0 <__assert_fail@plt+0x65d4>
   17768:	mov	r1, #0
   1776c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17770:	mov	r2, r3
   17774:	mov	r3, #0
   17778:	mov	r4, r3
   1777c:	mov	r5, #0
   17780:	cmp	r4, #0
   17784:	beq	1778c <__assert_fail@plt+0x6580>
   17788:	mov	r1, #1
   1778c:	cmp	r2, #0
   17790:	bge	17798 <__assert_fail@plt+0x658c>
   17794:	mov	r1, #1
   17798:	mov	r3, r2
   1779c:	str	r3, [fp, #-20]	; 0xffffffec
   177a0:	mov	r3, r1
   177a4:	and	r3, r3, #1
   177a8:	uxtb	r3, r3
   177ac:	cmp	r3, #0
   177b0:	beq	177cc <__assert_fail@plt+0x65c0>
   177b4:	bl	11110 <__errno_location@plt>
   177b8:	mov	r2, r0
   177bc:	mov	r3, #12
   177c0:	str	r3, [r2]
   177c4:	mov	r3, #0
   177c8:	b	177e0 <__assert_fail@plt+0x65d4>
   177cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   177d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   177d4:	bl	10fd8 <realloc@plt>
   177d8:	str	r0, [fp, #-16]
   177dc:	ldr	r3, [fp, #-16]
   177e0:	mov	r0, r3
   177e4:	sub	sp, fp, #12
   177e8:	pop	{r4, r5, fp, pc}
   177ec:	push	{r4, r5, fp, lr}
   177f0:	add	fp, sp, #12
   177f4:	sub	sp, sp, #16
   177f8:	str	r0, [fp, #-24]	; 0xffffffe8
   177fc:	str	r1, [fp, #-28]	; 0xffffffe4
   17800:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17804:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17808:	cmp	r5, r4
   1780c:	bne	17818 <__assert_fail@plt+0x660c>
   17810:	mov	r3, #0
   17814:	b	17878 <__assert_fail@plt+0x666c>
   17818:	ldrb	r3, [r5]
   1781c:	mov	r0, r3
   17820:	bl	18778 <__assert_fail@plt+0x756c>
   17824:	mov	r3, r0
   17828:	strb	r3, [fp, #-13]
   1782c:	ldrb	r3, [r4]
   17830:	mov	r0, r3
   17834:	bl	18778 <__assert_fail@plt+0x756c>
   17838:	mov	r3, r0
   1783c:	strb	r3, [fp, #-14]
   17840:	ldrb	r3, [fp, #-13]
   17844:	cmp	r3, #0
   17848:	beq	17868 <__assert_fail@plt+0x665c>
   1784c:	add	r5, r5, #1
   17850:	add	r4, r4, #1
   17854:	ldrb	r2, [fp, #-13]
   17858:	ldrb	r3, [fp, #-14]
   1785c:	cmp	r2, r3
   17860:	beq	17818 <__assert_fail@plt+0x660c>
   17864:	b	1786c <__assert_fail@plt+0x6660>
   17868:	nop			; (mov r0, r0)
   1786c:	ldrb	r2, [fp, #-13]
   17870:	ldrb	r3, [fp, #-14]
   17874:	sub	r3, r2, r3
   17878:	mov	r0, r3
   1787c:	sub	sp, fp, #12
   17880:	pop	{r4, r5, fp, pc}
   17884:	push	{fp, lr}
   17888:	add	fp, sp, #4
   1788c:	sub	sp, sp, #16
   17890:	str	r0, [fp, #-16]
   17894:	ldr	r0, [fp, #-16]
   17898:	bl	11044 <__fpending@plt>
   1789c:	mov	r3, r0
   178a0:	cmp	r3, #0
   178a4:	movne	r3, #1
   178a8:	moveq	r3, #0
   178ac:	strb	r3, [fp, #-5]
   178b0:	ldr	r0, [fp, #-16]
   178b4:	bl	11050 <ferror_unlocked@plt>
   178b8:	mov	r3, r0
   178bc:	cmp	r3, #0
   178c0:	movne	r3, #1
   178c4:	moveq	r3, #0
   178c8:	strb	r3, [fp, #-6]
   178cc:	ldr	r0, [fp, #-16]
   178d0:	bl	1795c <__assert_fail@plt+0x6750>
   178d4:	mov	r3, r0
   178d8:	cmp	r3, #0
   178dc:	movne	r3, #1
   178e0:	moveq	r3, #0
   178e4:	strb	r3, [fp, #-7]
   178e8:	ldrb	r3, [fp, #-6]
   178ec:	cmp	r3, #0
   178f0:	bne	17920 <__assert_fail@plt+0x6714>
   178f4:	ldrb	r3, [fp, #-7]
   178f8:	cmp	r3, #0
   178fc:	beq	1794c <__assert_fail@plt+0x6740>
   17900:	ldrb	r3, [fp, #-5]
   17904:	cmp	r3, #0
   17908:	bne	17920 <__assert_fail@plt+0x6714>
   1790c:	bl	11110 <__errno_location@plt>
   17910:	mov	r3, r0
   17914:	ldr	r3, [r3]
   17918:	cmp	r3, #9
   1791c:	beq	1794c <__assert_fail@plt+0x6740>
   17920:	ldrb	r3, [fp, #-7]
   17924:	eor	r3, r3, #1
   17928:	uxtb	r3, r3
   1792c:	cmp	r3, #0
   17930:	beq	17944 <__assert_fail@plt+0x6738>
   17934:	bl	11110 <__errno_location@plt>
   17938:	mov	r2, r0
   1793c:	mov	r3, #0
   17940:	str	r3, [r2]
   17944:	mvn	r3, #0
   17948:	b	17950 <__assert_fail@plt+0x6744>
   1794c:	mov	r3, #0
   17950:	mov	r0, r3
   17954:	sub	sp, fp, #4
   17958:	pop	{fp, pc}
   1795c:	push	{fp, lr}
   17960:	add	fp, sp, #4
   17964:	sub	sp, sp, #32
   17968:	str	r0, [fp, #-24]	; 0xffffffe8
   1796c:	mov	r3, #0
   17970:	str	r3, [fp, #-8]
   17974:	mov	r3, #0
   17978:	str	r3, [fp, #-12]
   1797c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17980:	bl	11164 <fileno@plt>
   17984:	str	r0, [fp, #-16]
   17988:	ldr	r3, [fp, #-16]
   1798c:	cmp	r3, #0
   17990:	bge	179a4 <__assert_fail@plt+0x6798>
   17994:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17998:	bl	11170 <fclose@plt>
   1799c:	mov	r3, r0
   179a0:	b	17a48 <__assert_fail@plt+0x683c>
   179a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179a8:	bl	11098 <__freading@plt>
   179ac:	mov	r3, r0
   179b0:	cmp	r3, #0
   179b4:	beq	179f0 <__assert_fail@plt+0x67e4>
   179b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179bc:	bl	11164 <fileno@plt>
   179c0:	mov	r1, r0
   179c4:	mov	r3, #1
   179c8:	str	r3, [sp]
   179cc:	mov	r2, #0
   179d0:	mov	r3, #0
   179d4:	mov	r0, r1
   179d8:	bl	11020 <lseek64@plt>
   179dc:	mvn	r2, #0
   179e0:	mvn	r3, #0
   179e4:	cmp	r1, r3
   179e8:	cmpeq	r0, r2
   179ec:	beq	17a14 <__assert_fail@plt+0x6808>
   179f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179f4:	bl	17a9c <__assert_fail@plt+0x6890>
   179f8:	mov	r3, r0
   179fc:	cmp	r3, #0
   17a00:	beq	17a14 <__assert_fail@plt+0x6808>
   17a04:	bl	11110 <__errno_location@plt>
   17a08:	mov	r3, r0
   17a0c:	ldr	r3, [r3]
   17a10:	str	r3, [fp, #-8]
   17a14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a18:	bl	11170 <fclose@plt>
   17a1c:	str	r0, [fp, #-12]
   17a20:	ldr	r3, [fp, #-8]
   17a24:	cmp	r3, #0
   17a28:	beq	17a44 <__assert_fail@plt+0x6838>
   17a2c:	bl	11110 <__errno_location@plt>
   17a30:	mov	r2, r0
   17a34:	ldr	r3, [fp, #-8]
   17a38:	str	r3, [r2]
   17a3c:	mvn	r3, #0
   17a40:	str	r3, [fp, #-12]
   17a44:	ldr	r3, [fp, #-12]
   17a48:	mov	r0, r3
   17a4c:	sub	sp, fp, #4
   17a50:	pop	{fp, pc}
   17a54:	push	{fp, lr}
   17a58:	add	fp, sp, #4
   17a5c:	sub	sp, sp, #16
   17a60:	str	r0, [fp, #-8]
   17a64:	ldr	r3, [fp, #-8]
   17a68:	ldr	r3, [r3]
   17a6c:	and	r3, r3, #256	; 0x100
   17a70:	cmp	r3, #0
   17a74:	beq	17a90 <__assert_fail@plt+0x6884>
   17a78:	mov	r3, #1
   17a7c:	str	r3, [sp]
   17a80:	mov	r2, #0
   17a84:	mov	r3, #0
   17a88:	ldr	r0, [fp, #-8]
   17a8c:	bl	17afc <__assert_fail@plt+0x68f0>
   17a90:	nop			; (mov r0, r0)
   17a94:	sub	sp, fp, #4
   17a98:	pop	{fp, pc}
   17a9c:	push	{fp, lr}
   17aa0:	add	fp, sp, #4
   17aa4:	sub	sp, sp, #8
   17aa8:	str	r0, [fp, #-8]
   17aac:	ldr	r3, [fp, #-8]
   17ab0:	cmp	r3, #0
   17ab4:	beq	17acc <__assert_fail@plt+0x68c0>
   17ab8:	ldr	r0, [fp, #-8]
   17abc:	bl	11098 <__freading@plt>
   17ac0:	mov	r3, r0
   17ac4:	cmp	r3, #0
   17ac8:	bne	17adc <__assert_fail@plt+0x68d0>
   17acc:	ldr	r0, [fp, #-8]
   17ad0:	bl	10f78 <fflush@plt>
   17ad4:	mov	r3, r0
   17ad8:	b	17af0 <__assert_fail@plt+0x68e4>
   17adc:	ldr	r0, [fp, #-8]
   17ae0:	bl	17a54 <__assert_fail@plt+0x6848>
   17ae4:	ldr	r0, [fp, #-8]
   17ae8:	bl	10f78 <fflush@plt>
   17aec:	mov	r3, r0
   17af0:	mov	r0, r3
   17af4:	sub	sp, fp, #4
   17af8:	pop	{fp, pc}
   17afc:	push	{fp, lr}
   17b00:	add	fp, sp, #4
   17b04:	sub	sp, sp, #32
   17b08:	str	r0, [fp, #-16]
   17b0c:	strd	r2, [fp, #-28]	; 0xffffffe4
   17b10:	ldr	r3, [fp, #-16]
   17b14:	ldr	r2, [r3, #8]
   17b18:	ldr	r3, [fp, #-16]
   17b1c:	ldr	r3, [r3, #4]
   17b20:	cmp	r2, r3
   17b24:	bne	17bbc <__assert_fail@plt+0x69b0>
   17b28:	ldr	r3, [fp, #-16]
   17b2c:	ldr	r2, [r3, #20]
   17b30:	ldr	r3, [fp, #-16]
   17b34:	ldr	r3, [r3, #16]
   17b38:	cmp	r2, r3
   17b3c:	bne	17bbc <__assert_fail@plt+0x69b0>
   17b40:	ldr	r3, [fp, #-16]
   17b44:	ldr	r3, [r3, #36]	; 0x24
   17b48:	cmp	r3, #0
   17b4c:	bne	17bbc <__assert_fail@plt+0x69b0>
   17b50:	ldr	r0, [fp, #-16]
   17b54:	bl	11164 <fileno@plt>
   17b58:	mov	r1, r0
   17b5c:	ldr	r3, [fp, #4]
   17b60:	str	r3, [sp]
   17b64:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17b68:	mov	r0, r1
   17b6c:	bl	11020 <lseek64@plt>
   17b70:	strd	r0, [fp, #-12]
   17b74:	ldrd	r2, [fp, #-12]
   17b78:	mvn	r0, #0
   17b7c:	mvn	r1, #0
   17b80:	cmp	r3, r1
   17b84:	cmpeq	r2, r0
   17b88:	bne	17b94 <__assert_fail@plt+0x6988>
   17b8c:	mvn	r3, #0
   17b90:	b	17bd4 <__assert_fail@plt+0x69c8>
   17b94:	ldr	r3, [fp, #-16]
   17b98:	ldr	r3, [r3]
   17b9c:	bic	r2, r3, #16
   17ba0:	ldr	r3, [fp, #-16]
   17ba4:	str	r2, [r3]
   17ba8:	ldr	r1, [fp, #-16]
   17bac:	ldrd	r2, [fp, #-12]
   17bb0:	strd	r2, [r1, #80]	; 0x50
   17bb4:	mov	r3, #0
   17bb8:	b	17bd4 <__assert_fail@plt+0x69c8>
   17bbc:	ldr	r3, [fp, #4]
   17bc0:	str	r3, [sp]
   17bc4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17bc8:	ldr	r0, [fp, #-16]
   17bcc:	bl	1117c <fseeko64@plt>
   17bd0:	mov	r3, r0
   17bd4:	mov	r0, r3
   17bd8:	sub	sp, fp, #4
   17bdc:	pop	{fp, pc}
   17be0:	push	{fp, lr}
   17be4:	add	fp, sp, #4
   17be8:	bl	11110 <__errno_location@plt>
   17bec:	mov	r2, r0
   17bf0:	mov	r3, #12
   17bf4:	str	r3, [r2]
   17bf8:	mov	r3, #0
   17bfc:	mov	r0, r3
   17c00:	pop	{fp, pc}
   17c04:	push	{fp, lr}
   17c08:	add	fp, sp, #4
   17c0c:	sub	sp, sp, #8
   17c10:	str	r0, [fp, #-8]
   17c14:	ldr	r3, [fp, #-8]
   17c18:	mov	r0, r3
   17c1c:	bl	17674 <__assert_fail@plt+0x6468>
   17c20:	mov	r3, r0
   17c24:	mov	r0, r3
   17c28:	sub	sp, fp, #4
   17c2c:	pop	{fp, pc}
   17c30:	push	{fp, lr}
   17c34:	add	fp, sp, #4
   17c38:	sub	sp, sp, #8
   17c3c:	str	r0, [fp, #-8]
   17c40:	str	r1, [fp, #-12]
   17c44:	ldr	r3, [fp, #-12]
   17c48:	cmp	r3, #0
   17c4c:	moveq	r3, #1
   17c50:	movne	r3, #0
   17c54:	uxtb	r3, r3
   17c58:	mov	r2, r3
   17c5c:	ldr	r3, [fp, #-12]
   17c60:	orr	r3, r2, r3
   17c64:	mov	r1, r3
   17c68:	ldr	r0, [fp, #-8]
   17c6c:	bl	1771c <__assert_fail@plt+0x6510>
   17c70:	mov	r3, r0
   17c74:	mov	r0, r3
   17c78:	sub	sp, fp, #4
   17c7c:	pop	{fp, pc}
   17c80:	push	{fp, lr}
   17c84:	add	fp, sp, #4
   17c88:	sub	sp, sp, #8
   17c8c:	str	r0, [fp, #-8]
   17c90:	str	r1, [fp, #-12]
   17c94:	ldr	r3, [fp, #-8]
   17c98:	ldr	r2, [fp, #-12]
   17c9c:	mov	r1, r2
   17ca0:	mov	r0, r3
   17ca4:	bl	175b0 <__assert_fail@plt+0x63a4>
   17ca8:	mov	r3, r0
   17cac:	mov	r0, r3
   17cb0:	sub	sp, fp, #4
   17cb4:	pop	{fp, pc}
   17cb8:	push	{fp, lr}
   17cbc:	add	fp, sp, #4
   17cc0:	sub	sp, sp, #16
   17cc4:	str	r0, [fp, #-8]
   17cc8:	str	r1, [fp, #-12]
   17ccc:	str	r2, [fp, #-16]
   17cd0:	ldr	r3, [fp, #-12]
   17cd4:	cmp	r3, #0
   17cd8:	beq	17ce8 <__assert_fail@plt+0x6adc>
   17cdc:	ldr	r3, [fp, #-16]
   17ce0:	cmp	r3, #0
   17ce4:	bne	17cf8 <__assert_fail@plt+0x6aec>
   17ce8:	mov	r3, #1
   17cec:	str	r3, [fp, #-16]
   17cf0:	ldr	r3, [fp, #-16]
   17cf4:	str	r3, [fp, #-12]
   17cf8:	ldr	r3, [fp, #-12]
   17cfc:	ldr	r2, [fp, #-16]
   17d00:	mov	r1, r3
   17d04:	ldr	r0, [fp, #-8]
   17d08:	bl	18254 <__assert_fail@plt+0x7048>
   17d0c:	mov	r3, r0
   17d10:	mov	r0, r3
   17d14:	sub	sp, fp, #4
   17d18:	pop	{fp, pc}
   17d1c:	push	{fp, lr}
   17d20:	add	fp, sp, #4
   17d24:	sub	sp, sp, #8
   17d28:	mov	r0, #14
   17d2c:	bl	111ac <nl_langinfo@plt>
   17d30:	str	r0, [fp, #-8]
   17d34:	ldr	r3, [fp, #-8]
   17d38:	cmp	r3, #0
   17d3c:	bne	17d48 <__assert_fail@plt+0x6b3c>
   17d40:	ldr	r3, [pc, #40]	; 17d70 <__assert_fail@plt+0x6b64>
   17d44:	str	r3, [fp, #-8]
   17d48:	ldr	r3, [fp, #-8]
   17d4c:	ldrb	r3, [r3]
   17d50:	cmp	r3, #0
   17d54:	bne	17d60 <__assert_fail@plt+0x6b54>
   17d58:	ldr	r3, [pc, #20]	; 17d74 <__assert_fail@plt+0x6b68>
   17d5c:	str	r3, [fp, #-8]
   17d60:	ldr	r3, [fp, #-8]
   17d64:	mov	r0, r3
   17d68:	sub	sp, fp, #4
   17d6c:	pop	{fp, pc}
   17d70:	strheq	sl, [r1], -r0
   17d74:	strheq	sl, [r1], -r4
   17d78:	push	{fp, lr}
   17d7c:	add	fp, sp, #4
   17d80:	sub	sp, sp, #32
   17d84:	str	r0, [fp, #-24]	; 0xffffffe8
   17d88:	str	r1, [fp, #-28]	; 0xffffffe4
   17d8c:	str	r2, [fp, #-32]	; 0xffffffe0
   17d90:	str	r3, [fp, #-36]	; 0xffffffdc
   17d94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d98:	cmp	r3, #0
   17d9c:	bne	17da8 <__assert_fail@plt+0x6b9c>
   17da0:	sub	r3, fp, #16
   17da4:	str	r3, [fp, #-24]	; 0xffffffe8
   17da8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17dac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17db0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17db4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17db8:	bl	1105c <mbrtowc@plt>
   17dbc:	str	r0, [fp, #-8]
   17dc0:	ldr	r3, [fp, #-8]
   17dc4:	cmn	r3, #3
   17dc8:	bls	17e14 <__assert_fail@plt+0x6c08>
   17dcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17dd0:	cmp	r3, #0
   17dd4:	beq	17e14 <__assert_fail@plt+0x6c08>
   17dd8:	mov	r0, #0
   17ddc:	bl	18a08 <__assert_fail@plt+0x77fc>
   17de0:	mov	r3, r0
   17de4:	eor	r3, r3, #1
   17de8:	uxtb	r3, r3
   17dec:	cmp	r3, #0
   17df0:	beq	17e14 <__assert_fail@plt+0x6c08>
   17df4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17df8:	ldrb	r3, [r3]
   17dfc:	strb	r3, [fp, #-9]
   17e00:	ldrb	r2, [fp, #-9]
   17e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e08:	str	r2, [r3]
   17e0c:	mov	r3, #1
   17e10:	b	17e18 <__assert_fail@plt+0x6c0c>
   17e14:	ldr	r3, [fp, #-8]
   17e18:	mov	r0, r3
   17e1c:	sub	sp, fp, #4
   17e20:	pop	{fp, pc}
   17e24:	push	{r4, r5, fp, lr}
   17e28:	add	fp, sp, #12
   17e2c:	sub	sp, sp, #16
   17e30:	str	r0, [fp, #-24]	; 0xffffffe8
   17e34:	str	r1, [fp, #-28]	; 0xffffffe4
   17e38:	mov	ip, #0
   17e3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17e40:	mov	r0, r1
   17e44:	mov	r1, #0
   17e48:	lsl	r3, r1, #2
   17e4c:	orr	r3, r3, r0, lsr #30
   17e50:	lsl	r2, r0, #2
   17e54:	mov	r4, r3
   17e58:	mov	r5, #0
   17e5c:	cmp	r4, #0
   17e60:	beq	17e68 <__assert_fail@plt+0x6c5c>
   17e64:	mov	ip, #1
   17e68:	cmp	r2, #0
   17e6c:	bge	17e74 <__assert_fail@plt+0x6c68>
   17e70:	mov	ip, #1
   17e74:	mov	r3, r2
   17e78:	str	r3, [fp, #-16]
   17e7c:	mov	r3, ip
   17e80:	and	r3, r3, #1
   17e84:	uxtb	r3, r3
   17e88:	cmp	r3, #0
   17e8c:	beq	17ea8 <__assert_fail@plt+0x6c9c>
   17e90:	bl	11110 <__errno_location@plt>
   17e94:	mov	r2, r0
   17e98:	mov	r3, #12
   17e9c:	str	r3, [r2]
   17ea0:	mov	r3, #0
   17ea4:	b	17ec0 <__assert_fail@plt+0x6cb4>
   17ea8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17eac:	lsl	r3, r3, #2
   17eb0:	mov	r1, r3
   17eb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17eb8:	bl	1771c <__assert_fail@plt+0x6510>
   17ebc:	mov	r3, r0
   17ec0:	mov	r0, r3
   17ec4:	sub	sp, fp, #12
   17ec8:	pop	{r4, r5, fp, pc}
   17ecc:	push	{fp, lr}
   17ed0:	add	fp, sp, #4
   17ed4:	sub	sp, sp, #48	; 0x30
   17ed8:	str	r0, [fp, #-40]	; 0xffffffd8
   17edc:	str	r1, [fp, #-44]	; 0xffffffd4
   17ee0:	str	r2, [fp, #-48]	; 0xffffffd0
   17ee4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17ee8:	cmp	r3, #0
   17eec:	beq	17fc0 <__assert_fail@plt+0x6db4>
   17ef0:	mov	r3, #10
   17ef4:	str	r3, [fp, #-36]	; 0xffffffdc
   17ef8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17efc:	mov	r1, r3
   17f00:	mov	r0, #0
   17f04:	bl	17e24 <__assert_fail@plt+0x6c18>
   17f08:	str	r0, [fp, #-12]
   17f0c:	ldr	r3, [fp, #-12]
   17f10:	cmp	r3, #0
   17f14:	bne	17f20 <__assert_fail@plt+0x6d14>
   17f18:	mvn	r3, #0
   17f1c:	b	18248 <__assert_fail@plt+0x703c>
   17f20:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f24:	str	r3, [fp, #-20]	; 0xffffffec
   17f28:	sub	r3, fp, #36	; 0x24
   17f2c:	ldr	r2, [fp, #-12]
   17f30:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17f34:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17f38:	bl	11134 <getgrouplist@plt>
   17f3c:	str	r0, [fp, #-8]
   17f40:	ldr	r3, [fp, #-8]
   17f44:	cmp	r3, #0
   17f48:	bge	17f68 <__assert_fail@plt+0x6d5c>
   17f4c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f50:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f54:	cmp	r2, r3
   17f58:	bne	17f68 <__assert_fail@plt+0x6d5c>
   17f5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f60:	lsl	r3, r3, #1
   17f64:	str	r3, [fp, #-36]	; 0xffffffdc
   17f68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f6c:	mov	r1, r3
   17f70:	ldr	r0, [fp, #-12]
   17f74:	bl	17e24 <__assert_fail@plt+0x6c18>
   17f78:	str	r0, [fp, #-24]	; 0xffffffe8
   17f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f80:	cmp	r3, #0
   17f84:	bne	17f98 <__assert_fail@plt+0x6d8c>
   17f88:	ldr	r0, [fp, #-12]
   17f8c:	bl	12ccc <__assert_fail@plt+0x1ac0>
   17f90:	mvn	r3, #0
   17f94:	b	18248 <__assert_fail@plt+0x703c>
   17f98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f9c:	str	r3, [fp, #-12]
   17fa0:	ldr	r3, [fp, #-8]
   17fa4:	cmp	r3, #0
   17fa8:	blt	17f20 <__assert_fail@plt+0x6d14>
   17fac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17fb0:	ldr	r2, [fp, #-12]
   17fb4:	str	r2, [r3]
   17fb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17fbc:	b	18248 <__assert_fail@plt+0x703c>
   17fc0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17fc4:	cmp	r3, #0
   17fc8:	beq	17fe8 <__assert_fail@plt+0x6ddc>
   17fcc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17fd0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17fd4:	mov	r1, #0
   17fd8:	mov	r0, #0
   17fdc:	bl	187f8 <__assert_fail@plt+0x75ec>
   17fe0:	mov	r3, r0
   17fe4:	b	17ff8 <__assert_fail@plt+0x6dec>
   17fe8:	mov	r1, #0
   17fec:	mov	r0, #0
   17ff0:	bl	111b8 <getgroups@plt>
   17ff4:	mov	r3, r0
   17ff8:	str	r3, [fp, #-36]	; 0xffffffdc
   17ffc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18000:	cmp	r3, #0
   18004:	bge	18070 <__assert_fail@plt+0x6e64>
   18008:	bl	11110 <__errno_location@plt>
   1800c:	mov	r3, r0
   18010:	ldr	r3, [r3]
   18014:	cmp	r3, #38	; 0x26
   18018:	bne	18068 <__assert_fail@plt+0x6e5c>
   1801c:	mov	r1, #1
   18020:	mov	r0, #0
   18024:	bl	17e24 <__assert_fail@plt+0x6c18>
   18028:	str	r0, [fp, #-12]
   1802c:	ldr	r3, [fp, #-12]
   18030:	cmp	r3, #0
   18034:	beq	18068 <__assert_fail@plt+0x6e5c>
   18038:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1803c:	ldr	r2, [fp, #-12]
   18040:	str	r2, [r3]
   18044:	ldr	r3, [fp, #-12]
   18048:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1804c:	str	r2, [r3]
   18050:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18054:	cmn	r3, #1
   18058:	movne	r3, #1
   1805c:	moveq	r3, #0
   18060:	uxtb	r3, r3
   18064:	b	18248 <__assert_fail@plt+0x703c>
   18068:	mvn	r3, #0
   1806c:	b	18248 <__assert_fail@plt+0x703c>
   18070:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18074:	cmp	r3, #0
   18078:	beq	18094 <__assert_fail@plt+0x6e88>
   1807c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18080:	cmp	r3, #0
   18084:	bne	180a0 <__assert_fail@plt+0x6e94>
   18088:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1808c:	cmn	r3, #1
   18090:	beq	180a0 <__assert_fail@plt+0x6e94>
   18094:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18098:	add	r3, r3, #1
   1809c:	str	r3, [fp, #-36]	; 0xffffffdc
   180a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180a4:	mov	r1, r3
   180a8:	mov	r0, #0
   180ac:	bl	17e24 <__assert_fail@plt+0x6c18>
   180b0:	str	r0, [fp, #-12]
   180b4:	ldr	r3, [fp, #-12]
   180b8:	cmp	r3, #0
   180bc:	bne	180c8 <__assert_fail@plt+0x6ebc>
   180c0:	mvn	r3, #0
   180c4:	b	18248 <__assert_fail@plt+0x703c>
   180c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   180cc:	cmp	r3, #0
   180d0:	beq	180f0 <__assert_fail@plt+0x6ee4>
   180d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   180d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   180dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   180e0:	ldr	r1, [fp, #-12]
   180e4:	bl	187f8 <__assert_fail@plt+0x75ec>
   180e8:	mov	r3, r0
   180ec:	b	18138 <__assert_fail@plt+0x6f2c>
   180f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   180f4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   180f8:	cmn	r2, #1
   180fc:	movne	r2, #1
   18100:	moveq	r2, #0
   18104:	uxtb	r2, r2
   18108:	sub	r0, r3, r2
   1810c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18110:	cmn	r3, #1
   18114:	beq	18120 <__assert_fail@plt+0x6f14>
   18118:	mov	r3, #4
   1811c:	b	18124 <__assert_fail@plt+0x6f18>
   18120:	mov	r3, #0
   18124:	ldr	r2, [fp, #-12]
   18128:	add	r3, r2, r3
   1812c:	mov	r1, r3
   18130:	bl	111b8 <getgroups@plt>
   18134:	mov	r3, r0
   18138:	str	r3, [fp, #-8]
   1813c:	ldr	r3, [fp, #-8]
   18140:	cmp	r3, #0
   18144:	bge	18158 <__assert_fail@plt+0x6f4c>
   18148:	ldr	r0, [fp, #-12]
   1814c:	bl	12ccc <__assert_fail@plt+0x1ac0>
   18150:	mvn	r3, #0
   18154:	b	18248 <__assert_fail@plt+0x703c>
   18158:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1815c:	cmp	r3, #0
   18160:	bne	18188 <__assert_fail@plt+0x6f7c>
   18164:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18168:	cmn	r3, #1
   1816c:	beq	18188 <__assert_fail@plt+0x6f7c>
   18170:	ldr	r3, [fp, #-12]
   18174:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18178:	str	r2, [r3]
   1817c:	ldr	r3, [fp, #-8]
   18180:	add	r3, r3, #1
   18184:	str	r3, [fp, #-8]
   18188:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1818c:	ldr	r2, [fp, #-12]
   18190:	str	r2, [r3]
   18194:	ldr	r3, [fp, #-8]
   18198:	cmp	r3, #1
   1819c:	ble	18244 <__assert_fail@plt+0x7038>
   181a0:	ldr	r3, [fp, #-12]
   181a4:	ldr	r3, [r3]
   181a8:	str	r3, [fp, #-28]	; 0xffffffe4
   181ac:	ldr	r3, [fp, #-8]
   181b0:	lsl	r3, r3, #2
   181b4:	ldr	r2, [fp, #-12]
   181b8:	add	r3, r2, r3
   181bc:	str	r3, [fp, #-32]	; 0xffffffe0
   181c0:	ldr	r3, [fp, #-12]
   181c4:	add	r3, r3, #4
   181c8:	str	r3, [fp, #-16]
   181cc:	b	18234 <__assert_fail@plt+0x7028>
   181d0:	ldr	r3, [fp, #-16]
   181d4:	ldr	r2, [r3]
   181d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   181dc:	cmp	r2, r3
   181e0:	beq	181fc <__assert_fail@plt+0x6ff0>
   181e4:	ldr	r3, [fp, #-16]
   181e8:	ldr	r2, [r3]
   181ec:	ldr	r3, [fp, #-12]
   181f0:	ldr	r3, [r3]
   181f4:	cmp	r2, r3
   181f8:	bne	1820c <__assert_fail@plt+0x7000>
   181fc:	ldr	r3, [fp, #-8]
   18200:	sub	r3, r3, #1
   18204:	str	r3, [fp, #-8]
   18208:	b	18228 <__assert_fail@plt+0x701c>
   1820c:	ldr	r3, [fp, #-12]
   18210:	add	r3, r3, #4
   18214:	str	r3, [fp, #-12]
   18218:	ldr	r3, [fp, #-16]
   1821c:	ldr	r2, [r3]
   18220:	ldr	r3, [fp, #-12]
   18224:	str	r2, [r3]
   18228:	ldr	r3, [fp, #-16]
   1822c:	add	r3, r3, #4
   18230:	str	r3, [fp, #-16]
   18234:	ldr	r2, [fp, #-16]
   18238:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1823c:	cmp	r2, r3
   18240:	bcc	181d0 <__assert_fail@plt+0x6fc4>
   18244:	ldr	r3, [fp, #-8]
   18248:	mov	r0, r3
   1824c:	sub	sp, fp, #4
   18250:	pop	{fp, pc}
   18254:	push	{fp, lr}
   18258:	add	fp, sp, #4
   1825c:	sub	sp, sp, #24
   18260:	str	r0, [fp, #-16]
   18264:	str	r1, [fp, #-20]	; 0xffffffec
   18268:	str	r2, [fp, #-24]	; 0xffffffe8
   1826c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18270:	cmp	r3, #0
   18274:	beq	182b0 <__assert_fail@plt+0x70a4>
   18278:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1827c:	mvn	r0, #0
   18280:	bl	18c0c <__assert_fail@plt+0x7a00>
   18284:	mov	r3, r0
   18288:	mov	r2, r3
   1828c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18290:	cmp	r2, r3
   18294:	bcs	182b0 <__assert_fail@plt+0x70a4>
   18298:	ldr	r3, [fp, #-20]	; 0xffffffec
   1829c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   182a0:	mul	r3, r2, r3
   182a4:	str	r3, [fp, #-8]
   182a8:	mov	r3, #1
   182ac:	b	182c4 <__assert_fail@plt+0x70b8>
   182b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   182b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   182b8:	mul	r3, r2, r3
   182bc:	str	r3, [fp, #-8]
   182c0:	mov	r3, #0
   182c4:	cmp	r3, #0
   182c8:	beq	182e4 <__assert_fail@plt+0x70d8>
   182cc:	bl	11110 <__errno_location@plt>
   182d0:	mov	r2, r0
   182d4:	mov	r3, #12
   182d8:	str	r3, [r2]
   182dc:	mov	r3, #0
   182e0:	b	182f8 <__assert_fail@plt+0x70ec>
   182e4:	ldr	r3, [fp, #-8]
   182e8:	mov	r1, r3
   182ec:	ldr	r0, [fp, #-16]
   182f0:	bl	1771c <__assert_fail@plt+0x6510>
   182f4:	mov	r3, r0
   182f8:	mov	r0, r3
   182fc:	sub	sp, fp, #4
   18300:	pop	{fp, pc}
   18304:	push	{fp}		; (str fp, [sp, #-4]!)
   18308:	add	fp, sp, #0
   1830c:	sub	sp, sp, #12
   18310:	str	r0, [fp, #-8]
   18314:	ldr	r3, [fp, #-8]
   18318:	cmp	r3, #90	; 0x5a
   1831c:	bgt	18338 <__assert_fail@plt+0x712c>
   18320:	cmp	r3, #65	; 0x41
   18324:	bge	18344 <__assert_fail@plt+0x7138>
   18328:	sub	r3, r3, #48	; 0x30
   1832c:	cmp	r3, #9
   18330:	bhi	1834c <__assert_fail@plt+0x7140>
   18334:	b	18344 <__assert_fail@plt+0x7138>
   18338:	sub	r3, r3, #97	; 0x61
   1833c:	cmp	r3, #25
   18340:	bhi	1834c <__assert_fail@plt+0x7140>
   18344:	mov	r3, #1
   18348:	b	18350 <__assert_fail@plt+0x7144>
   1834c:	mov	r3, #0
   18350:	mov	r0, r3
   18354:	add	sp, fp, #0
   18358:	pop	{fp}		; (ldr fp, [sp], #4)
   1835c:	bx	lr
   18360:	push	{fp}		; (str fp, [sp, #-4]!)
   18364:	add	fp, sp, #0
   18368:	sub	sp, sp, #12
   1836c:	str	r0, [fp, #-8]
   18370:	ldr	r3, [fp, #-8]
   18374:	cmp	r3, #65	; 0x41
   18378:	blt	18398 <__assert_fail@plt+0x718c>
   1837c:	cmp	r3, #90	; 0x5a
   18380:	ble	18390 <__assert_fail@plt+0x7184>
   18384:	sub	r3, r3, #97	; 0x61
   18388:	cmp	r3, #25
   1838c:	bhi	18398 <__assert_fail@plt+0x718c>
   18390:	mov	r3, #1
   18394:	b	1839c <__assert_fail@plt+0x7190>
   18398:	mov	r3, #0
   1839c:	mov	r0, r3
   183a0:	add	sp, fp, #0
   183a4:	pop	{fp}		; (ldr fp, [sp], #4)
   183a8:	bx	lr
   183ac:	push	{fp}		; (str fp, [sp, #-4]!)
   183b0:	add	fp, sp, #0
   183b4:	sub	sp, sp, #12
   183b8:	str	r0, [fp, #-8]
   183bc:	ldr	r3, [fp, #-8]
   183c0:	add	r3, r3, #0
   183c4:	cmp	r3, #127	; 0x7f
   183c8:	bhi	183d4 <__assert_fail@plt+0x71c8>
   183cc:	mov	r3, #1
   183d0:	b	183d8 <__assert_fail@plt+0x71cc>
   183d4:	mov	r3, #0
   183d8:	mov	r0, r3
   183dc:	add	sp, fp, #0
   183e0:	pop	{fp}		; (ldr fp, [sp], #4)
   183e4:	bx	lr
   183e8:	push	{fp}		; (str fp, [sp, #-4]!)
   183ec:	add	fp, sp, #0
   183f0:	sub	sp, sp, #12
   183f4:	str	r0, [fp, #-8]
   183f8:	ldr	r3, [fp, #-8]
   183fc:	cmp	r3, #32
   18400:	beq	18410 <__assert_fail@plt+0x7204>
   18404:	ldr	r3, [fp, #-8]
   18408:	cmp	r3, #9
   1840c:	bne	18418 <__assert_fail@plt+0x720c>
   18410:	mov	r3, #1
   18414:	b	1841c <__assert_fail@plt+0x7210>
   18418:	mov	r3, #0
   1841c:	and	r3, r3, #1
   18420:	uxtb	r3, r3
   18424:	mov	r0, r3
   18428:	add	sp, fp, #0
   1842c:	pop	{fp}		; (ldr fp, [sp], #4)
   18430:	bx	lr
   18434:	push	{fp}		; (str fp, [sp, #-4]!)
   18438:	add	fp, sp, #0
   1843c:	sub	sp, sp, #12
   18440:	str	r0, [fp, #-8]
   18444:	ldr	r3, [fp, #-8]
   18448:	cmp	r3, #0
   1844c:	blt	18468 <__assert_fail@plt+0x725c>
   18450:	cmp	r3, #31
   18454:	ble	18460 <__assert_fail@plt+0x7254>
   18458:	cmp	r3, #127	; 0x7f
   1845c:	bne	18468 <__assert_fail@plt+0x725c>
   18460:	mov	r3, #1
   18464:	b	1846c <__assert_fail@plt+0x7260>
   18468:	mov	r3, #0
   1846c:	mov	r0, r3
   18470:	add	sp, fp, #0
   18474:	pop	{fp}		; (ldr fp, [sp], #4)
   18478:	bx	lr
   1847c:	push	{fp}		; (str fp, [sp, #-4]!)
   18480:	add	fp, sp, #0
   18484:	sub	sp, sp, #12
   18488:	str	r0, [fp, #-8]
   1848c:	ldr	r3, [fp, #-8]
   18490:	sub	r3, r3, #48	; 0x30
   18494:	cmp	r3, #9
   18498:	bhi	184a4 <__assert_fail@plt+0x7298>
   1849c:	mov	r3, #1
   184a0:	b	184a8 <__assert_fail@plt+0x729c>
   184a4:	mov	r3, #0
   184a8:	mov	r0, r3
   184ac:	add	sp, fp, #0
   184b0:	pop	{fp}		; (ldr fp, [sp], #4)
   184b4:	bx	lr
   184b8:	push	{fp}		; (str fp, [sp, #-4]!)
   184bc:	add	fp, sp, #0
   184c0:	sub	sp, sp, #12
   184c4:	str	r0, [fp, #-8]
   184c8:	ldr	r3, [fp, #-8]
   184cc:	sub	r3, r3, #33	; 0x21
   184d0:	cmp	r3, #93	; 0x5d
   184d4:	bhi	184e0 <__assert_fail@plt+0x72d4>
   184d8:	mov	r3, #1
   184dc:	b	184e4 <__assert_fail@plt+0x72d8>
   184e0:	mov	r3, #0
   184e4:	mov	r0, r3
   184e8:	add	sp, fp, #0
   184ec:	pop	{fp}		; (ldr fp, [sp], #4)
   184f0:	bx	lr
   184f4:	push	{fp}		; (str fp, [sp, #-4]!)
   184f8:	add	fp, sp, #0
   184fc:	sub	sp, sp, #12
   18500:	str	r0, [fp, #-8]
   18504:	ldr	r3, [fp, #-8]
   18508:	sub	r3, r3, #97	; 0x61
   1850c:	cmp	r3, #25
   18510:	bhi	1851c <__assert_fail@plt+0x7310>
   18514:	mov	r3, #1
   18518:	b	18520 <__assert_fail@plt+0x7314>
   1851c:	mov	r3, #0
   18520:	mov	r0, r3
   18524:	add	sp, fp, #0
   18528:	pop	{fp}		; (ldr fp, [sp], #4)
   1852c:	bx	lr
   18530:	push	{fp}		; (str fp, [sp, #-4]!)
   18534:	add	fp, sp, #0
   18538:	sub	sp, sp, #12
   1853c:	str	r0, [fp, #-8]
   18540:	ldr	r3, [fp, #-8]
   18544:	sub	r3, r3, #32
   18548:	cmp	r3, #94	; 0x5e
   1854c:	bhi	18558 <__assert_fail@plt+0x734c>
   18550:	mov	r3, #1
   18554:	b	1855c <__assert_fail@plt+0x7350>
   18558:	mov	r3, #0
   1855c:	mov	r0, r3
   18560:	add	sp, fp, #0
   18564:	pop	{fp}		; (ldr fp, [sp], #4)
   18568:	bx	lr
   1856c:	push	{fp}		; (str fp, [sp, #-4]!)
   18570:	add	fp, sp, #0
   18574:	sub	sp, sp, #12
   18578:	str	r0, [fp, #-8]
   1857c:	ldr	r3, [fp, #-8]
   18580:	cmp	r3, #64	; 0x40
   18584:	bgt	185a0 <__assert_fail@plt+0x7394>
   18588:	cmp	r3, #58	; 0x3a
   1858c:	bge	185bc <__assert_fail@plt+0x73b0>
   18590:	sub	r3, r3, #33	; 0x21
   18594:	cmp	r3, #14
   18598:	bhi	185c4 <__assert_fail@plt+0x73b8>
   1859c:	b	185bc <__assert_fail@plt+0x73b0>
   185a0:	cmp	r3, #91	; 0x5b
   185a4:	blt	185c4 <__assert_fail@plt+0x73b8>
   185a8:	cmp	r3, #96	; 0x60
   185ac:	ble	185bc <__assert_fail@plt+0x73b0>
   185b0:	sub	r3, r3, #123	; 0x7b
   185b4:	cmp	r3, #3
   185b8:	bhi	185c4 <__assert_fail@plt+0x73b8>
   185bc:	mov	r3, #1
   185c0:	b	185c8 <__assert_fail@plt+0x73bc>
   185c4:	mov	r3, #0
   185c8:	mov	r0, r3
   185cc:	add	sp, fp, #0
   185d0:	pop	{fp}		; (ldr fp, [sp], #4)
   185d4:	bx	lr
   185d8:	push	{fp}		; (str fp, [sp, #-4]!)
   185dc:	add	fp, sp, #0
   185e0:	sub	sp, sp, #12
   185e4:	str	r0, [fp, #-8]
   185e8:	ldr	r3, [fp, #-8]
   185ec:	cmp	r3, #9
   185f0:	blt	1860c <__assert_fail@plt+0x7400>
   185f4:	cmp	r3, #13
   185f8:	ble	18604 <__assert_fail@plt+0x73f8>
   185fc:	cmp	r3, #32
   18600:	bne	1860c <__assert_fail@plt+0x7400>
   18604:	mov	r3, #1
   18608:	b	18610 <__assert_fail@plt+0x7404>
   1860c:	mov	r3, #0
   18610:	mov	r0, r3
   18614:	add	sp, fp, #0
   18618:	pop	{fp}		; (ldr fp, [sp], #4)
   1861c:	bx	lr
   18620:	push	{fp}		; (str fp, [sp, #-4]!)
   18624:	add	fp, sp, #0
   18628:	sub	sp, sp, #12
   1862c:	str	r0, [fp, #-8]
   18630:	ldr	r3, [fp, #-8]
   18634:	sub	r3, r3, #65	; 0x41
   18638:	cmp	r3, #25
   1863c:	bhi	18648 <__assert_fail@plt+0x743c>
   18640:	mov	r3, #1
   18644:	b	1864c <__assert_fail@plt+0x7440>
   18648:	mov	r3, #0
   1864c:	mov	r0, r3
   18650:	add	sp, fp, #0
   18654:	pop	{fp}		; (ldr fp, [sp], #4)
   18658:	bx	lr
   1865c:	push	{fp}		; (str fp, [sp, #-4]!)
   18660:	add	fp, sp, #0
   18664:	sub	sp, sp, #12
   18668:	str	r0, [fp, #-8]
   1866c:	ldr	r3, [fp, #-8]
   18670:	sub	r3, r3, #48	; 0x30
   18674:	cmp	r3, #54	; 0x36
   18678:	addls	pc, pc, r3, lsl #2
   1867c:	b	18764 <__assert_fail@plt+0x7558>
   18680:	b	1875c <__assert_fail@plt+0x7550>
   18684:	b	1875c <__assert_fail@plt+0x7550>
   18688:	b	1875c <__assert_fail@plt+0x7550>
   1868c:	b	1875c <__assert_fail@plt+0x7550>
   18690:	b	1875c <__assert_fail@plt+0x7550>
   18694:	b	1875c <__assert_fail@plt+0x7550>
   18698:	b	1875c <__assert_fail@plt+0x7550>
   1869c:	b	1875c <__assert_fail@plt+0x7550>
   186a0:	b	1875c <__assert_fail@plt+0x7550>
   186a4:	b	1875c <__assert_fail@plt+0x7550>
   186a8:	b	18764 <__assert_fail@plt+0x7558>
   186ac:	b	18764 <__assert_fail@plt+0x7558>
   186b0:	b	18764 <__assert_fail@plt+0x7558>
   186b4:	b	18764 <__assert_fail@plt+0x7558>
   186b8:	b	18764 <__assert_fail@plt+0x7558>
   186bc:	b	18764 <__assert_fail@plt+0x7558>
   186c0:	b	18764 <__assert_fail@plt+0x7558>
   186c4:	b	1875c <__assert_fail@plt+0x7550>
   186c8:	b	1875c <__assert_fail@plt+0x7550>
   186cc:	b	1875c <__assert_fail@plt+0x7550>
   186d0:	b	1875c <__assert_fail@plt+0x7550>
   186d4:	b	1875c <__assert_fail@plt+0x7550>
   186d8:	b	1875c <__assert_fail@plt+0x7550>
   186dc:	b	18764 <__assert_fail@plt+0x7558>
   186e0:	b	18764 <__assert_fail@plt+0x7558>
   186e4:	b	18764 <__assert_fail@plt+0x7558>
   186e8:	b	18764 <__assert_fail@plt+0x7558>
   186ec:	b	18764 <__assert_fail@plt+0x7558>
   186f0:	b	18764 <__assert_fail@plt+0x7558>
   186f4:	b	18764 <__assert_fail@plt+0x7558>
   186f8:	b	18764 <__assert_fail@plt+0x7558>
   186fc:	b	18764 <__assert_fail@plt+0x7558>
   18700:	b	18764 <__assert_fail@plt+0x7558>
   18704:	b	18764 <__assert_fail@plt+0x7558>
   18708:	b	18764 <__assert_fail@plt+0x7558>
   1870c:	b	18764 <__assert_fail@plt+0x7558>
   18710:	b	18764 <__assert_fail@plt+0x7558>
   18714:	b	18764 <__assert_fail@plt+0x7558>
   18718:	b	18764 <__assert_fail@plt+0x7558>
   1871c:	b	18764 <__assert_fail@plt+0x7558>
   18720:	b	18764 <__assert_fail@plt+0x7558>
   18724:	b	18764 <__assert_fail@plt+0x7558>
   18728:	b	18764 <__assert_fail@plt+0x7558>
   1872c:	b	18764 <__assert_fail@plt+0x7558>
   18730:	b	18764 <__assert_fail@plt+0x7558>
   18734:	b	18764 <__assert_fail@plt+0x7558>
   18738:	b	18764 <__assert_fail@plt+0x7558>
   1873c:	b	18764 <__assert_fail@plt+0x7558>
   18740:	b	18764 <__assert_fail@plt+0x7558>
   18744:	b	1875c <__assert_fail@plt+0x7550>
   18748:	b	1875c <__assert_fail@plt+0x7550>
   1874c:	b	1875c <__assert_fail@plt+0x7550>
   18750:	b	1875c <__assert_fail@plt+0x7550>
   18754:	b	1875c <__assert_fail@plt+0x7550>
   18758:	b	1875c <__assert_fail@plt+0x7550>
   1875c:	mov	r3, #1
   18760:	b	18768 <__assert_fail@plt+0x755c>
   18764:	mov	r3, #0
   18768:	mov	r0, r3
   1876c:	add	sp, fp, #0
   18770:	pop	{fp}		; (ldr fp, [sp], #4)
   18774:	bx	lr
   18778:	push	{fp}		; (str fp, [sp, #-4]!)
   1877c:	add	fp, sp, #0
   18780:	sub	sp, sp, #12
   18784:	str	r0, [fp, #-8]
   18788:	ldr	r3, [fp, #-8]
   1878c:	sub	r3, r3, #65	; 0x41
   18790:	cmp	r3, #25
   18794:	bhi	187a4 <__assert_fail@plt+0x7598>
   18798:	ldr	r3, [fp, #-8]
   1879c:	add	r3, r3, #32
   187a0:	b	187a8 <__assert_fail@plt+0x759c>
   187a4:	ldr	r3, [fp, #-8]
   187a8:	mov	r0, r3
   187ac:	add	sp, fp, #0
   187b0:	pop	{fp}		; (ldr fp, [sp], #4)
   187b4:	bx	lr
   187b8:	push	{fp}		; (str fp, [sp, #-4]!)
   187bc:	add	fp, sp, #0
   187c0:	sub	sp, sp, #12
   187c4:	str	r0, [fp, #-8]
   187c8:	ldr	r3, [fp, #-8]
   187cc:	sub	r3, r3, #97	; 0x61
   187d0:	cmp	r3, #25
   187d4:	bhi	187e4 <__assert_fail@plt+0x75d8>
   187d8:	ldr	r3, [fp, #-8]
   187dc:	sub	r3, r3, #32
   187e0:	b	187e8 <__assert_fail@plt+0x75dc>
   187e4:	ldr	r3, [fp, #-8]
   187e8:	mov	r0, r3
   187ec:	add	sp, fp, #0
   187f0:	pop	{fp}		; (ldr fp, [sp], #4)
   187f4:	bx	lr
   187f8:	push	{fp, lr}
   187fc:	add	fp, sp, #4
   18800:	sub	sp, sp, #40	; 0x28
   18804:	str	r0, [fp, #-32]	; 0xffffffe0
   18808:	str	r1, [fp, #-36]	; 0xffffffdc
   1880c:	str	r2, [fp, #-40]	; 0xffffffd8
   18810:	str	r3, [fp, #-44]	; 0xffffffd4
   18814:	mov	r3, #0
   18818:	str	r3, [fp, #-8]
   1881c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18820:	cmn	r3, #1
   18824:	beq	18858 <__assert_fail@plt+0x764c>
   18828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1882c:	cmp	r3, #0
   18830:	beq	1884c <__assert_fail@plt+0x7640>
   18834:	ldr	r3, [fp, #-8]
   18838:	lsl	r3, r3, #2
   1883c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18840:	add	r3, r2, r3
   18844:	ldr	r2, [fp, #-44]	; 0xffffffd4
   18848:	str	r2, [r3]
   1884c:	ldr	r3, [fp, #-8]
   18850:	add	r3, r3, #1
   18854:	str	r3, [fp, #-8]
   18858:	bl	1114c <setgrent@plt>
   1885c:	bl	11110 <__errno_location@plt>
   18860:	mov	r2, r0
   18864:	mov	r3, #0
   18868:	str	r3, [r2]
   1886c:	bl	11158 <getgrent@plt>
   18870:	str	r0, [fp, #-20]	; 0xffffffec
   18874:	ldr	r3, [fp, #-20]	; 0xffffffec
   18878:	cmp	r3, #0
   1887c:	beq	189ac <__assert_fail@plt+0x77a0>
   18880:	ldr	r3, [fp, #-20]	; 0xffffffec
   18884:	ldr	r3, [r3, #12]
   18888:	str	r3, [fp, #-12]
   1888c:	b	18998 <__assert_fail@plt+0x778c>
   18890:	ldr	r3, [fp, #-12]
   18894:	ldr	r3, [r3]
   18898:	mov	r1, r3
   1889c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   188a0:	bl	10f54 <strcmp@plt>
   188a4:	mov	r3, r0
   188a8:	cmp	r3, #0
   188ac:	bne	18988 <__assert_fail@plt+0x777c>
   188b0:	mov	r3, #0
   188b4:	str	r3, [fp, #-16]
   188b8:	b	188f8 <__assert_fail@plt+0x76ec>
   188bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   188c0:	cmp	r3, #0
   188c4:	beq	188ec <__assert_fail@plt+0x76e0>
   188c8:	ldr	r3, [fp, #-16]
   188cc:	lsl	r3, r3, #2
   188d0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   188d4:	add	r3, r2, r3
   188d8:	ldr	r2, [r3]
   188dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   188e0:	ldr	r3, [r3, #8]
   188e4:	cmp	r2, r3
   188e8:	beq	1890c <__assert_fail@plt+0x7700>
   188ec:	ldr	r3, [fp, #-16]
   188f0:	add	r3, r3, #1
   188f4:	str	r3, [fp, #-16]
   188f8:	ldr	r2, [fp, #-16]
   188fc:	ldr	r3, [fp, #-8]
   18900:	cmp	r2, r3
   18904:	blt	188bc <__assert_fail@plt+0x76b0>
   18908:	b	18910 <__assert_fail@plt+0x7704>
   1890c:	nop			; (mov r0, r0)
   18910:	ldr	r2, [fp, #-16]
   18914:	ldr	r3, [fp, #-8]
   18918:	cmp	r2, r3
   1891c:	bne	1898c <__assert_fail@plt+0x7780>
   18920:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18924:	cmp	r3, #0
   18928:	beq	18958 <__assert_fail@plt+0x774c>
   1892c:	ldr	r2, [fp, #-8]
   18930:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18934:	cmp	r2, r3
   18938:	bge	189d0 <__assert_fail@plt+0x77c4>
   1893c:	ldr	r3, [fp, #-8]
   18940:	lsl	r3, r3, #2
   18944:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18948:	add	r3, r2, r3
   1894c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18950:	ldr	r2, [r2, #8]
   18954:	str	r2, [r3]
   18958:	ldr	r3, [fp, #-8]
   1895c:	cmn	r3, #-2147483647	; 0x80000001
   18960:	bne	18978 <__assert_fail@plt+0x776c>
   18964:	bl	11110 <__errno_location@plt>
   18968:	mov	r2, r0
   1896c:	mov	r3, #75	; 0x4b
   18970:	str	r3, [r2]
   18974:	b	189d4 <__assert_fail@plt+0x77c8>
   18978:	ldr	r3, [fp, #-8]
   1897c:	add	r3, r3, #1
   18980:	str	r3, [fp, #-8]
   18984:	b	1898c <__assert_fail@plt+0x7780>
   18988:	nop			; (mov r0, r0)
   1898c:	ldr	r3, [fp, #-12]
   18990:	add	r3, r3, #4
   18994:	str	r3, [fp, #-12]
   18998:	ldr	r3, [fp, #-12]
   1899c:	ldr	r3, [r3]
   189a0:	cmp	r3, #0
   189a4:	bne	18890 <__assert_fail@plt+0x7684>
   189a8:	b	1885c <__assert_fail@plt+0x7650>
   189ac:	nop			; (mov r0, r0)
   189b0:	bl	11110 <__errno_location@plt>
   189b4:	mov	r3, r0
   189b8:	ldr	r3, [r3]
   189bc:	cmp	r3, #0
   189c0:	beq	189d4 <__assert_fail@plt+0x77c8>
   189c4:	mvn	r3, #0
   189c8:	str	r3, [fp, #-8]
   189cc:	b	189d4 <__assert_fail@plt+0x77c8>
   189d0:	nop			; (mov r0, r0)
   189d4:	bl	11110 <__errno_location@plt>
   189d8:	mov	r3, r0
   189dc:	ldr	r3, [r3]
   189e0:	str	r3, [fp, #-24]	; 0xffffffe8
   189e4:	bl	10f18 <endgrent@plt>
   189e8:	bl	11110 <__errno_location@plt>
   189ec:	mov	r2, r0
   189f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189f4:	str	r3, [r2]
   189f8:	ldr	r3, [fp, #-8]
   189fc:	mov	r0, r3
   18a00:	sub	sp, fp, #4
   18a04:	pop	{fp, pc}
   18a08:	push	{fp, lr}
   18a0c:	add	fp, sp, #4
   18a10:	sub	sp, sp, #272	; 0x110
   18a14:	str	r0, [fp, #-272]	; 0xfffffef0
   18a18:	sub	r3, fp, #264	; 0x108
   18a1c:	ldr	r2, [pc, #116]	; 18a98 <__assert_fail@plt+0x788c>
   18a20:	mov	r1, r3
   18a24:	ldr	r0, [fp, #-272]	; 0xfffffef0
   18a28:	bl	18bac <__assert_fail@plt+0x79a0>
   18a2c:	mov	r3, r0
   18a30:	cmp	r3, #0
   18a34:	beq	18a40 <__assert_fail@plt+0x7834>
   18a38:	mov	r3, #0
   18a3c:	b	18a8c <__assert_fail@plt+0x7880>
   18a40:	sub	r3, fp, #264	; 0x108
   18a44:	ldr	r1, [pc, #80]	; 18a9c <__assert_fail@plt+0x7890>
   18a48:	mov	r0, r3
   18a4c:	bl	10f54 <strcmp@plt>
   18a50:	mov	r3, r0
   18a54:	cmp	r3, #0
   18a58:	beq	18a80 <__assert_fail@plt+0x7874>
   18a5c:	sub	r3, fp, #264	; 0x108
   18a60:	ldr	r1, [pc, #56]	; 18aa0 <__assert_fail@plt+0x7894>
   18a64:	mov	r0, r3
   18a68:	bl	10f54 <strcmp@plt>
   18a6c:	mov	r3, r0
   18a70:	cmp	r3, #0
   18a74:	beq	18a80 <__assert_fail@plt+0x7874>
   18a78:	mov	r3, #1
   18a7c:	b	18a84 <__assert_fail@plt+0x7878>
   18a80:	mov	r3, #0
   18a84:	and	r3, r3, #1
   18a88:	uxtb	r3, r3
   18a8c:	mov	r0, r3
   18a90:	sub	sp, fp, #4
   18a94:	pop	{fp, pc}
   18a98:	andeq	r0, r0, r1, lsl #2
   18a9c:	strheq	sl, [r1], -ip
   18aa0:	andeq	sl, r1, r0, asr #1
   18aa4:	push	{fp, lr}
   18aa8:	add	fp, sp, #4
   18aac:	sub	sp, sp, #16
   18ab0:	str	r0, [fp, #-16]
   18ab4:	mov	r1, #0
   18ab8:	ldr	r0, [fp, #-16]
   18abc:	bl	11188 <setlocale@plt>
   18ac0:	str	r0, [fp, #-8]
   18ac4:	ldr	r3, [fp, #-8]
   18ac8:	mov	r0, r3
   18acc:	sub	sp, fp, #4
   18ad0:	pop	{fp, pc}
   18ad4:	push	{fp, lr}
   18ad8:	add	fp, sp, #4
   18adc:	sub	sp, sp, #24
   18ae0:	str	r0, [fp, #-16]
   18ae4:	str	r1, [fp, #-20]	; 0xffffffec
   18ae8:	str	r2, [fp, #-24]	; 0xffffffe8
   18aec:	ldr	r0, [fp, #-16]
   18af0:	bl	18aa4 <__assert_fail@plt+0x7898>
   18af4:	str	r0, [fp, #-8]
   18af8:	ldr	r3, [fp, #-8]
   18afc:	cmp	r3, #0
   18b00:	bne	18b24 <__assert_fail@plt+0x7918>
   18b04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b08:	cmp	r3, #0
   18b0c:	beq	18b1c <__assert_fail@plt+0x7910>
   18b10:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b14:	mov	r2, #0
   18b18:	strb	r2, [r3]
   18b1c:	mov	r3, #22
   18b20:	b	18ba0 <__assert_fail@plt+0x7994>
   18b24:	ldr	r0, [fp, #-8]
   18b28:	bl	110ec <strlen@plt>
   18b2c:	str	r0, [fp, #-12]
   18b30:	ldr	r2, [fp, #-12]
   18b34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b38:	cmp	r2, r3
   18b3c:	bcs	18b60 <__assert_fail@plt+0x7954>
   18b40:	ldr	r3, [fp, #-12]
   18b44:	add	r3, r3, #1
   18b48:	mov	r2, r3
   18b4c:	ldr	r1, [fp, #-8]
   18b50:	ldr	r0, [fp, #-20]	; 0xffffffec
   18b54:	bl	10fa8 <memcpy@plt>
   18b58:	mov	r3, #0
   18b5c:	b	18ba0 <__assert_fail@plt+0x7994>
   18b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b64:	cmp	r3, #0
   18b68:	beq	18b9c <__assert_fail@plt+0x7990>
   18b6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b70:	sub	r3, r3, #1
   18b74:	mov	r2, r3
   18b78:	ldr	r1, [fp, #-8]
   18b7c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18b80:	bl	10fa8 <memcpy@plt>
   18b84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18b88:	sub	r3, r3, #1
   18b8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   18b90:	add	r3, r2, r3
   18b94:	mov	r2, #0
   18b98:	strb	r2, [r3]
   18b9c:	mov	r3, #34	; 0x22
   18ba0:	mov	r0, r3
   18ba4:	sub	sp, fp, #4
   18ba8:	pop	{fp, pc}
   18bac:	push	{fp, lr}
   18bb0:	add	fp, sp, #4
   18bb4:	sub	sp, sp, #16
   18bb8:	str	r0, [fp, #-8]
   18bbc:	str	r1, [fp, #-12]
   18bc0:	str	r2, [fp, #-16]
   18bc4:	ldr	r2, [fp, #-16]
   18bc8:	ldr	r1, [fp, #-12]
   18bcc:	ldr	r0, [fp, #-8]
   18bd0:	bl	18ad4 <__assert_fail@plt+0x78c8>
   18bd4:	mov	r3, r0
   18bd8:	mov	r0, r3
   18bdc:	sub	sp, fp, #4
   18be0:	pop	{fp, pc}
   18be4:	push	{fp, lr}
   18be8:	add	fp, sp, #4
   18bec:	sub	sp, sp, #8
   18bf0:	str	r0, [fp, #-8]
   18bf4:	ldr	r0, [fp, #-8]
   18bf8:	bl	18aa4 <__assert_fail@plt+0x7898>
   18bfc:	mov	r3, r0
   18c00:	mov	r0, r3
   18c04:	sub	sp, fp, #4
   18c08:	pop	{fp, pc}
   18c0c:	subs	r2, r1, #1
   18c10:	bxeq	lr
   18c14:	bcc	18dec <__assert_fail@plt+0x7be0>
   18c18:	cmp	r0, r1
   18c1c:	bls	18dd0 <__assert_fail@plt+0x7bc4>
   18c20:	tst	r1, r2
   18c24:	beq	18ddc <__assert_fail@plt+0x7bd0>
   18c28:	clz	r3, r0
   18c2c:	clz	r2, r1
   18c30:	sub	r3, r2, r3
   18c34:	rsbs	r3, r3, #31
   18c38:	addne	r3, r3, r3, lsl #1
   18c3c:	mov	r2, #0
   18c40:	addne	pc, pc, r3, lsl #2
   18c44:	nop			; (mov r0, r0)
   18c48:	cmp	r0, r1, lsl #31
   18c4c:	adc	r2, r2, r2
   18c50:	subcs	r0, r0, r1, lsl #31
   18c54:	cmp	r0, r1, lsl #30
   18c58:	adc	r2, r2, r2
   18c5c:	subcs	r0, r0, r1, lsl #30
   18c60:	cmp	r0, r1, lsl #29
   18c64:	adc	r2, r2, r2
   18c68:	subcs	r0, r0, r1, lsl #29
   18c6c:	cmp	r0, r1, lsl #28
   18c70:	adc	r2, r2, r2
   18c74:	subcs	r0, r0, r1, lsl #28
   18c78:	cmp	r0, r1, lsl #27
   18c7c:	adc	r2, r2, r2
   18c80:	subcs	r0, r0, r1, lsl #27
   18c84:	cmp	r0, r1, lsl #26
   18c88:	adc	r2, r2, r2
   18c8c:	subcs	r0, r0, r1, lsl #26
   18c90:	cmp	r0, r1, lsl #25
   18c94:	adc	r2, r2, r2
   18c98:	subcs	r0, r0, r1, lsl #25
   18c9c:	cmp	r0, r1, lsl #24
   18ca0:	adc	r2, r2, r2
   18ca4:	subcs	r0, r0, r1, lsl #24
   18ca8:	cmp	r0, r1, lsl #23
   18cac:	adc	r2, r2, r2
   18cb0:	subcs	r0, r0, r1, lsl #23
   18cb4:	cmp	r0, r1, lsl #22
   18cb8:	adc	r2, r2, r2
   18cbc:	subcs	r0, r0, r1, lsl #22
   18cc0:	cmp	r0, r1, lsl #21
   18cc4:	adc	r2, r2, r2
   18cc8:	subcs	r0, r0, r1, lsl #21
   18ccc:	cmp	r0, r1, lsl #20
   18cd0:	adc	r2, r2, r2
   18cd4:	subcs	r0, r0, r1, lsl #20
   18cd8:	cmp	r0, r1, lsl #19
   18cdc:	adc	r2, r2, r2
   18ce0:	subcs	r0, r0, r1, lsl #19
   18ce4:	cmp	r0, r1, lsl #18
   18ce8:	adc	r2, r2, r2
   18cec:	subcs	r0, r0, r1, lsl #18
   18cf0:	cmp	r0, r1, lsl #17
   18cf4:	adc	r2, r2, r2
   18cf8:	subcs	r0, r0, r1, lsl #17
   18cfc:	cmp	r0, r1, lsl #16
   18d00:	adc	r2, r2, r2
   18d04:	subcs	r0, r0, r1, lsl #16
   18d08:	cmp	r0, r1, lsl #15
   18d0c:	adc	r2, r2, r2
   18d10:	subcs	r0, r0, r1, lsl #15
   18d14:	cmp	r0, r1, lsl #14
   18d18:	adc	r2, r2, r2
   18d1c:	subcs	r0, r0, r1, lsl #14
   18d20:	cmp	r0, r1, lsl #13
   18d24:	adc	r2, r2, r2
   18d28:	subcs	r0, r0, r1, lsl #13
   18d2c:	cmp	r0, r1, lsl #12
   18d30:	adc	r2, r2, r2
   18d34:	subcs	r0, r0, r1, lsl #12
   18d38:	cmp	r0, r1, lsl #11
   18d3c:	adc	r2, r2, r2
   18d40:	subcs	r0, r0, r1, lsl #11
   18d44:	cmp	r0, r1, lsl #10
   18d48:	adc	r2, r2, r2
   18d4c:	subcs	r0, r0, r1, lsl #10
   18d50:	cmp	r0, r1, lsl #9
   18d54:	adc	r2, r2, r2
   18d58:	subcs	r0, r0, r1, lsl #9
   18d5c:	cmp	r0, r1, lsl #8
   18d60:	adc	r2, r2, r2
   18d64:	subcs	r0, r0, r1, lsl #8
   18d68:	cmp	r0, r1, lsl #7
   18d6c:	adc	r2, r2, r2
   18d70:	subcs	r0, r0, r1, lsl #7
   18d74:	cmp	r0, r1, lsl #6
   18d78:	adc	r2, r2, r2
   18d7c:	subcs	r0, r0, r1, lsl #6
   18d80:	cmp	r0, r1, lsl #5
   18d84:	adc	r2, r2, r2
   18d88:	subcs	r0, r0, r1, lsl #5
   18d8c:	cmp	r0, r1, lsl #4
   18d90:	adc	r2, r2, r2
   18d94:	subcs	r0, r0, r1, lsl #4
   18d98:	cmp	r0, r1, lsl #3
   18d9c:	adc	r2, r2, r2
   18da0:	subcs	r0, r0, r1, lsl #3
   18da4:	cmp	r0, r1, lsl #2
   18da8:	adc	r2, r2, r2
   18dac:	subcs	r0, r0, r1, lsl #2
   18db0:	cmp	r0, r1, lsl #1
   18db4:	adc	r2, r2, r2
   18db8:	subcs	r0, r0, r1, lsl #1
   18dbc:	cmp	r0, r1
   18dc0:	adc	r2, r2, r2
   18dc4:	subcs	r0, r0, r1
   18dc8:	mov	r0, r2
   18dcc:	bx	lr
   18dd0:	moveq	r0, #1
   18dd4:	movne	r0, #0
   18dd8:	bx	lr
   18ddc:	clz	r2, r1
   18de0:	rsb	r2, r2, #31
   18de4:	lsr	r0, r0, r2
   18de8:	bx	lr
   18dec:	cmp	r0, #0
   18df0:	mvnne	r0, #0
   18df4:	b	19094 <__assert_fail@plt+0x7e88>
   18df8:	cmp	r1, #0
   18dfc:	beq	18dec <__assert_fail@plt+0x7be0>
   18e00:	push	{r0, r1, lr}
   18e04:	bl	18c0c <__assert_fail@plt+0x7a00>
   18e08:	pop	{r1, r2, lr}
   18e0c:	mul	r3, r2, r0
   18e10:	sub	r1, r1, r3
   18e14:	bx	lr
   18e18:	cmp	r1, #0
   18e1c:	beq	19028 <__assert_fail@plt+0x7e1c>
   18e20:	eor	ip, r0, r1
   18e24:	rsbmi	r1, r1, #0
   18e28:	subs	r2, r1, #1
   18e2c:	beq	18ff4 <__assert_fail@plt+0x7de8>
   18e30:	movs	r3, r0
   18e34:	rsbmi	r3, r0, #0
   18e38:	cmp	r3, r1
   18e3c:	bls	19000 <__assert_fail@plt+0x7df4>
   18e40:	tst	r1, r2
   18e44:	beq	19010 <__assert_fail@plt+0x7e04>
   18e48:	clz	r2, r3
   18e4c:	clz	r0, r1
   18e50:	sub	r2, r0, r2
   18e54:	rsbs	r2, r2, #31
   18e58:	addne	r2, r2, r2, lsl #1
   18e5c:	mov	r0, #0
   18e60:	addne	pc, pc, r2, lsl #2
   18e64:	nop			; (mov r0, r0)
   18e68:	cmp	r3, r1, lsl #31
   18e6c:	adc	r0, r0, r0
   18e70:	subcs	r3, r3, r1, lsl #31
   18e74:	cmp	r3, r1, lsl #30
   18e78:	adc	r0, r0, r0
   18e7c:	subcs	r3, r3, r1, lsl #30
   18e80:	cmp	r3, r1, lsl #29
   18e84:	adc	r0, r0, r0
   18e88:	subcs	r3, r3, r1, lsl #29
   18e8c:	cmp	r3, r1, lsl #28
   18e90:	adc	r0, r0, r0
   18e94:	subcs	r3, r3, r1, lsl #28
   18e98:	cmp	r3, r1, lsl #27
   18e9c:	adc	r0, r0, r0
   18ea0:	subcs	r3, r3, r1, lsl #27
   18ea4:	cmp	r3, r1, lsl #26
   18ea8:	adc	r0, r0, r0
   18eac:	subcs	r3, r3, r1, lsl #26
   18eb0:	cmp	r3, r1, lsl #25
   18eb4:	adc	r0, r0, r0
   18eb8:	subcs	r3, r3, r1, lsl #25
   18ebc:	cmp	r3, r1, lsl #24
   18ec0:	adc	r0, r0, r0
   18ec4:	subcs	r3, r3, r1, lsl #24
   18ec8:	cmp	r3, r1, lsl #23
   18ecc:	adc	r0, r0, r0
   18ed0:	subcs	r3, r3, r1, lsl #23
   18ed4:	cmp	r3, r1, lsl #22
   18ed8:	adc	r0, r0, r0
   18edc:	subcs	r3, r3, r1, lsl #22
   18ee0:	cmp	r3, r1, lsl #21
   18ee4:	adc	r0, r0, r0
   18ee8:	subcs	r3, r3, r1, lsl #21
   18eec:	cmp	r3, r1, lsl #20
   18ef0:	adc	r0, r0, r0
   18ef4:	subcs	r3, r3, r1, lsl #20
   18ef8:	cmp	r3, r1, lsl #19
   18efc:	adc	r0, r0, r0
   18f00:	subcs	r3, r3, r1, lsl #19
   18f04:	cmp	r3, r1, lsl #18
   18f08:	adc	r0, r0, r0
   18f0c:	subcs	r3, r3, r1, lsl #18
   18f10:	cmp	r3, r1, lsl #17
   18f14:	adc	r0, r0, r0
   18f18:	subcs	r3, r3, r1, lsl #17
   18f1c:	cmp	r3, r1, lsl #16
   18f20:	adc	r0, r0, r0
   18f24:	subcs	r3, r3, r1, lsl #16
   18f28:	cmp	r3, r1, lsl #15
   18f2c:	adc	r0, r0, r0
   18f30:	subcs	r3, r3, r1, lsl #15
   18f34:	cmp	r3, r1, lsl #14
   18f38:	adc	r0, r0, r0
   18f3c:	subcs	r3, r3, r1, lsl #14
   18f40:	cmp	r3, r1, lsl #13
   18f44:	adc	r0, r0, r0
   18f48:	subcs	r3, r3, r1, lsl #13
   18f4c:	cmp	r3, r1, lsl #12
   18f50:	adc	r0, r0, r0
   18f54:	subcs	r3, r3, r1, lsl #12
   18f58:	cmp	r3, r1, lsl #11
   18f5c:	adc	r0, r0, r0
   18f60:	subcs	r3, r3, r1, lsl #11
   18f64:	cmp	r3, r1, lsl #10
   18f68:	adc	r0, r0, r0
   18f6c:	subcs	r3, r3, r1, lsl #10
   18f70:	cmp	r3, r1, lsl #9
   18f74:	adc	r0, r0, r0
   18f78:	subcs	r3, r3, r1, lsl #9
   18f7c:	cmp	r3, r1, lsl #8
   18f80:	adc	r0, r0, r0
   18f84:	subcs	r3, r3, r1, lsl #8
   18f88:	cmp	r3, r1, lsl #7
   18f8c:	adc	r0, r0, r0
   18f90:	subcs	r3, r3, r1, lsl #7
   18f94:	cmp	r3, r1, lsl #6
   18f98:	adc	r0, r0, r0
   18f9c:	subcs	r3, r3, r1, lsl #6
   18fa0:	cmp	r3, r1, lsl #5
   18fa4:	adc	r0, r0, r0
   18fa8:	subcs	r3, r3, r1, lsl #5
   18fac:	cmp	r3, r1, lsl #4
   18fb0:	adc	r0, r0, r0
   18fb4:	subcs	r3, r3, r1, lsl #4
   18fb8:	cmp	r3, r1, lsl #3
   18fbc:	adc	r0, r0, r0
   18fc0:	subcs	r3, r3, r1, lsl #3
   18fc4:	cmp	r3, r1, lsl #2
   18fc8:	adc	r0, r0, r0
   18fcc:	subcs	r3, r3, r1, lsl #2
   18fd0:	cmp	r3, r1, lsl #1
   18fd4:	adc	r0, r0, r0
   18fd8:	subcs	r3, r3, r1, lsl #1
   18fdc:	cmp	r3, r1
   18fe0:	adc	r0, r0, r0
   18fe4:	subcs	r3, r3, r1
   18fe8:	cmp	ip, #0
   18fec:	rsbmi	r0, r0, #0
   18ff0:	bx	lr
   18ff4:	teq	ip, r0
   18ff8:	rsbmi	r0, r0, #0
   18ffc:	bx	lr
   19000:	movcc	r0, #0
   19004:	asreq	r0, ip, #31
   19008:	orreq	r0, r0, #1
   1900c:	bx	lr
   19010:	clz	r2, r1
   19014:	rsb	r2, r2, #31
   19018:	cmp	ip, #0
   1901c:	lsr	r0, r3, r2
   19020:	rsbmi	r0, r0, #0
   19024:	bx	lr
   19028:	cmp	r0, #0
   1902c:	mvngt	r0, #-2147483648	; 0x80000000
   19030:	movlt	r0, #-2147483648	; 0x80000000
   19034:	b	19094 <__assert_fail@plt+0x7e88>
   19038:	cmp	r1, #0
   1903c:	beq	19028 <__assert_fail@plt+0x7e1c>
   19040:	push	{r0, r1, lr}
   19044:	bl	18e20 <__assert_fail@plt+0x7c14>
   19048:	pop	{r1, r2, lr}
   1904c:	mul	r3, r2, r0
   19050:	sub	r1, r1, r3
   19054:	bx	lr
   19058:	cmp	r3, #0
   1905c:	cmpeq	r2, #0
   19060:	bne	19078 <__assert_fail@plt+0x7e6c>
   19064:	cmp	r1, #0
   19068:	cmpeq	r0, #0
   1906c:	mvnne	r1, #0
   19070:	mvnne	r0, #0
   19074:	b	19094 <__assert_fail@plt+0x7e88>
   19078:	sub	sp, sp, #8
   1907c:	push	{sp, lr}
   19080:	bl	190a4 <__assert_fail@plt+0x7e98>
   19084:	ldr	lr, [sp, #4]
   19088:	add	sp, sp, #8
   1908c:	pop	{r2, r3}
   19090:	bx	lr
   19094:	push	{r1, lr}
   19098:	mov	r0, #8
   1909c:	bl	10f30 <raise@plt>
   190a0:	pop	{r1, pc}
   190a4:	cmp	r1, r3
   190a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   190ac:	cmpeq	r0, r2
   190b0:	mov	r4, r0
   190b4:	mov	r5, r1
   190b8:	ldr	r9, [sp, #28]
   190bc:	movcc	r0, #0
   190c0:	movcc	r1, #0
   190c4:	bcc	191bc <__assert_fail@plt+0x7fb0>
   190c8:	cmp	r3, #0
   190cc:	clzeq	ip, r2
   190d0:	clzne	ip, r3
   190d4:	addeq	ip, ip, #32
   190d8:	cmp	r5, #0
   190dc:	clzeq	r1, r4
   190e0:	addeq	r1, r1, #32
   190e4:	clzne	r1, r5
   190e8:	sub	ip, ip, r1
   190ec:	sub	lr, ip, #32
   190f0:	lsl	r7, r3, ip
   190f4:	rsb	r8, ip, #32
   190f8:	orr	r7, r7, r2, lsl lr
   190fc:	orr	r7, r7, r2, lsr r8
   19100:	lsl	r6, r2, ip
   19104:	cmp	r5, r7
   19108:	cmpeq	r4, r6
   1910c:	movcc	r0, #0
   19110:	movcc	r1, #0
   19114:	bcc	19130 <__assert_fail@plt+0x7f24>
   19118:	mov	r3, #1
   1911c:	subs	r4, r4, r6
   19120:	lsl	r1, r3, lr
   19124:	lsl	r0, r3, ip
   19128:	orr	r1, r1, r3, lsr r8
   1912c:	sbc	r5, r5, r7
   19130:	cmp	ip, #0
   19134:	beq	191bc <__assert_fail@plt+0x7fb0>
   19138:	lsrs	r3, r7, #1
   1913c:	rrx	r2, r6
   19140:	mov	r6, ip
   19144:	b	19168 <__assert_fail@plt+0x7f5c>
   19148:	subs	r4, r4, r2
   1914c:	sbc	r5, r5, r3
   19150:	adds	r4, r4, r4
   19154:	adc	r5, r5, r5
   19158:	adds	r4, r4, #1
   1915c:	adc	r5, r5, #0
   19160:	subs	r6, r6, #1
   19164:	beq	19184 <__assert_fail@plt+0x7f78>
   19168:	cmp	r5, r3
   1916c:	cmpeq	r4, r2
   19170:	bcs	19148 <__assert_fail@plt+0x7f3c>
   19174:	adds	r4, r4, r4
   19178:	adc	r5, r5, r5
   1917c:	subs	r6, r6, #1
   19180:	bne	19168 <__assert_fail@plt+0x7f5c>
   19184:	lsr	r6, r4, ip
   19188:	lsr	r7, r5, ip
   1918c:	orr	r6, r6, r5, lsl r8
   19190:	adds	r2, r0, r4
   19194:	orr	r6, r6, r5, lsr lr
   19198:	adc	r3, r1, r5
   1919c:	lsl	r1, r7, ip
   191a0:	orr	r1, r1, r6, lsl lr
   191a4:	lsl	r0, r6, ip
   191a8:	orr	r1, r1, r6, lsr r8
   191ac:	subs	r0, r2, r0
   191b0:	mov	r4, r6
   191b4:	mov	r5, r7
   191b8:	sbc	r1, r3, r1
   191bc:	cmp	r9, #0
   191c0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   191c4:	strd	r4, [r9]
   191c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   191cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191d0:	mov	r7, r0
   191d4:	ldr	r6, [pc, #72]	; 19224 <__assert_fail@plt+0x8018>
   191d8:	ldr	r5, [pc, #72]	; 19228 <__assert_fail@plt+0x801c>
   191dc:	add	r6, pc, r6
   191e0:	add	r5, pc, r5
   191e4:	sub	r6, r6, r5
   191e8:	mov	r8, r1
   191ec:	mov	r9, r2
   191f0:	bl	10eec <calloc@plt-0x20>
   191f4:	asrs	r6, r6, #2
   191f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   191fc:	mov	r4, #0
   19200:	add	r4, r4, #1
   19204:	ldr	r3, [r5], #4
   19208:	mov	r2, r9
   1920c:	mov	r1, r8
   19210:	mov	r0, r7
   19214:	blx	r3
   19218:	cmp	r6, r4
   1921c:	bne	19200 <__assert_fail@plt+0x7ff4>
   19220:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19224:	andeq	r1, r1, r4, lsr #26
   19228:	andeq	r1, r1, ip, lsl sp
   1922c:	bx	lr
   19230:	ldr	r3, [pc, #12]	; 19244 <__assert_fail@plt+0x8038>
   19234:	mov	r1, #0
   19238:	add	r3, pc, r3
   1923c:	ldr	r2, [r3]
   19240:	b	1111c <__cxa_atexit@plt>
   19244:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

00019248 <.fini>:
   19248:	push	{r3, lr}
   1924c:	pop	{r3, pc}
