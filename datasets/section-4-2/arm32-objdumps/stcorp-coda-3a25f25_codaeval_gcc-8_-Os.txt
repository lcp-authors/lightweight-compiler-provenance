
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010c74 <.init>:
   10c74:	push	{r3, lr}
   10c78:	bl	11250 <_start@@Base+0x3c>
   10c7c:	pop	{r3, pc}

Disassembly of section .plt:

00010c80 <coda_match_filefilter@plt-0x14>:
   10c80:	push	{lr}		; (str lr, [sp, #-4]!)
   10c84:	ldr	lr, [pc, #4]	; 10c90 <coda_match_filefilter@plt-0x4>
   10c88:	add	lr, pc, lr
   10c8c:	ldr	pc, [lr, #8]!
   10c90:	andeq	r2, r1, r0, ror r3

00010c94 <coda_match_filefilter@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #73728	; 0x12000
   10c9c:	ldr	pc, [ip, #880]!	; 0x370

00010ca0 <coda_expression_eval_integer@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #73728	; 0x12000
   10ca8:	ldr	pc, [ip, #872]!	; 0x368

00010cac <strcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #73728	; 0x12000
   10cb4:	ldr	pc, [ip, #864]!	; 0x360

00010cb8 <printf@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #73728	; 0x12000
   10cc0:	ldr	pc, [ip, #856]!	; 0x358

00010cc4 <coda_set_error@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #73728	; 0x12000
   10ccc:	ldr	pc, [ip, #848]!	; 0x350

00010cd0 <coda_open@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #73728	; 0x12000
   10cd8:	ldr	pc, [ip, #840]!	; 0x348

00010cdc <free@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #73728	; 0x12000
   10ce4:	ldr	pc, [ip, #832]!	; 0x340

00010ce8 <coda_set_definition_path_conditional@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #73728	; 0x12000
   10cf0:	ldr	pc, [ip, #824]!	; 0x338

00010cf4 <coda_set_definition_path@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #73728	; 0x12000
   10cfc:	ldr	pc, [ip, #816]!	; 0x330

00010d00 <coda_expression_eval_bool@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #73728	; 0x12000
   10d08:	ldr	pc, [ip, #808]!	; 0x328

00010d0c <coda_cursor_set_product@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #73728	; 0x12000
   10d14:	ldr	pc, [ip, #800]!	; 0x320

00010d18 <coda_done@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #73728	; 0x12000
   10d20:	ldr	pc, [ip, #792]!	; 0x318

00010d24 <puts@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #73728	; 0x12000
   10d2c:	ldr	pc, [ip, #784]!	; 0x310

00010d30 <__libc_start_main@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #73728	; 0x12000
   10d38:	ldr	pc, [ip, #776]!	; 0x308

00010d3c <coda_expression_delete@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #73728	; 0x12000
   10d44:	ldr	pc, [ip, #768]!	; 0x300

00010d48 <__gmon_start__@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #73728	; 0x12000
   10d50:	ldr	pc, [ip, #760]!	; 0x2f8

00010d54 <__ctype_b_loc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #73728	; 0x12000
   10d5c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d60 <exit@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #73728	; 0x12000
   10d68:	ldr	pc, [ip, #744]!	; 0x2e8

00010d6c <strlen@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #73728	; 0x12000
   10d74:	ldr	pc, [ip, #736]!	; 0x2e0

00010d78 <fprintf@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #73728	; 0x12000
   10d80:	ldr	pc, [ip, #728]!	; 0x2d8

00010d84 <coda_init@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #73728	; 0x12000
   10d8c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d90 <coda_set_option_perform_conversions@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #73728	; 0x12000
   10d98:	ldr	pc, [ip, #712]!	; 0x2c8

00010d9c <coda_expression_eval_string@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #73728	; 0x12000
   10da4:	ldr	pc, [ip, #704]!	; 0x2c0

00010da8 <putchar@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #73728	; 0x12000
   10db0:	ldr	pc, [ip, #696]!	; 0x2b8

00010db4 <coda_expression_get_type@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #73728	; 0x12000
   10dbc:	ldr	pc, [ip, #688]!	; 0x2b0

00010dc0 <coda_close@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #73728	; 0x12000
   10dc8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dcc <coda_expression_is_constant@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #73728	; 0x12000
   10dd4:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd8 <coda_expression_eval_float@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #73728	; 0x12000
   10de0:	ldr	pc, [ip, #664]!	; 0x298

00010de4 <coda_expression_eval_node@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #73728	; 0x12000
   10dec:	ldr	pc, [ip, #656]!	; 0x290

00010df0 <coda_errno_to_string@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #73728	; 0x12000
   10df8:	ldr	pc, [ip, #648]!	; 0x288

00010dfc <coda_expression_get_type_name@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #73728	; 0x12000
   10e04:	ldr	pc, [ip, #640]!	; 0x280

00010e08 <coda_expression_from_string@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #73728	; 0x12000
   10e10:	ldr	pc, [ip, #632]!	; 0x278

00010e14 <coda_get_libcoda_version@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #73728	; 0x12000
   10e1c:	ldr	pc, [ip, #624]!	; 0x270

00010e20 <coda_get_errno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #73728	; 0x12000
   10e28:	ldr	pc, [ip, #616]!	; 0x268

00010e2c <fputs@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #73728	; 0x12000
   10e34:	ldr	pc, [ip, #608]!	; 0x260

00010e38 <abort@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #73728	; 0x12000
   10e40:	ldr	pc, [ip, #600]!	; 0x258

00010e44 <coda_str64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #73728	; 0x12000
   10e4c:	ldr	pc, [ip, #592]!	; 0x250

00010e50 <__assert_fail@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #73728	; 0x12000
   10e58:	ldr	pc, [ip, #584]!	; 0x248

Disassembly of section .text:

00010e5c <main@@Base>:
   10e5c:	cmp	r0, #1
   10e60:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e64:	beq	10e9c <main@@Base+0x40>
   10e68:	mov	r8, r1
   10e6c:	mov	r7, r0
   10e70:	ldr	r4, [r8, #4]
   10e74:	ldr	r1, [pc, #824]	; 111b4 <main@@Base+0x358>
   10e78:	mov	r0, r4
   10e7c:	bl	10cac <strcmp@plt>
   10e80:	cmp	r0, #0
   10e84:	beq	10e9c <main@@Base+0x40>
   10e88:	ldr	r1, [pc, #808]	; 111b8 <main@@Base+0x35c>
   10e8c:	mov	r0, r4
   10e90:	bl	10cac <strcmp@plt>
   10e94:	cmp	r0, #0
   10e98:	bne	10ea8 <main@@Base+0x4c>
   10e9c:	bl	11304 <_start@@Base+0xf0>
   10ea0:	mov	r0, #0
   10ea4:	bl	10d60 <exit@plt>
   10ea8:	ldr	r1, [pc, #780]	; 111bc <main@@Base+0x360>
   10eac:	mov	r0, r4
   10eb0:	bl	10cac <strcmp@plt>
   10eb4:	cmp	r0, #0
   10eb8:	beq	10ed0 <main@@Base+0x74>
   10ebc:	ldr	r1, [pc, #764]	; 111c0 <main@@Base+0x364>
   10ec0:	mov	r0, r4
   10ec4:	bl	10cac <strcmp@plt>
   10ec8:	cmp	r0, #0
   10ecc:	bne	10ef4 <main@@Base+0x98>
   10ed0:	bl	10e14 <coda_get_libcoda_version@plt>
   10ed4:	mov	r1, r0
   10ed8:	ldr	r0, [pc, #740]	; 111c4 <main@@Base+0x368>
   10edc:	bl	10cb8 <printf@plt>
   10ee0:	ldr	r0, [pc, #736]	; 111c8 <main@@Base+0x36c>
   10ee4:	bl	10d24 <puts@plt>
   10ee8:	mov	r0, #10
   10eec:	bl	10da8 <putchar@plt>
   10ef0:	b	10ea0 <main@@Base+0x44>
   10ef4:	cmp	r7, #2
   10ef8:	ble	10ff4 <main@@Base+0x198>
   10efc:	ldr	r1, [pc, #712]	; 111cc <main@@Base+0x370>
   10f00:	mov	r0, r4
   10f04:	bl	10cac <strcmp@plt>
   10f08:	cmp	r0, #0
   10f0c:	bne	10ff4 <main@@Base+0x198>
   10f10:	ldr	r0, [r8, #8]
   10f14:	mov	r4, #3
   10f18:	bl	10cf4 <coda_set_definition_path@plt>
   10f1c:	ldr	fp, [pc, #684]	; 111d0 <main@@Base+0x374>
   10f20:	mov	r6, #0
   10f24:	mov	r9, #1
   10f28:	cmp	r4, r7
   10f2c:	bge	1103c <main@@Base+0x1e0>
   10f30:	ldr	r5, [r8, r4, lsl #2]
   10f34:	lsl	sl, r4, #2
   10f38:	ldr	r1, [pc, #660]	; 111d4 <main@@Base+0x378>
   10f3c:	mov	r0, r5
   10f40:	bl	10cac <strcmp@plt>
   10f44:	cmp	r0, #0
   10f48:	beq	11058 <main@@Base+0x1fc>
   10f4c:	ldr	r1, [pc, #644]	; 111d8 <main@@Base+0x37c>
   10f50:	mov	r0, r5
   10f54:	bl	10cac <strcmp@plt>
   10f58:	cmp	r0, #0
   10f5c:	beq	11058 <main@@Base+0x1fc>
   10f60:	mov	r1, fp
   10f64:	mov	r0, r5
   10f68:	bl	10cac <strcmp@plt>
   10f6c:	cmp	r0, #0
   10f70:	beq	11064 <main@@Base+0x208>
   10f74:	ldr	r1, [pc, #608]	; 111dc <main@@Base+0x380>
   10f78:	mov	r0, r5
   10f7c:	bl	10cac <strcmp@plt>
   10f80:	cmp	r0, #0
   10f84:	beq	11064 <main@@Base+0x208>
   10f88:	ldr	r1, [pc, #592]	; 111e0 <main@@Base+0x384>
   10f8c:	mov	r0, r5
   10f90:	add	r4, r4, #1
   10f94:	bl	10cac <strcmp@plt>
   10f98:	cmp	r0, #0
   10f9c:	bne	11030 <main@@Base+0x1d4>
   10fa0:	cmp	r4, r7
   10fa4:	bge	11030 <main@@Base+0x1d4>
   10fa8:	add	sl, r8, sl
   10fac:	ldr	r0, [sl, #4]
   10fb0:	ldrb	r3, [r0]
   10fb4:	cmp	r3, #45	; 0x2d
   10fb8:	beq	11030 <main@@Base+0x1d4>
   10fbc:	ldr	r1, [pc, #544]	; 111e4 <main@@Base+0x388>
   10fc0:	bl	10e08 <coda_expression_from_string@plt>
   10fc4:	cmp	r0, #0
   10fc8:	beq	1105c <main@@Base+0x200>
   10fcc:	ldr	r3, [pc, #532]	; 111e8 <main@@Base+0x38c>
   10fd0:	ldr	r4, [r3]
   10fd4:	bl	10e20 <coda_get_errno@plt>
   10fd8:	ldr	r0, [r0]
   10fdc:	bl	10df0 <coda_errno_to_string@plt>
   10fe0:	ldr	r1, [pc, #516]	; 111ec <main@@Base+0x390>
   10fe4:	mov	r2, r0
   10fe8:	mov	r0, r4
   10fec:	bl	10d78 <fprintf@plt>
   10ff0:	b	11050 <main@@Base+0x1f4>
   10ff4:	ldr	r2, [pc, #500]	; 111f0 <main@@Base+0x394>
   10ff8:	mov	r1, #0
   10ffc:	ldr	r0, [r8]
   11000:	bl	10ce8 <coda_set_definition_path_conditional@plt>
   11004:	cmp	r0, #0
   11008:	moveq	r4, #1
   1100c:	beq	10f1c <main@@Base+0xc0>
   11010:	ldr	r3, [pc, #464]	; 111e8 <main@@Base+0x38c>
   11014:	ldr	r4, [r3]
   11018:	bl	10e20 <coda_get_errno@plt>
   1101c:	ldr	r0, [r0]
   11020:	bl	10df0 <coda_errno_to_string@plt>
   11024:	mov	r2, r0
   11028:	ldr	r1, [pc, #452]	; 111f4 <main@@Base+0x398>
   1102c:	b	10fe8 <main@@Base+0x18c>
   11030:	ldrb	r3, [r5]
   11034:	cmp	r3, #45	; 0x2d
   11038:	bne	11178 <main@@Base+0x31c>
   1103c:	ldr	r3, [pc, #420]	; 111e8 <main@@Base+0x38c>
   11040:	ldr	r0, [pc, #432]	; 111f8 <main@@Base+0x39c>
   11044:	ldr	r1, [r3]
   11048:	bl	10e2c <fputs@plt>
   1104c:	bl	11304 <_start@@Base+0xf0>
   11050:	mov	r0, #1
   11054:	b	10ea4 <main@@Base+0x48>
   11058:	mov	r6, #1
   1105c:	add	r4, r4, #1
   11060:	b	10f28 <main@@Base+0xcc>
   11064:	mov	r9, r0
   11068:	b	1105c <main@@Base+0x200>
   1106c:	mov	r1, sl
   11070:	ldr	r0, [sl, #4]
   11074:	bl	10db4 <coda_expression_get_type@plt>
   11078:	cmp	r0, #0
   1107c:	bne	11010 <main@@Base+0x1b4>
   11080:	ldr	r0, [sl]
   11084:	sub	r3, r0, #4
   11088:	cmp	r3, #1
   1108c:	bhi	110a8 <main@@Base+0x24c>
   11090:	ldr	r3, [pc, #336]	; 111e8 <main@@Base+0x38c>
   11094:	ldr	r4, [r3]
   11098:	bl	10dfc <coda_expression_get_type_name@plt>
   1109c:	mov	r2, r0
   110a0:	ldr	r1, [pc, #340]	; 111fc <main@@Base+0x3a0>
   110a4:	b	10fe8 <main@@Base+0x18c>
   110a8:	cmp	r6, #0
   110ac:	beq	110d4 <main@@Base+0x278>
   110b0:	ldr	r0, [sl, #4]
   110b4:	bl	10d3c <coda_expression_delete@plt>
   110b8:	ldr	r0, [sl, #8]
   110bc:	cmp	r0, #0
   110c0:	beq	110c8 <main@@Base+0x26c>
   110c4:	bl	10d3c <coda_expression_delete@plt>
   110c8:	mov	r0, #0
   110cc:	add	sp, sp, #12
   110d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110d4:	cmp	r7, r4
   110d8:	ble	11124 <main@@Base+0x2c8>
   110dc:	bl	10d84 <coda_init@plt>
   110e0:	cmp	r0, #0
   110e4:	bne	11010 <main@@Base+0x1b4>
   110e8:	mov	r0, r9
   110ec:	bl	10d90 <coda_set_option_perform_conversions@plt>
   110f0:	ldr	r3, [pc, #264]	; 11200 <main@@Base+0x3a4>
   110f4:	add	r2, r8, r4, lsl #2
   110f8:	sub	r1, r7, r4
   110fc:	mov	r0, r6
   11100:	str	r6, [sp]
   11104:	bl	10c94 <coda_match_filefilter@plt>
   11108:	cmp	r0, #0
   1110c:	bne	11010 <main@@Base+0x1b4>
   11110:	bl	10d18 <coda_done@plt>
   11114:	ldr	r0, [r5, #4]
   11118:	bl	10d3c <coda_expression_delete@plt>
   1111c:	ldr	r0, [r5, #8]
   11120:	b	110bc <main@@Base+0x260>
   11124:	ldr	r3, [sl, #8]
   11128:	cmp	r3, #0
   1112c:	beq	11144 <main@@Base+0x2e8>
   11130:	ldr	r3, [pc, #176]	; 111e8 <main@@Base+0x38c>
   11134:	ldr	r0, [pc, #200]	; 11204 <main@@Base+0x3a8>
   11138:	ldr	r1, [r3]
   1113c:	bl	10e2c <fputs@plt>
   11140:	b	11050 <main@@Base+0x1f4>
   11144:	ldr	r0, [sl, #4]
   11148:	bl	10dcc <coda_expression_is_constant@plt>
   1114c:	cmp	r0, #0
   11150:	bne	11164 <main@@Base+0x308>
   11154:	ldr	r3, [pc, #140]	; 111e8 <main@@Base+0x38c>
   11158:	ldr	r0, [pc, #168]	; 11208 <main@@Base+0x3ac>
   1115c:	ldr	r1, [r3]
   11160:	b	1113c <main@@Base+0x2e0>
   11164:	mov	r0, r6
   11168:	bl	114bc <_start@@Base+0x2a8>
   1116c:	cmp	r0, #0
   11170:	beq	11114 <main@@Base+0x2b8>
   11174:	b	11010 <main@@Base+0x1b4>
   11178:	ldr	sl, [pc, #140]	; 1120c <main@@Base+0x3b0>
   1117c:	mov	r0, r5
   11180:	add	r1, sl, #4
   11184:	mov	r5, sl
   11188:	bl	10e08 <coda_expression_from_string@plt>
   1118c:	cmp	r0, #0
   11190:	beq	1106c <main@@Base+0x210>
   11194:	ldr	r3, [pc, #76]	; 111e8 <main@@Base+0x38c>
   11198:	ldr	r4, [r3]
   1119c:	bl	10e20 <coda_get_errno@plt>
   111a0:	ldr	r0, [r0]
   111a4:	bl	10df0 <coda_errno_to_string@plt>
   111a8:	mov	r2, r0
   111ac:	ldr	r1, [pc, #92]	; 11210 <main@@Base+0x3b4>
   111b0:	b	10fe8 <main@@Base+0x18c>
   111b4:	andeq	r2, r1, r5, lsl r2
   111b8:	andeq	r1, r1, r2, lsr #28
   111bc:	andeq	r2, r1, r8, lsl r2
   111c0:	andeq	r1, r1, r8, asr lr
   111c4:	andeq	r2, r1, fp, lsl r2
   111c8:	andeq	r2, r1, r8, lsr #4
   111cc:	andeq	r2, r1, r7, asr r2
   111d0:	andeq	r2, r1, r2, lsl #5
   111d4:	andeq	r2, r1, pc, ror r2
   111d8:	andeq	r1, r1, sp, asr fp
   111dc:	andeq	r1, r1, r5, lsl ip
   111e0:	andeq	r2, r1, r5, lsl #5
   111e4:	andeq	r3, r2, r0, asr #1
   111e8:	strheq	r3, [r2], -r0
   111ec:	andeq	r2, r1, r8, lsl #5
   111f0:	andeq	r2, r1, sl, asr r2
   111f4:	andeq	r2, r1, r4, ror r2
   111f8:	andeq	r2, r1, sp, lsr #5
   111fc:	andeq	r2, r1, r7, ror #5
   11200:			; <UNDEFINED> instruction: 0x000118b4
   11204:	andeq	r2, r1, r6, lsl r3
   11208:	andeq	r2, r1, r7, ror r3
   1120c:	strheq	r3, [r2], -r8
   11210:	andeq	r2, r1, r7, asr #5

00011214 <_start@@Base>:
   11214:	mov	fp, #0
   11218:	mov	lr, #0
   1121c:	pop	{r1}		; (ldr r1, [sp], #4)
   11220:	mov	r2, sp
   11224:	push	{r2}		; (str r2, [sp, #-4]!)
   11228:	push	{r0}		; (str r0, [sp, #-4]!)
   1122c:	ldr	ip, [pc, #16]	; 11244 <_start@@Base+0x30>
   11230:	push	{ip}		; (str ip, [sp, #-4]!)
   11234:	ldr	r0, [pc, #12]	; 11248 <_start@@Base+0x34>
   11238:	ldr	r3, [pc, #12]	; 1124c <_start@@Base+0x38>
   1123c:	bl	10d30 <__libc_start_main@plt>
   11240:	bl	10e38 <abort@plt>
   11244:	muleq	r1, r0, r9
   11248:	andeq	r0, r1, ip, asr lr
   1124c:	andeq	r1, r1, r0, lsr r9
   11250:	ldr	r3, [pc, #20]	; 1126c <_start@@Base+0x58>
   11254:	ldr	r2, [pc, #20]	; 11270 <_start@@Base+0x5c>
   11258:	add	r3, pc, r3
   1125c:	ldr	r2, [r3, r2]
   11260:	cmp	r2, #0
   11264:	bxeq	lr
   11268:	b	10d48 <__gmon_start__@plt>
   1126c:	andeq	r1, r1, r0, lsr #27
   11270:	andeq	r0, r0, r4, lsr #1
   11274:	ldr	r0, [pc, #24]	; 11294 <_start@@Base+0x80>
   11278:	ldr	r3, [pc, #24]	; 11298 <_start@@Base+0x84>
   1127c:	cmp	r3, r0
   11280:	bxeq	lr
   11284:	ldr	r3, [pc, #16]	; 1129c <_start@@Base+0x88>
   11288:	cmp	r3, #0
   1128c:	bxeq	lr
   11290:	bx	r3
   11294:	strheq	r3, [r2], -r0
   11298:	strheq	r3, [r2], -r0
   1129c:	andeq	r0, r0, r0
   112a0:	ldr	r0, [pc, #36]	; 112cc <_start@@Base+0xb8>
   112a4:	ldr	r1, [pc, #36]	; 112d0 <_start@@Base+0xbc>
   112a8:	sub	r1, r1, r0
   112ac:	asr	r1, r1, #2
   112b0:	add	r1, r1, r1, lsr #31
   112b4:	asrs	r1, r1, #1
   112b8:	bxeq	lr
   112bc:	ldr	r3, [pc, #16]	; 112d4 <_start@@Base+0xc0>
   112c0:	cmp	r3, #0
   112c4:	bxeq	lr
   112c8:	bx	r3
   112cc:	strheq	r3, [r2], -r0
   112d0:	strheq	r3, [r2], -r0
   112d4:	andeq	r0, r0, r0
   112d8:	push	{r4, lr}
   112dc:	ldr	r4, [pc, #24]	; 112fc <_start@@Base+0xe8>
   112e0:	ldrb	r3, [r4]
   112e4:	cmp	r3, #0
   112e8:	popne	{r4, pc}
   112ec:	bl	11274 <_start@@Base+0x60>
   112f0:	mov	r3, #1
   112f4:	strb	r3, [r4]
   112f8:	pop	{r4, pc}
   112fc:	strheq	r3, [r2], -r4
   11300:	b	112a0 <_start@@Base+0x8c>
   11304:	push	{r4, lr}
   11308:	ldr	r0, [pc, #300]	; 1143c <_start@@Base+0x228>
   1130c:	bl	10d24 <puts@plt>
   11310:	ldr	r0, [pc, #296]	; 11440 <_start@@Base+0x22c>
   11314:	bl	10d24 <puts@plt>
   11318:	ldr	r0, [pc, #292]	; 11444 <_start@@Base+0x230>
   1131c:	bl	10d24 <puts@plt>
   11320:	ldr	r0, [pc, #288]	; 11448 <_start@@Base+0x234>
   11324:	bl	10d24 <puts@plt>
   11328:	ldr	r0, [pc, #284]	; 1144c <_start@@Base+0x238>
   1132c:	bl	10d24 <puts@plt>
   11330:	ldr	r0, [pc, #280]	; 11450 <_start@@Base+0x23c>
   11334:	bl	10d24 <puts@plt>
   11338:	ldr	r0, [pc, #276]	; 11454 <_start@@Base+0x240>
   1133c:	bl	10d24 <puts@plt>
   11340:	mov	r0, #10
   11344:	bl	10da8 <putchar@plt>
   11348:	ldr	r0, [pc, #264]	; 11458 <_start@@Base+0x244>
   1134c:	bl	10d24 <puts@plt>
   11350:	ldr	r0, [pc, #260]	; 1145c <_start@@Base+0x248>
   11354:	bl	10d24 <puts@plt>
   11358:	ldr	r0, [pc, #256]	; 11460 <_start@@Base+0x24c>
   1135c:	bl	10d24 <puts@plt>
   11360:	ldr	r0, [pc, #252]	; 11464 <_start@@Base+0x250>
   11364:	bl	10d24 <puts@plt>
   11368:	ldr	r0, [pc, #248]	; 11468 <_start@@Base+0x254>
   1136c:	bl	10d24 <puts@plt>
   11370:	ldr	r0, [pc, #244]	; 1146c <_start@@Base+0x258>
   11374:	bl	10d24 <puts@plt>
   11378:	ldr	r0, [pc, #240]	; 11470 <_start@@Base+0x25c>
   1137c:	bl	10d24 <puts@plt>
   11380:	ldr	r0, [pc, #236]	; 11474 <_start@@Base+0x260>
   11384:	bl	10d24 <puts@plt>
   11388:	ldr	r0, [pc, #232]	; 11478 <_start@@Base+0x264>
   1138c:	bl	10d24 <puts@plt>
   11390:	ldr	r0, [pc, #228]	; 1147c <_start@@Base+0x268>
   11394:	bl	10d24 <puts@plt>
   11398:	ldr	r0, [pc, #224]	; 11480 <_start@@Base+0x26c>
   1139c:	bl	10d24 <puts@plt>
   113a0:	ldr	r0, [pc, #220]	; 11484 <_start@@Base+0x270>
   113a4:	bl	10d24 <puts@plt>
   113a8:	mov	r0, #10
   113ac:	bl	10da8 <putchar@plt>
   113b0:	ldr	r0, [pc, #208]	; 11488 <_start@@Base+0x274>
   113b4:	bl	10d24 <puts@plt>
   113b8:	ldr	r0, [pc, #204]	; 1148c <_start@@Base+0x278>
   113bc:	bl	10d24 <puts@plt>
   113c0:	mov	r0, #10
   113c4:	bl	10da8 <putchar@plt>
   113c8:	ldr	r0, [pc, #192]	; 11490 <_start@@Base+0x27c>
   113cc:	bl	10d24 <puts@plt>
   113d0:	ldr	r0, [pc, #188]	; 11494 <_start@@Base+0x280>
   113d4:	bl	10d24 <puts@plt>
   113d8:	mov	r0, #10
   113dc:	bl	10da8 <putchar@plt>
   113e0:	ldr	r0, [pc, #176]	; 11498 <_start@@Base+0x284>
   113e4:	bl	10d24 <puts@plt>
   113e8:	ldr	r0, [pc, #172]	; 1149c <_start@@Base+0x288>
   113ec:	bl	10d24 <puts@plt>
   113f0:	mov	r0, #10
   113f4:	bl	10da8 <putchar@plt>
   113f8:	ldr	r0, [pc, #160]	; 114a0 <_start@@Base+0x28c>
   113fc:	bl	10d24 <puts@plt>
   11400:	ldr	r0, [pc, #156]	; 114a4 <_start@@Base+0x290>
   11404:	bl	10d24 <puts@plt>
   11408:	ldr	r0, [pc, #152]	; 114a8 <_start@@Base+0x294>
   1140c:	bl	10d24 <puts@plt>
   11410:	ldr	r0, [pc, #148]	; 114ac <_start@@Base+0x298>
   11414:	bl	10d24 <puts@plt>
   11418:	ldr	r0, [pc, #144]	; 114b0 <_start@@Base+0x29c>
   1141c:	bl	10d24 <puts@plt>
   11420:	ldr	r0, [pc, #140]	; 114b4 <_start@@Base+0x2a0>
   11424:	bl	10d24 <puts@plt>
   11428:	ldr	r0, [pc, #136]	; 114b8 <_start@@Base+0x2a4>
   1142c:	bl	10d24 <puts@plt>
   11430:	mov	r0, #10
   11434:	pop	{r4, lr}
   11438:	b	10da8 <putchar@plt>
   1143c:			; <UNDEFINED> instruction: 0x000119b0
   11440:			; <UNDEFINED> instruction: 0x000119b7
   11444:	andeq	r1, r1, r5, lsl #20
   11448:	andeq	r1, r1, r3, asr sl
   1144c:	andeq	r1, r1, r7, ror sl
   11450:	andeq	r1, r1, r1, asr #21
   11454:	andeq	r1, r1, ip, lsl #22
   11458:	andeq	r1, r1, ip, lsr fp
   1145c:	andeq	r1, r1, sp, asr #22
   11460:	andeq	r1, r1, r5, ror #22
   11464:			; <UNDEFINED> instruction: 0x00011bb5
   11468:	andeq	r1, r1, r5, lsl #24
   1146c:	andeq	r1, r1, fp, lsr #24
   11470:	andeq	r1, r1, r5, ror #24
   11474:	andeq	r1, r1, sp, ror ip
   11478:	andeq	r1, r1, r7, asr #25
   1147c:	andeq	r1, r1, r2, lsl sp
   11480:	andeq	r1, r1, r0, lsr sp
   11484:	andeq	r1, r1, ip, ror sp
   11488:	andeq	r1, r1, fp, lsr #27
   1148c:	strdeq	r1, [r1], -fp
   11490:	andeq	r1, r1, r2, lsl lr
   11494:	andeq	r1, r1, r9, lsr #28
   11498:	andeq	r1, r1, r7, asr #28
   1149c:	andeq	r1, r1, r2, ror #28
   114a0:	muleq	r1, r4, lr
   114a4:	ldrdeq	r1, [r1], -lr
   114a8:	andeq	r1, r1, r8, lsr #30
   114ac:	andeq	r1, r1, r6, asr pc
   114b0:	muleq	r1, pc, pc	; <UNPREDICTABLE>
   114b4:	andeq	r1, r1, r8, ror #31
   114b8:	andeq	r2, r1, r7, lsr #32
   114bc:	ldr	ip, [pc, #668]	; 11760 <_start@@Base+0x54c>
   114c0:	mov	r1, r0
   114c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   114c8:	sub	sp, sp, #32
   114cc:	ldr	r3, [ip]
   114d0:	cmp	r3, #5
   114d4:	ldrls	pc, [pc, r3, lsl #2]
   114d8:	b	11758 <_start@@Base+0x544>
   114dc:	strdeq	r1, [r1], -r4
   114e0:	andeq	r1, r1, r4, asr r5
   114e4:	muleq	r1, r4, r5
   114e8:	ldrdeq	r1, [r1], -r0
   114ec:	andeq	r1, r1, r4, asr #14
   114f0:	andeq	r1, r1, r4, asr #14
   114f4:	add	r2, sp, #8
   114f8:	ldr	r0, [ip, #4]
   114fc:	bl	10d00 <coda_expression_eval_bool@plt>
   11500:	subs	r5, r0, #0
   11504:	beq	11534 <_start@@Base+0x320>
   11508:	bl	10e20 <coda_get_errno@plt>
   1150c:	ldr	r0, [r0]
   11510:	bl	10df0 <coda_errno_to_string@plt>
   11514:	ldr	r1, [pc, #584]	; 11764 <_start@@Base+0x550>
   11518:	mov	r2, r0
   1151c:	mvn	r0, #400	; 0x190
   11520:	mvn	r5, #0
   11524:	bl	10cc4 <coda_set_error@plt>
   11528:	mov	r0, r5
   1152c:	add	sp, sp, #32
   11530:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11534:	ldr	r0, [sp, #8]
   11538:	ldr	r2, [pc, #552]	; 11768 <_start@@Base+0x554>
   1153c:	ldr	r3, [pc, #552]	; 1176c <_start@@Base+0x558>
   11540:	cmp	r0, #0
   11544:	movne	r0, r2
   11548:	moveq	r0, r3
   1154c:	bl	10d24 <puts@plt>
   11550:	b	11528 <_start@@Base+0x314>
   11554:	mov	r2, sp
   11558:	ldr	r0, [ip, #4]
   1155c:	bl	10ca0 <coda_expression_eval_integer@plt>
   11560:	subs	r5, r0, #0
   11564:	beq	11580 <_start@@Base+0x36c>
   11568:	bl	10e20 <coda_get_errno@plt>
   1156c:	ldr	r0, [r0]
   11570:	bl	10df0 <coda_errno_to_string@plt>
   11574:	mov	r2, r0
   11578:	ldr	r1, [pc, #496]	; 11770 <_start@@Base+0x55c>
   1157c:	b	1151c <_start@@Base+0x308>
   11580:	add	r2, sp, #8
   11584:	ldrd	r0, [sp]
   11588:	bl	10e44 <coda_str64@plt>
   1158c:	add	r0, sp, #8
   11590:	b	1154c <_start@@Base+0x338>
   11594:	add	r2, sp, #8
   11598:	ldr	r0, [ip, #4]
   1159c:	bl	10dd8 <coda_expression_eval_float@plt>
   115a0:	subs	r5, r0, #0
   115a4:	beq	115c0 <_start@@Base+0x3ac>
   115a8:	bl	10e20 <coda_get_errno@plt>
   115ac:	ldr	r0, [r0]
   115b0:	bl	10df0 <coda_errno_to_string@plt>
   115b4:	mov	r2, r0
   115b8:	ldr	r1, [pc, #436]	; 11774 <_start@@Base+0x560>
   115bc:	b	1151c <_start@@Base+0x308>
   115c0:	ldr	r0, [pc, #432]	; 11778 <_start@@Base+0x564>
   115c4:	ldrd	r2, [sp, #8]
   115c8:	bl	10cb8 <printf@plt>
   115cc:	b	11528 <_start@@Base+0x314>
   115d0:	mov	r3, #0
   115d4:	mov	r2, sp
   115d8:	ldr	r0, [ip, #4]
   115dc:	str	r3, [sp]
   115e0:	add	r3, sp, #8
   115e4:	bl	10d9c <coda_expression_eval_string@plt>
   115e8:	subs	r5, r0, #0
   115ec:	beq	11608 <_start@@Base+0x3f4>
   115f0:	bl	10e20 <coda_get_errno@plt>
   115f4:	ldr	r0, [r0]
   115f8:	bl	10df0 <coda_errno_to_string@plt>
   115fc:	mov	r2, r0
   11600:	ldr	r1, [pc, #372]	; 1177c <_start@@Base+0x568>
   11604:	b	1151c <_start@@Base+0x308>
   11608:	ldr	r6, [sp]
   1160c:	ldr	r0, [sp, #8]
   11610:	cmp	r6, #0
   11614:	cmpne	r0, #0
   11618:	bne	11638 <_start@@Base+0x424>
   1161c:	mov	r0, #10
   11620:	bl	10da8 <putchar@plt>
   11624:	ldr	r0, [sp]
   11628:	cmp	r0, #0
   1162c:	beq	11528 <_start@@Base+0x314>
   11630:	bl	10cdc <free@plt>
   11634:	b	11528 <_start@@Base+0x314>
   11638:	cmp	r0, #0
   1163c:	bge	11648 <_start@@Base+0x434>
   11640:	mov	r0, r6
   11644:	bl	10d6c <strlen@plt>
   11648:	add	r7, r6, r0
   1164c:	ldr	r8, [pc, #300]	; 11780 <_start@@Base+0x56c>
   11650:	ldr	r9, [pc, #300]	; 11784 <_start@@Base+0x570>
   11654:	ldr	sl, [pc, #300]	; 11788 <_start@@Base+0x574>
   11658:	b	11674 <_start@@Base+0x460>
   1165c:	cmp	r4, #9
   11660:	beq	11720 <_start@@Base+0x50c>
   11664:	cmp	r4, #10
   11668:	ldreq	r0, [pc, #284]	; 1178c <_start@@Base+0x578>
   1166c:	bne	116a4 <_start@@Base+0x490>
   11670:	bl	10cb8 <printf@plt>
   11674:	cmp	r6, r7
   11678:	beq	1161c <_start@@Base+0x408>
   1167c:	ldrb	r4, [r6], #1
   11680:	cmp	r4, #11
   11684:	beq	11728 <_start@@Base+0x514>
   11688:	bhi	116cc <_start@@Base+0x4b8>
   1168c:	cmp	r4, #8
   11690:	beq	11710 <_start@@Base+0x4fc>
   11694:	bhi	1165c <_start@@Base+0x448>
   11698:	cmp	r4, #7
   1169c:	ldreq	r0, [pc, #236]	; 11790 <_start@@Base+0x57c>
   116a0:	beq	11670 <_start@@Base+0x45c>
   116a4:	bl	10d54 <__ctype_b_loc@plt>
   116a8:	ldr	r2, [r0]
   116ac:	lsl	r3, r4, #1
   116b0:	ldrh	r3, [r2, r3]
   116b4:	tst	r3, #16384	; 0x4000
   116b8:	bne	11738 <_start@@Base+0x524>
   116bc:	mov	r1, r4
   116c0:	mov	r0, r9
   116c4:	bl	10cb8 <printf@plt>
   116c8:	b	11674 <_start@@Base+0x460>
   116cc:	cmp	r4, #27
   116d0:	beq	11708 <_start@@Base+0x4f4>
   116d4:	bhi	116f0 <_start@@Base+0x4dc>
   116d8:	cmp	r4, #12
   116dc:	beq	11718 <_start@@Base+0x504>
   116e0:	cmp	r4, #13
   116e4:	ldreq	r0, [pc, #168]	; 11794 <_start@@Base+0x580>
   116e8:	beq	11670 <_start@@Base+0x45c>
   116ec:	b	116a4 <_start@@Base+0x490>
   116f0:	cmp	r4, #34	; 0x22
   116f4:	beq	11730 <_start@@Base+0x51c>
   116f8:	cmp	r4, #92	; 0x5c
   116fc:	ldreq	r0, [pc, #148]	; 11798 <_start@@Base+0x584>
   11700:	beq	11670 <_start@@Base+0x45c>
   11704:	b	116a4 <_start@@Base+0x490>
   11708:	mov	r0, sl
   1170c:	b	11670 <_start@@Base+0x45c>
   11710:	ldr	r0, [pc, #132]	; 1179c <_start@@Base+0x588>
   11714:	b	11670 <_start@@Base+0x45c>
   11718:	ldr	r0, [pc, #128]	; 117a0 <_start@@Base+0x58c>
   1171c:	b	11670 <_start@@Base+0x45c>
   11720:	ldr	r0, [pc, #124]	; 117a4 <_start@@Base+0x590>
   11724:	b	11670 <_start@@Base+0x45c>
   11728:	mov	r0, r8
   1172c:	b	11670 <_start@@Base+0x45c>
   11730:	ldr	r0, [pc, #112]	; 117a8 <_start@@Base+0x594>
   11734:	b	11670 <_start@@Base+0x45c>
   11738:	mov	r0, r4
   1173c:	bl	10da8 <putchar@plt>
   11740:	b	11674 <_start@@Base+0x460>
   11744:	ldr	r3, [pc, #96]	; 117ac <_start@@Base+0x598>
   11748:	mov	r2, #230	; 0xe6
   1174c:	ldr	r1, [pc, #92]	; 117b0 <_start@@Base+0x59c>
   11750:	ldr	r0, [pc, #92]	; 117b4 <_start@@Base+0x5a0>
   11754:	bl	10e50 <__assert_fail@plt>
   11758:	mov	r5, #0
   1175c:	b	11528 <_start@@Base+0x314>
   11760:	strheq	r3, [r2], -r8
   11764:	andeq	r2, r1, r2, ror r0
   11768:	andeq	r2, r1, r7, rrx
   1176c:	andeq	r2, r1, ip, rrx
   11770:	muleq	r1, sl, r0
   11774:	andeq	r2, r1, r2, asr #1
   11778:	strdeq	r2, [r1], -r1
   1177c:	strdeq	r2, [r1], -r8
   11780:	andeq	r2, r1, r4, lsr r1
   11784:	andeq	r2, r1, sp, lsr r1
   11788:	andeq	r2, r1, pc, lsl r1
   1178c:	andeq	r2, r1, fp, lsr #2
   11790:	andeq	r2, r1, r2, lsr #2
   11794:	andeq	r2, r1, lr, lsr #2
   11798:	andeq	r2, r1, r7, lsr r1
   1179c:	andeq	r2, r1, r5, lsr #2
   117a0:	andeq	r2, r1, r8, lsr #2
   117a4:	andeq	r2, r1, r1, lsr r1
   117a8:	andeq	r2, r1, sl, lsr r1
   117ac:	andeq	r1, r1, r0, lsr #19
   117b0:	andeq	r2, r1, r3, asr #2
   117b4:	andeq	r2, r1, r8, lsl #3
   117b8:	push	{r4, r5, lr}
   117bc:	mov	r3, #0
   117c0:	sub	sp, sp, #532	; 0x214
   117c4:	add	r1, sp, #4
   117c8:	mov	r5, r0
   117cc:	str	r3, [sp, #4]
   117d0:	bl	10cd0 <coda_open@plt>
   117d4:	cmp	r0, #0
   117d8:	bne	117f8 <_start@@Base+0x5e4>
   117dc:	add	r0, sp, #8
   117e0:	ldr	r1, [sp, #4]
   117e4:	bl	10d0c <coda_cursor_set_product@plt>
   117e8:	subs	r4, r0, #0
   117ec:	beq	11800 <_start@@Base+0x5ec>
   117f0:	ldr	r0, [sp, #4]
   117f4:	bl	10dc0 <coda_close@plt>
   117f8:	mov	r4, #1
   117fc:	b	1184c <_start@@Base+0x638>
   11800:	ldr	r3, [pc, #156]	; 118a4 <_start@@Base+0x690>
   11804:	ldr	r0, [r3, #8]
   11808:	cmp	r0, #0
   1180c:	beq	11858 <_start@@Base+0x644>
   11810:	add	r1, sp, #8
   11814:	bl	10de4 <coda_expression_eval_node@plt>
   11818:	cmp	r0, #0
   1181c:	beq	11858 <_start@@Base+0x644>
   11820:	ldr	r3, [pc, #128]	; 118a8 <_start@@Base+0x694>
   11824:	ldr	r5, [r3]
   11828:	bl	10e20 <coda_get_errno@plt>
   1182c:	ldr	r0, [r0]
   11830:	bl	10df0 <coda_errno_to_string@plt>
   11834:	mov	r2, r0
   11838:	ldr	r1, [pc, #108]	; 118ac <_start@@Base+0x698>
   1183c:	mov	r0, r5
   11840:	bl	10d78 <fprintf@plt>
   11844:	ldr	r0, [sp, #4]
   11848:	bl	10dc0 <coda_close@plt>
   1184c:	mov	r0, r4
   11850:	add	sp, sp, #532	; 0x214
   11854:	pop	{r4, r5, pc}
   11858:	add	r0, sp, #8
   1185c:	bl	114bc <_start@@Base+0x2a8>
   11860:	cmp	r0, #0
   11864:	beq	11890 <_start@@Base+0x67c>
   11868:	ldr	r3, [pc, #56]	; 118a8 <_start@@Base+0x694>
   1186c:	ldr	r4, [r3]
   11870:	bl	10e20 <coda_get_errno@plt>
   11874:	ldr	r0, [r0]
   11878:	bl	10df0 <coda_errno_to_string@plt>
   1187c:	mov	r2, r0
   11880:	mov	r3, r5
   11884:	ldr	r1, [pc, #36]	; 118b0 <_start@@Base+0x69c>
   11888:	mov	r0, r4
   1188c:	bl	10d78 <fprintf@plt>
   11890:	ldr	r0, [sp, #4]
   11894:	bl	10dc0 <coda_close@plt>
   11898:	adds	r4, r0, #0
   1189c:	movne	r4, #1
   118a0:	b	1184c <_start@@Base+0x638>
   118a4:	strheq	r3, [r2], -r8
   118a8:	strheq	r3, [r2], -r0
   118ac:	andeq	r2, r1, sl, lsl #3
   118b0:			; <UNDEFINED> instruction: 0x000121b9

000118b4 <callback@@Base>:
   118b4:	cmp	r1, #0
   118b8:	push	{r4, lr}
   118bc:	moveq	r3, r0
   118c0:	ldreq	r1, [pc, #88]	; 11920 <callback@@Base+0x6c>
   118c4:	beq	11900 <callback@@Base+0x4c>
   118c8:	cmp	r1, #2
   118cc:	bne	118ec <callback@@Base+0x38>
   118d0:	ldr	r3, [pc, #76]	; 11924 <callback@@Base+0x70>
   118d4:	mov	r2, r0
   118d8:	ldr	r1, [pc, #72]	; 11928 <callback@@Base+0x74>
   118dc:	ldr	r0, [r3]
   118e0:	bl	10d78 <fprintf@plt>
   118e4:	mov	r0, #0
   118e8:	pop	{r4, pc}
   118ec:	cmp	r1, #1
   118f0:	bne	11910 <callback@@Base+0x5c>
   118f4:	ldr	r1, [pc, #48]	; 1192c <callback@@Base+0x78>
   118f8:	mov	r3, r2
   118fc:	mov	r2, r0
   11900:	ldr	r0, [pc, #28]	; 11924 <callback@@Base+0x70>
   11904:	ldr	r0, [r0]
   11908:	bl	10d78 <fprintf@plt>
   1190c:	b	118e4 <callback@@Base+0x30>
   11910:	cmp	r1, #4
   11914:	bne	118e4 <callback@@Base+0x30>
   11918:	pop	{r4, lr}
   1191c:	b	117b8 <_start@@Base+0x5a4>
   11920:			; <UNDEFINED> instruction: 0x000121b9
   11924:	strheq	r3, [r2], -r0
   11928:	andeq	r2, r1, fp, asr #3
   1192c:	strdeq	r2, [r1], -r1

00011930 <__libc_csu_init@@Base>:
   11930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11934:	mov	r7, r0
   11938:	ldr	r6, [pc, #72]	; 11988 <__libc_csu_init@@Base+0x58>
   1193c:	ldr	r5, [pc, #72]	; 1198c <__libc_csu_init@@Base+0x5c>
   11940:	add	r6, pc, r6
   11944:	add	r5, pc, r5
   11948:	sub	r6, r6, r5
   1194c:	mov	r8, r1
   11950:	mov	r9, r2
   11954:	bl	10c74 <coda_match_filefilter@plt-0x20>
   11958:	asrs	r6, r6, #2
   1195c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11960:	mov	r4, #0
   11964:	add	r4, r4, #1
   11968:	ldr	r3, [r5], #4
   1196c:	mov	r2, r9
   11970:	mov	r1, r8
   11974:	mov	r0, r7
   11978:	blx	r3
   1197c:	cmp	r6, r4
   11980:	bne	11964 <__libc_csu_init@@Base+0x34>
   11984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11988:			; <UNDEFINED> instruction: 0x000115b4
   1198c:	andeq	r1, r1, ip, lsr #11

00011990 <__libc_csu_fini@@Base>:
   11990:	bx	lr

Disassembly of section .fini:

00011994 <.fini>:
   11994:	push	{r3, lr}
   11998:	pop	{r3, pc}
